
centos-preinstalled/dirname:     file format elf32-littlearm


Disassembly of section .init:

00010e50 <.init>:
   10e50:	push	{r3, lr}
   10e54:	bl	11344 <close@plt+0x264>
   10e58:	pop	{r3, pc}

Disassembly of section .plt:

00010e5c <fdopen@plt-0x14>:
   10e5c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e60:	ldr	lr, [pc, #4]	; 10e6c <fdopen@plt-0x4>
   10e64:	add	lr, pc, lr
   10e68:	ldr	pc, [lr, #8]!
   10e6c:	muleq	r1, r4, r1

00010e70 <fdopen@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #20, 20	; 0x14000
   10e78:	ldr	pc, [ip, #404]!	; 0x194

00010e7c <calloc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #20, 20	; 0x14000
   10e84:	ldr	pc, [ip, #396]!	; 0x18c

00010e88 <fputs_unlocked@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #20, 20	; 0x14000
   10e90:	ldr	pc, [ip, #388]!	; 0x184

00010e94 <raise@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #20, 20	; 0x14000
   10e9c:	ldr	pc, [ip, #380]!	; 0x17c

00010ea0 <strcmp@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #20, 20	; 0x14000
   10ea8:	ldr	pc, [ip, #372]!	; 0x174

00010eac <fflush@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #20, 20	; 0x14000
   10eb4:	ldr	pc, [ip, #364]!	; 0x16c

00010eb8 <free@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #20, 20	; 0x14000
   10ec0:	ldr	pc, [ip, #356]!	; 0x164

00010ec4 <_exit@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #20, 20	; 0x14000
   10ecc:	ldr	pc, [ip, #348]!	; 0x15c

00010ed0 <memcpy@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #20, 20	; 0x14000
   10ed8:	ldr	pc, [ip, #340]!	; 0x154

00010edc <mbsinit@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #20, 20	; 0x14000
   10ee4:	ldr	pc, [ip, #332]!	; 0x14c

00010ee8 <fwrite_unlocked@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #20, 20	; 0x14000
   10ef0:	ldr	pc, [ip, #324]!	; 0x144

00010ef4 <memcmp@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #20, 20	; 0x14000
   10efc:	ldr	pc, [ip, #316]!	; 0x13c

00010f00 <dcgettext@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #20, 20	; 0x14000
   10f08:	ldr	pc, [ip, #308]!	; 0x134

00010f0c <__stack_chk_fail@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #20, 20	; 0x14000
   10f14:	ldr	pc, [ip, #300]!	; 0x12c

00010f18 <realloc@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #20, 20	; 0x14000
   10f20:	ldr	pc, [ip, #292]!	; 0x124

00010f24 <textdomain@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #20, 20	; 0x14000
   10f2c:	ldr	pc, [ip, #284]!	; 0x11c

00010f30 <iswprint@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #20, 20	; 0x14000
   10f38:	ldr	pc, [ip, #276]!	; 0x114

00010f3c <fwrite@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #20, 20	; 0x14000
   10f44:	ldr	pc, [ip, #268]!	; 0x10c

00010f48 <lseek64@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #20, 20	; 0x14000
   10f50:	ldr	pc, [ip, #260]!	; 0x104

00010f54 <__ctype_get_mb_cur_max@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #20, 20	; 0x14000
   10f5c:	ldr	pc, [ip, #252]!	; 0xfc

00010f60 <strcpy@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #20, 20	; 0x14000
   10f68:	ldr	pc, [ip, #244]!	; 0xf4

00010f6c <__fpending@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #20, 20	; 0x14000
   10f74:	ldr	pc, [ip, #236]!	; 0xec

00010f78 <mbrtowc@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #20, 20	; 0x14000
   10f80:	ldr	pc, [ip, #228]!	; 0xe4

00010f84 <error@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #20, 20	; 0x14000
   10f8c:	ldr	pc, [ip, #220]!	; 0xdc

00010f90 <open64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #20, 20	; 0x14000
   10f98:	ldr	pc, [ip, #212]!	; 0xd4

00010f9c <getenv@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #20, 20	; 0x14000
   10fa4:	ldr	pc, [ip, #204]!	; 0xcc

00010fa8 <malloc@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #20, 20	; 0x14000
   10fb0:	ldr	pc, [ip, #196]!	; 0xc4

00010fb4 <__libc_start_main@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #20, 20	; 0x14000
   10fbc:	ldr	pc, [ip, #188]!	; 0xbc

00010fc0 <__freading@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #20, 20	; 0x14000
   10fc8:	ldr	pc, [ip, #180]!	; 0xb4

00010fcc <__gmon_start__@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #20, 20	; 0x14000
   10fd4:	ldr	pc, [ip, #172]!	; 0xac

00010fd8 <getopt_long@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #20, 20	; 0x14000
   10fe0:	ldr	pc, [ip, #164]!	; 0xa4

00010fe4 <__ctype_b_loc@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #20, 20	; 0x14000
   10fec:	ldr	pc, [ip, #156]!	; 0x9c

00010ff0 <exit@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #20, 20	; 0x14000
   10ff8:	ldr	pc, [ip, #148]!	; 0x94

00010ffc <strlen@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #20, 20	; 0x14000
   11004:	ldr	pc, [ip, #140]!	; 0x8c

00011008 <ungetc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #20, 20	; 0x14000
   11010:	ldr	pc, [ip, #132]!	; 0x84

00011014 <__errno_location@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #20, 20	; 0x14000
   1101c:	ldr	pc, [ip, #124]!	; 0x7c

00011020 <__cxa_atexit@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #20, 20	; 0x14000
   11028:	ldr	pc, [ip, #116]!	; 0x74

0001102c <memset@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #20, 20	; 0x14000
   11034:	ldr	pc, [ip, #108]!	; 0x6c

00011038 <fscanf@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #20, 20	; 0x14000
   11040:	ldr	pc, [ip, #100]!	; 0x64

00011044 <__printf_chk@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #20, 20	; 0x14000
   1104c:	ldr	pc, [ip, #92]!	; 0x5c

00011050 <fileno@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #20, 20	; 0x14000
   11058:	ldr	pc, [ip, #84]!	; 0x54

0001105c <__fprintf_chk@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #20, 20	; 0x14000
   11064:	ldr	pc, [ip, #76]!	; 0x4c

00011068 <fclose@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #20, 20	; 0x14000
   11070:	ldr	pc, [ip, #68]!	; 0x44

00011074 <fseeko64@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #20, 20	; 0x14000
   1107c:	ldr	pc, [ip, #60]!	; 0x3c

00011080 <__uflow@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #20, 20	; 0x14000
   11088:	ldr	pc, [ip, #52]!	; 0x34

0001108c <__overflow@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #20, 20	; 0x14000
   11094:	ldr	pc, [ip, #44]!	; 0x2c

00011098 <setlocale@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #20, 20	; 0x14000
   110a0:	ldr	pc, [ip, #36]!	; 0x24

000110a4 <strrchr@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #20, 20	; 0x14000
   110ac:	ldr	pc, [ip, #28]!

000110b0 <nl_langinfo@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #20, 20	; 0x14000
   110b8:	ldr	pc, [ip, #20]!

000110bc <bindtextdomain@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #20, 20	; 0x14000
   110c4:	ldr	pc, [ip, #12]!

000110c8 <strncmp@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #20, 20	; 0x14000
   110d0:	ldr	pc, [ip, #4]!

000110d4 <abort@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #77824	; 0x13000
   110dc:	ldr	pc, [ip, #4092]!	; 0xffc

000110e0 <close@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #77824	; 0x13000
   110e8:	ldr	pc, [ip, #4084]!	; 0xff4

Disassembly of section .text:

000110ec <close_stdout@@Base-0x5a8>:
   110ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110f0:	mov	r6, r0
   110f4:	sub	sp, sp, #20
   110f8:	ldr	r0, [r1]
   110fc:	mov	r5, r1
   11100:	bl	1190c <close_stdout@@Base+0x278>
   11104:	ldr	r1, [pc, #444]	; 112c8 <close@plt+0x1e8>
   11108:	mov	r0, #6
   1110c:	ldr	r4, [pc, #440]	; 112cc <close@plt+0x1ec>
   11110:	mov	r7, #0
   11114:	add	r1, pc, r1
   11118:	ldr	r9, [pc, #432]	; 112d0 <close@plt+0x1f0>
   1111c:	bl	11098 <setlocale@plt>
   11120:	add	r4, pc, r4
   11124:	ldr	r1, [pc, #424]	; 112d4 <close@plt+0x1f4>
   11128:	mov	sl, r7
   1112c:	mov	r0, r4
   11130:	ldr	r8, [pc, #416]	; 112d8 <close@plt+0x1f8>
   11134:	add	r1, pc, r1
   11138:	add	r9, pc, r9
   1113c:	bl	110bc <bindtextdomain@plt>
   11140:	mov	r0, r4
   11144:	ldr	r4, [pc, #400]	; 112dc <close@plt+0x1fc>
   11148:	bl	10f24 <textdomain@plt>
   1114c:	ldr	r3, [pc, #396]	; 112e0 <close@plt+0x200>
   11150:	add	r8, pc, r8
   11154:	add	r4, pc, r4
   11158:	ldr	r0, [r4, r3]
   1115c:	bl	14240 <close_stdout@@Base+0x2bac>
   11160:	str	sl, [sp]
   11164:	mov	r0, r6
   11168:	mov	r1, r5
   1116c:	mov	r2, r9
   11170:	mov	r3, r8
   11174:	mov	fp, #0
   11178:	bl	10fd8 <getopt_long@plt>
   1117c:	cmn	r0, #1
   11180:	beq	111fc <close@plt+0x11c>
   11184:	cmn	r0, #2
   11188:	beq	111f4 <close@plt+0x114>
   1118c:	cmp	r0, #122	; 0x7a
   11190:	beq	111ec <close@plt+0x10c>
   11194:	cmn	r0, #3
   11198:	beq	111a4 <close@plt+0xc4>
   1119c:	mov	r0, #1
   111a0:	bl	1143c <close@plt+0x35c>
   111a4:	ldr	r2, [pc, #312]	; 112e4 <close@plt+0x204>
   111a8:	ldr	r3, [pc, #312]	; 112e8 <close@plt+0x208>
   111ac:	ldr	r1, [pc, #312]	; 112ec <close@plt+0x20c>
   111b0:	ldr	r0, [r4, r2]
   111b4:	ldr	r3, [r4, r3]
   111b8:	add	r1, pc, r1
   111bc:	ldr	r2, [pc, #300]	; 112f0 <close@plt+0x210>
   111c0:	ldr	r0, [r0]
   111c4:	add	r2, pc, r2
   111c8:	ldr	r3, [r3]
   111cc:	stm	sp, {r1, r2, fp}
   111d0:	ldr	r1, [pc, #284]	; 112f4 <close@plt+0x214>
   111d4:	ldr	r2, [pc, #284]	; 112f8 <close@plt+0x218>
   111d8:	add	r1, pc, r1
   111dc:	add	r2, pc, r2
   111e0:	bl	135f8 <close_stdout@@Base+0x1f64>
   111e4:	mov	r0, fp
   111e8:	bl	10ff0 <exit@plt>
   111ec:	mov	r7, #1
   111f0:	b	11160 <close@plt+0x80>
   111f4:	mov	r0, fp
   111f8:	bl	1143c <close@plt+0x35c>
   111fc:	ldr	r3, [pc, #248]	; 112fc <close@plt+0x21c>
   11200:	ldr	r8, [r4, r3]
   11204:	ldr	r3, [r8]
   11208:	cmp	r6, r3
   1120c:	ble	11294 <close@plt+0x1b4>
   11210:	ldr	r2, [pc, #204]	; 112e4 <close@plt+0x204>
   11214:	cmp	r7, #0
   11218:	ldr	sl, [pc, #224]	; 11300 <close@plt+0x220>
   1121c:	moveq	r7, #10
   11220:	movne	r7, #0
   11224:	ldr	fp, [r4, r2]
   11228:	add	sl, pc, sl
   1122c:	uxtb	r9, r7
   11230:	ldr	r4, [r5, r3, lsl #2]
   11234:	mov	r0, r4
   11238:	bl	117ac <close_stdout@@Base+0x118>
   1123c:	mov	r1, #1
   11240:	ldr	r3, [fp]
   11244:	subs	r2, r0, #0
   11248:	moveq	r4, sl
   1124c:	moveq	r2, r1
   11250:	mov	r0, r4
   11254:	bl	10ee8 <fwrite_unlocked@plt>
   11258:	ldr	r0, [fp]
   1125c:	ldr	r3, [r0, #20]
   11260:	ldr	r2, [r0, #24]
   11264:	cmp	r3, r2
   11268:	addcc	r2, r3, #1
   1126c:	strcc	r2, [r0, #20]
   11270:	strbcc	r9, [r3]
   11274:	bcs	112bc <close@plt+0x1dc>
   11278:	ldr	r3, [r8]
   1127c:	add	r3, r3, #1
   11280:	str	r3, [r8]
   11284:	cmp	r6, r3
   11288:	bgt	11230 <close@plt+0x150>
   1128c:	mov	r0, #0
   11290:	bl	10ff0 <exit@plt>
   11294:	ldr	r1, [pc, #104]	; 11304 <close@plt+0x224>
   11298:	mov	r0, fp
   1129c:	mov	r2, #5
   112a0:	add	r1, pc, r1
   112a4:	bl	10f00 <dcgettext@plt>
   112a8:	mov	r1, fp
   112ac:	mov	r2, r0
   112b0:	mov	r0, fp
   112b4:	bl	10f84 <error@plt>
   112b8:	b	1119c <close@plt+0xbc>
   112bc:	mov	r1, r7
   112c0:	bl	1108c <__overflow@plt>
   112c4:	b	11278 <close@plt+0x198>
   112c8:	andeq	r3, r0, r8, asr #8
   112cc:	andeq	r3, r0, ip, ror r3
   112d0:	andeq	r3, r0, ip, lsr r4
   112d4:	andeq	r3, r0, ip, lsr #8
   112d8:	andeq	r3, r1, ip, asr #26
   112dc:	andeq	r3, r1, r4, lsr #29
   112e0:	strdeq	r0, [r0], -r4
   112e4:	andeq	r0, r0, r0, lsl #2
   112e8:	andeq	r0, r0, ip, ror #1
   112ec:	andeq	r3, r0, r8, asr #7
   112f0:	andeq	r3, r0, ip, asr #7
   112f4:	andeq	r3, r0, r0, lsr #7
   112f8:			; <UNDEFINED> instruction: 0x000032bc
   112fc:	andeq	r0, r0, r8, ror #1
   11300:	andeq	r3, r0, ip, asr #32
   11304:	andeq	r3, r0, r0, lsl #6
   11308:	mov	fp, #0
   1130c:	mov	lr, #0
   11310:	pop	{r1}		; (ldr r1, [sp], #4)
   11314:	mov	r2, sp
   11318:	push	{r2}		; (str r2, [sp, #-4]!)
   1131c:	push	{r0}		; (str r0, [sp, #-4]!)
   11320:	ldr	ip, [pc, #16]	; 11338 <close@plt+0x258>
   11324:	push	{ip}		; (str ip, [sp, #-4]!)
   11328:	ldr	r0, [pc, #12]	; 1133c <close@plt+0x25c>
   1132c:	ldr	r3, [pc, #12]	; 11340 <close@plt+0x260>
   11330:	bl	10fb4 <__libc_start_main@plt>
   11334:	bl	110d4 <abort@plt>
   11338:	andeq	r4, r1, ip, lsr r2
   1133c:	andeq	r1, r1, ip, ror #1
   11340:	ldrdeq	r4, [r1], -r8
   11344:	ldr	r3, [pc, #20]	; 11360 <close@plt+0x280>
   11348:	ldr	r2, [pc, #20]	; 11364 <close@plt+0x284>
   1134c:	add	r3, pc, r3
   11350:	ldr	r2, [r3, r2]
   11354:	cmp	r2, #0
   11358:	bxeq	lr
   1135c:	b	10fcc <__gmon_start__@plt>
   11360:	andeq	r3, r1, ip, lsr #25
   11364:	strdeq	r0, [r0], -r8
   11368:	push	{r3, lr}
   1136c:	movw	r0, #20836	; 0x5164
   11370:	ldr	r3, [pc, #36]	; 1139c <close@plt+0x2bc>
   11374:	movt	r0, #2
   11378:	rsb	r3, r0, r3
   1137c:	cmp	r3, #6
   11380:	popls	{r3, pc}
   11384:	movw	r3, #0
   11388:	movt	r3, #0
   1138c:	cmp	r3, #0
   11390:	popeq	{r3, pc}
   11394:	blx	r3
   11398:	pop	{r3, pc}
   1139c:	andeq	r5, r2, r7, ror #2
   113a0:	push	{r3, lr}
   113a4:	movw	r0, #20836	; 0x5164
   113a8:	movw	r3, #20836	; 0x5164
   113ac:	movt	r0, #2
   113b0:	movt	r3, #2
   113b4:	rsb	r3, r0, r3
   113b8:	asr	r3, r3, #2
   113bc:	add	r3, r3, r3, lsr #31
   113c0:	asrs	r1, r3, #1
   113c4:	popeq	{r3, pc}
   113c8:	movw	r2, #0
   113cc:	movt	r2, #0
   113d0:	cmp	r2, #0
   113d4:	popeq	{r3, pc}
   113d8:	blx	r2
   113dc:	pop	{r3, pc}
   113e0:	push	{r4, lr}
   113e4:	movw	r4, #20836	; 0x5164
   113e8:	movt	r4, #2
   113ec:	ldrb	r3, [r4]
   113f0:	cmp	r3, #0
   113f4:	popne	{r4, pc}
   113f8:	bl	11368 <close@plt+0x288>
   113fc:	mov	r3, #1
   11400:	strb	r3, [r4]
   11404:	pop	{r4, pc}
   11408:	movw	r0, #20128	; 0x4ea0
   1140c:	movt	r0, #2
   11410:	push	{r3, lr}
   11414:	ldr	r3, [r0]
   11418:	cmp	r3, #0
   1141c:	beq	11434 <close@plt+0x354>
   11420:	movw	r3, #0
   11424:	movt	r3, #0
   11428:	cmp	r3, #0
   1142c:	beq	11434 <close@plt+0x354>
   11430:	blx	r3
   11434:	pop	{r3, lr}
   11438:	b	113a0 <close@plt+0x2c0>
   1143c:	push	{r4, r5, r6, lr}
   11440:	subs	r4, r0, #0
   11444:	ldr	r5, [pc, #476]	; 11628 <close@plt+0x548>
   11448:	sub	sp, sp, #8
   1144c:	add	r5, pc, r5
   11450:	beq	11498 <close@plt+0x3b8>
   11454:	ldr	r3, [pc, #464]	; 1162c <close@plt+0x54c>
   11458:	mov	r2, #5
   1145c:	ldr	r1, [pc, #460]	; 11630 <close@plt+0x550>
   11460:	mov	r0, #0
   11464:	ldr	r3, [r5, r3]
   11468:	add	r1, pc, r1
   1146c:	ldr	r6, [r3]
   11470:	bl	10f00 <dcgettext@plt>
   11474:	ldr	r3, [pc, #440]	; 11634 <close@plt+0x554>
   11478:	mov	r1, #1
   1147c:	ldr	r3, [r5, r3]
   11480:	ldr	r3, [r3]
   11484:	mov	r2, r0
   11488:	mov	r0, r6
   1148c:	bl	1105c <__fprintf_chk@plt>
   11490:	mov	r0, r4
   11494:	bl	10ff0 <exit@plt>
   11498:	ldr	r1, [pc, #408]	; 11638 <close@plt+0x558>
   1149c:	mov	r2, #5
   114a0:	add	r1, pc, r1
   114a4:	bl	10f00 <dcgettext@plt>
   114a8:	ldr	r3, [pc, #388]	; 11634 <close@plt+0x554>
   114ac:	ldr	r6, [r5, r3]
   114b0:	ldr	r2, [r6]
   114b4:	mov	r1, r0
   114b8:	mov	r0, #1
   114bc:	bl	11044 <__printf_chk@plt>
   114c0:	ldr	r1, [pc, #372]	; 1163c <close@plt+0x55c>
   114c4:	mov	r2, #5
   114c8:	mov	r0, r4
   114cc:	add	r1, pc, r1
   114d0:	bl	10f00 <dcgettext@plt>
   114d4:	ldr	r3, [pc, #356]	; 11640 <close@plt+0x560>
   114d8:	ldr	r5, [r5, r3]
   114dc:	ldr	r1, [r5]
   114e0:	bl	10e88 <fputs_unlocked@plt>
   114e4:	ldr	r1, [pc, #344]	; 11644 <close@plt+0x564>
   114e8:	mov	r2, #5
   114ec:	mov	r0, r4
   114f0:	add	r1, pc, r1
   114f4:	bl	10f00 <dcgettext@plt>
   114f8:	ldr	r1, [r5]
   114fc:	bl	10e88 <fputs_unlocked@plt>
   11500:	ldr	r1, [pc, #320]	; 11648 <close@plt+0x568>
   11504:	mov	r2, #5
   11508:	mov	r0, r4
   1150c:	add	r1, pc, r1
   11510:	bl	10f00 <dcgettext@plt>
   11514:	ldr	r1, [r5]
   11518:	bl	10e88 <fputs_unlocked@plt>
   1151c:	ldr	r1, [pc, #296]	; 1164c <close@plt+0x56c>
   11520:	mov	r2, #5
   11524:	mov	r0, r4
   11528:	add	r1, pc, r1
   1152c:	bl	10f00 <dcgettext@plt>
   11530:	ldr	r1, [r5]
   11534:	bl	10e88 <fputs_unlocked@plt>
   11538:	ldr	r1, [pc, #272]	; 11650 <close@plt+0x570>
   1153c:	mov	r2, #5
   11540:	mov	r0, r4
   11544:	add	r1, pc, r1
   11548:	bl	10f00 <dcgettext@plt>
   1154c:	ldr	r3, [r6]
   11550:	mov	r2, r3
   11554:	str	r3, [sp]
   11558:	mov	r1, r0
   1155c:	mov	r0, #1
   11560:	bl	11044 <__printf_chk@plt>
   11564:	ldr	r1, [pc, #232]	; 11654 <close@plt+0x574>
   11568:	mov	r2, #5
   1156c:	mov	r0, r4
   11570:	add	r1, pc, r1
   11574:	bl	10f00 <dcgettext@plt>
   11578:	ldr	r2, [pc, #216]	; 11658 <close@plt+0x578>
   1157c:	ldr	r3, [pc, #216]	; 1165c <close@plt+0x57c>
   11580:	add	r2, pc, r2
   11584:	add	r3, pc, r3
   11588:	mov	r1, r0
   1158c:	mov	r0, #1
   11590:	bl	11044 <__printf_chk@plt>
   11594:	mov	r0, #5
   11598:	mov	r1, r4
   1159c:	bl	11098 <setlocale@plt>
   115a0:	cmp	r0, #0
   115a4:	beq	115c0 <close@plt+0x4e0>
   115a8:	ldr	r1, [pc, #176]	; 11660 <close@plt+0x580>
   115ac:	mov	r2, #3
   115b0:	add	r1, pc, r1
   115b4:	bl	110c8 <strncmp@plt>
   115b8:	cmp	r0, #0
   115bc:	bne	115f4 <close@plt+0x514>
   115c0:	ldr	r1, [pc, #156]	; 11664 <close@plt+0x584>
   115c4:	mov	r2, #5
   115c8:	mov	r0, #0
   115cc:	add	r1, pc, r1
   115d0:	bl	10f00 <dcgettext@plt>
   115d4:	mov	r5, r0
   115d8:	ldr	r0, [r6]
   115dc:	bl	11868 <close_stdout@@Base+0x1d4>
   115e0:	mov	r1, r5
   115e4:	mov	r2, r0
   115e8:	mov	r0, #1
   115ec:	bl	11044 <__printf_chk@plt>
   115f0:	b	11490 <close@plt+0x3b0>
   115f4:	ldr	r1, [pc, #108]	; 11668 <close@plt+0x588>
   115f8:	mov	r2, #5
   115fc:	mov	r0, r4
   11600:	add	r1, pc, r1
   11604:	bl	10f00 <dcgettext@plt>
   11608:	mov	r5, r0
   1160c:	ldr	r0, [r6]
   11610:	bl	11868 <close_stdout@@Base+0x1d4>
   11614:	mov	r1, r5
   11618:	mov	r2, r0
   1161c:	mov	r0, #1
   11620:	bl	11044 <__printf_chk@plt>
   11624:	b	115c0 <close@plt+0x4e0>
   11628:	andeq	r3, r1, ip, lsr #23
   1162c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11630:	andeq	r2, r0, r0, lsl lr
   11634:	andeq	r0, r0, ip, lsl #2
   11638:	andeq	r2, r0, r0, lsl #28
   1163c:	strdeq	r2, [r0], -r0
   11640:	andeq	r0, r0, r0, lsl #2
   11644:	andeq	r2, r0, r4, ror #28
   11648:	andeq	r2, r0, r8, lsl #29
   1164c:	muleq	r0, ip, lr
   11650:			; <UNDEFINED> instruction: 0x00002eb8
   11654:	andeq	r2, r0, r0, lsl pc
   11658:	andeq	r2, r0, r8, lsl pc
   1165c:	andeq	r2, r0, r4, lsr #30
   11660:	andeq	r2, r0, r0, lsr #30
   11664:	andeq	r2, r0, r0, asr pc
   11668:	ldrdeq	r2, [r0], -r4
   1166c:	ldr	r3, [pc, #8]	; 1167c <close@plt+0x59c>
   11670:	add	r3, pc, r3
   11674:	str	r0, [r3]
   11678:	bx	lr
   1167c:	strdeq	r3, [r1], -r0
   11680:	ldr	r3, [pc, #8]	; 11690 <close@plt+0x5b0>
   11684:	add	r3, pc, r3
   11688:	strb	r0, [r3, #4]
   1168c:	bx	lr
   11690:	ldrdeq	r3, [r1], -ip

00011694 <close_stdout@@Base>:
   11694:	push	{r4, r5, r6, r7, lr}
   11698:	sub	sp, sp, #12
   1169c:	ldr	r4, [pc, #228]	; 11788 <close_stdout@@Base+0xf4>
   116a0:	ldr	r3, [pc, #228]	; 1178c <close_stdout@@Base+0xf8>
   116a4:	add	r4, pc, r4
   116a8:	ldr	r3, [r4, r3]
   116ac:	ldr	r0, [r3]
   116b0:	bl	13974 <close_stdout@@Base+0x22e0>
   116b4:	cmp	r0, #0
   116b8:	beq	116e0 <close_stdout@@Base+0x4c>
   116bc:	ldr	r3, [pc, #204]	; 11790 <close_stdout@@Base+0xfc>
   116c0:	add	r3, pc, r3
   116c4:	ldrb	r3, [r3, #4]
   116c8:	cmp	r3, #0
   116cc:	beq	11700 <close_stdout@@Base+0x6c>
   116d0:	bl	11014 <__errno_location@plt>
   116d4:	ldr	r3, [r0]
   116d8:	cmp	r3, #32
   116dc:	bne	11700 <close_stdout@@Base+0x6c>
   116e0:	ldr	r3, [pc, #172]	; 11794 <close_stdout@@Base+0x100>
   116e4:	ldr	r3, [r4, r3]
   116e8:	ldr	r0, [r3]
   116ec:	bl	13974 <close_stdout@@Base+0x22e0>
   116f0:	cmp	r0, #0
   116f4:	bne	11754 <close_stdout@@Base+0xc0>
   116f8:	add	sp, sp, #12
   116fc:	pop	{r4, r5, r6, r7, pc}
   11700:	ldr	r1, [pc, #144]	; 11798 <close_stdout@@Base+0x104>
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	add	r1, pc, r1
   11710:	bl	10f00 <dcgettext@plt>
   11714:	ldr	r3, [pc, #128]	; 1179c <close_stdout@@Base+0x108>
   11718:	ldr	r5, [pc, r3]
   1171c:	cmp	r5, #0
   11720:	mov	r6, r0
   11724:	beq	11764 <close_stdout@@Base+0xd0>
   11728:	bl	11014 <__errno_location@plt>
   1172c:	ldr	r7, [r0]
   11730:	mov	r0, r5
   11734:	bl	13008 <close_stdout@@Base+0x1974>
   11738:	ldr	r2, [pc, #96]	; 117a0 <close_stdout@@Base+0x10c>
   1173c:	str	r6, [sp]
   11740:	mov	r1, r7
   11744:	add	r2, pc, r2
   11748:	mov	r3, r0
   1174c:	mov	r0, #0
   11750:	bl	10f84 <error@plt>
   11754:	ldr	r3, [pc, #72]	; 117a4 <close_stdout@@Base+0x110>
   11758:	ldr	r3, [r4, r3]
   1175c:	ldr	r0, [r3]
   11760:	bl	10ec4 <_exit@plt>
   11764:	bl	11014 <__errno_location@plt>
   11768:	ldr	r2, [pc, #56]	; 117a8 <close_stdout@@Base+0x114>
   1176c:	add	r2, pc, r2
   11770:	mov	r3, r0
   11774:	mov	r0, r5
   11778:	ldr	r1, [r3]
   1177c:	mov	r3, r6
   11780:	bl	10f84 <error@plt>
   11784:	b	11754 <close_stdout@@Base+0xc0>
   11788:	andeq	r3, r1, r4, asr r9
   1178c:	andeq	r0, r0, r0, lsl #2
   11790:	andeq	r3, r1, r0, lsr #21
   11794:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11798:	andeq	r2, r0, r4, asr #29
   1179c:	andeq	r3, r1, r8, asr #20
   117a0:	muleq	r0, r8, lr
   117a4:	andeq	r0, r0, r4, lsl #2
   117a8:	andeq	r2, r0, r4, ror lr
   117ac:	push	{r3, r4, r5, lr}
   117b0:	mov	r4, r0
   117b4:	ldrb	r5, [r0]
   117b8:	subs	r3, r5, #47	; 0x2f
   117bc:	rsbs	r5, r3, #0
   117c0:	adcs	r5, r5, r3
   117c4:	bl	11868 <close_stdout@@Base+0x1d4>
   117c8:	rsb	r3, r4, r0
   117cc:	cmp	r3, r5
   117d0:	bls	11808 <close_stdout@@Base+0x174>
   117d4:	sub	r0, r3, #1
   117d8:	ldrb	r2, [r4, r0]
   117dc:	cmp	r2, #47	; 0x2f
   117e0:	beq	117f8 <close_stdout@@Base+0x164>
   117e4:	b	11808 <close_stdout@@Base+0x174>
   117e8:	ldrb	r2, [r4, r3]
   117ec:	cmp	r2, #47	; 0x2f
   117f0:	popne	{r3, r4, r5, pc}
   117f4:	mov	r0, r3
   117f8:	cmp	r5, r0
   117fc:	sub	r3, r0, #1
   11800:	bcc	117e8 <close_stdout@@Base+0x154>
   11804:	pop	{r3, r4, r5, pc}
   11808:	mov	r0, r3
   1180c:	pop	{r3, r4, r5, pc}
   11810:	push	{r4, r5, r6, r7, r8, lr}
   11814:	mov	r8, r0
   11818:	bl	117ac <close_stdout@@Base+0x118>
   1181c:	rsbs	r6, r0, #1
   11820:	add	r7, r0, #1
   11824:	mov	r4, r0
   11828:	movcc	r6, #0
   1182c:	add	r0, r6, r7
   11830:	bl	10fa8 <malloc@plt>
   11834:	subs	r5, r0, #0
   11838:	beq	11860 <close_stdout@@Base+0x1cc>
   1183c:	mov	r2, r4
   11840:	mov	r1, r8
   11844:	bl	10ed0 <memcpy@plt>
   11848:	cmp	r6, #0
   1184c:	movne	r3, #46	; 0x2e
   11850:	strbne	r3, [r5, r4]
   11854:	movne	r4, r7
   11858:	mov	r3, #0
   1185c:	strb	r3, [r5, r4]
   11860:	mov	r0, r5
   11864:	pop	{r4, r5, r6, r7, r8, pc}
   11868:	ldrb	r3, [r0]
   1186c:	cmp	r3, #47	; 0x2f
   11870:	bne	1188c <close_stdout@@Base+0x1f8>
   11874:	add	r2, r0, #1
   11878:	mov	r0, r2
   1187c:	add	r2, r2, #1
   11880:	ldrb	r3, [r0]
   11884:	cmp	r3, #47	; 0x2f
   11888:	beq	11878 <close_stdout@@Base+0x1e4>
   1188c:	cmp	r3, #0
   11890:	bxeq	lr
   11894:	mov	r2, r0
   11898:	mov	r1, #0
   1189c:	cmp	r3, #47	; 0x2f
   118a0:	moveq	r1, #1
   118a4:	beq	118b4 <close_stdout@@Base+0x220>
   118a8:	cmp	r1, #0
   118ac:	movne	r0, r2
   118b0:	movne	r1, #0
   118b4:	ldrb	r3, [r2, #1]!
   118b8:	cmp	r3, #0
   118bc:	bne	1189c <close_stdout@@Base+0x208>
   118c0:	bx	lr
   118c4:	push	{r4, lr}
   118c8:	mov	r4, r0
   118cc:	bl	10ffc <strlen@plt>
   118d0:	cmp	r0, #1
   118d4:	popls	{r4, pc}
   118d8:	sub	r3, r0, #1
   118dc:	ldrb	r2, [r4, r3]
   118e0:	cmp	r2, #47	; 0x2f
   118e4:	popne	{r4, pc}
   118e8:	mov	r0, r3
   118ec:	cmp	r0, #1
   118f0:	sub	r3, r3, #1
   118f4:	beq	11908 <close_stdout@@Base+0x274>
   118f8:	ldrb	r2, [r4, r3]
   118fc:	cmp	r2, #47	; 0x2f
   11900:	popne	{r4, pc}
   11904:	b	118e8 <close_stdout@@Base+0x254>
   11908:	pop	{r4, pc}
   1190c:	push	{r3, r4, r5, r6, r7, lr}
   11910:	subs	r4, r0, #0
   11914:	ldr	r5, [pc, #172]	; 119c8 <close_stdout@@Base+0x334>
   11918:	add	r5, pc, r5
   1191c:	beq	119a4 <close_stdout@@Base+0x310>
   11920:	mov	r1, #47	; 0x2f
   11924:	bl	110a4 <strrchr@plt>
   11928:	subs	r6, r0, #0
   1192c:	beq	11988 <close_stdout@@Base+0x2f4>
   11930:	add	r7, r6, #1
   11934:	rsb	r3, r4, r7
   11938:	cmp	r3, #6
   1193c:	ble	11988 <close_stdout@@Base+0x2f4>
   11940:	ldr	r1, [pc, #132]	; 119cc <close_stdout@@Base+0x338>
   11944:	sub	r0, r6, #6
   11948:	mov	r2, #7
   1194c:	add	r1, pc, r1
   11950:	bl	110c8 <strncmp@plt>
   11954:	cmp	r0, #0
   11958:	bne	11988 <close_stdout@@Base+0x2f4>
   1195c:	ldr	r1, [pc, #108]	; 119d0 <close_stdout@@Base+0x33c>
   11960:	mov	r0, r7
   11964:	mov	r2, #3
   11968:	add	r1, pc, r1
   1196c:	bl	110c8 <strncmp@plt>
   11970:	cmp	r0, #0
   11974:	movne	r4, r7
   11978:	ldreq	r3, [pc, #84]	; 119d4 <close_stdout@@Base+0x340>
   1197c:	addeq	r4, r6, #4
   11980:	ldreq	r3, [r5, r3]
   11984:	streq	r4, [r3]
   11988:	ldr	r2, [pc, #72]	; 119d8 <close_stdout@@Base+0x344>
   1198c:	ldr	r3, [pc, #72]	; 119dc <close_stdout@@Base+0x348>
   11990:	ldr	r2, [r5, r2]
   11994:	str	r4, [r2]
   11998:	ldr	r3, [r5, r3]
   1199c:	str	r4, [r3]
   119a0:	pop	{r3, r4, r5, r6, r7, pc}
   119a4:	ldr	r3, [pc, #52]	; 119e0 <close_stdout@@Base+0x34c>
   119a8:	mov	r1, #1
   119ac:	ldr	r0, [pc, #48]	; 119e4 <close_stdout@@Base+0x350>
   119b0:	mov	r2, #55	; 0x37
   119b4:	ldr	r3, [r5, r3]
   119b8:	add	r0, pc, r0
   119bc:	ldr	r3, [r3]
   119c0:	bl	10f3c <fwrite@plt>
   119c4:	bl	110d4 <abort@plt>
   119c8:	andeq	r3, r1, r0, ror #13
   119cc:	ldrdeq	r2, [r0], -r0
   119d0:			; <UNDEFINED> instruction: 0x00002cbc
   119d4:	andeq	r0, r0, r4, lsl r1
   119d8:	andeq	r0, r0, ip, lsl #2
   119dc:	andeq	r0, r0, r8, lsl #2
   119e0:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   119e4:	andeq	r2, r0, ip, lsr #24
   119e8:	push	{r3, lr}
   119ec:	mov	r3, r0
   119f0:	mov	r2, #0
   119f4:	cmp	r1, #8
   119f8:	str	r2, [r3], #4
   119fc:	add	r3, r3, #4
   11a00:	str	r2, [r0, #4]
   11a04:	str	r2, [r3], #4
   11a08:	str	r2, [r3], #4
   11a0c:	str	r2, [r3], #4
   11a10:	str	r2, [r3], #4
   11a14:	str	r2, [r3], #4
   11a18:	str	r2, [r3], #4
   11a1c:	str	r2, [r3], #4
   11a20:	str	r2, [r3], #4
   11a24:	str	r2, [r3], #4
   11a28:	str	r2, [r3]
   11a2c:	beq	11a38 <close_stdout@@Base+0x3a4>
   11a30:	str	r1, [r0]
   11a34:	pop	{r3, pc}
   11a38:	bl	110d4 <abort@plt>
   11a3c:	push	{r4, r5, r6, lr}
   11a40:	mov	r4, r0
   11a44:	mov	r6, r1
   11a48:	mov	r0, #0
   11a4c:	mov	r1, r4
   11a50:	mov	r2, #5
   11a54:	bl	10f00 <dcgettext@plt>
   11a58:	cmp	r0, r4
   11a5c:	mov	r5, r0
   11a60:	beq	11a68 <close_stdout@@Base+0x3d4>
   11a64:	pop	{r4, r5, r6, pc}
   11a68:	bl	139f4 <close_stdout@@Base+0x2360>
   11a6c:	ldrb	r3, [r0]
   11a70:	bic	r3, r3, #32
   11a74:	cmp	r3, #85	; 0x55
   11a78:	bne	11aec <close_stdout@@Base+0x458>
   11a7c:	ldrb	r3, [r0, #1]
   11a80:	bic	r3, r3, #32
   11a84:	cmp	r3, #84	; 0x54
   11a88:	bne	11ad8 <close_stdout@@Base+0x444>
   11a8c:	ldrb	r3, [r0, #2]
   11a90:	bic	r3, r3, #32
   11a94:	cmp	r3, #70	; 0x46
   11a98:	bne	11ad8 <close_stdout@@Base+0x444>
   11a9c:	ldrb	r3, [r0, #3]
   11aa0:	cmp	r3, #45	; 0x2d
   11aa4:	bne	11ad8 <close_stdout@@Base+0x444>
   11aa8:	ldrb	r3, [r0, #4]
   11aac:	cmp	r3, #56	; 0x38
   11ab0:	bne	11ad8 <close_stdout@@Base+0x444>
   11ab4:	ldrb	r3, [r0, #5]
   11ab8:	cmp	r3, #0
   11abc:	bne	11ad8 <close_stdout@@Base+0x444>
   11ac0:	ldrb	r3, [r5]
   11ac4:	cmp	r3, #96	; 0x60
   11ac8:	beq	11b64 <close_stdout@@Base+0x4d0>
   11acc:	ldr	r0, [pc, #180]	; 11b88 <close_stdout@@Base+0x4f4>
   11ad0:	add	r0, pc, r0
   11ad4:	pop	{r4, r5, r6, pc}
   11ad8:	cmp	r6, #7
   11adc:	beq	11b70 <close_stdout@@Base+0x4dc>
   11ae0:	ldr	r0, [pc, #164]	; 11b8c <close_stdout@@Base+0x4f8>
   11ae4:	add	r0, pc, r0
   11ae8:	pop	{r4, r5, r6, pc}
   11aec:	cmp	r3, #71	; 0x47
   11af0:	bne	11ad8 <close_stdout@@Base+0x444>
   11af4:	ldrb	r3, [r0, #1]
   11af8:	bic	r3, r3, #32
   11afc:	cmp	r3, #66	; 0x42
   11b00:	bne	11ad8 <close_stdout@@Base+0x444>
   11b04:	ldrb	r3, [r0, #2]
   11b08:	cmp	r3, #49	; 0x31
   11b0c:	bne	11ad8 <close_stdout@@Base+0x444>
   11b10:	ldrb	r3, [r0, #3]
   11b14:	cmp	r3, #56	; 0x38
   11b18:	bne	11ad8 <close_stdout@@Base+0x444>
   11b1c:	ldrb	r3, [r0, #4]
   11b20:	cmp	r3, #48	; 0x30
   11b24:	bne	11ad8 <close_stdout@@Base+0x444>
   11b28:	ldrb	r3, [r0, #5]
   11b2c:	cmp	r3, #51	; 0x33
   11b30:	bne	11ad8 <close_stdout@@Base+0x444>
   11b34:	ldrb	r3, [r0, #6]
   11b38:	cmp	r3, #48	; 0x30
   11b3c:	bne	11ad8 <close_stdout@@Base+0x444>
   11b40:	ldrb	r3, [r0, #7]
   11b44:	cmp	r3, #0
   11b48:	bne	11ad8 <close_stdout@@Base+0x444>
   11b4c:	ldrb	r3, [r5]
   11b50:	cmp	r3, #96	; 0x60
   11b54:	beq	11b7c <close_stdout@@Base+0x4e8>
   11b58:	ldr	r0, [pc, #48]	; 11b90 <close_stdout@@Base+0x4fc>
   11b5c:	add	r0, pc, r0
   11b60:	pop	{r4, r5, r6, pc}
   11b64:	ldr	r0, [pc, #40]	; 11b94 <close_stdout@@Base+0x500>
   11b68:	add	r0, pc, r0
   11b6c:	pop	{r4, r5, r6, pc}
   11b70:	ldr	r0, [pc, #32]	; 11b98 <close_stdout@@Base+0x504>
   11b74:	add	r0, pc, r0
   11b78:	pop	{r4, r5, r6, pc}
   11b7c:	ldr	r0, [pc, #24]	; 11b9c <close_stdout@@Base+0x508>
   11b80:	add	r0, pc, r0
   11b84:	pop	{r4, r5, r6, pc}
   11b88:	andeq	r2, r0, r8, ror fp
   11b8c:	andeq	r2, r0, ip, ror #22
   11b90:	strdeq	r2, [r0], -r0
   11b94:	strdeq	r2, [r0], -r4
   11b98:	andeq	r2, r0, r0, ror #21
   11b9c:	ldrdeq	r2, [r0], -r8
   11ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ba4:	sub	sp, sp, #124	; 0x7c
   11ba8:	ldr	ip, [pc, #3304]	; 12898 <close_stdout@@Base+0x1204>
   11bac:	mov	sl, r1
   11bb0:	str	r0, [sp, #40]	; 0x28
   11bb4:	mov	r8, r3
   11bb8:	ldr	r0, [pc, #3292]	; 1289c <close_stdout@@Base+0x1208>
   11bbc:	add	ip, pc, ip
   11bc0:	str	r2, [sp, #32]
   11bc4:	ldr	r1, [sp, #164]	; 0xa4
   11bc8:	mov	r3, ip
   11bcc:	ldr	r0, [ip, r0]
   11bd0:	ldr	r2, [sp, #172]	; 0xac
   11bd4:	ubfx	r1, r1, #1, #1
   11bd8:	str	r1, [sp, #36]	; 0x24
   11bdc:	str	r0, [sp, #56]	; 0x38
   11be0:	ldr	r0, [sp, #168]	; 0xa8
   11be4:	ldr	r1, [sp, #176]	; 0xb0
   11be8:	str	r2, [sp, #72]	; 0x48
   11bec:	str	r0, [sp, #48]	; 0x30
   11bf0:	ldr	r0, [sp, #56]	; 0x38
   11bf4:	str	r1, [sp, #68]	; 0x44
   11bf8:	ldr	r3, [r0]
   11bfc:	str	r3, [sp, #116]	; 0x74
   11c00:	bl	10f54 <__ctype_get_mb_cur_max@plt>
   11c04:	ldr	r2, [sp, #160]	; 0xa0
   11c08:	str	r0, [sp, #64]	; 0x40
   11c0c:	cmp	r2, #8
   11c10:	addls	pc, pc, r2, lsl #2
   11c14:	b	12774 <close_stdout@@Base+0x10e0>
   11c18:	b	11c3c <close_stdout@@Base+0x5a8>
   11c1c:	b	1248c <close_stdout@@Base+0xdf8>
   11c20:	b	124bc <close_stdout@@Base+0xe28>
   11c24:	b	1236c <close_stdout@@Base+0xcd8>
   11c28:	b	123ac <close_stdout@@Base+0xd18>
   11c2c:	b	123d8 <close_stdout@@Base+0xd44>
   11c30:	b	123f8 <close_stdout@@Base+0xd64>
   11c34:	b	123f8 <close_stdout@@Base+0xd64>
   11c38:	b	123f8 <close_stdout@@Base+0xd64>
   11c3c:	mov	r2, #0
   11c40:	str	r2, [sp, #36]	; 0x24
   11c44:	mov	r9, r2
   11c48:	str	r2, [sp, #24]
   11c4c:	str	r2, [sp, #28]
   11c50:	str	r2, [sp, #52]	; 0x34
   11c54:	ldr	r0, [sp, #36]	; 0x24
   11c58:	mov	fp, #0
   11c5c:	ldr	r1, [sp, #24]
   11c60:	eor	r2, r0, #1
   11c64:	eor	r3, r1, #1
   11c68:	and	r3, r2, r3
   11c6c:	and	r2, r1, r0
   11c70:	str	r3, [sp, #44]	; 0x2c
   11c74:	str	r2, [sp, #76]	; 0x4c
   11c78:	cmn	r8, #1
   11c7c:	beq	11ffc <close_stdout@@Base+0x968>
   11c80:	subs	r3, fp, r8
   11c84:	movne	r3, #1
   11c88:	cmp	r3, #0
   11c8c:	beq	12014 <close_stdout@@Base+0x980>
   11c90:	ldr	r3, [sp, #28]
   11c94:	ldr	r0, [sp, #24]
   11c98:	adds	r7, r3, #0
   11c9c:	movne	r7, #1
   11ca0:	ands	r6, r7, r0
   11ca4:	bne	12500 <close_stdout@@Base+0xe6c>
   11ca8:	ldr	r1, [sp, #32]
   11cac:	add	r5, r1, fp
   11cb0:	ldrb	r4, [r5]
   11cb4:	cmp	r4, #126	; 0x7e
   11cb8:	addls	pc, pc, r4, lsl #2
   11cbc:	b	12280 <close_stdout@@Base+0xbec>
   11cc0:	b	1218c <close_stdout@@Base+0xaf8>
   11cc4:	b	12280 <close_stdout@@Base+0xbec>
   11cc8:	b	12280 <close_stdout@@Base+0xbec>
   11ccc:	b	12280 <close_stdout@@Base+0xbec>
   11cd0:	b	12280 <close_stdout@@Base+0xbec>
   11cd4:	b	12280 <close_stdout@@Base+0xbec>
   11cd8:	b	12280 <close_stdout@@Base+0xbec>
   11cdc:	b	12174 <close_stdout@@Base+0xae0>
   11ce0:	b	1215c <close_stdout@@Base+0xac8>
   11ce4:	b	12184 <close_stdout@@Base+0xaf0>
   11ce8:	b	1217c <close_stdout@@Base+0xae8>
   11cec:	b	1216c <close_stdout@@Base+0xad8>
   11cf0:	b	12164 <close_stdout@@Base+0xad0>
   11cf4:	b	12128 <close_stdout@@Base+0xa94>
   11cf8:	b	12280 <close_stdout@@Base+0xbec>
   11cfc:	b	12280 <close_stdout@@Base+0xbec>
   11d00:	b	12280 <close_stdout@@Base+0xbec>
   11d04:	b	12280 <close_stdout@@Base+0xbec>
   11d08:	b	12280 <close_stdout@@Base+0xbec>
   11d0c:	b	12280 <close_stdout@@Base+0xbec>
   11d10:	b	12280 <close_stdout@@Base+0xbec>
   11d14:	b	12280 <close_stdout@@Base+0xbec>
   11d18:	b	12280 <close_stdout@@Base+0xbec>
   11d1c:	b	12280 <close_stdout@@Base+0xbec>
   11d20:	b	12280 <close_stdout@@Base+0xbec>
   11d24:	b	12280 <close_stdout@@Base+0xbec>
   11d28:	b	12280 <close_stdout@@Base+0xbec>
   11d2c:	b	12280 <close_stdout@@Base+0xbec>
   11d30:	b	12280 <close_stdout@@Base+0xbec>
   11d34:	b	12280 <close_stdout@@Base+0xbec>
   11d38:	b	12280 <close_stdout@@Base+0xbec>
   11d3c:	b	12280 <close_stdout@@Base+0xbec>
   11d40:	b	120b4 <close_stdout@@Base+0xa20>
   11d44:	b	120b4 <close_stdout@@Base+0xa20>
   11d48:	b	120b4 <close_stdout@@Base+0xa20>
   11d4c:	b	120ac <close_stdout@@Base+0xa18>
   11d50:	b	120b4 <close_stdout@@Base+0xa20>
   11d54:	b	11f88 <close_stdout@@Base+0x8f4>
   11d58:	b	120b4 <close_stdout@@Base+0xa20>
   11d5c:	b	12228 <close_stdout@@Base+0xb94>
   11d60:	b	120b4 <close_stdout@@Base+0xa20>
   11d64:	b	120b4 <close_stdout@@Base+0xa20>
   11d68:	b	120b4 <close_stdout@@Base+0xa20>
   11d6c:	b	11f88 <close_stdout@@Base+0x8f4>
   11d70:	b	11f88 <close_stdout@@Base+0x8f4>
   11d74:	b	11f88 <close_stdout@@Base+0x8f4>
   11d78:	b	11f88 <close_stdout@@Base+0x8f4>
   11d7c:	b	11f88 <close_stdout@@Base+0x8f4>
   11d80:	b	11f88 <close_stdout@@Base+0x8f4>
   11d84:	b	11f88 <close_stdout@@Base+0x8f4>
   11d88:	b	11f88 <close_stdout@@Base+0x8f4>
   11d8c:	b	11f88 <close_stdout@@Base+0x8f4>
   11d90:	b	11f88 <close_stdout@@Base+0x8f4>
   11d94:	b	11f88 <close_stdout@@Base+0x8f4>
   11d98:	b	11f88 <close_stdout@@Base+0x8f4>
   11d9c:	b	11f88 <close_stdout@@Base+0x8f4>
   11da0:	b	11f88 <close_stdout@@Base+0x8f4>
   11da4:	b	11f88 <close_stdout@@Base+0x8f4>
   11da8:	b	11f88 <close_stdout@@Base+0x8f4>
   11dac:	b	120b4 <close_stdout@@Base+0xa20>
   11db0:	b	120b4 <close_stdout@@Base+0xa20>
   11db4:	b	120b4 <close_stdout@@Base+0xa20>
   11db8:	b	120b4 <close_stdout@@Base+0xa20>
   11dbc:	b	11ebc <close_stdout@@Base+0x828>
   11dc0:	b	12280 <close_stdout@@Base+0xbec>
   11dc4:	b	11f88 <close_stdout@@Base+0x8f4>
   11dc8:	b	11f88 <close_stdout@@Base+0x8f4>
   11dcc:	b	11f88 <close_stdout@@Base+0x8f4>
   11dd0:	b	11f88 <close_stdout@@Base+0x8f4>
   11dd4:	b	11f88 <close_stdout@@Base+0x8f4>
   11dd8:	b	11f88 <close_stdout@@Base+0x8f4>
   11ddc:	b	11f88 <close_stdout@@Base+0x8f4>
   11de0:	b	11f88 <close_stdout@@Base+0x8f4>
   11de4:	b	11f88 <close_stdout@@Base+0x8f4>
   11de8:	b	11f88 <close_stdout@@Base+0x8f4>
   11dec:	b	11f88 <close_stdout@@Base+0x8f4>
   11df0:	b	11f88 <close_stdout@@Base+0x8f4>
   11df4:	b	11f88 <close_stdout@@Base+0x8f4>
   11df8:	b	11f88 <close_stdout@@Base+0x8f4>
   11dfc:	b	11f88 <close_stdout@@Base+0x8f4>
   11e00:	b	11f88 <close_stdout@@Base+0x8f4>
   11e04:	b	11f88 <close_stdout@@Base+0x8f4>
   11e08:	b	11f88 <close_stdout@@Base+0x8f4>
   11e0c:	b	11f88 <close_stdout@@Base+0x8f4>
   11e10:	b	11f88 <close_stdout@@Base+0x8f4>
   11e14:	b	11f88 <close_stdout@@Base+0x8f4>
   11e18:	b	11f88 <close_stdout@@Base+0x8f4>
   11e1c:	b	11f88 <close_stdout@@Base+0x8f4>
   11e20:	b	11f88 <close_stdout@@Base+0x8f4>
   11e24:	b	11f88 <close_stdout@@Base+0x8f4>
   11e28:	b	11f88 <close_stdout@@Base+0x8f4>
   11e2c:	b	120b4 <close_stdout@@Base+0xa20>
   11e30:	b	1220c <close_stdout@@Base+0xb78>
   11e34:	b	11f88 <close_stdout@@Base+0x8f4>
   11e38:	b	120b4 <close_stdout@@Base+0xa20>
   11e3c:	b	11f88 <close_stdout@@Base+0x8f4>
   11e40:	b	120b4 <close_stdout@@Base+0xa20>
   11e44:	b	11f88 <close_stdout@@Base+0x8f4>
   11e48:	b	11f88 <close_stdout@@Base+0x8f4>
   11e4c:	b	11f88 <close_stdout@@Base+0x8f4>
   11e50:	b	11f88 <close_stdout@@Base+0x8f4>
   11e54:	b	11f88 <close_stdout@@Base+0x8f4>
   11e58:	b	11f88 <close_stdout@@Base+0x8f4>
   11e5c:	b	11f88 <close_stdout@@Base+0x8f4>
   11e60:	b	11f88 <close_stdout@@Base+0x8f4>
   11e64:	b	11f88 <close_stdout@@Base+0x8f4>
   11e68:	b	11f88 <close_stdout@@Base+0x8f4>
   11e6c:	b	11f88 <close_stdout@@Base+0x8f4>
   11e70:	b	11f88 <close_stdout@@Base+0x8f4>
   11e74:	b	11f88 <close_stdout@@Base+0x8f4>
   11e78:	b	11f88 <close_stdout@@Base+0x8f4>
   11e7c:	b	11f88 <close_stdout@@Base+0x8f4>
   11e80:	b	11f88 <close_stdout@@Base+0x8f4>
   11e84:	b	11f88 <close_stdout@@Base+0x8f4>
   11e88:	b	11f88 <close_stdout@@Base+0x8f4>
   11e8c:	b	11f88 <close_stdout@@Base+0x8f4>
   11e90:	b	11f88 <close_stdout@@Base+0x8f4>
   11e94:	b	11f88 <close_stdout@@Base+0x8f4>
   11e98:	b	11f88 <close_stdout@@Base+0x8f4>
   11e9c:	b	11f88 <close_stdout@@Base+0x8f4>
   11ea0:	b	11f88 <close_stdout@@Base+0x8f4>
   11ea4:	b	11f88 <close_stdout@@Base+0x8f4>
   11ea8:	b	11f88 <close_stdout@@Base+0x8f4>
   11eac:	b	12094 <close_stdout@@Base+0xa00>
   11eb0:	b	120b4 <close_stdout@@Base+0xa20>
   11eb4:	b	12094 <close_stdout@@Base+0xa00>
   11eb8:	b	120ac <close_stdout@@Base+0xa18>
   11ebc:	ldr	r3, [sp, #160]	; 0xa0
   11ec0:	cmp	r3, #2
   11ec4:	beq	12750 <close_stdout@@Base+0x10bc>
   11ec8:	cmp	r3, #3
   11ecc:	bne	11f88 <close_stdout@@Base+0x8f4>
   11ed0:	ldr	r1, [sp, #164]	; 0xa4
   11ed4:	tst	r1, #4
   11ed8:	beq	11f88 <close_stdout@@Base+0x8f4>
   11edc:	add	r3, fp, #2
   11ee0:	cmp	r8, r3
   11ee4:	bls	11f88 <close_stdout@@Base+0x8f4>
   11ee8:	ldrb	r2, [r5, #1]
   11eec:	mov	r1, #1
   11ef0:	cmp	r2, #63	; 0x3f
   11ef4:	bne	11f88 <close_stdout@@Base+0x8f4>
   11ef8:	ldr	r0, [sp, #32]
   11efc:	ldrb	ip, [r0, r3]
   11f00:	sub	r0, ip, #33	; 0x21
   11f04:	uxtb	r0, r0
   11f08:	cmp	r0, #29
   11f0c:	bhi	11f88 <close_stdout@@Base+0x8f4>
   11f10:	lsl	r1, r1, r0
   11f14:	movw	r0, #20929	; 0x51c1
   11f18:	movt	r0, #14336	; 0x3800
   11f1c:	and	r0, r1, r0
   11f20:	cmp	r0, #0
   11f24:	beq	11f88 <close_stdout@@Base+0x8f4>
   11f28:	ldr	r1, [sp, #36]	; 0x24
   11f2c:	cmp	r1, #0
   11f30:	bne	120d0 <close_stdout@@Base+0xa3c>
   11f34:	cmp	r9, sl
   11f38:	mov	r4, ip
   11f3c:	mov	fp, r3
   11f40:	ldrcc	r0, [sp, #40]	; 0x28
   11f44:	strbcc	r2, [r0, r9]
   11f48:	add	r2, r9, #1
   11f4c:	cmp	sl, r2
   11f50:	ldrhi	r0, [sp, #40]	; 0x28
   11f54:	movhi	r1, #34	; 0x22
   11f58:	strbhi	r1, [r0, r2]
   11f5c:	add	r2, r9, #2
   11f60:	cmp	sl, r2
   11f64:	ldrhi	r0, [sp, #40]	; 0x28
   11f68:	movhi	r1, #34	; 0x22
   11f6c:	strbhi	r1, [r0, r2]
   11f70:	add	r2, r9, #3
   11f74:	cmp	sl, r2
   11f78:	add	r9, r9, #4
   11f7c:	ldrhi	r0, [sp, #40]	; 0x28
   11f80:	movhi	r1, #63	; 0x3f
   11f84:	strbhi	r1, [r0, r2]
   11f88:	ldr	r0, [sp, #44]	; 0x2c
   11f8c:	cmp	r0, #0
   11f90:	bne	11fb8 <close_stdout@@Base+0x924>
   11f94:	ldr	r1, [sp, #48]	; 0x30
   11f98:	cmp	r1, #0
   11f9c:	beq	11fb8 <close_stdout@@Base+0x924>
   11fa0:	ubfx	r2, r4, #5, #8
   11fa4:	and	r3, r4, #31
   11fa8:	ldr	r2, [r1, r2, lsl #2]
   11fac:	lsr	r3, r2, r3
   11fb0:	tst	r3, #1
   11fb4:	bne	11fc0 <close_stdout@@Base+0x92c>
   11fb8:	cmp	r6, #0
   11fbc:	beq	11fe0 <close_stdout@@Base+0x94c>
   11fc0:	ldr	r2, [sp, #36]	; 0x24
   11fc4:	cmp	r2, #0
   11fc8:	bne	120d0 <close_stdout@@Base+0xa3c>
   11fcc:	cmp	r9, sl
   11fd0:	ldrcc	r0, [sp, #40]	; 0x28
   11fd4:	movcc	r3, #92	; 0x5c
   11fd8:	strbcc	r3, [r0, r9]
   11fdc:	add	r9, r9, #1
   11fe0:	add	fp, fp, #1
   11fe4:	cmp	r9, sl
   11fe8:	ldrcc	r1, [sp, #40]	; 0x28
   11fec:	strbcc	r4, [r1, r9]
   11ff0:	cmn	r8, #1
   11ff4:	add	r9, r9, #1
   11ff8:	bne	11c80 <close_stdout@@Base+0x5ec>
   11ffc:	ldr	r2, [sp, #32]
   12000:	ldrb	r3, [r2, fp]
   12004:	adds	r3, r3, #0
   12008:	movne	r3, #1
   1200c:	cmp	r3, #0
   12010:	bne	11c90 <close_stdout@@Base+0x5fc>
   12014:	ldr	r3, [sp, #160]	; 0xa0
   12018:	cmp	r9, #0
   1201c:	cmpeq	r3, #2
   12020:	bne	12030 <close_stdout@@Base+0x99c>
   12024:	ldr	r0, [sp, #36]	; 0x24
   12028:	cmp	r0, #0
   1202c:	bne	120d0 <close_stdout@@Base+0xa3c>
   12030:	ldr	r1, [sp, #36]	; 0x24
   12034:	ldr	r2, [sp, #52]	; 0x34
   12038:	eor	r3, r1, #1
   1203c:	cmp	r2, #0
   12040:	moveq	r3, #0
   12044:	andne	r3, r3, #1
   12048:	cmp	r3, #0
   1204c:	beq	12078 <close_stdout@@Base+0x9e4>
   12050:	ldrb	r3, [r2]
   12054:	cmp	r3, #0
   12058:	beq	12078 <close_stdout@@Base+0x9e4>
   1205c:	ldr	r1, [sp, #40]	; 0x28
   12060:	cmp	sl, r9
   12064:	strbhi	r3, [r1, r9]
   12068:	ldrb	r3, [r2, #1]!
   1206c:	add	r9, r9, #1
   12070:	cmp	r3, #0
   12074:	bne	12060 <close_stdout@@Base+0x9cc>
   12078:	cmp	r9, sl
   1207c:	movcs	r0, r9
   12080:	ldrcc	r1, [sp, #40]	; 0x28
   12084:	movcc	r3, #0
   12088:	movcc	r0, r9
   1208c:	strbcc	r3, [r1, r9]
   12090:	b	1210c <close_stdout@@Base+0xa78>
   12094:	cmn	r8, #1
   12098:	beq	12760 <close_stdout@@Base+0x10cc>
   1209c:	subs	r3, r8, #1
   120a0:	movne	r3, #1
   120a4:	cmp	r3, #0
   120a8:	bne	11f88 <close_stdout@@Base+0x8f4>
   120ac:	cmp	fp, #0
   120b0:	bne	11f88 <close_stdout@@Base+0x8f4>
   120b4:	ldr	r3, [sp, #36]	; 0x24
   120b8:	ldr	r0, [sp, #160]	; 0xa0
   120bc:	cmp	r0, #2
   120c0:	movne	r3, #0
   120c4:	andeq	r3, r3, #1
   120c8:	cmp	r3, #0
   120cc:	beq	11f88 <close_stdout@@Base+0x8f4>
   120d0:	ldr	r2, [sp, #164]	; 0xa4
   120d4:	mov	ip, #0
   120d8:	ldr	r0, [sp, #160]	; 0xa0
   120dc:	bic	r3, r2, #2
   120e0:	ldr	r1, [sp, #72]	; 0x48
   120e4:	ldr	r2, [sp, #68]	; 0x44
   120e8:	stm	sp, {r0, r3}
   120ec:	mov	r3, r8
   120f0:	str	r1, [sp, #12]
   120f4:	mov	r1, sl
   120f8:	str	r2, [sp, #16]
   120fc:	ldr	r0, [sp, #40]	; 0x28
   12100:	ldr	r2, [sp, #32]
   12104:	str	ip, [sp, #8]
   12108:	bl	11ba0 <close_stdout@@Base+0x50c>
   1210c:	ldr	r1, [sp, #56]	; 0x38
   12110:	ldr	r2, [sp, #116]	; 0x74
   12114:	ldr	r3, [r1]
   12118:	cmp	r2, r3
   1211c:	bne	12850 <close_stdout@@Base+0x11bc>
   12120:	add	sp, sp, #124	; 0x7c
   12124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12128:	mov	r3, #114	; 0x72
   1212c:	ldr	r2, [sp, #36]	; 0x24
   12130:	ldr	r0, [sp, #160]	; 0xa0
   12134:	cmp	r0, #2
   12138:	movne	r2, #0
   1213c:	andeq	r2, r2, #1
   12140:	cmp	r2, #0
   12144:	bne	120d0 <close_stdout@@Base+0xa3c>
   12148:	ldr	r1, [sp, #24]
   1214c:	cmp	r1, #0
   12150:	beq	11f88 <close_stdout@@Base+0x8f4>
   12154:	mov	r4, r3
   12158:	b	11fc0 <close_stdout@@Base+0x92c>
   1215c:	mov	r3, #98	; 0x62
   12160:	b	12148 <close_stdout@@Base+0xab4>
   12164:	mov	r3, #102	; 0x66
   12168:	b	12148 <close_stdout@@Base+0xab4>
   1216c:	mov	r3, #118	; 0x76
   12170:	b	12148 <close_stdout@@Base+0xab4>
   12174:	mov	r3, #97	; 0x61
   12178:	b	12148 <close_stdout@@Base+0xab4>
   1217c:	mov	r3, #110	; 0x6e
   12180:	b	1212c <close_stdout@@Base+0xa98>
   12184:	mov	r3, #116	; 0x74
   12188:	b	1212c <close_stdout@@Base+0xa98>
   1218c:	ldr	r2, [sp, #24]
   12190:	cmp	r2, #0
   12194:	beq	1273c <close_stdout@@Base+0x10a8>
   12198:	ldr	r3, [sp, #36]	; 0x24
   1219c:	cmp	r3, #0
   121a0:	bne	120d0 <close_stdout@@Base+0xa3c>
   121a4:	cmp	r9, sl
   121a8:	add	r2, r9, #1
   121ac:	ldrcc	r0, [sp, #40]	; 0x28
   121b0:	movcc	r3, #92	; 0x5c
   121b4:	strbcc	r3, [r0, r9]
   121b8:	add	r3, fp, #1
   121bc:	cmp	r8, r3
   121c0:	bls	12200 <close_stdout@@Base+0xb6c>
   121c4:	ldr	r1, [sp, #32]
   121c8:	ldrb	r3, [r1, r3]
   121cc:	sub	r3, r3, #48	; 0x30
   121d0:	cmp	r3, #9
   121d4:	bhi	12200 <close_stdout@@Base+0xb6c>
   121d8:	cmp	sl, r2
   121dc:	ldrhi	r0, [sp, #40]	; 0x28
   121e0:	movhi	r3, #48	; 0x30
   121e4:	strbhi	r3, [r0, r2]
   121e8:	add	r3, r9, #2
   121ec:	cmp	sl, r3
   121f0:	ldrhi	r1, [sp, #40]	; 0x28
   121f4:	movhi	r2, #48	; 0x30
   121f8:	strbhi	r2, [r1, r3]
   121fc:	add	r2, r9, #3
   12200:	mov	r9, r2
   12204:	mov	r4, #48	; 0x30
   12208:	b	11f94 <close_stdout@@Base+0x900>
   1220c:	ldr	r1, [sp, #76]	; 0x4c
   12210:	cmp	r1, #0
   12214:	beq	12220 <close_stdout@@Base+0xb8c>
   12218:	cmp	r7, #0
   1221c:	bne	11fe0 <close_stdout@@Base+0x94c>
   12220:	mov	r3, r4
   12224:	b	1212c <close_stdout@@Base+0xa98>
   12228:	ldr	r1, [sp, #160]	; 0xa0
   1222c:	cmp	r1, #2
   12230:	bne	11f88 <close_stdout@@Base+0x8f4>
   12234:	ldr	r2, [sp, #36]	; 0x24
   12238:	cmp	r2, #0
   1223c:	bne	120d0 <close_stdout@@Base+0xa3c>
   12240:	cmp	r9, sl
   12244:	ldrcc	r0, [sp, #40]	; 0x28
   12248:	movcc	r3, #39	; 0x27
   1224c:	strbcc	r3, [r0, r9]
   12250:	add	r3, r9, #1
   12254:	cmp	sl, r3
   12258:	ldrhi	r1, [sp, #40]	; 0x28
   1225c:	movhi	r2, #92	; 0x5c
   12260:	strbhi	r2, [r1, r3]
   12264:	add	r3, r9, #2
   12268:	cmp	sl, r3
   1226c:	add	r9, r9, #3
   12270:	ldrhi	r0, [sp, #40]	; 0x28
   12274:	movhi	r2, #39	; 0x27
   12278:	strbhi	r2, [r0, r3]
   1227c:	b	11f88 <close_stdout@@Base+0x8f4>
   12280:	ldr	r1, [sp, #64]	; 0x40
   12284:	cmp	r1, #1
   12288:	bne	12580 <close_stdout@@Base+0xeec>
   1228c:	bl	10fe4 <__ctype_b_loc@plt>
   12290:	ldr	r2, [sp, #64]	; 0x40
   12294:	sxth	r3, r4
   12298:	str	r2, [sp, #60]	; 0x3c
   1229c:	lsl	r3, r3, #1
   122a0:	ldr	r2, [r0]
   122a4:	ldrh	r2, [r2, r3]
   122a8:	eor	r2, r2, #16384	; 0x4000
   122ac:	ubfx	r2, r2, #14, #1
   122b0:	ldr	r1, [sp, #24]
   122b4:	ands	r2, r2, r1
   122b8:	beq	11f88 <close_stdout@@Base+0x8f4>
   122bc:	ldr	r3, [sp, #60]	; 0x3c
   122c0:	mov	r0, #92	; 0x5c
   122c4:	ldr	r7, [sp, #36]	; 0x24
   122c8:	add	r1, r3, fp
   122cc:	str	r8, [sp, #60]	; 0x3c
   122d0:	ldr	r3, [sp, #40]	; 0x28
   122d4:	b	12338 <close_stdout@@Base+0xca4>
   122d8:	cmp	r7, #0
   122dc:	bne	12778 <close_stdout@@Base+0x10e4>
   122e0:	add	ip, r9, #1
   122e4:	cmp	r9, sl
   122e8:	strbcc	r0, [r3, r9]
   122ec:	cmp	sl, ip
   122f0:	lsrhi	r8, r4, #6
   122f4:	addhi	r8, r8, #48	; 0x30
   122f8:	strbhi	r8, [r3, ip]
   122fc:	add	ip, r9, #2
   12300:	add	r9, r9, #3
   12304:	cmp	sl, ip
   12308:	ubfxhi	r8, r4, #3, #3
   1230c:	and	r4, r4, #7
   12310:	add	r4, r4, #48	; 0x30
   12314:	addhi	r8, r8, #48	; 0x30
   12318:	strbhi	r8, [r3, ip]
   1231c:	add	fp, fp, #1
   12320:	cmp	r1, fp
   12324:	bls	12364 <close_stdout@@Base+0xcd0>
   12328:	cmp	r9, sl
   1232c:	strbcc	r4, [r3, r9]
   12330:	ldrb	r4, [r5, #1]!
   12334:	add	r9, r9, #1
   12338:	cmp	r2, #0
   1233c:	bne	122d8 <close_stdout@@Base+0xc44>
   12340:	cmp	r6, #0
   12344:	beq	1231c <close_stdout@@Base+0xc88>
   12348:	add	fp, fp, #1
   1234c:	cmp	r9, sl
   12350:	strbcc	r0, [r3, r9]
   12354:	cmp	r1, fp
   12358:	add	r9, r9, #1
   1235c:	mov	r6, #0
   12360:	bhi	12328 <close_stdout@@Base+0xc94>
   12364:	ldr	r8, [sp, #60]	; 0x3c
   12368:	b	11fe4 <close_stdout@@Base+0x950>
   1236c:	ldr	r3, [sp, #36]	; 0x24
   12370:	cmp	r3, #0
   12374:	bne	12878 <close_stdout@@Base+0x11e4>
   12378:	cmp	sl, #0
   1237c:	beq	12790 <close_stdout@@Base+0x10fc>
   12380:	ldr	r1, [sp, #40]	; 0x28
   12384:	mov	r0, #1
   12388:	ldr	r2, [pc, #1296]	; 128a0 <close_stdout@@Base+0x120c>
   1238c:	mov	r3, #34	; 0x22
   12390:	str	r0, [sp, #24]
   12394:	mov	r9, r0
   12398:	add	r2, pc, r2
   1239c:	str	r0, [sp, #28]
   123a0:	strb	r3, [r1]
   123a4:	str	r2, [sp, #52]	; 0x34
   123a8:	b	11c54 <close_stdout@@Base+0x5c0>
   123ac:	ldr	r3, [pc, #1264]	; 128a4 <close_stdout@@Base+0x1210>
   123b0:	mov	r2, #1
   123b4:	mov	r0, #3
   123b8:	str	r2, [sp, #36]	; 0x24
   123bc:	add	r3, pc, r3
   123c0:	str	r2, [sp, #24]
   123c4:	str	r3, [sp, #52]	; 0x34
   123c8:	mov	r9, #0
   123cc:	str	r2, [sp, #28]
   123d0:	str	r0, [sp, #160]	; 0xa0
   123d4:	b	11c54 <close_stdout@@Base+0x5c0>
   123d8:	mov	r0, #0
   123dc:	mov	r1, #1
   123e0:	str	r0, [sp, #36]	; 0x24
   123e4:	mov	r9, r0
   123e8:	str	r1, [sp, #24]
   123ec:	str	r0, [sp, #28]
   123f0:	str	r0, [sp, #52]	; 0x34
   123f4:	b	11c54 <close_stdout@@Base+0x5c0>
   123f8:	ldr	r3, [sp, #160]	; 0xa0
   123fc:	cmp	r3, #8
   12400:	beq	1242c <close_stdout@@Base+0xd98>
   12404:	ldr	r0, [pc, #1180]	; 128a8 <close_stdout@@Base+0x1214>
   12408:	mov	r1, r3
   1240c:	add	r0, pc, r0
   12410:	bl	11a3c <close_stdout@@Base+0x3a8>
   12414:	ldr	r1, [sp, #160]	; 0xa0
   12418:	str	r0, [sp, #72]	; 0x48
   1241c:	ldr	r0, [pc, #1160]	; 128ac <close_stdout@@Base+0x1218>
   12420:	add	r0, pc, r0
   12424:	bl	11a3c <close_stdout@@Base+0x3a8>
   12428:	str	r0, [sp, #68]	; 0x44
   1242c:	ldr	r0, [sp, #36]	; 0x24
   12430:	cmp	r0, #0
   12434:	movne	r9, #0
   12438:	bne	12470 <close_stdout@@Base+0xddc>
   1243c:	ldr	r1, [sp, #72]	; 0x48
   12440:	ldrb	r3, [r1]
   12444:	cmp	r3, #0
   12448:	beq	12848 <close_stdout@@Base+0x11b4>
   1244c:	mov	r2, r1
   12450:	ldr	r1, [sp, #40]	; 0x28
   12454:	mov	r9, r0
   12458:	cmp	r9, sl
   1245c:	strbcc	r3, [r1, r9]
   12460:	ldrb	r3, [r2, #1]!
   12464:	add	r9, r9, #1
   12468:	cmp	r3, #0
   1246c:	bne	12458 <close_stdout@@Base+0xdc4>
   12470:	ldr	r0, [sp, #68]	; 0x44
   12474:	str	r0, [sp, #52]	; 0x34
   12478:	bl	10ffc <strlen@plt>
   1247c:	mov	r2, #1
   12480:	str	r2, [sp, #24]
   12484:	str	r0, [sp, #28]
   12488:	b	11c54 <close_stdout@@Base+0x5c0>
   1248c:	ldr	r3, [pc, #1052]	; 128b0 <close_stdout@@Base+0x121c>
   12490:	mov	r2, #0
   12494:	mov	r1, #1
   12498:	mov	r0, #2
   1249c:	add	r3, pc, r3
   124a0:	str	r1, [sp, #36]	; 0x24
   124a4:	str	r2, [sp, #24]
   124a8:	mov	r9, r2
   124ac:	str	r1, [sp, #28]
   124b0:	str	r3, [sp, #52]	; 0x34
   124b4:	str	r0, [sp, #160]	; 0xa0
   124b8:	b	11c54 <close_stdout@@Base+0x5c0>
   124bc:	ldr	r3, [sp, #36]	; 0x24
   124c0:	cmp	r3, #0
   124c4:	bne	12854 <close_stdout@@Base+0x11c0>
   124c8:	cmp	sl, #0
   124cc:	beq	127b0 <close_stdout@@Base+0x111c>
   124d0:	ldr	r1, [sp, #40]	; 0x28
   124d4:	mov	r3, #39	; 0x27
   124d8:	ldr	r2, [sp, #36]	; 0x24
   124dc:	mov	r0, #1
   124e0:	mov	r9, r0
   124e4:	str	r0, [sp, #28]
   124e8:	strb	r3, [r1]
   124ec:	ldr	r3, [pc, #960]	; 128b4 <close_stdout@@Base+0x1220>
   124f0:	str	r2, [sp, #24]
   124f4:	add	r3, pc, r3
   124f8:	str	r3, [sp, #52]	; 0x34
   124fc:	b	11c54 <close_stdout@@Base+0x5c0>
   12500:	ldr	r2, [sp, #28]
   12504:	cmp	r2, #1
   12508:	add	r4, fp, r2
   1250c:	movls	r3, #0
   12510:	movhi	r3, #1
   12514:	cmn	r8, #1
   12518:	movne	r3, #0
   1251c:	cmp	r3, #0
   12520:	beq	12530 <close_stdout@@Base+0xe9c>
   12524:	ldr	r0, [sp, #32]
   12528:	bl	10ffc <strlen@plt>
   1252c:	mov	r8, r0
   12530:	cmp	r8, r4
   12534:	ldrcc	r3, [sp, #32]
   12538:	movcc	r6, #0
   1253c:	addcc	r5, r3, fp
   12540:	bcc	11cb0 <close_stdout@@Base+0x61c>
   12544:	ldr	r0, [sp, #32]
   12548:	ldr	r1, [sp, #52]	; 0x34
   1254c:	add	r5, r0, fp
   12550:	ldr	r2, [sp, #28]
   12554:	mov	r0, r5
   12558:	bl	10ef4 <memcmp@plt>
   1255c:	cmp	r0, #0
   12560:	bne	12578 <close_stdout@@Base+0xee4>
   12564:	ldr	r1, [sp, #36]	; 0x24
   12568:	cmp	r1, #0
   1256c:	bne	120d0 <close_stdout@@Base+0xa3c>
   12570:	mov	r6, #1
   12574:	b	11cb0 <close_stdout@@Base+0x61c>
   12578:	mov	r6, #0
   1257c:	b	11cb0 <close_stdout@@Base+0x61c>
   12580:	add	r7, sp, #108	; 0x6c
   12584:	cmn	r8, #1
   12588:	mov	r3, #0
   1258c:	str	r3, [sp, #108]	; 0x6c
   12590:	str	r3, [r7, #4]
   12594:	beq	12780 <close_stdout@@Base+0x10ec>
   12598:	mov	r1, #0
   1259c:	ldr	r0, [sp, #32]
   125a0:	mov	ip, #1
   125a4:	str	r9, [sp, #88]	; 0x58
   125a8:	str	r6, [sp, #96]	; 0x60
   125ac:	mov	r9, r1
   125b0:	str	r5, [sp, #100]	; 0x64
   125b4:	mov	r6, ip
   125b8:	mov	r5, r7
   125bc:	add	r3, sp, #104	; 0x68
   125c0:	sub	r0, r0, #1
   125c4:	str	r3, [sp, #80]	; 0x50
   125c8:	str	r0, [sp, #84]	; 0x54
   125cc:	str	r1, [sp, #60]	; 0x3c
   125d0:	str	r4, [sp, #92]	; 0x5c
   125d4:	ldr	r2, [sp, #32]
   125d8:	add	r7, r9, fp
   125dc:	add	r0, sp, #104	; 0x68
   125e0:	mov	r3, r5
   125e4:	add	r4, r2, r7
   125e8:	rsb	r2, r7, r8
   125ec:	mov	r1, r4
   125f0:	bl	10f78 <mbrtowc@plt>
   125f4:	subs	r2, r0, #0
   125f8:	beq	12704 <close_stdout@@Base+0x1070>
   125fc:	cmn	r2, #1
   12600:	beq	1282c <close_stdout@@Base+0x1198>
   12604:	cmn	r2, #2
   12608:	beq	127d0 <close_stdout@@Base+0x113c>
   1260c:	ldr	r3, [sp, #36]	; 0x24
   12610:	ldr	r0, [sp, #160]	; 0xa0
   12614:	cmp	r0, #2
   12618:	movne	r3, #0
   1261c:	andeq	r3, r3, #1
   12620:	cmp	r3, #0
   12624:	beq	126e0 <close_stdout@@Base+0x104c>
   12628:	cmp	r2, #1
   1262c:	beq	126e0 <close_stdout@@Base+0x104c>
   12630:	ldr	r1, [sp, #84]	; 0x54
   12634:	add	r3, r1, r2
   12638:	add	r7, r3, r7
   1263c:	ldrb	r3, [r4, #1]!
   12640:	sub	r3, r3, #91	; 0x5b
   12644:	cmp	r3, #33	; 0x21
   12648:	addls	pc, pc, r3, lsl #2
   1264c:	b	126d8 <close_stdout@@Base+0x1044>
   12650:	b	120d0 <close_stdout@@Base+0xa3c>
   12654:	b	120d0 <close_stdout@@Base+0xa3c>
   12658:	b	126d8 <close_stdout@@Base+0x1044>
   1265c:	b	120d0 <close_stdout@@Base+0xa3c>
   12660:	b	126d8 <close_stdout@@Base+0x1044>
   12664:	b	120d0 <close_stdout@@Base+0xa3c>
   12668:	b	126d8 <close_stdout@@Base+0x1044>
   1266c:	b	126d8 <close_stdout@@Base+0x1044>
   12670:	b	126d8 <close_stdout@@Base+0x1044>
   12674:	b	126d8 <close_stdout@@Base+0x1044>
   12678:	b	126d8 <close_stdout@@Base+0x1044>
   1267c:	b	126d8 <close_stdout@@Base+0x1044>
   12680:	b	126d8 <close_stdout@@Base+0x1044>
   12684:	b	126d8 <close_stdout@@Base+0x1044>
   12688:	b	126d8 <close_stdout@@Base+0x1044>
   1268c:	b	126d8 <close_stdout@@Base+0x1044>
   12690:	b	126d8 <close_stdout@@Base+0x1044>
   12694:	b	126d8 <close_stdout@@Base+0x1044>
   12698:	b	126d8 <close_stdout@@Base+0x1044>
   1269c:	b	126d8 <close_stdout@@Base+0x1044>
   126a0:	b	126d8 <close_stdout@@Base+0x1044>
   126a4:	b	126d8 <close_stdout@@Base+0x1044>
   126a8:	b	126d8 <close_stdout@@Base+0x1044>
   126ac:	b	126d8 <close_stdout@@Base+0x1044>
   126b0:	b	126d8 <close_stdout@@Base+0x1044>
   126b4:	b	126d8 <close_stdout@@Base+0x1044>
   126b8:	b	126d8 <close_stdout@@Base+0x1044>
   126bc:	b	126d8 <close_stdout@@Base+0x1044>
   126c0:	b	126d8 <close_stdout@@Base+0x1044>
   126c4:	b	126d8 <close_stdout@@Base+0x1044>
   126c8:	b	126d8 <close_stdout@@Base+0x1044>
   126cc:	b	126d8 <close_stdout@@Base+0x1044>
   126d0:	b	126d8 <close_stdout@@Base+0x1044>
   126d4:	b	120d0 <close_stdout@@Base+0xa3c>
   126d8:	cmp	r4, r7
   126dc:	bne	1263c <close_stdout@@Base+0xfa8>
   126e0:	ldr	r0, [sp, #104]	; 0x68
   126e4:	add	r9, r9, r2
   126e8:	bl	10f30 <iswprint@plt>
   126ec:	cmp	r0, #0
   126f0:	mov	r0, r5
   126f4:	moveq	r6, #0
   126f8:	bl	10edc <mbsinit@plt>
   126fc:	cmp	r0, #0
   12700:	beq	125d4 <close_stdout@@Base+0xf40>
   12704:	mov	ip, r6
   12708:	eor	r2, ip, #1
   1270c:	str	r9, [sp, #60]	; 0x3c
   12710:	ldr	r4, [sp, #92]	; 0x5c
   12714:	uxtb	r2, r2
   12718:	ldr	r9, [sp, #88]	; 0x58
   1271c:	ldr	r6, [sp, #96]	; 0x60
   12720:	ldr	r5, [sp, #100]	; 0x64
   12724:	ldr	r3, [sp, #60]	; 0x3c
   12728:	cmp	r3, #1
   1272c:	bls	122b0 <close_stdout@@Base+0xc1c>
   12730:	ldr	r0, [sp, #24]
   12734:	and	r2, r2, r0
   12738:	b	122bc <close_stdout@@Base+0xc28>
   1273c:	ldr	r2, [sp, #164]	; 0xa4
   12740:	tst	r2, #1
   12744:	addne	fp, fp, #1
   12748:	bne	11c78 <close_stdout@@Base+0x5e4>
   1274c:	b	11f88 <close_stdout@@Base+0x8f4>
   12750:	ldr	r0, [sp, #36]	; 0x24
   12754:	cmp	r0, #0
   12758:	beq	11f88 <close_stdout@@Base+0x8f4>
   1275c:	b	120d0 <close_stdout@@Base+0xa3c>
   12760:	ldr	r2, [sp, #32]
   12764:	ldrb	r3, [r2, #1]
   12768:	adds	r3, r3, #0
   1276c:	movne	r3, #1
   12770:	b	120a4 <close_stdout@@Base+0xa10>
   12774:	bl	110d4 <abort@plt>
   12778:	ldr	r8, [sp, #60]	; 0x3c
   1277c:	b	120d0 <close_stdout@@Base+0xa3c>
   12780:	ldr	r0, [sp, #32]
   12784:	bl	10ffc <strlen@plt>
   12788:	mov	r8, r0
   1278c:	b	12598 <close_stdout@@Base+0xf04>
   12790:	ldr	r2, [pc, #288]	; 128b8 <close_stdout@@Base+0x1224>
   12794:	mov	r1, #1
   12798:	mov	r9, r1
   1279c:	str	r1, [sp, #24]
   127a0:	add	r2, pc, r2
   127a4:	str	r1, [sp, #28]
   127a8:	str	r2, [sp, #52]	; 0x34
   127ac:	b	11c54 <close_stdout@@Base+0x5c0>
   127b0:	ldr	r2, [pc, #260]	; 128bc <close_stdout@@Base+0x1228>
   127b4:	mov	r3, #1
   127b8:	mov	r9, r3
   127bc:	str	r3, [sp, #28]
   127c0:	add	r2, pc, r2
   127c4:	str	sl, [sp, #24]
   127c8:	str	r2, [sp, #52]	; 0x34
   127cc:	b	11c54 <close_stdout@@Base+0x5c0>
   127d0:	cmp	r8, r7
   127d4:	str	r9, [sp, #60]	; 0x3c
   127d8:	mov	ip, r4
   127dc:	ldr	r6, [sp, #96]	; 0x60
   127e0:	ldr	r9, [sp, #88]	; 0x58
   127e4:	ldr	r4, [sp, #92]	; 0x5c
   127e8:	ldr	r5, [sp, #100]	; 0x64
   127ec:	bls	12824 <close_stdout@@Base+0x1190>
   127f0:	ldrb	r3, [ip]
   127f4:	cmp	r3, #0
   127f8:	beq	12824 <close_stdout@@Base+0x1190>
   127fc:	ldr	r3, [sp, #60]	; 0x3c
   12800:	b	12810 <close_stdout@@Base+0x117c>
   12804:	ldrb	r2, [r5, r3]
   12808:	cmp	r2, #0
   1280c:	beq	12820 <close_stdout@@Base+0x118c>
   12810:	add	r3, r3, #1
   12814:	add	r2, fp, r3
   12818:	cmp	r8, r2
   1281c:	bhi	12804 <close_stdout@@Base+0x1170>
   12820:	str	r3, [sp, #60]	; 0x3c
   12824:	mov	r2, #1
   12828:	b	12724 <close_stdout@@Base+0x1090>
   1282c:	str	r9, [sp, #60]	; 0x3c
   12830:	mov	r2, #1
   12834:	ldr	r4, [sp, #92]	; 0x5c
   12838:	ldr	r6, [sp, #96]	; 0x60
   1283c:	ldr	r9, [sp, #88]	; 0x58
   12840:	ldr	r5, [sp, #100]	; 0x64
   12844:	b	12724 <close_stdout@@Base+0x1090>
   12848:	ldr	r9, [sp, #36]	; 0x24
   1284c:	b	12470 <close_stdout@@Base+0xddc>
   12850:	bl	10f0c <__stack_chk_fail@plt>
   12854:	ldr	r1, [pc, #100]	; 128c0 <close_stdout@@Base+0x122c>
   12858:	mov	r3, #0
   1285c:	mov	r0, #1
   12860:	str	r3, [sp, #24]
   12864:	add	r1, pc, r1
   12868:	str	r0, [sp, #28]
   1286c:	mov	r9, r3
   12870:	str	r1, [sp, #52]	; 0x34
   12874:	b	11c54 <close_stdout@@Base+0x5c0>
   12878:	ldr	r0, [pc, #68]	; 128c4 <close_stdout@@Base+0x1230>
   1287c:	mov	r3, #1
   12880:	mov	r9, #0
   12884:	str	r3, [sp, #24]
   12888:	add	r0, pc, r0
   1288c:	str	r3, [sp, #28]
   12890:	str	r0, [sp, #52]	; 0x34
   12894:	b	11c54 <close_stdout@@Base+0x5c0>
   12898:	andeq	r3, r1, ip, lsr r4
   1289c:	andeq	r0, r0, r4, ror #1
   128a0:			; <UNDEFINED> instruction: 0x000022bc
   128a4:	muleq	r0, r8, r2
   128a8:	andeq	r2, r0, r4, asr r2
   128ac:	andeq	r2, r0, r0, lsr r2
   128b0:			; <UNDEFINED> instruction: 0x000021b4
   128b4:	andeq	r2, r0, ip, asr r1
   128b8:			; <UNDEFINED> instruction: 0x00001eb4
   128bc:	muleq	r0, r0, lr
   128c0:	andeq	r1, r0, ip, ror #27
   128c4:	andeq	r1, r0, ip, asr #27
   128c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128cc:	sub	sp, sp, #44	; 0x2c
   128d0:	mov	r6, r0
   128d4:	mov	r9, r1
   128d8:	mov	sl, r2
   128dc:	mov	r4, r3
   128e0:	bl	11014 <__errno_location@plt>
   128e4:	ldr	fp, [pc, #412]	; 12a88 <close_stdout@@Base+0x13f4>
   128e8:	cmp	r6, #0
   128ec:	add	fp, pc, fp
   128f0:	ldr	r5, [fp]
   128f4:	ldr	r1, [r0]
   128f8:	mov	r8, r0
   128fc:	str	r1, [sp, #36]	; 0x24
   12900:	blt	12a80 <close_stdout@@Base+0x13ec>
   12904:	ldr	r3, [pc, #384]	; 12a8c <close_stdout@@Base+0x13f8>
   12908:	add	r3, pc, r3
   1290c:	ldr	r3, [r3]
   12910:	cmp	r6, r3
   12914:	bcc	12968 <close_stdout@@Base+0x12d4>
   12918:	add	r7, r6, #1
   1291c:	cmn	r7, #-536870911	; 0xe0000001
   12920:	bhi	12a84 <close_stdout@@Base+0x13f0>
   12924:	add	r3, fp, #4
   12928:	cmp	r5, r3
   1292c:	beq	12a58 <close_stdout@@Base+0x13c4>
   12930:	mov	r0, r5
   12934:	lsl	r1, r7, #3
   12938:	bl	13760 <close_stdout@@Base+0x20cc>
   1293c:	mov	r5, r0
   12940:	str	r0, [fp]
   12944:	ldr	fp, [pc, #324]	; 12a90 <close_stdout@@Base+0x13fc>
   12948:	mov	r1, #0
   1294c:	add	fp, pc, fp
   12950:	ldr	r0, [fp]
   12954:	rsb	r2, r0, r7
   12958:	add	r0, r5, r0, lsl #3
   1295c:	lsl	r2, r2, #3
   12960:	bl	1102c <memset@plt>
   12964:	str	r7, [fp]
   12968:	add	r2, r4, #8
   1296c:	str	r2, [sp, #32]
   12970:	ldr	r1, [r4]
   12974:	add	fp, r5, r6, lsl #3
   12978:	ldr	lr, [sp, #32]
   1297c:	mov	r2, r9
   12980:	ldr	r3, [r4, #4]
   12984:	ldr	ip, [r5, r6, lsl #3]
   12988:	ldr	r7, [fp, #4]
   1298c:	orr	r3, r3, #1
   12990:	str	r1, [sp]
   12994:	str	r3, [sp, #4]
   12998:	mov	r1, ip
   1299c:	str	lr, [sp, #8]
   129a0:	mov	r0, r7
   129a4:	ldr	lr, [r4, #40]	; 0x28
   129a8:	str	r3, [sp, #28]
   129ac:	mov	r3, sl
   129b0:	str	lr, [sp, #12]
   129b4:	ldr	lr, [r4, #44]	; 0x2c
   129b8:	str	ip, [sp, #24]
   129bc:	str	lr, [sp, #16]
   129c0:	bl	11ba0 <close_stdout@@Base+0x50c>
   129c4:	ldr	ip, [sp, #24]
   129c8:	cmp	ip, r0
   129cc:	bhi	12a44 <close_stdout@@Base+0x13b0>
   129d0:	ldr	r3, [pc, #188]	; 12a94 <close_stdout@@Base+0x1400>
   129d4:	add	r1, r0, #1
   129d8:	str	r1, [r5, r6, lsl #3]
   129dc:	add	r3, pc, r3
   129e0:	cmp	r7, r3
   129e4:	beq	129f8 <close_stdout@@Base+0x1364>
   129e8:	mov	r0, r7
   129ec:	str	r1, [sp, #24]
   129f0:	bl	10eb8 <free@plt>
   129f4:	ldr	r1, [sp, #24]
   129f8:	mov	r0, r1
   129fc:	str	r1, [sp, #24]
   12a00:	bl	13708 <close_stdout@@Base+0x2074>
   12a04:	ldr	r3, [sp, #28]
   12a08:	ldr	lr, [sp, #32]
   12a0c:	mov	r2, r9
   12a10:	str	r0, [fp, #4]
   12a14:	mov	r7, r0
   12a18:	ldr	ip, [r4]
   12a1c:	str	r3, [sp, #4]
   12a20:	mov	r3, sl
   12a24:	str	lr, [sp, #8]
   12a28:	str	ip, [sp]
   12a2c:	ldr	ip, [r4, #40]	; 0x28
   12a30:	ldr	r1, [sp, #24]
   12a34:	str	ip, [sp, #12]
   12a38:	ldr	ip, [r4, #44]	; 0x2c
   12a3c:	str	ip, [sp, #16]
   12a40:	bl	11ba0 <close_stdout@@Base+0x50c>
   12a44:	ldr	r1, [sp, #36]	; 0x24
   12a48:	mov	r0, r7
   12a4c:	str	r1, [r8]
   12a50:	add	sp, sp, #44	; 0x2c
   12a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a58:	lsl	r1, r7, #3
   12a5c:	mov	r0, #0
   12a60:	str	r3, [sp, #24]
   12a64:	bl	13760 <close_stdout@@Base+0x20cc>
   12a68:	ldr	r3, [sp, #24]
   12a6c:	mov	r5, r0
   12a70:	ldm	r3, {r0, r1}
   12a74:	str	r5, [fp]
   12a78:	stm	r5, {r0, r1}
   12a7c:	b	12944 <close_stdout@@Base+0x12b0>
   12a80:	bl	110d4 <abort@plt>
   12a84:	bl	1391c <close_stdout@@Base+0x2288>
   12a88:	andeq	r2, r1, r4, ror #16
   12a8c:	andeq	r2, r1, r4, lsl r8
   12a90:	ldrdeq	r2, [r1], -r0
   12a94:	muleq	r1, r0, r7
   12a98:	push	{r4, r5, r6, lr}
   12a9c:	mov	r5, r0
   12aa0:	bl	11014 <__errno_location@plt>
   12aa4:	cmp	r5, #0
   12aa8:	mov	r1, #48	; 0x30
   12aac:	mov	r4, r0
   12ab0:	ldr	r0, [pc, #24]	; 12ad0 <close_stdout@@Base+0x143c>
   12ab4:	ldr	r6, [r4]
   12ab8:	add	r0, pc, r0
   12abc:	add	r0, r0, #256	; 0x100
   12ac0:	movne	r0, r5
   12ac4:	bl	138dc <close_stdout@@Base+0x2248>
   12ac8:	str	r6, [r4]
   12acc:	pop	{r4, r5, r6, pc}
   12ad0:			; <UNDEFINED> instruction: 0x000126b4
   12ad4:	cmp	r0, #0
   12ad8:	beq	12ae4 <close_stdout@@Base+0x1450>
   12adc:	ldr	r0, [r0]
   12ae0:	bx	lr
   12ae4:	ldr	r0, [pc, #12]	; 12af8 <close_stdout@@Base+0x1464>
   12ae8:	add	r0, pc, r0
   12aec:	add	r0, r0, #256	; 0x100
   12af0:	ldr	r0, [r0]
   12af4:	bx	lr
   12af8:	andeq	r2, r1, r4, lsl #13
   12afc:	cmp	r0, #0
   12b00:	beq	12b0c <close_stdout@@Base+0x1478>
   12b04:	str	r1, [r0]
   12b08:	bx	lr
   12b0c:	ldr	r0, [pc, #12]	; 12b20 <close_stdout@@Base+0x148c>
   12b10:	add	r0, pc, r0
   12b14:	add	r0, r0, #256	; 0x100
   12b18:	str	r1, [r0]
   12b1c:	bx	lr
   12b20:	andeq	r2, r1, ip, asr r6
   12b24:	cmp	r0, #0
   12b28:	movne	r3, r0
   12b2c:	beq	12b5c <close_stdout@@Base+0x14c8>
   12b30:	lsr	ip, r1, #5
   12b34:	and	r1, r1, #31
   12b38:	add	r3, r3, ip, lsl #2
   12b3c:	ldr	ip, [r3, #8]
   12b40:	lsr	r0, ip, r1
   12b44:	eor	r2, r0, r2
   12b48:	and	r0, r0, #1
   12b4c:	and	r2, r2, #1
   12b50:	eor	ip, ip, r2, lsl r1
   12b54:	str	ip, [r3, #8]
   12b58:	bx	lr
   12b5c:	ldr	r3, [pc, #8]	; 12b6c <close_stdout@@Base+0x14d8>
   12b60:	add	r3, pc, r3
   12b64:	add	r3, r3, #256	; 0x100
   12b68:	b	12b30 <close_stdout@@Base+0x149c>
   12b6c:	andeq	r2, r1, ip, lsl #12
   12b70:	subs	r3, r0, #0
   12b74:	beq	12b84 <close_stdout@@Base+0x14f0>
   12b78:	ldr	r0, [r3, #4]
   12b7c:	str	r1, [r3, #4]
   12b80:	bx	lr
   12b84:	ldr	r3, [pc, #8]	; 12b94 <close_stdout@@Base+0x1500>
   12b88:	add	r3, pc, r3
   12b8c:	add	r3, r3, #256	; 0x100
   12b90:	b	12b78 <close_stdout@@Base+0x14e4>
   12b94:	andeq	r2, r1, r4, ror #11
   12b98:	cmp	r0, #0
   12b9c:	push	{r3, lr}
   12ba0:	beq	12bc4 <close_stdout@@Base+0x1530>
   12ba4:	cmp	r2, #0
   12ba8:	cmpne	r1, #0
   12bac:	mov	r3, #8
   12bb0:	strne	r1, [r0, #40]	; 0x28
   12bb4:	str	r3, [r0]
   12bb8:	strne	r2, [r0, #44]	; 0x2c
   12bbc:	popne	{r3, pc}
   12bc0:	bl	110d4 <abort@plt>
   12bc4:	ldr	r0, [pc, #8]	; 12bd4 <close_stdout@@Base+0x1540>
   12bc8:	add	r0, pc, r0
   12bcc:	add	r0, r0, #256	; 0x100
   12bd0:	b	12ba4 <close_stdout@@Base+0x1510>
   12bd4:	andeq	r2, r1, r4, lsr #11
   12bd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12bdc:	sub	sp, sp, #24
   12be0:	mov	r7, r0
   12be4:	mov	sl, r1
   12be8:	ldr	r4, [sp, #56]	; 0x38
   12bec:	mov	r9, r2
   12bf0:	mov	r8, r3
   12bf4:	cmp	r4, #0
   12bf8:	beq	12c4c <close_stdout@@Base+0x15b8>
   12bfc:	bl	11014 <__errno_location@plt>
   12c00:	ldr	r3, [r4]
   12c04:	add	lr, r4, #8
   12c08:	mov	r1, sl
   12c0c:	mov	r2, r9
   12c10:	ldr	r6, [r0]
   12c14:	mov	r5, r0
   12c18:	str	r3, [sp]
   12c1c:	mov	r0, r7
   12c20:	ldr	ip, [r4, #4]
   12c24:	mov	r3, r8
   12c28:	stmib	sp, {ip, lr}
   12c2c:	ldr	ip, [r4, #40]	; 0x28
   12c30:	str	ip, [sp, #12]
   12c34:	ldr	ip, [r4, #44]	; 0x2c
   12c38:	str	ip, [sp, #16]
   12c3c:	bl	11ba0 <close_stdout@@Base+0x50c>
   12c40:	str	r6, [r5]
   12c44:	add	sp, sp, #24
   12c48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c4c:	ldr	r4, [pc, #8]	; 12c5c <close_stdout@@Base+0x15c8>
   12c50:	add	r4, pc, r4
   12c54:	add	r4, r4, #256	; 0x100
   12c58:	b	12bfc <close_stdout@@Base+0x1568>
   12c5c:	andeq	r2, r1, ip, lsl r5
   12c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c64:	subs	r4, r3, #0
   12c68:	sub	sp, sp, #36	; 0x24
   12c6c:	mov	r7, r0
   12c70:	mov	r6, r1
   12c74:	mov	r5, r2
   12c78:	beq	12d34 <close_stdout@@Base+0x16a0>
   12c7c:	bl	11014 <__errno_location@plt>
   12c80:	ldr	r3, [r4]
   12c84:	ldr	sl, [r4, #4]
   12c88:	add	r9, r4, #8
   12c8c:	mov	r8, r0
   12c90:	mov	r0, #0
   12c94:	ldr	r2, [r8]
   12c98:	cmp	r5, r0
   12c9c:	orreq	sl, sl, #1
   12ca0:	str	r9, [sp, #8]
   12ca4:	mov	r1, r0
   12ca8:	stm	sp, {r3, sl}
   12cac:	mov	r3, r6
   12cb0:	ldr	ip, [r4, #40]	; 0x28
   12cb4:	str	r2, [sp, #28]
   12cb8:	mov	r2, r7
   12cbc:	str	ip, [sp, #12]
   12cc0:	ldr	ip, [r4, #44]	; 0x2c
   12cc4:	str	ip, [sp, #16]
   12cc8:	bl	11ba0 <close_stdout@@Base+0x50c>
   12ccc:	add	r1, r0, #1
   12cd0:	mov	fp, r0
   12cd4:	str	r1, [sp, #24]
   12cd8:	mov	r0, r1
   12cdc:	bl	13708 <close_stdout@@Base+0x2074>
   12ce0:	ldr	lr, [r4]
   12ce4:	str	sl, [sp, #4]
   12ce8:	mov	r3, r6
   12cec:	str	r9, [sp, #8]
   12cf0:	mov	r2, r7
   12cf4:	str	lr, [sp]
   12cf8:	ldr	lr, [r4, #40]	; 0x28
   12cfc:	ldr	r1, [sp, #24]
   12d00:	str	lr, [sp, #12]
   12d04:	ldr	lr, [r4, #44]	; 0x2c
   12d08:	str	lr, [sp, #16]
   12d0c:	str	r0, [sp, #24]
   12d10:	bl	11ba0 <close_stdout@@Base+0x50c>
   12d14:	ldr	r3, [sp, #28]
   12d18:	cmp	r5, #0
   12d1c:	str	r3, [r8]
   12d20:	ldr	ip, [sp, #24]
   12d24:	strne	fp, [r5]
   12d28:	mov	r0, ip
   12d2c:	add	sp, sp, #36	; 0x24
   12d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d34:	ldr	r4, [pc, #8]	; 12d44 <close_stdout@@Base+0x16b0>
   12d38:	add	r4, pc, r4
   12d3c:	add	r4, r4, #256	; 0x100
   12d40:	b	12c7c <close_stdout@@Base+0x15e8>
   12d44:	andeq	r2, r1, r4, lsr r4
   12d48:	mov	r3, r2
   12d4c:	mov	r2, #0
   12d50:	b	12c60 <close_stdout@@Base+0x15cc>
   12d54:	ldr	r2, [pc, #152]	; 12df4 <close_stdout@@Base+0x1760>
   12d58:	push	{r3, r4, r5, r6, r7, lr}
   12d5c:	add	r2, pc, r2
   12d60:	ldr	r3, [pc, #144]	; 12df8 <close_stdout@@Base+0x1764>
   12d64:	ldr	r6, [r2]
   12d68:	add	r3, pc, r3
   12d6c:	cmp	r6, #1
   12d70:	ldr	r7, [r3]
   12d74:	movhi	r4, #1
   12d78:	movhi	r5, r7
   12d7c:	bls	12d98 <close_stdout@@Base+0x1704>
   12d80:	ldr	r0, [r5, #12]
   12d84:	add	r4, r4, #1
   12d88:	bl	10eb8 <free@plt>
   12d8c:	cmp	r4, r6
   12d90:	add	r5, r5, #8
   12d94:	bne	12d80 <close_stdout@@Base+0x16ec>
   12d98:	ldr	r4, [pc, #92]	; 12dfc <close_stdout@@Base+0x1768>
   12d9c:	ldr	r0, [r7, #4]
   12da0:	add	r4, pc, r4
   12da4:	cmp	r0, r4
   12da8:	beq	12dc0 <close_stdout@@Base+0x172c>
   12dac:	bl	10eb8 <free@plt>
   12db0:	ldr	r3, [pc, #72]	; 12e00 <close_stdout@@Base+0x176c>
   12db4:	mov	r2, #256	; 0x100
   12db8:	add	r3, pc, r3
   12dbc:	stmib	r3, {r2, r4}
   12dc0:	ldr	r4, [pc, #60]	; 12e04 <close_stdout@@Base+0x1770>
   12dc4:	add	r4, pc, r4
   12dc8:	add	r5, r4, #4
   12dcc:	cmp	r7, r5
   12dd0:	beq	12de0 <close_stdout@@Base+0x174c>
   12dd4:	mov	r0, r7
   12dd8:	bl	10eb8 <free@plt>
   12ddc:	str	r5, [r4]
   12de0:	ldr	r3, [pc, #32]	; 12e08 <close_stdout@@Base+0x1774>
   12de4:	mov	r2, #1
   12de8:	add	r3, pc, r3
   12dec:	str	r2, [r3]
   12df0:	pop	{r3, r4, r5, r6, r7, pc}
   12df4:	andeq	r2, r1, r0, asr #7
   12df8:	andeq	r2, r1, r8, ror #7
   12dfc:	andeq	r2, r1, ip, asr #7
   12e00:	muleq	r1, r8, r3
   12e04:	andeq	r2, r1, ip, lsl #7
   12e08:	andeq	r2, r1, r4, lsr r3
   12e0c:	ldr	r3, [pc, #12]	; 12e20 <close_stdout@@Base+0x178c>
   12e10:	mvn	r2, #0
   12e14:	add	r3, pc, r3
   12e18:	add	r3, r3, #256	; 0x100
   12e1c:	b	128c8 <close_stdout@@Base+0x1234>
   12e20:	andeq	r2, r1, r8, asr r3
   12e24:	ldr	r3, [pc, #8]	; 12e34 <close_stdout@@Base+0x17a0>
   12e28:	add	r3, pc, r3
   12e2c:	add	r3, r3, #256	; 0x100
   12e30:	b	128c8 <close_stdout@@Base+0x1234>
   12e34:	andeq	r2, r1, r4, asr #6
   12e38:	mov	r1, r0
   12e3c:	mov	r0, #0
   12e40:	b	12e0c <close_stdout@@Base+0x1778>
   12e44:	mov	r2, r1
   12e48:	mov	r1, r0
   12e4c:	mov	r0, #0
   12e50:	b	12e24 <close_stdout@@Base+0x1790>
   12e54:	ldr	r3, [pc, #92]	; 12eb8 <close_stdout@@Base+0x1824>
   12e58:	ldr	ip, [pc, #92]	; 12ebc <close_stdout@@Base+0x1828>
   12e5c:	add	r3, pc, r3
   12e60:	push	{r4, r5, r6, r7, lr}
   12e64:	sub	sp, sp, #60	; 0x3c
   12e68:	ldr	r4, [r3, ip]
   12e6c:	add	r5, sp, #4
   12e70:	mov	r7, r2
   12e74:	mov	r6, r0
   12e78:	mov	r0, r5
   12e7c:	ldr	r3, [r4]
   12e80:	str	r3, [sp, #52]	; 0x34
   12e84:	bl	119e8 <close_stdout@@Base+0x354>
   12e88:	mov	r3, r5
   12e8c:	mvn	r2, #0
   12e90:	mov	r0, r6
   12e94:	mov	r1, r7
   12e98:	bl	128c8 <close_stdout@@Base+0x1234>
   12e9c:	ldr	r2, [sp, #52]	; 0x34
   12ea0:	ldr	r3, [r4]
   12ea4:	cmp	r2, r3
   12ea8:	bne	12eb4 <close_stdout@@Base+0x1820>
   12eac:	add	sp, sp, #60	; 0x3c
   12eb0:	pop	{r4, r5, r6, r7, pc}
   12eb4:	bl	10f0c <__stack_chk_fail@plt>
   12eb8:	muleq	r1, ip, r1
   12ebc:	andeq	r0, r0, r4, ror #1
   12ec0:	ldr	ip, [pc, #96]	; 12f28 <close_stdout@@Base+0x1894>
   12ec4:	push	{r4, r5, r6, r7, r8, lr}
   12ec8:	add	ip, pc, ip
   12ecc:	ldr	lr, [pc, #88]	; 12f2c <close_stdout@@Base+0x1898>
   12ed0:	sub	sp, sp, #56	; 0x38
   12ed4:	mov	r8, r3
   12ed8:	add	r5, sp, #4
   12edc:	mov	r7, r2
   12ee0:	mov	r6, r0
   12ee4:	ldr	r4, [ip, lr]
   12ee8:	mov	r0, r5
   12eec:	ldr	r3, [r4]
   12ef0:	str	r3, [sp, #52]	; 0x34
   12ef4:	bl	119e8 <close_stdout@@Base+0x354>
   12ef8:	mov	r2, r8
   12efc:	mov	r3, r5
   12f00:	mov	r0, r6
   12f04:	mov	r1, r7
   12f08:	bl	128c8 <close_stdout@@Base+0x1234>
   12f0c:	ldr	r2, [sp, #52]	; 0x34
   12f10:	ldr	r3, [r4]
   12f14:	cmp	r2, r3
   12f18:	bne	12f24 <close_stdout@@Base+0x1890>
   12f1c:	add	sp, sp, #56	; 0x38
   12f20:	pop	{r4, r5, r6, r7, r8, pc}
   12f24:	bl	10f0c <__stack_chk_fail@plt>
   12f28:	andeq	r2, r1, r0, lsr r1
   12f2c:	andeq	r0, r0, r4, ror #1
   12f30:	mov	r2, r1
   12f34:	mov	r1, r0
   12f38:	mov	r0, #0
   12f3c:	b	12e54 <close_stdout@@Base+0x17c0>
   12f40:	mov	ip, r1
   12f44:	mov	r3, r2
   12f48:	mov	r1, r0
   12f4c:	mov	r2, ip
   12f50:	mov	r0, #0
   12f54:	b	12ec0 <close_stdout@@Base+0x182c>
   12f58:	push	{r4, r5, r6, r7, r8, lr}
   12f5c:	mov	r5, r2
   12f60:	ldr	lr, [pc, #136]	; 12ff0 <close_stdout@@Base+0x195c>
   12f64:	mov	r7, r0
   12f68:	mov	r6, r1
   12f6c:	ldr	r4, [pc, #128]	; 12ff4 <close_stdout@@Base+0x1960>
   12f70:	add	lr, pc, lr
   12f74:	sub	sp, sp, #56	; 0x38
   12f78:	add	lr, lr, #256	; 0x100
   12f7c:	ldr	r8, [pc, #116]	; 12ff8 <close_stdout@@Base+0x1964>
   12f80:	add	r4, pc, r4
   12f84:	add	ip, sp, #4
   12f88:	ldm	lr!, {r0, r1, r2, r3}
   12f8c:	ldr	r4, [r4, r8]
   12f90:	stmia	ip!, {r0, r1, r2, r3}
   12f94:	ldm	lr!, {r0, r1, r2, r3}
   12f98:	ldr	r8, [r4]
   12f9c:	stmia	ip!, {r0, r1, r2, r3}
   12fa0:	ldm	lr, {r0, r1, r2, r3}
   12fa4:	str	r8, [sp, #52]	; 0x34
   12fa8:	stm	ip, {r0, r1, r2, r3}
   12fac:	mov	r1, r5
   12fb0:	add	r5, sp, #4
   12fb4:	mov	r2, #1
   12fb8:	mov	r0, r5
   12fbc:	bl	12b24 <close_stdout@@Base+0x1490>
   12fc0:	mov	r2, r6
   12fc4:	mov	r3, r5
   12fc8:	mov	r1, r7
   12fcc:	mov	r0, #0
   12fd0:	bl	128c8 <close_stdout@@Base+0x1234>
   12fd4:	ldr	r2, [sp, #52]	; 0x34
   12fd8:	ldr	r3, [r4]
   12fdc:	cmp	r2, r3
   12fe0:	bne	12fec <close_stdout@@Base+0x1958>
   12fe4:	add	sp, sp, #56	; 0x38
   12fe8:	pop	{r4, r5, r6, r7, r8, pc}
   12fec:	bl	10f0c <__stack_chk_fail@plt>
   12ff0:	strdeq	r2, [r1], -ip
   12ff4:	andeq	r2, r1, r8, ror r0
   12ff8:	andeq	r0, r0, r4, ror #1
   12ffc:	mov	r2, r1
   13000:	mvn	r1, #0
   13004:	b	12f58 <close_stdout@@Base+0x18c4>
   13008:	mov	r1, #58	; 0x3a
   1300c:	b	12ffc <close_stdout@@Base+0x1968>
   13010:	mov	r2, #58	; 0x3a
   13014:	b	12f58 <close_stdout@@Base+0x18c4>
   13018:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1301c:	mov	r5, r2
   13020:	ldr	lr, [pc, #144]	; 130b8 <close_stdout@@Base+0x1a24>
   13024:	mov	r8, r0
   13028:	mov	r9, r1
   1302c:	mov	r7, r3
   13030:	add	lr, pc, lr
   13034:	ldr	r4, [pc, #128]	; 130bc <close_stdout@@Base+0x1a28>
   13038:	add	lr, lr, #256	; 0x100
   1303c:	sub	sp, sp, #56	; 0x38
   13040:	ldr	sl, [pc, #120]	; 130c0 <close_stdout@@Base+0x1a2c>
   13044:	add	r4, pc, r4
   13048:	ldm	lr!, {r0, r1, r2, r3}
   1304c:	add	ip, sp, #4
   13050:	ldr	r4, [r4, sl]
   13054:	ldr	r6, [sp, #88]	; 0x58
   13058:	stmia	ip!, {r0, r1, r2, r3}
   1305c:	ldm	lr!, {r0, r1, r2, r3}
   13060:	ldr	sl, [r4]
   13064:	stmia	ip!, {r0, r1, r2, r3}
   13068:	ldm	lr, {r0, r1, r2, r3}
   1306c:	str	sl, [sp, #52]	; 0x34
   13070:	stm	ip, {r0, r1, r2, r3}
   13074:	mov	r2, r5
   13078:	add	r5, sp, #4
   1307c:	mov	r1, r9
   13080:	mov	r0, r5
   13084:	bl	12b98 <close_stdout@@Base+0x1504>
   13088:	mov	r2, r6
   1308c:	mov	r3, r5
   13090:	mov	r0, r8
   13094:	mov	r1, r7
   13098:	bl	128c8 <close_stdout@@Base+0x1234>
   1309c:	ldr	r2, [sp, #52]	; 0x34
   130a0:	ldr	r3, [r4]
   130a4:	cmp	r2, r3
   130a8:	bne	130b4 <close_stdout@@Base+0x1a20>
   130ac:	add	sp, sp, #56	; 0x38
   130b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130b4:	bl	10f0c <__stack_chk_fail@plt>
   130b8:	andeq	r2, r1, ip, lsr r1
   130bc:			; <UNDEFINED> instruction: 0x00011fb4
   130c0:	andeq	r0, r0, r4, ror #1
   130c4:	push	{lr}		; (str lr, [sp, #-4]!)
   130c8:	sub	sp, sp, #12
   130cc:	mvn	ip, #0
   130d0:	str	ip, [sp]
   130d4:	bl	13018 <close_stdout@@Base+0x1984>
   130d8:	add	sp, sp, #12
   130dc:	pop	{pc}		; (ldr pc, [sp], #4)
   130e0:	mov	ip, r1
   130e4:	mov	r3, r2
   130e8:	mov	r1, r0
   130ec:	mov	r2, ip
   130f0:	mov	r0, #0
   130f4:	b	130c4 <close_stdout@@Base+0x1a30>
   130f8:	push	{lr}		; (str lr, [sp, #-4]!)
   130fc:	sub	sp, sp, #12
   13100:	mov	lr, r1
   13104:	mov	ip, r2
   13108:	mov	r1, r0
   1310c:	str	r3, [sp]
   13110:	mov	r2, lr
   13114:	mov	r3, ip
   13118:	mov	r0, #0
   1311c:	bl	13018 <close_stdout@@Base+0x1984>
   13120:	add	sp, sp, #12
   13124:	pop	{pc}		; (ldr pc, [sp], #4)
   13128:	ldr	r3, [pc, #12]	; 1313c <close_stdout@@Base+0x1aa8>
   1312c:	ldr	ip, [pc, #12]	; 13140 <close_stdout@@Base+0x1aac>
   13130:	add	r3, pc, r3
   13134:	ldr	r3, [r3, ip]
   13138:	b	128c8 <close_stdout@@Base+0x1234>
   1313c:	andeq	r1, r1, r8, asr #29
   13140:	andeq	r0, r0, r0, ror #1
   13144:	mov	r2, r1
   13148:	mov	r1, r0
   1314c:	mov	r0, #0
   13150:	b	13128 <close_stdout@@Base+0x1a94>
   13154:	mvn	r2, #0
   13158:	b	13128 <close_stdout@@Base+0x1a94>
   1315c:	mov	r1, r0
   13160:	mov	r0, #0
   13164:	b	13154 <close_stdout@@Base+0x1ac0>
   13168:	push	{r4, r5, r6, r7, lr}
   1316c:	cmp	r1, #0
   13170:	sub	sp, sp, #36	; 0x24
   13174:	ldr	r7, [pc, #896]	; 134fc <close_stdout@@Base+0x1e68>
   13178:	mov	ip, r3
   1317c:	mov	r5, r0
   13180:	add	r7, pc, r7
   13184:	ldr	r4, [sp, #56]	; 0x38
   13188:	ldr	r6, [sp, #60]	; 0x3c
   1318c:	beq	134d0 <close_stdout@@Base+0x1e3c>
   13190:	str	r2, [sp]
   13194:	mov	r3, r1
   13198:	ldr	r2, [pc, #864]	; 13500 <close_stdout@@Base+0x1e6c>
   1319c:	mov	r1, #1
   131a0:	str	ip, [sp, #4]
   131a4:	add	r2, pc, r2
   131a8:	bl	1105c <__fprintf_chk@plt>
   131ac:	ldr	r1, [pc, #848]	; 13504 <close_stdout@@Base+0x1e70>
   131b0:	mov	r2, #5
   131b4:	mov	r0, #0
   131b8:	add	r1, pc, r1
   131bc:	bl	10f00 <dcgettext@plt>
   131c0:	ldr	r2, [pc, #832]	; 13508 <close_stdout@@Base+0x1e74>
   131c4:	movw	ip, #2013	; 0x7dd
   131c8:	mov	r1, #1
   131cc:	ldr	r2, [r7, r2]
   131d0:	str	ip, [sp]
   131d4:	mov	r3, r0
   131d8:	mov	r0, r5
   131dc:	bl	1105c <__fprintf_chk@plt>
   131e0:	ldr	r1, [pc, #804]	; 1350c <close_stdout@@Base+0x1e78>
   131e4:	mov	r0, #0
   131e8:	mov	r2, #5
   131ec:	add	r1, pc, r1
   131f0:	bl	10f00 <dcgettext@plt>
   131f4:	mov	r1, r5
   131f8:	bl	10e88 <fputs_unlocked@plt>
   131fc:	cmp	r6, #9
   13200:	addls	pc, pc, r6, lsl #2
   13204:	b	134ec <close_stdout@@Base+0x1e58>
   13208:	b	1329c <close_stdout@@Base+0x1c08>
   1320c:	b	132a0 <close_stdout@@Base+0x1c0c>
   13210:	b	132d0 <close_stdout@@Base+0x1c3c>
   13214:	b	13304 <close_stdout@@Base+0x1c70>
   13218:	b	13340 <close_stdout@@Base+0x1cac>
   1321c:	b	13380 <close_stdout@@Base+0x1cec>
   13220:	b	133c8 <close_stdout@@Base+0x1d34>
   13224:	b	13418 <close_stdout@@Base+0x1d84>
   13228:	b	13470 <close_stdout@@Base+0x1ddc>
   1322c:	b	13230 <close_stdout@@Base+0x1b9c>
   13230:	ldr	r1, [pc, #728]	; 13510 <close_stdout@@Base+0x1e7c>
   13234:	mov	r0, #0
   13238:	add	r1, pc, r1
   1323c:	mov	r2, #5
   13240:	bl	10f00 <dcgettext@plt>
   13244:	ldm	r4, {r3, ip}
   13248:	mov	r1, #1
   1324c:	str	ip, [sp]
   13250:	ldr	ip, [r4, #8]
   13254:	str	ip, [sp, #4]
   13258:	ldr	ip, [r4, #12]
   1325c:	str	ip, [sp, #8]
   13260:	ldr	ip, [r4, #16]
   13264:	str	ip, [sp, #12]
   13268:	ldr	ip, [r4, #20]
   1326c:	str	ip, [sp, #16]
   13270:	ldr	ip, [r4, #24]
   13274:	str	ip, [sp, #20]
   13278:	ldr	ip, [r4, #28]
   1327c:	str	ip, [sp, #24]
   13280:	ldr	ip, [r4, #32]
   13284:	str	ip, [sp, #28]
   13288:	mov	r2, r0
   1328c:	mov	r0, r5
   13290:	bl	1105c <__fprintf_chk@plt>
   13294:	add	sp, sp, #36	; 0x24
   13298:	pop	{r4, r5, r6, r7, pc}
   1329c:	bl	110d4 <abort@plt>
   132a0:	ldr	r1, [pc, #620]	; 13514 <close_stdout@@Base+0x1e80>
   132a4:	mov	r2, #5
   132a8:	mov	r0, #0
   132ac:	add	r1, pc, r1
   132b0:	bl	10f00 <dcgettext@plt>
   132b4:	ldr	r3, [r4]
   132b8:	mov	r1, #1
   132bc:	mov	r2, r0
   132c0:	mov	r0, r5
   132c4:	add	sp, sp, #36	; 0x24
   132c8:	pop	{r4, r5, r6, r7, lr}
   132cc:	b	1105c <__fprintf_chk@plt>
   132d0:	ldr	r1, [pc, #576]	; 13518 <close_stdout@@Base+0x1e84>
   132d4:	mov	r2, #5
   132d8:	mov	r0, #0
   132dc:	add	r1, pc, r1
   132e0:	bl	10f00 <dcgettext@plt>
   132e4:	ldm	r4, {r3, ip}
   132e8:	mov	r1, #1
   132ec:	str	ip, [sp, #56]	; 0x38
   132f0:	mov	r2, r0
   132f4:	mov	r0, r5
   132f8:	add	sp, sp, #36	; 0x24
   132fc:	pop	{r4, r5, r6, r7, lr}
   13300:	b	1105c <__fprintf_chk@plt>
   13304:	ldr	r1, [pc, #528]	; 1351c <close_stdout@@Base+0x1e88>
   13308:	mov	r2, #5
   1330c:	mov	r0, #0
   13310:	add	r1, pc, r1
   13314:	bl	10f00 <dcgettext@plt>
   13318:	ldm	r4, {r3, ip}
   1331c:	mov	r1, #1
   13320:	str	ip, [sp, #56]	; 0x38
   13324:	ldr	ip, [r4, #8]
   13328:	str	ip, [sp, #60]	; 0x3c
   1332c:	mov	r2, r0
   13330:	mov	r0, r5
   13334:	add	sp, sp, #36	; 0x24
   13338:	pop	{r4, r5, r6, r7, lr}
   1333c:	b	1105c <__fprintf_chk@plt>
   13340:	ldr	r1, [pc, #472]	; 13520 <close_stdout@@Base+0x1e8c>
   13344:	mov	r2, #5
   13348:	mov	r0, #0
   1334c:	add	r1, pc, r1
   13350:	bl	10f00 <dcgettext@plt>
   13354:	ldm	r4, {r3, ip}
   13358:	mov	r1, #1
   1335c:	str	ip, [sp]
   13360:	ldr	ip, [r4, #8]
   13364:	str	ip, [sp, #4]
   13368:	ldr	ip, [r4, #12]
   1336c:	str	ip, [sp, #8]
   13370:	mov	r2, r0
   13374:	mov	r0, r5
   13378:	bl	1105c <__fprintf_chk@plt>
   1337c:	b	13294 <close_stdout@@Base+0x1c00>
   13380:	ldr	r1, [pc, #412]	; 13524 <close_stdout@@Base+0x1e90>
   13384:	mov	r2, #5
   13388:	mov	r0, #0
   1338c:	add	r1, pc, r1
   13390:	bl	10f00 <dcgettext@plt>
   13394:	ldm	r4, {r3, ip}
   13398:	mov	r1, #1
   1339c:	str	ip, [sp]
   133a0:	ldr	ip, [r4, #8]
   133a4:	str	ip, [sp, #4]
   133a8:	ldr	ip, [r4, #12]
   133ac:	str	ip, [sp, #8]
   133b0:	ldr	ip, [r4, #16]
   133b4:	str	ip, [sp, #12]
   133b8:	mov	r2, r0
   133bc:	mov	r0, r5
   133c0:	bl	1105c <__fprintf_chk@plt>
   133c4:	b	13294 <close_stdout@@Base+0x1c00>
   133c8:	ldr	r1, [pc, #344]	; 13528 <close_stdout@@Base+0x1e94>
   133cc:	mov	r2, #5
   133d0:	mov	r0, #0
   133d4:	add	r1, pc, r1
   133d8:	bl	10f00 <dcgettext@plt>
   133dc:	ldm	r4, {r3, ip}
   133e0:	mov	r1, #1
   133e4:	str	ip, [sp]
   133e8:	ldr	ip, [r4, #8]
   133ec:	str	ip, [sp, #4]
   133f0:	ldr	ip, [r4, #12]
   133f4:	str	ip, [sp, #8]
   133f8:	ldr	ip, [r4, #16]
   133fc:	str	ip, [sp, #12]
   13400:	ldr	ip, [r4, #20]
   13404:	str	ip, [sp, #16]
   13408:	mov	r2, r0
   1340c:	mov	r0, r5
   13410:	bl	1105c <__fprintf_chk@plt>
   13414:	b	13294 <close_stdout@@Base+0x1c00>
   13418:	ldr	r1, [pc, #268]	; 1352c <close_stdout@@Base+0x1e98>
   1341c:	mov	r2, #5
   13420:	mov	r0, #0
   13424:	add	r1, pc, r1
   13428:	bl	10f00 <dcgettext@plt>
   1342c:	ldm	r4, {r3, ip}
   13430:	mov	r1, #1
   13434:	str	ip, [sp]
   13438:	ldr	ip, [r4, #8]
   1343c:	str	ip, [sp, #4]
   13440:	ldr	ip, [r4, #12]
   13444:	str	ip, [sp, #8]
   13448:	ldr	ip, [r4, #16]
   1344c:	str	ip, [sp, #12]
   13450:	ldr	ip, [r4, #20]
   13454:	str	ip, [sp, #16]
   13458:	ldr	ip, [r4, #24]
   1345c:	str	ip, [sp, #20]
   13460:	mov	r2, r0
   13464:	mov	r0, r5
   13468:	bl	1105c <__fprintf_chk@plt>
   1346c:	b	13294 <close_stdout@@Base+0x1c00>
   13470:	ldr	r1, [pc, #184]	; 13530 <close_stdout@@Base+0x1e9c>
   13474:	mov	r2, #5
   13478:	mov	r0, #0
   1347c:	add	r1, pc, r1
   13480:	bl	10f00 <dcgettext@plt>
   13484:	ldm	r4, {r3, ip}
   13488:	mov	r1, #1
   1348c:	str	ip, [sp]
   13490:	ldr	ip, [r4, #8]
   13494:	str	ip, [sp, #4]
   13498:	ldr	ip, [r4, #12]
   1349c:	str	ip, [sp, #8]
   134a0:	ldr	ip, [r4, #16]
   134a4:	str	ip, [sp, #12]
   134a8:	ldr	ip, [r4, #20]
   134ac:	str	ip, [sp, #16]
   134b0:	ldr	ip, [r4, #24]
   134b4:	str	ip, [sp, #20]
   134b8:	ldr	ip, [r4, #28]
   134bc:	str	ip, [sp, #24]
   134c0:	mov	r2, r0
   134c4:	mov	r0, r5
   134c8:	bl	1105c <__fprintf_chk@plt>
   134cc:	b	13294 <close_stdout@@Base+0x1c00>
   134d0:	str	r3, [sp]
   134d4:	mov	r3, r2
   134d8:	ldr	r2, [pc, #84]	; 13534 <close_stdout@@Base+0x1ea0>
   134dc:	mov	r1, #1
   134e0:	add	r2, pc, r2
   134e4:	bl	1105c <__fprintf_chk@plt>
   134e8:	b	131ac <close_stdout@@Base+0x1b18>
   134ec:	ldr	r1, [pc, #68]	; 13538 <close_stdout@@Base+0x1ea4>
   134f0:	mov	r0, #0
   134f4:	add	r1, pc, r1
   134f8:	b	1323c <close_stdout@@Base+0x1ba8>
   134fc:	andeq	r1, r1, r8, ror lr
   13500:	andeq	r1, r0, r4, lsl #10
   13504:	andeq	r1, r0, r4, lsl #10
   13508:	andeq	r0, r0, r0, lsl r1
   1350c:	ldrdeq	r1, [r0], -r4
   13510:	andeq	r1, r0, r0, ror #12
   13514:	andeq	r1, r0, r0, ror #9
   13518:	andeq	r1, r0, r0, asr #9
   1351c:	andeq	r1, r0, r4, lsr #9
   13520:	andeq	r1, r0, r4, lsl #9
   13524:	andeq	r1, r0, r4, ror #8
   13528:	andeq	r1, r0, r0, asr #8
   1352c:	andeq	r1, r0, r8, lsl r4
   13530:	andeq	r1, r0, ip, ror #7
   13534:	ldrdeq	r1, [r0], -r4
   13538:	ldrdeq	r1, [r0], -r8
   1353c:	push	{r4, r5, lr}
   13540:	sub	sp, sp, #12
   13544:	ldr	r5, [sp, #24]
   13548:	ldr	ip, [r5]
   1354c:	cmp	ip, #0
   13550:	beq	1356c <close_stdout@@Base+0x1ed8>
   13554:	mov	lr, r5
   13558:	mov	ip, #0
   1355c:	ldr	r4, [lr, #4]!
   13560:	add	ip, ip, #1
   13564:	cmp	r4, #0
   13568:	bne	1355c <close_stdout@@Base+0x1ec8>
   1356c:	stm	sp, {r5, ip}
   13570:	bl	13168 <close_stdout@@Base+0x1ad4>
   13574:	add	sp, sp, #12
   13578:	pop	{r4, r5, pc}
   1357c:	push	{r4, r5, r6, r7, lr}
   13580:	sub	sp, sp, #60	; 0x3c
   13584:	ldr	r4, [pc, #100]	; 135f0 <close_stdout@@Base+0x1f5c>
   13588:	mov	ip, #0
   1358c:	ldr	r5, [pc, #96]	; 135f4 <close_stdout@@Base+0x1f60>
   13590:	mov	lr, ip
   13594:	add	r4, pc, r4
   13598:	ldr	r6, [sp, #80]	; 0x50
   1359c:	ldr	r7, [r4, r5]
   135a0:	add	r5, sp, #12
   135a4:	ldr	r4, [r7]
   135a8:	str	r4, [sp, #52]	; 0x34
   135ac:	ldr	r4, [r6, ip]
   135b0:	cmp	r4, #0
   135b4:	str	r4, [r5, ip]
   135b8:	beq	135cc <close_stdout@@Base+0x1f38>
   135bc:	add	lr, lr, #1
   135c0:	add	ip, ip, #4
   135c4:	cmp	lr, #10
   135c8:	bne	135ac <close_stdout@@Base+0x1f18>
   135cc:	stm	sp, {r5, lr}
   135d0:	bl	13168 <close_stdout@@Base+0x1ad4>
   135d4:	ldr	r2, [sp, #52]	; 0x34
   135d8:	ldr	r3, [r7]
   135dc:	cmp	r2, r3
   135e0:	bne	135ec <close_stdout@@Base+0x1f58>
   135e4:	add	sp, sp, #60	; 0x3c
   135e8:	pop	{r4, r5, r6, r7, pc}
   135ec:	bl	10f0c <__stack_chk_fail@plt>
   135f0:	andeq	r1, r1, r4, ror #20
   135f4:	andeq	r0, r0, r4, ror #1
   135f8:	push	{r3}		; (str r3, [sp, #-4]!)
   135fc:	push	{r4, lr}
   13600:	sub	sp, sp, #20
   13604:	ldr	lr, [pc, #72]	; 13654 <close_stdout@@Base+0x1fc0>
   13608:	add	ip, sp, #32
   1360c:	ldr	r4, [pc, #68]	; 13658 <close_stdout@@Base+0x1fc4>
   13610:	add	lr, pc, lr
   13614:	ldr	r3, [sp, #28]
   13618:	ldr	r4, [lr, r4]
   1361c:	str	ip, [sp]
   13620:	str	ip, [sp, #8]
   13624:	ldr	ip, [r4]
   13628:	str	ip, [sp, #12]
   1362c:	bl	1357c <close_stdout@@Base+0x1ee8>
   13630:	ldr	r2, [sp, #12]
   13634:	ldr	r3, [r4]
   13638:	cmp	r2, r3
   1363c:	bne	13650 <close_stdout@@Base+0x1fbc>
   13640:	add	sp, sp, #20
   13644:	pop	{r4, lr}
   13648:	add	sp, sp, #4
   1364c:	bx	lr
   13650:	bl	10f0c <__stack_chk_fail@plt>
   13654:	andeq	r1, r1, r8, ror #19
   13658:	andeq	r0, r0, r4, ror #1
   1365c:	ldr	r1, [pc, #132]	; 136e8 <close_stdout@@Base+0x2054>
   13660:	mov	r2, #5
   13664:	push	{r4, lr}
   13668:	add	r1, pc, r1
   1366c:	mov	r0, #0
   13670:	ldr	r4, [pc, #116]	; 136ec <close_stdout@@Base+0x2058>
   13674:	bl	10f00 <dcgettext@plt>
   13678:	ldr	r2, [pc, #112]	; 136f0 <close_stdout@@Base+0x205c>
   1367c:	add	r4, pc, r4
   13680:	add	r2, pc, r2
   13684:	mov	r1, r0
   13688:	mov	r0, #1
   1368c:	bl	11044 <__printf_chk@plt>
   13690:	ldr	r1, [pc, #92]	; 136f4 <close_stdout@@Base+0x2060>
   13694:	mov	r2, #5
   13698:	mov	r0, #0
   1369c:	add	r1, pc, r1
   136a0:	bl	10f00 <dcgettext@plt>
   136a4:	ldr	r2, [pc, #76]	; 136f8 <close_stdout@@Base+0x2064>
   136a8:	ldr	r3, [pc, #76]	; 136fc <close_stdout@@Base+0x2068>
   136ac:	add	r2, pc, r2
   136b0:	add	r3, pc, r3
   136b4:	mov	r1, r0
   136b8:	mov	r0, #1
   136bc:	bl	11044 <__printf_chk@plt>
   136c0:	ldr	r1, [pc, #56]	; 13700 <close_stdout@@Base+0x206c>
   136c4:	mov	r0, #0
   136c8:	mov	r2, #5
   136cc:	add	r1, pc, r1
   136d0:	bl	10f00 <dcgettext@plt>
   136d4:	ldr	r3, [pc, #40]	; 13704 <close_stdout@@Base+0x2070>
   136d8:	ldr	r3, [r4, r3]
   136dc:	pop	{r4, lr}
   136e0:	ldr	r1, [r3]
   136e4:	b	10e88 <fputs_unlocked@plt>
   136e8:	andeq	r1, r0, r0, lsr #5
   136ec:	andeq	r1, r1, ip, ror r9
   136f0:	andeq	r1, r0, r0, lsr #5
   136f4:	muleq	r0, ip, r2
   136f8:	andeq	r0, r0, ip, ror #27
   136fc:	strdeq	r0, [r0], -r8
   13700:	andeq	r1, r0, r0, lsl #5
   13704:	andeq	r0, r0, r0, lsl #2
   13708:	push	{r4, lr}
   1370c:	mov	r4, r0
   13710:	bl	10fa8 <malloc@plt>
   13714:	rsbs	r3, r0, #1
   13718:	movcc	r3, #0
   1371c:	cmp	r4, #0
   13720:	moveq	r3, #0
   13724:	cmp	r3, #0
   13728:	popeq	{r4, pc}
   1372c:	bl	1391c <close_stdout@@Base+0x2288>
   13730:	push	{r3, r4, r5, lr}
   13734:	mov	r4, r0
   13738:	mvn	r0, #0
   1373c:	mov	r5, r1
   13740:	bl	13fbc <close_stdout@@Base+0x2928>
   13744:	cmp	r0, r4
   13748:	bcc	13758 <close_stdout@@Base+0x20c4>
   1374c:	mul	r0, r4, r5
   13750:	pop	{r3, r4, r5, lr}
   13754:	b	13708 <close_stdout@@Base+0x2074>
   13758:	bl	1391c <close_stdout@@Base+0x2288>
   1375c:	b	13708 <close_stdout@@Base+0x2074>
   13760:	rsbs	r3, r1, #1
   13764:	push	{r4, lr}
   13768:	movcc	r3, #0
   1376c:	cmp	r0, #0
   13770:	mov	r4, r1
   13774:	moveq	r3, #0
   13778:	cmp	r3, #0
   1377c:	bne	137a0 <close_stdout@@Base+0x210c>
   13780:	bl	10f18 <realloc@plt>
   13784:	rsbs	r3, r0, #1
   13788:	movcc	r3, #0
   1378c:	cmp	r4, #0
   13790:	moveq	r3, #0
   13794:	cmp	r3, #0
   13798:	popeq	{r4, pc}
   1379c:	bl	1391c <close_stdout@@Base+0x2288>
   137a0:	bl	10eb8 <free@plt>
   137a4:	mov	r0, #0
   137a8:	pop	{r4, pc}
   137ac:	push	{r4, r5, r6, lr}
   137b0:	mov	r5, r1
   137b4:	mov	r6, r0
   137b8:	mov	r1, r2
   137bc:	mvn	r0, #0
   137c0:	mov	r4, r2
   137c4:	bl	13fbc <close_stdout@@Base+0x2928>
   137c8:	cmp	r0, r5
   137cc:	bcc	137e0 <close_stdout@@Base+0x214c>
   137d0:	mov	r0, r6
   137d4:	mul	r1, r5, r4
   137d8:	pop	{r4, r5, r6, lr}
   137dc:	b	13760 <close_stdout@@Base+0x20cc>
   137e0:	bl	1391c <close_stdout@@Base+0x2288>
   137e4:	push	{r3, r4, r5, r6, r7, lr}
   137e8:	subs	r7, r0, #0
   137ec:	mov	r5, r1
   137f0:	mov	r6, r2
   137f4:	ldr	r4, [r1]
   137f8:	beq	13830 <close_stdout@@Base+0x219c>
   137fc:	movw	r0, #43690	; 0xaaaa
   13800:	mov	r1, r2
   13804:	bfi	r0, r0, #16, #16
   13808:	bl	13fbc <close_stdout@@Base+0x2928>
   1380c:	cmp	r4, r0
   13810:	addcc	r3, r4, #1
   13814:	addcc	r4, r4, r3, lsr #1
   13818:	bcs	13854 <close_stdout@@Base+0x21c0>
   1381c:	str	r4, [r5]
   13820:	mov	r0, r7
   13824:	mul	r1, r6, r4
   13828:	pop	{r3, r4, r5, r6, r7, lr}
   1382c:	b	13760 <close_stdout@@Base+0x20cc>
   13830:	cmp	r4, #0
   13834:	bne	1381c <close_stdout@@Base+0x2188>
   13838:	mov	r0, #64	; 0x40
   1383c:	mov	r1, r2
   13840:	bl	13fbc <close_stdout@@Base+0x2928>
   13844:	cmp	r0, #0
   13848:	movne	r4, r0
   1384c:	addeq	r4, r0, #1
   13850:	b	1381c <close_stdout@@Base+0x2188>
   13854:	bl	1391c <close_stdout@@Base+0x2288>
   13858:	cmp	r0, #0
   1385c:	push	{r3, lr}
   13860:	ldr	r3, [r1]
   13864:	beq	13890 <close_stdout@@Base+0x21fc>
   13868:	movw	r2, #43689	; 0xaaa9
   1386c:	movt	r2, #43690	; 0xaaaa
   13870:	cmp	r3, r2
   13874:	addls	r2, r3, #1
   13878:	addls	r3, r3, r2, lsr #1
   1387c:	bhi	138a8 <close_stdout@@Base+0x2214>
   13880:	str	r3, [r1]
   13884:	mov	r1, r3
   13888:	pop	{r3, lr}
   1388c:	b	13760 <close_stdout@@Base+0x20cc>
   13890:	cmp	r3, #0
   13894:	moveq	r3, #64	; 0x40
   13898:	str	r3, [r1]
   1389c:	mov	r1, r3
   138a0:	pop	{r3, lr}
   138a4:	b	13760 <close_stdout@@Base+0x20cc>
   138a8:	bl	1391c <close_stdout@@Base+0x2288>
   138ac:	push	{r4, lr}
   138b0:	mov	r4, r0
   138b4:	bl	13708 <close_stdout@@Base+0x2074>
   138b8:	mov	r2, r4
   138bc:	mov	r1, #0
   138c0:	pop	{r4, lr}
   138c4:	b	1102c <memset@plt>
   138c8:	push	{r3, lr}
   138cc:	bl	10e7c <calloc@plt>
   138d0:	cmp	r0, #0
   138d4:	popne	{r3, pc}
   138d8:	bl	1391c <close_stdout@@Base+0x2288>
   138dc:	push	{r3, r4, r5, lr}
   138e0:	mov	r4, r1
   138e4:	mov	r5, r0
   138e8:	mov	r0, r1
   138ec:	bl	13708 <close_stdout@@Base+0x2074>
   138f0:	mov	r1, r5
   138f4:	mov	r2, r4
   138f8:	pop	{r3, r4, r5, lr}
   138fc:	b	10ed0 <memcpy@plt>
   13900:	push	{r4, lr}
   13904:	mov	r4, r0
   13908:	bl	10ffc <strlen@plt>
   1390c:	add	r1, r0, #1
   13910:	mov	r0, r4
   13914:	pop	{r4, lr}
   13918:	b	138dc <close_stdout@@Base+0x2248>
   1391c:	ldr	r3, [pc, #64]	; 13964 <close_stdout@@Base+0x22d0>
   13920:	mov	r2, #5
   13924:	ldr	ip, [pc, #60]	; 13968 <close_stdout@@Base+0x22d4>
   13928:	mov	r0, #0
   1392c:	add	r3, pc, r3
   13930:	ldr	r1, [pc, #52]	; 1396c <close_stdout@@Base+0x22d8>
   13934:	push	{r4, lr}
   13938:	add	r1, pc, r1
   1393c:	ldr	r3, [r3, ip]
   13940:	ldr	r4, [r3]
   13944:	bl	10f00 <dcgettext@plt>
   13948:	ldr	r2, [pc, #32]	; 13970 <close_stdout@@Base+0x22dc>
   1394c:	mov	r1, #0
   13950:	add	r2, pc, r2
   13954:	mov	r3, r0
   13958:	mov	r0, r4
   1395c:	bl	10f84 <error@plt>
   13960:	bl	110d4 <abort@plt>
   13964:	andeq	r1, r1, ip, asr #13
   13968:	andeq	r0, r0, r4, lsl #2
   1396c:	andeq	r1, r0, r4, lsl #1
   13970:	muleq	r0, r0, ip
   13974:	push	{r4, r5, r6, lr}
   13978:	mov	r4, r0
   1397c:	bl	10f6c <__fpending@plt>
   13980:	mov	r6, r0
   13984:	mov	r0, r4
   13988:	ldr	r4, [r4]
   1398c:	bl	13e14 <close_stdout@@Base+0x2780>
   13990:	and	r4, r4, #32
   13994:	adds	r5, r0, #0
   13998:	movne	r5, #1
   1399c:	cmp	r4, #0
   139a0:	bne	139c0 <close_stdout@@Base+0x232c>
   139a4:	cmp	r5, #0
   139a8:	beq	139b8 <close_stdout@@Base+0x2324>
   139ac:	cmp	r6, #0
   139b0:	beq	139dc <close_stdout@@Base+0x2348>
   139b4:	mvn	r4, #0
   139b8:	mov	r0, r4
   139bc:	pop	{r4, r5, r6, pc}
   139c0:	cmp	r5, #0
   139c4:	bne	139b4 <close_stdout@@Base+0x2320>
   139c8:	bl	11014 <__errno_location@plt>
   139cc:	mvn	r4, #0
   139d0:	str	r5, [r0]
   139d4:	mov	r0, r4
   139d8:	pop	{r4, r5, r6, pc}
   139dc:	bl	11014 <__errno_location@plt>
   139e0:	ldr	r4, [r0]
   139e4:	subs	r4, r4, #9
   139e8:	mvnne	r4, #0
   139ec:	mov	r0, r4
   139f0:	pop	{r4, r5, r6, pc}
   139f4:	ldr	r3, [pc, #984]	; 13dd4 <close_stdout@@Base+0x2740>
   139f8:	mov	r0, #14
   139fc:	ldr	r2, [pc, #980]	; 13dd8 <close_stdout@@Base+0x2744>
   13a00:	add	r3, pc, r3
   13a04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a08:	sub	sp, sp, #132	; 0x84
   13a0c:	ldr	r6, [r3, r2]
   13a10:	ldr	r3, [r6]
   13a14:	str	r3, [sp, #124]	; 0x7c
   13a18:	bl	110b0 <nl_langinfo@plt>
   13a1c:	subs	r5, r0, #0
   13a20:	beq	13ad4 <close_stdout@@Base+0x2440>
   13a24:	ldr	r3, [pc, #944]	; 13ddc <close_stdout@@Base+0x2748>
   13a28:	ldr	r4, [pc, r3]
   13a2c:	cmp	r4, #0
   13a30:	beq	13ae0 <close_stdout@@Base+0x244c>
   13a34:	ldrb	r7, [r4]
   13a38:	cmp	r7, #0
   13a3c:	bne	13a70 <close_stdout@@Base+0x23dc>
   13a40:	b	13aa8 <close_stdout@@Base+0x2414>
   13a44:	mov	r0, r4
   13a48:	bl	10ffc <strlen@plt>
   13a4c:	add	r0, r0, #1
   13a50:	add	r7, r4, r0
   13a54:	mov	r0, r7
   13a58:	bl	10ffc <strlen@plt>
   13a5c:	add	r0, r0, #1
   13a60:	add	r4, r7, r0
   13a64:	ldrb	r7, [r7, r0]
   13a68:	cmp	r7, #0
   13a6c:	beq	13aa8 <close_stdout@@Base+0x2414>
   13a70:	mov	r0, r5
   13a74:	mov	r1, r4
   13a78:	bl	10ea0 <strcmp@plt>
   13a7c:	cmp	r0, #0
   13a80:	beq	13a98 <close_stdout@@Base+0x2404>
   13a84:	cmp	r7, #42	; 0x2a
   13a88:	bne	13a44 <close_stdout@@Base+0x23b0>
   13a8c:	ldrb	r3, [r4, #1]
   13a90:	cmp	r3, #0
   13a94:	bne	13a44 <close_stdout@@Base+0x23b0>
   13a98:	mov	r0, r4
   13a9c:	bl	10ffc <strlen@plt>
   13aa0:	add	r0, r0, #1
   13aa4:	add	r5, r4, r0
   13aa8:	ldrb	r3, [r5]
   13aac:	cmp	r3, #0
   13ab0:	ldreq	r5, [pc, #808]	; 13de0 <close_stdout@@Base+0x274c>
   13ab4:	addeq	r5, pc, r5
   13ab8:	ldr	r2, [sp, #124]	; 0x7c
   13abc:	mov	r0, r5
   13ac0:	ldr	r3, [r6]
   13ac4:	cmp	r2, r3
   13ac8:	bne	13da8 <close_stdout@@Base+0x2714>
   13acc:	add	sp, sp, #132	; 0x84
   13ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad4:	ldr	r5, [pc, #776]	; 13de4 <close_stdout@@Base+0x2750>
   13ad8:	add	r5, pc, r5
   13adc:	b	13a24 <close_stdout@@Base+0x2390>
   13ae0:	ldr	r0, [pc, #768]	; 13de8 <close_stdout@@Base+0x2754>
   13ae4:	add	r0, pc, r0
   13ae8:	bl	10f9c <getenv@plt>
   13aec:	subs	r8, r0, #0
   13af0:	beq	13d80 <close_stdout@@Base+0x26ec>
   13af4:	ldrb	r3, [r8]
   13af8:	cmp	r3, #0
   13afc:	beq	13d14 <close_stdout@@Base+0x2680>
   13b00:	bl	10ffc <strlen@plt>
   13b04:	subs	sl, r0, #0
   13b08:	subne	r3, sl, #1
   13b0c:	bne	13d24 <close_stdout@@Base+0x2690>
   13b10:	mov	r9, #0
   13b14:	mov	fp, r9
   13b18:	add	r9, sl, r9
   13b1c:	add	r0, r9, #14
   13b20:	bl	10fa8 <malloc@plt>
   13b24:	subs	r7, r0, #0
   13b28:	beq	13d74 <close_stdout@@Base+0x26e0>
   13b2c:	mov	r1, r8
   13b30:	mov	r2, sl
   13b34:	bl	10ed0 <memcpy@plt>
   13b38:	cmp	fp, #0
   13b3c:	add	ip, r7, r9
   13b40:	movne	r3, #47	; 0x2f
   13b44:	strbne	r3, [r7, sl]
   13b48:	ldr	r3, [pc, #668]	; 13dec <close_stdout@@Base+0x2758>
   13b4c:	add	r3, pc, r3
   13b50:	ldm	r3!, {r0, r1, r2}
   13b54:	ldrh	r3, [r3]
   13b58:	str	r0, [r7, r9]
   13b5c:	mov	r0, r7
   13b60:	str	r1, [ip, #4]
   13b64:	mov	r1, #32768	; 0x8000
   13b68:	strh	r3, [ip, #12]
   13b6c:	str	r2, [ip, #8]
   13b70:	bl	10f90 <open64@plt>
   13b74:	subs	r8, r0, #0
   13b78:	blt	13d3c <close_stdout@@Base+0x26a8>
   13b7c:	ldr	r1, [pc, #620]	; 13df0 <close_stdout@@Base+0x275c>
   13b80:	add	r1, pc, r1
   13b84:	bl	10e70 <fdopen@plt>
   13b88:	subs	fp, r0, #0
   13b8c:	beq	13d94 <close_stdout@@Base+0x2700>
   13b90:	ldr	r0, [pc, #604]	; 13df4 <close_stdout@@Base+0x2760>
   13b94:	add	sl, sp, #20
   13b98:	add	r9, sp, #72	; 0x48
   13b9c:	mov	r8, #0
   13ba0:	add	r0, pc, r0
   13ba4:	str	r0, [sp, #12]
   13ba8:	ldr	r3, [fp, #4]
   13bac:	ldr	r2, [fp, #8]
   13bb0:	cmp	r3, r2
   13bb4:	bcs	13ca0 <close_stdout@@Base+0x260c>
   13bb8:	add	r2, r3, #1
   13bbc:	str	r2, [fp, #4]
   13bc0:	ldrb	r0, [r3]
   13bc4:	cmp	r0, #32
   13bc8:	beq	13ba8 <close_stdout@@Base+0x2514>
   13bcc:	sub	r3, r0, #9
   13bd0:	cmp	r3, #1
   13bd4:	bls	13ba8 <close_stdout@@Base+0x2514>
   13bd8:	cmp	r0, #35	; 0x23
   13bdc:	beq	13cb4 <close_stdout@@Base+0x2620>
   13be0:	mov	r1, fp
   13be4:	bl	11008 <ungetc@plt>
   13be8:	mov	r0, fp
   13bec:	ldr	r1, [sp, #12]
   13bf0:	mov	r2, sl
   13bf4:	mov	r3, r9
   13bf8:	bl	11038 <fscanf@plt>
   13bfc:	cmp	r0, #1
   13c00:	ble	13ce4 <close_stdout@@Base+0x2650>
   13c04:	mov	r0, sl
   13c08:	bl	10ffc <strlen@plt>
   13c0c:	str	r0, [sp, #8]
   13c10:	mov	r0, r9
   13c14:	bl	10ffc <strlen@plt>
   13c18:	cmp	r8, #0
   13c1c:	mov	r2, r0
   13c20:	bne	13d48 <close_stdout@@Base+0x26b4>
   13c24:	ldr	r3, [sp, #8]
   13c28:	str	r2, [sp]
   13c2c:	add	r8, r0, r3
   13c30:	add	r0, r8, #3
   13c34:	add	r8, r8, #2
   13c38:	bl	10fa8 <malloc@plt>
   13c3c:	ldr	r2, [sp]
   13c40:	mov	r3, r0
   13c44:	cmp	r3, #0
   13c48:	beq	13dac <close_stdout@@Base+0x2718>
   13c4c:	ldr	r0, [sp, #8]
   13c50:	movw	r1, #65534	; 0xfffe
   13c54:	movt	r1, #65535	; 0xffff
   13c58:	rsb	r2, r2, r8
   13c5c:	rsb	r1, r0, r1
   13c60:	stm	sp, {r2, r3}
   13c64:	add	r0, r1, r2
   13c68:	mov	r1, sl
   13c6c:	add	r0, r3, r0
   13c70:	mov	r4, r3
   13c74:	bl	10f60 <strcpy@plt>
   13c78:	ldr	r2, [sp]
   13c7c:	ldr	r3, [sp, #4]
   13c80:	mov	r1, r9
   13c84:	sub	r0, r2, #1
   13c88:	add	r0, r3, r0
   13c8c:	bl	10f60 <strcpy@plt>
   13c90:	ldr	r3, [fp, #4]
   13c94:	ldr	r2, [fp, #8]
   13c98:	cmp	r3, r2
   13c9c:	bcc	13bb8 <close_stdout@@Base+0x2524>
   13ca0:	mov	r0, fp
   13ca4:	bl	11080 <__uflow@plt>
   13ca8:	cmn	r0, #1
   13cac:	beq	13ce4 <close_stdout@@Base+0x2650>
   13cb0:	b	13bc4 <close_stdout@@Base+0x2530>
   13cb4:	ldr	r3, [fp, #4]
   13cb8:	ldr	r2, [fp, #8]
   13cbc:	cmp	r3, r2
   13cc0:	bcs	13dc8 <close_stdout@@Base+0x2734>
   13cc4:	add	r2, r3, #1
   13cc8:	str	r2, [fp, #4]
   13ccc:	ldrb	r0, [r3]
   13cd0:	cmp	r0, #10
   13cd4:	cmnne	r0, #1
   13cd8:	bne	13cb4 <close_stdout@@Base+0x2620>
   13cdc:	cmn	r0, #1
   13ce0:	bne	13ba8 <close_stdout@@Base+0x2514>
   13ce4:	mov	r0, fp
   13ce8:	bl	13e14 <close_stdout@@Base+0x2780>
   13cec:	cmp	r8, #0
   13cf0:	beq	13d3c <close_stdout@@Base+0x26a8>
   13cf4:	mov	r3, #0
   13cf8:	strb	r3, [r4, r8]
   13cfc:	mov	r0, r7
   13d00:	bl	10eb8 <free@plt>
   13d04:	ldr	r3, [pc, #236]	; 13df8 <close_stdout@@Base+0x2764>
   13d08:	add	r3, pc, r3
   13d0c:	str	r4, [r3]
   13d10:	b	13a34 <close_stdout@@Base+0x23a0>
   13d14:	ldr	r8, [pc, #224]	; 13dfc <close_stdout@@Base+0x2768>
   13d18:	mov	r3, #7
   13d1c:	mov	sl, #8
   13d20:	add	r8, pc, r8
   13d24:	ldrb	r3, [r8, r3]
   13d28:	cmp	r3, #47	; 0x2f
   13d2c:	movne	r9, #1
   13d30:	movne	fp, r9
   13d34:	bne	13b18 <close_stdout@@Base+0x2484>
   13d38:	b	13b10 <close_stdout@@Base+0x247c>
   13d3c:	ldr	r4, [pc, #188]	; 13e00 <close_stdout@@Base+0x276c>
   13d40:	add	r4, pc, r4
   13d44:	b	13cfc <close_stdout@@Base+0x2668>
   13d48:	ldr	r0, [sp, #8]
   13d4c:	str	r2, [sp]
   13d50:	add	r3, r0, r2
   13d54:	mov	r0, r4
   13d58:	add	r8, r3, r8
   13d5c:	add	r1, r8, #3
   13d60:	add	r8, r8, #2
   13d64:	bl	10f18 <realloc@plt>
   13d68:	ldr	r2, [sp]
   13d6c:	mov	r3, r0
   13d70:	b	13c44 <close_stdout@@Base+0x25b0>
   13d74:	ldr	r4, [pc, #136]	; 13e04 <close_stdout@@Base+0x2770>
   13d78:	add	r4, pc, r4
   13d7c:	b	13d04 <close_stdout@@Base+0x2670>
   13d80:	ldr	r8, [pc, #128]	; 13e08 <close_stdout@@Base+0x2774>
   13d84:	mov	r3, #7
   13d88:	mov	sl, #8
   13d8c:	add	r8, pc, r8
   13d90:	b	13d24 <close_stdout@@Base+0x2690>
   13d94:	ldr	r4, [pc, #112]	; 13e0c <close_stdout@@Base+0x2778>
   13d98:	mov	r0, r8
   13d9c:	add	r4, pc, r4
   13da0:	bl	110e0 <close@plt>
   13da4:	b	13cfc <close_stdout@@Base+0x2668>
   13da8:	bl	10f0c <__stack_chk_fail@plt>
   13dac:	mov	r0, r4
   13db0:	ldr	r4, [pc, #88]	; 13e10 <close_stdout@@Base+0x277c>
   13db4:	bl	10eb8 <free@plt>
   13db8:	mov	r0, fp
   13dbc:	add	r4, pc, r4
   13dc0:	bl	13e14 <close_stdout@@Base+0x2780>
   13dc4:	b	13cfc <close_stdout@@Base+0x2668>
   13dc8:	mov	r0, fp
   13dcc:	bl	11080 <__uflow@plt>
   13dd0:	b	13cd0 <close_stdout@@Base+0x263c>
   13dd4:	strdeq	r1, [r1], -r8
   13dd8:	andeq	r0, r0, r4, ror #1
   13ddc:	andeq	r1, r1, r4, ror r8
   13de0:	andeq	r0, r0, r8, lsr #30
   13de4:	andeq	r0, r0, r4, lsl #21
   13de8:	andeq	r0, r0, r0, lsl #30
   13dec:	andeq	r0, r0, r8, lsr #29
   13df0:	andeq	r0, r0, r4, lsl #29
   13df4:	andeq	r0, r0, r8, ror #28
   13df8:	muleq	r1, r4, r5
   13dfc:			; <UNDEFINED> instruction: 0x00000cb0
   13e00:	andeq	r0, r0, ip, lsl r8
   13e04:	andeq	r0, r0, r4, ror #15
   13e08:	andeq	r0, r0, r4, asr #24
   13e0c:	andeq	r0, r0, r0, asr #15
   13e10:	andeq	r0, r0, r0, lsr #15
   13e14:	push	{r4, r5, r6, lr}
   13e18:	sub	sp, sp, #8
   13e1c:	mov	r4, r0
   13e20:	bl	11050 <fileno@plt>
   13e24:	cmp	r0, #0
   13e28:	mov	r0, r4
   13e2c:	blt	13ea8 <close_stdout@@Base+0x2814>
   13e30:	bl	10fc0 <__freading@plt>
   13e34:	cmp	r0, #0
   13e38:	bne	13e74 <close_stdout@@Base+0x27e0>
   13e3c:	mov	r0, r4
   13e40:	bl	13eb4 <close_stdout@@Base+0x2820>
   13e44:	cmp	r0, #0
   13e48:	beq	13ea4 <close_stdout@@Base+0x2810>
   13e4c:	bl	11014 <__errno_location@plt>
   13e50:	ldr	r6, [r0]
   13e54:	mov	r5, r0
   13e58:	mov	r0, r4
   13e5c:	bl	11068 <fclose@plt>
   13e60:	cmp	r6, #0
   13e64:	mvnne	r0, #0
   13e68:	strne	r6, [r5]
   13e6c:	add	sp, sp, #8
   13e70:	pop	{r4, r5, r6, pc}
   13e74:	mov	r0, r4
   13e78:	bl	11050 <fileno@plt>
   13e7c:	mov	r1, #1
   13e80:	mov	r2, #0
   13e84:	mov	r3, #0
   13e88:	str	r1, [sp]
   13e8c:	bl	10f48 <lseek64@plt>
   13e90:	mvn	r2, #0
   13e94:	mvn	r3, #0
   13e98:	cmp	r1, r3
   13e9c:	cmpeq	r0, r2
   13ea0:	bne	13e3c <close_stdout@@Base+0x27a8>
   13ea4:	mov	r0, r4
   13ea8:	add	sp, sp, #8
   13eac:	pop	{r4, r5, r6, lr}
   13eb0:	b	11068 <fclose@plt>
   13eb4:	push	{r4, lr}
   13eb8:	subs	r4, r0, #0
   13ebc:	sub	sp, sp, #8
   13ec0:	beq	13ed0 <close_stdout@@Base+0x283c>
   13ec4:	bl	10fc0 <__freading@plt>
   13ec8:	cmp	r0, #0
   13ecc:	bne	13ee0 <close_stdout@@Base+0x284c>
   13ed0:	mov	r0, r4
   13ed4:	add	sp, sp, #8
   13ed8:	pop	{r4, lr}
   13edc:	b	10eac <fflush@plt>
   13ee0:	ldr	r3, [r4]
   13ee4:	tst	r3, #256	; 0x100
   13ee8:	beq	13ed0 <close_stdout@@Base+0x283c>
   13eec:	mov	r3, #1
   13ef0:	mov	r0, r4
   13ef4:	str	r3, [sp]
   13ef8:	mov	r2, #0
   13efc:	mov	r3, #0
   13f00:	bl	13f14 <close_stdout@@Base+0x2880>
   13f04:	mov	r0, r4
   13f08:	add	sp, sp, #8
   13f0c:	pop	{r4, lr}
   13f10:	b	10eac <fflush@plt>
   13f14:	push	{r4, r5, r6, r7, lr}
   13f18:	sub	sp, sp, #20
   13f1c:	ldmib	r0, {r1, ip}
   13f20:	mov	r6, r0
   13f24:	ldr	r4, [sp, #40]	; 0x28
   13f28:	cmp	ip, r1
   13f2c:	beq	13f44 <close_stdout@@Base+0x28b0>
   13f30:	str	r4, [sp, #40]	; 0x28
   13f34:	mov	r0, r6
   13f38:	add	sp, sp, #20
   13f3c:	pop	{r4, r5, r6, r7, lr}
   13f40:	b	11074 <fseeko64@plt>
   13f44:	ldr	ip, [r0, #20]
   13f48:	ldr	r1, [r0, #16]
   13f4c:	cmp	ip, r1
   13f50:	bne	13f30 <close_stdout@@Base+0x289c>
   13f54:	ldr	r7, [r0, #36]	; 0x24
   13f58:	cmp	r7, #0
   13f5c:	bne	13f30 <close_stdout@@Base+0x289c>
   13f60:	str	r2, [sp, #12]
   13f64:	mvn	r5, #0
   13f68:	str	r3, [sp, #8]
   13f6c:	bl	11050 <fileno@plt>
   13f70:	str	r4, [sp]
   13f74:	mvn	r4, #0
   13f78:	ldr	r2, [sp, #12]
   13f7c:	ldr	r3, [sp, #8]
   13f80:	bl	10f48 <lseek64@plt>
   13f84:	mov	r2, r0
   13f88:	mov	r3, r1
   13f8c:	cmp	r3, r5
   13f90:	cmpeq	r2, r4
   13f94:	beq	13fb4 <close_stdout@@Base+0x2920>
   13f98:	ldr	r1, [r6]
   13f9c:	mov	r0, r7
   13fa0:	strd	r2, [r6, #80]	; 0x50
   13fa4:	bic	r3, r1, #16
   13fa8:	str	r3, [r6]
   13fac:	add	sp, sp, #20
   13fb0:	pop	{r4, r5, r6, r7, pc}
   13fb4:	mvn	r0, #0
   13fb8:	b	13fac <close_stdout@@Base+0x2918>
   13fbc:	subs	r2, r1, #1
   13fc0:	bxeq	lr
   13fc4:	bcc	1419c <close_stdout@@Base+0x2b08>
   13fc8:	cmp	r0, r1
   13fcc:	bls	14180 <close_stdout@@Base+0x2aec>
   13fd0:	tst	r1, r2
   13fd4:	beq	1418c <close_stdout@@Base+0x2af8>
   13fd8:	clz	r3, r0
   13fdc:	clz	r2, r1
   13fe0:	sub	r3, r2, r3
   13fe4:	rsbs	r3, r3, #31
   13fe8:	addne	r3, r3, r3, lsl #1
   13fec:	mov	r2, #0
   13ff0:	addne	pc, pc, r3, lsl #2
   13ff4:	nop	{0}
   13ff8:	cmp	r0, r1, lsl #31
   13ffc:	adc	r2, r2, r2
   14000:	subcs	r0, r0, r1, lsl #31
   14004:	cmp	r0, r1, lsl #30
   14008:	adc	r2, r2, r2
   1400c:	subcs	r0, r0, r1, lsl #30
   14010:	cmp	r0, r1, lsl #29
   14014:	adc	r2, r2, r2
   14018:	subcs	r0, r0, r1, lsl #29
   1401c:	cmp	r0, r1, lsl #28
   14020:	adc	r2, r2, r2
   14024:	subcs	r0, r0, r1, lsl #28
   14028:	cmp	r0, r1, lsl #27
   1402c:	adc	r2, r2, r2
   14030:	subcs	r0, r0, r1, lsl #27
   14034:	cmp	r0, r1, lsl #26
   14038:	adc	r2, r2, r2
   1403c:	subcs	r0, r0, r1, lsl #26
   14040:	cmp	r0, r1, lsl #25
   14044:	adc	r2, r2, r2
   14048:	subcs	r0, r0, r1, lsl #25
   1404c:	cmp	r0, r1, lsl #24
   14050:	adc	r2, r2, r2
   14054:	subcs	r0, r0, r1, lsl #24
   14058:	cmp	r0, r1, lsl #23
   1405c:	adc	r2, r2, r2
   14060:	subcs	r0, r0, r1, lsl #23
   14064:	cmp	r0, r1, lsl #22
   14068:	adc	r2, r2, r2
   1406c:	subcs	r0, r0, r1, lsl #22
   14070:	cmp	r0, r1, lsl #21
   14074:	adc	r2, r2, r2
   14078:	subcs	r0, r0, r1, lsl #21
   1407c:	cmp	r0, r1, lsl #20
   14080:	adc	r2, r2, r2
   14084:	subcs	r0, r0, r1, lsl #20
   14088:	cmp	r0, r1, lsl #19
   1408c:	adc	r2, r2, r2
   14090:	subcs	r0, r0, r1, lsl #19
   14094:	cmp	r0, r1, lsl #18
   14098:	adc	r2, r2, r2
   1409c:	subcs	r0, r0, r1, lsl #18
   140a0:	cmp	r0, r1, lsl #17
   140a4:	adc	r2, r2, r2
   140a8:	subcs	r0, r0, r1, lsl #17
   140ac:	cmp	r0, r1, lsl #16
   140b0:	adc	r2, r2, r2
   140b4:	subcs	r0, r0, r1, lsl #16
   140b8:	cmp	r0, r1, lsl #15
   140bc:	adc	r2, r2, r2
   140c0:	subcs	r0, r0, r1, lsl #15
   140c4:	cmp	r0, r1, lsl #14
   140c8:	adc	r2, r2, r2
   140cc:	subcs	r0, r0, r1, lsl #14
   140d0:	cmp	r0, r1, lsl #13
   140d4:	adc	r2, r2, r2
   140d8:	subcs	r0, r0, r1, lsl #13
   140dc:	cmp	r0, r1, lsl #12
   140e0:	adc	r2, r2, r2
   140e4:	subcs	r0, r0, r1, lsl #12
   140e8:	cmp	r0, r1, lsl #11
   140ec:	adc	r2, r2, r2
   140f0:	subcs	r0, r0, r1, lsl #11
   140f4:	cmp	r0, r1, lsl #10
   140f8:	adc	r2, r2, r2
   140fc:	subcs	r0, r0, r1, lsl #10
   14100:	cmp	r0, r1, lsl #9
   14104:	adc	r2, r2, r2
   14108:	subcs	r0, r0, r1, lsl #9
   1410c:	cmp	r0, r1, lsl #8
   14110:	adc	r2, r2, r2
   14114:	subcs	r0, r0, r1, lsl #8
   14118:	cmp	r0, r1, lsl #7
   1411c:	adc	r2, r2, r2
   14120:	subcs	r0, r0, r1, lsl #7
   14124:	cmp	r0, r1, lsl #6
   14128:	adc	r2, r2, r2
   1412c:	subcs	r0, r0, r1, lsl #6
   14130:	cmp	r0, r1, lsl #5
   14134:	adc	r2, r2, r2
   14138:	subcs	r0, r0, r1, lsl #5
   1413c:	cmp	r0, r1, lsl #4
   14140:	adc	r2, r2, r2
   14144:	subcs	r0, r0, r1, lsl #4
   14148:	cmp	r0, r1, lsl #3
   1414c:	adc	r2, r2, r2
   14150:	subcs	r0, r0, r1, lsl #3
   14154:	cmp	r0, r1, lsl #2
   14158:	adc	r2, r2, r2
   1415c:	subcs	r0, r0, r1, lsl #2
   14160:	cmp	r0, r1, lsl #1
   14164:	adc	r2, r2, r2
   14168:	subcs	r0, r0, r1, lsl #1
   1416c:	cmp	r0, r1
   14170:	adc	r2, r2, r2
   14174:	subcs	r0, r0, r1
   14178:	mov	r0, r2
   1417c:	bx	lr
   14180:	moveq	r0, #1
   14184:	movne	r0, #0
   14188:	bx	lr
   1418c:	clz	r2, r1
   14190:	rsb	r2, r2, #31
   14194:	lsr	r0, r0, r2
   14198:	bx	lr
   1419c:	cmp	r0, #0
   141a0:	mvnne	r0, #0
   141a4:	b	141c8 <close_stdout@@Base+0x2b34>
   141a8:	cmp	r1, #0
   141ac:	beq	1419c <close_stdout@@Base+0x2b08>
   141b0:	push	{r0, r1, lr}
   141b4:	bl	13fbc <close_stdout@@Base+0x2928>
   141b8:	pop	{r1, r2, lr}
   141bc:	mul	r3, r2, r0
   141c0:	sub	r1, r1, r3
   141c4:	bx	lr
   141c8:	push	{r1, lr}
   141cc:	mov	r0, #8
   141d0:	bl	10e94 <raise@plt>
   141d4:	pop	{r1, pc}
   141d8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   141dc:	mov	r7, r0
   141e0:	ldr	r6, [pc, #76]	; 14234 <close_stdout@@Base+0x2ba0>
   141e4:	mov	r8, r1
   141e8:	ldr	r5, [pc, #72]	; 14238 <close_stdout@@Base+0x2ba4>
   141ec:	mov	r9, r2
   141f0:	add	r6, pc, r6
   141f4:	bl	10e50 <fdopen@plt-0x20>
   141f8:	add	r5, pc, r5
   141fc:	rsb	r6, r5, r6
   14200:	asrs	r6, r6, #2
   14204:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14208:	sub	r5, r5, #4
   1420c:	mov	r4, #0
   14210:	add	r4, r4, #1
   14214:	ldr	r3, [r5, #4]!
   14218:	mov	r0, r7
   1421c:	mov	r1, r8
   14220:	mov	r2, r9
   14224:	blx	r3
   14228:	cmp	r4, r6
   1422c:	bne	14210 <close_stdout@@Base+0x2b7c>
   14230:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14234:	andeq	r0, r1, r4, lsr #25
   14238:	muleq	r1, r8, ip
   1423c:	bx	lr
   14240:	ldr	r3, [pc, #28]	; 14264 <close_stdout@@Base+0x2bd0>
   14244:	mov	r1, #0
   14248:	ldr	r2, [pc, #24]	; 14268 <close_stdout@@Base+0x2bd4>
   1424c:	add	r3, pc, r3
   14250:	ldr	r3, [r3, r2]
   14254:	cmp	r3, #0
   14258:	ldrne	r2, [r3]
   1425c:	moveq	r2, r3
   14260:	b	11020 <__cxa_atexit@plt>
   14264:	andeq	r0, r1, ip, lsr #27
   14268:	strdeq	r0, [r0], -ip

Disassembly of section .fini:

0001426c <.fini>:
   1426c:	push	{r3, lr}
   14270:	pop	{r3, pc}
