
centos-preinstalled/sha512sum:     file format elf32-littlearm


Disassembly of section .init:

000111dc <_init@@Base>:
   111dc:	push	{r3, lr}
   111e0:	bl	1272c <fscanf@plt+0x1200>
   111e4:	pop	{r3, pc}

Disassembly of section .plt:

000111e8 <fileno@plt-0x14>:
   111e8:	push	{lr}		; (str lr, [sp, #-4]!)
   111ec:	ldr	lr, [pc, #4]	; 111f8 <_init@@Base+0x1c>
   111f0:	add	lr, pc, lr
   111f4:	ldr	pc, [lr, #8]!
   111f8:	andeq	r6, r1, r8, lsl #28

000111fc <fileno@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3592]!	; 0xe08

00011208 <abort@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3584]!	; 0xe00

00011214 <memcmp@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011220 <__libc_start_main@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3568]!	; 0xdf0

0001122c <SHA512@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3560]!	; 0xde8

00011238 <__gmon_start__@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3552]!	; 0xde0

00011244 <fread_unlocked@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3544]!	; 0xdd8

00011250 <__ctype_get_mb_cur_max@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3536]!	; 0xdd0

0001125c <SHA384_Init@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3528]!	; 0xdc8

00011268 <fclose@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3520]!	; 0xdc0

00011274 <getenv@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011280 <__printf_chk@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3504]!	; 0xdb0

0001128c <strchr@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3496]!	; 0xda8

00011298 <__cxa_atexit@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3488]!	; 0xda0

000112a4 <__fpending@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3480]!	; 0xd98

000112b0 <SHA512_Init@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3472]!	; 0xd90

000112bc <calloc@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3464]!	; 0xd88

000112c8 <__uflow@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3456]!	; 0xd80

000112d4 <SHA384_Final@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3448]!	; 0xd78

000112e0 <memset@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3440]!	; 0xd70

000112ec <strrchr@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3432]!	; 0xd68

000112f8 <ungetc@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3424]!	; 0xd60

00011304 <bindtextdomain@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3416]!	; 0xd58

00011310 <mbrtowc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3408]!	; 0xd50

0001131c <__overflow@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3400]!	; 0xd48

00011328 <SHA512_Final@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3392]!	; 0xd40

00011334 <_exit@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3384]!	; 0xd38

00011340 <free@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3376]!	; 0xd30

0001134c <getopt_long@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3368]!	; 0xd28

00011358 <dcgettext@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3360]!	; 0xd20

00011364 <fputs_unlocked@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3352]!	; 0xd18

00011370 <fwrite_unlocked@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3344]!	; 0xd10

0001137c <fflush@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #90112	; 0x16000
   11384:	ldr	pc, [ip, #3336]!	; 0xd08

00011388 <strlen@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #90112	; 0x16000
   11390:	ldr	pc, [ip, #3328]!	; 0xd00

00011394 <posix_fadvise64@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #90112	; 0x16000
   1139c:	ldr	pc, [ip, #3320]!	; 0xcf8

000113a0 <memcpy@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #90112	; 0x16000
   113a8:	ldr	pc, [ip, #3312]!	; 0xcf0

000113ac <setlocale@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #90112	; 0x16000
   113b4:	ldr	pc, [ip, #3304]!	; 0xce8

000113b8 <fopen64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #90112	; 0x16000
   113c0:	ldr	pc, [ip, #3296]!	; 0xce0

000113c4 <mbsinit@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #90112	; 0x16000
   113cc:	ldr	pc, [ip, #3288]!	; 0xcd8

000113d0 <__ctype_tolower_loc@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #90112	; 0x16000
   113d8:	ldr	pc, [ip, #3280]!	; 0xcd0

000113dc <strcpy@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #90112	; 0x16000
   113e4:	ldr	pc, [ip, #3272]!	; 0xcc8

000113e8 <fseeko64@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #90112	; 0x16000
   113f0:	ldr	pc, [ip, #3264]!	; 0xcc0

000113f4 <open64@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #90112	; 0x16000
   113fc:	ldr	pc, [ip, #3256]!	; 0xcb8

00011400 <dcngettext@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #90112	; 0x16000
   11408:	ldr	pc, [ip, #3248]!	; 0xcb0

0001140c <raise@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #90112	; 0x16000
   11414:	ldr	pc, [ip, #3240]!	; 0xca8

00011418 <fdopen@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #90112	; 0x16000
   11420:	ldr	pc, [ip, #3232]!	; 0xca0

00011424 <close@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #90112	; 0x16000
   1142c:	ldr	pc, [ip, #3224]!	; 0xc98

00011430 <fwrite@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #90112	; 0x16000
   11438:	ldr	pc, [ip, #3216]!	; 0xc90

0001143c <setvbuf@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #90112	; 0x16000
   11444:	ldr	pc, [ip, #3208]!	; 0xc88

00011448 <__ctype_b_loc@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #90112	; 0x16000
   11450:	ldr	pc, [ip, #3200]!	; 0xc80

00011454 <lseek64@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #90112	; 0x16000
   1145c:	ldr	pc, [ip, #3192]!	; 0xc78

00011460 <malloc@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #90112	; 0x16000
   11468:	ldr	pc, [ip, #3184]!	; 0xc70

0001146c <error@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #90112	; 0x16000
   11474:	ldr	pc, [ip, #3176]!	; 0xc68

00011478 <nl_langinfo@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #90112	; 0x16000
   11480:	ldr	pc, [ip, #3168]!	; 0xc60

00011484 <__stack_chk_fail@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #90112	; 0x16000
   1148c:	ldr	pc, [ip, #3160]!	; 0xc58

00011490 <__fprintf_chk@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #90112	; 0x16000
   11498:	ldr	pc, [ip, #3152]!	; 0xc50

0001149c <__getdelim@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #90112	; 0x16000
   114a4:	ldr	pc, [ip, #3144]!	; 0xc48

000114a8 <SHA512_Update@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #90112	; 0x16000
   114b0:	ldr	pc, [ip, #3136]!	; 0xc40

000114b4 <textdomain@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #90112	; 0x16000
   114bc:	ldr	pc, [ip, #3128]!	; 0xc38

000114c0 <__freading@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #90112	; 0x16000
   114c8:	ldr	pc, [ip, #3120]!	; 0xc30

000114cc <fcntl@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #90112	; 0x16000
   114d4:	ldr	pc, [ip, #3112]!	; 0xc28

000114d8 <strncmp@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #90112	; 0x16000
   114e0:	ldr	pc, [ip, #3104]!	; 0xc20

000114e4 <realloc@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #90112	; 0x16000
   114ec:	ldr	pc, [ip, #3096]!	; 0xc18

000114f0 <iswprint@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #90112	; 0x16000
   114f8:	ldr	pc, [ip, #3088]!	; 0xc10

000114fc <strcmp@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #90112	; 0x16000
   11504:	ldr	pc, [ip, #3080]!	; 0xc08

00011508 <exit@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #90112	; 0x16000
   11510:	ldr	pc, [ip, #3072]!	; 0xc00

00011514 <__errno_location@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #90112	; 0x16000
   1151c:	ldr	pc, [ip, #3064]!	; 0xbf8

00011520 <SHA384@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #90112	; 0x16000
   11528:	ldr	pc, [ip, #3056]!	; 0xbf0

0001152c <fscanf@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #90112	; 0x16000
   11534:	ldr	pc, [ip, #3048]!	; 0xbe8

Disassembly of section .text:

00011538 <close_stdout@@Base-0x18d4>:
   11538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1153c:	sub	sp, sp, #324	; 0x144
   11540:	ldr	sl, [pc, #4076]	; 12534 <fscanf@plt+0x1008>
   11544:	mov	r4, #0
   11548:	ldr	r3, [pc, #4072]	; 12538 <fscanf@plt+0x100c>
   1154c:	mov	r6, r1
   11550:	add	sl, pc, sl
   11554:	str	r0, [sp, #24]
   11558:	str	r4, [sp, #28]
   1155c:	mvn	r5, #0
   11560:	str	r4, [sp, #44]	; 0x2c
   11564:	ldr	r3, [sl, r3]
   11568:	ldr	r0, [r1]
   1156c:	str	r5, [sp, #16]
   11570:	ldr	r3, [r3]
   11574:	ldr	r7, [pc, #4032]	; 1253c <fscanf@plt+0x1010>
   11578:	ldr	r5, [pc, #4032]	; 12540 <fscanf@plt+0x1014>
   1157c:	str	r3, [sp, #316]	; 0x13c
   11580:	bl	13404 <close_stdout@@Base+0x5f8>
   11584:	ldr	r1, [pc, #4024]	; 12544 <fscanf@plt+0x1018>
   11588:	mov	r0, #6
   1158c:	add	r7, pc, r7
   11590:	ldr	r4, [pc, #4016]	; 12548 <fscanf@plt+0x101c>
   11594:	add	r1, pc, r1
   11598:	ldr	r9, [pc, #4012]	; 1254c <fscanf@plt+0x1020>
   1159c:	bl	113ac <setlocale@plt>
   115a0:	ldr	r1, [pc, #4008]	; 12550 <fscanf@plt+0x1024>
   115a4:	mov	r0, r7
   115a8:	ldr	r8, [pc, #4004]	; 12554 <fscanf@plt+0x1028>
   115ac:	add	r1, pc, r1
   115b0:	add	r5, pc, r5
   115b4:	bl	11304 <bindtextdomain@plt>
   115b8:	mov	r0, r7
   115bc:	bl	114b4 <textdomain@plt>
   115c0:	ldr	r3, [pc, #3984]	; 12558 <fscanf@plt+0x102c>
   115c4:	ldr	r7, [pc, #3984]	; 1255c <fscanf@plt+0x1030>
   115c8:	add	r4, pc, r4
   115cc:	add	r9, pc, r9
   115d0:	add	r8, pc, r8
   115d4:	add	r7, pc, r7
   115d8:	str	r7, [sp, #32]
   115dc:	ldr	r0, [sl, r3]
   115e0:	bl	16828 <close_stdout@@Base+0x3a1c>
   115e4:	ldr	r0, [pc, #3956]	; 12560 <fscanf@plt+0x1034>
   115e8:	mov	r1, #0
   115ec:	mov	r2, #1
   115f0:	mov	r3, r1
   115f4:	ldr	r7, [pc, #3944]	; 12564 <fscanf@plt+0x1038>
   115f8:	ldr	r0, [sl, r0]
   115fc:	add	r7, pc, r7
   11600:	str	r0, [sp, #40]	; 0x28
   11604:	ldr	r0, [r0]
   11608:	bl	1143c <setvbuf@plt>
   1160c:	mov	fp, #0
   11610:	ldr	r0, [sp, #24]
   11614:	str	fp, [sp]
   11618:	mov	r1, r6
   1161c:	mov	r2, r5
   11620:	mov	r3, r4
   11624:	bl	1134c <getopt_long@plt>
   11628:	cmn	r0, #1
   1162c:	beq	1179c <fscanf@plt+0x270>
   11630:	cmp	r0, #116	; 0x74
   11634:	beq	11794 <fscanf@plt+0x268>
   11638:	ble	11670 <fscanf@plt+0x144>
   1163c:	movw	r3, #257	; 0x101
   11640:	cmp	r0, r3
   11644:	beq	11778 <fscanf@plt+0x24c>
   11648:	bgt	11698 <fscanf@plt+0x16c>
   1164c:	cmp	r0, #119	; 0x77
   11650:	beq	116dc <fscanf@plt+0x1b0>
   11654:	cmp	r0, #256	; 0x100
   11658:	bne	11770 <fscanf@plt+0x244>
   1165c:	mov	r3, #1
   11660:	strb	fp, [r7, #2]
   11664:	strb	fp, [r7, #3]
   11668:	strb	r3, [r7, #1]
   1166c:	b	1160c <fscanf@plt+0xe0>
   11670:	cmn	r0, #2
   11674:	beq	1178c <fscanf@plt+0x260>
   11678:	ble	116f0 <fscanf@plt+0x1c4>
   1167c:	cmp	r0, #98	; 0x62
   11680:	beq	116d0 <fscanf@plt+0x1a4>
   11684:	cmp	r0, #99	; 0x63
   11688:	bne	11770 <fscanf@plt+0x244>
   1168c:	mov	ip, #1
   11690:	str	ip, [sp, #44]	; 0x2c
   11694:	b	1160c <fscanf@plt+0xe0>
   11698:	movw	r3, #258	; 0x102
   1169c:	cmp	r0, r3
   116a0:	beq	116c0 <fscanf@plt+0x194>
   116a4:	add	r3, r3, #1
   116a8:	cmp	r0, r3
   116ac:	bne	11770 <fscanf@plt+0x244>
   116b0:	mov	ip, #1
   116b4:	str	ip, [sp, #28]
   116b8:	str	ip, [sp, #16]
   116bc:	b	1160c <fscanf@plt+0xe0>
   116c0:	ldr	ip, [sp, #32]
   116c4:	mov	r3, #1
   116c8:	strb	r3, [ip, #4]
   116cc:	b	1160c <fscanf@plt+0xe0>
   116d0:	mov	ip, #1
   116d4:	str	ip, [sp, #16]
   116d8:	b	1160c <fscanf@plt+0xe0>
   116dc:	mov	r3, #1
   116e0:	strb	fp, [r8, #1]
   116e4:	strb	fp, [r8, #3]
   116e8:	strb	r3, [r8, #2]
   116ec:	b	1160c <fscanf@plt+0xe0>
   116f0:	cmn	r0, #3
   116f4:	bne	11770 <fscanf@plt+0x244>
   116f8:	ldr	r3, [pc, #3688]	; 12568 <fscanf@plt+0x103c>
   116fc:	ldr	r4, [sp, #40]	; 0x28
   11700:	ldr	r1, [pc, #3684]	; 1256c <fscanf@plt+0x1040>
   11704:	ldr	r3, [sl, r3]
   11708:	ldr	r2, [pc, #3680]	; 12570 <fscanf@plt+0x1044>
   1170c:	add	r1, pc, r1
   11710:	ldr	r0, [r4]
   11714:	ldr	r3, [r3]
   11718:	add	r2, pc, r2
   1171c:	ldr	ip, [pc, #3664]	; 12574 <fscanf@plt+0x1048>
   11720:	stmib	sp, {r1, r2}
   11724:	ldr	r1, [pc, #3660]	; 12578 <fscanf@plt+0x104c>
   11728:	add	ip, pc, ip
   1172c:	ldr	r2, [pc, #3656]	; 1257c <fscanf@plt+0x1050>
   11730:	str	fp, [sp, #12]
   11734:	add	r1, pc, r1
   11738:	str	ip, [sp]
   1173c:	add	r2, pc, r2
   11740:	bl	150fc <close_stdout@@Base+0x22f0>
   11744:	mov	r0, fp
   11748:	bl	11508 <exit@plt>
   1174c:	ldr	r1, [pc, #3628]	; 12580 <fscanf@plt+0x1054>
   11750:	mov	r2, #5
   11754:	mov	r0, fp
   11758:	add	r1, pc, r1
   1175c:	bl	11358 <dcgettext@plt>
   11760:	mov	r1, fp
   11764:	mov	r2, r0
   11768:	mov	r0, fp
   1176c:	bl	1146c <error@plt>
   11770:	mov	r0, #1
   11774:	bl	12b14 <fscanf@plt+0x15e8>
   11778:	mov	r3, #1
   1177c:	strb	fp, [r9, #1]
   11780:	strb	fp, [r9, #2]
   11784:	strb	r3, [r9, #3]
   11788:	b	1160c <fscanf@plt+0xe0>
   1178c:	mov	r0, fp
   11790:	bl	12b14 <fscanf@plt+0x15e8>
   11794:	str	fp, [sp, #16]
   11798:	b	1160c <fscanf@plt+0xe0>
   1179c:	ldr	r4, [sp, #28]
   117a0:	mov	r1, #130	; 0x82
   117a4:	ldr	r5, [sp, #16]
   117a8:	mov	r2, #128	; 0x80
   117ac:	ldr	r3, [pc, #3536]	; 12584 <fscanf@plt+0x1058>
   117b0:	cmp	r5, fp
   117b4:	movne	r4, #0
   117b8:	andeq	r4, r4, #1
   117bc:	add	r3, pc, r3
   117c0:	cmp	r4, fp
   117c4:	str	r1, [r3, #8]
   117c8:	str	r2, [r3, #12]
   117cc:	bne	1174c <fscanf@plt+0x220>
   117d0:	ldr	r7, [sp, #44]	; 0x2c
   117d4:	ldr	ip, [sp, #28]
   117d8:	ands	r5, r7, ip
   117dc:	bne	11868 <fscanf@plt+0x33c>
   117e0:	ldr	r2, [sp, #44]	; 0x2c
   117e4:	ldr	r4, [sp, #16]
   117e8:	cmp	r4, #0
   117ec:	movlt	r2, #0
   117f0:	andge	r2, r2, #1
   117f4:	cmp	r2, #0
   117f8:	bne	123d8 <fscanf@plt+0xeac>
   117fc:	ldrb	r2, [r3, #1]
   11800:	cmp	r2, #0
   11804:	beq	11894 <fscanf@plt+0x368>
   11808:	ldr	r5, [sp, #44]	; 0x2c
   1180c:	cmp	r5, #0
   11810:	beq	1249c <fscanf@plt+0xf70>
   11814:	ldrb	r3, [r3, #3]
   11818:	cmp	r3, #0
   1181c:	bne	118ac <fscanf@plt+0x380>
   11820:	ldr	r3, [pc, #3424]	; 12588 <fscanf@plt+0x105c>
   11824:	ldr	r4, [sp, #44]	; 0x2c
   11828:	add	r3, pc, r3
   1182c:	eor	r2, r4, #1
   11830:	ldrb	r3, [r3, #4]
   11834:	tst	r2, r3
   11838:	beq	118ac <fscanf@plt+0x380>
   1183c:	ldr	r1, [pc, #3400]	; 1258c <fscanf@plt+0x1060>
   11840:	mov	r2, #5
   11844:	mov	r0, #0
   11848:	add	r1, pc, r1
   1184c:	bl	11358 <dcgettext@plt>
   11850:	mov	r2, r0
   11854:	mov	r0, #0
   11858:	mov	r1, r0
   1185c:	bl	1146c <error@plt>
   11860:	mov	r0, #1
   11864:	bl	12b14 <fscanf@plt+0x15e8>
   11868:	ldr	r1, [pc, #3360]	; 12590 <fscanf@plt+0x1064>
   1186c:	mov	r2, #5
   11870:	mov	r0, r4
   11874:	add	r1, pc, r1
   11878:	bl	11358 <dcgettext@plt>
   1187c:	mov	r1, r4
   11880:	mov	r2, r0
   11884:	mov	r0, r4
   11888:	bl	1146c <error@plt>
   1188c:	mov	r0, #1
   11890:	bl	12b14 <fscanf@plt+0x15e8>
   11894:	ldrb	r2, [r3, #2]
   11898:	cmp	r2, #0
   1189c:	beq	12294 <fscanf@plt+0xd68>
   118a0:	ldr	r7, [sp, #44]	; 0x2c
   118a4:	cmp	r7, #0
   118a8:	beq	1250c <fscanf@plt+0xfe0>
   118ac:	ldr	r5, [sp, #16]
   118b0:	ldr	r3, [pc, #3292]	; 12594 <fscanf@plt+0x1068>
   118b4:	cmn	r5, #1
   118b8:	ldr	ip, [sp, #24]
   118bc:	moveq	r5, #0
   118c0:	str	r5, [sp, #16]
   118c4:	ldr	r3, [sl, r3]
   118c8:	str	r3, [sp, #88]	; 0x58
   118cc:	ldr	r3, [r3]
   118d0:	cmp	r3, ip
   118d4:	beq	124f4 <fscanf@plt+0xfc8>
   118d8:	ldr	r4, [sp, #16]
   118dc:	add	r5, sp, #251	; 0xfb
   118e0:	str	sl, [sp, #144]	; 0x90
   118e4:	and	r7, r5, #7
   118e8:	cmp	r4, #0
   118ec:	ldr	sl, [sp, #48]	; 0x30
   118f0:	str	r7, [sp, #140]	; 0x8c
   118f4:	add	ip, sp, #176	; 0xb0
   118f8:	ldr	r7, [pc, #3224]	; 12598 <fscanf@plt+0x106c>
   118fc:	movne	r4, #42	; 0x2a
   11900:	moveq	r4, #32
   11904:	str	r5, [sp, #136]	; 0x88
   11908:	str	r4, [sp, #152]	; 0x98
   1190c:	mov	r5, #1
   11910:	uxtb	r4, r4
   11914:	add	r7, pc, r7
   11918:	str	ip, [sp, #132]	; 0x84
   1191c:	str	r4, [sp, #156]	; 0x9c
   11920:	str	r5, [sp, #120]	; 0x78
   11924:	str	r7, [sp, #148]	; 0x94
   11928:	str	r6, [sp, #124]	; 0x7c
   1192c:	ldr	ip, [sp, #88]	; 0x58
   11930:	ldr	r4, [sp, #24]
   11934:	ldr	r3, [ip]
   11938:	cmp	r4, r3
   1193c:	ble	123b0 <fscanf@plt+0xe84>
   11940:	ldr	r4, [sp, #124]	; 0x7c
   11944:	ldr	ip, [sp, #44]	; 0x2c
   11948:	ldr	r3, [r4, r3, lsl #2]
   1194c:	cmp	ip, #0
   11950:	str	r3, [sp, #68]	; 0x44
   11954:	beq	11d5c <fscanf@plt+0x830>
   11958:	ldrb	r3, [r3]
   1195c:	ldr	r5, [sp, #136]	; 0x88
   11960:	ldr	r6, [sp, #140]	; 0x8c
   11964:	cmp	r3, #45	; 0x2d
   11968:	rsb	r5, r6, r5
   1196c:	str	r5, [sp, #128]	; 0x80
   11970:	bne	120f8 <fscanf@plt+0xbcc>
   11974:	ldr	r7, [sp, #68]	; 0x44
   11978:	ldrb	r0, [r7, #1]
   1197c:	cmp	r0, #0
   11980:	bne	120f8 <fscanf@plt+0xbcc>
   11984:	ldr	r3, [pc, #3088]	; 1259c <fscanf@plt+0x1070>
   11988:	mov	r2, #5
   1198c:	ldr	r1, [pc, #3084]	; 125a0 <fscanf@plt+0x1074>
   11990:	mov	r4, #1
   11994:	add	r3, pc, r3
   11998:	add	r1, pc, r1
   1199c:	strb	r4, [r3]
   119a0:	bl	11358 <dcgettext@plt>
   119a4:	ldr	r3, [pc, #3064]	; 125a4 <fscanf@plt+0x1078>
   119a8:	ldr	ip, [sp, #144]	; 0x90
   119ac:	str	r4, [sp, #92]	; 0x5c
   119b0:	str	r0, [sp, #68]	; 0x44
   119b4:	ldr	r3, [ip, r3]
   119b8:	ldr	r9, [r3]
   119bc:	mov	r6, #0
   119c0:	mov	r7, #0
   119c4:	strd	r6, [sp, #80]	; 0x50
   119c8:	add	ip, sp, #168	; 0xa8
   119cc:	strd	r6, [sp, #112]	; 0x70
   119d0:	mov	r4, #1
   119d4:	strd	r6, [sp, #96]	; 0x60
   119d8:	mov	r5, #0
   119dc:	strd	r6, [sp, #32]
   119e0:	mov	r3, #0
   119e4:	strd	r6, [sp, #16]
   119e8:	add	r7, sp, #164	; 0xa4
   119ec:	ldr	r6, [pc, #2996]	; 125a8 <fscanf@plt+0x107c>
   119f0:	str	r7, [sp, #48]	; 0x30
   119f4:	add	r6, pc, r6
   119f8:	str	ip, [sp, #52]	; 0x34
   119fc:	str	r6, [sp, #64]	; 0x40
   11a00:	ldr	r7, [pc, #2980]	; 125ac <fscanf@plt+0x1080>
   11a04:	ldr	ip, [pc, #2980]	; 125b0 <fscanf@plt+0x1084>
   11a08:	ldr	r6, [pc, #2980]	; 125b4 <fscanf@plt+0x1088>
   11a0c:	add	r7, pc, r7
   11a10:	add	ip, pc, ip
   11a14:	str	r3, [sp, #164]	; 0xa4
   11a18:	add	r6, pc, r6
   11a1c:	str	r3, [sp, #168]	; 0xa8
   11a20:	str	r7, [sp, #72]	; 0x48
   11a24:	str	ip, [sp, #104]	; 0x68
   11a28:	str	r6, [sp, #108]	; 0x6c
   11a2c:	add	r0, sp, #164	; 0xa4
   11a30:	add	r1, sp, #168	; 0xa8
   11a34:	mov	r2, #10
   11a38:	mov	r3, r9
   11a3c:	bl	1149c <__getdelim@plt>
   11a40:	subs	fp, r0, #0
   11a44:	ble	11efc <fscanf@plt+0x9d0>
   11a48:	ldr	r7, [sp, #164]	; 0xa4
   11a4c:	ldrb	r2, [r7]
   11a50:	cmp	r2, #35	; 0x23
   11a54:	beq	11bf8 <fscanf@plt+0x6cc>
   11a58:	add	r2, r7, fp
   11a5c:	ldrb	r2, [r2, #-1]
   11a60:	cmp	r2, #10
   11a64:	subeq	fp, fp, #1
   11a68:	moveq	r2, #0
   11a6c:	strbeq	r2, [r7, fp]
   11a70:	ldreq	r7, [sp, #164]	; 0xa4
   11a74:	ldrb	r2, [r7]
   11a78:	cmp	r2, #32
   11a7c:	cmpne	r2, #9
   11a80:	movne	r6, #0
   11a84:	moveq	r6, #1
   11a88:	bne	11aa8 <fscanf@plt+0x57c>
   11a8c:	mov	r1, r7
   11a90:	mov	r6, #0
   11a94:	ldrb	r2, [r1, #1]!
   11a98:	add	r6, r6, #1
   11a9c:	cmp	r2, #32
   11aa0:	cmpne	r2, #9
   11aa4:	beq	11a94 <fscanf@plt+0x568>
   11aa8:	cmp	r2, #92	; 0x5c
   11aac:	ldr	r1, [sp, #64]	; 0x40
   11ab0:	addeq	r6, r6, #1
   11ab4:	mov	r2, #6
   11ab8:	add	r8, r7, r6
   11abc:	moveq	ip, #1
   11ac0:	movne	r3, #0
   11ac4:	streq	ip, [sp, #56]	; 0x38
   11ac8:	mov	r0, r8
   11acc:	strne	r3, [sp, #56]	; 0x38
   11ad0:	bl	114d8 <strncmp@plt>
   11ad4:	cmp	r0, #0
   11ad8:	bne	11afc <fscanf@plt+0x5d0>
   11adc:	ldrb	r2, [r8, #6]
   11ae0:	cmp	r2, #32
   11ae4:	addeq	r6, r6, #1
   11ae8:	add	r2, r6, #6
   11aec:	ldrb	r1, [r7, r2]
   11af0:	cmp	r1, #40	; 0x28
   11af4:	beq	12238 <fscanf@plt+0xd0c>
   11af8:	add	r8, r7, r6
   11afc:	ldr	r2, [pc, #2740]	; 125b8 <fscanf@plt+0x108c>
   11b00:	rsb	r1, r6, fp
   11b04:	ldrb	lr, [r8]
   11b08:	mov	r0, r8
   11b0c:	add	r2, pc, r2
   11b10:	ldr	ip, [r2, #8]
   11b14:	cmp	lr, #92	; 0x5c
   11b18:	addeq	ip, ip, #1
   11b1c:	cmp	r1, ip
   11b20:	bcc	11c40 <fscanf@plt+0x714>
   11b24:	ldr	r2, [r2, #12]
   11b28:	add	r6, r6, r2
   11b2c:	ldrb	r2, [r7, r6]
   11b30:	cmp	r2, #9
   11b34:	cmpne	r2, #32
   11b38:	moveq	r2, #0
   11b3c:	movne	r2, #1
   11b40:	bne	11c44 <fscanf@plt+0x718>
   11b44:	add	r1, r6, #1
   11b48:	strb	r2, [r7, r6]
   11b4c:	rsb	r2, r1, fp
   11b50:	cmp	r2, #1
   11b54:	beq	11d3c <fscanf@plt+0x810>
   11b58:	ldrb	r2, [r7, r1]
   11b5c:	cmp	r2, #42	; 0x2a
   11b60:	cmpne	r2, #32
   11b64:	moveq	r2, #0
   11b68:	movne	r2, #1
   11b6c:	bne	11d3c <fscanf@plt+0x810>
   11b70:	ldr	r0, [pc, #2628]	; 125bc <fscanf@plt+0x1090>
   11b74:	add	r0, pc, r0
   11b78:	ldr	ip, [r0]
   11b7c:	cmp	ip, #1
   11b80:	strne	r2, [r0]
   11b84:	addne	r1, r6, #2
   11b88:	ldr	r3, [sp, #56]	; 0x38
   11b8c:	add	r7, r7, r1
   11b90:	str	r7, [sp, #76]	; 0x4c
   11b94:	cmp	r3, #0
   11b98:	moveq	sl, r8
   11b9c:	bne	120d4 <fscanf@plt+0xba8>
   11ba0:	ldr	r6, [sp, #92]	; 0x5c
   11ba4:	cmp	r6, #0
   11ba8:	beq	11c4c <fscanf@plt+0x720>
   11bac:	ldr	r7, [sp, #76]	; 0x4c
   11bb0:	ldrb	r3, [r7]
   11bb4:	cmp	r3, #45	; 0x2d
   11bb8:	bne	11c4c <fscanf@plt+0x720>
   11bbc:	ldrb	r3, [r7, #1]
   11bc0:	cmp	r3, #0
   11bc4:	bne	11c4c <fscanf@plt+0x720>
   11bc8:	ldr	ip, [sp, #72]	; 0x48
   11bcc:	ldrd	r6, [sp, #16]
   11bd0:	ldrb	r3, [ip, #2]
   11bd4:	adds	r6, r6, #1
   11bd8:	adc	r7, r7, #0
   11bdc:	strd	r6, [sp, #16]
   11be0:	cmp	r3, #0
   11be4:	bne	11d08 <fscanf@plt+0x7dc>
   11be8:	ldrd	r6, [sp, #32]
   11bec:	adds	r6, r6, #1
   11bf0:	adc	r7, r7, #0
   11bf4:	strd	r6, [sp, #32]
   11bf8:	ldr	r3, [r9]
   11bfc:	ands	r6, r3, #48	; 0x30
   11c00:	bne	11efc <fscanf@plt+0x9d0>
   11c04:	adds	r4, r4, #1
   11c08:	adc	r5, r5, #0
   11c0c:	orrs	r7, r4, r5
   11c10:	bne	11a2c <fscanf@plt+0x500>
   11c14:	ldr	r1, [pc, #2468]	; 125c0 <fscanf@plt+0x1094>
   11c18:	mov	r0, r6
   11c1c:	mov	r2, #5
   11c20:	add	r1, pc, r1
   11c24:	bl	11358 <dcgettext@plt>
   11c28:	mov	r1, r6
   11c2c:	ldr	r3, [sp, #68]	; 0x44
   11c30:	mov	r2, r0
   11c34:	mov	r0, #1
   11c38:	bl	1146c <error@plt>
   11c3c:	b	11a2c <fscanf@plt+0x500>
   11c40:	mov	r0, sl
   11c44:	mov	sl, r0
   11c48:	b	11bc8 <fscanf@plt+0x69c>
   11c4c:	ldr	r3, [pc, #2416]	; 125c4 <fscanf@plt+0x1098>
   11c50:	add	r3, pc, r3
   11c54:	ldr	r6, [r3, #12]
   11c58:	cmp	r6, #0
   11c5c:	beq	12404 <fscanf@plt+0xed8>
   11c60:	bl	11448 <__ctype_b_loc@plt>
   11c64:	add	r1, sl, r6
   11c68:	mov	r3, sl
   11c6c:	ldr	r0, [r0]
   11c70:	ldrb	r2, [r3], #1
   11c74:	lsl	r2, r2, #1
   11c78:	ldrh	r2, [r0, r2]
   11c7c:	tst	r2, #4096	; 0x1000
   11c80:	beq	11bc8 <fscanf@plt+0x69c>
   11c84:	cmp	r3, r1
   11c88:	mov	r2, r3
   11c8c:	bne	11c70 <fscanf@plt+0x744>
   11c90:	ldrb	r6, [r2]
   11c94:	cmp	r6, #0
   11c98:	bne	11bc8 <fscanf@plt+0x69c>
   11c9c:	ldr	r0, [sp, #76]	; 0x4c
   11ca0:	ldr	r1, [sp, #128]	; 0x80
   11ca4:	bl	129b4 <fscanf@plt+0x1488>
   11ca8:	ldrd	r2, [sp, #96]	; 0x60
   11cac:	adds	r2, r2, #1
   11cb0:	adc	r3, r3, #0
   11cb4:	strd	r2, [sp, #96]	; 0x60
   11cb8:	cmp	r0, #0
   11cbc:	bne	1213c <fscanf@plt+0xc10>
   11cc0:	ldr	r3, [pc, #2304]	; 125c8 <fscanf@plt+0x109c>
   11cc4:	ldrd	r6, [sp, #112]	; 0x70
   11cc8:	add	r3, pc, r3
   11ccc:	adds	r6, r6, #1
   11cd0:	ldrb	r3, [r3, #1]
   11cd4:	adc	r7, r7, #0
   11cd8:	strd	r6, [sp, #112]	; 0x70
   11cdc:	cmp	r3, #0
   11ce0:	bne	11bf8 <fscanf@plt+0x6cc>
   11ce4:	ldr	r1, [pc, #2272]	; 125cc <fscanf@plt+0x10a0>
   11ce8:	mov	r2, #5
   11cec:	add	r1, pc, r1
   11cf0:	bl	11358 <dcgettext@plt>
   11cf4:	ldr	r2, [sp, #76]	; 0x4c
   11cf8:	mov	r1, r0
   11cfc:	mov	r0, #1
   11d00:	bl	11280 <__printf_chk@plt>
   11d04:	b	11bf8 <fscanf@plt+0x6cc>
   11d08:	ldr	r1, [sp, #104]	; 0x68
   11d0c:	mov	r2, #5
   11d10:	mov	r0, #0
   11d14:	bl	11358 <dcgettext@plt>
   11d18:	ldr	r7, [sp, #108]	; 0x6c
   11d1c:	strd	r4, [sp]
   11d20:	ldr	r3, [sp, #68]	; 0x44
   11d24:	str	r7, [sp, #8]
   11d28:	mov	r2, r0
   11d2c:	mov	r0, #0
   11d30:	mov	r1, r0
   11d34:	bl	1146c <error@plt>
   11d38:	b	11be8 <fscanf@plt+0x6bc>
   11d3c:	ldr	r2, [pc, #2188]	; 125d0 <fscanf@plt+0x10a4>
   11d40:	add	r2, pc, r2
   11d44:	ldr	ip, [r2]
   11d48:	cmp	ip, #0
   11d4c:	movne	r0, #1
   11d50:	strne	r0, [r2]
   11d54:	bne	11b88 <fscanf@plt+0x65c>
   11d58:	b	11c44 <fscanf@plt+0x718>
   11d5c:	ldr	r0, [sp, #68]	; 0x44
   11d60:	add	r1, sp, #176	; 0xb0
   11d64:	bl	129b4 <fscanf@plt+0x1488>
   11d68:	cmp	r0, #0
   11d6c:	ldreq	r6, [sp, #44]	; 0x2c
   11d70:	streq	r6, [sp, #120]	; 0x78
   11d74:	beq	11ee8 <fscanf@plt+0x9bc>
   11d78:	ldr	r0, [sp, #68]	; 0x44
   11d7c:	mov	r1, #92	; 0x5c
   11d80:	bl	1128c <strchr@plt>
   11d84:	cmp	r0, #0
   11d88:	beq	12470 <fscanf@plt+0xf44>
   11d8c:	ldr	r6, [sp, #28]
   11d90:	cmp	r6, #0
   11d94:	beq	122e0 <fscanf@plt+0xdb4>
   11d98:	ldr	ip, [sp, #40]	; 0x28
   11d9c:	ldr	r0, [ip]
   11da0:	ldr	r3, [r0, #20]
   11da4:	ldr	r2, [r0, #24]
   11da8:	cmp	r3, r2
   11dac:	bcs	12658 <fscanf@plt+0x112c>
   11db0:	mov	r5, #1
   11db4:	add	r2, r3, r5
   11db8:	str	r2, [r0, #20]
   11dbc:	mov	r2, #92	; 0x5c
   11dc0:	strb	r2, [r3]
   11dc4:	ldr	r4, [sp, #40]	; 0x28
   11dc8:	mov	r1, #1
   11dcc:	ldr	r0, [pc, #2048]	; 125d4 <fscanf@plt+0x10a8>
   11dd0:	mov	r2, #6
   11dd4:	ldr	r3, [r4]
   11dd8:	add	r0, pc, r0
   11ddc:	bl	11370 <fwrite_unlocked@plt>
   11de0:	ldr	r0, [pc, #2032]	; 125d8 <fscanf@plt+0x10ac>
   11de4:	mov	r2, #2
   11de8:	ldr	r3, [r4]
   11dec:	mov	r1, #1
   11df0:	add	r0, pc, r0
   11df4:	bl	11370 <fwrite_unlocked@plt>
   11df8:	ldr	r0, [sp, #68]	; 0x44
   11dfc:	mov	r1, r5
   11e00:	bl	128d0 <fscanf@plt+0x13a4>
   11e04:	ldr	r0, [pc, #2000]	; 125dc <fscanf@plt+0x10b0>
   11e08:	mov	r1, #1
   11e0c:	mov	r2, #4
   11e10:	add	r0, pc, r0
   11e14:	ldr	r3, [r4]
   11e18:	bl	11370 <fwrite_unlocked@plt>
   11e1c:	ldr	r7, [pc, #1980]	; 125e0 <fscanf@plt+0x10b4>
   11e20:	mov	r6, #0
   11e24:	ldr	r4, [pc, #1976]	; 125e4 <fscanf@plt+0x10b8>
   11e28:	add	r8, sp, #176	; 0xb0
   11e2c:	add	r7, pc, r7
   11e30:	add	r4, pc, r4
   11e34:	b	11e4c <fscanf@plt+0x920>
   11e38:	mov	r0, #1
   11e3c:	ldrb	r2, [r8, r6]
   11e40:	mov	r1, r4
   11e44:	add	r6, r6, r0
   11e48:	bl	11280 <__printf_chk@plt>
   11e4c:	ldr	r3, [r7, #12]
   11e50:	cmp	r6, r3, lsr #1
   11e54:	bcc	11e38 <fscanf@plt+0x90c>
   11e58:	ldr	r6, [sp, #28]
   11e5c:	cmp	r6, #0
   11e60:	bne	11ec0 <fscanf@plt+0x994>
   11e64:	ldr	r7, [sp, #40]	; 0x28
   11e68:	ldr	r0, [r7]
   11e6c:	ldr	r2, [r0, #24]
   11e70:	ldr	r3, [r0, #20]
   11e74:	cmp	r3, r2
   11e78:	addcc	r2, r3, #1
   11e7c:	strcc	r2, [r0, #20]
   11e80:	movcc	r2, #32
   11e84:	strbcc	r2, [r3]
   11e88:	bcs	12674 <fscanf@plt+0x1148>
   11e8c:	ldr	ip, [sp, #40]	; 0x28
   11e90:	ldr	r0, [ip]
   11e94:	ldr	r3, [r0, #20]
   11e98:	ldr	r2, [r0, #24]
   11e9c:	cmp	r3, r2
   11ea0:	addcc	r2, r3, #1
   11ea4:	strcc	r2, [r0, #20]
   11ea8:	ldrcc	r4, [sp, #156]	; 0x9c
   11eac:	strbcc	r4, [r3]
   11eb0:	bcs	12668 <fscanf@plt+0x113c>
   11eb4:	ldr	r0, [sp, #68]	; 0x44
   11eb8:	mov	r1, r5
   11ebc:	bl	128d0 <fscanf@plt+0x13a4>
   11ec0:	ldr	r5, [sp, #40]	; 0x28
   11ec4:	ldr	r0, [r5]
   11ec8:	ldr	r2, [r0, #24]
   11ecc:	ldr	r3, [r0, #20]
   11ed0:	cmp	r3, r2
   11ed4:	addcc	r2, r3, #1
   11ed8:	strcc	r2, [r0, #20]
   11edc:	movcc	r2, #10
   11ee0:	strbcc	r2, [r3]
   11ee4:	bcs	126e4 <fscanf@plt+0x11b8>
   11ee8:	ldr	r7, [sp, #88]	; 0x58
   11eec:	ldr	r3, [r7]
   11ef0:	add	r3, r3, #1
   11ef4:	str	r3, [r7]
   11ef8:	b	1192c <fscanf@plt+0x400>
   11efc:	ldr	r0, [sp, #164]	; 0xa4
   11f00:	bl	11340 <free@plt>
   11f04:	ldr	r3, [r9]
   11f08:	tst	r3, #32
   11f0c:	bne	12380 <fscanf@plt+0xe54>
   11f10:	ldr	r7, [sp, #92]	; 0x5c
   11f14:	cmp	r7, #0
   11f18:	beq	12310 <fscanf@plt+0xde4>
   11f1c:	ldrd	r4, [sp, #96]	; 0x60
   11f20:	orrs	r5, r4, r5
   11f24:	beq	12348 <fscanf@plt+0xe1c>
   11f28:	ldr	r3, [pc, #1720]	; 125e8 <fscanf@plt+0x10bc>
   11f2c:	add	r3, pc, r3
   11f30:	ldrb	r3, [r3, #1]
   11f34:	cmp	r3, #0
   11f38:	bne	121f8 <fscanf@plt+0xccc>
   11f3c:	ldrd	r6, [sp, #16]
   11f40:	orrs	r7, r6, r7
   11f44:	beq	11fbc <fscanf@plt+0xa90>
   11f48:	ldrd	r4, [sp, #16]
   11f4c:	mov	r3, #0
   11f50:	mvn	r2, #0
   11f54:	cmp	r5, r3
   11f58:	cmpeq	r4, r2
   11f5c:	ldrls	r3, [sp, #16]
   11f60:	bls	11f84 <fscanf@plt+0xa58>
   11f64:	mov	r0, r4
   11f68:	mov	r1, r5
   11f6c:	movw	r2, #16960	; 0x4240
   11f70:	mov	r3, #0
   11f74:	movt	r2, #15
   11f78:	bl	15e40 <close_stdout@@Base+0x3034>
   11f7c:	add	r2, r2, #999424	; 0xf4000
   11f80:	add	r3, r2, #576	; 0x240
   11f84:	mov	r2, #5
   11f88:	ldr	r1, [pc, #1628]	; 125ec <fscanf@plt+0x10c0>
   11f8c:	str	r2, [sp]
   11f90:	mov	r0, #0
   11f94:	ldr	r2, [pc, #1620]	; 125f0 <fscanf@plt+0x10c4>
   11f98:	add	r1, pc, r1
   11f9c:	add	r2, pc, r2
   11fa0:	bl	11400 <dcngettext@plt>
   11fa4:	ldrd	r6, [sp, #16]
   11fa8:	strd	r6, [sp]
   11fac:	mov	r2, r0
   11fb0:	mov	r0, #0
   11fb4:	mov	r1, r0
   11fb8:	bl	1146c <error@plt>
   11fbc:	ldrd	r4, [sp, #112]	; 0x70
   11fc0:	orrs	r5, r4, r5
   11fc4:	beq	1203c <fscanf@plt+0xb10>
   11fc8:	ldrd	r6, [sp, #112]	; 0x70
   11fcc:	mov	r3, #0
   11fd0:	mvn	r2, #0
   11fd4:	cmp	r7, r3
   11fd8:	cmpeq	r6, r2
   11fdc:	ldrls	r3, [sp, #112]	; 0x70
   11fe0:	bls	12004 <fscanf@plt+0xad8>
   11fe4:	mov	r0, r6
   11fe8:	mov	r1, r7
   11fec:	movw	r2, #16960	; 0x4240
   11ff0:	mov	r3, #0
   11ff4:	movt	r2, #15
   11ff8:	bl	15e40 <close_stdout@@Base+0x3034>
   11ffc:	add	r2, r2, #999424	; 0xf4000
   12000:	add	r3, r2, #576	; 0x240
   12004:	mov	r2, #5
   12008:	ldr	r1, [pc, #1508]	; 125f4 <fscanf@plt+0x10c8>
   1200c:	str	r2, [sp]
   12010:	mov	r0, #0
   12014:	ldr	r2, [pc, #1500]	; 125f8 <fscanf@plt+0x10cc>
   12018:	add	r1, pc, r1
   1201c:	add	r2, pc, r2
   12020:	bl	11400 <dcngettext@plt>
   12024:	ldrd	r4, [sp, #112]	; 0x70
   12028:	strd	r4, [sp]
   1202c:	mov	r2, r0
   12030:	mov	r0, #0
   12034:	mov	r1, r0
   12038:	bl	1146c <error@plt>
   1203c:	ldrd	r6, [sp, #80]	; 0x50
   12040:	orrs	r7, r6, r7
   12044:	beq	12204 <fscanf@plt+0xcd8>
   12048:	ldrd	r6, [sp, #80]	; 0x50
   1204c:	mov	r3, #0
   12050:	mvn	r2, #0
   12054:	cmp	r7, r3
   12058:	cmpeq	r6, r2
   1205c:	ldrls	r3, [sp, #80]	; 0x50
   12060:	bls	12084 <fscanf@plt+0xb58>
   12064:	mov	r0, r6
   12068:	mov	r1, r7
   1206c:	movw	r2, #16960	; 0x4240
   12070:	mov	r3, #0
   12074:	movt	r2, #15
   12078:	bl	15e40 <close_stdout@@Base+0x3034>
   1207c:	add	r2, r2, #999424	; 0xf4000
   12080:	add	r3, r2, #576	; 0x240
   12084:	mov	r2, #5
   12088:	ldr	r1, [pc, #1388]	; 125fc <fscanf@plt+0x10d0>
   1208c:	str	r2, [sp]
   12090:	mov	r0, #0
   12094:	ldr	r2, [pc, #1380]	; 12600 <fscanf@plt+0x10d4>
   12098:	add	r1, pc, r1
   1209c:	add	r2, pc, r2
   120a0:	bl	11400 <dcngettext@plt>
   120a4:	ldrd	r4, [sp, #80]	; 0x50
   120a8:	strd	r4, [sp]
   120ac:	mov	r2, r0
   120b0:	mov	r0, #0
   120b4:	mov	r1, r0
   120b8:	bl	1146c <error@plt>
   120bc:	mov	r9, #0
   120c0:	ldr	r6, [sp, #120]	; 0x78
   120c4:	and	r9, r9, r6
   120c8:	uxtb	r9, r9
   120cc:	str	r9, [sp, #120]	; 0x78
   120d0:	b	11ee8 <fscanf@plt+0x9bc>
   120d4:	rsb	r1, r1, fp
   120d8:	mov	r0, r7
   120dc:	bl	12824 <fscanf@plt+0x12f8>
   120e0:	mov	sl, r8
   120e4:	adds	r0, r0, #0
   120e8:	movne	r0, #1
   120ec:	cmp	r0, #0
   120f0:	bne	11ba0 <fscanf@plt+0x674>
   120f4:	b	11bc8 <fscanf@plt+0x69c>
   120f8:	ldr	r1, [pc, #1284]	; 12604 <fscanf@plt+0x10d8>
   120fc:	ldr	r0, [sp, #68]	; 0x44
   12100:	add	r1, pc, r1
   12104:	bl	13368 <close_stdout@@Base+0x55c>
   12108:	subs	r9, r0, #0
   1210c:	movne	r4, #0
   12110:	strne	r4, [sp, #92]	; 0x5c
   12114:	bne	119bc <fscanf@plt+0x490>
   12118:	bl	11514 <__errno_location@plt>
   1211c:	ldr	r2, [pc, #1252]	; 12608 <fscanf@plt+0x10dc>
   12120:	add	r2, pc, r2
   12124:	mov	r3, r0
   12128:	mov	r0, r9
   1212c:	ldr	r1, [r3]
   12130:	ldr	r3, [sp, #68]	; 0x44
   12134:	bl	1146c <error@plt>
   12138:	b	120c0 <fscanf@plt+0xb94>
   1213c:	ldr	r3, [pc, #1224]	; 1260c <fscanf@plt+0x10e0>
   12140:	add	r8, sl, #1
   12144:	strd	r4, [sp, #56]	; 0x38
   12148:	add	r3, pc, r3
   1214c:	mov	r4, r8
   12150:	ldr	fp, [sp, #148]	; 0x94
   12154:	ldr	r7, [r3, #12]
   12158:	ldr	r8, [sp, #128]	; 0x80
   1215c:	lsr	r7, r7, #1
   12160:	b	121a0 <fscanf@plt+0xc74>
   12164:	bl	113d0 <__ctype_tolower_loc@plt>
   12168:	ldrb	lr, [r4, #-1]
   1216c:	ldrb	r3, [r8, r6]
   12170:	ldrb	ip, [fp, r3, lsr #4]
   12174:	ldr	r2, [r0]
   12178:	ldr	r0, [r2, lr, lsl #2]
   1217c:	cmp	r0, ip
   12180:	bne	12680 <fscanf@plt+0x1154>
   12184:	ldrb	r0, [r4], #2
   12188:	and	r3, r3, #15
   1218c:	ldrb	r3, [fp, r3]
   12190:	ldr	r2, [r2, r0, lsl #2]
   12194:	cmp	r2, r3
   12198:	bne	12680 <fscanf@plt+0x1154>
   1219c:	add	r6, r6, #1
   121a0:	cmp	r6, r7
   121a4:	bne	12164 <fscanf@plt+0xc38>
   121a8:	ldr	r3, [pc, #1120]	; 12610 <fscanf@plt+0x10e4>
   121ac:	ldrd	r4, [sp, #56]	; 0x38
   121b0:	add	r3, pc, r3
   121b4:	ldrb	r2, [r3, #1]
   121b8:	cmp	r2, #0
   121bc:	bne	11bf8 <fscanf@plt+0x6cc>
   121c0:	ldrb	r0, [r3, #3]
   121c4:	cmp	r0, #0
   121c8:	bne	11bf8 <fscanf@plt+0x6cc>
   121cc:	ldr	r1, [pc, #1088]	; 12614 <fscanf@plt+0x10e8>
   121d0:	mov	r2, #5
   121d4:	add	r1, pc, r1
   121d8:	bl	11358 <dcgettext@plt>
   121dc:	ldr	r1, [pc, #1076]	; 12618 <fscanf@plt+0x10ec>
   121e0:	ldr	r2, [sp, #76]	; 0x4c
   121e4:	add	r1, pc, r1
   121e8:	mov	r3, r0
   121ec:	mov	r0, #1
   121f0:	bl	11280 <__printf_chk@plt>
   121f4:	b	11bf8 <fscanf@plt+0x6cc>
   121f8:	ldrd	r6, [sp, #80]	; 0x50
   121fc:	orrs	r7, r6, r7
   12200:	bne	120bc <fscanf@plt+0xb90>
   12204:	ldrd	r4, [sp, #112]	; 0x70
   12208:	orrs	r5, r4, r5
   1220c:	bne	120bc <fscanf@plt+0xb90>
   12210:	ldr	r3, [pc, #1028]	; 1261c <fscanf@plt+0x10f0>
   12214:	add	r3, pc, r3
   12218:	ldrb	r3, [r3, #4]
   1221c:	cmp	r3, #0
   12220:	beq	12230 <fscanf@plt+0xd04>
   12224:	ldrd	r4, [sp, #32]
   12228:	orrs	r5, r4, r5
   1222c:	bne	120bc <fscanf@plt+0xb90>
   12230:	mov	r9, #1
   12234:	b	120c0 <fscanf@plt+0xb94>
   12238:	rsb	r3, r2, fp
   1223c:	cmp	r3, #1
   12240:	ldreq	r7, [sp, #76]	; 0x4c
   12244:	moveq	r0, #0
   12248:	beq	1228c <fscanf@plt+0xd60>
   1224c:	add	r6, r6, #7
   12250:	sub	r8, r3, #2
   12254:	add	r7, r7, r6
   12258:	b	12270 <fscanf@plt+0xd44>
   1225c:	ldrb	r3, [r7, r8]
   12260:	add	r6, r7, r8
   12264:	cmp	r3, #41	; 0x29
   12268:	beq	12410 <fscanf@plt+0xee4>
   1226c:	sub	r8, r8, #1
   12270:	cmp	r8, #0
   12274:	bne	1225c <fscanf@plt+0xd30>
   12278:	ldrb	r3, [r7]
   1227c:	cmp	r3, #41	; 0x29
   12280:	ldrne	r7, [sp, #76]	; 0x4c
   12284:	movne	r0, r8
   12288:	beq	1240c <fscanf@plt+0xee0>
   1228c:	str	r7, [sp, #76]	; 0x4c
   12290:	b	120ec <fscanf@plt+0xbc0>
   12294:	ldrb	r3, [r3, #3]
   12298:	cmp	r3, #0
   1229c:	beq	11820 <fscanf@plt+0x2f4>
   122a0:	ldr	ip, [sp, #44]	; 0x2c
   122a4:	cmp	ip, #0
   122a8:	bne	118ac <fscanf@plt+0x380>
   122ac:	ldr	r1, [pc, #876]	; 12620 <fscanf@plt+0x10f4>
   122b0:	mov	r0, ip
   122b4:	add	r1, pc, r1
   122b8:	mov	r2, #5
   122bc:	bl	11358 <dcgettext@plt>
   122c0:	mov	r2, r0
   122c4:	ldr	r0, [sp, #44]	; 0x2c
   122c8:	mov	r1, r0
   122cc:	bl	1146c <error@plt>
   122d0:	mov	r0, #1
   122d4:	bl	12b14 <fscanf@plt+0x15e8>
   122d8:	cmp	r5, #0
   122dc:	beq	11e1c <fscanf@plt+0x8f0>
   122e0:	ldr	r5, [sp, #40]	; 0x28
   122e4:	ldr	r0, [r5]
   122e8:	ldr	r3, [r0, #20]
   122ec:	ldr	r2, [r0, #24]
   122f0:	cmp	r3, r2
   122f4:	bcs	126d4 <fscanf@plt+0x11a8>
   122f8:	mov	r5, #1
   122fc:	add	r2, r3, r5
   12300:	str	r2, [r0, #20]
   12304:	mov	r2, #92	; 0x5c
   12308:	strb	r2, [r3]
   1230c:	b	11e1c <fscanf@plt+0x8f0>
   12310:	mov	r0, r9
   12314:	bl	15478 <close_stdout@@Base+0x266c>
   12318:	cmp	r0, #0
   1231c:	beq	11f1c <fscanf@plt+0x9f0>
   12320:	bl	11514 <__errno_location@plt>
   12324:	ldr	r2, [pc, #760]	; 12624 <fscanf@plt+0x10f8>
   12328:	add	r2, pc, r2
   1232c:	mov	r3, r0
   12330:	ldr	r0, [sp, #92]	; 0x5c
   12334:	ldr	r1, [r3]
   12338:	ldr	r3, [sp, #68]	; 0x44
   1233c:	bl	1146c <error@plt>
   12340:	ldr	r9, [sp, #92]	; 0x5c
   12344:	b	120c0 <fscanf@plt+0xb94>
   12348:	ldr	r1, [pc, #728]	; 12628 <fscanf@plt+0x10fc>
   1234c:	mov	r2, #5
   12350:	mov	r0, #0
   12354:	add	r1, pc, r1
   12358:	bl	11358 <dcgettext@plt>
   1235c:	ldr	ip, [pc, #712]	; 1262c <fscanf@plt+0x1100>
   12360:	ldr	r3, [sp, #68]	; 0x44
   12364:	add	ip, pc, ip
   12368:	str	ip, [sp]
   1236c:	mov	r2, r0
   12370:	mov	r0, #0
   12374:	mov	r1, r0
   12378:	bl	1146c <error@plt>
   1237c:	b	120bc <fscanf@plt+0xb90>
   12380:	ldr	r1, [pc, #680]	; 12630 <fscanf@plt+0x1104>
   12384:	mov	r2, #5
   12388:	mov	r0, #0
   1238c:	mov	r9, #0
   12390:	add	r1, pc, r1
   12394:	bl	11358 <dcgettext@plt>
   12398:	ldr	r3, [sp, #68]	; 0x44
   1239c:	mov	r2, r0
   123a0:	mov	r0, #0
   123a4:	mov	r1, r0
   123a8:	bl	1146c <error@plt>
   123ac:	b	120c0 <fscanf@plt+0xb94>
   123b0:	ldr	r3, [pc, #636]	; 12634 <fscanf@plt+0x1108>
   123b4:	ldr	sl, [sp, #144]	; 0x90
   123b8:	add	r3, pc, r3
   123bc:	ldrb	r3, [r3]
   123c0:	cmp	r3, #0
   123c4:	bne	124ac <fscanf@plt+0xf80>
   123c8:	ldr	r5, [sp, #120]	; 0x78
   123cc:	rsbs	r0, r5, #1
   123d0:	movcc	r0, #0
   123d4:	bl	11508 <exit@plt>
   123d8:	ldr	r1, [pc, #600]	; 12638 <fscanf@plt+0x110c>
   123dc:	mov	r2, #5
   123e0:	mov	r0, r5
   123e4:	add	r1, pc, r1
   123e8:	bl	11358 <dcgettext@plt>
   123ec:	mov	r1, r5
   123f0:	mov	r2, r0
   123f4:	mov	r0, r5
   123f8:	bl	1146c <error@plt>
   123fc:	mov	r0, #1
   12400:	bl	12b14 <fscanf@plt+0x15e8>
   12404:	mov	r2, sl
   12408:	b	11c90 <fscanf@plt+0x764>
   1240c:	mov	r6, r7
   12410:	ldr	ip, [sp, #56]	; 0x38
   12414:	cmp	ip, #0
   12418:	bne	1251c <fscanf@plt+0xff0>
   1241c:	mov	r3, #0
   12420:	add	r8, r8, #1
   12424:	strb	r3, [r6]
   12428:	b	12430 <fscanf@plt+0xf04>
   1242c:	add	r8, r8, #1
   12430:	ldrb	r3, [r7, r8]
   12434:	cmp	r3, #32
   12438:	cmpne	r3, #9
   1243c:	movne	r0, #0
   12440:	moveq	r0, #1
   12444:	beq	1242c <fscanf@plt+0xf00>
   12448:	cmp	r3, #61	; 0x3d
   1244c:	bne	1228c <fscanf@plt+0xd60>
   12450:	add	sl, r7, r8
   12454:	ldrb	r3, [sl, #1]
   12458:	add	sl, sl, #1
   1245c:	cmp	r3, #32
   12460:	cmpne	r3, #9
   12464:	beq	12454 <fscanf@plt+0xf28>
   12468:	mov	r0, #1
   1246c:	b	1228c <fscanf@plt+0xd60>
   12470:	ldr	r0, [sp, #68]	; 0x44
   12474:	mov	r1, #10
   12478:	bl	1128c <strchr@plt>
   1247c:	ldr	r7, [sp, #28]
   12480:	adds	r5, r0, #0
   12484:	movne	r5, #1
   12488:	cmp	r7, #0
   1248c:	beq	122d8 <fscanf@plt+0xdac>
   12490:	cmp	r5, #0
   12494:	beq	11dc4 <fscanf@plt+0x898>
   12498:	b	11d98 <fscanf@plt+0x86c>
   1249c:	ldr	r1, [pc, #408]	; 1263c <fscanf@plt+0x1110>
   124a0:	mov	r0, r5
   124a4:	add	r1, pc, r1
   124a8:	b	122b8 <fscanf@plt+0xd8c>
   124ac:	ldr	r3, [pc, #240]	; 125a4 <fscanf@plt+0x1078>
   124b0:	ldr	r3, [sl, r3]
   124b4:	ldr	r0, [r3]
   124b8:	bl	15478 <close_stdout@@Base+0x266c>
   124bc:	cmn	r0, #1
   124c0:	bne	123c8 <fscanf@plt+0xe9c>
   124c4:	bl	11514 <__errno_location@plt>
   124c8:	ldr	r1, [pc, #368]	; 12640 <fscanf@plt+0x1114>
   124cc:	mov	r2, #5
   124d0:	add	r1, pc, r1
   124d4:	ldr	r4, [r0]
   124d8:	mov	r0, #0
   124dc:	bl	11358 <dcgettext@plt>
   124e0:	mov	r1, r4
   124e4:	mov	r2, r0
   124e8:	mov	r0, #1
   124ec:	bl	1146c <error@plt>
   124f0:	b	123c8 <fscanf@plt+0xe9c>
   124f4:	ldr	r2, [pc, #328]	; 12644 <fscanf@plt+0x1118>
   124f8:	add	ip, ip, #1
   124fc:	str	ip, [sp, #24]
   12500:	add	r2, pc, r2
   12504:	str	r2, [r6, r3, lsl #2]
   12508:	b	118d8 <fscanf@plt+0x3ac>
   1250c:	ldr	r1, [pc, #308]	; 12648 <fscanf@plt+0x111c>
   12510:	mov	r0, r7
   12514:	add	r1, pc, r1
   12518:	b	122b8 <fscanf@plt+0xd8c>
   1251c:	mov	r0, r7
   12520:	mov	r1, r8
   12524:	bl	12824 <fscanf@plt+0x12f8>
   12528:	cmp	r0, #0
   1252c:	bne	1241c <fscanf@plt+0xef0>
   12530:	b	1228c <fscanf@plt+0xd60>
   12534:	andeq	r6, r1, r8, lsr #21
   12538:	andeq	r0, r0, r4, lsr r1
   1253c:	andeq	r5, r0, ip, asr #15
   12540:			; <UNDEFINED> instruction: 0x000058bc
   12544:	andeq	r5, r0, ip, lsr #12
   12548:	andeq	r6, r1, ip, asr r8
   1254c:	ldrdeq	r6, [r1], -ip
   12550:	andeq	r5, r0, r0, ror r8
   12554:	ldrdeq	r6, [r1], -r8
   12558:	andeq	r0, r0, r8, asr #2
   1255c:	ldrdeq	r6, [r1], -r4
   12560:	andeq	r0, r0, ip, asr #2
   12564:	andeq	r6, r1, ip, lsr #23
   12568:	andeq	r0, r0, r8, asr r1
   1256c:	andeq	r5, r0, r0, asr #14
   12570:	andeq	r5, r0, r4, asr #14
   12574:	andeq	r5, r0, r4, lsl r7
   12578:	strdeq	r5, [r0], -ip
   1257c:	andeq	r5, r0, r8, lsl r6
   12580:	andeq	r5, r0, ip, lsl r7
   12584:	andeq	r6, r1, ip, ror #19
   12588:	andeq	r6, r1, r0, lsl #19
   1258c:	muleq	r0, r8, r7
   12590:	andeq	r5, r0, r4, lsr #12
   12594:	andeq	r0, r0, r8, lsr #2
   12598:	andeq	r4, r0, r8, asr #30
   1259c:	andeq	r6, r1, r4, lsl r8
   125a0:	andeq	r5, r0, ip, lsl #13
   125a4:	andeq	r0, r0, r0, asr #2
   125a8:	andeq	r4, r0, ip, lsr #30
   125ac:	muleq	r1, ip, r7
   125b0:	andeq	r5, r0, r0, asr #12
   125b4:	andeq	r4, r0, r8, lsl #30
   125b8:	muleq	r1, ip, r6
   125bc:	andeq	r6, r1, r4, ror #11
   125c0:	andeq	r5, r0, r4, lsl r4
   125c4:	andeq	r6, r1, r8, asr r5
   125c8:	andeq	r6, r1, r0, ror #9
   125cc:	muleq	r0, r4, r3
   125d0:	andeq	r6, r1, r8, lsl r4
   125d4:	andeq	r4, r0, r8, asr #22
   125d8:	andeq	r5, r0, ip, lsl r4
   125dc:	andeq	r5, r0, r0, lsl #8
   125e0:	andeq	r6, r1, ip, ror r3
   125e4:	andeq	r5, r0, r8, ror #7
   125e8:	andeq	r6, r1, ip, ror r2
   125ec:	andeq	r5, r0, ip, asr r1
   125f0:	andeq	r5, r0, r4, lsl #3
   125f4:	andeq	r5, r0, r8, lsr r1
   125f8:	andeq	r5, r0, r0, ror #2
   125fc:	andeq	r5, r0, r4, lsl r1
   12600:	andeq	r5, r0, r0, asr #2
   12604:	andeq	r4, r0, r4, ror r7
   12608:	andeq	r5, r0, r4, ror #2
   1260c:	andeq	r6, r1, r0, rrx
   12610:	strdeq	r5, [r1], -r8
   12614:	ldrdeq	r4, [r0], -r8
   12618:	andeq	r4, r0, r0, asr #29
   1261c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12620:	andeq	r4, r0, ip, ror #25
   12624:	andeq	r4, r0, ip, asr pc
   12628:	andeq	r4, r0, ip, ror #26
   1262c:			; <UNDEFINED> instruction: 0x000045bc
   12630:	andeq	r4, r0, r0, lsr #26
   12634:	strdeq	r5, [r1], -r0
   12638:	strdeq	r4, [r0], -r0
   1263c:	andeq	r4, r0, ip, ror sl
   12640:	andeq	r4, r0, r4, asr fp
   12644:	andeq	r4, r0, r0, lsr #22
   12648:	andeq	r4, r0, ip, asr #20
   1264c:	andeq	r5, r1, r0, lsr #22
   12650:	andeq	r4, r0, ip, ror #19
   12654:	andeq	r4, r0, r4, ror #19
   12658:	mov	r1, #92	; 0x5c
   1265c:	mov	r5, #1
   12660:	bl	1131c <__overflow@plt>
   12664:	b	11dc4 <fscanf@plt+0x898>
   12668:	ldr	r1, [sp, #152]	; 0x98
   1266c:	bl	1131c <__overflow@plt>
   12670:	b	11eb4 <fscanf@plt+0x988>
   12674:	mov	r1, #32
   12678:	bl	1131c <__overflow@plt>
   1267c:	b	11e8c <fscanf@plt+0x960>
   12680:	ldr	r3, [pc, #-60]	; 1264c <fscanf@plt+0x1120>
   12684:	ldrd	r6, [sp, #80]	; 0x50
   12688:	add	r3, pc, r3
   1268c:	ldrd	r4, [sp, #56]	; 0x38
   12690:	adds	r6, r6, #1
   12694:	ldrb	r0, [r3, #1]
   12698:	adc	r7, r7, #0
   1269c:	strd	r6, [sp, #80]	; 0x50
   126a0:	cmp	r0, #0
   126a4:	bne	11bf8 <fscanf@plt+0x6cc>
   126a8:	ldr	r1, [pc, #-96]	; 12650 <fscanf@plt+0x1124>
   126ac:	mov	r2, #5
   126b0:	add	r1, pc, r1
   126b4:	bl	11358 <dcgettext@plt>
   126b8:	ldr	r1, [pc, #-108]	; 12654 <fscanf@plt+0x1128>
   126bc:	ldr	r2, [sp, #76]	; 0x4c
   126c0:	add	r1, pc, r1
   126c4:	mov	r3, r0
   126c8:	mov	r0, #1
   126cc:	bl	11280 <__printf_chk@plt>
   126d0:	b	11bf8 <fscanf@plt+0x6cc>
   126d4:	mov	r1, #92	; 0x5c
   126d8:	mov	r5, #1
   126dc:	bl	1131c <__overflow@plt>
   126e0:	b	11e1c <fscanf@plt+0x8f0>
   126e4:	mov	r1, #10
   126e8:	bl	1131c <__overflow@plt>
   126ec:	b	11ee8 <fscanf@plt+0x9bc>
   126f0:	mov	fp, #0
   126f4:	mov	lr, #0
   126f8:	pop	{r1}		; (ldr r1, [sp], #4)
   126fc:	mov	r2, sp
   12700:	push	{r2}		; (str r2, [sp, #-4]!)
   12704:	push	{r0}		; (str r0, [sp, #-4]!)
   12708:	ldr	ip, [pc, #16]	; 12720 <fscanf@plt+0x11f4>
   1270c:	push	{ip}		; (str ip, [sp, #-4]!)
   12710:	ldr	r0, [pc, #12]	; 12724 <fscanf@plt+0x11f8>
   12714:	ldr	r3, [pc, #12]	; 12728 <fscanf@plt+0x11fc>
   12718:	bl	11220 <__libc_start_main@plt>
   1271c:	bl	11208 <abort@plt>
   12720:	andeq	r6, r1, r4, lsr #16
   12724:	andeq	r1, r1, r8, lsr r5
   12728:	andeq	r6, r1, r0, asr #15
   1272c:	ldr	r3, [pc, #20]	; 12748 <fscanf@plt+0x121c>
   12730:	ldr	r2, [pc, #20]	; 1274c <fscanf@plt+0x1220>
   12734:	add	r3, pc, r3
   12738:	ldr	r2, [r3, r2]
   1273c:	cmp	r2, #0
   12740:	bxeq	lr
   12744:	b	11238 <__gmon_start__@plt>
   12748:	andeq	r5, r1, r4, asr #17
   1274c:	andeq	r0, r0, r0, lsr #2
   12750:	push	{r3, lr}
   12754:	movw	r0, #33196	; 0x81ac
   12758:	ldr	r3, [pc, #36]	; 12784 <fscanf@plt+0x1258>
   1275c:	movt	r0, #2
   12760:	rsb	r3, r0, r3
   12764:	cmp	r3, #6
   12768:	popls	{r3, pc}
   1276c:	movw	r3, #0
   12770:	movt	r3, #0
   12774:	cmp	r3, #0
   12778:	popeq	{r3, pc}
   1277c:	blx	r3
   12780:	pop	{r3, pc}
   12784:	andeq	r8, r2, pc, lsr #3
   12788:	push	{r3, lr}
   1278c:	movw	r0, #33196	; 0x81ac
   12790:	movw	r3, #33196	; 0x81ac
   12794:	movt	r0, #2
   12798:	movt	r3, #2
   1279c:	rsb	r3, r0, r3
   127a0:	asr	r3, r3, #2
   127a4:	add	r3, r3, r3, lsr #31
   127a8:	asrs	r1, r3, #1
   127ac:	popeq	{r3, pc}
   127b0:	movw	r2, #0
   127b4:	movt	r2, #0
   127b8:	cmp	r2, #0
   127bc:	popeq	{r3, pc}
   127c0:	blx	r2
   127c4:	pop	{r3, pc}
   127c8:	push	{r4, lr}
   127cc:	movw	r4, #33196	; 0x81ac
   127d0:	movt	r4, #2
   127d4:	ldrb	r3, [r4]
   127d8:	cmp	r3, #0
   127dc:	popne	{r4, pc}
   127e0:	bl	12750 <fscanf@plt+0x1224>
   127e4:	mov	r3, #1
   127e8:	strb	r3, [r4]
   127ec:	pop	{r4, pc}
   127f0:	movw	r0, #32296	; 0x7e28
   127f4:	movt	r0, #2
   127f8:	push	{r3, lr}
   127fc:	ldr	r3, [r0]
   12800:	cmp	r3, #0
   12804:	beq	1281c <fscanf@plt+0x12f0>
   12808:	movw	r3, #0
   1280c:	movt	r3, #0
   12810:	cmp	r3, #0
   12814:	beq	1281c <fscanf@plt+0x12f0>
   12818:	blx	r3
   1281c:	pop	{r3, lr}
   12820:	b	12788 <fscanf@plt+0x125c>
   12824:	cmp	r1, #0
   12828:	push	{r4, r5, r6}
   1282c:	beq	128a4 <fscanf@plt+0x1378>
   12830:	add	ip, r0, #1
   12834:	sub	r5, r1, #1
   12838:	mov	r3, #0
   1283c:	mov	r6, #10
   12840:	ldrb	r2, [r0, r3]
   12844:	cmp	r2, #0
   12848:	beq	128ac <fscanf@plt+0x1380>
   1284c:	cmp	r2, #92	; 0x5c
   12850:	mov	r4, ip
   12854:	bne	12880 <fscanf@plt+0x1354>
   12858:	cmp	r5, r3
   1285c:	add	r3, r3, #1
   12860:	beq	128c4 <fscanf@plt+0x1398>
   12864:	ldrb	r2, [r0, r3]
   12868:	cmp	r2, #92	; 0x5c
   1286c:	beq	128b8 <fscanf@plt+0x138c>
   12870:	cmp	r2, #110	; 0x6e
   12874:	bne	128c4 <fscanf@plt+0x1398>
   12878:	strb	r6, [ip, #-1]
   1287c:	b	12884 <fscanf@plt+0x1358>
   12880:	strb	r2, [ip, #-1]
   12884:	add	r3, r3, #1
   12888:	add	ip, ip, #1
   1288c:	cmp	r1, r3
   12890:	bhi	12840 <fscanf@plt+0x1314>
   12894:	add	r1, r0, r1
   12898:	cmp	r4, r1
   1289c:	movcc	r3, #0
   128a0:	strbcc	r3, [r4]
   128a4:	pop	{r4, r5, r6}
   128a8:	bx	lr
   128ac:	mov	r0, r2
   128b0:	pop	{r4, r5, r6}
   128b4:	bx	lr
   128b8:	strb	r2, [ip, #-1]
   128bc:	mov	r4, ip
   128c0:	b	12884 <fscanf@plt+0x1358>
   128c4:	mov	r0, #0
   128c8:	pop	{r4, r5, r6}
   128cc:	bx	lr
   128d0:	cmp	r1, #0
   128d4:	ldr	r2, [pc, #200]	; 129a4 <fscanf@plt+0x1478>
   128d8:	push	{r3, r4, r5, r6, r7, lr}
   128dc:	add	r2, pc, r2
   128e0:	mov	r4, r0
   128e4:	beq	12990 <fscanf@plt+0x1464>
   128e8:	ldrb	r3, [r0]
   128ec:	cmp	r3, #0
   128f0:	popeq	{r3, r4, r5, r6, r7, pc}
   128f4:	ldr	r1, [pc, #172]	; 129a8 <fscanf@plt+0x147c>
   128f8:	ldr	r7, [pc, #172]	; 129ac <fscanf@plt+0x1480>
   128fc:	ldr	r6, [pc, #172]	; 129b0 <fscanf@plt+0x1484>
   12900:	add	r7, pc, r7
   12904:	ldr	r5, [r2, r1]
   12908:	add	r6, pc, r6
   1290c:	b	12924 <fscanf@plt+0x13f8>
   12910:	ldr	r3, [r5]
   12914:	bl	11370 <fwrite_unlocked@plt>
   12918:	ldrb	r3, [r4, #1]!
   1291c:	cmp	r3, #0
   12920:	beq	1298c <fscanf@plt+0x1460>
   12924:	cmp	r3, #10
   12928:	beq	1296c <fscanf@plt+0x1440>
   1292c:	cmp	r3, #92	; 0x5c
   12930:	mov	r0, r6
   12934:	mov	r1, #1
   12938:	mov	r2, #2
   1293c:	beq	12910 <fscanf@plt+0x13e4>
   12940:	ldr	r0, [r5]
   12944:	ldr	r1, [r0, #20]
   12948:	ldr	r2, [r0, #24]
   1294c:	add	ip, r1, #1
   12950:	cmp	r1, r2
   12954:	strcc	ip, [r0, #20]
   12958:	strbcc	r3, [r1]
   1295c:	bcc	12918 <fscanf@plt+0x13ec>
   12960:	mov	r1, r3
   12964:	bl	1131c <__overflow@plt>
   12968:	b	12918 <fscanf@plt+0x13ec>
   1296c:	ldr	r3, [r5]
   12970:	mov	r0, r7
   12974:	mov	r1, #1
   12978:	mov	r2, #2
   1297c:	bl	11370 <fwrite_unlocked@plt>
   12980:	ldrb	r3, [r4, #1]!
   12984:	cmp	r3, #0
   12988:	bne	12924 <fscanf@plt+0x13f8>
   1298c:	pop	{r3, r4, r5, r6, r7, pc}
   12990:	ldr	r3, [pc, #16]	; 129a8 <fscanf@plt+0x147c>
   12994:	ldr	r3, [r2, r3]
   12998:	ldr	r1, [r3]
   1299c:	pop	{r3, r4, r5, r6, r7, lr}
   129a0:	b	11364 <fputs_unlocked@plt>
   129a4:	andeq	r5, r1, ip, lsl r7
   129a8:	andeq	r0, r0, ip, asr #2
   129ac:	andeq	r3, r0, ip, ror #30
   129b0:	andeq	r3, r0, r8, ror #30
   129b4:	push	{r3, r4, r5, r6, r7, lr}
   129b8:	mov	r5, r0
   129bc:	ldrb	r3, [r0]
   129c0:	mov	r7, r1
   129c4:	ldr	r6, [pc, #300]	; 12af8 <fscanf@plt+0x15cc>
   129c8:	cmp	r3, #45	; 0x2d
   129cc:	add	r6, pc, r6
   129d0:	beq	12a3c <fscanf@plt+0x1510>
   129d4:	ldr	r1, [pc, #288]	; 12afc <fscanf@plt+0x15d0>
   129d8:	mov	r0, r5
   129dc:	add	r1, pc, r1
   129e0:	bl	13368 <close_stdout@@Base+0x55c>
   129e4:	subs	r4, r0, #0
   129e8:	beq	12ad4 <fscanf@plt+0x15a8>
   129ec:	mov	r1, #2
   129f0:	bl	1332c <close_stdout@@Base+0x520>
   129f4:	mov	r1, r7
   129f8:	mov	r0, r4
   129fc:	bl	1307c <close_stdout@@Base+0x270>
   12a00:	subs	r7, r0, #0
   12a04:	bne	12a8c <fscanf@plt+0x1560>
   12a08:	mov	r0, r4
   12a0c:	bl	15478 <close_stdout@@Base+0x266c>
   12a10:	cmp	r0, #0
   12a14:	beq	12a84 <fscanf@plt+0x1558>
   12a18:	bl	11514 <__errno_location@plt>
   12a1c:	ldr	r2, [pc, #220]	; 12b00 <fscanf@plt+0x15d4>
   12a20:	mov	r3, r5
   12a24:	add	r2, pc, r2
   12a28:	ldr	r1, [r0]
   12a2c:	mov	r0, r7
   12a30:	bl	1146c <error@plt>
   12a34:	mov	r0, r7
   12a38:	pop	{r3, r4, r5, r6, r7, pc}
   12a3c:	ldrb	r3, [r0, #1]
   12a40:	cmp	r3, #0
   12a44:	bne	129d4 <fscanf@plt+0x14a8>
   12a48:	ldr	r2, [pc, #180]	; 12b04 <fscanf@plt+0x15d8>
   12a4c:	mov	r0, #1
   12a50:	ldr	r3, [pc, #176]	; 12b08 <fscanf@plt+0x15dc>
   12a54:	mov	r1, #2
   12a58:	add	r2, pc, r2
   12a5c:	strb	r0, [r2]
   12a60:	ldr	r6, [r6, r3]
   12a64:	ldr	r4, [r6]
   12a68:	mov	r0, r4
   12a6c:	bl	1332c <close_stdout@@Base+0x520>
   12a70:	mov	r0, r4
   12a74:	mov	r1, r7
   12a78:	bl	1307c <close_stdout@@Base+0x270>
   12a7c:	cmp	r0, #0
   12a80:	bne	12a94 <fscanf@plt+0x1568>
   12a84:	mov	r0, #1
   12a88:	pop	{r3, r4, r5, r6, r7, pc}
   12a8c:	ldr	r3, [pc, #116]	; 12b08 <fscanf@plt+0x15dc>
   12a90:	ldr	r6, [r6, r3]
   12a94:	bl	11514 <__errno_location@plt>
   12a98:	ldr	r2, [pc, #108]	; 12b0c <fscanf@plt+0x15e0>
   12a9c:	mov	r3, r5
   12aa0:	add	r2, pc, r2
   12aa4:	ldr	r1, [r0]
   12aa8:	mov	r0, #0
   12aac:	bl	1146c <error@plt>
   12ab0:	ldr	r3, [r6]
   12ab4:	cmp	r4, r3
   12ab8:	beq	12acc <fscanf@plt+0x15a0>
   12abc:	mov	r0, r4
   12ac0:	bl	15478 <close_stdout@@Base+0x266c>
   12ac4:	mov	r0, #0
   12ac8:	pop	{r3, r4, r5, r6, r7, pc}
   12acc:	mov	r0, #0
   12ad0:	pop	{r3, r4, r5, r6, r7, pc}
   12ad4:	bl	11514 <__errno_location@plt>
   12ad8:	ldr	r2, [pc, #48]	; 12b10 <fscanf@plt+0x15e4>
   12adc:	mov	r3, r5
   12ae0:	add	r2, pc, r2
   12ae4:	ldr	r1, [r0]
   12ae8:	mov	r0, r4
   12aec:	bl	1146c <error@plt>
   12af0:	mov	r0, r4
   12af4:	pop	{r3, r4, r5, r6, r7, pc}
   12af8:	andeq	r5, r1, ip, lsr #12
   12afc:	muleq	r0, r8, lr
   12b00:	andeq	r4, r0, r0, ror #16
   12b04:	andeq	r5, r1, r0, asr r7
   12b08:	andeq	r0, r0, r0, asr #2
   12b0c:	andeq	r4, r0, r4, ror #15
   12b10:	andeq	r4, r0, r4, lsr #15
   12b14:	push	{r4, r5, r6, r7, lr}
   12b18:	subs	r4, r0, #0
   12b1c:	ldr	r5, [pc, #612]	; 12d88 <fscanf@plt+0x185c>
   12b20:	sub	sp, sp, #12
   12b24:	add	r5, pc, r5
   12b28:	beq	12b70 <fscanf@plt+0x1644>
   12b2c:	ldr	r3, [pc, #600]	; 12d8c <fscanf@plt+0x1860>
   12b30:	mov	r2, #5
   12b34:	ldr	r1, [pc, #596]	; 12d90 <fscanf@plt+0x1864>
   12b38:	mov	r0, #0
   12b3c:	ldr	r3, [r5, r3]
   12b40:	add	r1, pc, r1
   12b44:	ldr	r6, [r3]
   12b48:	bl	11358 <dcgettext@plt>
   12b4c:	ldr	r3, [pc, #576]	; 12d94 <fscanf@plt+0x1868>
   12b50:	mov	r1, #1
   12b54:	ldr	r3, [r5, r3]
   12b58:	ldr	r3, [r3]
   12b5c:	mov	r2, r0
   12b60:	mov	r0, r6
   12b64:	bl	11490 <__fprintf_chk@plt>
   12b68:	mov	r0, r4
   12b6c:	bl	11508 <exit@plt>
   12b70:	ldr	r1, [pc, #544]	; 12d98 <fscanf@plt+0x186c>
   12b74:	mov	r2, #5
   12b78:	ldr	r7, [pc, #540]	; 12d9c <fscanf@plt+0x1870>
   12b7c:	add	r1, pc, r1
   12b80:	bl	11358 <dcgettext@plt>
   12b84:	ldr	r3, [pc, #520]	; 12d94 <fscanf@plt+0x1868>
   12b88:	add	r7, pc, r7
   12b8c:	mov	r2, #512	; 0x200
   12b90:	ldr	r6, [r5, r3]
   12b94:	mov	r3, r7
   12b98:	str	r2, [sp]
   12b9c:	ldr	r2, [r6]
   12ba0:	mov	r1, r0
   12ba4:	mov	r0, #1
   12ba8:	bl	11280 <__printf_chk@plt>
   12bac:	ldr	r1, [pc, #492]	; 12da0 <fscanf@plt+0x1874>
   12bb0:	mov	r2, #5
   12bb4:	mov	r0, r4
   12bb8:	add	r1, pc, r1
   12bbc:	bl	11358 <dcgettext@plt>
   12bc0:	ldr	r3, [pc, #476]	; 12da4 <fscanf@plt+0x1878>
   12bc4:	ldr	r5, [r5, r3]
   12bc8:	ldr	r1, [r5]
   12bcc:	bl	11364 <fputs_unlocked@plt>
   12bd0:	ldr	r1, [pc, #464]	; 12da8 <fscanf@plt+0x187c>
   12bd4:	mov	r2, #5
   12bd8:	mov	r0, r4
   12bdc:	add	r1, pc, r1
   12be0:	bl	11358 <dcgettext@plt>
   12be4:	mov	r2, r7
   12be8:	mov	r1, r0
   12bec:	mov	r0, #1
   12bf0:	bl	11280 <__printf_chk@plt>
   12bf4:	ldr	r1, [pc, #432]	; 12dac <fscanf@plt+0x1880>
   12bf8:	mov	r2, #5
   12bfc:	mov	r0, r4
   12c00:	add	r1, pc, r1
   12c04:	bl	11358 <dcgettext@plt>
   12c08:	ldr	r1, [r5]
   12c0c:	bl	11364 <fputs_unlocked@plt>
   12c10:	ldr	r1, [pc, #408]	; 12db0 <fscanf@plt+0x1884>
   12c14:	mov	r2, #5
   12c18:	mov	r0, r4
   12c1c:	add	r1, pc, r1
   12c20:	bl	11358 <dcgettext@plt>
   12c24:	ldr	r1, [r5]
   12c28:	bl	11364 <fputs_unlocked@plt>
   12c2c:	ldr	r1, [pc, #384]	; 12db4 <fscanf@plt+0x1888>
   12c30:	mov	r2, #5
   12c34:	mov	r0, r4
   12c38:	add	r1, pc, r1
   12c3c:	bl	11358 <dcgettext@plt>
   12c40:	ldr	r1, [r5]
   12c44:	bl	11364 <fputs_unlocked@plt>
   12c48:	ldr	r1, [pc, #360]	; 12db8 <fscanf@plt+0x188c>
   12c4c:	mov	r2, #5
   12c50:	mov	r0, r4
   12c54:	add	r1, pc, r1
   12c58:	bl	11358 <dcgettext@plt>
   12c5c:	ldr	r1, [r5]
   12c60:	bl	11364 <fputs_unlocked@plt>
   12c64:	ldr	r1, [pc, #336]	; 12dbc <fscanf@plt+0x1890>
   12c68:	mov	r2, #5
   12c6c:	mov	r0, r4
   12c70:	add	r1, pc, r1
   12c74:	bl	11358 <dcgettext@plt>
   12c78:	ldr	r1, [r5]
   12c7c:	bl	11364 <fputs_unlocked@plt>
   12c80:	ldr	r1, [pc, #312]	; 12dc0 <fscanf@plt+0x1894>
   12c84:	mov	r2, #5
   12c88:	mov	r0, r4
   12c8c:	add	r1, pc, r1
   12c90:	bl	11358 <dcgettext@plt>
   12c94:	ldr	r1, [r5]
   12c98:	bl	11364 <fputs_unlocked@plt>
   12c9c:	ldr	r1, [pc, #288]	; 12dc4 <fscanf@plt+0x1898>
   12ca0:	mov	r2, #5
   12ca4:	mov	r0, r4
   12ca8:	add	r1, pc, r1
   12cac:	bl	11358 <dcgettext@plt>
   12cb0:	ldr	r2, [pc, #272]	; 12dc8 <fscanf@plt+0x189c>
   12cb4:	add	r2, pc, r2
   12cb8:	mov	r1, r0
   12cbc:	mov	r0, #1
   12cc0:	bl	11280 <__printf_chk@plt>
   12cc4:	ldr	r1, [pc, #256]	; 12dcc <fscanf@plt+0x18a0>
   12cc8:	mov	r2, #5
   12ccc:	mov	r0, r4
   12cd0:	add	r1, pc, r1
   12cd4:	bl	11358 <dcgettext@plt>
   12cd8:	ldr	r2, [pc, #240]	; 12dd0 <fscanf@plt+0x18a4>
   12cdc:	ldr	r3, [pc, #240]	; 12dd4 <fscanf@plt+0x18a8>
   12ce0:	add	r2, pc, r2
   12ce4:	add	r3, pc, r3
   12ce8:	mov	r1, r0
   12cec:	mov	r0, #1
   12cf0:	bl	11280 <__printf_chk@plt>
   12cf4:	mov	r0, #5
   12cf8:	mov	r1, r4
   12cfc:	bl	113ac <setlocale@plt>
   12d00:	cmp	r0, #0
   12d04:	beq	12d20 <fscanf@plt+0x17f4>
   12d08:	ldr	r1, [pc, #200]	; 12dd8 <fscanf@plt+0x18ac>
   12d0c:	mov	r2, #3
   12d10:	add	r1, pc, r1
   12d14:	bl	114d8 <strncmp@plt>
   12d18:	cmp	r0, #0
   12d1c:	bne	12d54 <fscanf@plt+0x1828>
   12d20:	ldr	r1, [pc, #180]	; 12ddc <fscanf@plt+0x18b0>
   12d24:	mov	r2, #5
   12d28:	mov	r0, #0
   12d2c:	add	r1, pc, r1
   12d30:	bl	11358 <dcgettext@plt>
   12d34:	mov	r5, r0
   12d38:	ldr	r0, [r6]
   12d3c:	bl	13284 <close_stdout@@Base+0x478>
   12d40:	mov	r1, r5
   12d44:	mov	r2, r0
   12d48:	mov	r0, #1
   12d4c:	bl	11280 <__printf_chk@plt>
   12d50:	b	12b68 <fscanf@plt+0x163c>
   12d54:	ldr	r1, [pc, #132]	; 12de0 <fscanf@plt+0x18b4>
   12d58:	mov	r2, #5
   12d5c:	mov	r0, r4
   12d60:	add	r1, pc, r1
   12d64:	bl	11358 <dcgettext@plt>
   12d68:	mov	r5, r0
   12d6c:	ldr	r0, [r6]
   12d70:	bl	13284 <close_stdout@@Base+0x478>
   12d74:	mov	r1, r5
   12d78:	mov	r2, r0
   12d7c:	mov	r0, #1
   12d80:	bl	11280 <__printf_chk@plt>
   12d84:	b	12d20 <fscanf@plt+0x17f4>
   12d88:	ldrdeq	r5, [r1], -r4
   12d8c:	andeq	r0, r0, r0, asr r1
   12d90:	andeq	r3, r0, r8, lsr sp
   12d94:	andeq	r0, r0, r4, asr r1
   12d98:	andeq	r3, r0, r4, lsr #26
   12d9c:	muleq	r0, r8, sp
   12da0:	andeq	r3, r0, r0, ror sp
   12da4:	andeq	r0, r0, ip, asr #2
   12da8:	andeq	r3, r0, r8, ror sp
   12dac:	muleq	r0, r8, sp
   12db0:			; <UNDEFINED> instruction: 0x00003db0
   12db4:	andeq	r3, r0, r8, asr #27
   12db8:	andeq	r3, r0, r0, lsl #28
   12dbc:	andeq	r3, r0, r4, asr pc
   12dc0:	andeq	r3, r0, r8, ror #30
   12dc4:	andeq	r3, r0, r4, lsl #31
   12dc8:	andeq	r4, r0, ip, ror r0
   12dcc:	andeq	r4, r0, ip, rrx
   12dd0:	andeq	r4, r0, r4, ror r0
   12dd4:	andeq	r4, r0, r0, lsl #1
   12dd8:	andeq	r4, r0, ip, ror r0
   12ddc:	andeq	r4, r0, ip, lsr #1
   12de0:	andeq	r4, r0, r0, lsr r0
   12de4:	ldr	r3, [pc, #8]	; 12df4 <fscanf@plt+0x18c8>
   12de8:	add	r3, pc, r3
   12dec:	str	r0, [r3]
   12df0:	bx	lr
   12df4:	ldrdeq	r5, [r1], -r0
   12df8:	ldr	r3, [pc, #8]	; 12e08 <fscanf@plt+0x18dc>
   12dfc:	add	r3, pc, r3
   12e00:	strb	r0, [r3, #4]
   12e04:	bx	lr
   12e08:			; <UNDEFINED> instruction: 0x000153bc

00012e0c <close_stdout@@Base>:
   12e0c:	push	{r4, r5, r6, r7, lr}
   12e10:	sub	sp, sp, #12
   12e14:	ldr	r4, [pc, #228]	; 12f00 <close_stdout@@Base+0xf4>
   12e18:	ldr	r3, [pc, #228]	; 12f04 <close_stdout@@Base+0xf8>
   12e1c:	add	r4, pc, r4
   12e20:	ldr	r3, [r4, r3]
   12e24:	ldr	r0, [r3]
   12e28:	bl	15794 <close_stdout@@Base+0x2988>
   12e2c:	cmp	r0, #0
   12e30:	beq	12e58 <close_stdout@@Base+0x4c>
   12e34:	ldr	r3, [pc, #204]	; 12f08 <close_stdout@@Base+0xfc>
   12e38:	add	r3, pc, r3
   12e3c:	ldrb	r3, [r3, #4]
   12e40:	cmp	r3, #0
   12e44:	beq	12e78 <close_stdout@@Base+0x6c>
   12e48:	bl	11514 <__errno_location@plt>
   12e4c:	ldr	r3, [r0]
   12e50:	cmp	r3, #32
   12e54:	bne	12e78 <close_stdout@@Base+0x6c>
   12e58:	ldr	r3, [pc, #172]	; 12f0c <close_stdout@@Base+0x100>
   12e5c:	ldr	r3, [r4, r3]
   12e60:	ldr	r0, [r3]
   12e64:	bl	15794 <close_stdout@@Base+0x2988>
   12e68:	cmp	r0, #0
   12e6c:	bne	12ecc <close_stdout@@Base+0xc0>
   12e70:	add	sp, sp, #12
   12e74:	pop	{r4, r5, r6, r7, pc}
   12e78:	ldr	r1, [pc, #144]	; 12f10 <close_stdout@@Base+0x104>
   12e7c:	mov	r0, #0
   12e80:	mov	r2, #5
   12e84:	add	r1, pc, r1
   12e88:	bl	11358 <dcgettext@plt>
   12e8c:	ldr	r3, [pc, #128]	; 12f14 <close_stdout@@Base+0x108>
   12e90:	ldr	r5, [pc, r3]
   12e94:	cmp	r5, #0
   12e98:	mov	r6, r0
   12e9c:	beq	12edc <close_stdout@@Base+0xd0>
   12ea0:	bl	11514 <__errno_location@plt>
   12ea4:	ldr	r7, [r0]
   12ea8:	mov	r0, r5
   12eac:	bl	14b00 <close_stdout@@Base+0x1cf4>
   12eb0:	ldr	r2, [pc, #96]	; 12f18 <close_stdout@@Base+0x10c>
   12eb4:	str	r6, [sp]
   12eb8:	mov	r1, r7
   12ebc:	add	r2, pc, r2
   12ec0:	mov	r3, r0
   12ec4:	mov	r0, #0
   12ec8:	bl	1146c <error@plt>
   12ecc:	ldr	r3, [pc, #72]	; 12f1c <close_stdout@@Base+0x110>
   12ed0:	ldr	r3, [r4, r3]
   12ed4:	ldr	r0, [r3]
   12ed8:	bl	11334 <_exit@plt>
   12edc:	bl	11514 <__errno_location@plt>
   12ee0:	ldr	r2, [pc, #56]	; 12f20 <close_stdout@@Base+0x114>
   12ee4:	add	r2, pc, r2
   12ee8:	mov	r3, r0
   12eec:	mov	r0, r5
   12ef0:	ldr	r1, [r3]
   12ef4:	mov	r3, r6
   12ef8:	bl	1146c <error@plt>
   12efc:	b	12ecc <close_stdout@@Base+0xc0>
   12f00:	ldrdeq	r5, [r1], -ip
   12f04:	andeq	r0, r0, ip, asr #2
   12f08:	andeq	r5, r1, r0, lsl #7
   12f0c:	andeq	r0, r0, r0, asr r1
   12f10:	strdeq	r4, [r0], -r0
   12f14:	andeq	r5, r1, r8, lsr #6
   12f18:	andeq	r4, r0, r4, asr #7
   12f1c:	andeq	r0, r0, r0, lsr r1
   12f20:	andeq	r4, r0, r0, lsr #7
   12f24:	b	1125c <SHA384_Init@plt>
   12f28:	mov	r3, r0
   12f2c:	mov	r0, r1
   12f30:	push	{r4, lr}
   12f34:	mov	r4, r1
   12f38:	mov	r1, r3
   12f3c:	bl	112d4 <SHA384_Final@plt>
   12f40:	mov	r0, r4
   12f44:	pop	{r4, pc}
   12f48:	b	11520 <SHA384@plt>
   12f4c:	ldr	ip, [pc, #92]	; 12fb0 <close_stdout@@Base+0x1a4>
   12f50:	mov	r2, r0
   12f54:	push	{r4, r5, lr}
   12f58:	add	ip, pc, ip
   12f5c:	ldr	lr, [pc, #80]	; 12fb4 <close_stdout@@Base+0x1a8>
   12f60:	sub	sp, sp, #228	; 0xe4
   12f64:	mov	r5, r1
   12f68:	mov	r1, r2
   12f6c:	mov	r0, sp
   12f70:	mov	r2, #216	; 0xd8
   12f74:	ldr	r4, [ip, lr]
   12f78:	ldr	ip, [r4]
   12f7c:	str	ip, [sp, #220]	; 0xdc
   12f80:	bl	113a0 <memcpy@plt>
   12f84:	mov	r0, r5
   12f88:	mov	r1, sp
   12f8c:	bl	112d4 <SHA384_Final@plt>
   12f90:	ldr	r2, [sp, #220]	; 0xdc
   12f94:	ldr	r3, [r4]
   12f98:	mov	r0, r5
   12f9c:	cmp	r2, r3
   12fa0:	bne	12fac <close_stdout@@Base+0x1a0>
   12fa4:	add	sp, sp, #228	; 0xe4
   12fa8:	pop	{r4, r5, pc}
   12fac:	bl	11484 <__stack_chk_fail@plt>
   12fb0:	andeq	r5, r1, r0, lsr #1
   12fb4:	andeq	r0, r0, r4, lsr r1
   12fb8:	b	112b0 <SHA512_Init@plt>
   12fbc:	mov	ip, r0
   12fc0:	mov	r3, r1
   12fc4:	mov	r0, r2
   12fc8:	mov	r1, ip
   12fcc:	mov	r2, r3
   12fd0:	b	114a8 <SHA512_Update@plt>
   12fd4:	mov	ip, r0
   12fd8:	mov	r3, r1
   12fdc:	mov	r0, r2
   12fe0:	mov	r1, ip
   12fe4:	mov	r2, r3
   12fe8:	b	114a8 <SHA512_Update@plt>
   12fec:	mov	r3, r0
   12ff0:	mov	r0, r1
   12ff4:	push	{r4, lr}
   12ff8:	mov	r4, r1
   12ffc:	mov	r1, r3
   13000:	bl	11328 <SHA512_Final@plt>
   13004:	mov	r0, r4
   13008:	pop	{r4, pc}
   1300c:	b	1122c <SHA512@plt>
   13010:	ldr	ip, [pc, #92]	; 13074 <close_stdout@@Base+0x268>
   13014:	mov	r2, r0
   13018:	push	{r4, r5, lr}
   1301c:	add	ip, pc, ip
   13020:	ldr	lr, [pc, #80]	; 13078 <close_stdout@@Base+0x26c>
   13024:	sub	sp, sp, #228	; 0xe4
   13028:	mov	r5, r1
   1302c:	mov	r1, r2
   13030:	mov	r0, sp
   13034:	mov	r2, #216	; 0xd8
   13038:	ldr	r4, [ip, lr]
   1303c:	ldr	ip, [r4]
   13040:	str	ip, [sp, #220]	; 0xdc
   13044:	bl	113a0 <memcpy@plt>
   13048:	mov	r0, r5
   1304c:	mov	r1, sp
   13050:	bl	11328 <SHA512_Final@plt>
   13054:	ldr	r2, [sp, #220]	; 0xdc
   13058:	ldr	r3, [r4]
   1305c:	mov	r0, r5
   13060:	cmp	r2, r3
   13064:	bne	13070 <close_stdout@@Base+0x264>
   13068:	add	sp, sp, #228	; 0xe4
   1306c:	pop	{r4, r5, pc}
   13070:	bl	11484 <__stack_chk_fail@plt>
   13074:	ldrdeq	r4, [r1], -ip
   13078:	andeq	r0, r0, r4, lsr r1
   1307c:	ldr	r3, [pc, #244]	; 13178 <close_stdout@@Base+0x36c>
   13080:	ldr	r2, [pc, #244]	; 1317c <close_stdout@@Base+0x370>
   13084:	add	r3, pc, r3
   13088:	push	{r4, r5, r6, r7, r8, r9, lr}
   1308c:	sub	sp, sp, #228	; 0xe4
   13090:	ldr	r8, [r3, r2]
   13094:	mov	r5, r0
   13098:	movw	r0, #32840	; 0x8048
   1309c:	mov	r9, r1
   130a0:	ldr	r3, [r8]
   130a4:	str	r3, [sp, #220]	; 0xdc
   130a8:	bl	11460 <malloc@plt>
   130ac:	subs	r6, r0, #0
   130b0:	moveq	r0, #1
   130b4:	beq	13118 <close_stdout@@Base+0x30c>
   130b8:	mov	r0, sp
   130bc:	mov	r4, #0
   130c0:	bl	112b0 <SHA512_Init@plt>
   130c4:	add	r0, r6, r4
   130c8:	rsb	r2, r4, #32768	; 0x8000
   130cc:	mov	r1, #1
   130d0:	mov	r3, r5
   130d4:	bl	11244 <fread_unlocked@plt>
   130d8:	add	r4, r4, r0
   130dc:	cmp	r4, #32768	; 0x8000
   130e0:	beq	13130 <close_stdout@@Base+0x324>
   130e4:	cmp	r0, #0
   130e8:	ldr	r3, [r5]
   130ec:	beq	1315c <close_stdout@@Base+0x350>
   130f0:	tst	r3, #16
   130f4:	beq	130c4 <close_stdout@@Base+0x2b8>
   130f8:	cmp	r4, #0
   130fc:	bne	13148 <close_stdout@@Base+0x33c>
   13100:	mov	r1, sp
   13104:	mov	r0, r9
   13108:	bl	11328 <SHA512_Final@plt>
   1310c:	mov	r0, r6
   13110:	bl	11340 <free@plt>
   13114:	mov	r0, #0
   13118:	ldr	r2, [sp, #220]	; 0xdc
   1311c:	ldr	r3, [r8]
   13120:	cmp	r2, r3
   13124:	bne	13174 <close_stdout@@Base+0x368>
   13128:	add	sp, sp, #228	; 0xe4
   1312c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13130:	mov	r2, r4
   13134:	mov	r0, sp
   13138:	mov	r1, r6
   1313c:	mov	r4, #0
   13140:	bl	114a8 <SHA512_Update@plt>
   13144:	b	130c4 <close_stdout@@Base+0x2b8>
   13148:	mov	r2, r4
   1314c:	mov	r0, sp
   13150:	mov	r1, r6
   13154:	bl	114a8 <SHA512_Update@plt>
   13158:	b	13100 <close_stdout@@Base+0x2f4>
   1315c:	tst	r3, #32
   13160:	beq	130f8 <close_stdout@@Base+0x2ec>
   13164:	mov	r0, r6
   13168:	bl	11340 <free@plt>
   1316c:	mov	r0, #1
   13170:	b	13118 <close_stdout@@Base+0x30c>
   13174:	bl	11484 <__stack_chk_fail@plt>
   13178:	andeq	r4, r1, r4, ror pc
   1317c:	andeq	r0, r0, r4, lsr r1
   13180:	ldr	r3, [pc, #244]	; 1327c <close_stdout@@Base+0x470>
   13184:	ldr	r2, [pc, #244]	; 13280 <close_stdout@@Base+0x474>
   13188:	add	r3, pc, r3
   1318c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13190:	sub	sp, sp, #228	; 0xe4
   13194:	ldr	r8, [r3, r2]
   13198:	mov	r5, r0
   1319c:	movw	r0, #32840	; 0x8048
   131a0:	mov	r9, r1
   131a4:	ldr	r3, [r8]
   131a8:	str	r3, [sp, #220]	; 0xdc
   131ac:	bl	11460 <malloc@plt>
   131b0:	subs	r6, r0, #0
   131b4:	moveq	r0, #1
   131b8:	beq	1321c <close_stdout@@Base+0x410>
   131bc:	mov	r0, sp
   131c0:	mov	r4, #0
   131c4:	bl	1125c <SHA384_Init@plt>
   131c8:	add	r0, r6, r4
   131cc:	rsb	r2, r4, #32768	; 0x8000
   131d0:	mov	r1, #1
   131d4:	mov	r3, r5
   131d8:	bl	11244 <fread_unlocked@plt>
   131dc:	add	r4, r4, r0
   131e0:	cmp	r4, #32768	; 0x8000
   131e4:	beq	13234 <close_stdout@@Base+0x428>
   131e8:	cmp	r0, #0
   131ec:	ldr	r3, [r5]
   131f0:	beq	13260 <close_stdout@@Base+0x454>
   131f4:	tst	r3, #16
   131f8:	beq	131c8 <close_stdout@@Base+0x3bc>
   131fc:	cmp	r4, #0
   13200:	bne	1324c <close_stdout@@Base+0x440>
   13204:	mov	r1, sp
   13208:	mov	r0, r9
   1320c:	bl	112d4 <SHA384_Final@plt>
   13210:	mov	r0, r6
   13214:	bl	11340 <free@plt>
   13218:	mov	r0, #0
   1321c:	ldr	r2, [sp, #220]	; 0xdc
   13220:	ldr	r3, [r8]
   13224:	cmp	r2, r3
   13228:	bne	13278 <close_stdout@@Base+0x46c>
   1322c:	add	sp, sp, #228	; 0xe4
   13230:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13234:	mov	r2, r4
   13238:	mov	r0, sp
   1323c:	mov	r1, r6
   13240:	mov	r4, #0
   13244:	bl	114a8 <SHA512_Update@plt>
   13248:	b	131c8 <close_stdout@@Base+0x3bc>
   1324c:	mov	r2, r4
   13250:	mov	r0, sp
   13254:	mov	r1, r6
   13258:	bl	114a8 <SHA512_Update@plt>
   1325c:	b	13204 <close_stdout@@Base+0x3f8>
   13260:	tst	r3, #32
   13264:	beq	131fc <close_stdout@@Base+0x3f0>
   13268:	mov	r0, r6
   1326c:	bl	11340 <free@plt>
   13270:	mov	r0, #1
   13274:	b	1321c <close_stdout@@Base+0x410>
   13278:	bl	11484 <__stack_chk_fail@plt>
   1327c:	andeq	r4, r1, r0, ror lr
   13280:	andeq	r0, r0, r4, lsr r1
   13284:	ldrb	r3, [r0]
   13288:	cmp	r3, #47	; 0x2f
   1328c:	bne	132a8 <close_stdout@@Base+0x49c>
   13290:	add	r2, r0, #1
   13294:	mov	r0, r2
   13298:	add	r2, r2, #1
   1329c:	ldrb	r3, [r0]
   132a0:	cmp	r3, #47	; 0x2f
   132a4:	beq	13294 <close_stdout@@Base+0x488>
   132a8:	cmp	r3, #0
   132ac:	bxeq	lr
   132b0:	mov	r2, r0
   132b4:	mov	r1, #0
   132b8:	cmp	r3, #47	; 0x2f
   132bc:	moveq	r1, #1
   132c0:	beq	132d0 <close_stdout@@Base+0x4c4>
   132c4:	cmp	r1, #0
   132c8:	movne	r0, r2
   132cc:	movne	r1, #0
   132d0:	ldrb	r3, [r2, #1]!
   132d4:	cmp	r3, #0
   132d8:	bne	132b8 <close_stdout@@Base+0x4ac>
   132dc:	bx	lr
   132e0:	push	{r4, lr}
   132e4:	mov	r4, r0
   132e8:	bl	11388 <strlen@plt>
   132ec:	cmp	r0, #1
   132f0:	popls	{r4, pc}
   132f4:	sub	r3, r0, #1
   132f8:	ldrb	r2, [r4, r3]
   132fc:	cmp	r2, #47	; 0x2f
   13300:	popne	{r4, pc}
   13304:	mov	r0, r3
   13308:	cmp	r0, #1
   1330c:	sub	r3, r3, #1
   13310:	beq	13324 <close_stdout@@Base+0x518>
   13314:	ldrb	r2, [r4, r3]
   13318:	cmp	r2, #47	; 0x2f
   1331c:	popne	{r4, pc}
   13320:	b	13304 <close_stdout@@Base+0x4f8>
   13324:	pop	{r4, pc}
   13328:	b	11394 <posix_fadvise64@plt>
   1332c:	cmp	r0, #0
   13330:	push	{r4, r5, r6, lr}
   13334:	mov	r6, r1
   13338:	sub	sp, sp, #16
   1333c:	beq	13360 <close_stdout@@Base+0x554>
   13340:	mov	r4, #0
   13344:	mov	r5, #0
   13348:	bl	111fc <fileno@plt>
   1334c:	str	r6, [sp, #8]
   13350:	mov	r2, r4
   13354:	mov	r3, r5
   13358:	strd	r4, [sp]
   1335c:	bl	13328 <close_stdout@@Base+0x51c>
   13360:	add	sp, sp, #16
   13364:	pop	{r4, r5, r6, pc}
   13368:	push	{r4, r5, r6, lr}
   1336c:	mov	r5, r1
   13370:	bl	113b8 <fopen64@plt>
   13374:	subs	r4, r0, #0
   13378:	beq	13388 <close_stdout@@Base+0x57c>
   1337c:	bl	111fc <fileno@plt>
   13380:	cmp	r0, #2
   13384:	bls	13390 <close_stdout@@Base+0x584>
   13388:	mov	r0, r4
   1338c:	pop	{r4, r5, r6, pc}
   13390:	bl	14c60 <close_stdout@@Base+0x1e54>
   13394:	subs	r6, r0, #0
   13398:	blt	133c4 <close_stdout@@Base+0x5b8>
   1339c:	mov	r0, r4
   133a0:	bl	15478 <close_stdout@@Base+0x266c>
   133a4:	cmp	r0, #0
   133a8:	bne	133e4 <close_stdout@@Base+0x5d8>
   133ac:	mov	r1, r5
   133b0:	mov	r0, r6
   133b4:	bl	11418 <fdopen@plt>
   133b8:	cmp	r0, #0
   133bc:	beq	133e4 <close_stdout@@Base+0x5d8>
   133c0:	pop	{r4, r5, r6, pc}
   133c4:	bl	11514 <__errno_location@plt>
   133c8:	ldr	r6, [r0]
   133cc:	mov	r5, r0
   133d0:	mov	r0, r4
   133d4:	bl	15478 <close_stdout@@Base+0x266c>
   133d8:	mov	r0, #0
   133dc:	str	r6, [r5]
   133e0:	pop	{r4, r5, r6, pc}
   133e4:	bl	11514 <__errno_location@plt>
   133e8:	ldr	r5, [r0]
   133ec:	mov	r4, r0
   133f0:	mov	r0, r6
   133f4:	bl	11424 <close@plt>
   133f8:	mov	r0, #0
   133fc:	str	r5, [r4]
   13400:	pop	{r4, r5, r6, pc}
   13404:	push	{r3, r4, r5, r6, r7, lr}
   13408:	subs	r4, r0, #0
   1340c:	ldr	r5, [pc, #172]	; 134c0 <close_stdout@@Base+0x6b4>
   13410:	add	r5, pc, r5
   13414:	beq	1349c <close_stdout@@Base+0x690>
   13418:	mov	r1, #47	; 0x2f
   1341c:	bl	112ec <strrchr@plt>
   13420:	subs	r6, r0, #0
   13424:	beq	13480 <close_stdout@@Base+0x674>
   13428:	add	r7, r6, #1
   1342c:	rsb	r3, r4, r7
   13430:	cmp	r3, #6
   13434:	ble	13480 <close_stdout@@Base+0x674>
   13438:	ldr	r1, [pc, #132]	; 134c4 <close_stdout@@Base+0x6b8>
   1343c:	sub	r0, r6, #6
   13440:	mov	r2, #7
   13444:	add	r1, pc, r1
   13448:	bl	114d8 <strncmp@plt>
   1344c:	cmp	r0, #0
   13450:	bne	13480 <close_stdout@@Base+0x674>
   13454:	ldr	r1, [pc, #108]	; 134c8 <close_stdout@@Base+0x6bc>
   13458:	mov	r0, r7
   1345c:	mov	r2, #3
   13460:	add	r1, pc, r1
   13464:	bl	114d8 <strncmp@plt>
   13468:	cmp	r0, #0
   1346c:	movne	r4, r7
   13470:	ldreq	r3, [pc, #84]	; 134cc <close_stdout@@Base+0x6c0>
   13474:	addeq	r4, r6, #4
   13478:	ldreq	r3, [r5, r3]
   1347c:	streq	r4, [r3]
   13480:	ldr	r2, [pc, #72]	; 134d0 <close_stdout@@Base+0x6c4>
   13484:	ldr	r3, [pc, #72]	; 134d4 <close_stdout@@Base+0x6c8>
   13488:	ldr	r2, [r5, r2]
   1348c:	str	r4, [r2]
   13490:	ldr	r3, [r5, r3]
   13494:	str	r4, [r3]
   13498:	pop	{r3, r4, r5, r6, r7, pc}
   1349c:	ldr	r3, [pc, #52]	; 134d8 <close_stdout@@Base+0x6cc>
   134a0:	mov	r1, #1
   134a4:	ldr	r0, [pc, #48]	; 134dc <close_stdout@@Base+0x6d0>
   134a8:	mov	r2, #55	; 0x37
   134ac:	ldr	r3, [r5, r3]
   134b0:	add	r0, pc, r0
   134b4:	ldr	r3, [r3]
   134b8:	bl	11430 <fwrite@plt>
   134bc:	bl	11208 <abort@plt>
   134c0:	andeq	r4, r1, r8, ror #23
   134c4:	andeq	r3, r0, ip, ror lr
   134c8:	andeq	r3, r0, r8, ror #28
   134cc:	andeq	r0, r0, r4, asr #2
   134d0:	andeq	r0, r0, r4, asr r1
   134d4:	andeq	r0, r0, ip, lsr r1
   134d8:	andeq	r0, r0, r0, asr r1
   134dc:	ldrdeq	r3, [r0], -r8
   134e0:	push	{r3, lr}
   134e4:	mov	r3, r0
   134e8:	mov	r2, #0
   134ec:	cmp	r1, #8
   134f0:	str	r2, [r3], #4
   134f4:	add	r3, r3, #4
   134f8:	str	r2, [r0, #4]
   134fc:	str	r2, [r3], #4
   13500:	str	r2, [r3], #4
   13504:	str	r2, [r3], #4
   13508:	str	r2, [r3], #4
   1350c:	str	r2, [r3], #4
   13510:	str	r2, [r3], #4
   13514:	str	r2, [r3], #4
   13518:	str	r2, [r3], #4
   1351c:	str	r2, [r3], #4
   13520:	str	r2, [r3]
   13524:	beq	13530 <close_stdout@@Base+0x724>
   13528:	str	r1, [r0]
   1352c:	pop	{r3, pc}
   13530:	bl	11208 <abort@plt>
   13534:	push	{r4, r5, r6, lr}
   13538:	mov	r4, r0
   1353c:	mov	r6, r1
   13540:	mov	r0, #0
   13544:	mov	r1, r4
   13548:	mov	r2, #5
   1354c:	bl	11358 <dcgettext@plt>
   13550:	cmp	r0, r4
   13554:	mov	r5, r0
   13558:	beq	13560 <close_stdout@@Base+0x754>
   1355c:	pop	{r4, r5, r6, pc}
   13560:	bl	15814 <close_stdout@@Base+0x2a08>
   13564:	ldrb	r3, [r0]
   13568:	bic	r3, r3, #32
   1356c:	cmp	r3, #85	; 0x55
   13570:	bne	135e4 <close_stdout@@Base+0x7d8>
   13574:	ldrb	r3, [r0, #1]
   13578:	bic	r3, r3, #32
   1357c:	cmp	r3, #84	; 0x54
   13580:	bne	135d0 <close_stdout@@Base+0x7c4>
   13584:	ldrb	r3, [r0, #2]
   13588:	bic	r3, r3, #32
   1358c:	cmp	r3, #70	; 0x46
   13590:	bne	135d0 <close_stdout@@Base+0x7c4>
   13594:	ldrb	r3, [r0, #3]
   13598:	cmp	r3, #45	; 0x2d
   1359c:	bne	135d0 <close_stdout@@Base+0x7c4>
   135a0:	ldrb	r3, [r0, #4]
   135a4:	cmp	r3, #56	; 0x38
   135a8:	bne	135d0 <close_stdout@@Base+0x7c4>
   135ac:	ldrb	r3, [r0, #5]
   135b0:	cmp	r3, #0
   135b4:	bne	135d0 <close_stdout@@Base+0x7c4>
   135b8:	ldrb	r3, [r5]
   135bc:	cmp	r3, #96	; 0x60
   135c0:	beq	1365c <close_stdout@@Base+0x850>
   135c4:	ldr	r0, [pc, #180]	; 13680 <close_stdout@@Base+0x874>
   135c8:	add	r0, pc, r0
   135cc:	pop	{r4, r5, r6, pc}
   135d0:	cmp	r6, #7
   135d4:	beq	13668 <close_stdout@@Base+0x85c>
   135d8:	ldr	r0, [pc, #164]	; 13684 <close_stdout@@Base+0x878>
   135dc:	add	r0, pc, r0
   135e0:	pop	{r4, r5, r6, pc}
   135e4:	cmp	r3, #71	; 0x47
   135e8:	bne	135d0 <close_stdout@@Base+0x7c4>
   135ec:	ldrb	r3, [r0, #1]
   135f0:	bic	r3, r3, #32
   135f4:	cmp	r3, #66	; 0x42
   135f8:	bne	135d0 <close_stdout@@Base+0x7c4>
   135fc:	ldrb	r3, [r0, #2]
   13600:	cmp	r3, #49	; 0x31
   13604:	bne	135d0 <close_stdout@@Base+0x7c4>
   13608:	ldrb	r3, [r0, #3]
   1360c:	cmp	r3, #56	; 0x38
   13610:	bne	135d0 <close_stdout@@Base+0x7c4>
   13614:	ldrb	r3, [r0, #4]
   13618:	cmp	r3, #48	; 0x30
   1361c:	bne	135d0 <close_stdout@@Base+0x7c4>
   13620:	ldrb	r3, [r0, #5]
   13624:	cmp	r3, #51	; 0x33
   13628:	bne	135d0 <close_stdout@@Base+0x7c4>
   1362c:	ldrb	r3, [r0, #6]
   13630:	cmp	r3, #48	; 0x30
   13634:	bne	135d0 <close_stdout@@Base+0x7c4>
   13638:	ldrb	r3, [r0, #7]
   1363c:	cmp	r3, #0
   13640:	bne	135d0 <close_stdout@@Base+0x7c4>
   13644:	ldrb	r3, [r5]
   13648:	cmp	r3, #96	; 0x60
   1364c:	beq	13674 <close_stdout@@Base+0x868>
   13650:	ldr	r0, [pc, #48]	; 13688 <close_stdout@@Base+0x87c>
   13654:	add	r0, pc, r0
   13658:	pop	{r4, r5, r6, pc}
   1365c:	ldr	r0, [pc, #40]	; 1368c <close_stdout@@Base+0x880>
   13660:	add	r0, pc, r0
   13664:	pop	{r4, r5, r6, pc}
   13668:	ldr	r0, [pc, #32]	; 13690 <close_stdout@@Base+0x884>
   1366c:	add	r0, pc, r0
   13670:	pop	{r4, r5, r6, pc}
   13674:	ldr	r0, [pc, #24]	; 13694 <close_stdout@@Base+0x888>
   13678:	add	r0, pc, r0
   1367c:	pop	{r4, r5, r6, pc}
   13680:	andeq	r3, r0, r4, lsr #26
   13684:	andeq	r3, r0, r8, lsl sp
   13688:	muleq	r0, ip, ip
   1368c:	andeq	r3, r0, r0, lsr #25
   13690:	andeq	r3, r0, ip, lsl #25
   13694:	andeq	r3, r0, r4, lsl #25
   13698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1369c:	sub	sp, sp, #124	; 0x7c
   136a0:	ldr	ip, [pc, #3304]	; 14390 <close_stdout@@Base+0x1584>
   136a4:	mov	sl, r1
   136a8:	str	r0, [sp, #40]	; 0x28
   136ac:	mov	r8, r3
   136b0:	ldr	r0, [pc, #3292]	; 14394 <close_stdout@@Base+0x1588>
   136b4:	add	ip, pc, ip
   136b8:	str	r2, [sp, #32]
   136bc:	ldr	r1, [sp, #164]	; 0xa4
   136c0:	mov	r3, ip
   136c4:	ldr	r0, [ip, r0]
   136c8:	ldr	r2, [sp, #172]	; 0xac
   136cc:	ubfx	r1, r1, #1, #1
   136d0:	str	r1, [sp, #36]	; 0x24
   136d4:	str	r0, [sp, #56]	; 0x38
   136d8:	ldr	r0, [sp, #168]	; 0xa8
   136dc:	ldr	r1, [sp, #176]	; 0xb0
   136e0:	str	r2, [sp, #72]	; 0x48
   136e4:	str	r0, [sp, #48]	; 0x30
   136e8:	ldr	r0, [sp, #56]	; 0x38
   136ec:	str	r1, [sp, #68]	; 0x44
   136f0:	ldr	r3, [r0]
   136f4:	str	r3, [sp, #116]	; 0x74
   136f8:	bl	11250 <__ctype_get_mb_cur_max@plt>
   136fc:	ldr	r2, [sp, #160]	; 0xa0
   13700:	str	r0, [sp, #64]	; 0x40
   13704:	cmp	r2, #8
   13708:	addls	pc, pc, r2, lsl #2
   1370c:	b	1426c <close_stdout@@Base+0x1460>
   13710:	b	13734 <close_stdout@@Base+0x928>
   13714:	b	13f84 <close_stdout@@Base+0x1178>
   13718:	b	13fb4 <close_stdout@@Base+0x11a8>
   1371c:	b	13e64 <close_stdout@@Base+0x1058>
   13720:	b	13ea4 <close_stdout@@Base+0x1098>
   13724:	b	13ed0 <close_stdout@@Base+0x10c4>
   13728:	b	13ef0 <close_stdout@@Base+0x10e4>
   1372c:	b	13ef0 <close_stdout@@Base+0x10e4>
   13730:	b	13ef0 <close_stdout@@Base+0x10e4>
   13734:	mov	r2, #0
   13738:	str	r2, [sp, #36]	; 0x24
   1373c:	mov	r9, r2
   13740:	str	r2, [sp, #24]
   13744:	str	r2, [sp, #28]
   13748:	str	r2, [sp, #52]	; 0x34
   1374c:	ldr	r0, [sp, #36]	; 0x24
   13750:	mov	fp, #0
   13754:	ldr	r1, [sp, #24]
   13758:	eor	r2, r0, #1
   1375c:	eor	r3, r1, #1
   13760:	and	r3, r2, r3
   13764:	and	r2, r1, r0
   13768:	str	r3, [sp, #44]	; 0x2c
   1376c:	str	r2, [sp, #76]	; 0x4c
   13770:	cmn	r8, #1
   13774:	beq	13af4 <close_stdout@@Base+0xce8>
   13778:	subs	r3, fp, r8
   1377c:	movne	r3, #1
   13780:	cmp	r3, #0
   13784:	beq	13b0c <close_stdout@@Base+0xd00>
   13788:	ldr	r3, [sp, #28]
   1378c:	ldr	r0, [sp, #24]
   13790:	adds	r7, r3, #0
   13794:	movne	r7, #1
   13798:	ands	r6, r7, r0
   1379c:	bne	13ff8 <close_stdout@@Base+0x11ec>
   137a0:	ldr	r1, [sp, #32]
   137a4:	add	r5, r1, fp
   137a8:	ldrb	r4, [r5]
   137ac:	cmp	r4, #126	; 0x7e
   137b0:	addls	pc, pc, r4, lsl #2
   137b4:	b	13d78 <close_stdout@@Base+0xf6c>
   137b8:	b	13c84 <close_stdout@@Base+0xe78>
   137bc:	b	13d78 <close_stdout@@Base+0xf6c>
   137c0:	b	13d78 <close_stdout@@Base+0xf6c>
   137c4:	b	13d78 <close_stdout@@Base+0xf6c>
   137c8:	b	13d78 <close_stdout@@Base+0xf6c>
   137cc:	b	13d78 <close_stdout@@Base+0xf6c>
   137d0:	b	13d78 <close_stdout@@Base+0xf6c>
   137d4:	b	13c6c <close_stdout@@Base+0xe60>
   137d8:	b	13c54 <close_stdout@@Base+0xe48>
   137dc:	b	13c7c <close_stdout@@Base+0xe70>
   137e0:	b	13c74 <close_stdout@@Base+0xe68>
   137e4:	b	13c64 <close_stdout@@Base+0xe58>
   137e8:	b	13c5c <close_stdout@@Base+0xe50>
   137ec:	b	13c20 <close_stdout@@Base+0xe14>
   137f0:	b	13d78 <close_stdout@@Base+0xf6c>
   137f4:	b	13d78 <close_stdout@@Base+0xf6c>
   137f8:	b	13d78 <close_stdout@@Base+0xf6c>
   137fc:	b	13d78 <close_stdout@@Base+0xf6c>
   13800:	b	13d78 <close_stdout@@Base+0xf6c>
   13804:	b	13d78 <close_stdout@@Base+0xf6c>
   13808:	b	13d78 <close_stdout@@Base+0xf6c>
   1380c:	b	13d78 <close_stdout@@Base+0xf6c>
   13810:	b	13d78 <close_stdout@@Base+0xf6c>
   13814:	b	13d78 <close_stdout@@Base+0xf6c>
   13818:	b	13d78 <close_stdout@@Base+0xf6c>
   1381c:	b	13d78 <close_stdout@@Base+0xf6c>
   13820:	b	13d78 <close_stdout@@Base+0xf6c>
   13824:	b	13d78 <close_stdout@@Base+0xf6c>
   13828:	b	13d78 <close_stdout@@Base+0xf6c>
   1382c:	b	13d78 <close_stdout@@Base+0xf6c>
   13830:	b	13d78 <close_stdout@@Base+0xf6c>
   13834:	b	13d78 <close_stdout@@Base+0xf6c>
   13838:	b	13bac <close_stdout@@Base+0xda0>
   1383c:	b	13bac <close_stdout@@Base+0xda0>
   13840:	b	13bac <close_stdout@@Base+0xda0>
   13844:	b	13ba4 <close_stdout@@Base+0xd98>
   13848:	b	13bac <close_stdout@@Base+0xda0>
   1384c:	b	13a80 <close_stdout@@Base+0xc74>
   13850:	b	13bac <close_stdout@@Base+0xda0>
   13854:	b	13d20 <close_stdout@@Base+0xf14>
   13858:	b	13bac <close_stdout@@Base+0xda0>
   1385c:	b	13bac <close_stdout@@Base+0xda0>
   13860:	b	13bac <close_stdout@@Base+0xda0>
   13864:	b	13a80 <close_stdout@@Base+0xc74>
   13868:	b	13a80 <close_stdout@@Base+0xc74>
   1386c:	b	13a80 <close_stdout@@Base+0xc74>
   13870:	b	13a80 <close_stdout@@Base+0xc74>
   13874:	b	13a80 <close_stdout@@Base+0xc74>
   13878:	b	13a80 <close_stdout@@Base+0xc74>
   1387c:	b	13a80 <close_stdout@@Base+0xc74>
   13880:	b	13a80 <close_stdout@@Base+0xc74>
   13884:	b	13a80 <close_stdout@@Base+0xc74>
   13888:	b	13a80 <close_stdout@@Base+0xc74>
   1388c:	b	13a80 <close_stdout@@Base+0xc74>
   13890:	b	13a80 <close_stdout@@Base+0xc74>
   13894:	b	13a80 <close_stdout@@Base+0xc74>
   13898:	b	13a80 <close_stdout@@Base+0xc74>
   1389c:	b	13a80 <close_stdout@@Base+0xc74>
   138a0:	b	13a80 <close_stdout@@Base+0xc74>
   138a4:	b	13bac <close_stdout@@Base+0xda0>
   138a8:	b	13bac <close_stdout@@Base+0xda0>
   138ac:	b	13bac <close_stdout@@Base+0xda0>
   138b0:	b	13bac <close_stdout@@Base+0xda0>
   138b4:	b	139b4 <close_stdout@@Base+0xba8>
   138b8:	b	13d78 <close_stdout@@Base+0xf6c>
   138bc:	b	13a80 <close_stdout@@Base+0xc74>
   138c0:	b	13a80 <close_stdout@@Base+0xc74>
   138c4:	b	13a80 <close_stdout@@Base+0xc74>
   138c8:	b	13a80 <close_stdout@@Base+0xc74>
   138cc:	b	13a80 <close_stdout@@Base+0xc74>
   138d0:	b	13a80 <close_stdout@@Base+0xc74>
   138d4:	b	13a80 <close_stdout@@Base+0xc74>
   138d8:	b	13a80 <close_stdout@@Base+0xc74>
   138dc:	b	13a80 <close_stdout@@Base+0xc74>
   138e0:	b	13a80 <close_stdout@@Base+0xc74>
   138e4:	b	13a80 <close_stdout@@Base+0xc74>
   138e8:	b	13a80 <close_stdout@@Base+0xc74>
   138ec:	b	13a80 <close_stdout@@Base+0xc74>
   138f0:	b	13a80 <close_stdout@@Base+0xc74>
   138f4:	b	13a80 <close_stdout@@Base+0xc74>
   138f8:	b	13a80 <close_stdout@@Base+0xc74>
   138fc:	b	13a80 <close_stdout@@Base+0xc74>
   13900:	b	13a80 <close_stdout@@Base+0xc74>
   13904:	b	13a80 <close_stdout@@Base+0xc74>
   13908:	b	13a80 <close_stdout@@Base+0xc74>
   1390c:	b	13a80 <close_stdout@@Base+0xc74>
   13910:	b	13a80 <close_stdout@@Base+0xc74>
   13914:	b	13a80 <close_stdout@@Base+0xc74>
   13918:	b	13a80 <close_stdout@@Base+0xc74>
   1391c:	b	13a80 <close_stdout@@Base+0xc74>
   13920:	b	13a80 <close_stdout@@Base+0xc74>
   13924:	b	13bac <close_stdout@@Base+0xda0>
   13928:	b	13d04 <close_stdout@@Base+0xef8>
   1392c:	b	13a80 <close_stdout@@Base+0xc74>
   13930:	b	13bac <close_stdout@@Base+0xda0>
   13934:	b	13a80 <close_stdout@@Base+0xc74>
   13938:	b	13bac <close_stdout@@Base+0xda0>
   1393c:	b	13a80 <close_stdout@@Base+0xc74>
   13940:	b	13a80 <close_stdout@@Base+0xc74>
   13944:	b	13a80 <close_stdout@@Base+0xc74>
   13948:	b	13a80 <close_stdout@@Base+0xc74>
   1394c:	b	13a80 <close_stdout@@Base+0xc74>
   13950:	b	13a80 <close_stdout@@Base+0xc74>
   13954:	b	13a80 <close_stdout@@Base+0xc74>
   13958:	b	13a80 <close_stdout@@Base+0xc74>
   1395c:	b	13a80 <close_stdout@@Base+0xc74>
   13960:	b	13a80 <close_stdout@@Base+0xc74>
   13964:	b	13a80 <close_stdout@@Base+0xc74>
   13968:	b	13a80 <close_stdout@@Base+0xc74>
   1396c:	b	13a80 <close_stdout@@Base+0xc74>
   13970:	b	13a80 <close_stdout@@Base+0xc74>
   13974:	b	13a80 <close_stdout@@Base+0xc74>
   13978:	b	13a80 <close_stdout@@Base+0xc74>
   1397c:	b	13a80 <close_stdout@@Base+0xc74>
   13980:	b	13a80 <close_stdout@@Base+0xc74>
   13984:	b	13a80 <close_stdout@@Base+0xc74>
   13988:	b	13a80 <close_stdout@@Base+0xc74>
   1398c:	b	13a80 <close_stdout@@Base+0xc74>
   13990:	b	13a80 <close_stdout@@Base+0xc74>
   13994:	b	13a80 <close_stdout@@Base+0xc74>
   13998:	b	13a80 <close_stdout@@Base+0xc74>
   1399c:	b	13a80 <close_stdout@@Base+0xc74>
   139a0:	b	13a80 <close_stdout@@Base+0xc74>
   139a4:	b	13b8c <close_stdout@@Base+0xd80>
   139a8:	b	13bac <close_stdout@@Base+0xda0>
   139ac:	b	13b8c <close_stdout@@Base+0xd80>
   139b0:	b	13ba4 <close_stdout@@Base+0xd98>
   139b4:	ldr	r3, [sp, #160]	; 0xa0
   139b8:	cmp	r3, #2
   139bc:	beq	14248 <close_stdout@@Base+0x143c>
   139c0:	cmp	r3, #3
   139c4:	bne	13a80 <close_stdout@@Base+0xc74>
   139c8:	ldr	r1, [sp, #164]	; 0xa4
   139cc:	tst	r1, #4
   139d0:	beq	13a80 <close_stdout@@Base+0xc74>
   139d4:	add	r3, fp, #2
   139d8:	cmp	r8, r3
   139dc:	bls	13a80 <close_stdout@@Base+0xc74>
   139e0:	ldrb	r2, [r5, #1]
   139e4:	mov	r1, #1
   139e8:	cmp	r2, #63	; 0x3f
   139ec:	bne	13a80 <close_stdout@@Base+0xc74>
   139f0:	ldr	r0, [sp, #32]
   139f4:	ldrb	ip, [r0, r3]
   139f8:	sub	r0, ip, #33	; 0x21
   139fc:	uxtb	r0, r0
   13a00:	cmp	r0, #29
   13a04:	bhi	13a80 <close_stdout@@Base+0xc74>
   13a08:	lsl	r1, r1, r0
   13a0c:	movw	r0, #20929	; 0x51c1
   13a10:	movt	r0, #14336	; 0x3800
   13a14:	and	r0, r1, r0
   13a18:	cmp	r0, #0
   13a1c:	beq	13a80 <close_stdout@@Base+0xc74>
   13a20:	ldr	r1, [sp, #36]	; 0x24
   13a24:	cmp	r1, #0
   13a28:	bne	13bc8 <close_stdout@@Base+0xdbc>
   13a2c:	cmp	r9, sl
   13a30:	mov	r4, ip
   13a34:	mov	fp, r3
   13a38:	ldrcc	r0, [sp, #40]	; 0x28
   13a3c:	strbcc	r2, [r0, r9]
   13a40:	add	r2, r9, #1
   13a44:	cmp	sl, r2
   13a48:	ldrhi	r0, [sp, #40]	; 0x28
   13a4c:	movhi	r1, #34	; 0x22
   13a50:	strbhi	r1, [r0, r2]
   13a54:	add	r2, r9, #2
   13a58:	cmp	sl, r2
   13a5c:	ldrhi	r0, [sp, #40]	; 0x28
   13a60:	movhi	r1, #34	; 0x22
   13a64:	strbhi	r1, [r0, r2]
   13a68:	add	r2, r9, #3
   13a6c:	cmp	sl, r2
   13a70:	add	r9, r9, #4
   13a74:	ldrhi	r0, [sp, #40]	; 0x28
   13a78:	movhi	r1, #63	; 0x3f
   13a7c:	strbhi	r1, [r0, r2]
   13a80:	ldr	r0, [sp, #44]	; 0x2c
   13a84:	cmp	r0, #0
   13a88:	bne	13ab0 <close_stdout@@Base+0xca4>
   13a8c:	ldr	r1, [sp, #48]	; 0x30
   13a90:	cmp	r1, #0
   13a94:	beq	13ab0 <close_stdout@@Base+0xca4>
   13a98:	ubfx	r2, r4, #5, #8
   13a9c:	and	r3, r4, #31
   13aa0:	ldr	r2, [r1, r2, lsl #2]
   13aa4:	lsr	r3, r2, r3
   13aa8:	tst	r3, #1
   13aac:	bne	13ab8 <close_stdout@@Base+0xcac>
   13ab0:	cmp	r6, #0
   13ab4:	beq	13ad8 <close_stdout@@Base+0xccc>
   13ab8:	ldr	r2, [sp, #36]	; 0x24
   13abc:	cmp	r2, #0
   13ac0:	bne	13bc8 <close_stdout@@Base+0xdbc>
   13ac4:	cmp	r9, sl
   13ac8:	ldrcc	r0, [sp, #40]	; 0x28
   13acc:	movcc	r3, #92	; 0x5c
   13ad0:	strbcc	r3, [r0, r9]
   13ad4:	add	r9, r9, #1
   13ad8:	add	fp, fp, #1
   13adc:	cmp	r9, sl
   13ae0:	ldrcc	r1, [sp, #40]	; 0x28
   13ae4:	strbcc	r4, [r1, r9]
   13ae8:	cmn	r8, #1
   13aec:	add	r9, r9, #1
   13af0:	bne	13778 <close_stdout@@Base+0x96c>
   13af4:	ldr	r2, [sp, #32]
   13af8:	ldrb	r3, [r2, fp]
   13afc:	adds	r3, r3, #0
   13b00:	movne	r3, #1
   13b04:	cmp	r3, #0
   13b08:	bne	13788 <close_stdout@@Base+0x97c>
   13b0c:	ldr	r3, [sp, #160]	; 0xa0
   13b10:	cmp	r9, #0
   13b14:	cmpeq	r3, #2
   13b18:	bne	13b28 <close_stdout@@Base+0xd1c>
   13b1c:	ldr	r0, [sp, #36]	; 0x24
   13b20:	cmp	r0, #0
   13b24:	bne	13bc8 <close_stdout@@Base+0xdbc>
   13b28:	ldr	r1, [sp, #36]	; 0x24
   13b2c:	ldr	r2, [sp, #52]	; 0x34
   13b30:	eor	r3, r1, #1
   13b34:	cmp	r2, #0
   13b38:	moveq	r3, #0
   13b3c:	andne	r3, r3, #1
   13b40:	cmp	r3, #0
   13b44:	beq	13b70 <close_stdout@@Base+0xd64>
   13b48:	ldrb	r3, [r2]
   13b4c:	cmp	r3, #0
   13b50:	beq	13b70 <close_stdout@@Base+0xd64>
   13b54:	ldr	r1, [sp, #40]	; 0x28
   13b58:	cmp	sl, r9
   13b5c:	strbhi	r3, [r1, r9]
   13b60:	ldrb	r3, [r2, #1]!
   13b64:	add	r9, r9, #1
   13b68:	cmp	r3, #0
   13b6c:	bne	13b58 <close_stdout@@Base+0xd4c>
   13b70:	cmp	r9, sl
   13b74:	movcs	r0, r9
   13b78:	ldrcc	r1, [sp, #40]	; 0x28
   13b7c:	movcc	r3, #0
   13b80:	movcc	r0, r9
   13b84:	strbcc	r3, [r1, r9]
   13b88:	b	13c04 <close_stdout@@Base+0xdf8>
   13b8c:	cmn	r8, #1
   13b90:	beq	14258 <close_stdout@@Base+0x144c>
   13b94:	subs	r3, r8, #1
   13b98:	movne	r3, #1
   13b9c:	cmp	r3, #0
   13ba0:	bne	13a80 <close_stdout@@Base+0xc74>
   13ba4:	cmp	fp, #0
   13ba8:	bne	13a80 <close_stdout@@Base+0xc74>
   13bac:	ldr	r3, [sp, #36]	; 0x24
   13bb0:	ldr	r0, [sp, #160]	; 0xa0
   13bb4:	cmp	r0, #2
   13bb8:	movne	r3, #0
   13bbc:	andeq	r3, r3, #1
   13bc0:	cmp	r3, #0
   13bc4:	beq	13a80 <close_stdout@@Base+0xc74>
   13bc8:	ldr	r2, [sp, #164]	; 0xa4
   13bcc:	mov	ip, #0
   13bd0:	ldr	r0, [sp, #160]	; 0xa0
   13bd4:	bic	r3, r2, #2
   13bd8:	ldr	r1, [sp, #72]	; 0x48
   13bdc:	ldr	r2, [sp, #68]	; 0x44
   13be0:	stm	sp, {r0, r3}
   13be4:	mov	r3, r8
   13be8:	str	r1, [sp, #12]
   13bec:	mov	r1, sl
   13bf0:	str	r2, [sp, #16]
   13bf4:	ldr	r0, [sp, #40]	; 0x28
   13bf8:	ldr	r2, [sp, #32]
   13bfc:	str	ip, [sp, #8]
   13c00:	bl	13698 <close_stdout@@Base+0x88c>
   13c04:	ldr	r1, [sp, #56]	; 0x38
   13c08:	ldr	r2, [sp, #116]	; 0x74
   13c0c:	ldr	r3, [r1]
   13c10:	cmp	r2, r3
   13c14:	bne	14348 <close_stdout@@Base+0x153c>
   13c18:	add	sp, sp, #124	; 0x7c
   13c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c20:	mov	r3, #114	; 0x72
   13c24:	ldr	r2, [sp, #36]	; 0x24
   13c28:	ldr	r0, [sp, #160]	; 0xa0
   13c2c:	cmp	r0, #2
   13c30:	movne	r2, #0
   13c34:	andeq	r2, r2, #1
   13c38:	cmp	r2, #0
   13c3c:	bne	13bc8 <close_stdout@@Base+0xdbc>
   13c40:	ldr	r1, [sp, #24]
   13c44:	cmp	r1, #0
   13c48:	beq	13a80 <close_stdout@@Base+0xc74>
   13c4c:	mov	r4, r3
   13c50:	b	13ab8 <close_stdout@@Base+0xcac>
   13c54:	mov	r3, #98	; 0x62
   13c58:	b	13c40 <close_stdout@@Base+0xe34>
   13c5c:	mov	r3, #102	; 0x66
   13c60:	b	13c40 <close_stdout@@Base+0xe34>
   13c64:	mov	r3, #118	; 0x76
   13c68:	b	13c40 <close_stdout@@Base+0xe34>
   13c6c:	mov	r3, #97	; 0x61
   13c70:	b	13c40 <close_stdout@@Base+0xe34>
   13c74:	mov	r3, #110	; 0x6e
   13c78:	b	13c24 <close_stdout@@Base+0xe18>
   13c7c:	mov	r3, #116	; 0x74
   13c80:	b	13c24 <close_stdout@@Base+0xe18>
   13c84:	ldr	r2, [sp, #24]
   13c88:	cmp	r2, #0
   13c8c:	beq	14234 <close_stdout@@Base+0x1428>
   13c90:	ldr	r3, [sp, #36]	; 0x24
   13c94:	cmp	r3, #0
   13c98:	bne	13bc8 <close_stdout@@Base+0xdbc>
   13c9c:	cmp	r9, sl
   13ca0:	add	r2, r9, #1
   13ca4:	ldrcc	r0, [sp, #40]	; 0x28
   13ca8:	movcc	r3, #92	; 0x5c
   13cac:	strbcc	r3, [r0, r9]
   13cb0:	add	r3, fp, #1
   13cb4:	cmp	r8, r3
   13cb8:	bls	13cf8 <close_stdout@@Base+0xeec>
   13cbc:	ldr	r1, [sp, #32]
   13cc0:	ldrb	r3, [r1, r3]
   13cc4:	sub	r3, r3, #48	; 0x30
   13cc8:	cmp	r3, #9
   13ccc:	bhi	13cf8 <close_stdout@@Base+0xeec>
   13cd0:	cmp	sl, r2
   13cd4:	ldrhi	r0, [sp, #40]	; 0x28
   13cd8:	movhi	r3, #48	; 0x30
   13cdc:	strbhi	r3, [r0, r2]
   13ce0:	add	r3, r9, #2
   13ce4:	cmp	sl, r3
   13ce8:	ldrhi	r1, [sp, #40]	; 0x28
   13cec:	movhi	r2, #48	; 0x30
   13cf0:	strbhi	r2, [r1, r3]
   13cf4:	add	r2, r9, #3
   13cf8:	mov	r9, r2
   13cfc:	mov	r4, #48	; 0x30
   13d00:	b	13a8c <close_stdout@@Base+0xc80>
   13d04:	ldr	r1, [sp, #76]	; 0x4c
   13d08:	cmp	r1, #0
   13d0c:	beq	13d18 <close_stdout@@Base+0xf0c>
   13d10:	cmp	r7, #0
   13d14:	bne	13ad8 <close_stdout@@Base+0xccc>
   13d18:	mov	r3, r4
   13d1c:	b	13c24 <close_stdout@@Base+0xe18>
   13d20:	ldr	r1, [sp, #160]	; 0xa0
   13d24:	cmp	r1, #2
   13d28:	bne	13a80 <close_stdout@@Base+0xc74>
   13d2c:	ldr	r2, [sp, #36]	; 0x24
   13d30:	cmp	r2, #0
   13d34:	bne	13bc8 <close_stdout@@Base+0xdbc>
   13d38:	cmp	r9, sl
   13d3c:	ldrcc	r0, [sp, #40]	; 0x28
   13d40:	movcc	r3, #39	; 0x27
   13d44:	strbcc	r3, [r0, r9]
   13d48:	add	r3, r9, #1
   13d4c:	cmp	sl, r3
   13d50:	ldrhi	r1, [sp, #40]	; 0x28
   13d54:	movhi	r2, #92	; 0x5c
   13d58:	strbhi	r2, [r1, r3]
   13d5c:	add	r3, r9, #2
   13d60:	cmp	sl, r3
   13d64:	add	r9, r9, #3
   13d68:	ldrhi	r0, [sp, #40]	; 0x28
   13d6c:	movhi	r2, #39	; 0x27
   13d70:	strbhi	r2, [r0, r3]
   13d74:	b	13a80 <close_stdout@@Base+0xc74>
   13d78:	ldr	r1, [sp, #64]	; 0x40
   13d7c:	cmp	r1, #1
   13d80:	bne	14078 <close_stdout@@Base+0x126c>
   13d84:	bl	11448 <__ctype_b_loc@plt>
   13d88:	ldr	r2, [sp, #64]	; 0x40
   13d8c:	sxth	r3, r4
   13d90:	str	r2, [sp, #60]	; 0x3c
   13d94:	lsl	r3, r3, #1
   13d98:	ldr	r2, [r0]
   13d9c:	ldrh	r2, [r2, r3]
   13da0:	eor	r2, r2, #16384	; 0x4000
   13da4:	ubfx	r2, r2, #14, #1
   13da8:	ldr	r1, [sp, #24]
   13dac:	ands	r2, r2, r1
   13db0:	beq	13a80 <close_stdout@@Base+0xc74>
   13db4:	ldr	r3, [sp, #60]	; 0x3c
   13db8:	mov	r0, #92	; 0x5c
   13dbc:	ldr	r7, [sp, #36]	; 0x24
   13dc0:	add	r1, r3, fp
   13dc4:	str	r8, [sp, #60]	; 0x3c
   13dc8:	ldr	r3, [sp, #40]	; 0x28
   13dcc:	b	13e30 <close_stdout@@Base+0x1024>
   13dd0:	cmp	r7, #0
   13dd4:	bne	14270 <close_stdout@@Base+0x1464>
   13dd8:	add	ip, r9, #1
   13ddc:	cmp	r9, sl
   13de0:	strbcc	r0, [r3, r9]
   13de4:	cmp	sl, ip
   13de8:	lsrhi	r8, r4, #6
   13dec:	addhi	r8, r8, #48	; 0x30
   13df0:	strbhi	r8, [r3, ip]
   13df4:	add	ip, r9, #2
   13df8:	add	r9, r9, #3
   13dfc:	cmp	sl, ip
   13e00:	ubfxhi	r8, r4, #3, #3
   13e04:	and	r4, r4, #7
   13e08:	add	r4, r4, #48	; 0x30
   13e0c:	addhi	r8, r8, #48	; 0x30
   13e10:	strbhi	r8, [r3, ip]
   13e14:	add	fp, fp, #1
   13e18:	cmp	r1, fp
   13e1c:	bls	13e5c <close_stdout@@Base+0x1050>
   13e20:	cmp	r9, sl
   13e24:	strbcc	r4, [r3, r9]
   13e28:	ldrb	r4, [r5, #1]!
   13e2c:	add	r9, r9, #1
   13e30:	cmp	r2, #0
   13e34:	bne	13dd0 <close_stdout@@Base+0xfc4>
   13e38:	cmp	r6, #0
   13e3c:	beq	13e14 <close_stdout@@Base+0x1008>
   13e40:	add	fp, fp, #1
   13e44:	cmp	r9, sl
   13e48:	strbcc	r0, [r3, r9]
   13e4c:	cmp	r1, fp
   13e50:	add	r9, r9, #1
   13e54:	mov	r6, #0
   13e58:	bhi	13e20 <close_stdout@@Base+0x1014>
   13e5c:	ldr	r8, [sp, #60]	; 0x3c
   13e60:	b	13adc <close_stdout@@Base+0xcd0>
   13e64:	ldr	r3, [sp, #36]	; 0x24
   13e68:	cmp	r3, #0
   13e6c:	bne	14370 <close_stdout@@Base+0x1564>
   13e70:	cmp	sl, #0
   13e74:	beq	14288 <close_stdout@@Base+0x147c>
   13e78:	ldr	r1, [sp, #40]	; 0x28
   13e7c:	mov	r0, #1
   13e80:	ldr	r2, [pc, #1296]	; 14398 <close_stdout@@Base+0x158c>
   13e84:	mov	r3, #34	; 0x22
   13e88:	str	r0, [sp, #24]
   13e8c:	mov	r9, r0
   13e90:	add	r2, pc, r2
   13e94:	str	r0, [sp, #28]
   13e98:	strb	r3, [r1]
   13e9c:	str	r2, [sp, #52]	; 0x34
   13ea0:	b	1374c <close_stdout@@Base+0x940>
   13ea4:	ldr	r3, [pc, #1264]	; 1439c <close_stdout@@Base+0x1590>
   13ea8:	mov	r2, #1
   13eac:	mov	r0, #3
   13eb0:	str	r2, [sp, #36]	; 0x24
   13eb4:	add	r3, pc, r3
   13eb8:	str	r2, [sp, #24]
   13ebc:	str	r3, [sp, #52]	; 0x34
   13ec0:	mov	r9, #0
   13ec4:	str	r2, [sp, #28]
   13ec8:	str	r0, [sp, #160]	; 0xa0
   13ecc:	b	1374c <close_stdout@@Base+0x940>
   13ed0:	mov	r0, #0
   13ed4:	mov	r1, #1
   13ed8:	str	r0, [sp, #36]	; 0x24
   13edc:	mov	r9, r0
   13ee0:	str	r1, [sp, #24]
   13ee4:	str	r0, [sp, #28]
   13ee8:	str	r0, [sp, #52]	; 0x34
   13eec:	b	1374c <close_stdout@@Base+0x940>
   13ef0:	ldr	r3, [sp, #160]	; 0xa0
   13ef4:	cmp	r3, #8
   13ef8:	beq	13f24 <close_stdout@@Base+0x1118>
   13efc:	ldr	r0, [pc, #1180]	; 143a0 <close_stdout@@Base+0x1594>
   13f00:	mov	r1, r3
   13f04:	add	r0, pc, r0
   13f08:	bl	13534 <close_stdout@@Base+0x728>
   13f0c:	ldr	r1, [sp, #160]	; 0xa0
   13f10:	str	r0, [sp, #72]	; 0x48
   13f14:	ldr	r0, [pc, #1160]	; 143a4 <close_stdout@@Base+0x1598>
   13f18:	add	r0, pc, r0
   13f1c:	bl	13534 <close_stdout@@Base+0x728>
   13f20:	str	r0, [sp, #68]	; 0x44
   13f24:	ldr	r0, [sp, #36]	; 0x24
   13f28:	cmp	r0, #0
   13f2c:	movne	r9, #0
   13f30:	bne	13f68 <close_stdout@@Base+0x115c>
   13f34:	ldr	r1, [sp, #72]	; 0x48
   13f38:	ldrb	r3, [r1]
   13f3c:	cmp	r3, #0
   13f40:	beq	14340 <close_stdout@@Base+0x1534>
   13f44:	mov	r2, r1
   13f48:	ldr	r1, [sp, #40]	; 0x28
   13f4c:	mov	r9, r0
   13f50:	cmp	r9, sl
   13f54:	strbcc	r3, [r1, r9]
   13f58:	ldrb	r3, [r2, #1]!
   13f5c:	add	r9, r9, #1
   13f60:	cmp	r3, #0
   13f64:	bne	13f50 <close_stdout@@Base+0x1144>
   13f68:	ldr	r0, [sp, #68]	; 0x44
   13f6c:	str	r0, [sp, #52]	; 0x34
   13f70:	bl	11388 <strlen@plt>
   13f74:	mov	r2, #1
   13f78:	str	r2, [sp, #24]
   13f7c:	str	r0, [sp, #28]
   13f80:	b	1374c <close_stdout@@Base+0x940>
   13f84:	ldr	r3, [pc, #1052]	; 143a8 <close_stdout@@Base+0x159c>
   13f88:	mov	r2, #0
   13f8c:	mov	r1, #1
   13f90:	mov	r0, #2
   13f94:	add	r3, pc, r3
   13f98:	str	r1, [sp, #36]	; 0x24
   13f9c:	str	r2, [sp, #24]
   13fa0:	mov	r9, r2
   13fa4:	str	r1, [sp, #28]
   13fa8:	str	r3, [sp, #52]	; 0x34
   13fac:	str	r0, [sp, #160]	; 0xa0
   13fb0:	b	1374c <close_stdout@@Base+0x940>
   13fb4:	ldr	r3, [sp, #36]	; 0x24
   13fb8:	cmp	r3, #0
   13fbc:	bne	1434c <close_stdout@@Base+0x1540>
   13fc0:	cmp	sl, #0
   13fc4:	beq	142a8 <close_stdout@@Base+0x149c>
   13fc8:	ldr	r1, [sp, #40]	; 0x28
   13fcc:	mov	r3, #39	; 0x27
   13fd0:	ldr	r2, [sp, #36]	; 0x24
   13fd4:	mov	r0, #1
   13fd8:	mov	r9, r0
   13fdc:	str	r0, [sp, #28]
   13fe0:	strb	r3, [r1]
   13fe4:	ldr	r3, [pc, #960]	; 143ac <close_stdout@@Base+0x15a0>
   13fe8:	str	r2, [sp, #24]
   13fec:	add	r3, pc, r3
   13ff0:	str	r3, [sp, #52]	; 0x34
   13ff4:	b	1374c <close_stdout@@Base+0x940>
   13ff8:	ldr	r2, [sp, #28]
   13ffc:	cmp	r2, #1
   14000:	add	r4, fp, r2
   14004:	movls	r3, #0
   14008:	movhi	r3, #1
   1400c:	cmn	r8, #1
   14010:	movne	r3, #0
   14014:	cmp	r3, #0
   14018:	beq	14028 <close_stdout@@Base+0x121c>
   1401c:	ldr	r0, [sp, #32]
   14020:	bl	11388 <strlen@plt>
   14024:	mov	r8, r0
   14028:	cmp	r8, r4
   1402c:	ldrcc	r3, [sp, #32]
   14030:	movcc	r6, #0
   14034:	addcc	r5, r3, fp
   14038:	bcc	137a8 <close_stdout@@Base+0x99c>
   1403c:	ldr	r0, [sp, #32]
   14040:	ldr	r1, [sp, #52]	; 0x34
   14044:	add	r5, r0, fp
   14048:	ldr	r2, [sp, #28]
   1404c:	mov	r0, r5
   14050:	bl	11214 <memcmp@plt>
   14054:	cmp	r0, #0
   14058:	bne	14070 <close_stdout@@Base+0x1264>
   1405c:	ldr	r1, [sp, #36]	; 0x24
   14060:	cmp	r1, #0
   14064:	bne	13bc8 <close_stdout@@Base+0xdbc>
   14068:	mov	r6, #1
   1406c:	b	137a8 <close_stdout@@Base+0x99c>
   14070:	mov	r6, #0
   14074:	b	137a8 <close_stdout@@Base+0x99c>
   14078:	add	r7, sp, #108	; 0x6c
   1407c:	cmn	r8, #1
   14080:	mov	r3, #0
   14084:	str	r3, [sp, #108]	; 0x6c
   14088:	str	r3, [r7, #4]
   1408c:	beq	14278 <close_stdout@@Base+0x146c>
   14090:	mov	r1, #0
   14094:	ldr	r0, [sp, #32]
   14098:	mov	ip, #1
   1409c:	str	r9, [sp, #88]	; 0x58
   140a0:	str	r6, [sp, #96]	; 0x60
   140a4:	mov	r9, r1
   140a8:	str	r5, [sp, #100]	; 0x64
   140ac:	mov	r6, ip
   140b0:	mov	r5, r7
   140b4:	add	r3, sp, #104	; 0x68
   140b8:	sub	r0, r0, #1
   140bc:	str	r3, [sp, #80]	; 0x50
   140c0:	str	r0, [sp, #84]	; 0x54
   140c4:	str	r1, [sp, #60]	; 0x3c
   140c8:	str	r4, [sp, #92]	; 0x5c
   140cc:	ldr	r2, [sp, #32]
   140d0:	add	r7, r9, fp
   140d4:	add	r0, sp, #104	; 0x68
   140d8:	mov	r3, r5
   140dc:	add	r4, r2, r7
   140e0:	rsb	r2, r7, r8
   140e4:	mov	r1, r4
   140e8:	bl	11310 <mbrtowc@plt>
   140ec:	subs	r2, r0, #0
   140f0:	beq	141fc <close_stdout@@Base+0x13f0>
   140f4:	cmn	r2, #1
   140f8:	beq	14324 <close_stdout@@Base+0x1518>
   140fc:	cmn	r2, #2
   14100:	beq	142c8 <close_stdout@@Base+0x14bc>
   14104:	ldr	r3, [sp, #36]	; 0x24
   14108:	ldr	r0, [sp, #160]	; 0xa0
   1410c:	cmp	r0, #2
   14110:	movne	r3, #0
   14114:	andeq	r3, r3, #1
   14118:	cmp	r3, #0
   1411c:	beq	141d8 <close_stdout@@Base+0x13cc>
   14120:	cmp	r2, #1
   14124:	beq	141d8 <close_stdout@@Base+0x13cc>
   14128:	ldr	r1, [sp, #84]	; 0x54
   1412c:	add	r3, r1, r2
   14130:	add	r7, r3, r7
   14134:	ldrb	r3, [r4, #1]!
   14138:	sub	r3, r3, #91	; 0x5b
   1413c:	cmp	r3, #33	; 0x21
   14140:	addls	pc, pc, r3, lsl #2
   14144:	b	141d0 <close_stdout@@Base+0x13c4>
   14148:	b	13bc8 <close_stdout@@Base+0xdbc>
   1414c:	b	13bc8 <close_stdout@@Base+0xdbc>
   14150:	b	141d0 <close_stdout@@Base+0x13c4>
   14154:	b	13bc8 <close_stdout@@Base+0xdbc>
   14158:	b	141d0 <close_stdout@@Base+0x13c4>
   1415c:	b	13bc8 <close_stdout@@Base+0xdbc>
   14160:	b	141d0 <close_stdout@@Base+0x13c4>
   14164:	b	141d0 <close_stdout@@Base+0x13c4>
   14168:	b	141d0 <close_stdout@@Base+0x13c4>
   1416c:	b	141d0 <close_stdout@@Base+0x13c4>
   14170:	b	141d0 <close_stdout@@Base+0x13c4>
   14174:	b	141d0 <close_stdout@@Base+0x13c4>
   14178:	b	141d0 <close_stdout@@Base+0x13c4>
   1417c:	b	141d0 <close_stdout@@Base+0x13c4>
   14180:	b	141d0 <close_stdout@@Base+0x13c4>
   14184:	b	141d0 <close_stdout@@Base+0x13c4>
   14188:	b	141d0 <close_stdout@@Base+0x13c4>
   1418c:	b	141d0 <close_stdout@@Base+0x13c4>
   14190:	b	141d0 <close_stdout@@Base+0x13c4>
   14194:	b	141d0 <close_stdout@@Base+0x13c4>
   14198:	b	141d0 <close_stdout@@Base+0x13c4>
   1419c:	b	141d0 <close_stdout@@Base+0x13c4>
   141a0:	b	141d0 <close_stdout@@Base+0x13c4>
   141a4:	b	141d0 <close_stdout@@Base+0x13c4>
   141a8:	b	141d0 <close_stdout@@Base+0x13c4>
   141ac:	b	141d0 <close_stdout@@Base+0x13c4>
   141b0:	b	141d0 <close_stdout@@Base+0x13c4>
   141b4:	b	141d0 <close_stdout@@Base+0x13c4>
   141b8:	b	141d0 <close_stdout@@Base+0x13c4>
   141bc:	b	141d0 <close_stdout@@Base+0x13c4>
   141c0:	b	141d0 <close_stdout@@Base+0x13c4>
   141c4:	b	141d0 <close_stdout@@Base+0x13c4>
   141c8:	b	141d0 <close_stdout@@Base+0x13c4>
   141cc:	b	13bc8 <close_stdout@@Base+0xdbc>
   141d0:	cmp	r4, r7
   141d4:	bne	14134 <close_stdout@@Base+0x1328>
   141d8:	ldr	r0, [sp, #104]	; 0x68
   141dc:	add	r9, r9, r2
   141e0:	bl	114f0 <iswprint@plt>
   141e4:	cmp	r0, #0
   141e8:	mov	r0, r5
   141ec:	moveq	r6, #0
   141f0:	bl	113c4 <mbsinit@plt>
   141f4:	cmp	r0, #0
   141f8:	beq	140cc <close_stdout@@Base+0x12c0>
   141fc:	mov	ip, r6
   14200:	eor	r2, ip, #1
   14204:	str	r9, [sp, #60]	; 0x3c
   14208:	ldr	r4, [sp, #92]	; 0x5c
   1420c:	uxtb	r2, r2
   14210:	ldr	r9, [sp, #88]	; 0x58
   14214:	ldr	r6, [sp, #96]	; 0x60
   14218:	ldr	r5, [sp, #100]	; 0x64
   1421c:	ldr	r3, [sp, #60]	; 0x3c
   14220:	cmp	r3, #1
   14224:	bls	13da8 <close_stdout@@Base+0xf9c>
   14228:	ldr	r0, [sp, #24]
   1422c:	and	r2, r2, r0
   14230:	b	13db4 <close_stdout@@Base+0xfa8>
   14234:	ldr	r2, [sp, #164]	; 0xa4
   14238:	tst	r2, #1
   1423c:	addne	fp, fp, #1
   14240:	bne	13770 <close_stdout@@Base+0x964>
   14244:	b	13a80 <close_stdout@@Base+0xc74>
   14248:	ldr	r0, [sp, #36]	; 0x24
   1424c:	cmp	r0, #0
   14250:	beq	13a80 <close_stdout@@Base+0xc74>
   14254:	b	13bc8 <close_stdout@@Base+0xdbc>
   14258:	ldr	r2, [sp, #32]
   1425c:	ldrb	r3, [r2, #1]
   14260:	adds	r3, r3, #0
   14264:	movne	r3, #1
   14268:	b	13b9c <close_stdout@@Base+0xd90>
   1426c:	bl	11208 <abort@plt>
   14270:	ldr	r8, [sp, #60]	; 0x3c
   14274:	b	13bc8 <close_stdout@@Base+0xdbc>
   14278:	ldr	r0, [sp, #32]
   1427c:	bl	11388 <strlen@plt>
   14280:	mov	r8, r0
   14284:	b	14090 <close_stdout@@Base+0x1284>
   14288:	ldr	r2, [pc, #288]	; 143b0 <close_stdout@@Base+0x15a4>
   1428c:	mov	r1, #1
   14290:	mov	r9, r1
   14294:	str	r1, [sp, #24]
   14298:	add	r2, pc, r2
   1429c:	str	r1, [sp, #28]
   142a0:	str	r2, [sp, #52]	; 0x34
   142a4:	b	1374c <close_stdout@@Base+0x940>
   142a8:	ldr	r2, [pc, #260]	; 143b4 <close_stdout@@Base+0x15a8>
   142ac:	mov	r3, #1
   142b0:	mov	r9, r3
   142b4:	str	r3, [sp, #28]
   142b8:	add	r2, pc, r2
   142bc:	str	sl, [sp, #24]
   142c0:	str	r2, [sp, #52]	; 0x34
   142c4:	b	1374c <close_stdout@@Base+0x940>
   142c8:	cmp	r8, r7
   142cc:	str	r9, [sp, #60]	; 0x3c
   142d0:	mov	ip, r4
   142d4:	ldr	r6, [sp, #96]	; 0x60
   142d8:	ldr	r9, [sp, #88]	; 0x58
   142dc:	ldr	r4, [sp, #92]	; 0x5c
   142e0:	ldr	r5, [sp, #100]	; 0x64
   142e4:	bls	1431c <close_stdout@@Base+0x1510>
   142e8:	ldrb	r3, [ip]
   142ec:	cmp	r3, #0
   142f0:	beq	1431c <close_stdout@@Base+0x1510>
   142f4:	ldr	r3, [sp, #60]	; 0x3c
   142f8:	b	14308 <close_stdout@@Base+0x14fc>
   142fc:	ldrb	r2, [r5, r3]
   14300:	cmp	r2, #0
   14304:	beq	14318 <close_stdout@@Base+0x150c>
   14308:	add	r3, r3, #1
   1430c:	add	r2, fp, r3
   14310:	cmp	r8, r2
   14314:	bhi	142fc <close_stdout@@Base+0x14f0>
   14318:	str	r3, [sp, #60]	; 0x3c
   1431c:	mov	r2, #1
   14320:	b	1421c <close_stdout@@Base+0x1410>
   14324:	str	r9, [sp, #60]	; 0x3c
   14328:	mov	r2, #1
   1432c:	ldr	r4, [sp, #92]	; 0x5c
   14330:	ldr	r6, [sp, #96]	; 0x60
   14334:	ldr	r9, [sp, #88]	; 0x58
   14338:	ldr	r5, [sp, #100]	; 0x64
   1433c:	b	1421c <close_stdout@@Base+0x1410>
   14340:	ldr	r9, [sp, #36]	; 0x24
   14344:	b	13f68 <close_stdout@@Base+0x115c>
   14348:	bl	11484 <__stack_chk_fail@plt>
   1434c:	ldr	r1, [pc, #100]	; 143b8 <close_stdout@@Base+0x15ac>
   14350:	mov	r3, #0
   14354:	mov	r0, #1
   14358:	str	r3, [sp, #24]
   1435c:	add	r1, pc, r1
   14360:	str	r0, [sp, #28]
   14364:	mov	r9, r3
   14368:	str	r1, [sp, #52]	; 0x34
   1436c:	b	1374c <close_stdout@@Base+0x940>
   14370:	ldr	r0, [pc, #68]	; 143bc <close_stdout@@Base+0x15b0>
   14374:	mov	r3, #1
   14378:	mov	r9, #0
   1437c:	str	r3, [sp, #24]
   14380:	add	r0, pc, r0
   14384:	str	r3, [sp, #28]
   14388:	str	r0, [sp, #52]	; 0x34
   1438c:	b	1374c <close_stdout@@Base+0x940>
   14390:	andeq	r4, r1, r4, asr #18
   14394:	andeq	r0, r0, r4, lsr r1
   14398:	andeq	r3, r0, r8, ror #8
   1439c:	andeq	r3, r0, r4, asr #8
   143a0:	andeq	r3, r0, r0, lsl #8
   143a4:	ldrdeq	r3, [r0], -ip
   143a8:	andeq	r3, r0, r0, ror #6
   143ac:	andeq	r3, r0, r8, lsl #6
   143b0:	andeq	r3, r0, r0, rrx
   143b4:	andeq	r3, r0, ip, lsr r0
   143b8:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   143bc:	andeq	r2, r0, r8, ror pc
   143c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143c4:	sub	sp, sp, #44	; 0x2c
   143c8:	mov	r6, r0
   143cc:	mov	r9, r1
   143d0:	mov	sl, r2
   143d4:	mov	r4, r3
   143d8:	bl	11514 <__errno_location@plt>
   143dc:	ldr	fp, [pc, #412]	; 14580 <close_stdout@@Base+0x1774>
   143e0:	cmp	r6, #0
   143e4:	add	fp, pc, fp
   143e8:	ldr	r5, [fp]
   143ec:	ldr	r1, [r0]
   143f0:	mov	r8, r0
   143f4:	str	r1, [sp, #36]	; 0x24
   143f8:	blt	14578 <close_stdout@@Base+0x176c>
   143fc:	ldr	r3, [pc, #384]	; 14584 <close_stdout@@Base+0x1778>
   14400:	add	r3, pc, r3
   14404:	ldr	r3, [r3]
   14408:	cmp	r6, r3
   1440c:	bcc	14460 <close_stdout@@Base+0x1654>
   14410:	add	r7, r6, #1
   14414:	cmn	r7, #-536870911	; 0xe0000001
   14418:	bhi	1457c <close_stdout@@Base+0x1770>
   1441c:	add	r3, fp, #4
   14420:	cmp	r5, r3
   14424:	beq	14550 <close_stdout@@Base+0x1744>
   14428:	mov	r0, r5
   1442c:	lsl	r1, r7, #3
   14430:	bl	15264 <close_stdout@@Base+0x2458>
   14434:	mov	r5, r0
   14438:	str	r0, [fp]
   1443c:	ldr	fp, [pc, #324]	; 14588 <close_stdout@@Base+0x177c>
   14440:	mov	r1, #0
   14444:	add	fp, pc, fp
   14448:	ldr	r0, [fp]
   1444c:	rsb	r2, r0, r7
   14450:	add	r0, r5, r0, lsl #3
   14454:	lsl	r2, r2, #3
   14458:	bl	112e0 <memset@plt>
   1445c:	str	r7, [fp]
   14460:	add	r2, r4, #8
   14464:	str	r2, [sp, #32]
   14468:	ldr	r1, [r4]
   1446c:	add	fp, r5, r6, lsl #3
   14470:	ldr	lr, [sp, #32]
   14474:	mov	r2, r9
   14478:	ldr	r3, [r4, #4]
   1447c:	ldr	ip, [r5, r6, lsl #3]
   14480:	ldr	r7, [fp, #4]
   14484:	orr	r3, r3, #1
   14488:	str	r1, [sp]
   1448c:	str	r3, [sp, #4]
   14490:	mov	r1, ip
   14494:	str	lr, [sp, #8]
   14498:	mov	r0, r7
   1449c:	ldr	lr, [r4, #40]	; 0x28
   144a0:	str	r3, [sp, #28]
   144a4:	mov	r3, sl
   144a8:	str	lr, [sp, #12]
   144ac:	ldr	lr, [r4, #44]	; 0x2c
   144b0:	str	ip, [sp, #24]
   144b4:	str	lr, [sp, #16]
   144b8:	bl	13698 <close_stdout@@Base+0x88c>
   144bc:	ldr	ip, [sp, #24]
   144c0:	cmp	ip, r0
   144c4:	bhi	1453c <close_stdout@@Base+0x1730>
   144c8:	ldr	r3, [pc, #188]	; 1458c <close_stdout@@Base+0x1780>
   144cc:	add	r1, r0, #1
   144d0:	str	r1, [r5, r6, lsl #3]
   144d4:	add	r3, pc, r3
   144d8:	cmp	r7, r3
   144dc:	beq	144f0 <close_stdout@@Base+0x16e4>
   144e0:	mov	r0, r7
   144e4:	str	r1, [sp, #24]
   144e8:	bl	11340 <free@plt>
   144ec:	ldr	r1, [sp, #24]
   144f0:	mov	r0, r1
   144f4:	str	r1, [sp, #24]
   144f8:	bl	1520c <close_stdout@@Base+0x2400>
   144fc:	ldr	r3, [sp, #28]
   14500:	ldr	lr, [sp, #32]
   14504:	mov	r2, r9
   14508:	str	r0, [fp, #4]
   1450c:	mov	r7, r0
   14510:	ldr	ip, [r4]
   14514:	str	r3, [sp, #4]
   14518:	mov	r3, sl
   1451c:	str	lr, [sp, #8]
   14520:	str	ip, [sp]
   14524:	ldr	ip, [r4, #40]	; 0x28
   14528:	ldr	r1, [sp, #24]
   1452c:	str	ip, [sp, #12]
   14530:	ldr	ip, [r4, #44]	; 0x2c
   14534:	str	ip, [sp, #16]
   14538:	bl	13698 <close_stdout@@Base+0x88c>
   1453c:	ldr	r1, [sp, #36]	; 0x24
   14540:	mov	r0, r7
   14544:	str	r1, [r8]
   14548:	add	sp, sp, #44	; 0x2c
   1454c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14550:	lsl	r1, r7, #3
   14554:	mov	r0, #0
   14558:	str	r3, [sp, #24]
   1455c:	bl	15264 <close_stdout@@Base+0x2458>
   14560:	ldr	r3, [sp, #24]
   14564:	mov	r5, r0
   14568:	ldm	r3, {r0, r1}
   1456c:	str	r5, [fp]
   14570:	stm	r5, {r0, r1}
   14574:	b	1443c <close_stdout@@Base+0x1630>
   14578:	bl	11208 <abort@plt>
   1457c:	bl	15420 <close_stdout@@Base+0x2614>
   14580:			; <UNDEFINED> instruction: 0x00013db4
   14584:	andeq	r3, r1, r4, ror #26
   14588:	andeq	r3, r1, r0, lsr #26
   1458c:	strdeq	r3, [r1], -r0
   14590:	push	{r4, r5, r6, lr}
   14594:	mov	r5, r0
   14598:	bl	11514 <__errno_location@plt>
   1459c:	cmp	r5, #0
   145a0:	mov	r1, #48	; 0x30
   145a4:	mov	r4, r0
   145a8:	ldr	r0, [pc, #24]	; 145c8 <close_stdout@@Base+0x17bc>
   145ac:	ldr	r6, [r4]
   145b0:	add	r0, pc, r0
   145b4:	add	r0, r0, #256	; 0x100
   145b8:	movne	r0, r5
   145bc:	bl	153e0 <close_stdout@@Base+0x25d4>
   145c0:	str	r6, [r4]
   145c4:	pop	{r4, r5, r6, pc}
   145c8:	andeq	r3, r1, r4, lsl ip
   145cc:	cmp	r0, #0
   145d0:	beq	145dc <close_stdout@@Base+0x17d0>
   145d4:	ldr	r0, [r0]
   145d8:	bx	lr
   145dc:	ldr	r0, [pc, #12]	; 145f0 <close_stdout@@Base+0x17e4>
   145e0:	add	r0, pc, r0
   145e4:	add	r0, r0, #256	; 0x100
   145e8:	ldr	r0, [r0]
   145ec:	bx	lr
   145f0:	andeq	r3, r1, r4, ror #23
   145f4:	cmp	r0, #0
   145f8:	beq	14604 <close_stdout@@Base+0x17f8>
   145fc:	str	r1, [r0]
   14600:	bx	lr
   14604:	ldr	r0, [pc, #12]	; 14618 <close_stdout@@Base+0x180c>
   14608:	add	r0, pc, r0
   1460c:	add	r0, r0, #256	; 0x100
   14610:	str	r1, [r0]
   14614:	bx	lr
   14618:			; <UNDEFINED> instruction: 0x00013bbc
   1461c:	cmp	r0, #0
   14620:	movne	r3, r0
   14624:	beq	14654 <close_stdout@@Base+0x1848>
   14628:	lsr	ip, r1, #5
   1462c:	and	r1, r1, #31
   14630:	add	r3, r3, ip, lsl #2
   14634:	ldr	ip, [r3, #8]
   14638:	lsr	r0, ip, r1
   1463c:	eor	r2, r0, r2
   14640:	and	r0, r0, #1
   14644:	and	r2, r2, #1
   14648:	eor	ip, ip, r2, lsl r1
   1464c:	str	ip, [r3, #8]
   14650:	bx	lr
   14654:	ldr	r3, [pc, #8]	; 14664 <close_stdout@@Base+0x1858>
   14658:	add	r3, pc, r3
   1465c:	add	r3, r3, #256	; 0x100
   14660:	b	14628 <close_stdout@@Base+0x181c>
   14664:	andeq	r3, r1, ip, ror #22
   14668:	subs	r3, r0, #0
   1466c:	beq	1467c <close_stdout@@Base+0x1870>
   14670:	ldr	r0, [r3, #4]
   14674:	str	r1, [r3, #4]
   14678:	bx	lr
   1467c:	ldr	r3, [pc, #8]	; 1468c <close_stdout@@Base+0x1880>
   14680:	add	r3, pc, r3
   14684:	add	r3, r3, #256	; 0x100
   14688:	b	14670 <close_stdout@@Base+0x1864>
   1468c:	andeq	r3, r1, r4, asr #22
   14690:	cmp	r0, #0
   14694:	push	{r3, lr}
   14698:	beq	146bc <close_stdout@@Base+0x18b0>
   1469c:	cmp	r2, #0
   146a0:	cmpne	r1, #0
   146a4:	mov	r3, #8
   146a8:	strne	r1, [r0, #40]	; 0x28
   146ac:	str	r3, [r0]
   146b0:	strne	r2, [r0, #44]	; 0x2c
   146b4:	popne	{r3, pc}
   146b8:	bl	11208 <abort@plt>
   146bc:	ldr	r0, [pc, #8]	; 146cc <close_stdout@@Base+0x18c0>
   146c0:	add	r0, pc, r0
   146c4:	add	r0, r0, #256	; 0x100
   146c8:	b	1469c <close_stdout@@Base+0x1890>
   146cc:	andeq	r3, r1, r4, lsl #22
   146d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   146d4:	sub	sp, sp, #24
   146d8:	mov	r7, r0
   146dc:	mov	sl, r1
   146e0:	ldr	r4, [sp, #56]	; 0x38
   146e4:	mov	r9, r2
   146e8:	mov	r8, r3
   146ec:	cmp	r4, #0
   146f0:	beq	14744 <close_stdout@@Base+0x1938>
   146f4:	bl	11514 <__errno_location@plt>
   146f8:	ldr	r3, [r4]
   146fc:	add	lr, r4, #8
   14700:	mov	r1, sl
   14704:	mov	r2, r9
   14708:	ldr	r6, [r0]
   1470c:	mov	r5, r0
   14710:	str	r3, [sp]
   14714:	mov	r0, r7
   14718:	ldr	ip, [r4, #4]
   1471c:	mov	r3, r8
   14720:	stmib	sp, {ip, lr}
   14724:	ldr	ip, [r4, #40]	; 0x28
   14728:	str	ip, [sp, #12]
   1472c:	ldr	ip, [r4, #44]	; 0x2c
   14730:	str	ip, [sp, #16]
   14734:	bl	13698 <close_stdout@@Base+0x88c>
   14738:	str	r6, [r5]
   1473c:	add	sp, sp, #24
   14740:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14744:	ldr	r4, [pc, #8]	; 14754 <close_stdout@@Base+0x1948>
   14748:	add	r4, pc, r4
   1474c:	add	r4, r4, #256	; 0x100
   14750:	b	146f4 <close_stdout@@Base+0x18e8>
   14754:	andeq	r3, r1, ip, ror sl
   14758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1475c:	subs	r4, r3, #0
   14760:	sub	sp, sp, #36	; 0x24
   14764:	mov	r7, r0
   14768:	mov	r6, r1
   1476c:	mov	r5, r2
   14770:	beq	1482c <close_stdout@@Base+0x1a20>
   14774:	bl	11514 <__errno_location@plt>
   14778:	ldr	r3, [r4]
   1477c:	ldr	sl, [r4, #4]
   14780:	add	r9, r4, #8
   14784:	mov	r8, r0
   14788:	mov	r0, #0
   1478c:	ldr	r2, [r8]
   14790:	cmp	r5, r0
   14794:	orreq	sl, sl, #1
   14798:	str	r9, [sp, #8]
   1479c:	mov	r1, r0
   147a0:	stm	sp, {r3, sl}
   147a4:	mov	r3, r6
   147a8:	ldr	ip, [r4, #40]	; 0x28
   147ac:	str	r2, [sp, #28]
   147b0:	mov	r2, r7
   147b4:	str	ip, [sp, #12]
   147b8:	ldr	ip, [r4, #44]	; 0x2c
   147bc:	str	ip, [sp, #16]
   147c0:	bl	13698 <close_stdout@@Base+0x88c>
   147c4:	add	r1, r0, #1
   147c8:	mov	fp, r0
   147cc:	str	r1, [sp, #24]
   147d0:	mov	r0, r1
   147d4:	bl	1520c <close_stdout@@Base+0x2400>
   147d8:	ldr	lr, [r4]
   147dc:	str	sl, [sp, #4]
   147e0:	mov	r3, r6
   147e4:	str	r9, [sp, #8]
   147e8:	mov	r2, r7
   147ec:	str	lr, [sp]
   147f0:	ldr	lr, [r4, #40]	; 0x28
   147f4:	ldr	r1, [sp, #24]
   147f8:	str	lr, [sp, #12]
   147fc:	ldr	lr, [r4, #44]	; 0x2c
   14800:	str	lr, [sp, #16]
   14804:	str	r0, [sp, #24]
   14808:	bl	13698 <close_stdout@@Base+0x88c>
   1480c:	ldr	r3, [sp, #28]
   14810:	cmp	r5, #0
   14814:	str	r3, [r8]
   14818:	ldr	ip, [sp, #24]
   1481c:	strne	fp, [r5]
   14820:	mov	r0, ip
   14824:	add	sp, sp, #36	; 0x24
   14828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1482c:	ldr	r4, [pc, #8]	; 1483c <close_stdout@@Base+0x1a30>
   14830:	add	r4, pc, r4
   14834:	add	r4, r4, #256	; 0x100
   14838:	b	14774 <close_stdout@@Base+0x1968>
   1483c:	muleq	r1, r4, r9
   14840:	mov	r3, r2
   14844:	mov	r2, #0
   14848:	b	14758 <close_stdout@@Base+0x194c>
   1484c:	ldr	r2, [pc, #152]	; 148ec <close_stdout@@Base+0x1ae0>
   14850:	push	{r3, r4, r5, r6, r7, lr}
   14854:	add	r2, pc, r2
   14858:	ldr	r3, [pc, #144]	; 148f0 <close_stdout@@Base+0x1ae4>
   1485c:	ldr	r6, [r2]
   14860:	add	r3, pc, r3
   14864:	cmp	r6, #1
   14868:	ldr	r7, [r3]
   1486c:	movhi	r4, #1
   14870:	movhi	r5, r7
   14874:	bls	14890 <close_stdout@@Base+0x1a84>
   14878:	ldr	r0, [r5, #12]
   1487c:	add	r4, r4, #1
   14880:	bl	11340 <free@plt>
   14884:	cmp	r4, r6
   14888:	add	r5, r5, #8
   1488c:	bne	14878 <close_stdout@@Base+0x1a6c>
   14890:	ldr	r4, [pc, #92]	; 148f4 <close_stdout@@Base+0x1ae8>
   14894:	ldr	r0, [r7, #4]
   14898:	add	r4, pc, r4
   1489c:	cmp	r0, r4
   148a0:	beq	148b8 <close_stdout@@Base+0x1aac>
   148a4:	bl	11340 <free@plt>
   148a8:	ldr	r3, [pc, #72]	; 148f8 <close_stdout@@Base+0x1aec>
   148ac:	mov	r2, #256	; 0x100
   148b0:	add	r3, pc, r3
   148b4:	stmib	r3, {r2, r4}
   148b8:	ldr	r4, [pc, #60]	; 148fc <close_stdout@@Base+0x1af0>
   148bc:	add	r4, pc, r4
   148c0:	add	r5, r4, #4
   148c4:	cmp	r7, r5
   148c8:	beq	148d8 <close_stdout@@Base+0x1acc>
   148cc:	mov	r0, r7
   148d0:	bl	11340 <free@plt>
   148d4:	str	r5, [r4]
   148d8:	ldr	r3, [pc, #32]	; 14900 <close_stdout@@Base+0x1af4>
   148dc:	mov	r2, #1
   148e0:	add	r3, pc, r3
   148e4:	str	r2, [r3]
   148e8:	pop	{r3, r4, r5, r6, r7, pc}
   148ec:	andeq	r3, r1, r0, lsl r9
   148f0:	andeq	r3, r1, r8, lsr r9
   148f4:	andeq	r3, r1, ip, lsr #18
   148f8:	andeq	r3, r1, r8, ror #17
   148fc:	ldrdeq	r3, [r1], -ip
   14900:	andeq	r3, r1, r4, lsl #17
   14904:	ldr	r3, [pc, #12]	; 14918 <close_stdout@@Base+0x1b0c>
   14908:	mvn	r2, #0
   1490c:	add	r3, pc, r3
   14910:	add	r3, r3, #256	; 0x100
   14914:	b	143c0 <close_stdout@@Base+0x15b4>
   14918:			; <UNDEFINED> instruction: 0x000138b8
   1491c:	ldr	r3, [pc, #8]	; 1492c <close_stdout@@Base+0x1b20>
   14920:	add	r3, pc, r3
   14924:	add	r3, r3, #256	; 0x100
   14928:	b	143c0 <close_stdout@@Base+0x15b4>
   1492c:	andeq	r3, r1, r4, lsr #17
   14930:	mov	r1, r0
   14934:	mov	r0, #0
   14938:	b	14904 <close_stdout@@Base+0x1af8>
   1493c:	mov	r2, r1
   14940:	mov	r1, r0
   14944:	mov	r0, #0
   14948:	b	1491c <close_stdout@@Base+0x1b10>
   1494c:	ldr	r3, [pc, #92]	; 149b0 <close_stdout@@Base+0x1ba4>
   14950:	ldr	ip, [pc, #92]	; 149b4 <close_stdout@@Base+0x1ba8>
   14954:	add	r3, pc, r3
   14958:	push	{r4, r5, r6, r7, lr}
   1495c:	sub	sp, sp, #60	; 0x3c
   14960:	ldr	r4, [r3, ip]
   14964:	add	r5, sp, #4
   14968:	mov	r7, r2
   1496c:	mov	r6, r0
   14970:	mov	r0, r5
   14974:	ldr	r3, [r4]
   14978:	str	r3, [sp, #52]	; 0x34
   1497c:	bl	134e0 <close_stdout@@Base+0x6d4>
   14980:	mov	r3, r5
   14984:	mvn	r2, #0
   14988:	mov	r0, r6
   1498c:	mov	r1, r7
   14990:	bl	143c0 <close_stdout@@Base+0x15b4>
   14994:	ldr	r2, [sp, #52]	; 0x34
   14998:	ldr	r3, [r4]
   1499c:	cmp	r2, r3
   149a0:	bne	149ac <close_stdout@@Base+0x1ba0>
   149a4:	add	sp, sp, #60	; 0x3c
   149a8:	pop	{r4, r5, r6, r7, pc}
   149ac:	bl	11484 <__stack_chk_fail@plt>
   149b0:	andeq	r3, r1, r4, lsr #13
   149b4:	andeq	r0, r0, r4, lsr r1
   149b8:	ldr	ip, [pc, #96]	; 14a20 <close_stdout@@Base+0x1c14>
   149bc:	push	{r4, r5, r6, r7, r8, lr}
   149c0:	add	ip, pc, ip
   149c4:	ldr	lr, [pc, #88]	; 14a24 <close_stdout@@Base+0x1c18>
   149c8:	sub	sp, sp, #56	; 0x38
   149cc:	mov	r8, r3
   149d0:	add	r5, sp, #4
   149d4:	mov	r7, r2
   149d8:	mov	r6, r0
   149dc:	ldr	r4, [ip, lr]
   149e0:	mov	r0, r5
   149e4:	ldr	r3, [r4]
   149e8:	str	r3, [sp, #52]	; 0x34
   149ec:	bl	134e0 <close_stdout@@Base+0x6d4>
   149f0:	mov	r2, r8
   149f4:	mov	r3, r5
   149f8:	mov	r0, r6
   149fc:	mov	r1, r7
   14a00:	bl	143c0 <close_stdout@@Base+0x15b4>
   14a04:	ldr	r2, [sp, #52]	; 0x34
   14a08:	ldr	r3, [r4]
   14a0c:	cmp	r2, r3
   14a10:	bne	14a1c <close_stdout@@Base+0x1c10>
   14a14:	add	sp, sp, #56	; 0x38
   14a18:	pop	{r4, r5, r6, r7, r8, pc}
   14a1c:	bl	11484 <__stack_chk_fail@plt>
   14a20:	andeq	r3, r1, r8, lsr r6
   14a24:	andeq	r0, r0, r4, lsr r1
   14a28:	mov	r2, r1
   14a2c:	mov	r1, r0
   14a30:	mov	r0, #0
   14a34:	b	1494c <close_stdout@@Base+0x1b40>
   14a38:	mov	ip, r1
   14a3c:	mov	r3, r2
   14a40:	mov	r1, r0
   14a44:	mov	r2, ip
   14a48:	mov	r0, #0
   14a4c:	b	149b8 <close_stdout@@Base+0x1bac>
   14a50:	push	{r4, r5, r6, r7, r8, lr}
   14a54:	mov	r5, r2
   14a58:	ldr	lr, [pc, #136]	; 14ae8 <close_stdout@@Base+0x1cdc>
   14a5c:	mov	r7, r0
   14a60:	mov	r6, r1
   14a64:	ldr	r4, [pc, #128]	; 14aec <close_stdout@@Base+0x1ce0>
   14a68:	add	lr, pc, lr
   14a6c:	sub	sp, sp, #56	; 0x38
   14a70:	add	lr, lr, #256	; 0x100
   14a74:	ldr	r8, [pc, #116]	; 14af0 <close_stdout@@Base+0x1ce4>
   14a78:	add	r4, pc, r4
   14a7c:	add	ip, sp, #4
   14a80:	ldm	lr!, {r0, r1, r2, r3}
   14a84:	ldr	r4, [r4, r8]
   14a88:	stmia	ip!, {r0, r1, r2, r3}
   14a8c:	ldm	lr!, {r0, r1, r2, r3}
   14a90:	ldr	r8, [r4]
   14a94:	stmia	ip!, {r0, r1, r2, r3}
   14a98:	ldm	lr, {r0, r1, r2, r3}
   14a9c:	str	r8, [sp, #52]	; 0x34
   14aa0:	stm	ip, {r0, r1, r2, r3}
   14aa4:	mov	r1, r5
   14aa8:	add	r5, sp, #4
   14aac:	mov	r2, #1
   14ab0:	mov	r0, r5
   14ab4:	bl	1461c <close_stdout@@Base+0x1810>
   14ab8:	mov	r2, r6
   14abc:	mov	r3, r5
   14ac0:	mov	r1, r7
   14ac4:	mov	r0, #0
   14ac8:	bl	143c0 <close_stdout@@Base+0x15b4>
   14acc:	ldr	r2, [sp, #52]	; 0x34
   14ad0:	ldr	r3, [r4]
   14ad4:	cmp	r2, r3
   14ad8:	bne	14ae4 <close_stdout@@Base+0x1cd8>
   14adc:	add	sp, sp, #56	; 0x38
   14ae0:	pop	{r4, r5, r6, r7, r8, pc}
   14ae4:	bl	11484 <__stack_chk_fail@plt>
   14ae8:	andeq	r3, r1, ip, asr r7
   14aec:	andeq	r3, r1, r0, lsl #11
   14af0:	andeq	r0, r0, r4, lsr r1
   14af4:	mov	r2, r1
   14af8:	mvn	r1, #0
   14afc:	b	14a50 <close_stdout@@Base+0x1c44>
   14b00:	mov	r1, #58	; 0x3a
   14b04:	b	14af4 <close_stdout@@Base+0x1ce8>
   14b08:	mov	r2, #58	; 0x3a
   14b0c:	b	14a50 <close_stdout@@Base+0x1c44>
   14b10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b14:	mov	r5, r2
   14b18:	ldr	lr, [pc, #144]	; 14bb0 <close_stdout@@Base+0x1da4>
   14b1c:	mov	r8, r0
   14b20:	mov	r9, r1
   14b24:	mov	r7, r3
   14b28:	add	lr, pc, lr
   14b2c:	ldr	r4, [pc, #128]	; 14bb4 <close_stdout@@Base+0x1da8>
   14b30:	add	lr, lr, #256	; 0x100
   14b34:	sub	sp, sp, #56	; 0x38
   14b38:	ldr	sl, [pc, #120]	; 14bb8 <close_stdout@@Base+0x1dac>
   14b3c:	add	r4, pc, r4
   14b40:	ldm	lr!, {r0, r1, r2, r3}
   14b44:	add	ip, sp, #4
   14b48:	ldr	r4, [r4, sl]
   14b4c:	ldr	r6, [sp, #88]	; 0x58
   14b50:	stmia	ip!, {r0, r1, r2, r3}
   14b54:	ldm	lr!, {r0, r1, r2, r3}
   14b58:	ldr	sl, [r4]
   14b5c:	stmia	ip!, {r0, r1, r2, r3}
   14b60:	ldm	lr, {r0, r1, r2, r3}
   14b64:	str	sl, [sp, #52]	; 0x34
   14b68:	stm	ip, {r0, r1, r2, r3}
   14b6c:	mov	r2, r5
   14b70:	add	r5, sp, #4
   14b74:	mov	r1, r9
   14b78:	mov	r0, r5
   14b7c:	bl	14690 <close_stdout@@Base+0x1884>
   14b80:	mov	r2, r6
   14b84:	mov	r3, r5
   14b88:	mov	r0, r8
   14b8c:	mov	r1, r7
   14b90:	bl	143c0 <close_stdout@@Base+0x15b4>
   14b94:	ldr	r2, [sp, #52]	; 0x34
   14b98:	ldr	r3, [r4]
   14b9c:	cmp	r2, r3
   14ba0:	bne	14bac <close_stdout@@Base+0x1da0>
   14ba4:	add	sp, sp, #56	; 0x38
   14ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14bac:	bl	11484 <__stack_chk_fail@plt>
   14bb0:	muleq	r1, ip, r6
   14bb4:			; <UNDEFINED> instruction: 0x000134bc
   14bb8:	andeq	r0, r0, r4, lsr r1
   14bbc:	push	{lr}		; (str lr, [sp, #-4]!)
   14bc0:	sub	sp, sp, #12
   14bc4:	mvn	ip, #0
   14bc8:	str	ip, [sp]
   14bcc:	bl	14b10 <close_stdout@@Base+0x1d04>
   14bd0:	add	sp, sp, #12
   14bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bd8:	mov	ip, r1
   14bdc:	mov	r3, r2
   14be0:	mov	r1, r0
   14be4:	mov	r2, ip
   14be8:	mov	r0, #0
   14bec:	b	14bbc <close_stdout@@Base+0x1db0>
   14bf0:	push	{lr}		; (str lr, [sp, #-4]!)
   14bf4:	sub	sp, sp, #12
   14bf8:	mov	lr, r1
   14bfc:	mov	ip, r2
   14c00:	mov	r1, r0
   14c04:	str	r3, [sp]
   14c08:	mov	r2, lr
   14c0c:	mov	r3, ip
   14c10:	mov	r0, #0
   14c14:	bl	14b10 <close_stdout@@Base+0x1d04>
   14c18:	add	sp, sp, #12
   14c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c20:	ldr	r3, [pc, #12]	; 14c34 <close_stdout@@Base+0x1e28>
   14c24:	ldr	ip, [pc, #12]	; 14c38 <close_stdout@@Base+0x1e2c>
   14c28:	add	r3, pc, r3
   14c2c:	ldr	r3, [r3, ip]
   14c30:	b	143c0 <close_stdout@@Base+0x15b4>
   14c34:	ldrdeq	r3, [r1], -r0
   14c38:	andeq	r0, r0, r4, lsr #2
   14c3c:	mov	r2, r1
   14c40:	mov	r1, r0
   14c44:	mov	r0, #0
   14c48:	b	14c20 <close_stdout@@Base+0x1e14>
   14c4c:	mvn	r2, #0
   14c50:	b	14c20 <close_stdout@@Base+0x1e14>
   14c54:	mov	r1, r0
   14c58:	mov	r0, #0
   14c5c:	b	14c4c <close_stdout@@Base+0x1e40>
   14c60:	mov	r1, #0
   14c64:	mov	r2, #3
   14c68:	b	15518 <close_stdout@@Base+0x270c>
   14c6c:	push	{r4, r5, r6, r7, lr}
   14c70:	cmp	r1, #0
   14c74:	sub	sp, sp, #36	; 0x24
   14c78:	ldr	r7, [pc, #896]	; 15000 <close_stdout@@Base+0x21f4>
   14c7c:	mov	ip, r3
   14c80:	mov	r5, r0
   14c84:	add	r7, pc, r7
   14c88:	ldr	r4, [sp, #56]	; 0x38
   14c8c:	ldr	r6, [sp, #60]	; 0x3c
   14c90:	beq	14fd4 <close_stdout@@Base+0x21c8>
   14c94:	str	r2, [sp]
   14c98:	mov	r3, r1
   14c9c:	ldr	r2, [pc, #864]	; 15004 <close_stdout@@Base+0x21f8>
   14ca0:	mov	r1, #1
   14ca4:	str	ip, [sp, #4]
   14ca8:	add	r2, pc, r2
   14cac:	bl	11490 <__fprintf_chk@plt>
   14cb0:	ldr	r1, [pc, #848]	; 15008 <close_stdout@@Base+0x21fc>
   14cb4:	mov	r2, #5
   14cb8:	mov	r0, #0
   14cbc:	add	r1, pc, r1
   14cc0:	bl	11358 <dcgettext@plt>
   14cc4:	ldr	r2, [pc, #832]	; 1500c <close_stdout@@Base+0x2200>
   14cc8:	movw	ip, #2013	; 0x7dd
   14ccc:	mov	r1, #1
   14cd0:	ldr	r2, [r7, r2]
   14cd4:	str	ip, [sp]
   14cd8:	mov	r3, r0
   14cdc:	mov	r0, r5
   14ce0:	bl	11490 <__fprintf_chk@plt>
   14ce4:	ldr	r1, [pc, #804]	; 15010 <close_stdout@@Base+0x2204>
   14ce8:	mov	r0, #0
   14cec:	mov	r2, #5
   14cf0:	add	r1, pc, r1
   14cf4:	bl	11358 <dcgettext@plt>
   14cf8:	mov	r1, r5
   14cfc:	bl	11364 <fputs_unlocked@plt>
   14d00:	cmp	r6, #9
   14d04:	addls	pc, pc, r6, lsl #2
   14d08:	b	14ff0 <close_stdout@@Base+0x21e4>
   14d0c:	b	14da0 <close_stdout@@Base+0x1f94>
   14d10:	b	14da4 <close_stdout@@Base+0x1f98>
   14d14:	b	14dd4 <close_stdout@@Base+0x1fc8>
   14d18:	b	14e08 <close_stdout@@Base+0x1ffc>
   14d1c:	b	14e44 <close_stdout@@Base+0x2038>
   14d20:	b	14e84 <close_stdout@@Base+0x2078>
   14d24:	b	14ecc <close_stdout@@Base+0x20c0>
   14d28:	b	14f1c <close_stdout@@Base+0x2110>
   14d2c:	b	14f74 <close_stdout@@Base+0x2168>
   14d30:	b	14d34 <close_stdout@@Base+0x1f28>
   14d34:	ldr	r1, [pc, #728]	; 15014 <close_stdout@@Base+0x2208>
   14d38:	mov	r0, #0
   14d3c:	add	r1, pc, r1
   14d40:	mov	r2, #5
   14d44:	bl	11358 <dcgettext@plt>
   14d48:	ldm	r4, {r3, ip}
   14d4c:	mov	r1, #1
   14d50:	str	ip, [sp]
   14d54:	ldr	ip, [r4, #8]
   14d58:	str	ip, [sp, #4]
   14d5c:	ldr	ip, [r4, #12]
   14d60:	str	ip, [sp, #8]
   14d64:	ldr	ip, [r4, #16]
   14d68:	str	ip, [sp, #12]
   14d6c:	ldr	ip, [r4, #20]
   14d70:	str	ip, [sp, #16]
   14d74:	ldr	ip, [r4, #24]
   14d78:	str	ip, [sp, #20]
   14d7c:	ldr	ip, [r4, #28]
   14d80:	str	ip, [sp, #24]
   14d84:	ldr	ip, [r4, #32]
   14d88:	str	ip, [sp, #28]
   14d8c:	mov	r2, r0
   14d90:	mov	r0, r5
   14d94:	bl	11490 <__fprintf_chk@plt>
   14d98:	add	sp, sp, #36	; 0x24
   14d9c:	pop	{r4, r5, r6, r7, pc}
   14da0:	bl	11208 <abort@plt>
   14da4:	ldr	r1, [pc, #620]	; 15018 <close_stdout@@Base+0x220c>
   14da8:	mov	r2, #5
   14dac:	mov	r0, #0
   14db0:	add	r1, pc, r1
   14db4:	bl	11358 <dcgettext@plt>
   14db8:	ldr	r3, [r4]
   14dbc:	mov	r1, #1
   14dc0:	mov	r2, r0
   14dc4:	mov	r0, r5
   14dc8:	add	sp, sp, #36	; 0x24
   14dcc:	pop	{r4, r5, r6, r7, lr}
   14dd0:	b	11490 <__fprintf_chk@plt>
   14dd4:	ldr	r1, [pc, #576]	; 1501c <close_stdout@@Base+0x2210>
   14dd8:	mov	r2, #5
   14ddc:	mov	r0, #0
   14de0:	add	r1, pc, r1
   14de4:	bl	11358 <dcgettext@plt>
   14de8:	ldm	r4, {r3, ip}
   14dec:	mov	r1, #1
   14df0:	str	ip, [sp, #56]	; 0x38
   14df4:	mov	r2, r0
   14df8:	mov	r0, r5
   14dfc:	add	sp, sp, #36	; 0x24
   14e00:	pop	{r4, r5, r6, r7, lr}
   14e04:	b	11490 <__fprintf_chk@plt>
   14e08:	ldr	r1, [pc, #528]	; 15020 <close_stdout@@Base+0x2214>
   14e0c:	mov	r2, #5
   14e10:	mov	r0, #0
   14e14:	add	r1, pc, r1
   14e18:	bl	11358 <dcgettext@plt>
   14e1c:	ldm	r4, {r3, ip}
   14e20:	mov	r1, #1
   14e24:	str	ip, [sp, #56]	; 0x38
   14e28:	ldr	ip, [r4, #8]
   14e2c:	str	ip, [sp, #60]	; 0x3c
   14e30:	mov	r2, r0
   14e34:	mov	r0, r5
   14e38:	add	sp, sp, #36	; 0x24
   14e3c:	pop	{r4, r5, r6, r7, lr}
   14e40:	b	11490 <__fprintf_chk@plt>
   14e44:	ldr	r1, [pc, #472]	; 15024 <close_stdout@@Base+0x2218>
   14e48:	mov	r2, #5
   14e4c:	mov	r0, #0
   14e50:	add	r1, pc, r1
   14e54:	bl	11358 <dcgettext@plt>
   14e58:	ldm	r4, {r3, ip}
   14e5c:	mov	r1, #1
   14e60:	str	ip, [sp]
   14e64:	ldr	ip, [r4, #8]
   14e68:	str	ip, [sp, #4]
   14e6c:	ldr	ip, [r4, #12]
   14e70:	str	ip, [sp, #8]
   14e74:	mov	r2, r0
   14e78:	mov	r0, r5
   14e7c:	bl	11490 <__fprintf_chk@plt>
   14e80:	b	14d98 <close_stdout@@Base+0x1f8c>
   14e84:	ldr	r1, [pc, #412]	; 15028 <close_stdout@@Base+0x221c>
   14e88:	mov	r2, #5
   14e8c:	mov	r0, #0
   14e90:	add	r1, pc, r1
   14e94:	bl	11358 <dcgettext@plt>
   14e98:	ldm	r4, {r3, ip}
   14e9c:	mov	r1, #1
   14ea0:	str	ip, [sp]
   14ea4:	ldr	ip, [r4, #8]
   14ea8:	str	ip, [sp, #4]
   14eac:	ldr	ip, [r4, #12]
   14eb0:	str	ip, [sp, #8]
   14eb4:	ldr	ip, [r4, #16]
   14eb8:	str	ip, [sp, #12]
   14ebc:	mov	r2, r0
   14ec0:	mov	r0, r5
   14ec4:	bl	11490 <__fprintf_chk@plt>
   14ec8:	b	14d98 <close_stdout@@Base+0x1f8c>
   14ecc:	ldr	r1, [pc, #344]	; 1502c <close_stdout@@Base+0x2220>
   14ed0:	mov	r2, #5
   14ed4:	mov	r0, #0
   14ed8:	add	r1, pc, r1
   14edc:	bl	11358 <dcgettext@plt>
   14ee0:	ldm	r4, {r3, ip}
   14ee4:	mov	r1, #1
   14ee8:	str	ip, [sp]
   14eec:	ldr	ip, [r4, #8]
   14ef0:	str	ip, [sp, #4]
   14ef4:	ldr	ip, [r4, #12]
   14ef8:	str	ip, [sp, #8]
   14efc:	ldr	ip, [r4, #16]
   14f00:	str	ip, [sp, #12]
   14f04:	ldr	ip, [r4, #20]
   14f08:	str	ip, [sp, #16]
   14f0c:	mov	r2, r0
   14f10:	mov	r0, r5
   14f14:	bl	11490 <__fprintf_chk@plt>
   14f18:	b	14d98 <close_stdout@@Base+0x1f8c>
   14f1c:	ldr	r1, [pc, #268]	; 15030 <close_stdout@@Base+0x2224>
   14f20:	mov	r2, #5
   14f24:	mov	r0, #0
   14f28:	add	r1, pc, r1
   14f2c:	bl	11358 <dcgettext@plt>
   14f30:	ldm	r4, {r3, ip}
   14f34:	mov	r1, #1
   14f38:	str	ip, [sp]
   14f3c:	ldr	ip, [r4, #8]
   14f40:	str	ip, [sp, #4]
   14f44:	ldr	ip, [r4, #12]
   14f48:	str	ip, [sp, #8]
   14f4c:	ldr	ip, [r4, #16]
   14f50:	str	ip, [sp, #12]
   14f54:	ldr	ip, [r4, #20]
   14f58:	str	ip, [sp, #16]
   14f5c:	ldr	ip, [r4, #24]
   14f60:	str	ip, [sp, #20]
   14f64:	mov	r2, r0
   14f68:	mov	r0, r5
   14f6c:	bl	11490 <__fprintf_chk@plt>
   14f70:	b	14d98 <close_stdout@@Base+0x1f8c>
   14f74:	ldr	r1, [pc, #184]	; 15034 <close_stdout@@Base+0x2228>
   14f78:	mov	r2, #5
   14f7c:	mov	r0, #0
   14f80:	add	r1, pc, r1
   14f84:	bl	11358 <dcgettext@plt>
   14f88:	ldm	r4, {r3, ip}
   14f8c:	mov	r1, #1
   14f90:	str	ip, [sp]
   14f94:	ldr	ip, [r4, #8]
   14f98:	str	ip, [sp, #4]
   14f9c:	ldr	ip, [r4, #12]
   14fa0:	str	ip, [sp, #8]
   14fa4:	ldr	ip, [r4, #16]
   14fa8:	str	ip, [sp, #12]
   14fac:	ldr	ip, [r4, #20]
   14fb0:	str	ip, [sp, #16]
   14fb4:	ldr	ip, [r4, #24]
   14fb8:	str	ip, [sp, #20]
   14fbc:	ldr	ip, [r4, #28]
   14fc0:	str	ip, [sp, #24]
   14fc4:	mov	r2, r0
   14fc8:	mov	r0, r5
   14fcc:	bl	11490 <__fprintf_chk@plt>
   14fd0:	b	14d98 <close_stdout@@Base+0x1f8c>
   14fd4:	str	r3, [sp]
   14fd8:	mov	r3, r2
   14fdc:	ldr	r2, [pc, #84]	; 15038 <close_stdout@@Base+0x222c>
   14fe0:	mov	r1, #1
   14fe4:	add	r2, pc, r2
   14fe8:	bl	11490 <__fprintf_chk@plt>
   14fec:	b	14cb0 <close_stdout@@Base+0x1ea4>
   14ff0:	ldr	r1, [pc, #68]	; 1503c <close_stdout@@Base+0x2230>
   14ff4:	mov	r0, #0
   14ff8:	add	r1, pc, r1
   14ffc:	b	14d40 <close_stdout@@Base+0x1f34>
   15000:	andeq	r3, r1, r4, ror r3
   15004:	andeq	r2, r0, r4, lsr #13
   15008:	andeq	r2, r0, r4, lsr #13
   1500c:	andeq	r0, r0, r8, lsr r1
   15010:	andeq	r2, r0, r4, ror r6
   15014:	andeq	r2, r0, r0, lsl #16
   15018:	andeq	r2, r0, r0, lsl #13
   1501c:	andeq	r2, r0, r0, ror #12
   15020:	andeq	r2, r0, r4, asr #12
   15024:	andeq	r2, r0, r4, lsr #12
   15028:	andeq	r2, r0, r4, lsl #12
   1502c:	andeq	r2, r0, r0, ror #11
   15030:			; <UNDEFINED> instruction: 0x000025b8
   15034:	andeq	r2, r0, ip, lsl #11
   15038:	andeq	r2, r0, r4, ror r3
   1503c:	andeq	r2, r0, r8, ror r5
   15040:	push	{r4, r5, lr}
   15044:	sub	sp, sp, #12
   15048:	ldr	r5, [sp, #24]
   1504c:	ldr	ip, [r5]
   15050:	cmp	ip, #0
   15054:	beq	15070 <close_stdout@@Base+0x2264>
   15058:	mov	lr, r5
   1505c:	mov	ip, #0
   15060:	ldr	r4, [lr, #4]!
   15064:	add	ip, ip, #1
   15068:	cmp	r4, #0
   1506c:	bne	15060 <close_stdout@@Base+0x2254>
   15070:	stm	sp, {r5, ip}
   15074:	bl	14c6c <close_stdout@@Base+0x1e60>
   15078:	add	sp, sp, #12
   1507c:	pop	{r4, r5, pc}
   15080:	push	{r4, r5, r6, r7, lr}
   15084:	sub	sp, sp, #60	; 0x3c
   15088:	ldr	r4, [pc, #100]	; 150f4 <close_stdout@@Base+0x22e8>
   1508c:	mov	ip, #0
   15090:	ldr	r5, [pc, #96]	; 150f8 <close_stdout@@Base+0x22ec>
   15094:	mov	lr, ip
   15098:	add	r4, pc, r4
   1509c:	ldr	r6, [sp, #80]	; 0x50
   150a0:	ldr	r7, [r4, r5]
   150a4:	add	r5, sp, #12
   150a8:	ldr	r4, [r7]
   150ac:	str	r4, [sp, #52]	; 0x34
   150b0:	ldr	r4, [r6, ip]
   150b4:	cmp	r4, #0
   150b8:	str	r4, [r5, ip]
   150bc:	beq	150d0 <close_stdout@@Base+0x22c4>
   150c0:	add	lr, lr, #1
   150c4:	add	ip, ip, #4
   150c8:	cmp	lr, #10
   150cc:	bne	150b0 <close_stdout@@Base+0x22a4>
   150d0:	stm	sp, {r5, lr}
   150d4:	bl	14c6c <close_stdout@@Base+0x1e60>
   150d8:	ldr	r2, [sp, #52]	; 0x34
   150dc:	ldr	r3, [r7]
   150e0:	cmp	r2, r3
   150e4:	bne	150f0 <close_stdout@@Base+0x22e4>
   150e8:	add	sp, sp, #60	; 0x3c
   150ec:	pop	{r4, r5, r6, r7, pc}
   150f0:	bl	11484 <__stack_chk_fail@plt>
   150f4:	andeq	r2, r1, r0, ror #30
   150f8:	andeq	r0, r0, r4, lsr r1
   150fc:	push	{r3}		; (str r3, [sp, #-4]!)
   15100:	push	{r4, lr}
   15104:	sub	sp, sp, #20
   15108:	ldr	lr, [pc, #72]	; 15158 <close_stdout@@Base+0x234c>
   1510c:	add	ip, sp, #32
   15110:	ldr	r4, [pc, #68]	; 1515c <close_stdout@@Base+0x2350>
   15114:	add	lr, pc, lr
   15118:	ldr	r3, [sp, #28]
   1511c:	ldr	r4, [lr, r4]
   15120:	str	ip, [sp]
   15124:	str	ip, [sp, #8]
   15128:	ldr	ip, [r4]
   1512c:	str	ip, [sp, #12]
   15130:	bl	15080 <close_stdout@@Base+0x2274>
   15134:	ldr	r2, [sp, #12]
   15138:	ldr	r3, [r4]
   1513c:	cmp	r2, r3
   15140:	bne	15154 <close_stdout@@Base+0x2348>
   15144:	add	sp, sp, #20
   15148:	pop	{r4, lr}
   1514c:	add	sp, sp, #4
   15150:	bx	lr
   15154:	bl	11484 <__stack_chk_fail@plt>
   15158:	andeq	r2, r1, r4, ror #29
   1515c:	andeq	r0, r0, r4, lsr r1
   15160:	ldr	r1, [pc, #132]	; 151ec <close_stdout@@Base+0x23e0>
   15164:	mov	r2, #5
   15168:	push	{r4, lr}
   1516c:	add	r1, pc, r1
   15170:	mov	r0, #0
   15174:	ldr	r4, [pc, #116]	; 151f0 <close_stdout@@Base+0x23e4>
   15178:	bl	11358 <dcgettext@plt>
   1517c:	ldr	r2, [pc, #112]	; 151f4 <close_stdout@@Base+0x23e8>
   15180:	add	r4, pc, r4
   15184:	add	r2, pc, r2
   15188:	mov	r1, r0
   1518c:	mov	r0, #1
   15190:	bl	11280 <__printf_chk@plt>
   15194:	ldr	r1, [pc, #92]	; 151f8 <close_stdout@@Base+0x23ec>
   15198:	mov	r2, #5
   1519c:	mov	r0, #0
   151a0:	add	r1, pc, r1
   151a4:	bl	11358 <dcgettext@plt>
   151a8:	ldr	r2, [pc, #76]	; 151fc <close_stdout@@Base+0x23f0>
   151ac:	ldr	r3, [pc, #76]	; 15200 <close_stdout@@Base+0x23f4>
   151b0:	add	r2, pc, r2
   151b4:	add	r3, pc, r3
   151b8:	mov	r1, r0
   151bc:	mov	r0, #1
   151c0:	bl	11280 <__printf_chk@plt>
   151c4:	ldr	r1, [pc, #56]	; 15204 <close_stdout@@Base+0x23f8>
   151c8:	mov	r0, #0
   151cc:	mov	r2, #5
   151d0:	add	r1, pc, r1
   151d4:	bl	11358 <dcgettext@plt>
   151d8:	ldr	r3, [pc, #40]	; 15208 <close_stdout@@Base+0x23fc>
   151dc:	ldr	r3, [r4, r3]
   151e0:	pop	{r4, lr}
   151e4:	ldr	r1, [r3]
   151e8:	b	11364 <fputs_unlocked@plt>
   151ec:	andeq	r2, r0, r0, asr #8
   151f0:	andeq	r2, r1, r8, ror lr
   151f4:	andeq	r2, r0, r0, asr #8
   151f8:	andeq	r2, r0, ip, lsr r4
   151fc:	andeq	r1, r0, r4, lsr #23
   15200:			; <UNDEFINED> instruction: 0x00001bb0
   15204:	andeq	r2, r0, r0, lsr #8
   15208:	andeq	r0, r0, ip, asr #2
   1520c:	push	{r4, lr}
   15210:	mov	r4, r0
   15214:	bl	11460 <malloc@plt>
   15218:	rsbs	r3, r0, #1
   1521c:	movcc	r3, #0
   15220:	cmp	r4, #0
   15224:	moveq	r3, #0
   15228:	cmp	r3, #0
   1522c:	popeq	{r4, pc}
   15230:	bl	15420 <close_stdout@@Base+0x2614>
   15234:	push	{r3, r4, r5, lr}
   15238:	mov	r4, r0
   1523c:	mvn	r0, #0
   15240:	mov	r5, r1
   15244:	bl	15c34 <close_stdout@@Base+0x2e28>
   15248:	cmp	r0, r4
   1524c:	bcc	1525c <close_stdout@@Base+0x2450>
   15250:	mul	r0, r4, r5
   15254:	pop	{r3, r4, r5, lr}
   15258:	b	1520c <close_stdout@@Base+0x2400>
   1525c:	bl	15420 <close_stdout@@Base+0x2614>
   15260:	b	1520c <close_stdout@@Base+0x2400>
   15264:	rsbs	r3, r1, #1
   15268:	push	{r4, lr}
   1526c:	movcc	r3, #0
   15270:	cmp	r0, #0
   15274:	mov	r4, r1
   15278:	moveq	r3, #0
   1527c:	cmp	r3, #0
   15280:	bne	152a4 <close_stdout@@Base+0x2498>
   15284:	bl	114e4 <realloc@plt>
   15288:	rsbs	r3, r0, #1
   1528c:	movcc	r3, #0
   15290:	cmp	r4, #0
   15294:	moveq	r3, #0
   15298:	cmp	r3, #0
   1529c:	popeq	{r4, pc}
   152a0:	bl	15420 <close_stdout@@Base+0x2614>
   152a4:	bl	11340 <free@plt>
   152a8:	mov	r0, #0
   152ac:	pop	{r4, pc}
   152b0:	push	{r4, r5, r6, lr}
   152b4:	mov	r5, r1
   152b8:	mov	r6, r0
   152bc:	mov	r1, r2
   152c0:	mvn	r0, #0
   152c4:	mov	r4, r2
   152c8:	bl	15c34 <close_stdout@@Base+0x2e28>
   152cc:	cmp	r0, r5
   152d0:	bcc	152e4 <close_stdout@@Base+0x24d8>
   152d4:	mov	r0, r6
   152d8:	mul	r1, r5, r4
   152dc:	pop	{r4, r5, r6, lr}
   152e0:	b	15264 <close_stdout@@Base+0x2458>
   152e4:	bl	15420 <close_stdout@@Base+0x2614>
   152e8:	push	{r3, r4, r5, r6, r7, lr}
   152ec:	subs	r7, r0, #0
   152f0:	mov	r5, r1
   152f4:	mov	r6, r2
   152f8:	ldr	r4, [r1]
   152fc:	beq	15334 <close_stdout@@Base+0x2528>
   15300:	movw	r0, #43690	; 0xaaaa
   15304:	mov	r1, r2
   15308:	bfi	r0, r0, #16, #16
   1530c:	bl	15c34 <close_stdout@@Base+0x2e28>
   15310:	cmp	r4, r0
   15314:	addcc	r3, r4, #1
   15318:	addcc	r4, r4, r3, lsr #1
   1531c:	bcs	15358 <close_stdout@@Base+0x254c>
   15320:	str	r4, [r5]
   15324:	mov	r0, r7
   15328:	mul	r1, r6, r4
   1532c:	pop	{r3, r4, r5, r6, r7, lr}
   15330:	b	15264 <close_stdout@@Base+0x2458>
   15334:	cmp	r4, #0
   15338:	bne	15320 <close_stdout@@Base+0x2514>
   1533c:	mov	r0, #64	; 0x40
   15340:	mov	r1, r2
   15344:	bl	15c34 <close_stdout@@Base+0x2e28>
   15348:	cmp	r0, #0
   1534c:	movne	r4, r0
   15350:	addeq	r4, r0, #1
   15354:	b	15320 <close_stdout@@Base+0x2514>
   15358:	bl	15420 <close_stdout@@Base+0x2614>
   1535c:	cmp	r0, #0
   15360:	push	{r3, lr}
   15364:	ldr	r3, [r1]
   15368:	beq	15394 <close_stdout@@Base+0x2588>
   1536c:	movw	r2, #43689	; 0xaaa9
   15370:	movt	r2, #43690	; 0xaaaa
   15374:	cmp	r3, r2
   15378:	addls	r2, r3, #1
   1537c:	addls	r3, r3, r2, lsr #1
   15380:	bhi	153ac <close_stdout@@Base+0x25a0>
   15384:	str	r3, [r1]
   15388:	mov	r1, r3
   1538c:	pop	{r3, lr}
   15390:	b	15264 <close_stdout@@Base+0x2458>
   15394:	cmp	r3, #0
   15398:	moveq	r3, #64	; 0x40
   1539c:	str	r3, [r1]
   153a0:	mov	r1, r3
   153a4:	pop	{r3, lr}
   153a8:	b	15264 <close_stdout@@Base+0x2458>
   153ac:	bl	15420 <close_stdout@@Base+0x2614>
   153b0:	push	{r4, lr}
   153b4:	mov	r4, r0
   153b8:	bl	1520c <close_stdout@@Base+0x2400>
   153bc:	mov	r2, r4
   153c0:	mov	r1, #0
   153c4:	pop	{r4, lr}
   153c8:	b	112e0 <memset@plt>
   153cc:	push	{r3, lr}
   153d0:	bl	112bc <calloc@plt>
   153d4:	cmp	r0, #0
   153d8:	popne	{r3, pc}
   153dc:	bl	15420 <close_stdout@@Base+0x2614>
   153e0:	push	{r3, r4, r5, lr}
   153e4:	mov	r4, r1
   153e8:	mov	r5, r0
   153ec:	mov	r0, r1
   153f0:	bl	1520c <close_stdout@@Base+0x2400>
   153f4:	mov	r1, r5
   153f8:	mov	r2, r4
   153fc:	pop	{r3, r4, r5, lr}
   15400:	b	113a0 <memcpy@plt>
   15404:	push	{r4, lr}
   15408:	mov	r4, r0
   1540c:	bl	11388 <strlen@plt>
   15410:	add	r1, r0, #1
   15414:	mov	r0, r4
   15418:	pop	{r4, lr}
   1541c:	b	153e0 <close_stdout@@Base+0x25d4>
   15420:	ldr	r3, [pc, #64]	; 15468 <close_stdout@@Base+0x265c>
   15424:	mov	r2, #5
   15428:	ldr	ip, [pc, #60]	; 1546c <close_stdout@@Base+0x2660>
   1542c:	mov	r0, #0
   15430:	add	r3, pc, r3
   15434:	ldr	r1, [pc, #52]	; 15470 <close_stdout@@Base+0x2664>
   15438:	push	{r4, lr}
   1543c:	add	r1, pc, r1
   15440:	ldr	r3, [r3, ip]
   15444:	ldr	r4, [r3]
   15448:	bl	11358 <dcgettext@plt>
   1544c:	ldr	r2, [pc, #32]	; 15474 <close_stdout@@Base+0x2668>
   15450:	mov	r1, #0
   15454:	add	r2, pc, r2
   15458:	mov	r3, r0
   1545c:	mov	r0, r4
   15460:	bl	1146c <error@plt>
   15464:	bl	11208 <abort@plt>
   15468:	andeq	r2, r1, r8, asr #23
   1546c:	andeq	r0, r0, r0, lsr r1
   15470:	andeq	r2, r0, r4, lsr #4
   15474:	andeq	r1, r0, r0, lsr lr
   15478:	push	{r4, r5, r6, lr}
   1547c:	sub	sp, sp, #8
   15480:	mov	r4, r0
   15484:	bl	111fc <fileno@plt>
   15488:	cmp	r0, #0
   1548c:	mov	r0, r4
   15490:	blt	1550c <close_stdout@@Base+0x2700>
   15494:	bl	114c0 <__freading@plt>
   15498:	cmp	r0, #0
   1549c:	bne	154d8 <close_stdout@@Base+0x26cc>
   154a0:	mov	r0, r4
   154a4:	bl	1568c <close_stdout@@Base+0x2880>
   154a8:	cmp	r0, #0
   154ac:	beq	15508 <close_stdout@@Base+0x26fc>
   154b0:	bl	11514 <__errno_location@plt>
   154b4:	ldr	r6, [r0]
   154b8:	mov	r5, r0
   154bc:	mov	r0, r4
   154c0:	bl	11268 <fclose@plt>
   154c4:	cmp	r6, #0
   154c8:	mvnne	r0, #0
   154cc:	strne	r6, [r5]
   154d0:	add	sp, sp, #8
   154d4:	pop	{r4, r5, r6, pc}
   154d8:	mov	r0, r4
   154dc:	bl	111fc <fileno@plt>
   154e0:	mov	r1, #1
   154e4:	mov	r2, #0
   154e8:	mov	r3, #0
   154ec:	str	r1, [sp]
   154f0:	bl	11454 <lseek64@plt>
   154f4:	mvn	r2, #0
   154f8:	mvn	r3, #0
   154fc:	cmp	r1, r3
   15500:	cmpeq	r0, r2
   15504:	bne	154a0 <close_stdout@@Base+0x2694>
   15508:	mov	r0, r4
   1550c:	add	sp, sp, #8
   15510:	pop	{r4, r5, r6, lr}
   15514:	b	11268 <fclose@plt>
   15518:	push	{r1, r2, r3}
   1551c:	movw	ip, #1030	; 0x406
   15520:	ldr	r3, [pc, #336]	; 15678 <close_stdout@@Base+0x286c>
   15524:	push	{r4, r5, r6, r7, r8, lr}
   15528:	add	r3, pc, r3
   1552c:	ldr	lr, [pc, #328]	; 1567c <close_stdout@@Base+0x2870>
   15530:	sub	sp, sp, #12
   15534:	add	r2, sp, #40	; 0x28
   15538:	mov	r6, r0
   1553c:	ldr	r1, [sp, #36]	; 0x24
   15540:	ldr	r4, [r3, lr]
   15544:	cmp	r1, ip
   15548:	str	r2, [sp]
   1554c:	ldr	r3, [r4]
   15550:	str	r3, [sp, #4]
   15554:	bne	155d8 <close_stdout@@Base+0x27cc>
   15558:	ldr	r8, [pc, #288]	; 15680 <close_stdout@@Base+0x2874>
   1555c:	add	r3, sp, #44	; 0x2c
   15560:	str	r3, [sp]
   15564:	add	r8, pc, r8
   15568:	ldr	r7, [sp, #40]	; 0x28
   1556c:	ldr	r3, [r8]
   15570:	mov	r2, r7
   15574:	cmp	r3, #0
   15578:	blt	15664 <close_stdout@@Base+0x2858>
   1557c:	bl	114cc <fcntl@plt>
   15580:	subs	r5, r0, #0
   15584:	blt	155e8 <close_stdout@@Base+0x27dc>
   15588:	ldr	r3, [pc, #244]	; 15684 <close_stdout@@Base+0x2878>
   1558c:	mov	r2, #1
   15590:	add	r3, pc, r3
   15594:	str	r2, [r3]
   15598:	cmp	r5, #0
   1559c:	blt	155b4 <close_stdout@@Base+0x27a8>
   155a0:	ldr	r3, [pc, #224]	; 15688 <close_stdout@@Base+0x287c>
   155a4:	add	r3, pc, r3
   155a8:	ldr	r3, [r3]
   155ac:	cmn	r3, #1
   155b0:	beq	15618 <close_stdout@@Base+0x280c>
   155b4:	ldr	r2, [sp, #4]
   155b8:	mov	r0, r5
   155bc:	ldr	r3, [r4]
   155c0:	cmp	r2, r3
   155c4:	bne	15674 <close_stdout@@Base+0x2868>
   155c8:	add	sp, sp, #12
   155cc:	pop	{r4, r5, r6, r7, r8, lr}
   155d0:	add	sp, sp, #12
   155d4:	bx	lr
   155d8:	ldr	r2, [sp, #40]	; 0x28
   155dc:	bl	114cc <fcntl@plt>
   155e0:	mov	r5, r0
   155e4:	b	155b4 <close_stdout@@Base+0x27a8>
   155e8:	bl	11514 <__errno_location@plt>
   155ec:	ldr	r3, [r0]
   155f0:	cmp	r3, #22
   155f4:	bne	15588 <close_stdout@@Base+0x277c>
   155f8:	mov	r0, r6
   155fc:	mov	r2, r7
   15600:	mov	r1, #0
   15604:	bl	15518 <close_stdout@@Base+0x270c>
   15608:	subs	r5, r0, #0
   1560c:	blt	155b4 <close_stdout@@Base+0x27a8>
   15610:	mvn	r3, #0
   15614:	str	r3, [r8]
   15618:	mov	r0, r5
   1561c:	mov	r1, #1
   15620:	bl	114cc <fcntl@plt>
   15624:	subs	r2, r0, #0
   15628:	blt	15644 <close_stdout@@Base+0x2838>
   1562c:	orr	r2, r2, #1
   15630:	mov	r0, r5
   15634:	mov	r1, #2
   15638:	bl	114cc <fcntl@plt>
   1563c:	cmn	r0, #1
   15640:	bne	155b4 <close_stdout@@Base+0x27a8>
   15644:	bl	11514 <__errno_location@plt>
   15648:	ldr	r7, [r0]
   1564c:	mov	r6, r0
   15650:	mov	r0, r5
   15654:	mvn	r5, #0
   15658:	bl	11424 <close@plt>
   1565c:	str	r7, [r6]
   15660:	b	155b4 <close_stdout@@Base+0x27a8>
   15664:	mov	r1, #0
   15668:	bl	15518 <close_stdout@@Base+0x270c>
   1566c:	mov	r5, r0
   15670:	b	15598 <close_stdout@@Base+0x278c>
   15674:	bl	11484 <__stack_chk_fail@plt>
   15678:	ldrdeq	r2, [r1], -r0
   1567c:	andeq	r0, r0, r4, lsr r1
   15680:	muleq	r1, r0, sp
   15684:	andeq	r2, r1, r4, ror #26
   15688:	andeq	r2, r1, r0, asr sp
   1568c:	push	{r4, lr}
   15690:	subs	r4, r0, #0
   15694:	sub	sp, sp, #8
   15698:	beq	156a8 <close_stdout@@Base+0x289c>
   1569c:	bl	114c0 <__freading@plt>
   156a0:	cmp	r0, #0
   156a4:	bne	156b8 <close_stdout@@Base+0x28ac>
   156a8:	mov	r0, r4
   156ac:	add	sp, sp, #8
   156b0:	pop	{r4, lr}
   156b4:	b	1137c <fflush@plt>
   156b8:	ldr	r3, [r4]
   156bc:	tst	r3, #256	; 0x100
   156c0:	beq	156a8 <close_stdout@@Base+0x289c>
   156c4:	mov	r3, #1
   156c8:	mov	r0, r4
   156cc:	str	r3, [sp]
   156d0:	mov	r2, #0
   156d4:	mov	r3, #0
   156d8:	bl	156ec <close_stdout@@Base+0x28e0>
   156dc:	mov	r0, r4
   156e0:	add	sp, sp, #8
   156e4:	pop	{r4, lr}
   156e8:	b	1137c <fflush@plt>
   156ec:	push	{r4, r5, r6, r7, lr}
   156f0:	sub	sp, sp, #20
   156f4:	ldmib	r0, {r1, ip}
   156f8:	mov	r6, r0
   156fc:	ldr	r4, [sp, #40]	; 0x28
   15700:	cmp	ip, r1
   15704:	beq	1571c <close_stdout@@Base+0x2910>
   15708:	str	r4, [sp, #40]	; 0x28
   1570c:	mov	r0, r6
   15710:	add	sp, sp, #20
   15714:	pop	{r4, r5, r6, r7, lr}
   15718:	b	113e8 <fseeko64@plt>
   1571c:	ldr	ip, [r0, #20]
   15720:	ldr	r1, [r0, #16]
   15724:	cmp	ip, r1
   15728:	bne	15708 <close_stdout@@Base+0x28fc>
   1572c:	ldr	r7, [r0, #36]	; 0x24
   15730:	cmp	r7, #0
   15734:	bne	15708 <close_stdout@@Base+0x28fc>
   15738:	str	r2, [sp, #12]
   1573c:	mvn	r5, #0
   15740:	str	r3, [sp, #8]
   15744:	bl	111fc <fileno@plt>
   15748:	str	r4, [sp]
   1574c:	mvn	r4, #0
   15750:	ldr	r2, [sp, #12]
   15754:	ldr	r3, [sp, #8]
   15758:	bl	11454 <lseek64@plt>
   1575c:	mov	r2, r0
   15760:	mov	r3, r1
   15764:	cmp	r3, r5
   15768:	cmpeq	r2, r4
   1576c:	beq	1578c <close_stdout@@Base+0x2980>
   15770:	ldr	r1, [r6]
   15774:	mov	r0, r7
   15778:	strd	r2, [r6, #80]	; 0x50
   1577c:	bic	r3, r1, #16
   15780:	str	r3, [r6]
   15784:	add	sp, sp, #20
   15788:	pop	{r4, r5, r6, r7, pc}
   1578c:	mvn	r0, #0
   15790:	b	15784 <close_stdout@@Base+0x2978>
   15794:	push	{r4, r5, r6, lr}
   15798:	mov	r4, r0
   1579c:	bl	112a4 <__fpending@plt>
   157a0:	mov	r6, r0
   157a4:	mov	r0, r4
   157a8:	ldr	r4, [r4]
   157ac:	bl	15478 <close_stdout@@Base+0x266c>
   157b0:	and	r4, r4, #32
   157b4:	adds	r5, r0, #0
   157b8:	movne	r5, #1
   157bc:	cmp	r4, #0
   157c0:	bne	157e0 <close_stdout@@Base+0x29d4>
   157c4:	cmp	r5, #0
   157c8:	beq	157d8 <close_stdout@@Base+0x29cc>
   157cc:	cmp	r6, #0
   157d0:	beq	157fc <close_stdout@@Base+0x29f0>
   157d4:	mvn	r4, #0
   157d8:	mov	r0, r4
   157dc:	pop	{r4, r5, r6, pc}
   157e0:	cmp	r5, #0
   157e4:	bne	157d4 <close_stdout@@Base+0x29c8>
   157e8:	bl	11514 <__errno_location@plt>
   157ec:	mvn	r4, #0
   157f0:	str	r5, [r0]
   157f4:	mov	r0, r4
   157f8:	pop	{r4, r5, r6, pc}
   157fc:	bl	11514 <__errno_location@plt>
   15800:	ldr	r4, [r0]
   15804:	subs	r4, r4, #9
   15808:	mvnne	r4, #0
   1580c:	mov	r0, r4
   15810:	pop	{r4, r5, r6, pc}
   15814:	ldr	r3, [pc, #984]	; 15bf4 <close_stdout@@Base+0x2de8>
   15818:	mov	r0, #14
   1581c:	ldr	r2, [pc, #980]	; 15bf8 <close_stdout@@Base+0x2dec>
   15820:	add	r3, pc, r3
   15824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15828:	sub	sp, sp, #132	; 0x84
   1582c:	ldr	r6, [r3, r2]
   15830:	ldr	r3, [r6]
   15834:	str	r3, [sp, #124]	; 0x7c
   15838:	bl	11478 <nl_langinfo@plt>
   1583c:	subs	r5, r0, #0
   15840:	beq	158f4 <close_stdout@@Base+0x2ae8>
   15844:	ldr	r3, [pc, #944]	; 15bfc <close_stdout@@Base+0x2df0>
   15848:	ldr	r4, [pc, r3]
   1584c:	cmp	r4, #0
   15850:	beq	15900 <close_stdout@@Base+0x2af4>
   15854:	ldrb	r7, [r4]
   15858:	cmp	r7, #0
   1585c:	bne	15890 <close_stdout@@Base+0x2a84>
   15860:	b	158c8 <close_stdout@@Base+0x2abc>
   15864:	mov	r0, r4
   15868:	bl	11388 <strlen@plt>
   1586c:	add	r0, r0, #1
   15870:	add	r7, r4, r0
   15874:	mov	r0, r7
   15878:	bl	11388 <strlen@plt>
   1587c:	add	r0, r0, #1
   15880:	add	r4, r7, r0
   15884:	ldrb	r7, [r7, r0]
   15888:	cmp	r7, #0
   1588c:	beq	158c8 <close_stdout@@Base+0x2abc>
   15890:	mov	r0, r5
   15894:	mov	r1, r4
   15898:	bl	114fc <strcmp@plt>
   1589c:	cmp	r0, #0
   158a0:	beq	158b8 <close_stdout@@Base+0x2aac>
   158a4:	cmp	r7, #42	; 0x2a
   158a8:	bne	15864 <close_stdout@@Base+0x2a58>
   158ac:	ldrb	r3, [r4, #1]
   158b0:	cmp	r3, #0
   158b4:	bne	15864 <close_stdout@@Base+0x2a58>
   158b8:	mov	r0, r4
   158bc:	bl	11388 <strlen@plt>
   158c0:	add	r0, r0, #1
   158c4:	add	r5, r4, r0
   158c8:	ldrb	r3, [r5]
   158cc:	cmp	r3, #0
   158d0:	ldreq	r5, [pc, #808]	; 15c00 <close_stdout@@Base+0x2df4>
   158d4:	addeq	r5, pc, r5
   158d8:	ldr	r2, [sp, #124]	; 0x7c
   158dc:	mov	r0, r5
   158e0:	ldr	r3, [r6]
   158e4:	cmp	r2, r3
   158e8:	bne	15bc8 <close_stdout@@Base+0x2dbc>
   158ec:	add	sp, sp, #132	; 0x84
   158f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158f4:	ldr	r5, [pc, #776]	; 15c04 <close_stdout@@Base+0x2df8>
   158f8:	add	r5, pc, r5
   158fc:	b	15844 <close_stdout@@Base+0x2a38>
   15900:	ldr	r0, [pc, #768]	; 15c08 <close_stdout@@Base+0x2dfc>
   15904:	add	r0, pc, r0
   15908:	bl	11274 <getenv@plt>
   1590c:	subs	r8, r0, #0
   15910:	beq	15ba0 <close_stdout@@Base+0x2d94>
   15914:	ldrb	r3, [r8]
   15918:	cmp	r3, #0
   1591c:	beq	15b34 <close_stdout@@Base+0x2d28>
   15920:	bl	11388 <strlen@plt>
   15924:	subs	sl, r0, #0
   15928:	subne	r3, sl, #1
   1592c:	bne	15b44 <close_stdout@@Base+0x2d38>
   15930:	mov	r9, #0
   15934:	mov	fp, r9
   15938:	add	r9, sl, r9
   1593c:	add	r0, r9, #14
   15940:	bl	11460 <malloc@plt>
   15944:	subs	r7, r0, #0
   15948:	beq	15b94 <close_stdout@@Base+0x2d88>
   1594c:	mov	r1, r8
   15950:	mov	r2, sl
   15954:	bl	113a0 <memcpy@plt>
   15958:	cmp	fp, #0
   1595c:	add	ip, r7, r9
   15960:	movne	r3, #47	; 0x2f
   15964:	strbne	r3, [r7, sl]
   15968:	ldr	r3, [pc, #668]	; 15c0c <close_stdout@@Base+0x2e00>
   1596c:	add	r3, pc, r3
   15970:	ldm	r3!, {r0, r1, r2}
   15974:	ldrh	r3, [r3]
   15978:	str	r0, [r7, r9]
   1597c:	mov	r0, r7
   15980:	str	r1, [ip, #4]
   15984:	mov	r1, #32768	; 0x8000
   15988:	strh	r3, [ip, #12]
   1598c:	str	r2, [ip, #8]
   15990:	bl	113f4 <open64@plt>
   15994:	subs	r8, r0, #0
   15998:	blt	15b5c <close_stdout@@Base+0x2d50>
   1599c:	ldr	r1, [pc, #620]	; 15c10 <close_stdout@@Base+0x2e04>
   159a0:	add	r1, pc, r1
   159a4:	bl	11418 <fdopen@plt>
   159a8:	subs	fp, r0, #0
   159ac:	beq	15bb4 <close_stdout@@Base+0x2da8>
   159b0:	ldr	r0, [pc, #604]	; 15c14 <close_stdout@@Base+0x2e08>
   159b4:	add	sl, sp, #20
   159b8:	add	r9, sp, #72	; 0x48
   159bc:	mov	r8, #0
   159c0:	add	r0, pc, r0
   159c4:	str	r0, [sp, #12]
   159c8:	ldr	r3, [fp, #4]
   159cc:	ldr	r2, [fp, #8]
   159d0:	cmp	r3, r2
   159d4:	bcs	15ac0 <close_stdout@@Base+0x2cb4>
   159d8:	add	r2, r3, #1
   159dc:	str	r2, [fp, #4]
   159e0:	ldrb	r0, [r3]
   159e4:	cmp	r0, #32
   159e8:	beq	159c8 <close_stdout@@Base+0x2bbc>
   159ec:	sub	r3, r0, #9
   159f0:	cmp	r3, #1
   159f4:	bls	159c8 <close_stdout@@Base+0x2bbc>
   159f8:	cmp	r0, #35	; 0x23
   159fc:	beq	15ad4 <close_stdout@@Base+0x2cc8>
   15a00:	mov	r1, fp
   15a04:	bl	112f8 <ungetc@plt>
   15a08:	mov	r0, fp
   15a0c:	ldr	r1, [sp, #12]
   15a10:	mov	r2, sl
   15a14:	mov	r3, r9
   15a18:	bl	1152c <fscanf@plt>
   15a1c:	cmp	r0, #1
   15a20:	ble	15b04 <close_stdout@@Base+0x2cf8>
   15a24:	mov	r0, sl
   15a28:	bl	11388 <strlen@plt>
   15a2c:	str	r0, [sp, #8]
   15a30:	mov	r0, r9
   15a34:	bl	11388 <strlen@plt>
   15a38:	cmp	r8, #0
   15a3c:	mov	r2, r0
   15a40:	bne	15b68 <close_stdout@@Base+0x2d5c>
   15a44:	ldr	r3, [sp, #8]
   15a48:	str	r2, [sp]
   15a4c:	add	r8, r0, r3
   15a50:	add	r0, r8, #3
   15a54:	add	r8, r8, #2
   15a58:	bl	11460 <malloc@plt>
   15a5c:	ldr	r2, [sp]
   15a60:	mov	r3, r0
   15a64:	cmp	r3, #0
   15a68:	beq	15bcc <close_stdout@@Base+0x2dc0>
   15a6c:	ldr	r0, [sp, #8]
   15a70:	movw	r1, #65534	; 0xfffe
   15a74:	movt	r1, #65535	; 0xffff
   15a78:	rsb	r2, r2, r8
   15a7c:	rsb	r1, r0, r1
   15a80:	stm	sp, {r2, r3}
   15a84:	add	r0, r1, r2
   15a88:	mov	r1, sl
   15a8c:	add	r0, r3, r0
   15a90:	mov	r4, r3
   15a94:	bl	113dc <strcpy@plt>
   15a98:	ldr	r2, [sp]
   15a9c:	ldr	r3, [sp, #4]
   15aa0:	mov	r1, r9
   15aa4:	sub	r0, r2, #1
   15aa8:	add	r0, r3, r0
   15aac:	bl	113dc <strcpy@plt>
   15ab0:	ldr	r3, [fp, #4]
   15ab4:	ldr	r2, [fp, #8]
   15ab8:	cmp	r3, r2
   15abc:	bcc	159d8 <close_stdout@@Base+0x2bcc>
   15ac0:	mov	r0, fp
   15ac4:	bl	112c8 <__uflow@plt>
   15ac8:	cmn	r0, #1
   15acc:	beq	15b04 <close_stdout@@Base+0x2cf8>
   15ad0:	b	159e4 <close_stdout@@Base+0x2bd8>
   15ad4:	ldr	r3, [fp, #4]
   15ad8:	ldr	r2, [fp, #8]
   15adc:	cmp	r3, r2
   15ae0:	bcs	15be8 <close_stdout@@Base+0x2ddc>
   15ae4:	add	r2, r3, #1
   15ae8:	str	r2, [fp, #4]
   15aec:	ldrb	r0, [r3]
   15af0:	cmp	r0, #10
   15af4:	cmnne	r0, #1
   15af8:	bne	15ad4 <close_stdout@@Base+0x2cc8>
   15afc:	cmn	r0, #1
   15b00:	bne	159c8 <close_stdout@@Base+0x2bbc>
   15b04:	mov	r0, fp
   15b08:	bl	15478 <close_stdout@@Base+0x266c>
   15b0c:	cmp	r8, #0
   15b10:	beq	15b5c <close_stdout@@Base+0x2d50>
   15b14:	mov	r3, #0
   15b18:	strb	r3, [r4, r8]
   15b1c:	mov	r0, r7
   15b20:	bl	11340 <free@plt>
   15b24:	ldr	r3, [pc, #236]	; 15c18 <close_stdout@@Base+0x2e0c>
   15b28:	add	r3, pc, r3
   15b2c:	str	r4, [r3]
   15b30:	b	15854 <close_stdout@@Base+0x2a48>
   15b34:	ldr	r8, [pc, #224]	; 15c1c <close_stdout@@Base+0x2e10>
   15b38:	mov	r3, #7
   15b3c:	mov	sl, #8
   15b40:	add	r8, pc, r8
   15b44:	ldrb	r3, [r8, r3]
   15b48:	cmp	r3, #47	; 0x2f
   15b4c:	movne	r9, #1
   15b50:	movne	fp, r9
   15b54:	bne	15938 <close_stdout@@Base+0x2b2c>
   15b58:	b	15930 <close_stdout@@Base+0x2b24>
   15b5c:	ldr	r4, [pc, #188]	; 15c20 <close_stdout@@Base+0x2e14>
   15b60:	add	r4, pc, r4
   15b64:	b	15b1c <close_stdout@@Base+0x2d10>
   15b68:	ldr	r0, [sp, #8]
   15b6c:	str	r2, [sp]
   15b70:	add	r3, r0, r2
   15b74:	mov	r0, r4
   15b78:	add	r8, r3, r8
   15b7c:	add	r1, r8, #3
   15b80:	add	r8, r8, #2
   15b84:	bl	114e4 <realloc@plt>
   15b88:	ldr	r2, [sp]
   15b8c:	mov	r3, r0
   15b90:	b	15a64 <close_stdout@@Base+0x2c58>
   15b94:	ldr	r4, [pc, #136]	; 15c24 <close_stdout@@Base+0x2e18>
   15b98:	add	r4, pc, r4
   15b9c:	b	15b24 <close_stdout@@Base+0x2d18>
   15ba0:	ldr	r8, [pc, #128]	; 15c28 <close_stdout@@Base+0x2e1c>
   15ba4:	mov	r3, #7
   15ba8:	mov	sl, #8
   15bac:	add	r8, pc, r8
   15bb0:	b	15b44 <close_stdout@@Base+0x2d38>
   15bb4:	ldr	r4, [pc, #112]	; 15c2c <close_stdout@@Base+0x2e20>
   15bb8:	mov	r0, r8
   15bbc:	add	r4, pc, r4
   15bc0:	bl	11424 <close@plt>
   15bc4:	b	15b1c <close_stdout@@Base+0x2d10>
   15bc8:	bl	11484 <__stack_chk_fail@plt>
   15bcc:	mov	r0, r4
   15bd0:	ldr	r4, [pc, #88]	; 15c30 <close_stdout@@Base+0x2e24>
   15bd4:	bl	11340 <free@plt>
   15bd8:	mov	r0, fp
   15bdc:	add	r4, pc, r4
   15be0:	bl	15478 <close_stdout@@Base+0x266c>
   15be4:	b	15b1c <close_stdout@@Base+0x2d10>
   15be8:	mov	r0, fp
   15bec:	bl	112c8 <__uflow@plt>
   15bf0:	b	15af0 <close_stdout@@Base+0x2ce4>
   15bf4:	ldrdeq	r2, [r1], -r8
   15bf8:	andeq	r0, r0, r4, lsr r1
   15bfc:			; <UNDEFINED> instruction: 0x00012ab0
   15c00:	andeq	r1, r0, ip, lsr #27
   15c04:	andeq	r1, r0, r8, asr #5
   15c08:	andeq	r1, r0, r4, lsl #27
   15c0c:	andeq	r1, r0, ip, lsr #26
   15c10:	ldrdeq	r0, [r0], -r4
   15c14:	andeq	r1, r0, r8, ror #25
   15c18:	ldrdeq	r2, [r1], -r0
   15c1c:	andeq	r1, r0, r4, lsr fp
   15c20:	andeq	r1, r0, r0, rrx
   15c24:	andeq	r1, r0, r8, lsr #32
   15c28:	andeq	r1, r0, r8, asr #21
   15c2c:	andeq	r1, r0, r4
   15c30:	andeq	r0, r0, r4, ror #31
   15c34:	subs	r2, r1, #1
   15c38:	bxeq	lr
   15c3c:	bcc	15e14 <close_stdout@@Base+0x3008>
   15c40:	cmp	r0, r1
   15c44:	bls	15df8 <close_stdout@@Base+0x2fec>
   15c48:	tst	r1, r2
   15c4c:	beq	15e04 <close_stdout@@Base+0x2ff8>
   15c50:	clz	r3, r0
   15c54:	clz	r2, r1
   15c58:	sub	r3, r2, r3
   15c5c:	rsbs	r3, r3, #31
   15c60:	addne	r3, r3, r3, lsl #1
   15c64:	mov	r2, #0
   15c68:	addne	pc, pc, r3, lsl #2
   15c6c:	nop	{0}
   15c70:	cmp	r0, r1, lsl #31
   15c74:	adc	r2, r2, r2
   15c78:	subcs	r0, r0, r1, lsl #31
   15c7c:	cmp	r0, r1, lsl #30
   15c80:	adc	r2, r2, r2
   15c84:	subcs	r0, r0, r1, lsl #30
   15c88:	cmp	r0, r1, lsl #29
   15c8c:	adc	r2, r2, r2
   15c90:	subcs	r0, r0, r1, lsl #29
   15c94:	cmp	r0, r1, lsl #28
   15c98:	adc	r2, r2, r2
   15c9c:	subcs	r0, r0, r1, lsl #28
   15ca0:	cmp	r0, r1, lsl #27
   15ca4:	adc	r2, r2, r2
   15ca8:	subcs	r0, r0, r1, lsl #27
   15cac:	cmp	r0, r1, lsl #26
   15cb0:	adc	r2, r2, r2
   15cb4:	subcs	r0, r0, r1, lsl #26
   15cb8:	cmp	r0, r1, lsl #25
   15cbc:	adc	r2, r2, r2
   15cc0:	subcs	r0, r0, r1, lsl #25
   15cc4:	cmp	r0, r1, lsl #24
   15cc8:	adc	r2, r2, r2
   15ccc:	subcs	r0, r0, r1, lsl #24
   15cd0:	cmp	r0, r1, lsl #23
   15cd4:	adc	r2, r2, r2
   15cd8:	subcs	r0, r0, r1, lsl #23
   15cdc:	cmp	r0, r1, lsl #22
   15ce0:	adc	r2, r2, r2
   15ce4:	subcs	r0, r0, r1, lsl #22
   15ce8:	cmp	r0, r1, lsl #21
   15cec:	adc	r2, r2, r2
   15cf0:	subcs	r0, r0, r1, lsl #21
   15cf4:	cmp	r0, r1, lsl #20
   15cf8:	adc	r2, r2, r2
   15cfc:	subcs	r0, r0, r1, lsl #20
   15d00:	cmp	r0, r1, lsl #19
   15d04:	adc	r2, r2, r2
   15d08:	subcs	r0, r0, r1, lsl #19
   15d0c:	cmp	r0, r1, lsl #18
   15d10:	adc	r2, r2, r2
   15d14:	subcs	r0, r0, r1, lsl #18
   15d18:	cmp	r0, r1, lsl #17
   15d1c:	adc	r2, r2, r2
   15d20:	subcs	r0, r0, r1, lsl #17
   15d24:	cmp	r0, r1, lsl #16
   15d28:	adc	r2, r2, r2
   15d2c:	subcs	r0, r0, r1, lsl #16
   15d30:	cmp	r0, r1, lsl #15
   15d34:	adc	r2, r2, r2
   15d38:	subcs	r0, r0, r1, lsl #15
   15d3c:	cmp	r0, r1, lsl #14
   15d40:	adc	r2, r2, r2
   15d44:	subcs	r0, r0, r1, lsl #14
   15d48:	cmp	r0, r1, lsl #13
   15d4c:	adc	r2, r2, r2
   15d50:	subcs	r0, r0, r1, lsl #13
   15d54:	cmp	r0, r1, lsl #12
   15d58:	adc	r2, r2, r2
   15d5c:	subcs	r0, r0, r1, lsl #12
   15d60:	cmp	r0, r1, lsl #11
   15d64:	adc	r2, r2, r2
   15d68:	subcs	r0, r0, r1, lsl #11
   15d6c:	cmp	r0, r1, lsl #10
   15d70:	adc	r2, r2, r2
   15d74:	subcs	r0, r0, r1, lsl #10
   15d78:	cmp	r0, r1, lsl #9
   15d7c:	adc	r2, r2, r2
   15d80:	subcs	r0, r0, r1, lsl #9
   15d84:	cmp	r0, r1, lsl #8
   15d88:	adc	r2, r2, r2
   15d8c:	subcs	r0, r0, r1, lsl #8
   15d90:	cmp	r0, r1, lsl #7
   15d94:	adc	r2, r2, r2
   15d98:	subcs	r0, r0, r1, lsl #7
   15d9c:	cmp	r0, r1, lsl #6
   15da0:	adc	r2, r2, r2
   15da4:	subcs	r0, r0, r1, lsl #6
   15da8:	cmp	r0, r1, lsl #5
   15dac:	adc	r2, r2, r2
   15db0:	subcs	r0, r0, r1, lsl #5
   15db4:	cmp	r0, r1, lsl #4
   15db8:	adc	r2, r2, r2
   15dbc:	subcs	r0, r0, r1, lsl #4
   15dc0:	cmp	r0, r1, lsl #3
   15dc4:	adc	r2, r2, r2
   15dc8:	subcs	r0, r0, r1, lsl #3
   15dcc:	cmp	r0, r1, lsl #2
   15dd0:	adc	r2, r2, r2
   15dd4:	subcs	r0, r0, r1, lsl #2
   15dd8:	cmp	r0, r1, lsl #1
   15ddc:	adc	r2, r2, r2
   15de0:	subcs	r0, r0, r1, lsl #1
   15de4:	cmp	r0, r1
   15de8:	adc	r2, r2, r2
   15dec:	subcs	r0, r0, r1
   15df0:	mov	r0, r2
   15df4:	bx	lr
   15df8:	moveq	r0, #1
   15dfc:	movne	r0, #0
   15e00:	bx	lr
   15e04:	clz	r2, r1
   15e08:	rsb	r2, r2, #31
   15e0c:	lsr	r0, r0, r2
   15e10:	bx	lr
   15e14:	cmp	r0, #0
   15e18:	mvnne	r0, #0
   15e1c:	b	15e7c <close_stdout@@Base+0x3070>
   15e20:	cmp	r1, #0
   15e24:	beq	15e14 <close_stdout@@Base+0x3008>
   15e28:	push	{r0, r1, lr}
   15e2c:	bl	15c34 <close_stdout@@Base+0x2e28>
   15e30:	pop	{r1, r2, lr}
   15e34:	mul	r3, r2, r0
   15e38:	sub	r1, r1, r3
   15e3c:	bx	lr
   15e40:	cmp	r3, #0
   15e44:	cmpeq	r2, #0
   15e48:	bne	15e60 <close_stdout@@Base+0x3054>
   15e4c:	cmp	r1, #0
   15e50:	cmpeq	r0, #0
   15e54:	mvnne	r1, #0
   15e58:	mvnne	r0, #0
   15e5c:	b	15e7c <close_stdout@@Base+0x3070>
   15e60:	sub	sp, sp, #8
   15e64:	push	{sp, lr}
   15e68:	bl	15ec8 <close_stdout@@Base+0x30bc>
   15e6c:	ldr	lr, [sp, #4]
   15e70:	add	sp, sp, #8
   15e74:	pop	{r2, r3}
   15e78:	bx	lr
   15e7c:	push	{r1, lr}
   15e80:	mov	r0, #8
   15e84:	bl	1140c <raise@plt>
   15e88:	pop	{r1, pc}
   15e8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e90:	mov	r8, r2
   15e94:	mov	r6, r0
   15e98:	mov	r7, r1
   15e9c:	mov	sl, r3
   15ea0:	ldr	r9, [sp, #32]
   15ea4:	bl	15f04 <close_stdout@@Base+0x30f8>
   15ea8:	umull	r4, r5, r8, r0
   15eac:	mul	r8, r8, r1
   15eb0:	mla	r2, r0, sl, r8
   15eb4:	add	r5, r2, r5
   15eb8:	subs	r4, r6, r4
   15ebc:	sbc	r5, r7, r5
   15ec0:	strd	r4, [r9]
   15ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ec8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   15ecc:	mov	r8, r2
   15ed0:	mov	r6, r0
   15ed4:	mov	r7, r1
   15ed8:	mov	r5, r3
   15edc:	ldr	r9, [sp, #32]
   15ee0:	bl	16390 <close_stdout@@Base+0x3584>
   15ee4:	mul	r3, r0, r5
   15ee8:	umull	r4, r5, r0, r8
   15eec:	mla	r8, r8, r1, r3
   15ef0:	add	r5, r8, r5
   15ef4:	subs	r4, r6, r4
   15ef8:	sbc	r5, r7, r5
   15efc:	strd	r4, [r9]
   15f00:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   15f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f08:	rsbs	r4, r0, #0
   15f0c:	rsc	r5, r1, #0
   15f10:	cmp	r1, #0
   15f14:	mvn	r6, #0
   15f18:	sub	sp, sp, #12
   15f1c:	movge	r4, r0
   15f20:	movge	r5, r1
   15f24:	movge	r6, #0
   15f28:	cmp	r3, #0
   15f2c:	blt	16164 <close_stdout@@Base+0x3358>
   15f30:	cmp	r3, #0
   15f34:	mov	sl, r4
   15f38:	mov	ip, r5
   15f3c:	mov	r0, r2
   15f40:	mov	r1, r3
   15f44:	mov	r8, r2
   15f48:	mov	r7, r4
   15f4c:	mov	r9, r5
   15f50:	bne	16048 <close_stdout@@Base+0x323c>
   15f54:	cmp	r2, r5
   15f58:	bls	16084 <close_stdout@@Base+0x3278>
   15f5c:	clz	r3, r2
   15f60:	cmp	r3, #0
   15f64:	rsbne	r2, r3, #32
   15f68:	lslne	r8, r0, r3
   15f6c:	lsrne	r2, r4, r2
   15f70:	lslne	r7, r4, r3
   15f74:	orrne	r9, r2, r5, lsl r3
   15f78:	lsr	r4, r8, #16
   15f7c:	uxth	sl, r8
   15f80:	mov	r1, r4
   15f84:	mov	r0, r9
   15f88:	bl	15c34 <close_stdout@@Base+0x2e28>
   15f8c:	mov	r1, r4
   15f90:	mov	fp, r0
   15f94:	mov	r0, r9
   15f98:	bl	15e20 <close_stdout@@Base+0x3014>
   15f9c:	mul	r0, sl, fp
   15fa0:	lsr	r2, r7, #16
   15fa4:	orr	r1, r2, r1, lsl #16
   15fa8:	cmp	r0, r1
   15fac:	bls	15fd0 <close_stdout@@Base+0x31c4>
   15fb0:	adds	r1, r1, r8
   15fb4:	sub	r3, fp, #1
   15fb8:	bcs	15fcc <close_stdout@@Base+0x31c0>
   15fbc:	cmp	r0, r1
   15fc0:	subhi	fp, fp, #2
   15fc4:	addhi	r1, r1, r8
   15fc8:	bhi	15fd0 <close_stdout@@Base+0x31c4>
   15fcc:	mov	fp, r3
   15fd0:	rsb	r9, r0, r1
   15fd4:	mov	r1, r4
   15fd8:	uxth	r7, r7
   15fdc:	mov	r0, r9
   15fe0:	bl	15c34 <close_stdout@@Base+0x2e28>
   15fe4:	mov	r1, r4
   15fe8:	mov	r5, r0
   15fec:	mov	r0, r9
   15ff0:	bl	15e20 <close_stdout@@Base+0x3014>
   15ff4:	mul	sl, sl, r5
   15ff8:	orr	r1, r7, r1, lsl #16
   15ffc:	cmp	sl, r1
   16000:	bls	16020 <close_stdout@@Base+0x3214>
   16004:	adds	r8, r1, r8
   16008:	sub	r3, r5, #1
   1600c:	bcs	1601c <close_stdout@@Base+0x3210>
   16010:	cmp	sl, r8
   16014:	subhi	r5, r5, #2
   16018:	bhi	16020 <close_stdout@@Base+0x3214>
   1601c:	mov	r5, r3
   16020:	orr	r3, r5, fp, lsl #16
   16024:	mov	r4, #0
   16028:	cmp	r6, #0
   1602c:	mov	r0, r3
   16030:	mov	r1, r4
   16034:	beq	16040 <close_stdout@@Base+0x3234>
   16038:	rsbs	r0, r0, #0
   1603c:	rsc	r1, r1, #0
   16040:	add	sp, sp, #12
   16044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16048:	cmp	r3, r5
   1604c:	movhi	r4, #0
   16050:	movhi	r3, r4
   16054:	bhi	16028 <close_stdout@@Base+0x321c>
   16058:	clz	r5, r1
   1605c:	cmp	r5, #0
   16060:	bne	16250 <close_stdout@@Base+0x3444>
   16064:	cmp	r1, ip
   16068:	cmpcs	r2, sl
   1606c:	movhi	r4, #0
   16070:	movls	r4, #1
   16074:	movls	r3, #1
   16078:	movls	r4, r5
   1607c:	movhi	r3, r4
   16080:	b	16028 <close_stdout@@Base+0x321c>
   16084:	cmp	r2, #0
   16088:	bne	1609c <close_stdout@@Base+0x3290>
   1608c:	mov	r1, r2
   16090:	mov	r0, #1
   16094:	bl	15c34 <close_stdout@@Base+0x2e28>
   16098:	mov	r8, r0
   1609c:	clz	r3, r8
   160a0:	cmp	r3, #0
   160a4:	bne	16174 <close_stdout@@Base+0x3368>
   160a8:	rsb	r9, r8, r9
   160ac:	lsr	r5, r8, #16
   160b0:	uxth	sl, r8
   160b4:	mov	r4, #1
   160b8:	mov	r1, r5
   160bc:	mov	r0, r9
   160c0:	bl	15c34 <close_stdout@@Base+0x2e28>
   160c4:	mov	r1, r5
   160c8:	mov	fp, r0
   160cc:	mov	r0, r9
   160d0:	bl	15e20 <close_stdout@@Base+0x3014>
   160d4:	mul	r0, sl, fp
   160d8:	lsr	r2, r7, #16
   160dc:	orr	r1, r2, r1, lsl #16
   160e0:	cmp	r0, r1
   160e4:	bls	16104 <close_stdout@@Base+0x32f8>
   160e8:	adds	r1, r1, r8
   160ec:	sub	r3, fp, #1
   160f0:	bcs	16370 <close_stdout@@Base+0x3564>
   160f4:	cmp	r0, r1
   160f8:	subhi	fp, fp, #2
   160fc:	addhi	r1, r1, r8
   16100:	bls	16370 <close_stdout@@Base+0x3564>
   16104:	rsb	r2, r0, r1
   16108:	mov	r1, r5
   1610c:	str	r2, [sp]
   16110:	uxth	r7, r7
   16114:	mov	r0, r2
   16118:	bl	15c34 <close_stdout@@Base+0x2e28>
   1611c:	ldr	r2, [sp]
   16120:	mov	r1, r5
   16124:	mov	r9, r0
   16128:	mov	r0, r2
   1612c:	bl	15e20 <close_stdout@@Base+0x3014>
   16130:	mul	sl, sl, r9
   16134:	orr	r1, r7, r1, lsl #16
   16138:	cmp	sl, r1
   1613c:	bls	1615c <close_stdout@@Base+0x3350>
   16140:	adds	r8, r1, r8
   16144:	sub	r3, r9, #1
   16148:	bcs	16158 <close_stdout@@Base+0x334c>
   1614c:	cmp	sl, r8
   16150:	subhi	r9, r9, #2
   16154:	bhi	1615c <close_stdout@@Base+0x3350>
   16158:	mov	r9, r3
   1615c:	orr	r3, r9, fp, lsl #16
   16160:	b	16028 <close_stdout@@Base+0x321c>
   16164:	mvn	r6, r6
   16168:	rsbs	r2, r2, #0
   1616c:	rsc	r3, r3, #0
   16170:	b	15f30 <close_stdout@@Base+0x3124>
   16174:	lsl	r8, r8, r3
   16178:	rsb	fp, r3, #32
   1617c:	lsr	r4, r9, fp
   16180:	lsr	fp, r7, fp
   16184:	lsr	r5, r8, #16
   16188:	orr	fp, fp, r9, lsl r3
   1618c:	mov	r0, r4
   16190:	lsl	r7, r7, r3
   16194:	mov	r1, r5
   16198:	uxth	sl, r8
   1619c:	bl	15c34 <close_stdout@@Base+0x2e28>
   161a0:	mov	r1, r5
   161a4:	mov	r3, r0
   161a8:	mov	r0, r4
   161ac:	str	r3, [sp]
   161b0:	bl	15e20 <close_stdout@@Base+0x3014>
   161b4:	ldr	r3, [sp]
   161b8:	lsr	r2, fp, #16
   161bc:	mul	r0, sl, r3
   161c0:	orr	r1, r2, r1, lsl #16
   161c4:	cmp	r0, r1
   161c8:	bls	161e8 <close_stdout@@Base+0x33dc>
   161cc:	adds	r1, r1, r8
   161d0:	sub	r2, r3, #1
   161d4:	bcs	16388 <close_stdout@@Base+0x357c>
   161d8:	cmp	r0, r1
   161dc:	subhi	r3, r3, #2
   161e0:	addhi	r1, r1, r8
   161e4:	bls	16388 <close_stdout@@Base+0x357c>
   161e8:	rsb	r9, r0, r1
   161ec:	mov	r1, r5
   161f0:	str	r3, [sp]
   161f4:	uxth	fp, fp
   161f8:	mov	r0, r9
   161fc:	bl	15c34 <close_stdout@@Base+0x2e28>
   16200:	mov	r1, r5
   16204:	mov	r4, r0
   16208:	mov	r0, r9
   1620c:	bl	15e20 <close_stdout@@Base+0x3014>
   16210:	mul	r9, sl, r4
   16214:	ldr	r3, [sp]
   16218:	orr	r1, fp, r1, lsl #16
   1621c:	cmp	r9, r1
   16220:	bls	16244 <close_stdout@@Base+0x3438>
   16224:	adds	r1, r1, r8
   16228:	sub	r2, r4, #1
   1622c:	bcs	16240 <close_stdout@@Base+0x3434>
   16230:	cmp	r9, r1
   16234:	subhi	r4, r4, #2
   16238:	addhi	r1, r1, r8
   1623c:	bhi	16244 <close_stdout@@Base+0x3438>
   16240:	mov	r4, r2
   16244:	rsb	r9, r9, r1
   16248:	orr	r4, r4, r3, lsl #16
   1624c:	b	160b8 <close_stdout@@Base+0x32ac>
   16250:	rsb	sl, r5, #32
   16254:	lsl	r3, r2, r5
   16258:	lsr	r0, r2, sl
   1625c:	lsr	r2, ip, sl
   16260:	orr	r4, r0, r1, lsl r5
   16264:	lsr	sl, r7, sl
   16268:	mov	r0, r2
   1626c:	orr	sl, sl, ip, lsl r5
   16270:	lsr	r9, r4, #16
   16274:	str	r3, [sp, #4]
   16278:	str	r2, [sp]
   1627c:	uxth	fp, r4
   16280:	mov	r1, r9
   16284:	bl	15c34 <close_stdout@@Base+0x2e28>
   16288:	ldr	r2, [sp]
   1628c:	mov	r1, r9
   16290:	mov	r8, r0
   16294:	mov	r0, r2
   16298:	bl	15e20 <close_stdout@@Base+0x3014>
   1629c:	mul	r0, fp, r8
   162a0:	lsr	r2, sl, #16
   162a4:	orr	r1, r2, r1, lsl #16
   162a8:	cmp	r0, r1
   162ac:	bls	162cc <close_stdout@@Base+0x34c0>
   162b0:	adds	r1, r1, r4
   162b4:	sub	r2, r8, #1
   162b8:	bcs	16380 <close_stdout@@Base+0x3574>
   162bc:	cmp	r0, r1
   162c0:	subhi	r8, r8, #2
   162c4:	addhi	r1, r1, r4
   162c8:	bls	16380 <close_stdout@@Base+0x3574>
   162cc:	rsb	ip, r0, r1
   162d0:	mov	r1, r9
   162d4:	str	ip, [sp]
   162d8:	mov	r0, ip
   162dc:	bl	15c34 <close_stdout@@Base+0x2e28>
   162e0:	ldr	ip, [sp]
   162e4:	mov	r1, r9
   162e8:	mov	r2, r0
   162ec:	mov	r0, ip
   162f0:	str	r2, [sp]
   162f4:	bl	15e20 <close_stdout@@Base+0x3014>
   162f8:	ldr	r2, [sp]
   162fc:	uxth	ip, sl
   16300:	mul	fp, fp, r2
   16304:	orr	ip, ip, r1, lsl #16
   16308:	cmp	fp, ip
   1630c:	bls	1632c <close_stdout@@Base+0x3520>
   16310:	adds	ip, ip, r4
   16314:	sub	r1, r2, #1
   16318:	bcs	16378 <close_stdout@@Base+0x356c>
   1631c:	cmp	fp, ip
   16320:	subhi	r2, r2, #2
   16324:	addhi	ip, ip, r4
   16328:	bls	16378 <close_stdout@@Base+0x356c>
   1632c:	ldr	r0, [sp, #4]
   16330:	orr	r1, r2, r8, lsl #16
   16334:	rsb	fp, fp, ip
   16338:	umull	r2, r3, r1, r0
   1633c:	cmp	fp, r3
   16340:	bcc	16364 <close_stdout@@Base+0x3558>
   16344:	movne	r4, #0
   16348:	moveq	r4, #1
   1634c:	cmp	r2, r7, lsl r5
   16350:	movls	r4, #0
   16354:	andhi	r4, r4, #1
   16358:	cmp	r4, #0
   1635c:	moveq	r3, r1
   16360:	beq	16028 <close_stdout@@Base+0x321c>
   16364:	sub	r3, r1, #1
   16368:	mov	r4, #0
   1636c:	b	16028 <close_stdout@@Base+0x321c>
   16370:	mov	fp, r3
   16374:	b	16104 <close_stdout@@Base+0x32f8>
   16378:	mov	r2, r1
   1637c:	b	1632c <close_stdout@@Base+0x3520>
   16380:	mov	r8, r2
   16384:	b	162cc <close_stdout@@Base+0x34c0>
   16388:	mov	r3, r2
   1638c:	b	161e8 <close_stdout@@Base+0x33dc>
   16390:	cmp	r3, #0
   16394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16398:	mov	r6, r0
   1639c:	sub	sp, sp, #12
   163a0:	mov	r5, r1
   163a4:	mov	r7, r0
   163a8:	mov	r4, r2
   163ac:	mov	r8, r1
   163b0:	bne	16490 <close_stdout@@Base+0x3684>
   163b4:	cmp	r2, r1
   163b8:	bls	164cc <close_stdout@@Base+0x36c0>
   163bc:	clz	r3, r2
   163c0:	cmp	r3, #0
   163c4:	rsbne	r8, r3, #32
   163c8:	lslne	r4, r2, r3
   163cc:	lsrne	r8, r0, r8
   163d0:	lslne	r7, r0, r3
   163d4:	orrne	r8, r8, r1, lsl r3
   163d8:	lsr	r5, r4, #16
   163dc:	uxth	sl, r4
   163e0:	mov	r1, r5
   163e4:	mov	r0, r8
   163e8:	bl	15c34 <close_stdout@@Base+0x2e28>
   163ec:	mov	r1, r5
   163f0:	mov	r9, r0
   163f4:	mov	r0, r8
   163f8:	bl	15e20 <close_stdout@@Base+0x3014>
   163fc:	mul	r0, sl, r9
   16400:	lsr	r3, r7, #16
   16404:	orr	r1, r3, r1, lsl #16
   16408:	cmp	r0, r1
   1640c:	bls	16430 <close_stdout@@Base+0x3624>
   16410:	adds	r1, r1, r4
   16414:	sub	r2, r9, #1
   16418:	bcs	1642c <close_stdout@@Base+0x3620>
   1641c:	cmp	r0, r1
   16420:	subhi	r9, r9, #2
   16424:	addhi	r1, r1, r4
   16428:	bhi	16430 <close_stdout@@Base+0x3624>
   1642c:	mov	r9, r2
   16430:	rsb	r8, r0, r1
   16434:	mov	r1, r5
   16438:	uxth	r7, r7
   1643c:	mov	r0, r8
   16440:	bl	15c34 <close_stdout@@Base+0x2e28>
   16444:	mov	r1, r5
   16448:	mov	r6, r0
   1644c:	mov	r0, r8
   16450:	bl	15e20 <close_stdout@@Base+0x3014>
   16454:	mul	sl, sl, r6
   16458:	orr	r1, r7, r1, lsl #16
   1645c:	cmp	sl, r1
   16460:	bls	1647c <close_stdout@@Base+0x3670>
   16464:	adds	r4, r1, r4
   16468:	sub	r3, r6, #1
   1646c:	bcs	16778 <close_stdout@@Base+0x396c>
   16470:	cmp	sl, r4
   16474:	subhi	r6, r6, #2
   16478:	bls	16778 <close_stdout@@Base+0x396c>
   1647c:	orr	r0, r6, r9, lsl #16
   16480:	mov	r6, #0
   16484:	mov	r1, r6
   16488:	add	sp, sp, #12
   1648c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16490:	cmp	r3, r1
   16494:	movhi	r6, #0
   16498:	movhi	r0, r6
   1649c:	bhi	16484 <close_stdout@@Base+0x3678>
   164a0:	clz	r7, r3
   164a4:	cmp	r7, #0
   164a8:	bne	165a8 <close_stdout@@Base+0x379c>
   164ac:	cmp	r3, r1
   164b0:	cmpcs	r2, r6
   164b4:	movhi	r6, #0
   164b8:	movls	r6, #1
   164bc:	movls	r0, #1
   164c0:	movls	r6, r7
   164c4:	movhi	r0, r6
   164c8:	b	16484 <close_stdout@@Base+0x3678>
   164cc:	cmp	r2, #0
   164d0:	bne	164e4 <close_stdout@@Base+0x36d8>
   164d4:	mov	r1, r2
   164d8:	mov	r0, #1
   164dc:	bl	15c34 <close_stdout@@Base+0x2e28>
   164e0:	mov	r4, r0
   164e4:	clz	r3, r4
   164e8:	cmp	r3, #0
   164ec:	bne	166a4 <close_stdout@@Base+0x3898>
   164f0:	rsb	r5, r4, r5
   164f4:	lsr	r8, r4, #16
   164f8:	uxth	sl, r4
   164fc:	mov	r6, #1
   16500:	mov	r1, r8
   16504:	mov	r0, r5
   16508:	bl	15c34 <close_stdout@@Base+0x2e28>
   1650c:	mov	r1, r8
   16510:	mov	r9, r0
   16514:	mov	r0, r5
   16518:	bl	15e20 <close_stdout@@Base+0x3014>
   1651c:	mul	r0, sl, r9
   16520:	lsr	r3, r7, #16
   16524:	orr	r1, r3, r1, lsl #16
   16528:	cmp	r0, r1
   1652c:	bls	1654c <close_stdout@@Base+0x3740>
   16530:	adds	r1, r1, r4
   16534:	sub	r2, r9, #1
   16538:	bcs	16780 <close_stdout@@Base+0x3974>
   1653c:	cmp	r0, r1
   16540:	subhi	r9, r9, #2
   16544:	addhi	r1, r1, r4
   16548:	bls	16780 <close_stdout@@Base+0x3974>
   1654c:	rsb	fp, r0, r1
   16550:	mov	r1, r8
   16554:	uxth	r7, r7
   16558:	mov	r0, fp
   1655c:	bl	15c34 <close_stdout@@Base+0x2e28>
   16560:	mov	r1, r8
   16564:	mov	r5, r0
   16568:	mov	r0, fp
   1656c:	bl	15e20 <close_stdout@@Base+0x3014>
   16570:	mul	sl, sl, r5
   16574:	orr	r1, r7, r1, lsl #16
   16578:	cmp	sl, r1
   1657c:	bls	16598 <close_stdout@@Base+0x378c>
   16580:	adds	r4, r1, r4
   16584:	sub	r3, r5, #1
   16588:	bcs	16788 <close_stdout@@Base+0x397c>
   1658c:	cmp	sl, r4
   16590:	subhi	r5, r5, #2
   16594:	bls	16788 <close_stdout@@Base+0x397c>
   16598:	orr	r0, r5, r9, lsl #16
   1659c:	mov	r1, r6
   165a0:	add	sp, sp, #12
   165a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165a8:	rsb	r1, r7, #32
   165ac:	lsl	r0, r2, r7
   165b0:	lsr	r2, r2, r1
   165b4:	lsr	fp, r5, r1
   165b8:	orr	r8, r2, r3, lsl r7
   165bc:	lsr	r1, r6, r1
   165c0:	str	r0, [sp, #4]
   165c4:	orr	r5, r1, r5, lsl r7
   165c8:	lsr	r9, r8, #16
   165cc:	mov	r0, fp
   165d0:	uxth	sl, r8
   165d4:	mov	r1, r9
   165d8:	bl	15c34 <close_stdout@@Base+0x2e28>
   165dc:	mov	r1, r9
   165e0:	mov	r4, r0
   165e4:	mov	r0, fp
   165e8:	bl	15e20 <close_stdout@@Base+0x3014>
   165ec:	mul	r0, sl, r4
   165f0:	lsr	ip, r5, #16
   165f4:	orr	r1, ip, r1, lsl #16
   165f8:	cmp	r0, r1
   165fc:	bls	16610 <close_stdout@@Base+0x3804>
   16600:	adds	r1, r1, r8
   16604:	sub	r2, r4, #1
   16608:	bcc	167a4 <close_stdout@@Base+0x3998>
   1660c:	mov	r4, r2
   16610:	rsb	ip, r0, r1
   16614:	mov	r1, r9
   16618:	str	ip, [sp]
   1661c:	uxth	r5, r5
   16620:	mov	r0, ip
   16624:	bl	15c34 <close_stdout@@Base+0x2e28>
   16628:	ldr	ip, [sp]
   1662c:	mov	r1, r9
   16630:	mov	fp, r0
   16634:	mov	r0, ip
   16638:	bl	15e20 <close_stdout@@Base+0x3014>
   1663c:	mul	sl, sl, fp
   16640:	orr	r1, r5, r1, lsl #16
   16644:	cmp	sl, r1
   16648:	bls	1665c <close_stdout@@Base+0x3850>
   1664c:	adds	r1, r1, r8
   16650:	sub	r2, fp, #1
   16654:	bcc	16790 <close_stdout@@Base+0x3984>
   16658:	mov	fp, r2
   1665c:	ldr	r3, [sp, #4]
   16660:	orr	r0, fp, r4, lsl #16
   16664:	rsb	sl, sl, r1
   16668:	umull	r4, r5, r0, r3
   1666c:	cmp	sl, r5
   16670:	bcc	16690 <close_stdout@@Base+0x3884>
   16674:	movne	r3, #0
   16678:	moveq	r3, #1
   1667c:	cmp	r4, r6, lsl r7
   16680:	movls	r6, #0
   16684:	andhi	r6, r3, #1
   16688:	cmp	r6, #0
   1668c:	beq	16484 <close_stdout@@Base+0x3678>
   16690:	mov	r6, #0
   16694:	sub	r0, r0, #1
   16698:	mov	r1, r6
   1669c:	add	sp, sp, #12
   166a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166a4:	lsl	r4, r4, r3
   166a8:	rsb	r9, r3, #32
   166ac:	lsr	r2, r5, r9
   166b0:	lsr	r9, r6, r9
   166b4:	lsr	r8, r4, #16
   166b8:	orr	r9, r9, r5, lsl r3
   166bc:	mov	r0, r2
   166c0:	lsl	r7, r6, r3
   166c4:	mov	r1, r8
   166c8:	str	r2, [sp]
   166cc:	bl	15c34 <close_stdout@@Base+0x2e28>
   166d0:	ldr	r2, [sp]
   166d4:	mov	r1, r8
   166d8:	uxth	sl, r4
   166dc:	mov	fp, r0
   166e0:	mov	r0, r2
   166e4:	bl	15e20 <close_stdout@@Base+0x3014>
   166e8:	mul	r0, sl, fp
   166ec:	lsr	r3, r9, #16
   166f0:	orr	r1, r3, r1, lsl #16
   166f4:	cmp	r0, r1
   166f8:	bls	16718 <close_stdout@@Base+0x390c>
   166fc:	adds	r1, r1, r4
   16700:	sub	r3, fp, #1
   16704:	bcs	167b8 <close_stdout@@Base+0x39ac>
   16708:	cmp	r0, r1
   1670c:	subhi	fp, fp, #2
   16710:	addhi	r1, r1, r4
   16714:	bls	167b8 <close_stdout@@Base+0x39ac>
   16718:	rsb	r5, r0, r1
   1671c:	mov	r1, r8
   16720:	uxth	r9, r9
   16724:	mov	r0, r5
   16728:	bl	15c34 <close_stdout@@Base+0x2e28>
   1672c:	mov	r1, r8
   16730:	mov	r6, r0
   16734:	mov	r0, r5
   16738:	bl	15e20 <close_stdout@@Base+0x3014>
   1673c:	mul	r5, sl, r6
   16740:	orr	r1, r9, r1, lsl #16
   16744:	cmp	r5, r1
   16748:	bls	1676c <close_stdout@@Base+0x3960>
   1674c:	adds	r1, r1, r4
   16750:	sub	r3, r6, #1
   16754:	bcs	16768 <close_stdout@@Base+0x395c>
   16758:	cmp	r5, r1
   1675c:	subhi	r6, r6, #2
   16760:	addhi	r1, r1, r4
   16764:	bhi	1676c <close_stdout@@Base+0x3960>
   16768:	mov	r6, r3
   1676c:	rsb	r5, r5, r1
   16770:	orr	r6, r6, fp, lsl #16
   16774:	b	16500 <close_stdout@@Base+0x36f4>
   16778:	mov	r6, r3
   1677c:	b	1647c <close_stdout@@Base+0x3670>
   16780:	mov	r9, r2
   16784:	b	1654c <close_stdout@@Base+0x3740>
   16788:	mov	r5, r3
   1678c:	b	16598 <close_stdout@@Base+0x378c>
   16790:	cmp	sl, r1
   16794:	subhi	fp, fp, #2
   16798:	addhi	r1, r1, r8
   1679c:	bhi	1665c <close_stdout@@Base+0x3850>
   167a0:	b	16658 <close_stdout@@Base+0x384c>
   167a4:	cmp	r0, r1
   167a8:	subhi	r4, r4, #2
   167ac:	addhi	r1, r1, r8
   167b0:	bhi	16610 <close_stdout@@Base+0x3804>
   167b4:	b	1660c <close_stdout@@Base+0x3800>
   167b8:	mov	fp, r3
   167bc:	b	16718 <close_stdout@@Base+0x390c>
   167c0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   167c4:	mov	r7, r0
   167c8:	ldr	r6, [pc, #76]	; 1681c <close_stdout@@Base+0x3a10>
   167cc:	mov	r8, r1
   167d0:	ldr	r5, [pc, #72]	; 16820 <close_stdout@@Base+0x3a14>
   167d4:	mov	r9, r2
   167d8:	add	r6, pc, r6
   167dc:	bl	111dc <_init@@Base>
   167e0:	add	r5, pc, r5
   167e4:	rsb	r6, r5, r6
   167e8:	asrs	r6, r6, #2
   167ec:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   167f0:	sub	r5, r5, #4
   167f4:	mov	r4, #0
   167f8:	add	r4, r4, #1
   167fc:	ldr	r3, [r5, #4]!
   16800:	mov	r0, r7
   16804:	mov	r1, r8
   16808:	mov	r2, r9
   1680c:	blx	r3
   16810:	cmp	r4, r6
   16814:	bne	167f8 <close_stdout@@Base+0x39ec>
   16818:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1681c:	andeq	r1, r1, r4, asr #12
   16820:	andeq	r1, r1, r8, lsr r6
   16824:	bx	lr
   16828:	ldr	r3, [pc, #28]	; 1684c <close_stdout@@Base+0x3a40>
   1682c:	mov	r1, #0
   16830:	ldr	r2, [pc, #24]	; 16850 <close_stdout@@Base+0x3a44>
   16834:	add	r3, pc, r3
   16838:	ldr	r3, [r3, r2]
   1683c:	cmp	r3, #0
   16840:	ldrne	r2, [r3]
   16844:	moveq	r2, r3
   16848:	b	11298 <__cxa_atexit@plt>
   1684c:	andeq	r1, r1, r4, asr #15
   16850:	andeq	r0, r0, ip, lsr #2

Disassembly of section .fini:

00016854 <_fini@@Base>:
   16854:	push	{r3, lr}
   16858:	pop	{r3, pc}
