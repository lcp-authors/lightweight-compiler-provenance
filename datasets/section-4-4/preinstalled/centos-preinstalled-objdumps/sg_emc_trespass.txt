
centos-preinstalled/sg_emc_trespass:     file format elf32-littlearm


Disassembly of section .init:

00010734 <_init@@Base>:
   10734:	push	{r3, lr}
   10738:	bl	10c28 <close@plt+0x444>
   1073c:	pop	{r3, pc}

Disassembly of section .plt:

00010740 <__stack_chk_fail@plt-0x14>:
   10740:	push	{lr}		; (str lr, [sp, #-4]!)
   10744:	ldr	lr, [pc, #4]	; 10750 <_init@@Base+0x1c>
   10748:	add	lr, pc, lr
   1074c:	ldr	pc, [lr, #8]!
   10750:			; <UNDEFINED> instruction: 0x000118b0

00010754 <__stack_chk_fail@plt>:
   10754:	add	ip, pc, #0, 12
   10758:	add	ip, ip, #69632	; 0x11000
   1075c:	ldr	pc, [ip, #2224]!	; 0x8b0

00010760 <sg_ll_mode_select6@plt>:
   10760:	add	ip, pc, #0, 12
   10764:	add	ip, ip, #69632	; 0x11000
   10768:	ldr	pc, [ip, #2216]!	; 0x8a8

0001076c <perror@plt>:
   1076c:	add	ip, pc, #0, 12
   10770:	add	ip, ip, #69632	; 0x11000
   10774:	ldr	pc, [ip, #2208]!	; 0x8a0

00010778 <fwrite@plt>:
   10778:	add	ip, pc, #0, 12
   1077c:	add	ip, ip, #69632	; 0x11000
   10780:	ldr	pc, [ip, #2200]!	; 0x898

00010784 <open64@plt>:
   10784:	add	ip, pc, #0, 12
   10788:	add	ip, ip, #69632	; 0x11000
   1078c:	ldr	pc, [ip, #2192]!	; 0x890

00010790 <__libc_start_main@plt>:
   10790:	add	ip, pc, #0, 12
   10794:	add	ip, ip, #69632	; 0x11000
   10798:	ldr	pc, [ip, #2184]!	; 0x888

0001079c <__gmon_start__@plt>:
   1079c:	add	ip, pc, #0, 12
   107a0:	add	ip, ip, #69632	; 0x11000
   107a4:	ldr	pc, [ip, #2176]!	; 0x880

000107a8 <exit@plt>:
   107a8:	add	ip, pc, #0, 12
   107ac:	add	ip, ip, #69632	; 0x11000
   107b0:	ldr	pc, [ip, #2168]!	; 0x878

000107b4 <sg_ll_mode_select10@plt>:
   107b4:	add	ip, pc, #0, 12
   107b8:	add	ip, ip, #69632	; 0x11000
   107bc:	ldr	pc, [ip, #2160]!	; 0x870

000107c0 <__printf_chk@plt>:
   107c0:	add	ip, pc, #0, 12
   107c4:	add	ip, ip, #69632	; 0x11000
   107c8:	ldr	pc, [ip, #2152]!	; 0x868

000107cc <__fprintf_chk@plt>:
   107cc:	add	ip, pc, #0, 12
   107d0:	add	ip, ip, #69632	; 0x11000
   107d4:	ldr	pc, [ip, #2144]!	; 0x860

000107d8 <abort@plt>:
   107d8:	add	ip, pc, #0, 12
   107dc:	add	ip, ip, #69632	; 0x11000
   107e0:	ldr	pc, [ip, #2136]!	; 0x858

000107e4 <close@plt>:
   107e4:	add	ip, pc, #0, 12
   107e8:	add	ip, ip, #69632	; 0x11000
   107ec:	ldr	pc, [ip, #2128]!	; 0x850

Disassembly of section .text:

000107f0 <.text>:
   107f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   107f4:	movw	r6, #8264	; 0x2048
   107f8:	movt	r6, #2
   107fc:	sub	sp, sp, #48	; 0x30
   10800:	cmp	r0, #1
   10804:	ldr	r3, [r6]
   10808:	str	r3, [sp, #44]	; 0x2c
   1080c:	ble	10898 <close@plt+0xb4>
   10810:	movw	r7, #8276	; 0x2054
   10814:	movt	r7, #2
   10818:	mov	r5, #0
   1081c:	mov	ip, #1
   10820:	ldr	r4, [r7]
   10824:	mov	r8, r5
   10828:	mov	r9, r5
   1082c:	b	10848 <close@plt+0x64>
   10830:	cmp	r9, #0
   10834:	bne	10b30 <close@plt+0x34c>
   10838:	mov	r9, r3
   1083c:	add	ip, ip, #1
   10840:	cmp	ip, r0
   10844:	beq	108b8 <close@plt+0xd4>
   10848:	ldr	r3, [r1, #4]!
   1084c:	ldrb	lr, [r3]
   10850:	cmp	lr, #45	; 0x2d
   10854:	bne	10830 <close@plt+0x4c>
   10858:	ldrb	lr, [r3, #1]
   1085c:	cmp	lr, #100	; 0x64
   10860:	beq	1089c <close@plt+0xb8>
   10864:	cmp	lr, #115	; 0x73
   10868:	bne	10b8c <close@plt+0x3a8>
   1086c:	ldrb	r2, [r3, #2]
   10870:	cmp	r2, #0
   10874:	beq	109a0 <close@plt+0x1bc>
   10878:	movw	r1, #8268	; 0x204c
   1087c:	movt	r1, #2
   10880:	movw	r2, #4072	; 0xfe8
   10884:	movt	r2, #1
   10888:	ldr	r0, [r1]
   1088c:	mov	r1, #1
   10890:	str	r4, [r7]
   10894:	bl	107cc <__fprintf_chk@plt>
   10898:	bl	10d20 <close@plt+0x53c>
   1089c:	ldrb	r2, [r3, #2]
   108a0:	cmp	r2, #0
   108a4:	bne	10878 <close@plt+0x94>
   108a8:	add	ip, ip, #1
   108ac:	add	r4, r4, #1
   108b0:	cmp	ip, r0
   108b4:	bne	10848 <close@plt+0x64>
   108b8:	cmp	r9, #0
   108bc:	str	r4, [r7]
   108c0:	beq	10898 <close@plt+0xb4>
   108c4:	mov	r0, r9
   108c8:	movw	r1, #2050	; 0x802
   108cc:	bl	10784 <open64@plt>
   108d0:	subs	r4, r0, #0
   108d4:	blt	10b5c <close@plt+0x378>
   108d8:	movw	ip, #3524	; 0xdc4
   108dc:	movt	ip, #1
   108e0:	add	lr, sp, #24
   108e4:	cmp	r8, #0
   108e8:	ldr	r3, [ip, #12]
   108ec:	mov	r9, ip
   108f0:	ldr	r0, [ip]
   108f4:	add	r8, sp, #16
   108f8:	ldr	r1, [ip, #4]
   108fc:	ldr	r2, [ip, #8]
   10900:	ldrh	sl, [ip, #16]
   10904:	ldrb	ip, [ip, #18]
   10908:	stmia	lr!, {r0, r1, r2, r3}
   1090c:	movne	r3, #1
   10910:	ldr	r0, [r9, #20]!
   10914:	strbne	r3, [sp, #34]	; 0x22
   10918:	strh	sl, [lr]
   1091c:	ldr	r1, [r9, #4]
   10920:	strb	ip, [lr, #2]
   10924:	ldr	r2, [r7]
   10928:	stmia	r8!, {r0, r1}
   1092c:	mov	r1, #1
   10930:	strbne	r3, [sp, #22]
   10934:	cmp	r5, #0
   10938:	beq	109a8 <close@plt+0x1c4>
   1093c:	cmp	r2, #0
   10940:	add	r3, sp, #16
   10944:	str	r1, [sp, #4]
   10948:	mov	r0, r4
   1094c:	movne	r2, #2
   10950:	moveq	r2, #0
   10954:	str	r2, [sp, #8]
   10958:	mov	r2, #8
   1095c:	str	r2, [sp]
   10960:	mov	r2, #0
   10964:	bl	10760 <sg_ll_mode_select6@plt>
   10968:	mov	r8, r0
   1096c:	cmp	r8, #9
   10970:	ldrls	pc, [pc, r8, lsl #2]
   10974:	b	10ad8 <close@plt+0x2f4>
   10978:	muleq	r1, r4, sl
   1097c:	ldrdeq	r0, [r1], -r8
   10980:	andeq	r0, r1, r0, ror sl
   10984:	ldrdeq	r0, [r1], -r8
   10988:	ldrdeq	r0, [r1], -r8
   1098c:	andeq	r0, r1, r0, lsr #20
   10990:	ldrdeq	r0, [r1], -ip
   10994:	ldrdeq	r0, [r1], -r8
   10998:	ldrdeq	r0, [r1], -r8
   1099c:	andeq	r0, r1, r0, lsr #20
   109a0:	mov	r5, #1
   109a4:	b	1083c <close@plt+0x58>
   109a8:	cmp	r2, #0
   109ac:	add	r3, sp, #24
   109b0:	str	r1, [sp, #4]
   109b4:	mov	r0, r4
   109b8:	movne	r2, #2
   109bc:	moveq	r2, #0
   109c0:	str	r2, [sp, #8]
   109c4:	mov	r2, #19
   109c8:	str	r2, [sp]
   109cc:	mov	r2, r5
   109d0:	bl	107b4 <sg_ll_mode_select10@plt>
   109d4:	mov	r8, r0
   109d8:	b	1096c <close@plt+0x188>
   109dc:	movw	r3, #8268	; 0x204c
   109e0:	movt	r3, #2
   109e4:	movw	r0, #4248	; 0x1098
   109e8:	mov	r1, #1
   109ec:	ldr	r3, [r3]
   109f0:	movt	r0, #1
   109f4:	mov	r2, #15
   109f8:	bl	10778 <fwrite@plt>
   109fc:	mov	r0, r4
   10a00:	bl	107e4 <close@plt>
   10a04:	mov	r0, r8
   10a08:	ldr	r2, [sp, #44]	; 0x2c
   10a0c:	ldr	r3, [r6]
   10a10:	cmp	r2, r3
   10a14:	bne	10b58 <close@plt+0x374>
   10a18:	add	sp, sp, #48	; 0x30
   10a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a20:	movw	r3, #8268	; 0x204c
   10a24:	movt	r3, #2
   10a28:	cmp	r5, #0
   10a2c:	movw	ip, #4020	; 0xfb4
   10a30:	ldr	r0, [r3]
   10a34:	movt	ip, #1
   10a38:	movw	r1, #4028	; 0xfbc
   10a3c:	movw	r2, #4004	; 0xfa4
   10a40:	movt	r1, #1
   10a44:	movt	r2, #1
   10a48:	movw	r3, #4012	; 0xfac
   10a4c:	movt	r3, #1
   10a50:	movne	r1, ip
   10a54:	str	r1, [sp]
   10a58:	movne	r3, r2
   10a5c:	mov	r1, #1
   10a60:	movw	r2, #4172	; 0x104c
   10a64:	movt	r2, #1
   10a68:	bl	107cc <__fprintf_chk@plt>
   10a6c:	b	109fc <close@plt+0x218>
   10a70:	movw	r3, #8268	; 0x204c
   10a74:	movt	r3, #2
   10a78:	movw	r0, #4228	; 0x1084
   10a7c:	mov	r1, #1
   10a80:	ldr	r3, [r3]
   10a84:	mov	r2, #17
   10a88:	movt	r0, #1
   10a8c:	bl	10778 <fwrite@plt>
   10a90:	b	109fc <close@plt+0x218>
   10a94:	ldr	r3, [r7]
   10a98:	cmp	r3, #0
   10a9c:	beq	109fc <close@plt+0x218>
   10aa0:	cmp	r5, #0
   10aa4:	movw	r1, #8268	; 0x204c
   10aa8:	movw	r2, #4012	; 0xfac
   10aac:	movt	r1, #2
   10ab0:	movt	r2, #1
   10ab4:	movw	r3, #4004	; 0xfa4
   10ab8:	ldr	r0, [r1]
   10abc:	movt	r3, #1
   10ac0:	mov	r1, #1
   10ac4:	moveq	r3, r2
   10ac8:	movw	r2, #4148	; 0x1034
   10acc:	movt	r2, #1
   10ad0:	bl	107cc <__fprintf_chk@plt>
   10ad4:	b	109fc <close@plt+0x218>
   10ad8:	ldr	r3, [r7]
   10adc:	cmp	r3, #0
   10ae0:	beq	10b18 <close@plt+0x334>
   10ae4:	movw	r1, #8268	; 0x204c
   10ae8:	movw	r2, #4012	; 0xfac
   10aec:	movt	r1, #2
   10af0:	movt	r2, #1
   10af4:	cmp	r5, #0
   10af8:	movw	r3, #4004	; 0xfa4
   10afc:	ldr	r0, [r1]
   10b00:	movt	r3, #1
   10b04:	mov	r1, #1
   10b08:	moveq	r3, r2
   10b0c:	movw	r2, #4264	; 0x10a8
   10b10:	movt	r2, #1
   10b14:	bl	107cc <__fprintf_chk@plt>
   10b18:	mov	r0, r4
   10b1c:	bl	107e4 <close@plt>
   10b20:	cmp	r8, #0
   10b24:	movge	r0, r8
   10b28:	movlt	r0, #99	; 0x63
   10b2c:	b	10a08 <close@plt+0x224>
   10b30:	movw	r3, #8268	; 0x204c
   10b34:	movt	r3, #2
   10b38:	movw	r0, #4100	; 0x1004
   10b3c:	mov	r1, #1
   10b40:	ldr	r3, [r3]
   10b44:	mov	r2, #19
   10b48:	movt	r0, #1
   10b4c:	str	r4, [r7]
   10b50:	bl	10778 <fwrite@plt>
   10b54:	b	10898 <close@plt+0xb4>
   10b58:	bl	10754 <__stack_chk_fail@plt>
   10b5c:	movw	r1, #8268	; 0x204c
   10b60:	movt	r1, #2
   10b64:	mov	r3, r9
   10b68:	movw	r2, #4120	; 0x1018
   10b6c:	ldr	r0, [r1]
   10b70:	movt	r2, #1
   10b74:	mov	r1, #1
   10b78:	bl	107cc <__fprintf_chk@plt>
   10b7c:	movw	r0, #4096	; 0x1000
   10b80:	movt	r0, #1
   10b84:	bl	1076c <perror@plt>
   10b88:	b	10898 <close@plt+0xb4>
   10b8c:	cmp	lr, #104	; 0x68
   10b90:	bne	10bb4 <close@plt+0x3d0>
   10b94:	ldrb	r2, [r3, #2]
   10b98:	cmp	r2, #114	; 0x72
   10b9c:	bne	10878 <close@plt+0x94>
   10ba0:	ldrb	r2, [r3, #3]
   10ba4:	cmp	r2, #0
   10ba8:	bne	10878 <close@plt+0x94>
   10bac:	mov	r8, #1
   10bb0:	b	1083c <close@plt+0x58>
   10bb4:	cmp	lr, #86	; 0x56
   10bb8:	bne	10878 <close@plt+0x94>
   10bbc:	ldrb	r5, [r3, #2]
   10bc0:	cmp	r5, #0
   10bc4:	bne	10878 <close@plt+0x94>
   10bc8:	movw	r1, #4036	; 0xfc4
   10bcc:	movw	r2, #4056	; 0xfd8
   10bd0:	movt	r1, #1
   10bd4:	movt	r2, #1
   10bd8:	mov	r0, #1
   10bdc:	str	r4, [r7]
   10be0:	bl	107c0 <__printf_chk@plt>
   10be4:	mov	r0, r5
   10be8:	bl	107a8 <exit@plt>
   10bec:	mov	fp, #0
   10bf0:	mov	lr, #0
   10bf4:	pop	{r1}		; (ldr r1, [sp], #4)
   10bf8:	mov	r2, sp
   10bfc:	push	{r2}		; (str r2, [sp, #-4]!)
   10c00:	push	{r0}		; (str r0, [sp, #-4]!)
   10c04:	ldr	ip, [pc, #16]	; 10c1c <close@plt+0x438>
   10c08:	push	{ip}		; (str ip, [sp, #-4]!)
   10c0c:	ldr	r0, [pc, #12]	; 10c20 <close@plt+0x43c>
   10c10:	ldr	r3, [pc, #12]	; 10c24 <close@plt+0x440>
   10c14:	bl	10790 <__libc_start_main@plt>
   10c18:	bl	107d8 <abort@plt>
   10c1c:			; <UNDEFINED> instruction: 0x00010db0
   10c20:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10c24:	andeq	r0, r1, ip, asr #26
   10c28:	ldr	r3, [pc, #20]	; 10c44 <close@plt+0x460>
   10c2c:	ldr	r2, [pc, #20]	; 10c48 <close@plt+0x464>
   10c30:	add	r3, pc, r3
   10c34:	ldr	r2, [r3, r2]
   10c38:	cmp	r2, #0
   10c3c:	bxeq	lr
   10c40:	b	1079c <__gmon_start__@plt>
   10c44:	andeq	r1, r1, r8, asr #7
   10c48:	andeq	r0, r0, r0, asr #32
   10c4c:	push	{r3, lr}
   10c50:	movw	r0, #8264	; 0x2048
   10c54:	ldr	r3, [pc, #36]	; 10c80 <close@plt+0x49c>
   10c58:	movt	r0, #2
   10c5c:	rsb	r3, r0, r3
   10c60:	cmp	r3, #6
   10c64:	popls	{r3, pc}
   10c68:	movw	r3, #0
   10c6c:	movt	r3, #0
   10c70:	cmp	r3, #0
   10c74:	popeq	{r3, pc}
   10c78:	blx	r3
   10c7c:	pop	{r3, pc}
   10c80:	andeq	r2, r2, fp, asr #32
   10c84:	push	{r3, lr}
   10c88:	movw	r0, #8264	; 0x2048
   10c8c:	movw	r3, #8264	; 0x2048
   10c90:	movt	r0, #2
   10c94:	movt	r3, #2
   10c98:	rsb	r3, r0, r3
   10c9c:	asr	r3, r3, #2
   10ca0:	add	r3, r3, r3, lsr #31
   10ca4:	asrs	r1, r3, #1
   10ca8:	popeq	{r3, pc}
   10cac:	movw	r2, #0
   10cb0:	movt	r2, #0
   10cb4:	cmp	r2, #0
   10cb8:	popeq	{r3, pc}
   10cbc:	blx	r2
   10cc0:	pop	{r3, pc}
   10cc4:	push	{r4, lr}
   10cc8:	movw	r4, #8272	; 0x2050
   10ccc:	movt	r4, #2
   10cd0:	ldrb	r3, [r4]
   10cd4:	cmp	r3, #0
   10cd8:	popne	{r4, pc}
   10cdc:	bl	10c4c <close@plt+0x468>
   10ce0:	mov	r3, #1
   10ce4:	strb	r3, [r4]
   10ce8:	pop	{r4, pc}
   10cec:	movw	r0, #7932	; 0x1efc
   10cf0:	movt	r0, #2
   10cf4:	push	{r3, lr}
   10cf8:	ldr	r3, [r0]
   10cfc:	cmp	r3, #0
   10d00:	beq	10d18 <close@plt+0x534>
   10d04:	movw	r3, #0
   10d08:	movt	r3, #0
   10d0c:	cmp	r3, #0
   10d10:	beq	10d18 <close@plt+0x534>
   10d14:	blx	r3
   10d18:	pop	{r3, lr}
   10d1c:	b	10c84 <close@plt+0x4a0>
   10d20:	push	{r3, lr}
   10d24:	movw	r3, #8268	; 0x204c
   10d28:	movt	r3, #2
   10d2c:	movw	r0, #3552	; 0xde0
   10d30:	mov	r1, #1
   10d34:	movt	r0, #1
   10d38:	ldr	r3, [r3]
   10d3c:	movw	r2, #451	; 0x1c3
   10d40:	bl	10778 <fwrite@plt>
   10d44:	mov	r0, #1
   10d48:	bl	107a8 <exit@plt>
   10d4c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10d50:	mov	r7, r0
   10d54:	ldr	r6, [pc, #76]	; 10da8 <close@plt+0x5c4>
   10d58:	mov	r8, r1
   10d5c:	ldr	r5, [pc, #72]	; 10dac <close@plt+0x5c8>
   10d60:	mov	r9, r2
   10d64:	add	r6, pc, r6
   10d68:	bl	10734 <_init@@Base>
   10d6c:	add	r5, pc, r5
   10d70:	rsb	r6, r5, r6
   10d74:	asrs	r6, r6, #2
   10d78:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10d7c:	sub	r5, r5, #4
   10d80:	mov	r4, #0
   10d84:	add	r4, r4, #1
   10d88:	ldr	r3, [r5, #4]!
   10d8c:	mov	r0, r7
   10d90:	mov	r1, r8
   10d94:	mov	r2, r9
   10d98:	blx	r3
   10d9c:	cmp	r4, r6
   10da0:	bne	10d84 <close@plt+0x5a0>
   10da4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10da8:	andeq	r1, r1, ip, lsl #3
   10dac:	andeq	r1, r1, r0, lsl #3
   10db0:	bx	lr

Disassembly of section .fini:

00010db4 <_fini@@Base>:
   10db4:	push	{r3, lr}
   10db8:	pop	{r3, pc}
