
raspbian-preinstalled/rm:     file format elf32-littlearm


Disassembly of section .init:

00011084 <.init>:
   11084:	push	{r3, lr}
   11088:	bl	11aa0 <__assert_fail@plt+0x6cc>
   1108c:	pop	{r3, pc}

Disassembly of section .plt:

00011090 <fstatfs64@plt-0x14>:
   11090:	push	{lr}		; (str lr, [sp, #-4]!)
   11094:	ldr	lr, [pc, #4]	; 110a0 <fstatfs64@plt-0x4>
   11098:	add	lr, pc, lr
   1109c:	ldr	pc, [lr, #8]!
   110a0:	andeq	sl, r1, r0, ror #30

000110a4 <fstatfs64@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #106496	; 0x1a000
   110ac:	ldr	pc, [ip, #3936]!	; 0xf60

000110b0 <calloc@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #106496	; 0x1a000
   110b8:	ldr	pc, [ip, #3928]!	; 0xf58

000110bc <fputs_unlocked@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #106496	; 0x1a000
   110c4:	ldr	pc, [ip, #3920]!	; 0xf50

000110c8 <raise@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #106496	; 0x1a000
   110d0:	ldr	pc, [ip, #3912]!	; 0xf48

000110d4 <__getdelim@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #3904]!	; 0xf40

000110e0 <strcmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #3896]!	; 0xf38

000110ec <fflush@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #106496	; 0x1a000
   110f4:	ldr	pc, [ip, #3888]!	; 0xf30

000110f8 <unlinkat@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #106496	; 0x1a000
   11100:	ldr	pc, [ip, #3880]!	; 0xf28

00011104 <memmove@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #106496	; 0x1a000
   1110c:	ldr	pc, [ip, #3872]!	; 0xf20

00011110 <free@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #106496	; 0x1a000
   11118:	ldr	pc, [ip, #3864]!	; 0xf18

0001111c <faccessat@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3856]!	; 0xf10

00011128 <_exit@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3848]!	; 0xf08

00011134 <memcpy@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3840]!	; 0xf00

00011140 <mbsinit@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3832]!	; 0xef8

0001114c <memcmp@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3824]!	; 0xef0

00011158 <dcgettext@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3816]!	; 0xee8

00011164 <__stack_chk_fail@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3808]!	; 0xee0

00011170 <realloc@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3800]!	; 0xed8

0001117c <textdomain@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3792]!	; 0xed0

00011188 <geteuid@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3784]!	; 0xec8

00011194 <__fxstatat64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3776]!	; 0xec0

000111a0 <iswprint@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111ac <__fxstat64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111b8 <fwrite@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3752]!	; 0xea8

000111c4 <lseek64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3744]!	; 0xea0

000111d0 <__ctype_get_mb_cur_max@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3736]!	; 0xe98

000111dc <__fpending@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3728]!	; 0xe90

000111e8 <mbrtowc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3720]!	; 0xe88

000111f4 <error@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3712]!	; 0xe80

00011200 <open64@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3704]!	; 0xe78

0001120c <malloc@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3696]!	; 0xe70

00011218 <__libc_start_main@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3688]!	; 0xe68

00011224 <__freading@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3680]!	; 0xe60

00011230 <__gmon_start__@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3672]!	; 0xe58

0001123c <mempcpy@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3664]!	; 0xe50

00011248 <getopt_long@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3656]!	; 0xe48

00011254 <__ctype_b_loc@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3648]!	; 0xe40

00011260 <exit@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3640]!	; 0xe38

0001126c <strlen@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3632]!	; 0xe30

00011278 <openat64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3624]!	; 0xe28

00011284 <__errno_location@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3616]!	; 0xe20

00011290 <__cxa_atexit@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3608]!	; 0xe18

0001129c <memset@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3600]!	; 0xe10

000112a8 <__printf_chk@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3592]!	; 0xe08

000112b4 <fileno@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3584]!	; 0xe00

000112c0 <__fprintf_chk@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112cc <fclose@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112d8 <fseeko64@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3560]!	; 0xde8

000112e4 <fcntl64@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3552]!	; 0xde0

000112f0 <rpmatch@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3544]!	; 0xdd8

000112fc <__overflow@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3536]!	; 0xdd0

00011308 <setlocale@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3528]!	; 0xdc8

00011314 <strrchr@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011320 <nl_langinfo@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3512]!	; 0xdb8

0001132c <readdir64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3504]!	; 0xdb0

00011338 <fdopendir@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3496]!	; 0xda8

00011344 <dirfd@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3488]!	; 0xda0

00011350 <fchdir@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3480]!	; 0xd98

0001135c <qsort@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3472]!	; 0xd90

00011368 <bindtextdomain@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3464]!	; 0xd88

00011374 <__xstat64@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3456]!	; 0xd80

00011380 <isatty@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3448]!	; 0xd78

0001138c <strncmp@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3440]!	; 0xd70

00011398 <abort@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3432]!	; 0xd68

000113a4 <close@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3424]!	; 0xd60

000113b0 <__lxstat64@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #106496	; 0x1a000
   113b8:	ldr	pc, [ip, #3416]!	; 0xd58

000113bc <dcngettext@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #106496	; 0x1a000
   113c4:	ldr	pc, [ip, #3408]!	; 0xd50

000113c8 <closedir@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #106496	; 0x1a000
   113d0:	ldr	pc, [ip, #3400]!	; 0xd48

000113d4 <__assert_fail@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #106496	; 0x1a000
   113dc:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

000113e0 <fts_open@@Base-0x64d8>:
   113e0:	ldr	r3, [pc, #1492]	; 119bc <__assert_fail@plt+0x5e8>
   113e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113e8:	sub	sp, sp, #164	; 0xa4
   113ec:	ldr	r3, [r3]
   113f0:	mov	r7, r0
   113f4:	ldr	r0, [r1]
   113f8:	str	r3, [sp, #156]	; 0x9c
   113fc:	mov	r6, r1
   11400:	bl	13668 <__assert_fail@plt+0x2294>
   11404:	ldr	r1, [pc, #1460]	; 119c0 <__assert_fail@plt+0x5ec>
   11408:	mov	r0, #6
   1140c:	bl	11308 <setlocale@plt>
   11410:	ldr	r1, [pc, #1452]	; 119c4 <__assert_fail@plt+0x5f0>
   11414:	ldr	r0, [pc, #1452]	; 119c8 <__assert_fail@plt+0x5f4>
   11418:	bl	11368 <bindtextdomain@plt>
   1141c:	ldr	r0, [pc, #1444]	; 119c8 <__assert_fail@plt+0x5f4>
   11420:	mov	r5, #0
   11424:	bl	1117c <textdomain@plt>
   11428:	ldr	r0, [pc, #1436]	; 119cc <__assert_fail@plt+0x5f8>
   1142c:	bl	1a17c <fts_children@@Base+0x1c2c>
   11430:	mov	r3, #4
   11434:	mov	r0, r5
   11438:	str	r3, [sp, #32]
   1143c:	strb	r5, [sp, #28]
   11440:	strh	r5, [sp, #36]	; 0x24
   11444:	strb	r5, [sp, #38]	; 0x26
   11448:	str	r5, [sp, #40]	; 0x28
   1144c:	strb	r5, [sp, #44]	; 0x2c
   11450:	bl	11380 <isatty@plt>
   11454:	ldr	r3, [pc, #1396]	; 119d0 <__assert_fail@plt+0x5fc>
   11458:	ldr	r8, [pc, #1396]	; 119d4 <__assert_fail@plt+0x600>
   1145c:	ldr	sl, [pc, #1396]	; 119d8 <__assert_fail@plt+0x604>
   11460:	add	r9, r3, #108	; 0x6c
   11464:	mov	fp, #1
   11468:	strh	r5, [sp, #46]	; 0x2e
   1146c:	subs	r0, r0, r5
   11470:	movne	r0, #1
   11474:	strb	r0, [sp, #45]	; 0x2d
   11478:	mov	r4, #0
   1147c:	str	r4, [sp]
   11480:	mov	r3, r9
   11484:	mov	r2, r8
   11488:	mov	r1, r6
   1148c:	mov	r0, r7
   11490:	bl	11248 <getopt_long@plt>
   11494:	cmn	r0, #1
   11498:	beq	116e4 <__assert_fail@plt+0x310>
   1149c:	cmp	r0, #105	; 0x69
   114a0:	beq	11684 <__assert_fail@plt+0x2b0>
   114a4:	ble	11504 <__assert_fail@plt+0x130>
   114a8:	cmp	r0, sl
   114ac:	beq	116c4 <__assert_fail@plt+0x2f0>
   114b0:	ble	11578 <__assert_fail@plt+0x1a4>
   114b4:	ldr	r3, [pc, #1312]	; 119dc <__assert_fail@plt+0x608>
   114b8:	cmp	r0, r3
   114bc:	beq	11698 <__assert_fail@plt+0x2c4>
   114c0:	bge	11538 <__assert_fail@plt+0x164>
   114c4:	ldr	r3, [pc, #1300]	; 119e0 <__assert_fail@plt+0x60c>
   114c8:	ldr	r1, [pc, #1300]	; 119e4 <__assert_fail@plt+0x610>
   114cc:	ldr	r3, [r3]
   114d0:	sub	r3, r3, #-1073741823	; 0xc0000001
   114d4:	ldr	r0, [r6, r3, lsl #2]
   114d8:	bl	110e0 <strcmp@plt>
   114dc:	subs	fp, r0, #0
   114e0:	beq	11478 <__assert_fail@plt+0xa4>
   114e4:	mov	r2, #5
   114e8:	ldr	r1, [pc, #1272]	; 119e8 <__assert_fail@plt+0x614>
   114ec:	mov	r0, r4
   114f0:	bl	11158 <dcgettext@plt>
   114f4:	mov	r1, r4
   114f8:	mov	r2, r0
   114fc:	mov	r0, #1
   11500:	bl	111f4 <error@plt>
   11504:	cmp	r0, #73	; 0x49
   11508:	beq	11664 <__assert_fail@plt+0x290>
   1150c:	ble	11608 <__assert_fail@plt+0x234>
   11510:	cmp	r0, #100	; 0x64
   11514:	beq	116d0 <__assert_fail@plt+0x2fc>
   11518:	cmp	r0, #102	; 0x66
   1151c:	bne	115f4 <__assert_fail@plt+0x220>
   11520:	mov	r2, #5
   11524:	mov	r3, #1
   11528:	mov	r5, r4
   1152c:	str	r2, [sp, #32]
   11530:	strb	r3, [sp, #28]
   11534:	b	11478 <__assert_fail@plt+0xa4>
   11538:	cmp	r0, #260	; 0x104
   1153c:	bne	11554 <__assert_fail@plt+0x180>
   11540:	mov	r3, #1
   11544:	strb	r3, [sp, #45]	; 0x2d
   11548:	b	11478 <__assert_fail@plt+0xa4>
   1154c:	cmp	r0, #114	; 0x72
   11550:	beq	115fc <__assert_fail@plt+0x228>
   11554:	mov	r4, #1
   11558:	cmp	r7, r4
   1155c:	ble	11908 <__assert_fail@plt+0x534>
   11560:	ldr	r5, [r6, r4, lsl #2]
   11564:	ldrb	r3, [r5]
   11568:	cmp	r3, #45	; 0x2d
   1156c:	beq	1188c <__assert_fail@plt+0x4b8>
   11570:	add	r4, r4, #1
   11574:	b	11558 <__assert_fail@plt+0x184>
   11578:	cmp	r0, #118	; 0x76
   1157c:	beq	11678 <__assert_fail@plt+0x2a4>
   11580:	cmp	r0, #256	; 0x100
   11584:	bne	1154c <__assert_fail@plt+0x178>
   11588:	ldr	r3, [pc, #1116]	; 119ec <__assert_fail@plt+0x618>
   1158c:	ldr	r1, [r3]
   11590:	cmp	r1, #0
   11594:	beq	115e0 <__assert_fail@plt+0x20c>
   11598:	ldr	r2, [pc, #1104]	; 119f0 <__assert_fail@plt+0x61c>
   1159c:	ldr	r3, [pc, #1104]	; 119f4 <__assert_fail@plt+0x620>
   115a0:	mov	r0, #4
   115a4:	ldr	r2, [r2]
   115a8:	str	r0, [sp]
   115ac:	str	r2, [sp, #4]
   115b0:	ldr	r0, [pc, #1088]	; 119f8 <__assert_fail@plt+0x624>
   115b4:	add	r2, r3, #24
   115b8:	bl	13128 <__assert_fail@plt+0x1d54>
   115bc:	ldr	r3, [pc, #1036]	; 119d0 <__assert_fail@plt+0x5fc>
   115c0:	add	r0, r3, r0, lsl #2
   115c4:	ldr	r3, [r0, #56]	; 0x38
   115c8:	cmp	r3, #1
   115cc:	beq	11730 <__assert_fail@plt+0x35c>
   115d0:	cmp	r3, #0
   115d4:	beq	11720 <__assert_fail@plt+0x34c>
   115d8:	cmp	r3, #2
   115dc:	bne	11478 <__assert_fail@plt+0xa4>
   115e0:	mov	r3, #3
   115e4:	mov	r5, #0
   115e8:	str	r3, [sp, #32]
   115ec:	strb	r5, [sp, #28]
   115f0:	b	11478 <__assert_fail@plt+0xa4>
   115f4:	cmp	r0, #82	; 0x52
   115f8:	bne	11554 <__assert_fail@plt+0x180>
   115fc:	mov	r3, #1
   11600:	strb	r3, [sp, #37]	; 0x25
   11604:	b	11478 <__assert_fail@plt+0xa4>
   11608:	cmn	r0, #3
   1160c:	bne	11654 <__assert_fail@plt+0x280>
   11610:	ldr	r3, [pc, #996]	; 119fc <__assert_fail@plt+0x628>
   11614:	ldr	r0, [pc, #996]	; 11a00 <__assert_fail@plt+0x62c>
   11618:	ldr	r2, [pc, #996]	; 11a04 <__assert_fail@plt+0x630>
   1161c:	ldr	ip, [pc, #996]	; 11a08 <__assert_fail@plt+0x634>
   11620:	ldr	r1, [pc, #996]	; 11a0c <__assert_fail@plt+0x638>
   11624:	str	r4, [sp, #16]
   11628:	ldr	r0, [r0]
   1162c:	ldr	r3, [r3]
   11630:	str	r2, [sp, #12]
   11634:	ldr	r2, [pc, #980]	; 11a10 <__assert_fail@plt+0x63c>
   11638:	stmib	sp, {r1, ip}
   1163c:	str	r2, [sp]
   11640:	ldr	r1, [pc, #972]	; 11a14 <__assert_fail@plt+0x640>
   11644:	ldr	r2, [pc, #972]	; 11a18 <__assert_fail@plt+0x644>
   11648:	bl	15da0 <__assert_fail@plt+0x49cc>
   1164c:	mov	r0, r4
   11650:	bl	11260 <exit@plt>
   11654:	cmn	r0, #2
   11658:	bne	11554 <__assert_fail@plt+0x180>
   1165c:	mov	r0, r4
   11660:	bl	11b54 <__assert_fail@plt+0x780>
   11664:	mov	r3, #4
   11668:	strb	r4, [sp, #28]
   1166c:	str	r3, [sp, #32]
   11670:	mov	r5, #1
   11674:	b	11478 <__assert_fail@plt+0xa4>
   11678:	mov	r3, #1
   1167c:	strb	r3, [sp, #46]	; 0x2e
   11680:	b	11478 <__assert_fail@plt+0xa4>
   11684:	mov	r3, #3
   11688:	strb	r4, [sp, #28]
   1168c:	mov	r5, r4
   11690:	str	r3, [sp, #32]
   11694:	b	11478 <__assert_fail@plt+0xa4>
   11698:	ldr	r3, [pc, #844]	; 119ec <__assert_fail@plt+0x618>
   1169c:	ldr	r0, [r3]
   116a0:	cmp	r0, #0
   116a4:	beq	116dc <__assert_fail@plt+0x308>
   116a8:	ldr	r1, [pc, #876]	; 11a1c <__assert_fail@plt+0x648>
   116ac:	bl	110e0 <strcmp@plt>
   116b0:	cmp	r0, #0
   116b4:	bne	1199c <__assert_fail@plt+0x5c8>
   116b8:	mov	fp, #1
   116bc:	strb	fp, [sp, #44]	; 0x2c
   116c0:	b	11478 <__assert_fail@plt+0xa4>
   116c4:	mov	r3, #1
   116c8:	strb	r3, [sp, #36]	; 0x24
   116cc:	b	11478 <__assert_fail@plt+0xa4>
   116d0:	mov	r3, #1
   116d4:	strb	r3, [sp, #38]	; 0x26
   116d8:	b	11478 <__assert_fail@plt+0xa4>
   116dc:	mov	fp, #1
   116e0:	b	11478 <__assert_fail@plt+0xa4>
   116e4:	ldr	r4, [pc, #756]	; 119e0 <__assert_fail@plt+0x60c>
   116e8:	ldr	r3, [r4]
   116ec:	cmp	r3, r7
   116f0:	blt	11744 <__assert_fail@plt+0x370>
   116f4:	ldrb	r4, [sp, #28]
   116f8:	cmp	r4, #0
   116fc:	beq	11978 <__assert_fail@plt+0x5a4>
   11700:	mov	r0, #0
   11704:	ldr	r3, [pc, #688]	; 119bc <__assert_fail@plt+0x5e8>
   11708:	ldr	r2, [sp, #156]	; 0x9c
   1170c:	ldr	r3, [r3]
   11710:	cmp	r2, r3
   11714:	bne	11974 <__assert_fail@plt+0x5a0>
   11718:	add	sp, sp, #164	; 0xa4
   1171c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11720:	mov	r3, #5
   11724:	str	r3, [sp, #32]
   11728:	mov	r5, #0
   1172c:	b	11478 <__assert_fail@plt+0xa4>
   11730:	mov	r2, #4
   11734:	str	r2, [sp, #32]
   11738:	strb	r4, [sp, #28]
   1173c:	mov	r5, r3
   11740:	b	11478 <__assert_fail@plt+0xa4>
   11744:	ldrb	r3, [sp, #37]	; 0x25
   11748:	tst	fp, r3
   1174c:	bne	11910 <__assert_fail@plt+0x53c>
   11750:	ldr	r3, [r4]
   11754:	cmp	r5, #0
   11758:	add	r6, r6, r3, lsl #2
   1175c:	beq	117fc <__assert_fail@plt+0x428>
   11760:	ldrb	r2, [sp, #37]	; 0x25
   11764:	sub	r7, r7, r3
   11768:	mov	r4, r7
   1176c:	cmp	r2, #0
   11770:	asr	r5, r7, #31
   11774:	bne	11834 <__assert_fail@plt+0x460>
   11778:	cmp	r5, #0
   1177c:	cmpeq	r7, #3
   11780:	bls	117fc <__assert_fail@plt+0x428>
   11784:	ldr	r3, [pc, #660]	; 11a20 <__assert_fail@plt+0x64c>
   11788:	mov	r1, #0
   1178c:	mvn	r0, #0
   11790:	cmp	r5, r1
   11794:	cmpeq	r7, r0
   11798:	ldr	r8, [r3]
   1179c:	bls	11964 <__assert_fail@plt+0x590>
   117a0:	ldr	r2, [pc, #636]	; 11a24 <__assert_fail@plt+0x650>
   117a4:	mov	r3, #0
   117a8:	mov	r0, r4
   117ac:	mov	r1, r5
   117b0:	bl	19fa4 <fts_children@@Base+0x1a54>
   117b4:	add	r3, r2, #999424	; 0xf4000
   117b8:	add	r3, r3, #576	; 0x240
   117bc:	mov	r2, #5
   117c0:	str	r2, [sp]
   117c4:	ldr	r1, [pc, #604]	; 11a28 <__assert_fail@plt+0x654>
   117c8:	ldr	r2, [pc, #604]	; 11a2c <__assert_fail@plt+0x658>
   117cc:	mov	r0, #0
   117d0:	bl	113bc <dcngettext@plt>
   117d4:	mov	r2, r0
   117d8:	ldr	r3, [pc, #592]	; 11a30 <__assert_fail@plt+0x65c>
   117dc:	strd	r4, [sp]
   117e0:	mov	r1, #1
   117e4:	ldr	r3, [r3]
   117e8:	mov	r0, r8
   117ec:	bl	112c0 <__fprintf_chk@plt>
   117f0:	bl	161e8 <__assert_fail@plt+0x4e14>
   117f4:	cmp	r0, #0
   117f8:	beq	11700 <__assert_fail@plt+0x32c>
   117fc:	mov	r0, r6
   11800:	add	r1, sp, #28
   11804:	bl	12604 <__assert_fail@plt+0x1230>
   11808:	sub	r3, r0, #2
   1180c:	cmp	r3, #2
   11810:	subls	r0, r0, #4
   11814:	clzls	r0, r0
   11818:	lsrls	r0, r0, #5
   1181c:	bls	11704 <__assert_fail@plt+0x330>
   11820:	ldr	r3, [pc, #524]	; 11a34 <__assert_fail@plt+0x660>
   11824:	ldr	r2, [pc, #524]	; 11a38 <__assert_fail@plt+0x664>
   11828:	ldr	r1, [pc, #524]	; 11a3c <__assert_fail@plt+0x668>
   1182c:	ldr	r0, [pc, #524]	; 11a40 <__assert_fail@plt+0x66c>
   11830:	bl	113d4 <__assert_fail@plt>
   11834:	ldr	r3, [pc, #484]	; 11a20 <__assert_fail@plt+0x64c>
   11838:	mov	r1, #0
   1183c:	mvn	r0, #0
   11840:	cmp	r5, r1
   11844:	cmpeq	r7, r0
   11848:	ldr	r8, [r3]
   1184c:	bls	1196c <__assert_fail@plt+0x598>
   11850:	ldr	r2, [pc, #460]	; 11a24 <__assert_fail@plt+0x650>
   11854:	mov	r3, #0
   11858:	mov	r0, r4
   1185c:	mov	r1, r5
   11860:	bl	19fa4 <fts_children@@Base+0x1a54>
   11864:	add	r3, r2, #999424	; 0xf4000
   11868:	add	r3, r3, #576	; 0x240
   1186c:	mov	r2, #5
   11870:	str	r2, [sp]
   11874:	ldr	r1, [pc, #456]	; 11a44 <__assert_fail@plt+0x670>
   11878:	ldr	r2, [pc, #456]	; 11a48 <__assert_fail@plt+0x674>
   1187c:	mov	r0, #0
   11880:	bl	113bc <dcngettext@plt>
   11884:	mov	r2, r0
   11888:	b	117d8 <__assert_fail@plt+0x404>
   1188c:	ldrb	r3, [r5, #1]
   11890:	cmp	r3, #0
   11894:	beq	11570 <__assert_fail@plt+0x19c>
   11898:	add	r2, sp, #48	; 0x30
   1189c:	mov	r1, r5
   118a0:	mov	r0, #3
   118a4:	bl	113b0 <__lxstat64@plt>
   118a8:	cmp	r0, #0
   118ac:	bne	11570 <__assert_fail@plt+0x19c>
   118b0:	ldr	r3, [pc, #360]	; 11a20 <__assert_fail@plt+0x64c>
   118b4:	mov	r2, #5
   118b8:	ldr	r1, [pc, #396]	; 11a4c <__assert_fail@plt+0x678>
   118bc:	ldr	r4, [r3]
   118c0:	bl	11158 <dcgettext@plt>
   118c4:	mov	r2, r5
   118c8:	mov	r1, #3
   118cc:	ldr	r6, [r6]
   118d0:	mov	r7, r0
   118d4:	mov	r0, #1
   118d8:	bl	15570 <__assert_fail@plt+0x419c>
   118dc:	mov	r1, r5
   118e0:	mov	r8, r0
   118e4:	mov	r0, #4
   118e8:	bl	15624 <__assert_fail@plt+0x4250>
   118ec:	str	r8, [sp]
   118f0:	mov	r3, r6
   118f4:	mov	r2, r7
   118f8:	mov	r1, #1
   118fc:	str	r0, [sp, #4]
   11900:	mov	r0, r4
   11904:	bl	112c0 <__fprintf_chk@plt>
   11908:	mov	r0, #1
   1190c:	bl	11b54 <__assert_fail@plt+0x780>
   11910:	ldr	r0, [pc, #312]	; 11a50 <__assert_fail@plt+0x67c>
   11914:	bl	158e4 <__assert_fail@plt+0x4510>
   11918:	cmp	r0, #0
   1191c:	mov	r8, r0
   11920:	str	r0, [sp, #40]	; 0x28
   11924:	bne	11750 <__assert_fail@plt+0x37c>
   11928:	bl	11284 <__errno_location@plt>
   1192c:	ldr	r1, [pc, #288]	; 11a54 <__assert_fail@plt+0x680>
   11930:	mov	r2, #5
   11934:	ldr	r4, [r0]
   11938:	mov	r0, r8
   1193c:	bl	11158 <dcgettext@plt>
   11940:	ldr	r1, [pc, #272]	; 11a58 <__assert_fail@plt+0x684>
   11944:	mov	r5, r0
   11948:	mov	r0, #4
   1194c:	bl	15624 <__assert_fail@plt+0x4250>
   11950:	mov	r2, r5
   11954:	mov	r1, r4
   11958:	mov	r3, r0
   1195c:	mov	r0, #1
   11960:	bl	111f4 <error@plt>
   11964:	mov	r3, r7
   11968:	b	117bc <__assert_fail@plt+0x3e8>
   1196c:	mov	r3, r7
   11970:	b	1186c <__assert_fail@plt+0x498>
   11974:	bl	11164 <__stack_chk_fail@plt>
   11978:	mov	r2, #5
   1197c:	ldr	r1, [pc, #216]	; 11a5c <__assert_fail@plt+0x688>
   11980:	mov	r0, r4
   11984:	bl	11158 <dcgettext@plt>
   11988:	mov	r1, r4
   1198c:	mov	r2, r0
   11990:	mov	r0, r4
   11994:	bl	111f4 <error@plt>
   11998:	b	11908 <__assert_fail@plt+0x534>
   1199c:	ldr	r1, [pc, #188]	; 11a60 <__assert_fail@plt+0x68c>
   119a0:	mov	r2, #5
   119a4:	mov	r0, r4
   119a8:	bl	11158 <dcgettext@plt>
   119ac:	ldr	r3, [pc, #56]	; 119ec <__assert_fail@plt+0x618>
   119b0:	ldr	r1, [r3]
   119b4:	mov	r5, r0
   119b8:	b	11948 <__assert_fail@plt+0x574>
   119bc:	andeq	fp, r2, r8, lsl #30
   119c0:	strdeq	fp, [r1], -r4
   119c4:	andeq	sl, r1, r0, lsr #22
   119c8:	andeq	sl, r1, r4, ror sl
   119cc:	andeq	r3, r1, ip, ror #3
   119d0:	andeq	sl, r1, r0, lsr #3
   119d4:	andeq	sl, r1, r8, lsr #24
   119d8:	andeq	r0, r0, r1, lsl #2
   119dc:	andeq	r0, r0, r3, lsl #2
   119e0:	andeq	ip, r2, r0, lsl #3
   119e4:	andeq	sl, r1, r4, asr #22
   119e8:	andeq	sl, r1, r8, asr fp
   119ec:	muleq	r2, r8, r1
   119f0:	andeq	ip, r2, r0, lsr r1
   119f4:	ldrdeq	sl, [r1], -r8
   119f8:	andeq	sl, r1, r4, lsr fp
   119fc:	andeq	ip, r2, ip, lsr #2
   11a00:	muleq	r2, r4, r1
   11a04:	andeq	sl, r1, r0, asr #23
   11a08:	ldrdeq	sl, [r1], -r0
   11a0c:	andeq	sl, r1, r4, ror #23
   11a10:	strdeq	sl, [r1], -r4
   11a14:	ldrdeq	sl, [r1], -r4
   11a18:	andeq	sl, r1, r0, ror sl
   11a1c:	muleq	r1, r0, fp
   11a20:	andeq	ip, r2, r8, lsl #3
   11a24:	andeq	r4, pc, r0, asr #4
   11a28:	ldrdeq	sl, [r1], -r0
   11a2c:			; <UNDEFINED> instruction: 0x0001acb4
   11a30:			; <UNDEFINED> instruction: 0x0002c1bc
   11a34:	andeq	sl, r1, ip, asr #5
   11a38:	andeq	r0, r0, r3, ror r1
   11a3c:	andeq	sl, r1, ip, ror #25
   11a40:	strdeq	sl, [r1], -r8
   11a44:	andeq	sl, r1, ip, lsl #25
   11a48:	andeq	sl, r1, r4, ror #24
   11a4c:	andeq	sl, r1, r0, lsl #24
   11a50:	andeq	ip, r2, r0, lsr #3
   11a54:	andeq	sl, r1, r0, asr #24
   11a58:	andeq	sl, r1, r0, ror #24
   11a5c:	andeq	sl, r1, r0, lsr ip
   11a60:	muleq	r1, r4, fp
   11a64:	mov	fp, #0
   11a68:	mov	lr, #0
   11a6c:	pop	{r1}		; (ldr r1, [sp], #4)
   11a70:	mov	r2, sp
   11a74:	push	{r2}		; (str r2, [sp, #-4]!)
   11a78:	push	{r0}		; (str r0, [sp, #-4]!)
   11a7c:	ldr	ip, [pc, #16]	; 11a94 <__assert_fail@plt+0x6c0>
   11a80:	push	{ip}		; (str ip, [sp, #-4]!)
   11a84:	ldr	r0, [pc, #12]	; 11a98 <__assert_fail@plt+0x6c4>
   11a88:	ldr	r3, [pc, #12]	; 11a9c <__assert_fail@plt+0x6c8>
   11a8c:	bl	11218 <__libc_start_main@plt>
   11a90:	bl	11398 <abort@plt>
   11a94:	andeq	sl, r1, r8, ror r1
   11a98:	andeq	r1, r1, r0, ror #7
   11a9c:	andeq	sl, r1, r8, lsl r1
   11aa0:	ldr	r3, [pc, #20]	; 11abc <__assert_fail@plt+0x6e8>
   11aa4:	ldr	r2, [pc, #20]	; 11ac0 <__assert_fail@plt+0x6ec>
   11aa8:	add	r3, pc, r3
   11aac:	ldr	r2, [r3, r2]
   11ab0:	cmp	r2, #0
   11ab4:	bxeq	lr
   11ab8:	b	11230 <__gmon_start__@plt>
   11abc:	andeq	sl, r1, r0, asr r5
   11ac0:	andeq	r0, r0, r0, lsr #2
   11ac4:	ldr	r0, [pc, #24]	; 11ae4 <__assert_fail@plt+0x710>
   11ac8:	ldr	r3, [pc, #24]	; 11ae8 <__assert_fail@plt+0x714>
   11acc:	cmp	r3, r0
   11ad0:	bxeq	lr
   11ad4:	ldr	r3, [pc, #16]	; 11aec <__assert_fail@plt+0x718>
   11ad8:	cmp	r3, #0
   11adc:	bxeq	lr
   11ae0:	bx	r3
   11ae4:	andeq	ip, r2, r8, ror r1
   11ae8:	andeq	ip, r2, r8, ror r1
   11aec:	andeq	r0, r0, r0
   11af0:	ldr	r0, [pc, #36]	; 11b1c <__assert_fail@plt+0x748>
   11af4:	ldr	r1, [pc, #36]	; 11b20 <__assert_fail@plt+0x74c>
   11af8:	sub	r1, r1, r0
   11afc:	asr	r1, r1, #2
   11b00:	add	r1, r1, r1, lsr #31
   11b04:	asrs	r1, r1, #1
   11b08:	bxeq	lr
   11b0c:	ldr	r3, [pc, #16]	; 11b24 <__assert_fail@plt+0x750>
   11b10:	cmp	r3, #0
   11b14:	bxeq	lr
   11b18:	bx	r3
   11b1c:	andeq	ip, r2, r8, ror r1
   11b20:	andeq	ip, r2, r8, ror r1
   11b24:	andeq	r0, r0, r0
   11b28:	push	{r4, lr}
   11b2c:	ldr	r4, [pc, #24]	; 11b4c <__assert_fail@plt+0x778>
   11b30:	ldrb	r3, [r4]
   11b34:	cmp	r3, #0
   11b38:	popne	{r4, pc}
   11b3c:	bl	11ac4 <__assert_fail@plt+0x6f0>
   11b40:	mov	r3, #1
   11b44:	strb	r3, [r4]
   11b48:	pop	{r4, pc}
   11b4c:	muleq	r2, ip, r1
   11b50:	b	11af0 <__assert_fail@plt+0x71c>
   11b54:	ldr	r3, [pc, #828]	; 11e98 <__assert_fail@plt+0xac4>
   11b58:	push	{r7, lr}
   11b5c:	sub	sp, sp, #64	; 0x40
   11b60:	ldr	r3, [r3]
   11b64:	subs	r4, r0, #0
   11b68:	str	r3, [sp, #60]	; 0x3c
   11b6c:	beq	11ba8 <__assert_fail@plt+0x7d4>
   11b70:	ldr	r3, [pc, #804]	; 11e9c <__assert_fail@plt+0xac8>
   11b74:	mov	r2, #5
   11b78:	ldr	r1, [pc, #800]	; 11ea0 <__assert_fail@plt+0xacc>
   11b7c:	mov	r0, #0
   11b80:	ldr	r5, [r3]
   11b84:	bl	11158 <dcgettext@plt>
   11b88:	ldr	r3, [pc, #788]	; 11ea4 <__assert_fail@plt+0xad0>
   11b8c:	mov	r1, #1
   11b90:	ldr	r3, [r3]
   11b94:	mov	r2, r0
   11b98:	mov	r0, r5
   11b9c:	bl	112c0 <__fprintf_chk@plt>
   11ba0:	mov	r0, r4
   11ba4:	bl	11260 <exit@plt>
   11ba8:	mov	r2, #5
   11bac:	ldr	r1, [pc, #756]	; 11ea8 <__assert_fail@plt+0xad4>
   11bb0:	bl	11158 <dcgettext@plt>
   11bb4:	ldr	r6, [pc, #744]	; 11ea4 <__assert_fail@plt+0xad0>
   11bb8:	ldr	r5, [pc, #748]	; 11eac <__assert_fail@plt+0xad8>
   11bbc:	ldr	r2, [r6]
   11bc0:	mov	r1, r0
   11bc4:	mov	r0, #1
   11bc8:	bl	112a8 <__printf_chk@plt>
   11bcc:	mov	r2, #5
   11bd0:	ldr	r1, [pc, #728]	; 11eb0 <__assert_fail@plt+0xadc>
   11bd4:	mov	r0, r4
   11bd8:	bl	11158 <dcgettext@plt>
   11bdc:	ldr	r1, [r5]
   11be0:	bl	110bc <fputs_unlocked@plt>
   11be4:	mov	r2, #5
   11be8:	ldr	r1, [pc, #708]	; 11eb4 <__assert_fail@plt+0xae0>
   11bec:	mov	r0, r4
   11bf0:	bl	11158 <dcgettext@plt>
   11bf4:	ldr	r1, [r5]
   11bf8:	bl	110bc <fputs_unlocked@plt>
   11bfc:	mov	r2, #5
   11c00:	ldr	r1, [pc, #688]	; 11eb8 <__assert_fail@plt+0xae4>
   11c04:	mov	r0, r4
   11c08:	bl	11158 <dcgettext@plt>
   11c0c:	ldr	r1, [r5]
   11c10:	bl	110bc <fputs_unlocked@plt>
   11c14:	mov	r2, #5
   11c18:	ldr	r1, [pc, #668]	; 11ebc <__assert_fail@plt+0xae8>
   11c1c:	mov	r0, r4
   11c20:	bl	11158 <dcgettext@plt>
   11c24:	ldr	r1, [r5]
   11c28:	bl	110bc <fputs_unlocked@plt>
   11c2c:	mov	r2, #5
   11c30:	ldr	r1, [pc, #648]	; 11ec0 <__assert_fail@plt+0xaec>
   11c34:	mov	r0, r4
   11c38:	bl	11158 <dcgettext@plt>
   11c3c:	ldr	r1, [r5]
   11c40:	bl	110bc <fputs_unlocked@plt>
   11c44:	mov	r2, #5
   11c48:	ldr	r1, [pc, #628]	; 11ec4 <__assert_fail@plt+0xaf0>
   11c4c:	mov	r0, r4
   11c50:	bl	11158 <dcgettext@plt>
   11c54:	ldr	r1, [r5]
   11c58:	bl	110bc <fputs_unlocked@plt>
   11c5c:	mov	r2, #5
   11c60:	ldr	r1, [pc, #608]	; 11ec8 <__assert_fail@plt+0xaf4>
   11c64:	mov	r0, r4
   11c68:	bl	11158 <dcgettext@plt>
   11c6c:	ldr	r1, [r5]
   11c70:	bl	110bc <fputs_unlocked@plt>
   11c74:	mov	r2, #5
   11c78:	ldr	r1, [pc, #588]	; 11ecc <__assert_fail@plt+0xaf8>
   11c7c:	mov	r0, r4
   11c80:	bl	11158 <dcgettext@plt>
   11c84:	ldr	r1, [r5]
   11c88:	bl	110bc <fputs_unlocked@plt>
   11c8c:	mov	r2, #5
   11c90:	ldr	r1, [pc, #568]	; 11ed0 <__assert_fail@plt+0xafc>
   11c94:	mov	r0, r4
   11c98:	bl	11158 <dcgettext@plt>
   11c9c:	ldr	r3, [r6]
   11ca0:	mov	r2, r3
   11ca4:	mov	r1, r0
   11ca8:	mov	r0, #1
   11cac:	bl	112a8 <__printf_chk@plt>
   11cb0:	mov	r2, #5
   11cb4:	ldr	r1, [pc, #536]	; 11ed4 <__assert_fail@plt+0xb00>
   11cb8:	mov	r0, r4
   11cbc:	bl	11158 <dcgettext@plt>
   11cc0:	ldr	r1, [r5]
   11cc4:	bl	110bc <fputs_unlocked@plt>
   11cc8:	ldr	lr, [pc, #520]	; 11ed8 <__assert_fail@plt+0xb04>
   11ccc:	add	ip, sp, #4
   11cd0:	ldm	lr!, {r0, r1, r2, r3}
   11cd4:	stmia	ip!, {r0, r1, r2, r3}
   11cd8:	ldm	lr!, {r0, r1, r2, r3}
   11cdc:	ldr	r6, [sp, #4]
   11ce0:	stmia	ip!, {r0, r1, r2, r3}
   11ce4:	cmp	r6, #0
   11ce8:	ldm	lr!, {r0, r1, r2, r3}
   11cec:	addeq	r5, sp, #4
   11cf0:	stmia	ip!, {r0, r1, r2, r3}
   11cf4:	ldm	lr, {r0, r1}
   11cf8:	stm	ip, {r0, r1}
   11cfc:	beq	11d2c <__assert_fail@plt+0x958>
   11d00:	ldr	r7, [pc, #468]	; 11edc <__assert_fail@plt+0xb08>
   11d04:	add	r5, sp, #4
   11d08:	b	11d18 <__assert_fail@plt+0x944>
   11d0c:	ldr	r6, [r5, #8]!
   11d10:	cmp	r6, #0
   11d14:	beq	11d2c <__assert_fail@plt+0x958>
   11d18:	mov	r1, r6
   11d1c:	mov	r0, r7
   11d20:	bl	110e0 <strcmp@plt>
   11d24:	cmp	r0, #0
   11d28:	bne	11d0c <__assert_fail@plt+0x938>
   11d2c:	ldr	r5, [r5, #4]
   11d30:	mov	r2, #5
   11d34:	cmp	r5, #0
   11d38:	ldr	r1, [pc, #416]	; 11ee0 <__assert_fail@plt+0xb0c>
   11d3c:	beq	11de4 <__assert_fail@plt+0xa10>
   11d40:	mov	r0, #0
   11d44:	bl	11158 <dcgettext@plt>
   11d48:	ldr	r3, [pc, #404]	; 11ee4 <__assert_fail@plt+0xb10>
   11d4c:	ldr	r2, [pc, #404]	; 11ee8 <__assert_fail@plt+0xb14>
   11d50:	mov	r1, r0
   11d54:	mov	r0, #1
   11d58:	bl	112a8 <__printf_chk@plt>
   11d5c:	mov	r1, #0
   11d60:	mov	r0, #5
   11d64:	bl	11308 <setlocale@plt>
   11d68:	cmp	r0, #0
   11d6c:	ldreq	r6, [pc, #360]	; 11edc <__assert_fail@plt+0xb08>
   11d70:	beq	11d8c <__assert_fail@plt+0x9b8>
   11d74:	mov	r2, #3
   11d78:	ldr	r1, [pc, #364]	; 11eec <__assert_fail@plt+0xb18>
   11d7c:	bl	1138c <strncmp@plt>
   11d80:	ldr	r6, [pc, #340]	; 11edc <__assert_fail@plt+0xb08>
   11d84:	cmp	r0, #0
   11d88:	bne	11e74 <__assert_fail@plt+0xaa0>
   11d8c:	mov	r2, #5
   11d90:	ldr	r1, [pc, #344]	; 11ef0 <__assert_fail@plt+0xb1c>
   11d94:	mov	r0, #0
   11d98:	bl	11158 <dcgettext@plt>
   11d9c:	ldr	r3, [pc, #312]	; 11edc <__assert_fail@plt+0xb08>
   11da0:	ldr	r2, [pc, #316]	; 11ee4 <__assert_fail@plt+0xb10>
   11da4:	mov	r1, r0
   11da8:	mov	r0, #1
   11dac:	bl	112a8 <__printf_chk@plt>
   11db0:	mov	r2, #5
   11db4:	ldr	r1, [pc, #312]	; 11ef4 <__assert_fail@plt+0xb20>
   11db8:	mov	r0, #0
   11dbc:	bl	11158 <dcgettext@plt>
   11dc0:	ldr	r2, [pc, #304]	; 11ef8 <__assert_fail@plt+0xb24>
   11dc4:	cmp	r5, r6
   11dc8:	ldr	r3, [pc, #300]	; 11efc <__assert_fail@plt+0xb28>
   11dcc:	movne	r3, r2
   11dd0:	mov	r1, r0
   11dd4:	mov	r2, r5
   11dd8:	mov	r0, #1
   11ddc:	bl	112a8 <__printf_chk@plt>
   11de0:	b	11ba0 <__assert_fail@plt+0x7cc>
   11de4:	mov	r0, r5
   11de8:	bl	11158 <dcgettext@plt>
   11dec:	ldr	r3, [pc, #240]	; 11ee4 <__assert_fail@plt+0xb10>
   11df0:	ldr	r2, [pc, #240]	; 11ee8 <__assert_fail@plt+0xb14>
   11df4:	mov	r1, r0
   11df8:	mov	r0, #1
   11dfc:	bl	112a8 <__printf_chk@plt>
   11e00:	mov	r1, r5
   11e04:	mov	r0, #5
   11e08:	bl	11308 <setlocale@plt>
   11e0c:	cmp	r0, #0
   11e10:	beq	11e28 <__assert_fail@plt+0xa54>
   11e14:	mov	r2, #3
   11e18:	ldr	r1, [pc, #204]	; 11eec <__assert_fail@plt+0xb18>
   11e1c:	bl	1138c <strncmp@plt>
   11e20:	cmp	r0, #0
   11e24:	bne	11e6c <__assert_fail@plt+0xa98>
   11e28:	mov	r2, #5
   11e2c:	ldr	r1, [pc, #188]	; 11ef0 <__assert_fail@plt+0xb1c>
   11e30:	mov	r0, #0
   11e34:	bl	11158 <dcgettext@plt>
   11e38:	ldr	r3, [pc, #156]	; 11edc <__assert_fail@plt+0xb08>
   11e3c:	ldr	r2, [pc, #160]	; 11ee4 <__assert_fail@plt+0xb10>
   11e40:	mov	r5, r3
   11e44:	mov	r1, r0
   11e48:	mov	r0, #1
   11e4c:	bl	112a8 <__printf_chk@plt>
   11e50:	ldr	r1, [pc, #156]	; 11ef4 <__assert_fail@plt+0xb20>
   11e54:	mov	r2, #5
   11e58:	mov	r0, #0
   11e5c:	bl	11158 <dcgettext@plt>
   11e60:	ldr	r3, [pc, #148]	; 11efc <__assert_fail@plt+0xb28>
   11e64:	mov	r1, r0
   11e68:	b	11dd4 <__assert_fail@plt+0xa00>
   11e6c:	ldr	r6, [pc, #104]	; 11edc <__assert_fail@plt+0xb08>
   11e70:	mov	r5, r6
   11e74:	mov	r2, #5
   11e78:	ldr	r1, [pc, #128]	; 11f00 <__assert_fail@plt+0xb2c>
   11e7c:	mov	r0, #0
   11e80:	bl	11158 <dcgettext@plt>
   11e84:	ldr	r2, [pc, #80]	; 11edc <__assert_fail@plt+0xb08>
   11e88:	mov	r1, r0
   11e8c:	mov	r0, #1
   11e90:	bl	112a8 <__printf_chk@plt>
   11e94:	b	11d8c <__assert_fail@plt+0x9b8>
   11e98:	andeq	fp, r2, r8, lsl #30
   11e9c:	andeq	ip, r2, r8, lsl #3
   11ea0:	ldrdeq	sl, [r1], -r8
   11ea4:			; <UNDEFINED> instruction: 0x0002c1bc
   11ea8:	andeq	sl, r1, r0, lsl #6
   11eac:	muleq	r2, r4, r1
   11eb0:	andeq	sl, r1, r4, lsr #6
   11eb4:	andeq	sl, r1, r4, asr #7
   11eb8:	andeq	sl, r1, ip, lsr r5
   11ebc:	andeq	sl, r1, ip, lsl r6
   11ec0:	andeq	sl, r1, ip, lsl r7
   11ec4:	andeq	sl, r1, ip, asr #15
   11ec8:	strdeq	sl, [r1], -ip
   11ecc:	andeq	sl, r1, r4, lsr r8
   11ed0:	ldrdeq	sl, [r1], -r0
   11ed4:	andeq	sl, r1, ip, asr #18
   11ed8:	andeq	sl, r1, r0, lsr #3
   11edc:	ldrdeq	sl, [r1], -r4
   11ee0:	andeq	sl, r1, r0, lsr sl
   11ee4:	andeq	sl, r1, r8, asr #20
   11ee8:	andeq	sl, r1, r0, ror sl
   11eec:	andeq	sl, r1, r0, lsl #21
   11ef0:	andeq	sl, r1, ip, asr #21
   11ef4:	andeq	sl, r1, ip, ror #21
   11ef8:	strdeq	fp, [r1], -r4
   11efc:	andeq	sl, r1, r8, lsl sp
   11f00:	andeq	sl, r1, r4, lsl #21
   11f04:	push	{r4, r5, r6, r7, r8, r9, lr}
   11f08:	subs	r4, r3, #0
   11f0c:	ldr	r6, [pc, #516]	; 12118 <__assert_fail@plt+0xd44>
   11f10:	sub	sp, sp, #124	; 0x7c
   11f14:	mov	r8, r2
   11f18:	ldr	r3, [r6]
   11f1c:	movne	r2, #512	; 0x200
   11f20:	moveq	r2, #0
   11f24:	mov	r7, r0
   11f28:	mov	r5, r1
   11f2c:	ldr	r0, [r0]
   11f30:	ldr	r1, [r1, #24]
   11f34:	str	r3, [sp, #116]	; 0x74
   11f38:	bl	110f8 <unlinkat@plt>
   11f3c:	cmp	r0, #0
   11f40:	beq	12020 <__assert_fail@plt+0xc4c>
   11f44:	bl	11284 <__errno_location@plt>
   11f48:	ldr	r4, [r0]
   11f4c:	mov	r9, r0
   11f50:	cmp	r4, #30
   11f54:	beq	120c4 <__assert_fail@plt+0xcf0>
   11f58:	ldrb	r3, [r8]
   11f5c:	cmp	r3, #0
   11f60:	beq	11f80 <__assert_fail@plt+0xbac>
   11f64:	cmp	r4, #20
   11f68:	beq	1202c <__assert_fail@plt+0xc58>
   11f6c:	ble	12034 <__assert_fail@plt+0xc60>
   11f70:	cmp	r4, #22
   11f74:	beq	1202c <__assert_fail@plt+0xc58>
   11f78:	cmp	r4, #84	; 0x54
   11f7c:	beq	1202c <__assert_fail@plt+0xc58>
   11f80:	ldrh	r3, [r5, #60]	; 0x3c
   11f84:	cmp	r3, #4
   11f88:	beq	12088 <__assert_fail@plt+0xcb4>
   11f8c:	mov	r2, #5
   11f90:	ldr	r1, [pc, #388]	; 1211c <__assert_fail@plt+0xd48>
   11f94:	mov	r0, #0
   11f98:	bl	11158 <dcgettext@plt>
   11f9c:	ldr	r1, [r5, #28]
   11fa0:	mov	r7, r0
   11fa4:	mov	r0, #4
   11fa8:	bl	15624 <__assert_fail@plt+0x4250>
   11fac:	mov	r2, r7
   11fb0:	mov	r1, r4
   11fb4:	mov	r3, r0
   11fb8:	mov	r0, #0
   11fbc:	bl	111f4 <error@plt>
   11fc0:	ldr	r3, [r5, #4]
   11fc4:	ldr	r2, [r3, #48]	; 0x30
   11fc8:	cmp	r2, #0
   11fcc:	blt	12004 <__assert_fail@plt+0xc30>
   11fd0:	ldr	r2, [r3, #16]
   11fd4:	cmp	r2, #0
   11fd8:	bne	12004 <__assert_fail@plt+0xc30>
   11fdc:	mov	r1, #1
   11fe0:	b	11ff0 <__assert_fail@plt+0xc1c>
   11fe4:	ldr	r2, [r3, #16]
   11fe8:	cmp	r2, #0
   11fec:	bne	12004 <__assert_fail@plt+0xc30>
   11ff0:	str	r1, [r3, #16]
   11ff4:	ldr	r3, [r3, #4]
   11ff8:	ldr	r2, [r3, #48]	; 0x30
   11ffc:	cmp	r2, #0
   12000:	bge	11fe4 <__assert_fail@plt+0xc10>
   12004:	mov	r0, #4
   12008:	ldr	r2, [sp, #116]	; 0x74
   1200c:	ldr	r3, [r6]
   12010:	cmp	r2, r3
   12014:	bne	12114 <__assert_fail@plt+0xd40>
   12018:	add	sp, sp, #124	; 0x7c
   1201c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12020:	ldrb	r3, [r8, #18]
   12024:	cmp	r3, #0
   12028:	bne	1204c <__assert_fail@plt+0xc78>
   1202c:	mov	r0, #2
   12030:	b	12008 <__assert_fail@plt+0xc34>
   12034:	cmp	r4, #2
   12038:	beq	1202c <__assert_fail@plt+0xc58>
   1203c:	ldrh	r3, [r5, #60]	; 0x3c
   12040:	cmp	r3, #4
   12044:	bne	11f8c <__assert_fail@plt+0xbb8>
   12048:	b	12088 <__assert_fail@plt+0xcb4>
   1204c:	cmp	r4, #0
   12050:	mov	r2, #5
   12054:	ldrne	r1, [pc, #196]	; 12120 <__assert_fail@plt+0xd4c>
   12058:	ldreq	r1, [pc, #196]	; 12124 <__assert_fail@plt+0xd50>
   1205c:	bl	11158 <dcgettext@plt>
   12060:	ldr	r1, [r5, #28]
   12064:	mov	r4, r0
   12068:	mov	r0, #4
   1206c:	bl	15624 <__assert_fail@plt+0x4250>
   12070:	mov	r1, r4
   12074:	mov	r2, r0
   12078:	mov	r0, #1
   1207c:	bl	112a8 <__printf_chk@plt>
   12080:	mov	r0, #2
   12084:	b	12008 <__assert_fail@plt+0xc34>
   12088:	cmp	r4, #17
   1208c:	cmpne	r4, #39	; 0x27
   12090:	moveq	r3, #1
   12094:	movne	r3, #0
   12098:	sub	r2, r4, #20
   1209c:	cmp	r2, #1
   120a0:	orrls	r3, r3, #1
   120a4:	cmp	r3, #0
   120a8:	beq	11f8c <__assert_fail@plt+0xbb8>
   120ac:	ldr	r3, [r5, #32]
   120b0:	cmp	r3, #13
   120b4:	cmpne	r3, #1
   120b8:	moveq	r4, r3
   120bc:	streq	r3, [r9]
   120c0:	b	11f8c <__assert_fail@plt+0xbb8>
   120c4:	mov	r3, #256	; 0x100
   120c8:	ldr	r1, [r7]
   120cc:	mov	r0, #3
   120d0:	str	r3, [sp]
   120d4:	add	r3, sp, #8
   120d8:	ldr	r2, [r5, #24]
   120dc:	bl	11194 <__fxstatat64@plt>
   120e0:	cmp	r0, #0
   120e4:	beq	120f4 <__assert_fail@plt+0xd20>
   120e8:	ldr	r0, [r9]
   120ec:	cmp	r0, #2
   120f0:	beq	12100 <__assert_fail@plt+0xd2c>
   120f4:	mov	r3, #30
   120f8:	str	r3, [r9]
   120fc:	b	11f8c <__assert_fail@plt+0xbb8>
   12100:	ldrb	r3, [r8]
   12104:	cmp	r3, #0
   12108:	moveq	r4, r0
   1210c:	beq	11f8c <__assert_fail@plt+0xbb8>
   12110:	b	12008 <__assert_fail@plt+0xc34>
   12114:	bl	11164 <__stack_chk_fail@plt>
   12118:	andeq	fp, r2, r8, lsl #30
   1211c:	andeq	sl, r1, r0, asr lr
   12120:	andeq	sl, r1, ip, lsr #28
   12124:	andeq	sl, r1, r4, asr #28
   12128:	push	{r4, r5, r6, r8, r9, lr}
   1212c:	mvn	r9, #0
   12130:	ldrd	r4, [r2, #48]	; 0x30
   12134:	mvn	r8, #0
   12138:	sub	sp, sp, #8
   1213c:	cmp	r5, r9
   12140:	cmpeq	r4, r8
   12144:	mov	r6, r2
   12148:	beq	12164 <__assert_fail@plt+0xd90>
   1214c:	cmp	r4, #0
   12150:	sbcs	r3, r5, #0
   12154:	movge	r0, #0
   12158:	blt	121bc <__assert_fail@plt+0xde8>
   1215c:	add	sp, sp, #8
   12160:	pop	{r4, r5, r6, r8, r9, pc}
   12164:	mov	r3, #256	; 0x100
   12168:	mov	r2, r1
   1216c:	str	r3, [sp]
   12170:	mov	r1, r0
   12174:	mov	r3, r6
   12178:	mov	r0, #3
   1217c:	bl	11194 <__fxstatat64@plt>
   12180:	cmp	r0, #0
   12184:	beq	121b4 <__assert_fail@plt+0xde0>
   12188:	mvn	r3, #0
   1218c:	mvn	r2, #1
   12190:	strd	r2, [r6, #48]	; 0x30
   12194:	bl	11284 <__errno_location@plt>
   12198:	ldr	r3, [r0]
   1219c:	mov	r4, r3
   121a0:	asr	r5, r3, #31
   121a4:	strd	r4, [r6, #96]	; 0x60
   121a8:	str	r3, [r0]
   121ac:	mvn	r0, #0
   121b0:	b	1215c <__assert_fail@plt+0xd88>
   121b4:	ldrd	r4, [r6, #48]	; 0x30
   121b8:	b	1214c <__assert_fail@plt+0xd78>
   121bc:	bl	11284 <__errno_location@plt>
   121c0:	ldr	r3, [r6, #96]	; 0x60
   121c4:	b	121a8 <__assert_fail@plt+0xdd4>
   121c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121cc:	sub	sp, sp, #140	; 0x8c
   121d0:	ldr	r7, [pc, #1036]	; 125e4 <__assert_fail@plt+0x1210>
   121d4:	mov	r5, r1
   121d8:	ldr	r6, [sp, #180]	; 0xb4
   121dc:	ldr	r1, [r7]
   121e0:	mov	r8, r3
   121e4:	ldr	r3, [r5, #28]
   121e8:	cmp	r6, #0
   121ec:	mov	r4, r2
   121f0:	str	r1, [sp, #132]	; 0x84
   121f4:	str	r3, [sp, #16]
   121f8:	ldr	r9, [r5, #24]
   121fc:	str	r0, [sp, #8]
   12200:	beq	12448 <__assert_fail@plt+0x1074>
   12204:	mov	r3, #2
   12208:	cmp	r2, #0
   1220c:	mvn	sl, #0
   12210:	mvn	fp, #0
   12214:	str	r3, [r6]
   12218:	mov	r2, #51456	; 0xc900
   1221c:	movne	r3, #4
   12220:	moveq	r3, #0
   12224:	mov	r1, r9
   12228:	str	r3, [sp, #12]
   1222c:	strd	sl, [sp, #72]	; 0x48
   12230:	bl	11278 <openat64@plt>
   12234:	subs	r3, r0, #0
   12238:	str	r3, [sp, #20]
   1223c:	blt	12284 <__assert_fail@plt+0xeb0>
   12240:	bl	11338 <fdopendir@plt>
   12244:	ldr	r3, [sp, #20]
   12248:	subs	r4, r0, #0
   1224c:	beq	12584 <__assert_fail@plt+0x11b0>
   12250:	bl	11284 <__errno_location@plt>
   12254:	mov	r3, #0
   12258:	mov	sl, r0
   1225c:	str	r3, [r0]
   12260:	mov	r0, r4
   12264:	bl	1132c <readdir64@plt>
   12268:	cmp	r0, #0
   1226c:	beq	12494 <__assert_fail@plt+0x10c0>
   12270:	ldrb	r3, [r0, #19]
   12274:	cmp	r3, #46	; 0x2e
   12278:	beq	1246c <__assert_fail@plt+0x1098>
   1227c:	mov	r0, r4
   12280:	bl	113c8 <closedir@plt>
   12284:	mov	r4, #0
   12288:	mov	r3, #3
   1228c:	str	r3, [r6]
   12290:	ldr	r5, [r5, #16]
   12294:	cmp	r5, #0
   12298:	bne	12430 <__assert_fail@plt+0x105c>
   1229c:	ldr	r3, [r8, #4]
   122a0:	cmp	r3, #5
   122a4:	beq	12414 <__assert_fail@plt+0x1040>
   122a8:	ldrb	r2, [r8]
   122ac:	cmp	r2, #0
   122b0:	bne	1243c <__assert_fail@plt+0x1068>
   122b4:	cmp	r3, #3
   122b8:	beq	122c8 <__assert_fail@plt+0xef4>
   122bc:	ldrb	r3, [r8, #17]
   122c0:	cmp	r3, #0
   122c4:	beq	12414 <__assert_fail@plt+0x1040>
   122c8:	bl	15ea4 <__assert_fail@plt+0x4ad0>
   122cc:	cmp	r0, #0
   122d0:	bne	12438 <__assert_fail@plt+0x1064>
   122d4:	add	r2, sp, #24
   122d8:	mov	r1, r9
   122dc:	ldr	r0, [sp, #8]
   122e0:	bl	12128 <__assert_fail@plt+0xd54>
   122e4:	cmp	r0, #0
   122e8:	bne	12568 <__assert_fail@plt+0x1194>
   122ec:	ldr	r3, [sp, #40]	; 0x28
   122f0:	and	r3, r3, #61440	; 0xf000
   122f4:	cmp	r3, #40960	; 0xa000
   122f8:	beq	12438 <__assert_fail@plt+0x1064>
   122fc:	mov	r3, #512	; 0x200
   12300:	mov	r2, #2
   12304:	mov	r1, r9
   12308:	ldr	r0, [sp, #8]
   1230c:	bl	1111c <faccessat@plt>
   12310:	cmp	r0, #0
   12314:	beq	12438 <__assert_fail@plt+0x1064>
   12318:	bl	11284 <__errno_location@plt>
   1231c:	ldr	r5, [r0]
   12320:	cmp	r5, #13
   12324:	bne	12570 <__assert_fail@plt+0x119c>
   12328:	mov	r5, #1
   1232c:	ldr	r3, [sp, #12]
   12330:	cmp	r3, #0
   12334:	beq	124bc <__assert_fail@plt+0x10e8>
   12338:	ldr	r3, [sp, #12]
   1233c:	cmp	r3, #4
   12340:	bne	125d8 <__assert_fail@plt+0x1204>
   12344:	ldrb	r3, [r8, #9]
   12348:	cmp	r3, #0
   1234c:	bne	1239c <__assert_fail@plt+0xfc8>
   12350:	ldrb	r3, [r8, #10]
   12354:	tst	r4, r3
   12358:	bne	125d8 <__assert_fail@plt+0x1204>
   1235c:	ldr	r1, [sp, #16]
   12360:	mov	r0, #4
   12364:	bl	15624 <__assert_fail@plt+0x4250>
   12368:	mov	r5, #21
   1236c:	mov	r4, r0
   12370:	mov	r2, #5
   12374:	ldr	r1, [pc, #620]	; 125e8 <__assert_fail@plt+0x1214>
   12378:	mov	r0, #0
   1237c:	bl	11158 <dcgettext@plt>
   12380:	mov	r3, r4
   12384:	mov	r1, r5
   12388:	mov	r2, r0
   1238c:	mov	r0, #0
   12390:	bl	111f4 <error@plt>
   12394:	mov	r0, #4
   12398:	b	12418 <__assert_fail@plt+0x1044>
   1239c:	ldr	r1, [sp, #16]
   123a0:	mov	r0, #4
   123a4:	bl	15624 <__assert_fail@plt+0x4250>
   123a8:	ldr	r3, [sp, #176]	; 0xb0
   123ac:	mov	r8, r0
   123b0:	cmp	r3, #2
   123b4:	moveq	r0, r4
   123b8:	orrne	r0, r4, #1
   123bc:	cmp	r0, #0
   123c0:	addne	r6, sp, #24
   123c4:	bne	12500 <__assert_fail@plt+0x112c>
   123c8:	cmp	r5, #0
   123cc:	ldr	r3, [pc, #536]	; 125ec <__assert_fail@plt+0x1218>
   123d0:	movne	r2, #5
   123d4:	ldrne	r1, [pc, #532]	; 125f0 <__assert_fail@plt+0x121c>
   123d8:	moveq	r2, #5
   123dc:	ldreq	r1, [pc, #528]	; 125f4 <__assert_fail@plt+0x1220>
   123e0:	moveq	r0, r5
   123e4:	ldr	r4, [r3]
   123e8:	bl	11158 <dcgettext@plt>
   123ec:	ldr	r3, [pc, #516]	; 125f8 <__assert_fail@plt+0x1224>
   123f0:	str	r8, [sp]
   123f4:	mov	r1, #1
   123f8:	ldr	r3, [r3]
   123fc:	mov	r2, r0
   12400:	mov	r0, r4
   12404:	bl	112c0 <__fprintf_chk@plt>
   12408:	bl	161e8 <__assert_fail@plt+0x4e14>
   1240c:	cmp	r0, #0
   12410:	beq	12430 <__assert_fail@plt+0x105c>
   12414:	mov	r0, #2
   12418:	ldr	r2, [sp, #132]	; 0x84
   1241c:	ldr	r3, [r7]
   12420:	cmp	r2, r3
   12424:	bne	125e0 <__assert_fail@plt+0x120c>
   12428:	add	sp, sp, #140	; 0x8c
   1242c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12430:	mov	r0, #3
   12434:	b	12418 <__assert_fail@plt+0x1044>
   12438:	ldr	r3, [r8, #4]
   1243c:	cmp	r3, #3
   12440:	bne	12414 <__assert_fail@plt+0x1040>
   12444:	b	1232c <__assert_fail@plt+0xf58>
   12448:	mvn	r2, #0
   1244c:	mvn	r3, #0
   12450:	cmp	r4, #0
   12454:	strd	r2, [sp, #72]	; 0x48
   12458:	streq	r4, [sp, #12]
   1245c:	movne	r3, #4
   12460:	movne	r4, r6
   12464:	strne	r3, [sp, #12]
   12468:	b	12290 <__assert_fail@plt+0xebc>
   1246c:	ldrb	r3, [r0, #20]
   12470:	cmp	r3, #46	; 0x2e
   12474:	moveq	r3, #2
   12478:	movne	r3, #1
   1247c:	add	r0, r0, r3
   12480:	ldrb	r3, [r0, #19]
   12484:	cmp	r3, #47	; 0x2f
   12488:	cmpne	r3, #0
   1248c:	beq	12260 <__assert_fail@plt+0xe8c>
   12490:	b	1227c <__assert_fail@plt+0xea8>
   12494:	ldr	r3, [sl]
   12498:	mov	r0, r4
   1249c:	str	r3, [sp, #20]
   124a0:	bl	113c8 <closedir@plt>
   124a4:	ldr	r3, [sp, #20]
   124a8:	cmp	r3, #0
   124ac:	moveq	r4, #1
   124b0:	moveq	r3, #4
   124b4:	beq	1228c <__assert_fail@plt+0xeb8>
   124b8:	b	12284 <__assert_fail@plt+0xeb0>
   124bc:	add	r6, sp, #24
   124c0:	mov	r2, r6
   124c4:	mov	r1, r9
   124c8:	ldr	r0, [sp, #8]
   124cc:	bl	12128 <__assert_fail@plt+0xd54>
   124d0:	cmp	r0, #0
   124d4:	bne	12568 <__assert_fail@plt+0x1194>
   124d8:	ldr	r3, [sp, #40]	; 0x28
   124dc:	and	r3, r3, #61440	; 0xf000
   124e0:	cmp	r3, #40960	; 0xa000
   124e4:	beq	12594 <__assert_fail@plt+0x11c0>
   124e8:	cmp	r3, #16384	; 0x4000
   124ec:	beq	12344 <__assert_fail@plt+0xf70>
   124f0:	ldr	r1, [sp, #16]
   124f4:	mov	r0, #4
   124f8:	bl	15624 <__assert_fail@plt+0x4250>
   124fc:	mov	r8, r0
   12500:	mov	r1, r9
   12504:	ldr	r0, [sp, #8]
   12508:	mov	r2, r6
   1250c:	bl	12128 <__assert_fail@plt+0xd54>
   12510:	cmp	r0, #0
   12514:	bne	125a4 <__assert_fail@plt+0x11d0>
   12518:	cmp	r5, #0
   1251c:	ldr	r3, [pc, #200]	; 125ec <__assert_fail@plt+0x1218>
   12520:	ldrne	r1, [pc, #212]	; 125fc <__assert_fail@plt+0x1228>
   12524:	ldreq	r1, [pc, #212]	; 12600 <__assert_fail@plt+0x122c>
   12528:	mov	r2, #5
   1252c:	ldr	r4, [r3]
   12530:	bl	11158 <dcgettext@plt>
   12534:	ldr	r3, [pc, #188]	; 125f8 <__assert_fail@plt+0x1224>
   12538:	mov	r5, r0
   1253c:	mov	r0, r6
   12540:	ldr	r6, [r3]
   12544:	bl	134a0 <__assert_fail@plt+0x20cc>
   12548:	mov	r3, r6
   1254c:	str	r8, [sp, #4]
   12550:	mov	r2, r5
   12554:	mov	r1, #1
   12558:	str	r0, [sp]
   1255c:	mov	r0, r4
   12560:	bl	112c0 <__fprintf_chk@plt>
   12564:	b	12408 <__assert_fail@plt+0x1034>
   12568:	bl	11284 <__errno_location@plt>
   1256c:	ldr	r5, [r0]
   12570:	ldr	r1, [sp, #16]
   12574:	mov	r0, #4
   12578:	bl	15624 <__assert_fail@plt+0x4250>
   1257c:	mov	r4, r0
   12580:	b	12370 <__assert_fail@plt+0xf9c>
   12584:	mov	r0, r3
   12588:	bl	113a4 <close@plt>
   1258c:	mov	r3, #3
   12590:	b	1228c <__assert_fail@plt+0xeb8>
   12594:	ldr	r3, [r8, #4]
   12598:	cmp	r3, #3
   1259c:	bne	12414 <__assert_fail@plt+0x1040>
   125a0:	b	124f0 <__assert_fail@plt+0x111c>
   125a4:	bl	11284 <__errno_location@plt>
   125a8:	mov	r2, #5
   125ac:	ldr	r1, [pc, #52]	; 125e8 <__assert_fail@plt+0x1214>
   125b0:	ldr	r4, [r0]
   125b4:	mov	r0, #0
   125b8:	bl	11158 <dcgettext@plt>
   125bc:	mov	r3, r8
   125c0:	mov	r1, r4
   125c4:	mov	r2, r0
   125c8:	mov	r0, #0
   125cc:	bl	111f4 <error@plt>
   125d0:	mov	r0, #4
   125d4:	b	12418 <__assert_fail@plt+0x1044>
   125d8:	add	r6, sp, #24
   125dc:	b	124f0 <__assert_fail@plt+0x111c>
   125e0:	bl	11164 <__stack_chk_fail@plt>
   125e4:	andeq	fp, r2, r8, lsl #30
   125e8:	andeq	sl, r1, r0, asr lr
   125ec:	andeq	ip, r2, r8, lsl #3
   125f0:	andeq	sl, r1, r4, ror #28
   125f4:	muleq	r1, r4, lr
   125f8:			; <UNDEFINED> instruction: 0x0002c1bc
   125fc:			; <UNDEFINED> instruction: 0x0001aeb4
   12600:	ldrdeq	sl, [r1], -r8
   12604:	ldr	r3, [pc, #2132]	; 12e60 <__assert_fail@plt+0x1a8c>
   12608:	ldr	r2, [r0]
   1260c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12610:	sub	sp, sp, #124	; 0x7c
   12614:	ldr	r3, [r3]
   12618:	cmp	r2, #0
   1261c:	str	r3, [sp, #116]	; 0x74
   12620:	beq	12d94 <__assert_fail@plt+0x19c0>
   12624:	ldrb	r3, [r1, #8]
   12628:	mov	r2, #0
   1262c:	mov	r9, r1
   12630:	cmp	r3, r2
   12634:	moveq	r1, #536	; 0x218
   12638:	movne	r1, #600	; 0x258
   1263c:	bl	16168 <__assert_fail@plt+0x4d94>
   12640:	mov	r5, #2
   12644:	ldr	sl, [pc, #2072]	; 12e64 <__assert_fail@plt+0x1a90>
   12648:	mov	r6, r5
   1264c:	mov	r8, r0
   12650:	mov	r0, r8
   12654:	bl	17dd4 <fts_read@@Base>
   12658:	subs	r7, r0, #0
   1265c:	beq	12710 <__assert_fail@plt+0x133c>
   12660:	ldrh	r2, [r7, #60]	; 0x3c
   12664:	sub	r3, r2, #1
   12668:	cmp	r3, #12
   1266c:	ldrls	pc, [pc, r3, lsl #2]
   12670:	b	12da8 <__assert_fail@plt+0x19d4>
   12674:	andeq	r2, r1, r8, lsr #16
   12678:	strdeq	r2, [r1], -r4
   1267c:	andeq	r2, r1, ip, asr r7
   12680:	andeq	r2, r1, ip, asr r7
   12684:	andeq	r2, r1, r8, lsr #27
   12688:	andeq	r2, r1, ip, asr r7
   1268c:	andeq	r2, r1, r8, lsr #13
   12690:	andeq	r2, r1, ip, asr r7
   12694:	andeq	r2, r1, r8, lsr #27
   12698:	andeq	r2, r1, ip, asr r7
   1269c:	andeq	r2, r1, ip, asr r7
   126a0:	andeq	r2, r1, ip, asr r7
   126a4:	andeq	r2, r1, ip, asr r7
   126a8:	mov	r2, #5
   126ac:	mov	r1, sl
   126b0:	mov	r0, #0
   126b4:	ldr	r4, [r7, #32]
   126b8:	bl	11158 <dcgettext@plt>
   126bc:	ldr	r2, [r7, #28]
   126c0:	mov	r1, #3
   126c4:	mov	r5, r0
   126c8:	mov	r0, #0
   126cc:	bl	15700 <__assert_fail@plt+0x432c>
   126d0:	mov	r2, r5
   126d4:	mov	r1, r4
   126d8:	mov	r3, r0
   126dc:	mov	r0, #0
   126e0:	bl	111f4 <error@plt>
   126e4:	mov	r1, r7
   126e8:	mov	r2, #4
   126ec:	mov	r0, r8
   126f0:	bl	1851c <fts_set@@Base>
   126f4:	mov	r0, r8
   126f8:	bl	17dd4 <fts_read@@Base>
   126fc:	mov	r0, r8
   12700:	bl	17dd4 <fts_read@@Base>
   12704:	mov	r6, #4
   12708:	subs	r7, r0, #0
   1270c:	bne	12660 <__assert_fail@plt+0x128c>
   12710:	bl	11284 <__errno_location@plt>
   12714:	mov	r5, r6
   12718:	mov	r4, r7
   1271c:	ldr	r6, [r0]
   12720:	mov	r7, r0
   12724:	cmp	r6, #0
   12728:	bne	12cb4 <__assert_fail@plt+0x18e0>
   1272c:	mov	r0, r8
   12730:	bl	17c54 <fts_close@@Base>
   12734:	cmp	r0, #0
   12738:	bne	12ce8 <__assert_fail@plt+0x1914>
   1273c:	ldr	r3, [pc, #1820]	; 12e60 <__assert_fail@plt+0x1a8c>
   12740:	ldr	r2, [sp, #116]	; 0x74
   12744:	mov	r0, r5
   12748:	ldr	r3, [r3]
   1274c:	cmp	r2, r3
   12750:	bne	12e54 <__assert_fail@plt+0x1a80>
   12754:	add	sp, sp, #124	; 0x7c
   12758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1275c:	cmp	r2, #6
   12760:	bne	12790 <__assert_fail@plt+0x13bc>
   12764:	ldrb	r3, [r9, #8]
   12768:	cmp	r3, #0
   1276c:	beq	12790 <__assert_fail@plt+0x13bc>
   12770:	ldr	r3, [r7, #48]	; 0x30
   12774:	cmp	r3, #0
   12778:	ble	12790 <__assert_fail@plt+0x13bc>
   1277c:	ldrd	r4, [r7, #72]	; 0x48
   12780:	ldrd	r0, [r8, #16]
   12784:	cmp	r5, r1
   12788:	cmpeq	r4, r0
   1278c:	bne	12d14 <__assert_fail@plt+0x1940>
   12790:	bic	r2, r2, #2
   12794:	sub	r4, r2, #4
   12798:	mov	r1, #0
   1279c:	mov	r3, #3
   127a0:	clz	r4, r4
   127a4:	lsr	r4, r4, #5
   127a8:	ldr	r0, [r8, #32]
   127ac:	mov	r2, r4
   127b0:	str	r1, [sp, #4]
   127b4:	str	r3, [sp]
   127b8:	mov	r1, r7
   127bc:	mov	r3, r9
   127c0:	bl	121c8 <__assert_fail@plt+0xdf4>
   127c4:	cmp	r0, #2
   127c8:	mov	r5, r0
   127cc:	beq	12998 <__assert_fail@plt+0x15c4>
   127d0:	sub	r3, r5, #2
   127d4:	cmp	r3, #2
   127d8:	bhi	12e40 <__assert_fail@plt+0x1a6c>
   127dc:	cmp	r5, #4
   127e0:	beq	12e58 <__assert_fail@plt+0x1a84>
   127e4:	cmp	r5, #3
   127e8:	cmpeq	r6, #2
   127ec:	moveq	r6, #3
   127f0:	b	12650 <__assert_fail@plt+0x127c>
   127f4:	mov	r2, #5
   127f8:	ldr	r1, [pc, #1640]	; 12e68 <__assert_fail@plt+0x1a94>
   127fc:	mov	r0, #0
   12800:	bl	11158 <dcgettext@plt>
   12804:	ldr	r2, [r7, #28]
   12808:	mov	r1, #3
   1280c:	mov	r4, r0
   12810:	mov	r0, #0
   12814:	bl	15700 <__assert_fail@plt+0x432c>
   12818:	mov	r2, r4
   1281c:	mov	r1, #0
   12820:	mov	r3, r0
   12824:	b	126dc <__assert_fail@plt+0x1308>
   12828:	ldrb	r4, [r9, #9]
   1282c:	cmp	r4, #0
   12830:	bne	128bc <__assert_fail@plt+0x14e8>
   12834:	ldrb	r3, [r9, #10]
   12838:	cmp	r3, #0
   1283c:	beq	129fc <__assert_fail@plt+0x1628>
   12840:	mov	r2, #51456	; 0xc900
   12844:	ldr	r1, [r7, #24]
   12848:	ldr	r0, [r8, #32]
   1284c:	bl	11278 <openat64@plt>
   12850:	subs	fp, r0, #0
   12854:	blt	12894 <__assert_fail@plt+0x14c0>
   12858:	bl	11338 <fdopendir@plt>
   1285c:	subs	r5, r0, #0
   12860:	beq	12d9c <__assert_fail@plt+0x19c8>
   12864:	bl	11284 <__errno_location@plt>
   12868:	mov	fp, r0
   1286c:	str	r4, [r0]
   12870:	mov	r0, r5
   12874:	bl	1132c <readdir64@plt>
   12878:	cmp	r0, #0
   1287c:	beq	128a8 <__assert_fail@plt+0x14d4>
   12880:	ldrb	r3, [r0, #19]
   12884:	cmp	r3, #46	; 0x2e
   12888:	beq	12bb4 <__assert_fail@plt+0x17e0>
   1288c:	mov	r0, r5
   12890:	bl	113c8 <closedir@plt>
   12894:	ldrb	r3, [r9, #10]
   12898:	cmp	r3, #0
   1289c:	beq	129fc <__assert_fail@plt+0x1628>
   128a0:	mov	r4, #39	; 0x27
   128a4:	b	12a00 <__assert_fail@plt+0x162c>
   128a8:	ldr	r4, [fp]
   128ac:	mov	r0, r5
   128b0:	bl	113c8 <closedir@plt>
   128b4:	cmp	r4, #0
   128b8:	bne	12894 <__assert_fail@plt+0x14c0>
   128bc:	ldr	r5, [r7, #48]	; 0x30
   128c0:	cmp	r5, #0
   128c4:	bne	1290c <__assert_fail@plt+0x1538>
   128c8:	ldr	r4, [r7, #24]
   128cc:	mov	r0, r4
   128d0:	bl	13400 <__assert_fail@plt+0x202c>
   128d4:	ldrb	r3, [r0]
   128d8:	cmp	r3, #46	; 0x2e
   128dc:	beq	12a7c <__assert_fail@plt+0x16a8>
   128e0:	ldr	ip, [r9, #12]
   128e4:	cmp	ip, #0
   128e8:	beq	12900 <__assert_fail@plt+0x152c>
   128ec:	ldrd	r0, [r7, #168]	; 0xa8
   128f0:	ldrd	r2, [ip]
   128f4:	cmp	r1, r3
   128f8:	cmpeq	r0, r2
   128fc:	beq	12c50 <__assert_fail@plt+0x187c>
   12900:	ldrb	r3, [r9, #16]
   12904:	cmp	r3, #0
   12908:	bne	12b24 <__assert_fail@plt+0x1750>
   1290c:	add	r4, sp, #8
   12910:	mov	r3, #2
   12914:	ldr	r0, [r8, #32]
   12918:	mov	r2, #1
   1291c:	stm	sp, {r3, r4}
   12920:	mov	r1, r7
   12924:	mov	r3, r9
   12928:	bl	121c8 <__assert_fail@plt+0xdf4>
   1292c:	cmp	r0, #2
   12930:	mov	r5, r0
   12934:	beq	129b4 <__assert_fail@plt+0x15e0>
   12938:	ldr	r3, [r7, #4]
   1293c:	ldr	r2, [r3, #48]	; 0x30
   12940:	cmp	r2, #0
   12944:	blt	1297c <__assert_fail@plt+0x15a8>
   12948:	ldr	r2, [r3, #16]
   1294c:	cmp	r2, #0
   12950:	bne	1297c <__assert_fail@plt+0x15a8>
   12954:	mov	r1, #1
   12958:	b	12968 <__assert_fail@plt+0x1594>
   1295c:	ldr	r2, [r3, #16]
   12960:	cmp	r2, #0
   12964:	bne	1297c <__assert_fail@plt+0x15a8>
   12968:	str	r1, [r3, #16]
   1296c:	ldr	r3, [r3, #4]
   12970:	ldr	r2, [r3, #48]	; 0x30
   12974:	cmp	r2, #0
   12978:	bge	1295c <__assert_fail@plt+0x1588>
   1297c:	mov	r1, r7
   12980:	mov	r2, #4
   12984:	mov	r0, r8
   12988:	bl	1851c <fts_set@@Base>
   1298c:	mov	r0, r8
   12990:	bl	17dd4 <fts_read@@Base>
   12994:	b	127d0 <__assert_fail@plt+0x13fc>
   12998:	mov	r3, r4
   1299c:	mov	r1, r7
   129a0:	mov	r2, r9
   129a4:	add	r0, r8, #32
   129a8:	bl	11f04 <__assert_fail@plt+0xb30>
   129ac:	mov	r5, r0
   129b0:	b	127d0 <__assert_fail@plt+0x13fc>
   129b4:	ldr	r4, [sp, #8]
   129b8:	cmp	r4, #4
   129bc:	bne	12650 <__assert_fail@plt+0x127c>
   129c0:	mov	r3, #1
   129c4:	mov	r2, r9
   129c8:	mov	r1, r7
   129cc:	add	r0, r8, #32
   129d0:	bl	11f04 <__assert_fail@plt+0xb30>
   129d4:	mov	r2, r4
   129d8:	mov	r1, r7
   129dc:	mov	r5, r0
   129e0:	mov	r0, r8
   129e4:	bl	1851c <fts_set@@Base>
   129e8:	mov	r0, r8
   129ec:	bl	17dd4 <fts_read@@Base>
   129f0:	cmp	r5, #2
   129f4:	beq	12650 <__assert_fail@plt+0x127c>
   129f8:	b	12938 <__assert_fail@plt+0x1564>
   129fc:	mov	r4, #21
   12a00:	mov	r2, #5
   12a04:	ldr	r1, [pc, #1120]	; 12e6c <__assert_fail@plt+0x1a98>
   12a08:	mov	r0, #0
   12a0c:	bl	11158 <dcgettext@plt>
   12a10:	ldr	r1, [r7, #28]
   12a14:	mov	r5, r0
   12a18:	mov	r0, #4
   12a1c:	bl	15624 <__assert_fail@plt+0x4250>
   12a20:	mov	r2, r5
   12a24:	mov	r1, r4
   12a28:	mov	r3, r0
   12a2c:	mov	r0, #0
   12a30:	bl	111f4 <error@plt>
   12a34:	ldr	r3, [r7, #4]
   12a38:	ldr	r2, [r3, #48]	; 0x30
   12a3c:	cmp	r2, #0
   12a40:	blt	126e4 <__assert_fail@plt+0x1310>
   12a44:	ldr	r2, [r3, #16]
   12a48:	cmp	r2, #0
   12a4c:	bne	126e4 <__assert_fail@plt+0x1310>
   12a50:	mov	r1, #1
   12a54:	b	12a64 <__assert_fail@plt+0x1690>
   12a58:	ldr	r2, [r3, #16]
   12a5c:	cmp	r2, #0
   12a60:	bne	126e4 <__assert_fail@plt+0x1310>
   12a64:	str	r1, [r3, #16]
   12a68:	ldr	r3, [r3, #4]
   12a6c:	ldr	r2, [r3, #48]	; 0x30
   12a70:	cmp	r2, #0
   12a74:	bge	12a58 <__assert_fail@plt+0x1684>
   12a78:	b	126e4 <__assert_fail@plt+0x1310>
   12a7c:	ldrb	r3, [r0, #1]
   12a80:	cmp	r3, #46	; 0x2e
   12a84:	moveq	r3, #2
   12a88:	movne	r3, #1
   12a8c:	ldrb	r3, [r0, r3]
   12a90:	cmp	r3, #47	; 0x2f
   12a94:	cmpne	r3, #0
   12a98:	bne	128e0 <__assert_fail@plt+0x150c>
   12a9c:	mov	r2, #5
   12aa0:	ldr	r1, [pc, #968]	; 12e70 <__assert_fail@plt+0x1a9c>
   12aa4:	mov	r0, r5
   12aa8:	bl	11158 <dcgettext@plt>
   12aac:	ldr	r2, [pc, #960]	; 12e74 <__assert_fail@plt+0x1aa0>
   12ab0:	mov	r1, #4
   12ab4:	mov	r4, r0
   12ab8:	mov	r0, r5
   12abc:	bl	15570 <__assert_fail@plt+0x419c>
   12ac0:	ldr	r2, [pc, #944]	; 12e78 <__assert_fail@plt+0x1aa4>
   12ac4:	mov	r1, #4
   12ac8:	mov	r6, r0
   12acc:	mov	r0, #1
   12ad0:	bl	15570 <__assert_fail@plt+0x419c>
   12ad4:	ldr	r2, [r7, #28]
   12ad8:	mov	r1, #4
   12adc:	mov	fp, r0
   12ae0:	mov	r0, #2
   12ae4:	bl	15570 <__assert_fail@plt+0x419c>
   12ae8:	mov	r3, r6
   12aec:	mov	r2, r4
   12af0:	mov	r1, r5
   12af4:	str	fp, [sp]
   12af8:	mov	r6, #4
   12afc:	str	r0, [sp, #4]
   12b00:	mov	r0, r5
   12b04:	bl	111f4 <error@plt>
   12b08:	mov	r1, r7
   12b0c:	mov	r2, r6
   12b10:	mov	r0, r8
   12b14:	bl	1851c <fts_set@@Base>
   12b18:	mov	r0, r8
   12b1c:	bl	17dd4 <fts_read@@Base>
   12b20:	b	12650 <__assert_fail@plt+0x127c>
   12b24:	mov	r0, r4
   12b28:	mov	r2, #0
   12b2c:	ldr	r1, [pc, #836]	; 12e78 <__assert_fail@plt+0x1aa4>
   12b30:	bl	13584 <__assert_fail@plt+0x21b0>
   12b34:	subs	fp, r0, #0
   12b38:	beq	12b58 <__assert_fail@plt+0x1784>
   12b3c:	add	r4, sp, #8
   12b40:	mov	r2, r4
   12b44:	mov	r1, fp
   12b48:	mov	r0, #3
   12b4c:	bl	113b0 <__lxstat64@plt>
   12b50:	subs	r5, r0, #0
   12b54:	beq	12bdc <__assert_fail@plt+0x1808>
   12b58:	mov	r2, #5
   12b5c:	ldr	r1, [pc, #792]	; 12e7c <__assert_fail@plt+0x1aa8>
   12b60:	mov	r0, #0
   12b64:	bl	11158 <dcgettext@plt>
   12b68:	mov	r2, fp
   12b6c:	mov	r1, #4
   12b70:	mov	r4, r0
   12b74:	mov	r0, #0
   12b78:	bl	15570 <__assert_fail@plt+0x419c>
   12b7c:	ldr	r2, [r7, #24]
   12b80:	mov	r1, #4
   12b84:	mov	r5, r0
   12b88:	mov	r0, #1
   12b8c:	bl	15570 <__assert_fail@plt+0x419c>
   12b90:	mov	r1, #0
   12b94:	mov	r3, r5
   12b98:	mov	r2, r4
   12b9c:	str	r0, [sp]
   12ba0:	mov	r0, r1
   12ba4:	bl	111f4 <error@plt>
   12ba8:	mov	r0, fp
   12bac:	bl	11110 <free@plt>
   12bb0:	b	126e4 <__assert_fail@plt+0x1310>
   12bb4:	ldrb	r3, [r0, #20]
   12bb8:	cmp	r3, #46	; 0x2e
   12bbc:	moveq	r3, #2
   12bc0:	movne	r3, #1
   12bc4:	add	r0, r0, r3
   12bc8:	ldrb	r3, [r0, #19]
   12bcc:	cmp	r3, #47	; 0x2f
   12bd0:	cmpne	r3, #0
   12bd4:	beq	12870 <__assert_fail@plt+0x149c>
   12bd8:	b	1288c <__assert_fail@plt+0x14b8>
   12bdc:	mov	r0, fp
   12be0:	bl	11110 <free@plt>
   12be4:	ldrd	r0, [r8, #16]
   12be8:	ldrd	r2, [sp, #8]
   12bec:	cmp	r1, r3
   12bf0:	cmpeq	r0, r2
   12bf4:	beq	12910 <__assert_fail@plt+0x153c>
   12bf8:	mov	r2, #5
   12bfc:	ldr	r1, [pc, #636]	; 12e80 <__assert_fail@plt+0x1aac>
   12c00:	mov	r0, r5
   12c04:	bl	11158 <dcgettext@plt>
   12c08:	ldr	r1, [r7, #28]
   12c0c:	mov	r4, r0
   12c10:	mov	r0, #4
   12c14:	bl	15624 <__assert_fail@plt+0x4250>
   12c18:	mov	r2, r4
   12c1c:	mov	r1, r5
   12c20:	mov	r3, r0
   12c24:	mov	r0, r5
   12c28:	bl	111f4 <error@plt>
   12c2c:	ldr	r1, [pc, #592]	; 12e84 <__assert_fail@plt+0x1ab0>
   12c30:	mov	r2, #5
   12c34:	mov	r0, #0
   12c38:	bl	11158 <dcgettext@plt>
   12c3c:	mov	r1, #0
   12c40:	mov	r2, r0
   12c44:	mov	r0, r1
   12c48:	bl	111f4 <error@plt>
   12c4c:	b	126e4 <__assert_fail@plt+0x1310>
   12c50:	ldrd	r0, [r7, #72]	; 0x48
   12c54:	ldrd	r2, [ip, #8]
   12c58:	cmp	r1, r3
   12c5c:	cmpeq	r0, r2
   12c60:	bne	12900 <__assert_fail@plt+0x152c>
   12c64:	ldr	r1, [pc, #540]	; 12e88 <__assert_fail@plt+0x1ab4>
   12c68:	ldr	r0, [r7, #28]
   12c6c:	bl	110e0 <strcmp@plt>
   12c70:	mov	r2, #5
   12c74:	subs	r4, r0, #0
   12c78:	bne	12df0 <__assert_fail@plt+0x1a1c>
   12c7c:	ldr	r1, [pc, #520]	; 12e8c <__assert_fail@plt+0x1ab8>
   12c80:	bl	11158 <dcgettext@plt>
   12c84:	ldr	r1, [r7, #28]
   12c88:	mov	r5, r0
   12c8c:	mov	r0, #4
   12c90:	bl	15624 <__assert_fail@plt+0x4250>
   12c94:	mov	r2, r5
   12c98:	mov	r1, r4
   12c9c:	mov	r3, r0
   12ca0:	mov	r0, r4
   12ca4:	bl	111f4 <error@plt>
   12ca8:	mov	r2, #5
   12cac:	ldr	r1, [pc, #476]	; 12e90 <__assert_fail@plt+0x1abc>
   12cb0:	b	12c34 <__assert_fail@plt+0x1860>
   12cb4:	mov	r2, #5
   12cb8:	ldr	r1, [pc, #468]	; 12e94 <__assert_fail@plt+0x1ac0>
   12cbc:	mov	r0, r4
   12cc0:	bl	11158 <dcgettext@plt>
   12cc4:	mov	r1, r6
   12cc8:	mov	r5, #4
   12ccc:	mov	r2, r0
   12cd0:	mov	r0, r4
   12cd4:	bl	111f4 <error@plt>
   12cd8:	mov	r0, r8
   12cdc:	bl	17c54 <fts_close@@Base>
   12ce0:	cmp	r0, #0
   12ce4:	beq	1273c <__assert_fail@plt+0x1368>
   12ce8:	mov	r2, #5
   12cec:	ldr	r1, [pc, #420]	; 12e98 <__assert_fail@plt+0x1ac4>
   12cf0:	mov	r0, #0
   12cf4:	ldr	r4, [r7]
   12cf8:	bl	11158 <dcgettext@plt>
   12cfc:	mov	r1, r4
   12d00:	mov	r5, #4
   12d04:	mov	r2, r0
   12d08:	mov	r0, #0
   12d0c:	bl	111f4 <error@plt>
   12d10:	b	1273c <__assert_fail@plt+0x1368>
   12d14:	ldr	r3, [r7, #4]
   12d18:	ldr	r2, [r3, #48]	; 0x30
   12d1c:	cmp	r2, #0
   12d20:	blt	12d58 <__assert_fail@plt+0x1984>
   12d24:	ldr	r2, [r3, #16]
   12d28:	cmp	r2, #0
   12d2c:	bne	12d58 <__assert_fail@plt+0x1984>
   12d30:	mov	r1, #1
   12d34:	b	12d44 <__assert_fail@plt+0x1970>
   12d38:	ldr	r2, [r3, #16]
   12d3c:	cmp	r2, #0
   12d40:	bne	12d58 <__assert_fail@plt+0x1984>
   12d44:	str	r1, [r3, #16]
   12d48:	ldr	r3, [r3, #4]
   12d4c:	ldr	r2, [r3, #48]	; 0x30
   12d50:	cmp	r2, #0
   12d54:	bge	12d38 <__assert_fail@plt+0x1964>
   12d58:	mov	r2, #5
   12d5c:	ldr	r1, [pc, #284]	; 12e80 <__assert_fail@plt+0x1aac>
   12d60:	mov	r0, #0
   12d64:	bl	11158 <dcgettext@plt>
   12d68:	ldr	r1, [r7, #28]
   12d6c:	mov	r6, #4
   12d70:	mov	r4, r0
   12d74:	mov	r0, #4
   12d78:	bl	15624 <__assert_fail@plt+0x4250>
   12d7c:	mov	r1, #0
   12d80:	mov	r2, r4
   12d84:	mov	r3, r0
   12d88:	mov	r0, r1
   12d8c:	bl	111f4 <error@plt>
   12d90:	b	12650 <__assert_fail@plt+0x127c>
   12d94:	mov	r5, #2
   12d98:	b	1273c <__assert_fail@plt+0x1368>
   12d9c:	mov	r0, fp
   12da0:	bl	113a4 <close@plt>
   12da4:	b	12894 <__assert_fail@plt+0x14c0>
   12da8:	mov	r2, #5
   12dac:	ldr	r1, [pc, #232]	; 12e9c <__assert_fail@plt+0x1ac8>
   12db0:	mov	r0, #0
   12db4:	bl	11158 <dcgettext@plt>
   12db8:	ldr	r2, [r7, #28]
   12dbc:	mov	r1, #3
   12dc0:	ldrh	r4, [r7, #60]	; 0x3c
   12dc4:	mov	r5, r0
   12dc8:	mov	r0, #0
   12dcc:	bl	15700 <__assert_fail@plt+0x432c>
   12dd0:	ldr	ip, [pc, #200]	; 12ea0 <__assert_fail@plt+0x1acc>
   12dd4:	mov	r1, #0
   12dd8:	mov	r3, r4
   12ddc:	mov	r2, r5
   12de0:	stm	sp, {r0, ip}
   12de4:	mov	r0, r1
   12de8:	bl	111f4 <error@plt>
   12dec:	bl	11398 <abort@plt>
   12df0:	ldr	r1, [pc, #172]	; 12ea4 <__assert_fail@plt+0x1ad0>
   12df4:	mov	r0, #0
   12df8:	bl	11158 <dcgettext@plt>
   12dfc:	ldr	r2, [r7, #28]
   12e00:	mov	r1, #4
   12e04:	mov	r4, r0
   12e08:	mov	r0, #0
   12e0c:	bl	15570 <__assert_fail@plt+0x419c>
   12e10:	ldr	r2, [pc, #112]	; 12e88 <__assert_fail@plt+0x1ab4>
   12e14:	mov	r1, #4
   12e18:	mov	r5, r0
   12e1c:	mov	r0, #1
   12e20:	bl	15570 <__assert_fail@plt+0x419c>
   12e24:	mov	r1, #0
   12e28:	mov	r3, r5
   12e2c:	mov	r2, r4
   12e30:	str	r0, [sp]
   12e34:	mov	r0, r1
   12e38:	bl	111f4 <error@plt>
   12e3c:	b	12ca8 <__assert_fail@plt+0x18d4>
   12e40:	ldr	r3, [pc, #96]	; 12ea8 <__assert_fail@plt+0x1ad4>
   12e44:	ldr	r2, [pc, #96]	; 12eac <__assert_fail@plt+0x1ad8>
   12e48:	ldr	r1, [pc, #96]	; 12eb0 <__assert_fail@plt+0x1adc>
   12e4c:	ldr	r0, [pc, #96]	; 12eb4 <__assert_fail@plt+0x1ae0>
   12e50:	bl	113d4 <__assert_fail@plt>
   12e54:	bl	11164 <__stack_chk_fail@plt>
   12e58:	mov	r6, r5
   12e5c:	b	12650 <__assert_fail@plt+0x127c>
   12e60:	andeq	fp, r2, r8, lsl #30
   12e64:	andeq	fp, r1, r4, ror #1
   12e68:	andeq	fp, r1, r8, lsr #32
   12e6c:	andeq	sl, r1, r0, asr lr
   12e70:	strdeq	sl, [r1], -ip
   12e74:	andeq	sl, r1, r0, lsr pc
   12e78:	andeq	sl, r1, r4, lsr pc
   12e7c:	ldrdeq	sl, [r1], -r8
   12e80:	strdeq	sl, [r1], -r8
   12e84:	andeq	fp, r1, r4, lsl #3
   12e88:	andeq	sl, r1, r0, ror #24
   12e8c:	andeq	sl, r1, r8, lsr pc
   12e90:	andeq	sl, r1, r4, lsr #31
   12e94:	andeq	sl, r1, ip, ror #29
   12e98:	andeq	fp, r1, r0, ror r1
   12e9c:	strdeq	fp, [r1], -ip
   12ea0:	andeq	fp, r1, r4, lsr r1
   12ea4:	andeq	sl, r1, r8, ror #30
   12ea8:	andeq	sl, r1, r8, lsr #28
   12eac:	andeq	r0, r0, r1, ror #4
   12eb0:	andeq	fp, r1, ip, asr #2
   12eb4:	andeq	fp, r1, ip, asr r1
   12eb8:	mov	r0, #1
   12ebc:	b	11b54 <__assert_fail@plt+0x780>
   12ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ec4:	mov	r5, r1
   12ec8:	sub	sp, sp, #12
   12ecc:	mov	r4, r2
   12ed0:	str	r2, [sp]
   12ed4:	mov	r7, r3
   12ed8:	mov	sl, r0
   12edc:	bl	1126c <strlen@plt>
   12ee0:	ldr	fp, [r5]
   12ee4:	cmp	fp, #0
   12ee8:	beq	12fac <__assert_fail@plt+0x1bd8>
   12eec:	mov	r6, #0
   12ef0:	mov	r8, r0
   12ef4:	str	r6, [sp, #4]
   12ef8:	mvn	r9, #0
   12efc:	b	12f28 <__assert_fail@plt+0x1b54>
   12f00:	bl	1114c <memcmp@plt>
   12f04:	ldr	r3, [sp, #4]
   12f08:	cmp	r0, #0
   12f0c:	movne	r3, #1
   12f10:	str	r3, [sp, #4]
   12f14:	ldr	fp, [r5, #4]!
   12f18:	add	r6, r6, #1
   12f1c:	cmp	fp, #0
   12f20:	add	r4, r4, r7
   12f24:	beq	12f84 <__assert_fail@plt+0x1bb0>
   12f28:	mov	r2, r8
   12f2c:	mov	r1, sl
   12f30:	mov	r0, fp
   12f34:	bl	1138c <strncmp@plt>
   12f38:	cmp	r0, #0
   12f3c:	mov	r0, fp
   12f40:	bne	12f14 <__assert_fail@plt+0x1b40>
   12f44:	bl	1126c <strlen@plt>
   12f48:	ldr	r3, [sp]
   12f4c:	mov	r2, r7
   12f50:	mov	r1, r4
   12f54:	cmp	r0, r8
   12f58:	mla	r0, r7, r9, r3
   12f5c:	beq	12f9c <__assert_fail@plt+0x1bc8>
   12f60:	cmn	r9, #1
   12f64:	moveq	r9, r6
   12f68:	beq	12f14 <__assert_fail@plt+0x1b40>
   12f6c:	ldr	r3, [sp]
   12f70:	cmp	r3, #0
   12f74:	bne	12f00 <__assert_fail@plt+0x1b2c>
   12f78:	mov	r3, #1
   12f7c:	str	r3, [sp, #4]
   12f80:	b	12f14 <__assert_fail@plt+0x1b40>
   12f84:	ldr	r3, [sp, #4]
   12f88:	cmp	r3, #0
   12f8c:	mvnne	r9, #1
   12f90:	mov	r0, r9
   12f94:	add	sp, sp, #12
   12f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f9c:	mov	r9, r6
   12fa0:	mov	r0, r9
   12fa4:	add	sp, sp, #12
   12fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fac:	mvn	r9, #0
   12fb0:	b	12f90 <__assert_fail@plt+0x1bbc>
   12fb4:	cmn	r2, #1
   12fb8:	push	{r4, r5, r6, lr}
   12fbc:	mov	r2, #5
   12fc0:	sub	sp, sp, #8
   12fc4:	mov	r5, r1
   12fc8:	mov	r6, r0
   12fcc:	ldreq	r1, [pc, #76]	; 13020 <__assert_fail@plt+0x1c4c>
   12fd0:	ldrne	r1, [pc, #76]	; 13024 <__assert_fail@plt+0x1c50>
   12fd4:	mov	r0, #0
   12fd8:	bl	11158 <dcgettext@plt>
   12fdc:	mov	r2, r5
   12fe0:	mov	r1, #8
   12fe4:	mov	r4, r0
   12fe8:	mov	r0, #0
   12fec:	bl	15570 <__assert_fail@plt+0x419c>
   12ff0:	mov	r1, r6
   12ff4:	mov	r5, r0
   12ff8:	mov	r0, #1
   12ffc:	bl	158bc <__assert_fail@plt+0x44e8>
   13000:	mov	r1, #0
   13004:	mov	r3, r5
   13008:	mov	r2, r4
   1300c:	str	r0, [sp]
   13010:	mov	r0, r1
   13014:	bl	111f4 <error@plt>
   13018:	add	sp, sp, #8
   1301c:	pop	{r4, r5, r6, pc}
   13020:			; <UNDEFINED> instruction: 0x0001b1b4
   13024:	ldrdeq	fp, [r1], -r0
   13028:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1302c:	mov	r6, r0
   13030:	ldr	sl, [pc, #224]	; 13118 <__assert_fail@plt+0x1d44>
   13034:	mov	r4, r1
   13038:	mov	r7, r2
   1303c:	ldr	r1, [pc, #216]	; 1311c <__assert_fail@plt+0x1d48>
   13040:	mov	r2, #5
   13044:	mov	r0, #0
   13048:	bl	11158 <dcgettext@plt>
   1304c:	ldr	r1, [sl]
   13050:	bl	110bc <fputs_unlocked@plt>
   13054:	ldr	fp, [r6]
   13058:	cmp	fp, #0
   1305c:	movne	r9, #0
   13060:	movne	r5, r9
   13064:	bne	130a0 <__assert_fail@plt+0x1ccc>
   13068:	b	130e4 <__assert_fail@plt+0x1d10>
   1306c:	mov	r0, fp
   13070:	bl	158cc <__assert_fail@plt+0x44f8>
   13074:	ldr	r2, [pc, #164]	; 13120 <__assert_fail@plt+0x1d4c>
   13078:	mov	r1, #1
   1307c:	mov	r9, r4
   13080:	mov	r3, r0
   13084:	mov	r0, r8
   13088:	bl	112c0 <__fprintf_chk@plt>
   1308c:	ldr	fp, [r6, #4]!
   13090:	add	r5, r5, #1
   13094:	cmp	fp, #0
   13098:	add	r4, r4, r7
   1309c:	beq	130e4 <__assert_fail@plt+0x1d10>
   130a0:	cmp	r5, #0
   130a4:	mov	r1, r4
   130a8:	mov	r2, r7
   130ac:	mov	r0, r9
   130b0:	ldr	r8, [sl]
   130b4:	beq	1306c <__assert_fail@plt+0x1c98>
   130b8:	bl	1114c <memcmp@plt>
   130bc:	cmp	r0, #0
   130c0:	bne	1306c <__assert_fail@plt+0x1c98>
   130c4:	mov	r0, fp
   130c8:	bl	158cc <__assert_fail@plt+0x44f8>
   130cc:	ldr	r2, [pc, #80]	; 13124 <__assert_fail@plt+0x1d50>
   130d0:	mov	r1, #1
   130d4:	mov	r3, r0
   130d8:	mov	r0, r8
   130dc:	bl	112c0 <__fprintf_chk@plt>
   130e0:	b	1308c <__assert_fail@plt+0x1cb8>
   130e4:	ldr	r0, [sl]
   130e8:	ldr	r3, [r0, #20]
   130ec:	ldr	r2, [r0, #24]
   130f0:	cmp	r3, r2
   130f4:	bcs	1310c <__assert_fail@plt+0x1d38>
   130f8:	add	r1, r3, #1
   130fc:	mov	r2, #10
   13100:	str	r1, [r0, #20]
   13104:	strb	r2, [r3]
   13108:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1310c:	mov	r1, #10
   13110:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13114:	b	112fc <__overflow@plt>
   13118:	andeq	ip, r2, r8, lsl #3
   1311c:	strdeq	fp, [r1], -r0
   13120:	andeq	fp, r1, r8, lsl #4
   13124:	andeq	fp, r1, r0, lsl r2
   13128:	push	{r4, r5, r6, r7, r8, lr}
   1312c:	mov	r6, r1
   13130:	mov	r4, r2
   13134:	mov	r5, r3
   13138:	mov	r7, r0
   1313c:	ldr	r3, [sp, #24]
   13140:	mov	r2, r5
   13144:	mov	r1, r4
   13148:	mov	r0, r6
   1314c:	bl	12ec0 <__assert_fail@plt+0x1aec>
   13150:	cmp	r0, #0
   13154:	popge	{r4, r5, r6, r7, r8, pc}
   13158:	mov	r2, r0
   1315c:	mov	r1, r6
   13160:	mov	r0, r7
   13164:	bl	12fb4 <__assert_fail@plt+0x1be0>
   13168:	mov	r0, r4
   1316c:	ldr	r2, [sp, #24]
   13170:	mov	r1, r5
   13174:	bl	13028 <__assert_fail@plt+0x1c54>
   13178:	ldr	r3, [sp, #28]
   1317c:	blx	r3
   13180:	mvn	r0, #0
   13184:	pop	{r4, r5, r6, r7, r8, pc}
   13188:	push	{r4, r5, r6, r7, r8, lr}
   1318c:	ldr	r7, [r1]
   13190:	cmp	r7, #0
   13194:	beq	131d4 <__assert_fail@plt+0x1e00>
   13198:	mov	r6, r3
   1319c:	mov	r8, r0
   131a0:	mov	r4, r2
   131a4:	mov	r5, r1
   131a8:	b	131b8 <__assert_fail@plt+0x1de4>
   131ac:	ldr	r7, [r5, #4]!
   131b0:	cmp	r7, #0
   131b4:	beq	131d4 <__assert_fail@plt+0x1e00>
   131b8:	mov	r1, r4
   131bc:	mov	r2, r6
   131c0:	mov	r0, r8
   131c4:	bl	1114c <memcmp@plt>
   131c8:	add	r4, r4, r6
   131cc:	cmp	r0, #0
   131d0:	bne	131ac <__assert_fail@plt+0x1dd8>
   131d4:	mov	r0, r7
   131d8:	pop	{r4, r5, r6, r7, r8, pc}
   131dc:	ldr	r3, [pc, #4]	; 131e8 <__assert_fail@plt+0x1e14>
   131e0:	str	r0, [r3]
   131e4:	bx	lr
   131e8:			; <UNDEFINED> instruction: 0x0002c1b0
   131ec:	push	{r4, r5, lr}
   131f0:	sub	sp, sp, #12
   131f4:	ldr	r5, [pc, #244]	; 132f0 <__assert_fail@plt+0x1f1c>
   131f8:	ldr	r4, [r5]
   131fc:	mov	r0, r4
   13200:	bl	162e0 <__assert_fail@plt+0x4f0c>
   13204:	cmp	r0, #0
   13208:	bne	1329c <__assert_fail@plt+0x1ec8>
   1320c:	mov	r0, r4
   13210:	bl	1871c <fts_children@@Base+0x1cc>
   13214:	cmp	r0, #0
   13218:	bne	1323c <__assert_fail@plt+0x1e68>
   1321c:	add	sp, sp, #12
   13220:	pop	{r4, r5, lr}
   13224:	b	13328 <__assert_fail@plt+0x1f54>
   13228:	bl	16280 <__assert_fail@plt+0x4eac>
   1322c:	cmp	r0, #0
   13230:	ldr	r0, [r5]
   13234:	beq	132c0 <__assert_fail@plt+0x1eec>
   13238:	bl	1871c <fts_children@@Base+0x1cc>
   1323c:	mov	r2, #5
   13240:	ldr	r1, [pc, #172]	; 132f4 <__assert_fail@plt+0x1f20>
   13244:	mov	r0, #0
   13248:	bl	11158 <dcgettext@plt>
   1324c:	ldr	r3, [pc, #164]	; 132f8 <__assert_fail@plt+0x1f24>
   13250:	ldr	r4, [r3]
   13254:	mov	r5, r0
   13258:	bl	11284 <__errno_location@plt>
   1325c:	cmp	r4, #0
   13260:	mov	r2, r0
   13264:	beq	132d8 <__assert_fail@plt+0x1f04>
   13268:	mov	r0, r4
   1326c:	ldr	r4, [r2]
   13270:	bl	156ec <__assert_fail@plt+0x4318>
   13274:	mov	r1, r4
   13278:	str	r5, [sp]
   1327c:	ldr	r2, [pc, #120]	; 132fc <__assert_fail@plt+0x1f28>
   13280:	mov	r3, r0
   13284:	mov	r0, #0
   13288:	bl	111f4 <error@plt>
   1328c:	bl	13328 <__assert_fail@plt+0x1f54>
   13290:	ldr	r3, [pc, #104]	; 13300 <__assert_fail@plt+0x1f2c>
   13294:	ldr	r0, [r3]
   13298:	bl	11128 <_exit@plt>
   1329c:	mov	r3, #1
   132a0:	str	r3, [sp]
   132a4:	mov	r0, r4
   132a8:	mov	r2, #0
   132ac:	mov	r3, #0
   132b0:	bl	1631c <__assert_fail@plt+0x4f48>
   132b4:	cmp	r0, #0
   132b8:	ldr	r0, [r5]
   132bc:	beq	13228 <__assert_fail@plt+0x1e54>
   132c0:	bl	1871c <fts_children@@Base+0x1cc>
   132c4:	cmp	r0, #0
   132c8:	bne	1323c <__assert_fail@plt+0x1e68>
   132cc:	add	sp, sp, #12
   132d0:	pop	{r4, r5, lr}
   132d4:	b	13328 <__assert_fail@plt+0x1f54>
   132d8:	ldr	r1, [r0]
   132dc:	mov	r3, r5
   132e0:	mov	r0, r4
   132e4:	ldr	r2, [pc, #24]	; 13304 <__assert_fail@plt+0x1f30>
   132e8:	bl	111f4 <error@plt>
   132ec:	b	1328c <__assert_fail@plt+0x1eb8>
   132f0:	muleq	r2, r0, r1
   132f4:	andeq	fp, r1, r8, lsl r2
   132f8:			; <UNDEFINED> instruction: 0x0002c1b0
   132fc:	andeq	fp, r1, ip, lsr #4
   13300:	andeq	ip, r2, r4, lsr r1
   13304:	andeq	fp, r1, r0, lsr r2
   13308:	ldr	r3, [pc, #4]	; 13314 <__assert_fail@plt+0x1f40>
   1330c:	str	r0, [r3]
   13310:	bx	lr
   13314:			; <UNDEFINED> instruction: 0x0002c1b4
   13318:	ldr	r3, [pc, #4]	; 13324 <__assert_fail@plt+0x1f50>
   1331c:	strb	r0, [r3, #4]
   13320:	bx	lr
   13324:			; <UNDEFINED> instruction: 0x0002c1b4
   13328:	ldr	r3, [pc, #180]	; 133e4 <__assert_fail@plt+0x2010>
   1332c:	push	{r4, r5, r6, lr}
   13330:	sub	sp, sp, #8
   13334:	ldr	r0, [r3]
   13338:	bl	1871c <fts_children@@Base+0x1cc>
   1333c:	cmp	r0, #0
   13340:	beq	13368 <__assert_fail@plt+0x1f94>
   13344:	bl	11284 <__errno_location@plt>
   13348:	ldr	r5, [pc, #152]	; 133e8 <__assert_fail@plt+0x2014>
   1334c:	ldrb	r3, [r5, #4]
   13350:	cmp	r3, #0
   13354:	mov	r4, r0
   13358:	beq	13384 <__assert_fail@plt+0x1fb0>
   1335c:	ldr	r3, [r0]
   13360:	cmp	r3, #32
   13364:	bne	13384 <__assert_fail@plt+0x1fb0>
   13368:	ldr	r3, [pc, #124]	; 133ec <__assert_fail@plt+0x2018>
   1336c:	ldr	r0, [r3]
   13370:	bl	1871c <fts_children@@Base+0x1cc>
   13374:	cmp	r0, #0
   13378:	bne	133c4 <__assert_fail@plt+0x1ff0>
   1337c:	add	sp, sp, #8
   13380:	pop	{r4, r5, r6, pc}
   13384:	mov	r2, #5
   13388:	ldr	r1, [pc, #96]	; 133f0 <__assert_fail@plt+0x201c>
   1338c:	mov	r0, #0
   13390:	bl	11158 <dcgettext@plt>
   13394:	mov	r6, r0
   13398:	ldr	r0, [r5]
   1339c:	cmp	r0, #0
   133a0:	beq	133d0 <__assert_fail@plt+0x1ffc>
   133a4:	ldr	r4, [r4]
   133a8:	bl	156ec <__assert_fail@plt+0x4318>
   133ac:	mov	r1, r4
   133b0:	str	r6, [sp]
   133b4:	ldr	r2, [pc, #56]	; 133f4 <__assert_fail@plt+0x2020>
   133b8:	mov	r3, r0
   133bc:	mov	r0, #0
   133c0:	bl	111f4 <error@plt>
   133c4:	ldr	r3, [pc, #44]	; 133f8 <__assert_fail@plt+0x2024>
   133c8:	ldr	r0, [r3]
   133cc:	bl	11128 <_exit@plt>
   133d0:	mov	r3, r6
   133d4:	ldr	r1, [r4]
   133d8:	ldr	r2, [pc, #28]	; 133fc <__assert_fail@plt+0x2028>
   133dc:	bl	111f4 <error@plt>
   133e0:	b	133c4 <__assert_fail@plt+0x1ff0>
   133e4:	muleq	r2, r4, r1
   133e8:			; <UNDEFINED> instruction: 0x0002c1b4
   133ec:	andeq	ip, r2, r8, lsl #3
   133f0:	andeq	fp, r1, r4, lsr r2
   133f4:	andeq	fp, r1, ip, lsr #4
   133f8:	andeq	ip, r2, r4, lsr r1
   133fc:	andeq	fp, r1, r0, lsr r2
   13400:	ldrb	r3, [r0]
   13404:	cmp	r3, #47	; 0x2f
   13408:	bne	13418 <__assert_fail@plt+0x2044>
   1340c:	ldrb	r3, [r0, #1]!
   13410:	cmp	r3, #47	; 0x2f
   13414:	beq	1340c <__assert_fail@plt+0x2038>
   13418:	cmp	r3, #0
   1341c:	bxeq	lr
   13420:	mov	r2, r0
   13424:	mov	r1, #0
   13428:	cmp	r3, #47	; 0x2f
   1342c:	moveq	r1, #1
   13430:	beq	13440 <__assert_fail@plt+0x206c>
   13434:	cmp	r1, #0
   13438:	movne	r0, r2
   1343c:	movne	r1, #0
   13440:	ldrb	r3, [r2, #1]!
   13444:	cmp	r3, #0
   13448:	bne	13428 <__assert_fail@plt+0x2054>
   1344c:	bx	lr
   13450:	push	{r4, lr}
   13454:	mov	r4, r0
   13458:	bl	1126c <strlen@plt>
   1345c:	cmp	r0, #1
   13460:	popls	{r4, pc}
   13464:	add	r2, r4, r0
   13468:	mov	r3, r0
   1346c:	ldrb	r2, [r2, #-1]
   13470:	cmp	r2, #47	; 0x2f
   13474:	subeq	r3, r0, #2
   13478:	addeq	r3, r4, r3
   1347c:	rsbeq	r1, r4, #1
   13480:	popne	{r4, pc}
   13484:	cmp	r3, r4
   13488:	add	r0, r1, r3
   1348c:	popeq	{r4, pc}
   13490:	ldrb	r2, [r3], #-1
   13494:	cmp	r2, #47	; 0x2f
   13498:	popne	{r4, pc}
   1349c:	b	13484 <__assert_fail@plt+0x20b0>
   134a0:	ldr	r3, [r0, #16]
   134a4:	and	r3, r3, #61440	; 0xf000
   134a8:	cmp	r3, #32768	; 0x8000
   134ac:	beq	134f0 <__assert_fail@plt+0x211c>
   134b0:	cmp	r3, #16384	; 0x4000
   134b4:	mov	r2, #5
   134b8:	beq	13524 <__assert_fail@plt+0x2150>
   134bc:	cmp	r3, #40960	; 0xa000
   134c0:	beq	1353c <__assert_fail@plt+0x2168>
   134c4:	cmp	r3, #24576	; 0x6000
   134c8:	beq	13548 <__assert_fail@plt+0x2174>
   134cc:	cmp	r3, #8192	; 0x2000
   134d0:	beq	13518 <__assert_fail@plt+0x2144>
   134d4:	cmp	r3, #4096	; 0x1000
   134d8:	beq	13554 <__assert_fail@plt+0x2180>
   134dc:	cmp	r3, #49152	; 0xc000
   134e0:	beq	13530 <__assert_fail@plt+0x215c>
   134e4:	ldr	r1, [pc, #116]	; 13560 <__assert_fail@plt+0x218c>
   134e8:	mov	r0, #0
   134ec:	b	11158 <dcgettext@plt>
   134f0:	ldrd	r2, [r0, #48]	; 0x30
   134f4:	orrs	r3, r2, r3
   134f8:	mov	r2, #5
   134fc:	bne	1350c <__assert_fail@plt+0x2138>
   13500:	ldr	r1, [pc, #92]	; 13564 <__assert_fail@plt+0x2190>
   13504:	mov	r0, #0
   13508:	b	11158 <dcgettext@plt>
   1350c:	ldr	r1, [pc, #84]	; 13568 <__assert_fail@plt+0x2194>
   13510:	mov	r0, #0
   13514:	b	11158 <dcgettext@plt>
   13518:	ldr	r1, [pc, #76]	; 1356c <__assert_fail@plt+0x2198>
   1351c:	mov	r0, #0
   13520:	b	11158 <dcgettext@plt>
   13524:	ldr	r1, [pc, #68]	; 13570 <__assert_fail@plt+0x219c>
   13528:	mov	r0, #0
   1352c:	b	11158 <dcgettext@plt>
   13530:	ldr	r1, [pc, #60]	; 13574 <__assert_fail@plt+0x21a0>
   13534:	mov	r0, #0
   13538:	b	11158 <dcgettext@plt>
   1353c:	ldr	r1, [pc, #52]	; 13578 <__assert_fail@plt+0x21a4>
   13540:	mov	r0, #0
   13544:	b	11158 <dcgettext@plt>
   13548:	ldr	r1, [pc, #44]	; 1357c <__assert_fail@plt+0x21a8>
   1354c:	mov	r0, #0
   13550:	b	11158 <dcgettext@plt>
   13554:	ldr	r1, [pc, #36]	; 13580 <__assert_fail@plt+0x21ac>
   13558:	mov	r0, #0
   1355c:	b	11158 <dcgettext@plt>
   13560:			; <UNDEFINED> instruction: 0x0001b2bc
   13564:	andeq	fp, r1, r0, asr #4
   13568:	andeq	fp, r1, r4, asr r2
   1356c:	muleq	r1, r4, r2
   13570:	andeq	fp, r1, r4, ror #4
   13574:			; <UNDEFINED> instruction: 0x0001b2b4
   13578:	andeq	fp, r1, r0, ror r2
   1357c:	andeq	fp, r1, r0, lsl #5
   13580:	andeq	fp, r1, ip, lsr #5
   13584:	push	{r4, lr}
   13588:	bl	13598 <__assert_fail@plt+0x21c4>
   1358c:	cmp	r0, #0
   13590:	popne	{r4, pc}
   13594:	bl	16128 <__assert_fail@plt+0x4d54>
   13598:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1359c:	mov	r6, r1
   135a0:	mov	r9, r2
   135a4:	mov	r7, r0
   135a8:	bl	13400 <__assert_fail@plt+0x202c>
   135ac:	mov	r4, r0
   135b0:	bl	13450 <__assert_fail@plt+0x207c>
   135b4:	sub	r4, r4, r7
   135b8:	mov	r5, r0
   135bc:	mov	r0, r6
   135c0:	bl	1126c <strlen@plt>
   135c4:	cmp	r5, #0
   135c8:	add	r4, r4, r5
   135cc:	mov	r8, r0
   135d0:	beq	13650 <__assert_fail@plt+0x227c>
   135d4:	add	r3, r7, r4
   135d8:	ldrb	r3, [r3, #-1]
   135dc:	cmp	r3, #47	; 0x2f
   135e0:	beq	13644 <__assert_fail@plt+0x2270>
   135e4:	ldrb	r3, [r6]
   135e8:	cmp	r3, #47	; 0x2f
   135ec:	beq	13644 <__assert_fail@plt+0x2270>
   135f0:	mov	r5, #1
   135f4:	mov	sl, #47	; 0x2f
   135f8:	add	r0, r8, #1
   135fc:	add	r0, r0, r4
   13600:	add	r0, r0, r5
   13604:	bl	1120c <malloc@plt>
   13608:	subs	fp, r0, #0
   1360c:	beq	1363c <__assert_fail@plt+0x2268>
   13610:	mov	r2, r4
   13614:	mov	r1, r7
   13618:	bl	1123c <mempcpy@plt>
   1361c:	cmp	r9, #0
   13620:	mov	r2, r8
   13624:	mov	r1, r6
   13628:	strb	sl, [r0], r5
   1362c:	strne	r0, [r9]
   13630:	bl	1123c <mempcpy@plt>
   13634:	mov	r3, #0
   13638:	strb	r3, [r0]
   1363c:	mov	r0, fp
   13640:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13644:	mov	r5, #0
   13648:	mov	sl, r5
   1364c:	b	135f8 <__assert_fail@plt+0x2224>
   13650:	ldrb	r3, [r6]
   13654:	cmp	r3, #47	; 0x2f
   13658:	moveq	r5, #1
   1365c:	movne	sl, #0
   13660:	moveq	sl, #46	; 0x2e
   13664:	b	135f8 <__assert_fail@plt+0x2224>
   13668:	push	{r4, r5, r6, lr}
   1366c:	subs	r4, r0, #0
   13670:	beq	136e4 <__assert_fail@plt+0x2310>
   13674:	mov	r1, #47	; 0x2f
   13678:	bl	11314 <strrchr@plt>
   1367c:	subs	r5, r0, #0
   13680:	beq	136d0 <__assert_fail@plt+0x22fc>
   13684:	add	r6, r5, #1
   13688:	sub	r3, r6, r4
   1368c:	cmp	r3, #6
   13690:	ble	136d0 <__assert_fail@plt+0x22fc>
   13694:	mov	r2, #7
   13698:	ldr	r1, [pc, #96]	; 13700 <__assert_fail@plt+0x232c>
   1369c:	sub	r0, r5, #6
   136a0:	bl	1138c <strncmp@plt>
   136a4:	cmp	r0, #0
   136a8:	bne	136d0 <__assert_fail@plt+0x22fc>
   136ac:	mov	r2, #3
   136b0:	ldr	r1, [pc, #76]	; 13704 <__assert_fail@plt+0x2330>
   136b4:	mov	r0, r6
   136b8:	bl	1138c <strncmp@plt>
   136bc:	cmp	r0, #0
   136c0:	movne	r4, r6
   136c4:	ldreq	r3, [pc, #60]	; 13708 <__assert_fail@plt+0x2334>
   136c8:	addeq	r4, r5, #4
   136cc:	streq	r4, [r3]
   136d0:	ldr	r2, [pc, #52]	; 1370c <__assert_fail@plt+0x2338>
   136d4:	ldr	r3, [pc, #52]	; 13710 <__assert_fail@plt+0x233c>
   136d8:	str	r4, [r2]
   136dc:	str	r4, [r3]
   136e0:	pop	{r4, r5, r6, pc}
   136e4:	ldr	r3, [pc, #40]	; 13714 <__assert_fail@plt+0x2340>
   136e8:	mov	r2, #55	; 0x37
   136ec:	mov	r1, #1
   136f0:	ldr	r3, [r3]
   136f4:	ldr	r0, [pc, #28]	; 13718 <__assert_fail@plt+0x2344>
   136f8:	bl	111b8 <fwrite@plt>
   136fc:	bl	11398 <abort@plt>
   13700:	andeq	fp, r1, r0, lsl #6
   13704:	andeq	fp, r1, r8, lsl #6
   13708:	andeq	ip, r2, r8, ror r1
   1370c:			; <UNDEFINED> instruction: 0x0002c1bc
   13710:	andeq	ip, r2, ip, ror r1
   13714:	andeq	ip, r2, r8, lsl #3
   13718:	andeq	fp, r1, r8, asr #5
   1371c:	push	{r4, lr}
   13720:	mov	r2, #48	; 0x30
   13724:	mov	r4, r1
   13728:	mov	r1, #0
   1372c:	bl	1129c <memset@plt>
   13730:	cmp	r4, #10
   13734:	beq	13740 <__assert_fail@plt+0x236c>
   13738:	str	r4, [r0]
   1373c:	pop	{r4, pc}
   13740:	bl	11398 <abort@plt>
   13744:	push	{r4, r5, r6, lr}
   13748:	mov	r2, #5
   1374c:	mov	r5, r0
   13750:	mov	r6, r1
   13754:	mov	r1, r0
   13758:	mov	r0, #0
   1375c:	bl	11158 <dcgettext@plt>
   13760:	cmp	r5, r0
   13764:	mov	r4, r0
   13768:	beq	13774 <__assert_fail@plt+0x23a0>
   1376c:	mov	r0, r4
   13770:	pop	{r4, r5, r6, pc}
   13774:	bl	19acc <fts_children@@Base+0x157c>
   13778:	ldrb	r3, [r0]
   1377c:	bic	r3, r3, #32
   13780:	cmp	r3, #85	; 0x55
   13784:	bne	137e4 <__assert_fail@plt+0x2410>
   13788:	ldrb	r3, [r0, #1]
   1378c:	bic	r3, r3, #32
   13790:	cmp	r3, #84	; 0x54
   13794:	bne	1385c <__assert_fail@plt+0x2488>
   13798:	ldrb	r3, [r0, #2]
   1379c:	bic	r3, r3, #32
   137a0:	cmp	r3, #70	; 0x46
   137a4:	bne	1385c <__assert_fail@plt+0x2488>
   137a8:	ldrb	r3, [r0, #3]
   137ac:	cmp	r3, #45	; 0x2d
   137b0:	bne	1385c <__assert_fail@plt+0x2488>
   137b4:	ldrb	r3, [r0, #4]
   137b8:	cmp	r3, #56	; 0x38
   137bc:	bne	1385c <__assert_fail@plt+0x2488>
   137c0:	ldrb	r3, [r0, #5]
   137c4:	cmp	r3, #0
   137c8:	bne	1385c <__assert_fail@plt+0x2488>
   137cc:	ldrb	r2, [r4]
   137d0:	ldr	r3, [pc, #156]	; 13874 <__assert_fail@plt+0x24a0>
   137d4:	ldr	r4, [pc, #156]	; 13878 <__assert_fail@plt+0x24a4>
   137d8:	cmp	r2, #96	; 0x60
   137dc:	movne	r4, r3
   137e0:	b	1376c <__assert_fail@plt+0x2398>
   137e4:	cmp	r3, #71	; 0x47
   137e8:	bne	1385c <__assert_fail@plt+0x2488>
   137ec:	ldrb	r3, [r0, #1]
   137f0:	bic	r3, r3, #32
   137f4:	cmp	r3, #66	; 0x42
   137f8:	bne	1385c <__assert_fail@plt+0x2488>
   137fc:	ldrb	r3, [r0, #2]
   13800:	cmp	r3, #49	; 0x31
   13804:	bne	1385c <__assert_fail@plt+0x2488>
   13808:	ldrb	r3, [r0, #3]
   1380c:	cmp	r3, #56	; 0x38
   13810:	bne	1385c <__assert_fail@plt+0x2488>
   13814:	ldrb	r3, [r0, #4]
   13818:	cmp	r3, #48	; 0x30
   1381c:	bne	1385c <__assert_fail@plt+0x2488>
   13820:	ldrb	r3, [r0, #5]
   13824:	cmp	r3, #51	; 0x33
   13828:	bne	1385c <__assert_fail@plt+0x2488>
   1382c:	ldrb	r3, [r0, #6]
   13830:	cmp	r3, #48	; 0x30
   13834:	bne	1385c <__assert_fail@plt+0x2488>
   13838:	ldrb	r3, [r0, #7]
   1383c:	cmp	r3, #0
   13840:	bne	1385c <__assert_fail@plt+0x2488>
   13844:	ldrb	r2, [r4]
   13848:	ldr	r3, [pc, #44]	; 1387c <__assert_fail@plt+0x24a8>
   1384c:	ldr	r4, [pc, #44]	; 13880 <__assert_fail@plt+0x24ac>
   13850:	cmp	r2, #96	; 0x60
   13854:	movne	r4, r3
   13858:	b	1376c <__assert_fail@plt+0x2398>
   1385c:	ldr	r3, [pc, #32]	; 13884 <__assert_fail@plt+0x24b0>
   13860:	ldr	r4, [pc, #32]	; 13888 <__assert_fail@plt+0x24b4>
   13864:	cmp	r6, #9
   13868:	movne	r4, r3
   1386c:	mov	r0, r4
   13870:	pop	{r4, r5, r6, pc}
   13874:	andeq	fp, r1, r4, ror #6
   13878:	andeq	fp, r1, r0, ror r3
   1387c:	andeq	fp, r1, r8, ror #6
   13880:	andeq	fp, r1, ip, ror #6
   13884:	andeq	fp, r1, r4, ror r3
   13888:	andeq	fp, r1, r0, ror #6
   1388c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13890:	sub	sp, sp, #124	; 0x7c
   13894:	ldr	ip, [pc, #3576]	; 14694 <__assert_fail@plt+0x32c0>
   13898:	str	r3, [sp, #24]
   1389c:	ldr	r3, [sp, #168]	; 0xa8
   138a0:	ldr	ip, [ip]
   138a4:	str	r3, [sp, #56]	; 0x38
   138a8:	ldr	r3, [sp, #172]	; 0xac
   138ac:	ldr	r8, [sp, #160]	; 0xa0
   138b0:	str	r3, [sp, #80]	; 0x50
   138b4:	ldr	r3, [sp, #176]	; 0xb0
   138b8:	mov	fp, r0
   138bc:	str	r3, [sp, #76]	; 0x4c
   138c0:	mov	sl, r1
   138c4:	str	r2, [sp, #36]	; 0x24
   138c8:	str	ip, [sp, #116]	; 0x74
   138cc:	bl	111d0 <__ctype_get_mb_cur_max@plt>
   138d0:	ldr	r3, [sp, #164]	; 0xa4
   138d4:	ands	r4, r3, #2
   138d8:	movne	r3, #1
   138dc:	moveq	r3, #0
   138e0:	str	r3, [sp, #32]
   138e4:	str	r0, [sp, #64]	; 0x40
   138e8:	cmp	r8, #10
   138ec:	ldrls	pc, [pc, r8, lsl #2]
   138f0:	b	150a0 <__assert_fail@plt+0x3ccc>
   138f4:	andeq	r3, r1, r8, ror #25
   138f8:	andeq	r3, r1, r0, lsl #27
   138fc:	andeq	r4, r1, r0, lsl #7
   13900:	andeq	r3, r1, r0, lsr #27
   13904:	andeq	r3, r1, r4, asr ip
   13908:	muleq	r1, ip, ip
   1390c:	andeq	r3, r1, r8, lsl sp
   13910:	andeq	r3, r1, r0, asr sp
   13914:	andeq	r3, r1, r0, lsr #18
   13918:	andeq	r3, r1, r0, lsr #18
   1391c:	andeq	r3, r1, r0, lsr #18
   13920:	cmp	r8, #10
   13924:	beq	13948 <__assert_fail@plt+0x2574>
   13928:	mov	r1, r8
   1392c:	ldr	r0, [pc, #3428]	; 14698 <__assert_fail@plt+0x32c4>
   13930:	bl	13744 <__assert_fail@plt+0x2370>
   13934:	mov	r1, r8
   13938:	str	r0, [sp, #80]	; 0x50
   1393c:	ldr	r0, [pc, #3420]	; 146a0 <__assert_fail@plt+0x32cc>
   13940:	bl	13744 <__assert_fail@plt+0x2370>
   13944:	str	r0, [sp, #76]	; 0x4c
   13948:	cmp	r4, #0
   1394c:	movne	r4, #0
   13950:	beq	14d60 <__assert_fail@plt+0x398c>
   13954:	ldr	r7, [sp, #76]	; 0x4c
   13958:	mov	r5, #0
   1395c:	mov	r6, #1
   13960:	mov	r0, r7
   13964:	str	r6, [sp, #40]	; 0x28
   13968:	str	r5, [sp, #68]	; 0x44
   1396c:	bl	1126c <strlen@plt>
   13970:	str	r6, [sp, #28]
   13974:	str	r5, [sp, #44]	; 0x2c
   13978:	str	r5, [sp, #72]	; 0x48
   1397c:	str	r7, [sp, #60]	; 0x3c
   13980:	str	r0, [sp, #52]	; 0x34
   13984:	str	r8, [sp, #160]	; 0xa0
   13988:	mov	r8, fp
   1398c:	ldr	fp, [sp, #160]	; 0xa0
   13990:	mov	r9, #0
   13994:	ldr	r3, [sp, #24]
   13998:	cmn	r3, #1
   1399c:	beq	13f04 <__assert_fail@plt+0x2b30>
   139a0:	ldr	r3, [sp, #24]
   139a4:	subs	r6, r3, r9
   139a8:	movne	r6, #1
   139ac:	cmp	r6, #0
   139b0:	beq	13f1c <__assert_fail@plt+0x2b48>
   139b4:	ldr	r7, [sp, #28]
   139b8:	ldr	r0, [sp, #36]	; 0x24
   139bc:	cmp	fp, #2
   139c0:	moveq	r7, #0
   139c4:	andne	r7, r7, #1
   139c8:	add	r3, r0, r9
   139cc:	cmp	r7, #0
   139d0:	str	r3, [sp, #48]	; 0x30
   139d4:	beq	143c0 <__assert_fail@plt+0x2fec>
   139d8:	ldr	r2, [sp, #52]	; 0x34
   139dc:	cmp	r2, #0
   139e0:	beq	146a4 <__assert_fail@plt+0x32d0>
   139e4:	ldr	r1, [sp, #24]
   139e8:	cmp	r2, #1
   139ec:	mov	r3, r2
   139f0:	movls	r3, #0
   139f4:	movhi	r3, #1
   139f8:	cmn	r1, #1
   139fc:	movne	r3, #0
   13a00:	cmp	r3, #0
   13a04:	add	r5, r9, r2
   13a08:	beq	13a14 <__assert_fail@plt+0x2640>
   13a0c:	bl	1126c <strlen@plt>
   13a10:	str	r0, [sp, #24]
   13a14:	ldr	r3, [sp, #24]
   13a18:	cmp	r5, r3
   13a1c:	bhi	146a4 <__assert_fail@plt+0x32d0>
   13a20:	ldr	r2, [sp, #52]	; 0x34
   13a24:	ldr	r1, [sp, #60]	; 0x3c
   13a28:	ldr	r0, [sp, #48]	; 0x30
   13a2c:	bl	1114c <memcmp@plt>
   13a30:	cmp	r0, #0
   13a34:	bne	146a4 <__assert_fail@plt+0x32d0>
   13a38:	ldr	r3, [sp, #32]
   13a3c:	cmp	r3, #0
   13a40:	bne	14f60 <__assert_fail@plt+0x3b8c>
   13a44:	ldr	r3, [sp, #48]	; 0x30
   13a48:	ldrb	r5, [r3]
   13a4c:	cmp	r5, #126	; 0x7e
   13a50:	ldrls	pc, [pc, r5, lsl #2]
   13a54:	b	14324 <__assert_fail@plt+0x2f50>
   13a58:	andeq	r4, r1, r0, lsl r2
   13a5c:	andeq	r4, r1, r4, lsr #6
   13a60:	andeq	r4, r1, r4, lsr #6
   13a64:	andeq	r4, r1, r4, lsr #6
   13a68:	andeq	r4, r1, r4, lsr #6
   13a6c:	andeq	r4, r1, r4, lsr #6
   13a70:	andeq	r4, r1, r4, lsr #6
   13a74:	ldrdeq	r4, [r1], -ip
   13a78:	andeq	r4, r1, ip, asr #5
   13a7c:	andeq	r4, r1, ip, asr #3
   13a80:	muleq	r1, r4, r1
   13a84:	andeq	r4, r1, ip, ror #3
   13a88:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a8c:	andeq	r4, r1, r4, lsl #2
   13a90:	andeq	r4, r1, r4, lsr #6
   13a94:	andeq	r4, r1, r4, lsr #6
   13a98:	andeq	r4, r1, r4, lsr #6
   13a9c:	andeq	r4, r1, r4, lsr #6
   13aa0:	andeq	r4, r1, r4, lsr #6
   13aa4:	andeq	r4, r1, r4, lsr #6
   13aa8:	andeq	r4, r1, r4, lsr #6
   13aac:	andeq	r4, r1, r4, lsr #6
   13ab0:	andeq	r4, r1, r4, lsr #6
   13ab4:	andeq	r4, r1, r4, lsr #6
   13ab8:	andeq	r4, r1, r4, lsr #6
   13abc:	andeq	r4, r1, r4, lsr #6
   13ac0:	andeq	r4, r1, r4, lsr #6
   13ac4:	andeq	r4, r1, r4, lsr #6
   13ac8:	andeq	r4, r1, r4, lsr #6
   13acc:	andeq	r4, r1, r4, lsr #6
   13ad0:	andeq	r4, r1, r4, lsr #6
   13ad4:	andeq	r4, r1, r4, lsr #6
   13ad8:	andeq	r4, r1, r4, ror #5
   13adc:	strdeq	r4, [r1], -r8
   13ae0:	strdeq	r4, [r1], -r8
   13ae4:	strdeq	r4, [r1], -ip
   13ae8:	strdeq	r4, [r1], -r8
   13aec:	andeq	r4, r1, r8, lsl r3
   13af0:	strdeq	r4, [r1], -r8
   13af4:	andeq	r4, r1, r8, lsr r0
   13af8:	strdeq	r4, [r1], -r8
   13afc:	strdeq	r4, [r1], -r8
   13b00:	strdeq	r4, [r1], -r8
   13b04:	andeq	r4, r1, r8, lsl r3
   13b08:	andeq	r4, r1, r8, lsl r3
   13b0c:	andeq	r4, r1, r8, lsl r3
   13b10:	andeq	r4, r1, r8, lsl r3
   13b14:	andeq	r4, r1, r8, lsl r3
   13b18:	andeq	r4, r1, r8, lsl r3
   13b1c:	andeq	r4, r1, r8, lsl r3
   13b20:	andeq	r4, r1, r8, lsl r3
   13b24:	andeq	r4, r1, r8, lsl r3
   13b28:	andeq	r4, r1, r8, lsl r3
   13b2c:	andeq	r4, r1, r8, lsl r3
   13b30:	andeq	r4, r1, r8, lsl r3
   13b34:	andeq	r4, r1, r8, lsl r3
   13b38:	andeq	r4, r1, r8, lsl r3
   13b3c:	andeq	r4, r1, r8, lsl r3
   13b40:	andeq	r4, r1, r8, lsl r3
   13b44:	strdeq	r4, [r1], -r8
   13b48:	strdeq	r4, [r1], -r8
   13b4c:	strdeq	r4, [r1], -r8
   13b50:	strdeq	r4, [r1], -r8
   13b54:	andeq	r4, r1, ip
   13b58:	andeq	r4, r1, r4, lsr #6
   13b5c:	andeq	r4, r1, r8, lsl r3
   13b60:	andeq	r4, r1, r8, lsl r3
   13b64:	andeq	r4, r1, r8, lsl r3
   13b68:	andeq	r4, r1, r8, lsl r3
   13b6c:	andeq	r4, r1, r8, lsl r3
   13b70:	andeq	r4, r1, r8, lsl r3
   13b74:	andeq	r4, r1, r8, lsl r3
   13b78:	andeq	r4, r1, r8, lsl r3
   13b7c:	andeq	r4, r1, r8, lsl r3
   13b80:	andeq	r4, r1, r8, lsl r3
   13b84:	andeq	r4, r1, r8, lsl r3
   13b88:	andeq	r4, r1, r8, lsl r3
   13b8c:	andeq	r4, r1, r8, lsl r3
   13b90:	andeq	r4, r1, r8, lsl r3
   13b94:	andeq	r4, r1, r8, lsl r3
   13b98:	andeq	r4, r1, r8, lsl r3
   13b9c:	andeq	r4, r1, r8, lsl r3
   13ba0:	andeq	r4, r1, r8, lsl r3
   13ba4:	andeq	r4, r1, r8, lsl r3
   13ba8:	andeq	r4, r1, r8, lsl r3
   13bac:	andeq	r4, r1, r8, lsl r3
   13bb0:	andeq	r4, r1, r8, lsl r3
   13bb4:	andeq	r4, r1, r8, lsl r3
   13bb8:	andeq	r4, r1, r8, lsl r3
   13bbc:	andeq	r4, r1, r8, lsl r3
   13bc0:	andeq	r4, r1, r8, lsl r3
   13bc4:	strdeq	r4, [r1], -r8
   13bc8:	andeq	r3, r1, r4, asr #31
   13bcc:	andeq	r4, r1, r8, lsl r3
   13bd0:	strdeq	r4, [r1], -r8
   13bd4:	andeq	r4, r1, r8, lsl r3
   13bd8:	strdeq	r4, [r1], -r8
   13bdc:	andeq	r4, r1, r8, lsl r3
   13be0:	andeq	r4, r1, r8, lsl r3
   13be4:	andeq	r4, r1, r8, lsl r3
   13be8:	andeq	r4, r1, r8, lsl r3
   13bec:	andeq	r4, r1, r8, lsl r3
   13bf0:	andeq	r4, r1, r8, lsl r3
   13bf4:	andeq	r4, r1, r8, lsl r3
   13bf8:	andeq	r4, r1, r8, lsl r3
   13bfc:	andeq	r4, r1, r8, lsl r3
   13c00:	andeq	r4, r1, r8, lsl r3
   13c04:	andeq	r4, r1, r8, lsl r3
   13c08:	andeq	r4, r1, r8, lsl r3
   13c0c:	andeq	r4, r1, r8, lsl r3
   13c10:	andeq	r4, r1, r8, lsl r3
   13c14:	andeq	r4, r1, r8, lsl r3
   13c18:	andeq	r4, r1, r8, lsl r3
   13c1c:	andeq	r4, r1, r8, lsl r3
   13c20:	andeq	r4, r1, r8, lsl r3
   13c24:	andeq	r4, r1, r8, lsl r3
   13c28:	andeq	r4, r1, r8, lsl r3
   13c2c:	andeq	r4, r1, r8, lsl r3
   13c30:	andeq	r4, r1, r8, lsl r3
   13c34:	andeq	r4, r1, r8, lsl r3
   13c38:	andeq	r4, r1, r8, lsl r3
   13c3c:	andeq	r4, r1, r8, lsl r3
   13c40:	andeq	r4, r1, r8, lsl r3
   13c44:	ldrdeq	r3, [r1], -ip
   13c48:	strdeq	r4, [r1], -r8
   13c4c:	ldrdeq	r3, [r1], -ip
   13c50:	strdeq	r4, [r1], -ip
   13c54:	cmp	r4, #0
   13c58:	moveq	r3, #1
   13c5c:	streq	r3, [sp, #28]
   13c60:	beq	1438c <__assert_fail@plt+0x2fb8>
   13c64:	mov	r3, #0
   13c68:	mov	r4, r3
   13c6c:	mov	r2, #1
   13c70:	str	r2, [sp, #40]	; 0x28
   13c74:	str	r3, [sp, #68]	; 0x44
   13c78:	str	r2, [sp, #32]
   13c7c:	str	r2, [sp, #52]	; 0x34
   13c80:	ldr	r3, [pc, #2584]	; 146a0 <__assert_fail@plt+0x32cc>
   13c84:	str	r4, [sp, #44]	; 0x2c
   13c88:	str	r4, [sp, #72]	; 0x48
   13c8c:	str	r4, [sp, #28]
   13c90:	str	r3, [sp, #60]	; 0x3c
   13c94:	mov	r8, #2
   13c98:	b	13984 <__assert_fail@plt+0x25b0>
   13c9c:	cmp	r4, #0
   13ca0:	bne	14f2c <__assert_fail@plt+0x3b58>
   13ca4:	cmp	sl, #0
   13ca8:	beq	14cec <__assert_fail@plt+0x3918>
   13cac:	mov	r3, #34	; 0x22
   13cb0:	strb	r3, [fp]
   13cb4:	ldr	r3, [pc, #2528]	; 1469c <__assert_fail@plt+0x32c8>
   13cb8:	mov	r1, r4
   13cbc:	mov	r2, #1
   13cc0:	str	r4, [sp, #68]	; 0x44
   13cc4:	str	r2, [sp, #40]	; 0x28
   13cc8:	mov	r4, r2
   13ccc:	str	r1, [sp, #44]	; 0x2c
   13cd0:	str	r1, [sp, #72]	; 0x48
   13cd4:	str	r1, [sp, #32]
   13cd8:	str	r2, [sp, #28]
   13cdc:	str	r2, [sp, #52]	; 0x34
   13ce0:	str	r3, [sp, #60]	; 0x3c
   13ce4:	b	13984 <__assert_fail@plt+0x25b0>
   13ce8:	mov	r3, #0
   13cec:	str	r3, [sp, #68]	; 0x44
   13cf0:	str	r3, [sp, #44]	; 0x2c
   13cf4:	str	r3, [sp, #32]
   13cf8:	str	r3, [sp, #28]
   13cfc:	str	r3, [sp, #60]	; 0x3c
   13d00:	mov	r3, #1
   13d04:	str	r8, [sp, #72]	; 0x48
   13d08:	str	r8, [sp, #52]	; 0x34
   13d0c:	mov	r4, r8
   13d10:	str	r3, [sp, #40]	; 0x28
   13d14:	b	13984 <__assert_fail@plt+0x25b0>
   13d18:	mov	r3, #1
   13d1c:	str	r3, [sp, #40]	; 0x28
   13d20:	str	r3, [sp, #32]
   13d24:	str	r3, [sp, #28]
   13d28:	str	r3, [sp, #52]	; 0x34
   13d2c:	ldr	r3, [pc, #2408]	; 1469c <__assert_fail@plt+0x32c8>
   13d30:	mov	r2, #0
   13d34:	mov	r4, r2
   13d38:	str	r2, [sp, #68]	; 0x44
   13d3c:	str	r2, [sp, #44]	; 0x2c
   13d40:	str	r2, [sp, #72]	; 0x48
   13d44:	str	r3, [sp, #60]	; 0x3c
   13d48:	mov	r8, #5
   13d4c:	b	13984 <__assert_fail@plt+0x25b0>
   13d50:	mov	r3, #0
   13d54:	mov	r2, #1
   13d58:	str	r2, [sp, #40]	; 0x28
   13d5c:	mov	r4, r3
   13d60:	str	r3, [sp, #68]	; 0x44
   13d64:	str	r2, [sp, #28]
   13d68:	str	r3, [sp, #44]	; 0x2c
   13d6c:	str	r3, [sp, #72]	; 0x48
   13d70:	str	r3, [sp, #32]
   13d74:	str	r3, [sp, #52]	; 0x34
   13d78:	str	r3, [sp, #60]	; 0x3c
   13d7c:	b	13984 <__assert_fail@plt+0x25b0>
   13d80:	mov	r2, #1
   13d84:	mov	r3, #0
   13d88:	str	r2, [sp, #40]	; 0x28
   13d8c:	mov	r4, r3
   13d90:	str	r3, [sp, #68]	; 0x44
   13d94:	str	r8, [sp, #52]	; 0x34
   13d98:	str	r2, [sp, #32]
   13d9c:	b	13c80 <__assert_fail@plt+0x28ac>
   13da0:	mov	r3, #1
   13da4:	str	r3, [sp, #40]	; 0x28
   13da8:	str	r3, [sp, #32]
   13dac:	str	r3, [sp, #28]
   13db0:	str	r3, [sp, #52]	; 0x34
   13db4:	ldr	r3, [pc, #2276]	; 146a0 <__assert_fail@plt+0x32cc>
   13db8:	mov	r2, #0
   13dbc:	mov	r4, r2
   13dc0:	str	r2, [sp, #68]	; 0x44
   13dc4:	str	r2, [sp, #44]	; 0x2c
   13dc8:	str	r2, [sp, #72]	; 0x48
   13dcc:	str	r3, [sp, #60]	; 0x3c
   13dd0:	mov	r8, #2
   13dd4:	b	13984 <__assert_fail@plt+0x25b0>
   13dd8:	mov	r7, #0
   13ddc:	ldr	r3, [sp, #24]
   13de0:	cmn	r3, #1
   13de4:	beq	14920 <__assert_fail@plt+0x354c>
   13de8:	ldr	r3, [sp, #24]
   13dec:	subs	r3, r3, #1
   13df0:	movne	r3, #1
   13df4:	cmp	r3, #0
   13df8:	sub	r2, fp, #2
   13dfc:	clz	r2, r2
   13e00:	lsr	r2, r2, #5
   13e04:	bne	14000 <__assert_fail@plt+0x2c2c>
   13e08:	cmp	r9, #0
   13e0c:	bne	14000 <__assert_fail@plt+0x2c2c>
   13e10:	ldr	r3, [sp, #32]
   13e14:	tst	r3, r2
   13e18:	bne	14120 <__assert_fail@plt+0x2d4c>
   13e1c:	ldr	r3, [sp, #28]
   13e20:	eor	r3, r3, #1
   13e24:	orr	r3, r2, r3
   13e28:	ldr	r2, [sp, #32]
   13e2c:	eor	r3, r3, #1
   13e30:	orrs	r3, r2, r3
   13e34:	beq	13e64 <__assert_fail@plt+0x2a90>
   13e38:	mov	r3, #0
   13e3c:	ldr	r1, [sp, #56]	; 0x38
   13e40:	cmp	r1, #0
   13e44:	beq	13e64 <__assert_fail@plt+0x2a90>
   13e48:	lsr	r2, r5, #5
   13e4c:	and	r0, r5, #31
   13e50:	uxtb	r2, r2
   13e54:	ldr	r1, [r1, r2, lsl #2]
   13e58:	lsr	r2, r1, r0
   13e5c:	tst	r2, #1
   13e60:	bne	13e6c <__assert_fail@plt+0x2a98>
   13e64:	cmp	r7, #0
   13e68:	beq	140bc <__assert_fail@plt+0x2ce8>
   13e6c:	sub	r2, fp, #2
   13e70:	clz	r2, r2
   13e74:	lsr	r2, r2, #5
   13e78:	ldr	r3, [sp, #32]
   13e7c:	cmp	r3, #0
   13e80:	bne	141ac <__assert_fail@plt+0x2dd8>
   13e84:	ldr	r3, [sp, #44]	; 0x2c
   13e88:	eor	r3, r3, #1
   13e8c:	ands	r3, r2, r3
   13e90:	beq	13ec8 <__assert_fail@plt+0x2af4>
   13e94:	cmp	sl, r4
   13e98:	movhi	r2, #39	; 0x27
   13e9c:	strbhi	r2, [r8, r4]
   13ea0:	add	r2, r4, #1
   13ea4:	cmp	r2, sl
   13ea8:	movcc	r1, #36	; 0x24
   13eac:	strbcc	r1, [r8, r2]
   13eb0:	add	r2, r4, #2
   13eb4:	cmp	r2, sl
   13eb8:	add	r4, r4, #3
   13ebc:	movcc	r1, #39	; 0x27
   13ec0:	strbcc	r1, [r8, r2]
   13ec4:	str	r3, [sp, #44]	; 0x2c
   13ec8:	cmp	r4, sl
   13ecc:	movcc	r3, #92	; 0x5c
   13ed0:	strbcc	r3, [r8, r4]
   13ed4:	add	r9, r9, #1
   13ed8:	add	r4, r4, #1
   13edc:	cmp	r4, sl
   13ee0:	ldr	r3, [sp, #40]	; 0x28
   13ee4:	strbcc	r5, [r8, r4]
   13ee8:	cmp	r6, #0
   13eec:	moveq	r3, #0
   13ef0:	str	r3, [sp, #40]	; 0x28
   13ef4:	ldr	r3, [sp, #24]
   13ef8:	add	r4, r4, #1
   13efc:	cmn	r3, #1
   13f00:	bne	139a0 <__assert_fail@plt+0x25cc>
   13f04:	ldr	r3, [sp, #36]	; 0x24
   13f08:	ldrb	r6, [r3, r9]
   13f0c:	adds	r6, r6, #0
   13f10:	movne	r6, #1
   13f14:	cmp	r6, #0
   13f18:	bne	139b4 <__assert_fail@plt+0x25e0>
   13f1c:	str	fp, [sp, #160]	; 0xa0
   13f20:	mov	fp, r8
   13f24:	ldr	r8, [sp, #160]	; 0xa0
   13f28:	ldr	r1, [sp, #32]
   13f2c:	cmp	r4, #0
   13f30:	sub	r2, r8, #2
   13f34:	clz	r2, r2
   13f38:	lsr	r2, r2, #5
   13f3c:	andeq	r3, r2, r1
   13f40:	movne	r3, #0
   13f44:	cmp	r3, #0
   13f48:	bne	15034 <__assert_fail@plt+0x3c60>
   13f4c:	eor	r3, r1, #1
   13f50:	ands	r2, r2, r3
   13f54:	beq	14f70 <__assert_fail@plt+0x3b9c>
   13f58:	ldr	r3, [sp, #68]	; 0x44
   13f5c:	cmp	r3, #0
   13f60:	beq	14f74 <__assert_fail@plt+0x3ba0>
   13f64:	ldr	r3, [sp, #40]	; 0x28
   13f68:	cmp	r3, #0
   13f6c:	bne	14ff0 <__assert_fail@plt+0x3c1c>
   13f70:	ldr	r3, [sp, #72]	; 0x48
   13f74:	adds	r3, r3, #0
   13f78:	movne	r3, #1
   13f7c:	cmp	sl, #0
   13f80:	movne	r3, #0
   13f84:	cmp	r3, #0
   13f88:	ldreq	r2, [sp, #68]	; 0x44
   13f8c:	beq	14f74 <__assert_fail@plt+0x3ba0>
   13f90:	ldr	sl, [sp, #72]	; 0x48
   13f94:	str	r3, [sp, #68]	; 0x44
   13f98:	ldr	r3, [pc, #1792]	; 146a0 <__assert_fail@plt+0x32cc>
   13f9c:	mov	r2, #39	; 0x27
   13fa0:	mov	r4, #1
   13fa4:	str	r3, [sp, #60]	; 0x3c
   13fa8:	mov	r3, #0
   13fac:	strb	r2, [fp]
   13fb0:	str	r4, [sp, #52]	; 0x34
   13fb4:	mov	r8, #2
   13fb8:	str	r3, [sp, #32]
   13fbc:	b	13984 <__assert_fail@plt+0x25b0>
   13fc0:	mov	r7, #0
   13fc4:	cmp	fp, #2
   13fc8:	beq	14900 <__assert_fail@plt+0x352c>
   13fcc:	ldr	r3, [sp, #52]	; 0x34
   13fd0:	ldr	r2, [sp, #28]
   13fd4:	ldr	r1, [sp, #32]
   13fd8:	cmp	r3, #0
   13fdc:	andne	r2, r2, r1
   13fe0:	moveq	r2, #0
   13fe4:	cmp	r2, #0
   13fe8:	moveq	r5, #92	; 0x5c
   13fec:	moveq	r3, r5
   13ff0:	bne	1490c <__assert_fail@plt+0x3538>
   13ff4:	ldr	r1, [sp, #28]
   13ff8:	cmp	r1, #0
   13ffc:	bne	1507c <__assert_fail@plt+0x3ca8>
   14000:	mov	r6, #0
   14004:	b	13e1c <__assert_fail@plt+0x2a48>
   14008:	mov	r7, #0
   1400c:	cmp	fp, #2
   14010:	beq	14970 <__assert_fail@plt+0x359c>
   14014:	cmp	fp, #5
   14018:	beq	14934 <__assert_fail@plt+0x3560>
   1401c:	sub	r2, fp, #2
   14020:	mov	r6, #0
   14024:	clz	r2, r2
   14028:	mov	r5, #63	; 0x3f
   1402c:	lsr	r2, r2, #5
   14030:	b	13e1c <__assert_fail@plt+0x2a48>
   14034:	mov	r7, #0
   14038:	cmp	fp, #2
   1403c:	strne	r6, [sp, #68]	; 0x44
   14040:	movne	r2, #0
   14044:	movne	r5, #39	; 0x27
   14048:	bne	13e1c <__assert_fail@plt+0x2a48>
   1404c:	ldr	r3, [sp, #32]
   14050:	cmp	r3, #0
   14054:	bne	14d50 <__assert_fail@plt+0x397c>
   14058:	cmp	sl, #0
   1405c:	ldr	r3, [sp, #72]	; 0x48
   14060:	clz	r3, r3
   14064:	lsr	r3, r3, #5
   14068:	moveq	r3, #0
   1406c:	cmp	r3, #0
   14070:	bne	14c84 <__assert_fail@plt+0x38b0>
   14074:	cmp	sl, r4
   14078:	movhi	r3, #39	; 0x27
   1407c:	strbhi	r3, [r8, r4]
   14080:	add	r3, r4, #1
   14084:	cmp	sl, r3
   14088:	movhi	r2, #92	; 0x5c
   1408c:	strbhi	r2, [r8, r3]
   14090:	add	r3, r4, #2
   14094:	cmp	sl, r3
   14098:	movhi	r2, #39	; 0x27
   1409c:	strbhi	r2, [r8, r3]
   140a0:	mov	r3, #0
   140a4:	cmp	r7, #0
   140a8:	add	r4, r4, #3
   140ac:	str	r3, [sp, #44]	; 0x2c
   140b0:	str	r6, [sp, #68]	; 0x44
   140b4:	mov	r5, #39	; 0x27
   140b8:	bne	13e6c <__assert_fail@plt+0x2a98>
   140bc:	ldr	r2, [sp, #44]	; 0x2c
   140c0:	eor	r3, r3, #1
   140c4:	and	r3, r3, r2
   140c8:	add	r9, r9, #1
   140cc:	uxtb	r3, r3
   140d0:	cmp	r3, #0
   140d4:	beq	13edc <__assert_fail@plt+0x2b08>
   140d8:	cmp	sl, r4
   140dc:	movhi	r3, #39	; 0x27
   140e0:	strbhi	r3, [r8, r4]
   140e4:	add	r3, r4, #1
   140e8:	cmp	sl, r3
   140ec:	movhi	r2, #39	; 0x27
   140f0:	strbhi	r2, [r8, r3]
   140f4:	mov	r3, #0
   140f8:	add	r4, r4, #2
   140fc:	str	r3, [sp, #44]	; 0x2c
   14100:	b	13edc <__assert_fail@plt+0x2b08>
   14104:	mov	r3, #114	; 0x72
   14108:	ldr	r1, [sp, #32]
   1410c:	sub	r2, fp, #2
   14110:	clz	r2, r2
   14114:	lsr	r2, r2, #5
   14118:	tst	r2, r1
   1411c:	beq	13ff4 <__assert_fail@plt+0x2c20>
   14120:	mov	fp, r8
   14124:	mov	r8, #2
   14128:	ldr	r3, [sp, #28]
   1412c:	cmp	r3, #0
   14130:	movne	r8, #4
   14134:	ldr	r3, [sp, #164]	; 0xa4
   14138:	mov	ip, #0
   1413c:	bic	r3, r3, #2
   14140:	str	r3, [sp, #4]
   14144:	ldr	r3, [sp, #76]	; 0x4c
   14148:	str	r8, [sp]
   1414c:	str	r3, [sp, #16]
   14150:	ldr	r3, [sp, #80]	; 0x50
   14154:	ldr	r2, [sp, #36]	; 0x24
   14158:	str	r3, [sp, #12]
   1415c:	mov	r1, sl
   14160:	ldr	r3, [sp, #24]
   14164:	mov	r0, fp
   14168:	str	ip, [sp, #8]
   1416c:	bl	1388c <__assert_fail@plt+0x24b8>
   14170:	mov	r4, r0
   14174:	ldr	r3, [pc, #1304]	; 14694 <__assert_fail@plt+0x32c0>
   14178:	ldr	r2, [sp, #116]	; 0x74
   1417c:	mov	r0, r4
   14180:	ldr	r3, [r3]
   14184:	cmp	r2, r3
   14188:	bne	15078 <__assert_fail@plt+0x3ca4>
   1418c:	add	sp, sp, #124	; 0x7c
   14190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14194:	mov	r5, #110	; 0x6e
   14198:	ldr	r3, [sp, #32]
   1419c:	mov	r2, #0
   141a0:	cmp	r3, #0
   141a4:	mov	r6, r2
   141a8:	beq	13e84 <__assert_fail@plt+0x2ab0>
   141ac:	str	fp, [sp, #160]	; 0xa0
   141b0:	mov	fp, r8
   141b4:	ldr	r8, [sp, #160]	; 0xa0
   141b8:	mov	r3, r2
   141bc:	ldr	r2, [sp, #28]
   141c0:	and	r2, r2, r3
   141c4:	str	r2, [sp, #28]
   141c8:	b	14128 <__assert_fail@plt+0x2d54>
   141cc:	mov	r5, #116	; 0x74
   141d0:	b	14198 <__assert_fail@plt+0x2dc4>
   141d4:	mov	r5, #102	; 0x66
   141d8:	ldr	r3, [sp, #32]
   141dc:	cmp	r3, #0
   141e0:	bne	14d8c <__assert_fail@plt+0x39b8>
   141e4:	mov	r6, #0
   141e8:	b	13ec8 <__assert_fail@plt+0x2af4>
   141ec:	mov	r5, #118	; 0x76
   141f0:	b	141d8 <__assert_fail@plt+0x2e04>
   141f4:	mov	r7, #0
   141f8:	mov	r6, #0
   141fc:	b	13e38 <__assert_fail@plt+0x2a64>
   14200:	ldr	r3, [sp, #32]
   14204:	cmp	r3, #0
   14208:	bne	14fd0 <__assert_fail@plt+0x3bfc>
   1420c:	mov	r7, r3
   14210:	ldr	r3, [sp, #44]	; 0x2c
   14214:	sub	r2, fp, #2
   14218:	eor	r3, r3, #1
   1421c:	clz	r2, r2
   14220:	lsr	r2, r2, #5
   14224:	ands	r3, r2, r3
   14228:	beq	14c70 <__assert_fail@plt+0x389c>
   1422c:	cmp	sl, r4
   14230:	movhi	r1, #39	; 0x27
   14234:	strbhi	r1, [r8, r4]
   14238:	add	r1, r4, #1
   1423c:	cmp	sl, r1
   14240:	movhi	r0, #36	; 0x24
   14244:	strbhi	r0, [r8, r1]
   14248:	add	r1, r4, #2
   1424c:	cmp	sl, r1
   14250:	movhi	r0, #39	; 0x27
   14254:	strbhi	r0, [r8, r1]
   14258:	add	r1, r4, #3
   1425c:	cmp	sl, r1
   14260:	bls	14cd0 <__assert_fail@plt+0x38fc>
   14264:	mov	r4, r1
   14268:	mov	r1, #92	; 0x5c
   1426c:	strb	r1, [r8, r4]
   14270:	mov	r1, r4
   14274:	str	r3, [sp, #44]	; 0x2c
   14278:	cmp	fp, #2
   1427c:	add	r4, r4, #1
   14280:	beq	14d18 <__assert_fail@plt+0x3944>
   14284:	ldr	r0, [sp, #24]
   14288:	add	r3, r9, #1
   1428c:	cmp	r3, r0
   14290:	bcs	142a8 <__assert_fail@plt+0x2ed4>
   14294:	ldr	r0, [sp, #36]	; 0x24
   14298:	ldrb	r3, [r0, r3]
   1429c:	sub	r3, r3, #48	; 0x30
   142a0:	cmp	r3, #9
   142a4:	bls	14d28 <__assert_fail@plt+0x3954>
   142a8:	mov	r5, #48	; 0x30
   142ac:	ldr	r3, [sp, #28]
   142b0:	eor	r3, r3, #1
   142b4:	orrs	r2, r2, r3
   142b8:	mov	r3, r6
   142bc:	moveq	r6, r2
   142c0:	beq	13e3c <__assert_fail@plt+0x2a68>
   142c4:	mov	r6, #0
   142c8:	b	13e64 <__assert_fail@plt+0x2a90>
   142cc:	mov	r2, #0
   142d0:	mov	r6, r2
   142d4:	mov	r5, #98	; 0x62
   142d8:	b	13e84 <__assert_fail@plt+0x2ab0>
   142dc:	mov	r5, #97	; 0x61
   142e0:	b	141e4 <__assert_fail@plt+0x2e10>
   142e4:	mov	r3, r7
   142e8:	mov	r6, r7
   142ec:	mov	r2, #0
   142f0:	mov	r7, r3
   142f4:	mov	r5, #32
   142f8:	b	13e1c <__assert_fail@plt+0x2a48>
   142fc:	cmp	r9, #0
   14300:	mov	r3, r7
   14304:	bne	148cc <__assert_fail@plt+0x34f8>
   14308:	mov	r6, r7
   1430c:	mov	r2, r9
   14310:	mov	r7, r3
   14314:	b	13e1c <__assert_fail@plt+0x2a48>
   14318:	mov	r6, r7
   1431c:	b	13e38 <__assert_fail@plt+0x2a64>
   14320:	mov	r7, #0
   14324:	ldr	r3, [sp, #64]	; 0x40
   14328:	cmp	r3, #1
   1432c:	bne	14988 <__assert_fail@plt+0x35b4>
   14330:	bl	11254 <__ctype_b_loc@plt>
   14334:	ldr	r2, [sp, #64]	; 0x40
   14338:	sxth	r3, r5
   1433c:	mov	ip, r2
   14340:	lsl	r3, r3, #1
   14344:	ldr	r2, [r0]
   14348:	ldrh	r3, [r2, r3]
   1434c:	and	r3, r3, #16384	; 0x4000
   14350:	cmp	r3, #0
   14354:	ldr	r3, [sp, #28]
   14358:	movne	r6, #1
   1435c:	moveq	r6, #0
   14360:	movne	r2, #0
   14364:	andeq	r2, r3, #1
   14368:	cmp	r2, #0
   1436c:	bne	14c98 <__assert_fail@plt+0x38c4>
   14370:	sub	r2, fp, #2
   14374:	clz	r2, r2
   14378:	lsr	r2, r2, #5
   1437c:	b	13e1c <__assert_fail@plt+0x2a48>
   14380:	cmp	r4, #0
   14384:	bne	15044 <__assert_fail@plt+0x3c70>
   14388:	str	r4, [sp, #28]
   1438c:	cmp	sl, #0
   14390:	bne	15088 <__assert_fail@plt+0x3cb4>
   14394:	ldr	r3, [pc, #772]	; 146a0 <__assert_fail@plt+0x32cc>
   14398:	mov	r4, #1
   1439c:	str	r4, [sp, #40]	; 0x28
   143a0:	str	r3, [sp, #60]	; 0x3c
   143a4:	str	r4, [sp, #52]	; 0x34
   143a8:	str	sl, [sp, #72]	; 0x48
   143ac:	str	sl, [sp, #68]	; 0x44
   143b0:	str	sl, [sp, #44]	; 0x2c
   143b4:	str	sl, [sp, #32]
   143b8:	mov	r8, #2
   143bc:	b	13984 <__assert_fail@plt+0x25b0>
   143c0:	ldr	r3, [sp, #36]	; 0x24
   143c4:	ldrb	r5, [r3, r9]
   143c8:	cmp	r5, #126	; 0x7e
   143cc:	ldrls	pc, [pc, r5, lsl #2]
   143d0:	b	14324 <__assert_fail@plt+0x2f50>
   143d4:	andeq	r4, r1, r8, lsl #12
   143d8:	andeq	r4, r1, r4, lsr #6
   143dc:	andeq	r4, r1, r4, lsr #6
   143e0:	andeq	r4, r1, r4, lsr #6
   143e4:	andeq	r4, r1, r4, lsr #6
   143e8:	andeq	r4, r1, r4, lsr #6
   143ec:	andeq	r4, r1, r4, lsr #6
   143f0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143f4:	andeq	r4, r1, r0, ror #11
   143f8:	ldrdeq	r4, [r1], -r8
   143fc:	ldrdeq	r4, [r1], -r0
   14400:	andeq	r4, r1, r0, lsl #13
   14404:	andeq	r4, r1, ip, ror #12
   14408:	andeq	r4, r1, r4, lsl #2
   1440c:	andeq	r4, r1, r4, lsr #6
   14410:	andeq	r4, r1, r4, lsr #6
   14414:	andeq	r4, r1, r4, lsr #6
   14418:	andeq	r4, r1, r4, lsr #6
   1441c:	andeq	r4, r1, r4, lsr #6
   14420:	andeq	r4, r1, r4, lsr #6
   14424:	andeq	r4, r1, r4, lsr #6
   14428:	andeq	r4, r1, r4, lsr #6
   1442c:	andeq	r4, r1, r4, lsr #6
   14430:	andeq	r4, r1, r4, lsr #6
   14434:	andeq	r4, r1, r4, lsr #6
   14438:	andeq	r4, r1, r4, lsr #6
   1443c:	andeq	r4, r1, r4, lsr #6
   14440:	andeq	r4, r1, r4, lsr #6
   14444:	andeq	r4, r1, r4, lsr #6
   14448:	andeq	r4, r1, r4, lsr #6
   1444c:	andeq	r4, r1, r4, lsr #6
   14450:	andeq	r4, r1, r4, lsr #6
   14454:	andeq	r4, r1, ip, asr r6
   14458:	andeq	r4, r1, r8, asr #12
   1445c:	andeq	r4, r1, r8, asr #12
   14460:	andeq	r4, r1, r8, lsr r6
   14464:	andeq	r4, r1, r8, asr #12
   14468:	andeq	r4, r1, r0, ror r3
   1446c:	andeq	r4, r1, r8, asr #12
   14470:	andeq	r4, r1, r8, lsr r0
   14474:	andeq	r4, r1, r8, asr #12
   14478:	andeq	r4, r1, r8, asr #12
   1447c:	andeq	r4, r1, r8, asr #12
   14480:	andeq	r4, r1, r0, ror r3
   14484:	andeq	r4, r1, r0, ror r3
   14488:	andeq	r4, r1, r0, ror r3
   1448c:	andeq	r4, r1, r0, ror r3
   14490:	andeq	r4, r1, r0, ror r3
   14494:	andeq	r4, r1, r0, ror r3
   14498:	andeq	r4, r1, r0, ror r3
   1449c:	andeq	r4, r1, r0, ror r3
   144a0:	andeq	r4, r1, r0, ror r3
   144a4:	andeq	r4, r1, r0, ror r3
   144a8:	andeq	r4, r1, r0, ror r3
   144ac:	andeq	r4, r1, r0, ror r3
   144b0:	andeq	r4, r1, r0, ror r3
   144b4:	andeq	r4, r1, r0, ror r3
   144b8:	andeq	r4, r1, r0, ror r3
   144bc:	andeq	r4, r1, r0, ror r3
   144c0:	andeq	r4, r1, r8, asr #12
   144c4:	andeq	r4, r1, r8, asr #12
   144c8:	andeq	r4, r1, r8, asr #12
   144cc:	andeq	r4, r1, r8, asr #12
   144d0:	andeq	r4, r1, ip
   144d4:	andeq	r4, r1, r4, lsr #6
   144d8:	andeq	r4, r1, r0, ror r3
   144dc:	andeq	r4, r1, r0, ror r3
   144e0:	andeq	r4, r1, r0, ror r3
   144e4:	andeq	r4, r1, r0, ror r3
   144e8:	andeq	r4, r1, r0, ror r3
   144ec:	andeq	r4, r1, r0, ror r3
   144f0:	andeq	r4, r1, r0, ror r3
   144f4:	andeq	r4, r1, r0, ror r3
   144f8:	andeq	r4, r1, r0, ror r3
   144fc:	andeq	r4, r1, r0, ror r3
   14500:	andeq	r4, r1, r0, ror r3
   14504:	andeq	r4, r1, r0, ror r3
   14508:	andeq	r4, r1, r0, ror r3
   1450c:	andeq	r4, r1, r0, ror r3
   14510:	andeq	r4, r1, r0, ror r3
   14514:	andeq	r4, r1, r0, ror r3
   14518:	andeq	r4, r1, r0, ror r3
   1451c:	andeq	r4, r1, r0, ror r3
   14520:	andeq	r4, r1, r0, ror r3
   14524:	andeq	r4, r1, r0, ror r3
   14528:	andeq	r4, r1, r0, ror r3
   1452c:	andeq	r4, r1, r0, ror r3
   14530:	andeq	r4, r1, r0, ror r3
   14534:	andeq	r4, r1, r0, ror r3
   14538:	andeq	r4, r1, r0, ror r3
   1453c:	andeq	r4, r1, r0, ror r3
   14540:	andeq	r4, r1, r8, asr #12
   14544:	andeq	r3, r1, r4, asr #31
   14548:	andeq	r4, r1, r0, ror r3
   1454c:	andeq	r4, r1, r8, asr #12
   14550:	andeq	r4, r1, r0, ror r3
   14554:	andeq	r4, r1, r8, asr #12
   14558:	andeq	r4, r1, r0, ror r3
   1455c:	andeq	r4, r1, r0, ror r3
   14560:	andeq	r4, r1, r0, ror r3
   14564:	andeq	r4, r1, r0, ror r3
   14568:	andeq	r4, r1, r0, ror r3
   1456c:	andeq	r4, r1, r0, ror r3
   14570:	andeq	r4, r1, r0, ror r3
   14574:	andeq	r4, r1, r0, ror r3
   14578:	andeq	r4, r1, r0, ror r3
   1457c:	andeq	r4, r1, r0, ror r3
   14580:	andeq	r4, r1, r0, ror r3
   14584:	andeq	r4, r1, r0, ror r3
   14588:	andeq	r4, r1, r0, ror r3
   1458c:	andeq	r4, r1, r0, ror r3
   14590:	andeq	r4, r1, r0, ror r3
   14594:	andeq	r4, r1, r0, ror r3
   14598:	andeq	r4, r1, r0, ror r3
   1459c:	andeq	r4, r1, r0, ror r3
   145a0:	andeq	r4, r1, r0, ror r3
   145a4:	andeq	r4, r1, r0, ror r3
   145a8:	andeq	r4, r1, r0, ror r3
   145ac:	andeq	r4, r1, r0, ror r3
   145b0:	andeq	r4, r1, r0, ror r3
   145b4:	andeq	r4, r1, r0, ror r3
   145b8:	andeq	r4, r1, r0, ror r3
   145bc:	andeq	r4, r1, r0, ror r3
   145c0:	ldrdeq	r3, [r1], -ip
   145c4:	andeq	r4, r1, r8, asr #12
   145c8:	ldrdeq	r3, [r1], -ip
   145cc:	andeq	r4, r1, r8, lsr r6
   145d0:	mov	r3, #110	; 0x6e
   145d4:	b	14108 <__assert_fail@plt+0x2d34>
   145d8:	mov	r3, #116	; 0x74
   145dc:	b	14108 <__assert_fail@plt+0x2d34>
   145e0:	sub	r2, fp, #2
   145e4:	mov	r3, #98	; 0x62
   145e8:	clz	r2, r2
   145ec:	lsr	r2, r2, #5
   145f0:	b	13ff4 <__assert_fail@plt+0x2c20>
   145f4:	sub	r2, fp, #2
   145f8:	mov	r3, #97	; 0x61
   145fc:	clz	r2, r2
   14600:	lsr	r2, r2, #5
   14604:	b	13ff4 <__assert_fail@plt+0x2c20>
   14608:	ldr	r3, [sp, #28]
   1460c:	cmp	r3, #0
   14610:	bne	14200 <__assert_fail@plt+0x2e2c>
   14614:	ldr	r3, [sp, #164]	; 0xa4
   14618:	tst	r3, #1
   1461c:	bne	14c90 <__assert_fail@plt+0x38bc>
   14620:	ldr	r6, [sp, #28]
   14624:	sub	r2, fp, #2
   14628:	mov	r7, r6
   1462c:	clz	r2, r2
   14630:	lsr	r2, r2, #5
   14634:	b	13e1c <__assert_fail@plt+0x2a48>
   14638:	sub	r2, fp, #2
   1463c:	clz	r2, r2
   14640:	lsr	r2, r2, #5
   14644:	b	13e08 <__assert_fail@plt+0x2a34>
   14648:	sub	r2, fp, #2
   1464c:	mov	r6, #0
   14650:	clz	r2, r2
   14654:	lsr	r2, r2, #5
   14658:	b	13e10 <__assert_fail@plt+0x2a3c>
   1465c:	sub	r2, fp, #2
   14660:	clz	r2, r2
   14664:	lsr	r2, r2, #5
   14668:	b	13e10 <__assert_fail@plt+0x2a3c>
   1466c:	sub	r2, fp, #2
   14670:	mov	r3, #102	; 0x66
   14674:	clz	r2, r2
   14678:	lsr	r2, r2, #5
   1467c:	b	13ff4 <__assert_fail@plt+0x2c20>
   14680:	sub	r2, fp, #2
   14684:	mov	r3, #118	; 0x76
   14688:	clz	r2, r2
   1468c:	lsr	r2, r2, #5
   14690:	b	13ff4 <__assert_fail@plt+0x2c20>
   14694:	andeq	fp, r2, r8, lsl #30
   14698:	andeq	fp, r1, r8, ror r3
   1469c:	andeq	fp, r1, r0, ror #6
   146a0:	andeq	fp, r1, r4, ror r3
   146a4:	ldr	r3, [sp, #48]	; 0x30
   146a8:	ldrb	r5, [r3]
   146ac:	cmp	r5, #126	; 0x7e
   146b0:	ldrls	pc, [pc, r5, lsl #2]
   146b4:	b	14320 <__assert_fail@plt+0x2f4c>
   146b8:	andeq	r4, r1, r0, lsl #4
   146bc:	andeq	r4, r1, r0, lsr #6
   146c0:	andeq	r4, r1, r0, lsr #6
   146c4:	andeq	r4, r1, r0, lsr #6
   146c8:	andeq	r4, r1, r0, lsr #6
   146cc:	andeq	r4, r1, r0, lsr #6
   146d0:	andeq	r4, r1, r0, lsr #6
   146d4:	strdeq	r4, [r1], -r8
   146d8:	strdeq	r4, [r1], -r0
   146dc:	andeq	r4, r1, ip, asr #3
   146e0:	muleq	r1, r4, r1
   146e4:	andeq	r4, r1, ip, ror #3
   146e8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146ec:	andeq	r4, r1, r4, ror #17
   146f0:	andeq	r4, r1, r0, lsr #6
   146f4:	andeq	r4, r1, r0, lsr #6
   146f8:	andeq	r4, r1, r0, lsr #6
   146fc:	andeq	r4, r1, r0, lsr #6
   14700:	andeq	r4, r1, r0, lsr #6
   14704:	andeq	r4, r1, r0, lsr #6
   14708:	andeq	r4, r1, r0, lsr #6
   1470c:	andeq	r4, r1, r0, lsr #6
   14710:	andeq	r4, r1, r0, lsr #6
   14714:	andeq	r4, r1, r0, lsr #6
   14718:	andeq	r4, r1, r0, lsr #6
   1471c:	andeq	r4, r1, r0, lsr #6
   14720:	andeq	r4, r1, r0, lsr #6
   14724:	andeq	r4, r1, r0, lsr #6
   14728:	andeq	r4, r1, r0, lsr #6
   1472c:	andeq	r4, r1, r0, lsr #6
   14730:	andeq	r4, r1, r0, lsr #6
   14734:	andeq	r4, r1, r0, lsr #6
   14738:	ldrdeq	r4, [r1], -ip
   1473c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14740:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14744:	andeq	r4, r1, r0, asr #17
   14748:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1474c:			; <UNDEFINED> instruction: 0x000148b4
   14750:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14754:	andeq	r4, r1, r4, lsr r0
   14758:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1475c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14760:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14764:			; <UNDEFINED> instruction: 0x000148b4
   14768:			; <UNDEFINED> instruction: 0x000148b4
   1476c:			; <UNDEFINED> instruction: 0x000148b4
   14770:			; <UNDEFINED> instruction: 0x000148b4
   14774:			; <UNDEFINED> instruction: 0x000148b4
   14778:			; <UNDEFINED> instruction: 0x000148b4
   1477c:			; <UNDEFINED> instruction: 0x000148b4
   14780:			; <UNDEFINED> instruction: 0x000148b4
   14784:			; <UNDEFINED> instruction: 0x000148b4
   14788:			; <UNDEFINED> instruction: 0x000148b4
   1478c:			; <UNDEFINED> instruction: 0x000148b4
   14790:			; <UNDEFINED> instruction: 0x000148b4
   14794:			; <UNDEFINED> instruction: 0x000148b4
   14798:			; <UNDEFINED> instruction: 0x000148b4
   1479c:			; <UNDEFINED> instruction: 0x000148b4
   147a0:			; <UNDEFINED> instruction: 0x000148b4
   147a4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147a8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147ac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147b0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147b4:	andeq	r4, r1, r8
   147b8:	andeq	r4, r1, r0, lsr #6
   147bc:			; <UNDEFINED> instruction: 0x000148b4
   147c0:			; <UNDEFINED> instruction: 0x000148b4
   147c4:			; <UNDEFINED> instruction: 0x000148b4
   147c8:			; <UNDEFINED> instruction: 0x000148b4
   147cc:			; <UNDEFINED> instruction: 0x000148b4
   147d0:			; <UNDEFINED> instruction: 0x000148b4
   147d4:			; <UNDEFINED> instruction: 0x000148b4
   147d8:			; <UNDEFINED> instruction: 0x000148b4
   147dc:			; <UNDEFINED> instruction: 0x000148b4
   147e0:			; <UNDEFINED> instruction: 0x000148b4
   147e4:			; <UNDEFINED> instruction: 0x000148b4
   147e8:			; <UNDEFINED> instruction: 0x000148b4
   147ec:			; <UNDEFINED> instruction: 0x000148b4
   147f0:			; <UNDEFINED> instruction: 0x000148b4
   147f4:			; <UNDEFINED> instruction: 0x000148b4
   147f8:			; <UNDEFINED> instruction: 0x000148b4
   147fc:			; <UNDEFINED> instruction: 0x000148b4
   14800:			; <UNDEFINED> instruction: 0x000148b4
   14804:			; <UNDEFINED> instruction: 0x000148b4
   14808:			; <UNDEFINED> instruction: 0x000148b4
   1480c:			; <UNDEFINED> instruction: 0x000148b4
   14810:			; <UNDEFINED> instruction: 0x000148b4
   14814:			; <UNDEFINED> instruction: 0x000148b4
   14818:			; <UNDEFINED> instruction: 0x000148b4
   1481c:			; <UNDEFINED> instruction: 0x000148b4
   14820:			; <UNDEFINED> instruction: 0x000148b4
   14824:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14828:	andeq	r3, r1, r0, asr #31
   1482c:			; <UNDEFINED> instruction: 0x000148b4
   14830:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14834:			; <UNDEFINED> instruction: 0x000148b4
   14838:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1483c:			; <UNDEFINED> instruction: 0x000148b4
   14840:			; <UNDEFINED> instruction: 0x000148b4
   14844:			; <UNDEFINED> instruction: 0x000148b4
   14848:			; <UNDEFINED> instruction: 0x000148b4
   1484c:			; <UNDEFINED> instruction: 0x000148b4
   14850:			; <UNDEFINED> instruction: 0x000148b4
   14854:			; <UNDEFINED> instruction: 0x000148b4
   14858:			; <UNDEFINED> instruction: 0x000148b4
   1485c:			; <UNDEFINED> instruction: 0x000148b4
   14860:			; <UNDEFINED> instruction: 0x000148b4
   14864:			; <UNDEFINED> instruction: 0x000148b4
   14868:			; <UNDEFINED> instruction: 0x000148b4
   1486c:			; <UNDEFINED> instruction: 0x000148b4
   14870:			; <UNDEFINED> instruction: 0x000148b4
   14874:			; <UNDEFINED> instruction: 0x000148b4
   14878:			; <UNDEFINED> instruction: 0x000148b4
   1487c:			; <UNDEFINED> instruction: 0x000148b4
   14880:			; <UNDEFINED> instruction: 0x000148b4
   14884:			; <UNDEFINED> instruction: 0x000148b4
   14888:			; <UNDEFINED> instruction: 0x000148b4
   1488c:			; <UNDEFINED> instruction: 0x000148b4
   14890:			; <UNDEFINED> instruction: 0x000148b4
   14894:			; <UNDEFINED> instruction: 0x000148b4
   14898:			; <UNDEFINED> instruction: 0x000148b4
   1489c:			; <UNDEFINED> instruction: 0x000148b4
   148a0:			; <UNDEFINED> instruction: 0x000148b4
   148a4:	ldrdeq	r3, [r1], -r8
   148a8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148ac:	ldrdeq	r3, [r1], -r8
   148b0:	andeq	r4, r1, r0, asr #17
   148b4:	mov	r6, r7
   148b8:	mov	r7, #0
   148bc:	b	13e38 <__assert_fail@plt+0x2a64>
   148c0:	cmp	r9, #0
   148c4:	mov	r3, #0
   148c8:	beq	14308 <__assert_fail@plt+0x2f34>
   148cc:	mov	r6, #0
   148d0:	mov	r7, r3
   148d4:	mov	r3, r6
   148d8:	b	13e3c <__assert_fail@plt+0x2a68>
   148dc:	mov	r3, #0
   148e0:	b	142e8 <__assert_fail@plt+0x2f14>
   148e4:	mov	r7, #0
   148e8:	mov	r3, #114	; 0x72
   148ec:	b	14108 <__assert_fail@plt+0x2d34>
   148f0:	mov	r5, #98	; 0x62
   148f4:	b	14198 <__assert_fail@plt+0x2dc4>
   148f8:	mov	r5, #97	; 0x61
   148fc:	b	141d8 <__assert_fail@plt+0x2e04>
   14900:	ldr	r3, [sp, #32]
   14904:	cmp	r3, #0
   14908:	bne	14d50 <__assert_fail@plt+0x397c>
   1490c:	add	r9, r9, #1
   14910:	ldr	r3, [sp, #44]	; 0x2c
   14914:	mov	r6, #0
   14918:	mov	r5, #92	; 0x5c
   1491c:	b	140d0 <__assert_fail@plt+0x2cfc>
   14920:	ldr	r3, [sp, #36]	; 0x24
   14924:	ldrb	r3, [r3, #1]
   14928:	adds	r3, r3, #0
   1492c:	movne	r3, #1
   14930:	b	13df4 <__assert_fail@plt+0x2a20>
   14934:	ldr	r3, [sp, #164]	; 0xa4
   14938:	ands	r3, r3, #4
   1493c:	beq	14960 <__assert_fail@plt+0x358c>
   14940:	ldr	r2, [sp, #24]
   14944:	add	r3, r9, #2
   14948:	cmp	r3, r2
   1494c:	bcs	14960 <__assert_fail@plt+0x358c>
   14950:	ldr	r2, [sp, #48]	; 0x30
   14954:	ldrb	r5, [r2, #1]
   14958:	cmp	r5, #63	; 0x3f
   1495c:	beq	14dc4 <__assert_fail@plt+0x39f0>
   14960:	mov	r2, #0
   14964:	mov	r6, r2
   14968:	mov	r5, #63	; 0x3f
   1496c:	b	13e1c <__assert_fail@plt+0x2a48>
   14970:	ldr	r3, [sp, #32]
   14974:	cmp	r3, #0
   14978:	bne	14d50 <__assert_fail@plt+0x397c>
   1497c:	mov	r6, r3
   14980:	mov	r5, #63	; 0x3f
   14984:	b	13e64 <__assert_fail@plt+0x2a90>
   14988:	ldr	r3, [sp, #24]
   1498c:	cmn	r3, #1
   14990:	mov	r3, #0
   14994:	str	r3, [sp, #108]	; 0x6c
   14998:	str	r3, [sp, #112]	; 0x70
   1499c:	bne	149ac <__assert_fail@plt+0x35d8>
   149a0:	ldr	r0, [sp, #36]	; 0x24
   149a4:	bl	1126c <strlen@plt>
   149a8:	str	r0, [sp, #24]
   149ac:	mov	r3, #0
   149b0:	str	sl, [sp, #88]	; 0x58
   149b4:	ldr	sl, [sp, #36]	; 0x24
   149b8:	str	r5, [sp, #92]	; 0x5c
   149bc:	mov	r5, r3
   149c0:	str	r7, [sp, #96]	; 0x60
   149c4:	str	r4, [sp, #100]	; 0x64
   149c8:	str	r8, [sp, #84]	; 0x54
   149cc:	ldr	r3, [sp, #24]
   149d0:	add	r4, r9, r5
   149d4:	add	r7, sl, r4
   149d8:	sub	r2, r3, r4
   149dc:	mov	r1, r7
   149e0:	add	r3, sp, #108	; 0x6c
   149e4:	add	r0, sp, #104	; 0x68
   149e8:	bl	1869c <fts_children@@Base+0x14c>
   149ec:	subs	r8, r0, #0
   149f0:	beq	14a40 <__assert_fail@plt+0x366c>
   149f4:	cmn	r8, #1
   149f8:	beq	14da0 <__assert_fail@plt+0x39cc>
   149fc:	cmn	r8, #2
   14a00:	beq	14ec0 <__assert_fail@plt+0x3aec>
   14a04:	ldr	r3, [sp, #32]
   14a08:	cmp	fp, #2
   14a0c:	movne	r3, #0
   14a10:	andeq	r3, r3, #1
   14a14:	cmp	r3, #0
   14a18:	bne	14ba0 <__assert_fail@plt+0x37cc>
   14a1c:	ldr	r0, [sp, #104]	; 0x68
   14a20:	bl	111a0 <iswprint@plt>
   14a24:	add	r5, r5, r8
   14a28:	cmp	r0, #0
   14a2c:	add	r0, sp, #108	; 0x6c
   14a30:	moveq	r6, #0
   14a34:	bl	11140 <mbsinit@plt>
   14a38:	cmp	r0, #0
   14a3c:	beq	149cc <__assert_fail@plt+0x35f8>
   14a40:	ldr	r3, [sp, #28]
   14a44:	mov	ip, r5
   14a48:	eor	r2, r6, #1
   14a4c:	ldr	r5, [sp, #92]	; 0x5c
   14a50:	ldr	r7, [sp, #96]	; 0x60
   14a54:	ldr	r4, [sp, #100]	; 0x64
   14a58:	ldr	r8, [sp, #84]	; 0x54
   14a5c:	ldr	sl, [sp, #88]	; 0x58
   14a60:	and	r2, r2, r3
   14a64:	cmp	ip, #1
   14a68:	bls	14368 <__assert_fail@plt+0x2f94>
   14a6c:	add	r1, ip, r9
   14a70:	ldr	lr, [sp, #48]	; 0x30
   14a74:	mov	r0, #0
   14a78:	str	r6, [sp, #48]	; 0x30
   14a7c:	mov	ip, #39	; 0x27
   14a80:	ldr	r6, [sp, #44]	; 0x2c
   14a84:	b	14b3c <__assert_fail@plt+0x3768>
   14a88:	ldr	r0, [sp, #32]
   14a8c:	sub	r3, fp, #2
   14a90:	cmp	r0, #0
   14a94:	clz	r3, r3
   14a98:	lsr	r3, r3, #5
   14a9c:	bne	14ca4 <__assert_fail@plt+0x38d0>
   14aa0:	eor	r0, r6, #1
   14aa4:	ands	r3, r3, r0
   14aa8:	beq	14ad8 <__assert_fail@plt+0x3704>
   14aac:	add	r0, r4, #1
   14ab0:	cmp	sl, r4
   14ab4:	strbhi	ip, [r8, r4]
   14ab8:	cmp	sl, r0
   14abc:	movhi	r6, #36	; 0x24
   14ac0:	strbhi	r6, [r8, r0]
   14ac4:	add	r0, r4, #2
   14ac8:	mov	r6, r3
   14acc:	add	r4, r4, #3
   14ad0:	cmp	sl, r0
   14ad4:	strbhi	ip, [r8, r0]
   14ad8:	cmp	sl, r4
   14adc:	movhi	r3, #92	; 0x5c
   14ae0:	strbhi	r3, [r8, r4]
   14ae4:	add	r3, r4, #1
   14ae8:	cmp	sl, r3
   14aec:	lsrhi	r0, r5, #6
   14af0:	addhi	r0, r0, #48	; 0x30
   14af4:	strbhi	r0, [r8, r3]
   14af8:	add	r0, r4, #2
   14afc:	cmp	sl, r0
   14b00:	lsrhi	r3, r5, #3
   14b04:	andhi	r3, r3, #7
   14b08:	addhi	r3, r3, #48	; 0x30
   14b0c:	add	r9, r9, #1
   14b10:	strbhi	r3, [r8, r0]
   14b14:	and	r5, r5, #7
   14b18:	cmp	r9, r1
   14b1c:	add	r5, r5, #48	; 0x30
   14b20:	add	r4, r4, #3
   14b24:	bcs	14cc4 <__assert_fail@plt+0x38f0>
   14b28:	mov	r0, r2
   14b2c:	cmp	sl, r4
   14b30:	strbhi	r5, [r8, r4]
   14b34:	ldrb	r5, [lr, #1]!
   14b38:	add	r4, r4, #1
   14b3c:	cmp	r2, #0
   14b40:	bne	14a88 <__assert_fail@plt+0x36b4>
   14b44:	eor	r3, r0, #1
   14b48:	and	r3, r3, r6
   14b4c:	cmp	r7, #0
   14b50:	uxtb	r3, r3
   14b54:	beq	14b68 <__assert_fail@plt+0x3794>
   14b58:	cmp	sl, r4
   14b5c:	movhi	r7, #92	; 0x5c
   14b60:	strbhi	r7, [r8, r4]
   14b64:	add	r4, r4, #1
   14b68:	add	r9, r9, #1
   14b6c:	cmp	r9, r1
   14b70:	bcs	14cb8 <__assert_fail@plt+0x38e4>
   14b74:	cmp	r3, #0
   14b78:	beq	14ce4 <__assert_fail@plt+0x3910>
   14b7c:	cmp	sl, r4
   14b80:	add	r3, r4, #1
   14b84:	strbhi	ip, [r8, r4]
   14b88:	mov	r7, #0
   14b8c:	cmp	sl, r3
   14b90:	strbhi	ip, [r8, r3]
   14b94:	add	r4, r4, #2
   14b98:	mov	r6, r7
   14b9c:	b	14b2c <__assert_fail@plt+0x3758>
   14ba0:	cmp	r8, #1
   14ba4:	beq	14a1c <__assert_fail@plt+0x3648>
   14ba8:	add	r1, r4, #1
   14bac:	add	r3, sl, r8
   14bb0:	add	r1, sl, r1
   14bb4:	add	r4, r3, r4
   14bb8:	ldrb	r3, [r1], #1
   14bbc:	sub	r3, r3, #91	; 0x5b
   14bc0:	cmp	r3, #33	; 0x21
   14bc4:	ldrls	pc, [pc, r3, lsl #2]
   14bc8:	b	14c54 <__assert_fail@plt+0x3880>
   14bcc:	andeq	r4, r1, r0, ror #24
   14bd0:	andeq	r4, r1, r0, ror #24
   14bd4:	andeq	r4, r1, r4, asr ip
   14bd8:	andeq	r4, r1, r0, ror #24
   14bdc:	andeq	r4, r1, r4, asr ip
   14be0:	andeq	r4, r1, r0, ror #24
   14be4:	andeq	r4, r1, r4, asr ip
   14be8:	andeq	r4, r1, r4, asr ip
   14bec:	andeq	r4, r1, r4, asr ip
   14bf0:	andeq	r4, r1, r4, asr ip
   14bf4:	andeq	r4, r1, r4, asr ip
   14bf8:	andeq	r4, r1, r4, asr ip
   14bfc:	andeq	r4, r1, r4, asr ip
   14c00:	andeq	r4, r1, r4, asr ip
   14c04:	andeq	r4, r1, r4, asr ip
   14c08:	andeq	r4, r1, r4, asr ip
   14c0c:	andeq	r4, r1, r4, asr ip
   14c10:	andeq	r4, r1, r4, asr ip
   14c14:	andeq	r4, r1, r4, asr ip
   14c18:	andeq	r4, r1, r4, asr ip
   14c1c:	andeq	r4, r1, r4, asr ip
   14c20:	andeq	r4, r1, r4, asr ip
   14c24:	andeq	r4, r1, r4, asr ip
   14c28:	andeq	r4, r1, r4, asr ip
   14c2c:	andeq	r4, r1, r4, asr ip
   14c30:	andeq	r4, r1, r4, asr ip
   14c34:	andeq	r4, r1, r4, asr ip
   14c38:	andeq	r4, r1, r4, asr ip
   14c3c:	andeq	r4, r1, r4, asr ip
   14c40:	andeq	r4, r1, r4, asr ip
   14c44:	andeq	r4, r1, r4, asr ip
   14c48:	andeq	r4, r1, r4, asr ip
   14c4c:	andeq	r4, r1, r4, asr ip
   14c50:	andeq	r4, r1, r0, ror #24
   14c54:	cmp	r4, r1
   14c58:	bne	14bb8 <__assert_fail@plt+0x37e4>
   14c5c:	b	14a1c <__assert_fail@plt+0x3648>
   14c60:	ldr	fp, [sp, #84]	; 0x54
   14c64:	ldr	sl, [sp, #88]	; 0x58
   14c68:	mov	r8, #2
   14c6c:	b	14128 <__assert_fail@plt+0x2d54>
   14c70:	cmp	sl, r4
   14c74:	movls	r1, r4
   14c78:	bls	14278 <__assert_fail@plt+0x2ea4>
   14c7c:	ldr	r3, [sp, #44]	; 0x2c
   14c80:	b	14268 <__assert_fail@plt+0x2e94>
   14c84:	str	sl, [sp, #72]	; 0x48
   14c88:	ldr	sl, [sp, #32]
   14c8c:	b	140a0 <__assert_fail@plt+0x2ccc>
   14c90:	add	r9, r9, #1
   14c94:	b	13994 <__assert_fail@plt+0x25c0>
   14c98:	ldr	r2, [sp, #28]
   14c9c:	mov	r6, #0
   14ca0:	b	14a6c <__assert_fail@plt+0x3698>
   14ca4:	str	fp, [sp, #160]	; 0xa0
   14ca8:	str	r3, [sp, #28]
   14cac:	mov	fp, r8
   14cb0:	ldr	r8, [sp, #160]	; 0xa0
   14cb4:	b	14128 <__assert_fail@plt+0x2d54>
   14cb8:	str	r6, [sp, #44]	; 0x2c
   14cbc:	ldr	r6, [sp, #48]	; 0x30
   14cc0:	b	140d0 <__assert_fail@plt+0x2cfc>
   14cc4:	str	r6, [sp, #44]	; 0x2c
   14cc8:	ldr	r6, [sp, #48]	; 0x30
   14ccc:	b	13edc <__assert_fail@plt+0x2b08>
   14cd0:	add	r4, r4, #4
   14cd4:	str	r3, [sp, #44]	; 0x2c
   14cd8:	mov	r6, #0
   14cdc:	mov	r5, #48	; 0x30
   14ce0:	b	13e64 <__assert_fail@plt+0x2a90>
   14ce4:	mov	r7, r3
   14ce8:	b	14b2c <__assert_fail@plt+0x3758>
   14cec:	ldr	r3, [pc, #-1624]	; 1469c <__assert_fail@plt+0x32c8>
   14cf0:	mov	r4, #1
   14cf4:	str	r4, [sp, #40]	; 0x28
   14cf8:	str	r4, [sp, #28]
   14cfc:	str	r4, [sp, #52]	; 0x34
   14d00:	str	sl, [sp, #72]	; 0x48
   14d04:	str	sl, [sp, #68]	; 0x44
   14d08:	str	sl, [sp, #44]	; 0x2c
   14d0c:	str	sl, [sp, #32]
   14d10:	str	r3, [sp, #60]	; 0x3c
   14d14:	b	13984 <__assert_fail@plt+0x25b0>
   14d18:	mov	r3, r6
   14d1c:	mov	r5, #48	; 0x30
   14d20:	mov	r6, #0
   14d24:	b	13e64 <__assert_fail@plt+0x2a90>
   14d28:	cmp	sl, r4
   14d2c:	movhi	r3, #48	; 0x30
   14d30:	strbhi	r3, [r8, r4]
   14d34:	add	r3, r1, #2
   14d38:	cmp	sl, r3
   14d3c:	movhi	r0, #48	; 0x30
   14d40:	strbhi	r0, [r8, r3]
   14d44:	add	r4, r1, #3
   14d48:	mov	r5, #48	; 0x30
   14d4c:	b	142ac <__assert_fail@plt+0x2ed8>
   14d50:	str	fp, [sp, #160]	; 0xa0
   14d54:	mov	fp, r8
   14d58:	ldr	r8, [sp, #160]	; 0xa0
   14d5c:	b	14128 <__assert_fail@plt+0x2d54>
   14d60:	ldr	r2, [sp, #80]	; 0x50
   14d64:	ldrb	r3, [r2]
   14d68:	cmp	r3, #0
   14d6c:	beq	13954 <__assert_fail@plt+0x2580>
   14d70:	cmp	sl, r4
   14d74:	strbhi	r3, [fp, r4]
   14d78:	ldrb	r3, [r2, #1]!
   14d7c:	add	r4, r4, #1
   14d80:	cmp	r3, #0
   14d84:	bne	14d70 <__assert_fail@plt+0x399c>
   14d88:	b	13954 <__assert_fail@plt+0x2580>
   14d8c:	str	fp, [sp, #160]	; 0xa0
   14d90:	mov	r3, #0
   14d94:	mov	fp, r8
   14d98:	ldr	r8, [sp, #160]	; 0xa0
   14d9c:	b	141bc <__assert_fail@plt+0x2de8>
   14da0:	mov	ip, r5
   14da4:	ldr	r7, [sp, #96]	; 0x60
   14da8:	ldr	r5, [sp, #92]	; 0x5c
   14dac:	ldr	r4, [sp, #100]	; 0x64
   14db0:	ldr	r8, [sp, #84]	; 0x54
   14db4:	ldr	sl, [sp, #88]	; 0x58
   14db8:	ldr	r2, [sp, #28]
   14dbc:	mov	r6, #0
   14dc0:	b	14a64 <__assert_fail@plt+0x3690>
   14dc4:	ldr	r2, [sp, #36]	; 0x24
   14dc8:	ldrb	r1, [r2, r3]
   14dcc:	sub	r2, r1, #33	; 0x21
   14dd0:	cmp	r2, #29
   14dd4:	ldrls	pc, [pc, r2, lsl #2]
   14dd8:	b	14eb4 <__assert_fail@plt+0x3ae0>
   14ddc:	andeq	r4, r1, r4, asr lr
   14de0:			; <UNDEFINED> instruction: 0x00014eb4
   14de4:			; <UNDEFINED> instruction: 0x00014eb4
   14de8:			; <UNDEFINED> instruction: 0x00014eb4
   14dec:			; <UNDEFINED> instruction: 0x00014eb4
   14df0:			; <UNDEFINED> instruction: 0x00014eb4
   14df4:	andeq	r4, r1, r4, asr lr
   14df8:	andeq	r4, r1, r4, asr lr
   14dfc:	andeq	r4, r1, r4, asr lr
   14e00:			; <UNDEFINED> instruction: 0x00014eb4
   14e04:			; <UNDEFINED> instruction: 0x00014eb4
   14e08:			; <UNDEFINED> instruction: 0x00014eb4
   14e0c:	andeq	r4, r1, r4, asr lr
   14e10:			; <UNDEFINED> instruction: 0x00014eb4
   14e14:	andeq	r4, r1, r4, asr lr
   14e18:			; <UNDEFINED> instruction: 0x00014eb4
   14e1c:			; <UNDEFINED> instruction: 0x00014eb4
   14e20:			; <UNDEFINED> instruction: 0x00014eb4
   14e24:			; <UNDEFINED> instruction: 0x00014eb4
   14e28:			; <UNDEFINED> instruction: 0x00014eb4
   14e2c:			; <UNDEFINED> instruction: 0x00014eb4
   14e30:			; <UNDEFINED> instruction: 0x00014eb4
   14e34:			; <UNDEFINED> instruction: 0x00014eb4
   14e38:			; <UNDEFINED> instruction: 0x00014eb4
   14e3c:			; <UNDEFINED> instruction: 0x00014eb4
   14e40:			; <UNDEFINED> instruction: 0x00014eb4
   14e44:			; <UNDEFINED> instruction: 0x00014eb4
   14e48:	andeq	r4, r1, r4, asr lr
   14e4c:	andeq	r4, r1, r4, asr lr
   14e50:	andeq	r4, r1, r4, asr lr
   14e54:	ldr	r2, [sp, #32]
   14e58:	cmp	r2, #0
   14e5c:	bne	14f60 <__assert_fail@plt+0x3b8c>
   14e60:	cmp	sl, r4
   14e64:	movhi	r2, #63	; 0x3f
   14e68:	strbhi	r2, [r8, r4]
   14e6c:	add	r2, r4, #1
   14e70:	cmp	sl, r2
   14e74:	movhi	r0, #34	; 0x22
   14e78:	strbhi	r0, [r8, r2]
   14e7c:	add	r2, r4, #2
   14e80:	cmp	sl, r2
   14e84:	movhi	r0, #34	; 0x22
   14e88:	strbhi	r0, [r8, r2]
   14e8c:	add	r2, r4, #3
   14e90:	cmp	sl, r2
   14e94:	movhi	r0, #63	; 0x3f
   14e98:	strbhi	r0, [r8, r2]
   14e9c:	mov	r2, #0
   14ea0:	add	r4, r4, #4
   14ea4:	mov	r5, r1
   14ea8:	mov	r9, r3
   14eac:	mov	r6, r2
   14eb0:	b	142ac <__assert_fail@plt+0x2ed8>
   14eb4:	mov	r2, #0
   14eb8:	mov	r6, r2
   14ebc:	b	13e1c <__assert_fail@plt+0x2a48>
   14ec0:	ldr	r0, [sp, #24]
   14ec4:	mov	r1, r4
   14ec8:	cmp	r1, r0
   14ecc:	mov	r2, r7
   14ed0:	mov	r3, r5
   14ed4:	mov	ip, r5
   14ed8:	ldr	r7, [sp, #96]	; 0x60
   14edc:	ldr	r5, [sp, #92]	; 0x5c
   14ee0:	ldr	r4, [sp, #100]	; 0x64
   14ee4:	ldr	r8, [sp, #84]	; 0x54
   14ee8:	ldr	sl, [sp, #88]	; 0x58
   14eec:	bcs	14f20 <__assert_fail@plt+0x3b4c>
   14ef0:	ldrb	r6, [r2]
   14ef4:	cmp	r6, #0
   14ef8:	bne	14f0c <__assert_fail@plt+0x3b38>
   14efc:	b	1503c <__assert_fail@plt+0x3c68>
   14f00:	ldrb	r6, [r2, #1]!
   14f04:	cmp	r6, #0
   14f08:	beq	14fc4 <__assert_fail@plt+0x3bf0>
   14f0c:	add	r3, r3, #1
   14f10:	add	r1, r9, r3
   14f14:	cmp	r1, r0
   14f18:	bcc	14f00 <__assert_fail@plt+0x3b2c>
   14f1c:	mov	ip, r3
   14f20:	ldr	r2, [sp, #28]
   14f24:	mov	r6, #0
   14f28:	b	14a64 <__assert_fail@plt+0x3690>
   14f2c:	mov	r3, #1
   14f30:	str	r3, [sp, #40]	; 0x28
   14f34:	str	r3, [sp, #32]
   14f38:	str	r3, [sp, #28]
   14f3c:	str	r3, [sp, #52]	; 0x34
   14f40:	ldr	r3, [pc, #-2220]	; 1469c <__assert_fail@plt+0x32c8>
   14f44:	mov	r2, #0
   14f48:	str	r2, [sp, #68]	; 0x44
   14f4c:	str	r2, [sp, #44]	; 0x2c
   14f50:	str	r2, [sp, #72]	; 0x48
   14f54:	mov	r4, r2
   14f58:	str	r3, [sp, #60]	; 0x3c
   14f5c:	b	13984 <__assert_fail@plt+0x25b0>
   14f60:	str	fp, [sp, #160]	; 0xa0
   14f64:	mov	fp, r8
   14f68:	ldr	r8, [sp, #160]	; 0xa0
   14f6c:	b	14134 <__assert_fail@plt+0x2d60>
   14f70:	mov	r2, r3
   14f74:	ldr	r3, [sp, #60]	; 0x3c
   14f78:	cmp	r3, #0
   14f7c:	moveq	r2, #0
   14f80:	andne	r2, r2, #1
   14f84:	cmp	r2, #0
   14f88:	beq	14fb4 <__assert_fail@plt+0x3be0>
   14f8c:	mov	r2, r3
   14f90:	ldrb	r3, [r3]
   14f94:	cmp	r3, #0
   14f98:	beq	14fb4 <__assert_fail@plt+0x3be0>
   14f9c:	cmp	sl, r4
   14fa0:	strbhi	r3, [fp, r4]
   14fa4:	ldrb	r3, [r2, #1]!
   14fa8:	add	r4, r4, #1
   14fac:	cmp	r3, #0
   14fb0:	bne	14f9c <__assert_fail@plt+0x3bc8>
   14fb4:	cmp	sl, r4
   14fb8:	movhi	r3, #0
   14fbc:	strbhi	r3, [fp, r4]
   14fc0:	b	14174 <__assert_fail@plt+0x2da0>
   14fc4:	mov	ip, r3
   14fc8:	ldr	r2, [sp, #28]
   14fcc:	b	14a64 <__assert_fail@plt+0x3690>
   14fd0:	str	fp, [sp, #160]	; 0xa0
   14fd4:	mov	fp, r8
   14fd8:	ldr	r8, [sp, #160]	; 0xa0
   14fdc:	sub	r3, r8, #2
   14fe0:	clz	r3, r3
   14fe4:	lsr	r3, r3, #5
   14fe8:	str	r3, [sp, #28]
   14fec:	b	14128 <__assert_fail@plt+0x2d54>
   14ff0:	ldr	r3, [sp, #76]	; 0x4c
   14ff4:	mov	ip, #5
   14ff8:	str	r3, [sp, #16]
   14ffc:	ldr	r3, [sp, #80]	; 0x50
   15000:	ldr	r2, [sp, #36]	; 0x24
   15004:	str	r3, [sp, #12]
   15008:	ldr	r3, [sp, #56]	; 0x38
   1500c:	ldr	r1, [sp, #72]	; 0x48
   15010:	str	r3, [sp, #8]
   15014:	ldr	r3, [sp, #164]	; 0xa4
   15018:	mov	r0, fp
   1501c:	str	r3, [sp, #4]
   15020:	str	ip, [sp]
   15024:	ldr	r3, [sp, #24]
   15028:	bl	1388c <__assert_fail@plt+0x24b8>
   1502c:	mov	r4, r0
   15030:	b	14174 <__assert_fail@plt+0x2da0>
   15034:	mov	r8, #2
   15038:	b	14128 <__assert_fail@plt+0x2d54>
   1503c:	ldr	r2, [sp, #28]
   15040:	b	14a64 <__assert_fail@plt+0x3690>
   15044:	mov	r3, #0
   15048:	str	r3, [sp, #68]	; 0x44
   1504c:	str	r3, [sp, #44]	; 0x2c
   15050:	str	r3, [sp, #72]	; 0x48
   15054:	str	r3, [sp, #28]
   15058:	mov	r4, r3
   1505c:	ldr	r3, [pc, #-2500]	; 146a0 <__assert_fail@plt+0x32cc>
   15060:	mov	r2, #1
   15064:	str	r2, [sp, #40]	; 0x28
   15068:	str	r2, [sp, #32]
   1506c:	str	r2, [sp, #52]	; 0x34
   15070:	str	r3, [sp, #60]	; 0x3c
   15074:	b	13984 <__assert_fail@plt+0x25b0>
   15078:	bl	11164 <__stack_chk_fail@plt>
   1507c:	mov	r5, r3
   15080:	mov	r6, #0
   15084:	b	13e78 <__assert_fail@plt+0x2aa4>
   15088:	mov	r3, #0
   1508c:	mov	r2, #1
   15090:	str	r3, [sp, #44]	; 0x2c
   15094:	str	r3, [sp, #72]	; 0x48
   15098:	str	r2, [sp, #40]	; 0x28
   1509c:	b	13f94 <__assert_fail@plt+0x2bc0>
   150a0:	bl	11398 <abort@plt>
   150a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150a8:	sub	sp, sp, #44	; 0x2c
   150ac:	mov	r6, r0
   150b0:	mov	r4, r3
   150b4:	mov	sl, r1
   150b8:	mov	fp, r2
   150bc:	bl	11284 <__errno_location@plt>
   150c0:	ldr	r7, [pc, #364]	; 15234 <__assert_fail@plt+0x3e60>
   150c4:	cmp	r6, #0
   150c8:	ldr	r5, [r7]
   150cc:	ldr	r3, [r0]
   150d0:	str	r3, [sp, #24]
   150d4:	blt	15230 <__assert_fail@plt+0x3e5c>
   150d8:	ldr	r3, [r7, #4]
   150dc:	mov	r8, r0
   150e0:	cmp	r3, r6
   150e4:	bgt	15130 <__assert_fail@plt+0x3d5c>
   150e8:	cmn	r6, #-268435454	; 0xf0000002
   150ec:	bgt	1522c <__assert_fail@plt+0x3e58>
   150f0:	add	r9, r6, #1
   150f4:	add	r3, r7, #8
   150f8:	cmp	r5, r3
   150fc:	lsl	r1, r9, #3
   15100:	beq	1520c <__assert_fail@plt+0x3e38>
   15104:	mov	r0, r5
   15108:	bl	15f3c <__assert_fail@plt+0x4b68>
   1510c:	mov	r5, r0
   15110:	str	r0, [r7]
   15114:	ldr	r0, [r7, #4]
   15118:	mov	r1, #0
   1511c:	sub	r2, r9, r0
   15120:	add	r0, r5, r0, lsl #3
   15124:	lsl	r2, r2, #3
   15128:	bl	1129c <memset@plt>
   1512c:	str	r9, [r7, #4]
   15130:	add	r3, r5, r6, lsl #3
   15134:	ldr	r1, [r4, #4]
   15138:	ldr	r7, [r3, #4]
   1513c:	ldr	r9, [r5, r6, lsl #3]
   15140:	ldr	r2, [r4, #40]	; 0x28
   15144:	ldr	ip, [r4, #44]	; 0x2c
   15148:	str	r3, [sp, #28]
   1514c:	ldr	r3, [r4]
   15150:	orr	r1, r1, #1
   15154:	add	lr, r4, #8
   15158:	str	r1, [sp, #36]	; 0x24
   1515c:	str	r1, [sp, #4]
   15160:	str	r2, [sp, #12]
   15164:	str	r3, [sp]
   15168:	mov	r0, r7
   1516c:	mov	r1, r9
   15170:	str	ip, [sp, #16]
   15174:	str	lr, [sp, #8]
   15178:	mov	r3, fp
   1517c:	mov	r2, sl
   15180:	str	lr, [sp, #32]
   15184:	bl	1388c <__assert_fail@plt+0x24b8>
   15188:	cmp	r9, r0
   1518c:	bhi	151f8 <__assert_fail@plt+0x3e24>
   15190:	ldr	r3, [pc, #160]	; 15238 <__assert_fail@plt+0x3e64>
   15194:	add	r9, r0, #1
   15198:	cmp	r7, r3
   1519c:	str	r9, [r5, r6, lsl #3]
   151a0:	beq	151ac <__assert_fail@plt+0x3dd8>
   151a4:	mov	r0, r7
   151a8:	bl	11110 <free@plt>
   151ac:	mov	r0, r9
   151b0:	bl	15ee0 <__assert_fail@plt+0x4b0c>
   151b4:	ldr	lr, [sp, #28]
   151b8:	ldr	ip, [r4, #44]	; 0x2c
   151bc:	ldr	r5, [r4, #40]	; 0x28
   151c0:	mov	r3, fp
   151c4:	mov	r2, sl
   151c8:	mov	r1, r9
   151cc:	str	r0, [lr, #4]
   151d0:	ldr	lr, [r4]
   151d4:	ldr	r4, [sp, #32]
   151d8:	str	ip, [sp, #16]
   151dc:	str	r4, [sp, #8]
   151e0:	ldr	r4, [sp, #36]	; 0x24
   151e4:	str	r5, [sp, #12]
   151e8:	str	r4, [sp, #4]
   151ec:	str	lr, [sp]
   151f0:	mov	r7, r0
   151f4:	bl	1388c <__assert_fail@plt+0x24b8>
   151f8:	ldr	r3, [sp, #24]
   151fc:	mov	r0, r7
   15200:	str	r3, [r8]
   15204:	add	sp, sp, #44	; 0x2c
   15208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1520c:	mov	r0, #0
   15210:	bl	15f3c <__assert_fail@plt+0x4b68>
   15214:	ldr	r3, [pc, #32]	; 1523c <__assert_fail@plt+0x3e68>
   15218:	mov	r5, r0
   1521c:	ldm	r3, {r0, r1}
   15220:	str	r5, [r7]
   15224:	stm	r5, {r0, r1}
   15228:	b	15114 <__assert_fail@plt+0x3d40>
   1522c:	bl	16128 <__assert_fail@plt+0x4d54>
   15230:	bl	11398 <abort@plt>
   15234:	andeq	ip, r2, r8, lsr r1
   15238:	andeq	ip, r2, r0, asr #3
   1523c:	andeq	ip, r2, r0, asr #2
   15240:	push	{r4, r5, r6, lr}
   15244:	mov	r5, r0
   15248:	bl	11284 <__errno_location@plt>
   1524c:	cmp	r5, #0
   15250:	mov	r1, #48	; 0x30
   15254:	mov	r4, r0
   15258:	ldr	r0, [pc, #16]	; 15270 <__assert_fail@plt+0x3e9c>
   1525c:	ldr	r6, [r4]
   15260:	movne	r0, r5
   15264:	bl	160e8 <__assert_fail@plt+0x4d14>
   15268:	str	r6, [r4]
   1526c:	pop	{r4, r5, r6, pc}
   15270:	andeq	ip, r2, r0, asr #5
   15274:	ldr	r3, [pc, #12]	; 15288 <__assert_fail@plt+0x3eb4>
   15278:	cmp	r0, #0
   1527c:	moveq	r0, r3
   15280:	ldr	r0, [r0]
   15284:	bx	lr
   15288:	andeq	ip, r2, r0, asr #5
   1528c:	ldr	r3, [pc, #12]	; 152a0 <__assert_fail@plt+0x3ecc>
   15290:	cmp	r0, #0
   15294:	moveq	r0, r3
   15298:	str	r1, [r0]
   1529c:	bx	lr
   152a0:	andeq	ip, r2, r0, asr #5
   152a4:	ldr	r3, [pc, #52]	; 152e0 <__assert_fail@plt+0x3f0c>
   152a8:	cmp	r0, #0
   152ac:	moveq	r0, r3
   152b0:	add	r3, r0, #8
   152b4:	push	{lr}		; (str lr, [sp, #-4]!)
   152b8:	lsr	lr, r1, #5
   152bc:	and	r1, r1, #31
   152c0:	ldr	ip, [r3, lr, lsl #2]
   152c4:	lsr	r0, ip, r1
   152c8:	eor	r2, r2, r0
   152cc:	and	r2, r2, #1
   152d0:	and	r0, r0, #1
   152d4:	eor	r1, ip, r2, lsl r1
   152d8:	str	r1, [r3, lr, lsl #2]
   152dc:	pop	{pc}		; (ldr pc, [sp], #4)
   152e0:	andeq	ip, r2, r0, asr #5
   152e4:	ldr	r3, [pc, #16]	; 152fc <__assert_fail@plt+0x3f28>
   152e8:	cmp	r0, #0
   152ec:	movne	r3, r0
   152f0:	ldr	r0, [r3, #4]
   152f4:	str	r1, [r3, #4]
   152f8:	bx	lr
   152fc:	andeq	ip, r2, r0, asr #5
   15300:	ldr	r3, [pc, #44]	; 15334 <__assert_fail@plt+0x3f60>
   15304:	cmp	r0, #0
   15308:	moveq	r0, r3
   1530c:	mov	ip, #10
   15310:	cmp	r2, #0
   15314:	cmpne	r1, #0
   15318:	str	ip, [r0]
   1531c:	beq	1532c <__assert_fail@plt+0x3f58>
   15320:	str	r1, [r0, #40]	; 0x28
   15324:	str	r2, [r0, #44]	; 0x2c
   15328:	bx	lr
   1532c:	push	{r4, lr}
   15330:	bl	11398 <abort@plt>
   15334:	andeq	ip, r2, r0, asr #5
   15338:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1533c:	sub	sp, sp, #24
   15340:	ldr	ip, [pc, #108]	; 153b4 <__assert_fail@plt+0x3fe0>
   15344:	ldr	r4, [sp, #56]	; 0x38
   15348:	mov	r9, r2
   1534c:	cmp	r4, #0
   15350:	moveq	r4, ip
   15354:	mov	sl, r3
   15358:	mov	r7, r0
   1535c:	mov	r8, r1
   15360:	bl	11284 <__errno_location@plt>
   15364:	ldr	r3, [r4, #44]	; 0x2c
   15368:	mov	r1, r8
   1536c:	ldr	r6, [r0]
   15370:	str	r3, [sp, #16]
   15374:	ldr	r2, [r4, #40]	; 0x28
   15378:	add	r3, r4, #8
   1537c:	str	r3, [sp, #8]
   15380:	str	r2, [sp, #12]
   15384:	ldr	r2, [r4, #4]
   15388:	mov	r5, r0
   1538c:	str	r2, [sp, #4]
   15390:	ldr	ip, [r4]
   15394:	mov	r3, sl
   15398:	mov	r2, r9
   1539c:	mov	r0, r7
   153a0:	str	ip, [sp]
   153a4:	bl	1388c <__assert_fail@plt+0x24b8>
   153a8:	str	r6, [r5]
   153ac:	add	sp, sp, #24
   153b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153b4:	andeq	ip, r2, r0, asr #5
   153b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153bc:	cmp	r3, #0
   153c0:	sub	sp, sp, #44	; 0x2c
   153c4:	ldr	r4, [pc, #192]	; 1548c <__assert_fail@plt+0x40b8>
   153c8:	mov	r6, r2
   153cc:	movne	r4, r3
   153d0:	mov	r9, r1
   153d4:	mov	r8, r0
   153d8:	bl	11284 <__errno_location@plt>
   153dc:	ldr	r3, [r4, #44]	; 0x2c
   153e0:	ldr	r5, [r4, #4]
   153e4:	add	sl, r4, #8
   153e8:	cmp	r6, #0
   153ec:	orreq	r5, r5, #1
   153f0:	mov	r1, #0
   153f4:	ldr	r2, [r0]
   153f8:	str	r3, [sp, #16]
   153fc:	ldr	r3, [r4, #40]	; 0x28
   15400:	stmib	sp, {r5, sl}
   15404:	str	r3, [sp, #12]
   15408:	ldr	r3, [r4]
   1540c:	mov	r7, r0
   15410:	str	r2, [sp, #28]
   15414:	str	r3, [sp]
   15418:	mov	r2, r8
   1541c:	mov	r3, r9
   15420:	mov	r0, r1
   15424:	bl	1388c <__assert_fail@plt+0x24b8>
   15428:	add	r1, r0, #1
   1542c:	mov	fp, r0
   15430:	mov	r0, r1
   15434:	str	r1, [sp, #36]	; 0x24
   15438:	bl	15ee0 <__assert_fail@plt+0x4b0c>
   1543c:	ldr	r3, [r4, #44]	; 0x2c
   15440:	mov	r2, r8
   15444:	str	r3, [sp, #16]
   15448:	ldr	r3, [r4, #40]	; 0x28
   1544c:	str	r5, [sp, #4]
   15450:	str	r3, [sp, #12]
   15454:	str	sl, [sp, #8]
   15458:	ldr	ip, [r4]
   1545c:	ldr	r1, [sp, #36]	; 0x24
   15460:	mov	r3, r9
   15464:	str	ip, [sp]
   15468:	str	r0, [sp, #32]
   1546c:	bl	1388c <__assert_fail@plt+0x24b8>
   15470:	ldr	r2, [sp, #28]
   15474:	cmp	r6, #0
   15478:	str	r2, [r7]
   1547c:	ldr	r0, [sp, #32]
   15480:	strne	fp, [r6]
   15484:	add	sp, sp, #44	; 0x2c
   15488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1548c:	andeq	ip, r2, r0, asr #5
   15490:	mov	r3, r2
   15494:	mov	r2, #0
   15498:	b	153b8 <__assert_fail@plt+0x3fe4>
   1549c:	push	{r4, r5, r6, r7, r8, lr}
   154a0:	ldr	r6, [pc, #112]	; 15518 <__assert_fail@plt+0x4144>
   154a4:	ldr	r3, [r6, #4]
   154a8:	ldr	r7, [r6]
   154ac:	cmp	r3, #1
   154b0:	ble	154d4 <__assert_fail@plt+0x4100>
   154b4:	sub	r5, r7, #8
   154b8:	add	r5, r5, r3, lsl #3
   154bc:	mov	r4, r7
   154c0:	ldr	r0, [r4, #12]
   154c4:	add	r4, r4, #8
   154c8:	bl	11110 <free@plt>
   154cc:	cmp	r4, r5
   154d0:	bne	154c0 <__assert_fail@plt+0x40ec>
   154d4:	ldr	r0, [r7, #4]
   154d8:	ldr	r4, [pc, #60]	; 1551c <__assert_fail@plt+0x4148>
   154dc:	cmp	r0, r4
   154e0:	beq	154f4 <__assert_fail@plt+0x4120>
   154e4:	bl	11110 <free@plt>
   154e8:	mov	r3, #256	; 0x100
   154ec:	str	r4, [r6, #12]
   154f0:	str	r3, [r6, #8]
   154f4:	ldr	r4, [pc, #36]	; 15520 <__assert_fail@plt+0x414c>
   154f8:	cmp	r7, r4
   154fc:	beq	1550c <__assert_fail@plt+0x4138>
   15500:	mov	r0, r7
   15504:	bl	11110 <free@plt>
   15508:	str	r4, [r6]
   1550c:	mov	r3, #1
   15510:	str	r3, [r6, #4]
   15514:	pop	{r4, r5, r6, r7, r8, pc}
   15518:	andeq	ip, r2, r8, lsr r1
   1551c:	andeq	ip, r2, r0, asr #3
   15520:	andeq	ip, r2, r0, asr #2
   15524:	ldr	r3, [pc, #4]	; 15530 <__assert_fail@plt+0x415c>
   15528:	mvn	r2, #0
   1552c:	b	150a4 <__assert_fail@plt+0x3cd0>
   15530:	andeq	ip, r2, r0, asr #5
   15534:	ldr	r3, [pc]	; 1553c <__assert_fail@plt+0x4168>
   15538:	b	150a4 <__assert_fail@plt+0x3cd0>
   1553c:	andeq	ip, r2, r0, asr #5
   15540:	mov	r1, r0
   15544:	ldr	r3, [pc, #8]	; 15554 <__assert_fail@plt+0x4180>
   15548:	mvn	r2, #0
   1554c:	mov	r0, #0
   15550:	b	150a4 <__assert_fail@plt+0x3cd0>
   15554:	andeq	ip, r2, r0, asr #5
   15558:	mov	r2, r1
   1555c:	ldr	r3, [pc, #8]	; 1556c <__assert_fail@plt+0x4198>
   15560:	mov	r1, r0
   15564:	mov	r0, #0
   15568:	b	150a4 <__assert_fail@plt+0x3cd0>
   1556c:	andeq	ip, r2, r0, asr #5
   15570:	push	{r4, r5, r6, lr}
   15574:	sub	sp, sp, #56	; 0x38
   15578:	ldr	r4, [pc, #68]	; 155c4 <__assert_fail@plt+0x41f0>
   1557c:	mov	r6, r2
   15580:	mov	r5, r0
   15584:	ldr	r3, [r4]
   15588:	add	r0, sp, #4
   1558c:	str	r3, [sp, #52]	; 0x34
   15590:	bl	1371c <__assert_fail@plt+0x2348>
   15594:	add	r3, sp, #4
   15598:	mvn	r2, #0
   1559c:	mov	r1, r6
   155a0:	mov	r0, r5
   155a4:	bl	150a4 <__assert_fail@plt+0x3cd0>
   155a8:	ldr	r2, [sp, #52]	; 0x34
   155ac:	ldr	r3, [r4]
   155b0:	cmp	r2, r3
   155b4:	bne	155c0 <__assert_fail@plt+0x41ec>
   155b8:	add	sp, sp, #56	; 0x38
   155bc:	pop	{r4, r5, r6, pc}
   155c0:	bl	11164 <__stack_chk_fail@plt>
   155c4:	andeq	fp, r2, r8, lsl #30
   155c8:	push	{r4, r5, r6, r7, lr}
   155cc:	sub	sp, sp, #60	; 0x3c
   155d0:	ldr	r4, [pc, #72]	; 15620 <__assert_fail@plt+0x424c>
   155d4:	mov	r6, r2
   155d8:	mov	r7, r3
   155dc:	ldr	ip, [r4]
   155e0:	mov	r5, r0
   155e4:	add	r0, sp, #4
   155e8:	str	ip, [sp, #52]	; 0x34
   155ec:	bl	1371c <__assert_fail@plt+0x2348>
   155f0:	add	r3, sp, #4
   155f4:	mov	r2, r7
   155f8:	mov	r1, r6
   155fc:	mov	r0, r5
   15600:	bl	150a4 <__assert_fail@plt+0x3cd0>
   15604:	ldr	r2, [sp, #52]	; 0x34
   15608:	ldr	r3, [r4]
   1560c:	cmp	r2, r3
   15610:	bne	1561c <__assert_fail@plt+0x4248>
   15614:	add	sp, sp, #60	; 0x3c
   15618:	pop	{r4, r5, r6, r7, pc}
   1561c:	bl	11164 <__stack_chk_fail@plt>
   15620:	andeq	fp, r2, r8, lsl #30
   15624:	mov	r2, r1
   15628:	mov	r1, r0
   1562c:	mov	r0, #0
   15630:	b	15570 <__assert_fail@plt+0x419c>
   15634:	mov	r3, r2
   15638:	mov	r2, r1
   1563c:	mov	r1, r0
   15640:	mov	r0, #0
   15644:	b	155c8 <__assert_fail@plt+0x41f4>
   15648:	push	{r4, r5, r6, r7, r8, r9, lr}
   1564c:	mov	r4, r2
   15650:	ldr	lr, [pc, #128]	; 156d8 <__assert_fail@plt+0x4304>
   15654:	mov	r8, r0
   15658:	mov	r9, r1
   1565c:	ldm	lr!, {r0, r1, r2, r3}
   15660:	sub	sp, sp, #60	; 0x3c
   15664:	add	ip, sp, #4
   15668:	lsr	r6, r4, #5
   1566c:	stmia	ip!, {r0, r1, r2, r3}
   15670:	add	r7, sp, #12
   15674:	ldm	lr!, {r0, r1, r2, r3}
   15678:	and	r4, r4, #31
   1567c:	ldr	r5, [pc, #88]	; 156dc <__assert_fail@plt+0x4308>
   15680:	stmia	ip!, {r0, r1, r2, r3}
   15684:	ldm	lr, {r0, r1, r2, r3}
   15688:	stm	ip, {r0, r1, r2, r3}
   1568c:	mov	r2, r9
   15690:	ldr	r3, [r7, r6, lsl #2]
   15694:	ldr	ip, [r5]
   15698:	mov	r1, r8
   1569c:	mvn	r0, r3, lsr r4
   156a0:	and	r0, r0, #1
   156a4:	str	ip, [sp, #52]	; 0x34
   156a8:	eor	r4, r3, r0, lsl r4
   156ac:	add	r3, sp, #4
   156b0:	mov	r0, #0
   156b4:	str	r4, [r7, r6, lsl #2]
   156b8:	bl	150a4 <__assert_fail@plt+0x3cd0>
   156bc:	ldr	r2, [sp, #52]	; 0x34
   156c0:	ldr	r3, [r5]
   156c4:	cmp	r2, r3
   156c8:	bne	156d4 <__assert_fail@plt+0x4300>
   156cc:	add	sp, sp, #60	; 0x3c
   156d0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   156d4:	bl	11164 <__stack_chk_fail@plt>
   156d8:	andeq	ip, r2, r0, asr #5
   156dc:	andeq	fp, r2, r8, lsl #30
   156e0:	mov	r2, r1
   156e4:	mvn	r1, #0
   156e8:	b	15648 <__assert_fail@plt+0x4274>
   156ec:	mov	r2, #58	; 0x3a
   156f0:	mvn	r1, #0
   156f4:	b	15648 <__assert_fail@plt+0x4274>
   156f8:	mov	r2, #58	; 0x3a
   156fc:	b	15648 <__assert_fail@plt+0x4274>
   15700:	push	{r4, r5, r6, r7, r8, lr}
   15704:	sub	sp, sp, #104	; 0x68
   15708:	ldr	r5, [pc, #120]	; 15788 <__assert_fail@plt+0x43b4>
   1570c:	mov	r6, r0
   15710:	mov	r0, sp
   15714:	ldr	r3, [r5]
   15718:	mov	r7, r2
   1571c:	str	r3, [sp, #100]	; 0x64
   15720:	bl	1371c <__assert_fail@plt+0x2348>
   15724:	mov	ip, sp
   15728:	add	lr, sp, #52	; 0x34
   1572c:	ldm	ip!, {r0, r1, r2, r3}
   15730:	stmia	lr!, {r0, r1, r2, r3}
   15734:	ldm	ip!, {r0, r1, r2, r3}
   15738:	ldr	r8, [sp, #64]	; 0x40
   1573c:	stmia	lr!, {r0, r1, r2, r3}
   15740:	mvn	r4, r8
   15744:	ldm	ip, {r0, r1, r2, r3}
   15748:	and	ip, r4, #67108864	; 0x4000000
   1574c:	eor	ip, ip, r8
   15750:	str	ip, [sp, #64]	; 0x40
   15754:	stm	lr, {r0, r1, r2, r3}
   15758:	add	r3, sp, #52	; 0x34
   1575c:	mvn	r2, #0
   15760:	mov	r1, r7
   15764:	mov	r0, r6
   15768:	bl	150a4 <__assert_fail@plt+0x3cd0>
   1576c:	ldr	r2, [sp, #100]	; 0x64
   15770:	ldr	r3, [r5]
   15774:	cmp	r2, r3
   15778:	bne	15784 <__assert_fail@plt+0x43b0>
   1577c:	add	sp, sp, #104	; 0x68
   15780:	pop	{r4, r5, r6, r7, r8, pc}
   15784:	bl	11164 <__stack_chk_fail@plt>
   15788:	andeq	fp, r2, r8, lsl #30
   1578c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15790:	mov	r6, r1
   15794:	ldr	lr, [pc, #132]	; 15820 <__assert_fail@plt+0x444c>
   15798:	mov	r5, r2
   1579c:	mov	r8, r0
   157a0:	mov	r9, r3
   157a4:	ldm	lr!, {r0, r1, r2, r3}
   157a8:	sub	sp, sp, #60	; 0x3c
   157ac:	add	ip, sp, #4
   157b0:	ldr	r4, [pc, #108]	; 15824 <__assert_fail@plt+0x4450>
   157b4:	stmia	ip!, {r0, r1, r2, r3}
   157b8:	mov	r7, #10
   157bc:	ldm	lr!, {r0, r1, r2, r3}
   157c0:	cmp	r5, #0
   157c4:	cmpne	r6, #0
   157c8:	str	r7, [sp, #4]
   157cc:	stmia	ip!, {r0, r1, r2, r3}
   157d0:	ldm	lr, {r0, r1, r2, r3}
   157d4:	ldr	lr, [r4]
   157d8:	stm	ip, {r0, r1, r2, r3}
   157dc:	str	lr, [sp, #52]	; 0x34
   157e0:	beq	1581c <__assert_fail@plt+0x4448>
   157e4:	add	r3, sp, #4
   157e8:	ldr	r2, [sp, #88]	; 0x58
   157ec:	mov	r1, r9
   157f0:	mov	r0, r8
   157f4:	str	r6, [sp, #44]	; 0x2c
   157f8:	str	r5, [sp, #48]	; 0x30
   157fc:	bl	150a4 <__assert_fail@plt+0x3cd0>
   15800:	ldr	r2, [sp, #52]	; 0x34
   15804:	ldr	r3, [r4]
   15808:	cmp	r2, r3
   1580c:	bne	15818 <__assert_fail@plt+0x4444>
   15810:	add	sp, sp, #60	; 0x3c
   15814:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15818:	bl	11164 <__stack_chk_fail@plt>
   1581c:	bl	11398 <abort@plt>
   15820:	andeq	ip, r2, r0, asr #5
   15824:	andeq	fp, r2, r8, lsl #30
   15828:	push	{lr}		; (str lr, [sp, #-4]!)
   1582c:	sub	sp, sp, #12
   15830:	mvn	ip, #0
   15834:	str	ip, [sp]
   15838:	bl	1578c <__assert_fail@plt+0x43b8>
   1583c:	add	sp, sp, #12
   15840:	pop	{pc}		; (ldr pc, [sp], #4)
   15844:	push	{lr}		; (str lr, [sp, #-4]!)
   15848:	sub	sp, sp, #12
   1584c:	mvn	ip, #0
   15850:	mov	r3, r2
   15854:	str	ip, [sp]
   15858:	mov	r2, r1
   1585c:	mov	r1, r0
   15860:	mov	r0, #0
   15864:	bl	1578c <__assert_fail@plt+0x43b8>
   15868:	add	sp, sp, #12
   1586c:	pop	{pc}		; (ldr pc, [sp], #4)
   15870:	push	{lr}		; (str lr, [sp, #-4]!)
   15874:	sub	sp, sp, #12
   15878:	str	r3, [sp]
   1587c:	mov	r3, r2
   15880:	mov	r2, r1
   15884:	mov	r1, r0
   15888:	mov	r0, #0
   1588c:	bl	1578c <__assert_fail@plt+0x43b8>
   15890:	add	sp, sp, #12
   15894:	pop	{pc}		; (ldr pc, [sp], #4)
   15898:	ldr	r3, [pc]	; 158a0 <__assert_fail@plt+0x44cc>
   1589c:	b	150a4 <__assert_fail@plt+0x3cd0>
   158a0:	andeq	ip, r2, r8, asr #2
   158a4:	mov	r2, r1
   158a8:	ldr	r3, [pc, #8]	; 158b8 <__assert_fail@plt+0x44e4>
   158ac:	mov	r1, r0
   158b0:	mov	r0, #0
   158b4:	b	150a4 <__assert_fail@plt+0x3cd0>
   158b8:	andeq	ip, r2, r8, asr #2
   158bc:	ldr	r3, [pc, #4]	; 158c8 <__assert_fail@plt+0x44f4>
   158c0:	mvn	r2, #0
   158c4:	b	150a4 <__assert_fail@plt+0x3cd0>
   158c8:	andeq	ip, r2, r8, asr #2
   158cc:	mov	r1, r0
   158d0:	ldr	r3, [pc, #8]	; 158e0 <__assert_fail@plt+0x450c>
   158d4:	mvn	r2, #0
   158d8:	mov	r0, #0
   158dc:	b	150a4 <__assert_fail@plt+0x3cd0>
   158e0:	andeq	ip, r2, r8, asr #2
   158e4:	push	{r4, r5, lr}
   158e8:	sub	sp, sp, #116	; 0x74
   158ec:	ldr	r5, [pc, #80]	; 15944 <__assert_fail@plt+0x4570>
   158f0:	mov	r4, r0
   158f4:	mov	r2, sp
   158f8:	ldr	r3, [r5]
   158fc:	ldr	r1, [pc, #68]	; 15948 <__assert_fail@plt+0x4574>
   15900:	mov	r0, #3
   15904:	str	r3, [sp, #108]	; 0x6c
   15908:	bl	113b0 <__lxstat64@plt>
   1590c:	cmp	r0, #0
   15910:	movne	r0, #0
   15914:	ldrdeq	r2, [sp]
   15918:	ldrdeq	r0, [sp, #96]	; 0x60
   1591c:	strdeq	r2, [r4, #8]
   15920:	ldr	r2, [sp, #108]	; 0x6c
   15924:	ldr	r3, [r5]
   15928:	strdeq	r0, [r4]
   1592c:	moveq	r0, r4
   15930:	cmp	r2, r3
   15934:	bne	15940 <__assert_fail@plt+0x456c>
   15938:	add	sp, sp, #116	; 0x74
   1593c:	pop	{r4, r5, pc}
   15940:	bl	11164 <__stack_chk_fail@plt>
   15944:	andeq	fp, r2, r8, lsl #30
   15948:	andeq	sl, r1, r0, ror #24
   1594c:	push	{r4, r5, r6, lr}
   15950:	sub	sp, sp, #32
   15954:	cmp	r1, #0
   15958:	mov	r5, r0
   1595c:	ldr	r4, [sp, #48]	; 0x30
   15960:	ldr	r6, [sp, #52]	; 0x34
   15964:	beq	159f4 <__assert_fail@plt+0x4620>
   15968:	strd	r2, [sp]
   1596c:	mov	r3, r1
   15970:	ldr	r2, [pc, #828]	; 15cb4 <__assert_fail@plt+0x48e0>
   15974:	mov	r1, #1
   15978:	bl	112c0 <__fprintf_chk@plt>
   1597c:	mov	r2, #5
   15980:	ldr	r1, [pc, #816]	; 15cb8 <__assert_fail@plt+0x48e4>
   15984:	mov	r0, #0
   15988:	bl	11158 <dcgettext@plt>
   1598c:	ldr	r3, [pc, #808]	; 15cbc <__assert_fail@plt+0x48e8>
   15990:	ldr	r2, [pc, #808]	; 15cc0 <__assert_fail@plt+0x48ec>
   15994:	str	r3, [sp]
   15998:	mov	r1, #1
   1599c:	mov	r3, r0
   159a0:	mov	r0, r5
   159a4:	bl	112c0 <__fprintf_chk@plt>
   159a8:	ldr	r1, [pc, #788]	; 15cc4 <__assert_fail@plt+0x48f0>
   159ac:	mov	r2, #5
   159b0:	mov	r0, #0
   159b4:	bl	11158 <dcgettext@plt>
   159b8:	mov	r1, r5
   159bc:	bl	110bc <fputs_unlocked@plt>
   159c0:	cmp	r6, #9
   159c4:	ldrls	pc, [pc, r6, lsl #2]
   159c8:	b	15ca4 <__assert_fail@plt+0x48d0>
   159cc:			; <UNDEFINED> instruction: 0x00015cb0
   159d0:	andeq	r5, r1, r8, ror sl
   159d4:	andeq	r5, r1, r4, lsr #21
   159d8:	ldrdeq	r5, [r1], -r8
   159dc:	andeq	r5, r1, r4, lsl fp
   159e0:	andeq	r5, r1, r4, asr fp
   159e4:	muleq	r1, ip, fp
   159e8:	andeq	r5, r1, ip, ror #23
   159ec:	andeq	r5, r1, r4, asr #24
   159f0:	andeq	r5, r1, ip, lsl #20
   159f4:	str	r3, [sp]
   159f8:	mov	r1, #1
   159fc:	mov	r3, r2
   15a00:	ldr	r2, [pc, #704]	; 15cc8 <__assert_fail@plt+0x48f4>
   15a04:	bl	112c0 <__fprintf_chk@plt>
   15a08:	b	1597c <__assert_fail@plt+0x45a8>
   15a0c:	ldr	r1, [pc, #696]	; 15ccc <__assert_fail@plt+0x48f8>
   15a10:	mov	r2, #5
   15a14:	mov	r0, #0
   15a18:	bl	11158 <dcgettext@plt>
   15a1c:	ldr	r2, [r4, #32]
   15a20:	ldr	r3, [r4, #28]
   15a24:	ldr	r1, [r4, #24]
   15a28:	str	r2, [sp, #28]
   15a2c:	ldr	r2, [r4, #20]
   15a30:	str	r3, [sp, #24]
   15a34:	ldr	r3, [r4, #16]
   15a38:	str	r1, [sp, #20]
   15a3c:	ldr	r1, [r4, #12]
   15a40:	str	r2, [sp, #16]
   15a44:	ldr	r2, [r4, #8]
   15a48:	str	r3, [sp, #12]
   15a4c:	ldr	r3, [r4, #4]
   15a50:	str	r1, [sp, #8]
   15a54:	str	r2, [sp, #4]
   15a58:	str	r3, [sp]
   15a5c:	mov	r1, #1
   15a60:	ldr	r3, [r4]
   15a64:	mov	r2, r0
   15a68:	mov	r0, r5
   15a6c:	bl	112c0 <__fprintf_chk@plt>
   15a70:	add	sp, sp, #32
   15a74:	pop	{r4, r5, r6, pc}
   15a78:	mov	r2, #5
   15a7c:	ldr	r1, [pc, #588]	; 15cd0 <__assert_fail@plt+0x48fc>
   15a80:	mov	r0, #0
   15a84:	bl	11158 <dcgettext@plt>
   15a88:	ldr	r3, [r4]
   15a8c:	mov	r1, #1
   15a90:	mov	r2, r0
   15a94:	mov	r0, r5
   15a98:	add	sp, sp, #32
   15a9c:	pop	{r4, r5, r6, lr}
   15aa0:	b	112c0 <__fprintf_chk@plt>
   15aa4:	mov	r2, #5
   15aa8:	ldr	r1, [pc, #548]	; 15cd4 <__assert_fail@plt+0x4900>
   15aac:	mov	r0, #0
   15ab0:	bl	11158 <dcgettext@plt>
   15ab4:	ldr	r2, [r4, #4]
   15ab8:	ldr	r3, [r4]
   15abc:	mov	r1, #1
   15ac0:	str	r2, [sp, #48]	; 0x30
   15ac4:	mov	r2, r0
   15ac8:	mov	r0, r5
   15acc:	add	sp, sp, #32
   15ad0:	pop	{r4, r5, r6, lr}
   15ad4:	b	112c0 <__fprintf_chk@plt>
   15ad8:	mov	r2, #5
   15adc:	ldr	r1, [pc, #500]	; 15cd8 <__assert_fail@plt+0x4904>
   15ae0:	mov	r0, #0
   15ae4:	bl	11158 <dcgettext@plt>
   15ae8:	ldr	r2, [r4, #8]
   15aec:	ldr	r3, [r4, #4]
   15af0:	mov	r1, #1
   15af4:	str	r2, [sp, #52]	; 0x34
   15af8:	str	r3, [sp, #48]	; 0x30
   15afc:	ldr	r3, [r4]
   15b00:	mov	r2, r0
   15b04:	mov	r0, r5
   15b08:	add	sp, sp, #32
   15b0c:	pop	{r4, r5, r6, lr}
   15b10:	b	112c0 <__fprintf_chk@plt>
   15b14:	mov	r2, #5
   15b18:	ldr	r1, [pc, #444]	; 15cdc <__assert_fail@plt+0x4908>
   15b1c:	mov	r0, #0
   15b20:	bl	11158 <dcgettext@plt>
   15b24:	ldr	r1, [r4, #12]
   15b28:	ldr	r2, [r4, #8]
   15b2c:	ldr	r3, [r4, #4]
   15b30:	str	r1, [sp, #8]
   15b34:	str	r2, [sp, #4]
   15b38:	str	r3, [sp]
   15b3c:	mov	r1, #1
   15b40:	ldr	r3, [r4]
   15b44:	mov	r2, r0
   15b48:	mov	r0, r5
   15b4c:	bl	112c0 <__fprintf_chk@plt>
   15b50:	b	15a70 <__assert_fail@plt+0x469c>
   15b54:	mov	r2, #5
   15b58:	ldr	r1, [pc, #384]	; 15ce0 <__assert_fail@plt+0x490c>
   15b5c:	mov	r0, #0
   15b60:	bl	11158 <dcgettext@plt>
   15b64:	ldr	r3, [r4, #16]
   15b68:	ldr	r1, [r4, #12]
   15b6c:	ldr	r2, [r4, #8]
   15b70:	str	r3, [sp, #12]
   15b74:	ldr	r3, [r4, #4]
   15b78:	str	r1, [sp, #8]
   15b7c:	str	r2, [sp, #4]
   15b80:	str	r3, [sp]
   15b84:	mov	r1, #1
   15b88:	ldr	r3, [r4]
   15b8c:	mov	r2, r0
   15b90:	mov	r0, r5
   15b94:	bl	112c0 <__fprintf_chk@plt>
   15b98:	b	15a70 <__assert_fail@plt+0x469c>
   15b9c:	mov	r2, #5
   15ba0:	ldr	r1, [pc, #316]	; 15ce4 <__assert_fail@plt+0x4910>
   15ba4:	mov	r0, #0
   15ba8:	bl	11158 <dcgettext@plt>
   15bac:	ldr	r2, [r4, #20]
   15bb0:	ldr	r3, [r4, #16]
   15bb4:	ldr	r1, [r4, #12]
   15bb8:	str	r2, [sp, #16]
   15bbc:	ldr	r2, [r4, #8]
   15bc0:	str	r3, [sp, #12]
   15bc4:	ldr	r3, [r4, #4]
   15bc8:	str	r1, [sp, #8]
   15bcc:	str	r2, [sp, #4]
   15bd0:	str	r3, [sp]
   15bd4:	mov	r1, #1
   15bd8:	ldr	r3, [r4]
   15bdc:	mov	r2, r0
   15be0:	mov	r0, r5
   15be4:	bl	112c0 <__fprintf_chk@plt>
   15be8:	b	15a70 <__assert_fail@plt+0x469c>
   15bec:	mov	r2, #5
   15bf0:	ldr	r1, [pc, #240]	; 15ce8 <__assert_fail@plt+0x4914>
   15bf4:	mov	r0, #0
   15bf8:	bl	11158 <dcgettext@plt>
   15bfc:	ldr	r1, [r4, #24]
   15c00:	ldr	r2, [r4, #20]
   15c04:	ldr	r3, [r4, #16]
   15c08:	str	r1, [sp, #20]
   15c0c:	ldr	r1, [r4, #12]
   15c10:	str	r2, [sp, #16]
   15c14:	ldr	r2, [r4, #8]
   15c18:	str	r3, [sp, #12]
   15c1c:	ldr	r3, [r4, #4]
   15c20:	str	r1, [sp, #8]
   15c24:	str	r2, [sp, #4]
   15c28:	str	r3, [sp]
   15c2c:	mov	r1, #1
   15c30:	ldr	r3, [r4]
   15c34:	mov	r2, r0
   15c38:	mov	r0, r5
   15c3c:	bl	112c0 <__fprintf_chk@plt>
   15c40:	b	15a70 <__assert_fail@plt+0x469c>
   15c44:	mov	r2, #5
   15c48:	ldr	r1, [pc, #156]	; 15cec <__assert_fail@plt+0x4918>
   15c4c:	mov	r0, #0
   15c50:	bl	11158 <dcgettext@plt>
   15c54:	ldr	r3, [r4, #28]
   15c58:	ldr	r1, [r4, #24]
   15c5c:	ldr	r2, [r4, #20]
   15c60:	str	r3, [sp, #24]
   15c64:	ldr	r3, [r4, #16]
   15c68:	str	r1, [sp, #20]
   15c6c:	ldr	r1, [r4, #12]
   15c70:	str	r2, [sp, #16]
   15c74:	ldr	r2, [r4, #8]
   15c78:	str	r3, [sp, #12]
   15c7c:	ldr	r3, [r4, #4]
   15c80:	str	r1, [sp, #8]
   15c84:	str	r2, [sp, #4]
   15c88:	str	r3, [sp]
   15c8c:	mov	r1, #1
   15c90:	ldr	r3, [r4]
   15c94:	mov	r2, r0
   15c98:	mov	r0, r5
   15c9c:	bl	112c0 <__fprintf_chk@plt>
   15ca0:	b	15a70 <__assert_fail@plt+0x469c>
   15ca4:	mov	r2, #5
   15ca8:	ldr	r1, [pc, #64]	; 15cf0 <__assert_fail@plt+0x491c>
   15cac:	b	15a14 <__assert_fail@plt+0x4640>
   15cb0:	bl	11398 <abort@plt>
   15cb4:	andeq	fp, r1, r0, ror #7
   15cb8:	strdeq	fp, [r1], -r4
   15cbc:	andeq	r0, r0, r2, ror #15
   15cc0:			; <UNDEFINED> instruction: 0x0001b6b0
   15cc4:	strdeq	fp, [r1], -r8
   15cc8:	andeq	fp, r1, ip, ror #7
   15ccc:	ldrdeq	fp, [r1], -r0
   15cd0:	andeq	fp, r1, r4, asr #9
   15cd4:	ldrdeq	fp, [r1], -r4
   15cd8:	andeq	fp, r1, ip, ror #9
   15cdc:	andeq	fp, r1, r8, lsl #10
   15ce0:	andeq	fp, r1, r8, lsr #10
   15ce4:	andeq	fp, r1, ip, asr #10
   15ce8:	andeq	fp, r1, r4, ror r5
   15cec:	andeq	fp, r1, r0, lsr #11
   15cf0:	andeq	fp, r1, r4, lsl #12
   15cf4:	push	{r4, r5, lr}
   15cf8:	sub	sp, sp, #12
   15cfc:	ldr	r5, [sp, #24]
   15d00:	ldr	ip, [r5]
   15d04:	cmp	ip, #0
   15d08:	beq	15d24 <__assert_fail@plt+0x4950>
   15d0c:	mov	lr, r5
   15d10:	mov	ip, #0
   15d14:	ldr	r4, [lr, #4]!
   15d18:	add	ip, ip, #1
   15d1c:	cmp	r4, #0
   15d20:	bne	15d14 <__assert_fail@plt+0x4940>
   15d24:	stm	sp, {r5, ip}
   15d28:	bl	1594c <__assert_fail@plt+0x4578>
   15d2c:	add	sp, sp, #12
   15d30:	pop	{r4, r5, pc}
   15d34:	push	{r4, r5, r6, lr}
   15d38:	sub	sp, sp, #56	; 0x38
   15d3c:	ldr	r6, [pc, #88]	; 15d9c <__assert_fail@plt+0x49c8>
   15d40:	ldr	r5, [sp, #72]	; 0x48
   15d44:	add	r4, sp, #8
   15d48:	ldr	ip, [r6]
   15d4c:	str	ip, [sp, #52]	; 0x34
   15d50:	mov	ip, #0
   15d54:	ldr	lr, [r5], #4
   15d58:	cmp	lr, #0
   15d5c:	str	lr, [r4, #4]!
   15d60:	beq	15d70 <__assert_fail@plt+0x499c>
   15d64:	add	ip, ip, #1
   15d68:	cmp	ip, #10
   15d6c:	bne	15d54 <__assert_fail@plt+0x4980>
   15d70:	add	lr, sp, #12
   15d74:	str	ip, [sp, #4]
   15d78:	str	lr, [sp]
   15d7c:	bl	1594c <__assert_fail@plt+0x4578>
   15d80:	ldr	r2, [sp, #52]	; 0x34
   15d84:	ldr	r3, [r6]
   15d88:	cmp	r2, r3
   15d8c:	bne	15d98 <__assert_fail@plt+0x49c4>
   15d90:	add	sp, sp, #56	; 0x38
   15d94:	pop	{r4, r5, r6, pc}
   15d98:	bl	11164 <__stack_chk_fail@plt>
   15d9c:	andeq	fp, r2, r8, lsl #30
   15da0:	push	{r3}		; (str r3, [sp, #-4]!)
   15da4:	mov	ip, #0
   15da8:	push	{r4, r5, r6, lr}
   15dac:	sub	sp, sp, #60	; 0x3c
   15db0:	ldr	r6, [pc, #100]	; 15e1c <__assert_fail@plt+0x4a48>
   15db4:	add	r5, sp, #8
   15db8:	add	r4, sp, #80	; 0x50
   15dbc:	ldr	r3, [r6]
   15dc0:	str	r4, [sp, #8]
   15dc4:	str	r3, [sp, #52]	; 0x34
   15dc8:	ldr	r3, [sp, #76]	; 0x4c
   15dcc:	ldr	lr, [r4], #4
   15dd0:	cmp	lr, #0
   15dd4:	str	lr, [r5, #4]!
   15dd8:	beq	15de8 <__assert_fail@plt+0x4a14>
   15ddc:	add	ip, ip, #1
   15de0:	cmp	ip, #10
   15de4:	bne	15dcc <__assert_fail@plt+0x49f8>
   15de8:	add	lr, sp, #12
   15dec:	str	ip, [sp, #4]
   15df0:	str	lr, [sp]
   15df4:	bl	1594c <__assert_fail@plt+0x4578>
   15df8:	ldr	r2, [sp, #52]	; 0x34
   15dfc:	ldr	r3, [r6]
   15e00:	cmp	r2, r3
   15e04:	bne	15e18 <__assert_fail@plt+0x4a44>
   15e08:	add	sp, sp, #60	; 0x3c
   15e0c:	pop	{r4, r5, r6, lr}
   15e10:	add	sp, sp, #4
   15e14:	bx	lr
   15e18:	bl	11164 <__stack_chk_fail@plt>
   15e1c:	andeq	fp, r2, r8, lsl #30
   15e20:	push	{r4, lr}
   15e24:	mov	r2, #5
   15e28:	ldr	r1, [pc, #88]	; 15e88 <__assert_fail@plt+0x4ab4>
   15e2c:	mov	r0, #0
   15e30:	bl	11158 <dcgettext@plt>
   15e34:	ldr	r2, [pc, #80]	; 15e8c <__assert_fail@plt+0x4ab8>
   15e38:	mov	r1, r0
   15e3c:	mov	r0, #1
   15e40:	bl	112a8 <__printf_chk@plt>
   15e44:	mov	r2, #5
   15e48:	ldr	r1, [pc, #64]	; 15e90 <__assert_fail@plt+0x4abc>
   15e4c:	mov	r0, #0
   15e50:	bl	11158 <dcgettext@plt>
   15e54:	ldr	r3, [pc, #56]	; 15e94 <__assert_fail@plt+0x4ac0>
   15e58:	ldr	r2, [pc, #56]	; 15e98 <__assert_fail@plt+0x4ac4>
   15e5c:	mov	r1, r0
   15e60:	mov	r0, #1
   15e64:	bl	112a8 <__printf_chk@plt>
   15e68:	ldr	r1, [pc, #44]	; 15e9c <__assert_fail@plt+0x4ac8>
   15e6c:	mov	r2, #5
   15e70:	mov	r0, #0
   15e74:	bl	11158 <dcgettext@plt>
   15e78:	ldr	r3, [pc, #32]	; 15ea0 <__assert_fail@plt+0x4acc>
   15e7c:	pop	{r4, lr}
   15e80:	ldr	r1, [r3]
   15e84:	b	110bc <fputs_unlocked@plt>
   15e88:	andeq	fp, r1, r0, asr #12
   15e8c:	andeq	fp, r1, r4, lsr r1
   15e90:	andeq	fp, r1, r8, asr r6
   15e94:	andeq	sl, r1, r8, asr #20
   15e98:	andeq	sl, r1, r0, ror sl
   15e9c:	andeq	fp, r1, ip, ror #12
   15ea0:	muleq	r2, r4, r1
   15ea4:	push	{r4, lr}
   15ea8:	ldr	r4, [pc, #44]	; 15edc <__assert_fail@plt+0x4b08>
   15eac:	ldrb	r3, [r4]
   15eb0:	cmp	r3, #0
   15eb4:	beq	15ec0 <__assert_fail@plt+0x4aec>
   15eb8:	ldrb	r0, [r4, #1]
   15ebc:	pop	{r4, pc}
   15ec0:	bl	11188 <geteuid@plt>
   15ec4:	mov	r3, #1
   15ec8:	strb	r3, [r4]
   15ecc:	clz	r0, r0
   15ed0:	lsr	r0, r0, #5
   15ed4:	strb	r0, [r4, #1]
   15ed8:	pop	{r4, pc}
   15edc:	strdeq	ip, [r2], -r0
   15ee0:	push	{r4, lr}
   15ee4:	mov	r4, r0
   15ee8:	bl	1120c <malloc@plt>
   15eec:	adds	r4, r4, #0
   15ef0:	movne	r4, #1
   15ef4:	cmp	r0, #0
   15ef8:	movne	r4, #0
   15efc:	cmp	r4, #0
   15f00:	popeq	{r4, pc}
   15f04:	bl	16128 <__assert_fail@plt+0x4d54>
   15f08:	push	{r4, r5, r6, lr}
   15f0c:	umull	r4, r5, r0, r1
   15f10:	adds	r3, r5, #0
   15f14:	movne	r3, #1
   15f18:	cmp	r4, #0
   15f1c:	blt	15f34 <__assert_fail@plt+0x4b60>
   15f20:	cmp	r3, #0
   15f24:	bne	15f34 <__assert_fail@plt+0x4b60>
   15f28:	mul	r0, r1, r0
   15f2c:	pop	{r4, r5, r6, lr}
   15f30:	b	15ee0 <__assert_fail@plt+0x4b0c>
   15f34:	bl	16128 <__assert_fail@plt+0x4d54>
   15f38:	b	15ee0 <__assert_fail@plt+0x4b0c>
   15f3c:	adds	r3, r0, #0
   15f40:	movne	r3, #1
   15f44:	cmp	r1, #0
   15f48:	movne	r3, #0
   15f4c:	cmp	r3, #0
   15f50:	push	{r4, lr}
   15f54:	bne	15f7c <__assert_fail@plt+0x4ba8>
   15f58:	mov	r4, r1
   15f5c:	bl	11170 <realloc@plt>
   15f60:	adds	r4, r4, #0
   15f64:	movne	r4, #1
   15f68:	cmp	r0, #0
   15f6c:	movne	r4, #0
   15f70:	cmp	r4, #0
   15f74:	popeq	{r4, pc}
   15f78:	bl	16128 <__assert_fail@plt+0x4d54>
   15f7c:	bl	11110 <free@plt>
   15f80:	mov	r0, #0
   15f84:	pop	{r4, pc}
   15f88:	push	{r4, r5, r6, lr}
   15f8c:	umull	r4, r5, r1, r2
   15f90:	adds	r3, r5, #0
   15f94:	movne	r3, #1
   15f98:	cmp	r4, #0
   15f9c:	blt	15fb4 <__assert_fail@plt+0x4be0>
   15fa0:	cmp	r3, #0
   15fa4:	bne	15fb4 <__assert_fail@plt+0x4be0>
   15fa8:	mul	r1, r2, r1
   15fac:	pop	{r4, r5, r6, lr}
   15fb0:	b	15f3c <__assert_fail@plt+0x4b68>
   15fb4:	bl	16128 <__assert_fail@plt+0x4d54>
   15fb8:	push	{r4, r5, r6, r7, r8, lr}
   15fbc:	subs	r7, r0, #0
   15fc0:	mov	r6, r1
   15fc4:	mov	r5, r2
   15fc8:	ldr	r4, [r1]
   15fcc:	beq	16000 <__assert_fail@plt+0x4c2c>
   15fd0:	mov	r1, r2
   15fd4:	ldr	r0, [pc, #104]	; 16044 <__assert_fail@plt+0x4c70>
   15fd8:	bl	19d98 <fts_children@@Base+0x1848>
   15fdc:	cmp	r0, r4
   15fe0:	bls	16024 <__assert_fail@plt+0x4c50>
   15fe4:	add	r3, r4, #1
   15fe8:	add	r4, r3, r4, lsr #1
   15fec:	str	r4, [r6]
   15ff0:	mul	r1, r5, r4
   15ff4:	mov	r0, r7
   15ff8:	pop	{r4, r5, r6, r7, r8, lr}
   15ffc:	b	15f3c <__assert_fail@plt+0x4b68>
   16000:	cmp	r4, #0
   16004:	beq	16028 <__assert_fail@plt+0x4c54>
   16008:	umull	r0, r1, r4, r5
   1600c:	adds	r3, r1, #0
   16010:	movne	r3, #1
   16014:	cmp	r0, #0
   16018:	blt	16024 <__assert_fail@plt+0x4c50>
   1601c:	cmp	r3, #0
   16020:	beq	15fec <__assert_fail@plt+0x4c18>
   16024:	bl	16128 <__assert_fail@plt+0x4d54>
   16028:	mov	r1, r2
   1602c:	mov	r0, #64	; 0x40
   16030:	bl	19d98 <fts_children@@Base+0x1848>
   16034:	cmp	r5, #64	; 0x40
   16038:	movls	r4, r0
   1603c:	addhi	r4, r0, #1
   16040:	b	16008 <__assert_fail@plt+0x4c34>
   16044:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   16048:	cmp	r0, #0
   1604c:	ldr	r3, [r1]
   16050:	beq	16074 <__assert_fail@plt+0x4ca0>
   16054:	ldr	r2, [pc, #60]	; 16098 <__assert_fail@plt+0x4cc4>
   16058:	cmp	r3, r2
   1605c:	bhi	16090 <__assert_fail@plt+0x4cbc>
   16060:	add	r2, r3, #1
   16064:	add	r3, r2, r3, lsr #1
   16068:	str	r3, [r1]
   1606c:	mov	r1, r3
   16070:	b	15f3c <__assert_fail@plt+0x4b68>
   16074:	cmp	r3, #0
   16078:	bne	1608c <__assert_fail@plt+0x4cb8>
   1607c:	mov	r3, #64	; 0x40
   16080:	str	r3, [r1]
   16084:	mov	r1, r3
   16088:	b	15f3c <__assert_fail@plt+0x4b68>
   1608c:	bge	16068 <__assert_fail@plt+0x4c94>
   16090:	push	{r4, lr}
   16094:	bl	16128 <__assert_fail@plt+0x4d54>
   16098:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   1609c:	push	{r4, lr}
   160a0:	mov	r4, r0
   160a4:	bl	15ee0 <__assert_fail@plt+0x4b0c>
   160a8:	mov	r2, r4
   160ac:	mov	r1, #0
   160b0:	pop	{r4, lr}
   160b4:	b	1129c <memset@plt>
   160b8:	push	{r4, r5, r6, lr}
   160bc:	umull	r4, r5, r0, r1
   160c0:	adds	r3, r5, #0
   160c4:	movne	r3, #1
   160c8:	cmp	r4, #0
   160cc:	blt	160e4 <__assert_fail@plt+0x4d10>
   160d0:	cmp	r3, #0
   160d4:	bne	160e4 <__assert_fail@plt+0x4d10>
   160d8:	bl	110b0 <calloc@plt>
   160dc:	cmp	r0, #0
   160e0:	popne	{r4, r5, r6, pc}
   160e4:	bl	16128 <__assert_fail@plt+0x4d54>
   160e8:	push	{r4, r5, r6, lr}
   160ec:	mov	r4, r1
   160f0:	mov	r5, r0
   160f4:	mov	r0, r1
   160f8:	bl	15ee0 <__assert_fail@plt+0x4b0c>
   160fc:	mov	r2, r4
   16100:	mov	r1, r5
   16104:	pop	{r4, r5, r6, lr}
   16108:	b	11134 <memcpy@plt>
   1610c:	push	{r4, lr}
   16110:	mov	r4, r0
   16114:	bl	1126c <strlen@plt>
   16118:	add	r1, r0, #1
   1611c:	mov	r0, r4
   16120:	pop	{r4, lr}
   16124:	b	160e8 <__assert_fail@plt+0x4d14>
   16128:	ldr	r3, [pc, #44]	; 1615c <__assert_fail@plt+0x4d88>
   1612c:	push	{r4, lr}
   16130:	mov	r2, #5
   16134:	ldr	r1, [pc, #36]	; 16160 <__assert_fail@plt+0x4d8c>
   16138:	mov	r0, #0
   1613c:	ldr	r4, [r3]
   16140:	bl	11158 <dcgettext@plt>
   16144:	ldr	r2, [pc, #24]	; 16164 <__assert_fail@plt+0x4d90>
   16148:	mov	r1, #0
   1614c:	mov	r3, r0
   16150:	mov	r0, r4
   16154:	bl	111f4 <error@plt>
   16158:	bl	11398 <abort@plt>
   1615c:	andeq	ip, r2, r4, lsr r1
   16160:	andeq	fp, r1, r0, ror #13
   16164:	andeq	fp, r1, r0, lsr r2
   16168:	push	{r4, lr}
   1616c:	orr	r1, r1, #512	; 0x200
   16170:	bl	178b8 <fts_open@@Base>
   16174:	cmp	r0, #0
   16178:	popne	{r4, pc}
   1617c:	bl	11284 <__errno_location@plt>
   16180:	ldr	r3, [r0]
   16184:	cmp	r3, #22
   16188:	beq	16190 <__assert_fail@plt+0x4dbc>
   1618c:	bl	16128 <__assert_fail@plt+0x4d54>
   16190:	ldr	r3, [pc, #12]	; 161a4 <__assert_fail@plt+0x4dd0>
   16194:	mov	r2, #41	; 0x29
   16198:	ldr	r1, [pc, #8]	; 161a8 <__assert_fail@plt+0x4dd4>
   1619c:	ldr	r0, [pc, #8]	; 161ac <__assert_fail@plt+0x4dd8>
   161a0:	bl	113d4 <__assert_fail@plt>
   161a4:	strdeq	fp, [r1], -r4
   161a8:	andeq	fp, r1, r0, lsl #14
   161ac:	andeq	fp, r1, ip, lsl #14
   161b0:	ldr	r3, [r0, #48]	; 0x30
   161b4:	and	r3, r3, #17
   161b8:	cmp	r3, #16
   161bc:	beq	161e0 <__assert_fail@plt+0x4e0c>
   161c0:	cmp	r3, #17
   161c4:	beq	161d0 <__assert_fail@plt+0x4dfc>
   161c8:	mov	r0, #0
   161cc:	bx	lr
   161d0:	ldr	r0, [r1, #48]	; 0x30
   161d4:	adds	r0, r0, #0
   161d8:	movne	r0, #1
   161dc:	bx	lr
   161e0:	mov	r0, #1
   161e4:	bx	lr
   161e8:	push	{r4, r5, lr}
   161ec:	sub	sp, sp, #20
   161f0:	ldr	r5, [pc, #128]	; 16278 <__assert_fail@plt+0x4ea4>
   161f4:	ldr	r3, [pc, #128]	; 1627c <__assert_fail@plt+0x4ea8>
   161f8:	mov	r4, #0
   161fc:	ldr	ip, [r5]
   16200:	ldr	r3, [r3]
   16204:	mov	r2, #10
   16208:	add	r1, sp, #8
   1620c:	add	r0, sp, #4
   16210:	str	ip, [sp, #12]
   16214:	str	r4, [sp, #4]
   16218:	str	r4, [sp, #8]
   1621c:	bl	110d4 <__getdelim@plt>
   16220:	subs	r3, r0, #0
   16224:	ble	16250 <__assert_fail@plt+0x4e7c>
   16228:	ldr	r0, [sp, #4]
   1622c:	sub	r3, r3, #1
   16230:	ldrb	r2, [r0, r3]
   16234:	cmp	r2, #10
   16238:	strbeq	r4, [r0, r3]
   1623c:	ldreq	r0, [sp, #4]
   16240:	bl	112f0 <rpmatch@plt>
   16244:	cmp	r0, #0
   16248:	movle	r4, #0
   1624c:	movgt	r4, #1
   16250:	ldr	r0, [sp, #4]
   16254:	bl	11110 <free@plt>
   16258:	ldr	r2, [sp, #12]
   1625c:	ldr	r3, [r5]
   16260:	mov	r0, r4
   16264:	cmp	r2, r3
   16268:	bne	16274 <__assert_fail@plt+0x4ea0>
   1626c:	add	sp, sp, #20
   16270:	pop	{r4, r5, pc}
   16274:	bl	11164 <__stack_chk_fail@plt>
   16278:	andeq	fp, r2, r8, lsl #30
   1627c:	muleq	r2, r0, r1
   16280:	push	{r4, lr}
   16284:	subs	r4, r0, #0
   16288:	sub	sp, sp, #8
   1628c:	beq	162a8 <__assert_fail@plt+0x4ed4>
   16290:	bl	11224 <__freading@plt>
   16294:	cmp	r0, #0
   16298:	beq	162a8 <__assert_fail@plt+0x4ed4>
   1629c:	ldr	r3, [r4]
   162a0:	tst	r3, #256	; 0x100
   162a4:	bne	162b8 <__assert_fail@plt+0x4ee4>
   162a8:	mov	r0, r4
   162ac:	add	sp, sp, #8
   162b0:	pop	{r4, lr}
   162b4:	b	110ec <fflush@plt>
   162b8:	mov	r3, #1
   162bc:	str	r3, [sp]
   162c0:	mov	r2, #0
   162c4:	mov	r3, #0
   162c8:	mov	r0, r4
   162cc:	bl	1631c <__assert_fail@plt+0x4f48>
   162d0:	mov	r0, r4
   162d4:	add	sp, sp, #8
   162d8:	pop	{r4, lr}
   162dc:	b	110ec <fflush@plt>
   162e0:	ldr	r2, [r0, #20]
   162e4:	ldr	r3, [r0, #16]
   162e8:	cmp	r2, r3
   162ec:	bhi	16314 <__assert_fail@plt+0x4f40>
   162f0:	ldm	r0, {r1, r2, r3}
   162f4:	tst	r1, #256	; 0x100
   162f8:	sub	r3, r3, r2
   162fc:	ldrne	r1, [r0, #36]	; 0x24
   16300:	ldrne	r2, [r0, #44]	; 0x2c
   16304:	subne	r2, r2, r1
   16308:	addne	r3, r3, r2
   1630c:	mov	r0, r3
   16310:	bx	lr
   16314:	mov	r0, #0
   16318:	bx	lr
   1631c:	push	{r4, r5, r6, r7, r8, lr}
   16320:	sub	sp, sp, #8
   16324:	ldmib	r0, {ip, lr}
   16328:	mov	r4, r0
   1632c:	ldr	r5, [sp, #32]
   16330:	cmp	lr, ip
   16334:	beq	1634c <__assert_fail@plt+0x4f78>
   16338:	str	r5, [sp, #32]
   1633c:	mov	r0, r4
   16340:	add	sp, sp, #8
   16344:	pop	{r4, r5, r6, r7, r8, lr}
   16348:	b	112d8 <fseeko64@plt>
   1634c:	ldr	lr, [r0, #20]
   16350:	ldr	ip, [r0, #16]
   16354:	cmp	lr, ip
   16358:	bne	16338 <__assert_fail@plt+0x4f64>
   1635c:	ldr	r8, [r0, #36]	; 0x24
   16360:	cmp	r8, #0
   16364:	bne	16338 <__assert_fail@plt+0x4f64>
   16368:	mov	r6, r2
   1636c:	mov	r7, r3
   16370:	bl	112b4 <fileno@plt>
   16374:	mov	r2, r6
   16378:	mov	r3, r7
   1637c:	str	r5, [sp]
   16380:	bl	111c4 <lseek64@plt>
   16384:	mvn	r3, #0
   16388:	mvn	r2, #0
   1638c:	cmp	r1, r3
   16390:	cmpeq	r0, r2
   16394:	beq	163b4 <__assert_fail@plt+0x4fe0>
   16398:	ldr	r3, [r4]
   1639c:	strd	r0, [r4, #80]	; 0x50
   163a0:	mov	r0, r8
   163a4:	bic	r3, r3, #16
   163a8:	str	r3, [r4]
   163ac:	add	sp, sp, #8
   163b0:	pop	{r4, r5, r6, r7, r8, pc}
   163b4:	mvn	r0, #0
   163b8:	b	163ac <__assert_fail@plt+0x4fd8>
   163bc:	ldrd	r2, [r1, #8]
   163c0:	push	{r4, r5}
   163c4:	ldrd	r4, [r0, #8]
   163c8:	cmp	r5, r3
   163cc:	cmpeq	r4, r2
   163d0:	movne	r0, #0
   163d4:	bne	163f0 <__assert_fail@plt+0x501c>
   163d8:	ldrd	r4, [r0]
   163dc:	ldrd	r2, [r1]
   163e0:	cmp	r5, r3
   163e4:	cmpeq	r4, r2
   163e8:	moveq	r0, #1
   163ec:	movne	r0, #0
   163f0:	pop	{r4, r5}
   163f4:	bx	lr
   163f8:	push	{r4, lr}
   163fc:	mov	r2, r1
   16400:	mov	r3, #0
   16404:	ldrd	r0, [r0, #8]
   16408:	bl	19fa4 <fts_children@@Base+0x1a54>
   1640c:	mov	r0, r2
   16410:	pop	{r4, pc}
   16414:	push	{r4, lr}
   16418:	mov	r2, r1
   1641c:	mov	r3, #0
   16420:	ldrd	r0, [r0]
   16424:	bl	19fa4 <fts_children@@Base+0x1a54>
   16428:	mov	r0, r2
   1642c:	pop	{r4, pc}
   16430:	push	{r4, r5}
   16434:	ldrd	r2, [r1]
   16438:	ldrd	r4, [r0]
   1643c:	cmp	r5, r3
   16440:	cmpeq	r4, r2
   16444:	moveq	r0, #1
   16448:	movne	r0, #0
   1644c:	pop	{r4, r5}
   16450:	bx	lr
   16454:	ldr	r2, [r0]
   16458:	ldr	r3, [r1]
   1645c:	ldrd	r0, [r2, #168]	; 0xa8
   16460:	ldrd	r2, [r3, #168]	; 0xa8
   16464:	cmp	r1, r3
   16468:	cmpeq	r0, r2
   1646c:	bcc	1647c <__assert_fail@plt+0x50a8>
   16470:	movhi	r0, #1
   16474:	movls	r0, #0
   16478:	bx	lr
   1647c:	mvn	r0, #0
   16480:	bx	lr
   16484:	ldr	r3, [r0, #40]	; 0x28
   16488:	push	{r4, r5, r6, r7, r8, lr}
   1648c:	cmp	r3, r2
   16490:	mov	r6, r0
   16494:	ldr	r7, [r0, #44]	; 0x2c
   16498:	mov	r5, r2
   1649c:	mov	r4, r1
   164a0:	ldr	r0, [r0, #8]
   164a4:	bcs	164cc <__assert_fail@plt+0x50f8>
   164a8:	add	r1, r2, #40	; 0x28
   164ac:	cmn	r1, #-1073741823	; 0xc0000001
   164b0:	str	r1, [r6, #40]	; 0x28
   164b4:	bhi	16544 <__assert_fail@plt+0x5170>
   164b8:	lsl	r1, r1, #2
   164bc:	bl	11170 <realloc@plt>
   164c0:	cmp	r0, #0
   164c4:	strne	r0, [r6, #8]
   164c8:	beq	16540 <__assert_fail@plt+0x516c>
   164cc:	cmp	r4, #0
   164d0:	movne	r2, r0
   164d4:	beq	164e8 <__assert_fail@plt+0x5114>
   164d8:	str	r4, [r2], #4
   164dc:	ldr	r4, [r4, #8]
   164e0:	cmp	r4, #0
   164e4:	bne	164d8 <__assert_fail@plt+0x5104>
   164e8:	mov	r3, r7
   164ec:	mov	r2, #4
   164f0:	mov	r1, r5
   164f4:	bl	1135c <qsort@plt>
   164f8:	ldr	lr, [r6, #8]
   164fc:	subs	r3, r5, #1
   16500:	ldr	r0, [lr]
   16504:	moveq	r2, r0
   16508:	beq	16534 <__assert_fail@plt+0x5160>
   1650c:	mov	ip, r0
   16510:	mov	r2, lr
   16514:	b	1651c <__assert_fail@plt+0x5148>
   16518:	ldr	ip, [r2]
   1651c:	ldr	r1, [r2, #4]!
   16520:	subs	r3, r3, #1
   16524:	str	r1, [ip, #8]
   16528:	bne	16518 <__assert_fail@plt+0x5144>
   1652c:	add	r5, lr, r5, lsl #2
   16530:	ldr	r2, [r5, #-4]
   16534:	mov	r3, #0
   16538:	str	r3, [r2, #8]
   1653c:	pop	{r4, r5, r6, r7, r8, pc}
   16540:	ldr	r0, [r6, #8]
   16544:	bl	11110 <free@plt>
   16548:	mov	r3, #0
   1654c:	mov	r0, r4
   16550:	str	r3, [r6, #8]
   16554:	str	r3, [r6, #40]	; 0x28
   16558:	pop	{r4, r5, r6, r7, r8, pc}
   1655c:	add	r3, r2, #184	; 0xb8
   16560:	push	{r4, r5, r6, r7, r8, lr}
   16564:	mov	r6, r0
   16568:	bic	r0, r3, #7
   1656c:	mov	r5, r2
   16570:	mov	r7, r1
   16574:	bl	1120c <malloc@plt>
   16578:	subs	r4, r0, #0
   1657c:	beq	165c8 <__assert_fail@plt+0x51f4>
   16580:	mov	r1, r7
   16584:	mov	r2, r5
   16588:	add	r0, r4, #176	; 0xb0
   1658c:	bl	11134 <memcpy@plt>
   16590:	add	r0, r4, r5
   16594:	ldr	r1, [r6, #24]
   16598:	mov	r3, #0
   1659c:	mov	r2, #3
   165a0:	strb	r3, [r0, #176]	; 0xb0
   165a4:	str	r3, [r4, #32]
   165a8:	str	r3, [r4, #12]
   165ac:	strh	r3, [r4, #62]	; 0x3e
   165b0:	str	r3, [r4, #16]
   165b4:	str	r3, [r4, #20]
   165b8:	str	r5, [r4, #52]	; 0x34
   165bc:	str	r6, [r4, #44]	; 0x2c
   165c0:	str	r1, [r4, #28]
   165c4:	strh	r2, [r4, #64]	; 0x40
   165c8:	mov	r0, r4
   165cc:	pop	{r4, r5, r6, r7, r8, pc}
   165d0:	push	{r4, r5, r6, lr}
   165d4:	subs	r4, r0, #0
   165d8:	popeq	{r4, r5, r6, pc}
   165dc:	ldr	r3, [r4, #12]
   165e0:	ldr	r5, [r4, #8]
   165e4:	subs	r0, r3, #0
   165e8:	beq	165f0 <__assert_fail@plt+0x521c>
   165ec:	bl	113c8 <closedir@plt>
   165f0:	mov	r0, r4
   165f4:	bl	11110 <free@plt>
   165f8:	subs	r4, r5, #0
   165fc:	bne	165dc <__assert_fail@plt+0x5208>
   16600:	pop	{r4, r5, r6, pc}
   16604:	push	{r4, lr}
   16608:	mov	r4, r0
   1660c:	mov	r0, r4
   16610:	bl	19a38 <fts_children@@Base+0x14e8>
   16614:	cmp	r0, #0
   16618:	mov	r0, r4
   1661c:	popne	{r4, pc}
   16620:	bl	19a84 <fts_children@@Base+0x1534>
   16624:	cmp	r0, #0
   16628:	blt	1660c <__assert_fail@plt+0x5238>
   1662c:	bl	113a4 <close@plt>
   16630:	b	1660c <__assert_fail@plt+0x5238>
   16634:	push	{r4, r5, r6, r7, r8, lr}
   16638:	sub	sp, sp, #120	; 0x78
   1663c:	ldr	r6, [r0, #44]	; 0x2c
   16640:	ldr	r5, [pc, #272]	; 16758 <__assert_fail@plt+0x5384>
   16644:	ldr	r3, [r6, #48]	; 0x30
   16648:	ldr	r2, [r5]
   1664c:	tst	r3, #512	; 0x200
   16650:	str	r2, [sp, #116]	; 0x74
   16654:	beq	166d8 <__assert_fail@plt+0x5304>
   16658:	ldr	r4, [r6, #52]	; 0x34
   1665c:	mov	r7, r0
   16660:	cmp	r4, #0
   16664:	mov	r8, r1
   16668:	beq	16690 <__assert_fail@plt+0x52bc>
   1666c:	ldrd	r2, [r7, #72]	; 0x48
   16670:	add	r1, sp, #8
   16674:	mov	r0, r4
   16678:	strd	r2, [sp, #8]
   1667c:	bl	18fa8 <fts_children@@Base+0xa58>
   16680:	cmp	r0, #0
   16684:	beq	166bc <__assert_fail@plt+0x52e8>
   16688:	ldr	r6, [r0, #8]
   1668c:	b	166dc <__assert_fail@plt+0x5308>
   16690:	ldr	r3, [pc, #196]	; 1675c <__assert_fail@plt+0x5388>
   16694:	mov	r1, r4
   16698:	str	r3, [sp]
   1669c:	ldr	r2, [pc, #188]	; 16760 <__assert_fail@plt+0x538c>
   166a0:	ldr	r3, [pc, #188]	; 16764 <__assert_fail@plt+0x5390>
   166a4:	mov	r0, #13
   166a8:	bl	19260 <fts_children@@Base+0xd10>
   166ac:	cmp	r0, #0
   166b0:	mov	r4, r0
   166b4:	str	r0, [r6, #52]	; 0x34
   166b8:	bne	1666c <__assert_fail@plt+0x5298>
   166bc:	cmp	r8, #0
   166c0:	blt	166d8 <__assert_fail@plt+0x5304>
   166c4:	mov	r0, r8
   166c8:	add	r1, sp, #24
   166cc:	bl	110a4 <fstatfs64@plt>
   166d0:	cmp	r0, #0
   166d4:	beq	166f8 <__assert_fail@plt+0x5324>
   166d8:	mov	r6, #0
   166dc:	ldr	r2, [sp, #116]	; 0x74
   166e0:	ldr	r3, [r5]
   166e4:	mov	r0, r6
   166e8:	cmp	r2, r3
   166ec:	bne	16750 <__assert_fail@plt+0x537c>
   166f0:	add	sp, sp, #120	; 0x78
   166f4:	pop	{r4, r5, r6, r7, r8, pc}
   166f8:	cmp	r4, #0
   166fc:	ldr	r6, [sp, #24]
   16700:	beq	166dc <__assert_fail@plt+0x5308>
   16704:	mov	r0, #16
   16708:	bl	1120c <malloc@plt>
   1670c:	subs	r8, r0, #0
   16710:	beq	166dc <__assert_fail@plt+0x5308>
   16714:	ldrd	r2, [r7, #72]	; 0x48
   16718:	str	r6, [r8, #8]
   1671c:	mov	r0, r4
   16720:	strd	r2, [r8]
   16724:	mov	r1, r8
   16728:	bl	1988c <fts_children@@Base+0x133c>
   1672c:	cmp	r0, #0
   16730:	beq	16744 <__assert_fail@plt+0x5370>
   16734:	cmp	r8, r0
   16738:	bne	16754 <__assert_fail@plt+0x5380>
   1673c:	ldr	r6, [sp, #24]
   16740:	b	166dc <__assert_fail@plt+0x5308>
   16744:	mov	r0, r8
   16748:	bl	11110 <free@plt>
   1674c:	b	1673c <__assert_fail@plt+0x5368>
   16750:	bl	11164 <__stack_chk_fail@plt>
   16754:	bl	11398 <abort@plt>
   16758:	andeq	fp, r2, r8, lsl #30
   1675c:	andeq	r1, r1, r0, lsl r1
   16760:	andeq	r6, r1, r4, lsl r4
   16764:	andeq	r6, r1, r0, lsr r4
   16768:	push	{r4, lr}
   1676c:	bl	16634 <__assert_fail@plt+0x5260>
   16770:	ldr	r3, [pc, #112]	; 167e8 <__assert_fail@plt+0x5414>
   16774:	cmp	r0, r3
   16778:	beq	167d8 <__assert_fail@plt+0x5404>
   1677c:	ble	167b4 <__assert_fail@plt+0x53e0>
   16780:	ldr	r3, [pc, #100]	; 167ec <__assert_fail@plt+0x5418>
   16784:	cmp	r0, r3
   16788:	beq	167d8 <__assert_fail@plt+0x5404>
   1678c:	add	r3, r3, #83886080	; 0x5000000
   16790:	add	r3, r3, #4544	; 0x11c0
   16794:	add	r3, r3, #51	; 0x33
   16798:	cmp	r0, r3
   1679c:	beq	167e0 <__assert_fail@plt+0x540c>
   167a0:	ldr	r3, [pc, #72]	; 167f0 <__assert_fail@plt+0x541c>
   167a4:	cmp	r0, r3
   167a8:	moveq	r0, #2
   167ac:	movne	r0, #1
   167b0:	pop	{r4, pc}
   167b4:	cmp	r0, #0
   167b8:	popeq	{r4, pc}
   167bc:	ldr	r3, [pc, #48]	; 167f4 <__assert_fail@plt+0x5420>
   167c0:	cmp	r0, r3
   167c4:	beq	167d8 <__assert_fail@plt+0x5404>
   167c8:	ldr	r3, [pc, #40]	; 167f8 <__assert_fail@plt+0x5424>
   167cc:	subs	r0, r0, r3
   167d0:	movne	r0, #1
   167d4:	pop	{r4, pc}
   167d8:	mov	r0, #0
   167dc:	pop	{r4, pc}
   167e0:	mov	r0, #2
   167e4:	pop	{r4, pc}
   167e8:	andeq	r9, r0, r0, lsr #31
   167ec:	movtpl	r4, #24911	; 0x614f
   167f0:	rsbpl	r4, r5, #1884160	; 0x1cc000
   167f4:	andeq	r6, r0, r9, ror #18
   167f8:			; <UNDEFINED> instruction: 0xff534d42
   167fc:	push	{r4, r5, r6, lr}
   16800:	mov	r5, r1
   16804:	ldr	r1, [r0, #32]
   16808:	cmn	r1, #100	; 0x64
   1680c:	sub	r3, r1, r5
   16810:	clz	r3, r3
   16814:	lsr	r3, r3, #5
   16818:	moveq	r3, #0
   1681c:	cmp	r3, #0
   16820:	bne	16880 <__assert_fail@plt+0x54ac>
   16824:	cmp	r2, #0
   16828:	mov	r4, r0
   1682c:	bne	16858 <__assert_fail@plt+0x5484>
   16830:	ldr	r3, [r0, #48]	; 0x30
   16834:	lsr	r3, r3, #2
   16838:	eor	r3, r3, #1
   1683c:	cmp	r1, #0
   16840:	movlt	r3, #0
   16844:	andge	r3, r3, #1
   16848:	cmp	r3, #0
   1684c:	bne	16874 <__assert_fail@plt+0x54a0>
   16850:	str	r5, [r4, #32]
   16854:	pop	{r4, r5, r6, pc}
   16858:	add	r0, r0, #60	; 0x3c
   1685c:	bl	19a40 <fts_children@@Base+0x14f0>
   16860:	cmp	r0, #0
   16864:	blt	16850 <__assert_fail@plt+0x547c>
   16868:	bl	113a4 <close@plt>
   1686c:	str	r5, [r4, #32]
   16870:	pop	{r4, r5, r6, pc}
   16874:	mov	r0, r1
   16878:	bl	113a4 <close@plt>
   1687c:	b	1686c <__assert_fail@plt+0x5498>
   16880:	bl	11398 <abort@plt>
   16884:	ldr	r3, [r0, #48]	; 0x30
   16888:	push	{r4, r5, r6, lr}
   1688c:	ands	r5, r3, #4
   16890:	mov	r4, r0
   16894:	movne	r5, #0
   16898:	bne	168b0 <__assert_fail@plt+0x54dc>
   1689c:	tst	r3, #512	; 0x200
   168a0:	beq	168c0 <__assert_fail@plt+0x54ec>
   168a4:	mov	r2, #1
   168a8:	mvn	r1, #99	; 0x63
   168ac:	bl	167fc <__assert_fail@plt+0x5428>
   168b0:	add	r0, r4, #60	; 0x3c
   168b4:	bl	16604 <__assert_fail@plt+0x5230>
   168b8:	mov	r0, r5
   168bc:	pop	{r4, r5, r6, pc}
   168c0:	ldr	r0, [r0, #28]
   168c4:	bl	11350 <fchdir@plt>
   168c8:	adds	r5, r0, #0
   168cc:	movne	r5, #1
   168d0:	b	168b0 <__assert_fail@plt+0x54dc>
   168d4:	push	{r4, r5, r6, lr}
   168d8:	mov	r4, r2
   168dc:	ldr	r2, [r2, #48]	; 0x30
   168e0:	mov	r6, r1
   168e4:	cmp	r2, #0
   168e8:	ldr	ip, [r1]
   168ec:	sub	sp, sp, #8
   168f0:	add	r5, r4, #72	; 0x48
   168f4:	ldr	r1, [r4, #24]
   168f8:	bne	16958 <__assert_fail@plt+0x5584>
   168fc:	tst	ip, #1
   16900:	beq	16958 <__assert_fail@plt+0x5584>
   16904:	mov	r2, r5
   16908:	mov	r0, #3
   1690c:	bl	11374 <__xstat64@plt>
   16910:	cmp	r0, #0
   16914:	beq	16988 <__assert_fail@plt+0x55b4>
   16918:	bl	11284 <__errno_location@plt>
   1691c:	ldr	r3, [r0]
   16920:	mov	r6, r0
   16924:	cmp	r3, #2
   16928:	bne	169bc <__assert_fail@plt+0x55e8>
   1692c:	mov	r2, r5
   16930:	ldr	r1, [r4, #24]
   16934:	mov	r0, #3
   16938:	bl	113b0 <__lxstat64@plt>
   1693c:	cmp	r0, #0
   16940:	ldrne	r3, [r6]
   16944:	bne	169bc <__assert_fail@plt+0x55e8>
   16948:	str	r0, [r6]
   1694c:	mov	r0, #13
   16950:	add	sp, sp, #8
   16954:	pop	{r4, r5, r6, pc}
   16958:	lsl	ip, ip, #30
   1695c:	orrs	r3, r3, ip, lsr #31
   16960:	bne	16904 <__assert_fail@plt+0x5530>
   16964:	mov	r3, #256	; 0x100
   16968:	mov	r2, r1
   1696c:	str	r3, [sp]
   16970:	mov	r1, r0
   16974:	mov	r3, r5
   16978:	mov	r0, #3
   1697c:	bl	11194 <__fxstatat64@plt>
   16980:	cmp	r0, #0
   16984:	bne	169b4 <__assert_fail@plt+0x55e0>
   16988:	ldr	r3, [r4, #88]	; 0x58
   1698c:	and	r3, r3, #61440	; 0xf000
   16990:	cmp	r3, #16384	; 0x4000
   16994:	beq	169dc <__assert_fail@plt+0x5608>
   16998:	cmp	r3, #40960	; 0xa000
   1699c:	beq	16a58 <__assert_fail@plt+0x5684>
   169a0:	cmp	r3, #32768	; 0x8000
   169a4:	movne	r0, #3
   169a8:	moveq	r0, #8
   169ac:	add	sp, sp, #8
   169b0:	pop	{r4, r5, r6, pc}
   169b4:	bl	11284 <__errno_location@plt>
   169b8:	ldr	r3, [r0]
   169bc:	str	r3, [r4, #32]
   169c0:	mov	r0, r5
   169c4:	mov	r2, #104	; 0x68
   169c8:	mov	r1, #0
   169cc:	bl	1129c <memset@plt>
   169d0:	mov	r0, #10
   169d4:	add	sp, sp, #8
   169d8:	pop	{r4, r5, r6, pc}
   169dc:	ldr	r3, [r4, #92]	; 0x5c
   169e0:	cmp	r3, #1
   169e4:	bls	16a50 <__assert_fail@plt+0x567c>
   169e8:	ldr	r2, [r4, #48]	; 0x30
   169ec:	cmp	r2, #0
   169f0:	ble	16a50 <__assert_fail@plt+0x567c>
   169f4:	ldr	r2, [r6]
   169f8:	tst	r2, #32
   169fc:	subeq	r3, r3, #2
   16a00:	ldrb	r2, [r4, #176]	; 0xb0
   16a04:	str	r3, [r4, #56]	; 0x38
   16a08:	cmp	r2, #46	; 0x2e
   16a0c:	bne	16a30 <__assert_fail@plt+0x565c>
   16a10:	ldrb	r3, [r4, #177]	; 0xb1
   16a14:	cmp	r3, #0
   16a18:	beq	16a3c <__assert_fail@plt+0x5668>
   16a1c:	ldr	r3, [r4, #176]	; 0xb0
   16a20:	bic	r3, r3, #-16777216	; 0xff000000
   16a24:	bic	r3, r3, #255	; 0xff
   16a28:	cmp	r3, #11776	; 0x2e00
   16a2c:	beq	16a3c <__assert_fail@plt+0x5668>
   16a30:	mov	r0, #1
   16a34:	add	sp, sp, #8
   16a38:	pop	{r4, r5, r6, pc}
   16a3c:	ldr	r3, [r4, #48]	; 0x30
   16a40:	cmp	r3, #0
   16a44:	moveq	r0, #1
   16a48:	movne	r0, #5
   16a4c:	b	169ac <__assert_fail@plt+0x55d8>
   16a50:	mvn	r3, #0
   16a54:	b	16a00 <__assert_fail@plt+0x562c>
   16a58:	mov	r0, #12
   16a5c:	b	169ac <__assert_fail@plt+0x55d8>
   16a60:	ldr	ip, [r1]
   16a64:	push	{r4, r5, r6, lr}
   16a68:	add	r3, ip, #256	; 0x100
   16a6c:	add	r2, r3, r2
   16a70:	cmp	ip, r2
   16a74:	mov	r4, r0
   16a78:	ldr	r0, [r0]
   16a7c:	bhi	16aa4 <__assert_fail@plt+0x56d0>
   16a80:	str	r2, [r1]
   16a84:	mov	r1, r2
   16a88:	bl	11170 <realloc@plt>
   16a8c:	subs	r5, r0, #0
   16a90:	movne	r3, #1
   16a94:	strne	r5, [r4]
   16a98:	beq	16ac8 <__assert_fail@plt+0x56f4>
   16a9c:	mov	r0, r3
   16aa0:	pop	{r4, r5, r6, pc}
   16aa4:	mov	r5, #0
   16aa8:	bl	11110 <free@plt>
   16aac:	str	r5, [r4]
   16ab0:	bl	11284 <__errno_location@plt>
   16ab4:	mov	r2, #36	; 0x24
   16ab8:	mov	r3, r5
   16abc:	str	r2, [r0]
   16ac0:	mov	r0, r3
   16ac4:	pop	{r4, r5, r6, pc}
   16ac8:	ldr	r0, [r4]
   16acc:	bl	11110 <free@plt>
   16ad0:	str	r5, [r4]
   16ad4:	mov	r3, r5
   16ad8:	b	16a9c <__assert_fail@plt+0x56c8>
   16adc:	ldr	r3, [pc, #104]	; 16b4c <__assert_fail@plt+0x5778>
   16ae0:	push	{r4, lr}
   16ae4:	and	r3, r3, r0
   16ae8:	cmp	r3, #0
   16aec:	sub	sp, sp, #8
   16af0:	mov	r4, r1
   16af4:	beq	16b28 <__assert_fail@plt+0x5754>
   16af8:	ldr	r2, [pc, #80]	; 16b50 <__assert_fail@plt+0x577c>
   16afc:	ldr	r3, [pc, #80]	; 16b54 <__assert_fail@plt+0x5780>
   16b00:	str	r2, [sp]
   16b04:	mov	r1, #0
   16b08:	ldr	r2, [pc, #72]	; 16b58 <__assert_fail@plt+0x5784>
   16b0c:	mov	r0, #31
   16b10:	bl	19260 <fts_children@@Base+0xd10>
   16b14:	str	r0, [r4]
   16b18:	adds	r0, r0, #0
   16b1c:	movne	r0, #1
   16b20:	add	sp, sp, #8
   16b24:	pop	{r4, pc}
   16b28:	mov	r0, #32
   16b2c:	bl	1120c <malloc@plt>
   16b30:	cmp	r0, #0
   16b34:	str	r0, [r4]
   16b38:	beq	16b20 <__assert_fail@plt+0x574c>
   16b3c:	bl	18790 <fts_children@@Base+0x240>
   16b40:	mov	r0, #1
   16b44:	add	sp, sp, #8
   16b48:	pop	{r4, pc}
   16b4c:	andeq	r0, r0, r2, lsl #2
   16b50:	andeq	r1, r1, r0, lsl r1
   16b54:			; <UNDEFINED> instruction: 0x000163bc
   16b58:	strdeq	r6, [r1], -r8
   16b5c:	lsl	r3, r1, #11
   16b60:	lsl	ip, r1, #7
   16b64:	tst	r1, #512	; 0x200
   16b68:	and	r1, r3, #32768	; 0x8000
   16b6c:	and	r3, ip, #262144	; 0x40000
   16b70:	orr	r1, r1, r3
   16b74:	orr	r1, r1, #540672	; 0x84000
   16b78:	mov	r3, r2
   16b7c:	orr	r1, r1, #2304	; 0x900
   16b80:	beq	16b90 <__assert_fail@plt+0x57bc>
   16b84:	mov	r2, r1
   16b88:	mov	r1, r3
   16b8c:	b	19b00 <fts_children@@Base+0x15b0>
   16b90:	mov	r0, r2
   16b94:	b	18888 <fts_children@@Base+0x338>
   16b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b9c:	subs	fp, r3, #0
   16ba0:	ldr	r5, [pc, #500]	; 16d9c <__assert_fail@plt+0x59c8>
   16ba4:	sub	sp, sp, #116	; 0x74
   16ba8:	ldr	sl, [r0, #48]	; 0x30
   16bac:	ldr	r3, [r5]
   16bb0:	mov	r6, r0
   16bb4:	mov	r7, r1
   16bb8:	mov	r4, r2
   16bbc:	and	r9, sl, #4
   16bc0:	str	r3, [sp, #108]	; 0x6c
   16bc4:	beq	16c98 <__assert_fail@plt+0x58c4>
   16bc8:	ldr	r1, [pc, #464]	; 16da0 <__assert_fail@plt+0x59cc>
   16bcc:	mov	r0, fp
   16bd0:	bl	110e0 <strcmp@plt>
   16bd4:	cmp	r0, #0
   16bd8:	bne	16c98 <__assert_fail@plt+0x58c4>
   16bdc:	cmp	r9, #0
   16be0:	bne	16cd4 <__assert_fail@plt+0x5900>
   16be4:	cmp	r4, #0
   16be8:	bge	16d88 <__assert_fail@plt+0x59b4>
   16bec:	tst	sl, #512	; 0x200
   16bf0:	bne	16d14 <__assert_fail@plt+0x5940>
   16bf4:	mov	r9, #1
   16bf8:	mov	r1, sl
   16bfc:	mov	r2, fp
   16c00:	ldr	r0, [r6, #32]
   16c04:	bl	16b5c <__assert_fail@plt+0x5788>
   16c08:	subs	r8, r0, #0
   16c0c:	blt	16d7c <__assert_fail@plt+0x59a8>
   16c10:	ldr	sl, [r6, #48]	; 0x30
   16c14:	tst	sl, #2
   16c18:	beq	16cb4 <__assert_fail@plt+0x58e0>
   16c1c:	mov	r2, sp
   16c20:	mov	r1, r8
   16c24:	mov	r0, #3
   16c28:	bl	111ac <__fxstat64@plt>
   16c2c:	cmp	r0, #0
   16c30:	bne	16d0c <__assert_fail@plt+0x5938>
   16c34:	ldrd	r0, [r7, #72]	; 0x48
   16c38:	ldrd	r2, [sp]
   16c3c:	cmp	r1, r3
   16c40:	cmpeq	r0, r2
   16c44:	bne	16d00 <__assert_fail@plt+0x592c>
   16c48:	ldrd	r0, [r7, #168]	; 0xa8
   16c4c:	ldrd	r2, [sp, #96]	; 0x60
   16c50:	cmp	r1, r3
   16c54:	cmpeq	r0, r2
   16c58:	bne	16d00 <__assert_fail@plt+0x592c>
   16c5c:	ldr	sl, [r6, #48]	; 0x30
   16c60:	tst	sl, #512	; 0x200
   16c64:	bne	16d50 <__assert_fail@plt+0x597c>
   16c68:	mov	r0, r8
   16c6c:	bl	11350 <fchdir@plt>
   16c70:	mov	sl, r0
   16c74:	cmp	r4, #0
   16c78:	bge	16ce4 <__assert_fail@plt+0x5910>
   16c7c:	bl	11284 <__errno_location@plt>
   16c80:	mov	r4, r0
   16c84:	mov	r0, r8
   16c88:	ldr	r6, [r4]
   16c8c:	bl	113a4 <close@plt>
   16c90:	str	r6, [r4]
   16c94:	b	16ce4 <__assert_fail@plt+0x5910>
   16c98:	cmp	r9, #0
   16c9c:	bne	16cd4 <__assert_fail@plt+0x5900>
   16ca0:	cmp	r4, #0
   16ca4:	movge	r8, r4
   16ca8:	blt	16bf8 <__assert_fail@plt+0x5824>
   16cac:	tst	sl, #2
   16cb0:	bne	16c1c <__assert_fail@plt+0x5848>
   16cb4:	cmp	fp, #0
   16cb8:	beq	16c60 <__assert_fail@plt+0x588c>
   16cbc:	mov	r0, fp
   16cc0:	ldr	r1, [pc, #216]	; 16da0 <__assert_fail@plt+0x59cc>
   16cc4:	bl	110e0 <strcmp@plt>
   16cc8:	cmp	r0, #0
   16ccc:	bne	16c60 <__assert_fail@plt+0x588c>
   16cd0:	b	16c1c <__assert_fail@plt+0x5848>
   16cd4:	mvn	r3, r4
   16cd8:	lsr	r3, r3, #31
   16cdc:	ands	sl, r3, sl, lsr #9
   16ce0:	bne	16d6c <__assert_fail@plt+0x5998>
   16ce4:	ldr	r2, [sp, #108]	; 0x6c
   16ce8:	ldr	r3, [r5]
   16cec:	mov	r0, sl
   16cf0:	cmp	r2, r3
   16cf4:	bne	16d84 <__assert_fail@plt+0x59b0>
   16cf8:	add	sp, sp, #116	; 0x74
   16cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d00:	bl	11284 <__errno_location@plt>
   16d04:	mov	r3, #2
   16d08:	str	r3, [r0]
   16d0c:	mvn	sl, #0
   16d10:	b	16c74 <__assert_fail@plt+0x58a0>
   16d14:	add	r8, r6, #60	; 0x3c
   16d18:	mov	r0, r8
   16d1c:	bl	19a38 <fts_children@@Base+0x14e8>
   16d20:	subs	r9, r0, #0
   16d24:	bne	16bf8 <__assert_fail@plt+0x5824>
   16d28:	mov	r0, r8
   16d2c:	bl	19a84 <fts_children@@Base+0x1534>
   16d30:	ldr	sl, [r6, #48]	; 0x30
   16d34:	subs	r8, r0, #0
   16d38:	blt	16bf4 <__assert_fail@plt+0x5820>
   16d3c:	tst	sl, #2
   16d40:	mov	r4, r8
   16d44:	mov	r9, #1
   16d48:	beq	16c60 <__assert_fail@plt+0x588c>
   16d4c:	b	16c1c <__assert_fail@plt+0x5848>
   16d50:	eor	r2, r9, #1
   16d54:	mov	r1, r8
   16d58:	uxtb	r2, r2
   16d5c:	mov	r0, r6
   16d60:	bl	167fc <__assert_fail@plt+0x5428>
   16d64:	mov	sl, #0
   16d68:	b	16ce4 <__assert_fail@plt+0x5910>
   16d6c:	mov	r0, r4
   16d70:	bl	113a4 <close@plt>
   16d74:	mov	sl, #0
   16d78:	b	16ce4 <__assert_fail@plt+0x5910>
   16d7c:	mvn	sl, #0
   16d80:	b	16ce4 <__assert_fail@plt+0x5910>
   16d84:	bl	11164 <__stack_chk_fail@plt>
   16d88:	tst	sl, #2
   16d8c:	mov	r8, r4
   16d90:	mov	r9, #1
   16d94:	beq	16cbc <__assert_fail@plt+0x58e8>
   16d98:	b	16c1c <__assert_fail@plt+0x5848>
   16d9c:	andeq	fp, r2, r8, lsl #30
   16da0:	andeq	sl, r1, r4, lsr pc
   16da4:	ldr	r3, [pc, #164]	; 16e50 <__assert_fail@plt+0x5a7c>
   16da8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16dac:	and	r3, r3, r0
   16db0:	cmp	r3, #0
   16db4:	mov	sl, r1
   16db8:	mov	r8, r2
   16dbc:	beq	16e24 <__assert_fail@plt+0x5a50>
   16dc0:	mov	r0, #24
   16dc4:	bl	1120c <malloc@plt>
   16dc8:	subs	r9, r0, #0
   16dcc:	beq	16e48 <__assert_fail@plt+0x5a74>
   16dd0:	ldrd	r4, [r8, #168]	; 0xa8
   16dd4:	ldrd	r6, [r8, #72]	; 0x48
   16dd8:	str	r8, [r9, #16]
   16ddc:	strd	r4, [r9, #8]
   16de0:	ldr	r0, [sl]
   16de4:	strd	r6, [r9]
   16de8:	mov	r1, r9
   16dec:	bl	1988c <fts_children@@Base+0x133c>
   16df0:	cmp	r9, r0
   16df4:	mov	r4, r0
   16df8:	beq	16e1c <__assert_fail@plt+0x5a48>
   16dfc:	mov	r0, r9
   16e00:	bl	11110 <free@plt>
   16e04:	cmp	r4, #0
   16e08:	beq	16e48 <__assert_fail@plt+0x5a74>
   16e0c:	ldr	r2, [r4, #16]
   16e10:	mov	r3, #2
   16e14:	str	r2, [r8]
   16e18:	strh	r3, [r8, #60]	; 0x3c
   16e1c:	mov	r0, #1
   16e20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e24:	ldr	r0, [r1]
   16e28:	add	r1, r2, #72	; 0x48
   16e2c:	bl	187b4 <fts_children@@Base+0x264>
   16e30:	cmp	r0, #0
   16e34:	beq	16e1c <__assert_fail@plt+0x5a48>
   16e38:	mov	r3, #2
   16e3c:	str	r8, [r8]
   16e40:	strh	r3, [r8, #60]	; 0x3c
   16e44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e48:	mov	r0, #0
   16e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e50:	andeq	r0, r0, r2, lsl #2
   16e54:	push	{r4, r5, r6, lr}
   16e58:	sub	sp, sp, #32
   16e5c:	ldr	r6, [pc, #192]	; 16f24 <__assert_fail@plt+0x5b50>
   16e60:	ldr	r3, [pc, #192]	; 16f28 <__assert_fail@plt+0x5b54>
   16e64:	ldr	ip, [r6]
   16e68:	and	r3, r3, r0
   16e6c:	cmp	r3, #0
   16e70:	str	ip, [sp, #28]
   16e74:	bne	16ecc <__assert_fail@plt+0x5af8>
   16e78:	ldr	r3, [r2, #4]
   16e7c:	cmp	r3, #0
   16e80:	beq	16eb4 <__assert_fail@plt+0x5ae0>
   16e84:	ldr	r0, [r3, #48]	; 0x30
   16e88:	cmp	r0, #0
   16e8c:	blt	16eb4 <__assert_fail@plt+0x5ae0>
   16e90:	ldr	ip, [r1]
   16e94:	ldrd	r0, [ip, #16]
   16e98:	orrs	r1, r0, r1
   16e9c:	beq	16f20 <__assert_fail@plt+0x5b4c>
   16ea0:	ldrd	r4, [ip]
   16ea4:	ldrd	r0, [r2, #168]	; 0xa8
   16ea8:	cmp	r5, r1
   16eac:	cmpeq	r4, r0
   16eb0:	beq	16ef8 <__assert_fail@plt+0x5b24>
   16eb4:	ldr	r2, [sp, #28]
   16eb8:	ldr	r3, [r6]
   16ebc:	cmp	r2, r3
   16ec0:	bne	16f1c <__assert_fail@plt+0x5b48>
   16ec4:	add	sp, sp, #32
   16ec8:	pop	{r4, r5, r6, pc}
   16ecc:	ldrd	r4, [r2, #72]	; 0x48
   16ed0:	ldrd	r2, [r2, #168]	; 0xa8
   16ed4:	ldr	r0, [r1]
   16ed8:	mov	r1, sp
   16edc:	strd	r4, [sp]
   16ee0:	strd	r2, [sp, #8]
   16ee4:	bl	198e4 <fts_children@@Base+0x1394>
   16ee8:	cmp	r0, #0
   16eec:	beq	16f20 <__assert_fail@plt+0x5b4c>
   16ef0:	bl	11110 <free@plt>
   16ef4:	b	16eb4 <__assert_fail@plt+0x5ae0>
   16ef8:	ldrd	r4, [r2, #72]	; 0x48
   16efc:	ldrd	r0, [ip, #8]
   16f00:	cmp	r1, r5
   16f04:	cmpeq	r0, r4
   16f08:	ldrdeq	r0, [r3, #72]	; 0x48
   16f0c:	ldrdeq	r2, [r3, #168]	; 0xa8
   16f10:	strdeq	r0, [ip, #8]
   16f14:	strdeq	r2, [ip]
   16f18:	b	16eb4 <__assert_fail@plt+0x5ae0>
   16f1c:	bl	11164 <__stack_chk_fail@plt>
   16f20:	bl	11398 <abort@plt>
   16f24:	andeq	fp, r2, r8, lsl #30
   16f28:	andeq	r0, r0, r2, lsl #2
   16f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f30:	mov	r5, r0
   16f34:	ldr	r9, [r0]
   16f38:	sub	sp, sp, #60	; 0x3c
   16f3c:	ldr	r0, [r9, #12]
   16f40:	str	r1, [sp, #36]	; 0x24
   16f44:	cmp	r0, #0
   16f48:	str	r0, [sp, #48]	; 0x30
   16f4c:	beq	17248 <__assert_fail@plt+0x5e74>
   16f50:	bl	11344 <dirfd@plt>
   16f54:	subs	r3, r0, #0
   16f58:	str	r3, [sp, #44]	; 0x2c
   16f5c:	blt	177d8 <__assert_fail@plt+0x6404>
   16f60:	ldr	r3, [r5, #44]	; 0x2c
   16f64:	cmp	r3, #0
   16f68:	beq	17520 <__assert_fail@plt+0x614c>
   16f6c:	ldr	r0, [r5, #48]	; 0x30
   16f70:	mvn	r3, #0
   16f74:	str	r3, [sp, #20]
   16f78:	mov	r3, #1
   16f7c:	str	r3, [sp, #52]	; 0x34
   16f80:	ldr	r2, [r9, #40]	; 0x28
   16f84:	ldr	r3, [r9, #28]
   16f88:	sub	r1, r2, #1
   16f8c:	str	r2, [sp, #4]
   16f90:	ldrb	r3, [r3, r1]
   16f94:	str	r1, [sp, #32]
   16f98:	mov	sl, #0
   16f9c:	cmp	r3, #47	; 0x2f
   16fa0:	addne	r3, r2, #1
   16fa4:	strne	r3, [sp, #4]
   16fa8:	strne	r2, [sp, #32]
   16fac:	ands	r0, r0, #4
   16fb0:	movne	r1, #47	; 0x2f
   16fb4:	ldrne	r3, [r5, #24]
   16fb8:	ldrne	r0, [sp, #32]
   16fbc:	streq	r0, [sp, #24]
   16fc0:	addne	r2, r3, r0
   16fc4:	strbne	r1, [r3, r0]
   16fc8:	addne	r3, r2, #1
   16fcc:	strne	r3, [sp, #24]
   16fd0:	ldr	r3, [r9, #48]	; 0x30
   16fd4:	ldr	fp, [r5, #36]	; 0x24
   16fd8:	ldr	r2, [sp, #4]
   16fdc:	add	r3, r3, #1
   16fe0:	str	sl, [sp, #40]	; 0x28
   16fe4:	sub	fp, fp, r2
   16fe8:	str	r3, [sp, #16]
   16fec:	str	sl, [sp, #28]
   16ff0:	mov	r7, sl
   16ff4:	str	sl, [sp, #8]
   16ff8:	str	r9, [sp, #12]
   16ffc:	b	1704c <__assert_fail@plt+0x5c78>
   17000:	mov	r3, #0
   17004:	str	r3, [r4, #88]	; 0x58
   17008:	mov	r2, #2
   1700c:	mov	r3, #0
   17010:	strd	r2, [r4, #120]	; 0x78
   17014:	ldr	r3, [sp, #8]
   17018:	cmp	r3, #0
   1701c:	mov	r3, #0
   17020:	str	r3, [r4, #8]
   17024:	ldr	r3, [pc, #2148]	; 17890 <__assert_fail@plt+0x64bc>
   17028:	strne	r4, [sl, #8]
   1702c:	streq	r4, [sp, #8]
   17030:	cmp	r7, r3
   17034:	beq	17150 <__assert_fail@plt+0x5d7c>
   17038:	ldr	r3, [sp, #20]
   1703c:	add	r7, r7, #1
   17040:	cmp	r7, r3
   17044:	bcs	173dc <__assert_fail@plt+0x6008>
   17048:	mov	sl, r4
   1704c:	ldr	r3, [sp, #12]
   17050:	ldr	r4, [r3, #12]
   17054:	cmp	r4, #0
   17058:	beq	17538 <__assert_fail@plt+0x6164>
   1705c:	bl	11284 <__errno_location@plt>
   17060:	mov	r3, #0
   17064:	mov	r8, r0
   17068:	mov	r0, r4
   1706c:	str	r3, [r8]
   17070:	bl	1132c <readdir64@plt>
   17074:	subs	r9, r0, #0
   17078:	beq	17600 <__assert_fail@plt+0x622c>
   1707c:	ldr	r3, [r5, #48]	; 0x30
   17080:	tst	r3, #32
   17084:	bne	17094 <__assert_fail@plt+0x5cc0>
   17088:	ldrb	r3, [r9, #19]
   1708c:	cmp	r3, #46	; 0x2e
   17090:	beq	171dc <__assert_fail@plt+0x5e08>
   17094:	add	r4, r9, #19
   17098:	mov	r0, r4
   1709c:	bl	1126c <strlen@plt>
   170a0:	mov	r1, r4
   170a4:	mov	r2, r0
   170a8:	mov	r6, r0
   170ac:	mov	r0, r5
   170b0:	bl	1655c <__assert_fail@plt+0x5188>
   170b4:	subs	r4, r0, #0
   170b8:	beq	17488 <__assert_fail@plt+0x60b4>
   170bc:	cmp	fp, r6
   170c0:	bls	17164 <__assert_fail@plt+0x5d90>
   170c4:	ldr	r3, [sp, #4]
   170c8:	adds	r6, r3, r6
   170cc:	bcs	17848 <__assert_fail@plt+0x6474>
   170d0:	ldr	r0, [r5, #48]	; 0x30
   170d4:	ldr	r1, [r5]
   170d8:	ldrd	r2, [r9]
   170dc:	ldr	ip, [sp, #16]
   170e0:	tst	r0, #4
   170e4:	str	r1, [r4, #4]
   170e8:	add	r1, r4, #176	; 0xb0
   170ec:	str	ip, [r4, #48]	; 0x30
   170f0:	strd	r2, [r4, #168]	; 0xa8
   170f4:	str	r6, [r4, #40]	; 0x28
   170f8:	streq	r1, [r4, #24]
   170fc:	bne	171bc <__assert_fail@plt+0x5de8>
   17100:	ldr	r3, [r5, #44]	; 0x2c
   17104:	cmp	r3, #0
   17108:	beq	17114 <__assert_fail@plt+0x5d40>
   1710c:	ands	r3, r0, #1024	; 0x400
   17110:	beq	17228 <__assert_fail@plt+0x5e54>
   17114:	ldrb	r2, [r9, #18]
   17118:	and	r0, r0, #24
   1711c:	cmp	r0, #24
   17120:	sub	r3, r2, #1
   17124:	beq	171fc <__assert_fail@plt+0x5e28>
   17128:	mov	r2, #11
   1712c:	cmp	r3, #11
   17130:	strh	r2, [r4, #60]	; 0x3c
   17134:	bhi	17000 <__assert_fail@plt+0x5c2c>
   17138:	ldr	r2, [pc, #1876]	; 17894 <__assert_fail@plt+0x64c0>
   1713c:	ldr	r1, [r2, r3, lsl #2]
   17140:	mov	r2, #2
   17144:	mov	r3, #0
   17148:	str	r1, [r4, #88]	; 0x58
   1714c:	b	17010 <__assert_fail@plt+0x5c3c>
   17150:	ldr	r6, [r5, #44]	; 0x2c
   17154:	cmp	r6, #0
   17158:	beq	17390 <__assert_fail@plt+0x5fbc>
   1715c:	ldr	r7, [pc, #1844]	; 17898 <__assert_fail@plt+0x64c4>
   17160:	b	17048 <__assert_fail@plt+0x5c74>
   17164:	ldr	r3, [sp, #32]
   17168:	add	r1, r5, #36	; 0x24
   1716c:	add	r2, r3, #2
   17170:	add	r2, r2, r6
   17174:	add	r0, r5, #24
   17178:	ldr	fp, [r5, #24]
   1717c:	bl	16a60 <__assert_fail@plt+0x568c>
   17180:	cmp	r0, #0
   17184:	beq	17488 <__assert_fail@plt+0x60b4>
   17188:	ldr	r3, [r5, #24]
   1718c:	cmp	r3, fp
   17190:	beq	17240 <__assert_fail@plt+0x5e6c>
   17194:	ldr	r2, [r5, #48]	; 0x30
   17198:	tst	r2, #4
   1719c:	ldrne	r2, [sp, #4]
   171a0:	addne	r3, r3, r2
   171a4:	strne	r3, [sp, #24]
   171a8:	ldr	fp, [r5, #36]	; 0x24
   171ac:	ldr	r3, [sp, #4]
   171b0:	str	r0, [sp, #28]
   171b4:	sub	fp, fp, r3
   171b8:	b	170c4 <__assert_fail@plt+0x5cf0>
   171bc:	ldr	r3, [r4, #28]
   171c0:	ldr	r2, [r4, #52]	; 0x34
   171c4:	str	r3, [r4, #24]
   171c8:	add	r2, r2, #1
   171cc:	ldr	r0, [sp, #24]
   171d0:	bl	11104 <memmove@plt>
   171d4:	ldr	r0, [r5, #48]	; 0x30
   171d8:	b	17100 <__assert_fail@plt+0x5d2c>
   171dc:	ldrb	r3, [r9, #20]
   171e0:	cmp	r3, #0
   171e4:	beq	171f4 <__assert_fail@plt+0x5e20>
   171e8:	ldrh	r3, [r9, #20]
   171ec:	cmp	r3, #46	; 0x2e
   171f0:	bne	17094 <__assert_fail@plt+0x5cc0>
   171f4:	mov	r4, sl
   171f8:	b	17048 <__assert_fail@plt+0x5c74>
   171fc:	tst	r2, #251	; 0xfb
   17200:	beq	17128 <__assert_fail@plt+0x5d54>
   17204:	mov	r2, #11
   17208:	cmp	r3, #11
   1720c:	strh	r2, [r4, #60]	; 0x3c
   17210:	bls	17470 <__assert_fail@plt+0x609c>
   17214:	mov	r3, #0
   17218:	str	r3, [r4, #88]	; 0x58
   1721c:	mov	r2, #1
   17220:	mov	r3, #0
   17224:	b	17010 <__assert_fail@plt+0x5c3c>
   17228:	mov	r2, r4
   1722c:	add	r1, r5, #48	; 0x30
   17230:	ldr	r0, [r5, #32]
   17234:	bl	168d4 <__assert_fail@plt+0x5500>
   17238:	strh	r0, [r4, #60]	; 0x3c
   1723c:	b	17014 <__assert_fail@plt+0x5c40>
   17240:	ldr	r0, [sp, #28]
   17244:	b	171a8 <__assert_fail@plt+0x5dd4>
   17248:	ldr	r3, [r5, #48]	; 0x30
   1724c:	ldr	r1, [r9, #24]
   17250:	and	r2, r3, #516	; 0x204
   17254:	cmp	r2, #512	; 0x200
   17258:	mvnne	r0, #99	; 0x63
   1725c:	ldreq	r0, [r5, #32]
   17260:	ands	ip, r3, #16
   17264:	beq	17274 <__assert_fail@plt+0x5ea0>
   17268:	tst	r3, #1
   1726c:	moveq	ip, #32768	; 0x8000
   17270:	bne	174d8 <__assert_fail@plt+0x6104>
   17274:	lsl	r2, r3, #7
   17278:	and	r2, r2, #262144	; 0x40000
   1727c:	orr	r2, r2, ip
   17280:	orr	r2, r2, #540672	; 0x84000
   17284:	orr	r2, r2, #2304	; 0x900
   17288:	bl	19b00 <fts_children@@Base+0x15b0>
   1728c:	subs	r3, r0, #0
   17290:	str	r3, [sp, #44]	; 0x2c
   17294:	movlt	r3, #0
   17298:	strlt	r3, [r9, #12]
   1729c:	blt	177ac <__assert_fail@plt+0x63d8>
   172a0:	bl	11338 <fdopendir@plt>
   172a4:	subs	r4, r0, #0
   172a8:	beq	17790 <__assert_fail@plt+0x63bc>
   172ac:	ldrh	r3, [r9, #60]	; 0x3c
   172b0:	str	r4, [r9, #12]
   172b4:	cmp	r3, #11
   172b8:	beq	17710 <__assert_fail@plt+0x633c>
   172bc:	ldr	r0, [r5, #48]	; 0x30
   172c0:	tst	r0, #256	; 0x100
   172c4:	bne	17684 <__assert_fail@plt+0x62b0>
   172c8:	ldr	r2, [r5, #44]	; 0x2c
   172cc:	ldr	r3, [pc, #1480]	; 1789c <__assert_fail@plt+0x64c8>
   172d0:	cmp	r2, #0
   172d4:	mvnne	r3, #0
   172d8:	str	r3, [sp, #20]
   172dc:	ldr	r3, [sp, #36]	; 0x24
   172e0:	cmp	r3, #2
   172e4:	beq	17674 <__assert_fail@plt+0x62a0>
   172e8:	ldr	r3, [r5, #48]	; 0x30
   172ec:	and	r3, r3, #56	; 0x38
   172f0:	cmp	r3, #24
   172f4:	beq	174e8 <__assert_fail@plt+0x6114>
   172f8:	ldr	r3, [sp, #36]	; 0x24
   172fc:	mov	r6, #1
   17300:	sub	r7, r3, #3
   17304:	clz	r7, r7
   17308:	lsr	r7, r7, #5
   1730c:	ldr	r3, [r5, #48]	; 0x30
   17310:	tst	r3, #512	; 0x200
   17314:	bne	1772c <__assert_fail@plt+0x6358>
   17318:	mov	r3, #0
   1731c:	ldr	r2, [sp, #44]	; 0x2c
   17320:	mov	r1, r9
   17324:	mov	r0, r5
   17328:	bl	16b98 <__assert_fail@plt+0x57c4>
   1732c:	cmp	r0, #0
   17330:	beq	17528 <__assert_fail@plt+0x6154>
   17334:	ldrh	r4, [r9, #62]	; 0x3e
   17338:	tst	r7, r6
   1733c:	ldr	r6, [r9, #12]
   17340:	orr	r4, r4, #1
   17344:	beq	17354 <__assert_fail@plt+0x5f80>
   17348:	bl	11284 <__errno_location@plt>
   1734c:	ldr	r3, [r0]
   17350:	str	r3, [r9, #32]
   17354:	strh	r4, [r9, #62]	; 0x3e
   17358:	mov	r0, r6
   1735c:	bl	113c8 <closedir@plt>
   17360:	ldr	r3, [sp, #44]	; 0x2c
   17364:	ldr	r0, [r5, #48]	; 0x30
   17368:	mvn	r2, r3
   1736c:	mov	r3, #0
   17370:	lsr	r2, r2, #31
   17374:	ands	r2, r2, r0, lsr #9
   17378:	str	r3, [r9, #12]
   1737c:	bne	17810 <__assert_fail@plt+0x643c>
   17380:	mov	r3, #0
   17384:	str	r3, [r9, #12]
   17388:	str	r3, [sp, #52]	; 0x34
   1738c:	b	16f80 <__assert_fail@plt+0x5bac>
   17390:	ldr	r1, [sp, #44]	; 0x2c
   17394:	ldr	r0, [sp, #12]
   17398:	bl	16634 <__assert_fail@plt+0x5260>
   1739c:	ldr	r3, [pc, #1276]	; 178a0 <__assert_fail@plt+0x64cc>
   173a0:	cmp	r0, r3
   173a4:	beq	173c8 <__assert_fail@plt+0x5ff4>
   173a8:	ldr	r3, [pc, #1268]	; 178a4 <__assert_fail@plt+0x64d0>
   173ac:	cmp	r0, r3
   173b0:	beq	173c8 <__assert_fail@plt+0x5ff4>
   173b4:	ldr	r3, [pc, #1260]	; 178a8 <__assert_fail@plt+0x64d4>
   173b8:	cmp	r0, r3
   173bc:	movne	r3, #1
   173c0:	strne	r3, [sp, #40]	; 0x28
   173c4:	bne	1715c <__assert_fail@plt+0x5d88>
   173c8:	ldr	r3, [sp, #20]
   173cc:	add	r7, r7, #1
   173d0:	cmp	r7, r3
   173d4:	str	r6, [sp, #40]	; 0x28
   173d8:	bcc	17048 <__assert_fail@plt+0x5c74>
   173dc:	ldr	r3, [sp, #28]
   173e0:	ldr	r9, [sp, #12]
   173e4:	cmp	r3, #0
   173e8:	beq	17548 <__assert_fail@plt+0x6174>
   173ec:	ldr	r3, [r5, #4]
   173f0:	ldr	r1, [r5, #24]
   173f4:	cmp	r3, #0
   173f8:	beq	17428 <__assert_fail@plt+0x6054>
   173fc:	ldr	r2, [r3, #24]
   17400:	add	r0, r3, #176	; 0xb0
   17404:	cmp	r2, r0
   17408:	ldrne	r0, [r3, #28]
   1740c:	str	r1, [r3, #28]
   17410:	subne	r2, r2, r0
   17414:	addne	r2, r1, r2
   17418:	strne	r2, [r3, #24]
   1741c:	ldr	r3, [r3, #8]
   17420:	cmp	r3, #0
   17424:	bne	173fc <__assert_fail@plt+0x6028>
   17428:	ldr	r3, [sp, #8]
   1742c:	b	1745c <__assert_fail@plt+0x6088>
   17430:	ldr	r2, [r3, #24]
   17434:	cmp	r2, r0
   17438:	ldrne	r0, [r3, #28]
   1743c:	str	r1, [r3, #28]
   17440:	subne	r2, r2, r0
   17444:	addne	r2, r1, r2
   17448:	strne	r2, [r3, #24]
   1744c:	ldr	r2, [r3, #8]
   17450:	cmp	r2, #0
   17454:	ldreq	r2, [r3, #4]
   17458:	mov	r3, r2
   1745c:	ldr	r2, [r3, #48]	; 0x30
   17460:	add	r0, r3, #176	; 0xb0
   17464:	cmp	r2, #0
   17468:	bge	17430 <__assert_fail@plt+0x605c>
   1746c:	b	17548 <__assert_fail@plt+0x6174>
   17470:	ldr	r2, [pc, #1052]	; 17894 <__assert_fail@plt+0x64c0>
   17474:	ldr	r1, [r2, r3, lsl #2]
   17478:	mov	r2, #1
   1747c:	mov	r3, #0
   17480:	str	r1, [r4, #88]	; 0x58
   17484:	b	17010 <__assert_fail@plt+0x5c3c>
   17488:	ldr	r9, [sp, #12]
   1748c:	mov	r0, r4
   17490:	ldr	r4, [r8]
   17494:	bl	11110 <free@plt>
   17498:	ldr	r0, [sp, #8]
   1749c:	bl	165d0 <__assert_fail@plt+0x51fc>
   174a0:	ldr	r0, [r9, #12]
   174a4:	bl	113c8 <closedir@plt>
   174a8:	ldr	r3, [r5, #48]	; 0x30
   174ac:	mov	r2, #0
   174b0:	orr	r3, r3, #16384	; 0x4000
   174b4:	mov	r1, #7
   174b8:	str	r2, [r9, #12]
   174bc:	strh	r1, [r9, #60]	; 0x3c
   174c0:	str	r2, [sp, #8]
   174c4:	str	r3, [r5, #48]	; 0x30
   174c8:	str	r4, [r8]
   174cc:	ldr	r0, [sp, #8]
   174d0:	add	sp, sp, #60	; 0x3c
   174d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d8:	ldr	ip, [r9, #48]	; 0x30
   174dc:	cmp	ip, #0
   174e0:	movne	ip, #32768	; 0x8000
   174e4:	b	17274 <__assert_fail@plt+0x5ea0>
   174e8:	ldr	r3, [r9, #92]	; 0x5c
   174ec:	cmp	r3, #2
   174f0:	bne	172f8 <__assert_fail@plt+0x5f24>
   174f4:	ldr	r1, [sp, #44]	; 0x2c
   174f8:	mov	r0, r9
   174fc:	bl	16768 <__assert_fail@plt+0x5394>
   17500:	cmp	r0, #0
   17504:	beq	172f8 <__assert_fail@plt+0x5f24>
   17508:	ldr	r3, [sp, #36]	; 0x24
   1750c:	cmp	r3, #3
   17510:	bne	17674 <__assert_fail@plt+0x62a0>
   17514:	mov	r6, #0
   17518:	mov	r7, #1
   1751c:	b	1730c <__assert_fail@plt+0x5f38>
   17520:	ldr	r3, [pc, #884]	; 1789c <__assert_fail@plt+0x64c8>
   17524:	str	r3, [sp, #20]
   17528:	mov	r3, #1
   1752c:	str	r3, [sp, #52]	; 0x34
   17530:	ldr	r0, [r5, #48]	; 0x30
   17534:	b	16f80 <__assert_fail@plt+0x5bac>
   17538:	mov	r9, r3
   1753c:	ldr	r3, [sp, #28]
   17540:	cmp	r3, #0
   17544:	bne	173ec <__assert_fail@plt+0x6018>
   17548:	ldr	r3, [r5, #48]	; 0x30
   1754c:	tst	r3, #4
   17550:	beq	1757c <__assert_fail@plt+0x61a8>
   17554:	ldr	r3, [r5, #36]	; 0x24
   17558:	ldr	r2, [sp, #4]
   1755c:	cmp	r7, #0
   17560:	cmpne	r3, r2
   17564:	ldreq	r3, [sp, #24]
   17568:	subeq	r3, r3, #1
   1756c:	streq	r3, [sp, #24]
   17570:	ldr	r2, [sp, #24]
   17574:	mov	r3, #0
   17578:	strb	r3, [r2]
   1757c:	ldrd	r2, [sp, #48]	; 0x30
   17580:	cmp	r2, #0
   17584:	movne	r3, #0
   17588:	cmp	r3, #0
   1758c:	beq	175c4 <__assert_fail@plt+0x61f0>
   17590:	ldr	r3, [sp, #36]	; 0x24
   17594:	cmp	r7, #0
   17598:	cmpne	r3, #1
   1759c:	bne	175cc <__assert_fail@plt+0x61f8>
   175a0:	ldr	r3, [r9, #48]	; 0x30
   175a4:	cmp	r3, #0
   175a8:	bne	17770 <__assert_fail@plt+0x639c>
   175ac:	mov	r0, r5
   175b0:	bl	16884 <__assert_fail@plt+0x54b0>
   175b4:	adds	r0, r0, #0
   175b8:	movne	r0, #1
   175bc:	cmp	r0, #0
   175c0:	bne	17820 <__assert_fail@plt+0x644c>
   175c4:	cmp	r7, #0
   175c8:	beq	176d4 <__assert_fail@plt+0x6300>
   175cc:	ldr	r3, [sp, #40]	; 0x28
   175d0:	cmp	r3, #0
   175d4:	bne	17644 <__assert_fail@plt+0x6270>
   175d8:	ldr	r3, [r5, #44]	; 0x2c
   175dc:	cmp	r3, #0
   175e0:	cmpne	r7, #1
   175e4:	beq	174cc <__assert_fail@plt+0x60f8>
   175e8:	mov	r2, r7
   175ec:	ldr	r1, [sp, #8]
   175f0:	mov	r0, r5
   175f4:	add	sp, sp, #60	; 0x3c
   175f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175fc:	b	16484 <__assert_fail@plt+0x50b0>
   17600:	ldr	r3, [r8]
   17604:	ldr	r9, [sp, #12]
   17608:	cmp	r3, #0
   1760c:	beq	17628 <__assert_fail@plt+0x6254>
   17610:	ldr	r2, [sp, #48]	; 0x30
   17614:	str	r3, [r9, #32]
   17618:	orrs	r2, r2, r7
   1761c:	moveq	r2, #4
   17620:	movne	r2, #7
   17624:	strh	r2, [r9, #60]	; 0x3c
   17628:	ldr	r0, [r9, #12]
   1762c:	cmp	r0, #0
   17630:	beq	1753c <__assert_fail@plt+0x6168>
   17634:	bl	113c8 <closedir@plt>
   17638:	mov	r3, #0
   1763c:	str	r3, [r9, #12]
   17640:	b	1753c <__assert_fail@plt+0x6168>
   17644:	ldr	r3, [pc, #608]	; 178ac <__assert_fail@plt+0x64d8>
   17648:	mov	r2, r7
   1764c:	str	r3, [r5, #44]	; 0x2c
   17650:	ldr	r1, [sp, #8]
   17654:	mov	r0, r5
   17658:	bl	16484 <__assert_fail@plt+0x50b0>
   1765c:	mov	r3, #0
   17660:	str	r3, [r5, #44]	; 0x2c
   17664:	str	r0, [sp, #8]
   17668:	ldr	r0, [sp, #8]
   1766c:	add	sp, sp, #60	; 0x3c
   17670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17674:	mov	r3, #0
   17678:	str	r3, [sp, #52]	; 0x34
   1767c:	ldr	r0, [r5, #48]	; 0x30
   17680:	b	16f80 <__assert_fail@plt+0x5bac>
   17684:	add	r4, r5, #56	; 0x38
   17688:	mov	r1, r4
   1768c:	mov	r2, r9
   17690:	bl	16e54 <__assert_fail@plt+0x5a80>
   17694:	mov	r3, #0
   17698:	mov	r2, r9
   1769c:	add	r1, r5, #48	; 0x30
   176a0:	ldr	r0, [r5, #32]
   176a4:	bl	168d4 <__assert_fail@plt+0x5500>
   176a8:	mov	r1, r4
   176ac:	mov	r2, r9
   176b0:	ldr	r0, [r5, #48]	; 0x30
   176b4:	bl	16da4 <__assert_fail@plt+0x59d0>
   176b8:	subs	r4, r0, #0
   176bc:	bne	172c8 <__assert_fail@plt+0x5ef4>
   176c0:	bl	11284 <__errno_location@plt>
   176c4:	mov	r3, #12
   176c8:	str	r4, [sp, #8]
   176cc:	str	r3, [r0]
   176d0:	b	174cc <__assert_fail@plt+0x60f8>
   176d4:	ldr	r3, [sp, #36]	; 0x24
   176d8:	cmp	r3, #3
   176dc:	bne	176f4 <__assert_fail@plt+0x6320>
   176e0:	ldrh	r3, [r9, #60]	; 0x3c
   176e4:	cmp	r3, #4
   176e8:	cmpne	r3, #7
   176ec:	movne	r3, #6
   176f0:	strhne	r3, [r9, #60]	; 0x3c
   176f4:	ldr	r0, [sp, #8]
   176f8:	bl	165d0 <__assert_fail@plt+0x51fc>
   176fc:	mov	r3, #0
   17700:	str	r3, [sp, #8]
   17704:	ldr	r0, [sp, #8]
   17708:	add	sp, sp, #60	; 0x3c
   1770c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17710:	mov	r3, #0
   17714:	mov	r2, r9
   17718:	add	r1, r5, #48	; 0x30
   1771c:	ldr	r0, [r5, #32]
   17720:	bl	168d4 <__assert_fail@plt+0x5500>
   17724:	strh	r0, [r9, #60]	; 0x3c
   17728:	b	172c8 <__assert_fail@plt+0x5ef4>
   1772c:	ldr	r0, [sp, #44]	; 0x2c
   17730:	mov	r2, #3
   17734:	ldr	r1, [pc, #372]	; 178b0 <__assert_fail@plt+0x64dc>
   17738:	bl	19c40 <fts_children@@Base+0x16f0>
   1773c:	subs	r3, r0, #0
   17740:	str	r3, [sp, #44]	; 0x2c
   17744:	bge	17318 <__assert_fail@plt+0x5f44>
   17748:	ldrh	r4, [r9, #62]	; 0x3e
   1774c:	tst	r7, r6
   17750:	ldr	r6, [r9, #12]
   17754:	orr	r4, r4, #1
   17758:	bne	17348 <__assert_fail@plt+0x5f74>
   1775c:	strh	r4, [r9, #62]	; 0x3e
   17760:	mov	r0, r6
   17764:	bl	113c8 <closedir@plt>
   17768:	ldr	r0, [r5, #48]	; 0x30
   1776c:	b	17380 <__assert_fail@plt+0x5fac>
   17770:	ldr	r3, [pc, #316]	; 178b4 <__assert_fail@plt+0x64e0>
   17774:	mvn	r2, #0
   17778:	ldr	r1, [r9, #4]
   1777c:	mov	r0, r5
   17780:	bl	16b98 <__assert_fail@plt+0x57c4>
   17784:	adds	r0, r0, #0
   17788:	movne	r0, #1
   1778c:	b	175bc <__assert_fail@plt+0x61e8>
   17790:	bl	11284 <__errno_location@plt>
   17794:	mov	r5, r0
   17798:	ldr	r0, [sp, #44]	; 0x2c
   1779c:	ldr	r6, [r5]
   177a0:	bl	113a4 <close@plt>
   177a4:	str	r6, [r5]
   177a8:	str	r4, [r9, #12]
   177ac:	ldr	r3, [sp, #36]	; 0x24
   177b0:	cmp	r3, #3
   177b4:	bne	176fc <__assert_fail@plt+0x6328>
   177b8:	mov	r3, #4
   177bc:	strh	r3, [r9, #60]	; 0x3c
   177c0:	bl	11284 <__errno_location@plt>
   177c4:	mov	r3, #0
   177c8:	str	r3, [sp, #8]
   177cc:	ldr	r3, [r0]
   177d0:	str	r3, [r9, #32]
   177d4:	b	174cc <__assert_fail@plt+0x60f8>
   177d8:	ldr	r0, [r9, #12]
   177dc:	bl	113c8 <closedir@plt>
   177e0:	ldr	r3, [sp, #36]	; 0x24
   177e4:	mov	r4, #0
   177e8:	cmp	r3, #3
   177ec:	str	r4, [r9, #12]
   177f0:	bne	176fc <__assert_fail@plt+0x6328>
   177f4:	mov	r3, #4
   177f8:	strh	r3, [r9, #60]	; 0x3c
   177fc:	bl	11284 <__errno_location@plt>
   17800:	str	r4, [sp, #8]
   17804:	ldr	r3, [r0]
   17808:	str	r3, [r9, #32]
   1780c:	b	174cc <__assert_fail@plt+0x60f8>
   17810:	ldr	r0, [sp, #44]	; 0x2c
   17814:	bl	113a4 <close@plt>
   17818:	ldr	r0, [r5, #48]	; 0x30
   1781c:	b	17380 <__assert_fail@plt+0x5fac>
   17820:	ldr	r3, [r5, #48]	; 0x30
   17824:	mov	r2, #7
   17828:	orr	r3, r3, #16384	; 0x4000
   1782c:	strh	r2, [r9, #60]	; 0x3c
   17830:	ldr	r0, [sp, #8]
   17834:	str	r3, [r5, #48]	; 0x30
   17838:	bl	165d0 <__assert_fail@plt+0x51fc>
   1783c:	mov	r3, #0
   17840:	str	r3, [sp, #8]
   17844:	b	174cc <__assert_fail@plt+0x60f8>
   17848:	ldr	r9, [sp, #12]
   1784c:	mov	r0, r4
   17850:	bl	11110 <free@plt>
   17854:	ldr	r0, [sp, #8]
   17858:	bl	165d0 <__assert_fail@plt+0x51fc>
   1785c:	ldr	r0, [r9, #12]
   17860:	bl	113c8 <closedir@plt>
   17864:	ldr	r3, [r5, #48]	; 0x30
   17868:	mov	r2, #0
   1786c:	orr	r3, r3, #16384	; 0x4000
   17870:	mov	r0, #7
   17874:	mov	r1, #36	; 0x24
   17878:	str	r2, [r9, #12]
   1787c:	strh	r0, [r9, #60]	; 0x3c
   17880:	str	r2, [sp, #8]
   17884:	str	r3, [r5, #48]	; 0x30
   17888:	str	r1, [r8]
   1788c:	b	174cc <__assert_fail@plt+0x60f8>
   17890:	andeq	r2, r0, r0, lsl r7
   17894:	andeq	fp, r1, ip, lsl r7
   17898:	andeq	r2, r0, r1, lsl r7
   1789c:	andeq	r8, r1, r0, lsr #13
   178a0:	andeq	r6, r0, r9, ror #18
   178a4:			; <UNDEFINED> instruction: 0x01021994
   178a8:			; <UNDEFINED> instruction: 0xff534d42
   178ac:	andeq	r6, r1, r4, asr r4
   178b0:	andeq	r0, r0, r6, lsl #8
   178b4:	andeq	sl, r1, r4, lsr pc

000178b8 <fts_open@@Base>:
   178b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178bc:	bic	r5, r1, #8128	; 0x1fc0
   178c0:	bic	r5, r5, #63	; 0x3f
   178c4:	cmp	r5, #0
   178c8:	sub	sp, sp, #20
   178cc:	bne	17bf4 <fts_open@@Base+0x33c>
   178d0:	and	r3, r1, #516	; 0x204
   178d4:	cmp	r3, #516	; 0x204
   178d8:	mov	r7, r1
   178dc:	beq	17b88 <fts_open@@Base+0x2d0>
   178e0:	ands	r5, r1, #18
   178e4:	beq	17b88 <fts_open@@Base+0x2d0>
   178e8:	mov	r6, r0
   178ec:	mov	r1, #1
   178f0:	mov	r0, #96	; 0x60
   178f4:	mov	r9, r2
   178f8:	bl	110b0 <calloc@plt>
   178fc:	subs	r5, r0, #0
   17900:	beq	17b4c <fts_open@@Base+0x294>
   17904:	tst	r7, #2
   17908:	bicne	r3, r7, #512	; 0x200
   1790c:	orrne	r3, r3, #4
   17910:	strne	r3, [r5, #48]	; 0x30
   17914:	ldr	r3, [r6]
   17918:	streq	r7, [r5, #48]	; 0x30
   1791c:	mvn	r2, #99	; 0x63
   17920:	cmp	r3, #0
   17924:	str	r9, [r5, #44]	; 0x2c
   17928:	str	r2, [r5, #32]
   1792c:	beq	17c10 <fts_open@@Base+0x358>
   17930:	mov	r8, r6
   17934:	mov	r4, #0
   17938:	mov	r0, r3
   1793c:	bl	1126c <strlen@plt>
   17940:	ldr	r3, [r8, #4]!
   17944:	cmp	r4, r0
   17948:	movcc	r4, r0
   1794c:	cmp	r3, #0
   17950:	bne	17938 <fts_open@@Base+0x80>
   17954:	add	r2, r4, #1
   17958:	cmp	r2, #4096	; 0x1000
   1795c:	movcc	r2, #4096	; 0x1000
   17960:	add	r1, r5, #36	; 0x24
   17964:	add	r0, r5, #24
   17968:	bl	16a60 <__assert_fail@plt+0x568c>
   1796c:	subs	fp, r0, #0
   17970:	beq	17b70 <fts_open@@Base+0x2b8>
   17974:	ldr	sl, [r6]
   17978:	cmp	sl, #0
   1797c:	beq	17ba0 <fts_open@@Base+0x2e8>
   17980:	mov	r2, #0
   17984:	ldr	r1, [pc, #704]	; 17c4c <fts_open@@Base+0x394>
   17988:	mov	r0, r5
   1798c:	bl	1655c <__assert_fail@plt+0x5188>
   17990:	subs	sl, r0, #0
   17994:	beq	17b68 <fts_open@@Base+0x2b0>
   17998:	mvn	r3, #0
   1799c:	cmp	r9, #0
   179a0:	str	r3, [sl, #48]	; 0x30
   179a4:	str	r3, [sl, #56]	; 0x38
   179a8:	ldr	r4, [r6]
   179ac:	beq	179bc <fts_open@@Base+0x104>
   179b0:	ldr	fp, [r5, #48]	; 0x30
   179b4:	lsr	fp, fp, #10
   179b8:	and	fp, fp, #1
   179bc:	cmp	r4, #0
   179c0:	beq	17c44 <fts_open@@Base+0x38c>
   179c4:	lsr	r7, r7, #12
   179c8:	mov	r3, #0
   179cc:	eor	r7, r7, #1
   179d0:	and	r2, r7, #1
   179d4:	str	r3, [sp, #8]
   179d8:	mov	r8, r3
   179dc:	mov	r7, r3
   179e0:	add	r3, r5, #48	; 0x30
   179e4:	str	r2, [sp, #4]
   179e8:	str	r3, [sp, #12]
   179ec:	b	17a24 <fts_open@@Base+0x16c>
   179f0:	cmp	r9, r1
   179f4:	mov	r0, #2
   179f8:	mov	r1, #0
   179fc:	mov	r3, #11
   17a00:	strd	r0, [r4, #120]	; 0x78
   17a04:	strh	r3, [r4, #60]	; 0x3c
   17a08:	beq	17be0 <fts_open@@Base+0x328>
   17a0c:	str	r7, [r4, #8]
   17a10:	mov	r7, r4
   17a14:	ldr	r4, [r6, #4]!
   17a18:	add	r8, r8, #1
   17a1c:	cmp	r4, #0
   17a20:	beq	17ad0 <fts_open@@Base+0x218>
   17a24:	mov	r0, r4
   17a28:	bl	1126c <strlen@plt>
   17a2c:	ldr	r3, [sp, #4]
   17a30:	cmp	r0, #2
   17a34:	movls	r3, #0
   17a38:	andhi	r3, r3, #1
   17a3c:	cmp	r3, #0
   17a40:	mov	r2, r0
   17a44:	bne	17bb0 <fts_open@@Base+0x2f8>
   17a48:	mov	r1, r4
   17a4c:	mov	r0, r5
   17a50:	bl	1655c <__assert_fail@plt+0x5188>
   17a54:	subs	r4, r0, #0
   17a58:	beq	17b58 <fts_open@@Base+0x2a0>
   17a5c:	cmp	r7, #0
   17a60:	moveq	r3, #0
   17a64:	andne	r3, fp, #1
   17a68:	add	r2, r4, #176	; 0xb0
   17a6c:	mov	r1, #0
   17a70:	cmp	r3, #0
   17a74:	str	r1, [r4, #48]	; 0x30
   17a78:	str	sl, [r4, #4]
   17a7c:	str	r2, [r4, #24]
   17a80:	bne	179f0 <fts_open@@Base+0x138>
   17a84:	mov	r2, r4
   17a88:	ldr	r1, [sp, #12]
   17a8c:	ldr	r0, [r5, #32]
   17a90:	bl	168d4 <__assert_fail@plt+0x5500>
   17a94:	cmp	r9, #0
   17a98:	strh	r0, [r4, #60]	; 0x3c
   17a9c:	bne	17a0c <fts_open@@Base+0x154>
   17aa0:	cmp	r7, #0
   17aa4:	str	r9, [r4, #8]
   17aa8:	streq	r4, [sp, #8]
   17aac:	moveq	r7, r4
   17ab0:	beq	17a14 <fts_open@@Base+0x15c>
   17ab4:	ldr	r3, [sp, #8]
   17ab8:	str	r4, [sp, #8]
   17abc:	str	r4, [r3, #8]
   17ac0:	ldr	r4, [r6, #4]!
   17ac4:	add	r8, r8, #1
   17ac8:	cmp	r4, #0
   17acc:	bne	17a24 <fts_open@@Base+0x16c>
   17ad0:	cmp	r9, #0
   17ad4:	cmpne	r8, #1
   17ad8:	bls	17af0 <fts_open@@Base+0x238>
   17adc:	mov	r1, r7
   17ae0:	mov	r2, r8
   17ae4:	mov	r0, r5
   17ae8:	bl	16484 <__assert_fail@plt+0x50b0>
   17aec:	mov	r7, r0
   17af0:	mov	r2, #0
   17af4:	ldr	r1, [pc, #336]	; 17c4c <fts_open@@Base+0x394>
   17af8:	mov	r0, r5
   17afc:	bl	1655c <__assert_fail@plt+0x5188>
   17b00:	cmp	r0, #0
   17b04:	str	r0, [r5]
   17b08:	beq	17b58 <fts_open@@Base+0x2a0>
   17b0c:	mov	r2, #1
   17b10:	mov	r3, #9
   17b14:	str	r7, [r0, #8]
   17b18:	str	r2, [r0, #48]	; 0x30
   17b1c:	strh	r3, [r0, #60]	; 0x3c
   17b20:	add	r1, r5, #56	; 0x38
   17b24:	ldr	r0, [r5, #48]	; 0x30
   17b28:	bl	16adc <__assert_fail@plt+0x5708>
   17b2c:	cmp	r0, #0
   17b30:	beq	17b58 <fts_open@@Base+0x2a0>
   17b34:	ldr	r1, [r5, #48]	; 0x30
   17b38:	tst	r1, #516	; 0x204
   17b3c:	beq	17c18 <fts_open@@Base+0x360>
   17b40:	mvn	r1, #0
   17b44:	add	r0, r5, #60	; 0x3c
   17b48:	bl	19a0c <fts_children@@Base+0x14bc>
   17b4c:	mov	r0, r5
   17b50:	add	sp, sp, #20
   17b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b58:	mov	r0, r7
   17b5c:	bl	165d0 <__assert_fail@plt+0x51fc>
   17b60:	mov	r0, sl
   17b64:	bl	11110 <free@plt>
   17b68:	ldr	r0, [r5, #24]
   17b6c:	bl	11110 <free@plt>
   17b70:	mov	r0, r5
   17b74:	bl	11110 <free@plt>
   17b78:	mov	r5, #0
   17b7c:	mov	r0, r5
   17b80:	add	sp, sp, #20
   17b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b88:	bl	11284 <__errno_location@plt>
   17b8c:	mov	r3, #22
   17b90:	str	r3, [r0]
   17b94:	mov	r0, r5
   17b98:	add	sp, sp, #20
   17b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ba0:	cmp	r9, #0
   17ba4:	beq	17c3c <fts_open@@Base+0x384>
   17ba8:	mov	r4, sl
   17bac:	b	179b0 <fts_open@@Base+0xf8>
   17bb0:	sub	r1, r0, #1
   17bb4:	add	r3, r4, r1
   17bb8:	ldrb	r1, [r4, r1]
   17bbc:	cmp	r1, #47	; 0x2f
   17bc0:	bne	17a48 <fts_open@@Base+0x190>
   17bc4:	ldrb	r1, [r3, #-1]!
   17bc8:	cmp	r1, #47	; 0x2f
   17bcc:	bne	17a48 <fts_open@@Base+0x190>
   17bd0:	sub	r2, r2, #1
   17bd4:	cmp	r2, #1
   17bd8:	bne	17bc4 <fts_open@@Base+0x30c>
   17bdc:	b	17a48 <fts_open@@Base+0x190>
   17be0:	ldr	r3, [sp, #8]
   17be4:	str	r9, [r4, #8]
   17be8:	str	r4, [sp, #8]
   17bec:	str	r4, [r3, #8]
   17bf0:	b	17ac0 <fts_open@@Base+0x208>
   17bf4:	bl	11284 <__errno_location@plt>
   17bf8:	mov	r5, #0
   17bfc:	mov	r3, #22
   17c00:	str	r3, [r0]
   17c04:	mov	r0, r5
   17c08:	add	sp, sp, #20
   17c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c10:	mov	r2, #4096	; 0x1000
   17c14:	b	17960 <fts_open@@Base+0xa8>
   17c18:	ldr	r2, [pc, #48]	; 17c50 <fts_open@@Base+0x398>
   17c1c:	ldr	r0, [r5, #32]
   17c20:	bl	16b5c <__assert_fail@plt+0x5788>
   17c24:	cmp	r0, #0
   17c28:	str	r0, [r5, #28]
   17c2c:	ldrlt	r3, [r5, #48]	; 0x30
   17c30:	orrlt	r3, r3, #4
   17c34:	strlt	r3, [r5, #48]	; 0x30
   17c38:	b	17b40 <fts_open@@Base+0x288>
   17c3c:	mov	r7, sl
   17c40:	b	17af0 <fts_open@@Base+0x238>
   17c44:	mov	r7, r4
   17c48:	b	17af0 <fts_open@@Base+0x238>
   17c4c:	strdeq	fp, [r1], -r4
   17c50:	andeq	sl, r1, r0, lsr pc

00017c54 <fts_close@@Base>:
   17c54:	ldr	r3, [r0]
   17c58:	push	{r4, r5, r6, lr}
   17c5c:	cmp	r3, #0
   17c60:	mov	r5, r0
   17c64:	beq	17ca0 <fts_close@@Base+0x4c>
   17c68:	ldr	r2, [r3, #48]	; 0x30
   17c6c:	cmp	r2, #0
   17c70:	blt	17db8 <fts_close@@Base+0x164>
   17c74:	ldr	r4, [r3, #8]
   17c78:	mov	r0, r3
   17c7c:	cmp	r4, #0
   17c80:	ldreq	r4, [r3, #4]
   17c84:	bl	11110 <free@plt>
   17c88:	mov	r3, r4
   17c8c:	ldr	r2, [r4, #48]	; 0x30
   17c90:	cmp	r2, #0
   17c94:	bge	17c74 <fts_close@@Base+0x20>
   17c98:	mov	r0, r4
   17c9c:	bl	11110 <free@plt>
   17ca0:	ldr	r0, [r5, #4]
   17ca4:	cmp	r0, #0
   17ca8:	beq	17cb0 <fts_close@@Base+0x5c>
   17cac:	bl	165d0 <__assert_fail@plt+0x51fc>
   17cb0:	ldr	r0, [r5, #8]
   17cb4:	bl	11110 <free@plt>
   17cb8:	ldr	r0, [r5, #24]
   17cbc:	bl	11110 <free@plt>
   17cc0:	ldr	r3, [r5, #48]	; 0x30
   17cc4:	tst	r3, #512	; 0x200
   17cc8:	bne	17d2c <fts_close@@Base+0xd8>
   17ccc:	tst	r3, #4
   17cd0:	beq	17d58 <fts_close@@Base+0x104>
   17cd4:	mov	r4, #0
   17cd8:	add	r0, r5, #60	; 0x3c
   17cdc:	bl	16604 <__assert_fail@plt+0x5230>
   17ce0:	ldr	r0, [r5, #52]	; 0x34
   17ce4:	cmp	r0, #0
   17ce8:	beq	17cf0 <fts_close@@Base+0x9c>
   17cec:	bl	19460 <fts_children@@Base+0xf10>
   17cf0:	ldr	r2, [r5, #48]	; 0x30
   17cf4:	ldr	r3, [pc, #212]	; 17dd0 <fts_close@@Base+0x17c>
   17cf8:	ldr	r0, [r5, #56]	; 0x38
   17cfc:	and	r3, r3, r2
   17d00:	cmp	r3, #0
   17d04:	beq	17d50 <fts_close@@Base+0xfc>
   17d08:	cmp	r0, #0
   17d0c:	beq	17d14 <fts_close@@Base+0xc0>
   17d10:	bl	19460 <fts_children@@Base+0xf10>
   17d14:	mov	r0, r5
   17d18:	bl	11110 <free@plt>
   17d1c:	cmp	r4, #0
   17d20:	bne	17dc0 <fts_close@@Base+0x16c>
   17d24:	mov	r0, r4
   17d28:	pop	{r4, r5, r6, pc}
   17d2c:	ldr	r0, [r5, #32]
   17d30:	cmp	r0, #0
   17d34:	blt	17cd4 <fts_close@@Base+0x80>
   17d38:	bl	113a4 <close@plt>
   17d3c:	cmp	r0, #0
   17d40:	beq	17cd4 <fts_close@@Base+0x80>
   17d44:	bl	11284 <__errno_location@plt>
   17d48:	ldr	r4, [r0]
   17d4c:	b	17cd8 <fts_close@@Base+0x84>
   17d50:	bl	11110 <free@plt>
   17d54:	b	17d14 <fts_close@@Base+0xc0>
   17d58:	ldr	r0, [r5, #28]
   17d5c:	bl	11350 <fchdir@plt>
   17d60:	cmp	r0, #0
   17d64:	bne	17d88 <fts_close@@Base+0x134>
   17d68:	ldr	r0, [r5, #28]
   17d6c:	bl	113a4 <close@plt>
   17d70:	cmp	r0, #0
   17d74:	beq	17cd4 <fts_close@@Base+0x80>
   17d78:	bl	11284 <__errno_location@plt>
   17d7c:	mov	r6, r0
   17d80:	ldr	r4, [r6]
   17d84:	b	17cd8 <fts_close@@Base+0x84>
   17d88:	bl	11284 <__errno_location@plt>
   17d8c:	mov	r6, r0
   17d90:	ldr	r0, [r5, #28]
   17d94:	ldr	r4, [r6]
   17d98:	bl	113a4 <close@plt>
   17d9c:	clz	r3, r4
   17da0:	lsr	r3, r3, #5
   17da4:	cmp	r0, #0
   17da8:	moveq	r3, #0
   17dac:	cmp	r3, #0
   17db0:	beq	17cd8 <fts_close@@Base+0x84>
   17db4:	b	17d80 <fts_close@@Base+0x12c>
   17db8:	mov	r4, r3
   17dbc:	b	17c98 <fts_close@@Base+0x44>
   17dc0:	bl	11284 <__errno_location@plt>
   17dc4:	str	r4, [r0]
   17dc8:	mvn	r4, #0
   17dcc:	b	17d24 <fts_close@@Base+0xd0>
   17dd0:	andeq	r0, r0, r2, lsl #2

00017dd4 <fts_read@@Base>:
   17dd4:	push	{r4, r5, r6, r7, r8, lr}
   17dd8:	ldr	r4, [r0]
   17ddc:	cmp	r4, #0
   17de0:	beq	17f00 <fts_read@@Base+0x12c>
   17de4:	ldr	r1, [r0, #48]	; 0x30
   17de8:	ands	r3, r1, #16384	; 0x4000
   17dec:	bne	17f00 <fts_read@@Base+0x12c>
   17df0:	ldrh	r2, [r4, #64]	; 0x40
   17df4:	mov	r8, r0
   17df8:	mov	r0, #3
   17dfc:	cmp	r2, #1
   17e00:	strh	r0, [r4, #64]	; 0x40
   17e04:	beq	181bc <fts_read@@Base+0x3e8>
   17e08:	cmp	r2, #2
   17e0c:	ldrh	r3, [r4, #60]	; 0x3c
   17e10:	beq	17f0c <fts_read@@Base+0x138>
   17e14:	cmp	r3, #1
   17e18:	bne	17e48 <fts_read@@Base+0x74>
   17e1c:	b	17fb8 <fts_read@@Base+0x1e4>
   17e20:	mov	r0, r4
   17e24:	str	r5, [r8]
   17e28:	bl	11110 <free@plt>
   17e2c:	ldr	r4, [r5, #48]	; 0x30
   17e30:	cmp	r4, #0
   17e34:	beq	18000 <fts_read@@Base+0x22c>
   17e38:	ldrh	r3, [r5, #64]	; 0x40
   17e3c:	mov	r4, r5
   17e40:	cmp	r3, #4
   17e44:	bne	180b0 <fts_read@@Base+0x2dc>
   17e48:	ldr	r5, [r4, #8]
   17e4c:	cmp	r5, #0
   17e50:	bne	17e20 <fts_read@@Base+0x4c>
   17e54:	ldr	r6, [r4, #4]
   17e58:	ldr	r3, [r6, #12]
   17e5c:	cmp	r3, #0
   17e60:	bne	18354 <fts_read@@Base+0x580>
   17e64:	str	r6, [r8]
   17e68:	mov	r0, r4
   17e6c:	bl	11110 <free@plt>
   17e70:	ldr	r3, [r6, #48]	; 0x30
   17e74:	cmn	r3, #1
   17e78:	beq	18288 <fts_read@@Base+0x4b4>
   17e7c:	ldrh	r3, [r6, #60]	; 0x3c
   17e80:	cmp	r3, #11
   17e84:	beq	1850c <fts_read@@Base+0x738>
   17e88:	ldr	r3, [r6, #40]	; 0x28
   17e8c:	ldr	r2, [r8, #24]
   17e90:	mov	r1, #0
   17e94:	strb	r1, [r2, r3]
   17e98:	ldr	r3, [r6, #48]	; 0x30
   17e9c:	cmp	r3, r1
   17ea0:	beq	182a8 <fts_read@@Base+0x4d4>
   17ea4:	ldrh	r3, [r6, #62]	; 0x3e
   17ea8:	tst	r3, #2
   17eac:	bne	1823c <fts_read@@Base+0x468>
   17eb0:	tst	r3, #1
   17eb4:	beq	183dc <fts_read@@Base+0x608>
   17eb8:	ldrh	r3, [r6, #60]	; 0x3c
   17ebc:	ldr	r0, [r8, #48]	; 0x30
   17ec0:	cmp	r3, #2
   17ec4:	beq	17ef4 <fts_read@@Base+0x120>
   17ec8:	ldr	r3, [r6, #32]
   17ecc:	cmp	r3, #0
   17ed0:	movne	r3, #7
   17ed4:	strhne	r3, [r6, #60]	; 0x3c
   17ed8:	bne	17ef4 <fts_read@@Base+0x120>
   17edc:	mov	r3, #6
   17ee0:	strh	r3, [r6, #60]	; 0x3c
   17ee4:	mov	r2, r6
   17ee8:	add	r1, r8, #56	; 0x38
   17eec:	bl	16e54 <__assert_fail@plt+0x5a80>
   17ef0:	ldr	r0, [r8, #48]	; 0x30
   17ef4:	tst	r0, #16384	; 0x4000
   17ef8:	moveq	r4, r6
   17efc:	beq	17f04 <fts_read@@Base+0x130>
   17f00:	mov	r4, #0
   17f04:	mov	r0, r4
   17f08:	pop	{r4, r5, r6, r7, r8, pc}
   17f0c:	sub	r2, r3, #12
   17f10:	cmp	r2, #1
   17f14:	bls	1814c <fts_read@@Base+0x378>
   17f18:	cmp	r3, #1
   17f1c:	bne	17e48 <fts_read@@Base+0x74>
   17f20:	tst	r1, #64	; 0x40
   17f24:	beq	17f3c <fts_read@@Base+0x168>
   17f28:	ldrd	r6, [r4, #72]	; 0x48
   17f2c:	ldrd	r2, [r8, #16]
   17f30:	cmp	r7, r3
   17f34:	cmpeq	r6, r2
   17f38:	bne	17fc0 <fts_read@@Base+0x1ec>
   17f3c:	ldr	r0, [r8, #4]
   17f40:	cmp	r0, #0
   17f44:	beq	181e8 <fts_read@@Base+0x414>
   17f48:	tst	r1, #8192	; 0x2000
   17f4c:	bne	181d4 <fts_read@@Base+0x400>
   17f50:	ldr	r3, [r4, #24]
   17f54:	mvn	r2, #0
   17f58:	mov	r1, r4
   17f5c:	mov	r0, r8
   17f60:	bl	16b98 <__assert_fail@plt+0x57c4>
   17f64:	cmp	r0, #0
   17f68:	beq	18270 <fts_read@@Base+0x49c>
   17f6c:	bl	11284 <__errno_location@plt>
   17f70:	ldrh	r3, [r4, #62]	; 0x3e
   17f74:	ldr	r5, [r8, #4]
   17f78:	orr	r3, r3, #1
   17f7c:	cmp	r5, #0
   17f80:	ldr	r2, [r0]
   17f84:	strh	r3, [r4, #62]	; 0x3e
   17f88:	str	r2, [r4, #32]
   17f8c:	beq	17fac <fts_read@@Base+0x1d8>
   17f90:	mov	r3, r5
   17f94:	ldr	r2, [r3, #4]
   17f98:	ldr	r2, [r2, #24]
   17f9c:	str	r2, [r3, #24]
   17fa0:	ldr	r3, [r3, #8]
   17fa4:	cmp	r3, #0
   17fa8:	bne	17f94 <fts_read@@Base+0x1c0>
   17fac:	mov	r3, #0
   17fb0:	str	r3, [r8, #4]
   17fb4:	b	180b8 <fts_read@@Base+0x2e4>
   17fb8:	cmp	r2, #4
   17fbc:	bne	17f20 <fts_read@@Base+0x14c>
   17fc0:	ldrh	r3, [r4, #62]	; 0x3e
   17fc4:	tst	r3, #2
   17fc8:	bne	183a4 <fts_read@@Base+0x5d0>
   17fcc:	ldr	r0, [r8, #4]
   17fd0:	cmp	r0, #0
   17fd4:	beq	17fe4 <fts_read@@Base+0x210>
   17fd8:	bl	165d0 <__assert_fail@plt+0x51fc>
   17fdc:	mov	r3, #0
   17fe0:	str	r3, [r8, #4]
   17fe4:	mov	r3, #6
   17fe8:	strh	r3, [r4, #60]	; 0x3c
   17fec:	mov	r2, r4
   17ff0:	add	r1, r8, #56	; 0x38
   17ff4:	ldr	r0, [r8, #48]	; 0x30
   17ff8:	bl	16e54 <__assert_fail@plt+0x5a80>
   17ffc:	b	17f04 <fts_read@@Base+0x130>
   18000:	mov	r0, r8
   18004:	bl	16884 <__assert_fail@plt+0x54b0>
   18008:	cmp	r0, #0
   1800c:	bne	1838c <fts_read@@Base+0x5b8>
   18010:	ldr	r2, [r8, #48]	; 0x30
   18014:	ldr	r3, [pc, #1268]	; 18510 <fts_read@@Base+0x73c>
   18018:	ldr	r0, [r8, #56]	; 0x38
   1801c:	and	r3, r3, r2
   18020:	cmp	r3, #0
   18024:	beq	1839c <fts_read@@Base+0x5c8>
   18028:	cmp	r0, #0
   1802c:	beq	18034 <fts_read@@Base+0x260>
   18030:	bl	19460 <fts_children@@Base+0xf10>
   18034:	ldr	r2, [r5, #52]	; 0x34
   18038:	add	r4, r5, #176	; 0xb0
   1803c:	str	r2, [r5, #40]	; 0x28
   18040:	mov	r1, r4
   18044:	add	r2, r2, #1
   18048:	ldr	r0, [r8, #24]
   1804c:	bl	11104 <memmove@plt>
   18050:	mov	r0, r4
   18054:	mov	r1, #47	; 0x2f
   18058:	bl	11314 <strrchr@plt>
   1805c:	cmp	r0, #0
   18060:	beq	18090 <fts_read@@Base+0x2bc>
   18064:	cmp	r4, r0
   18068:	beq	18278 <fts_read@@Base+0x4a4>
   1806c:	add	r6, r0, #1
   18070:	mov	r0, r6
   18074:	bl	1126c <strlen@plt>
   18078:	mov	r1, r6
   1807c:	mov	r7, r0
   18080:	add	r2, r7, #1
   18084:	mov	r0, r4
   18088:	bl	11104 <memmove@plt>
   1808c:	str	r7, [r5, #52]	; 0x34
   18090:	ldr	r3, [r8, #24]
   18094:	add	r1, r8, #56	; 0x38
   18098:	str	r3, [r5, #28]
   1809c:	str	r3, [r5, #24]
   180a0:	ldr	r0, [r8, #48]	; 0x30
   180a4:	bl	16adc <__assert_fail@plt+0x5708>
   180a8:	ldrh	r0, [r5, #60]	; 0x3c
   180ac:	b	180fc <fts_read@@Base+0x328>
   180b0:	cmp	r3, #2
   180b4:	beq	183b0 <fts_read@@Base+0x5dc>
   180b8:	ldr	r3, [r5, #4]
   180bc:	mov	ip, #47	; 0x2f
   180c0:	ldr	r2, [r8, #24]
   180c4:	ldr	r1, [r3, #40]	; 0x28
   180c8:	ldr	r0, [r3, #28]
   180cc:	sub	r3, r1, #1
   180d0:	ldrb	r0, [r0, r3]
   180d4:	cmp	r0, ip
   180d8:	movne	r3, r1
   180dc:	add	r0, r2, r3
   180e0:	strb	ip, [r2, r3]
   180e4:	ldr	r2, [r5, #52]	; 0x34
   180e8:	add	r0, r0, #1
   180ec:	add	r2, r2, #1
   180f0:	add	r1, r5, #176	; 0xb0
   180f4:	bl	11104 <memmove@plt>
   180f8:	ldrh	r0, [r5, #60]	; 0x3c
   180fc:	cmp	r0, #11
   18100:	str	r5, [r8]
   18104:	beq	1817c <fts_read@@Base+0x3a8>
   18108:	cmp	r0, #1
   1810c:	bne	18198 <fts_read@@Base+0x3c4>
   18110:	ldr	r3, [r5, #48]	; 0x30
   18114:	cmp	r3, #0
   18118:	beq	181ac <fts_read@@Base+0x3d8>
   1811c:	mov	r4, r5
   18120:	mov	r2, r5
   18124:	add	r1, r8, #56	; 0x38
   18128:	ldr	r0, [r8, #48]	; 0x30
   1812c:	bl	16da4 <__assert_fail@plt+0x59d0>
   18130:	subs	r5, r0, #0
   18134:	bne	17f04 <fts_read@@Base+0x130>
   18138:	bl	11284 <__errno_location@plt>
   1813c:	mov	r3, #12
   18140:	mov	r4, r5
   18144:	str	r3, [r0]
   18148:	b	17f04 <fts_read@@Base+0x130>
   1814c:	mov	r3, #1
   18150:	mov	r2, r4
   18154:	add	r1, r8, #48	; 0x30
   18158:	ldr	r0, [r8, #32]
   1815c:	bl	168d4 <__assert_fail@plt+0x5500>
   18160:	cmp	r0, #1
   18164:	strh	r0, [r4, #60]	; 0x3c
   18168:	beq	18420 <fts_read@@Base+0x64c>
   1816c:	cmp	r0, #11
   18170:	str	r4, [r8]
   18174:	bne	17f04 <fts_read@@Base+0x130>
   18178:	mov	r5, r4
   1817c:	ldrd	r2, [r5, #120]	; 0x78
   18180:	cmp	r3, #0
   18184:	cmpeq	r2, #2
   18188:	beq	182e4 <fts_read@@Base+0x510>
   1818c:	cmp	r3, #0
   18190:	cmpeq	r2, #1
   18194:	bne	1850c <fts_read@@Base+0x738>
   18198:	mov	r4, r5
   1819c:	mov	r0, r4
   181a0:	pop	{r4, r5, r6, r7, r8, pc}
   181a4:	cmp	r0, #1
   181a8:	bne	18198 <fts_read@@Base+0x3c4>
   181ac:	ldrd	r2, [r5, #72]	; 0x48
   181b0:	mov	r4, r5
   181b4:	strd	r2, [r8, #16]
   181b8:	b	18120 <fts_read@@Base+0x34c>
   181bc:	mov	r2, r4
   181c0:	add	r1, r8, #48	; 0x30
   181c4:	ldr	r0, [r8, #32]
   181c8:	bl	168d4 <__assert_fail@plt+0x5500>
   181cc:	strh	r0, [r4, #60]	; 0x3c
   181d0:	b	17f04 <fts_read@@Base+0x130>
   181d4:	bic	r1, r1, #8192	; 0x2000
   181d8:	str	r1, [r8, #48]	; 0x30
   181dc:	bl	165d0 <__assert_fail@plt+0x51fc>
   181e0:	mov	r3, #0
   181e4:	str	r3, [r8, #4]
   181e8:	mov	r1, #3
   181ec:	mov	r0, r8
   181f0:	bl	16f2c <__assert_fail@plt+0x5b58>
   181f4:	cmp	r0, #0
   181f8:	mov	r5, r0
   181fc:	str	r0, [r8, #4]
   18200:	bne	17fac <fts_read@@Base+0x1d8>
   18204:	ldr	r0, [r8, #48]	; 0x30
   18208:	tst	r0, #16384	; 0x4000
   1820c:	bne	17f00 <fts_read@@Base+0x12c>
   18210:	ldr	r3, [r4, #32]
   18214:	cmp	r3, #0
   18218:	beq	1822c <fts_read@@Base+0x458>
   1821c:	ldrh	r3, [r4, #60]	; 0x3c
   18220:	cmp	r3, #4
   18224:	movne	r3, #7
   18228:	strhne	r3, [r4, #60]	; 0x3c
   1822c:	add	r1, r8, #56	; 0x38
   18230:	mov	r2, r4
   18234:	bl	16e54 <__assert_fail@plt+0x5a80>
   18238:	b	17f04 <fts_read@@Base+0x130>
   1823c:	ldr	r3, [r8, #48]	; 0x30
   18240:	ldr	r1, [r6, #36]	; 0x24
   18244:	tst	r3, #4
   18248:	bne	18264 <fts_read@@Base+0x490>
   1824c:	tst	r3, #512	; 0x200
   18250:	beq	18408 <fts_read@@Base+0x634>
   18254:	mov	r2, #1
   18258:	mov	r0, r8
   1825c:	bl	167fc <__assert_fail@plt+0x5428>
   18260:	ldr	r1, [r6, #36]	; 0x24
   18264:	mov	r0, r1
   18268:	bl	113a4 <close@plt>
   1826c:	b	17eb8 <fts_read@@Base+0xe4>
   18270:	ldr	r5, [r8, #4]
   18274:	b	17fac <fts_read@@Base+0x1d8>
   18278:	ldrb	r3, [r4, #1]
   1827c:	cmp	r3, #0
   18280:	beq	18090 <fts_read@@Base+0x2bc>
   18284:	b	1806c <fts_read@@Base+0x298>
   18288:	mov	r0, r6
   1828c:	bl	11110 <free@plt>
   18290:	bl	11284 <__errno_location@plt>
   18294:	mov	r3, #0
   18298:	mov	r4, r3
   1829c:	str	r3, [r0]
   182a0:	str	r3, [r8]
   182a4:	b	17f04 <fts_read@@Base+0x130>
   182a8:	mov	r0, r8
   182ac:	bl	16884 <__assert_fail@plt+0x54b0>
   182b0:	cmp	r0, #0
   182b4:	beq	17eb8 <fts_read@@Base+0xe4>
   182b8:	bl	11284 <__errno_location@plt>
   182bc:	ldr	r3, [r8, #48]	; 0x30
   182c0:	orr	r3, r3, #16384	; 0x4000
   182c4:	ldr	r2, [r0]
   182c8:	str	r2, [r6, #32]
   182cc:	str	r3, [r8, #48]	; 0x30
   182d0:	ldrh	r3, [r6, #60]	; 0x3c
   182d4:	cmp	r3, #2
   182d8:	beq	17f00 <fts_read@@Base+0x12c>
   182dc:	ldr	r0, [r8, #48]	; 0x30
   182e0:	b	17ec8 <fts_read@@Base+0xf4>
   182e4:	ldr	r4, [r5, #4]
   182e8:	ldr	r0, [r8, #32]
   182ec:	ldr	r3, [r4, #56]	; 0x38
   182f0:	cmp	r3, #0
   182f4:	bne	18308 <fts_read@@Base+0x534>
   182f8:	ldr	r3, [r8, #48]	; 0x30
   182fc:	and	r3, r3, #24
   18300:	cmp	r3, #24
   18304:	beq	18498 <fts_read@@Base+0x6c4>
   18308:	mov	r3, #0
   1830c:	mov	r2, r5
   18310:	add	r1, r8, #48	; 0x30
   18314:	bl	168d4 <__assert_fail@plt+0x5500>
   18318:	ldr	r3, [r5, #88]	; 0x58
   1831c:	and	r3, r3, #61440	; 0xf000
   18320:	cmp	r3, #16384	; 0x4000
   18324:	strh	r0, [r5, #60]	; 0x3c
   18328:	bne	18108 <fts_read@@Base+0x334>
   1832c:	ldr	r3, [r5, #48]	; 0x30
   18330:	cmp	r3, #0
   18334:	beq	181a4 <fts_read@@Base+0x3d0>
   18338:	ldr	r3, [r4, #56]	; 0x38
   1833c:	sub	r3, r3, #1
   18340:	cmn	r3, #3
   18344:	strls	r3, [r4, #56]	; 0x38
   18348:	cmp	r0, #1
   1834c:	beq	1811c <fts_read@@Base+0x348>
   18350:	b	18198 <fts_read@@Base+0x3c4>
   18354:	ldr	r3, [r6, #40]	; 0x28
   18358:	ldr	r2, [r8, #24]
   1835c:	str	r6, [r8]
   18360:	mov	r1, #3
   18364:	strb	r5, [r2, r3]
   18368:	mov	r0, r8
   1836c:	bl	16f2c <__assert_fail@plt+0x5b58>
   18370:	subs	r5, r0, #0
   18374:	bne	183fc <fts_read@@Base+0x628>
   18378:	ldr	r3, [r8, #48]	; 0x30
   1837c:	tst	r3, #16384	; 0x4000
   18380:	bne	17f00 <fts_read@@Base+0x12c>
   18384:	ldr	r6, [r4, #4]
   18388:	b	17e64 <fts_read@@Base+0x90>
   1838c:	ldr	r3, [r8, #48]	; 0x30
   18390:	orr	r3, r3, #16384	; 0x4000
   18394:	str	r3, [r8, #48]	; 0x30
   18398:	b	17f04 <fts_read@@Base+0x130>
   1839c:	bl	11110 <free@plt>
   183a0:	b	18034 <fts_read@@Base+0x260>
   183a4:	ldr	r0, [r4, #36]	; 0x24
   183a8:	bl	113a4 <close@plt>
   183ac:	b	17fcc <fts_read@@Base+0x1f8>
   183b0:	mov	r3, #1
   183b4:	mov	r2, r5
   183b8:	add	r1, r8, #48	; 0x30
   183bc:	ldr	r0, [r8, #32]
   183c0:	bl	168d4 <__assert_fail@plt+0x5500>
   183c4:	cmp	r0, #1
   183c8:	strh	r0, [r5, #60]	; 0x3c
   183cc:	beq	18464 <fts_read@@Base+0x690>
   183d0:	mov	r3, #3
   183d4:	strh	r3, [r5, #64]	; 0x40
   183d8:	b	180b8 <fts_read@@Base+0x2e4>
   183dc:	ldr	r3, [pc, #304]	; 18514 <fts_read@@Base+0x740>
   183e0:	mvn	r2, #0
   183e4:	ldr	r1, [r6, #4]
   183e8:	mov	r0, r8
   183ec:	bl	16b98 <__assert_fail@plt+0x57c4>
   183f0:	cmp	r0, #0
   183f4:	beq	17eb8 <fts_read@@Base+0xe4>
   183f8:	b	182b8 <fts_read@@Base+0x4e4>
   183fc:	mov	r0, r4
   18400:	bl	11110 <free@plt>
   18404:	b	180b8 <fts_read@@Base+0x2e4>
   18408:	mov	r0, r1
   1840c:	bl	11350 <fchdir@plt>
   18410:	cmp	r0, #0
   18414:	bne	184b8 <fts_read@@Base+0x6e4>
   18418:	ldr	r1, [r6, #36]	; 0x24
   1841c:	b	18264 <fts_read@@Base+0x490>
   18420:	ldr	r1, [r8, #48]	; 0x30
   18424:	tst	r1, #4
   18428:	strne	r4, [r8]
   1842c:	movne	r5, r4
   18430:	bne	18110 <fts_read@@Base+0x33c>
   18434:	ldr	r2, [pc, #220]	; 18518 <fts_read@@Base+0x744>
   18438:	ldr	r0, [r8, #32]
   1843c:	bl	16b5c <__assert_fail@plt+0x5788>
   18440:	cmp	r0, #0
   18444:	str	r0, [r4, #36]	; 0x24
   18448:	blt	184d8 <fts_read@@Base+0x704>
   1844c:	ldrh	r3, [r4, #62]	; 0x3e
   18450:	ldrh	r0, [r4, #60]	; 0x3c
   18454:	mov	r5, r4
   18458:	orr	r3, r3, #2
   1845c:	strh	r3, [r4, #62]	; 0x3e
   18460:	b	180fc <fts_read@@Base+0x328>
   18464:	ldr	r1, [r8, #48]	; 0x30
   18468:	tst	r1, #4
   1846c:	bne	183d0 <fts_read@@Base+0x5fc>
   18470:	ldr	r2, [pc, #160]	; 18518 <fts_read@@Base+0x744>
   18474:	ldr	r0, [r8, #32]
   18478:	bl	16b5c <__assert_fail@plt+0x5788>
   1847c:	cmp	r0, #0
   18480:	str	r0, [r5, #36]	; 0x24
   18484:	blt	184f4 <fts_read@@Base+0x720>
   18488:	ldrh	r3, [r5, #62]	; 0x3e
   1848c:	orr	r3, r3, #2
   18490:	strh	r3, [r5, #62]	; 0x3e
   18494:	b	183d0 <fts_read@@Base+0x5fc>
   18498:	mov	r1, r0
   1849c:	mov	r0, r4
   184a0:	bl	16768 <__assert_fail@plt+0x5394>
   184a4:	cmp	r0, #2
   184a8:	ldrheq	r0, [r5, #60]	; 0x3c
   184ac:	beq	18108 <fts_read@@Base+0x334>
   184b0:	ldr	r0, [r8, #32]
   184b4:	b	18308 <fts_read@@Base+0x534>
   184b8:	bl	11284 <__errno_location@plt>
   184bc:	ldr	r3, [r8, #48]	; 0x30
   184c0:	ldr	r1, [r6, #36]	; 0x24
   184c4:	orr	r3, r3, #16384	; 0x4000
   184c8:	ldr	r2, [r0]
   184cc:	str	r2, [r6, #32]
   184d0:	str	r3, [r8, #48]	; 0x30
   184d4:	b	18264 <fts_read@@Base+0x490>
   184d8:	bl	11284 <__errno_location@plt>
   184dc:	mov	r2, #7
   184e0:	ldr	r3, [r0]
   184e4:	strh	r2, [r4, #60]	; 0x3c
   184e8:	str	r3, [r4, #32]
   184ec:	str	r4, [r8]
   184f0:	b	17f04 <fts_read@@Base+0x130>
   184f4:	bl	11284 <__errno_location@plt>
   184f8:	mov	r2, #7
   184fc:	ldr	r3, [r0]
   18500:	strh	r2, [r5, #60]	; 0x3c
   18504:	str	r3, [r5, #32]
   18508:	b	183d0 <fts_read@@Base+0x5fc>
   1850c:	bl	11398 <abort@plt>
   18510:	andeq	r0, r0, r2, lsl #2
   18514:	andeq	sl, r1, r4, lsr pc
   18518:	andeq	sl, r1, r0, lsr pc

0001851c <fts_set@@Base>:
   1851c:	cmp	r2, #4
   18520:	bhi	18534 <fts_set@@Base+0x18>
   18524:	mov	r3, #0
   18528:	strh	r2, [r1, #64]	; 0x40
   1852c:	mov	r0, r3
   18530:	bx	lr
   18534:	push	{r4, lr}
   18538:	bl	11284 <__errno_location@plt>
   1853c:	mov	r2, #22
   18540:	mov	r3, #1
   18544:	str	r2, [r0]
   18548:	mov	r0, r3
   1854c:	pop	{r4, pc}

00018550 <fts_children@@Base>:
   18550:	push	{r4, r5, r6, r7, r8, lr}
   18554:	mov	r4, r1
   18558:	mov	r5, r0
   1855c:	bl	11284 <__errno_location@plt>
   18560:	bics	r2, r4, #8192	; 0x2000
   18564:	mov	r7, r0
   18568:	bne	185f8 <fts_children@@Base+0xa8>
   1856c:	ldr	r6, [r5]
   18570:	str	r2, [r0]
   18574:	ldr	r3, [r5, #48]	; 0x30
   18578:	ands	r0, r3, #16384	; 0x4000
   1857c:	bne	18600 <fts_children@@Base+0xb0>
   18580:	ldrh	r3, [r6, #60]	; 0x3c
   18584:	cmp	r3, #9
   18588:	beq	18658 <fts_children@@Base+0x108>
   1858c:	cmp	r3, #1
   18590:	popne	{r4, r5, r6, r7, r8, pc}
   18594:	ldr	r0, [r5, #4]
   18598:	cmp	r0, #0
   1859c:	beq	185a4 <fts_children@@Base+0x54>
   185a0:	bl	165d0 <__assert_fail@plt+0x51fc>
   185a4:	cmp	r4, #8192	; 0x2000
   185a8:	moveq	r8, #2
   185ac:	ldreq	r3, [r5, #48]	; 0x30
   185b0:	movne	r8, #1
   185b4:	orreq	r3, r3, #8192	; 0x2000
   185b8:	streq	r3, [r5, #48]	; 0x30
   185bc:	ldr	r3, [r6, #48]	; 0x30
   185c0:	cmp	r3, #0
   185c4:	bne	185e4 <fts_children@@Base+0x94>
   185c8:	ldr	r3, [r6, #24]
   185cc:	ldrb	r3, [r3]
   185d0:	cmp	r3, #47	; 0x2f
   185d4:	beq	185e4 <fts_children@@Base+0x94>
   185d8:	ldr	r1, [r5, #48]	; 0x30
   185dc:	ands	r4, r1, #4
   185e0:	beq	18608 <fts_children@@Base+0xb8>
   185e4:	mov	r1, r8
   185e8:	mov	r0, r5
   185ec:	bl	16f2c <__assert_fail@plt+0x5b58>
   185f0:	str	r0, [r5, #4]
   185f4:	pop	{r4, r5, r6, r7, r8, pc}
   185f8:	mov	r3, #22
   185fc:	str	r3, [r0]
   18600:	mov	r0, #0
   18604:	pop	{r4, r5, r6, r7, r8, pc}
   18608:	ldr	r2, [pc, #136]	; 18698 <fts_children@@Base+0x148>
   1860c:	ldr	r0, [r5, #32]
   18610:	bl	16b5c <__assert_fail@plt+0x5788>
   18614:	subs	r6, r0, #0
   18618:	blt	18674 <fts_children@@Base+0x124>
   1861c:	mov	r1, r8
   18620:	mov	r0, r5
   18624:	bl	16f2c <__assert_fail@plt+0x5b58>
   18628:	ldr	r3, [r5, #48]	; 0x30
   1862c:	ands	r4, r3, #512	; 0x200
   18630:	str	r0, [r5, #4]
   18634:	bne	18660 <fts_children@@Base+0x110>
   18638:	mov	r0, r6
   1863c:	bl	11350 <fchdir@plt>
   18640:	cmp	r0, #0
   18644:	bne	18680 <fts_children@@Base+0x130>
   18648:	mov	r0, r6
   1864c:	bl	113a4 <close@plt>
   18650:	ldr	r0, [r5, #4]
   18654:	pop	{r4, r5, r6, r7, r8, pc}
   18658:	ldr	r0, [r6, #8]
   1865c:	pop	{r4, r5, r6, r7, r8, pc}
   18660:	mov	r1, r6
   18664:	mov	r2, #1
   18668:	mov	r0, r5
   1866c:	bl	167fc <__assert_fail@plt+0x5428>
   18670:	b	18650 <fts_children@@Base+0x100>
   18674:	str	r4, [r5, #4]
   18678:	mov	r0, r4
   1867c:	pop	{r4, r5, r6, r7, r8, pc}
   18680:	ldr	r5, [r7]
   18684:	mov	r0, r6
   18688:	bl	113a4 <close@plt>
   1868c:	str	r5, [r7]
   18690:	mov	r0, r4
   18694:	pop	{r4, r5, r6, r7, r8, pc}
   18698:	andeq	sl, r1, r0, lsr pc
   1869c:	push	{r4, r5, r6, r7, r8, lr}
   186a0:	subs	r7, r0, #0
   186a4:	ldr	r5, [pc, #108]	; 18718 <fts_children@@Base+0x1c8>
   186a8:	sub	sp, sp, #8
   186ac:	mov	r8, r1
   186b0:	ldr	r1, [r5]
   186b4:	moveq	r7, sp
   186b8:	str	r1, [sp, #4]
   186bc:	mov	r0, r7
   186c0:	mov	r1, r8
   186c4:	mov	r6, r2
   186c8:	bl	111e8 <mbrtowc@plt>
   186cc:	cmp	r6, #0
   186d0:	cmnne	r0, #3
   186d4:	mov	r4, r0
   186d8:	bhi	186f8 <fts_children@@Base+0x1a8>
   186dc:	ldr	r2, [sp, #4]
   186e0:	ldr	r3, [r5]
   186e4:	mov	r0, r4
   186e8:	cmp	r2, r3
   186ec:	bne	18714 <fts_children@@Base+0x1c4>
   186f0:	add	sp, sp, #8
   186f4:	pop	{r4, r5, r6, r7, r8, pc}
   186f8:	mov	r0, #0
   186fc:	bl	188e4 <fts_children@@Base+0x394>
   18700:	cmp	r0, #0
   18704:	moveq	r4, #1
   18708:	ldrbeq	r3, [r8]
   1870c:	streq	r3, [r7]
   18710:	b	186dc <fts_children@@Base+0x18c>
   18714:	bl	11164 <__stack_chk_fail@plt>
   18718:	andeq	fp, r2, r8, lsl #30
   1871c:	push	{r4, r5, r6, lr}
   18720:	mov	r4, r0
   18724:	bl	111dc <__fpending@plt>
   18728:	ldr	r5, [r4]
   1872c:	and	r5, r5, #32
   18730:	mov	r6, r0
   18734:	mov	r0, r4
   18738:	bl	19ba0 <fts_children@@Base+0x1650>
   1873c:	cmp	r5, #0
   18740:	mov	r4, r0
   18744:	bne	18770 <fts_children@@Base+0x220>
   18748:	cmp	r0, #0
   1874c:	beq	18768 <fts_children@@Base+0x218>
   18750:	cmp	r6, #0
   18754:	bne	18788 <fts_children@@Base+0x238>
   18758:	bl	11284 <__errno_location@plt>
   1875c:	ldr	r4, [r0]
   18760:	subs	r4, r4, #9
   18764:	mvnne	r4, #0
   18768:	mov	r0, r4
   1876c:	pop	{r4, r5, r6, pc}
   18770:	cmp	r0, #0
   18774:	bne	18788 <fts_children@@Base+0x238>
   18778:	bl	11284 <__errno_location@plt>
   1877c:	str	r4, [r0]
   18780:	mvn	r4, #0
   18784:	b	18768 <fts_children@@Base+0x218>
   18788:	mvn	r4, #0
   1878c:	b	18768 <fts_children@@Base+0x218>
   18790:	push	{r4, r5}
   18794:	mov	r4, #0
   18798:	mov	r5, #0
   1879c:	ldr	r3, [pc, #12]	; 187b0 <fts_children@@Base+0x260>
   187a0:	strd	r4, [r0, #16]
   187a4:	str	r3, [r0, #24]
   187a8:	pop	{r4, r5}
   187ac:	bx	lr
   187b0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   187b4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187b8:	ldr	r2, [r0, #24]
   187bc:	ldr	r3, [pc, #180]	; 18878 <fts_children@@Base+0x328>
   187c0:	cmp	r2, r3
   187c4:	bne	18864 <fts_children@@Base+0x314>
   187c8:	ldrd	r6, [r0, #16]
   187cc:	ldrd	sl, [r1, #96]	; 0x60
   187d0:	orrs	r3, r6, r7
   187d4:	beq	18810 <fts_children@@Base+0x2c0>
   187d8:	ldrd	r2, [r0]
   187dc:	cmp	r3, fp
   187e0:	cmpeq	r2, sl
   187e4:	beq	18834 <fts_children@@Base+0x2e4>
   187e8:	adds	r8, r6, #1
   187ec:	adc	r9, r7, #0
   187f0:	and	r2, r6, r8
   187f4:	and	r3, r7, r9
   187f8:	orrs	r3, r2, r3
   187fc:	strd	r8, [r0, #16]
   18800:	movne	r1, #0
   18804:	beq	18854 <fts_children@@Base+0x304>
   18808:	mov	r0, r1
   1880c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18810:	mov	r2, #1
   18814:	mov	r3, #0
   18818:	strd	r2, [r0, #16]
   1881c:	ldrd	r2, [r1]
   18820:	mov	r1, #0
   18824:	strd	sl, [r0]
   18828:	strd	r2, [r0, #8]
   1882c:	mov	r0, r1
   18830:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18834:	ldrd	r4, [r1]
   18838:	ldrd	r2, [r0, #8]
   1883c:	cmp	r5, r3
   18840:	cmpeq	r4, r2
   18844:	bne	187e8 <fts_children@@Base+0x298>
   18848:	mov	r1, #1
   1884c:	mov	r0, r1
   18850:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18854:	orrs	r3, r8, r9
   18858:	bne	1881c <fts_children@@Base+0x2cc>
   1885c:	mov	r1, #1
   18860:	b	1884c <fts_children@@Base+0x2fc>
   18864:	ldr	r3, [pc, #16]	; 1887c <fts_children@@Base+0x32c>
   18868:	mov	r2, #60	; 0x3c
   1886c:	ldr	r1, [pc, #12]	; 18880 <fts_children@@Base+0x330>
   18870:	ldr	r0, [pc, #12]	; 18884 <fts_children@@Base+0x334>
   18874:	bl	113d4 <__assert_fail@plt>
   18878:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1887c:	andeq	fp, r1, ip, asr #14
   18880:	andeq	fp, r1, r8, asr r7
   18884:	andeq	fp, r1, ip, ror #14
   18888:	push	{r1, r2, r3}
   1888c:	push	{r4, lr}
   18890:	sub	sp, sp, #12
   18894:	ldr	r4, [pc, #68]	; 188e0 <fts_children@@Base+0x390>
   18898:	ldr	r1, [sp, #20]
   1889c:	ldr	r3, [r4]
   188a0:	ands	r2, r1, #64	; 0x40
   188a4:	str	r3, [sp, #4]
   188a8:	ldrne	r2, [sp, #24]
   188ac:	addne	r3, sp, #24
   188b0:	strne	r3, [sp]
   188b4:	bl	11200 <open64@plt>
   188b8:	bl	19b5c <fts_children@@Base+0x160c>
   188bc:	ldr	r2, [sp, #4]
   188c0:	ldr	r3, [r4]
   188c4:	cmp	r2, r3
   188c8:	bne	188dc <fts_children@@Base+0x38c>
   188cc:	add	sp, sp, #12
   188d0:	pop	{r4, lr}
   188d4:	add	sp, sp, #12
   188d8:	bx	lr
   188dc:	bl	11164 <__stack_chk_fail@plt>
   188e0:	andeq	fp, r2, r8, lsl #30
   188e4:	push	{r4, lr}
   188e8:	mov	r1, #0
   188ec:	bl	11308 <setlocale@plt>
   188f0:	subs	r4, r0, #0
   188f4:	beq	18920 <fts_children@@Base+0x3d0>
   188f8:	ldr	r1, [pc, #40]	; 18928 <fts_children@@Base+0x3d8>
   188fc:	bl	110e0 <strcmp@plt>
   18900:	cmp	r0, #0
   18904:	popeq	{r4, pc}
   18908:	mov	r0, r4
   1890c:	ldr	r1, [pc, #24]	; 1892c <fts_children@@Base+0x3dc>
   18910:	bl	110e0 <strcmp@plt>
   18914:	adds	r0, r0, #0
   18918:	movne	r0, #1
   1891c:	pop	{r4, pc}
   18920:	mov	r0, #1
   18924:	pop	{r4, pc}
   18928:	andeq	fp, r1, r4, lsl #15
   1892c:	andeq	fp, r1, r8, lsl #15
   18930:	cmp	r0, #10
   18934:	movcc	r0, #10
   18938:	push	{r4, r5, r6, r7, r8, lr}
   1893c:	orr	r7, r0, #1
   18940:	cmn	r7, #1
   18944:	beq	189bc <fts_children@@Base+0x46c>
   18948:	ldr	r8, [pc, #116]	; 189c4 <fts_children@@Base+0x474>
   1894c:	umull	r2, r3, r8, r7
   18950:	cmp	r7, #9
   18954:	lsr	r3, r3, #1
   18958:	add	r3, r3, r3, lsl #1
   1895c:	sub	r3, r7, r3
   18960:	bls	189a8 <fts_children@@Base+0x458>
   18964:	cmp	r3, #0
   18968:	beq	189b0 <fts_children@@Base+0x460>
   1896c:	mov	r6, #16
   18970:	mov	r5, #9
   18974:	mov	r4, #3
   18978:	b	18988 <fts_children@@Base+0x438>
   1897c:	cmp	r1, #0
   18980:	add	r6, r6, #8
   18984:	beq	189b0 <fts_children@@Base+0x460>
   18988:	add	r4, r4, #2
   1898c:	mov	r1, r4
   18990:	mov	r0, r7
   18994:	bl	19f84 <fts_children@@Base+0x1a34>
   18998:	add	r5, r5, r6
   1899c:	cmp	r5, r7
   189a0:	mov	r3, r1
   189a4:	bcc	1897c <fts_children@@Base+0x42c>
   189a8:	cmp	r3, #0
   189ac:	bne	189bc <fts_children@@Base+0x46c>
   189b0:	add	r7, r7, #2
   189b4:	cmn	r7, #1
   189b8:	bne	1894c <fts_children@@Base+0x3fc>
   189bc:	mov	r0, r7
   189c0:	pop	{r4, r5, r6, r7, r8, pc}
   189c4:	bge	feac3478 <optarg@@GLIBC_2.4+0xfea972e0>
   189c8:	push	{r4, lr}
   189cc:	ror	r0, r0, #3
   189d0:	bl	19f84 <fts_children@@Base+0x1a34>
   189d4:	mov	r0, r1
   189d8:	pop	{r4, pc}
   189dc:	sub	r0, r1, r0
   189e0:	clz	r0, r0
   189e4:	lsr	r0, r0, #5
   189e8:	bx	lr
   189ec:	push	{r4, lr}
   189f0:	mov	r4, r0
   189f4:	mov	r0, r1
   189f8:	ldr	r3, [r4, #24]
   189fc:	ldr	r1, [r4, #8]
   18a00:	blx	r3
   18a04:	ldr	r3, [r4, #8]
   18a08:	cmp	r3, r0
   18a0c:	bls	18a1c <fts_children@@Base+0x4cc>
   18a10:	ldr	r3, [r4]
   18a14:	add	r0, r3, r0, lsl #3
   18a18:	pop	{r4, pc}
   18a1c:	bl	11398 <abort@plt>
   18a20:	push	{r4, r5, r6, r7, r8, lr}
   18a24:	mov	r8, r2
   18a28:	mov	r5, r1
   18a2c:	mov	r7, r3
   18a30:	mov	r6, r0
   18a34:	bl	189ec <fts_children@@Base+0x49c>
   18a38:	str	r0, [r8]
   18a3c:	ldr	r1, [r0]
   18a40:	cmp	r1, #0
   18a44:	beq	18b2c <fts_children@@Base+0x5dc>
   18a48:	cmp	r1, r5
   18a4c:	mov	r4, r0
   18a50:	beq	18af0 <fts_children@@Base+0x5a0>
   18a54:	ldr	r3, [r6, #28]
   18a58:	mov	r0, r5
   18a5c:	blx	r3
   18a60:	cmp	r0, #0
   18a64:	ldrne	r3, [r4]
   18a68:	bne	18af4 <fts_children@@Base+0x5a4>
   18a6c:	ldr	r2, [r4, #4]
   18a70:	cmp	r2, #0
   18a74:	beq	18b2c <fts_children@@Base+0x5dc>
   18a78:	ldr	r3, [r2]
   18a7c:	cmp	r5, r3
   18a80:	bne	18aa4 <fts_children@@Base+0x554>
   18a84:	b	18ac4 <fts_children@@Base+0x574>
   18a88:	ldr	r4, [r4, #4]
   18a8c:	ldr	r2, [r4, #4]
   18a90:	cmp	r2, #0
   18a94:	beq	18b2c <fts_children@@Base+0x5dc>
   18a98:	ldr	r3, [r2]
   18a9c:	cmp	r3, r5
   18aa0:	beq	18ac4 <fts_children@@Base+0x574>
   18aa4:	mov	r1, r3
   18aa8:	mov	r0, r5
   18aac:	ldr	r3, [r6, #28]
   18ab0:	blx	r3
   18ab4:	cmp	r0, #0
   18ab8:	beq	18a88 <fts_children@@Base+0x538>
   18abc:	ldr	r2, [r4, #4]
   18ac0:	ldr	r3, [r2]
   18ac4:	cmp	r7, #0
   18ac8:	beq	18b24 <fts_children@@Base+0x5d4>
   18acc:	ldr	r0, [r2, #4]
   18ad0:	mov	r1, #0
   18ad4:	str	r0, [r4, #4]
   18ad8:	str	r1, [r2]
   18adc:	ldr	r1, [r6, #36]	; 0x24
   18ae0:	mov	r0, r3
   18ae4:	str	r1, [r2, #4]
   18ae8:	str	r2, [r6, #36]	; 0x24
   18aec:	pop	{r4, r5, r6, r7, r8, pc}
   18af0:	mov	r3, r1
   18af4:	cmp	r7, #0
   18af8:	beq	18b24 <fts_children@@Base+0x5d4>
   18afc:	ldr	r2, [r4, #4]
   18b00:	cmp	r2, #0
   18b04:	movne	ip, #0
   18b08:	ldmne	r2, {r0, r1}
   18b0c:	streq	r2, [r4]
   18b10:	stmne	r4, {r0, r1}
   18b14:	strne	ip, [r2]
   18b18:	ldrne	r1, [r6, #36]	; 0x24
   18b1c:	strne	r1, [r2, #4]
   18b20:	strne	r2, [r6, #36]	; 0x24
   18b24:	mov	r0, r3
   18b28:	pop	{r4, r5, r6, r7, r8, pc}
   18b2c:	mov	r3, #0
   18b30:	mov	r0, r3
   18b34:	pop	{r4, r5, r6, r7, r8, pc}
   18b38:	ldr	r2, [pc, #164]	; 18be4 <fts_children@@Base+0x694>
   18b3c:	ldr	r3, [r0]
   18b40:	cmp	r3, r2
   18b44:	beq	18bcc <fts_children@@Base+0x67c>
   18b48:	vldr	s15, [r3, #8]
   18b4c:	vldr	s14, [pc, #128]	; 18bd4 <fts_children@@Base+0x684>
   18b50:	vcmpe.f32	s15, s14
   18b54:	vmrs	APSR_nzcv, fpscr
   18b58:	ble	18bc0 <fts_children@@Base+0x670>
   18b5c:	vldr	s13, [pc, #116]	; 18bd8 <fts_children@@Base+0x688>
   18b60:	vcmpe.f32	s15, s13
   18b64:	vmrs	APSR_nzcv, fpscr
   18b68:	bpl	18bc0 <fts_children@@Base+0x670>
   18b6c:	vldr	s13, [pc, #104]	; 18bdc <fts_children@@Base+0x68c>
   18b70:	vldr	s12, [r3, #12]
   18b74:	vcmpe.f32	s12, s13
   18b78:	vmrs	APSR_nzcv, fpscr
   18b7c:	ble	18bc0 <fts_children@@Base+0x670>
   18b80:	vldr	s13, [r3]
   18b84:	vcmpe.f32	s13, #0.0
   18b88:	vmrs	APSR_nzcv, fpscr
   18b8c:	blt	18bc0 <fts_children@@Base+0x670>
   18b90:	vadd.f32	s14, s13, s14
   18b94:	vldr	s13, [r3, #4]
   18b98:	vcmpe.f32	s14, s13
   18b9c:	vmrs	APSR_nzcv, fpscr
   18ba0:	bpl	18bc0 <fts_children@@Base+0x670>
   18ba4:	vldr	s12, [pc, #52]	; 18be0 <fts_children@@Base+0x690>
   18ba8:	vcmpe.f32	s13, s12
   18bac:	vmrs	APSR_nzcv, fpscr
   18bb0:	bhi	18bc0 <fts_children@@Base+0x670>
   18bb4:	vcmpe.f32	s15, s14
   18bb8:	vmrs	APSR_nzcv, fpscr
   18bbc:	bgt	18bcc <fts_children@@Base+0x67c>
   18bc0:	str	r2, [r0]
   18bc4:	mov	r0, #0
   18bc8:	bx	lr
   18bcc:	mov	r0, #1
   18bd0:	bx	lr
   18bd4:	stclcc	12, cr12, [ip, #820]	; 0x334
   18bd8:	svccc	0x00666666
   18bdc:	svccc	0x008ccccd
   18be0:	svccc	0x00800000
   18be4:	muleq	r1, r0, r7
   18be8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18bec:	ldr	r3, [r1, #4]
   18bf0:	ldr	r6, [r1]
   18bf4:	cmp	r6, r3
   18bf8:	bcs	18cc0 <fts_children@@Base+0x770>
   18bfc:	mov	r8, r2
   18c00:	mov	r5, r0
   18c04:	mov	r7, r1
   18c08:	add	r6, r6, #8
   18c0c:	mov	r9, #0
   18c10:	b	18c20 <fts_children@@Base+0x6d0>
   18c14:	cmp	r3, r6
   18c18:	add	r6, r6, #8
   18c1c:	bls	18cc0 <fts_children@@Base+0x770>
   18c20:	ldr	sl, [r6, #-8]
   18c24:	cmp	sl, #0
   18c28:	beq	18c14 <fts_children@@Base+0x6c4>
   18c2c:	ldr	r4, [r6, #-4]
   18c30:	cmp	r4, #0
   18c34:	bne	18c54 <fts_children@@Base+0x704>
   18c38:	b	18ca4 <fts_children@@Base+0x754>
   18c3c:	ldr	r2, [r0, #4]
   18c40:	cmp	r3, #0
   18c44:	str	r2, [r4, #4]
   18c48:	str	r4, [r0, #4]
   18c4c:	mov	r4, r3
   18c50:	beq	18ca0 <fts_children@@Base+0x750>
   18c54:	ldr	sl, [r4]
   18c58:	mov	r0, r5
   18c5c:	mov	r1, sl
   18c60:	bl	189ec <fts_children@@Base+0x49c>
   18c64:	ldr	r3, [r4, #4]
   18c68:	ldr	r2, [r0]
   18c6c:	cmp	r2, #0
   18c70:	bne	18c3c <fts_children@@Base+0x6ec>
   18c74:	ldr	r1, [r5, #12]
   18c78:	str	sl, [r0]
   18c7c:	add	r1, r1, #1
   18c80:	str	r1, [r5, #12]
   18c84:	str	r2, [r4]
   18c88:	ldr	r2, [r5, #36]	; 0x24
   18c8c:	cmp	r3, #0
   18c90:	str	r2, [r4, #4]
   18c94:	str	r4, [r5, #36]	; 0x24
   18c98:	mov	r4, r3
   18c9c:	bne	18c54 <fts_children@@Base+0x704>
   18ca0:	ldr	sl, [r6, #-8]
   18ca4:	cmp	r8, #0
   18ca8:	str	r9, [r6, #-4]
   18cac:	beq	18cc8 <fts_children@@Base+0x778>
   18cb0:	ldr	r3, [r7, #4]
   18cb4:	cmp	r3, r6
   18cb8:	add	r6, r6, #8
   18cbc:	bhi	18c20 <fts_children@@Base+0x6d0>
   18cc0:	mov	r0, #1
   18cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18cc8:	mov	r1, sl
   18ccc:	mov	r0, r5
   18cd0:	bl	189ec <fts_children@@Base+0x49c>
   18cd4:	ldr	r3, [r0]
   18cd8:	mov	r4, r0
   18cdc:	cmp	r3, #0
   18ce0:	beq	18d20 <fts_children@@Base+0x7d0>
   18ce4:	ldr	r0, [r5, #36]	; 0x24
   18ce8:	cmp	r0, #0
   18cec:	beq	18d34 <fts_children@@Base+0x7e4>
   18cf0:	ldr	r3, [r0, #4]
   18cf4:	str	r3, [r5, #36]	; 0x24
   18cf8:	ldr	r3, [r4, #4]
   18cfc:	str	sl, [r0]
   18d00:	str	r3, [r0, #4]
   18d04:	str	r0, [r4, #4]
   18d08:	ldr	r2, [r7, #12]
   18d0c:	str	r9, [r6, #-8]
   18d10:	sub	r2, r2, #1
   18d14:	ldr	r3, [r7, #4]
   18d18:	str	r2, [r7, #12]
   18d1c:	b	18c14 <fts_children@@Base+0x6c4>
   18d20:	ldr	r3, [r5, #12]
   18d24:	str	sl, [r0]
   18d28:	add	r3, r3, #1
   18d2c:	str	r3, [r5, #12]
   18d30:	b	18d08 <fts_children@@Base+0x7b8>
   18d34:	mov	r0, #8
   18d38:	bl	1120c <malloc@plt>
   18d3c:	cmp	r0, #0
   18d40:	bne	18cf8 <fts_children@@Base+0x7a8>
   18d44:	mov	r0, r8
   18d48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d4c:	ldr	r0, [r0, #8]
   18d50:	bx	lr
   18d54:	ldr	r0, [r0, #12]
   18d58:	bx	lr
   18d5c:	ldr	r0, [r0, #16]
   18d60:	bx	lr
   18d64:	ldm	r0, {r1, r3}
   18d68:	cmp	r1, r3
   18d6c:	bcs	18dd4 <fts_children@@Base+0x884>
   18d70:	sub	ip, r3, #1
   18d74:	sub	ip, ip, r1
   18d78:	add	r3, r1, #16
   18d7c:	bic	ip, ip, #7
   18d80:	add	ip, ip, r3
   18d84:	add	r1, r1, #8
   18d88:	mov	r0, #0
   18d8c:	b	18d9c <fts_children@@Base+0x84c>
   18d90:	add	r1, r1, #8
   18d94:	cmp	r1, ip
   18d98:	bxeq	lr
   18d9c:	ldr	r3, [r1, #-8]
   18da0:	cmp	r3, #0
   18da4:	beq	18d90 <fts_children@@Base+0x840>
   18da8:	ldr	r3, [r1, #-4]
   18dac:	mov	r2, #1
   18db0:	cmp	r3, #0
   18db4:	beq	18dc8 <fts_children@@Base+0x878>
   18db8:	ldr	r3, [r3, #4]
   18dbc:	add	r2, r2, #1
   18dc0:	cmp	r3, #0
   18dc4:	bne	18db8 <fts_children@@Base+0x868>
   18dc8:	cmp	r0, r2
   18dcc:	movcc	r0, r2
   18dd0:	b	18d90 <fts_children@@Base+0x840>
   18dd4:	mov	r0, #0
   18dd8:	bx	lr
   18ddc:	ldm	r0, {r1, r3}
   18de0:	push	{lr}		; (str lr, [sp, #-4]!)
   18de4:	cmp	r1, r3
   18de8:	bcs	18e78 <fts_children@@Base+0x928>
   18dec:	sub	ip, r3, #1
   18df0:	sub	ip, ip, r1
   18df4:	add	r3, r1, #16
   18df8:	bic	ip, ip, #7
   18dfc:	mov	r2, #0
   18e00:	add	ip, ip, r3
   18e04:	add	r1, r1, #8
   18e08:	mov	lr, r2
   18e0c:	b	18e1c <fts_children@@Base+0x8cc>
   18e10:	add	r1, r1, #8
   18e14:	cmp	r1, ip
   18e18:	beq	18e58 <fts_children@@Base+0x908>
   18e1c:	ldr	r3, [r1, #-8]
   18e20:	cmp	r3, #0
   18e24:	beq	18e10 <fts_children@@Base+0x8c0>
   18e28:	ldr	r3, [r1, #-4]
   18e2c:	add	lr, lr, #1
   18e30:	cmp	r3, #0
   18e34:	add	r2, r2, #1
   18e38:	beq	18e10 <fts_children@@Base+0x8c0>
   18e3c:	ldr	r3, [r3, #4]
   18e40:	add	r2, r2, #1
   18e44:	cmp	r3, #0
   18e48:	bne	18e3c <fts_children@@Base+0x8ec>
   18e4c:	add	r1, r1, #8
   18e50:	cmp	r1, ip
   18e54:	bne	18e1c <fts_children@@Base+0x8cc>
   18e58:	ldr	r3, [r0, #12]
   18e5c:	cmp	r3, lr
   18e60:	ldreq	r0, [r0, #16]
   18e64:	subeq	r0, r0, r2
   18e68:	clzeq	r0, r0
   18e6c:	lsreq	r0, r0, #5
   18e70:	movne	r0, #0
   18e74:	pop	{pc}		; (ldr pc, [sp], #4)
   18e78:	mov	r2, #0
   18e7c:	mov	lr, r2
   18e80:	b	18e58 <fts_children@@Base+0x908>
   18e84:	push	{r4, r5, r6, r7, lr}
   18e88:	mov	r4, r1
   18e8c:	ldr	r2, [r0]
   18e90:	ldr	r1, [r0, #4]
   18e94:	sub	sp, sp, #12
   18e98:	cmp	r2, r1
   18e9c:	ldr	r3, [r0, #16]
   18ea0:	ldrd	r6, [r0, #8]
   18ea4:	bcs	18f88 <fts_children@@Base+0xa38>
   18ea8:	sub	ip, r1, #1
   18eac:	sub	ip, ip, r2
   18eb0:	bic	ip, ip, #7
   18eb4:	add	r1, r2, #16
   18eb8:	add	ip, ip, r1
   18ebc:	add	r0, r2, #8
   18ec0:	mov	r5, #0
   18ec4:	b	18ed4 <fts_children@@Base+0x984>
   18ec8:	add	r0, r0, #8
   18ecc:	cmp	r0, ip
   18ed0:	beq	18f14 <fts_children@@Base+0x9c4>
   18ed4:	ldr	r2, [r0, #-8]
   18ed8:	cmp	r2, #0
   18edc:	beq	18ec8 <fts_children@@Base+0x978>
   18ee0:	ldr	r2, [r0, #-4]
   18ee4:	mov	r1, #1
   18ee8:	cmp	r2, #0
   18eec:	beq	18f00 <fts_children@@Base+0x9b0>
   18ef0:	ldr	r2, [r2, #4]
   18ef4:	add	r1, r1, #1
   18ef8:	cmp	r2, #0
   18efc:	bne	18ef0 <fts_children@@Base+0x9a0>
   18f00:	cmp	r5, r1
   18f04:	add	r0, r0, #8
   18f08:	movcc	r5, r1
   18f0c:	cmp	r0, ip
   18f10:	bne	18ed4 <fts_children@@Base+0x984>
   18f14:	ldr	r2, [pc, #124]	; 18f98 <fts_children@@Base+0xa48>
   18f18:	mov	r1, #1
   18f1c:	mov	r0, r4
   18f20:	bl	112c0 <__fprintf_chk@plt>
   18f24:	mov	r3, r6
   18f28:	ldr	r2, [pc, #108]	; 18f9c <fts_children@@Base+0xa4c>
   18f2c:	mov	r1, #1
   18f30:	mov	r0, r4
   18f34:	bl	112c0 <__fprintf_chk@plt>
   18f38:	vmov	s15, r7
   18f3c:	vldr	d5, [pc, #76]	; 18f90 <fts_children@@Base+0xa40>
   18f40:	mov	r3, r7
   18f44:	ldr	r2, [pc, #84]	; 18fa0 <fts_children@@Base+0xa50>
   18f48:	vcvt.f64.u32	d6, s15
   18f4c:	vmov	s15, r6
   18f50:	mov	r1, #1
   18f54:	mov	r0, r4
   18f58:	vcvt.f64.u32	d7, s15
   18f5c:	vmul.f64	d6, d6, d5
   18f60:	vdiv.f64	d5, d6, d7
   18f64:	vstr	d5, [sp]
   18f68:	bl	112c0 <__fprintf_chk@plt>
   18f6c:	mov	r3, r5
   18f70:	mov	r0, r4
   18f74:	ldr	r2, [pc, #40]	; 18fa4 <fts_children@@Base+0xa54>
   18f78:	mov	r1, #1
   18f7c:	add	sp, sp, #12
   18f80:	pop	{r4, r5, r6, r7, lr}
   18f84:	b	112c0 <__fprintf_chk@plt>
   18f88:	mov	r5, #0
   18f8c:	b	18f14 <fts_children@@Base+0x9c4>
   18f90:	andeq	r0, r0, r0
   18f94:	subsmi	r0, r9, r0
   18f98:	andeq	fp, r1, r4, lsr #15
   18f9c:			; <UNDEFINED> instruction: 0x0001b7bc
   18fa0:	ldrdeq	fp, [r1], -r4
   18fa4:	strdeq	fp, [r1], -r8
   18fa8:	push	{r4, r5, r6, lr}
   18fac:	mov	r6, r0
   18fb0:	mov	r5, r1
   18fb4:	bl	189ec <fts_children@@Base+0x49c>
   18fb8:	ldr	r3, [r0]
   18fbc:	cmp	r3, #0
   18fc0:	beq	18ffc <fts_children@@Base+0xaac>
   18fc4:	mov	r4, r0
   18fc8:	b	18fd0 <fts_children@@Base+0xa80>
   18fcc:	ldr	r3, [r4]
   18fd0:	cmp	r3, r5
   18fd4:	mov	r1, r3
   18fd8:	mov	r0, r5
   18fdc:	beq	19008 <fts_children@@Base+0xab8>
   18fe0:	ldr	r3, [r6, #28]
   18fe4:	blx	r3
   18fe8:	cmp	r0, #0
   18fec:	bne	19004 <fts_children@@Base+0xab4>
   18ff0:	ldr	r4, [r4, #4]
   18ff4:	cmp	r4, #0
   18ff8:	bne	18fcc <fts_children@@Base+0xa7c>
   18ffc:	mov	r0, #0
   19000:	pop	{r4, r5, r6, pc}
   19004:	ldr	r5, [r4]
   19008:	mov	r0, r5
   1900c:	pop	{r4, r5, r6, pc}
   19010:	ldr	r3, [r0, #16]
   19014:	cmp	r3, #0
   19018:	beq	19068 <fts_children@@Base+0xb18>
   1901c:	ldr	r3, [r0]
   19020:	ldr	r2, [r0, #4]
   19024:	cmp	r3, r2
   19028:	bcs	19060 <fts_children@@Base+0xb10>
   1902c:	ldr	r0, [r3]
   19030:	cmp	r0, #0
   19034:	bxne	lr
   19038:	sub	r2, r2, #1
   1903c:	sub	r2, r2, r3
   19040:	bic	r2, r2, #7
   19044:	add	r2, r3, r2
   19048:	b	19058 <fts_children@@Base+0xb08>
   1904c:	ldr	r0, [r3, #8]!
   19050:	cmp	r0, #0
   19054:	bxne	lr
   19058:	cmp	r3, r2
   1905c:	bne	1904c <fts_children@@Base+0xafc>
   19060:	push	{r4, lr}
   19064:	bl	11398 <abort@plt>
   19068:	mov	r0, r3
   1906c:	bx	lr
   19070:	push	{r4, r5, r6, lr}
   19074:	mov	r5, r0
   19078:	mov	r4, r1
   1907c:	bl	189ec <fts_children@@Base+0x49c>
   19080:	mov	r2, r0
   19084:	mov	r3, r0
   19088:	b	19094 <fts_children@@Base+0xb44>
   1908c:	cmp	r3, #0
   19090:	beq	190a8 <fts_children@@Base+0xb58>
   19094:	ldm	r3, {r1, r3}
   19098:	cmp	r1, r4
   1909c:	bne	1908c <fts_children@@Base+0xb3c>
   190a0:	cmp	r3, #0
   190a4:	bne	190d0 <fts_children@@Base+0xb80>
   190a8:	ldr	r3, [r5, #4]
   190ac:	b	190bc <fts_children@@Base+0xb6c>
   190b0:	ldr	r0, [r2]
   190b4:	cmp	r0, #0
   190b8:	popne	{r4, r5, r6, pc}
   190bc:	add	r2, r2, #8
   190c0:	cmp	r3, r2
   190c4:	bhi	190b0 <fts_children@@Base+0xb60>
   190c8:	mov	r0, #0
   190cc:	pop	{r4, r5, r6, pc}
   190d0:	ldr	r0, [r3]
   190d4:	pop	{r4, r5, r6, pc}
   190d8:	push	{r4, r5, lr}
   190dc:	ldm	r0, {r5, lr}
   190e0:	cmp	lr, r5
   190e4:	bls	19168 <fts_children@@Base+0xc18>
   190e8:	mov	ip, #0
   190ec:	ldr	r3, [r5]
   190f0:	cmp	r3, #0
   190f4:	bne	19110 <fts_children@@Base+0xbc0>
   190f8:	add	r5, r5, #8
   190fc:	cmp	lr, r5
   19100:	bhi	190ec <fts_children@@Base+0xb9c>
   19104:	mov	r2, ip
   19108:	mov	r0, r2
   1910c:	pop	{r4, r5, pc}
   19110:	cmp	r2, ip
   19114:	bls	19104 <fts_children@@Base+0xbb4>
   19118:	str	r3, [r1, ip, lsl #2]
   1911c:	ldr	r3, [r5, #4]
   19120:	add	r4, ip, #1
   19124:	cmp	r3, #0
   19128:	add	lr, r1, ip, lsl #2
   1912c:	beq	1915c <fts_children@@Base+0xc0c>
   19130:	mov	ip, r4
   19134:	cmp	r2, ip
   19138:	beq	19108 <fts_children@@Base+0xbb8>
   1913c:	ldr	r4, [r3]
   19140:	add	ip, ip, #1
   19144:	str	r4, [lr, #4]!
   19148:	ldr	r3, [r3, #4]
   1914c:	cmp	r3, #0
   19150:	bne	19134 <fts_children@@Base+0xbe4>
   19154:	ldr	lr, [r0, #4]
   19158:	b	190f8 <fts_children@@Base+0xba8>
   1915c:	ldr	lr, [r0, #4]
   19160:	mov	ip, r4
   19164:	b	190f8 <fts_children@@Base+0xba8>
   19168:	mov	r2, #0
   1916c:	b	19108 <fts_children@@Base+0xbb8>
   19170:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19174:	ldr	r3, [r0, #4]
   19178:	ldr	r8, [r0]
   1917c:	cmp	r3, r8
   19180:	bls	191e8 <fts_children@@Base+0xc98>
   19184:	mov	r7, r2
   19188:	mov	r6, r1
   1918c:	mov	r9, r0
   19190:	mov	r5, #0
   19194:	ldr	r0, [r8]
   19198:	cmp	r0, #0
   1919c:	bne	191b4 <fts_children@@Base+0xc64>
   191a0:	add	r8, r8, #8
   191a4:	cmp	r3, r8
   191a8:	bhi	19194 <fts_children@@Base+0xc44>
   191ac:	mov	r0, r5
   191b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   191b4:	mov	r4, r8
   191b8:	b	191c0 <fts_children@@Base+0xc70>
   191bc:	ldr	r0, [r4]
   191c0:	mov	r1, r7
   191c4:	blx	r6
   191c8:	cmp	r0, #0
   191cc:	beq	191ac <fts_children@@Base+0xc5c>
   191d0:	ldr	r4, [r4, #4]
   191d4:	add	r5, r5, #1
   191d8:	cmp	r4, #0
   191dc:	bne	191bc <fts_children@@Base+0xc6c>
   191e0:	ldr	r3, [r9, #4]
   191e4:	b	191a0 <fts_children@@Base+0xc50>
   191e8:	mov	r5, #0
   191ec:	b	191ac <fts_children@@Base+0xc5c>
   191f0:	push	{r4, r5, r6, lr}
   191f4:	mov	r4, r0
   191f8:	ldrb	r0, [r0]
   191fc:	cmp	r0, #0
   19200:	beq	19230 <fts_children@@Base+0xce0>
   19204:	mov	r5, r1
   19208:	mov	r1, #0
   1920c:	rsb	r1, r1, r1, lsl #5
   19210:	add	r0, r1, r0
   19214:	mov	r1, r5
   19218:	bl	19f84 <fts_children@@Base+0x1a34>
   1921c:	ldrb	r0, [r4, #1]!
   19220:	cmp	r0, #0
   19224:	bne	1920c <fts_children@@Base+0xcbc>
   19228:	mov	r0, r1
   1922c:	pop	{r4, r5, r6, pc}
   19230:	mov	r1, r0
   19234:	mov	r0, r1
   19238:	pop	{r4, r5, r6, pc}
   1923c:	push	{lr}		; (str lr, [sp, #-4]!)
   19240:	mov	ip, r0
   19244:	ldr	lr, [pc, #16]	; 1925c <fts_children@@Base+0xd0c>
   19248:	ldm	lr!, {r0, r1, r2, r3}
   1924c:	ldr	lr, [lr]
   19250:	stmia	ip!, {r0, r1, r2, r3}
   19254:	str	lr, [ip]
   19258:	pop	{pc}		; (ldr pc, [sp], #4)
   1925c:	muleq	r1, r0, r7
   19260:	push	{r4, r5, r6, r7, r8, lr}
   19264:	sub	sp, sp, #8
   19268:	cmp	r2, #0
   1926c:	ldr	ip, [pc, #300]	; 193a0 <fts_children@@Base+0xe50>
   19270:	str	r0, [sp, #4]
   19274:	ldr	r5, [pc, #296]	; 193a4 <fts_children@@Base+0xe54>
   19278:	mov	r0, #40	; 0x28
   1927c:	movne	r5, r2
   19280:	cmp	r3, #0
   19284:	movne	r8, r3
   19288:	moveq	r8, ip
   1928c:	mov	r6, r1
   19290:	bl	1120c <malloc@plt>
   19294:	subs	r4, r0, #0
   19298:	beq	19364 <fts_children@@Base+0xe14>
   1929c:	cmp	r6, #0
   192a0:	add	r0, r4, #20
   192a4:	beq	19340 <fts_children@@Base+0xdf0>
   192a8:	str	r6, [r4, #20]
   192ac:	bl	18b38 <fts_children@@Base+0x5e8>
   192b0:	cmp	r0, #0
   192b4:	beq	19358 <fts_children@@Base+0xe08>
   192b8:	ldrb	r3, [r6, #16]
   192bc:	cmp	r3, #0
   192c0:	vldreq	s13, [r6, #8]
   192c4:	beq	19370 <fts_children@@Base+0xe20>
   192c8:	ldr	r0, [sp, #4]
   192cc:	bl	18930 <fts_children@@Base+0x3e0>
   192d0:	lsrs	r3, r0, #30
   192d4:	movne	r7, #1
   192d8:	moveq	r7, #0
   192dc:	tst	r0, #536870912	; 0x20000000
   192e0:	mov	r6, r0
   192e4:	bne	19358 <fts_children@@Base+0xe08>
   192e8:	cmp	r7, #0
   192ec:	bne	19358 <fts_children@@Base+0xe08>
   192f0:	cmp	r0, #0
   192f4:	str	r0, [r4, #8]
   192f8:	beq	19358 <fts_children@@Base+0xe08>
   192fc:	mov	r1, #8
   19300:	bl	110b0 <calloc@plt>
   19304:	cmp	r0, #0
   19308:	str	r0, [r4]
   1930c:	beq	19358 <fts_children@@Base+0xe08>
   19310:	ldr	r3, [sp, #32]
   19314:	add	r0, r0, r6, lsl #3
   19318:	str	r0, [r4, #4]
   1931c:	str	r7, [r4, #12]
   19320:	mov	r0, r4
   19324:	str	r7, [r4, #16]
   19328:	str	r5, [r4, #24]
   1932c:	str	r8, [r4, #28]
   19330:	str	r3, [r4, #32]
   19334:	str	r7, [r4, #36]	; 0x24
   19338:	add	sp, sp, #8
   1933c:	pop	{r4, r5, r6, r7, r8, pc}
   19340:	ldr	r3, [pc, #96]	; 193a8 <fts_children@@Base+0xe58>
   19344:	str	r3, [r4, #20]
   19348:	bl	18b38 <fts_children@@Base+0x5e8>
   1934c:	cmp	r0, #0
   19350:	vldrne	s13, [pc, #64]	; 19398 <fts_children@@Base+0xe48>
   19354:	bne	19370 <fts_children@@Base+0xe20>
   19358:	mov	r0, r4
   1935c:	bl	11110 <free@plt>
   19360:	mov	r4, #0
   19364:	mov	r0, r4
   19368:	add	sp, sp, #8
   1936c:	pop	{r4, r5, r6, r7, r8, pc}
   19370:	vldr	s15, [sp, #4]
   19374:	vldr	s14, [pc, #32]	; 1939c <fts_children@@Base+0xe4c>
   19378:	vcvt.f32.u32	s12, s15
   1937c:	vdiv.f32	s15, s12, s13
   19380:	vcmpe.f32	s15, s14
   19384:	vmrs	APSR_nzcv, fpscr
   19388:	bge	19358 <fts_children@@Base+0xe08>
   1938c:	vcvt.u32.f32	s15, s15
   19390:	vstr	s15, [sp, #4]
   19394:	b	192c8 <fts_children@@Base+0xd78>
   19398:	svccc	0x004ccccd
   1939c:	svcmi	0x00800000
   193a0:	ldrdeq	r8, [r1], -ip
   193a4:	andeq	r8, r1, r8, asr #19
   193a8:	muleq	r1, r0, r7
   193ac:	push	{r4, r5, r6, r7, r8, lr}
   193b0:	mov	r5, r0
   193b4:	ldr	r6, [r0]
   193b8:	ldr	r2, [r0, #4]
   193bc:	cmp	r6, r2
   193c0:	addcc	r6, r6, #8
   193c4:	movcc	r7, #0
   193c8:	bcc	193dc <fts_children@@Base+0xe8c>
   193cc:	b	19450 <fts_children@@Base+0xf00>
   193d0:	cmp	r2, r6
   193d4:	add	r6, r6, #8
   193d8:	bls	19450 <fts_children@@Base+0xf00>
   193dc:	ldr	r3, [r6, #-8]
   193e0:	cmp	r3, #0
   193e4:	beq	193d0 <fts_children@@Base+0xe80>
   193e8:	ldr	r4, [r6, #-4]
   193ec:	ldr	r2, [r5, #32]
   193f0:	cmp	r4, #0
   193f4:	beq	19428 <fts_children@@Base+0xed8>
   193f8:	cmp	r2, #0
   193fc:	beq	1940c <fts_children@@Base+0xebc>
   19400:	ldr	r0, [r4]
   19404:	blx	r2
   19408:	ldr	r2, [r5, #32]
   1940c:	ldr	r3, [r4, #4]
   19410:	ldr	r1, [r5, #36]	; 0x24
   19414:	str	r7, [r4]
   19418:	str	r1, [r4, #4]
   1941c:	str	r4, [r5, #36]	; 0x24
   19420:	subs	r4, r3, #0
   19424:	bne	193f8 <fts_children@@Base+0xea8>
   19428:	cmp	r2, #0
   1942c:	beq	19438 <fts_children@@Base+0xee8>
   19430:	ldr	r0, [r6, #-8]
   19434:	blx	r2
   19438:	str	r7, [r6, #-8]
   1943c:	str	r7, [r6, #-4]
   19440:	ldr	r2, [r5, #4]
   19444:	cmp	r2, r6
   19448:	add	r6, r6, #8
   1944c:	bhi	193dc <fts_children@@Base+0xe8c>
   19450:	mov	r3, #0
   19454:	str	r3, [r5, #12]
   19458:	str	r3, [r5, #16]
   1945c:	pop	{r4, r5, r6, r7, r8, pc}
   19460:	ldr	r3, [r0, #32]
   19464:	push	{r4, r5, r6, lr}
   19468:	cmp	r3, #0
   1946c:	mov	r6, r0
   19470:	ldr	r5, [r0]
   19474:	ldr	r3, [r0, #4]
   19478:	beq	194e0 <fts_children@@Base+0xf90>
   1947c:	ldr	r2, [r0, #16]
   19480:	cmp	r2, #0
   19484:	beq	194e0 <fts_children@@Base+0xf90>
   19488:	cmp	r5, r3
   1948c:	bcc	194a0 <fts_children@@Base+0xf50>
   19490:	b	19514 <fts_children@@Base+0xfc4>
   19494:	add	r5, r5, #8
   19498:	cmp	r3, r5
   1949c:	bls	194dc <fts_children@@Base+0xf8c>
   194a0:	ldr	r0, [r5]
   194a4:	cmp	r0, #0
   194a8:	beq	19494 <fts_children@@Base+0xf44>
   194ac:	mov	r4, r5
   194b0:	b	194b8 <fts_children@@Base+0xf68>
   194b4:	ldr	r0, [r4]
   194b8:	ldr	r3, [r6, #32]
   194bc:	blx	r3
   194c0:	ldr	r4, [r4, #4]
   194c4:	cmp	r4, #0
   194c8:	bne	194b4 <fts_children@@Base+0xf64>
   194cc:	ldr	r3, [r6, #4]
   194d0:	add	r5, r5, #8
   194d4:	cmp	r3, r5
   194d8:	bhi	194a0 <fts_children@@Base+0xf50>
   194dc:	ldr	r5, [r6]
   194e0:	cmp	r5, r3
   194e4:	bcs	19514 <fts_children@@Base+0xfc4>
   194e8:	ldr	r0, [r5, #4]
   194ec:	cmp	r0, #0
   194f0:	beq	19508 <fts_children@@Base+0xfb8>
   194f4:	ldr	r4, [r0, #4]
   194f8:	bl	11110 <free@plt>
   194fc:	subs	r0, r4, #0
   19500:	bne	194f4 <fts_children@@Base+0xfa4>
   19504:	ldr	r3, [r6, #4]
   19508:	add	r5, r5, #8
   1950c:	cmp	r3, r5
   19510:	bhi	194e8 <fts_children@@Base+0xf98>
   19514:	ldr	r0, [r6, #36]	; 0x24
   19518:	cmp	r0, #0
   1951c:	beq	19530 <fts_children@@Base+0xfe0>
   19520:	ldr	r4, [r0, #4]
   19524:	bl	11110 <free@plt>
   19528:	subs	r0, r4, #0
   1952c:	bne	19520 <fts_children@@Base+0xfd0>
   19530:	ldr	r0, [r6]
   19534:	bl	11110 <free@plt>
   19538:	mov	r0, r6
   1953c:	pop	{r4, r5, r6, lr}
   19540:	b	11110 <free@plt>
   19544:	push	{r4, r5, r6, r7, r8, lr}
   19548:	sub	sp, sp, #56	; 0x38
   1954c:	ldr	r8, [r0, #20]
   19550:	ldr	r7, [pc, #392]	; 196e0 <fts_children@@Base+0x1190>
   19554:	mov	r6, r0
   19558:	ldrb	r3, [r8, #16]
   1955c:	ldr	r2, [r7]
   19560:	str	r1, [sp, #4]
   19564:	cmp	r3, #0
   19568:	str	r2, [sp, #52]	; 0x34
   1956c:	bne	19598 <fts_children@@Base+0x1048>
   19570:	vmov	s15, r1
   19574:	vldr	s13, [r8, #8]
   19578:	vldr	s14, [pc, #348]	; 196dc <fts_children@@Base+0x118c>
   1957c:	vcvt.f32.u32	s12, s15
   19580:	vdiv.f32	s15, s12, s13
   19584:	vcmpe.f32	s15, s14
   19588:	vmrs	APSR_nzcv, fpscr
   1958c:	vcvtlt.u32.f32	s15, s15
   19590:	vstrlt	s15, [sp, #4]
   19594:	bge	195c8 <fts_children@@Base+0x1078>
   19598:	ldr	r0, [sp, #4]
   1959c:	bl	18930 <fts_children@@Base+0x3e0>
   195a0:	lsrs	r3, r0, #30
   195a4:	movne	r4, #1
   195a8:	moveq	r4, #0
   195ac:	tst	r0, #536870912	; 0x20000000
   195b0:	movne	r4, #1
   195b4:	cmp	r0, #0
   195b8:	moveq	r4, #1
   195bc:	cmp	r4, #0
   195c0:	mov	r5, r0
   195c4:	beq	195e8 <fts_children@@Base+0x1098>
   195c8:	mov	r4, #0
   195cc:	ldr	r2, [sp, #52]	; 0x34
   195d0:	ldr	r3, [r7]
   195d4:	mov	r0, r4
   195d8:	cmp	r2, r3
   195dc:	bne	196d4 <fts_children@@Base+0x1184>
   195e0:	add	sp, sp, #56	; 0x38
   195e4:	pop	{r4, r5, r6, r7, r8, pc}
   195e8:	ldr	r3, [r6, #8]
   195ec:	cmp	r3, r0
   195f0:	beq	1969c <fts_children@@Base+0x114c>
   195f4:	mov	r1, #8
   195f8:	bl	110b0 <calloc@plt>
   195fc:	cmp	r0, #0
   19600:	str	r0, [sp, #12]
   19604:	beq	195c8 <fts_children@@Base+0x1078>
   19608:	add	r0, r0, r5, lsl #3
   1960c:	ldr	r1, [r6, #32]
   19610:	str	r0, [sp, #16]
   19614:	ldr	r0, [r6, #28]
   19618:	ldr	ip, [r6, #24]
   1961c:	ldr	r3, [r6, #36]	; 0x24
   19620:	mov	r2, r4
   19624:	str	r0, [sp, #40]	; 0x28
   19628:	str	r1, [sp, #44]	; 0x2c
   1962c:	add	r0, sp, #12
   19630:	mov	r1, r6
   19634:	str	r4, [sp, #24]
   19638:	str	r4, [sp, #28]
   1963c:	str	r5, [sp, #20]
   19640:	str	r8, [sp, #32]
   19644:	str	ip, [sp, #36]	; 0x24
   19648:	str	r3, [sp, #48]	; 0x30
   1964c:	bl	18be8 <fts_children@@Base+0x698>
   19650:	subs	r4, r0, #0
   19654:	bne	196a4 <fts_children@@Base+0x1154>
   19658:	ldr	r3, [sp, #48]	; 0x30
   1965c:	mov	r2, #1
   19660:	str	r3, [r6, #36]	; 0x24
   19664:	add	r1, sp, #12
   19668:	mov	r0, r6
   1966c:	bl	18be8 <fts_children@@Base+0x698>
   19670:	cmp	r0, #0
   19674:	beq	196d8 <fts_children@@Base+0x1188>
   19678:	add	r1, sp, #12
   1967c:	mov	r0, r6
   19680:	mov	r2, r4
   19684:	bl	18be8 <fts_children@@Base+0x698>
   19688:	cmp	r0, #0
   1968c:	beq	196d8 <fts_children@@Base+0x1188>
   19690:	ldr	r0, [sp, #12]
   19694:	bl	11110 <free@plt>
   19698:	b	195cc <fts_children@@Base+0x107c>
   1969c:	mov	r4, #1
   196a0:	b	195cc <fts_children@@Base+0x107c>
   196a4:	ldr	r0, [r6]
   196a8:	bl	11110 <free@plt>
   196ac:	ldrd	r2, [sp, #12]
   196b0:	ldr	r1, [sp, #20]
   196b4:	str	r2, [r6]
   196b8:	str	r3, [r6, #4]
   196bc:	ldr	r2, [sp, #24]
   196c0:	ldr	r3, [sp, #48]	; 0x30
   196c4:	str	r1, [r6, #8]
   196c8:	str	r2, [r6, #12]
   196cc:	str	r3, [r6, #36]	; 0x24
   196d0:	b	195cc <fts_children@@Base+0x107c>
   196d4:	bl	11164 <__stack_chk_fail@plt>
   196d8:	bl	11398 <abort@plt>
   196dc:	svcmi	0x00800000
   196e0:	andeq	fp, r2, r8, lsl #30
   196e4:	push	{r4, r5, r6, r7, lr}
   196e8:	sub	sp, sp, #12
   196ec:	ldr	r6, [pc, #404]	; 19888 <fts_children@@Base+0x1338>
   196f0:	subs	r7, r1, #0
   196f4:	ldr	r3, [r6]
   196f8:	str	r3, [sp, #4]
   196fc:	beq	1987c <fts_children@@Base+0x132c>
   19700:	mov	r5, r2
   19704:	mov	r3, #0
   19708:	mov	r2, sp
   1970c:	mov	r4, r0
   19710:	bl	18a20 <fts_children@@Base+0x4d0>
   19714:	cmp	r0, #0
   19718:	beq	19744 <fts_children@@Base+0x11f4>
   1971c:	cmp	r5, #0
   19720:	moveq	r0, r5
   19724:	strne	r0, [r5]
   19728:	movne	r0, #0
   1972c:	ldr	r2, [sp, #4]
   19730:	ldr	r3, [r6]
   19734:	cmp	r2, r3
   19738:	bne	19880 <fts_children@@Base+0x1330>
   1973c:	add	sp, sp, #12
   19740:	pop	{r4, r5, r6, r7, pc}
   19744:	vldr	s15, [r4, #8]
   19748:	ldr	r3, [r4, #20]
   1974c:	vldr	s14, [r4, #12]
   19750:	vcvt.f32.u32	s15, s15
   19754:	vldr	s13, [r3, #8]
   19758:	vcvt.f32.u32	s14, s14
   1975c:	vmul.f32	s15, s15, s13
   19760:	vcmpe.f32	s14, s15
   19764:	vmrs	APSR_nzcv, fpscr
   19768:	bgt	197b4 <fts_children@@Base+0x1264>
   1976c:	ldr	r5, [sp]
   19770:	ldr	r3, [r5]
   19774:	cmp	r3, #0
   19778:	beq	19810 <fts_children@@Base+0x12c0>
   1977c:	ldr	r0, [r4, #36]	; 0x24
   19780:	cmp	r0, #0
   19784:	beq	19834 <fts_children@@Base+0x12e4>
   19788:	ldr	r3, [r0, #4]
   1978c:	str	r3, [r4, #36]	; 0x24
   19790:	ldr	r3, [r4, #16]
   19794:	ldr	r2, [r5, #4]
   19798:	add	r3, r3, #1
   1979c:	str	r7, [r0]
   197a0:	str	r2, [r0, #4]
   197a4:	str	r0, [r5, #4]
   197a8:	mov	r0, #1
   197ac:	str	r3, [r4, #16]
   197b0:	b	1972c <fts_children@@Base+0x11dc>
   197b4:	add	r0, r4, #20
   197b8:	bl	18b38 <fts_children@@Base+0x5e8>
   197bc:	vldr	s15, [r4, #8]
   197c0:	ldr	r3, [r4, #20]
   197c4:	vldr	s14, [r4, #12]
   197c8:	vcvt.f32.u32	s15, s15
   197cc:	vldr	s13, [r3, #8]
   197d0:	vcvt.f32.u32	s14, s14
   197d4:	vmul.f32	s12, s13, s15
   197d8:	vcmpe.f32	s14, s12
   197dc:	vmrs	APSR_nzcv, fpscr
   197e0:	ble	1976c <fts_children@@Base+0x121c>
   197e4:	vldr	s14, [r3, #12]
   197e8:	ldrb	r3, [r3, #16]
   197ec:	vmul.f32	s15, s15, s14
   197f0:	cmp	r3, #0
   197f4:	vldr	s14, [pc, #136]	; 19884 <fts_children@@Base+0x1334>
   197f8:	vmuleq.f32	s15, s15, s13
   197fc:	vcmpe.f32	s15, s14
   19800:	vmrs	APSR_nzcv, fpscr
   19804:	blt	19848 <fts_children@@Base+0x12f8>
   19808:	mvn	r0, #0
   1980c:	b	1972c <fts_children@@Base+0x11dc>
   19810:	ldr	r2, [r4, #16]
   19814:	ldr	r3, [r4, #12]
   19818:	add	r2, r2, #1
   1981c:	add	r3, r3, #1
   19820:	str	r7, [r5]
   19824:	mov	r0, #1
   19828:	str	r2, [r4, #16]
   1982c:	str	r3, [r4, #12]
   19830:	b	1972c <fts_children@@Base+0x11dc>
   19834:	mov	r0, #8
   19838:	bl	1120c <malloc@plt>
   1983c:	cmp	r0, #0
   19840:	beq	19808 <fts_children@@Base+0x12b8>
   19844:	b	19790 <fts_children@@Base+0x1240>
   19848:	vcvt.u32.f32	s15, s15
   1984c:	mov	r0, r4
   19850:	vmov	r1, s15
   19854:	bl	19544 <fts_children@@Base+0xff4>
   19858:	cmp	r0, #0
   1985c:	beq	19808 <fts_children@@Base+0x12b8>
   19860:	mov	r2, sp
   19864:	mov	r3, #0
   19868:	mov	r1, r7
   1986c:	mov	r0, r4
   19870:	bl	18a20 <fts_children@@Base+0x4d0>
   19874:	cmp	r0, #0
   19878:	beq	1976c <fts_children@@Base+0x121c>
   1987c:	bl	11398 <abort@plt>
   19880:	bl	11164 <__stack_chk_fail@plt>
   19884:	svcmi	0x00800000
   19888:	andeq	fp, r2, r8, lsl #30
   1988c:	push	{r4, r5, lr}
   19890:	sub	sp, sp, #12
   19894:	ldr	r5, [pc, #68]	; 198e0 <fts_children@@Base+0x1390>
   19898:	mov	r2, sp
   1989c:	mov	r4, r1
   198a0:	ldr	r3, [r5]
   198a4:	str	r3, [sp, #4]
   198a8:	bl	196e4 <fts_children@@Base+0x1194>
   198ac:	cmn	r0, #1
   198b0:	moveq	r0, #0
   198b4:	beq	198c4 <fts_children@@Base+0x1374>
   198b8:	cmp	r0, #0
   198bc:	movne	r0, r4
   198c0:	ldreq	r0, [sp]
   198c4:	ldr	r2, [sp, #4]
   198c8:	ldr	r3, [r5]
   198cc:	cmp	r2, r3
   198d0:	bne	198dc <fts_children@@Base+0x138c>
   198d4:	add	sp, sp, #12
   198d8:	pop	{r4, r5, pc}
   198dc:	bl	11164 <__stack_chk_fail@plt>
   198e0:	andeq	fp, r2, r8, lsl #30
   198e4:	push	{r4, r5, r6, r7, lr}
   198e8:	sub	sp, sp, #12
   198ec:	ldr	r5, [pc, #276]	; 19a08 <fts_children@@Base+0x14b8>
   198f0:	mov	r3, #1
   198f4:	mov	r2, sp
   198f8:	ldr	ip, [r5]
   198fc:	mov	r4, r0
   19900:	str	ip, [sp, #4]
   19904:	bl	18a20 <fts_children@@Base+0x4d0>
   19908:	subs	r6, r0, #0
   1990c:	beq	1992c <fts_children@@Base+0x13dc>
   19910:	ldr	r2, [sp]
   19914:	ldr	r3, [r4, #16]
   19918:	ldr	r2, [r2]
   1991c:	sub	r3, r3, #1
   19920:	cmp	r2, #0
   19924:	str	r3, [r4, #16]
   19928:	beq	19948 <fts_children@@Base+0x13f8>
   1992c:	ldr	r2, [sp, #4]
   19930:	ldr	r3, [r5]
   19934:	mov	r0, r6
   19938:	cmp	r2, r3
   1993c:	bne	19a04 <fts_children@@Base+0x14b4>
   19940:	add	sp, sp, #12
   19944:	pop	{r4, r5, r6, r7, pc}
   19948:	vldr	s15, [r4, #8]
   1994c:	ldr	r3, [r4, #12]
   19950:	ldr	r2, [r4, #20]
   19954:	sub	r3, r3, #1
   19958:	vcvt.f32.u32	s14, s15
   1995c:	vldr	s13, [r2]
   19960:	vmov	s15, r3
   19964:	str	r3, [r4, #12]
   19968:	vcvt.f32.u32	s15, s15
   1996c:	vmul.f32	s14, s14, s13
   19970:	vcmpe.f32	s15, s14
   19974:	vmrs	APSR_nzcv, fpscr
   19978:	bpl	1992c <fts_children@@Base+0x13dc>
   1997c:	add	r0, r4, #20
   19980:	bl	18b38 <fts_children@@Base+0x5e8>
   19984:	vldr	s15, [r4, #8]
   19988:	ldr	r3, [r4, #20]
   1998c:	vldr	s13, [r4, #12]
   19990:	vcvt.f32.u32	s15, s15
   19994:	vldr	s14, [r3]
   19998:	vcvt.f32.u32	s13, s13
   1999c:	vmul.f32	s14, s15, s14
   199a0:	vcmpe.f32	s13, s14
   199a4:	vmrs	APSR_nzcv, fpscr
   199a8:	bpl	1992c <fts_children@@Base+0x13dc>
   199ac:	vldr	s14, [r3, #4]
   199b0:	ldrb	r2, [r3, #16]
   199b4:	mov	r0, r4
   199b8:	vmul.f32	s15, s15, s14
   199bc:	cmp	r2, #0
   199c0:	vldreq	s14, [r3, #8]
   199c4:	vmuleq.f32	s15, s15, s14
   199c8:	vcvt.u32.f32	s15, s15
   199cc:	vmov	r1, s15
   199d0:	bl	19544 <fts_children@@Base+0xff4>
   199d4:	cmp	r0, #0
   199d8:	bne	1992c <fts_children@@Base+0x13dc>
   199dc:	ldr	r0, [r4, #36]	; 0x24
   199e0:	cmp	r0, #0
   199e4:	beq	199f8 <fts_children@@Base+0x14a8>
   199e8:	ldr	r7, [r0, #4]
   199ec:	bl	11110 <free@plt>
   199f0:	subs	r0, r7, #0
   199f4:	bne	199e8 <fts_children@@Base+0x1498>
   199f8:	mov	r3, #0
   199fc:	str	r3, [r4, #36]	; 0x24
   19a00:	b	1992c <fts_children@@Base+0x13dc>
   19a04:	bl	11164 <__stack_chk_fail@plt>
   19a08:	andeq	fp, r2, r8, lsl #30
   19a0c:	mov	r3, #0
   19a10:	mov	r2, #1
   19a14:	str	r1, [r0]
   19a18:	str	r1, [r0, #4]
   19a1c:	str	r1, [r0, #8]
   19a20:	str	r1, [r0, #12]
   19a24:	str	r1, [r0, #16]
   19a28:	strb	r2, [r0, #28]
   19a2c:	str	r3, [r0, #20]
   19a30:	str	r3, [r0, #24]
   19a34:	bx	lr
   19a38:	ldrb	r0, [r0, #28]
   19a3c:	bx	lr
   19a40:	ldrb	ip, [r0, #28]
   19a44:	ldr	r3, [r0, #20]
   19a48:	mov	r2, r0
   19a4c:	eor	ip, ip, #1
   19a50:	add	r3, ip, r3
   19a54:	and	r3, r3, #3
   19a58:	ldr	r0, [r0, r3, lsl #2]
   19a5c:	str	r1, [r2, r3, lsl #2]
   19a60:	ldr	r1, [r2, #24]
   19a64:	str	r3, [r2, #20]
   19a68:	cmp	r1, r3
   19a6c:	addeq	ip, ip, r1
   19a70:	andeq	ip, ip, #3
   19a74:	mov	r3, #0
   19a78:	streq	ip, [r2, #24]
   19a7c:	strb	r3, [r2, #28]
   19a80:	bx	lr
   19a84:	ldrb	r3, [r0, #28]
   19a88:	cmp	r3, #0
   19a8c:	bne	19ac4 <fts_children@@Base+0x1574>
   19a90:	ldr	r3, [r0, #20]
   19a94:	ldr	r1, [r0, #16]
   19a98:	ldr	r2, [r0, r3, lsl #2]
   19a9c:	str	r1, [r0, r3, lsl #2]
   19aa0:	ldr	r1, [r0, #24]
   19aa4:	cmp	r3, r1
   19aa8:	addne	r3, r3, #3
   19aac:	moveq	r3, #1
   19ab0:	andne	r3, r3, #3
   19ab4:	strbeq	r3, [r0, #28]
   19ab8:	strne	r3, [r0, #20]
   19abc:	mov	r0, r2
   19ac0:	bx	lr
   19ac4:	push	{r4, lr}
   19ac8:	bl	11398 <abort@plt>
   19acc:	push	{r4, lr}
   19ad0:	mov	r0, #14
   19ad4:	bl	11320 <nl_langinfo@plt>
   19ad8:	cmp	r0, #0
   19adc:	beq	19af4 <fts_children@@Base+0x15a4>
   19ae0:	ldrb	r2, [r0]
   19ae4:	ldr	r3, [pc, #16]	; 19afc <fts_children@@Base+0x15ac>
   19ae8:	cmp	r2, #0
   19aec:	moveq	r0, r3
   19af0:	pop	{r4, pc}
   19af4:	ldr	r0, [pc]	; 19afc <fts_children@@Base+0x15ac>
   19af8:	pop	{r4, pc}
   19afc:	andeq	fp, r1, r0, lsl r8
   19b00:	push	{r2, r3}
   19b04:	push	{r4, lr}
   19b08:	sub	sp, sp, #8
   19b0c:	ldr	r4, [pc, #68]	; 19b58 <fts_children@@Base+0x1608>
   19b10:	ldr	r2, [sp, #16]
   19b14:	ands	r3, r2, #64	; 0x40
   19b18:	addne	r3, sp, #20
   19b1c:	ldr	ip, [r4]
   19b20:	strne	r3, [sp]
   19b24:	ldrne	r3, [sp, #20]
   19b28:	str	ip, [sp, #4]
   19b2c:	bl	11278 <openat64@plt>
   19b30:	bl	19b5c <fts_children@@Base+0x160c>
   19b34:	ldr	r2, [sp, #4]
   19b38:	ldr	r3, [r4]
   19b3c:	cmp	r2, r3
   19b40:	bne	19b54 <fts_children@@Base+0x1604>
   19b44:	add	sp, sp, #8
   19b48:	pop	{r4, lr}
   19b4c:	add	sp, sp, #8
   19b50:	bx	lr
   19b54:	bl	11164 <__stack_chk_fail@plt>
   19b58:	andeq	fp, r2, r8, lsl #30
   19b5c:	cmp	r0, #2
   19b60:	push	{r4, r5, r6, r7, r8, lr}
   19b64:	mov	r4, r0
   19b68:	bls	19b74 <fts_children@@Base+0x1624>
   19b6c:	mov	r0, r4
   19b70:	pop	{r4, r5, r6, r7, r8, pc}
   19b74:	bl	19d8c <fts_children@@Base+0x183c>
   19b78:	mov	r7, r0
   19b7c:	bl	11284 <__errno_location@plt>
   19b80:	mov	r5, r0
   19b84:	mov	r0, r4
   19b88:	ldr	r6, [r5]
   19b8c:	mov	r4, r7
   19b90:	bl	113a4 <close@plt>
   19b94:	str	r6, [r5]
   19b98:	mov	r0, r4
   19b9c:	pop	{r4, r5, r6, r7, r8, pc}
   19ba0:	push	{r4, r5, lr}
   19ba4:	sub	sp, sp, #12
   19ba8:	mov	r4, r0
   19bac:	bl	112b4 <fileno@plt>
   19bb0:	cmp	r0, #0
   19bb4:	mov	r0, r4
   19bb8:	blt	19c34 <fts_children@@Base+0x16e4>
   19bbc:	bl	11224 <__freading@plt>
   19bc0:	cmp	r0, #0
   19bc4:	bne	19c00 <fts_children@@Base+0x16b0>
   19bc8:	mov	r0, r4
   19bcc:	bl	16280 <__assert_fail@plt+0x4eac>
   19bd0:	cmp	r0, #0
   19bd4:	beq	19c30 <fts_children@@Base+0x16e0>
   19bd8:	bl	11284 <__errno_location@plt>
   19bdc:	mov	r5, r0
   19be0:	mov	r0, r4
   19be4:	ldr	r4, [r5]
   19be8:	bl	112cc <fclose@plt>
   19bec:	cmp	r4, #0
   19bf0:	mvnne	r0, #0
   19bf4:	strne	r4, [r5]
   19bf8:	add	sp, sp, #12
   19bfc:	pop	{r4, r5, pc}
   19c00:	mov	r0, r4
   19c04:	bl	112b4 <fileno@plt>
   19c08:	mov	r3, #1
   19c0c:	str	r3, [sp]
   19c10:	mov	r2, #0
   19c14:	mov	r3, #0
   19c18:	bl	111c4 <lseek64@plt>
   19c1c:	mvn	r3, #0
   19c20:	mvn	r2, #0
   19c24:	cmp	r1, r3
   19c28:	cmpeq	r0, r2
   19c2c:	bne	19bc8 <fts_children@@Base+0x1678>
   19c30:	mov	r0, r4
   19c34:	add	sp, sp, #12
   19c38:	pop	{r4, r5, lr}
   19c3c:	b	112cc <fclose@plt>
   19c40:	push	{r1, r2, r3}
   19c44:	push	{r4, r5, r6, r7, r8, lr}
   19c48:	sub	sp, sp, #12
   19c4c:	ldr	r4, [pc, #300]	; 19d80 <fts_children@@Base+0x1830>
   19c50:	ldr	r3, [pc, #300]	; 19d84 <fts_children@@Base+0x1834>
   19c54:	ldr	r1, [sp, #36]	; 0x24
   19c58:	ldr	r2, [r4]
   19c5c:	cmp	r1, r3
   19c60:	add	r3, sp, #40	; 0x28
   19c64:	str	r2, [sp, #4]
   19c68:	str	r3, [sp]
   19c6c:	bne	19d38 <fts_children@@Base+0x17e8>
   19c70:	ldr	r6, [pc, #272]	; 19d88 <fts_children@@Base+0x1838>
   19c74:	add	r3, sp, #44	; 0x2c
   19c78:	str	r3, [sp]
   19c7c:	ldr	r3, [r6]
   19c80:	ldr	r7, [sp, #40]	; 0x28
   19c84:	cmp	r3, #0
   19c88:	blt	19ccc <fts_children@@Base+0x177c>
   19c8c:	mov	r2, r7
   19c90:	mov	r8, r0
   19c94:	bl	112e4 <fcntl64@plt>
   19c98:	subs	r5, r0, #0
   19c9c:	blt	19d48 <fts_children@@Base+0x17f8>
   19ca0:	mov	r3, #1
   19ca4:	str	r3, [r6]
   19ca8:	ldr	r2, [sp, #4]
   19cac:	ldr	r3, [r4]
   19cb0:	mov	r0, r5
   19cb4:	cmp	r2, r3
   19cb8:	bne	19d7c <fts_children@@Base+0x182c>
   19cbc:	add	sp, sp, #12
   19cc0:	pop	{r4, r5, r6, r7, r8, lr}
   19cc4:	add	sp, sp, #12
   19cc8:	bx	lr
   19ccc:	mov	r2, r7
   19cd0:	mov	r1, #0
   19cd4:	bl	19c40 <fts_children@@Base+0x16f0>
   19cd8:	subs	r5, r0, #0
   19cdc:	blt	19ca8 <fts_children@@Base+0x1758>
   19ce0:	ldr	r3, [r6]
   19ce4:	cmn	r3, #1
   19ce8:	bne	19ca8 <fts_children@@Base+0x1758>
   19cec:	mov	r1, #1
   19cf0:	mov	r0, r5
   19cf4:	bl	112e4 <fcntl64@plt>
   19cf8:	subs	r2, r0, #0
   19cfc:	blt	19d18 <fts_children@@Base+0x17c8>
   19d00:	orr	r2, r2, #1
   19d04:	mov	r1, #2
   19d08:	mov	r0, r5
   19d0c:	bl	112e4 <fcntl64@plt>
   19d10:	cmn	r0, #1
   19d14:	bne	19ca8 <fts_children@@Base+0x1758>
   19d18:	bl	11284 <__errno_location@plt>
   19d1c:	mov	r6, r0
   19d20:	mov	r0, r5
   19d24:	ldr	r7, [r6]
   19d28:	mvn	r5, #0
   19d2c:	bl	113a4 <close@plt>
   19d30:	str	r7, [r6]
   19d34:	b	19ca8 <fts_children@@Base+0x1758>
   19d38:	ldr	r2, [sp, #40]	; 0x28
   19d3c:	bl	112e4 <fcntl64@plt>
   19d40:	mov	r5, r0
   19d44:	b	19ca8 <fts_children@@Base+0x1758>
   19d48:	bl	11284 <__errno_location@plt>
   19d4c:	ldr	r3, [r0]
   19d50:	cmp	r3, #22
   19d54:	bne	19ca0 <fts_children@@Base+0x1750>
   19d58:	mov	r2, r7
   19d5c:	mov	r0, r8
   19d60:	mov	r1, #0
   19d64:	bl	19c40 <fts_children@@Base+0x16f0>
   19d68:	subs	r5, r0, #0
   19d6c:	mvnge	r3, #0
   19d70:	strge	r3, [r6]
   19d74:	bge	19cec <fts_children@@Base+0x179c>
   19d78:	b	19ca8 <fts_children@@Base+0x1758>
   19d7c:	bl	11164 <__stack_chk_fail@plt>
   19d80:	andeq	fp, r2, r8, lsl #30
   19d84:	andeq	r0, r0, r6, lsl #8
   19d88:	strdeq	ip, [r2], -r4
   19d8c:	mov	r2, #3
   19d90:	mov	r1, #0
   19d94:	b	19c40 <fts_children@@Base+0x16f0>
   19d98:	subs	r2, r1, #1
   19d9c:	bxeq	lr
   19da0:	bcc	19f78 <fts_children@@Base+0x1a28>
   19da4:	cmp	r0, r1
   19da8:	bls	19f5c <fts_children@@Base+0x1a0c>
   19dac:	tst	r1, r2
   19db0:	beq	19f68 <fts_children@@Base+0x1a18>
   19db4:	clz	r3, r0
   19db8:	clz	r2, r1
   19dbc:	sub	r3, r2, r3
   19dc0:	rsbs	r3, r3, #31
   19dc4:	addne	r3, r3, r3, lsl #1
   19dc8:	mov	r2, #0
   19dcc:	addne	pc, pc, r3, lsl #2
   19dd0:	nop			; (mov r0, r0)
   19dd4:	cmp	r0, r1, lsl #31
   19dd8:	adc	r2, r2, r2
   19ddc:	subcs	r0, r0, r1, lsl #31
   19de0:	cmp	r0, r1, lsl #30
   19de4:	adc	r2, r2, r2
   19de8:	subcs	r0, r0, r1, lsl #30
   19dec:	cmp	r0, r1, lsl #29
   19df0:	adc	r2, r2, r2
   19df4:	subcs	r0, r0, r1, lsl #29
   19df8:	cmp	r0, r1, lsl #28
   19dfc:	adc	r2, r2, r2
   19e00:	subcs	r0, r0, r1, lsl #28
   19e04:	cmp	r0, r1, lsl #27
   19e08:	adc	r2, r2, r2
   19e0c:	subcs	r0, r0, r1, lsl #27
   19e10:	cmp	r0, r1, lsl #26
   19e14:	adc	r2, r2, r2
   19e18:	subcs	r0, r0, r1, lsl #26
   19e1c:	cmp	r0, r1, lsl #25
   19e20:	adc	r2, r2, r2
   19e24:	subcs	r0, r0, r1, lsl #25
   19e28:	cmp	r0, r1, lsl #24
   19e2c:	adc	r2, r2, r2
   19e30:	subcs	r0, r0, r1, lsl #24
   19e34:	cmp	r0, r1, lsl #23
   19e38:	adc	r2, r2, r2
   19e3c:	subcs	r0, r0, r1, lsl #23
   19e40:	cmp	r0, r1, lsl #22
   19e44:	adc	r2, r2, r2
   19e48:	subcs	r0, r0, r1, lsl #22
   19e4c:	cmp	r0, r1, lsl #21
   19e50:	adc	r2, r2, r2
   19e54:	subcs	r0, r0, r1, lsl #21
   19e58:	cmp	r0, r1, lsl #20
   19e5c:	adc	r2, r2, r2
   19e60:	subcs	r0, r0, r1, lsl #20
   19e64:	cmp	r0, r1, lsl #19
   19e68:	adc	r2, r2, r2
   19e6c:	subcs	r0, r0, r1, lsl #19
   19e70:	cmp	r0, r1, lsl #18
   19e74:	adc	r2, r2, r2
   19e78:	subcs	r0, r0, r1, lsl #18
   19e7c:	cmp	r0, r1, lsl #17
   19e80:	adc	r2, r2, r2
   19e84:	subcs	r0, r0, r1, lsl #17
   19e88:	cmp	r0, r1, lsl #16
   19e8c:	adc	r2, r2, r2
   19e90:	subcs	r0, r0, r1, lsl #16
   19e94:	cmp	r0, r1, lsl #15
   19e98:	adc	r2, r2, r2
   19e9c:	subcs	r0, r0, r1, lsl #15
   19ea0:	cmp	r0, r1, lsl #14
   19ea4:	adc	r2, r2, r2
   19ea8:	subcs	r0, r0, r1, lsl #14
   19eac:	cmp	r0, r1, lsl #13
   19eb0:	adc	r2, r2, r2
   19eb4:	subcs	r0, r0, r1, lsl #13
   19eb8:	cmp	r0, r1, lsl #12
   19ebc:	adc	r2, r2, r2
   19ec0:	subcs	r0, r0, r1, lsl #12
   19ec4:	cmp	r0, r1, lsl #11
   19ec8:	adc	r2, r2, r2
   19ecc:	subcs	r0, r0, r1, lsl #11
   19ed0:	cmp	r0, r1, lsl #10
   19ed4:	adc	r2, r2, r2
   19ed8:	subcs	r0, r0, r1, lsl #10
   19edc:	cmp	r0, r1, lsl #9
   19ee0:	adc	r2, r2, r2
   19ee4:	subcs	r0, r0, r1, lsl #9
   19ee8:	cmp	r0, r1, lsl #8
   19eec:	adc	r2, r2, r2
   19ef0:	subcs	r0, r0, r1, lsl #8
   19ef4:	cmp	r0, r1, lsl #7
   19ef8:	adc	r2, r2, r2
   19efc:	subcs	r0, r0, r1, lsl #7
   19f00:	cmp	r0, r1, lsl #6
   19f04:	adc	r2, r2, r2
   19f08:	subcs	r0, r0, r1, lsl #6
   19f0c:	cmp	r0, r1, lsl #5
   19f10:	adc	r2, r2, r2
   19f14:	subcs	r0, r0, r1, lsl #5
   19f18:	cmp	r0, r1, lsl #4
   19f1c:	adc	r2, r2, r2
   19f20:	subcs	r0, r0, r1, lsl #4
   19f24:	cmp	r0, r1, lsl #3
   19f28:	adc	r2, r2, r2
   19f2c:	subcs	r0, r0, r1, lsl #3
   19f30:	cmp	r0, r1, lsl #2
   19f34:	adc	r2, r2, r2
   19f38:	subcs	r0, r0, r1, lsl #2
   19f3c:	cmp	r0, r1, lsl #1
   19f40:	adc	r2, r2, r2
   19f44:	subcs	r0, r0, r1, lsl #1
   19f48:	cmp	r0, r1
   19f4c:	adc	r2, r2, r2
   19f50:	subcs	r0, r0, r1
   19f54:	mov	r0, r2
   19f58:	bx	lr
   19f5c:	moveq	r0, #1
   19f60:	movne	r0, #0
   19f64:	bx	lr
   19f68:	clz	r2, r1
   19f6c:	rsb	r2, r2, #31
   19f70:	lsr	r0, r0, r2
   19f74:	bx	lr
   19f78:	cmp	r0, #0
   19f7c:	mvnne	r0, #0
   19f80:	b	19fe0 <fts_children@@Base+0x1a90>
   19f84:	cmp	r1, #0
   19f88:	beq	19f78 <fts_children@@Base+0x1a28>
   19f8c:	push	{r0, r1, lr}
   19f90:	bl	19d98 <fts_children@@Base+0x1848>
   19f94:	pop	{r1, r2, lr}
   19f98:	mul	r3, r2, r0
   19f9c:	sub	r1, r1, r3
   19fa0:	bx	lr
   19fa4:	cmp	r3, #0
   19fa8:	cmpeq	r2, #0
   19fac:	bne	19fc4 <fts_children@@Base+0x1a74>
   19fb0:	cmp	r1, #0
   19fb4:	cmpeq	r0, #0
   19fb8:	mvnne	r1, #0
   19fbc:	mvnne	r0, #0
   19fc0:	b	19fe0 <fts_children@@Base+0x1a90>
   19fc4:	sub	sp, sp, #8
   19fc8:	push	{sp, lr}
   19fcc:	bl	19ff0 <fts_children@@Base+0x1aa0>
   19fd0:	ldr	lr, [sp, #4]
   19fd4:	add	sp, sp, #8
   19fd8:	pop	{r2, r3}
   19fdc:	bx	lr
   19fe0:	push	{r1, lr}
   19fe4:	mov	r0, #8
   19fe8:	bl	110c8 <raise@plt>
   19fec:	pop	{r1, pc}
   19ff0:	cmp	r1, r3
   19ff4:	cmpeq	r0, r2
   19ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ffc:	mov	r4, r0
   1a000:	movcc	r0, #0
   1a004:	mov	r5, r1
   1a008:	ldr	lr, [sp, #36]	; 0x24
   1a00c:	movcc	r1, r0
   1a010:	bcc	1a10c <fts_children@@Base+0x1bbc>
   1a014:	cmp	r3, #0
   1a018:	clzeq	ip, r2
   1a01c:	clzne	ip, r3
   1a020:	addeq	ip, ip, #32
   1a024:	cmp	r5, #0
   1a028:	clzeq	r1, r4
   1a02c:	addeq	r1, r1, #32
   1a030:	clzne	r1, r5
   1a034:	sub	ip, ip, r1
   1a038:	sub	sl, ip, #32
   1a03c:	lsl	r9, r3, ip
   1a040:	rsb	fp, ip, #32
   1a044:	orr	r9, r9, r2, lsl sl
   1a048:	orr	r9, r9, r2, lsr fp
   1a04c:	lsl	r8, r2, ip
   1a050:	cmp	r5, r9
   1a054:	cmpeq	r4, r8
   1a058:	movcc	r0, #0
   1a05c:	movcc	r1, r0
   1a060:	bcc	1a07c <fts_children@@Base+0x1b2c>
   1a064:	mov	r0, #1
   1a068:	subs	r4, r4, r8
   1a06c:	lsl	r1, r0, sl
   1a070:	orr	r1, r1, r0, lsr fp
   1a074:	lsl	r0, r0, ip
   1a078:	sbc	r5, r5, r9
   1a07c:	cmp	ip, #0
   1a080:	beq	1a10c <fts_children@@Base+0x1bbc>
   1a084:	lsr	r6, r8, #1
   1a088:	orr	r6, r6, r9, lsl #31
   1a08c:	lsr	r7, r9, #1
   1a090:	mov	r2, ip
   1a094:	b	1a0b8 <fts_children@@Base+0x1b68>
   1a098:	subs	r3, r4, r6
   1a09c:	sbc	r8, r5, r7
   1a0a0:	adds	r3, r3, r3
   1a0a4:	adc	r8, r8, r8
   1a0a8:	adds	r4, r3, #1
   1a0ac:	adc	r5, r8, #0
   1a0b0:	subs	r2, r2, #1
   1a0b4:	beq	1a0d4 <fts_children@@Base+0x1b84>
   1a0b8:	cmp	r5, r7
   1a0bc:	cmpeq	r4, r6
   1a0c0:	bcs	1a098 <fts_children@@Base+0x1b48>
   1a0c4:	adds	r4, r4, r4
   1a0c8:	adc	r5, r5, r5
   1a0cc:	subs	r2, r2, #1
   1a0d0:	bne	1a0b8 <fts_children@@Base+0x1b68>
   1a0d4:	lsr	r3, r4, ip
   1a0d8:	orr	r3, r3, r5, lsl fp
   1a0dc:	lsr	r2, r5, ip
   1a0e0:	orr	r3, r3, r5, lsr sl
   1a0e4:	adds	r0, r0, r4
   1a0e8:	mov	r4, r3
   1a0ec:	lsl	r3, r2, ip
   1a0f0:	orr	r3, r3, r4, lsl sl
   1a0f4:	lsl	ip, r4, ip
   1a0f8:	orr	r3, r3, r4, lsr fp
   1a0fc:	adc	r1, r1, r5
   1a100:	subs	r0, r0, ip
   1a104:	mov	r5, r2
   1a108:	sbc	r1, r1, r3
   1a10c:	cmp	lr, #0
   1a110:	strdne	r4, [lr]
   1a114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a118:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a11c:	mov	r7, r0
   1a120:	ldr	r6, [pc, #72]	; 1a170 <fts_children@@Base+0x1c20>
   1a124:	ldr	r5, [pc, #72]	; 1a174 <fts_children@@Base+0x1c24>
   1a128:	add	r6, pc, r6
   1a12c:	add	r5, pc, r5
   1a130:	sub	r6, r6, r5
   1a134:	mov	r8, r1
   1a138:	mov	r9, r2
   1a13c:	bl	11084 <fstatfs64@plt-0x20>
   1a140:	asrs	r6, r6, #2
   1a144:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a148:	mov	r4, #0
   1a14c:	add	r4, r4, #1
   1a150:	ldr	r3, [r5], #4
   1a154:	mov	r2, r9
   1a158:	mov	r1, r8
   1a15c:	mov	r0, r7
   1a160:	blx	r3
   1a164:	cmp	r6, r4
   1a168:	bne	1a14c <fts_children@@Base+0x1bfc>
   1a16c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a170:	ldrdeq	r1, [r1], -r4
   1a174:	andeq	r1, r1, ip, asr #27
   1a178:	bx	lr
   1a17c:	ldr	r3, [pc, #12]	; 1a190 <fts_children@@Base+0x1c40>
   1a180:	mov	r1, #0
   1a184:	add	r3, pc, r3
   1a188:	ldr	r2, [r3]
   1a18c:	b	11290 <__cxa_atexit@plt>
   1a190:	muleq	r1, ip, pc	; <UNPREDICTABLE>

Disassembly of section .fini:

0001a194 <.fini>:
   1a194:	push	{r3, lr}
   1a198:	pop	{r3, pc}
