
raspbian-preinstalled/partx:     file format elf32-littlearm


Disassembly of section .init:

00012048 <.init>:
   12048:	push	{r3, lr}
   1204c:	bl	146d0 <__assert_fail@plt+0x1f84>
   12050:	pop	{r3, pc}

Disassembly of section .plt:

00012054 <fdopen@plt-0x14>:
   12054:	push	{lr}		; (str lr, [sp, #-4]!)
   12058:	ldr	lr, [pc, #4]	; 12064 <fdopen@plt-0x4>
   1205c:	add	lr, pc, lr
   12060:	ldr	pc, [lr, #8]!
   12064:	andeq	r2, r2, r0, lsr sp

00012068 <fdopen@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #139264	; 0x22000
   12070:	ldr	pc, [ip, #3376]!	; 0xd30

00012074 <calloc@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #139264	; 0x22000
   1207c:	ldr	pc, [ip, #3368]!	; 0xd28

00012080 <strstr@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #139264	; 0x22000
   12088:	ldr	pc, [ip, #3360]!	; 0xd20

0001208c <raise@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #139264	; 0x22000
   12094:	ldr	pc, [ip, #3352]!	; 0xd18

00012098 <blkid_partlist_get_partition_by_partno@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #139264	; 0x22000
   120a0:	ldr	pc, [ip, #3344]!	; 0xd10

000120a4 <scols_line_set_data@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #139264	; 0x22000
   120ac:	ldr	pc, [ip, #3336]!	; 0xd08

000120b0 <fsync@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #139264	; 0x22000
   120b8:	ldr	pc, [ip, #3328]!	; 0xd00

000120bc <scols_line_refer_data@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #139264	; 0x22000
   120c4:	ldr	pc, [ip, #3320]!	; 0xcf8

000120c8 <strcmp@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #139264	; 0x22000
   120d0:	ldr	pc, [ip, #3312]!	; 0xcf0

000120d4 <rewinddir@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #139264	; 0x22000
   120dc:	ldr	pc, [ip, #3304]!	; 0xce8

000120e0 <strtol@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #139264	; 0x22000
   120e8:	ldr	pc, [ip, #3296]!	; 0xce0

000120ec <strcspn@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #139264	; 0x22000
   120f4:	ldr	pc, [ip, #3288]!	; 0xcd8

000120f8 <scols_table_enable_noheadings@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #139264	; 0x22000
   12100:	ldr	pc, [ip, #3280]!	; 0xcd0

00012104 <read@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #139264	; 0x22000
   1210c:	ldr	pc, [ip, #3272]!	; 0xcc8

00012110 <scols_table_new_column@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #139264	; 0x22000
   12118:	ldr	pc, [ip, #3264]!	; 0xcc0

0001211c <getuid@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #139264	; 0x22000
   12124:	ldr	pc, [ip, #3256]!	; 0xcb8

00012128 <memmove@plt>:
   12128:	add	ip, pc, #0, 12
   1212c:	add	ip, ip, #139264	; 0x22000
   12130:	ldr	pc, [ip, #3248]!	; 0xcb0

00012134 <free@plt>:
   12134:	add	ip, pc, #0, 12
   12138:	add	ip, ip, #139264	; 0x22000
   1213c:	ldr	pc, [ip, #3240]!	; 0xca8

00012140 <fgets@plt>:
   12140:	add	ip, pc, #0, 12
   12144:	add	ip, ip, #139264	; 0x22000
   12148:	ldr	pc, [ip, #3232]!	; 0xca0

0001214c <nanosleep@plt>:
   1214c:	add	ip, pc, #0, 12
   12150:	add	ip, ip, #139264	; 0x22000
   12154:	ldr	pc, [ip, #3224]!	; 0xc98

00012158 <scols_table_enable_raw@plt>:
   12158:	add	ip, pc, #0, 12
   1215c:	add	ip, ip, #139264	; 0x22000
   12160:	ldr	pc, [ip, #3216]!	; 0xc90

00012164 <faccessat@plt>:
   12164:	add	ip, pc, #0, 12
   12168:	add	ip, ip, #139264	; 0x22000
   1216c:	ldr	pc, [ip, #3208]!	; 0xc88

00012170 <ferror@plt>:
   12170:	add	ip, pc, #0, 12
   12174:	add	ip, ip, #139264	; 0x22000
   12178:	ldr	pc, [ip, #3200]!	; 0xc80

0001217c <strndup@plt>:
   1217c:	add	ip, pc, #0, 12
   12180:	add	ip, ip, #139264	; 0x22000
   12184:	ldr	pc, [ip, #3192]!	; 0xc78

00012188 <__openat64_2@plt>:
   12188:	add	ip, pc, #0, 12
   1218c:	add	ip, ip, #139264	; 0x22000
   12190:	ldr	pc, [ip, #3184]!	; 0xc70

00012194 <_exit@plt>:
   12194:	add	ip, pc, #0, 12
   12198:	add	ip, ip, #139264	; 0x22000
   1219c:	ldr	pc, [ip, #3176]!	; 0xc68

000121a0 <__vsnprintf_chk@plt>:
   121a0:	add	ip, pc, #0, 12
   121a4:	add	ip, ip, #139264	; 0x22000
   121a8:	ldr	pc, [ip, #3168]!	; 0xc60

000121ac <memcpy@plt>:
   121ac:	add	ip, pc, #0, 12
   121b0:	add	ip, ip, #139264	; 0x22000
   121b4:	ldr	pc, [ip, #3160]!	; 0xc58

000121b8 <__strtoull_internal@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #139264	; 0x22000
   121c0:	ldr	pc, [ip, #3152]!	; 0xc50

000121c4 <blkid_partition_get_type@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #139264	; 0x22000
   121cc:	ldr	pc, [ip, #3144]!	; 0xc48

000121d0 <uname@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #139264	; 0x22000
   121d8:	ldr	pc, [ip, #3136]!	; 0xc40

000121dc <dcgettext@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #139264	; 0x22000
   121e4:	ldr	pc, [ip, #3128]!	; 0xc38

000121e8 <blkid_probe_set_device@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #139264	; 0x22000
   121f0:	ldr	pc, [ip, #3120]!	; 0xc30

000121f4 <strdup@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #139264	; 0x22000
   121fc:	ldr	pc, [ip, #3112]!	; 0xc28

00012200 <__stack_chk_fail@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #139264	; 0x22000
   12208:	ldr	pc, [ip, #3104]!	; 0xc20

0001220c <realloc@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #139264	; 0x22000
   12214:	ldr	pc, [ip, #3096]!	; 0xc18

00012218 <dup@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #139264	; 0x22000
   12220:	ldr	pc, [ip, #3088]!	; 0xc10

00012224 <blkid_devno_to_wholedisk@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #139264	; 0x22000
   1222c:	ldr	pc, [ip, #3080]!	; 0xc08

00012230 <textdomain@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #139264	; 0x22000
   12238:	ldr	pc, [ip, #3072]!	; 0xc00

0001223c <err@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #139264	; 0x22000
   12244:	ldr	pc, [ip, #3064]!	; 0xbf8

00012248 <geteuid@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #139264	; 0x22000
   12250:	ldr	pc, [ip, #3056]!	; 0xbf0

00012254 <__fxstatat64@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #139264	; 0x22000
   1225c:	ldr	pc, [ip, #3048]!	; 0xbe8

00012260 <vfscanf@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #139264	; 0x22000
   12268:	ldr	pc, [ip, #3040]!	; 0xbe0

0001226c <seteuid@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #139264	; 0x22000
   12274:	ldr	pc, [ip, #3032]!	; 0xbd8

00012278 <__fxstat64@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #139264	; 0x22000
   12280:	ldr	pc, [ip, #3024]!	; 0xbd0

00012284 <readlink@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #139264	; 0x22000
   1228c:	ldr	pc, [ip, #3016]!	; 0xbc8

00012290 <getegid@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #139264	; 0x22000
   12298:	ldr	pc, [ip, #3008]!	; 0xbc0

0001229c <mkostemp64@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #139264	; 0x22000
   122a4:	ldr	pc, [ip, #3000]!	; 0xbb8

000122a8 <ioctl@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #139264	; 0x22000
   122b0:	ldr	pc, [ip, #2992]!	; 0xbb0

000122b4 <lseek64@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #139264	; 0x22000
   122bc:	ldr	pc, [ip, #2984]!	; 0xba8

000122c0 <blkid_probe_set_sectorsize@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #139264	; 0x22000
   122c8:	ldr	pc, [ip, #2976]!	; 0xba0

000122cc <scols_new_table@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #139264	; 0x22000
   122d4:	ldr	pc, [ip, #2968]!	; 0xb98

000122d8 <blkid_partition_get_name@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #139264	; 0x22000
   122e0:	ldr	pc, [ip, #2960]!	; 0xb90

000122e4 <blkid_partition_get_size@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #139264	; 0x22000
   122ec:	ldr	pc, [ip, #2952]!	; 0xb88

000122f0 <scols_table_enable_export@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #139264	; 0x22000
   122f8:	ldr	pc, [ip, #2944]!	; 0xb80

000122fc <__fpending@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #139264	; 0x22000
   12304:	ldr	pc, [ip, #2936]!	; 0xb78

00012308 <blkid_partition_get_uuid@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #139264	; 0x22000
   12310:	ldr	pc, [ip, #2928]!	; 0xb70

00012314 <opendir@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #139264	; 0x22000
   1231c:	ldr	pc, [ip, #2920]!	; 0xb68

00012320 <open64@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #139264	; 0x22000
   12328:	ldr	pc, [ip, #2912]!	; 0xb60

0001232c <__asprintf_chk@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #139264	; 0x22000
   12334:	ldr	pc, [ip, #2904]!	; 0xb58

00012338 <getenv@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #139264	; 0x22000
   12340:	ldr	pc, [ip, #2896]!	; 0xb50

00012344 <puts@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #139264	; 0x22000
   1234c:	ldr	pc, [ip, #2888]!	; 0xb48

00012350 <malloc@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #139264	; 0x22000
   12358:	ldr	pc, [ip, #2880]!	; 0xb40

0001235c <__libc_start_main@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #139264	; 0x22000
   12364:	ldr	pc, [ip, #2872]!	; 0xb38

00012368 <readlinkat@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #139264	; 0x22000
   12370:	ldr	pc, [ip, #2864]!	; 0xb30

00012374 <scols_table_new_line@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #139264	; 0x22000
   1237c:	ldr	pc, [ip, #2856]!	; 0xb28

00012380 <scols_unref_table@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #139264	; 0x22000
   12388:	ldr	pc, [ip, #2848]!	; 0xb20

0001238c <__vfprintf_chk@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #139264	; 0x22000
   12394:	ldr	pc, [ip, #2840]!	; 0xb18

00012398 <strsep@plt>:
   12398:	add	ip, pc, #0, 12
   1239c:	add	ip, ip, #139264	; 0x22000
   123a0:	ldr	pc, [ip, #2832]!	; 0xb10

000123a4 <getdtablesize@plt>:
   123a4:	add	ip, pc, #0, 12
   123a8:	add	ip, ip, #139264	; 0x22000
   123ac:	ldr	pc, [ip, #2824]!	; 0xb08

000123b0 <__ctype_tolower_loc@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #139264	; 0x22000
   123b8:	ldr	pc, [ip, #2816]!	; 0xb00

000123bc <__gmon_start__@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #139264	; 0x22000
   123c4:	ldr	pc, [ip, #2808]!	; 0xaf8

000123c8 <getopt_long@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #139264	; 0x22000
   123d0:	ldr	pc, [ip, #2800]!	; 0xaf0

000123d4 <__ctype_b_loc@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #139264	; 0x22000
   123dc:	ldr	pc, [ip, #2792]!	; 0xae8

000123e0 <getcwd@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #139264	; 0x22000
   123e8:	ldr	pc, [ip, #2784]!	; 0xae0

000123ec <getpid@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #139264	; 0x22000
   123f4:	ldr	pc, [ip, #2776]!	; 0xad8

000123f8 <exit@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #139264	; 0x22000
   12400:	ldr	pc, [ip, #2768]!	; 0xad0

00012404 <syscall@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #139264	; 0x22000
   1240c:	ldr	pc, [ip, #2760]!	; 0xac8

00012410 <blkid_probe_get_partitions@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #139264	; 0x22000
   12418:	ldr	pc, [ip, #2752]!	; 0xac0

0001241c <strtoul@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #139264	; 0x22000
   12424:	ldr	pc, [ip, #2744]!	; 0xab8

00012428 <strlen@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #139264	; 0x22000
   12430:	ldr	pc, [ip, #2736]!	; 0xab0

00012434 <strchr@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #139264	; 0x22000
   1243c:	ldr	pc, [ip, #2728]!	; 0xaa8

00012440 <blkid_partition_get_type_string@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #139264	; 0x22000
   12448:	ldr	pc, [ip, #2720]!	; 0xaa0

0001244c <openat64@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #139264	; 0x22000
   12454:	ldr	pc, [ip, #2712]!	; 0xa98

00012458 <blkid_partitions_get_name@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #139264	; 0x22000
   12460:	ldr	pc, [ip, #2704]!	; 0xa90

00012464 <warnx@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #139264	; 0x22000
   1246c:	ldr	pc, [ip, #2696]!	; 0xa88

00012470 <__open64_2@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #139264	; 0x22000
   12478:	ldr	pc, [ip, #2688]!	; 0xa80

0001247c <__errno_location@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #139264	; 0x22000
   12484:	ldr	pc, [ip, #2680]!	; 0xa78

00012488 <strncasecmp@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #139264	; 0x22000
   12490:	ldr	pc, [ip, #2672]!	; 0xa70

00012494 <__cxa_atexit@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #139264	; 0x22000
   1249c:	ldr	pc, [ip, #2664]!	; 0xa68

000124a0 <__vasprintf_chk@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #139264	; 0x22000
   124a8:	ldr	pc, [ip, #2656]!	; 0xa60

000124ac <blkid_new_probe@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #139264	; 0x22000
   124b4:	ldr	pc, [ip, #2648]!	; 0xa58

000124b8 <mkdir@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #139264	; 0x22000
   124c0:	ldr	pc, [ip, #2640]!	; 0xa50

000124c4 <getgid@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #139264	; 0x22000
   124cc:	ldr	pc, [ip, #2632]!	; 0xa48

000124d0 <__sched_cpufree@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #139264	; 0x22000
   124d8:	ldr	pc, [ip, #2624]!	; 0xa40

000124dc <memset@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #139264	; 0x22000
   124e4:	ldr	pc, [ip, #2616]!	; 0xa38

000124e8 <strncpy@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #139264	; 0x22000
   124f0:	ldr	pc, [ip, #2608]!	; 0xa30

000124f4 <__xpg_basename@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #139264	; 0x22000
   124fc:	ldr	pc, [ip, #2600]!	; 0xa28

00012500 <fscanf@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #139264	; 0x22000
   12508:	ldr	pc, [ip, #2592]!	; 0xa20

0001250c <blkid_probe_filter_partitions_type@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #139264	; 0x22000
   12514:	ldr	pc, [ip, #2584]!	; 0xa18

00012518 <blkid_partlist_numof_partitions@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #139264	; 0x22000
   12520:	ldr	pc, [ip, #2576]!	; 0xa10

00012524 <blkid_partlist_get_partition@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #139264	; 0x22000
   1252c:	ldr	pc, [ip, #2568]!	; 0xa08

00012530 <fgetc@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #139264	; 0x22000
   12538:	ldr	pc, [ip, #2560]!	; 0xa00

0001253c <__printf_chk@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #139264	; 0x22000
   12544:	ldr	pc, [ip, #2552]!	; 0x9f8

00012548 <strtod@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #139264	; 0x22000
   12550:	ldr	pc, [ip, #2544]!	; 0x9f0

00012554 <write@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #139264	; 0x22000
   1255c:	ldr	pc, [ip, #2536]!	; 0x9e8

00012560 <__sched_cpualloc@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #139264	; 0x22000
   12568:	ldr	pc, [ip, #2528]!	; 0x9e0

0001256c <blkid_partlist_get_table@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #139264	; 0x22000
   12574:	ldr	pc, [ip, #2520]!	; 0x9d8

00012578 <__fprintf_chk@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #139264	; 0x22000
   12580:	ldr	pc, [ip, #2512]!	; 0x9d0

00012584 <setegid@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #139264	; 0x22000
   1258c:	ldr	pc, [ip, #2504]!	; 0x9c8

00012590 <fclose@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #139264	; 0x22000
   12598:	ldr	pc, [ip, #2496]!	; 0x9c0

0001259c <blkid_partition_get_table@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #139264	; 0x22000
   125a4:	ldr	pc, [ip, #2488]!	; 0x9b8

000125a8 <blkid_partition_get_start@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #139264	; 0x22000
   125b0:	ldr	pc, [ip, #2480]!	; 0x9b0

000125b4 <blkid_parttable_get_type@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #139264	; 0x22000
   125bc:	ldr	pc, [ip, #2472]!	; 0x9a8

000125c0 <fcntl64@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #139264	; 0x22000
   125c8:	ldr	pc, [ip, #2464]!	; 0x9a0

000125cc <blkid_partition_is_extended@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #139264	; 0x22000
   125d4:	ldr	pc, [ip, #2456]!	; 0x998

000125d8 <blkid_free_probe@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #139264	; 0x22000
   125e0:	ldr	pc, [ip, #2448]!	; 0x990

000125e4 <setlocale@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #139264	; 0x22000
   125ec:	ldr	pc, [ip, #2440]!	; 0x988

000125f0 <errx@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #139264	; 0x22000
   125f8:	ldr	pc, [ip, #2432]!	; 0x980

000125fc <strrchr@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #139264	; 0x22000
   12604:	ldr	pc, [ip, #2424]!	; 0x978

00012608 <warn@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #139264	; 0x22000
   12610:	ldr	pc, [ip, #2416]!	; 0x970

00012614 <scols_print_table@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #139264	; 0x22000
   1261c:	ldr	pc, [ip, #2408]!	; 0x968

00012620 <fputc@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #139264	; 0x22000
   12628:	ldr	pc, [ip, #2400]!	; 0x960

0001262c <sscanf@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #139264	; 0x22000
   12634:	ldr	pc, [ip, #2392]!	; 0x958

00012638 <localeconv@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #139264	; 0x22000
   12640:	ldr	pc, [ip, #2384]!	; 0x950

00012644 <readdir64@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #139264	; 0x22000
   1264c:	ldr	pc, [ip, #2376]!	; 0x948

00012650 <fdopendir@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #139264	; 0x22000
   12658:	ldr	pc, [ip, #2368]!	; 0x940

0001265c <blkid_partition_get_flags@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #139264	; 0x22000
   12664:	ldr	pc, [ip, #2360]!	; 0x938

00012668 <dirfd@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #139264	; 0x22000
   12670:	ldr	pc, [ip, #2352]!	; 0x930

00012674 <__strtoll_internal@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #139264	; 0x22000
   1267c:	ldr	pc, [ip, #2344]!	; 0x928

00012680 <fopen64@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #139264	; 0x22000
   12688:	ldr	pc, [ip, #2336]!	; 0x920

0001268c <blkid_devno_to_devname@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #139264	; 0x22000
   12694:	ldr	pc, [ip, #2328]!	; 0x918

00012698 <qsort@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #139264	; 0x22000
   126a0:	ldr	pc, [ip, #2320]!	; 0x910

000126a4 <bindtextdomain@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #139264	; 0x22000
   126ac:	ldr	pc, [ip, #2312]!	; 0x908

000126b0 <blkid_partition_get_partno@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #139264	; 0x22000
   126b8:	ldr	pc, [ip, #2304]!	; 0x900

000126bc <umask@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #139264	; 0x22000
   126c4:	ldr	pc, [ip, #2296]!	; 0x8f8

000126c8 <__xstat64@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #139264	; 0x22000
   126d0:	ldr	pc, [ip, #2288]!	; 0x8f0

000126d4 <fputs@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #139264	; 0x22000
   126dc:	ldr	pc, [ip, #2280]!	; 0x8e8

000126e0 <strncmp@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #139264	; 0x22000
   126e8:	ldr	pc, [ip, #2272]!	; 0x8e0

000126ec <abort@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #139264	; 0x22000
   126f4:	ldr	pc, [ip, #2264]!	; 0x8d8

000126f8 <realpath@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #139264	; 0x22000
   12700:	ldr	pc, [ip, #2256]!	; 0x8d0

00012704 <close@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #139264	; 0x22000
   1270c:	ldr	pc, [ip, #2248]!	; 0x8c8

00012710 <dcngettext@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #139264	; 0x22000
   12718:	ldr	pc, [ip, #2240]!	; 0x8c0

0001271c <closedir@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #139264	; 0x22000
   12724:	ldr	pc, [ip, #2232]!	; 0x8b8

00012728 <__snprintf_chk@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #139264	; 0x22000
   12730:	ldr	pc, [ip, #2224]!	; 0x8b0

00012734 <scols_init_debug@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #139264	; 0x22000
   1273c:	ldr	pc, [ip, #2216]!	; 0x8a8

00012740 <strspn@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #139264	; 0x22000
   12748:	ldr	pc, [ip, #2208]!	; 0x8a0

0001274c <__assert_fail@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #139264	; 0x22000
   12754:	ldr	pc, [ip, #2200]!	; 0x898

Disassembly of section .text:

00012758 <.text>:
   12758:	ldr	ip, [pc, #4004]	; 13704 <__assert_fail@plt+0xfb8>
   1275c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12760:	mov	r2, #0
   12764:	sub	sp, sp, #372	; 0x174
   12768:	mov	r3, #0
   1276c:	ldr	ip, [ip]
   12770:	mov	r6, #0
   12774:	mov	r7, r0
   12778:	mov	r8, r1
   1277c:	mov	r0, #6
   12780:	ldr	r1, [pc, #3968]	; 13708 <__assert_fail@plt+0xfbc>
   12784:	strd	r2, [sp, #88]	; 0x58
   12788:	str	ip, [sp, #364]	; 0x16c
   1278c:	str	r6, [sp, #204]	; 0xcc
   12790:	str	r6, [sp, #72]	; 0x48
   12794:	str	r6, [sp, #76]	; 0x4c
   12798:	str	r6, [sp, #200]	; 0xc8
   1279c:	bl	125e4 <setlocale@plt>
   127a0:	ldr	r1, [pc, #3940]	; 1370c <__assert_fail@plt+0xfc0>
   127a4:	ldr	r0, [pc, #3940]	; 13710 <__assert_fail@plt+0xfc4>
   127a8:	bl	126a4 <bindtextdomain@plt>
   127ac:	ldr	r0, [pc, #3932]	; 13710 <__assert_fail@plt+0xfc4>
   127b0:	bl	12230 <textdomain@plt>
   127b4:	ldr	r3, [pc, #3928]	; 13714 <__assert_fail@plt+0xfc8>
   127b8:	ldr	r0, [pc, #3928]	; 13718 <__assert_fail@plt+0xfcc>
   127bc:	str	r6, [sp, #36]	; 0x24
   127c0:	str	r6, [sp, #40]	; 0x28
   127c4:	str	r6, [sp, #32]
   127c8:	add	sl, r3, #260	; 0x104
   127cc:	bl	22a08 <__assert_fail@plt+0x102bc>
   127d0:	ldr	r9, [pc, #3908]	; 1371c <__assert_fail@plt+0xfd0>
   127d4:	mov	fp, r6
   127d8:	mov	r3, #0
   127dc:	str	r3, [sp]
   127e0:	mov	r2, r9
   127e4:	mov	r3, sl
   127e8:	mov	r1, r8
   127ec:	mov	r0, r7
   127f0:	bl	123c8 <getopt_long@plt>
   127f4:	cmn	r0, #1
   127f8:	beq	12af8 <__assert_fail@plt+0x3ac>
   127fc:	cmp	r0, #79	; 0x4f
   12800:	ble	12884 <__assert_fail@plt+0x138>
   12804:	ldr	r5, [pc, #3860]	; 13720 <__assert_fail@plt+0xfd4>
   12808:	add	r2, sp, #200	; 0xc8
   1280c:	mov	r3, #80	; 0x50
   12810:	cmp	r0, r3
   12814:	blt	12860 <__assert_fail@plt+0x114>
   12818:	beq	12848 <__assert_fail@plt+0xfc>
   1281c:	mov	ip, r5
   12820:	ldr	r1, [ip, #4]!
   12824:	cmp	r0, r1
   12828:	movlt	r3, #0
   1282c:	movge	r3, #1
   12830:	cmp	r1, #0
   12834:	moveq	r3, #0
   12838:	cmp	r3, #0
   1283c:	beq	12860 <__assert_fail@plt+0x114>
   12840:	cmp	r0, r1
   12844:	bne	12820 <__assert_fail@plt+0xd4>
   12848:	ldr	r3, [r2]
   1284c:	cmp	r3, #0
   12850:	streq	r0, [r2]
   12854:	beq	12860 <__assert_fail@plt+0x114>
   12858:	cmp	r0, r3
   1285c:	bne	136a4 <__assert_fail@plt+0xf58>
   12860:	ldr	r3, [r5, #64]!	; 0x40
   12864:	add	r2, r2, #4
   12868:	cmp	r0, r3
   1286c:	movlt	r1, #0
   12870:	movge	r1, #1
   12874:	cmp	r3, #0
   12878:	moveq	r1, #0
   1287c:	cmp	r1, #0
   12880:	bne	12810 <__assert_fail@plt+0xc4>
   12884:	sub	r0, r0, #80	; 0x50
   12888:	cmp	r0, #49	; 0x31
   1288c:	ldrls	pc, [pc, r0, lsl #2]
   12890:	b	13200 <__assert_fail@plt+0xab4>
   12894:	andeq	r2, r1, r4, ror #21
   12898:	andeq	r3, r1, r0, lsl #4
   1289c:	andeq	r3, r1, r0, lsl #4
   128a0:			; <UNDEFINED> instruction: 0x00012ab8
   128a4:	andeq	r3, r1, r0, lsl #4
   128a8:	andeq	r3, r1, r0, lsl #4
   128ac:	andeq	r2, r1, ip, lsl #21
   128b0:	andeq	r3, r1, r0, lsl #4
   128b4:	andeq	r3, r1, r0, lsl #4
   128b8:	andeq	r3, r1, r0, lsl #4
   128bc:	andeq	r3, r1, r0, lsl #4
   128c0:	andeq	r3, r1, r0, lsl #4
   128c4:	andeq	r3, r1, r0, lsl #4
   128c8:	andeq	r3, r1, r0, lsl #4
   128cc:	andeq	r3, r1, r0, lsl #4
   128d0:	andeq	r3, r1, r0, lsl #4
   128d4:	andeq	r3, r1, r0, lsl #4
   128d8:	andeq	r2, r1, r4, lsl #21
   128dc:	andeq	r2, r1, r0, ror sl
   128e0:	andeq	r3, r1, r0, lsl #4
   128e4:	andeq	r2, r1, r8, ror #20
   128e8:	andeq	r3, r1, r0, lsl #4
   128ec:	andeq	r3, r1, r0, lsl #4
   128f0:	andeq	r2, r1, r8, asr sl
   128f4:	andeq	r2, r1, r8, lsr #30
   128f8:	andeq	r3, r1, r0, lsl #4
   128fc:	andeq	r3, r1, r0, lsl #4
   12900:	andeq	r3, r1, r0, lsl #4
   12904:	andeq	r2, r1, r0, asr sl
   12908:	andeq	r3, r1, r0, lsl #4
   1290c:	andeq	r2, r1, r4, lsr #20
   12910:	andeq	r2, r1, r4, lsl sl
   12914:	andeq	r3, r1, r0, lsl #4
   12918:	andeq	r3, r1, r0, lsl #4
   1291c:	andeq	r2, r1, r0, lsl #20
   12920:	strdeq	r2, [r1], -r8
   12924:	ldrdeq	r2, [r1], -r8
   12928:	ldrdeq	r2, [r1], -r0
   1292c:	andeq	r2, r1, r8, ror #19
   12930:	andeq	r3, r1, r0, lsl #4
   12934:	andeq	r3, r1, r0, lsl #4
   12938:	andeq	r3, r1, r0, lsl #4
   1293c:	andeq	r3, r1, r0, lsl #4
   12940:	andeq	r3, r1, r0, lsl #4
   12944:	andeq	r3, r1, r0, lsl #4
   12948:	andeq	r3, r1, r0, lsl #4
   1294c:	andeq	r3, r1, r0, lsl #4
   12950:	andeq	r3, r1, r0, lsl #4
   12954:	andeq	r2, r1, r0, lsl #19
   12958:	andeq	r2, r1, ip, asr r9
   1295c:	ldr	r2, [pc, #3520]	; 13724 <__assert_fail@plt+0xfd8>
   12960:	mov	r3, #0
   12964:	str	r3, [r2, #4]!
   12968:	add	r3, r3, #1
   1296c:	cmp	r3, #10
   12970:	bne	12964 <__assert_fail@plt+0x218>
   12974:	ldr	r2, [pc, #3500]	; 13728 <__assert_fail@plt+0xfdc>
   12978:	str	r3, [r2, #48]	; 0x30
   1297c:	b	127d8 <__assert_fail@plt+0x8c>
   12980:	mov	r3, #0
   12984:	str	r3, [sp, #96]	; 0x60
   12988:	mov	r4, r3
   1298c:	b	12998 <__assert_fail@plt+0x24c>
   12990:	ldr	r0, [sp, #96]	; 0x60
   12994:	bl	12344 <puts@plt>
   12998:	mov	r0, r4
   1299c:	add	r1, sp, #96	; 0x60
   129a0:	bl	12458 <blkid_partitions_get_name@plt>
   129a4:	add	r4, r4, #1
   129a8:	cmp	r0, #0
   129ac:	beq	12990 <__assert_fail@plt+0x244>
   129b0:	mov	r0, #0
   129b4:	ldr	r3, [pc, #3400]	; 13704 <__assert_fail@plt+0xfb8>
   129b8:	ldr	r2, [sp, #364]	; 0x16c
   129bc:	ldr	r3, [r3]
   129c0:	cmp	r2, r3
   129c4:	bne	14514 <__assert_fail@plt+0x1dc8>
   129c8:	add	sp, sp, #372	; 0x174
   129cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129d0:	mov	fp, #4
   129d4:	b	127d8 <__assert_fail@plt+0x8c>
   129d8:	ldr	r3, [pc, #3404]	; 1372c <__assert_fail@plt+0xfe0>
   129dc:	ldr	r3, [r3]
   129e0:	str	r3, [sp, #40]	; 0x28
   129e4:	b	127d8 <__assert_fail@plt+0x8c>
   129e8:	ldr	r2, [pc, #3384]	; 13728 <__assert_fail@plt+0xfdc>
   129ec:	mov	r3, #1
   129f0:	str	r3, [r2]
   129f4:	b	127d8 <__assert_fail@plt+0x8c>
   129f8:	mov	fp, #2
   129fc:	b	127d8 <__assert_fail@plt+0x8c>
   12a00:	ldr	r3, [sp, #32]
   12a04:	mov	fp, #2
   12a08:	orr	r3, r3, #1
   12a0c:	str	r3, [sp, #32]
   12a10:	b	127d8 <__assert_fail@plt+0x8c>
   12a14:	ldr	r3, [pc, #3344]	; 1372c <__assert_fail@plt+0xfe0>
   12a18:	ldr	r3, [r3]
   12a1c:	str	r3, [sp, #36]	; 0x24
   12a20:	b	127d8 <__assert_fail@plt+0x8c>
   12a24:	ldr	r1, [pc, #3328]	; 1372c <__assert_fail@plt+0xfe0>
   12a28:	mov	r3, #0
   12a2c:	add	r2, sp, #76	; 0x4c
   12a30:	ldr	r0, [r1]
   12a34:	add	r1, sp, #72	; 0x48
   12a38:	bl	1686c <__assert_fail@plt+0x4120>
   12a3c:	cmp	r0, #0
   12a40:	beq	127d8 <__assert_fail@plt+0x8c>
   12a44:	mov	r2, #5
   12a48:	ldr	r1, [pc, #3296]	; 13730 <__assert_fail@plt+0xfe4>
   12a4c:	b	13690 <__assert_fail@plt+0xf44>
   12a50:	mov	fp, #1
   12a54:	b	127d8 <__assert_fail@plt+0x8c>
   12a58:	ldr	r3, [sp, #32]
   12a5c:	orr	r3, r3, #2
   12a60:	str	r3, [sp, #32]
   12a64:	b	127d8 <__assert_fail@plt+0x8c>
   12a68:	mov	fp, #5
   12a6c:	b	127d8 <__assert_fail@plt+0x8c>
   12a70:	ldr	r2, [pc, #3248]	; 13728 <__assert_fail@plt+0xfdc>
   12a74:	ldr	r3, [r2, #4]
   12a78:	orr	r3, r3, #2
   12a7c:	str	r3, [r2, #4]
   12a80:	b	127d8 <__assert_fail@plt+0x8c>
   12a84:	mov	fp, #3
   12a88:	b	127d8 <__assert_fail@plt+0x8c>
   12a8c:	mov	r2, #5
   12a90:	ldr	r1, [pc, #3228]	; 13734 <__assert_fail@plt+0xfe8>
   12a94:	mov	r0, #0
   12a98:	bl	121dc <dcgettext@plt>
   12a9c:	ldr	r2, [pc, #3220]	; 13738 <__assert_fail@plt+0xfec>
   12aa0:	ldr	r3, [pc, #3220]	; 1373c <__assert_fail@plt+0xff0>
   12aa4:	ldr	r2, [r2]
   12aa8:	mov	r1, r0
   12aac:	mov	r0, #1
   12ab0:	bl	1253c <__printf_chk@plt>
   12ab4:	b	129b0 <__assert_fail@plt+0x264>
   12ab8:	ldr	r3, [pc, #3180]	; 1372c <__assert_fail@plt+0xfe0>
   12abc:	mov	r2, #5
   12ac0:	ldr	r1, [pc, #3192]	; 13740 <__assert_fail@plt+0xff4>
   12ac4:	mov	r0, #0
   12ac8:	ldr	r4, [r3]
   12acc:	bl	121dc <dcgettext@plt>
   12ad0:	mov	r1, r0
   12ad4:	mov	r0, r4
   12ad8:	bl	15aa4 <__assert_fail@plt+0x3358>
   12adc:	mov	r6, r0
   12ae0:	b	127d8 <__assert_fail@plt+0x8c>
   12ae4:	ldr	r3, [sp, #32]
   12ae8:	mov	fp, #2
   12aec:	orr	r3, r3, #4
   12af0:	str	r3, [sp, #32]
   12af4:	b	127d8 <__assert_fail@plt+0x8c>
   12af8:	tst	fp, #5
   12afc:	mov	r4, r0
   12b00:	bne	12b60 <__assert_fail@plt+0x414>
   12b04:	ldr	r3, [pc, #3100]	; 13728 <__assert_fail@plt+0xfdc>
   12b08:	ldr	r2, [r3, #48]	; 0x30
   12b0c:	cmp	r2, #0
   12b10:	bne	12b50 <__assert_fail@plt+0x404>
   12b14:	mov	r1, #2
   12b18:	str	r2, [r3, #8]
   12b1c:	mov	r2, #3
   12b20:	str	r1, [r3, #16]
   12b24:	str	r2, [r3, #20]
   12b28:	mov	r1, #4
   12b2c:	mov	r2, #5
   12b30:	mov	r0, #1
   12b34:	str	r1, [r3, #24]
   12b38:	str	r2, [r3, #28]
   12b3c:	mov	r1, #7
   12b40:	mov	r2, #6
   12b44:	str	r0, [r3, #12]
   12b48:	str	r1, [r3, #48]	; 0x30
   12b4c:	str	r2, [r3, #32]
   12b50:	ldr	r3, [sp, #36]	; 0x24
   12b54:	cmp	r3, #0
   12b58:	bne	12d88 <__assert_fail@plt+0x63c>
   12b5c:	mov	fp, #2
   12b60:	ldr	r2, [pc, #3036]	; 13744 <__assert_fail@plt+0xff8>
   12b64:	sub	r3, r7, #2
   12b68:	ldr	r2, [r2]
   12b6c:	cmp	r3, r2
   12b70:	beq	135c8 <__assert_fail@plt+0xe7c>
   12b74:	sub	r7, r7, #1
   12b78:	cmp	r2, r7
   12b7c:	bne	131ec <__assert_fail@plt+0xaa0>
   12b80:	ldr	r5, [r8, r2, lsl #2]
   12b84:	mov	r0, #3
   12b88:	add	r2, sp, #96	; 0x60
   12b8c:	mov	r1, r5
   12b90:	bl	126c8 <__xstat64@plt>
   12b94:	subs	r3, r0, #0
   12b98:	bne	14574 <__assert_fail@plt+0x1e28>
   12b9c:	ldrd	r8, [sp, #128]	; 0x80
   12ba0:	add	r2, sp, #88	; 0x58
   12ba4:	str	r2, [sp]
   12ba8:	mov	r0, r8
   12bac:	mov	r1, r9
   12bb0:	mov	r2, r3
   12bb4:	bl	12224 <blkid_devno_to_wholedisk@plt>
   12bb8:	cmp	r0, #0
   12bbc:	bne	12bd0 <__assert_fail@plt+0x484>
   12bc0:	ldrd	r0, [sp, #88]	; 0x58
   12bc4:	cmp	r1, r9
   12bc8:	cmpeq	r0, r8
   12bcc:	bne	12db4 <__assert_fail@plt+0x668>
   12bd0:	mov	r0, r5
   12bd4:	bl	14ae0 <__assert_fail@plt+0x2394>
   12bd8:	strd	r8, [sp, #88]	; 0x58
   12bdc:	mov	sl, r0
   12be0:	cmp	sl, #0
   12be4:	beq	139c0 <__assert_fail@plt+0x1274>
   12be8:	ldr	r9, [pc, #2872]	; 13728 <__assert_fail@plt+0xfdc>
   12bec:	ldr	r3, [r9]
   12bf0:	cmp	r3, #0
   12bf4:	bne	13978 <__assert_fail@plt+0x122c>
   12bf8:	sub	r3, fp, #3
   12bfc:	bics	r3, r3, #2
   12c00:	bne	13518 <__assert_fail@plt+0xdcc>
   12c04:	add	r2, sp, #96	; 0x60
   12c08:	mov	r1, sl
   12c0c:	mov	r0, #3
   12c10:	bl	126c8 <__xstat64@plt>
   12c14:	subs	r5, r0, #0
   12c18:	bne	14684 <__assert_fail@plt+0x1f38>
   12c1c:	ldr	r3, [sp, #112]	; 0x70
   12c20:	and	r3, r3, #61440	; 0xf000
   12c24:	cmp	r3, #32768	; 0x8000
   12c28:	beq	13248 <__assert_fail@plt+0xafc>
   12c2c:	cmp	r3, #24576	; 0x6000
   12c30:	movne	r2, #5
   12c34:	ldrne	r1, [pc, #2828]	; 13748 <__assert_fail@plt+0xffc>
   12c38:	bne	145fc <__assert_fail@plt+0x1eb0>
   12c3c:	mov	r1, r5
   12c40:	mov	r0, sl
   12c44:	bl	12320 <open64@plt>
   12c48:	cmn	r0, #1
   12c4c:	mov	r8, r0
   12c50:	beq	13530 <__assert_fail@plt+0xde4>
   12c54:	cmp	fp, #5
   12c58:	bne	132fc <__assert_fail@plt+0xbb0>
   12c5c:	cmp	r0, #0
   12c60:	ldrd	r2, [sp, #88]	; 0x58
   12c64:	ldr	r4, [sp, #72]	; 0x48
   12c68:	ldr	r6, [sp, #76]	; 0x4c
   12c6c:	blt	14540 <__assert_fail@plt+0x1df4>
   12c70:	cmp	r4, #0
   12c74:	moveq	r4, #1
   12c78:	cmp	r6, #0
   12c7c:	lsrne	r1, r4, #31
   12c80:	moveq	r1, #1
   12c84:	cmp	r1, #0
   12c88:	bne	1394c <__assert_fail@plt+0x1200>
   12c8c:	cmp	r6, #0
   12c90:	movge	r7, r6
   12c94:	blt	13994 <__assert_fail@plt+0x1248>
   12c98:	cmp	r4, r7
   12c9c:	movle	r3, #0
   12ca0:	strle	r3, [sp, #32]
   12ca4:	addle	r6, sp, #208	; 0xd0
   12ca8:	strle	sl, [sp, #36]	; 0x24
   12cac:	ble	12d10 <__assert_fail@plt+0x5c4>
   12cb0:	b	14594 <__assert_fail@plt+0x1e48>
   12cb4:	bl	1247c <__errno_location@plt>
   12cb8:	ldr	r2, [r0]
   12cbc:	cmp	r2, #6
   12cc0:	beq	13590 <__assert_fail@plt+0xe44>
   12cc4:	cmp	sl, #0
   12cc8:	bne	13550 <__assert_fail@plt+0xe04>
   12ccc:	cmp	r5, #0
   12cd0:	beq	13238 <__assert_fail@plt+0xaec>
   12cd4:	ldr	r2, [sp, #32]
   12cd8:	add	r3, r2, #1
   12cdc:	cmp	r3, r4
   12ce0:	streq	r4, [sp, #32]
   12ce4:	mvneq	fp, #0
   12ce8:	beq	12d04 <__assert_fail@plt+0x5b8>
   12cec:	mov	r1, r5
   12cf0:	mvn	fp, #0
   12cf4:	mov	r5, r4
   12cf8:	ldr	r0, [sp, #36]	; 0x24
   12cfc:	bl	14908 <__assert_fail@plt+0x21bc>
   12d00:	str	r4, [sp, #32]
   12d04:	add	r4, r4, #1
   12d08:	cmp	r7, r4
   12d0c:	blt	135a8 <__assert_fail@plt+0xe5c>
   12d10:	mov	fp, #152	; 0x98
   12d14:	mov	r2, fp
   12d18:	mov	r1, #0
   12d1c:	mov	r0, r6
   12d20:	bl	124dc <memset@plt>
   12d24:	mov	r3, #2
   12d28:	mov	ip, #0
   12d2c:	add	r2, sp, #96	; 0x60
   12d30:	ldr	r1, [pc, #2868]	; 1386c <__assert_fail@plt+0x1120>
   12d34:	mov	r0, r8
   12d38:	str	fp, [sp, #104]	; 0x68
   12d3c:	str	r4, [sp, #224]	; 0xe0
   12d40:	str	ip, [sp, #100]	; 0x64
   12d44:	str	r6, [sp, #108]	; 0x6c
   12d48:	str	r3, [sp, #96]	; 0x60
   12d4c:	bl	122a8 <ioctl@plt>
   12d50:	ldr	sl, [r9]
   12d54:	subs	fp, r0, #0
   12d58:	bne	12cb4 <__assert_fail@plt+0x568>
   12d5c:	cmp	sl, #0
   12d60:	movne	r2, #5
   12d64:	ldrne	r1, [pc, #2528]	; 1374c <__assert_fail@plt+0x1000>
   12d68:	beq	12d04 <__assert_fail@plt+0x5b8>
   12d6c:	bl	121dc <dcgettext@plt>
   12d70:	mov	r3, r4
   12d74:	ldr	r2, [sp, #36]	; 0x24
   12d78:	mov	r1, r0
   12d7c:	mov	r0, #1
   12d80:	bl	1253c <__printf_chk@plt>
   12d84:	b	12d04 <__assert_fail@plt+0x5b8>
   12d88:	ldr	r2, [pc, #2496]	; 13750 <__assert_fail@plt+0x1004>
   12d8c:	ldr	r3, [pc, #2496]	; 13754 <__assert_fail@plt+0x1008>
   12d90:	str	r2, [sp]
   12d94:	ldr	r0, [sp, #36]	; 0x24
   12d98:	sub	r1, r3, #40	; 0x28
   12d9c:	mov	r2, #10
   12da0:	bl	1661c <__assert_fail@plt+0x3ed0>
   12da4:	cmp	r0, #0
   12da8:	bge	12b5c <__assert_fail@plt+0x410>
   12dac:	mov	r0, #1
   12db0:	b	129b4 <__assert_fail@plt+0x268>
   12db4:	bl	1268c <blkid_devno_to_devname@plt>
   12db8:	subs	sl, r0, #0
   12dbc:	beq	12bd0 <__assert_fail@plt+0x484>
   12dc0:	ldr	r3, [sp, #72]	; 0x48
   12dc4:	ldr	r2, [sp, #76]	; 0x4c
   12dc8:	orrs	r3, r3, r2
   12dcc:	bne	13688 <__assert_fail@plt+0xf3c>
   12dd0:	orrs	r2, r8, r9
   12dd4:	strne	r3, [sp, #80]	; 0x50
   12dd8:	strne	r3, [sp, #84]	; 0x54
   12ddc:	beq	13608 <__assert_fail@plt+0xebc>
   12de0:	mov	r3, #0
   12de4:	mov	r0, r8
   12de8:	mov	r1, r9
   12dec:	mov	r2, r3
   12df0:	bl	1f528 <__assert_fail@plt+0xcddc>
   12df4:	subs	r7, r0, #0
   12df8:	beq	145b8 <__assert_fail@plt+0x1e6c>
   12dfc:	ldr	r2, [pc, #2388]	; 13758 <__assert_fail@plt+0x100c>
   12e00:	add	r1, sp, #80	; 0x50
   12e04:	bl	1e16c <__assert_fail@plt+0xba20>
   12e08:	mov	r8, r0
   12e0c:	mov	r0, r7
   12e10:	bl	1c670 <__assert_fail@plt+0x9f24>
   12e14:	cmp	r8, #0
   12e18:	ldreq	r0, [sp, #80]	; 0x50
   12e1c:	beq	12ed8 <__assert_fail@plt+0x78c>
   12e20:	mov	r0, r5
   12e24:	bl	12428 <strlen@plt>
   12e28:	sub	r7, r0, #1
   12e2c:	bl	123d4 <__ctype_b_loc@plt>
   12e30:	ldrb	r3, [r5, r7]
   12e34:	add	r7, r5, r7
   12e38:	lsl	r3, r3, #1
   12e3c:	ldr	r1, [r0]
   12e40:	ldrh	r3, [r1, r3]
   12e44:	tst	r3, #2048	; 0x800
   12e48:	beq	145b8 <__assert_fail@plt+0x1e6c>
   12e4c:	ldrb	r3, [r7, #-1]
   12e50:	lsl	r3, r3, #1
   12e54:	ldrh	r3, [r1, r3]
   12e58:	tst	r3, #2048	; 0x800
   12e5c:	beq	12e7c <__assert_fail@plt+0x730>
   12e60:	sub	r2, r7, #1
   12e64:	mov	r7, r2
   12e68:	ldrb	r3, [r2, #-1]!
   12e6c:	lsl	r3, r3, #1
   12e70:	ldrh	r3, [r1, r3]
   12e74:	tst	r3, #2048	; 0x800
   12e78:	bne	12e64 <__assert_fail@plt+0x718>
   12e7c:	bl	1247c <__errno_location@plt>
   12e80:	mov	r3, #0
   12e84:	mov	r2, #10
   12e88:	add	r1, sp, #84	; 0x54
   12e8c:	str	r3, [r0]
   12e90:	mov	r8, r0
   12e94:	mov	r0, r7
   12e98:	bl	120e0 <strtol@plt>
   12e9c:	ldr	r3, [r8]
   12ea0:	cmp	r3, #0
   12ea4:	str	r0, [sp, #80]	; 0x50
   12ea8:	bne	145b8 <__assert_fail@plt+0x1e6c>
   12eac:	ldr	r3, [sp, #84]	; 0x54
   12eb0:	cmp	r3, #0
   12eb4:	beq	145b8 <__assert_fail@plt+0x1e6c>
   12eb8:	ldrsb	r2, [r3]
   12ebc:	sub	r3, r3, r7
   12ec0:	clz	r3, r3
   12ec4:	cmp	r2, #0
   12ec8:	lsr	r3, r3, #5
   12ecc:	movne	r3, #1
   12ed0:	cmp	r3, #0
   12ed4:	bne	145b8 <__assert_fail@plt+0x1e6c>
   12ed8:	ldr	r9, [pc, #2120]	; 13728 <__assert_fail@plt+0xfdc>
   12edc:	str	r0, [sp, #76]	; 0x4c
   12ee0:	str	r0, [sp, #72]	; 0x48
   12ee4:	ldr	r3, [r9]
   12ee8:	cmp	r3, #0
   12eec:	beq	12bf8 <__assert_fail@plt+0x4ac>
   12ef0:	ldr	r1, [pc, #2344]	; 13820 <__assert_fail@plt+0x10d4>
   12ef4:	mov	r2, #5
   12ef8:	mov	r0, #0
   12efc:	bl	121dc <dcgettext@plt>
   12f00:	mov	r1, r0
   12f04:	ldr	r0, [sp, #76]	; 0x4c
   12f08:	ldr	r3, [sp, #72]	; 0x48
   12f0c:	str	r0, [sp, #4]
   12f10:	str	r3, [sp]
   12f14:	mov	r2, r5
   12f18:	mov	r3, sl
   12f1c:	mov	r0, #1
   12f20:	bl	1253c <__printf_chk@plt>
   12f24:	b	12bf8 <__assert_fail@plt+0x4ac>
   12f28:	ldr	r3, [pc, #2092]	; 1375c <__assert_fail@plt+0x1010>
   12f2c:	mov	r2, #5
   12f30:	ldr	r1, [pc, #2088]	; 13760 <__assert_fail@plt+0x1014>
   12f34:	ldr	r4, [r3]
   12f38:	mov	r0, #0
   12f3c:	bl	121dc <dcgettext@plt>
   12f40:	mov	r1, r4
   12f44:	bl	126d4 <fputs@plt>
   12f48:	mov	r2, #5
   12f4c:	ldr	r1, [pc, #2064]	; 13764 <__assert_fail@plt+0x1018>
   12f50:	mov	r0, #0
   12f54:	bl	121dc <dcgettext@plt>
   12f58:	ldr	r3, [pc, #2008]	; 13738 <__assert_fail@plt+0xfec>
   12f5c:	mov	r1, #1
   12f60:	mov	r6, #0
   12f64:	ldr	r3, [r3]
   12f68:	ldr	r5, [pc, #1956]	; 13714 <__assert_fail@plt+0xfc8>
   12f6c:	ldr	r8, [pc, #2036]	; 13768 <__assert_fail@plt+0x101c>
   12f70:	mov	r2, r0
   12f74:	mov	r0, r4
   12f78:	bl	12578 <__fprintf_chk@plt>
   12f7c:	mov	r1, r4
   12f80:	mov	r0, #10
   12f84:	bl	12620 <fputc@plt>
   12f88:	mov	r2, #5
   12f8c:	ldr	r1, [pc, #2008]	; 1376c <__assert_fail@plt+0x1020>
   12f90:	mov	r0, r6
   12f94:	bl	121dc <dcgettext@plt>
   12f98:	mov	r1, r4
   12f9c:	bl	126d4 <fputs@plt>
   12fa0:	mov	r2, #5
   12fa4:	ldr	r1, [pc, #1988]	; 13770 <__assert_fail@plt+0x1024>
   12fa8:	mov	r0, r6
   12fac:	bl	121dc <dcgettext@plt>
   12fb0:	mov	r1, r4
   12fb4:	bl	126d4 <fputs@plt>
   12fb8:	mov	r2, #5
   12fbc:	ldr	r1, [pc, #1968]	; 13774 <__assert_fail@plt+0x1028>
   12fc0:	mov	r0, r6
   12fc4:	bl	121dc <dcgettext@plt>
   12fc8:	mov	r1, r4
   12fcc:	bl	126d4 <fputs@plt>
   12fd0:	mov	r2, #5
   12fd4:	ldr	r1, [pc, #1948]	; 13778 <__assert_fail@plt+0x102c>
   12fd8:	mov	r0, r6
   12fdc:	bl	121dc <dcgettext@plt>
   12fe0:	mov	r1, r4
   12fe4:	bl	126d4 <fputs@plt>
   12fe8:	mov	r2, #5
   12fec:	ldr	r1, [pc, #1928]	; 1377c <__assert_fail@plt+0x1030>
   12ff0:	mov	r0, r6
   12ff4:	bl	121dc <dcgettext@plt>
   12ff8:	mov	r1, r4
   12ffc:	bl	126d4 <fputs@plt>
   13000:	mov	r2, #5
   13004:	ldr	r1, [pc, #1908]	; 13780 <__assert_fail@plt+0x1034>
   13008:	mov	r0, r6
   1300c:	bl	121dc <dcgettext@plt>
   13010:	mov	r1, r4
   13014:	bl	126d4 <fputs@plt>
   13018:	mov	r2, #5
   1301c:	ldr	r1, [pc, #1888]	; 13784 <__assert_fail@plt+0x1038>
   13020:	mov	r0, r6
   13024:	bl	121dc <dcgettext@plt>
   13028:	mov	r1, r4
   1302c:	bl	126d4 <fputs@plt>
   13030:	mov	r2, #5
   13034:	ldr	r1, [pc, #1868]	; 13788 <__assert_fail@plt+0x103c>
   13038:	mov	r0, r6
   1303c:	bl	121dc <dcgettext@plt>
   13040:	mov	r1, r4
   13044:	bl	126d4 <fputs@plt>
   13048:	mov	r2, #5
   1304c:	ldr	r1, [pc, #1848]	; 1378c <__assert_fail@plt+0x1040>
   13050:	mov	r0, r6
   13054:	bl	121dc <dcgettext@plt>
   13058:	mov	r1, r4
   1305c:	bl	126d4 <fputs@plt>
   13060:	mov	r2, #5
   13064:	ldr	r1, [pc, #1828]	; 13790 <__assert_fail@plt+0x1044>
   13068:	mov	r0, r6
   1306c:	bl	121dc <dcgettext@plt>
   13070:	mov	r1, r4
   13074:	bl	126d4 <fputs@plt>
   13078:	mov	r2, #5
   1307c:	ldr	r1, [pc, #1808]	; 13794 <__assert_fail@plt+0x1048>
   13080:	mov	r0, r6
   13084:	bl	121dc <dcgettext@plt>
   13088:	mov	r1, r4
   1308c:	bl	126d4 <fputs@plt>
   13090:	mov	r2, #5
   13094:	ldr	r1, [pc, #1788]	; 13798 <__assert_fail@plt+0x104c>
   13098:	mov	r0, r6
   1309c:	bl	121dc <dcgettext@plt>
   130a0:	mov	r1, r4
   130a4:	bl	126d4 <fputs@plt>
   130a8:	mov	r2, #5
   130ac:	ldr	r1, [pc, #1768]	; 1379c <__assert_fail@plt+0x1050>
   130b0:	mov	r0, r6
   130b4:	bl	121dc <dcgettext@plt>
   130b8:	mov	r1, r4
   130bc:	bl	126d4 <fputs@plt>
   130c0:	mov	r2, #5
   130c4:	ldr	r1, [pc, #1748]	; 137a0 <__assert_fail@plt+0x1054>
   130c8:	mov	r0, r6
   130cc:	bl	121dc <dcgettext@plt>
   130d0:	mov	r1, r4
   130d4:	bl	126d4 <fputs@plt>
   130d8:	mov	r2, #5
   130dc:	ldr	r1, [pc, #1728]	; 137a4 <__assert_fail@plt+0x1058>
   130e0:	mov	r0, r6
   130e4:	bl	121dc <dcgettext@plt>
   130e8:	mov	r1, r4
   130ec:	bl	126d4 <fputs@plt>
   130f0:	mov	r2, #5
   130f4:	ldr	r1, [pc, #1708]	; 137a8 <__assert_fail@plt+0x105c>
   130f8:	mov	r0, r6
   130fc:	bl	121dc <dcgettext@plt>
   13100:	mov	r1, r4
   13104:	bl	126d4 <fputs@plt>
   13108:	mov	r2, #5
   1310c:	ldr	r1, [pc, #1688]	; 137ac <__assert_fail@plt+0x1060>
   13110:	mov	r0, r6
   13114:	bl	121dc <dcgettext@plt>
   13118:	mov	r1, r4
   1311c:	bl	126d4 <fputs@plt>
   13120:	mov	r1, r4
   13124:	mov	r0, #10
   13128:	bl	12620 <fputc@plt>
   1312c:	mov	r2, #5
   13130:	ldr	r1, [pc, #1656]	; 137b0 <__assert_fail@plt+0x1064>
   13134:	mov	r0, r6
   13138:	bl	121dc <dcgettext@plt>
   1313c:	mov	r2, #5
   13140:	ldr	r1, [pc, #1644]	; 137b4 <__assert_fail@plt+0x1068>
   13144:	mov	r7, r0
   13148:	mov	r0, r6
   1314c:	bl	121dc <dcgettext@plt>
   13150:	ldr	r2, [pc, #1632]	; 137b8 <__assert_fail@plt+0x106c>
   13154:	mov	r3, r7
   13158:	str	r2, [sp]
   1315c:	ldr	r1, [pc, #1624]	; 137bc <__assert_fail@plt+0x1070>
   13160:	ldr	r2, [pc, #1624]	; 137c0 <__assert_fail@plt+0x1074>
   13164:	str	r0, [sp, #4]
   13168:	mov	r0, #1
   1316c:	bl	1253c <__printf_chk@plt>
   13170:	ldr	r1, [pc, #1612]	; 137c4 <__assert_fail@plt+0x1078>
   13174:	mov	r2, #5
   13178:	mov	r0, r6
   1317c:	bl	121dc <dcgettext@plt>
   13180:	mov	r1, r4
   13184:	bl	126d4 <fputs@plt>
   13188:	ldr	r1, [r5, #20]
   1318c:	mov	r2, #5
   13190:	mov	r0, #0
   13194:	ldr	r7, [r5]
   13198:	bl	121dc <dcgettext@plt>
   1319c:	add	r6, r6, #1
   131a0:	mov	r3, r7
   131a4:	mov	r2, r8
   131a8:	mov	r1, #1
   131ac:	add	r5, r5, #24
   131b0:	str	r0, [sp]
   131b4:	mov	r0, r4
   131b8:	bl	12578 <__fprintf_chk@plt>
   131bc:	cmp	r6, #10
   131c0:	bne	13188 <__assert_fail@plt+0xa3c>
   131c4:	mov	r2, #5
   131c8:	ldr	r1, [pc, #1528]	; 137c8 <__assert_fail@plt+0x107c>
   131cc:	mov	r0, #0
   131d0:	bl	121dc <dcgettext@plt>
   131d4:	ldr	r2, [pc, #1520]	; 137cc <__assert_fail@plt+0x1080>
   131d8:	mov	r1, r0
   131dc:	mov	r0, #1
   131e0:	bl	1253c <__printf_chk@plt>
   131e4:	mov	r0, #0
   131e8:	bl	123f8 <exit@plt>
   131ec:	mov	r2, #5
   131f0:	ldr	r1, [pc, #1496]	; 137d0 <__assert_fail@plt+0x1084>
   131f4:	mov	r0, #0
   131f8:	bl	121dc <dcgettext@plt>
   131fc:	bl	12464 <warnx@plt>
   13200:	ldr	r3, [pc, #1484]	; 137d4 <__assert_fail@plt+0x1088>
   13204:	mov	r2, #5
   13208:	ldr	r1, [pc, #1480]	; 137d8 <__assert_fail@plt+0x108c>
   1320c:	mov	r0, #0
   13210:	ldr	r4, [r3]
   13214:	bl	121dc <dcgettext@plt>
   13218:	ldr	r3, [pc, #1304]	; 13738 <__assert_fail@plt+0xfec>
   1321c:	mov	r1, #1
   13220:	ldr	r3, [r3]
   13224:	mov	r2, r0
   13228:	mov	r0, r4
   1322c:	bl	12578 <__fprintf_chk@plt>
   13230:	mov	r0, #1
   13234:	bl	123f8 <exit@plt>
   13238:	str	r4, [sp, #32]
   1323c:	mov	r5, r4
   13240:	mvn	fp, #0
   13244:	b	12d04 <__assert_fail@plt+0x5b8>
   13248:	cmp	fp, #5
   1324c:	moveq	r2, fp
   13250:	ldreq	r1, [pc, #1412]	; 137dc <__assert_fail@plt+0x1090>
   13254:	beq	145fc <__assert_fail@plt+0x1eb0>
   13258:	bl	19420 <__assert_fail@plt+0x6cd4>
   1325c:	cmp	r0, #0
   13260:	beq	145f4 <__assert_fail@plt+0x1ea8>
   13264:	mov	r1, r5
   13268:	ldr	r0, [pc, #1528]	; 13868 <__assert_fail@plt+0x111c>
   1326c:	bl	17624 <__assert_fail@plt+0x4ed8>
   13270:	subs	r7, r0, #0
   13274:	bne	145d8 <__assert_fail@plt+0x1e8c>
   13278:	ldr	r0, [pc, #1512]	; 13868 <__assert_fail@plt+0x111c>
   1327c:	bl	1b2f0 <__assert_fail@plt+0x8ba4>
   13280:	cmp	r0, #0
   13284:	movne	r0, r7
   13288:	movne	r2, #5
   1328c:	ldrne	r1, [pc, #1356]	; 137e0 <__assert_fail@plt+0x1094>
   13290:	bne	1353c <__assert_fail@plt+0xdf0>
   13294:	ldr	r3, [r9]
   13298:	cmp	r3, #0
   1329c:	bne	139e4 <__assert_fail@plt+0x1298>
   132a0:	mov	r1, sl
   132a4:	ldr	r0, [pc, #1468]	; 13868 <__assert_fail@plt+0x111c>
   132a8:	bl	19b84 <__assert_fail@plt+0x7438>
   132ac:	subs	r5, r0, #0
   132b0:	bne	14610 <__assert_fail@plt+0x1ec4>
   132b4:	ldr	r0, [pc, #1452]	; 13868 <__assert_fail@plt+0x111c>
   132b8:	bl	19f7c <__assert_fail@plt+0x7830>
   132bc:	cmn	r0, #16
   132c0:	moveq	r0, r5
   132c4:	moveq	r2, #5
   132c8:	ldreq	r1, [pc, #1300]	; 137e4 <__assert_fail@plt+0x1098>
   132cc:	beq	1353c <__assert_fail@plt+0xdf0>
   132d0:	mov	r7, #1
   132d4:	ldr	r0, [pc, #1420]	; 13868 <__assert_fail@plt+0x111c>
   132d8:	str	r7, [r9, #480]	; 0x1e0
   132dc:	bl	121f4 <strdup@plt>
   132e0:	subs	sl, r0, #0
   132e4:	beq	14628 <__assert_fail@plt+0x1edc>
   132e8:	mov	r1, r5
   132ec:	bl	12320 <open64@plt>
   132f0:	cmn	r0, #1
   132f4:	mov	r8, r0
   132f8:	beq	13530 <__assert_fail@plt+0xde4>
   132fc:	bl	124ac <blkid_new_probe@plt>
   13300:	subs	r3, r0, #0
   13304:	str	r3, [sp, #36]	; 0x24
   13308:	beq	13570 <__assert_fail@plt+0xe24>
   1330c:	mov	r3, #0
   13310:	mov	r2, #0
   13314:	mov	r1, r8
   13318:	strd	r2, [sp]
   1331c:	bl	121e8 <blkid_probe_set_device@plt>
   13320:	subs	r3, r0, #0
   13324:	str	r3, [sp, #48]	; 0x30
   13328:	bne	13570 <__assert_fail@plt+0xe24>
   1332c:	cmp	r6, #0
   13330:	bne	139d4 <__assert_fail@plt+0x1288>
   13334:	ldr	r3, [sp, #40]	; 0x28
   13338:	cmp	r3, #0
   1333c:	beq	13368 <__assert_fail@plt+0xc1c>
   13340:	ldr	r3, [sp, #40]	; 0x28
   13344:	mov	r5, #0
   13348:	add	r2, sp, #208	; 0xd0
   1334c:	mov	r1, #2
   13350:	ldr	r0, [sp, #36]	; 0x24
   13354:	str	r3, [sp, #208]	; 0xd0
   13358:	str	r5, [sp, #212]	; 0xd4
   1335c:	bl	1250c <blkid_probe_filter_partitions_type@plt>
   13360:	cmp	r0, r5
   13364:	bne	143bc <__assert_fail@plt+0x1c70>
   13368:	ldr	r0, [sp, #36]	; 0x24
   1336c:	bl	12410 <blkid_probe_get_partitions@plt>
   13370:	subs	r3, r0, #0
   13374:	str	r3, [sp, #40]	; 0x28
   13378:	beq	143a0 <__assert_fail@plt+0x1c54>
   1337c:	bl	1256c <blkid_partlist_get_table@plt>
   13380:	ldr	r3, [r9]
   13384:	cmp	r3, #0
   13388:	cmpne	r0, #0
   1338c:	mov	r5, r0
   13390:	bne	13a10 <__assert_fail@plt+0x12c4>
   13394:	ldr	r3, [sp, #76]	; 0x4c
   13398:	cmp	fp, #3
   1339c:	ldr	r6, [sp, #72]	; 0x48
   133a0:	str	r3, [sp, #44]	; 0x2c
   133a4:	beq	13d68 <__assert_fail@plt+0x161c>
   133a8:	cmp	fp, #4
   133ac:	beq	13a70 <__assert_fail@plt+0x1324>
   133b0:	cmp	fp, #2
   133b4:	beq	13f20 <__assert_fail@plt+0x17d4>
   133b8:	ldr	r4, [sp, #40]	; 0x28
   133bc:	ldr	r3, [sp, #44]	; 0x2c
   133c0:	add	r2, sp, #96	; 0x60
   133c4:	add	r1, sp, #84	; 0x54
   133c8:	mov	r0, r4
   133cc:	str	r6, [sp, #84]	; 0x54
   133d0:	str	r3, [sp, #96]	; 0x60
   133d4:	bl	14784 <__assert_fail@plt+0x2038>
   133d8:	subs	fp, r0, #0
   133dc:	bne	134dc <__assert_fail@plt+0xd90>
   133e0:	mov	r0, r4
   133e4:	bl	12518 <blkid_partlist_numof_partitions@plt>
   133e8:	mov	sl, fp
   133ec:	str	r8, [sp, #48]	; 0x30
   133f0:	str	r0, [sp, #32]
   133f4:	b	134cc <__assert_fail@plt+0xd80>
   133f8:	mov	r1, sl
   133fc:	ldr	r0, [sp, #40]	; 0x28
   13400:	bl	12524 <blkid_partlist_get_partition@plt>
   13404:	mov	r4, r0
   13408:	bl	126b0 <blkid_partition_get_partno@plt>
   1340c:	ldr	r3, [sp, #84]	; 0x54
   13410:	cmp	r3, #0
   13414:	cmpne	r0, r3
   13418:	mov	r5, r0
   1341c:	blt	134c8 <__assert_fail@plt+0xd7c>
   13420:	ldr	r0, [sp, #96]	; 0x60
   13424:	cmp	r0, #0
   13428:	cmpne	r5, r0
   1342c:	movgt	r7, #1
   13430:	movle	r7, #0
   13434:	bgt	134c8 <__assert_fail@plt+0xd7c>
   13438:	mov	r0, r4
   1343c:	bl	125a8 <blkid_partition_get_start@plt>
   13440:	mov	r6, r0
   13444:	mov	r0, r4
   13448:	mov	r8, r1
   1344c:	bl	122e4 <blkid_partition_get_size@plt>
   13450:	mov	r2, #5
   13454:	str	r2, [sp]
   13458:	ldr	r2, [pc, #904]	; 137e8 <__assert_fail@plt+0x109c>
   1345c:	mov	r4, r0
   13460:	mov	r3, r4
   13464:	mov	r0, r7
   13468:	mov	r7, r1
   1346c:	ldr	r1, [pc, #888]	; 137ec <__assert_fail@plt+0x10a0>
   13470:	bl	12710 <dcngettext@plt>
   13474:	lsl	r1, r7, #9
   13478:	ldr	r2, [pc, #880]	; 137f0 <__assert_fail@plt+0x10a4>
   1347c:	mov	r3, #0
   13480:	orr	r1, r1, r4, lsr #23
   13484:	str	r0, [sp, #44]	; 0x2c
   13488:	lsl	r0, r4, #9
   1348c:	bl	22830 <__assert_fail@plt+0x100e4>
   13490:	adds	r3, r6, r4
   13494:	adc	r2, r8, r7
   13498:	subs	r3, r3, #1
   1349c:	sbc	r2, r2, #0
   134a0:	str	r2, [sp, #12]
   134a4:	str	r7, [sp, #20]
   134a8:	str	r4, [sp, #16]
   134ac:	str	r3, [sp, #8]
   134b0:	stm	sp, {r6, r8}
   134b4:	mov	r2, r5
   134b8:	strd	r0, [sp, #24]
   134bc:	ldr	r1, [sp, #44]	; 0x2c
   134c0:	mov	r0, #1
   134c4:	bl	1253c <__printf_chk@plt>
   134c8:	add	sl, sl, #1
   134cc:	ldr	r3, [sp, #32]
   134d0:	cmp	r3, sl
   134d4:	bgt	133f8 <__assert_fail@plt+0xcac>
   134d8:	ldr	r8, [sp, #48]	; 0x30
   134dc:	ldr	r0, [sp, #36]	; 0x24
   134e0:	bl	125d8 <blkid_free_probe@plt>
   134e4:	ldr	r3, [r9, #480]	; 0x1e0
   134e8:	cmp	r3, #0
   134ec:	bne	135fc <__assert_fail@plt+0xeb0>
   134f0:	mov	r0, r8
   134f4:	bl	120b0 <fsync@plt>
   134f8:	mov	r4, r0
   134fc:	mov	r0, r8
   13500:	bl	12704 <close@plt>
   13504:	orrs	r3, r4, r0
   13508:	bne	14480 <__assert_fail@plt+0x1d34>
   1350c:	adds	r0, fp, #0
   13510:	movne	r0, #1
   13514:	b	129b4 <__assert_fail@plt+0x268>
   13518:	mov	r1, #0
   1351c:	mov	r0, sl
   13520:	bl	12320 <open64@plt>
   13524:	cmn	r0, #1
   13528:	mov	r8, r0
   1352c:	bne	132fc <__assert_fail@plt+0xbb0>
   13530:	ldr	r1, [pc, #700]	; 137f4 <__assert_fail@plt+0x10a8>
   13534:	mov	r2, #5
   13538:	mov	r0, #0
   1353c:	bl	121dc <dcgettext@plt>
   13540:	mov	r2, sl
   13544:	mov	r1, r0
   13548:	mov	r0, #1
   1354c:	bl	1223c <err@plt>
   13550:	mov	r2, #5
   13554:	ldr	r1, [pc, #668]	; 137f8 <__assert_fail@plt+0x10ac>
   13558:	mov	r0, #0
   1355c:	bl	121dc <dcgettext@plt>
   13560:	mov	r2, r4
   13564:	ldr	r1, [sp, #36]	; 0x24
   13568:	bl	12608 <warn@plt>
   1356c:	b	12ccc <__assert_fail@plt+0x580>
   13570:	mov	r2, #5
   13574:	ldr	r1, [pc, #640]	; 137fc <__assert_fail@plt+0x10b0>
   13578:	mov	r0, #0
   1357c:	bl	121dc <dcgettext@plt>
   13580:	mov	r1, sl
   13584:	bl	12464 <warnx@plt>
   13588:	mov	fp, #1
   1358c:	b	134dc <__assert_fail@plt+0xd90>
   13590:	cmp	sl, #0
   13594:	beq	12d04 <__assert_fail@plt+0x5b8>
   13598:	mov	r2, #5
   1359c:	ldr	r1, [pc, #604]	; 13800 <__assert_fail@plt+0x10b4>
   135a0:	mov	r0, #0
   135a4:	b	12d6c <__assert_fail@plt+0x620>
   135a8:	cmp	r5, #0
   135ac:	ldr	sl, [sp, #36]	; 0x24
   135b0:	beq	134e4 <__assert_fail@plt+0xd98>
   135b4:	ldr	r2, [sp, #32]
   135b8:	mov	r1, r5
   135bc:	mov	r0, sl
   135c0:	bl	14908 <__assert_fail@plt+0x21bc>
   135c4:	b	134e4 <__assert_fail@plt+0xd98>
   135c8:	ldr	r5, [r8, r3, lsl #2]
   135cc:	ldr	r1, [pc, #560]	; 13804 <__assert_fail@plt+0x10b8>
   135d0:	mov	r0, r5
   135d4:	lsl	r7, r3, #2
   135d8:	bl	120c8 <strcmp@plt>
   135dc:	add	r3, r8, r7
   135e0:	ldr	r3, [r3, #4]
   135e4:	cmp	r0, #0
   135e8:	mov	r0, r3
   135ec:	bne	13644 <__assert_fail@plt+0xef8>
   135f0:	bl	14ae0 <__assert_fail@plt+0x2394>
   135f4:	mov	sl, r0
   135f8:	b	12be0 <__assert_fail@plt+0x494>
   135fc:	ldr	r0, [pc, #612]	; 13868 <__assert_fail@plt+0x111c>
   13600:	bl	17e50 <__assert_fail@plt+0x5704>
   13604:	b	134f0 <__assert_fail@plt+0xda4>
   13608:	add	r2, sp, #96	; 0x60
   1360c:	mov	r1, r5
   13610:	mov	r0, #3
   13614:	bl	126c8 <__xstat64@plt>
   13618:	cmp	r0, #0
   1361c:	movne	r3, #0
   13620:	strne	r3, [sp, #80]	; 0x50
   13624:	strne	r3, [sp, #84]	; 0x54
   13628:	bne	12e20 <__assert_fail@plt+0x6d4>
   1362c:	ldrd	r8, [sp, #128]	; 0x80
   13630:	str	r0, [sp, #80]	; 0x50
   13634:	str	r0, [sp, #84]	; 0x54
   13638:	orrs	r3, r8, r9
   1363c:	beq	12e20 <__assert_fail@plt+0x6d4>
   13640:	b	12de0 <__assert_fail@plt+0x694>
   13644:	bl	14ae0 <__assert_fail@plt+0x2394>
   13648:	subs	sl, r0, #0
   1364c:	beq	139b0 <__assert_fail@plt+0x1264>
   13650:	bl	12428 <strlen@plt>
   13654:	subs	r7, r0, #0
   13658:	beq	1461c <__assert_fail@plt+0x1ed0>
   1365c:	mov	r2, r7
   13660:	mov	r1, sl
   13664:	mov	r0, r5
   13668:	bl	126e0 <strncmp@plt>
   1366c:	cmp	r0, #0
   13670:	bne	1461c <__assert_fail@plt+0x1ed0>
   13674:	cmn	r5, r7
   13678:	beq	1461c <__assert_fail@plt+0x1ed0>
   1367c:	ldrd	r2, [sp, #72]	; 0x48
   13680:	orrs	r3, r2, r3
   13684:	beq	13608 <__assert_fail@plt+0xebc>
   13688:	ldr	r1, [pc, #376]	; 13808 <__assert_fail@plt+0x10bc>
   1368c:	mov	r2, #5
   13690:	mov	r0, #0
   13694:	bl	121dc <dcgettext@plt>
   13698:	mov	r1, r0
   1369c:	mov	r0, #1
   136a0:	bl	125f0 <errx@plt>
   136a4:	ldr	r6, [pc, #296]	; 137d4 <__assert_fail@plt+0x1088>
   136a8:	mov	r2, #5
   136ac:	ldr	r1, [pc, #344]	; 1380c <__assert_fail@plt+0x10c0>
   136b0:	mov	r0, #0
   136b4:	ldr	sl, [r6]
   136b8:	bl	121dc <dcgettext@plt>
   136bc:	ldr	r3, [pc, #116]	; 13738 <__assert_fail@plt+0xfec>
   136c0:	mov	r1, #1
   136c4:	sub	r4, r5, #4
   136c8:	ldr	r3, [r3]
   136cc:	add	r5, r5, #56	; 0x38
   136d0:	ldr	r7, [pc, #312]	; 13810 <__assert_fail@plt+0x10c4>
   136d4:	ldr	r9, [pc, #312]	; 13814 <__assert_fail@plt+0x10c8>
   136d8:	ldr	r8, [pc, #312]	; 13818 <__assert_fail@plt+0x10cc>
   136dc:	mov	r2, r0
   136e0:	mov	r0, sl
   136e4:	bl	12578 <__fprintf_chk@plt>
   136e8:	ldr	r0, [r4, #4]!
   136ec:	cmp	r0, #0
   136f0:	beq	13920 <__assert_fail@plt+0x11d4>
   136f4:	cmp	r0, #98	; 0x62
   136f8:	beq	13934 <__assert_fail@plt+0x11e8>
   136fc:	ldr	r2, [pc, #280]	; 1381c <__assert_fail@plt+0x10d0>
   13700:	b	138ec <__assert_fail@plt+0x11a0>
   13704:	andeq	r4, r3, r0, lsl #25
   13708:	andeq	r3, r2, r8, ror #16
   1370c:	strdeq	r2, [r2], -ip
   13710:	andeq	r2, r2, r0, lsl pc
   13714:	andeq	r2, r2, r0, lsr sl
   13718:	andeq	r4, r1, ip, asr #26
   1371c:	andeq	r3, r2, r8, ror #8
   13720:	andeq	r2, r2, r4, ror #24
   13724:	andeq	r5, r3, r4, lsr r0
   13728:	andeq	r5, r3, r0, lsr r0
   1372c:	andeq	r5, r3, r8, lsr #32
   13730:	andeq	r2, r2, r8, asr #30
   13734:	andeq	r3, r2, r0, lsr #8
   13738:	andeq	r5, r3, r0, lsl r0
   1373c:	andeq	r3, r2, ip, lsr #8
   13740:	andeq	r2, r2, ip, ror #30
   13744:	andeq	r5, r3, r8, lsl r0
   13748:	andeq	r3, r2, r4, lsr r6
   1374c:	andeq	r3, r2, r4, ror #12
   13750:	andeq	r4, r1, r4, lsr sl
   13754:	andeq	r5, r3, r0, rrx
   13758:	andeq	r3, r2, r8, lsr #10
   1375c:	andeq	r5, r3, r4, lsr #32
   13760:	andeq	r2, r2, ip, lsl #31
   13764:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   13768:	andeq	r3, r2, ip, ror #7
   1376c:	ldrdeq	r2, [r2], -r0
   13770:	andeq	r3, r2, r4, lsl r0
   13774:	andeq	r3, r2, r0, lsr #32
   13778:	andeq	r3, r2, r0, rrx
   1377c:	andeq	r3, r2, r4, lsr #1
   13780:	andeq	r3, r2, r8, ror #1
   13784:	andeq	r3, r2, r0, lsl r1
   13788:	andeq	r3, r2, r0, ror #2
   1378c:	muleq	r2, r8, r1
   13790:	andeq	r3, r2, r0, ror #3
   13794:	andeq	r3, r2, ip, lsl r2
   13798:	andeq	r3, r2, r8, asr #4
   1379c:	andeq	r3, r2, r0, lsl #5
   137a0:			; <UNDEFINED> instruction: 0x000232b0
   137a4:	andeq	r3, r2, r4, ror #5
   137a8:	andeq	r3, r2, r8, lsl r3
   137ac:	andeq	r3, r2, r8, asr r3
   137b0:	andeq	r3, r2, ip, ror r3
   137b4:	muleq	r2, r0, r3
   137b8:	andeq	r3, r2, r0, asr #7
   137bc:	andeq	r3, r2, ip, lsr #7
   137c0:	andeq	r3, r2, r0, lsr #7
   137c4:	ldrdeq	r3, [r2], -r0
   137c8:	strdeq	r3, [r2], -r8
   137cc:	andeq	r3, r2, r4, lsl r4
   137d0:	andeq	r3, r2, r0, asr #9
   137d4:	andeq	r5, r3, r0, lsr #32
   137d8:	andeq	r3, r2, r0, asr #8
   137dc:	andeq	r3, r2, r4, lsr r5
   137e0:	andeq	r3, r2, r0, lsr #11
   137e4:	andeq	r3, r2, r0, lsl r6
   137e8:	andeq	r3, r2, r0, asr #16
   137ec:	andeq	r3, r2, ip, ror #16
   137f0:	andeq	r4, pc, r0, asr #4
   137f4:	andeq	r3, r2, ip, asr #12
   137f8:	andeq	r3, r2, r4, lsr #13
   137fc:	andeq	r3, r2, r8, asr #13
   13800:	andeq	r3, r2, r0, lsl #13
   13804:	andeq	r3, r2, r0, lsl #9
   13808:	andeq	r3, r2, ip, asr #9
   1380c:	andeq	r2, r2, ip, lsl pc
   13810:	andeq	r3, r2, r8, lsr r9
   13814:	strdeq	r2, [r2], -r4
   13818:	andeq	r2, r2, r0, asr #30
   1381c:	andeq	r2, r2, r4, lsr fp
   13820:	andeq	r3, r2, r0, asr #18
   13824:	andeq	r2, r2, ip, ror #29
   13828:	andeq	r2, r2, r4, ror #25
   1382c:	ldrdeq	r0, [r0], -r5
   13830:	strdeq	r3, [r2], -r8
   13834:	andeq	r3, r2, r8, asr #11
   13838:	andeq	r3, r2, r0, asr #14
   1383c:	andeq	r3, r2, r8, ror #14
   13840:	ldrdeq	r3, [r2], -r0
   13844:	andeq	r3, r2, r4, lsl #18
   13848:	andeq	r2, r2, r0, lsr sl
   1384c:	andeq	r5, r3, r8, lsr r0
   13850:	andeq	r3, r2, ip, lsl r8
   13854:	andeq	r3, r2, r0, asr #29
   13858:	andeq	r3, r2, r0, lsl r8
   1385c:	muleq	r2, r4, r8
   13860:			; <UNDEFINED> instruction: 0x000238b0
   13864:	andeq	r3, r2, r4, lsr #16
   13868:	andeq	r5, r3, r8, rrx
   1386c:	andeq	r1, r0, r9, ror #4
   13870:	andeq	r3, r2, ip, lsl r7
   13874:	strdeq	r3, [r2], -r0
   13878:	andeq	r3, r2, r8, lsr #18
   1387c:	andeq	r3, r2, r8, ror #17
   13880:	andeq	r3, r2, r4, lsl r8
   13884:	andeq	r3, r2, ip, asr #15
   13888:	andeq	r2, r2, r8, lsl #26
   1388c:	andeq	r0, r0, r6, ror r1
   13890:	andeq	r2, r2, r4, lsl sp
   13894:	andeq	r0, r0, fp, asr #3
   13898:	andeq	r2, r2, ip, ror #25
   1389c:	andeq	r3, r2, ip, asr r6
   138a0:	andeq	r0, r0, r5, lsr r1
   138a4:	strdeq	r3, [r2], -r0
   138a8:	andeq	r3, r2, ip, lsr #9
   138ac:	andeq	r3, r2, r4, lsl #10
   138b0:	andeq	r3, r2, r0, lsl #11
   138b4:	andeq	r3, r2, r4, asr r5
   138b8:	strdeq	r3, [r2], -r0
   138bc:	andeq	r3, r2, r4, lsl #9
   138c0:	muleq	r2, r8, lr
   138c4:	andeq	r2, r2, r0, lsr #26
   138c8:	muleq	r2, r0, r7
   138cc:	strdeq	r2, [r2], -r8
   138d0:	andeq	r2, r2, r8, ror #28
   138d4:			; <UNDEFINED> instruction: 0x000237b0
   138d8:	andeq	r4, r2, r4
   138dc:	add	r2, r2, #16
   138e0:	ldr	r1, [r2, #12]
   138e4:	cmp	r0, r1
   138e8:	beq	13938 <__assert_fail@plt+0x11ec>
   138ec:	ldr	r3, [r2, #16]
   138f0:	cmp	r3, #0
   138f4:	bne	138dc <__assert_fail@plt+0x1190>
   138f8:	sub	r3, r0, #33	; 0x21
   138fc:	cmp	r3, #93	; 0x5d
   13900:	bhi	13918 <__assert_fail@plt+0x11cc>
   13904:	mov	r3, r0
   13908:	mov	r2, r8
   1390c:	mov	r1, #1
   13910:	ldr	r0, [r6]
   13914:	bl	12578 <__fprintf_chk@plt>
   13918:	cmp	r5, r4
   1391c:	bne	136e8 <__assert_fail@plt+0xf9c>
   13920:	ldr	r1, [r6]
   13924:	mov	r0, #10
   13928:	bl	12620 <fputc@plt>
   1392c:	mov	r0, #1
   13930:	bl	123f8 <exit@plt>
   13934:	mov	r3, r9
   13938:	mov	r2, r7
   1393c:	mov	r1, #1
   13940:	ldr	r0, [r6]
   13944:	bl	12578 <__fprintf_chk@plt>
   13948:	b	13918 <__assert_fail@plt+0x11cc>
   1394c:	mov	r0, sl
   13950:	bl	14b10 <__assert_fail@plt+0x23c4>
   13954:	cmp	r6, #0
   13958:	mov	r7, r0
   1395c:	moveq	r3, r0
   13960:	bne	143dc <__assert_fail@plt+0x1c90>
   13964:	cmp	r4, #0
   13968:	bge	12c98 <__assert_fail@plt+0x54c>
   1396c:	add	r4, r4, r3
   13970:	add	r4, r4, #1
   13974:	b	12c98 <__assert_fail@plt+0x54c>
   13978:	ldr	r1, [pc, #-352]	; 13820 <__assert_fail@plt+0x10d4>
   1397c:	mov	r2, #5
   13980:	mov	r0, #0
   13984:	bl	121dc <dcgettext@plt>
   13988:	ldr	r5, [pc, #-364]	; 13824 <__assert_fail@plt+0x10d8>
   1398c:	mov	r1, r0
   13990:	b	12f04 <__assert_fail@plt+0x7b8>
   13994:	mov	r0, sl
   13998:	bl	14b10 <__assert_fail@plt+0x23c4>
   1399c:	mov	r7, r0
   139a0:	add	r6, r6, r7
   139a4:	mov	r3, r7
   139a8:	add	r7, r6, #1
   139ac:	b	13964 <__assert_fail@plt+0x1218>
   139b0:	ldr	r2, [sp, #76]	; 0x4c
   139b4:	ldr	r3, [sp, #72]	; 0x48
   139b8:	orrs	r3, r2, r3
   139bc:	bne	13688 <__assert_fail@plt+0xf3c>
   139c0:	ldr	r3, [pc, #-416]	; 13828 <__assert_fail@plt+0x10dc>
   139c4:	ldr	r2, [pc, #-416]	; 1382c <__assert_fail@plt+0x10e0>
   139c8:	ldr	r1, [pc, #-256]	; 138d0 <__assert_fail@plt+0x1184>
   139cc:	ldr	r0, [pc, #-420]	; 13830 <__assert_fail@plt+0x10e4>
   139d0:	bl	1274c <__assert_fail@plt>
   139d4:	mov	r1, r6
   139d8:	ldr	r0, [sp, #36]	; 0x24
   139dc:	bl	122c0 <blkid_probe_set_sectorsize@plt>
   139e0:	b	13334 <__assert_fail@plt+0xbe8>
   139e4:	mov	r2, #5
   139e8:	ldr	r1, [pc, #-444]	; 13834 <__assert_fail@plt+0x10e8>
   139ec:	bl	121dc <dcgettext@plt>
   139f0:	mov	r5, r0
   139f4:	ldr	r0, [pc, #-404]	; 13868 <__assert_fail@plt+0x111c>
   139f8:	bl	17aa8 <__assert_fail@plt+0x535c>
   139fc:	mov	r1, r5
   13a00:	mov	r2, r0
   13a04:	mov	r0, #1
   13a08:	bl	1253c <__printf_chk@plt>
   13a0c:	b	132a0 <__assert_fail@plt+0xb54>
   13a10:	mov	r2, #5
   13a14:	ldr	r1, [pc, #-484]	; 13838 <__assert_fail@plt+0x10ec>
   13a18:	mov	r0, #0
   13a1c:	bl	121dc <dcgettext@plt>
   13a20:	mov	r6, r0
   13a24:	mov	r0, r5
   13a28:	bl	125b4 <blkid_parttable_get_type@plt>
   13a2c:	mov	r2, sl
   13a30:	mov	r1, r6
   13a34:	mov	r3, r0
   13a38:	mov	r0, #1
   13a3c:	bl	1253c <__printf_chk@plt>
   13a40:	ldr	r0, [sp, #40]	; 0x28
   13a44:	bl	12518 <blkid_partlist_numof_partitions@plt>
   13a48:	cmp	r0, #0
   13a4c:	bne	13394 <__assert_fail@plt+0xc48>
   13a50:	mov	r2, #5
   13a54:	ldr	r1, [pc, #-544]	; 1383c <__assert_fail@plt+0x10f0>
   13a58:	bl	121dc <dcgettext@plt>
   13a5c:	mov	r2, sl
   13a60:	mov	r1, r0
   13a64:	mov	r0, #1
   13a68:	bl	1253c <__printf_chk@plt>
   13a6c:	b	13394 <__assert_fail@plt+0xc48>
   13a70:	cmp	r8, #0
   13a74:	ldrd	r4, [sp, #88]	; 0x58
   13a78:	blt	1452c <__assert_fail@plt+0x1de0>
   13a7c:	ldr	r0, [sp, #40]	; 0x28
   13a80:	bl	12518 <blkid_partlist_numof_partitions@plt>
   13a84:	ldr	r2, [sp, #44]	; 0x2c
   13a88:	cmp	r6, #0
   13a8c:	moveq	r6, #1
   13a90:	cmp	r2, #0
   13a94:	lsrne	r3, r6, #31
   13a98:	moveq	r3, #1
   13a9c:	cmp	r3, #0
   13aa0:	mov	r7, r0
   13aa4:	bne	14420 <__assert_fail@plt+0x1cd4>
   13aa8:	cmp	r2, #0
   13aac:	blt	143ec <__assert_fail@plt+0x1ca0>
   13ab0:	ldr	r3, [sp, #44]	; 0x2c
   13ab4:	cmp	r6, r3
   13ab8:	movle	fp, #0
   13abc:	strle	fp, [sp, #52]	; 0x34
   13ac0:	strle	r8, [sp, #32]
   13ac4:	strle	fp, [sp, #64]	; 0x40
   13ac8:	ble	13bac <__assert_fail@plt+0x1460>
   13acc:	b	14634 <__assert_fail@plt+0x1ee8>
   13ad0:	bl	125a8 <blkid_partition_get_start@plt>
   13ad4:	strd	r0, [sp, #56]	; 0x38
   13ad8:	mov	r0, r7
   13adc:	bl	122e4 <blkid_partition_get_size@plt>
   13ae0:	mov	r4, r0
   13ae4:	mov	r0, r7
   13ae8:	mov	r5, r1
   13aec:	bl	125cc <blkid_partition_is_extended@plt>
   13af0:	cmp	r0, #0
   13af4:	beq	13b08 <__assert_fail@plt+0x13bc>
   13af8:	cmp	r5, #0
   13afc:	cmpeq	r4, #2
   13b00:	movhi	r4, #2
   13b04:	movhi	r5, #0
   13b08:	add	r7, sp, #208	; 0xd0
   13b0c:	mov	r8, #152	; 0x98
   13b10:	mov	r2, r8
   13b14:	mov	r1, #0
   13b18:	mov	r0, r7
   13b1c:	bl	124dc <memset@plt>
   13b20:	mov	fp, #0
   13b24:	mov	r3, #2
   13b28:	add	r2, sp, #96	; 0x60
   13b2c:	ldr	r1, [pc, #-712]	; 1386c <__assert_fail@plt+0x1120>
   13b30:	ldr	r0, [sp, #32]
   13b34:	str	r8, [sp, #104]	; 0x68
   13b38:	str	r7, [sp, #108]	; 0x6c
   13b3c:	str	r6, [sp, #224]	; 0xe0
   13b40:	str	r3, [sp, #96]	; 0x60
   13b44:	str	fp, [sp, #100]	; 0x64
   13b48:	bl	122a8 <ioctl@plt>
   13b4c:	cmn	r0, #1
   13b50:	beq	13c90 <__assert_fail@plt+0x1544>
   13b54:	cmp	r0, #0
   13b58:	beq	13be8 <__assert_fail@plt+0x149c>
   13b5c:	ldr	r3, [r9]
   13b60:	cmp	r3, #0
   13b64:	bne	13d48 <__assert_fail@plt+0x15fc>
   13b68:	ldr	r1, [sp, #48]	; 0x30
   13b6c:	cmp	r1, #0
   13b70:	beq	13d34 <__assert_fail@plt+0x15e8>
   13b74:	ldr	r2, [sp, #52]	; 0x34
   13b78:	add	r3, r2, #1
   13b7c:	cmp	r3, r6
   13b80:	beq	14248 <__assert_fail@plt+0x1afc>
   13b84:	mov	r0, sl
   13b88:	bl	149d0 <__assert_fail@plt+0x2284>
   13b8c:	mvn	r3, #0
   13b90:	str	r6, [sp, #52]	; 0x34
   13b94:	str	r6, [sp, #48]	; 0x30
   13b98:	str	r3, [sp, #64]	; 0x40
   13b9c:	ldr	r3, [sp, #44]	; 0x2c
   13ba0:	add	r6, r6, #1
   13ba4:	cmp	r3, r6
   13ba8:	blt	14220 <__assert_fail@plt+0x1ad4>
   13bac:	mov	r1, r6
   13bb0:	ldr	r0, [sp, #40]	; 0x28
   13bb4:	bl	12098 <blkid_partlist_get_partition_by_partno@plt>
   13bb8:	subs	r7, r0, #0
   13bbc:	bne	13ad0 <__assert_fail@plt+0x1384>
   13bc0:	ldr	r3, [r9]
   13bc4:	cmp	r3, #0
   13bc8:	beq	13b9c <__assert_fail@plt+0x1450>
   13bcc:	mov	r2, #5
   13bd0:	ldr	r1, [pc, #-920]	; 13840 <__assert_fail@plt+0x10f4>
   13bd4:	bl	121dc <dcgettext@plt>
   13bd8:	mov	r2, r6
   13bdc:	mov	r1, sl
   13be0:	bl	12608 <warn@plt>
   13be4:	b	13b9c <__assert_fail@plt+0x1450>
   13be8:	mov	r2, #132	; 0x84
   13bec:	mov	r1, #0
   13bf0:	add	r0, sp, #228	; 0xe4
   13bf4:	bl	124dc <memset@plt>
   13bf8:	ldr	r3, [sp, #60]	; 0x3c
   13bfc:	ldr	r2, [sp, #56]	; 0x38
   13c00:	mov	lr, #0
   13c04:	lsl	r1, r3, #9
   13c08:	orr	r1, r1, r2, lsr #23
   13c0c:	lsl	r0, r2, #9
   13c10:	lsl	r3, r5, #9
   13c14:	orr	r3, r3, r4, lsr #23
   13c18:	mov	ip, #152	; 0x98
   13c1c:	str	r1, [sp, #212]	; 0xd4
   13c20:	str	r0, [sp, #208]	; 0xd0
   13c24:	lsl	r4, r4, #9
   13c28:	mov	r5, #1
   13c2c:	add	r2, sp, #96	; 0x60
   13c30:	ldr	r1, [pc, #-972]	; 1386c <__assert_fail@plt+0x1120>
   13c34:	ldr	r0, [sp, #32]
   13c38:	str	r6, [sp, #224]	; 0xe0
   13c3c:	str	r7, [sp, #108]	; 0x6c
   13c40:	str	r3, [sp, #220]	; 0xdc
   13c44:	str	r4, [sp, #216]	; 0xd8
   13c48:	str	r5, [sp, #96]	; 0x60
   13c4c:	str	lr, [sp, #100]	; 0x64
   13c50:	str	ip, [sp, #104]	; 0x68
   13c54:	bl	122a8 <ioctl@plt>
   13c58:	cmp	r0, #0
   13c5c:	bne	13b9c <__assert_fail@plt+0x1450>
   13c60:	ldr	r3, [r9]
   13c64:	cmp	r3, #0
   13c68:	beq	13b9c <__assert_fail@plt+0x1450>
   13c6c:	mov	r2, #5
   13c70:	ldr	r1, [pc, #-1052]	; 1385c <__assert_fail@plt+0x1110>
   13c74:	bl	121dc <dcgettext@plt>
   13c78:	mov	r3, r6
   13c7c:	mov	r2, sl
   13c80:	mov	r1, r0
   13c84:	mov	r0, r5
   13c88:	bl	1253c <__printf_chk@plt>
   13c8c:	b	13b9c <__assert_fail@plt+0x1450>
   13c90:	bl	1247c <__errno_location@plt>
   13c94:	ldr	r3, [r0]
   13c98:	cmp	r3, #6
   13c9c:	beq	13be8 <__assert_fail@plt+0x149c>
   13ca0:	cmp	r3, #16
   13ca4:	bne	13b5c <__assert_fail@plt+0x1410>
   13ca8:	ldr	r3, [r9]
   13cac:	mov	r2, #132	; 0x84
   13cb0:	mov	r1, fp
   13cb4:	add	r0, sp, #228	; 0xe4
   13cb8:	str	r3, [sp, #68]	; 0x44
   13cbc:	bl	124dc <memset@plt>
   13cc0:	ldr	r2, [sp, #60]	; 0x3c
   13cc4:	lsl	lr, r5, #9
   13cc8:	orr	lr, lr, r4, lsr #23
   13ccc:	lsl	r3, r2, #9
   13cd0:	ldr	r2, [sp, #56]	; 0x38
   13cd4:	lsl	r4, r4, #9
   13cd8:	mov	r5, #3
   13cdc:	orr	r3, r3, r2, lsr #23
   13ce0:	lsl	ip, r2, #9
   13ce4:	ldr	r1, [pc, #-1152]	; 1386c <__assert_fail@plt+0x1120>
   13ce8:	add	r2, sp, #96	; 0x60
   13cec:	ldr	r0, [sp, #32]
   13cf0:	str	r3, [sp, #212]	; 0xd4
   13cf4:	str	r4, [sp, #216]	; 0xd8
   13cf8:	str	ip, [sp, #208]	; 0xd0
   13cfc:	str	r6, [sp, #224]	; 0xe0
   13d00:	str	fp, [sp, #100]	; 0x64
   13d04:	str	r8, [sp, #104]	; 0x68
   13d08:	str	r7, [sp, #108]	; 0x6c
   13d0c:	str	lr, [sp, #220]	; 0xdc
   13d10:	str	r5, [sp, #96]	; 0x60
   13d14:	bl	122a8 <ioctl@plt>
   13d18:	ldr	r3, [sp, #68]	; 0x44
   13d1c:	cmp	r3, fp
   13d20:	mov	r4, r0
   13d24:	bne	1449c <__assert_fail@plt+0x1d50>
   13d28:	cmp	r0, #0
   13d2c:	bne	13b68 <__assert_fail@plt+0x141c>
   13d30:	b	13b9c <__assert_fail@plt+0x1450>
   13d34:	mvn	r3, #0
   13d38:	str	r6, [sp, #52]	; 0x34
   13d3c:	str	r6, [sp, #48]	; 0x30
   13d40:	str	r3, [sp, #64]	; 0x40
   13d44:	b	13b9c <__assert_fail@plt+0x1450>
   13d48:	mov	r2, #5
   13d4c:	ldr	r1, [pc, #-1296]	; 13844 <__assert_fail@plt+0x10f8>
   13d50:	mov	r0, #0
   13d54:	bl	121dc <dcgettext@plt>
   13d58:	mov	r2, r6
   13d5c:	mov	r1, sl
   13d60:	bl	12608 <warn@plt>
   13d64:	b	13b68 <__assert_fail@plt+0x141c>
   13d68:	ldr	r3, [sp, #44]	; 0x2c
   13d6c:	cmp	r8, #0
   13d70:	str	r6, [sp, #80]	; 0x50
   13d74:	str	r3, [sp, #84]	; 0x54
   13d78:	blt	14518 <__assert_fail@plt+0x1dcc>
   13d7c:	ldr	r4, [sp, #40]	; 0x28
   13d80:	add	r2, sp, #84	; 0x54
   13d84:	add	r1, sp, #80	; 0x50
   13d88:	mov	r0, r4
   13d8c:	bl	14784 <__assert_fail@plt+0x2038>
   13d90:	subs	r6, r0, #0
   13d94:	movne	fp, r6
   13d98:	bne	134dc <__assert_fail@plt+0xd90>
   13d9c:	mov	r0, r4
   13da0:	bl	12518 <blkid_partlist_numof_partitions@plt>
   13da4:	mov	fp, r6
   13da8:	str	r6, [sp, #32]
   13dac:	mov	r4, r6
   13db0:	str	r8, [sp, #48]	; 0x30
   13db4:	str	r6, [sp, #64]	; 0x40
   13db8:	mov	r5, r6
   13dbc:	str	r9, [sp, #52]	; 0x34
   13dc0:	str	r0, [sp, #44]	; 0x2c
   13dc4:	b	13df8 <__assert_fail@plt+0x16ac>
   13dc8:	add	r2, r5, #1
   13dcc:	cmp	r9, r2
   13dd0:	moveq	r5, r9
   13dd4:	mvneq	fp, #0
   13dd8:	beq	13df4 <__assert_fail@plt+0x16a8>
   13ddc:	mov	r2, r5
   13de0:	mvn	fp, #0
   13de4:	mov	r5, r9
   13de8:	mov	r0, sl
   13dec:	bl	1496c <__assert_fail@plt+0x2220>
   13df0:	str	r9, [sp, #32]
   13df4:	add	r4, r4, #1
   13df8:	ldr	r3, [sp, #44]	; 0x2c
   13dfc:	cmp	r3, r4
   13e00:	ble	142d4 <__assert_fail@plt+0x1b88>
   13e04:	mov	r1, r4
   13e08:	ldr	r0, [sp, #40]	; 0x28
   13e0c:	bl	12524 <blkid_partlist_get_partition@plt>
   13e10:	mov	r8, r0
   13e14:	bl	126b0 <blkid_partition_get_partno@plt>
   13e18:	ldr	r2, [sp, #80]	; 0x50
   13e1c:	cmp	r2, #0
   13e20:	cmpne	r0, r2
   13e24:	mov	r9, r0
   13e28:	blt	13df4 <__assert_fail@plt+0x16a8>
   13e2c:	ldr	r2, [sp, #84]	; 0x54
   13e30:	cmp	r2, #0
   13e34:	cmpne	r0, r2
   13e38:	bgt	13df4 <__assert_fail@plt+0x16a8>
   13e3c:	mov	r0, r8
   13e40:	bl	125a8 <blkid_partition_get_start@plt>
   13e44:	strd	r0, [sp, #56]	; 0x38
   13e48:	mov	r0, r8
   13e4c:	bl	122e4 <blkid_partition_get_size@plt>
   13e50:	mov	r6, r0
   13e54:	mov	r0, r8
   13e58:	mov	r7, r1
   13e5c:	bl	125cc <blkid_partition_is_extended@plt>
   13e60:	cmp	r0, #0
   13e64:	beq	13e78 <__assert_fail@plt+0x172c>
   13e68:	cmp	r7, #0
   13e6c:	cmpeq	r6, #2
   13e70:	movhi	r6, #2
   13e74:	movhi	r7, #0
   13e78:	mov	r2, #132	; 0x84
   13e7c:	mov	r1, #0
   13e80:	add	r0, sp, #228	; 0xe4
   13e84:	bl	124dc <memset@plt>
   13e88:	ldr	r3, [sp, #60]	; 0x3c
   13e8c:	lsl	r0, r7, #9
   13e90:	orr	r0, r0, r6, lsr #23
   13e94:	lsl	r2, r3, #9
   13e98:	ldr	r3, [sp, #56]	; 0x38
   13e9c:	mov	r8, #0
   13ea0:	mov	lr, #152	; 0x98
   13ea4:	orr	r2, r2, r3, lsr #23
   13ea8:	lsl	r1, r3, #9
   13eac:	add	ip, sp, #208	; 0xd0
   13eb0:	str	r2, [sp, #212]	; 0xd4
   13eb4:	str	r1, [sp, #208]	; 0xd0
   13eb8:	add	r2, sp, #96	; 0x60
   13ebc:	str	r0, [sp, #220]	; 0xdc
   13ec0:	lsl	r6, r6, #9
   13ec4:	mov	r7, #1
   13ec8:	ldr	r1, [pc, #-1636]	; 1386c <__assert_fail@plt+0x1120>
   13ecc:	ldr	r0, [sp, #48]	; 0x30
   13ed0:	str	r9, [sp, #224]	; 0xe0
   13ed4:	str	r6, [sp, #216]	; 0xd8
   13ed8:	str	r7, [sp, #96]	; 0x60
   13edc:	str	r8, [sp, #100]	; 0x64
   13ee0:	str	lr, [sp, #104]	; 0x68
   13ee4:	str	ip, [sp, #108]	; 0x6c
   13ee8:	bl	122a8 <ioctl@plt>
   13eec:	ldr	r3, [sp, #52]	; 0x34
   13ef0:	ldr	r2, [r3]
   13ef4:	cmp	r0, r8
   13ef8:	beq	14258 <__assert_fail@plt+0x1b0c>
   13efc:	cmp	r2, #0
   13f00:	bne	14284 <__assert_fail@plt+0x1b38>
   13f04:	ldr	r1, [sp, #32]
   13f08:	cmp	r1, #0
   13f0c:	bne	13dc8 <__assert_fail@plt+0x167c>
   13f10:	mov	r5, r9
   13f14:	str	r9, [sp, #32]
   13f18:	mvn	fp, #0
   13f1c:	b	13df4 <__assert_fail@plt+0x16a8>
   13f20:	ldr	r3, [sp, #44]	; 0x2c
   13f24:	ldr	r0, [sp, #40]	; 0x28
   13f28:	str	r6, [sp, #80]	; 0x50
   13f2c:	str	r3, [sp, #84]	; 0x54
   13f30:	bl	12518 <blkid_partlist_numof_partitions@plt>
   13f34:	subs	fp, r0, #0
   13f38:	beq	134dc <__assert_fail@plt+0xd90>
   13f3c:	mov	r0, #0
   13f40:	bl	12734 <scols_init_debug@plt>
   13f44:	bl	122cc <scols_new_table@plt>
   13f48:	subs	sl, r0, #0
   13f4c:	beq	14658 <__assert_fail@plt+0x1f0c>
   13f50:	ldr	r5, [sp, #32]
   13f54:	ldr	r6, [pc, #-1808]	; 1384c <__assert_fail@plt+0x1100>
   13f58:	and	r1, r5, #1
   13f5c:	bl	12158 <scols_table_enable_raw@plt>
   13f60:	lsr	r1, r5, #2
   13f64:	and	r1, r1, #1
   13f68:	mov	r0, sl
   13f6c:	bl	122f0 <scols_table_enable_export@plt>
   13f70:	lsr	r1, r5, #1
   13f74:	and	r1, r1, #1
   13f78:	mov	r0, sl
   13f7c:	bl	120f8 <scols_table_enable_noheadings@plt>
   13f80:	mov	r5, #24
   13f84:	ldr	r7, [sp, #48]	; 0x30
   13f88:	b	13fc4 <__assert_fail@plt+0x1878>
   13f8c:	ldr	r3, [r6], #4
   13f90:	cmp	r3, #9
   13f94:	bgt	14670 <__assert_fail@plt+0x1f24>
   13f98:	mul	r3, r5, r3
   13f9c:	ldr	r2, [pc, #-1884]	; 13848 <__assert_fail@plt+0x10fc>
   13fa0:	mov	r0, sl
   13fa4:	add	ip, r2, r3
   13fa8:	ldr	r1, [r2, r3]
   13fac:	vldr	d0, [ip, #8]
   13fb0:	ldr	r2, [ip, #16]
   13fb4:	bl	12110 <scols_table_new_column@plt>
   13fb8:	cmp	r0, #0
   13fbc:	beq	144e4 <__assert_fail@plt+0x1d98>
   13fc0:	add	r7, r7, #1
   13fc4:	ldr	r3, [r9, #48]	; 0x30
   13fc8:	cmp	r7, r3
   13fcc:	bcc	13f8c <__assert_fail@plt+0x1840>
   13fd0:	add	r2, sp, #84	; 0x54
   13fd4:	add	r1, sp, #80	; 0x50
   13fd8:	ldr	r0, [sp, #40]	; 0x28
   13fdc:	bl	14784 <__assert_fail@plt+0x2038>
   13fe0:	subs	r4, r0, #0
   13fe4:	bne	142c4 <__assert_fail@plt+0x1b78>
   13fe8:	str	r4, [sp, #32]
   13fec:	str	r8, [sp, #44]	; 0x2c
   13ff0:	ldr	r3, [sp, #32]
   13ff4:	cmp	fp, r3
   13ff8:	ble	1450c <__assert_fail@plt+0x1dc0>
   13ffc:	ldr	r1, [sp, #32]
   14000:	ldr	r0, [sp, #40]	; 0x28
   14004:	bl	12524 <blkid_partlist_get_partition@plt>
   14008:	mov	r6, r0
   1400c:	bl	126b0 <blkid_partition_get_partno@plt>
   14010:	ldr	r3, [sp, #80]	; 0x50
   14014:	cmp	r3, #0
   14018:	cmpne	r0, r3
   1401c:	blt	14210 <__assert_fail@plt+0x1ac4>
   14020:	ldr	r3, [sp, #84]	; 0x54
   14024:	cmp	r0, r3
   14028:	movle	r5, #0
   1402c:	movgt	r5, #1
   14030:	cmp	r3, #0
   14034:	moveq	r5, #0
   14038:	cmp	r5, #0
   1403c:	bne	14210 <__assert_fail@plt+0x1ac4>
   14040:	mov	r1, r5
   14044:	mov	r0, sl
   14048:	bl	12374 <scols_table_new_line@plt>
   1404c:	subs	r8, r0, #0
   14050:	beq	14554 <__assert_fail@plt+0x1e08>
   14054:	ldr	r7, [pc, #-2064]	; 1384c <__assert_fail@plt+0x1100>
   14058:	ldr	r3, [r9, #48]	; 0x30
   1405c:	cmp	r5, r3
   14060:	bcs	14210 <__assert_fail@plt+0x1ac4>
   14064:	ldr	r3, [r7], #4
   14068:	mov	r2, #0
   1406c:	cmp	r3, #9
   14070:	str	r2, [sp, #96]	; 0x60
   14074:	bgt	14670 <__assert_fail@plt+0x1f24>
   14078:	cmp	r3, #9
   1407c:	ldrls	pc, [pc, r3, lsl #2]
   14080:	b	14104 <__assert_fail@plt+0x19b8>
   14084:	andeq	r4, r1, ip, lsl #3
   14088:	andeq	r4, r1, r0, lsl #3
   1408c:	andeq	r4, r1, r0, asr #2
   14090:	andeq	r4, r1, r0, lsr #2
   14094:	ldrdeq	r4, [r1], -ip
   14098:	ldrdeq	r4, [r1], -r0
   1409c:	andeq	r4, r1, r4, asr #3
   140a0:	andeq	r4, r1, r8, lsr #3
   140a4:	andeq	r4, r1, r8, ror #1
   140a8:	andeq	r4, r1, ip, lsr #1
   140ac:	mov	r0, r6
   140b0:	bl	1259c <blkid_partition_get_table@plt>
   140b4:	cmp	r0, #0
   140b8:	beq	14104 <__assert_fail@plt+0x19b8>
   140bc:	bl	125b4 <blkid_parttable_get_type@plt>
   140c0:	cmp	r0, #0
   140c4:	beq	14104 <__assert_fail@plt+0x19b8>
   140c8:	mov	r2, r0
   140cc:	mov	r1, r5
   140d0:	mov	r0, r8
   140d4:	bl	120a4 <scols_line_set_data@plt>
   140d8:	cmp	r0, #0
   140dc:	bne	142a4 <__assert_fail@plt+0x1b58>
   140e0:	add	r5, r5, #1
   140e4:	b	14058 <__assert_fail@plt+0x190c>
   140e8:	mov	r0, r6
   140ec:	bl	1265c <blkid_partition_get_flags@plt>
   140f0:	mov	r2, r0
   140f4:	mov	r3, r1
   140f8:	add	r0, sp, #96	; 0x60
   140fc:	ldr	r1, [pc, #-2228]	; 13850 <__assert_fail@plt+0x1104>
   14100:	bl	14898 <__assert_fail@plt+0x214c>
   14104:	ldr	r2, [sp, #96]	; 0x60
   14108:	cmp	r2, #0
   1410c:	beq	140e0 <__assert_fail@plt+0x1994>
   14110:	mov	r1, r5
   14114:	mov	r0, r8
   14118:	bl	120bc <scols_line_refer_data@plt>
   1411c:	b	140d8 <__assert_fail@plt+0x198c>
   14120:	mov	r0, r6
   14124:	bl	122e4 <blkid_partition_get_size@plt>
   14128:	mov	r2, r0
   1412c:	mov	r3, r1
   14130:	add	r0, sp, #96	; 0x60
   14134:	ldr	r1, [pc, #-2276]	; 13858 <__assert_fail@plt+0x110c>
   14138:	bl	14898 <__assert_fail@plt+0x214c>
   1413c:	b	14104 <__assert_fail@plt+0x19b8>
   14140:	mov	r0, r6
   14144:	bl	125a8 <blkid_partition_get_start@plt>
   14148:	str	r0, [sp, #52]	; 0x34
   1414c:	mov	r0, r6
   14150:	str	r1, [sp, #48]	; 0x30
   14154:	bl	122e4 <blkid_partition_get_size@plt>
   14158:	ldr	r2, [sp, #52]	; 0x34
   1415c:	ldr	r3, [sp, #48]	; 0x30
   14160:	adds	r2, r2, r0
   14164:	adc	r3, r3, r1
   14168:	subs	r2, r2, #1
   1416c:	sbc	r3, r3, #0
   14170:	ldr	r1, [pc, #-2336]	; 13858 <__assert_fail@plt+0x110c>
   14174:	add	r0, sp, #96	; 0x60
   14178:	bl	14898 <__assert_fail@plt+0x214c>
   1417c:	b	14104 <__assert_fail@plt+0x19b8>
   14180:	mov	r0, r6
   14184:	bl	125a8 <blkid_partition_get_start@plt>
   14188:	b	14128 <__assert_fail@plt+0x19dc>
   1418c:	mov	r0, r6
   14190:	bl	126b0 <blkid_partition_get_partno@plt>
   14194:	ldr	r1, [pc, #-2376]	; 13854 <__assert_fail@plt+0x1108>
   14198:	mov	r2, r0
   1419c:	add	r0, sp, #96	; 0x60
   141a0:	bl	14898 <__assert_fail@plt+0x214c>
   141a4:	b	14104 <__assert_fail@plt+0x19b8>
   141a8:	mov	r0, r6
   141ac:	bl	12440 <blkid_partition_get_type_string@plt>
   141b0:	cmp	r0, #0
   141b4:	mov	r0, r6
   141b8:	beq	144cc <__assert_fail@plt+0x1d80>
   141bc:	bl	12440 <blkid_partition_get_type_string@plt>
   141c0:	b	140c0 <__assert_fail@plt+0x1974>
   141c4:	mov	r0, r6
   141c8:	bl	12308 <blkid_partition_get_uuid@plt>
   141cc:	b	140c0 <__assert_fail@plt+0x1974>
   141d0:	mov	r0, r6
   141d4:	bl	122d8 <blkid_partition_get_name@plt>
   141d8:	b	140c0 <__assert_fail@plt+0x1974>
   141dc:	ldr	r3, [r9, #4]
   141e0:	ands	r3, r3, #2
   141e4:	beq	14450 <__assert_fail@plt+0x1d04>
   141e8:	mov	r0, r6
   141ec:	bl	122e4 <blkid_partition_get_size@plt>
   141f0:	mov	r3, r0
   141f4:	lsl	r1, r1, #9
   141f8:	lsl	r2, r3, #9
   141fc:	add	r0, sp, #96	; 0x60
   14200:	orr	r3, r1, r3, lsr #23
   14204:	ldr	r1, [pc, #-2484]	; 13858 <__assert_fail@plt+0x110c>
   14208:	bl	14898 <__assert_fail@plt+0x214c>
   1420c:	b	14104 <__assert_fail@plt+0x19b8>
   14210:	ldr	r3, [sp, #32]
   14214:	add	r3, r3, #1
   14218:	str	r3, [sp, #32]
   1421c:	b	13ff0 <__assert_fail@plt+0x18a4>
   14220:	ldr	r3, [sp, #48]	; 0x30
   14224:	ldr	r8, [sp, #32]
   14228:	cmp	r3, #0
   1422c:	ldr	fp, [sp, #64]	; 0x40
   14230:	beq	134dc <__assert_fail@plt+0xd90>
   14234:	ldr	r2, [sp, #52]	; 0x34
   14238:	mov	r1, r3
   1423c:	mov	r0, sl
   14240:	bl	149d0 <__assert_fail@plt+0x2284>
   14244:	b	134dc <__assert_fail@plt+0xd90>
   14248:	mvn	r3, #0
   1424c:	str	r6, [sp, #52]	; 0x34
   14250:	str	r3, [sp, #64]	; 0x40
   14254:	b	13b9c <__assert_fail@plt+0x1450>
   14258:	cmp	r2, r8
   1425c:	beq	13df4 <__assert_fail@plt+0x16a8>
   14260:	mov	r2, #5
   14264:	ldr	r1, [pc, #-2576]	; 1385c <__assert_fail@plt+0x1110>
   14268:	bl	121dc <dcgettext@plt>
   1426c:	mov	r3, r9
   14270:	mov	r2, sl
   14274:	mov	r1, r0
   14278:	mov	r0, r7
   1427c:	bl	1253c <__printf_chk@plt>
   14280:	b	13df4 <__assert_fail@plt+0x16a8>
   14284:	mov	r0, r8
   14288:	mov	r2, #5
   1428c:	ldr	r1, [pc, #-2612]	; 13860 <__assert_fail@plt+0x1114>
   14290:	bl	121dc <dcgettext@plt>
   14294:	mov	r2, r9
   14298:	mov	r1, sl
   1429c:	bl	12608 <warn@plt>
   142a0:	b	13f04 <__assert_fail@plt+0x17b8>
   142a4:	mov	r2, #5
   142a8:	ldr	r1, [pc, #-2636]	; 13864 <__assert_fail@plt+0x1118>
   142ac:	mov	r0, #0
   142b0:	ldr	r8, [sp, #44]	; 0x2c
   142b4:	bl	121dc <dcgettext@plt>
   142b8:	bl	12608 <warn@plt>
   142bc:	mov	r0, sl
   142c0:	bl	12614 <scols_print_table@plt>
   142c4:	mov	r0, sl
   142c8:	bl	12380 <scols_unref_table@plt>
   142cc:	mov	fp, r4
   142d0:	b	134dc <__assert_fail@plt+0xd90>
   142d4:	ldr	r3, [sp, #32]
   142d8:	ldr	r8, [sp, #48]	; 0x30
   142dc:	cmp	r3, #0
   142e0:	ldr	r6, [sp, #64]	; 0x40
   142e4:	ldr	r9, [sp, #52]	; 0x34
   142e8:	bne	144f8 <__assert_fail@plt+0x1dac>
   142ec:	ldr	r3, [r9, #480]	; 0x1e0
   142f0:	cmp	r3, #0
   142f4:	beq	134dc <__assert_fail@plt+0xd90>
   142f8:	ldr	r0, [pc, #-2712]	; 13868 <__assert_fail@plt+0x111c>
   142fc:	bl	194dc <__assert_fail@plt+0x6d90>
   14300:	cmp	r0, #0
   14304:	beq	134dc <__assert_fail@plt+0xd90>
   14308:	ldrd	r2, [sp, #80]	; 0x50
   1430c:	orrs	r3, r2, r3
   14310:	beq	134dc <__assert_fail@plt+0xd90>
   14314:	add	r4, sp, #208	; 0xd0
   14318:	mov	sl, #152	; 0x98
   1431c:	ldr	r5, [pc, #-2744]	; 1386c <__assert_fail@plt+0x1120>
   14320:	b	14390 <__assert_fail@plt+0x1c44>
   14324:	mov	r1, r6
   14328:	ldr	r0, [sp, #40]	; 0x28
   1432c:	bl	12524 <blkid_partlist_get_partition@plt>
   14330:	bl	126b0 <blkid_partition_get_partno@plt>
   14334:	ldr	r3, [sp, #80]	; 0x50
   14338:	cmp	r0, r3
   1433c:	mov	r7, r0
   14340:	blt	14350 <__assert_fail@plt+0x1c04>
   14344:	ldr	r3, [sp, #84]	; 0x54
   14348:	cmp	r0, r3
   1434c:	ble	1438c <__assert_fail@plt+0x1c40>
   14350:	mov	r2, #152	; 0x98
   14354:	mov	r1, #0
   14358:	mov	r0, r4
   1435c:	bl	124dc <memset@plt>
   14360:	mov	ip, #2
   14364:	mov	r3, #0
   14368:	add	r2, sp, #96	; 0x60
   1436c:	mov	r1, r5
   14370:	mov	r0, r8
   14374:	str	r7, [sp, #224]	; 0xe0
   14378:	str	sl, [sp, #104]	; 0x68
   1437c:	str	r4, [sp, #108]	; 0x6c
   14380:	str	ip, [sp, #96]	; 0x60
   14384:	str	r3, [sp, #100]	; 0x64
   14388:	bl	122a8 <ioctl@plt>
   1438c:	add	r6, r6, #1
   14390:	ldr	r3, [sp, #44]	; 0x2c
   14394:	cmp	r3, r6
   14398:	bgt	14324 <__assert_fail@plt+0x1bd8>
   1439c:	b	134dc <__assert_fail@plt+0xd90>
   143a0:	mov	r2, #5
   143a4:	ldr	r1, [pc, #-2876]	; 13870 <__assert_fail@plt+0x1124>
   143a8:	bl	121dc <dcgettext@plt>
   143ac:	mov	r1, sl
   143b0:	bl	12464 <warnx@plt>
   143b4:	mov	fp, #1
   143b8:	b	134dc <__assert_fail@plt+0xd90>
   143bc:	mov	r2, #5
   143c0:	ldr	r1, [pc, #-2900]	; 13874 <__assert_fail@plt+0x1128>
   143c4:	mov	r0, r5
   143c8:	bl	121dc <dcgettext@plt>
   143cc:	ldr	r1, [sp, #40]	; 0x28
   143d0:	bl	12464 <warnx@plt>
   143d4:	mov	fp, #1
   143d8:	b	134dc <__assert_fail@plt+0xd90>
   143dc:	blt	139a0 <__assert_fail@plt+0x1254>
   143e0:	mov	r3, r0
   143e4:	mov	r7, r6
   143e8:	b	1396c <__assert_fail@plt+0x1220>
   143ec:	mov	r2, r4
   143f0:	mov	r3, r5
   143f4:	mov	r0, sl
   143f8:	bl	14b10 <__assert_fail@plt+0x23c4>
   143fc:	ldr	r3, [sp, #44]	; 0x2c
   14400:	add	r3, r3, r0
   14404:	add	r3, r3, #1
   14408:	str	r3, [sp, #44]	; 0x2c
   1440c:	cmp	r6, #0
   14410:	bge	13ab0 <__assert_fail@plt+0x1364>
   14414:	add	r0, r6, r0
   14418:	add	r6, r0, #1
   1441c:	b	13ab0 <__assert_fail@plt+0x1364>
   14420:	mov	r3, r5
   14424:	mov	r2, r4
   14428:	mov	r0, sl
   1442c:	bl	14b10 <__assert_fail@plt+0x23c4>
   14430:	ldr	r3, [sp, #44]	; 0x2c
   14434:	cmp	r3, #0
   14438:	bne	1456c <__assert_fail@plt+0x1e20>
   1443c:	cmp	r7, r0
   14440:	movge	r3, r7
   14444:	movlt	r3, r0
   14448:	str	r3, [sp, #44]	; 0x2c
   1444c:	b	1440c <__assert_fail@plt+0x1cc0>
   14450:	mov	r0, r6
   14454:	str	r3, [sp, #48]	; 0x30
   14458:	bl	122e4 <blkid_partition_get_size@plt>
   1445c:	ldr	r3, [sp, #48]	; 0x30
   14460:	mov	ip, r0
   14464:	mov	r0, r3
   14468:	lsl	r3, r1, #9
   1446c:	lsl	r2, ip, #9
   14470:	orr	r3, r3, ip, lsr #23
   14474:	bl	16258 <__assert_fail@plt+0x3b0c>
   14478:	str	r0, [sp, #96]	; 0x60
   1447c:	b	14104 <__assert_fail@plt+0x19b8>
   14480:	ldr	r1, [pc, #-3088]	; 13878 <__assert_fail@plt+0x112c>
   14484:	mov	r2, #5
   14488:	mov	r0, #0
   1448c:	bl	121dc <dcgettext@plt>
   14490:	mov	r1, r0
   14494:	mov	r0, #1
   14498:	bl	1223c <err@plt>
   1449c:	mov	r2, #5
   144a0:	ldr	r1, [pc, #-3116]	; 1387c <__assert_fail@plt+0x1130>
   144a4:	mov	r0, fp
   144a8:	bl	121dc <dcgettext@plt>
   144ac:	mov	r3, r6
   144b0:	mov	r2, sl
   144b4:	mov	r1, r0
   144b8:	mov	r0, #1
   144bc:	bl	1253c <__printf_chk@plt>
   144c0:	cmp	r4, fp
   144c4:	bne	13b5c <__assert_fail@plt+0x1410>
   144c8:	b	13b9c <__assert_fail@plt+0x1450>
   144cc:	bl	121c4 <blkid_partition_get_type@plt>
   144d0:	ldr	r1, [pc, #-3160]	; 13880 <__assert_fail@plt+0x1134>
   144d4:	mov	r2, r0
   144d8:	add	r0, sp, #96	; 0x60
   144dc:	bl	14898 <__assert_fail@plt+0x214c>
   144e0:	b	14104 <__assert_fail@plt+0x19b8>
   144e4:	mov	r2, #5
   144e8:	ldr	r1, [pc, #-3180]	; 13884 <__assert_fail@plt+0x1138>
   144ec:	bl	121dc <dcgettext@plt>
   144f0:	bl	12464 <warnx@plt>
   144f4:	b	142c4 <__assert_fail@plt+0x1b78>
   144f8:	mov	r2, r5
   144fc:	mov	r1, r3
   14500:	mov	r0, sl
   14504:	bl	1496c <__assert_fail@plt+0x2220>
   14508:	b	142ec <__assert_fail@plt+0x1ba0>
   1450c:	ldr	r8, [sp, #44]	; 0x2c
   14510:	b	142bc <__assert_fail@plt+0x1b70>
   14514:	bl	12200 <__stack_chk_fail@plt>
   14518:	ldr	r3, [pc, #-3224]	; 13888 <__assert_fail@plt+0x113c>
   1451c:	ldr	r2, [pc, #-3224]	; 1388c <__assert_fail@plt+0x1140>
   14520:	ldr	r1, [pc, #-3160]	; 138d0 <__assert_fail@plt+0x1184>
   14524:	ldr	r0, [pc, #-3216]	; 1389c <__assert_fail@plt+0x1150>
   14528:	bl	1274c <__assert_fail@plt>
   1452c:	ldr	r3, [pc, #-3236]	; 13890 <__assert_fail@plt+0x1144>
   14530:	ldr	r2, [pc, #-3236]	; 13894 <__assert_fail@plt+0x1148>
   14534:	ldr	r1, [pc, #-3180]	; 138d0 <__assert_fail@plt+0x1184>
   14538:	ldr	r0, [pc, #-3236]	; 1389c <__assert_fail@plt+0x1150>
   1453c:	bl	1274c <__assert_fail@plt>
   14540:	ldr	r3, [pc, #-3248]	; 13898 <__assert_fail@plt+0x114c>
   14544:	ldr	r2, [pc, #-3244]	; 138a0 <__assert_fail@plt+0x1154>
   14548:	ldr	r1, [pc, #-3200]	; 138d0 <__assert_fail@plt+0x1184>
   1454c:	ldr	r0, [pc, #-3256]	; 1389c <__assert_fail@plt+0x1150>
   14550:	bl	1274c <__assert_fail@plt>
   14554:	mov	r2, #5
   14558:	ldr	r1, [pc, #-3260]	; 138a4 <__assert_fail@plt+0x1158>
   1455c:	ldr	r8, [sp, #44]	; 0x2c
   14560:	bl	121dc <dcgettext@plt>
   14564:	bl	12608 <warn@plt>
   14568:	b	142bc <__assert_fail@plt+0x1b70>
   1456c:	bge	14414 <__assert_fail@plt+0x1cc8>
   14570:	b	143fc <__assert_fail@plt+0x1cb0>
   14574:	mov	r2, #5
   14578:	ldr	r1, [pc, #-3288]	; 138a8 <__assert_fail@plt+0x115c>
   1457c:	mov	r0, #0
   14580:	bl	121dc <dcgettext@plt>
   14584:	mov	r2, r5
   14588:	mov	r1, r0
   1458c:	mov	r0, #1
   14590:	bl	1223c <err@plt>
   14594:	mov	r2, #5
   14598:	ldr	r1, [pc, #-3292]	; 138c4 <__assert_fail@plt+0x1178>
   1459c:	mov	r0, #0
   145a0:	bl	121dc <dcgettext@plt>
   145a4:	mov	r2, r7
   145a8:	mov	r1, r4
   145ac:	bl	12464 <warnx@plt>
   145b0:	mvn	fp, #0
   145b4:	b	134e4 <__assert_fail@plt+0xd98>
   145b8:	mov	r2, #5
   145bc:	ldr	r1, [pc, #-3352]	; 138ac <__assert_fail@plt+0x1160>
   145c0:	mov	r0, #0
   145c4:	bl	121dc <dcgettext@plt>
   145c8:	mov	r2, r5
   145cc:	mov	r1, r0
   145d0:	mov	r0, #1
   145d4:	bl	125f0 <errx@plt>
   145d8:	ldr	r1, [pc, #-3376]	; 138b0 <__assert_fail@plt+0x1164>
   145dc:	mov	r0, r5
   145e0:	mov	r2, #5
   145e4:	bl	121dc <dcgettext@plt>
   145e8:	mov	r1, r0
   145ec:	mov	r0, #1
   145f0:	bl	1223c <err@plt>
   145f4:	ldr	r1, [pc, #-3400]	; 138b4 <__assert_fail@plt+0x1168>
   145f8:	mov	r2, #5
   145fc:	bl	121dc <dcgettext@plt>
   14600:	mov	r2, sl
   14604:	mov	r1, r0
   14608:	mov	r0, #1
   1460c:	bl	125f0 <errx@plt>
   14610:	mov	r2, #5
   14614:	ldr	r1, [pc, #-3428]	; 138b8 <__assert_fail@plt+0x116c>
   14618:	b	13538 <__assert_fail@plt+0xdec>
   1461c:	mov	r2, #5
   14620:	ldr	r1, [pc, #-3436]	; 138bc <__assert_fail@plt+0x1170>
   14624:	b	13690 <__assert_fail@plt+0xf44>
   14628:	mov	r0, r7
   1462c:	ldr	r1, [pc, #-3444]	; 138c0 <__assert_fail@plt+0x1174>
   14630:	bl	1223c <err@plt>
   14634:	mov	r2, #5
   14638:	ldr	r1, [pc, #-3452]	; 138c4 <__assert_fail@plt+0x1178>
   1463c:	mov	r0, #0
   14640:	bl	121dc <dcgettext@plt>
   14644:	ldr	r2, [sp, #44]	; 0x2c
   14648:	mov	r1, r6
   1464c:	bl	12464 <warnx@plt>
   14650:	mvn	fp, #0
   14654:	b	134dc <__assert_fail@plt+0xd90>
   14658:	mov	r2, #5
   1465c:	ldr	r1, [pc, #-3484]	; 138c8 <__assert_fail@plt+0x117c>
   14660:	bl	121dc <dcgettext@plt>
   14664:	bl	12608 <warn@plt>
   14668:	mvn	fp, #0
   1466c:	b	134dc <__assert_fail@plt+0xd90>
   14670:	ldr	r3, [pc, #-3500]	; 138cc <__assert_fail@plt+0x1180>
   14674:	mov	r2, #140	; 0x8c
   14678:	ldr	r1, [pc, #-3504]	; 138d0 <__assert_fail@plt+0x1184>
   1467c:	ldr	r0, [pc, #-3504]	; 138d4 <__assert_fail@plt+0x1188>
   14680:	bl	1274c <__assert_fail@plt>
   14684:	mov	r2, sl
   14688:	ldr	r1, [pc, #-3512]	; 138d8 <__assert_fail@plt+0x118c>
   1468c:	mov	r0, #1
   14690:	bl	125f0 <errx@plt>
   14694:	mov	fp, #0
   14698:	mov	lr, #0
   1469c:	pop	{r1}		; (ldr r1, [sp], #4)
   146a0:	mov	r2, sp
   146a4:	push	{r2}		; (str r2, [sp, #-4]!)
   146a8:	push	{r0}		; (str r0, [sp, #-4]!)
   146ac:	ldr	ip, [pc, #16]	; 146c4 <__assert_fail@plt+0x1f78>
   146b0:	push	{ip}		; (str ip, [sp, #-4]!)
   146b4:	ldr	r0, [pc, #12]	; 146c8 <__assert_fail@plt+0x1f7c>
   146b8:	ldr	r3, [pc, #12]	; 146cc <__assert_fail@plt+0x1f80>
   146bc:	bl	1235c <__libc_start_main@plt>
   146c0:	bl	126ec <abort@plt>
   146c4:	andeq	r2, r2, r4, lsl #20
   146c8:	andeq	r2, r1, r8, asr r7
   146cc:	andeq	r2, r2, r4, lsr #19
   146d0:	ldr	r3, [pc, #20]	; 146ec <__assert_fail@plt+0x1fa0>
   146d4:	ldr	r2, [pc, #20]	; 146f0 <__assert_fail@plt+0x1fa4>
   146d8:	add	r3, pc, r3
   146dc:	ldr	r2, [r3, r2]
   146e0:	cmp	r2, #0
   146e4:	bxeq	lr
   146e8:	b	123bc <__gmon_start__@plt>
   146ec:			; <UNDEFINED> instruction: 0x000206b4
   146f0:	andeq	r0, r0, r4, ror #4
   146f4:	ldr	r0, [pc, #24]	; 14714 <__assert_fail@plt+0x1fc8>
   146f8:	ldr	r3, [pc, #24]	; 14718 <__assert_fail@plt+0x1fcc>
   146fc:	cmp	r3, r0
   14700:	bxeq	lr
   14704:	ldr	r3, [pc, #16]	; 1471c <__assert_fail@plt+0x1fd0>
   14708:	cmp	r3, #0
   1470c:	bxeq	lr
   14710:	bx	r3
   14714:	andeq	r5, r3, r0, lsl r0
   14718:	andeq	r5, r3, r0, lsl r0
   1471c:	andeq	r0, r0, r0
   14720:	ldr	r0, [pc, #36]	; 1474c <__assert_fail@plt+0x2000>
   14724:	ldr	r1, [pc, #36]	; 14750 <__assert_fail@plt+0x2004>
   14728:	sub	r1, r1, r0
   1472c:	asr	r1, r1, #2
   14730:	add	r1, r1, r1, lsr #31
   14734:	asrs	r1, r1, #1
   14738:	bxeq	lr
   1473c:	ldr	r3, [pc, #16]	; 14754 <__assert_fail@plt+0x2008>
   14740:	cmp	r3, #0
   14744:	bxeq	lr
   14748:	bx	r3
   1474c:	andeq	r5, r3, r0, lsl r0
   14750:	andeq	r5, r3, r0, lsl r0
   14754:	andeq	r0, r0, r0
   14758:	push	{r4, lr}
   1475c:	ldr	r4, [pc, #24]	; 1477c <__assert_fail@plt+0x2030>
   14760:	ldrb	r3, [r4]
   14764:	cmp	r3, #0
   14768:	popne	{r4, pc}
   1476c:	bl	146f4 <__assert_fail@plt+0x1fa8>
   14770:	mov	r3, #1
   14774:	strb	r3, [r4]
   14778:	pop	{r4, pc}
   1477c:	andeq	r5, r3, ip, lsr #32
   14780:	b	14720 <__assert_fail@plt+0x1fd4>
   14784:	push	{r4, r5, r6, r7, r8, r9, lr}
   14788:	sub	sp, sp, #12
   1478c:	mov	r7, r1
   14790:	mov	r8, r2
   14794:	mov	r9, r0
   14798:	bl	12518 <blkid_partlist_numof_partitions@plt>
   1479c:	subs	r6, r0, #0
   147a0:	ble	14860 <__assert_fail@plt+0x2114>
   147a4:	mov	r4, #0
   147a8:	mov	r5, r4
   147ac:	mov	r1, r4
   147b0:	mov	r0, r9
   147b4:	bl	12524 <blkid_partlist_get_partition@plt>
   147b8:	bl	126b0 <blkid_partition_get_partno@plt>
   147bc:	add	r4, r4, #1
   147c0:	cmp	r5, r0
   147c4:	movlt	r5, r0
   147c8:	cmp	r6, r4
   147cc:	bne	147ac <__assert_fail@plt+0x2060>
   147d0:	ldr	r3, [r7]
   147d4:	cmp	r3, #0
   147d8:	addlt	r3, r3, r5
   147dc:	addlt	r3, r3, #1
   147e0:	strlt	r3, [r7]
   147e4:	ldr	r0, [r8]
   147e8:	cmp	r0, #0
   147ec:	addlt	r0, r0, r5
   147f0:	addlt	r3, r0, #1
   147f4:	strlt	r3, [r8]
   147f8:	ldr	r4, [r7]
   147fc:	movlt	r0, r3
   14800:	cmp	r0, #0
   14804:	cmpne	r4, r0
   14808:	movgt	r4, #1
   1480c:	movle	r4, #0
   14810:	bgt	14868 <__assert_fail@plt+0x211c>
   14814:	ldr	r3, [pc, #112]	; 1488c <__assert_fail@plt+0x2140>
   14818:	ldr	r0, [r3]
   1481c:	cmp	r0, #0
   14820:	bne	1482c <__assert_fail@plt+0x20e0>
   14824:	add	sp, sp, #12
   14828:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1482c:	mov	r2, #5
   14830:	ldr	r1, [pc, #88]	; 14890 <__assert_fail@plt+0x2144>
   14834:	mov	r0, r4
   14838:	bl	121dc <dcgettext@plt>
   1483c:	ldr	r2, [r8]
   14840:	ldr	r3, [r7]
   14844:	str	r2, [sp]
   14848:	mov	r2, r5
   1484c:	mov	r1, r0
   14850:	mov	r0, #1
   14854:	bl	1253c <__printf_chk@plt>
   14858:	mov	r0, r4
   1485c:	b	14824 <__assert_fail@plt+0x20d8>
   14860:	mov	r5, #0
   14864:	b	147d0 <__assert_fail@plt+0x2084>
   14868:	mov	r2, #5
   1486c:	ldr	r1, [pc, #32]	; 14894 <__assert_fail@plt+0x2148>
   14870:	mov	r0, #0
   14874:	bl	121dc <dcgettext@plt>
   14878:	ldr	r2, [r8]
   1487c:	ldr	r1, [r7]
   14880:	bl	12464 <warnx@plt>
   14884:	mvn	r0, #21
   14888:	b	14824 <__assert_fail@plt+0x20d8>
   1488c:	andeq	r5, r3, r0, lsr r0
   14890:	andeq	r2, r2, ip, asr #26
   14894:	andeq	r2, r2, r0, lsr #26
   14898:	push	{r1, r2, r3}
   1489c:	push	{r4, lr}
   148a0:	sub	sp, sp, #12
   148a4:	ldr	r4, [pc, #84]	; 14900 <__assert_fail@plt+0x21b4>
   148a8:	add	ip, sp, #24
   148ac:	mov	r3, ip
   148b0:	ldr	r1, [r4]
   148b4:	ldr	r2, [sp, #20]
   148b8:	str	r1, [sp, #4]
   148bc:	mov	r1, #1
   148c0:	str	ip, [sp]
   148c4:	bl	124a0 <__vasprintf_chk@plt>
   148c8:	cmp	r0, #0
   148cc:	blt	148f0 <__assert_fail@plt+0x21a4>
   148d0:	ldr	r2, [sp, #4]
   148d4:	ldr	r3, [r4]
   148d8:	cmp	r2, r3
   148dc:	bne	148fc <__assert_fail@plt+0x21b0>
   148e0:	add	sp, sp, #12
   148e4:	pop	{r4, lr}
   148e8:	add	sp, sp, #12
   148ec:	bx	lr
   148f0:	ldr	r1, [pc, #12]	; 14904 <__assert_fail@plt+0x21b8>
   148f4:	mov	r0, #1
   148f8:	bl	1223c <err@plt>
   148fc:	bl	12200 <__stack_chk_fail@plt>
   14900:	andeq	r4, r3, r0, lsl #25
   14904:	andeq	r2, r2, r0, lsl #27
   14908:	cmp	r1, r2
   1490c:	push	{r4, r5, r6, lr}
   14910:	mov	r4, r1
   14914:	mov	r6, r0
   14918:	beq	14944 <__assert_fail@plt+0x21f8>
   1491c:	mov	r5, r2
   14920:	ldr	r1, [pc, #60]	; 14964 <__assert_fail@plt+0x2218>
   14924:	mov	r2, #5
   14928:	mov	r0, #0
   1492c:	bl	121dc <dcgettext@plt>
   14930:	mov	r3, r5
   14934:	mov	r2, r4
   14938:	mov	r1, r6
   1493c:	pop	{r4, r5, r6, lr}
   14940:	b	12464 <warnx@plt>
   14944:	mov	r2, #5
   14948:	ldr	r1, [pc, #24]	; 14968 <__assert_fail@plt+0x221c>
   1494c:	mov	r0, #0
   14950:	bl	121dc <dcgettext@plt>
   14954:	mov	r2, r4
   14958:	mov	r1, r6
   1495c:	pop	{r4, r5, r6, lr}
   14960:	b	12464 <warnx@plt>
   14964:			; <UNDEFINED> instruction: 0x00022db8
   14968:	muleq	r2, r8, sp
   1496c:	cmp	r1, r2
   14970:	push	{r4, r5, r6, lr}
   14974:	mov	r4, r1
   14978:	mov	r6, r0
   1497c:	beq	149a8 <__assert_fail@plt+0x225c>
   14980:	mov	r5, r2
   14984:	ldr	r1, [pc, #60]	; 149c8 <__assert_fail@plt+0x227c>
   14988:	mov	r2, #5
   1498c:	mov	r0, #0
   14990:	bl	121dc <dcgettext@plt>
   14994:	mov	r3, r5
   14998:	mov	r2, r4
   1499c:	mov	r1, r6
   149a0:	pop	{r4, r5, r6, lr}
   149a4:	b	12464 <warnx@plt>
   149a8:	mov	r2, #5
   149ac:	ldr	r1, [pc, #24]	; 149cc <__assert_fail@plt+0x2280>
   149b0:	mov	r0, #0
   149b4:	bl	121dc <dcgettext@plt>
   149b8:	mov	r2, r4
   149bc:	mov	r1, r6
   149c0:	pop	{r4, r5, r6, lr}
   149c4:	b	12464 <warnx@plt>
   149c8:	strdeq	r2, [r2], -ip
   149cc:	ldrdeq	r2, [r2], -ip
   149d0:	cmp	r1, r2
   149d4:	push	{r4, r5, r6, lr}
   149d8:	mov	r4, r1
   149dc:	mov	r6, r0
   149e0:	beq	14a0c <__assert_fail@plt+0x22c0>
   149e4:	mov	r5, r2
   149e8:	ldr	r1, [pc, #60]	; 14a2c <__assert_fail@plt+0x22e0>
   149ec:	mov	r2, #5
   149f0:	mov	r0, #0
   149f4:	bl	121dc <dcgettext@plt>
   149f8:	mov	r3, r5
   149fc:	mov	r2, r4
   14a00:	mov	r1, r6
   14a04:	pop	{r4, r5, r6, lr}
   14a08:	b	12464 <warnx@plt>
   14a0c:	mov	r2, #5
   14a10:	ldr	r1, [pc, #24]	; 14a30 <__assert_fail@plt+0x22e4>
   14a14:	mov	r0, #0
   14a18:	bl	121dc <dcgettext@plt>
   14a1c:	mov	r2, r4
   14a20:	mov	r1, r6
   14a24:	pop	{r4, r5, r6, lr}
   14a28:	b	12464 <warnx@plt>
   14a2c:	andeq	r2, r2, r0, asr #28
   14a30:	andeq	r2, r2, r0, lsr #28
   14a34:	push	{r4, r5, r6, r7, r8, lr}
   14a38:	subs	r8, r0, #0
   14a3c:	beq	14ab4 <__assert_fail@plt+0x2368>
   14a40:	mov	r7, r1
   14a44:	ldr	r5, [pc, #124]	; 14ac8 <__assert_fail@plt+0x237c>
   14a48:	ldr	r6, [pc, #124]	; 14acc <__assert_fail@plt+0x2380>
   14a4c:	mov	r4, #0
   14a50:	b	14a58 <__assert_fail@plt+0x230c>
   14a54:	ldr	r6, [r5, #-24]	; 0xffffffe8
   14a58:	mov	r2, r7
   14a5c:	mov	r1, r6
   14a60:	mov	r0, r8
   14a64:	bl	12488 <strncasecmp@plt>
   14a68:	cmp	r0, #0
   14a6c:	bne	14a7c <__assert_fail@plt+0x2330>
   14a70:	ldrsb	r3, [r6, r7]
   14a74:	cmp	r3, #0
   14a78:	beq	14aac <__assert_fail@plt+0x2360>
   14a7c:	add	r4, r4, #1
   14a80:	cmp	r4, #10
   14a84:	add	r5, r5, #24
   14a88:	bne	14a54 <__assert_fail@plt+0x2308>
   14a8c:	mov	r2, #5
   14a90:	ldr	r1, [pc, #56]	; 14ad0 <__assert_fail@plt+0x2384>
   14a94:	mov	r0, #0
   14a98:	bl	121dc <dcgettext@plt>
   14a9c:	mov	r1, r8
   14aa0:	bl	12464 <warnx@plt>
   14aa4:	mvn	r0, #0
   14aa8:	pop	{r4, r5, r6, r7, r8, pc}
   14aac:	mov	r0, r4
   14ab0:	pop	{r4, r5, r6, r7, r8, pc}
   14ab4:	ldr	r3, [pc, #24]	; 14ad4 <__assert_fail@plt+0x2388>
   14ab8:	mov	r2, #153	; 0x99
   14abc:	ldr	r1, [pc, #20]	; 14ad8 <__assert_fail@plt+0x238c>
   14ac0:	ldr	r0, [pc, #20]	; 14adc <__assert_fail@plt+0x2390>
   14ac4:	bl	1274c <__assert_fail@plt>
   14ac8:	andeq	r2, r2, r8, asr #20
   14acc:	andeq	r2, r2, r4, ror #28
   14ad0:	andeq	r2, r2, r4, lsl #29
   14ad4:	andeq	r2, r2, r0, lsr #22
   14ad8:	andeq	r2, r2, r8, ror #28
   14adc:	andeq	r2, r2, ip, ror lr
   14ae0:	subs	r3, r0, #0
   14ae4:	beq	14b04 <__assert_fail@plt+0x23b8>
   14ae8:	push	{r4, lr}
   14aec:	bl	121f4 <strdup@plt>
   14af0:	cmp	r0, #0
   14af4:	popne	{r4, pc}
   14af8:	ldr	r1, [pc, #12]	; 14b0c <__assert_fail@plt+0x23c0>
   14afc:	mov	r0, #1
   14b00:	bl	1223c <err@plt>
   14b04:	mov	r0, r3
   14b08:	bx	lr
   14b0c:	muleq	r2, r8, lr
   14b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b14:	sub	sp, sp, #4224	; 0x1080
   14b18:	ldr	sl, [pc, #524]	; 14d2c <__assert_fail@plt+0x25e0>
   14b1c:	sub	sp, sp, #20
   14b20:	mov	r4, r2
   14b24:	mov	r5, r3
   14b28:	add	r2, sp, #4224	; 0x1080
   14b2c:	orrs	r3, r4, r5
   14b30:	add	r2, r2, #12
   14b34:	ldr	r3, [sl]
   14b38:	mov	r6, r0
   14b3c:	str	r3, [r2]
   14b40:	beq	14cec <__assert_fail@plt+0x25a0>
   14b44:	mov	r0, r6
   14b48:	mov	r1, #47	; 0x2f
   14b4c:	bl	125fc <strrchr@plt>
   14b50:	subs	r8, r0, #0
   14b54:	beq	14d04 <__assert_fail@plt+0x25b8>
   14b58:	lsr	r3, r4, #12
   14b5c:	lsl	r0, r4, #12
   14b60:	orr	r3, r3, r5, lsl #20
   14b64:	bic	r2, r5, #4080	; 0xff0
   14b68:	bic	r3, r3, #255	; 0xff
   14b6c:	uxtb	r4, r4
   14b70:	bic	r2, r2, #15
   14b74:	orr	r2, r2, r0, lsr #20
   14b78:	ldr	r1, [pc, #432]	; 14d30 <__assert_fail@plt+0x25e4>
   14b7c:	orr	r4, r3, r4
   14b80:	mov	r3, #4096	; 0x1000
   14b84:	stmib	sp, {r2, r4}
   14b88:	str	r1, [sp]
   14b8c:	mov	r2, #1
   14b90:	mov	r1, r3
   14b94:	add	r0, sp, #140	; 0x8c
   14b98:	add	r8, r8, r2
   14b9c:	bl	12728 <__snprintf_chk@plt>
   14ba0:	add	r0, sp, #140	; 0x8c
   14ba4:	bl	12314 <opendir@plt>
   14ba8:	subs	r6, r0, #0
   14bac:	beq	14d04 <__assert_fail@plt+0x25b8>
   14bb0:	add	r0, sp, #140	; 0x8c
   14bb4:	bl	121f4 <strdup@plt>
   14bb8:	subs	r3, r0, #0
   14bbc:	str	r3, [sp, #20]
   14bc0:	beq	14d20 <__assert_fail@plt+0x25d4>
   14bc4:	ldr	r7, [pc, #360]	; 14d34 <__assert_fail@plt+0x25e8>
   14bc8:	ldr	r9, [pc, #360]	; 14d38 <__assert_fail@plt+0x25ec>
   14bcc:	mov	fp, #0
   14bd0:	mov	r0, r6
   14bd4:	bl	12644 <readdir64@plt>
   14bd8:	subs	r5, r0, #0
   14bdc:	beq	14cb4 <__assert_fail@plt+0x2568>
   14be0:	add	r4, r5, #19
   14be4:	mov	r0, r4
   14be8:	mov	r1, r7
   14bec:	bl	120c8 <strcmp@plt>
   14bf0:	cmp	r0, #0
   14bf4:	beq	14bd0 <__assert_fail@plt+0x2484>
   14bf8:	mov	r1, r9
   14bfc:	mov	r0, r4
   14c00:	bl	120c8 <strcmp@plt>
   14c04:	cmp	r0, #0
   14c08:	beq	14bd0 <__assert_fail@plt+0x2484>
   14c0c:	ldrb	r3, [r5, #18]
   14c10:	tst	r3, #251	; 0xfb
   14c14:	bne	14bd0 <__assert_fail@plt+0x2484>
   14c18:	mov	r0, r8
   14c1c:	bl	12428 <strlen@plt>
   14c20:	mov	r1, r4
   14c24:	mov	r2, r0
   14c28:	mov	r0, r8
   14c2c:	bl	126e0 <strncmp@plt>
   14c30:	subs	r5, r0, #0
   14c34:	bne	14bd0 <__assert_fail@plt+0x2484>
   14c38:	ldr	r2, [pc, #252]	; 14d3c <__assert_fail@plt+0x25f0>
   14c3c:	mov	r3, #4096	; 0x1000
   14c40:	mov	r1, r3
   14c44:	str	r2, [sp]
   14c48:	str	r4, [sp, #4]
   14c4c:	mov	r2, #1
   14c50:	add	r0, sp, #140	; 0x8c
   14c54:	bl	12728 <__snprintf_chk@plt>
   14c58:	mov	r0, r6
   14c5c:	bl	12668 <dirfd@plt>
   14c60:	mov	r2, r5
   14c64:	add	r1, sp, #140	; 0x8c
   14c68:	bl	1244c <openat64@plt>
   14c6c:	cmp	r0, #0
   14c70:	beq	14bd0 <__assert_fail@plt+0x2484>
   14c74:	ldr	r1, [pc, #196]	; 14d40 <__assert_fail@plt+0x25f4>
   14c78:	str	r5, [sp, #28]
   14c7c:	bl	12068 <fdopen@plt>
   14c80:	subs	r4, r0, #0
   14c84:	beq	14bd0 <__assert_fail@plt+0x2484>
   14c88:	add	r2, sp, #28
   14c8c:	ldr	r1, [pc, #176]	; 14d44 <__assert_fail@plt+0x25f8>
   14c90:	bl	12500 <fscanf@plt>
   14c94:	cmp	r0, #1
   14c98:	bne	14ca8 <__assert_fail@plt+0x255c>
   14c9c:	ldr	r3, [sp, #28]
   14ca0:	cmp	fp, r3
   14ca4:	movlt	fp, r3
   14ca8:	mov	r0, r4
   14cac:	bl	12590 <fclose@plt>
   14cb0:	b	14bd0 <__assert_fail@plt+0x2484>
   14cb4:	ldr	r0, [sp, #20]
   14cb8:	bl	12134 <free@plt>
   14cbc:	mov	r0, r6
   14cc0:	bl	1271c <closedir@plt>
   14cc4:	add	r3, sp, #4224	; 0x1080
   14cc8:	add	r3, r3, #12
   14ccc:	ldr	r2, [r3]
   14cd0:	ldr	r3, [sl]
   14cd4:	mov	r0, fp
   14cd8:	cmp	r2, r3
   14cdc:	bne	14d1c <__assert_fail@plt+0x25d0>
   14ce0:	add	sp, sp, #4224	; 0x1080
   14ce4:	add	sp, sp, #20
   14ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cec:	mov	r1, r0
   14cf0:	add	r2, sp, #32
   14cf4:	mov	r0, #3
   14cf8:	bl	126c8 <__xstat64@plt>
   14cfc:	cmp	r0, #0
   14d00:	beq	14d0c <__assert_fail@plt+0x25c0>
   14d04:	mov	fp, #256	; 0x100
   14d08:	b	14cc4 <__assert_fail@plt+0x2578>
   14d0c:	ldrd	r4, [sp, #64]	; 0x40
   14d10:	orrs	r3, r4, r5
   14d14:	bne	14b44 <__assert_fail@plt+0x23f8>
   14d18:	b	14d04 <__assert_fail@plt+0x25b8>
   14d1c:	bl	12200 <__stack_chk_fail@plt>
   14d20:	ldr	r1, [pc, #32]	; 14d48 <__assert_fail@plt+0x25fc>
   14d24:	mov	r0, #1
   14d28:	bl	1223c <err@plt>
   14d2c:	andeq	r4, r3, r0, lsl #25
   14d30:			; <UNDEFINED> instruction: 0x00022eb0
   14d34:	andeq	r2, r2, r8, asr #29
   14d38:	andeq	r2, r2, ip, asr #29
   14d3c:	ldrdeq	r2, [r2], -r0
   14d40:	andeq	r3, r2, ip, ror #13
   14d44:	andeq	r3, r2, r0, asr #29
   14d48:	muleq	r2, r8, lr
   14d4c:	ldr	r3, [pc, #292]	; 14e78 <__assert_fail@plt+0x272c>
   14d50:	push	{r4, r5, r6, lr}
   14d54:	ldr	r4, [r3]
   14d58:	mov	r0, r4
   14d5c:	bl	122fc <__fpending@plt>
   14d60:	mov	r6, r0
   14d64:	mov	r0, r4
   14d68:	bl	12170 <ferror@plt>
   14d6c:	mov	r5, r0
   14d70:	mov	r0, r4
   14d74:	bl	12590 <fclose@plt>
   14d78:	cmp	r5, #0
   14d7c:	mov	r4, r0
   14d80:	bne	14e28 <__assert_fail@plt+0x26dc>
   14d84:	cmp	r0, #0
   14d88:	beq	14da4 <__assert_fail@plt+0x2658>
   14d8c:	bl	1247c <__errno_location@plt>
   14d90:	cmp	r6, #0
   14d94:	ldr	r3, [r0]
   14d98:	bne	14e00 <__assert_fail@plt+0x26b4>
   14d9c:	cmp	r3, #9
   14da0:	bne	14e00 <__assert_fail@plt+0x26b4>
   14da4:	ldr	r3, [pc, #208]	; 14e7c <__assert_fail@plt+0x2730>
   14da8:	ldr	r4, [r3]
   14dac:	mov	r0, r4
   14db0:	bl	122fc <__fpending@plt>
   14db4:	mov	r6, r0
   14db8:	mov	r0, r4
   14dbc:	bl	12170 <ferror@plt>
   14dc0:	mov	r5, r0
   14dc4:	mov	r0, r4
   14dc8:	bl	12590 <fclose@plt>
   14dcc:	cmp	r5, #0
   14dd0:	mov	r4, r0
   14dd4:	bne	14e5c <__assert_fail@plt+0x2710>
   14dd8:	cmp	r0, #0
   14ddc:	popeq	{r4, r5, r6, pc}
   14de0:	cmp	r6, #0
   14de4:	bne	14df8 <__assert_fail@plt+0x26ac>
   14de8:	bl	1247c <__errno_location@plt>
   14dec:	ldr	r3, [r0]
   14df0:	cmp	r3, #9
   14df4:	popeq	{r4, r5, r6, pc}
   14df8:	mov	r0, #1
   14dfc:	bl	12194 <_exit@plt>
   14e00:	cmp	r3, #32
   14e04:	beq	14da4 <__assert_fail@plt+0x2658>
   14e08:	cmp	r3, #0
   14e0c:	beq	14e44 <__assert_fail@plt+0x26f8>
   14e10:	mov	r2, #5
   14e14:	ldr	r1, [pc, #100]	; 14e80 <__assert_fail@plt+0x2734>
   14e18:	mov	r0, #0
   14e1c:	bl	121dc <dcgettext@plt>
   14e20:	bl	12608 <warn@plt>
   14e24:	b	14df8 <__assert_fail@plt+0x26ac>
   14e28:	bl	1247c <__errno_location@plt>
   14e2c:	cmp	r4, #0
   14e30:	ldr	r3, [r0]
   14e34:	bne	14e00 <__assert_fail@plt+0x26b4>
   14e38:	cmp	r3, #32
   14e3c:	strne	r4, [r0]
   14e40:	beq	14da4 <__assert_fail@plt+0x2658>
   14e44:	mov	r2, #5
   14e48:	ldr	r1, [pc, #48]	; 14e80 <__assert_fail@plt+0x2734>
   14e4c:	mov	r0, #0
   14e50:	bl	121dc <dcgettext@plt>
   14e54:	bl	12464 <warnx@plt>
   14e58:	b	14df8 <__assert_fail@plt+0x26ac>
   14e5c:	cmp	r0, #0
   14e60:	bne	14df8 <__assert_fail@plt+0x26ac>
   14e64:	bl	1247c <__errno_location@plt>
   14e68:	ldr	r3, [r0]
   14e6c:	cmp	r3, #32
   14e70:	strne	r4, [r0]
   14e74:	b	14df8 <__assert_fail@plt+0x26ac>
   14e78:	andeq	r5, r3, r4, lsr #32
   14e7c:	andeq	r5, r3, r0, lsr #32
   14e80:	andeq	r2, r2, r0, ror #29
   14e84:	andeq	r0, r0, r0
   14e88:	cmp	r0, #0
   14e8c:	mov	r3, #0
   14e90:	str	r3, [r1]
   14e94:	bxeq	lr
   14e98:	ldrsb	r2, [r0]
   14e9c:	cmp	r2, #47	; 0x2f
   14ea0:	bne	14edc <__assert_fail@plt+0x2790>
   14ea4:	ldrsb	r3, [r0, #1]
   14ea8:	cmp	r3, #47	; 0x2f
   14eac:	bne	14ee4 <__assert_fail@plt+0x2798>
   14eb0:	add	r3, r0, #1
   14eb4:	b	14ec4 <__assert_fail@plt+0x2778>
   14eb8:	ldrsb	r2, [r3]
   14ebc:	cmp	r2, #47	; 0x2f
   14ec0:	bne	14ee4 <__assert_fail@plt+0x2798>
   14ec4:	cmp	r3, #0
   14ec8:	mov	r0, r3
   14ecc:	bxeq	lr
   14ed0:	ldrsb	r2, [r3], #1
   14ed4:	cmp	r2, #47	; 0x2f
   14ed8:	beq	14eb8 <__assert_fail@plt+0x276c>
   14edc:	cmp	r2, #0
   14ee0:	beq	14f20 <__assert_fail@plt+0x27d4>
   14ee4:	mov	r3, #1
   14ee8:	str	r3, [r1]
   14eec:	ldrsb	r3, [r0, #1]
   14ef0:	add	r2, r0, #1
   14ef4:	cmp	r3, #47	; 0x2f
   14ef8:	cmpne	r3, #0
   14efc:	bxeq	lr
   14f00:	rsb	r3, r0, #1
   14f04:	add	ip, r2, r3
   14f08:	str	ip, [r1]
   14f0c:	ldrsb	ip, [r2, #1]!
   14f10:	cmp	ip, #0
   14f14:	cmpne	ip, #47	; 0x2f
   14f18:	bne	14f04 <__assert_fail@plt+0x27b8>
   14f1c:	bx	lr
   14f20:	mov	r0, r2
   14f24:	bx	lr
   14f28:	push	{r4, r5, r6, r7, r8, lr}
   14f2c:	mov	r7, r1
   14f30:	ldrsb	r1, [r0]
   14f34:	cmp	r1, #0
   14f38:	movne	r5, r0
   14f3c:	movne	r4, #0
   14f40:	beq	14fac <__assert_fail@plt+0x2860>
   14f44:	cmp	r1, #92	; 0x5c
   14f48:	addne	r6, r5, r4
   14f4c:	beq	14f7c <__assert_fail@plt+0x2830>
   14f50:	mov	r0, r7
   14f54:	bl	12434 <strchr@plt>
   14f58:	cmp	r0, #0
   14f5c:	bne	14fa4 <__assert_fail@plt+0x2858>
   14f60:	ldrsb	r1, [r6, #1]!
   14f64:	add	r4, r4, #1
   14f68:	mov	r0, r4
   14f6c:	cmp	r1, #0
   14f70:	popeq	{r4, r5, r6, r7, r8, pc}
   14f74:	cmp	r1, #92	; 0x5c
   14f78:	bne	14f50 <__assert_fail@plt+0x2804>
   14f7c:	add	r3, r5, r4
   14f80:	ldrsb	r3, [r3, #1]
   14f84:	cmp	r3, #0
   14f88:	beq	14fa4 <__assert_fail@plt+0x2858>
   14f8c:	add	r4, r4, #2
   14f90:	mov	r0, r4
   14f94:	ldrsb	r1, [r5, r4]
   14f98:	cmp	r1, #0
   14f9c:	bne	14f44 <__assert_fail@plt+0x27f8>
   14fa0:	pop	{r4, r5, r6, r7, r8, pc}
   14fa4:	mov	r0, r4
   14fa8:	pop	{r4, r5, r6, r7, r8, pc}
   14fac:	mov	r0, r1
   14fb0:	pop	{r4, r5, r6, r7, r8, pc}
   14fb4:	ldr	ip, [pc, #244]	; 150b0 <__assert_fail@plt+0x2964>
   14fb8:	push	{r4, r5, r6, r7, r8, r9, lr}
   14fbc:	add	ip, pc, ip
   14fc0:	ldr	lr, [pc, #236]	; 150b4 <__assert_fail@plt+0x2968>
   14fc4:	sub	sp, sp, #12
   14fc8:	mov	r5, #0
   14fcc:	ldr	r7, [ip, lr]
   14fd0:	mov	r4, r0
   14fd4:	mov	r8, r1
   14fd8:	ldr	r3, [r7]
   14fdc:	mov	r0, ip
   14fe0:	mov	r9, r2
   14fe4:	str	r5, [sp]
   14fe8:	str	r3, [sp, #4]
   14fec:	bl	1247c <__errno_location@plt>
   14ff0:	cmp	r4, r5
   14ff4:	str	r5, [r0]
   14ff8:	beq	15008 <__assert_fail@plt+0x28bc>
   14ffc:	ldrsb	r3, [r4]
   15000:	cmp	r3, r5
   15004:	bne	15028 <__assert_fail@plt+0x28dc>
   15008:	ldr	r1, [pc, #168]	; 150b8 <__assert_fail@plt+0x296c>
   1500c:	mov	r3, r4
   15010:	add	r1, pc, r1
   15014:	mov	r2, r8
   15018:	ldr	r0, [r1]
   1501c:	ldr	r1, [pc, #152]	; 150bc <__assert_fail@plt+0x2970>
   15020:	add	r1, pc, r1
   15024:	bl	125f0 <errx@plt>
   15028:	mov	r6, r0
   1502c:	mov	r2, r9
   15030:	mov	r3, r5
   15034:	mov	r1, sp
   15038:	mov	r0, r4
   1503c:	bl	121b8 <__strtoull_internal@plt>
   15040:	ldr	r2, [r6]
   15044:	cmp	r2, r5
   15048:	bne	15084 <__assert_fail@plt+0x2938>
   1504c:	ldr	r3, [sp]
   15050:	cmp	r3, r4
   15054:	beq	15008 <__assert_fail@plt+0x28bc>
   15058:	cmp	r3, r5
   1505c:	beq	1506c <__assert_fail@plt+0x2920>
   15060:	ldrsb	r3, [r3]
   15064:	cmp	r3, r5
   15068:	bne	15008 <__assert_fail@plt+0x28bc>
   1506c:	ldr	r2, [sp, #4]
   15070:	ldr	r3, [r7]
   15074:	cmp	r2, r3
   15078:	bne	150ac <__assert_fail@plt+0x2960>
   1507c:	add	sp, sp, #12
   15080:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15084:	ldr	r3, [pc, #52]	; 150c0 <__assert_fail@plt+0x2974>
   15088:	cmp	r2, #34	; 0x22
   1508c:	add	r3, pc, r3
   15090:	ldr	r0, [r3]
   15094:	bne	15008 <__assert_fail@plt+0x28bc>
   15098:	ldr	r1, [pc, #36]	; 150c4 <__assert_fail@plt+0x2978>
   1509c:	mov	r3, r4
   150a0:	mov	r2, r8
   150a4:	add	r1, pc, r1
   150a8:	bl	1223c <err@plt>
   150ac:	bl	12200 <__stack_chk_fail@plt>
   150b0:	ldrdeq	pc, [r1], -r0
   150b4:	andeq	r0, r0, ip, asr r2
   150b8:	strdeq	pc, [r1], -r0
   150bc:	andeq	lr, r0, r4, lsl fp
   150c0:	andeq	pc, r1, r4, ror pc	; <UNPREDICTABLE>
   150c4:	muleq	r0, r0, sl
   150c8:	push	{r4, lr}
   150cc:	mov	r5, r0
   150d0:	mov	r4, r1
   150d4:	bl	1247c <__errno_location@plt>
   150d8:	ldr	ip, [pc, #32]	; 15100 <__assert_fail@plt+0x29b4>
   150dc:	ldr	r1, [pc, #32]	; 15104 <__assert_fail@plt+0x29b8>
   150e0:	add	ip, pc, ip
   150e4:	mov	lr, #34	; 0x22
   150e8:	mov	r3, r5
   150ec:	mov	r2, r4
   150f0:	add	r1, pc, r1
   150f4:	str	lr, [r0]
   150f8:	ldr	r0, [ip]
   150fc:	bl	1223c <err@plt>
   15100:	andeq	pc, r1, r0, lsr #30
   15104:	andeq	lr, r0, r4, asr #20
   15108:	push	{r4, r5, r6, lr}
   1510c:	mov	r4, r0
   15110:	mov	r5, r1
   15114:	bl	14fb4 <__assert_fail@plt+0x2868>
   15118:	mov	r3, #0
   1511c:	mvn	r2, #0
   15120:	cmp	r1, r3
   15124:	cmpeq	r0, r2
   15128:	popls	{r4, r5, r6, pc}
   1512c:	mov	r1, r5
   15130:	mov	r0, r4
   15134:	bl	150c8 <__assert_fail@plt+0x297c>
   15138:	ldr	r3, [pc, #8]	; 15148 <__assert_fail@plt+0x29fc>
   1513c:	add	r3, pc, r3
   15140:	str	r0, [r3]
   15144:	bx	lr
   15148:	andeq	pc, r1, r4, asr #29
   1514c:	ldr	r3, [pc, #1648]	; 157c4 <__assert_fail@plt+0x3078>
   15150:	ldr	ip, [pc, #1648]	; 157c8 <__assert_fail@plt+0x307c>
   15154:	add	r3, pc, r3
   15158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1515c:	mov	r5, r1
   15160:	ldr	r1, [r3, ip]
   15164:	sub	sp, sp, #52	; 0x34
   15168:	mov	ip, r1
   1516c:	mov	r8, r0
   15170:	str	r1, [sp, #24]
   15174:	mov	r0, #0
   15178:	mov	r1, #0
   1517c:	ldr	r3, [ip]
   15180:	strd	r0, [r5]
   15184:	mov	r9, r2
   15188:	str	r3, [sp, #44]	; 0x2c
   1518c:	bl	1247c <__errno_location@plt>
   15190:	cmp	r8, #0
   15194:	mov	r4, r0
   15198:	beq	15378 <__assert_fail@plt+0x2c2c>
   1519c:	ldrsb	fp, [r8]
   151a0:	cmp	fp, #0
   151a4:	beq	15378 <__assert_fail@plt+0x2c2c>
   151a8:	bl	123d4 <__ctype_b_loc@plt>
   151ac:	mov	r2, r8
   151b0:	ldr	r1, [r0]
   151b4:	b	151bc <__assert_fail@plt+0x2a70>
   151b8:	ldrsb	fp, [r2, #1]!
   151bc:	uxtb	r3, fp
   151c0:	lsl	r3, r3, #1
   151c4:	ldrh	ip, [r1, r3]
   151c8:	ands	ip, ip, #8192	; 0x2000
   151cc:	bne	151b8 <__assert_fail@plt+0x2a6c>
   151d0:	cmp	fp, #45	; 0x2d
   151d4:	beq	15378 <__assert_fail@plt+0x2c2c>
   151d8:	add	fp, sp, #40	; 0x28
   151dc:	mov	r3, ip
   151e0:	mov	r2, ip
   151e4:	str	ip, [r4]
   151e8:	mov	r1, fp
   151ec:	mov	r0, r8
   151f0:	str	ip, [sp, #40]	; 0x28
   151f4:	bl	121b8 <__strtoull_internal@plt>
   151f8:	ldr	sl, [sp, #40]	; 0x28
   151fc:	cmp	sl, r8
   15200:	mov	r2, r0
   15204:	mov	r3, r1
   15208:	ldr	r0, [r4]
   1520c:	strd	r2, [sp, #16]
   15210:	beq	154f8 <__assert_fail@plt+0x2dac>
   15214:	cmp	r0, #0
   15218:	bne	153a0 <__assert_fail@plt+0x2c54>
   1521c:	cmp	sl, #0
   15220:	beq	1552c <__assert_fail@plt+0x2de0>
   15224:	ldrsb	r0, [sl]
   15228:	cmp	r0, #0
   1522c:	beq	15520 <__assert_fail@plt+0x2dd4>
   15230:	mov	r8, #0
   15234:	mov	r2, #0
   15238:	mov	r3, #0
   1523c:	str	r9, [sp, #32]
   15240:	mov	r6, fp
   15244:	mov	r9, sl
   15248:	mov	r7, r8
   1524c:	mov	sl, r2
   15250:	mov	fp, r3
   15254:	str	r5, [sp, #28]
   15258:	ldrsb	r2, [r9, #1]
   1525c:	cmp	r2, #105	; 0x69
   15260:	beq	153e4 <__assert_fail@plt+0x2c98>
   15264:	bic	r1, r2, #32
   15268:	cmp	r1, #66	; 0x42
   1526c:	bne	15504 <__assert_fail@plt+0x2db8>
   15270:	ldrsb	r2, [r9, #2]
   15274:	cmp	r2, #0
   15278:	beq	156e8 <__assert_fail@plt+0x2f9c>
   1527c:	bl	12638 <localeconv@plt>
   15280:	cmp	r0, #0
   15284:	beq	15378 <__assert_fail@plt+0x2c2c>
   15288:	ldr	r2, [r0]
   1528c:	cmp	r2, #0
   15290:	beq	15378 <__assert_fail@plt+0x2c2c>
   15294:	mov	r0, r2
   15298:	str	r2, [sp]
   1529c:	bl	12428 <strlen@plt>
   152a0:	orrs	r3, sl, fp
   152a4:	mov	r5, r0
   152a8:	bne	15378 <__assert_fail@plt+0x2c2c>
   152ac:	ldrsb	r1, [r9]
   152b0:	cmp	r1, #0
   152b4:	beq	15378 <__assert_fail@plt+0x2c2c>
   152b8:	ldr	r2, [sp]
   152bc:	mov	r1, r9
   152c0:	mov	r0, r2
   152c4:	mov	r2, r5
   152c8:	bl	126e0 <strncmp@plt>
   152cc:	cmp	r0, #0
   152d0:	bne	15378 <__assert_fail@plt+0x2c2c>
   152d4:	ldrsb	r2, [r9, r5]
   152d8:	add	r5, r9, r5
   152dc:	cmp	r2, #48	; 0x30
   152e0:	bne	15300 <__assert_fail@plt+0x2bb4>
   152e4:	add	r8, r8, #1
   152e8:	sub	r1, r8, r5
   152ec:	mov	r3, r5
   152f0:	add	r8, r3, r1
   152f4:	ldrsb	r2, [r3, #1]!
   152f8:	cmp	r2, #48	; 0x30
   152fc:	beq	152f0 <__assert_fail@plt+0x2ba4>
   15300:	mov	r3, #0
   15304:	str	r7, [r4]
   15308:	mov	r2, r3
   1530c:	mov	r1, r6
   15310:	mov	r0, r5
   15314:	str	r7, [sp, #40]	; 0x28
   15318:	bl	121b8 <__strtoull_internal@plt>
   1531c:	ldr	r9, [sp, #40]	; 0x28
   15320:	cmp	r9, r5
   15324:	mov	sl, r0
   15328:	mov	fp, r1
   1532c:	beq	154f4 <__assert_fail@plt+0x2da8>
   15330:	ldr	ip, [r4]
   15334:	cmp	ip, #0
   15338:	beq	153d0 <__assert_fail@plt+0x2c84>
   1533c:	subs	r3, r0, #1
   15340:	str	r3, [sp, #8]
   15344:	sbc	r3, r1, #0
   15348:	str	r3, [sp, #12]
   1534c:	ldrd	r2, [sp, #8]
   15350:	mvn	r1, #0
   15354:	mvn	r0, #2
   15358:	cmp	r3, r1
   1535c:	cmpeq	r2, r0
   15360:	bhi	15724 <__assert_fail@plt+0x2fd8>
   15364:	cmp	r9, #0
   15368:	beq	15378 <__assert_fail@plt+0x2c2c>
   1536c:	ldrsb	r2, [r9]
   15370:	cmp	r2, #0
   15374:	bne	15258 <__assert_fail@plt+0x2b0c>
   15378:	mov	r3, #22
   1537c:	mvn	r0, #21
   15380:	str	r3, [r4]
   15384:	ldr	r3, [sp, #24]
   15388:	ldr	r2, [sp, #44]	; 0x2c
   1538c:	ldr	r3, [r3]
   15390:	cmp	r2, r3
   15394:	bne	157c0 <__assert_fail@plt+0x3074>
   15398:	add	sp, sp, #52	; 0x34
   1539c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153a0:	subs	r6, r2, #1
   153a4:	sbc	r7, r3, #0
   153a8:	mvn	r3, #0
   153ac:	mvn	r2, #2
   153b0:	cmp	r7, r3
   153b4:	cmpeq	r6, r2
   153b8:	bls	1521c <__assert_fail@plt+0x2ad0>
   153bc:	rsb	r0, r0, #0
   153c0:	cmp	r0, #0
   153c4:	bge	15384 <__assert_fail@plt+0x2c38>
   153c8:	rsb	r3, r0, #0
   153cc:	b	15380 <__assert_fail@plt+0x2c34>
   153d0:	orrs	r3, sl, fp
   153d4:	bne	15364 <__assert_fail@plt+0x2c18>
   153d8:	ldrsb	r2, [r9, #1]
   153dc:	cmp	r2, #105	; 0x69
   153e0:	bne	15264 <__assert_fail@plt+0x2b18>
   153e4:	ldrsb	r2, [r9, #2]
   153e8:	bic	r2, r2, #32
   153ec:	cmp	r2, #66	; 0x42
   153f0:	bne	1527c <__assert_fail@plt+0x2b30>
   153f4:	ldrsb	r2, [r9, #3]
   153f8:	cmp	r2, #0
   153fc:	bne	1527c <__assert_fail@plt+0x2b30>
   15400:	strd	sl, [sp]
   15404:	mov	sl, r9
   15408:	ldr	r9, [sp, #32]
   1540c:	mov	r3, #1024	; 0x400
   15410:	ldr	r5, [sp, #28]
   15414:	str	r3, [sp, #28]
   15418:	ldrsb	r7, [sl]
   1541c:	ldr	r6, [pc, #936]	; 157cc <__assert_fail@plt+0x3080>
   15420:	add	r6, pc, r6
   15424:	mov	r1, r7
   15428:	mov	r0, r6
   1542c:	bl	12434 <strchr@plt>
   15430:	cmp	r0, #0
   15434:	beq	15704 <__assert_fail@plt+0x2fb8>
   15438:	sub	ip, r0, r6
   1543c:	add	fp, ip, #1
   15440:	cmp	fp, #0
   15444:	beq	15510 <__assert_fail@plt+0x2dc4>
   15448:	ldr	r3, [sp, #20]
   1544c:	ldr	r6, [sp, #28]
   15450:	cmp	r3, #0
   15454:	mov	r0, #0
   15458:	asr	r7, r6, #31
   1545c:	mov	r1, #0
   15460:	bne	15760 <__assert_fail@plt+0x3014>
   15464:	orrs	r3, r0, r1
   15468:	bne	15554 <__assert_fail@plt+0x2e08>
   1546c:	str	fp, [sp, #32]
   15470:	sub	ip, ip, #1
   15474:	str	r8, [sp, #36]	; 0x24
   15478:	mov	fp, r4
   1547c:	ldrd	r0, [sp, #16]
   15480:	mov	lr, r5
   15484:	mov	sl, r9
   15488:	b	15498 <__assert_fail@plt+0x2d4c>
   1548c:	orrs	r3, r4, r5
   15490:	sub	ip, ip, #1
   15494:	bne	1553c <__assert_fail@plt+0x2df0>
   15498:	mul	r2, r0, r7
   1549c:	cmn	ip, #1
   154a0:	mla	r2, r6, r1, r2
   154a4:	umull	r0, r1, r0, r6
   154a8:	add	r2, r2, r1
   154ac:	mov	r1, r2
   154b0:	beq	156c8 <__assert_fail@plt+0x2f7c>
   154b4:	cmp	r2, #0
   154b8:	mov	r4, #0
   154bc:	mov	r5, #0
   154c0:	beq	1548c <__assert_fail@plt+0x2d40>
   154c4:	umull	r2, r3, r6, r2
   154c8:	umull	r8, r9, r0, r6
   154cc:	strd	r2, [sp, #8]
   154d0:	mov	r8, r9
   154d4:	ldr	r3, [sp, #12]
   154d8:	adds	r8, r2, r8
   154dc:	mov	r2, #0
   154e0:	adc	r3, r3, r2
   154e4:	cmp	r3, r2
   154e8:	movne	r4, #1
   154ec:	movne	r5, #0
   154f0:	b	1548c <__assert_fail@plt+0x2d40>
   154f4:	ldr	r0, [r4]
   154f8:	cmp	r0, #0
   154fc:	beq	15378 <__assert_fail@plt+0x2c2c>
   15500:	b	153bc <__assert_fail@plt+0x2c70>
   15504:	cmp	r2, #0
   15508:	bne	1527c <__assert_fail@plt+0x2b30>
   1550c:	b	15400 <__assert_fail@plt+0x2cb4>
   15510:	cmp	r9, #0
   15514:	movne	r0, fp
   15518:	bne	15560 <__assert_fail@plt+0x2e14>
   1551c:	mov	r0, r9
   15520:	ldrd	r2, [sp, #16]
   15524:	strd	r2, [r5]
   15528:	b	15384 <__assert_fail@plt+0x2c38>
   1552c:	ldrd	r2, [sp, #16]
   15530:	mov	r0, sl
   15534:	strd	r2, [r5]
   15538:	b	15384 <__assert_fail@plt+0x2c38>
   1553c:	mov	r4, fp
   15540:	ldr	r8, [sp, #36]	; 0x24
   15544:	ldr	fp, [sp, #32]
   15548:	mov	r5, lr
   1554c:	mov	r9, sl
   15550:	strd	r0, [sp, #16]
   15554:	mvn	r0, #33	; 0x21
   15558:	cmp	r9, #0
   1555c:	beq	15564 <__assert_fail@plt+0x2e18>
   15560:	str	fp, [r9]
   15564:	ldrd	r2, [sp]
   15568:	mov	r1, r2
   1556c:	orrs	r3, r1, r3
   15570:	movne	r3, #1
   15574:	moveq	r3, #0
   15578:	cmp	fp, #0
   1557c:	moveq	r3, #0
   15580:	cmp	r3, #0
   15584:	beq	156bc <__assert_fail@plt+0x2f70>
   15588:	ldr	r3, [pc, #576]	; 157d0 <__assert_fail@plt+0x3084>
   1558c:	ldr	r1, [pc, #576]	; 157d4 <__assert_fail@plt+0x3088>
   15590:	umull	ip, r3, r3, r8
   15594:	smull	ip, r1, r1, r8
   15598:	lsr	r3, r3, #1
   1559c:	rsb	r1, r1, r8, asr #31
   155a0:	add	r3, r3, r3, lsl #1
   155a4:	add	r1, r1, fp
   155a8:	subs	r3, r8, r3
   155ac:	sub	r6, r1, #1
   155b0:	bne	1572c <__assert_fail@plt+0x2fe0>
   155b4:	ldrd	r8, [sp]
   155b8:	adds	r3, r8, r8
   155bc:	adc	r2, r9, r9
   155c0:	adds	r3, r3, r8
   155c4:	adc	r2, r2, r9
   155c8:	lsl	ip, r3, #5
   155cc:	lsl	lr, r2, #5
   155d0:	orr	lr, lr, r3, lsr #27
   155d4:	adds	r3, r3, ip
   155d8:	adc	r2, r2, lr
   155dc:	adds	r3, r8, r3
   155e0:	str	r3, [sp]
   155e4:	ldr	r3, [sp, #4]
   155e8:	adc	r3, r3, r2
   155ec:	str	r3, [sp, #4]
   155f0:	cmp	r6, #0
   155f4:	blt	15378 <__assert_fail@plt+0x2c2c>
   155f8:	beq	156a0 <__assert_fail@plt+0x2f54>
   155fc:	ldr	r3, [sp, #4]
   15600:	ldr	r8, [sp, #28]
   15604:	cmp	r3, #0
   15608:	mov	r6, #0
   1560c:	asr	r9, r8, #31
   15610:	mov	r7, #0
   15614:	bne	15794 <__assert_fail@plt+0x3048>
   15618:	orrs	r3, r6, r7
   1561c:	bne	156a0 <__assert_fail@plt+0x2f54>
   15620:	sub	r1, r1, #3
   15624:	ldrd	r2, [sp]
   15628:	mov	lr, r4
   1562c:	str	r5, [sp, #8]
   15630:	b	15640 <__assert_fail@plt+0x2ef4>
   15634:	orrs	ip, r6, r7
   15638:	sub	r1, r1, #1
   1563c:	bne	15694 <__assert_fail@plt+0x2f48>
   15640:	mul	ip, r2, r9
   15644:	cmn	r1, #1
   15648:	mla	ip, r8, r3, ip
   1564c:	umull	r2, r3, r2, r8
   15650:	add	ip, ip, r3
   15654:	mov	r3, ip
   15658:	beq	15694 <__assert_fail@plt+0x2f48>
   1565c:	cmp	ip, #0
   15660:	mov	r6, #0
   15664:	mov	r7, #0
   15668:	beq	15634 <__assert_fail@plt+0x2ee8>
   1566c:	umull	sl, fp, r2, r8
   15670:	umull	r4, r5, r8, ip
   15674:	mov	ip, fp
   15678:	adds	ip, r4, ip
   1567c:	mov	ip, #0
   15680:	adc	ip, r5, ip
   15684:	cmp	ip, #0
   15688:	movne	r6, #1
   1568c:	movne	r7, #0
   15690:	b	15634 <__assert_fail@plt+0x2ee8>
   15694:	ldr	r5, [sp, #8]
   15698:	mov	r4, lr
   1569c:	strd	r2, [sp]
   156a0:	ldrd	r2, [sp]
   156a4:	ldr	r1, [sp, #16]
   156a8:	adds	r1, r1, r2
   156ac:	str	r1, [sp, #16]
   156b0:	ldr	r1, [sp, #20]
   156b4:	adc	r3, r1, r3
   156b8:	str	r3, [sp, #20]
   156bc:	ldrd	r2, [sp, #16]
   156c0:	strd	r2, [r5]
   156c4:	b	153c0 <__assert_fail@plt+0x2c74>
   156c8:	mov	r4, fp
   156cc:	strd	r0, [sp, #16]
   156d0:	ldr	r8, [sp, #36]	; 0x24
   156d4:	ldr	fp, [sp, #32]
   156d8:	mov	r5, lr
   156dc:	mov	r9, sl
   156e0:	mov	r0, #0
   156e4:	b	15558 <__assert_fail@plt+0x2e0c>
   156e8:	mov	r3, #1000	; 0x3e8
   156ec:	strd	sl, [sp]
   156f0:	ldr	r5, [sp, #28]
   156f4:	mov	sl, r9
   156f8:	str	r3, [sp, #28]
   156fc:	ldr	r9, [sp, #32]
   15700:	b	15418 <__assert_fail@plt+0x2ccc>
   15704:	ldr	r6, [pc, #204]	; 157d8 <__assert_fail@plt+0x308c>
   15708:	mov	r1, r7
   1570c:	add	r6, pc, r6
   15710:	mov	r0, r6
   15714:	bl	12434 <strchr@plt>
   15718:	cmp	r0, #0
   1571c:	bne	15438 <__assert_fail@plt+0x2cec>
   15720:	b	15378 <__assert_fail@plt+0x2c2c>
   15724:	mov	r0, ip
   15728:	b	153bc <__assert_fail@plt+0x2c70>
   1572c:	cmp	r3, #1
   15730:	bne	155f0 <__assert_fail@plt+0x2ea4>
   15734:	ldrd	r8, [sp]
   15738:	lsl	r2, r9, #2
   1573c:	lsl	r3, r8, #2
   15740:	adds	r3, r3, r8
   15744:	orr	r2, r2, r8, lsr #30
   15748:	adc	r2, r2, r9
   1574c:	adds	r3, r3, r3
   15750:	str	r3, [sp]
   15754:	adc	r3, r2, r2
   15758:	str	r3, [sp, #4]
   1575c:	b	155f0 <__assert_fail@plt+0x2ea4>
   15760:	ldr	lr, [sp, #28]
   15764:	ldr	r3, [sp, #16]
   15768:	ldr	sl, [sp, #20]
   1576c:	umull	r2, r3, r3, lr
   15770:	str	r3, [sp, #8]
   15774:	mov	r3, #0
   15778:	str	r3, [sp, #12]
   1577c:	ldrd	r2, [sp, #8]
   15780:	umlal	r2, r3, sl, lr
   15784:	cmp	r3, #0
   15788:	movne	r0, #1
   1578c:	movne	r1, #0
   15790:	b	15464 <__assert_fail@plt+0x2d18>
   15794:	ldr	r3, [sp]
   15798:	ldr	ip, [sp, #28]
   1579c:	ldr	lr, [sp, #4]
   157a0:	umull	sl, fp, r3, ip
   157a4:	mov	r3, #0
   157a8:	mov	r2, fp
   157ac:	umlal	r2, r3, lr, ip
   157b0:	cmp	r3, #0
   157b4:	movne	r6, #1
   157b8:	movne	r7, #0
   157bc:	b	15618 <__assert_fail@plt+0x2ecc>
   157c0:	bl	12200 <__stack_chk_fail@plt>
   157c4:	andeq	pc, r1, r8, lsr ip	; <UNPREDICTABLE>
   157c8:	andeq	r0, r0, ip, asr r2
   157cc:	andeq	lr, r0, r0, lsr #14
   157d0:	bge	feac0284 <optarg@@GLIBC_2.4+0xfea8b25c>
   157d4:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   157d8:	andeq	lr, r0, r0, asr #8
   157dc:	mov	r2, #0
   157e0:	b	1514c <__assert_fail@plt+0x2a00>
   157e4:	push	{r4, r5, r6, lr}
   157e8:	subs	r5, r0, #0
   157ec:	mov	r6, r1
   157f0:	beq	1585c <__assert_fail@plt+0x3110>
   157f4:	ldrsb	r4, [r5]
   157f8:	cmp	r4, #0
   157fc:	beq	15870 <__assert_fail@plt+0x3124>
   15800:	bl	123d4 <__ctype_b_loc@plt>
   15804:	mov	r3, r5
   15808:	ldr	r0, [r0]
   1580c:	b	15824 <__assert_fail@plt+0x30d8>
   15810:	adds	r3, r3, #1
   15814:	beq	1585c <__assert_fail@plt+0x3110>
   15818:	ldrsb	r4, [r3]
   1581c:	cmp	r4, #0
   15820:	beq	15838 <__assert_fail@plt+0x30ec>
   15824:	uxtb	r4, r4
   15828:	lsl	r4, r4, #1
   1582c:	ldrh	r2, [r0, r4]
   15830:	tst	r2, #2048	; 0x800
   15834:	bne	15810 <__assert_fail@plt+0x30c4>
   15838:	cmp	r6, #0
   1583c:	strne	r3, [r6]
   15840:	cmp	r5, r3
   15844:	bcs	15868 <__assert_fail@plt+0x311c>
   15848:	ldrsb	r3, [r3]
   1584c:	cmp	r3, #0
   15850:	bne	15868 <__assert_fail@plt+0x311c>
   15854:	mov	r0, #1
   15858:	pop	{r4, r5, r6, pc}
   1585c:	cmp	r6, #0
   15860:	movne	r3, #0
   15864:	strne	r3, [r6]
   15868:	mov	r0, #0
   1586c:	pop	{r4, r5, r6, pc}
   15870:	cmp	r1, #0
   15874:	strne	r5, [r1]
   15878:	b	15868 <__assert_fail@plt+0x311c>
   1587c:	push	{r4, r5, r6, lr}
   15880:	subs	r5, r0, #0
   15884:	mov	r6, r1
   15888:	beq	158f4 <__assert_fail@plt+0x31a8>
   1588c:	ldrsb	r4, [r5]
   15890:	cmp	r4, #0
   15894:	beq	15908 <__assert_fail@plt+0x31bc>
   15898:	bl	123d4 <__ctype_b_loc@plt>
   1589c:	mov	r3, r5
   158a0:	ldr	r0, [r0]
   158a4:	b	158bc <__assert_fail@plt+0x3170>
   158a8:	adds	r3, r3, #1
   158ac:	beq	158f4 <__assert_fail@plt+0x31a8>
   158b0:	ldrsb	r4, [r3]
   158b4:	cmp	r4, #0
   158b8:	beq	158d0 <__assert_fail@plt+0x3184>
   158bc:	uxtb	r4, r4
   158c0:	lsl	r4, r4, #1
   158c4:	ldrh	r2, [r0, r4]
   158c8:	tst	r2, #4096	; 0x1000
   158cc:	bne	158a8 <__assert_fail@plt+0x315c>
   158d0:	cmp	r6, #0
   158d4:	strne	r3, [r6]
   158d8:	cmp	r5, r3
   158dc:	bcs	15900 <__assert_fail@plt+0x31b4>
   158e0:	ldrsb	r3, [r3]
   158e4:	cmp	r3, #0
   158e8:	bne	15900 <__assert_fail@plt+0x31b4>
   158ec:	mov	r0, #1
   158f0:	pop	{r4, r5, r6, pc}
   158f4:	cmp	r6, #0
   158f8:	movne	r3, #0
   158fc:	strne	r3, [r6]
   15900:	mov	r0, #0
   15904:	pop	{r4, r5, r6, pc}
   15908:	cmp	r1, #0
   1590c:	strne	r5, [r1]
   15910:	b	15900 <__assert_fail@plt+0x31b4>
   15914:	push	{r1, r2, r3}
   15918:	ldr	r3, [pc, #188]	; 159dc <__assert_fail@plt+0x3290>
   1591c:	ldr	r2, [pc, #188]	; 159e0 <__assert_fail@plt+0x3294>
   15920:	add	r3, pc, r3
   15924:	push	{r4, r5, r6, r7, r8, lr}
   15928:	sub	sp, sp, #12
   1592c:	ldr	r7, [r3, r2]
   15930:	ldr	r8, [sp, #36]	; 0x24
   15934:	mov	r6, r0
   15938:	ldr	r3, [r7]
   1593c:	add	r4, sp, #48	; 0x30
   15940:	str	r3, [sp, #4]
   15944:	b	15960 <__assert_fail@plt+0x3214>
   15948:	mov	r1, r5
   1594c:	mov	r0, r6
   15950:	bl	120c8 <strcmp@plt>
   15954:	add	r4, r4, #8
   15958:	cmp	r0, #0
   1595c:	beq	15998 <__assert_fail@plt+0x324c>
   15960:	ldr	r1, [r4, #-8]
   15964:	sub	r3, r4, #4
   15968:	cmp	r1, #0
   1596c:	str	r3, [sp]
   15970:	beq	159b8 <__assert_fail@plt+0x326c>
   15974:	ldr	r5, [r4, #-4]
   15978:	str	r4, [sp]
   1597c:	cmp	r5, #0
   15980:	beq	159b8 <__assert_fail@plt+0x326c>
   15984:	mov	r0, r6
   15988:	bl	120c8 <strcmp@plt>
   1598c:	cmp	r0, #0
   15990:	bne	15948 <__assert_fail@plt+0x31fc>
   15994:	mov	r0, #1
   15998:	ldr	r2, [sp, #4]
   1599c:	ldr	r3, [r7]
   159a0:	cmp	r2, r3
   159a4:	bne	159d8 <__assert_fail@plt+0x328c>
   159a8:	add	sp, sp, #12
   159ac:	pop	{r4, r5, r6, r7, r8, lr}
   159b0:	add	sp, sp, #12
   159b4:	bx	lr
   159b8:	ldr	r1, [pc, #36]	; 159e4 <__assert_fail@plt+0x3298>
   159bc:	mov	r3, r6
   159c0:	add	r1, pc, r1
   159c4:	mov	r2, r8
   159c8:	ldr	r0, [r1]
   159cc:	ldr	r1, [pc, #20]	; 159e8 <__assert_fail@plt+0x329c>
   159d0:	add	r1, pc, r1
   159d4:	bl	125f0 <errx@plt>
   159d8:	bl	12200 <__stack_chk_fail@plt>
   159dc:	andeq	pc, r1, ip, ror #8
   159e0:	andeq	r0, r0, ip, asr r2
   159e4:	andeq	pc, r1, r0, asr #12
   159e8:	andeq	lr, r0, r4, ror #2
   159ec:	cmp	r1, #0
   159f0:	beq	15a3c <__assert_fail@plt+0x32f0>
   159f4:	ldrsb	r3, [r0]
   159f8:	cmp	r3, #0
   159fc:	beq	15a3c <__assert_fail@plt+0x32f0>
   15a00:	sxtb	r2, r2
   15a04:	cmp	r3, r2
   15a08:	bxeq	lr
   15a0c:	add	r1, r0, r1
   15a10:	add	r3, r0, #1
   15a14:	b	15a30 <__assert_fail@plt+0x32e4>
   15a18:	ldrsb	ip, [r3]
   15a1c:	add	r3, r3, #1
   15a20:	cmp	ip, #0
   15a24:	beq	15a3c <__assert_fail@plt+0x32f0>
   15a28:	cmp	ip, r2
   15a2c:	bxeq	lr
   15a30:	cmp	r3, r1
   15a34:	mov	r0, r3
   15a38:	bne	15a18 <__assert_fail@plt+0x32cc>
   15a3c:	mov	r0, #0
   15a40:	bx	lr
   15a44:	push	{r4, r5, r6, lr}
   15a48:	mov	r2, #10
   15a4c:	mov	r4, r0
   15a50:	mov	r5, r1
   15a54:	bl	15108 <__assert_fail@plt+0x29bc>
   15a58:	cmp	r0, #65536	; 0x10000
   15a5c:	bcs	15a68 <__assert_fail@plt+0x331c>
   15a60:	uxth	r0, r0
   15a64:	pop	{r4, r5, r6, pc}
   15a68:	mov	r1, r5
   15a6c:	mov	r0, r4
   15a70:	bl	150c8 <__assert_fail@plt+0x297c>
   15a74:	push	{r4, r5, r6, lr}
   15a78:	mov	r2, #16
   15a7c:	mov	r4, r0
   15a80:	mov	r5, r1
   15a84:	bl	15108 <__assert_fail@plt+0x29bc>
   15a88:	cmp	r0, #65536	; 0x10000
   15a8c:	bcs	15a98 <__assert_fail@plt+0x334c>
   15a90:	uxth	r0, r0
   15a94:	pop	{r4, r5, r6, pc}
   15a98:	mov	r1, r5
   15a9c:	mov	r0, r4
   15aa0:	bl	150c8 <__assert_fail@plt+0x297c>
   15aa4:	mov	r2, #10
   15aa8:	b	15108 <__assert_fail@plt+0x29bc>
   15aac:	mov	r2, #16
   15ab0:	b	15108 <__assert_fail@plt+0x29bc>
   15ab4:	ldr	r2, [pc, #236]	; 15ba8 <__assert_fail@plt+0x345c>
   15ab8:	ldr	ip, [pc, #236]	; 15bac <__assert_fail@plt+0x3460>
   15abc:	add	r2, pc, r2
   15ac0:	push	{r4, r5, r6, r7, r8, lr}
   15ac4:	sub	sp, sp, #8
   15ac8:	ldr	r7, [r2, ip]
   15acc:	mov	r5, #0
   15ad0:	mov	r4, r0
   15ad4:	ldr	r3, [r7]
   15ad8:	mov	r8, r1
   15adc:	str	r5, [sp]
   15ae0:	str	r3, [sp, #4]
   15ae4:	bl	1247c <__errno_location@plt>
   15ae8:	cmp	r4, r5
   15aec:	str	r5, [r0]
   15af0:	beq	15b00 <__assert_fail@plt+0x33b4>
   15af4:	ldrsb	r3, [r4]
   15af8:	cmp	r3, r5
   15afc:	bne	15b20 <__assert_fail@plt+0x33d4>
   15b00:	ldr	r1, [pc, #168]	; 15bb0 <__assert_fail@plt+0x3464>
   15b04:	mov	r3, r4
   15b08:	add	r1, pc, r1
   15b0c:	mov	r2, r8
   15b10:	ldr	r0, [r1]
   15b14:	ldr	r1, [pc, #152]	; 15bb4 <__assert_fail@plt+0x3468>
   15b18:	add	r1, pc, r1
   15b1c:	bl	125f0 <errx@plt>
   15b20:	mov	r6, r0
   15b24:	mov	r2, #10
   15b28:	mov	r3, r5
   15b2c:	mov	r1, sp
   15b30:	mov	r0, r4
   15b34:	bl	12674 <__strtoll_internal@plt>
   15b38:	ldr	r2, [r6]
   15b3c:	cmp	r2, r5
   15b40:	bne	15b7c <__assert_fail@plt+0x3430>
   15b44:	ldr	r3, [sp]
   15b48:	cmp	r3, r4
   15b4c:	beq	15b00 <__assert_fail@plt+0x33b4>
   15b50:	cmp	r3, r5
   15b54:	beq	15b64 <__assert_fail@plt+0x3418>
   15b58:	ldrsb	r3, [r3]
   15b5c:	cmp	r3, r5
   15b60:	bne	15b00 <__assert_fail@plt+0x33b4>
   15b64:	ldr	r2, [sp, #4]
   15b68:	ldr	r3, [r7]
   15b6c:	cmp	r2, r3
   15b70:	bne	15ba4 <__assert_fail@plt+0x3458>
   15b74:	add	sp, sp, #8
   15b78:	pop	{r4, r5, r6, r7, r8, pc}
   15b7c:	ldr	r3, [pc, #52]	; 15bb8 <__assert_fail@plt+0x346c>
   15b80:	cmp	r2, #34	; 0x22
   15b84:	add	r3, pc, r3
   15b88:	ldr	r0, [r3]
   15b8c:	bne	15b00 <__assert_fail@plt+0x33b4>
   15b90:	ldr	r1, [pc, #36]	; 15bbc <__assert_fail@plt+0x3470>
   15b94:	mov	r3, r4
   15b98:	mov	r2, r8
   15b9c:	add	r1, pc, r1
   15ba0:	bl	1223c <err@plt>
   15ba4:	bl	12200 <__stack_chk_fail@plt>
   15ba8:	ldrdeq	pc, [r1], -r0
   15bac:	andeq	r0, r0, ip, asr r2
   15bb0:	strdeq	pc, [r1], -r8
   15bb4:	andeq	lr, r0, ip, lsl r0
   15bb8:	andeq	pc, r1, ip, ror r4	; <UNPREDICTABLE>
   15bbc:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   15bc0:	push	{r4, r5, r6, r7, r8, lr}
   15bc4:	mov	r7, r0
   15bc8:	mov	r6, r1
   15bcc:	bl	15ab4 <__assert_fail@plt+0x3368>
   15bd0:	mov	r3, #0
   15bd4:	mvn	r2, #0
   15bd8:	adds	r4, r0, #-2147483648	; 0x80000000
   15bdc:	adc	r5, r1, #0
   15be0:	cmp	r5, r3
   15be4:	cmpeq	r4, r2
   15be8:	popls	{r4, r5, r6, r7, r8, pc}
   15bec:	bl	1247c <__errno_location@plt>
   15bf0:	ldr	ip, [pc, #32]	; 15c18 <__assert_fail@plt+0x34cc>
   15bf4:	ldr	r1, [pc, #32]	; 15c1c <__assert_fail@plt+0x34d0>
   15bf8:	add	ip, pc, ip
   15bfc:	mov	lr, #34	; 0x22
   15c00:	mov	r3, r7
   15c04:	mov	r2, r6
   15c08:	add	r1, pc, r1
   15c0c:	str	lr, [r0]
   15c10:	ldr	r0, [ip]
   15c14:	bl	1223c <err@plt>
   15c18:	andeq	pc, r1, r8, lsl #8
   15c1c:	andeq	sp, r0, ip, lsr #30
   15c20:	push	{r4, r5, r6, lr}
   15c24:	mov	r5, r0
   15c28:	mov	r4, r1
   15c2c:	bl	15bc0 <__assert_fail@plt+0x3474>
   15c30:	add	r3, r0, #32768	; 0x8000
   15c34:	cmp	r3, #65536	; 0x10000
   15c38:	bcs	15c44 <__assert_fail@plt+0x34f8>
   15c3c:	sxth	r0, r0
   15c40:	pop	{r4, r5, r6, pc}
   15c44:	bl	1247c <__errno_location@plt>
   15c48:	ldr	ip, [pc, #32]	; 15c70 <__assert_fail@plt+0x3524>
   15c4c:	ldr	r1, [pc, #32]	; 15c74 <__assert_fail@plt+0x3528>
   15c50:	add	ip, pc, ip
   15c54:	mov	lr, #34	; 0x22
   15c58:	mov	r3, r5
   15c5c:	mov	r2, r4
   15c60:	add	r1, pc, r1
   15c64:	str	lr, [r0]
   15c68:	ldr	r0, [ip]
   15c6c:	bl	1223c <err@plt>
   15c70:			; <UNDEFINED> instruction: 0x0001f3b0
   15c74:	ldrdeq	sp, [r0], -r4
   15c78:	mov	r2, #10
   15c7c:	b	14fb4 <__assert_fail@plt+0x2868>
   15c80:	mov	r2, #16
   15c84:	b	14fb4 <__assert_fail@plt+0x2868>
   15c88:	ldr	r2, [pc, #228]	; 15d74 <__assert_fail@plt+0x3628>
   15c8c:	ldr	r3, [pc, #228]	; 15d78 <__assert_fail@plt+0x362c>
   15c90:	add	r2, pc, r2
   15c94:	push	{r4, r5, r6, r7, r8, lr}
   15c98:	sub	sp, sp, #8
   15c9c:	ldr	r7, [r2, r3]
   15ca0:	mov	r5, #0
   15ca4:	mov	r4, r0
   15ca8:	ldr	r3, [r7]
   15cac:	mov	r8, r1
   15cb0:	str	r5, [sp]
   15cb4:	str	r3, [sp, #4]
   15cb8:	bl	1247c <__errno_location@plt>
   15cbc:	cmp	r4, r5
   15cc0:	str	r5, [r0]
   15cc4:	beq	15cd4 <__assert_fail@plt+0x3588>
   15cc8:	ldrsb	r3, [r4]
   15ccc:	cmp	r3, r5
   15cd0:	bne	15cf4 <__assert_fail@plt+0x35a8>
   15cd4:	ldr	r1, [pc, #160]	; 15d7c <__assert_fail@plt+0x3630>
   15cd8:	mov	r3, r4
   15cdc:	add	r1, pc, r1
   15ce0:	mov	r2, r8
   15ce4:	ldr	r0, [r1]
   15ce8:	ldr	r1, [pc, #144]	; 15d80 <__assert_fail@plt+0x3634>
   15cec:	add	r1, pc, r1
   15cf0:	bl	125f0 <errx@plt>
   15cf4:	mov	r6, r0
   15cf8:	mov	r1, sp
   15cfc:	mov	r0, r4
   15d00:	bl	12548 <strtod@plt>
   15d04:	ldr	r2, [r6]
   15d08:	cmp	r2, r5
   15d0c:	bne	15d48 <__assert_fail@plt+0x35fc>
   15d10:	ldr	r3, [sp]
   15d14:	cmp	r3, r4
   15d18:	beq	15cd4 <__assert_fail@plt+0x3588>
   15d1c:	cmp	r3, r5
   15d20:	beq	15d30 <__assert_fail@plt+0x35e4>
   15d24:	ldrsb	r3, [r3]
   15d28:	cmp	r3, r5
   15d2c:	bne	15cd4 <__assert_fail@plt+0x3588>
   15d30:	ldr	r2, [sp, #4]
   15d34:	ldr	r3, [r7]
   15d38:	cmp	r2, r3
   15d3c:	bne	15d70 <__assert_fail@plt+0x3624>
   15d40:	add	sp, sp, #8
   15d44:	pop	{r4, r5, r6, r7, r8, pc}
   15d48:	ldr	r3, [pc, #52]	; 15d84 <__assert_fail@plt+0x3638>
   15d4c:	cmp	r2, #34	; 0x22
   15d50:	add	r3, pc, r3
   15d54:	ldr	r0, [r3]
   15d58:	bne	15cd4 <__assert_fail@plt+0x3588>
   15d5c:	ldr	r1, [pc, #36]	; 15d88 <__assert_fail@plt+0x363c>
   15d60:	mov	r3, r4
   15d64:	mov	r2, r8
   15d68:	add	r1, pc, r1
   15d6c:	bl	1223c <err@plt>
   15d70:	bl	12200 <__stack_chk_fail@plt>
   15d74:	strdeq	pc, [r1], -ip
   15d78:	andeq	r0, r0, ip, asr r2
   15d7c:	andeq	pc, r1, r4, lsr #6
   15d80:	andeq	sp, r0, r8, asr #28
   15d84:			; <UNDEFINED> instruction: 0x0001f2b0
   15d88:	andeq	sp, r0, ip, asr #27
   15d8c:	ldr	r2, [pc, #232]	; 15e7c <__assert_fail@plt+0x3730>
   15d90:	ldr	r3, [pc, #232]	; 15e80 <__assert_fail@plt+0x3734>
   15d94:	add	r2, pc, r2
   15d98:	push	{r4, r5, r6, r7, r8, lr}
   15d9c:	sub	sp, sp, #8
   15da0:	ldr	r7, [r2, r3]
   15da4:	mov	r5, #0
   15da8:	mov	r4, r0
   15dac:	ldr	r3, [r7]
   15db0:	mov	r8, r1
   15db4:	str	r5, [sp]
   15db8:	str	r3, [sp, #4]
   15dbc:	bl	1247c <__errno_location@plt>
   15dc0:	cmp	r4, r5
   15dc4:	str	r5, [r0]
   15dc8:	beq	15dd8 <__assert_fail@plt+0x368c>
   15dcc:	ldrsb	r3, [r4]
   15dd0:	cmp	r3, r5
   15dd4:	bne	15df8 <__assert_fail@plt+0x36ac>
   15dd8:	ldr	r1, [pc, #164]	; 15e84 <__assert_fail@plt+0x3738>
   15ddc:	mov	r3, r4
   15de0:	add	r1, pc, r1
   15de4:	mov	r2, r8
   15de8:	ldr	r0, [r1]
   15dec:	ldr	r1, [pc, #148]	; 15e88 <__assert_fail@plt+0x373c>
   15df0:	add	r1, pc, r1
   15df4:	bl	125f0 <errx@plt>
   15df8:	mov	r6, r0
   15dfc:	mov	r2, #10
   15e00:	mov	r1, sp
   15e04:	mov	r0, r4
   15e08:	bl	120e0 <strtol@plt>
   15e0c:	ldr	r2, [r6]
   15e10:	cmp	r2, r5
   15e14:	bne	15e50 <__assert_fail@plt+0x3704>
   15e18:	ldr	r3, [sp]
   15e1c:	cmp	r3, r4
   15e20:	beq	15dd8 <__assert_fail@plt+0x368c>
   15e24:	cmp	r3, r5
   15e28:	beq	15e38 <__assert_fail@plt+0x36ec>
   15e2c:	ldrsb	r3, [r3]
   15e30:	cmp	r3, r5
   15e34:	bne	15dd8 <__assert_fail@plt+0x368c>
   15e38:	ldr	r2, [sp, #4]
   15e3c:	ldr	r3, [r7]
   15e40:	cmp	r2, r3
   15e44:	bne	15e78 <__assert_fail@plt+0x372c>
   15e48:	add	sp, sp, #8
   15e4c:	pop	{r4, r5, r6, r7, r8, pc}
   15e50:	ldr	r3, [pc, #52]	; 15e8c <__assert_fail@plt+0x3740>
   15e54:	cmp	r2, #34	; 0x22
   15e58:	add	r3, pc, r3
   15e5c:	ldr	r0, [r3]
   15e60:	bne	15dd8 <__assert_fail@plt+0x368c>
   15e64:	ldr	r1, [pc, #36]	; 15e90 <__assert_fail@plt+0x3744>
   15e68:	mov	r3, r4
   15e6c:	mov	r2, r8
   15e70:	add	r1, pc, r1
   15e74:	bl	1223c <err@plt>
   15e78:	bl	12200 <__stack_chk_fail@plt>
   15e7c:	strdeq	lr, [r1], -r8
   15e80:	andeq	r0, r0, ip, asr r2
   15e84:	andeq	pc, r1, r0, lsr #4
   15e88:	andeq	sp, r0, r4, asr #26
   15e8c:	andeq	pc, r1, r8, lsr #3
   15e90:	andeq	sp, r0, r4, asr #25
   15e94:	ldr	r2, [pc, #232]	; 15f84 <__assert_fail@plt+0x3838>
   15e98:	ldr	r3, [pc, #232]	; 15f88 <__assert_fail@plt+0x383c>
   15e9c:	add	r2, pc, r2
   15ea0:	push	{r4, r5, r6, r7, r8, lr}
   15ea4:	sub	sp, sp, #8
   15ea8:	ldr	r7, [r2, r3]
   15eac:	mov	r5, #0
   15eb0:	mov	r4, r0
   15eb4:	ldr	r3, [r7]
   15eb8:	mov	r8, r1
   15ebc:	str	r5, [sp]
   15ec0:	str	r3, [sp, #4]
   15ec4:	bl	1247c <__errno_location@plt>
   15ec8:	cmp	r4, r5
   15ecc:	str	r5, [r0]
   15ed0:	beq	15ee0 <__assert_fail@plt+0x3794>
   15ed4:	ldrsb	r3, [r4]
   15ed8:	cmp	r3, r5
   15edc:	bne	15f00 <__assert_fail@plt+0x37b4>
   15ee0:	ldr	r1, [pc, #164]	; 15f8c <__assert_fail@plt+0x3840>
   15ee4:	mov	r3, r4
   15ee8:	add	r1, pc, r1
   15eec:	mov	r2, r8
   15ef0:	ldr	r0, [r1]
   15ef4:	ldr	r1, [pc, #148]	; 15f90 <__assert_fail@plt+0x3844>
   15ef8:	add	r1, pc, r1
   15efc:	bl	125f0 <errx@plt>
   15f00:	mov	r6, r0
   15f04:	mov	r2, #10
   15f08:	mov	r1, sp
   15f0c:	mov	r0, r4
   15f10:	bl	1241c <strtoul@plt>
   15f14:	ldr	r2, [r6]
   15f18:	cmp	r2, r5
   15f1c:	bne	15f58 <__assert_fail@plt+0x380c>
   15f20:	ldr	r3, [sp]
   15f24:	cmp	r3, r4
   15f28:	beq	15ee0 <__assert_fail@plt+0x3794>
   15f2c:	cmp	r3, r5
   15f30:	beq	15f40 <__assert_fail@plt+0x37f4>
   15f34:	ldrsb	r3, [r3]
   15f38:	cmp	r3, r5
   15f3c:	bne	15ee0 <__assert_fail@plt+0x3794>
   15f40:	ldr	r2, [sp, #4]
   15f44:	ldr	r3, [r7]
   15f48:	cmp	r2, r3
   15f4c:	bne	15f80 <__assert_fail@plt+0x3834>
   15f50:	add	sp, sp, #8
   15f54:	pop	{r4, r5, r6, r7, r8, pc}
   15f58:	ldr	r3, [pc, #52]	; 15f94 <__assert_fail@plt+0x3848>
   15f5c:	cmp	r2, #34	; 0x22
   15f60:	add	r3, pc, r3
   15f64:	ldr	r0, [r3]
   15f68:	bne	15ee0 <__assert_fail@plt+0x3794>
   15f6c:	ldr	r1, [pc, #36]	; 15f98 <__assert_fail@plt+0x384c>
   15f70:	mov	r3, r4
   15f74:	mov	r2, r8
   15f78:	add	r1, pc, r1
   15f7c:	bl	1223c <err@plt>
   15f80:	bl	12200 <__stack_chk_fail@plt>
   15f84:	strdeq	lr, [r1], -r0
   15f88:	andeq	r0, r0, ip, asr r2
   15f8c:	andeq	pc, r1, r8, lsl r1	; <UNPREDICTABLE>
   15f90:	andeq	sp, r0, ip, lsr ip
   15f94:	andeq	pc, r1, r0, lsr #1
   15f98:			; <UNDEFINED> instruction: 0x0000dbbc
   15f9c:	ldr	r3, [pc, #140]	; 16030 <__assert_fail@plt+0x38e4>
   15fa0:	ldr	r2, [pc, #140]	; 16034 <__assert_fail@plt+0x38e8>
   15fa4:	add	r3, pc, r3
   15fa8:	push	{r4, r5, r6, lr}
   15fac:	sub	sp, sp, #16
   15fb0:	ldr	r4, [r3, r2]
   15fb4:	mov	r5, r1
   15fb8:	mov	r1, sp
   15fbc:	ldr	r3, [r4]
   15fc0:	mov	r6, r0
   15fc4:	str	r3, [sp, #12]
   15fc8:	bl	157dc <__assert_fail@plt+0x3090>
   15fcc:	cmp	r0, #0
   15fd0:	beq	16010 <__assert_fail@plt+0x38c4>
   15fd4:	bl	1247c <__errno_location@plt>
   15fd8:	ldr	r3, [pc, #88]	; 16038 <__assert_fail@plt+0x38ec>
   15fdc:	mov	r2, r5
   15fe0:	ldr	r1, [pc, r3]
   15fe4:	ldr	r3, [r0]
   15fe8:	mov	r0, r1
   15fec:	cmp	r3, #0
   15ff0:	mov	r3, r6
   15ff4:	beq	16004 <__assert_fail@plt+0x38b8>
   15ff8:	ldr	r1, [pc, #60]	; 1603c <__assert_fail@plt+0x38f0>
   15ffc:	add	r1, pc, r1
   16000:	bl	1223c <err@plt>
   16004:	ldr	r1, [pc, #52]	; 16040 <__assert_fail@plt+0x38f4>
   16008:	add	r1, pc, r1
   1600c:	bl	125f0 <errx@plt>
   16010:	ldr	r2, [sp, #12]
   16014:	ldr	r3, [r4]
   16018:	ldrd	r0, [sp]
   1601c:	cmp	r2, r3
   16020:	bne	1602c <__assert_fail@plt+0x38e0>
   16024:	add	sp, sp, #16
   16028:	pop	{r4, r5, r6, pc}
   1602c:	bl	12200 <__stack_chk_fail@plt>
   16030:	andeq	lr, r1, r8, ror #27
   16034:	andeq	r0, r0, ip, asr r2
   16038:	andeq	pc, r1, r0, lsr #32
   1603c:	andeq	sp, r0, r8, lsr fp
   16040:	andeq	sp, r0, ip, lsr #22
   16044:	push	{r4, lr}
   16048:	mov	r4, r1
   1604c:	mov	r1, r2
   16050:	bl	15c88 <__assert_fail@plt+0x353c>
   16054:	vldr	d6, [pc, #28]	; 16078 <__assert_fail@plt+0x392c>
   16058:	vcvt.s32.f64	s15, d0
   1605c:	vcvt.f64.s32	d5, s15
   16060:	vstr	s15, [r4]
   16064:	vsub.f64	d0, d0, d5
   16068:	vmul.f64	d0, d0, d6
   1606c:	vcvt.s32.f64	s0, d0
   16070:	vstr	s0, [r4, #4]
   16074:	pop	{r4, pc}
   16078:	andeq	r0, r0, r0
   1607c:	smlawbmi	lr, r0, r4, r8
   16080:	and	r2, r0, #61440	; 0xf000
   16084:	cmp	r2, #16384	; 0x4000
   16088:	moveq	r2, r1
   1608c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16090:	moveq	sl, #100	; 0x64
   16094:	mov	r3, r0
   16098:	add	r9, r1, #1
   1609c:	add	r8, r1, #2
   160a0:	add	r7, r1, #3
   160a4:	add	r6, r1, #4
   160a8:	add	r5, r1, #5
   160ac:	add	r4, r1, #6
   160b0:	add	lr, r1, #7
   160b4:	add	ip, r1, #8
   160b8:	add	r0, r1, #9
   160bc:	strbeq	sl, [r2], #10
   160c0:	beq	16164 <__assert_fail@plt+0x3a18>
   160c4:	cmp	r2, #40960	; 0xa000
   160c8:	moveq	r2, r1
   160cc:	moveq	sl, #108	; 0x6c
   160d0:	strbeq	sl, [r2], #10
   160d4:	beq	16164 <__assert_fail@plt+0x3a18>
   160d8:	cmp	r2, #8192	; 0x2000
   160dc:	moveq	r2, r1
   160e0:	moveq	sl, #99	; 0x63
   160e4:	strbeq	sl, [r2], #10
   160e8:	beq	16164 <__assert_fail@plt+0x3a18>
   160ec:	cmp	r2, #24576	; 0x6000
   160f0:	moveq	r2, r1
   160f4:	moveq	sl, #98	; 0x62
   160f8:	strbeq	sl, [r2], #10
   160fc:	beq	16164 <__assert_fail@plt+0x3a18>
   16100:	cmp	r2, #49152	; 0xc000
   16104:	moveq	r2, r1
   16108:	moveq	sl, #115	; 0x73
   1610c:	strbeq	sl, [r2], #10
   16110:	beq	16164 <__assert_fail@plt+0x3a18>
   16114:	cmp	r2, #4096	; 0x1000
   16118:	moveq	r2, r1
   1611c:	moveq	sl, #112	; 0x70
   16120:	strbeq	sl, [r2], #10
   16124:	beq	16164 <__assert_fail@plt+0x3a18>
   16128:	cmp	r2, #32768	; 0x8000
   1612c:	moveq	r2, r1
   16130:	moveq	sl, #45	; 0x2d
   16134:	strbeq	sl, [r2], #10
   16138:	beq	16164 <__assert_fail@plt+0x3a18>
   1613c:	mov	r2, r0
   16140:	mov	r0, ip
   16144:	mov	ip, lr
   16148:	mov	lr, r4
   1614c:	mov	r4, r5
   16150:	mov	r5, r6
   16154:	mov	r6, r7
   16158:	mov	r7, r8
   1615c:	mov	r8, r9
   16160:	mov	r9, r1
   16164:	tst	r3, #256	; 0x100
   16168:	movne	fp, #114	; 0x72
   1616c:	moveq	fp, #45	; 0x2d
   16170:	tst	r3, #128	; 0x80
   16174:	movne	sl, #119	; 0x77
   16178:	moveq	sl, #45	; 0x2d
   1617c:	tst	r3, #2048	; 0x800
   16180:	strb	fp, [r9]
   16184:	and	r9, r3, #64	; 0x40
   16188:	strb	sl, [r8]
   1618c:	beq	16228 <__assert_fail@plt+0x3adc>
   16190:	cmp	r9, #0
   16194:	movne	r9, #115	; 0x73
   16198:	moveq	r9, #83	; 0x53
   1619c:	tst	r3, #32
   161a0:	movne	r8, #114	; 0x72
   161a4:	moveq	r8, #45	; 0x2d
   161a8:	tst	r3, #16
   161ac:	strb	r9, [r7]
   161b0:	movne	r7, #119	; 0x77
   161b4:	moveq	r7, #45	; 0x2d
   161b8:	tst	r3, #1024	; 0x400
   161bc:	strb	r8, [r6]
   161c0:	and	r6, r3, #8
   161c4:	strb	r7, [r5]
   161c8:	beq	16238 <__assert_fail@plt+0x3aec>
   161cc:	cmp	r6, #0
   161d0:	movne	r6, #115	; 0x73
   161d4:	moveq	r6, #83	; 0x53
   161d8:	tst	r3, #4
   161dc:	movne	r5, #114	; 0x72
   161e0:	moveq	r5, #45	; 0x2d
   161e4:	tst	r3, #2
   161e8:	strb	r6, [r4]
   161ec:	movne	r4, #119	; 0x77
   161f0:	moveq	r4, #45	; 0x2d
   161f4:	tst	r3, #512	; 0x200
   161f8:	strb	r5, [lr]
   161fc:	and	r3, r3, #1
   16200:	strb	r4, [ip]
   16204:	beq	16248 <__assert_fail@plt+0x3afc>
   16208:	cmp	r3, #0
   1620c:	movne	ip, #116	; 0x74
   16210:	moveq	ip, #84	; 0x54
   16214:	mov	r3, #0
   16218:	strb	ip, [r0]
   1621c:	mov	r0, r1
   16220:	strb	r3, [r2]
   16224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16228:	cmp	r9, #0
   1622c:	movne	r9, #120	; 0x78
   16230:	moveq	r9, #45	; 0x2d
   16234:	b	1619c <__assert_fail@plt+0x3a50>
   16238:	cmp	r6, #0
   1623c:	movne	r6, #120	; 0x78
   16240:	moveq	r6, #45	; 0x2d
   16244:	b	161d8 <__assert_fail@plt+0x3a8c>
   16248:	cmp	r3, #0
   1624c:	movne	ip, #120	; 0x78
   16250:	moveq	ip, #45	; 0x2d
   16254:	b	16214 <__assert_fail@plt+0x3ac8>
   16258:	ldr	r1, [pc, #680]	; 16508 <__assert_fail@plt+0x3dbc>
   1625c:	ldr	ip, [pc, #680]	; 1650c <__assert_fail@plt+0x3dc0>
   16260:	add	r1, pc, r1
   16264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16268:	sub	sp, sp, #108	; 0x6c
   1626c:	ldr	r8, [r1, ip]
   16270:	tst	r0, #2
   16274:	strd	r2, [sp, #32]
   16278:	ldr	r1, [r8]
   1627c:	addeq	r9, sp, #60	; 0x3c
   16280:	str	r1, [sp, #100]	; 0x64
   16284:	ldrd	r2, [sp, #32]
   16288:	movne	r1, #32
   1628c:	strbne	r1, [sp, #60]	; 0x3c
   16290:	addne	ip, sp, #61	; 0x3d
   16294:	addne	r9, sp, #60	; 0x3c
   16298:	moveq	ip, r9
   1629c:	mov	r1, #10
   162a0:	mov	sl, #1
   162a4:	sub	lr, r1, #32
   162a8:	lsl	r4, sl, r1
   162ac:	lsl	r5, sl, lr
   162b0:	rsb	lr, r1, #32
   162b4:	orr	r5, r5, sl, lsr lr
   162b8:	cmp	r3, r5
   162bc:	cmpeq	r2, r4
   162c0:	bcc	1647c <__assert_fail@plt+0x3d30>
   162c4:	add	r1, r1, #10
   162c8:	cmp	r1, #70	; 0x46
   162cc:	bne	162a4 <__assert_fail@plt+0x3b58>
   162d0:	mov	lr, ip
   162d4:	strd	r2, [sp, #32]
   162d8:	mov	r4, r2
   162dc:	tst	r0, #1
   162e0:	mov	r2, #69	; 0x45
   162e4:	bic	r5, r3, #-268435456	; 0xf0000000
   162e8:	lsr	sl, r3, #28
   162ec:	strb	r2, [lr], #1
   162f0:	bne	16464 <__assert_fail@plt+0x3d18>
   162f4:	orrs	r3, r4, r5
   162f8:	mov	r3, #0
   162fc:	strb	r3, [lr]
   16300:	beq	164a4 <__assert_fail@plt+0x3d58>
   16304:	sub	r2, r1, #20
   16308:	rsb	r0, r2, #32
   1630c:	lsr	r3, r4, r2
   16310:	sub	r1, r1, #52	; 0x34
   16314:	orr	r3, r3, r5, lsl r0
   16318:	orr	r3, r3, r5, lsr r1
   1631c:	lsr	r2, r5, r2
   16320:	adds	r6, r3, #50	; 0x32
   16324:	adc	r7, r2, #0
   16328:	mov	r3, #0
   1632c:	mov	r2, #100	; 0x64
   16330:	mov	r0, r6
   16334:	mov	r1, r7
   16338:	bl	22830 <__assert_fail@plt+0x100e4>
   1633c:	cmp	r1, #0
   16340:	cmpeq	r0, #10
   16344:	mov	r2, r0
   16348:	mov	r3, r1
   1634c:	addeq	sl, sl, #1
   16350:	beq	164a4 <__assert_fail@plt+0x3d58>
   16354:	cmp	r7, #0
   16358:	cmpeq	r6, #99	; 0x63
   1635c:	strd	r2, [sp, #32]
   16360:	bls	164a4 <__assert_fail@plt+0x3d58>
   16364:	bl	12638 <localeconv@plt>
   16368:	ldrd	r2, [sp, #32]
   1636c:	cmp	r0, #0
   16370:	beq	164ec <__assert_fail@plt+0x3da0>
   16374:	ldr	r0, [r0]
   16378:	cmp	r0, #0
   1637c:	beq	164f8 <__assert_fail@plt+0x3dac>
   16380:	ldrsb	r1, [r0]
   16384:	cmp	r1, #0
   16388:	ldreq	r0, [pc, #384]	; 16510 <__assert_fail@plt+0x3dc4>
   1638c:	addeq	r0, pc, r0
   16390:	ldr	r1, [pc, #380]	; 16514 <__assert_fail@plt+0x3dc8>
   16394:	strd	r2, [sp, #16]
   16398:	add	r1, pc, r1
   1639c:	add	r4, sp, #68	; 0x44
   163a0:	mov	r3, #32
   163a4:	str	r0, [sp, #8]
   163a8:	str	r1, [sp]
   163ac:	str	r9, [sp, #24]
   163b0:	str	sl, [sp, #4]
   163b4:	mov	r0, r4
   163b8:	mov	r1, r3
   163bc:	mov	r2, #1
   163c0:	bl	12728 <__snprintf_chk@plt>
   163c4:	b	164cc <__assert_fail@plt+0x3d80>
   163c8:	ldr	r4, [pc, #328]	; 16518 <__assert_fail@plt+0x3dcc>
   163cc:	mvn	sl, #0
   163d0:	ldr	fp, [pc, #324]	; 1651c <__assert_fail@plt+0x3dd0>
   163d4:	umull	r2, r3, lr, r4
   163d8:	sub	r4, r1, #42	; 0x2a
   163dc:	strd	r2, [sp, #40]	; 0x28
   163e0:	ldr	r3, [sp, #44]	; 0x2c
   163e4:	lsl	r2, sl, lr
   163e8:	lsr	r3, r3, #3
   163ec:	str	r3, [sp, #52]	; 0x34
   163f0:	ldr	r3, [sp, #32]
   163f4:	str	r4, [sp, #48]	; 0x30
   163f8:	orr	r4, r2, sl, lsl r4
   163fc:	lsr	r2, r3, lr
   16400:	mov	r3, r2
   16404:	ldr	r2, [sp, #52]	; 0x34
   16408:	add	fp, pc, fp
   1640c:	str	r4, [sp, #40]	; 0x28
   16410:	ldrsb	fp, [fp, r2]
   16414:	mov	r2, r3
   16418:	ldr	r3, [sp, #36]	; 0x24
   1641c:	rsb	r5, lr, #32
   16420:	ldr	r4, [sp, #40]	; 0x28
   16424:	orr	r2, r2, r3, lsl r5
   16428:	orr	r4, r4, sl, lsr r5
   1642c:	ldr	r3, [sp, #32]
   16430:	str	r4, [sp, #40]	; 0x28
   16434:	cmp	r0, #0
   16438:	bic	r4, r3, sl, lsl lr
   1643c:	ldr	r0, [sp, #36]	; 0x24
   16440:	ldr	r3, [sp, #48]	; 0x30
   16444:	mov	lr, ip
   16448:	orr	sl, r2, r0, lsr r3
   1644c:	ldr	r3, [sp, #40]	; 0x28
   16450:	strb	fp, [lr], #1
   16454:	bic	r5, r0, r3
   16458:	beq	162f4 <__assert_fail@plt+0x3ba8>
   1645c:	cmp	fp, #66	; 0x42
   16460:	beq	162f4 <__assert_fail@plt+0x3ba8>
   16464:	mov	r3, #105	; 0x69
   16468:	strb	r3, [ip, #1]
   1646c:	mov	r3, #66	; 0x42
   16470:	add	lr, ip, #3
   16474:	strb	r3, [ip, #2]
   16478:	b	162f4 <__assert_fail@plt+0x3ba8>
   1647c:	subs	lr, r1, #10
   16480:	strd	r2, [sp, #32]
   16484:	and	r0, r0, #1
   16488:	bne	163c8 <__assert_fail@plt+0x3c7c>
   1648c:	ldr	sl, [sp, #32]
   16490:	cmp	r0, #0
   16494:	movne	r0, lr
   16498:	mov	r3, #66	; 0x42
   1649c:	strb	r0, [ip, #1]
   164a0:	strb	r3, [ip]
   164a4:	ldr	r2, [pc, #116]	; 16520 <__assert_fail@plt+0x3dd4>
   164a8:	add	r4, sp, #68	; 0x44
   164ac:	add	r2, pc, r2
   164b0:	mov	r3, #32
   164b4:	stm	sp, {r2, sl}
   164b8:	str	r9, [sp, #8]
   164bc:	mov	r0, r4
   164c0:	mov	r1, r3
   164c4:	mov	r2, #1
   164c8:	bl	12728 <__snprintf_chk@plt>
   164cc:	mov	r0, r4
   164d0:	bl	121f4 <strdup@plt>
   164d4:	ldr	r2, [sp, #100]	; 0x64
   164d8:	ldr	r3, [r8]
   164dc:	cmp	r2, r3
   164e0:	bne	16504 <__assert_fail@plt+0x3db8>
   164e4:	add	sp, sp, #108	; 0x6c
   164e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164ec:	ldr	r0, [pc, #48]	; 16524 <__assert_fail@plt+0x3dd8>
   164f0:	add	r0, pc, r0
   164f4:	b	16390 <__assert_fail@plt+0x3c44>
   164f8:	ldr	r0, [pc, #40]	; 16528 <__assert_fail@plt+0x3ddc>
   164fc:	add	r0, pc, r0
   16500:	b	16390 <__assert_fail@plt+0x3c44>
   16504:	bl	12200 <__stack_chk_fail@plt>
   16508:	andeq	lr, r1, ip, lsr #22
   1650c:	andeq	r0, r0, ip, asr r2
   16510:	andeq	ip, r0, r4, lsr fp
   16514:	andeq	sp, r0, r8, asr #15
   16518:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1651c:	andeq	sp, r0, r0, asr r7
   16520:	andeq	sp, r0, r0, asr #13
   16524:	ldrdeq	ip, [r0], -r0
   16528:	andeq	ip, r0, r4, asr #19
   1652c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16530:	subs	r4, r0, #0
   16534:	beq	16604 <__assert_fail@plt+0x3eb8>
   16538:	ldrsb	lr, [r4]
   1653c:	cmp	lr, #0
   16540:	beq	16604 <__assert_fail@plt+0x3eb8>
   16544:	cmp	r1, #0
   16548:	clz	ip, r2
   1654c:	lsr	ip, ip, #5
   16550:	moveq	r0, #1
   16554:	movne	r0, ip
   16558:	cmp	r3, #0
   1655c:	moveq	r0, #1
   16560:	cmp	r0, #0
   16564:	bne	16604 <__assert_fail@plt+0x3eb8>
   16568:	mov	r8, r3
   1656c:	mov	r7, r2
   16570:	mov	r9, r1
   16574:	mov	r5, r0
   16578:	b	165d4 <__assert_fail@plt+0x3e88>
   1657c:	cmp	r3, #0
   16580:	bne	165c0 <__assert_fail@plt+0x3e74>
   16584:	cmn	r4, #1
   16588:	add	r6, r4, #1
   1658c:	beq	1660c <__assert_fail@plt+0x3ec0>
   16590:	cmp	r0, r6
   16594:	bcs	16604 <__assert_fail@plt+0x3eb8>
   16598:	sub	r1, r6, r0
   1659c:	blx	r8
   165a0:	cmn	r0, #1
   165a4:	beq	16604 <__assert_fail@plt+0x3eb8>
   165a8:	str	r0, [r9, r5, lsl #2]
   165ac:	ldrsb	r3, [r6]
   165b0:	add	r5, r5, #1
   165b4:	cmp	r3, #0
   165b8:	beq	1660c <__assert_fail@plt+0x3ec0>
   165bc:	mov	r0, #0
   165c0:	cmn	r4, #1
   165c4:	beq	1660c <__assert_fail@plt+0x3ec0>
   165c8:	ldrsb	lr, [r4, #1]!
   165cc:	cmp	lr, #0
   165d0:	beq	1660c <__assert_fail@plt+0x3ec0>
   165d4:	cmp	r7, r5
   165d8:	mov	r6, r4
   165dc:	bls	16614 <__assert_fail@plt+0x3ec8>
   165e0:	cmp	r0, #0
   165e4:	moveq	r0, r4
   165e8:	cmp	lr, #44	; 0x2c
   165ec:	ldrsb	r3, [r4, #1]
   165f0:	bne	1657c <__assert_fail@plt+0x3e30>
   165f4:	cmp	r3, #0
   165f8:	beq	16584 <__assert_fail@plt+0x3e38>
   165fc:	cmp	r0, r6
   16600:	bcc	16598 <__assert_fail@plt+0x3e4c>
   16604:	mvn	r0, #0
   16608:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1660c:	mov	r0, r5
   16610:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16614:	mvn	r0, #1
   16618:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1661c:	cmp	r0, #0
   16620:	beq	1668c <__assert_fail@plt+0x3f40>
   16624:	push	{r4, lr}
   16628:	mov	r4, r3
   1662c:	cmp	r4, #0
   16630:	ldrsb	ip, [r0]
   16634:	clz	r3, ip
   16638:	lsr	r3, r3, #5
   1663c:	moveq	r3, #1
   16640:	cmp	r3, #0
   16644:	bne	16684 <__assert_fail@plt+0x3f38>
   16648:	ldr	lr, [r4]
   1664c:	cmp	lr, r2
   16650:	bhi	16684 <__assert_fail@plt+0x3f38>
   16654:	cmp	ip, #43	; 0x2b
   16658:	strne	r3, [r4]
   1665c:	addeq	r0, r0, #1
   16660:	ldr	r3, [sp, #8]
   16664:	addeq	r1, r1, lr, lsl #2
   16668:	subeq	r2, r2, lr
   1666c:	bl	1652c <__assert_fail@plt+0x3de0>
   16670:	cmp	r0, #0
   16674:	ldrgt	r3, [r4]
   16678:	addgt	r3, r3, r0
   1667c:	strgt	r3, [r4]
   16680:	pop	{r4, pc}
   16684:	mvn	r0, #0
   16688:	pop	{r4, pc}
   1668c:	mvn	r0, #0
   16690:	bx	lr
   16694:	cmp	r2, #0
   16698:	clz	r3, r1
   1669c:	lsr	r3, r3, #5
   166a0:	moveq	r3, #1
   166a4:	cmp	r0, #0
   166a8:	moveq	r3, #1
   166ac:	cmp	r3, #0
   166b0:	bne	1677c <__assert_fail@plt+0x4030>
   166b4:	push	{r4, r5, r6, r7, r8, lr}
   166b8:	mov	r6, r2
   166bc:	mov	r2, r3
   166c0:	ldrsb	r3, [r0]
   166c4:	mov	r8, r1
   166c8:	mov	r4, r0
   166cc:	mov	r7, #1
   166d0:	cmp	r3, #0
   166d4:	beq	16744 <__assert_fail@plt+0x3ff8>
   166d8:	cmp	r2, #0
   166dc:	moveq	r2, r4
   166e0:	cmp	r3, #44	; 0x2c
   166e4:	mov	r5, r4
   166e8:	ldrsb	r3, [r4, #1]!
   166ec:	beq	1674c <__assert_fail@plt+0x4000>
   166f0:	cmp	r3, #0
   166f4:	bne	1676c <__assert_fail@plt+0x4020>
   166f8:	mov	r5, r4
   166fc:	cmp	r2, r5
   16700:	sub	r1, r5, r2
   16704:	mov	r0, r2
   16708:	bcs	16764 <__assert_fail@plt+0x4018>
   1670c:	blx	r6
   16710:	mov	r2, r4
   16714:	cmp	r0, #0
   16718:	and	r1, r0, #7
   1671c:	poplt	{r4, r5, r6, r7, r8, pc}
   16720:	ldrb	r3, [r8, r0, asr #3]
   16724:	orr	r3, r3, r7, lsl r1
   16728:	strb	r3, [r8, r0, asr #3]
   1672c:	ldrsb	r3, [r5]
   16730:	cmp	r3, #0
   16734:	beq	16744 <__assert_fail@plt+0x3ff8>
   16738:	ldrsb	r3, [r4]
   1673c:	cmp	r3, #0
   16740:	bne	166e0 <__assert_fail@plt+0x3f94>
   16744:	mov	r0, #0
   16748:	pop	{r4, r5, r6, r7, r8, pc}
   1674c:	cmp	r3, #0
   16750:	moveq	r5, r4
   16754:	cmp	r2, r5
   16758:	sub	r1, r5, r2
   1675c:	mov	r0, r2
   16760:	bcc	1670c <__assert_fail@plt+0x3fc0>
   16764:	mvn	r0, #0
   16768:	pop	{r4, r5, r6, r7, r8, pc}
   1676c:	adds	r4, r5, #1
   16770:	bne	166d0 <__assert_fail@plt+0x3f84>
   16774:	mov	r0, #0
   16778:	pop	{r4, r5, r6, r7, r8, pc}
   1677c:	mvn	r0, #21
   16780:	bx	lr
   16784:	cmp	r2, #0
   16788:	clz	r3, r1
   1678c:	lsr	r3, r3, #5
   16790:	moveq	r3, #1
   16794:	cmp	r0, #0
   16798:	moveq	r3, #1
   1679c:	cmp	r3, #0
   167a0:	bne	16864 <__assert_fail@plt+0x4118>
   167a4:	push	{r4, r5, r6, r7, r8, lr}
   167a8:	mov	r6, r2
   167ac:	mov	r2, r3
   167b0:	ldrsb	r3, [r0]
   167b4:	mov	r7, r1
   167b8:	mov	r4, r0
   167bc:	cmp	r3, #0
   167c0:	beq	1682c <__assert_fail@plt+0x40e0>
   167c4:	cmp	r2, #0
   167c8:	moveq	r2, r4
   167cc:	cmp	r3, #44	; 0x2c
   167d0:	mov	r5, r4
   167d4:	ldrsb	r3, [r4, #1]!
   167d8:	beq	16834 <__assert_fail@plt+0x40e8>
   167dc:	cmp	r3, #0
   167e0:	bne	16854 <__assert_fail@plt+0x4108>
   167e4:	mov	r5, r4
   167e8:	cmp	r2, r5
   167ec:	sub	r1, r5, r2
   167f0:	mov	r0, r2
   167f4:	bcs	1684c <__assert_fail@plt+0x4100>
   167f8:	blx	r6
   167fc:	mov	r2, r4
   16800:	cmp	r0, #0
   16804:	poplt	{r4, r5, r6, r7, r8, pc}
   16808:	ldr	r3, [r7]
   1680c:	orr	r3, r3, r0
   16810:	str	r3, [r7]
   16814:	ldrsb	r3, [r5]
   16818:	cmp	r3, #0
   1681c:	beq	1682c <__assert_fail@plt+0x40e0>
   16820:	ldrsb	r3, [r4]
   16824:	cmp	r3, #0
   16828:	bne	167cc <__assert_fail@plt+0x4080>
   1682c:	mov	r0, #0
   16830:	pop	{r4, r5, r6, r7, r8, pc}
   16834:	cmp	r3, #0
   16838:	moveq	r5, r4
   1683c:	cmp	r2, r5
   16840:	sub	r1, r5, r2
   16844:	mov	r0, r2
   16848:	bcc	167f8 <__assert_fail@plt+0x40ac>
   1684c:	mvn	r0, #0
   16850:	pop	{r4, r5, r6, r7, r8, pc}
   16854:	adds	r4, r5, #1
   16858:	bne	167bc <__assert_fail@plt+0x4070>
   1685c:	mov	r0, #0
   16860:	pop	{r4, r5, r6, r7, r8, pc}
   16864:	mvn	r0, #21
   16868:	bx	lr
   1686c:	ldr	ip, [pc, #396]	; 16a00 <__assert_fail@plt+0x42b4>
   16870:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16874:	add	ip, pc, ip
   16878:	ldr	lr, [pc, #388]	; 16a04 <__assert_fail@plt+0x42b8>
   1687c:	sub	sp, sp, #8
   16880:	mov	r9, r3
   16884:	ldr	r5, [ip, lr]
   16888:	mov	sl, #0
   1688c:	subs	r4, r0, #0
   16890:	ldr	r3, [r5]
   16894:	mov	r7, r1
   16898:	str	sl, [sp]
   1689c:	mov	r1, ip
   168a0:	str	r3, [sp, #4]
   168a4:	beq	16918 <__assert_fail@plt+0x41cc>
   168a8:	str	r9, [r7]
   168ac:	str	r9, [r2]
   168b0:	mov	r6, r2
   168b4:	bl	1247c <__errno_location@plt>
   168b8:	str	sl, [r0]
   168bc:	ldrsb	r3, [r4]
   168c0:	mov	r8, r0
   168c4:	cmp	r3, #58	; 0x3a
   168c8:	beq	16934 <__assert_fail@plt+0x41e8>
   168cc:	mov	sl, sp
   168d0:	mov	r1, sl
   168d4:	mov	r2, #10
   168d8:	mov	r0, r4
   168dc:	bl	120e0 <strtol@plt>
   168e0:	str	r0, [r7]
   168e4:	str	r0, [r6]
   168e8:	ldr	r0, [r8]
   168ec:	cmp	r0, #0
   168f0:	bne	16984 <__assert_fail@plt+0x4238>
   168f4:	ldr	r2, [sp]
   168f8:	cmp	r2, #0
   168fc:	cmpne	r2, r4
   16900:	beq	16984 <__assert_fail@plt+0x4238>
   16904:	ldrsb	r3, [r2]
   16908:	cmp	r3, #58	; 0x3a
   1690c:	beq	1698c <__assert_fail@plt+0x4240>
   16910:	cmp	r3, #45	; 0x2d
   16914:	beq	1699c <__assert_fail@plt+0x4250>
   16918:	mov	r0, #0
   1691c:	ldr	r2, [sp, #4]
   16920:	ldr	r3, [r5]
   16924:	cmp	r2, r3
   16928:	bne	169fc <__assert_fail@plt+0x42b0>
   1692c:	add	sp, sp, #8
   16930:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16934:	add	r4, r4, #1
   16938:	mov	r0, r4
   1693c:	mov	r2, #10
   16940:	mov	r1, sp
   16944:	bl	120e0 <strtol@plt>
   16948:	str	r0, [r6]
   1694c:	ldr	r3, [r8]
   16950:	cmp	r3, #0
   16954:	bne	16984 <__assert_fail@plt+0x4238>
   16958:	ldr	r3, [sp]
   1695c:	cmp	r3, #0
   16960:	beq	16984 <__assert_fail@plt+0x4238>
   16964:	ldrsb	r2, [r3]
   16968:	sub	r3, r3, r4
   1696c:	clz	r3, r3
   16970:	cmp	r2, #0
   16974:	lsr	r3, r3, #5
   16978:	movne	r3, #1
   1697c:	cmp	r3, #0
   16980:	beq	16918 <__assert_fail@plt+0x41cc>
   16984:	mvn	r0, #0
   16988:	b	1691c <__assert_fail@plt+0x41d0>
   1698c:	ldrsb	r3, [r2, #1]
   16990:	cmp	r3, #0
   16994:	streq	r9, [r6]
   16998:	beq	1691c <__assert_fail@plt+0x41d0>
   1699c:	mov	r3, #0
   169a0:	add	r4, r2, #1
   169a4:	str	r3, [r8]
   169a8:	mov	r1, sl
   169ac:	mov	r0, r4
   169b0:	mov	r2, #10
   169b4:	str	r3, [sp]
   169b8:	bl	120e0 <strtol@plt>
   169bc:	str	r0, [r6]
   169c0:	ldr	r3, [r8]
   169c4:	cmp	r3, #0
   169c8:	bne	16984 <__assert_fail@plt+0x4238>
   169cc:	ldr	r2, [sp]
   169d0:	cmp	r2, #0
   169d4:	beq	16984 <__assert_fail@plt+0x4238>
   169d8:	ldrsb	r3, [r2]
   169dc:	sub	r2, r2, r4
   169e0:	clz	r2, r2
   169e4:	cmp	r3, #0
   169e8:	lsr	r2, r2, #5
   169ec:	movne	r2, #1
   169f0:	cmp	r2, #0
   169f4:	beq	16918 <__assert_fail@plt+0x41cc>
   169f8:	b	16984 <__assert_fail@plt+0x4238>
   169fc:	bl	12200 <__stack_chk_fail@plt>
   16a00:	andeq	lr, r1, r8, lsl r5
   16a04:	andeq	r0, r0, ip, asr r2
   16a08:	ldr	r3, [pc, #244]	; 16b04 <__assert_fail@plt+0x43b8>
   16a0c:	ldr	r2, [pc, #244]	; 16b08 <__assert_fail@plt+0x43bc>
   16a10:	add	r3, pc, r3
   16a14:	push	{r4, r5, r6, r7, r8, r9, lr}
   16a18:	sub	sp, sp, #20
   16a1c:	ldr	r9, [r3, r2]
   16a20:	cmp	r0, #0
   16a24:	cmpne	r1, #0
   16a28:	ldr	r3, [r9]
   16a2c:	str	r3, [sp, #12]
   16a30:	beq	16af8 <__assert_fail@plt+0x43ac>
   16a34:	mov	r4, r1
   16a38:	add	r8, sp, #4
   16a3c:	add	r7, sp, #8
   16a40:	b	16a80 <__assert_fail@plt+0x4334>
   16a44:	cmp	r4, r3
   16a48:	bne	16af8 <__assert_fail@plt+0x43ac>
   16a4c:	mov	r2, r4
   16a50:	mov	r1, r6
   16a54:	mov	r0, r5
   16a58:	bl	126e0 <strncmp@plt>
   16a5c:	cmp	r0, #0
   16a60:	bne	16af8 <__assert_fail@plt+0x43ac>
   16a64:	adds	r0, r5, r4
   16a68:	moveq	r3, #0
   16a6c:	movne	r3, #1
   16a70:	adds	r4, r6, r4
   16a74:	moveq	r3, #0
   16a78:	cmp	r3, #0
   16a7c:	beq	16af8 <__assert_fail@plt+0x43ac>
   16a80:	mov	r1, r8
   16a84:	bl	14e88 <__assert_fail@plt+0x273c>
   16a88:	mov	r1, r7
   16a8c:	mov	r5, r0
   16a90:	mov	r0, r4
   16a94:	bl	14e88 <__assert_fail@plt+0x273c>
   16a98:	ldr	r4, [sp, #4]
   16a9c:	ldr	r3, [sp, #8]
   16aa0:	mov	r6, r0
   16aa4:	adds	r0, r4, r3
   16aa8:	beq	16adc <__assert_fail@plt+0x4390>
   16aac:	cmp	r0, #1
   16ab0:	bne	16a44 <__assert_fail@plt+0x42f8>
   16ab4:	cmp	r5, #0
   16ab8:	beq	16ac8 <__assert_fail@plt+0x437c>
   16abc:	ldrsb	r2, [r5]
   16ac0:	cmp	r2, #47	; 0x2f
   16ac4:	beq	16ae0 <__assert_fail@plt+0x4394>
   16ac8:	cmp	r6, #0
   16acc:	beq	16a44 <__assert_fail@plt+0x42f8>
   16ad0:	ldrsb	r2, [r6]
   16ad4:	cmp	r2, #47	; 0x2f
   16ad8:	bne	16a44 <__assert_fail@plt+0x42f8>
   16adc:	mov	r0, #1
   16ae0:	ldr	r2, [sp, #12]
   16ae4:	ldr	r3, [r9]
   16ae8:	cmp	r2, r3
   16aec:	bne	16b00 <__assert_fail@plt+0x43b4>
   16af0:	add	sp, sp, #20
   16af4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16af8:	mov	r0, #0
   16afc:	b	16ae0 <__assert_fail@plt+0x4394>
   16b00:	bl	12200 <__stack_chk_fail@plt>
   16b04:	andeq	lr, r1, ip, ror r3
   16b08:	andeq	r0, r0, ip, asr r2
   16b0c:	orrs	r3, r0, r1
   16b10:	beq	16b8c <__assert_fail@plt+0x4440>
   16b14:	cmp	r0, #0
   16b18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b1c:	mov	r4, r1
   16b20:	mov	r5, r0
   16b24:	beq	16b98 <__assert_fail@plt+0x444c>
   16b28:	cmp	r1, #0
   16b2c:	beq	16ba8 <__assert_fail@plt+0x445c>
   16b30:	mov	r6, r2
   16b34:	bl	12428 <strlen@plt>
   16b38:	mvn	r3, r0
   16b3c:	cmp	r6, r3
   16b40:	mov	r7, r0
   16b44:	movhi	r8, #0
   16b48:	bhi	16b84 <__assert_fail@plt+0x4438>
   16b4c:	add	r9, r6, r0
   16b50:	add	r0, r9, #1
   16b54:	bl	12350 <malloc@plt>
   16b58:	subs	r8, r0, #0
   16b5c:	beq	16b84 <__assert_fail@plt+0x4438>
   16b60:	mov	r1, r5
   16b64:	mov	r2, r7
   16b68:	bl	121ac <memcpy@plt>
   16b6c:	mov	r2, r6
   16b70:	mov	r1, r4
   16b74:	add	r0, r8, r7
   16b78:	bl	121ac <memcpy@plt>
   16b7c:	mov	r3, #0
   16b80:	strb	r3, [r8, r9]
   16b84:	mov	r0, r8
   16b88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b8c:	ldr	r0, [pc, #28]	; 16bb0 <__assert_fail@plt+0x4464>
   16b90:	add	r0, pc, r0
   16b94:	b	121f4 <strdup@plt>
   16b98:	mov	r0, r4
   16b9c:	mov	r1, r2
   16ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16ba4:	b	1217c <strndup@plt>
   16ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16bac:	b	121f4 <strdup@plt>
   16bb0:	ldrdeq	ip, [r0], -r0
   16bb4:	push	{r4, r5, r6, lr}
   16bb8:	subs	r4, r1, #0
   16bbc:	mov	r5, r0
   16bc0:	moveq	r2, r4
   16bc4:	beq	16bd4 <__assert_fail@plt+0x4488>
   16bc8:	mov	r0, r4
   16bcc:	bl	12428 <strlen@plt>
   16bd0:	mov	r2, r0
   16bd4:	mov	r1, r4
   16bd8:	mov	r0, r5
   16bdc:	pop	{r4, r5, r6, lr}
   16be0:	b	16b0c <__assert_fail@plt+0x43c0>
   16be4:	push	{r1, r2, r3}
   16be8:	ldr	r1, [pc, #132]	; 16c74 <__assert_fail@plt+0x4528>
   16bec:	ldr	r3, [pc, #132]	; 16c78 <__assert_fail@plt+0x452c>
   16bf0:	add	r1, pc, r1
   16bf4:	push	{r4, r5, lr}
   16bf8:	mov	r5, r0
   16bfc:	ldr	r4, [r1, r3]
   16c00:	sub	sp, sp, #16
   16c04:	add	ip, sp, #32
   16c08:	ldr	r0, [r4]
   16c0c:	ldr	r2, [sp, #28]
   16c10:	str	r0, [sp, #12]
   16c14:	mov	r3, ip
   16c18:	add	r0, sp, #8
   16c1c:	mov	r1, #1
   16c20:	str	ip, [sp, #4]
   16c24:	bl	124a0 <__vasprintf_chk@plt>
   16c28:	subs	r2, r0, #0
   16c2c:	movlt	r5, #0
   16c30:	blt	16c4c <__assert_fail@plt+0x4500>
   16c34:	mov	r0, r5
   16c38:	ldr	r1, [sp, #8]
   16c3c:	bl	16b0c <__assert_fail@plt+0x43c0>
   16c40:	mov	r5, r0
   16c44:	ldr	r0, [sp, #8]
   16c48:	bl	12134 <free@plt>
   16c4c:	ldr	r2, [sp, #12]
   16c50:	ldr	r3, [r4]
   16c54:	mov	r0, r5
   16c58:	cmp	r2, r3
   16c5c:	bne	16c70 <__assert_fail@plt+0x4524>
   16c60:	add	sp, sp, #16
   16c64:	pop	{r4, r5, lr}
   16c68:	add	sp, sp, #12
   16c6c:	bx	lr
   16c70:	bl	12200 <__stack_chk_fail@plt>
   16c74:	muleq	r1, ip, r1
   16c78:	andeq	r0, r0, ip, asr r2
   16c7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c80:	mov	r6, r0
   16c84:	ldr	r0, [pc, #348]	; 16de8 <__assert_fail@plt+0x469c>
   16c88:	ldr	ip, [pc, #348]	; 16dec <__assert_fail@plt+0x46a0>
   16c8c:	add	r0, pc, r0
   16c90:	ldr	r5, [r6]
   16c94:	ldr	r8, [r0, ip]
   16c98:	sub	sp, sp, #8
   16c9c:	ldrsb	r4, [r5]
   16ca0:	mov	r9, r2
   16ca4:	ldr	r2, [r8]
   16ca8:	cmp	r4, #0
   16cac:	mov	r7, r1
   16cb0:	str	r2, [sp, #4]
   16cb4:	mov	r1, r0
   16cb8:	beq	16d68 <__assert_fail@plt+0x461c>
   16cbc:	mov	r0, r5
   16cc0:	mov	r1, r9
   16cc4:	mov	sl, r3
   16cc8:	bl	12740 <strspn@plt>
   16ccc:	add	r4, r5, r0
   16cd0:	ldrsb	r5, [r5, r0]
   16cd4:	cmp	r5, #0
   16cd8:	beq	16dd0 <__assert_fail@plt+0x4684>
   16cdc:	cmp	sl, #0
   16ce0:	beq	16d84 <__assert_fail@plt+0x4638>
   16ce4:	ldr	r0, [pc, #260]	; 16df0 <__assert_fail@plt+0x46a4>
   16ce8:	mov	r1, r5
   16cec:	add	r0, pc, r0
   16cf0:	bl	12434 <strchr@plt>
   16cf4:	cmp	r0, #0
   16cf8:	beq	16da0 <__assert_fail@plt+0x4654>
   16cfc:	add	sl, r4, #1
   16d00:	mov	r3, #0
   16d04:	mov	r0, sl
   16d08:	mov	r1, sp
   16d0c:	strb	r5, [sp]
   16d10:	strb	r3, [sp, #1]
   16d14:	bl	14f28 <__assert_fail@plt+0x27dc>
   16d18:	add	r3, r4, r0
   16d1c:	str	r0, [r7]
   16d20:	ldrsb	r3, [r3, #1]
   16d24:	subs	r5, r5, r3
   16d28:	movne	r5, #1
   16d2c:	cmp	r3, #0
   16d30:	moveq	r5, #1
   16d34:	cmp	r5, #0
   16d38:	bne	16dd0 <__assert_fail@plt+0x4684>
   16d3c:	add	r0, r0, #2
   16d40:	add	r5, r4, r0
   16d44:	ldrsb	r1, [r4, r0]
   16d48:	cmp	r1, #0
   16d4c:	beq	16d60 <__assert_fail@plt+0x4614>
   16d50:	mov	r0, r9
   16d54:	bl	12434 <strchr@plt>
   16d58:	cmp	r0, #0
   16d5c:	beq	16dd0 <__assert_fail@plt+0x4684>
   16d60:	mov	r4, sl
   16d64:	str	r5, [r6]
   16d68:	ldr	r2, [sp, #4]
   16d6c:	ldr	r3, [r8]
   16d70:	mov	r0, r4
   16d74:	cmp	r2, r3
   16d78:	bne	16de4 <__assert_fail@plt+0x4698>
   16d7c:	add	sp, sp, #8
   16d80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d84:	mov	r1, r9
   16d88:	mov	r0, r4
   16d8c:	bl	120ec <strcspn@plt>
   16d90:	add	r3, r4, r0
   16d94:	str	r0, [r7]
   16d98:	str	r3, [r6]
   16d9c:	b	16d68 <__assert_fail@plt+0x461c>
   16da0:	mov	r1, r9
   16da4:	mov	r0, r4
   16da8:	bl	14f28 <__assert_fail@plt+0x27dc>
   16dac:	str	r0, [r7]
   16db0:	ldrsb	r1, [r4, r0]
   16db4:	add	r5, r4, r0
   16db8:	cmp	r1, #0
   16dbc:	beq	16ddc <__assert_fail@plt+0x4690>
   16dc0:	mov	r0, r9
   16dc4:	bl	12434 <strchr@plt>
   16dc8:	cmp	r0, #0
   16dcc:	bne	16ddc <__assert_fail@plt+0x4690>
   16dd0:	str	r4, [r6]
   16dd4:	mov	r4, #0
   16dd8:	b	16d68 <__assert_fail@plt+0x461c>
   16ddc:	str	r5, [r6]
   16de0:	b	16d68 <__assert_fail@plt+0x461c>
   16de4:	bl	12200 <__stack_chk_fail@plt>
   16de8:	andeq	lr, r1, r0, lsl #2
   16dec:	andeq	r0, r0, ip, asr r2
   16df0:	andeq	ip, r0, r8, lsl #29
   16df4:	push	{r4, lr}
   16df8:	mov	r4, r0
   16dfc:	b	16e08 <__assert_fail@plt+0x46bc>
   16e00:	cmp	r0, #10
   16e04:	beq	16e20 <__assert_fail@plt+0x46d4>
   16e08:	mov	r0, r4
   16e0c:	bl	12530 <fgetc@plt>
   16e10:	cmn	r0, #1
   16e14:	bne	16e00 <__assert_fail@plt+0x46b4>
   16e18:	mov	r0, #1
   16e1c:	pop	{r4, pc}
   16e20:	mov	r0, #0
   16e24:	pop	{r4, pc}
   16e28:	ldr	r2, [r0]
   16e2c:	ldr	r3, [r1]
   16e30:	cmp	r2, r3
   16e34:	movge	r0, #0
   16e38:	movlt	r0, #1
   16e3c:	cmp	r2, r3
   16e40:	rsble	r0, r0, #0
   16e44:	rsbgt	r0, r0, #1
   16e48:	bx	lr
   16e4c:	push	{r1, r2, r3}
   16e50:	subs	r3, r0, #0
   16e54:	ldr	r1, [pc, #168]	; 16f04 <__assert_fail@plt+0x47b8>
   16e58:	ldr	r2, [pc, #168]	; 16f08 <__assert_fail@plt+0x47bc>
   16e5c:	add	r1, pc, r1
   16e60:	push	{r4, r5, r6, lr}
   16e64:	sub	sp, sp, #12
   16e68:	ldr	r5, [r1, r2]
   16e6c:	ldr	r6, [sp, #28]
   16e70:	ldr	r2, [r5]
   16e74:	str	r2, [sp, #4]
   16e78:	beq	16e90 <__assert_fail@plt+0x4744>
   16e7c:	ldr	r2, [pc, #136]	; 16f0c <__assert_fail@plt+0x47c0>
   16e80:	add	r2, pc, r2
   16e84:	ldr	r2, [r2]
   16e88:	tst	r2, #16777216	; 0x1000000
   16e8c:	beq	16ee0 <__assert_fail@plt+0x4794>
   16e90:	ldr	r3, [pc, #120]	; 16f10 <__assert_fail@plt+0x47c4>
   16e94:	ldr	r4, [r1, r3]
   16e98:	add	ip, sp, #32
   16e9c:	mov	r2, r6
   16ea0:	mov	r3, ip
   16ea4:	mov	r1, #1
   16ea8:	ldr	r0, [r4]
   16eac:	str	ip, [sp]
   16eb0:	bl	1238c <__vfprintf_chk@plt>
   16eb4:	ldr	r1, [r4]
   16eb8:	mov	r0, #10
   16ebc:	bl	12620 <fputc@plt>
   16ec0:	ldr	r2, [sp, #4]
   16ec4:	ldr	r3, [r5]
   16ec8:	cmp	r2, r3
   16ecc:	bne	16f00 <__assert_fail@plt+0x47b4>
   16ed0:	add	sp, sp, #12
   16ed4:	pop	{r4, r5, r6, lr}
   16ed8:	add	sp, sp, #12
   16edc:	bx	lr
   16ee0:	ldr	r0, [pc, #40]	; 16f10 <__assert_fail@plt+0x47c4>
   16ee4:	ldr	r2, [pc, #40]	; 16f14 <__assert_fail@plt+0x47c8>
   16ee8:	ldr	r4, [r1, r0]
   16eec:	add	r2, pc, r2
   16ef0:	mov	r1, #1
   16ef4:	ldr	r0, [r4]
   16ef8:	bl	12578 <__fprintf_chk@plt>
   16efc:	b	16e98 <__assert_fail@plt+0x474c>
   16f00:	bl	12200 <__stack_chk_fail@plt>
   16f04:	andeq	sp, r1, r0, lsr pc
   16f08:	andeq	r0, r0, ip, asr r2
   16f0c:	andeq	lr, r1, ip, lsl #7
   16f10:	andeq	r0, r0, r0, ror #4
   16f14:	andeq	ip, r0, ip, lsl #25
   16f18:	push	{r4, r5, r6, lr}
   16f1c:	subs	r3, r0, #0
   16f20:	ldr	r6, [pc, #328]	; 17070 <__assert_fail@plt+0x4924>
   16f24:	sub	sp, sp, #8
   16f28:	add	r6, pc, r6
   16f2c:	beq	16f60 <__assert_fail@plt+0x4814>
   16f30:	ldrsb	r2, [r3]
   16f34:	cmp	r2, #0
   16f38:	beq	16f60 <__assert_fail@plt+0x4814>
   16f3c:	ldr	r2, [r3, #140]	; 0x8c
   16f40:	tst	r2, #32
   16f44:	bne	16f60 <__assert_fail@plt+0x4814>
   16f48:	ldr	r5, [r3, #148]	; 0x94
   16f4c:	cmp	r5, #0
   16f50:	beq	16f70 <__assert_fail@plt+0x4824>
   16f54:	mov	r0, r5
   16f58:	add	sp, sp, #8
   16f5c:	pop	{r4, r5, r6, pc}
   16f60:	mov	r5, #0
   16f64:	mov	r0, r5
   16f68:	add	sp, sp, #8
   16f6c:	pop	{r4, r5, r6, pc}
   16f70:	mov	r4, r3
   16f74:	bl	20940 <__assert_fail@plt+0xe1f4>
   16f78:	orrs	r3, r0, r1
   16f7c:	beq	17008 <__assert_fail@plt+0x48bc>
   16f80:	mov	r3, r5
   16f84:	mov	r2, r5
   16f88:	bl	1f528 <__assert_fail@plt+0xcddc>
   16f8c:	cmp	r0, #0
   16f90:	mov	r5, r0
   16f94:	str	r0, [r4, #148]	; 0x94
   16f98:	bne	16f54 <__assert_fail@plt+0x4808>
   16f9c:	ldr	r3, [pc, #208]	; 17074 <__assert_fail@plt+0x4928>
   16fa0:	add	r3, pc, r3
   16fa4:	ldr	r3, [r3]
   16fa8:	tst	r3, #4
   16fac:	beq	16f54 <__assert_fail@plt+0x4808>
   16fb0:	ldr	r3, [pc, #192]	; 17078 <__assert_fail@plt+0x492c>
   16fb4:	ldr	r3, [r6, r3]
   16fb8:	ldr	r5, [r3]
   16fbc:	bl	123ec <getpid@plt>
   16fc0:	ldr	r2, [pc, #180]	; 1707c <__assert_fail@plt+0x4930>
   16fc4:	ldr	r3, [pc, #180]	; 17080 <__assert_fail@plt+0x4934>
   16fc8:	add	r2, pc, r2
   16fcc:	str	r2, [sp, #4]
   16fd0:	ldr	r2, [pc, #172]	; 17084 <__assert_fail@plt+0x4938>
   16fd4:	add	r3, pc, r3
   16fd8:	str	r3, [sp]
   16fdc:	add	r2, pc, r2
   16fe0:	mov	r1, #1
   16fe4:	mov	r3, r0
   16fe8:	mov	r0, r5
   16fec:	bl	12578 <__fprintf_chk@plt>
   16ff0:	ldr	r1, [pc, #144]	; 17088 <__assert_fail@plt+0x493c>
   16ff4:	mov	r0, r4
   16ff8:	add	r1, pc, r1
   16ffc:	bl	16e4c <__assert_fail@plt+0x4700>
   17000:	ldr	r5, [r4, #148]	; 0x94
   17004:	b	16f54 <__assert_fail@plt+0x4808>
   17008:	ldr	r3, [pc, #124]	; 1708c <__assert_fail@plt+0x4940>
   1700c:	add	r3, pc, r3
   17010:	ldr	r3, [r3]
   17014:	tst	r3, #4
   17018:	beq	16f60 <__assert_fail@plt+0x4814>
   1701c:	ldr	r3, [pc, #84]	; 17078 <__assert_fail@plt+0x492c>
   17020:	ldr	r3, [r6, r3]
   17024:	ldr	r6, [r3]
   17028:	bl	123ec <getpid@plt>
   1702c:	ldr	r2, [pc, #92]	; 17090 <__assert_fail@plt+0x4944>
   17030:	ldr	r3, [pc, #92]	; 17094 <__assert_fail@plt+0x4948>
   17034:	add	r2, pc, r2
   17038:	str	r2, [sp, #4]
   1703c:	ldr	r2, [pc, #84]	; 17098 <__assert_fail@plt+0x494c>
   17040:	add	r3, pc, r3
   17044:	str	r3, [sp]
   17048:	add	r2, pc, r2
   1704c:	mov	r1, #1
   17050:	mov	r3, r0
   17054:	mov	r0, r6
   17058:	bl	12578 <__fprintf_chk@plt>
   1705c:	ldr	r1, [pc, #56]	; 1709c <__assert_fail@plt+0x4950>
   17060:	mov	r0, r4
   17064:	add	r1, pc, r1
   17068:	bl	16e4c <__assert_fail@plt+0x4700>
   1706c:	b	16f54 <__assert_fail@plt+0x4808>
   17070:	andeq	sp, r1, r4, ror #28
   17074:	andeq	lr, r1, ip, ror #4
   17078:	andeq	r0, r0, r0, ror #4
   1707c:	andeq	ip, r0, r8, asr #23
   17080:	andeq	ip, r0, r0, asr #23
   17084:	andeq	ip, r0, r4, lsr #23
   17088:	andeq	ip, r0, r4, asr #23
   1708c:	andeq	lr, r1, r0, lsl #4
   17090:	andeq	ip, r0, ip, asr fp
   17094:	andeq	ip, r0, r4, asr fp
   17098:	andeq	ip, r0, r8, lsr fp
   1709c:	andeq	ip, r0, r8, lsr fp
   170a0:	push	{r0, r1, r2, r3}
   170a4:	ldr	r0, [pc, #108]	; 17118 <__assert_fail@plt+0x49cc>
   170a8:	ldr	r2, [pc, #108]	; 1711c <__assert_fail@plt+0x49d0>
   170ac:	add	r0, pc, r0
   170b0:	push	{r4, r5, lr}
   170b4:	sub	sp, sp, #12
   170b8:	ldr	r4, [r0, r2]
   170bc:	ldr	r1, [pc, #92]	; 17120 <__assert_fail@plt+0x49d4>
   170c0:	add	r3, sp, #28
   170c4:	ldr	ip, [r4]
   170c8:	str	r3, [sp]
   170cc:	str	ip, [sp, #4]
   170d0:	ldr	r5, [r0, r1]
   170d4:	ldr	r2, [pc, #72]	; 17124 <__assert_fail@plt+0x49d8>
   170d8:	mov	r1, #1
   170dc:	add	r2, pc, r2
   170e0:	ldr	r0, [r5]
   170e4:	bl	1238c <__vfprintf_chk@plt>
   170e8:	ldr	r1, [r5]
   170ec:	mov	r0, #10
   170f0:	bl	12620 <fputc@plt>
   170f4:	ldr	r2, [sp, #4]
   170f8:	ldr	r3, [r4]
   170fc:	cmp	r2, r3
   17100:	bne	17114 <__assert_fail@plt+0x49c8>
   17104:	add	sp, sp, #12
   17108:	pop	{r4, r5, lr}
   1710c:	add	sp, sp, #16
   17110:	bx	lr
   17114:	bl	12200 <__stack_chk_fail@plt>
   17118:	andeq	sp, r1, r0, ror #25
   1711c:	andeq	r0, r0, ip, asr r2
   17120:	andeq	r0, r0, r0, ror #4
   17124:	strdeq	ip, [r0], -r4
   17128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1712c:	mov	r4, r0
   17130:	ldr	lr, [pc, #656]	; 173c8 <__assert_fail@plt+0x4c7c>
   17134:	ldr	ip, [pc, #656]	; 173cc <__assert_fail@plt+0x4c80>
   17138:	add	lr, pc, lr
   1713c:	ldr	r3, [pc, #652]	; 173d0 <__assert_fail@plt+0x4c84>
   17140:	ldr	ip, [lr, ip]
   17144:	add	r3, pc, r3
   17148:	sub	sp, sp, #44	; 0x2c
   1714c:	ldr	r0, [r3]
   17150:	ldr	r3, [ip]
   17154:	tst	r0, #8
   17158:	str	ip, [sp, #20]
   1715c:	mov	sl, r1
   17160:	mov	r7, r2
   17164:	str	r3, [sp, #36]	; 0x24
   17168:	bne	1734c <__assert_fail@plt+0x4c00>
   1716c:	mov	r0, r4
   17170:	bl	12314 <opendir@plt>
   17174:	subs	r5, r0, #0
   17178:	moveq	r0, r5
   1717c:	beq	172a8 <__assert_fail@plt+0x4b5c>
   17180:	ldr	r0, [sl]
   17184:	bl	12134 <free@plt>
   17188:	ldr	r6, [pc, #580]	; 173d4 <__assert_fail@plt+0x4c88>
   1718c:	mov	r3, #0
   17190:	ldr	r9, [pc, #576]	; 173d8 <__assert_fail@plt+0x4c8c>
   17194:	mov	r8, r3
   17198:	str	r3, [sp, #12]
   1719c:	str	r3, [sl]
   171a0:	ldr	r3, [pc, #564]	; 173dc <__assert_fail@plt+0x4c90>
   171a4:	add	r6, pc, r6
   171a8:	add	r9, pc, r9
   171ac:	add	r3, pc, r3
   171b0:	str	r3, [sp, #16]
   171b4:	mov	r0, r5
   171b8:	bl	12644 <readdir64@plt>
   171bc:	cmp	r0, #0
   171c0:	beq	17274 <__assert_fail@plt+0x4b28>
   171c4:	ldrb	r2, [r0, #18]
   171c8:	sub	r3, r2, #6
   171cc:	tst	r3, #251	; 0xfb
   171d0:	movne	r3, #1
   171d4:	moveq	r3, #0
   171d8:	cmp	r2, #0
   171dc:	moveq	r3, #0
   171e0:	cmp	r3, #0
   171e4:	bne	171b4 <__assert_fail@plt+0x4a68>
   171e8:	add	r4, r0, #19
   171ec:	mov	r0, r4
   171f0:	mov	r1, r6
   171f4:	bl	120c8 <strcmp@plt>
   171f8:	cmp	r0, #0
   171fc:	beq	171b4 <__assert_fail@plt+0x4a68>
   17200:	mov	r1, r9
   17204:	mov	r0, r4
   17208:	bl	120c8 <strcmp@plt>
   1720c:	cmp	r0, #0
   17210:	beq	171b4 <__assert_fail@plt+0x4a68>
   17214:	cmp	r7, #0
   17218:	beq	172c4 <__assert_fail@plt+0x4b78>
   1721c:	mov	r0, r4
   17220:	add	r2, sp, #28
   17224:	ldr	r1, [sp, #16]
   17228:	bl	1262c <sscanf@plt>
   1722c:	cmp	r0, #1
   17230:	bne	171b4 <__assert_fail@plt+0x4a68>
   17234:	ldr	r0, [sp, #28]
   17238:	cmp	r0, #7
   1723c:	bls	171b4 <__assert_fail@plt+0x4a68>
   17240:	ldr	r3, [sp, #12]
   17244:	add	r4, r8, #1
   17248:	cmp	r4, r3
   1724c:	ldr	r3, [sl]
   17250:	bhi	17318 <__assert_fail@plt+0x4bcc>
   17254:	cmp	r3, #0
   17258:	beq	171b4 <__assert_fail@plt+0x4a68>
   1725c:	str	r0, [r3, r8, lsl #2]
   17260:	mov	r8, r4
   17264:	mov	r0, r5
   17268:	bl	12644 <readdir64@plt>
   1726c:	cmp	r0, #0
   17270:	bne	171c4 <__assert_fail@plt+0x4a78>
   17274:	cmp	r8, #0
   17278:	beq	1729c <__assert_fail@plt+0x4b50>
   1727c:	ldr	r0, [sl]
   17280:	cmp	r0, #0
   17284:	beq	1729c <__assert_fail@plt+0x4b50>
   17288:	ldr	r3, [pc, #336]	; 173e0 <__assert_fail@plt+0x4c94>
   1728c:	mov	r2, #4
   17290:	add	r3, pc, r3
   17294:	mov	r1, r8
   17298:	bl	12698 <qsort@plt>
   1729c:	mov	r0, r5
   172a0:	bl	1271c <closedir@plt>
   172a4:	mov	r0, r8
   172a8:	ldr	r3, [sp, #20]
   172ac:	ldr	r2, [sp, #36]	; 0x24
   172b0:	ldr	r3, [r3]
   172b4:	cmp	r2, r3
   172b8:	bne	173c4 <__assert_fail@plt+0x4c78>
   172bc:	add	sp, sp, #44	; 0x2c
   172c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172c4:	str	r7, [sp, #32]
   172c8:	bl	1247c <__errno_location@plt>
   172cc:	mov	r2, #10
   172d0:	add	r1, sp, #32
   172d4:	str	r7, [r0]
   172d8:	mov	fp, r0
   172dc:	mov	r0, r4
   172e0:	bl	120e0 <strtol@plt>
   172e4:	ldr	r3, [sp, #32]
   172e8:	cmp	r4, r3
   172ec:	str	r0, [sp, #28]
   172f0:	beq	171b4 <__assert_fail@plt+0x4a68>
   172f4:	cmp	r3, #0
   172f8:	beq	17308 <__assert_fail@plt+0x4bbc>
   172fc:	ldrsb	r3, [r3]
   17300:	cmp	r3, #0
   17304:	bne	171b4 <__assert_fail@plt+0x4a68>
   17308:	ldr	r3, [fp]
   1730c:	cmp	r3, #0
   17310:	beq	17238 <__assert_fail@plt+0x4aec>
   17314:	b	171b4 <__assert_fail@plt+0x4a68>
   17318:	ldr	r2, [sp, #12]
   1731c:	mov	r0, r3
   17320:	add	r2, r2, #1
   17324:	str	r2, [sp, #12]
   17328:	lsl	r1, r2, #2
   1732c:	bl	1220c <realloc@plt>
   17330:	subs	r3, r0, #0
   17334:	beq	173a0 <__assert_fail@plt+0x4c54>
   17338:	ldr	r0, [sp, #28]
   1733c:	str	r3, [sl]
   17340:	str	r0, [r3, r8, lsl #2]
   17344:	mov	r8, r4
   17348:	b	17264 <__assert_fail@plt+0x4b18>
   1734c:	ldr	r3, [pc, #144]	; 173e4 <__assert_fail@plt+0x4c98>
   17350:	ldr	r3, [lr, r3]
   17354:	ldr	r5, [r3]
   17358:	bl	123ec <getpid@plt>
   1735c:	ldr	r2, [pc, #132]	; 173e8 <__assert_fail@plt+0x4c9c>
   17360:	ldr	r3, [pc, #132]	; 173ec <__assert_fail@plt+0x4ca0>
   17364:	add	r2, pc, r2
   17368:	str	r2, [sp, #4]
   1736c:	ldr	r2, [pc, #124]	; 173f0 <__assert_fail@plt+0x4ca4>
   17370:	add	r3, pc, r3
   17374:	str	r3, [sp]
   17378:	add	r2, pc, r2
   1737c:	mov	r1, #1
   17380:	mov	r3, r0
   17384:	mov	r0, r5
   17388:	bl	12578 <__fprintf_chk@plt>
   1738c:	ldr	r0, [pc, #96]	; 173f4 <__assert_fail@plt+0x4ca8>
   17390:	mov	r1, r4
   17394:	add	r0, pc, r0
   17398:	bl	170a0 <__assert_fail@plt+0x4954>
   1739c:	b	1716c <__assert_fail@plt+0x4a20>
   173a0:	ldr	r0, [sl]
   173a4:	str	r3, [sp, #12]
   173a8:	bl	12134 <free@plt>
   173ac:	ldr	r3, [sp, #12]
   173b0:	mov	r0, r5
   173b4:	str	r3, [sl]
   173b8:	bl	1271c <closedir@plt>
   173bc:	mvn	r0, #0
   173c0:	b	172a8 <__assert_fail@plt+0x4b5c>
   173c4:	bl	12200 <__stack_chk_fail@plt>
   173c8:	andeq	sp, r1, r4, asr ip
   173cc:	andeq	r0, r0, ip, asr r2
   173d0:	andeq	lr, r1, r8, asr #1
   173d4:	andeq	fp, r0, ip, lsl sp
   173d8:	andeq	fp, r0, ip, lsl sp
   173dc:	andeq	ip, r0, ip, lsr sl
   173e0:			; <UNDEFINED> instruction: 0xfffffb90
   173e4:	andeq	r0, r0, r0, ror #4
   173e8:	andeq	ip, r0, ip, ror r8
   173ec:	andeq	ip, r0, r4, lsr #16
   173f0:	andeq	ip, r0, r8, lsl #16
   173f4:	andeq	ip, r0, ip, lsr r8
   173f8:	push	{r4, r5, r6, r7, r8, lr}
   173fc:	subs	r4, r0, #0
   17400:	ldr	r8, [pc, #456]	; 175d0 <__assert_fail@plt+0x4e84>
   17404:	sub	sp, sp, #16
   17408:	add	r8, pc, r8
   1740c:	beq	175c8 <__assert_fail@plt+0x4e7c>
   17410:	ldr	r0, [r4, #132]	; 0x84
   17414:	mov	r6, r1
   17418:	cmp	r0, #0
   1741c:	bge	1753c <__assert_fail@plt+0x4df0>
   17420:	ldrb	r3, [r4, #144]	; 0x90
   17424:	mov	r0, r4
   17428:	mov	r7, #0
   1742c:	bic	r3, r3, #5
   17430:	mvn	r5, #0
   17434:	strb	r3, [r4, #144]	; 0x90
   17438:	str	r5, [r4, #132]	; 0x84
   1743c:	str	r7, [r4, #136]	; 0x88
   17440:	mov	r1, r7
   17444:	strb	r7, [r0], #152	; 0x98
   17448:	mov	r2, #232	; 0xe8
   1744c:	bl	124dc <memset@plt>
   17450:	cmp	r6, r7
   17454:	beq	17518 <__assert_fail@plt+0x4dcc>
   17458:	ldrsb	r3, [r6]
   1745c:	cmp	r3, #47	; 0x2f
   17460:	beq	175a8 <__assert_fail@plt+0x4e5c>
   17464:	ldr	r3, [r4, #140]	; 0x8c
   17468:	tst	r3, #128	; 0x80
   1746c:	beq	17530 <__assert_fail@plt+0x4de4>
   17470:	mov	r0, r6
   17474:	bl	12428 <strlen@plt>
   17478:	cmp	r0, #4
   1747c:	bls	175c0 <__assert_fail@plt+0x4e74>
   17480:	ldr	r1, [pc, #332]	; 175d4 <__assert_fail@plt+0x4e88>
   17484:	add	r6, r6, #4
   17488:	add	r1, pc, r1
   1748c:	ldr	r2, [pc, #324]	; 175d8 <__assert_fail@plt+0x4e8c>
   17490:	mov	r3, #128	; 0x80
   17494:	add	r2, pc, r2
   17498:	stmib	sp, {r1, r6}
   1749c:	str	r2, [sp]
   174a0:	mov	r1, r3
   174a4:	mov	r2, #1
   174a8:	mov	r0, r4
   174ac:	bl	12728 <__snprintf_chk@plt>
   174b0:	ldr	r3, [pc, #292]	; 175dc <__assert_fail@plt+0x4e90>
   174b4:	add	r3, pc, r3
   174b8:	ldr	r3, [r3]
   174bc:	tst	r3, #4
   174c0:	beq	17518 <__assert_fail@plt+0x4dcc>
   174c4:	ldr	r3, [pc, #276]	; 175e0 <__assert_fail@plt+0x4e94>
   174c8:	ldr	r3, [r8, r3]
   174cc:	ldr	r5, [r3]
   174d0:	bl	123ec <getpid@plt>
   174d4:	ldr	r2, [pc, #264]	; 175e4 <__assert_fail@plt+0x4e98>
   174d8:	ldr	r3, [pc, #264]	; 175e8 <__assert_fail@plt+0x4e9c>
   174dc:	add	r2, pc, r2
   174e0:	str	r2, [sp, #4]
   174e4:	ldr	r2, [pc, #256]	; 175ec <__assert_fail@plt+0x4ea0>
   174e8:	add	r3, pc, r3
   174ec:	str	r3, [sp]
   174f0:	add	r2, pc, r2
   174f4:	mov	r1, #1
   174f8:	mov	r3, r0
   174fc:	mov	r0, r5
   17500:	bl	12578 <__fprintf_chk@plt>
   17504:	ldr	r1, [pc, #228]	; 175f0 <__assert_fail@plt+0x4ea4>
   17508:	mov	r2, r6
   1750c:	add	r1, pc, r1
   17510:	mov	r0, r4
   17514:	bl	16e4c <__assert_fail@plt+0x4700>
   17518:	ldr	r0, [r4, #148]	; 0x94
   1751c:	bl	1c670 <__assert_fail@plt+0x9f24>
   17520:	mov	r0, #0
   17524:	str	r0, [r4, #148]	; 0x94
   17528:	add	sp, sp, #16
   1752c:	pop	{r4, r5, r6, r7, r8, pc}
   17530:	ldr	r1, [pc, #188]	; 175f4 <__assert_fail@plt+0x4ea8>
   17534:	add	r1, pc, r1
   17538:	b	1748c <__assert_fail@plt+0x4d40>
   1753c:	bl	12704 <close@plt>
   17540:	ldr	r3, [pc, #176]	; 175f8 <__assert_fail@plt+0x4eac>
   17544:	add	r3, pc, r3
   17548:	ldr	r3, [r3]
   1754c:	tst	r3, #4
   17550:	beq	17420 <__assert_fail@plt+0x4cd4>
   17554:	ldr	r3, [pc, #132]	; 175e0 <__assert_fail@plt+0x4e94>
   17558:	ldr	r3, [r8, r3]
   1755c:	ldr	r5, [r3]
   17560:	bl	123ec <getpid@plt>
   17564:	ldr	r2, [pc, #144]	; 175fc <__assert_fail@plt+0x4eb0>
   17568:	ldr	r3, [pc, #144]	; 17600 <__assert_fail@plt+0x4eb4>
   1756c:	add	r2, pc, r2
   17570:	str	r2, [sp, #4]
   17574:	ldr	r2, [pc, #136]	; 17604 <__assert_fail@plt+0x4eb8>
   17578:	add	r3, pc, r3
   1757c:	str	r3, [sp]
   17580:	add	r2, pc, r2
   17584:	mov	r1, #1
   17588:	mov	r3, r0
   1758c:	mov	r0, r5
   17590:	bl	12578 <__fprintf_chk@plt>
   17594:	ldr	r1, [pc, #108]	; 17608 <__assert_fail@plt+0x4ebc>
   17598:	mov	r0, r4
   1759c:	add	r1, pc, r1
   175a0:	bl	16e4c <__assert_fail@plt+0x4700>
   175a4:	b	17420 <__assert_fail@plt+0x4cd4>
   175a8:	mov	r2, #128	; 0x80
   175ac:	mov	r1, r6
   175b0:	mov	r0, r4
   175b4:	bl	124e8 <strncpy@plt>
   175b8:	strb	r7, [r4, #127]	; 0x7f
   175bc:	b	174b0 <__assert_fail@plt+0x4d64>
   175c0:	mov	r0, r5
   175c4:	b	17528 <__assert_fail@plt+0x4ddc>
   175c8:	mvn	r0, #21
   175cc:	b	17528 <__assert_fail@plt+0x4ddc>
   175d0:	andeq	sp, r1, r4, lsl #19
   175d4:	andeq	ip, r0, r8, ror #14
   175d8:	andeq	ip, r0, r4, lsl #15
   175dc:	andeq	sp, r1, r8, asr sp
   175e0:	andeq	r0, r0, r0, ror #4
   175e4:			; <UNDEFINED> instruction: 0x0000c6b4
   175e8:	andeq	ip, r0, ip, lsr #13
   175ec:	muleq	r0, r0, r6
   175f0:	andeq	ip, r0, r4, lsl r7
   175f4:	andeq	ip, r0, r8, asr #13
   175f8:	andeq	sp, r1, r8, asr #25
   175fc:	andeq	ip, r0, r4, lsr #12
   17600:	andeq	ip, r0, ip, lsl r6
   17604:	andeq	ip, r0, r0, lsl #12
   17608:	andeq	ip, r0, r8, ror #12
   1760c:	cmp	r0, #0
   17610:	bxeq	lr
   17614:	ldrsb	r0, [r0]
   17618:	adds	r0, r0, #0
   1761c:	movne	r0, #1
   17620:	bx	lr
   17624:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17628:	sub	sp, sp, #544	; 0x220
   1762c:	ldr	r5, [pc, #972]	; 17a00 <__assert_fail@plt+0x52b4>
   17630:	ldr	r3, [pc, #972]	; 17a04 <__assert_fail@plt+0x52b8>
   17634:	add	r5, pc, r5
   17638:	add	r8, sp, #112	; 0x70
   1763c:	ldr	r6, [r5, r3]
   17640:	mov	r4, r0
   17644:	mov	sl, r1
   17648:	ldr	r3, [r6]
   1764c:	mov	r0, r8
   17650:	mov	r2, #424	; 0x1a8
   17654:	mov	r1, #0
   17658:	str	r3, [sp, #540]	; 0x21c
   1765c:	bl	124dc <memset@plt>
   17660:	mvn	r3, #0
   17664:	cmp	r4, #0
   17668:	str	r3, [sp, #244]	; 0xf4
   1766c:	beq	179f4 <__assert_fail@plt+0x52a8>
   17670:	ldr	r9, [pc, #912]	; 17a08 <__assert_fail@plt+0x52bc>
   17674:	add	r9, pc, r9
   17678:	ldr	r7, [r9]
   1767c:	cmp	r7, #0
   17680:	andne	r7, r7, #4
   17684:	beq	17724 <__assert_fail@plt+0x4fd8>
   17688:	cmp	r7, #0
   1768c:	beq	176e0 <__assert_fail@plt+0x4f94>
   17690:	ldr	r3, [pc, #884]	; 17a0c <__assert_fail@plt+0x52c0>
   17694:	ldr	r3, [r5, r3]
   17698:	ldr	r7, [r3]
   1769c:	bl	123ec <getpid@plt>
   176a0:	ldr	r2, [pc, #872]	; 17a10 <__assert_fail@plt+0x52c4>
   176a4:	ldr	r3, [pc, #872]	; 17a14 <__assert_fail@plt+0x52c8>
   176a8:	add	r2, pc, r2
   176ac:	str	r2, [sp, #4]
   176b0:	ldr	r2, [pc, #864]	; 17a18 <__assert_fail@plt+0x52cc>
   176b4:	add	r3, pc, r3
   176b8:	str	r3, [sp]
   176bc:	mov	r1, #1
   176c0:	add	r2, pc, r2
   176c4:	mov	r3, r0
   176c8:	mov	r0, r7
   176cc:	bl	12578 <__fprintf_chk@plt>
   176d0:	ldr	r1, [pc, #836]	; 17a1c <__assert_fail@plt+0x52d0>
   176d4:	mov	r0, r4
   176d8:	add	r1, pc, r1
   176dc:	bl	16e4c <__assert_fail@plt+0x4700>
   176e0:	mov	r1, r8
   176e4:	mov	r2, #424	; 0x1a8
   176e8:	mov	r0, r4
   176ec:	bl	121ac <memcpy@plt>
   176f0:	str	sl, [r4, #140]	; 0x8c
   176f4:	mov	r1, #0
   176f8:	mov	r0, r4
   176fc:	bl	173f8 <__assert_fail@plt+0x4cac>
   17700:	subs	r7, r0, #0
   17704:	beq	177a0 <__assert_fail@plt+0x5054>
   17708:	ldr	r2, [sp, #540]	; 0x21c
   1770c:	ldr	r3, [r6]
   17710:	mov	r0, r7
   17714:	cmp	r2, r3
   17718:	bne	179fc <__assert_fail@plt+0x52b0>
   1771c:	add	sp, sp, #544	; 0x220
   17720:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17724:	ldr	r0, [pc, #756]	; 17a20 <__assert_fail@plt+0x52d4>
   17728:	add	r0, pc, r0
   1772c:	bl	12338 <getenv@plt>
   17730:	cmp	r0, #0
   17734:	moveq	r3, #2
   17738:	streq	r3, [r9]
   1773c:	beq	176e0 <__assert_fail@plt+0x4f94>
   17740:	mov	r2, r7
   17744:	add	r1, sp, #8
   17748:	bl	1241c <strtoul@plt>
   1774c:	mov	r7, r0
   17750:	ldr	r0, [sp, #8]
   17754:	cmp	r0, #0
   17758:	beq	17778 <__assert_fail@plt+0x502c>
   1775c:	ldr	r1, [pc, #704]	; 17a24 <__assert_fail@plt+0x52d8>
   17760:	add	r1, pc, r1
   17764:	bl	120c8 <strcmp@plt>
   17768:	cmp	r0, #0
   1776c:	ldreq	r7, [pc, #692]	; 17a28 <__assert_fail@plt+0x52dc>
   17770:	streq	r7, [r9]
   17774:	beq	17974 <__assert_fail@plt+0x5228>
   17778:	ldr	r3, [pc, #684]	; 17a2c <__assert_fail@plt+0x52e0>
   1777c:	cmp	r7, #0
   17780:	add	r3, pc, r3
   17784:	str	r7, [r3]
   17788:	moveq	r3, #2
   1778c:	bne	17974 <__assert_fail@plt+0x5228>
   17790:	ldr	r2, [pc, #664]	; 17a30 <__assert_fail@plt+0x52e4>
   17794:	add	r2, pc, r2
   17798:	str	r3, [r2]
   1779c:	b	17688 <__assert_fail@plt+0x4f3c>
   177a0:	ldr	r1, [pc, #652]	; 17a34 <__assert_fail@plt+0x52e8>
   177a4:	add	r8, sp, #8
   177a8:	mov	r2, r8
   177ac:	add	r1, pc, r1
   177b0:	mov	r0, #3
   177b4:	bl	126c8 <__xstat64@plt>
   177b8:	cmp	r0, #0
   177bc:	bne	177d0 <__assert_fail@plt+0x5084>
   177c0:	ldr	r3, [sp, #24]
   177c4:	and	r3, r3, #61440	; 0xf000
   177c8:	cmp	r3, #16384	; 0x4000
   177cc:	beq	178e0 <__assert_fail@plt+0x5194>
   177d0:	ldr	r2, [pc, #608]	; 17a38 <__assert_fail@plt+0x52ec>
   177d4:	ldr	r3, [r4, #140]	; 0x8c
   177d8:	add	r2, pc, r2
   177dc:	bic	r3, r3, #64	; 0x40
   177e0:	ldr	r2, [r2]
   177e4:	orr	r3, r3, #32
   177e8:	tst	r2, #4
   177ec:	str	r3, [r4, #140]	; 0x8c
   177f0:	bne	17890 <__assert_fail@plt+0x5144>
   177f4:	tst	r3, #256	; 0x100
   177f8:	bne	17708 <__assert_fail@plt+0x4fbc>
   177fc:	ldr	r1, [pc, #568]	; 17a3c <__assert_fail@plt+0x52f0>
   17800:	mov	r2, r8
   17804:	add	r1, pc, r1
   17808:	mov	r0, #3
   1780c:	bl	126c8 <__xstat64@plt>
   17810:	cmp	r0, #0
   17814:	bne	17708 <__assert_fail@plt+0x4fbc>
   17818:	ldr	r2, [pc, #544]	; 17a40 <__assert_fail@plt+0x52f4>
   1781c:	ldr	r3, [r4, #140]	; 0x8c
   17820:	add	r2, pc, r2
   17824:	orr	r3, r3, #256	; 0x100
   17828:	ldr	r2, [r2]
   1782c:	str	r3, [r4, #140]	; 0x8c
   17830:	tst	r2, #4
   17834:	beq	17708 <__assert_fail@plt+0x4fbc>
   17838:	ldr	r3, [pc, #460]	; 17a0c <__assert_fail@plt+0x52c0>
   1783c:	mov	r7, r0
   17840:	ldr	r3, [r5, r3]
   17844:	ldr	r5, [r3]
   17848:	bl	123ec <getpid@plt>
   1784c:	ldr	r2, [pc, #496]	; 17a44 <__assert_fail@plt+0x52f8>
   17850:	ldr	r3, [pc, #496]	; 17a48 <__assert_fail@plt+0x52fc>
   17854:	add	r2, pc, r2
   17858:	str	r2, [sp, #4]
   1785c:	ldr	r2, [pc, #488]	; 17a4c <__assert_fail@plt+0x5300>
   17860:	add	r3, pc, r3
   17864:	str	r3, [sp]
   17868:	add	r2, pc, r2
   1786c:	mov	r1, #1
   17870:	mov	r3, r0
   17874:	mov	r0, r5
   17878:	bl	12578 <__fprintf_chk@plt>
   1787c:	ldr	r1, [pc, #460]	; 17a50 <__assert_fail@plt+0x5304>
   17880:	mov	r0, r4
   17884:	add	r1, pc, r1
   17888:	bl	16e4c <__assert_fail@plt+0x4700>
   1788c:	b	17708 <__assert_fail@plt+0x4fbc>
   17890:	ldr	r3, [pc, #372]	; 17a0c <__assert_fail@plt+0x52c0>
   17894:	ldr	r3, [r5, r3]
   17898:	ldr	r9, [r3]
   1789c:	bl	123ec <getpid@plt>
   178a0:	ldr	r2, [pc, #428]	; 17a54 <__assert_fail@plt+0x5308>
   178a4:	ldr	r3, [pc, #428]	; 17a58 <__assert_fail@plt+0x530c>
   178a8:	add	r2, pc, r2
   178ac:	str	r2, [sp, #4]
   178b0:	ldr	r2, [pc, #420]	; 17a5c <__assert_fail@plt+0x5310>
   178b4:	add	r3, pc, r3
   178b8:	str	r3, [sp]
   178bc:	mov	r1, #1
   178c0:	add	r2, pc, r2
   178c4:	mov	r3, r0
   178c8:	mov	r0, r9
   178cc:	bl	12578 <__fprintf_chk@plt>
   178d0:	ldr	r1, [pc, #392]	; 17a60 <__assert_fail@plt+0x5314>
   178d4:	mov	r0, r4
   178d8:	add	r1, pc, r1
   178dc:	bl	16e4c <__assert_fail@plt+0x4700>
   178e0:	ldr	r3, [r4, #140]	; 0x8c
   178e4:	tst	r3, #32
   178e8:	bne	177f4 <__assert_fail@plt+0x50a8>
   178ec:	bl	21f5c <__assert_fail@plt+0xf810>
   178f0:	ldr	r3, [pc, #364]	; 17a64 <__assert_fail@plt+0x5318>
   178f4:	cmp	r0, r3
   178f8:	ble	1796c <__assert_fail@plt+0x5220>
   178fc:	ldr	r2, [pc, #356]	; 17a68 <__assert_fail@plt+0x531c>
   17900:	ldr	r3, [r4, #140]	; 0x8c
   17904:	add	r2, pc, r2
   17908:	orr	r3, r3, #64	; 0x40
   1790c:	ldr	r2, [r2]
   17910:	str	r3, [r4, #140]	; 0x8c
   17914:	tst	r2, #4
   17918:	beq	177f4 <__assert_fail@plt+0x50a8>
   1791c:	ldr	r3, [pc, #232]	; 17a0c <__assert_fail@plt+0x52c0>
   17920:	ldr	r3, [r5, r3]
   17924:	ldr	r9, [r3]
   17928:	bl	123ec <getpid@plt>
   1792c:	ldr	r2, [pc, #312]	; 17a6c <__assert_fail@plt+0x5320>
   17930:	ldr	r3, [pc, #312]	; 17a70 <__assert_fail@plt+0x5324>
   17934:	add	r2, pc, r2
   17938:	str	r2, [sp, #4]
   1793c:	ldr	r2, [pc, #304]	; 17a74 <__assert_fail@plt+0x5328>
   17940:	add	r3, pc, r3
   17944:	str	r3, [sp]
   17948:	mov	r1, #1
   1794c:	add	r2, pc, r2
   17950:	mov	r3, r0
   17954:	mov	r0, r9
   17958:	bl	12578 <__fprintf_chk@plt>
   1795c:	ldr	r1, [pc, #276]	; 17a78 <__assert_fail@plt+0x532c>
   17960:	mov	r0, r4
   17964:	add	r1, pc, r1
   17968:	bl	16e4c <__assert_fail@plt+0x4700>
   1796c:	ldr	r3, [r4, #140]	; 0x8c
   17970:	b	177f4 <__assert_fail@plt+0x50a8>
   17974:	bl	1211c <getuid@plt>
   17978:	mov	r9, r0
   1797c:	bl	12248 <geteuid@plt>
   17980:	cmp	r9, r0
   17984:	beq	179dc <__assert_fail@plt+0x5290>
   17988:	ldr	r9, [pc, #236]	; 17a7c <__assert_fail@plt+0x5330>
   1798c:	ldr	r3, [pc, #120]	; 17a0c <__assert_fail@plt+0x52c0>
   17990:	add	r9, pc, r9
   17994:	orr	r7, r7, #16777216	; 0x1000000
   17998:	str	r7, [r9]
   1799c:	ldr	r3, [r5, r3]
   179a0:	ldr	r7, [r3]
   179a4:	bl	123ec <getpid@plt>
   179a8:	ldr	r3, [pc, #208]	; 17a80 <__assert_fail@plt+0x5334>
   179ac:	ldr	r2, [pc, #208]	; 17a84 <__assert_fail@plt+0x5338>
   179b0:	add	r3, pc, r3
   179b4:	str	r3, [sp]
   179b8:	add	r2, pc, r2
   179bc:	mov	r1, #1
   179c0:	mov	r3, r0
   179c4:	mov	r0, r7
   179c8:	bl	12578 <__fprintf_chk@plt>
   179cc:	ldr	r7, [r9]
   179d0:	orr	r3, r7, #2
   179d4:	and	r7, r7, #4
   179d8:	b	17790 <__assert_fail@plt+0x5044>
   179dc:	bl	124c4 <getgid@plt>
   179e0:	mov	r9, r0
   179e4:	bl	12290 <getegid@plt>
   179e8:	cmp	r9, r0
   179ec:	bne	17988 <__assert_fail@plt+0x523c>
   179f0:	b	179d0 <__assert_fail@plt+0x5284>
   179f4:	mvn	r7, #21
   179f8:	b	17708 <__assert_fail@plt+0x4fbc>
   179fc:	bl	12200 <__stack_chk_fail@plt>
   17a00:	andeq	sp, r1, r8, asr r7
   17a04:	andeq	r0, r0, ip, asr r2
   17a08:	muleq	r1, r8, fp
   17a0c:	andeq	r0, r0, r0, ror #4
   17a10:	andeq	ip, r0, r8, ror #9
   17a14:	andeq	ip, r0, r0, ror #9
   17a18:	andeq	ip, r0, r0, asr #9
   17a1c:	andeq	ip, r0, ip, lsr #11
   17a20:	andeq	ip, r0, ip, lsl #10
   17a24:	andeq	ip, r0, r4, ror #9
   17a28:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   17a2c:	andeq	sp, r1, ip, lsl #21
   17a30:	andeq	sp, r1, r8, ror sl
   17a34:	andeq	ip, r0, ip, ror #9
   17a38:	andeq	sp, r1, r4, lsr sl
   17a3c:	ldrdeq	ip, [r0], -r0
   17a40:	andeq	sp, r1, ip, ror #19
   17a44:	andeq	ip, r0, ip, lsr r3
   17a48:	andeq	ip, r0, r4, lsr r3
   17a4c:	andeq	ip, r0, r8, lsl r3
   17a50:	andeq	ip, r0, r4, ror #8
   17a54:	andeq	ip, r0, r8, ror #5
   17a58:	andeq	ip, r0, r0, ror #5
   17a5c:	andeq	ip, r0, r0, asr #5
   17a60:	andeq	ip, r0, ip, asr #7
   17a64:	andeq	r0, r2, r4, lsr #12
   17a68:	andeq	sp, r1, r8, lsl #18
   17a6c:	andeq	ip, r0, ip, asr r2
   17a70:	andeq	ip, r0, r4, asr r2
   17a74:	andeq	ip, r0, r4, lsr r2
   17a78:	andeq	ip, r0, ip, asr r3
   17a7c:	andeq	sp, r1, ip, ror r8
   17a80:	andeq	ip, r0, r4, ror #3
   17a84:	muleq	r0, r0, r2
   17a88:	subs	r3, r0, #0
   17a8c:	beq	17aa0 <__assert_fail@plt+0x5354>
   17a90:	ldrsb	r3, [r3]
   17a94:	cmp	r3, #0
   17a98:	beq	17aa0 <__assert_fail@plt+0x5354>
   17a9c:	b	121f4 <strdup@plt>
   17aa0:	mov	r0, #0
   17aa4:	bx	lr
   17aa8:	cmp	r0, #0
   17aac:	bxeq	lr
   17ab0:	ldrsb	r3, [r0]
   17ab4:	cmp	r3, #0
   17ab8:	moveq	r0, #0
   17abc:	bx	lr
   17ac0:	push	{r4, r5, lr}
   17ac4:	subs	r2, r0, #0
   17ac8:	ldr	r5, [pc, #236]	; 17bbc <__assert_fail@plt+0x5470>
   17acc:	sub	sp, sp, #12
   17ad0:	add	r5, pc, r5
   17ad4:	beq	17bb4 <__assert_fail@plt+0x5468>
   17ad8:	ldrsb	r3, [r2]
   17adc:	cmp	r3, #0
   17ae0:	beq	17bb4 <__assert_fail@plt+0x5468>
   17ae4:	ldr	r3, [r2, #132]	; 0x84
   17ae8:	cmp	r3, #0
   17aec:	blt	17afc <__assert_fail@plt+0x53b0>
   17af0:	mov	r0, r3
   17af4:	add	sp, sp, #12
   17af8:	pop	{r4, r5, pc}
   17afc:	ldr	r1, [r2, #140]	; 0x8c
   17b00:	mov	r4, r2
   17b04:	and	r1, r1, #2
   17b08:	str	r1, [r2, #136]	; 0x88
   17b0c:	orr	r1, r1, #524288	; 0x80000
   17b10:	bl	12470 <__open64_2@plt>
   17b14:	ldr	r2, [pc, #164]	; 17bc0 <__assert_fail@plt+0x5474>
   17b18:	add	r2, pc, r2
   17b1c:	ldr	r2, [r2]
   17b20:	tst	r2, #4
   17b24:	mov	r3, r0
   17b28:	str	r0, [r4, #132]	; 0x84
   17b2c:	beq	17af0 <__assert_fail@plt+0x53a4>
   17b30:	ldr	r3, [pc, #140]	; 17bc4 <__assert_fail@plt+0x5478>
   17b34:	ldr	r3, [r5, r3]
   17b38:	ldr	r5, [r3]
   17b3c:	bl	123ec <getpid@plt>
   17b40:	ldr	r2, [pc, #128]	; 17bc8 <__assert_fail@plt+0x547c>
   17b44:	ldr	r3, [pc, #128]	; 17bcc <__assert_fail@plt+0x5480>
   17b48:	add	r2, pc, r2
   17b4c:	str	r2, [sp, #4]
   17b50:	ldr	r2, [pc, #120]	; 17bd0 <__assert_fail@plt+0x5484>
   17b54:	add	r3, pc, r3
   17b58:	str	r3, [sp]
   17b5c:	add	r2, pc, r2
   17b60:	mov	r1, #1
   17b64:	mov	r3, r0
   17b68:	mov	r0, r5
   17b6c:	bl	12578 <__fprintf_chk@plt>
   17b70:	ldr	r3, [r4, #140]	; 0x8c
   17b74:	tst	r3, #2
   17b78:	bne	17ba8 <__assert_fail@plt+0x545c>
   17b7c:	ldr	r3, [pc, #80]	; 17bd4 <__assert_fail@plt+0x5488>
   17b80:	add	r3, pc, r3
   17b84:	ldr	r1, [pc, #76]	; 17bd8 <__assert_fail@plt+0x548c>
   17b88:	mov	r0, r4
   17b8c:	mov	r2, r4
   17b90:	add	r1, pc, r1
   17b94:	bl	16e4c <__assert_fail@plt+0x4700>
   17b98:	ldr	r3, [r4, #132]	; 0x84
   17b9c:	mov	r0, r3
   17ba0:	add	sp, sp, #12
   17ba4:	pop	{r4, r5, pc}
   17ba8:	ldr	r3, [pc, #44]	; 17bdc <__assert_fail@plt+0x5490>
   17bac:	add	r3, pc, r3
   17bb0:	b	17b84 <__assert_fail@plt+0x5438>
   17bb4:	mvn	r3, #21
   17bb8:	b	17af0 <__assert_fail@plt+0x53a4>
   17bbc:			; <UNDEFINED> instruction: 0x0001d2bc
   17bc0:	strdeq	sp, [r1], -r4
   17bc4:	andeq	r0, r0, r0, ror #4
   17bc8:	andeq	ip, r0, r8, asr #32
   17bcc:	andeq	ip, r0, r0, asr #32
   17bd0:	andeq	ip, r0, r4, lsr #32
   17bd4:	andeq	ip, r0, ip, lsl #3
   17bd8:	andeq	ip, r0, r0, lsl #3
   17bdc:	andeq	ip, r0, ip, asr r1
   17be0:	cmp	r0, #0
   17be4:	strne	r1, [r0, #132]	; 0x84
   17be8:	strne	r2, [r0, #136]	; 0x88
   17bec:	movne	r0, #0
   17bf0:	mvneq	r0, #21
   17bf4:	bx	lr
   17bf8:	ldr	r2, [pc, #320]	; 17d40 <__assert_fail@plt+0x55f4>
   17bfc:	ldr	r3, [pc, #320]	; 17d44 <__assert_fail@plt+0x55f8>
   17c00:	add	r2, pc, r2
   17c04:	push	{r4, r5, r6, r7, r8, lr}
   17c08:	sub	sp, sp, #120	; 0x78
   17c0c:	ldr	r6, [r2, r3]
   17c10:	subs	r4, r0, #0
   17c14:	ldr	r3, [r6]
   17c18:	str	r3, [sp, #116]	; 0x74
   17c1c:	beq	17d34 <__assert_fail@plt+0x55e8>
   17c20:	ldr	r3, [pc, #288]	; 17d48 <__assert_fail@plt+0x55fc>
   17c24:	mov	r5, r1
   17c28:	add	r3, pc, r3
   17c2c:	add	r7, r4, #384	; 0x180
   17c30:	ldr	r3, [r3]
   17c34:	tst	r3, #8
   17c38:	bne	17ca8 <__assert_fail@plt+0x555c>
   17c3c:	mov	r2, #36	; 0x24
   17c40:	mov	r1, #0
   17c44:	mov	r0, r7
   17c48:	bl	124dc <memset@plt>
   17c4c:	ldrb	r3, [r4, #412]	; 0x19c
   17c50:	ldrb	r1, [r4, #144]	; 0x90
   17c54:	mvn	r2, #0
   17c58:	orr	r3, r3, #2
   17c5c:	tst	r1, #2
   17c60:	str	r5, [r4, #416]	; 0x1a0
   17c64:	strb	r3, [r4, #412]	; 0x19c
   17c68:	str	r2, [r4, #392]	; 0x188
   17c6c:	movne	r0, #0
   17c70:	bne	17c90 <__assert_fail@plt+0x5544>
   17c74:	ldr	r3, [r4, #140]	; 0x8c
   17c78:	tst	r3, #128	; 0x80
   17c7c:	beq	17cfc <__assert_fail@plt+0x55b0>
   17c80:	ldrb	r3, [r4, #144]	; 0x90
   17c84:	mov	r0, #0
   17c88:	orr	r3, r3, #2
   17c8c:	strb	r3, [r4, #144]	; 0x90
   17c90:	ldr	r2, [sp, #116]	; 0x74
   17c94:	ldr	r3, [r6]
   17c98:	cmp	r2, r3
   17c9c:	bne	17d3c <__assert_fail@plt+0x55f0>
   17ca0:	add	sp, sp, #120	; 0x78
   17ca4:	pop	{r4, r5, r6, r7, r8, pc}
   17ca8:	ldr	r3, [pc, #156]	; 17d4c <__assert_fail@plt+0x5600>
   17cac:	ldr	r3, [r2, r3]
   17cb0:	ldr	r8, [r3]
   17cb4:	bl	123ec <getpid@plt>
   17cb8:	ldr	r2, [pc, #144]	; 17d50 <__assert_fail@plt+0x5604>
   17cbc:	ldr	r3, [pc, #144]	; 17d54 <__assert_fail@plt+0x5608>
   17cc0:	add	r2, pc, r2
   17cc4:	str	r2, [sp, #4]
   17cc8:	ldr	r2, [pc, #136]	; 17d58 <__assert_fail@plt+0x560c>
   17ccc:	add	r3, pc, r3
   17cd0:	str	r3, [sp]
   17cd4:	add	r2, pc, r2
   17cd8:	mov	r1, #1
   17cdc:	mov	r3, r0
   17ce0:	mov	r0, r8
   17ce4:	bl	12578 <__fprintf_chk@plt>
   17ce8:	ldr	r1, [pc, #108]	; 17d5c <__assert_fail@plt+0x5610>
   17cec:	mov	r0, r7
   17cf0:	add	r1, pc, r1
   17cf4:	bl	16e4c <__assert_fail@plt+0x4700>
   17cf8:	b	17c3c <__assert_fail@plt+0x54f0>
   17cfc:	ldr	r1, [pc, #92]	; 17d60 <__assert_fail@plt+0x5614>
   17d00:	add	r2, sp, #8
   17d04:	add	r1, pc, r1
   17d08:	mov	r0, #3
   17d0c:	bl	126c8 <__xstat64@plt>
   17d10:	cmp	r0, #0
   17d14:	bne	17c80 <__assert_fail@plt+0x5534>
   17d18:	ldr	r3, [sp, #24]
   17d1c:	and	r3, r3, #61440	; 0xf000
   17d20:	cmp	r3, #16384	; 0x4000
   17d24:	ldreq	r3, [r4, #140]	; 0x8c
   17d28:	orreq	r3, r3, #128	; 0x80
   17d2c:	streq	r3, [r4, #140]	; 0x8c
   17d30:	b	17c80 <__assert_fail@plt+0x5534>
   17d34:	mvn	r0, #21
   17d38:	b	17c90 <__assert_fail@plt+0x5544>
   17d3c:	bl	12200 <__stack_chk_fail@plt>
   17d40:	andeq	sp, r1, ip, lsl #3
   17d44:	andeq	r0, r0, ip, asr r2
   17d48:	andeq	sp, r1, r4, ror #11
   17d4c:	andeq	r0, r0, r0, ror #4
   17d50:	andeq	fp, r0, r0, lsr #30
   17d54:	andeq	fp, r0, r8, asr #29
   17d58:	andeq	fp, r0, ip, lsr #29
   17d5c:	andeq	ip, r0, r4, lsr r0
   17d60:	andeq	ip, r0, ip, lsr #32
   17d64:	ldr	r2, [pc, #200]	; 17e34 <__assert_fail@plt+0x56e8>
   17d68:	push	{r4, r5, r6, lr}
   17d6c:	subs	r4, r0, #0
   17d70:	sub	sp, sp, #8
   17d74:	add	r2, pc, r2
   17d78:	beq	17e2c <__assert_fail@plt+0x56e0>
   17d7c:	ldr	r3, [pc, #180]	; 17e38 <__assert_fail@plt+0x56ec>
   17d80:	add	r5, r4, #384	; 0x180
   17d84:	add	r3, pc, r3
   17d88:	ldr	r3, [r3]
   17d8c:	tst	r3, #8
   17d90:	bne	17dd8 <__assert_fail@plt+0x568c>
   17d94:	ldr	r0, [r4, #396]	; 0x18c
   17d98:	bl	12134 <free@plt>
   17d9c:	ldr	r0, [r4, #384]	; 0x180
   17da0:	cmp	r0, #0
   17da4:	beq	17dac <__assert_fail@plt+0x5660>
   17da8:	bl	12590 <fclose@plt>
   17dac:	ldr	r0, [r4, #388]	; 0x184
   17db0:	cmp	r0, #0
   17db4:	beq	17dbc <__assert_fail@plt+0x5670>
   17db8:	bl	1271c <closedir@plt>
   17dbc:	mov	r0, r5
   17dc0:	mov	r2, #36	; 0x24
   17dc4:	mov	r1, #0
   17dc8:	bl	124dc <memset@plt>
   17dcc:	mov	r0, #0
   17dd0:	add	sp, sp, #8
   17dd4:	pop	{r4, r5, r6, pc}
   17dd8:	ldr	r3, [pc, #92]	; 17e3c <__assert_fail@plt+0x56f0>
   17ddc:	ldr	r3, [r2, r3]
   17de0:	ldr	r6, [r3]
   17de4:	bl	123ec <getpid@plt>
   17de8:	ldr	r2, [pc, #80]	; 17e40 <__assert_fail@plt+0x56f4>
   17dec:	ldr	r3, [pc, #80]	; 17e44 <__assert_fail@plt+0x56f8>
   17df0:	add	r2, pc, r2
   17df4:	str	r2, [sp, #4]
   17df8:	ldr	r2, [pc, #72]	; 17e48 <__assert_fail@plt+0x56fc>
   17dfc:	add	r3, pc, r3
   17e00:	str	r3, [sp]
   17e04:	add	r2, pc, r2
   17e08:	mov	r1, #1
   17e0c:	mov	r3, r0
   17e10:	mov	r0, r6
   17e14:	bl	12578 <__fprintf_chk@plt>
   17e18:	ldr	r1, [pc, #44]	; 17e4c <__assert_fail@plt+0x5700>
   17e1c:	mov	r0, r5
   17e20:	add	r1, pc, r1
   17e24:	bl	16e4c <__assert_fail@plt+0x4700>
   17e28:	b	17d94 <__assert_fail@plt+0x5648>
   17e2c:	mvn	r0, #21
   17e30:	b	17dd0 <__assert_fail@plt+0x5684>
   17e34:	andeq	sp, r1, r8, lsl r0
   17e38:	andeq	sp, r1, r8, lsl #9
   17e3c:	andeq	r0, r0, r0, ror #4
   17e40:	strdeq	fp, [r0], -r0
   17e44:	muleq	r0, r8, sp
   17e48:	andeq	fp, r0, ip, ror sp
   17e4c:	andeq	fp, r0, ip, lsl pc
   17e50:	push	{r4, r5, r6, r7, lr}
   17e54:	sub	sp, sp, #12
   17e58:	mov	r4, r0
   17e5c:	bl	1247c <__errno_location@plt>
   17e60:	ldr	r2, [pc, #164]	; 17f0c <__assert_fail@plt+0x57c0>
   17e64:	cmp	r4, #0
   17e68:	add	r2, pc, r2
   17e6c:	beq	17eb0 <__assert_fail@plt+0x5764>
   17e70:	ldr	r3, [pc, #152]	; 17f10 <__assert_fail@plt+0x57c4>
   17e74:	mov	r5, r0
   17e78:	add	r3, pc, r3
   17e7c:	ldr	r6, [r0]
   17e80:	ldr	r3, [r3]
   17e84:	tst	r3, #4
   17e88:	bne	17eb8 <__assert_fail@plt+0x576c>
   17e8c:	ldr	r0, [r4, #128]	; 0x80
   17e90:	bl	12134 <free@plt>
   17e94:	mov	r1, #0
   17e98:	str	r1, [r4, #128]	; 0x80
   17e9c:	mov	r0, r4
   17ea0:	bl	173f8 <__assert_fail@plt+0x4cac>
   17ea4:	mov	r0, r4
   17ea8:	bl	17d64 <__assert_fail@plt+0x5618>
   17eac:	str	r6, [r5]
   17eb0:	add	sp, sp, #12
   17eb4:	pop	{r4, r5, r6, r7, pc}
   17eb8:	ldr	r3, [pc, #84]	; 17f14 <__assert_fail@plt+0x57c8>
   17ebc:	ldr	r3, [r2, r3]
   17ec0:	ldr	r7, [r3]
   17ec4:	bl	123ec <getpid@plt>
   17ec8:	ldr	r2, [pc, #72]	; 17f18 <__assert_fail@plt+0x57cc>
   17ecc:	ldr	r3, [pc, #72]	; 17f1c <__assert_fail@plt+0x57d0>
   17ed0:	add	r2, pc, r2
   17ed4:	str	r2, [sp, #4]
   17ed8:	ldr	r2, [pc, #64]	; 17f20 <__assert_fail@plt+0x57d4>
   17edc:	add	r3, pc, r3
   17ee0:	str	r3, [sp]
   17ee4:	add	r2, pc, r2
   17ee8:	mov	r1, #1
   17eec:	mov	r3, r0
   17ef0:	mov	r0, r7
   17ef4:	bl	12578 <__fprintf_chk@plt>
   17ef8:	ldr	r1, [pc, #36]	; 17f24 <__assert_fail@plt+0x57d8>
   17efc:	mov	r0, r4
   17f00:	add	r1, pc, r1
   17f04:	bl	16e4c <__assert_fail@plt+0x4700>
   17f08:	b	17e8c <__assert_fail@plt+0x5740>
   17f0c:	andeq	ip, r1, r4, lsr #30
   17f10:	muleq	r1, r4, r3
   17f14:	andeq	r0, r0, r0, ror #4
   17f18:	andeq	fp, r0, r0, asr #25
   17f1c:			; <UNDEFINED> instruction: 0x0000bcb8
   17f20:	muleq	r0, ip, ip
   17f24:	andeq	fp, r0, ip, lsr lr
   17f28:	ldr	r3, [pc, #152]	; 17fc8 <__assert_fail@plt+0x587c>
   17f2c:	ldr	r2, [pc, #152]	; 17fcc <__assert_fail@plt+0x5880>
   17f30:	add	r3, pc, r3
   17f34:	push	{r4, lr}
   17f38:	sub	sp, sp, #112	; 0x70
   17f3c:	ldr	r4, [r3, r2]
   17f40:	subs	r1, r0, #0
   17f44:	ldr	r3, [r4]
   17f48:	str	r3, [sp, #108]	; 0x6c
   17f4c:	beq	17f64 <__assert_fail@plt+0x5818>
   17f50:	mov	r2, sp
   17f54:	mov	r0, #3
   17f58:	bl	126c8 <__xstat64@plt>
   17f5c:	cmp	r0, #0
   17f60:	beq	17f90 <__assert_fail@plt+0x5844>
   17f64:	bl	1247c <__errno_location@plt>
   17f68:	mov	r1, #0
   17f6c:	mov	r3, #19
   17f70:	str	r3, [r0]
   17f74:	ldr	r2, [sp, #108]	; 0x6c
   17f78:	ldr	r3, [r4]
   17f7c:	mov	r0, r1
   17f80:	cmp	r2, r3
   17f84:	bne	17fc4 <__assert_fail@plt+0x5878>
   17f88:	add	sp, sp, #112	; 0x70
   17f8c:	pop	{r4, pc}
   17f90:	ldr	r3, [sp, #16]
   17f94:	and	r3, r3, #61440	; 0xf000
   17f98:	cmp	r3, #24576	; 0x6000
   17f9c:	bne	17f64 <__assert_fail@plt+0x5818>
   17fa0:	ldrd	r2, [sp, #32]
   17fa4:	lsl	r2, r2, #12
   17fa8:	bic	r3, r3, #4080	; 0xff0
   17fac:	bic	r3, r3, #15
   17fb0:	orr	r3, r3, r2, lsr #20
   17fb4:	cmp	r3, #7
   17fb8:	bne	17f64 <__assert_fail@plt+0x5818>
   17fbc:	mov	r1, #1
   17fc0:	b	17f74 <__assert_fail@plt+0x5828>
   17fc4:	bl	12200 <__stack_chk_fail@plt>
   17fc8:	andeq	ip, r1, ip, asr lr
   17fcc:	andeq	r0, r0, ip, asr r2
   17fd0:	push	{r4, r5, r6, r7, lr}
   17fd4:	mov	r4, r0
   17fd8:	sub	sp, sp, #12
   17fdc:	ldr	r7, [pc, #376]	; 1815c <__assert_fail@plt+0x5a10>
   17fe0:	bl	1247c <__errno_location@plt>
   17fe4:	cmp	r4, #0
   17fe8:	add	r7, pc, r7
   17fec:	beq	180c8 <__assert_fail@plt+0x597c>
   17ff0:	ldrb	r3, [r4, #144]	; 0x90
   17ff4:	ands	r3, r3, #4
   17ff8:	bne	180c8 <__assert_fail@plt+0x597c>
   17ffc:	str	r3, [r0]
   18000:	ldrb	r3, [r4, #144]	; 0x90
   18004:	ands	r6, r3, #1
   18008:	beq	18020 <__assert_fail@plt+0x58d4>
   1800c:	add	r2, r4, #152	; 0x98
   18010:	mov	r5, r2
   18014:	mov	r0, r5
   18018:	add	sp, sp, #12
   1801c:	pop	{r4, r5, r6, r7, pc}
   18020:	mov	r0, r4
   18024:	bl	17ac0 <__assert_fail@plt+0x5374>
   18028:	cmp	r0, #0
   1802c:	blt	180e0 <__assert_fail@plt+0x5994>
   18030:	add	r5, r4, #152	; 0x98
   18034:	mov	r2, r5
   18038:	ldr	r1, [pc, #288]	; 18160 <__assert_fail@plt+0x5a14>
   1803c:	bl	122a8 <ioctl@plt>
   18040:	ldr	r3, [pc, #284]	; 18164 <__assert_fail@plt+0x5a18>
   18044:	mov	r2, r5
   18048:	add	r3, pc, r3
   1804c:	ldr	r3, [r3]
   18050:	and	r3, r3, #4
   18054:	cmp	r0, #0
   18058:	beq	180f0 <__assert_fail@plt+0x59a4>
   1805c:	ldrb	r2, [r4, #144]	; 0x90
   18060:	cmp	r3, #0
   18064:	orr	r3, r2, #4
   18068:	strb	r3, [r4, #144]	; 0x90
   1806c:	beq	180e0 <__assert_fail@plt+0x5994>
   18070:	ldr	r3, [pc, #240]	; 18168 <__assert_fail@plt+0x5a1c>
   18074:	mov	r5, r6
   18078:	ldr	r3, [r7, r3]
   1807c:	ldr	r6, [r3]
   18080:	bl	123ec <getpid@plt>
   18084:	ldr	r2, [pc, #224]	; 1816c <__assert_fail@plt+0x5a20>
   18088:	ldr	r3, [pc, #224]	; 18170 <__assert_fail@plt+0x5a24>
   1808c:	add	r2, pc, r2
   18090:	str	r2, [sp, #4]
   18094:	ldr	r2, [pc, #216]	; 18174 <__assert_fail@plt+0x5a28>
   18098:	add	r3, pc, r3
   1809c:	str	r3, [sp]
   180a0:	add	r2, pc, r2
   180a4:	mov	r1, #1
   180a8:	mov	r3, r0
   180ac:	mov	r0, r6
   180b0:	bl	12578 <__fprintf_chk@plt>
   180b4:	ldr	r1, [pc, #188]	; 18178 <__assert_fail@plt+0x5a2c>
   180b8:	mov	r0, r4
   180bc:	add	r1, pc, r1
   180c0:	bl	16e4c <__assert_fail@plt+0x4700>
   180c4:	b	18014 <__assert_fail@plt+0x58c8>
   180c8:	mov	r3, #22
   180cc:	mov	r5, #0
   180d0:	str	r3, [r0]
   180d4:	mov	r0, r5
   180d8:	add	sp, sp, #12
   180dc:	pop	{r4, r5, r6, r7, pc}
   180e0:	mov	r5, #0
   180e4:	mov	r0, r5
   180e8:	add	sp, sp, #12
   180ec:	pop	{r4, r5, r6, r7, pc}
   180f0:	ldrb	r1, [r4, #144]	; 0x90
   180f4:	cmp	r3, #0
   180f8:	bic	r3, r1, #5
   180fc:	orr	r3, r3, #1
   18100:	strb	r3, [r4, #144]	; 0x90
   18104:	beq	18010 <__assert_fail@plt+0x58c4>
   18108:	ldr	r3, [pc, #88]	; 18168 <__assert_fail@plt+0x5a1c>
   1810c:	ldr	r3, [r7, r3]
   18110:	ldr	r6, [r3]
   18114:	bl	123ec <getpid@plt>
   18118:	ldr	r2, [pc, #92]	; 1817c <__assert_fail@plt+0x5a30>
   1811c:	ldr	r3, [pc, #92]	; 18180 <__assert_fail@plt+0x5a34>
   18120:	add	r2, pc, r2
   18124:	str	r2, [sp, #4]
   18128:	ldr	r2, [pc, #84]	; 18184 <__assert_fail@plt+0x5a38>
   1812c:	add	r3, pc, r3
   18130:	str	r3, [sp]
   18134:	add	r2, pc, r2
   18138:	mov	r1, #1
   1813c:	mov	r3, r0
   18140:	mov	r0, r6
   18144:	bl	12578 <__fprintf_chk@plt>
   18148:	ldr	r1, [pc, #56]	; 18188 <__assert_fail@plt+0x5a3c>
   1814c:	mov	r0, r4
   18150:	add	r1, pc, r1
   18154:	bl	16e4c <__assert_fail@plt+0x4700>
   18158:	b	18014 <__assert_fail@plt+0x58c8>
   1815c:	andeq	ip, r1, r4, lsr #27
   18160:	andeq	r4, r0, r5, lsl #24
   18164:	andeq	sp, r1, r4, asr #3
   18168:	andeq	r0, r0, r0, ror #4
   1816c:	andeq	fp, r0, r4, lsl #22
   18170:	strdeq	fp, [r0], -ip
   18174:	andeq	fp, r0, r0, ror #21
   18178:	andeq	fp, r0, r8, lsr #25
   1817c:	andeq	fp, r0, r0, ror sl
   18180:	andeq	fp, r0, r8, ror #20
   18184:	andeq	fp, r0, ip, asr #20
   18188:	strdeq	fp, [r0], -ip
   1818c:	push	{r4, r5, r6, lr}
   18190:	sub	sp, sp, #16
   18194:	ldr	r4, [pc, #260]	; 182a0 <__assert_fail@plt+0x5b54>
   18198:	ldr	r3, [pc, #260]	; 182a4 <__assert_fail@plt+0x5b58>
   1819c:	add	r4, pc, r4
   181a0:	mov	r6, r0
   181a4:	ldr	r5, [r4, r3]
   181a8:	ldr	r3, [r5]
   181ac:	str	r3, [sp, #12]
   181b0:	bl	16f18 <__assert_fail@plt+0x47cc>
   181b4:	mov	r3, #0
   181b8:	str	r3, [sp, #8]
   181bc:	cmp	r0, r3
   181c0:	beq	18210 <__assert_fail@plt+0x5ac4>
   181c4:	ldr	r2, [pc, #220]	; 182a8 <__assert_fail@plt+0x5b5c>
   181c8:	add	r1, sp, #8
   181cc:	add	r2, pc, r2
   181d0:	bl	1db58 <__assert_fail@plt+0xb40c>
   181d4:	ldr	r3, [sp, #8]
   181d8:	cmp	r3, #0
   181dc:	beq	18210 <__assert_fail@plt+0x5ac4>
   181e0:	ldr	r3, [pc, #196]	; 182ac <__assert_fail@plt+0x5b60>
   181e4:	add	r3, pc, r3
   181e8:	ldr	r3, [r3]
   181ec:	tst	r3, #4
   181f0:	bne	18244 <__assert_fail@plt+0x5af8>
   181f4:	ldr	r2, [sp, #12]
   181f8:	ldr	r3, [r5]
   181fc:	ldr	r0, [sp, #8]
   18200:	cmp	r2, r3
   18204:	bne	1829c <__assert_fail@plt+0x5b50>
   18208:	add	sp, sp, #16
   1820c:	pop	{r4, r5, r6, pc}
   18210:	ldr	r3, [r6, #140]	; 0x8c
   18214:	tst	r3, #64	; 0x40
   18218:	bne	181e0 <__assert_fail@plt+0x5a94>
   1821c:	mov	r0, r6
   18220:	bl	17fd0 <__assert_fail@plt+0x5884>
   18224:	cmp	r0, #0
   18228:	beq	181e0 <__assert_fail@plt+0x5a94>
   1822c:	mov	r3, #42	; 0x2a
   18230:	strh	r3, [r0, #118]	; 0x76
   18234:	add	r0, r0, #56	; 0x38
   18238:	bl	121f4 <strdup@plt>
   1823c:	str	r0, [sp, #8]
   18240:	b	181e0 <__assert_fail@plt+0x5a94>
   18244:	ldr	r3, [pc, #100]	; 182b0 <__assert_fail@plt+0x5b64>
   18248:	ldr	r3, [r4, r3]
   1824c:	ldr	r4, [r3]
   18250:	bl	123ec <getpid@plt>
   18254:	ldr	r2, [pc, #88]	; 182b4 <__assert_fail@plt+0x5b68>
   18258:	ldr	r3, [pc, #88]	; 182b8 <__assert_fail@plt+0x5b6c>
   1825c:	add	r2, pc, r2
   18260:	str	r2, [sp, #4]
   18264:	ldr	r2, [pc, #80]	; 182bc <__assert_fail@plt+0x5b70>
   18268:	add	r3, pc, r3
   1826c:	str	r3, [sp]
   18270:	add	r2, pc, r2
   18274:	mov	r1, #1
   18278:	mov	r3, r0
   1827c:	mov	r0, r4
   18280:	bl	12578 <__fprintf_chk@plt>
   18284:	ldr	r1, [pc, #52]	; 182c0 <__assert_fail@plt+0x5b74>
   18288:	mov	r0, r6
   1828c:	ldr	r2, [sp, #8]
   18290:	add	r1, pc, r1
   18294:	bl	16e4c <__assert_fail@plt+0x4700>
   18298:	b	181f4 <__assert_fail@plt+0x5aa8>
   1829c:	bl	12200 <__stack_chk_fail@plt>
   182a0:	strdeq	ip, [r1], -r0
   182a4:	andeq	r0, r0, ip, asr r2
   182a8:			; <UNDEFINED> instruction: 0x0000bbb4
   182ac:	andeq	sp, r1, r8, lsr #32
   182b0:	andeq	r0, r0, r0, ror #4
   182b4:	andeq	fp, r0, r4, lsr r9
   182b8:	andeq	fp, r0, ip, lsr #18
   182bc:	andeq	fp, r0, r0, lsl r9
   182c0:	andeq	fp, r0, r4, lsl #22
   182c4:	push	{r4, r5, r6, r7, r8, lr}
   182c8:	sub	sp, sp, #8
   182cc:	mov	r8, r1
   182d0:	mov	r7, r0
   182d4:	bl	16f18 <__assert_fail@plt+0x47cc>
   182d8:	ldr	r6, [pc, #256]	; 183e0 <__assert_fail@plt+0x5c94>
   182dc:	add	r6, pc, r6
   182e0:	cmp	r0, #0
   182e4:	beq	1835c <__assert_fail@plt+0x5c10>
   182e8:	ldr	r2, [pc, #244]	; 183e4 <__assert_fail@plt+0x5c98>
   182ec:	mov	r1, r8
   182f0:	add	r2, pc, r2
   182f4:	bl	1e054 <__assert_fail@plt+0xb908>
   182f8:	subs	r5, r0, #0
   182fc:	beq	1832c <__assert_fail@plt+0x5be0>
   18300:	ldr	r3, [r7, #140]	; 0x8c
   18304:	ands	r4, r3, #64	; 0x40
   18308:	beq	18334 <__assert_fail@plt+0x5be8>
   1830c:	ldr	r3, [pc, #212]	; 183e8 <__assert_fail@plt+0x5c9c>
   18310:	add	r3, pc, r3
   18314:	ldr	r3, [r3]
   18318:	tst	r3, #4
   1831c:	bne	18370 <__assert_fail@plt+0x5c24>
   18320:	mov	r0, r5
   18324:	add	sp, sp, #8
   18328:	pop	{r4, r5, r6, r7, r8, pc}
   1832c:	mov	r5, #0
   18330:	b	1830c <__assert_fail@plt+0x5bc0>
   18334:	mov	r0, r7
   18338:	bl	17fd0 <__assert_fail@plt+0x5884>
   1833c:	cmp	r0, #0
   18340:	beq	183d0 <__assert_fail@plt+0x5c84>
   18344:	cmp	r8, #0
   18348:	beq	1832c <__assert_fail@plt+0x5be0>
   1834c:	ldrd	r2, [r0, #24]
   18350:	mov	r5, r4
   18354:	strd	r2, [r8]
   18358:	b	1830c <__assert_fail@plt+0x5bc0>
   1835c:	ldr	r3, [r7, #140]	; 0x8c
   18360:	mvn	r5, #21
   18364:	ands	r4, r3, #64	; 0x40
   18368:	bne	1830c <__assert_fail@plt+0x5bc0>
   1836c:	b	18334 <__assert_fail@plt+0x5be8>
   18370:	ldr	r3, [pc, #116]	; 183ec <__assert_fail@plt+0x5ca0>
   18374:	ldr	r3, [r6, r3]
   18378:	ldr	r4, [r3]
   1837c:	bl	123ec <getpid@plt>
   18380:	ldr	r2, [pc, #104]	; 183f0 <__assert_fail@plt+0x5ca4>
   18384:	ldr	r3, [pc, #104]	; 183f4 <__assert_fail@plt+0x5ca8>
   18388:	add	r2, pc, r2
   1838c:	str	r2, [sp, #4]
   18390:	ldr	r2, [pc, #96]	; 183f8 <__assert_fail@plt+0x5cac>
   18394:	add	r3, pc, r3
   18398:	str	r3, [sp]
   1839c:	add	r2, pc, r2
   183a0:	mov	r1, #1
   183a4:	mov	r3, r0
   183a8:	mov	r0, r4
   183ac:	bl	12578 <__fprintf_chk@plt>
   183b0:	ldr	r1, [pc, #68]	; 183fc <__assert_fail@plt+0x5cb0>
   183b4:	mov	r0, r7
   183b8:	mov	r2, r5
   183bc:	add	r1, pc, r1
   183c0:	bl	16e4c <__assert_fail@plt+0x4700>
   183c4:	mov	r0, r5
   183c8:	add	sp, sp, #8
   183cc:	pop	{r4, r5, r6, r7, r8, pc}
   183d0:	bl	1247c <__errno_location@plt>
   183d4:	ldr	r5, [r0]
   183d8:	rsb	r5, r5, #0
   183dc:	b	1830c <__assert_fail@plt+0x5bc0>
   183e0:			; <UNDEFINED> instruction: 0x0001cab0
   183e4:			; <UNDEFINED> instruction: 0x0000babc
   183e8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   183ec:	andeq	r0, r0, r0, ror #4
   183f0:	andeq	fp, r0, r8, lsl #16
   183f4:	andeq	fp, r0, r0, lsl #16
   183f8:	andeq	fp, r0, r4, ror #15
   183fc:	strdeq	fp, [r0], -ip
   18400:	push	{r4, r5, r6, r7, lr}
   18404:	sub	sp, sp, #12
   18408:	mov	r4, r0
   1840c:	bl	173f8 <__assert_fail@plt+0x4cac>
   18410:	ldr	r6, [pc, #488]	; 18600 <__assert_fail@plt+0x5eb4>
   18414:	add	r6, pc, r6
   18418:	subs	r5, r0, #0
   1841c:	bne	1842c <__assert_fail@plt+0x5ce0>
   18420:	ldr	r3, [r4, #416]	; 0x1a0
   18424:	tst	r3, #3
   18428:	bne	18438 <__assert_fail@plt+0x5cec>
   1842c:	mov	r0, r5
   18430:	add	sp, sp, #12
   18434:	pop	{r4, r5, r6, r7, pc}
   18438:	mov	r0, r4
   1843c:	bl	17f28 <__assert_fail@plt+0x57dc>
   18440:	cmp	r0, #0
   18444:	beq	18524 <__assert_fail@plt+0x5dd8>
   18448:	ldr	r3, [pc, #436]	; 18604 <__assert_fail@plt+0x5eb8>
   1844c:	add	r3, pc, r3
   18450:	ldr	r3, [r3]
   18454:	tst	r3, #8
   18458:	bne	184cc <__assert_fail@plt+0x5d80>
   1845c:	mov	r1, #0
   18460:	mov	r0, r4
   18464:	bl	182c4 <__assert_fail@plt+0x5b78>
   18468:	ldr	r3, [r4, #416]	; 0x1a0
   1846c:	tst	r3, #2
   18470:	bne	184b8 <__assert_fail@plt+0x5d6c>
   18474:	cmp	r0, #0
   18478:	andne	r0, r3, #1
   1847c:	moveq	r0, #0
   18480:	cmp	r0, #0
   18484:	bne	1842c <__assert_fail@plt+0x5ce0>
   18488:	ldr	r3, [pc, #376]	; 18608 <__assert_fail@plt+0x5ebc>
   1848c:	add	r3, pc, r3
   18490:	ldr	r3, [r3]
   18494:	tst	r3, #8
   18498:	bne	18550 <__assert_fail@plt+0x5e04>
   1849c:	mov	r0, r4
   184a0:	mov	r1, #0
   184a4:	bl	173f8 <__assert_fail@plt+0x4cac>
   184a8:	mov	r5, #1
   184ac:	mov	r0, r5
   184b0:	add	sp, sp, #12
   184b4:	pop	{r4, r5, r6, r7, pc}
   184b8:	cmp	r0, #0
   184bc:	beq	1842c <__assert_fail@plt+0x5ce0>
   184c0:	tst	r3, #1
   184c4:	beq	18488 <__assert_fail@plt+0x5d3c>
   184c8:	b	1842c <__assert_fail@plt+0x5ce0>
   184cc:	ldr	r3, [pc, #312]	; 1860c <__assert_fail@plt+0x5ec0>
   184d0:	ldr	r3, [r6, r3]
   184d4:	ldr	r7, [r3]
   184d8:	bl	123ec <getpid@plt>
   184dc:	ldr	r2, [pc, #300]	; 18610 <__assert_fail@plt+0x5ec4>
   184e0:	ldr	r3, [pc, #300]	; 18614 <__assert_fail@plt+0x5ec8>
   184e4:	add	r2, pc, r2
   184e8:	str	r2, [sp, #4]
   184ec:	ldr	r2, [pc, #292]	; 18618 <__assert_fail@plt+0x5ecc>
   184f0:	add	r3, pc, r3
   184f4:	str	r3, [sp]
   184f8:	add	r2, pc, r2
   184fc:	mov	r1, #1
   18500:	mov	r3, r0
   18504:	mov	r0, r7
   18508:	bl	12578 <__fprintf_chk@plt>
   1850c:	ldr	r1, [pc, #264]	; 1861c <__assert_fail@plt+0x5ed0>
   18510:	mov	r2, r4
   18514:	add	r1, pc, r1
   18518:	add	r0, r4, #384	; 0x180
   1851c:	bl	16e4c <__assert_fail@plt+0x4700>
   18520:	b	1845c <__assert_fail@plt+0x5d10>
   18524:	ldr	r3, [pc, #244]	; 18620 <__assert_fail@plt+0x5ed4>
   18528:	add	r3, pc, r3
   1852c:	ldr	r3, [r3]
   18530:	tst	r3, #8
   18534:	bne	185a8 <__assert_fail@plt+0x5e5c>
   18538:	bl	1247c <__errno_location@plt>
   1853c:	ldr	r5, [r0]
   18540:	rsb	r5, r5, #0
   18544:	mov	r0, r5
   18548:	add	sp, sp, #12
   1854c:	pop	{r4, r5, r6, r7, pc}
   18550:	ldr	r3, [pc, #180]	; 1860c <__assert_fail@plt+0x5ec0>
   18554:	ldr	r3, [r6, r3]
   18558:	ldr	r5, [r3]
   1855c:	bl	123ec <getpid@plt>
   18560:	ldr	r2, [pc, #188]	; 18624 <__assert_fail@plt+0x5ed8>
   18564:	ldr	r3, [pc, #188]	; 18628 <__assert_fail@plt+0x5edc>
   18568:	add	r2, pc, r2
   1856c:	str	r2, [sp, #4]
   18570:	ldr	r2, [pc, #180]	; 1862c <__assert_fail@plt+0x5ee0>
   18574:	add	r3, pc, r3
   18578:	str	r3, [sp]
   1857c:	add	r2, pc, r2
   18580:	mov	r1, #1
   18584:	mov	r3, r0
   18588:	mov	r0, r5
   1858c:	bl	12578 <__fprintf_chk@plt>
   18590:	ldr	r1, [pc, #152]	; 18630 <__assert_fail@plt+0x5ee4>
   18594:	mov	r2, r4
   18598:	add	r1, pc, r1
   1859c:	add	r0, r4, #384	; 0x180
   185a0:	bl	16e4c <__assert_fail@plt+0x4700>
   185a4:	b	1849c <__assert_fail@plt+0x5d50>
   185a8:	ldr	r3, [pc, #92]	; 1860c <__assert_fail@plt+0x5ec0>
   185ac:	ldr	r3, [r6, r3]
   185b0:	ldr	r5, [r3]
   185b4:	bl	123ec <getpid@plt>
   185b8:	ldr	r2, [pc, #116]	; 18634 <__assert_fail@plt+0x5ee8>
   185bc:	ldr	r3, [pc, #116]	; 18638 <__assert_fail@plt+0x5eec>
   185c0:	add	r2, pc, r2
   185c4:	str	r2, [sp, #4]
   185c8:	ldr	r2, [pc, #108]	; 1863c <__assert_fail@plt+0x5ef0>
   185cc:	add	r3, pc, r3
   185d0:	str	r3, [sp]
   185d4:	add	r2, pc, r2
   185d8:	mov	r1, #1
   185dc:	mov	r3, r0
   185e0:	mov	r0, r5
   185e4:	bl	12578 <__fprintf_chk@plt>
   185e8:	ldr	r1, [pc, #80]	; 18640 <__assert_fail@plt+0x5ef4>
   185ec:	mov	r2, r4
   185f0:	add	r0, r4, #384	; 0x180
   185f4:	add	r1, pc, r1
   185f8:	bl	16e4c <__assert_fail@plt+0x4700>
   185fc:	b	18538 <__assert_fail@plt+0x5dec>
   18600:	andeq	ip, r1, r8, ror r9
   18604:	andeq	ip, r1, r0, asr #27
   18608:	andeq	ip, r1, r0, lsl #27
   1860c:	andeq	r0, r0, r0, ror #4
   18610:	strdeq	fp, [r0], -ip
   18614:	andeq	fp, r0, r4, lsr #13
   18618:	andeq	fp, r0, r8, lsl #13
   1861c:	andeq	fp, r0, ip, asr #17
   18620:	andeq	ip, r1, r4, ror #25
   18624:	andeq	fp, r0, r8, ror r6
   18628:	andeq	fp, r0, r0, lsr #12
   1862c:	andeq	fp, r0, r4, lsl #12
   18630:	andeq	fp, r0, r4, asr r8
   18634:	andeq	fp, r0, r0, lsr #12
   18638:	andeq	fp, r0, r8, asr #11
   1863c:	andeq	fp, r0, ip, lsr #11
   18640:	ldrdeq	fp, [r0], -r8
   18644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18648:	sub	sp, sp, #412	; 0x19c
   1864c:	ldr	r9, [pc, #520]	; 1885c <__assert_fail@plt+0x6110>
   18650:	ldr	r2, [pc, #520]	; 18860 <__assert_fail@plt+0x6114>
   18654:	add	r9, pc, r9
   18658:	ldr	r3, [pc, #516]	; 18864 <__assert_fail@plt+0x6118>
   1865c:	ldr	r1, [r9, r2]
   18660:	add	r3, pc, r3
   18664:	mov	r5, r0
   18668:	ldr	r2, [r3]
   1866c:	ldr	r3, [r1]
   18670:	tst	r2, #8
   18674:	str	r1, [sp, #20]
   18678:	add	sl, r0, #384	; 0x180
   1867c:	str	r3, [sp, #404]	; 0x194
   18680:	bne	18804 <__assert_fail@plt+0x60b8>
   18684:	ldr	r0, [r5, #388]	; 0x184
   18688:	cmp	r0, #0
   1868c:	beq	187e4 <__assert_fail@plt+0x6098>
   18690:	bl	12668 <dirfd@plt>
   18694:	ldr	r7, [pc, #460]	; 18868 <__assert_fail@plt+0x611c>
   18698:	ldr	fp, [pc, #460]	; 1886c <__assert_fail@plt+0x6120>
   1869c:	ldr	r3, [pc, #460]	; 18870 <__assert_fail@plt+0x6124>
   186a0:	add	r7, pc, r7
   186a4:	add	fp, pc, fp
   186a8:	add	r3, pc, r3
   186ac:	str	r3, [sp, #12]
   186b0:	str	r0, [sp, #16]
   186b4:	ldr	r0, [r5, #388]	; 0x184
   186b8:	bl	12644 <readdir64@plt>
   186bc:	cmp	r0, #0
   186c0:	beq	187fc <__assert_fail@plt+0x60b0>
   186c4:	ldr	r3, [r7]
   186c8:	add	r4, r0, #19
   186cc:	tst	r3, #8
   186d0:	bne	18794 <__assert_fail@plt+0x6048>
   186d4:	ldr	r1, [pc, #408]	; 18874 <__assert_fail@plt+0x6128>
   186d8:	mov	r0, r4
   186dc:	add	r1, pc, r1
   186e0:	bl	120c8 <strcmp@plt>
   186e4:	cmp	r0, #0
   186e8:	beq	186b4 <__assert_fail@plt+0x5f68>
   186ec:	ldr	r1, [pc, #388]	; 18878 <__assert_fail@plt+0x612c>
   186f0:	mov	r0, r4
   186f4:	add	r1, pc, r1
   186f8:	bl	120c8 <strcmp@plt>
   186fc:	cmp	r0, #0
   18700:	beq	186b4 <__assert_fail@plt+0x5f68>
   18704:	ldr	r1, [pc, #368]	; 1887c <__assert_fail@plt+0x6130>
   18708:	mov	r2, #4
   1870c:	add	r1, pc, r1
   18710:	mov	r0, r4
   18714:	bl	126e0 <strncmp@plt>
   18718:	subs	r8, r0, #0
   1871c:	bne	186b4 <__assert_fail@plt+0x5f68>
   18720:	ldr	r2, [pc, #344]	; 18880 <__assert_fail@plt+0x6134>
   18724:	ldr	r3, [pc, #344]	; 18884 <__assert_fail@plt+0x6138>
   18728:	add	r2, pc, r2
   1872c:	add	r6, sp, #128	; 0x80
   18730:	mov	r1, r3
   18734:	stm	sp, {r2, r4}
   18738:	mov	r0, r6
   1873c:	mov	r2, #1
   18740:	bl	12728 <__snprintf_chk@plt>
   18744:	mov	r2, r6
   18748:	str	r8, [sp]
   1874c:	add	r3, sp, #24
   18750:	ldr	r1, [sp, #16]
   18754:	mov	r0, #3
   18758:	bl	12254 <__fxstatat64@plt>
   1875c:	cmp	r0, #0
   18760:	bne	186b4 <__assert_fail@plt+0x5f68>
   18764:	mov	r1, r4
   18768:	mov	r0, r5
   1876c:	bl	18400 <__assert_fail@plt+0x5cb4>
   18770:	cmp	r0, #0
   18774:	bne	186b4 <__assert_fail@plt+0x5f68>
   18778:	ldr	r3, [sp, #20]
   1877c:	ldr	r2, [sp, #404]	; 0x194
   18780:	ldr	r3, [r3]
   18784:	cmp	r2, r3
   18788:	bne	18858 <__assert_fail@plt+0x610c>
   1878c:	add	sp, sp, #412	; 0x19c
   18790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18794:	ldr	r3, [pc, #236]	; 18888 <__assert_fail@plt+0x613c>
   18798:	ldr	r3, [r9, r3]
   1879c:	ldr	r6, [r3]
   187a0:	bl	123ec <getpid@plt>
   187a4:	ldr	r3, [pc, #224]	; 1888c <__assert_fail@plt+0x6140>
   187a8:	ldr	r2, [sp, #12]
   187ac:	add	r3, pc, r3
   187b0:	str	r2, [sp, #4]
   187b4:	str	r3, [sp]
   187b8:	mov	r2, fp
   187bc:	mov	r1, #1
   187c0:	mov	r3, r0
   187c4:	mov	r0, r6
   187c8:	bl	12578 <__fprintf_chk@plt>
   187cc:	ldr	r1, [pc, #188]	; 18890 <__assert_fail@plt+0x6144>
   187d0:	mov	r2, r4
   187d4:	add	r1, pc, r1
   187d8:	mov	r0, sl
   187dc:	bl	16e4c <__assert_fail@plt+0x4700>
   187e0:	b	186d4 <__assert_fail@plt+0x5f88>
   187e4:	ldr	r0, [pc, #168]	; 18894 <__assert_fail@plt+0x6148>
   187e8:	add	r0, pc, r0
   187ec:	bl	12314 <opendir@plt>
   187f0:	cmp	r0, #0
   187f4:	str	r0, [r5, #388]	; 0x184
   187f8:	bne	18690 <__assert_fail@plt+0x5f44>
   187fc:	mov	r0, #1
   18800:	b	18778 <__assert_fail@plt+0x602c>
   18804:	ldr	r3, [pc, #124]	; 18888 <__assert_fail@plt+0x613c>
   18808:	ldr	r3, [r9, r3]
   1880c:	ldr	r4, [r3]
   18810:	bl	123ec <getpid@plt>
   18814:	ldr	r2, [pc, #124]	; 18898 <__assert_fail@plt+0x614c>
   18818:	ldr	r3, [pc, #124]	; 1889c <__assert_fail@plt+0x6150>
   1881c:	add	r2, pc, r2
   18820:	str	r2, [sp, #4]
   18824:	ldr	r2, [pc, #116]	; 188a0 <__assert_fail@plt+0x6154>
   18828:	add	r3, pc, r3
   1882c:	str	r3, [sp]
   18830:	add	r2, pc, r2
   18834:	mov	r1, #1
   18838:	mov	r3, r0
   1883c:	mov	r0, r4
   18840:	bl	12578 <__fprintf_chk@plt>
   18844:	ldr	r1, [pc, #88]	; 188a4 <__assert_fail@plt+0x6158>
   18848:	mov	r0, sl
   1884c:	add	r1, pc, r1
   18850:	bl	16e4c <__assert_fail@plt+0x4700>
   18854:	b	18684 <__assert_fail@plt+0x5f38>
   18858:	bl	12200 <__stack_chk_fail@plt>
   1885c:	andeq	ip, r1, r8, lsr r7
   18860:	andeq	r0, r0, ip, asr r2
   18864:	andeq	ip, r1, ip, lsr #23
   18868:	andeq	ip, r1, ip, ror #22
   1886c:	ldrdeq	fp, [r0], -ip
   18870:	andeq	fp, r0, r8, lsr r5
   18874:	andeq	sl, r0, r4, ror #15
   18878:	ldrdeq	sl, [r0], -r0
   1887c:	andeq	fp, r0, r8, lsl r7
   18880:	andeq	fp, r0, r4, lsl #14
   18884:	andeq	r0, r0, r2, lsl r1
   18888:	andeq	r0, r0, r0, ror #4
   1888c:	andeq	fp, r0, r8, ror #7
   18890:	andeq	fp, r0, r4, asr #12
   18894:			; <UNDEFINED> instruction: 0x0000b4b0
   18898:	andeq	fp, r0, r4, asr #7
   1889c:	andeq	fp, r0, ip, ror #6
   188a0:	andeq	fp, r0, r0, asr r3
   188a4:			; <UNDEFINED> instruction: 0x0000b5b8
   188a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188ac:	sub	sp, sp, #8320	; 0x2080
   188b0:	ldr	sl, [pc, #464]	; 18a88 <__assert_fail@plt+0x633c>
   188b4:	ldr	r3, [pc, #464]	; 18a8c <__assert_fail@plt+0x6340>
   188b8:	ldr	r2, [pc, #464]	; 18a90 <__assert_fail@plt+0x6344>
   188bc:	add	sl, pc, sl
   188c0:	add	r3, pc, r3
   188c4:	ldr	r1, [sl, r2]
   188c8:	ldr	r2, [r3]
   188cc:	sub	sp, sp, #36	; 0x24
   188d0:	tst	r2, #8
   188d4:	add	r2, sp, #8320	; 0x2080
   188d8:	ldr	r3, [r1]
   188dc:	add	r2, r2, #28
   188e0:	mov	r5, r0
   188e4:	str	r1, [sp, #8]
   188e8:	add	fp, r0, #384	; 0x180
   188ec:	str	r3, [r2]
   188f0:	bne	18a30 <__assert_fail@plt+0x62e4>
   188f4:	ldr	r2, [r5, #384]	; 0x180
   188f8:	cmp	r2, #0
   188fc:	beq	189e0 <__assert_fail@plt+0x6294>
   18900:	ldr	r8, [pc, #396]	; 18a94 <__assert_fail@plt+0x6348>
   18904:	add	r7, sp, #32
   18908:	add	r8, pc, r8
   1890c:	sub	r6, r7, #8
   18910:	add	r9, sp, #160	; 0xa0
   18914:	add	r4, sp, #156	; 0x9c
   18918:	str	fp, [sp, #12]
   1891c:	b	18938 <__assert_fail@plt+0x61ec>
   18920:	mov	r1, r6
   18924:	mov	r0, r5
   18928:	bl	18400 <__assert_fail@plt+0x5cb4>
   1892c:	cmp	r0, #0
   18930:	beq	18a08 <__assert_fail@plt+0x62bc>
   18934:	ldr	r2, [r5, #384]	; 0x180
   18938:	mov	r1, #8192	; 0x2000
   1893c:	mov	r0, r4
   18940:	bl	12140 <fgets@plt>
   18944:	cmp	r0, #0
   18948:	beq	18a04 <__assert_fail@plt+0x62b8>
   1894c:	mov	r3, r6
   18950:	sub	r2, r7, #12
   18954:	mov	r1, r8
   18958:	mov	r0, r4
   1895c:	bl	1262c <sscanf@plt>
   18960:	cmp	r0, #2
   18964:	bne	18934 <__assert_fail@plt+0x61e8>
   18968:	ldr	r3, [r9, #-140]	; 0xffffff74
   1896c:	cmp	r3, #7
   18970:	bne	18934 <__assert_fail@plt+0x61e8>
   18974:	ldr	r3, [pc, #284]	; 18a98 <__assert_fail@plt+0x634c>
   18978:	add	r3, pc, r3
   1897c:	ldr	r3, [r3]
   18980:	tst	r3, #8
   18984:	beq	18920 <__assert_fail@plt+0x61d4>
   18988:	ldr	r3, [pc, #268]	; 18a9c <__assert_fail@plt+0x6350>
   1898c:	ldr	r3, [sl, r3]
   18990:	ldr	fp, [r3]
   18994:	bl	123ec <getpid@plt>
   18998:	ldr	r2, [pc, #256]	; 18aa0 <__assert_fail@plt+0x6354>
   1899c:	ldr	r3, [pc, #256]	; 18aa4 <__assert_fail@plt+0x6358>
   189a0:	add	r2, pc, r2
   189a4:	str	r2, [sp, #4]
   189a8:	ldr	r2, [pc, #248]	; 18aa8 <__assert_fail@plt+0x635c>
   189ac:	add	r3, pc, r3
   189b0:	str	r3, [sp]
   189b4:	add	r2, pc, r2
   189b8:	mov	r1, #1
   189bc:	mov	r3, r0
   189c0:	mov	r0, fp
   189c4:	bl	12578 <__fprintf_chk@plt>
   189c8:	ldr	r1, [pc, #220]	; 18aac <__assert_fail@plt+0x6360>
   189cc:	mov	r2, r6
   189d0:	add	r1, pc, r1
   189d4:	ldr	r0, [sp, #12]
   189d8:	bl	16e4c <__assert_fail@plt+0x4700>
   189dc:	b	18920 <__assert_fail@plt+0x61d4>
   189e0:	ldr	r1, [pc, #200]	; 18ab0 <__assert_fail@plt+0x6364>
   189e4:	ldr	r0, [pc, #200]	; 18ab4 <__assert_fail@plt+0x6368>
   189e8:	add	r1, pc, r1
   189ec:	add	r0, pc, r0
   189f0:	bl	12680 <fopen64@plt>
   189f4:	cmp	r0, #0
   189f8:	mov	r2, r0
   189fc:	str	r0, [r5, #384]	; 0x180
   18a00:	bne	18900 <__assert_fail@plt+0x61b4>
   18a04:	mov	r0, #1
   18a08:	add	r3, sp, #8320	; 0x2080
   18a0c:	add	r3, r3, #28
   18a10:	ldr	r2, [r3]
   18a14:	ldr	r3, [sp, #8]
   18a18:	ldr	r3, [r3]
   18a1c:	cmp	r2, r3
   18a20:	bne	18a84 <__assert_fail@plt+0x6338>
   18a24:	add	sp, sp, #8320	; 0x2080
   18a28:	add	sp, sp, #36	; 0x24
   18a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a30:	ldr	r3, [pc, #100]	; 18a9c <__assert_fail@plt+0x6350>
   18a34:	ldr	r3, [sl, r3]
   18a38:	ldr	r4, [r3]
   18a3c:	bl	123ec <getpid@plt>
   18a40:	ldr	r2, [pc, #112]	; 18ab8 <__assert_fail@plt+0x636c>
   18a44:	ldr	r3, [pc, #112]	; 18abc <__assert_fail@plt+0x6370>
   18a48:	add	r2, pc, r2
   18a4c:	str	r2, [sp, #4]
   18a50:	ldr	r2, [pc, #104]	; 18ac0 <__assert_fail@plt+0x6374>
   18a54:	add	r3, pc, r3
   18a58:	str	r3, [sp]
   18a5c:	add	r2, pc, r2
   18a60:	mov	r1, #1
   18a64:	mov	r3, r0
   18a68:	mov	r0, r4
   18a6c:	bl	12578 <__fprintf_chk@plt>
   18a70:	ldr	r1, [pc, #76]	; 18ac4 <__assert_fail@plt+0x6378>
   18a74:	mov	r0, fp
   18a78:	add	r1, pc, r1
   18a7c:	bl	16e4c <__assert_fail@plt+0x4700>
   18a80:	b	188f4 <__assert_fail@plt+0x61a8>
   18a84:	bl	12200 <__stack_chk_fail@plt>
   18a88:	ldrdeq	ip, [r1], -r0
   18a8c:	andeq	ip, r1, ip, asr #18
   18a90:	andeq	r0, r0, ip, asr r2
   18a94:	andeq	fp, r0, ip, ror #10
   18a98:	muleq	r1, r4, r8
   18a9c:	andeq	r0, r0, r0, ror #4
   18aa0:	andeq	fp, r0, r0, asr #4
   18aa4:	andeq	fp, r0, r8, ror #3
   18aa8:	andeq	fp, r0, ip, asr #3
   18aac:			; <UNDEFINED> instruction: 0x0000b4bc
   18ab0:	andeq	fp, r0, r4, ror r4
   18ab4:	andeq	fp, r0, r4, ror r4
   18ab8:	muleq	r0, r8, r1
   18abc:	andeq	fp, r0, r0, asr #2
   18ac0:	andeq	fp, r0, r4, lsr #2
   18ac4:	andeq	fp, r0, ip, asr #7
   18ac8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18acc:	sub	sp, sp, #32
   18ad0:	ldr	r7, [pc, #800]	; 18df8 <__assert_fail@plt+0x66ac>
   18ad4:	ldr	r3, [pc, #800]	; 18dfc <__assert_fail@plt+0x66b0>
   18ad8:	add	r7, pc, r7
   18adc:	subs	r4, r0, #0
   18ae0:	ldr	r8, [r7, r3]
   18ae4:	ldr	r3, [r8]
   18ae8:	str	r3, [sp, #28]
   18aec:	beq	18dec <__assert_fail@plt+0x66a0>
   18af0:	ldrb	r3, [r4, #412]	; 0x19c
   18af4:	tst	r3, #1
   18af8:	movne	r0, #1
   18afc:	bne	18b44 <__assert_fail@plt+0x63f8>
   18b00:	ldr	r3, [pc, #760]	; 18e00 <__assert_fail@plt+0x66b4>
   18b04:	add	sl, r4, #384	; 0x180
   18b08:	add	r3, pc, r3
   18b0c:	ldr	r3, [r3]
   18b10:	tst	r3, #8
   18b14:	bne	18be8 <__assert_fail@plt+0x649c>
   18b18:	ldr	r5, [r4, #416]	; 0x1a0
   18b1c:	ands	r5, r5, #2
   18b20:	beq	18b5c <__assert_fail@plt+0x6410>
   18b24:	ldr	r3, [r4, #140]	; 0x8c
   18b28:	mov	r0, r4
   18b2c:	and	r3, r3, #96	; 0x60
   18b30:	cmp	r3, #64	; 0x40
   18b34:	beq	18d28 <__assert_fail@plt+0x65dc>
   18b38:	bl	188a8 <__assert_fail@plt+0x615c>
   18b3c:	cmp	r0, #0
   18b40:	bne	18c48 <__assert_fail@plt+0x64fc>
   18b44:	ldr	r2, [sp, #28]
   18b48:	ldr	r3, [r8]
   18b4c:	cmp	r2, r3
   18b50:	bne	18df4 <__assert_fail@plt+0x66a8>
   18b54:	add	sp, sp, #32
   18b58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b5c:	ldrb	r3, [r4, #412]	; 0x19c
   18b60:	tst	r3, #2
   18b64:	beq	18c64 <__assert_fail@plt+0x6518>
   18b68:	ldr	r3, [pc, #660]	; 18e04 <__assert_fail@plt+0x66b8>
   18b6c:	add	r3, pc, r3
   18b70:	ldr	r3, [r3]
   18b74:	tst	r3, #8
   18b78:	bne	18d30 <__assert_fail@plt+0x65e4>
   18b7c:	ldr	r2, [r4, #392]	; 0x188
   18b80:	add	r2, r2, #1
   18b84:	cmp	r2, #7
   18b88:	str	r2, [r4, #392]	; 0x188
   18b8c:	bgt	18c58 <__assert_fail@plt+0x650c>
   18b90:	ldr	r9, [pc, #624]	; 18e08 <__assert_fail@plt+0x66bc>
   18b94:	add	r6, sp, #12
   18b98:	add	r9, pc, r9
   18b9c:	b	18bb4 <__assert_fail@plt+0x6468>
   18ba0:	ldr	r2, [r4, #392]	; 0x188
   18ba4:	add	r2, r2, #1
   18ba8:	cmp	r2, #7
   18bac:	str	r2, [r4, #392]	; 0x188
   18bb0:	bgt	18c58 <__assert_fail@plt+0x650c>
   18bb4:	mov	r3, #16
   18bb8:	mov	r1, r3
   18bbc:	str	r2, [sp, #4]
   18bc0:	str	r9, [sp]
   18bc4:	mov	r2, #1
   18bc8:	mov	r0, r6
   18bcc:	bl	12728 <__snprintf_chk@plt>
   18bd0:	mov	r1, r6
   18bd4:	mov	r0, r4
   18bd8:	bl	18400 <__assert_fail@plt+0x5cb4>
   18bdc:	cmp	r0, #0
   18be0:	bne	18ba0 <__assert_fail@plt+0x6454>
   18be4:	b	18b44 <__assert_fail@plt+0x63f8>
   18be8:	ldr	r3, [pc, #540]	; 18e0c <__assert_fail@plt+0x66c0>
   18bec:	ldr	r3, [r7, r3]
   18bf0:	ldr	r5, [r3]
   18bf4:	bl	123ec <getpid@plt>
   18bf8:	ldr	r2, [pc, #528]	; 18e10 <__assert_fail@plt+0x66c4>
   18bfc:	ldr	r3, [pc, #528]	; 18e14 <__assert_fail@plt+0x66c8>
   18c00:	add	r2, pc, r2
   18c04:	str	r2, [sp, #4]
   18c08:	ldr	r2, [pc, #520]	; 18e18 <__assert_fail@plt+0x66cc>
   18c0c:	add	r3, pc, r3
   18c10:	str	r3, [sp]
   18c14:	add	r2, pc, r2
   18c18:	mov	r1, #1
   18c1c:	mov	r3, r0
   18c20:	mov	r0, r5
   18c24:	bl	12578 <__fprintf_chk@plt>
   18c28:	ldr	r1, [pc, #492]	; 18e1c <__assert_fail@plt+0x66d0>
   18c2c:	mov	r0, sl
   18c30:	add	r1, pc, r1
   18c34:	bl	16e4c <__assert_fail@plt+0x4700>
   18c38:	ldr	r5, [r4, #416]	; 0x1a0
   18c3c:	ands	r5, r5, #2
   18c40:	beq	18b5c <__assert_fail@plt+0x6410>
   18c44:	b	18b24 <__assert_fail@plt+0x63d8>
   18c48:	mov	r0, r4
   18c4c:	bl	17d64 <__assert_fail@plt+0x5618>
   18c50:	mov	r0, #1
   18c54:	b	18b44 <__assert_fail@plt+0x63f8>
   18c58:	ldrb	r3, [r4, #412]	; 0x19c
   18c5c:	bic	r3, r3, #2
   18c60:	strb	r3, [r4, #412]	; 0x19c
   18c64:	ldr	r3, [r4, #396]	; 0x18c
   18c68:	cmp	r3, #0
   18c6c:	beq	18cec <__assert_fail@plt+0x65a0>
   18c70:	ldr	r5, [r4, #392]	; 0x188
   18c74:	ldr	r0, [r4, #400]	; 0x190
   18c78:	add	r5, r5, #1
   18c7c:	cmp	r5, r0
   18c80:	str	r5, [r4, #392]	; 0x188
   18c84:	bge	18c48 <__assert_fail@plt+0x64fc>
   18c88:	ldr	r7, [pc, #400]	; 18e20 <__assert_fail@plt+0x66d4>
   18c8c:	add	r6, sp, #12
   18c90:	add	r7, pc, r7
   18c94:	b	18cb0 <__assert_fail@plt+0x6564>
   18c98:	ldr	r5, [r4, #392]	; 0x188
   18c9c:	ldr	r3, [r4, #400]	; 0x190
   18ca0:	add	r5, r5, #1
   18ca4:	cmp	r5, r3
   18ca8:	str	r5, [r4, #392]	; 0x188
   18cac:	bge	18c48 <__assert_fail@plt+0x64fc>
   18cb0:	ldr	r2, [r4, #396]	; 0x18c
   18cb4:	mov	r3, #16
   18cb8:	mov	r1, r3
   18cbc:	ldr	r0, [r2, r5, lsl #2]
   18cc0:	mov	r2, #1
   18cc4:	str	r0, [sp, #4]
   18cc8:	str	r7, [sp]
   18ccc:	mov	r0, r6
   18cd0:	bl	12728 <__snprintf_chk@plt>
   18cd4:	mov	r1, r6
   18cd8:	mov	r0, r4
   18cdc:	bl	18400 <__assert_fail@plt+0x5cb4>
   18ce0:	cmp	r0, #0
   18ce4:	bne	18c98 <__assert_fail@plt+0x654c>
   18ce8:	b	18b44 <__assert_fail@plt+0x63f8>
   18cec:	ldr	r3, [pc, #304]	; 18e24 <__assert_fail@plt+0x66d8>
   18cf0:	add	r3, pc, r3
   18cf4:	ldr	r3, [r3]
   18cf8:	tst	r3, #8
   18cfc:	bne	18d98 <__assert_fail@plt+0x664c>
   18d00:	ldr	r3, [r4, #140]	; 0x8c
   18d04:	add	r1, r4, #396	; 0x18c
   18d08:	tst	r3, #128	; 0x80
   18d0c:	bne	18d84 <__assert_fail@plt+0x6638>
   18d10:	ldr	r0, [pc, #272]	; 18e28 <__assert_fail@plt+0x66dc>
   18d14:	mov	r2, #1
   18d18:	add	r0, pc, r0
   18d1c:	bl	17128 <__assert_fail@plt+0x49dc>
   18d20:	str	r0, [r4, #400]	; 0x190
   18d24:	b	18c7c <__assert_fail@plt+0x6530>
   18d28:	bl	18644 <__assert_fail@plt+0x5ef8>
   18d2c:	b	18b3c <__assert_fail@plt+0x63f0>
   18d30:	ldr	r3, [pc, #212]	; 18e0c <__assert_fail@plt+0x66c0>
   18d34:	ldr	r3, [r7, r3]
   18d38:	ldr	r6, [r3]
   18d3c:	bl	123ec <getpid@plt>
   18d40:	ldr	r2, [pc, #228]	; 18e2c <__assert_fail@plt+0x66e0>
   18d44:	ldr	r3, [pc, #228]	; 18e30 <__assert_fail@plt+0x66e4>
   18d48:	add	r2, pc, r2
   18d4c:	str	r2, [sp, #4]
   18d50:	ldr	r2, [pc, #220]	; 18e34 <__assert_fail@plt+0x66e8>
   18d54:	add	r3, pc, r3
   18d58:	str	r3, [sp]
   18d5c:	add	r2, pc, r2
   18d60:	mov	r1, #1
   18d64:	mov	r3, r0
   18d68:	mov	r0, r6
   18d6c:	bl	12578 <__fprintf_chk@plt>
   18d70:	ldr	r1, [pc, #192]	; 18e38 <__assert_fail@plt+0x66ec>
   18d74:	mov	r0, sl
   18d78:	add	r1, pc, r1
   18d7c:	bl	16e4c <__assert_fail@plt+0x4700>
   18d80:	b	18b7c <__assert_fail@plt+0x6430>
   18d84:	ldr	r0, [pc, #176]	; 18e3c <__assert_fail@plt+0x66f0>
   18d88:	mov	r2, #0
   18d8c:	add	r0, pc, r0
   18d90:	bl	17128 <__assert_fail@plt+0x49dc>
   18d94:	b	18d20 <__assert_fail@plt+0x65d4>
   18d98:	ldr	r3, [pc, #108]	; 18e0c <__assert_fail@plt+0x66c0>
   18d9c:	ldr	r3, [r7, r3]
   18da0:	ldr	r6, [r3]
   18da4:	bl	123ec <getpid@plt>
   18da8:	ldr	r2, [pc, #144]	; 18e40 <__assert_fail@plt+0x66f4>
   18dac:	ldr	r3, [pc, #144]	; 18e44 <__assert_fail@plt+0x66f8>
   18db0:	add	r2, pc, r2
   18db4:	str	r2, [sp, #4]
   18db8:	ldr	r2, [pc, #136]	; 18e48 <__assert_fail@plt+0x66fc>
   18dbc:	add	r3, pc, r3
   18dc0:	str	r3, [sp]
   18dc4:	add	r2, pc, r2
   18dc8:	mov	r1, #1
   18dcc:	mov	r3, r0
   18dd0:	mov	r0, r6
   18dd4:	bl	12578 <__fprintf_chk@plt>
   18dd8:	ldr	r1, [pc, #108]	; 18e4c <__assert_fail@plt+0x6700>
   18ddc:	mov	r0, sl
   18de0:	add	r1, pc, r1
   18de4:	bl	16e4c <__assert_fail@plt+0x4700>
   18de8:	b	18d00 <__assert_fail@plt+0x65b4>
   18dec:	mvn	r0, #21
   18df0:	b	18b44 <__assert_fail@plt+0x63f8>
   18df4:	bl	12200 <__stack_chk_fail@plt>
   18df8:			; <UNDEFINED> instruction: 0x0001c2b4
   18dfc:	andeq	r0, r0, ip, asr r2
   18e00:	andeq	ip, r1, r4, lsl #14
   18e04:	andeq	ip, r1, r0, lsr #13
   18e08:	andeq	fp, r0, ip, lsl r3
   18e0c:	andeq	r0, r0, r0, ror #4
   18e10:	andeq	sl, r0, r0, ror #31
   18e14:	andeq	sl, r0, r8, lsl #31
   18e18:	andeq	sl, r0, ip, ror #30
   18e1c:	andeq	fp, r0, r8, ror #4
   18e20:	andeq	fp, r0, r4, lsr #4
   18e24:	andeq	ip, r1, ip, lsl r5
   18e28:	andeq	sl, r0, r4, ror #29
   18e2c:	muleq	r0, r8, lr
   18e30:	andeq	sl, r0, r0, asr #28
   18e34:	andeq	sl, r0, r4, lsr #28
   18e38:	andeq	fp, r0, r8, lsr #2
   18e3c:	andeq	sl, r0, r4, lsr #31
   18e40:	andeq	sl, r0, r0, lsr lr
   18e44:	ldrdeq	sl, [r0], -r8
   18e48:			; <UNDEFINED> instruction: 0x0000adbc
   18e4c:	ldrdeq	fp, [r0], -ip
   18e50:	push	{r4, r5, r6, r7, lr}
   18e54:	sub	sp, sp, #20
   18e58:	ldr	r4, [pc, #256]	; 18f60 <__assert_fail@plt+0x6814>
   18e5c:	ldr	r3, [pc, #256]	; 18f64 <__assert_fail@plt+0x6818>
   18e60:	add	r4, pc, r4
   18e64:	mov	r7, r1
   18e68:	ldr	r5, [r4, r3]
   18e6c:	mov	r6, r0
   18e70:	ldr	r3, [r5]
   18e74:	str	r3, [sp, #12]
   18e78:	bl	16f18 <__assert_fail@plt+0x47cc>
   18e7c:	cmp	r0, #0
   18e80:	beq	18e9c <__assert_fail@plt+0x6750>
   18e84:	ldr	r2, [pc, #220]	; 18f68 <__assert_fail@plt+0x681c>
   18e88:	mov	r1, r7
   18e8c:	add	r2, pc, r2
   18e90:	bl	1e054 <__assert_fail@plt+0xb908>
   18e94:	cmp	r0, #0
   18e98:	beq	18ed0 <__assert_fail@plt+0x6784>
   18e9c:	mov	r0, r6
   18ea0:	bl	17ac0 <__assert_fail@plt+0x5374>
   18ea4:	mov	r3, #0
   18ea8:	str	r3, [sp, #8]
   18eac:	cmp	r0, r3
   18eb0:	blt	18ef8 <__assert_fail@plt+0x67ac>
   18eb4:	add	r1, sp, #8
   18eb8:	bl	211e4 <__assert_fail@plt+0xea98>
   18ebc:	cmp	r0, #0
   18ec0:	bne	18ee0 <__assert_fail@plt+0x6794>
   18ec4:	ldr	r2, [sp, #8]
   18ec8:	asr	r3, r2, #31
   18ecc:	strd	r2, [r7]
   18ed0:	ldr	r3, [pc, #148]	; 18f6c <__assert_fail@plt+0x6820>
   18ed4:	ldr	r0, [pc, r3]
   18ed8:	ands	r0, r0, #4
   18edc:	bne	18f00 <__assert_fail@plt+0x67b4>
   18ee0:	ldr	r2, [sp, #12]
   18ee4:	ldr	r3, [r5]
   18ee8:	cmp	r2, r3
   18eec:	bne	18f5c <__assert_fail@plt+0x6810>
   18ef0:	add	sp, sp, #20
   18ef4:	pop	{r4, r5, r6, r7, pc}
   18ef8:	mvn	r0, #21
   18efc:	b	18ee0 <__assert_fail@plt+0x6794>
   18f00:	ldr	r3, [pc, #104]	; 18f70 <__assert_fail@plt+0x6824>
   18f04:	ldr	r3, [r4, r3]
   18f08:	ldr	r4, [r3]
   18f0c:	bl	123ec <getpid@plt>
   18f10:	ldr	r2, [pc, #92]	; 18f74 <__assert_fail@plt+0x6828>
   18f14:	ldr	r3, [pc, #92]	; 18f78 <__assert_fail@plt+0x682c>
   18f18:	add	r2, pc, r2
   18f1c:	str	r2, [sp, #4]
   18f20:	ldr	r2, [pc, #84]	; 18f7c <__assert_fail@plt+0x6830>
   18f24:	add	r3, pc, r3
   18f28:	str	r3, [sp]
   18f2c:	add	r2, pc, r2
   18f30:	mov	r1, #1
   18f34:	mov	r3, r0
   18f38:	mov	r0, r4
   18f3c:	bl	12578 <__fprintf_chk@plt>
   18f40:	ldr	r1, [pc, #56]	; 18f80 <__assert_fail@plt+0x6834>
   18f44:	mov	r0, r6
   18f48:	mov	r2, #0
   18f4c:	add	r1, pc, r1
   18f50:	bl	16e4c <__assert_fail@plt+0x4700>
   18f54:	mov	r0, #0
   18f58:	b	18ee0 <__assert_fail@plt+0x6794>
   18f5c:	bl	12200 <__stack_chk_fail@plt>
   18f60:	andeq	fp, r1, ip, lsr #30
   18f64:	andeq	r0, r0, ip, asr r2
   18f68:	andeq	fp, r0, r4, asr #32
   18f6c:	andeq	ip, r1, r8, lsr r3
   18f70:	andeq	r0, r0, r0, ror #4
   18f74:	andeq	sl, r0, r8, ror ip
   18f78:	andeq	sl, r0, r0, ror ip
   18f7c:	andeq	sl, r0, r4, asr ip
   18f80:	andeq	sl, r0, r0, lsr #31
   18f84:	push	{r4, r5, r6, r7, r8, lr}
   18f88:	sub	sp, sp, #8
   18f8c:	mov	r8, r1
   18f90:	mov	r7, r0
   18f94:	bl	16f18 <__assert_fail@plt+0x47cc>
   18f98:	ldr	r6, [pc, #256]	; 190a0 <__assert_fail@plt+0x6954>
   18f9c:	add	r6, pc, r6
   18fa0:	cmp	r0, #0
   18fa4:	beq	1901c <__assert_fail@plt+0x68d0>
   18fa8:	ldr	r2, [pc, #244]	; 190a4 <__assert_fail@plt+0x6958>
   18fac:	mov	r1, r8
   18fb0:	add	r2, pc, r2
   18fb4:	bl	1e054 <__assert_fail@plt+0xb908>
   18fb8:	subs	r5, r0, #0
   18fbc:	beq	18fec <__assert_fail@plt+0x68a0>
   18fc0:	ldr	r3, [r7, #140]	; 0x8c
   18fc4:	ands	r4, r3, #64	; 0x40
   18fc8:	beq	18ff4 <__assert_fail@plt+0x68a8>
   18fcc:	ldr	r3, [pc, #212]	; 190a8 <__assert_fail@plt+0x695c>
   18fd0:	add	r3, pc, r3
   18fd4:	ldr	r3, [r3]
   18fd8:	tst	r3, #4
   18fdc:	bne	19030 <__assert_fail@plt+0x68e4>
   18fe0:	mov	r0, r5
   18fe4:	add	sp, sp, #8
   18fe8:	pop	{r4, r5, r6, r7, r8, pc}
   18fec:	mov	r5, #0
   18ff0:	b	18fcc <__assert_fail@plt+0x6880>
   18ff4:	mov	r0, r7
   18ff8:	bl	17fd0 <__assert_fail@plt+0x5884>
   18ffc:	cmp	r0, #0
   19000:	beq	19090 <__assert_fail@plt+0x6944>
   19004:	cmp	r8, #0
   19008:	beq	18fec <__assert_fail@plt+0x68a0>
   1900c:	ldrd	r2, [r0, #32]
   19010:	mov	r5, r4
   19014:	strd	r2, [r8]
   19018:	b	18fcc <__assert_fail@plt+0x6880>
   1901c:	ldr	r3, [r7, #140]	; 0x8c
   19020:	mvn	r5, #21
   19024:	ands	r4, r3, #64	; 0x40
   19028:	bne	18fcc <__assert_fail@plt+0x6880>
   1902c:	b	18ff4 <__assert_fail@plt+0x68a8>
   19030:	ldr	r3, [pc, #116]	; 190ac <__assert_fail@plt+0x6960>
   19034:	ldr	r3, [r6, r3]
   19038:	ldr	r4, [r3]
   1903c:	bl	123ec <getpid@plt>
   19040:	ldr	r2, [pc, #104]	; 190b0 <__assert_fail@plt+0x6964>
   19044:	ldr	r3, [pc, #104]	; 190b4 <__assert_fail@plt+0x6968>
   19048:	add	r2, pc, r2
   1904c:	str	r2, [sp, #4]
   19050:	ldr	r2, [pc, #96]	; 190b8 <__assert_fail@plt+0x696c>
   19054:	add	r3, pc, r3
   19058:	str	r3, [sp]
   1905c:	add	r2, pc, r2
   19060:	mov	r1, #1
   19064:	mov	r3, r0
   19068:	mov	r0, r4
   1906c:	bl	12578 <__fprintf_chk@plt>
   19070:	ldr	r1, [pc, #68]	; 190bc <__assert_fail@plt+0x6970>
   19074:	mov	r0, r7
   19078:	mov	r2, r5
   1907c:	add	r1, pc, r1
   19080:	bl	16e4c <__assert_fail@plt+0x4700>
   19084:	mov	r0, r5
   19088:	add	sp, sp, #8
   1908c:	pop	{r4, r5, r6, r7, r8, pc}
   19090:	bl	1247c <__errno_location@plt>
   19094:	ldr	r5, [r0]
   19098:	rsb	r5, r5, #0
   1909c:	b	18fcc <__assert_fail@plt+0x6880>
   190a0:	strdeq	fp, [r1], -r0
   190a4:	andeq	sl, r0, r4, asr pc
   190a8:	andeq	ip, r1, ip, lsr r2
   190ac:	andeq	r0, r0, r0, ror #4
   190b0:	andeq	sl, r0, r8, asr #22
   190b4:	andeq	sl, r0, r0, asr #22
   190b8:	andeq	sl, r0, r4, lsr #22
   190bc:	muleq	r0, r8, lr
   190c0:	push	{r4, r5, r6, r7, lr}
   190c4:	sub	sp, sp, #12
   190c8:	mov	r5, r1
   190cc:	mov	r7, r0
   190d0:	bl	17fd0 <__assert_fail@plt+0x5884>
   190d4:	ldr	r6, [pc, #172]	; 19188 <__assert_fail@plt+0x6a3c>
   190d8:	add	r6, pc, r6
   190dc:	cmp	r0, #0
   190e0:	beq	19178 <__assert_fail@plt+0x6a2c>
   190e4:	cmp	r5, #0
   190e8:	moveq	r4, r5
   190ec:	ldrne	r3, [r0, #44]	; 0x2c
   190f0:	movne	r4, #0
   190f4:	strne	r3, [r5]
   190f8:	ldr	r3, [pc, #140]	; 1918c <__assert_fail@plt+0x6a40>
   190fc:	add	r3, pc, r3
   19100:	ldr	r3, [r3]
   19104:	tst	r3, #4
   19108:	bne	19118 <__assert_fail@plt+0x69cc>
   1910c:	mov	r0, r4
   19110:	add	sp, sp, #12
   19114:	pop	{r4, r5, r6, r7, pc}
   19118:	ldr	r3, [pc, #112]	; 19190 <__assert_fail@plt+0x6a44>
   1911c:	ldr	r3, [r6, r3]
   19120:	ldr	r5, [r3]
   19124:	bl	123ec <getpid@plt>
   19128:	ldr	r2, [pc, #100]	; 19194 <__assert_fail@plt+0x6a48>
   1912c:	ldr	r3, [pc, #100]	; 19198 <__assert_fail@plt+0x6a4c>
   19130:	add	r2, pc, r2
   19134:	str	r2, [sp, #4]
   19138:	ldr	r2, [pc, #92]	; 1919c <__assert_fail@plt+0x6a50>
   1913c:	add	r3, pc, r3
   19140:	str	r3, [sp]
   19144:	add	r2, pc, r2
   19148:	mov	r1, #1
   1914c:	mov	r3, r0
   19150:	mov	r0, r5
   19154:	bl	12578 <__fprintf_chk@plt>
   19158:	ldr	r1, [pc, #64]	; 191a0 <__assert_fail@plt+0x6a54>
   1915c:	mov	r0, r7
   19160:	mov	r2, r4
   19164:	add	r1, pc, r1
   19168:	bl	16e4c <__assert_fail@plt+0x4700>
   1916c:	mov	r0, r4
   19170:	add	sp, sp, #12
   19174:	pop	{r4, r5, r6, r7, pc}
   19178:	bl	1247c <__errno_location@plt>
   1917c:	ldr	r4, [r0]
   19180:	rsb	r4, r4, #0
   19184:	b	190f8 <__assert_fail@plt+0x69ac>
   19188:			; <UNDEFINED> instruction: 0x0001bcb4
   1918c:	andeq	ip, r1, r0, lsl r1
   19190:	andeq	r0, r0, r0, ror #4
   19194:	andeq	sl, r0, r0, ror #20
   19198:	andeq	sl, r0, r8, asr sl
   1919c:	andeq	sl, r0, ip, lsr sl
   191a0:	andeq	sl, r0, r8, asr #27
   191a4:	push	{r4, r5, r6, lr}
   191a8:	sub	sp, sp, #8
   191ac:	mov	r5, r0
   191b0:	bl	17fd0 <__assert_fail@plt+0x5884>
   191b4:	ldr	r3, [pc, #128]	; 1923c <__assert_fail@plt+0x6af0>
   191b8:	add	r3, pc, r3
   191bc:	subs	r4, r0, #0
   191c0:	addne	r0, r4, #120	; 0x78
   191c4:	beq	191d0 <__assert_fail@plt+0x6a84>
   191c8:	add	sp, sp, #8
   191cc:	pop	{r4, r5, r6, pc}
   191d0:	ldr	r2, [pc, #104]	; 19240 <__assert_fail@plt+0x6af4>
   191d4:	ldr	r0, [pc, r2]
   191d8:	ands	r0, r0, #4
   191dc:	beq	191c8 <__assert_fail@plt+0x6a7c>
   191e0:	ldr	r2, [pc, #92]	; 19244 <__assert_fail@plt+0x6af8>
   191e4:	ldr	r3, [r3, r2]
   191e8:	ldr	r6, [r3]
   191ec:	bl	123ec <getpid@plt>
   191f0:	ldr	r2, [pc, #80]	; 19248 <__assert_fail@plt+0x6afc>
   191f4:	ldr	r3, [pc, #80]	; 1924c <__assert_fail@plt+0x6b00>
   191f8:	add	r2, pc, r2
   191fc:	str	r2, [sp, #4]
   19200:	ldr	r2, [pc, #72]	; 19250 <__assert_fail@plt+0x6b04>
   19204:	add	r3, pc, r3
   19208:	str	r3, [sp]
   1920c:	add	r2, pc, r2
   19210:	mov	r1, #1
   19214:	mov	r3, r0
   19218:	mov	r0, r6
   1921c:	bl	12578 <__fprintf_chk@plt>
   19220:	ldr	r1, [pc, #44]	; 19254 <__assert_fail@plt+0x6b08>
   19224:	mov	r0, r5
   19228:	add	r1, pc, r1
   1922c:	bl	16e4c <__assert_fail@plt+0x4700>
   19230:	mov	r0, r4
   19234:	add	sp, sp, #8
   19238:	pop	{r4, r5, r6, pc}
   1923c:	ldrdeq	fp, [r1], -r4
   19240:	andeq	ip, r1, r8, lsr r0
   19244:	andeq	r0, r0, r0, ror #4
   19248:	muleq	r0, r8, r9
   1924c:	muleq	r0, r0, r9
   19250:	andeq	sl, r0, r4, ror r9
   19254:	andeq	sl, r0, r0, lsr #26
   19258:	push	{r4, r5, r6, r7, lr}
   1925c:	sub	sp, sp, #12
   19260:	mov	r5, r1
   19264:	mov	r7, r0
   19268:	bl	17fd0 <__assert_fail@plt+0x5884>
   1926c:	ldr	r6, [pc, #172]	; 19320 <__assert_fail@plt+0x6bd4>
   19270:	add	r6, pc, r6
   19274:	cmp	r0, #0
   19278:	beq	19310 <__assert_fail@plt+0x6bc4>
   1927c:	cmp	r5, #0
   19280:	moveq	r4, r5
   19284:	ldrdne	r2, [r0]
   19288:	movne	r4, #0
   1928c:	strdne	r2, [r5]
   19290:	ldr	r3, [pc, #140]	; 19324 <__assert_fail@plt+0x6bd8>
   19294:	add	r3, pc, r3
   19298:	ldr	r3, [r3]
   1929c:	tst	r3, #4
   192a0:	bne	192b0 <__assert_fail@plt+0x6b64>
   192a4:	mov	r0, r4
   192a8:	add	sp, sp, #12
   192ac:	pop	{r4, r5, r6, r7, pc}
   192b0:	ldr	r3, [pc, #112]	; 19328 <__assert_fail@plt+0x6bdc>
   192b4:	ldr	r3, [r6, r3]
   192b8:	ldr	r5, [r3]
   192bc:	bl	123ec <getpid@plt>
   192c0:	ldr	r2, [pc, #100]	; 1932c <__assert_fail@plt+0x6be0>
   192c4:	ldr	r3, [pc, #100]	; 19330 <__assert_fail@plt+0x6be4>
   192c8:	add	r2, pc, r2
   192cc:	str	r2, [sp, #4]
   192d0:	ldr	r2, [pc, #92]	; 19334 <__assert_fail@plt+0x6be8>
   192d4:	add	r3, pc, r3
   192d8:	str	r3, [sp]
   192dc:	add	r2, pc, r2
   192e0:	mov	r1, #1
   192e4:	mov	r3, r0
   192e8:	mov	r0, r5
   192ec:	bl	12578 <__fprintf_chk@plt>
   192f0:	ldr	r1, [pc, #64]	; 19338 <__assert_fail@plt+0x6bec>
   192f4:	mov	r0, r7
   192f8:	mov	r2, r4
   192fc:	add	r1, pc, r1
   19300:	bl	16e4c <__assert_fail@plt+0x4700>
   19304:	mov	r0, r4
   19308:	add	sp, sp, #12
   1930c:	pop	{r4, r5, r6, r7, pc}
   19310:	bl	1247c <__errno_location@plt>
   19314:	ldr	r4, [r0]
   19318:	rsb	r4, r4, #0
   1931c:	b	19290 <__assert_fail@plt+0x6b44>
   19320:	andeq	fp, r1, ip, lsl fp
   19324:	andeq	fp, r1, r8, ror pc
   19328:	andeq	r0, r0, r0, ror #4
   1932c:	andeq	sl, r0, r8, asr #17
   19330:	andeq	sl, r0, r0, asr #17
   19334:	andeq	sl, r0, r4, lsr #17
   19338:	andeq	sl, r0, r4, ror #24
   1933c:	push	{r4, r5, r6, r7, lr}
   19340:	sub	sp, sp, #12
   19344:	mov	r5, r1
   19348:	mov	r7, r0
   1934c:	bl	17fd0 <__assert_fail@plt+0x5884>
   19350:	ldr	r6, [pc, #172]	; 19404 <__assert_fail@plt+0x6cb8>
   19354:	add	r6, pc, r6
   19358:	cmp	r0, #0
   1935c:	beq	193f4 <__assert_fail@plt+0x6ca8>
   19360:	cmp	r5, #0
   19364:	moveq	r4, r5
   19368:	ldrdne	r2, [r0, #8]
   1936c:	movne	r4, #0
   19370:	strdne	r2, [r5]
   19374:	ldr	r3, [pc, #140]	; 19408 <__assert_fail@plt+0x6cbc>
   19378:	add	r3, pc, r3
   1937c:	ldr	r3, [r3]
   19380:	tst	r3, #4
   19384:	bne	19394 <__assert_fail@plt+0x6c48>
   19388:	mov	r0, r4
   1938c:	add	sp, sp, #12
   19390:	pop	{r4, r5, r6, r7, pc}
   19394:	ldr	r3, [pc, #112]	; 1940c <__assert_fail@plt+0x6cc0>
   19398:	ldr	r3, [r6, r3]
   1939c:	ldr	r5, [r3]
   193a0:	bl	123ec <getpid@plt>
   193a4:	ldr	r2, [pc, #100]	; 19410 <__assert_fail@plt+0x6cc4>
   193a8:	ldr	r3, [pc, #100]	; 19414 <__assert_fail@plt+0x6cc8>
   193ac:	add	r2, pc, r2
   193b0:	str	r2, [sp, #4]
   193b4:	ldr	r2, [pc, #92]	; 19418 <__assert_fail@plt+0x6ccc>
   193b8:	add	r3, pc, r3
   193bc:	str	r3, [sp]
   193c0:	add	r2, pc, r2
   193c4:	mov	r1, #1
   193c8:	mov	r3, r0
   193cc:	mov	r0, r5
   193d0:	bl	12578 <__fprintf_chk@plt>
   193d4:	ldr	r1, [pc, #64]	; 1941c <__assert_fail@plt+0x6cd0>
   193d8:	mov	r0, r7
   193dc:	mov	r2, r4
   193e0:	add	r1, pc, r1
   193e4:	bl	16e4c <__assert_fail@plt+0x4700>
   193e8:	mov	r0, r4
   193ec:	add	sp, sp, #12
   193f0:	pop	{r4, r5, r6, r7, pc}
   193f4:	bl	1247c <__errno_location@plt>
   193f8:	ldr	r4, [r0]
   193fc:	rsb	r4, r4, #0
   19400:	b	19374 <__assert_fail@plt+0x6c28>
   19404:	andeq	fp, r1, r8, lsr sl
   19408:	muleq	r1, r4, lr
   1940c:	andeq	r0, r0, r0, ror #4
   19410:	andeq	sl, r0, r4, ror #15
   19414:	ldrdeq	sl, [r0], -ip
   19418:	andeq	sl, r0, r0, asr #15
   1941c:	muleq	r0, ip, fp
   19420:	ldr	r3, [pc, #156]	; 194c4 <__assert_fail@plt+0x6d78>
   19424:	ldr	r2, [pc, #156]	; 194c8 <__assert_fail@plt+0x6d7c>
   19428:	add	r3, pc, r3
   1942c:	push	{r4, r5, r6, lr}
   19430:	sub	sp, sp, #8
   19434:	ldr	r4, [r3, r2]
   19438:	mov	r1, #0
   1943c:	str	r1, [sp]
   19440:	ldr	r3, [r4]
   19444:	str	r3, [sp, #4]
   19448:	bl	21f5c <__assert_fail@plt+0xf810>
   1944c:	ldr	r3, [pc, #120]	; 194cc <__assert_fail@plt+0x6d80>
   19450:	cmp	r0, r3
   19454:	movgt	r0, #1
   19458:	ble	19474 <__assert_fail@plt+0x6d28>
   1945c:	ldr	r2, [sp, #4]
   19460:	ldr	r3, [r4]
   19464:	cmp	r2, r3
   19468:	bne	194c0 <__assert_fail@plt+0x6d74>
   1946c:	add	sp, sp, #8
   19470:	pop	{r4, r5, r6, pc}
   19474:	ldr	r1, [pc, #84]	; 194d0 <__assert_fail@plt+0x6d84>
   19478:	ldr	r0, [pc, #84]	; 194d4 <__assert_fail@plt+0x6d88>
   1947c:	add	r1, pc, r1
   19480:	add	r0, pc, r0
   19484:	bl	12680 <fopen64@plt>
   19488:	subs	r5, r0, #0
   1948c:	beq	194b8 <__assert_fail@plt+0x6d6c>
   19490:	ldr	r1, [pc, #64]	; 194d8 <__assert_fail@plt+0x6d8c>
   19494:	mov	r2, sp
   19498:	add	r1, pc, r1
   1949c:	bl	12500 <fscanf@plt>
   194a0:	mov	r6, r0
   194a4:	mov	r0, r5
   194a8:	bl	12590 <fclose@plt>
   194ac:	cmp	r6, #1
   194b0:	ldreq	r0, [sp]
   194b4:	beq	1945c <__assert_fail@plt+0x6d10>
   194b8:	mov	r0, #0
   194bc:	b	1945c <__assert_fail@plt+0x6d10>
   194c0:	bl	12200 <__stack_chk_fail@plt>
   194c4:	andeq	fp, r1, r4, ror #18
   194c8:	andeq	r0, r0, ip, asr r2
   194cc:	strdeq	r0, [r3], -pc	; <UNPREDICTABLE>
   194d0:	andeq	sl, r0, r0, ror #19
   194d4:	andeq	sl, r0, r8, lsl fp
   194d8:	andeq	sl, r0, r0, lsr #20
   194dc:	ldr	r3, [pc, #96]	; 19544 <__assert_fail@plt+0x6df8>
   194e0:	ldr	r2, [pc, #96]	; 19548 <__assert_fail@plt+0x6dfc>
   194e4:	add	r3, pc, r3
   194e8:	push	{r4, lr}
   194ec:	sub	sp, sp, #8
   194f0:	ldr	r4, [r3, r2]
   194f4:	ldr	r3, [r4]
   194f8:	str	r3, [sp, #4]
   194fc:	bl	16f18 <__assert_fail@plt+0x47cc>
   19500:	cmp	r0, #0
   19504:	beq	19524 <__assert_fail@plt+0x6dd8>
   19508:	ldr	r2, [pc, #60]	; 1954c <__assert_fail@plt+0x6e00>
   1950c:	mov	r1, sp
   19510:	add	r2, pc, r2
   19514:	bl	1e16c <__assert_fail@plt+0xba20>
   19518:	cmp	r0, #0
   1951c:	ldreq	r0, [sp]
   19520:	beq	19528 <__assert_fail@plt+0x6ddc>
   19524:	bl	19420 <__assert_fail@plt+0x6cd4>
   19528:	ldr	r2, [sp, #4]
   1952c:	ldr	r3, [r4]
   19530:	cmp	r2, r3
   19534:	bne	19540 <__assert_fail@plt+0x6df4>
   19538:	add	sp, sp, #8
   1953c:	pop	{r4, pc}
   19540:	bl	12200 <__stack_chk_fail@plt>
   19544:	andeq	fp, r1, r8, lsr #17
   19548:	andeq	r0, r0, ip, asr r2
   1954c:			; <UNDEFINED> instruction: 0x0000aab0
   19550:	ldr	r3, [pc, #140]	; 195e4 <__assert_fail@plt+0x6e98>
   19554:	ldr	r2, [pc, #140]	; 195e8 <__assert_fail@plt+0x6e9c>
   19558:	add	r3, pc, r3
   1955c:	push	{r4, r5, lr}
   19560:	sub	sp, sp, #12
   19564:	ldr	r4, [r3, r2]
   19568:	mov	r5, r0
   1956c:	ldr	r3, [r4]
   19570:	str	r3, [sp, #4]
   19574:	bl	16f18 <__assert_fail@plt+0x47cc>
   19578:	cmp	r0, #0
   1957c:	beq	1959c <__assert_fail@plt+0x6e50>
   19580:	ldr	r2, [pc, #100]	; 195ec <__assert_fail@plt+0x6ea0>
   19584:	mov	r1, sp
   19588:	add	r2, pc, r2
   1958c:	bl	1e16c <__assert_fail@plt+0xba20>
   19590:	cmp	r0, #0
   19594:	ldreq	r0, [sp]
   19598:	beq	195ac <__assert_fail@plt+0x6e60>
   1959c:	ldr	r3, [r5, #140]	; 0x8c
   195a0:	tst	r3, #64	; 0x40
   195a4:	beq	195c4 <__assert_fail@plt+0x6e78>
   195a8:	mov	r0, #0
   195ac:	ldr	r2, [sp, #4]
   195b0:	ldr	r3, [r4]
   195b4:	cmp	r2, r3
   195b8:	bne	195e0 <__assert_fail@plt+0x6e94>
   195bc:	add	sp, sp, #12
   195c0:	pop	{r4, r5, pc}
   195c4:	mov	r0, r5
   195c8:	bl	17fd0 <__assert_fail@plt+0x5884>
   195cc:	cmp	r0, #0
   195d0:	beq	195a8 <__assert_fail@plt+0x6e5c>
   195d4:	ldr	r0, [r0, #52]	; 0x34
   195d8:	and	r0, r0, #4
   195dc:	b	195ac <__assert_fail@plt+0x6e60>
   195e0:	bl	12200 <__stack_chk_fail@plt>
   195e4:	andeq	fp, r1, r4, lsr r8
   195e8:	andeq	r0, r0, ip, asr r2
   195ec:	andeq	sl, r0, r8, asr #20
   195f0:	ldr	r3, [pc, #140]	; 19684 <__assert_fail@plt+0x6f38>
   195f4:	ldr	r2, [pc, #140]	; 19688 <__assert_fail@plt+0x6f3c>
   195f8:	add	r3, pc, r3
   195fc:	push	{r4, r5, lr}
   19600:	sub	sp, sp, #12
   19604:	ldr	r4, [r3, r2]
   19608:	mov	r5, r0
   1960c:	ldr	r3, [r4]
   19610:	str	r3, [sp, #4]
   19614:	bl	16f18 <__assert_fail@plt+0x47cc>
   19618:	cmp	r0, #0
   1961c:	beq	1963c <__assert_fail@plt+0x6ef0>
   19620:	ldr	r2, [pc, #100]	; 1968c <__assert_fail@plt+0x6f40>
   19624:	mov	r1, sp
   19628:	add	r2, pc, r2
   1962c:	bl	1e16c <__assert_fail@plt+0xba20>
   19630:	cmp	r0, #0
   19634:	ldreq	r0, [sp]
   19638:	beq	1964c <__assert_fail@plt+0x6f00>
   1963c:	ldr	r3, [r5, #140]	; 0x8c
   19640:	tst	r3, #64	; 0x40
   19644:	beq	19664 <__assert_fail@plt+0x6f18>
   19648:	mov	r0, #0
   1964c:	ldr	r2, [sp, #4]
   19650:	ldr	r3, [r4]
   19654:	cmp	r2, r3
   19658:	bne	19680 <__assert_fail@plt+0x6f34>
   1965c:	add	sp, sp, #12
   19660:	pop	{r4, r5, pc}
   19664:	mov	r0, r5
   19668:	bl	17fd0 <__assert_fail@plt+0x5884>
   1966c:	cmp	r0, #0
   19670:	beq	19648 <__assert_fail@plt+0x6efc>
   19674:	ldr	r0, [r0, #52]	; 0x34
   19678:	and	r0, r0, #1
   1967c:	b	1964c <__assert_fail@plt+0x6f00>
   19680:	bl	12200 <__stack_chk_fail@plt>
   19684:	muleq	r1, r4, r7
   19688:	andeq	r0, r0, ip, asr r2
   1968c:	andeq	sl, r0, r4, ror #13
   19690:	ldr	r3, [pc, #140]	; 19724 <__assert_fail@plt+0x6fd8>
   19694:	ldr	r2, [pc, #140]	; 19728 <__assert_fail@plt+0x6fdc>
   19698:	add	r3, pc, r3
   1969c:	push	{r4, r5, lr}
   196a0:	sub	sp, sp, #12
   196a4:	ldr	r4, [r3, r2]
   196a8:	mov	r5, r0
   196ac:	ldr	r3, [r4]
   196b0:	str	r3, [sp, #4]
   196b4:	bl	16f18 <__assert_fail@plt+0x47cc>
   196b8:	cmp	r0, #0
   196bc:	beq	196dc <__assert_fail@plt+0x6f90>
   196c0:	ldr	r2, [pc, #100]	; 1972c <__assert_fail@plt+0x6fe0>
   196c4:	mov	r1, sp
   196c8:	add	r2, pc, r2
   196cc:	bl	1e16c <__assert_fail@plt+0xba20>
   196d0:	cmp	r0, #0
   196d4:	ldreq	r0, [sp]
   196d8:	beq	196ec <__assert_fail@plt+0x6fa0>
   196dc:	ldr	r3, [r5, #140]	; 0x8c
   196e0:	tst	r3, #64	; 0x40
   196e4:	beq	19704 <__assert_fail@plt+0x6fb8>
   196e8:	mov	r0, #0
   196ec:	ldr	r2, [sp, #4]
   196f0:	ldr	r3, [r4]
   196f4:	cmp	r2, r3
   196f8:	bne	19720 <__assert_fail@plt+0x6fd4>
   196fc:	add	sp, sp, #12
   19700:	pop	{r4, r5, pc}
   19704:	mov	r0, r5
   19708:	bl	17fd0 <__assert_fail@plt+0x5884>
   1970c:	cmp	r0, #0
   19710:	beq	196e8 <__assert_fail@plt+0x6f9c>
   19714:	ldr	r0, [r0, #52]	; 0x34
   19718:	and	r0, r0, #16
   1971c:	b	196ec <__assert_fail@plt+0x6fa0>
   19720:	bl	12200 <__stack_chk_fail@plt>
   19724:	strdeq	fp, [r1], -r4
   19728:	andeq	r0, r0, ip, asr r2
   1972c:	andeq	sl, r0, r8, lsl r9
   19730:	ldr	ip, [pc, #468]	; 1990c <__assert_fail@plt+0x71c0>
   19734:	ldr	r3, [pc, #468]	; 19910 <__assert_fail@plt+0x71c4>
   19738:	add	ip, pc, ip
   1973c:	push	{r4, r5, r6, r7, r8, lr}
   19740:	sub	sp, sp, #48	; 0x30
   19744:	ldr	r6, [ip, r3]
   19748:	subs	r4, r0, #0
   1974c:	ldr	r3, [r6]
   19750:	str	r3, [sp, #44]	; 0x2c
   19754:	beq	19810 <__assert_fail@plt+0x70c4>
   19758:	ldr	r3, [pc, #436]	; 19914 <__assert_fail@plt+0x71c8>
   1975c:	mov	r5, r1
   19760:	add	r3, pc, r3
   19764:	mov	r7, r2
   19768:	ldr	r3, [r3]
   1976c:	tst	r3, #4
   19770:	bne	19840 <__assert_fail@plt+0x70f4>
   19774:	cmp	r5, #0
   19778:	beq	19790 <__assert_fail@plt+0x7044>
   1977c:	add	r1, sp, #8
   19780:	mov	r0, r4
   19784:	bl	1933c <__assert_fail@plt+0x6bf0>
   19788:	cmp	r0, #0
   1978c:	beq	197d4 <__assert_fail@plt+0x7088>
   19790:	cmp	r7, #0
   19794:	beq	19810 <__assert_fail@plt+0x70c4>
   19798:	mov	r0, r4
   1979c:	bl	1818c <__assert_fail@plt+0x5a40>
   197a0:	subs	r5, r0, #0
   197a4:	beq	19830 <__assert_fail@plt+0x70e4>
   197a8:	mov	r1, r7
   197ac:	bl	120c8 <strcmp@plt>
   197b0:	cmp	r0, #0
   197b4:	bne	19830 <__assert_fail@plt+0x70e4>
   197b8:	mov	r0, r5
   197bc:	bl	12134 <free@plt>
   197c0:	ldr	r3, [sp, #88]	; 0x58
   197c4:	tst	r3, #16
   197c8:	bne	198a4 <__assert_fail@plt+0x7158>
   197cc:	mov	r5, #1
   197d0:	b	19814 <__assert_fail@plt+0x70c8>
   197d4:	add	r1, sp, #16
   197d8:	mov	r0, r4
   197dc:	bl	19258 <__assert_fail@plt+0x6b0c>
   197e0:	cmp	r0, #0
   197e4:	bne	19790 <__assert_fail@plt+0x7044>
   197e8:	ldrd	r0, [r5, #96]	; 0x60
   197ec:	ldrd	r2, [sp, #8]
   197f0:	cmp	r1, r3
   197f4:	cmpeq	r0, r2
   197f8:	bne	19810 <__assert_fail@plt+0x70c4>
   197fc:	ldrd	r0, [r5]
   19800:	ldrd	r2, [sp, #16]
   19804:	cmp	r1, r3
   19808:	cmpeq	r0, r2
   1980c:	beq	197c0 <__assert_fail@plt+0x7074>
   19810:	mov	r5, #0
   19814:	ldr	r2, [sp, #44]	; 0x2c
   19818:	ldr	r3, [r6]
   1981c:	mov	r0, r5
   19820:	cmp	r2, r3
   19824:	bne	19908 <__assert_fail@plt+0x71bc>
   19828:	add	sp, sp, #48	; 0x30
   1982c:	pop	{r4, r5, r6, r7, r8, pc}
   19830:	mov	r0, r5
   19834:	bl	12134 <free@plt>
   19838:	mov	r5, #0
   1983c:	b	19814 <__assert_fail@plt+0x70c8>
   19840:	ldr	r3, [pc, #208]	; 19918 <__assert_fail@plt+0x71cc>
   19844:	ldr	r3, [ip, r3]
   19848:	ldr	r8, [r3]
   1984c:	bl	123ec <getpid@plt>
   19850:	ldr	r2, [pc, #196]	; 1991c <__assert_fail@plt+0x71d0>
   19854:	ldr	r3, [pc, #196]	; 19920 <__assert_fail@plt+0x71d4>
   19858:	add	r2, pc, r2
   1985c:	str	r2, [sp, #4]
   19860:	ldr	r2, [pc, #188]	; 19924 <__assert_fail@plt+0x71d8>
   19864:	add	r3, pc, r3
   19868:	str	r3, [sp]
   1986c:	add	r2, pc, r2
   19870:	mov	r1, #1
   19874:	mov	r3, r0
   19878:	mov	r0, r8
   1987c:	bl	12578 <__fprintf_chk@plt>
   19880:	mov	r0, r4
   19884:	bl	17aa8 <__assert_fail@plt+0x535c>
   19888:	ldr	r1, [pc, #152]	; 19928 <__assert_fail@plt+0x71dc>
   1988c:	mov	r3, r7
   19890:	add	r1, pc, r1
   19894:	mov	r2, r0
   19898:	mov	r0, r4
   1989c:	bl	16e4c <__assert_fail@plt+0x4700>
   198a0:	b	19774 <__assert_fail@plt+0x7028>
   198a4:	add	r1, sp, #24
   198a8:	mov	r0, r4
   198ac:	bl	182c4 <__assert_fail@plt+0x5b78>
   198b0:	subs	r5, r0, #0
   198b4:	bne	19810 <__assert_fail@plt+0x70c4>
   198b8:	ldrd	r2, [sp, #24]
   198bc:	ldrd	r0, [sp, #72]	; 0x48
   198c0:	cmp	r3, r1
   198c4:	cmpeq	r2, r0
   198c8:	bne	19814 <__assert_fail@plt+0x70c8>
   198cc:	ldr	r3, [sp, #88]	; 0x58
   198d0:	tst	r3, #512	; 0x200
   198d4:	beq	197cc <__assert_fail@plt+0x7080>
   198d8:	mov	r0, r4
   198dc:	add	r1, sp, #32
   198e0:	bl	18f84 <__assert_fail@plt+0x6838>
   198e4:	cmp	r0, #0
   198e8:	bne	19814 <__assert_fail@plt+0x70c8>
   198ec:	ldrd	r2, [sp, #32]
   198f0:	ldrd	r0, [sp, #80]	; 0x50
   198f4:	cmp	r3, r1
   198f8:	cmpeq	r2, r0
   198fc:	moveq	r5, #1
   19900:	movne	r5, #0
   19904:	b	19814 <__assert_fail@plt+0x70c8>
   19908:	bl	12200 <__stack_chk_fail@plt>
   1990c:	andeq	fp, r1, r4, asr r6
   19910:	andeq	r0, r0, ip, asr r2
   19914:	andeq	fp, r1, ip, lsr #21
   19918:	andeq	r0, r0, r0, ror #4
   1991c:	andeq	sl, r0, r8, lsr r3
   19920:	andeq	sl, r0, r0, lsr r3
   19924:	andeq	sl, r0, r4, lsl r3
   19928:	andeq	sl, r0, ip, asr r7
   1992c:	push	{r4, r5, r6, r7, lr}
   19930:	mov	r6, r2
   19934:	ldr	r2, [pc, #160]	; 199dc <__assert_fail@plt+0x7290>
   19938:	subs	r1, r0, #0
   1993c:	sub	sp, sp, #12
   19940:	add	r2, pc, r2
   19944:	beq	199d4 <__assert_fail@plt+0x7288>
   19948:	mov	r7, r3
   1994c:	ldr	r3, [pc, #140]	; 199e0 <__assert_fail@plt+0x7294>
   19950:	strd	r6, [r1, #176]	; 0xb0
   19954:	add	r3, pc, r3
   19958:	ldr	r3, [r3]
   1995c:	ands	r0, r3, #4
   19960:	bne	1996c <__assert_fail@plt+0x7220>
   19964:	add	sp, sp, #12
   19968:	pop	{r4, r5, r6, r7, pc}
   1996c:	ldr	r3, [pc, #112]	; 199e4 <__assert_fail@plt+0x7298>
   19970:	mov	r5, r1
   19974:	ldr	r3, [r2, r3]
   19978:	ldr	r4, [r3]
   1997c:	bl	123ec <getpid@plt>
   19980:	ldr	r2, [pc, #96]	; 199e8 <__assert_fail@plt+0x729c>
   19984:	ldr	r3, [pc, #96]	; 199ec <__assert_fail@plt+0x72a0>
   19988:	add	r2, pc, r2
   1998c:	str	r2, [sp, #4]
   19990:	ldr	r2, [pc, #88]	; 199f0 <__assert_fail@plt+0x72a4>
   19994:	add	r3, pc, r3
   19998:	str	r3, [sp]
   1999c:	add	r2, pc, r2
   199a0:	mov	r1, #1
   199a4:	mov	r3, r0
   199a8:	mov	r0, r4
   199ac:	bl	12578 <__fprintf_chk@plt>
   199b0:	ldr	r1, [pc, #60]	; 199f4 <__assert_fail@plt+0x72a8>
   199b4:	mov	r0, r5
   199b8:	mov	r2, r6
   199bc:	mov	r3, r7
   199c0:	add	r1, pc, r1
   199c4:	bl	16e4c <__assert_fail@plt+0x4700>
   199c8:	mov	r0, #0
   199cc:	add	sp, sp, #12
   199d0:	pop	{r4, r5, r6, r7, pc}
   199d4:	mvn	r0, #21
   199d8:	b	19964 <__assert_fail@plt+0x7218>
   199dc:	andeq	fp, r1, ip, asr #8
   199e0:			; <UNDEFINED> instruction: 0x0001b8b8
   199e4:	andeq	r0, r0, r0, ror #4
   199e8:	andeq	sl, r0, r8, lsl #4
   199ec:	andeq	sl, r0, r0, lsl #4
   199f0:	andeq	sl, r0, r4, ror #3
   199f4:	andeq	sl, r0, r0, asr #12
   199f8:	push	{r4, r5, r6, r7, lr}
   199fc:	mov	r6, r2
   19a00:	ldr	r2, [pc, #160]	; 19aa8 <__assert_fail@plt+0x735c>
   19a04:	subs	r1, r0, #0
   19a08:	sub	sp, sp, #12
   19a0c:	add	r2, pc, r2
   19a10:	beq	19aa0 <__assert_fail@plt+0x7354>
   19a14:	mov	r7, r3
   19a18:	ldr	r3, [pc, #140]	; 19aac <__assert_fail@plt+0x7360>
   19a1c:	strd	r6, [r1, #184]	; 0xb8
   19a20:	add	r3, pc, r3
   19a24:	ldr	r3, [r3]
   19a28:	ands	r0, r3, #4
   19a2c:	bne	19a38 <__assert_fail@plt+0x72ec>
   19a30:	add	sp, sp, #12
   19a34:	pop	{r4, r5, r6, r7, pc}
   19a38:	ldr	r3, [pc, #112]	; 19ab0 <__assert_fail@plt+0x7364>
   19a3c:	mov	r5, r1
   19a40:	ldr	r3, [r2, r3]
   19a44:	ldr	r4, [r3]
   19a48:	bl	123ec <getpid@plt>
   19a4c:	ldr	r2, [pc, #96]	; 19ab4 <__assert_fail@plt+0x7368>
   19a50:	ldr	r3, [pc, #96]	; 19ab8 <__assert_fail@plt+0x736c>
   19a54:	add	r2, pc, r2
   19a58:	str	r2, [sp, #4]
   19a5c:	ldr	r2, [pc, #88]	; 19abc <__assert_fail@plt+0x7370>
   19a60:	add	r3, pc, r3
   19a64:	str	r3, [sp]
   19a68:	add	r2, pc, r2
   19a6c:	mov	r1, #1
   19a70:	mov	r3, r0
   19a74:	mov	r0, r4
   19a78:	bl	12578 <__fprintf_chk@plt>
   19a7c:	ldr	r1, [pc, #60]	; 19ac0 <__assert_fail@plt+0x7374>
   19a80:	mov	r0, r5
   19a84:	mov	r2, r6
   19a88:	mov	r3, r7
   19a8c:	add	r1, pc, r1
   19a90:	bl	16e4c <__assert_fail@plt+0x4700>
   19a94:	mov	r0, #0
   19a98:	add	sp, sp, #12
   19a9c:	pop	{r4, r5, r6, r7, pc}
   19aa0:	mvn	r0, #21
   19aa4:	b	19a30 <__assert_fail@plt+0x72e4>
   19aa8:	andeq	fp, r1, r0, lsl #7
   19aac:	andeq	fp, r1, ip, ror #15
   19ab0:	andeq	r0, r0, r0, ror #4
   19ab4:	andeq	sl, r0, ip, lsr r1
   19ab8:	andeq	sl, r0, r4, lsr r1
   19abc:	andeq	sl, r0, r8, lsl r1
   19ac0:	andeq	sl, r0, r4, lsl #11
   19ac4:	ldr	ip, [pc, #156]	; 19b68 <__assert_fail@plt+0x741c>
   19ac8:	push	{r4, r5, r6, lr}
   19acc:	subs	r4, r0, #0
   19ad0:	sub	sp, sp, #8
   19ad4:	add	ip, pc, ip
   19ad8:	beq	19b60 <__assert_fail@plt+0x7414>
   19adc:	ldr	r3, [pc, #136]	; 19b6c <__assert_fail@plt+0x7420>
   19ae0:	str	r1, [r4, #204]	; 0xcc
   19ae4:	add	r3, pc, r3
   19ae8:	ldr	r3, [r3]
   19aec:	ands	r0, r3, #4
   19af0:	bne	19afc <__assert_fail@plt+0x73b0>
   19af4:	add	sp, sp, #8
   19af8:	pop	{r4, r5, r6, pc}
   19afc:	ldr	r3, [pc, #108]	; 19b70 <__assert_fail@plt+0x7424>
   19b00:	mov	r5, r1
   19b04:	ldr	r3, [ip, r3]
   19b08:	ldr	r6, [r3]
   19b0c:	bl	123ec <getpid@plt>
   19b10:	ldr	r2, [pc, #92]	; 19b74 <__assert_fail@plt+0x7428>
   19b14:	ldr	r3, [pc, #92]	; 19b78 <__assert_fail@plt+0x742c>
   19b18:	add	r2, pc, r2
   19b1c:	str	r2, [sp, #4]
   19b20:	ldr	r2, [pc, #84]	; 19b7c <__assert_fail@plt+0x7430>
   19b24:	add	r3, pc, r3
   19b28:	str	r3, [sp]
   19b2c:	add	r2, pc, r2
   19b30:	mov	r1, #1
   19b34:	mov	r3, r0
   19b38:	mov	r0, r6
   19b3c:	bl	12578 <__fprintf_chk@plt>
   19b40:	ldr	r1, [pc, #56]	; 19b80 <__assert_fail@plt+0x7434>
   19b44:	mov	r0, r4
   19b48:	mov	r2, r5
   19b4c:	add	r1, pc, r1
   19b50:	bl	16e4c <__assert_fail@plt+0x4700>
   19b54:	mov	r0, #0
   19b58:	add	sp, sp, #8
   19b5c:	pop	{r4, r5, r6, pc}
   19b60:	mvn	r0, #21
   19b64:	b	19af4 <__assert_fail@plt+0x73a8>
   19b68:			; <UNDEFINED> instruction: 0x0001b2b8
   19b6c:	andeq	fp, r1, r8, lsr #14
   19b70:	andeq	r0, r0, r0, ror #4
   19b74:	andeq	sl, r0, r8, ror r0
   19b78:	andeq	sl, r0, r0, ror r0
   19b7c:	andeq	sl, r0, r4, asr r0
   19b80:	ldrdeq	sl, [r0], -r8
   19b84:	push	{r4, r5, r6, r7, lr}
   19b88:	subs	r4, r0, #0
   19b8c:	ldr	r5, [pc, #208]	; 19c64 <__assert_fail@plt+0x7518>
   19b90:	sub	sp, sp, #12
   19b94:	add	r5, pc, r5
   19b98:	beq	19c5c <__assert_fail@plt+0x7510>
   19b9c:	mov	r0, r1
   19ba0:	bl	21ac4 <__assert_fail@plt+0xf378>
   19ba4:	cmp	r0, #0
   19ba8:	str	r0, [r4, #128]	; 0x80
   19bac:	beq	19c48 <__assert_fail@plt+0x74fc>
   19bb0:	add	r6, r4, #208	; 0xd0
   19bb4:	mov	r1, r0
   19bb8:	mov	r2, #64	; 0x40
   19bbc:	mov	r0, r6
   19bc0:	bl	124e8 <strncpy@plt>
   19bc4:	ldr	r3, [pc, #156]	; 19c68 <__assert_fail@plt+0x751c>
   19bc8:	mov	r7, #0
   19bcc:	add	r3, pc, r3
   19bd0:	strb	r7, [r4, #271]	; 0x10f
   19bd4:	ldr	r0, [r3]
   19bd8:	ands	r0, r0, #4
   19bdc:	bne	19be8 <__assert_fail@plt+0x749c>
   19be0:	add	sp, sp, #12
   19be4:	pop	{r4, r5, r6, r7, pc}
   19be8:	ldr	r3, [pc, #124]	; 19c6c <__assert_fail@plt+0x7520>
   19bec:	ldr	r3, [r5, r3]
   19bf0:	ldr	r5, [r3]
   19bf4:	bl	123ec <getpid@plt>
   19bf8:	ldr	r2, [pc, #112]	; 19c70 <__assert_fail@plt+0x7524>
   19bfc:	ldr	r3, [pc, #112]	; 19c74 <__assert_fail@plt+0x7528>
   19c00:	add	r2, pc, r2
   19c04:	str	r2, [sp, #4]
   19c08:	ldr	r2, [pc, #104]	; 19c78 <__assert_fail@plt+0x752c>
   19c0c:	add	r3, pc, r3
   19c10:	str	r3, [sp]
   19c14:	add	r2, pc, r2
   19c18:	mov	r1, #1
   19c1c:	mov	r3, r0
   19c20:	mov	r0, r5
   19c24:	bl	12578 <__fprintf_chk@plt>
   19c28:	ldr	r1, [pc, #76]	; 19c7c <__assert_fail@plt+0x7530>
   19c2c:	mov	r0, r4
   19c30:	mov	r2, r6
   19c34:	add	r1, pc, r1
   19c38:	bl	16e4c <__assert_fail@plt+0x4700>
   19c3c:	mov	r0, r7
   19c40:	add	sp, sp, #12
   19c44:	pop	{r4, r5, r6, r7, pc}
   19c48:	bl	1247c <__errno_location@plt>
   19c4c:	ldr	r0, [r0]
   19c50:	rsb	r0, r0, #0
   19c54:	add	sp, sp, #12
   19c58:	pop	{r4, r5, r6, r7, pc}
   19c5c:	mvn	r0, #21
   19c60:	b	19be0 <__assert_fail@plt+0x7494>
   19c64:	strdeq	fp, [r1], -r8
   19c68:	andeq	fp, r1, r0, asr #12
   19c6c:	andeq	r0, r0, r0, ror #4
   19c70:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   19c74:	andeq	r9, r0, r8, lsl #31
   19c78:	andeq	r9, r0, ip, ror #30
   19c7c:	andeq	sl, r0, r0, lsl #8
   19c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c84:	sub	sp, sp, #20
   19c88:	mov	r4, r0
   19c8c:	bl	1247c <__errno_location@plt>
   19c90:	mov	r3, #0
   19c94:	str	r3, [r0]
   19c98:	mov	r5, r0
   19c9c:	mov	r0, r4
   19ca0:	bl	17ac0 <__assert_fail@plt+0x5374>
   19ca4:	ldr	r3, [pc, #340]	; 19e00 <__assert_fail@plt+0x76b4>
   19ca8:	add	r3, pc, r3
   19cac:	subs	r7, r0, #0
   19cb0:	blt	19da4 <__assert_fail@plt+0x7658>
   19cb4:	ldr	r6, [pc, #328]	; 19e04 <__assert_fail@plt+0x76b8>
   19cb8:	add	r6, pc, r6
   19cbc:	ldr	r2, [r6]
   19cc0:	tst	r2, #16
   19cc4:	bne	19ce8 <__assert_fail@plt+0x759c>
   19cc8:	add	r2, r4, #152	; 0x98
   19ccc:	ldr	r1, [pc, #308]	; 19e08 <__assert_fail@plt+0x76bc>
   19cd0:	bl	122a8 <ioctl@plt>
   19cd4:	subs	r6, r0, #0
   19cd8:	bne	19da4 <__assert_fail@plt+0x7658>
   19cdc:	mov	r0, r6
   19ce0:	add	sp, sp, #20
   19ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ce8:	ldr	r2, [pc, #284]	; 19e0c <__assert_fail@plt+0x76c0>
   19cec:	ldr	sl, [pc, #284]	; 19e10 <__assert_fail@plt+0x76c4>
   19cf0:	ldr	r9, [pc, #284]	; 19e14 <__assert_fail@plt+0x76c8>
   19cf4:	ldr	r3, [r3, r2]
   19cf8:	ldr	r8, [pc, #280]	; 19e18 <__assert_fail@plt+0x76cc>
   19cfc:	str	r3, [sp, #12]
   19d00:	ldr	fp, [r3]
   19d04:	bl	123ec <getpid@plt>
   19d08:	add	sl, pc, sl
   19d0c:	add	r9, pc, r9
   19d10:	add	r8, pc, r8
   19d14:	mov	r2, r8
   19d18:	mov	r1, #1
   19d1c:	stm	sp, {r9, sl}
   19d20:	mov	r3, r0
   19d24:	mov	r0, fp
   19d28:	bl	12578 <__fprintf_chk@plt>
   19d2c:	ldr	r1, [pc, #232]	; 19e1c <__assert_fail@plt+0x76d0>
   19d30:	mov	r0, r4
   19d34:	add	r1, pc, r1
   19d38:	bl	16e4c <__assert_fail@plt+0x4700>
   19d3c:	ldr	r3, [r6]
   19d40:	mov	r0, r7
   19d44:	add	r2, r4, #152	; 0x98
   19d48:	ldr	r1, [pc, #184]	; 19e08 <__assert_fail@plt+0x76bc>
   19d4c:	and	r7, r3, #16
   19d50:	bl	122a8 <ioctl@plt>
   19d54:	subs	r6, r0, #0
   19d58:	bne	19db8 <__assert_fail@plt+0x766c>
   19d5c:	cmp	r7, #0
   19d60:	beq	19cdc <__assert_fail@plt+0x7590>
   19d64:	ldr	r3, [sp, #12]
   19d68:	ldr	r5, [r3]
   19d6c:	bl	123ec <getpid@plt>
   19d70:	mov	r2, r8
   19d74:	stm	sp, {r9, sl}
   19d78:	mov	r1, #1
   19d7c:	mov	r3, r0
   19d80:	mov	r0, r5
   19d84:	bl	12578 <__fprintf_chk@plt>
   19d88:	ldr	r1, [pc, #144]	; 19e20 <__assert_fail@plt+0x76d4>
   19d8c:	mov	r0, r4
   19d90:	add	r1, pc, r1
   19d94:	bl	16e4c <__assert_fail@plt+0x4700>
   19d98:	mov	r0, r6
   19d9c:	add	sp, sp, #20
   19da0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19da4:	ldr	r6, [r5]
   19da8:	rsb	r6, r6, #0
   19dac:	mov	r0, r6
   19db0:	add	sp, sp, #20
   19db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19db8:	ldr	r6, [r5]
   19dbc:	cmp	r7, #0
   19dc0:	rsb	r6, r6, #0
   19dc4:	beq	19cdc <__assert_fail@plt+0x7590>
   19dc8:	ldr	r3, [sp, #12]
   19dcc:	ldr	r5, [r3]
   19dd0:	bl	123ec <getpid@plt>
   19dd4:	stm	sp, {r9, sl}
   19dd8:	mov	r2, r8
   19ddc:	mov	r1, #1
   19de0:	mov	r3, r0
   19de4:	mov	r0, r5
   19de8:	bl	12578 <__fprintf_chk@plt>
   19dec:	ldr	r1, [pc, #48]	; 19e24 <__assert_fail@plt+0x76d8>
   19df0:	mov	r0, r4
   19df4:	add	r1, pc, r1
   19df8:	bl	16e4c <__assert_fail@plt+0x4700>
   19dfc:	b	19cdc <__assert_fail@plt+0x7590>
   19e00:	andeq	fp, r1, r4, ror #1
   19e04:	andeq	fp, r1, r4, asr r5
   19e08:	andeq	r4, r0, r4, lsl #24
   19e0c:	andeq	r0, r0, r0, ror #4
   19e10:	andeq	sl, r0, r0, asr #6
   19e14:	andeq	r9, r0, r8, lsl #29
   19e18:	andeq	r9, r0, r0, ror lr
   19e1c:	andeq	sl, r0, ip, lsl r3
   19e20:	strdeq	sl, [r0], -r0
   19e24:	andeq	sl, r0, ip, ror #4
   19e28:	push	{r4, r5, r6, lr}
   19e2c:	sub	sp, sp, #8
   19e30:	mov	r6, r0
   19e34:	bl	17ac0 <__assert_fail@plt+0x5374>
   19e38:	ldr	r5, [pc, #268]	; 19f4c <__assert_fail@plt+0x7800>
   19e3c:	add	r5, pc, r5
   19e40:	cmp	r0, #0
   19e44:	blt	19f44 <__assert_fail@plt+0x77f8>
   19e48:	mov	r2, #0
   19e4c:	ldr	r1, [pc, #252]	; 19f50 <__assert_fail@plt+0x7804>
   19e50:	bl	122a8 <ioctl@plt>
   19e54:	ldr	r3, [pc, #248]	; 19f54 <__assert_fail@plt+0x7808>
   19e58:	ldr	r4, [pc, r3]
   19e5c:	and	r4, r4, #4
   19e60:	cmp	r0, #0
   19e64:	blt	19edc <__assert_fail@plt+0x7790>
   19e68:	cmp	r4, #0
   19e6c:	bne	19e7c <__assert_fail@plt+0x7730>
   19e70:	mov	r0, r4
   19e74:	add	sp, sp, #8
   19e78:	pop	{r4, r5, r6, pc}
   19e7c:	ldr	r3, [pc, #212]	; 19f58 <__assert_fail@plt+0x780c>
   19e80:	mov	r4, #0
   19e84:	ldr	r3, [r5, r3]
   19e88:	ldr	r5, [r3]
   19e8c:	bl	123ec <getpid@plt>
   19e90:	ldr	r2, [pc, #196]	; 19f5c <__assert_fail@plt+0x7810>
   19e94:	ldr	r3, [pc, #196]	; 19f60 <__assert_fail@plt+0x7814>
   19e98:	add	r2, pc, r2
   19e9c:	str	r2, [sp, #4]
   19ea0:	ldr	r2, [pc, #188]	; 19f64 <__assert_fail@plt+0x7818>
   19ea4:	add	r3, pc, r3
   19ea8:	str	r3, [sp]
   19eac:	add	r2, pc, r2
   19eb0:	mov	r1, #1
   19eb4:	mov	r3, r0
   19eb8:	mov	r0, r5
   19ebc:	bl	12578 <__fprintf_chk@plt>
   19ec0:	ldr	r1, [pc, #160]	; 19f68 <__assert_fail@plt+0x781c>
   19ec4:	mov	r0, r6
   19ec8:	add	r1, pc, r1
   19ecc:	bl	16e4c <__assert_fail@plt+0x4700>
   19ed0:	mov	r0, r4
   19ed4:	add	sp, sp, #8
   19ed8:	pop	{r4, r5, r6, pc}
   19edc:	bl	1247c <__errno_location@plt>
   19ee0:	cmp	r4, #0
   19ee4:	ldr	r4, [r0]
   19ee8:	rsb	r4, r4, #0
   19eec:	beq	19e70 <__assert_fail@plt+0x7724>
   19ef0:	ldr	r3, [pc, #96]	; 19f58 <__assert_fail@plt+0x780c>
   19ef4:	ldr	r3, [r5, r3]
   19ef8:	ldr	r5, [r3]
   19efc:	bl	123ec <getpid@plt>
   19f00:	ldr	r2, [pc, #100]	; 19f6c <__assert_fail@plt+0x7820>
   19f04:	ldr	r3, [pc, #100]	; 19f70 <__assert_fail@plt+0x7824>
   19f08:	add	r2, pc, r2
   19f0c:	str	r2, [sp, #4]
   19f10:	ldr	r2, [pc, #92]	; 19f74 <__assert_fail@plt+0x7828>
   19f14:	add	r3, pc, r3
   19f18:	str	r3, [sp]
   19f1c:	add	r2, pc, r2
   19f20:	mov	r1, #1
   19f24:	mov	r3, r0
   19f28:	mov	r0, r5
   19f2c:	bl	12578 <__fprintf_chk@plt>
   19f30:	ldr	r1, [pc, #64]	; 19f78 <__assert_fail@plt+0x782c>
   19f34:	mov	r0, r6
   19f38:	add	r1, pc, r1
   19f3c:	bl	16e4c <__assert_fail@plt+0x4700>
   19f40:	b	19e70 <__assert_fail@plt+0x7724>
   19f44:	mvn	r4, #21
   19f48:	b	19e70 <__assert_fail@plt+0x7724>
   19f4c:	andeq	sl, r1, r0, asr pc
   19f50:	andeq	r4, r0, r7, lsl #24
   19f54:			; <UNDEFINED> instruction: 0x0001b3b4
   19f58:	andeq	r0, r0, r0, ror #4
   19f5c:	strdeq	r9, [r0], -r8
   19f60:	strdeq	r9, [r0], -r0
   19f64:	ldrdeq	r9, [r0], -r4
   19f68:	strdeq	sl, [r0], -r0
   19f6c:	andeq	r9, r0, r8, lsl #25
   19f70:	andeq	r9, r0, r0, lsl #25
   19f74:	andeq	r9, r0, r4, ror #24
   19f78:	andeq	sl, r0, r0, ror #2
   19f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f80:	sub	sp, sp, #164	; 0xa4
   19f84:	ldr	r7, [pc, #3004]	; 1ab48 <__assert_fail@plt+0x83fc>
   19f88:	ldr	r3, [pc, #3004]	; 1ab4c <__assert_fail@plt+0x8400>
   19f8c:	add	r7, pc, r7
   19f90:	subs	r4, r0, #0
   19f94:	ldr	r3, [r7, r3]
   19f98:	str	r3, [sp, #16]
   19f9c:	ldr	r3, [r3]
   19fa0:	str	r3, [sp, #156]	; 0x9c
   19fa4:	beq	1a910 <__assert_fail@plt+0x81c4>
   19fa8:	ldrsb	r3, [r4]
   19fac:	cmp	r3, #0
   19fb0:	beq	1a910 <__assert_fail@plt+0x81c4>
   19fb4:	ldr	r0, [r4, #128]	; 0x80
   19fb8:	cmp	r0, #0
   19fbc:	beq	1a910 <__assert_fail@plt+0x81c4>
   19fc0:	ldr	r3, [pc, #2952]	; 1ab50 <__assert_fail@plt+0x8404>
   19fc4:	add	r3, pc, r3
   19fc8:	ldr	r3, [r3]
   19fcc:	tst	r3, #16
   19fd0:	bne	1a2fc <__assert_fail@plt+0x7bb0>
   19fd4:	ldr	r1, [r4, #204]	; 0xcc
   19fd8:	ands	r6, r1, #1
   19fdc:	bne	1a124 <__assert_fail@plt+0x79d8>
   19fe0:	ldr	r1, [pc, #2924]	; 1ab54 <__assert_fail@plt+0x8408>
   19fe4:	bl	12470 <__open64_2@plt>
   19fe8:	mov	r8, r0
   19fec:	str	r0, [sp, #12]
   19ff0:	bl	1247c <__errno_location@plt>
   19ff4:	cmp	r8, #0
   19ff8:	movge	r6, #2
   19ffc:	mov	r5, r0
   1a000:	blt	1a560 <__assert_fail@plt+0x7e14>
   1a004:	ldr	r3, [pc, #2892]	; 1ab58 <__assert_fail@plt+0x840c>
   1a008:	add	r3, pc, r3
   1a00c:	ldr	r3, [r3]
   1a010:	tst	r3, #16
   1a014:	bne	1a354 <__assert_fail@plt+0x7c08>
   1a018:	ldr	r0, [r4, #132]	; 0x84
   1a01c:	cmn	r0, #1
   1a020:	beq	1a054 <__assert_fail@plt+0x7908>
   1a024:	ldr	r3, [r4, #136]	; 0x88
   1a028:	cmp	r3, r6
   1a02c:	beq	1a054 <__assert_fail@plt+0x7908>
   1a030:	ldr	r3, [pc, #2852]	; 1ab5c <__assert_fail@plt+0x8410>
   1a034:	add	r3, pc, r3
   1a038:	ldr	r3, [r3]
   1a03c:	tst	r3, #16
   1a040:	bne	1a738 <__assert_fail@plt+0x7fec>
   1a044:	bl	12704 <close@plt>
   1a048:	mvn	r2, #0
   1a04c:	mov	r3, #0
   1a050:	strd	r2, [r4, #132]	; 0x84
   1a054:	ldr	r3, [r4, #140]	; 0x8c
   1a058:	cmp	r6, #0
   1a05c:	ldr	r2, [r4, #204]	; 0xcc
   1a060:	ldr	fp, [pc, #2808]	; 1ab60 <__assert_fail@plt+0x8414>
   1a064:	bicne	r3, r3, #1
   1a068:	mov	r8, #17
   1a06c:	mov	r9, #0
   1a070:	add	sl, sp, #48	; 0x30
   1a074:	orreq	r3, r3, #1
   1a078:	orreq	r2, r2, #1
   1a07c:	orrne	r3, r3, #2
   1a080:	bicne	r2, r2, #1
   1a084:	str	r3, [r4, #140]	; 0x8c
   1a088:	str	r2, [r4, #204]	; 0xcc
   1a08c:	str	r9, [r5]
   1a090:	mov	r0, r4
   1a094:	bl	17ac0 <__assert_fail@plt+0x5374>
   1a098:	subs	r6, r0, #0
   1a09c:	bge	1a168 <__assert_fail@plt+0x7a1c>
   1a0a0:	ldrb	r2, [r4, #144]	; 0x90
   1a0a4:	ldr	r3, [r5]
   1a0a8:	tst	r2, #8
   1a0ac:	beq	1a0e4 <__assert_fail@plt+0x7998>
   1a0b0:	cmp	r3, #13
   1a0b4:	cmpne	r3, #2
   1a0b8:	movne	r2, #1
   1a0bc:	moveq	r2, #0
   1a0c0:	bne	1a0e4 <__assert_fail@plt+0x7998>
   1a0c4:	mov	r1, r2
   1a0c8:	mov	r0, sl
   1a0cc:	str	r2, [sp, #48]	; 0x30
   1a0d0:	str	fp, [sp, #52]	; 0x34
   1a0d4:	bl	1214c <nanosleep@plt>
   1a0d8:	subs	r8, r8, #1
   1a0dc:	bne	1a08c <__assert_fail@plt+0x7940>
   1a0e0:	ldr	r3, [r5]
   1a0e4:	ldr	r0, [sp, #12]
   1a0e8:	rsb	r9, r3, #0
   1a0ec:	bl	12704 <close@plt>
   1a0f0:	ldr	r3, [pc, #2668]	; 1ab64 <__assert_fail@plt+0x8418>
   1a0f4:	add	r3, pc, r3
   1a0f8:	ldr	r3, [r3]
   1a0fc:	tst	r3, #16
   1a100:	bne	1a3a8 <__assert_fail@plt+0x7c5c>
   1a104:	ldr	r3, [sp, #16]
   1a108:	ldr	r2, [sp, #156]	; 0x9c
   1a10c:	mov	r0, r9
   1a110:	ldr	r3, [r3]
   1a114:	cmp	r2, r3
   1a118:	bne	1ab44 <__assert_fail@plt+0x83f8>
   1a11c:	add	sp, sp, #164	; 0xa4
   1a120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a124:	mov	r1, #524288	; 0x80000
   1a128:	bl	12470 <__open64_2@plt>
   1a12c:	mov	r6, r0
   1a130:	str	r0, [sp, #12]
   1a134:	bl	1247c <__errno_location@plt>
   1a138:	cmp	r6, #0
   1a13c:	movge	r6, #0
   1a140:	mov	r5, r0
   1a144:	bge	1a004 <__assert_fail@plt+0x78b8>
   1a148:	ldr	r3, [pc, #2584]	; 1ab68 <__assert_fail@plt+0x841c>
   1a14c:	add	r3, pc, r3
   1a150:	ldr	r3, [r3]
   1a154:	tst	r3, #16
   1a158:	bne	1a84c <__assert_fail@plt+0x8100>
   1a15c:	ldr	r9, [r5]
   1a160:	rsb	r9, r9, #0
   1a164:	b	1a104 <__assert_fail@plt+0x79b8>
   1a168:	ldr	r9, [pc, #2556]	; 1ab6c <__assert_fail@plt+0x8420>
   1a16c:	add	r9, pc, r9
   1a170:	ldr	r3, [r9]
   1a174:	tst	r3, #16
   1a178:	bne	1a424 <__assert_fail@plt+0x7cd8>
   1a17c:	ldr	r2, [sp, #12]
   1a180:	mov	r1, #19456	; 0x4c00
   1a184:	bl	122a8 <ioctl@plt>
   1a188:	cmp	r0, #0
   1a18c:	blt	1a400 <__assert_fail@plt+0x7cb4>
   1a190:	add	r8, r4, #152	; 0x98
   1a194:	mov	r2, r8
   1a198:	ldr	r1, [pc, #2512]	; 1ab70 <__assert_fail@plt+0x8424>
   1a19c:	mov	r0, r6
   1a1a0:	bl	122a8 <ioctl@plt>
   1a1a4:	cmp	r0, #0
   1a1a8:	bne	1a400 <__assert_fail@plt+0x7cb4>
   1a1ac:	ldrd	r2, [r4, #176]	; 0xb0
   1a1b0:	orrs	r3, r2, r3
   1a1b4:	bne	1a1c4 <__assert_fail@plt+0x7a78>
   1a1b8:	ldrd	r2, [r4, #184]	; 0xb8
   1a1bc:	orrs	r3, r2, r3
   1a1c0:	beq	1a654 <__assert_fail@plt+0x7f08>
   1a1c4:	add	r2, sp, #48	; 0x30
   1a1c8:	ldr	r1, [sp, #12]
   1a1cc:	mov	r0, #3
   1a1d0:	bl	12278 <__fxstat64@plt>
   1a1d4:	cmp	r0, #0
   1a1d8:	bne	1a5a8 <__assert_fail@plt+0x7e5c>
   1a1dc:	ldr	r3, [sp, #64]	; 0x40
   1a1e0:	and	r3, r3, #61440	; 0xf000
   1a1e4:	cmp	r3, #24576	; 0x6000
   1a1e8:	beq	1a8a0 <__assert_fail@plt+0x8154>
   1a1ec:	ldrd	sl, [sp, #96]	; 0x60
   1a1f0:	strd	sl, [sp, #40]	; 0x28
   1a1f4:	orrs	r3, sl, fp
   1a1f8:	beq	1a5f0 <__assert_fail@plt+0x7ea4>
   1a1fc:	ldrd	r0, [r4, #176]	; 0xb0
   1a200:	cmp	r1, fp
   1a204:	cmpeq	r0, sl
   1a208:	bcs	1a5f0 <__assert_fail@plt+0x7ea4>
   1a20c:	orrs	r3, r0, r1
   1a210:	beq	1a220 <__assert_fail@plt+0x7ad4>
   1a214:	subs	r2, sl, r0
   1a218:	sbc	r3, fp, r1
   1a21c:	strd	r2, [sp, #40]	; 0x28
   1a220:	ldrd	r0, [r4, #184]	; 0xb8
   1a224:	orrs	r3, r0, r1
   1a228:	beq	1a23c <__assert_fail@plt+0x7af0>
   1a22c:	ldrd	r2, [sp, #40]	; 0x28
   1a230:	cmp	r1, r3
   1a234:	cmpeq	r0, r2
   1a238:	strdcc	r0, [sp, #40]	; 0x28
   1a23c:	mov	r0, r4
   1a240:	bl	17ac0 <__assert_fail@plt+0x5374>
   1a244:	subs	r3, r0, #0
   1a248:	str	r3, [sp, #20]
   1a24c:	blt	1a7e4 <__assert_fail@plt+0x8098>
   1a250:	add	r9, sp, #32
   1a254:	mov	r1, r9
   1a258:	bl	21058 <__assert_fail@plt+0xe90c>
   1a25c:	subs	ip, r0, #0
   1a260:	bne	1a918 <__assert_fail@plt+0x81cc>
   1a264:	ldrd	r0, [sp, #40]	; 0x28
   1a268:	mov	r3, ip
   1a26c:	lsl	r2, r0, #23
   1a270:	lsr	r2, r2, #23
   1a274:	orrs	r3, r2, r3
   1a278:	beq	1a2a0 <__assert_fail@plt+0x7b54>
   1a27c:	ldr	r3, [pc, #2288]	; 1ab74 <__assert_fail@plt+0x8428>
   1a280:	add	r3, pc, r3
   1a284:	ldr	r3, [r3]
   1a288:	tst	r3, #4
   1a28c:	bne	1aaec <__assert_fail@plt+0x83a0>
   1a290:	bic	r3, r0, #508	; 0x1fc
   1a294:	bic	r3, r3, #3
   1a298:	mov	r0, r3
   1a29c:	strd	r0, [sp, #40]	; 0x28
   1a2a0:	ldrd	r2, [sp, #32]
   1a2a4:	cmp	r3, r1
   1a2a8:	cmpeq	r2, r0
   1a2ac:	beq	1a654 <__assert_fail@plt+0x7f08>
   1a2b0:	ldr	r3, [pc, #2240]	; 1ab78 <__assert_fail@plt+0x842c>
   1a2b4:	add	r3, pc, r3
   1a2b8:	ldr	r3, [r3]
   1a2bc:	tst	r3, #4
   1a2c0:	bne	1aa8c <__assert_fail@plt+0x8340>
   1a2c4:	mov	r0, r4
   1a2c8:	bl	19e28 <__assert_fail@plt+0x76dc>
   1a2cc:	cmp	r0, #0
   1a2d0:	beq	1a9e8 <__assert_fail@plt+0x829c>
   1a2d4:	ldr	r9, [r5]
   1a2d8:	cmp	r9, #22
   1a2dc:	cmpne	r9, #25
   1a2e0:	bne	1a5c0 <__assert_fail@plt+0x7e74>
   1a2e4:	mov	r3, #34	; 0x22
   1a2e8:	str	r3, [r5]
   1a2ec:	ldr	r0, [sp, #12]
   1a2f0:	bl	12704 <close@plt>
   1a2f4:	mvn	r9, #33	; 0x21
   1a2f8:	b	1a5dc <__assert_fail@plt+0x7e90>
   1a2fc:	ldr	r3, [pc, #2168]	; 1ab7c <__assert_fail@plt+0x8430>
   1a300:	ldr	r3, [r7, r3]
   1a304:	ldr	r5, [r3]
   1a308:	bl	123ec <getpid@plt>
   1a30c:	ldr	r2, [pc, #2156]	; 1ab80 <__assert_fail@plt+0x8434>
   1a310:	ldr	r3, [pc, #2156]	; 1ab84 <__assert_fail@plt+0x8438>
   1a314:	add	r2, pc, r2
   1a318:	str	r2, [sp, #4]
   1a31c:	ldr	r2, [pc, #2148]	; 1ab88 <__assert_fail@plt+0x843c>
   1a320:	add	r3, pc, r3
   1a324:	str	r3, [sp]
   1a328:	add	r2, pc, r2
   1a32c:	mov	r1, #1
   1a330:	mov	r3, r0
   1a334:	mov	r0, r5
   1a338:	bl	12578 <__fprintf_chk@plt>
   1a33c:	ldr	r1, [pc, #2120]	; 1ab8c <__assert_fail@plt+0x8440>
   1a340:	mov	r0, r4
   1a344:	add	r1, pc, r1
   1a348:	bl	16e4c <__assert_fail@plt+0x4700>
   1a34c:	ldr	r0, [r4, #128]	; 0x80
   1a350:	b	19fd4 <__assert_fail@plt+0x7888>
   1a354:	ldr	r3, [pc, #2080]	; 1ab7c <__assert_fail@plt+0x8430>
   1a358:	ldr	r3, [r7, r3]
   1a35c:	ldr	r8, [r3]
   1a360:	bl	123ec <getpid@plt>
   1a364:	ldr	r2, [pc, #2084]	; 1ab90 <__assert_fail@plt+0x8444>
   1a368:	ldr	r3, [pc, #2084]	; 1ab94 <__assert_fail@plt+0x8448>
   1a36c:	add	r2, pc, r2
   1a370:	str	r2, [sp, #4]
   1a374:	ldr	r2, [pc, #2076]	; 1ab98 <__assert_fail@plt+0x844c>
   1a378:	add	r3, pc, r3
   1a37c:	str	r3, [sp]
   1a380:	add	r2, pc, r2
   1a384:	mov	r1, #1
   1a388:	mov	r3, r0
   1a38c:	mov	r0, r8
   1a390:	bl	12578 <__fprintf_chk@plt>
   1a394:	ldr	r1, [pc, #2048]	; 1ab9c <__assert_fail@plt+0x8450>
   1a398:	mov	r0, r4
   1a39c:	add	r1, pc, r1
   1a3a0:	bl	16e4c <__assert_fail@plt+0x4700>
   1a3a4:	b	1a018 <__assert_fail@plt+0x78cc>
   1a3a8:	ldr	r3, [pc, #1996]	; 1ab7c <__assert_fail@plt+0x8430>
   1a3ac:	ldr	r3, [r7, r3]
   1a3b0:	ldr	r5, [r3]
   1a3b4:	bl	123ec <getpid@plt>
   1a3b8:	ldr	r2, [pc, #2016]	; 1aba0 <__assert_fail@plt+0x8454>
   1a3bc:	ldr	r3, [pc, #2016]	; 1aba4 <__assert_fail@plt+0x8458>
   1a3c0:	add	r2, pc, r2
   1a3c4:	str	r2, [sp, #4]
   1a3c8:	ldr	r2, [pc, #2008]	; 1aba8 <__assert_fail@plt+0x845c>
   1a3cc:	add	r3, pc, r3
   1a3d0:	str	r3, [sp]
   1a3d4:	add	r2, pc, r2
   1a3d8:	mov	r1, #1
   1a3dc:	mov	r3, r0
   1a3e0:	mov	r0, r5
   1a3e4:	bl	12578 <__fprintf_chk@plt>
   1a3e8:	ldr	r1, [pc, #1980]	; 1abac <__assert_fail@plt+0x8460>
   1a3ec:	mov	r2, r9
   1a3f0:	mov	r0, r4
   1a3f4:	add	r1, pc, r1
   1a3f8:	bl	16e4c <__assert_fail@plt+0x4700>
   1a3fc:	b	1a104 <__assert_fail@plt+0x79b8>
   1a400:	ldr	r8, [r5]
   1a404:	rsb	r9, r8, #0
   1a408:	ldr	r0, [sp, #12]
   1a40c:	bl	12704 <close@plt>
   1a410:	cmn	r9, #16
   1a414:	bne	1a58c <__assert_fail@plt+0x7e40>
   1a418:	cmp	r8, #0
   1a41c:	strne	r8, [r5]
   1a420:	b	1a0f0 <__assert_fail@plt+0x79a4>
   1a424:	ldr	r3, [pc, #1872]	; 1ab7c <__assert_fail@plt+0x8430>
   1a428:	ldr	sl, [pc, #1920]	; 1abb0 <__assert_fail@plt+0x8464>
   1a42c:	ldr	r2, [pc, #1920]	; 1abb4 <__assert_fail@plt+0x8468>
   1a430:	add	sl, pc, sl
   1a434:	str	sl, [sp, #28]
   1a438:	ldr	r3, [r7, r3]
   1a43c:	add	r2, pc, r2
   1a440:	str	r3, [sp, #24]
   1a444:	ldr	r8, [r3]
   1a448:	str	r2, [sp, #20]
   1a44c:	bl	123ec <getpid@plt>
   1a450:	ldr	fp, [pc, #1888]	; 1abb8 <__assert_fail@plt+0x846c>
   1a454:	ldr	r3, [sp, #20]
   1a458:	add	fp, pc, fp
   1a45c:	mov	r2, fp
   1a460:	str	sl, [sp, #4]
   1a464:	str	r3, [sp]
   1a468:	mov	r1, #1
   1a46c:	mov	r3, r0
   1a470:	mov	r0, r8
   1a474:	bl	12578 <__fprintf_chk@plt>
   1a478:	ldr	r1, [pc, #1852]	; 1abbc <__assert_fail@plt+0x8470>
   1a47c:	mov	r0, r4
   1a480:	add	r1, pc, r1
   1a484:	bl	16e4c <__assert_fail@plt+0x4700>
   1a488:	ldr	r2, [sp, #12]
   1a48c:	mov	r1, #19456	; 0x4c00
   1a490:	mov	r0, r6
   1a494:	ldr	sl, [r9]
   1a498:	bl	122a8 <ioctl@plt>
   1a49c:	and	sl, sl, #16
   1a4a0:	cmp	r0, #0
   1a4a4:	blt	1a6e4 <__assert_fail@plt+0x7f98>
   1a4a8:	cmp	sl, #0
   1a4ac:	beq	1a190 <__assert_fail@plt+0x7a44>
   1a4b0:	ldr	r3, [sp, #24]
   1a4b4:	add	r8, r4, #152	; 0x98
   1a4b8:	ldr	sl, [r3]
   1a4bc:	bl	123ec <getpid@plt>
   1a4c0:	ldr	r3, [sp, #28]
   1a4c4:	mov	r2, fp
   1a4c8:	str	r3, [sp, #4]
   1a4cc:	ldr	r3, [sp, #20]
   1a4d0:	mov	r1, #1
   1a4d4:	str	r3, [sp]
   1a4d8:	mov	r3, r0
   1a4dc:	mov	r0, sl
   1a4e0:	bl	12578 <__fprintf_chk@plt>
   1a4e4:	ldr	r1, [pc, #1748]	; 1abc0 <__assert_fail@plt+0x8474>
   1a4e8:	mov	r0, r4
   1a4ec:	add	r1, pc, r1
   1a4f0:	bl	16e4c <__assert_fail@plt+0x4700>
   1a4f4:	mov	r2, r8
   1a4f8:	ldr	r1, [pc, #1648]	; 1ab70 <__assert_fail@plt+0x8424>
   1a4fc:	mov	r0, r6
   1a500:	ldr	r9, [r9]
   1a504:	bl	122a8 <ioctl@plt>
   1a508:	and	r9, r9, #16
   1a50c:	cmp	r0, #0
   1a510:	bne	1a790 <__assert_fail@plt+0x8044>
   1a514:	cmp	r9, #0
   1a518:	beq	1a1ac <__assert_fail@plt+0x7a60>
   1a51c:	ldr	r3, [sp, #24]
   1a520:	ldr	r9, [r3]
   1a524:	bl	123ec <getpid@plt>
   1a528:	ldr	r3, [sp, #28]
   1a52c:	mov	r2, fp
   1a530:	str	r3, [sp, #4]
   1a534:	ldr	r3, [sp, #20]
   1a538:	mov	r1, #1
   1a53c:	str	r3, [sp]
   1a540:	mov	r3, r0
   1a544:	mov	r0, r9
   1a548:	bl	12578 <__fprintf_chk@plt>
   1a54c:	ldr	r1, [pc, #1648]	; 1abc4 <__assert_fail@plt+0x8478>
   1a550:	mov	r0, r4
   1a554:	add	r1, pc, r1
   1a558:	bl	16e4c <__assert_fail@plt+0x4700>
   1a55c:	b	1a1ac <__assert_fail@plt+0x7a60>
   1a560:	ldr	r3, [r5]
   1a564:	cmp	r3, #13
   1a568:	cmpne	r3, #30
   1a56c:	bne	1a148 <__assert_fail@plt+0x79fc>
   1a570:	mov	r1, r6
   1a574:	ldr	r0, [r4, #128]	; 0x80
   1a578:	bl	12320 <open64@plt>
   1a57c:	subs	r3, r0, #0
   1a580:	str	r3, [sp, #12]
   1a584:	bge	1a004 <__assert_fail@plt+0x78b8>
   1a588:	b	1a148 <__assert_fail@plt+0x79fc>
   1a58c:	mov	r0, r6
   1a590:	mov	r2, #0
   1a594:	ldr	r1, [pc, #1580]	; 1abc8 <__assert_fail@plt+0x847c>
   1a598:	bl	122a8 <ioctl@plt>
   1a59c:	cmp	r8, #0
   1a5a0:	strne	r8, [r5]
   1a5a4:	b	1a0f0 <__assert_fail@plt+0x79a4>
   1a5a8:	ldr	r3, [pc, #1564]	; 1abcc <__assert_fail@plt+0x8480>
   1a5ac:	add	r3, pc, r3
   1a5b0:	ldr	r3, [r3]
   1a5b4:	tst	r3, #4
   1a5b8:	bne	1a8bc <__assert_fail@plt+0x8170>
   1a5bc:	ldr	r9, [r5]
   1a5c0:	rsb	r9, r9, #0
   1a5c4:	cmp	r9, #0
   1a5c8:	beq	1a654 <__assert_fail@plt+0x7f08>
   1a5cc:	ldr	r0, [sp, #12]
   1a5d0:	bl	12704 <close@plt>
   1a5d4:	cmn	r9, #16
   1a5d8:	beq	1a0f0 <__assert_fail@plt+0x79a4>
   1a5dc:	mov	r0, r6
   1a5e0:	mov	r2, #0
   1a5e4:	ldr	r1, [pc, #1500]	; 1abc8 <__assert_fail@plt+0x847c>
   1a5e8:	bl	122a8 <ioctl@plt>
   1a5ec:	b	1a0f0 <__assert_fail@plt+0x79a4>
   1a5f0:	ldr	r3, [pc, #1496]	; 1abd0 <__assert_fail@plt+0x8484>
   1a5f4:	add	r3, pc, r3
   1a5f8:	ldr	r3, [r3]
   1a5fc:	tst	r3, #4
   1a600:	beq	1a654 <__assert_fail@plt+0x7f08>
   1a604:	ldr	r3, [pc, #1392]	; 1ab7c <__assert_fail@plt+0x8430>
   1a608:	ldr	r3, [r7, r3]
   1a60c:	ldr	r5, [r3]
   1a610:	bl	123ec <getpid@plt>
   1a614:	ldr	r2, [pc, #1464]	; 1abd4 <__assert_fail@plt+0x8488>
   1a618:	ldr	r3, [pc, #1464]	; 1abd8 <__assert_fail@plt+0x848c>
   1a61c:	add	r2, pc, r2
   1a620:	str	r2, [sp, #4]
   1a624:	ldr	r2, [pc, #1456]	; 1abdc <__assert_fail@plt+0x8490>
   1a628:	add	r3, pc, r3
   1a62c:	str	r3, [sp]
   1a630:	mov	r1, #1
   1a634:	add	r2, pc, r2
   1a638:	mov	r3, r0
   1a63c:	mov	r0, r5
   1a640:	bl	12578 <__fprintf_chk@plt>
   1a644:	ldr	r1, [pc, #1428]	; 1abe0 <__assert_fail@plt+0x8494>
   1a648:	mov	r0, r4
   1a64c:	add	r1, pc, r1
   1a650:	bl	16e4c <__assert_fail@plt+0x4700>
   1a654:	ldr	r0, [sp, #12]
   1a658:	bl	12704 <close@plt>
   1a65c:	mov	r2, #232	; 0xe8
   1a660:	mov	r0, r8
   1a664:	mov	r1, #0
   1a668:	bl	124dc <memset@plt>
   1a66c:	ldr	r2, [pc, #1392]	; 1abe4 <__assert_fail@plt+0x8498>
   1a670:	ldrb	r3, [r4, #144]	; 0x90
   1a674:	add	r2, pc, r2
   1a678:	ldr	r9, [r2]
   1a67c:	bic	r3, r3, #5
   1a680:	ands	r9, r9, #16
   1a684:	strb	r3, [r4, #144]	; 0x90
   1a688:	beq	1a104 <__assert_fail@plt+0x79b8>
   1a68c:	ldr	r3, [pc, #1256]	; 1ab7c <__assert_fail@plt+0x8430>
   1a690:	mov	r9, #0
   1a694:	ldr	r3, [r7, r3]
   1a698:	ldr	r5, [r3]
   1a69c:	bl	123ec <getpid@plt>
   1a6a0:	ldr	r2, [pc, #1344]	; 1abe8 <__assert_fail@plt+0x849c>
   1a6a4:	ldr	r3, [pc, #1344]	; 1abec <__assert_fail@plt+0x84a0>
   1a6a8:	add	r2, pc, r2
   1a6ac:	str	r2, [sp, #4]
   1a6b0:	ldr	r2, [pc, #1336]	; 1abf0 <__assert_fail@plt+0x84a4>
   1a6b4:	add	r3, pc, r3
   1a6b8:	str	r3, [sp]
   1a6bc:	add	r2, pc, r2
   1a6c0:	mov	r1, #1
   1a6c4:	mov	r3, r0
   1a6c8:	mov	r0, r5
   1a6cc:	bl	12578 <__fprintf_chk@plt>
   1a6d0:	ldr	r1, [pc, #1308]	; 1abf4 <__assert_fail@plt+0x84a8>
   1a6d4:	mov	r0, r4
   1a6d8:	add	r1, pc, r1
   1a6dc:	bl	16e4c <__assert_fail@plt+0x4700>
   1a6e0:	b	1a104 <__assert_fail@plt+0x79b8>
   1a6e4:	ldr	r8, [r5]
   1a6e8:	cmp	sl, #0
   1a6ec:	rsb	r9, r8, #0
   1a6f0:	beq	1a408 <__assert_fail@plt+0x7cbc>
   1a6f4:	ldr	r3, [sp, #24]
   1a6f8:	ldr	sl, [r3]
   1a6fc:	bl	123ec <getpid@plt>
   1a700:	ldr	r3, [sp, #28]
   1a704:	mov	r2, fp
   1a708:	str	r3, [sp, #4]
   1a70c:	ldr	r3, [sp, #20]
   1a710:	mov	r1, #1
   1a714:	str	r3, [sp]
   1a718:	mov	r3, r0
   1a71c:	mov	r0, sl
   1a720:	bl	12578 <__fprintf_chk@plt>
   1a724:	ldr	r1, [pc, #1228]	; 1abf8 <__assert_fail@plt+0x84ac>
   1a728:	mov	r0, r4
   1a72c:	add	r1, pc, r1
   1a730:	bl	16e4c <__assert_fail@plt+0x4700>
   1a734:	b	1a408 <__assert_fail@plt+0x7cbc>
   1a738:	ldr	r3, [pc, #1084]	; 1ab7c <__assert_fail@plt+0x8430>
   1a73c:	ldr	r3, [r7, r3]
   1a740:	ldr	r8, [r3]
   1a744:	bl	123ec <getpid@plt>
   1a748:	ldr	r2, [pc, #1196]	; 1abfc <__assert_fail@plt+0x84b0>
   1a74c:	ldr	r3, [pc, #1196]	; 1ac00 <__assert_fail@plt+0x84b4>
   1a750:	add	r2, pc, r2
   1a754:	str	r2, [sp, #4]
   1a758:	ldr	r2, [pc, #1188]	; 1ac04 <__assert_fail@plt+0x84b8>
   1a75c:	add	r3, pc, r3
   1a760:	str	r3, [sp]
   1a764:	add	r2, pc, r2
   1a768:	mov	r1, #1
   1a76c:	mov	r3, r0
   1a770:	mov	r0, r8
   1a774:	bl	12578 <__fprintf_chk@plt>
   1a778:	ldr	r1, [pc, #1160]	; 1ac08 <__assert_fail@plt+0x84bc>
   1a77c:	mov	r0, r4
   1a780:	add	r1, pc, r1
   1a784:	bl	16e4c <__assert_fail@plt+0x4700>
   1a788:	ldr	r0, [r4, #132]	; 0x84
   1a78c:	b	1a044 <__assert_fail@plt+0x78f8>
   1a790:	ldr	r8, [r5]
   1a794:	cmp	r9, #0
   1a798:	rsb	r9, r8, #0
   1a79c:	beq	1a408 <__assert_fail@plt+0x7cbc>
   1a7a0:	ldr	r3, [sp, #24]
   1a7a4:	ldr	sl, [r3]
   1a7a8:	bl	123ec <getpid@plt>
   1a7ac:	ldr	r3, [sp, #28]
   1a7b0:	mov	r2, fp
   1a7b4:	str	r3, [sp, #4]
   1a7b8:	ldr	r3, [sp, #20]
   1a7bc:	mov	r1, #1
   1a7c0:	str	r3, [sp]
   1a7c4:	mov	r3, r0
   1a7c8:	mov	r0, sl
   1a7cc:	bl	12578 <__fprintf_chk@plt>
   1a7d0:	ldr	r1, [pc, #1076]	; 1ac0c <__assert_fail@plt+0x84c0>
   1a7d4:	mov	r0, r4
   1a7d8:	add	r1, pc, r1
   1a7dc:	bl	16e4c <__assert_fail@plt+0x4700>
   1a7e0:	b	1a408 <__assert_fail@plt+0x7cbc>
   1a7e4:	ldr	r3, [pc, #1060]	; 1ac10 <__assert_fail@plt+0x84c4>
   1a7e8:	add	r3, pc, r3
   1a7ec:	ldr	r3, [r3]
   1a7f0:	tst	r3, #4
   1a7f4:	beq	1a5bc <__assert_fail@plt+0x7e70>
   1a7f8:	ldr	r3, [pc, #892]	; 1ab7c <__assert_fail@plt+0x8430>
   1a7fc:	ldr	r3, [r7, r3]
   1a800:	ldr	r9, [r3]
   1a804:	bl	123ec <getpid@plt>
   1a808:	ldr	r2, [pc, #1028]	; 1ac14 <__assert_fail@plt+0x84c8>
   1a80c:	ldr	r3, [pc, #1028]	; 1ac18 <__assert_fail@plt+0x84cc>
   1a810:	add	r2, pc, r2
   1a814:	str	r2, [sp, #4]
   1a818:	ldr	r2, [pc, #1020]	; 1ac1c <__assert_fail@plt+0x84d0>
   1a81c:	add	r3, pc, r3
   1a820:	str	r3, [sp]
   1a824:	add	r2, pc, r2
   1a828:	mov	r1, #1
   1a82c:	mov	r3, r0
   1a830:	mov	r0, r9
   1a834:	bl	12578 <__fprintf_chk@plt>
   1a838:	ldr	r1, [pc, #992]	; 1ac20 <__assert_fail@plt+0x84d4>
   1a83c:	mov	r0, r4
   1a840:	add	r1, pc, r1
   1a844:	bl	16e4c <__assert_fail@plt+0x4700>
   1a848:	b	1a5bc <__assert_fail@plt+0x7e70>
   1a84c:	ldr	r3, [pc, #808]	; 1ab7c <__assert_fail@plt+0x8430>
   1a850:	ldr	r3, [r7, r3]
   1a854:	ldr	r6, [r3]
   1a858:	bl	123ec <getpid@plt>
   1a85c:	ldr	r2, [pc, #960]	; 1ac24 <__assert_fail@plt+0x84d8>
   1a860:	ldr	r3, [pc, #960]	; 1ac28 <__assert_fail@plt+0x84dc>
   1a864:	add	r2, pc, r2
   1a868:	str	r2, [sp, #4]
   1a86c:	ldr	r2, [pc, #952]	; 1ac2c <__assert_fail@plt+0x84e0>
   1a870:	add	r3, pc, r3
   1a874:	str	r3, [sp]
   1a878:	add	r2, pc, r2
   1a87c:	mov	r1, #1
   1a880:	mov	r3, r0
   1a884:	mov	r0, r6
   1a888:	bl	12578 <__fprintf_chk@plt>
   1a88c:	ldr	r1, [pc, #924]	; 1ac30 <__assert_fail@plt+0x84e4>
   1a890:	mov	r0, r4
   1a894:	add	r1, pc, r1
   1a898:	bl	16e4c <__assert_fail@plt+0x4700>
   1a89c:	b	1a15c <__assert_fail@plt+0x7a10>
   1a8a0:	add	r1, sp, #40	; 0x28
   1a8a4:	ldr	r0, [sp, #12]
   1a8a8:	bl	21058 <__assert_fail@plt+0xe90c>
   1a8ac:	cmp	r0, #0
   1a8b0:	bne	1a980 <__assert_fail@plt+0x8234>
   1a8b4:	ldrd	sl, [sp, #40]	; 0x28
   1a8b8:	b	1a1f4 <__assert_fail@plt+0x7aa8>
   1a8bc:	ldr	r3, [pc, #696]	; 1ab7c <__assert_fail@plt+0x8430>
   1a8c0:	ldr	r3, [r7, r3]
   1a8c4:	ldr	r9, [r3]
   1a8c8:	bl	123ec <getpid@plt>
   1a8cc:	ldr	r2, [pc, #864]	; 1ac34 <__assert_fail@plt+0x84e8>
   1a8d0:	ldr	r3, [pc, #864]	; 1ac38 <__assert_fail@plt+0x84ec>
   1a8d4:	add	r2, pc, r2
   1a8d8:	str	r2, [sp, #4]
   1a8dc:	ldr	r2, [pc, #856]	; 1ac3c <__assert_fail@plt+0x84f0>
   1a8e0:	add	r3, pc, r3
   1a8e4:	str	r3, [sp]
   1a8e8:	add	r2, pc, r2
   1a8ec:	mov	r1, #1
   1a8f0:	mov	r3, r0
   1a8f4:	mov	r0, r9
   1a8f8:	bl	12578 <__fprintf_chk@plt>
   1a8fc:	ldr	r1, [pc, #828]	; 1ac40 <__assert_fail@plt+0x84f4>
   1a900:	mov	r0, r4
   1a904:	add	r1, pc, r1
   1a908:	bl	16e4c <__assert_fail@plt+0x4700>
   1a90c:	b	1a5bc <__assert_fail@plt+0x7e70>
   1a910:	mvn	r9, #21
   1a914:	b	1a104 <__assert_fail@plt+0x79b8>
   1a918:	ldr	r3, [pc, #804]	; 1ac44 <__assert_fail@plt+0x84f8>
   1a91c:	add	r3, pc, r3
   1a920:	ldr	r3, [r3]
   1a924:	tst	r3, #4
   1a928:	beq	1a5bc <__assert_fail@plt+0x7e70>
   1a92c:	ldr	r3, [pc, #584]	; 1ab7c <__assert_fail@plt+0x8430>
   1a930:	ldr	r3, [r7, r3]
   1a934:	ldr	r9, [r3]
   1a938:	bl	123ec <getpid@plt>
   1a93c:	ldr	r2, [pc, #772]	; 1ac48 <__assert_fail@plt+0x84fc>
   1a940:	ldr	r3, [pc, #772]	; 1ac4c <__assert_fail@plt+0x8500>
   1a944:	add	r2, pc, r2
   1a948:	str	r2, [sp, #4]
   1a94c:	ldr	r2, [pc, #764]	; 1ac50 <__assert_fail@plt+0x8504>
   1a950:	add	r3, pc, r3
   1a954:	str	r3, [sp]
   1a958:	add	r2, pc, r2
   1a95c:	mov	r1, #1
   1a960:	mov	r3, r0
   1a964:	mov	r0, r9
   1a968:	bl	12578 <__fprintf_chk@plt>
   1a96c:	ldr	r1, [pc, #736]	; 1ac54 <__assert_fail@plt+0x8508>
   1a970:	mov	r0, r4
   1a974:	add	r1, pc, r1
   1a978:	bl	16e4c <__assert_fail@plt+0x4700>
   1a97c:	b	1a5bc <__assert_fail@plt+0x7e70>
   1a980:	ldr	r3, [pc, #720]	; 1ac58 <__assert_fail@plt+0x850c>
   1a984:	add	r3, pc, r3
   1a988:	ldr	r3, [r3]
   1a98c:	tst	r3, #4
   1a990:	beq	1a5bc <__assert_fail@plt+0x7e70>
   1a994:	ldr	r3, [pc, #480]	; 1ab7c <__assert_fail@plt+0x8430>
   1a998:	ldr	r3, [r7, r3]
   1a99c:	ldr	r9, [r3]
   1a9a0:	bl	123ec <getpid@plt>
   1a9a4:	ldr	r2, [pc, #688]	; 1ac5c <__assert_fail@plt+0x8510>
   1a9a8:	ldr	r3, [pc, #688]	; 1ac60 <__assert_fail@plt+0x8514>
   1a9ac:	add	r2, pc, r2
   1a9b0:	str	r2, [sp, #4]
   1a9b4:	ldr	r2, [pc, #680]	; 1ac64 <__assert_fail@plt+0x8518>
   1a9b8:	add	r3, pc, r3
   1a9bc:	str	r3, [sp]
   1a9c0:	add	r2, pc, r2
   1a9c4:	mov	r1, #1
   1a9c8:	mov	r3, r0
   1a9cc:	mov	r0, r9
   1a9d0:	bl	12578 <__fprintf_chk@plt>
   1a9d4:	ldr	r1, [pc, #652]	; 1ac68 <__assert_fail@plt+0x851c>
   1a9d8:	mov	r0, r4
   1a9dc:	add	r1, pc, r1
   1a9e0:	bl	16e4c <__assert_fail@plt+0x4700>
   1a9e4:	b	1a5bc <__assert_fail@plt+0x7e70>
   1a9e8:	mov	r1, r9
   1a9ec:	ldr	r0, [sp, #20]
   1a9f0:	bl	21058 <__assert_fail@plt+0xe90c>
   1a9f4:	cmp	r0, #0
   1a9f8:	bne	1a5bc <__assert_fail@plt+0x7e70>
   1a9fc:	ldrd	r0, [sp, #40]	; 0x28
   1aa00:	ldrd	r2, [sp, #32]
   1aa04:	cmp	r1, r3
   1aa08:	cmpeq	r0, r2
   1aa0c:	beq	1a654 <__assert_fail@plt+0x7f08>
   1aa10:	ldr	r3, [pc, #596]	; 1ac6c <__assert_fail@plt+0x8520>
   1aa14:	mov	r2, #34	; 0x22
   1aa18:	add	r3, pc, r3
   1aa1c:	str	r2, [r5]
   1aa20:	ldr	r3, [r3]
   1aa24:	tst	r3, #4
   1aa28:	beq	1a2ec <__assert_fail@plt+0x7ba0>
   1aa2c:	ldr	r3, [pc, #328]	; 1ab7c <__assert_fail@plt+0x8430>
   1aa30:	ldr	r3, [r7, r3]
   1aa34:	ldr	r9, [r3]
   1aa38:	bl	123ec <getpid@plt>
   1aa3c:	ldr	r2, [pc, #556]	; 1ac70 <__assert_fail@plt+0x8524>
   1aa40:	ldr	r3, [pc, #556]	; 1ac74 <__assert_fail@plt+0x8528>
   1aa44:	add	r2, pc, r2
   1aa48:	str	r2, [sp, #4]
   1aa4c:	ldr	r2, [pc, #548]	; 1ac78 <__assert_fail@plt+0x852c>
   1aa50:	add	r3, pc, r3
   1aa54:	str	r3, [sp]
   1aa58:	add	r2, pc, r2
   1aa5c:	mov	r1, #1
   1aa60:	mov	r3, r0
   1aa64:	mov	r0, r9
   1aa68:	bl	12578 <__fprintf_chk@plt>
   1aa6c:	ldrd	sl, [sp, #40]	; 0x28
   1aa70:	ldr	r1, [pc, #516]	; 1ac7c <__assert_fail@plt+0x8530>
   1aa74:	ldrd	r2, [sp, #32]
   1aa78:	add	r1, pc, r1
   1aa7c:	strd	sl, [sp]
   1aa80:	mov	r0, r4
   1aa84:	bl	16e4c <__assert_fail@plt+0x4700>
   1aa88:	b	1a5bc <__assert_fail@plt+0x7e70>
   1aa8c:	ldr	r3, [pc, #232]	; 1ab7c <__assert_fail@plt+0x8430>
   1aa90:	ldr	r3, [r7, r3]
   1aa94:	ldr	fp, [r3]
   1aa98:	bl	123ec <getpid@plt>
   1aa9c:	ldr	r2, [pc, #476]	; 1ac80 <__assert_fail@plt+0x8534>
   1aaa0:	ldr	r3, [pc, #476]	; 1ac84 <__assert_fail@plt+0x8538>
   1aaa4:	add	r2, pc, r2
   1aaa8:	str	r2, [sp, #4]
   1aaac:	ldr	r2, [pc, #468]	; 1ac88 <__assert_fail@plt+0x853c>
   1aab0:	add	r3, pc, r3
   1aab4:	str	r3, [sp]
   1aab8:	add	r2, pc, r2
   1aabc:	mov	r1, #1
   1aac0:	mov	r3, r0
   1aac4:	mov	r0, fp
   1aac8:	bl	12578 <__fprintf_chk@plt>
   1aacc:	ldrd	sl, [sp, #40]	; 0x28
   1aad0:	ldr	r1, [pc, #436]	; 1ac8c <__assert_fail@plt+0x8540>
   1aad4:	ldrd	r2, [sp, #32]
   1aad8:	add	r1, pc, r1
   1aadc:	strd	sl, [sp]
   1aae0:	mov	r0, r4
   1aae4:	bl	16e4c <__assert_fail@plt+0x4700>
   1aae8:	b	1a2c4 <__assert_fail@plt+0x7b78>
   1aaec:	ldr	r3, [pc, #136]	; 1ab7c <__assert_fail@plt+0x8430>
   1aaf0:	ldr	r3, [r7, r3]
   1aaf4:	ldr	fp, [r3]
   1aaf8:	bl	123ec <getpid@plt>
   1aafc:	ldr	r2, [pc, #396]	; 1ac90 <__assert_fail@plt+0x8544>
   1ab00:	ldr	r3, [pc, #396]	; 1ac94 <__assert_fail@plt+0x8548>
   1ab04:	add	r2, pc, r2
   1ab08:	str	r2, [sp, #4]
   1ab0c:	ldr	r2, [pc, #388]	; 1ac98 <__assert_fail@plt+0x854c>
   1ab10:	add	r3, pc, r3
   1ab14:	str	r3, [sp]
   1ab18:	add	r2, pc, r2
   1ab1c:	mov	r1, #1
   1ab20:	mov	r3, r0
   1ab24:	mov	r0, fp
   1ab28:	bl	12578 <__fprintf_chk@plt>
   1ab2c:	ldr	r1, [pc, #360]	; 1ac9c <__assert_fail@plt+0x8550>
   1ab30:	mov	r0, r4
   1ab34:	add	r1, pc, r1
   1ab38:	bl	16e4c <__assert_fail@plt+0x4700>
   1ab3c:	ldrd	r0, [sp, #40]	; 0x28
   1ab40:	b	1a290 <__assert_fail@plt+0x7b44>
   1ab44:	bl	12200 <__stack_chk_fail@plt>
   1ab48:	andeq	sl, r1, r0, lsl #28
   1ab4c:	andeq	r0, r0, ip, asr r2
   1ab50:	andeq	fp, r1, r8, asr #4
   1ab54:	andeq	r0, r8, r2
   1ab58:	andeq	fp, r1, r4, lsl #4
   1ab5c:	ldrdeq	fp, [r1], -r8
   1ab60:	cmneq	sp, r0, asr #16
   1ab64:	andeq	fp, r1, r8, lsl r1
   1ab68:	andeq	fp, r1, r0, asr #1
   1ab6c:	andeq	fp, r1, r0, lsr #1
   1ab70:	andeq	r4, r0, r4, lsl #24
   1ab74:	andeq	sl, r1, ip, lsl #31
   1ab78:	andeq	sl, r1, r8, asr pc
   1ab7c:	andeq	r0, r0, r0, ror #4
   1ab80:	andeq	r9, r0, r4, lsr sp
   1ab84:	andeq	r9, r0, r4, ror r8
   1ab88:	andeq	r9, r0, r8, asr r8
   1ab8c:	andeq	r9, r0, r4, lsl #27
   1ab90:	ldrdeq	r9, [r0], -ip
   1ab94:	andeq	r9, r0, ip, lsl r8
   1ab98:	andeq	r9, r0, r0, lsl #16
   1ab9c:	andeq	r9, r0, r4, ror #26
   1aba0:	andeq	r9, r0, r8, lsl #25
   1aba4:	andeq	r9, r0, r8, asr #15
   1aba8:	andeq	r9, r0, ip, lsr #15
   1abac:	andeq	r9, r0, r8, asr #29
   1abb0:	andeq	r9, r0, r8, lsl ip
   1abb4:	andeq	r9, r0, r8, asr r7
   1abb8:	andeq	r9, r0, r8, lsr #14
   1abbc:	ldrdeq	r9, [r0], -r0
   1abc0:	andeq	r9, r0, r0, ror ip
   1abc4:	andeq	r9, r0, ip, lsr #22
   1abc8:	andeq	r4, r0, r1, lsl #24
   1abcc:	andeq	sl, r1, r0, ror #24
   1abd0:	andeq	sl, r1, r8, lsl ip
   1abd4:	andeq	r9, r0, r4, ror r5
   1abd8:	andeq	r9, r0, ip, ror #10
   1abdc:	andeq	r9, r0, ip, asr #10
   1abe0:	andeq	r9, r0, r0, ror #22
   1abe4:	muleq	r1, r8, fp
   1abe8:	andeq	r9, r0, r0, lsr #19
   1abec:	andeq	r9, r0, r0, ror #9
   1abf0:	andeq	r9, r0, r4, asr #9
   1abf4:	ldrdeq	r9, [r0], -r4
   1abf8:	andeq	r9, r0, r8, lsl sl
   1abfc:	strdeq	r9, [r0], -r8
   1ac00:	andeq	r9, r0, r8, lsr r4
   1ac04:	andeq	r9, r0, ip, lsl r4
   1ac08:	muleq	r0, r8, r9
   1ac0c:	andeq	r9, r0, r8, lsl #17
   1ac10:	andeq	sl, r1, r4, lsr #20
   1ac14:	andeq	r9, r0, r0, lsl #7
   1ac18:	andeq	r9, r0, r8, ror r3
   1ac1c:	andeq	r9, r0, ip, asr r3
   1ac20:	muleq	r0, r0, r9
   1ac24:	andeq	r9, r0, r4, ror #15
   1ac28:	andeq	r9, r0, r4, lsr #6
   1ac2c:	andeq	r9, r0, r8, lsl #6
   1ac30:	andeq	r9, r0, ip, asr #16
   1ac34:			; <UNDEFINED> instruction: 0x000092bc
   1ac38:			; <UNDEFINED> instruction: 0x000092b4
   1ac3c:	muleq	r0, r8, r2
   1ac40:	andeq	r9, r0, r8, ror #16
   1ac44:	strdeq	sl, [r1], -r0
   1ac48:	andeq	r9, r0, ip, asr #4
   1ac4c:	andeq	r9, r0, r4, asr #4
   1ac50:	andeq	r9, r0, r8, lsr #4
   1ac54:	andeq	r9, r0, r4, ror r8
   1ac58:	andeq	sl, r1, r8, lsl #17
   1ac5c:	andeq	r9, r0, r4, ror #3
   1ac60:	ldrdeq	r9, [r0], -ip
   1ac64:	andeq	r9, r0, r0, asr #3
   1ac68:			; <UNDEFINED> instruction: 0x000097b0
   1ac6c:	strdeq	sl, [r1], -r4
   1ac70:	andeq	r9, r0, ip, asr #2
   1ac74:	andeq	r9, r0, r4, asr #2
   1ac78:	andeq	r9, r0, r8, lsr #2
   1ac7c:	strdeq	r9, [r0], -ip
   1ac80:	andeq	r9, r0, ip, ror #1
   1ac84:	andeq	r9, r0, r4, ror #1
   1ac88:	andeq	r9, r0, r8, asr #1
   1ac8c:	andeq	r9, r0, r4, ror #14
   1ac90:	andeq	r9, r0, ip, lsl #1
   1ac94:	andeq	r9, r0, r4, lsl #1
   1ac98:	andeq	r9, r0, r8, rrx
   1ac9c:	ldrdeq	r9, [r0], -r8
   1aca0:	push	{r4, r5, r6, lr}
   1aca4:	sub	sp, sp, #8
   1aca8:	mov	r4, r1
   1acac:	mov	r6, r0
   1acb0:	bl	17ac0 <__assert_fail@plt+0x5374>
   1acb4:	ldr	r5, [pc, #268]	; 1adc8 <__assert_fail@plt+0x867c>
   1acb8:	add	r5, pc, r5
   1acbc:	cmp	r0, #0
   1acc0:	blt	1adc0 <__assert_fail@plt+0x8674>
   1acc4:	mov	r2, r4
   1acc8:	ldr	r1, [pc, #252]	; 1adcc <__assert_fail@plt+0x8680>
   1accc:	bl	122a8 <ioctl@plt>
   1acd0:	ldr	r3, [pc, #248]	; 1add0 <__assert_fail@plt+0x8684>
   1acd4:	ldr	r4, [pc, r3]
   1acd8:	and	r4, r4, #4
   1acdc:	cmp	r0, #0
   1ace0:	blt	1ad58 <__assert_fail@plt+0x860c>
   1ace4:	cmp	r4, #0
   1ace8:	bne	1acf8 <__assert_fail@plt+0x85ac>
   1acec:	mov	r0, r4
   1acf0:	add	sp, sp, #8
   1acf4:	pop	{r4, r5, r6, pc}
   1acf8:	ldr	r3, [pc, #212]	; 1add4 <__assert_fail@plt+0x8688>
   1acfc:	mov	r4, #0
   1ad00:	ldr	r3, [r5, r3]
   1ad04:	ldr	r5, [r3]
   1ad08:	bl	123ec <getpid@plt>
   1ad0c:	ldr	r2, [pc, #196]	; 1add8 <__assert_fail@plt+0x868c>
   1ad10:	ldr	r3, [pc, #196]	; 1addc <__assert_fail@plt+0x8690>
   1ad14:	add	r2, pc, r2
   1ad18:	str	r2, [sp, #4]
   1ad1c:	ldr	r2, [pc, #188]	; 1ade0 <__assert_fail@plt+0x8694>
   1ad20:	add	r3, pc, r3
   1ad24:	str	r3, [sp]
   1ad28:	add	r2, pc, r2
   1ad2c:	mov	r1, #1
   1ad30:	mov	r3, r0
   1ad34:	mov	r0, r5
   1ad38:	bl	12578 <__fprintf_chk@plt>
   1ad3c:	ldr	r1, [pc, #160]	; 1ade4 <__assert_fail@plt+0x8698>
   1ad40:	mov	r0, r6
   1ad44:	add	r1, pc, r1
   1ad48:	bl	16e4c <__assert_fail@plt+0x4700>
   1ad4c:	mov	r0, r4
   1ad50:	add	sp, sp, #8
   1ad54:	pop	{r4, r5, r6, pc}
   1ad58:	bl	1247c <__errno_location@plt>
   1ad5c:	cmp	r4, #0
   1ad60:	ldr	r4, [r0]
   1ad64:	rsb	r4, r4, #0
   1ad68:	beq	1acec <__assert_fail@plt+0x85a0>
   1ad6c:	ldr	r3, [pc, #96]	; 1add4 <__assert_fail@plt+0x8688>
   1ad70:	ldr	r3, [r5, r3]
   1ad74:	ldr	r5, [r3]
   1ad78:	bl	123ec <getpid@plt>
   1ad7c:	ldr	r2, [pc, #100]	; 1ade8 <__assert_fail@plt+0x869c>
   1ad80:	ldr	r3, [pc, #100]	; 1adec <__assert_fail@plt+0x86a0>
   1ad84:	add	r2, pc, r2
   1ad88:	str	r2, [sp, #4]
   1ad8c:	ldr	r2, [pc, #92]	; 1adf0 <__assert_fail@plt+0x86a4>
   1ad90:	add	r3, pc, r3
   1ad94:	str	r3, [sp]
   1ad98:	add	r2, pc, r2
   1ad9c:	mov	r1, #1
   1ada0:	mov	r3, r0
   1ada4:	mov	r0, r5
   1ada8:	bl	12578 <__fprintf_chk@plt>
   1adac:	ldr	r1, [pc, #64]	; 1adf4 <__assert_fail@plt+0x86a8>
   1adb0:	mov	r0, r6
   1adb4:	add	r1, pc, r1
   1adb8:	bl	16e4c <__assert_fail@plt+0x4700>
   1adbc:	b	1acec <__assert_fail@plt+0x85a0>
   1adc0:	mvn	r4, #21
   1adc4:	b	1acec <__assert_fail@plt+0x85a0>
   1adc8:	ldrdeq	sl, [r1], -r4
   1adcc:	andeq	r4, r0, r8, lsl #24
   1add0:	andeq	sl, r1, r8, lsr r5
   1add4:	andeq	r0, r0, r0, ror #4
   1add8:	andeq	r8, r0, ip, ror lr
   1addc:	andeq	r8, r0, r4, ror lr
   1ade0:	andeq	r8, r0, r8, asr lr
   1ade4:	andeq	r9, r0, r8, lsr #11
   1ade8:	andeq	r8, r0, ip, lsl #28
   1adec:	andeq	r8, r0, r4, lsl #28
   1adf0:	andeq	r8, r0, r8, ror #27
   1adf4:	andeq	r9, r0, r8, lsl r5
   1adf8:	push	{r4, r5, r6, lr}
   1adfc:	sub	sp, sp, #8
   1ae00:	mov	r4, r2
   1ae04:	mov	r6, r0
   1ae08:	bl	17ac0 <__assert_fail@plt+0x5374>
   1ae0c:	ldr	r5, [pc, #268]	; 1af20 <__assert_fail@plt+0x87d4>
   1ae10:	add	r5, pc, r5
   1ae14:	cmp	r0, #0
   1ae18:	blt	1af18 <__assert_fail@plt+0x87cc>
   1ae1c:	mov	r2, r4
   1ae20:	ldr	r1, [pc, #252]	; 1af24 <__assert_fail@plt+0x87d8>
   1ae24:	bl	122a8 <ioctl@plt>
   1ae28:	ldr	r3, [pc, #248]	; 1af28 <__assert_fail@plt+0x87dc>
   1ae2c:	ldr	r4, [pc, r3]
   1ae30:	and	r4, r4, #4
   1ae34:	cmp	r0, #0
   1ae38:	blt	1aeb0 <__assert_fail@plt+0x8764>
   1ae3c:	cmp	r4, #0
   1ae40:	bne	1ae50 <__assert_fail@plt+0x8704>
   1ae44:	mov	r0, r4
   1ae48:	add	sp, sp, #8
   1ae4c:	pop	{r4, r5, r6, pc}
   1ae50:	ldr	r3, [pc, #212]	; 1af2c <__assert_fail@plt+0x87e0>
   1ae54:	mov	r4, #0
   1ae58:	ldr	r3, [r5, r3]
   1ae5c:	ldr	r5, [r3]
   1ae60:	bl	123ec <getpid@plt>
   1ae64:	ldr	r2, [pc, #196]	; 1af30 <__assert_fail@plt+0x87e4>
   1ae68:	ldr	r3, [pc, #196]	; 1af34 <__assert_fail@plt+0x87e8>
   1ae6c:	add	r2, pc, r2
   1ae70:	str	r2, [sp, #4]
   1ae74:	ldr	r2, [pc, #188]	; 1af38 <__assert_fail@plt+0x87ec>
   1ae78:	add	r3, pc, r3
   1ae7c:	str	r3, [sp]
   1ae80:	add	r2, pc, r2
   1ae84:	mov	r1, #1
   1ae88:	mov	r3, r0
   1ae8c:	mov	r0, r5
   1ae90:	bl	12578 <__fprintf_chk@plt>
   1ae94:	ldr	r1, [pc, #160]	; 1af3c <__assert_fail@plt+0x87f0>
   1ae98:	mov	r0, r6
   1ae9c:	add	r1, pc, r1
   1aea0:	bl	16e4c <__assert_fail@plt+0x4700>
   1aea4:	mov	r0, r4
   1aea8:	add	sp, sp, #8
   1aeac:	pop	{r4, r5, r6, pc}
   1aeb0:	bl	1247c <__errno_location@plt>
   1aeb4:	cmp	r4, #0
   1aeb8:	ldr	r4, [r0]
   1aebc:	rsb	r4, r4, #0
   1aec0:	beq	1ae44 <__assert_fail@plt+0x86f8>
   1aec4:	ldr	r3, [pc, #96]	; 1af2c <__assert_fail@plt+0x87e0>
   1aec8:	ldr	r3, [r5, r3]
   1aecc:	ldr	r5, [r3]
   1aed0:	bl	123ec <getpid@plt>
   1aed4:	ldr	r2, [pc, #100]	; 1af40 <__assert_fail@plt+0x87f4>
   1aed8:	ldr	r3, [pc, #100]	; 1af44 <__assert_fail@plt+0x87f8>
   1aedc:	add	r2, pc, r2
   1aee0:	str	r2, [sp, #4]
   1aee4:	ldr	r2, [pc, #92]	; 1af48 <__assert_fail@plt+0x87fc>
   1aee8:	add	r3, pc, r3
   1aeec:	str	r3, [sp]
   1aef0:	add	r2, pc, r2
   1aef4:	mov	r1, #1
   1aef8:	mov	r3, r0
   1aefc:	mov	r0, r5
   1af00:	bl	12578 <__fprintf_chk@plt>
   1af04:	ldr	r1, [pc, #64]	; 1af4c <__assert_fail@plt+0x8800>
   1af08:	mov	r0, r6
   1af0c:	add	r1, pc, r1
   1af10:	bl	16e4c <__assert_fail@plt+0x4700>
   1af14:	b	1ae44 <__assert_fail@plt+0x86f8>
   1af18:	mvn	r4, #21
   1af1c:	b	1ae44 <__assert_fail@plt+0x86f8>
   1af20:	andeq	r9, r1, ip, ror pc
   1af24:	andeq	r4, r0, r9, lsl #24
   1af28:	andeq	sl, r1, r0, ror #7
   1af2c:	andeq	r0, r0, r0, ror #4
   1af30:	andeq	r8, r0, r4, lsr #26
   1af34:	andeq	r8, r0, ip, lsl sp
   1af38:	andeq	r8, r0, r0, lsl #26
   1af3c:	andeq	r9, r0, r0, lsl #9
   1af40:			; <UNDEFINED> instruction: 0x00008cb4
   1af44:	andeq	r8, r0, ip, lsr #25
   1af48:	muleq	r0, r0, ip
   1af4c:	strdeq	r9, [r0], -r0
   1af50:	push	{r4, r5, lr}
   1af54:	sub	sp, sp, #12
   1af58:	mov	r5, r0
   1af5c:	bl	17ac0 <__assert_fail@plt+0x5374>
   1af60:	ldr	r4, [pc, #284]	; 1b084 <__assert_fail@plt+0x8938>
   1af64:	add	r4, pc, r4
   1af68:	cmp	r0, #0
   1af6c:	blt	1b07c <__assert_fail@plt+0x8930>
   1af70:	mov	r2, #0
   1af74:	ldr	r1, [pc, #268]	; 1b088 <__assert_fail@plt+0x893c>
   1af78:	bl	122a8 <ioctl@plt>
   1af7c:	ldr	r3, [pc, #264]	; 1b08c <__assert_fail@plt+0x8940>
   1af80:	add	r3, pc, r3
   1af84:	ldr	r3, [r3]
   1af88:	and	r3, r3, #4
   1af8c:	cmp	r0, #0
   1af90:	blt	1b008 <__assert_fail@plt+0x88bc>
   1af94:	cmp	r3, #0
   1af98:	bne	1afa8 <__assert_fail@plt+0x885c>
   1af9c:	mov	r0, r3
   1afa0:	add	sp, sp, #12
   1afa4:	pop	{r4, r5, pc}
   1afa8:	ldr	r3, [pc, #224]	; 1b090 <__assert_fail@plt+0x8944>
   1afac:	ldr	r3, [r4, r3]
   1afb0:	ldr	r4, [r3]
   1afb4:	bl	123ec <getpid@plt>
   1afb8:	ldr	r2, [pc, #212]	; 1b094 <__assert_fail@plt+0x8948>
   1afbc:	ldr	r3, [pc, #212]	; 1b098 <__assert_fail@plt+0x894c>
   1afc0:	add	r2, pc, r2
   1afc4:	str	r2, [sp, #4]
   1afc8:	ldr	r2, [pc, #204]	; 1b09c <__assert_fail@plt+0x8950>
   1afcc:	add	r3, pc, r3
   1afd0:	str	r3, [sp]
   1afd4:	add	r2, pc, r2
   1afd8:	mov	r1, #1
   1afdc:	mov	r3, r0
   1afe0:	mov	r0, r4
   1afe4:	bl	12578 <__fprintf_chk@plt>
   1afe8:	ldr	r1, [pc, #176]	; 1b0a0 <__assert_fail@plt+0x8954>
   1afec:	mov	r0, r5
   1aff0:	add	r1, pc, r1
   1aff4:	bl	16e4c <__assert_fail@plt+0x4700>
   1aff8:	mov	r3, #0
   1affc:	mov	r0, r3
   1b000:	add	sp, sp, #12
   1b004:	pop	{r4, r5, pc}
   1b008:	cmp	r3, #0
   1b00c:	bne	1b028 <__assert_fail@plt+0x88dc>
   1b010:	bl	1247c <__errno_location@plt>
   1b014:	ldr	r3, [r0]
   1b018:	rsb	r3, r3, #0
   1b01c:	mov	r0, r3
   1b020:	add	sp, sp, #12
   1b024:	pop	{r4, r5, pc}
   1b028:	ldr	r3, [pc, #96]	; 1b090 <__assert_fail@plt+0x8944>
   1b02c:	ldr	r3, [r4, r3]
   1b030:	ldr	r4, [r3]
   1b034:	bl	123ec <getpid@plt>
   1b038:	ldr	r2, [pc, #100]	; 1b0a4 <__assert_fail@plt+0x8958>
   1b03c:	ldr	r3, [pc, #100]	; 1b0a8 <__assert_fail@plt+0x895c>
   1b040:	add	r2, pc, r2
   1b044:	str	r2, [sp, #4]
   1b048:	ldr	r2, [pc, #92]	; 1b0ac <__assert_fail@plt+0x8960>
   1b04c:	add	r3, pc, r3
   1b050:	str	r3, [sp]
   1b054:	add	r2, pc, r2
   1b058:	mov	r1, #1
   1b05c:	mov	r3, r0
   1b060:	mov	r0, r4
   1b064:	bl	12578 <__fprintf_chk@plt>
   1b068:	ldr	r1, [pc, #64]	; 1b0b0 <__assert_fail@plt+0x8964>
   1b06c:	mov	r0, r5
   1b070:	add	r1, pc, r1
   1b074:	bl	16e4c <__assert_fail@plt+0x4700>
   1b078:	b	1b010 <__assert_fail@plt+0x88c4>
   1b07c:	mvn	r3, #21
   1b080:	b	1af9c <__assert_fail@plt+0x8850>
   1b084:	andeq	r9, r1, r8, lsr #28
   1b088:	andeq	r4, r0, r1, lsl #24
   1b08c:	andeq	sl, r1, ip, lsl #5
   1b090:	andeq	r0, r0, r0, ror #4
   1b094:	ldrdeq	r8, [r0], -r0
   1b098:	andeq	r8, r0, r8, asr #23
   1b09c:	andeq	r8, r0, ip, lsr #23
   1b0a0:	andeq	r9, r0, ip, asr r3
   1b0a4:	andeq	r8, r0, r0, asr fp
   1b0a8:	andeq	r8, r0, r8, asr #22
   1b0ac:	andeq	r8, r0, ip, lsr #22
   1b0b0:	andeq	r9, r0, r4, asr #5
   1b0b4:	push	{r4, r5, r6, r7, r8, lr}
   1b0b8:	sub	sp, sp, #16
   1b0bc:	ldr	r5, [pc, #484]	; 1b2a8 <__assert_fail@plt+0x8b5c>
   1b0c0:	ldr	r3, [pc, #484]	; 1b2ac <__assert_fail@plt+0x8b60>
   1b0c4:	add	r5, pc, r5
   1b0c8:	mvn	r2, #0
   1b0cc:	ldr	r6, [r5, r3]
   1b0d0:	mov	r4, r0
   1b0d4:	str	r2, [sp, #8]
   1b0d8:	ldr	r3, [r6]
   1b0dc:	str	r3, [sp, #12]
   1b0e0:	bl	17aa8 <__assert_fail@plt+0x535c>
   1b0e4:	cmp	r0, #0
   1b0e8:	beq	1b1e4 <__assert_fail@plt+0x8a98>
   1b0ec:	ldr	r3, [r4, #140]	; 0x8c
   1b0f0:	tst	r3, #256	; 0x100
   1b0f4:	beq	1b29c <__assert_fail@plt+0x8b50>
   1b0f8:	mov	r1, #47	; 0x2f
   1b0fc:	bl	125fc <strrchr@plt>
   1b100:	subs	r8, r0, #0
   1b104:	beq	1b1e4 <__assert_fail@plt+0x8a98>
   1b108:	ldr	r1, [pc, #416]	; 1b2b0 <__assert_fail@plt+0x8b64>
   1b10c:	add	r7, sp, #8
   1b110:	mov	r2, r7
   1b114:	add	r1, pc, r1
   1b118:	bl	1262c <sscanf@plt>
   1b11c:	cmp	r0, #1
   1b120:	bne	1b1c8 <__assert_fail@plt+0x8a7c>
   1b124:	ldr	r3, [sp, #8]
   1b128:	cmp	r3, #0
   1b12c:	blt	1b1e4 <__assert_fail@plt+0x8a98>
   1b130:	ldr	r0, [pc, #380]	; 1b2b4 <__assert_fail@plt+0x8b68>
   1b134:	ldr	r1, [pc, #380]	; 1b2b8 <__assert_fail@plt+0x8b6c>
   1b138:	add	r0, pc, r0
   1b13c:	bl	12320 <open64@plt>
   1b140:	subs	r8, r0, #0
   1b144:	movlt	r2, #0
   1b148:	mvnlt	r7, #21
   1b14c:	blt	1b188 <__assert_fail@plt+0x8a3c>
   1b150:	ldr	r3, [pc, #356]	; 1b2bc <__assert_fail@plt+0x8b70>
   1b154:	add	r3, pc, r3
   1b158:	ldr	r3, [r3]
   1b15c:	tst	r3, #4
   1b160:	bne	1b244 <__assert_fail@plt+0x8af8>
   1b164:	ldr	r2, [sp, #8]
   1b168:	ldr	r1, [pc, #336]	; 1b2c0 <__assert_fail@plt+0x8b74>
   1b16c:	mov	r0, r8
   1b170:	bl	122a8 <ioctl@plt>
   1b174:	mov	r7, r0
   1b178:	mov	r0, r8
   1b17c:	bl	12704 <close@plt>
   1b180:	mvn	r2, r7
   1b184:	lsr	r2, r2, #31
   1b188:	ldrb	r3, [r4, #144]	; 0x90
   1b18c:	bic	r3, r3, #8
   1b190:	orr	r3, r3, r2, lsl #3
   1b194:	strb	r3, [r4, #144]	; 0x90
   1b198:	ldr	r3, [pc, #292]	; 1b2c4 <__assert_fail@plt+0x8b78>
   1b19c:	add	r3, pc, r3
   1b1a0:	ldr	r3, [r3]
   1b1a4:	tst	r3, #4
   1b1a8:	bne	1b1ec <__assert_fail@plt+0x8aa0>
   1b1ac:	ldr	r2, [sp, #12]
   1b1b0:	ldr	r3, [r6]
   1b1b4:	mov	r0, r7
   1b1b8:	cmp	r2, r3
   1b1bc:	bne	1b2a4 <__assert_fail@plt+0x8b58>
   1b1c0:	add	sp, sp, #16
   1b1c4:	pop	{r4, r5, r6, r7, r8, pc}
   1b1c8:	ldr	r1, [pc, #248]	; 1b2c8 <__assert_fail@plt+0x8b7c>
   1b1cc:	mov	r2, r7
   1b1d0:	mov	r0, r8
   1b1d4:	add	r1, pc, r1
   1b1d8:	bl	1262c <sscanf@plt>
   1b1dc:	cmp	r0, #1
   1b1e0:	beq	1b124 <__assert_fail@plt+0x89d8>
   1b1e4:	mvn	r7, #21
   1b1e8:	b	1b198 <__assert_fail@plt+0x8a4c>
   1b1ec:	ldr	r3, [pc, #216]	; 1b2cc <__assert_fail@plt+0x8b80>
   1b1f0:	ldr	r3, [r5, r3]
   1b1f4:	ldr	r5, [r3]
   1b1f8:	bl	123ec <getpid@plt>
   1b1fc:	ldr	r2, [pc, #204]	; 1b2d0 <__assert_fail@plt+0x8b84>
   1b200:	ldr	r3, [pc, #204]	; 1b2d4 <__assert_fail@plt+0x8b88>
   1b204:	add	r2, pc, r2
   1b208:	str	r2, [sp, #4]
   1b20c:	ldr	r2, [pc, #196]	; 1b2d8 <__assert_fail@plt+0x8b8c>
   1b210:	add	r3, pc, r3
   1b214:	str	r3, [sp]
   1b218:	add	r2, pc, r2
   1b21c:	mov	r1, #1
   1b220:	mov	r3, r0
   1b224:	mov	r0, r5
   1b228:	bl	12578 <__fprintf_chk@plt>
   1b22c:	ldr	r1, [pc, #168]	; 1b2dc <__assert_fail@plt+0x8b90>
   1b230:	mov	r2, r7
   1b234:	mov	r0, r4
   1b238:	add	r1, pc, r1
   1b23c:	bl	16e4c <__assert_fail@plt+0x4700>
   1b240:	b	1b1ac <__assert_fail@plt+0x8a60>
   1b244:	ldr	r3, [pc, #128]	; 1b2cc <__assert_fail@plt+0x8b80>
   1b248:	ldr	r3, [r5, r3]
   1b24c:	ldr	r7, [r3]
   1b250:	bl	123ec <getpid@plt>
   1b254:	ldr	r2, [pc, #132]	; 1b2e0 <__assert_fail@plt+0x8b94>
   1b258:	ldr	r3, [pc, #132]	; 1b2e4 <__assert_fail@plt+0x8b98>
   1b25c:	add	r2, pc, r2
   1b260:	str	r2, [sp, #4]
   1b264:	ldr	r2, [pc, #124]	; 1b2e8 <__assert_fail@plt+0x8b9c>
   1b268:	add	r3, pc, r3
   1b26c:	str	r3, [sp]
   1b270:	add	r2, pc, r2
   1b274:	mov	r1, #1
   1b278:	mov	r3, r0
   1b27c:	mov	r0, r7
   1b280:	bl	12578 <__fprintf_chk@plt>
   1b284:	ldr	r1, [pc, #96]	; 1b2ec <__assert_fail@plt+0x8ba0>
   1b288:	ldr	r2, [sp, #8]
   1b28c:	add	r1, pc, r1
   1b290:	mov	r0, r4
   1b294:	bl	16e4c <__assert_fail@plt+0x4700>
   1b298:	b	1b164 <__assert_fail@plt+0x8a18>
   1b29c:	mvn	r7, #37	; 0x25
   1b2a0:	b	1b198 <__assert_fail@plt+0x8a4c>
   1b2a4:	bl	12200 <__stack_chk_fail@plt>
   1b2a8:	andeq	r9, r1, r8, asr #25
   1b2ac:	andeq	r0, r0, ip, asr r2
   1b2b0:	andeq	r9, r0, r8, asr #4
   1b2b4:	muleq	r0, ip, fp
   1b2b8:	andeq	r0, r8, r2
   1b2bc:	strheq	sl, [r1], -r8
   1b2c0:	andeq	r4, r0, r0, lsl #25
   1b2c4:	andeq	sl, r1, r0, ror r0
   1b2c8:	muleq	r0, r0, r1
   1b2cc:	andeq	r0, r0, r0, ror #4
   1b2d0:	andeq	r8, r0, ip, lsl #19
   1b2d4:	andeq	r8, r0, r4, lsl #19
   1b2d8:	andeq	r8, r0, r8, ror #18
   1b2dc:	andeq	r9, r0, r0, asr #2
   1b2e0:	andeq	r8, r0, r4, lsr r9
   1b2e4:	andeq	r8, r0, ip, lsr #18
   1b2e8:	andeq	r8, r0, r0, lsl r9
   1b2ec:	ldrdeq	r9, [r0], -ip
   1b2f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2f4:	sub	sp, sp, #44	; 0x2c
   1b2f8:	ldr	r5, [pc, #988]	; 1b6dc <__assert_fail@plt+0x8f90>
   1b2fc:	ldr	r3, [pc, #988]	; 1b6e0 <__assert_fail@plt+0x8f94>
   1b300:	add	r5, pc, r5
   1b304:	ldr	r7, [pc, #984]	; 1b6e4 <__assert_fail@plt+0x8f98>
   1b308:	ldr	r6, [r5, r3]
   1b30c:	add	r7, pc, r7
   1b310:	mov	r4, r0
   1b314:	ldr	r2, [r7]
   1b318:	ldr	r3, [r6]
   1b31c:	tst	r2, #4
   1b320:	str	r3, [sp, #36]	; 0x24
   1b324:	bne	1b41c <__assert_fail@plt+0x8cd0>
   1b328:	ldr	r3, [r0, #140]	; 0x8c
   1b32c:	tst	r3, #256	; 0x100
   1b330:	beq	1b36c <__assert_fail@plt+0x8c20>
   1b334:	ldr	r0, [pc, #940]	; 1b6e8 <__assert_fail@plt+0x8f9c>
   1b338:	ldr	r1, [pc, #940]	; 1b6ec <__assert_fail@plt+0x8fa0>
   1b33c:	add	r0, pc, r0
   1b340:	bl	12320 <open64@plt>
   1b344:	subs	r8, r0, #0
   1b348:	bge	1b574 <__assert_fail@plt+0x8e28>
   1b34c:	ldr	r2, [pc, #924]	; 1b6f0 <__assert_fail@plt+0x8fa4>
   1b350:	ldrb	r3, [r4, #144]	; 0x90
   1b354:	add	r2, pc, r2
   1b358:	ldr	r2, [r2]
   1b35c:	bic	r3, r3, #8
   1b360:	tst	r2, #4
   1b364:	strb	r3, [r4, #144]	; 0x90
   1b368:	bne	1b4bc <__assert_fail@plt+0x8d70>
   1b36c:	mov	r1, #1
   1b370:	mov	r0, r4
   1b374:	bl	17bf8 <__assert_fail@plt+0x54ac>
   1b378:	subs	r7, r0, #0
   1b37c:	beq	1b39c <__assert_fail@plt+0x8c50>
   1b380:	ldr	r2, [sp, #36]	; 0x24
   1b384:	ldr	r3, [r6]
   1b388:	mov	r0, r7
   1b38c:	cmp	r2, r3
   1b390:	bne	1b680 <__assert_fail@plt+0x8f34>
   1b394:	add	sp, sp, #44	; 0x2c
   1b398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b39c:	mov	r0, r4
   1b3a0:	bl	18ac8 <__assert_fail@plt+0x637c>
   1b3a4:	mov	r7, r0
   1b3a8:	mov	r0, r4
   1b3ac:	bl	17d64 <__assert_fail@plt+0x5618>
   1b3b0:	ldr	r3, [pc, #828]	; 1b6f4 <__assert_fail@plt+0x8fa8>
   1b3b4:	add	r3, pc, r3
   1b3b8:	ldr	r3, [r3]
   1b3bc:	tst	r3, #4
   1b3c0:	beq	1b380 <__assert_fail@plt+0x8c34>
   1b3c4:	ldr	r3, [pc, #812]	; 1b6f8 <__assert_fail@plt+0x8fac>
   1b3c8:	ldr	r3, [r5, r3]
   1b3cc:	ldr	r5, [r3]
   1b3d0:	bl	123ec <getpid@plt>
   1b3d4:	ldr	r2, [pc, #800]	; 1b6fc <__assert_fail@plt+0x8fb0>
   1b3d8:	ldr	r3, [pc, #800]	; 1b700 <__assert_fail@plt+0x8fb4>
   1b3dc:	add	r2, pc, r2
   1b3e0:	str	r2, [sp, #4]
   1b3e4:	ldr	r2, [pc, #792]	; 1b704 <__assert_fail@plt+0x8fb8>
   1b3e8:	add	r3, pc, r3
   1b3ec:	str	r3, [sp]
   1b3f0:	add	r2, pc, r2
   1b3f4:	mov	r1, #1
   1b3f8:	mov	r3, r0
   1b3fc:	mov	r0, r5
   1b400:	bl	12578 <__fprintf_chk@plt>
   1b404:	ldr	r1, [pc, #764]	; 1b708 <__assert_fail@plt+0x8fbc>
   1b408:	mov	r2, r7
   1b40c:	mov	r0, r4
   1b410:	add	r1, pc, r1
   1b414:	bl	16e4c <__assert_fail@plt+0x4700>
   1b418:	b	1b380 <__assert_fail@plt+0x8c34>
   1b41c:	ldr	r3, [pc, #724]	; 1b6f8 <__assert_fail@plt+0x8fac>
   1b420:	ldr	fp, [pc, #740]	; 1b70c <__assert_fail@plt+0x8fc0>
   1b424:	ldr	sl, [pc, #740]	; 1b710 <__assert_fail@plt+0x8fc4>
   1b428:	ldr	r8, [r5, r3]
   1b42c:	ldr	r9, [pc, #736]	; 1b714 <__assert_fail@plt+0x8fc8>
   1b430:	add	fp, pc, fp
   1b434:	ldr	r3, [r8]
   1b438:	add	sl, pc, sl
   1b43c:	str	r3, [sp, #12]
   1b440:	bl	123ec <getpid@plt>
   1b444:	add	r9, pc, r9
   1b448:	mov	r2, r9
   1b44c:	mov	r1, #1
   1b450:	strd	sl, [sp]
   1b454:	mov	r3, r0
   1b458:	ldr	r0, [sp, #12]
   1b45c:	bl	12578 <__fprintf_chk@plt>
   1b460:	ldr	r1, [pc, #688]	; 1b718 <__assert_fail@plt+0x8fcc>
   1b464:	mov	r0, r4
   1b468:	add	r1, pc, r1
   1b46c:	bl	16e4c <__assert_fail@plt+0x4700>
   1b470:	ldr	r3, [r4, #140]	; 0x8c
   1b474:	tst	r3, #256	; 0x100
   1b478:	ldr	r3, [r7]
   1b47c:	beq	1b51c <__assert_fail@plt+0x8dd0>
   1b480:	tst	r3, #4
   1b484:	beq	1b334 <__assert_fail@plt+0x8be8>
   1b488:	ldr	r7, [r8]
   1b48c:	bl	123ec <getpid@plt>
   1b490:	strd	sl, [sp]
   1b494:	mov	r2, r9
   1b498:	mov	r1, #1
   1b49c:	mov	r3, r0
   1b4a0:	mov	r0, r7
   1b4a4:	bl	12578 <__fprintf_chk@plt>
   1b4a8:	ldr	r1, [pc, #620]	; 1b71c <__assert_fail@plt+0x8fd0>
   1b4ac:	mov	r0, r4
   1b4b0:	add	r1, pc, r1
   1b4b4:	bl	16e4c <__assert_fail@plt+0x4700>
   1b4b8:	b	1b334 <__assert_fail@plt+0x8be8>
   1b4bc:	ldr	r3, [pc, #564]	; 1b6f8 <__assert_fail@plt+0x8fac>
   1b4c0:	ldr	r8, [r5, r3]
   1b4c4:	ldr	r7, [r8]
   1b4c8:	bl	123ec <getpid@plt>
   1b4cc:	ldr	r2, [pc, #588]	; 1b720 <__assert_fail@plt+0x8fd4>
   1b4d0:	ldr	r3, [pc, #588]	; 1b724 <__assert_fail@plt+0x8fd8>
   1b4d4:	add	r2, pc, r2
   1b4d8:	str	r2, [sp, #4]
   1b4dc:	ldr	r2, [pc, #580]	; 1b728 <__assert_fail@plt+0x8fdc>
   1b4e0:	add	r3, pc, r3
   1b4e4:	str	r3, [sp]
   1b4e8:	add	r2, pc, r2
   1b4ec:	mov	r1, #1
   1b4f0:	mov	r3, r0
   1b4f4:	mov	r0, r7
   1b4f8:	bl	12578 <__fprintf_chk@plt>
   1b4fc:	ldr	r1, [pc, #552]	; 1b72c <__assert_fail@plt+0x8fe0>
   1b500:	mvn	r2, #0
   1b504:	add	r1, pc, r1
   1b508:	mov	r0, r4
   1b50c:	bl	16e4c <__assert_fail@plt+0x4700>
   1b510:	ldr	r3, [pc, #536]	; 1b730 <__assert_fail@plt+0x8fe4>
   1b514:	add	r3, pc, r3
   1b518:	ldr	r3, [r3]
   1b51c:	and	r3, r3, #4
   1b520:	cmp	r3, #0
   1b524:	beq	1b36c <__assert_fail@plt+0x8c20>
   1b528:	ldr	r7, [r8]
   1b52c:	bl	123ec <getpid@plt>
   1b530:	ldr	r2, [pc, #508]	; 1b734 <__assert_fail@plt+0x8fe8>
   1b534:	ldr	r3, [pc, #508]	; 1b738 <__assert_fail@plt+0x8fec>
   1b538:	add	r2, pc, r2
   1b53c:	str	r2, [sp, #4]
   1b540:	ldr	r2, [pc, #500]	; 1b73c <__assert_fail@plt+0x8ff0>
   1b544:	add	r3, pc, r3
   1b548:	str	r3, [sp]
   1b54c:	add	r2, pc, r2
   1b550:	mov	r1, #1
   1b554:	mov	r3, r0
   1b558:	mov	r0, r7
   1b55c:	bl	12578 <__fprintf_chk@plt>
   1b560:	ldr	r1, [pc, #472]	; 1b740 <__assert_fail@plt+0x8ff4>
   1b564:	mov	r0, r4
   1b568:	add	r1, pc, r1
   1b56c:	bl	16e4c <__assert_fail@plt+0x4700>
   1b570:	b	1b36c <__assert_fail@plt+0x8c20>
   1b574:	ldr	r1, [pc, #456]	; 1b744 <__assert_fail@plt+0x8ff8>
   1b578:	bl	122a8 <ioctl@plt>
   1b57c:	subs	r7, r0, #0
   1b580:	bge	1b5b8 <__assert_fail@plt+0x8e6c>
   1b584:	ldrb	r3, [r4, #144]	; 0x90
   1b588:	mov	r0, r8
   1b58c:	bic	r3, r3, #8
   1b590:	strb	r3, [r4, #144]	; 0x90
   1b594:	bl	12704 <close@plt>
   1b598:	ldr	r3, [pc, #424]	; 1b748 <__assert_fail@plt+0x8ffc>
   1b59c:	add	r3, pc, r3
   1b5a0:	ldr	r3, [r3]
   1b5a4:	tst	r3, #4
   1b5a8:	bne	1b684 <__assert_fail@plt+0x8f38>
   1b5ac:	cmp	r7, #0
   1b5b0:	bge	1b380 <__assert_fail@plt+0x8c34>
   1b5b4:	b	1b36c <__assert_fail@plt+0x8c20>
   1b5b8:	ldr	r2, [pc, #396]	; 1b74c <__assert_fail@plt+0x9000>
   1b5bc:	mov	r3, #16
   1b5c0:	add	r2, pc, r2
   1b5c4:	mov	r1, r3
   1b5c8:	stm	sp, {r2, r7}
   1b5cc:	add	r7, sp, #20
   1b5d0:	mov	r2, #1
   1b5d4:	mov	r0, r7
   1b5d8:	bl	12728 <__snprintf_chk@plt>
   1b5dc:	mov	r1, r7
   1b5e0:	mov	r0, r4
   1b5e4:	bl	18400 <__assert_fail@plt+0x5cb4>
   1b5e8:	ldrb	r3, [r4, #144]	; 0x90
   1b5ec:	bic	r3, r3, #8
   1b5f0:	clz	r2, r0
   1b5f4:	lsr	r2, r2, #5
   1b5f8:	mov	r7, r0
   1b5fc:	orr	r3, r3, r2, lsl #3
   1b600:	strb	r3, [r4, #144]	; 0x90
   1b604:	mov	r0, r8
   1b608:	bl	12704 <close@plt>
   1b60c:	ldr	r3, [pc, #316]	; 1b750 <__assert_fail@plt+0x9004>
   1b610:	add	r3, pc, r3
   1b614:	ldr	r3, [r3]
   1b618:	tst	r3, #4
   1b61c:	beq	1b5ac <__assert_fail@plt+0x8e60>
   1b620:	ldr	r3, [pc, #208]	; 1b6f8 <__assert_fail@plt+0x8fac>
   1b624:	ldr	r8, [r5, r3]
   1b628:	ldr	r9, [r8]
   1b62c:	bl	123ec <getpid@plt>
   1b630:	ldr	r2, [pc, #284]	; 1b754 <__assert_fail@plt+0x9008>
   1b634:	ldr	r3, [pc, #284]	; 1b758 <__assert_fail@plt+0x900c>
   1b638:	add	r2, pc, r2
   1b63c:	str	r2, [sp, #4]
   1b640:	ldr	r2, [pc, #276]	; 1b75c <__assert_fail@plt+0x9010>
   1b644:	add	r3, pc, r3
   1b648:	str	r3, [sp]
   1b64c:	add	r2, pc, r2
   1b650:	mov	r1, #1
   1b654:	mov	r3, r0
   1b658:	mov	r0, r9
   1b65c:	bl	12578 <__fprintf_chk@plt>
   1b660:	ldr	r1, [pc, #248]	; 1b760 <__assert_fail@plt+0x9014>
   1b664:	mov	r2, r7
   1b668:	add	r1, pc, r1
   1b66c:	mov	r0, r4
   1b670:	bl	16e4c <__assert_fail@plt+0x4700>
   1b674:	cmp	r7, #0
   1b678:	bge	1b380 <__assert_fail@plt+0x8c34>
   1b67c:	b	1b510 <__assert_fail@plt+0x8dc4>
   1b680:	bl	12200 <__stack_chk_fail@plt>
   1b684:	ldr	r3, [pc, #108]	; 1b6f8 <__assert_fail@plt+0x8fac>
   1b688:	ldr	r8, [r5, r3]
   1b68c:	ldr	r9, [r8]
   1b690:	bl	123ec <getpid@plt>
   1b694:	ldr	r2, [pc, #200]	; 1b764 <__assert_fail@plt+0x9018>
   1b698:	ldr	r3, [pc, #200]	; 1b768 <__assert_fail@plt+0x901c>
   1b69c:	add	r2, pc, r2
   1b6a0:	str	r2, [sp, #4]
   1b6a4:	ldr	r2, [pc, #192]	; 1b76c <__assert_fail@plt+0x9020>
   1b6a8:	add	r3, pc, r3
   1b6ac:	str	r3, [sp]
   1b6b0:	add	r2, pc, r2
   1b6b4:	mov	r1, #1
   1b6b8:	mov	r3, r0
   1b6bc:	mov	r0, r9
   1b6c0:	bl	12578 <__fprintf_chk@plt>
   1b6c4:	ldr	r1, [pc, #164]	; 1b770 <__assert_fail@plt+0x9024>
   1b6c8:	mov	r2, r7
   1b6cc:	add	r1, pc, r1
   1b6d0:	mov	r0, r4
   1b6d4:	bl	16e4c <__assert_fail@plt+0x4700>
   1b6d8:	b	1b510 <__assert_fail@plt+0x8dc4>
   1b6dc:	andeq	r9, r1, ip, lsl #21
   1b6e0:	andeq	r0, r0, ip, asr r2
   1b6e4:	andeq	r9, r1, r0, lsl #30
   1b6e8:	muleq	r0, r8, r9
   1b6ec:	andeq	r0, r8, r2
   1b6f0:			; <UNDEFINED> instruction: 0x00019eb8
   1b6f4:	andeq	r9, r1, r8, asr lr
   1b6f8:	andeq	r0, r0, r0, ror #4
   1b6fc:			; <UNDEFINED> instruction: 0x000087b4
   1b700:	andeq	r8, r0, ip, lsr #15
   1b704:	muleq	r0, r0, r7
   1b708:	andeq	r8, r0, r0, ror #31
   1b70c:	andeq	r8, r0, r0, ror #14
   1b710:	andeq	r8, r0, ip, asr r7
   1b714:	andeq	r8, r0, ip, lsr r7
   1b718:	andeq	r8, r0, r8, lsr #30
   1b71c:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1b720:			; <UNDEFINED> instruction: 0x000086bc
   1b724:			; <UNDEFINED> instruction: 0x000086b4
   1b728:	muleq	r0, r8, r6
   1b72c:			; <UNDEFINED> instruction: 0x00008eb8
   1b730:	strdeq	r9, [r1], -r8
   1b734:	andeq	r8, r0, r8, asr r6
   1b738:	andeq	r8, r0, r0, asr r6
   1b73c:	andeq	r8, r0, r4, lsr r6
   1b740:	andeq	r8, r0, r8, ror lr
   1b744:	andeq	r4, r0, r2, lsl #25
   1b748:	andeq	r9, r1, r0, ror ip
   1b74c:	strdeq	r8, [r0], -r4
   1b750:	strdeq	r9, [r1], -ip
   1b754:	andeq	r8, r0, r8, asr r5
   1b758:	andeq	r8, r0, r0, asr r5
   1b75c:	andeq	r8, r0, r4, lsr r5
   1b760:	andeq	r8, r0, r4, asr sp
   1b764:	strdeq	r8, [r0], -r4
   1b768:	andeq	r8, r0, ip, ror #9
   1b76c:	ldrdeq	r8, [r0], -r0
   1b770:	strdeq	r8, [r0], -r0
   1b774:	ldr	r3, [pc, #136]	; 1b804 <__assert_fail@plt+0x90b8>
   1b778:	ldr	r2, [pc, #136]	; 1b808 <__assert_fail@plt+0x90bc>
   1b77c:	add	r3, pc, r3
   1b780:	push	{r4, r5, r6, r7, lr}
   1b784:	sub	sp, sp, #436	; 0x1b4
   1b788:	ldr	r4, [r3, r2]
   1b78c:	subs	r7, r0, #0
   1b790:	moveq	r6, r7
   1b794:	ldr	r3, [r4]
   1b798:	str	r3, [sp, #428]	; 0x1ac
   1b79c:	beq	1b7c0 <__assert_fail@plt+0x9074>
   1b7a0:	mov	r5, sp
   1b7a4:	mov	r0, r5
   1b7a8:	mov	r1, #0
   1b7ac:	bl	17624 <__assert_fail@plt+0x4ed8>
   1b7b0:	subs	r6, r0, #0
   1b7b4:	beq	1b7dc <__assert_fail@plt+0x9090>
   1b7b8:	mov	r0, r5
   1b7bc:	bl	17e50 <__assert_fail@plt+0x5704>
   1b7c0:	ldr	r2, [sp, #428]	; 0x1ac
   1b7c4:	ldr	r3, [r4]
   1b7c8:	mov	r0, r6
   1b7cc:	cmp	r2, r3
   1b7d0:	bne	1b800 <__assert_fail@plt+0x90b4>
   1b7d4:	add	sp, sp, #436	; 0x1b4
   1b7d8:	pop	{r4, r5, r6, r7, pc}
   1b7dc:	mov	r1, r7
   1b7e0:	mov	r0, r5
   1b7e4:	bl	173f8 <__assert_fail@plt+0x4cac>
   1b7e8:	subs	r6, r0, #0
   1b7ec:	bne	1b7b8 <__assert_fail@plt+0x906c>
   1b7f0:	mov	r0, r5
   1b7f4:	bl	19550 <__assert_fail@plt+0x6e04>
   1b7f8:	mov	r6, r0
   1b7fc:	b	1b7b8 <__assert_fail@plt+0x906c>
   1b800:	bl	12200 <__stack_chk_fail@plt>
   1b804:	andeq	r9, r1, r0, lsl r6
   1b808:	andeq	r0, r0, ip, asr r2
   1b80c:	ldr	r3, [pc, #140]	; 1b8a0 <__assert_fail@plt+0x9154>
   1b810:	ldr	r2, [pc, #140]	; 1b8a4 <__assert_fail@plt+0x9158>
   1b814:	add	r3, pc, r3
   1b818:	push	{r4, r5, r6, r7, lr}
   1b81c:	sub	sp, sp, #436	; 0x1b4
   1b820:	ldr	r6, [r3, r2]
   1b824:	subs	r7, r0, #0
   1b828:	ldr	r3, [r6]
   1b82c:	str	r3, [sp, #428]	; 0x1ac
   1b830:	beq	1b884 <__assert_fail@plt+0x9138>
   1b834:	mov	r5, sp
   1b838:	mov	r0, r5
   1b83c:	mov	r1, #0
   1b840:	bl	17624 <__assert_fail@plt+0x4ed8>
   1b844:	subs	r4, r0, #0
   1b848:	bne	1b884 <__assert_fail@plt+0x9138>
   1b84c:	mov	r1, r7
   1b850:	mov	r0, r5
   1b854:	bl	173f8 <__assert_fail@plt+0x4cac>
   1b858:	cmp	r0, #0
   1b85c:	beq	1b88c <__assert_fail@plt+0x9140>
   1b860:	mov	r0, r5
   1b864:	bl	17e50 <__assert_fail@plt+0x5704>
   1b868:	ldr	r2, [sp, #428]	; 0x1ac
   1b86c:	ldr	r3, [r6]
   1b870:	mov	r0, r4
   1b874:	cmp	r2, r3
   1b878:	bne	1b89c <__assert_fail@plt+0x9150>
   1b87c:	add	sp, sp, #436	; 0x1b4
   1b880:	pop	{r4, r5, r6, r7, pc}
   1b884:	mov	r4, #0
   1b888:	b	1b868 <__assert_fail@plt+0x911c>
   1b88c:	mov	r0, r5
   1b890:	bl	1818c <__assert_fail@plt+0x5a40>
   1b894:	mov	r4, r0
   1b898:	b	1b860 <__assert_fail@plt+0x9114>
   1b89c:	bl	12200 <__stack_chk_fail@plt>
   1b8a0:	andeq	r9, r1, r8, ror r5
   1b8a4:	andeq	r0, r0, ip, asr r2
   1b8a8:	ldr	ip, [pc, #232]	; 1b998 <__assert_fail@plt+0x924c>
   1b8ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b8b0:	add	ip, pc, ip
   1b8b4:	ldr	lr, [pc, #224]	; 1b99c <__assert_fail@plt+0x9250>
   1b8b8:	cmp	r0, #0
   1b8bc:	sub	sp, sp, #560	; 0x230
   1b8c0:	ldr	r6, [ip, lr]
   1b8c4:	mov	r4, r2
   1b8c8:	mov	r5, r3
   1b8cc:	mov	r2, ip
   1b8d0:	clz	r3, r1
   1b8d4:	lsr	r3, r3, #5
   1b8d8:	ldr	r2, [r6]
   1b8dc:	moveq	r3, #1
   1b8e0:	cmp	r3, #0
   1b8e4:	str	r2, [sp, #556]	; 0x22c
   1b8e8:	movne	r7, #0
   1b8ec:	beq	1b90c <__assert_fail@plt+0x91c0>
   1b8f0:	ldr	r2, [sp, #556]	; 0x22c
   1b8f4:	ldr	r3, [r6]
   1b8f8:	mov	r0, r7
   1b8fc:	cmp	r2, r3
   1b900:	bne	1b994 <__assert_fail@plt+0x9248>
   1b904:	add	sp, sp, #560	; 0x230
   1b908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b90c:	add	r8, sp, #128	; 0x80
   1b910:	mov	sl, r0
   1b914:	mov	r9, r1
   1b918:	mov	r0, r8
   1b91c:	mov	r1, r3
   1b920:	bl	17624 <__assert_fail@plt+0x4ed8>
   1b924:	subs	r7, r0, #0
   1b928:	bne	1b8f0 <__assert_fail@plt+0x91a4>
   1b92c:	mov	r1, sl
   1b930:	mov	r0, r8
   1b934:	bl	173f8 <__assert_fail@plt+0x4cac>
   1b938:	subs	r7, r0, #0
   1b93c:	bne	1b8f0 <__assert_fail@plt+0x91a4>
   1b940:	add	r7, sp, #24
   1b944:	mov	r1, r9
   1b948:	mov	r2, r7
   1b94c:	mov	r0, #3
   1b950:	bl	126c8 <__xstat64@plt>
   1b954:	ldr	r3, [sp, #600]	; 0x258
   1b958:	str	r3, [sp, #16]
   1b95c:	add	r3, sp, #592	; 0x250
   1b960:	ldrd	r2, [r3]
   1b964:	strd	r4, [sp]
   1b968:	strd	r2, [sp, #8]
   1b96c:	mov	r2, r9
   1b970:	cmp	r0, #0
   1b974:	moveq	r1, r7
   1b978:	movne	r1, #0
   1b97c:	mov	r0, r8
   1b980:	bl	19730 <__assert_fail@plt+0x6fe4>
   1b984:	mov	r7, r0
   1b988:	mov	r0, r8
   1b98c:	bl	17e50 <__assert_fail@plt+0x5704>
   1b990:	b	1b8f0 <__assert_fail@plt+0x91a4>
   1b994:	bl	12200 <__stack_chk_fail@plt>
   1b998:	ldrdeq	r9, [r1], -ip
   1b99c:	andeq	r0, r0, ip, asr r2
   1b9a0:	ldr	r3, [pc, #140]	; 1ba34 <__assert_fail@plt+0x92e8>
   1b9a4:	ldr	r2, [pc, #140]	; 1ba38 <__assert_fail@plt+0x92ec>
   1b9a8:	add	r3, pc, r3
   1b9ac:	push	{r4, r5, r6, r7, lr}
   1b9b0:	sub	sp, sp, #436	; 0x1b4
   1b9b4:	ldr	r5, [r3, r2]
   1b9b8:	subs	r7, r0, #0
   1b9bc:	ldr	r3, [r5]
   1b9c0:	str	r3, [sp, #428]	; 0x1ac
   1b9c4:	beq	1ba28 <__assert_fail@plt+0x92dc>
   1b9c8:	mov	r4, sp
   1b9cc:	mov	r0, r4
   1b9d0:	mov	r1, #0
   1b9d4:	bl	17624 <__assert_fail@plt+0x4ed8>
   1b9d8:	subs	r6, r0, #0
   1b9dc:	beq	1ba04 <__assert_fail@plt+0x92b8>
   1b9e0:	mov	r0, r4
   1b9e4:	bl	17e50 <__assert_fail@plt+0x5704>
   1b9e8:	ldr	r2, [sp, #428]	; 0x1ac
   1b9ec:	ldr	r3, [r5]
   1b9f0:	mov	r0, r6
   1b9f4:	cmp	r2, r3
   1b9f8:	bne	1ba30 <__assert_fail@plt+0x92e4>
   1b9fc:	add	sp, sp, #436	; 0x1b4
   1ba00:	pop	{r4, r5, r6, r7, pc}
   1ba04:	mov	r1, r7
   1ba08:	mov	r0, r4
   1ba0c:	bl	173f8 <__assert_fail@plt+0x4cac>
   1ba10:	subs	r6, r0, #0
   1ba14:	bne	1b9e0 <__assert_fail@plt+0x9294>
   1ba18:	mov	r0, r4
   1ba1c:	bl	1af50 <__assert_fail@plt+0x8804>
   1ba20:	mov	r6, r0
   1ba24:	b	1b9e0 <__assert_fail@plt+0x9294>
   1ba28:	mvn	r6, #21
   1ba2c:	b	1b9e8 <__assert_fail@plt+0x929c>
   1ba30:	bl	12200 <__stack_chk_fail@plt>
   1ba34:	andeq	r9, r1, r4, ror #7
   1ba38:	andeq	r0, r0, ip, asr r2
   1ba3c:	ldr	ip, [pc, #216]	; 1bb1c <__assert_fail@plt+0x93d0>
   1ba40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba44:	add	ip, pc, ip
   1ba48:	ldr	lr, [pc, #208]	; 1bb20 <__assert_fail@plt+0x93d4>
   1ba4c:	mov	r4, r0
   1ba50:	mov	r0, ip
   1ba54:	ldr	ip, [ip, lr]
   1ba58:	sub	sp, sp, #148	; 0x94
   1ba5c:	mov	r9, r3
   1ba60:	ldr	r3, [ip]
   1ba64:	subs	r7, r1, #0
   1ba68:	str	ip, [sp, #28]
   1ba6c:	ldr	sl, [sp, #192]	; 0xc0
   1ba70:	str	r3, [sp, #140]	; 0x8c
   1ba74:	beq	1bb10 <__assert_fail@plt+0x93c4>
   1ba78:	add	r5, sp, #32
   1ba7c:	mov	r8, r2
   1ba80:	mov	r0, #3
   1ba84:	mov	r2, r5
   1ba88:	bl	126c8 <__xstat64@plt>
   1ba8c:	mov	r1, #2
   1ba90:	mov	fp, r0
   1ba94:	mov	r0, r4
   1ba98:	bl	17bf8 <__assert_fail@plt+0x54ac>
   1ba9c:	subs	r6, r0, #0
   1baa0:	bne	1baf0 <__assert_fail@plt+0x93a4>
   1baa4:	cmp	fp, #0
   1baa8:	movne	r5, #0
   1baac:	b	1bad8 <__assert_fail@plt+0x938c>
   1bab0:	ldrd	r2, [sp, #184]	; 0xb8
   1bab4:	str	sl, [sp, #16]
   1bab8:	strd	r8, [sp]
   1babc:	strd	r2, [sp, #8]
   1bac0:	mov	r1, r5
   1bac4:	mov	r2, r7
   1bac8:	mov	r0, r4
   1bacc:	bl	19730 <__assert_fail@plt+0x6fe4>
   1bad0:	cmp	r0, #0
   1bad4:	bne	1bae8 <__assert_fail@plt+0x939c>
   1bad8:	mov	r0, r4
   1badc:	bl	18ac8 <__assert_fail@plt+0x637c>
   1bae0:	subs	r6, r0, #0
   1bae4:	beq	1bab0 <__assert_fail@plt+0x9364>
   1bae8:	mov	r0, r4
   1baec:	bl	17d64 <__assert_fail@plt+0x5618>
   1baf0:	ldr	r3, [sp, #28]
   1baf4:	ldr	r2, [sp, #140]	; 0x8c
   1baf8:	mov	r0, r6
   1bafc:	ldr	r3, [r3]
   1bb00:	cmp	r2, r3
   1bb04:	bne	1bb18 <__assert_fail@plt+0x93cc>
   1bb08:	add	sp, sp, #148	; 0x94
   1bb0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb10:	mvn	r6, #21
   1bb14:	b	1baf0 <__assert_fail@plt+0x93a4>
   1bb18:	bl	12200 <__stack_chk_fail@plt>
   1bb1c:	andeq	r9, r1, r8, asr #6
   1bb20:	andeq	r0, r0, ip, asr r2
   1bb24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb28:	subs	r7, r1, #0
   1bb2c:	ldr	r8, [pc, #1236]	; 1c008 <__assert_fail@plt+0x98bc>
   1bb30:	ldr	ip, [pc, #1236]	; 1c00c <__assert_fail@plt+0x98c0>
   1bb34:	add	r8, pc, r8
   1bb38:	sub	sp, sp, #188	; 0xbc
   1bb3c:	ldr	r1, [r8, ip]
   1bb40:	mov	fp, r3
   1bb44:	str	r1, [sp, #36]	; 0x24
   1bb48:	ldr	r3, [r1]
   1bb4c:	str	r3, [sp, #180]	; 0xb4
   1bb50:	beq	1bffc <__assert_fail@plt+0x98b0>
   1bb54:	ldr	r3, [pc, #1204]	; 1c010 <__assert_fail@plt+0x98c4>
   1bb58:	mov	r4, r0
   1bb5c:	add	r3, pc, r3
   1bb60:	mov	sl, r2
   1bb64:	ldr	r3, [r3]
   1bb68:	tst	r3, #4
   1bb6c:	bne	1be44 <__assert_fail@plt+0x96f8>
   1bb70:	add	r6, sp, #72	; 0x48
   1bb74:	mov	r2, r6
   1bb78:	mov	r1, r7
   1bb7c:	mov	r0, #3
   1bb80:	bl	126c8 <__xstat64@plt>
   1bb84:	mov	r1, #2
   1bb88:	mov	r5, r0
   1bb8c:	mov	r0, r4
   1bb90:	bl	17bf8 <__assert_fail@plt+0x54ac>
   1bb94:	subs	r9, r0, #0
   1bb98:	bne	1bce0 <__assert_fail@plt+0x9594>
   1bb9c:	ldr	r3, [sp, #224]	; 0xe0
   1bba0:	cmp	r5, #0
   1bba4:	movne	r6, #0
   1bba8:	adds	r3, sl, r3
   1bbac:	str	r3, [sp, #24]
   1bbb0:	ldr	r3, [sp, #228]	; 0xe4
   1bbb4:	adc	r3, fp, r3
   1bbb8:	str	r3, [sp, #28]
   1bbbc:	ldr	r3, [pc, #1104]	; 1c014 <__assert_fail@plt+0x98c8>
   1bbc0:	add	r3, pc, r3
   1bbc4:	str	r3, [sp, #48]	; 0x30
   1bbc8:	ldr	r3, [pc, #1096]	; 1c018 <__assert_fail@plt+0x98cc>
   1bbcc:	add	r3, pc, r3
   1bbd0:	str	r3, [sp, #52]	; 0x34
   1bbd4:	mov	r0, r4
   1bbd8:	bl	18ac8 <__assert_fail@plt+0x637c>
   1bbdc:	cmp	r0, #0
   1bbe0:	bne	1befc <__assert_fail@plt+0x97b0>
   1bbe4:	ldrd	r2, [sp, #224]	; 0xe0
   1bbe8:	str	r0, [sp, #16]
   1bbec:	strd	sl, [sp]
   1bbf0:	strd	r2, [sp, #8]
   1bbf4:	mov	r1, r6
   1bbf8:	mov	r2, r7
   1bbfc:	mov	r0, r4
   1bc00:	bl	19730 <__assert_fail@plt+0x6fe4>
   1bc04:	cmp	r0, #0
   1bc08:	beq	1bbd4 <__assert_fail@plt+0x9488>
   1bc0c:	blt	1befc <__assert_fail@plt+0x97b0>
   1bc10:	ldr	r3, [sp, #48]	; 0x30
   1bc14:	ldr	r3, [r3]
   1bc18:	tst	r3, #4
   1bc1c:	bne	1bd58 <__assert_fail@plt+0x960c>
   1bc20:	add	r1, sp, #64	; 0x40
   1bc24:	mov	r0, r4
   1bc28:	bl	182c4 <__assert_fail@plt+0x5b78>
   1bc2c:	cmp	r0, #0
   1bc30:	bne	1bf0c <__assert_fail@plt+0x97c0>
   1bc34:	add	r1, sp, #56	; 0x38
   1bc38:	mov	r0, r4
   1bc3c:	bl	18f84 <__assert_fail@plt+0x6838>
   1bc40:	cmp	r0, #0
   1bc44:	bne	1bf84 <__assert_fail@plt+0x9838>
   1bc48:	ldrd	r0, [sp, #56]	; 0x38
   1bc4c:	ldrd	r2, [sp, #224]	; 0xe0
   1bc50:	cmp	r1, r3
   1bc54:	cmpeq	r0, r2
   1bc58:	beq	1bdb8 <__assert_fail@plt+0x966c>
   1bc5c:	orrs	r3, r0, r1
   1bc60:	beq	1bc8c <__assert_fail@plt+0x9540>
   1bc64:	ldr	r3, [sp, #64]	; 0x40
   1bc68:	ldr	r2, [sp, #68]	; 0x44
   1bc6c:	adds	r3, r0, r3
   1bc70:	str	r3, [sp, #40]	; 0x28
   1bc74:	adc	r3, r1, r2
   1bc78:	str	r3, [sp, #44]	; 0x2c
   1bc7c:	ldrd	r2, [sp, #40]	; 0x28
   1bc80:	cmp	r3, fp
   1bc84:	cmpeq	r2, sl
   1bc88:	bls	1bbd4 <__assert_fail@plt+0x9488>
   1bc8c:	ldrd	r2, [sp, #224]	; 0xe0
   1bc90:	orrs	r3, r2, r3
   1bc94:	beq	1bcac <__assert_fail@plt+0x9560>
   1bc98:	ldrd	r2, [sp, #64]	; 0x40
   1bc9c:	ldrd	r0, [sp, #24]
   1bca0:	cmp	r1, r3
   1bca4:	cmpeq	r0, r2
   1bca8:	bls	1bbd4 <__assert_fail@plt+0x9488>
   1bcac:	ldr	r3, [pc, #872]	; 1c01c <__assert_fail@plt+0x98d0>
   1bcb0:	add	r3, pc, r3
   1bcb4:	ldr	r3, [r3]
   1bcb8:	tst	r3, #4
   1bcbc:	moveq	r9, #1
   1bcc0:	bne	1be98 <__assert_fail@plt+0x974c>
   1bcc4:	mov	r0, r4
   1bcc8:	bl	17d64 <__assert_fail@plt+0x5618>
   1bccc:	ldr	r3, [pc, #844]	; 1c020 <__assert_fail@plt+0x98d4>
   1bcd0:	add	r3, pc, r3
   1bcd4:	ldr	r3, [r3]
   1bcd8:	tst	r3, #4
   1bcdc:	bne	1bd00 <__assert_fail@plt+0x95b4>
   1bce0:	ldr	r3, [sp, #36]	; 0x24
   1bce4:	ldr	r2, [sp, #180]	; 0xb4
   1bce8:	mov	r0, r9
   1bcec:	ldr	r3, [r3]
   1bcf0:	cmp	r2, r3
   1bcf4:	bne	1c004 <__assert_fail@plt+0x98b8>
   1bcf8:	add	sp, sp, #188	; 0xbc
   1bcfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd00:	ldr	r3, [pc, #796]	; 1c024 <__assert_fail@plt+0x98d8>
   1bd04:	ldr	r3, [r8, r3]
   1bd08:	ldr	r5, [r3]
   1bd0c:	bl	123ec <getpid@plt>
   1bd10:	ldr	r2, [pc, #784]	; 1c028 <__assert_fail@plt+0x98dc>
   1bd14:	ldr	r3, [pc, #784]	; 1c02c <__assert_fail@plt+0x98e0>
   1bd18:	add	r2, pc, r2
   1bd1c:	str	r2, [sp, #4]
   1bd20:	ldr	r2, [pc, #776]	; 1c030 <__assert_fail@plt+0x98e4>
   1bd24:	add	r3, pc, r3
   1bd28:	str	r3, [sp]
   1bd2c:	add	r2, pc, r2
   1bd30:	mov	r1, #1
   1bd34:	mov	r3, r0
   1bd38:	mov	r0, r5
   1bd3c:	bl	12578 <__fprintf_chk@plt>
   1bd40:	ldr	r1, [pc, #748]	; 1c034 <__assert_fail@plt+0x98e8>
   1bd44:	mov	r2, r9
   1bd48:	mov	r0, r4
   1bd4c:	add	r1, pc, r1
   1bd50:	bl	16e4c <__assert_fail@plt+0x4700>
   1bd54:	b	1bce0 <__assert_fail@plt+0x9594>
   1bd58:	ldr	r3, [pc, #708]	; 1c024 <__assert_fail@plt+0x98d8>
   1bd5c:	ldr	r3, [r8, r3]
   1bd60:	ldr	r5, [r3]
   1bd64:	bl	123ec <getpid@plt>
   1bd68:	ldr	r2, [pc, #712]	; 1c038 <__assert_fail@plt+0x98ec>
   1bd6c:	ldr	r3, [pc, #712]	; 1c03c <__assert_fail@plt+0x98f0>
   1bd70:	add	r2, pc, r2
   1bd74:	add	r3, pc, r3
   1bd78:	str	r2, [sp, #4]
   1bd7c:	str	r3, [sp]
   1bd80:	ldr	r2, [sp, #52]	; 0x34
   1bd84:	mov	r1, #1
   1bd88:	mov	r3, r0
   1bd8c:	mov	r0, r5
   1bd90:	bl	12578 <__fprintf_chk@plt>
   1bd94:	mov	r0, r4
   1bd98:	bl	17aa8 <__assert_fail@plt+0x535c>
   1bd9c:	ldr	r1, [pc, #668]	; 1c040 <__assert_fail@plt+0x98f4>
   1bda0:	mov	r3, r7
   1bda4:	add	r1, pc, r1
   1bda8:	mov	r2, r0
   1bdac:	mov	r0, r4
   1bdb0:	bl	16e4c <__assert_fail@plt+0x4700>
   1bdb4:	b	1bc20 <__assert_fail@plt+0x94d4>
   1bdb8:	ldrd	r2, [sp, #64]	; 0x40
   1bdbc:	cmp	r3, fp
   1bdc0:	cmpeq	r2, sl
   1bdc4:	bne	1bc5c <__assert_fail@plt+0x9510>
   1bdc8:	ldr	r3, [pc, #628]	; 1c044 <__assert_fail@plt+0x98f8>
   1bdcc:	add	r3, pc, r3
   1bdd0:	ldr	r3, [r3]
   1bdd4:	tst	r3, #4
   1bdd8:	moveq	r9, #2
   1bddc:	beq	1bcc4 <__assert_fail@plt+0x9578>
   1bde0:	ldr	r3, [pc, #572]	; 1c024 <__assert_fail@plt+0x98d8>
   1bde4:	mov	r9, #2
   1bde8:	ldr	r3, [r8, r3]
   1bdec:	ldr	r5, [r3]
   1bdf0:	bl	123ec <getpid@plt>
   1bdf4:	ldr	r2, [pc, #588]	; 1c048 <__assert_fail@plt+0x98fc>
   1bdf8:	ldr	r3, [pc, #588]	; 1c04c <__assert_fail@plt+0x9900>
   1bdfc:	add	r2, pc, r2
   1be00:	str	r2, [sp, #4]
   1be04:	ldr	r2, [pc, #580]	; 1c050 <__assert_fail@plt+0x9904>
   1be08:	add	r3, pc, r3
   1be0c:	str	r3, [sp]
   1be10:	add	r2, pc, r2
   1be14:	mov	r1, #1
   1be18:	mov	r3, r0
   1be1c:	mov	r0, r5
   1be20:	bl	12578 <__fprintf_chk@plt>
   1be24:	mov	r0, r4
   1be28:	bl	17aa8 <__assert_fail@plt+0x535c>
   1be2c:	ldr	r1, [pc, #544]	; 1c054 <__assert_fail@plt+0x9908>
   1be30:	add	r1, pc, r1
   1be34:	mov	r2, r0
   1be38:	mov	r0, r4
   1be3c:	bl	16e4c <__assert_fail@plt+0x4700>
   1be40:	b	1bcc4 <__assert_fail@plt+0x9578>
   1be44:	ldr	r3, [pc, #472]	; 1c024 <__assert_fail@plt+0x98d8>
   1be48:	ldr	r3, [r8, r3]
   1be4c:	ldr	r5, [r3]
   1be50:	bl	123ec <getpid@plt>
   1be54:	ldr	r2, [pc, #508]	; 1c058 <__assert_fail@plt+0x990c>
   1be58:	ldr	r3, [pc, #508]	; 1c05c <__assert_fail@plt+0x9910>
   1be5c:	add	r2, pc, r2
   1be60:	str	r2, [sp, #4]
   1be64:	ldr	r2, [pc, #500]	; 1c060 <__assert_fail@plt+0x9914>
   1be68:	add	r3, pc, r3
   1be6c:	str	r3, [sp]
   1be70:	add	r2, pc, r2
   1be74:	mov	r1, #1
   1be78:	mov	r3, r0
   1be7c:	mov	r0, r5
   1be80:	bl	12578 <__fprintf_chk@plt>
   1be84:	ldr	r1, [pc, #472]	; 1c064 <__assert_fail@plt+0x9918>
   1be88:	mov	r0, r4
   1be8c:	add	r1, pc, r1
   1be90:	bl	16e4c <__assert_fail@plt+0x4700>
   1be94:	b	1bb70 <__assert_fail@plt+0x9424>
   1be98:	ldr	r3, [pc, #388]	; 1c024 <__assert_fail@plt+0x98d8>
   1be9c:	mov	r9, #1
   1bea0:	ldr	r3, [r8, r3]
   1bea4:	ldr	r5, [r3]
   1bea8:	bl	123ec <getpid@plt>
   1beac:	ldr	r2, [pc, #436]	; 1c068 <__assert_fail@plt+0x991c>
   1beb0:	ldr	r3, [pc, #436]	; 1c06c <__assert_fail@plt+0x9920>
   1beb4:	add	r2, pc, r2
   1beb8:	str	r2, [sp, #4]
   1bebc:	ldr	r2, [pc, #428]	; 1c070 <__assert_fail@plt+0x9924>
   1bec0:	add	r3, pc, r3
   1bec4:	mov	r1, r9
   1bec8:	str	r3, [sp]
   1becc:	add	r2, pc, r2
   1bed0:	mov	r3, r0
   1bed4:	mov	r0, r5
   1bed8:	bl	12578 <__fprintf_chk@plt>
   1bedc:	mov	r0, r4
   1bee0:	bl	17aa8 <__assert_fail@plt+0x535c>
   1bee4:	ldr	r1, [pc, #392]	; 1c074 <__assert_fail@plt+0x9928>
   1bee8:	add	r1, pc, r1
   1beec:	mov	r2, r0
   1bef0:	mov	r0, r4
   1bef4:	bl	16e4c <__assert_fail@plt+0x4700>
   1bef8:	b	1bcc4 <__assert_fail@plt+0x9578>
   1befc:	mov	r5, r0
   1bf00:	cmp	r5, #1
   1bf04:	movne	r9, r5
   1bf08:	b	1bcc4 <__assert_fail@plt+0x9578>
   1bf0c:	ldr	r3, [pc, #356]	; 1c078 <__assert_fail@plt+0x992c>
   1bf10:	mov	r5, r0
   1bf14:	add	r3, pc, r3
   1bf18:	ldr	r3, [r3]
   1bf1c:	tst	r3, #4
   1bf20:	beq	1bf00 <__assert_fail@plt+0x97b4>
   1bf24:	ldr	r3, [pc, #248]	; 1c024 <__assert_fail@plt+0x98d8>
   1bf28:	ldr	r3, [r8, r3]
   1bf2c:	ldr	r6, [r3]
   1bf30:	bl	123ec <getpid@plt>
   1bf34:	ldr	r2, [pc, #320]	; 1c07c <__assert_fail@plt+0x9930>
   1bf38:	ldr	r3, [pc, #320]	; 1c080 <__assert_fail@plt+0x9934>
   1bf3c:	add	r2, pc, r2
   1bf40:	str	r2, [sp, #4]
   1bf44:	ldr	r2, [pc, #312]	; 1c084 <__assert_fail@plt+0x9938>
   1bf48:	add	r3, pc, r3
   1bf4c:	str	r3, [sp]
   1bf50:	add	r2, pc, r2
   1bf54:	mov	r1, #1
   1bf58:	mov	r3, r0
   1bf5c:	mov	r0, r6
   1bf60:	bl	12578 <__fprintf_chk@plt>
   1bf64:	mov	r0, r4
   1bf68:	bl	17aa8 <__assert_fail@plt+0x535c>
   1bf6c:	ldr	r1, [pc, #276]	; 1c088 <__assert_fail@plt+0x993c>
   1bf70:	add	r1, pc, r1
   1bf74:	mov	r2, r0
   1bf78:	mov	r0, r4
   1bf7c:	bl	16e4c <__assert_fail@plt+0x4700>
   1bf80:	b	1bf00 <__assert_fail@plt+0x97b4>
   1bf84:	ldr	r3, [pc, #256]	; 1c08c <__assert_fail@plt+0x9940>
   1bf88:	mov	r5, r0
   1bf8c:	add	r3, pc, r3
   1bf90:	ldr	r3, [r3]
   1bf94:	tst	r3, #4
   1bf98:	beq	1bf00 <__assert_fail@plt+0x97b4>
   1bf9c:	ldr	r3, [pc, #128]	; 1c024 <__assert_fail@plt+0x98d8>
   1bfa0:	ldr	r3, [r8, r3]
   1bfa4:	ldr	r6, [r3]
   1bfa8:	bl	123ec <getpid@plt>
   1bfac:	ldr	r2, [pc, #220]	; 1c090 <__assert_fail@plt+0x9944>
   1bfb0:	ldr	r3, [pc, #220]	; 1c094 <__assert_fail@plt+0x9948>
   1bfb4:	add	r2, pc, r2
   1bfb8:	str	r2, [sp, #4]
   1bfbc:	ldr	r2, [pc, #212]	; 1c098 <__assert_fail@plt+0x994c>
   1bfc0:	add	r3, pc, r3
   1bfc4:	str	r3, [sp]
   1bfc8:	add	r2, pc, r2
   1bfcc:	mov	r1, #1
   1bfd0:	mov	r3, r0
   1bfd4:	mov	r0, r6
   1bfd8:	bl	12578 <__fprintf_chk@plt>
   1bfdc:	mov	r0, r4
   1bfe0:	bl	17aa8 <__assert_fail@plt+0x535c>
   1bfe4:	ldr	r1, [pc, #176]	; 1c09c <__assert_fail@plt+0x9950>
   1bfe8:	add	r1, pc, r1
   1bfec:	mov	r2, r0
   1bff0:	mov	r0, r4
   1bff4:	bl	16e4c <__assert_fail@plt+0x4700>
   1bff8:	b	1bf00 <__assert_fail@plt+0x97b4>
   1bffc:	mvn	r9, #21
   1c000:	b	1bce0 <__assert_fail@plt+0x9594>
   1c004:	bl	12200 <__stack_chk_fail@plt>
   1c008:	andeq	r9, r1, r8, asr r2
   1c00c:	andeq	r0, r0, ip, asr r2
   1c010:			; <UNDEFINED> instruction: 0x000196b0
   1c014:	andeq	r9, r1, ip, asr #12
   1c018:			; <UNDEFINED> instruction: 0x00007fb4
   1c01c:	andeq	r9, r1, ip, asr r5
   1c020:	andeq	r9, r1, ip, lsr r5
   1c024:	andeq	r0, r0, r0, ror #4
   1c028:	andeq	r7, r0, r8, ror lr
   1c02c:	andeq	r7, r0, r0, ror lr
   1c030:	andeq	r7, r0, r4, asr lr
   1c034:	andeq	r8, r0, r0, lsl #15
   1c038:	andeq	r7, r0, r0, lsr #28
   1c03c:	andeq	r7, r0, r0, lsr #28
   1c040:	andeq	r8, r0, r0, lsl #13
   1c044:	andeq	r9, r1, r0, asr #8
   1c048:	muleq	r0, r4, sp
   1c04c:	andeq	r7, r0, ip, lsl #27
   1c050:	andeq	r7, r0, r0, ror sp
   1c054:	andeq	r8, r0, r8, asr r6
   1c058:	andeq	r7, r0, r4, lsr sp
   1c05c:	andeq	r7, r0, ip, lsr #26
   1c060:	andeq	r7, r0, r0, lsl sp
   1c064:	andeq	r8, r0, r0, lsl #11
   1c068:	ldrdeq	r7, [r0], -ip
   1c06c:	ldrdeq	r7, [r0], -r4
   1c070:			; <UNDEFINED> instruction: 0x00007cb4
   1c074:	andeq	r8, r0, r8, asr #11
   1c078:	strdeq	r9, [r1], -r8
   1c07c:	andeq	r7, r0, r4, asr ip
   1c080:	andeq	r7, r0, ip, asr #24
   1c084:	andeq	r7, r0, r0, lsr ip
   1c088:	andeq	r8, r0, ip, asr #9
   1c08c:	andeq	r9, r1, r0, lsl #5
   1c090:	ldrdeq	r7, [r0], -ip
   1c094:	ldrdeq	r7, [r0], -r4
   1c098:			; <UNDEFINED> instruction: 0x00007bb8
   1c09c:	andeq	r8, r0, r8, ror r4
   1c0a0:	ldr	r1, [pc, #180]	; 1c15c <__assert_fail@plt+0x9a10>
   1c0a4:	ldr	ip, [pc, #180]	; 1c160 <__assert_fail@plt+0x9a14>
   1c0a8:	add	r1, pc, r1
   1c0ac:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c0b0:	mov	r4, r2
   1c0b4:	ldr	r9, [r1, ip]
   1c0b8:	sub	sp, sp, #452	; 0x1c4
   1c0bc:	subs	r7, r0, #0
   1c0c0:	ldr	r2, [r9]
   1c0c4:	mov	r5, r3
   1c0c8:	str	r2, [sp, #444]	; 0x1bc
   1c0cc:	mov	r3, r1
   1c0d0:	beq	1c140 <__assert_fail@plt+0x99f4>
   1c0d4:	add	r8, sp, #16
   1c0d8:	mov	r0, r8
   1c0dc:	mov	r1, #0
   1c0e0:	bl	17624 <__assert_fail@plt+0x4ed8>
   1c0e4:	subs	r6, r0, #0
   1c0e8:	bne	1c140 <__assert_fail@plt+0x99f4>
   1c0ec:	ldr	r3, [sp, #488]	; 0x1e8
   1c0f0:	mov	r1, r7
   1c0f4:	str	r3, [sp, #8]
   1c0f8:	add	r3, sp, #480	; 0x1e0
   1c0fc:	mov	r0, r8
   1c100:	ldrd	r2, [r3]
   1c104:	strd	r2, [sp]
   1c108:	mov	r2, r4
   1c10c:	mov	r3, r5
   1c110:	bl	1ba3c <__assert_fail@plt+0x92f0>
   1c114:	cmp	r0, #0
   1c118:	beq	1c148 <__assert_fail@plt+0x99fc>
   1c11c:	mov	r0, r8
   1c120:	bl	17e50 <__assert_fail@plt+0x5704>
   1c124:	ldr	r2, [sp, #444]	; 0x1bc
   1c128:	ldr	r3, [r9]
   1c12c:	mov	r0, r6
   1c130:	cmp	r2, r3
   1c134:	bne	1c158 <__assert_fail@plt+0x9a0c>
   1c138:	add	sp, sp, #452	; 0x1c4
   1c13c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c140:	mov	r6, #0
   1c144:	b	1c124 <__assert_fail@plt+0x99d8>
   1c148:	mov	r0, r8
   1c14c:	bl	17a88 <__assert_fail@plt+0x533c>
   1c150:	mov	r6, r0
   1c154:	b	1c11c <__assert_fail@plt+0x99d0>
   1c158:	bl	12200 <__stack_chk_fail@plt>
   1c15c:	andeq	r8, r1, r4, ror #25
   1c160:	andeq	r0, r0, ip, asr r2
   1c164:	ldr	r3, [pc, #284]	; 1c288 <__assert_fail@plt+0x9b3c>
   1c168:	ldr	r2, [pc, #284]	; 1c28c <__assert_fail@plt+0x9b40>
   1c16c:	add	r3, pc, r3
   1c170:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c174:	sub	sp, sp, #432	; 0x1b0
   1c178:	ldr	sl, [r3, r2]
   1c17c:	subs	r7, r0, #0
   1c180:	ldr	r3, [sl]
   1c184:	str	r3, [sp, #428]	; 0x1ac
   1c188:	beq	1c27c <__assert_fail@plt+0x9b30>
   1c18c:	mov	r4, sp
   1c190:	mov	r8, r1
   1c194:	mov	r0, r4
   1c198:	mov	r1, #0
   1c19c:	bl	17624 <__assert_fail@plt+0x4ed8>
   1c1a0:	subs	r5, r0, #0
   1c1a4:	beq	1c1c4 <__assert_fail@plt+0x9a78>
   1c1a8:	ldr	r2, [sp, #428]	; 0x1ac
   1c1ac:	ldr	r3, [sl]
   1c1b0:	mov	r0, r5
   1c1b4:	cmp	r2, r3
   1c1b8:	bne	1c284 <__assert_fail@plt+0x9b38>
   1c1bc:	add	sp, sp, #432	; 0x1b0
   1c1c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c1c4:	mov	r1, #2
   1c1c8:	mov	r0, r4
   1c1cc:	bl	17bf8 <__assert_fail@plt+0x54ac>
   1c1d0:	subs	r5, r0, #0
   1c1d4:	bne	1c27c <__assert_fail@plt+0x9b30>
   1c1d8:	adds	r9, r8, #0
   1c1dc:	movne	r9, #1
   1c1e0:	mov	r0, r4
   1c1e4:	bl	18ac8 <__assert_fail@plt+0x637c>
   1c1e8:	cmp	r0, #0
   1c1ec:	mov	r0, r4
   1c1f0:	bne	1c250 <__assert_fail@plt+0x9b04>
   1c1f4:	bl	1818c <__assert_fail@plt+0x5a40>
   1c1f8:	subs	r6, r0, #0
   1c1fc:	beq	1c234 <__assert_fail@plt+0x9ae8>
   1c200:	mov	r1, r7
   1c204:	bl	120c8 <strcmp@plt>
   1c208:	cmp	r0, #0
   1c20c:	bne	1c234 <__assert_fail@plt+0x9ae8>
   1c210:	mov	r0, r6
   1c214:	bl	12134 <free@plt>
   1c218:	cmp	r5, #0
   1c21c:	moveq	r3, r9
   1c220:	movne	r3, #0
   1c224:	cmp	r3, #0
   1c228:	bne	1c240 <__assert_fail@plt+0x9af4>
   1c22c:	add	r5, r5, #1
   1c230:	b	1c1e0 <__assert_fail@plt+0x9a94>
   1c234:	mov	r0, r6
   1c238:	bl	12134 <free@plt>
   1c23c:	b	1c1e0 <__assert_fail@plt+0x9a94>
   1c240:	mov	r0, r4
   1c244:	bl	17a88 <__assert_fail@plt+0x533c>
   1c248:	str	r0, [r8]
   1c24c:	b	1c22c <__assert_fail@plt+0x9ae0>
   1c250:	cmp	r5, #1
   1c254:	movle	r9, #0
   1c258:	andgt	r9, r9, #1
   1c25c:	bl	17e50 <__assert_fail@plt+0x5704>
   1c260:	cmp	r9, #0
   1c264:	beq	1c1a8 <__assert_fail@plt+0x9a5c>
   1c268:	ldr	r0, [r8]
   1c26c:	bl	12134 <free@plt>
   1c270:	mov	r3, #0
   1c274:	str	r3, [r8]
   1c278:	b	1c1a8 <__assert_fail@plt+0x9a5c>
   1c27c:	mvn	r5, #0
   1c280:	b	1c1a8 <__assert_fail@plt+0x9a5c>
   1c284:	bl	12200 <__stack_chk_fail@plt>
   1c288:	andeq	r8, r1, r0, lsr #24
   1c28c:	andeq	r0, r0, ip, asr r2
   1c290:	push	{r1, r2, r3}
   1c294:	subs	r3, r0, #0
   1c298:	ldr	r1, [pc, #168]	; 1c348 <__assert_fail@plt+0x9bfc>
   1c29c:	ldr	r2, [pc, #168]	; 1c34c <__assert_fail@plt+0x9c00>
   1c2a0:	add	r1, pc, r1
   1c2a4:	push	{r4, r5, r6, lr}
   1c2a8:	sub	sp, sp, #12
   1c2ac:	ldr	r5, [r1, r2]
   1c2b0:	ldr	r6, [sp, #28]
   1c2b4:	ldr	r2, [r5]
   1c2b8:	str	r2, [sp, #4]
   1c2bc:	beq	1c2d4 <__assert_fail@plt+0x9b88>
   1c2c0:	ldr	r2, [pc, #136]	; 1c350 <__assert_fail@plt+0x9c04>
   1c2c4:	add	r2, pc, r2
   1c2c8:	ldr	r2, [r2]
   1c2cc:	tst	r2, #16777216	; 0x1000000
   1c2d0:	beq	1c324 <__assert_fail@plt+0x9bd8>
   1c2d4:	ldr	r3, [pc, #120]	; 1c354 <__assert_fail@plt+0x9c08>
   1c2d8:	ldr	r4, [r1, r3]
   1c2dc:	add	ip, sp, #32
   1c2e0:	mov	r2, r6
   1c2e4:	mov	r3, ip
   1c2e8:	mov	r1, #1
   1c2ec:	ldr	r0, [r4]
   1c2f0:	str	ip, [sp]
   1c2f4:	bl	1238c <__vfprintf_chk@plt>
   1c2f8:	ldr	r1, [r4]
   1c2fc:	mov	r0, #10
   1c300:	bl	12620 <fputc@plt>
   1c304:	ldr	r2, [sp, #4]
   1c308:	ldr	r3, [r5]
   1c30c:	cmp	r2, r3
   1c310:	bne	1c344 <__assert_fail@plt+0x9bf8>
   1c314:	add	sp, sp, #12
   1c318:	pop	{r4, r5, r6, lr}
   1c31c:	add	sp, sp, #12
   1c320:	bx	lr
   1c324:	ldr	r0, [pc, #40]	; 1c354 <__assert_fail@plt+0x9c08>
   1c328:	ldr	r2, [pc, #40]	; 1c358 <__assert_fail@plt+0x9c0c>
   1c32c:	ldr	r4, [r1, r0]
   1c330:	add	r2, pc, r2
   1c334:	mov	r1, #1
   1c338:	ldr	r0, [r4]
   1c33c:	bl	12578 <__fprintf_chk@plt>
   1c340:	b	1c2dc <__assert_fail@plt+0x9b90>
   1c344:	bl	12200 <__stack_chk_fail@plt>
   1c348:	andeq	r8, r1, ip, ror #21
   1c34c:	andeq	r0, r0, ip, asr r2
   1c350:	andeq	r8, r1, ip, asr #30
   1c354:	andeq	r0, r0, r0, ror #4
   1c358:	andeq	r7, r0, r8, asr #16
   1c35c:	push	{r0, r1, r2, r3}
   1c360:	ldr	r0, [pc, #104]	; 1c3d0 <__assert_fail@plt+0x9c84>
   1c364:	ldr	r2, [pc, #104]	; 1c3d4 <__assert_fail@plt+0x9c88>
   1c368:	add	r0, pc, r0
   1c36c:	push	{r4, r5, lr}
   1c370:	sub	sp, sp, #12
   1c374:	ldr	r4, [r0, r2]
   1c378:	ldr	r1, [pc, #88]	; 1c3d8 <__assert_fail@plt+0x9c8c>
   1c37c:	add	r3, sp, #28
   1c380:	ldr	ip, [r4]
   1c384:	str	r3, [sp]
   1c388:	str	ip, [sp, #4]
   1c38c:	ldr	r5, [r0, r1]
   1c390:	ldr	r2, [sp, #24]
   1c394:	mov	r1, #1
   1c398:	ldr	r0, [r5]
   1c39c:	bl	1238c <__vfprintf_chk@plt>
   1c3a0:	ldr	r1, [r5]
   1c3a4:	mov	r0, #10
   1c3a8:	bl	12620 <fputc@plt>
   1c3ac:	ldr	r2, [sp, #4]
   1c3b0:	ldr	r3, [r4]
   1c3b4:	cmp	r2, r3
   1c3b8:	bne	1c3cc <__assert_fail@plt+0x9c80>
   1c3bc:	add	sp, sp, #12
   1c3c0:	pop	{r4, r5, lr}
   1c3c4:	add	sp, sp, #16
   1c3c8:	bx	lr
   1c3cc:	bl	12200 <__stack_chk_fail@plt>
   1c3d0:	andeq	r8, r1, r4, lsr #20
   1c3d4:	andeq	r0, r0, ip, asr r2
   1c3d8:	andeq	r0, r0, r0, ror #4
   1c3dc:	ldr	r1, [r0, #12]
   1c3e0:	ldr	r2, [r0, #4]
   1c3e4:	cmp	r1, #0
   1c3e8:	push	{r4, lr}
   1c3ec:	moveq	r4, r2
   1c3f0:	sub	sp, sp, #16
   1c3f4:	beq	1c448 <__assert_fail@plt+0x9cfc>
   1c3f8:	cmp	r2, #0
   1c3fc:	beq	1c470 <__assert_fail@plt+0x9d24>
   1c400:	ldrsb	r3, [r2]
   1c404:	ldr	ip, [pc, #116]	; 1c480 <__assert_fail@plt+0x9d34>
   1c408:	add	r4, r0, #16
   1c40c:	cmp	r3, #47	; 0x2f
   1c410:	addeq	r2, r2, #1
   1c414:	add	ip, pc, ip
   1c418:	mov	r3, #4096	; 0x1000
   1c41c:	stmib	sp, {r1, r2}
   1c420:	mov	r0, r4
   1c424:	str	ip, [sp]
   1c428:	mov	r1, r3
   1c42c:	mov	r2, #1
   1c430:	bl	12728 <__snprintf_chk@plt>
   1c434:	cmp	r0, #0
   1c438:	movlt	r4, #0
   1c43c:	blt	1c448 <__assert_fail@plt+0x9cfc>
   1c440:	cmp	r0, #4096	; 0x1000
   1c444:	bge	1c454 <__assert_fail@plt+0x9d08>
   1c448:	mov	r0, r4
   1c44c:	add	sp, sp, #16
   1c450:	pop	{r4, pc}
   1c454:	bl	1247c <__errno_location@plt>
   1c458:	mov	r4, #0
   1c45c:	mov	r3, #36	; 0x24
   1c460:	str	r3, [r0]
   1c464:	mov	r0, r4
   1c468:	add	sp, sp, #16
   1c46c:	pop	{r4, pc}
   1c470:	mov	r4, r1
   1c474:	mov	r0, r4
   1c478:	add	sp, sp, #16
   1c47c:	pop	{r4, pc}
   1c480:	strdeq	r8, [r0], -ip
   1c484:	push	{r4, lr}
   1c488:	sub	sp, sp, #8
   1c48c:	add	r4, r0, #16
   1c490:	mov	r3, #4096	; 0x1000
   1c494:	stm	sp, {r1, r2}
   1c498:	mov	r0, r4
   1c49c:	mov	r1, r3
   1c4a0:	mov	r2, #1
   1c4a4:	bl	121a0 <__vsnprintf_chk@plt>
   1c4a8:	cmp	r0, #0
   1c4ac:	movlt	r4, #0
   1c4b0:	blt	1c4bc <__assert_fail@plt+0x9d70>
   1c4b4:	cmp	r0, #4096	; 0x1000
   1c4b8:	bge	1c4c8 <__assert_fail@plt+0x9d7c>
   1c4bc:	mov	r0, r4
   1c4c0:	add	sp, sp, #8
   1c4c4:	pop	{r4, pc}
   1c4c8:	bl	1247c <__errno_location@plt>
   1c4cc:	mov	r4, #0
   1c4d0:	mov	r3, #36	; 0x24
   1c4d4:	str	r3, [r0]
   1c4d8:	mov	r0, r4
   1c4dc:	add	sp, sp, #8
   1c4e0:	pop	{r4, pc}
   1c4e4:	push	{r4, r5, r6, r7, lr}
   1c4e8:	sub	sp, sp, #20
   1c4ec:	ldr	r4, [pc, #312]	; 1c62c <__assert_fail@plt+0x9ee0>
   1c4f0:	ldr	r3, [pc, #312]	; 1c630 <__assert_fail@plt+0x9ee4>
   1c4f4:	add	r4, pc, r4
   1c4f8:	ldr	r7, [pc, #308]	; 1c634 <__assert_fail@plt+0x9ee8>
   1c4fc:	ldr	r5, [r4, r3]
   1c500:	add	r7, pc, r7
   1c504:	ldr	r6, [r7]
   1c508:	ldr	r3, [r5]
   1c50c:	cmp	r6, #0
   1c510:	str	r3, [sp, #12]
   1c514:	beq	1c530 <__assert_fail@plt+0x9de4>
   1c518:	ldr	r2, [sp, #12]
   1c51c:	ldr	r3, [r5]
   1c520:	cmp	r2, r3
   1c524:	bne	1c628 <__assert_fail@plt+0x9edc>
   1c528:	add	sp, sp, #20
   1c52c:	pop	{r4, r5, r6, r7, pc}
   1c530:	ldr	r0, [pc, #256]	; 1c638 <__assert_fail@plt+0x9eec>
   1c534:	add	r0, pc, r0
   1c538:	bl	12338 <getenv@plt>
   1c53c:	cmp	r0, #0
   1c540:	beq	1c588 <__assert_fail@plt+0x9e3c>
   1c544:	mov	r2, r6
   1c548:	add	r1, sp, #8
   1c54c:	bl	1241c <strtoul@plt>
   1c550:	mov	r6, r0
   1c554:	ldr	r0, [sp, #8]
   1c558:	cmp	r0, #0
   1c55c:	beq	1c574 <__assert_fail@plt+0x9e28>
   1c560:	ldr	r1, [pc, #212]	; 1c63c <__assert_fail@plt+0x9ef0>
   1c564:	add	r1, pc, r1
   1c568:	bl	120c8 <strcmp@plt>
   1c56c:	cmp	r0, #0
   1c570:	beq	1c59c <__assert_fail@plt+0x9e50>
   1c574:	ldr	r3, [pc, #196]	; 1c640 <__assert_fail@plt+0x9ef4>
   1c578:	cmp	r6, #0
   1c57c:	add	r3, pc, r3
   1c580:	str	r6, [r3]
   1c584:	bne	1c5a8 <__assert_fail@plt+0x9e5c>
   1c588:	mov	r3, #2
   1c58c:	ldr	r2, [pc, #176]	; 1c644 <__assert_fail@plt+0x9ef8>
   1c590:	add	r2, pc, r2
   1c594:	str	r3, [r2]
   1c598:	b	1c518 <__assert_fail@plt+0x9dcc>
   1c59c:	ldr	r3, [pc, #164]	; 1c648 <__assert_fail@plt+0x9efc>
   1c5a0:	mov	r6, r3
   1c5a4:	str	r3, [r7]
   1c5a8:	bl	1211c <getuid@plt>
   1c5ac:	mov	r7, r0
   1c5b0:	bl	12248 <geteuid@plt>
   1c5b4:	cmp	r7, r0
   1c5b8:	beq	1c60c <__assert_fail@plt+0x9ec0>
   1c5bc:	ldr	r7, [pc, #136]	; 1c64c <__assert_fail@plt+0x9f00>
   1c5c0:	ldr	r2, [pc, #136]	; 1c650 <__assert_fail@plt+0x9f04>
   1c5c4:	add	r7, pc, r7
   1c5c8:	orr	r3, r6, #16777216	; 0x1000000
   1c5cc:	str	r3, [r7]
   1c5d0:	ldr	r3, [r4, r2]
   1c5d4:	ldr	r4, [r3]
   1c5d8:	bl	123ec <getpid@plt>
   1c5dc:	ldr	r3, [pc, #112]	; 1c654 <__assert_fail@plt+0x9f08>
   1c5e0:	ldr	r2, [pc, #112]	; 1c658 <__assert_fail@plt+0x9f0c>
   1c5e4:	add	r3, pc, r3
   1c5e8:	str	r3, [sp]
   1c5ec:	add	r2, pc, r2
   1c5f0:	mov	r1, #1
   1c5f4:	mov	r3, r0
   1c5f8:	mov	r0, r4
   1c5fc:	bl	12578 <__fprintf_chk@plt>
   1c600:	ldr	r3, [r7]
   1c604:	orr	r3, r3, #2
   1c608:	b	1c58c <__assert_fail@plt+0x9e40>
   1c60c:	bl	124c4 <getgid@plt>
   1c610:	mov	r7, r0
   1c614:	bl	12290 <getegid@plt>
   1c618:	cmp	r7, r0
   1c61c:	orreq	r3, r6, #2
   1c620:	bne	1c5bc <__assert_fail@plt+0x9e70>
   1c624:	b	1c58c <__assert_fail@plt+0x9e40>
   1c628:	bl	12200 <__stack_chk_fail@plt>
   1c62c:	muleq	r1, r8, r8
   1c630:	andeq	r0, r0, ip, asr r2
   1c634:	andeq	r8, r1, r0, lsl sp
   1c638:	andeq	r7, r0, r4, ror #31
   1c63c:	andeq	r7, r0, r0, ror #13
   1c640:	muleq	r1, r4, ip
   1c644:	andeq	r8, r1, r0, lsl #25
   1c648:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1c64c:	andeq	r8, r1, ip, asr #24
   1c650:	andeq	r0, r0, r0, ror #4
   1c654:	andeq	r7, r0, r4, asr #30
   1c658:	andeq	r7, r0, ip, asr r6
   1c65c:	cmp	r0, #0
   1c660:	ldrne	r3, [r0, #8]
   1c664:	addne	r3, r3, #1
   1c668:	strne	r3, [r0, #8]
   1c66c:	bx	lr
   1c670:	ldr	r2, [pc, #228]	; 1c75c <__assert_fail@plt+0xa010>
   1c674:	push	{r4, r5, lr}
   1c678:	subs	r4, r0, #0
   1c67c:	sub	sp, sp, #12
   1c680:	add	r2, pc, r2
   1c684:	beq	1c69c <__assert_fail@plt+0x9f50>
   1c688:	ldr	r3, [r4, #8]
   1c68c:	sub	r3, r3, #1
   1c690:	cmp	r3, #0
   1c694:	str	r3, [r4, #8]
   1c698:	ble	1c6a4 <__assert_fail@plt+0x9f58>
   1c69c:	add	sp, sp, #12
   1c6a0:	pop	{r4, r5, pc}
   1c6a4:	ldr	r3, [pc, #180]	; 1c760 <__assert_fail@plt+0xa014>
   1c6a8:	add	r3, pc, r3
   1c6ac:	ldr	r3, [r3]
   1c6b0:	tst	r3, #4
   1c6b4:	bne	1c708 <__assert_fail@plt+0x9fbc>
   1c6b8:	add	r3, r4, #4096	; 0x1000
   1c6bc:	ldr	r2, [r3, #16]
   1c6c0:	cmp	r2, #0
   1c6c4:	beq	1c6d4 <__assert_fail@plt+0x9f88>
   1c6c8:	ldr	r3, [r3, #20]
   1c6cc:	mov	r0, r4
   1c6d0:	blx	r3
   1c6d4:	ldr	r0, [r4]
   1c6d8:	cmp	r0, #0
   1c6dc:	bge	1c700 <__assert_fail@plt+0x9fb4>
   1c6e0:	ldr	r0, [r4, #4]
   1c6e4:	bl	12134 <free@plt>
   1c6e8:	ldr	r0, [r4, #12]
   1c6ec:	bl	12134 <free@plt>
   1c6f0:	mov	r0, r4
   1c6f4:	add	sp, sp, #12
   1c6f8:	pop	{r4, r5, lr}
   1c6fc:	b	12134 <free@plt>
   1c700:	bl	12704 <close@plt>
   1c704:	b	1c6e0 <__assert_fail@plt+0x9f94>
   1c708:	ldr	r3, [pc, #84]	; 1c764 <__assert_fail@plt+0xa018>
   1c70c:	ldr	r3, [r2, r3]
   1c710:	ldr	r5, [r3]
   1c714:	bl	123ec <getpid@plt>
   1c718:	ldr	r2, [pc, #72]	; 1c768 <__assert_fail@plt+0xa01c>
   1c71c:	ldr	r3, [pc, #72]	; 1c76c <__assert_fail@plt+0xa020>
   1c720:	add	r2, pc, r2
   1c724:	str	r2, [sp, #4]
   1c728:	ldr	r2, [pc, #64]	; 1c770 <__assert_fail@plt+0xa024>
   1c72c:	add	r3, pc, r3
   1c730:	str	r3, [sp]
   1c734:	add	r2, pc, r2
   1c738:	mov	r1, #1
   1c73c:	mov	r3, r0
   1c740:	mov	r0, r5
   1c744:	bl	12578 <__fprintf_chk@plt>
   1c748:	ldr	r1, [pc, #36]	; 1c774 <__assert_fail@plt+0xa028>
   1c74c:	mov	r0, r4
   1c750:	add	r1, pc, r1
   1c754:	bl	1c290 <__assert_fail@plt+0x9b44>
   1c758:	b	1c6b8 <__assert_fail@plt+0x9f6c>
   1c75c:	andeq	r8, r1, ip, lsl #14
   1c760:	andeq	r8, r1, r8, ror #22
   1c764:	andeq	r0, r0, r0, ror #4
   1c768:	andeq	r7, r0, r0, ror r4
   1c76c:	strdeq	r7, [r0], -ip
   1c770:	andeq	r7, r0, ip, asr #8
   1c774:	andeq	r7, r0, r0, ror #27
   1c778:	push	{r0, r1, r2, r3}
   1c77c:	mov	r0, #1
   1c780:	push	{r4, r5, r6, r7, lr}
   1c784:	sub	sp, sp, #20
   1c788:	ldr	r5, [pc, #264]	; 1c898 <__assert_fail@plt+0xa14c>
   1c78c:	ldr	r3, [pc, #264]	; 1c89c <__assert_fail@plt+0xa150>
   1c790:	add	r5, pc, r5
   1c794:	ldr	r1, [pc, #260]	; 1c8a0 <__assert_fail@plt+0xa154>
   1c798:	ldr	r6, [r5, r3]
   1c79c:	ldr	r7, [sp, #40]	; 0x28
   1c7a0:	ldr	r3, [r6]
   1c7a4:	str	r3, [sp, #12]
   1c7a8:	bl	12074 <calloc@plt>
   1c7ac:	subs	r4, r0, #0
   1c7b0:	beq	1c80c <__assert_fail@plt+0xa0c0>
   1c7b4:	ldr	r3, [pc, #232]	; 1c8a4 <__assert_fail@plt+0xa158>
   1c7b8:	add	r3, pc, r3
   1c7bc:	ldr	r3, [r3]
   1c7c0:	tst	r3, #4
   1c7c4:	bne	1c830 <__assert_fail@plt+0xa0e4>
   1c7c8:	mov	r1, #1
   1c7cc:	mvn	r3, #0
   1c7d0:	cmp	r7, #0
   1c7d4:	str	r1, [r4, #8]
   1c7d8:	str	r3, [r4]
   1c7dc:	beq	1c80c <__assert_fail@plt+0xa0c0>
   1c7e0:	add	ip, sp, #44	; 0x2c
   1c7e4:	mov	r2, r7
   1c7e8:	mov	r3, ip
   1c7ec:	add	r0, r4, #4
   1c7f0:	str	ip, [sp, #8]
   1c7f4:	bl	124a0 <__vasprintf_chk@plt>
   1c7f8:	cmp	r0, #0
   1c7fc:	blt	1c884 <__assert_fail@plt+0xa138>
   1c800:	ldr	r3, [r4, #4]
   1c804:	cmp	r3, #0
   1c808:	beq	1c884 <__assert_fail@plt+0xa138>
   1c80c:	ldr	r2, [sp, #12]
   1c810:	ldr	r3, [r6]
   1c814:	mov	r0, r4
   1c818:	cmp	r2, r3
   1c81c:	bne	1c894 <__assert_fail@plt+0xa148>
   1c820:	add	sp, sp, #20
   1c824:	pop	{r4, r5, r6, r7, lr}
   1c828:	add	sp, sp, #16
   1c82c:	bx	lr
   1c830:	ldr	r3, [pc, #112]	; 1c8a8 <__assert_fail@plt+0xa15c>
   1c834:	ldr	r3, [r5, r3]
   1c838:	ldr	r5, [r3]
   1c83c:	bl	123ec <getpid@plt>
   1c840:	ldr	r2, [pc, #100]	; 1c8ac <__assert_fail@plt+0xa160>
   1c844:	ldr	r3, [pc, #100]	; 1c8b0 <__assert_fail@plt+0xa164>
   1c848:	add	r2, pc, r2
   1c84c:	str	r2, [sp, #4]
   1c850:	ldr	r2, [pc, #92]	; 1c8b4 <__assert_fail@plt+0xa168>
   1c854:	add	r3, pc, r3
   1c858:	str	r3, [sp]
   1c85c:	add	r2, pc, r2
   1c860:	mov	r1, #1
   1c864:	mov	r3, r0
   1c868:	mov	r0, r5
   1c86c:	bl	12578 <__fprintf_chk@plt>
   1c870:	ldr	r1, [pc, #64]	; 1c8b8 <__assert_fail@plt+0xa16c>
   1c874:	mov	r0, r4
   1c878:	add	r1, pc, r1
   1c87c:	bl	1c290 <__assert_fail@plt+0x9b44>
   1c880:	b	1c7c8 <__assert_fail@plt+0xa07c>
   1c884:	mov	r0, r4
   1c888:	bl	1c670 <__assert_fail@plt+0x9f24>
   1c88c:	mov	r4, #0
   1c890:	b	1c80c <__assert_fail@plt+0xa0c0>
   1c894:	bl	12200 <__stack_chk_fail@plt>
   1c898:	strdeq	r8, [r1], -ip
   1c89c:	andeq	r0, r0, ip, asr r2
   1c8a0:	andeq	r1, r0, ip, lsl r0
   1c8a4:	andeq	r8, r1, r8, asr sl
   1c8a8:	andeq	r0, r0, r0, ror #4
   1c8ac:	andeq	r7, r0, r8, asr #6
   1c8b0:	ldrdeq	r7, [r0], -r4
   1c8b4:	andeq	r7, r0, r4, lsr #6
   1c8b8:	andeq	r7, r0, r0, asr #25
   1c8bc:	ldr	r3, [r0]
   1c8c0:	push	{r4, r5, r6, lr}
   1c8c4:	cmp	r3, #0
   1c8c8:	ldr	r6, [pc, #220]	; 1c9ac <__assert_fail@plt+0xa260>
   1c8cc:	sub	sp, sp, #8
   1c8d0:	add	r6, pc, r6
   1c8d4:	bge	1c98c <__assert_fail@plt+0xa240>
   1c8d8:	cmp	r1, #0
   1c8dc:	mov	r5, r0
   1c8e0:	beq	1c97c <__assert_fail@plt+0xa230>
   1c8e4:	mov	r0, r1
   1c8e8:	bl	121f4 <strdup@plt>
   1c8ec:	subs	r4, r0, #0
   1c8f0:	beq	1c984 <__assert_fail@plt+0xa238>
   1c8f4:	ldr	r0, [r5, #12]
   1c8f8:	bl	12134 <free@plt>
   1c8fc:	ldr	r3, [pc, #172]	; 1c9b0 <__assert_fail@plt+0xa264>
   1c900:	str	r4, [r5, #12]
   1c904:	add	r3, pc, r3
   1c908:	ldr	r0, [r3]
   1c90c:	ands	r0, r0, #4
   1c910:	bne	1c91c <__assert_fail@plt+0xa1d0>
   1c914:	add	sp, sp, #8
   1c918:	pop	{r4, r5, r6, pc}
   1c91c:	ldr	r3, [pc, #144]	; 1c9b4 <__assert_fail@plt+0xa268>
   1c920:	ldr	r3, [r6, r3]
   1c924:	ldr	r6, [r3]
   1c928:	bl	123ec <getpid@plt>
   1c92c:	ldr	r2, [pc, #132]	; 1c9b8 <__assert_fail@plt+0xa26c>
   1c930:	ldr	r3, [pc, #132]	; 1c9bc <__assert_fail@plt+0xa270>
   1c934:	add	r2, pc, r2
   1c938:	str	r2, [sp, #4]
   1c93c:	ldr	r2, [pc, #124]	; 1c9c0 <__assert_fail@plt+0xa274>
   1c940:	add	r3, pc, r3
   1c944:	str	r3, [sp]
   1c948:	add	r2, pc, r2
   1c94c:	mov	r1, #1
   1c950:	mov	r3, r0
   1c954:	mov	r0, r6
   1c958:	bl	12578 <__fprintf_chk@plt>
   1c95c:	ldr	r1, [pc, #96]	; 1c9c4 <__assert_fail@plt+0xa278>
   1c960:	mov	r0, r5
   1c964:	mov	r2, r4
   1c968:	add	r1, pc, r1
   1c96c:	bl	1c290 <__assert_fail@plt+0x9b44>
   1c970:	mov	r0, #0
   1c974:	add	sp, sp, #8
   1c978:	pop	{r4, r5, r6, pc}
   1c97c:	mov	r4, r1
   1c980:	b	1c8f4 <__assert_fail@plt+0xa1a8>
   1c984:	mvn	r0, #11
   1c988:	b	1c914 <__assert_fail@plt+0xa1c8>
   1c98c:	ldr	r3, [pc, #52]	; 1c9c8 <__assert_fail@plt+0xa27c>
   1c990:	ldr	r1, [pc, #52]	; 1c9cc <__assert_fail@plt+0xa280>
   1c994:	ldr	r0, [pc, #52]	; 1c9d0 <__assert_fail@plt+0xa284>
   1c998:	add	r3, pc, r3
   1c99c:	mov	r2, #109	; 0x6d
   1c9a0:	add	r1, pc, r1
   1c9a4:	add	r0, pc, r0
   1c9a8:	bl	1274c <__assert_fail@plt>
   1c9ac:			; <UNDEFINED> instruction: 0x000184bc
   1c9b0:	andeq	r8, r1, ip, lsl #18
   1c9b4:	andeq	r0, r0, r0, ror #4
   1c9b8:	andeq	r7, r0, ip, asr r2
   1c9bc:	andeq	r7, r0, r8, ror #23
   1c9c0:	andeq	r7, r0, r8, lsr r2
   1c9c4:	strdeq	r7, [r0], -r4
   1c9c8:	andeq	r7, r0, r0, asr fp
   1c9cc:	andeq	r7, r0, r0, lsr #23
   1c9d0:	andeq	r7, r0, r8, lsr #23
   1c9d4:	cmp	r0, #0
   1c9d8:	ldrne	r0, [r0, #12]
   1c9dc:	bx	lr
   1c9e0:	push	{r4, r5, r6, lr}
   1c9e4:	subs	r5, r1, #0
   1c9e8:	ldr	r6, [pc, #196]	; 1cab4 <__assert_fail@plt+0xa368>
   1c9ec:	sub	sp, sp, #8
   1c9f0:	mov	r4, r0
   1c9f4:	add	r6, pc, r6
   1c9f8:	beq	1ca0c <__assert_fail@plt+0xa2c0>
   1c9fc:	mov	r0, r5
   1ca00:	bl	121f4 <strdup@plt>
   1ca04:	subs	r5, r0, #0
   1ca08:	beq	1caac <__assert_fail@plt+0xa360>
   1ca0c:	ldr	r0, [r4]
   1ca10:	cmp	r0, #0
   1ca14:	blt	1ca24 <__assert_fail@plt+0xa2d8>
   1ca18:	bl	12704 <close@plt>
   1ca1c:	mvn	r3, #0
   1ca20:	str	r3, [r4]
   1ca24:	ldr	r0, [r4, #4]
   1ca28:	bl	12134 <free@plt>
   1ca2c:	ldr	r3, [pc, #132]	; 1cab8 <__assert_fail@plt+0xa36c>
   1ca30:	str	r5, [r4, #4]
   1ca34:	add	r3, pc, r3
   1ca38:	ldr	r3, [r3]
   1ca3c:	ands	r0, r3, #4
   1ca40:	bne	1ca4c <__assert_fail@plt+0xa300>
   1ca44:	add	sp, sp, #8
   1ca48:	pop	{r4, r5, r6, pc}
   1ca4c:	ldr	r3, [pc, #104]	; 1cabc <__assert_fail@plt+0xa370>
   1ca50:	ldr	r3, [r6, r3]
   1ca54:	ldr	r6, [r3]
   1ca58:	bl	123ec <getpid@plt>
   1ca5c:	ldr	r2, [pc, #92]	; 1cac0 <__assert_fail@plt+0xa374>
   1ca60:	ldr	r3, [pc, #92]	; 1cac4 <__assert_fail@plt+0xa378>
   1ca64:	add	r2, pc, r2
   1ca68:	str	r2, [sp, #4]
   1ca6c:	ldr	r2, [pc, #84]	; 1cac8 <__assert_fail@plt+0xa37c>
   1ca70:	add	r3, pc, r3
   1ca74:	str	r3, [sp]
   1ca78:	add	r2, pc, r2
   1ca7c:	mov	r1, #1
   1ca80:	mov	r3, r0
   1ca84:	mov	r0, r6
   1ca88:	bl	12578 <__fprintf_chk@plt>
   1ca8c:	ldr	r1, [pc, #56]	; 1cacc <__assert_fail@plt+0xa380>
   1ca90:	mov	r0, r4
   1ca94:	mov	r2, r5
   1ca98:	add	r1, pc, r1
   1ca9c:	bl	1c290 <__assert_fail@plt+0x9b44>
   1caa0:	mov	r0, #0
   1caa4:	add	sp, sp, #8
   1caa8:	pop	{r4, r5, r6, pc}
   1caac:	mvn	r0, #11
   1cab0:	b	1ca44 <__assert_fail@plt+0xa2f8>
   1cab4:	muleq	r1, r8, r3
   1cab8:	ldrdeq	r8, [r1], -ip
   1cabc:	andeq	r0, r0, r0, ror #4
   1cac0:	andeq	r7, r0, ip, lsr #2
   1cac4:			; <UNDEFINED> instruction: 0x00007ab8
   1cac8:	andeq	r7, r0, r8, lsl #2
   1cacc:	ldrdeq	r7, [r0], -r8
   1cad0:	cmp	r0, #0
   1cad4:	ldrne	r0, [r0, #4]
   1cad8:	bx	lr
   1cadc:	ldr	r3, [pc, #144]	; 1cb74 <__assert_fail@plt+0xa428>
   1cae0:	add	ip, r0, #4096	; 0x1000
   1cae4:	add	r3, pc, r3
   1cae8:	str	r1, [ip, #16]
   1caec:	ldr	r3, [r3]
   1caf0:	str	r2, [ip, #20]
   1caf4:	tst	r3, #4
   1caf8:	ldr	r3, [pc, #120]	; 1cb78 <__assert_fail@plt+0xa42c>
   1cafc:	add	r3, pc, r3
   1cb00:	bne	1cb0c <__assert_fail@plt+0xa3c0>
   1cb04:	mov	r0, #0
   1cb08:	bx	lr
   1cb0c:	ldr	r2, [pc, #104]	; 1cb7c <__assert_fail@plt+0xa430>
   1cb10:	push	{r4, r5, lr}
   1cb14:	sub	sp, sp, #12
   1cb18:	ldr	r3, [r3, r2]
   1cb1c:	mov	r4, r0
   1cb20:	ldr	r5, [r3]
   1cb24:	bl	123ec <getpid@plt>
   1cb28:	ldr	r2, [pc, #80]	; 1cb80 <__assert_fail@plt+0xa434>
   1cb2c:	ldr	r3, [pc, #80]	; 1cb84 <__assert_fail@plt+0xa438>
   1cb30:	add	r2, pc, r2
   1cb34:	str	r2, [sp, #4]
   1cb38:	ldr	r2, [pc, #72]	; 1cb88 <__assert_fail@plt+0xa43c>
   1cb3c:	add	r3, pc, r3
   1cb40:	str	r3, [sp]
   1cb44:	add	r2, pc, r2
   1cb48:	mov	r1, #1
   1cb4c:	mov	r3, r0
   1cb50:	mov	r0, r5
   1cb54:	bl	12578 <__fprintf_chk@plt>
   1cb58:	ldr	r1, [pc, #44]	; 1cb8c <__assert_fail@plt+0xa440>
   1cb5c:	mov	r0, r4
   1cb60:	add	r1, pc, r1
   1cb64:	bl	1c290 <__assert_fail@plt+0x9b44>
   1cb68:	mov	r0, #0
   1cb6c:	add	sp, sp, #12
   1cb70:	pop	{r4, r5, pc}
   1cb74:	andeq	r8, r1, ip, lsr #14
   1cb78:	muleq	r1, r0, r2
   1cb7c:	andeq	r0, r0, r0, ror #4
   1cb80:	andeq	r7, r0, r0, rrx
   1cb84:	andeq	r7, r0, ip, ror #19
   1cb88:	andeq	r7, r0, ip, lsr r0
   1cb8c:	andeq	r7, r0, r0, lsr #20
   1cb90:	cmp	r0, #0
   1cb94:	addne	r0, r0, #4096	; 0x1000
   1cb98:	ldrne	r0, [r0, #16]
   1cb9c:	bx	lr
   1cba0:	add	r3, r0, #4096	; 0x1000
   1cba4:	mov	r0, #0
   1cba8:	str	r1, [r3, #24]
   1cbac:	bx	lr
   1cbb0:	push	{r4, r5, r6, lr}
   1cbb4:	subs	r4, r0, #0
   1cbb8:	ldr	r5, [pc, #284]	; 1ccdc <__assert_fail@plt+0xa590>
   1cbbc:	sub	sp, sp, #8
   1cbc0:	add	r5, pc, r5
   1cbc4:	beq	1ccb8 <__assert_fail@plt+0xa56c>
   1cbc8:	ldr	r3, [r4, #4]
   1cbcc:	cmp	r3, #0
   1cbd0:	beq	1cc94 <__assert_fail@plt+0xa548>
   1cbd4:	ldr	r3, [r4]
   1cbd8:	cmp	r3, #0
   1cbdc:	blt	1cbec <__assert_fail@plt+0xa4a0>
   1cbe0:	mov	r0, r3
   1cbe4:	add	sp, sp, #8
   1cbe8:	pop	{r4, r5, r6, pc}
   1cbec:	bl	1c3dc <__assert_fail@plt+0x9c90>
   1cbf0:	subs	r6, r0, #0
   1cbf4:	beq	1cc84 <__assert_fail@plt+0xa538>
   1cbf8:	ldr	r3, [pc, #224]	; 1cce0 <__assert_fail@plt+0xa594>
   1cbfc:	add	r3, pc, r3
   1cc00:	ldr	r3, [r3]
   1cc04:	tst	r3, #4
   1cc08:	bne	1cc2c <__assert_fail@plt+0xa4e0>
   1cc0c:	mov	r0, r6
   1cc10:	mov	r1, #524288	; 0x80000
   1cc14:	bl	12320 <open64@plt>
   1cc18:	mov	r3, r0
   1cc1c:	str	r0, [r4]
   1cc20:	mov	r0, r3
   1cc24:	add	sp, sp, #8
   1cc28:	pop	{r4, r5, r6, pc}
   1cc2c:	ldr	r3, [pc, #176]	; 1cce4 <__assert_fail@plt+0xa598>
   1cc30:	ldr	r3, [r5, r3]
   1cc34:	ldr	r5, [r3]
   1cc38:	bl	123ec <getpid@plt>
   1cc3c:	ldr	r2, [pc, #164]	; 1cce8 <__assert_fail@plt+0xa59c>
   1cc40:	ldr	r3, [pc, #164]	; 1ccec <__assert_fail@plt+0xa5a0>
   1cc44:	add	r2, pc, r2
   1cc48:	str	r2, [sp, #4]
   1cc4c:	ldr	r2, [pc, #156]	; 1ccf0 <__assert_fail@plt+0xa5a4>
   1cc50:	add	r3, pc, r3
   1cc54:	str	r3, [sp]
   1cc58:	add	r2, pc, r2
   1cc5c:	mov	r1, #1
   1cc60:	mov	r3, r0
   1cc64:	mov	r0, r5
   1cc68:	bl	12578 <__fprintf_chk@plt>
   1cc6c:	ldr	r1, [pc, #128]	; 1ccf4 <__assert_fail@plt+0xa5a8>
   1cc70:	mov	r2, r6
   1cc74:	add	r1, pc, r1
   1cc78:	mov	r0, r4
   1cc7c:	bl	1c290 <__assert_fail@plt+0x9b44>
   1cc80:	b	1cc0c <__assert_fail@plt+0xa4c0>
   1cc84:	bl	1247c <__errno_location@plt>
   1cc88:	ldr	r3, [r0]
   1cc8c:	rsb	r3, r3, #0
   1cc90:	b	1cbe0 <__assert_fail@plt+0xa494>
   1cc94:	ldr	r3, [pc, #92]	; 1ccf8 <__assert_fail@plt+0xa5ac>
   1cc98:	ldr	r1, [pc, #92]	; 1ccfc <__assert_fail@plt+0xa5b0>
   1cc9c:	ldr	r0, [pc, #92]	; 1cd00 <__assert_fail@plt+0xa5b4>
   1cca0:	add	r3, pc, r3
   1cca4:	mov	r2, #201	; 0xc9
   1cca8:	add	r3, r3, #20
   1ccac:	add	r1, pc, r1
   1ccb0:	add	r0, pc, r0
   1ccb4:	bl	1274c <__assert_fail@plt>
   1ccb8:	ldr	r3, [pc, #68]	; 1cd04 <__assert_fail@plt+0xa5b8>
   1ccbc:	ldr	r1, [pc, #68]	; 1cd08 <__assert_fail@plt+0xa5bc>
   1ccc0:	ldr	r0, [pc, #68]	; 1cd0c <__assert_fail@plt+0xa5c0>
   1ccc4:	add	r3, pc, r3
   1ccc8:	mov	r2, #200	; 0xc8
   1cccc:	add	r3, r3, #20
   1ccd0:	add	r1, pc, r1
   1ccd4:	add	r0, pc, r0
   1ccd8:	bl	1274c <__assert_fail@plt>
   1ccdc:	andeq	r8, r1, ip, asr #3
   1cce0:	andeq	r8, r1, r4, lsl r6
   1cce4:	andeq	r0, r0, r0, ror #4
   1cce8:	andeq	r6, r0, ip, asr #30
   1ccec:	ldrdeq	r7, [r0], -r8
   1ccf0:	andeq	r6, r0, r8, lsr #30
   1ccf4:	andeq	r7, r0, r0, lsr r9
   1ccf8:	andeq	r7, r0, r8, asr #16
   1ccfc:	muleq	r0, r4, r8
   1cd00:	andeq	r7, r0, r4, ror #17
   1cd04:	andeq	r7, r0, r4, lsr #16
   1cd08:	andeq	r7, r0, r0, ror r8
   1cd0c:			; <UNDEFINED> instruction: 0x000078bc
   1cd10:	push	{r3}		; (str r3, [sp, #-4]!)
   1cd14:	ldr	r3, [pc, #340]	; 1ce70 <__assert_fail@plt+0xa724>
   1cd18:	ldr	ip, [pc, #340]	; 1ce74 <__assert_fail@plt+0xa728>
   1cd1c:	add	r3, pc, r3
   1cd20:	push	{r4, r5, r6, r7, r8, r9, lr}
   1cd24:	sub	sp, sp, #24
   1cd28:	ldr	r8, [r3, ip]
   1cd2c:	ldr	r7, [sp, #52]	; 0x34
   1cd30:	mov	r6, r2
   1cd34:	ldr	r2, [r8]
   1cd38:	cmp	r7, #0
   1cd3c:	mov	r4, r1
   1cd40:	str	r2, [sp, #20]
   1cd44:	beq	1ce30 <__assert_fail@plt+0xa6e4>
   1cd48:	add	r3, sp, #56	; 0x38
   1cd4c:	ldr	r5, [r0, #4]
   1cd50:	mov	r1, r7
   1cd54:	mov	r2, r3
   1cd58:	mov	r9, r0
   1cd5c:	str	r3, [sp, #16]
   1cd60:	bl	1c484 <__assert_fail@plt+0x9d38>
   1cd64:	cmp	r5, #0
   1cd68:	beq	1cd78 <__assert_fail@plt+0xa62c>
   1cd6c:	ldrsb	r3, [r5]
   1cd70:	cmp	r3, #47	; 0x2f
   1cd74:	addeq	r5, r5, #1
   1cd78:	cmp	r0, #0
   1cd7c:	beq	1cd8c <__assert_fail@plt+0xa640>
   1cd80:	ldrsb	r3, [r0]
   1cd84:	cmp	r3, #47	; 0x2f
   1cd88:	addeq	r0, r0, #1
   1cd8c:	ldr	r2, [r9, #12]
   1cd90:	cmp	r2, #0
   1cd94:	beq	1ce1c <__assert_fail@plt+0xa6d0>
   1cd98:	cmp	r5, #0
   1cd9c:	beq	1ce08 <__assert_fail@plt+0xa6bc>
   1cda0:	cmp	r0, #0
   1cda4:	beq	1cdfc <__assert_fail@plt+0xa6b0>
   1cda8:	ldr	r3, [pc, #200]	; 1ce78 <__assert_fail@plt+0xa72c>
   1cdac:	str	r0, [sp, #12]
   1cdb0:	add	r3, pc, r3
   1cdb4:	stmib	sp, {r2, r5}
   1cdb8:	str	r3, [sp]
   1cdbc:	mov	r2, #1
   1cdc0:	mvn	r3, #0
   1cdc4:	mov	r1, r6
   1cdc8:	mov	r0, r4
   1cdcc:	bl	12728 <__snprintf_chk@plt>
   1cdd0:	cmp	r0, r6
   1cdd4:	bcs	1ce58 <__assert_fail@plt+0xa70c>
   1cdd8:	ldr	r2, [sp, #20]
   1cddc:	ldr	r3, [r8]
   1cde0:	mov	r0, r4
   1cde4:	cmp	r2, r3
   1cde8:	bne	1ce6c <__assert_fail@plt+0xa720>
   1cdec:	add	sp, sp, #24
   1cdf0:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1cdf4:	add	sp, sp, #4
   1cdf8:	bx	lr
   1cdfc:	ldr	r0, [pc, #120]	; 1ce7c <__assert_fail@plt+0xa730>
   1ce00:	add	r0, pc, r0
   1ce04:	b	1cda8 <__assert_fail@plt+0xa65c>
   1ce08:	ldr	r5, [pc, #112]	; 1ce80 <__assert_fail@plt+0xa734>
   1ce0c:	cmp	r0, #0
   1ce10:	add	r5, pc, r5
   1ce14:	bne	1cda8 <__assert_fail@plt+0xa65c>
   1ce18:	b	1cdfc <__assert_fail@plt+0xa6b0>
   1ce1c:	ldr	r2, [pc, #96]	; 1ce84 <__assert_fail@plt+0xa738>
   1ce20:	cmp	r5, #0
   1ce24:	add	r2, pc, r2
   1ce28:	bne	1cda0 <__assert_fail@plt+0xa654>
   1ce2c:	b	1ce08 <__assert_fail@plt+0xa6bc>
   1ce30:	bl	1c3dc <__assert_fail@plt+0x9c90>
   1ce34:	subs	r1, r0, #0
   1ce38:	moveq	r4, r1
   1ce3c:	beq	1cdd8 <__assert_fail@plt+0xa68c>
   1ce40:	mov	r2, r6
   1ce44:	add	r6, r4, r6
   1ce48:	mov	r0, r4
   1ce4c:	bl	124e8 <strncpy@plt>
   1ce50:	strb	r7, [r6, #-1]
   1ce54:	b	1cdd8 <__assert_fail@plt+0xa68c>
   1ce58:	bl	1247c <__errno_location@plt>
   1ce5c:	mov	r3, #36	; 0x24
   1ce60:	mov	r4, #0
   1ce64:	str	r3, [r0]
   1ce68:	b	1cdd8 <__assert_fail@plt+0xa68c>
   1ce6c:	bl	12200 <__stack_chk_fail@plt>
   1ce70:	andeq	r8, r1, r0, ror r0
   1ce74:	andeq	r0, r0, ip, asr r2
   1ce78:	andeq	r7, r0, r8, lsl #16
   1ce7c:	andeq	r6, r0, r0, ror #20
   1ce80:	andeq	r6, r0, r0, asr sl
   1ce84:	andeq	r6, r0, ip, lsr sl
   1ce88:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ce8c:	sub	sp, sp, #20
   1ce90:	ldr	r5, [pc, #296]	; 1cfc0 <__assert_fail@plt+0xa874>
   1ce94:	ldr	r3, [pc, #296]	; 1cfc4 <__assert_fail@plt+0xa878>
   1ce98:	add	r5, pc, r5
   1ce9c:	mov	r8, r1
   1cea0:	ldr	r6, [r5, r3]
   1cea4:	mov	r7, r2
   1cea8:	mov	r9, r0
   1ceac:	ldr	r3, [r6]
   1ceb0:	str	r3, [sp, #12]
   1ceb4:	bl	1cbb0 <__assert_fail@plt+0xa464>
   1ceb8:	subs	r4, r0, #0
   1cebc:	str	r0, [sp, #8]
   1cec0:	blt	1cef4 <__assert_fail@plt+0xa7a8>
   1cec4:	ldr	r3, [pc, #252]	; 1cfc8 <__assert_fail@plt+0xa87c>
   1cec8:	add	r3, pc, r3
   1cecc:	ldr	r3, [r3]
   1ced0:	tst	r3, #4
   1ced4:	bne	1cf60 <__assert_fail@plt+0xa814>
   1ced8:	mov	r0, r4
   1cedc:	mov	r3, #0
   1cee0:	mov	r2, r8
   1cee4:	mov	r1, r7
   1cee8:	bl	12164 <faccessat@plt>
   1ceec:	subs	r4, r0, #0
   1cef0:	bne	1cf10 <__assert_fail@plt+0xa7c4>
   1cef4:	ldr	r2, [sp, #12]
   1cef8:	ldr	r3, [r6]
   1cefc:	mov	r0, r4
   1cf00:	cmp	r2, r3
   1cf04:	bne	1cfbc <__assert_fail@plt+0xa870>
   1cf08:	add	sp, sp, #20
   1cf0c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cf10:	bl	1247c <__errno_location@plt>
   1cf14:	ldr	r3, [r0]
   1cf18:	cmp	r3, #2
   1cf1c:	bne	1cef4 <__assert_fail@plt+0xa7a8>
   1cf20:	add	r3, r9, #4096	; 0x1000
   1cf24:	ldr	r3, [r3, #24]
   1cf28:	cmp	r3, #0
   1cf2c:	beq	1cef4 <__assert_fail@plt+0xa7a8>
   1cf30:	mov	r0, r9
   1cf34:	add	r2, sp, #8
   1cf38:	mov	r1, r7
   1cf3c:	blx	r3
   1cf40:	subs	r3, r0, #0
   1cf44:	bne	1cef4 <__assert_fail@plt+0xa7a8>
   1cf48:	mov	r2, r8
   1cf4c:	mov	r1, r7
   1cf50:	ldr	r0, [sp, #8]
   1cf54:	bl	12164 <faccessat@plt>
   1cf58:	mov	r4, r0
   1cf5c:	b	1cef4 <__assert_fail@plt+0xa7a8>
   1cf60:	ldr	r3, [pc, #100]	; 1cfcc <__assert_fail@plt+0xa880>
   1cf64:	ldr	r3, [r5, r3]
   1cf68:	ldr	r4, [r3]
   1cf6c:	bl	123ec <getpid@plt>
   1cf70:	ldr	r2, [pc, #88]	; 1cfd0 <__assert_fail@plt+0xa884>
   1cf74:	ldr	r3, [pc, #88]	; 1cfd4 <__assert_fail@plt+0xa888>
   1cf78:	add	r2, pc, r2
   1cf7c:	str	r2, [sp, #4]
   1cf80:	ldr	r2, [pc, #80]	; 1cfd8 <__assert_fail@plt+0xa88c>
   1cf84:	add	r3, pc, r3
   1cf88:	str	r3, [sp]
   1cf8c:	add	r2, pc, r2
   1cf90:	mov	r1, #1
   1cf94:	mov	r3, r0
   1cf98:	mov	r0, r4
   1cf9c:	bl	12578 <__fprintf_chk@plt>
   1cfa0:	ldr	r1, [pc, #52]	; 1cfdc <__assert_fail@plt+0xa890>
   1cfa4:	mov	r2, r7
   1cfa8:	add	r1, pc, r1
   1cfac:	mov	r0, r9
   1cfb0:	bl	1c290 <__assert_fail@plt+0x9b44>
   1cfb4:	ldr	r4, [sp, #8]
   1cfb8:	b	1ced8 <__assert_fail@plt+0xa78c>
   1cfbc:	bl	12200 <__stack_chk_fail@plt>
   1cfc0:	strdeq	r7, [r1], -r4
   1cfc4:	andeq	r0, r0, ip, asr r2
   1cfc8:	andeq	r8, r1, r8, asr #6
   1cfcc:	andeq	r0, r0, r0, ror #4
   1cfd0:	andeq	r6, r0, r8, lsl ip
   1cfd4:	andeq	r7, r0, r4, lsr #11
   1cfd8:	strdeq	r6, [r0], -r4
   1cfdc:	andeq	r7, r0, ip, lsl r6
   1cfe0:	push	{r2, r3}
   1cfe4:	ldr	r3, [pc, #104]	; 1d054 <__assert_fail@plt+0xa908>
   1cfe8:	ldr	r2, [pc, #104]	; 1d058 <__assert_fail@plt+0xa90c>
   1cfec:	add	r3, pc, r3
   1cff0:	push	{r4, r5, r6, lr}
   1cff4:	sub	sp, sp, #8
   1cff8:	ldr	r4, [r3, r2]
   1cffc:	add	ip, sp, #28
   1d000:	mov	r2, ip
   1d004:	ldr	r3, [r4]
   1d008:	mov	r6, r1
   1d00c:	ldr	r1, [sp, #24]
   1d010:	str	r3, [sp, #4]
   1d014:	mov	r5, r0
   1d018:	str	ip, [sp]
   1d01c:	bl	1c484 <__assert_fail@plt+0x9d38>
   1d020:	mov	r1, r6
   1d024:	mov	r2, r0
   1d028:	mov	r0, r5
   1d02c:	bl	1ce88 <__assert_fail@plt+0xa73c>
   1d030:	ldr	r2, [sp, #4]
   1d034:	ldr	r3, [r4]
   1d038:	cmp	r2, r3
   1d03c:	bne	1d050 <__assert_fail@plt+0xa904>
   1d040:	add	sp, sp, #8
   1d044:	pop	{r4, r5, r6, lr}
   1d048:	add	sp, sp, #8
   1d04c:	bx	lr
   1d050:	bl	12200 <__stack_chk_fail@plt>
   1d054:	andeq	r7, r1, r0, lsr #27
   1d058:	andeq	r0, r0, ip, asr r2
   1d05c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d060:	sub	sp, sp, #20
   1d064:	ldr	r5, [pc, #536]	; 1d284 <__assert_fail@plt+0xab38>
   1d068:	ldr	r3, [pc, #536]	; 1d288 <__assert_fail@plt+0xab3c>
   1d06c:	add	r5, pc, r5
   1d070:	subs	r8, r0, #0
   1d074:	ldr	r6, [r5, r3]
   1d078:	mov	r7, r2
   1d07c:	ldr	r3, [r6]
   1d080:	str	r3, [sp, #12]
   1d084:	beq	1d0e4 <__assert_fail@plt+0xa998>
   1d088:	mov	r9, r1
   1d08c:	bl	1cbb0 <__assert_fail@plt+0xa464>
   1d090:	cmp	r0, #0
   1d094:	mov	r4, r0
   1d098:	str	r0, [sp, #8]
   1d09c:	blt	1d0c8 <__assert_fail@plt+0xa97c>
   1d0a0:	mov	r2, r9
   1d0a4:	mov	r1, r7
   1d0a8:	bl	12188 <__openat64_2@plt>
   1d0ac:	subs	r4, r0, #0
   1d0b0:	blt	1d158 <__assert_fail@plt+0xaa0c>
   1d0b4:	ldr	r3, [pc, #464]	; 1d28c <__assert_fail@plt+0xab40>
   1d0b8:	add	r3, pc, r3
   1d0bc:	ldr	r3, [r3]
   1d0c0:	tst	r3, #4
   1d0c4:	bne	1d210 <__assert_fail@plt+0xaac4>
   1d0c8:	ldr	r2, [sp, #12]
   1d0cc:	ldr	r3, [r6]
   1d0d0:	mov	r0, r4
   1d0d4:	cmp	r2, r3
   1d0d8:	bne	1d278 <__assert_fail@plt+0xab2c>
   1d0dc:	add	sp, sp, #20
   1d0e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d0e4:	mov	r0, r2
   1d0e8:	bl	12470 <__open64_2@plt>
   1d0ec:	ldr	r3, [pc, #412]	; 1d290 <__assert_fail@plt+0xab44>
   1d0f0:	add	r3, pc, r3
   1d0f4:	ldr	r3, [r3]
   1d0f8:	tst	r3, #4
   1d0fc:	mov	r4, r0
   1d100:	beq	1d0c8 <__assert_fail@plt+0xa97c>
   1d104:	ldr	r3, [pc, #392]	; 1d294 <__assert_fail@plt+0xab48>
   1d108:	ldr	r3, [r5, r3]
   1d10c:	ldr	r5, [r3]
   1d110:	bl	123ec <getpid@plt>
   1d114:	ldr	r2, [pc, #380]	; 1d298 <__assert_fail@plt+0xab4c>
   1d118:	ldr	r3, [pc, #380]	; 1d29c <__assert_fail@plt+0xab50>
   1d11c:	add	r2, pc, r2
   1d120:	str	r2, [sp, #4]
   1d124:	ldr	r2, [pc, #372]	; 1d2a0 <__assert_fail@plt+0xab54>
   1d128:	add	r3, pc, r3
   1d12c:	str	r3, [sp]
   1d130:	add	r2, pc, r2
   1d134:	mov	r1, #1
   1d138:	mov	r3, r0
   1d13c:	mov	r0, r5
   1d140:	bl	12578 <__fprintf_chk@plt>
   1d144:	ldr	r0, [pc, #344]	; 1d2a4 <__assert_fail@plt+0xab58>
   1d148:	mov	r1, r7
   1d14c:	add	r0, pc, r0
   1d150:	bl	1c35c <__assert_fail@plt+0x9c10>
   1d154:	b	1d0c8 <__assert_fail@plt+0xa97c>
   1d158:	bl	1247c <__errno_location@plt>
   1d15c:	ldr	r3, [r0]
   1d160:	cmp	r3, #2
   1d164:	bne	1d0b4 <__assert_fail@plt+0xa968>
   1d168:	add	r3, r8, #4096	; 0x1000
   1d16c:	ldr	r3, [r3, #24]
   1d170:	cmp	r3, #0
   1d174:	beq	1d0b4 <__assert_fail@plt+0xa968>
   1d178:	add	r2, sp, #8
   1d17c:	mov	r1, r7
   1d180:	mov	r0, r8
   1d184:	blx	r3
   1d188:	cmp	r0, #0
   1d18c:	bne	1d0b4 <__assert_fail@plt+0xa968>
   1d190:	mov	r2, r9
   1d194:	mov	r1, r7
   1d198:	ldr	r0, [sp, #8]
   1d19c:	bl	12188 <__openat64_2@plt>
   1d1a0:	ldr	r3, [pc, #256]	; 1d2a8 <__assert_fail@plt+0xab5c>
   1d1a4:	add	r3, pc, r3
   1d1a8:	ldr	r3, [r3]
   1d1ac:	tst	r3, #4
   1d1b0:	mov	r9, r0
   1d1b4:	beq	1d27c <__assert_fail@plt+0xab30>
   1d1b8:	ldr	r3, [pc, #212]	; 1d294 <__assert_fail@plt+0xab48>
   1d1bc:	ldr	r3, [r5, r3]
   1d1c0:	ldr	r5, [r3]
   1d1c4:	bl	123ec <getpid@plt>
   1d1c8:	ldr	r2, [pc, #220]	; 1d2ac <__assert_fail@plt+0xab60>
   1d1cc:	ldr	r3, [pc, #220]	; 1d2b0 <__assert_fail@plt+0xab64>
   1d1d0:	add	r2, pc, r2
   1d1d4:	str	r2, [sp, #4]
   1d1d8:	ldr	r2, [pc, #212]	; 1d2b4 <__assert_fail@plt+0xab68>
   1d1dc:	add	r3, pc, r3
   1d1e0:	str	r3, [sp]
   1d1e4:	add	r2, pc, r2
   1d1e8:	mov	r1, #1
   1d1ec:	mov	r3, r0
   1d1f0:	mov	r0, r5
   1d1f4:	bl	12578 <__fprintf_chk@plt>
   1d1f8:	ldr	r3, [pc, #184]	; 1d2b8 <__assert_fail@plt+0xab6c>
   1d1fc:	cmp	r4, r9
   1d200:	add	r3, pc, r3
   1d204:	ldrne	r3, [pc, #176]	; 1d2bc <__assert_fail@plt+0xab70>
   1d208:	addne	r3, pc, r3
   1d20c:	b	1d25c <__assert_fail@plt+0xab10>
   1d210:	ldr	r3, [pc, #124]	; 1d294 <__assert_fail@plt+0xab48>
   1d214:	mov	r9, r4
   1d218:	ldr	r3, [r5, r3]
   1d21c:	ldr	r4, [r3]
   1d220:	bl	123ec <getpid@plt>
   1d224:	ldr	r2, [pc, #148]	; 1d2c0 <__assert_fail@plt+0xab74>
   1d228:	ldr	r3, [pc, #148]	; 1d2c4 <__assert_fail@plt+0xab78>
   1d22c:	add	r2, pc, r2
   1d230:	str	r2, [sp, #4]
   1d234:	ldr	r2, [pc, #140]	; 1d2c8 <__assert_fail@plt+0xab7c>
   1d238:	add	r3, pc, r3
   1d23c:	str	r3, [sp]
   1d240:	add	r2, pc, r2
   1d244:	mov	r1, #1
   1d248:	mov	r3, r0
   1d24c:	mov	r0, r4
   1d250:	bl	12578 <__fprintf_chk@plt>
   1d254:	ldr	r3, [pc, #112]	; 1d2cc <__assert_fail@plt+0xab80>
   1d258:	add	r3, pc, r3
   1d25c:	ldr	r1, [pc, #108]	; 1d2d0 <__assert_fail@plt+0xab84>
   1d260:	mov	r2, r7
   1d264:	mov	r0, r8
   1d268:	add	r1, pc, r1
   1d26c:	mov	r4, r9
   1d270:	bl	1c290 <__assert_fail@plt+0x9b44>
   1d274:	b	1d0c8 <__assert_fail@plt+0xa97c>
   1d278:	bl	12200 <__stack_chk_fail@plt>
   1d27c:	mov	r4, r0
   1d280:	b	1d0c8 <__assert_fail@plt+0xa97c>
   1d284:	andeq	r7, r1, r0, lsr #26
   1d288:	andeq	r0, r0, ip, asr r2
   1d28c:	andeq	r8, r1, r8, asr r1
   1d290:	andeq	r8, r1, r0, lsr #2
   1d294:	andeq	r0, r0, r0, ror #4
   1d298:	andeq	r6, r0, r4, ror sl
   1d29c:	andeq	r7, r0, r0, lsl #8
   1d2a0:	andeq	r6, r0, r0, asr sl
   1d2a4:	muleq	r0, r8, r4
   1d2a8:	andeq	r8, r1, ip, rrx
   1d2ac:	andeq	r6, r0, r0, asr #19
   1d2b0:	andeq	r7, r0, ip, asr #6
   1d2b4:	muleq	r0, ip, r9
   1d2b8:	andeq	r6, r0, r0, ror #12
   1d2bc:	andeq	r7, r0, ip, asr #7
   1d2c0:	andeq	r6, r0, r4, ror #18
   1d2c4:	strdeq	r7, [r0], -r0
   1d2c8:	andeq	r6, r0, r0, asr #18
   1d2cc:	andeq	r6, r0, r8, lsl #12
   1d2d0:	andeq	r7, r0, ip, lsl #7
   1d2d4:	mov	ip, r2
   1d2d8:	push	{r4, r5, r6, lr}
   1d2dc:	mov	r2, r3
   1d2e0:	mov	r5, r1
   1d2e4:	mov	r1, ip
   1d2e8:	mov	r4, r0
   1d2ec:	bl	1c484 <__assert_fail@plt+0x9d38>
   1d2f0:	subs	r2, r0, #0
   1d2f4:	beq	1d308 <__assert_fail@plt+0xabbc>
   1d2f8:	mov	r1, r5
   1d2fc:	mov	r0, r4
   1d300:	pop	{r4, r5, r6, lr}
   1d304:	b	1d05c <__assert_fail@plt+0xa910>
   1d308:	bl	1247c <__errno_location@plt>
   1d30c:	ldr	r0, [r0]
   1d310:	rsb	r0, r0, #0
   1d314:	pop	{r4, r5, r6, pc}
   1d318:	push	{r2, r3}
   1d31c:	ldr	r2, [pc, #80]	; 1d374 <__assert_fail@plt+0xac28>
   1d320:	ldr	ip, [pc, #80]	; 1d378 <__assert_fail@plt+0xac2c>
   1d324:	add	r2, pc, r2
   1d328:	push	{r4, lr}
   1d32c:	sub	sp, sp, #8
   1d330:	ldr	r4, [r2, ip]
   1d334:	add	lr, sp, #20
   1d338:	mov	r3, lr
   1d33c:	ldr	ip, [r4]
   1d340:	ldr	r2, [sp, #16]
   1d344:	str	lr, [sp]
   1d348:	str	ip, [sp, #4]
   1d34c:	bl	1d2d4 <__assert_fail@plt+0xab88>
   1d350:	ldr	r2, [sp, #4]
   1d354:	ldr	r3, [r4]
   1d358:	cmp	r2, r3
   1d35c:	bne	1d370 <__assert_fail@plt+0xac24>
   1d360:	add	sp, sp, #8
   1d364:	pop	{r4, lr}
   1d368:	add	sp, sp, #8
   1d36c:	bx	lr
   1d370:	bl	12200 <__stack_chk_fail@plt>
   1d374:	andeq	r7, r1, r8, ror #20
   1d378:	andeq	r0, r0, ip, asr r2
   1d37c:	push	{r4, r5, r6, r7, r8, lr}
   1d380:	subs	r4, r1, #0
   1d384:	beq	1d440 <__assert_fail@plt+0xacf4>
   1d388:	ldrsb	r3, [r4]
   1d38c:	cmp	r3, #0
   1d390:	beq	1d448 <__assert_fail@plt+0xacfc>
   1d394:	ldr	r5, [pc, #180]	; 1d450 <__assert_fail@plt+0xad04>
   1d398:	ldr	r7, [pc, #180]	; 1d454 <__assert_fail@plt+0xad08>
   1d39c:	ldr	lr, [pc, #180]	; 1d458 <__assert_fail@plt+0xad0c>
   1d3a0:	ldr	r6, [pc, #180]	; 1d45c <__assert_fail@plt+0xad10>
   1d3a4:	mov	ip, r4
   1d3a8:	mov	r1, #0
   1d3ac:	b	1d3dc <__assert_fail@plt+0xac90>
   1d3b0:	cmp	r3, #119	; 0x77
   1d3b4:	beq	1d410 <__assert_fail@plt+0xacc4>
   1d3b8:	cmp	r3, #97	; 0x61
   1d3bc:	beq	1d424 <__assert_fail@plt+0xacd8>
   1d3c0:	cmp	r3, #101	; 0x65
   1d3c4:	orreq	r1, r1, #524288	; 0x80000
   1d3c8:	cmn	ip, #1
   1d3cc:	beq	1d3f8 <__assert_fail@plt+0xacac>
   1d3d0:	ldrsb	r3, [ip, #1]!
   1d3d4:	cmp	r3, #0
   1d3d8:	beq	1d3f8 <__assert_fail@plt+0xacac>
   1d3dc:	cmp	r3, #114	; 0x72
   1d3e0:	bne	1d3b0 <__assert_fail@plt+0xac64>
   1d3e4:	ldrsb	r3, [ip, #1]
   1d3e8:	cmp	r3, #43	; 0x2b
   1d3ec:	orreq	r1, r1, #2
   1d3f0:	cmn	ip, #1
   1d3f4:	bne	1d3d0 <__assert_fail@plt+0xac84>
   1d3f8:	bl	1d05c <__assert_fail@plt+0xa910>
   1d3fc:	cmp	r0, #0
   1d400:	blt	1d438 <__assert_fail@plt+0xacec>
   1d404:	mov	r1, r4
   1d408:	pop	{r4, r5, r6, r7, r8, lr}
   1d40c:	b	12068 <fdopen@plt>
   1d410:	ldrsb	r3, [ip, #1]
   1d414:	cmp	r3, #43	; 0x2b
   1d418:	orreq	r1, r1, r6
   1d41c:	orrne	r1, r1, lr
   1d420:	b	1d3c8 <__assert_fail@plt+0xac7c>
   1d424:	ldrsb	r3, [ip, #1]
   1d428:	cmp	r3, #43	; 0x2b
   1d42c:	orreq	r1, r1, r7
   1d430:	orrne	r1, r1, r5
   1d434:	b	1d3c8 <__assert_fail@plt+0xac7c>
   1d438:	mov	r0, #0
   1d43c:	pop	{r4, r5, r6, r7, r8, pc}
   1d440:	mov	r1, r4
   1d444:	b	1d3f8 <__assert_fail@plt+0xacac>
   1d448:	mov	r1, r3
   1d44c:	b	1d3f8 <__assert_fail@plt+0xacac>
   1d450:	andeq	r0, r0, r1, lsl #8
   1d454:	andeq	r0, r0, r2, lsl #8
   1d458:	andeq	r0, r0, r1, lsl #4
   1d45c:	andeq	r0, r0, r2, lsl #4
   1d460:	mov	ip, r2
   1d464:	push	{r4, r5, r6, lr}
   1d468:	mov	r2, r3
   1d46c:	mov	r5, r1
   1d470:	mov	r1, ip
   1d474:	mov	r4, r0
   1d478:	bl	1c484 <__assert_fail@plt+0x9d38>
   1d47c:	subs	r2, r0, #0
   1d480:	popeq	{r4, r5, r6, pc}
   1d484:	mov	r1, r5
   1d488:	mov	r0, r4
   1d48c:	pop	{r4, r5, r6, lr}
   1d490:	b	1d37c <__assert_fail@plt+0xac30>
   1d494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d498:	add	fp, sp, #32
   1d49c:	ldr	lr, [pc, #300]	; 1d5d0 <__assert_fail@plt+0xae84>
   1d4a0:	ldr	ip, [pc, #300]	; 1d5d4 <__assert_fail@plt+0xae88>
   1d4a4:	add	lr, pc, lr
   1d4a8:	sub	sp, sp, #20
   1d4ac:	ldr	ip, [lr, ip]
   1d4b0:	rsb	r6, r2, r2, lsl #3
   1d4b4:	mov	r7, r1
   1d4b8:	mov	r4, r2
   1d4bc:	mov	r1, lr
   1d4c0:	add	r2, r6, #7
   1d4c4:	ldr	r1, [pc, #268]	; 1d5d8 <__assert_fail@plt+0xae8c>
   1d4c8:	str	ip, [fp, #-48]	; 0xffffffd0
   1d4cc:	bic	r2, r2, #7
   1d4d0:	ldr	ip, [ip]
   1d4d4:	mov	r8, #0
   1d4d8:	sub	sp, sp, r2
   1d4dc:	mov	r9, r3
   1d4e0:	str	r8, [r7]
   1d4e4:	ldrd	r2, [fp, #4]
   1d4e8:	add	r1, pc, r1
   1d4ec:	str	ip, [fp, #-40]	; 0xffffffd8
   1d4f0:	bl	1d460 <__assert_fail@plt+0xad14>
   1d4f4:	subs	r5, r0, #0
   1d4f8:	beq	1d5b4 <__assert_fail@plt+0xae68>
   1d4fc:	mov	r1, r6
   1d500:	mov	r2, r5
   1d504:	mov	r0, sp
   1d508:	bl	12140 <fgets@plt>
   1d50c:	cmp	r0, #0
   1d510:	beq	1d5b4 <__assert_fail@plt+0xae68>
   1d514:	mov	r0, r5
   1d518:	bl	12590 <fclose@plt>
   1d51c:	mov	r0, sp
   1d520:	bl	12428 <strlen@plt>
   1d524:	mov	r2, #0
   1d528:	sub	r1, fp, #44	; 0x2c
   1d52c:	mov	sl, sp
   1d530:	sub	r0, r0, #1
   1d534:	ldrsb	r3, [sp, r0]
   1d538:	cmp	r3, #10
   1d53c:	strbeq	r8, [sp, r0]
   1d540:	mov	r0, r4
   1d544:	bl	22048 <__assert_fail@plt+0xf8fc>
   1d548:	cmp	r0, #0
   1d54c:	str	r0, [r7]
   1d550:	beq	1d5c4 <__assert_fail@plt+0xae78>
   1d554:	cmp	r9, #0
   1d558:	mov	r1, r0
   1d55c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1d560:	mov	r0, sl
   1d564:	bne	1d594 <__assert_fail@plt+0xae48>
   1d568:	bl	22478 <__assert_fail@plt+0xfd2c>
   1d56c:	cmp	r0, #0
   1d570:	bne	1d5a4 <__assert_fail@plt+0xae58>
   1d574:	mov	r0, #0
   1d578:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1d57c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1d580:	ldr	r3, [r3]
   1d584:	cmp	r2, r3
   1d588:	bne	1d5cc <__assert_fail@plt+0xae80>
   1d58c:	sub	sp, fp, #32
   1d590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d594:	mov	r3, #0
   1d598:	bl	225d0 <__assert_fail@plt+0xfe84>
   1d59c:	cmp	r0, #0
   1d5a0:	beq	1d574 <__assert_fail@plt+0xae28>
   1d5a4:	ldr	r0, [r7]
   1d5a8:	bl	2208c <__assert_fail@plt+0xf940>
   1d5ac:	mvn	r0, #21
   1d5b0:	b	1d578 <__assert_fail@plt+0xae2c>
   1d5b4:	bl	1247c <__errno_location@plt>
   1d5b8:	ldr	r0, [r0]
   1d5bc:	rsb	r0, r0, #0
   1d5c0:	b	1d578 <__assert_fail@plt+0xae2c>
   1d5c4:	mvn	r0, #11
   1d5c8:	b	1d578 <__assert_fail@plt+0xae2c>
   1d5cc:	bl	12200 <__stack_chk_fail@plt>
   1d5d0:	andeq	r7, r1, r8, ror #17
   1d5d4:	andeq	r0, r0, ip, asr r2
   1d5d8:	andeq	r6, r0, r4, ror r9
   1d5dc:	push	{r2, r3}
   1d5e0:	ldr	r2, [pc, #80]	; 1d638 <__assert_fail@plt+0xaeec>
   1d5e4:	ldr	ip, [pc, #80]	; 1d63c <__assert_fail@plt+0xaef0>
   1d5e8:	add	r2, pc, r2
   1d5ec:	push	{r4, lr}
   1d5f0:	sub	sp, sp, #8
   1d5f4:	ldr	r4, [r2, ip]
   1d5f8:	add	lr, sp, #20
   1d5fc:	mov	r3, lr
   1d600:	ldr	ip, [r4]
   1d604:	ldr	r2, [sp, #16]
   1d608:	str	lr, [sp]
   1d60c:	str	ip, [sp, #4]
   1d610:	bl	1d460 <__assert_fail@plt+0xad14>
   1d614:	ldr	r2, [sp, #4]
   1d618:	ldr	r3, [r4]
   1d61c:	cmp	r2, r3
   1d620:	bne	1d634 <__assert_fail@plt+0xaee8>
   1d624:	add	sp, sp, #8
   1d628:	pop	{r4, lr}
   1d62c:	add	sp, sp, #8
   1d630:	bx	lr
   1d634:	bl	12200 <__stack_chk_fail@plt>
   1d638:	andeq	r7, r1, r4, lsr #15
   1d63c:	andeq	r0, r0, ip, asr r2
   1d640:	ldr	r3, [pc, #268]	; 1d754 <__assert_fail@plt+0xb008>
   1d644:	push	{r4, r5, r6, lr}
   1d648:	subs	r5, r1, #0
   1d64c:	sub	sp, sp, #8
   1d650:	add	r3, pc, r3
   1d654:	beq	1d694 <__assert_fail@plt+0xaf48>
   1d658:	mov	r2, r5
   1d65c:	mov	r1, #524288	; 0x80000
   1d660:	bl	1d05c <__assert_fail@plt+0xa910>
   1d664:	mov	r4, r0
   1d668:	cmp	r4, #0
   1d66c:	blt	1d6d4 <__assert_fail@plt+0xaf88>
   1d670:	mov	r0, r4
   1d674:	bl	12650 <fdopendir@plt>
   1d678:	subs	r6, r0, #0
   1d67c:	beq	1d748 <__assert_fail@plt+0xaffc>
   1d680:	cmp	r5, #0
   1d684:	beq	1d738 <__assert_fail@plt+0xafec>
   1d688:	mov	r0, r6
   1d68c:	add	sp, sp, #8
   1d690:	pop	{r4, r5, r6, pc}
   1d694:	ldr	r2, [r0, #4]
   1d698:	mov	r4, r0
   1d69c:	cmp	r2, #0
   1d6a0:	beq	1d6d4 <__assert_fail@plt+0xaf88>
   1d6a4:	ldr	r2, [pc, #172]	; 1d758 <__assert_fail@plt+0xb00c>
   1d6a8:	add	r2, pc, r2
   1d6ac:	ldr	r2, [r2]
   1d6b0:	tst	r2, #4
   1d6b4:	bne	1d6e4 <__assert_fail@plt+0xaf98>
   1d6b8:	mov	r0, r4
   1d6bc:	bl	1cbb0 <__assert_fail@plt+0xa464>
   1d6c0:	mov	r1, #3
   1d6c4:	bl	21d9c <__assert_fail@plt+0xf650>
   1d6c8:	mov	r4, r0
   1d6cc:	cmp	r4, #0
   1d6d0:	bge	1d670 <__assert_fail@plt+0xaf24>
   1d6d4:	mov	r6, #0
   1d6d8:	mov	r0, r6
   1d6dc:	add	sp, sp, #8
   1d6e0:	pop	{r4, r5, r6, pc}
   1d6e4:	ldr	r2, [pc, #112]	; 1d75c <__assert_fail@plt+0xb010>
   1d6e8:	ldr	r3, [r3, r2]
   1d6ec:	ldr	r6, [r3]
   1d6f0:	bl	123ec <getpid@plt>
   1d6f4:	ldr	r2, [pc, #100]	; 1d760 <__assert_fail@plt+0xb014>
   1d6f8:	ldr	r3, [pc, #100]	; 1d764 <__assert_fail@plt+0xb018>
   1d6fc:	add	r2, pc, r2
   1d700:	str	r2, [sp, #4]
   1d704:	ldr	r2, [pc, #92]	; 1d768 <__assert_fail@plt+0xb01c>
   1d708:	add	r3, pc, r3
   1d70c:	str	r3, [sp]
   1d710:	add	r2, pc, r2
   1d714:	mov	r1, #1
   1d718:	mov	r3, r0
   1d71c:	mov	r0, r6
   1d720:	bl	12578 <__fprintf_chk@plt>
   1d724:	ldr	r1, [pc, #64]	; 1d76c <__assert_fail@plt+0xb020>
   1d728:	mov	r0, r4
   1d72c:	add	r1, pc, r1
   1d730:	bl	1c290 <__assert_fail@plt+0x9b44>
   1d734:	b	1d6b8 <__assert_fail@plt+0xaf6c>
   1d738:	bl	120d4 <rewinddir@plt>
   1d73c:	mov	r0, r6
   1d740:	add	sp, sp, #8
   1d744:	pop	{r4, r5, r6, pc}
   1d748:	mov	r0, r4
   1d74c:	bl	12704 <close@plt>
   1d750:	b	1d688 <__assert_fail@plt+0xaf3c>
   1d754:	andeq	r7, r1, ip, lsr r7
   1d758:	andeq	r7, r1, r8, ror #22
   1d75c:	andeq	r0, r0, r0, ror #4
   1d760:	muleq	r0, r4, r4
   1d764:	andeq	r6, r0, r0, lsr #28
   1d768:	andeq	r6, r0, r0, ror r4
   1d76c:	ldrdeq	r6, [r0], -r8
   1d770:	push	{r4, lr}
   1d774:	mov	r4, r0
   1d778:	bl	1c484 <__assert_fail@plt+0x9d38>
   1d77c:	subs	r1, r0, #0
   1d780:	popeq	{r4, pc}
   1d784:	mov	r0, r4
   1d788:	pop	{r4, lr}
   1d78c:	b	1d640 <__assert_fail@plt+0xaef4>
   1d790:	push	{r1, r2, r3}
   1d794:	ldr	r3, [pc, #80]	; 1d7ec <__assert_fail@plt+0xb0a0>
   1d798:	ldr	r1, [pc, #80]	; 1d7f0 <__assert_fail@plt+0xb0a4>
   1d79c:	add	r3, pc, r3
   1d7a0:	push	{r4, lr}
   1d7a4:	sub	sp, sp, #12
   1d7a8:	ldr	r4, [r3, r1]
   1d7ac:	add	ip, sp, #24
   1d7b0:	mov	r2, ip
   1d7b4:	ldr	r3, [r4]
   1d7b8:	ldr	r1, [sp, #20]
   1d7bc:	str	r3, [sp, #4]
   1d7c0:	str	ip, [sp]
   1d7c4:	bl	1d770 <__assert_fail@plt+0xb024>
   1d7c8:	ldr	r2, [sp, #4]
   1d7cc:	ldr	r3, [r4]
   1d7d0:	cmp	r2, r3
   1d7d4:	bne	1d7e8 <__assert_fail@plt+0xb09c>
   1d7d8:	add	sp, sp, #12
   1d7dc:	pop	{r4, lr}
   1d7e0:	add	sp, sp, #12
   1d7e4:	bx	lr
   1d7e8:	bl	12200 <__stack_chk_fail@plt>
   1d7ec:	strdeq	r7, [r1], -r0
   1d7f0:	andeq	r0, r0, ip, asr r2
   1d7f4:	push	{r4, r5, r6, lr}
   1d7f8:	subs	r6, r3, #0
   1d7fc:	mov	r4, r1
   1d800:	mov	r5, r2
   1d804:	beq	1d828 <__assert_fail@plt+0xb0dc>
   1d808:	bl	1cbb0 <__assert_fail@plt+0xa464>
   1d80c:	subs	r3, r0, #0
   1d810:	blt	1d850 <__assert_fail@plt+0xb104>
   1d814:	mov	r3, r5
   1d818:	mov	r2, r4
   1d81c:	mov	r1, r6
   1d820:	pop	{r4, r5, r6, lr}
   1d824:	b	12368 <readlinkat@plt>
   1d828:	bl	1c3dc <__assert_fail@plt+0x9c90>
   1d82c:	cmp	r0, #0
   1d830:	beq	1d844 <__assert_fail@plt+0xb0f8>
   1d834:	mov	r2, r5
   1d838:	mov	r1, r4
   1d83c:	pop	{r4, r5, r6, lr}
   1d840:	b	12284 <readlink@plt>
   1d844:	bl	1247c <__errno_location@plt>
   1d848:	ldr	r3, [r0]
   1d84c:	rsb	r3, r3, #0
   1d850:	mov	r0, r3
   1d854:	pop	{r4, r5, r6, pc}
   1d858:	push	{r3}		; (str r3, [sp, #-4]!)
   1d85c:	ldr	r3, [pc, #132]	; 1d8e8 <__assert_fail@plt+0xb19c>
   1d860:	ldr	ip, [pc, #132]	; 1d8ec <__assert_fail@plt+0xb1a0>
   1d864:	add	r3, pc, r3
   1d868:	push	{r4, r5, r6, r7, lr}
   1d86c:	sub	sp, sp, #8
   1d870:	ldr	r4, [r3, ip]
   1d874:	add	lr, sp, #32
   1d878:	mov	r5, r1
   1d87c:	ldr	ip, [r4]
   1d880:	mov	r7, r2
   1d884:	ldr	r1, [sp, #28]
   1d888:	mov	r2, lr
   1d88c:	str	ip, [sp, #4]
   1d890:	str	lr, [sp]
   1d894:	mov	r6, r0
   1d898:	bl	1c484 <__assert_fail@plt+0x9d38>
   1d89c:	subs	r3, r0, #0
   1d8a0:	beq	1d8d4 <__assert_fail@plt+0xb188>
   1d8a4:	mov	r2, r7
   1d8a8:	mov	r1, r5
   1d8ac:	mov	r0, r6
   1d8b0:	bl	1d7f4 <__assert_fail@plt+0xb0a8>
   1d8b4:	ldr	r2, [sp, #4]
   1d8b8:	ldr	r3, [r4]
   1d8bc:	cmp	r2, r3
   1d8c0:	bne	1d8e4 <__assert_fail@plt+0xb198>
   1d8c4:	add	sp, sp, #8
   1d8c8:	pop	{r4, r5, r6, r7, lr}
   1d8cc:	add	sp, sp, #4
   1d8d0:	bx	lr
   1d8d4:	bl	1247c <__errno_location@plt>
   1d8d8:	ldr	r0, [r0]
   1d8dc:	rsb	r0, r0, #0
   1d8e0:	b	1d8b4 <__assert_fail@plt+0xb168>
   1d8e4:	bl	12200 <__stack_chk_fail@plt>
   1d8e8:	andeq	r7, r1, r8, lsr #10
   1d8ec:	andeq	r0, r0, ip, asr r2
   1d8f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8f4:	mov	r9, r3
   1d8f8:	ldr	r4, [pc, #400]	; 1da90 <__assert_fail@plt+0xb344>
   1d8fc:	ldr	ip, [pc, #400]	; 1da94 <__assert_fail@plt+0xb348>
   1d900:	add	r4, pc, r4
   1d904:	sub	sp, sp, #36	; 0x24
   1d908:	ldr	r3, [r4, ip]
   1d90c:	mov	r6, r1
   1d910:	str	r3, [sp, #12]
   1d914:	ldr	r3, [r3]
   1d918:	mov	r1, #524288	; 0x80000
   1d91c:	mov	r5, r2
   1d920:	mov	r2, r9
   1d924:	str	r3, [sp, #28]
   1d928:	bl	1d05c <__assert_fail@plt+0xa910>
   1d92c:	mov	r7, r0
   1d930:	bl	1247c <__errno_location@plt>
   1d934:	cmp	r7, #0
   1d938:	mov	r8, r0
   1d93c:	blt	1da6c <__assert_fail@plt+0xb320>
   1d940:	ldr	r3, [pc, #336]	; 1da98 <__assert_fail@plt+0xb34c>
   1d944:	add	r3, pc, r3
   1d948:	ldr	r3, [r3]
   1d94c:	tst	r3, #4
   1d950:	bne	1d9f8 <__assert_fail@plt+0xb2ac>
   1d954:	mov	r2, r5
   1d958:	mov	r1, #0
   1d95c:	mov	r0, r6
   1d960:	bl	124dc <memset@plt>
   1d964:	cmp	r5, #0
   1d968:	movne	r4, #0
   1d96c:	movne	fp, r4
   1d970:	addne	r9, sp, #20
   1d974:	beq	1da80 <__assert_fail@plt+0xb334>
   1d978:	mov	r2, r5
   1d97c:	mov	r1, r6
   1d980:	mov	r0, r7
   1d984:	bl	12104 <read@plt>
   1d988:	cmp	r0, #0
   1d98c:	ble	1d9a8 <__assert_fail@plt+0xb25c>
   1d990:	subs	r5, r5, r0
   1d994:	add	r6, r6, r0
   1d998:	add	r4, r4, r0
   1d99c:	beq	1da78 <__assert_fail@plt+0xb32c>
   1d9a0:	mov	fp, #0
   1d9a4:	b	1d978 <__assert_fail@plt+0xb22c>
   1d9a8:	ldr	sl, [r8]
   1d9ac:	beq	1d9c4 <__assert_fail@plt+0xb278>
   1d9b0:	cmp	sl, #4
   1d9b4:	cmpne	sl, #11
   1d9b8:	bne	1d9c4 <__assert_fail@plt+0xb278>
   1d9bc:	cmp	fp, #4
   1d9c0:	ble	1da4c <__assert_fail@plt+0xb300>
   1d9c4:	cmp	r4, #0
   1d9c8:	mvneq	r4, #0
   1d9cc:	mov	r0, r7
   1d9d0:	bl	12704 <close@plt>
   1d9d4:	str	sl, [r8]
   1d9d8:	ldr	r3, [sp, #12]
   1d9dc:	ldr	r2, [sp, #28]
   1d9e0:	mov	r0, r4
   1d9e4:	ldr	r3, [r3]
   1d9e8:	cmp	r2, r3
   1d9ec:	bne	1da8c <__assert_fail@plt+0xb340>
   1d9f0:	add	sp, sp, #36	; 0x24
   1d9f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9f8:	ldr	r3, [pc, #156]	; 1da9c <__assert_fail@plt+0xb350>
   1d9fc:	ldr	r3, [r4, r3]
   1da00:	ldr	r4, [r3]
   1da04:	bl	123ec <getpid@plt>
   1da08:	ldr	r2, [pc, #144]	; 1daa0 <__assert_fail@plt+0xb354>
   1da0c:	ldr	r3, [pc, #144]	; 1daa4 <__assert_fail@plt+0xb358>
   1da10:	add	r2, pc, r2
   1da14:	str	r2, [sp, #4]
   1da18:	ldr	r2, [pc, #136]	; 1daa8 <__assert_fail@plt+0xb35c>
   1da1c:	add	r3, pc, r3
   1da20:	str	r3, [sp]
   1da24:	add	r2, pc, r2
   1da28:	mov	r1, #1
   1da2c:	mov	r3, r0
   1da30:	mov	r0, r4
   1da34:	bl	12578 <__fprintf_chk@plt>
   1da38:	ldr	r0, [pc, #108]	; 1daac <__assert_fail@plt+0xb360>
   1da3c:	mov	r1, r9
   1da40:	add	r0, pc, r0
   1da44:	bl	1c35c <__assert_fail@plt+0x9c10>
   1da48:	b	1d954 <__assert_fail@plt+0xb208>
   1da4c:	ldr	r3, [pc, #92]	; 1dab0 <__assert_fail@plt+0xb364>
   1da50:	mov	r1, #0
   1da54:	mov	r0, r9
   1da58:	add	fp, fp, #1
   1da5c:	str	r1, [sp, #20]
   1da60:	str	r3, [sp, #24]
   1da64:	bl	1214c <nanosleep@plt>
   1da68:	b	1d978 <__assert_fail@plt+0xb22c>
   1da6c:	ldr	r4, [r0]
   1da70:	rsb	r4, r4, #0
   1da74:	b	1d9d8 <__assert_fail@plt+0xb28c>
   1da78:	ldr	sl, [r8]
   1da7c:	b	1d9cc <__assert_fail@plt+0xb280>
   1da80:	ldr	sl, [r8]
   1da84:	mov	r4, r5
   1da88:	b	1d9cc <__assert_fail@plt+0xb280>
   1da8c:	bl	12200 <__stack_chk_fail@plt>
   1da90:	andeq	r7, r1, ip, lsl #9
   1da94:	andeq	r0, r0, ip, asr r2
   1da98:	andeq	r7, r1, ip, asr #17
   1da9c:	andeq	r0, r0, r0, ror #4
   1daa0:	andeq	r6, r0, r0, lsl #3
   1daa4:	andeq	r6, r0, ip, lsl #22
   1daa8:	andeq	r6, r0, ip, asr r1
   1daac:	ldrdeq	r6, [r0], -r8
   1dab0:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1dab4:	push	{r4, r5, r6, lr}
   1dab8:	mov	r5, r1
   1dabc:	mov	r6, r2
   1dac0:	mov	r1, r3
   1dac4:	ldr	r2, [sp, #16]
   1dac8:	mov	r4, r0
   1dacc:	bl	1c484 <__assert_fail@plt+0x9d38>
   1dad0:	subs	r3, r0, #0
   1dad4:	beq	1daec <__assert_fail@plt+0xb3a0>
   1dad8:	mov	r2, r6
   1dadc:	mov	r1, r5
   1dae0:	mov	r0, r4
   1dae4:	pop	{r4, r5, r6, lr}
   1dae8:	b	1d8f0 <__assert_fail@plt+0xb1a4>
   1daec:	mvn	r0, #21
   1daf0:	pop	{r4, r5, r6, pc}
   1daf4:	push	{r3}		; (str r3, [sp, #-4]!)
   1daf8:	ldr	r3, [pc, #80]	; 1db50 <__assert_fail@plt+0xb404>
   1dafc:	ldr	ip, [pc, #80]	; 1db54 <__assert_fail@plt+0xb408>
   1db00:	add	r3, pc, r3
   1db04:	push	{r4, lr}
   1db08:	sub	sp, sp, #20
   1db0c:	ldr	r4, [r3, ip]
   1db10:	add	lr, sp, #32
   1db14:	str	lr, [sp]
   1db18:	ldr	ip, [r4]
   1db1c:	ldr	r3, [sp, #28]
   1db20:	str	lr, [sp, #8]
   1db24:	str	ip, [sp, #12]
   1db28:	bl	1dab4 <__assert_fail@plt+0xb368>
   1db2c:	ldr	r2, [sp, #12]
   1db30:	ldr	r3, [r4]
   1db34:	cmp	r2, r3
   1db38:	bne	1db4c <__assert_fail@plt+0xb400>
   1db3c:	add	sp, sp, #20
   1db40:	pop	{r4, lr}
   1db44:	add	sp, sp, #4
   1db48:	bx	lr
   1db4c:	bl	12200 <__stack_chk_fail@plt>
   1db50:	andeq	r7, r1, ip, lsl #5
   1db54:	andeq	r0, r0, ip, asr r2
   1db58:	ldr	ip, [pc, #176]	; 1dc10 <__assert_fail@plt+0xb4c4>
   1db5c:	ldr	r3, [pc, #176]	; 1dc14 <__assert_fail@plt+0xb4c8>
   1db60:	add	ip, pc, ip
   1db64:	push	{r4, r5, r6, r7, r8, lr}
   1db68:	sub	sp, sp, #8192	; 0x2000
   1db6c:	ldr	r7, [ip, r3]
   1db70:	sub	sp, sp, #8
   1db74:	mov	r6, r1
   1db78:	add	r5, sp, #8
   1db7c:	add	ip, sp, #8192	; 0x2000
   1db80:	ldr	lr, [r7]
   1db84:	mov	r1, #0
   1db88:	add	ip, ip, #4
   1db8c:	sub	r8, r5, #4
   1db90:	mov	r3, r2
   1db94:	str	r1, [r6]
   1db98:	ldr	r2, [pc, #120]	; 1dc18 <__assert_fail@plt+0xb4cc>
   1db9c:	mov	r1, r8
   1dba0:	str	lr, [ip]
   1dba4:	bl	1d8f0 <__assert_fail@plt+0xb1a4>
   1dba8:	subs	r4, r0, #0
   1dbac:	blt	1dbe4 <__assert_fail@plt+0xb498>
   1dbb0:	beq	1dbc4 <__assert_fail@plt+0xb478>
   1dbb4:	sub	r3, r5, #5
   1dbb8:	ldrsb	r3, [r3, r4]
   1dbbc:	cmp	r3, #10
   1dbc0:	subeq	r4, r4, #1
   1dbc4:	add	r5, r5, r4
   1dbc8:	mov	r3, #0
   1dbcc:	mov	r0, r8
   1dbd0:	strb	r3, [r5, #-4]
   1dbd4:	bl	121f4 <strdup@plt>
   1dbd8:	cmp	r0, #0
   1dbdc:	mvneq	r4, #11
   1dbe0:	str	r0, [r6]
   1dbe4:	add	r3, sp, #8192	; 0x2000
   1dbe8:	add	r3, r3, #4
   1dbec:	ldr	r2, [r3]
   1dbf0:	ldr	r3, [r7]
   1dbf4:	mov	r0, r4
   1dbf8:	cmp	r2, r3
   1dbfc:	bne	1dc0c <__assert_fail@plt+0xb4c0>
   1dc00:	add	sp, sp, #8192	; 0x2000
   1dc04:	add	sp, sp, #8
   1dc08:	pop	{r4, r5, r6, r7, r8, pc}
   1dc0c:	bl	12200 <__stack_chk_fail@plt>
   1dc10:	andeq	r7, r1, ip, lsr #4
   1dc14:	andeq	r0, r0, ip, asr r2
   1dc18:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   1dc1c:	push	{r2, r3}
   1dc20:	ldr	r3, [pc, #116]	; 1dc9c <__assert_fail@plt+0xb550>
   1dc24:	ldr	r2, [pc, #116]	; 1dca0 <__assert_fail@plt+0xb554>
   1dc28:	add	r3, pc, r3
   1dc2c:	push	{r4, r5, r6, lr}
   1dc30:	sub	sp, sp, #8
   1dc34:	ldr	r4, [r3, r2]
   1dc38:	add	ip, sp, #28
   1dc3c:	mov	r2, ip
   1dc40:	ldr	r3, [r4]
   1dc44:	mov	r5, r1
   1dc48:	ldr	r1, [sp, #24]
   1dc4c:	str	ip, [sp]
   1dc50:	str	r3, [sp, #4]
   1dc54:	mov	r6, r0
   1dc58:	bl	1c484 <__assert_fail@plt+0x9d38>
   1dc5c:	subs	r2, r0, #0
   1dc60:	beq	1dc90 <__assert_fail@plt+0xb544>
   1dc64:	mov	r1, r5
   1dc68:	mov	r0, r6
   1dc6c:	bl	1db58 <__assert_fail@plt+0xb40c>
   1dc70:	ldr	r2, [sp, #4]
   1dc74:	ldr	r3, [r4]
   1dc78:	cmp	r2, r3
   1dc7c:	bne	1dc98 <__assert_fail@plt+0xb54c>
   1dc80:	add	sp, sp, #8
   1dc84:	pop	{r4, r5, r6, lr}
   1dc88:	add	sp, sp, #8
   1dc8c:	bx	lr
   1dc90:	mvn	r0, #21
   1dc94:	b	1dc70 <__assert_fail@plt+0xb524>
   1dc98:	bl	12200 <__stack_chk_fail@plt>
   1dc9c:	andeq	r7, r1, r4, ror #2
   1dca0:	andeq	r0, r0, ip, asr r2
   1dca4:	push	{r4, lr}
   1dca8:	sub	r2, r2, #1
   1dcac:	mov	r4, r1
   1dcb0:	bl	1d8f0 <__assert_fail@plt+0xb1a4>
   1dcb4:	cmp	r0, #0
   1dcb8:	poplt	{r4, pc}
   1dcbc:	beq	1dcd8 <__assert_fail@plt+0xb58c>
   1dcc0:	add	r3, r4, r0
   1dcc4:	ldrsb	r2, [r3, #-1]
   1dcc8:	cmp	r2, #10
   1dccc:	subeq	r0, r0, #1
   1dcd0:	movne	r4, r3
   1dcd4:	addeq	r4, r4, r0
   1dcd8:	mov	r3, #0
   1dcdc:	strb	r3, [r4]
   1dce0:	pop	{r4, pc}
   1dce4:	push	{r3}		; (str r3, [sp, #-4]!)
   1dce8:	ldr	r3, [pc, #124]	; 1dd6c <__assert_fail@plt+0xb620>
   1dcec:	ldr	ip, [pc, #124]	; 1dd70 <__assert_fail@plt+0xb624>
   1dcf0:	add	r3, pc, r3
   1dcf4:	push	{r4, r5, r6, r7, lr}
   1dcf8:	sub	sp, sp, #8
   1dcfc:	ldr	r4, [r3, ip]
   1dd00:	add	lr, sp, #32
   1dd04:	mov	r5, r1
   1dd08:	ldr	ip, [r4]
   1dd0c:	mov	r7, r2
   1dd10:	ldr	r1, [sp, #28]
   1dd14:	mov	r2, lr
   1dd18:	str	ip, [sp, #4]
   1dd1c:	str	lr, [sp]
   1dd20:	mov	r6, r0
   1dd24:	bl	1c484 <__assert_fail@plt+0x9d38>
   1dd28:	subs	r3, r0, #0
   1dd2c:	beq	1dd60 <__assert_fail@plt+0xb614>
   1dd30:	mov	r2, r7
   1dd34:	mov	r1, r5
   1dd38:	mov	r0, r6
   1dd3c:	bl	1dca4 <__assert_fail@plt+0xb558>
   1dd40:	ldr	r2, [sp, #4]
   1dd44:	ldr	r3, [r4]
   1dd48:	cmp	r2, r3
   1dd4c:	bne	1dd68 <__assert_fail@plt+0xb61c>
   1dd50:	add	sp, sp, #8
   1dd54:	pop	{r4, r5, r6, r7, lr}
   1dd58:	add	sp, sp, #4
   1dd5c:	bx	lr
   1dd60:	mvn	r0, #21
   1dd64:	b	1dd40 <__assert_fail@plt+0xb5f4>
   1dd68:	bl	12200 <__stack_chk_fail@plt>
   1dd6c:	muleq	r1, ip, r0
   1dd70:	andeq	r0, r0, ip, asr r2
   1dd74:	push	{r2, r3}
   1dd78:	mov	r2, r1
   1dd7c:	push	{r4, r5, r6, r7, r8, lr}
   1dd80:	mov	r7, r1
   1dd84:	ldr	r4, [pc, #236]	; 1de78 <__assert_fail@plt+0xb72c>
   1dd88:	ldr	r3, [pc, #236]	; 1de7c <__assert_fail@plt+0xb730>
   1dd8c:	add	r4, pc, r4
   1dd90:	ldr	r1, [pc, #232]	; 1de80 <__assert_fail@plt+0xb734>
   1dd94:	ldr	r5, [r4, r3]
   1dd98:	sub	sp, sp, #16
   1dd9c:	add	r1, pc, r1
   1dda0:	ldr	r3, [r5]
   1dda4:	ldr	r8, [sp, #40]	; 0x28
   1dda8:	str	r3, [sp, #12]
   1ddac:	bl	1d37c <__assert_fail@plt+0xac30>
   1ddb0:	subs	r6, r0, #0
   1ddb4:	beq	1de6c <__assert_fail@plt+0xb720>
   1ddb8:	ldr	r3, [pc, #196]	; 1de84 <__assert_fail@plt+0xb738>
   1ddbc:	add	r3, pc, r3
   1ddc0:	ldr	r3, [r3]
   1ddc4:	tst	r3, #4
   1ddc8:	bne	1de14 <__assert_fail@plt+0xb6c8>
   1ddcc:	add	r3, sp, #44	; 0x2c
   1ddd0:	mov	r1, r8
   1ddd4:	mov	r2, r3
   1ddd8:	mov	r0, r6
   1dddc:	str	r3, [sp, #8]
   1dde0:	bl	12260 <vfscanf@plt>
   1dde4:	mov	r4, r0
   1dde8:	mov	r0, r6
   1ddec:	bl	12590 <fclose@plt>
   1ddf0:	ldr	r2, [sp, #12]
   1ddf4:	ldr	r3, [r5]
   1ddf8:	mov	r0, r4
   1ddfc:	cmp	r2, r3
   1de00:	bne	1de74 <__assert_fail@plt+0xb728>
   1de04:	add	sp, sp, #16
   1de08:	pop	{r4, r5, r6, r7, r8, lr}
   1de0c:	add	sp, sp, #8
   1de10:	bx	lr
   1de14:	ldr	r3, [pc, #108]	; 1de88 <__assert_fail@plt+0xb73c>
   1de18:	ldr	r3, [r4, r3]
   1de1c:	ldr	r4, [r3]
   1de20:	bl	123ec <getpid@plt>
   1de24:	ldr	r2, [pc, #96]	; 1de8c <__assert_fail@plt+0xb740>
   1de28:	ldr	r3, [pc, #96]	; 1de90 <__assert_fail@plt+0xb744>
   1de2c:	add	r2, pc, r2
   1de30:	str	r2, [sp, #4]
   1de34:	ldr	r2, [pc, #88]	; 1de94 <__assert_fail@plt+0xb748>
   1de38:	add	r3, pc, r3
   1de3c:	str	r3, [sp]
   1de40:	add	r2, pc, r2
   1de44:	mov	r1, #1
   1de48:	mov	r3, r0
   1de4c:	mov	r0, r4
   1de50:	bl	12578 <__fprintf_chk@plt>
   1de54:	ldr	r0, [pc, #60]	; 1de98 <__assert_fail@plt+0xb74c>
   1de58:	mov	r2, r7
   1de5c:	mov	r1, r8
   1de60:	add	r0, pc, r0
   1de64:	bl	1c35c <__assert_fail@plt+0x9c10>
   1de68:	b	1ddcc <__assert_fail@plt+0xb680>
   1de6c:	mvn	r4, #21
   1de70:	b	1ddf0 <__assert_fail@plt+0xb6a4>
   1de74:	bl	12200 <__stack_chk_fail@plt>
   1de78:	andeq	r7, r1, r0
   1de7c:	andeq	r0, r0, ip, asr r2
   1de80:	andeq	r6, r0, r0, asr #1
   1de84:	andeq	r7, r1, r4, asr r4
   1de88:	andeq	r0, r0, r0, ror #4
   1de8c:	andeq	r5, r0, r4, ror #26
   1de90:	strdeq	r6, [r0], -r0
   1de94:	andeq	r5, r0, r0, asr #26
   1de98:	andeq	r6, r0, r8, asr #15
   1de9c:	ldr	ip, [pc, #140]	; 1df30 <__assert_fail@plt+0xb7e4>
   1dea0:	push	{r3}		; (str r3, [sp, #-4]!)
   1dea4:	add	ip, pc, ip
   1dea8:	push	{r4, r5, r6, lr}
   1deac:	mov	r3, r2
   1deb0:	ldr	lr, [pc, #124]	; 1df34 <__assert_fail@plt+0xb7e8>
   1deb4:	mov	r2, r1
   1deb8:	ldr	r1, [pc, #120]	; 1df38 <__assert_fail@plt+0xb7ec>
   1debc:	ldr	r4, [ip, lr]
   1dec0:	sub	sp, sp, #12
   1dec4:	add	r1, pc, r1
   1dec8:	ldr	ip, [r4]
   1decc:	ldr	r5, [sp, #28]
   1ded0:	str	ip, [sp, #4]
   1ded4:	bl	1d460 <__assert_fail@plt+0xad14>
   1ded8:	subs	r6, r0, #0
   1dedc:	beq	1df24 <__assert_fail@plt+0xb7d8>
   1dee0:	add	r3, sp, #32
   1dee4:	mov	r1, r5
   1dee8:	mov	r2, r3
   1deec:	str	r3, [sp]
   1def0:	bl	12260 <vfscanf@plt>
   1def4:	mov	r5, r0
   1def8:	mov	r0, r6
   1defc:	bl	12590 <fclose@plt>
   1df00:	ldr	r2, [sp, #4]
   1df04:	ldr	r3, [r4]
   1df08:	mov	r0, r5
   1df0c:	cmp	r2, r3
   1df10:	bne	1df2c <__assert_fail@plt+0xb7e0>
   1df14:	add	sp, sp, #12
   1df18:	pop	{r4, r5, r6, lr}
   1df1c:	add	sp, sp, #4
   1df20:	bx	lr
   1df24:	mvn	r5, #21
   1df28:	b	1df00 <__assert_fail@plt+0xb7b4>
   1df2c:	bl	12200 <__stack_chk_fail@plt>
   1df30:	andeq	r6, r1, r8, ror #29
   1df34:	andeq	r0, r0, ip, asr r2
   1df38:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   1df3c:	ldr	r3, [pc, #124]	; 1dfc0 <__assert_fail@plt+0xb874>
   1df40:	ldr	ip, [pc, #124]	; 1dfc4 <__assert_fail@plt+0xb878>
   1df44:	add	r3, pc, r3
   1df48:	push	{r4, r5, r6, r7, lr}
   1df4c:	mov	r5, r1
   1df50:	ldr	r4, [r3, ip]
   1df54:	mov	r1, r2
   1df58:	ldr	r2, [pc, #104]	; 1dfc8 <__assert_fail@plt+0xb87c>
   1df5c:	sub	sp, sp, #20
   1df60:	ldr	ip, [r4]
   1df64:	mov	r6, #0
   1df68:	mov	r7, #0
   1df6c:	add	r2, pc, r2
   1df70:	mov	r3, sp
   1df74:	strd	r6, [sp]
   1df78:	str	ip, [sp, #12]
   1df7c:	bl	1dd74 <__assert_fail@plt+0xb628>
   1df80:	cmp	r0, #1
   1df84:	bne	1dfb4 <__assert_fail@plt+0xb868>
   1df88:	cmp	r5, #0
   1df8c:	moveq	r0, r5
   1df90:	ldrdne	r2, [sp]
   1df94:	movne	r0, #0
   1df98:	strdne	r2, [r5]
   1df9c:	ldr	r2, [sp, #12]
   1dfa0:	ldr	r3, [r4]
   1dfa4:	cmp	r2, r3
   1dfa8:	bne	1dfbc <__assert_fail@plt+0xb870>
   1dfac:	add	sp, sp, #20
   1dfb0:	pop	{r4, r5, r6, r7, pc}
   1dfb4:	mvn	r0, #0
   1dfb8:	b	1df9c <__assert_fail@plt+0xb850>
   1dfbc:	bl	12200 <__stack_chk_fail@plt>
   1dfc0:	andeq	r6, r1, r8, asr #28
   1dfc4:	andeq	r0, r0, ip, asr r2
   1dfc8:	ldrdeq	r6, [r0], -r0
   1dfcc:	push	{r2, r3}
   1dfd0:	ldr	r3, [pc, #116]	; 1e04c <__assert_fail@plt+0xb900>
   1dfd4:	ldr	r2, [pc, #116]	; 1e050 <__assert_fail@plt+0xb904>
   1dfd8:	add	r3, pc, r3
   1dfdc:	push	{r4, r5, r6, lr}
   1dfe0:	sub	sp, sp, #8
   1dfe4:	ldr	r4, [r3, r2]
   1dfe8:	add	ip, sp, #28
   1dfec:	mov	r2, ip
   1dff0:	ldr	r3, [r4]
   1dff4:	mov	r5, r1
   1dff8:	ldr	r1, [sp, #24]
   1dffc:	str	ip, [sp]
   1e000:	str	r3, [sp, #4]
   1e004:	mov	r6, r0
   1e008:	bl	1c484 <__assert_fail@plt+0x9d38>
   1e00c:	subs	r2, r0, #0
   1e010:	beq	1e040 <__assert_fail@plt+0xb8f4>
   1e014:	mov	r1, r5
   1e018:	mov	r0, r6
   1e01c:	bl	1df3c <__assert_fail@plt+0xb7f0>
   1e020:	ldr	r2, [sp, #4]
   1e024:	ldr	r3, [r4]
   1e028:	cmp	r2, r3
   1e02c:	bne	1e048 <__assert_fail@plt+0xb8fc>
   1e030:	add	sp, sp, #8
   1e034:	pop	{r4, r5, r6, lr}
   1e038:	add	sp, sp, #8
   1e03c:	bx	lr
   1e040:	mvn	r0, #21
   1e044:	b	1e020 <__assert_fail@plt+0xb8d4>
   1e048:	bl	12200 <__stack_chk_fail@plt>
   1e04c:			; <UNDEFINED> instruction: 0x00016db4
   1e050:	andeq	r0, r0, ip, asr r2
   1e054:	ldr	r3, [pc, #124]	; 1e0d8 <__assert_fail@plt+0xb98c>
   1e058:	ldr	ip, [pc, #124]	; 1e0dc <__assert_fail@plt+0xb990>
   1e05c:	add	r3, pc, r3
   1e060:	push	{r4, r5, r6, r7, lr}
   1e064:	mov	r5, r1
   1e068:	ldr	r4, [r3, ip]
   1e06c:	mov	r1, r2
   1e070:	ldr	r2, [pc, #104]	; 1e0e0 <__assert_fail@plt+0xb994>
   1e074:	sub	sp, sp, #20
   1e078:	ldr	ip, [r4]
   1e07c:	mov	r6, #0
   1e080:	mov	r7, #0
   1e084:	add	r2, pc, r2
   1e088:	mov	r3, sp
   1e08c:	strd	r6, [sp]
   1e090:	str	ip, [sp, #12]
   1e094:	bl	1dd74 <__assert_fail@plt+0xb628>
   1e098:	cmp	r0, #1
   1e09c:	bne	1e0cc <__assert_fail@plt+0xb980>
   1e0a0:	cmp	r5, #0
   1e0a4:	moveq	r0, r5
   1e0a8:	ldrdne	r2, [sp]
   1e0ac:	movne	r0, #0
   1e0b0:	strdne	r2, [r5]
   1e0b4:	ldr	r2, [sp, #12]
   1e0b8:	ldr	r3, [r4]
   1e0bc:	cmp	r2, r3
   1e0c0:	bne	1e0d4 <__assert_fail@plt+0xb988>
   1e0c4:	add	sp, sp, #20
   1e0c8:	pop	{r4, r5, r6, r7, pc}
   1e0cc:	mvn	r0, #0
   1e0d0:	b	1e0b4 <__assert_fail@plt+0xb968>
   1e0d4:	bl	12200 <__stack_chk_fail@plt>
   1e0d8:	andeq	r6, r1, r0, lsr sp
   1e0dc:	andeq	r0, r0, ip, asr r2
   1e0e0:	andeq	r6, r0, r0, asr #11
   1e0e4:	push	{r2, r3}
   1e0e8:	ldr	r3, [pc, #116]	; 1e164 <__assert_fail@plt+0xba18>
   1e0ec:	ldr	r2, [pc, #116]	; 1e168 <__assert_fail@plt+0xba1c>
   1e0f0:	add	r3, pc, r3
   1e0f4:	push	{r4, r5, r6, lr}
   1e0f8:	sub	sp, sp, #8
   1e0fc:	ldr	r4, [r3, r2]
   1e100:	add	ip, sp, #28
   1e104:	mov	r2, ip
   1e108:	ldr	r3, [r4]
   1e10c:	mov	r5, r1
   1e110:	ldr	r1, [sp, #24]
   1e114:	str	ip, [sp]
   1e118:	str	r3, [sp, #4]
   1e11c:	mov	r6, r0
   1e120:	bl	1c484 <__assert_fail@plt+0x9d38>
   1e124:	subs	r2, r0, #0
   1e128:	beq	1e158 <__assert_fail@plt+0xba0c>
   1e12c:	mov	r1, r5
   1e130:	mov	r0, r6
   1e134:	bl	1e054 <__assert_fail@plt+0xb908>
   1e138:	ldr	r2, [sp, #4]
   1e13c:	ldr	r3, [r4]
   1e140:	cmp	r2, r3
   1e144:	bne	1e160 <__assert_fail@plt+0xba14>
   1e148:	add	sp, sp, #8
   1e14c:	pop	{r4, r5, r6, lr}
   1e150:	add	sp, sp, #8
   1e154:	bx	lr
   1e158:	mvn	r0, #21
   1e15c:	b	1e138 <__assert_fail@plt+0xb9ec>
   1e160:	bl	12200 <__stack_chk_fail@plt>
   1e164:	muleq	r1, ip, ip
   1e168:	andeq	r0, r0, ip, asr r2
   1e16c:	ldr	ip, [pc, #120]	; 1e1ec <__assert_fail@plt+0xbaa0>
   1e170:	ldr	r3, [pc, #120]	; 1e1f0 <__assert_fail@plt+0xbaa4>
   1e174:	add	ip, pc, ip
   1e178:	push	{r4, r5, r6, lr}
   1e17c:	mov	r6, r1
   1e180:	ldr	r5, [ip, r3]
   1e184:	mov	r1, r2
   1e188:	ldr	r2, [pc, #100]	; 1e1f4 <__assert_fail@plt+0xbaa8>
   1e18c:	sub	sp, sp, #8
   1e190:	ldr	lr, [r5]
   1e194:	mov	r4, #0
   1e198:	mov	r3, sp
   1e19c:	add	r2, pc, r2
   1e1a0:	str	lr, [sp, #4]
   1e1a4:	str	r4, [sp]
   1e1a8:	bl	1dd74 <__assert_fail@plt+0xb628>
   1e1ac:	cmp	r0, #1
   1e1b0:	bne	1e1e0 <__assert_fail@plt+0xba94>
   1e1b4:	cmp	r6, r4
   1e1b8:	moveq	r0, r6
   1e1bc:	ldrne	r3, [sp]
   1e1c0:	movne	r0, r4
   1e1c4:	strne	r3, [r6]
   1e1c8:	ldr	r2, [sp, #4]
   1e1cc:	ldr	r3, [r5]
   1e1d0:	cmp	r2, r3
   1e1d4:	bne	1e1e8 <__assert_fail@plt+0xba9c>
   1e1d8:	add	sp, sp, #8
   1e1dc:	pop	{r4, r5, r6, pc}
   1e1e0:	mvn	r0, #0
   1e1e4:	b	1e1c8 <__assert_fail@plt+0xba7c>
   1e1e8:	bl	12200 <__stack_chk_fail@plt>
   1e1ec:	andeq	r6, r1, r8, lsl ip
   1e1f0:	andeq	r0, r0, ip, asr r2
   1e1f4:	andeq	r5, r0, ip, lsl sp
   1e1f8:	push	{r2, r3}
   1e1fc:	ldr	r3, [pc, #116]	; 1e278 <__assert_fail@plt+0xbb2c>
   1e200:	ldr	r2, [pc, #116]	; 1e27c <__assert_fail@plt+0xbb30>
   1e204:	add	r3, pc, r3
   1e208:	push	{r4, r5, r6, lr}
   1e20c:	sub	sp, sp, #8
   1e210:	ldr	r4, [r3, r2]
   1e214:	add	ip, sp, #28
   1e218:	mov	r2, ip
   1e21c:	ldr	r3, [r4]
   1e220:	mov	r5, r1
   1e224:	ldr	r1, [sp, #24]
   1e228:	str	ip, [sp]
   1e22c:	str	r3, [sp, #4]
   1e230:	mov	r6, r0
   1e234:	bl	1c484 <__assert_fail@plt+0x9d38>
   1e238:	subs	r2, r0, #0
   1e23c:	beq	1e26c <__assert_fail@plt+0xbb20>
   1e240:	mov	r1, r5
   1e244:	mov	r0, r6
   1e248:	bl	1e16c <__assert_fail@plt+0xba20>
   1e24c:	ldr	r2, [sp, #4]
   1e250:	ldr	r3, [r4]
   1e254:	cmp	r2, r3
   1e258:	bne	1e274 <__assert_fail@plt+0xbb28>
   1e25c:	add	sp, sp, #8
   1e260:	pop	{r4, r5, r6, lr}
   1e264:	add	sp, sp, #8
   1e268:	bx	lr
   1e26c:	mvn	r0, #21
   1e270:	b	1e24c <__assert_fail@plt+0xbb00>
   1e274:	bl	12200 <__stack_chk_fail@plt>
   1e278:	andeq	r6, r1, r8, lsl #23
   1e27c:	andeq	r0, r0, ip, asr r2
   1e280:	ldr	ip, [pc, #112]	; 1e2f8 <__assert_fail@plt+0xbbac>
   1e284:	ldr	r3, [pc, #112]	; 1e2fc <__assert_fail@plt+0xbbb0>
   1e288:	add	ip, pc, ip
   1e28c:	push	{r4, r5, lr}
   1e290:	mov	r5, r1
   1e294:	ldr	r4, [ip, r3]
   1e298:	mov	r1, r2
   1e29c:	ldr	r2, [pc, #92]	; 1e300 <__assert_fail@plt+0xbbb4>
   1e2a0:	sub	sp, sp, #12
   1e2a4:	ldr	lr, [r4]
   1e2a8:	mov	r3, sp
   1e2ac:	add	r2, pc, r2
   1e2b0:	str	lr, [sp, #4]
   1e2b4:	bl	1dd74 <__assert_fail@plt+0xb628>
   1e2b8:	cmp	r0, #1
   1e2bc:	bne	1e2ec <__assert_fail@plt+0xbba0>
   1e2c0:	cmp	r5, #0
   1e2c4:	moveq	r0, r5
   1e2c8:	ldrne	r3, [sp]
   1e2cc:	movne	r0, #0
   1e2d0:	strne	r3, [r5]
   1e2d4:	ldr	r2, [sp, #4]
   1e2d8:	ldr	r3, [r4]
   1e2dc:	cmp	r2, r3
   1e2e0:	bne	1e2f4 <__assert_fail@plt+0xbba8>
   1e2e4:	add	sp, sp, #12
   1e2e8:	pop	{r4, r5, pc}
   1e2ec:	mvn	r0, #0
   1e2f0:	b	1e2d4 <__assert_fail@plt+0xbb88>
   1e2f4:	bl	12200 <__stack_chk_fail@plt>
   1e2f8:	andeq	r6, r1, r4, lsl #22
   1e2fc:	andeq	r0, r0, ip, asr r2
   1e300:	andeq	r5, r0, r0, asr #18
   1e304:	push	{r2, r3}
   1e308:	ldr	r3, [pc, #116]	; 1e384 <__assert_fail@plt+0xbc38>
   1e30c:	ldr	r2, [pc, #116]	; 1e388 <__assert_fail@plt+0xbc3c>
   1e310:	add	r3, pc, r3
   1e314:	push	{r4, r5, r6, lr}
   1e318:	sub	sp, sp, #8
   1e31c:	ldr	r4, [r3, r2]
   1e320:	add	ip, sp, #28
   1e324:	mov	r2, ip
   1e328:	ldr	r3, [r4]
   1e32c:	mov	r5, r1
   1e330:	ldr	r1, [sp, #24]
   1e334:	str	ip, [sp]
   1e338:	str	r3, [sp, #4]
   1e33c:	mov	r6, r0
   1e340:	bl	1c484 <__assert_fail@plt+0x9d38>
   1e344:	subs	r2, r0, #0
   1e348:	beq	1e378 <__assert_fail@plt+0xbc2c>
   1e34c:	mov	r1, r5
   1e350:	mov	r0, r6
   1e354:	bl	1e280 <__assert_fail@plt+0xbb34>
   1e358:	ldr	r2, [sp, #4]
   1e35c:	ldr	r3, [r4]
   1e360:	cmp	r2, r3
   1e364:	bne	1e380 <__assert_fail@plt+0xbc34>
   1e368:	add	sp, sp, #8
   1e36c:	pop	{r4, r5, r6, lr}
   1e370:	add	sp, sp, #8
   1e374:	bx	lr
   1e378:	mvn	r0, #21
   1e37c:	b	1e358 <__assert_fail@plt+0xbc0c>
   1e380:	bl	12200 <__stack_chk_fail@plt>
   1e384:	andeq	r6, r1, ip, ror sl
   1e388:	andeq	r0, r0, ip, asr r2
   1e38c:	ldr	ip, [pc, #168]	; 1e43c <__assert_fail@plt+0xbcf0>
   1e390:	ldr	r3, [pc, #168]	; 1e440 <__assert_fail@plt+0xbcf4>
   1e394:	add	ip, pc, ip
   1e398:	push	{r4, r5, lr}
   1e39c:	sub	sp, sp, #28
   1e3a0:	ldr	r5, [ip, r3]
   1e3a4:	mov	r4, r1
   1e3a8:	add	r3, sp, #16
   1e3ac:	mov	r1, r2
   1e3b0:	ldr	r2, [pc, #140]	; 1e444 <__assert_fail@plt+0xbcf8>
   1e3b4:	str	r3, [sp]
   1e3b8:	ldr	lr, [r5]
   1e3bc:	add	r3, sp, #12
   1e3c0:	add	r2, pc, r2
   1e3c4:	str	lr, [sp, #20]
   1e3c8:	bl	1dd74 <__assert_fail@plt+0xb628>
   1e3cc:	cmp	r0, #2
   1e3d0:	bne	1e430 <__assert_fail@plt+0xbce4>
   1e3d4:	cmp	r4, #0
   1e3d8:	moveq	r0, r4
   1e3dc:	beq	1e418 <__assert_fail@plt+0xbccc>
   1e3e0:	ldr	r0, [sp, #16]
   1e3e4:	ldr	r3, [sp, #12]
   1e3e8:	ldr	ip, [pc, #88]	; 1e448 <__assert_fail@plt+0xbcfc>
   1e3ec:	ldr	r2, [pc, #88]	; 1e44c <__assert_fail@plt+0xbd00>
   1e3f0:	uxtb	r1, r0
   1e3f4:	and	ip, ip, r3, lsl #8
   1e3f8:	bic	r3, r3, #4080	; 0xff0
   1e3fc:	and	r2, r2, r0, lsl #12
   1e400:	orr	r1, r1, ip
   1e404:	bic	r3, r3, #15
   1e408:	orr	r3, r3, r0, lsr #20
   1e40c:	orr	r2, r2, r1
   1e410:	mov	r0, #0
   1e414:	strd	r2, [r4]
   1e418:	ldr	r2, [sp, #20]
   1e41c:	ldr	r3, [r5]
   1e420:	cmp	r2, r3
   1e424:	bne	1e438 <__assert_fail@plt+0xbcec>
   1e428:	add	sp, sp, #28
   1e42c:	pop	{r4, r5, pc}
   1e430:	mvn	r0, #0
   1e434:	b	1e418 <__assert_fail@plt+0xbccc>
   1e438:	bl	12200 <__stack_chk_fail@plt>
   1e43c:	strdeq	r6, [r1], -r8
   1e440:	andeq	r0, r0, ip, asr r2
   1e444:	andeq	r6, r0, ip, lsl #5
   1e448:	andeq	pc, pc, r0, lsl #30
   1e44c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1e450:	push	{r2, r3}
   1e454:	ldr	r3, [pc, #116]	; 1e4d0 <__assert_fail@plt+0xbd84>
   1e458:	ldr	r2, [pc, #116]	; 1e4d4 <__assert_fail@plt+0xbd88>
   1e45c:	add	r3, pc, r3
   1e460:	push	{r4, r5, r6, lr}
   1e464:	sub	sp, sp, #8
   1e468:	ldr	r4, [r3, r2]
   1e46c:	add	ip, sp, #28
   1e470:	mov	r2, ip
   1e474:	ldr	r3, [r4]
   1e478:	mov	r5, r1
   1e47c:	ldr	r1, [sp, #24]
   1e480:	str	ip, [sp]
   1e484:	str	r3, [sp, #4]
   1e488:	mov	r6, r0
   1e48c:	bl	1c484 <__assert_fail@plt+0x9d38>
   1e490:	subs	r2, r0, #0
   1e494:	beq	1e4c4 <__assert_fail@plt+0xbd78>
   1e498:	mov	r1, r5
   1e49c:	mov	r0, r6
   1e4a0:	bl	1e38c <__assert_fail@plt+0xbc40>
   1e4a4:	ldr	r2, [sp, #4]
   1e4a8:	ldr	r3, [r4]
   1e4ac:	cmp	r2, r3
   1e4b0:	bne	1e4cc <__assert_fail@plt+0xbd80>
   1e4b4:	add	sp, sp, #8
   1e4b8:	pop	{r4, r5, r6, lr}
   1e4bc:	add	sp, sp, #8
   1e4c0:	bx	lr
   1e4c4:	mvn	r0, #21
   1e4c8:	b	1e4a4 <__assert_fail@plt+0xbd58>
   1e4cc:	bl	12200 <__stack_chk_fail@plt>
   1e4d0:	andeq	r6, r1, r0, lsr r9
   1e4d4:	andeq	r0, r0, ip, asr r2
   1e4d8:	ldr	r3, [pc, #284]	; 1e5fc <__assert_fail@plt+0xbeb0>
   1e4dc:	ldr	ip, [pc, #284]	; 1e600 <__assert_fail@plt+0xbeb4>
   1e4e0:	add	r3, pc, r3
   1e4e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4e8:	sub	sp, sp, #20
   1e4ec:	ldr	r8, [r3, ip]
   1e4f0:	mov	r6, r1
   1e4f4:	ldr	r1, [pc, #264]	; 1e604 <__assert_fail@plt+0xbeb8>
   1e4f8:	ldr	r3, [r8]
   1e4fc:	str	r3, [sp, #12]
   1e500:	bl	1d05c <__assert_fail@plt+0xa910>
   1e504:	mov	r7, r0
   1e508:	bl	1247c <__errno_location@plt>
   1e50c:	cmp	r7, #0
   1e510:	mov	r5, r0
   1e514:	blt	1e5e4 <__assert_fail@plt+0xbe98>
   1e518:	mov	r0, r6
   1e51c:	bl	12428 <strlen@plt>
   1e520:	subs	r4, r0, #0
   1e524:	beq	1e59c <__assert_fail@plt+0xbe50>
   1e528:	mov	r9, #0
   1e52c:	add	sl, sp, #4
   1e530:	str	r9, [r5]
   1e534:	mov	r2, r4
   1e538:	mov	r1, r6
   1e53c:	mov	r0, r7
   1e540:	bl	12554 <write@plt>
   1e544:	cmp	r0, #0
   1e548:	ble	1e5c8 <__assert_fail@plt+0xbe7c>
   1e54c:	subs	r4, r4, r0
   1e550:	ldr	fp, [r5]
   1e554:	beq	1e580 <__assert_fail@plt+0xbe34>
   1e558:	cmp	fp, #11
   1e55c:	add	r6, r6, r0
   1e560:	bne	1e530 <__assert_fail@plt+0xbde4>
   1e564:	ldr	r3, [pc, #156]	; 1e608 <__assert_fail@plt+0xbebc>
   1e568:	mov	r1, #0
   1e56c:	mov	r0, sl
   1e570:	str	r9, [sp, #4]
   1e574:	str	r3, [sp, #8]
   1e578:	bl	1214c <nanosleep@plt>
   1e57c:	b	1e530 <__assert_fail@plt+0xbde4>
   1e580:	cmp	fp, #11
   1e584:	bne	1e5a0 <__assert_fail@plt+0xbe54>
   1e588:	ldr	r3, [pc, #120]	; 1e608 <__assert_fail@plt+0xbebc>
   1e58c:	mov	r1, r4
   1e590:	add	r0, sp, #4
   1e594:	stmib	sp, {r1, r3}
   1e598:	bl	1214c <nanosleep@plt>
   1e59c:	ldr	fp, [r5]
   1e5a0:	mov	r0, r7
   1e5a4:	bl	12704 <close@plt>
   1e5a8:	str	fp, [r5]
   1e5ac:	ldr	r2, [sp, #12]
   1e5b0:	ldr	r3, [r8]
   1e5b4:	mov	r0, r4
   1e5b8:	cmp	r2, r3
   1e5bc:	bne	1e5f8 <__assert_fail@plt+0xbeac>
   1e5c0:	add	sp, sp, #20
   1e5c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5c8:	ldr	fp, [r5]
   1e5cc:	cmp	fp, #4
   1e5d0:	cmpne	fp, #11
   1e5d4:	bne	1e5f0 <__assert_fail@plt+0xbea4>
   1e5d8:	cmp	fp, #11
   1e5dc:	bne	1e530 <__assert_fail@plt+0xbde4>
   1e5e0:	b	1e564 <__assert_fail@plt+0xbe18>
   1e5e4:	ldr	r4, [r0]
   1e5e8:	rsb	r4, r4, #0
   1e5ec:	b	1e5ac <__assert_fail@plt+0xbe60>
   1e5f0:	mvn	r4, #0
   1e5f4:	b	1e5a0 <__assert_fail@plt+0xbe54>
   1e5f8:	bl	12200 <__stack_chk_fail@plt>
   1e5fc:	andeq	r6, r1, ip, lsr #17
   1e600:	andeq	r0, r0, ip, asr r2
   1e604:	andeq	r0, r8, r1
   1e608:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1e60c:	push	{r2, r3}
   1e610:	ldr	r3, [pc, #116]	; 1e68c <__assert_fail@plt+0xbf40>
   1e614:	ldr	r2, [pc, #116]	; 1e690 <__assert_fail@plt+0xbf44>
   1e618:	add	r3, pc, r3
   1e61c:	push	{r4, r5, r6, lr}
   1e620:	sub	sp, sp, #8
   1e624:	ldr	r4, [r3, r2]
   1e628:	add	ip, sp, #28
   1e62c:	mov	r2, ip
   1e630:	ldr	r3, [r4]
   1e634:	mov	r5, r1
   1e638:	ldr	r1, [sp, #24]
   1e63c:	str	ip, [sp]
   1e640:	str	r3, [sp, #4]
   1e644:	mov	r6, r0
   1e648:	bl	1c484 <__assert_fail@plt+0x9d38>
   1e64c:	subs	r2, r0, #0
   1e650:	beq	1e680 <__assert_fail@plt+0xbf34>
   1e654:	mov	r1, r5
   1e658:	mov	r0, r6
   1e65c:	bl	1e4d8 <__assert_fail@plt+0xbd8c>
   1e660:	ldr	r2, [sp, #4]
   1e664:	ldr	r3, [r4]
   1e668:	cmp	r2, r3
   1e66c:	bne	1e688 <__assert_fail@plt+0xbf3c>
   1e670:	add	sp, sp, #8
   1e674:	pop	{r4, r5, r6, lr}
   1e678:	add	sp, sp, #8
   1e67c:	bx	lr
   1e680:	mvn	r0, #21
   1e684:	b	1e660 <__assert_fail@plt+0xbf14>
   1e688:	bl	12200 <__stack_chk_fail@plt>
   1e68c:	andeq	r6, r1, r4, ror r7
   1e690:	andeq	r0, r0, ip, asr r2
   1e694:	ldr	ip, [pc, #328]	; 1e7e4 <__assert_fail@plt+0xc098>
   1e698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e69c:	add	ip, pc, ip
   1e6a0:	ldr	lr, [pc, #320]	; 1e7e8 <__assert_fail@plt+0xc09c>
   1e6a4:	sub	sp, sp, #60	; 0x3c
   1e6a8:	mov	r9, r3
   1e6ac:	ldr	r7, [ip, lr]
   1e6b0:	mov	r3, ip
   1e6b4:	ldr	r1, [pc, #304]	; 1e7ec <__assert_fail@plt+0xc0a0>
   1e6b8:	ldr	r3, [r7]
   1e6bc:	mov	r8, r2
   1e6c0:	ldr	r2, [sp, #96]	; 0x60
   1e6c4:	str	r3, [sp, #52]	; 0x34
   1e6c8:	bl	1d05c <__assert_fail@plt+0xa910>
   1e6cc:	mov	r6, r0
   1e6d0:	bl	1247c <__errno_location@plt>
   1e6d4:	cmp	r6, #0
   1e6d8:	mov	r5, r0
   1e6dc:	blt	1e7cc <__assert_fail@plt+0xc080>
   1e6e0:	ldr	r2, [pc, #264]	; 1e7f0 <__assert_fail@plt+0xc0a4>
   1e6e4:	mov	r3, #21
   1e6e8:	add	r2, pc, r2
   1e6ec:	strd	r8, [sp, #8]
   1e6f0:	str	r2, [sp]
   1e6f4:	add	r0, sp, #28
   1e6f8:	mov	r1, r3
   1e6fc:	mov	r2, #1
   1e700:	mov	r8, r0
   1e704:	bl	12728 <__snprintf_chk@plt>
   1e708:	mov	r9, #0
   1e70c:	add	sl, sp, #20
   1e710:	mov	r4, r0
   1e714:	str	r9, [r5]
   1e718:	mov	r2, r4
   1e71c:	mov	r1, r8
   1e720:	mov	r0, r6
   1e724:	bl	12554 <write@plt>
   1e728:	cmp	r0, #0
   1e72c:	ble	1e764 <__assert_fail@plt+0xc018>
   1e730:	subs	r4, r4, r0
   1e734:	ldr	fp, [r5]
   1e738:	beq	1e780 <__assert_fail@plt+0xc034>
   1e73c:	cmp	fp, #11
   1e740:	add	r8, r8, r0
   1e744:	bne	1e714 <__assert_fail@plt+0xbfc8>
   1e748:	ldr	r3, [pc, #164]	; 1e7f4 <__assert_fail@plt+0xc0a8>
   1e74c:	mov	r1, #0
   1e750:	mov	r0, sl
   1e754:	str	r9, [sp, #20]
   1e758:	str	r3, [sp, #24]
   1e75c:	bl	1214c <nanosleep@plt>
   1e760:	b	1e714 <__assert_fail@plt+0xbfc8>
   1e764:	ldr	fp, [r5]
   1e768:	cmp	fp, #4
   1e76c:	cmpne	fp, #11
   1e770:	bne	1e7d8 <__assert_fail@plt+0xc08c>
   1e774:	cmp	fp, #11
   1e778:	bne	1e714 <__assert_fail@plt+0xbfc8>
   1e77c:	b	1e748 <__assert_fail@plt+0xbffc>
   1e780:	cmp	fp, #11
   1e784:	bne	1e7a4 <__assert_fail@plt+0xc058>
   1e788:	ldr	r3, [pc, #100]	; 1e7f4 <__assert_fail@plt+0xc0a8>
   1e78c:	mov	r1, r4
   1e790:	add	r0, sp, #20
   1e794:	str	r4, [sp, #20]
   1e798:	str	r3, [sp, #24]
   1e79c:	bl	1214c <nanosleep@plt>
   1e7a0:	ldr	fp, [r5]
   1e7a4:	mov	r0, r6
   1e7a8:	bl	12704 <close@plt>
   1e7ac:	str	fp, [r5]
   1e7b0:	ldr	r2, [sp, #52]	; 0x34
   1e7b4:	ldr	r3, [r7]
   1e7b8:	mov	r0, r4
   1e7bc:	cmp	r2, r3
   1e7c0:	bne	1e7e0 <__assert_fail@plt+0xc094>
   1e7c4:	add	sp, sp, #60	; 0x3c
   1e7c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7cc:	ldr	r4, [r0]
   1e7d0:	rsb	r4, r4, #0
   1e7d4:	b	1e7b0 <__assert_fail@plt+0xc064>
   1e7d8:	mvn	r4, #0
   1e7dc:	b	1e7a4 <__assert_fail@plt+0xc058>
   1e7e0:	bl	12200 <__stack_chk_fail@plt>
   1e7e4:	strdeq	r6, [r1], -r0
   1e7e8:	andeq	r0, r0, ip, asr r2
   1e7ec:	andeq	r0, r8, r1
   1e7f0:	andeq	r5, r0, r4, asr pc
   1e7f4:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1e7f8:	ldr	ip, [pc, #328]	; 1e948 <__assert_fail@plt+0xc1fc>
   1e7fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e800:	add	ip, pc, ip
   1e804:	ldr	lr, [pc, #320]	; 1e94c <__assert_fail@plt+0xc200>
   1e808:	sub	sp, sp, #76	; 0x4c
   1e80c:	mov	r9, r3
   1e810:	ldr	r7, [ip, lr]
   1e814:	mov	r3, ip
   1e818:	ldr	r1, [pc, #304]	; 1e950 <__assert_fail@plt+0xc204>
   1e81c:	ldr	r3, [r7]
   1e820:	mov	r8, r2
   1e824:	ldr	r2, [sp, #112]	; 0x70
   1e828:	str	r3, [sp, #68]	; 0x44
   1e82c:	bl	1d05c <__assert_fail@plt+0xa910>
   1e830:	mov	r6, r0
   1e834:	bl	1247c <__errno_location@plt>
   1e838:	cmp	r6, #0
   1e83c:	mov	r5, r0
   1e840:	blt	1e930 <__assert_fail@plt+0xc1e4>
   1e844:	ldr	r2, [pc, #264]	; 1e954 <__assert_fail@plt+0xc208>
   1e848:	mov	r3, #37	; 0x25
   1e84c:	add	r2, pc, r2
   1e850:	strd	r8, [sp, #8]
   1e854:	str	r2, [sp]
   1e858:	add	r0, sp, #28
   1e85c:	mov	r1, r3
   1e860:	mov	r2, #1
   1e864:	mov	r8, r0
   1e868:	bl	12728 <__snprintf_chk@plt>
   1e86c:	mov	r9, #0
   1e870:	add	sl, sp, #20
   1e874:	mov	r4, r0
   1e878:	str	r9, [r5]
   1e87c:	mov	r2, r4
   1e880:	mov	r1, r8
   1e884:	mov	r0, r6
   1e888:	bl	12554 <write@plt>
   1e88c:	cmp	r0, #0
   1e890:	ble	1e8c8 <__assert_fail@plt+0xc17c>
   1e894:	subs	r4, r4, r0
   1e898:	ldr	fp, [r5]
   1e89c:	beq	1e8e4 <__assert_fail@plt+0xc198>
   1e8a0:	cmp	fp, #11
   1e8a4:	add	r8, r8, r0
   1e8a8:	bne	1e878 <__assert_fail@plt+0xc12c>
   1e8ac:	ldr	r3, [pc, #164]	; 1e958 <__assert_fail@plt+0xc20c>
   1e8b0:	mov	r1, #0
   1e8b4:	mov	r0, sl
   1e8b8:	str	r9, [sp, #20]
   1e8bc:	str	r3, [sp, #24]
   1e8c0:	bl	1214c <nanosleep@plt>
   1e8c4:	b	1e878 <__assert_fail@plt+0xc12c>
   1e8c8:	ldr	fp, [r5]
   1e8cc:	cmp	fp, #4
   1e8d0:	cmpne	fp, #11
   1e8d4:	bne	1e93c <__assert_fail@plt+0xc1f0>
   1e8d8:	cmp	fp, #11
   1e8dc:	bne	1e878 <__assert_fail@plt+0xc12c>
   1e8e0:	b	1e8ac <__assert_fail@plt+0xc160>
   1e8e4:	cmp	fp, #11
   1e8e8:	bne	1e908 <__assert_fail@plt+0xc1bc>
   1e8ec:	ldr	r3, [pc, #100]	; 1e958 <__assert_fail@plt+0xc20c>
   1e8f0:	mov	r1, r4
   1e8f4:	add	r0, sp, #20
   1e8f8:	str	r4, [sp, #20]
   1e8fc:	str	r3, [sp, #24]
   1e900:	bl	1214c <nanosleep@plt>
   1e904:	ldr	fp, [r5]
   1e908:	mov	r0, r6
   1e90c:	bl	12704 <close@plt>
   1e910:	str	fp, [r5]
   1e914:	ldr	r2, [sp, #68]	; 0x44
   1e918:	ldr	r3, [r7]
   1e91c:	mov	r0, r4
   1e920:	cmp	r2, r3
   1e924:	bne	1e944 <__assert_fail@plt+0xc1f8>
   1e928:	add	sp, sp, #76	; 0x4c
   1e92c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e930:	ldr	r4, [r0]
   1e934:	rsb	r4, r4, #0
   1e938:	b	1e914 <__assert_fail@plt+0xc1c8>
   1e93c:	mvn	r4, #0
   1e940:	b	1e908 <__assert_fail@plt+0xc1bc>
   1e944:	bl	12200 <__stack_chk_fail@plt>
   1e948:	andeq	r6, r1, ip, lsl #11
   1e94c:	andeq	r0, r0, ip, asr r2
   1e950:	andeq	r0, r8, r1
   1e954:	strdeq	r5, [r0], -r8
   1e958:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1e95c:	ldr	r1, [pc, #124]	; 1e9e0 <__assert_fail@plt+0xc294>
   1e960:	ldr	ip, [pc, #124]	; 1e9e4 <__assert_fail@plt+0xc298>
   1e964:	add	r1, pc, r1
   1e968:	push	{r4, r5, r6, r7, lr}
   1e96c:	sub	sp, sp, #20
   1e970:	ldr	r6, [r1, ip]
   1e974:	add	lr, sp, #44	; 0x2c
   1e978:	mov	r5, r3
   1e97c:	mov	r3, r1
   1e980:	ldr	r3, [r6]
   1e984:	mov	r4, r2
   1e988:	ldr	r1, [sp, #40]	; 0x28
   1e98c:	mov	r2, lr
   1e990:	str	lr, [sp, #8]
   1e994:	str	r3, [sp, #12]
   1e998:	mov	r7, r0
   1e99c:	bl	1c484 <__assert_fail@plt+0x9d38>
   1e9a0:	cmp	r0, #0
   1e9a4:	beq	1e9d4 <__assert_fail@plt+0xc288>
   1e9a8:	str	r0, [sp]
   1e9ac:	mov	r2, r4
   1e9b0:	mov	r3, r5
   1e9b4:	mov	r0, r7
   1e9b8:	bl	1e7f8 <__assert_fail@plt+0xc0ac>
   1e9bc:	ldr	r2, [sp, #12]
   1e9c0:	ldr	r3, [r6]
   1e9c4:	cmp	r2, r3
   1e9c8:	bne	1e9dc <__assert_fail@plt+0xc290>
   1e9cc:	add	sp, sp, #20
   1e9d0:	pop	{r4, r5, r6, r7, pc}
   1e9d4:	mvn	r0, #21
   1e9d8:	b	1e9bc <__assert_fail@plt+0xc270>
   1e9dc:	bl	12200 <__stack_chk_fail@plt>
   1e9e0:	andeq	r6, r1, r8, lsr #8
   1e9e4:	andeq	r0, r0, ip, asr r2
   1e9e8:	push	{r4, r5, r6, r7, r8, lr}
   1e9ec:	bl	1d640 <__assert_fail@plt+0xaef4>
   1e9f0:	subs	r6, r0, #0
   1e9f4:	moveq	r5, r6
   1e9f8:	beq	1ea58 <__assert_fail@plt+0xc30c>
   1e9fc:	ldr	r8, [pc, #92]	; 1ea60 <__assert_fail@plt+0xc314>
   1ea00:	ldr	r7, [pc, #92]	; 1ea64 <__assert_fail@plt+0xc318>
   1ea04:	mov	r5, #0
   1ea08:	add	r8, pc, r8
   1ea0c:	add	r7, pc, r7
   1ea10:	mov	r0, r6
   1ea14:	bl	12644 <readdir64@plt>
   1ea18:	mov	r1, r8
   1ea1c:	cmp	r0, #0
   1ea20:	add	r4, r0, #19
   1ea24:	mov	r0, r4
   1ea28:	beq	1ea50 <__assert_fail@plt+0xc304>
   1ea2c:	bl	120c8 <strcmp@plt>
   1ea30:	mov	r1, r7
   1ea34:	cmp	r0, #0
   1ea38:	mov	r0, r4
   1ea3c:	beq	1ea10 <__assert_fail@plt+0xc2c4>
   1ea40:	bl	120c8 <strcmp@plt>
   1ea44:	cmp	r0, #0
   1ea48:	addne	r5, r5, #1
   1ea4c:	b	1ea10 <__assert_fail@plt+0xc2c4>
   1ea50:	mov	r0, r6
   1ea54:	bl	1271c <closedir@plt>
   1ea58:	mov	r0, r5
   1ea5c:	pop	{r4, r5, r6, r7, r8, pc}
   1ea60:			; <UNDEFINED> instruction: 0x000044b8
   1ea64:			; <UNDEFINED> instruction: 0x000044b8
   1ea68:	push	{r1, r2, r3}
   1ea6c:	ldr	r3, [pc, #104]	; 1eadc <__assert_fail@plt+0xc390>
   1ea70:	ldr	r1, [pc, #104]	; 1eae0 <__assert_fail@plt+0xc394>
   1ea74:	add	r3, pc, r3
   1ea78:	push	{r4, r5, lr}
   1ea7c:	sub	sp, sp, #8
   1ea80:	ldr	r4, [r3, r1]
   1ea84:	add	ip, sp, #24
   1ea88:	ldr	r1, [sp, #20]
   1ea8c:	ldr	r3, [r4]
   1ea90:	mov	r2, ip
   1ea94:	str	ip, [sp]
   1ea98:	mov	r5, r0
   1ea9c:	str	r3, [sp, #4]
   1eaa0:	bl	1c484 <__assert_fail@plt+0x9d38>
   1eaa4:	subs	r1, r0, #0
   1eaa8:	moveq	r0, r1
   1eaac:	beq	1eab8 <__assert_fail@plt+0xc36c>
   1eab0:	mov	r0, r5
   1eab4:	bl	1e9e8 <__assert_fail@plt+0xc29c>
   1eab8:	ldr	r2, [sp, #4]
   1eabc:	ldr	r3, [r4]
   1eac0:	cmp	r2, r3
   1eac4:	bne	1ead8 <__assert_fail@plt+0xc38c>
   1eac8:	add	sp, sp, #8
   1eacc:	pop	{r4, r5, lr}
   1ead0:	add	sp, sp, #12
   1ead4:	bx	lr
   1ead8:	bl	12200 <__stack_chk_fail@plt>
   1eadc:	andeq	r6, r1, r8, lsl r3
   1eae0:	andeq	r0, r0, ip, asr r2
   1eae4:	ldr	r3, [pc, #184]	; 1eba4 <__assert_fail@plt+0xc458>
   1eae8:	push	{r4, r5, r6, lr}
   1eaec:	add	r3, pc, r3
   1eaf0:	ldr	lr, [pc, #176]	; 1eba8 <__assert_fail@plt+0xc45c>
   1eaf4:	sub	sp, sp, #4096	; 0x1000
   1eaf8:	sub	sp, sp, #24
   1eafc:	ldr	r5, [r3, lr]
   1eb00:	mov	r6, r2
   1eb04:	add	r2, sp, #4096	; 0x1000
   1eb08:	add	r2, r2, #20
   1eb0c:	ldr	r3, [r5]
   1eb10:	subs	ip, r1, #0
   1eb14:	str	r3, [r2]
   1eb18:	beq	1eb98 <__assert_fail@plt+0xc44c>
   1eb1c:	cmp	r0, #0
   1eb20:	beq	1eb88 <__assert_fail@plt+0xc43c>
   1eb24:	ldrsb	r3, [ip]
   1eb28:	ldr	r2, [pc, #124]	; 1ebac <__assert_fail@plt+0xc460>
   1eb2c:	add	r4, sp, #20
   1eb30:	cmp	r3, #47	; 0x2f
   1eb34:	addeq	ip, ip, #1
   1eb38:	add	r2, pc, r2
   1eb3c:	mov	r3, #4096	; 0x1000
   1eb40:	stmib	sp, {r0, ip}
   1eb44:	str	r2, [sp]
   1eb48:	mov	r1, r3
   1eb4c:	mov	r0, r4
   1eb50:	mov	r2, #1
   1eb54:	bl	12728 <__snprintf_chk@plt>
   1eb58:	mov	r1, r6
   1eb5c:	mov	r0, r4
   1eb60:	bl	12680 <fopen64@plt>
   1eb64:	add	r3, sp, #4096	; 0x1000
   1eb68:	add	r3, r3, #20
   1eb6c:	ldr	r2, [r3]
   1eb70:	ldr	r3, [r5]
   1eb74:	cmp	r2, r3
   1eb78:	bne	1eba0 <__assert_fail@plt+0xc454>
   1eb7c:	add	sp, sp, #4096	; 0x1000
   1eb80:	add	sp, sp, #24
   1eb84:	pop	{r4, r5, r6, pc}
   1eb88:	mov	r1, r6
   1eb8c:	mov	r0, ip
   1eb90:	bl	12680 <fopen64@plt>
   1eb94:	b	1eb64 <__assert_fail@plt+0xc418>
   1eb98:	mov	r0, ip
   1eb9c:	b	1eb64 <__assert_fail@plt+0xc418>
   1eba0:	bl	12200 <__stack_chk_fail@plt>
   1eba4:	andeq	r6, r1, r0, lsr #5
   1eba8:	andeq	r0, r0, ip, asr r2
   1ebac:	ldrdeq	r5, [r0], -r8
   1ebb0:	push	{r3}		; (str r3, [sp, #-4]!)
   1ebb4:	ldr	r3, [pc, #88]	; 1ec14 <__assert_fail@plt+0xc4c8>
   1ebb8:	ldr	ip, [pc, #88]	; 1ec18 <__assert_fail@plt+0xc4cc>
   1ebbc:	add	r3, pc, r3
   1ebc0:	push	{r4, lr}
   1ebc4:	sub	sp, sp, #20
   1ebc8:	ldr	r4, [r3, ip]
   1ebcc:	ldr	lr, [sp, #28]
   1ebd0:	add	ip, sp, #32
   1ebd4:	str	lr, [sp]
   1ebd8:	ldr	r3, [r4]
   1ebdc:	str	ip, [sp, #4]
   1ebe0:	str	r3, [sp, #12]
   1ebe4:	mov	r3, #0
   1ebe8:	str	ip, [sp, #8]
   1ebec:	bl	1d494 <__assert_fail@plt+0xad48>
   1ebf0:	ldr	r2, [sp, #12]
   1ebf4:	ldr	r3, [r4]
   1ebf8:	cmp	r2, r3
   1ebfc:	bne	1ec10 <__assert_fail@plt+0xc4c4>
   1ec00:	add	sp, sp, #20
   1ec04:	pop	{r4, lr}
   1ec08:	add	sp, sp, #4
   1ec0c:	bx	lr
   1ec10:	bl	12200 <__stack_chk_fail@plt>
   1ec14:	ldrdeq	r6, [r1], -r0
   1ec18:	andeq	r0, r0, ip, asr r2
   1ec1c:	push	{r3}		; (str r3, [sp, #-4]!)
   1ec20:	ldr	r3, [pc, #88]	; 1ec80 <__assert_fail@plt+0xc534>
   1ec24:	ldr	ip, [pc, #88]	; 1ec84 <__assert_fail@plt+0xc538>
   1ec28:	add	r3, pc, r3
   1ec2c:	push	{r4, lr}
   1ec30:	sub	sp, sp, #20
   1ec34:	ldr	r4, [r3, ip]
   1ec38:	ldr	lr, [sp, #28]
   1ec3c:	add	ip, sp, #32
   1ec40:	str	lr, [sp]
   1ec44:	ldr	r3, [r4]
   1ec48:	str	ip, [sp, #4]
   1ec4c:	str	r3, [sp, #12]
   1ec50:	mov	r3, #1
   1ec54:	str	ip, [sp, #8]
   1ec58:	bl	1d494 <__assert_fail@plt+0xad48>
   1ec5c:	ldr	r2, [sp, #12]
   1ec60:	ldr	r3, [r4]
   1ec64:	cmp	r2, r3
   1ec68:	bne	1ec7c <__assert_fail@plt+0xc530>
   1ec6c:	add	sp, sp, #20
   1ec70:	pop	{r4, lr}
   1ec74:	add	sp, sp, #4
   1ec78:	bx	lr
   1ec7c:	bl	12200 <__stack_chk_fail@plt>
   1ec80:	andeq	r6, r1, r4, ror #2
   1ec84:	andeq	r0, r0, ip, asr r2
   1ec88:	push	{r1, r2, r3}
   1ec8c:	subs	r3, r0, #0
   1ec90:	ldr	r1, [pc, #168]	; 1ed40 <__assert_fail@plt+0xc5f4>
   1ec94:	ldr	r2, [pc, #168]	; 1ed44 <__assert_fail@plt+0xc5f8>
   1ec98:	add	r1, pc, r1
   1ec9c:	push	{r4, r5, r6, lr}
   1eca0:	sub	sp, sp, #12
   1eca4:	ldr	r5, [r1, r2]
   1eca8:	ldr	r6, [sp, #28]
   1ecac:	ldr	r2, [r5]
   1ecb0:	str	r2, [sp, #4]
   1ecb4:	beq	1eccc <__assert_fail@plt+0xc580>
   1ecb8:	ldr	r2, [pc, #136]	; 1ed48 <__assert_fail@plt+0xc5fc>
   1ecbc:	add	r2, pc, r2
   1ecc0:	ldr	r2, [r2]
   1ecc4:	tst	r2, #16777216	; 0x1000000
   1ecc8:	beq	1ed1c <__assert_fail@plt+0xc5d0>
   1eccc:	ldr	r3, [pc, #120]	; 1ed4c <__assert_fail@plt+0xc600>
   1ecd0:	ldr	r4, [r1, r3]
   1ecd4:	add	ip, sp, #32
   1ecd8:	mov	r2, r6
   1ecdc:	mov	r3, ip
   1ece0:	mov	r1, #1
   1ece4:	ldr	r0, [r4]
   1ece8:	str	ip, [sp]
   1ecec:	bl	1238c <__vfprintf_chk@plt>
   1ecf0:	ldr	r1, [r4]
   1ecf4:	mov	r0, #10
   1ecf8:	bl	12620 <fputc@plt>
   1ecfc:	ldr	r2, [sp, #4]
   1ed00:	ldr	r3, [r5]
   1ed04:	cmp	r2, r3
   1ed08:	bne	1ed3c <__assert_fail@plt+0xc5f0>
   1ed0c:	add	sp, sp, #12
   1ed10:	pop	{r4, r5, r6, lr}
   1ed14:	add	sp, sp, #12
   1ed18:	bx	lr
   1ed1c:	ldr	r0, [pc, #40]	; 1ed4c <__assert_fail@plt+0xc600>
   1ed20:	ldr	r2, [pc, #40]	; 1ed50 <__assert_fail@plt+0xc604>
   1ed24:	ldr	r4, [r1, r0]
   1ed28:	add	r2, pc, r2
   1ed2c:	mov	r1, #1
   1ed30:	ldr	r0, [r4]
   1ed34:	bl	12578 <__fprintf_chk@plt>
   1ed38:	b	1ecd4 <__assert_fail@plt+0xc588>
   1ed3c:	bl	12200 <__stack_chk_fail@plt>
   1ed40:	strdeq	r6, [r1], -r4
   1ed44:	andeq	r0, r0, ip, asr r2
   1ed48:	andeq	r6, r1, r8, asr r5
   1ed4c:	andeq	r0, r0, r0, ror #4
   1ed50:	andeq	r4, r0, r0, asr lr
   1ed54:	ldr	r3, [pc, #184]	; 1ee14 <__assert_fail@plt+0xc6c8>
   1ed58:	push	{r4, r5, lr}
   1ed5c:	subs	r4, r0, #0
   1ed60:	sub	sp, sp, #12
   1ed64:	add	r3, pc, r3
   1ed68:	beq	1edb8 <__assert_fail@plt+0xc66c>
   1ed6c:	ldr	r2, [pc, #164]	; 1ee18 <__assert_fail@plt+0xc6cc>
   1ed70:	add	r2, pc, r2
   1ed74:	ldr	r2, [r2]
   1ed78:	tst	r2, #4
   1ed7c:	bne	1edc0 <__assert_fail@plt+0xc674>
   1ed80:	mov	r0, r4
   1ed84:	bl	1cb90 <__assert_fail@plt+0xa444>
   1ed88:	subs	r5, r0, #0
   1ed8c:	beq	1edb8 <__assert_fail@plt+0xc66c>
   1ed90:	ldr	r0, [r5, #8]
   1ed94:	bl	1c65c <__assert_fail@plt+0x9f10>
   1ed98:	mov	r0, r5
   1ed9c:	bl	12134 <free@plt>
   1eda0:	mov	r2, #0
   1eda4:	mov	r0, r4
   1eda8:	mov	r1, r2
   1edac:	add	sp, sp, #12
   1edb0:	pop	{r4, r5, lr}
   1edb4:	b	1cadc <__assert_fail@plt+0xa390>
   1edb8:	add	sp, sp, #12
   1edbc:	pop	{r4, r5, pc}
   1edc0:	ldr	r2, [pc, #84]	; 1ee1c <__assert_fail@plt+0xc6d0>
   1edc4:	ldr	r3, [r3, r2]
   1edc8:	ldr	r5, [r3]
   1edcc:	bl	123ec <getpid@plt>
   1edd0:	ldr	r2, [pc, #72]	; 1ee20 <__assert_fail@plt+0xc6d4>
   1edd4:	ldr	r3, [pc, #72]	; 1ee24 <__assert_fail@plt+0xc6d8>
   1edd8:	add	r2, pc, r2
   1eddc:	str	r2, [sp, #4]
   1ede0:	ldr	r2, [pc, #64]	; 1ee28 <__assert_fail@plt+0xc6dc>
   1ede4:	add	r3, pc, r3
   1ede8:	str	r3, [sp]
   1edec:	add	r2, pc, r2
   1edf0:	mov	r1, #1
   1edf4:	mov	r3, r0
   1edf8:	mov	r0, r5
   1edfc:	bl	12578 <__fprintf_chk@plt>
   1ee00:	ldr	r1, [pc, #36]	; 1ee2c <__assert_fail@plt+0xc6e0>
   1ee04:	mov	r0, r4
   1ee08:	add	r1, pc, r1
   1ee0c:	bl	1ec88 <__assert_fail@plt+0xc53c>
   1ee10:	b	1ed80 <__assert_fail@plt+0xc634>
   1ee14:	andeq	r6, r1, r8, lsr #32
   1ee18:	andeq	r6, r1, r4, lsr #9
   1ee1c:	andeq	r0, r0, r0, ror #4
   1ee20:			; <UNDEFINED> instruction: 0x00004db8
   1ee24:	andeq	r5, r0, ip, lsl #17
   1ee28:	muleq	r0, r4, sp
   1ee2c:	andeq	r5, r0, r0, ror r8
   1ee30:	push	{r4, r5, r6, r7, r8, lr}
   1ee34:	mov	r7, r0
   1ee38:	ldr	r6, [pc, #76]	; 1ee8c <__assert_fail@plt+0xc740>
   1ee3c:	ldr	r8, [pc, #76]	; 1ee90 <__assert_fail@plt+0xc744>
   1ee40:	add	r6, pc, r6
   1ee44:	add	r8, pc, r8
   1ee48:	mov	r0, r7
   1ee4c:	bl	12644 <readdir64@plt>
   1ee50:	mov	r1, r6
   1ee54:	subs	r5, r0, #0
   1ee58:	add	r4, r5, #19
   1ee5c:	mov	r0, r4
   1ee60:	beq	1ee84 <__assert_fail@plt+0xc738>
   1ee64:	bl	120c8 <strcmp@plt>
   1ee68:	mov	r1, r8
   1ee6c:	cmp	r0, #0
   1ee70:	mov	r0, r4
   1ee74:	beq	1ee48 <__assert_fail@plt+0xc6fc>
   1ee78:	bl	120c8 <strcmp@plt>
   1ee7c:	cmp	r0, #0
   1ee80:	beq	1ee48 <__assert_fail@plt+0xc6fc>
   1ee84:	mov	r0, r5
   1ee88:	pop	{r4, r5, r6, r7, r8, pc}
   1ee8c:	andeq	r4, r0, r0, lsl #1
   1ee90:	andeq	r4, r0, r0, lsl #1
   1ee94:	ldr	r3, [pc, #196]	; 1ef60 <__assert_fail@plt+0xc814>
   1ee98:	ldr	r2, [pc, #196]	; 1ef64 <__assert_fail@plt+0xc818>
   1ee9c:	add	r3, pc, r3
   1eea0:	push	{r4, r5, r6, r7, lr}
   1eea4:	sub	sp, sp, #20
   1eea8:	ldr	r6, [r3, r2]
   1eeac:	ldr	r1, [pc, #180]	; 1ef68 <__assert_fail@plt+0xc81c>
   1eeb0:	mov	r4, #0
   1eeb4:	ldr	r3, [r6]
   1eeb8:	add	r1, pc, r1
   1eebc:	str	r4, [sp, #4]
   1eec0:	str	r4, [sp, #8]
   1eec4:	str	r3, [sp, #12]
   1eec8:	bl	12680 <fopen64@plt>
   1eecc:	subs	r7, r0, #0
   1eed0:	beq	1ef50 <__assert_fail@plt+0xc804>
   1eed4:	ldr	r1, [pc, #144]	; 1ef6c <__assert_fail@plt+0xc820>
   1eed8:	add	r3, sp, #8
   1eedc:	add	r2, sp, #4
   1eee0:	add	r1, pc, r1
   1eee4:	bl	12500 <fscanf@plt>
   1eee8:	cmp	r0, #2
   1eeec:	movne	r5, r4
   1eef0:	beq	1ef1c <__assert_fail@plt+0xc7d0>
   1eef4:	mov	r0, r7
   1eef8:	bl	12590 <fclose@plt>
   1eefc:	ldr	r2, [sp, #12]
   1ef00:	ldr	r3, [r6]
   1ef04:	mov	r0, r4
   1ef08:	cmp	r2, r3
   1ef0c:	mov	r1, r5
   1ef10:	bne	1ef5c <__assert_fail@plt+0xc810>
   1ef14:	add	sp, sp, #20
   1ef18:	pop	{r4, r5, r6, r7, pc}
   1ef1c:	ldr	r1, [sp, #8]
   1ef20:	ldr	r5, [sp, #4]
   1ef24:	ldr	r2, [pc, #68]	; 1ef70 <__assert_fail@plt+0xc824>
   1ef28:	sub	r4, r4, #1048576	; 0x100000
   1ef2c:	and	r2, r2, r5, lsl #8
   1ef30:	uxtb	r3, r1
   1ef34:	bic	r5, r5, #4080	; 0xff0
   1ef38:	orr	r3, r3, r2
   1ef3c:	bic	r5, r5, #15
   1ef40:	and	r4, r4, r1, lsl #12
   1ef44:	orr	r5, r5, r1, lsr #20
   1ef48:	orr	r4, r4, r3
   1ef4c:	b	1eef4 <__assert_fail@plt+0xc7a8>
   1ef50:	mov	r4, r7
   1ef54:	mov	r5, r7
   1ef58:	b	1eefc <__assert_fail@plt+0xc7b0>
   1ef5c:	bl	12200 <__stack_chk_fail@plt>
   1ef60:	strdeq	r5, [r1], -r0
   1ef64:	andeq	r0, r0, ip, asr r2
   1ef68:	andeq	r4, r0, r4, lsr #31
   1ef6c:	andeq	r5, r0, ip, ror #14
   1ef70:	andeq	pc, pc, r0, lsl #30
   1ef74:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ef78:	sub	sp, sp, #12
   1ef7c:	mov	r6, r1
   1ef80:	mov	r7, r2
   1ef84:	mov	r8, r0
   1ef88:	bl	1cb90 <__assert_fail@plt+0xa444>
   1ef8c:	ldr	r4, [pc, #188]	; 1f050 <__assert_fail@plt+0xc904>
   1ef90:	add	r4, pc, r4
   1ef94:	cmp	r0, #0
   1ef98:	beq	1efc4 <__assert_fail@plt+0xc878>
   1ef9c:	ldr	r5, [r0, #8]
   1efa0:	cmp	r5, #0
   1efa4:	beq	1efc4 <__assert_fail@plt+0xc878>
   1efa8:	ldr	r1, [pc, #164]	; 1f054 <__assert_fail@plt+0xc908>
   1efac:	mov	r2, #6
   1efb0:	add	r1, pc, r1
   1efb4:	mov	r0, r6
   1efb8:	bl	126e0 <strncmp@plt>
   1efbc:	subs	r9, r0, #0
   1efc0:	beq	1efd0 <__assert_fail@plt+0xc884>
   1efc4:	mov	r0, #1
   1efc8:	add	sp, sp, #12
   1efcc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1efd0:	mov	r0, r5
   1efd4:	bl	1cbb0 <__assert_fail@plt+0xa464>
   1efd8:	cmp	r0, #0
   1efdc:	str	r0, [r7]
   1efe0:	blt	1efc4 <__assert_fail@plt+0xc878>
   1efe4:	ldr	r3, [pc, #108]	; 1f058 <__assert_fail@plt+0xc90c>
   1efe8:	ldr	r0, [pc, r3]
   1efec:	ands	r0, r0, #4
   1eff0:	beq	1efc8 <__assert_fail@plt+0xc87c>
   1eff4:	ldr	r3, [pc, #96]	; 1f05c <__assert_fail@plt+0xc910>
   1eff8:	ldr	r3, [r4, r3]
   1effc:	ldr	r4, [r3]
   1f000:	bl	123ec <getpid@plt>
   1f004:	ldr	r2, [pc, #84]	; 1f060 <__assert_fail@plt+0xc914>
   1f008:	ldr	r3, [pc, #84]	; 1f064 <__assert_fail@plt+0xc918>
   1f00c:	add	r2, pc, r2
   1f010:	str	r2, [sp, #4]
   1f014:	ldr	r2, [pc, #76]	; 1f068 <__assert_fail@plt+0xc91c>
   1f018:	add	r3, pc, r3
   1f01c:	str	r3, [sp]
   1f020:	add	r2, pc, r2
   1f024:	mov	r1, #1
   1f028:	mov	r3, r0
   1f02c:	mov	r0, r4
   1f030:	bl	12578 <__fprintf_chk@plt>
   1f034:	ldr	r1, [pc, #48]	; 1f06c <__assert_fail@plt+0xc920>
   1f038:	mov	r0, r8
   1f03c:	mov	r2, r6
   1f040:	add	r1, pc, r1
   1f044:	bl	1ec88 <__assert_fail@plt+0xc53c>
   1f048:	mov	r0, r9
   1f04c:	b	1efc8 <__assert_fail@plt+0xc87c>
   1f050:	strdeq	r5, [r1], -ip
   1f054:	ldrdeq	r5, [r0], -r0
   1f058:	andeq	r6, r1, ip, lsr #4
   1f05c:	andeq	r0, r0, r0, ror #4
   1f060:	andeq	r4, r0, r4, lsl #23
   1f064:	andeq	r5, r0, r8, asr r6
   1f068:	andeq	r4, r0, r0, ror #22
   1f06c:	andeq	r5, r0, r8, asr #12
   1f070:	push	{r4, r5, r6, r7, lr}
   1f074:	sub	sp, sp, #20
   1f078:	ldr	r4, [pc, #312]	; 1f1b8 <__assert_fail@plt+0xca6c>
   1f07c:	ldr	r3, [pc, #312]	; 1f1bc <__assert_fail@plt+0xca70>
   1f080:	add	r4, pc, r4
   1f084:	ldr	r7, [pc, #308]	; 1f1c0 <__assert_fail@plt+0xca74>
   1f088:	ldr	r5, [r4, r3]
   1f08c:	add	r7, pc, r7
   1f090:	ldr	r6, [r7]
   1f094:	ldr	r3, [r5]
   1f098:	cmp	r6, #0
   1f09c:	str	r3, [sp, #12]
   1f0a0:	beq	1f0bc <__assert_fail@plt+0xc970>
   1f0a4:	ldr	r2, [sp, #12]
   1f0a8:	ldr	r3, [r5]
   1f0ac:	cmp	r2, r3
   1f0b0:	bne	1f1b4 <__assert_fail@plt+0xca68>
   1f0b4:	add	sp, sp, #20
   1f0b8:	pop	{r4, r5, r6, r7, pc}
   1f0bc:	ldr	r0, [pc, #256]	; 1f1c4 <__assert_fail@plt+0xca78>
   1f0c0:	add	r0, pc, r0
   1f0c4:	bl	12338 <getenv@plt>
   1f0c8:	cmp	r0, #0
   1f0cc:	beq	1f114 <__assert_fail@plt+0xc9c8>
   1f0d0:	mov	r2, r6
   1f0d4:	add	r1, sp, #8
   1f0d8:	bl	1241c <strtoul@plt>
   1f0dc:	mov	r6, r0
   1f0e0:	ldr	r0, [sp, #8]
   1f0e4:	cmp	r0, #0
   1f0e8:	beq	1f100 <__assert_fail@plt+0xc9b4>
   1f0ec:	ldr	r1, [pc, #212]	; 1f1c8 <__assert_fail@plt+0xca7c>
   1f0f0:	add	r1, pc, r1
   1f0f4:	bl	120c8 <strcmp@plt>
   1f0f8:	cmp	r0, #0
   1f0fc:	beq	1f128 <__assert_fail@plt+0xc9dc>
   1f100:	ldr	r3, [pc, #196]	; 1f1cc <__assert_fail@plt+0xca80>
   1f104:	cmp	r6, #0
   1f108:	add	r3, pc, r3
   1f10c:	str	r6, [r3]
   1f110:	bne	1f134 <__assert_fail@plt+0xc9e8>
   1f114:	mov	r3, #2
   1f118:	ldr	r2, [pc, #176]	; 1f1d0 <__assert_fail@plt+0xca84>
   1f11c:	add	r2, pc, r2
   1f120:	str	r3, [r2]
   1f124:	b	1f0a4 <__assert_fail@plt+0xc958>
   1f128:	ldr	r3, [pc, #164]	; 1f1d4 <__assert_fail@plt+0xca88>
   1f12c:	mov	r6, r3
   1f130:	str	r3, [r7]
   1f134:	bl	1211c <getuid@plt>
   1f138:	mov	r7, r0
   1f13c:	bl	12248 <geteuid@plt>
   1f140:	cmp	r7, r0
   1f144:	beq	1f198 <__assert_fail@plt+0xca4c>
   1f148:	ldr	r7, [pc, #136]	; 1f1d8 <__assert_fail@plt+0xca8c>
   1f14c:	ldr	r2, [pc, #136]	; 1f1dc <__assert_fail@plt+0xca90>
   1f150:	add	r7, pc, r7
   1f154:	orr	r3, r6, #16777216	; 0x1000000
   1f158:	str	r3, [r7]
   1f15c:	ldr	r3, [r4, r2]
   1f160:	ldr	r4, [r3]
   1f164:	bl	123ec <getpid@plt>
   1f168:	ldr	r3, [pc, #112]	; 1f1e0 <__assert_fail@plt+0xca94>
   1f16c:	ldr	r2, [pc, #112]	; 1f1e4 <__assert_fail@plt+0xca98>
   1f170:	add	r3, pc, r3
   1f174:	str	r3, [sp]
   1f178:	add	r2, pc, r2
   1f17c:	mov	r1, #1
   1f180:	mov	r3, r0
   1f184:	mov	r0, r4
   1f188:	bl	12578 <__fprintf_chk@plt>
   1f18c:	ldr	r3, [r7]
   1f190:	orr	r3, r3, #2
   1f194:	b	1f118 <__assert_fail@plt+0xc9cc>
   1f198:	bl	124c4 <getgid@plt>
   1f19c:	mov	r7, r0
   1f1a0:	bl	12290 <getegid@plt>
   1f1a4:	cmp	r7, r0
   1f1a8:	orreq	r3, r6, #2
   1f1ac:	bne	1f148 <__assert_fail@plt+0xc9fc>
   1f1b0:	b	1f118 <__assert_fail@plt+0xc9cc>
   1f1b4:	bl	12200 <__stack_chk_fail@plt>
   1f1b8:	andeq	r5, r1, ip, lsl #26
   1f1bc:	andeq	r0, r0, ip, asr r2
   1f1c0:	andeq	r6, r1, r8, lsl #3
   1f1c4:	andeq	r5, r0, r0, ror #11
   1f1c8:	andeq	r4, r0, r4, asr fp
   1f1cc:	andeq	r6, r1, ip, lsl #2
   1f1d0:	strdeq	r6, [r1], -r8
   1f1d4:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1f1d8:	andeq	r6, r1, r4, asr #1
   1f1dc:	andeq	r0, r0, r0, ror #4
   1f1e0:	andeq	r5, r0, r0, lsl #10
   1f1e4:	ldrdeq	r4, [r0], -r0
   1f1e8:	push	{r4, r5, r6, r7, r8, lr}
   1f1ec:	sub	sp, sp, #8
   1f1f0:	mov	r7, r0
   1f1f4:	mov	r6, r1
   1f1f8:	bl	1cb90 <__assert_fail@plt+0xa444>
   1f1fc:	cmp	r7, #0
   1f200:	ldr	r8, [pc, #196]	; 1f2cc <__assert_fail@plt+0xcb80>
   1f204:	moveq	r4, #1
   1f208:	add	r8, pc, r8
   1f20c:	clz	r3, r0
   1f210:	lsr	r3, r3, #5
   1f214:	movne	r4, r3
   1f218:	cmp	r4, #0
   1f21c:	bne	1f2c4 <__assert_fail@plt+0xcb78>
   1f220:	mov	r5, r0
   1f224:	ldr	r0, [r0, #8]
   1f228:	cmp	r0, #0
   1f22c:	beq	1f238 <__assert_fail@plt+0xcaec>
   1f230:	bl	1c670 <__assert_fail@plt+0x9f24>
   1f234:	str	r4, [r5, #8]
   1f238:	cmp	r6, #0
   1f23c:	streq	r6, [r5, #8]
   1f240:	beq	1f250 <__assert_fail@plt+0xcb04>
   1f244:	mov	r0, r6
   1f248:	bl	1c65c <__assert_fail@plt+0x9f10>
   1f24c:	str	r6, [r5, #8]
   1f250:	ldr	r3, [pc, #120]	; 1f2d0 <__assert_fail@plt+0xcb84>
   1f254:	ldr	r0, [pc, r3]
   1f258:	ands	r0, r0, #4
   1f25c:	bne	1f268 <__assert_fail@plt+0xcb1c>
   1f260:	add	sp, sp, #8
   1f264:	pop	{r4, r5, r6, r7, r8, pc}
   1f268:	ldr	r3, [pc, #100]	; 1f2d4 <__assert_fail@plt+0xcb88>
   1f26c:	ldr	r3, [r8, r3]
   1f270:	ldr	r4, [r3]
   1f274:	bl	123ec <getpid@plt>
   1f278:	ldr	r2, [pc, #88]	; 1f2d8 <__assert_fail@plt+0xcb8c>
   1f27c:	ldr	r3, [pc, #88]	; 1f2dc <__assert_fail@plt+0xcb90>
   1f280:	add	r2, pc, r2
   1f284:	str	r2, [sp, #4]
   1f288:	ldr	r2, [pc, #80]	; 1f2e0 <__assert_fail@plt+0xcb94>
   1f28c:	add	r3, pc, r3
   1f290:	str	r3, [sp]
   1f294:	add	r2, pc, r2
   1f298:	mov	r1, #1
   1f29c:	mov	r3, r0
   1f2a0:	mov	r0, r4
   1f2a4:	bl	12578 <__fprintf_chk@plt>
   1f2a8:	ldr	r1, [pc, #52]	; 1f2e4 <__assert_fail@plt+0xcb98>
   1f2ac:	mov	r0, r7
   1f2b0:	add	r1, pc, r1
   1f2b4:	bl	1ec88 <__assert_fail@plt+0xc53c>
   1f2b8:	mov	r0, #0
   1f2bc:	add	sp, sp, #8
   1f2c0:	pop	{r4, r5, r6, r7, r8, pc}
   1f2c4:	mvn	r0, #21
   1f2c8:	b	1f260 <__assert_fail@plt+0xcb14>
   1f2cc:	andeq	r5, r1, r4, lsl #23
   1f2d0:	andeq	r5, r1, r0, asr #31
   1f2d4:	andeq	r0, r0, r0, ror #4
   1f2d8:	andeq	r4, r0, r0, lsl r9
   1f2dc:	andeq	r5, r0, r4, ror #7
   1f2e0:	andeq	r4, r0, ip, ror #17
   1f2e4:	andeq	r5, r0, r0, lsl #8
   1f2e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2ec:	mov	r5, r3
   1f2f0:	ldr	r6, [pc, #496]	; 1f4e8 <__assert_fail@plt+0xcd9c>
   1f2f4:	ldr	r1, [pc, #496]	; 1f4ec <__assert_fail@plt+0xcda0>
   1f2f8:	add	r6, pc, r6
   1f2fc:	lsr	r3, r2, #12
   1f300:	ldr	r7, [r6, r1]
   1f304:	lsl	lr, r2, #12
   1f308:	orr	r3, r3, r5, lsl #20
   1f30c:	bic	r1, r5, #4080	; 0xff0
   1f310:	bic	r3, r3, #255	; 0xff
   1f314:	mov	r4, r2
   1f318:	bic	r1, r1, #15
   1f31c:	uxtb	r2, r2
   1f320:	sub	sp, sp, #84	; 0x54
   1f324:	orr	r2, r3, r2
   1f328:	orr	r1, r1, lr, lsr #20
   1f32c:	ldr	ip, [pc, #444]	; 1f4f0 <__assert_fail@plt+0xcda4>
   1f330:	ldr	lr, [r7]
   1f334:	add	ip, pc, ip
   1f338:	mov	r3, #46	; 0x2e
   1f33c:	stmib	sp, {r1, r2}
   1f340:	add	r2, sp, #28
   1f344:	mov	r1, r3
   1f348:	mov	r8, r0
   1f34c:	str	r2, [sp, #20]
   1f350:	mov	r0, r2
   1f354:	str	ip, [sp]
   1f358:	mov	r2, #1
   1f35c:	str	lr, [sp, #76]	; 0x4c
   1f360:	ldr	sl, [sp, #120]	; 0x78
   1f364:	bl	12728 <__snprintf_chk@plt>
   1f368:	ldr	r1, [sp, #20]
   1f36c:	mov	r0, r8
   1f370:	bl	1c9e0 <__assert_fail@plt+0xa294>
   1f374:	subs	r9, r0, #0
   1f378:	beq	1f398 <__assert_fail@plt+0xcc4c>
   1f37c:	ldr	r2, [sp, #76]	; 0x4c
   1f380:	ldr	r3, [r7]
   1f384:	mov	r0, r9
   1f388:	cmp	r2, r3
   1f38c:	bne	1f4e4 <__assert_fail@plt+0xcd98>
   1f390:	add	sp, sp, #84	; 0x54
   1f394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f398:	mov	r0, r8
   1f39c:	bl	1cbb0 <__assert_fail@plt+0xa464>
   1f3a0:	cmp	r0, #0
   1f3a4:	movlt	r9, r0
   1f3a8:	blt	1f37c <__assert_fail@plt+0xcc30>
   1f3ac:	mov	r0, r8
   1f3b0:	bl	1cb90 <__assert_fail@plt+0xa444>
   1f3b4:	subs	fp, r0, #0
   1f3b8:	beq	1f438 <__assert_fail@plt+0xccec>
   1f3bc:	ldr	r3, [pc, #304]	; 1f4f4 <__assert_fail@plt+0xcda8>
   1f3c0:	add	r3, pc, r3
   1f3c4:	ldr	r3, [r3]
   1f3c8:	tst	r3, #4
   1f3cc:	bne	1f3e4 <__assert_fail@plt+0xcc98>
   1f3d0:	strd	r4, [fp]
   1f3d4:	mov	r1, sl
   1f3d8:	mov	r0, r8
   1f3dc:	bl	1f1e8 <__assert_fail@plt+0xca9c>
   1f3e0:	b	1f37c <__assert_fail@plt+0xcc30>
   1f3e4:	ldr	r3, [pc, #268]	; 1f4f8 <__assert_fail@plt+0xcdac>
   1f3e8:	ldr	r3, [r6, r3]
   1f3ec:	ldr	r6, [r3]
   1f3f0:	bl	123ec <getpid@plt>
   1f3f4:	ldr	r2, [pc, #256]	; 1f4fc <__assert_fail@plt+0xcdb0>
   1f3f8:	ldr	r3, [pc, #256]	; 1f500 <__assert_fail@plt+0xcdb4>
   1f3fc:	add	r2, pc, r2
   1f400:	str	r2, [sp, #4]
   1f404:	ldr	r2, [pc, #248]	; 1f504 <__assert_fail@plt+0xcdb8>
   1f408:	add	r3, pc, r3
   1f40c:	str	r3, [sp]
   1f410:	add	r2, pc, r2
   1f414:	mov	r1, #1
   1f418:	mov	r3, r0
   1f41c:	mov	r0, r6
   1f420:	bl	12578 <__fprintf_chk@plt>
   1f424:	ldr	r1, [pc, #220]	; 1f508 <__assert_fail@plt+0xcdbc>
   1f428:	mov	r0, r8
   1f42c:	add	r1, pc, r1
   1f430:	bl	1ec88 <__assert_fail@plt+0xc53c>
   1f434:	b	1f3d0 <__assert_fail@plt+0xcc84>
   1f438:	ldr	r3, [pc, #204]	; 1f50c <__assert_fail@plt+0xcdc0>
   1f43c:	add	r3, pc, r3
   1f440:	ldr	r3, [r3]
   1f444:	tst	r3, #4
   1f448:	bne	1f488 <__assert_fail@plt+0xcd3c>
   1f44c:	mov	r1, #32
   1f450:	mov	r0, #1
   1f454:	bl	12074 <calloc@plt>
   1f458:	subs	fp, r0, #0
   1f45c:	beq	1f4dc <__assert_fail@plt+0xcd90>
   1f460:	ldr	r2, [pc, #168]	; 1f510 <__assert_fail@plt+0xcdc4>
   1f464:	mov	r1, fp
   1f468:	add	r2, pc, r2
   1f46c:	mov	r0, r8
   1f470:	bl	1cadc <__assert_fail@plt+0xa390>
   1f474:	ldr	r1, [pc, #152]	; 1f514 <__assert_fail@plt+0xcdc8>
   1f478:	mov	r0, r8
   1f47c:	add	r1, pc, r1
   1f480:	bl	1cba0 <__assert_fail@plt+0xa454>
   1f484:	b	1f3bc <__assert_fail@plt+0xcc70>
   1f488:	ldr	r3, [pc, #104]	; 1f4f8 <__assert_fail@plt+0xcdac>
   1f48c:	ldr	r3, [r6, r3]
   1f490:	ldr	fp, [r3]
   1f494:	bl	123ec <getpid@plt>
   1f498:	ldr	r2, [pc, #120]	; 1f518 <__assert_fail@plt+0xcdcc>
   1f49c:	ldr	r3, [pc, #120]	; 1f51c <__assert_fail@plt+0xcdd0>
   1f4a0:	add	r2, pc, r2
   1f4a4:	str	r2, [sp, #4]
   1f4a8:	ldr	r2, [pc, #112]	; 1f520 <__assert_fail@plt+0xcdd4>
   1f4ac:	add	r3, pc, r3
   1f4b0:	str	r3, [sp]
   1f4b4:	add	r2, pc, r2
   1f4b8:	mov	r1, #1
   1f4bc:	mov	r3, r0
   1f4c0:	mov	r0, fp
   1f4c4:	bl	12578 <__fprintf_chk@plt>
   1f4c8:	ldr	r1, [pc, #84]	; 1f524 <__assert_fail@plt+0xcdd8>
   1f4cc:	mov	r0, r8
   1f4d0:	add	r1, pc, r1
   1f4d4:	bl	1ec88 <__assert_fail@plt+0xc53c>
   1f4d8:	b	1f44c <__assert_fail@plt+0xcd00>
   1f4dc:	mvn	r9, #11
   1f4e0:	b	1f37c <__assert_fail@plt+0xcc30>
   1f4e4:	bl	12200 <__stack_chk_fail@plt>
   1f4e8:	muleq	r1, r4, sl
   1f4ec:	andeq	r0, r0, ip, asr r2
   1f4f0:	andeq	r5, r0, r8, lsl #7
   1f4f4:	andeq	r5, r1, r4, asr lr
   1f4f8:	andeq	r0, r0, r0, ror #4
   1f4fc:	muleq	r0, r4, r7
   1f500:	andeq	r5, r0, r8, ror #4
   1f504:	andeq	r4, r0, r0, ror r7
   1f508:	andeq	r5, r0, r0, asr #5
   1f50c:	ldrdeq	r5, [r1], -r8
   1f510:			; <UNDEFINED> instruction: 0xfffff8e4
   1f514:			; <UNDEFINED> instruction: 0xfffffaf0
   1f518:	strdeq	r4, [r0], -r0
   1f51c:	andeq	r5, r0, r4, asr #3
   1f520:	andeq	r4, r0, ip, asr #13
   1f524:	andeq	r5, r0, r4, lsl #4
   1f528:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f52c:	mov	r8, r0
   1f530:	sub	sp, sp, #12
   1f534:	mov	r0, #0
   1f538:	mov	r9, r1
   1f53c:	mov	r7, r2
   1f540:	mov	r5, r3
   1f544:	bl	1c778 <__assert_fail@plt+0xa02c>
   1f548:	ldr	r6, [pc, #192]	; 1f610 <__assert_fail@plt+0xcec4>
   1f54c:	add	r6, pc, r6
   1f550:	subs	r4, r0, #0
   1f554:	beq	1f598 <__assert_fail@plt+0xce4c>
   1f558:	cmp	r5, #0
   1f55c:	beq	1f568 <__assert_fail@plt+0xce1c>
   1f560:	mov	r1, r5
   1f564:	bl	1c8bc <__assert_fail@plt+0xa170>
   1f568:	str	r7, [sp]
   1f56c:	mov	r2, r8
   1f570:	mov	r3, r9
   1f574:	mov	r0, r4
   1f578:	bl	1f2e8 <__assert_fail@plt+0xcb9c>
   1f57c:	cmp	r0, #0
   1f580:	bne	1f600 <__assert_fail@plt+0xceb4>
   1f584:	ldr	r3, [pc, #136]	; 1f614 <__assert_fail@plt+0xcec8>
   1f588:	add	r3, pc, r3
   1f58c:	ldr	r3, [r3]
   1f590:	tst	r3, #4
   1f594:	bne	1f5a4 <__assert_fail@plt+0xce58>
   1f598:	mov	r0, r4
   1f59c:	add	sp, sp, #12
   1f5a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f5a4:	ldr	r3, [pc, #108]	; 1f618 <__assert_fail@plt+0xcecc>
   1f5a8:	ldr	r3, [r6, r3]
   1f5ac:	ldr	r5, [r3]
   1f5b0:	bl	123ec <getpid@plt>
   1f5b4:	ldr	r2, [pc, #96]	; 1f61c <__assert_fail@plt+0xced0>
   1f5b8:	ldr	r3, [pc, #96]	; 1f620 <__assert_fail@plt+0xced4>
   1f5bc:	add	r2, pc, r2
   1f5c0:	str	r2, [sp, #4]
   1f5c4:	ldr	r2, [pc, #88]	; 1f624 <__assert_fail@plt+0xced8>
   1f5c8:	add	r3, pc, r3
   1f5cc:	str	r3, [sp]
   1f5d0:	add	r2, pc, r2
   1f5d4:	mov	r1, #1
   1f5d8:	mov	r3, r0
   1f5dc:	mov	r0, r5
   1f5e0:	bl	12578 <__fprintf_chk@plt>
   1f5e4:	ldr	r1, [pc, #60]	; 1f628 <__assert_fail@plt+0xcedc>
   1f5e8:	mov	r0, r4
   1f5ec:	add	r1, pc, r1
   1f5f0:	bl	1ec88 <__assert_fail@plt+0xc53c>
   1f5f4:	mov	r0, r4
   1f5f8:	add	sp, sp, #12
   1f5fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f600:	mov	r0, r4
   1f604:	bl	1c670 <__assert_fail@plt+0x9f24>
   1f608:	mov	r4, #0
   1f60c:	b	1f598 <__assert_fail@plt+0xce4c>
   1f610:	andeq	r5, r1, r0, asr #16
   1f614:	andeq	r5, r1, ip, lsl #25
   1f618:	andeq	r0, r0, r0, ror #4
   1f61c:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1f620:	andeq	r5, r0, r8, lsr #1
   1f624:			; <UNDEFINED> instruction: 0x000045b0
   1f628:	andeq	r4, r0, ip, asr #30
   1f62c:	push	{r4, lr}
   1f630:	bl	1cb90 <__assert_fail@plt+0xa444>
   1f634:	cmp	r0, #0
   1f638:	ldrne	r0, [r0, #8]
   1f63c:	pop	{r4, pc}
   1f640:	ldr	ip, [pc, #228]	; 1f72c <__assert_fail@plt+0xcfe0>
   1f644:	ldr	r3, [pc, #228]	; 1f730 <__assert_fail@plt+0xcfe4>
   1f648:	add	ip, pc, ip
   1f64c:	push	{r4, r5, r6, r7, r8, lr}
   1f650:	sub	sp, sp, #4096	; 0x1000
   1f654:	ldr	r7, [ip, r3]
   1f658:	sub	sp, sp, #8
   1f65c:	add	r4, sp, #8
   1f660:	add	ip, sp, #4096	; 0x1000
   1f664:	ldr	lr, [r7]
   1f668:	add	ip, ip, #4
   1f66c:	sub	r6, r4, #4
   1f670:	mov	r5, r1
   1f674:	mov	r8, r2
   1f678:	mov	r1, r6
   1f67c:	mov	r3, #0
   1f680:	ldr	r2, [pc, #172]	; 1f734 <__assert_fail@plt+0xcfe8>
   1f684:	str	lr, [ip]
   1f688:	bl	1d7f4 <__assert_fail@plt+0xb0a8>
   1f68c:	cmp	r0, #0
   1f690:	blt	1f720 <__assert_fail@plt+0xcfd4>
   1f694:	add	r4, r4, r0
   1f698:	mov	r3, #0
   1f69c:	mov	r0, r6
   1f6a0:	mov	r1, #47	; 0x2f
   1f6a4:	strb	r3, [r4, #-4]
   1f6a8:	bl	125fc <strrchr@plt>
   1f6ac:	cmp	r0, #0
   1f6b0:	beq	1f720 <__assert_fail@plt+0xcfd4>
   1f6b4:	add	r4, r0, #1
   1f6b8:	mov	r0, r4
   1f6bc:	bl	12428 <strlen@plt>
   1f6c0:	add	r2, r0, #1
   1f6c4:	cmp	r2, r8
   1f6c8:	bhi	1f720 <__assert_fail@plt+0xcfd4>
   1f6cc:	mov	r1, r4
   1f6d0:	mov	r0, r5
   1f6d4:	bl	121ac <memcpy@plt>
   1f6d8:	mov	r4, #47	; 0x2f
   1f6dc:	b	1f6e4 <__assert_fail@plt+0xcf98>
   1f6e0:	strb	r4, [r0]
   1f6e4:	mov	r1, #33	; 0x21
   1f6e8:	mov	r0, r5
   1f6ec:	bl	12434 <strchr@plt>
   1f6f0:	cmp	r0, #0
   1f6f4:	bne	1f6e0 <__assert_fail@plt+0xcf94>
   1f6f8:	add	r3, sp, #4096	; 0x1000
   1f6fc:	add	r3, r3, #4
   1f700:	ldr	r2, [r3]
   1f704:	ldr	r3, [r7]
   1f708:	mov	r0, r5
   1f70c:	cmp	r2, r3
   1f710:	bne	1f728 <__assert_fail@plt+0xcfdc>
   1f714:	add	sp, sp, #4096	; 0x1000
   1f718:	add	sp, sp, #8
   1f71c:	pop	{r4, r5, r6, r7, r8, pc}
   1f720:	mov	r5, #0
   1f724:	b	1f6f8 <__assert_fail@plt+0xcfac>
   1f728:	bl	12200 <__stack_chk_fail@plt>
   1f72c:	andeq	r5, r1, r4, asr #14
   1f730:	andeq	r0, r0, ip, asr r2
   1f734:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1f738:	ldr	r3, [pc, #336]	; 1f890 <__assert_fail@plt+0xd144>
   1f73c:	push	{r4, r5, r6, r7, lr}
   1f740:	mov	r5, r1
   1f744:	ldr	r1, [pc, #328]	; 1f894 <__assert_fail@plt+0xd148>
   1f748:	add	r3, pc, r3
   1f74c:	ldrb	ip, [r5, #18]
   1f750:	ldr	r6, [r3, r1]
   1f754:	sub	sp, sp, #284	; 0x11c
   1f758:	and	r1, ip, #251	; 0xfb
   1f75c:	cmp	ip, #10
   1f760:	cmpne	r1, #0
   1f764:	ldr	r1, [r6]
   1f768:	str	r1, [sp, #276]	; 0x114
   1f76c:	bne	1f7a8 <__assert_fail@plt+0xd05c>
   1f770:	cmp	r2, #0
   1f774:	mov	r4, r2
   1f778:	beq	1f81c <__assert_fail@plt+0xd0d0>
   1f77c:	ldrsb	r1, [r2]
   1f780:	cmp	r1, #47	; 0x2f
   1f784:	beq	1f804 <__assert_fail@plt+0xd0b8>
   1f788:	mov	r0, r4
   1f78c:	bl	12428 <strlen@plt>
   1f790:	add	r5, r5, #19
   1f794:	mov	r7, r0
   1f798:	mov	r0, r5
   1f79c:	bl	12428 <strlen@plt>
   1f7a0:	cmp	r7, r0
   1f7a4:	bcc	1f7c4 <__assert_fail@plt+0xd078>
   1f7a8:	mov	r0, #0
   1f7ac:	ldr	r2, [sp, #276]	; 0x114
   1f7b0:	ldr	r3, [r6]
   1f7b4:	cmp	r2, r3
   1f7b8:	bne	1f88c <__assert_fail@plt+0xd140>
   1f7bc:	add	sp, sp, #284	; 0x11c
   1f7c0:	pop	{r4, r5, r6, r7, pc}
   1f7c4:	mov	r0, r4
   1f7c8:	mov	r2, r7
   1f7cc:	mov	r1, r5
   1f7d0:	bl	126e0 <strncmp@plt>
   1f7d4:	cmp	r0, #0
   1f7d8:	bne	1f7a8 <__assert_fail@plt+0xd05c>
   1f7dc:	bl	123d4 <__ctype_b_loc@plt>
   1f7e0:	ldrsb	r3, [r5, r7]
   1f7e4:	cmp	r3, #112	; 0x70
   1f7e8:	ldr	r2, [r0]
   1f7ec:	beq	1f86c <__assert_fail@plt+0xd120>
   1f7f0:	lsl	r3, r3, #1
   1f7f4:	ldrh	r0, [r2, r3]
   1f7f8:	lsr	r0, r0, #11
   1f7fc:	and	r0, r0, #1
   1f800:	b	1f7ac <__assert_fail@plt+0xd060>
   1f804:	mov	r0, r2
   1f808:	bl	125fc <strrchr@plt>
   1f80c:	cmp	r0, #0
   1f810:	beq	1f7ac <__assert_fail@plt+0xd060>
   1f814:	add	r4, r0, #1
   1f818:	b	1f788 <__assert_fail@plt+0xd03c>
   1f81c:	ldr	r2, [pc, #116]	; 1f898 <__assert_fail@plt+0xd14c>
   1f820:	add	r5, r5, #19
   1f824:	add	r2, pc, r2
   1f828:	ldr	r3, [pc, #108]	; 1f89c <__assert_fail@plt+0xd150>
   1f82c:	stm	sp, {r2, r5}
   1f830:	add	r5, sp, #12
   1f834:	mov	r1, r3
   1f838:	mov	r2, #1
   1f83c:	mov	r7, r0
   1f840:	mov	r0, r5
   1f844:	bl	12728 <__snprintf_chk@plt>
   1f848:	mov	r0, r7
   1f84c:	bl	12668 <dirfd@plt>
   1f850:	mov	r3, r4
   1f854:	mov	r1, r5
   1f858:	mov	r2, #4
   1f85c:	bl	12164 <faccessat@plt>
   1f860:	clz	r0, r0
   1f864:	lsr	r0, r0, #5
   1f868:	b	1f7ac <__assert_fail@plt+0xd060>
   1f86c:	add	r5, r5, r7
   1f870:	ldrsb	r1, [r5, #1]
   1f874:	lsl	r1, r1, #1
   1f878:	ldrh	r1, [r2, r1]
   1f87c:	tst	r1, #2048	; 0x800
   1f880:	movne	r0, #1
   1f884:	bne	1f7ac <__assert_fail@plt+0xd060>
   1f888:	b	1f7f0 <__assert_fail@plt+0xd0a4>
   1f88c:	bl	12200 <__stack_chk_fail@plt>
   1f890:	andeq	r5, r1, r4, asr #12
   1f894:	andeq	r0, r0, ip, asr r2
   1f898:	ldrdeq	r4, [r0], -ip
   1f89c:	andeq	r0, r0, r6, lsl #2
   1f8a0:	push	{r4, r5, r6, lr}
   1f8a4:	mov	r6, r1
   1f8a8:	mov	r1, #0
   1f8ac:	bl	1d640 <__assert_fail@plt+0xaef4>
   1f8b0:	subs	r4, r0, #0
   1f8b4:	movne	r5, #0
   1f8b8:	bne	1f8cc <__assert_fail@plt+0xd180>
   1f8bc:	b	1f8f0 <__assert_fail@plt+0xd1a4>
   1f8c0:	bl	1f738 <__assert_fail@plt+0xcfec>
   1f8c4:	cmp	r0, #0
   1f8c8:	addne	r5, r5, #1
   1f8cc:	mov	r0, r4
   1f8d0:	bl	1ee30 <__assert_fail@plt+0xc6e4>
   1f8d4:	mov	r2, r6
   1f8d8:	subs	r1, r0, #0
   1f8dc:	mov	r0, r4
   1f8e0:	bne	1f8c0 <__assert_fail@plt+0xd174>
   1f8e4:	bl	1271c <closedir@plt>
   1f8e8:	mov	r0, r5
   1f8ec:	pop	{r4, r5, r6, pc}
   1f8f0:	mov	r5, r4
   1f8f4:	mov	r0, r5
   1f8f8:	pop	{r4, r5, r6, pc}
   1f8fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f900:	mov	r7, #0
   1f904:	ldr	r9, [pc, #344]	; 1fa64 <__assert_fail@plt+0xd318>
   1f908:	ldr	r3, [pc, #344]	; 1fa68 <__assert_fail@plt+0xd31c>
   1f90c:	add	r9, pc, r9
   1f910:	sub	sp, sp, #36	; 0x24
   1f914:	ldr	sl, [r9, r3]
   1f918:	mov	r8, r1
   1f91c:	mov	r1, r7
   1f920:	ldr	r3, [sl]
   1f924:	str	r7, [sp, #16]
   1f928:	str	r3, [sp, #28]
   1f92c:	str	r7, [sp, #20]
   1f930:	mov	r6, r0
   1f934:	bl	1d640 <__assert_fail@plt+0xaef4>
   1f938:	subs	r5, r0, #0
   1f93c:	beq	1fa54 <__assert_fail@plt+0xd308>
   1f940:	ldr	r7, [pc, #292]	; 1fa6c <__assert_fail@plt+0xd320>
   1f944:	ldr	fp, [pc, #292]	; 1fa70 <__assert_fail@plt+0xd324>
   1f948:	add	r7, pc, r7
   1f94c:	add	fp, pc, fp
   1f950:	mov	r0, r5
   1f954:	bl	1ee30 <__assert_fail@plt+0xc6e4>
   1f958:	subs	r4, r0, #0
   1f95c:	beq	1f9c0 <__assert_fail@plt+0xd274>
   1f960:	mov	r2, #0
   1f964:	mov	r1, r4
   1f968:	mov	r0, r5
   1f96c:	bl	1f738 <__assert_fail@plt+0xcfec>
   1f970:	cmp	r0, #0
   1f974:	beq	1f950 <__assert_fail@plt+0xd204>
   1f978:	add	r4, r4, #19
   1f97c:	mov	r3, r4
   1f980:	mov	r2, r7
   1f984:	add	r1, sp, #12
   1f988:	mov	r0, r6
   1f98c:	bl	1e1f8 <__assert_fail@plt+0xbaac>
   1f990:	cmp	r0, #0
   1f994:	bne	1f950 <__assert_fail@plt+0xd204>
   1f998:	ldr	r3, [sp, #12]
   1f99c:	cmp	r3, r8
   1f9a0:	bne	1f950 <__assert_fail@plt+0xd204>
   1f9a4:	mov	r3, r4
   1f9a8:	mov	r2, fp
   1f9ac:	add	r1, sp, #16
   1f9b0:	mov	r0, r6
   1f9b4:	bl	1e450 <__assert_fail@plt+0xbd04>
   1f9b8:	cmp	r0, #0
   1f9bc:	bne	1f950 <__assert_fail@plt+0xd204>
   1f9c0:	mov	r0, r5
   1f9c4:	bl	1271c <closedir@plt>
   1f9c8:	ldr	r3, [pc, #164]	; 1fa74 <__assert_fail@plt+0xd328>
   1f9cc:	add	r3, pc, r3
   1f9d0:	ldr	r3, [r3]
   1f9d4:	tst	r3, #4
   1f9d8:	bne	1f9f8 <__assert_fail@plt+0xd2ac>
   1f9dc:	ldrd	r0, [sp, #16]
   1f9e0:	ldr	r2, [sp, #28]
   1f9e4:	ldr	r3, [sl]
   1f9e8:	cmp	r2, r3
   1f9ec:	bne	1fa60 <__assert_fail@plt+0xd314>
   1f9f0:	add	sp, sp, #36	; 0x24
   1f9f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9f8:	ldr	r3, [pc, #120]	; 1fa78 <__assert_fail@plt+0xd32c>
   1f9fc:	ldr	r3, [r9, r3]
   1fa00:	ldr	r4, [r3]
   1fa04:	bl	123ec <getpid@plt>
   1fa08:	ldr	r2, [pc, #108]	; 1fa7c <__assert_fail@plt+0xd330>
   1fa0c:	ldr	r3, [pc, #108]	; 1fa80 <__assert_fail@plt+0xd334>
   1fa10:	add	r2, pc, r2
   1fa14:	str	r2, [sp, #4]
   1fa18:	ldr	r2, [pc, #100]	; 1fa84 <__assert_fail@plt+0xd338>
   1fa1c:	add	r3, pc, r3
   1fa20:	str	r3, [sp]
   1fa24:	add	r2, pc, r2
   1fa28:	mov	r1, #1
   1fa2c:	mov	r3, r0
   1fa30:	mov	r0, r4
   1fa34:	bl	12578 <__fprintf_chk@plt>
   1fa38:	ldr	r1, [pc, #72]	; 1fa88 <__assert_fail@plt+0xd33c>
   1fa3c:	mov	r2, r8
   1fa40:	mov	r0, r6
   1fa44:	ldr	r3, [sp, #16]
   1fa48:	add	r1, pc, r1
   1fa4c:	bl	1ec88 <__assert_fail@plt+0xc53c>
   1fa50:	b	1f9dc <__assert_fail@plt+0xd290>
   1fa54:	mov	r0, r7
   1fa58:	mov	r1, r7
   1fa5c:	b	1f9e0 <__assert_fail@plt+0xd294>
   1fa60:	bl	12200 <__stack_chk_fail@plt>
   1fa64:	andeq	r5, r1, r0, lsl #9
   1fa68:	andeq	r0, r0, ip, asr r2
   1fa6c:	andeq	r3, r0, r0, lsl #11
   1fa70:	andeq	r4, r0, ip, ror #29
   1fa74:	andeq	r5, r1, r8, asr #16
   1fa78:	andeq	r0, r0, r0, ror #4
   1fa7c:	andeq	r4, r0, r0, lsl #3
   1fa80:	andeq	r4, r0, r4, asr ip
   1fa84:	andeq	r4, r0, ip, asr r1
   1fa88:	andeq	r4, r0, r4, asr #25
   1fa8c:	ldr	r1, [pc, #112]	; 1fb04 <__assert_fail@plt+0xd3b8>
   1fa90:	push	{r4, r5, r6, lr}
   1fa94:	add	r1, pc, r1
   1fa98:	bl	1d640 <__assert_fail@plt+0xaef4>
   1fa9c:	subs	r5, r0, #0
   1faa0:	beq	1fafc <__assert_fail@plt+0xd3b0>
   1faa4:	mov	r4, #0
   1faa8:	b	1fabc <__assert_fail@plt+0xd370>
   1faac:	cmp	r4, #0
   1fab0:	bne	1fae0 <__assert_fail@plt+0xd394>
   1fab4:	bl	121f4 <strdup@plt>
   1fab8:	mov	r4, r0
   1fabc:	mov	r0, r5
   1fac0:	bl	1ee30 <__assert_fail@plt+0xc6e4>
   1fac4:	cmp	r0, #0
   1fac8:	add	r0, r0, #19
   1facc:	bne	1faac <__assert_fail@plt+0xd360>
   1fad0:	mov	r0, r5
   1fad4:	bl	1271c <closedir@plt>
   1fad8:	mov	r0, r4
   1fadc:	pop	{r4, r5, r6, pc}
   1fae0:	mov	r0, r4
   1fae4:	bl	12134 <free@plt>
   1fae8:	mov	r4, #0
   1faec:	mov	r0, r5
   1faf0:	bl	1271c <closedir@plt>
   1faf4:	mov	r0, r4
   1faf8:	pop	{r4, r5, r6, pc}
   1fafc:	mov	r4, r5
   1fb00:	b	1fad8 <__assert_fail@plt+0xd38c>
   1fb04:	muleq	r0, r4, ip
   1fb08:	push	{r4, r5, r6, r7, r8, lr}
   1fb0c:	mov	r3, #0
   1fb10:	mov	r7, r0
   1fb14:	mov	r4, r1
   1fb18:	mov	r6, r2
   1fb1c:	bl	1d7f4 <__assert_fail@plt+0xb0a8>
   1fb20:	subs	r5, r0, #0
   1fb24:	ble	1fbb0 <__assert_fail@plt+0xd464>
   1fb28:	add	r3, r5, #16
   1fb2c:	cmp	r3, r6
   1fb30:	bhi	1fbb0 <__assert_fail@plt+0xd464>
   1fb34:	mov	r3, #0
   1fb38:	mov	r0, r7
   1fb3c:	strb	r3, [r4, r5]
   1fb40:	bl	1c9d4 <__assert_fail@plt+0xa288>
   1fb44:	add	r6, r5, #1
   1fb48:	subs	r7, r0, #0
   1fb4c:	beq	1fbbc <__assert_fail@plt+0xd470>
   1fb50:	bl	12428 <strlen@plt>
   1fb54:	mov	r2, r6
   1fb58:	mov	r1, r4
   1fb5c:	mov	r5, r0
   1fb60:	add	r0, r0, #15
   1fb64:	add	r0, r4, r0
   1fb68:	bl	12128 <memmove@plt>
   1fb6c:	mov	r2, r5
   1fb70:	mov	r1, r7
   1fb74:	mov	r0, r4
   1fb78:	bl	121ac <memcpy@plt>
   1fb7c:	add	r3, r4, r5
   1fb80:	ldr	ip, [pc, #76]	; 1fbd4 <__assert_fail@plt+0xd488>
   1fb84:	add	ip, pc, ip
   1fb88:	ldm	ip!, {r0, r1, r2}
   1fb8c:	ldrh	lr, [ip]
   1fb90:	ldrb	ip, [ip, #2]
   1fb94:	str	r0, [r3]
   1fb98:	str	r1, [r3, #4]
   1fb9c:	str	r2, [r3, #8]
   1fba0:	strh	lr, [r3, #12]
   1fba4:	strb	ip, [r3, #14]
   1fba8:	mov	r0, r4
   1fbac:	pop	{r4, r5, r6, r7, r8, pc}
   1fbb0:	mov	r4, #0
   1fbb4:	mov	r0, r4
   1fbb8:	pop	{r4, r5, r6, r7, r8, pc}
   1fbbc:	mov	r2, r6
   1fbc0:	mov	r1, r4
   1fbc4:	add	r0, r4, #15
   1fbc8:	bl	12128 <memmove@plt>
   1fbcc:	mov	r3, r4
   1fbd0:	b	1fb80 <__assert_fail@plt+0xd434>
   1fbd4:	andeq	r4, r0, ip, lsr #23
   1fbd8:	ldr	r3, [pc, #340]	; 1fd34 <__assert_fail@plt+0xd5e8>
   1fbdc:	ldr	ip, [pc, #340]	; 1fd38 <__assert_fail@plt+0xd5ec>
   1fbe0:	add	r3, pc, r3
   1fbe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbe8:	sub	sp, sp, #4096	; 0x1000
   1fbec:	ldr	ip, [r3, ip]
   1fbf0:	sub	sp, sp, #20
   1fbf4:	cmp	r2, #0
   1fbf8:	clz	r0, r1
   1fbfc:	lsr	r0, r0, #5
   1fc00:	add	r3, sp, #4096	; 0x1000
   1fc04:	movne	r5, r0
   1fc08:	moveq	r5, #1
   1fc0c:	ldr	r0, [ip]
   1fc10:	add	r3, r3, #12
   1fc14:	cmp	r5, #0
   1fc18:	str	ip, [sp, #4]
   1fc1c:	str	r0, [r3]
   1fc20:	bne	1fd28 <__assert_fail@plt+0xd5dc>
   1fc24:	str	r5, [r2]
   1fc28:	ldrsb	r3, [r1]
   1fc2c:	mov	r7, r2
   1fc30:	mov	sl, r1
   1fc34:	cmp	r3, #0
   1fc38:	beq	1fd20 <__assert_fail@plt+0xd5d4>
   1fc3c:	mov	r0, r1
   1fc40:	bl	12428 <strlen@plt>
   1fc44:	add	r3, r0, #11
   1fc48:	cmp	r3, #4096	; 0x1000
   1fc4c:	mov	r4, r0
   1fc50:	bhi	1fd20 <__assert_fail@plt+0xd5d4>
   1fc54:	ldr	r9, [pc, #224]	; 1fd3c <__assert_fail@plt+0xd5f0>
   1fc58:	ldr	r8, [pc, #224]	; 1fd40 <__assert_fail@plt+0xd5f4>
   1fc5c:	add	r9, pc, r9
   1fc60:	add	fp, sp, #12
   1fc64:	mov	r3, r9
   1fc68:	add	ip, sl, r4
   1fc6c:	ldm	r3!, {r0, r1}
   1fc70:	mov	r2, r8
   1fc74:	str	r0, [sl, r4]
   1fc78:	ldrh	r0, [r3]
   1fc7c:	ldrb	r3, [r3, #2]
   1fc80:	str	r1, [ip, #4]
   1fc84:	strh	r0, [ip, #8]
   1fc88:	strb	r3, [ip, #10]
   1fc8c:	mov	r1, fp
   1fc90:	mov	r0, sl
   1fc94:	bl	12284 <readlink@plt>
   1fc98:	strb	r5, [sl, r4]
   1fc9c:	mov	r1, #47	; 0x2f
   1fca0:	mov	r6, r0
   1fca4:	mov	r0, sl
   1fca8:	bl	125fc <strrchr@plt>
   1fcac:	cmp	r0, #0
   1fcb0:	beq	1fd18 <__assert_fail@plt+0xd5cc>
   1fcb4:	cmp	r6, #0
   1fcb8:	strb	r5, [r0]
   1fcbc:	sub	r4, r0, sl
   1fcc0:	ble	1fc64 <__assert_fail@plt+0xd518>
   1fcc4:	mov	r2, #0
   1fcc8:	mov	r0, fp
   1fccc:	strb	r2, [fp, r6]
   1fcd0:	bl	124f4 <__xpg_basename@plt>
   1fcd4:	cmp	r0, #0
   1fcd8:	beq	1fd20 <__assert_fail@plt+0xd5d4>
   1fcdc:	bl	121f4 <strdup@plt>
   1fce0:	cmp	r0, #0
   1fce4:	str	r0, [r7]
   1fce8:	movne	r0, #0
   1fcec:	mvneq	r0, #11
   1fcf0:	add	r3, sp, #4096	; 0x1000
   1fcf4:	add	r3, r3, #12
   1fcf8:	ldr	r2, [r3]
   1fcfc:	ldr	r3, [sp, #4]
   1fd00:	ldr	r3, [r3]
   1fd04:	cmp	r2, r3
   1fd08:	bne	1fd30 <__assert_fail@plt+0xd5e4>
   1fd0c:	add	sp, sp, #4096	; 0x1000
   1fd10:	add	sp, sp, #20
   1fd14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd18:	cmp	r6, #0
   1fd1c:	bgt	1fcc4 <__assert_fail@plt+0xd578>
   1fd20:	mov	r0, #1
   1fd24:	b	1fcf0 <__assert_fail@plt+0xd5a4>
   1fd28:	mvn	r0, #21
   1fd2c:	b	1fcf0 <__assert_fail@plt+0xd5a4>
   1fd30:	bl	12200 <__stack_chk_fail@plt>
   1fd34:	andeq	r5, r1, ip, lsr #3
   1fd38:	andeq	r0, r0, ip, asr r2
   1fd3c:	andeq	r4, r0, r4, ror #21
   1fd40:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1fd44:	ldr	r3, [pc, #312]	; 1fe84 <__assert_fail@plt+0xd738>
   1fd48:	ldr	r2, [pc, #312]	; 1fe88 <__assert_fail@plt+0xd73c>
   1fd4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd50:	add	r3, pc, r3
   1fd54:	sub	sp, sp, #4096	; 0x1000
   1fd58:	sub	sp, sp, #28
   1fd5c:	ldr	r2, [r3, r2]
   1fd60:	add	r6, sp, #24
   1fd64:	mov	r1, r6
   1fd68:	mov	ip, r2
   1fd6c:	str	r2, [sp, #4]
   1fd70:	mov	r2, #0
   1fd74:	str	r2, [r1, #-8]!
   1fd78:	ldr	r2, [pc, #268]	; 1fe8c <__assert_fail@plt+0xd740>
   1fd7c:	add	r3, sp, #4096	; 0x1000
   1fd80:	ldr	ip, [ip]
   1fd84:	add	r3, r3, #20
   1fd88:	add	r2, pc, r2
   1fd8c:	str	ip, [r3]
   1fd90:	mov	r7, r0
   1fd94:	bl	1e16c <__assert_fail@plt+0xba20>
   1fd98:	cmp	r0, #0
   1fd9c:	bne	1fdac <__assert_fail@plt+0xd660>
   1fda0:	ldr	r0, [r6, #-8]
   1fda4:	cmp	r0, #1
   1fda8:	beq	1fe44 <__assert_fail@plt+0xd6f8>
   1fdac:	mov	r2, #4096	; 0x1000
   1fdb0:	sub	r1, r6, #4
   1fdb4:	mov	r0, r7
   1fdb8:	bl	1fb08 <__assert_fail@plt+0xd3bc>
   1fdbc:	subs	r9, r0, #0
   1fdc0:	beq	1fe40 <__assert_fail@plt+0xd6f4>
   1fdc4:	ldr	r8, [pc, #196]	; 1fe90 <__assert_fail@plt+0xd744>
   1fdc8:	ldr	r3, [pc, #196]	; 1fe94 <__assert_fail@plt+0xd748>
   1fdcc:	add	r8, pc, r8
   1fdd0:	add	sl, sp, #12
   1fdd4:	add	r5, r8, #20
   1fdd8:	add	r3, pc, r3
   1fddc:	str	r3, [sp]
   1fde0:	mov	r2, sl
   1fde4:	mov	r1, r9
   1fde8:	mov	r0, r7
   1fdec:	bl	1fbd8 <__assert_fail@plt+0xd48c>
   1fdf0:	cmp	r0, #0
   1fdf4:	bne	1fe40 <__assert_fail@plt+0xd6f4>
   1fdf8:	ldr	r4, [r6, #-12]
   1fdfc:	ldr	r1, [sp]
   1fe00:	mov	r0, r4
   1fe04:	bl	120c8 <strcmp@plt>
   1fe08:	add	fp, r8, #4
   1fe0c:	cmp	r0, #0
   1fe10:	beq	1fe30 <__assert_fail@plt+0xd6e4>
   1fe14:	cmp	fp, r5
   1fe18:	beq	1fe6c <__assert_fail@plt+0xd720>
   1fe1c:	ldr	r1, [fp], #4
   1fe20:	mov	r0, r4
   1fe24:	bl	120c8 <strcmp@plt>
   1fe28:	cmp	r0, #0
   1fe2c:	bne	1fe14 <__assert_fail@plt+0xd6c8>
   1fe30:	mov	r3, #1
   1fe34:	mov	r0, r4
   1fe38:	str	r3, [r6, #-8]
   1fe3c:	bl	12134 <free@plt>
   1fe40:	ldr	r0, [r6, #-8]
   1fe44:	add	r3, sp, #4096	; 0x1000
   1fe48:	add	r3, r3, #20
   1fe4c:	ldr	r2, [r3]
   1fe50:	ldr	r3, [sp, #4]
   1fe54:	ldr	r3, [r3]
   1fe58:	cmp	r2, r3
   1fe5c:	bne	1fe80 <__assert_fail@plt+0xd734>
   1fe60:	add	sp, sp, #4096	; 0x1000
   1fe64:	add	sp, sp, #28
   1fe68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe6c:	mov	r3, #0
   1fe70:	mov	r0, r4
   1fe74:	str	r3, [r6, #-8]
   1fe78:	bl	12134 <free@plt>
   1fe7c:	b	1fde0 <__assert_fail@plt+0xd694>
   1fe80:	bl	12200 <__stack_chk_fail@plt>
   1fe84:	andeq	r5, r1, ip, lsr r0
   1fe88:	andeq	r0, r0, ip, asr r2
   1fe8c:	andeq	r4, r0, r8, asr #19
   1fe90:	muleq	r1, r4, lr
   1fe94:	andeq	r4, r0, r4, ror r9
   1fe98:	ldr	ip, [pc, #272]	; 1ffb0 <__assert_fail@plt+0xd864>
   1fe9c:	push	{r4, r5, r6, r7, lr}
   1fea0:	add	ip, pc, ip
   1fea4:	ldr	lr, [pc, #264]	; 1ffb4 <__assert_fail@plt+0xd868>
   1fea8:	sub	sp, sp, #12
   1feac:	mov	r3, #0
   1feb0:	ldr	r4, [ip, lr]
   1feb4:	mov	r5, r2
   1feb8:	mov	r2, ip
   1febc:	ldr	ip, [r4]
   1fec0:	mov	r2, r3
   1fec4:	str	r3, [sp]
   1fec8:	str	ip, [sp, #4]
   1fecc:	bl	1f528 <__assert_fail@plt+0xcddc>
   1fed0:	subs	r7, r0, #0
   1fed4:	beq	1ff54 <__assert_fail@plt+0xd808>
   1fed8:	ldr	r2, [pc, #216]	; 1ffb8 <__assert_fail@plt+0xd86c>
   1fedc:	mov	r1, sp
   1fee0:	add	r2, pc, r2
   1fee4:	bl	1db58 <__assert_fail@plt+0xb40c>
   1fee8:	cmp	r0, #0
   1feec:	ble	1ff54 <__assert_fail@plt+0xd808>
   1fef0:	ldr	r6, [sp]
   1fef4:	cmp	r6, #0
   1fef8:	beq	1ff54 <__assert_fail@plt+0xd808>
   1fefc:	ldr	r1, [pc, #184]	; 1ffbc <__assert_fail@plt+0xd870>
   1ff00:	mov	r2, #4
   1ff04:	add	r1, pc, r1
   1ff08:	mov	r0, r6
   1ff0c:	bl	126e0 <strncmp@plt>
   1ff10:	cmp	r0, #0
   1ff14:	bne	1ff8c <__assert_fail@plt+0xd840>
   1ff18:	add	r0, r6, #4
   1ff1c:	mov	r1, #45	; 0x2d
   1ff20:	bl	125fc <strrchr@plt>
   1ff24:	cmp	r0, #0
   1ff28:	beq	1ff54 <__assert_fail@plt+0xd808>
   1ff2c:	ldrsb	r6, [r0, #1]
   1ff30:	mov	r0, r7
   1ff34:	adds	r6, r6, #0
   1ff38:	movne	r6, #1
   1ff3c:	bl	1c670 <__assert_fail@plt+0x9f24>
   1ff40:	cmp	r5, #0
   1ff44:	bne	1ff68 <__assert_fail@plt+0xd81c>
   1ff48:	ldr	r0, [sp]
   1ff4c:	bl	12134 <free@plt>
   1ff50:	b	1ff70 <__assert_fail@plt+0xd824>
   1ff54:	mov	r6, #0
   1ff58:	mov	r0, r7
   1ff5c:	bl	1c670 <__assert_fail@plt+0x9f24>
   1ff60:	cmp	r5, #0
   1ff64:	beq	1ff48 <__assert_fail@plt+0xd7fc>
   1ff68:	ldr	r3, [sp]
   1ff6c:	str	r3, [r5]
   1ff70:	ldr	r2, [sp, #4]
   1ff74:	ldr	r3, [r4]
   1ff78:	mov	r0, r6
   1ff7c:	cmp	r2, r3
   1ff80:	bne	1ffac <__assert_fail@plt+0xd860>
   1ff84:	add	sp, sp, #12
   1ff88:	pop	{r4, r5, r6, r7, pc}
   1ff8c:	ldr	r1, [pc, #44]	; 1ffc0 <__assert_fail@plt+0xd874>
   1ff90:	mov	r0, r6
   1ff94:	mov	r2, #17
   1ff98:	add	r1, pc, r1
   1ff9c:	bl	126e0 <strncmp@plt>
   1ffa0:	clz	r6, r0
   1ffa4:	lsr	r6, r6, #5
   1ffa8:	b	1ff58 <__assert_fail@plt+0xd80c>
   1ffac:	bl	12200 <__stack_chk_fail@plt>
   1ffb0:	andeq	r4, r1, ip, ror #29
   1ffb4:	andeq	r0, r0, ip, asr r2
   1ffb8:	andeq	r4, r0, ip, ror r8
   1ffbc:	andeq	r4, r0, r0, ror #16
   1ffc0:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1ffc4:	ldr	ip, [pc, #372]	; 20140 <__assert_fail@plt+0xd9f4>
   1ffc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffcc:	add	ip, pc, ip
   1ffd0:	ldr	lr, [pc, #364]	; 20144 <__assert_fail@plt+0xd9f8>
   1ffd4:	sub	sp, sp, #4096	; 0x1000
   1ffd8:	sub	sp, sp, #28
   1ffdc:	mov	r8, r1
   1ffe0:	mov	r7, r2
   1ffe4:	ldr	r1, [ip, lr]
   1ffe8:	mov	r2, ip
   1ffec:	add	r2, sp, #4160	; 0x1040
   1fff0:	mov	r6, r3
   1fff4:	ldr	r5, [r2]
   1fff8:	add	r2, sp, #4096	; 0x1000
   1fffc:	ldr	r3, [r1]
   20000:	add	r2, r2, #20
   20004:	str	r1, [sp, #8]
   20008:	mov	r9, r0
   2000c:	str	r3, [r2]
   20010:	bl	1cb90 <__assert_fail@plt+0xa444>
   20014:	subs	r4, r0, #0
   20018:	beq	2012c <__assert_fail@plt+0xd9e0>
   2001c:	ldrb	r3, [r4, #28]
   20020:	tst	r3, #2
   20024:	bne	2012c <__assert_fail@plt+0xd9e0>
   20028:	ands	sl, r3, #1
   2002c:	beq	20098 <__assert_fail@plt+0xd94c>
   20030:	cmp	r8, #0
   20034:	mov	r0, #0
   20038:	ldrne	r3, [r4, #12]
   2003c:	strne	r3, [r8]
   20040:	cmp	r7, #0
   20044:	ldrne	r3, [r4, #16]
   20048:	strne	r3, [r7]
   2004c:	cmp	r6, #0
   20050:	ldrne	r3, [r4, #20]
   20054:	strne	r3, [r6]
   20058:	cmp	r5, #0
   2005c:	ldrne	r3, [r4, #24]
   20060:	strne	r3, [r5]
   20064:	ldrb	r3, [r4, #28]
   20068:	bic	r3, r3, #2
   2006c:	strb	r3, [r4, #28]
   20070:	add	r3, sp, #4096	; 0x1000
   20074:	add	r3, r3, #20
   20078:	ldr	r2, [r3]
   2007c:	ldr	r3, [sp, #8]
   20080:	ldr	r3, [r3]
   20084:	cmp	r2, r3
   20088:	bne	2013c <__assert_fail@plt+0xd9f0>
   2008c:	add	sp, sp, #4096	; 0x1000
   20090:	add	sp, sp, #28
   20094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20098:	orr	r3, r3, #2
   2009c:	strb	r3, [r4, #28]
   200a0:	ldr	r3, [pc, #160]	; 20148 <__assert_fail@plt+0xd9fc>
   200a4:	add	r2, sp, #24
   200a8:	add	fp, sp, #20
   200ac:	str	r2, [sp, #12]
   200b0:	mov	r0, r9
   200b4:	mov	r1, fp
   200b8:	add	r3, pc, r3
   200bc:	ldr	r2, [pc, #136]	; 2014c <__assert_fail@plt+0xda00>
   200c0:	bl	1d7f4 <__assert_fail@plt+0xb0a8>
   200c4:	cmp	r0, #0
   200c8:	blt	20070 <__assert_fail@plt+0xd924>
   200cc:	ldr	r2, [sp, #12]
   200d0:	mov	r1, #47	; 0x2f
   200d4:	add	r3, r2, r0
   200d8:	mov	r0, fp
   200dc:	strb	sl, [r3, #-4]
   200e0:	bl	125fc <strrchr@plt>
   200e4:	cmp	r0, #0
   200e8:	beq	20134 <__assert_fail@plt+0xd9e8>
   200ec:	ldr	r1, [pc, #92]	; 20150 <__assert_fail@plt+0xda04>
   200f0:	add	r2, r4, #24
   200f4:	add	r3, r4, #20
   200f8:	str	r2, [sp, #4]
   200fc:	str	r3, [sp]
   20100:	add	r0, r0, #1
   20104:	add	r3, r4, #16
   20108:	add	r2, r4, #12
   2010c:	add	r1, pc, r1
   20110:	bl	1262c <sscanf@plt>
   20114:	cmp	r0, #4
   20118:	bne	20134 <__assert_fail@plt+0xd9e8>
   2011c:	ldrb	r3, [r4, #28]
   20120:	orr	r3, r3, #1
   20124:	strb	r3, [r4, #28]
   20128:	b	20030 <__assert_fail@plt+0xd8e4>
   2012c:	mvn	r0, #21
   20130:	b	20070 <__assert_fail@plt+0xd924>
   20134:	mvn	r0, #0
   20138:	b	20070 <__assert_fail@plt+0xd924>
   2013c:	bl	12200 <__stack_chk_fail@plt>
   20140:	andeq	r4, r1, r0, asr #27
   20144:	andeq	r0, r0, ip, asr r2
   20148:	andeq	r3, r0, r4, lsl #11
   2014c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   20150:	andeq	r4, r0, r4, ror r6
   20154:	ldr	ip, [pc, #288]	; 2027c <__assert_fail@plt+0xdb30>
   20158:	push	{r4, r5, r6, r7, r8, r9, lr}
   2015c:	add	ip, pc, ip
   20160:	ldr	lr, [pc, #280]	; 20280 <__assert_fail@plt+0xdb34>
   20164:	sub	sp, sp, #36	; 0x24
   20168:	mov	r6, #0
   2016c:	ldr	r5, [ip, lr]
   20170:	mov	r7, r1
   20174:	mov	r4, r2
   20178:	ldr	lr, [r5]
   2017c:	mov	r2, r6
   20180:	str	r6, [sp]
   20184:	mov	r8, r3
   20188:	add	r1, sp, #24
   2018c:	mov	r3, r6
   20190:	str	lr, [sp, #28]
   20194:	mov	r9, r0
   20198:	ldr	r6, [sp, #64]	; 0x40
   2019c:	bl	1ffc4 <__assert_fail@plt+0xd878>
   201a0:	cmp	r0, #0
   201a4:	bne	20214 <__assert_fail@plt+0xdac8>
   201a8:	mov	r0, r9
   201ac:	bl	1c9d4 <__assert_fail@plt+0xa288>
   201b0:	cmp	r0, #0
   201b4:	beq	20230 <__assert_fail@plt+0xdae4>
   201b8:	cmp	r6, #0
   201bc:	ldr	r1, [sp, #24]
   201c0:	beq	20244 <__assert_fail@plt+0xdaf8>
   201c4:	ldr	r2, [pc, #184]	; 20284 <__assert_fail@plt+0xdb38>
   201c8:	ldr	r3, [pc, #184]	; 20288 <__assert_fail@plt+0xdb3c>
   201cc:	add	r2, pc, r2
   201d0:	add	r3, pc, r3
   201d4:	stmib	sp, {r0, r2, r7}
   201d8:	mov	r2, #1
   201dc:	str	r1, [sp, #16]
   201e0:	str	r3, [sp]
   201e4:	str	r6, [sp, #20]
   201e8:	mvn	r3, #0
   201ec:	mov	r1, r8
   201f0:	mov	r0, r4
   201f4:	bl	12728 <__snprintf_chk@plt>
   201f8:	mvn	r3, r0
   201fc:	cmp	r0, r8
   20200:	lsr	r3, r3, #31
   20204:	movcs	r3, #0
   20208:	cmp	r3, #0
   2020c:	movne	r0, r4
   20210:	bne	20218 <__assert_fail@plt+0xdacc>
   20214:	mov	r0, #0
   20218:	ldr	r2, [sp, #28]
   2021c:	ldr	r3, [r5]
   20220:	cmp	r2, r3
   20224:	bne	20278 <__assert_fail@plt+0xdb2c>
   20228:	add	sp, sp, #36	; 0x24
   2022c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20230:	ldr	r0, [pc, #84]	; 2028c <__assert_fail@plt+0xdb40>
   20234:	cmp	r6, #0
   20238:	add	r0, pc, r0
   2023c:	ldr	r1, [sp, #24]
   20240:	bne	201c4 <__assert_fail@plt+0xda78>
   20244:	ldr	r2, [pc, #68]	; 20290 <__assert_fail@plt+0xdb44>
   20248:	ldr	r3, [pc, #68]	; 20294 <__assert_fail@plt+0xdb48>
   2024c:	add	r2, pc, r2
   20250:	add	r3, pc, r3
   20254:	stmib	sp, {r0, r2, r7}
   20258:	mov	r2, #1
   2025c:	str	r1, [sp, #16]
   20260:	str	r3, [sp]
   20264:	mov	r1, r8
   20268:	mvn	r3, #0
   2026c:	mov	r0, r4
   20270:	bl	12728 <__snprintf_chk@plt>
   20274:	b	201f8 <__assert_fail@plt+0xdaac>
   20278:	bl	12200 <__stack_chk_fail@plt>
   2027c:	andeq	r4, r1, r0, lsr ip
   20280:	andeq	r0, r0, ip, asr r2
   20284:	andeq	r4, r0, r0, asr #11
   20288:	andeq	r4, r0, r8, asr #11
   2028c:	andeq	r3, r0, r8, lsr #12
   20290:	andeq	r4, r0, r0, asr #10
   20294:	andeq	r4, r0, r0, ror #10
   20298:	ldr	ip, [pc, #288]	; 203c0 <__assert_fail@plt+0xdc74>
   2029c:	ldr	r3, [pc, #288]	; 203c4 <__assert_fail@plt+0xdc78>
   202a0:	add	ip, pc, ip
   202a4:	push	{r4, r5, r6, r7, lr}
   202a8:	sub	sp, sp, #60	; 0x3c
   202ac:	ldr	r5, [ip, r3]
   202b0:	add	r3, sp, #48	; 0x30
   202b4:	str	r3, [sp]
   202b8:	ldr	lr, [r5]
   202bc:	mov	r4, r1
   202c0:	mov	r6, r2
   202c4:	add	r3, sp, #44	; 0x2c
   202c8:	add	r2, sp, #40	; 0x28
   202cc:	add	r1, sp, #36	; 0x24
   202d0:	str	lr, [sp, #52]	; 0x34
   202d4:	mov	r7, r0
   202d8:	bl	1ffc4 <__assert_fail@plt+0xd878>
   202dc:	cmp	r0, #0
   202e0:	bne	20354 <__assert_fail@plt+0xdc08>
   202e4:	mov	r0, r7
   202e8:	bl	1c9d4 <__assert_fail@plt+0xa288>
   202ec:	cmp	r0, #0
   202f0:	beq	20370 <__assert_fail@plt+0xdc24>
   202f4:	add	r1, sp, #36	; 0x24
   202f8:	cmp	r6, #0
   202fc:	ldm	r1, {r1, ip, lr}
   20300:	ldr	r7, [sp, #48]	; 0x30
   20304:	beq	2037c <__assert_fail@plt+0xdc30>
   20308:	ldr	r2, [pc, #184]	; 203c8 <__assert_fail@plt+0xdc7c>
   2030c:	ldr	r3, [pc, #184]	; 203cc <__assert_fail@plt+0xdc80>
   20310:	add	r2, pc, r2
   20314:	add	r3, pc, r3
   20318:	stmib	sp, {r0, r2}
   2031c:	str	r1, [sp, #12]
   20320:	str	r3, [sp]
   20324:	str	r6, [sp, #28]
   20328:	str	r7, [sp, #24]
   2032c:	str	lr, [sp, #20]
   20330:	str	ip, [sp, #16]
   20334:	mvn	r3, #0
   20338:	mov	r2, #1
   2033c:	mov	r1, #4096	; 0x1000
   20340:	mov	r0, r4
   20344:	bl	12728 <__snprintf_chk@plt>
   20348:	cmp	r0, #4096	; 0x1000
   2034c:	movcc	r0, r4
   20350:	bcc	20358 <__assert_fail@plt+0xdc0c>
   20354:	mov	r0, #0
   20358:	ldr	r2, [sp, #52]	; 0x34
   2035c:	ldr	r3, [r5]
   20360:	cmp	r2, r3
   20364:	bne	203bc <__assert_fail@plt+0xdc70>
   20368:	add	sp, sp, #60	; 0x3c
   2036c:	pop	{r4, r5, r6, r7, pc}
   20370:	ldr	r0, [pc, #88]	; 203d0 <__assert_fail@plt+0xdc84>
   20374:	add	r0, pc, r0
   20378:	b	202f4 <__assert_fail@plt+0xdba8>
   2037c:	ldr	r2, [pc, #80]	; 203d4 <__assert_fail@plt+0xdc88>
   20380:	ldr	r3, [pc, #80]	; 203d8 <__assert_fail@plt+0xdc8c>
   20384:	add	r2, pc, r2
   20388:	add	r3, pc, r3
   2038c:	stmib	sp, {r0, r2}
   20390:	str	r1, [sp, #12]
   20394:	str	r3, [sp]
   20398:	str	r7, [sp, #24]
   2039c:	str	lr, [sp, #20]
   203a0:	str	ip, [sp, #16]
   203a4:	mvn	r3, #0
   203a8:	mov	r2, #1
   203ac:	mov	r1, #4096	; 0x1000
   203b0:	mov	r0, r4
   203b4:	bl	12728 <__snprintf_chk@plt>
   203b8:	b	20348 <__assert_fail@plt+0xdbfc>
   203bc:	bl	12200 <__stack_chk_fail@plt>
   203c0:	andeq	r4, r1, ip, ror #21
   203c4:	andeq	r0, r0, ip, asr r2
   203c8:			; <UNDEFINED> instruction: 0x000044b4
   203cc:	andeq	r4, r0, r0, asr #9
   203d0:	andeq	r3, r0, ip, ror #9
   203d4:	andeq	r4, r0, r0, asr #8
   203d8:	andeq	r4, r0, r8, ror #8
   203dc:	ldr	r3, [pc, #176]	; 20494 <__assert_fail@plt+0xdd48>
   203e0:	ldr	ip, [pc, #176]	; 20498 <__assert_fail@plt+0xdd4c>
   203e4:	add	r3, pc, r3
   203e8:	push	{r4, r5, r6, r7, lr}
   203ec:	sub	sp, sp, #1040	; 0x410
   203f0:	ldr	r4, [r3, ip]
   203f4:	sub	sp, sp, #4
   203f8:	cmp	r1, #0
   203fc:	cmpne	r2, #0
   20400:	ldr	r3, [r4]
   20404:	str	r3, [sp, #1036]	; 0x40c
   20408:	beq	20464 <__assert_fail@plt+0xdd18>
   2040c:	add	r5, sp, #12
   20410:	str	r2, [sp]
   20414:	mov	r3, #1024	; 0x400
   20418:	mov	r2, r5
   2041c:	bl	20154 <__assert_fail@plt+0xda08>
   20420:	cmp	r0, #0
   20424:	beq	20464 <__assert_fail@plt+0xdd18>
   20428:	ldr	r1, [pc, #108]	; 2049c <__assert_fail@plt+0xdd50>
   2042c:	mov	r0, r5
   20430:	add	r1, pc, r1
   20434:	bl	12680 <fopen64@plt>
   20438:	subs	r6, r0, #0
   2043c:	beq	20464 <__assert_fail@plt+0xdd18>
   20440:	ldr	r1, [pc, #88]	; 204a0 <__assert_fail@plt+0xdd54>
   20444:	mov	r2, r5
   20448:	add	r1, pc, r1
   2044c:	bl	12500 <fscanf@plt>
   20450:	mov	r7, r0
   20454:	mov	r0, r6
   20458:	bl	12590 <fclose@plt>
   2045c:	cmp	r7, #1
   20460:	beq	20484 <__assert_fail@plt+0xdd38>
   20464:	mov	r0, #0
   20468:	ldr	r2, [sp, #1036]	; 0x40c
   2046c:	ldr	r3, [r4]
   20470:	cmp	r2, r3
   20474:	bne	20490 <__assert_fail@plt+0xdd44>
   20478:	add	sp, sp, #1040	; 0x410
   2047c:	add	sp, sp, #4
   20480:	pop	{r4, r5, r6, r7, pc}
   20484:	mov	r0, r5
   20488:	bl	121f4 <strdup@plt>
   2048c:	b	20468 <__assert_fail@plt+0xdd1c>
   20490:	bl	12200 <__stack_chk_fail@plt>
   20494:	andeq	r4, r1, r8, lsr #19
   20498:	andeq	r0, r0, ip, asr r2
   2049c:	andeq	r3, r0, ip, lsr #20
   204a0:	andeq	r4, r0, r4, asr #7
   204a4:	ldr	r3, [pc, #168]	; 20554 <__assert_fail@plt+0xde08>
   204a8:	ldr	r2, [pc, #168]	; 20558 <__assert_fail@plt+0xde0c>
   204ac:	add	r3, pc, r3
   204b0:	push	{r4, r5, r6, lr}
   204b4:	sub	sp, sp, #4160	; 0x1040
   204b8:	ldr	r4, [r3, r2]
   204bc:	sub	sp, sp, #56	; 0x38
   204c0:	add	r2, sp, #4160	; 0x1040
   204c4:	add	r2, r2, #52	; 0x34
   204c8:	ldr	r3, [r4]
   204cc:	cmp	r1, #0
   204d0:	str	r3, [r2]
   204d4:	beq	20528 <__assert_fail@plt+0xdddc>
   204d8:	mov	r3, #0
   204dc:	add	r5, sp, #116	; 0x74
   204e0:	str	r3, [sp]
   204e4:	mov	r2, r5
   204e8:	mov	r3, #4096	; 0x1000
   204ec:	bl	20154 <__assert_fail@plt+0xda08>
   204f0:	add	r6, sp, #120	; 0x78
   204f4:	cmp	r0, #0
   204f8:	beq	20528 <__assert_fail@plt+0xdddc>
   204fc:	mov	r1, r5
   20500:	add	r2, sp, #8
   20504:	mov	r0, #3
   20508:	bl	126c8 <__xstat64@plt>
   2050c:	cmp	r0, #0
   20510:	bne	20528 <__assert_fail@plt+0xdddc>
   20514:	ldr	r3, [r6, #-96]	; 0xffffffa0
   20518:	and	r3, r3, #61440	; 0xf000
   2051c:	cmp	r3, #16384	; 0x4000
   20520:	moveq	r0, #1
   20524:	beq	2052c <__assert_fail@plt+0xdde0>
   20528:	mov	r0, #0
   2052c:	add	r3, sp, #4160	; 0x1040
   20530:	add	r3, r3, #52	; 0x34
   20534:	ldr	r2, [r3]
   20538:	ldr	r3, [r4]
   2053c:	cmp	r2, r3
   20540:	bne	20550 <__assert_fail@plt+0xde04>
   20544:	add	sp, sp, #4160	; 0x1040
   20548:	add	sp, sp, #56	; 0x38
   2054c:	pop	{r4, r5, r6, pc}
   20550:	bl	12200 <__stack_chk_fail@plt>
   20554:	andeq	r4, r1, r0, ror #17
   20558:	andeq	r0, r0, ip, asr r2
   2055c:	ldr	r3, [pc, #124]	; 205e0 <__assert_fail@plt+0xde94>
   20560:	ldr	ip, [pc, #124]	; 205e4 <__assert_fail@plt+0xde98>
   20564:	add	r3, pc, r3
   20568:	push	{r4, r5, lr}
   2056c:	sub	sp, sp, #4160	; 0x1040
   20570:	ldr	r4, [r3, ip]
   20574:	sub	sp, sp, #52	; 0x34
   20578:	add	ip, sp, #4160	; 0x1040
   2057c:	add	ip, ip, #44	; 0x2c
   20580:	add	r5, sp, #108	; 0x6c
   20584:	ldr	r3, [r4]
   20588:	mov	r2, r1
   2058c:	mov	r1, r5
   20590:	str	r3, [ip]
   20594:	bl	20298 <__assert_fail@plt+0xdb4c>
   20598:	cmp	r0, #0
   2059c:	beq	205b8 <__assert_fail@plt+0xde6c>
   205a0:	mov	r1, r5
   205a4:	mov	r2, sp
   205a8:	mov	r0, #3
   205ac:	bl	126c8 <__xstat64@plt>
   205b0:	clz	r0, r0
   205b4:	lsr	r0, r0, #5
   205b8:	add	r3, sp, #4160	; 0x1040
   205bc:	add	r3, r3, #44	; 0x2c
   205c0:	ldr	r2, [r3]
   205c4:	ldr	r3, [r4]
   205c8:	cmp	r2, r3
   205cc:	bne	205dc <__assert_fail@plt+0xde90>
   205d0:	add	sp, sp, #4160	; 0x1040
   205d4:	add	sp, sp, #52	; 0x34
   205d8:	pop	{r4, r5, pc}
   205dc:	bl	12200 <__stack_chk_fail@plt>
   205e0:	andeq	r4, r1, r8, lsr #16
   205e4:	andeq	r0, r0, ip, asr r2
   205e8:	ldr	r3, [pc, #200]	; 206b8 <__assert_fail@plt+0xdf6c>
   205ec:	ldr	r2, [pc, #200]	; 206bc <__assert_fail@plt+0xdf70>
   205f0:	add	r3, pc, r3
   205f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   205f8:	sub	sp, sp, #8256	; 0x2040
   205fc:	ldr	r5, [r3, r2]
   20600:	sub	sp, sp, #52	; 0x34
   20604:	add	ip, sp, #8256	; 0x2040
   20608:	add	ip, ip, #44	; 0x2c
   2060c:	add	r4, sp, #108	; 0x6c
   20610:	ldr	r3, [r5]
   20614:	mov	r6, r1
   20618:	mov	r2, #0
   2061c:	mov	r1, r4
   20620:	str	r3, [ip]
   20624:	bl	20298 <__assert_fail@plt+0xdb4c>
   20628:	cmp	r0, #0
   2062c:	beq	20648 <__assert_fail@plt+0xdefc>
   20630:	mov	r2, sp
   20634:	mov	r1, r4
   20638:	mov	r0, #3
   2063c:	bl	126c8 <__xstat64@plt>
   20640:	subs	r8, r0, #0
   20644:	beq	20670 <__assert_fail@plt+0xdf24>
   20648:	mov	r0, #0
   2064c:	add	r3, sp, #8256	; 0x2040
   20650:	add	r3, r3, #44	; 0x2c
   20654:	ldr	r2, [r3]
   20658:	ldr	r3, [r5]
   2065c:	cmp	r2, r3
   20660:	bne	206b4 <__assert_fail@plt+0xdf68>
   20664:	add	sp, sp, #8256	; 0x2040
   20668:	add	sp, sp, #52	; 0x34
   2066c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20670:	add	r7, sp, #4160	; 0x1040
   20674:	add	r7, r7, #48	; 0x30
   20678:	sub	r9, r7, #4
   2067c:	mov	r0, r4
   20680:	mov	r1, r9
   20684:	ldr	r2, [pc, #52]	; 206c0 <__assert_fail@plt+0xdf74>
   20688:	bl	12284 <readlink@plt>
   2068c:	cmp	r0, #0
   20690:	blt	20648 <__assert_fail@plt+0xdefc>
   20694:	add	r7, r7, r0
   20698:	mov	r1, r6
   2069c:	mov	r0, r9
   206a0:	strb	r8, [r7, #-4]
   206a4:	bl	12080 <strstr@plt>
   206a8:	adds	r0, r0, #0
   206ac:	movne	r0, #1
   206b0:	b	2064c <__assert_fail@plt+0xdf00>
   206b4:	bl	12200 <__stack_chk_fail@plt>
   206b8:	muleq	r1, ip, r7
   206bc:	andeq	r0, r0, ip, asr r2
   206c0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   206c4:	ldr	r3, [pc, #576]	; 2090c <__assert_fail@plt+0xe1c0>
   206c8:	ldr	ip, [pc, #576]	; 20910 <__assert_fail@plt+0xe1c4>
   206cc:	add	r3, pc, r3
   206d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   206d4:	sub	sp, sp, #4224	; 0x1080
   206d8:	ldr	r6, [r3, ip]
   206dc:	mov	r8, r2
   206e0:	add	r2, sp, #4160	; 0x1040
   206e4:	add	r2, r2, #60	; 0x3c
   206e8:	ldr	r3, [r6]
   206ec:	subs	r7, r0, #0
   206f0:	mov	r4, r1
   206f4:	str	r3, [r2]
   206f8:	beq	208c8 <__assert_fail@plt+0xe17c>
   206fc:	cmp	r4, #0
   20700:	beq	208e8 <__assert_fail@plt+0xe19c>
   20704:	ldr	r0, [pc, #520]	; 20914 <__assert_fail@plt+0xe1c8>
   20708:	mov	r2, #5
   2070c:	mov	r1, r4
   20710:	add	r0, pc, r0
   20714:	bl	126e0 <strncmp@plt>
   20718:	cmp	r0, #0
   2071c:	beq	208a4 <__assert_fail@plt+0xe158>
   20720:	mov	r0, r4
   20724:	bl	121f4 <strdup@plt>
   20728:	subs	r5, r0, #0
   2072c:	movne	r9, #33	; 0x21
   20730:	bne	2073c <__assert_fail@plt+0xdff0>
   20734:	b	2086c <__assert_fail@plt+0xe120>
   20738:	strb	r9, [r0]
   2073c:	mov	r1, #47	; 0x2f
   20740:	mov	r0, r5
   20744:	bl	12434 <strchr@plt>
   20748:	cmp	r0, #0
   2074c:	bne	20738 <__assert_fail@plt+0xdfec>
   20750:	cmp	r8, #0
   20754:	beq	20774 <__assert_fail@plt+0xe028>
   20758:	ldr	r0, [pc, #440]	; 20918 <__assert_fail@plt+0xe1cc>
   2075c:	mov	r1, r4
   20760:	mov	r2, #3
   20764:	add	r0, pc, r0
   20768:	bl	126e0 <strncmp@plt>
   2076c:	cmp	r0, #0
   20770:	bne	20800 <__assert_fail@plt+0xe0b4>
   20774:	ldr	r2, [pc, #416]	; 2091c <__assert_fail@plt+0xe1d0>
   20778:	mov	r3, #4096	; 0x1000
   2077c:	add	r2, pc, r2
   20780:	add	r4, sp, #124	; 0x7c
   20784:	stm	sp, {r2, r7}
   20788:	str	r5, [sp, #8]
   2078c:	mov	r0, r4
   20790:	mov	r1, r3
   20794:	mov	r2, #1
   20798:	bl	12728 <__snprintf_chk@plt>
   2079c:	ldr	sl, [pc, #380]	; 20920 <__assert_fail@plt+0xe1d4>
   207a0:	cmp	r0, sl
   207a4:	bhi	2086c <__assert_fail@plt+0xe120>
   207a8:	mov	r0, r4
   207ac:	bl	1ee94 <__assert_fail@plt+0xc748>
   207b0:	mov	r8, r0
   207b4:	mov	r9, r1
   207b8:	orrs	r3, r8, r9
   207bc:	bne	20874 <__assert_fail@plt+0xe128>
   207c0:	ldr	r2, [pc, #348]	; 20924 <__assert_fail@plt+0xe1d8>
   207c4:	mov	r3, #4096	; 0x1000
   207c8:	add	r2, pc, r2
   207cc:	str	r5, [sp, #8]
   207d0:	stm	sp, {r2, r7}
   207d4:	mov	r1, r3
   207d8:	mov	r2, #1
   207dc:	mov	r0, r4
   207e0:	bl	12728 <__snprintf_chk@plt>
   207e4:	cmp	r0, sl
   207e8:	bhi	20874 <__assert_fail@plt+0xe128>
   207ec:	mov	r0, r4
   207f0:	bl	1ee94 <__assert_fail@plt+0xc748>
   207f4:	mov	r8, r0
   207f8:	mov	r9, r1
   207fc:	b	20874 <__assert_fail@plt+0xe128>
   20800:	mov	r0, r8
   20804:	bl	121f4 <strdup@plt>
   20808:	subs	r4, r0, #0
   2080c:	movne	r8, #33	; 0x21
   20810:	bne	2081c <__assert_fail@plt+0xe0d0>
   20814:	b	2086c <__assert_fail@plt+0xe120>
   20818:	strb	r8, [r0]
   2081c:	mov	r1, #47	; 0x2f
   20820:	mov	r0, r4
   20824:	bl	12434 <strchr@plt>
   20828:	cmp	r0, #0
   2082c:	bne	20818 <__assert_fail@plt+0xe0cc>
   20830:	ldr	r2, [pc, #240]	; 20928 <__assert_fail@plt+0xe1dc>
   20834:	mov	r3, #4096	; 0x1000
   20838:	add	r2, pc, r2
   2083c:	add	r8, sp, #124	; 0x7c
   20840:	stm	sp, {r2, r7}
   20844:	mov	r1, r3
   20848:	mov	r2, #1
   2084c:	strd	r4, [sp, #8]
   20850:	mov	r0, r8
   20854:	bl	12728 <__snprintf_chk@plt>
   20858:	mov	r7, r0
   2085c:	mov	r0, r4
   20860:	bl	12134 <free@plt>
   20864:	cmp	r7, #4096	; 0x1000
   20868:	bcc	208d4 <__assert_fail@plt+0xe188>
   2086c:	mov	r8, #0
   20870:	mov	r9, #0
   20874:	mov	r0, r5
   20878:	bl	12134 <free@plt>
   2087c:	add	r3, sp, #4160	; 0x1040
   20880:	add	r3, r3, #60	; 0x3c
   20884:	ldr	r2, [r3]
   20888:	ldr	r3, [r6]
   2088c:	mov	r0, r8
   20890:	cmp	r2, r3
   20894:	mov	r1, r9
   20898:	bne	20908 <__assert_fail@plt+0xe1bc>
   2089c:	add	sp, sp, #4224	; 0x1080
   208a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   208a4:	mov	r1, r4
   208a8:	add	r2, sp, #16
   208ac:	mov	r0, #3
   208b0:	bl	126c8 <__xstat64@plt>
   208b4:	subs	r5, r0, #0
   208b8:	addne	r4, r4, #5
   208bc:	bne	20720 <__assert_fail@plt+0xdfd4>
   208c0:	ldrd	r8, [sp, #48]	; 0x30
   208c4:	b	20874 <__assert_fail@plt+0xe128>
   208c8:	ldr	r7, [pc, #92]	; 2092c <__assert_fail@plt+0xe1e0>
   208cc:	add	r7, pc, r7
   208d0:	b	206fc <__assert_fail@plt+0xdfb0>
   208d4:	mov	r0, r8
   208d8:	bl	1ee94 <__assert_fail@plt+0xc748>
   208dc:	mov	r8, r0
   208e0:	mov	r9, r1
   208e4:	b	20874 <__assert_fail@plt+0xe128>
   208e8:	ldr	r3, [pc, #64]	; 20930 <__assert_fail@plt+0xe1e4>
   208ec:	ldr	r1, [pc, #64]	; 20934 <__assert_fail@plt+0xe1e8>
   208f0:	ldr	r0, [pc, #64]	; 20938 <__assert_fail@plt+0xe1ec>
   208f4:	add	r3, pc, r3
   208f8:	ldr	r2, [pc, #60]	; 2093c <__assert_fail@plt+0xe1f0>
   208fc:	add	r1, pc, r1
   20900:	add	r0, pc, r0
   20904:	bl	1274c <__assert_fail@plt>
   20908:	bl	12200 <__stack_chk_fail@plt>
   2090c:	andeq	r4, r1, r0, asr #13
   20910:	andeq	r0, r0, ip, asr r2
   20914:	andeq	r3, r0, ip, ror #9
   20918:	andeq	r4, r0, r0, asr #1
   2091c:	andeq	r4, r0, r4, asr #1
   20920:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   20924:	andeq	r4, r0, ip, lsl #1
   20928:	strdeq	r3, [r0], -r0
   2092c:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   20930:	andeq	r3, r0, r0, ror #26
   20934:	andeq	r3, r0, ip, lsl pc
   20938:	andeq	r2, r0, r4, ror r5
   2093c:	andeq	r0, r0, r6, ror #6
   20940:	mov	r2, #0
   20944:	mov	r1, r0
   20948:	mov	r0, r2
   2094c:	b	206c4 <__assert_fail@plt+0xdf78>
   20950:	push	{r4, lr}
   20954:	bl	1cb90 <__assert_fail@plt+0xa444>
   20958:	ldrd	r0, [r0]
   2095c:	pop	{r4, pc}
   20960:	ldr	ip, [pc, #656]	; 20bf8 <__assert_fail@plt+0xe4ac>
   20964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20968:	add	ip, pc, ip
   2096c:	ldr	lr, [pc, #648]	; 20bfc <__assert_fail@plt+0xe4b0>
   20970:	sub	sp, sp, #4096	; 0x1000
   20974:	sub	sp, sp, #28
   20978:	ldr	r5, [ip, lr]
   2097c:	mov	r7, r2
   20980:	add	r2, sp, #4096	; 0x1000
   20984:	mov	r8, r3
   20988:	add	r2, r2, #20
   2098c:	ldr	r3, [r5]
   20990:	subs	r9, r0, #0
   20994:	mov	r6, r1
   20998:	str	r3, [r2]
   2099c:	mov	r1, ip
   209a0:	beq	20b58 <__assert_fail@plt+0xe40c>
   209a4:	ldr	r2, [pc, #596]	; 20c00 <__assert_fail@plt+0xe4b4>
   209a8:	mov	r1, #0
   209ac:	add	r2, pc, r2
   209b0:	bl	1ce88 <__assert_fail@plt+0xa73c>
   209b4:	subs	r4, r0, #0
   209b8:	bne	20a7c <__assert_fail@plt+0xe330>
   209bc:	add	fp, sp, #20
   209c0:	mov	r1, fp
   209c4:	mov	r3, r4
   209c8:	ldr	r2, [pc, #564]	; 20c04 <__assert_fail@plt+0xe4b8>
   209cc:	mov	r0, r9
   209d0:	bl	1d7f4 <__assert_fail@plt+0xb0a8>
   209d4:	add	sl, sp, #24
   209d8:	cmp	r0, #0
   209dc:	blt	20b58 <__assert_fail@plt+0xe40c>
   209e0:	add	sl, sl, r0
   209e4:	mov	r0, fp
   209e8:	strb	r4, [sl, #-4]
   209ec:	bl	21f30 <__assert_fail@plt+0xf7e4>
   209f0:	mov	r0, fp
   209f4:	bl	21f30 <__assert_fail@plt+0xf7e4>
   209f8:	subs	sl, r0, #0
   209fc:	beq	20b58 <__assert_fail@plt+0xe40c>
   20a00:	mov	fp, #47	; 0x2f
   20a04:	b	20a0c <__assert_fail@plt+0xe2c0>
   20a08:	strb	fp, [r3]
   20a0c:	mov	r1, #33	; 0x21
   20a10:	mov	r0, sl
   20a14:	bl	12434 <strchr@plt>
   20a18:	subs	r3, r0, #0
   20a1c:	bne	20a08 <__assert_fail@plt+0xe2bc>
   20a20:	cmp	r6, #0
   20a24:	cmpne	r7, #0
   20a28:	bne	20ba8 <__assert_fail@plt+0xe45c>
   20a2c:	cmp	r8, #0
   20a30:	beq	20a54 <__assert_fail@plt+0xe308>
   20a34:	mov	r0, r9
   20a38:	bl	1c9d4 <__assert_fail@plt+0xa288>
   20a3c:	mov	r1, sl
   20a40:	mov	r2, #0
   20a44:	bl	206c4 <__assert_fail@plt+0xdf78>
   20a48:	orrs	r3, r0, r1
   20a4c:	strd	r0, [r8]
   20a50:	beq	20b58 <__assert_fail@plt+0xe40c>
   20a54:	add	r3, sp, #4096	; 0x1000
   20a58:	add	r3, r3, #20
   20a5c:	ldr	r2, [r3]
   20a60:	ldr	r3, [r5]
   20a64:	mov	r0, r4
   20a68:	cmp	r2, r3
   20a6c:	bne	20bf4 <__assert_fail@plt+0xe4a8>
   20a70:	add	sp, sp, #4096	; 0x1000
   20a74:	add	sp, sp, #28
   20a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a7c:	add	r4, sp, #24
   20a80:	mov	r1, r4
   20a84:	ldr	r2, [pc, #380]	; 20c08 <__assert_fail@plt+0xe4bc>
   20a88:	mov	r3, #0
   20a8c:	str	r3, [r1, #-12]!
   20a90:	add	r2, pc, r2
   20a94:	mov	r0, r9
   20a98:	bl	1db58 <__assert_fail@plt+0xb40c>
   20a9c:	ldr	r3, [r4, #-12]
   20aa0:	cmp	r3, #0
   20aa4:	str	r3, [r4, #-8]
   20aa8:	beq	20b60 <__assert_fail@plt+0xe414>
   20aac:	ldr	r1, [pc, #344]	; 20c0c <__assert_fail@plt+0xe4c0>
   20ab0:	sub	r0, r4, #8
   20ab4:	add	r1, pc, r1
   20ab8:	bl	12398 <strsep@plt>
   20abc:	cmp	r0, #0
   20ac0:	ldreq	r3, [r4, #-12]
   20ac4:	beq	20b60 <__assert_fail@plt+0xe414>
   20ac8:	ldr	r1, [pc, #320]	; 20c10 <__assert_fail@plt+0xe4c4>
   20acc:	mov	r2, #4
   20ad0:	add	r1, pc, r1
   20ad4:	bl	12488 <strncasecmp@plt>
   20ad8:	ldr	r3, [r4, #-12]
   20adc:	subs	r4, r0, #0
   20ae0:	bne	20b60 <__assert_fail@plt+0xe414>
   20ae4:	mov	r0, r3
   20ae8:	bl	12134 <free@plt>
   20aec:	mov	r0, r9
   20af0:	bl	1fa8c <__assert_fail@plt+0xd340>
   20af4:	subs	sl, r0, #0
   20af8:	beq	20b68 <__assert_fail@plt+0xe41c>
   20afc:	cmp	r6, #0
   20b00:	cmpne	r7, #0
   20b04:	bne	20bd8 <__assert_fail@plt+0xe48c>
   20b08:	cmp	r8, #0
   20b0c:	beq	20bcc <__assert_fail@plt+0xe480>
   20b10:	mov	r0, r9
   20b14:	bl	1c9d4 <__assert_fail@plt+0xa288>
   20b18:	mov	r2, #0
   20b1c:	mov	r1, sl
   20b20:	bl	206c4 <__assert_fail@plt+0xdf78>
   20b24:	orrs	r3, r0, r1
   20b28:	strd	r0, [r8]
   20b2c:	mov	r0, sl
   20b30:	bne	20bd0 <__assert_fail@plt+0xe484>
   20b34:	bl	12134 <free@plt>
   20b38:	cmp	r6, #0
   20b3c:	beq	20b94 <__assert_fail@plt+0xe448>
   20b40:	mov	r2, r7
   20b44:	mov	r1, r6
   20b48:	mov	r0, r9
   20b4c:	bl	1f640 <__assert_fail@plt+0xcef4>
   20b50:	cmp	r0, #0
   20b54:	bne	20b94 <__assert_fail@plt+0xe448>
   20b58:	mvn	r4, #0
   20b5c:	b	20a54 <__assert_fail@plt+0xe308>
   20b60:	mov	r0, r3
   20b64:	bl	12134 <free@plt>
   20b68:	cmp	r6, #0
   20b6c:	beq	20b88 <__assert_fail@plt+0xe43c>
   20b70:	mov	r2, r7
   20b74:	mov	r1, r6
   20b78:	mov	r0, r9
   20b7c:	bl	1f640 <__assert_fail@plt+0xcef4>
   20b80:	cmp	r0, #0
   20b84:	beq	20b58 <__assert_fail@plt+0xe40c>
   20b88:	cmp	r8, #0
   20b8c:	moveq	r4, r8
   20b90:	beq	20a54 <__assert_fail@plt+0xe308>
   20b94:	mov	r0, r9
   20b98:	bl	20950 <__assert_fail@plt+0xe204>
   20b9c:	mov	r4, #0
   20ba0:	strd	r0, [r8]
   20ba4:	b	20a54 <__assert_fail@plt+0xe308>
   20ba8:	mov	r0, r6
   20bac:	mov	r2, r7
   20bb0:	mov	r1, sl
   20bb4:	str	r3, [sp, #4]
   20bb8:	add	r6, r6, r7
   20bbc:	bl	124e8 <strncpy@plt>
   20bc0:	ldr	r3, [sp, #4]
   20bc4:	strb	r3, [r6, #-1]
   20bc8:	b	20a2c <__assert_fail@plt+0xe2e0>
   20bcc:	mov	r0, sl
   20bd0:	bl	12134 <free@plt>
   20bd4:	b	20a54 <__assert_fail@plt+0xe308>
   20bd8:	mov	r2, r7
   20bdc:	mov	r1, sl
   20be0:	mov	r0, r6
   20be4:	bl	124e8 <strncpy@plt>
   20be8:	add	r3, r6, r7
   20bec:	strb	r4, [r3, #-1]
   20bf0:	b	20b08 <__assert_fail@plt+0xe3bc>
   20bf4:	bl	12200 <__stack_chk_fail@plt>
   20bf8:	andeq	r4, r1, r4, lsr #8
   20bfc:	andeq	r0, r0, ip, asr r2
   20c00:	andeq	r2, r0, r4, ror fp
   20c04:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   20c08:	andeq	r3, r0, ip, asr #25
   20c0c:	andeq	r2, r0, r4, asr #19
   20c10:	andeq	r3, r0, r8, ror #9
   20c14:	orrs	ip, r0, r1
   20c18:	push	{r4, r5, r6, lr}
   20c1c:	beq	20c60 <__assert_fail@plt+0xe514>
   20c20:	mov	r5, r3
   20c24:	mov	r3, #0
   20c28:	mov	r4, r2
   20c2c:	mov	r2, r3
   20c30:	bl	1f528 <__assert_fail@plt+0xcddc>
   20c34:	subs	r6, r0, #0
   20c38:	beq	20c68 <__assert_fail@plt+0xe51c>
   20c3c:	mov	r1, r4
   20c40:	mov	r2, r5
   20c44:	ldr	r3, [sp, #16]
   20c48:	bl	20960 <__assert_fail@plt+0xe214>
   20c4c:	mov	r4, r0
   20c50:	mov	r0, r6
   20c54:	bl	1c670 <__assert_fail@plt+0x9f24>
   20c58:	mov	r0, r4
   20c5c:	pop	{r4, r5, r6, pc}
   20c60:	mvn	r4, #21
   20c64:	b	20c58 <__assert_fail@plt+0xe50c>
   20c68:	mvn	r4, #11
   20c6c:	b	20c58 <__assert_fail@plt+0xe50c>
   20c70:	ldr	ip, [pc, #112]	; 20ce8 <__assert_fail@plt+0xe59c>
   20c74:	ldr	r2, [pc, #112]	; 20cec <__assert_fail@plt+0xe5a0>
   20c78:	add	ip, pc, ip
   20c7c:	push	{r4, r6, r7, lr}
   20c80:	sub	sp, sp, #24
   20c84:	ldr	r4, [ip, r2]
   20c88:	add	lr, sp, #8
   20c8c:	mov	r3, #0
   20c90:	str	lr, [sp]
   20c94:	ldr	lr, [r4]
   20c98:	mov	r2, r3
   20c9c:	mov	r6, r0
   20ca0:	mov	r7, r1
   20ca4:	str	lr, [sp, #20]
   20ca8:	bl	20c14 <__assert_fail@plt+0xe4c8>
   20cac:	cmp	r0, #0
   20cb0:	mvnne	r0, #0
   20cb4:	bne	20ccc <__assert_fail@plt+0xe580>
   20cb8:	ldrd	r2, [sp, #8]
   20cbc:	cmp	r3, r7
   20cc0:	cmpeq	r2, r6
   20cc4:	moveq	r0, #1
   20cc8:	movne	r0, #0
   20ccc:	ldr	r2, [sp, #20]
   20cd0:	ldr	r3, [r4]
   20cd4:	cmp	r2, r3
   20cd8:	bne	20ce4 <__assert_fail@plt+0xe598>
   20cdc:	add	sp, sp, #24
   20ce0:	pop	{r4, r6, r7, pc}
   20ce4:	bl	12200 <__stack_chk_fail@plt>
   20ce8:	andeq	r4, r1, r4, lsl r1
   20cec:	andeq	r0, r0, ip, asr r2
   20cf0:	ldr	r3, [pc, #208]	; 20dc8 <__assert_fail@plt+0xe67c>
   20cf4:	ldr	ip, [pc, #208]	; 20dcc <__assert_fail@plt+0xe680>
   20cf8:	add	r3, pc, r3
   20cfc:	push	{r4, r5, r6, r7, r8, lr}
   20d00:	sub	sp, sp, #112	; 0x70
   20d04:	ldr	r5, [r3, ip]
   20d08:	mov	r6, r0
   20d0c:	mov	r4, r1
   20d10:	ldr	r3, [r5]
   20d14:	mov	r7, r2
   20d18:	str	r3, [sp, #108]	; 0x6c
   20d1c:	bl	1f640 <__assert_fail@plt+0xcef4>
   20d20:	subs	r8, r0, #0
   20d24:	beq	20d88 <__assert_fail@plt+0xe63c>
   20d28:	bl	12428 <strlen@plt>
   20d2c:	add	r3, r0, #6
   20d30:	cmp	r3, r7
   20d34:	bhi	20d88 <__assert_fail@plt+0xe63c>
   20d38:	add	r2, r0, #1
   20d3c:	mov	r1, r8
   20d40:	add	r0, r4, #5
   20d44:	bl	12128 <memmove@plt>
   20d48:	ldr	r3, [pc, #128]	; 20dd0 <__assert_fail@plt+0xe684>
   20d4c:	mov	r2, sp
   20d50:	add	r3, pc, r3
   20d54:	mov	r1, r4
   20d58:	ldr	r0, [r3]
   20d5c:	ldrb	r3, [r3, #4]
   20d60:	str	r0, [r4]
   20d64:	mov	r0, #3
   20d68:	strb	r3, [r4, #4]
   20d6c:	bl	126c8 <__xstat64@plt>
   20d70:	cmp	r0, #0
   20d74:	bne	20d88 <__assert_fail@plt+0xe63c>
   20d78:	ldr	r3, [sp, #16]
   20d7c:	and	r3, r3, #61440	; 0xf000
   20d80:	cmp	r3, #24576	; 0x6000
   20d84:	beq	20da4 <__assert_fail@plt+0xe658>
   20d88:	mov	r0, #0
   20d8c:	ldr	r2, [sp, #108]	; 0x6c
   20d90:	ldr	r3, [r5]
   20d94:	cmp	r2, r3
   20d98:	bne	20dc4 <__assert_fail@plt+0xe678>
   20d9c:	add	sp, sp, #112	; 0x70
   20da0:	pop	{r4, r5, r6, r7, r8, pc}
   20da4:	mov	r0, r6
   20da8:	ldrd	r6, [sp, #32]
   20dac:	bl	20950 <__assert_fail@plt+0xe204>
   20db0:	cmp	r7, r1
   20db4:	cmpeq	r6, r0
   20db8:	bne	20d88 <__assert_fail@plt+0xe63c>
   20dbc:	mov	r0, r4
   20dc0:	b	20d8c <__assert_fail@plt+0xe640>
   20dc4:	bl	12200 <__stack_chk_fail@plt>
   20dc8:	muleq	r1, r4, r0
   20dcc:	andeq	r0, r0, ip, asr r2
   20dd0:	andeq	r2, r0, ip, lsr #29
   20dd4:	push	{r4, r5, r6, lr}
   20dd8:	mov	r6, r3
   20ddc:	mov	r3, #0
   20de0:	mov	r4, r2
   20de4:	mov	r2, r3
   20de8:	bl	1f528 <__assert_fail@plt+0xcddc>
   20dec:	subs	r5, r0, #0
   20df0:	moveq	r4, r5
   20df4:	beq	20e10 <__assert_fail@plt+0xe6c4>
   20df8:	mov	r1, r4
   20dfc:	mov	r2, r6
   20e00:	bl	20cf0 <__assert_fail@plt+0xe5a4>
   20e04:	mov	r4, r0
   20e08:	mov	r0, r5
   20e0c:	bl	1c670 <__assert_fail@plt+0x9f24>
   20e10:	mov	r0, r4
   20e14:	pop	{r4, r5, r6, pc}
   20e18:	push	{r4, r5, r6, lr}
   20e1c:	mov	r6, r3
   20e20:	mov	r3, #0
   20e24:	mov	r4, r2
   20e28:	mov	r2, r3
   20e2c:	bl	1f528 <__assert_fail@plt+0xcddc>
   20e30:	subs	r5, r0, #0
   20e34:	moveq	r4, r5
   20e38:	beq	20e54 <__assert_fail@plt+0xe708>
   20e3c:	mov	r1, r4
   20e40:	mov	r2, r6
   20e44:	bl	1f640 <__assert_fail@plt+0xcef4>
   20e48:	mov	r4, r0
   20e4c:	mov	r0, r5
   20e50:	bl	1c670 <__assert_fail@plt+0x9f24>
   20e54:	mov	r0, r4
   20e58:	pop	{r4, r5, r6, pc}
   20e5c:	ldr	r1, [pc, #112]	; 20ed4 <__assert_fail@plt+0xe788>
   20e60:	ldr	ip, [pc, #112]	; 20ed8 <__assert_fail@plt+0xe78c>
   20e64:	add	r1, pc, r1
   20e68:	push	{r4, r5, r6, lr}
   20e6c:	sub	sp, sp, #16
   20e70:	ldr	r5, [r1, ip]
   20e74:	mov	r4, #0
   20e78:	str	r4, [sp]
   20e7c:	ldr	r1, [r5]
   20e80:	mov	r6, r0
   20e84:	str	r1, [sp, #12]
   20e88:	bl	122b4 <lseek64@plt>
   20e8c:	cmp	r0, #0
   20e90:	sbcs	r3, r1, #0
   20e94:	movlt	r0, r4
   20e98:	blt	20eb8 <__assert_fail@plt+0xe76c>
   20e9c:	mov	r0, r6
   20ea0:	mov	r2, #1
   20ea4:	add	r1, sp, #11
   20ea8:	bl	12104 <read@plt>
   20eac:	cmp	r0, r4
   20eb0:	movle	r0, #0
   20eb4:	movgt	r0, #1
   20eb8:	ldr	r2, [sp, #12]
   20ebc:	ldr	r3, [r5]
   20ec0:	cmp	r2, r3
   20ec4:	bne	20ed0 <__assert_fail@plt+0xe784>
   20ec8:	add	sp, sp, #16
   20ecc:	pop	{r4, r5, r6, pc}
   20ed0:	bl	12200 <__stack_chk_fail@plt>
   20ed4:	andeq	r3, r1, r8, lsr #30
   20ed8:	andeq	r0, r0, ip, asr r2
   20edc:	ldr	r3, [pc, #96]	; 20f44 <__assert_fail@plt+0xe7f8>
   20ee0:	ldr	ip, [pc, #96]	; 20f48 <__assert_fail@plt+0xe7fc>
   20ee4:	add	r3, pc, r3
   20ee8:	push	{r4, lr}
   20eec:	sub	sp, sp, #112	; 0x70
   20ef0:	ldr	r4, [r3, ip]
   20ef4:	mov	r1, r0
   20ef8:	mov	r2, sp
   20efc:	ldr	r3, [r4]
   20f00:	mov	r0, #3
   20f04:	str	r3, [sp, #108]	; 0x6c
   20f08:	bl	12278 <__fxstat64@plt>
   20f0c:	ldr	r2, [sp, #108]	; 0x6c
   20f10:	ldr	r3, [r4]
   20f14:	cmp	r0, #0
   20f18:	movne	r0, #0
   20f1c:	ldreq	r0, [sp, #16]
   20f20:	andeq	r0, r0, #61440	; 0xf000
   20f24:	subeq	r0, r0, #24576	; 0x6000
   20f28:	clzeq	r0, r0
   20f2c:	lsreq	r0, r0, #5
   20f30:	cmp	r2, r3
   20f34:	bne	20f40 <__assert_fail@plt+0xe7f4>
   20f38:	add	sp, sp, #112	; 0x70
   20f3c:	pop	{r4, pc}
   20f40:	bl	12200 <__stack_chk_fail@plt>
   20f44:	andeq	r3, r1, r8, lsr #29
   20f48:	andeq	r0, r0, ip, asr r2
   20f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f50:	mov	sl, r0
   20f54:	sub	sp, sp, #12
   20f58:	mov	r8, #0
   20f5c:	mov	r9, #0
   20f60:	mov	r4, #1024	; 0x400
   20f64:	mov	r5, #0
   20f68:	b	20fac <__assert_fail@plt+0xe860>
   20f6c:	mvn	r1, #0
   20f70:	mvn	r0, #0
   20f74:	cmp	r5, r1
   20f78:	cmpeq	r4, r0
   20f7c:	beq	21048 <__assert_fail@plt+0xe8fc>
   20f80:	mvn	r1, #-2147483648	; 0x80000000
   20f84:	mvn	r0, #1
   20f88:	cmp	r5, r1
   20f8c:	cmpeq	r4, r0
   20f90:	bhi	20f9c <__assert_fail@plt+0xe850>
   20f94:	adds	r2, r4, r4
   20f98:	adc	r3, r5, r5
   20f9c:	mov	r8, r4
   20fa0:	mov	r9, r5
   20fa4:	mov	r4, r2
   20fa8:	mov	r5, r3
   20fac:	mov	r2, r4
   20fb0:	mov	r3, r5
   20fb4:	mov	r0, sl
   20fb8:	bl	20e5c <__assert_fail@plt+0xe710>
   20fbc:	mvn	r2, #0
   20fc0:	mov	r3, r2
   20fc4:	cmp	r0, #0
   20fc8:	bne	20f6c <__assert_fail@plt+0xe820>
   20fcc:	mov	r1, sl
   20fd0:	subs	r6, r4, #1
   20fd4:	sbc	r7, r5, #0
   20fd8:	cmp	r7, r9
   20fdc:	cmpeq	r6, r8
   20fe0:	mov	r0, r1
   20fe4:	bls	2102c <__assert_fail@plt+0xe8e0>
   20fe8:	adds	fp, r4, r8
   20fec:	adc	r3, r5, r9
   20ff0:	lsr	fp, fp, #1
   20ff4:	orr	fp, fp, r3, lsl #31
   20ff8:	lsr	sl, r3, #1
   20ffc:	mov	r2, fp
   21000:	mov	r3, sl
   21004:	str	r1, [sp, #4]
   21008:	bl	20e5c <__assert_fail@plt+0xe710>
   2100c:	ldr	r1, [sp, #4]
   21010:	cmp	r0, #0
   21014:	moveq	r4, fp
   21018:	moveq	r5, sl
   2101c:	beq	20fd0 <__assert_fail@plt+0xe884>
   21020:	mov	r8, fp
   21024:	mov	r9, sl
   21028:	b	20fd0 <__assert_fail@plt+0xe884>
   2102c:	mov	r2, #0
   21030:	mov	r3, #0
   21034:	bl	20e5c <__assert_fail@plt+0xe710>
   21038:	adds	r0, r8, #1
   2103c:	adc	r1, r9, #0
   21040:	add	sp, sp, #12
   21044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21048:	mov	r0, r4
   2104c:	mov	r1, r5
   21050:	add	sp, sp, #12
   21054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21058:	ldr	r3, [pc, #252]	; 2115c <__assert_fail@plt+0xea10>
   2105c:	ldr	ip, [pc, #252]	; 21160 <__assert_fail@plt+0xea14>
   21060:	add	r3, pc, r3
   21064:	push	{r4, r5, r6, r7, lr}
   21068:	sub	sp, sp, #148	; 0x94
   2106c:	ldr	r4, [r3, ip]
   21070:	mov	r2, r1
   21074:	mov	r5, r1
   21078:	ldr	r3, [r4]
   2107c:	ldr	r1, [pc, #224]	; 21164 <__assert_fail@plt+0xea18>
   21080:	mov	r6, r0
   21084:	str	r3, [sp, #140]	; 0x8c
   21088:	bl	122a8 <ioctl@plt>
   2108c:	cmp	r0, #0
   21090:	movge	ip, #0
   21094:	blt	210b4 <__assert_fail@plt+0xe968>
   21098:	ldr	r2, [sp, #140]	; 0x8c
   2109c:	ldr	r3, [r4]
   210a0:	mov	r0, ip
   210a4:	cmp	r2, r3
   210a8:	bne	21158 <__assert_fail@plt+0xea0c>
   210ac:	add	sp, sp, #148	; 0x94
   210b0:	pop	{r4, r5, r6, r7, pc}
   210b4:	add	r7, sp, #32
   210b8:	mov	r2, r7
   210bc:	ldr	r1, [pc, #164]	; 21168 <__assert_fail@plt+0xea1c>
   210c0:	mov	r0, r6
   210c4:	bl	122a8 <ioctl@plt>
   210c8:	cmp	r0, #0
   210cc:	blt	210ec <__assert_fail@plt+0xe9a0>
   210d0:	ldr	r3, [sp, #32]
   210d4:	lsr	r2, r3, #23
   210d8:	lsl	r3, r3, #9
   210dc:	mov	ip, #0
   210e0:	str	r2, [r5, #4]
   210e4:	str	r3, [r5]
   210e8:	b	21098 <__assert_fail@plt+0xe94c>
   210ec:	add	r2, sp, #4
   210f0:	ldr	r1, [pc, #116]	; 2116c <__assert_fail@plt+0xea20>
   210f4:	mov	r0, r6
   210f8:	bl	122a8 <ioctl@plt>
   210fc:	cmp	r0, #0
   21100:	ldrge	r3, [sp, #4]
   21104:	bge	210d4 <__assert_fail@plt+0xe988>
   21108:	mov	r2, r7
   2110c:	mov	r1, r6
   21110:	mov	r0, #3
   21114:	bl	12278 <__fxstat64@plt>
   21118:	ldr	r3, [sp, #48]	; 0x30
   2111c:	and	r3, r3, #61440	; 0xf000
   21120:	subs	ip, r0, #0
   21124:	bne	21138 <__assert_fail@plt+0xe9ec>
   21128:	cmp	r3, #32768	; 0x8000
   2112c:	ldrdeq	r2, [sp, #80]	; 0x50
   21130:	strdeq	r2, [r5]
   21134:	beq	21098 <__assert_fail@plt+0xe94c>
   21138:	cmp	r3, #24576	; 0x6000
   2113c:	mvnne	ip, #0
   21140:	bne	21098 <__assert_fail@plt+0xe94c>
   21144:	mov	r0, r6
   21148:	bl	20f4c <__assert_fail@plt+0xe800>
   2114c:	mov	ip, #0
   21150:	strd	r0, [r5]
   21154:	b	21098 <__assert_fail@plt+0xe94c>
   21158:	bl	12200 <__stack_chk_fail@plt>
   2115c:	andeq	r3, r1, ip, lsr #26
   21160:	andeq	r0, r0, ip, asr r2
   21164:	andhi	r1, r4, r2, ror r2
   21168:	andeq	r1, r0, r0, ror #4
   2116c:	andshi	r0, ip, r4, lsl #4
   21170:	ldr	r3, [pc, #100]	; 211dc <__assert_fail@plt+0xea90>
   21174:	ldr	r2, [pc, #100]	; 211e0 <__assert_fail@plt+0xea94>
   21178:	add	r3, pc, r3
   2117c:	push	{r4, r5, lr}
   21180:	sub	sp, sp, #20
   21184:	ldr	r4, [r3, r2]
   21188:	mov	r5, r1
   2118c:	mov	r1, sp
   21190:	ldr	r3, [r4]
   21194:	str	r3, [sp, #12]
   21198:	bl	21058 <__assert_fail@plt+0xe90c>
   2119c:	cmp	r0, #0
   211a0:	mvnne	r0, #0
   211a4:	ldreq	r3, [sp]
   211a8:	ldreq	r2, [sp, #4]
   211ac:	lsreq	r3, r3, #9
   211b0:	orreq	r3, r3, r2, lsl #23
   211b4:	lsreq	r2, r2, #9
   211b8:	streq	r3, [r5]
   211bc:	streq	r2, [r5, #4]
   211c0:	ldr	r2, [sp, #12]
   211c4:	ldr	r3, [r4]
   211c8:	cmp	r2, r3
   211cc:	bne	211d8 <__assert_fail@plt+0xea8c>
   211d0:	add	sp, sp, #20
   211d4:	pop	{r4, r5, pc}
   211d8:	bl	12200 <__stack_chk_fail@plt>
   211dc:	andeq	r3, r1, r4, lsl ip
   211e0:	andeq	r0, r0, ip, asr r2
   211e4:	mov	r2, r1
   211e8:	push	{r4, lr}
   211ec:	ldr	r1, [pc, #8]	; 211fc <__assert_fail@plt+0xeab0>
   211f0:	bl	122a8 <ioctl@plt>
   211f4:	asr	r0, r0, #31
   211f8:	pop	{r4, pc}
   211fc:	andeq	r1, r0, r8, ror #4
   21200:	push	{lr}		; (str lr, [sp, #-4]!)
   21204:	sub	sp, sp, #12
   21208:	add	r2, sp, #4
   2120c:	str	r1, [sp, #4]
   21210:	ldr	r1, [pc, #12]	; 21224 <__assert_fail@plt+0xead8>
   21214:	bl	122a8 <ioctl@plt>
   21218:	asr	r0, r0, #31
   2121c:	add	sp, sp, #12
   21220:	pop	{pc}		; (ldr pc, [sp], #4)
   21224:	andeq	r1, r0, fp, ror r2
   21228:	ldr	r3, [pc, #88]	; 21288 <__assert_fail@plt+0xeb3c>
   2122c:	ldr	ip, [pc, #88]	; 2128c <__assert_fail@plt+0xeb40>
   21230:	add	r3, pc, r3
   21234:	push	{r4, lr}
   21238:	sub	sp, sp, #8
   2123c:	ldr	r4, [r3, ip]
   21240:	mov	r2, sp
   21244:	ldr	r1, [pc, #68]	; 21290 <__assert_fail@plt+0xeb44>
   21248:	ldr	r3, [r4]
   2124c:	str	r3, [sp, #4]
   21250:	bl	122a8 <ioctl@plt>
   21254:	cmp	r0, #0
   21258:	movlt	r0, #0
   2125c:	blt	2126c <__assert_fail@plt+0xeb20>
   21260:	ldr	r0, [sp]
   21264:	adds	r0, r0, #0
   21268:	movne	r0, #1
   2126c:	ldr	r2, [sp, #4]
   21270:	ldr	r3, [r4]
   21274:	cmp	r2, r3
   21278:	bne	21284 <__assert_fail@plt+0xeb38>
   2127c:	add	sp, sp, #8
   21280:	pop	{r4, pc}
   21284:	bl	12200 <__stack_chk_fail@plt>
   21288:	andeq	r3, r1, ip, asr fp
   2128c:	andeq	r0, r0, ip, asr r2
   21290:	andeq	r1, r0, sl, ror r2
   21294:	ldr	r3, [pc, #260]	; 213a0 <__assert_fail@plt+0xec54>
   21298:	ldr	ip, [pc, #260]	; 213a4 <__assert_fail@plt+0xec58>
   2129c:	add	r3, pc, r3
   212a0:	push	{r4, r5, r6, r7, lr}
   212a4:	mov	r4, r0
   212a8:	ldr	r7, [r3, ip]
   212ac:	ldr	r0, [r0, #16]
   212b0:	sub	sp, sp, #116	; 0x74
   212b4:	and	r0, r0, #61440	; 0xf000
   212b8:	cmp	r0, #24576	; 0x6000
   212bc:	ldr	r0, [r7]
   212c0:	mov	r6, r1
   212c4:	str	r0, [sp, #108]	; 0x6c
   212c8:	orreq	r1, r2, #128	; 0x80
   212cc:	movne	r1, r2
   212d0:	mov	r0, r6
   212d4:	bl	12470 <__open64_2@plt>
   212d8:	cmp	r0, #0
   212dc:	mov	r5, r0
   212e0:	bge	21300 <__assert_fail@plt+0xebb4>
   212e4:	ldr	r2, [sp, #108]	; 0x6c
   212e8:	ldr	r3, [r7]
   212ec:	mov	r0, r5
   212f0:	cmp	r2, r3
   212f4:	bne	2139c <__assert_fail@plt+0xec50>
   212f8:	add	sp, sp, #116	; 0x74
   212fc:	pop	{r4, r5, r6, r7, pc}
   21300:	mov	r1, r0
   21304:	mov	r2, sp
   21308:	mov	r0, #3
   2130c:	bl	12278 <__fxstat64@plt>
   21310:	cmp	r0, #0
   21314:	blt	21380 <__assert_fail@plt+0xec34>
   21318:	ldrd	r0, [sp]
   2131c:	ldrd	r2, [r4]
   21320:	cmp	r1, r3
   21324:	cmpeq	r0, r2
   21328:	bne	21380 <__assert_fail@plt+0xec34>
   2132c:	ldrd	r0, [sp, #96]	; 0x60
   21330:	ldrd	r2, [r4, #96]	; 0x60
   21334:	cmp	r1, r3
   21338:	cmpeq	r0, r2
   2133c:	bne	21380 <__assert_fail@plt+0xec34>
   21340:	ldr	r3, [r4, #16]
   21344:	and	r3, r3, #61440	; 0xf000
   21348:	cmp	r3, #24576	; 0x6000
   2134c:	bne	212e4 <__assert_fail@plt+0xeb98>
   21350:	mov	r0, r5
   21354:	bl	21228 <__assert_fail@plt+0xeadc>
   21358:	cmp	r0, #0
   2135c:	beq	212e4 <__assert_fail@plt+0xeb98>
   21360:	ldr	r1, [pc, #64]	; 213a8 <__assert_fail@plt+0xec5c>
   21364:	mov	r2, #5
   21368:	add	r1, pc, r1
   2136c:	mov	r0, #0
   21370:	bl	121dc <dcgettext@plt>
   21374:	mov	r1, r6
   21378:	bl	12464 <warnx@plt>
   2137c:	b	212e4 <__assert_fail@plt+0xeb98>
   21380:	mov	r0, r5
   21384:	bl	12704 <close@plt>
   21388:	bl	1247c <__errno_location@plt>
   2138c:	mov	r3, #77	; 0x4d
   21390:	mvn	r5, #0
   21394:	str	r3, [r0]
   21398:	b	212e4 <__assert_fail@plt+0xeb98>
   2139c:	bl	12200 <__stack_chk_fail@plt>
   213a0:	strdeq	r3, [r1], -r0
   213a4:	andeq	r0, r0, ip, asr r2
   213a8:	andeq	r3, r0, r4, lsr #10
   213ac:	push	{r4, lr}
   213b0:	mov	r2, #0
   213b4:	ldr	r1, [pc, #8]	; 213c4 <__assert_fail@plt+0xec78>
   213b8:	bl	122a8 <ioctl@plt>
   213bc:	bic	r0, r0, r0, asr #31
   213c0:	pop	{r4, pc}
   213c4:	andeq	r5, r0, r1, lsr r3
   213c8:	ldr	r3, [pc, #96]	; 21430 <__assert_fail@plt+0xece4>
   213cc:	ldr	ip, [pc, #96]	; 21434 <__assert_fail@plt+0xece8>
   213d0:	add	r3, pc, r3
   213d4:	push	{r4, r5, r6, lr}
   213d8:	sub	sp, sp, #16
   213dc:	ldr	r4, [r3, ip]
   213e0:	mov	r6, r1
   213e4:	mov	r5, r2
   213e8:	ldr	r3, [r4]
   213ec:	add	r2, sp, #4
   213f0:	ldr	r1, [pc, #64]	; 21438 <__assert_fail@plt+0xecec>
   213f4:	str	r3, [sp, #12]
   213f8:	bl	122a8 <ioctl@plt>
   213fc:	cmp	r0, #0
   21400:	mvnne	r0, #0
   21404:	ldrbeq	r2, [sp, #4]
   21408:	ldrbeq	r3, [sp, #5]
   2140c:	streq	r2, [r6]
   21410:	streq	r3, [r5]
   21414:	ldr	r2, [sp, #12]
   21418:	ldr	r3, [r4]
   2141c:	cmp	r2, r3
   21420:	bne	2142c <__assert_fail@plt+0xece0>
   21424:	add	sp, sp, #16
   21428:	pop	{r4, r5, r6, pc}
   2142c:	bl	12200 <__stack_chk_fail@plt>
   21430:			; <UNDEFINED> instruction: 0x000139bc
   21434:	andeq	r0, r0, ip, asr r2
   21438:	andeq	r0, r0, r1, lsl #6
   2143c:	cmp	r0, #127	; 0x7f
   21440:	addls	pc, pc, r0, lsl #2
   21444:	b	216fc <__assert_fail@plt+0xefb0>
   21448:	b	21648 <__assert_fail@plt+0xeefc>
   2144c:	b	21654 <__assert_fail@plt+0xef08>
   21450:	b	21660 <__assert_fail@plt+0xef14>
   21454:	b	2166c <__assert_fail@plt+0xef20>
   21458:	b	21678 <__assert_fail@plt+0xef2c>
   2145c:	b	21684 <__assert_fail@plt+0xef38>
   21460:	b	21690 <__assert_fail@plt+0xef44>
   21464:	b	2169c <__assert_fail@plt+0xef50>
   21468:	b	216a8 <__assert_fail@plt+0xef5c>
   2146c:	b	216b4 <__assert_fail@plt+0xef68>
   21470:	b	216fc <__assert_fail@plt+0xefb0>
   21474:	b	216fc <__assert_fail@plt+0xefb0>
   21478:	b	216c0 <__assert_fail@plt+0xef74>
   2147c:	b	216cc <__assert_fail@plt+0xef80>
   21480:	b	216d8 <__assert_fail@plt+0xef8c>
   21484:	b	216fc <__assert_fail@plt+0xefb0>
   21488:	b	216fc <__assert_fail@plt+0xefb0>
   2148c:	b	216e4 <__assert_fail@plt+0xef98>
   21490:	b	216fc <__assert_fail@plt+0xefb0>
   21494:	b	216fc <__assert_fail@plt+0xefb0>
   21498:	b	216fc <__assert_fail@plt+0xefb0>
   2149c:	b	216fc <__assert_fail@plt+0xefb0>
   214a0:	b	216fc <__assert_fail@plt+0xefb0>
   214a4:	b	216fc <__assert_fail@plt+0xefb0>
   214a8:	b	216fc <__assert_fail@plt+0xefb0>
   214ac:	b	216fc <__assert_fail@plt+0xefb0>
   214b0:	b	216fc <__assert_fail@plt+0xefb0>
   214b4:	b	216fc <__assert_fail@plt+0xefb0>
   214b8:	b	216fc <__assert_fail@plt+0xefb0>
   214bc:	b	216fc <__assert_fail@plt+0xefb0>
   214c0:	b	216fc <__assert_fail@plt+0xefb0>
   214c4:	b	216fc <__assert_fail@plt+0xefb0>
   214c8:	b	216fc <__assert_fail@plt+0xefb0>
   214cc:	b	216fc <__assert_fail@plt+0xefb0>
   214d0:	b	216fc <__assert_fail@plt+0xefb0>
   214d4:	b	216fc <__assert_fail@plt+0xefb0>
   214d8:	b	216fc <__assert_fail@plt+0xefb0>
   214dc:	b	216fc <__assert_fail@plt+0xefb0>
   214e0:	b	216fc <__assert_fail@plt+0xefb0>
   214e4:	b	216fc <__assert_fail@plt+0xefb0>
   214e8:	b	216fc <__assert_fail@plt+0xefb0>
   214ec:	b	216fc <__assert_fail@plt+0xefb0>
   214f0:	b	216fc <__assert_fail@plt+0xefb0>
   214f4:	b	216fc <__assert_fail@plt+0xefb0>
   214f8:	b	216fc <__assert_fail@plt+0xefb0>
   214fc:	b	216fc <__assert_fail@plt+0xefb0>
   21500:	b	216fc <__assert_fail@plt+0xefb0>
   21504:	b	216fc <__assert_fail@plt+0xefb0>
   21508:	b	216fc <__assert_fail@plt+0xefb0>
   2150c:	b	216fc <__assert_fail@plt+0xefb0>
   21510:	b	216fc <__assert_fail@plt+0xefb0>
   21514:	b	216fc <__assert_fail@plt+0xefb0>
   21518:	b	216fc <__assert_fail@plt+0xefb0>
   2151c:	b	216fc <__assert_fail@plt+0xefb0>
   21520:	b	216fc <__assert_fail@plt+0xefb0>
   21524:	b	216fc <__assert_fail@plt+0xefb0>
   21528:	b	216fc <__assert_fail@plt+0xefb0>
   2152c:	b	216fc <__assert_fail@plt+0xefb0>
   21530:	b	216fc <__assert_fail@plt+0xefb0>
   21534:	b	216fc <__assert_fail@plt+0xefb0>
   21538:	b	216fc <__assert_fail@plt+0xefb0>
   2153c:	b	216fc <__assert_fail@plt+0xefb0>
   21540:	b	216fc <__assert_fail@plt+0xefb0>
   21544:	b	216fc <__assert_fail@plt+0xefb0>
   21548:	b	216fc <__assert_fail@plt+0xefb0>
   2154c:	b	216fc <__assert_fail@plt+0xefb0>
   21550:	b	216fc <__assert_fail@plt+0xefb0>
   21554:	b	216fc <__assert_fail@plt+0xefb0>
   21558:	b	216fc <__assert_fail@plt+0xefb0>
   2155c:	b	216fc <__assert_fail@plt+0xefb0>
   21560:	b	216fc <__assert_fail@plt+0xefb0>
   21564:	b	216fc <__assert_fail@plt+0xefb0>
   21568:	b	216fc <__assert_fail@plt+0xefb0>
   2156c:	b	216fc <__assert_fail@plt+0xefb0>
   21570:	b	216fc <__assert_fail@plt+0xefb0>
   21574:	b	216fc <__assert_fail@plt+0xefb0>
   21578:	b	216fc <__assert_fail@plt+0xefb0>
   2157c:	b	216fc <__assert_fail@plt+0xefb0>
   21580:	b	216fc <__assert_fail@plt+0xefb0>
   21584:	b	216fc <__assert_fail@plt+0xefb0>
   21588:	b	216fc <__assert_fail@plt+0xefb0>
   2158c:	b	216fc <__assert_fail@plt+0xefb0>
   21590:	b	216fc <__assert_fail@plt+0xefb0>
   21594:	b	216fc <__assert_fail@plt+0xefb0>
   21598:	b	216fc <__assert_fail@plt+0xefb0>
   2159c:	b	216fc <__assert_fail@plt+0xefb0>
   215a0:	b	216fc <__assert_fail@plt+0xefb0>
   215a4:	b	216fc <__assert_fail@plt+0xefb0>
   215a8:	b	216fc <__assert_fail@plt+0xefb0>
   215ac:	b	216fc <__assert_fail@plt+0xefb0>
   215b0:	b	216fc <__assert_fail@plt+0xefb0>
   215b4:	b	216fc <__assert_fail@plt+0xefb0>
   215b8:	b	216fc <__assert_fail@plt+0xefb0>
   215bc:	b	216fc <__assert_fail@plt+0xefb0>
   215c0:	b	216fc <__assert_fail@plt+0xefb0>
   215c4:	b	216fc <__assert_fail@plt+0xefb0>
   215c8:	b	216fc <__assert_fail@plt+0xefb0>
   215cc:	b	216fc <__assert_fail@plt+0xefb0>
   215d0:	b	216fc <__assert_fail@plt+0xefb0>
   215d4:	b	216fc <__assert_fail@plt+0xefb0>
   215d8:	b	216fc <__assert_fail@plt+0xefb0>
   215dc:	b	216fc <__assert_fail@plt+0xefb0>
   215e0:	b	216fc <__assert_fail@plt+0xefb0>
   215e4:	b	216fc <__assert_fail@plt+0xefb0>
   215e8:	b	216fc <__assert_fail@plt+0xefb0>
   215ec:	b	216fc <__assert_fail@plt+0xefb0>
   215f0:	b	216fc <__assert_fail@plt+0xefb0>
   215f4:	b	216fc <__assert_fail@plt+0xefb0>
   215f8:	b	216fc <__assert_fail@plt+0xefb0>
   215fc:	b	216fc <__assert_fail@plt+0xefb0>
   21600:	b	216fc <__assert_fail@plt+0xefb0>
   21604:	b	216fc <__assert_fail@plt+0xefb0>
   21608:	b	216fc <__assert_fail@plt+0xefb0>
   2160c:	b	216fc <__assert_fail@plt+0xefb0>
   21610:	b	216fc <__assert_fail@plt+0xefb0>
   21614:	b	216fc <__assert_fail@plt+0xefb0>
   21618:	b	216fc <__assert_fail@plt+0xefb0>
   2161c:	b	216fc <__assert_fail@plt+0xefb0>
   21620:	b	216fc <__assert_fail@plt+0xefb0>
   21624:	b	216fc <__assert_fail@plt+0xefb0>
   21628:	b	216fc <__assert_fail@plt+0xefb0>
   2162c:	b	216fc <__assert_fail@plt+0xefb0>
   21630:	b	216fc <__assert_fail@plt+0xefb0>
   21634:	b	216fc <__assert_fail@plt+0xefb0>
   21638:	b	216fc <__assert_fail@plt+0xefb0>
   2163c:	b	216fc <__assert_fail@plt+0xefb0>
   21640:	b	216fc <__assert_fail@plt+0xefb0>
   21644:	b	216f0 <__assert_fail@plt+0xefa4>
   21648:	ldr	r0, [pc, #180]	; 21704 <__assert_fail@plt+0xefb8>
   2164c:	add	r0, pc, r0
   21650:	bx	lr
   21654:	ldr	r0, [pc, #172]	; 21708 <__assert_fail@plt+0xefbc>
   21658:	add	r0, pc, r0
   2165c:	bx	lr
   21660:	ldr	r0, [pc, #164]	; 2170c <__assert_fail@plt+0xefc0>
   21664:	add	r0, pc, r0
   21668:	bx	lr
   2166c:	ldr	r0, [pc, #156]	; 21710 <__assert_fail@plt+0xefc4>
   21670:	add	r0, pc, r0
   21674:	bx	lr
   21678:	ldr	r0, [pc, #148]	; 21714 <__assert_fail@plt+0xefc8>
   2167c:	add	r0, pc, r0
   21680:	bx	lr
   21684:	ldr	r0, [pc, #140]	; 21718 <__assert_fail@plt+0xefcc>
   21688:	add	r0, pc, r0
   2168c:	bx	lr
   21690:	ldr	r0, [pc, #132]	; 2171c <__assert_fail@plt+0xefd0>
   21694:	add	r0, pc, r0
   21698:	bx	lr
   2169c:	ldr	r0, [pc, #124]	; 21720 <__assert_fail@plt+0xefd4>
   216a0:	add	r0, pc, r0
   216a4:	bx	lr
   216a8:	ldr	r0, [pc, #116]	; 21724 <__assert_fail@plt+0xefd8>
   216ac:	add	r0, pc, r0
   216b0:	bx	lr
   216b4:	ldr	r0, [pc, #108]	; 21728 <__assert_fail@plt+0xefdc>
   216b8:	add	r0, pc, r0
   216bc:	bx	lr
   216c0:	ldr	r0, [pc, #100]	; 2172c <__assert_fail@plt+0xefe0>
   216c4:	add	r0, pc, r0
   216c8:	bx	lr
   216cc:	ldr	r0, [pc, #92]	; 21730 <__assert_fail@plt+0xefe4>
   216d0:	add	r0, pc, r0
   216d4:	bx	lr
   216d8:	ldr	r0, [pc, #84]	; 21734 <__assert_fail@plt+0xefe8>
   216dc:	add	r0, pc, r0
   216e0:	bx	lr
   216e4:	ldr	r0, [pc, #76]	; 21738 <__assert_fail@plt+0xefec>
   216e8:	add	r0, pc, r0
   216ec:	bx	lr
   216f0:	ldr	r0, [pc, #68]	; 2173c <__assert_fail@plt+0xeff0>
   216f4:	add	r0, pc, r0
   216f8:	bx	lr
   216fc:	mov	r0, #0
   21700:	bx	lr
   21704:	andeq	r3, r0, ip, asr r2
   21708:			; <UNDEFINED> instruction: 0x000032bc
   2170c:	andeq	r3, r0, ip, asr #4
   21710:	andeq	r3, r0, r8, asr #4
   21714:	andeq	r3, r0, r8, asr #4
   21718:	andeq	r3, r0, r4, asr #4
   2171c:	andeq	r3, r0, ip, lsr r2
   21720:	andeq	r3, r0, r8, lsr r2
   21724:	andeq	r3, r0, r4, lsr r2
   21728:	andeq	r3, r0, r0, lsr r2
   2172c:	andeq	r3, r0, ip, lsr #4
   21730:	andeq	r3, r0, r8, lsr #4
   21734:	andeq	r3, r0, r8, lsr #4
   21738:	andeq	r3, r0, r0, lsr #4
   2173c:	andeq	r3, r0, r8, lsl r2
   21740:	ldr	r3, [pc, #196]	; 2180c <__assert_fail@plt+0xf0c0>
   21744:	ldr	r2, [pc, #196]	; 21810 <__assert_fail@plt+0xf0c4>
   21748:	add	r3, pc, r3
   2174c:	push	{r4, r5, r6, r7, lr}
   21750:	sub	sp, sp, #116	; 0x74
   21754:	ldr	r4, [r3, r2]
   21758:	mov	r5, r1
   2175c:	mov	r1, #47	; 0x2f
   21760:	ldr	r3, [r4]
   21764:	mov	r7, r0
   21768:	str	r3, [sp, #108]	; 0x6c
   2176c:	bl	125fc <strrchr@plt>
   21770:	mov	r3, #0
   21774:	str	r3, [r5]
   21778:	subs	r6, r0, #0
   2177c:	beq	217b4 <__assert_fail@plt+0xf068>
   21780:	ldr	r1, [pc, #140]	; 21814 <__assert_fail@plt+0xf0c8>
   21784:	mov	r2, #4
   21788:	add	r1, pc, r1
   2178c:	bl	126e0 <strncmp@plt>
   21790:	cmp	r0, #0
   21794:	bne	217b4 <__assert_fail@plt+0xf068>
   21798:	bl	123d4 <__ctype_b_loc@plt>
   2179c:	ldrsb	r3, [r6, #4]
   217a0:	lsl	r3, r3, #1
   217a4:	ldr	r2, [r0]
   217a8:	ldrh	r3, [r2, r3]
   217ac:	tst	r3, #2048	; 0x800
   217b0:	bne	217d0 <__assert_fail@plt+0xf084>
   217b4:	mov	r0, #0
   217b8:	ldr	r2, [sp, #108]	; 0x6c
   217bc:	ldr	r3, [r4]
   217c0:	cmp	r2, r3
   217c4:	bne	21808 <__assert_fail@plt+0xf0bc>
   217c8:	add	sp, sp, #116	; 0x74
   217cc:	pop	{r4, r5, r6, r7, pc}
   217d0:	mov	r1, r7
   217d4:	mov	r2, sp
   217d8:	mov	r0, #3
   217dc:	bl	126c8 <__xstat64@plt>
   217e0:	cmp	r0, #0
   217e4:	bne	217b4 <__assert_fail@plt+0xf068>
   217e8:	ldr	r3, [sp, #16]
   217ec:	and	r3, r3, #61440	; 0xf000
   217f0:	cmp	r3, #24576	; 0x6000
   217f4:	bne	217b4 <__assert_fail@plt+0xf068>
   217f8:	mov	r0, #1
   217fc:	add	r6, r6, r0
   21800:	str	r6, [r5]
   21804:	b	217b8 <__assert_fail@plt+0xf06c>
   21808:	bl	12200 <__stack_chk_fail@plt>
   2180c:	andeq	r3, r1, r4, asr #12
   21810:	andeq	r0, r0, ip, asr r2
   21814:	muleq	r0, r4, r1
   21818:	ldr	r3, [pc, #292]	; 21944 <__assert_fail@plt+0xf1f8>
   2181c:	ldr	r2, [pc, #292]	; 21948 <__assert_fail@plt+0xf1fc>
   21820:	add	r3, pc, r3
   21824:	push	{r4, r5, r6, r7, r8, lr}
   21828:	sub	sp, sp, #520	; 0x208
   2182c:	ldr	r4, [r3, r2]
   21830:	cmp	r1, #0
   21834:	ldr	r3, [r4]
   21838:	str	r3, [sp, #516]	; 0x204
   2183c:	beq	218e8 <__assert_fail@plt+0xf19c>
   21840:	ldrsb	r3, [r1]
   21844:	cmp	r3, #0
   21848:	beq	218e8 <__assert_fail@plt+0xf19c>
   2184c:	cmp	r0, #0
   21850:	beq	218f0 <__assert_fail@plt+0xf1a4>
   21854:	ldr	r2, [pc, #240]	; 2194c <__assert_fail@plt+0xf200>
   21858:	mov	r3, #256	; 0x100
   2185c:	add	r2, pc, r2
   21860:	add	r5, sp, #260	; 0x104
   21864:	strd	r0, [sp, #4]
   21868:	str	r2, [sp]
   2186c:	mov	r1, r3
   21870:	mov	r2, #1
   21874:	mov	r0, r5
   21878:	bl	12728 <__snprintf_chk@plt>
   2187c:	ldr	r1, [pc, #204]	; 21950 <__assert_fail@plt+0xf204>
   21880:	mov	r0, r5
   21884:	add	r1, pc, r1
   21888:	bl	12680 <fopen64@plt>
   2188c:	subs	r7, r0, #0
   21890:	beq	218e8 <__assert_fail@plt+0xf19c>
   21894:	add	r8, sp, #16
   21898:	mov	r0, r8
   2189c:	mov	r2, r7
   218a0:	mov	r1, #244	; 0xf4
   218a4:	bl	12140 <fgets@plt>
   218a8:	subs	r6, r0, #0
   218ac:	beq	218c4 <__assert_fail@plt+0xf178>
   218b0:	mov	r0, r8
   218b4:	bl	12428 <strlen@plt>
   218b8:	cmp	r0, #1
   218bc:	movls	r6, #0
   218c0:	bhi	218fc <__assert_fail@plt+0xf1b0>
   218c4:	mov	r0, r7
   218c8:	bl	12590 <fclose@plt>
   218cc:	ldr	r2, [sp, #516]	; 0x204
   218d0:	ldr	r3, [r4]
   218d4:	mov	r0, r6
   218d8:	cmp	r2, r3
   218dc:	bne	21940 <__assert_fail@plt+0xf1f4>
   218e0:	add	sp, sp, #520	; 0x208
   218e4:	pop	{r4, r5, r6, r7, r8, pc}
   218e8:	mov	r6, #0
   218ec:	b	218cc <__assert_fail@plt+0xf180>
   218f0:	ldr	r0, [pc, #92]	; 21954 <__assert_fail@plt+0xf208>
   218f4:	add	r0, pc, r0
   218f8:	b	21854 <__assert_fail@plt+0xf108>
   218fc:	add	r3, sp, #520	; 0x208
   21900:	ldr	r2, [pc, #80]	; 21958 <__assert_fail@plt+0xf20c>
   21904:	add	r0, r3, r0
   21908:	mov	ip, #0
   2190c:	mov	r3, #256	; 0x100
   21910:	add	r2, pc, r2
   21914:	str	r2, [sp]
   21918:	str	r8, [sp, #4]
   2191c:	mov	r1, r3
   21920:	strb	ip, [r0, #-505]	; 0xfffffe07
   21924:	mov	r2, #1
   21928:	mov	r0, r5
   2192c:	bl	12728 <__snprintf_chk@plt>
   21930:	mov	r0, r5
   21934:	bl	121f4 <strdup@plt>
   21938:	mov	r6, r0
   2193c:	b	218c4 <__assert_fail@plt+0xf178>
   21940:	bl	12200 <__stack_chk_fail@plt>
   21944:	andeq	r3, r1, ip, ror #10
   21948:	andeq	r0, r0, ip, asr r2
   2194c:	andeq	r3, r0, r8, asr #1
   21950:	ldrdeq	r2, [r0], -r8
   21954:	andeq	r1, r0, ip, ror #30
   21958:	andeq	r3, r0, ip, lsr #32
   2195c:	mov	r1, r0
   21960:	mov	r0, #0
   21964:	b	21818 <__assert_fail@plt+0xf0cc>
   21968:	ldr	r3, [pc, #324]	; 21ab4 <__assert_fail@plt+0xf368>
   2196c:	ldr	r2, [pc, #324]	; 21ab8 <__assert_fail@plt+0xf36c>
   21970:	add	r3, pc, r3
   21974:	push	{r4, r5, r6, r7, r8, r9, lr}
   21978:	sub	sp, sp, #4096	; 0x1000
   2197c:	ldr	r5, [r3, r2]
   21980:	sub	sp, sp, #12
   21984:	add	r2, sp, #4096	; 0x1000
   21988:	add	r2, r2, #4
   2198c:	ldr	r3, [r5]
   21990:	subs	r4, r0, #0
   21994:	str	r3, [r2]
   21998:	beq	21a7c <__assert_fail@plt+0xf330>
   2199c:	ldrsb	r3, [r4]
   219a0:	cmp	r3, #47	; 0x2f
   219a4:	beq	21a7c <__assert_fail@plt+0xf330>
   219a8:	add	r7, sp, #4
   219ac:	mov	r0, r7
   219b0:	mov	r1, #4096	; 0x1000
   219b4:	bl	123e0 <getcwd@plt>
   219b8:	subs	r6, r0, #0
   219bc:	beq	21a44 <__assert_fail@plt+0xf2f8>
   219c0:	ldr	r1, [pc, #244]	; 21abc <__assert_fail@plt+0xf370>
   219c4:	mov	r2, #2
   219c8:	add	r1, pc, r1
   219cc:	mov	r0, r4
   219d0:	bl	126e0 <strncmp@plt>
   219d4:	cmp	r0, #0
   219d8:	bne	21a90 <__assert_fail@plt+0xf344>
   219dc:	adds	r8, r4, #2
   219e0:	beq	21a90 <__assert_fail@plt+0xf344>
   219e4:	ldrsb	r3, [r8]
   219e8:	cmp	r3, #0
   219ec:	beq	21a6c <__assert_fail@plt+0xf320>
   219f0:	mov	r0, r7
   219f4:	bl	12428 <strlen@plt>
   219f8:	mov	r4, r0
   219fc:	mov	r0, r8
   21a00:	bl	12428 <strlen@plt>
   21a04:	mov	r9, r0
   21a08:	add	r0, r4, r0
   21a0c:	add	r0, r0, #2
   21a10:	bl	12350 <malloc@plt>
   21a14:	subs	r6, r0, #0
   21a18:	beq	21a44 <__assert_fail@plt+0xf2f8>
   21a1c:	mov	r1, r7
   21a20:	mov	r2, r4
   21a24:	bl	121ac <memcpy@plt>
   21a28:	add	r0, r6, r4
   21a2c:	mov	r3, #47	; 0x2f
   21a30:	add	r2, r9, #1
   21a34:	mov	r1, r8
   21a38:	add	r0, r0, #1
   21a3c:	strb	r3, [r6, r4]
   21a40:	bl	121ac <memcpy@plt>
   21a44:	add	r3, sp, #4096	; 0x1000
   21a48:	add	r3, r3, #4
   21a4c:	ldr	r2, [r3]
   21a50:	ldr	r3, [r5]
   21a54:	mov	r0, r6
   21a58:	cmp	r2, r3
   21a5c:	bne	21ab0 <__assert_fail@plt+0xf364>
   21a60:	add	sp, sp, #4096	; 0x1000
   21a64:	add	sp, sp, #12
   21a68:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21a6c:	mov	r0, r7
   21a70:	bl	121f4 <strdup@plt>
   21a74:	mov	r6, r0
   21a78:	b	21a44 <__assert_fail@plt+0xf2f8>
   21a7c:	bl	1247c <__errno_location@plt>
   21a80:	mov	r3, #22
   21a84:	mov	r6, #0
   21a88:	str	r3, [r0]
   21a8c:	b	21a44 <__assert_fail@plt+0xf2f8>
   21a90:	ldr	r1, [pc, #40]	; 21ac0 <__assert_fail@plt+0xf374>
   21a94:	mov	r0, r4
   21a98:	add	r1, pc, r1
   21a9c:	bl	120c8 <strcmp@plt>
   21aa0:	cmp	r0, #0
   21aa4:	beq	21a6c <__assert_fail@plt+0xf320>
   21aa8:	mov	r8, r4
   21aac:	b	219e4 <__assert_fail@plt+0xf298>
   21ab0:	bl	12200 <__stack_chk_fail@plt>
   21ab4:	andeq	r3, r1, ip, lsl r4
   21ab8:	andeq	r0, r0, ip, asr r2
   21abc:	andeq	r2, r0, r4, lsl #31
   21ac0:	andeq	r1, r0, r8, lsr #8
   21ac4:	ldr	r3, [pc, #180]	; 21b80 <__assert_fail@plt+0xf434>
   21ac8:	ldr	r2, [pc, #180]	; 21b84 <__assert_fail@plt+0xf438>
   21acc:	add	r3, pc, r3
   21ad0:	push	{r4, r5, r6, lr}
   21ad4:	sub	sp, sp, #8
   21ad8:	ldr	r5, [r3, r2]
   21adc:	subs	r6, r0, #0
   21ae0:	ldr	r3, [r5]
   21ae4:	str	r3, [sp, #4]
   21ae8:	beq	21b74 <__assert_fail@plt+0xf428>
   21aec:	ldrsb	r4, [r6]
   21af0:	cmp	r4, #0
   21af4:	beq	21b18 <__assert_fail@plt+0xf3cc>
   21af8:	mov	r1, #0
   21afc:	bl	126f8 <realpath@plt>
   21b00:	subs	r4, r0, #0
   21b04:	beq	21b54 <__assert_fail@plt+0xf408>
   21b08:	mov	r1, sp
   21b0c:	bl	21740 <__assert_fail@plt+0xeff4>
   21b10:	cmp	r0, #0
   21b14:	bne	21b34 <__assert_fail@plt+0xf3e8>
   21b18:	ldr	r2, [sp, #4]
   21b1c:	ldr	r3, [r5]
   21b20:	mov	r0, r4
   21b24:	cmp	r2, r3
   21b28:	bne	21b7c <__assert_fail@plt+0xf430>
   21b2c:	add	sp, sp, #8
   21b30:	pop	{r4, r5, r6, pc}
   21b34:	ldr	r0, [sp]
   21b38:	bl	2195c <__assert_fail@plt+0xf210>
   21b3c:	subs	r6, r0, #0
   21b40:	beq	21b18 <__assert_fail@plt+0xf3cc>
   21b44:	mov	r0, r4
   21b48:	bl	12134 <free@plt>
   21b4c:	mov	r4, r6
   21b50:	b	21b18 <__assert_fail@plt+0xf3cc>
   21b54:	ldr	r2, [sp, #4]
   21b58:	ldr	r3, [r5]
   21b5c:	cmp	r2, r3
   21b60:	bne	21b7c <__assert_fail@plt+0xf430>
   21b64:	mov	r0, r6
   21b68:	add	sp, sp, #8
   21b6c:	pop	{r4, r5, r6, lr}
   21b70:	b	121f4 <strdup@plt>
   21b74:	mov	r4, r6
   21b78:	b	21b18 <__assert_fail@plt+0xf3cc>
   21b7c:	bl	12200 <__stack_chk_fail@plt>
   21b80:	andeq	r3, r1, r0, asr #5
   21b84:	andeq	r0, r0, ip, asr r2
   21b88:	ldr	r3, [pc, #268]	; 21c9c <__assert_fail@plt+0xf550>
   21b8c:	ldr	r2, [pc, #268]	; 21ca0 <__assert_fail@plt+0xf554>
   21b90:	add	r3, pc, r3
   21b94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21b98:	sub	sp, sp, #8
   21b9c:	ldr	r4, [r3, r2]
   21ba0:	subs	r5, r0, #0
   21ba4:	ldr	r3, [r4]
   21ba8:	str	r3, [sp, #4]
   21bac:	beq	21c4c <__assert_fail@plt+0xf500>
   21bb0:	ldrsb	r3, [r5]
   21bb4:	cmp	r3, #0
   21bb8:	beq	21c4c <__assert_fail@plt+0xf500>
   21bbc:	bl	12248 <geteuid@plt>
   21bc0:	mov	r9, r0
   21bc4:	bl	12290 <getegid@plt>
   21bc8:	mov	r8, r0
   21bcc:	bl	124c4 <getgid@plt>
   21bd0:	bl	12584 <setegid@plt>
   21bd4:	cmp	r0, #0
   21bd8:	blt	21c4c <__assert_fail@plt+0xf500>
   21bdc:	bl	1211c <getuid@plt>
   21be0:	bl	1226c <seteuid@plt>
   21be4:	cmp	r0, #0
   21be8:	blt	21c4c <__assert_fail@plt+0xf500>
   21bec:	bl	1247c <__errno_location@plt>
   21bf0:	mov	r7, #0
   21bf4:	mov	r1, r7
   21bf8:	mov	r6, r0
   21bfc:	mov	r0, r5
   21c00:	str	r7, [r6]
   21c04:	bl	126f8 <realpath@plt>
   21c08:	subs	r5, r0, #0
   21c0c:	beq	21c6c <__assert_fail@plt+0xf520>
   21c10:	mov	r1, sp
   21c14:	bl	21740 <__assert_fail@plt+0xeff4>
   21c18:	subs	sl, r0, #0
   21c1c:	bne	21c74 <__assert_fail@plt+0xf528>
   21c20:	mov	r0, r8
   21c24:	bl	12584 <setegid@plt>
   21c28:	cmp	r0, #0
   21c2c:	blt	21c44 <__assert_fail@plt+0xf4f8>
   21c30:	mov	r0, r9
   21c34:	bl	1226c <seteuid@plt>
   21c38:	cmp	r0, #0
   21c3c:	strge	sl, [r6]
   21c40:	bge	21c50 <__assert_fail@plt+0xf504>
   21c44:	mov	r0, r5
   21c48:	bl	12134 <free@plt>
   21c4c:	mov	r5, #0
   21c50:	ldr	r2, [sp, #4]
   21c54:	ldr	r3, [r4]
   21c58:	mov	r0, r5
   21c5c:	cmp	r2, r3
   21c60:	bne	21c98 <__assert_fail@plt+0xf54c>
   21c64:	add	sp, sp, #8
   21c68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21c6c:	ldr	sl, [r6]
   21c70:	b	21c20 <__assert_fail@plt+0xf4d4>
   21c74:	ldr	r0, [sp]
   21c78:	bl	2195c <__assert_fail@plt+0xf210>
   21c7c:	subs	sl, r0, #0
   21c80:	beq	21c20 <__assert_fail@plt+0xf4d4>
   21c84:	mov	r0, r5
   21c88:	bl	12134 <free@plt>
   21c8c:	mov	r5, sl
   21c90:	mov	sl, r7
   21c94:	b	21c20 <__assert_fail@plt+0xf4d4>
   21c98:	bl	12200 <__stack_chk_fail@plt>
   21c9c:	strdeq	r3, [r1], -ip
   21ca0:	andeq	r0, r0, ip, asr r2
   21ca4:	ldr	r1, [pc]	; 21cac <__assert_fail@plt+0xf560>
   21ca8:	b	1229c <mkostemp64@plt>
   21cac:	andeq	r0, r8, r2, asr #1
   21cb0:	ldr	ip, [pc, #208]	; 21d88 <__assert_fail@plt+0xf63c>
   21cb4:	push	{r4, r5, r6, r7, lr}
   21cb8:	add	ip, pc, ip
   21cbc:	ldr	lr, [pc, #200]	; 21d8c <__assert_fail@plt+0xf640>
   21cc0:	sub	sp, sp, #20
   21cc4:	mov	r5, r2
   21cc8:	ldr	r4, [ip, lr]
   21ccc:	subs	r3, r1, #0
   21cd0:	mov	r6, r0
   21cd4:	ldr	r2, [r4]
   21cd8:	mov	r0, ip
   21cdc:	str	r2, [sp, #12]
   21ce0:	beq	21d50 <__assert_fail@plt+0xf604>
   21ce4:	ldr	r2, [pc, #164]	; 21d90 <__assert_fail@plt+0xf644>
   21ce8:	str	r5, [sp]
   21cec:	add	r2, pc, r2
   21cf0:	mov	r1, #1
   21cf4:	add	r0, sp, #8
   21cf8:	bl	1232c <__asprintf_chk@plt>
   21cfc:	cmp	r0, #0
   21d00:	blt	21d7c <__assert_fail@plt+0xf630>
   21d04:	mov	r0, #63	; 0x3f
   21d08:	bl	126bc <umask@plt>
   21d0c:	mov	r7, r0
   21d10:	ldr	r0, [sp, #8]
   21d14:	bl	21ca4 <__assert_fail@plt+0xf558>
   21d18:	mov	r5, r0
   21d1c:	mov	r0, r7
   21d20:	bl	126bc <umask@plt>
   21d24:	cmn	r5, #1
   21d28:	beq	21d6c <__assert_fail@plt+0xf620>
   21d2c:	ldr	r3, [sp, #8]
   21d30:	str	r3, [r6]
   21d34:	ldr	r2, [sp, #12]
   21d38:	ldr	r3, [r4]
   21d3c:	mov	r0, r5
   21d40:	cmp	r2, r3
   21d44:	bne	21d84 <__assert_fail@plt+0xf638>
   21d48:	add	sp, sp, #20
   21d4c:	pop	{r4, r5, r6, r7, pc}
   21d50:	ldr	r0, [pc, #60]	; 21d94 <__assert_fail@plt+0xf648>
   21d54:	add	r0, pc, r0
   21d58:	bl	12338 <getenv@plt>
   21d5c:	subs	r3, r0, #0
   21d60:	ldreq	r3, [pc, #48]	; 21d98 <__assert_fail@plt+0xf64c>
   21d64:	addeq	r3, pc, r3
   21d68:	b	21ce4 <__assert_fail@plt+0xf598>
   21d6c:	ldr	r0, [sp, #8]
   21d70:	bl	12134 <free@plt>
   21d74:	mov	r3, #0
   21d78:	b	21d30 <__assert_fail@plt+0xf5e4>
   21d7c:	mvn	r5, #0
   21d80:	b	21d34 <__assert_fail@plt+0xf5e8>
   21d84:	bl	12200 <__stack_chk_fail@plt>
   21d88:	ldrdeq	r3, [r1], -r4
   21d8c:	andeq	r0, r0, ip, asr r2
   21d90:	andeq	r2, r0, r4, ror ip
   21d94:	andeq	r2, r0, r4, lsl #24
   21d98:	andeq	r2, r0, ip, ror #23
   21d9c:	push	{r4, r5, r6, lr}
   21da0:	mov	r2, r1
   21da4:	ldr	r1, [pc, #108]	; 21e18 <__assert_fail@plt+0xf6cc>
   21da8:	mov	r5, r0
   21dac:	bl	125c0 <fcntl64@plt>
   21db0:	subs	r4, r0, #0
   21db4:	blt	21dc0 <__assert_fail@plt+0xf674>
   21db8:	mov	r0, r4
   21dbc:	pop	{r4, r5, r6, pc}
   21dc0:	mov	r0, r5
   21dc4:	bl	12218 <dup@plt>
   21dc8:	subs	r4, r0, #0
   21dcc:	blt	21db8 <__assert_fail@plt+0xf66c>
   21dd0:	mov	r1, #1
   21dd4:	bl	125c0 <fcntl64@plt>
   21dd8:	subs	r2, r0, #0
   21ddc:	blt	21df8 <__assert_fail@plt+0xf6ac>
   21de0:	orr	r2, r2, #1
   21de4:	mov	r1, #2
   21de8:	mov	r0, r4
   21dec:	bl	125c0 <fcntl64@plt>
   21df0:	cmp	r0, #0
   21df4:	bge	21db8 <__assert_fail@plt+0xf66c>
   21df8:	bl	1247c <__errno_location@plt>
   21dfc:	mov	r5, r0
   21e00:	mov	r0, r4
   21e04:	ldr	r6, [r5]
   21e08:	mvn	r4, #0
   21e0c:	bl	12704 <close@plt>
   21e10:	str	r6, [r5]
   21e14:	b	21db8 <__assert_fail@plt+0xf66c>
   21e18:	andeq	r0, r0, r6, lsl #8
   21e1c:	b	123a4 <getdtablesize@plt>
   21e20:	subs	r3, r0, #0
   21e24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21e28:	beq	21f20 <__assert_fail@plt+0xf7d4>
   21e2c:	ldrsb	r3, [r3]
   21e30:	cmp	r3, #0
   21e34:	beq	21f20 <__assert_fail@plt+0xf7d4>
   21e38:	mov	r9, r1
   21e3c:	bl	121f4 <strdup@plt>
   21e40:	subs	r8, r0, #0
   21e44:	beq	21f28 <__assert_fail@plt+0xf7dc>
   21e48:	ldrsb	r3, [r8]
   21e4c:	cmp	r3, #47	; 0x2f
   21e50:	addeq	r4, r8, #1
   21e54:	ldrsbeq	r3, [r8, #1]
   21e58:	movne	r4, r8
   21e5c:	cmp	r3, #0
   21e60:	beq	21ef0 <__assert_fail@plt+0xf7a4>
   21e64:	mov	r6, #47	; 0x2f
   21e68:	mov	r7, #0
   21e6c:	b	21e9c <__assert_fail@plt+0xf750>
   21e70:	strb	r7, [r5]
   21e74:	ldrsb	r3, [r4]
   21e78:	cmp	r3, #0
   21e7c:	bne	21ef8 <__assert_fail@plt+0xf7ac>
   21e80:	mov	r4, r5
   21e84:	strb	r6, [r4], #1
   21e88:	cmp	r4, #0
   21e8c:	beq	21ef0 <__assert_fail@plt+0xf7a4>
   21e90:	ldrsb	r3, [r5, #1]
   21e94:	cmp	r3, #0
   21e98:	beq	21ef0 <__assert_fail@plt+0xf7a4>
   21e9c:	mov	r1, #47	; 0x2f
   21ea0:	mov	r0, r4
   21ea4:	bl	12434 <strchr@plt>
   21ea8:	subs	r5, r0, #0
   21eac:	bne	21e70 <__assert_fail@plt+0xf724>
   21eb0:	ldrsb	r3, [r4]
   21eb4:	cmp	r3, #0
   21eb8:	beq	21ef0 <__assert_fail@plt+0xf7a4>
   21ebc:	mov	r1, r9
   21ec0:	mov	r0, r8
   21ec4:	bl	124b8 <mkdir@plt>
   21ec8:	subs	r4, r0, #0
   21ecc:	beq	21ef0 <__assert_fail@plt+0xf7a4>
   21ed0:	bl	1247c <__errno_location@plt>
   21ed4:	ldr	r3, [r0]
   21ed8:	cmp	r3, #17
   21edc:	beq	21ef0 <__assert_fail@plt+0xf7a4>
   21ee0:	mov	r0, r8
   21ee4:	bl	12134 <free@plt>
   21ee8:	mov	r0, r4
   21eec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21ef0:	mov	r4, #0
   21ef4:	b	21ee0 <__assert_fail@plt+0xf794>
   21ef8:	mov	r1, r9
   21efc:	mov	r0, r8
   21f00:	bl	124b8 <mkdir@plt>
   21f04:	subs	r4, r0, #0
   21f08:	beq	21e80 <__assert_fail@plt+0xf734>
   21f0c:	bl	1247c <__errno_location@plt>
   21f10:	ldr	r3, [r0]
   21f14:	cmp	r3, #17
   21f18:	beq	21e80 <__assert_fail@plt+0xf734>
   21f1c:	b	21ee0 <__assert_fail@plt+0xf794>
   21f20:	mvn	r4, #21
   21f24:	b	21ee8 <__assert_fail@plt+0xf79c>
   21f28:	mvn	r4, #11
   21f2c:	b	21ee8 <__assert_fail@plt+0xf79c>
   21f30:	subs	r3, r0, #0
   21f34:	beq	21f54 <__assert_fail@plt+0xf808>
   21f38:	push	{r4, lr}
   21f3c:	mov	r1, #47	; 0x2f
   21f40:	bl	125fc <strrchr@plt>
   21f44:	cmp	r0, #0
   21f48:	movne	r3, #0
   21f4c:	strbne	r3, [r0], #1
   21f50:	pop	{r4, pc}
   21f54:	mov	r0, r3
   21f58:	bx	lr
   21f5c:	ldr	r3, [pc, #208]	; 22034 <__assert_fail@plt+0xf8e8>
   21f60:	ldr	r1, [pc, #208]	; 22038 <__assert_fail@plt+0xf8ec>
   21f64:	push	{r4, r5, r6, lr}
   21f68:	add	r3, pc, r3
   21f6c:	ldr	r4, [pc, #200]	; 2203c <__assert_fail@plt+0xf8f0>
   21f70:	ldr	r5, [r3, r1]
   21f74:	add	r4, pc, r4
   21f78:	sub	sp, sp, #416	; 0x1a0
   21f7c:	ldr	r0, [r4]
   21f80:	ldr	r3, [r5]
   21f84:	mov	r2, #0
   21f88:	cmn	r0, #1
   21f8c:	str	r2, [sp, #8]
   21f90:	str	r3, [sp, #412]	; 0x19c
   21f94:	str	r2, [sp, #12]
   21f98:	str	r2, [sp, #16]
   21f9c:	beq	21fb8 <__assert_fail@plt+0xf86c>
   21fa0:	ldr	r2, [sp, #412]	; 0x19c
   21fa4:	ldr	r3, [r5]
   21fa8:	cmp	r2, r3
   21fac:	bne	22030 <__assert_fail@plt+0xf8e4>
   21fb0:	add	sp, sp, #416	; 0x1a0
   21fb4:	pop	{r4, r5, r6, pc}
   21fb8:	add	r6, sp, #20
   21fbc:	mov	r0, r6
   21fc0:	bl	121d0 <uname@plt>
   21fc4:	cmp	r0, #0
   21fc8:	beq	21fe4 <__assert_fail@plt+0xf898>
   21fcc:	ldr	r3, [pc, #108]	; 22040 <__assert_fail@plt+0xf8f4>
   21fd0:	mov	r2, #0
   21fd4:	add	r3, pc, r3
   21fd8:	mov	r0, r2
   21fdc:	str	r2, [r3]
   21fe0:	b	21fa0 <__assert_fail@plt+0xf854>
   21fe4:	ldr	r1, [pc, #88]	; 22044 <__assert_fail@plt+0xf8f8>
   21fe8:	add	r3, sp, #16
   21fec:	str	r3, [sp]
   21ff0:	add	r0, r6, #130	; 0x82
   21ff4:	add	r3, sp, #12
   21ff8:	add	r2, sp, #8
   21ffc:	add	r1, pc, r1
   22000:	bl	1262c <sscanf@plt>
   22004:	sub	r0, r0, #1
   22008:	cmp	r0, #2
   2200c:	bhi	21fcc <__assert_fail@plt+0xf880>
   22010:	ldr	r0, [sp, #12]
   22014:	ldr	r2, [sp, #8]
   22018:	ldr	r3, [sp, #16]
   2201c:	lsl	r0, r0, #8
   22020:	add	r0, r0, r2, lsl #16
   22024:	add	r0, r0, r3
   22028:	str	r0, [r4]
   2202c:	b	21fa0 <__assert_fail@plt+0xf854>
   22030:	bl	12200 <__stack_chk_fail@plt>
   22034:	andeq	r2, r1, r4, lsr #28
   22038:	andeq	r0, r0, ip, asr r2
   2203c:	muleq	r1, r0, r0
   22040:	andeq	r3, r1, r0, lsr r0
   22044:	andeq	r2, r0, r4, ror r9
   22048:	push	{r4, r5, r6, lr}
   2204c:	mov	r6, r1
   22050:	mov	r5, r2
   22054:	mov	r4, r0
   22058:	bl	12560 <__sched_cpualloc@plt>
   2205c:	cmp	r0, #0
   22060:	popeq	{r4, r5, r6, pc}
   22064:	cmp	r6, #0
   22068:	addne	r3, r4, #31
   2206c:	lsrne	r3, r3, #5
   22070:	lslne	r3, r3, #2
   22074:	strne	r3, [r6]
   22078:	cmp	r5, #0
   2207c:	addne	r4, r4, #31
   22080:	bicne	r4, r4, #31
   22084:	strne	r4, [r5]
   22088:	pop	{r4, r5, r6, pc}
   2208c:	b	124d0 <__sched_cpufree@plt>
   22090:	ldr	r3, [pc, #212]	; 2216c <__assert_fail@plt+0xfa20>
   22094:	ldr	r2, [pc, #212]	; 22170 <__assert_fail@plt+0xfa24>
   22098:	add	r3, pc, r3
   2209c:	push	{r4, r5, r6, r7, r8, r9, lr}
   220a0:	sub	sp, sp, #12
   220a4:	ldr	r9, [r3, r2]
   220a8:	mov	r7, sp
   220ac:	mov	r1, r7
   220b0:	ldr	r3, [r9]
   220b4:	mov	r2, #0
   220b8:	mov	r0, #2048	; 0x800
   220bc:	str	r3, [sp, #4]
   220c0:	bl	22048 <__assert_fail@plt+0xf8fc>
   220c4:	subs	r4, r0, #0
   220c8:	movne	r5, #2048	; 0x800
   220cc:	ldrne	r8, [pc, #160]	; 22174 <__assert_fail@plt+0xfa28>
   220d0:	bne	220fc <__assert_fail@plt+0xf9b0>
   220d4:	b	22160 <__assert_fail@plt+0xfa14>
   220d8:	mov	r0, r4
   220dc:	lsl	r5, r5, #1
   220e0:	bl	2208c <__assert_fail@plt+0xf940>
   220e4:	mov	r0, r5
   220e8:	mov	r2, #0
   220ec:	mov	r1, r7
   220f0:	bl	22048 <__assert_fail@plt+0xf8fc>
   220f4:	subs	r4, r0, #0
   220f8:	beq	22160 <__assert_fail@plt+0xfa14>
   220fc:	ldr	r2, [sp]
   22100:	mov	r1, #0
   22104:	mov	r0, r4
   22108:	bl	124dc <memset@plt>
   2210c:	mov	r3, r4
   22110:	ldr	r2, [sp]
   22114:	mov	r1, #0
   22118:	mov	r0, #242	; 0xf2
   2211c:	bl	12404 <syscall@plt>
   22120:	subs	r6, r0, #0
   22124:	bge	2213c <__assert_fail@plt+0xf9f0>
   22128:	bl	1247c <__errno_location@plt>
   2212c:	ldr	r3, [r0]
   22130:	cmp	r5, r8
   22134:	cmple	r3, #22
   22138:	beq	220d8 <__assert_fail@plt+0xf98c>
   2213c:	mov	r0, r4
   22140:	bl	2208c <__assert_fail@plt+0xf940>
   22144:	lsl	r0, r6, #3
   22148:	ldr	r2, [sp, #4]
   2214c:	ldr	r3, [r9]
   22150:	cmp	r2, r3
   22154:	bne	22168 <__assert_fail@plt+0xfa1c>
   22158:	add	sp, sp, #12
   2215c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   22160:	mvn	r0, #0
   22164:	b	22148 <__assert_fail@plt+0xf9fc>
   22168:	bl	12200 <__stack_chk_fail@plt>
   2216c:	strdeq	r2, [r1], -r4
   22170:	andeq	r0, r0, ip, asr r2
   22174:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   22178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2217c:	lsls	r7, r3, #3
   22180:	sub	sp, sp, #28
   22184:	mov	sl, r0
   22188:	beq	22324 <__assert_fail@plt+0xfbd8>
   2218c:	mov	r5, r3
   22190:	ldr	r3, [pc, #404]	; 2232c <__assert_fail@plt+0xfbe0>
   22194:	ldr	fp, [pc, #404]	; 22330 <__assert_fail@plt+0xfbe4>
   22198:	add	r3, pc, r3
   2219c:	str	r3, [sp, #16]
   221a0:	ldr	r3, [pc, #396]	; 22334 <__assert_fail@plt+0xfbe8>
   221a4:	mov	r9, r1
   221a8:	add	r3, pc, r3
   221ac:	mov	r1, #0
   221b0:	mov	r6, r2
   221b4:	add	fp, pc, fp
   221b8:	str	r3, [sp, #20]
   221bc:	mov	ip, r1
   221c0:	mov	r8, r0
   221c4:	b	221d4 <__assert_fail@plt+0xfa88>
   221c8:	cmp	r7, r4
   221cc:	mov	ip, r4
   221d0:	bls	222b0 <__assert_fail@plt+0xfb64>
   221d4:	cmp	r5, ip, lsr #3
   221d8:	add	r4, ip, #1
   221dc:	bls	221c8 <__assert_fail@plt+0xfa7c>
   221e0:	lsr	r2, ip, #5
   221e4:	and	r3, ip, #31
   221e8:	ldr	r2, [r6, r2, lsl #2]
   221ec:	lsr	r3, r2, r3
   221f0:	tst	r3, #1
   221f4:	beq	221c8 <__assert_fail@plt+0xfa7c>
   221f8:	cmp	r7, r4
   221fc:	bls	222c8 <__assert_fail@plt+0xfb7c>
   22200:	cmp	r5, r4, lsr #3
   22204:	bls	222c8 <__assert_fail@plt+0xfb7c>
   22208:	lsr	r2, r4, #5
   2220c:	and	r3, r4, #31
   22210:	ldr	r2, [r6, r2, lsl #2]
   22214:	lsr	r3, r2, r3
   22218:	tst	r3, #1
   2221c:	beq	222c8 <__assert_fail@plt+0xfb7c>
   22220:	sub	r0, r7, #1
   22224:	sub	r0, r0, ip
   22228:	mov	r2, #1
   2222c:	b	22250 <__assert_fail@plt+0xfb04>
   22230:	cmp	r5, r3, lsr #3
   22234:	bls	22264 <__assert_fail@plt+0xfb18>
   22238:	ldr	r3, [r6, lr, lsl #2]
   2223c:	add	lr, r2, #1
   22240:	lsr	r3, r3, r1
   22244:	tst	r3, #1
   22248:	beq	22264 <__assert_fail@plt+0xfb18>
   2224c:	mov	r2, lr
   22250:	add	r3, r2, r4
   22254:	cmp	r0, r2
   22258:	and	r1, r3, #31
   2225c:	lsr	lr, r3, #5
   22260:	bne	22230 <__assert_fail@plt+0xfae4>
   22264:	cmp	r2, #1
   22268:	beq	22300 <__assert_fail@plt+0xfbb4>
   2226c:	add	r4, ip, r2
   22270:	str	r4, [sp, #8]
   22274:	stm	sp, {fp, ip}
   22278:	mvn	r3, #0
   2227c:	mov	r2, #1
   22280:	mov	r1, r9
   22284:	mov	r0, r8
   22288:	bl	12728 <__snprintf_chk@plt>
   2228c:	cmp	r0, r9
   22290:	bcs	222f4 <__assert_fail@plt+0xfba8>
   22294:	add	r4, r4, #1
   22298:	cmp	r7, r4
   2229c:	add	r8, r8, r0
   222a0:	sub	r9, r9, r0
   222a4:	mov	r1, #1
   222a8:	mov	ip, r4
   222ac:	bhi	221d4 <__assert_fail@plt+0xfa88>
   222b0:	sub	r8, r8, r1
   222b4:	mov	r3, #0
   222b8:	mov	r0, sl
   222bc:	strb	r3, [r8]
   222c0:	add	sp, sp, #28
   222c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222c8:	ldr	r3, [sp, #16]
   222cc:	str	ip, [sp, #4]
   222d0:	str	r3, [sp]
   222d4:	mov	r2, #1
   222d8:	mvn	r3, #0
   222dc:	mov	r1, r9
   222e0:	mov	r0, r8
   222e4:	mov	r4, ip
   222e8:	bl	12728 <__snprintf_chk@plt>
   222ec:	cmp	r0, r9
   222f0:	bcc	22294 <__assert_fail@plt+0xfb48>
   222f4:	mov	r0, #0
   222f8:	add	sp, sp, #28
   222fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22300:	ldr	r3, [sp, #20]
   22304:	str	r4, [sp, #8]
   22308:	str	r3, [sp]
   2230c:	str	ip, [sp, #4]
   22310:	mvn	r3, #0
   22314:	mov	r1, r9
   22318:	mov	r0, r8
   2231c:	bl	12728 <__snprintf_chk@plt>
   22320:	b	2228c <__assert_fail@plt+0xfb40>
   22324:	mov	r8, r0
   22328:	b	222b4 <__assert_fail@plt+0xfb68>
   2232c:	andeq	r2, r0, r8, ror #15
   22330:	ldrdeq	r2, [r0], -r4
   22334:	ldrdeq	r2, [r0], -r4
   22338:	lsl	ip, r3, #3
   2233c:	subs	ip, ip, #4
   22340:	push	{r4, r5, r6, r7, r8, lr}
   22344:	mov	r7, r0
   22348:	mov	r6, r0
   2234c:	bmi	22468 <__assert_fail@plt+0xfd1c>
   22350:	cmp	r1, #0
   22354:	beq	22468 <__assert_fail@plt+0xfd1c>
   22358:	mov	r0, #0
   2235c:	b	223b4 <__assert_fail@plt+0xfc68>
   22360:	lsr	r8, r5, #5
   22364:	and	r5, r5, #31
   22368:	ldr	r8, [r2, r8, lsl #2]
   2236c:	lsr	r5, r8, r5
   22370:	tst	r5, #1
   22374:	beq	2242c <__assert_fail@plt+0xfce0>
   22378:	orr	r4, lr, #8
   2237c:	cmp	r0, #0
   22380:	moveq	r0, r6
   22384:	cmp	r4, #9
   22388:	mov	lr, r4
   2238c:	addgt	lr, r4, #87	; 0x57
   22390:	ble	2243c <__assert_fail@plt+0xfcf0>
   22394:	mov	r4, r6
   22398:	subs	ip, ip, #4
   2239c:	strb	lr, [r4], #1
   223a0:	bmi	22450 <__assert_fail@plt+0xfd04>
   223a4:	sub	lr, r4, r7
   223a8:	cmp	lr, r1
   223ac:	beq	22450 <__assert_fail@plt+0xfd04>
   223b0:	mov	r6, r4
   223b4:	cmp	r3, ip, lsr #3
   223b8:	lsrhi	r4, ip, #5
   223bc:	andhi	lr, ip, #31
   223c0:	ldrhi	r4, [r2, r4, lsl #2]
   223c4:	movls	lr, #0
   223c8:	lsrhi	lr, r4, lr
   223cc:	add	r4, ip, #1
   223d0:	andhi	lr, lr, #1
   223d4:	cmp	r3, r4, lsr #3
   223d8:	bls	223f4 <__assert_fail@plt+0xfca8>
   223dc:	lsr	r5, r4, #5
   223e0:	and	r4, r4, #31
   223e4:	ldr	r5, [r2, r5, lsl #2]
   223e8:	lsr	r4, r5, r4
   223ec:	tst	r4, #1
   223f0:	orrne	lr, lr, #2
   223f4:	add	r4, ip, #2
   223f8:	cmp	r3, r4, lsr #3
   223fc:	bls	22418 <__assert_fail@plt+0xfccc>
   22400:	lsr	r5, r4, #5
   22404:	and	r4, r4, #31
   22408:	ldr	r5, [r2, r5, lsl #2]
   2240c:	lsr	r4, r5, r4
   22410:	tst	r4, #1
   22414:	orrne	lr, lr, #4
   22418:	add	r5, ip, #3
   2241c:	clz	r4, r0
   22420:	cmp	r3, r5, lsr #3
   22424:	lsr	r4, r4, #5
   22428:	bhi	22360 <__assert_fail@plt+0xfc14>
   2242c:	cmp	lr, #0
   22430:	moveq	r4, #0
   22434:	cmp	r4, #0
   22438:	movne	r0, r6
   2243c:	mov	r4, r6
   22440:	add	lr, lr, #48	; 0x30
   22444:	subs	ip, ip, #4
   22448:	strb	lr, [r4], #1
   2244c:	bpl	223a4 <__assert_fail@plt+0xfc58>
   22450:	cmp	r0, #0
   22454:	mov	r3, #0
   22458:	strb	r3, [r4]
   2245c:	popne	{r4, r5, r6, r7, r8, pc}
   22460:	mov	r0, r6
   22464:	pop	{r4, r5, r6, r7, r8, pc}
   22468:	mov	r3, #0
   2246c:	strb	r3, [r6], #-1
   22470:	mov	r0, r6
   22474:	pop	{r4, r5, r6, r7, r8, pc}
   22478:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2247c:	mov	r7, r0
   22480:	mov	r6, r1
   22484:	mov	r9, r2
   22488:	bl	12428 <strlen@plt>
   2248c:	cmp	r0, #1
   22490:	sub	r0, r0, #1
   22494:	add	r4, r7, r0
   22498:	bls	224a8 <__assert_fail@plt+0xfd5c>
   2249c:	ldrb	r3, [r7]
   224a0:	cmp	r3, #48	; 0x30
   224a4:	beq	225b8 <__assert_fail@plt+0xfe6c>
   224a8:	mov	r2, r9
   224ac:	mov	r1, #0
   224b0:	mov	r0, r6
   224b4:	bl	124dc <memset@plt>
   224b8:	cmp	r7, r4
   224bc:	movls	r5, #0
   224c0:	movls	r8, #1
   224c4:	bls	22574 <__assert_fail@plt+0xfe28>
   224c8:	b	225b0 <__assert_fail@plt+0xfe64>
   224cc:	sxtb	r0, r3
   224d0:	cmn	r0, #1
   224d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   224d8:	tst	r3, #1
   224dc:	beq	224f8 <__assert_fail@plt+0xfdac>
   224e0:	cmp	r9, r5, lsr #3
   224e4:	lsrhi	r0, r5, #5
   224e8:	andhi	r2, r5, #31
   224ec:	ldrhi	r1, [r6, r0, lsl #2]
   224f0:	orrhi	r2, r1, r8, lsl r2
   224f4:	strhi	r2, [r6, r0, lsl #2]
   224f8:	tst	r3, #2
   224fc:	beq	2251c <__assert_fail@plt+0xfdd0>
   22500:	add	r2, r5, #1
   22504:	cmp	r9, r2, lsr #3
   22508:	lsrhi	r0, r2, #5
   2250c:	andhi	r2, r2, #31
   22510:	ldrhi	r1, [r6, r0, lsl #2]
   22514:	orrhi	r2, r1, r8, lsl r2
   22518:	strhi	r2, [r6, r0, lsl #2]
   2251c:	tst	r3, #4
   22520:	beq	22540 <__assert_fail@plt+0xfdf4>
   22524:	add	r2, r5, #2
   22528:	cmp	r9, r2, lsr #3
   2252c:	lsrhi	r0, r2, #5
   22530:	andhi	r2, r2, #31
   22534:	ldrhi	r1, [r6, r0, lsl #2]
   22538:	orrhi	r2, r1, r8, lsl r2
   2253c:	strhi	r2, [r6, r0, lsl #2]
   22540:	tst	r3, #8
   22544:	beq	22564 <__assert_fail@plt+0xfe18>
   22548:	add	r3, r5, #3
   2254c:	cmp	r9, r3, lsr #3
   22550:	lsrhi	r1, r3, #5
   22554:	andhi	r3, r3, #31
   22558:	ldrhi	r2, [r6, r1, lsl #2]
   2255c:	orrhi	r3, r2, r8, lsl r3
   22560:	strhi	r3, [r6, r1, lsl #2]
   22564:	sub	r4, r4, #1
   22568:	cmp	r7, r4
   2256c:	add	r5, r5, #4
   22570:	bhi	225b0 <__assert_fail@plt+0xfe64>
   22574:	ldrsb	sl, [r4]
   22578:	cmp	sl, #44	; 0x2c
   2257c:	ldrsbeq	sl, [r4, #-1]
   22580:	subeq	r4, r4, #1
   22584:	sub	r3, sl, #48	; 0x30
   22588:	cmp	r3, #9
   2258c:	bls	224cc <__assert_fail@plt+0xfd80>
   22590:	bl	123b0 <__ctype_tolower_loc@plt>
   22594:	ldr	r3, [r0]
   22598:	ldr	r3, [r3, sl, lsl #2]
   2259c:	sub	r2, r3, #97	; 0x61
   225a0:	cmp	r2, #5
   225a4:	bhi	225c8 <__assert_fail@plt+0xfe7c>
   225a8:	sub	r3, r3, #87	; 0x57
   225ac:	b	224d8 <__assert_fail@plt+0xfd8c>
   225b0:	mov	r0, #0
   225b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   225b8:	ldrb	r3, [r7, #1]
   225bc:	cmp	r3, #120	; 0x78
   225c0:	addeq	r7, r7, #2
   225c4:	b	224a8 <__assert_fail@plt+0xfd5c>
   225c8:	mvn	r0, #0
   225cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   225d0:	ldr	ip, [pc, #584]	; 22820 <__assert_fail@plt+0x100d4>
   225d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225d8:	add	ip, pc, ip
   225dc:	ldr	lr, [pc, #576]	; 22824 <__assert_fail@plt+0x100d8>
   225e0:	mov	r6, r1
   225e4:	sub	sp, sp, #52	; 0x34
   225e8:	ldr	r1, [ip, lr]
   225ec:	mov	sl, r0
   225f0:	mov	lr, r1
   225f4:	str	r1, [sp, #16]
   225f8:	ldr	lr, [lr]
   225fc:	mov	r1, #0
   22600:	mov	r0, r6
   22604:	str	r3, [sp, #8]
   22608:	mov	r4, r2
   2260c:	str	lr, [sp, #44]	; 0x2c
   22610:	lsl	r5, r2, #3
   22614:	bl	124dc <memset@plt>
   22618:	mov	r3, #0
   2261c:	str	r3, [sp]
   22620:	ldr	r3, [pc, #512]	; 22828 <__assert_fail@plt+0x100dc>
   22624:	cmp	sl, #0
   22628:	add	r3, pc, r3
   2262c:	str	r3, [sp, #4]
   22630:	ldr	r3, [pc, #500]	; 2282c <__assert_fail@plt+0x100e0>
   22634:	add	r3, pc, r3
   22638:	str	r3, [sp, #20]
   2263c:	beq	22750 <__assert_fail@plt+0x10004>
   22640:	mov	r1, #44	; 0x2c
   22644:	mov	r0, sl
   22648:	bl	12434 <strchr@plt>
   2264c:	subs	r9, r0, #0
   22650:	addne	r9, r9, #1
   22654:	add	r3, sp, #31
   22658:	add	r2, sp, #32
   2265c:	ldr	r1, [sp, #4]
   22660:	mov	r0, sl
   22664:	str	r3, [sp, #12]
   22668:	bl	1262c <sscanf@plt>
   2266c:	subs	r3, r0, #0
   22670:	str	r3, [sp]
   22674:	ble	227e8 <__assert_fail@plt+0x1009c>
   22678:	ldr	fp, [sp, #32]
   2267c:	mov	r7, #1
   22680:	mov	r1, #45	; 0x2d
   22684:	mov	r0, sl
   22688:	str	fp, [sp, #36]	; 0x24
   2268c:	str	r7, [sp, #40]	; 0x28
   22690:	bl	12434 <strchr@plt>
   22694:	subs	r8, r0, #0
   22698:	beq	226dc <__assert_fail@plt+0xff90>
   2269c:	mov	r0, sl
   226a0:	mov	r1, #44	; 0x2c
   226a4:	bl	12434 <strchr@plt>
   226a8:	add	r8, r8, r7
   226ac:	subs	sl, r0, #0
   226b0:	beq	22784 <__assert_fail@plt+0x10038>
   226b4:	cmp	r8, #0
   226b8:	add	sl, sl, r7
   226bc:	beq	226dc <__assert_fail@plt+0xff90>
   226c0:	clz	r7, sl
   226c4:	lsr	r7, r7, #5
   226c8:	cmp	sl, r8
   226cc:	movls	r2, r7
   226d0:	orrhi	r2, r7, #1
   226d4:	cmp	r2, #0
   226d8:	bne	2278c <__assert_fail@plt+0x10040>
   226dc:	mov	lr, fp
   226e0:	ldr	r3, [sp, #8]
   226e4:	adds	ip, r3, #0
   226e8:	movne	ip, #1
   226ec:	cmp	r5, fp
   226f0:	movhi	r2, #0
   226f4:	andls	r2, ip, #1
   226f8:	cmp	r2, #0
   226fc:	bne	22764 <__assert_fail@plt+0x10018>
   22700:	ldr	r7, [sp, #40]	; 0x28
   22704:	mov	r8, #1
   22708:	b	22720 <__assert_fail@plt+0xffd4>
   2270c:	cmp	fp, r5
   22710:	movcc	r3, #0
   22714:	andcs	r3, ip, #1
   22718:	cmp	r3, #0
   2271c:	bne	22764 <__assert_fail@plt+0x10018>
   22720:	cmp	r4, fp, lsr #3
   22724:	lsrhi	r1, fp, #5
   22728:	andhi	r3, fp, #31
   2272c:	ldrhi	r2, [r6, r1, lsl #2]
   22730:	add	fp, fp, r7
   22734:	orrhi	r3, r2, r8, lsl r3
   22738:	strhi	r3, [r6, r1, lsl #2]
   2273c:	cmp	fp, lr
   22740:	bls	2270c <__assert_fail@plt+0xffc0>
   22744:	mov	sl, r9
   22748:	cmp	sl, #0
   2274c:	bne	22640 <__assert_fail@plt+0xfef4>
   22750:	ldr	r3, [sp]
   22754:	sub	r0, r3, #2
   22758:	clz	r0, r0
   2275c:	lsr	r0, r0, #5
   22760:	b	22768 <__assert_fail@plt+0x1001c>
   22764:	mov	r0, #2
   22768:	ldr	r3, [sp, #16]
   2276c:	ldr	r2, [sp, #44]	; 0x2c
   22770:	ldr	r3, [r3]
   22774:	cmp	r2, r3
   22778:	bne	2281c <__assert_fail@plt+0x100d0>
   2277c:	add	sp, sp, #52	; 0x34
   22780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22784:	cmp	r8, #0
   22788:	beq	226dc <__assert_fail@plt+0xff90>
   2278c:	ldr	r3, [sp, #12]
   22790:	add	r2, sp, #36	; 0x24
   22794:	ldr	r1, [sp, #20]
   22798:	mov	r0, r8
   2279c:	bl	1262c <sscanf@plt>
   227a0:	subs	r3, r0, #0
   227a4:	str	r3, [sp]
   227a8:	ble	227e8 <__assert_fail@plt+0x1009c>
   227ac:	mov	r0, r8
   227b0:	mov	r1, #58	; 0x3a
   227b4:	bl	12434 <strchr@plt>
   227b8:	cmp	r0, #0
   227bc:	beq	227d8 <__assert_fail@plt+0x1008c>
   227c0:	adds	r0, r0, #1
   227c4:	beq	227d8 <__assert_fail@plt+0x1008c>
   227c8:	cmp	r0, sl
   227cc:	orrcc	r7, r7, #1
   227d0:	cmp	r7, #0
   227d4:	bne	227f0 <__assert_fail@plt+0x100a4>
   227d8:	ldr	fp, [sp, #32]
   227dc:	ldr	lr, [sp, #36]	; 0x24
   227e0:	cmp	fp, lr
   227e4:	bls	226e0 <__assert_fail@plt+0xff94>
   227e8:	mov	r0, #1
   227ec:	b	22768 <__assert_fail@plt+0x1001c>
   227f0:	ldr	r3, [sp, #12]
   227f4:	add	r2, sp, #40	; 0x28
   227f8:	ldr	r1, [sp, #20]
   227fc:	bl	1262c <sscanf@plt>
   22800:	subs	r3, r0, #0
   22804:	str	r3, [sp]
   22808:	ble	227e8 <__assert_fail@plt+0x1009c>
   2280c:	ldr	r3, [sp, #40]	; 0x28
   22810:	cmp	r3, #0
   22814:	bne	227d8 <__assert_fail@plt+0x1008c>
   22818:	b	227e8 <__assert_fail@plt+0x1009c>
   2281c:	bl	12200 <__stack_chk_fail@plt>
   22820:			; <UNDEFINED> instruction: 0x000127b4
   22824:	andeq	r0, r0, ip, asr r2
   22828:	andeq	r2, r0, r0, ror r3
   2282c:	andeq	r2, r0, r4, ror #6
   22830:	cmp	r3, #0
   22834:	cmpeq	r2, #0
   22838:	bne	22850 <__assert_fail@plt+0x10104>
   2283c:	cmp	r1, #0
   22840:	cmpeq	r0, #0
   22844:	mvnne	r1, #0
   22848:	mvnne	r0, #0
   2284c:	b	2286c <__assert_fail@plt+0x10120>
   22850:	sub	sp, sp, #8
   22854:	push	{sp, lr}
   22858:	bl	2287c <__assert_fail@plt+0x10130>
   2285c:	ldr	lr, [sp, #4]
   22860:	add	sp, sp, #8
   22864:	pop	{r2, r3}
   22868:	bx	lr
   2286c:	push	{r1, lr}
   22870:	mov	r0, #8
   22874:	bl	1208c <raise@plt>
   22878:	pop	{r1, pc}
   2287c:	cmp	r1, r3
   22880:	cmpeq	r0, r2
   22884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22888:	mov	r4, r0
   2288c:	movcc	r0, #0
   22890:	mov	r5, r1
   22894:	ldr	lr, [sp, #36]	; 0x24
   22898:	movcc	r1, r0
   2289c:	bcc	22998 <__assert_fail@plt+0x1024c>
   228a0:	cmp	r3, #0
   228a4:	clzeq	ip, r2
   228a8:	clzne	ip, r3
   228ac:	addeq	ip, ip, #32
   228b0:	cmp	r5, #0
   228b4:	clzeq	r1, r4
   228b8:	addeq	r1, r1, #32
   228bc:	clzne	r1, r5
   228c0:	sub	ip, ip, r1
   228c4:	sub	sl, ip, #32
   228c8:	lsl	r9, r3, ip
   228cc:	rsb	fp, ip, #32
   228d0:	orr	r9, r9, r2, lsl sl
   228d4:	orr	r9, r9, r2, lsr fp
   228d8:	lsl	r8, r2, ip
   228dc:	cmp	r5, r9
   228e0:	cmpeq	r4, r8
   228e4:	movcc	r0, #0
   228e8:	movcc	r1, r0
   228ec:	bcc	22908 <__assert_fail@plt+0x101bc>
   228f0:	mov	r0, #1
   228f4:	subs	r4, r4, r8
   228f8:	lsl	r1, r0, sl
   228fc:	orr	r1, r1, r0, lsr fp
   22900:	lsl	r0, r0, ip
   22904:	sbc	r5, r5, r9
   22908:	cmp	ip, #0
   2290c:	beq	22998 <__assert_fail@plt+0x1024c>
   22910:	lsr	r6, r8, #1
   22914:	orr	r6, r6, r9, lsl #31
   22918:	lsr	r7, r9, #1
   2291c:	mov	r2, ip
   22920:	b	22944 <__assert_fail@plt+0x101f8>
   22924:	subs	r3, r4, r6
   22928:	sbc	r8, r5, r7
   2292c:	adds	r3, r3, r3
   22930:	adc	r8, r8, r8
   22934:	adds	r4, r3, #1
   22938:	adc	r5, r8, #0
   2293c:	subs	r2, r2, #1
   22940:	beq	22960 <__assert_fail@plt+0x10214>
   22944:	cmp	r5, r7
   22948:	cmpeq	r4, r6
   2294c:	bcs	22924 <__assert_fail@plt+0x101d8>
   22950:	adds	r4, r4, r4
   22954:	adc	r5, r5, r5
   22958:	subs	r2, r2, #1
   2295c:	bne	22944 <__assert_fail@plt+0x101f8>
   22960:	lsr	r3, r4, ip
   22964:	orr	r3, r3, r5, lsl fp
   22968:	lsr	r2, r5, ip
   2296c:	orr	r3, r3, r5, lsr sl
   22970:	adds	r0, r0, r4
   22974:	mov	r4, r3
   22978:	lsl	r3, r2, ip
   2297c:	orr	r3, r3, r4, lsl sl
   22980:	lsl	ip, r4, ip
   22984:	orr	r3, r3, r4, lsr fp
   22988:	adc	r1, r1, r5
   2298c:	subs	r0, r0, ip
   22990:	mov	r5, r2
   22994:	sbc	r1, r1, r3
   22998:	cmp	lr, #0
   2299c:	strdne	r4, [lr]
   229a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   229a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   229a8:	mov	r7, r0
   229ac:	ldr	r6, [pc, #72]	; 229fc <__assert_fail@plt+0x102b0>
   229b0:	ldr	r5, [pc, #72]	; 22a00 <__assert_fail@plt+0x102b4>
   229b4:	add	r6, pc, r6
   229b8:	add	r5, pc, r5
   229bc:	sub	r6, r6, r5
   229c0:	mov	r8, r1
   229c4:	mov	r9, r2
   229c8:	bl	12048 <fdopen@plt-0x20>
   229cc:	asrs	r6, r6, #2
   229d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   229d4:	mov	r4, #0
   229d8:	add	r4, r4, #1
   229dc:	ldr	r3, [r5], #4
   229e0:	mov	r2, r9
   229e4:	mov	r1, r8
   229e8:	mov	r0, r7
   229ec:	blx	r3
   229f0:	cmp	r6, r4
   229f4:	bne	229d8 <__assert_fail@plt+0x1028c>
   229f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   229fc:	andeq	r2, r1, r8, lsr #5
   22a00:	andeq	r2, r1, r0, lsr #5
   22a04:	bx	lr
   22a08:	ldr	r3, [pc, #12]	; 22a1c <__assert_fail@plt+0x102d0>
   22a0c:	mov	r1, #0
   22a10:	add	r3, pc, r3
   22a14:	ldr	r2, [r3]
   22a18:	b	12494 <__cxa_atexit@plt>
   22a1c:	andeq	r2, r1, ip, ror #11

Disassembly of section .fini:

00022a20 <.fini>:
   22a20:	push	{r3, lr}
   22a24:	pop	{r3, pc}
