
raspbian-preinstalled/hardlink:     file format elf32-littlearm


Disassembly of section .init:

00010bdc <.init>:
   10bdc:	push	{r3, lr}
   10be0:	bl	114b8 <__assert_fail@plt+0x67c>
   10be4:	pop	{r3, pc}

Disassembly of section .plt:

00010be8 <calloc@plt-0x14>:
   10be8:	push	{lr}		; (str lr, [sp, #-4]!)
   10bec:	ldr	lr, [pc, #4]	; 10bf8 <calloc@plt-0x4>
   10bf0:	add	lr, pc, lr
   10bf4:	ldr	pc, [lr, #8]!
   10bf8:	andeq	r3, r1, r8, lsl #8

00010bfc <calloc@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #77824	; 0x13000
   10c04:	ldr	pc, [ip, #1032]!	; 0x408

00010c08 <strcmp@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #77824	; 0x13000
   10c10:	ldr	pc, [ip, #1024]!	; 0x400

00010c14 <posix_fadvise64@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #77824	; 0x13000
   10c1c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c20 <nftw64@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #77824	; 0x13000
   10c28:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c2c <free@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #77824	; 0x13000
   10c34:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c38 <ferror@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #77824	; 0x13000
   10c40:	ldr	pc, [ip, #992]!	; 0x3e0

00010c44 <memcpy@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #77824	; 0x13000
   10c4c:	ldr	pc, [ip, #984]!	; 0x3d8

00010c50 <PCRE2regexec@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #77824	; 0x13000
   10c58:	ldr	pc, [ip, #976]!	; 0x3d0

00010c5c <memcmp@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #77824	; 0x13000
   10c64:	ldr	pc, [ip, #968]!	; 0x3c8

00010c68 <__stack_chk_fail@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #77824	; 0x13000
   10c70:	ldr	pc, [ip, #960]!	; 0x3c0

00010c74 <unlink@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #77824	; 0x13000
   10c7c:	ldr	pc, [ip, #952]!	; 0x3b8

00010c80 <sigaction@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #77824	; 0x13000
   10c88:	ldr	pc, [ip, #944]!	; 0x3b0

00010c8c <PCRE2regerror@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #77824	; 0x13000
   10c94:	ldr	pc, [ip, #936]!	; 0x3a8

00010c98 <fwrite@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #77824	; 0x13000
   10ca0:	ldr	pc, [ip, #928]!	; 0x3a0

00010ca4 <gettimeofday@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #77824	; 0x13000
   10cac:	ldr	pc, [ip, #920]!	; 0x398

00010cb0 <fread@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #77824	; 0x13000
   10cb8:	ldr	pc, [ip, #912]!	; 0x390

00010cbc <puts@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #77824	; 0x13000
   10cc4:	ldr	pc, [ip, #904]!	; 0x388

00010cc8 <malloc@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #77824	; 0x13000
   10cd0:	ldr	pc, [ip, #896]!	; 0x380

00010cd4 <__libc_start_main@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #77824	; 0x13000
   10cdc:	ldr	pc, [ip, #888]!	; 0x378

00010ce0 <strerror@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #77824	; 0x13000
   10ce8:	ldr	pc, [ip, #880]!	; 0x370

00010cec <__vfprintf_chk@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #77824	; 0x13000
   10cf4:	ldr	pc, [ip, #872]!	; 0x368

00010cf8 <__ctype_tolower_loc@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #77824	; 0x13000
   10d00:	ldr	pc, [ip, #864]!	; 0x360

00010d04 <__gmon_start__@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #77824	; 0x13000
   10d0c:	ldr	pc, [ip, #856]!	; 0x358

00010d10 <rename@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #77824	; 0x13000
   10d18:	ldr	pc, [ip, #848]!	; 0x350

00010d1c <getopt_long@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #77824	; 0x13000
   10d24:	ldr	pc, [ip, #840]!	; 0x348

00010d28 <exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #77824	; 0x13000
   10d30:	ldr	pc, [ip, #832]!	; 0x340

00010d34 <strlen@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #77824	; 0x13000
   10d3c:	ldr	pc, [ip, #824]!	; 0x338

00010d40 <PCRE2regcomp@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #77824	; 0x13000
   10d48:	ldr	pc, [ip, #816]!	; 0x330

00010d4c <sigfillset@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #77824	; 0x13000
   10d54:	ldr	pc, [ip, #808]!	; 0x328

00010d58 <__errno_location@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #77824	; 0x13000
   10d60:	ldr	pc, [ip, #800]!	; 0x320

00010d64 <__cxa_atexit@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #77824	; 0x13000
   10d6c:	ldr	pc, [ip, #792]!	; 0x318

00010d70 <tsearch@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #77824	; 0x13000
   10d78:	ldr	pc, [ip, #784]!	; 0x310

00010d7c <__printf_chk@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #77824	; 0x13000
   10d84:	ldr	pc, [ip, #776]!	; 0x308

00010d88 <link@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #77824	; 0x13000
   10d90:	ldr	pc, [ip, #768]!	; 0x300

00010d94 <fileno@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #77824	; 0x13000
   10d9c:	ldr	pc, [ip, #760]!	; 0x2f8

00010da0 <__fprintf_chk@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #77824	; 0x13000
   10da8:	ldr	pc, [ip, #752]!	; 0x2f0

00010dac <fclose@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #77824	; 0x13000
   10db4:	ldr	pc, [ip, #744]!	; 0x2e8

00010db8 <llistxattr@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #77824	; 0x13000
   10dc0:	ldr	pc, [ip, #736]!	; 0x2e0

00010dc4 <lgetxattr@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #77824	; 0x13000
   10dcc:	ldr	pc, [ip, #728]!	; 0x2d8

00010dd0 <setlocale@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #77824	; 0x13000
   10dd8:	ldr	pc, [ip, #720]!	; 0x2d0

00010ddc <fputc@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #77824	; 0x13000
   10de4:	ldr	pc, [ip, #712]!	; 0x2c8

00010de8 <sscanf@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #77824	; 0x13000
   10df0:	ldr	pc, [ip, #704]!	; 0x2c0

00010df4 <putc@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #77824	; 0x13000
   10dfc:	ldr	pc, [ip, #696]!	; 0x2b8

00010e00 <fopen64@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #77824	; 0x13000
   10e08:	ldr	pc, [ip, #688]!	; 0x2b0

00010e0c <qsort@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #77824	; 0x13000
   10e14:	ldr	pc, [ip, #680]!	; 0x2a8

00010e18 <abort@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #77824	; 0x13000
   10e20:	ldr	pc, [ip, #672]!	; 0x2a0

00010e24 <twalk@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #77824	; 0x13000
   10e2c:	ldr	pc, [ip, #664]!	; 0x298

00010e30 <__snprintf_chk@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #77824	; 0x13000
   10e38:	ldr	pc, [ip, #656]!	; 0x290

00010e3c <__assert_fail@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #77824	; 0x13000
   10e44:	ldr	pc, [ip, #648]!	; 0x288

Disassembly of section .text:

00010e48 <.text>:
   10e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e4c:	sub	sp, sp, #164	; 0xa4
   10e50:	ldr	sl, [pc, #1376]	; 113b8 <__assert_fail@plt+0x57c>
   10e54:	ldr	r2, [pc, #1376]	; 113bc <__assert_fail@plt+0x580>
   10e58:	mov	r3, #268435456	; 0x10000000
   10e5c:	ldr	ip, [sl]
   10e60:	mov	r6, r0
   10e64:	add	r0, sp, #20
   10e68:	str	ip, [sp, #156]	; 0x9c
   10e6c:	str	r3, [sp, #148]	; 0x94
   10e70:	mov	r5, r1
   10e74:	str	r2, [sp, #16]
   10e78:	bl	10d4c <sigfillset@plt>
   10e7c:	add	r1, sp, #16
   10e80:	mov	r2, #0
   10e84:	mov	r0, #2
   10e88:	bl	10c80 <sigaction@plt>
   10e8c:	mov	r2, #0
   10e90:	add	r1, sp, #16
   10e94:	mov	r0, #10
   10e98:	bl	10c80 <sigaction@plt>
   10e9c:	ldr	r1, [pc, #1308]	; 113c0 <__assert_fail@plt+0x584>
   10ea0:	mov	r0, #1
   10ea4:	bl	10dd0 <setlocale@plt>
   10ea8:	bl	11864 <__assert_fail@plt+0xa28>
   10eac:	ldr	r4, [pc, #1296]	; 113c4 <__assert_fail@plt+0x588>
   10eb0:	ldr	r0, [pc, #1296]	; 113c8 <__assert_fail@plt+0x58c>
   10eb4:	vstr	d0, [r4, #312]	; 0x138
   10eb8:	bl	12f9c <__assert_fail@plt+0x2160>
   10ebc:	subs	r8, r0, #0
   10ec0:	bne	11270 <__assert_fail@plt+0x434>
   10ec4:	ldrb	r3, [r4, #12]
   10ec8:	ldr	r7, [pc, #1276]	; 113cc <__assert_fail@plt+0x590>
   10ecc:	ldr	fp, [pc, #1276]	; 113d0 <__assert_fail@plt+0x594>
   10ed0:	mov	r0, #1
   10ed4:	mov	r1, #0
   10ed8:	mov	r9, r4
   10edc:	and	r3, r3, #100	; 0x64
   10ee0:	orr	r3, r3, #11
   10ee4:	strb	r8, [sp, #15]
   10ee8:	strb	r3, [r4, #12]
   10eec:	strd	r0, [r9, #16]!
   10ef0:	mov	r3, #0
   10ef4:	str	r3, [sp]
   10ef8:	ldr	r2, [pc, #1236]	; 113d4 <__assert_fail@plt+0x598>
   10efc:	mov	r3, r7
   10f00:	mov	r1, r5
   10f04:	mov	r0, r6
   10f08:	bl	10d1c <getopt_long@plt>
   10f0c:	cmn	r0, #1
   10f10:	beq	111f0 <__assert_fail@plt+0x3b4>
   10f14:	sub	r3, r0, #63	; 0x3f
   10f18:	cmp	r3, #57	; 0x39
   10f1c:	ldrls	pc, [pc, r3, lsl #2]
   10f20:	b	111b4 <__assert_fail@plt+0x378>
   10f24:	andeq	r1, r1, r0, lsr #32
   10f28:			; <UNDEFINED> instruction: 0x000111b4
   10f2c:			; <UNDEFINED> instruction: 0x000111b4
   10f30:			; <UNDEFINED> instruction: 0x000111b4
   10f34:			; <UNDEFINED> instruction: 0x000111b4
   10f38:			; <UNDEFINED> instruction: 0x000111b4
   10f3c:			; <UNDEFINED> instruction: 0x000111b4
   10f40:			; <UNDEFINED> instruction: 0x000111b4
   10f44:			; <UNDEFINED> instruction: 0x000111b4
   10f48:			; <UNDEFINED> instruction: 0x000111b4
   10f4c:			; <UNDEFINED> instruction: 0x000111b4
   10f50:			; <UNDEFINED> instruction: 0x000111b4
   10f54:			; <UNDEFINED> instruction: 0x000111b4
   10f58:			; <UNDEFINED> instruction: 0x000111b4
   10f5c:	andeq	r1, r1, r4, lsr #3
   10f60:			; <UNDEFINED> instruction: 0x000111b4
   10f64:	muleq	r1, r4, r1
   10f68:			; <UNDEFINED> instruction: 0x000111b4
   10f6c:			; <UNDEFINED> instruction: 0x000111b4
   10f70:			; <UNDEFINED> instruction: 0x000111b4
   10f74:			; <UNDEFINED> instruction: 0x000111b4
   10f78:			; <UNDEFINED> instruction: 0x000111b4
   10f7c:			; <UNDEFINED> instruction: 0x000111b4
   10f80:	andeq	r1, r1, r4, ror #6
   10f84:			; <UNDEFINED> instruction: 0x000111b4
   10f88:	andeq	r1, r1, r4, lsl #3
   10f8c:			; <UNDEFINED> instruction: 0x000111b4
   10f90:			; <UNDEFINED> instruction: 0x000111b4
   10f94:			; <UNDEFINED> instruction: 0x000111b4
   10f98:			; <UNDEFINED> instruction: 0x000111b4
   10f9c:			; <UNDEFINED> instruction: 0x000111b4
   10fa0:			; <UNDEFINED> instruction: 0x000111b4
   10fa4:			; <UNDEFINED> instruction: 0x000111b4
   10fa8:			; <UNDEFINED> instruction: 0x000111b4
   10fac:			; <UNDEFINED> instruction: 0x000111b4
   10fb0:			; <UNDEFINED> instruction: 0x000111b4
   10fb4:	andeq	r1, r1, r4, ror r1
   10fb8:			; <UNDEFINED> instruction: 0x000111b4
   10fbc:			; <UNDEFINED> instruction: 0x000111b4
   10fc0:	andeq	r1, r1, r4, ror #2
   10fc4:			; <UNDEFINED> instruction: 0x000111b4
   10fc8:	andeq	r1, r1, r4, lsl #5
   10fcc:	andeq	r1, r1, ip, asr #2
   10fd0:			; <UNDEFINED> instruction: 0x000111b4
   10fd4:			; <UNDEFINED> instruction: 0x000111b4
   10fd8:			; <UNDEFINED> instruction: 0x000111b4
   10fdc:	andeq	r1, r1, ip, lsr r1
   10fe0:	andeq	r1, r1, ip, lsr #2
   10fe4:	andeq	r1, r1, ip, lsl r1
   10fe8:	andeq	r1, r1, ip, lsl #2
   10fec:			; <UNDEFINED> instruction: 0x000111b4
   10ff0:			; <UNDEFINED> instruction: 0x000111b4
   10ff4:	andeq	r1, r1, r0, rrx
   10ff8:	andeq	r1, r1, r0, asr r0
   10ffc:			; <UNDEFINED> instruction: 0x000111b4
   11000:	andeq	r1, r1, r0, asr #32
   11004:			; <UNDEFINED> instruction: 0x000111b4
   11008:	andeq	r1, r1, ip
   1100c:	ldr	r1, [fp]
   11010:	ldr	r0, [pc, #960]	; 113d8 <__assert_fail@plt+0x59c>
   11014:	bl	118f0 <__assert_fail@plt+0xab4>
   11018:	cmp	r0, #0
   1101c:	beq	10ef0 <__assert_fail@plt+0xb4>
   11020:	mov	r8, #1
   11024:	ldr	r2, [sp, #156]	; 0x9c
   11028:	ldr	r3, [sl]
   1102c:	mov	r0, r8
   11030:	cmp	r2, r3
   11034:	bne	113b4 <__assert_fail@plt+0x578>
   11038:	add	sp, sp, #164	; 0xa4
   1103c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11040:	ldr	r3, [r4, #8]
   11044:	add	r3, r3, #1
   11048:	str	r3, [r4, #8]
   1104c:	b	10ef0 <__assert_fail@plt+0xb4>
   11050:	ldrb	r3, [r4, #12]
   11054:	bic	r3, r3, #8
   11058:	strb	r3, [r4, #12]
   1105c:	b	10ef0 <__assert_fail@plt+0xb4>
   11060:	add	r3, sp, #15
   11064:	mov	r2, r9
   11068:	ldr	r1, [pc, #876]	; 113dc <__assert_fail@plt+0x5a0>
   1106c:	ldr	r0, [fp]
   11070:	bl	10de8 <sscanf@plt>
   11074:	cmp	r0, #0
   11078:	ble	1139c <__assert_fail@plt+0x560>
   1107c:	bl	10cf8 <__ctype_tolower_loc@plt>
   11080:	ldrb	r2, [sp, #15]
   11084:	ldr	r3, [r0]
   11088:	ldr	r3, [r3, r2, lsl #2]
   1108c:	cmp	r3, #107	; 0x6b
   11090:	beq	110e4 <__assert_fail@plt+0x2a8>
   11094:	ble	111cc <__assert_fail@plt+0x390>
   11098:	cmp	r3, #109	; 0x6d
   1109c:	beq	110d0 <__assert_fail@plt+0x294>
   110a0:	cmp	r3, #116	; 0x74
   110a4:	bne	111dc <__assert_fail@plt+0x3a0>
   110a8:	ldrd	r2, [r4, #16]
   110ac:	lsl	r3, r3, #10
   110b0:	orr	r3, r3, r2, lsr #22
   110b4:	lsl	r2, r2, #10
   110b8:	strd	r2, [r4, #16]
   110bc:	ldrd	r2, [r4, #16]
   110c0:	lsl	r3, r3, #10
   110c4:	orr	r3, r3, r2, lsr #22
   110c8:	lsl	r2, r2, #10
   110cc:	strd	r2, [r4, #16]
   110d0:	ldrd	r2, [r4, #16]
   110d4:	lsl	r3, r3, #10
   110d8:	orr	r3, r3, r2, lsr #22
   110dc:	lsl	r2, r2, #10
   110e0:	strd	r2, [r4, #16]
   110e4:	ldrd	r2, [r4, #16]
   110e8:	lsl	r3, r3, #10
   110ec:	orr	r3, r3, r2, lsr #22
   110f0:	lsl	r2, r2, #10
   110f4:	strd	r2, [r4, #16]
   110f8:	ldrd	r2, [r4, #16]
   110fc:	ldr	r1, [pc, #732]	; 113e0 <__assert_fail@plt+0x5a4>
   11100:	mov	r0, #2
   11104:	bl	116b8 <__assert_fail@plt+0x87c>
   11108:	b	10ef0 <__assert_fail@plt+0xb4>
   1110c:	ldrb	r3, [r4, #12]
   11110:	bic	r3, r3, #1
   11114:	strb	r3, [r4, #12]
   11118:	b	10ef0 <__assert_fail@plt+0xb4>
   1111c:	ldrb	r3, [r4, #12]
   11120:	bic	r3, r3, #2
   11124:	strb	r3, [r4, #12]
   11128:	b	10ef0 <__assert_fail@plt+0xb4>
   1112c:	ldrb	r3, [r4, #13]
   11130:	orr	r3, r3, #1
   11134:	strb	r3, [r4, #13]
   11138:	b	10ef0 <__assert_fail@plt+0xb4>
   1113c:	ldrb	r3, [r4, #12]
   11140:	orr	r3, r3, #32
   11144:	strb	r3, [r4, #12]
   11148:	b	10ef0 <__assert_fail@plt+0xb4>
   1114c:	ldr	r1, [fp]
   11150:	ldr	r0, [pc, #620]	; 113c4 <__assert_fail@plt+0x588>
   11154:	bl	118f0 <__assert_fail@plt+0xab4>
   11158:	cmp	r0, #0
   1115c:	beq	10ef0 <__assert_fail@plt+0xb4>
   11160:	b	11020 <__assert_fail@plt+0x1e4>
   11164:	ldrb	r3, [r4, #12]
   11168:	orr	r3, r3, #4
   1116c:	strb	r3, [r4, #12]
   11170:	b	10ef0 <__assert_fail@plt+0xb4>
   11174:	ldrb	r3, [r4, #12]
   11178:	bic	r3, r3, #31
   1117c:	strb	r3, [r4, #12]
   11180:	b	10ef0 <__assert_fail@plt+0xb4>
   11184:	ldrb	r3, [r4, #12]
   11188:	orr	r3, r3, #16
   1118c:	strb	r3, [r4, #12]
   11190:	b	10ef0 <__assert_fail@plt+0xb4>
   11194:	ldrb	r3, [r4, #12]
   11198:	orr	r3, r3, #128	; 0x80
   1119c:	strb	r3, [r4, #12]
   111a0:	b	10ef0 <__assert_fail@plt+0xb4>
   111a4:	ldrb	r3, [r4, #12]
   111a8:	orr	r3, r3, #64	; 0x40
   111ac:	strb	r3, [r4, #12]
   111b0:	b	10ef0 <__assert_fail@plt+0xb4>
   111b4:	mov	r2, r0
   111b8:	ldr	r1, [pc, #548]	; 113e4 <__assert_fail@plt+0x5a8>
   111bc:	mvn	r0, #0
   111c0:	bl	116b8 <__assert_fail@plt+0x87c>
   111c4:	mov	r8, #1
   111c8:	b	11024 <__assert_fail@plt+0x1e8>
   111cc:	cmp	r3, #0
   111d0:	beq	110f8 <__assert_fail@plt+0x2bc>
   111d4:	cmp	r3, #103	; 0x67
   111d8:	beq	110bc <__assert_fail@plt+0x280>
   111dc:	ldr	r1, [pc, #516]	; 113e8 <__assert_fail@plt+0x5ac>
   111e0:	mvn	r0, #0
   111e4:	bl	116b8 <__assert_fail@plt+0x87c>
   111e8:	mov	r8, #1
   111ec:	b	11024 <__assert_fail@plt+0x1e8>
   111f0:	ldr	r7, [pc, #500]	; 113ec <__assert_fail@plt+0x5b0>
   111f4:	ldr	r3, [r7]
   111f8:	cmp	r3, r6
   111fc:	beq	11388 <__assert_fail@plt+0x54c>
   11200:	mov	r2, #1
   11204:	str	r2, [r4, #280]	; 0x118
   11208:	bge	11260 <__assert_fail@plt+0x424>
   1120c:	ldr	r9, [pc, #476]	; 113f0 <__assert_fail@plt+0x5b4>
   11210:	ldr	fp, [pc, #476]	; 113f4 <__assert_fail@plt+0x5b8>
   11214:	b	1122c <__assert_fail@plt+0x3f0>
   11218:	ldr	r3, [r7]
   1121c:	add	r3, r3, #1
   11220:	cmp	r3, r6
   11224:	str	r3, [r7]
   11228:	bge	11260 <__assert_fail@plt+0x424>
   1122c:	ldr	r0, [r5, r3, lsl #2]
   11230:	mov	r2, #20
   11234:	mov	r3, #1
   11238:	mov	r1, r9
   1123c:	bl	10c20 <nftw64@plt>
   11240:	cmn	r0, #1
   11244:	bne	11218 <__assert_fail@plt+0x3dc>
   11248:	ldr	r3, [r7]
   1124c:	mov	r1, fp
   11250:	mvn	r0, #1
   11254:	ldr	r2, [r5, r3, lsl #2]
   11258:	bl	116b8 <__assert_fail@plt+0x87c>
   1125c:	b	11218 <__assert_fail@plt+0x3dc>
   11260:	ldr	r0, [r4, #328]	; 0x148
   11264:	ldr	r1, [pc, #396]	; 113f8 <__assert_fail@plt+0x5bc>
   11268:	bl	10e24 <twalk@plt>
   1126c:	b	11024 <__assert_fail@plt+0x1e8>
   11270:	ldr	r1, [pc, #388]	; 113fc <__assert_fail@plt+0x5c0>
   11274:	mvn	r0, #3
   11278:	bl	116b8 <__assert_fail@plt+0x87c>
   1127c:	mov	r8, #1
   11280:	b	11024 <__assert_fail@plt+0x1e8>
   11284:	ldr	r2, [r5]
   11288:	ldr	r1, [pc, #368]	; 11400 <__assert_fail@plt+0x5c4>
   1128c:	mov	r0, #1
   11290:	bl	10d7c <__printf_chk@plt>
   11294:	ldr	r0, [pc, #360]	; 11404 <__assert_fail@plt+0x5c8>
   11298:	bl	10cbc <puts@plt>
   1129c:	ldr	r0, [pc, #356]	; 11408 <__assert_fail@plt+0x5cc>
   112a0:	bl	10cbc <puts@plt>
   112a4:	ldr	r0, [pc, #352]	; 1140c <__assert_fail@plt+0x5d0>
   112a8:	bl	10cbc <puts@plt>
   112ac:	ldr	r0, [pc, #348]	; 11410 <__assert_fail@plt+0x5d4>
   112b0:	bl	10cbc <puts@plt>
   112b4:	ldr	r0, [pc, #344]	; 11414 <__assert_fail@plt+0x5d8>
   112b8:	bl	10cbc <puts@plt>
   112bc:	ldr	r0, [pc, #340]	; 11418 <__assert_fail@plt+0x5dc>
   112c0:	bl	10cbc <puts@plt>
   112c4:	ldr	r0, [pc, #336]	; 1141c <__assert_fail@plt+0x5e0>
   112c8:	bl	10cbc <puts@plt>
   112cc:	ldr	r0, [pc, #332]	; 11420 <__assert_fail@plt+0x5e4>
   112d0:	bl	10cbc <puts@plt>
   112d4:	ldr	r0, [pc, #328]	; 11424 <__assert_fail@plt+0x5e8>
   112d8:	bl	10cbc <puts@plt>
   112dc:	ldr	r0, [pc, #324]	; 11428 <__assert_fail@plt+0x5ec>
   112e0:	bl	10cbc <puts@plt>
   112e4:	ldr	r0, [pc, #320]	; 1142c <__assert_fail@plt+0x5f0>
   112e8:	bl	10cbc <puts@plt>
   112ec:	ldr	r0, [pc, #316]	; 11430 <__assert_fail@plt+0x5f4>
   112f0:	bl	10cbc <puts@plt>
   112f4:	ldr	r0, [pc, #312]	; 11434 <__assert_fail@plt+0x5f8>
   112f8:	bl	10cbc <puts@plt>
   112fc:	ldr	r0, [pc, #308]	; 11438 <__assert_fail@plt+0x5fc>
   11300:	bl	10cbc <puts@plt>
   11304:	ldr	r0, [pc, #304]	; 1143c <__assert_fail@plt+0x600>
   11308:	bl	10cbc <puts@plt>
   1130c:	ldr	r0, [pc, #300]	; 11440 <__assert_fail@plt+0x604>
   11310:	bl	10cbc <puts@plt>
   11314:	ldr	r0, [pc, #296]	; 11444 <__assert_fail@plt+0x608>
   11318:	bl	10cbc <puts@plt>
   1131c:	ldr	r0, [pc, #292]	; 11448 <__assert_fail@plt+0x60c>
   11320:	bl	10cbc <puts@plt>
   11324:	ldr	r0, [pc, #288]	; 1144c <__assert_fail@plt+0x610>
   11328:	bl	10cbc <puts@plt>
   1132c:	ldr	r0, [pc, #284]	; 11450 <__assert_fail@plt+0x614>
   11330:	bl	10cbc <puts@plt>
   11334:	ldr	r0, [pc, #280]	; 11454 <__assert_fail@plt+0x618>
   11338:	bl	10cbc <puts@plt>
   1133c:	ldr	r0, [pc, #276]	; 11458 <__assert_fail@plt+0x61c>
   11340:	bl	10cbc <puts@plt>
   11344:	ldr	r0, [pc, #116]	; 113c0 <__assert_fail@plt+0x584>
   11348:	bl	10cbc <puts@plt>
   1134c:	ldr	r0, [pc, #264]	; 1145c <__assert_fail@plt+0x620>
   11350:	bl	10cbc <puts@plt>
   11354:	ldr	r0, [pc, #260]	; 11460 <__assert_fail@plt+0x624>
   11358:	bl	10cbc <puts@plt>
   1135c:	mov	r0, #0
   11360:	bl	10d28 <exit@plt>
   11364:	ldr	r0, [pc, #248]	; 11464 <__assert_fail@plt+0x628>
   11368:	bl	10cbc <puts@plt>
   1136c:	ldr	r3, [pc, #244]	; 11468 <__assert_fail@plt+0x62c>
   11370:	ldr	r2, [pc, #244]	; 1146c <__assert_fail@plt+0x630>
   11374:	ldr	r1, [pc, #244]	; 11470 <__assert_fail@plt+0x634>
   11378:	mov	r0, #1
   1137c:	bl	10d7c <__printf_chk@plt>
   11380:	mov	r0, #0
   11384:	bl	10d28 <exit@plt>
   11388:	ldr	r1, [pc, #228]	; 11474 <__assert_fail@plt+0x638>
   1138c:	mvn	r0, #2
   11390:	bl	116b8 <__assert_fail@plt+0x87c>
   11394:	mov	r8, #1
   11398:	b	11024 <__assert_fail@plt+0x1e8>
   1139c:	ldr	r2, [fp]
   113a0:	ldr	r1, [pc, #208]	; 11478 <__assert_fail@plt+0x63c>
   113a4:	mvn	r0, #0
   113a8:	bl	116b8 <__assert_fail@plt+0x87c>
   113ac:	mov	r8, #1
   113b0:	b	11024 <__assert_fail@plt+0x1e8>
   113b4:	bl	10c68 <__stack_chk_fail@plt>
   113b8:	andeq	r3, r2, r0, lsl #30
   113bc:	muleq	r1, r4, ip
   113c0:			; <UNDEFINED> instruction: 0x000133bc
   113c4:	strdeq	r4, [r2], -r8
   113c8:	andeq	r1, r1, ip, lsl ip
   113cc:	andeq	r3, r1, r8
   113d0:	strdeq	r4, [r2], -r0
   113d4:	andeq	r3, r1, r8, lsl #2
   113d8:	strdeq	r4, [r2], -ip
   113dc:	muleq	r1, r4, sl
   113e0:	ldrdeq	r3, [r1], -r8
   113e4:	strdeq	r3, [r1], -ip
   113e8:			; <UNDEFINED> instruction: 0x00013abc
   113ec:	andeq	r4, r2, r0, ror #1
   113f0:	andeq	r2, r1, ip, ror r8
   113f4:	andeq	r3, r1, r0, asr #22
   113f8:	andeq	r2, r1, r4, lsl #1
   113fc:	andeq	r3, r1, r0, asr #9
   11400:	andeq	r3, r1, r0, ror #9
   11404:	andeq	r3, r1, r8, lsl #10
   11408:	andeq	r3, r1, r4, lsl r5
   1140c:	andeq	r3, r1, r4, asr r5
   11410:	andeq	r3, r1, ip, lsl #11
   11414:	ldrdeq	r3, [r1], -r4
   11418:	andeq	r3, r1, ip, lsl r6
   1141c:	andeq	r3, r1, r4, asr r6
   11420:	andeq	r3, r1, r8, lsl #13
   11424:			; <UNDEFINED> instruction: 0x000136b8
   11428:	andeq	r3, r1, r0, lsl #14
   1142c:	andeq	r3, r1, r4, lsr r7
   11430:	andeq	r3, r1, r0, lsl #15
   11434:			; <UNDEFINED> instruction: 0x000137b0
   11438:	andeq	r3, r1, r4, ror #15
   1143c:	andeq	r3, r1, ip, lsr #16
   11440:	andeq	r3, r1, r0, ror r8
   11444:	muleq	r1, r0, r8
   11448:	andeq	r3, r1, ip, asr #17
   1144c:	andeq	r3, r1, ip, ror #17
   11450:	andeq	r3, r1, r0, lsr r9
   11454:	andeq	r3, r1, r0, ror #18
   11458:	andeq	r3, r1, r0, lsr #19
   1145c:	ldrdeq	r3, [r1], -ip
   11460:	andeq	r3, r1, r0, lsl sl
   11464:	andeq	r3, r1, r4, asr sl
   11468:	andeq	r3, r1, r8, ror #20
   1146c:	andeq	r3, r1, r4, ror sl
   11470:	andeq	r3, r1, r0, lsl #21
   11474:	andeq	r3, r1, ip, lsl fp
   11478:	muleq	r1, ip, sl
   1147c:	mov	fp, #0
   11480:	mov	lr, #0
   11484:	pop	{r1}		; (ldr r1, [sp], #4)
   11488:	mov	r2, sp
   1148c:	push	{r2}		; (str r2, [sp, #-4]!)
   11490:	push	{r0}		; (str r0, [sp, #-4]!)
   11494:	ldr	ip, [pc, #16]	; 114ac <__assert_fail@plt+0x670>
   11498:	push	{ip}		; (str ip, [sp, #-4]!)
   1149c:	ldr	r0, [pc, #12]	; 114b0 <__assert_fail@plt+0x674>
   114a0:	ldr	r3, [pc, #12]	; 114b4 <__assert_fail@plt+0x678>
   114a4:	bl	10cd4 <__libc_start_main@plt>
   114a8:	bl	10e18 <abort@plt>
   114ac:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   114b0:	andeq	r0, r1, r8, asr #28
   114b4:	andeq	r2, r1, r8, lsr pc
   114b8:	ldr	r3, [pc, #20]	; 114d4 <__assert_fail@plt+0x698>
   114bc:	ldr	r2, [pc, #20]	; 114d8 <__assert_fail@plt+0x69c>
   114c0:	add	r3, pc, r3
   114c4:	ldr	r2, [r3, r2]
   114c8:	cmp	r2, #0
   114cc:	bxeq	lr
   114d0:	b	10d04 <__gmon_start__@plt>
   114d4:	andeq	r2, r1, r8, lsr fp
   114d8:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   114dc:	ldr	r0, [pc, #24]	; 114fc <__assert_fail@plt+0x6c0>
   114e0:	ldr	r3, [pc, #24]	; 11500 <__assert_fail@plt+0x6c4>
   114e4:	cmp	r3, r0
   114e8:	bxeq	lr
   114ec:	ldr	r3, [pc, #16]	; 11504 <__assert_fail@plt+0x6c8>
   114f0:	cmp	r3, #0
   114f4:	bxeq	lr
   114f8:	bx	r3
   114fc:	ldrdeq	r4, [r2], -ip
   11500:	ldrdeq	r4, [r2], -ip
   11504:	andeq	r0, r0, r0
   11508:	ldr	r0, [pc, #36]	; 11534 <__assert_fail@plt+0x6f8>
   1150c:	ldr	r1, [pc, #36]	; 11538 <__assert_fail@plt+0x6fc>
   11510:	sub	r1, r1, r0
   11514:	asr	r1, r1, #2
   11518:	add	r1, r1, r1, lsr #31
   1151c:	asrs	r1, r1, #1
   11520:	bxeq	lr
   11524:	ldr	r3, [pc, #16]	; 1153c <__assert_fail@plt+0x700>
   11528:	cmp	r3, #0
   1152c:	bxeq	lr
   11530:	bx	r3
   11534:	ldrdeq	r4, [r2], -ip
   11538:	ldrdeq	r4, [r2], -ip
   1153c:	andeq	r0, r0, r0
   11540:	push	{r4, lr}
   11544:	ldr	r4, [pc, #24]	; 11564 <__assert_fail@plt+0x728>
   11548:	ldrb	r3, [r4]
   1154c:	cmp	r3, #0
   11550:	popne	{r4, pc}
   11554:	bl	114dc <__assert_fail@plt+0x6a0>
   11558:	mov	r3, #1
   1155c:	strb	r3, [r4]
   11560:	pop	{r4, pc}
   11564:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   11568:	b	11508 <__assert_fail@plt+0x6cc>
   1156c:	andeq	r0, r0, r0
   11570:	ldrd	r2, [r1]
   11574:	push	{r4, r5}
   11578:	ldrd	r4, [r0]
   1157c:	cmp	r5, r3
   11580:	cmpeq	r4, r2
   11584:	beq	1161c <__assert_fail@plt+0x7e0>
   11588:	ldr	r3, [pc, #184]	; 11648 <__assert_fail@plt+0x80c>
   1158c:	ldrb	r3, [r3, #12]
   11590:	tst	r3, #32
   11594:	bne	115bc <__assert_fail@plt+0x780>
   11598:	tst	r3, #64	; 0x40
   1159c:	beq	115dc <__assert_fail@plt+0x7a0>
   115a0:	ldr	ip, [r1, #20]
   115a4:	ldr	r2, [r0, #20]
   115a8:	cmp	ip, r2
   115ac:	bls	115cc <__assert_fail@plt+0x790>
   115b0:	mov	r0, #1
   115b4:	pop	{r4, r5}
   115b8:	bx	lr
   115bc:	ldr	ip, [r0, #20]
   115c0:	ldr	r2, [r1, #20]
   115c4:	cmp	ip, r2
   115c8:	bhi	115b0 <__assert_fail@plt+0x774>
   115cc:	bcs	115dc <__assert_fail@plt+0x7a0>
   115d0:	mvn	r0, #0
   115d4:	pop	{r4, r5}
   115d8:	bx	lr
   115dc:	tst	r3, #128	; 0x80
   115e0:	ldr	r2, [r0, #80]	; 0x50
   115e4:	ldr	r3, [r1, #80]	; 0x50
   115e8:	bne	11638 <__assert_fail@plt+0x7fc>
   115ec:	cmp	r2, r3
   115f0:	bgt	115b0 <__assert_fail@plt+0x774>
   115f4:	blt	115d0 <__assert_fail@plt+0x794>
   115f8:	ldrd	r4, [r1, #96]	; 0x60
   115fc:	ldrd	r2, [r0, #96]	; 0x60
   11600:	cmp	r5, r3
   11604:	cmpeq	r4, r2
   11608:	bhi	115b0 <__assert_fail@plt+0x774>
   1160c:	mvncc	r0, #0
   11610:	movcs	r0, #0
   11614:	pop	{r4, r5}
   11618:	bx	lr
   1161c:	ldrd	r4, [r0, #96]	; 0x60
   11620:	ldrd	r2, [r1, #96]	; 0x60
   11624:	cmp	r5, r3
   11628:	cmpeq	r4, r2
   1162c:	moveq	r0, #0
   11630:	bne	11588 <__assert_fail@plt+0x74c>
   11634:	b	115b4 <__assert_fail@plt+0x778>
   11638:	cmp	r2, r3
   1163c:	blt	115b0 <__assert_fail@plt+0x774>
   11640:	bgt	115d0 <__assert_fail@plt+0x794>
   11644:	b	115f8 <__assert_fail@plt+0x7bc>
   11648:	strdeq	r4, [r2], -r8
   1164c:	ldr	r1, [r1]
   11650:	ldr	r0, [r0]
   11654:	b	10c08 <strcmp@plt>
   11658:	push	{r4, r5, r6, lr}
   1165c:	subs	r4, r0, #0
   11660:	sub	sp, sp, #8
   11664:	beq	116ac <__assert_fail@plt+0x870>
   11668:	mov	r5, r1
   1166c:	mov	r6, #0
   11670:	b	11680 <__assert_fail@plt+0x844>
   11674:	ldr	r4, [r4, #24]
   11678:	cmp	r4, #0
   1167c:	beq	116ac <__assert_fail@plt+0x870>
   11680:	mov	r3, #0
   11684:	str	r6, [sp]
   11688:	mov	r2, r3
   1168c:	mov	r1, r5
   11690:	mov	r0, r4
   11694:	bl	10c50 <PCRE2regexec@plt>
   11698:	cmp	r0, #0
   1169c:	bne	11674 <__assert_fail@plt+0x838>
   116a0:	mov	r0, #1
   116a4:	add	sp, sp, #8
   116a8:	pop	{r4, r5, r6, pc}
   116ac:	mov	r0, #0
   116b0:	add	sp, sp, #8
   116b4:	pop	{r4, r5, r6, pc}
   116b8:	push	{r1, r2, r3}
   116bc:	push	{r4, r5, r6, r7, r8, lr}
   116c0:	sub	sp, sp, #12
   116c4:	ldr	r5, [pc, #232]	; 117b4 <__assert_fail@plt+0x978>
   116c8:	mov	r4, r0
   116cc:	ldr	r7, [sp, #36]	; 0x24
   116d0:	ldr	r3, [r5]
   116d4:	str	r3, [sp, #4]
   116d8:	bl	10d58 <__errno_location@plt>
   116dc:	ldr	r3, [pc, #212]	; 117b8 <__assert_fail@plt+0x97c>
   116e0:	cmp	r4, #0
   116e4:	ldr	r3, [r3, #8]
   116e8:	ldr	r8, [r0]
   116ec:	blt	11768 <__assert_fail@plt+0x92c>
   116f0:	cmp	r3, r4
   116f4:	bge	11718 <__assert_fail@plt+0x8dc>
   116f8:	ldr	r2, [sp, #4]
   116fc:	ldr	r3, [r5]
   11700:	cmp	r2, r3
   11704:	bne	117b0 <__assert_fail@plt+0x974>
   11708:	add	sp, sp, #12
   1170c:	pop	{r4, r5, r6, r7, r8, lr}
   11710:	add	sp, sp, #12
   11714:	bx	lr
   11718:	ldr	r3, [pc, #156]	; 117bc <__assert_fail@plt+0x980>
   1171c:	ldr	r6, [r3]
   11720:	add	ip, sp, #40	; 0x28
   11724:	mov	r2, r7
   11728:	mov	r3, ip
   1172c:	mov	r1, #1
   11730:	mov	r0, r6
   11734:	bic	r4, r4, #2
   11738:	str	ip, [sp]
   1173c:	bl	10cec <__vfprintf_chk@plt>
   11740:	cmn	r4, #4
   11744:	bne	117a0 <__assert_fail@plt+0x964>
   11748:	mov	r0, r8
   1174c:	bl	10ce0 <strerror@plt>
   11750:	ldr	r2, [pc, #104]	; 117c0 <__assert_fail@plt+0x984>
   11754:	mov	r1, #1
   11758:	mov	r3, r0
   1175c:	mov	r0, r6
   11760:	bl	10da0 <__fprintf_chk@plt>
   11764:	b	116f8 <__assert_fail@plt+0x8bc>
   11768:	cmp	r3, r4
   1176c:	blt	116f8 <__assert_fail@plt+0x8bc>
   11770:	ldr	r3, [pc, #76]	; 117c4 <__assert_fail@plt+0x988>
   11774:	cmn	r4, #2
   11778:	movlt	r2, #7
   1177c:	ldr	r6, [r3]
   11780:	movlt	r1, #1
   11784:	mov	r3, r6
   11788:	ldrlt	r0, [pc, #56]	; 117c8 <__assert_fail@plt+0x98c>
   1178c:	movge	r2, #9
   11790:	movge	r1, #1
   11794:	ldrge	r0, [pc, #48]	; 117cc <__assert_fail@plt+0x990>
   11798:	bl	10c98 <fwrite@plt>
   1179c:	b	11720 <__assert_fail@plt+0x8e4>
   117a0:	mov	r1, r6
   117a4:	mov	r0, #10
   117a8:	bl	10ddc <fputc@plt>
   117ac:	b	116f8 <__assert_fail@plt+0x8bc>
   117b0:	bl	10c68 <__stack_chk_fail@plt>
   117b4:	andeq	r3, r2, r0, lsl #30
   117b8:	strdeq	r4, [r2], -r8
   117bc:	andeq	r4, r2, ip, ror #1
   117c0:	andeq	r3, r1, r0, lsr r1
   117c4:	andeq	r4, r2, r8, ror #1
   117c8:	andeq	r3, r1, ip, lsl r1
   117cc:	andeq	r3, r1, r4, lsr #2
   117d0:	push	{r4, lr}
   117d4:	bl	10cc8 <malloc@plt>
   117d8:	cmp	r0, #0
   117dc:	popne	{r4, pc}
   117e0:	mvn	r0, #3
   117e4:	ldr	r1, [pc, #8]	; 117f4 <__assert_fail@plt+0x9b8>
   117e8:	bl	116b8 <__assert_fail@plt+0x87c>
   117ec:	mov	r0, #1
   117f0:	bl	10d28 <exit@plt>
   117f4:	andeq	r3, r1, r8, lsr r1
   117f8:	push	{r4, r5, r6, r7, r8, lr}
   117fc:	lsl	r6, r1, #2
   11800:	mov	r4, r0
   11804:	mov	r0, r6
   11808:	mov	r8, r1
   1180c:	bl	117d0 <__assert_fail@plt+0x994>
   11810:	cmp	r8, #0
   11814:	mov	r7, r0
   11818:	ble	11844 <__assert_fail@plt+0xa08>
   1181c:	sub	r6, r6, #4
   11820:	add	r6, r0, r6
   11824:	sub	r5, r0, #4
   11828:	str	r4, [r5, #4]!
   1182c:	mov	r0, r4
   11830:	bl	10d34 <strlen@plt>
   11834:	cmp	r5, r6
   11838:	add	r0, r0, #1
   1183c:	add	r4, r4, r0
   11840:	bne	11828 <__assert_fail@plt+0x9ec>
   11844:	mov	r0, r7
   11848:	mov	r1, r8
   1184c:	ldr	r3, [pc, #12]	; 11860 <__assert_fail@plt+0xa24>
   11850:	mov	r2, #4
   11854:	bl	10e0c <qsort@plt>
   11858:	mov	r0, r7
   1185c:	pop	{r4, r5, r6, r7, r8, pc}
   11860:	andeq	r1, r1, ip, asr #12
   11864:	push	{r4, lr}
   11868:	mov	r3, #0
   1186c:	ldr	r4, [pc, #116]	; 118e8 <__assert_fail@plt+0xaac>
   11870:	sub	sp, sp, #16
   11874:	mov	r1, r3
   11878:	ldr	r2, [r4]
   1187c:	add	r0, sp, #4
   11880:	str	r2, [sp, #12]
   11884:	str	r3, [sp, #4]
   11888:	str	r3, [sp, #8]
   1188c:	bl	10ca4 <gettimeofday@plt>
   11890:	cmp	r0, #0
   11894:	bne	118cc <__assert_fail@plt+0xa90>
   11898:	vldr	s15, [sp, #8]
   1189c:	vldr	d5, [pc, #60]	; 118e0 <__assert_fail@plt+0xaa4>
   118a0:	ldr	r2, [sp, #12]
   118a4:	ldr	r3, [r4]
   118a8:	vcvt.f64.s32	d6, s15
   118ac:	vldr	s15, [sp, #4]
   118b0:	cmp	r2, r3
   118b4:	vcvt.f64.s32	d7, s15
   118b8:	vdiv.f64	d0, d6, d5
   118bc:	vadd.f64	d0, d0, d7
   118c0:	bne	118dc <__assert_fail@plt+0xaa0>
   118c4:	add	sp, sp, #16
   118c8:	pop	{r4, pc}
   118cc:	ldr	r1, [pc, #24]	; 118ec <__assert_fail@plt+0xab0>
   118d0:	mvn	r0, #1
   118d4:	bl	116b8 <__assert_fail@plt+0x87c>
   118d8:	b	11898 <__assert_fail@plt+0xa5c>
   118dc:	bl	10c68 <__stack_chk_fail@plt>
   118e0:	andeq	r0, r0, r0
   118e4:	smlawbmi	lr, r0, r4, r8
   118e8:	andeq	r3, r2, r0, lsl #30
   118ec:	andeq	r3, r1, r0, asr r1
   118f0:	push	{r4, r5, r6, r7, r8, lr}
   118f4:	mov	r6, r0
   118f8:	mov	r0, #28
   118fc:	mov	r7, r1
   11900:	bl	10cc8 <malloc@plt>
   11904:	subs	r4, r0, #0
   11908:	beq	1199c <__assert_fail@plt+0xb60>
   1190c:	mov	r2, #0
   11910:	mov	r1, r7
   11914:	bl	10d40 <PCRE2regcomp@plt>
   11918:	subs	r5, r0, #0
   1191c:	bne	11934 <__assert_fail@plt+0xaf8>
   11920:	ldr	r3, [r6]
   11924:	mov	r0, r5
   11928:	str	r4, [r6]
   1192c:	str	r3, [r4, #24]
   11930:	pop	{r4, r5, r6, r7, r8, pc}
   11934:	mov	r3, #0
   11938:	mov	r2, r3
   1193c:	mov	r1, r4
   11940:	bl	10c8c <PCRE2regerror@plt>
   11944:	mov	r8, r0
   11948:	add	r0, r0, #1
   1194c:	bl	10cc8 <malloc@plt>
   11950:	subs	r6, r0, #0
   11954:	beq	1199c <__assert_fail@plt+0xb60>
   11958:	mov	r3, r8
   1195c:	mov	r2, r6
   11960:	mov	r1, r4
   11964:	mov	r0, r5
   11968:	bl	10c8c <PCRE2regerror@plt>
   1196c:	mov	r3, r6
   11970:	mov	r2, r7
   11974:	ldr	r1, [pc, #52]	; 119b0 <__assert_fail@plt+0xb74>
   11978:	mvn	r0, #2
   1197c:	bl	116b8 <__assert_fail@plt+0x87c>
   11980:	mov	r0, r6
   11984:	bl	10c2c <free@plt>
   11988:	mov	r5, #1
   1198c:	mov	r0, r4
   11990:	bl	10c2c <free@plt>
   11994:	mov	r0, r5
   11998:	pop	{r4, r5, r6, r7, r8, pc}
   1199c:	mvn	r0, #3
   119a0:	ldr	r1, [pc, #12]	; 119b4 <__assert_fail@plt+0xb78>
   119a4:	bl	116b8 <__assert_fail@plt+0x87c>
   119a8:	mov	r0, #1
   119ac:	bl	10d28 <exit@plt>
   119b0:	andeq	r3, r1, ip, ror #2
   119b4:	andeq	r3, r1, r8, lsr r1
   119b8:	vldr	d7, [pc, #264]	; 11ac8 <__assert_fail@plt+0xc8c>
   119bc:	push	{lr}		; (str lr, [sp, #-4]!)
   119c0:	sub	sp, sp, #20
   119c4:	vcmpe.f64	d0, d7
   119c8:	vmrs	APSR_nzcv, fpscr
   119cc:	bge	11a5c <__assert_fail@plt+0xc20>
   119d0:	vldr	d7, [pc, #248]	; 11ad0 <__assert_fail@plt+0xc94>
   119d4:	vcmpe.f64	d0, d7
   119d8:	vmrs	APSR_nzcv, fpscr
   119dc:	bge	11a24 <__assert_fail@plt+0xbe8>
   119e0:	vldr	d7, [pc, #240]	; 11ad8 <__assert_fail@plt+0xc9c>
   119e4:	vcmpe.f64	d0, d7
   119e8:	vmrs	APSR_nzcv, fpscr
   119ec:	blt	11a98 <__assert_fail@plt+0xc5c>
   119f0:	vldr	d7, [pc, #232]	; 11ae0 <__assert_fail@plt+0xca4>
   119f4:	ldr	r2, [pc, #236]	; 11ae8 <__assert_fail@plt+0xcac>
   119f8:	mov	r3, #256	; 0x100
   119fc:	str	r2, [sp]
   11a00:	vmul.f64	d0, d0, d7
   11a04:	mov	r1, r3
   11a08:	mov	r2, #1
   11a0c:	ldr	r0, [pc, #216]	; 11aec <__assert_fail@plt+0xcb0>
   11a10:	vstr	d0, [sp, #8]
   11a14:	bl	10e30 <__snprintf_chk@plt>
   11a18:	ldr	r0, [pc, #204]	; 11aec <__assert_fail@plt+0xcb0>
   11a1c:	add	sp, sp, #20
   11a20:	pop	{pc}		; (ldr pc, [sp], #4)
   11a24:	vldr	d7, [pc, #180]	; 11ae0 <__assert_fail@plt+0xca4>
   11a28:	ldr	r2, [pc, #192]	; 11af0 <__assert_fail@plt+0xcb4>
   11a2c:	mov	r3, #256	; 0x100
   11a30:	str	r2, [sp]
   11a34:	vmul.f64	d0, d0, d7
   11a38:	mov	r1, r3
   11a3c:	mov	r2, #1
   11a40:	ldr	r0, [pc, #164]	; 11aec <__assert_fail@plt+0xcb0>
   11a44:	vmul.f64	d0, d0, d7
   11a48:	vstr	d0, [sp, #8]
   11a4c:	bl	10e30 <__snprintf_chk@plt>
   11a50:	ldr	r0, [pc, #148]	; 11aec <__assert_fail@plt+0xcb0>
   11a54:	add	sp, sp, #20
   11a58:	pop	{pc}		; (ldr pc, [sp], #4)
   11a5c:	vldr	d7, [pc, #124]	; 11ae0 <__assert_fail@plt+0xca4>
   11a60:	ldr	r2, [pc, #140]	; 11af4 <__assert_fail@plt+0xcb8>
   11a64:	mov	r3, #256	; 0x100
   11a68:	str	r2, [sp]
   11a6c:	vmul.f64	d0, d0, d7
   11a70:	mov	r1, r3
   11a74:	mov	r2, #1
   11a78:	ldr	r0, [pc, #108]	; 11aec <__assert_fail@plt+0xcb0>
   11a7c:	vmul.f64	d0, d0, d7
   11a80:	vmul.f64	d0, d0, d7
   11a84:	vstr	d0, [sp, #8]
   11a88:	bl	10e30 <__snprintf_chk@plt>
   11a8c:	ldr	r0, [pc, #88]	; 11aec <__assert_fail@plt+0xcb0>
   11a90:	add	sp, sp, #20
   11a94:	pop	{pc}		; (ldr pc, [sp], #4)
   11a98:	ldr	r2, [pc, #88]	; 11af8 <__assert_fail@plt+0xcbc>
   11a9c:	mov	r3, #256	; 0x100
   11aa0:	str	r2, [sp]
   11aa4:	vstr	d0, [sp, #8]
   11aa8:	mov	r1, r3
   11aac:	mov	r2, #1
   11ab0:	ldr	r0, [pc, #52]	; 11aec <__assert_fail@plt+0xcb0>
   11ab4:	bl	10e30 <__snprintf_chk@plt>
   11ab8:	ldr	r0, [pc, #44]	; 11aec <__assert_fail@plt+0xcb0>
   11abc:	add	sp, sp, #20
   11ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ac4:	nop			; (mov r0, r0)
   11ac8:	andeq	r0, r0, r0
   11acc:	bicsmi	r0, r0, r0
   11ad0:	andeq	r0, r0, r0
   11ad4:	teqmi	r0, r0
   11ad8:	andeq	r0, r0, r0
   11adc:	addsmi	r0, r0, r0
   11ae0:	andeq	r0, r0, r0
   11ae4:	svccc	0x00500000
   11ae8:			; <UNDEFINED> instruction: 0x000131b0
   11aec:	andeq	r4, r2, r0, lsl r1
   11af0:	andeq	r3, r1, r4, lsr #3
   11af4:	muleq	r1, r8, r1
   11af8:			; <UNDEFINED> instruction: 0x000131bc
   11afc:	push	{r4, lr}
   11b00:	mov	r0, #0
   11b04:	ldr	r4, [pc, #144]	; 11b9c <__assert_fail@plt+0xd60>
   11b08:	ldr	r3, [pc, #144]	; 11ba0 <__assert_fail@plt+0xd64>
   11b0c:	ldr	r2, [pc, #144]	; 11ba4 <__assert_fail@plt+0xd68>
   11b10:	ldrb	ip, [r4, #13]
   11b14:	ldr	r1, [pc, #140]	; 11ba8 <__assert_fail@plt+0xd6c>
   11b18:	tst	ip, #1
   11b1c:	moveq	r2, r3
   11b20:	bl	116b8 <__assert_fail@plt+0x87c>
   11b24:	ldr	r2, [r4, #284]	; 0x11c
   11b28:	ldr	r1, [pc, #124]	; 11bac <__assert_fail@plt+0xd70>
   11b2c:	mov	r0, #0
   11b30:	bl	116b8 <__assert_fail@plt+0x87c>
   11b34:	ldr	r2, [r4, #288]	; 0x120
   11b38:	ldr	r1, [pc, #112]	; 11bb0 <__assert_fail@plt+0xd74>
   11b3c:	mov	r0, #0
   11b40:	bl	116b8 <__assert_fail@plt+0x87c>
   11b44:	ldr	r2, [r4, #292]	; 0x124
   11b48:	ldr	r1, [pc, #100]	; 11bb4 <__assert_fail@plt+0xd78>
   11b4c:	mov	r0, #0
   11b50:	bl	116b8 <__assert_fail@plt+0x87c>
   11b54:	ldr	r2, [r4, #296]	; 0x128
   11b58:	ldr	r1, [pc, #88]	; 11bb8 <__assert_fail@plt+0xd7c>
   11b5c:	mov	r0, #0
   11b60:	bl	116b8 <__assert_fail@plt+0x87c>
   11b64:	vldr	d0, [r4, #304]	; 0x130
   11b68:	bl	119b8 <__assert_fail@plt+0xb7c>
   11b6c:	ldr	r1, [pc, #72]	; 11bbc <__assert_fail@plt+0xd80>
   11b70:	mov	r2, r0
   11b74:	mov	r0, #0
   11b78:	bl	116b8 <__assert_fail@plt+0x87c>
   11b7c:	bl	11864 <__assert_fail@plt+0xa28>
   11b80:	vldr	d7, [r4, #312]	; 0x138
   11b84:	ldr	r1, [pc, #52]	; 11bc0 <__assert_fail@plt+0xd84>
   11b88:	mov	r0, #0
   11b8c:	pop	{r4, lr}
   11b90:	vsub.f64	d7, d0, d7
   11b94:	vmov	r2, r3, d7
   11b98:	b	116b8 <__assert_fail@plt+0x87c>
   11b9c:	strdeq	r4, [r2], -r8
   11ba0:	ldrdeq	r3, [r1], -r0
   11ba4:	andeq	r3, r1, r8, asr #3
   11ba8:	ldrdeq	r3, [r1], -r8
   11bac:	andeq	r3, r1, r8, ror #3
   11bb0:	strdeq	r3, [r1], -r8
   11bb4:	andeq	r3, r1, ip, lsl #4
   11bb8:	andeq	r3, r1, r4, lsr #4
   11bbc:	andeq	r3, r1, r8, lsr r2
   11bc0:	andeq	r3, r1, r8, asr #4
   11bc4:	push	{r4, r5, r6, lr}
   11bc8:	ldr	r5, [pc, #68]	; 11c14 <__assert_fail@plt+0xdd8>
   11bcc:	ldr	r4, [r5, #320]	; 0x140
   11bd0:	cmp	r4, #10
   11bd4:	beq	11bfc <__assert_fail@plt+0xdc0>
   11bd8:	cmp	r4, #15
   11bdc:	beq	11bf4 <__assert_fail@plt+0xdb8>
   11be0:	cmp	r4, #2
   11be4:	beq	11bf4 <__assert_fail@plt+0xdb8>
   11be8:	mov	r0, #0
   11bec:	str	r0, [r5, #320]	; 0x140
   11bf0:	pop	{r4, r5, r6, pc}
   11bf4:	mov	r0, #1
   11bf8:	pop	{r4, r5, r6, pc}
   11bfc:	bl	11afc <__assert_fail@plt+0xcc0>
   11c00:	ldr	r3, [pc, #16]	; 11c18 <__assert_fail@plt+0xddc>
   11c04:	mov	r0, r4
   11c08:	ldr	r1, [r3]
   11c0c:	bl	10df4 <putc@plt>
   11c10:	b	11be8 <__assert_fail@plt+0xdac>
   11c14:	strdeq	r4, [r2], -r8
   11c18:	andeq	r4, r2, ip, ror #1
   11c1c:	ldr	r3, [pc, #12]	; 11c30 <__assert_fail@plt+0xdf4>
   11c20:	ldr	r3, [r3, #280]	; 0x118
   11c24:	cmp	r3, #0
   11c28:	bxeq	lr
   11c2c:	b	11afc <__assert_fail@plt+0xcc0>
   11c30:	strdeq	r4, [r2], -r8
   11c34:	ldrd	r2, [r1]
   11c38:	push	{r4, r5}
   11c3c:	ldrd	r4, [r0]
   11c40:	cmp	r5, r3
   11c44:	cmpeq	r4, r2
   11c48:	bhi	11c70 <__assert_fail@plt+0xe34>
   11c4c:	mvncc	r0, #0
   11c50:	bcs	11c5c <__assert_fail@plt+0xe20>
   11c54:	pop	{r4, r5}
   11c58:	bx	lr
   11c5c:	ldrd	r4, [r0, #48]	; 0x30
   11c60:	ldrd	r2, [r1, #48]	; 0x30
   11c64:	cmp	r2, r4
   11c68:	sbcs	r1, r3, r5
   11c6c:	bge	11c7c <__assert_fail@plt+0xe40>
   11c70:	mov	r0, #1
   11c74:	pop	{r4, r5}
   11c78:	bx	lr
   11c7c:	cmp	r4, r2
   11c80:	sbcs	r3, r5, r3
   11c84:	mvnlt	r0, #0
   11c88:	movge	r0, #0
   11c8c:	pop	{r4, r5}
   11c90:	bx	lr
   11c94:	ldr	r3, [pc, #32]	; 11cbc <__assert_fail@plt+0xe80>
   11c98:	ldr	r2, [r3, #320]	; 0x140
   11c9c:	cmp	r2, #2
   11ca0:	strne	r0, [r3, #320]	; 0x140
   11ca4:	cmp	r0, #2
   11ca8:	bxne	lr
   11cac:	ldr	r3, [pc, #12]	; 11cc0 <__assert_fail@plt+0xe84>
   11cb0:	mov	r0, #10
   11cb4:	ldr	r1, [r3]
   11cb8:	b	10df4 <putc@plt>
   11cbc:	strdeq	r4, [r2], -r8
   11cc0:	andeq	r4, r2, ip, ror #1
   11cc4:	ldrd	r2, [r1]
   11cc8:	push	{r4, r5}
   11ccc:	ldrd	r4, [r0]
   11cd0:	cmp	r5, r3
   11cd4:	cmpeq	r4, r2
   11cd8:	bhi	11d00 <__assert_fail@plt+0xec4>
   11cdc:	bcs	11cec <__assert_fail@plt+0xeb0>
   11ce0:	mvn	r0, #0
   11ce4:	pop	{r4, r5}
   11ce8:	bx	lr
   11cec:	ldrd	r4, [r0, #96]	; 0x60
   11cf0:	ldrd	r2, [r1, #96]	; 0x60
   11cf4:	cmp	r5, r3
   11cf8:	cmpeq	r4, r2
   11cfc:	bls	11d0c <__assert_fail@plt+0xed0>
   11d00:	mov	r0, #1
   11d04:	pop	{r4, r5}
   11d08:	bx	lr
   11d0c:	bcc	11ce0 <__assert_fail@plt+0xea4>
   11d10:	ldr	r3, [pc, #60]	; 11d54 <__assert_fail@plt+0xf18>
   11d14:	ldrb	r3, [r3, #12]
   11d18:	ands	r3, r3, #4
   11d1c:	beq	11d48 <__assert_fail@plt+0xf0c>
   11d20:	ldr	r2, [r0, #108]	; 0x6c
   11d24:	ldr	r3, [r1, #108]	; 0x6c
   11d28:	add	r0, r2, #8
   11d2c:	ldr	r2, [r2, #4]
   11d30:	ldr	r1, [r3, #4]
   11d34:	add	r3, r3, #8
   11d38:	add	r1, r3, r1
   11d3c:	add	r0, r0, r2
   11d40:	pop	{r4, r5}
   11d44:	b	10c08 <strcmp@plt>
   11d48:	mov	r0, r3
   11d4c:	pop	{r4, r5}
   11d50:	bx	lr
   11d54:	strdeq	r4, [r2], -r8
   11d58:	push	{r4, r5, r6, lr}
   11d5c:	mov	r5, r0
   11d60:	bl	10db8 <llistxattr@plt>
   11d64:	subs	r4, r0, #0
   11d68:	blt	11d74 <__assert_fail@plt+0xf38>
   11d6c:	mov	r0, r4
   11d70:	pop	{r4, r5, r6, pc}
   11d74:	bl	10d58 <__errno_location@plt>
   11d78:	ldr	r3, [r0]
   11d7c:	cmp	r3, #95	; 0x5f
   11d80:	beq	11d6c <__assert_fail@plt+0xf30>
   11d84:	mvn	r0, #3
   11d88:	mov	r2, r5
   11d8c:	ldr	r1, [pc, #8]	; 11d9c <__assert_fail@plt+0xf60>
   11d90:	bl	116b8 <__assert_fail@plt+0x87c>
   11d94:	mov	r0, #1
   11d98:	bl	10d28 <exit@plt>
   11d9c:	andeq	r3, r1, r0, ror #4
   11da0:	push	{r4, r5, r6, lr}
   11da4:	mov	r5, r0
   11da8:	mov	r4, r1
   11dac:	bl	10dc4 <lgetxattr@plt>
   11db0:	cmp	r0, #0
   11db4:	popge	{r4, r5, r6, pc}
   11db8:	mvn	r0, #3
   11dbc:	mov	r3, r5
   11dc0:	mov	r2, r4
   11dc4:	ldr	r1, [pc, #8]	; 11dd4 <__assert_fail@plt+0xf98>
   11dc8:	bl	116b8 <__assert_fail@plt+0x87c>
   11dcc:	mov	r0, #1
   11dd0:	bl	10d28 <exit@plt>
   11dd4:	andeq	r3, r1, r0, lsl #5
   11dd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ddc:	sub	sp, sp, #16384	; 0x4000
   11de0:	ldr	sl, [pc, #620]	; 12054 <__assert_fail@plt+0x1218>
   11de4:	sub	sp, sp, #28
   11de8:	ldr	r2, [r0]
   11dec:	mov	r7, r1
   11df0:	add	r1, sp, #16384	; 0x4000
   11df4:	ldr	r3, [sl]
   11df8:	add	r1, r1, #20
   11dfc:	cmp	r2, #0
   11e00:	str	r3, [r1]
   11e04:	beq	12040 <__assert_fail@plt+0x1204>
   11e08:	ldr	r3, [r7]
   11e0c:	cmp	r3, #0
   11e10:	beq	1202c <__assert_fail@plt+0x11f0>
   11e14:	mov	r6, r0
   11e18:	add	r3, r3, #8
   11e1c:	add	r2, r2, #8
   11e20:	ldr	r1, [pc, #560]	; 12058 <__assert_fail@plt+0x121c>
   11e24:	mov	r0, #2
   11e28:	bl	116b8 <__assert_fail@plt+0x87c>
   11e2c:	ldr	r2, [pc, #552]	; 1205c <__assert_fail@plt+0x1220>
   11e30:	ldr	r0, [r6]
   11e34:	ldr	r1, [pc, #548]	; 12060 <__assert_fail@plt+0x1224>
   11e38:	ldr	r3, [r2, #296]	; 0x128
   11e3c:	add	r0, r0, #8
   11e40:	add	r3, r3, #1
   11e44:	str	r3, [r2, #296]	; 0x128
   11e48:	bl	10e00 <fopen64@plt>
   11e4c:	subs	r4, r0, #0
   11e50:	beq	11fe8 <__assert_fail@plt+0x11ac>
   11e54:	ldr	r0, [r7]
   11e58:	ldr	r1, [pc, #512]	; 12060 <__assert_fail@plt+0x1224>
   11e5c:	add	r0, r0, #8
   11e60:	bl	10e00 <fopen64@plt>
   11e64:	subs	r5, r0, #0
   11e68:	beq	11f94 <__assert_fail@plt+0x1158>
   11e6c:	mov	r9, #0
   11e70:	mov	r8, #0
   11e74:	mov	fp, #2
   11e78:	mov	r0, r4
   11e7c:	bl	10d94 <fileno@plt>
   11e80:	mov	r3, r9
   11e84:	mov	r2, r8
   11e88:	strd	r8, [sp]
   11e8c:	str	fp, [sp, #8]
   11e90:	bl	10c14 <posix_fadvise64@plt>
   11e94:	mov	r0, r5
   11e98:	bl	10d94 <fileno@plt>
   11e9c:	strd	r8, [sp]
   11ea0:	mov	r3, r9
   11ea4:	str	fp, [sp, #8]
   11ea8:	mov	r2, r8
   11eac:	bl	10c14 <posix_fadvise64@plt>
   11eb0:	ldr	r9, [pc, #428]	; 12064 <__assert_fail@plt+0x1228>
   11eb4:	b	11ee8 <__assert_fail@plt+0x10ac>
   11eb8:	clz	r3, r8
   11ebc:	lsr	r3, r3, #5
   11ec0:	cmp	r8, fp
   11ec4:	orrne	r3, r3, #1
   11ec8:	cmp	r3, #0
   11ecc:	bne	12010 <__assert_fail@plt+0x11d4>
   11ed0:	add	r1, sp, #8192	; 0x2000
   11ed4:	mov	r2, r8
   11ed8:	add	r1, r1, #20
   11edc:	add	r0, sp, #20
   11ee0:	bl	10c5c <memcmp@plt>
   11ee4:	mov	r8, r0
   11ee8:	bl	11bc4 <__assert_fail@plt+0xd88>
   11eec:	orrs	r3, r0, r8
   11ef0:	bne	11f80 <__assert_fail@plt+0x1144>
   11ef4:	mov	r3, r4
   11ef8:	mov	r2, #8192	; 0x2000
   11efc:	mov	r1, #1
   11f00:	add	r0, sp, #20
   11f04:	bl	10cb0 <fread@plt>
   11f08:	cmp	r0, r9
   11f0c:	mov	r8, r0
   11f10:	bhi	11f24 <__assert_fail@plt+0x10e8>
   11f14:	mov	r0, r4
   11f18:	bl	10c38 <ferror@plt>
   11f1c:	cmp	r0, #0
   11f20:	bne	11f58 <__assert_fail@plt+0x111c>
   11f24:	add	r0, sp, #8192	; 0x2000
   11f28:	add	r0, r0, #20
   11f2c:	mov	r3, r5
   11f30:	mov	r2, #8192	; 0x2000
   11f34:	mov	r1, #1
   11f38:	bl	10cb0 <fread@plt>
   11f3c:	cmp	r0, r9
   11f40:	mov	fp, r0
   11f44:	bhi	11eb8 <__assert_fail@plt+0x107c>
   11f48:	mov	r0, r5
   11f4c:	bl	10c38 <ferror@plt>
   11f50:	cmp	r0, #0
   11f54:	beq	11eb8 <__assert_fail@plt+0x107c>
   11f58:	mov	r0, r4
   11f5c:	bl	10c38 <ferror@plt>
   11f60:	cmp	r0, #0
   11f64:	bne	12004 <__assert_fail@plt+0x11c8>
   11f68:	ldr	r2, [r7]
   11f6c:	add	r2, r2, #8
   11f70:	ldr	r1, [pc, #240]	; 12068 <__assert_fail@plt+0x122c>
   11f74:	mvn	r0, #1
   11f78:	bl	116b8 <__assert_fail@plt+0x87c>
   11f7c:	mov	r8, #1
   11f80:	mov	r0, r4
   11f84:	bl	10dac <fclose@plt>
   11f88:	mov	r0, r5
   11f8c:	bl	10dac <fclose@plt>
   11f90:	b	11fb4 <__assert_fail@plt+0x1178>
   11f94:	ldr	r2, [r7]
   11f98:	ldr	r1, [pc, #204]	; 1206c <__assert_fail@plt+0x1230>
   11f9c:	add	r2, r2, #8
   11fa0:	mvn	r0, #1
   11fa4:	bl	116b8 <__assert_fail@plt+0x87c>
   11fa8:	mov	r0, r4
   11fac:	bl	10dac <fclose@plt>
   11fb0:	mov	r8, #1
   11fb4:	bl	11bc4 <__assert_fail@plt+0xd88>
   11fb8:	add	r3, sp, #16384	; 0x4000
   11fbc:	add	r3, r3, #20
   11fc0:	ldr	r2, [r3]
   11fc4:	ldr	r3, [sl]
   11fc8:	orrs	r1, r0, r8
   11fcc:	moveq	r0, #1
   11fd0:	movne	r0, #0
   11fd4:	cmp	r2, r3
   11fd8:	bne	12028 <__assert_fail@plt+0x11ec>
   11fdc:	add	sp, sp, #16384	; 0x4000
   11fe0:	add	sp, sp, #28
   11fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fe8:	ldr	r2, [r6]
   11fec:	ldr	r1, [pc, #120]	; 1206c <__assert_fail@plt+0x1230>
   11ff0:	add	r2, r2, #8
   11ff4:	mvn	r0, #1
   11ff8:	bl	116b8 <__assert_fail@plt+0x87c>
   11ffc:	mov	r8, #1
   12000:	b	11fb4 <__assert_fail@plt+0x1178>
   12004:	ldr	r2, [r6]
   12008:	add	r2, r2, #8
   1200c:	b	11f70 <__assert_fail@plt+0x1134>
   12010:	cmp	r8, fp
   12014:	movhi	r8, #1
   12018:	bhi	11f80 <__assert_fail@plt+0x1144>
   1201c:	mvncc	r8, #0
   12020:	movcs	r8, #0
   12024:	b	11f80 <__assert_fail@plt+0x1144>
   12028:	bl	10c68 <__stack_chk_fail@plt>
   1202c:	ldr	r3, [pc, #60]	; 12070 <__assert_fail@plt+0x1234>
   12030:	mov	r2, #616	; 0x268
   12034:	ldr	r1, [pc, #56]	; 12074 <__assert_fail@plt+0x1238>
   12038:	ldr	r0, [pc, #56]	; 12078 <__assert_fail@plt+0x123c>
   1203c:	bl	10e3c <__assert_fail@plt>
   12040:	ldr	r3, [pc, #40]	; 12070 <__assert_fail@plt+0x1234>
   12044:	ldr	r2, [pc, #48]	; 1207c <__assert_fail@plt+0x1240>
   12048:	ldr	r1, [pc, #36]	; 12074 <__assert_fail@plt+0x1238>
   1204c:	ldr	r0, [pc, #44]	; 12080 <__assert_fail@plt+0x1244>
   12050:	bl	10e3c <__assert_fail@plt>
   12054:	andeq	r3, r2, r0, lsl #30
   12058:	ldrdeq	r3, [r1], -r8
   1205c:	strdeq	r4, [r2], -r8
   12060:	andeq	r3, r1, ip, ror #5
   12064:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   12068:	strdeq	r3, [r1], -r0
   1206c:	andeq	r3, r1, r0, lsl #6
   12070:	andeq	r2, r1, r0, asr #31
   12074:	andeq	r3, r1, r4, lsr #5
   12078:	andeq	r3, r1, r4, asr #5
   1207c:	andeq	r0, r0, r7, ror #4
   12080:			; <UNDEFINED> instruction: 0x000132b0
   12084:	sub	r1, r1, #2
   12088:	cmp	r1, #1
   1208c:	bxhi	lr
   12090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12094:	sub	sp, sp, #52	; 0x34
   12098:	ldr	r9, [r0]
   1209c:	cmp	r9, #0
   120a0:	beq	12154 <__assert_fail@plt+0x1318>
   120a4:	ldr	r8, [pc, #1900]	; 12818 <__assert_fail@plt+0x19dc>
   120a8:	bl	11bc4 <__assert_fail@plt+0xd88>
   120ac:	cmp	r0, #0
   120b0:	bne	12638 <__assert_fail@plt+0x17fc>
   120b4:	ldr	r3, [r9, #108]	; 0x6c
   120b8:	ldr	r6, [r9, #104]	; 0x68
   120bc:	cmp	r3, #0
   120c0:	beq	1215c <__assert_fail@plt+0x1320>
   120c4:	cmp	r6, #0
   120c8:	beq	12154 <__assert_fail@plt+0x1318>
   120cc:	ldr	r7, [pc, #1864]	; 1281c <__assert_fail@plt+0x19e0>
   120d0:	ldr	r5, [pc, #1864]	; 12820 <__assert_fail@plt+0x19e4>
   120d4:	mov	sl, r9
   120d8:	mov	r9, r6
   120dc:	bl	11bc4 <__assert_fail@plt+0xd88>
   120e0:	cmp	r0, #0
   120e4:	bne	12638 <__assert_fail@plt+0x17fc>
   120e8:	ldr	r4, [r9, #104]	; 0x68
   120ec:	cmp	r4, r9
   120f0:	beq	12624 <__assert_fail@plt+0x17e8>
   120f4:	ldrd	r2, [sl, #48]	; 0x30
   120f8:	ldrd	r0, [r9, #48]	; 0x30
   120fc:	cmp	r1, r3
   12100:	cmpeq	r0, r2
   12104:	bne	12610 <__assert_fail@plt+0x17d4>
   12108:	ldr	r6, [r9, #108]	; 0x6c
   1210c:	cmp	r6, #0
   12110:	beq	1213c <__assert_fail@plt+0x1300>
   12114:	orrs	r3, r0, r1
   12118:	beq	1213c <__assert_fail@plt+0x1300>
   1211c:	ldr	fp, [sl, #108]	; 0x6c
   12120:	cmp	fp, #0
   12124:	beq	1213c <__assert_fail@plt+0x1300>
   12128:	ldrd	r0, [sl]
   1212c:	ldrd	r2, [r9]
   12130:	cmp	r1, r3
   12134:	cmpeq	r0, r2
   12138:	beq	12164 <__assert_fail@plt+0x1328>
   1213c:	cmp	r4, #0
   12140:	mov	r9, r4
   12144:	bne	120dc <__assert_fail@plt+0x12a0>
   12148:	ldr	r9, [sl, #104]	; 0x68
   1214c:	cmp	r9, #0
   12150:	bne	120a8 <__assert_fail@plt+0x126c>
   12154:	add	sp, sp, #52	; 0x34
   12158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1215c:	mov	r9, r6
   12160:	b	1214c <__assert_fail@plt+0x1310>
   12164:	ldrd	r0, [sl, #96]	; 0x60
   12168:	ldrd	r2, [r9, #96]	; 0x60
   1216c:	cmp	r1, r3
   12170:	cmpeq	r0, r2
   12174:	beq	1213c <__assert_fail@plt+0x1300>
   12178:	ldrb	r3, [r7, #12]
   1217c:	tst	r3, #1
   12180:	bne	12368 <__assert_fail@plt+0x152c>
   12184:	tst	r3, #2
   12188:	bne	12380 <__assert_fail@plt+0x1544>
   1218c:	tst	r3, #8
   12190:	bne	123a4 <__assert_fail@plt+0x1568>
   12194:	tst	r3, #4
   12198:	beq	121c8 <__assert_fail@plt+0x138c>
   1219c:	ldr	ip, [r6, #4]
   121a0:	ldr	r0, [fp, #4]
   121a4:	add	r2, fp, #8
   121a8:	add	r1, r6, #8
   121ac:	add	r1, r1, ip
   121b0:	add	r0, r2, r0
   121b4:	str	r3, [sp, #8]
   121b8:	bl	10c08 <strcmp@plt>
   121bc:	ldr	r3, [sp, #8]
   121c0:	cmp	r0, #0
   121c4:	bne	1213c <__assert_fail@plt+0x1300>
   121c8:	tst	r3, #16
   121cc:	beq	1240c <__assert_fail@plt+0x15d0>
   121d0:	add	r3, r6, #8
   121d4:	add	r2, fp, #8
   121d8:	ldr	r1, [pc, #1604]	; 12824 <__assert_fail@plt+0x19e8>
   121dc:	mov	r0, #2
   121e0:	bl	116b8 <__assert_fail@plt+0x87c>
   121e4:	ldr	r3, [r7, #292]	; 0x124
   121e8:	ldr	r0, [sl, #108]	; 0x6c
   121ec:	mov	r2, #0
   121f0:	add	r3, r3, #1
   121f4:	mov	r1, r2
   121f8:	add	r0, r0, #8
   121fc:	str	r3, [r7, #292]	; 0x124
   12200:	bl	11d58 <__assert_fail@plt+0xf1c>
   12204:	mov	r2, #0
   12208:	mov	r1, r2
   1220c:	mov	r6, r0
   12210:	ldr	r0, [r9, #108]	; 0x6c
   12214:	add	r0, r0, #8
   12218:	bl	11d58 <__assert_fail@plt+0xf1c>
   1221c:	cmp	r6, #0
   12220:	cmple	r0, #0
   12224:	movle	r4, #1
   12228:	movgt	r4, #0
   1222c:	ble	1240c <__assert_fail@plt+0x15d0>
   12230:	cmp	r6, r0
   12234:	bne	12360 <__assert_fail@plt+0x1524>
   12238:	bl	117d0 <__assert_fail@plt+0x994>
   1223c:	mov	fp, r0
   12240:	mov	r0, r6
   12244:	bl	117d0 <__assert_fail@plt+0x994>
   12248:	mov	r1, fp
   1224c:	mov	r2, r6
   12250:	str	fp, [sp, #16]
   12254:	str	r0, [sp, #8]
   12258:	ldr	r0, [sl, #108]	; 0x6c
   1225c:	add	r0, r0, #8
   12260:	bl	11d58 <__assert_fail@plt+0xf1c>
   12264:	mov	r2, r6
   12268:	ldr	r1, [sp, #8]
   1226c:	mov	fp, r0
   12270:	ldr	r0, [r9, #108]	; 0x6c
   12274:	add	r0, r0, #8
   12278:	bl	11d58 <__assert_fail@plt+0xf1c>
   1227c:	cmp	fp, #0
   12280:	movle	r3, #0
   12284:	movgt	r3, #1
   12288:	cmp	fp, r0
   1228c:	movne	r3, #0
   12290:	cmp	r3, #0
   12294:	mov	r6, r0
   12298:	beq	12640 <__assert_fail@plt+0x1804>
   1229c:	ldr	r3, [sp, #16]
   122a0:	add	fp, r3, fp
   122a4:	cmp	fp, r3
   122a8:	strhi	r4, [sp, #12]
   122ac:	ldrhi	r4, [sp, #16]
   122b0:	bls	123b8 <__assert_fail@plt+0x157c>
   122b4:	mov	r0, r4
   122b8:	bl	10d34 <strlen@plt>
   122bc:	ldr	r3, [sp, #12]
   122c0:	add	r3, r3, #1
   122c4:	str	r3, [sp, #12]
   122c8:	add	r0, r0, #1
   122cc:	add	r4, r4, r0
   122d0:	cmp	fp, r4
   122d4:	bhi	122b4 <__assert_fail@plt+0x1478>
   122d8:	ldr	r3, [sp, #8]
   122dc:	add	r6, r3, r6
   122e0:	cmp	r6, r3
   122e4:	bls	12318 <__assert_fail@plt+0x14dc>
   122e8:	ldr	r4, [sp, #8]
   122ec:	mov	fp, #0
   122f0:	mov	r0, r4
   122f4:	bl	10d34 <strlen@plt>
   122f8:	add	fp, fp, #1
   122fc:	add	r0, r0, #1
   12300:	add	r4, r4, r0
   12304:	cmp	r6, r4
   12308:	bhi	122f0 <__assert_fail@plt+0x14b4>
   1230c:	ldr	r3, [sp, #12]
   12310:	cmp	r3, fp
   12314:	beq	12654 <__assert_fail@plt+0x1818>
   12318:	mov	fp, #0
   1231c:	mov	r3, fp
   12320:	str	fp, [sp, #28]
   12324:	str	fp, [sp, #24]
   12328:	ldr	r0, [sp, #16]
   1232c:	str	r3, [sp, #12]
   12330:	bl	10c2c <free@plt>
   12334:	ldr	r0, [sp, #8]
   12338:	bl	10c2c <free@plt>
   1233c:	ldr	r0, [sp, #24]
   12340:	bl	10c2c <free@plt>
   12344:	ldr	r0, [sp, #28]
   12348:	bl	10c2c <free@plt>
   1234c:	ldr	r3, [sp, #12]
   12350:	mov	r0, r3
   12354:	bl	10c2c <free@plt>
   12358:	mov	r0, fp
   1235c:	bl	10c2c <free@plt>
   12360:	ldr	r4, [r9, #104]	; 0x68
   12364:	b	1213c <__assert_fail@plt+0x1300>
   12368:	ldr	r1, [sl, #16]
   1236c:	ldr	r2, [r9, #16]
   12370:	cmp	r1, r2
   12374:	bne	1213c <__assert_fail@plt+0x1300>
   12378:	tst	r3, #2
   1237c:	beq	1218c <__assert_fail@plt+0x1350>
   12380:	ldr	r1, [sl, #24]
   12384:	ldr	r2, [r9, #24]
   12388:	cmp	r1, r2
   1238c:	bne	1213c <__assert_fail@plt+0x1300>
   12390:	ldr	r1, [sl, #28]
   12394:	ldr	r2, [r9, #28]
   12398:	cmp	r1, r2
   1239c:	bne	1213c <__assert_fail@plt+0x1300>
   123a0:	b	1218c <__assert_fail@plt+0x1350>
   123a4:	ldr	r1, [sl, #80]	; 0x50
   123a8:	ldr	r2, [r9, #80]	; 0x50
   123ac:	cmp	r1, r2
   123b0:	bne	1213c <__assert_fail@plt+0x1300>
   123b4:	b	12194 <__assert_fail@plt+0x1358>
   123b8:	ldr	r3, [sp, #8]
   123bc:	add	r6, r3, r0
   123c0:	cmp	r3, r6
   123c4:	strcc	r4, [sp, #12]
   123c8:	bcc	122e8 <__assert_fail@plt+0x14ac>
   123cc:	mov	r1, r4
   123d0:	ldr	r0, [sp, #16]
   123d4:	bl	117f8 <__assert_fail@plt+0x9bc>
   123d8:	mov	r1, r4
   123dc:	str	r0, [sp, #24]
   123e0:	ldr	r0, [sp, #8]
   123e4:	bl	117f8 <__assert_fail@plt+0x9bc>
   123e8:	str	r0, [sp, #28]
   123ec:	ldr	r0, [sp, #16]
   123f0:	bl	10c2c <free@plt>
   123f4:	ldr	r0, [sp, #8]
   123f8:	bl	10c2c <free@plt>
   123fc:	ldr	r0, [sp, #24]
   12400:	bl	10c2c <free@plt>
   12404:	ldr	r0, [sp, #28]
   12408:	bl	10c2c <free@plt>
   1240c:	add	r1, r9, #108	; 0x6c
   12410:	add	r0, sl, #108	; 0x6c
   12414:	bl	11dd8 <__assert_fail@plt+0xf9c>
   12418:	cmp	r0, #0
   1241c:	beq	12360 <__assert_fail@plt+0x1524>
   12420:	ldr	r4, [sl, #108]	; 0x6c
   12424:	b	12490 <__assert_fail@plt+0x1654>
   12428:	ldr	r3, [sl, #20]
   1242c:	ldr	r2, [r7, #288]	; 0x120
   12430:	add	r3, r3, #1
   12434:	str	r3, [sl, #20]
   12438:	ldr	r3, [r9, #20]
   1243c:	add	r2, r2, #1
   12440:	sub	r3, r3, #1
   12444:	cmp	r3, #0
   12448:	str	r3, [r9, #20]
   1244c:	str	r2, [r7, #288]	; 0x120
   12450:	bne	1246c <__assert_fail@plt+0x1630>
   12454:	ldrd	r0, [sl, #48]	; 0x30
   12458:	bl	12ed8 <__assert_fail@plt+0x209c>
   1245c:	vldr	d7, [r7, #304]	; 0x130
   12460:	vmov	d6, r0, r1
   12464:	vadd.f64	d7, d6, d7
   12468:	vstr	d7, [r7, #304]	; 0x130
   1246c:	ldr	r3, [r9, #108]	; 0x6c
   12470:	ldr	r2, [r3]
   12474:	str	r2, [r9, #108]	; 0x6c
   12478:	ldr	r4, [sl, #108]	; 0x6c
   1247c:	cmp	r2, #0
   12480:	ldr	r2, [r4]
   12484:	str	r2, [r3]
   12488:	str	r3, [r4]
   1248c:	beq	12360 <__assert_fail@plt+0x1524>
   12490:	cmp	r4, #0
   12494:	beq	125e8 <__assert_fail@plt+0x17ac>
   12498:	ldr	r6, [r9, #108]	; 0x6c
   1249c:	cmp	r6, #0
   124a0:	beq	125d4 <__assert_fail@plt+0x1798>
   124a4:	ldrb	r3, [r7, #13]
   124a8:	ldrd	r0, [sl, #48]	; 0x30
   124ac:	add	r6, r6, #8
   124b0:	tst	r3, #1
   124b4:	ldr	r3, [pc, #876]	; 12828 <__assert_fail@plt+0x19ec>
   124b8:	moveq	fp, r8
   124bc:	movne	fp, r3
   124c0:	bl	12ed8 <__assert_fail@plt+0x209c>
   124c4:	vmov	d0, r0, r1
   124c8:	bl	119b8 <__assert_fail@plt+0xb7c>
   124cc:	add	r3, r4, #8
   124d0:	mov	r2, fp
   124d4:	str	r6, [sp]
   124d8:	mov	r1, r5
   124dc:	str	r0, [sp, #4]
   124e0:	mov	r0, #1
   124e4:	bl	116b8 <__assert_fail@plt+0x87c>
   124e8:	ldrb	r3, [r7, #13]
   124ec:	tst	r3, #1
   124f0:	bne	12428 <__assert_fail@plt+0x15ec>
   124f4:	ldr	r4, [r9, #108]	; 0x6c
   124f8:	add	r4, r4, #8
   124fc:	mov	r0, r4
   12500:	bl	10d34 <strlen@plt>
   12504:	add	r6, r0, #20
   12508:	mov	r0, r6
   1250c:	bl	10cc8 <malloc@plt>
   12510:	subs	fp, r0, #0
   12514:	beq	125fc <__assert_fail@plt+0x17c0>
   12518:	ldr	r3, [pc, #780]	; 1282c <__assert_fail@plt+0x19f0>
   1251c:	mov	r1, r6
   12520:	str	r3, [sp]
   12524:	mov	r2, #1
   12528:	mvn	r3, #0
   1252c:	str	r4, [sp, #4]
   12530:	bl	10e30 <__snprintf_chk@plt>
   12534:	ldr	r0, [sl, #108]	; 0x6c
   12538:	mov	r1, fp
   1253c:	add	r0, r0, #8
   12540:	bl	10d88 <link@plt>
   12544:	cmp	r0, #0
   12548:	bne	12570 <__assert_fail@plt+0x1734>
   1254c:	ldr	r1, [r9, #108]	; 0x6c
   12550:	mov	r0, fp
   12554:	add	r1, r1, #8
   12558:	bl	10d10 <rename@plt>
   1255c:	cmp	r0, #0
   12560:	bne	125a8 <__assert_fail@plt+0x176c>
   12564:	mov	r0, fp
   12568:	bl	10c2c <free@plt>
   1256c:	b	12428 <__assert_fail@plt+0x15ec>
   12570:	ldr	r2, [sl, #108]	; 0x6c
   12574:	mvn	r0, #1
   12578:	mov	r3, fp
   1257c:	add	r2, r2, #8
   12580:	ldr	r1, [pc, #680]	; 12830 <__assert_fail@plt+0x19f4>
   12584:	bl	116b8 <__assert_fail@plt+0x87c>
   12588:	mov	r0, fp
   1258c:	bl	10c2c <free@plt>
   12590:	bl	10d58 <__errno_location@plt>
   12594:	ldr	r4, [r9, #104]	; 0x68
   12598:	ldr	r3, [r0]
   1259c:	cmp	r3, #31
   125a0:	moveq	sl, r9
   125a4:	b	1213c <__assert_fail@plt+0x1300>
   125a8:	ldr	r2, [sl, #108]	; 0x6c
   125ac:	mov	r3, fp
   125b0:	add	r2, r2, #8
   125b4:	ldr	r1, [pc, #632]	; 12834 <__assert_fail@plt+0x19f8>
   125b8:	mvn	r0, #1
   125bc:	bl	116b8 <__assert_fail@plt+0x87c>
   125c0:	mov	r0, fp
   125c4:	bl	10c74 <unlink@plt>
   125c8:	mov	r0, fp
   125cc:	bl	10c2c <free@plt>
   125d0:	b	12590 <__assert_fail@plt+0x1754>
   125d4:	ldr	r3, [pc, #604]	; 12838 <__assert_fail@plt+0x19fc>
   125d8:	ldr	r2, [pc, #604]	; 1283c <__assert_fail@plt+0x1a00>
   125dc:	ldr	r1, [pc, #604]	; 12840 <__assert_fail@plt+0x1a04>
   125e0:	ldr	r0, [pc, #604]	; 12844 <__assert_fail@plt+0x1a08>
   125e4:	bl	10e3c <__assert_fail@plt>
   125e8:	ldr	r3, [pc, #584]	; 12838 <__assert_fail@plt+0x19fc>
   125ec:	ldr	r2, [pc, #596]	; 12848 <__assert_fail@plt+0x1a0c>
   125f0:	ldr	r1, [pc, #584]	; 12840 <__assert_fail@plt+0x1a04>
   125f4:	ldr	r0, [pc, #592]	; 1284c <__assert_fail@plt+0x1a10>
   125f8:	bl	10e3c <__assert_fail@plt>
   125fc:	mvn	r0, #3
   12600:	ldr	r1, [pc, #584]	; 12850 <__assert_fail@plt+0x1a14>
   12604:	bl	116b8 <__assert_fail@plt+0x87c>
   12608:	mov	r0, #1
   1260c:	bl	10d28 <exit@plt>
   12610:	ldr	r3, [pc, #572]	; 12854 <__assert_fail@plt+0x1a18>
   12614:	ldr	r2, [pc, #572]	; 12858 <__assert_fail@plt+0x1a1c>
   12618:	ldr	r1, [pc, #544]	; 12840 <__assert_fail@plt+0x1a04>
   1261c:	ldr	r0, [pc, #568]	; 1285c <__assert_fail@plt+0x1a20>
   12620:	bl	10e3c <__assert_fail@plt>
   12624:	ldr	r3, [pc, #552]	; 12854 <__assert_fail@plt+0x1a18>
   12628:	ldr	r2, [pc, #560]	; 12860 <__assert_fail@plt+0x1a24>
   1262c:	ldr	r1, [pc, #524]	; 12840 <__assert_fail@plt+0x1a04>
   12630:	ldr	r0, [pc, #556]	; 12864 <__assert_fail@plt+0x1a28>
   12634:	bl	10e3c <__assert_fail@plt>
   12638:	mov	r0, #1
   1263c:	bl	10d28 <exit@plt>
   12640:	ldr	r3, [pc, #544]	; 12868 <__assert_fail@plt+0x1a2c>
   12644:	ldr	r2, [pc, #544]	; 1286c <__assert_fail@plt+0x1a30>
   12648:	ldr	r1, [pc, #496]	; 12840 <__assert_fail@plt+0x1a04>
   1264c:	ldr	r0, [pc, #540]	; 12870 <__assert_fail@plt+0x1a34>
   12650:	bl	10e3c <__assert_fail@plt>
   12654:	ldr	r6, [sp, #12]
   12658:	ldr	r0, [sp, #16]
   1265c:	mov	r1, r6
   12660:	bl	117f8 <__assert_fail@plt+0x9bc>
   12664:	mov	r1, r6
   12668:	mov	fp, r9
   1266c:	mov	r4, r0
   12670:	str	r0, [sp, #24]
   12674:	ldr	r0, [sp, #8]
   12678:	bl	117f8 <__assert_fail@plt+0x9bc>
   1267c:	sub	r3, r4, #4
   12680:	str	r3, [sp, #36]	; 0x24
   12684:	str	sl, [sp, #20]
   12688:	sub	r3, r0, #4
   1268c:	str	r3, [sp, #32]
   12690:	mov	r3, #0
   12694:	str	r0, [sp, #28]
   12698:	str	r3, [sp, #40]	; 0x28
   1269c:	b	127b4 <__assert_fail@plt+0x1978>
   126a0:	ldr	r3, [sp, #36]	; 0x24
   126a4:	ldr	r6, [r3, #4]
   126a8:	ldr	r3, [sp, #32]
   126ac:	mov	r0, r6
   126b0:	ldr	r1, [r3, #4]
   126b4:	bl	10c08 <strcmp@plt>
   126b8:	subs	r4, r0, #0
   126bc:	bne	12804 <__assert_fail@plt+0x19c8>
   126c0:	ldr	r9, [sp, #20]
   126c4:	mov	r1, r6
   126c8:	mov	r3, r4
   126cc:	ldr	r0, [r9, #108]	; 0x6c
   126d0:	mov	r2, r4
   126d4:	add	r0, r0, #8
   126d8:	bl	11da0 <__assert_fail@plt+0xf64>
   126dc:	ldr	r1, [sp, #32]
   126e0:	mov	r3, r4
   126e4:	mov	r2, r4
   126e8:	ldr	r1, [r1, #4]
   126ec:	mov	sl, r0
   126f0:	ldr	r0, [fp, #108]	; 0x6c
   126f4:	add	r0, r0, #8
   126f8:	bl	11da0 <__assert_fail@plt+0xf64>
   126fc:	cmp	sl, r0
   12700:	bne	127c0 <__assert_fail@plt+0x1984>
   12704:	bl	117d0 <__assert_fail@plt+0x994>
   12708:	mov	r6, r0
   1270c:	mov	r0, sl
   12710:	bl	117d0 <__assert_fail@plt+0x994>
   12714:	ldr	ip, [sp, #36]	; 0x24
   12718:	mov	r2, r6
   1271c:	mov	r3, sl
   12720:	ldr	r1, [ip, #4]!
   12724:	str	ip, [sp, #36]	; 0x24
   12728:	mov	r4, r0
   1272c:	ldr	r0, [r9, #108]	; 0x6c
   12730:	add	r0, r0, #8
   12734:	bl	11da0 <__assert_fail@plt+0xf64>
   12738:	ldr	ip, [sp, #32]
   1273c:	mov	r3, sl
   12740:	mov	r2, r4
   12744:	ldr	r1, [ip, #4]!
   12748:	str	ip, [sp, #32]
   1274c:	mov	r9, r0
   12750:	ldr	r0, [fp, #108]	; 0x6c
   12754:	add	r0, r0, #8
   12758:	bl	11da0 <__assert_fail@plt+0xf64>
   1275c:	cmp	r9, #0
   12760:	cmpge	r9, r0
   12764:	bne	127f0 <__assert_fail@plt+0x19b4>
   12768:	mov	r2, r9
   1276c:	mov	r1, r4
   12770:	mov	r0, r6
   12774:	str	r6, [sp, #44]	; 0x2c
   12778:	bl	10c5c <memcmp@plt>
   1277c:	ldr	r3, [sp, #44]	; 0x2c
   12780:	cmp	r0, #0
   12784:	bne	127e0 <__assert_fail@plt+0x19a4>
   12788:	mov	r0, r6
   1278c:	bl	10c2c <free@plt>
   12790:	ldr	r3, [sp, #40]	; 0x28
   12794:	mov	r0, r4
   12798:	add	r3, r3, #1
   1279c:	mov	r4, r3
   127a0:	str	r3, [sp, #40]	; 0x28
   127a4:	bl	10c2c <free@plt>
   127a8:	ldr	r2, [sp, #12]
   127ac:	cmp	r2, r4
   127b0:	beq	127d4 <__assert_fail@plt+0x1998>
   127b4:	bl	11bc4 <__assert_fail@plt+0xd88>
   127b8:	subs	r9, r0, #0
   127bc:	beq	126a0 <__assert_fail@plt+0x1864>
   127c0:	mov	r9, fp
   127c4:	mov	fp, #0
   127c8:	ldr	sl, [sp, #20]
   127cc:	mov	r3, fp
   127d0:	b	12328 <__assert_fail@plt+0x14ec>
   127d4:	ldr	sl, [sp, #20]
   127d8:	mov	r9, fp
   127dc:	b	123ec <__assert_fail@plt+0x15b0>
   127e0:	mov	r9, fp
   127e4:	ldr	sl, [sp, #20]
   127e8:	mov	fp, r4
   127ec:	b	12328 <__assert_fail@plt+0x14ec>
   127f0:	ldr	r3, [pc, #112]	; 12868 <__assert_fail@plt+0x1a2c>
   127f4:	ldr	r2, [pc, #120]	; 12874 <__assert_fail@plt+0x1a38>
   127f8:	ldr	r1, [pc, #64]	; 12840 <__assert_fail@plt+0x1a04>
   127fc:	ldr	r0, [pc, #116]	; 12878 <__assert_fail@plt+0x1a3c>
   12800:	bl	10e3c <__assert_fail@plt>
   12804:	mov	r3, r9
   12808:	ldr	sl, [sp, #20]
   1280c:	mov	r9, fp
   12810:	mov	fp, r3
   12814:	b	12328 <__assert_fail@plt+0x14ec>
   12818:			; <UNDEFINED> instruction: 0x000133bc
   1281c:	strdeq	r4, [r2], -r8
   12820:	andeq	r3, r1, r0, asr #7
   12824:	andeq	r3, r1, ip, asr r3
   12828:	andeq	r3, r1, r0, lsl r3
   1282c:	ldrdeq	r3, [r1], -ip
   12830:	strdeq	r3, [r1], -r4
   12834:	andeq	r3, r1, ip, lsl #8
   12838:	strdeq	r2, [r1], -r0
   1283c:	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12840:	andeq	r3, r1, r4, lsr #5
   12844:	andeq	r3, r1, r4, asr #5
   12848:	ldrdeq	r0, [r0], -lr
   1284c:			; <UNDEFINED> instruction: 0x000132b0
   12850:	andeq	r3, r1, r8, lsr r1
   12854:	ldrdeq	r2, [r1], -r4
   12858:	muleq	r0, pc, r3	; <UNPREDICTABLE>
   1285c:	andeq	r3, r1, r4, lsr r3
   12860:	muleq	r0, lr, r3
   12864:	andeq	r3, r1, ip, lsl r3
   12868:	ldrdeq	r2, [r1], -ip
   1286c:	andeq	r0, r0, r9, lsl r2
   12870:	andeq	r3, r1, ip, ror r3
   12874:	andeq	r0, r0, sl, lsr r2
   12878:	muleq	r1, ip, r3
   1287c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12880:	mov	r5, r0
   12884:	mov	r6, r1
   12888:	mov	r8, r2
   1288c:	mov	r7, r3
   12890:	bl	11bc4 <__assert_fail@plt+0xd88>
   12894:	subs	r4, r0, #0
   12898:	bne	128c8 <__assert_fail@plt+0x1a8c>
   1289c:	sub	r3, r8, #2
   128a0:	cmp	r3, #1
   128a4:	bls	128d0 <__assert_fail@plt+0x1a94>
   128a8:	cmp	r8, #0
   128ac:	bne	128c0 <__assert_fail@plt+0x1a84>
   128b0:	ldr	r3, [r6, #16]
   128b4:	and	r3, r3, #61440	; 0xf000
   128b8:	cmp	r3, #32768	; 0x8000
   128bc:	beq	128e8 <__assert_fail@plt+0x1aac>
   128c0:	mov	r0, #0
   128c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   128c8:	mov	r0, #1
   128cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   128d0:	mov	r2, r5
   128d4:	ldr	r1, [pc, #612]	; 12b40 <__assert_fail@plt+0x1d04>
   128d8:	mvn	r0, #1
   128dc:	bl	116b8 <__assert_fail@plt+0x87c>
   128e0:	mov	r0, r4
   128e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   128e8:	ldr	r8, [pc, #596]	; 12b44 <__assert_fail@plt+0x1d08>
   128ec:	mov	r1, r5
   128f0:	ldr	r0, [r8]
   128f4:	bl	11658 <__assert_fail@plt+0x81c>
   128f8:	mov	r1, r5
   128fc:	mov	r4, r0
   12900:	ldr	r0, [r8, #4]
   12904:	bl	11658 <__assert_fail@plt+0x81c>
   12908:	ldr	r2, [r8, #4]
   1290c:	cmp	r2, #0
   12910:	beq	12a58 <__assert_fail@plt+0x1c1c>
   12914:	cmp	r0, #0
   12918:	clz	r3, r4
   1291c:	lsr	r3, r3, #5
   12920:	moveq	r3, #0
   12924:	cmp	r3, #0
   12928:	bne	128c0 <__assert_fail@plt+0x1a84>
   1292c:	ldrd	r2, [r8, #16]
   12930:	ldrd	r0, [r6, #48]	; 0x30
   12934:	ldr	ip, [r8, #284]	; 0x11c
   12938:	cmp	r1, r3
   1293c:	cmpeq	r0, r2
   12940:	add	r3, ip, #1
   12944:	str	r3, [r8, #284]	; 0x11c
   12948:	mov	r2, r5
   1294c:	bcc	12a48 <__assert_fail@plt+0x1c0c>
   12950:	ldr	r1, [pc, #496]	; 12b48 <__assert_fail@plt+0x1d0c>
   12954:	mov	r0, #3
   12958:	bl	116b8 <__assert_fail@plt+0x87c>
   1295c:	mov	r0, r5
   12960:	bl	10d34 <strlen@plt>
   12964:	mov	r1, #112	; 0x70
   12968:	mov	r9, r0
   1296c:	mov	r0, #1
   12970:	bl	10bfc <calloc@plt>
   12974:	subs	r4, r0, #0
   12978:	beq	12a34 <__assert_fail@plt+0x1bf8>
   1297c:	add	r1, r9, #9
   12980:	mov	r0, #1
   12984:	bl	10bfc <calloc@plt>
   12988:	cmp	r0, #0
   1298c:	mov	r8, r0
   12990:	str	r0, [r4, #108]	; 0x6c
   12994:	beq	12a34 <__assert_fail@plt+0x1bf8>
   12998:	mov	r2, #104	; 0x68
   1299c:	mov	r1, r6
   129a0:	mov	r0, r4
   129a4:	bl	10c44 <memcpy@plt>
   129a8:	ldr	r3, [r7]
   129ac:	mov	r0, r8
   129b0:	mov	r7, #0
   129b4:	str	r3, [r8, #4]
   129b8:	add	r2, r9, #1
   129bc:	mov	r1, r5
   129c0:	str	r7, [r0], #8
   129c4:	bl	10c44 <memcpy@plt>
   129c8:	ldr	r2, [pc, #380]	; 12b4c <__assert_fail@plt+0x1d10>
   129cc:	ldr	r1, [pc, #380]	; 12b50 <__assert_fail@plt+0x1d14>
   129d0:	mov	r0, r4
   129d4:	bl	10d70 <tsearch@plt>
   129d8:	cmp	r0, #0
   129dc:	beq	12a34 <__assert_fail@plt+0x1bf8>
   129e0:	ldr	r5, [r0]
   129e4:	cmp	r4, r5
   129e8:	beq	12a78 <__assert_fail@plt+0x1c3c>
   129ec:	ldrd	r0, [r5]
   129f0:	ldrd	r2, [r6]
   129f4:	cmp	r1, r3
   129f8:	cmpeq	r0, r2
   129fc:	bne	12b24 <__assert_fail@plt+0x1ce8>
   12a00:	ldrd	r2, [r5, #96]	; 0x60
   12a04:	ldrd	r0, [r6, #96]	; 0x60
   12a08:	cmp	r3, r1
   12a0c:	cmpeq	r2, r0
   12a10:	bne	12b10 <__assert_fail@plt+0x1cd4>
   12a14:	ldr	r3, [r4, #108]	; 0x6c
   12a18:	ldr	r2, [r5, #108]	; 0x6c
   12a1c:	mov	r0, r4
   12a20:	str	r2, [r3]
   12a24:	str	r3, [r5, #108]	; 0x6c
   12a28:	bl	10c2c <free@plt>
   12a2c:	mov	r0, r7
   12a30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a34:	ldr	r1, [pc, #280]	; 12b54 <__assert_fail@plt+0x1d18>
   12a38:	mvn	r0, #3
   12a3c:	bl	116b8 <__assert_fail@plt+0x87c>
   12a40:	mov	r0, #1
   12a44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a48:	ldr	r1, [pc, #264]	; 12b58 <__assert_fail@plt+0x1d1c>
   12a4c:	mov	r0, #2
   12a50:	bl	116b8 <__assert_fail@plt+0x87c>
   12a54:	b	128c0 <__assert_fail@plt+0x1a84>
   12a58:	ldr	r2, [r8]
   12a5c:	clz	r3, r4
   12a60:	cmp	r2, #0
   12a64:	lsr	r3, r3, #5
   12a68:	moveq	r3, #0
   12a6c:	cmp	r3, #0
   12a70:	beq	1292c <__assert_fail@plt+0x1af0>
   12a74:	b	128c0 <__assert_fail@plt+0x1a84>
   12a78:	ldr	r2, [pc, #220]	; 12b5c <__assert_fail@plt+0x1d20>
   12a7c:	ldr	r1, [pc, #220]	; 12b60 <__assert_fail@plt+0x1d24>
   12a80:	mov	r0, r4
   12a84:	bl	10d70 <tsearch@plt>
   12a88:	subs	r8, r0, #0
   12a8c:	beq	12a34 <__assert_fail@plt+0x1bf8>
   12a90:	ldr	r6, [r8]
   12a94:	cmp	r4, r6
   12a98:	beq	128c0 <__assert_fail@plt+0x1a84>
   12a9c:	mov	r1, r6
   12aa0:	mov	r0, r4
   12aa4:	bl	11570 <__assert_fail@plt+0x734>
   12aa8:	cmp	r0, #0
   12aac:	blt	12ac0 <__assert_fail@plt+0x1c84>
   12ab0:	str	r6, [r4, #104]	; 0x68
   12ab4:	mov	r0, r7
   12ab8:	str	r4, [r8]
   12abc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ac0:	cmp	r6, #0
   12ac4:	beq	128c0 <__assert_fail@plt+0x1a84>
   12ac8:	ldr	r4, [r6, #104]	; 0x68
   12acc:	cmp	r4, #0
   12ad0:	beq	12ae8 <__assert_fail@plt+0x1cac>
   12ad4:	mov	r1, r4
   12ad8:	mov	r0, r5
   12adc:	bl	11570 <__assert_fail@plt+0x734>
   12ae0:	cmp	r0, #0
   12ae4:	blt	12af8 <__assert_fail@plt+0x1cbc>
   12ae8:	str	r4, [r5, #104]	; 0x68
   12aec:	mov	r0, #0
   12af0:	str	r5, [r6, #104]	; 0x68
   12af4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12af8:	ldr	r3, [r4, #104]	; 0x68
   12afc:	mov	r6, r4
   12b00:	cmp	r3, #0
   12b04:	beq	12b38 <__assert_fail@plt+0x1cfc>
   12b08:	mov	r4, r3
   12b0c:	b	12ad4 <__assert_fail@plt+0x1c98>
   12b10:	ldr	r3, [pc, #76]	; 12b64 <__assert_fail@plt+0x1d28>
   12b14:	mov	r2, #860	; 0x35c
   12b18:	ldr	r1, [pc, #72]	; 12b68 <__assert_fail@plt+0x1d2c>
   12b1c:	ldr	r0, [pc, #72]	; 12b6c <__assert_fail@plt+0x1d30>
   12b20:	bl	10e3c <__assert_fail@plt>
   12b24:	ldr	r3, [pc, #56]	; 12b64 <__assert_fail@plt+0x1d28>
   12b28:	ldr	r2, [pc, #64]	; 12b70 <__assert_fail@plt+0x1d34>
   12b2c:	ldr	r1, [pc, #52]	; 12b68 <__assert_fail@plt+0x1d2c>
   12b30:	ldr	r0, [pc, #60]	; 12b74 <__assert_fail@plt+0x1d38>
   12b34:	bl	10e3c <__assert_fail@plt>
   12b38:	mov	r4, r3
   12b3c:	b	12ae8 <__assert_fail@plt+0x1cac>
   12b40:	strdeq	r3, [r1], -r0
   12b44:	strdeq	r4, [r2], -r8
   12b48:	andeq	r3, r1, r0, asr r4
   12b4c:	andeq	r1, r1, r4, asr #25
   12b50:	andeq	r4, r2, ip, lsr r2
   12b54:	andeq	r3, r1, r8, ror #8
   12b58:	andeq	r3, r1, r4, lsr #8
   12b5c:	andeq	r1, r1, r4, lsr ip
   12b60:	andeq	r4, r2, r0, asr #4
   12b64:	strdeq	r2, [r1], -ip
   12b68:	andeq	r3, r1, r4, lsr #5
   12b6c:	muleq	r1, ip, r4
   12b70:	andeq	r0, r0, fp, asr r3
   12b74:	andeq	r3, r1, r8, ror r4
   12b78:	eor	r1, r1, #-2147483648	; 0x80000000
   12b7c:	b	12b84 <__assert_fail@plt+0x1d48>
   12b80:	eor	r3, r3, #-2147483648	; 0x80000000
   12b84:	push	{r4, r5, lr}
   12b88:	lsl	r4, r1, #1
   12b8c:	lsl	r5, r3, #1
   12b90:	teq	r4, r5
   12b94:	teqeq	r0, r2
   12b98:	orrsne	ip, r4, r0
   12b9c:	orrsne	ip, r5, r2
   12ba0:	mvnsne	ip, r4, asr #21
   12ba4:	mvnsne	ip, r5, asr #21
   12ba8:	beq	12d94 <__assert_fail@plt+0x1f58>
   12bac:	lsr	r4, r4, #21
   12bb0:	rsbs	r5, r4, r5, lsr #21
   12bb4:	rsblt	r5, r5, #0
   12bb8:	ble	12bd8 <__assert_fail@plt+0x1d9c>
   12bbc:	add	r4, r4, r5
   12bc0:	eor	r2, r0, r2
   12bc4:	eor	r3, r1, r3
   12bc8:	eor	r0, r2, r0
   12bcc:	eor	r1, r3, r1
   12bd0:	eor	r2, r0, r2
   12bd4:	eor	r3, r1, r3
   12bd8:	cmp	r5, #54	; 0x36
   12bdc:	pophi	{r4, r5, pc}
   12be0:	tst	r1, #-2147483648	; 0x80000000
   12be4:	lsl	r1, r1, #12
   12be8:	mov	ip, #1048576	; 0x100000
   12bec:	orr	r1, ip, r1, lsr #12
   12bf0:	beq	12bfc <__assert_fail@plt+0x1dc0>
   12bf4:	rsbs	r0, r0, #0
   12bf8:	rsc	r1, r1, #0
   12bfc:	tst	r3, #-2147483648	; 0x80000000
   12c00:	lsl	r3, r3, #12
   12c04:	orr	r3, ip, r3, lsr #12
   12c08:	beq	12c14 <__assert_fail@plt+0x1dd8>
   12c0c:	rsbs	r2, r2, #0
   12c10:	rsc	r3, r3, #0
   12c14:	teq	r4, r5
   12c18:	beq	12d7c <__assert_fail@plt+0x1f40>
   12c1c:	sub	r4, r4, #1
   12c20:	rsbs	lr, r5, #32
   12c24:	blt	12c40 <__assert_fail@plt+0x1e04>
   12c28:	lsl	ip, r2, lr
   12c2c:	adds	r0, r0, r2, lsr r5
   12c30:	adc	r1, r1, #0
   12c34:	adds	r0, r0, r3, lsl lr
   12c38:	adcs	r1, r1, r3, asr r5
   12c3c:	b	12c5c <__assert_fail@plt+0x1e20>
   12c40:	sub	r5, r5, #32
   12c44:	add	lr, lr, #32
   12c48:	cmp	r2, #1
   12c4c:	lsl	ip, r3, lr
   12c50:	orrcs	ip, ip, #2
   12c54:	adds	r0, r0, r3, asr r5
   12c58:	adcs	r1, r1, r3, asr #31
   12c5c:	and	r5, r1, #-2147483648	; 0x80000000
   12c60:	bpl	12c70 <__assert_fail@plt+0x1e34>
   12c64:	rsbs	ip, ip, #0
   12c68:	rscs	r0, r0, #0
   12c6c:	rsc	r1, r1, #0
   12c70:	cmp	r1, #1048576	; 0x100000
   12c74:	bcc	12cb4 <__assert_fail@plt+0x1e78>
   12c78:	cmp	r1, #2097152	; 0x200000
   12c7c:	bcc	12c9c <__assert_fail@plt+0x1e60>
   12c80:	lsrs	r1, r1, #1
   12c84:	rrxs	r0, r0
   12c88:	rrx	ip, ip
   12c8c:	add	r4, r4, #1
   12c90:	lsl	r2, r4, #21
   12c94:	cmn	r2, #4194304	; 0x400000
   12c98:	bcs	12df4 <__assert_fail@plt+0x1fb8>
   12c9c:	cmp	ip, #-2147483648	; 0x80000000
   12ca0:	lsrseq	ip, r0, #1
   12ca4:	adcs	r0, r0, #0
   12ca8:	adc	r1, r1, r4, lsl #20
   12cac:	orr	r1, r1, r5
   12cb0:	pop	{r4, r5, pc}
   12cb4:	lsls	ip, ip, #1
   12cb8:	adcs	r0, r0, r0
   12cbc:	adc	r1, r1, r1
   12cc0:	tst	r1, #1048576	; 0x100000
   12cc4:	sub	r4, r4, #1
   12cc8:	bne	12c9c <__assert_fail@plt+0x1e60>
   12ccc:	teq	r1, #0
   12cd0:	moveq	r1, r0
   12cd4:	moveq	r0, #0
   12cd8:	clz	r3, r1
   12cdc:	addeq	r3, r3, #32
   12ce0:	sub	r3, r3, #11
   12ce4:	subs	r2, r3, #32
   12ce8:	bge	12d0c <__assert_fail@plt+0x1ed0>
   12cec:	adds	r2, r2, #12
   12cf0:	ble	12d08 <__assert_fail@plt+0x1ecc>
   12cf4:	add	ip, r2, #20
   12cf8:	rsb	r2, r2, #12
   12cfc:	lsl	r0, r1, ip
   12d00:	lsr	r1, r1, r2
   12d04:	b	12d1c <__assert_fail@plt+0x1ee0>
   12d08:	add	r2, r2, #20
   12d0c:	rsble	ip, r2, #32
   12d10:	lsl	r1, r1, r2
   12d14:	orrle	r1, r1, r0, lsr ip
   12d18:	lslle	r0, r0, r2
   12d1c:	subs	r4, r4, r3
   12d20:	addge	r1, r1, r4, lsl #20
   12d24:	orrge	r1, r1, r5
   12d28:	popge	{r4, r5, pc}
   12d2c:	mvn	r4, r4
   12d30:	subs	r4, r4, #31
   12d34:	bge	12d70 <__assert_fail@plt+0x1f34>
   12d38:	adds	r4, r4, #12
   12d3c:	bgt	12d58 <__assert_fail@plt+0x1f1c>
   12d40:	add	r4, r4, #20
   12d44:	rsb	r2, r4, #32
   12d48:	lsr	r0, r0, r4
   12d4c:	orr	r0, r0, r1, lsl r2
   12d50:	orr	r1, r5, r1, lsr r4
   12d54:	pop	{r4, r5, pc}
   12d58:	rsb	r4, r4, #12
   12d5c:	rsb	r2, r4, #32
   12d60:	lsr	r0, r0, r2
   12d64:	orr	r0, r0, r1, lsl r4
   12d68:	mov	r1, r5
   12d6c:	pop	{r4, r5, pc}
   12d70:	lsr	r0, r1, r4
   12d74:	mov	r1, r5
   12d78:	pop	{r4, r5, pc}
   12d7c:	teq	r4, #0
   12d80:	eor	r3, r3, #1048576	; 0x100000
   12d84:	eoreq	r1, r1, #1048576	; 0x100000
   12d88:	addeq	r4, r4, #1
   12d8c:	subne	r5, r5, #1
   12d90:	b	12c1c <__assert_fail@plt+0x1de0>
   12d94:	mvns	ip, r4, asr #21
   12d98:	mvnsne	ip, r5, asr #21
   12d9c:	beq	12e04 <__assert_fail@plt+0x1fc8>
   12da0:	teq	r4, r5
   12da4:	teqeq	r0, r2
   12da8:	beq	12dbc <__assert_fail@plt+0x1f80>
   12dac:	orrs	ip, r4, r0
   12db0:	moveq	r1, r3
   12db4:	moveq	r0, r2
   12db8:	pop	{r4, r5, pc}
   12dbc:	teq	r1, r3
   12dc0:	movne	r1, #0
   12dc4:	movne	r0, #0
   12dc8:	popne	{r4, r5, pc}
   12dcc:	lsrs	ip, r4, #21
   12dd0:	bne	12de4 <__assert_fail@plt+0x1fa8>
   12dd4:	lsls	r0, r0, #1
   12dd8:	adcs	r1, r1, r1
   12ddc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   12de0:	pop	{r4, r5, pc}
   12de4:	adds	r4, r4, #4194304	; 0x400000
   12de8:	addcc	r1, r1, #1048576	; 0x100000
   12dec:	popcc	{r4, r5, pc}
   12df0:	and	r5, r1, #-2147483648	; 0x80000000
   12df4:	orr	r1, r5, #2130706432	; 0x7f000000
   12df8:	orr	r1, r1, #15728640	; 0xf00000
   12dfc:	mov	r0, #0
   12e00:	pop	{r4, r5, pc}
   12e04:	mvns	ip, r4, asr #21
   12e08:	movne	r1, r3
   12e0c:	movne	r0, r2
   12e10:	mvnseq	ip, r5, asr #21
   12e14:	movne	r3, r1
   12e18:	movne	r2, r0
   12e1c:	orrs	r4, r0, r1, lsl #12
   12e20:	orrseq	r5, r2, r3, lsl #12
   12e24:	teqeq	r1, r3
   12e28:	orrne	r1, r1, #524288	; 0x80000
   12e2c:	pop	{r4, r5, pc}
   12e30:	teq	r0, #0
   12e34:	moveq	r1, #0
   12e38:	bxeq	lr
   12e3c:	push	{r4, r5, lr}
   12e40:	mov	r4, #1024	; 0x400
   12e44:	add	r4, r4, #50	; 0x32
   12e48:	mov	r5, #0
   12e4c:	mov	r1, #0
   12e50:	b	12ccc <__assert_fail@plt+0x1e90>
   12e54:	teq	r0, #0
   12e58:	moveq	r1, #0
   12e5c:	bxeq	lr
   12e60:	push	{r4, r5, lr}
   12e64:	mov	r4, #1024	; 0x400
   12e68:	add	r4, r4, #50	; 0x32
   12e6c:	ands	r5, r0, #-2147483648	; 0x80000000
   12e70:	rsbmi	r0, r0, #0
   12e74:	mov	r1, #0
   12e78:	b	12ccc <__assert_fail@plt+0x1e90>
   12e7c:	lsls	r2, r0, #1
   12e80:	asr	r1, r2, #3
   12e84:	rrx	r1, r1
   12e88:	lsl	r0, r2, #28
   12e8c:	andsne	r3, r2, #-16777216	; 0xff000000
   12e90:	teqne	r3, #-16777216	; 0xff000000
   12e94:	eorne	r1, r1, #939524096	; 0x38000000
   12e98:	bxne	lr
   12e9c:	bics	r2, r2, #-16777216	; 0xff000000
   12ea0:	bxeq	lr
   12ea4:	teq	r3, #-16777216	; 0xff000000
   12ea8:	orreq	r1, r1, #524288	; 0x80000
   12eac:	bxeq	lr
   12eb0:	push	{r4, r5, lr}
   12eb4:	mov	r4, #896	; 0x380
   12eb8:	and	r5, r1, #-2147483648	; 0x80000000
   12ebc:	bic	r1, r1, #-2147483648	; 0x80000000
   12ec0:	b	12ccc <__assert_fail@plt+0x1e90>
   12ec4:	orrs	r2, r0, r1
   12ec8:	bxeq	lr
   12ecc:	push	{r4, r5, lr}
   12ed0:	mov	r5, #0
   12ed4:	b	12ef4 <__assert_fail@plt+0x20b8>
   12ed8:	orrs	r2, r0, r1
   12edc:	bxeq	lr
   12ee0:	push	{r4, r5, lr}
   12ee4:	ands	r5, r1, #-2147483648	; 0x80000000
   12ee8:	bpl	12ef4 <__assert_fail@plt+0x20b8>
   12eec:	rsbs	r0, r0, #0
   12ef0:	rsc	r1, r1, #0
   12ef4:	mov	r4, #1024	; 0x400
   12ef8:	add	r4, r4, #50	; 0x32
   12efc:	lsrs	ip, r1, #22
   12f00:	beq	12c70 <__assert_fail@plt+0x1e34>
   12f04:	mov	r2, #3
   12f08:	lsrs	ip, ip, #3
   12f0c:	addne	r2, r2, #3
   12f10:	lsrs	ip, ip, #3
   12f14:	addne	r2, r2, #3
   12f18:	add	r2, r2, ip, lsr #3
   12f1c:	rsb	r3, r2, #32
   12f20:	lsl	ip, r0, r3
   12f24:	lsr	r0, r0, r2
   12f28:	orr	r0, r0, r1, lsl r3
   12f2c:	lsr	r1, r1, r2
   12f30:	add	r4, r4, r2
   12f34:	b	12c70 <__assert_fail@plt+0x1e34>
   12f38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f3c:	mov	r7, r0
   12f40:	ldr	r6, [pc, #72]	; 12f90 <__assert_fail@plt+0x2154>
   12f44:	ldr	r5, [pc, #72]	; 12f94 <__assert_fail@plt+0x2158>
   12f48:	add	r6, pc, r6
   12f4c:	add	r5, pc, r5
   12f50:	sub	r6, r6, r5
   12f54:	mov	r8, r1
   12f58:	mov	r9, r2
   12f5c:	bl	10bdc <calloc@plt-0x20>
   12f60:	asrs	r6, r6, #2
   12f64:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f68:	mov	r4, #0
   12f6c:	add	r4, r4, #1
   12f70:	ldr	r3, [r5], #4
   12f74:	mov	r2, r9
   12f78:	mov	r1, r8
   12f7c:	mov	r0, r7
   12f80:	blx	r3
   12f84:	cmp	r6, r4
   12f88:	bne	12f6c <__assert_fail@plt+0x2130>
   12f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f90:	andeq	r0, r1, ip, lsr #31
   12f94:	andeq	r0, r1, r4, lsr #31
   12f98:	bx	lr
   12f9c:	ldr	r3, [pc, #12]	; 12fb0 <__assert_fail@plt+0x2174>
   12fa0:	mov	r1, #0
   12fa4:	add	r3, pc, r3
   12fa8:	ldr	r2, [r3]
   12fac:	b	10d64 <__cxa_atexit@plt>
   12fb0:	andeq	r1, r1, ip, lsr #2

Disassembly of section .fini:

00012fb4 <.fini>:
   12fb4:	push	{r3, lr}
   12fb8:	pop	{r3, pc}
