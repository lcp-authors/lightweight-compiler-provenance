
raspbian-preinstalled/split:     file format elf32-littlearm


Disassembly of section .init:

00011114 <.init>:
   11114:	push	{r3, lr}
   11118:	bl	13434 <__assert_fail@plt+0x1f70>
   1111c:	pop	{r3, pc}

Disassembly of section .plt:

00011120 <fdopen@plt-0x14>:
   11120:	push	{lr}		; (str lr, [sp, #-4]!)
   11124:	ldr	lr, [pc, #4]	; 11130 <fdopen@plt-0x4>
   11128:	add	lr, pc, lr
   1112c:	ldr	pc, [lr, #8]!
   11130:	ldrdeq	r9, [r1], -r0

00011134 <fdopen@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #102400	; 0x19000
   1113c:	ldr	pc, [ip, #3792]!	; 0xed0

00011140 <calloc@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #102400	; 0x19000
   11148:	ldr	pc, [ip, #3784]!	; 0xec8

0001114c <fputs_unlocked@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #102400	; 0x19000
   11154:	ldr	pc, [ip, #3776]!	; 0xec0

00011158 <raise@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #102400	; 0x19000
   11160:	ldr	pc, [ip, #3768]!	; 0xeb8

00011164 <strcmp@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #102400	; 0x19000
   1116c:	ldr	pc, [ip, #3760]!	; 0xeb0

00011170 <strtol@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #102400	; 0x19000
   11178:	ldr	pc, [ip, #3752]!	; 0xea8

0001117c <read@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #102400	; 0x19000
   11184:	ldr	pc, [ip, #3744]!	; 0xea0

00011188 <fflush@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #102400	; 0x19000
   11190:	ldr	pc, [ip, #3736]!	; 0xe98

00011194 <sigprocmask@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #102400	; 0x19000
   1119c:	ldr	pc, [ip, #3728]!	; 0xe90

000111a0 <memmove@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #102400	; 0x19000
   111a8:	ldr	pc, [ip, #3720]!	; 0xe88

000111ac <free@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #102400	; 0x19000
   111b4:	ldr	pc, [ip, #3712]!	; 0xe80

000111b8 <_exit@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #102400	; 0x19000
   111c0:	ldr	pc, [ip, #3704]!	; 0xe78

000111c4 <memcpy@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #102400	; 0x19000
   111cc:	ldr	pc, [ip, #3696]!	; 0xe70

000111d0 <__strtoull_internal@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #102400	; 0x19000
   111d8:	ldr	pc, [ip, #3688]!	; 0xe68

000111dc <mbsinit@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #102400	; 0x19000
   111e4:	ldr	pc, [ip, #3680]!	; 0xe60

000111e8 <ftruncate64@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #102400	; 0x19000
   111f0:	ldr	pc, [ip, #3672]!	; 0xe58

000111f4 <fwrite_unlocked@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #102400	; 0x19000
   111fc:	ldr	pc, [ip, #3664]!	; 0xe50

00011200 <memcmp@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #102400	; 0x19000
   11208:	ldr	pc, [ip, #3656]!	; 0xe48

0001120c <dcgettext@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #102400	; 0x19000
   11214:	ldr	pc, [ip, #3648]!	; 0xe40

00011218 <__stack_chk_fail@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #102400	; 0x19000
   11220:	ldr	pc, [ip, #3640]!	; 0xe38

00011224 <dup2@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #102400	; 0x19000
   1122c:	ldr	pc, [ip, #3632]!	; 0xe30

00011230 <realloc@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #102400	; 0x19000
   11238:	ldr	pc, [ip, #3624]!	; 0xe28

0001123c <textdomain@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #102400	; 0x19000
   11244:	ldr	pc, [ip, #3616]!	; 0xe20

00011248 <iswprint@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #102400	; 0x19000
   11250:	ldr	pc, [ip, #3608]!	; 0xe18

00011254 <__fxstat64@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #102400	; 0x19000
   1125c:	ldr	pc, [ip, #3600]!	; 0xe10

00011260 <sigaction@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #102400	; 0x19000
   11268:	ldr	pc, [ip, #3592]!	; 0xe08

0001126c <fwrite@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #102400	; 0x19000
   11274:	ldr	pc, [ip, #3584]!	; 0xe00

00011278 <lseek64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #102400	; 0x19000
   11280:	ldr	pc, [ip, #3576]!	; 0xdf8

00011284 <waitpid@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #102400	; 0x19000
   1128c:	ldr	pc, [ip, #3568]!	; 0xdf0

00011290 <__ctype_get_mb_cur_max@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #102400	; 0x19000
   11298:	ldr	pc, [ip, #3560]!	; 0xde8

0001129c <strcpy@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #102400	; 0x19000
   112a4:	ldr	pc, [ip, #3552]!	; 0xde0

000112a8 <__fpending@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #102400	; 0x19000
   112b0:	ldr	pc, [ip, #3544]!	; 0xdd8

000112b4 <mbrtowc@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #102400	; 0x19000
   112bc:	ldr	pc, [ip, #3536]!	; 0xdd0

000112c0 <error@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #102400	; 0x19000
   112c8:	ldr	pc, [ip, #3528]!	; 0xdc8

000112cc <open64@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #102400	; 0x19000
   112d4:	ldr	pc, [ip, #3520]!	; 0xdc0

000112d8 <getenv@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #102400	; 0x19000
   112e0:	ldr	pc, [ip, #3512]!	; 0xdb8

000112e4 <malloc@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #102400	; 0x19000
   112ec:	ldr	pc, [ip, #3504]!	; 0xdb0

000112f0 <sigaddset@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #102400	; 0x19000
   112f8:	ldr	pc, [ip, #3496]!	; 0xda8

000112fc <__libc_start_main@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #102400	; 0x19000
   11304:	ldr	pc, [ip, #3488]!	; 0xda0

00011308 <__freading@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #102400	; 0x19000
   11310:	ldr	pc, [ip, #3480]!	; 0xd98

00011314 <__gmon_start__@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #102400	; 0x19000
   1131c:	ldr	pc, [ip, #3472]!	; 0xd90

00011320 <getopt_long@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #102400	; 0x19000
   11328:	ldr	pc, [ip, #3464]!	; 0xd88

0001132c <__ctype_b_loc@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #102400	; 0x19000
   11334:	ldr	pc, [ip, #3456]!	; 0xd80

00011338 <exit@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #102400	; 0x19000
   11340:	ldr	pc, [ip, #3448]!	; 0xd78

00011344 <strlen@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #102400	; 0x19000
   1134c:	ldr	pc, [ip, #3440]!	; 0xd70

00011350 <__libc_current_sigrtmax@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #102400	; 0x19000
   11358:	ldr	pc, [ip, #3432]!	; 0xd68

0001135c <strchr@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #102400	; 0x19000
   11364:	ldr	pc, [ip, #3424]!	; 0xd60

00011368 <setenv@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #102400	; 0x19000
   11370:	ldr	pc, [ip, #3416]!	; 0xd58

00011374 <memrchr@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #102400	; 0x19000
   1137c:	ldr	pc, [ip, #3408]!	; 0xd50

00011380 <getpagesize@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #102400	; 0x19000
   11388:	ldr	pc, [ip, #3400]!	; 0xd48

0001138c <__errno_location@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #102400	; 0x19000
   11394:	ldr	pc, [ip, #3392]!	; 0xd40

00011398 <__sprintf_chk@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #102400	; 0x19000
   113a0:	ldr	pc, [ip, #3384]!	; 0xd38

000113a4 <__cxa_atexit@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #102400	; 0x19000
   113ac:	ldr	pc, [ip, #3376]!	; 0xd30

000113b0 <memset@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #102400	; 0x19000
   113b8:	ldr	pc, [ip, #3368]!	; 0xd28

000113bc <__printf_chk@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #102400	; 0x19000
   113c4:	ldr	pc, [ip, #3360]!	; 0xd20

000113c8 <write@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #102400	; 0x19000
   113d0:	ldr	pc, [ip, #3352]!	; 0xd18

000113d4 <fileno@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #102400	; 0x19000
   113dc:	ldr	pc, [ip, #3344]!	; 0xd10

000113e0 <__fprintf_chk@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #102400	; 0x19000
   113e8:	ldr	pc, [ip, #3336]!	; 0xd08

000113ec <memchr@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #102400	; 0x19000
   113f4:	ldr	pc, [ip, #3328]!	; 0xd00

000113f8 <fclose@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #102400	; 0x19000
   11400:	ldr	pc, [ip, #3320]!	; 0xcf8

00011404 <pipe@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #102400	; 0x19000
   1140c:	ldr	pc, [ip, #3312]!	; 0xcf0

00011410 <fseeko64@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #102400	; 0x19000
   11418:	ldr	pc, [ip, #3304]!	; 0xce8

0001141c <fcntl64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #102400	; 0x19000
   11424:	ldr	pc, [ip, #3296]!	; 0xce0

00011428 <setlocale@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #102400	; 0x19000
   11430:	ldr	pc, [ip, #3288]!	; 0xcd8

00011434 <sigemptyset@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #102400	; 0x19000
   1143c:	ldr	pc, [ip, #3280]!	; 0xcd0

00011440 <fork@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #102400	; 0x19000
   11448:	ldr	pc, [ip, #3272]!	; 0xcc8

0001144c <execl@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #102400	; 0x19000
   11454:	ldr	pc, [ip, #3264]!	; 0xcc0

00011458 <strrchr@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #102400	; 0x19000
   11460:	ldr	pc, [ip, #3256]!	; 0xcb8

00011464 <nl_langinfo@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #102400	; 0x19000
   1146c:	ldr	pc, [ip, #3248]!	; 0xcb0

00011470 <clearerr_unlocked@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #102400	; 0x19000
   11478:	ldr	pc, [ip, #3240]!	; 0xca8

0001147c <bindtextdomain@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #102400	; 0x19000
   11484:	ldr	pc, [ip, #3232]!	; 0xca0

00011488 <__libc_current_sigrtmin@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #102400	; 0x19000
   11490:	ldr	pc, [ip, #3224]!	; 0xc98

00011494 <strncmp@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #102400	; 0x19000
   1149c:	ldr	pc, [ip, #3216]!	; 0xc90

000114a0 <abort@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #102400	; 0x19000
   114a8:	ldr	pc, [ip, #3208]!	; 0xc88

000114ac <close@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #102400	; 0x19000
   114b4:	ldr	pc, [ip, #3200]!	; 0xc80

000114b8 <strspn@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #102400	; 0x19000
   114c0:	ldr	pc, [ip, #3192]!	; 0xc78

000114c4 <__assert_fail@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #102400	; 0x19000
   114cc:	ldr	pc, [ip, #3184]!	; 0xc70

Disassembly of section .text:

000114d0 <.text>:
   114d0:	ldr	r3, [pc, #1788]	; 11bd4 <__assert_fail@plt+0x710>
   114d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114d8:	sub	sp, sp, #324	; 0x144
   114dc:	ldr	r3, [r3]
   114e0:	mov	r8, r1
   114e4:	str	r3, [sp, #316]	; 0x13c
   114e8:	str	r0, [sp, #60]	; 0x3c
   114ec:	bl	11380 <getpagesize@plt>
   114f0:	ldr	r6, [pc, #1616]	; 11b48 <__assert_fail@plt+0x684>
   114f4:	ldr	r5, [pc, #1616]	; 11b4c <__assert_fail@plt+0x688>
   114f8:	ldr	r4, [pc, #1616]	; 11b50 <__assert_fail@plt+0x68c>
   114fc:	str	r0, [sp, #80]	; 0x50
   11500:	ldr	r0, [r8]
   11504:	bl	14b34 <__assert_fail@plt+0x3670>
   11508:	ldr	r1, [pc, #1724]	; 11bcc <__assert_fail@plt+0x708>
   1150c:	mov	r0, #6
   11510:	bl	11428 <setlocale@plt>
   11514:	ldr	r1, [pc, #1592]	; 11b54 <__assert_fail@plt+0x690>
   11518:	ldr	r0, [pc, #1592]	; 11b58 <__assert_fail@plt+0x694>
   1151c:	bl	1147c <bindtextdomain@plt>
   11520:	ldr	r0, [pc, #1584]	; 11b58 <__assert_fail@plt+0x694>
   11524:	bl	1123c <textdomain@plt>
   11528:	ldr	r0, [pc, #1580]	; 11b5c <__assert_fail@plt+0x698>
   1152c:	bl	18ce4 <__assert_fail@plt+0x7820>
   11530:	mov	ip, #0
   11534:	ldr	lr, [pc, #1704]	; 11be4 <__assert_fail@plt+0x720>
   11538:	mov	r0, #0
   1153c:	mov	r1, #0
   11540:	ldr	r2, [pc, #1648]	; 11bb8 <__assert_fail@plt+0x6f4>
   11544:	ldr	r3, [pc, #1556]	; 11b60 <__assert_fail@plt+0x69c>
   11548:	mov	fp, ip
   1154c:	strd	r0, [sp, #24]
   11550:	str	ip, [sp, #64]	; 0x40
   11554:	str	r2, [lr, #300]	; 0x12c
   11558:	str	r3, [lr, #12]
   1155c:	strd	r0, [sp, #48]	; 0x30
   11560:	str	ip, [sp, #72]	; 0x48
   11564:	str	r8, [sp, #40]	; 0x28
   11568:	ldr	r3, [pc, #1600]	; 11bb0 <__assert_fail@plt+0x6ec>
   1156c:	mov	r9, #0
   11570:	mov	r2, r5
   11574:	ldr	r7, [r3]
   11578:	ldr	r1, [sp, #40]	; 0x28
   1157c:	cmp	r7, r9
   11580:	str	r9, [sp]
   11584:	mov	r3, r6
   11588:	ldr	r0, [sp, #60]	; 0x3c
   1158c:	moveq	r7, #1
   11590:	bl	11320 <getopt_long@plt>
   11594:	cmn	r0, #1
   11598:	mov	sl, r0
   1159c:	beq	11be8 <__assert_fail@plt+0x724>
   115a0:	cmp	r0, #101	; 0x65
   115a4:	beq	11b1c <__assert_fail@plt+0x658>
   115a8:	ble	116f8 <__assert_fail@plt+0x234>
   115ac:	cmp	r0, #120	; 0x78
   115b0:	beq	1324c <__assert_fail@plt+0x1d88>
   115b4:	bgt	11690 <__assert_fail@plt+0x1cc>
   115b8:	cmp	r0, #110	; 0x6e
   115bc:	beq	119f4 <__assert_fail@plt+0x530>
   115c0:	ble	11634 <__assert_fail@plt+0x170>
   115c4:	cmp	r0, #116	; 0x74
   115c8:	bne	1161c <__assert_fail@plt+0x158>
   115cc:	ldr	r0, [r4]
   115d0:	ldrb	r7, [r0]
   115d4:	cmp	r7, #0
   115d8:	beq	130ec <__assert_fail@plt+0x1c28>
   115dc:	ldrb	r3, [r0, #1]
   115e0:	cmp	r3, #0
   115e4:	beq	115f8 <__assert_fail@plt+0x134>
   115e8:	ldr	r1, [pc, #1396]	; 11b64 <__assert_fail@plt+0x6a0>
   115ec:	bl	11164 <strcmp@plt>
   115f0:	subs	r7, r0, #0
   115f4:	bne	131fc <__assert_fail@plt+0x1d38>
   115f8:	ldr	r3, [pc, #1488]	; 11bd0 <__assert_fail@plt+0x70c>
   115fc:	ldr	r3, [r3, #12]
   11600:	cmp	r3, #0
   11604:	blt	11610 <__assert_fail@plt+0x14c>
   11608:	cmp	r3, r7
   1160c:	bne	131c0 <__assert_fail@plt+0x1cfc>
   11610:	ldr	r3, [pc, #1464]	; 11bd0 <__assert_fail@plt+0x70c>
   11614:	str	r7, [r3, #12]
   11618:	b	11568 <__assert_fail@plt+0xa4>
   1161c:	cmp	r0, #117	; 0x75
   11620:	bne	13028 <__assert_fail@plt+0x1b64>
   11624:	ldr	r2, [pc, #1464]	; 11be4 <__assert_fail@plt+0x720>
   11628:	mov	r3, #1
   1162c:	strb	r3, [r2, #304]	; 0x130
   11630:	b	11568 <__assert_fail@plt+0xa4>
   11634:	cmp	r0, #108	; 0x6c
   11638:	bne	13028 <__assert_fail@plt+0x1b64>
   1163c:	cmp	fp, #0
   11640:	bne	13008 <__assert_fail@plt+0x1b44>
   11644:	mov	r2, #5
   11648:	ldr	r1, [pc, #1304]	; 11b68 <__assert_fail@plt+0x6a4>
   1164c:	mov	r0, fp
   11650:	ldr	r7, [r4]
   11654:	bl	1120c <dcgettext@plt>
   11658:	ldr	r1, [pc, #1388]	; 11bcc <__assert_fail@plt+0x708>
   1165c:	mvn	r2, #0
   11660:	mvn	r3, #0
   11664:	str	fp, [sp, #16]
   11668:	strd	r2, [sp]
   1166c:	str	r1, [sp, #8]
   11670:	mov	r2, #1
   11674:	mov	r3, #0
   11678:	mov	fp, #3
   1167c:	str	r0, [sp, #12]
   11680:	mov	r0, r7
   11684:	bl	177f4 <__assert_fail@plt+0x6330>
   11688:	strd	r0, [sp, #24]
   1168c:	b	11568 <__assert_fail@plt+0xa4>
   11690:	ldr	r3, [pc, #1236]	; 11b6c <__assert_fail@plt+0x6a8>
   11694:	cmp	r0, r3
   11698:	beq	11998 <__assert_fail@plt+0x4d4>
   1169c:	ble	11794 <__assert_fail@plt+0x2d0>
   116a0:	ldr	r3, [pc, #1224]	; 11b70 <__assert_fail@plt+0x6ac>
   116a4:	cmp	r0, r3
   116a8:	bne	11768 <__assert_fail@plt+0x2a4>
   116ac:	mov	r2, #5
   116b0:	ldr	r1, [pc, #1212]	; 11b74 <__assert_fail@plt+0x6b0>
   116b4:	mov	r0, r9
   116b8:	ldr	r7, [r4]
   116bc:	bl	1120c <dcgettext@plt>
   116c0:	ldr	r3, [sp, #80]	; 0x50
   116c4:	ldr	r2, [pc, #1196]	; 11b78 <__assert_fail@plt+0x6b4>
   116c8:	mvn	r3, r3
   116cc:	str	r2, [sp, #8]
   116d0:	str	r3, [sp]
   116d4:	str	r9, [sp, #16]
   116d8:	str	r9, [sp, #4]
   116dc:	mov	r2, #1
   116e0:	mov	r3, #0
   116e4:	str	r0, [sp, #12]
   116e8:	mov	r0, r7
   116ec:	bl	177f4 <__assert_fail@plt+0x6330>
   116f0:	str	r0, [sp, #72]	; 0x48
   116f4:	b	11568 <__assert_fail@plt+0xa4>
   116f8:	cmp	r0, #57	; 0x39
   116fc:	ble	118a4 <__assert_fail@plt+0x3e0>
   11700:	cmp	r0, #97	; 0x61
   11704:	beq	119a8 <__assert_fail@plt+0x4e4>
   11708:	ble	11848 <__assert_fail@plt+0x384>
   1170c:	cmp	r0, #98	; 0x62
   11710:	bne	117ac <__assert_fail@plt+0x2e8>
   11714:	cmp	fp, #0
   11718:	bne	13008 <__assert_fail@plt+0x1b44>
   1171c:	mov	r2, #5
   11720:	ldr	r1, [pc, #1108]	; 11b7c <__assert_fail@plt+0x6b8>
   11724:	mov	r0, fp
   11728:	ldr	r7, [r4]
   1172c:	bl	1120c <dcgettext@plt>
   11730:	ldr	r1, [pc, #1088]	; 11b78 <__assert_fail@plt+0x6b4>
   11734:	mvn	r2, #0
   11738:	mvn	r3, #-2147483648	; 0x80000000
   1173c:	str	fp, [sp, #16]
   11740:	strd	r2, [sp]
   11744:	str	r1, [sp, #8]
   11748:	mov	r2, #1
   1174c:	mov	r3, #0
   11750:	mov	fp, #1
   11754:	str	r0, [sp, #12]
   11758:	mov	r0, r7
   1175c:	bl	177f4 <__assert_fail@plt+0x6330>
   11760:	strd	r0, [sp, #24]
   11764:	b	11568 <__assert_fail@plt+0xa4>
   11768:	add	r3, r3, #1
   1176c:	cmp	r0, r3
   11770:	bne	13028 <__assert_fail@plt+0x1b64>
   11774:	ldr	r7, [r4]
   11778:	mov	r0, r7
   1177c:	bl	148f8 <__assert_fail@plt+0x3434>
   11780:	cmp	r7, r0
   11784:	bne	1322c <__assert_fail@plt+0x1d68>
   11788:	ldr	r3, [pc, #1108]	; 11be4 <__assert_fail@plt+0x720>
   1178c:	str	r7, [r3, #20]
   11790:	b	11568 <__assert_fail@plt+0xa4>
   11794:	cmp	r0, #256	; 0x100
   11798:	bne	13028 <__assert_fail@plt+0x1b64>
   1179c:	ldr	r2, [pc, #1088]	; 11be4 <__assert_fail@plt+0x720>
   117a0:	mov	r3, #1
   117a4:	strb	r3, [r2, #44]	; 0x2c
   117a8:	b	11568 <__assert_fail@plt+0xa4>
   117ac:	cmp	r0, #100	; 0x64
   117b0:	bne	13028 <__assert_fail@plt+0x1b64>
   117b4:	ldr	r9, [pc, #964]	; 11b80 <__assert_fail@plt+0x6bc>
   117b8:	ldr	r7, [r4]
   117bc:	ldr	r3, [pc, #1036]	; 11bd0 <__assert_fail@plt+0x70c>
   117c0:	cmp	r7, #0
   117c4:	str	r9, [r3, #4]
   117c8:	beq	11568 <__assert_fail@plt+0xa4>
   117cc:	mov	r0, r7
   117d0:	bl	11344 <strlen@plt>
   117d4:	mov	r1, r9
   117d8:	str	r0, [sp, #84]	; 0x54
   117dc:	mov	r0, r7
   117e0:	bl	114b8 <strspn@plt>
   117e4:	ldr	r3, [sp, #84]	; 0x54
   117e8:	cmp	r3, r0
   117ec:	bne	131cc <__assert_fail@plt+0x1d08>
   117f0:	ldrb	r3, [r7]
   117f4:	cmp	r3, #48	; 0x30
   117f8:	bne	1183c <__assert_fail@plt+0x378>
   117fc:	ldrb	r3, [r7, #1]
   11800:	cmp	r3, #0
   11804:	addne	r3, r7, #1
   11808:	ldrne	r8, [sp, #40]	; 0x28
   1180c:	bne	11820 <__assert_fail@plt+0x35c>
   11810:	b	1183c <__assert_fail@plt+0x378>
   11814:	ldrb	r2, [r3]
   11818:	cmp	r2, #0
   1181c:	beq	11838 <__assert_fail@plt+0x374>
   11820:	str	r3, [r4]
   11824:	ldrb	r2, [r3]
   11828:	mov	r7, r3
   1182c:	add	r3, r3, #1
   11830:	cmp	r2, #48	; 0x30
   11834:	beq	11814 <__assert_fail@plt+0x350>
   11838:	str	r8, [sp, #40]	; 0x28
   1183c:	ldr	r3, [pc, #928]	; 11be4 <__assert_fail@plt+0x720>
   11840:	str	r7, [r3, #36]	; 0x24
   11844:	b	11568 <__assert_fail@plt+0xa4>
   11848:	cmp	r0, #67	; 0x43
   1184c:	bne	13028 <__assert_fail@plt+0x1b64>
   11850:	cmp	fp, #0
   11854:	bne	13008 <__assert_fail@plt+0x1b44>
   11858:	mov	r2, #5
   1185c:	ldr	r1, [pc, #792]	; 11b7c <__assert_fail@plt+0x6b8>
   11860:	mov	r0, fp
   11864:	ldr	r7, [r4]
   11868:	bl	1120c <dcgettext@plt>
   1186c:	ldr	r1, [pc, #772]	; 11b78 <__assert_fail@plt+0x6b4>
   11870:	mvn	r2, #0
   11874:	mov	r3, #0
   11878:	str	fp, [sp, #16]
   1187c:	strd	r2, [sp]
   11880:	str	r1, [sp, #8]
   11884:	mov	r2, #1
   11888:	mov	r3, #0
   1188c:	mov	fp, #2
   11890:	str	r0, [sp, #12]
   11894:	mov	r0, r7
   11898:	bl	177f4 <__assert_fail@plt+0x6330>
   1189c:	strd	r0, [sp, #24]
   118a0:	b	11568 <__assert_fail@plt+0xa4>
   118a4:	cmp	r0, #48	; 0x30
   118a8:	bge	118fc <__assert_fail@plt+0x438>
   118ac:	cmn	r0, #3
   118b0:	bne	118ec <__assert_fail@plt+0x428>
   118b4:	ldr	r3, [pc, #712]	; 11b84 <__assert_fail@plt+0x6c0>
   118b8:	ldr	r0, [pc, #792]	; 11bd8 <__assert_fail@plt+0x714>
   118bc:	ldr	r1, [pc, #708]	; 11b88 <__assert_fail@plt+0x6c4>
   118c0:	ldr	r2, [pc, #708]	; 11b8c <__assert_fail@plt+0x6c8>
   118c4:	str	r9, [sp, #8]
   118c8:	ldr	r0, [r0]
   118cc:	ldr	r3, [r3]
   118d0:	str	r1, [sp, #4]
   118d4:	str	r2, [sp]
   118d8:	ldr	r1, [pc, #688]	; 11b90 <__assert_fail@plt+0x6cc>
   118dc:	ldr	r2, [pc, #688]	; 11b94 <__assert_fail@plt+0x6d0>
   118e0:	bl	17318 <__assert_fail@plt+0x5e54>
   118e4:	mov	r0, r9
   118e8:	bl	11338 <exit@plt>
   118ec:	cmn	r0, #2
   118f0:	bne	13028 <__assert_fail@plt+0x1b64>
   118f4:	mov	r0, r9
   118f8:	bl	14468 <__assert_fail@plt+0x2fa4>
   118fc:	cmp	fp, #0
   11900:	beq	1197c <__assert_fail@plt+0x4b8>
   11904:	cmp	fp, #4
   11908:	bne	13008 <__assert_fail@plt+0x1b44>
   1190c:	ldr	r3, [sp, #64]	; 0x40
   11910:	cmp	r3, #0
   11914:	cmpne	r3, r7
   11918:	bne	1197c <__assert_fail@plt+0x4b8>
   1191c:	ldrd	r2, [sp, #24]
   11920:	add	r1, pc, #536	; 0x218
   11924:	ldrd	r0, [r1]
   11928:	cmp	r3, r1
   1192c:	cmpeq	r2, r0
   11930:	bhi	1309c <__assert_fail@plt+0x1bd8>
   11934:	mov	r0, #10
   11938:	mov	r9, r3
   1193c:	umull	r2, r3, r2, r0
   11940:	mla	r3, r0, r9, r3
   11944:	sub	r1, sl, #48	; 0x30
   11948:	adds	r8, r2, r1
   1194c:	adc	r9, r3, r1, asr #31
   11950:	ldrd	r2, [sp, #24]
   11954:	mov	r0, r8
   11958:	mov	r1, r9
   1195c:	cmp	r9, r3
   11960:	cmpeq	r8, r2
   11964:	bcc	1309c <__assert_fail@plt+0x1bd8>
   11968:	mov	r2, r0
   1196c:	mov	r3, r1
   11970:	str	r7, [sp, #64]	; 0x40
   11974:	strd	r2, [sp, #24]
   11978:	b	11568 <__assert_fail@plt+0xa4>
   1197c:	sub	sl, sl, #48	; 0x30
   11980:	mov	r2, sl
   11984:	asr	r3, sl, #31
   11988:	str	r7, [sp, #64]	; 0x40
   1198c:	strd	r2, [sp, #24]
   11990:	mov	fp, #4
   11994:	b	11568 <__assert_fail@plt+0xa4>
   11998:	ldr	r2, [pc, #580]	; 11be4 <__assert_fail@plt+0x720>
   1199c:	ldr	r3, [r4]
   119a0:	str	r3, [r2, #40]	; 0x28
   119a4:	b	11568 <__assert_fail@plt+0xa4>
   119a8:	mov	r2, #5
   119ac:	ldr	r1, [pc, #484]	; 11b98 <__assert_fail@plt+0x6d4>
   119b0:	mov	r0, r9
   119b4:	ldr	r7, [r4]
   119b8:	bl	1120c <dcgettext@plt>
   119bc:	ldr	r1, [pc, #520]	; 11bcc <__assert_fail@plt+0x708>
   119c0:	mvn	r2, #-1073741824	; 0xc0000000
   119c4:	mov	r3, #0
   119c8:	str	r9, [sp, #16]
   119cc:	strd	r2, [sp]
   119d0:	str	r1, [sp, #8]
   119d4:	mov	r3, #0
   119d8:	mov	r2, #0
   119dc:	str	r0, [sp, #12]
   119e0:	mov	r0, r7
   119e4:	bl	177f4 <__assert_fail@plt+0x6330>
   119e8:	ldr	r3, [pc, #500]	; 11be4 <__assert_fail@plt+0x720>
   119ec:	str	r0, [r3, #4]
   119f0:	b	11568 <__assert_fail@plt+0xa4>
   119f4:	cmp	fp, #0
   119f8:	bne	13008 <__assert_fail@plt+0x1b44>
   119fc:	bl	1132c <__ctype_b_loc@plt>
   11a00:	ldr	r2, [r4]
   11a04:	ldr	r8, [sp, #40]	; 0x28
   11a08:	ldr	r1, [r0]
   11a0c:	b	11a14 <__assert_fail@plt+0x550>
   11a10:	str	r2, [r4]
   11a14:	mov	r7, r2
   11a18:	add	r2, r2, #1
   11a1c:	ldrb	r3, [r7]
   11a20:	lsl	r3, r3, #1
   11a24:	ldrh	r3, [r1, r3]
   11a28:	tst	r3, #8192	; 0x2000
   11a2c:	bne	11a10 <__assert_fail@plt+0x54c>
   11a30:	mov	r2, #2
   11a34:	ldr	r1, [pc, #352]	; 11b9c <__assert_fail@plt+0x6d8>
   11a38:	mov	r0, r7
   11a3c:	str	r8, [sp, #40]	; 0x28
   11a40:	bl	11494 <strncmp@plt>
   11a44:	cmp	r0, #0
   11a48:	beq	11b2c <__assert_fail@plt+0x668>
   11a4c:	mov	r0, r7
   11a50:	mov	r2, #2
   11a54:	ldr	r1, [pc, #324]	; 11ba0 <__assert_fail@plt+0x6dc>
   11a58:	bl	11494 <strncmp@plt>
   11a5c:	cmp	r0, #0
   11a60:	moveq	fp, #6
   11a64:	movne	fp, #5
   11a68:	addeq	r7, r7, #2
   11a6c:	streq	r7, [r4]
   11a70:	ldr	r9, [r4]
   11a74:	mov	r1, #47	; 0x2f
   11a78:	mov	r0, r9
   11a7c:	bl	1135c <strchr@plt>
   11a80:	mov	r2, #5
   11a84:	ldr	r1, [pc, #280]	; 11ba4 <__assert_fail@plt+0x6e0>
   11a88:	subs	r7, r0, #0
   11a8c:	beq	11e40 <__assert_fail@plt+0x97c>
   11a90:	mov	r0, #0
   11a94:	bl	1120c <dcgettext@plt>
   11a98:	ldr	sl, [pc, #300]	; 11bcc <__assert_fail@plt+0x708>
   11a9c:	mvn	r2, #0
   11aa0:	mvn	r3, #0
   11aa4:	mov	r9, #0
   11aa8:	strd	r2, [sp]
   11aac:	str	sl, [sp, #8]
   11ab0:	mov	r3, #0
   11ab4:	str	r9, [sp, #16]
   11ab8:	mov	r2, #1
   11abc:	str	r0, [sp, #12]
   11ac0:	add	r0, r7, #1
   11ac4:	bl	177f4 <__assert_fail@plt+0x6330>
   11ac8:	ldr	r3, [r4]
   11acc:	cmp	r7, r3
   11ad0:	strd	r0, [sp, #24]
   11ad4:	beq	11568 <__assert_fail@plt+0xa4>
   11ad8:	strb	r9, [r7]
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #192]	; 11ba8 <__assert_fail@plt+0x6e4>
   11ae4:	mov	r0, r9
   11ae8:	ldr	r7, [r4]
   11aec:	bl	1120c <dcgettext@plt>
   11af0:	ldrd	r2, [sp, #24]
   11af4:	str	r9, [sp, #16]
   11af8:	str	sl, [sp, #8]
   11afc:	strd	r2, [sp]
   11b00:	mov	r2, #1
   11b04:	mov	r3, #0
   11b08:	str	r0, [sp, #12]
   11b0c:	mov	r0, r7
   11b10:	bl	177f4 <__assert_fail@plt+0x6330>
   11b14:	strd	r0, [sp, #48]	; 0x30
   11b18:	b	11568 <__assert_fail@plt+0xa4>
   11b1c:	ldr	r2, [pc, #192]	; 11be4 <__assert_fail@plt+0x720>
   11b20:	mov	r3, #1
   11b24:	strb	r3, [r2, #296]	; 0x128
   11b28:	b	11568 <__assert_fail@plt+0xa4>
   11b2c:	add	r7, r7, #2
   11b30:	str	r7, [r4]
   11b34:	mov	fp, #7
   11b38:	b	11a70 <__assert_fail@plt+0x5ac>
   11b3c:	nop			; (mov r0, r0)
   11b40:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11b44:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11b48:	andeq	r8, r1, r0, asr sp
   11b4c:	andeq	r9, r1, r8, ror #20
   11b50:	andeq	fp, r2, r0, ror #6
   11b54:	andeq	r9, r1, r0, asr sl
   11b58:	andeq	r9, r1, r4, lsl #19
   11b5c:	andeq	r4, r1, r0, lsr #16
   11b60:	andeq	r9, r1, r8, lsr #29
   11b64:	andeq	r9, r1, r4, ror fp
   11b68:	andeq	r9, r1, r8, lsl #22
   11b6c:	andeq	r0, r0, r1, lsl #2
   11b70:	andeq	r0, r0, r2, lsl #2
   11b74:	andeq	r9, r1, r8, asr #24
   11b78:	andeq	r8, r1, r0, ror #28
   11b7c:	strdeq	r9, [r1], -r0
   11b80:	andeq	r9, r1, r4, asr #20
   11b84:	andeq	fp, r2, ip, asr r1
   11b88:	andeq	r9, r1, r0, ror #24
   11b8c:	andeq	r9, r1, r4, ror ip
   11b90:	andeq	r9, r1, r8, ror #1
   11b94:	andeq	r9, r1, r0, lsl #19
   11b98:	andeq	r9, r1, r4, lsl #21
   11b9c:	andeq	r9, r1, r0, lsr #22
   11ba0:	andeq	r9, r1, r4, lsr #22
   11ba4:	andeq	r9, r1, r8, lsr #22
   11ba8:	andeq	r9, r1, r4, asr #22
   11bac:	andeq	r9, r1, r8, lsl #25
   11bb0:	andeq	fp, r2, r0, asr r3
   11bb4:	andeq	r9, r1, ip, lsl #26
   11bb8:	andeq	r9, r1, r4, ror #20
   11bbc:	muleq	r2, r8, r3
   11bc0:	svcne	0x00fe0000
   11bc4:	muleq	r2, ip, r4
   11bc8:	andeq	fp, r2, r8, lsl #8
   11bcc:	andeq	r9, r1, r8, ror #15
   11bd0:	andeq	fp, r2, ip, asr #2
   11bd4:	andeq	sl, r2, r8, lsl #30
   11bd8:	andeq	fp, r2, ip, asr r3
   11bdc:	andeq	r9, r1, ip, asr #27
   11be0:	andeq	r9, r1, r0, asr #1
   11be4:	andeq	fp, r2, r8, ror #6
   11be8:	ldrd	r2, [sp, #48]	; 0x30
   11bec:	ldr	r8, [sp, #40]	; 0x28
   11bf0:	orrs	r3, r2, r3
   11bf4:	beq	11c10 <__assert_fail@plt+0x74c>
   11bf8:	ldr	r3, [pc, #-28]	; 11be4 <__assert_fail@plt+0x720>
   11bfc:	ldr	r3, [r3, #40]	; 0x28
   11c00:	cmp	r3, #0
   11c04:	movne	r2, #5
   11c08:	ldrne	r1, [pc, #-100]	; 11bac <__assert_fail@plt+0x6e8>
   11c0c:	bne	13010 <__assert_fail@plt+0x1b4c>
   11c10:	cmp	fp, #0
   11c14:	beq	11e78 <__assert_fail@plt+0x9b4>
   11c18:	ldrd	r2, [sp, #24]
   11c1c:	orrs	r3, r2, r3
   11c20:	beq	13184 <__assert_fail@plt+0x1cc0>
   11c24:	ldr	r2, [pc, #-92]	; 11bd0 <__assert_fail@plt+0x70c>
   11c28:	sub	sl, fp, #5
   11c2c:	ldr	r3, [r2, #12]
   11c30:	cmp	r3, #0
   11c34:	movlt	r3, #10
   11c38:	strlt	r3, [r2, #12]
   11c3c:	ldr	r3, [pc, #-96]	; 11be4 <__assert_fail@plt+0x720>
   11c40:	ldr	r0, [r3, #36]	; 0x24
   11c44:	cmp	r0, #0
   11c48:	beq	11e8c <__assert_fail@plt+0x9c8>
   11c4c:	ldr	r3, [pc, #-132]	; 11bd0 <__assert_fail@plt+0x70c>
   11c50:	mov	r1, #0
   11c54:	cmp	sl, #2
   11c58:	strb	r1, [r3]
   11c5c:	bls	11f90 <__assert_fail@plt+0xacc>
   11c60:	ldr	r3, [pc, #-132]	; 11be4 <__assert_fail@plt+0x720>
   11c64:	ldr	r3, [r3, #4]
   11c68:	cmp	r3, #0
   11c6c:	moveq	r6, #0
   11c70:	moveq	r7, #0
   11c74:	bne	11f80 <__assert_fail@plt+0xabc>
   11c78:	cmp	r7, #0
   11c7c:	cmpeq	r6, #2
   11c80:	ldr	r3, [pc, #-164]	; 11be4 <__assert_fail@plt+0x720>
   11c84:	movcc	r7, #0
   11c88:	movcc	r6, #2
   11c8c:	str	r6, [r3, #4]
   11c90:	ldr	r0, [pc, #-232]	; 11bb0 <__assert_fail@plt+0x6ec>
   11c94:	ldr	ip, [sp, #60]	; 0x3c
   11c98:	ldr	r3, [r0]
   11c9c:	cmp	r3, ip
   11ca0:	bge	11ce0 <__assert_fail@plt+0x81c>
   11ca4:	ldr	lr, [pc, #-200]	; 11be4 <__assert_fail@plt+0x720>
   11ca8:	add	r2, r3, #1
   11cac:	ldr	r1, [r8, r3, lsl #2]
   11cb0:	cmp	r2, ip
   11cb4:	str	r2, [r0]
   11cb8:	str	r1, [lr, #300]	; 0x12c
   11cbc:	lsl	r2, r3, #2
   11cc0:	bge	11ce0 <__assert_fail@plt+0x81c>
   11cc4:	add	r2, r8, r2
   11cc8:	add	r3, r3, #2
   11ccc:	ldr	r2, [r2, #4]
   11cd0:	cmp	r3, ip
   11cd4:	str	r2, [lr, #12]
   11cd8:	str	r3, [r0]
   11cdc:	blt	13144 <__assert_fail@plt+0x1c80>
   11ce0:	ldr	r3, [pc, #-260]	; 11be4 <__assert_fail@plt+0x720>
   11ce4:	ldr	r0, [r3, #36]	; 0x24
   11ce8:	cmp	r0, #0
   11cec:	beq	11d0c <__assert_fail@plt+0x848>
   11cf0:	bl	11344 <strlen@plt>
   11cf4:	ldr	r3, [pc, #-280]	; 11be4 <__assert_fail@plt+0x720>
   11cf8:	ldr	r3, [r3, #4]
   11cfc:	cmp	r0, r3
   11d00:	movhi	r2, #5
   11d04:	ldrhi	r1, [pc, #-344]	; 11bb4 <__assert_fail@plt+0x6f0>
   11d08:	bhi	13010 <__assert_fail@plt+0x1b4c>
   11d0c:	ldr	r3, [pc, #-304]	; 11be4 <__assert_fail@plt+0x720>
   11d10:	ldr	r1, [pc, #-352]	; 11bb8 <__assert_fail@plt+0x6f4>
   11d14:	ldr	r4, [r3, #300]	; 0x12c
   11d18:	mov	r0, r4
   11d1c:	bl	11164 <strcmp@plt>
   11d20:	cmp	r0, #0
   11d24:	beq	11d44 <__assert_fail@plt+0x880>
   11d28:	mov	r3, #0
   11d2c:	mov	r1, r4
   11d30:	mov	r2, r3
   11d34:	mov	r0, r3
   11d38:	bl	149f4 <__assert_fail@plt+0x3530>
   11d3c:	cmp	r0, #0
   11d40:	blt	13254 <__assert_fail@plt+0x1d90>
   11d44:	ldr	r2, [pc, #-400]	; 11bbc <__assert_fail@plt+0x6f8>
   11d48:	mov	r1, #0
   11d4c:	mov	r0, #3
   11d50:	bl	11254 <__fxstat64@plt>
   11d54:	cmp	r0, #0
   11d58:	bne	12d94 <__assert_fail@plt+0x18d0>
   11d5c:	ldr	r3, [sp, #72]	; 0x48
   11d60:	cmp	r3, #0
   11d64:	bne	11d84 <__assert_fail@plt+0x8c0>
   11d68:	ldr	r3, [pc, #-396]	; 11be4 <__assert_fail@plt+0x720>
   11d6c:	ldr	r1, [r3, #104]	; 0x68
   11d70:	ldr	r3, [pc, #-440]	; 11bc0 <__assert_fail@plt+0x6fc>
   11d74:	sub	r2, r1, #131072	; 0x20000
   11d78:	cmp	r2, r3
   11d7c:	movhi	r1, #131072	; 0x20000
   11d80:	str	r1, [sp, #72]	; 0x48
   11d84:	ldr	r3, [sp, #72]	; 0x48
   11d88:	ldr	r4, [sp, #80]	; 0x50
   11d8c:	add	r0, r3, r4
   11d90:	bl	1741c <__assert_fail@plt+0x5f58>
   11d94:	mov	r1, r4
   11d98:	sub	r4, r4, #1
   11d9c:	add	r4, r0, r4
   11da0:	mov	r0, r4
   11da4:	bl	18aec <__assert_fail@plt+0x7628>
   11da8:	cmp	sl, #1
   11dac:	sub	r3, r4, r1
   11db0:	str	r3, [sp, #80]	; 0x50
   11db4:	bls	11ff8 <__assert_fail@plt+0xb34>
   11db8:	mvn	r2, #0
   11dbc:	mvn	r3, #-2147483648	; 0x80000000
   11dc0:	mvn	sl, #0
   11dc4:	strd	r2, [sp, #40]	; 0x28
   11dc8:	ldr	r3, [pc, #-492]	; 11be4 <__assert_fail@plt+0x720>
   11dcc:	ldr	r3, [r3, #40]	; 0x28
   11dd0:	cmp	r3, #0
   11dd4:	beq	11e18 <__assert_fail@plt+0x954>
   11dd8:	ldr	r0, [pc, #-540]	; 11bc4 <__assert_fail@plt+0x700>
   11ddc:	bl	11434 <sigemptyset@plt>
   11de0:	add	r2, sp, #152	; 0x98
   11de4:	mov	r1, #0
   11de8:	mov	r0, #13
   11dec:	bl	11260 <sigaction@plt>
   11df0:	ldr	r3, [sp, #152]	; 0x98
   11df4:	cmp	r3, #1
   11df8:	beq	11e08 <__assert_fail@plt+0x944>
   11dfc:	mov	r1, #13
   11e00:	ldr	r0, [pc, #-580]	; 11bc4 <__assert_fail@plt+0x700>
   11e04:	bl	112f0 <sigaddset@plt>
   11e08:	ldr	r2, [pc, #-584]	; 11bc8 <__assert_fail@plt+0x704>
   11e0c:	mov	r0, #0
   11e10:	add	r1, r2, #148	; 0x94
   11e14:	bl	11194 <sigprocmask@plt>
   11e18:	sub	r3, fp, #2
   11e1c:	cmp	r3, #5
   11e20:	ldrls	pc, [pc, r3, lsl #2]
   11e24:	b	1335c <__assert_fail@plt+0x1e98>
   11e28:	andeq	r2, r1, r0, ror r1
   11e2c:	andeq	r2, r1, r8, asr #1
   11e30:	andeq	r2, r1, r8, asr #1
   11e34:	andeq	r2, r1, ip, ror r8
   11e38:	andeq	r2, r1, r4, asr #11
   11e3c:	andeq	r2, r1, r0, lsl #7
   11e40:	bl	1120c <dcgettext@plt>
   11e44:	ldr	r1, [pc, #-640]	; 11bcc <__assert_fail@plt+0x708>
   11e48:	mvn	r2, #0
   11e4c:	mvn	r3, #0
   11e50:	str	r7, [sp, #16]
   11e54:	strd	r2, [sp]
   11e58:	str	r1, [sp, #8]
   11e5c:	mov	r2, #1
   11e60:	mov	r3, #0
   11e64:	str	r0, [sp, #12]
   11e68:	mov	r0, r9
   11e6c:	bl	177f4 <__assert_fail@plt+0x6330>
   11e70:	strd	r0, [sp, #24]
   11e74:	b	11568 <__assert_fail@plt+0xa4>
   11e78:	mov	r2, #1000	; 0x3e8
   11e7c:	mov	r3, #0
   11e80:	mov	fp, #3
   11e84:	strd	r2, [sp, #24]
   11e88:	b	11c24 <__assert_fail@plt+0x760>
   11e8c:	cmp	sl, #2
   11e90:	bhi	11c60 <__assert_fail@plt+0x79c>
   11e94:	ldrd	r2, [sp, #24]
   11e98:	strd	r2, [sp, #96]	; 0x60
   11e9c:	ldr	r3, [pc, #-724]	; 11bd0 <__assert_fail@plt+0x70c>
   11ea0:	mov	r5, #0
   11ea4:	ldr	r0, [r3, #4]
   11ea8:	bl	11344 <strlen@plt>
   11eac:	ldrd	r6, [sp, #96]	; 0x60
   11eb0:	mov	r3, r5
   11eb4:	mov	r1, r7
   11eb8:	mov	r4, r0
   11ebc:	mov	r2, r0
   11ec0:	mov	r0, r6
   11ec4:	bl	18b0c <__assert_fail@plt+0x7648>
   11ec8:	orrs	r3, r2, r3
   11ecc:	movne	r9, #1
   11ed0:	moveq	r9, #0
   11ed4:	cmp	r5, r7
   11ed8:	cmpeq	r4, r6
   11edc:	mov	r2, r4
   11ee0:	mov	r3, r5
   11ee4:	mov	r6, r0
   11ee8:	mov	r7, r1
   11eec:	bhi	12f14 <__assert_fail@plt+0x1a50>
   11ef0:	str	sl, [sp, #40]	; 0x28
   11ef4:	str	r8, [sp, #64]	; 0x40
   11ef8:	mov	sl, r9
   11efc:	mov	r4, #0
   11f00:	mov	r5, #0
   11f04:	mov	r8, r2
   11f08:	mov	r9, r3
   11f0c:	b	11f18 <__assert_fail@plt+0xa54>
   11f10:	mov	r6, r0
   11f14:	mov	r7, r1
   11f18:	adds	r4, r4, #1
   11f1c:	mov	r2, r8
   11f20:	mov	r3, r9
   11f24:	mov	r0, r6
   11f28:	mov	r1, r7
   11f2c:	adc	r5, r5, #0
   11f30:	bl	18b0c <__assert_fail@plt+0x7648>
   11f34:	cmp	r9, r7
   11f38:	cmpeq	r8, r6
   11f3c:	bls	11f10 <__assert_fail@plt+0xa4c>
   11f40:	ldr	r3, [pc, #-868]	; 11be4 <__assert_fail@plt+0x720>
   11f44:	mov	r9, sl
   11f48:	adds	r6, r4, r9
   11f4c:	ldr	r2, [r3, #4]
   11f50:	ldr	r3, [pc, #-904]	; 11bd0 <__assert_fail@plt+0x70c>
   11f54:	mov	r4, #0
   11f58:	adc	r7, r5, #0
   11f5c:	cmp	r2, r4
   11f60:	ldr	sl, [sp, #40]	; 0x28
   11f64:	ldr	r8, [sp, #64]	; 0x40
   11f68:	strb	r4, [r3]
   11f6c:	beq	11c78 <__assert_fail@plt+0x7b4>
   11f70:	mov	r3, #0
   11f74:	cmp	r7, r3
   11f78:	cmpeq	r6, r2
   11f7c:	bhi	13284 <__assert_fail@plt+0x1dc0>
   11f80:	ldr	r2, [pc, #-952]	; 11bd0 <__assert_fail@plt+0x70c>
   11f84:	mov	r3, #0
   11f88:	strb	r3, [r2]
   11f8c:	b	11c90 <__assert_fail@plt+0x7cc>
   11f90:	ldr	r3, [pc, #-972]	; 11bcc <__assert_fail@plt+0x708>
   11f94:	mov	r2, #10
   11f98:	str	r3, [sp]
   11f9c:	add	r3, sp, #144	; 0x90
   11fa0:	bl	177fc <__assert_fail@plt+0x6338>
   11fa4:	cmp	r0, #0
   11fa8:	bne	11e94 <__assert_fail@plt+0x9d0>
   11fac:	ldrd	r4, [sp, #24]
   11fb0:	ldrd	r2, [sp, #144]	; 0x90
   11fb4:	mvn	r1, r5
   11fb8:	cmp	r1, r3
   11fbc:	mvn	r0, r4
   11fc0:	cmpeq	r0, r2
   11fc4:	movcs	r1, #1
   11fc8:	movcc	r1, #0
   11fcc:	cmp	r5, r3
   11fd0:	cmpeq	r4, r2
   11fd4:	movls	r1, #0
   11fd8:	andhi	r1, r1, #1
   11fdc:	cmp	r1, #0
   11fe0:	beq	11e94 <__assert_fail@plt+0x9d0>
   11fe4:	adds	ip, r4, r2
   11fe8:	adc	r3, r5, r3
   11fec:	str	ip, [sp, #96]	; 0x60
   11ff0:	str	r3, [sp, #100]	; 0x64
   11ff4:	b	11e9c <__assert_fail@plt+0x9d8>
   11ff8:	mov	r3, #1
   11ffc:	str	r3, [sp]
   12000:	mov	r2, #0
   12004:	mov	r3, #0
   12008:	mov	r0, #0
   1200c:	bl	11278 <lseek64@plt>
   12010:	cmp	r0, #0
   12014:	sbcs	r3, r1, #0
   12018:	mov	r8, r0
   1201c:	mov	r9, r1
   12020:	blt	13340 <__assert_fail@plt+0x1e7c>
   12024:	ldr	sl, [sp, #72]	; 0x48
   12028:	strd	r8, [sp, #40]	; 0x28
   1202c:	mov	r6, #0
   12030:	mov	r9, fp
   12034:	mov	r7, #0
   12038:	mov	r4, sl
   1203c:	mov	r5, #0
   12040:	ldr	fp, [sp, #80]	; 0x50
   12044:	b	12064 <__assert_fail@plt+0xba0>
   12048:	cmn	r0, #1
   1204c:	beq	12ea8 <__assert_fail@plt+0x19e4>
   12050:	adds	r6, r6, r0
   12054:	adc	r7, r7, #0
   12058:	cmp	r6, r4
   1205c:	sbcs	r3, r7, r5
   12060:	bge	12db0 <__assert_fail@plt+0x18ec>
   12064:	sub	r2, sl, r6
   12068:	add	r1, fp, r6
   1206c:	mov	r0, #0
   12070:	bl	16db0 <__assert_fail@plt+0x58ec>
   12074:	cmp	r0, #0
   12078:	bne	12048 <__assert_fail@plt+0xb84>
   1207c:	mov	fp, r9
   12080:	ldr	r8, [sp, #72]	; 0x48
   12084:	mov	r9, #0
   12088:	cmp	r6, r8
   1208c:	sbcs	r3, r7, r9
   12090:	ldrd	r2, [sp, #24]
   12094:	movlt	r8, r6
   12098:	mov	sl, r8
   1209c:	cmp	r2, #0
   120a0:	sbcs	r3, r3, #0
   120a4:	blt	132d8 <__assert_fail@plt+0x1e14>
   120a8:	ldrd	r0, [sp, #24]
   120ac:	mov	r2, r6
   120b0:	mov	r3, r7
   120b4:	cmp	r7, r1
   120b8:	cmpeq	r6, r0
   120bc:	strd	r2, [sp, #40]	; 0x28
   120c0:	strdcc	r0, [sp, #40]	; 0x28
   120c4:	b	11dc8 <__assert_fail@plt+0x904>
   120c8:	mov	r4, #0
   120cc:	mov	r5, #0
   120d0:	mov	r9, #1
   120d4:	ldr	r2, [sp, #72]	; 0x48
   120d8:	ldr	r1, [sp, #80]	; 0x50
   120dc:	mov	r0, #0
   120e0:	bl	16db0 <__assert_fail@plt+0x58ec>
   120e4:	cmn	r0, #1
   120e8:	mov	fp, r0
   120ec:	beq	12d94 <__assert_fail@plt+0x18d0>
   120f0:	ldr	r3, [pc, #-1320]	; 11bd0 <__assert_fail@plt+0x70c>
   120f4:	ldr	r7, [r3, #12]
   120f8:	ldr	r3, [sp, #80]	; 0x50
   120fc:	add	r6, r3, r0
   12100:	mov	r8, r3
   12104:	mov	sl, r3
   12108:	strb	r7, [r3, r0]
   1210c:	sub	r2, r6, sl
   12110:	add	r2, r2, #1
   12114:	mov	r0, sl
   12118:	mov	r1, r7
   1211c:	bl	113ec <memchr@plt>
   12120:	cmp	r6, r0
   12124:	beq	12aa8 <__assert_fail@plt+0x15e4>
   12128:	ldrd	r2, [sp, #24]
   1212c:	adds	r4, r4, #1
   12130:	adc	r5, r5, #0
   12134:	cmp	r3, r5
   12138:	cmpeq	r2, r4
   1213c:	add	sl, r0, #1
   12140:	bhi	1210c <__assert_fail@plt+0xc48>
   12144:	mov	r0, r9
   12148:	sub	r2, sl, r8
   1214c:	mov	r1, r8
   12150:	bl	140d8 <__assert_fail@plt+0x2c14>
   12154:	ldr	r3, [pc, #-1420]	; 11bd0 <__assert_fail@plt+0x70c>
   12158:	mov	r8, sl
   1215c:	mov	r4, #0
   12160:	ldr	r7, [r3, #12]
   12164:	mov	r5, #0
   12168:	mov	r9, #1
   1216c:	b	1210c <__assert_fail@plt+0xc48>
   12170:	ldr	r3, [sp, #72]	; 0x48
   12174:	mov	r8, #0
   12178:	mov	r9, #0
   1217c:	mov	fp, #0
   12180:	mvn	r3, r3
   12184:	str	fp, [sp, #48]	; 0x30
   12188:	str	fp, [sp, #60]	; 0x3c
   1218c:	str	fp, [sp, #40]	; 0x28
   12190:	str	r3, [sp, #76]	; 0x4c
   12194:	ldr	r2, [sp, #72]	; 0x48
   12198:	ldr	r1, [sp, #80]	; 0x50
   1219c:	mov	r0, #0
   121a0:	bl	16db0 <__assert_fail@plt+0x58ec>
   121a4:	cmn	r0, #1
   121a8:	mov	r7, r0
   121ac:	beq	12d94 <__assert_fail@plt+0x18d0>
   121b0:	cmp	r0, #0
   121b4:	beq	12b14 <__assert_fail@plt+0x1650>
   121b8:	ldr	r6, [sp, #80]	; 0x50
   121bc:	b	1224c <__assert_fail@plt+0xd88>
   121c0:	sub	r4, r4, fp
   121c4:	sub	r4, r4, r8
   121c8:	mov	r2, r4
   121cc:	mov	r0, r6
   121d0:	bl	11374 <memrchr@plt>
   121d4:	sub	sl, r4, #1
   121d8:	cmp	fp, #0
   121dc:	add	sl, r6, sl
   121e0:	mov	r5, r0
   121e4:	beq	122ac <__assert_fail@plt+0xde8>
   121e8:	orrs	r3, r8, r9
   121ec:	moveq	r0, #1
   121f0:	movne	r0, #0
   121f4:	cmp	r5, #0
   121f8:	moveq	r2, r0
   121fc:	movne	r2, #1
   12200:	cmp	r2, #0
   12204:	bne	129c0 <__assert_fail@plt+0x14fc>
   12208:	ldr	r3, [sp, #48]	; 0x30
   1220c:	cmp	r3, #0
   12210:	bne	13314 <__assert_fail@plt+0x1e50>
   12214:	orrs	r3, r8, r9
   12218:	moveq	r0, #1
   1221c:	movne	r0, #0
   12220:	cmp	sl, #0
   12224:	beq	12a24 <__assert_fail@plt+0x1560>
   12228:	mov	r1, r6
   1222c:	mov	r2, r4
   12230:	bl	140d8 <__assert_fail@plt+0x2c14>
   12234:	sub	r7, r7, r4
   12238:	add	r6, r6, r4
   1223c:	mov	r8, #0
   12240:	mov	r9, #0
   12244:	cmp	r7, #0
   12248:	beq	12194 <__assert_fail@plt+0xcd0>
   1224c:	ldrd	r4, [sp, #24]
   12250:	subs	r2, r4, r8
   12254:	sbc	r1, r5, r9
   12258:	subs	r3, r2, fp
   1225c:	str	r3, [sp, #32]
   12260:	mov	r3, #0
   12264:	sbc	r3, r1, r3
   12268:	str	r3, [sp, #36]	; 0x24
   1226c:	ldrd	r0, [sp, #32]
   12270:	mov	r3, #0
   12274:	mov	r2, r7
   12278:	cmp	r1, r3
   1227c:	strd	r2, [sp, #64]	; 0x40
   12280:	ldr	r3, [pc, #-1720]	; 11bd0 <__assert_fail@plt+0x70c>
   12284:	cmpeq	r0, r7
   12288:	ldr	r1, [r3, #12]
   1228c:	bls	121c0 <__assert_fail@plt+0xcfc>
   12290:	mov	r0, r6
   12294:	bl	11374 <memrchr@plt>
   12298:	mov	sl, #0
   1229c:	cmp	fp, #0
   122a0:	mov	r4, sl
   122a4:	mov	r5, r0
   122a8:	bne	121e8 <__assert_fail@plt+0xd24>
   122ac:	cmp	r5, #0
   122b0:	beq	129f0 <__assert_fail@plt+0x152c>
   122b4:	sub	r5, r5, r6
   122b8:	add	r5, r5, #1
   122bc:	orrs	r3, r8, r9
   122c0:	moveq	r0, #1
   122c4:	movne	r0, #0
   122c8:	mov	r1, r6
   122cc:	adds	r8, r8, r5
   122d0:	mov	r2, r5
   122d4:	adc	r9, r9, #0
   122d8:	bl	140d8 <__assert_fail@plt+0x2c14>
   122dc:	cmp	sl, #0
   122e0:	sub	r7, r7, r5
   122e4:	add	r6, r6, r5
   122e8:	beq	129f8 <__assert_fail@plt+0x1534>
   122ec:	subs	r4, r4, r5
   122f0:	moveq	r3, #0
   122f4:	movne	r3, #1
   122f8:	str	r3, [sp, #48]	; 0x30
   122fc:	moveq	r3, #1
   12300:	streq	r3, [sp, #48]	; 0x30
   12304:	moveq	fp, #0
   12308:	beq	12368 <__assert_fail@plt+0xea4>
   1230c:	mov	fp, #0
   12310:	ldr	r3, [sp, #60]	; 0x3c
   12314:	sub	r2, r3, fp
   12318:	cmp	r2, r4
   1231c:	bcs	12348 <__assert_fail@plt+0xe84>
   12320:	ldr	r2, [sp, #76]	; 0x4c
   12324:	cmp	r2, r3
   12328:	bcc	13030 <__assert_fail@plt+0x1b6c>
   1232c:	ldr	r2, [sp, #72]	; 0x48
   12330:	ldr	r0, [sp, #40]	; 0x28
   12334:	add	r3, r3, r2
   12338:	mov	r1, r3
   1233c:	str	r3, [sp, #60]	; 0x3c
   12340:	bl	17478 <__assert_fail@plt+0x5fb4>
   12344:	str	r0, [sp, #40]	; 0x28
   12348:	ldr	r3, [sp, #40]	; 0x28
   1234c:	mov	r1, r6
   12350:	add	r0, r3, fp
   12354:	mov	r2, r4
   12358:	bl	111c4 <memcpy@plt>
   1235c:	sub	r7, r7, r4
   12360:	add	r6, r6, r4
   12364:	add	fp, fp, r4
   12368:	cmp	sl, #0
   1236c:	movne	r3, #0
   12370:	strne	r3, [sp, #48]	; 0x30
   12374:	movne	r8, #0
   12378:	movne	r9, #0
   1237c:	b	12244 <__assert_fail@plt+0xd80>
   12380:	ldrd	r2, [sp, #48]	; 0x30
   12384:	orrs	r3, r2, r3
   12388:	bne	12410 <__assert_fail@plt+0xf4c>
   1238c:	ldrd	r0, [sp, #24]
   12390:	mov	r3, #0
   12394:	mvn	r2, #0
   12398:	cmp	r1, r3
   1239c:	cmpeq	r0, r2
   123a0:	bhi	13030 <__assert_fail@plt+0x1b6c>
   123a4:	mov	r3, r0
   123a8:	lsrs	r3, r3, #28
   123ac:	lsl	r3, r0, #4
   123b0:	movne	r7, #1
   123b4:	moveq	r7, #0
   123b8:	cmp	r3, #0
   123bc:	mov	r4, r0
   123c0:	blt	13030 <__assert_fail@plt+0x1b6c>
   123c4:	cmp	r7, #0
   123c8:	bne	13030 <__assert_fail@plt+0x1b6c>
   123cc:	mov	r0, r3
   123d0:	bl	1741c <__assert_fail@plt+0x5f58>
   123d4:	mov	r8, r7
   123d8:	mvn	r5, #0
   123dc:	mov	r6, r0
   123e0:	str	r0, [sp, #76]	; 0x4c
   123e4:	bl	134e8 <__assert_fail@plt+0x2024>
   123e8:	ldr	r3, [pc, #-2060]	; 11be4 <__assert_fail@plt+0x720>
   123ec:	add	r7, r7, #1
   123f0:	ldr	r0, [r3]
   123f4:	bl	17648 <__assert_fail@plt+0x6184>
   123f8:	cmp	r4, r7
   123fc:	stmib	r6, {r5, r8}
   12400:	str	r8, [r6, #12]
   12404:	add	r6, r6, #16
   12408:	str	r0, [r6, #-16]
   1240c:	bne	123e4 <__assert_fail@plt+0xf20>
   12410:	mov	r9, #0
   12414:	mov	r2, #1
   12418:	mov	r3, #0
   1241c:	mov	r7, r9
   12420:	str	r9, [sp, #40]	; 0x28
   12424:	str	r9, [sp, #84]	; 0x54
   12428:	strd	r2, [sp, #32]
   1242c:	ldr	r2, [sp, #72]	; 0x48
   12430:	ldr	r1, [sp, #80]	; 0x50
   12434:	mov	r0, #0
   12438:	bl	16db0 <__assert_fail@plt+0x58ec>
   1243c:	cmn	r0, #1
   12440:	beq	12d94 <__assert_fail@plt+0x18d0>
   12444:	cmp	r0, #0
   12448:	beq	12b44 <__assert_fail@plt+0x1680>
   1244c:	ldr	r3, [sp, #80]	; 0x50
   12450:	add	r8, r3, r0
   12454:	cmp	r3, r8
   12458:	beq	1242c <__assert_fail@plt+0xf68>
   1245c:	mov	r4, r3
   12460:	b	124b0 <__assert_fail@plt+0xfec>
   12464:	ldrd	r0, [sp, #32]
   12468:	cmp	r3, r1
   1246c:	cmpeq	r2, r0
   12470:	beq	12904 <__assert_fail@plt+0x1440>
   12474:	cmp	r5, #0
   12478:	beq	124a4 <__assert_fail@plt+0xfe0>
   1247c:	ldrd	r0, [sp, #24]
   12480:	ldrd	r2, [sp, #32]
   12484:	cmp	r1, r3
   12488:	cmpeq	r0, r2
   1248c:	beq	12a40 <__assert_fail@plt+0x157c>
   12490:	adds	r3, r2, #1
   12494:	str	r3, [sp, #32]
   12498:	ldr	r3, [sp, #36]	; 0x24
   1249c:	adc	r3, r3, #0
   124a0:	str	r3, [sp, #36]	; 0x24
   124a4:	cmp	r8, r6
   124a8:	mov	r4, r6
   124ac:	beq	1242c <__assert_fail@plt+0xf68>
   124b0:	ldr	r3, [pc, #-2280]	; 11bd0 <__assert_fail@plt+0x70c>
   124b4:	sub	fp, r8, r4
   124b8:	mov	r2, fp
   124bc:	ldr	r1, [r3, #12]
   124c0:	mov	r0, r4
   124c4:	bl	113ec <memchr@plt>
   124c8:	ldrd	r2, [sp, #48]	; 0x30
   124cc:	subs	r5, r0, #0
   124d0:	addne	r6, r5, #1
   124d4:	subne	fp, r6, r4
   124d8:	movne	r5, #1
   124dc:	moveq	r6, r8
   124e0:	orrs	r1, r2, r3
   124e4:	bne	12464 <__assert_fail@plt+0xfa0>
   124e8:	ldr	sl, [sp, #76]	; 0x4c
   124ec:	ldr	r2, [sp, #24]
   124f0:	mov	r1, r9
   124f4:	mov	r0, sl
   124f8:	bl	13c54 <__assert_fail@plt+0x2790>
   124fc:	ldr	r3, [pc, #-2336]	; 11be4 <__assert_fail@plt+0x720>
   12500:	add	sl, sl, r9, lsl #4
   12504:	ldrb	r2, [r3, #304]	; 0x130
   12508:	str	r2, [sp, #64]	; 0x40
   1250c:	orr	r7, r7, r0
   12510:	bl	1138c <__errno_location@plt>
   12514:	ldr	r2, [sp, #64]	; 0x40
   12518:	uxtb	r7, r7
   1251c:	cmp	r2, #0
   12520:	str	r0, [sp, #60]	; 0x3c
   12524:	bne	1296c <__assert_fail@plt+0x14a8>
   12528:	ldr	r3, [sl, #8]
   1252c:	mov	r1, fp
   12530:	mov	r0, r4
   12534:	mov	r2, #1
   12538:	bl	111f4 <fwrite_unlocked@plt>
   1253c:	ldr	r3, [sp, #60]	; 0x3c
   12540:	cmp	r0, #1
   12544:	bne	12988 <__assert_fail@plt+0x14c4>
   12548:	ldr	r2, [pc, #-2412]	; 11be4 <__assert_fail@plt+0x720>
   1254c:	ldr	r3, [r3]
   12550:	ldr	r2, [r2, #40]	; 0x28
   12554:	sub	r1, r3, #32
   12558:	cmp	r2, #0
   1255c:	clz	r1, r1
   12560:	lsr	r1, r1, #5
   12564:	moveq	r1, #0
   12568:	ldr	r3, [sp, #40]	; 0x28
   1256c:	cmp	r1, #0
   12570:	moveq	r3, #1
   12574:	str	r3, [sp, #40]	; 0x28
   12578:	cmp	r7, #0
   1257c:	bne	12a50 <__assert_fail@plt+0x158c>
   12580:	cmp	r5, #0
   12584:	beq	124a4 <__assert_fail@plt+0xfe0>
   12588:	ldrd	r0, [sp, #24]
   1258c:	mov	r3, #0
   12590:	add	r9, r9, #1
   12594:	cmp	r1, r3
   12598:	cmpeq	r0, r9
   1259c:	bne	124a4 <__assert_fail@plt+0xfe0>
   125a0:	ldr	r3, [sp, #40]	; 0x28
   125a4:	cmp	r3, #0
   125a8:	beq	12bf0 <__assert_fail@plt+0x172c>
   125ac:	ldr	r3, [sp, #40]	; 0x28
   125b0:	str	r3, [sp, #84]	; 0x54
   125b4:	mov	r3, #0
   125b8:	str	r3, [sp, #40]	; 0x28
   125bc:	mov	r9, r3
   125c0:	b	124a4 <__assert_fail@plt+0xfe0>
   125c4:	ldrd	r2, [sp, #24]
   125c8:	ldrd	r0, [sp, #48]	; 0x30
   125cc:	cmp	r3, r1
   125d0:	cmpeq	r2, r0
   125d4:	bcc	13130 <__assert_fail@plt+0x1c6c>
   125d8:	ldrd	r0, [sp, #40]	; 0x28
   125dc:	cmp	r3, r1
   125e0:	cmpeq	r2, r0
   125e4:	bhi	13130 <__assert_fail@plt+0x1c6c>
   125e8:	ldrd	r2, [sp, #24]
   125ec:	ldrd	r0, [sp, #40]	; 0x28
   125f0:	bl	18b0c <__assert_fail@plt+0x7648>
   125f4:	ldrd	r4, [sp, #48]	; 0x30
   125f8:	cmp	r5, #0
   125fc:	cmpeq	r4, #1
   12600:	mov	r3, r1
   12604:	mov	r6, r0
   12608:	mov	fp, r1
   1260c:	bls	12eec <__assert_fail@plt+0x1a28>
   12610:	subs	r2, r4, #1
   12614:	str	r2, [sp, #104]	; 0x68
   12618:	mov	r4, sl
   1261c:	sbc	r2, r5, #0
   12620:	mov	r5, #0
   12624:	str	r2, [sp, #108]	; 0x6c
   12628:	strd	r4, [sp, #32]
   1262c:	ldrd	r4, [sp, #104]	; 0x68
   12630:	mul	r2, r0, r5
   12634:	umull	r0, r1, r0, r4
   12638:	mla	r3, r4, r3, r2
   1263c:	subs	r2, r0, #1
   12640:	add	r1, r3, r1
   12644:	sbc	r3, r1, #0
   12648:	mov	r5, #0
   1264c:	strd	r2, [sp, #120]	; 0x78
   12650:	ldrd	r8, [sp, #120]	; 0x78
   12654:	cmp	r8, sl
   12658:	sbcs	ip, r9, r5
   1265c:	bge	12f58 <__assert_fail@plt+0x1a94>
   12660:	ldr	r3, [sp, #80]	; 0x50
   12664:	sub	sl, sl, r8
   12668:	mov	r2, sl
   1266c:	add	r1, r3, r8
   12670:	mov	r0, r3
   12674:	bl	111a0 <memmove@plt>
   12678:	mov	r0, sl
   1267c:	str	fp, [sp, #64]	; 0x40
   12680:	ldrd	r4, [sp, #104]	; 0x68
   12684:	ldrd	sl, [sp, #120]	; 0x78
   12688:	mov	r3, #0
   1268c:	str	r3, [sp, #112]	; 0x70
   12690:	mov	r3, #1
   12694:	str	r3, [sp, #96]	; 0x60
   12698:	str	r6, [sp, #60]	; 0x3c
   1269c:	ldrd	r2, [sp, #40]	; 0x28
   126a0:	cmp	r8, r2
   126a4:	sbcs	r3, r9, r3
   126a8:	bge	13034 <__assert_fail@plt+0x1b70>
   126ac:	cmn	r0, #1
   126b0:	beq	12fec <__assert_fail@plt+0x1b28>
   126b4:	cmp	r0, #0
   126b8:	beq	13034 <__assert_fail@plt+0x1b70>
   126bc:	ldrd	r2, [sp, #40]	; 0x28
   126c0:	ldr	r6, [sp, #80]	; 0x50
   126c4:	subs	r1, r2, r8
   126c8:	sbc	r3, r3, r9
   126cc:	str	r1, [sp, #128]	; 0x80
   126d0:	str	r3, [sp, #132]	; 0x84
   126d4:	ldrd	r2, [sp, #128]	; 0x80
   126d8:	mov	r1, #0
   126dc:	cmp	r0, r2
   126e0:	sbcs	r3, r1, r3
   126e4:	strdlt	r0, [sp, #128]	; 0x80
   126e8:	ldrd	r2, [sp, #128]	; 0x80
   126ec:	mov	r3, #0
   126f0:	str	r3, [sp, #112]	; 0x70
   126f4:	str	r2, [sp, #76]	; 0x4c
   126f8:	add	r7, r6, r2
   126fc:	ldrd	r2, [sp, #48]	; 0x30
   12700:	orr	r3, r2, r3
   12704:	str	r3, [sp, #32]
   12708:	cmp	r7, r6
   1270c:	mvn	r0, #0
   12710:	beq	1269c <__assert_fail@plt+0x11d8>
   12714:	subs	r3, sl, r8
   12718:	str	r3, [sp, #88]	; 0x58
   1271c:	sbc	r3, fp, r9
   12720:	str	r3, [sp, #92]	; 0x5c
   12724:	ldrd	r2, [sp, #88]	; 0x58
   12728:	cmp	r2, #0
   1272c:	sbcs	r3, r3, #0
   12730:	movlt	r2, #0
   12734:	movlt	r3, #0
   12738:	strdlt	r2, [sp, #88]	; 0x58
   1273c:	ldrd	r0, [sp, #88]	; 0x58
   12740:	ldr	r2, [sp, #76]	; 0x4c
   12744:	mov	r3, #0
   12748:	cmp	r2, r0
   1274c:	sbcs	ip, r3, r1
   12750:	ldr	r3, [sp, #76]	; 0x4c
   12754:	movlt	r0, r2
   12758:	sub	r2, r3, r0
   1275c:	ldr	r3, [pc, #-2964]	; 11bd0 <__assert_fail@plt+0x70c>
   12760:	add	r0, r6, r0
   12764:	ldr	r1, [r3, #12]
   12768:	bl	113ec <memchr@plt>
   1276c:	subs	r3, r0, #0
   12770:	ldrd	r0, [sp, #48]	; 0x30
   12774:	movne	r2, #1
   12778:	addne	r3, r3, #1
   1277c:	strne	r2, [sp, #104]	; 0x68
   12780:	streq	r3, [sp, #104]	; 0x68
   12784:	moveq	r3, r7
   12788:	cmp	r5, r1
   1278c:	sub	r2, r3, r6
   12790:	cmpeq	r4, r0
   12794:	str	r2, [sp, #84]	; 0x54
   12798:	beq	12bcc <__assert_fail@plt+0x1708>
   1279c:	ldrd	r0, [sp, #48]	; 0x30
   127a0:	orrs	r2, r0, r1
   127a4:	beq	12b28 <__assert_fail@plt+0x1664>
   127a8:	ldr	r2, [sp, #84]	; 0x54
   127ac:	ldr	r6, [sp, #104]	; 0x68
   127b0:	adds	r8, r8, r2
   127b4:	mov	r2, r3
   127b8:	adc	r9, r9, #0
   127bc:	mov	r3, r6
   127c0:	mov	r6, r2
   127c4:	cmp	sl, r8
   127c8:	sbcs	r2, fp, r9
   127cc:	movge	r2, r3
   127d0:	orrlt	r2, r3, #1
   127d4:	tst	r2, #255	; 0xff
   127d8:	beq	12ae0 <__assert_fail@plt+0x161c>
   127dc:	eor	r2, r3, #1
   127e0:	cmp	r7, r6
   127e4:	movne	r2, #0
   127e8:	andeq	r2, r2, #1
   127ec:	cmp	r2, #0
   127f0:	bne	12b0c <__assert_fail@plt+0x1648>
   127f4:	ldrd	r0, [sp, #48]	; 0x30
   127f8:	adds	r4, r4, #1
   127fc:	adc	r5, r5, #0
   12800:	cmp	r5, r1
   12804:	ldr	r1, [sp, #32]
   12808:	cmpeq	r4, r0
   1280c:	movhi	r2, #1
   12810:	movls	r2, #0
   12814:	cmp	r1, #0
   12818:	moveq	r2, #0
   1281c:	cmp	r2, #0
   12820:	bne	128b8 <__assert_fail@plt+0x13f4>
   12824:	ldrd	r0, [sp, #24]
   12828:	cmp	r1, r5
   1282c:	cmpeq	r0, r4
   12830:	beq	12ad0 <__assert_fail@plt+0x160c>
   12834:	ldr	r2, [sp, #60]	; 0x3c
   12838:	adds	sl, sl, r2
   1283c:	ldr	r2, [sp, #64]	; 0x40
   12840:	adc	fp, fp, r2
   12844:	cmp	sl, r8
   12848:	sbcs	r2, fp, r9
   1284c:	movge	r3, #0
   12850:	bge	127c4 <__assert_fail@plt+0x1300>
   12854:	ldrd	r0, [sp, #48]	; 0x30
   12858:	orrs	r2, r0, r1
   1285c:	bne	127c4 <__assert_fail@plt+0x1300>
   12860:	mov	r2, #0
   12864:	mov	r1, r2
   12868:	mov	r0, #1
   1286c:	str	r3, [sp, #96]	; 0x60
   12870:	bl	140d8 <__assert_fail@plt+0x2c14>
   12874:	ldr	r3, [sp, #96]	; 0x60
   12878:	b	127c4 <__assert_fail@plt+0x1300>
   1287c:	ldrd	r2, [sp, #48]	; 0x30
   12880:	orrs	r3, r2, r3
   12884:	bne	12bf8 <__assert_fail@plt+0x1734>
   12888:	ldrd	r4, [sp, #24]
   1288c:	ldrd	r0, [sp, #40]	; 0x28
   12890:	mov	r2, r4
   12894:	mov	r3, r5
   12898:	bl	18b0c <__assert_fail@plt+0x7648>
   1289c:	mov	r2, r4
   128a0:	mov	r3, r5
   128a4:	str	sl, [sp]
   128a8:	strd	r2, [sp, #8]
   128ac:	ldr	r3, [sp, #72]	; 0x48
   128b0:	ldr	r2, [sp, #80]	; 0x50
   128b4:	bl	141d4 <__assert_fail@plt+0x2d10>
   128b8:	mov	r0, #0
   128bc:	bl	114ac <close@plt>
   128c0:	subs	r4, r0, #0
   128c4:	bne	12d94 <__assert_fail@plt+0x18d0>
   128c8:	ldr	r3, [pc, #-3328]	; 11bd0 <__assert_fail@plt+0x70c>
   128cc:	ldr	r1, [r3, #8]
   128d0:	ldr	r3, [pc, #-3316]	; 11be4 <__assert_fail@plt+0x720>
   128d4:	mov	r2, r3
   128d8:	ldr	r3, [r3]
   128dc:	ldr	r2, [r2, #288]	; 0x120
   128e0:	bl	13df0 <__assert_fail@plt+0x292c>
   128e4:	ldr	r3, [pc, #-3352]	; 11bd4 <__assert_fail@plt+0x710>
   128e8:	ldr	r2, [sp, #316]	; 0x13c
   128ec:	mov	r0, r4
   128f0:	ldr	r3, [r3]
   128f4:	cmp	r2, r3
   128f8:	bne	13358 <__assert_fail@plt+0x1e94>
   128fc:	add	sp, sp, #324	; 0x144
   12900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12904:	ldr	r3, [pc, #-3368]	; 11be4 <__assert_fail@plt+0x720>
   12908:	ldrb	sl, [r3, #304]	; 0x130
   1290c:	cmp	sl, #0
   12910:	bne	12a70 <__assert_fail@plt+0x15ac>
   12914:	ldr	r3, [pc, #-3396]	; 11bd8 <__assert_fail@plt+0x714>
   12918:	mov	r1, fp
   1291c:	mov	r0, r4
   12920:	ldr	r3, [r3]
   12924:	mov	r2, #1
   12928:	bl	111f4 <fwrite_unlocked@plt>
   1292c:	cmp	r0, #1
   12930:	beq	12474 <__assert_fail@plt+0xfb0>
   12934:	ldr	r3, [pc, #-3428]	; 11bd8 <__assert_fail@plt+0x714>
   12938:	ldr	r0, [r3]
   1293c:	bl	11470 <clearerr_unlocked@plt>
   12940:	bl	1138c <__errno_location@plt>
   12944:	mov	r2, #5
   12948:	ldr	r1, [pc, #-3444]	; 11bdc <__assert_fail@plt+0x718>
   1294c:	ldr	r4, [r0]
   12950:	mov	r0, #0
   12954:	bl	1120c <dcgettext@plt>
   12958:	mov	r3, r0
   1295c:	mov	r1, r4
   12960:	ldr	r2, [pc, #-3464]	; 11be0 <__assert_fail@plt+0x71c>
   12964:	mov	r0, #1
   12968:	bl	112c0 <error@plt>
   1296c:	mov	r1, r4
   12970:	mov	r2, fp
   12974:	ldr	r0, [sl, #4]
   12978:	bl	14a60 <__assert_fail@plt+0x359c>
   1297c:	ldr	r3, [sp, #60]	; 0x3c
   12980:	cmp	r0, fp
   12984:	beq	12548 <__assert_fail@plt+0x1084>
   12988:	ldr	r4, [r3]
   1298c:	ldr	r3, [pc, #-3504]	; 11be4 <__assert_fail@plt+0x720>
   12990:	sub	r0, r4, #32
   12994:	clz	r0, r0
   12998:	ldr	r3, [r3, #40]	; 0x28
   1299c:	lsr	r0, r0, #5
   129a0:	cmp	r3, #0
   129a4:	moveq	r0, #0
   129a8:	cmp	r0, #0
   129ac:	bne	12578 <__assert_fail@plt+0x10b4>
   129b0:	ldr	r2, [sl]
   129b4:	mov	r1, #3
   129b8:	bl	16bcc <__assert_fail@plt+0x5708>
   129bc:	b	12958 <__assert_fail@plt+0x1494>
   129c0:	mov	r2, fp
   129c4:	ldr	r1, [sp, #40]	; 0x28
   129c8:	bl	140d8 <__assert_fail@plt+0x2c14>
   129cc:	ldr	r3, [sp, #72]	; 0x48
   129d0:	adds	r8, r8, fp
   129d4:	adc	r9, r9, #0
   129d8:	cmp	fp, r3
   129dc:	bhi	12a8c <__assert_fail@plt+0x15c8>
   129e0:	ldr	r3, [sp, #72]	; 0x48
   129e4:	cmp	r5, #0
   129e8:	str	r3, [sp, #60]	; 0x3c
   129ec:	bne	122b4 <__assert_fail@plt+0xdf0>
   129f0:	mov	fp, r5
   129f4:	b	12208 <__assert_fail@plt+0xd44>
   129f8:	adds	r3, r7, #0
   129fc:	movne	r3, #1
   12a00:	cmp	r3, #0
   12a04:	str	r3, [sp, #48]	; 0x30
   12a08:	moveq	fp, r3
   12a0c:	moveq	r3, #1
   12a10:	streq	r3, [sp, #48]	; 0x30
   12a14:	beq	12244 <__assert_fail@plt+0xd80>
   12a18:	mov	r4, r7
   12a1c:	mov	fp, sl
   12a20:	b	12310 <__assert_fail@plt+0xe4c>
   12a24:	mov	r2, r7
   12a28:	mov	r1, r6
   12a2c:	bl	140d8 <__assert_fail@plt+0x2c14>
   12a30:	ldrd	r2, [sp, #64]	; 0x40
   12a34:	adds	r8, r8, r2
   12a38:	adc	r9, r9, r3
   12a3c:	b	12194 <__assert_fail@plt+0xcd0>
   12a40:	mov	r2, #1
   12a44:	mov	r3, #0
   12a48:	strd	r2, [sp, #32]
   12a4c:	b	124a4 <__assert_fail@plt+0xfe0>
   12a50:	ldr	r0, [sl, #8]
   12a54:	bl	18204 <__assert_fail@plt+0x6d40>
   12a58:	cmp	r0, #0
   12a5c:	bne	130d4 <__assert_fail@plt+0x1c10>
   12a60:	mvn	r3, #1
   12a64:	str	r0, [sl, #8]
   12a68:	str	r3, [sl, #4]
   12a6c:	b	12580 <__assert_fail@plt+0x10bc>
   12a70:	mov	r1, r4
   12a74:	mov	r2, fp
   12a78:	mov	r0, #1
   12a7c:	bl	14a60 <__assert_fail@plt+0x359c>
   12a80:	cmp	r0, fp
   12a84:	beq	12474 <__assert_fail@plt+0xfb0>
   12a88:	b	12940 <__assert_fail@plt+0x147c>
   12a8c:	ldr	r0, [sp, #40]	; 0x28
   12a90:	mov	r1, r3
   12a94:	mov	fp, r3
   12a98:	bl	17478 <__assert_fail@plt+0x5fb4>
   12a9c:	str	fp, [sp, #60]	; 0x3c
   12aa0:	str	r0, [sp, #40]	; 0x28
   12aa4:	b	122ac <__assert_fail@plt+0xde8>
   12aa8:	cmp	r6, r8
   12aac:	beq	12ac4 <__assert_fail@plt+0x1600>
   12ab0:	mov	r0, r9
   12ab4:	sub	r2, r6, r8
   12ab8:	mov	r1, r8
   12abc:	bl	140d8 <__assert_fail@plt+0x2c14>
   12ac0:	mov	r9, #0
   12ac4:	cmp	fp, #0
   12ac8:	bne	120d4 <__assert_fail@plt+0xc10>
   12acc:	b	128b8 <__assert_fail@plt+0x13f4>
   12ad0:	ldrd	r0, [sp, #40]	; 0x28
   12ad4:	subs	sl, r0, #1
   12ad8:	sbc	fp, r1, #0
   12adc:	b	12844 <__assert_fail@plt+0x1380>
   12ae0:	ldr	r2, [sp, #112]	; 0x70
   12ae4:	mov	r3, r6
   12ae8:	ldr	r1, [sp, #76]	; 0x4c
   12aec:	ldr	r0, [sp, #84]	; 0x54
   12af0:	mov	r6, r3
   12af4:	ldr	r3, [sp, #104]	; 0x68
   12af8:	sub	r1, r1, r0
   12afc:	str	r1, [sp, #76]	; 0x4c
   12b00:	str	r2, [sp, #112]	; 0x70
   12b04:	str	r3, [sp, #96]	; 0x60
   12b08:	b	12708 <__assert_fail@plt+0x1244>
   12b0c:	mov	r3, r6
   12b10:	b	12ae8 <__assert_fail@plt+0x1624>
   12b14:	cmp	fp, #0
   12b18:	bne	12f3c <__assert_fail@plt+0x1a78>
   12b1c:	ldr	r0, [sp, #40]	; 0x28
   12b20:	bl	111ac <free@plt>
   12b24:	b	128b8 <__assert_fail@plt+0x13f4>
   12b28:	mov	r1, r6
   12b2c:	ldr	r0, [sp, #96]	; 0x60
   12b30:	ldr	r2, [sp, #84]	; 0x54
   12b34:	str	r3, [sp, #120]	; 0x78
   12b38:	bl	140d8 <__assert_fail@plt+0x2c14>
   12b3c:	ldr	r3, [sp, #120]	; 0x78
   12b40:	b	127a8 <__assert_fail@plt+0x12e4>
   12b44:	ldrd	r2, [sp, #48]	; 0x30
   12b48:	orrs	r3, r2, r3
   12b4c:	bne	128b8 <__assert_fail@plt+0x13f4>
   12b50:	ldr	r3, [sp, #84]	; 0x54
   12b54:	cmp	r3, #0
   12b58:	bne	12bf0 <__assert_fail@plt+0x172c>
   12b5c:	ldr	r6, [sp, #24]
   12b60:	ldr	r4, [sp, #76]	; 0x4c
   12b64:	mov	r5, #0
   12b68:	mvn	r7, #1
   12b6c:	b	12ba0 <__assert_fail@plt+0x16dc>
   12b70:	ldr	r1, [r4, #4]
   12b74:	cmp	r1, #0
   12b78:	blt	12b8c <__assert_fail@plt+0x16c8>
   12b7c:	ldr	r3, [r4]
   12b80:	ldr	r2, [r4, #12]
   12b84:	ldr	r0, [r4, #8]
   12b88:	bl	13df0 <__assert_fail@plt+0x292c>
   12b8c:	add	r5, r5, #1
   12b90:	cmp	r6, r5
   12b94:	str	r7, [r4, #4]
   12b98:	add	r4, r4, #16
   12b9c:	beq	128b8 <__assert_fail@plt+0x13f4>
   12ba0:	cmp	r5, r9
   12ba4:	bcc	12b70 <__assert_fail@plt+0x16ac>
   12ba8:	ldr	r3, [pc, #-4044]	; 11be4 <__assert_fail@plt+0x720>
   12bac:	ldrb	r3, [r3, #296]	; 0x128
   12bb0:	cmp	r3, #0
   12bb4:	bne	12b70 <__assert_fail@plt+0x16ac>
   12bb8:	mov	r2, r6
   12bbc:	mov	r1, r5
   12bc0:	ldr	r0, [sp, #76]	; 0x4c
   12bc4:	bl	13c54 <__assert_fail@plt+0x2790>
   12bc8:	b	12b70 <__assert_fail@plt+0x16ac>
   12bcc:	mov	r1, r6
   12bd0:	mov	r0, #1
   12bd4:	str	r3, [sp, #96]	; 0x60
   12bd8:	mov	r6, r2
   12bdc:	bl	14a60 <__assert_fail@plt+0x359c>
   12be0:	ldr	r3, [sp, #96]	; 0x60
   12be4:	cmp	r6, r0
   12be8:	beq	127a8 <__assert_fail@plt+0x12e4>
   12bec:	b	12940 <__assert_fail@plt+0x147c>
   12bf0:	ldr	r9, [sp, #24]
   12bf4:	b	12b5c <__assert_fail@plt+0x1698>
   12bf8:	ldrd	r2, [sp, #48]	; 0x30
   12bfc:	ldrd	r0, [sp, #24]
   12c00:	ldrd	r4, [sp, #40]	; 0x28
   12c04:	cmp	r1, r3
   12c08:	cmpeq	r0, r2
   12c0c:	movcs	r3, #1
   12c10:	movcc	r3, #0
   12c14:	cmp	r1, r5
   12c18:	cmpeq	r0, r4
   12c1c:	movhi	r3, #0
   12c20:	andls	r3, r3, #1
   12c24:	cmp	r3, #0
   12c28:	beq	1311c <__assert_fail@plt+0x1c58>
   12c2c:	ldrd	r6, [sp, #24]
   12c30:	ldrd	r0, [sp, #40]	; 0x28
   12c34:	mov	r2, r6
   12c38:	mov	r3, r7
   12c3c:	bl	18b0c <__assert_fail@plt+0x7648>
   12c40:	ldrd	r4, [sp, #48]	; 0x30
   12c44:	mov	r9, r7
   12c48:	mov	r8, r6
   12c4c:	subs	r2, r4, #1
   12c50:	sbc	ip, r5, #0
   12c54:	cmp	r9, r5
   12c58:	cmpeq	r8, r4
   12c5c:	mov	r6, r4
   12c60:	mov	r7, r5
   12c64:	mul	lr, r2, r1
   12c68:	umull	r2, r3, r2, r0
   12c6c:	mla	ip, r0, ip, lr
   12c70:	mov	r4, r2
   12c74:	add	r3, ip, r3
   12c78:	mov	r5, r3
   12c7c:	beq	12c98 <__assert_fail@plt+0x17d4>
   12c80:	mul	ip, r0, r7
   12c84:	umull	r8, r9, r0, r6
   12c88:	mla	r1, r6, r1, ip
   12c8c:	strd	r8, [sp, #40]	; 0x28
   12c90:	add	r1, r1, r9
   12c94:	str	r1, [sp, #44]	; 0x2c
   12c98:	mov	r1, #0
   12c9c:	cmp	r2, sl
   12ca0:	sbcs	r1, r3, r1
   12ca4:	bge	12fb8 <__assert_fail@plt+0x1af4>
   12ca8:	ldr	r7, [sp, #80]	; 0x50
   12cac:	sub	r8, sl, r2
   12cb0:	add	r1, r7, r2
   12cb4:	mov	r0, r7
   12cb8:	mov	r2, r8
   12cbc:	bl	111a0 <memmove@plt>
   12cc0:	mov	r0, r8
   12cc4:	ldr	r6, [sp, #72]	; 0x48
   12cc8:	ldrd	r8, [sp, #40]	; 0x28
   12ccc:	cmp	r4, r8
   12cd0:	sbcs	r3, r5, r9
   12cd4:	bge	128b8 <__assert_fail@plt+0x13f4>
   12cd8:	cmn	r0, #1
   12cdc:	beq	12d7c <__assert_fail@plt+0x18b8>
   12ce0:	cmp	r0, #0
   12ce4:	beq	128b8 <__assert_fail@plt+0x13f4>
   12ce8:	subs	sl, r8, r4
   12cec:	sbc	fp, r9, r5
   12cf0:	mov	r1, #0
   12cf4:	cmp	r0, sl
   12cf8:	sbcs	r3, r1, fp
   12cfc:	movlt	sl, r0
   12d00:	movlt	fp, r1
   12d04:	mov	r2, sl
   12d08:	mov	r1, r7
   12d0c:	mov	r0, #1
   12d10:	bl	14a60 <__assert_fail@plt+0x359c>
   12d14:	cmp	r0, sl
   12d18:	beq	12d6c <__assert_fail@plt+0x18a8>
   12d1c:	bl	1138c <__errno_location@plt>
   12d20:	ldr	r3, [pc, #1628]	; 13384 <__assert_fail@plt+0x1ec0>
   12d24:	ldr	r2, [r3, #40]	; 0x28
   12d28:	cmp	r2, #0
   12d2c:	ldr	r3, [r0]
   12d30:	sub	r0, r3, #32
   12d34:	clz	r0, r0
   12d38:	lsr	r0, r0, #5
   12d3c:	moveq	r0, #0
   12d40:	cmp	r0, #0
   12d44:	bne	12d6c <__assert_fail@plt+0x18a8>
   12d48:	ldr	r2, [pc, #1592]	; 13388 <__assert_fail@plt+0x1ec4>
   12d4c:	mov	r1, #3
   12d50:	mov	r6, r3
   12d54:	bl	16bcc <__assert_fail@plt+0x5708>
   12d58:	mov	r1, r6
   12d5c:	ldr	r2, [pc, #1576]	; 1338c <__assert_fail@plt+0x1ec8>
   12d60:	mov	r3, r0
   12d64:	mov	r0, #1
   12d68:	bl	112c0 <error@plt>
   12d6c:	adds	r4, r4, sl
   12d70:	adc	r5, r5, fp
   12d74:	mvn	r0, #0
   12d78:	b	12ccc <__assert_fail@plt+0x1808>
   12d7c:	mov	r2, r6
   12d80:	mov	r1, r7
   12d84:	mov	r0, #0
   12d88:	bl	16db0 <__assert_fail@plt+0x58ec>
   12d8c:	cmn	r0, #1
   12d90:	bne	12ce0 <__assert_fail@plt+0x181c>
   12d94:	bl	1138c <__errno_location@plt>
   12d98:	ldr	r3, [pc, #1508]	; 13384 <__assert_fail@plt+0x1ec0>
   12d9c:	mov	r1, #3
   12da0:	ldr	r2, [r3, #300]	; 0x12c
   12da4:	ldr	r4, [r0]
   12da8:	mov	r0, #0
   12dac:	b	129b8 <__assert_fail@plt+0x14f4>
   12db0:	ldr	r3, [pc, #1484]	; 13384 <__assert_fail@plt+0x1ec0>
   12db4:	mov	fp, r9
   12db8:	ldrd	r8, [sp, #40]	; 0x28
   12dbc:	ldrd	r4, [r3, #96]	; 0x60
   12dc0:	orrs	r3, r4, r5
   12dc4:	beq	1310c <__assert_fail@plt+0x1c48>
   12dc8:	adds	r3, r8, r6
   12dcc:	str	r3, [sp, #112]	; 0x70
   12dd0:	adc	r3, r9, r7
   12dd4:	str	r3, [sp, #116]	; 0x74
   12dd8:	ldrd	r8, [sp, #112]	; 0x70
   12ddc:	ldr	r3, [pc, #1440]	; 13384 <__assert_fail@plt+0x1ec0>
   12de0:	cmp	r4, r8
   12de4:	ldr	r2, [r3, #64]	; 0x40
   12de8:	sbcs	r3, r5, r9
   12dec:	movge	r3, #1
   12df0:	movlt	r3, #0
   12df4:	and	r2, r2, #53248	; 0xd000
   12df8:	cmp	r2, #32768	; 0x8000
   12dfc:	movne	r8, #0
   12e00:	andeq	r8, r3, #1
   12e04:	cmp	r8, #0
   12e08:	bne	12e74 <__assert_fail@plt+0x19b0>
   12e0c:	mov	r3, #2
   12e10:	str	r3, [sp]
   12e14:	mov	r2, #0
   12e18:	mov	r3, #0
   12e1c:	mov	r0, r8
   12e20:	bl	11278 <lseek64@plt>
   12e24:	cmp	r0, #0
   12e28:	sbcs	r3, r1, #0
   12e2c:	mov	r4, r0
   12e30:	mov	r5, r1
   12e34:	blt	12ea8 <__assert_fail@plt+0x19e4>
   12e38:	ldrd	r2, [sp, #112]	; 0x70
   12e3c:	cmp	r3, r1
   12e40:	cmpeq	r2, r0
   12e44:	beq	12080 <__assert_fail@plt+0xbbc>
   12e48:	str	r8, [sp]
   12e4c:	mov	r0, r8
   12e50:	mov	r9, r3
   12e54:	mov	r8, r2
   12e58:	bl	11278 <lseek64@plt>
   12e5c:	cmp	r0, #0
   12e60:	sbcs	r3, r1, #0
   12e64:	blt	12ea8 <__assert_fail@plt+0x19e4>
   12e68:	cmp	r4, r8
   12e6c:	sbcs	r3, r5, r9
   12e70:	blt	12080 <__assert_fail@plt+0xbbc>
   12e74:	ldrd	r0, [sp, #112]	; 0x70
   12e78:	subs	r3, r4, r0
   12e7c:	sbc	r2, r5, r1
   12e80:	adds	r6, r6, r3
   12e84:	adc	r7, r7, r2
   12e88:	mvn	r3, #-2147483648	; 0x80000000
   12e8c:	mvn	r2, #0
   12e90:	cmp	r7, r3
   12e94:	cmpeq	r6, r2
   12e98:	beq	1310c <__assert_fail@plt+0x1c48>
   12e9c:	cmp	r6, #0
   12ea0:	sbcs	r3, r7, #0
   12ea4:	bge	12080 <__assert_fail@plt+0xbbc>
   12ea8:	bl	1138c <__errno_location@plt>
   12eac:	mov	r2, #5
   12eb0:	ldr	r1, [pc, #1240]	; 13390 <__assert_fail@plt+0x1ecc>
   12eb4:	ldr	r4, [r0]
   12eb8:	mov	r0, #0
   12ebc:	bl	1120c <dcgettext@plt>
   12ec0:	ldr	r3, [pc, #1212]	; 13384 <__assert_fail@plt+0x1ec0>
   12ec4:	mov	r1, #3
   12ec8:	ldr	r2, [r3, #300]	; 0x12c
   12ecc:	mov	r5, r0
   12ed0:	mov	r0, #0
   12ed4:	bl	16bcc <__assert_fail@plt+0x5708>
   12ed8:	mov	r3, r0
   12edc:	mov	r2, r5
   12ee0:	mov	r1, r4
   12ee4:	mov	r0, #1
   12ee8:	bl	112c0 <error@plt>
   12eec:	subs	r3, r0, #1
   12ef0:	str	r3, [sp, #120]	; 0x78
   12ef4:	sbc	r3, r1, #0
   12ef8:	str	r3, [sp, #124]	; 0x7c
   12efc:	mov	r2, #1
   12f00:	mov	r3, #0
   12f04:	mov	r8, #0
   12f08:	mov	r9, #0
   12f0c:	strd	r2, [sp, #104]	; 0x68
   12f10:	b	12678 <__assert_fail@plt+0x11b4>
   12f14:	ldr	r3, [pc, #1128]	; 13384 <__assert_fail@plt+0x1ec0>
   12f18:	uxtb	r6, r9
   12f1c:	mov	r7, #0
   12f20:	ldr	r2, [r3, #4]
   12f24:	mov	r3, #0
   12f28:	cmp	r2, r3
   12f2c:	ldr	r2, [pc, #1120]	; 13394 <__assert_fail@plt+0x1ed0>
   12f30:	strb	r3, [r2]
   12f34:	beq	11c78 <__assert_fail@plt+0x7b4>
   12f38:	b	11f80 <__assert_fail@plt+0xabc>
   12f3c:	orrs	r3, r8, r9
   12f40:	mov	r2, fp
   12f44:	moveq	r0, #1
   12f48:	movne	r0, #0
   12f4c:	ldr	r1, [sp, #40]	; 0x28
   12f50:	bl	140d8 <__assert_fail@plt+0x2c14>
   12f54:	b	12b1c <__assert_fail@plt+0x1658>
   12f58:	ldrd	r0, [sp, #32]
   12f5c:	mov	r4, #1
   12f60:	str	r4, [sp]
   12f64:	subs	r2, r2, r0
   12f68:	sbc	r3, r3, r1
   12f6c:	mov	r0, #0
   12f70:	bl	11278 <lseek64@plt>
   12f74:	cmp	r0, #0
   12f78:	sbcs	r3, r1, #0
   12f7c:	mvnge	sl, #0
   12f80:	ldrdge	r8, [sp, #120]	; 0x78
   12f84:	bge	12678 <__assert_fail@plt+0x11b4>
   12f88:	bl	1138c <__errno_location@plt>
   12f8c:	ldr	r3, [pc, #1008]	; 13384 <__assert_fail@plt+0x1ec0>
   12f90:	mov	r1, #3
   12f94:	ldr	r2, [r3, #300]	; 0x12c
   12f98:	ldr	r5, [r0]
   12f9c:	mov	r0, #0
   12fa0:	bl	16bcc <__assert_fail@plt+0x5708>
   12fa4:	mov	r1, r5
   12fa8:	ldr	r2, [pc, #988]	; 1338c <__assert_fail@plt+0x1ec8>
   12fac:	mov	r3, r0
   12fb0:	mov	r0, r4
   12fb4:	bl	112c0 <error@plt>
   12fb8:	mov	r6, #1
   12fbc:	str	r6, [sp]
   12fc0:	mov	r0, #0
   12fc4:	bl	11278 <lseek64@plt>
   12fc8:	cmp	r0, #0
   12fcc:	sbcs	r3, r1, #0
   12fd0:	blt	132a8 <__assert_fail@plt+0x1de4>
   12fd4:	mvn	r8, #0
   12fd8:	mov	r0, r8
   12fdc:	ldr	r6, [sp, #72]	; 0x48
   12fe0:	ldr	r7, [sp, #80]	; 0x50
   12fe4:	ldrd	r8, [sp, #40]	; 0x28
   12fe8:	b	12ccc <__assert_fail@plt+0x1808>
   12fec:	ldr	r2, [sp, #72]	; 0x48
   12ff0:	ldr	r1, [sp, #80]	; 0x50
   12ff4:	mov	r0, #0
   12ff8:	bl	16db0 <__assert_fail@plt+0x58ec>
   12ffc:	cmn	r0, #1
   13000:	bne	126b4 <__assert_fail@plt+0x11f0>
   13004:	b	12d94 <__assert_fail@plt+0x18d0>
   13008:	ldr	r1, [pc, #904]	; 13398 <__assert_fail@plt+0x1ed4>
   1300c:	mov	r2, #5
   13010:	mov	r0, #0
   13014:	bl	1120c <dcgettext@plt>
   13018:	mov	r1, #0
   1301c:	mov	r2, r0
   13020:	mov	r0, r1
   13024:	bl	112c0 <error@plt>
   13028:	mov	r0, #1
   1302c:	bl	14468 <__assert_fail@plt+0x2fa4>
   13030:	bl	17664 <__assert_fail@plt+0x61a0>
   13034:	ldr	r3, [sp, #112]	; 0x70
   13038:	strd	r4, [sp, #104]	; 0x68
   1303c:	cmp	r3, #0
   13040:	beq	1305c <__assert_fail@plt+0x1b98>
   13044:	ldr	r3, [sp, #104]	; 0x68
   13048:	adds	r3, r3, #1
   1304c:	str	r3, [sp, #104]	; 0x68
   13050:	ldr	r3, [sp, #108]	; 0x6c
   13054:	adc	r3, r3, #0
   13058:	str	r3, [sp, #108]	; 0x6c
   1305c:	ldrd	r4, [sp, #104]	; 0x68
   13060:	b	1308c <__assert_fail@plt+0x1bc8>
   13064:	ldrd	r2, [sp, #24]
   13068:	cmp	r3, r5
   1306c:	cmpeq	r2, r4
   13070:	bcc	128b8 <__assert_fail@plt+0x13f4>
   13074:	mov	r2, #0
   13078:	mov	r1, r2
   1307c:	mov	r0, #1
   13080:	bl	140d8 <__assert_fail@plt+0x2c14>
   13084:	adds	r4, r4, #1
   13088:	adc	r5, r5, #0
   1308c:	ldrd	r2, [sp, #48]	; 0x30
   13090:	orrs	r3, r2, r3
   13094:	beq	13064 <__assert_fail@plt+0x1ba0>
   13098:	b	128b8 <__assert_fail@plt+0x13f4>
   1309c:	mov	r2, #5
   130a0:	ldr	r1, [pc, #756]	; 1339c <__assert_fail@plt+0x1ed8>
   130a4:	mov	r0, #0
   130a8:	bl	1120c <dcgettext@plt>
   130ac:	add	r2, sp, #292	; 0x124
   130b0:	mov	r4, r0
   130b4:	ldrd	r0, [sp, #24]
   130b8:	bl	14ad0 <__assert_fail@plt+0x360c>
   130bc:	mov	r2, r4
   130c0:	str	sl, [sp]
   130c4:	mov	r1, #0
   130c8:	mov	r3, r0
   130cc:	mov	r0, #1
   130d0:	bl	112c0 <error@plt>
   130d4:	ldr	r3, [sp, #60]	; 0x3c
   130d8:	ldr	r2, [sl]
   130dc:	mov	r1, #3
   130e0:	ldr	r4, [r3]
   130e4:	mov	r0, #0
   130e8:	b	129b8 <__assert_fail@plt+0x14f4>
   130ec:	ldr	r1, [pc, #684]	; 133a0 <__assert_fail@plt+0x1edc>
   130f0:	mov	r2, #5
   130f4:	mov	r0, #0
   130f8:	bl	1120c <dcgettext@plt>
   130fc:	mov	r1, #0
   13100:	mov	r2, r0
   13104:	mov	r0, #1
   13108:	bl	112c0 <error@plt>
   1310c:	bl	1138c <__errno_location@plt>
   13110:	mov	r3, #75	; 0x4b
   13114:	str	r3, [r0]
   13118:	b	12ea8 <__assert_fail@plt+0x19e4>
   1311c:	ldr	r3, [pc, #640]	; 133a4 <__assert_fail@plt+0x1ee0>
   13120:	ldr	r2, [pc, #640]	; 133a8 <__assert_fail@plt+0x1ee4>
   13124:	ldr	r1, [pc, #640]	; 133ac <__assert_fail@plt+0x1ee8>
   13128:	ldr	r0, [pc, #640]	; 133b0 <__assert_fail@plt+0x1eec>
   1312c:	bl	114c4 <__assert_fail@plt>
   13130:	ldr	r3, [pc, #636]	; 133b4 <__assert_fail@plt+0x1ef0>
   13134:	ldr	r2, [pc, #636]	; 133b8 <__assert_fail@plt+0x1ef4>
   13138:	ldr	r1, [pc, #620]	; 133ac <__assert_fail@plt+0x1ee8>
   1313c:	ldr	r0, [pc, #632]	; 133bc <__assert_fail@plt+0x1ef8>
   13140:	bl	114c4 <__assert_fail@plt>
   13144:	mov	r2, #5
   13148:	ldr	r1, [pc, #624]	; 133c0 <__assert_fail@plt+0x1efc>
   1314c:	mov	r0, #0
   13150:	bl	1120c <dcgettext@plt>
   13154:	ldr	r3, [pc, #616]	; 133c4 <__assert_fail@plt+0x1f00>
   13158:	ldr	r3, [r3]
   1315c:	mov	r4, r0
   13160:	ldr	r0, [r8, r3, lsl #2]
   13164:	bl	16d98 <__assert_fail@plt+0x58d4>
   13168:	mov	r2, r4
   1316c:	mov	r3, r0
   13170:	mov	r1, #0
   13174:	mov	r0, r1
   13178:	bl	112c0 <error@plt>
   1317c:	mov	r0, #1
   13180:	bl	14468 <__assert_fail@plt+0x2fa4>
   13184:	mov	r2, #5
   13188:	ldr	r1, [pc, #568]	; 133c8 <__assert_fail@plt+0x1f04>
   1318c:	mov	r0, #0
   13190:	bl	1120c <dcgettext@plt>
   13194:	mov	r4, r0
   13198:	ldr	r0, [pc, #556]	; 133cc <__assert_fail@plt+0x1f08>
   1319c:	bl	16d98 <__assert_fail@plt+0x58d4>
   131a0:	mov	r1, #0
   131a4:	mov	r3, r4
   131a8:	ldr	r2, [pc, #544]	; 133d0 <__assert_fail@plt+0x1f0c>
   131ac:	str	r0, [sp]
   131b0:	mov	r0, r1
   131b4:	bl	112c0 <error@plt>
   131b8:	mov	r0, #1
   131bc:	bl	14468 <__assert_fail@plt+0x2fa4>
   131c0:	mov	r2, #5
   131c4:	ldr	r1, [pc, #520]	; 133d4 <__assert_fail@plt+0x1f10>
   131c8:	b	130f4 <__assert_fail@plt+0x1c30>
   131cc:	cmp	sl, #100	; 0x64
   131d0:	mov	r2, #5
   131d4:	ldrne	r1, [pc, #508]	; 133d8 <__assert_fail@plt+0x1f14>
   131d8:	beq	13238 <__assert_fail@plt+0x1d74>
   131dc:	mov	r0, #0
   131e0:	bl	1120c <dcgettext@plt>
   131e4:	mov	r5, r0
   131e8:	ldr	r0, [r4]
   131ec:	bl	16d98 <__assert_fail@plt+0x58d4>
   131f0:	mov	r2, r5
   131f4:	mov	r3, r0
   131f8:	b	13170 <__assert_fail@plt+0x1cac>
   131fc:	mov	r2, #5
   13200:	ldr	r1, [pc, #468]	; 133dc <__assert_fail@plt+0x1f18>
   13204:	mov	r0, #0
   13208:	bl	1120c <dcgettext@plt>
   1320c:	mov	r5, r0
   13210:	ldr	r0, [r4]
   13214:	bl	16d98 <__assert_fail@plt+0x58d4>
   13218:	mov	r2, r5
   1321c:	mov	r1, #0
   13220:	mov	r3, r0
   13224:	mov	r0, #1
   13228:	bl	112c0 <error@plt>
   1322c:	mov	r2, #5
   13230:	ldr	r1, [pc, #424]	; 133e0 <__assert_fail@plt+0x1f1c>
   13234:	b	131dc <__assert_fail@plt+0x1d18>
   13238:	ldr	r1, [pc, #420]	; 133e4 <__assert_fail@plt+0x1f20>
   1323c:	mov	r0, #0
   13240:	bl	1120c <dcgettext@plt>
   13244:	mov	r5, r0
   13248:	b	131e8 <__assert_fail@plt+0x1d24>
   1324c:	ldr	r9, [pc, #404]	; 133e8 <__assert_fail@plt+0x1f24>
   13250:	b	117b8 <__assert_fail@plt+0x2f4>
   13254:	bl	1138c <__errno_location@plt>
   13258:	mov	r2, #5
   1325c:	ldr	r1, [pc, #392]	; 133ec <__assert_fail@plt+0x1f28>
   13260:	ldr	r4, [r0]
   13264:	mov	r0, #0
   13268:	bl	1120c <dcgettext@plt>
   1326c:	ldr	r3, [pc, #272]	; 13384 <__assert_fail@plt+0x1ec0>
   13270:	ldr	r1, [r3, #300]	; 0x12c
   13274:	mov	r5, r0
   13278:	mov	r0, #4
   1327c:	bl	16af0 <__assert_fail@plt+0x562c>
   13280:	b	12ed8 <__assert_fail@plt+0x1a14>
   13284:	mov	r2, #5
   13288:	ldr	r1, [pc, #352]	; 133f0 <__assert_fail@plt+0x1f2c>
   1328c:	mov	r0, r4
   13290:	bl	1120c <dcgettext@plt>
   13294:	strd	r6, [sp]
   13298:	mov	r1, r4
   1329c:	mov	r2, r0
   132a0:	mov	r0, #1
   132a4:	bl	112c0 <error@plt>
   132a8:	bl	1138c <__errno_location@plt>
   132ac:	ldr	r3, [pc, #208]	; 13384 <__assert_fail@plt+0x1ec0>
   132b0:	mov	r1, #3
   132b4:	ldr	r2, [r3, #300]	; 0x12c
   132b8:	ldr	r4, [r0]
   132bc:	mov	r0, #0
   132c0:	bl	16bcc <__assert_fail@plt+0x5708>
   132c4:	mov	r1, r4
   132c8:	ldr	r2, [pc, #188]	; 1338c <__assert_fail@plt+0x1ec8>
   132cc:	mov	r3, r0
   132d0:	mov	r0, r6
   132d4:	bl	112c0 <error@plt>
   132d8:	mov	r2, #5
   132dc:	ldr	r1, [pc, #272]	; 133f4 <__assert_fail@plt+0x1f30>
   132e0:	mov	r0, #0
   132e4:	bl	1120c <dcgettext@plt>
   132e8:	add	r2, sp, #292	; 0x124
   132ec:	mov	r4, r0
   132f0:	ldrd	r0, [sp, #24]
   132f4:	bl	14ad0 <__assert_fail@plt+0x360c>
   132f8:	bl	16d98 <__assert_fail@plt+0x58d4>
   132fc:	mov	r3, r4
   13300:	ldr	r2, [pc, #200]	; 133d0 <__assert_fail@plt+0x1f0c>
   13304:	mov	r1, #75	; 0x4b
   13308:	str	r0, [sp]
   1330c:	mov	r0, #1
   13310:	bl	112c0 <error@plt>
   13314:	cmp	sl, #0
   13318:	cmpne	r4, #0
   1331c:	bne	12310 <__assert_fail@plt+0xe4c>
   13320:	adds	r2, r7, #0
   13324:	movne	r2, #1
   13328:	cmp	sl, #0
   1332c:	movne	r2, #0
   13330:	cmp	r2, #0
   13334:	beq	12368 <__assert_fail@plt+0xea4>
   13338:	mov	r4, r7
   1333c:	b	12310 <__assert_fail@plt+0xe4c>
   13340:	bl	1138c <__errno_location@plt>
   13344:	ldr	r3, [r0]
   13348:	cmp	r3, #29
   1334c:	moveq	r3, #0
   13350:	streq	r3, [r0]
   13354:	b	12ea8 <__assert_fail@plt+0x19e4>
   13358:	bl	11218 <__stack_chk_fail@plt>
   1335c:	mov	r4, #0
   13360:	mov	r5, #0
   13364:	mvn	ip, #0
   13368:	ldr	r3, [sp, #72]	; 0x48
   1336c:	ldr	r2, [sp, #80]	; 0x50
   13370:	ldrd	r0, [sp, #24]
   13374:	strd	r4, [sp, #8]
   13378:	str	ip, [sp]
   1337c:	bl	141d4 <__assert_fail@plt+0x2d10>
   13380:	b	128b8 <__assert_fail@plt+0x13f4>
   13384:	andeq	fp, r2, r8, ror #6
   13388:	andeq	r9, r1, r4, ror #20
   1338c:	andeq	r9, r1, r0, asr #1
   13390:	andeq	r9, r1, r8, ror #26
   13394:	andeq	fp, r2, ip, asr #2
   13398:	andeq	r9, r1, ip, asr #21
   1339c:	andeq	r9, r1, r0, asr #23
   133a0:	andeq	r9, r1, ip, asr fp
   133a4:	andeq	r8, r1, r0, ror lr
   133a8:	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   133ac:	muleq	r1, r8, lr
   133b0:	andeq	r9, r1, r8, lsl #27
   133b4:	andeq	r8, r1, r4, lsl #29
   133b8:	andeq	r0, r0, r1, ror #6
   133bc:	andeq	r9, r1, ip, lsr #27
   133c0:	strdeq	r9, [r1], -r8
   133c4:	andeq	fp, r2, r0, asr r3
   133c8:	andeq	r9, r1, r8, lsl #22
   133cc:	andeq	r9, r1, r0, asr #25
   133d0:	andeq	r9, r1, r4, asr #25
   133d4:	muleq	r1, r8, fp
   133d8:	andeq	r9, r1, r8, lsl ip
   133dc:	andeq	r9, r1, r8, ror fp
   133e0:	muleq	r1, ip, sl
   133e4:	andeq	r9, r1, r8, ror #23
   133e8:	andeq	r9, r1, r0, lsr sl
   133ec:	andeq	r9, r1, ip, asr #26
   133f0:	andeq	r9, r1, ip, asr #25
   133f4:	andeq	r9, r1, r8, lsr #22
   133f8:	mov	fp, #0
   133fc:	mov	lr, #0
   13400:	pop	{r1}		; (ldr r1, [sp], #4)
   13404:	mov	r2, sp
   13408:	push	{r2}		; (str r2, [sp, #-4]!)
   1340c:	push	{r0}		; (str r0, [sp, #-4]!)
   13410:	ldr	ip, [pc, #16]	; 13428 <__assert_fail@plt+0x1f64>
   13414:	push	{ip}		; (str ip, [sp, #-4]!)
   13418:	ldr	r0, [pc, #12]	; 1342c <__assert_fail@plt+0x1f68>
   1341c:	ldr	r3, [pc, #12]	; 13430 <__assert_fail@plt+0x1f6c>
   13420:	bl	112fc <__libc_start_main@plt>
   13424:	bl	114a0 <abort@plt>
   13428:	andeq	r8, r1, r0, ror #25
   1342c:	ldrdeq	r1, [r1], -r0
   13430:	andeq	r8, r1, r0, lsl #25
   13434:	ldr	r3, [pc, #20]	; 13450 <__assert_fail@plt+0x1f8c>
   13438:	ldr	r2, [pc, #20]	; 13454 <__assert_fail@plt+0x1f90>
   1343c:	add	r3, pc, r3
   13440:	ldr	r2, [r3, r2]
   13444:	cmp	r2, #0
   13448:	bxeq	lr
   1344c:	b	11314 <__gmon_start__@plt>
   13450:			; <UNDEFINED> instruction: 0x00017bbc
   13454:	andeq	r0, r0, r0, asr #2
   13458:	ldr	r0, [pc, #24]	; 13478 <__assert_fail@plt+0x1fb4>
   1345c:	ldr	r3, [pc, #24]	; 1347c <__assert_fail@plt+0x1fb8>
   13460:	cmp	r3, r0
   13464:	bxeq	lr
   13468:	ldr	r3, [pc, #16]	; 13480 <__assert_fail@plt+0x1fbc>
   1346c:	cmp	r3, #0
   13470:	bxeq	lr
   13474:	bx	r3
   13478:	andeq	fp, r2, r8, asr #6
   1347c:	andeq	fp, r2, r8, asr #6
   13480:	andeq	r0, r0, r0
   13484:	ldr	r0, [pc, #36]	; 134b0 <__assert_fail@plt+0x1fec>
   13488:	ldr	r1, [pc, #36]	; 134b4 <__assert_fail@plt+0x1ff0>
   1348c:	sub	r1, r1, r0
   13490:	asr	r1, r1, #2
   13494:	add	r1, r1, r1, lsr #31
   13498:	asrs	r1, r1, #1
   1349c:	bxeq	lr
   134a0:	ldr	r3, [pc, #16]	; 134b8 <__assert_fail@plt+0x1ff4>
   134a4:	cmp	r3, #0
   134a8:	bxeq	lr
   134ac:	bx	r3
   134b0:	andeq	fp, r2, r8, asr #6
   134b4:	andeq	fp, r2, r8, asr #6
   134b8:	andeq	r0, r0, r0
   134bc:	push	{r4, lr}
   134c0:	ldr	r4, [pc, #24]	; 134e0 <__assert_fail@plt+0x201c>
   134c4:	ldrb	r3, [r4]
   134c8:	cmp	r3, #0
   134cc:	popne	{r4, pc}
   134d0:	bl	13458 <__assert_fail@plt+0x1f94>
   134d4:	mov	r3, #1
   134d8:	strb	r3, [r4]
   134dc:	pop	{r4, pc}
   134e0:	andeq	fp, r2, r4, ror #6
   134e4:	b	13484 <__assert_fail@plt+0x1fc0>
   134e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134ec:	ldr	r4, [pc, #636]	; 13770 <__assert_fail@plt+0x22ac>
   134f0:	ldm	r4, {r5, r6}
   134f4:	cmp	r5, #0
   134f8:	beq	135c8 <__assert_fail@plt+0x2104>
   134fc:	cmp	r6, #0
   13500:	sub	r1, r6, #1
   13504:	beq	135a8 <__assert_fail@plt+0x20e4>
   13508:	ldr	r3, [pc, #612]	; 13774 <__assert_fail@plt+0x22b0>
   1350c:	ldr	r8, [r4, #32]
   13510:	sub	r2, r6, #-1073741823	; 0xc0000001
   13514:	ldr	r9, [r4, #28]
   13518:	ldrb	r7, [r3]
   1351c:	ldr	ip, [r3, #4]
   13520:	add	r2, r8, r2, lsl #2
   13524:	add	r0, r9, r6
   13528:	b	13554 <__assert_fail@plt+0x2090>
   1352c:	ldrb	r3, [ip, r3]
   13530:	cmp	r3, #0
   13534:	strb	r3, [r0, #-1]
   13538:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   1353c:	str	r3, [r2, #4]
   13540:	ldrb	r3, [ip]
   13544:	sub	r1, r1, #1
   13548:	cmn	r1, #1
   1354c:	strb	r3, [r0, #-1]!
   13550:	beq	135a8 <__assert_fail@plt+0x20e4>
   13554:	ldr	r3, [r2]
   13558:	cmp	r1, #0
   1355c:	movne	sl, #0
   13560:	andeq	sl, r7, #1
   13564:	add	r3, r3, #1
   13568:	cmp	sl, #0
   1356c:	mov	lr, r2
   13570:	str	r3, [r2], #-4
   13574:	beq	1352c <__assert_fail@plt+0x2068>
   13578:	ldr	r2, [r8]
   1357c:	add	r2, ip, r2
   13580:	ldrb	r2, [r2, #1]
   13584:	cmp	r2, #0
   13588:	beq	135c8 <__assert_fail@plt+0x2104>
   1358c:	ldrb	r3, [ip, r3]
   13590:	cmp	r3, #0
   13594:	strb	r3, [r9]
   13598:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   1359c:	str	r3, [lr]
   135a0:	ldrb	r3, [ip]
   135a4:	strb	r3, [r9]
   135a8:	mov	r2, #5
   135ac:	ldr	r1, [pc, #452]	; 13778 <__assert_fail@plt+0x22b4>
   135b0:	mov	r0, #0
   135b4:	bl	1120c <dcgettext@plt>
   135b8:	mov	r1, #0
   135bc:	mov	r2, r0
   135c0:	mov	r0, #1
   135c4:	bl	112c0 <error@plt>
   135c8:	ldr	r8, [r4, #8]
   135cc:	cmp	r8, #0
   135d0:	bne	13644 <__assert_fail@plt+0x2180>
   135d4:	ldr	r0, [r4, #12]
   135d8:	bl	11344 <strlen@plt>
   135dc:	mov	r7, r0
   135e0:	ldr	r0, [r4, #20]
   135e4:	str	r7, [r4, #16]
   135e8:	cmp	r0, #0
   135ec:	moveq	r0, r8
   135f0:	beq	135f8 <__assert_fail@plt+0x2134>
   135f4:	bl	11344 <strlen@plt>
   135f8:	add	r3, r7, r6
   135fc:	add	r3, r3, r0
   13600:	add	r1, r3, #1
   13604:	cmp	r7, r1
   13608:	str	r3, [r4, #8]
   1360c:	str	r0, [r4, #24]
   13610:	bhi	13758 <__assert_fail@plt+0x2294>
   13614:	mov	r0, r5
   13618:	bl	17478 <__assert_fail@plt+0x5fb4>
   1361c:	ldr	r5, [r4, #16]
   13620:	ldr	r1, [r4, #12]
   13624:	mov	r2, r5
   13628:	mov	r6, r0
   1362c:	str	r0, [r4]
   13630:	bl	111c4 <memcpy@plt>
   13634:	ldr	r3, [pc, #312]	; 13774 <__assert_fail@plt+0x22b0>
   13638:	ldr	r9, [r4, #32]
   1363c:	ldr	r2, [r3, #4]
   13640:	b	13698 <__assert_fail@plt+0x21d4>
   13644:	ldr	r3, [r4, #16]
   13648:	add	r1, r8, #3
   1364c:	add	r6, r6, #1
   13650:	cmp	r1, r3
   13654:	add	r3, r8, #2
   13658:	str	r6, [r4, #4]
   1365c:	str	r3, [r4, #8]
   13660:	bcc	13758 <__assert_fail@plt+0x2294>
   13664:	mov	r0, r5
   13668:	bl	17478 <__assert_fail@plt+0x5fb4>
   1366c:	ldr	r2, [pc, #256]	; 13774 <__assert_fail@plt+0x22b0>
   13670:	ldr	r9, [r4, #32]
   13674:	ldr	r3, [r4, #16]
   13678:	ldr	r2, [r2, #4]
   1367c:	ldr	r1, [r9]
   13680:	add	r5, r3, #1
   13684:	str	r5, [r4, #16]
   13688:	ldrb	r1, [r2, r1]
   1368c:	mov	r6, r0
   13690:	str	r0, [r4]
   13694:	strb	r1, [r0, r3]
   13698:	ldr	r7, [r4, #4]
   1369c:	add	r5, r6, r5
   136a0:	ldrb	r1, [r2]
   136a4:	mov	r0, r5
   136a8:	mov	r2, r7
   136ac:	str	r5, [r4, #28]
   136b0:	bl	113b0 <memset@plt>
   136b4:	ldr	r1, [r4, #20]
   136b8:	cmp	r1, #0
   136bc:	beq	136cc <__assert_fail@plt+0x2208>
   136c0:	add	r0, r5, r7
   136c4:	ldr	r2, [r4, #24]
   136c8:	bl	111c4 <memcpy@plt>
   136cc:	ldr	r3, [r4, #8]
   136d0:	mov	r2, #0
   136d4:	mov	r0, r9
   136d8:	strb	r2, [r6, r3]
   136dc:	bl	111ac <free@plt>
   136e0:	mov	r0, r7
   136e4:	mov	r1, #4
   136e8:	bl	175f4 <__assert_fail@plt+0x6130>
   136ec:	ldr	r7, [r4, #36]	; 0x24
   136f0:	cmp	r7, #0
   136f4:	mov	r6, r0
   136f8:	str	r0, [r4, #32]
   136fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13700:	cmp	r8, #0
   13704:	bne	1375c <__assert_fail@plt+0x2298>
   13708:	mov	r0, r7
   1370c:	bl	11344 <strlen@plt>
   13710:	ldr	r8, [r4, #4]
   13714:	mov	r1, r7
   13718:	mov	r5, r0
   1371c:	ldr	r0, [r4, #28]
   13720:	sub	r3, r8, r5
   13724:	add	r0, r0, r3
   13728:	mov	r2, r5
   1372c:	bl	111c4 <memcpy@plt>
   13730:	cmp	r5, #0
   13734:	add	r1, r6, r8, lsl #2
   13738:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1373c:	add	r2, r7, r5
   13740:	ldrb	r3, [r2, #-1]!
   13744:	sub	r3, r3, #48	; 0x30
   13748:	cmp	r7, r2
   1374c:	str	r3, [r1, #-4]!
   13750:	bne	13740 <__assert_fail@plt+0x227c>
   13754:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13758:	bl	17664 <__assert_fail@plt+0x61a0>
   1375c:	ldr	r3, [pc, #24]	; 1377c <__assert_fail@plt+0x22b8>
   13760:	mov	r2, #408	; 0x198
   13764:	ldr	r1, [pc, #20]	; 13780 <__assert_fail@plt+0x22bc>
   13768:	ldr	r0, [pc, #20]	; 13784 <__assert_fail@plt+0x22c0>
   1376c:	bl	114c4 <__assert_fail@plt>
   13770:	andeq	fp, r2, r8, ror #6
   13774:	andeq	fp, r2, ip, asr #2
   13778:	andeq	r8, r1, ip, lsr #29
   1377c:	andeq	r8, r1, r8, lsl #26
   13780:	muleq	r1, r8, lr
   13784:	andeq	r8, r1, r4, lsr #29
   13788:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1378c:	mov	r8, r0
   13790:	ldr	r6, [pc, #1116]	; 13bf4 <__assert_fail@plt+0x2730>
   13794:	ldr	r7, [pc, #1116]	; 13bf8 <__assert_fail@plt+0x2734>
   13798:	sub	sp, sp, #128	; 0x80
   1379c:	ldr	r0, [r6, #40]	; 0x28
   137a0:	ldr	r3, [r7]
   137a4:	cmp	r0, #0
   137a8:	str	r3, [sp, #124]	; 0x7c
   137ac:	beq	13944 <__assert_fail@plt+0x2480>
   137b0:	ldr	r0, [pc, #1092]	; 13bfc <__assert_fail@plt+0x2738>
   137b4:	bl	112d8 <getenv@plt>
   137b8:	ldr	r3, [pc, #1088]	; 13c00 <__assert_fail@plt+0x273c>
   137bc:	mov	r2, #1
   137c0:	mov	r1, r8
   137c4:	cmp	r0, #0
   137c8:	movne	r5, r0
   137cc:	ldr	r0, [pc, #1072]	; 13c04 <__assert_fail@plt+0x2740>
   137d0:	moveq	r5, r3
   137d4:	bl	11368 <setenv@plt>
   137d8:	subs	r4, r0, #0
   137dc:	bne	13b74 <__assert_fail@plt+0x26b0>
   137e0:	ldrb	r3, [r6, #44]	; 0x2c
   137e4:	cmp	r3, #0
   137e8:	bne	139f0 <__assert_fail@plt+0x252c>
   137ec:	add	r0, sp, #116	; 0x74
   137f0:	bl	11404 <pipe@plt>
   137f4:	subs	r8, r0, #0
   137f8:	bne	13be4 <__assert_fail@plt+0x2720>
   137fc:	bl	11440 <fork@plt>
   13800:	subs	r4, r0, #0
   13804:	beq	13868 <__assert_fail@plt+0x23a4>
   13808:	cmn	r4, #1
   1380c:	beq	13bb4 <__assert_fail@plt+0x26f0>
   13810:	ldr	r0, [sp, #116]	; 0x74
   13814:	bl	114ac <close@plt>
   13818:	cmp	r0, #0
   1381c:	bne	13bc4 <__assert_fail@plt+0x2700>
   13820:	ldr	r3, [r6, #152]	; 0x98
   13824:	ldr	r2, [r6, #292]	; 0x124
   13828:	str	r4, [r6, #288]	; 0x120
   1382c:	cmp	r3, r2
   13830:	ldr	r0, [r6, #156]	; 0x9c
   13834:	beq	13a90 <__assert_fail@plt+0x25cc>
   13838:	ldr	r1, [sp, #120]	; 0x78
   1383c:	add	r2, r3, #1
   13840:	str	r1, [r0, r3, lsl #2]
   13844:	ldr	r9, [sp, #120]	; 0x78
   13848:	str	r2, [r6, #152]	; 0x98
   1384c:	ldr	r2, [sp, #124]	; 0x7c
   13850:	ldr	r3, [r7]
   13854:	mov	r0, r9
   13858:	cmp	r2, r3
   1385c:	bne	13b10 <__assert_fail@plt+0x264c>
   13860:	add	sp, sp, #128	; 0x80
   13864:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13868:	ldr	r3, [r6, #152]	; 0x98
   1386c:	cmp	r3, #0
   13870:	beq	13898 <__assert_fail@plt+0x23d4>
   13874:	ldr	r3, [r6, #156]	; 0x9c
   13878:	ldr	r0, [r3, r4, lsl #2]
   1387c:	bl	114ac <close@plt>
   13880:	cmp	r0, #0
   13884:	bne	13af8 <__assert_fail@plt+0x2634>
   13888:	ldr	r3, [r6, #152]	; 0x98
   1388c:	add	r4, r4, #1
   13890:	cmp	r3, r4
   13894:	bhi	13874 <__assert_fail@plt+0x23b0>
   13898:	ldr	r0, [sp, #120]	; 0x78
   1389c:	bl	114ac <close@plt>
   138a0:	mov	r4, r0
   138a4:	bl	1138c <__errno_location@plt>
   138a8:	cmp	r4, #0
   138ac:	mov	r7, r0
   138b0:	bne	13bd4 <__assert_fail@plt+0x2710>
   138b4:	ldr	r0, [sp, #116]	; 0x74
   138b8:	cmp	r0, #0
   138bc:	beq	138e0 <__assert_fail@plt+0x241c>
   138c0:	mov	r1, r4
   138c4:	bl	11224 <dup2@plt>
   138c8:	subs	r8, r0, #0
   138cc:	bne	13b14 <__assert_fail@plt+0x2650>
   138d0:	ldr	r0, [sp, #116]	; 0x74
   138d4:	bl	114ac <close@plt>
   138d8:	cmp	r0, #0
   138dc:	bne	13a30 <__assert_fail@plt+0x256c>
   138e0:	mov	r2, #0
   138e4:	ldr	r1, [pc, #796]	; 13c08 <__assert_fail@plt+0x2744>
   138e8:	mov	r0, #2
   138ec:	bl	11194 <sigprocmask@plt>
   138f0:	mov	r0, r5
   138f4:	bl	148f8 <__assert_fail@plt+0x3434>
   138f8:	ldr	r4, [r6, #40]	; 0x28
   138fc:	mov	r6, #0
   13900:	mov	r3, r4
   13904:	str	r6, [sp]
   13908:	ldr	r2, [pc, #764]	; 13c0c <__assert_fail@plt+0x2748>
   1390c:	mov	r1, r0
   13910:	mov	r0, r5
   13914:	bl	1144c <execl@plt>
   13918:	mov	r0, r6
   1391c:	mov	r2, #5
   13920:	ldr	r1, [pc, #744]	; 13c10 <__assert_fail@plt+0x274c>
   13924:	ldr	r6, [r7]
   13928:	bl	1120c <dcgettext@plt>
   1392c:	str	r4, [sp]
   13930:	mov	r1, r6
   13934:	mov	r3, r5
   13938:	mov	r2, r0
   1393c:	mov	r0, #1
   13940:	bl	112c0 <error@plt>
   13944:	ldrb	r3, [r6, #44]	; 0x2c
   13948:	cmp	r3, #0
   1394c:	bne	13a54 <__assert_fail@plt+0x2590>
   13950:	ldr	r2, [pc, #700]	; 13c14 <__assert_fail@plt+0x2750>
   13954:	mov	r1, #65	; 0x41
   13958:	mov	r0, r8
   1395c:	bl	14998 <__assert_fail@plt+0x34d4>
   13960:	subs	r9, r0, #0
   13964:	blt	1384c <__assert_fail@plt+0x2388>
   13968:	add	r2, sp, #8
   1396c:	mov	r1, r9
   13970:	mov	r0, #3
   13974:	bl	11254 <__fxstat64@plt>
   13978:	subs	sl, r0, #0
   1397c:	bne	13b38 <__assert_fail@plt+0x2674>
   13980:	ldrd	r4, [r6, #144]	; 0x90
   13984:	ldrd	r2, [sp, #104]	; 0x68
   13988:	cmp	r5, r3
   1398c:	cmpeq	r4, r2
   13990:	bne	139a8 <__assert_fail@plt+0x24e4>
   13994:	ldrd	r4, [r6, #48]	; 0x30
   13998:	ldrd	r2, [sp, #8]
   1399c:	cmp	r5, r3
   139a0:	cmpeq	r4, r2
   139a4:	beq	13b84 <__assert_fail@plt+0x26c0>
   139a8:	mov	r2, #0
   139ac:	mov	r3, #0
   139b0:	mov	r0, r9
   139b4:	bl	111e8 <ftruncate64@plt>
   139b8:	cmp	r0, #0
   139bc:	beq	1384c <__assert_fail@plt+0x2388>
   139c0:	bl	1138c <__errno_location@plt>
   139c4:	mov	r2, #5
   139c8:	ldr	r1, [pc, #584]	; 13c18 <__assert_fail@plt+0x2754>
   139cc:	ldr	r4, [r0]
   139d0:	mov	r0, #0
   139d4:	bl	1120c <dcgettext@plt>
   139d8:	mov	r2, r8
   139dc:	mov	r1, #3
   139e0:	mov	r5, r0
   139e4:	mov	r0, #0
   139e8:	bl	16bcc <__assert_fail@plt+0x5708>
   139ec:	b	13b60 <__assert_fail@plt+0x269c>
   139f0:	ldr	r3, [pc, #548]	; 13c1c <__assert_fail@plt+0x2758>
   139f4:	mov	r2, #5
   139f8:	ldr	r1, [pc, #544]	; 13c20 <__assert_fail@plt+0x275c>
   139fc:	ldr	r9, [r3]
   13a00:	bl	1120c <dcgettext@plt>
   13a04:	mov	r2, r8
   13a08:	mov	r1, #3
   13a0c:	mov	sl, r0
   13a10:	mov	r0, r4
   13a14:	bl	16bcc <__assert_fail@plt+0x5708>
   13a18:	mov	r2, sl
   13a1c:	mov	r1, #1
   13a20:	mov	r3, r0
   13a24:	mov	r0, r9
   13a28:	bl	113e0 <__fprintf_chk@plt>
   13a2c:	b	137ec <__assert_fail@plt+0x2328>
   13a30:	ldr	r4, [r7]
   13a34:	ldr	r1, [pc, #488]	; 13c24 <__assert_fail@plt+0x2760>
   13a38:	mov	r0, r8
   13a3c:	mov	r2, #5
   13a40:	bl	1120c <dcgettext@plt>
   13a44:	mov	r1, r4
   13a48:	mov	r2, r0
   13a4c:	mov	r0, #1
   13a50:	bl	112c0 <error@plt>
   13a54:	ldr	r3, [pc, #448]	; 13c1c <__assert_fail@plt+0x2758>
   13a58:	mov	r2, #5
   13a5c:	ldr	r1, [pc, #452]	; 13c28 <__assert_fail@plt+0x2764>
   13a60:	ldr	r4, [r3]
   13a64:	bl	1120c <dcgettext@plt>
   13a68:	mov	r1, r8
   13a6c:	mov	r5, r0
   13a70:	mov	r0, #4
   13a74:	bl	16af0 <__assert_fail@plt+0x562c>
   13a78:	mov	r2, r5
   13a7c:	mov	r1, #1
   13a80:	mov	r3, r0
   13a84:	mov	r0, r4
   13a88:	bl	113e0 <__fprintf_chk@plt>
   13a8c:	b	13950 <__assert_fail@plt+0x248c>
   13a90:	cmp	r0, #0
   13a94:	beq	13ac4 <__assert_fail@plt+0x2600>
   13a98:	ldr	r3, [pc, #396]	; 13c2c <__assert_fail@plt+0x2768>
   13a9c:	cmp	r2, r3
   13aa0:	bhi	13ae8 <__assert_fail@plt+0x2624>
   13aa4:	add	r3, r2, #1
   13aa8:	add	r2, r3, r2, lsr #1
   13aac:	lsl	r1, r2, #2
   13ab0:	str	r2, [r6, #292]	; 0x124
   13ab4:	bl	17478 <__assert_fail@plt+0x5fb4>
   13ab8:	ldr	r3, [r6, #152]	; 0x98
   13abc:	str	r0, [r6, #156]	; 0x9c
   13ac0:	b	13838 <__assert_fail@plt+0x2374>
   13ac4:	cmp	r2, #0
   13ac8:	beq	13aec <__assert_fail@plt+0x2628>
   13acc:	lsrs	r3, r2, #30
   13ad0:	movne	r3, #1
   13ad4:	moveq	r3, #0
   13ad8:	lsls	r1, r2, #2
   13adc:	bmi	13ae8 <__assert_fail@plt+0x2624>
   13ae0:	cmp	r3, #0
   13ae4:	beq	13ab0 <__assert_fail@plt+0x25ec>
   13ae8:	bl	17664 <__assert_fail@plt+0x61a0>
   13aec:	mov	r1, #64	; 0x40
   13af0:	mov	r2, #16
   13af4:	b	13ab0 <__assert_fail@plt+0x25ec>
   13af8:	bl	1138c <__errno_location@plt>
   13afc:	ldr	r1, [pc, #300]	; 13c30 <__assert_fail@plt+0x276c>
   13b00:	mov	r2, #5
   13b04:	ldr	r4, [r0]
   13b08:	mov	r0, #0
   13b0c:	b	13a40 <__assert_fail@plt+0x257c>
   13b10:	bl	11218 <__stack_chk_fail@plt>
   13b14:	mov	r2, #5
   13b18:	ldr	r1, [pc, #276]	; 13c34 <__assert_fail@plt+0x2770>
   13b1c:	mov	r0, r4
   13b20:	ldr	r5, [r7]
   13b24:	bl	1120c <dcgettext@plt>
   13b28:	mov	r1, r5
   13b2c:	mov	r2, r0
   13b30:	mov	r0, #1
   13b34:	bl	112c0 <error@plt>
   13b38:	bl	1138c <__errno_location@plt>
   13b3c:	ldr	r1, [pc, #244]	; 13c38 <__assert_fail@plt+0x2774>
   13b40:	mov	r2, #5
   13b44:	ldr	r4, [r0]
   13b48:	mov	r0, #0
   13b4c:	bl	1120c <dcgettext@plt>
   13b50:	mov	r1, r8
   13b54:	mov	r5, r0
   13b58:	mov	r0, #4
   13b5c:	bl	16af0 <__assert_fail@plt+0x562c>
   13b60:	mov	r3, r0
   13b64:	mov	r2, r5
   13b68:	mov	r1, r4
   13b6c:	mov	r0, #1
   13b70:	bl	112c0 <error@plt>
   13b74:	bl	1138c <__errno_location@plt>
   13b78:	mov	r2, #5
   13b7c:	ldr	r1, [pc, #184]	; 13c3c <__assert_fail@plt+0x2778>
   13b80:	b	13b04 <__assert_fail@plt+0x2640>
   13b84:	mov	r2, #5
   13b88:	ldr	r1, [pc, #176]	; 13c40 <__assert_fail@plt+0x277c>
   13b8c:	bl	1120c <dcgettext@plt>
   13b90:	mov	r1, r8
   13b94:	mov	r4, r0
   13b98:	mov	r0, #4
   13b9c:	bl	16af0 <__assert_fail@plt+0x562c>
   13ba0:	mov	r2, r4
   13ba4:	mov	r1, sl
   13ba8:	mov	r3, r0
   13bac:	mov	r0, #1
   13bb0:	bl	112c0 <error@plt>
   13bb4:	bl	1138c <__errno_location@plt>
   13bb8:	mov	r2, #5
   13bbc:	ldr	r1, [pc, #128]	; 13c44 <__assert_fail@plt+0x2780>
   13bc0:	b	13b04 <__assert_fail@plt+0x2640>
   13bc4:	bl	1138c <__errno_location@plt>
   13bc8:	mov	r2, #5
   13bcc:	ldr	r1, [pc, #116]	; 13c48 <__assert_fail@plt+0x2784>
   13bd0:	b	13b04 <__assert_fail@plt+0x2640>
   13bd4:	ldr	r4, [r0]
   13bd8:	mov	r2, #5
   13bdc:	ldr	r1, [pc, #104]	; 13c4c <__assert_fail@plt+0x2788>
   13be0:	b	13b08 <__assert_fail@plt+0x2644>
   13be4:	bl	1138c <__errno_location@plt>
   13be8:	mov	r2, #5
   13bec:	ldr	r1, [pc, #92]	; 13c50 <__assert_fail@plt+0x278c>
   13bf0:	b	13b04 <__assert_fail@plt+0x2640>
   13bf4:	andeq	fp, r2, r8, ror #6
   13bf8:	andeq	sl, r2, r8, lsl #30
   13bfc:	andeq	r8, r1, r8, lsr pc
   13c00:	andeq	r8, r1, ip, asr #29
   13c04:	andeq	r8, r1, r0, asr #30
   13c08:	andeq	fp, r2, r8, lsl #8
   13c0c:	strdeq	r8, [r1], -r0
   13c10:	strdeq	r8, [r1], -r4
   13c14:			; <UNDEFINED> instruction: 0x000001b6
   13c18:	andeq	r8, r1, r0, lsr #30
   13c1c:	andeq	fp, r2, ip, asr r3
   13c20:	andeq	r8, r1, r0, ror pc
   13c24:	ldrdeq	r8, [r1], -ip
   13c28:	ldrdeq	r8, [r1], -r4
   13c2c:	ldrbne	r5, [r5, #-1364]	; 0xfffffaac
   13c30:	andeq	r8, r1, r0, lsr #31
   13c34:	andeq	r8, r1, r8, asr #31
   13c38:	andeq	r8, r1, r8, ror #29
   13c3c:	andeq	r8, r1, r8, asr #30
   13c40:	strdeq	r8, [r1], -ip
   13c44:	andeq	r9, r1, r8, lsl r0
   13c48:	andeq	r9, r1, r0, lsr r0
   13c4c:			; <UNDEFINED> instruction: 0x00018fb4
   13c50:	andeq	r8, r1, r8, lsl #31
   13c54:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c58:	add	r7, r0, r1, lsl #4
   13c5c:	ldr	r3, [r7, #4]
   13c60:	cmp	r3, #0
   13c64:	movge	r5, #0
   13c68:	blt	13c74 <__assert_fail@plt+0x27b0>
   13c6c:	mov	r0, r5
   13c70:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c74:	cmp	r1, #0
   13c78:	subeq	r4, r2, #1
   13c7c:	subne	r4, r1, #1
   13c80:	cmn	r3, #1
   13c84:	mov	r6, r0
   13c88:	mov	r9, r2
   13c8c:	mov	fp, r1
   13c90:	mov	r5, #0
   13c94:	ldr	r0, [r7]
   13c98:	beq	13d1c <__assert_fail@plt+0x2858>
   13c9c:	ldr	r1, [pc, #316]	; 13de0 <__assert_fail@plt+0x291c>
   13ca0:	bl	14998 <__assert_fail@plt+0x34d4>
   13ca4:	cmp	r0, #0
   13ca8:	bge	13d28 <__assert_fail@plt+0x2864>
   13cac:	bl	1138c <__errno_location@plt>
   13cb0:	ldr	r8, [r0]
   13cb4:	mov	sl, r0
   13cb8:	sub	r3, r8, #23
   13cbc:	cmp	r3, #1
   13cc0:	bls	13cdc <__assert_fail@plt+0x2818>
   13cc4:	b	13d84 <__assert_fail@plt+0x28c0>
   13cc8:	cmp	r4, #0
   13ccc:	subne	r4, r4, #1
   13cd0:	subeq	r4, r9, #1
   13cd4:	cmp	r4, fp
   13cd8:	beq	13d60 <__assert_fail@plt+0x289c>
   13cdc:	add	r5, r6, r4, lsl #4
   13ce0:	ldr	r3, [r5, #4]
   13ce4:	cmp	r3, #0
   13ce8:	blt	13cc8 <__assert_fail@plt+0x2804>
   13cec:	ldr	r0, [r5, #8]
   13cf0:	bl	18204 <__assert_fail@plt+0x6d40>
   13cf4:	cmp	r0, #0
   13cf8:	bne	13d8c <__assert_fail@plt+0x28c8>
   13cfc:	mvn	r3, #1
   13d00:	str	r3, [r5, #4]
   13d04:	ldr	r3, [r7, #4]
   13d08:	str	r0, [r5, #8]
   13d0c:	cmn	r3, #1
   13d10:	mov	r5, #1
   13d14:	ldr	r0, [r7]
   13d18:	bne	13c9c <__assert_fail@plt+0x27d8>
   13d1c:	bl	13788 <__assert_fail@plt+0x22c4>
   13d20:	cmp	r0, #0
   13d24:	blt	13cac <__assert_fail@plt+0x27e8>
   13d28:	str	r0, [r7, #4]
   13d2c:	ldr	r1, [pc, #176]	; 13de4 <__assert_fail@plt+0x2920>
   13d30:	bl	11134 <fdopen@plt>
   13d34:	cmp	r0, #0
   13d38:	mov	r4, r0
   13d3c:	str	r0, [r7, #8]
   13d40:	beq	13db4 <__assert_fail@plt+0x28f0>
   13d44:	ldr	r3, [pc, #156]	; 13de8 <__assert_fail@plt+0x2924>
   13d48:	mov	r1, #0
   13d4c:	mov	r0, r5
   13d50:	ldr	r2, [r3, #288]	; 0x120
   13d54:	str	r1, [r3, #288]	; 0x120
   13d58:	str	r2, [r7, #12]
   13d5c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d60:	ldr	r2, [r6, r4, lsl #4]
   13d64:	mov	r1, #3
   13d68:	mov	r0, #0
   13d6c:	bl	16bcc <__assert_fail@plt+0x5708>
   13d70:	mov	r1, r8
   13d74:	ldr	r2, [pc, #112]	; 13dec <__assert_fail@plt+0x2928>
   13d78:	mov	r3, r0
   13d7c:	mov	r0, #1
   13d80:	bl	112c0 <error@plt>
   13d84:	ldr	r2, [r6, fp, lsl #4]
   13d88:	b	13d64 <__assert_fail@plt+0x28a0>
   13d8c:	ldr	r2, [r5]
   13d90:	mov	r1, #3
   13d94:	mov	r0, #0
   13d98:	ldr	r4, [sl]
   13d9c:	bl	16bcc <__assert_fail@plt+0x5708>
   13da0:	mov	r1, r4
   13da4:	ldr	r2, [pc, #64]	; 13dec <__assert_fail@plt+0x2928>
   13da8:	mov	r3, r0
   13dac:	mov	r0, #1
   13db0:	bl	112c0 <error@plt>
   13db4:	bl	1138c <__errno_location@plt>
   13db8:	ldr	r2, [r6, fp, lsl #4]
   13dbc:	mov	r1, #3
   13dc0:	ldr	r5, [r0]
   13dc4:	mov	r0, r4
   13dc8:	bl	16bcc <__assert_fail@plt+0x5708>
   13dcc:	mov	r1, r5
   13dd0:	ldr	r2, [pc, #20]	; 13dec <__assert_fail@plt+0x2928>
   13dd4:	mov	r3, r0
   13dd8:	mov	r0, #1
   13ddc:	bl	112c0 <error@plt>
   13de0:	andeq	r0, r0, r1, lsl #24
   13de4:	andeq	r9, r1, ip, asr #32
   13de8:	andeq	fp, r2, r8, ror #6
   13dec:	andeq	r9, r1, r0, asr #1
   13df0:	push	{r4, r5, r6, r7, r8, lr}
   13df4:	mov	r4, r1
   13df8:	ldr	r5, [pc, #696]	; 140b8 <__assert_fail@plt+0x2bf4>
   13dfc:	sub	sp, sp, #40	; 0x28
   13e00:	subs	r8, r0, #0
   13e04:	ldr	r1, [r5]
   13e08:	mov	r7, r2
   13e0c:	mov	r6, r3
   13e10:	str	r1, [sp, #36]	; 0x24
   13e14:	beq	13ee4 <__assert_fail@plt+0x2a20>
   13e18:	bl	18204 <__assert_fail@plt+0x6d40>
   13e1c:	cmp	r0, #0
   13e20:	beq	13e70 <__assert_fail@plt+0x29ac>
   13e24:	bl	1138c <__errno_location@plt>
   13e28:	ldr	r3, [pc, #652]	; 140bc <__assert_fail@plt+0x2bf8>
   13e2c:	ldr	r3, [r3, #40]	; 0x28
   13e30:	cmp	r3, #0
   13e34:	ldr	r8, [r0]
   13e38:	sub	r0, r8, #32
   13e3c:	clz	r0, r0
   13e40:	lsr	r0, r0, #5
   13e44:	moveq	r0, #0
   13e48:	cmp	r0, #0
   13e4c:	bne	13e70 <__assert_fail@plt+0x29ac>
   13e50:	mov	r2, r6
   13e54:	mov	r1, #3
   13e58:	bl	16bcc <__assert_fail@plt+0x5708>
   13e5c:	mov	r1, r8
   13e60:	ldr	r2, [pc, #600]	; 140c0 <__assert_fail@plt+0x2bfc>
   13e64:	mov	r3, r0
   13e68:	mov	r0, #1
   13e6c:	bl	112c0 <error@plt>
   13e70:	cmp	r4, #0
   13e74:	blt	13ec4 <__assert_fail@plt+0x2a00>
   13e78:	ldr	r2, [pc, #572]	; 140bc <__assert_fail@plt+0x2bf8>
   13e7c:	ldr	r1, [r2, #152]	; 0x98
   13e80:	cmp	r1, #0
   13e84:	beq	13ec4 <__assert_fail@plt+0x2a00>
   13e88:	ldr	r8, [r2, #156]	; 0x9c
   13e8c:	ldr	r3, [r8]
   13e90:	cmp	r4, r3
   13e94:	addne	r0, r8, #4
   13e98:	movne	r3, #0
   13e9c:	bne	13eb8 <__assert_fail@plt+0x29f4>
   13ea0:	b	13fcc <__assert_fail@plt+0x2b08>
   13ea4:	mov	ip, r0
   13ea8:	add	r0, r0, #4
   13eac:	ldr	lr, [ip]
   13eb0:	cmp	lr, r4
   13eb4:	beq	13fd0 <__assert_fail@plt+0x2b0c>
   13eb8:	add	r3, r3, #1
   13ebc:	cmp	r3, r1
   13ec0:	bne	13ea4 <__assert_fail@plt+0x29e0>
   13ec4:	cmp	r7, #0
   13ec8:	bgt	13f28 <__assert_fail@plt+0x2a64>
   13ecc:	ldr	r2, [sp, #36]	; 0x24
   13ed0:	ldr	r3, [r5]
   13ed4:	cmp	r2, r3
   13ed8:	bne	14090 <__assert_fail@plt+0x2bcc>
   13edc:	add	sp, sp, #40	; 0x28
   13ee0:	pop	{r4, r5, r6, r7, r8, pc}
   13ee4:	cmp	r4, #0
   13ee8:	blt	13ec4 <__assert_fail@plt+0x2a00>
   13eec:	mov	r0, r4
   13ef0:	bl	114ac <close@plt>
   13ef4:	cmp	r0, #0
   13ef8:	bge	13e78 <__assert_fail@plt+0x29b4>
   13efc:	bl	1138c <__errno_location@plt>
   13f00:	mov	r2, r6
   13f04:	mov	r1, #3
   13f08:	ldr	r4, [r0]
   13f0c:	mov	r0, r8
   13f10:	bl	16bcc <__assert_fail@plt+0x5708>
   13f14:	mov	r1, r4
   13f18:	ldr	r2, [pc, #416]	; 140c0 <__assert_fail@plt+0x2bfc>
   13f1c:	mov	r3, r0
   13f20:	mov	r0, #1
   13f24:	bl	112c0 <error@plt>
   13f28:	mov	r4, #0
   13f2c:	mov	r0, r7
   13f30:	mov	r2, r4
   13f34:	add	r1, sp, #12
   13f38:	str	r4, [sp, #12]
   13f3c:	bl	11284 <waitpid@plt>
   13f40:	cmn	r0, #1
   13f44:	beq	14044 <__assert_fail@plt+0x2b80>
   13f48:	ldr	r3, [sp, #12]
   13f4c:	and	r7, r3, #127	; 0x7f
   13f50:	add	r2, r7, #1
   13f54:	sxtb	r2, r2
   13f58:	cmp	r2, #1
   13f5c:	ble	13fe4 <__assert_fail@plt+0x2b20>
   13f60:	cmp	r7, #13
   13f64:	beq	13ecc <__assert_fail@plt+0x2a08>
   13f68:	add	r4, sp, #16
   13f6c:	mov	r1, r4
   13f70:	mov	r0, r7
   13f74:	bl	185c4 <__assert_fail@plt+0x7100>
   13f78:	cmp	r0, #0
   13f7c:	bne	14074 <__assert_fail@plt+0x2bb0>
   13f80:	mov	r2, #5
   13f84:	ldr	r1, [pc, #312]	; 140c4 <__assert_fail@plt+0x2c00>
   13f88:	mov	r0, #0
   13f8c:	bl	1120c <dcgettext@plt>
   13f90:	mov	r2, r6
   13f94:	mov	r1, #3
   13f98:	mov	r8, r0
   13f9c:	mov	r0, #0
   13fa0:	bl	16bcc <__assert_fail@plt+0x5708>
   13fa4:	ldr	r3, [pc, #272]	; 140bc <__assert_fail@plt+0x2bf8>
   13fa8:	str	r4, [sp]
   13fac:	mov	r2, r8
   13fb0:	ldr	r3, [r3, #40]	; 0x28
   13fb4:	mov	r1, #0
   13fb8:	str	r3, [sp, #4]
   13fbc:	mov	r3, r0
   13fc0:	add	r0, r7, #128	; 0x80
   13fc4:	bl	112c0 <error@plt>
   13fc8:	b	13ecc <__assert_fail@plt+0x2a08>
   13fcc:	mov	ip, r8
   13fd0:	sub	r1, r1, #1
   13fd4:	str	r1, [r2, #152]	; 0x98
   13fd8:	ldr	r3, [r8, r1, lsl #2]
   13fdc:	str	r3, [ip]
   13fe0:	b	13ec4 <__assert_fail@plt+0x2a00>
   13fe4:	cmp	r7, #0
   13fe8:	bne	14094 <__assert_fail@plt+0x2bd0>
   13fec:	asr	r3, r3, #8
   13ff0:	ands	r4, r3, #255	; 0xff
   13ff4:	beq	13ecc <__assert_fail@plt+0x2a08>
   13ff8:	mov	r2, #5
   13ffc:	ldr	r1, [pc, #196]	; 140c8 <__assert_fail@plt+0x2c04>
   14000:	mov	r0, r7
   14004:	bl	1120c <dcgettext@plt>
   14008:	mov	r2, r6
   1400c:	mov	r1, #3
   14010:	mov	r8, r0
   14014:	mov	r0, r7
   14018:	bl	16bcc <__assert_fail@plt+0x5708>
   1401c:	ldr	r3, [pc, #152]	; 140bc <__assert_fail@plt+0x2bf8>
   14020:	str	r4, [sp]
   14024:	mov	r2, r8
   14028:	ldr	r3, [r3, #40]	; 0x28
   1402c:	mov	r1, r7
   14030:	str	r3, [sp, #4]
   14034:	mov	r3, r0
   14038:	mov	r0, r4
   1403c:	bl	112c0 <error@plt>
   14040:	b	13ecc <__assert_fail@plt+0x2a08>
   14044:	bl	1138c <__errno_location@plt>
   14048:	ldr	r7, [r0]
   1404c:	cmp	r7, #10
   14050:	beq	13f48 <__assert_fail@plt+0x2a84>
   14054:	mov	r2, #5
   14058:	ldr	r1, [pc, #108]	; 140cc <__assert_fail@plt+0x2c08>
   1405c:	mov	r0, r4
   14060:	bl	1120c <dcgettext@plt>
   14064:	mov	r1, r7
   14068:	mov	r2, r0
   1406c:	mov	r0, #1
   14070:	bl	112c0 <error@plt>
   14074:	str	r7, [sp]
   14078:	ldr	r3, [pc, #80]	; 140d0 <__assert_fail@plt+0x2c0c>
   1407c:	mov	r2, #19
   14080:	mov	r1, #1
   14084:	mov	r0, r4
   14088:	bl	11398 <__sprintf_chk@plt>
   1408c:	b	13f80 <__assert_fail@plt+0x2abc>
   14090:	bl	11218 <__stack_chk_fail@plt>
   14094:	mov	r2, #5
   14098:	ldr	r1, [pc, #52]	; 140d4 <__assert_fail@plt+0x2c10>
   1409c:	mov	r0, #0
   140a0:	bl	1120c <dcgettext@plt>
   140a4:	ldr	r3, [sp, #12]
   140a8:	mov	r1, #0
   140ac:	mov	r2, r0
   140b0:	mov	r0, #1
   140b4:	bl	112c0 <error@plt>
   140b8:	andeq	sl, r2, r8, lsl #30
   140bc:	andeq	fp, r2, r8, ror #6
   140c0:	andeq	r9, r1, r0, asr #1
   140c4:	andeq	r9, r1, r0, ror r0
   140c8:	muleq	r1, ip, r0
   140cc:	andeq	r9, r1, r0, asr r0
   140d0:	andeq	r9, r1, ip, rrx
   140d4:	andeq	r9, r1, r4, asr #1
   140d8:	cmp	r0, #0
   140dc:	push	{r4, r5, r6, r7, r8, lr}
   140e0:	mov	r6, r1
   140e4:	mov	r4, r2
   140e8:	beq	1419c <__assert_fail@plt+0x2cd8>
   140ec:	orrs	r3, r1, r2
   140f0:	ldr	r5, [pc, #208]	; 141c8 <__assert_fail@plt+0x2d04>
   140f4:	bne	14104 <__assert_fail@plt+0x2c40>
   140f8:	ldrb	r3, [r5, #296]	; 0x128
   140fc:	cmp	r3, #0
   14100:	bne	14194 <__assert_fail@plt+0x2cd0>
   14104:	ldr	r7, [pc, #192]	; 141cc <__assert_fail@plt+0x2d08>
   14108:	ldr	r3, [r5]
   1410c:	ldr	r2, [r5, #288]	; 0x120
   14110:	ldr	r1, [r7, #8]
   14114:	mov	r0, #0
   14118:	bl	13df0 <__assert_fail@plt+0x292c>
   1411c:	bl	134e8 <__assert_fail@plt+0x2024>
   14120:	ldr	r0, [r5]
   14124:	bl	13788 <__assert_fail@plt+0x22c4>
   14128:	cmp	r0, #0
   1412c:	str	r0, [r7, #8]
   14130:	blt	141b0 <__assert_fail@plt+0x2cec>
   14134:	mov	r1, r6
   14138:	mov	r2, r4
   1413c:	bl	14a60 <__assert_fail@plt+0x359c>
   14140:	cmp	r0, r4
   14144:	beq	14194 <__assert_fail@plt+0x2cd0>
   14148:	bl	1138c <__errno_location@plt>
   1414c:	ldr	r3, [pc, #116]	; 141c8 <__assert_fail@plt+0x2d04>
   14150:	ldr	r2, [r3, #40]	; 0x28
   14154:	cmp	r2, #0
   14158:	ldr	r4, [r0]
   1415c:	sub	r0, r4, #32
   14160:	clz	r0, r0
   14164:	lsr	r0, r0, #5
   14168:	moveq	r0, #0
   1416c:	cmp	r0, #0
   14170:	moveq	r1, #3
   14174:	ldreq	r2, [r3]
   14178:	bne	141a8 <__assert_fail@plt+0x2ce4>
   1417c:	bl	16bcc <__assert_fail@plt+0x5708>
   14180:	mov	r1, r4
   14184:	ldr	r2, [pc, #68]	; 141d0 <__assert_fail@plt+0x2d0c>
   14188:	mov	r3, r0
   1418c:	mov	r0, #1
   14190:	bl	112c0 <error@plt>
   14194:	mov	r0, #1
   14198:	pop	{r4, r5, r6, r7, r8, pc}
   1419c:	ldr	r3, [pc, #40]	; 141cc <__assert_fail@plt+0x2d08>
   141a0:	ldr	r0, [r3, #8]
   141a4:	b	14134 <__assert_fail@plt+0x2c70>
   141a8:	mov	r0, #0
   141ac:	pop	{r4, r5, r6, r7, r8, pc}
   141b0:	bl	1138c <__errno_location@plt>
   141b4:	ldr	r2, [r5]
   141b8:	mov	r1, #3
   141bc:	ldr	r4, [r0]
   141c0:	mov	r0, #0
   141c4:	b	1417c <__assert_fail@plt+0x2cb8>
   141c8:	andeq	fp, r2, r8, ror #6
   141cc:	andeq	fp, r2, ip, asr #2
   141d0:	andeq	r9, r1, r0, asr #1
   141d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141d8:	sub	sp, sp, #52	; 0x34
   141dc:	mov	sl, #1
   141e0:	ldr	r5, [sp, #88]	; 0x58
   141e4:	strd	r0, [sp, #24]
   141e8:	cmn	r5, #1
   141ec:	strd	r2, [sp, #32]
   141f0:	mov	r6, r0
   141f4:	mov	r7, r1
   141f8:	mov	r4, sl
   141fc:	mov	r8, #0
   14200:	mov	r9, #0
   14204:	beq	142f0 <__assert_fail@plt+0x2e2c>
   14208:	cmp	r5, r3
   1420c:	movcs	r3, #0
   14210:	movcc	r3, #1
   14214:	str	r3, [sp, #20]
   14218:	mov	r3, #0
   1421c:	mov	r2, r5
   14220:	cmp	r7, r3
   14224:	cmpeq	r6, r5
   14228:	strd	r2, [sp, #8]
   1422c:	bhi	14350 <__assert_fail@plt+0x2e8c>
   14230:	ldr	r3, [sp, #96]	; 0x60
   14234:	ldr	r2, [sp, #100]	; 0x64
   14238:	ldr	fp, [sp, #32]
   1423c:	orrs	r3, r3, r2
   14240:	moveq	r3, #1
   14244:	movne	r3, #0
   14248:	orr	r2, sl, r4
   1424c:	str	r3, [sp, #8]
   14250:	mov	r3, fp
   14254:	ldrd	sl, [sp, #24]
   14258:	b	142a4 <__assert_fail@plt+0x2de0>
   1425c:	ldrd	r0, [sp, #96]	; 0x60
   14260:	adds	r8, r8, r4
   14264:	adc	r9, r9, #0
   14268:	cmp	r9, r1
   1426c:	ldr	r4, [sp, #8]
   14270:	cmpeq	r8, r0
   14274:	orrcc	r4, r4, #1
   14278:	orr	r2, r4, ip
   1427c:	tst	r2, #255	; 0xff
   14280:	beq	14458 <__assert_fail@plt+0x2f94>
   14284:	mov	r1, #0
   14288:	sub	r5, r5, r6
   1428c:	cmp	r1, fp
   14290:	cmpeq	r5, sl
   14294:	add	r3, r3, r6
   14298:	mov	r0, r5
   1429c:	mov	r6, sl
   142a0:	bcc	142cc <__assert_fail@plt+0x2e08>
   142a4:	ands	ip, r2, #255	; 0xff
   142a8:	beq	1425c <__assert_fail@plt+0x2d98>
   142ac:	mov	r1, r3
   142b0:	mov	r2, r6
   142b4:	mov	r0, r4
   142b8:	str	r3, [sp, #16]
   142bc:	bl	140d8 <__assert_fail@plt+0x2c14>
   142c0:	ldr	r3, [sp, #16]
   142c4:	mov	ip, r0
   142c8:	b	1425c <__assert_fail@plt+0x2d98>
   142cc:	cmp	r5, #0
   142d0:	mov	sl, ip
   142d4:	mov	fp, r3
   142d8:	strd	r0, [sp, #8]
   142dc:	ldrd	r6, [sp, #24]
   142e0:	bne	14370 <__assert_fail@plt+0x2eac>
   142e4:	ldr	r3, [sp, #20]
   142e8:	cmp	r3, #0
   142ec:	bne	14400 <__assert_fail@plt+0x2f3c>
   142f0:	cmp	sl, #0
   142f4:	beq	143cc <__assert_fail@plt+0x2f08>
   142f8:	ldr	r2, [sp, #36]	; 0x24
   142fc:	ldr	r1, [sp, #32]
   14300:	mov	r0, #0
   14304:	bl	16db0 <__assert_fail@plt+0x58ec>
   14308:	cmn	r0, #1
   1430c:	clzne	r3, r0
   14310:	lsrne	r3, r3, #5
   14314:	mov	r5, r0
   14318:	strne	r3, [sp, #20]
   1431c:	bne	14218 <__assert_fail@plt+0x2d54>
   14320:	bl	1138c <__errno_location@plt>
   14324:	ldr	r3, [pc, #308]	; 14460 <__assert_fail@plt+0x2f9c>
   14328:	mov	r1, #3
   1432c:	ldr	r2, [r3, #300]	; 0x12c
   14330:	ldr	r4, [r0]
   14334:	mov	r0, #0
   14338:	bl	16bcc <__assert_fail@plt+0x5708>
   1433c:	mov	r1, r4
   14340:	ldr	r2, [pc, #284]	; 14464 <__assert_fail@plt+0x2fa0>
   14344:	mov	r3, r0
   14348:	mov	r0, #1
   1434c:	bl	112c0 <error@plt>
   14350:	cmp	r5, #0
   14354:	beq	142e4 <__assert_fail@plt+0x2e20>
   14358:	orr	r2, r4, sl
   1435c:	ands	r2, r2, #255	; 0xff
   14360:	moveq	sl, r2
   14364:	moveq	r4, #1
   14368:	beq	14390 <__assert_fail@plt+0x2ecc>
   1436c:	ldr	fp, [sp, #32]
   14370:	mov	r2, r5
   14374:	mov	r0, r4
   14378:	mov	r1, fp
   1437c:	bl	140d8 <__assert_fail@plt+0x2c14>
   14380:	mov	r2, r4
   14384:	eor	r3, r0, #1
   14388:	mov	sl, r0
   1438c:	uxtb	r4, r3
   14390:	uxtb	r2, r2
   14394:	adds	r8, r8, r2
   14398:	mov	r3, #0
   1439c:	adc	r9, r9, r3
   143a0:	ldrd	r2, [sp, #96]	; 0x60
   143a4:	cmp	r3, r9
   143a8:	cmpeq	r2, r8
   143ac:	movne	r4, #0
   143b0:	andeq	r4, r4, #1
   143b4:	cmp	r4, #0
   143b8:	bne	14458 <__assert_fail@plt+0x2f94>
   143bc:	ldrd	r2, [sp, #8]
   143c0:	subs	r6, r6, r2
   143c4:	sbc	r7, r7, r3
   143c8:	b	142e4 <__assert_fail@plt+0x2e20>
   143cc:	mov	r3, #1
   143d0:	mov	r2, r6
   143d4:	str	r3, [sp]
   143d8:	mov	r0, sl
   143dc:	mov	r3, r7
   143e0:	bl	11278 <lseek64@plt>
   143e4:	mvn	r3, #0
   143e8:	mvn	r2, #0
   143ec:	cmp	r1, r3
   143f0:	cmpeq	r0, r2
   143f4:	movne	r4, #1
   143f8:	ldrdne	r6, [sp, #24]
   143fc:	b	142f8 <__assert_fail@plt+0x2e34>
   14400:	adds	r3, r8, #1
   14404:	str	r3, [sp, #40]	; 0x28
   14408:	adc	r3, r9, #0
   1440c:	str	r3, [sp, #44]	; 0x2c
   14410:	ldrd	r2, [sp, #96]	; 0x60
   14414:	cmp	r9, r3
   14418:	cmpeq	r8, r2
   1441c:	bcs	14458 <__assert_fail@plt+0x2f94>
   14420:	ldrd	r4, [sp, #40]	; 0x28
   14424:	ldrd	r6, [sp, #96]	; 0x60
   14428:	b	14434 <__assert_fail@plt+0x2f70>
   1442c:	mov	r4, r2
   14430:	mov	r5, r3
   14434:	mov	r2, #0
   14438:	mov	r1, r2
   1443c:	mov	r0, #1
   14440:	bl	140d8 <__assert_fail@plt+0x2c14>
   14444:	adds	r2, r4, #1
   14448:	adc	r3, r5, #0
   1444c:	cmp	r7, r5
   14450:	cmpeq	r6, r4
   14454:	bne	1442c <__assert_fail@plt+0x2f68>
   14458:	add	sp, sp, #52	; 0x34
   1445c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14460:	andeq	fp, r2, r8, ror #6
   14464:	andeq	r9, r1, r0, asr #1
   14468:	ldr	r3, [pc, #808]	; 14798 <__assert_fail@plt+0x32d4>
   1446c:	push	{r7, lr}
   14470:	sub	sp, sp, #64	; 0x40
   14474:	ldr	r3, [r3]
   14478:	subs	r4, r0, #0
   1447c:	str	r3, [sp, #60]	; 0x3c
   14480:	beq	144bc <__assert_fail@plt+0x2ff8>
   14484:	ldr	r3, [pc, #784]	; 1479c <__assert_fail@plt+0x32d8>
   14488:	mov	r2, #5
   1448c:	ldr	r1, [pc, #780]	; 147a0 <__assert_fail@plt+0x32dc>
   14490:	mov	r0, #0
   14494:	ldr	r5, [r3]
   14498:	bl	1120c <dcgettext@plt>
   1449c:	ldr	r3, [pc, #768]	; 147a4 <__assert_fail@plt+0x32e0>
   144a0:	mov	r1, #1
   144a4:	ldr	r3, [r3]
   144a8:	mov	r2, r0
   144ac:	mov	r0, r5
   144b0:	bl	113e0 <__fprintf_chk@plt>
   144b4:	mov	r0, r4
   144b8:	bl	11338 <exit@plt>
   144bc:	mov	r2, #5
   144c0:	ldr	r1, [pc, #736]	; 147a8 <__assert_fail@plt+0x32e4>
   144c4:	bl	1120c <dcgettext@plt>
   144c8:	ldr	r3, [pc, #724]	; 147a4 <__assert_fail@plt+0x32e0>
   144cc:	ldr	r5, [pc, #728]	; 147ac <__assert_fail@plt+0x32e8>
   144d0:	ldr	r2, [r3]
   144d4:	mov	r1, r0
   144d8:	mov	r0, #1
   144dc:	bl	113bc <__printf_chk@plt>
   144e0:	mov	r2, #5
   144e4:	ldr	r1, [pc, #708]	; 147b0 <__assert_fail@plt+0x32ec>
   144e8:	mov	r0, r4
   144ec:	bl	1120c <dcgettext@plt>
   144f0:	ldr	r1, [r5]
   144f4:	bl	1114c <fputs_unlocked@plt>
   144f8:	mov	r2, #5
   144fc:	ldr	r1, [pc, #688]	; 147b4 <__assert_fail@plt+0x32f0>
   14500:	mov	r0, r4
   14504:	bl	1120c <dcgettext@plt>
   14508:	ldr	r1, [r5]
   1450c:	bl	1114c <fputs_unlocked@plt>
   14510:	mov	r2, #5
   14514:	ldr	r1, [pc, #668]	; 147b8 <__assert_fail@plt+0x32f4>
   14518:	mov	r0, r4
   1451c:	bl	1120c <dcgettext@plt>
   14520:	ldr	r1, [r5]
   14524:	bl	1114c <fputs_unlocked@plt>
   14528:	mov	r2, #5
   1452c:	ldr	r1, [pc, #648]	; 147bc <__assert_fail@plt+0x32f8>
   14530:	mov	r0, r4
   14534:	ldr	r6, [r5]
   14538:	bl	1120c <dcgettext@plt>
   1453c:	mov	r3, #2
   14540:	mov	r1, #1
   14544:	mov	r2, r0
   14548:	mov	r0, r6
   1454c:	bl	113e0 <__fprintf_chk@plt>
   14550:	mov	r2, #5
   14554:	ldr	r1, [pc, #612]	; 147c0 <__assert_fail@plt+0x32fc>
   14558:	mov	r0, r4
   1455c:	bl	1120c <dcgettext@plt>
   14560:	ldr	r1, [r5]
   14564:	bl	1114c <fputs_unlocked@plt>
   14568:	mov	r2, #5
   1456c:	ldr	r1, [pc, #592]	; 147c4 <__assert_fail@plt+0x3300>
   14570:	mov	r0, r4
   14574:	bl	1120c <dcgettext@plt>
   14578:	ldr	r1, [r5]
   1457c:	bl	1114c <fputs_unlocked@plt>
   14580:	mov	r2, #5
   14584:	ldr	r1, [pc, #572]	; 147c8 <__assert_fail@plt+0x3304>
   14588:	mov	r0, r4
   1458c:	bl	1120c <dcgettext@plt>
   14590:	ldr	r1, [r5]
   14594:	bl	1114c <fputs_unlocked@plt>
   14598:	mov	r2, #5
   1459c:	ldr	r1, [pc, #552]	; 147cc <__assert_fail@plt+0x3308>
   145a0:	mov	r0, r4
   145a4:	bl	1120c <dcgettext@plt>
   145a8:	ldr	r1, [r5]
   145ac:	bl	1114c <fputs_unlocked@plt>
   145b0:	mov	r2, #5
   145b4:	ldr	r1, [pc, #532]	; 147d0 <__assert_fail@plt+0x330c>
   145b8:	mov	r0, r4
   145bc:	bl	1120c <dcgettext@plt>
   145c0:	ldr	r1, [r5]
   145c4:	bl	1114c <fputs_unlocked@plt>
   145c8:	ldr	lr, [pc, #516]	; 147d4 <__assert_fail@plt+0x3310>
   145cc:	add	ip, sp, #4
   145d0:	ldm	lr!, {r0, r1, r2, r3}
   145d4:	stmia	ip!, {r0, r1, r2, r3}
   145d8:	ldm	lr!, {r0, r1, r2, r3}
   145dc:	ldr	r6, [sp, #4]
   145e0:	stmia	ip!, {r0, r1, r2, r3}
   145e4:	cmp	r6, #0
   145e8:	ldm	lr!, {r0, r1, r2, r3}
   145ec:	addeq	r5, sp, #4
   145f0:	stmia	ip!, {r0, r1, r2, r3}
   145f4:	ldm	lr, {r0, r1}
   145f8:	stm	ip, {r0, r1}
   145fc:	beq	1462c <__assert_fail@plt+0x3168>
   14600:	ldr	r7, [pc, #464]	; 147d8 <__assert_fail@plt+0x3314>
   14604:	add	r5, sp, #4
   14608:	b	14618 <__assert_fail@plt+0x3154>
   1460c:	ldr	r6, [r5, #8]!
   14610:	cmp	r6, #0
   14614:	beq	1462c <__assert_fail@plt+0x3168>
   14618:	mov	r1, r6
   1461c:	mov	r0, r7
   14620:	bl	11164 <strcmp@plt>
   14624:	cmp	r0, #0
   14628:	bne	1460c <__assert_fail@plt+0x3148>
   1462c:	ldr	r5, [r5, #4]
   14630:	mov	r2, #5
   14634:	cmp	r5, #0
   14638:	ldr	r1, [pc, #412]	; 147dc <__assert_fail@plt+0x3318>
   1463c:	beq	146e4 <__assert_fail@plt+0x3220>
   14640:	mov	r0, #0
   14644:	bl	1120c <dcgettext@plt>
   14648:	ldr	r3, [pc, #400]	; 147e0 <__assert_fail@plt+0x331c>
   1464c:	ldr	r2, [pc, #400]	; 147e4 <__assert_fail@plt+0x3320>
   14650:	mov	r1, r0
   14654:	mov	r0, #1
   14658:	bl	113bc <__printf_chk@plt>
   1465c:	mov	r1, #0
   14660:	mov	r0, #5
   14664:	bl	11428 <setlocale@plt>
   14668:	cmp	r0, #0
   1466c:	ldreq	r6, [pc, #356]	; 147d8 <__assert_fail@plt+0x3314>
   14670:	beq	1468c <__assert_fail@plt+0x31c8>
   14674:	mov	r2, #3
   14678:	ldr	r1, [pc, #360]	; 147e8 <__assert_fail@plt+0x3324>
   1467c:	bl	11494 <strncmp@plt>
   14680:	ldr	r6, [pc, #336]	; 147d8 <__assert_fail@plt+0x3314>
   14684:	cmp	r0, #0
   14688:	bne	14774 <__assert_fail@plt+0x32b0>
   1468c:	mov	r2, #5
   14690:	ldr	r1, [pc, #340]	; 147ec <__assert_fail@plt+0x3328>
   14694:	mov	r0, #0
   14698:	bl	1120c <dcgettext@plt>
   1469c:	ldr	r3, [pc, #308]	; 147d8 <__assert_fail@plt+0x3314>
   146a0:	ldr	r2, [pc, #312]	; 147e0 <__assert_fail@plt+0x331c>
   146a4:	mov	r1, r0
   146a8:	mov	r0, #1
   146ac:	bl	113bc <__printf_chk@plt>
   146b0:	mov	r2, #5
   146b4:	ldr	r1, [pc, #308]	; 147f0 <__assert_fail@plt+0x332c>
   146b8:	mov	r0, #0
   146bc:	bl	1120c <dcgettext@plt>
   146c0:	ldr	r2, [pc, #300]	; 147f4 <__assert_fail@plt+0x3330>
   146c4:	cmp	r5, r6
   146c8:	ldr	r3, [pc, #296]	; 147f8 <__assert_fail@plt+0x3334>
   146cc:	movne	r3, r2
   146d0:	mov	r1, r0
   146d4:	mov	r2, r5
   146d8:	mov	r0, #1
   146dc:	bl	113bc <__printf_chk@plt>
   146e0:	b	144b4 <__assert_fail@plt+0x2ff0>
   146e4:	mov	r0, r5
   146e8:	bl	1120c <dcgettext@plt>
   146ec:	ldr	r3, [pc, #236]	; 147e0 <__assert_fail@plt+0x331c>
   146f0:	ldr	r2, [pc, #236]	; 147e4 <__assert_fail@plt+0x3320>
   146f4:	mov	r1, r0
   146f8:	mov	r0, #1
   146fc:	bl	113bc <__printf_chk@plt>
   14700:	mov	r1, r5
   14704:	mov	r0, #5
   14708:	bl	11428 <setlocale@plt>
   1470c:	cmp	r0, #0
   14710:	beq	14728 <__assert_fail@plt+0x3264>
   14714:	mov	r2, #3
   14718:	ldr	r1, [pc, #200]	; 147e8 <__assert_fail@plt+0x3324>
   1471c:	bl	11494 <strncmp@plt>
   14720:	cmp	r0, #0
   14724:	bne	1476c <__assert_fail@plt+0x32a8>
   14728:	mov	r2, #5
   1472c:	ldr	r1, [pc, #184]	; 147ec <__assert_fail@plt+0x3328>
   14730:	mov	r0, #0
   14734:	bl	1120c <dcgettext@plt>
   14738:	ldr	r3, [pc, #152]	; 147d8 <__assert_fail@plt+0x3314>
   1473c:	ldr	r2, [pc, #156]	; 147e0 <__assert_fail@plt+0x331c>
   14740:	mov	r5, r3
   14744:	mov	r1, r0
   14748:	mov	r0, #1
   1474c:	bl	113bc <__printf_chk@plt>
   14750:	ldr	r1, [pc, #152]	; 147f0 <__assert_fail@plt+0x332c>
   14754:	mov	r2, #5
   14758:	mov	r0, #0
   1475c:	bl	1120c <dcgettext@plt>
   14760:	ldr	r3, [pc, #144]	; 147f8 <__assert_fail@plt+0x3334>
   14764:	mov	r1, r0
   14768:	b	146d4 <__assert_fail@plt+0x3210>
   1476c:	ldr	r6, [pc, #100]	; 147d8 <__assert_fail@plt+0x3314>
   14770:	mov	r5, r6
   14774:	mov	r2, #5
   14778:	ldr	r1, [pc, #124]	; 147fc <__assert_fail@plt+0x3338>
   1477c:	mov	r0, #0
   14780:	bl	1120c <dcgettext@plt>
   14784:	ldr	r2, [pc, #76]	; 147d8 <__assert_fail@plt+0x3314>
   14788:	mov	r1, r0
   1478c:	mov	r0, #1
   14790:	bl	113bc <__printf_chk@plt>
   14794:	b	1468c <__assert_fail@plt+0x31c8>
   14798:	andeq	sl, r2, r8, lsl #30
   1479c:	andeq	fp, r2, r8, asr r3
   147a0:	strdeq	r9, [r1], -r0
   147a4:	andeq	fp, r2, r4, lsr #10
   147a8:	andeq	r9, r1, r8, lsl r1
   147ac:	andeq	fp, r2, ip, asr r3
   147b0:	andeq	r9, r1, r0, asr #2
   147b4:	andeq	r9, r1, ip, lsr #3
   147b8:	andeq	r9, r1, r4, ror #3
   147bc:	andeq	r9, r1, r0, lsr r2
   147c0:	andeq	r9, r1, r4, ror r6
   147c4:	andeq	r9, r1, r8, ror #13
   147c8:	andeq	r9, r1, r8, lsl r7
   147cc:	andeq	r9, r1, r0, asr r7
   147d0:	andeq	r9, r1, ip, ror #15
   147d4:	andeq	r8, r1, r8, lsl sp
   147d8:	andeq	r9, r1, r8, ror #1
   147dc:	andeq	r9, r1, r0, asr #18
   147e0:	andeq	r9, r1, r8, asr r9
   147e4:	andeq	r9, r1, r0, lsl #19
   147e8:	muleq	r1, r0, r9
   147ec:	ldrdeq	r9, [r1], -ip
   147f0:	strdeq	r9, [r1], -ip
   147f4:	andeq	r9, r1, r8, ror #15
   147f8:	andeq	r9, r1, r0, ror #27
   147fc:	muleq	r1, r4, r9
   14800:	ldr	r3, [pc, #4]	; 1480c <__assert_fail@plt+0x3348>
   14804:	str	r0, [r3]
   14808:	bx	lr
   1480c:	andeq	fp, r2, ip, lsl r5
   14810:	ldr	r3, [pc, #4]	; 1481c <__assert_fail@plt+0x3358>
   14814:	strb	r0, [r3, #4]
   14818:	bx	lr
   1481c:	andeq	fp, r2, ip, lsl r5
   14820:	ldr	r3, [pc, #180]	; 148dc <__assert_fail@plt+0x3418>
   14824:	push	{r4, r5, r6, lr}
   14828:	sub	sp, sp, #8
   1482c:	ldr	r0, [r3]
   14830:	bl	186b4 <__assert_fail@plt+0x71f0>
   14834:	cmp	r0, #0
   14838:	beq	14860 <__assert_fail@plt+0x339c>
   1483c:	bl	1138c <__errno_location@plt>
   14840:	ldr	r5, [pc, #152]	; 148e0 <__assert_fail@plt+0x341c>
   14844:	ldrb	r3, [r5, #4]
   14848:	cmp	r3, #0
   1484c:	mov	r4, r0
   14850:	beq	1487c <__assert_fail@plt+0x33b8>
   14854:	ldr	r3, [r0]
   14858:	cmp	r3, #32
   1485c:	bne	1487c <__assert_fail@plt+0x33b8>
   14860:	ldr	r3, [pc, #124]	; 148e4 <__assert_fail@plt+0x3420>
   14864:	ldr	r0, [r3]
   14868:	bl	186b4 <__assert_fail@plt+0x71f0>
   1486c:	cmp	r0, #0
   14870:	bne	148bc <__assert_fail@plt+0x33f8>
   14874:	add	sp, sp, #8
   14878:	pop	{r4, r5, r6, pc}
   1487c:	mov	r2, #5
   14880:	ldr	r1, [pc, #96]	; 148e8 <__assert_fail@plt+0x3424>
   14884:	mov	r0, #0
   14888:	bl	1120c <dcgettext@plt>
   1488c:	mov	r6, r0
   14890:	ldr	r0, [r5]
   14894:	cmp	r0, #0
   14898:	beq	148c8 <__assert_fail@plt+0x3404>
   1489c:	ldr	r4, [r4]
   148a0:	bl	16bb8 <__assert_fail@plt+0x56f4>
   148a4:	mov	r1, r4
   148a8:	str	r6, [sp]
   148ac:	ldr	r2, [pc, #56]	; 148ec <__assert_fail@plt+0x3428>
   148b0:	mov	r3, r0
   148b4:	mov	r0, #0
   148b8:	bl	112c0 <error@plt>
   148bc:	ldr	r3, [pc, #44]	; 148f0 <__assert_fail@plt+0x342c>
   148c0:	ldr	r0, [r3]
   148c4:	bl	111b8 <_exit@plt>
   148c8:	mov	r3, r6
   148cc:	ldr	r1, [r4]
   148d0:	ldr	r2, [pc, #28]	; 148f4 <__assert_fail@plt+0x3430>
   148d4:	bl	112c0 <error@plt>
   148d8:	b	148bc <__assert_fail@plt+0x33f8>
   148dc:	andeq	fp, r2, ip, asr r3
   148e0:	andeq	fp, r2, ip, lsl r5
   148e4:	andeq	fp, r2, r8, asr r3
   148e8:	andeq	r9, r1, ip, asr #27
   148ec:	andeq	r9, r1, r4, asr #25
   148f0:	andeq	fp, r2, r0, ror #2
   148f4:	andeq	r9, r1, r0, asr #1
   148f8:	ldrb	r3, [r0]
   148fc:	cmp	r3, #47	; 0x2f
   14900:	bne	14910 <__assert_fail@plt+0x344c>
   14904:	ldrb	r3, [r0, #1]!
   14908:	cmp	r3, #47	; 0x2f
   1490c:	beq	14904 <__assert_fail@plt+0x3440>
   14910:	cmp	r3, #0
   14914:	bxeq	lr
   14918:	mov	r2, r0
   1491c:	mov	r1, #0
   14920:	cmp	r3, #47	; 0x2f
   14924:	moveq	r1, #1
   14928:	beq	14938 <__assert_fail@plt+0x3474>
   1492c:	cmp	r1, #0
   14930:	movne	r0, r2
   14934:	movne	r1, #0
   14938:	ldrb	r3, [r2, #1]!
   1493c:	cmp	r3, #0
   14940:	bne	14920 <__assert_fail@plt+0x345c>
   14944:	bx	lr
   14948:	push	{r4, lr}
   1494c:	mov	r4, r0
   14950:	bl	11344 <strlen@plt>
   14954:	cmp	r0, #1
   14958:	popls	{r4, pc}
   1495c:	add	r2, r4, r0
   14960:	mov	r3, r0
   14964:	ldrb	r2, [r2, #-1]
   14968:	cmp	r2, #47	; 0x2f
   1496c:	subeq	r3, r0, #2
   14970:	addeq	r3, r4, r3
   14974:	rsbeq	r1, r4, #1
   14978:	popne	{r4, pc}
   1497c:	cmp	r3, r4
   14980:	add	r0, r1, r3
   14984:	popeq	{r4, pc}
   14988:	ldrb	r2, [r3], #-1
   1498c:	cmp	r2, #47	; 0x2f
   14990:	popne	{r4, pc}
   14994:	b	1497c <__assert_fail@plt+0x34b8>
   14998:	push	{r1, r2, r3}
   1499c:	push	{r4, lr}
   149a0:	sub	sp, sp, #12
   149a4:	ldr	r4, [pc, #68]	; 149f0 <__assert_fail@plt+0x352c>
   149a8:	ldr	r1, [sp, #20]
   149ac:	ldr	r3, [r4]
   149b0:	ands	r2, r1, #64	; 0x40
   149b4:	str	r3, [sp, #4]
   149b8:	ldrne	r2, [sp, #24]
   149bc:	addne	r3, sp, #24
   149c0:	strne	r3, [sp]
   149c4:	bl	112cc <open64@plt>
   149c8:	bl	16e80 <__assert_fail@plt+0x59bc>
   149cc:	ldr	r2, [sp, #4]
   149d0:	ldr	r3, [r4]
   149d4:	cmp	r2, r3
   149d8:	bne	149ec <__assert_fail@plt+0x3528>
   149dc:	add	sp, sp, #12
   149e0:	pop	{r4, lr}
   149e4:	add	sp, sp, #12
   149e8:	bx	lr
   149ec:	bl	11218 <__stack_chk_fail@plt>
   149f0:	andeq	sl, r2, r8, lsl #30
   149f4:	mov	ip, r1
   149f8:	push	{r4, r5, r6, r7, r8, lr}
   149fc:	mov	r1, r2
   14a00:	mov	r5, r0
   14a04:	mov	r2, r3
   14a08:	mov	r0, ip
   14a0c:	bl	112cc <open64@plt>
   14a10:	sub	r3, r5, r0
   14a14:	clz	r3, r3
   14a18:	lsr	r3, r3, #5
   14a1c:	orrs	r3, r3, r0, lsr #31
   14a20:	mov	r4, r0
   14a24:	beq	14a30 <__assert_fail@plt+0x356c>
   14a28:	mov	r0, r4
   14a2c:	pop	{r4, r5, r6, r7, r8, pc}
   14a30:	mov	r1, r5
   14a34:	bl	11224 <dup2@plt>
   14a38:	mov	r7, r0
   14a3c:	bl	1138c <__errno_location@plt>
   14a40:	mov	r5, r0
   14a44:	mov	r0, r4
   14a48:	ldr	r6, [r5]
   14a4c:	mov	r4, r7
   14a50:	bl	114ac <close@plt>
   14a54:	str	r6, [r5]
   14a58:	mov	r0, r4
   14a5c:	pop	{r4, r5, r6, r7, r8, pc}
   14a60:	push	{r4, r5, r6, r7, r8, lr}
   14a64:	subs	r4, r2, #0
   14a68:	beq	14ac8 <__assert_fail@plt+0x3604>
   14a6c:	mov	r7, r0
   14a70:	mov	r5, r1
   14a74:	mov	r6, #0
   14a78:	b	14a94 <__assert_fail@plt+0x35d0>
   14a7c:	cmp	r0, #0
   14a80:	beq	14ab4 <__assert_fail@plt+0x35f0>
   14a84:	subs	r4, r4, r0
   14a88:	add	r6, r6, r0
   14a8c:	add	r5, r5, r0
   14a90:	beq	14aac <__assert_fail@plt+0x35e8>
   14a94:	mov	r2, r4
   14a98:	mov	r1, r5
   14a9c:	mov	r0, r7
   14aa0:	bl	16e18 <__assert_fail@plt+0x5954>
   14aa4:	cmn	r0, #1
   14aa8:	bne	14a7c <__assert_fail@plt+0x35b8>
   14aac:	mov	r0, r6
   14ab0:	pop	{r4, r5, r6, r7, r8, pc}
   14ab4:	bl	1138c <__errno_location@plt>
   14ab8:	mov	r3, #28
   14abc:	str	r3, [r0]
   14ac0:	mov	r0, r6
   14ac4:	pop	{r4, r5, r6, r7, r8, pc}
   14ac8:	mov	r6, r4
   14acc:	b	14aac <__assert_fail@plt+0x35e8>
   14ad0:	push	{r4, r5, r6, lr}
   14ad4:	mov	r4, r0
   14ad8:	mov	r5, r1
   14adc:	add	r6, r2, #20
   14ae0:	mov	r3, #0
   14ae4:	strb	r3, [r2, #20]
   14ae8:	mov	r0, r4
   14aec:	mov	r1, r5
   14af0:	mov	r2, #10
   14af4:	mov	r3, #0
   14af8:	bl	18b0c <__assert_fail@plt+0x7648>
   14afc:	mov	r0, r4
   14b00:	mov	r1, r5
   14b04:	mov	r3, #0
   14b08:	add	r2, r2, #48	; 0x30
   14b0c:	strb	r2, [r6, #-1]!
   14b10:	mov	r2, #10
   14b14:	bl	18b0c <__assert_fail@plt+0x7648>
   14b18:	cmp	r5, #0
   14b1c:	cmpeq	r4, #9
   14b20:	mov	r5, r1
   14b24:	mov	r4, r0
   14b28:	bhi	14ae8 <__assert_fail@plt+0x3624>
   14b2c:	mov	r0, r6
   14b30:	pop	{r4, r5, r6, pc}
   14b34:	push	{r4, r5, r6, lr}
   14b38:	subs	r4, r0, #0
   14b3c:	beq	14bb0 <__assert_fail@plt+0x36ec>
   14b40:	mov	r1, #47	; 0x2f
   14b44:	bl	11458 <strrchr@plt>
   14b48:	subs	r5, r0, #0
   14b4c:	beq	14b9c <__assert_fail@plt+0x36d8>
   14b50:	add	r6, r5, #1
   14b54:	sub	r3, r6, r4
   14b58:	cmp	r3, #6
   14b5c:	ble	14b9c <__assert_fail@plt+0x36d8>
   14b60:	mov	r2, #7
   14b64:	ldr	r1, [pc, #96]	; 14bcc <__assert_fail@plt+0x3708>
   14b68:	sub	r0, r5, #6
   14b6c:	bl	11494 <strncmp@plt>
   14b70:	cmp	r0, #0
   14b74:	bne	14b9c <__assert_fail@plt+0x36d8>
   14b78:	mov	r2, #3
   14b7c:	ldr	r1, [pc, #76]	; 14bd0 <__assert_fail@plt+0x370c>
   14b80:	mov	r0, r6
   14b84:	bl	11494 <strncmp@plt>
   14b88:	cmp	r0, #0
   14b8c:	movne	r4, r6
   14b90:	ldreq	r3, [pc, #60]	; 14bd4 <__assert_fail@plt+0x3710>
   14b94:	addeq	r4, r5, #4
   14b98:	streq	r4, [r3]
   14b9c:	ldr	r2, [pc, #52]	; 14bd8 <__assert_fail@plt+0x3714>
   14ba0:	ldr	r3, [pc, #52]	; 14bdc <__assert_fail@plt+0x3718>
   14ba4:	str	r4, [r2]
   14ba8:	str	r4, [r3]
   14bac:	pop	{r4, r5, r6, pc}
   14bb0:	ldr	r3, [pc, #40]	; 14be0 <__assert_fail@plt+0x371c>
   14bb4:	mov	r2, #55	; 0x37
   14bb8:	mov	r1, #1
   14bbc:	ldr	r3, [r3]
   14bc0:	ldr	r0, [pc, #28]	; 14be4 <__assert_fail@plt+0x3720>
   14bc4:	bl	1126c <fwrite@plt>
   14bc8:	bl	114a0 <abort@plt>
   14bcc:	andeq	r9, r1, r4, ror #30
   14bd0:	andeq	r9, r1, ip, ror #30
   14bd4:	andeq	fp, r2, r8, asr #6
   14bd8:	andeq	fp, r2, r4, lsr #10
   14bdc:	andeq	fp, r2, ip, asr #6
   14be0:	andeq	fp, r2, r8, asr r3
   14be4:	andeq	r9, r1, ip, lsr #30
   14be8:	push	{r4, lr}
   14bec:	mov	r2, #48	; 0x30
   14bf0:	mov	r4, r1
   14bf4:	mov	r1, #0
   14bf8:	bl	113b0 <memset@plt>
   14bfc:	cmp	r4, #10
   14c00:	beq	14c0c <__assert_fail@plt+0x3748>
   14c04:	str	r4, [r0]
   14c08:	pop	{r4, pc}
   14c0c:	bl	114a0 <abort@plt>
   14c10:	push	{r4, r5, r6, lr}
   14c14:	mov	r2, #5
   14c18:	mov	r5, r0
   14c1c:	mov	r6, r1
   14c20:	mov	r1, r0
   14c24:	mov	r0, #0
   14c28:	bl	1120c <dcgettext@plt>
   14c2c:	cmp	r5, r0
   14c30:	mov	r4, r0
   14c34:	beq	14c40 <__assert_fail@plt+0x377c>
   14c38:	mov	r0, r4
   14c3c:	pop	{r4, r5, r6, pc}
   14c40:	bl	18774 <__assert_fail@plt+0x72b0>
   14c44:	ldrb	r3, [r0]
   14c48:	bic	r3, r3, #32
   14c4c:	cmp	r3, #85	; 0x55
   14c50:	bne	14cb0 <__assert_fail@plt+0x37ec>
   14c54:	ldrb	r3, [r0, #1]
   14c58:	bic	r3, r3, #32
   14c5c:	cmp	r3, #84	; 0x54
   14c60:	bne	14d28 <__assert_fail@plt+0x3864>
   14c64:	ldrb	r3, [r0, #2]
   14c68:	bic	r3, r3, #32
   14c6c:	cmp	r3, #70	; 0x46
   14c70:	bne	14d28 <__assert_fail@plt+0x3864>
   14c74:	ldrb	r3, [r0, #3]
   14c78:	cmp	r3, #45	; 0x2d
   14c7c:	bne	14d28 <__assert_fail@plt+0x3864>
   14c80:	ldrb	r3, [r0, #4]
   14c84:	cmp	r3, #56	; 0x38
   14c88:	bne	14d28 <__assert_fail@plt+0x3864>
   14c8c:	ldrb	r3, [r0, #5]
   14c90:	cmp	r3, #0
   14c94:	bne	14d28 <__assert_fail@plt+0x3864>
   14c98:	ldrb	r2, [r4]
   14c9c:	ldr	r3, [pc, #156]	; 14d40 <__assert_fail@plt+0x387c>
   14ca0:	ldr	r4, [pc, #156]	; 14d44 <__assert_fail@plt+0x3880>
   14ca4:	cmp	r2, #96	; 0x60
   14ca8:	movne	r4, r3
   14cac:	b	14c38 <__assert_fail@plt+0x3774>
   14cb0:	cmp	r3, #71	; 0x47
   14cb4:	bne	14d28 <__assert_fail@plt+0x3864>
   14cb8:	ldrb	r3, [r0, #1]
   14cbc:	bic	r3, r3, #32
   14cc0:	cmp	r3, #66	; 0x42
   14cc4:	bne	14d28 <__assert_fail@plt+0x3864>
   14cc8:	ldrb	r3, [r0, #2]
   14ccc:	cmp	r3, #49	; 0x31
   14cd0:	bne	14d28 <__assert_fail@plt+0x3864>
   14cd4:	ldrb	r3, [r0, #3]
   14cd8:	cmp	r3, #56	; 0x38
   14cdc:	bne	14d28 <__assert_fail@plt+0x3864>
   14ce0:	ldrb	r3, [r0, #4]
   14ce4:	cmp	r3, #48	; 0x30
   14ce8:	bne	14d28 <__assert_fail@plt+0x3864>
   14cec:	ldrb	r3, [r0, #5]
   14cf0:	cmp	r3, #51	; 0x33
   14cf4:	bne	14d28 <__assert_fail@plt+0x3864>
   14cf8:	ldrb	r3, [r0, #6]
   14cfc:	cmp	r3, #48	; 0x30
   14d00:	bne	14d28 <__assert_fail@plt+0x3864>
   14d04:	ldrb	r3, [r0, #7]
   14d08:	cmp	r3, #0
   14d0c:	bne	14d28 <__assert_fail@plt+0x3864>
   14d10:	ldrb	r2, [r4]
   14d14:	ldr	r3, [pc, #44]	; 14d48 <__assert_fail@plt+0x3884>
   14d18:	ldr	r4, [pc, #44]	; 14d4c <__assert_fail@plt+0x3888>
   14d1c:	cmp	r2, #96	; 0x60
   14d20:	movne	r4, r3
   14d24:	b	14c38 <__assert_fail@plt+0x3774>
   14d28:	ldr	r3, [pc, #32]	; 14d50 <__assert_fail@plt+0x388c>
   14d2c:	ldr	r4, [pc, #32]	; 14d54 <__assert_fail@plt+0x3890>
   14d30:	cmp	r6, #9
   14d34:	movne	r4, r3
   14d38:	mov	r0, r4
   14d3c:	pop	{r4, r5, r6, pc}
   14d40:	andeq	r9, r1, r4, asr #31
   14d44:	ldrdeq	r9, [r1], -r0
   14d48:	andeq	r9, r1, r8, asr #31
   14d4c:	andeq	r9, r1, ip, asr #31
   14d50:	ldrdeq	r9, [r1], -r4
   14d54:	andeq	r9, r1, r4, lsl r0
   14d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d5c:	sub	sp, sp, #124	; 0x7c
   14d60:	ldr	ip, [pc, #3576]	; 15b60 <__assert_fail@plt+0x469c>
   14d64:	str	r3, [sp, #24]
   14d68:	ldr	r3, [sp, #168]	; 0xa8
   14d6c:	ldr	ip, [ip]
   14d70:	str	r3, [sp, #56]	; 0x38
   14d74:	ldr	r3, [sp, #172]	; 0xac
   14d78:	ldr	r8, [sp, #160]	; 0xa0
   14d7c:	str	r3, [sp, #80]	; 0x50
   14d80:	ldr	r3, [sp, #176]	; 0xb0
   14d84:	mov	fp, r0
   14d88:	str	r3, [sp, #76]	; 0x4c
   14d8c:	mov	sl, r1
   14d90:	str	r2, [sp, #36]	; 0x24
   14d94:	str	ip, [sp, #116]	; 0x74
   14d98:	bl	11290 <__ctype_get_mb_cur_max@plt>
   14d9c:	ldr	r3, [sp, #164]	; 0xa4
   14da0:	ands	r4, r3, #2
   14da4:	movne	r3, #1
   14da8:	moveq	r3, #0
   14dac:	str	r3, [sp, #32]
   14db0:	str	r0, [sp, #64]	; 0x40
   14db4:	cmp	r8, #10
   14db8:	ldrls	pc, [pc, r8, lsl #2]
   14dbc:	b	1656c <__assert_fail@plt+0x50a8>
   14dc0:			; <UNDEFINED> instruction: 0x000151b4
   14dc4:	andeq	r5, r1, ip, asr #4
   14dc8:	andeq	r5, r1, ip, asr #16
   14dcc:	andeq	r5, r1, ip, ror #4
   14dd0:	andeq	r5, r1, r0, lsr #2
   14dd4:	andeq	r5, r1, r8, ror #2
   14dd8:	andeq	r5, r1, r4, ror #3
   14ddc:	andeq	r5, r1, ip, lsl r2
   14de0:	andeq	r4, r1, ip, ror #27
   14de4:	andeq	r4, r1, ip, ror #27
   14de8:	andeq	r4, r1, ip, ror #27
   14dec:	cmp	r8, #10
   14df0:	beq	14e14 <__assert_fail@plt+0x3950>
   14df4:	mov	r1, r8
   14df8:	ldr	r0, [pc, #3428]	; 15b64 <__assert_fail@plt+0x46a0>
   14dfc:	bl	14c10 <__assert_fail@plt+0x374c>
   14e00:	mov	r1, r8
   14e04:	str	r0, [sp, #80]	; 0x50
   14e08:	ldr	r0, [pc, #3420]	; 15b6c <__assert_fail@plt+0x46a8>
   14e0c:	bl	14c10 <__assert_fail@plt+0x374c>
   14e10:	str	r0, [sp, #76]	; 0x4c
   14e14:	cmp	r4, #0
   14e18:	movne	r4, #0
   14e1c:	beq	1622c <__assert_fail@plt+0x4d68>
   14e20:	ldr	r7, [sp, #76]	; 0x4c
   14e24:	mov	r5, #0
   14e28:	mov	r6, #1
   14e2c:	mov	r0, r7
   14e30:	str	r6, [sp, #40]	; 0x28
   14e34:	str	r5, [sp, #68]	; 0x44
   14e38:	bl	11344 <strlen@plt>
   14e3c:	str	r6, [sp, #28]
   14e40:	str	r5, [sp, #44]	; 0x2c
   14e44:	str	r5, [sp, #72]	; 0x48
   14e48:	str	r7, [sp, #60]	; 0x3c
   14e4c:	str	r0, [sp, #52]	; 0x34
   14e50:	str	r8, [sp, #160]	; 0xa0
   14e54:	mov	r8, fp
   14e58:	ldr	fp, [sp, #160]	; 0xa0
   14e5c:	mov	r9, #0
   14e60:	ldr	r3, [sp, #24]
   14e64:	cmn	r3, #1
   14e68:	beq	153d0 <__assert_fail@plt+0x3f0c>
   14e6c:	ldr	r3, [sp, #24]
   14e70:	subs	r6, r3, r9
   14e74:	movne	r6, #1
   14e78:	cmp	r6, #0
   14e7c:	beq	153e8 <__assert_fail@plt+0x3f24>
   14e80:	ldr	r7, [sp, #28]
   14e84:	ldr	r0, [sp, #36]	; 0x24
   14e88:	cmp	fp, #2
   14e8c:	moveq	r7, #0
   14e90:	andne	r7, r7, #1
   14e94:	add	r3, r0, r9
   14e98:	cmp	r7, #0
   14e9c:	str	r3, [sp, #48]	; 0x30
   14ea0:	beq	1588c <__assert_fail@plt+0x43c8>
   14ea4:	ldr	r2, [sp, #52]	; 0x34
   14ea8:	cmp	r2, #0
   14eac:	beq	15b70 <__assert_fail@plt+0x46ac>
   14eb0:	ldr	r1, [sp, #24]
   14eb4:	cmp	r2, #1
   14eb8:	mov	r3, r2
   14ebc:	movls	r3, #0
   14ec0:	movhi	r3, #1
   14ec4:	cmn	r1, #1
   14ec8:	movne	r3, #0
   14ecc:	cmp	r3, #0
   14ed0:	add	r5, r9, r2
   14ed4:	beq	14ee0 <__assert_fail@plt+0x3a1c>
   14ed8:	bl	11344 <strlen@plt>
   14edc:	str	r0, [sp, #24]
   14ee0:	ldr	r3, [sp, #24]
   14ee4:	cmp	r5, r3
   14ee8:	bhi	15b70 <__assert_fail@plt+0x46ac>
   14eec:	ldr	r2, [sp, #52]	; 0x34
   14ef0:	ldr	r1, [sp, #60]	; 0x3c
   14ef4:	ldr	r0, [sp, #48]	; 0x30
   14ef8:	bl	11200 <memcmp@plt>
   14efc:	cmp	r0, #0
   14f00:	bne	15b70 <__assert_fail@plt+0x46ac>
   14f04:	ldr	r3, [sp, #32]
   14f08:	cmp	r3, #0
   14f0c:	bne	1642c <__assert_fail@plt+0x4f68>
   14f10:	ldr	r3, [sp, #48]	; 0x30
   14f14:	ldrb	r5, [r3]
   14f18:	cmp	r5, #126	; 0x7e
   14f1c:	ldrls	pc, [pc, r5, lsl #2]
   14f20:	b	157f0 <__assert_fail@plt+0x432c>
   14f24:	ldrdeq	r5, [r1], -ip
   14f28:	strdeq	r5, [r1], -r0
   14f2c:	strdeq	r5, [r1], -r0
   14f30:	strdeq	r5, [r1], -r0
   14f34:	strdeq	r5, [r1], -r0
   14f38:	strdeq	r5, [r1], -r0
   14f3c:	strdeq	r5, [r1], -r0
   14f40:	andeq	r5, r1, r8, lsr #15
   14f44:	muleq	r1, r8, r7
   14f48:	muleq	r1, r8, r6
   14f4c:	andeq	r5, r1, r0, ror #12
   14f50:			; <UNDEFINED> instruction: 0x000156b8
   14f54:	andeq	r5, r1, r0, lsr #13
   14f58:	ldrdeq	r5, [r1], -r0
   14f5c:	strdeq	r5, [r1], -r0
   14f60:	strdeq	r5, [r1], -r0
   14f64:	strdeq	r5, [r1], -r0
   14f68:	strdeq	r5, [r1], -r0
   14f6c:	strdeq	r5, [r1], -r0
   14f70:	strdeq	r5, [r1], -r0
   14f74:	strdeq	r5, [r1], -r0
   14f78:	strdeq	r5, [r1], -r0
   14f7c:	strdeq	r5, [r1], -r0
   14f80:	strdeq	r5, [r1], -r0
   14f84:	strdeq	r5, [r1], -r0
   14f88:	strdeq	r5, [r1], -r0
   14f8c:	strdeq	r5, [r1], -r0
   14f90:	strdeq	r5, [r1], -r0
   14f94:	strdeq	r5, [r1], -r0
   14f98:	strdeq	r5, [r1], -r0
   14f9c:	strdeq	r5, [r1], -r0
   14fa0:	strdeq	r5, [r1], -r0
   14fa4:			; <UNDEFINED> instruction: 0x000157b0
   14fa8:	andeq	r5, r1, r4, asr #13
   14fac:	andeq	r5, r1, r4, asr #13
   14fb0:	andeq	r5, r1, r8, asr #15
   14fb4:	andeq	r5, r1, r4, asr #13
   14fb8:	andeq	r5, r1, r4, ror #15
   14fbc:	andeq	r5, r1, r4, asr #13
   14fc0:	andeq	r5, r1, r4, lsl #10
   14fc4:	andeq	r5, r1, r4, asr #13
   14fc8:	andeq	r5, r1, r4, asr #13
   14fcc:	andeq	r5, r1, r4, asr #13
   14fd0:	andeq	r5, r1, r4, ror #15
   14fd4:	andeq	r5, r1, r4, ror #15
   14fd8:	andeq	r5, r1, r4, ror #15
   14fdc:	andeq	r5, r1, r4, ror #15
   14fe0:	andeq	r5, r1, r4, ror #15
   14fe4:	andeq	r5, r1, r4, ror #15
   14fe8:	andeq	r5, r1, r4, ror #15
   14fec:	andeq	r5, r1, r4, ror #15
   14ff0:	andeq	r5, r1, r4, ror #15
   14ff4:	andeq	r5, r1, r4, ror #15
   14ff8:	andeq	r5, r1, r4, ror #15
   14ffc:	andeq	r5, r1, r4, ror #15
   15000:	andeq	r5, r1, r4, ror #15
   15004:	andeq	r5, r1, r4, ror #15
   15008:	andeq	r5, r1, r4, ror #15
   1500c:	andeq	r5, r1, r4, ror #15
   15010:	andeq	r5, r1, r4, asr #13
   15014:	andeq	r5, r1, r4, asr #13
   15018:	andeq	r5, r1, r4, asr #13
   1501c:	andeq	r5, r1, r4, asr #13
   15020:	ldrdeq	r5, [r1], -r8
   15024:	strdeq	r5, [r1], -r0
   15028:	andeq	r5, r1, r4, ror #15
   1502c:	andeq	r5, r1, r4, ror #15
   15030:	andeq	r5, r1, r4, ror #15
   15034:	andeq	r5, r1, r4, ror #15
   15038:	andeq	r5, r1, r4, ror #15
   1503c:	andeq	r5, r1, r4, ror #15
   15040:	andeq	r5, r1, r4, ror #15
   15044:	andeq	r5, r1, r4, ror #15
   15048:	andeq	r5, r1, r4, ror #15
   1504c:	andeq	r5, r1, r4, ror #15
   15050:	andeq	r5, r1, r4, ror #15
   15054:	andeq	r5, r1, r4, ror #15
   15058:	andeq	r5, r1, r4, ror #15
   1505c:	andeq	r5, r1, r4, ror #15
   15060:	andeq	r5, r1, r4, ror #15
   15064:	andeq	r5, r1, r4, ror #15
   15068:	andeq	r5, r1, r4, ror #15
   1506c:	andeq	r5, r1, r4, ror #15
   15070:	andeq	r5, r1, r4, ror #15
   15074:	andeq	r5, r1, r4, ror #15
   15078:	andeq	r5, r1, r4, ror #15
   1507c:	andeq	r5, r1, r4, ror #15
   15080:	andeq	r5, r1, r4, ror #15
   15084:	andeq	r5, r1, r4, ror #15
   15088:	andeq	r5, r1, r4, ror #15
   1508c:	andeq	r5, r1, r4, ror #15
   15090:	andeq	r5, r1, r4, asr #13
   15094:	muleq	r1, r0, r4
   15098:	andeq	r5, r1, r4, ror #15
   1509c:	andeq	r5, r1, r4, asr #13
   150a0:	andeq	r5, r1, r4, ror #15
   150a4:	andeq	r5, r1, r4, asr #13
   150a8:	andeq	r5, r1, r4, ror #15
   150ac:	andeq	r5, r1, r4, ror #15
   150b0:	andeq	r5, r1, r4, ror #15
   150b4:	andeq	r5, r1, r4, ror #15
   150b8:	andeq	r5, r1, r4, ror #15
   150bc:	andeq	r5, r1, r4, ror #15
   150c0:	andeq	r5, r1, r4, ror #15
   150c4:	andeq	r5, r1, r4, ror #15
   150c8:	andeq	r5, r1, r4, ror #15
   150cc:	andeq	r5, r1, r4, ror #15
   150d0:	andeq	r5, r1, r4, ror #15
   150d4:	andeq	r5, r1, r4, ror #15
   150d8:	andeq	r5, r1, r4, ror #15
   150dc:	andeq	r5, r1, r4, ror #15
   150e0:	andeq	r5, r1, r4, ror #15
   150e4:	andeq	r5, r1, r4, ror #15
   150e8:	andeq	r5, r1, r4, ror #15
   150ec:	andeq	r5, r1, r4, ror #15
   150f0:	andeq	r5, r1, r4, ror #15
   150f4:	andeq	r5, r1, r4, ror #15
   150f8:	andeq	r5, r1, r4, ror #15
   150fc:	andeq	r5, r1, r4, ror #15
   15100:	andeq	r5, r1, r4, ror #15
   15104:	andeq	r5, r1, r4, ror #15
   15108:	andeq	r5, r1, r4, ror #15
   1510c:	andeq	r5, r1, r4, ror #15
   15110:	andeq	r5, r1, r8, lsr #5
   15114:	andeq	r5, r1, r4, asr #13
   15118:	andeq	r5, r1, r8, lsr #5
   1511c:	andeq	r5, r1, r8, asr #15
   15120:	cmp	r4, #0
   15124:	moveq	r3, #1
   15128:	streq	r3, [sp, #28]
   1512c:	beq	15858 <__assert_fail@plt+0x4394>
   15130:	mov	r3, #0
   15134:	mov	r4, r3
   15138:	mov	r2, #1
   1513c:	str	r2, [sp, #40]	; 0x28
   15140:	str	r3, [sp, #68]	; 0x44
   15144:	str	r2, [sp, #32]
   15148:	str	r2, [sp, #52]	; 0x34
   1514c:	ldr	r3, [pc, #2584]	; 15b6c <__assert_fail@plt+0x46a8>
   15150:	str	r4, [sp, #44]	; 0x2c
   15154:	str	r4, [sp, #72]	; 0x48
   15158:	str	r4, [sp, #28]
   1515c:	str	r3, [sp, #60]	; 0x3c
   15160:	mov	r8, #2
   15164:	b	14e50 <__assert_fail@plt+0x398c>
   15168:	cmp	r4, #0
   1516c:	bne	163f8 <__assert_fail@plt+0x4f34>
   15170:	cmp	sl, #0
   15174:	beq	161b8 <__assert_fail@plt+0x4cf4>
   15178:	mov	r3, #34	; 0x22
   1517c:	strb	r3, [fp]
   15180:	ldr	r3, [pc, #2528]	; 15b68 <__assert_fail@plt+0x46a4>
   15184:	mov	r1, r4
   15188:	mov	r2, #1
   1518c:	str	r4, [sp, #68]	; 0x44
   15190:	str	r2, [sp, #40]	; 0x28
   15194:	mov	r4, r2
   15198:	str	r1, [sp, #44]	; 0x2c
   1519c:	str	r1, [sp, #72]	; 0x48
   151a0:	str	r1, [sp, #32]
   151a4:	str	r2, [sp, #28]
   151a8:	str	r2, [sp, #52]	; 0x34
   151ac:	str	r3, [sp, #60]	; 0x3c
   151b0:	b	14e50 <__assert_fail@plt+0x398c>
   151b4:	mov	r3, #0
   151b8:	str	r3, [sp, #68]	; 0x44
   151bc:	str	r3, [sp, #44]	; 0x2c
   151c0:	str	r3, [sp, #32]
   151c4:	str	r3, [sp, #28]
   151c8:	str	r3, [sp, #60]	; 0x3c
   151cc:	mov	r3, #1
   151d0:	str	r8, [sp, #72]	; 0x48
   151d4:	str	r8, [sp, #52]	; 0x34
   151d8:	mov	r4, r8
   151dc:	str	r3, [sp, #40]	; 0x28
   151e0:	b	14e50 <__assert_fail@plt+0x398c>
   151e4:	mov	r3, #1
   151e8:	str	r3, [sp, #40]	; 0x28
   151ec:	str	r3, [sp, #32]
   151f0:	str	r3, [sp, #28]
   151f4:	str	r3, [sp, #52]	; 0x34
   151f8:	ldr	r3, [pc, #2408]	; 15b68 <__assert_fail@plt+0x46a4>
   151fc:	mov	r2, #0
   15200:	mov	r4, r2
   15204:	str	r2, [sp, #68]	; 0x44
   15208:	str	r2, [sp, #44]	; 0x2c
   1520c:	str	r2, [sp, #72]	; 0x48
   15210:	str	r3, [sp, #60]	; 0x3c
   15214:	mov	r8, #5
   15218:	b	14e50 <__assert_fail@plt+0x398c>
   1521c:	mov	r3, #0
   15220:	mov	r2, #1
   15224:	str	r2, [sp, #40]	; 0x28
   15228:	mov	r4, r3
   1522c:	str	r3, [sp, #68]	; 0x44
   15230:	str	r2, [sp, #28]
   15234:	str	r3, [sp, #44]	; 0x2c
   15238:	str	r3, [sp, #72]	; 0x48
   1523c:	str	r3, [sp, #32]
   15240:	str	r3, [sp, #52]	; 0x34
   15244:	str	r3, [sp, #60]	; 0x3c
   15248:	b	14e50 <__assert_fail@plt+0x398c>
   1524c:	mov	r2, #1
   15250:	mov	r3, #0
   15254:	str	r2, [sp, #40]	; 0x28
   15258:	mov	r4, r3
   1525c:	str	r3, [sp, #68]	; 0x44
   15260:	str	r8, [sp, #52]	; 0x34
   15264:	str	r2, [sp, #32]
   15268:	b	1514c <__assert_fail@plt+0x3c88>
   1526c:	mov	r3, #1
   15270:	str	r3, [sp, #40]	; 0x28
   15274:	str	r3, [sp, #32]
   15278:	str	r3, [sp, #28]
   1527c:	str	r3, [sp, #52]	; 0x34
   15280:	ldr	r3, [pc, #2276]	; 15b6c <__assert_fail@plt+0x46a8>
   15284:	mov	r2, #0
   15288:	mov	r4, r2
   1528c:	str	r2, [sp, #68]	; 0x44
   15290:	str	r2, [sp, #44]	; 0x2c
   15294:	str	r2, [sp, #72]	; 0x48
   15298:	str	r3, [sp, #60]	; 0x3c
   1529c:	mov	r8, #2
   152a0:	b	14e50 <__assert_fail@plt+0x398c>
   152a4:	mov	r7, #0
   152a8:	ldr	r3, [sp, #24]
   152ac:	cmn	r3, #1
   152b0:	beq	15dec <__assert_fail@plt+0x4928>
   152b4:	ldr	r3, [sp, #24]
   152b8:	subs	r3, r3, #1
   152bc:	movne	r3, #1
   152c0:	cmp	r3, #0
   152c4:	sub	r2, fp, #2
   152c8:	clz	r2, r2
   152cc:	lsr	r2, r2, #5
   152d0:	bne	154cc <__assert_fail@plt+0x4008>
   152d4:	cmp	r9, #0
   152d8:	bne	154cc <__assert_fail@plt+0x4008>
   152dc:	ldr	r3, [sp, #32]
   152e0:	tst	r3, r2
   152e4:	bne	155ec <__assert_fail@plt+0x4128>
   152e8:	ldr	r3, [sp, #28]
   152ec:	eor	r3, r3, #1
   152f0:	orr	r3, r2, r3
   152f4:	ldr	r2, [sp, #32]
   152f8:	eor	r3, r3, #1
   152fc:	orrs	r3, r2, r3
   15300:	beq	15330 <__assert_fail@plt+0x3e6c>
   15304:	mov	r3, #0
   15308:	ldr	r1, [sp, #56]	; 0x38
   1530c:	cmp	r1, #0
   15310:	beq	15330 <__assert_fail@plt+0x3e6c>
   15314:	lsr	r2, r5, #5
   15318:	and	r0, r5, #31
   1531c:	uxtb	r2, r2
   15320:	ldr	r1, [r1, r2, lsl #2]
   15324:	lsr	r2, r1, r0
   15328:	tst	r2, #1
   1532c:	bne	15338 <__assert_fail@plt+0x3e74>
   15330:	cmp	r7, #0
   15334:	beq	15588 <__assert_fail@plt+0x40c4>
   15338:	sub	r2, fp, #2
   1533c:	clz	r2, r2
   15340:	lsr	r2, r2, #5
   15344:	ldr	r3, [sp, #32]
   15348:	cmp	r3, #0
   1534c:	bne	15678 <__assert_fail@plt+0x41b4>
   15350:	ldr	r3, [sp, #44]	; 0x2c
   15354:	eor	r3, r3, #1
   15358:	ands	r3, r2, r3
   1535c:	beq	15394 <__assert_fail@plt+0x3ed0>
   15360:	cmp	sl, r4
   15364:	movhi	r2, #39	; 0x27
   15368:	strbhi	r2, [r8, r4]
   1536c:	add	r2, r4, #1
   15370:	cmp	r2, sl
   15374:	movcc	r1, #36	; 0x24
   15378:	strbcc	r1, [r8, r2]
   1537c:	add	r2, r4, #2
   15380:	cmp	r2, sl
   15384:	add	r4, r4, #3
   15388:	movcc	r1, #39	; 0x27
   1538c:	strbcc	r1, [r8, r2]
   15390:	str	r3, [sp, #44]	; 0x2c
   15394:	cmp	r4, sl
   15398:	movcc	r3, #92	; 0x5c
   1539c:	strbcc	r3, [r8, r4]
   153a0:	add	r9, r9, #1
   153a4:	add	r4, r4, #1
   153a8:	cmp	r4, sl
   153ac:	ldr	r3, [sp, #40]	; 0x28
   153b0:	strbcc	r5, [r8, r4]
   153b4:	cmp	r6, #0
   153b8:	moveq	r3, #0
   153bc:	str	r3, [sp, #40]	; 0x28
   153c0:	ldr	r3, [sp, #24]
   153c4:	add	r4, r4, #1
   153c8:	cmn	r3, #1
   153cc:	bne	14e6c <__assert_fail@plt+0x39a8>
   153d0:	ldr	r3, [sp, #36]	; 0x24
   153d4:	ldrb	r6, [r3, r9]
   153d8:	adds	r6, r6, #0
   153dc:	movne	r6, #1
   153e0:	cmp	r6, #0
   153e4:	bne	14e80 <__assert_fail@plt+0x39bc>
   153e8:	str	fp, [sp, #160]	; 0xa0
   153ec:	mov	fp, r8
   153f0:	ldr	r8, [sp, #160]	; 0xa0
   153f4:	ldr	r1, [sp, #32]
   153f8:	cmp	r4, #0
   153fc:	sub	r2, r8, #2
   15400:	clz	r2, r2
   15404:	lsr	r2, r2, #5
   15408:	andeq	r3, r2, r1
   1540c:	movne	r3, #0
   15410:	cmp	r3, #0
   15414:	bne	16500 <__assert_fail@plt+0x503c>
   15418:	eor	r3, r1, #1
   1541c:	ands	r2, r2, r3
   15420:	beq	1643c <__assert_fail@plt+0x4f78>
   15424:	ldr	r3, [sp, #68]	; 0x44
   15428:	cmp	r3, #0
   1542c:	beq	16440 <__assert_fail@plt+0x4f7c>
   15430:	ldr	r3, [sp, #40]	; 0x28
   15434:	cmp	r3, #0
   15438:	bne	164bc <__assert_fail@plt+0x4ff8>
   1543c:	ldr	r3, [sp, #72]	; 0x48
   15440:	adds	r3, r3, #0
   15444:	movne	r3, #1
   15448:	cmp	sl, #0
   1544c:	movne	r3, #0
   15450:	cmp	r3, #0
   15454:	ldreq	r2, [sp, #68]	; 0x44
   15458:	beq	16440 <__assert_fail@plt+0x4f7c>
   1545c:	ldr	sl, [sp, #72]	; 0x48
   15460:	str	r3, [sp, #68]	; 0x44
   15464:	ldr	r3, [pc, #1792]	; 15b6c <__assert_fail@plt+0x46a8>
   15468:	mov	r2, #39	; 0x27
   1546c:	mov	r4, #1
   15470:	str	r3, [sp, #60]	; 0x3c
   15474:	mov	r3, #0
   15478:	strb	r2, [fp]
   1547c:	str	r4, [sp, #52]	; 0x34
   15480:	mov	r8, #2
   15484:	str	r3, [sp, #32]
   15488:	b	14e50 <__assert_fail@plt+0x398c>
   1548c:	mov	r7, #0
   15490:	cmp	fp, #2
   15494:	beq	15dcc <__assert_fail@plt+0x4908>
   15498:	ldr	r3, [sp, #52]	; 0x34
   1549c:	ldr	r2, [sp, #28]
   154a0:	ldr	r1, [sp, #32]
   154a4:	cmp	r3, #0
   154a8:	andne	r2, r2, r1
   154ac:	moveq	r2, #0
   154b0:	cmp	r2, #0
   154b4:	moveq	r5, #92	; 0x5c
   154b8:	moveq	r3, r5
   154bc:	bne	15dd8 <__assert_fail@plt+0x4914>
   154c0:	ldr	r1, [sp, #28]
   154c4:	cmp	r1, #0
   154c8:	bne	16548 <__assert_fail@plt+0x5084>
   154cc:	mov	r6, #0
   154d0:	b	152e8 <__assert_fail@plt+0x3e24>
   154d4:	mov	r7, #0
   154d8:	cmp	fp, #2
   154dc:	beq	15e3c <__assert_fail@plt+0x4978>
   154e0:	cmp	fp, #5
   154e4:	beq	15e00 <__assert_fail@plt+0x493c>
   154e8:	sub	r2, fp, #2
   154ec:	mov	r6, #0
   154f0:	clz	r2, r2
   154f4:	mov	r5, #63	; 0x3f
   154f8:	lsr	r2, r2, #5
   154fc:	b	152e8 <__assert_fail@plt+0x3e24>
   15500:	mov	r7, #0
   15504:	cmp	fp, #2
   15508:	strne	r6, [sp, #68]	; 0x44
   1550c:	movne	r2, #0
   15510:	movne	r5, #39	; 0x27
   15514:	bne	152e8 <__assert_fail@plt+0x3e24>
   15518:	ldr	r3, [sp, #32]
   1551c:	cmp	r3, #0
   15520:	bne	1621c <__assert_fail@plt+0x4d58>
   15524:	cmp	sl, #0
   15528:	ldr	r3, [sp, #72]	; 0x48
   1552c:	clz	r3, r3
   15530:	lsr	r3, r3, #5
   15534:	moveq	r3, #0
   15538:	cmp	r3, #0
   1553c:	bne	16150 <__assert_fail@plt+0x4c8c>
   15540:	cmp	sl, r4
   15544:	movhi	r3, #39	; 0x27
   15548:	strbhi	r3, [r8, r4]
   1554c:	add	r3, r4, #1
   15550:	cmp	sl, r3
   15554:	movhi	r2, #92	; 0x5c
   15558:	strbhi	r2, [r8, r3]
   1555c:	add	r3, r4, #2
   15560:	cmp	sl, r3
   15564:	movhi	r2, #39	; 0x27
   15568:	strbhi	r2, [r8, r3]
   1556c:	mov	r3, #0
   15570:	cmp	r7, #0
   15574:	add	r4, r4, #3
   15578:	str	r3, [sp, #44]	; 0x2c
   1557c:	str	r6, [sp, #68]	; 0x44
   15580:	mov	r5, #39	; 0x27
   15584:	bne	15338 <__assert_fail@plt+0x3e74>
   15588:	ldr	r2, [sp, #44]	; 0x2c
   1558c:	eor	r3, r3, #1
   15590:	and	r3, r3, r2
   15594:	add	r9, r9, #1
   15598:	uxtb	r3, r3
   1559c:	cmp	r3, #0
   155a0:	beq	153a8 <__assert_fail@plt+0x3ee4>
   155a4:	cmp	sl, r4
   155a8:	movhi	r3, #39	; 0x27
   155ac:	strbhi	r3, [r8, r4]
   155b0:	add	r3, r4, #1
   155b4:	cmp	sl, r3
   155b8:	movhi	r2, #39	; 0x27
   155bc:	strbhi	r2, [r8, r3]
   155c0:	mov	r3, #0
   155c4:	add	r4, r4, #2
   155c8:	str	r3, [sp, #44]	; 0x2c
   155cc:	b	153a8 <__assert_fail@plt+0x3ee4>
   155d0:	mov	r3, #114	; 0x72
   155d4:	ldr	r1, [sp, #32]
   155d8:	sub	r2, fp, #2
   155dc:	clz	r2, r2
   155e0:	lsr	r2, r2, #5
   155e4:	tst	r2, r1
   155e8:	beq	154c0 <__assert_fail@plt+0x3ffc>
   155ec:	mov	fp, r8
   155f0:	mov	r8, #2
   155f4:	ldr	r3, [sp, #28]
   155f8:	cmp	r3, #0
   155fc:	movne	r8, #4
   15600:	ldr	r3, [sp, #164]	; 0xa4
   15604:	mov	ip, #0
   15608:	bic	r3, r3, #2
   1560c:	str	r3, [sp, #4]
   15610:	ldr	r3, [sp, #76]	; 0x4c
   15614:	str	r8, [sp]
   15618:	str	r3, [sp, #16]
   1561c:	ldr	r3, [sp, #80]	; 0x50
   15620:	ldr	r2, [sp, #36]	; 0x24
   15624:	str	r3, [sp, #12]
   15628:	mov	r1, sl
   1562c:	ldr	r3, [sp, #24]
   15630:	mov	r0, fp
   15634:	str	ip, [sp, #8]
   15638:	bl	14d58 <__assert_fail@plt+0x3894>
   1563c:	mov	r4, r0
   15640:	ldr	r3, [pc, #1304]	; 15b60 <__assert_fail@plt+0x469c>
   15644:	ldr	r2, [sp, #116]	; 0x74
   15648:	mov	r0, r4
   1564c:	ldr	r3, [r3]
   15650:	cmp	r2, r3
   15654:	bne	16544 <__assert_fail@plt+0x5080>
   15658:	add	sp, sp, #124	; 0x7c
   1565c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15660:	mov	r5, #110	; 0x6e
   15664:	ldr	r3, [sp, #32]
   15668:	mov	r2, #0
   1566c:	cmp	r3, #0
   15670:	mov	r6, r2
   15674:	beq	15350 <__assert_fail@plt+0x3e8c>
   15678:	str	fp, [sp, #160]	; 0xa0
   1567c:	mov	fp, r8
   15680:	ldr	r8, [sp, #160]	; 0xa0
   15684:	mov	r3, r2
   15688:	ldr	r2, [sp, #28]
   1568c:	and	r2, r2, r3
   15690:	str	r2, [sp, #28]
   15694:	b	155f4 <__assert_fail@plt+0x4130>
   15698:	mov	r5, #116	; 0x74
   1569c:	b	15664 <__assert_fail@plt+0x41a0>
   156a0:	mov	r5, #102	; 0x66
   156a4:	ldr	r3, [sp, #32]
   156a8:	cmp	r3, #0
   156ac:	bne	16258 <__assert_fail@plt+0x4d94>
   156b0:	mov	r6, #0
   156b4:	b	15394 <__assert_fail@plt+0x3ed0>
   156b8:	mov	r5, #118	; 0x76
   156bc:	b	156a4 <__assert_fail@plt+0x41e0>
   156c0:	mov	r7, #0
   156c4:	mov	r6, #0
   156c8:	b	15304 <__assert_fail@plt+0x3e40>
   156cc:	ldr	r3, [sp, #32]
   156d0:	cmp	r3, #0
   156d4:	bne	1649c <__assert_fail@plt+0x4fd8>
   156d8:	mov	r7, r3
   156dc:	ldr	r3, [sp, #44]	; 0x2c
   156e0:	sub	r2, fp, #2
   156e4:	eor	r3, r3, #1
   156e8:	clz	r2, r2
   156ec:	lsr	r2, r2, #5
   156f0:	ands	r3, r2, r3
   156f4:	beq	1613c <__assert_fail@plt+0x4c78>
   156f8:	cmp	sl, r4
   156fc:	movhi	r1, #39	; 0x27
   15700:	strbhi	r1, [r8, r4]
   15704:	add	r1, r4, #1
   15708:	cmp	sl, r1
   1570c:	movhi	r0, #36	; 0x24
   15710:	strbhi	r0, [r8, r1]
   15714:	add	r1, r4, #2
   15718:	cmp	sl, r1
   1571c:	movhi	r0, #39	; 0x27
   15720:	strbhi	r0, [r8, r1]
   15724:	add	r1, r4, #3
   15728:	cmp	sl, r1
   1572c:	bls	1619c <__assert_fail@plt+0x4cd8>
   15730:	mov	r4, r1
   15734:	mov	r1, #92	; 0x5c
   15738:	strb	r1, [r8, r4]
   1573c:	mov	r1, r4
   15740:	str	r3, [sp, #44]	; 0x2c
   15744:	cmp	fp, #2
   15748:	add	r4, r4, #1
   1574c:	beq	161e4 <__assert_fail@plt+0x4d20>
   15750:	ldr	r0, [sp, #24]
   15754:	add	r3, r9, #1
   15758:	cmp	r3, r0
   1575c:	bcs	15774 <__assert_fail@plt+0x42b0>
   15760:	ldr	r0, [sp, #36]	; 0x24
   15764:	ldrb	r3, [r0, r3]
   15768:	sub	r3, r3, #48	; 0x30
   1576c:	cmp	r3, #9
   15770:	bls	161f4 <__assert_fail@plt+0x4d30>
   15774:	mov	r5, #48	; 0x30
   15778:	ldr	r3, [sp, #28]
   1577c:	eor	r3, r3, #1
   15780:	orrs	r2, r2, r3
   15784:	mov	r3, r6
   15788:	moveq	r6, r2
   1578c:	beq	15308 <__assert_fail@plt+0x3e44>
   15790:	mov	r6, #0
   15794:	b	15330 <__assert_fail@plt+0x3e6c>
   15798:	mov	r2, #0
   1579c:	mov	r6, r2
   157a0:	mov	r5, #98	; 0x62
   157a4:	b	15350 <__assert_fail@plt+0x3e8c>
   157a8:	mov	r5, #97	; 0x61
   157ac:	b	156b0 <__assert_fail@plt+0x41ec>
   157b0:	mov	r3, r7
   157b4:	mov	r6, r7
   157b8:	mov	r2, #0
   157bc:	mov	r7, r3
   157c0:	mov	r5, #32
   157c4:	b	152e8 <__assert_fail@plt+0x3e24>
   157c8:	cmp	r9, #0
   157cc:	mov	r3, r7
   157d0:	bne	15d98 <__assert_fail@plt+0x48d4>
   157d4:	mov	r6, r7
   157d8:	mov	r2, r9
   157dc:	mov	r7, r3
   157e0:	b	152e8 <__assert_fail@plt+0x3e24>
   157e4:	mov	r6, r7
   157e8:	b	15304 <__assert_fail@plt+0x3e40>
   157ec:	mov	r7, #0
   157f0:	ldr	r3, [sp, #64]	; 0x40
   157f4:	cmp	r3, #1
   157f8:	bne	15e54 <__assert_fail@plt+0x4990>
   157fc:	bl	1132c <__ctype_b_loc@plt>
   15800:	ldr	r2, [sp, #64]	; 0x40
   15804:	sxth	r3, r5
   15808:	mov	ip, r2
   1580c:	lsl	r3, r3, #1
   15810:	ldr	r2, [r0]
   15814:	ldrh	r3, [r2, r3]
   15818:	and	r3, r3, #16384	; 0x4000
   1581c:	cmp	r3, #0
   15820:	ldr	r3, [sp, #28]
   15824:	movne	r6, #1
   15828:	moveq	r6, #0
   1582c:	movne	r2, #0
   15830:	andeq	r2, r3, #1
   15834:	cmp	r2, #0
   15838:	bne	16164 <__assert_fail@plt+0x4ca0>
   1583c:	sub	r2, fp, #2
   15840:	clz	r2, r2
   15844:	lsr	r2, r2, #5
   15848:	b	152e8 <__assert_fail@plt+0x3e24>
   1584c:	cmp	r4, #0
   15850:	bne	16510 <__assert_fail@plt+0x504c>
   15854:	str	r4, [sp, #28]
   15858:	cmp	sl, #0
   1585c:	bne	16554 <__assert_fail@plt+0x5090>
   15860:	ldr	r3, [pc, #772]	; 15b6c <__assert_fail@plt+0x46a8>
   15864:	mov	r4, #1
   15868:	str	r4, [sp, #40]	; 0x28
   1586c:	str	r3, [sp, #60]	; 0x3c
   15870:	str	r4, [sp, #52]	; 0x34
   15874:	str	sl, [sp, #72]	; 0x48
   15878:	str	sl, [sp, #68]	; 0x44
   1587c:	str	sl, [sp, #44]	; 0x2c
   15880:	str	sl, [sp, #32]
   15884:	mov	r8, #2
   15888:	b	14e50 <__assert_fail@plt+0x398c>
   1588c:	ldr	r3, [sp, #36]	; 0x24
   15890:	ldrb	r5, [r3, r9]
   15894:	cmp	r5, #126	; 0x7e
   15898:	ldrls	pc, [pc, r5, lsl #2]
   1589c:	b	157f0 <__assert_fail@plt+0x432c>
   158a0:	ldrdeq	r5, [r1], -r4
   158a4:	strdeq	r5, [r1], -r0
   158a8:	strdeq	r5, [r1], -r0
   158ac:	strdeq	r5, [r1], -r0
   158b0:	strdeq	r5, [r1], -r0
   158b4:	strdeq	r5, [r1], -r0
   158b8:	strdeq	r5, [r1], -r0
   158bc:	andeq	r5, r1, r0, asr #21
   158c0:	andeq	r5, r1, ip, lsr #21
   158c4:	andeq	r5, r1, r4, lsr #21
   158c8:	muleq	r1, ip, sl
   158cc:	andeq	r5, r1, ip, asr #22
   158d0:	andeq	r5, r1, r8, lsr fp
   158d4:	ldrdeq	r5, [r1], -r0
   158d8:	strdeq	r5, [r1], -r0
   158dc:	strdeq	r5, [r1], -r0
   158e0:	strdeq	r5, [r1], -r0
   158e4:	strdeq	r5, [r1], -r0
   158e8:	strdeq	r5, [r1], -r0
   158ec:	strdeq	r5, [r1], -r0
   158f0:	strdeq	r5, [r1], -r0
   158f4:	strdeq	r5, [r1], -r0
   158f8:	strdeq	r5, [r1], -r0
   158fc:	strdeq	r5, [r1], -r0
   15900:	strdeq	r5, [r1], -r0
   15904:	strdeq	r5, [r1], -r0
   15908:	strdeq	r5, [r1], -r0
   1590c:	strdeq	r5, [r1], -r0
   15910:	strdeq	r5, [r1], -r0
   15914:	strdeq	r5, [r1], -r0
   15918:	strdeq	r5, [r1], -r0
   1591c:	strdeq	r5, [r1], -r0
   15920:	andeq	r5, r1, r8, lsr #22
   15924:	andeq	r5, r1, r4, lsl fp
   15928:	andeq	r5, r1, r4, lsl fp
   1592c:	andeq	r5, r1, r4, lsl #22
   15930:	andeq	r5, r1, r4, lsl fp
   15934:	andeq	r5, r1, ip, lsr r8
   15938:	andeq	r5, r1, r4, lsl fp
   1593c:	andeq	r5, r1, r4, lsl #10
   15940:	andeq	r5, r1, r4, lsl fp
   15944:	andeq	r5, r1, r4, lsl fp
   15948:	andeq	r5, r1, r4, lsl fp
   1594c:	andeq	r5, r1, ip, lsr r8
   15950:	andeq	r5, r1, ip, lsr r8
   15954:	andeq	r5, r1, ip, lsr r8
   15958:	andeq	r5, r1, ip, lsr r8
   1595c:	andeq	r5, r1, ip, lsr r8
   15960:	andeq	r5, r1, ip, lsr r8
   15964:	andeq	r5, r1, ip, lsr r8
   15968:	andeq	r5, r1, ip, lsr r8
   1596c:	andeq	r5, r1, ip, lsr r8
   15970:	andeq	r5, r1, ip, lsr r8
   15974:	andeq	r5, r1, ip, lsr r8
   15978:	andeq	r5, r1, ip, lsr r8
   1597c:	andeq	r5, r1, ip, lsr r8
   15980:	andeq	r5, r1, ip, lsr r8
   15984:	andeq	r5, r1, ip, lsr r8
   15988:	andeq	r5, r1, ip, lsr r8
   1598c:	andeq	r5, r1, r4, lsl fp
   15990:	andeq	r5, r1, r4, lsl fp
   15994:	andeq	r5, r1, r4, lsl fp
   15998:	andeq	r5, r1, r4, lsl fp
   1599c:	ldrdeq	r5, [r1], -r8
   159a0:	strdeq	r5, [r1], -r0
   159a4:	andeq	r5, r1, ip, lsr r8
   159a8:	andeq	r5, r1, ip, lsr r8
   159ac:	andeq	r5, r1, ip, lsr r8
   159b0:	andeq	r5, r1, ip, lsr r8
   159b4:	andeq	r5, r1, ip, lsr r8
   159b8:	andeq	r5, r1, ip, lsr r8
   159bc:	andeq	r5, r1, ip, lsr r8
   159c0:	andeq	r5, r1, ip, lsr r8
   159c4:	andeq	r5, r1, ip, lsr r8
   159c8:	andeq	r5, r1, ip, lsr r8
   159cc:	andeq	r5, r1, ip, lsr r8
   159d0:	andeq	r5, r1, ip, lsr r8
   159d4:	andeq	r5, r1, ip, lsr r8
   159d8:	andeq	r5, r1, ip, lsr r8
   159dc:	andeq	r5, r1, ip, lsr r8
   159e0:	andeq	r5, r1, ip, lsr r8
   159e4:	andeq	r5, r1, ip, lsr r8
   159e8:	andeq	r5, r1, ip, lsr r8
   159ec:	andeq	r5, r1, ip, lsr r8
   159f0:	andeq	r5, r1, ip, lsr r8
   159f4:	andeq	r5, r1, ip, lsr r8
   159f8:	andeq	r5, r1, ip, lsr r8
   159fc:	andeq	r5, r1, ip, lsr r8
   15a00:	andeq	r5, r1, ip, lsr r8
   15a04:	andeq	r5, r1, ip, lsr r8
   15a08:	andeq	r5, r1, ip, lsr r8
   15a0c:	andeq	r5, r1, r4, lsl fp
   15a10:	muleq	r1, r0, r4
   15a14:	andeq	r5, r1, ip, lsr r8
   15a18:	andeq	r5, r1, r4, lsl fp
   15a1c:	andeq	r5, r1, ip, lsr r8
   15a20:	andeq	r5, r1, r4, lsl fp
   15a24:	andeq	r5, r1, ip, lsr r8
   15a28:	andeq	r5, r1, ip, lsr r8
   15a2c:	andeq	r5, r1, ip, lsr r8
   15a30:	andeq	r5, r1, ip, lsr r8
   15a34:	andeq	r5, r1, ip, lsr r8
   15a38:	andeq	r5, r1, ip, lsr r8
   15a3c:	andeq	r5, r1, ip, lsr r8
   15a40:	andeq	r5, r1, ip, lsr r8
   15a44:	andeq	r5, r1, ip, lsr r8
   15a48:	andeq	r5, r1, ip, lsr r8
   15a4c:	andeq	r5, r1, ip, lsr r8
   15a50:	andeq	r5, r1, ip, lsr r8
   15a54:	andeq	r5, r1, ip, lsr r8
   15a58:	andeq	r5, r1, ip, lsr r8
   15a5c:	andeq	r5, r1, ip, lsr r8
   15a60:	andeq	r5, r1, ip, lsr r8
   15a64:	andeq	r5, r1, ip, lsr r8
   15a68:	andeq	r5, r1, ip, lsr r8
   15a6c:	andeq	r5, r1, ip, lsr r8
   15a70:	andeq	r5, r1, ip, lsr r8
   15a74:	andeq	r5, r1, ip, lsr r8
   15a78:	andeq	r5, r1, ip, lsr r8
   15a7c:	andeq	r5, r1, ip, lsr r8
   15a80:	andeq	r5, r1, ip, lsr r8
   15a84:	andeq	r5, r1, ip, lsr r8
   15a88:	andeq	r5, r1, ip, lsr r8
   15a8c:	andeq	r5, r1, r8, lsr #5
   15a90:	andeq	r5, r1, r4, lsl fp
   15a94:	andeq	r5, r1, r8, lsr #5
   15a98:	andeq	r5, r1, r4, lsl #22
   15a9c:	mov	r3, #110	; 0x6e
   15aa0:	b	155d4 <__assert_fail@plt+0x4110>
   15aa4:	mov	r3, #116	; 0x74
   15aa8:	b	155d4 <__assert_fail@plt+0x4110>
   15aac:	sub	r2, fp, #2
   15ab0:	mov	r3, #98	; 0x62
   15ab4:	clz	r2, r2
   15ab8:	lsr	r2, r2, #5
   15abc:	b	154c0 <__assert_fail@plt+0x3ffc>
   15ac0:	sub	r2, fp, #2
   15ac4:	mov	r3, #97	; 0x61
   15ac8:	clz	r2, r2
   15acc:	lsr	r2, r2, #5
   15ad0:	b	154c0 <__assert_fail@plt+0x3ffc>
   15ad4:	ldr	r3, [sp, #28]
   15ad8:	cmp	r3, #0
   15adc:	bne	156cc <__assert_fail@plt+0x4208>
   15ae0:	ldr	r3, [sp, #164]	; 0xa4
   15ae4:	tst	r3, #1
   15ae8:	bne	1615c <__assert_fail@plt+0x4c98>
   15aec:	ldr	r6, [sp, #28]
   15af0:	sub	r2, fp, #2
   15af4:	mov	r7, r6
   15af8:	clz	r2, r2
   15afc:	lsr	r2, r2, #5
   15b00:	b	152e8 <__assert_fail@plt+0x3e24>
   15b04:	sub	r2, fp, #2
   15b08:	clz	r2, r2
   15b0c:	lsr	r2, r2, #5
   15b10:	b	152d4 <__assert_fail@plt+0x3e10>
   15b14:	sub	r2, fp, #2
   15b18:	mov	r6, #0
   15b1c:	clz	r2, r2
   15b20:	lsr	r2, r2, #5
   15b24:	b	152dc <__assert_fail@plt+0x3e18>
   15b28:	sub	r2, fp, #2
   15b2c:	clz	r2, r2
   15b30:	lsr	r2, r2, #5
   15b34:	b	152dc <__assert_fail@plt+0x3e18>
   15b38:	sub	r2, fp, #2
   15b3c:	mov	r3, #102	; 0x66
   15b40:	clz	r2, r2
   15b44:	lsr	r2, r2, #5
   15b48:	b	154c0 <__assert_fail@plt+0x3ffc>
   15b4c:	sub	r2, fp, #2
   15b50:	mov	r3, #118	; 0x76
   15b54:	clz	r2, r2
   15b58:	lsr	r2, r2, #5
   15b5c:	b	154c0 <__assert_fail@plt+0x3ffc>
   15b60:	andeq	sl, r2, r8, lsl #30
   15b64:	ldrdeq	r9, [r1], -r8
   15b68:	andeq	r9, r1, r4, lsl r0
   15b6c:	ldrdeq	r9, [r1], -r4
   15b70:	ldr	r3, [sp, #48]	; 0x30
   15b74:	ldrb	r5, [r3]
   15b78:	cmp	r5, #126	; 0x7e
   15b7c:	ldrls	pc, [pc, r5, lsl #2]
   15b80:	b	157ec <__assert_fail@plt+0x4328>
   15b84:	andeq	r5, r1, ip, asr #13
   15b88:	andeq	r5, r1, ip, ror #15
   15b8c:	andeq	r5, r1, ip, ror #15
   15b90:	andeq	r5, r1, ip, ror #15
   15b94:	andeq	r5, r1, ip, ror #15
   15b98:	andeq	r5, r1, ip, ror #15
   15b9c:	andeq	r5, r1, ip, ror #15
   15ba0:	andeq	r5, r1, r4, asr #27
   15ba4:			; <UNDEFINED> instruction: 0x00015dbc
   15ba8:	muleq	r1, r8, r6
   15bac:	andeq	r5, r1, r0, ror #12
   15bb0:			; <UNDEFINED> instruction: 0x000156b8
   15bb4:	andeq	r5, r1, r0, lsr #13
   15bb8:			; <UNDEFINED> instruction: 0x00015db0
   15bbc:	andeq	r5, r1, ip, ror #15
   15bc0:	andeq	r5, r1, ip, ror #15
   15bc4:	andeq	r5, r1, ip, ror #15
   15bc8:	andeq	r5, r1, ip, ror #15
   15bcc:	andeq	r5, r1, ip, ror #15
   15bd0:	andeq	r5, r1, ip, ror #15
   15bd4:	andeq	r5, r1, ip, ror #15
   15bd8:	andeq	r5, r1, ip, ror #15
   15bdc:	andeq	r5, r1, ip, ror #15
   15be0:	andeq	r5, r1, ip, ror #15
   15be4:	andeq	r5, r1, ip, ror #15
   15be8:	andeq	r5, r1, ip, ror #15
   15bec:	andeq	r5, r1, ip, ror #15
   15bf0:	andeq	r5, r1, ip, ror #15
   15bf4:	andeq	r5, r1, ip, ror #15
   15bf8:	andeq	r5, r1, ip, ror #15
   15bfc:	andeq	r5, r1, ip, ror #15
   15c00:	andeq	r5, r1, ip, ror #15
   15c04:	andeq	r5, r1, r8, lsr #27
   15c08:	andeq	r5, r1, r0, asr #13
   15c0c:	andeq	r5, r1, r0, asr #13
   15c10:	andeq	r5, r1, ip, lsl #27
   15c14:	andeq	r5, r1, r0, asr #13
   15c18:	andeq	r5, r1, r0, lsl #27
   15c1c:	andeq	r5, r1, r0, asr #13
   15c20:	andeq	r5, r1, r0, lsl #10
   15c24:	andeq	r5, r1, r0, asr #13
   15c28:	andeq	r5, r1, r0, asr #13
   15c2c:	andeq	r5, r1, r0, asr #13
   15c30:	andeq	r5, r1, r0, lsl #27
   15c34:	andeq	r5, r1, r0, lsl #27
   15c38:	andeq	r5, r1, r0, lsl #27
   15c3c:	andeq	r5, r1, r0, lsl #27
   15c40:	andeq	r5, r1, r0, lsl #27
   15c44:	andeq	r5, r1, r0, lsl #27
   15c48:	andeq	r5, r1, r0, lsl #27
   15c4c:	andeq	r5, r1, r0, lsl #27
   15c50:	andeq	r5, r1, r0, lsl #27
   15c54:	andeq	r5, r1, r0, lsl #27
   15c58:	andeq	r5, r1, r0, lsl #27
   15c5c:	andeq	r5, r1, r0, lsl #27
   15c60:	andeq	r5, r1, r0, lsl #27
   15c64:	andeq	r5, r1, r0, lsl #27
   15c68:	andeq	r5, r1, r0, lsl #27
   15c6c:	andeq	r5, r1, r0, lsl #27
   15c70:	andeq	r5, r1, r0, asr #13
   15c74:	andeq	r5, r1, r0, asr #13
   15c78:	andeq	r5, r1, r0, asr #13
   15c7c:	andeq	r5, r1, r0, asr #13
   15c80:	ldrdeq	r5, [r1], -r4
   15c84:	andeq	r5, r1, ip, ror #15
   15c88:	andeq	r5, r1, r0, lsl #27
   15c8c:	andeq	r5, r1, r0, lsl #27
   15c90:	andeq	r5, r1, r0, lsl #27
   15c94:	andeq	r5, r1, r0, lsl #27
   15c98:	andeq	r5, r1, r0, lsl #27
   15c9c:	andeq	r5, r1, r0, lsl #27
   15ca0:	andeq	r5, r1, r0, lsl #27
   15ca4:	andeq	r5, r1, r0, lsl #27
   15ca8:	andeq	r5, r1, r0, lsl #27
   15cac:	andeq	r5, r1, r0, lsl #27
   15cb0:	andeq	r5, r1, r0, lsl #27
   15cb4:	andeq	r5, r1, r0, lsl #27
   15cb8:	andeq	r5, r1, r0, lsl #27
   15cbc:	andeq	r5, r1, r0, lsl #27
   15cc0:	andeq	r5, r1, r0, lsl #27
   15cc4:	andeq	r5, r1, r0, lsl #27
   15cc8:	andeq	r5, r1, r0, lsl #27
   15ccc:	andeq	r5, r1, r0, lsl #27
   15cd0:	andeq	r5, r1, r0, lsl #27
   15cd4:	andeq	r5, r1, r0, lsl #27
   15cd8:	andeq	r5, r1, r0, lsl #27
   15cdc:	andeq	r5, r1, r0, lsl #27
   15ce0:	andeq	r5, r1, r0, lsl #27
   15ce4:	andeq	r5, r1, r0, lsl #27
   15ce8:	andeq	r5, r1, r0, lsl #27
   15cec:	andeq	r5, r1, r0, lsl #27
   15cf0:	andeq	r5, r1, r0, asr #13
   15cf4:	andeq	r5, r1, ip, lsl #9
   15cf8:	andeq	r5, r1, r0, lsl #27
   15cfc:	andeq	r5, r1, r0, asr #13
   15d00:	andeq	r5, r1, r0, lsl #27
   15d04:	andeq	r5, r1, r0, asr #13
   15d08:	andeq	r5, r1, r0, lsl #27
   15d0c:	andeq	r5, r1, r0, lsl #27
   15d10:	andeq	r5, r1, r0, lsl #27
   15d14:	andeq	r5, r1, r0, lsl #27
   15d18:	andeq	r5, r1, r0, lsl #27
   15d1c:	andeq	r5, r1, r0, lsl #27
   15d20:	andeq	r5, r1, r0, lsl #27
   15d24:	andeq	r5, r1, r0, lsl #27
   15d28:	andeq	r5, r1, r0, lsl #27
   15d2c:	andeq	r5, r1, r0, lsl #27
   15d30:	andeq	r5, r1, r0, lsl #27
   15d34:	andeq	r5, r1, r0, lsl #27
   15d38:	andeq	r5, r1, r0, lsl #27
   15d3c:	andeq	r5, r1, r0, lsl #27
   15d40:	andeq	r5, r1, r0, lsl #27
   15d44:	andeq	r5, r1, r0, lsl #27
   15d48:	andeq	r5, r1, r0, lsl #27
   15d4c:	andeq	r5, r1, r0, lsl #27
   15d50:	andeq	r5, r1, r0, lsl #27
   15d54:	andeq	r5, r1, r0, lsl #27
   15d58:	andeq	r5, r1, r0, lsl #27
   15d5c:	andeq	r5, r1, r0, lsl #27
   15d60:	andeq	r5, r1, r0, lsl #27
   15d64:	andeq	r5, r1, r0, lsl #27
   15d68:	andeq	r5, r1, r0, lsl #27
   15d6c:	andeq	r5, r1, r0, lsl #27
   15d70:	andeq	r5, r1, r4, lsr #5
   15d74:	andeq	r5, r1, r0, asr #13
   15d78:	andeq	r5, r1, r4, lsr #5
   15d7c:	andeq	r5, r1, ip, lsl #27
   15d80:	mov	r6, r7
   15d84:	mov	r7, #0
   15d88:	b	15304 <__assert_fail@plt+0x3e40>
   15d8c:	cmp	r9, #0
   15d90:	mov	r3, #0
   15d94:	beq	157d4 <__assert_fail@plt+0x4310>
   15d98:	mov	r6, #0
   15d9c:	mov	r7, r3
   15da0:	mov	r3, r6
   15da4:	b	15308 <__assert_fail@plt+0x3e44>
   15da8:	mov	r3, #0
   15dac:	b	157b4 <__assert_fail@plt+0x42f0>
   15db0:	mov	r7, #0
   15db4:	mov	r3, #114	; 0x72
   15db8:	b	155d4 <__assert_fail@plt+0x4110>
   15dbc:	mov	r5, #98	; 0x62
   15dc0:	b	15664 <__assert_fail@plt+0x41a0>
   15dc4:	mov	r5, #97	; 0x61
   15dc8:	b	156a4 <__assert_fail@plt+0x41e0>
   15dcc:	ldr	r3, [sp, #32]
   15dd0:	cmp	r3, #0
   15dd4:	bne	1621c <__assert_fail@plt+0x4d58>
   15dd8:	add	r9, r9, #1
   15ddc:	ldr	r3, [sp, #44]	; 0x2c
   15de0:	mov	r6, #0
   15de4:	mov	r5, #92	; 0x5c
   15de8:	b	1559c <__assert_fail@plt+0x40d8>
   15dec:	ldr	r3, [sp, #36]	; 0x24
   15df0:	ldrb	r3, [r3, #1]
   15df4:	adds	r3, r3, #0
   15df8:	movne	r3, #1
   15dfc:	b	152c0 <__assert_fail@plt+0x3dfc>
   15e00:	ldr	r3, [sp, #164]	; 0xa4
   15e04:	ands	r3, r3, #4
   15e08:	beq	15e2c <__assert_fail@plt+0x4968>
   15e0c:	ldr	r2, [sp, #24]
   15e10:	add	r3, r9, #2
   15e14:	cmp	r3, r2
   15e18:	bcs	15e2c <__assert_fail@plt+0x4968>
   15e1c:	ldr	r2, [sp, #48]	; 0x30
   15e20:	ldrb	r5, [r2, #1]
   15e24:	cmp	r5, #63	; 0x3f
   15e28:	beq	16290 <__assert_fail@plt+0x4dcc>
   15e2c:	mov	r2, #0
   15e30:	mov	r6, r2
   15e34:	mov	r5, #63	; 0x3f
   15e38:	b	152e8 <__assert_fail@plt+0x3e24>
   15e3c:	ldr	r3, [sp, #32]
   15e40:	cmp	r3, #0
   15e44:	bne	1621c <__assert_fail@plt+0x4d58>
   15e48:	mov	r6, r3
   15e4c:	mov	r5, #63	; 0x3f
   15e50:	b	15330 <__assert_fail@plt+0x3e6c>
   15e54:	ldr	r3, [sp, #24]
   15e58:	cmn	r3, #1
   15e5c:	mov	r3, #0
   15e60:	str	r3, [sp, #108]	; 0x6c
   15e64:	str	r3, [sp, #112]	; 0x70
   15e68:	bne	15e78 <__assert_fail@plt+0x49b4>
   15e6c:	ldr	r0, [sp, #36]	; 0x24
   15e70:	bl	11344 <strlen@plt>
   15e74:	str	r0, [sp, #24]
   15e78:	mov	r3, #0
   15e7c:	str	sl, [sp, #88]	; 0x58
   15e80:	ldr	sl, [sp, #36]	; 0x24
   15e84:	str	r5, [sp, #92]	; 0x5c
   15e88:	mov	r5, r3
   15e8c:	str	r7, [sp, #96]	; 0x60
   15e90:	str	r4, [sp, #100]	; 0x64
   15e94:	str	r8, [sp, #84]	; 0x54
   15e98:	ldr	r3, [sp, #24]
   15e9c:	add	r4, r9, r5
   15ea0:	add	r7, sl, r4
   15ea4:	sub	r2, r3, r4
   15ea8:	mov	r1, r7
   15eac:	add	r3, sp, #108	; 0x6c
   15eb0:	add	r0, sp, #104	; 0x68
   15eb4:	bl	183a4 <__assert_fail@plt+0x6ee0>
   15eb8:	subs	r8, r0, #0
   15ebc:	beq	15f0c <__assert_fail@plt+0x4a48>
   15ec0:	cmn	r8, #1
   15ec4:	beq	1626c <__assert_fail@plt+0x4da8>
   15ec8:	cmn	r8, #2
   15ecc:	beq	1638c <__assert_fail@plt+0x4ec8>
   15ed0:	ldr	r3, [sp, #32]
   15ed4:	cmp	fp, #2
   15ed8:	movne	r3, #0
   15edc:	andeq	r3, r3, #1
   15ee0:	cmp	r3, #0
   15ee4:	bne	1606c <__assert_fail@plt+0x4ba8>
   15ee8:	ldr	r0, [sp, #104]	; 0x68
   15eec:	bl	11248 <iswprint@plt>
   15ef0:	add	r5, r5, r8
   15ef4:	cmp	r0, #0
   15ef8:	add	r0, sp, #108	; 0x6c
   15efc:	moveq	r6, #0
   15f00:	bl	111dc <mbsinit@plt>
   15f04:	cmp	r0, #0
   15f08:	beq	15e98 <__assert_fail@plt+0x49d4>
   15f0c:	ldr	r3, [sp, #28]
   15f10:	mov	ip, r5
   15f14:	eor	r2, r6, #1
   15f18:	ldr	r5, [sp, #92]	; 0x5c
   15f1c:	ldr	r7, [sp, #96]	; 0x60
   15f20:	ldr	r4, [sp, #100]	; 0x64
   15f24:	ldr	r8, [sp, #84]	; 0x54
   15f28:	ldr	sl, [sp, #88]	; 0x58
   15f2c:	and	r2, r2, r3
   15f30:	cmp	ip, #1
   15f34:	bls	15834 <__assert_fail@plt+0x4370>
   15f38:	add	r1, ip, r9
   15f3c:	ldr	lr, [sp, #48]	; 0x30
   15f40:	mov	r0, #0
   15f44:	str	r6, [sp, #48]	; 0x30
   15f48:	mov	ip, #39	; 0x27
   15f4c:	ldr	r6, [sp, #44]	; 0x2c
   15f50:	b	16008 <__assert_fail@plt+0x4b44>
   15f54:	ldr	r0, [sp, #32]
   15f58:	sub	r3, fp, #2
   15f5c:	cmp	r0, #0
   15f60:	clz	r3, r3
   15f64:	lsr	r3, r3, #5
   15f68:	bne	16170 <__assert_fail@plt+0x4cac>
   15f6c:	eor	r0, r6, #1
   15f70:	ands	r3, r3, r0
   15f74:	beq	15fa4 <__assert_fail@plt+0x4ae0>
   15f78:	add	r0, r4, #1
   15f7c:	cmp	sl, r4
   15f80:	strbhi	ip, [r8, r4]
   15f84:	cmp	sl, r0
   15f88:	movhi	r6, #36	; 0x24
   15f8c:	strbhi	r6, [r8, r0]
   15f90:	add	r0, r4, #2
   15f94:	mov	r6, r3
   15f98:	add	r4, r4, #3
   15f9c:	cmp	sl, r0
   15fa0:	strbhi	ip, [r8, r0]
   15fa4:	cmp	sl, r4
   15fa8:	movhi	r3, #92	; 0x5c
   15fac:	strbhi	r3, [r8, r4]
   15fb0:	add	r3, r4, #1
   15fb4:	cmp	sl, r3
   15fb8:	lsrhi	r0, r5, #6
   15fbc:	addhi	r0, r0, #48	; 0x30
   15fc0:	strbhi	r0, [r8, r3]
   15fc4:	add	r0, r4, #2
   15fc8:	cmp	sl, r0
   15fcc:	lsrhi	r3, r5, #3
   15fd0:	andhi	r3, r3, #7
   15fd4:	addhi	r3, r3, #48	; 0x30
   15fd8:	add	r9, r9, #1
   15fdc:	strbhi	r3, [r8, r0]
   15fe0:	and	r5, r5, #7
   15fe4:	cmp	r9, r1
   15fe8:	add	r5, r5, #48	; 0x30
   15fec:	add	r4, r4, #3
   15ff0:	bcs	16190 <__assert_fail@plt+0x4ccc>
   15ff4:	mov	r0, r2
   15ff8:	cmp	sl, r4
   15ffc:	strbhi	r5, [r8, r4]
   16000:	ldrb	r5, [lr, #1]!
   16004:	add	r4, r4, #1
   16008:	cmp	r2, #0
   1600c:	bne	15f54 <__assert_fail@plt+0x4a90>
   16010:	eor	r3, r0, #1
   16014:	and	r3, r3, r6
   16018:	cmp	r7, #0
   1601c:	uxtb	r3, r3
   16020:	beq	16034 <__assert_fail@plt+0x4b70>
   16024:	cmp	sl, r4
   16028:	movhi	r7, #92	; 0x5c
   1602c:	strbhi	r7, [r8, r4]
   16030:	add	r4, r4, #1
   16034:	add	r9, r9, #1
   16038:	cmp	r9, r1
   1603c:	bcs	16184 <__assert_fail@plt+0x4cc0>
   16040:	cmp	r3, #0
   16044:	beq	161b0 <__assert_fail@plt+0x4cec>
   16048:	cmp	sl, r4
   1604c:	add	r3, r4, #1
   16050:	strbhi	ip, [r8, r4]
   16054:	mov	r7, #0
   16058:	cmp	sl, r3
   1605c:	strbhi	ip, [r8, r3]
   16060:	add	r4, r4, #2
   16064:	mov	r6, r7
   16068:	b	15ff8 <__assert_fail@plt+0x4b34>
   1606c:	cmp	r8, #1
   16070:	beq	15ee8 <__assert_fail@plt+0x4a24>
   16074:	add	r1, r4, #1
   16078:	add	r3, sl, r8
   1607c:	add	r1, sl, r1
   16080:	add	r4, r3, r4
   16084:	ldrb	r3, [r1], #1
   16088:	sub	r3, r3, #91	; 0x5b
   1608c:	cmp	r3, #33	; 0x21
   16090:	ldrls	pc, [pc, r3, lsl #2]
   16094:	b	16120 <__assert_fail@plt+0x4c5c>
   16098:	andeq	r6, r1, ip, lsr #2
   1609c:	andeq	r6, r1, ip, lsr #2
   160a0:	andeq	r6, r1, r0, lsr #2
   160a4:	andeq	r6, r1, ip, lsr #2
   160a8:	andeq	r6, r1, r0, lsr #2
   160ac:	andeq	r6, r1, ip, lsr #2
   160b0:	andeq	r6, r1, r0, lsr #2
   160b4:	andeq	r6, r1, r0, lsr #2
   160b8:	andeq	r6, r1, r0, lsr #2
   160bc:	andeq	r6, r1, r0, lsr #2
   160c0:	andeq	r6, r1, r0, lsr #2
   160c4:	andeq	r6, r1, r0, lsr #2
   160c8:	andeq	r6, r1, r0, lsr #2
   160cc:	andeq	r6, r1, r0, lsr #2
   160d0:	andeq	r6, r1, r0, lsr #2
   160d4:	andeq	r6, r1, r0, lsr #2
   160d8:	andeq	r6, r1, r0, lsr #2
   160dc:	andeq	r6, r1, r0, lsr #2
   160e0:	andeq	r6, r1, r0, lsr #2
   160e4:	andeq	r6, r1, r0, lsr #2
   160e8:	andeq	r6, r1, r0, lsr #2
   160ec:	andeq	r6, r1, r0, lsr #2
   160f0:	andeq	r6, r1, r0, lsr #2
   160f4:	andeq	r6, r1, r0, lsr #2
   160f8:	andeq	r6, r1, r0, lsr #2
   160fc:	andeq	r6, r1, r0, lsr #2
   16100:	andeq	r6, r1, r0, lsr #2
   16104:	andeq	r6, r1, r0, lsr #2
   16108:	andeq	r6, r1, r0, lsr #2
   1610c:	andeq	r6, r1, r0, lsr #2
   16110:	andeq	r6, r1, r0, lsr #2
   16114:	andeq	r6, r1, r0, lsr #2
   16118:	andeq	r6, r1, r0, lsr #2
   1611c:	andeq	r6, r1, ip, lsr #2
   16120:	cmp	r4, r1
   16124:	bne	16084 <__assert_fail@plt+0x4bc0>
   16128:	b	15ee8 <__assert_fail@plt+0x4a24>
   1612c:	ldr	fp, [sp, #84]	; 0x54
   16130:	ldr	sl, [sp, #88]	; 0x58
   16134:	mov	r8, #2
   16138:	b	155f4 <__assert_fail@plt+0x4130>
   1613c:	cmp	sl, r4
   16140:	movls	r1, r4
   16144:	bls	15744 <__assert_fail@plt+0x4280>
   16148:	ldr	r3, [sp, #44]	; 0x2c
   1614c:	b	15734 <__assert_fail@plt+0x4270>
   16150:	str	sl, [sp, #72]	; 0x48
   16154:	ldr	sl, [sp, #32]
   16158:	b	1556c <__assert_fail@plt+0x40a8>
   1615c:	add	r9, r9, #1
   16160:	b	14e60 <__assert_fail@plt+0x399c>
   16164:	ldr	r2, [sp, #28]
   16168:	mov	r6, #0
   1616c:	b	15f38 <__assert_fail@plt+0x4a74>
   16170:	str	fp, [sp, #160]	; 0xa0
   16174:	str	r3, [sp, #28]
   16178:	mov	fp, r8
   1617c:	ldr	r8, [sp, #160]	; 0xa0
   16180:	b	155f4 <__assert_fail@plt+0x4130>
   16184:	str	r6, [sp, #44]	; 0x2c
   16188:	ldr	r6, [sp, #48]	; 0x30
   1618c:	b	1559c <__assert_fail@plt+0x40d8>
   16190:	str	r6, [sp, #44]	; 0x2c
   16194:	ldr	r6, [sp, #48]	; 0x30
   16198:	b	153a8 <__assert_fail@plt+0x3ee4>
   1619c:	add	r4, r4, #4
   161a0:	str	r3, [sp, #44]	; 0x2c
   161a4:	mov	r6, #0
   161a8:	mov	r5, #48	; 0x30
   161ac:	b	15330 <__assert_fail@plt+0x3e6c>
   161b0:	mov	r7, r3
   161b4:	b	15ff8 <__assert_fail@plt+0x4b34>
   161b8:	ldr	r3, [pc, #-1624]	; 15b68 <__assert_fail@plt+0x46a4>
   161bc:	mov	r4, #1
   161c0:	str	r4, [sp, #40]	; 0x28
   161c4:	str	r4, [sp, #28]
   161c8:	str	r4, [sp, #52]	; 0x34
   161cc:	str	sl, [sp, #72]	; 0x48
   161d0:	str	sl, [sp, #68]	; 0x44
   161d4:	str	sl, [sp, #44]	; 0x2c
   161d8:	str	sl, [sp, #32]
   161dc:	str	r3, [sp, #60]	; 0x3c
   161e0:	b	14e50 <__assert_fail@plt+0x398c>
   161e4:	mov	r3, r6
   161e8:	mov	r5, #48	; 0x30
   161ec:	mov	r6, #0
   161f0:	b	15330 <__assert_fail@plt+0x3e6c>
   161f4:	cmp	sl, r4
   161f8:	movhi	r3, #48	; 0x30
   161fc:	strbhi	r3, [r8, r4]
   16200:	add	r3, r1, #2
   16204:	cmp	sl, r3
   16208:	movhi	r0, #48	; 0x30
   1620c:	strbhi	r0, [r8, r3]
   16210:	add	r4, r1, #3
   16214:	mov	r5, #48	; 0x30
   16218:	b	15778 <__assert_fail@plt+0x42b4>
   1621c:	str	fp, [sp, #160]	; 0xa0
   16220:	mov	fp, r8
   16224:	ldr	r8, [sp, #160]	; 0xa0
   16228:	b	155f4 <__assert_fail@plt+0x4130>
   1622c:	ldr	r2, [sp, #80]	; 0x50
   16230:	ldrb	r3, [r2]
   16234:	cmp	r3, #0
   16238:	beq	14e20 <__assert_fail@plt+0x395c>
   1623c:	cmp	sl, r4
   16240:	strbhi	r3, [fp, r4]
   16244:	ldrb	r3, [r2, #1]!
   16248:	add	r4, r4, #1
   1624c:	cmp	r3, #0
   16250:	bne	1623c <__assert_fail@plt+0x4d78>
   16254:	b	14e20 <__assert_fail@plt+0x395c>
   16258:	str	fp, [sp, #160]	; 0xa0
   1625c:	mov	r3, #0
   16260:	mov	fp, r8
   16264:	ldr	r8, [sp, #160]	; 0xa0
   16268:	b	15688 <__assert_fail@plt+0x41c4>
   1626c:	mov	ip, r5
   16270:	ldr	r7, [sp, #96]	; 0x60
   16274:	ldr	r5, [sp, #92]	; 0x5c
   16278:	ldr	r4, [sp, #100]	; 0x64
   1627c:	ldr	r8, [sp, #84]	; 0x54
   16280:	ldr	sl, [sp, #88]	; 0x58
   16284:	ldr	r2, [sp, #28]
   16288:	mov	r6, #0
   1628c:	b	15f30 <__assert_fail@plt+0x4a6c>
   16290:	ldr	r2, [sp, #36]	; 0x24
   16294:	ldrb	r1, [r2, r3]
   16298:	sub	r2, r1, #33	; 0x21
   1629c:	cmp	r2, #29
   162a0:	ldrls	pc, [pc, r2, lsl #2]
   162a4:	b	16380 <__assert_fail@plt+0x4ebc>
   162a8:	andeq	r6, r1, r0, lsr #6
   162ac:	andeq	r6, r1, r0, lsl #7
   162b0:	andeq	r6, r1, r0, lsl #7
   162b4:	andeq	r6, r1, r0, lsl #7
   162b8:	andeq	r6, r1, r0, lsl #7
   162bc:	andeq	r6, r1, r0, lsl #7
   162c0:	andeq	r6, r1, r0, lsr #6
   162c4:	andeq	r6, r1, r0, lsr #6
   162c8:	andeq	r6, r1, r0, lsr #6
   162cc:	andeq	r6, r1, r0, lsl #7
   162d0:	andeq	r6, r1, r0, lsl #7
   162d4:	andeq	r6, r1, r0, lsl #7
   162d8:	andeq	r6, r1, r0, lsr #6
   162dc:	andeq	r6, r1, r0, lsl #7
   162e0:	andeq	r6, r1, r0, lsr #6
   162e4:	andeq	r6, r1, r0, lsl #7
   162e8:	andeq	r6, r1, r0, lsl #7
   162ec:	andeq	r6, r1, r0, lsl #7
   162f0:	andeq	r6, r1, r0, lsl #7
   162f4:	andeq	r6, r1, r0, lsl #7
   162f8:	andeq	r6, r1, r0, lsl #7
   162fc:	andeq	r6, r1, r0, lsl #7
   16300:	andeq	r6, r1, r0, lsl #7
   16304:	andeq	r6, r1, r0, lsl #7
   16308:	andeq	r6, r1, r0, lsl #7
   1630c:	andeq	r6, r1, r0, lsl #7
   16310:	andeq	r6, r1, r0, lsl #7
   16314:	andeq	r6, r1, r0, lsr #6
   16318:	andeq	r6, r1, r0, lsr #6
   1631c:	andeq	r6, r1, r0, lsr #6
   16320:	ldr	r2, [sp, #32]
   16324:	cmp	r2, #0
   16328:	bne	1642c <__assert_fail@plt+0x4f68>
   1632c:	cmp	sl, r4
   16330:	movhi	r2, #63	; 0x3f
   16334:	strbhi	r2, [r8, r4]
   16338:	add	r2, r4, #1
   1633c:	cmp	sl, r2
   16340:	movhi	r0, #34	; 0x22
   16344:	strbhi	r0, [r8, r2]
   16348:	add	r2, r4, #2
   1634c:	cmp	sl, r2
   16350:	movhi	r0, #34	; 0x22
   16354:	strbhi	r0, [r8, r2]
   16358:	add	r2, r4, #3
   1635c:	cmp	sl, r2
   16360:	movhi	r0, #63	; 0x3f
   16364:	strbhi	r0, [r8, r2]
   16368:	mov	r2, #0
   1636c:	add	r4, r4, #4
   16370:	mov	r5, r1
   16374:	mov	r9, r3
   16378:	mov	r6, r2
   1637c:	b	15778 <__assert_fail@plt+0x42b4>
   16380:	mov	r2, #0
   16384:	mov	r6, r2
   16388:	b	152e8 <__assert_fail@plt+0x3e24>
   1638c:	ldr	r0, [sp, #24]
   16390:	mov	r1, r4
   16394:	cmp	r1, r0
   16398:	mov	r2, r7
   1639c:	mov	r3, r5
   163a0:	mov	ip, r5
   163a4:	ldr	r7, [sp, #96]	; 0x60
   163a8:	ldr	r5, [sp, #92]	; 0x5c
   163ac:	ldr	r4, [sp, #100]	; 0x64
   163b0:	ldr	r8, [sp, #84]	; 0x54
   163b4:	ldr	sl, [sp, #88]	; 0x58
   163b8:	bcs	163ec <__assert_fail@plt+0x4f28>
   163bc:	ldrb	r6, [r2]
   163c0:	cmp	r6, #0
   163c4:	bne	163d8 <__assert_fail@plt+0x4f14>
   163c8:	b	16508 <__assert_fail@plt+0x5044>
   163cc:	ldrb	r6, [r2, #1]!
   163d0:	cmp	r6, #0
   163d4:	beq	16490 <__assert_fail@plt+0x4fcc>
   163d8:	add	r3, r3, #1
   163dc:	add	r1, r9, r3
   163e0:	cmp	r1, r0
   163e4:	bcc	163cc <__assert_fail@plt+0x4f08>
   163e8:	mov	ip, r3
   163ec:	ldr	r2, [sp, #28]
   163f0:	mov	r6, #0
   163f4:	b	15f30 <__assert_fail@plt+0x4a6c>
   163f8:	mov	r3, #1
   163fc:	str	r3, [sp, #40]	; 0x28
   16400:	str	r3, [sp, #32]
   16404:	str	r3, [sp, #28]
   16408:	str	r3, [sp, #52]	; 0x34
   1640c:	ldr	r3, [pc, #-2220]	; 15b68 <__assert_fail@plt+0x46a4>
   16410:	mov	r2, #0
   16414:	str	r2, [sp, #68]	; 0x44
   16418:	str	r2, [sp, #44]	; 0x2c
   1641c:	str	r2, [sp, #72]	; 0x48
   16420:	mov	r4, r2
   16424:	str	r3, [sp, #60]	; 0x3c
   16428:	b	14e50 <__assert_fail@plt+0x398c>
   1642c:	str	fp, [sp, #160]	; 0xa0
   16430:	mov	fp, r8
   16434:	ldr	r8, [sp, #160]	; 0xa0
   16438:	b	15600 <__assert_fail@plt+0x413c>
   1643c:	mov	r2, r3
   16440:	ldr	r3, [sp, #60]	; 0x3c
   16444:	cmp	r3, #0
   16448:	moveq	r2, #0
   1644c:	andne	r2, r2, #1
   16450:	cmp	r2, #0
   16454:	beq	16480 <__assert_fail@plt+0x4fbc>
   16458:	mov	r2, r3
   1645c:	ldrb	r3, [r3]
   16460:	cmp	r3, #0
   16464:	beq	16480 <__assert_fail@plt+0x4fbc>
   16468:	cmp	sl, r4
   1646c:	strbhi	r3, [fp, r4]
   16470:	ldrb	r3, [r2, #1]!
   16474:	add	r4, r4, #1
   16478:	cmp	r3, #0
   1647c:	bne	16468 <__assert_fail@plt+0x4fa4>
   16480:	cmp	sl, r4
   16484:	movhi	r3, #0
   16488:	strbhi	r3, [fp, r4]
   1648c:	b	15640 <__assert_fail@plt+0x417c>
   16490:	mov	ip, r3
   16494:	ldr	r2, [sp, #28]
   16498:	b	15f30 <__assert_fail@plt+0x4a6c>
   1649c:	str	fp, [sp, #160]	; 0xa0
   164a0:	mov	fp, r8
   164a4:	ldr	r8, [sp, #160]	; 0xa0
   164a8:	sub	r3, r8, #2
   164ac:	clz	r3, r3
   164b0:	lsr	r3, r3, #5
   164b4:	str	r3, [sp, #28]
   164b8:	b	155f4 <__assert_fail@plt+0x4130>
   164bc:	ldr	r3, [sp, #76]	; 0x4c
   164c0:	mov	ip, #5
   164c4:	str	r3, [sp, #16]
   164c8:	ldr	r3, [sp, #80]	; 0x50
   164cc:	ldr	r2, [sp, #36]	; 0x24
   164d0:	str	r3, [sp, #12]
   164d4:	ldr	r3, [sp, #56]	; 0x38
   164d8:	ldr	r1, [sp, #72]	; 0x48
   164dc:	str	r3, [sp, #8]
   164e0:	ldr	r3, [sp, #164]	; 0xa4
   164e4:	mov	r0, fp
   164e8:	str	r3, [sp, #4]
   164ec:	str	ip, [sp]
   164f0:	ldr	r3, [sp, #24]
   164f4:	bl	14d58 <__assert_fail@plt+0x3894>
   164f8:	mov	r4, r0
   164fc:	b	15640 <__assert_fail@plt+0x417c>
   16500:	mov	r8, #2
   16504:	b	155f4 <__assert_fail@plt+0x4130>
   16508:	ldr	r2, [sp, #28]
   1650c:	b	15f30 <__assert_fail@plt+0x4a6c>
   16510:	mov	r3, #0
   16514:	str	r3, [sp, #68]	; 0x44
   16518:	str	r3, [sp, #44]	; 0x2c
   1651c:	str	r3, [sp, #72]	; 0x48
   16520:	str	r3, [sp, #28]
   16524:	mov	r4, r3
   16528:	ldr	r3, [pc, #-2500]	; 15b6c <__assert_fail@plt+0x46a8>
   1652c:	mov	r2, #1
   16530:	str	r2, [sp, #40]	; 0x28
   16534:	str	r2, [sp, #32]
   16538:	str	r2, [sp, #52]	; 0x34
   1653c:	str	r3, [sp, #60]	; 0x3c
   16540:	b	14e50 <__assert_fail@plt+0x398c>
   16544:	bl	11218 <__stack_chk_fail@plt>
   16548:	mov	r5, r3
   1654c:	mov	r6, #0
   16550:	b	15344 <__assert_fail@plt+0x3e80>
   16554:	mov	r3, #0
   16558:	mov	r2, #1
   1655c:	str	r3, [sp, #44]	; 0x2c
   16560:	str	r3, [sp, #72]	; 0x48
   16564:	str	r2, [sp, #40]	; 0x28
   16568:	b	15460 <__assert_fail@plt+0x3f9c>
   1656c:	bl	114a0 <abort@plt>
   16570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16574:	sub	sp, sp, #44	; 0x2c
   16578:	mov	r6, r0
   1657c:	mov	r4, r3
   16580:	mov	sl, r1
   16584:	mov	fp, r2
   16588:	bl	1138c <__errno_location@plt>
   1658c:	ldr	r7, [pc, #364]	; 16700 <__assert_fail@plt+0x523c>
   16590:	cmp	r6, #0
   16594:	ldr	r5, [r7]
   16598:	ldr	r3, [r0]
   1659c:	str	r3, [sp, #24]
   165a0:	blt	166fc <__assert_fail@plt+0x5238>
   165a4:	ldr	r3, [r7, #4]
   165a8:	mov	r8, r0
   165ac:	cmp	r3, r6
   165b0:	bgt	165fc <__assert_fail@plt+0x5138>
   165b4:	cmn	r6, #-268435454	; 0xf0000002
   165b8:	bgt	166f8 <__assert_fail@plt+0x5234>
   165bc:	add	r9, r6, #1
   165c0:	add	r3, r7, #8
   165c4:	cmp	r5, r3
   165c8:	lsl	r1, r9, #3
   165cc:	beq	166d8 <__assert_fail@plt+0x5214>
   165d0:	mov	r0, r5
   165d4:	bl	17478 <__assert_fail@plt+0x5fb4>
   165d8:	mov	r5, r0
   165dc:	str	r0, [r7]
   165e0:	ldr	r0, [r7, #4]
   165e4:	mov	r1, #0
   165e8:	sub	r2, r9, r0
   165ec:	add	r0, r5, r0, lsl #3
   165f0:	lsl	r2, r2, #3
   165f4:	bl	113b0 <memset@plt>
   165f8:	str	r9, [r7, #4]
   165fc:	add	r3, r5, r6, lsl #3
   16600:	ldr	r1, [r4, #4]
   16604:	ldr	r7, [r3, #4]
   16608:	ldr	r9, [r5, r6, lsl #3]
   1660c:	ldr	r2, [r4, #40]	; 0x28
   16610:	ldr	ip, [r4, #44]	; 0x2c
   16614:	str	r3, [sp, #28]
   16618:	ldr	r3, [r4]
   1661c:	orr	r1, r1, #1
   16620:	add	lr, r4, #8
   16624:	str	r1, [sp, #36]	; 0x24
   16628:	str	r1, [sp, #4]
   1662c:	str	r2, [sp, #12]
   16630:	str	r3, [sp]
   16634:	mov	r0, r7
   16638:	mov	r1, r9
   1663c:	str	ip, [sp, #16]
   16640:	str	lr, [sp, #8]
   16644:	mov	r3, fp
   16648:	mov	r2, sl
   1664c:	str	lr, [sp, #32]
   16650:	bl	14d58 <__assert_fail@plt+0x3894>
   16654:	cmp	r9, r0
   16658:	bhi	166c4 <__assert_fail@plt+0x5200>
   1665c:	ldr	r3, [pc, #160]	; 16704 <__assert_fail@plt+0x5240>
   16660:	add	r9, r0, #1
   16664:	cmp	r7, r3
   16668:	str	r9, [r5, r6, lsl #3]
   1666c:	beq	16678 <__assert_fail@plt+0x51b4>
   16670:	mov	r0, r7
   16674:	bl	111ac <free@plt>
   16678:	mov	r0, r9
   1667c:	bl	1741c <__assert_fail@plt+0x5f58>
   16680:	ldr	lr, [sp, #28]
   16684:	ldr	ip, [r4, #44]	; 0x2c
   16688:	ldr	r5, [r4, #40]	; 0x28
   1668c:	mov	r3, fp
   16690:	mov	r2, sl
   16694:	mov	r1, r9
   16698:	str	r0, [lr, #4]
   1669c:	ldr	lr, [r4]
   166a0:	ldr	r4, [sp, #32]
   166a4:	str	ip, [sp, #16]
   166a8:	str	r4, [sp, #8]
   166ac:	ldr	r4, [sp, #36]	; 0x24
   166b0:	str	r5, [sp, #12]
   166b4:	str	r4, [sp, #4]
   166b8:	str	lr, [sp]
   166bc:	mov	r7, r0
   166c0:	bl	14d58 <__assert_fail@plt+0x3894>
   166c4:	ldr	r3, [sp, #24]
   166c8:	mov	r0, r7
   166cc:	str	r3, [r8]
   166d0:	add	sp, sp, #44	; 0x2c
   166d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166d8:	mov	r0, #0
   166dc:	bl	17478 <__assert_fail@plt+0x5fb4>
   166e0:	ldr	r3, [pc, #32]	; 16708 <__assert_fail@plt+0x5244>
   166e4:	mov	r5, r0
   166e8:	ldm	r3, {r0, r1}
   166ec:	str	r5, [r7]
   166f0:	stm	r5, {r0, r1}
   166f4:	b	165e0 <__assert_fail@plt+0x511c>
   166f8:	bl	17664 <__assert_fail@plt+0x61a0>
   166fc:	bl	114a0 <abort@plt>
   16700:	andeq	fp, r2, r4, ror #2
   16704:	andeq	fp, r2, r8, lsr #10
   16708:	andeq	fp, r2, ip, ror #2
   1670c:	push	{r4, r5, r6, lr}
   16710:	mov	r5, r0
   16714:	bl	1138c <__errno_location@plt>
   16718:	cmp	r5, #0
   1671c:	mov	r1, #48	; 0x30
   16720:	mov	r4, r0
   16724:	ldr	r0, [pc, #16]	; 1673c <__assert_fail@plt+0x5278>
   16728:	ldr	r6, [r4]
   1672c:	movne	r0, r5
   16730:	bl	17624 <__assert_fail@plt+0x6160>
   16734:	str	r6, [r4]
   16738:	pop	{r4, r5, r6, pc}
   1673c:	andeq	fp, r2, r8, lsr #12
   16740:	ldr	r3, [pc, #12]	; 16754 <__assert_fail@plt+0x5290>
   16744:	cmp	r0, #0
   16748:	moveq	r0, r3
   1674c:	ldr	r0, [r0]
   16750:	bx	lr
   16754:	andeq	fp, r2, r8, lsr #12
   16758:	ldr	r3, [pc, #12]	; 1676c <__assert_fail@plt+0x52a8>
   1675c:	cmp	r0, #0
   16760:	moveq	r0, r3
   16764:	str	r1, [r0]
   16768:	bx	lr
   1676c:	andeq	fp, r2, r8, lsr #12
   16770:	ldr	r3, [pc, #52]	; 167ac <__assert_fail@plt+0x52e8>
   16774:	cmp	r0, #0
   16778:	moveq	r0, r3
   1677c:	add	r3, r0, #8
   16780:	push	{lr}		; (str lr, [sp, #-4]!)
   16784:	lsr	lr, r1, #5
   16788:	and	r1, r1, #31
   1678c:	ldr	ip, [r3, lr, lsl #2]
   16790:	lsr	r0, ip, r1
   16794:	eor	r2, r2, r0
   16798:	and	r2, r2, #1
   1679c:	and	r0, r0, #1
   167a0:	eor	r1, ip, r2, lsl r1
   167a4:	str	r1, [r3, lr, lsl #2]
   167a8:	pop	{pc}		; (ldr pc, [sp], #4)
   167ac:	andeq	fp, r2, r8, lsr #12
   167b0:	ldr	r3, [pc, #16]	; 167c8 <__assert_fail@plt+0x5304>
   167b4:	cmp	r0, #0
   167b8:	movne	r3, r0
   167bc:	ldr	r0, [r3, #4]
   167c0:	str	r1, [r3, #4]
   167c4:	bx	lr
   167c8:	andeq	fp, r2, r8, lsr #12
   167cc:	ldr	r3, [pc, #44]	; 16800 <__assert_fail@plt+0x533c>
   167d0:	cmp	r0, #0
   167d4:	moveq	r0, r3
   167d8:	mov	ip, #10
   167dc:	cmp	r2, #0
   167e0:	cmpne	r1, #0
   167e4:	str	ip, [r0]
   167e8:	beq	167f8 <__assert_fail@plt+0x5334>
   167ec:	str	r1, [r0, #40]	; 0x28
   167f0:	str	r2, [r0, #44]	; 0x2c
   167f4:	bx	lr
   167f8:	push	{r4, lr}
   167fc:	bl	114a0 <abort@plt>
   16800:	andeq	fp, r2, r8, lsr #12
   16804:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16808:	sub	sp, sp, #24
   1680c:	ldr	ip, [pc, #108]	; 16880 <__assert_fail@plt+0x53bc>
   16810:	ldr	r4, [sp, #56]	; 0x38
   16814:	mov	r9, r2
   16818:	cmp	r4, #0
   1681c:	moveq	r4, ip
   16820:	mov	sl, r3
   16824:	mov	r7, r0
   16828:	mov	r8, r1
   1682c:	bl	1138c <__errno_location@plt>
   16830:	ldr	r3, [r4, #44]	; 0x2c
   16834:	mov	r1, r8
   16838:	ldr	r6, [r0]
   1683c:	str	r3, [sp, #16]
   16840:	ldr	r2, [r4, #40]	; 0x28
   16844:	add	r3, r4, #8
   16848:	str	r3, [sp, #8]
   1684c:	str	r2, [sp, #12]
   16850:	ldr	r2, [r4, #4]
   16854:	mov	r5, r0
   16858:	str	r2, [sp, #4]
   1685c:	ldr	ip, [r4]
   16860:	mov	r3, sl
   16864:	mov	r2, r9
   16868:	mov	r0, r7
   1686c:	str	ip, [sp]
   16870:	bl	14d58 <__assert_fail@plt+0x3894>
   16874:	str	r6, [r5]
   16878:	add	sp, sp, #24
   1687c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16880:	andeq	fp, r2, r8, lsr #12
   16884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16888:	cmp	r3, #0
   1688c:	sub	sp, sp, #44	; 0x2c
   16890:	ldr	r4, [pc, #192]	; 16958 <__assert_fail@plt+0x5494>
   16894:	mov	r6, r2
   16898:	movne	r4, r3
   1689c:	mov	r9, r1
   168a0:	mov	r8, r0
   168a4:	bl	1138c <__errno_location@plt>
   168a8:	ldr	r3, [r4, #44]	; 0x2c
   168ac:	ldr	r5, [r4, #4]
   168b0:	add	sl, r4, #8
   168b4:	cmp	r6, #0
   168b8:	orreq	r5, r5, #1
   168bc:	mov	r1, #0
   168c0:	ldr	r2, [r0]
   168c4:	str	r3, [sp, #16]
   168c8:	ldr	r3, [r4, #40]	; 0x28
   168cc:	stmib	sp, {r5, sl}
   168d0:	str	r3, [sp, #12]
   168d4:	ldr	r3, [r4]
   168d8:	mov	r7, r0
   168dc:	str	r2, [sp, #28]
   168e0:	str	r3, [sp]
   168e4:	mov	r2, r8
   168e8:	mov	r3, r9
   168ec:	mov	r0, r1
   168f0:	bl	14d58 <__assert_fail@plt+0x3894>
   168f4:	add	r1, r0, #1
   168f8:	mov	fp, r0
   168fc:	mov	r0, r1
   16900:	str	r1, [sp, #36]	; 0x24
   16904:	bl	1741c <__assert_fail@plt+0x5f58>
   16908:	ldr	r3, [r4, #44]	; 0x2c
   1690c:	mov	r2, r8
   16910:	str	r3, [sp, #16]
   16914:	ldr	r3, [r4, #40]	; 0x28
   16918:	str	r5, [sp, #4]
   1691c:	str	r3, [sp, #12]
   16920:	str	sl, [sp, #8]
   16924:	ldr	ip, [r4]
   16928:	ldr	r1, [sp, #36]	; 0x24
   1692c:	mov	r3, r9
   16930:	str	ip, [sp]
   16934:	str	r0, [sp, #32]
   16938:	bl	14d58 <__assert_fail@plt+0x3894>
   1693c:	ldr	r2, [sp, #28]
   16940:	cmp	r6, #0
   16944:	str	r2, [r7]
   16948:	ldr	r0, [sp, #32]
   1694c:	strne	fp, [r6]
   16950:	add	sp, sp, #44	; 0x2c
   16954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16958:	andeq	fp, r2, r8, lsr #12
   1695c:	mov	r3, r2
   16960:	mov	r2, #0
   16964:	b	16884 <__assert_fail@plt+0x53c0>
   16968:	push	{r4, r5, r6, r7, r8, lr}
   1696c:	ldr	r6, [pc, #112]	; 169e4 <__assert_fail@plt+0x5520>
   16970:	ldr	r3, [r6, #4]
   16974:	ldr	r7, [r6]
   16978:	cmp	r3, #1
   1697c:	ble	169a0 <__assert_fail@plt+0x54dc>
   16980:	sub	r5, r7, #8
   16984:	add	r5, r5, r3, lsl #3
   16988:	mov	r4, r7
   1698c:	ldr	r0, [r4, #12]
   16990:	add	r4, r4, #8
   16994:	bl	111ac <free@plt>
   16998:	cmp	r4, r5
   1699c:	bne	1698c <__assert_fail@plt+0x54c8>
   169a0:	ldr	r0, [r7, #4]
   169a4:	ldr	r4, [pc, #60]	; 169e8 <__assert_fail@plt+0x5524>
   169a8:	cmp	r0, r4
   169ac:	beq	169c0 <__assert_fail@plt+0x54fc>
   169b0:	bl	111ac <free@plt>
   169b4:	mov	r3, #256	; 0x100
   169b8:	str	r4, [r6, #12]
   169bc:	str	r3, [r6, #8]
   169c0:	ldr	r4, [pc, #36]	; 169ec <__assert_fail@plt+0x5528>
   169c4:	cmp	r7, r4
   169c8:	beq	169d8 <__assert_fail@plt+0x5514>
   169cc:	mov	r0, r7
   169d0:	bl	111ac <free@plt>
   169d4:	str	r4, [r6]
   169d8:	mov	r3, #1
   169dc:	str	r3, [r6, #4]
   169e0:	pop	{r4, r5, r6, r7, r8, pc}
   169e4:	andeq	fp, r2, r4, ror #2
   169e8:	andeq	fp, r2, r8, lsr #10
   169ec:	andeq	fp, r2, ip, ror #2
   169f0:	ldr	r3, [pc, #4]	; 169fc <__assert_fail@plt+0x5538>
   169f4:	mvn	r2, #0
   169f8:	b	16570 <__assert_fail@plt+0x50ac>
   169fc:	andeq	fp, r2, r8, lsr #12
   16a00:	ldr	r3, [pc]	; 16a08 <__assert_fail@plt+0x5544>
   16a04:	b	16570 <__assert_fail@plt+0x50ac>
   16a08:	andeq	fp, r2, r8, lsr #12
   16a0c:	mov	r1, r0
   16a10:	ldr	r3, [pc, #8]	; 16a20 <__assert_fail@plt+0x555c>
   16a14:	mvn	r2, #0
   16a18:	mov	r0, #0
   16a1c:	b	16570 <__assert_fail@plt+0x50ac>
   16a20:	andeq	fp, r2, r8, lsr #12
   16a24:	mov	r2, r1
   16a28:	ldr	r3, [pc, #8]	; 16a38 <__assert_fail@plt+0x5574>
   16a2c:	mov	r1, r0
   16a30:	mov	r0, #0
   16a34:	b	16570 <__assert_fail@plt+0x50ac>
   16a38:	andeq	fp, r2, r8, lsr #12
   16a3c:	push	{r4, r5, r6, lr}
   16a40:	sub	sp, sp, #56	; 0x38
   16a44:	ldr	r4, [pc, #68]	; 16a90 <__assert_fail@plt+0x55cc>
   16a48:	mov	r6, r2
   16a4c:	mov	r5, r0
   16a50:	ldr	r3, [r4]
   16a54:	add	r0, sp, #4
   16a58:	str	r3, [sp, #52]	; 0x34
   16a5c:	bl	14be8 <__assert_fail@plt+0x3724>
   16a60:	add	r3, sp, #4
   16a64:	mvn	r2, #0
   16a68:	mov	r1, r6
   16a6c:	mov	r0, r5
   16a70:	bl	16570 <__assert_fail@plt+0x50ac>
   16a74:	ldr	r2, [sp, #52]	; 0x34
   16a78:	ldr	r3, [r4]
   16a7c:	cmp	r2, r3
   16a80:	bne	16a8c <__assert_fail@plt+0x55c8>
   16a84:	add	sp, sp, #56	; 0x38
   16a88:	pop	{r4, r5, r6, pc}
   16a8c:	bl	11218 <__stack_chk_fail@plt>
   16a90:	andeq	sl, r2, r8, lsl #30
   16a94:	push	{r4, r5, r6, r7, lr}
   16a98:	sub	sp, sp, #60	; 0x3c
   16a9c:	ldr	r4, [pc, #72]	; 16aec <__assert_fail@plt+0x5628>
   16aa0:	mov	r6, r2
   16aa4:	mov	r7, r3
   16aa8:	ldr	ip, [r4]
   16aac:	mov	r5, r0
   16ab0:	add	r0, sp, #4
   16ab4:	str	ip, [sp, #52]	; 0x34
   16ab8:	bl	14be8 <__assert_fail@plt+0x3724>
   16abc:	add	r3, sp, #4
   16ac0:	mov	r2, r7
   16ac4:	mov	r1, r6
   16ac8:	mov	r0, r5
   16acc:	bl	16570 <__assert_fail@plt+0x50ac>
   16ad0:	ldr	r2, [sp, #52]	; 0x34
   16ad4:	ldr	r3, [r4]
   16ad8:	cmp	r2, r3
   16adc:	bne	16ae8 <__assert_fail@plt+0x5624>
   16ae0:	add	sp, sp, #60	; 0x3c
   16ae4:	pop	{r4, r5, r6, r7, pc}
   16ae8:	bl	11218 <__stack_chk_fail@plt>
   16aec:	andeq	sl, r2, r8, lsl #30
   16af0:	mov	r2, r1
   16af4:	mov	r1, r0
   16af8:	mov	r0, #0
   16afc:	b	16a3c <__assert_fail@plt+0x5578>
   16b00:	mov	r3, r2
   16b04:	mov	r2, r1
   16b08:	mov	r1, r0
   16b0c:	mov	r0, #0
   16b10:	b	16a94 <__assert_fail@plt+0x55d0>
   16b14:	push	{r4, r5, r6, r7, r8, r9, lr}
   16b18:	mov	r4, r2
   16b1c:	ldr	lr, [pc, #128]	; 16ba4 <__assert_fail@plt+0x56e0>
   16b20:	mov	r8, r0
   16b24:	mov	r9, r1
   16b28:	ldm	lr!, {r0, r1, r2, r3}
   16b2c:	sub	sp, sp, #60	; 0x3c
   16b30:	add	ip, sp, #4
   16b34:	lsr	r6, r4, #5
   16b38:	stmia	ip!, {r0, r1, r2, r3}
   16b3c:	add	r7, sp, #12
   16b40:	ldm	lr!, {r0, r1, r2, r3}
   16b44:	and	r4, r4, #31
   16b48:	ldr	r5, [pc, #88]	; 16ba8 <__assert_fail@plt+0x56e4>
   16b4c:	stmia	ip!, {r0, r1, r2, r3}
   16b50:	ldm	lr, {r0, r1, r2, r3}
   16b54:	stm	ip, {r0, r1, r2, r3}
   16b58:	mov	r2, r9
   16b5c:	ldr	r3, [r7, r6, lsl #2]
   16b60:	ldr	ip, [r5]
   16b64:	mov	r1, r8
   16b68:	mvn	r0, r3, lsr r4
   16b6c:	and	r0, r0, #1
   16b70:	str	ip, [sp, #52]	; 0x34
   16b74:	eor	r4, r3, r0, lsl r4
   16b78:	add	r3, sp, #4
   16b7c:	mov	r0, #0
   16b80:	str	r4, [r7, r6, lsl #2]
   16b84:	bl	16570 <__assert_fail@plt+0x50ac>
   16b88:	ldr	r2, [sp, #52]	; 0x34
   16b8c:	ldr	r3, [r5]
   16b90:	cmp	r2, r3
   16b94:	bne	16ba0 <__assert_fail@plt+0x56dc>
   16b98:	add	sp, sp, #60	; 0x3c
   16b9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ba0:	bl	11218 <__stack_chk_fail@plt>
   16ba4:	andeq	fp, r2, r8, lsr #12
   16ba8:	andeq	sl, r2, r8, lsl #30
   16bac:	mov	r2, r1
   16bb0:	mvn	r1, #0
   16bb4:	b	16b14 <__assert_fail@plt+0x5650>
   16bb8:	mov	r2, #58	; 0x3a
   16bbc:	mvn	r1, #0
   16bc0:	b	16b14 <__assert_fail@plt+0x5650>
   16bc4:	mov	r2, #58	; 0x3a
   16bc8:	b	16b14 <__assert_fail@plt+0x5650>
   16bcc:	push	{r4, r5, r6, r7, r8, lr}
   16bd0:	sub	sp, sp, #104	; 0x68
   16bd4:	ldr	r5, [pc, #120]	; 16c54 <__assert_fail@plt+0x5790>
   16bd8:	mov	r6, r0
   16bdc:	mov	r0, sp
   16be0:	ldr	r3, [r5]
   16be4:	mov	r7, r2
   16be8:	str	r3, [sp, #100]	; 0x64
   16bec:	bl	14be8 <__assert_fail@plt+0x3724>
   16bf0:	mov	ip, sp
   16bf4:	add	lr, sp, #52	; 0x34
   16bf8:	ldm	ip!, {r0, r1, r2, r3}
   16bfc:	stmia	lr!, {r0, r1, r2, r3}
   16c00:	ldm	ip!, {r0, r1, r2, r3}
   16c04:	ldr	r8, [sp, #64]	; 0x40
   16c08:	stmia	lr!, {r0, r1, r2, r3}
   16c0c:	mvn	r4, r8
   16c10:	ldm	ip, {r0, r1, r2, r3}
   16c14:	and	ip, r4, #67108864	; 0x4000000
   16c18:	eor	ip, ip, r8
   16c1c:	str	ip, [sp, #64]	; 0x40
   16c20:	stm	lr, {r0, r1, r2, r3}
   16c24:	add	r3, sp, #52	; 0x34
   16c28:	mvn	r2, #0
   16c2c:	mov	r1, r7
   16c30:	mov	r0, r6
   16c34:	bl	16570 <__assert_fail@plt+0x50ac>
   16c38:	ldr	r2, [sp, #100]	; 0x64
   16c3c:	ldr	r3, [r5]
   16c40:	cmp	r2, r3
   16c44:	bne	16c50 <__assert_fail@plt+0x578c>
   16c48:	add	sp, sp, #104	; 0x68
   16c4c:	pop	{r4, r5, r6, r7, r8, pc}
   16c50:	bl	11218 <__stack_chk_fail@plt>
   16c54:	andeq	sl, r2, r8, lsl #30
   16c58:	push	{r4, r5, r6, r7, r8, r9, lr}
   16c5c:	mov	r6, r1
   16c60:	ldr	lr, [pc, #132]	; 16cec <__assert_fail@plt+0x5828>
   16c64:	mov	r5, r2
   16c68:	mov	r8, r0
   16c6c:	mov	r9, r3
   16c70:	ldm	lr!, {r0, r1, r2, r3}
   16c74:	sub	sp, sp, #60	; 0x3c
   16c78:	add	ip, sp, #4
   16c7c:	ldr	r4, [pc, #108]	; 16cf0 <__assert_fail@plt+0x582c>
   16c80:	stmia	ip!, {r0, r1, r2, r3}
   16c84:	mov	r7, #10
   16c88:	ldm	lr!, {r0, r1, r2, r3}
   16c8c:	cmp	r5, #0
   16c90:	cmpne	r6, #0
   16c94:	str	r7, [sp, #4]
   16c98:	stmia	ip!, {r0, r1, r2, r3}
   16c9c:	ldm	lr, {r0, r1, r2, r3}
   16ca0:	ldr	lr, [r4]
   16ca4:	stm	ip, {r0, r1, r2, r3}
   16ca8:	str	lr, [sp, #52]	; 0x34
   16cac:	beq	16ce8 <__assert_fail@plt+0x5824>
   16cb0:	add	r3, sp, #4
   16cb4:	ldr	r2, [sp, #88]	; 0x58
   16cb8:	mov	r1, r9
   16cbc:	mov	r0, r8
   16cc0:	str	r6, [sp, #44]	; 0x2c
   16cc4:	str	r5, [sp, #48]	; 0x30
   16cc8:	bl	16570 <__assert_fail@plt+0x50ac>
   16ccc:	ldr	r2, [sp, #52]	; 0x34
   16cd0:	ldr	r3, [r4]
   16cd4:	cmp	r2, r3
   16cd8:	bne	16ce4 <__assert_fail@plt+0x5820>
   16cdc:	add	sp, sp, #60	; 0x3c
   16ce0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ce4:	bl	11218 <__stack_chk_fail@plt>
   16ce8:	bl	114a0 <abort@plt>
   16cec:	andeq	fp, r2, r8, lsr #12
   16cf0:	andeq	sl, r2, r8, lsl #30
   16cf4:	push	{lr}		; (str lr, [sp, #-4]!)
   16cf8:	sub	sp, sp, #12
   16cfc:	mvn	ip, #0
   16d00:	str	ip, [sp]
   16d04:	bl	16c58 <__assert_fail@plt+0x5794>
   16d08:	add	sp, sp, #12
   16d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d10:	push	{lr}		; (str lr, [sp, #-4]!)
   16d14:	sub	sp, sp, #12
   16d18:	mvn	ip, #0
   16d1c:	mov	r3, r2
   16d20:	str	ip, [sp]
   16d24:	mov	r2, r1
   16d28:	mov	r1, r0
   16d2c:	mov	r0, #0
   16d30:	bl	16c58 <__assert_fail@plt+0x5794>
   16d34:	add	sp, sp, #12
   16d38:	pop	{pc}		; (ldr pc, [sp], #4)
   16d3c:	push	{lr}		; (str lr, [sp, #-4]!)
   16d40:	sub	sp, sp, #12
   16d44:	str	r3, [sp]
   16d48:	mov	r3, r2
   16d4c:	mov	r2, r1
   16d50:	mov	r1, r0
   16d54:	mov	r0, #0
   16d58:	bl	16c58 <__assert_fail@plt+0x5794>
   16d5c:	add	sp, sp, #12
   16d60:	pop	{pc}		; (ldr pc, [sp], #4)
   16d64:	ldr	r3, [pc]	; 16d6c <__assert_fail@plt+0x58a8>
   16d68:	b	16570 <__assert_fail@plt+0x50ac>
   16d6c:	andeq	fp, r2, r4, ror r1
   16d70:	mov	r2, r1
   16d74:	ldr	r3, [pc, #8]	; 16d84 <__assert_fail@plt+0x58c0>
   16d78:	mov	r1, r0
   16d7c:	mov	r0, #0
   16d80:	b	16570 <__assert_fail@plt+0x50ac>
   16d84:	andeq	fp, r2, r4, ror r1
   16d88:	ldr	r3, [pc, #4]	; 16d94 <__assert_fail@plt+0x58d0>
   16d8c:	mvn	r2, #0
   16d90:	b	16570 <__assert_fail@plt+0x50ac>
   16d94:	andeq	fp, r2, r4, ror r1
   16d98:	mov	r1, r0
   16d9c:	ldr	r3, [pc, #8]	; 16dac <__assert_fail@plt+0x58e8>
   16da0:	mvn	r2, #0
   16da4:	mov	r0, #0
   16da8:	b	16570 <__assert_fail@plt+0x50ac>
   16dac:	andeq	fp, r2, r4, ror r1
   16db0:	push	{r4, r5, r6, r7, r8, lr}
   16db4:	mov	r8, r0
   16db8:	ldr	r5, [pc, #84]	; 16e14 <__assert_fail@plt+0x5950>
   16dbc:	mov	r7, r1
   16dc0:	mov	r4, r2
   16dc4:	mov	r2, r4
   16dc8:	mov	r1, r7
   16dcc:	mov	r0, r8
   16dd0:	bl	1117c <read@plt>
   16dd4:	subs	r6, r0, #0
   16dd8:	bge	16e0c <__assert_fail@plt+0x5948>
   16ddc:	bl	1138c <__errno_location@plt>
   16de0:	ldr	r3, [r0]
   16de4:	cmp	r3, #4
   16de8:	beq	16dc4 <__assert_fail@plt+0x5900>
   16dec:	cmp	r4, r5
   16df0:	movls	r2, #0
   16df4:	movhi	r2, #1
   16df8:	cmp	r3, #22
   16dfc:	movne	r2, #0
   16e00:	cmp	r2, #0
   16e04:	mov	r4, r5
   16e08:	bne	16dc4 <__assert_fail@plt+0x5900>
   16e0c:	mov	r0, r6
   16e10:	pop	{r4, r5, r6, r7, r8, pc}
   16e14:	svcvc	0x00f00000	; IMB
   16e18:	push	{r4, r5, r6, r7, r8, lr}
   16e1c:	mov	r8, r0
   16e20:	ldr	r5, [pc, #84]	; 16e7c <__assert_fail@plt+0x59b8>
   16e24:	mov	r7, r1
   16e28:	mov	r4, r2
   16e2c:	mov	r2, r4
   16e30:	mov	r1, r7
   16e34:	mov	r0, r8
   16e38:	bl	113c8 <write@plt>
   16e3c:	subs	r6, r0, #0
   16e40:	bge	16e74 <__assert_fail@plt+0x59b0>
   16e44:	bl	1138c <__errno_location@plt>
   16e48:	ldr	r2, [r0]
   16e4c:	cmp	r2, #4
   16e50:	beq	16e2c <__assert_fail@plt+0x5968>
   16e54:	cmp	r4, r5
   16e58:	sub	r3, r2, #22
   16e5c:	clz	r3, r3
   16e60:	lsr	r3, r3, #5
   16e64:	movls	r3, #0
   16e68:	cmp	r3, #0
   16e6c:	mov	r4, r5
   16e70:	bne	16e2c <__assert_fail@plt+0x5968>
   16e74:	mov	r0, r6
   16e78:	pop	{r4, r5, r6, r7, r8, pc}
   16e7c:	svcvc	0x00f00000	; IMB
   16e80:	cmp	r0, #2
   16e84:	push	{r4, r5, r6, r7, r8, lr}
   16e88:	mov	r4, r0
   16e8c:	bls	16e98 <__assert_fail@plt+0x59d4>
   16e90:	mov	r0, r4
   16e94:	pop	{r4, r5, r6, r7, r8, pc}
   16e98:	bl	187a8 <__assert_fail@plt+0x72e4>
   16e9c:	mov	r7, r0
   16ea0:	bl	1138c <__errno_location@plt>
   16ea4:	mov	r5, r0
   16ea8:	mov	r0, r4
   16eac:	ldr	r6, [r5]
   16eb0:	mov	r4, r7
   16eb4:	bl	114ac <close@plt>
   16eb8:	str	r6, [r5]
   16ebc:	mov	r0, r4
   16ec0:	pop	{r4, r5, r6, r7, r8, pc}
   16ec4:	push	{r4, r5, r6, lr}
   16ec8:	sub	sp, sp, #32
   16ecc:	cmp	r1, #0
   16ed0:	mov	r5, r0
   16ed4:	ldr	r4, [sp, #48]	; 0x30
   16ed8:	ldr	r6, [sp, #52]	; 0x34
   16edc:	beq	16f6c <__assert_fail@plt+0x5aa8>
   16ee0:	strd	r2, [sp]
   16ee4:	mov	r3, r1
   16ee8:	ldr	r2, [pc, #828]	; 1722c <__assert_fail@plt+0x5d68>
   16eec:	mov	r1, #1
   16ef0:	bl	113e0 <__fprintf_chk@plt>
   16ef4:	mov	r2, #5
   16ef8:	ldr	r1, [pc, #816]	; 17230 <__assert_fail@plt+0x5d6c>
   16efc:	mov	r0, #0
   16f00:	bl	1120c <dcgettext@plt>
   16f04:	ldr	r3, [pc, #808]	; 17234 <__assert_fail@plt+0x5d70>
   16f08:	ldr	r2, [pc, #808]	; 17238 <__assert_fail@plt+0x5d74>
   16f0c:	str	r3, [sp]
   16f10:	mov	r1, #1
   16f14:	mov	r3, r0
   16f18:	mov	r0, r5
   16f1c:	bl	113e0 <__fprintf_chk@plt>
   16f20:	ldr	r1, [pc, #788]	; 1723c <__assert_fail@plt+0x5d78>
   16f24:	mov	r2, #5
   16f28:	mov	r0, #0
   16f2c:	bl	1120c <dcgettext@plt>
   16f30:	mov	r1, r5
   16f34:	bl	1114c <fputs_unlocked@plt>
   16f38:	cmp	r6, #9
   16f3c:	ldrls	pc, [pc, r6, lsl #2]
   16f40:	b	1721c <__assert_fail@plt+0x5d58>
   16f44:	andeq	r7, r1, r8, lsr #4
   16f48:	strdeq	r6, [r1], -r0
   16f4c:	andeq	r7, r1, ip, lsl r0
   16f50:	andeq	r7, r1, r0, asr r0
   16f54:	andeq	r7, r1, ip, lsl #1
   16f58:	andeq	r7, r1, ip, asr #1
   16f5c:	andeq	r7, r1, r4, lsl r1
   16f60:	andeq	r7, r1, r4, ror #2
   16f64:			; <UNDEFINED> instruction: 0x000171bc
   16f68:	andeq	r6, r1, r4, lsl #31
   16f6c:	str	r3, [sp]
   16f70:	mov	r1, #1
   16f74:	mov	r3, r2
   16f78:	ldr	r2, [pc, #704]	; 17240 <__assert_fail@plt+0x5d7c>
   16f7c:	bl	113e0 <__fprintf_chk@plt>
   16f80:	b	16ef4 <__assert_fail@plt+0x5a30>
   16f84:	ldr	r1, [pc, #696]	; 17244 <__assert_fail@plt+0x5d80>
   16f88:	mov	r2, #5
   16f8c:	mov	r0, #0
   16f90:	bl	1120c <dcgettext@plt>
   16f94:	ldr	r2, [r4, #32]
   16f98:	ldr	r3, [r4, #28]
   16f9c:	ldr	r1, [r4, #24]
   16fa0:	str	r2, [sp, #28]
   16fa4:	ldr	r2, [r4, #20]
   16fa8:	str	r3, [sp, #24]
   16fac:	ldr	r3, [r4, #16]
   16fb0:	str	r1, [sp, #20]
   16fb4:	ldr	r1, [r4, #12]
   16fb8:	str	r2, [sp, #16]
   16fbc:	ldr	r2, [r4, #8]
   16fc0:	str	r3, [sp, #12]
   16fc4:	ldr	r3, [r4, #4]
   16fc8:	str	r1, [sp, #8]
   16fcc:	str	r2, [sp, #4]
   16fd0:	str	r3, [sp]
   16fd4:	mov	r1, #1
   16fd8:	ldr	r3, [r4]
   16fdc:	mov	r2, r0
   16fe0:	mov	r0, r5
   16fe4:	bl	113e0 <__fprintf_chk@plt>
   16fe8:	add	sp, sp, #32
   16fec:	pop	{r4, r5, r6, pc}
   16ff0:	mov	r2, #5
   16ff4:	ldr	r1, [pc, #588]	; 17248 <__assert_fail@plt+0x5d84>
   16ff8:	mov	r0, #0
   16ffc:	bl	1120c <dcgettext@plt>
   17000:	ldr	r3, [r4]
   17004:	mov	r1, #1
   17008:	mov	r2, r0
   1700c:	mov	r0, r5
   17010:	add	sp, sp, #32
   17014:	pop	{r4, r5, r6, lr}
   17018:	b	113e0 <__fprintf_chk@plt>
   1701c:	mov	r2, #5
   17020:	ldr	r1, [pc, #548]	; 1724c <__assert_fail@plt+0x5d88>
   17024:	mov	r0, #0
   17028:	bl	1120c <dcgettext@plt>
   1702c:	ldr	r2, [r4, #4]
   17030:	ldr	r3, [r4]
   17034:	mov	r1, #1
   17038:	str	r2, [sp, #48]	; 0x30
   1703c:	mov	r2, r0
   17040:	mov	r0, r5
   17044:	add	sp, sp, #32
   17048:	pop	{r4, r5, r6, lr}
   1704c:	b	113e0 <__fprintf_chk@plt>
   17050:	mov	r2, #5
   17054:	ldr	r1, [pc, #500]	; 17250 <__assert_fail@plt+0x5d8c>
   17058:	mov	r0, #0
   1705c:	bl	1120c <dcgettext@plt>
   17060:	ldr	r2, [r4, #8]
   17064:	ldr	r3, [r4, #4]
   17068:	mov	r1, #1
   1706c:	str	r2, [sp, #52]	; 0x34
   17070:	str	r3, [sp, #48]	; 0x30
   17074:	ldr	r3, [r4]
   17078:	mov	r2, r0
   1707c:	mov	r0, r5
   17080:	add	sp, sp, #32
   17084:	pop	{r4, r5, r6, lr}
   17088:	b	113e0 <__fprintf_chk@plt>
   1708c:	mov	r2, #5
   17090:	ldr	r1, [pc, #444]	; 17254 <__assert_fail@plt+0x5d90>
   17094:	mov	r0, #0
   17098:	bl	1120c <dcgettext@plt>
   1709c:	ldr	r1, [r4, #12]
   170a0:	ldr	r2, [r4, #8]
   170a4:	ldr	r3, [r4, #4]
   170a8:	str	r1, [sp, #8]
   170ac:	str	r2, [sp, #4]
   170b0:	str	r3, [sp]
   170b4:	mov	r1, #1
   170b8:	ldr	r3, [r4]
   170bc:	mov	r2, r0
   170c0:	mov	r0, r5
   170c4:	bl	113e0 <__fprintf_chk@plt>
   170c8:	b	16fe8 <__assert_fail@plt+0x5b24>
   170cc:	mov	r2, #5
   170d0:	ldr	r1, [pc, #384]	; 17258 <__assert_fail@plt+0x5d94>
   170d4:	mov	r0, #0
   170d8:	bl	1120c <dcgettext@plt>
   170dc:	ldr	r3, [r4, #16]
   170e0:	ldr	r1, [r4, #12]
   170e4:	ldr	r2, [r4, #8]
   170e8:	str	r3, [sp, #12]
   170ec:	ldr	r3, [r4, #4]
   170f0:	str	r1, [sp, #8]
   170f4:	str	r2, [sp, #4]
   170f8:	str	r3, [sp]
   170fc:	mov	r1, #1
   17100:	ldr	r3, [r4]
   17104:	mov	r2, r0
   17108:	mov	r0, r5
   1710c:	bl	113e0 <__fprintf_chk@plt>
   17110:	b	16fe8 <__assert_fail@plt+0x5b24>
   17114:	mov	r2, #5
   17118:	ldr	r1, [pc, #316]	; 1725c <__assert_fail@plt+0x5d98>
   1711c:	mov	r0, #0
   17120:	bl	1120c <dcgettext@plt>
   17124:	ldr	r2, [r4, #20]
   17128:	ldr	r3, [r4, #16]
   1712c:	ldr	r1, [r4, #12]
   17130:	str	r2, [sp, #16]
   17134:	ldr	r2, [r4, #8]
   17138:	str	r3, [sp, #12]
   1713c:	ldr	r3, [r4, #4]
   17140:	str	r1, [sp, #8]
   17144:	str	r2, [sp, #4]
   17148:	str	r3, [sp]
   1714c:	mov	r1, #1
   17150:	ldr	r3, [r4]
   17154:	mov	r2, r0
   17158:	mov	r0, r5
   1715c:	bl	113e0 <__fprintf_chk@plt>
   17160:	b	16fe8 <__assert_fail@plt+0x5b24>
   17164:	mov	r2, #5
   17168:	ldr	r1, [pc, #240]	; 17260 <__assert_fail@plt+0x5d9c>
   1716c:	mov	r0, #0
   17170:	bl	1120c <dcgettext@plt>
   17174:	ldr	r1, [r4, #24]
   17178:	ldr	r2, [r4, #20]
   1717c:	ldr	r3, [r4, #16]
   17180:	str	r1, [sp, #20]
   17184:	ldr	r1, [r4, #12]
   17188:	str	r2, [sp, #16]
   1718c:	ldr	r2, [r4, #8]
   17190:	str	r3, [sp, #12]
   17194:	ldr	r3, [r4, #4]
   17198:	str	r1, [sp, #8]
   1719c:	str	r2, [sp, #4]
   171a0:	str	r3, [sp]
   171a4:	mov	r1, #1
   171a8:	ldr	r3, [r4]
   171ac:	mov	r2, r0
   171b0:	mov	r0, r5
   171b4:	bl	113e0 <__fprintf_chk@plt>
   171b8:	b	16fe8 <__assert_fail@plt+0x5b24>
   171bc:	mov	r2, #5
   171c0:	ldr	r1, [pc, #156]	; 17264 <__assert_fail@plt+0x5da0>
   171c4:	mov	r0, #0
   171c8:	bl	1120c <dcgettext@plt>
   171cc:	ldr	r3, [r4, #28]
   171d0:	ldr	r1, [r4, #24]
   171d4:	ldr	r2, [r4, #20]
   171d8:	str	r3, [sp, #24]
   171dc:	ldr	r3, [r4, #16]
   171e0:	str	r1, [sp, #20]
   171e4:	ldr	r1, [r4, #12]
   171e8:	str	r2, [sp, #16]
   171ec:	ldr	r2, [r4, #8]
   171f0:	str	r3, [sp, #12]
   171f4:	ldr	r3, [r4, #4]
   171f8:	str	r1, [sp, #8]
   171fc:	str	r2, [sp, #4]
   17200:	str	r3, [sp]
   17204:	mov	r1, #1
   17208:	ldr	r3, [r4]
   1720c:	mov	r2, r0
   17210:	mov	r0, r5
   17214:	bl	113e0 <__fprintf_chk@plt>
   17218:	b	16fe8 <__assert_fail@plt+0x5b24>
   1721c:	mov	r2, #5
   17220:	ldr	r1, [pc, #64]	; 17268 <__assert_fail@plt+0x5da4>
   17224:	b	16f8c <__assert_fail@plt+0x5ac8>
   17228:	bl	114a0 <abort@plt>
   1722c:	andeq	sl, r1, r0, asr #32
   17230:	andeq	sl, r1, r4, asr r0
   17234:	andeq	r0, r0, r2, ror #15
   17238:	andeq	sl, r1, r8, lsr #6
   1723c:	andeq	sl, r1, r8, asr r0
   17240:	andeq	sl, r1, ip, asr #32
   17244:	andeq	sl, r1, r0, lsr r2
   17248:	andeq	sl, r1, r4, lsr #2
   1724c:	andeq	sl, r1, r4, lsr r1
   17250:	andeq	sl, r1, ip, asr #2
   17254:	andeq	sl, r1, r8, ror #2
   17258:	andeq	sl, r1, r8, lsl #3
   1725c:	andeq	sl, r1, ip, lsr #3
   17260:	ldrdeq	sl, [r1], -r4
   17264:	andeq	sl, r1, r0, lsl #4
   17268:	andeq	sl, r1, r4, ror #4
   1726c:	push	{r4, r5, lr}
   17270:	sub	sp, sp, #12
   17274:	ldr	r5, [sp, #24]
   17278:	ldr	ip, [r5]
   1727c:	cmp	ip, #0
   17280:	beq	1729c <__assert_fail@plt+0x5dd8>
   17284:	mov	lr, r5
   17288:	mov	ip, #0
   1728c:	ldr	r4, [lr, #4]!
   17290:	add	ip, ip, #1
   17294:	cmp	r4, #0
   17298:	bne	1728c <__assert_fail@plt+0x5dc8>
   1729c:	stm	sp, {r5, ip}
   172a0:	bl	16ec4 <__assert_fail@plt+0x5a00>
   172a4:	add	sp, sp, #12
   172a8:	pop	{r4, r5, pc}
   172ac:	push	{r4, r5, r6, lr}
   172b0:	sub	sp, sp, #56	; 0x38
   172b4:	ldr	r6, [pc, #88]	; 17314 <__assert_fail@plt+0x5e50>
   172b8:	ldr	r5, [sp, #72]	; 0x48
   172bc:	add	r4, sp, #8
   172c0:	ldr	ip, [r6]
   172c4:	str	ip, [sp, #52]	; 0x34
   172c8:	mov	ip, #0
   172cc:	ldr	lr, [r5], #4
   172d0:	cmp	lr, #0
   172d4:	str	lr, [r4, #4]!
   172d8:	beq	172e8 <__assert_fail@plt+0x5e24>
   172dc:	add	ip, ip, #1
   172e0:	cmp	ip, #10
   172e4:	bne	172cc <__assert_fail@plt+0x5e08>
   172e8:	add	lr, sp, #12
   172ec:	str	ip, [sp, #4]
   172f0:	str	lr, [sp]
   172f4:	bl	16ec4 <__assert_fail@plt+0x5a00>
   172f8:	ldr	r2, [sp, #52]	; 0x34
   172fc:	ldr	r3, [r6]
   17300:	cmp	r2, r3
   17304:	bne	17310 <__assert_fail@plt+0x5e4c>
   17308:	add	sp, sp, #56	; 0x38
   1730c:	pop	{r4, r5, r6, pc}
   17310:	bl	11218 <__stack_chk_fail@plt>
   17314:	andeq	sl, r2, r8, lsl #30
   17318:	push	{r3}		; (str r3, [sp, #-4]!)
   1731c:	mov	ip, #0
   17320:	push	{r4, r5, r6, lr}
   17324:	sub	sp, sp, #60	; 0x3c
   17328:	ldr	r6, [pc, #100]	; 17394 <__assert_fail@plt+0x5ed0>
   1732c:	add	r5, sp, #8
   17330:	add	r4, sp, #80	; 0x50
   17334:	ldr	r3, [r6]
   17338:	str	r4, [sp, #8]
   1733c:	str	r3, [sp, #52]	; 0x34
   17340:	ldr	r3, [sp, #76]	; 0x4c
   17344:	ldr	lr, [r4], #4
   17348:	cmp	lr, #0
   1734c:	str	lr, [r5, #4]!
   17350:	beq	17360 <__assert_fail@plt+0x5e9c>
   17354:	add	ip, ip, #1
   17358:	cmp	ip, #10
   1735c:	bne	17344 <__assert_fail@plt+0x5e80>
   17360:	add	lr, sp, #12
   17364:	str	ip, [sp, #4]
   17368:	str	lr, [sp]
   1736c:	bl	16ec4 <__assert_fail@plt+0x5a00>
   17370:	ldr	r2, [sp, #52]	; 0x34
   17374:	ldr	r3, [r6]
   17378:	cmp	r2, r3
   1737c:	bne	17390 <__assert_fail@plt+0x5ecc>
   17380:	add	sp, sp, #60	; 0x3c
   17384:	pop	{r4, r5, r6, lr}
   17388:	add	sp, sp, #4
   1738c:	bx	lr
   17390:	bl	11218 <__stack_chk_fail@plt>
   17394:	andeq	sl, r2, r8, lsl #30
   17398:	push	{r4, lr}
   1739c:	mov	r2, #5
   173a0:	ldr	r1, [pc, #88]	; 17400 <__assert_fail@plt+0x5f3c>
   173a4:	mov	r0, #0
   173a8:	bl	1120c <dcgettext@plt>
   173ac:	ldr	r2, [pc, #80]	; 17404 <__assert_fail@plt+0x5f40>
   173b0:	mov	r1, r0
   173b4:	mov	r0, #1
   173b8:	bl	113bc <__printf_chk@plt>
   173bc:	mov	r2, #5
   173c0:	ldr	r1, [pc, #64]	; 17408 <__assert_fail@plt+0x5f44>
   173c4:	mov	r0, #0
   173c8:	bl	1120c <dcgettext@plt>
   173cc:	ldr	r3, [pc, #56]	; 1740c <__assert_fail@plt+0x5f48>
   173d0:	ldr	r2, [pc, #56]	; 17410 <__assert_fail@plt+0x5f4c>
   173d4:	mov	r1, r0
   173d8:	mov	r0, #1
   173dc:	bl	113bc <__printf_chk@plt>
   173e0:	ldr	r1, [pc, #44]	; 17414 <__assert_fail@plt+0x5f50>
   173e4:	mov	r2, #5
   173e8:	mov	r0, #0
   173ec:	bl	1120c <dcgettext@plt>
   173f0:	ldr	r3, [pc, #32]	; 17418 <__assert_fail@plt+0x5f54>
   173f4:	pop	{r4, lr}
   173f8:	ldr	r1, [r3]
   173fc:	b	1114c <fputs_unlocked@plt>
   17400:	andeq	sl, r1, r0, lsr #5
   17404:			; <UNDEFINED> instruction: 0x0001a2b8
   17408:	ldrdeq	sl, [r1], -r0
   1740c:	andeq	r9, r1, r8, asr r9
   17410:	andeq	r9, r1, r0, lsl #19
   17414:	andeq	sl, r1, r4, ror #5
   17418:	andeq	fp, r2, ip, asr r3
   1741c:	push	{r4, lr}
   17420:	mov	r4, r0
   17424:	bl	112e4 <malloc@plt>
   17428:	adds	r4, r4, #0
   1742c:	movne	r4, #1
   17430:	cmp	r0, #0
   17434:	movne	r4, #0
   17438:	cmp	r4, #0
   1743c:	popeq	{r4, pc}
   17440:	bl	17664 <__assert_fail@plt+0x61a0>
   17444:	push	{r4, r5, r6, lr}
   17448:	umull	r4, r5, r0, r1
   1744c:	adds	r3, r5, #0
   17450:	movne	r3, #1
   17454:	cmp	r4, #0
   17458:	blt	17470 <__assert_fail@plt+0x5fac>
   1745c:	cmp	r3, #0
   17460:	bne	17470 <__assert_fail@plt+0x5fac>
   17464:	mul	r0, r1, r0
   17468:	pop	{r4, r5, r6, lr}
   1746c:	b	1741c <__assert_fail@plt+0x5f58>
   17470:	bl	17664 <__assert_fail@plt+0x61a0>
   17474:	b	1741c <__assert_fail@plt+0x5f58>
   17478:	adds	r3, r0, #0
   1747c:	movne	r3, #1
   17480:	cmp	r1, #0
   17484:	movne	r3, #0
   17488:	cmp	r3, #0
   1748c:	push	{r4, lr}
   17490:	bne	174b8 <__assert_fail@plt+0x5ff4>
   17494:	mov	r4, r1
   17498:	bl	11230 <realloc@plt>
   1749c:	adds	r4, r4, #0
   174a0:	movne	r4, #1
   174a4:	cmp	r0, #0
   174a8:	movne	r4, #0
   174ac:	cmp	r4, #0
   174b0:	popeq	{r4, pc}
   174b4:	bl	17664 <__assert_fail@plt+0x61a0>
   174b8:	bl	111ac <free@plt>
   174bc:	mov	r0, #0
   174c0:	pop	{r4, pc}
   174c4:	push	{r4, r5, r6, lr}
   174c8:	umull	r4, r5, r1, r2
   174cc:	adds	r3, r5, #0
   174d0:	movne	r3, #1
   174d4:	cmp	r4, #0
   174d8:	blt	174f0 <__assert_fail@plt+0x602c>
   174dc:	cmp	r3, #0
   174e0:	bne	174f0 <__assert_fail@plt+0x602c>
   174e4:	mul	r1, r2, r1
   174e8:	pop	{r4, r5, r6, lr}
   174ec:	b	17478 <__assert_fail@plt+0x5fb4>
   174f0:	bl	17664 <__assert_fail@plt+0x61a0>
   174f4:	push	{r4, r5, r6, r7, r8, lr}
   174f8:	subs	r7, r0, #0
   174fc:	mov	r6, r1
   17500:	mov	r5, r2
   17504:	ldr	r4, [r1]
   17508:	beq	1753c <__assert_fail@plt+0x6078>
   1750c:	mov	r1, r2
   17510:	ldr	r0, [pc, #104]	; 17580 <__assert_fail@plt+0x60bc>
   17514:	bl	18900 <__assert_fail@plt+0x743c>
   17518:	cmp	r0, r4
   1751c:	bls	17560 <__assert_fail@plt+0x609c>
   17520:	add	r3, r4, #1
   17524:	add	r4, r3, r4, lsr #1
   17528:	str	r4, [r6]
   1752c:	mul	r1, r5, r4
   17530:	mov	r0, r7
   17534:	pop	{r4, r5, r6, r7, r8, lr}
   17538:	b	17478 <__assert_fail@plt+0x5fb4>
   1753c:	cmp	r4, #0
   17540:	beq	17564 <__assert_fail@plt+0x60a0>
   17544:	umull	r0, r1, r4, r5
   17548:	adds	r3, r1, #0
   1754c:	movne	r3, #1
   17550:	cmp	r0, #0
   17554:	blt	17560 <__assert_fail@plt+0x609c>
   17558:	cmp	r3, #0
   1755c:	beq	17528 <__assert_fail@plt+0x6064>
   17560:	bl	17664 <__assert_fail@plt+0x61a0>
   17564:	mov	r1, r2
   17568:	mov	r0, #64	; 0x40
   1756c:	bl	18900 <__assert_fail@plt+0x743c>
   17570:	cmp	r5, #64	; 0x40
   17574:	movls	r4, r0
   17578:	addhi	r4, r0, #1
   1757c:	b	17544 <__assert_fail@plt+0x6080>
   17580:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   17584:	cmp	r0, #0
   17588:	ldr	r3, [r1]
   1758c:	beq	175b0 <__assert_fail@plt+0x60ec>
   17590:	ldr	r2, [pc, #60]	; 175d4 <__assert_fail@plt+0x6110>
   17594:	cmp	r3, r2
   17598:	bhi	175cc <__assert_fail@plt+0x6108>
   1759c:	add	r2, r3, #1
   175a0:	add	r3, r2, r3, lsr #1
   175a4:	str	r3, [r1]
   175a8:	mov	r1, r3
   175ac:	b	17478 <__assert_fail@plt+0x5fb4>
   175b0:	cmp	r3, #0
   175b4:	bne	175c8 <__assert_fail@plt+0x6104>
   175b8:	mov	r3, #64	; 0x40
   175bc:	str	r3, [r1]
   175c0:	mov	r1, r3
   175c4:	b	17478 <__assert_fail@plt+0x5fb4>
   175c8:	bge	175a4 <__assert_fail@plt+0x60e0>
   175cc:	push	{r4, lr}
   175d0:	bl	17664 <__assert_fail@plt+0x61a0>
   175d4:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   175d8:	push	{r4, lr}
   175dc:	mov	r4, r0
   175e0:	bl	1741c <__assert_fail@plt+0x5f58>
   175e4:	mov	r2, r4
   175e8:	mov	r1, #0
   175ec:	pop	{r4, lr}
   175f0:	b	113b0 <memset@plt>
   175f4:	push	{r4, r5, r6, lr}
   175f8:	umull	r4, r5, r0, r1
   175fc:	adds	r3, r5, #0
   17600:	movne	r3, #1
   17604:	cmp	r4, #0
   17608:	blt	17620 <__assert_fail@plt+0x615c>
   1760c:	cmp	r3, #0
   17610:	bne	17620 <__assert_fail@plt+0x615c>
   17614:	bl	11140 <calloc@plt>
   17618:	cmp	r0, #0
   1761c:	popne	{r4, r5, r6, pc}
   17620:	bl	17664 <__assert_fail@plt+0x61a0>
   17624:	push	{r4, r5, r6, lr}
   17628:	mov	r4, r1
   1762c:	mov	r5, r0
   17630:	mov	r0, r1
   17634:	bl	1741c <__assert_fail@plt+0x5f58>
   17638:	mov	r2, r4
   1763c:	mov	r1, r5
   17640:	pop	{r4, r5, r6, lr}
   17644:	b	111c4 <memcpy@plt>
   17648:	push	{r4, lr}
   1764c:	mov	r4, r0
   17650:	bl	11344 <strlen@plt>
   17654:	add	r1, r0, #1
   17658:	mov	r0, r4
   1765c:	pop	{r4, lr}
   17660:	b	17624 <__assert_fail@plt+0x6160>
   17664:	ldr	r3, [pc, #44]	; 17698 <__assert_fail@plt+0x61d4>
   17668:	push	{r4, lr}
   1766c:	mov	r2, #5
   17670:	ldr	r1, [pc, #36]	; 1769c <__assert_fail@plt+0x61d8>
   17674:	mov	r0, #0
   17678:	ldr	r4, [r3]
   1767c:	bl	1120c <dcgettext@plt>
   17680:	ldr	r2, [pc, #24]	; 176a0 <__assert_fail@plt+0x61dc>
   17684:	mov	r1, #0
   17688:	mov	r3, r0
   1768c:	mov	r0, r4
   17690:	bl	112c0 <error@plt>
   17694:	bl	114a0 <abort@plt>
   17698:	andeq	fp, r2, r0, ror #2
   1769c:	andeq	sl, r1, r8, asr r3
   176a0:	andeq	r9, r1, r0, asr #1
   176a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176a8:	sub	sp, sp, #36	; 0x24
   176ac:	ldr	r6, [pc, #312]	; 177ec <__assert_fail@plt+0x6328>
   176b0:	ldr	lr, [sp, #80]	; 0x50
   176b4:	mov	r8, r2
   176b8:	ldr	ip, [r6]
   176bc:	mov	r2, r1
   176c0:	mov	r9, r3
   176c4:	str	lr, [sp]
   176c8:	add	r3, sp, #16
   176cc:	mov	r1, #0
   176d0:	str	ip, [sp, #28]
   176d4:	mov	r7, r0
   176d8:	ldr	sl, [sp, #84]	; 0x54
   176dc:	ldr	r5, [sp, #88]	; 0x58
   176e0:	bl	177fc <__assert_fail@plt+0x6338>
   176e4:	subs	fp, r0, #0
   176e8:	bne	177a8 <__assert_fail@plt+0x62e4>
   176ec:	ldrd	r2, [sp, #16]
   176f0:	cmp	r3, r9
   176f4:	cmpeq	r2, r8
   176f8:	ldrd	r8, [sp, #72]	; 0x48
   176fc:	movcc	r1, #1
   17700:	movcs	r1, #0
   17704:	cmp	r3, r9
   17708:	cmpeq	r2, r8
   1770c:	orrhi	r1, r1, #1
   17710:	cmp	r1, #0
   17714:	beq	1776c <__assert_fail@plt+0x62a8>
   17718:	strd	r2, [sp, #8]
   1771c:	bl	1138c <__errno_location@plt>
   17720:	ldrd	r2, [sp, #8]
   17724:	mov	r9, #0
   17728:	mvn	r8, #-1073741824	; 0xc0000000
   1772c:	cmp	r3, r9
   17730:	cmpeq	r2, r8
   17734:	bls	177d4 <__assert_fail@plt+0x6310>
   17738:	mov	r4, #75	; 0x4b
   1773c:	cmp	r5, #0
   17740:	str	r4, [r0]
   17744:	beq	177a0 <__assert_fail@plt+0x62dc>
   17748:	mov	r0, r7
   1774c:	bl	16d98 <__assert_fail@plt+0x58d4>
   17750:	mov	r3, sl
   17754:	ldr	r2, [pc, #148]	; 177f0 <__assert_fail@plt+0x632c>
   17758:	mov	r1, r4
   1775c:	str	r0, [sp]
   17760:	mov	r0, r5
   17764:	bl	112c0 <error@plt>
   17768:	ldrd	r2, [sp, #16]
   1776c:	ldr	lr, [sp, #28]
   17770:	ldr	ip, [r6]
   17774:	mov	r0, r2
   17778:	cmp	lr, ip
   1777c:	mov	r1, r3
   17780:	bne	177e8 <__assert_fail@plt+0x6324>
   17784:	add	sp, sp, #36	; 0x24
   17788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1778c:	mov	r4, #0
   17790:	cmp	r5, #0
   17794:	str	r4, [r0]
   17798:	bne	17748 <__assert_fail@plt+0x6284>
   1779c:	mov	r4, r5
   177a0:	mov	r5, #1
   177a4:	b	17748 <__assert_fail@plt+0x6284>
   177a8:	bl	1138c <__errno_location@plt>
   177ac:	cmp	fp, #1
   177b0:	beq	17738 <__assert_fail@plt+0x6274>
   177b4:	cmp	fp, #3
   177b8:	beq	1778c <__assert_fail@plt+0x62c8>
   177bc:	ldr	r4, [r0]
   177c0:	cmp	r5, #0
   177c4:	moveq	r5, #1
   177c8:	cmp	r4, #22
   177cc:	moveq	r4, #0
   177d0:	b	17748 <__assert_fail@plt+0x6284>
   177d4:	mov	r4, #34	; 0x22
   177d8:	cmp	r5, #0
   177dc:	str	r4, [r0]
   177e0:	bne	17748 <__assert_fail@plt+0x6284>
   177e4:	b	177a0 <__assert_fail@plt+0x62dc>
   177e8:	bl	11218 <__stack_chk_fail@plt>
   177ec:	andeq	sl, r2, r8, lsl #30
   177f0:	andeq	r9, r1, r4, asr #25
   177f4:	mov	r1, #10
   177f8:	b	176a4 <__assert_fail@plt+0x61e0>
   177fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17800:	sub	sp, sp, #36	; 0x24
   17804:	ldr	r5, [pc, #2536]	; 181f4 <__assert_fail@plt+0x6d30>
   17808:	mov	r9, r2
   1780c:	cmp	r2, #36	; 0x24
   17810:	str	r3, [sp, #12]
   17814:	ldr	r2, [r5]
   17818:	ldr	r3, [sp, #72]	; 0x48
   1781c:	str	r2, [sp, #28]
   17820:	str	r3, [sp]
   17824:	bhi	181e0 <__assert_fail@plt+0x6d1c>
   17828:	cmp	r1, #0
   1782c:	mov	r4, r1
   17830:	mov	r6, r0
   17834:	addeq	r4, sp, #24
   17838:	bl	1138c <__errno_location@plt>
   1783c:	mov	r3, #0
   17840:	str	r3, [r0]
   17844:	mov	r7, r0
   17848:	bl	1132c <__ctype_b_loc@plt>
   1784c:	ldrb	r3, [r6]
   17850:	mov	r1, r6
   17854:	ldr	r0, [r0]
   17858:	b	17860 <__assert_fail@plt+0x639c>
   1785c:	ldrb	r3, [r1, #1]!
   17860:	lsl	r2, r3, #1
   17864:	ldrh	r8, [r0, r2]
   17868:	ands	r8, r8, #8192	; 0x2000
   1786c:	bne	1785c <__assert_fail@plt+0x6398>
   17870:	cmp	r3, #45	; 0x2d
   17874:	beq	17910 <__assert_fail@plt+0x644c>
   17878:	mov	r2, r9
   1787c:	mov	r3, r8
   17880:	mov	r1, r4
   17884:	mov	r0, r6
   17888:	bl	111d0 <__strtoull_internal@plt>
   1788c:	ldr	r9, [r4]
   17890:	cmp	r9, r6
   17894:	mov	sl, r0
   17898:	mov	fp, r1
   1789c:	beq	178f8 <__assert_fail@plt+0x6434>
   178a0:	ldr	r8, [r7]
   178a4:	cmp	r8, #0
   178a8:	bne	178e8 <__assert_fail@plt+0x6424>
   178ac:	ldr	r3, [sp]
   178b0:	cmp	r3, #0
   178b4:	beq	178c4 <__assert_fail@plt+0x6400>
   178b8:	ldrb	r6, [r9]
   178bc:	cmp	r6, #0
   178c0:	bne	17c98 <__assert_fail@plt+0x67d4>
   178c4:	ldr	r3, [sp, #12]
   178c8:	strd	sl, [r3]
   178cc:	ldr	r2, [sp, #28]
   178d0:	ldr	r3, [r5]
   178d4:	mov	r0, r8
   178d8:	cmp	r2, r3
   178dc:	bne	181dc <__assert_fail@plt+0x6d18>
   178e0:	add	sp, sp, #36	; 0x24
   178e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178e8:	cmp	r8, #34	; 0x22
   178ec:	bne	17910 <__assert_fail@plt+0x644c>
   178f0:	mov	r8, #1
   178f4:	b	178ac <__assert_fail@plt+0x63e8>
   178f8:	ldr	r0, [sp]
   178fc:	cmp	r0, #0
   17900:	beq	17910 <__assert_fail@plt+0x644c>
   17904:	ldrb	r6, [r6]
   17908:	cmp	r6, #0
   1790c:	bne	17918 <__assert_fail@plt+0x6454>
   17910:	mov	r8, #4
   17914:	b	178cc <__assert_fail@plt+0x6408>
   17918:	mov	r1, r6
   1791c:	bl	1135c <strchr@plt>
   17920:	cmp	r0, #0
   17924:	movne	sl, #1
   17928:	movne	fp, #0
   1792c:	beq	17910 <__assert_fail@plt+0x644c>
   17930:	sub	r7, r6, #69	; 0x45
   17934:	cmp	r7, #47	; 0x2f
   17938:	ldrls	pc, [pc, r7, lsl #2]
   1793c:	b	17afc <__assert_fail@plt+0x6638>
   17940:	andeq	r7, r1, r0, lsl #20
   17944:	strdeq	r7, [r1], -ip
   17948:	andeq	r7, r1, r0, lsl #20
   1794c:	strdeq	r7, [r1], -ip
   17950:	strdeq	r7, [r1], -ip
   17954:	strdeq	r7, [r1], -ip
   17958:	andeq	r7, r1, r0, lsl #20
   1795c:	strdeq	r7, [r1], -ip
   17960:	andeq	r7, r1, r0, lsl #20
   17964:	strdeq	r7, [r1], -ip
   17968:	strdeq	r7, [r1], -ip
   1796c:	andeq	r7, r1, r0, lsl #20
   17970:	strdeq	r7, [r1], -ip
   17974:	strdeq	r7, [r1], -ip
   17978:	strdeq	r7, [r1], -ip
   1797c:	andeq	r7, r1, r0, lsl #20
   17980:	strdeq	r7, [r1], -ip
   17984:	strdeq	r7, [r1], -ip
   17988:	strdeq	r7, [r1], -ip
   1798c:	strdeq	r7, [r1], -ip
   17990:	andeq	r7, r1, r0, lsl #20
   17994:	andeq	r7, r1, r0, lsl #20
   17998:	strdeq	r7, [r1], -ip
   1799c:	strdeq	r7, [r1], -ip
   179a0:	strdeq	r7, [r1], -ip
   179a4:	strdeq	r7, [r1], -ip
   179a8:	strdeq	r7, [r1], -ip
   179ac:	strdeq	r7, [r1], -ip
   179b0:	strdeq	r7, [r1], -ip
   179b4:	strdeq	r7, [r1], -ip
   179b8:	strdeq	r7, [r1], -ip
   179bc:	strdeq	r7, [r1], -ip
   179c0:	strdeq	r7, [r1], -ip
   179c4:	strdeq	r7, [r1], -ip
   179c8:	andeq	r7, r1, r0, lsl #20
   179cc:	strdeq	r7, [r1], -ip
   179d0:	strdeq	r7, [r1], -ip
   179d4:	strdeq	r7, [r1], -ip
   179d8:	andeq	r7, r1, r0, lsl #20
   179dc:	strdeq	r7, [r1], -ip
   179e0:	andeq	r7, r1, r0, lsl #20
   179e4:	strdeq	r7, [r1], -ip
   179e8:	strdeq	r7, [r1], -ip
   179ec:	strdeq	r7, [r1], -ip
   179f0:	strdeq	r7, [r1], -ip
   179f4:	strdeq	r7, [r1], -ip
   179f8:	strdeq	r7, [r1], -ip
   179fc:	andeq	r7, r1, r0, lsl #20
   17a00:	ldr	r0, [sp]
   17a04:	mov	r1, #48	; 0x30
   17a08:	bl	1135c <strchr@plt>
   17a0c:	cmp	r0, #0
   17a10:	beq	17afc <__assert_fail@plt+0x6638>
   17a14:	ldrb	r3, [r9, #1]
   17a18:	cmp	r3, #68	; 0x44
   17a1c:	beq	180dc <__assert_fail@plt+0x6c18>
   17a20:	cmp	r3, #105	; 0x69
   17a24:	beq	17cbc <__assert_fail@plt+0x67f8>
   17a28:	cmp	r3, #66	; 0x42
   17a2c:	beq	180dc <__assert_fail@plt+0x6c18>
   17a30:	cmp	r7, #47	; 0x2f
   17a34:	ldrls	pc, [pc, r7, lsl #2]
   17a38:	b	17cac <__assert_fail@plt+0x67e8>
   17a3c:	andeq	r8, r1, r0, asr #1
   17a40:	andeq	r7, r1, ip, lsr #25
   17a44:	strheq	r8, [r1], -r0
   17a48:	andeq	r7, r1, ip, lsr #25
   17a4c:	andeq	r7, r1, ip, lsr #25
   17a50:	andeq	r7, r1, ip, lsr #25
   17a54:	andeq	r8, r1, r0, lsr #1
   17a58:	andeq	r7, r1, ip, lsr #25
   17a5c:	muleq	r1, r0, r0
   17a60:	andeq	r7, r1, ip, lsr #25
   17a64:	andeq	r7, r1, ip, lsr #25
   17a68:	andeq	r8, r1, r0, lsl #1
   17a6c:	andeq	r7, r1, ip, lsr #25
   17a70:	andeq	r7, r1, ip, lsr #25
   17a74:	andeq	r7, r1, ip, lsr #25
   17a78:	andeq	r8, r1, r0, ror r0
   17a7c:	andeq	r7, r1, ip, lsr #25
   17a80:	andeq	r7, r1, ip, lsr #25
   17a84:	andeq	r7, r1, ip, lsr #25
   17a88:	andeq	r7, r1, ip, lsr #25
   17a8c:	andeq	r8, r1, r0, rrx
   17a90:	andeq	r8, r1, r0, asr r0
   17a94:	andeq	r7, r1, ip, lsr #25
   17a98:	andeq	r7, r1, ip, lsr #25
   17a9c:	andeq	r7, r1, ip, lsr #25
   17aa0:	andeq	r7, r1, ip, lsr #25
   17aa4:	andeq	r7, r1, ip, lsr #25
   17aa8:	andeq	r7, r1, ip, lsr #25
   17aac:	andeq	r7, r1, ip, lsr #25
   17ab0:	strdeq	r7, [r1], -r8
   17ab4:	andeq	r8, r1, r8, asr #32
   17ab8:	andeq	r7, r1, ip, lsr #25
   17abc:	andeq	r7, r1, ip, lsr #25
   17ac0:	andeq	r7, r1, ip, lsr #25
   17ac4:	strheq	r8, [r1], -r0
   17ac8:	andeq	r7, r1, ip, lsr #25
   17acc:	andeq	r7, r1, ip, lsr #25
   17ad0:	andeq	r7, r1, ip, lsr #25
   17ad4:	andeq	r8, r1, r0, lsr #1
   17ad8:	andeq	r7, r1, ip, lsr #25
   17adc:	muleq	r1, r0, r0
   17ae0:	andeq	r7, r1, ip, lsr #25
   17ae4:	andeq	r7, r1, ip, lsr #25
   17ae8:	andeq	r7, r1, ip, lsr #25
   17aec:	andeq	r7, r1, ip, lsr #25
   17af0:	andeq	r7, r1, ip, lsr #25
   17af4:	andeq	r7, r1, ip, lsr #25
   17af8:	andeq	r8, r1, r0, ror r0
   17afc:	mov	lr, #1
   17b00:	mov	r0, #1024	; 0x400
   17b04:	sub	r6, r6, #66	; 0x42
   17b08:	cmp	r6, #53	; 0x35
   17b0c:	ldrls	pc, [pc, r6, lsl #2]
   17b10:	b	17cac <__assert_fail@plt+0x67e8>
   17b14:	andeq	r7, r1, r0, lsr #26
   17b18:	andeq	r7, r1, ip, lsr #25
   17b1c:	andeq	r7, r1, ip, lsr #25
   17b20:	andeq	r7, r1, r4, asr #26
   17b24:	andeq	r7, r1, ip, lsr #25
   17b28:	andeq	r7, r1, ip, ror #23
   17b2c:	andeq	r7, r1, ip, lsr #25
   17b30:	andeq	r7, r1, ip, lsr #25
   17b34:	andeq	r7, r1, ip, lsr #25
   17b38:	andeq	r7, r1, ip, lsr lr
   17b3c:	andeq	r7, r1, ip, lsr #25
   17b40:	andeq	r7, r1, r0, ror #31
   17b44:	andeq	r7, r1, ip, lsr #25
   17b48:	andeq	r7, r1, ip, lsr #25
   17b4c:	andeq	r7, r1, r4, ror #30
   17b50:	andeq	r7, r1, ip, lsr #25
   17b54:	andeq	r7, r1, ip, lsr #25
   17b58:	andeq	r7, r1, ip, lsr #25
   17b5c:	andeq	r7, r1, r8, ror #29
   17b60:	andeq	r7, r1, ip, lsr #25
   17b64:	andeq	r7, r1, ip, lsr #25
   17b68:	andeq	r7, r1, ip, lsr #25
   17b6c:	andeq	r7, r1, ip, lsr #25
   17b70:	andeq	r7, r1, ip, ror #28
   17b74:	andeq	r7, r1, r0, asr #27
   17b78:	andeq	r7, r1, ip, lsr #25
   17b7c:	andeq	r7, r1, ip, lsr #25
   17b80:	andeq	r7, r1, ip, lsr #25
   17b84:	andeq	r7, r1, ip, lsr #25
   17b88:	andeq	r7, r1, ip, lsr #25
   17b8c:	andeq	r7, r1, ip, lsr #25
   17b90:	andeq	r7, r1, ip, lsr #25
   17b94:	strdeq	r7, [r1], -ip
   17b98:	andeq	r7, r1, r0, lsl #25
   17b9c:	andeq	r7, r1, ip, lsr #25
   17ba0:	andeq	r7, r1, ip, lsr #25
   17ba4:	andeq	r7, r1, ip, lsr #25
   17ba8:	andeq	r7, r1, ip, ror #23
   17bac:	andeq	r7, r1, ip, lsr #25
   17bb0:	andeq	r7, r1, ip, lsr #25
   17bb4:	andeq	r7, r1, ip, lsr #25
   17bb8:	andeq	r7, r1, ip, lsr lr
   17bbc:	andeq	r7, r1, ip, lsr #25
   17bc0:	andeq	r7, r1, r0, ror #31
   17bc4:	andeq	r7, r1, ip, lsr #25
   17bc8:	andeq	r7, r1, ip, lsr #25
   17bcc:	andeq	r7, r1, ip, lsr #25
   17bd0:	andeq	r7, r1, ip, lsr #25
   17bd4:	andeq	r7, r1, ip, lsr #25
   17bd8:	andeq	r7, r1, ip, lsr #25
   17bdc:	andeq	r7, r1, r8, ror #29
   17be0:	andeq	r7, r1, ip, lsr #25
   17be4:	andeq	r7, r1, ip, lsr #25
   17be8:	ldrdeq	r7, [r1], -r4
   17bec:	asr	r1, r0, #31
   17bf0:	mov	r2, #0
   17bf4:	mov	r3, #0
   17bf8:	cmp	fp, #0
   17bfc:	strd	r2, [sp]
   17c00:	bne	18120 <__assert_fail@plt+0x6c5c>
   17c04:	ldrd	r2, [sp]
   17c08:	orrs	r3, r2, r3
   17c0c:	bne	18110 <__assert_fail@plt+0x6c4c>
   17c10:	mul	r3, sl, r1
   17c14:	umull	r6, r7, sl, r0
   17c18:	mla	r3, r0, fp, r3
   17c1c:	ldrd	sl, [sp]
   17c20:	add	ip, r3, r7
   17c24:	cmp	ip, #0
   17c28:	mov	r7, ip
   17c2c:	bne	181b4 <__assert_fail@plt+0x6cf0>
   17c30:	orrs	r3, sl, fp
   17c34:	bne	18110 <__assert_fail@plt+0x6c4c>
   17c38:	umull	r2, r3, r6, r0
   17c3c:	mul	ip, r6, r1
   17c40:	strd	r2, [sp]
   17c44:	mla	r3, r0, r7, ip
   17c48:	ldr	r2, [sp, #4]
   17c4c:	add	ip, r3, r2
   17c50:	cmp	ip, #0
   17c54:	str	ip, [sp, #4]
   17c58:	bne	18190 <__assert_fail@plt+0x6ccc>
   17c5c:	orrs	r3, sl, fp
   17c60:	bne	18110 <__assert_fail@plt+0x6c4c>
   17c64:	ldrd	r6, [sp]
   17c68:	mov	r3, #0
   17c6c:	mul	r2, r6, r1
   17c70:	umull	sl, fp, r6, r0
   17c74:	mla	r2, r0, r7, r2
   17c78:	add	fp, r2, fp
   17c7c:	orr	r8, r8, r3
   17c80:	add	r3, r9, lr
   17c84:	str	r3, [r4]
   17c88:	ldrb	r3, [r9, lr]
   17c8c:	cmp	r3, #0
   17c90:	orrne	r8, r8, #2
   17c94:	b	178c4 <__assert_fail@plt+0x6400>
   17c98:	mov	r1, r6
   17c9c:	ldr	r0, [sp]
   17ca0:	bl	1135c <strchr@plt>
   17ca4:	cmp	r0, #0
   17ca8:	bne	17930 <__assert_fail@plt+0x646c>
   17cac:	ldr	r3, [sp, #12]
   17cb0:	orr	r8, r8, #2
   17cb4:	strd	sl, [r3]
   17cb8:	b	178cc <__assert_fail@plt+0x6408>
   17cbc:	ldrb	r3, [r9, #2]
   17cc0:	mov	r0, #1024	; 0x400
   17cc4:	cmp	r3, #66	; 0x42
   17cc8:	movne	lr, #1
   17ccc:	moveq	lr, #3
   17cd0:	b	17b04 <__assert_fail@plt+0x6640>
   17cd4:	lsr	r3, fp, #31
   17cd8:	adds	sl, sl, sl
   17cdc:	adc	fp, fp, fp
   17ce0:	cmp	r3, #0
   17ce4:	beq	17c80 <__assert_fail@plt+0x67bc>
   17ce8:	mov	r8, #1
   17cec:	mvn	sl, #0
   17cf0:	mvn	fp, #0
   17cf4:	b	17c80 <__assert_fail@plt+0x67bc>
   17cf8:	mov	lr, #1
   17cfc:	lsr	r3, fp, #23
   17d00:	cmp	r3, #0
   17d04:	bne	17ce8 <__assert_fail@plt+0x6824>
   17d08:	lsl	r3, fp, #9
   17d0c:	orr	r3, r3, sl, lsr #23
   17d10:	lsl	r2, sl, #9
   17d14:	mov	sl, r2
   17d18:	mov	fp, r3
   17d1c:	b	17c80 <__assert_fail@plt+0x67bc>
   17d20:	lsr	r3, fp, #22
   17d24:	cmp	r3, #0
   17d28:	bne	17ce8 <__assert_fail@plt+0x6824>
   17d2c:	lsl	r3, fp, #10
   17d30:	orr	r3, r3, sl, lsr #22
   17d34:	lsl	r2, sl, #10
   17d38:	mov	sl, r2
   17d3c:	mov	fp, r3
   17d40:	b	17c80 <__assert_fail@plt+0x67bc>
   17d44:	mov	r6, r0
   17d48:	asr	r7, r0, #31
   17d4c:	mov	r3, #0
   17d50:	mov	ip, #6
   17d54:	str	r3, [sp]
   17d58:	strd	r4, [sp, #16]
   17d5c:	b	17d8c <__assert_fail@plt+0x68c8>
   17d60:	orrs	r3, r2, r3
   17d64:	movne	r3, #1
   17d68:	muleq	r3, sl, r7
   17d6c:	strne	r3, [sp]
   17d70:	mlaeq	r3, r6, fp, r3
   17d74:	umulleq	sl, fp, sl, r6
   17d78:	mvnne	sl, #0
   17d7c:	addeq	fp, r3, fp
   17d80:	mvnne	fp, #0
   17d84:	subs	ip, ip, #1
   17d88:	beq	180d0 <__assert_fail@plt+0x6c0c>
   17d8c:	cmp	fp, #0
   17d90:	mov	r2, #0
   17d94:	mov	r3, #0
   17d98:	beq	17d60 <__assert_fail@plt+0x689c>
   17d9c:	umull	r0, r1, sl, r6
   17da0:	mov	r5, #0
   17da4:	mov	r0, r1
   17da8:	mov	r1, r5
   17dac:	umlal	r0, r1, fp, r6
   17db0:	cmp	r1, r5
   17db4:	movne	r2, #1
   17db8:	movne	r3, #0
   17dbc:	b	17d60 <__assert_fail@plt+0x689c>
   17dc0:	mov	r6, r0
   17dc4:	asr	r7, r0, #31
   17dc8:	mov	r3, #0
   17dcc:	mov	ip, #7
   17dd0:	str	r3, [sp]
   17dd4:	strd	r4, [sp, #16]
   17dd8:	b	17e08 <__assert_fail@plt+0x6944>
   17ddc:	orrs	r3, r2, r3
   17de0:	movne	r3, #1
   17de4:	muleq	r3, sl, r7
   17de8:	strne	r3, [sp]
   17dec:	mlaeq	r3, r6, fp, r3
   17df0:	umulleq	sl, fp, sl, r6
   17df4:	mvnne	sl, #0
   17df8:	addeq	fp, r3, fp
   17dfc:	mvnne	fp, #0
   17e00:	subs	ip, ip, #1
   17e04:	beq	180d0 <__assert_fail@plt+0x6c0c>
   17e08:	cmp	fp, #0
   17e0c:	mov	r2, #0
   17e10:	mov	r3, #0
   17e14:	beq	17ddc <__assert_fail@plt+0x6918>
   17e18:	umull	r0, r1, sl, r6
   17e1c:	mov	r5, #0
   17e20:	mov	r0, r1
   17e24:	mov	r1, r5
   17e28:	umlal	r0, r1, fp, r6
   17e2c:	cmp	r1, r5
   17e30:	movne	r2, #1
   17e34:	movne	r3, #0
   17e38:	b	17ddc <__assert_fail@plt+0x6918>
   17e3c:	asr	r1, r0, #31
   17e40:	cmp	fp, #0
   17e44:	mov	r6, #0
   17e48:	mov	r7, #0
   17e4c:	bne	180e8 <__assert_fail@plt+0x6c24>
   17e50:	orrs	r3, r6, r7
   17e54:	bne	17ce8 <__assert_fail@plt+0x6824>
   17e58:	mul	r3, sl, r1
   17e5c:	mla	r3, r0, fp, r3
   17e60:	umull	sl, fp, sl, r0
   17e64:	add	fp, r3, fp
   17e68:	b	17c80 <__assert_fail@plt+0x67bc>
   17e6c:	mov	r6, r0
   17e70:	asr	r7, r0, #31
   17e74:	mov	r3, #0
   17e78:	mov	ip, #8
   17e7c:	str	r3, [sp]
   17e80:	strd	r4, [sp, #16]
   17e84:	b	17eb4 <__assert_fail@plt+0x69f0>
   17e88:	orrs	r3, r2, r3
   17e8c:	movne	r3, #1
   17e90:	muleq	r3, sl, r7
   17e94:	strne	r3, [sp]
   17e98:	mlaeq	r3, r6, fp, r3
   17e9c:	umulleq	sl, fp, sl, r6
   17ea0:	mvnne	sl, #0
   17ea4:	addeq	fp, r3, fp
   17ea8:	mvnne	fp, #0
   17eac:	subs	ip, ip, #1
   17eb0:	beq	180d0 <__assert_fail@plt+0x6c0c>
   17eb4:	cmp	fp, #0
   17eb8:	mov	r2, #0
   17ebc:	mov	r3, #0
   17ec0:	beq	17e88 <__assert_fail@plt+0x69c4>
   17ec4:	umull	r0, r1, sl, r6
   17ec8:	mov	r5, #0
   17ecc:	mov	r0, r1
   17ed0:	mov	r1, r5
   17ed4:	umlal	r0, r1, fp, r6
   17ed8:	cmp	r1, r5
   17edc:	movne	r2, #1
   17ee0:	movne	r3, #0
   17ee4:	b	17e88 <__assert_fail@plt+0x69c4>
   17ee8:	mov	r6, r0
   17eec:	asr	r7, r0, #31
   17ef0:	mov	r3, #0
   17ef4:	mov	ip, #4
   17ef8:	str	r3, [sp]
   17efc:	strd	r4, [sp, #16]
   17f00:	b	17f30 <__assert_fail@plt+0x6a6c>
   17f04:	orrs	r3, r2, r3
   17f08:	movne	r3, #1
   17f0c:	muleq	r3, sl, r7
   17f10:	strne	r3, [sp]
   17f14:	mlaeq	r3, r6, fp, r3
   17f18:	umulleq	sl, fp, sl, r6
   17f1c:	mvnne	sl, #0
   17f20:	addeq	fp, r3, fp
   17f24:	mvnne	fp, #0
   17f28:	subs	ip, ip, #1
   17f2c:	beq	180d0 <__assert_fail@plt+0x6c0c>
   17f30:	cmp	fp, #0
   17f34:	mov	r2, #0
   17f38:	mov	r3, #0
   17f3c:	beq	17f04 <__assert_fail@plt+0x6a40>
   17f40:	umull	r0, r1, sl, r6
   17f44:	mov	r5, #0
   17f48:	mov	r0, r1
   17f4c:	mov	r1, r5
   17f50:	umlal	r0, r1, fp, r6
   17f54:	cmp	r1, r5
   17f58:	movne	r2, #1
   17f5c:	movne	r3, #0
   17f60:	b	17f04 <__assert_fail@plt+0x6a40>
   17f64:	mov	r6, r0
   17f68:	asr	r7, r0, #31
   17f6c:	mov	r3, #0
   17f70:	mov	ip, #5
   17f74:	str	r3, [sp]
   17f78:	strd	r4, [sp, #16]
   17f7c:	b	17fac <__assert_fail@plt+0x6ae8>
   17f80:	orrs	r3, r2, r3
   17f84:	movne	r3, #1
   17f88:	muleq	r3, sl, r7
   17f8c:	strne	r3, [sp]
   17f90:	mlaeq	r3, r6, fp, r3
   17f94:	umulleq	sl, fp, sl, r6
   17f98:	mvnne	sl, #0
   17f9c:	addeq	fp, r3, fp
   17fa0:	mvnne	fp, #0
   17fa4:	subs	ip, ip, #1
   17fa8:	beq	180d0 <__assert_fail@plt+0x6c0c>
   17fac:	cmp	fp, #0
   17fb0:	mov	r2, #0
   17fb4:	mov	r3, #0
   17fb8:	beq	17f80 <__assert_fail@plt+0x6abc>
   17fbc:	umull	r0, r1, sl, r6
   17fc0:	mov	r5, #0
   17fc4:	mov	r0, r1
   17fc8:	mov	r1, r5
   17fcc:	umlal	r0, r1, fp, r6
   17fd0:	cmp	r1, r5
   17fd4:	movne	r2, #1
   17fd8:	movne	r3, #0
   17fdc:	b	17f80 <__assert_fail@plt+0x6abc>
   17fe0:	asr	r1, r0, #31
   17fe4:	cmp	fp, #0
   17fe8:	mov	r6, #0
   17fec:	mov	r7, #0
   17ff0:	bne	18144 <__assert_fail@plt+0x6c80>
   17ff4:	orrs	r3, r6, r7
   17ff8:	bne	17ce8 <__assert_fail@plt+0x6824>
   17ffc:	umull	r2, r3, sl, r0
   18000:	mul	ip, sl, r1
   18004:	strd	r2, [sp]
   18008:	mla	r3, r0, fp, ip
   1800c:	ldr	r2, [sp, #4]
   18010:	mov	sl, r6
   18014:	add	ip, r3, r2
   18018:	cmp	ip, #0
   1801c:	mov	fp, r7
   18020:	str	ip, [sp, #4]
   18024:	bne	1816c <__assert_fail@plt+0x6ca8>
   18028:	orrs	r3, sl, fp
   1802c:	bne	17ce8 <__assert_fail@plt+0x6824>
   18030:	ldrd	r6, [sp]
   18034:	mul	r3, r6, r1
   18038:	umull	sl, fp, r6, r0
   1803c:	mla	r0, r0, r7, r3
   18040:	add	fp, r0, fp
   18044:	b	17c80 <__assert_fail@plt+0x67bc>
   18048:	mov	lr, #1
   1804c:	b	17c80 <__assert_fail@plt+0x67bc>
   18050:	mov	lr, #1
   18054:	mov	r6, #1024	; 0x400
   18058:	mov	r7, #0
   1805c:	b	17dc8 <__assert_fail@plt+0x6904>
   18060:	mov	lr, #1
   18064:	mov	r6, #1024	; 0x400
   18068:	mov	r7, #0
   1806c:	b	17e74 <__assert_fail@plt+0x69b0>
   18070:	mov	lr, #1
   18074:	mov	r6, #1024	; 0x400
   18078:	mov	r7, #0
   1807c:	b	17ef0 <__assert_fail@plt+0x6a2c>
   18080:	mov	lr, #1
   18084:	mov	r6, #1024	; 0x400
   18088:	mov	r7, #0
   1808c:	b	17f6c <__assert_fail@plt+0x6aa8>
   18090:	mov	lr, #1
   18094:	mov	r0, #1024	; 0x400
   18098:	mov	r1, #0
   1809c:	b	17fe4 <__assert_fail@plt+0x6b20>
   180a0:	mov	lr, #1
   180a4:	mov	r0, #1024	; 0x400
   180a8:	mov	r1, #0
   180ac:	b	17e40 <__assert_fail@plt+0x697c>
   180b0:	mov	lr, #1
   180b4:	mov	r0, #1024	; 0x400
   180b8:	mov	r1, #0
   180bc:	b	17bf0 <__assert_fail@plt+0x672c>
   180c0:	mov	lr, #1
   180c4:	mov	r6, #1024	; 0x400
   180c8:	mov	r7, #0
   180cc:	b	17d4c <__assert_fail@plt+0x6888>
   180d0:	ldrd	r4, [sp, #16]
   180d4:	ldr	r3, [sp]
   180d8:	b	17c7c <__assert_fail@plt+0x67b8>
   180dc:	mov	lr, #2
   180e0:	mov	r0, #1000	; 0x3e8
   180e4:	b	17b04 <__assert_fail@plt+0x6640>
   180e8:	umull	r2, r3, sl, r0
   180ec:	str	r3, [sp]
   180f0:	mov	r3, #0
   180f4:	str	r3, [sp, #4]
   180f8:	ldrd	r2, [sp]
   180fc:	umlal	r2, r3, fp, r0
   18100:	cmp	r3, #0
   18104:	movne	r6, #1
   18108:	movne	r7, #0
   1810c:	b	17e50 <__assert_fail@plt+0x698c>
   18110:	mov	r3, #1
   18114:	mvn	sl, #0
   18118:	mvn	fp, #0
   1811c:	b	17c7c <__assert_fail@plt+0x67b8>
   18120:	umull	r2, r3, sl, r0
   18124:	mov	r7, #0
   18128:	mov	r6, r3
   1812c:	umlal	r6, r7, fp, r0
   18130:	cmp	r7, #0
   18134:	movne	r2, #1
   18138:	movne	r3, #0
   1813c:	strdne	r2, [sp]
   18140:	b	17c04 <__assert_fail@plt+0x6740>
   18144:	umull	r2, r3, sl, r0
   18148:	str	r3, [sp]
   1814c:	mov	r3, #0
   18150:	str	r3, [sp, #4]
   18154:	ldrd	r2, [sp]
   18158:	umlal	r2, r3, fp, r0
   1815c:	cmp	r3, #0
   18160:	movne	r6, #1
   18164:	movne	r7, #0
   18168:	b	17ff4 <__assert_fail@plt+0x6b30>
   1816c:	ldr	r3, [sp]
   18170:	mov	r7, #0
   18174:	umull	r2, r3, r3, r0
   18178:	mov	r6, r3
   1817c:	umlal	r6, r7, ip, r0
   18180:	cmp	r7, #0
   18184:	movne	sl, #1
   18188:	movne	fp, #0
   1818c:	b	18028 <__assert_fail@plt+0x6b64>
   18190:	ldr	r3, [sp]
   18194:	mov	r7, #0
   18198:	umull	r2, r3, r3, r0
   1819c:	mov	r6, r3
   181a0:	umlal	r6, r7, ip, r0
   181a4:	cmp	r7, #0
   181a8:	movne	sl, #1
   181ac:	movne	fp, #0
   181b0:	b	17c5c <__assert_fail@plt+0x6798>
   181b4:	umull	r2, r3, r6, r0
   181b8:	str	r3, [sp]
   181bc:	mov	r3, #0
   181c0:	str	r3, [sp, #4]
   181c4:	ldrd	r2, [sp]
   181c8:	umlal	r2, r3, ip, r0
   181cc:	cmp	r3, #0
   181d0:	movne	sl, #1
   181d4:	movne	fp, #0
   181d8:	b	17c30 <__assert_fail@plt+0x676c>
   181dc:	bl	11218 <__stack_chk_fail@plt>
   181e0:	ldr	r3, [pc, #16]	; 181f8 <__assert_fail@plt+0x6d34>
   181e4:	mov	r2, #96	; 0x60
   181e8:	ldr	r1, [pc, #12]	; 181fc <__assert_fail@plt+0x6d38>
   181ec:	ldr	r0, [pc, #12]	; 18200 <__assert_fail@plt+0x6d3c>
   181f0:	bl	114c4 <__assert_fail@plt>
   181f4:	andeq	sl, r2, r8, lsl #30
   181f8:	andeq	sl, r1, ip, ror #6
   181fc:	andeq	sl, r1, r8, ror r3
   18200:	andeq	sl, r1, r8, lsl #7
   18204:	push	{r4, r5, lr}
   18208:	sub	sp, sp, #12
   1820c:	mov	r4, r0
   18210:	bl	113d4 <fileno@plt>
   18214:	cmp	r0, #0
   18218:	mov	r0, r4
   1821c:	blt	18298 <__assert_fail@plt+0x6dd4>
   18220:	bl	11308 <__freading@plt>
   18224:	cmp	r0, #0
   18228:	bne	18264 <__assert_fail@plt+0x6da0>
   1822c:	mov	r0, r4
   18230:	bl	182a4 <__assert_fail@plt+0x6de0>
   18234:	cmp	r0, #0
   18238:	beq	18294 <__assert_fail@plt+0x6dd0>
   1823c:	bl	1138c <__errno_location@plt>
   18240:	mov	r5, r0
   18244:	mov	r0, r4
   18248:	ldr	r4, [r5]
   1824c:	bl	113f8 <fclose@plt>
   18250:	cmp	r4, #0
   18254:	mvnne	r0, #0
   18258:	strne	r4, [r5]
   1825c:	add	sp, sp, #12
   18260:	pop	{r4, r5, pc}
   18264:	mov	r0, r4
   18268:	bl	113d4 <fileno@plt>
   1826c:	mov	r3, #1
   18270:	str	r3, [sp]
   18274:	mov	r2, #0
   18278:	mov	r3, #0
   1827c:	bl	11278 <lseek64@plt>
   18280:	mvn	r3, #0
   18284:	mvn	r2, #0
   18288:	cmp	r1, r3
   1828c:	cmpeq	r0, r2
   18290:	bne	1822c <__assert_fail@plt+0x6d68>
   18294:	mov	r0, r4
   18298:	add	sp, sp, #12
   1829c:	pop	{r4, r5, lr}
   182a0:	b	113f8 <fclose@plt>
   182a4:	push	{r4, lr}
   182a8:	subs	r4, r0, #0
   182ac:	sub	sp, sp, #8
   182b0:	beq	182cc <__assert_fail@plt+0x6e08>
   182b4:	bl	11308 <__freading@plt>
   182b8:	cmp	r0, #0
   182bc:	beq	182cc <__assert_fail@plt+0x6e08>
   182c0:	ldr	r3, [r4]
   182c4:	tst	r3, #256	; 0x100
   182c8:	bne	182dc <__assert_fail@plt+0x6e18>
   182cc:	mov	r0, r4
   182d0:	add	sp, sp, #8
   182d4:	pop	{r4, lr}
   182d8:	b	11188 <fflush@plt>
   182dc:	mov	r3, #1
   182e0:	str	r3, [sp]
   182e4:	mov	r2, #0
   182e8:	mov	r3, #0
   182ec:	mov	r0, r4
   182f0:	bl	18304 <__assert_fail@plt+0x6e40>
   182f4:	mov	r0, r4
   182f8:	add	sp, sp, #8
   182fc:	pop	{r4, lr}
   18300:	b	11188 <fflush@plt>
   18304:	push	{r4, r5, r6, r7, r8, lr}
   18308:	sub	sp, sp, #8
   1830c:	ldmib	r0, {ip, lr}
   18310:	mov	r4, r0
   18314:	ldr	r5, [sp, #32]
   18318:	cmp	lr, ip
   1831c:	beq	18334 <__assert_fail@plt+0x6e70>
   18320:	str	r5, [sp, #32]
   18324:	mov	r0, r4
   18328:	add	sp, sp, #8
   1832c:	pop	{r4, r5, r6, r7, r8, lr}
   18330:	b	11410 <fseeko64@plt>
   18334:	ldr	lr, [r0, #20]
   18338:	ldr	ip, [r0, #16]
   1833c:	cmp	lr, ip
   18340:	bne	18320 <__assert_fail@plt+0x6e5c>
   18344:	ldr	r8, [r0, #36]	; 0x24
   18348:	cmp	r8, #0
   1834c:	bne	18320 <__assert_fail@plt+0x6e5c>
   18350:	mov	r6, r2
   18354:	mov	r7, r3
   18358:	bl	113d4 <fileno@plt>
   1835c:	mov	r2, r6
   18360:	mov	r3, r7
   18364:	str	r5, [sp]
   18368:	bl	11278 <lseek64@plt>
   1836c:	mvn	r3, #0
   18370:	mvn	r2, #0
   18374:	cmp	r1, r3
   18378:	cmpeq	r0, r2
   1837c:	beq	1839c <__assert_fail@plt+0x6ed8>
   18380:	ldr	r3, [r4]
   18384:	strd	r0, [r4, #80]	; 0x50
   18388:	mov	r0, r8
   1838c:	bic	r3, r3, #16
   18390:	str	r3, [r4]
   18394:	add	sp, sp, #8
   18398:	pop	{r4, r5, r6, r7, r8, pc}
   1839c:	mvn	r0, #0
   183a0:	b	18394 <__assert_fail@plt+0x6ed0>
   183a4:	push	{r4, r5, r6, r7, r8, lr}
   183a8:	subs	r7, r0, #0
   183ac:	ldr	r5, [pc, #108]	; 18420 <__assert_fail@plt+0x6f5c>
   183b0:	sub	sp, sp, #8
   183b4:	mov	r8, r1
   183b8:	ldr	r1, [r5]
   183bc:	moveq	r7, sp
   183c0:	str	r1, [sp, #4]
   183c4:	mov	r0, r7
   183c8:	mov	r1, r8
   183cc:	mov	r6, r2
   183d0:	bl	112b4 <mbrtowc@plt>
   183d4:	cmp	r6, #0
   183d8:	cmnne	r0, #3
   183dc:	mov	r4, r0
   183e0:	bhi	18400 <__assert_fail@plt+0x6f3c>
   183e4:	ldr	r2, [sp, #4]
   183e8:	ldr	r3, [r5]
   183ec:	mov	r0, r4
   183f0:	cmp	r2, r3
   183f4:	bne	1841c <__assert_fail@plt+0x6f58>
   183f8:	add	sp, sp, #8
   183fc:	pop	{r4, r5, r6, r7, r8, pc}
   18400:	mov	r0, #0
   18404:	bl	18728 <__assert_fail@plt+0x7264>
   18408:	cmp	r0, #0
   1840c:	moveq	r4, #1
   18410:	ldrbeq	r3, [r8]
   18414:	streq	r3, [r7]
   18418:	b	183e4 <__assert_fail@plt+0x6f20>
   1841c:	bl	11218 <__stack_chk_fail@plt>
   18420:	andeq	sl, r2, r8, lsl #30
   18424:	push	{r4, r5, r6, r7, r8, lr}
   18428:	sub	sp, sp, #8
   1842c:	ldr	r5, [pc, #380]	; 185b0 <__assert_fail@plt+0x70ec>
   18430:	ldrb	r3, [r0]
   18434:	mov	r6, r1
   18438:	ldr	r2, [r5]
   1843c:	sub	r3, r3, #48	; 0x30
   18440:	cmp	r3, #9
   18444:	str	r2, [sp, #4]
   18448:	bls	184ac <__assert_fail@plt+0x6fe8>
   1844c:	mov	r8, r0
   18450:	ldr	r7, [pc, #348]	; 185b4 <__assert_fail@plt+0x70f0>
   18454:	mov	r4, #0
   18458:	b	1846c <__assert_fail@plt+0x6fa8>
   1845c:	add	r4, r4, #1
   18460:	cmp	r4, #35	; 0x23
   18464:	add	r7, r7, #12
   18468:	beq	184dc <__assert_fail@plt+0x7018>
   1846c:	mov	r1, r8
   18470:	mov	r0, r7
   18474:	bl	11164 <strcmp@plt>
   18478:	cmp	r0, #0
   1847c:	bne	1845c <__assert_fail@plt+0x6f98>
   18480:	ldr	r3, [pc, #304]	; 185b8 <__assert_fail@plt+0x70f4>
   18484:	add	r4, r4, r4, lsl #1
   18488:	ldr	r4, [r3, r4, lsl #2]
   1848c:	asr	r0, r4, #31
   18490:	str	r4, [r6]
   18494:	ldr	r2, [sp, #4]
   18498:	ldr	r3, [r5]
   1849c:	cmp	r2, r3
   184a0:	bne	185ac <__assert_fail@plt+0x70e8>
   184a4:	add	sp, sp, #8
   184a8:	pop	{r4, r5, r6, r7, r8, pc}
   184ac:	mov	r2, #10
   184b0:	mov	r1, sp
   184b4:	bl	11170 <strtol@plt>
   184b8:	ldr	r2, [sp]
   184bc:	ldrb	r2, [r2]
   184c0:	cmp	r0, #64	; 0x40
   184c4:	cmple	r2, #0
   184c8:	mov	r4, r0
   184cc:	beq	1848c <__assert_fail@plt+0x6fc8>
   184d0:	mvn	r0, #0
   184d4:	str	r0, [r6]
   184d8:	b	18494 <__assert_fail@plt+0x6fd0>
   184dc:	bl	11488 <__libc_current_sigrtmin@plt>
   184e0:	mov	r7, r0
   184e4:	bl	11350 <__libc_current_sigrtmax@plt>
   184e8:	cmp	r7, #0
   184ec:	mov	r4, r0
   184f0:	ble	1850c <__assert_fail@plt+0x7048>
   184f4:	mov	r2, #5
   184f8:	ldr	r1, [pc, #188]	; 185bc <__assert_fail@plt+0x70f8>
   184fc:	mov	r0, r8
   18500:	bl	11494 <strncmp@plt>
   18504:	cmp	r0, #0
   18508:	beq	18574 <__assert_fail@plt+0x70b0>
   1850c:	cmp	r4, #0
   18510:	ble	184d0 <__assert_fail@plt+0x700c>
   18514:	mov	r2, #5
   18518:	ldr	r1, [pc, #160]	; 185c0 <__assert_fail@plt+0x70fc>
   1851c:	mov	r0, r8
   18520:	bl	11494 <strncmp@plt>
   18524:	cmp	r0, #0
   18528:	bne	184d0 <__assert_fail@plt+0x700c>
   1852c:	add	r0, r8, #5
   18530:	mov	r2, #10
   18534:	mov	r1, sp
   18538:	bl	11170 <strtol@plt>
   1853c:	ldr	r3, [sp]
   18540:	ldrb	r3, [r3]
   18544:	cmp	r3, #0
   18548:	bne	184d0 <__assert_fail@plt+0x700c>
   1854c:	sub	r3, r7, r4
   18550:	cmp	r0, r3
   18554:	movlt	r7, #0
   18558:	movge	r7, #1
   1855c:	cmp	r0, #0
   18560:	movgt	r7, #0
   18564:	cmp	r7, #0
   18568:	beq	184d0 <__assert_fail@plt+0x700c>
   1856c:	add	r4, r4, r0
   18570:	b	1848c <__assert_fail@plt+0x6fc8>
   18574:	add	r0, r8, #5
   18578:	mov	r2, #10
   1857c:	mov	r1, sp
   18580:	bl	11170 <strtol@plt>
   18584:	ldr	r3, [sp]
   18588:	ldrb	r3, [r3]
   1858c:	cmp	r0, #0
   18590:	cmpge	r3, #0
   18594:	bne	184d0 <__assert_fail@plt+0x700c>
   18598:	sub	r3, r4, r7
   1859c:	cmp	r0, r3
   185a0:	bgt	184d0 <__assert_fail@plt+0x700c>
   185a4:	add	r4, r7, r0
   185a8:	b	1848c <__assert_fail@plt+0x6fc8>
   185ac:	bl	11218 <__stack_chk_fail@plt>
   185b0:	andeq	sl, r2, r8, lsl #30
   185b4:	andeq	fp, r2, r8, lsr #3
   185b8:	andeq	fp, r2, r4, lsr #3
   185bc:			; <UNDEFINED> instruction: 0x0001a3b0
   185c0:			; <UNDEFINED> instruction: 0x0001a3b8
   185c4:	push	{r4, r5, r6, lr}
   185c8:	mov	r3, #0
   185cc:	ldr	lr, [pc, #208]	; 186a4 <__assert_fail@plt+0x71e0>
   185d0:	sub	sp, sp, #8
   185d4:	mov	r4, r0
   185d8:	mov	r5, r1
   185dc:	mov	r2, lr
   185e0:	b	185f0 <__assert_fail@plt+0x712c>
   185e4:	add	r3, r3, #1
   185e8:	cmp	r3, #35	; 0x23
   185ec:	beq	18620 <__assert_fail@plt+0x715c>
   185f0:	ldr	ip, [r2]
   185f4:	add	r2, r2, #12
   185f8:	cmp	ip, r4
   185fc:	bne	185e4 <__assert_fail@plt+0x7120>
   18600:	add	r3, r3, r3, lsl #1
   18604:	mov	r0, r5
   18608:	add	r3, lr, r3, lsl #2
   1860c:	add	r1, r3, #4
   18610:	bl	1129c <strcpy@plt>
   18614:	mov	r0, #0
   18618:	add	sp, sp, #8
   1861c:	pop	{r4, r5, r6, pc}
   18620:	bl	11488 <__libc_current_sigrtmin@plt>
   18624:	mov	r6, r0
   18628:	bl	11350 <__libc_current_sigrtmax@plt>
   1862c:	cmp	r4, r0
   18630:	movle	r3, #0
   18634:	movgt	r3, #1
   18638:	cmp	r4, r6
   1863c:	orrlt	r3, r3, #1
   18640:	cmp	r3, #0
   18644:	bne	1869c <__assert_fail@plt+0x71d8>
   18648:	sub	r3, r0, r6
   1864c:	add	r3, r6, r3, asr #1
   18650:	cmp	r3, r4
   18654:	movlt	r6, r0
   18658:	ldrge	r3, [pc, #72]	; 186a8 <__assert_fail@plt+0x71e4>
   1865c:	ldrlt	r3, [pc, #72]	; 186ac <__assert_fail@plt+0x71e8>
   18660:	ldr	r0, [r3]
   18664:	ldrh	r2, [r3, #4]
   18668:	str	r0, [r5]
   1866c:	subs	r0, r4, r6
   18670:	strh	r2, [r5, #4]
   18674:	beq	18618 <__assert_fail@plt+0x7154>
   18678:	str	r0, [sp]
   1867c:	ldr	r3, [pc, #44]	; 186b0 <__assert_fail@plt+0x71ec>
   18680:	add	r0, r5, #5
   18684:	mvn	r2, #0
   18688:	mov	r1, #1
   1868c:	bl	11398 <__sprintf_chk@plt>
   18690:	mov	r0, #0
   18694:	add	sp, sp, #8
   18698:	pop	{r4, r5, r6, pc}
   1869c:	mvn	r0, #0
   186a0:	b	18618 <__assert_fail@plt+0x7154>
   186a4:	andeq	fp, r2, r4, lsr #3
   186a8:			; <UNDEFINED> instruction: 0x0001a3b0
   186ac:			; <UNDEFINED> instruction: 0x0001a3b8
   186b0:	andeq	sl, r1, r0, asr #7
   186b4:	push	{r4, r5, r6, lr}
   186b8:	mov	r4, r0
   186bc:	bl	112a8 <__fpending@plt>
   186c0:	ldr	r5, [r4]
   186c4:	and	r5, r5, #32
   186c8:	mov	r6, r0
   186cc:	mov	r0, r4
   186d0:	bl	18204 <__assert_fail@plt+0x6d40>
   186d4:	cmp	r5, #0
   186d8:	mov	r4, r0
   186dc:	bne	18708 <__assert_fail@plt+0x7244>
   186e0:	cmp	r0, #0
   186e4:	beq	18700 <__assert_fail@plt+0x723c>
   186e8:	cmp	r6, #0
   186ec:	bne	18720 <__assert_fail@plt+0x725c>
   186f0:	bl	1138c <__errno_location@plt>
   186f4:	ldr	r4, [r0]
   186f8:	subs	r4, r4, #9
   186fc:	mvnne	r4, #0
   18700:	mov	r0, r4
   18704:	pop	{r4, r5, r6, pc}
   18708:	cmp	r0, #0
   1870c:	bne	18720 <__assert_fail@plt+0x725c>
   18710:	bl	1138c <__errno_location@plt>
   18714:	str	r4, [r0]
   18718:	mvn	r4, #0
   1871c:	b	18700 <__assert_fail@plt+0x723c>
   18720:	mvn	r4, #0
   18724:	b	18700 <__assert_fail@plt+0x723c>
   18728:	push	{r4, lr}
   1872c:	mov	r1, #0
   18730:	bl	11428 <setlocale@plt>
   18734:	subs	r4, r0, #0
   18738:	beq	18764 <__assert_fail@plt+0x72a0>
   1873c:	ldr	r1, [pc, #40]	; 1876c <__assert_fail@plt+0x72a8>
   18740:	bl	11164 <strcmp@plt>
   18744:	cmp	r0, #0
   18748:	popeq	{r4, pc}
   1874c:	mov	r0, r4
   18750:	ldr	r1, [pc, #24]	; 18770 <__assert_fail@plt+0x72ac>
   18754:	bl	11164 <strcmp@plt>
   18758:	adds	r0, r0, #0
   1875c:	movne	r0, #1
   18760:	pop	{r4, pc}
   18764:	mov	r0, #1
   18768:	pop	{r4, pc}
   1876c:	andeq	sl, r1, r4, asr #7
   18770:	andeq	sl, r1, r8, asr #7
   18774:	push	{r4, lr}
   18778:	mov	r0, #14
   1877c:	bl	11464 <nl_langinfo@plt>
   18780:	cmp	r0, #0
   18784:	beq	1879c <__assert_fail@plt+0x72d8>
   18788:	ldrb	r2, [r0]
   1878c:	ldr	r3, [pc, #16]	; 187a4 <__assert_fail@plt+0x72e0>
   18790:	cmp	r2, #0
   18794:	moveq	r0, r3
   18798:	pop	{r4, pc}
   1879c:	ldr	r0, [pc]	; 187a4 <__assert_fail@plt+0x72e0>
   187a0:	pop	{r4, pc}
   187a4:	ldrdeq	sl, [r1], -r0
   187a8:	mov	r2, #3
   187ac:	mov	r1, #0
   187b0:	b	187b4 <__assert_fail@plt+0x72f0>
   187b4:	push	{r1, r2, r3}
   187b8:	push	{r4, r5, r6, r7, r8, lr}
   187bc:	sub	sp, sp, #12
   187c0:	ldr	r4, [pc, #300]	; 188f4 <__assert_fail@plt+0x7430>
   187c4:	ldr	r3, [pc, #300]	; 188f8 <__assert_fail@plt+0x7434>
   187c8:	ldr	r1, [sp, #36]	; 0x24
   187cc:	ldr	r2, [r4]
   187d0:	cmp	r1, r3
   187d4:	add	r3, sp, #40	; 0x28
   187d8:	str	r2, [sp, #4]
   187dc:	str	r3, [sp]
   187e0:	bne	188ac <__assert_fail@plt+0x73e8>
   187e4:	ldr	r6, [pc, #272]	; 188fc <__assert_fail@plt+0x7438>
   187e8:	add	r3, sp, #44	; 0x2c
   187ec:	str	r3, [sp]
   187f0:	ldr	r3, [r6]
   187f4:	ldr	r7, [sp, #40]	; 0x28
   187f8:	cmp	r3, #0
   187fc:	blt	18840 <__assert_fail@plt+0x737c>
   18800:	mov	r2, r7
   18804:	mov	r8, r0
   18808:	bl	1141c <fcntl64@plt>
   1880c:	subs	r5, r0, #0
   18810:	blt	188bc <__assert_fail@plt+0x73f8>
   18814:	mov	r3, #1
   18818:	str	r3, [r6]
   1881c:	ldr	r2, [sp, #4]
   18820:	ldr	r3, [r4]
   18824:	mov	r0, r5
   18828:	cmp	r2, r3
   1882c:	bne	188f0 <__assert_fail@plt+0x742c>
   18830:	add	sp, sp, #12
   18834:	pop	{r4, r5, r6, r7, r8, lr}
   18838:	add	sp, sp, #12
   1883c:	bx	lr
   18840:	mov	r2, r7
   18844:	mov	r1, #0
   18848:	bl	187b4 <__assert_fail@plt+0x72f0>
   1884c:	subs	r5, r0, #0
   18850:	blt	1881c <__assert_fail@plt+0x7358>
   18854:	ldr	r3, [r6]
   18858:	cmn	r3, #1
   1885c:	bne	1881c <__assert_fail@plt+0x7358>
   18860:	mov	r1, #1
   18864:	mov	r0, r5
   18868:	bl	1141c <fcntl64@plt>
   1886c:	subs	r2, r0, #0
   18870:	blt	1888c <__assert_fail@plt+0x73c8>
   18874:	orr	r2, r2, #1
   18878:	mov	r1, #2
   1887c:	mov	r0, r5
   18880:	bl	1141c <fcntl64@plt>
   18884:	cmn	r0, #1
   18888:	bne	1881c <__assert_fail@plt+0x7358>
   1888c:	bl	1138c <__errno_location@plt>
   18890:	mov	r6, r0
   18894:	mov	r0, r5
   18898:	ldr	r7, [r6]
   1889c:	mvn	r5, #0
   188a0:	bl	114ac <close@plt>
   188a4:	str	r7, [r6]
   188a8:	b	1881c <__assert_fail@plt+0x7358>
   188ac:	ldr	r2, [sp, #40]	; 0x28
   188b0:	bl	1141c <fcntl64@plt>
   188b4:	mov	r5, r0
   188b8:	b	1881c <__assert_fail@plt+0x7358>
   188bc:	bl	1138c <__errno_location@plt>
   188c0:	ldr	r3, [r0]
   188c4:	cmp	r3, #22
   188c8:	bne	18814 <__assert_fail@plt+0x7350>
   188cc:	mov	r2, r7
   188d0:	mov	r0, r8
   188d4:	mov	r1, #0
   188d8:	bl	187b4 <__assert_fail@plt+0x72f0>
   188dc:	subs	r5, r0, #0
   188e0:	mvnge	r3, #0
   188e4:	strge	r3, [r6]
   188e8:	bge	18860 <__assert_fail@plt+0x739c>
   188ec:	b	1881c <__assert_fail@plt+0x7358>
   188f0:	bl	11218 <__stack_chk_fail@plt>
   188f4:	andeq	sl, r2, r8, lsl #30
   188f8:	andeq	r0, r0, r6, lsl #8
   188fc:	andeq	fp, r2, r8, asr r6
   18900:	subs	r2, r1, #1
   18904:	bxeq	lr
   18908:	bcc	18ae0 <__assert_fail@plt+0x761c>
   1890c:	cmp	r0, r1
   18910:	bls	18ac4 <__assert_fail@plt+0x7600>
   18914:	tst	r1, r2
   18918:	beq	18ad0 <__assert_fail@plt+0x760c>
   1891c:	clz	r3, r0
   18920:	clz	r2, r1
   18924:	sub	r3, r2, r3
   18928:	rsbs	r3, r3, #31
   1892c:	addne	r3, r3, r3, lsl #1
   18930:	mov	r2, #0
   18934:	addne	pc, pc, r3, lsl #2
   18938:	nop			; (mov r0, r0)
   1893c:	cmp	r0, r1, lsl #31
   18940:	adc	r2, r2, r2
   18944:	subcs	r0, r0, r1, lsl #31
   18948:	cmp	r0, r1, lsl #30
   1894c:	adc	r2, r2, r2
   18950:	subcs	r0, r0, r1, lsl #30
   18954:	cmp	r0, r1, lsl #29
   18958:	adc	r2, r2, r2
   1895c:	subcs	r0, r0, r1, lsl #29
   18960:	cmp	r0, r1, lsl #28
   18964:	adc	r2, r2, r2
   18968:	subcs	r0, r0, r1, lsl #28
   1896c:	cmp	r0, r1, lsl #27
   18970:	adc	r2, r2, r2
   18974:	subcs	r0, r0, r1, lsl #27
   18978:	cmp	r0, r1, lsl #26
   1897c:	adc	r2, r2, r2
   18980:	subcs	r0, r0, r1, lsl #26
   18984:	cmp	r0, r1, lsl #25
   18988:	adc	r2, r2, r2
   1898c:	subcs	r0, r0, r1, lsl #25
   18990:	cmp	r0, r1, lsl #24
   18994:	adc	r2, r2, r2
   18998:	subcs	r0, r0, r1, lsl #24
   1899c:	cmp	r0, r1, lsl #23
   189a0:	adc	r2, r2, r2
   189a4:	subcs	r0, r0, r1, lsl #23
   189a8:	cmp	r0, r1, lsl #22
   189ac:	adc	r2, r2, r2
   189b0:	subcs	r0, r0, r1, lsl #22
   189b4:	cmp	r0, r1, lsl #21
   189b8:	adc	r2, r2, r2
   189bc:	subcs	r0, r0, r1, lsl #21
   189c0:	cmp	r0, r1, lsl #20
   189c4:	adc	r2, r2, r2
   189c8:	subcs	r0, r0, r1, lsl #20
   189cc:	cmp	r0, r1, lsl #19
   189d0:	adc	r2, r2, r2
   189d4:	subcs	r0, r0, r1, lsl #19
   189d8:	cmp	r0, r1, lsl #18
   189dc:	adc	r2, r2, r2
   189e0:	subcs	r0, r0, r1, lsl #18
   189e4:	cmp	r0, r1, lsl #17
   189e8:	adc	r2, r2, r2
   189ec:	subcs	r0, r0, r1, lsl #17
   189f0:	cmp	r0, r1, lsl #16
   189f4:	adc	r2, r2, r2
   189f8:	subcs	r0, r0, r1, lsl #16
   189fc:	cmp	r0, r1, lsl #15
   18a00:	adc	r2, r2, r2
   18a04:	subcs	r0, r0, r1, lsl #15
   18a08:	cmp	r0, r1, lsl #14
   18a0c:	adc	r2, r2, r2
   18a10:	subcs	r0, r0, r1, lsl #14
   18a14:	cmp	r0, r1, lsl #13
   18a18:	adc	r2, r2, r2
   18a1c:	subcs	r0, r0, r1, lsl #13
   18a20:	cmp	r0, r1, lsl #12
   18a24:	adc	r2, r2, r2
   18a28:	subcs	r0, r0, r1, lsl #12
   18a2c:	cmp	r0, r1, lsl #11
   18a30:	adc	r2, r2, r2
   18a34:	subcs	r0, r0, r1, lsl #11
   18a38:	cmp	r0, r1, lsl #10
   18a3c:	adc	r2, r2, r2
   18a40:	subcs	r0, r0, r1, lsl #10
   18a44:	cmp	r0, r1, lsl #9
   18a48:	adc	r2, r2, r2
   18a4c:	subcs	r0, r0, r1, lsl #9
   18a50:	cmp	r0, r1, lsl #8
   18a54:	adc	r2, r2, r2
   18a58:	subcs	r0, r0, r1, lsl #8
   18a5c:	cmp	r0, r1, lsl #7
   18a60:	adc	r2, r2, r2
   18a64:	subcs	r0, r0, r1, lsl #7
   18a68:	cmp	r0, r1, lsl #6
   18a6c:	adc	r2, r2, r2
   18a70:	subcs	r0, r0, r1, lsl #6
   18a74:	cmp	r0, r1, lsl #5
   18a78:	adc	r2, r2, r2
   18a7c:	subcs	r0, r0, r1, lsl #5
   18a80:	cmp	r0, r1, lsl #4
   18a84:	adc	r2, r2, r2
   18a88:	subcs	r0, r0, r1, lsl #4
   18a8c:	cmp	r0, r1, lsl #3
   18a90:	adc	r2, r2, r2
   18a94:	subcs	r0, r0, r1, lsl #3
   18a98:	cmp	r0, r1, lsl #2
   18a9c:	adc	r2, r2, r2
   18aa0:	subcs	r0, r0, r1, lsl #2
   18aa4:	cmp	r0, r1, lsl #1
   18aa8:	adc	r2, r2, r2
   18aac:	subcs	r0, r0, r1, lsl #1
   18ab0:	cmp	r0, r1
   18ab4:	adc	r2, r2, r2
   18ab8:	subcs	r0, r0, r1
   18abc:	mov	r0, r2
   18ac0:	bx	lr
   18ac4:	moveq	r0, #1
   18ac8:	movne	r0, #0
   18acc:	bx	lr
   18ad0:	clz	r2, r1
   18ad4:	rsb	r2, r2, #31
   18ad8:	lsr	r0, r0, r2
   18adc:	bx	lr
   18ae0:	cmp	r0, #0
   18ae4:	mvnne	r0, #0
   18ae8:	b	18b48 <__assert_fail@plt+0x7684>
   18aec:	cmp	r1, #0
   18af0:	beq	18ae0 <__assert_fail@plt+0x761c>
   18af4:	push	{r0, r1, lr}
   18af8:	bl	18900 <__assert_fail@plt+0x743c>
   18afc:	pop	{r1, r2, lr}
   18b00:	mul	r3, r2, r0
   18b04:	sub	r1, r1, r3
   18b08:	bx	lr
   18b0c:	cmp	r3, #0
   18b10:	cmpeq	r2, #0
   18b14:	bne	18b2c <__assert_fail@plt+0x7668>
   18b18:	cmp	r1, #0
   18b1c:	cmpeq	r0, #0
   18b20:	mvnne	r1, #0
   18b24:	mvnne	r0, #0
   18b28:	b	18b48 <__assert_fail@plt+0x7684>
   18b2c:	sub	sp, sp, #8
   18b30:	push	{sp, lr}
   18b34:	bl	18b58 <__assert_fail@plt+0x7694>
   18b38:	ldr	lr, [sp, #4]
   18b3c:	add	sp, sp, #8
   18b40:	pop	{r2, r3}
   18b44:	bx	lr
   18b48:	push	{r1, lr}
   18b4c:	mov	r0, #8
   18b50:	bl	11158 <raise@plt>
   18b54:	pop	{r1, pc}
   18b58:	cmp	r1, r3
   18b5c:	cmpeq	r0, r2
   18b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b64:	mov	r4, r0
   18b68:	movcc	r0, #0
   18b6c:	mov	r5, r1
   18b70:	ldr	lr, [sp, #36]	; 0x24
   18b74:	movcc	r1, r0
   18b78:	bcc	18c74 <__assert_fail@plt+0x77b0>
   18b7c:	cmp	r3, #0
   18b80:	clzeq	ip, r2
   18b84:	clzne	ip, r3
   18b88:	addeq	ip, ip, #32
   18b8c:	cmp	r5, #0
   18b90:	clzeq	r1, r4
   18b94:	addeq	r1, r1, #32
   18b98:	clzne	r1, r5
   18b9c:	sub	ip, ip, r1
   18ba0:	sub	sl, ip, #32
   18ba4:	lsl	r9, r3, ip
   18ba8:	rsb	fp, ip, #32
   18bac:	orr	r9, r9, r2, lsl sl
   18bb0:	orr	r9, r9, r2, lsr fp
   18bb4:	lsl	r8, r2, ip
   18bb8:	cmp	r5, r9
   18bbc:	cmpeq	r4, r8
   18bc0:	movcc	r0, #0
   18bc4:	movcc	r1, r0
   18bc8:	bcc	18be4 <__assert_fail@plt+0x7720>
   18bcc:	mov	r0, #1
   18bd0:	subs	r4, r4, r8
   18bd4:	lsl	r1, r0, sl
   18bd8:	orr	r1, r1, r0, lsr fp
   18bdc:	lsl	r0, r0, ip
   18be0:	sbc	r5, r5, r9
   18be4:	cmp	ip, #0
   18be8:	beq	18c74 <__assert_fail@plt+0x77b0>
   18bec:	lsr	r6, r8, #1
   18bf0:	orr	r6, r6, r9, lsl #31
   18bf4:	lsr	r7, r9, #1
   18bf8:	mov	r2, ip
   18bfc:	b	18c20 <__assert_fail@plt+0x775c>
   18c00:	subs	r3, r4, r6
   18c04:	sbc	r8, r5, r7
   18c08:	adds	r3, r3, r3
   18c0c:	adc	r8, r8, r8
   18c10:	adds	r4, r3, #1
   18c14:	adc	r5, r8, #0
   18c18:	subs	r2, r2, #1
   18c1c:	beq	18c3c <__assert_fail@plt+0x7778>
   18c20:	cmp	r5, r7
   18c24:	cmpeq	r4, r6
   18c28:	bcs	18c00 <__assert_fail@plt+0x773c>
   18c2c:	adds	r4, r4, r4
   18c30:	adc	r5, r5, r5
   18c34:	subs	r2, r2, #1
   18c38:	bne	18c20 <__assert_fail@plt+0x775c>
   18c3c:	lsr	r3, r4, ip
   18c40:	orr	r3, r3, r5, lsl fp
   18c44:	lsr	r2, r5, ip
   18c48:	orr	r3, r3, r5, lsr sl
   18c4c:	adds	r0, r0, r4
   18c50:	mov	r4, r3
   18c54:	lsl	r3, r2, ip
   18c58:	orr	r3, r3, r4, lsl sl
   18c5c:	lsl	ip, r4, ip
   18c60:	orr	r3, r3, r4, lsr fp
   18c64:	adc	r1, r1, r5
   18c68:	subs	r0, r0, ip
   18c6c:	mov	r5, r2
   18c70:	sbc	r1, r1, r3
   18c74:	cmp	lr, #0
   18c78:	strdne	r4, [lr]
   18c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18c84:	mov	r7, r0
   18c88:	ldr	r6, [pc, #72]	; 18cd8 <__assert_fail@plt+0x7814>
   18c8c:	ldr	r5, [pc, #72]	; 18cdc <__assert_fail@plt+0x7818>
   18c90:	add	r6, pc, r6
   18c94:	add	r5, pc, r5
   18c98:	sub	r6, r6, r5
   18c9c:	mov	r8, r1
   18ca0:	mov	r9, r2
   18ca4:	bl	11114 <fdopen@plt-0x20>
   18ca8:	asrs	r6, r6, #2
   18cac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18cb0:	mov	r4, #0
   18cb4:	add	r4, r4, #1
   18cb8:	ldr	r3, [r5], #4
   18cbc:	mov	r2, r9
   18cc0:	mov	r1, r8
   18cc4:	mov	r0, r7
   18cc8:	blx	r3
   18ccc:	cmp	r6, r4
   18cd0:	bne	18cb4 <__assert_fail@plt+0x77f0>
   18cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18cd8:	andeq	r2, r1, ip, ror #4
   18cdc:	andeq	r2, r1, r4, ror #4
   18ce0:	bx	lr
   18ce4:	ldr	r3, [pc, #12]	; 18cf8 <__assert_fail@plt+0x7834>
   18ce8:	mov	r1, #0
   18cec:	add	r3, pc, r3
   18cf0:	ldr	r2, [r3]
   18cf4:	b	113a4 <__cxa_atexit@plt>
   18cf8:	andeq	r2, r1, r4, asr r4

Disassembly of section .fini:

00018cfc <.fini>:
   18cfc:	push	{r3, lr}
   18d00:	pop	{r3, pc}
