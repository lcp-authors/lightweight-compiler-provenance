
raspbian-preinstalled/df:     file format elf32-littlearm


Disassembly of section .init:

000112f0 <.init>:
   112f0:	push	{r3, lr}
   112f4:	bl	12cf4 <__assert_fail@plt+0x15d0>
   112f8:	pop	{r3, pc}

Disassembly of section .plt:

000112fc <calloc@plt-0x14>:
   112fc:	push	{lr}		; (str lr, [sp, #-4]!)
   11300:	ldr	lr, [pc, #4]	; 1130c <calloc@plt-0x4>
   11304:	add	lr, pc, lr
   11308:	ldr	pc, [lr, #8]!
   1130c:	strdeq	lr, [r1], -r4

00011310 <calloc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #122880	; 0x1e000
   11318:	ldr	pc, [ip, #3316]!	; 0xcf4

0001131c <fputs_unlocked@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #122880	; 0x1e000
   11324:	ldr	pc, [ip, #3308]!	; 0xcec

00011328 <strstr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #122880	; 0x1e000
   11330:	ldr	pc, [ip, #3300]!	; 0xce4

00011334 <raise@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #122880	; 0x1e000
   1133c:	ldr	pc, [ip, #3292]!	; 0xcdc

00011340 <strverscmp@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #122880	; 0x1e000
   11348:	ldr	pc, [ip, #3284]!	; 0xcd4

0001134c <__getdelim@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #122880	; 0x1e000
   11354:	ldr	pc, [ip, #3276]!	; 0xccc

00011358 <strcmp@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #122880	; 0x1e000
   11360:	ldr	pc, [ip, #3268]!	; 0xcc4

00011364 <fflush@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #122880	; 0x1e000
   1136c:	ldr	pc, [ip, #3260]!	; 0xcbc

00011370 <wcwidth@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #122880	; 0x1e000
   11378:	ldr	pc, [ip, #3252]!	; 0xcb4

0001137c <memmove@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #122880	; 0x1e000
   11384:	ldr	pc, [ip, #3244]!	; 0xcac

00011388 <free@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #122880	; 0x1e000
   11390:	ldr	pc, [ip, #3236]!	; 0xca4

00011394 <_exit@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #122880	; 0x1e000
   1139c:	ldr	pc, [ip, #3228]!	; 0xc9c

000113a0 <memcpy@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #122880	; 0x1e000
   113a8:	ldr	pc, [ip, #3220]!	; 0xc94

000113ac <__strtoull_internal@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #122880	; 0x1e000
   113b4:	ldr	pc, [ip, #3212]!	; 0xc8c

000113b8 <mbsinit@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #122880	; 0x1e000
   113c0:	ldr	pc, [ip, #3204]!	; 0xc84

000113c4 <memcmp@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #122880	; 0x1e000
   113cc:	ldr	pc, [ip, #3196]!	; 0xc7c

000113d0 <uname@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #122880	; 0x1e000
   113d8:	ldr	pc, [ip, #3188]!	; 0xc74

000113dc <dcgettext@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #122880	; 0x1e000
   113e4:	ldr	pc, [ip, #3180]!	; 0xc6c

000113e8 <strdup@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #122880	; 0x1e000
   113f0:	ldr	pc, [ip, #3172]!	; 0xc64

000113f4 <__stack_chk_fail@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #122880	; 0x1e000
   113fc:	ldr	pc, [ip, #3164]!	; 0xc5c

00011400 <realloc@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #122880	; 0x1e000
   11408:	ldr	pc, [ip, #3156]!	; 0xc54

0001140c <textdomain@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #122880	; 0x1e000
   11414:	ldr	pc, [ip, #3148]!	; 0xc4c

00011418 <iswcntrl@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #122880	; 0x1e000
   11420:	ldr	pc, [ip, #3140]!	; 0xc44

00011424 <chdir@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #122880	; 0x1e000
   1142c:	ldr	pc, [ip, #3132]!	; 0xc3c

00011430 <__fxstatat64@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #122880	; 0x1e000
   11438:	ldr	pc, [ip, #3124]!	; 0xc34

0001143c <iswprint@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #122880	; 0x1e000
   11444:	ldr	pc, [ip, #3116]!	; 0xc2c

00011448 <readlink@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #122880	; 0x1e000
   11450:	ldr	pc, [ip, #3108]!	; 0xc24

00011454 <__memcpy_chk@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #122880	; 0x1e000
   1145c:	ldr	pc, [ip, #3100]!	; 0xc1c

00011460 <fwrite@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #122880	; 0x1e000
   11468:	ldr	pc, [ip, #3092]!	; 0xc14

0001146c <lseek64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #122880	; 0x1e000
   11474:	ldr	pc, [ip, #3084]!	; 0xc0c

00011478 <__ctype_get_mb_cur_max@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #122880	; 0x1e000
   11480:	ldr	pc, [ip, #3076]!	; 0xc04

00011484 <hasmntopt@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #122880	; 0x1e000
   1148c:	ldr	pc, [ip, #3068]!	; 0xbfc

00011490 <__fpending@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #122880	; 0x1e000
   11498:	ldr	pc, [ip, #3060]!	; 0xbf4

0001149c <mbrtowc@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #122880	; 0x1e000
   114a4:	ldr	pc, [ip, #3052]!	; 0xbec

000114a8 <wcstombs@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #122880	; 0x1e000
   114b0:	ldr	pc, [ip, #3044]!	; 0xbe4

000114b4 <error@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #122880	; 0x1e000
   114bc:	ldr	pc, [ip, #3036]!	; 0xbdc

000114c0 <getmntent@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #122880	; 0x1e000
   114c8:	ldr	pc, [ip, #3028]!	; 0xbd4

000114cc <open64@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #122880	; 0x1e000
   114d4:	ldr	pc, [ip, #3020]!	; 0xbcc

000114d8 <getenv@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #122880	; 0x1e000
   114e0:	ldr	pc, [ip, #3012]!	; 0xbc4

000114e4 <malloc@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #122880	; 0x1e000
   114ec:	ldr	pc, [ip, #3004]!	; 0xbbc

000114f0 <__libc_start_main@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #122880	; 0x1e000
   114f8:	ldr	pc, [ip, #2996]!	; 0xbb4

000114fc <__freading@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #122880	; 0x1e000
   11504:	ldr	pc, [ip, #2988]!	; 0xbac

00011508 <__gmon_start__@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #122880	; 0x1e000
   11510:	ldr	pc, [ip, #2980]!	; 0xba4

00011514 <mempcpy@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #122880	; 0x1e000
   1151c:	ldr	pc, [ip, #2972]!	; 0xb9c

00011520 <getopt_long@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #122880	; 0x1e000
   11528:	ldr	pc, [ip, #2964]!	; 0xb94

0001152c <__ctype_b_loc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #122880	; 0x1e000
   11534:	ldr	pc, [ip, #2956]!	; 0xb8c

00011538 <getcwd@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #122880	; 0x1e000
   11540:	ldr	pc, [ip, #2948]!	; 0xb84

00011544 <exit@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #122880	; 0x1e000
   1154c:	ldr	pc, [ip, #2940]!	; 0xb7c

00011550 <strlen@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #122880	; 0x1e000
   11558:	ldr	pc, [ip, #2932]!	; 0xb74

0001155c <strchr@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #122880	; 0x1e000
   11564:	ldr	pc, [ip, #2924]!	; 0xb6c

00011568 <openat64@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #122880	; 0x1e000
   11570:	ldr	pc, [ip, #2916]!	; 0xb64

00011574 <memrchr@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #122880	; 0x1e000
   1157c:	ldr	pc, [ip, #2908]!	; 0xb5c

00011580 <__errno_location@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #122880	; 0x1e000
   11588:	ldr	pc, [ip, #2900]!	; 0xb54

0001158c <__sprintf_chk@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #122880	; 0x1e000
   11594:	ldr	pc, [ip, #2892]!	; 0xb4c

00011598 <__cxa_atexit@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #122880	; 0x1e000
   115a0:	ldr	pc, [ip, #2884]!	; 0xb44

000115a4 <memset@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #122880	; 0x1e000
   115ac:	ldr	pc, [ip, #2876]!	; 0xb3c

000115b0 <__printf_chk@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #122880	; 0x1e000
   115b8:	ldr	pc, [ip, #2868]!	; 0xb34

000115bc <statvfs64@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #122880	; 0x1e000
   115c4:	ldr	pc, [ip, #2860]!	; 0xb2c

000115c8 <fileno@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #122880	; 0x1e000
   115d0:	ldr	pc, [ip, #2852]!	; 0xb24

000115d4 <__fprintf_chk@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #122880	; 0x1e000
   115dc:	ldr	pc, [ip, #2844]!	; 0xb1c

000115e0 <memchr@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #122880	; 0x1e000
   115e8:	ldr	pc, [ip, #2836]!	; 0xb14

000115ec <fclose@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #122880	; 0x1e000
   115f4:	ldr	pc, [ip, #2828]!	; 0xb0c

000115f8 <fseeko64@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #122880	; 0x1e000
   11600:	ldr	pc, [ip, #2820]!	; 0xb04

00011604 <endmntent@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #122880	; 0x1e000
   1160c:	ldr	pc, [ip, #2812]!	; 0xafc

00011610 <fcntl64@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #122880	; 0x1e000
   11618:	ldr	pc, [ip, #2804]!	; 0xaf4

0001161c <__overflow@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #122880	; 0x1e000
   11624:	ldr	pc, [ip, #2796]!	; 0xaec

00011628 <setlocale@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #122880	; 0x1e000
   11630:	ldr	pc, [ip, #2788]!	; 0xae4

00011634 <wcswidth@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #122880	; 0x1e000
   1163c:	ldr	pc, [ip, #2780]!	; 0xadc

00011640 <strrchr@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #122880	; 0x1e000
   11648:	ldr	pc, [ip, #2772]!	; 0xad4

0001164c <statfs64@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #122880	; 0x1e000
   11654:	ldr	pc, [ip, #2764]!	; 0xacc

00011658 <nl_langinfo@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #122880	; 0x1e000
   11660:	ldr	pc, [ip, #2756]!	; 0xac4

00011664 <sscanf@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #122880	; 0x1e000
   1166c:	ldr	pc, [ip, #2748]!	; 0xabc

00011670 <localeconv@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #122880	; 0x1e000
   11678:	ldr	pc, [ip, #2740]!	; 0xab4

0001167c <mbstowcs@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #122880	; 0x1e000
   11684:	ldr	pc, [ip, #2732]!	; 0xaac

00011688 <fchdir@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #122880	; 0x1e000
   11690:	ldr	pc, [ip, #2724]!	; 0xaa4

00011694 <canonicalize_file_name@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #122880	; 0x1e000
   1169c:	ldr	pc, [ip, #2716]!	; 0xa9c

000116a0 <fopen64@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #122880	; 0x1e000
   116a8:	ldr	pc, [ip, #2708]!	; 0xa94

000116ac <setmntent@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #122880	; 0x1e000
   116b4:	ldr	pc, [ip, #2700]!	; 0xa8c

000116b8 <bindtextdomain@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #122880	; 0x1e000
   116c0:	ldr	pc, [ip, #2692]!	; 0xa84

000116c4 <sync@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #122880	; 0x1e000
   116cc:	ldr	pc, [ip, #2684]!	; 0xa7c

000116d0 <__xstat64@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #122880	; 0x1e000
   116d8:	ldr	pc, [ip, #2676]!	; 0xa74

000116dc <strncmp@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #122880	; 0x1e000
   116e4:	ldr	pc, [ip, #2668]!	; 0xa6c

000116e8 <abort@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #122880	; 0x1e000
   116f0:	ldr	pc, [ip, #2660]!	; 0xa64

000116f4 <close@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #122880	; 0x1e000
   116fc:	ldr	pc, [ip, #2652]!	; 0xa5c

00011700 <__lxstat64@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #122880	; 0x1e000
   11708:	ldr	pc, [ip, #2644]!	; 0xa54

0001170c <__snprintf_chk@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #122880	; 0x1e000
   11714:	ldr	pc, [ip, #2636]!	; 0xa4c

00011718 <strspn@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #122880	; 0x1e000
   11720:	ldr	pc, [ip, #2628]!	; 0xa44

00011724 <__assert_fail@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #122880	; 0x1e000
   1172c:	ldr	pc, [ip, #2620]!	; 0xa3c

Disassembly of section .text:

00011730 <.text>:
   11730:	ldr	r3, [pc, #4080]	; 12728 <__assert_fail@plt+0x1004>
   11734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11738:	sub	sp, sp, #212	; 0xd4
   1173c:	ldr	r3, [r3]
   11740:	str	r0, [sp, #28]
   11744:	ldr	r0, [r1]
   11748:	str	r3, [sp, #204]	; 0xcc
   1174c:	str	r1, [sp, #32]
   11750:	bl	173b4 <__assert_fail@plt+0x5c90>
   11754:	ldr	r1, [pc, #4048]	; 1272c <__assert_fail@plt+0x1008>
   11758:	mov	r0, #6
   1175c:	bl	11628 <setlocale@plt>
   11760:	ldr	r1, [pc, #4040]	; 12730 <__assert_fail@plt+0x100c>
   11764:	ldr	r0, [pc, #4040]	; 12734 <__assert_fail@plt+0x1010>
   11768:	ldr	sl, [pc, #4040]	; 12738 <__assert_fail@plt+0x1014>
   1176c:	bl	116b8 <bindtextdomain@plt>
   11770:	ldr	r0, [pc, #4028]	; 12734 <__assert_fail@plt+0x1010>
   11774:	bl	1140c <textdomain@plt>
   11778:	mov	r6, #1
   1177c:	mov	r7, #0
   11780:	ldr	r0, [pc, #4020]	; 1273c <__assert_fail@plt+0x1018>
   11784:	bl	1e5b4 <__assert_fail@plt+0xce90>
   11788:	mov	r0, #0
   1178c:	mvn	r3, #0
   11790:	mov	r2, #5
   11794:	ldr	r1, [pc, #4004]	; 12740 <__assert_fail@plt+0x101c>
   11798:	strd	r6, [sl, #56]	; 0x38
   1179c:	str	r3, [sl, #28]
   117a0:	str	r0, [sl]
   117a4:	str	r0, [sl, #4]
   117a8:	strb	r0, [sl, #41]	; 0x29
   117ac:	strb	r0, [sl, #42]	; 0x2a
   117b0:	strb	r0, [sl, #112]	; 0x70
   117b4:	strb	r0, [sl, #52]	; 0x34
   117b8:	str	r0, [sl, #44]	; 0x2c
   117bc:	strb	r0, [sl, #53]	; 0x35
   117c0:	str	r0, [sp, #36]	; 0x24
   117c4:	bl	113dc <dcgettext@plt>
   117c8:	ldr	r5, [pc, #3956]	; 12744 <__assert_fail@plt+0x1020>
   117cc:	ldr	r4, [pc, #3956]	; 12748 <__assert_fail@plt+0x1024>
   117d0:	ldr	fp, [pc, #3956]	; 1274c <__assert_fail@plt+0x1028>
   117d4:	ldr	r9, [pc, #3956]	; 12750 <__assert_fail@plt+0x102c>
   117d8:	ldr	r8, [pc, #3956]	; 12754 <__assert_fail@plt+0x1030>
   117dc:	ldrd	r6, [sp, #28]
   117e0:	str	r0, [sp, #40]	; 0x28
   117e4:	add	r3, sp, #96	; 0x60
   117e8:	str	r3, [sp]
   117ec:	mvn	ip, #0
   117f0:	mov	r3, r5
   117f4:	mov	r2, r4
   117f8:	mov	r1, r7
   117fc:	mov	r0, r6
   11800:	str	ip, [sp, #96]	; 0x60
   11804:	bl	11520 <getopt_long@plt>
   11808:	cmn	r0, #1
   1180c:	beq	11ac8 <__assert_fail@plt+0x3a4>
   11810:	cmp	r0, #105	; 0x69
   11814:	beq	11a80 <__assert_fail@plt+0x35c>
   11818:	ble	11860 <__assert_fail@plt+0x13c>
   1181c:	cmp	r0, #118	; 0x76
   11820:	beq	117e4 <__assert_fail@plt+0xc0>
   11824:	ble	118a0 <__assert_fail@plt+0x17c>
   11828:	cmp	r0, r9
   1182c:	beq	11a98 <__assert_fail@plt+0x374>
   11830:	bgt	118cc <__assert_fail@plt+0x1a8>
   11834:	cmp	r0, #120	; 0x78
   11838:	bne	1188c <__assert_fail@plt+0x168>
   1183c:	ldr	r2, [fp]
   11840:	mov	r0, #8
   11844:	str	r2, [sp, #28]
   11848:	bl	19da8 <__assert_fail@plt+0x8684>
   1184c:	ldr	r3, [sl, #4]
   11850:	ldr	r2, [sp, #28]
   11854:	str	r0, [sl, #4]
   11858:	strd	r2, [r0]
   1185c:	b	117e4 <__assert_fail@plt+0xc0>
   11860:	cmp	r0, #72	; 0x48
   11864:	beq	11ab0 <__assert_fail@plt+0x38c>
   11868:	ble	1196c <__assert_fail@plt+0x248>
   1186c:	cmp	r0, #84	; 0x54
   11870:	beq	11a68 <__assert_fail@plt+0x344>
   11874:	ble	118e0 <__assert_fail@plt+0x1bc>
   11878:	cmp	r0, #97	; 0x61
   1187c:	bne	11900 <__assert_fail@plt+0x1dc>
   11880:	mov	r3, #1
   11884:	strb	r3, [sl, #41]	; 0x29
   11888:	b	117e4 <__assert_fail@plt+0xc0>
   1188c:	cmp	r0, #256	; 0x100
   11890:	bne	11a18 <__assert_fail@plt+0x2f4>
   11894:	mov	r3, #0
   11898:	strb	r3, [sl, #113]	; 0x71
   1189c:	b	117e4 <__assert_fail@plt+0xc0>
   118a0:	cmp	r0, #108	; 0x6c
   118a4:	beq	11aa4 <__assert_fail@plt+0x380>
   118a8:	ble	1194c <__assert_fail@plt+0x228>
   118ac:	cmp	r0, #109	; 0x6d
   118b0:	bne	11920 <__assert_fail@plt+0x1fc>
   118b4:	mov	r0, #1048576	; 0x100000
   118b8:	mov	r1, #0
   118bc:	mov	r3, #0
   118c0:	strd	r0, [sl, #32]
   118c4:	str	r3, [sl, #28]
   118c8:	b	117e4 <__assert_fail@plt+0xc0>
   118cc:	cmp	r0, r8
   118d0:	bne	119b8 <__assert_fail@plt+0x294>
   118d4:	mov	r3, #1
   118d8:	strb	r3, [sl, #53]	; 0x35
   118dc:	b	117e4 <__assert_fail@plt+0xc0>
   118e0:	cmp	r0, #80	; 0x50
   118e4:	bne	11a18 <__assert_fail@plt+0x2f4>
   118e8:	ldr	r3, [sl, #24]
   118ec:	cmp	r3, #4
   118f0:	beq	12c10 <__assert_fail@plt+0x14ec>
   118f4:	mov	r3, #1
   118f8:	str	r3, [sp, #36]	; 0x24
   118fc:	b	117e4 <__assert_fail@plt+0xc0>
   11900:	cmp	r0, #104	; 0x68
   11904:	bne	11a18 <__assert_fail@plt+0x2f4>
   11908:	mov	r0, #1
   1190c:	mov	r1, #0
   11910:	mov	r3, #176	; 0xb0
   11914:	strd	r0, [sl, #32]
   11918:	str	r3, [sl, #28]
   1191c:	b	117e4 <__assert_fail@plt+0xc0>
   11920:	cmp	r0, #116	; 0x74
   11924:	bne	11a18 <__assert_fail@plt+0x2f4>
   11928:	ldr	r2, [fp]
   1192c:	mov	r0, #8
   11930:	str	r2, [sp, #28]
   11934:	bl	19da8 <__assert_fail@plt+0x8684>
   11938:	ldr	r3, [sl]
   1193c:	ldr	r2, [sp, #28]
   11940:	str	r0, [sl]
   11944:	strd	r2, [r0]
   11948:	b	117e4 <__assert_fail@plt+0xc0>
   1194c:	cmp	r0, #107	; 0x6b
   11950:	bne	11a18 <__assert_fail@plt+0x2f4>
   11954:	mov	r0, #1024	; 0x400
   11958:	mov	r1, #0
   1195c:	mov	r3, #0
   11960:	strd	r0, [sl, #32]
   11964:	str	r3, [sl, #28]
   11968:	b	117e4 <__assert_fail@plt+0xc0>
   1196c:	cmn	r0, #2
   11970:	beq	12c04 <__assert_fail@plt+0x14e0>
   11974:	ble	11a20 <__assert_fail@plt+0x2fc>
   11978:	cmp	r0, #66	; 0x42
   1197c:	bne	11a10 <__assert_fail@plt+0x2ec>
   11980:	ldr	r2, [pc, #3536]	; 12758 <__assert_fail@plt+0x1034>
   11984:	str	r0, [sp, #28]
   11988:	sub	r1, r2, #4
   1198c:	ldr	r0, [fp]
   11990:	bl	16b98 <__assert_fail@plt+0x5474>
   11994:	ldr	r3, [sp, #28]
   11998:	cmp	r0, #0
   1199c:	beq	117e4 <__assert_fail@plt+0xc0>
   119a0:	ldr	r1, [fp]
   119a4:	mov	r2, r3
   119a8:	str	r1, [sp]
   119ac:	ldr	r3, [pc, #3472]	; 12744 <__assert_fail@plt+0x1020>
   119b0:	ldr	r1, [sp, #96]	; 0x60
   119b4:	bl	1a064 <__assert_fail@plt+0x8940>
   119b8:	ldr	r2, [pc, #3484]	; 1275c <__assert_fail@plt+0x1038>
   119bc:	cmp	r0, r2
   119c0:	bne	11a18 <__assert_fail@plt+0x2f4>
   119c4:	ldr	r3, [sl, #24]
   119c8:	cmp	r3, #1
   119cc:	beq	12c34 <__assert_fail@plt+0x1510>
   119d0:	ldr	r2, [sp, #36]	; 0x24
   119d4:	cmp	r3, #0
   119d8:	movne	r2, #0
   119dc:	cmp	r2, #0
   119e0:	mov	r3, r2
   119e4:	bne	12c10 <__assert_fail@plt+0x14ec>
   119e8:	ldrb	r2, [sl, #112]	; 0x70
   119ec:	cmp	r2, #0
   119f0:	bne	12c80 <__assert_fail@plt+0x155c>
   119f4:	ldr	r0, [fp]
   119f8:	mov	r3, #4
   119fc:	cmp	r0, #0
   11a00:	str	r3, [sl, #24]
   11a04:	beq	117e4 <__assert_fail@plt+0xc0>
   11a08:	bl	14288 <__assert_fail@plt+0x2b64>
   11a0c:	b	117e4 <__assert_fail@plt+0xc0>
   11a10:	cmp	r0, #70	; 0x46
   11a14:	beq	11928 <__assert_fail@plt+0x204>
   11a18:	mov	r0, #1
   11a1c:	bl	13ea0 <__assert_fail@plt+0x277c>
   11a20:	cmn	r0, #3
   11a24:	bne	11a18 <__assert_fail@plt+0x2f4>
   11a28:	ldr	ip, [pc, #3376]	; 12760 <__assert_fail@plt+0x103c>
   11a2c:	ldr	r1, [pc, #3376]	; 12764 <__assert_fail@plt+0x1040>
   11a30:	ldr	r3, [pc, #3376]	; 12768 <__assert_fail@plt+0x1044>
   11a34:	ldr	r0, [pc, #3376]	; 1276c <__assert_fail@plt+0x1048>
   11a38:	ldr	r2, [pc, #3376]	; 12770 <__assert_fail@plt+0x104c>
   11a3c:	mov	r4, #0
   11a40:	ldr	r0, [r0]
   11a44:	ldr	r3, [r3]
   11a48:	stmib	sp, {r1, ip}
   11a4c:	str	r2, [sp]
   11a50:	str	r4, [sp, #12]
   11a54:	ldr	r2, [pc, #3352]	; 12774 <__assert_fail@plt+0x1050>
   11a58:	ldr	r1, [pc, #3352]	; 12778 <__assert_fail@plt+0x1054>
   11a5c:	bl	19ca4 <__assert_fail@plt+0x8580>
   11a60:	mov	r0, r4
   11a64:	bl	11544 <exit@plt>
   11a68:	ldr	r3, [sl, #24]
   11a6c:	cmp	r3, #4
   11a70:	beq	12c5c <__assert_fail@plt+0x1538>
   11a74:	mov	r3, #1
   11a78:	strb	r3, [sl, #112]	; 0x70
   11a7c:	b	117e4 <__assert_fail@plt+0xc0>
   11a80:	ldr	r3, [sl, #24]
   11a84:	cmp	r3, #4
   11a88:	beq	12c34 <__assert_fail@plt+0x1510>
   11a8c:	mov	r3, #1
   11a90:	str	r3, [sl, #24]
   11a94:	b	117e4 <__assert_fail@plt+0xc0>
   11a98:	mov	r3, #1
   11a9c:	strb	r3, [sl, #113]	; 0x71
   11aa0:	b	117e4 <__assert_fail@plt+0xc0>
   11aa4:	mov	r3, #1
   11aa8:	strb	r3, [sl, #40]	; 0x28
   11aac:	b	117e4 <__assert_fail@plt+0xc0>
   11ab0:	mov	r0, #1
   11ab4:	mov	r1, #0
   11ab8:	mov	r3, #144	; 0x90
   11abc:	strd	r0, [sl, #32]
   11ac0:	str	r3, [sl, #28]
   11ac4:	b	117e4 <__assert_fail@plt+0xc0>
   11ac8:	ldr	r3, [sl, #28]
   11acc:	strd	r6, [sp, #28]
   11ad0:	cmn	r3, #1
   11ad4:	beq	11ce4 <__assert_fail@plt+0x5c0>
   11ad8:	ldr	r3, [sl, #24]
   11adc:	cmp	r3, #4
   11ae0:	cmpne	r3, #1
   11ae4:	bne	11c9c <__assert_fail@plt+0x578>
   11ae8:	ldr	r8, [sl]
   11aec:	cmp	r8, #0
   11af0:	movne	r9, #0
   11af4:	ldrdne	r6, [sp, #28]
   11af8:	beq	11b78 <__assert_fail@plt+0x454>
   11afc:	ldr	r4, [sl, #4]
   11b00:	cmp	r4, #0
   11b04:	beq	11b60 <__assert_fail@plt+0x43c>
   11b08:	ldr	r5, [r8]
   11b0c:	b	11b1c <__assert_fail@plt+0x3f8>
   11b10:	ldr	r4, [r4, #4]
   11b14:	cmp	r4, #0
   11b18:	beq	11b60 <__assert_fail@plt+0x43c>
   11b1c:	ldr	r1, [r4]
   11b20:	mov	r0, r5
   11b24:	bl	11358 <strcmp@plt>
   11b28:	subs	fp, r0, #0
   11b2c:	bne	11b10 <__assert_fail@plt+0x3ec>
   11b30:	mov	r2, #5
   11b34:	ldr	r1, [pc, #3136]	; 1277c <__assert_fail@plt+0x1058>
   11b38:	bl	113dc <dcgettext@plt>
   11b3c:	mov	r9, #1
   11b40:	mov	r4, r0
   11b44:	ldr	r0, [r8]
   11b48:	bl	19618 <__assert_fail@plt+0x7ef4>
   11b4c:	mov	r2, r4
   11b50:	mov	r1, fp
   11b54:	mov	r3, r0
   11b58:	mov	r0, fp
   11b5c:	bl	114b4 <error@plt>
   11b60:	ldr	r8, [r8, #4]
   11b64:	cmp	r8, #0
   11b68:	bne	11afc <__assert_fail@plt+0x3d8>
   11b6c:	cmp	r9, #0
   11b70:	strd	r6, [sp, #28]
   11b74:	bne	11cc4 <__assert_fail@plt+0x5a0>
   11b78:	ldr	r3, [pc, #3072]	; 12780 <__assert_fail@plt+0x105c>
   11b7c:	ldr	r2, [sp, #28]
   11b80:	ldr	r3, [r3]
   11b84:	cmp	r3, r2
   11b88:	bge	11d1c <__assert_fail@plt+0x5f8>
   11b8c:	ldr	r2, [sp, #28]
   11b90:	mov	r8, #104	; 0x68
   11b94:	sub	r0, r2, r3
   11b98:	umull	r4, r5, r0, r8
   11b9c:	adds	r3, r5, #0
   11ba0:	movne	r3, #1
   11ba4:	cmp	r4, #0
   11ba8:	blt	12c58 <__assert_fail@plt+0x1534>
   11bac:	cmp	r3, #0
   11bb0:	bne	12c58 <__assert_fail@plt+0x1534>
   11bb4:	mul	r0, r8, r0
   11bb8:	bl	19da8 <__assert_fail@plt+0x8684>
   11bbc:	ldr	r3, [pc, #3004]	; 12780 <__assert_fail@plt+0x105c>
   11bc0:	ldr	r6, [sp, #28]
   11bc4:	ldr	r4, [r3]
   11bc8:	cmp	r6, r4
   11bcc:	str	r0, [sp, #64]	; 0x40
   11bd0:	ble	11d1c <__assert_fail@plt+0x5f8>
   11bd4:	sub	r5, r4, #-1073741823	; 0xc0000001
   11bd8:	ldr	r3, [sp, #32]
   11bdc:	ldr	fp, [pc, #3044]	; 127c8 <__assert_fail@plt+0x10a4>
   11be0:	add	r5, r3, r5, lsl #2
   11be4:	mov	r7, r0
   11be8:	b	11c30 <__assert_fail@plt+0x50c>
   11bec:	ldr	r3, [pc, #2956]	; 12780 <__assert_fail@plt+0x105c>
   11bf0:	ldr	r3, [r3]
   11bf4:	sub	r3, r4, r3
   11bf8:	mla	r3, r8, r3, r7
   11bfc:	ldr	r3, [r3, #16]
   11c00:	and	r3, r3, #61440	; 0xf000
   11c04:	cmp	r3, #4096	; 0x1000
   11c08:	beq	11c24 <__assert_fail@plt+0x500>
   11c0c:	mov	r1, #256	; 0x100
   11c10:	ldr	r0, [r5]
   11c14:	bl	114cc <open64@plt>
   11c18:	cmp	r0, #0
   11c1c:	blt	11c24 <__assert_fail@plt+0x500>
   11c20:	bl	116f4 <close@plt>
   11c24:	add	r4, r4, #1
   11c28:	cmp	r6, r4
   11c2c:	beq	11d18 <__assert_fail@plt+0x5f4>
   11c30:	ldr	r3, [pc, #2888]	; 12780 <__assert_fail@plt+0x105c>
   11c34:	mov	r0, #3
   11c38:	ldr	r1, [r5, #4]!
   11c3c:	ldr	r2, [r3]
   11c40:	sub	r2, r4, r2
   11c44:	add	r3, r2, r2, lsl #1
   11c48:	add	r2, r2, r3, lsl #2
   11c4c:	add	r2, r7, r2, lsl r0
   11c50:	bl	116d0 <__xstat64@plt>
   11c54:	cmp	r0, #0
   11c58:	beq	11bec <__assert_fail@plt+0x4c8>
   11c5c:	bl	11580 <__errno_location@plt>
   11c60:	ldr	r2, [r5]
   11c64:	mov	r1, #3
   11c68:	ldr	r9, [r0]
   11c6c:	mov	r0, #0
   11c70:	bl	1944c <__assert_fail@plt+0x7d28>
   11c74:	mov	r2, fp
   11c78:	mov	r1, r9
   11c7c:	mov	r3, r0
   11c80:	mov	r0, #0
   11c84:	bl	114b4 <error@plt>
   11c88:	mov	r2, #1
   11c8c:	mov	r3, #0
   11c90:	str	r2, [sl, #44]	; 0x2c
   11c94:	str	r3, [r5]
   11c98:	b	11c24 <__assert_fail@plt+0x500>
   11c9c:	ldr	r3, [sl, #28]
   11ca0:	tst	r3, #16
   11ca4:	movne	r3, #2
   11ca8:	strne	r3, [sl, #24]
   11cac:	bne	11ae8 <__assert_fail@plt+0x3c4>
   11cb0:	ldr	r3, [sp, #36]	; 0x24
   11cb4:	cmp	r3, #0
   11cb8:	movne	r3, #3
   11cbc:	strne	r3, [sl, #24]
   11cc0:	b	11ae8 <__assert_fail@plt+0x3c4>
   11cc4:	mov	r0, #1
   11cc8:	ldr	r3, [pc, #2648]	; 12728 <__assert_fail@plt+0x1004>
   11ccc:	ldr	r2, [sp, #204]	; 0xcc
   11cd0:	ldr	r3, [r3]
   11cd4:	cmp	r2, r3
   11cd8:	bne	12c0c <__assert_fail@plt+0x14e8>
   11cdc:	add	sp, sp, #212	; 0xd4
   11ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ce4:	ldr	r3, [sp, #36]	; 0x24
   11ce8:	cmp	r3, #0
   11cec:	beq	11e44 <__assert_fail@plt+0x720>
   11cf0:	mov	r3, #0
   11cf4:	ldr	r0, [pc, #2696]	; 12784 <__assert_fail@plt+0x1060>
   11cf8:	str	r3, [sl, #28]
   11cfc:	bl	114d8 <getenv@plt>
   11d00:	mov	r3, #0
   11d04:	cmp	r0, #0
   11d08:	moveq	r2, #1024	; 0x400
   11d0c:	movne	r2, #512	; 0x200
   11d10:	strd	r2, [sl, #32]
   11d14:	b	11ad8 <__assert_fail@plt+0x3b4>
   11d18:	str	r6, [sp, #28]
   11d1c:	ldr	r3, [sl]
   11d20:	cmp	r3, #0
   11d24:	beq	11e14 <__assert_fail@plt+0x6f0>
   11d28:	mov	r0, #1
   11d2c:	and	r0, r0, #1
   11d30:	bl	1b174 <__assert_fail@plt+0x9a50>
   11d34:	cmp	r0, #0
   11d38:	str	r0, [sl, #116]	; 0x74
   11d3c:	beq	11d78 <__assert_fail@plt+0x654>
   11d40:	ldrb	r3, [sl, #113]	; 0x71
   11d44:	cmp	r3, #0
   11d48:	bne	11d70 <__assert_fail@plt+0x64c>
   11d4c:	ldr	r3, [sl, #24]
   11d50:	cmp	r3, #4
   11d54:	ldrls	pc, [pc, r3, lsl #2]
   11d58:	b	12ca4 <__assert_fail@plt+0x1580>
   11d5c:	andeq	r2, r1, r4, asr r2
   11d60:	strdeq	r2, [r1], -ip
   11d64:			; <UNDEFINED> instruction: 0x000121b8
   11d68:	andeq	r2, r1, r0, ror #2
   11d6c:	andeq	r1, r1, ip, asr lr
   11d70:	bl	116c4 <sync@plt>
   11d74:	b	11d4c <__assert_fail@plt+0x628>
   11d78:	ldr	r3, [pc, #2560]	; 12780 <__assert_fail@plt+0x105c>
   11d7c:	ldr	r2, [sp, #28]
   11d80:	ldr	r3, [r3]
   11d84:	cmp	r3, r2
   11d88:	bge	11dd8 <__assert_fail@plt+0x6b4>
   11d8c:	ldrb	r3, [sl, #41]	; 0x29
   11d90:	cmp	r3, #0
   11d94:	bne	11dd8 <__assert_fail@plt+0x6b4>
   11d98:	ldrb	r3, [sl, #40]	; 0x28
   11d9c:	cmp	r3, #0
   11da0:	bne	11dd8 <__assert_fail@plt+0x6b4>
   11da4:	ldr	r3, [sl]
   11da8:	cmp	r3, #0
   11dac:	bne	11dd8 <__assert_fail@plt+0x6b4>
   11db0:	ldr	r4, [sl, #4]
   11db4:	cmp	r4, #0
   11db8:	movne	r4, #1
   11dbc:	ldrne	r5, [pc, #2408]	; 1272c <__assert_fail@plt+0x1008>
   11dc0:	bne	11de0 <__assert_fail@plt+0x6bc>
   11dc4:	mov	r2, #5
   11dc8:	ldr	r1, [pc, #2488]	; 12788 <__assert_fail@plt+0x1064>
   11dcc:	bl	113dc <dcgettext@plt>
   11dd0:	mov	r5, r0
   11dd4:	b	11de0 <__assert_fail@plt+0x6bc>
   11dd8:	ldr	r5, [pc, #2380]	; 1272c <__assert_fail@plt+0x1008>
   11ddc:	mov	r4, #1
   11de0:	bl	11580 <__errno_location@plt>
   11de4:	mov	r2, #5
   11de8:	ldr	r1, [pc, #2460]	; 1278c <__assert_fail@plt+0x1068>
   11dec:	ldr	r8, [r0]
   11df0:	mov	r0, #0
   11df4:	bl	113dc <dcgettext@plt>
   11df8:	mov	r1, r8
   11dfc:	mov	r3, r5
   11e00:	ldr	r2, [pc, #2440]	; 12790 <__assert_fail@plt+0x106c>
   11e04:	str	r0, [sp]
   11e08:	mov	r0, r4
   11e0c:	bl	114b4 <error@plt>
   11e10:	b	11d40 <__assert_fail@plt+0x61c>
   11e14:	ldr	r3, [sl, #4]
   11e18:	cmp	r3, #0
   11e1c:	bne	11d28 <__assert_fail@plt+0x604>
   11e20:	ldrb	r3, [sl, #112]	; 0x70
   11e24:	cmp	r3, #0
   11e28:	bne	11d28 <__assert_fail@plt+0x604>
   11e2c:	ldr	r3, [pc, #2400]	; 12794 <__assert_fail@plt+0x1070>
   11e30:	ldrb	r3, [r3, #52]	; 0x34
   11e34:	cmp	r3, #0
   11e38:	ldrbeq	r0, [sl, #40]	; 0x28
   11e3c:	beq	11d2c <__assert_fail@plt+0x608>
   11e40:	b	11d28 <__assert_fail@plt+0x604>
   11e44:	ldr	r0, [pc, #2380]	; 12798 <__assert_fail@plt+0x1074>
   11e48:	bl	114d8 <getenv@plt>
   11e4c:	ldr	r2, [pc, #2308]	; 12758 <__assert_fail@plt+0x1034>
   11e50:	sub	r1, r2, #4
   11e54:	bl	16b98 <__assert_fail@plt+0x5474>
   11e58:	b	11ad8 <__assert_fail@plt+0x3b4>
   11e5c:	ldr	r3, [sl, #16]
   11e60:	cmp	r3, #0
   11e64:	beq	12bb8 <__assert_fail@plt+0x1494>
   11e68:	bl	12f7c <__assert_fail@plt+0x1858>
   11e6c:	ldr	r3, [pc, #2316]	; 12780 <__assert_fail@plt+0x105c>
   11e70:	ldr	r2, [sp, #28]
   11e74:	ldr	r3, [r3]
   11e78:	cmp	r3, r2
   11e7c:	str	r3, [sp, #40]	; 0x28
   11e80:	bge	12818 <__assert_fail@plt+0x10f4>
   11e84:	ldr	r1, [sp, #32]
   11e88:	sub	r3, r3, #-1073741823	; 0xc0000001
   11e8c:	add	r6, r1, r2, lsl #2
   11e90:	add	r3, r1, r3, lsl #2
   11e94:	sub	r2, r6, #4
   11e98:	str	r3, [sp, #36]	; 0x24
   11e9c:	mov	r3, #1
   11ea0:	str	r2, [sp, #52]	; 0x34
   11ea4:	strb	r3, [sl, #42]	; 0x2a
   11ea8:	ldr	r3, [sp, #36]	; 0x24
   11eac:	ldr	r1, [r3, #4]!
   11eb0:	subs	r4, r1, #0
   11eb4:	str	r1, [sp, #44]	; 0x2c
   11eb8:	str	r3, [sp, #36]	; 0x24
   11ebc:	beq	122e8 <__assert_fail@plt+0xbc4>
   11ec0:	ldr	r3, [pc, #2232]	; 12780 <__assert_fail@plt+0x105c>
   11ec4:	ldr	r0, [sp, #40]	; 0x28
   11ec8:	mov	r2, #104	; 0x68
   11ecc:	ldr	r3, [r3]
   11ed0:	sub	r3, r0, r3
   11ed4:	mul	r3, r2, r3
   11ed8:	ldr	r2, [sp, #64]	; 0x40
   11edc:	str	r3, [sp, #68]	; 0x44
   11ee0:	add	fp, r2, r3
   11ee4:	ldr	r3, [fp, #16]
   11ee8:	and	r3, r3, #45056	; 0xb000
   11eec:	cmp	r3, #8192	; 0x2000
   11ef0:	bne	1207c <__assert_fail@plt+0x958>
   11ef4:	mov	r0, r4
   11ef8:	bl	11694 <canonicalize_file_name@plt>
   11efc:	subs	r2, r0, #0
   11f00:	str	r2, [sp, #72]	; 0x48
   11f04:	beq	12710 <__assert_fail@plt+0xfec>
   11f08:	ldrb	r3, [r2]
   11f0c:	cmp	r3, #47	; 0x2f
   11f10:	moveq	r4, r2
   11f14:	mov	r2, r4
   11f18:	ldr	r5, [sl, #116]	; 0x74
   11f1c:	cmp	r5, #0
   11f20:	beq	12bac <__assert_fail@plt+0x1488>
   11f24:	mov	r3, #0
   11f28:	str	fp, [sp, #76]	; 0x4c
   11f2c:	mov	fp, r2
   11f30:	str	r3, [sp, #28]
   11f34:	str	r3, [sp, #60]	; 0x3c
   11f38:	str	r3, [sp, #32]
   11f3c:	mvn	r3, #0
   11f40:	str	r3, [sp, #48]	; 0x30
   11f44:	ldr	r7, [r5]
   11f48:	mov	r0, r7
   11f4c:	bl	11694 <canonicalize_file_name@plt>
   11f50:	subs	r6, r0, #0
   11f54:	beq	11f64 <__assert_fail@plt+0x840>
   11f58:	ldrb	r3, [r6]
   11f5c:	cmp	r3, #47	; 0x2f
   11f60:	moveq	r7, r6
   11f64:	mov	r1, r7
   11f68:	mov	r0, fp
   11f6c:	bl	11358 <strcmp@plt>
   11f70:	subs	r9, r0, #0
   11f74:	bne	12044 <__assert_fail@plt+0x920>
   11f78:	ldr	r8, [sl, #116]	; 0x74
   11f7c:	ldr	r4, [r5, #4]
   11f80:	cmp	r8, #0
   11f84:	beq	12484 <__assert_fail@plt+0xd60>
   11f88:	ldr	r0, [r8, #4]
   11f8c:	mov	r1, r4
   11f90:	bl	11358 <strcmp@plt>
   11f94:	cmp	r0, #0
   11f98:	moveq	r9, r8
   11f9c:	ldr	r8, [r8, #28]
   11fa0:	cmp	r8, #0
   11fa4:	bne	11f88 <__assert_fail@plt+0x864>
   11fa8:	cmp	r9, #0
   11fac:	beq	12484 <__assert_fail@plt+0xd60>
   11fb0:	ldr	r0, [r9]
   11fb4:	bl	11694 <canonicalize_file_name@plt>
   11fb8:	subs	r8, r0, #0
   11fbc:	beq	11fcc <__assert_fail@plt+0x8a8>
   11fc0:	ldrb	r3, [r8]
   11fc4:	cmp	r3, #47	; 0x2f
   11fc8:	beq	11fe8 <__assert_fail@plt+0x8c4>
   11fcc:	mov	r0, r8
   11fd0:	bl	11388 <free@plt>
   11fd4:	ldr	r0, [r9]
   11fd8:	bl	19fd4 <__assert_fail@plt+0x88b0>
   11fdc:	subs	r8, r0, #0
   11fe0:	ldreq	r4, [r5, #4]
   11fe4:	beq	12484 <__assert_fail@plt+0xd60>
   11fe8:	mov	r1, r7
   11fec:	mov	r0, r8
   11ff0:	bl	11358 <strcmp@plt>
   11ff4:	cmp	r0, #0
   11ff8:	bne	12478 <__assert_fail@plt+0xd54>
   11ffc:	ldr	r4, [r5, #4]
   12000:	mov	r0, r4
   12004:	bl	11550 <strlen@plt>
   12008:	ldr	r2, [sp, #32]
   1200c:	eor	r7, r2, #1
   12010:	ldr	r2, [sp, #48]	; 0x30
   12014:	uxtb	r7, r7
   12018:	cmp	r2, r0
   1201c:	movls	r9, #0
   12020:	movhi	r9, #1
   12024:	orrs	r2, r7, r9
   12028:	mov	r3, r0
   1202c:	moveq	r3, #1
   12030:	str	r2, [sp, #28]
   12034:	streq	r3, [sp, #32]
   12038:	bne	1248c <__assert_fail@plt+0xd68>
   1203c:	mov	r0, r8
   12040:	bl	11388 <free@plt>
   12044:	mov	r0, r6
   12048:	bl	11388 <free@plt>
   1204c:	ldr	r5, [r5, #28]
   12050:	cmp	r5, #0
   12054:	bne	11f44 <__assert_fail@plt+0x820>
   12058:	ldr	r0, [sp, #72]	; 0x48
   1205c:	ldr	fp, [sp, #76]	; 0x4c
   12060:	bl	11388 <free@plt>
   12064:	ldr	r3, [sp, #60]	; 0x3c
   12068:	cmp	r3, #0
   1206c:	bne	126a0 <__assert_fail@plt+0xf7c>
   12070:	ldr	r3, [sp, #28]
   12074:	cmp	r3, #0
   12078:	bne	12b60 <__assert_fail@plt+0x143c>
   1207c:	ldr	r0, [sp, #44]	; 0x2c
   12080:	bl	11694 <canonicalize_file_name@plt>
   12084:	ldr	r4, [sl, #116]	; 0x74
   12088:	subs	r7, r0, #0
   1208c:	beq	1209c <__assert_fail@plt+0x978>
   12090:	ldrb	r3, [r7]
   12094:	cmp	r3, #47	; 0x2f
   12098:	beq	12580 <__assert_fail@plt+0xe5c>
   1209c:	mov	r0, r7
   120a0:	bl	11388 <free@plt>
   120a4:	cmp	r4, #0
   120a8:	beq	122a0 <__assert_fail@plt+0xb7c>
   120ac:	ldr	r6, [pc, #1768]	; 1279c <__assert_fail@plt+0x1078>
   120b0:	mov	r5, #0
   120b4:	b	120c4 <__assert_fail@plt+0x9a0>
   120b8:	ldr	r4, [r4, #28]
   120bc:	cmp	r4, #0
   120c0:	beq	12528 <__assert_fail@plt+0xe04>
   120c4:	ldrd	r0, [r4, #16]
   120c8:	mvn	r3, #0
   120cc:	mvn	r2, #0
   120d0:	cmp	r1, r3
   120d4:	cmpeq	r0, r2
   120d8:	beq	124e0 <__assert_fail@plt+0xdbc>
   120dc:	ldrd	r2, [fp]
   120e0:	cmp	r3, r1
   120e4:	cmpeq	r2, r0
   120e8:	bne	120b8 <__assert_fail@plt+0x994>
   120ec:	mov	r1, r6
   120f0:	ldr	r0, [r4, #12]
   120f4:	bl	11358 <strcmp@plt>
   120f8:	cmp	r0, #0
   120fc:	beq	120b8 <__assert_fail@plt+0x994>
   12100:	cmp	r5, #0
   12104:	beq	12120 <__assert_fail@plt+0x9fc>
   12108:	ldrb	r3, [r5, #24]
   1210c:	tst	r3, #1
   12110:	bne	12120 <__assert_fail@plt+0x9fc>
   12114:	ldrb	r3, [r4, #24]
   12118:	tst	r3, #1
   1211c:	bne	120b8 <__assert_fail@plt+0x994>
   12120:	add	r2, sp, #96	; 0x60
   12124:	ldr	r1, [r4, #4]
   12128:	mov	r0, #3
   1212c:	bl	116d0 <__xstat64@plt>
   12130:	cmp	r0, #0
   12134:	bne	12150 <__assert_fail@plt+0xa2c>
   12138:	ldrd	r0, [sp, #96]	; 0x60
   1213c:	ldrd	r2, [r4, #16]
   12140:	cmp	r1, r3
   12144:	cmpeq	r0, r2
   12148:	moveq	r5, r4
   1214c:	beq	120b8 <__assert_fail@plt+0x994>
   12150:	mvn	r2, #1
   12154:	mvn	r3, #0
   12158:	strd	r2, [r4, #16]
   1215c:	b	120b8 <__assert_fail@plt+0x994>
   12160:	mov	r1, #0
   12164:	mov	r0, r1
   12168:	bl	13264 <__assert_fail@plt+0x1b40>
   1216c:	ldrb	r3, [sl, #112]	; 0x70
   12170:	cmp	r3, #0
   12174:	bne	12bc4 <__assert_fail@plt+0x14a0>
   12178:	mov	r1, #0
   1217c:	mov	r0, #2
   12180:	bl	13264 <__assert_fail@plt+0x1b40>
   12184:	mov	r1, #0
   12188:	mov	r0, #3
   1218c:	bl	13264 <__assert_fail@plt+0x1b40>
   12190:	mov	r1, #0
   12194:	mov	r0, #4
   12198:	bl	13264 <__assert_fail@plt+0x1b40>
   1219c:	ldr	r1, [pc, #1532]	; 127a0 <__assert_fail@plt+0x107c>
   121a0:	mov	r0, #5
   121a4:	bl	13264 <__assert_fail@plt+0x1b40>
   121a8:	mov	r1, #0
   121ac:	mov	r0, #10
   121b0:	bl	13264 <__assert_fail@plt+0x1b40>
   121b4:	b	11e68 <__assert_fail@plt+0x744>
   121b8:	mov	r1, #0
   121bc:	mov	r0, r1
   121c0:	bl	13264 <__assert_fail@plt+0x1b40>
   121c4:	ldrb	r3, [sl, #112]	; 0x70
   121c8:	cmp	r3, #0
   121cc:	bne	12bd4 <__assert_fail@plt+0x14b0>
   121d0:	ldr	r1, [pc, #1484]	; 127a4 <__assert_fail@plt+0x1080>
   121d4:	mov	r0, #2
   121d8:	bl	13264 <__assert_fail@plt+0x1b40>
   121dc:	mov	r1, #0
   121e0:	mov	r0, #3
   121e4:	bl	13264 <__assert_fail@plt+0x1b40>
   121e8:	ldr	r1, [pc, #1464]	; 127a8 <__assert_fail@plt+0x1084>
   121ec:	mov	r0, #4
   121f0:	bl	13264 <__assert_fail@plt+0x1b40>
   121f4:	mov	r1, #0
   121f8:	b	121a0 <__assert_fail@plt+0xa7c>
   121fc:	mov	r1, #0
   12200:	mov	r0, r1
   12204:	bl	13264 <__assert_fail@plt+0x1b40>
   12208:	ldrb	r3, [sl, #112]	; 0x70
   1220c:	cmp	r3, #0
   12210:	bne	12be4 <__assert_fail@plt+0x14c0>
   12214:	mov	r1, #0
   12218:	mov	r0, #6
   1221c:	bl	13264 <__assert_fail@plt+0x1b40>
   12220:	mov	r1, #0
   12224:	mov	r0, #7
   12228:	bl	13264 <__assert_fail@plt+0x1b40>
   1222c:	mov	r1, #0
   12230:	mov	r0, #8
   12234:	bl	13264 <__assert_fail@plt+0x1b40>
   12238:	mov	r1, #0
   1223c:	mov	r0, #9
   12240:	bl	13264 <__assert_fail@plt+0x1b40>
   12244:	mov	r1, #0
   12248:	mov	r0, #10
   1224c:	bl	13264 <__assert_fail@plt+0x1b40>
   12250:	b	11e68 <__assert_fail@plt+0x744>
   12254:	mov	r1, #0
   12258:	mov	r0, r1
   1225c:	bl	13264 <__assert_fail@plt+0x1b40>
   12260:	ldrb	r3, [sl, #112]	; 0x70
   12264:	cmp	r3, #0
   12268:	bne	12bf4 <__assert_fail@plt+0x14d0>
   1226c:	mov	r1, #0
   12270:	mov	r0, #2
   12274:	bl	13264 <__assert_fail@plt+0x1b40>
   12278:	mov	r1, #0
   1227c:	mov	r0, #3
   12280:	bl	13264 <__assert_fail@plt+0x1b40>
   12284:	mov	r1, #0
   12288:	mov	r0, #4
   1228c:	bl	13264 <__assert_fail@plt+0x1b40>
   12290:	mov	r1, #0
   12294:	b	121a0 <__assert_fail@plt+0xa7c>
   12298:	mov	r0, r7
   1229c:	bl	11388 <free@plt>
   122a0:	ldr	r5, [sp, #44]	; 0x2c
   122a4:	mov	r1, fp
   122a8:	mov	r0, r5
   122ac:	bl	143c8 <__assert_fail@plt+0x2ca4>
   122b0:	subs	r4, r0, #0
   122b4:	beq	122e8 <__assert_fail@plt+0xbc4>
   122b8:	mov	r3, #0
   122bc:	mov	r0, r3
   122c0:	mov	r2, r5
   122c4:	str	r3, [sp, #16]
   122c8:	str	r3, [sp, #12]
   122cc:	str	r3, [sp, #8]
   122d0:	str	r3, [sp, #4]
   122d4:	str	r3, [sp]
   122d8:	mov	r1, r4
   122dc:	bl	13318 <__assert_fail@plt+0x1bf4>
   122e0:	mov	r0, r4
   122e4:	bl	11388 <free@plt>
   122e8:	ldr	r3, [sp, #52]	; 0x34
   122ec:	ldr	r2, [sp, #36]	; 0x24
   122f0:	cmp	r3, r2
   122f4:	ldr	r3, [sp, #40]	; 0x28
   122f8:	add	r3, r3, #1
   122fc:	str	r3, [sp, #40]	; 0x28
   12300:	bne	11ea8 <__assert_fail@plt+0x784>
   12304:	ldrb	r3, [sl, #52]	; 0x34
   12308:	cmp	r3, #0
   1230c:	beq	126e4 <__assert_fail@plt+0xfc0>
   12310:	ldrb	r3, [sl, #53]	; 0x35
   12314:	cmp	r3, #0
   12318:	beq	12354 <__assert_fail@plt+0xc30>
   1231c:	ldr	r3, [pc, #1136]	; 12794 <__assert_fail@plt+0x1070>
   12320:	ldr	r2, [pc, #1156]	; 127ac <__assert_fail@plt+0x1088>
   12324:	ldr	r0, [pc, #1156]	; 127b0 <__assert_fail@plt+0x108c>
   12328:	ldrb	ip, [r3, #24]
   1232c:	mov	r3, #0
   12330:	ldr	r1, [pc, #1148]	; 127b4 <__assert_fail@plt+0x1090>
   12334:	cmp	ip, r3
   12338:	strd	r2, [sp, #12]
   1233c:	moveq	r1, r0
   12340:	str	r3, [sp, #8]
   12344:	str	r3, [sp, #4]
   12348:	str	r3, [sp]
   1234c:	mov	r2, r3
   12350:	bl	13318 <__assert_fail@plt+0x1bf4>
   12354:	ldr	r3, [sl, #8]
   12358:	cmp	r3, #0
   1235c:	beq	12470 <__assert_fail@plt+0xd4c>
   12360:	ldr	r6, [pc, #1028]	; 1276c <__assert_fail@plt+0x1048>
   12364:	mov	r8, #0
   12368:	mov	r9, #32
   1236c:	ldr	r3, [sl, #16]
   12370:	cmp	r3, #0
   12374:	beq	1243c <__assert_fail@plt+0xd18>
   12378:	ldr	r2, [sl, #12]
   1237c:	lsl	r5, r8, #2
   12380:	mov	r4, #0
   12384:	ldr	r2, [r2, r8, lsl #2]
   12388:	ldr	r7, [r2]
   1238c:	ldr	r2, [sl, #20]
   12390:	sub	r3, r3, #1
   12394:	cmp	r4, r3
   12398:	ldr	r2, [r2, r4, lsl #2]
   1239c:	moveq	r3, #8
   123a0:	movne	r3, #0
   123a4:	ldr	ip, [r2, #16]
   123a8:	mov	r0, r7
   123ac:	ldr	r2, [r2, #20]
   123b0:	add	r1, sp, #96	; 0x60
   123b4:	str	ip, [sp, #96]	; 0x60
   123b8:	bl	17118 <__assert_fail@plt+0x59f4>
   123bc:	ldr	r1, [r6]
   123c0:	lsl	r7, r4, #2
   123c4:	subs	fp, r0, #0
   123c8:	movne	r0, fp
   123cc:	ldreq	r3, [sl, #12]
   123d0:	ldreq	r3, [r3, r5]
   123d4:	ldreq	r0, [r3, r4, lsl #2]
   123d8:	bl	1131c <fputs_unlocked@plt>
   123dc:	mov	r0, fp
   123e0:	bl	11388 <free@plt>
   123e4:	ldr	r3, [sl, #16]
   123e8:	add	r4, r4, #1
   123ec:	cmp	r4, r3
   123f0:	bcs	1243c <__assert_fail@plt+0xd18>
   123f4:	ldr	r2, [sl, #12]
   123f8:	cmp	r4, #0
   123fc:	ldr	r2, [r2, r5]
   12400:	add	r2, r2, r7
   12404:	ldr	r7, [r2, #4]
   12408:	beq	1238c <__assert_fail@plt+0xc68>
   1240c:	ldr	r0, [r6]
   12410:	ldr	r2, [r0, #20]
   12414:	ldr	r1, [r0, #24]
   12418:	cmp	r2, r1
   1241c:	addcc	r1, r2, #1
   12420:	strcc	r1, [r0, #20]
   12424:	strbcc	r9, [r2]
   12428:	bcc	1238c <__assert_fail@plt+0xc68>
   1242c:	mov	r1, #32
   12430:	bl	1161c <__overflow@plt>
   12434:	ldr	r3, [sl, #16]
   12438:	b	1238c <__assert_fail@plt+0xc68>
   1243c:	ldr	r0, [r6]
   12440:	ldr	r2, [r0, #24]
   12444:	ldr	r3, [r0, #20]
   12448:	cmp	r3, r2
   1244c:	addcc	r2, r3, #1
   12450:	strcc	r2, [r0, #20]
   12454:	movcc	r2, #10
   12458:	strbcc	r2, [r3]
   1245c:	bcs	1271c <__assert_fail@plt+0xff8>
   12460:	ldr	r3, [sl, #8]
   12464:	add	r8, r8, #1
   12468:	cmp	r8, r3
   1246c:	bcc	1236c <__assert_fail@plt+0xc48>
   12470:	ldr	r0, [sl, #44]	; 0x2c
   12474:	b	11cc8 <__assert_fail@plt+0x5a4>
   12478:	mov	r3, #1
   1247c:	str	r3, [sp, #28]
   12480:	b	1203c <__assert_fail@plt+0x918>
   12484:	mov	r8, #0
   12488:	b	12000 <__assert_fail@plt+0x8dc>
   1248c:	mov	r1, r4
   12490:	add	r2, sp, #96	; 0x60
   12494:	mov	r0, #3
   12498:	str	r3, [sp, #56]	; 0x38
   1249c:	bl	116d0 <__xstat64@plt>
   124a0:	ldr	r3, [sp, #56]	; 0x38
   124a4:	cmp	r0, #0
   124a8:	beq	124bc <__assert_fail@plt+0xd98>
   124ac:	tst	r7, r9
   124b0:	beq	12574 <__assert_fail@plt+0xe50>
   124b4:	mov	r2, #0
   124b8:	str	r2, [sp, #28]
   124bc:	cmp	r3, #1
   124c0:	beq	12684 <__assert_fail@plt+0xf60>
   124c4:	str	r3, [sp, #48]	; 0x30
   124c8:	str	r5, [sp, #60]	; 0x3c
   124cc:	ldr	r3, [sp, #28]
   124d0:	str	r3, [sp, #32]
   124d4:	mov	r3, #0
   124d8:	str	r3, [sp, #28]
   124dc:	b	1203c <__assert_fail@plt+0x918>
   124e0:	ldr	r1, [r4, #4]
   124e4:	add	r2, sp, #96	; 0x60
   124e8:	mov	r0, #3
   124ec:	bl	116d0 <__xstat64@plt>
   124f0:	cmp	r0, #0
   124f4:	ldrdeq	r0, [sp, #96]	; 0x60
   124f8:	strdeq	r0, [r4, #16]
   124fc:	beq	120dc <__assert_fail@plt+0x9b8>
   12500:	bl	11580 <__errno_location@plt>
   12504:	ldr	r7, [r0]
   12508:	cmp	r7, #5
   1250c:	beq	12b30 <__assert_fail@plt+0x140c>
   12510:	mvn	r0, #1
   12514:	mvn	r1, #0
   12518:	mov	r2, r0
   1251c:	mov	r3, r1
   12520:	strd	r2, [r4, #16]
   12524:	b	120dc <__assert_fail@plt+0x9b8>
   12528:	cmp	r5, #0
   1252c:	beq	122a0 <__assert_fail@plt+0xb7c>
   12530:	mov	r3, #0
   12534:	str	r3, [sp, #16]
   12538:	str	r3, [sp, #12]
   1253c:	ldrb	r1, [r5, #24]
   12540:	ldr	r3, [sp, #44]	; 0x2c
   12544:	mov	r2, r3
   12548:	lsr	r1, r1, #1
   1254c:	and	r1, r1, #1
   12550:	str	r1, [sp, #8]
   12554:	ldrb	r1, [r5, #24]
   12558:	and	r1, r1, #1
   1255c:	str	r1, [sp, #4]
   12560:	ldr	r1, [r5, #12]
   12564:	str	r1, [sp]
   12568:	ldrd	r0, [r5]
   1256c:	bl	13318 <__assert_fail@plt+0x1bf4>
   12570:	b	122e8 <__assert_fail@plt+0xbc4>
   12574:	ldr	r3, [sp, #32]
   12578:	str	r3, [sp, #28]
   1257c:	b	124cc <__assert_fail@plt+0xda8>
   12580:	bl	11550 <strlen@plt>
   12584:	cmp	r4, #0
   12588:	beq	12298 <__assert_fail@plt+0xb74>
   1258c:	mov	r3, #0
   12590:	ldr	r8, [pc, #516]	; 1279c <__assert_fail@plt+0x1078>
   12594:	mov	r6, r4
   12598:	str	r4, [sp, #32]
   1259c:	mov	r9, r3
   125a0:	mov	r5, r3
   125a4:	mov	r4, r0
   125a8:	str	fp, [sp, #28]
   125ac:	mov	r1, r8
   125b0:	ldr	r0, [r6, #12]
   125b4:	bl	11358 <strcmp@plt>
   125b8:	cmp	r0, #0
   125bc:	beq	12628 <__assert_fail@plt+0xf04>
   125c0:	cmp	r5, #0
   125c4:	beq	125e0 <__assert_fail@plt+0xebc>
   125c8:	ldrb	r3, [r5, #24]
   125cc:	tst	r3, #1
   125d0:	bne	125e0 <__assert_fail@plt+0xebc>
   125d4:	ldrb	r3, [r6, #24]
   125d8:	tst	r3, #1
   125dc:	bne	12628 <__assert_fail@plt+0xf04>
   125e0:	ldr	fp, [r6, #4]
   125e4:	mov	r0, fp
   125e8:	bl	11550 <strlen@plt>
   125ec:	cmp	r9, r0
   125f0:	movhi	r1, #0
   125f4:	movls	r1, #1
   125f8:	cmp	r4, r0
   125fc:	movcc	r1, #0
   12600:	cmp	r1, #0
   12604:	mov	r3, r0
   12608:	beq	12628 <__assert_fail@plt+0xf04>
   1260c:	cmp	r0, #1
   12610:	beq	12b24 <__assert_fail@plt+0x1400>
   12614:	cmp	r4, r0
   12618:	beq	127f0 <__assert_fail@plt+0x10cc>
   1261c:	ldrb	r1, [r7, r0]
   12620:	cmp	r1, #47	; 0x2f
   12624:	beq	127f0 <__assert_fail@plt+0x10cc>
   12628:	ldr	r6, [r6, #28]
   1262c:	cmp	r6, #0
   12630:	bne	125ac <__assert_fail@plt+0xe88>
   12634:	mov	r0, r7
   12638:	ldr	fp, [sp, #28]
   1263c:	ldr	r4, [sp, #32]
   12640:	bl	11388 <free@plt>
   12644:	cmp	r5, #0
   12648:	beq	120ac <__assert_fail@plt+0x988>
   1264c:	add	r2, sp, #96	; 0x60
   12650:	ldr	r1, [r5, #4]
   12654:	mov	r0, #3
   12658:	bl	116d0 <__xstat64@plt>
   1265c:	cmp	r0, #0
   12660:	bne	120ac <__assert_fail@plt+0x988>
   12664:	ldrd	r0, [sp, #64]	; 0x40
   12668:	ldrd	r2, [sp, #96]	; 0x60
   1266c:	add	r0, r1, r0
   12670:	ldrd	r0, [r0]
   12674:	cmp	r3, r1
   12678:	cmpeq	r2, r0
   1267c:	bne	120ac <__assert_fail@plt+0x988>
   12680:	b	12530 <__assert_fail@plt+0xe0c>
   12684:	mov	r0, r8
   12688:	bl	11388 <free@plt>
   1268c:	mov	r0, r6
   12690:	bl	11388 <free@plt>
   12694:	ldr	r0, [sp, #72]	; 0x48
   12698:	bl	11388 <free@plt>
   1269c:	str	r5, [sp, #60]	; 0x3c
   126a0:	ldr	r0, [sp, #60]	; 0x3c
   126a4:	mov	r3, #0
   126a8:	str	r3, [sp, #16]
   126ac:	str	r3, [sp, #12]
   126b0:	ldrb	r1, [r0, #24]
   126b4:	ldr	r2, [sp, #44]	; 0x2c
   126b8:	lsr	r1, r1, #1
   126bc:	and	r1, r1, #1
   126c0:	str	r1, [sp, #8]
   126c4:	ldrb	r1, [r0, #24]
   126c8:	and	r1, r1, #1
   126cc:	str	r1, [sp, #4]
   126d0:	ldr	r1, [r0, #12]
   126d4:	str	r1, [sp]
   126d8:	ldrd	r0, [r0]
   126dc:	bl	13318 <__assert_fail@plt+0x1bf4>
   126e0:	b	122e8 <__assert_fail@plt+0xbc4>
   126e4:	ldr	r4, [sl, #44]	; 0x2c
   126e8:	cmp	r4, #0
   126ec:	bne	12470 <__assert_fail@plt+0xd4c>
   126f0:	mov	r2, #5
   126f4:	ldr	r1, [pc, #188]	; 127b8 <__assert_fail@plt+0x1094>
   126f8:	mov	r0, r4
   126fc:	bl	113dc <dcgettext@plt>
   12700:	mov	r1, r4
   12704:	mov	r2, r0
   12708:	mov	r0, #1
   1270c:	bl	114b4 <error@plt>
   12710:	ldr	r3, [sp, #44]	; 0x2c
   12714:	mov	r2, r3
   12718:	b	11f18 <__assert_fail@plt+0x7f4>
   1271c:	mov	r1, #10
   12720:	bl	1161c <__overflow@plt>
   12724:	b	12460 <__assert_fail@plt+0xd3c>
   12728:	andeq	pc, r2, r8, lsl #30
   1272c:	andeq	pc, r1, ip, asr #13
   12730:	strdeq	pc, [r1], -r8
   12734:	andeq	pc, r1, r0, ror #1
   12738:	andeq	r0, r3, r8, lsr r3
   1273c:			; <UNDEFINED> instruction: 0x00014cb4
   12740:	andeq	pc, r1, ip, lsl #4
   12744:	andeq	lr, r1, r4, lsr #12
   12748:	andeq	pc, r1, r8, lsr r2	; <UNPREDICTABLE>
   1274c:	andeq	r0, r3, r0, lsr r3
   12750:	andeq	r0, r0, r1, lsl #2
   12754:	andeq	r0, r0, r2, lsl #2
   12758:	andeq	r0, r3, r8, asr r3
   1275c:	andeq	r0, r0, r3, lsl #2
   12760:	andeq	pc, r1, r4, ror #4
   12764:	andeq	pc, r1, r0, ror r2	; <UNPREDICTABLE>
   12768:	andeq	r0, r3, r8, asr #5
   1276c:	andeq	r0, r3, ip, lsr #6
   12770:	andeq	pc, r1, r0, lsl #5
   12774:	ldrdeq	pc, [r1], -ip
   12778:	andeq	lr, r1, ip, asr #15
   1277c:			; <UNDEFINED> instruction: 0x0001f2b4
   12780:	andeq	r0, r3, r0, lsr #6
   12784:	muleq	r1, r4, r2
   12788:	andeq	pc, r1, r4, ror #5
   1278c:	strdeq	pc, [r1], -r0
   12790:	andeq	pc, r1, ip, lsl r3	; <UNPREDICTABLE>
   12794:	andeq	r0, r3, r8, ror r1
   12798:	andeq	pc, r1, r4, lsr #5
   1279c:	andeq	pc, r1, r8, asr #7
   127a0:	andeq	pc, r1, r4, lsr #6
   127a4:			; <UNDEFINED> instruction: 0x0001f1bc
   127a8:	andeq	pc, r1, r4, asr #3
   127ac:	andeq	r0, r3, r0, ror r3
   127b0:	strdeq	pc, [r1], -r0
   127b4:	andeq	lr, r1, r0, ror r7
   127b8:	ldrdeq	pc, [r1], -r0
   127bc:			; <UNDEFINED> instruction: 0x00012eb4
   127c0:	andeq	r2, r1, r8, lsr #27
   127c4:	andeq	r2, r1, r4, asr #27
   127c8:	andeq	pc, r1, r4, ror #12
   127cc:	muleq	r1, r4, r3
   127d0:	andeq	pc, r1, r0, lsr r3	; <UNPREDICTABLE>
   127d4:	andeq	pc, r1, r0, ror #4
   127d8:	andeq	pc, r1, ip, asr #4
   127dc:	andeq	pc, r1, r0, asr r2	; <UNPREDICTABLE>
   127e0:	andeq	pc, r1, ip, asr r2	; <UNPREDICTABLE>
   127e4:	andeq	lr, r1, r4, lsr r7
   127e8:	andeq	lr, r1, r4, asr r7
   127ec:	andeq	pc, r1, ip, ror r3	; <UNPREDICTABLE>
   127f0:	mov	r2, r3
   127f4:	mov	r0, fp
   127f8:	mov	r1, r7
   127fc:	str	r3, [sp, #48]	; 0x30
   12800:	bl	116dc <strncmp@plt>
   12804:	ldr	r3, [sp, #48]	; 0x30
   12808:	cmp	r0, #0
   1280c:	moveq	r9, r3
   12810:	moveq	r5, r6
   12814:	b	12628 <__assert_fail@plt+0xf04>
   12818:	ldrb	fp, [sl, #41]	; 0x29
   1281c:	ldr	r5, [sl, #116]	; 0x74
   12820:	mov	r0, #0
   12824:	b	12830 <__assert_fail@plt+0x110c>
   12828:	ldr	r5, [r5, #28]
   1282c:	add	r0, r0, #1
   12830:	cmp	r5, #0
   12834:	bne	12828 <__assert_fail@plt+0x1104>
   12838:	ldr	r3, [pc, #-132]	; 127bc <__assert_fail@plt+0x1098>
   1283c:	ldr	r2, [pc, #-132]	; 127c0 <__assert_fail@plt+0x109c>
   12840:	str	r3, [sp]
   12844:	mov	r1, r5
   12848:	ldr	r3, [pc, #-140]	; 127c4 <__assert_fail@plt+0x10a0>
   1284c:	bl	15900 <__assert_fail@plt+0x41dc>
   12850:	cmp	r0, #0
   12854:	str	r0, [sl, #48]	; 0x30
   12858:	beq	12c58 <__assert_fail@plt+0x1534>
   1285c:	ldr	r4, [sl, #116]	; 0x74
   12860:	cmp	r4, #0
   12864:	beq	12a84 <__assert_fail@plt+0x1360>
   12868:	mov	r8, r4
   1286c:	str	r5, [sp, #28]
   12870:	mov	r4, r5
   12874:	mov	r5, r8
   12878:	b	128c4 <__assert_fail@plt+0x11a0>
   1287c:	ldrd	r0, [r5, #16]
   12880:	strd	r0, [sp, #96]	; 0x60
   12884:	mov	r0, #16
   12888:	bl	19da8 <__assert_fail@plt+0x8684>
   1288c:	ldrd	r8, [sp, #96]	; 0x60
   12890:	str	r5, [r0, #8]
   12894:	str	r4, [r0, #12]
   12898:	mov	r1, r0
   1289c:	strd	r8, [r0]
   128a0:	mov	r6, r0
   128a4:	ldr	r0, [sl, #48]	; 0x30
   128a8:	bl	15f2c <__assert_fail@plt+0x4808>
   128ac:	cmp	r0, #0
   128b0:	beq	12c58 <__assert_fail@plt+0x1534>
   128b4:	ldr	r5, [r5, #28]
   128b8:	mov	r4, r6
   128bc:	cmp	r5, #0
   128c0:	beq	12a80 <__assert_fail@plt+0x135c>
   128c4:	ldrb	r2, [r5, #24]
   128c8:	tst	r2, #2
   128cc:	beq	128dc <__assert_fail@plt+0x11b8>
   128d0:	ldrb	r1, [sl, #40]	; 0x28
   128d4:	cmp	r1, #0
   128d8:	bne	1287c <__assert_fail@plt+0x1158>
   128dc:	tst	r2, #1
   128e0:	beq	128fc <__assert_fail@plt+0x11d8>
   128e4:	ldrb	r2, [sl, #41]	; 0x29
   128e8:	cmp	r2, #0
   128ec:	bne	128fc <__assert_fail@plt+0x11d8>
   128f0:	ldrb	r2, [sl, #42]	; 0x2a
   128f4:	cmp	r2, #0
   128f8:	beq	1287c <__assert_fail@plt+0x1158>
   128fc:	ldr	r6, [r5, #12]
   12900:	mov	r0, r6
   12904:	bl	12de8 <__assert_fail@plt+0x16c4>
   12908:	cmp	r0, #0
   1290c:	beq	1287c <__assert_fail@plt+0x1158>
   12910:	mov	r0, r6
   12914:	bl	12e4c <__assert_fail@plt+0x1728>
   12918:	cmp	r0, #0
   1291c:	bne	1287c <__assert_fail@plt+0x1158>
   12920:	add	r2, sp, #96	; 0x60
   12924:	ldr	r1, [r5, #4]
   12928:	mov	r0, #3
   1292c:	bl	116d0 <__xstat64@plt>
   12930:	cmn	r0, #1
   12934:	beq	1287c <__assert_fail@plt+0x1158>
   12938:	ldr	r0, [sl, #48]	; 0x30
   1293c:	ldrd	r6, [sp, #96]	; 0x60
   12940:	cmp	r0, #0
   12944:	beq	12884 <__assert_fail@plt+0x1160>
   12948:	add	r1, sp, #80	; 0x50
   1294c:	strd	r6, [sp, #80]	; 0x50
   12950:	bl	15648 <__assert_fail@plt+0x3f24>
   12954:	subs	r9, r0, #0
   12958:	beq	12884 <__assert_fail@plt+0x1160>
   1295c:	ldr	r6, [r9, #8]
   12960:	ldr	r0, [r6, #8]
   12964:	cmp	r0, #0
   12968:	moveq	r7, r0
   1296c:	beq	12998 <__assert_fail@plt+0x1274>
   12970:	ldr	r7, [r5, #8]
   12974:	cmp	r7, #0
   12978:	beq	12998 <__assert_fail@plt+0x1274>
   1297c:	bl	11550 <strlen@plt>
   12980:	mov	r8, r0
   12984:	mov	r0, r7
   12988:	bl	11550 <strlen@plt>
   1298c:	cmp	r8, r0
   12990:	movcs	r7, #0
   12994:	movcc	r7, #1
   12998:	ldrb	r2, [sl, #53]	; 0x35
   1299c:	ldr	r8, [r5]
   129a0:	cmp	r2, #0
   129a4:	bne	129d4 <__assert_fail@plt+0x12b0>
   129a8:	ldrb	r2, [r5, #24]
   129ac:	tst	r2, #2
   129b0:	beq	129d4 <__assert_fail@plt+0x12b0>
   129b4:	ldrb	r2, [r6, #24]
   129b8:	tst	r2, #2
   129bc:	beq	129d4 <__assert_fail@plt+0x12b0>
   129c0:	mov	r1, r8
   129c4:	ldr	r0, [r6]
   129c8:	bl	11358 <strcmp@plt>
   129cc:	cmp	r0, #0
   129d0:	bne	12884 <__assert_fail@plt+0x1160>
   129d4:	mov	r1, #47	; 0x2f
   129d8:	mov	r0, r8
   129dc:	bl	1155c <strchr@plt>
   129e0:	cmp	r0, #0
   129e4:	beq	129fc <__assert_fail@plt+0x12d8>
   129e8:	mov	r1, #47	; 0x2f
   129ec:	ldr	r0, [r6]
   129f0:	bl	1155c <strchr@plt>
   129f4:	cmp	r0, #0
   129f8:	beq	12ba4 <__assert_fail@plt+0x1480>
   129fc:	ldr	r3, [r6, #4]
   12a00:	eor	r7, r7, #1
   12a04:	mov	r0, r3
   12a08:	str	r3, [sp, #32]
   12a0c:	bl	11550 <strlen@plt>
   12a10:	ldr	r2, [r5, #4]
   12a14:	str	r2, [sp, #36]	; 0x24
   12a18:	str	r0, [sp, #40]	; 0x28
   12a1c:	mov	r0, r2
   12a20:	bl	11550 <strlen@plt>
   12a24:	ldr	r2, [sp, #40]	; 0x28
   12a28:	cmp	r2, r0
   12a2c:	movls	r7, #0
   12a30:	andhi	r7, r7, #1
   12a34:	cmp	r7, #0
   12a38:	bne	12ba4 <__assert_fail@plt+0x1480>
   12a3c:	mov	r1, r8
   12a40:	ldr	r0, [r6]
   12a44:	bl	11358 <strcmp@plt>
   12a48:	cmp	r0, #0
   12a4c:	beq	12a64 <__assert_fail@plt+0x1340>
   12a50:	ldr	r1, [sp, #32]
   12a54:	ldr	r0, [sp, #36]	; 0x24
   12a58:	bl	11358 <strcmp@plt>
   12a5c:	cmp	r0, #0
   12a60:	beq	12ba4 <__assert_fail@plt+0x1480>
   12a64:	mov	r6, r5
   12a68:	cmp	fp, #0
   12a6c:	ldr	r5, [r5, #28]
   12a70:	bne	128bc <__assert_fail@plt+0x1198>
   12a74:	mov	r0, r6
   12a78:	bl	1b128 <__assert_fail@plt+0x9a04>
   12a7c:	b	128bc <__assert_fail@plt+0x1198>
   12a80:	ldr	r5, [sp, #28]
   12a84:	cmp	fp, #0
   12a88:	streq	fp, [sl, #116]	; 0x74
   12a8c:	beq	12b00 <__assert_fail@plt+0x13dc>
   12a90:	ldr	r4, [sl, #116]	; 0x74
   12a94:	mov	r6, #1
   12a98:	mov	r5, #0
   12a9c:	b	12ae0 <__assert_fail@plt+0x13bc>
   12aa0:	str	r6, [sp, #16]
   12aa4:	str	r5, [sp, #12]
   12aa8:	ldrb	r1, [r4, #24]
   12aac:	mov	r3, #0
   12ab0:	mov	r2, r3
   12ab4:	lsr	r1, r1, #1
   12ab8:	and	r1, r1, #1
   12abc:	str	r1, [sp, #8]
   12ac0:	ldrb	r1, [r4, #24]
   12ac4:	and	r1, r1, #1
   12ac8:	str	r1, [sp, #4]
   12acc:	ldr	r1, [r4, #12]
   12ad0:	str	r1, [sp]
   12ad4:	ldrd	r0, [r4]
   12ad8:	bl	13318 <__assert_fail@plt+0x1bf4>
   12adc:	ldr	r4, [r4, #28]
   12ae0:	cmp	r4, #0
   12ae4:	bne	12aa0 <__assert_fail@plt+0x137c>
   12ae8:	b	12304 <__assert_fail@plt+0xbe0>
   12aec:	ldr	r3, [r4, #8]
   12af0:	mov	fp, #1
   12af4:	ldr	r4, [r4, #12]
   12af8:	str	r5, [r3, #28]
   12afc:	mov	r5, r3
   12b00:	cmp	r4, #0
   12b04:	bne	12aec <__assert_fail@plt+0x13c8>
   12b08:	cmp	fp, #0
   12b0c:	ldr	r0, [sl, #48]	; 0x30
   12b10:	strne	r5, [sl, #116]	; 0x74
   12b14:	bl	15b00 <__assert_fail@plt+0x43dc>
   12b18:	mov	r3, #0
   12b1c:	str	r3, [sl, #48]	; 0x30
   12b20:	b	12a90 <__assert_fail@plt+0x136c>
   12b24:	mov	r9, r0
   12b28:	mov	r5, r6
   12b2c:	b	12628 <__assert_fail@plt+0xf04>
   12b30:	ldr	r2, [r4, #4]
   12b34:	mov	r1, #3
   12b38:	mov	r0, #0
   12b3c:	bl	1944c <__assert_fail@plt+0x7d28>
   12b40:	mov	r1, r7
   12b44:	ldr	r2, [pc, #-900]	; 127c8 <__assert_fail@plt+0x10a4>
   12b48:	mov	r3, r0
   12b4c:	mov	r0, #0
   12b50:	bl	114b4 <error@plt>
   12b54:	mov	r3, #1
   12b58:	str	r3, [sl, #44]	; 0x2c
   12b5c:	b	12510 <__assert_fail@plt+0xdec>
   12b60:	ldr	r5, [sp, #60]	; 0x3c
   12b64:	mov	r2, #5
   12b68:	ldr	r1, [pc, #-932]	; 127cc <__assert_fail@plt+0x10a8>
   12b6c:	mov	r0, r5
   12b70:	bl	113dc <dcgettext@plt>
   12b74:	ldr	r1, [sp, #44]	; 0x2c
   12b78:	mov	r4, r0
   12b7c:	mov	r0, #4
   12b80:	bl	19370 <__assert_fail@plt+0x7c4c>
   12b84:	mov	r2, r4
   12b88:	mov	r1, r5
   12b8c:	mov	r3, r0
   12b90:	mov	r0, r5
   12b94:	bl	114b4 <error@plt>
   12b98:	mov	r3, #1
   12b9c:	str	r3, [sl, #44]	; 0x2c
   12ba0:	b	122e8 <__assert_fail@plt+0xbc4>
   12ba4:	str	r5, [r9, #8]
   12ba8:	b	12a68 <__assert_fail@plt+0x1344>
   12bac:	ldr	r0, [sp, #72]	; 0x48
   12bb0:	bl	11388 <free@plt>
   12bb4:	b	1207c <__assert_fail@plt+0x958>
   12bb8:	ldr	r0, [pc, #-1008]	; 127d0 <__assert_fail@plt+0x10ac>
   12bbc:	bl	14288 <__assert_fail@plt+0x2b64>
   12bc0:	b	11e68 <__assert_fail@plt+0x744>
   12bc4:	mov	r1, #0
   12bc8:	mov	r0, #1
   12bcc:	bl	13264 <__assert_fail@plt+0x1b40>
   12bd0:	b	12178 <__assert_fail@plt+0xa54>
   12bd4:	mov	r1, #0
   12bd8:	mov	r0, #1
   12bdc:	bl	13264 <__assert_fail@plt+0x1b40>
   12be0:	b	121d0 <__assert_fail@plt+0xaac>
   12be4:	mov	r1, #0
   12be8:	mov	r0, #1
   12bec:	bl	13264 <__assert_fail@plt+0x1b40>
   12bf0:	b	12214 <__assert_fail@plt+0xaf0>
   12bf4:	mov	r1, #0
   12bf8:	mov	r0, #1
   12bfc:	bl	13264 <__assert_fail@plt+0x1b40>
   12c00:	b	1226c <__assert_fail@plt+0xb48>
   12c04:	mov	r0, #0
   12c08:	bl	13ea0 <__assert_fail@plt+0x277c>
   12c0c:	bl	113f4 <__stack_chk_fail@plt>
   12c10:	ldr	r3, [pc, #-1084]	; 127dc <__assert_fail@plt+0x10b8>
   12c14:	mov	r1, #0
   12c18:	str	r3, [sp]
   12c1c:	mov	r0, r1
   12c20:	ldr	r2, [sp, #40]	; 0x28
   12c24:	ldr	r3, [pc, #-1112]	; 127d4 <__assert_fail@plt+0x10b0>
   12c28:	bl	114b4 <error@plt>
   12c2c:	mov	r0, #1
   12c30:	bl	13ea0 <__assert_fail@plt+0x277c>
   12c34:	ldr	r3, [pc, #-1120]	; 127dc <__assert_fail@plt+0x10b8>
   12c38:	mov	r1, #0
   12c3c:	str	r3, [sp]
   12c40:	mov	r0, r1
   12c44:	ldr	r2, [sp, #40]	; 0x28
   12c48:	ldr	r3, [pc, #-1144]	; 127d8 <__assert_fail@plt+0x10b4>
   12c4c:	bl	114b4 <error@plt>
   12c50:	mov	r0, #1
   12c54:	bl	13ea0 <__assert_fail@plt+0x277c>
   12c58:	bl	19ff0 <__assert_fail@plt+0x88cc>
   12c5c:	ldr	r3, [pc, #-1160]	; 127dc <__assert_fail@plt+0x10b8>
   12c60:	mov	r1, #0
   12c64:	str	r3, [sp]
   12c68:	mov	r0, r1
   12c6c:	ldr	r2, [sp, #40]	; 0x28
   12c70:	ldr	r3, [pc, #-1176]	; 127e0 <__assert_fail@plt+0x10bc>
   12c74:	bl	114b4 <error@plt>
   12c78:	mov	r0, #1
   12c7c:	bl	13ea0 <__assert_fail@plt+0x277c>
   12c80:	mov	r1, r3
   12c84:	ldr	r3, [pc, #-1200]	; 127dc <__assert_fail@plt+0x10b8>
   12c88:	mov	r0, r1
   12c8c:	str	r3, [sp]
   12c90:	ldr	r2, [sp, #40]	; 0x28
   12c94:	ldr	r3, [pc, #-1212]	; 127e0 <__assert_fail@plt+0x10bc>
   12c98:	bl	114b4 <error@plt>
   12c9c:	mov	r0, #1
   12ca0:	bl	13ea0 <__assert_fail@plt+0x277c>
   12ca4:	ldr	r3, [pc, #-1224]	; 127e4 <__assert_fail@plt+0x10c0>
   12ca8:	mov	r2, #496	; 0x1f0
   12cac:	ldr	r1, [pc, #-1228]	; 127e8 <__assert_fail@plt+0x10c4>
   12cb0:	ldr	r0, [pc, #-1228]	; 127ec <__assert_fail@plt+0x10c8>
   12cb4:	bl	11724 <__assert_fail@plt>
   12cb8:	mov	fp, #0
   12cbc:	mov	lr, #0
   12cc0:	pop	{r1}		; (ldr r1, [sp], #4)
   12cc4:	mov	r2, sp
   12cc8:	push	{r2}		; (str r2, [sp, #-4]!)
   12ccc:	push	{r0}		; (str r0, [sp, #-4]!)
   12cd0:	ldr	ip, [pc, #16]	; 12ce8 <__assert_fail@plt+0x15c4>
   12cd4:	push	{ip}		; (str ip, [sp, #-4]!)
   12cd8:	ldr	r0, [pc, #12]	; 12cec <__assert_fail@plt+0x15c8>
   12cdc:	ldr	r3, [pc, #12]	; 12cf0 <__assert_fail@plt+0x15cc>
   12ce0:	bl	114f0 <__libc_start_main@plt>
   12ce4:	bl	116e8 <abort@plt>
   12ce8:			; <UNDEFINED> instruction: 0x0001e5b0
   12cec:	andeq	r1, r1, r0, lsr r7
   12cf0:	andeq	lr, r1, r0, asr r5
   12cf4:	ldr	r3, [pc, #20]	; 12d10 <__assert_fail@plt+0x15ec>
   12cf8:	ldr	r2, [pc, #20]	; 12d14 <__assert_fail@plt+0x15f0>
   12cfc:	add	r3, pc, r3
   12d00:	ldr	r2, [r3, r2]
   12d04:	cmp	r2, #0
   12d08:	bxeq	lr
   12d0c:	b	11508 <__gmon_start__@plt>
   12d10:	strdeq	sp, [r1], -ip
   12d14:	andeq	r0, r0, ip, ror #2
   12d18:	ldr	r0, [pc, #24]	; 12d38 <__assert_fail@plt+0x1614>
   12d1c:	ldr	r3, [pc, #24]	; 12d3c <__assert_fail@plt+0x1618>
   12d20:	cmp	r3, r0
   12d24:	bxeq	lr
   12d28:	ldr	r3, [pc, #16]	; 12d40 <__assert_fail@plt+0x161c>
   12d2c:	cmp	r3, #0
   12d30:	bxeq	lr
   12d34:	bx	r3
   12d38:	andeq	r0, r3, r8, lsl r3
   12d3c:	andeq	r0, r3, r8, lsl r3
   12d40:	andeq	r0, r0, r0
   12d44:	ldr	r0, [pc, #36]	; 12d70 <__assert_fail@plt+0x164c>
   12d48:	ldr	r1, [pc, #36]	; 12d74 <__assert_fail@plt+0x1650>
   12d4c:	sub	r1, r1, r0
   12d50:	asr	r1, r1, #2
   12d54:	add	r1, r1, r1, lsr #31
   12d58:	asrs	r1, r1, #1
   12d5c:	bxeq	lr
   12d60:	ldr	r3, [pc, #16]	; 12d78 <__assert_fail@plt+0x1654>
   12d64:	cmp	r3, #0
   12d68:	bxeq	lr
   12d6c:	bx	r3
   12d70:	andeq	r0, r3, r8, lsl r3
   12d74:	andeq	r0, r3, r8, lsl r3
   12d78:	andeq	r0, r0, r0
   12d7c:	push	{r4, lr}
   12d80:	ldr	r4, [pc, #24]	; 12da0 <__assert_fail@plt+0x167c>
   12d84:	ldrb	r3, [r4]
   12d88:	cmp	r3, #0
   12d8c:	popne	{r4, pc}
   12d90:	bl	12d18 <__assert_fail@plt+0x15f4>
   12d94:	mov	r3, #1
   12d98:	strb	r3, [r4]
   12d9c:	pop	{r4, pc}
   12da0:	andeq	r0, r3, r4, lsr r3
   12da4:	b	12d44 <__assert_fail@plt+0x1620>
   12da8:	push	{r4, lr}
   12dac:	mov	r2, r1
   12db0:	mov	r3, #0
   12db4:	ldrd	r0, [r0]
   12db8:	bl	1e398 <__assert_fail@plt+0xcc74>
   12dbc:	mov	r0, r2
   12dc0:	pop	{r4, pc}
   12dc4:	push	{r4, r5}
   12dc8:	ldrd	r2, [r1]
   12dcc:	ldrd	r4, [r0]
   12dd0:	cmp	r5, r3
   12dd4:	cmpeq	r4, r2
   12dd8:	moveq	r0, #1
   12ddc:	movne	r0, #0
   12de0:	pop	{r4, r5}
   12de4:	bx	lr
   12de8:	ldr	r2, [pc, #88]	; 12e48 <__assert_fail@plt+0x1724>
   12dec:	push	{r4, r5, r6, lr}
   12df0:	clz	r3, r0
   12df4:	ldr	r4, [r2]
   12df8:	lsr	r3, r3, #5
   12dfc:	cmp	r4, #0
   12e00:	movne	r5, r3
   12e04:	moveq	r5, #1
   12e08:	cmp	r5, #0
   12e0c:	bne	12e34 <__assert_fail@plt+0x1710>
   12e10:	mov	r6, r0
   12e14:	ldr	r1, [r4]
   12e18:	mov	r0, r6
   12e1c:	bl	11358 <strcmp@plt>
   12e20:	cmp	r0, #0
   12e24:	beq	12e3c <__assert_fail@plt+0x1718>
   12e28:	ldr	r4, [r4, #4]
   12e2c:	cmp	r4, #0
   12e30:	bne	12e14 <__assert_fail@plt+0x16f0>
   12e34:	mov	r0, r5
   12e38:	pop	{r4, r5, r6, pc}
   12e3c:	mov	r5, #1
   12e40:	mov	r0, r5
   12e44:	pop	{r4, r5, r6, pc}
   12e48:	andeq	r0, r3, r8, lsr r3
   12e4c:	ldr	r2, [pc, #92]	; 12eb0 <__assert_fail@plt+0x178c>
   12e50:	push	{r4, r5, r6, lr}
   12e54:	clz	r3, r0
   12e58:	ldr	r4, [r2, #4]
   12e5c:	lsr	r3, r3, #5
   12e60:	cmp	r4, #0
   12e64:	movne	r5, r3
   12e68:	moveq	r5, #1
   12e6c:	cmp	r5, #0
   12e70:	movne	r5, #0
   12e74:	bne	12e9c <__assert_fail@plt+0x1778>
   12e78:	mov	r6, r0
   12e7c:	ldr	r1, [r4]
   12e80:	mov	r0, r6
   12e84:	bl	11358 <strcmp@plt>
   12e88:	cmp	r0, #0
   12e8c:	beq	12ea4 <__assert_fail@plt+0x1780>
   12e90:	ldr	r4, [r4, #4]
   12e94:	cmp	r4, #0
   12e98:	bne	12e7c <__assert_fail@plt+0x1758>
   12e9c:	mov	r0, r5
   12ea0:	pop	{r4, r5, r6, pc}
   12ea4:	mov	r5, #1
   12ea8:	mov	r0, r5
   12eac:	pop	{r4, r5, r6, pc}
   12eb0:	andeq	r0, r3, r8, lsr r3
   12eb4:	b	11388 <free@plt>
   12eb8:	push	{r4, r5, r6, lr}
   12ebc:	ldr	r4, [pc, #108]	; 12f30 <__assert_fail@plt+0x180c>
   12ec0:	ldr	r3, [r4, #8]
   12ec4:	ldr	r0, [r4, #12]
   12ec8:	add	r3, r3, #1
   12ecc:	lsrs	r2, r3, #30
   12ed0:	movne	r2, #1
   12ed4:	moveq	r2, #0
   12ed8:	lsls	r1, r3, #2
   12edc:	str	r3, [r4, #8]
   12ee0:	bmi	12f2c <__assert_fail@plt+0x1808>
   12ee4:	cmp	r2, #0
   12ee8:	bne	12f2c <__assert_fail@plt+0x1808>
   12eec:	bl	19e04 <__assert_fail@plt+0x86e0>
   12ef0:	ldr	r3, [r4, #8]
   12ef4:	mov	r5, r0
   12ef8:	ldr	r0, [r4, #16]
   12efc:	str	r5, [r4, #12]
   12f00:	lsrs	r2, r0, #30
   12f04:	movne	r2, #1
   12f08:	moveq	r2, #0
   12f0c:	lsls	r0, r0, #2
   12f10:	sub	r4, r3, #-1073741823	; 0xc0000001
   12f14:	bmi	12f2c <__assert_fail@plt+0x1808>
   12f18:	cmp	r2, #0
   12f1c:	bne	12f2c <__assert_fail@plt+0x1808>
   12f20:	bl	19da8 <__assert_fail@plt+0x8684>
   12f24:	str	r0, [r5, r4, lsl #2]
   12f28:	pop	{r4, r5, r6, pc}
   12f2c:	bl	19ff0 <__assert_fail@plt+0x88cc>
   12f30:	andeq	r0, r3, r8, lsr r3
   12f34:	push	{r4, r5, r6, lr}
   12f38:	mov	r5, r0
   12f3c:	ldrb	r4, [r0]
   12f40:	cmp	r4, #0
   12f44:	beq	12f74 <__assert_fail@plt+0x1850>
   12f48:	bl	1152c <__ctype_b_loc@plt>
   12f4c:	mov	r3, r5
   12f50:	mov	r1, #63	; 0x3f
   12f54:	ldr	r2, [r0]
   12f58:	lsl	r4, r4, #1
   12f5c:	ldrh	r2, [r2, r4]
   12f60:	tst	r2, #2
   12f64:	strbne	r1, [r3]
   12f68:	ldrb	r4, [r3, #1]!
   12f6c:	cmp	r4, #0
   12f70:	bne	12f54 <__assert_fail@plt+0x1830>
   12f74:	mov	r0, r5
   12f78:	pop	{r4, r5, r6, pc}
   12f7c:	ldr	r3, [pc, #720]	; 13254 <__assert_fail@plt+0x1b30>
   12f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f84:	sub	sp, sp, #716	; 0x2cc
   12f88:	ldr	r8, [pc, #712]	; 13258 <__assert_fail@plt+0x1b34>
   12f8c:	ldr	r3, [r3]
   12f90:	str	r3, [sp, #708]	; 0x2c4
   12f94:	bl	12eb8 <__assert_fail@plt+0x1794>
   12f98:	ldr	r3, [r8, #16]
   12f9c:	cmp	r3, #0
   12fa0:	beq	1320c <__assert_fail@plt+0x1ae8>
   12fa4:	ldr	r5, [r8, #20]
   12fa8:	mov	fp, #0
   12fac:	b	1301c <__assert_fail@plt+0x18f8>
   12fb0:	mov	r0, r6
   12fb4:	bl	113e8 <strdup@plt>
   12fb8:	str	r0, [sp, #52]	; 0x34
   12fbc:	cmp	r0, #0
   12fc0:	beq	13240 <__assert_fail@plt+0x1b1c>
   12fc4:	bl	12f34 <__assert_fail@plt+0x1810>
   12fc8:	ldr	r3, [r8, #8]
   12fcc:	ldr	r2, [r8, #12]
   12fd0:	ldr	r1, [r8, #20]
   12fd4:	sub	r3, r3, #-1073741823	; 0xc0000001
   12fd8:	ldr	r0, [sp, #52]	; 0x34
   12fdc:	ldr	r2, [r2, r3, lsl #2]
   12fe0:	ldr	r3, [r1, r7]
   12fe4:	mov	r1, #0
   12fe8:	str	r0, [r2, r7]
   12fec:	ldr	r4, [r3, #16]
   12ff0:	bl	17390 <__assert_fail@plt+0x5c6c>
   12ff4:	cmp	r4, r0
   12ff8:	bls	130b0 <__assert_fail@plt+0x198c>
   12ffc:	ldr	r5, [r8, #20]
   13000:	ldr	r3, [r5, r7]
   13004:	ldr	r0, [r3, #16]
   13008:	ldr	r2, [r8, #16]
   1300c:	add	fp, fp, #1
   13010:	cmp	r2, fp
   13014:	str	r0, [r3, #16]
   13018:	bls	1320c <__assert_fail@plt+0x1ae8>
   1301c:	ldr	r3, [r5, fp, lsl #2]
   13020:	mov	r4, #0
   13024:	mov	r2, #5
   13028:	ldr	r1, [r3, #12]
   1302c:	mov	r0, r4
   13030:	str	r4, [sp, #52]	; 0x34
   13034:	bl	113dc <dcgettext@plt>
   13038:	ldr	r3, [r5, fp, lsl #2]
   1303c:	lsl	r7, fp, #2
   13040:	ldr	r2, [r3]
   13044:	cmp	r2, #2
   13048:	mov	r6, r0
   1304c:	bne	12fb0 <__assert_fail@plt+0x188c>
   13050:	ldr	r3, [r8, #24]
   13054:	cmp	r3, r4
   13058:	beq	130d4 <__assert_fail@plt+0x19b0>
   1305c:	cmp	r3, #4
   13060:	beq	130c8 <__assert_fail@plt+0x19a4>
   13064:	cmp	r3, #3
   13068:	bne	12fb0 <__assert_fail@plt+0x188c>
   1306c:	add	r2, sp, #56	; 0x38
   13070:	ldrd	r0, [r8, #32]
   13074:	bl	16d68 <__assert_fail@plt+0x5644>
   13078:	mov	r2, #5
   1307c:	ldr	r1, [pc, #472]	; 1325c <__assert_fail@plt+0x1b38>
   13080:	mov	r5, r0
   13084:	mov	r0, r4
   13088:	bl	113dc <dcgettext@plt>
   1308c:	mov	r3, r6
   13090:	mov	r2, r5
   13094:	mov	r1, r0
   13098:	add	r0, sp, #52	; 0x34
   1309c:	bl	1ab04 <__assert_fail@plt+0x93e0>
   130a0:	cmn	r0, #1
   130a4:	streq	r4, [sp, #52]	; 0x34
   130a8:	ldr	r0, [sp, #52]	; 0x34
   130ac:	b	12fbc <__assert_fail@plt+0x1898>
   130b0:	mov	r1, #0
   130b4:	ldr	r0, [sp, #52]	; 0x34
   130b8:	bl	17390 <__assert_fail@plt+0x5c6c>
   130bc:	ldr	r5, [r8, #20]
   130c0:	ldr	r3, [r5, r7]
   130c4:	b	13008 <__assert_fail@plt+0x18e4>
   130c8:	ldr	r3, [r8, #28]
   130cc:	tst	r3, #16
   130d0:	bne	12fb0 <__assert_fail@plt+0x188c>
   130d4:	ldr	r3, [r8, #32]
   130d8:	ldr	r2, [r8, #36]	; 0x24
   130dc:	ldr	r1, [r8, #28]
   130e0:	str	fp, [sp, #36]	; 0x24
   130e4:	mov	r4, r3
   130e8:	mov	fp, r7
   130ec:	mov	sl, r3
   130f0:	mov	r9, r2
   130f4:	mov	r7, r2
   130f8:	str	r1, [sp, #44]	; 0x2c
   130fc:	and	r1, r1, #292	; 0x124
   13100:	str	r3, [sp, #28]
   13104:	str	r2, [sp, #32]
   13108:	str	r1, [sp, #40]	; 0x28
   1310c:	mov	r0, sl
   13110:	mov	r1, r9
   13114:	mov	r2, #1000	; 0x3e8
   13118:	mov	r3, #0
   1311c:	bl	1e398 <__assert_fail@plt+0xcc74>
   13120:	mov	r0, sl
   13124:	mov	r1, r9
   13128:	mov	r6, r2
   1312c:	mov	r5, r3
   13130:	mov	r2, #1000	; 0x3e8
   13134:	mov	r3, #0
   13138:	bl	1e398 <__assert_fail@plt+0xcc74>
   1313c:	lsl	r3, r4, #22
   13140:	str	r5, [sp, #20]
   13144:	lsr	r3, r3, #22
   13148:	orr	r2, r3, r6
   1314c:	str	r2, [sp, #16]
   13150:	lsr	r4, r4, #10
   13154:	orr	r4, r4, r7, lsl #22
   13158:	lsr	r7, r7, #10
   1315c:	mov	sl, r0
   13160:	mov	r9, r1
   13164:	ldrd	r0, [sp, #16]
   13168:	orrs	r2, r0, r1
   1316c:	beq	1310c <__assert_fail@plt+0x19e8>
   13170:	orrs	r2, r6, r5
   13174:	clz	r3, r3
   13178:	moveq	r2, #1
   1317c:	movne	r2, #0
   13180:	lsr	r3, r3, #5
   13184:	cmp	r2, r3
   13188:	mov	r7, fp
   1318c:	ldr	fp, [sp, #36]	; 0x24
   13190:	bcs	13228 <__assert_fail@plt+0x1b04>
   13194:	ldr	r3, [sp, #40]	; 0x28
   13198:	orr	r3, r3, #184	; 0xb8
   1319c:	tst	r3, #32
   131a0:	beq	13238 <__assert_fail@plt+0x1b14>
   131a4:	mov	r4, #1
   131a8:	mov	r5, #0
   131ac:	ldrd	r0, [sp, #28]
   131b0:	strd	r4, [sp, #8]
   131b4:	strd	r4, [sp]
   131b8:	add	r2, sp, #56	; 0x38
   131bc:	bl	161b0 <__assert_fail@plt+0x4a8c>
   131c0:	mov	r2, #5
   131c4:	ldr	r1, [pc, #148]	; 13260 <__assert_fail@plt+0x1b3c>
   131c8:	mov	r4, r0
   131cc:	mov	r0, #0
   131d0:	bl	113dc <dcgettext@plt>
   131d4:	mov	r2, #5
   131d8:	ldr	r1, [pc, #124]	; 1325c <__assert_fail@plt+0x1b38>
   131dc:	mov	r5, r0
   131e0:	mov	r0, #0
   131e4:	bl	113dc <dcgettext@plt>
   131e8:	mov	r3, r5
   131ec:	mov	r2, r4
   131f0:	mov	r1, r0
   131f4:	add	r0, sp, #52	; 0x34
   131f8:	bl	1ab04 <__assert_fail@plt+0x93e0>
   131fc:	cmn	r0, #1
   13200:	moveq	r3, #0
   13204:	streq	r3, [sp, #52]	; 0x34
   13208:	b	130a8 <__assert_fail@plt+0x1984>
   1320c:	ldr	r3, [pc, #64]	; 13254 <__assert_fail@plt+0x1b30>
   13210:	ldr	r2, [sp, #708]	; 0x2c4
   13214:	ldr	r3, [r3]
   13218:	cmp	r2, r3
   1321c:	bne	13250 <__assert_fail@plt+0x1b2c>
   13220:	add	sp, sp, #716	; 0x2cc
   13224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13228:	bls	13244 <__assert_fail@plt+0x1b20>
   1322c:	ldr	r3, [sp, #44]	; 0x2c
   13230:	and	r3, r3, #260	; 0x104
   13234:	orr	r3, r3, #152	; 0x98
   13238:	orr	r3, r3, #256	; 0x100
   1323c:	b	131a4 <__assert_fail@plt+0x1a80>
   13240:	bl	19ff0 <__assert_fail@plt+0x88cc>
   13244:	ldr	r3, [sp, #40]	; 0x28
   13248:	orr	r3, r3, #152	; 0x98
   1324c:	b	1319c <__assert_fail@plt+0x1a78>
   13250:	bl	113f4 <__stack_chk_fail@plt>
   13254:	andeq	pc, r2, r8, lsl #30
   13258:	andeq	r0, r3, r8, lsr r3
   1325c:	andeq	lr, r1, ip, asr #14
   13260:	andeq	lr, r1, r4, asr #14
   13264:	push	{r4, r5, r6, lr}
   13268:	mov	r6, r1
   1326c:	ldr	r4, [pc, #144]	; 13304 <__assert_fail@plt+0x1be0>
   13270:	mov	r5, r0
   13274:	ldr	r3, [r4, #16]
   13278:	ldr	r0, [r4, #20]
   1327c:	add	r3, r3, #1
   13280:	lsrs	r2, r3, #30
   13284:	movne	r2, #1
   13288:	moveq	r2, #0
   1328c:	lsls	r1, r3, #2
   13290:	str	r3, [r4, #16]
   13294:	bmi	132ec <__assert_fail@plt+0x1bc8>
   13298:	cmp	r2, #0
   1329c:	bne	132ec <__assert_fail@plt+0x1bc8>
   132a0:	bl	19e04 <__assert_fail@plt+0x86e0>
   132a4:	lsl	r2, r5, #3
   132a8:	sub	r1, r2, r5
   132ac:	ldr	r3, [pc, #84]	; 13308 <__assert_fail@plt+0x1be4>
   132b0:	sub	r2, r2, r5
   132b4:	add	r1, r3, r1, lsl #2
   132b8:	add	r3, r3, r2, lsl #2
   132bc:	ldr	ip, [r4, #16]
   132c0:	ldrb	r2, [r3, #24]
   132c4:	sub	ip, ip, #-1073741823	; 0xc0000001
   132c8:	cmp	r6, #0
   132cc:	str	r1, [r0, ip, lsl #2]
   132d0:	strne	r6, [r1, #12]
   132d4:	cmp	r2, #0
   132d8:	str	r0, [r4, #20]
   132dc:	bne	132f0 <__assert_fail@plt+0x1bcc>
   132e0:	mov	r2, #1
   132e4:	strb	r2, [r3, #24]
   132e8:	pop	{r4, r5, r6, pc}
   132ec:	bl	19ff0 <__assert_fail@plt+0x88cc>
   132f0:	ldr	r3, [pc, #20]	; 1330c <__assert_fail@plt+0x1be8>
   132f4:	mov	r2, #356	; 0x164
   132f8:	ldr	r1, [pc, #16]	; 13310 <__assert_fail@plt+0x1bec>
   132fc:	ldr	r0, [pc, #16]	; 13314 <__assert_fail@plt+0x1bf0>
   13300:	bl	11724 <__assert_fail@plt>
   13304:	andeq	r0, r3, r8, lsr r3
   13308:	andeq	r0, r3, r8, ror r1
   1330c:	ldrdeq	lr, [r1], -r8
   13310:	andeq	lr, r1, r4, asr r7
   13314:	andeq	lr, r1, r0, ror #14
   13318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1331c:	vpush	{d8-d11}
   13320:	mov	r8, r0
   13324:	ldr	r0, [pc, #1884]	; 13a88 <__assert_fail@plt+0x2364>
   13328:	mov	sl, r3
   1332c:	sub	sp, sp, #980	; 0x3d4
   13330:	ldr	r0, [r0]
   13334:	ldrb	r6, [sp, #1056]	; 0x420
   13338:	ldr	r3, [sp, #1048]	; 0x418
   1333c:	str	r1, [sp, #28]
   13340:	cmp	r6, #0
   13344:	str	r3, [sp, #16]
   13348:	str	r2, [sp, #32]
   1334c:	str	r0, [sp, #972]	; 0x3cc
   13350:	ldrb	r3, [sp, #1052]	; 0x41c
   13354:	ldr	r5, [sp, #1060]	; 0x424
   13358:	ldrb	r9, [sp, #1064]	; 0x428
   1335c:	beq	13370 <__assert_fail@plt+0x1c4c>
   13360:	ldr	r4, [pc, #1840]	; 13a98 <__assert_fail@plt+0x2374>
   13364:	ldrb	r2, [r4, #40]	; 0x28
   13368:	cmp	r2, #0
   1336c:	bne	13438 <__assert_fail@plt+0x1d14>
   13370:	cmp	r3, #0
   13374:	beq	13394 <__assert_fail@plt+0x1c70>
   13378:	ldr	r4, [pc, #1816]	; 13a98 <__assert_fail@plt+0x2374>
   1337c:	ldrb	r3, [r4, #41]	; 0x29
   13380:	cmp	r3, #0
   13384:	bne	13394 <__assert_fail@plt+0x1c70>
   13388:	ldrb	r3, [r4, #42]	; 0x2a
   1338c:	cmp	r3, #0
   13390:	beq	13438 <__assert_fail@plt+0x1d14>
   13394:	ldr	r0, [sp, #16]
   13398:	bl	12de8 <__assert_fail@plt+0x16c4>
   1339c:	cmp	r0, #0
   133a0:	beq	13438 <__assert_fail@plt+0x1d14>
   133a4:	ldr	r0, [sp, #16]
   133a8:	bl	12e4c <__assert_fail@plt+0x1728>
   133ac:	cmp	r0, #0
   133b0:	bne	13438 <__assert_fail@plt+0x1d14>
   133b4:	ldr	r2, [sp, #28]
   133b8:	clz	r7, r5
   133bc:	cmp	r2, #0
   133c0:	lsr	r7, r7, #5
   133c4:	movne	r3, r7
   133c8:	moveq	r3, #0
   133cc:	cmp	r3, #0
   133d0:	bne	13458 <__assert_fail@plt+0x1d34>
   133d4:	cmp	sl, #0
   133d8:	beq	13bc4 <__assert_fail@plt+0x24a0>
   133dc:	cmp	r5, #0
   133e0:	beq	13470 <__assert_fail@plt+0x1d4c>
   133e4:	mov	lr, r5
   133e8:	add	ip, sp, #88	; 0x58
   133ec:	ldm	lr!, {r0, r1, r2, r3}
   133f0:	add	r6, sp, #96	; 0x60
   133f4:	stmia	ip!, {r0, r1, r2, r3}
   133f8:	ldm	lr!, {r0, r1, r2, r3}
   133fc:	ldrd	r4, [r6]
   13400:	stmia	ip!, {r0, r1, r2, r3}
   13404:	ldm	lr!, {r0, r1, r2, r3}
   13408:	stmia	ip!, {r0, r1, r2, r3}
   1340c:	orrs	r3, r4, r5
   13410:	ldm	lr, {r0, r1}
   13414:	ldr	r4, [pc, #1660]	; 13a98 <__assert_fail@plt+0x2374>
   13418:	stm	ip, {r0, r1}
   1341c:	bne	134cc <__assert_fail@plt+0x1da8>
   13420:	ldrb	r3, [r4, #41]	; 0x29
   13424:	cmp	r3, #0
   13428:	bne	134cc <__assert_fail@plt+0x1da8>
   1342c:	ldrb	r3, [r4, #42]	; 0x2a
   13430:	cmp	r3, #0
   13434:	bne	134cc <__assert_fail@plt+0x1da8>
   13438:	ldr	r3, [pc, #1608]	; 13a88 <__assert_fail@plt+0x2364>
   1343c:	ldr	r2, [sp, #972]	; 0x3cc
   13440:	ldr	r3, [r3]
   13444:	cmp	r2, r3
   13448:	bne	13e88 <__assert_fail@plt+0x2764>
   1344c:	add	sp, sp, #980	; 0x3d4
   13450:	vpop	{d8-d11}
   13454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13458:	ldrb	r3, [r2]
   1345c:	cmp	r3, #47	; 0x2f
   13460:	bne	13438 <__assert_fail@plt+0x1d14>
   13464:	ldr	r3, [sp, #28]
   13468:	cmp	sl, #0
   1346c:	moveq	sl, r3
   13470:	add	r2, sp, #88	; 0x58
   13474:	mov	r1, r8
   13478:	mov	r0, sl
   1347c:	bl	1ae50 <__assert_fail@plt+0x972c>
   13480:	cmp	r0, #0
   13484:	bne	13b3c <__assert_fail@plt+0x2418>
   13488:	cmp	r9, #0
   1348c:	ldr	r4, [pc, #1540]	; 13a98 <__assert_fail@plt+0x2374>
   13490:	beq	13d44 <__assert_fail@plt+0x2620>
   13494:	ldrb	r3, [r4, #41]	; 0x29
   13498:	cmp	r3, #0
   1349c:	bne	13dac <__assert_fail@plt+0x2688>
   134a0:	add	r6, sp, #96	; 0x60
   134a4:	ldrd	r2, [r6]
   134a8:	orrs	r3, r2, r3
   134ac:	bne	134c4 <__assert_fail@plt+0x1da0>
   134b0:	ldrb	r3, [r4, #42]	; 0x2a
   134b4:	cmp	r3, #0
   134b8:	beq	13438 <__assert_fail@plt+0x1d14>
   134bc:	cmp	r5, #0
   134c0:	bne	134cc <__assert_fail@plt+0x1da8>
   134c4:	mov	r3, #1
   134c8:	strb	r3, [r4, #52]	; 0x34
   134cc:	bl	12eb8 <__assert_fail@plt+0x1794>
   134d0:	ldr	r3, [pc, #1484]	; 13aa4 <__assert_fail@plt+0x2380>
   134d4:	ldr	r1, [sp, #32]
   134d8:	cmp	r8, #0
   134dc:	movne	r0, r8
   134e0:	moveq	r0, r3
   134e4:	subs	r2, r1, #0
   134e8:	moveq	r2, r3
   134ec:	str	r2, [sp, #32]
   134f0:	bl	19fd4 <__assert_fail@plt+0x88b0>
   134f4:	cmp	r9, #0
   134f8:	mov	r5, r0
   134fc:	str	r0, [sp, #36]	; 0x24
   13500:	beq	13528 <__assert_fail@plt+0x1e04>
   13504:	bl	11550 <strlen@plt>
   13508:	cmp	r0, #36	; 0x24
   1350c:	bls	13528 <__assert_fail@plt+0x1e04>
   13510:	sub	r0, r0, #36	; 0x24
   13514:	add	r0, r5, r0
   13518:	ldr	r1, [pc, #1388]	; 13a8c <__assert_fail@plt+0x2368>
   1351c:	bl	11718 <strspn@plt>
   13520:	cmp	r0, #36	; 0x24
   13524:	beq	13ba0 <__assert_fail@plt+0x247c>
   13528:	ldrd	r2, [r6, #32]
   1352c:	ldr	r0, [sp, #16]
   13530:	ldr	r1, [pc, #1388]	; 13aa4 <__assert_fail@plt+0x2380>
   13534:	mov	r9, r3
   13538:	ldrd	sl, [r6, #40]	; 0x28
   1353c:	mvn	r3, #0
   13540:	cmp	r0, #0
   13544:	mov	r8, r2
   13548:	moveq	r0, r1
   1354c:	mvn	r2, #2
   13550:	cmp	r9, r3
   13554:	cmpeq	r8, r2
   13558:	mov	r1, r9
   1355c:	movls	r1, #1
   13560:	movhi	r1, #0
   13564:	cmp	fp, r3
   13568:	cmpeq	sl, r2
   1356c:	andls	r3, r1, #1
   13570:	movhi	r3, #0
   13574:	mvn	r1, #0
   13578:	str	r0, [sp, #16]
   1357c:	add	ip, sp, #256	; 0x100
   13580:	mvn	r0, #0
   13584:	mov	r2, #1
   13588:	cmp	r3, #0
   1358c:	mov	r3, #0
   13590:	strd	r0, [ip]
   13594:	mov	r1, #0
   13598:	strd	r8, [sp, #56]	; 0x38
   1359c:	strd	sl, [sp, #64]	; 0x40
   135a0:	strd	r8, [sp, #224]	; 0xe0
   135a4:	strd	sl, [sp, #248]	; 0xf8
   135a8:	strd	sl, [sp, #232]	; 0xe8
   135ac:	strd	r2, [sp, #216]	; 0xd8
   135b0:	strd	r2, [sp, #208]	; 0xd0
   135b4:	strb	r1, [sp, #240]	; 0xf0
   135b8:	strb	r1, [sp, #264]	; 0x108
   135bc:	bne	13a34 <__assert_fail@plt+0x2310>
   135c0:	ldrd	r8, [r6, #16]
   135c4:	ldrd	r0, [r6]
   135c8:	ldrb	ip, [sp, #120]	; 0x78
   135cc:	mvn	fp, #0
   135d0:	cmp	r9, fp
   135d4:	mvn	sl, #2
   135d8:	ldrd	r2, [r6, #8]
   135dc:	cmpeq	r8, sl
   135e0:	strd	r8, [sp, #48]	; 0x30
   135e4:	movhi	ip, #0
   135e8:	mov	r9, r1
   135ec:	mov	r8, r0
   135f0:	andls	ip, ip, #1
   135f4:	cmp	r1, fp
   135f8:	cmpeq	r0, sl
   135fc:	strd	r0, [sp, #72]	; 0x48
   13600:	strd	r8, [sp, #160]	; 0xa0
   13604:	movls	r1, #1
   13608:	movhi	r1, #0
   1360c:	ldrd	r8, [sp, #48]	; 0x30
   13610:	cmp	r3, fp
   13614:	cmpeq	r2, sl
   13618:	strd	r2, [sp, #40]	; 0x28
   1361c:	ldrd	r2, [r4, #32]
   13620:	movhi	r1, #0
   13624:	andls	r1, r1, #1
   13628:	cmp	r1, #0
   1362c:	mvn	r0, #0
   13630:	mvn	r1, #0
   13634:	strd	r8, [sp, #168]	; 0xa8
   13638:	ldrd	r8, [sp, #40]	; 0x28
   1363c:	strd	r2, [sp, #152]	; 0x98
   13640:	ldr	r2, [r6, #-4]
   13644:	ldr	r3, [r6, #-8]
   13648:	strd	r0, [sp, #192]	; 0xc0
   1364c:	mov	r1, #0
   13650:	strb	ip, [sp, #176]	; 0xb0
   13654:	strd	r8, [sp, #184]	; 0xb8
   13658:	str	r2, [sp, #148]	; 0x94
   1365c:	str	r3, [sp, #144]	; 0x90
   13660:	strb	r1, [sp, #200]	; 0xc8
   13664:	bne	13a00 <__assert_fail@plt+0x22dc>
   13668:	ldrb	r1, [r4, #53]	; 0x35
   1366c:	tst	r7, r1
   13670:	bne	13bd4 <__assert_fail@plt+0x24b0>
   13674:	ldr	r3, [r4, #16]
   13678:	cmp	r3, #0
   1367c:	beq	13768 <__assert_fail@plt+0x2044>
   13680:	vldr	d10, [pc, #992]	; 13a68 <__assert_fail@plt+0x2344>
   13684:	vldr	d9, [pc, #996]	; 13a70 <__assert_fail@plt+0x234c>
   13688:	vldr	d8, [pc, #1000]	; 13a78 <__assert_fail@plt+0x2354>
   1368c:	ldr	r2, [r4, #20]
   13690:	ldr	fp, [sp, #16]
   13694:	mov	sl, #0
   13698:	ldr	r2, [r2, sl, lsl #2]
   1369c:	lsl	r5, sl, #2
   136a0:	ldr	r3, [r2, #8]
   136a4:	cmp	r3, #1
   136a8:	beq	1386c <__assert_fail@plt+0x2148>
   136ac:	cmp	r3, #0
   136b0:	bne	1385c <__assert_fail@plt+0x2138>
   136b4:	add	ip, sp, #144	; 0x90
   136b8:	ldr	r3, [r2]
   136bc:	cmp	r3, #11
   136c0:	ldrls	pc, [pc, r3, lsl #2]
   136c4:	b	13e8c <__assert_fail@plt+0x2768>
   136c8:	andeq	r3, r1, ip, asr #16
   136cc:	andeq	r3, r1, ip, lsr r8
   136d0:	andeq	r3, r1, ip, lsl r8
   136d4:	andeq	r3, r1, r8, lsl #16
   136d8:	andeq	r3, r1, ip, lsr #15
   136dc:	andeq	r3, r1, ip, ror r7
   136e0:	andeq	r3, r1, ip, lsl r8
   136e4:	andeq	r3, r1, r8, lsl #16
   136e8:	andeq	r3, r1, ip, lsr #15
   136ec:	andeq	r3, r1, ip, ror r7
   136f0:	andeq	r3, r1, r4, ror r7
   136f4:	strdeq	r3, [r1], -r8
   136f8:	ldr	r0, [sp, #32]
   136fc:	bl	19fd4 <__assert_fail@plt+0x88b0>
   13700:	str	r0, [sp, #84]	; 0x54
   13704:	cmp	r0, #0
   13708:	beq	13e4c <__assert_fail@plt+0x2728>
   1370c:	bl	12f34 <__assert_fail@plt+0x1810>
   13710:	ldr	r3, [r4, #20]
   13714:	mov	r1, #0
   13718:	ldr	r0, [sp, #84]	; 0x54
   1371c:	ldr	r3, [r3, r5]
   13720:	ldr	r6, [r3, #16]
   13724:	bl	17390 <__assert_fail@plt+0x5c6c>
   13728:	cmp	r6, r0
   1372c:	bls	13874 <__assert_fail@plt+0x2150>
   13730:	ldr	r2, [r4, #20]
   13734:	ldr	r1, [r2, r5]
   13738:	ldr	r0, [r1, #16]
   1373c:	ldr	r3, [r4, #8]
   13740:	ldr	ip, [r4, #12]
   13744:	sub	r3, r3, #-1073741823	; 0xc0000001
   13748:	add	sl, sl, #1
   1374c:	ldr	r3, [ip, r3, lsl #2]
   13750:	ldr	ip, [r4, #16]
   13754:	str	r0, [r1, #16]
   13758:	ldr	r1, [sp, #84]	; 0x54
   1375c:	cmp	ip, sl
   13760:	str	r1, [r3, r5]
   13764:	bhi	13698 <__assert_fail@plt+0x1f74>
   13768:	ldr	r0, [sp, #36]	; 0x24
   1376c:	bl	11388 <free@plt>
   13770:	b	13438 <__assert_fail@plt+0x1d14>
   13774:	ldr	r0, [sp, #28]
   13778:	b	136fc <__assert_fail@plt+0x1fd8>
   1377c:	ldrd	r6, [ip, #48]	; 0x30
   13780:	mvn	r3, #0
   13784:	mvn	r2, #2
   13788:	cmp	r7, r3
   1378c:	cmpeq	r6, r2
   13790:	bls	138ac <__assert_fail@plt+0x2188>
   13794:	ldr	r0, [pc, #776]	; 13aa4 <__assert_fail@plt+0x2380>
   13798:	bl	113e8 <strdup@plt>
   1379c:	str	r0, [sp, #84]	; 0x54
   137a0:	cmp	r0, #0
   137a4:	bne	1370c <__assert_fail@plt+0x1fe8>
   137a8:	b	139c8 <__assert_fail@plt+0x22a4>
   137ac:	ldrb	r2, [ip, #32]
   137b0:	ldrd	r0, [ip, #24]
   137b4:	mvn	r6, #2
   137b8:	mvn	r7, #0
   137bc:	cmp	r1, r7
   137c0:	cmpeq	r0, r6
   137c4:	ldrd	r8, [ip]
   137c8:	ldrd	r6, [ip, #8]
   137cc:	bls	1388c <__assert_fail@plt+0x2168>
   137d0:	cmp	r2, #0
   137d4:	beq	13834 <__assert_fail@plt+0x2110>
   137d8:	ldr	r3, [r4, #28]
   137dc:	rsbs	r0, r0, #0
   137e0:	add	ip, sp, #316	; 0x13c
   137e4:	strd	r6, [sp, #8]
   137e8:	strd	r8, [sp]
   137ec:	rsc	r1, r1, #0
   137f0:	add	r2, ip, r2
   137f4:	bl	161b0 <__assert_fail@plt+0x4a8c>
   137f8:	mov	r3, #45	; 0x2d
   137fc:	strb	r3, [r0, #-1]
   13800:	sub	r0, r0, #1
   13804:	b	136fc <__assert_fail@plt+0x1fd8>
   13808:	ldrd	r0, [ip, #48]	; 0x30
   1380c:	mvn	r6, #2
   13810:	mvn	r7, #0
   13814:	ldrb	r2, [ip, #56]	; 0x38
   13818:	b	137bc <__assert_fail@plt+0x2098>
   1381c:	ldrd	r0, [ip, #16]
   13820:	mvn	r3, #0
   13824:	mvn	r2, #2
   13828:	cmp	r1, r3
   1382c:	cmpeq	r0, r2
   13830:	bls	139a0 <__assert_fail@plt+0x227c>
   13834:	ldr	r0, [pc, #616]	; 13aa4 <__assert_fail@plt+0x2380>
   13838:	b	136fc <__assert_fail@plt+0x1fd8>
   1383c:	mov	r0, fp
   13840:	bl	19fd4 <__assert_fail@plt+0x88b0>
   13844:	str	r0, [sp, #84]	; 0x54
   13848:	b	13704 <__assert_fail@plt+0x1fe0>
   1384c:	ldr	r0, [sp, #36]	; 0x24
   13850:	bl	19fd4 <__assert_fail@plt+0x88b0>
   13854:	str	r0, [sp, #84]	; 0x54
   13858:	b	13704 <__assert_fail@plt+0x1fe0>
   1385c:	cmp	r3, #2
   13860:	bne	13d98 <__assert_fail@plt+0x2674>
   13864:	mov	ip, #0
   13868:	b	136b8 <__assert_fail@plt+0x1f94>
   1386c:	add	ip, sp, #208	; 0xd0
   13870:	b	136b8 <__assert_fail@plt+0x1f94>
   13874:	mov	r1, #0
   13878:	ldr	r0, [sp, #84]	; 0x54
   1387c:	bl	17390 <__assert_fail@plt+0x5c6c>
   13880:	ldr	r2, [r4, #20]
   13884:	ldr	r1, [r2, r5]
   13888:	b	1373c <__assert_fail@plt+0x2018>
   1388c:	cmp	r2, #0
   13890:	ldr	r3, [r4, #28]
   13894:	bne	137dc <__assert_fail@plt+0x20b8>
   13898:	strd	r6, [sp, #8]
   1389c:	strd	r8, [sp]
   138a0:	add	r2, sp, #316	; 0x13c
   138a4:	bl	161b0 <__assert_fail@plt+0x4a8c>
   138a8:	b	136fc <__assert_fail@plt+0x1fd8>
   138ac:	ldrd	r8, [ip, #24]
   138b0:	cmp	r9, r3
   138b4:	cmpeq	r8, r2
   138b8:	bhi	13794 <__assert_fail@plt+0x2070>
   138bc:	ldrb	r2, [ip, #56]	; 0x38
   138c0:	ldrb	r3, [ip, #32]
   138c4:	cmp	r2, #0
   138c8:	bne	139e0 <__assert_fail@plt+0x22bc>
   138cc:	add	r1, pc, #428	; 0x1ac
   138d0:	ldrd	r0, [r1]
   138d4:	cmp	r7, r1
   138d8:	cmpeq	r6, r0
   138dc:	bhi	13900 <__assert_fail@plt+0x21dc>
   138e0:	adds	r0, r6, r8
   138e4:	adcs	r1, r7, r9
   138e8:	mov	ip, r2
   138ec:	strd	r0, [sp, #16]
   138f0:	ldrd	r0, [sp, #16]
   138f4:	movcs	r2, #1
   138f8:	orrs	r1, r0, r1
   138fc:	bne	13ac0 <__assert_fail@plt+0x239c>
   13900:	mov	r0, r6
   13904:	mov	r1, r7
   13908:	str	r3, [sp, #16]
   1390c:	bl	1e324 <__assert_fail@plt+0xcc00>
   13910:	ldr	r3, [sp, #16]
   13914:	vmov	d11, r0, r1
   13918:	cmp	r3, #0
   1391c:	beq	139cc <__assert_fail@plt+0x22a8>
   13920:	rsbs	r0, r8, #0
   13924:	rsc	r1, r9, #0
   13928:	bl	1e324 <__assert_fail@plt+0xcc00>
   1392c:	vmov	d7, r0, r1
   13930:	vneg.f64	d6, d7
   13934:	vadd.f64	d6, d11, d6
   13938:	vcmp.f64	d6, #0.0
   1393c:	vmrs	APSR_nzcv, fpscr
   13940:	beq	13794 <__assert_fail@plt+0x2070>
   13944:	vmul.f64	d11, d11, d9
   13948:	vdiv.f64	d7, d11, d6
   1394c:	vcvt.s32.f64	s12, d7
   13950:	vcvt.f64.s32	d6, s12
   13954:	vsub.f64	d5, d6, d8
   13958:	vcmpe.f64	d5, d7
   1395c:	vmrs	APSR_nzcv, fpscr
   13960:	bpl	13974 <__assert_fail@plt+0x2250>
   13964:	vadd.f64	d5, d6, d8
   13968:	vcmpe.f64	d5, d7
   1396c:	vmrs	APSR_nzcv, fpscr
   13970:	bge	13b28 <__assert_fail@plt+0x2404>
   13974:	vcmpe.f64	d7, #0.0
   13978:	vmrs	APSR_nzcv, fpscr
   1397c:	blt	13794 <__assert_fail@plt+0x2070>
   13980:	vmov	r2, r3, d7
   13984:	ldr	r1, [pc, #260]	; 13a90 <__assert_fail@plt+0x236c>
   13988:	add	r0, sp, #84	; 0x54
   1398c:	bl	1ab04 <__assert_fail@plt+0x93e0>
   13990:	cmn	r0, #1
   13994:	beq	139c0 <__assert_fail@plt+0x229c>
   13998:	ldr	r0, [sp, #84]	; 0x54
   1399c:	b	137a0 <__assert_fail@plt+0x207c>
   139a0:	ldrd	r6, [ip, #8]
   139a4:	ldr	r3, [r4, #28]
   139a8:	add	r2, sp, #316	; 0x13c
   139ac:	strd	r6, [sp, #8]
   139b0:	ldrd	r6, [ip]
   139b4:	strd	r6, [sp]
   139b8:	bl	161b0 <__assert_fail@plt+0x4a8c>
   139bc:	b	136fc <__assert_fail@plt+0x1fd8>
   139c0:	mov	r3, #0
   139c4:	str	r3, [sp, #84]	; 0x54
   139c8:	bl	19ff0 <__assert_fail@plt+0x88cc>
   139cc:	mov	r0, r8
   139d0:	mov	r1, r9
   139d4:	bl	1e324 <__assert_fail@plt+0xcc00>
   139d8:	vmov	d6, r0, r1
   139dc:	b	13934 <__assert_fail@plt+0x2210>
   139e0:	rsbs	r0, r6, #0
   139e4:	rsc	r1, r7, #0
   139e8:	str	r3, [sp, #16]
   139ec:	bl	1e324 <__assert_fail@plt+0xcc00>
   139f0:	ldr	r3, [sp, #16]
   139f4:	vmov	d7, r0, r1
   139f8:	vneg.f64	d11, d7
   139fc:	b	13918 <__assert_fail@plt+0x21f4>
   13a00:	ldrd	sl, [sp, #40]	; 0x28
   13a04:	ldrd	r8, [sp, #72]	; 0x48
   13a08:	mov	r1, fp
   13a0c:	subs	r5, r8, sl
   13a10:	sbc	lr, r9, fp
   13a14:	cmp	r9, fp
   13a18:	cmpeq	r8, sl
   13a1c:	movcc	r1, #1
   13a20:	movcs	r1, #0
   13a24:	str	r5, [sp, #192]	; 0xc0
   13a28:	str	lr, [sp, #196]	; 0xc4
   13a2c:	strb	r1, [sp, #200]	; 0xc8
   13a30:	b	13668 <__assert_fail@plt+0x1f44>
   13a34:	mov	r0, r8
   13a38:	subs	r3, r0, sl
   13a3c:	mov	r1, r9
   13a40:	sbc	r2, r1, fp
   13a44:	cmp	r1, fp
   13a48:	cmpeq	r0, sl
   13a4c:	str	r3, [sp, #256]	; 0x100
   13a50:	movcc	r3, #1
   13a54:	movcs	r3, #0
   13a58:	str	r2, [sp, #260]	; 0x104
   13a5c:	strb	r3, [sp, #264]	; 0x108
   13a60:	b	135c0 <__assert_fail@plt+0x1e9c>
   13a64:	nop			; (mov r0, r0)
	...
   13a74:	subsmi	r0, r9, r0
   13a78:	andeq	r0, r0, r0
   13a7c:	svccc	0x00f00000	; IMB
   13a80:			; <UNDEFINED> instruction: 0xf5c28f5c
   13a84:	addeq	r5, pc, #40, 24	; 0x2800
   13a88:	andeq	pc, r2, r8, lsl #30
   13a8c:	andeq	lr, r1, r4, ror r7
   13a90:	andeq	lr, r1, r0, lsr #15
   13a94:	andeq	pc, r1, r4, ror #12
   13a98:	andeq	r0, r3, r8, lsr r3
   13a9c:	andeq	r0, r0, r5, lsr r4
   13aa0:	andeq	lr, r1, ip, lsl #15
   13aa4:	andeq	lr, r1, r0, ror r7
   13aa8:	muleq	r0, pc, r4	; <UNPREDICTABLE>
   13aac:			; <UNDEFINED> instruction: 0x0001e7bc
   13ab0:	andeq	lr, r1, r4, ror #11
   13ab4:	muleq	r0, fp, r4
   13ab8:	andeq	lr, r1, r8, lsr #15
   13abc:	andeq	lr, r1, r4, asr r7
   13ac0:	orrs	r2, ip, r2
   13ac4:	movne	r2, #1
   13ac8:	moveq	r2, #0
   13acc:	cmp	r2, r3
   13ad0:	bne	13900 <__assert_fail@plt+0x21dc>
   13ad4:	adds	r3, r6, r6
   13ad8:	adc	r1, r7, r7
   13adc:	adds	r3, r3, r6
   13ae0:	adc	r0, r1, r7
   13ae4:	lsl	r2, r3, #5
   13ae8:	lsl	r1, r0, #5
   13aec:	orr	r1, r1, r3, lsr #27
   13af0:	adds	r3, r3, r2
   13af4:	adc	r1, r0, r1
   13af8:	adds	r0, r3, r6
   13afc:	adc	r1, r1, r7
   13b00:	ldrd	r2, [sp, #16]
   13b04:	bl	1e398 <__assert_fail@plt+0xcc74>
   13b08:	orrs	r3, r2, r3
   13b0c:	movne	r3, #1
   13b10:	moveq	r3, #0
   13b14:	adds	r0, r0, r3
   13b18:	adc	r1, r1, #0
   13b1c:	bl	1e324 <__assert_fail@plt+0xcc00>
   13b20:	vmov	d7, r0, r1
   13b24:	b	13974 <__assert_fail@plt+0x2250>
   13b28:	vcmpe.f64	d7, d6
   13b2c:	vmrs	APSR_nzcv, fpscr
   13b30:	vaddle.f64	d7, d6, d10
   13b34:	vmovgt.f64	d7, d5
   13b38:	b	13974 <__assert_fail@plt+0x2250>
   13b3c:	bl	11580 <__errno_location@plt>
   13b40:	cmp	r9, #0
   13b44:	ldr	r4, [r0]
   13b48:	beq	13d64 <__assert_fail@plt+0x2640>
   13b4c:	cmp	r4, #2
   13b50:	cmpne	r4, #13
   13b54:	bne	13d64 <__assert_fail@plt+0x2640>
   13b58:	ldr	r4, [pc, #-200]	; 13a98 <__assert_fail@plt+0x2374>
   13b5c:	ldrb	r3, [r4, #41]	; 0x29
   13b60:	cmp	r3, #0
   13b64:	beq	13438 <__assert_fail@plt+0x1d14>
   13b68:	mvn	r3, #0
   13b6c:	add	r6, sp, #96	; 0x60
   13b70:	mvn	r2, #0
   13b74:	mov	r1, #0
   13b78:	strd	r2, [r6, #40]	; 0x28
   13b7c:	strd	r2, [r6, #32]
   13b80:	strd	r2, [r6, #16]
   13b84:	strd	r2, [r6, #8]
   13b88:	strd	r2, [r6]
   13b8c:	strd	r2, [r6, #-8]
   13b90:	ldr	r3, [pc, #-244]	; 13aa4 <__assert_fail@plt+0x2380>
   13b94:	strb	r1, [sp, #120]	; 0x78
   13b98:	str	r3, [sp, #16]
   13b9c:	b	134c4 <__assert_fail@plt+0x1da0>
   13ba0:	mov	r1, #0
   13ba4:	ldr	r0, [sp, #36]	; 0x24
   13ba8:	bl	14680 <__assert_fail@plt+0x2f5c>
   13bac:	subs	r5, r0, #0
   13bb0:	beq	13528 <__assert_fail@plt+0x1e04>
   13bb4:	ldr	r0, [sp, #36]	; 0x24
   13bb8:	bl	11388 <free@plt>
   13bbc:	str	r5, [sp, #36]	; 0x24
   13bc0:	b	13528 <__assert_fail@plt+0x1e04>
   13bc4:	ldr	r3, [sp, #28]
   13bc8:	subs	sl, r3, #0
   13bcc:	moveq	sl, r8
   13bd0:	b	133dc <__assert_fail@plt+0x1cb8>
   13bd4:	ldrd	r6, [sp, #56]	; 0x38
   13bd8:	mvn	r1, #0
   13bdc:	mvn	r0, #2
   13be0:	cmp	r7, r1
   13be4:	cmpeq	r6, r0
   13be8:	bhi	13c04 <__assert_fail@plt+0x24e0>
   13bec:	ldr	r1, [r4, #96]	; 0x60
   13bf0:	ldr	r0, [r4, #100]	; 0x64
   13bf4:	adds	r1, r1, r6
   13bf8:	adc	r0, r0, r7
   13bfc:	str	r1, [r4, #96]	; 0x60
   13c00:	str	r0, [r4, #100]	; 0x64
   13c04:	ldrd	r6, [sp, #64]	; 0x40
   13c08:	mvn	r1, #0
   13c0c:	mvn	r0, #2
   13c10:	cmp	r7, r1
   13c14:	cmpeq	r6, r0
   13c18:	bhi	13c34 <__assert_fail@plt+0x2510>
   13c1c:	ldr	r1, [r4, #104]	; 0x68
   13c20:	ldr	r0, [r4, #108]	; 0x6c
   13c24:	adds	r1, r1, r6
   13c28:	adc	r0, r0, r7
   13c2c:	str	r1, [r4, #104]	; 0x68
   13c30:	str	r0, [r4, #108]	; 0x6c
   13c34:	ldrd	r8, [sp, #72]	; 0x48
   13c38:	mvn	r1, #0
   13c3c:	mvn	r0, #2
   13c40:	cmp	r9, r1
   13c44:	cmpeq	r8, r0
   13c48:	bhi	13c74 <__assert_fail@plt+0x2550>
   13c4c:	mul	r1, r3, r9
   13c50:	umull	r6, r7, r3, r8
   13c54:	mla	r1, r2, r8, r1
   13c58:	ldr	r0, [r4, #64]	; 0x40
   13c5c:	ldr	lr, [r4, #68]	; 0x44
   13c60:	add	r7, r1, r7
   13c64:	adds	r1, r0, r6
   13c68:	adc	r0, lr, r7
   13c6c:	str	r1, [r4, #64]	; 0x40
   13c70:	str	r0, [r4, #68]	; 0x44
   13c74:	ldrd	r6, [sp, #40]	; 0x28
   13c78:	mvn	r1, #0
   13c7c:	mvn	r0, #2
   13c80:	cmp	r7, r1
   13c84:	cmpeq	r6, r0
   13c88:	bhi	13cb4 <__assert_fail@plt+0x2590>
   13c8c:	mul	lr, r3, r7
   13c90:	umull	r0, r1, r3, r6
   13c94:	mla	lr, r2, r6, lr
   13c98:	ldr	r5, [r4, #72]	; 0x48
   13c9c:	add	r1, lr, r1
   13ca0:	ldr	lr, [r4, #76]	; 0x4c
   13ca4:	adds	r5, r5, r0
   13ca8:	adc	lr, lr, r1
   13cac:	str	r5, [r4, #72]	; 0x48
   13cb0:	str	lr, [r4, #76]	; 0x4c
   13cb4:	ldrd	r6, [sp, #48]	; 0x30
   13cb8:	mvn	r1, #0
   13cbc:	mvn	r0, #2
   13cc0:	cmp	r7, r1
   13cc4:	cmpeq	r6, r0
   13cc8:	bhi	13674 <__assert_fail@plt+0x1f50>
   13ccc:	mul	lr, r3, r7
   13cd0:	umull	r0, r1, r3, r6
   13cd4:	mla	r2, r2, r6, lr
   13cd8:	ldrb	lr, [r4, #88]	; 0x58
   13cdc:	add	r1, r2, r1
   13ce0:	ldrd	r6, [r4, #80]	; 0x50
   13ce4:	cmp	lr, ip
   13ce8:	beq	13e78 <__assert_fail@plt+0x2754>
   13cec:	cmp	lr, #0
   13cf0:	beq	13d00 <__assert_fail@plt+0x25dc>
   13cf4:	rsbs	r6, r6, #0
   13cf8:	rsc	r7, r7, #0
   13cfc:	strd	r6, [r4, #80]	; 0x50
   13d00:	cmp	ip, #0
   13d04:	beq	13d10 <__assert_fail@plt+0x25ec>
   13d08:	rsbs	r0, r0, #0
   13d0c:	rsc	r1, r1, #0
   13d10:	cmp	r1, r7
   13d14:	cmpeq	r0, r6
   13d18:	bcs	13e60 <__assert_fail@plt+0x273c>
   13d1c:	subs	r2, r6, r0
   13d20:	sbc	r3, r7, r1
   13d24:	strd	r2, [r4, #80]	; 0x50
   13d28:	cmp	lr, #0
   13d2c:	beq	13674 <__assert_fail@plt+0x1f50>
   13d30:	ldrd	r2, [r4, #80]	; 0x50
   13d34:	rsbs	r2, r2, #0
   13d38:	rsc	r3, r3, #0
   13d3c:	strd	r2, [r4, #80]	; 0x50
   13d40:	b	13674 <__assert_fail@plt+0x1f50>
   13d44:	add	r6, sp, #96	; 0x60
   13d48:	ldrd	r2, [r6]
   13d4c:	orrs	r3, r2, r3
   13d50:	bne	134c4 <__assert_fail@plt+0x1da0>
   13d54:	ldrb	r3, [r4, #41]	; 0x29
   13d58:	cmp	r3, #0
   13d5c:	bne	134c4 <__assert_fail@plt+0x1da0>
   13d60:	b	134b0 <__assert_fail@plt+0x1d8c>
   13d64:	mov	r2, sl
   13d68:	mov	r1, #3
   13d6c:	mov	r0, #0
   13d70:	bl	1944c <__assert_fail@plt+0x7d28>
   13d74:	ldr	r2, [pc, #-744]	; 13a94 <__assert_fail@plt+0x2370>
   13d78:	mov	r1, r4
   13d7c:	mov	r3, r0
   13d80:	mov	r0, #0
   13d84:	bl	114b4 <error@plt>
   13d88:	ldr	r3, [pc, #-760]	; 13a98 <__assert_fail@plt+0x2374>
   13d8c:	mov	r2, #1
   13d90:	str	r2, [r3, #44]	; 0x2c
   13d94:	b	13438 <__assert_fail@plt+0x1d14>
   13d98:	ldr	r3, [pc, #-752]	; 13ab0 <__assert_fail@plt+0x238c>
   13d9c:	ldr	r2, [pc, #-776]	; 13a9c <__assert_fail@plt+0x2378>
   13da0:	ldr	r1, [pc, #-748]	; 13abc <__assert_fail@plt+0x2398>
   13da4:	ldr	r0, [pc, #-780]	; 13aa0 <__assert_fail@plt+0x237c>
   13da8:	bl	11724 <__assert_fail@plt>
   13dac:	mov	r1, sl
   13db0:	add	r2, sp, #208	; 0xd0
   13db4:	mov	r0, #3
   13db8:	bl	116d0 <__xstat64@plt>
   13dbc:	cmp	r0, #0
   13dc0:	bne	13d44 <__assert_fail@plt+0x2620>
   13dc4:	ldr	r0, [r4, #48]	; 0x30
   13dc8:	ldrd	r2, [sp, #208]	; 0xd0
   13dcc:	cmp	r0, #0
   13dd0:	beq	13d44 <__assert_fail@plt+0x2620>
   13dd4:	add	r1, sp, #144	; 0x90
   13dd8:	strd	r2, [sp, #144]	; 0x90
   13ddc:	bl	15648 <__assert_fail@plt+0x3f24>
   13de0:	cmp	r0, #0
   13de4:	beq	13d44 <__assert_fail@plt+0x2620>
   13de8:	ldr	sl, [r0, #8]
   13dec:	cmp	sl, #0
   13df0:	beq	13d44 <__assert_fail@plt+0x2620>
   13df4:	mov	r1, r8
   13df8:	ldr	r0, [sl]
   13dfc:	bl	11358 <strcmp@plt>
   13e00:	cmp	r0, #0
   13e04:	beq	13d44 <__assert_fail@plt+0x2620>
   13e08:	ldrb	r3, [sl, #24]
   13e0c:	and	r6, r6, r3, lsr #1
   13e10:	ands	r1, r6, #1
   13e14:	add	r6, sp, #96	; 0x60
   13e18:	bne	13d48 <__assert_fail@plt+0x2624>
   13e1c:	mvn	r3, #0
   13e20:	mvn	r2, #0
   13e24:	strb	r1, [sp, #120]	; 0x78
   13e28:	strd	r2, [r6, #40]	; 0x28
   13e2c:	strd	r2, [r6, #32]
   13e30:	strd	r2, [r6, #16]
   13e34:	strd	r2, [r6, #8]
   13e38:	strd	r2, [r6]
   13e3c:	strd	r2, [r6, #-8]
   13e40:	ldr	r3, [pc, #-932]	; 13aa4 <__assert_fail@plt+0x2380>
   13e44:	str	r3, [sp, #16]
   13e48:	b	13d48 <__assert_fail@plt+0x2624>
   13e4c:	ldr	r3, [pc, #-932]	; 13ab0 <__assert_fail@plt+0x238c>
   13e50:	ldr	r2, [pc, #-944]	; 13aa8 <__assert_fail@plt+0x2384>
   13e54:	ldr	r1, [pc, #-928]	; 13abc <__assert_fail@plt+0x2398>
   13e58:	ldr	r0, [pc, #-948]	; 13aac <__assert_fail@plt+0x2388>
   13e5c:	bl	11724 <__assert_fail@plt>
   13e60:	subs	r2, r0, r6
   13e64:	sbc	r3, r1, r7
   13e68:	mov	lr, ip
   13e6c:	strb	ip, [r4, #88]	; 0x58
   13e70:	strd	r2, [r4, #80]	; 0x50
   13e74:	b	13d28 <__assert_fail@plt+0x2604>
   13e78:	adds	r2, r0, r6
   13e7c:	adc	r3, r1, r7
   13e80:	strd	r2, [r4, #80]	; 0x50
   13e84:	b	13674 <__assert_fail@plt+0x1f50>
   13e88:	bl	113f4 <__stack_chk_fail@plt>
   13e8c:	ldr	r3, [pc, #-996]	; 13ab0 <__assert_fail@plt+0x238c>
   13e90:	ldr	r2, [pc, #-996]	; 13ab4 <__assert_fail@plt+0x2390>
   13e94:	ldr	r1, [pc, #-992]	; 13abc <__assert_fail@plt+0x2398>
   13e98:	ldr	r0, [pc, #-1000]	; 13ab8 <__assert_fail@plt+0x2394>
   13e9c:	bl	11724 <__assert_fail@plt>
   13ea0:	ldr	r3, [pc, #872]	; 14210 <__assert_fail@plt+0x2aec>
   13ea4:	push	{r7, lr}
   13ea8:	sub	sp, sp, #64	; 0x40
   13eac:	ldr	r3, [r3]
   13eb0:	subs	r4, r0, #0
   13eb4:	str	r3, [sp, #60]	; 0x3c
   13eb8:	beq	13ef4 <__assert_fail@plt+0x27d0>
   13ebc:	ldr	r3, [pc, #848]	; 14214 <__assert_fail@plt+0x2af0>
   13ec0:	mov	r2, #5
   13ec4:	ldr	r1, [pc, #844]	; 14218 <__assert_fail@plt+0x2af4>
   13ec8:	mov	r0, #0
   13ecc:	ldr	r5, [r3]
   13ed0:	bl	113dc <dcgettext@plt>
   13ed4:	ldr	r3, [pc, #832]	; 1421c <__assert_fail@plt+0x2af8>
   13ed8:	mov	r1, #1
   13edc:	ldr	r3, [r3]
   13ee0:	mov	r2, r0
   13ee4:	mov	r0, r5
   13ee8:	bl	115d4 <__fprintf_chk@plt>
   13eec:	mov	r0, r4
   13ef0:	bl	11544 <exit@plt>
   13ef4:	mov	r2, #5
   13ef8:	ldr	r1, [pc, #800]	; 14220 <__assert_fail@plt+0x2afc>
   13efc:	bl	113dc <dcgettext@plt>
   13f00:	ldr	r3, [pc, #788]	; 1421c <__assert_fail@plt+0x2af8>
   13f04:	ldr	r5, [pc, #792]	; 14224 <__assert_fail@plt+0x2b00>
   13f08:	ldr	r2, [r3]
   13f0c:	mov	r1, r0
   13f10:	mov	r0, #1
   13f14:	bl	115b0 <__printf_chk@plt>
   13f18:	mov	r2, #5
   13f1c:	ldr	r1, [pc, #772]	; 14228 <__assert_fail@plt+0x2b04>
   13f20:	mov	r0, r4
   13f24:	bl	113dc <dcgettext@plt>
   13f28:	ldr	r1, [r5]
   13f2c:	bl	1131c <fputs_unlocked@plt>
   13f30:	mov	r2, #5
   13f34:	ldr	r1, [pc, #752]	; 1422c <__assert_fail@plt+0x2b08>
   13f38:	mov	r0, r4
   13f3c:	bl	113dc <dcgettext@plt>
   13f40:	ldr	r1, [r5]
   13f44:	bl	1131c <fputs_unlocked@plt>
   13f48:	mov	r2, #5
   13f4c:	ldr	r1, [pc, #732]	; 14230 <__assert_fail@plt+0x2b0c>
   13f50:	mov	r0, r4
   13f54:	bl	113dc <dcgettext@plt>
   13f58:	ldr	r1, [r5]
   13f5c:	bl	1131c <fputs_unlocked@plt>
   13f60:	mov	r2, #5
   13f64:	ldr	r1, [pc, #712]	; 14234 <__assert_fail@plt+0x2b10>
   13f68:	mov	r0, r4
   13f6c:	bl	113dc <dcgettext@plt>
   13f70:	ldr	r1, [r5]
   13f74:	bl	1131c <fputs_unlocked@plt>
   13f78:	mov	r2, #5
   13f7c:	ldr	r1, [pc, #692]	; 14238 <__assert_fail@plt+0x2b14>
   13f80:	mov	r0, r4
   13f84:	bl	113dc <dcgettext@plt>
   13f88:	ldr	r1, [r5]
   13f8c:	bl	1131c <fputs_unlocked@plt>
   13f90:	mov	r2, #5
   13f94:	ldr	r1, [pc, #672]	; 1423c <__assert_fail@plt+0x2b18>
   13f98:	mov	r0, r4
   13f9c:	bl	113dc <dcgettext@plt>
   13fa0:	ldr	r1, [r5]
   13fa4:	bl	1131c <fputs_unlocked@plt>
   13fa8:	mov	r2, #5
   13fac:	ldr	r1, [pc, #652]	; 14240 <__assert_fail@plt+0x2b1c>
   13fb0:	mov	r0, r4
   13fb4:	bl	113dc <dcgettext@plt>
   13fb8:	ldr	r1, [r5]
   13fbc:	bl	1131c <fputs_unlocked@plt>
   13fc0:	mov	r2, #5
   13fc4:	ldr	r1, [pc, #632]	; 14244 <__assert_fail@plt+0x2b20>
   13fc8:	mov	r0, r4
   13fcc:	bl	113dc <dcgettext@plt>
   13fd0:	ldr	r1, [r5]
   13fd4:	bl	1131c <fputs_unlocked@plt>
   13fd8:	mov	r2, #5
   13fdc:	ldr	r1, [pc, #612]	; 14248 <__assert_fail@plt+0x2b24>
   13fe0:	mov	r0, r4
   13fe4:	bl	113dc <dcgettext@plt>
   13fe8:	ldr	r1, [r5]
   13fec:	bl	1131c <fputs_unlocked@plt>
   13ff0:	mov	r2, #5
   13ff4:	ldr	r1, [pc, #592]	; 1424c <__assert_fail@plt+0x2b28>
   13ff8:	mov	r0, r4
   13ffc:	bl	113dc <dcgettext@plt>
   14000:	ldr	r2, [pc, #584]	; 14250 <__assert_fail@plt+0x2b2c>
   14004:	mov	r1, r0
   14008:	mov	r0, #1
   1400c:	bl	115b0 <__printf_chk@plt>
   14010:	mov	r2, #5
   14014:	ldr	r1, [pc, #568]	; 14254 <__assert_fail@plt+0x2b30>
   14018:	mov	r0, r4
   1401c:	bl	113dc <dcgettext@plt>
   14020:	ldr	r1, [r5]
   14024:	bl	1131c <fputs_unlocked@plt>
   14028:	mov	r2, #5
   1402c:	ldr	r1, [pc, #548]	; 14258 <__assert_fail@plt+0x2b34>
   14030:	mov	r0, r4
   14034:	bl	113dc <dcgettext@plt>
   14038:	ldr	r1, [r5]
   1403c:	bl	1131c <fputs_unlocked@plt>
   14040:	ldr	lr, [pc, #532]	; 1425c <__assert_fail@plt+0x2b38>
   14044:	add	ip, sp, #4
   14048:	ldm	lr!, {r0, r1, r2, r3}
   1404c:	stmia	ip!, {r0, r1, r2, r3}
   14050:	ldm	lr!, {r0, r1, r2, r3}
   14054:	ldr	r6, [sp, #4]
   14058:	stmia	ip!, {r0, r1, r2, r3}
   1405c:	cmp	r6, #0
   14060:	ldm	lr!, {r0, r1, r2, r3}
   14064:	addeq	r5, sp, #4
   14068:	stmia	ip!, {r0, r1, r2, r3}
   1406c:	ldm	lr, {r0, r1}
   14070:	stm	ip, {r0, r1}
   14074:	beq	140a4 <__assert_fail@plt+0x2980>
   14078:	ldr	r7, [pc, #480]	; 14260 <__assert_fail@plt+0x2b3c>
   1407c:	add	r5, sp, #4
   14080:	b	14090 <__assert_fail@plt+0x296c>
   14084:	ldr	r6, [r5, #8]!
   14088:	cmp	r6, #0
   1408c:	beq	140a4 <__assert_fail@plt+0x2980>
   14090:	mov	r1, r6
   14094:	mov	r0, r7
   14098:	bl	11358 <strcmp@plt>
   1409c:	cmp	r0, #0
   140a0:	bne	14084 <__assert_fail@plt+0x2960>
   140a4:	ldr	r5, [r5, #4]
   140a8:	mov	r2, #5
   140ac:	cmp	r5, #0
   140b0:	ldr	r1, [pc, #428]	; 14264 <__assert_fail@plt+0x2b40>
   140b4:	beq	1415c <__assert_fail@plt+0x2a38>
   140b8:	mov	r0, #0
   140bc:	bl	113dc <dcgettext@plt>
   140c0:	ldr	r3, [pc, #416]	; 14268 <__assert_fail@plt+0x2b44>
   140c4:	ldr	r2, [pc, #416]	; 1426c <__assert_fail@plt+0x2b48>
   140c8:	mov	r1, r0
   140cc:	mov	r0, #1
   140d0:	bl	115b0 <__printf_chk@plt>
   140d4:	mov	r1, #0
   140d8:	mov	r0, #5
   140dc:	bl	11628 <setlocale@plt>
   140e0:	cmp	r0, #0
   140e4:	ldreq	r6, [pc, #372]	; 14260 <__assert_fail@plt+0x2b3c>
   140e8:	beq	14104 <__assert_fail@plt+0x29e0>
   140ec:	mov	r2, #3
   140f0:	ldr	r1, [pc, #376]	; 14270 <__assert_fail@plt+0x2b4c>
   140f4:	bl	116dc <strncmp@plt>
   140f8:	ldr	r6, [pc, #352]	; 14260 <__assert_fail@plt+0x2b3c>
   140fc:	cmp	r0, #0
   14100:	bne	141ec <__assert_fail@plt+0x2ac8>
   14104:	mov	r2, #5
   14108:	ldr	r1, [pc, #356]	; 14274 <__assert_fail@plt+0x2b50>
   1410c:	mov	r0, #0
   14110:	bl	113dc <dcgettext@plt>
   14114:	ldr	r3, [pc, #324]	; 14260 <__assert_fail@plt+0x2b3c>
   14118:	ldr	r2, [pc, #328]	; 14268 <__assert_fail@plt+0x2b44>
   1411c:	mov	r1, r0
   14120:	mov	r0, #1
   14124:	bl	115b0 <__printf_chk@plt>
   14128:	mov	r2, #5
   1412c:	ldr	r1, [pc, #324]	; 14278 <__assert_fail@plt+0x2b54>
   14130:	mov	r0, #0
   14134:	bl	113dc <dcgettext@plt>
   14138:	ldr	r2, [pc, #316]	; 1427c <__assert_fail@plt+0x2b58>
   1413c:	cmp	r5, r6
   14140:	ldr	r3, [pc, #312]	; 14280 <__assert_fail@plt+0x2b5c>
   14144:	movne	r3, r2
   14148:	mov	r1, r0
   1414c:	mov	r2, r5
   14150:	mov	r0, #1
   14154:	bl	115b0 <__printf_chk@plt>
   14158:	b	13eec <__assert_fail@plt+0x27c8>
   1415c:	mov	r0, r5
   14160:	bl	113dc <dcgettext@plt>
   14164:	ldr	r3, [pc, #252]	; 14268 <__assert_fail@plt+0x2b44>
   14168:	ldr	r2, [pc, #252]	; 1426c <__assert_fail@plt+0x2b48>
   1416c:	mov	r1, r0
   14170:	mov	r0, #1
   14174:	bl	115b0 <__printf_chk@plt>
   14178:	mov	r1, r5
   1417c:	mov	r0, #5
   14180:	bl	11628 <setlocale@plt>
   14184:	cmp	r0, #0
   14188:	beq	141a0 <__assert_fail@plt+0x2a7c>
   1418c:	mov	r2, #3
   14190:	ldr	r1, [pc, #216]	; 14270 <__assert_fail@plt+0x2b4c>
   14194:	bl	116dc <strncmp@plt>
   14198:	cmp	r0, #0
   1419c:	bne	141e4 <__assert_fail@plt+0x2ac0>
   141a0:	mov	r2, #5
   141a4:	ldr	r1, [pc, #200]	; 14274 <__assert_fail@plt+0x2b50>
   141a8:	mov	r0, #0
   141ac:	bl	113dc <dcgettext@plt>
   141b0:	ldr	r3, [pc, #168]	; 14260 <__assert_fail@plt+0x2b3c>
   141b4:	ldr	r2, [pc, #172]	; 14268 <__assert_fail@plt+0x2b44>
   141b8:	mov	r5, r3
   141bc:	mov	r1, r0
   141c0:	mov	r0, #1
   141c4:	bl	115b0 <__printf_chk@plt>
   141c8:	ldr	r1, [pc, #168]	; 14278 <__assert_fail@plt+0x2b54>
   141cc:	mov	r2, #5
   141d0:	mov	r0, #0
   141d4:	bl	113dc <dcgettext@plt>
   141d8:	ldr	r3, [pc, #160]	; 14280 <__assert_fail@plt+0x2b5c>
   141dc:	mov	r1, r0
   141e0:	b	1414c <__assert_fail@plt+0x2a28>
   141e4:	ldr	r6, [pc, #116]	; 14260 <__assert_fail@plt+0x2b3c>
   141e8:	mov	r5, r6
   141ec:	mov	r2, #5
   141f0:	ldr	r1, [pc, #140]	; 14284 <__assert_fail@plt+0x2b60>
   141f4:	mov	r0, #0
   141f8:	bl	113dc <dcgettext@plt>
   141fc:	ldr	r2, [pc, #92]	; 14260 <__assert_fail@plt+0x2b3c>
   14200:	mov	r1, r0
   14204:	mov	r0, #1
   14208:	bl	115b0 <__printf_chk@plt>
   1420c:	b	14104 <__assert_fail@plt+0x29e0>
   14210:	andeq	pc, r2, r8, lsl #30
   14214:	andeq	r0, r3, r8, lsr #6
   14218:	ldrdeq	lr, [r1], -r0
   1421c:			; <UNDEFINED> instruction: 0x000303b8
   14220:	strdeq	lr, [r1], -r8
   14224:	andeq	r0, r3, ip, lsr #6
   14228:	andeq	lr, r1, ip, lsl r8
   1422c:	andeq	lr, r1, r0, lsl #17
   14230:	andeq	lr, r1, ip, asr #17
   14234:	andeq	lr, r1, r8, ror #20
   14238:	andeq	lr, r1, r8, ror #22
   1423c:	andeq	lr, r1, r4, ror ip
   14240:	strdeq	lr, [r1], -r8
   14244:	ldrdeq	lr, [r1], -r8
   14248:	andeq	lr, r1, r8, lsl #28
   1424c:	andeq	lr, r1, r0, asr #28
   14250:	andeq	lr, r1, r0, lsr #30
   14254:	andeq	lr, r1, r4, lsr #30
   14258:	andeq	lr, r1, r0, asr #31
   1425c:	andeq	lr, r1, ip, ror #11
   14260:	andeq	lr, r1, ip, asr #15
   14264:	muleq	r1, ip, r0
   14268:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1426c:	ldrdeq	pc, [r1], -ip
   14270:	andeq	pc, r1, ip, ror #1
   14274:	andeq	pc, r1, r8, lsr r1	; <UNPREDICTABLE>
   14278:	andeq	pc, r1, r8, asr r1	; <UNPREDICTABLE>
   1427c:	andeq	pc, r1, ip, asr #13
   14280:	strdeq	pc, [r1], -r4
   14284:	strdeq	pc, [r1], -r0
   14288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1428c:	sub	sp, sp, #12
   14290:	bl	19fd4 <__assert_fail@plt+0x88b0>
   14294:	ldr	r8, [pc, #280]	; 143b4 <__assert_fail@plt+0x2c90>
   14298:	ldr	sl, [pc, #280]	; 143b8 <__assert_fail@plt+0x2c94>
   1429c:	ldr	r9, [pc, #280]	; 143bc <__assert_fail@plt+0x2c98>
   142a0:	mov	r5, r0
   142a4:	str	r0, [sp, #4]
   142a8:	mov	r1, #44	; 0x2c
   142ac:	mov	r0, r5
   142b0:	bl	1155c <strchr@plt>
   142b4:	ldr	fp, [pc, #248]	; 143b4 <__assert_fail@plt+0x2c90>
   142b8:	mov	r4, #0
   142bc:	subs	r7, r0, #0
   142c0:	movne	r3, #0
   142c4:	strbne	r3, [r7], #1
   142c8:	mov	r1, r5
   142cc:	ldr	r0, [fp, #4]
   142d0:	bl	11358 <strcmp@plt>
   142d4:	subs	r6, r0, #0
   142d8:	beq	14324 <__assert_fail@plt+0x2c00>
   142dc:	add	r4, r4, #1
   142e0:	cmp	r4, #12
   142e4:	add	fp, fp, #28
   142e8:	bne	142c8 <__assert_fail@plt+0x2ba4>
   142ec:	mov	r2, #5
   142f0:	ldr	r1, [pc, #200]	; 143c0 <__assert_fail@plt+0x2c9c>
   142f4:	mov	r0, #0
   142f8:	bl	113dc <dcgettext@plt>
   142fc:	mov	r4, r0
   14300:	mov	r0, r5
   14304:	bl	19618 <__assert_fail@plt+0x7ef4>
   14308:	mov	r1, #0
   1430c:	mov	r2, r4
   14310:	mov	r3, r0
   14314:	mov	r0, r1
   14318:	bl	114b4 <error@plt>
   1431c:	mov	r0, #1
   14320:	bl	13ea0 <__assert_fail@plt+0x277c>
   14324:	rsb	r5, r4, r4, lsl #3
   14328:	add	r5, r8, r5, lsl #2
   1432c:	ldrb	r3, [r5, #24]
   14330:	cmp	r3, #0
   14334:	bne	1439c <__assert_fail@plt+0x2c78>
   14338:	sub	r3, r4, #2
   1433c:	cmp	r3, #2
   14340:	ldrls	pc, [pc, r3, lsl #2]
   14344:	b	1438c <__assert_fail@plt+0x2c68>
   14348:	andeq	r4, r1, r4, asr r3
   1434c:	andeq	r4, r1, ip, lsl #7
   14350:	andeq	r4, r1, ip, ror r3
   14354:	mov	r1, r9
   14358:	mov	r0, #2
   1435c:	bl	13264 <__assert_fail@plt+0x1b40>
   14360:	cmp	r7, #0
   14364:	mov	r5, r7
   14368:	bne	142a8 <__assert_fail@plt+0x2b84>
   1436c:	ldr	r0, [sp, #4]
   14370:	add	sp, sp, #12
   14374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14378:	b	11388 <free@plt>
   1437c:	mov	r1, sl
   14380:	mov	r0, #4
   14384:	bl	13264 <__assert_fail@plt+0x1b40>
   14388:	b	14360 <__assert_fail@plt+0x2c3c>
   1438c:	mov	r0, r4
   14390:	mov	r1, #0
   14394:	bl	13264 <__assert_fail@plt+0x1b40>
   14398:	b	14360 <__assert_fail@plt+0x2c3c>
   1439c:	mov	r2, #5
   143a0:	ldr	r1, [pc, #28]	; 143c4 <__assert_fail@plt+0x2ca0>
   143a4:	bl	113dc <dcgettext@plt>
   143a8:	mov	r4, r0
   143ac:	ldr	r0, [r5, #4]
   143b0:	b	14304 <__assert_fail@plt+0x2be0>
   143b4:	andeq	r0, r3, r8, ror r1
   143b8:	andeq	pc, r1, r4, asr #3
   143bc:			; <UNDEFINED> instruction: 0x0001f1bc
   143c0:	andeq	pc, r1, ip, asr #3
   143c4:	andeq	pc, r1, ip, lsl #3
   143c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   143cc:	add	fp, sp, #28
   143d0:	ldr	r7, [pc, #648]	; 14660 <__assert_fail@plt+0x2f3c>
   143d4:	sub	sp, sp, #224	; 0xe0
   143d8:	ldr	r3, [r7]
   143dc:	mov	r8, r0
   143e0:	sub	r0, fp, #252	; 0xfc
   143e4:	mov	r9, r1
   143e8:	str	r3, [fp, #-32]	; 0xffffffe0
   143ec:	bl	197bc <__assert_fail@plt+0x8098>
   143f0:	mov	r4, r0
   143f4:	bl	11580 <__errno_location@plt>
   143f8:	cmp	r4, #0
   143fc:	mov	r6, r0
   14400:	bne	1460c <__assert_fail@plt+0x2ee8>
   14404:	ldr	r3, [r9, #16]
   14408:	and	r3, r3, #61440	; 0xf000
   1440c:	cmp	r3, #16384	; 0x4000
   14410:	beq	14564 <__assert_fail@plt+0x2e40>
   14414:	mov	r0, r8
   14418:	bl	14d8c <__assert_fail@plt+0x3668>
   1441c:	mov	r5, r0
   14420:	bl	11550 <strlen@plt>
   14424:	mov	r1, r5
   14428:	add	r3, r0, #8
   1442c:	bic	r3, r3, #7
   14430:	sub	sp, sp, r3
   14434:	add	r2, r0, #1
   14438:	mov	r0, sp
   1443c:	bl	113a0 <memcpy@plt>
   14440:	mov	r8, r0
   14444:	mov	r0, r5
   14448:	bl	11388 <free@plt>
   1444c:	mov	r0, r8
   14450:	bl	11424 <chdir@plt>
   14454:	cmp	r0, #0
   14458:	blt	14588 <__assert_fail@plt+0x2e64>
   1445c:	sub	r5, fp, #244	; 0xf4
   14460:	mov	r2, r5
   14464:	ldr	r1, [pc, #504]	; 14664 <__assert_fail@plt+0x2f40>
   14468:	mov	r0, #3
   1446c:	bl	116d0 <__xstat64@plt>
   14470:	cmp	r0, #0
   14474:	blt	145c4 <__assert_fail@plt+0x2ea0>
   14478:	ldr	r4, [pc, #488]	; 14668 <__assert_fail@plt+0x2f44>
   1447c:	b	144c8 <__assert_fail@plt+0x2da4>
   14480:	ldrd	r0, [fp, #-140]	; 0xffffff74
   14484:	ldrd	r2, [fp, #-244]	; 0xffffff0c
   14488:	cmp	r1, r3
   1448c:	cmpeq	r0, r2
   14490:	bne	14520 <__assert_fail@plt+0x2dfc>
   14494:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   14498:	ldrd	r2, [fp, #-148]	; 0xffffff6c
   1449c:	cmp	r1, r3
   144a0:	cmpeq	r0, r2
   144a4:	beq	14520 <__assert_fail@plt+0x2dfc>
   144a8:	mov	r0, r4
   144ac:	bl	11424 <chdir@plt>
   144b0:	cmp	r0, #0
   144b4:	blt	14600 <__assert_fail@plt+0x2edc>
   144b8:	mov	r2, #104	; 0x68
   144bc:	sub	r1, fp, #140	; 0x8c
   144c0:	mov	r0, r5
   144c4:	bl	113a0 <memcpy@plt>
   144c8:	sub	r2, fp, #140	; 0x8c
   144cc:	mov	r1, r4
   144d0:	mov	r0, #3
   144d4:	bl	116d0 <__xstat64@plt>
   144d8:	cmp	r0, #0
   144dc:	bge	14480 <__assert_fail@plt+0x2d5c>
   144e0:	ldr	r1, [pc, #388]	; 1466c <__assert_fail@plt+0x2f48>
   144e4:	mov	r2, #5
   144e8:	mov	r0, #0
   144ec:	ldr	r4, [r6]
   144f0:	bl	113dc <dcgettext@plt>
   144f4:	ldr	r1, [pc, #364]	; 14668 <__assert_fail@plt+0x2f44>
   144f8:	mov	r5, r0
   144fc:	mov	r0, #4
   14500:	bl	19370 <__assert_fail@plt+0x7c4c>
   14504:	mov	r1, r4
   14508:	mov	r2, r5
   1450c:	mov	r4, #0
   14510:	mov	r3, r0
   14514:	mov	r0, #0
   14518:	bl	114b4 <error@plt>
   1451c:	b	14528 <__assert_fail@plt+0x2e04>
   14520:	bl	1a030 <__assert_fail@plt+0x890c>
   14524:	mov	r4, r0
   14528:	sub	r0, fp, #252	; 0xfc
   1452c:	ldr	r5, [r6]
   14530:	bl	19810 <__assert_fail@plt+0x80ec>
   14534:	cmp	r0, #0
   14538:	bne	1463c <__assert_fail@plt+0x2f18>
   1453c:	sub	r0, fp, #252	; 0xfc
   14540:	bl	1982c <__assert_fail@plt+0x8108>
   14544:	str	r5, [r6]
   14548:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1454c:	ldr	r3, [r7]
   14550:	mov	r0, r4
   14554:	cmp	r2, r3
   14558:	bne	14638 <__assert_fail@plt+0x2f14>
   1455c:	sub	sp, fp, #28
   14560:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14564:	sub	r5, fp, #244	; 0xf4
   14568:	mov	r1, r9
   1456c:	mov	r2, #104	; 0x68
   14570:	mov	r0, r5
   14574:	bl	113a0 <memcpy@plt>
   14578:	mov	r0, r8
   1457c:	bl	11424 <chdir@plt>
   14580:	cmp	r0, #0
   14584:	bge	14478 <__assert_fail@plt+0x2d54>
   14588:	mov	r2, #5
   1458c:	ldr	r1, [pc, #220]	; 14670 <__assert_fail@plt+0x2f4c>
   14590:	mov	r0, r4
   14594:	ldr	r5, [r6]
   14598:	bl	113dc <dcgettext@plt>
   1459c:	mov	r1, r8
   145a0:	mov	r6, r0
   145a4:	mov	r0, #4
   145a8:	bl	19370 <__assert_fail@plt+0x7c4c>
   145ac:	mov	r2, r6
   145b0:	mov	r1, r5
   145b4:	mov	r3, r0
   145b8:	mov	r0, r4
   145bc:	bl	114b4 <error@plt>
   145c0:	b	14548 <__assert_fail@plt+0x2e24>
   145c4:	mov	r2, #5
   145c8:	ldr	r1, [pc, #164]	; 14674 <__assert_fail@plt+0x2f50>
   145cc:	mov	r0, r4
   145d0:	ldr	r5, [r6]
   145d4:	bl	113dc <dcgettext@plt>
   145d8:	mov	r1, r8
   145dc:	mov	r9, r0
   145e0:	mov	r0, #4
   145e4:	bl	19370 <__assert_fail@plt+0x7c4c>
   145e8:	mov	r2, r9
   145ec:	mov	r1, r5
   145f0:	mov	r3, r0
   145f4:	mov	r0, r4
   145f8:	bl	114b4 <error@plt>
   145fc:	b	14528 <__assert_fail@plt+0x2e04>
   14600:	mov	r2, #5
   14604:	ldr	r1, [pc, #100]	; 14670 <__assert_fail@plt+0x2f4c>
   14608:	b	144e8 <__assert_fail@plt+0x2dc4>
   1460c:	ldr	r4, [r0]
   14610:	mov	r2, #5
   14614:	ldr	r1, [pc, #92]	; 14678 <__assert_fail@plt+0x2f54>
   14618:	mov	r0, #0
   1461c:	bl	113dc <dcgettext@plt>
   14620:	mov	r1, r4
   14624:	mov	r4, #0
   14628:	mov	r2, r0
   1462c:	mov	r0, #0
   14630:	bl	114b4 <error@plt>
   14634:	b	14548 <__assert_fail@plt+0x2e24>
   14638:	bl	113f4 <__stack_chk_fail@plt>
   1463c:	mov	r2, #5
   14640:	ldr	r1, [pc, #52]	; 1467c <__assert_fail@plt+0x2f58>
   14644:	mov	r0, #0
   14648:	ldr	r4, [r6]
   1464c:	bl	113dc <dcgettext@plt>
   14650:	mov	r1, r4
   14654:	mov	r2, r0
   14658:	mov	r0, #1
   1465c:	bl	114b4 <error@plt>
   14660:	andeq	pc, r2, r8, lsl #30
   14664:	ldrdeq	pc, [r1], -r8
   14668:	andeq	pc, r1, r4, lsl #12
   1466c:	andeq	pc, r1, r8, lsl #12
   14670:			; <UNDEFINED> instruction: 0x0001f5b8
   14674:	ldrdeq	pc, [r1], -ip
   14678:	muleq	r1, r8, r5
   1467c:	andeq	pc, r1, r8, lsl r6	; <UNPREDICTABLE>
   14680:	ldr	r2, [pc, #1524]	; 14c7c <__assert_fail@plt+0x3558>
   14684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14688:	and	r9, r1, #3
   1468c:	sub	sp, sp, #148	; 0x94
   14690:	sub	r3, r9, #1
   14694:	ldr	r2, [r2]
   14698:	ands	r3, r3, r9
   1469c:	str	r3, [sp, #28]
   146a0:	str	r2, [sp, #140]	; 0x8c
   146a4:	bne	14b60 <__assert_fail@plt+0x343c>
   146a8:	cmp	r0, #0
   146ac:	beq	14bac <__assert_fail@plt+0x3488>
   146b0:	ldrb	r5, [r0]
   146b4:	cmp	r5, #0
   146b8:	beq	14b74 <__assert_fail@plt+0x3450>
   146bc:	cmp	r5, #47	; 0x2f
   146c0:	mov	r4, r1
   146c4:	str	r0, [sp, #8]
   146c8:	beq	14878 <__assert_fail@plt+0x3154>
   146cc:	bl	1a030 <__assert_fail@plt+0x890c>
   146d0:	subs	r8, r0, #0
   146d4:	beq	14920 <__assert_fail@plt+0x31fc>
   146d8:	bl	11550 <strlen@plt>
   146dc:	ldr	r3, [sp, #8]
   146e0:	cmp	r0, #4096	; 0x1000
   146e4:	mov	r6, r0
   146e8:	bcc	14b88 <__assert_fail@plt+0x3464>
   146ec:	add	r6, r8, r0
   146f0:	mov	r7, r6
   146f4:	mov	r2, #0
   146f8:	str	r2, [sp, #16]
   146fc:	str	r2, [sp, #24]
   14700:	mov	sl, r2
   14704:	ldrb	r2, [r3]
   14708:	and	r1, r4, #4
   1470c:	str	r1, [sp, #8]
   14710:	str	r3, [sp, #20]
   14714:	cmp	r2, #0
   14718:	beq	148c4 <__assert_fail@plt+0x31a0>
   1471c:	cmp	r2, #47	; 0x2f
   14720:	movne	r1, r2
   14724:	bne	1473c <__assert_fail@plt+0x3018>
   14728:	ldrb	r1, [r3, #1]!
   1472c:	cmp	r1, #47	; 0x2f
   14730:	beq	14728 <__assert_fail@plt+0x3004>
   14734:	cmp	r1, #0
   14738:	beq	148c4 <__assert_fail@plt+0x31a0>
   1473c:	mov	r4, r3
   14740:	b	14748 <__assert_fail@plt+0x3024>
   14744:	mov	r4, r5
   14748:	ldrb	r2, [r4, #1]
   1474c:	add	r5, r4, #1
   14750:	cmp	r2, #0
   14754:	cmpne	r2, #47	; 0x2f
   14758:	bne	14744 <__assert_fail@plt+0x3020>
   1475c:	cmp	r5, r3
   14760:	beq	148c4 <__assert_fail@plt+0x31a0>
   14764:	sub	fp, r5, r3
   14768:	cmp	fp, #1
   1476c:	beq	148b4 <__assert_fail@plt+0x3190>
   14770:	cmp	r1, #46	; 0x2e
   14774:	cmpeq	fp, #2
   14778:	beq	14a30 <__assert_fail@plt+0x330c>
   1477c:	ldrb	r2, [r6, #-1]
   14780:	cmp	r2, #47	; 0x2f
   14784:	movne	r2, #47	; 0x2f
   14788:	strbne	r2, [r6], #1
   1478c:	add	r2, r6, fp
   14790:	cmp	r7, r2
   14794:	bhi	147d4 <__assert_fail@plt+0x30b0>
   14798:	ldr	r2, [pc, #1248]	; 14c80 <__assert_fail@plt+0x355c>
   1479c:	sub	r7, r7, r8
   147a0:	cmp	fp, r2
   147a4:	addgt	r7, r7, #1
   147a8:	addgt	r7, fp, r7
   147ac:	addle	r7, r7, #4096	; 0x1000
   147b0:	mov	r0, r8
   147b4:	mov	r1, r7
   147b8:	str	r3, [sp, #12]
   147bc:	bl	19e04 <__assert_fail@plt+0x86e0>
   147c0:	sub	r6, r6, r8
   147c4:	ldr	r3, [sp, #12]
   147c8:	mov	r8, r0
   147cc:	add	r7, r0, r7
   147d0:	add	r6, r0, r6
   147d4:	mov	r1, r3
   147d8:	mov	r0, r6
   147dc:	mov	r2, fp
   147e0:	bl	113a0 <memcpy@plt>
   147e4:	ldr	r2, [sp, #8]
   147e8:	sub	r3, r9, #2
   147ec:	cmp	r2, #0
   147f0:	clz	r3, r3
   147f4:	lsr	r3, r3, #5
   147f8:	moveq	r3, #0
   147fc:	cmp	r3, #0
   14800:	strb	sl, [r0, fp]
   14804:	add	r6, r0, fp
   14808:	bne	14858 <__assert_fail@plt+0x3134>
   1480c:	ldr	r3, [sp, #8]
   14810:	add	fp, sp, #32
   14814:	cmp	r3, #0
   14818:	mov	r2, fp
   1481c:	mov	r1, r8
   14820:	mov	r0, #3
   14824:	beq	14940 <__assert_fail@plt+0x321c>
   14828:	bl	116d0 <__xstat64@plt>
   1482c:	adds	r0, r0, #0
   14830:	movne	r0, #1
   14834:	cmp	r0, #0
   14838:	beq	14898 <__assert_fail@plt+0x3174>
   1483c:	bl	11580 <__errno_location@plt>
   14840:	cmp	r9, #0
   14844:	mov	fp, r0
   14848:	ldr	r3, [r0]
   1484c:	beq	14aa8 <__assert_fail@plt+0x3384>
   14850:	cmp	r9, #1
   14854:	beq	14a84 <__assert_fail@plt+0x3360>
   14858:	str	sl, [sp, #48]	; 0x30
   1485c:	ldrb	r3, [r5]
   14860:	cmp	r3, #0
   14864:	cmpne	r9, #2
   14868:	bne	14c60 <__assert_fail@plt+0x353c>
   1486c:	ldrb	r2, [r5]
   14870:	mov	r3, r5
   14874:	b	14714 <__assert_fail@plt+0x2ff0>
   14878:	mov	r0, #4096	; 0x1000
   1487c:	bl	19da8 <__assert_fail@plt+0x8684>
   14880:	ldr	r3, [sp, #8]
   14884:	mov	r6, r0
   14888:	mov	r8, r0
   1488c:	add	r7, r0, #4096	; 0x1000
   14890:	strb	r5, [r6], #1
   14894:	b	146f4 <__assert_fail@plt+0x2fd0>
   14898:	ldr	r3, [sp, #48]	; 0x30
   1489c:	and	r3, r3, #61440	; 0xf000
   148a0:	cmp	r3, #40960	; 0xa000
   148a4:	beq	14950 <__assert_fail@plt+0x322c>
   148a8:	cmp	r3, #16384	; 0x4000
   148ac:	beq	1486c <__assert_fail@plt+0x3148>
   148b0:	b	1485c <__assert_fail@plt+0x3138>
   148b4:	cmp	r1, #46	; 0x2e
   148b8:	bne	1477c <__assert_fail@plt+0x3058>
   148bc:	mov	r3, r5
   148c0:	b	14714 <__assert_fail@plt+0x2ff0>
   148c4:	add	r3, r8, #1
   148c8:	cmp	r6, r3
   148cc:	bls	148dc <__assert_fail@plt+0x31b8>
   148d0:	ldrb	r3, [r6, #-1]
   148d4:	cmp	r3, #47	; 0x2f
   148d8:	beq	14c10 <__assert_fail@plt+0x34ec>
   148dc:	add	r3, r6, #1
   148e0:	cmp	r7, r3
   148e4:	mov	r3, #0
   148e8:	strb	r3, [r6]
   148ec:	beq	14904 <__assert_fail@plt+0x31e0>
   148f0:	sub	r1, r6, r8
   148f4:	mov	r0, r8
   148f8:	add	r1, r1, #1
   148fc:	bl	19e04 <__assert_fail@plt+0x86e0>
   14900:	mov	r8, r0
   14904:	ldr	r0, [sp, #24]
   14908:	bl	11388 <free@plt>
   1490c:	ldr	r3, [sp, #16]
   14910:	cmp	r3, #0
   14914:	beq	14920 <__assert_fail@plt+0x31fc>
   14918:	mov	r0, r3
   1491c:	bl	15b00 <__assert_fail@plt+0x43dc>
   14920:	ldr	r3, [pc, #852]	; 14c7c <__assert_fail@plt+0x3558>
   14924:	ldr	r2, [sp, #140]	; 0x8c
   14928:	mov	r0, r8
   1492c:	ldr	r3, [r3]
   14930:	cmp	r2, r3
   14934:	bne	14c78 <__assert_fail@plt+0x3554>
   14938:	add	sp, sp, #148	; 0x94
   1493c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14940:	bl	11700 <__lxstat64@plt>
   14944:	adds	r0, r0, #0
   14948:	movne	r0, #1
   1494c:	b	14834 <__assert_fail@plt+0x3110>
   14950:	ldr	r3, [sp, #16]
   14954:	cmp	r3, #0
   14958:	beq	14b10 <__assert_fail@plt+0x33ec>
   1495c:	mov	r2, fp
   14960:	ldrd	r0, [sp, #16]
   14964:	bl	14f68 <__assert_fail@plt+0x3844>
   14968:	cmp	r0, #0
   1496c:	bne	14a1c <__assert_fail@plt+0x32f8>
   14970:	mov	r2, fp
   14974:	ldrd	r0, [sp, #16]
   14978:	bl	14f00 <__assert_fail@plt+0x37dc>
   1497c:	ldr	r1, [sp, #80]	; 0x50
   14980:	mov	r0, r8
   14984:	bl	1b910 <__assert_fail@plt+0xa1ec>
   14988:	subs	fp, r0, #0
   1498c:	beq	14bc8 <__assert_fail@plt+0x34a4>
   14990:	bl	11550 <strlen@plt>
   14994:	mov	r4, r0
   14998:	mov	r0, r5
   1499c:	bl	11550 <strlen@plt>
   149a0:	ldr	r3, [sp, #28]
   149a4:	cmp	r3, #0
   149a8:	add	r3, r4, r0
   149ac:	mov	r2, r0
   149b0:	add	r3, r3, #1
   149b4:	beq	14b3c <__assert_fail@plt+0x3418>
   149b8:	ldr	r1, [sp, #28]
   149bc:	cmp	r3, r1
   149c0:	bhi	14be8 <__assert_fail@plt+0x34c4>
   149c4:	mov	r1, r5
   149c8:	ldr	r5, [sp, #24]
   149cc:	add	r2, r2, #1
   149d0:	add	r0, r5, r4
   149d4:	bl	1137c <memmove@plt>
   149d8:	mov	r2, r4
   149dc:	mov	r1, fp
   149e0:	mov	r0, r5
   149e4:	bl	113a0 <memcpy@plt>
   149e8:	ldrb	r3, [fp]
   149ec:	add	r2, r8, #1
   149f0:	cmp	r3, #47	; 0x2f
   149f4:	strbeq	r3, [r8]
   149f8:	moveq	r6, r2
   149fc:	str	r0, [sp, #20]
   14a00:	beq	14a0c <__assert_fail@plt+0x32e8>
   14a04:	cmp	r6, r2
   14a08:	bhi	14c1c <__assert_fail@plt+0x34f8>
   14a0c:	mov	r0, fp
   14a10:	bl	11388 <free@plt>
   14a14:	ldr	r5, [sp, #20]
   14a18:	b	1486c <__assert_fail@plt+0x3148>
   14a1c:	cmp	r9, #2
   14a20:	bne	14ad0 <__assert_fail@plt+0x33ac>
   14a24:	ldrb	r2, [r4, #1]
   14a28:	mov	r3, r5
   14a2c:	b	14714 <__assert_fail@plt+0x2ff0>
   14a30:	ldrb	r1, [r3, #1]
   14a34:	cmp	r1, #46	; 0x2e
   14a38:	bne	1477c <__assert_fail@plt+0x3058>
   14a3c:	add	r3, r8, #1
   14a40:	cmp	r6, r3
   14a44:	bls	148bc <__assert_fail@plt+0x3198>
   14a48:	sub	r1, r6, #1
   14a4c:	cmp	r8, r1
   14a50:	bcs	14c54 <__assert_fail@plt+0x3530>
   14a54:	ldrb	r3, [r6, #-2]
   14a58:	cmp	r3, #47	; 0x2f
   14a5c:	beq	14c54 <__assert_fail@plt+0x3530>
   14a60:	sub	r3, r6, #2
   14a64:	cmp	r3, r8
   14a68:	mov	r6, r3
   14a6c:	beq	148bc <__assert_fail@plt+0x3198>
   14a70:	ldrb	r1, [r3, #-1]
   14a74:	sub	r3, r3, #1
   14a78:	cmp	r1, #47	; 0x2f
   14a7c:	beq	148bc <__assert_fail@plt+0x3198>
   14a80:	b	14a64 <__assert_fail@plt+0x3340>
   14a84:	ldr	r1, [pc, #504]	; 14c84 <__assert_fail@plt+0x3560>
   14a88:	mov	r0, r5
   14a8c:	str	r3, [sp, #12]
   14a90:	bl	11718 <strspn@plt>
   14a94:	ldr	r3, [sp, #12]
   14a98:	ldrb	r2, [r5, r0]
   14a9c:	cmp	r3, #2
   14aa0:	cmpeq	r2, #0
   14aa4:	beq	14a24 <__assert_fail@plt+0x3300>
   14aa8:	ldr	r0, [sp, #24]
   14aac:	str	r3, [sp, #8]
   14ab0:	bl	11388 <free@plt>
   14ab4:	mov	r0, r8
   14ab8:	bl	11388 <free@plt>
   14abc:	ldr	r3, [sp, #16]
   14ac0:	cmp	r3, #0
   14ac4:	ldr	r3, [sp, #8]
   14ac8:	beq	14b04 <__assert_fail@plt+0x33e0>
   14acc:	b	14af4 <__assert_fail@plt+0x33d0>
   14ad0:	bl	11580 <__errno_location@plt>
   14ad4:	mov	r3, #40	; 0x28
   14ad8:	mov	fp, r0
   14adc:	ldr	r0, [sp, #24]
   14ae0:	str	r3, [sp, #8]
   14ae4:	bl	11388 <free@plt>
   14ae8:	mov	r0, r8
   14aec:	bl	11388 <free@plt>
   14af0:	ldr	r3, [sp, #8]
   14af4:	ldr	r0, [sp, #16]
   14af8:	str	r3, [sp, #8]
   14afc:	bl	15b00 <__assert_fail@plt+0x43dc>
   14b00:	ldr	r3, [sp, #8]
   14b04:	str	r3, [fp]
   14b08:	mov	r8, #0
   14b0c:	b	14920 <__assert_fail@plt+0x31fc>
   14b10:	ldr	r3, [pc, #368]	; 14c88 <__assert_fail@plt+0x3564>
   14b14:	ldr	r1, [sp, #16]
   14b18:	str	r3, [sp]
   14b1c:	ldr	r2, [pc, #360]	; 14c8c <__assert_fail@plt+0x3568>
   14b20:	ldr	r3, [pc, #360]	; 14c90 <__assert_fail@plt+0x356c>
   14b24:	mov	r0, #7
   14b28:	bl	15900 <__assert_fail@plt+0x41dc>
   14b2c:	subs	r3, r0, #0
   14b30:	str	r3, [sp, #16]
   14b34:	bne	1495c <__assert_fail@plt+0x3238>
   14b38:	bl	19ff0 <__assert_fail@plt+0x88cc>
   14b3c:	cmp	r3, #4096	; 0x1000
   14b40:	movcc	r3, #4096	; 0x1000
   14b44:	str	r0, [sp, #12]
   14b48:	mov	r0, r3
   14b4c:	str	r3, [sp, #28]
   14b50:	bl	19da8 <__assert_fail@plt+0x8684>
   14b54:	ldr	r2, [sp, #12]
   14b58:	str	r0, [sp, #24]
   14b5c:	b	149c4 <__assert_fail@plt+0x32a0>
   14b60:	bl	11580 <__errno_location@plt>
   14b64:	mov	r3, #22
   14b68:	mov	r8, #0
   14b6c:	str	r3, [r0]
   14b70:	b	14920 <__assert_fail@plt+0x31fc>
   14b74:	bl	11580 <__errno_location@plt>
   14b78:	mov	r3, #2
   14b7c:	mov	r8, r5
   14b80:	str	r3, [r0]
   14b84:	b	14920 <__assert_fail@plt+0x31fc>
   14b88:	mov	r0, r8
   14b8c:	mov	r1, #4096	; 0x1000
   14b90:	str	r3, [sp, #8]
   14b94:	bl	19e04 <__assert_fail@plt+0x86e0>
   14b98:	ldr	r3, [sp, #8]
   14b9c:	mov	r8, r0
   14ba0:	add	r6, r0, r6
   14ba4:	add	r7, r0, #4096	; 0x1000
   14ba8:	b	146f4 <__assert_fail@plt+0x2fd0>
   14bac:	str	r0, [sp, #8]
   14bb0:	bl	11580 <__errno_location@plt>
   14bb4:	ldr	r3, [sp, #8]
   14bb8:	mov	r2, #22
   14bbc:	mov	r8, r3
   14bc0:	str	r2, [r0]
   14bc4:	b	14920 <__assert_fail@plt+0x31fc>
   14bc8:	bl	11580 <__errno_location@plt>
   14bcc:	cmp	r9, #2
   14bd0:	mov	fp, r0
   14bd4:	ldr	r3, [r0]
   14bd8:	bne	14adc <__assert_fail@plt+0x33b8>
   14bdc:	cmp	r3, #12
   14be0:	bne	14a24 <__assert_fail@plt+0x3300>
   14be4:	b	14adc <__assert_fail@plt+0x33b8>
   14be8:	str	r0, [sp, #20]
   14bec:	mov	r1, r3
   14bf0:	ldr	r0, [sp, #24]
   14bf4:	str	r3, [sp, #12]
   14bf8:	bl	19e04 <__assert_fail@plt+0x86e0>
   14bfc:	ldr	r3, [sp, #12]
   14c00:	ldr	r2, [sp, #20]
   14c04:	str	r3, [sp, #28]
   14c08:	str	r0, [sp, #24]
   14c0c:	b	149c4 <__assert_fail@plt+0x32a0>
   14c10:	mov	r3, r6
   14c14:	sub	r6, r6, #1
   14c18:	b	148e0 <__assert_fail@plt+0x31bc>
   14c1c:	sub	r3, r6, #1
   14c20:	cmp	r8, r3
   14c24:	bcs	14c70 <__assert_fail@plt+0x354c>
   14c28:	ldrb	r2, [r6, #-2]
   14c2c:	cmp	r2, #47	; 0x2f
   14c30:	beq	14c70 <__assert_fail@plt+0x354c>
   14c34:	sub	r3, r6, #2
   14c38:	cmp	r3, r8
   14c3c:	mov	r6, r3
   14c40:	beq	14a0c <__assert_fail@plt+0x32e8>
   14c44:	ldrb	r2, [r3, #-1]!
   14c48:	cmp	r2, #47	; 0x2f
   14c4c:	beq	14a0c <__assert_fail@plt+0x32e8>
   14c50:	b	14c38 <__assert_fail@plt+0x3514>
   14c54:	mov	r3, r5
   14c58:	mov	r6, r1
   14c5c:	b	14714 <__assert_fail@plt+0x2ff0>
   14c60:	bl	11580 <__errno_location@plt>
   14c64:	mov	r3, #20
   14c68:	mov	fp, r0
   14c6c:	b	14aa8 <__assert_fail@plt+0x3384>
   14c70:	mov	r6, r3
   14c74:	b	14a0c <__assert_fail@plt+0x32e8>
   14c78:	bl	113f4 <__stack_chk_fail@plt>
   14c7c:	andeq	pc, r2, r8, lsl #30
   14c80:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14c84:	andeq	pc, r1, r0, asr r6	; <UNPREDICTABLE>
   14c88:	muleq	r1, r0, r1
   14c8c:	andeq	r6, r1, ip, lsr #1
   14c90:	andeq	r6, r1, r4, asr #2
   14c94:	ldr	r3, [pc, #4]	; 14ca0 <__assert_fail@plt+0x357c>
   14c98:	str	r0, [r3]
   14c9c:	bx	lr
   14ca0:			; <UNDEFINED> instruction: 0x000303b0
   14ca4:	ldr	r3, [pc, #4]	; 14cb0 <__assert_fail@plt+0x358c>
   14ca8:	strb	r0, [r3, #4]
   14cac:	bx	lr
   14cb0:			; <UNDEFINED> instruction: 0x000303b0
   14cb4:	ldr	r3, [pc, #180]	; 14d70 <__assert_fail@plt+0x364c>
   14cb8:	push	{r4, r5, r6, lr}
   14cbc:	sub	sp, sp, #8
   14cc0:	ldr	r0, [r3]
   14cc4:	bl	1bce8 <__assert_fail@plt+0xa5c4>
   14cc8:	cmp	r0, #0
   14ccc:	beq	14cf4 <__assert_fail@plt+0x35d0>
   14cd0:	bl	11580 <__errno_location@plt>
   14cd4:	ldr	r5, [pc, #152]	; 14d74 <__assert_fail@plt+0x3650>
   14cd8:	ldrb	r3, [r5, #4]
   14cdc:	cmp	r3, #0
   14ce0:	mov	r4, r0
   14ce4:	beq	14d10 <__assert_fail@plt+0x35ec>
   14ce8:	ldr	r3, [r0]
   14cec:	cmp	r3, #32
   14cf0:	bne	14d10 <__assert_fail@plt+0x35ec>
   14cf4:	ldr	r3, [pc, #124]	; 14d78 <__assert_fail@plt+0x3654>
   14cf8:	ldr	r0, [r3]
   14cfc:	bl	1bce8 <__assert_fail@plt+0xa5c4>
   14d00:	cmp	r0, #0
   14d04:	bne	14d50 <__assert_fail@plt+0x362c>
   14d08:	add	sp, sp, #8
   14d0c:	pop	{r4, r5, r6, pc}
   14d10:	mov	r2, #5
   14d14:	ldr	r1, [pc, #96]	; 14d7c <__assert_fail@plt+0x3658>
   14d18:	mov	r0, #0
   14d1c:	bl	113dc <dcgettext@plt>
   14d20:	mov	r6, r0
   14d24:	ldr	r0, [r5]
   14d28:	cmp	r0, #0
   14d2c:	beq	14d5c <__assert_fail@plt+0x3638>
   14d30:	ldr	r4, [r4]
   14d34:	bl	19438 <__assert_fail@plt+0x7d14>
   14d38:	mov	r1, r4
   14d3c:	str	r6, [sp]
   14d40:	ldr	r2, [pc, #56]	; 14d80 <__assert_fail@plt+0x365c>
   14d44:	mov	r3, r0
   14d48:	mov	r0, #0
   14d4c:	bl	114b4 <error@plt>
   14d50:	ldr	r3, [pc, #44]	; 14d84 <__assert_fail@plt+0x3660>
   14d54:	ldr	r0, [r3]
   14d58:	bl	11394 <_exit@plt>
   14d5c:	mov	r3, r6
   14d60:	ldr	r1, [r4]
   14d64:	ldr	r2, [pc, #28]	; 14d88 <__assert_fail@plt+0x3664>
   14d68:	bl	114b4 <error@plt>
   14d6c:	b	14d50 <__assert_fail@plt+0x362c>
   14d70:	andeq	r0, r3, ip, lsr #6
   14d74:			; <UNDEFINED> instruction: 0x000303b0
   14d78:	andeq	r0, r3, r8, lsr #6
   14d7c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   14d80:	andeq	pc, r1, r0, ror #12
   14d84:	andeq	r0, r3, ip, asr #5
   14d88:	andeq	pc, r1, r4, ror #12
   14d8c:	push	{r4, lr}
   14d90:	bl	14e08 <__assert_fail@plt+0x36e4>
   14d94:	cmp	r0, #0
   14d98:	popne	{r4, pc}
   14d9c:	bl	19ff0 <__assert_fail@plt+0x88cc>
   14da0:	push	{r4, r5, r6, lr}
   14da4:	mov	r4, r0
   14da8:	ldrb	ip, [r0]
   14dac:	sub	r5, ip, #47	; 0x2f
   14db0:	bl	14e60 <__assert_fail@plt+0x373c>
   14db4:	clz	r5, r5
   14db8:	lsr	r5, r5, #5
   14dbc:	sub	r0, r0, r4
   14dc0:	cmp	r0, r5
   14dc4:	popls	{r4, r5, r6, pc}
   14dc8:	add	r3, r4, r0
   14dcc:	ldrb	r3, [r3, #-1]
   14dd0:	cmp	r3, #47	; 0x2f
   14dd4:	popne	{r4, r5, r6, pc}
   14dd8:	sub	r0, r0, #2
   14ddc:	sub	ip, r4, #1
   14de0:	add	r3, r4, r0
   14de4:	add	ip, ip, r5
   14de8:	rsb	r2, r4, #1
   14dec:	cmp	r3, ip
   14df0:	add	r0, r2, r3
   14df4:	popeq	{r4, r5, r6, pc}
   14df8:	ldrb	r1, [r3], #-1
   14dfc:	cmp	r1, #47	; 0x2f
   14e00:	beq	14dec <__assert_fail@plt+0x36c8>
   14e04:	pop	{r4, r5, r6, pc}
   14e08:	push	{r4, r5, r6, lr}
   14e0c:	mov	r6, r0
   14e10:	bl	14da0 <__assert_fail@plt+0x367c>
   14e14:	add	r3, r0, #1
   14e18:	mov	r4, r0
   14e1c:	cmp	r0, #0
   14e20:	movne	r0, r3
   14e24:	addeq	r0, r3, #1
   14e28:	bl	114e4 <malloc@plt>
   14e2c:	subs	r5, r0, #0
   14e30:	beq	14e58 <__assert_fail@plt+0x3734>
   14e34:	mov	r2, r4
   14e38:	mov	r1, r6
   14e3c:	bl	113a0 <memcpy@plt>
   14e40:	cmp	r4, #0
   14e44:	moveq	r3, #46	; 0x2e
   14e48:	moveq	r4, #1
   14e4c:	strbeq	r3, [r5]
   14e50:	mov	r3, #0
   14e54:	strb	r3, [r5, r4]
   14e58:	mov	r0, r5
   14e5c:	pop	{r4, r5, r6, pc}
   14e60:	ldrb	r3, [r0]
   14e64:	cmp	r3, #47	; 0x2f
   14e68:	bne	14e78 <__assert_fail@plt+0x3754>
   14e6c:	ldrb	r3, [r0, #1]!
   14e70:	cmp	r3, #47	; 0x2f
   14e74:	beq	14e6c <__assert_fail@plt+0x3748>
   14e78:	cmp	r3, #0
   14e7c:	bxeq	lr
   14e80:	mov	r2, r0
   14e84:	mov	r1, #0
   14e88:	cmp	r3, #47	; 0x2f
   14e8c:	moveq	r1, #1
   14e90:	beq	14ea0 <__assert_fail@plt+0x377c>
   14e94:	cmp	r1, #0
   14e98:	movne	r0, r2
   14e9c:	movne	r1, #0
   14ea0:	ldrb	r3, [r2, #1]!
   14ea4:	cmp	r3, #0
   14ea8:	bne	14e88 <__assert_fail@plt+0x3764>
   14eac:	bx	lr
   14eb0:	push	{r4, lr}
   14eb4:	mov	r4, r0
   14eb8:	bl	11550 <strlen@plt>
   14ebc:	cmp	r0, #1
   14ec0:	popls	{r4, pc}
   14ec4:	add	r2, r4, r0
   14ec8:	mov	r3, r0
   14ecc:	ldrb	r2, [r2, #-1]
   14ed0:	cmp	r2, #47	; 0x2f
   14ed4:	subeq	r3, r0, #2
   14ed8:	addeq	r3, r4, r3
   14edc:	rsbeq	r1, r4, #1
   14ee0:	popne	{r4, pc}
   14ee4:	cmp	r3, r4
   14ee8:	add	r0, r1, r3
   14eec:	popeq	{r4, pc}
   14ef0:	ldrb	r2, [r3], #-1
   14ef4:	cmp	r2, #47	; 0x2f
   14ef8:	popne	{r4, pc}
   14efc:	b	14ee4 <__assert_fail@plt+0x37c0>
   14f00:	push	{r4, r5, r6, r7, r8, lr}
   14f04:	subs	r8, r0, #0
   14f08:	popeq	{r4, r5, r6, r7, r8, pc}
   14f0c:	mov	r0, #24
   14f10:	mov	r4, r1
   14f14:	mov	r7, r2
   14f18:	bl	19da8 <__assert_fail@plt+0x8684>
   14f1c:	mov	r6, r0
   14f20:	mov	r0, r4
   14f24:	bl	19fd4 <__assert_fail@plt+0x88b0>
   14f28:	ldrd	r4, [r7, #96]	; 0x60
   14f2c:	ldrd	r2, [r7]
   14f30:	mov	r1, r6
   14f34:	strd	r4, [r6, #8]
   14f38:	strd	r2, [r6, #16]
   14f3c:	str	r0, [r6]
   14f40:	mov	r0, r8
   14f44:	bl	15f2c <__assert_fail@plt+0x4808>
   14f48:	cmp	r0, #0
   14f4c:	beq	14f64 <__assert_fail@plt+0x3840>
   14f50:	cmp	r6, r0
   14f54:	popeq	{r4, r5, r6, r7, r8, pc}
   14f58:	mov	r0, r6
   14f5c:	pop	{r4, r5, r6, r7, r8, lr}
   14f60:	b	16190 <__assert_fail@plt+0x4a6c>
   14f64:	bl	19ff0 <__assert_fail@plt+0x88cc>
   14f68:	push	{r4, r5, r6, lr}
   14f6c:	sub	sp, sp, #32
   14f70:	ldr	r6, [pc, #80]	; 14fc8 <__assert_fail@plt+0x38a4>
   14f74:	subs	r3, r0, #0
   14f78:	moveq	r0, r3
   14f7c:	ldr	ip, [r6]
   14f80:	str	ip, [sp, #28]
   14f84:	beq	14fac <__assert_fail@plt+0x3888>
   14f88:	ldrd	r4, [r2, #96]	; 0x60
   14f8c:	ldrd	r2, [r2]
   14f90:	str	r1, [sp]
   14f94:	mov	r1, sp
   14f98:	strd	r4, [sp, #8]
   14f9c:	strd	r2, [sp, #16]
   14fa0:	bl	15648 <__assert_fail@plt+0x3f24>
   14fa4:	adds	r0, r0, #0
   14fa8:	movne	r0, #1
   14fac:	ldr	r2, [sp, #28]
   14fb0:	ldr	r3, [r6]
   14fb4:	cmp	r2, r3
   14fb8:	bne	14fc4 <__assert_fail@plt+0x38a0>
   14fbc:	add	sp, sp, #32
   14fc0:	pop	{r4, r5, r6, pc}
   14fc4:	bl	113f4 <__stack_chk_fail@plt>
   14fc8:	andeq	pc, r2, r8, lsl #30
   14fcc:	andeq	r0, r0, r0
   14fd0:	cmp	r0, #10
   14fd4:	movcc	r0, #10
   14fd8:	push	{r4, r5, r6, r7, r8, lr}
   14fdc:	orr	r7, r0, #1
   14fe0:	cmn	r7, #1
   14fe4:	beq	1505c <__assert_fail@plt+0x3938>
   14fe8:	ldr	r8, [pc, #116]	; 15064 <__assert_fail@plt+0x3940>
   14fec:	umull	r2, r3, r8, r7
   14ff0:	cmp	r7, #9
   14ff4:	lsr	r3, r3, #1
   14ff8:	add	r3, r3, r3, lsl #1
   14ffc:	sub	r3, r7, r3
   15000:	bls	15048 <__assert_fail@plt+0x3924>
   15004:	cmp	r3, #0
   15008:	beq	15050 <__assert_fail@plt+0x392c>
   1500c:	mov	r6, #16
   15010:	mov	r5, #9
   15014:	mov	r4, #3
   15018:	b	15028 <__assert_fail@plt+0x3904>
   1501c:	cmp	r1, #0
   15020:	add	r6, r6, #8
   15024:	beq	15050 <__assert_fail@plt+0x392c>
   15028:	add	r4, r4, #2
   1502c:	mov	r1, r4
   15030:	mov	r0, r7
   15034:	bl	1dfb8 <__assert_fail@plt+0xc894>
   15038:	add	r5, r5, r6
   1503c:	cmp	r5, r7
   15040:	mov	r3, r1
   15044:	bcc	1501c <__assert_fail@plt+0x38f8>
   15048:	cmp	r3, #0
   1504c:	bne	1505c <__assert_fail@plt+0x3938>
   15050:	add	r7, r7, #2
   15054:	cmn	r7, #1
   15058:	bne	14fec <__assert_fail@plt+0x38c8>
   1505c:	mov	r0, r7
   15060:	pop	{r4, r5, r6, r7, r8, pc}
   15064:	bge	feabfb18 <optarg@@GLIBC_2.4+0xfea8f7e8>
   15068:	push	{r4, lr}
   1506c:	ror	r0, r0, #3
   15070:	bl	1dfb8 <__assert_fail@plt+0xc894>
   15074:	mov	r0, r1
   15078:	pop	{r4, pc}
   1507c:	sub	r0, r1, r0
   15080:	clz	r0, r0
   15084:	lsr	r0, r0, #5
   15088:	bx	lr
   1508c:	push	{r4, lr}
   15090:	mov	r4, r0
   15094:	mov	r0, r1
   15098:	ldr	r3, [r4, #24]
   1509c:	ldr	r1, [r4, #8]
   150a0:	blx	r3
   150a4:	ldr	r3, [r4, #8]
   150a8:	cmp	r3, r0
   150ac:	bls	150bc <__assert_fail@plt+0x3998>
   150b0:	ldr	r3, [r4]
   150b4:	add	r0, r3, r0, lsl #3
   150b8:	pop	{r4, pc}
   150bc:	bl	116e8 <abort@plt>
   150c0:	push	{r4, r5, r6, r7, r8, lr}
   150c4:	mov	r8, r2
   150c8:	mov	r5, r1
   150cc:	mov	r7, r3
   150d0:	mov	r6, r0
   150d4:	bl	1508c <__assert_fail@plt+0x3968>
   150d8:	str	r0, [r8]
   150dc:	ldr	r1, [r0]
   150e0:	cmp	r1, #0
   150e4:	beq	151cc <__assert_fail@plt+0x3aa8>
   150e8:	cmp	r1, r5
   150ec:	mov	r4, r0
   150f0:	beq	15190 <__assert_fail@plt+0x3a6c>
   150f4:	ldr	r3, [r6, #28]
   150f8:	mov	r0, r5
   150fc:	blx	r3
   15100:	cmp	r0, #0
   15104:	ldrne	r3, [r4]
   15108:	bne	15194 <__assert_fail@plt+0x3a70>
   1510c:	ldr	r2, [r4, #4]
   15110:	cmp	r2, #0
   15114:	beq	151cc <__assert_fail@plt+0x3aa8>
   15118:	ldr	r3, [r2]
   1511c:	cmp	r5, r3
   15120:	bne	15144 <__assert_fail@plt+0x3a20>
   15124:	b	15164 <__assert_fail@plt+0x3a40>
   15128:	ldr	r4, [r4, #4]
   1512c:	ldr	r2, [r4, #4]
   15130:	cmp	r2, #0
   15134:	beq	151cc <__assert_fail@plt+0x3aa8>
   15138:	ldr	r3, [r2]
   1513c:	cmp	r3, r5
   15140:	beq	15164 <__assert_fail@plt+0x3a40>
   15144:	mov	r1, r3
   15148:	mov	r0, r5
   1514c:	ldr	r3, [r6, #28]
   15150:	blx	r3
   15154:	cmp	r0, #0
   15158:	beq	15128 <__assert_fail@plt+0x3a04>
   1515c:	ldr	r2, [r4, #4]
   15160:	ldr	r3, [r2]
   15164:	cmp	r7, #0
   15168:	beq	151c4 <__assert_fail@plt+0x3aa0>
   1516c:	ldr	r0, [r2, #4]
   15170:	mov	r1, #0
   15174:	str	r0, [r4, #4]
   15178:	str	r1, [r2]
   1517c:	ldr	r1, [r6, #36]	; 0x24
   15180:	mov	r0, r3
   15184:	str	r1, [r2, #4]
   15188:	str	r2, [r6, #36]	; 0x24
   1518c:	pop	{r4, r5, r6, r7, r8, pc}
   15190:	mov	r3, r1
   15194:	cmp	r7, #0
   15198:	beq	151c4 <__assert_fail@plt+0x3aa0>
   1519c:	ldr	r2, [r4, #4]
   151a0:	cmp	r2, #0
   151a4:	movne	ip, #0
   151a8:	ldmne	r2, {r0, r1}
   151ac:	streq	r2, [r4]
   151b0:	stmne	r4, {r0, r1}
   151b4:	strne	ip, [r2]
   151b8:	ldrne	r1, [r6, #36]	; 0x24
   151bc:	strne	r1, [r2, #4]
   151c0:	strne	r2, [r6, #36]	; 0x24
   151c4:	mov	r0, r3
   151c8:	pop	{r4, r5, r6, r7, r8, pc}
   151cc:	mov	r3, #0
   151d0:	mov	r0, r3
   151d4:	pop	{r4, r5, r6, r7, r8, pc}
   151d8:	ldr	r2, [pc, #164]	; 15284 <__assert_fail@plt+0x3b60>
   151dc:	ldr	r3, [r0]
   151e0:	cmp	r3, r2
   151e4:	beq	1526c <__assert_fail@plt+0x3b48>
   151e8:	vldr	s15, [r3, #8]
   151ec:	vldr	s14, [pc, #128]	; 15274 <__assert_fail@plt+0x3b50>
   151f0:	vcmpe.f32	s15, s14
   151f4:	vmrs	APSR_nzcv, fpscr
   151f8:	ble	15260 <__assert_fail@plt+0x3b3c>
   151fc:	vldr	s13, [pc, #116]	; 15278 <__assert_fail@plt+0x3b54>
   15200:	vcmpe.f32	s15, s13
   15204:	vmrs	APSR_nzcv, fpscr
   15208:	bpl	15260 <__assert_fail@plt+0x3b3c>
   1520c:	vldr	s13, [pc, #104]	; 1527c <__assert_fail@plt+0x3b58>
   15210:	vldr	s12, [r3, #12]
   15214:	vcmpe.f32	s12, s13
   15218:	vmrs	APSR_nzcv, fpscr
   1521c:	ble	15260 <__assert_fail@plt+0x3b3c>
   15220:	vldr	s13, [r3]
   15224:	vcmpe.f32	s13, #0.0
   15228:	vmrs	APSR_nzcv, fpscr
   1522c:	blt	15260 <__assert_fail@plt+0x3b3c>
   15230:	vadd.f32	s14, s13, s14
   15234:	vldr	s13, [r3, #4]
   15238:	vcmpe.f32	s14, s13
   1523c:	vmrs	APSR_nzcv, fpscr
   15240:	bpl	15260 <__assert_fail@plt+0x3b3c>
   15244:	vldr	s12, [pc, #52]	; 15280 <__assert_fail@plt+0x3b5c>
   15248:	vcmpe.f32	s13, s12
   1524c:	vmrs	APSR_nzcv, fpscr
   15250:	bhi	15260 <__assert_fail@plt+0x3b3c>
   15254:	vcmpe.f32	s15, s14
   15258:	vmrs	APSR_nzcv, fpscr
   1525c:	bgt	1526c <__assert_fail@plt+0x3b48>
   15260:	str	r2, [r0]
   15264:	mov	r0, #0
   15268:	bx	lr
   1526c:	mov	r0, #1
   15270:	bx	lr
   15274:	stclcc	12, cr12, [ip, #820]	; 0x334
   15278:	svccc	0x00666666
   1527c:	svccc	0x008ccccd
   15280:	svccc	0x00800000
   15284:	andeq	pc, r1, r8, ror #12
   15288:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1528c:	ldr	r3, [r1, #4]
   15290:	ldr	r6, [r1]
   15294:	cmp	r6, r3
   15298:	bcs	15360 <__assert_fail@plt+0x3c3c>
   1529c:	mov	r8, r2
   152a0:	mov	r5, r0
   152a4:	mov	r7, r1
   152a8:	add	r6, r6, #8
   152ac:	mov	r9, #0
   152b0:	b	152c0 <__assert_fail@plt+0x3b9c>
   152b4:	cmp	r3, r6
   152b8:	add	r6, r6, #8
   152bc:	bls	15360 <__assert_fail@plt+0x3c3c>
   152c0:	ldr	sl, [r6, #-8]
   152c4:	cmp	sl, #0
   152c8:	beq	152b4 <__assert_fail@plt+0x3b90>
   152cc:	ldr	r4, [r6, #-4]
   152d0:	cmp	r4, #0
   152d4:	bne	152f4 <__assert_fail@plt+0x3bd0>
   152d8:	b	15344 <__assert_fail@plt+0x3c20>
   152dc:	ldr	r2, [r0, #4]
   152e0:	cmp	r3, #0
   152e4:	str	r2, [r4, #4]
   152e8:	str	r4, [r0, #4]
   152ec:	mov	r4, r3
   152f0:	beq	15340 <__assert_fail@plt+0x3c1c>
   152f4:	ldr	sl, [r4]
   152f8:	mov	r0, r5
   152fc:	mov	r1, sl
   15300:	bl	1508c <__assert_fail@plt+0x3968>
   15304:	ldr	r3, [r4, #4]
   15308:	ldr	r2, [r0]
   1530c:	cmp	r2, #0
   15310:	bne	152dc <__assert_fail@plt+0x3bb8>
   15314:	ldr	r1, [r5, #12]
   15318:	str	sl, [r0]
   1531c:	add	r1, r1, #1
   15320:	str	r1, [r5, #12]
   15324:	str	r2, [r4]
   15328:	ldr	r2, [r5, #36]	; 0x24
   1532c:	cmp	r3, #0
   15330:	str	r2, [r4, #4]
   15334:	str	r4, [r5, #36]	; 0x24
   15338:	mov	r4, r3
   1533c:	bne	152f4 <__assert_fail@plt+0x3bd0>
   15340:	ldr	sl, [r6, #-8]
   15344:	cmp	r8, #0
   15348:	str	r9, [r6, #-4]
   1534c:	beq	15368 <__assert_fail@plt+0x3c44>
   15350:	ldr	r3, [r7, #4]
   15354:	cmp	r3, r6
   15358:	add	r6, r6, #8
   1535c:	bhi	152c0 <__assert_fail@plt+0x3b9c>
   15360:	mov	r0, #1
   15364:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15368:	mov	r1, sl
   1536c:	mov	r0, r5
   15370:	bl	1508c <__assert_fail@plt+0x3968>
   15374:	ldr	r3, [r0]
   15378:	mov	r4, r0
   1537c:	cmp	r3, #0
   15380:	beq	153c0 <__assert_fail@plt+0x3c9c>
   15384:	ldr	r0, [r5, #36]	; 0x24
   15388:	cmp	r0, #0
   1538c:	beq	153d4 <__assert_fail@plt+0x3cb0>
   15390:	ldr	r3, [r0, #4]
   15394:	str	r3, [r5, #36]	; 0x24
   15398:	ldr	r3, [r4, #4]
   1539c:	str	sl, [r0]
   153a0:	str	r3, [r0, #4]
   153a4:	str	r0, [r4, #4]
   153a8:	ldr	r2, [r7, #12]
   153ac:	str	r9, [r6, #-8]
   153b0:	sub	r2, r2, #1
   153b4:	ldr	r3, [r7, #4]
   153b8:	str	r2, [r7, #12]
   153bc:	b	152b4 <__assert_fail@plt+0x3b90>
   153c0:	ldr	r3, [r5, #12]
   153c4:	str	sl, [r0]
   153c8:	add	r3, r3, #1
   153cc:	str	r3, [r5, #12]
   153d0:	b	153a8 <__assert_fail@plt+0x3c84>
   153d4:	mov	r0, #8
   153d8:	bl	114e4 <malloc@plt>
   153dc:	cmp	r0, #0
   153e0:	bne	15398 <__assert_fail@plt+0x3c74>
   153e4:	mov	r0, r8
   153e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153ec:	ldr	r0, [r0, #8]
   153f0:	bx	lr
   153f4:	ldr	r0, [r0, #12]
   153f8:	bx	lr
   153fc:	ldr	r0, [r0, #16]
   15400:	bx	lr
   15404:	ldm	r0, {r1, r3}
   15408:	cmp	r1, r3
   1540c:	bcs	15474 <__assert_fail@plt+0x3d50>
   15410:	sub	ip, r3, #1
   15414:	sub	ip, ip, r1
   15418:	add	r3, r1, #16
   1541c:	bic	ip, ip, #7
   15420:	add	ip, ip, r3
   15424:	add	r1, r1, #8
   15428:	mov	r0, #0
   1542c:	b	1543c <__assert_fail@plt+0x3d18>
   15430:	add	r1, r1, #8
   15434:	cmp	r1, ip
   15438:	bxeq	lr
   1543c:	ldr	r3, [r1, #-8]
   15440:	cmp	r3, #0
   15444:	beq	15430 <__assert_fail@plt+0x3d0c>
   15448:	ldr	r3, [r1, #-4]
   1544c:	mov	r2, #1
   15450:	cmp	r3, #0
   15454:	beq	15468 <__assert_fail@plt+0x3d44>
   15458:	ldr	r3, [r3, #4]
   1545c:	add	r2, r2, #1
   15460:	cmp	r3, #0
   15464:	bne	15458 <__assert_fail@plt+0x3d34>
   15468:	cmp	r0, r2
   1546c:	movcc	r0, r2
   15470:	b	15430 <__assert_fail@plt+0x3d0c>
   15474:	mov	r0, #0
   15478:	bx	lr
   1547c:	ldm	r0, {r1, r3}
   15480:	push	{lr}		; (str lr, [sp, #-4]!)
   15484:	cmp	r1, r3
   15488:	bcs	15518 <__assert_fail@plt+0x3df4>
   1548c:	sub	ip, r3, #1
   15490:	sub	ip, ip, r1
   15494:	add	r3, r1, #16
   15498:	bic	ip, ip, #7
   1549c:	mov	r2, #0
   154a0:	add	ip, ip, r3
   154a4:	add	r1, r1, #8
   154a8:	mov	lr, r2
   154ac:	b	154bc <__assert_fail@plt+0x3d98>
   154b0:	add	r1, r1, #8
   154b4:	cmp	r1, ip
   154b8:	beq	154f8 <__assert_fail@plt+0x3dd4>
   154bc:	ldr	r3, [r1, #-8]
   154c0:	cmp	r3, #0
   154c4:	beq	154b0 <__assert_fail@plt+0x3d8c>
   154c8:	ldr	r3, [r1, #-4]
   154cc:	add	lr, lr, #1
   154d0:	cmp	r3, #0
   154d4:	add	r2, r2, #1
   154d8:	beq	154b0 <__assert_fail@plt+0x3d8c>
   154dc:	ldr	r3, [r3, #4]
   154e0:	add	r2, r2, #1
   154e4:	cmp	r3, #0
   154e8:	bne	154dc <__assert_fail@plt+0x3db8>
   154ec:	add	r1, r1, #8
   154f0:	cmp	r1, ip
   154f4:	bne	154bc <__assert_fail@plt+0x3d98>
   154f8:	ldr	r3, [r0, #12]
   154fc:	cmp	r3, lr
   15500:	ldreq	r0, [r0, #16]
   15504:	subeq	r0, r0, r2
   15508:	clzeq	r0, r0
   1550c:	lsreq	r0, r0, #5
   15510:	movne	r0, #0
   15514:	pop	{pc}		; (ldr pc, [sp], #4)
   15518:	mov	r2, #0
   1551c:	mov	lr, r2
   15520:	b	154f8 <__assert_fail@plt+0x3dd4>
   15524:	push	{r4, r5, r6, r7, lr}
   15528:	mov	r4, r1
   1552c:	ldr	r2, [r0]
   15530:	ldr	r1, [r0, #4]
   15534:	sub	sp, sp, #12
   15538:	cmp	r2, r1
   1553c:	ldr	r3, [r0, #16]
   15540:	ldrd	r6, [r0, #8]
   15544:	bcs	15628 <__assert_fail@plt+0x3f04>
   15548:	sub	ip, r1, #1
   1554c:	sub	ip, ip, r2
   15550:	bic	ip, ip, #7
   15554:	add	r1, r2, #16
   15558:	add	ip, ip, r1
   1555c:	add	r0, r2, #8
   15560:	mov	r5, #0
   15564:	b	15574 <__assert_fail@plt+0x3e50>
   15568:	add	r0, r0, #8
   1556c:	cmp	r0, ip
   15570:	beq	155b4 <__assert_fail@plt+0x3e90>
   15574:	ldr	r2, [r0, #-8]
   15578:	cmp	r2, #0
   1557c:	beq	15568 <__assert_fail@plt+0x3e44>
   15580:	ldr	r2, [r0, #-4]
   15584:	mov	r1, #1
   15588:	cmp	r2, #0
   1558c:	beq	155a0 <__assert_fail@plt+0x3e7c>
   15590:	ldr	r2, [r2, #4]
   15594:	add	r1, r1, #1
   15598:	cmp	r2, #0
   1559c:	bne	15590 <__assert_fail@plt+0x3e6c>
   155a0:	cmp	r5, r1
   155a4:	add	r0, r0, #8
   155a8:	movcc	r5, r1
   155ac:	cmp	r0, ip
   155b0:	bne	15574 <__assert_fail@plt+0x3e50>
   155b4:	ldr	r2, [pc, #124]	; 15638 <__assert_fail@plt+0x3f14>
   155b8:	mov	r1, #1
   155bc:	mov	r0, r4
   155c0:	bl	115d4 <__fprintf_chk@plt>
   155c4:	mov	r3, r6
   155c8:	ldr	r2, [pc, #108]	; 1563c <__assert_fail@plt+0x3f18>
   155cc:	mov	r1, #1
   155d0:	mov	r0, r4
   155d4:	bl	115d4 <__fprintf_chk@plt>
   155d8:	vmov	s15, r7
   155dc:	vldr	d5, [pc, #76]	; 15630 <__assert_fail@plt+0x3f0c>
   155e0:	mov	r3, r7
   155e4:	ldr	r2, [pc, #84]	; 15640 <__assert_fail@plt+0x3f1c>
   155e8:	vcvt.f64.u32	d6, s15
   155ec:	vmov	s15, r6
   155f0:	mov	r1, #1
   155f4:	mov	r0, r4
   155f8:	vcvt.f64.u32	d7, s15
   155fc:	vmul.f64	d6, d6, d5
   15600:	vdiv.f64	d5, d6, d7
   15604:	vstr	d5, [sp]
   15608:	bl	115d4 <__fprintf_chk@plt>
   1560c:	mov	r3, r5
   15610:	mov	r0, r4
   15614:	ldr	r2, [pc, #40]	; 15644 <__assert_fail@plt+0x3f20>
   15618:	mov	r1, #1
   1561c:	add	sp, sp, #12
   15620:	pop	{r4, r5, r6, r7, lr}
   15624:	b	115d4 <__fprintf_chk@plt>
   15628:	mov	r5, #0
   1562c:	b	155b4 <__assert_fail@plt+0x3e90>
   15630:	andeq	r0, r0, r0
   15634:	subsmi	r0, r9, r0
   15638:	andeq	pc, r1, ip, ror r6	; <UNPREDICTABLE>
   1563c:	muleq	r1, r4, r6
   15640:	andeq	pc, r1, ip, lsr #13
   15644:	ldrdeq	pc, [r1], -r0
   15648:	push	{r4, r5, r6, lr}
   1564c:	mov	r6, r0
   15650:	mov	r5, r1
   15654:	bl	1508c <__assert_fail@plt+0x3968>
   15658:	ldr	r3, [r0]
   1565c:	cmp	r3, #0
   15660:	beq	1569c <__assert_fail@plt+0x3f78>
   15664:	mov	r4, r0
   15668:	b	15670 <__assert_fail@plt+0x3f4c>
   1566c:	ldr	r3, [r4]
   15670:	cmp	r3, r5
   15674:	mov	r1, r3
   15678:	mov	r0, r5
   1567c:	beq	156a8 <__assert_fail@plt+0x3f84>
   15680:	ldr	r3, [r6, #28]
   15684:	blx	r3
   15688:	cmp	r0, #0
   1568c:	bne	156a4 <__assert_fail@plt+0x3f80>
   15690:	ldr	r4, [r4, #4]
   15694:	cmp	r4, #0
   15698:	bne	1566c <__assert_fail@plt+0x3f48>
   1569c:	mov	r0, #0
   156a0:	pop	{r4, r5, r6, pc}
   156a4:	ldr	r5, [r4]
   156a8:	mov	r0, r5
   156ac:	pop	{r4, r5, r6, pc}
   156b0:	ldr	r3, [r0, #16]
   156b4:	cmp	r3, #0
   156b8:	beq	15708 <__assert_fail@plt+0x3fe4>
   156bc:	ldr	r3, [r0]
   156c0:	ldr	r2, [r0, #4]
   156c4:	cmp	r3, r2
   156c8:	bcs	15700 <__assert_fail@plt+0x3fdc>
   156cc:	ldr	r0, [r3]
   156d0:	cmp	r0, #0
   156d4:	bxne	lr
   156d8:	sub	r2, r2, #1
   156dc:	sub	r2, r2, r3
   156e0:	bic	r2, r2, #7
   156e4:	add	r2, r3, r2
   156e8:	b	156f8 <__assert_fail@plt+0x3fd4>
   156ec:	ldr	r0, [r3, #8]!
   156f0:	cmp	r0, #0
   156f4:	bxne	lr
   156f8:	cmp	r3, r2
   156fc:	bne	156ec <__assert_fail@plt+0x3fc8>
   15700:	push	{r4, lr}
   15704:	bl	116e8 <abort@plt>
   15708:	mov	r0, r3
   1570c:	bx	lr
   15710:	push	{r4, r5, r6, lr}
   15714:	mov	r5, r0
   15718:	mov	r4, r1
   1571c:	bl	1508c <__assert_fail@plt+0x3968>
   15720:	mov	r2, r0
   15724:	mov	r3, r0
   15728:	b	15734 <__assert_fail@plt+0x4010>
   1572c:	cmp	r3, #0
   15730:	beq	15748 <__assert_fail@plt+0x4024>
   15734:	ldm	r3, {r1, r3}
   15738:	cmp	r1, r4
   1573c:	bne	1572c <__assert_fail@plt+0x4008>
   15740:	cmp	r3, #0
   15744:	bne	15770 <__assert_fail@plt+0x404c>
   15748:	ldr	r3, [r5, #4]
   1574c:	b	1575c <__assert_fail@plt+0x4038>
   15750:	ldr	r0, [r2]
   15754:	cmp	r0, #0
   15758:	popne	{r4, r5, r6, pc}
   1575c:	add	r2, r2, #8
   15760:	cmp	r3, r2
   15764:	bhi	15750 <__assert_fail@plt+0x402c>
   15768:	mov	r0, #0
   1576c:	pop	{r4, r5, r6, pc}
   15770:	ldr	r0, [r3]
   15774:	pop	{r4, r5, r6, pc}
   15778:	push	{r4, r5, lr}
   1577c:	ldm	r0, {r5, lr}
   15780:	cmp	lr, r5
   15784:	bls	15808 <__assert_fail@plt+0x40e4>
   15788:	mov	ip, #0
   1578c:	ldr	r3, [r5]
   15790:	cmp	r3, #0
   15794:	bne	157b0 <__assert_fail@plt+0x408c>
   15798:	add	r5, r5, #8
   1579c:	cmp	lr, r5
   157a0:	bhi	1578c <__assert_fail@plt+0x4068>
   157a4:	mov	r2, ip
   157a8:	mov	r0, r2
   157ac:	pop	{r4, r5, pc}
   157b0:	cmp	r2, ip
   157b4:	bls	157a4 <__assert_fail@plt+0x4080>
   157b8:	str	r3, [r1, ip, lsl #2]
   157bc:	ldr	r3, [r5, #4]
   157c0:	add	r4, ip, #1
   157c4:	cmp	r3, #0
   157c8:	add	lr, r1, ip, lsl #2
   157cc:	beq	157fc <__assert_fail@plt+0x40d8>
   157d0:	mov	ip, r4
   157d4:	cmp	r2, ip
   157d8:	beq	157a8 <__assert_fail@plt+0x4084>
   157dc:	ldr	r4, [r3]
   157e0:	add	ip, ip, #1
   157e4:	str	r4, [lr, #4]!
   157e8:	ldr	r3, [r3, #4]
   157ec:	cmp	r3, #0
   157f0:	bne	157d4 <__assert_fail@plt+0x40b0>
   157f4:	ldr	lr, [r0, #4]
   157f8:	b	15798 <__assert_fail@plt+0x4074>
   157fc:	ldr	lr, [r0, #4]
   15800:	mov	ip, r4
   15804:	b	15798 <__assert_fail@plt+0x4074>
   15808:	mov	r2, #0
   1580c:	b	157a8 <__assert_fail@plt+0x4084>
   15810:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15814:	ldr	r3, [r0, #4]
   15818:	ldr	r8, [r0]
   1581c:	cmp	r3, r8
   15820:	bls	15888 <__assert_fail@plt+0x4164>
   15824:	mov	r7, r2
   15828:	mov	r6, r1
   1582c:	mov	r9, r0
   15830:	mov	r5, #0
   15834:	ldr	r0, [r8]
   15838:	cmp	r0, #0
   1583c:	bne	15854 <__assert_fail@plt+0x4130>
   15840:	add	r8, r8, #8
   15844:	cmp	r3, r8
   15848:	bhi	15834 <__assert_fail@plt+0x4110>
   1584c:	mov	r0, r5
   15850:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15854:	mov	r4, r8
   15858:	b	15860 <__assert_fail@plt+0x413c>
   1585c:	ldr	r0, [r4]
   15860:	mov	r1, r7
   15864:	blx	r6
   15868:	cmp	r0, #0
   1586c:	beq	1584c <__assert_fail@plt+0x4128>
   15870:	ldr	r4, [r4, #4]
   15874:	add	r5, r5, #1
   15878:	cmp	r4, #0
   1587c:	bne	1585c <__assert_fail@plt+0x4138>
   15880:	ldr	r3, [r9, #4]
   15884:	b	15840 <__assert_fail@plt+0x411c>
   15888:	mov	r5, #0
   1588c:	b	1584c <__assert_fail@plt+0x4128>
   15890:	push	{r4, r5, r6, lr}
   15894:	mov	r4, r0
   15898:	ldrb	r0, [r0]
   1589c:	cmp	r0, #0
   158a0:	beq	158d0 <__assert_fail@plt+0x41ac>
   158a4:	mov	r5, r1
   158a8:	mov	r1, #0
   158ac:	rsb	r1, r1, r1, lsl #5
   158b0:	add	r0, r1, r0
   158b4:	mov	r1, r5
   158b8:	bl	1dfb8 <__assert_fail@plt+0xc894>
   158bc:	ldrb	r0, [r4, #1]!
   158c0:	cmp	r0, #0
   158c4:	bne	158ac <__assert_fail@plt+0x4188>
   158c8:	mov	r0, r1
   158cc:	pop	{r4, r5, r6, pc}
   158d0:	mov	r1, r0
   158d4:	mov	r0, r1
   158d8:	pop	{r4, r5, r6, pc}
   158dc:	push	{lr}		; (str lr, [sp, #-4]!)
   158e0:	mov	ip, r0
   158e4:	ldr	lr, [pc, #16]	; 158fc <__assert_fail@plt+0x41d8>
   158e8:	ldm	lr!, {r0, r1, r2, r3}
   158ec:	ldr	lr, [lr]
   158f0:	stmia	ip!, {r0, r1, r2, r3}
   158f4:	str	lr, [ip]
   158f8:	pop	{pc}		; (ldr pc, [sp], #4)
   158fc:	andeq	pc, r1, r8, ror #12
   15900:	push	{r4, r5, r6, r7, r8, lr}
   15904:	sub	sp, sp, #8
   15908:	cmp	r2, #0
   1590c:	ldr	ip, [pc, #300]	; 15a40 <__assert_fail@plt+0x431c>
   15910:	str	r0, [sp, #4]
   15914:	ldr	r5, [pc, #296]	; 15a44 <__assert_fail@plt+0x4320>
   15918:	mov	r0, #40	; 0x28
   1591c:	movne	r5, r2
   15920:	cmp	r3, #0
   15924:	movne	r8, r3
   15928:	moveq	r8, ip
   1592c:	mov	r6, r1
   15930:	bl	114e4 <malloc@plt>
   15934:	subs	r4, r0, #0
   15938:	beq	15a04 <__assert_fail@plt+0x42e0>
   1593c:	cmp	r6, #0
   15940:	add	r0, r4, #20
   15944:	beq	159e0 <__assert_fail@plt+0x42bc>
   15948:	str	r6, [r4, #20]
   1594c:	bl	151d8 <__assert_fail@plt+0x3ab4>
   15950:	cmp	r0, #0
   15954:	beq	159f8 <__assert_fail@plt+0x42d4>
   15958:	ldrb	r3, [r6, #16]
   1595c:	cmp	r3, #0
   15960:	vldreq	s13, [r6, #8]
   15964:	beq	15a10 <__assert_fail@plt+0x42ec>
   15968:	ldr	r0, [sp, #4]
   1596c:	bl	14fd0 <__assert_fail@plt+0x38ac>
   15970:	lsrs	r3, r0, #30
   15974:	movne	r7, #1
   15978:	moveq	r7, #0
   1597c:	tst	r0, #536870912	; 0x20000000
   15980:	mov	r6, r0
   15984:	bne	159f8 <__assert_fail@plt+0x42d4>
   15988:	cmp	r7, #0
   1598c:	bne	159f8 <__assert_fail@plt+0x42d4>
   15990:	cmp	r0, #0
   15994:	str	r0, [r4, #8]
   15998:	beq	159f8 <__assert_fail@plt+0x42d4>
   1599c:	mov	r1, #8
   159a0:	bl	11310 <calloc@plt>
   159a4:	cmp	r0, #0
   159a8:	str	r0, [r4]
   159ac:	beq	159f8 <__assert_fail@plt+0x42d4>
   159b0:	ldr	r3, [sp, #32]
   159b4:	add	r0, r0, r6, lsl #3
   159b8:	str	r0, [r4, #4]
   159bc:	str	r7, [r4, #12]
   159c0:	mov	r0, r4
   159c4:	str	r7, [r4, #16]
   159c8:	str	r5, [r4, #24]
   159cc:	str	r8, [r4, #28]
   159d0:	str	r3, [r4, #32]
   159d4:	str	r7, [r4, #36]	; 0x24
   159d8:	add	sp, sp, #8
   159dc:	pop	{r4, r5, r6, r7, r8, pc}
   159e0:	ldr	r3, [pc, #96]	; 15a48 <__assert_fail@plt+0x4324>
   159e4:	str	r3, [r4, #20]
   159e8:	bl	151d8 <__assert_fail@plt+0x3ab4>
   159ec:	cmp	r0, #0
   159f0:	vldrne	s13, [pc, #64]	; 15a38 <__assert_fail@plt+0x4314>
   159f4:	bne	15a10 <__assert_fail@plt+0x42ec>
   159f8:	mov	r0, r4
   159fc:	bl	11388 <free@plt>
   15a00:	mov	r4, #0
   15a04:	mov	r0, r4
   15a08:	add	sp, sp, #8
   15a0c:	pop	{r4, r5, r6, r7, r8, pc}
   15a10:	vldr	s15, [sp, #4]
   15a14:	vldr	s14, [pc, #32]	; 15a3c <__assert_fail@plt+0x4318>
   15a18:	vcvt.f32.u32	s12, s15
   15a1c:	vdiv.f32	s15, s12, s13
   15a20:	vcmpe.f32	s15, s14
   15a24:	vmrs	APSR_nzcv, fpscr
   15a28:	bge	159f8 <__assert_fail@plt+0x42d4>
   15a2c:	vcvt.u32.f32	s15, s15
   15a30:	vstr	s15, [sp, #4]
   15a34:	b	15968 <__assert_fail@plt+0x4244>
   15a38:	svccc	0x004ccccd
   15a3c:	svcmi	0x00800000
   15a40:	andeq	r5, r1, ip, ror r0
   15a44:	andeq	r5, r1, r8, rrx
   15a48:	andeq	pc, r1, r8, ror #12
   15a4c:	push	{r4, r5, r6, r7, r8, lr}
   15a50:	mov	r5, r0
   15a54:	ldr	r6, [r0]
   15a58:	ldr	r2, [r0, #4]
   15a5c:	cmp	r6, r2
   15a60:	addcc	r6, r6, #8
   15a64:	movcc	r7, #0
   15a68:	bcc	15a7c <__assert_fail@plt+0x4358>
   15a6c:	b	15af0 <__assert_fail@plt+0x43cc>
   15a70:	cmp	r2, r6
   15a74:	add	r6, r6, #8
   15a78:	bls	15af0 <__assert_fail@plt+0x43cc>
   15a7c:	ldr	r3, [r6, #-8]
   15a80:	cmp	r3, #0
   15a84:	beq	15a70 <__assert_fail@plt+0x434c>
   15a88:	ldr	r4, [r6, #-4]
   15a8c:	ldr	r2, [r5, #32]
   15a90:	cmp	r4, #0
   15a94:	beq	15ac8 <__assert_fail@plt+0x43a4>
   15a98:	cmp	r2, #0
   15a9c:	beq	15aac <__assert_fail@plt+0x4388>
   15aa0:	ldr	r0, [r4]
   15aa4:	blx	r2
   15aa8:	ldr	r2, [r5, #32]
   15aac:	ldr	r3, [r4, #4]
   15ab0:	ldr	r1, [r5, #36]	; 0x24
   15ab4:	str	r7, [r4]
   15ab8:	str	r1, [r4, #4]
   15abc:	str	r4, [r5, #36]	; 0x24
   15ac0:	subs	r4, r3, #0
   15ac4:	bne	15a98 <__assert_fail@plt+0x4374>
   15ac8:	cmp	r2, #0
   15acc:	beq	15ad8 <__assert_fail@plt+0x43b4>
   15ad0:	ldr	r0, [r6, #-8]
   15ad4:	blx	r2
   15ad8:	str	r7, [r6, #-8]
   15adc:	str	r7, [r6, #-4]
   15ae0:	ldr	r2, [r5, #4]
   15ae4:	cmp	r2, r6
   15ae8:	add	r6, r6, #8
   15aec:	bhi	15a7c <__assert_fail@plt+0x4358>
   15af0:	mov	r3, #0
   15af4:	str	r3, [r5, #12]
   15af8:	str	r3, [r5, #16]
   15afc:	pop	{r4, r5, r6, r7, r8, pc}
   15b00:	ldr	r3, [r0, #32]
   15b04:	push	{r4, r5, r6, lr}
   15b08:	cmp	r3, #0
   15b0c:	mov	r6, r0
   15b10:	ldr	r5, [r0]
   15b14:	ldr	r3, [r0, #4]
   15b18:	beq	15b80 <__assert_fail@plt+0x445c>
   15b1c:	ldr	r2, [r0, #16]
   15b20:	cmp	r2, #0
   15b24:	beq	15b80 <__assert_fail@plt+0x445c>
   15b28:	cmp	r5, r3
   15b2c:	bcc	15b40 <__assert_fail@plt+0x441c>
   15b30:	b	15bb4 <__assert_fail@plt+0x4490>
   15b34:	add	r5, r5, #8
   15b38:	cmp	r3, r5
   15b3c:	bls	15b7c <__assert_fail@plt+0x4458>
   15b40:	ldr	r0, [r5]
   15b44:	cmp	r0, #0
   15b48:	beq	15b34 <__assert_fail@plt+0x4410>
   15b4c:	mov	r4, r5
   15b50:	b	15b58 <__assert_fail@plt+0x4434>
   15b54:	ldr	r0, [r4]
   15b58:	ldr	r3, [r6, #32]
   15b5c:	blx	r3
   15b60:	ldr	r4, [r4, #4]
   15b64:	cmp	r4, #0
   15b68:	bne	15b54 <__assert_fail@plt+0x4430>
   15b6c:	ldr	r3, [r6, #4]
   15b70:	add	r5, r5, #8
   15b74:	cmp	r3, r5
   15b78:	bhi	15b40 <__assert_fail@plt+0x441c>
   15b7c:	ldr	r5, [r6]
   15b80:	cmp	r5, r3
   15b84:	bcs	15bb4 <__assert_fail@plt+0x4490>
   15b88:	ldr	r0, [r5, #4]
   15b8c:	cmp	r0, #0
   15b90:	beq	15ba8 <__assert_fail@plt+0x4484>
   15b94:	ldr	r4, [r0, #4]
   15b98:	bl	11388 <free@plt>
   15b9c:	subs	r0, r4, #0
   15ba0:	bne	15b94 <__assert_fail@plt+0x4470>
   15ba4:	ldr	r3, [r6, #4]
   15ba8:	add	r5, r5, #8
   15bac:	cmp	r3, r5
   15bb0:	bhi	15b88 <__assert_fail@plt+0x4464>
   15bb4:	ldr	r0, [r6, #36]	; 0x24
   15bb8:	cmp	r0, #0
   15bbc:	beq	15bd0 <__assert_fail@plt+0x44ac>
   15bc0:	ldr	r4, [r0, #4]
   15bc4:	bl	11388 <free@plt>
   15bc8:	subs	r0, r4, #0
   15bcc:	bne	15bc0 <__assert_fail@plt+0x449c>
   15bd0:	ldr	r0, [r6]
   15bd4:	bl	11388 <free@plt>
   15bd8:	mov	r0, r6
   15bdc:	pop	{r4, r5, r6, lr}
   15be0:	b	11388 <free@plt>
   15be4:	push	{r4, r5, r6, r7, r8, lr}
   15be8:	sub	sp, sp, #56	; 0x38
   15bec:	ldr	r8, [r0, #20]
   15bf0:	ldr	r7, [pc, #392]	; 15d80 <__assert_fail@plt+0x465c>
   15bf4:	mov	r6, r0
   15bf8:	ldrb	r3, [r8, #16]
   15bfc:	ldr	r2, [r7]
   15c00:	str	r1, [sp, #4]
   15c04:	cmp	r3, #0
   15c08:	str	r2, [sp, #52]	; 0x34
   15c0c:	bne	15c38 <__assert_fail@plt+0x4514>
   15c10:	vmov	s15, r1
   15c14:	vldr	s13, [r8, #8]
   15c18:	vldr	s14, [pc, #348]	; 15d7c <__assert_fail@plt+0x4658>
   15c1c:	vcvt.f32.u32	s12, s15
   15c20:	vdiv.f32	s15, s12, s13
   15c24:	vcmpe.f32	s15, s14
   15c28:	vmrs	APSR_nzcv, fpscr
   15c2c:	vcvtlt.u32.f32	s15, s15
   15c30:	vstrlt	s15, [sp, #4]
   15c34:	bge	15c68 <__assert_fail@plt+0x4544>
   15c38:	ldr	r0, [sp, #4]
   15c3c:	bl	14fd0 <__assert_fail@plt+0x38ac>
   15c40:	lsrs	r3, r0, #30
   15c44:	movne	r4, #1
   15c48:	moveq	r4, #0
   15c4c:	tst	r0, #536870912	; 0x20000000
   15c50:	movne	r4, #1
   15c54:	cmp	r0, #0
   15c58:	moveq	r4, #1
   15c5c:	cmp	r4, #0
   15c60:	mov	r5, r0
   15c64:	beq	15c88 <__assert_fail@plt+0x4564>
   15c68:	mov	r4, #0
   15c6c:	ldr	r2, [sp, #52]	; 0x34
   15c70:	ldr	r3, [r7]
   15c74:	mov	r0, r4
   15c78:	cmp	r2, r3
   15c7c:	bne	15d74 <__assert_fail@plt+0x4650>
   15c80:	add	sp, sp, #56	; 0x38
   15c84:	pop	{r4, r5, r6, r7, r8, pc}
   15c88:	ldr	r3, [r6, #8]
   15c8c:	cmp	r3, r0
   15c90:	beq	15d3c <__assert_fail@plt+0x4618>
   15c94:	mov	r1, #8
   15c98:	bl	11310 <calloc@plt>
   15c9c:	cmp	r0, #0
   15ca0:	str	r0, [sp, #12]
   15ca4:	beq	15c68 <__assert_fail@plt+0x4544>
   15ca8:	add	r0, r0, r5, lsl #3
   15cac:	ldr	r1, [r6, #32]
   15cb0:	str	r0, [sp, #16]
   15cb4:	ldr	r0, [r6, #28]
   15cb8:	ldr	ip, [r6, #24]
   15cbc:	ldr	r3, [r6, #36]	; 0x24
   15cc0:	mov	r2, r4
   15cc4:	str	r0, [sp, #40]	; 0x28
   15cc8:	str	r1, [sp, #44]	; 0x2c
   15ccc:	add	r0, sp, #12
   15cd0:	mov	r1, r6
   15cd4:	str	r4, [sp, #24]
   15cd8:	str	r4, [sp, #28]
   15cdc:	str	r5, [sp, #20]
   15ce0:	str	r8, [sp, #32]
   15ce4:	str	ip, [sp, #36]	; 0x24
   15ce8:	str	r3, [sp, #48]	; 0x30
   15cec:	bl	15288 <__assert_fail@plt+0x3b64>
   15cf0:	subs	r4, r0, #0
   15cf4:	bne	15d44 <__assert_fail@plt+0x4620>
   15cf8:	ldr	r3, [sp, #48]	; 0x30
   15cfc:	mov	r2, #1
   15d00:	str	r3, [r6, #36]	; 0x24
   15d04:	add	r1, sp, #12
   15d08:	mov	r0, r6
   15d0c:	bl	15288 <__assert_fail@plt+0x3b64>
   15d10:	cmp	r0, #0
   15d14:	beq	15d78 <__assert_fail@plt+0x4654>
   15d18:	add	r1, sp, #12
   15d1c:	mov	r0, r6
   15d20:	mov	r2, r4
   15d24:	bl	15288 <__assert_fail@plt+0x3b64>
   15d28:	cmp	r0, #0
   15d2c:	beq	15d78 <__assert_fail@plt+0x4654>
   15d30:	ldr	r0, [sp, #12]
   15d34:	bl	11388 <free@plt>
   15d38:	b	15c6c <__assert_fail@plt+0x4548>
   15d3c:	mov	r4, #1
   15d40:	b	15c6c <__assert_fail@plt+0x4548>
   15d44:	ldr	r0, [r6]
   15d48:	bl	11388 <free@plt>
   15d4c:	ldrd	r2, [sp, #12]
   15d50:	ldr	r1, [sp, #20]
   15d54:	str	r2, [r6]
   15d58:	str	r3, [r6, #4]
   15d5c:	ldr	r2, [sp, #24]
   15d60:	ldr	r3, [sp, #48]	; 0x30
   15d64:	str	r1, [r6, #8]
   15d68:	str	r2, [r6, #12]
   15d6c:	str	r3, [r6, #36]	; 0x24
   15d70:	b	15c6c <__assert_fail@plt+0x4548>
   15d74:	bl	113f4 <__stack_chk_fail@plt>
   15d78:	bl	116e8 <abort@plt>
   15d7c:	svcmi	0x00800000
   15d80:	andeq	pc, r2, r8, lsl #30
   15d84:	push	{r4, r5, r6, r7, lr}
   15d88:	sub	sp, sp, #12
   15d8c:	ldr	r6, [pc, #404]	; 15f28 <__assert_fail@plt+0x4804>
   15d90:	subs	r7, r1, #0
   15d94:	ldr	r3, [r6]
   15d98:	str	r3, [sp, #4]
   15d9c:	beq	15f1c <__assert_fail@plt+0x47f8>
   15da0:	mov	r5, r2
   15da4:	mov	r3, #0
   15da8:	mov	r2, sp
   15dac:	mov	r4, r0
   15db0:	bl	150c0 <__assert_fail@plt+0x399c>
   15db4:	cmp	r0, #0
   15db8:	beq	15de4 <__assert_fail@plt+0x46c0>
   15dbc:	cmp	r5, #0
   15dc0:	moveq	r0, r5
   15dc4:	strne	r0, [r5]
   15dc8:	movne	r0, #0
   15dcc:	ldr	r2, [sp, #4]
   15dd0:	ldr	r3, [r6]
   15dd4:	cmp	r2, r3
   15dd8:	bne	15f20 <__assert_fail@plt+0x47fc>
   15ddc:	add	sp, sp, #12
   15de0:	pop	{r4, r5, r6, r7, pc}
   15de4:	vldr	s15, [r4, #8]
   15de8:	ldr	r3, [r4, #20]
   15dec:	vldr	s14, [r4, #12]
   15df0:	vcvt.f32.u32	s15, s15
   15df4:	vldr	s13, [r3, #8]
   15df8:	vcvt.f32.u32	s14, s14
   15dfc:	vmul.f32	s15, s15, s13
   15e00:	vcmpe.f32	s14, s15
   15e04:	vmrs	APSR_nzcv, fpscr
   15e08:	bgt	15e54 <__assert_fail@plt+0x4730>
   15e0c:	ldr	r5, [sp]
   15e10:	ldr	r3, [r5]
   15e14:	cmp	r3, #0
   15e18:	beq	15eb0 <__assert_fail@plt+0x478c>
   15e1c:	ldr	r0, [r4, #36]	; 0x24
   15e20:	cmp	r0, #0
   15e24:	beq	15ed4 <__assert_fail@plt+0x47b0>
   15e28:	ldr	r3, [r0, #4]
   15e2c:	str	r3, [r4, #36]	; 0x24
   15e30:	ldr	r3, [r4, #16]
   15e34:	ldr	r2, [r5, #4]
   15e38:	add	r3, r3, #1
   15e3c:	str	r7, [r0]
   15e40:	str	r2, [r0, #4]
   15e44:	str	r0, [r5, #4]
   15e48:	mov	r0, #1
   15e4c:	str	r3, [r4, #16]
   15e50:	b	15dcc <__assert_fail@plt+0x46a8>
   15e54:	add	r0, r4, #20
   15e58:	bl	151d8 <__assert_fail@plt+0x3ab4>
   15e5c:	vldr	s15, [r4, #8]
   15e60:	ldr	r3, [r4, #20]
   15e64:	vldr	s14, [r4, #12]
   15e68:	vcvt.f32.u32	s15, s15
   15e6c:	vldr	s13, [r3, #8]
   15e70:	vcvt.f32.u32	s14, s14
   15e74:	vmul.f32	s12, s13, s15
   15e78:	vcmpe.f32	s14, s12
   15e7c:	vmrs	APSR_nzcv, fpscr
   15e80:	ble	15e0c <__assert_fail@plt+0x46e8>
   15e84:	vldr	s14, [r3, #12]
   15e88:	ldrb	r3, [r3, #16]
   15e8c:	vmul.f32	s15, s15, s14
   15e90:	cmp	r3, #0
   15e94:	vldr	s14, [pc, #136]	; 15f24 <__assert_fail@plt+0x4800>
   15e98:	vmuleq.f32	s15, s15, s13
   15e9c:	vcmpe.f32	s15, s14
   15ea0:	vmrs	APSR_nzcv, fpscr
   15ea4:	blt	15ee8 <__assert_fail@plt+0x47c4>
   15ea8:	mvn	r0, #0
   15eac:	b	15dcc <__assert_fail@plt+0x46a8>
   15eb0:	ldr	r2, [r4, #16]
   15eb4:	ldr	r3, [r4, #12]
   15eb8:	add	r2, r2, #1
   15ebc:	add	r3, r3, #1
   15ec0:	str	r7, [r5]
   15ec4:	mov	r0, #1
   15ec8:	str	r2, [r4, #16]
   15ecc:	str	r3, [r4, #12]
   15ed0:	b	15dcc <__assert_fail@plt+0x46a8>
   15ed4:	mov	r0, #8
   15ed8:	bl	114e4 <malloc@plt>
   15edc:	cmp	r0, #0
   15ee0:	beq	15ea8 <__assert_fail@plt+0x4784>
   15ee4:	b	15e30 <__assert_fail@plt+0x470c>
   15ee8:	vcvt.u32.f32	s15, s15
   15eec:	mov	r0, r4
   15ef0:	vmov	r1, s15
   15ef4:	bl	15be4 <__assert_fail@plt+0x44c0>
   15ef8:	cmp	r0, #0
   15efc:	beq	15ea8 <__assert_fail@plt+0x4784>
   15f00:	mov	r2, sp
   15f04:	mov	r3, #0
   15f08:	mov	r1, r7
   15f0c:	mov	r0, r4
   15f10:	bl	150c0 <__assert_fail@plt+0x399c>
   15f14:	cmp	r0, #0
   15f18:	beq	15e0c <__assert_fail@plt+0x46e8>
   15f1c:	bl	116e8 <abort@plt>
   15f20:	bl	113f4 <__stack_chk_fail@plt>
   15f24:	svcmi	0x00800000
   15f28:	andeq	pc, r2, r8, lsl #30
   15f2c:	push	{r4, r5, lr}
   15f30:	sub	sp, sp, #12
   15f34:	ldr	r5, [pc, #68]	; 15f80 <__assert_fail@plt+0x485c>
   15f38:	mov	r2, sp
   15f3c:	mov	r4, r1
   15f40:	ldr	r3, [r5]
   15f44:	str	r3, [sp, #4]
   15f48:	bl	15d84 <__assert_fail@plt+0x4660>
   15f4c:	cmn	r0, #1
   15f50:	moveq	r0, #0
   15f54:	beq	15f64 <__assert_fail@plt+0x4840>
   15f58:	cmp	r0, #0
   15f5c:	movne	r0, r4
   15f60:	ldreq	r0, [sp]
   15f64:	ldr	r2, [sp, #4]
   15f68:	ldr	r3, [r5]
   15f6c:	cmp	r2, r3
   15f70:	bne	15f7c <__assert_fail@plt+0x4858>
   15f74:	add	sp, sp, #12
   15f78:	pop	{r4, r5, pc}
   15f7c:	bl	113f4 <__stack_chk_fail@plt>
   15f80:	andeq	pc, r2, r8, lsl #30
   15f84:	push	{r4, r5, r6, r7, lr}
   15f88:	sub	sp, sp, #12
   15f8c:	ldr	r5, [pc, #276]	; 160a8 <__assert_fail@plt+0x4984>
   15f90:	mov	r3, #1
   15f94:	mov	r2, sp
   15f98:	ldr	ip, [r5]
   15f9c:	mov	r4, r0
   15fa0:	str	ip, [sp, #4]
   15fa4:	bl	150c0 <__assert_fail@plt+0x399c>
   15fa8:	subs	r6, r0, #0
   15fac:	beq	15fcc <__assert_fail@plt+0x48a8>
   15fb0:	ldr	r2, [sp]
   15fb4:	ldr	r3, [r4, #16]
   15fb8:	ldr	r2, [r2]
   15fbc:	sub	r3, r3, #1
   15fc0:	cmp	r2, #0
   15fc4:	str	r3, [r4, #16]
   15fc8:	beq	15fe8 <__assert_fail@plt+0x48c4>
   15fcc:	ldr	r2, [sp, #4]
   15fd0:	ldr	r3, [r5]
   15fd4:	mov	r0, r6
   15fd8:	cmp	r2, r3
   15fdc:	bne	160a4 <__assert_fail@plt+0x4980>
   15fe0:	add	sp, sp, #12
   15fe4:	pop	{r4, r5, r6, r7, pc}
   15fe8:	vldr	s15, [r4, #8]
   15fec:	ldr	r3, [r4, #12]
   15ff0:	ldr	r2, [r4, #20]
   15ff4:	sub	r3, r3, #1
   15ff8:	vcvt.f32.u32	s14, s15
   15ffc:	vldr	s13, [r2]
   16000:	vmov	s15, r3
   16004:	str	r3, [r4, #12]
   16008:	vcvt.f32.u32	s15, s15
   1600c:	vmul.f32	s14, s14, s13
   16010:	vcmpe.f32	s15, s14
   16014:	vmrs	APSR_nzcv, fpscr
   16018:	bpl	15fcc <__assert_fail@plt+0x48a8>
   1601c:	add	r0, r4, #20
   16020:	bl	151d8 <__assert_fail@plt+0x3ab4>
   16024:	vldr	s15, [r4, #8]
   16028:	ldr	r3, [r4, #20]
   1602c:	vldr	s13, [r4, #12]
   16030:	vcvt.f32.u32	s15, s15
   16034:	vldr	s14, [r3]
   16038:	vcvt.f32.u32	s13, s13
   1603c:	vmul.f32	s14, s15, s14
   16040:	vcmpe.f32	s13, s14
   16044:	vmrs	APSR_nzcv, fpscr
   16048:	bpl	15fcc <__assert_fail@plt+0x48a8>
   1604c:	vldr	s14, [r3, #4]
   16050:	ldrb	r2, [r3, #16]
   16054:	mov	r0, r4
   16058:	vmul.f32	s15, s15, s14
   1605c:	cmp	r2, #0
   16060:	vldreq	s14, [r3, #8]
   16064:	vmuleq.f32	s15, s15, s14
   16068:	vcvt.u32.f32	s15, s15
   1606c:	vmov	r1, s15
   16070:	bl	15be4 <__assert_fail@plt+0x44c0>
   16074:	cmp	r0, #0
   16078:	bne	15fcc <__assert_fail@plt+0x48a8>
   1607c:	ldr	r0, [r4, #36]	; 0x24
   16080:	cmp	r0, #0
   16084:	beq	16098 <__assert_fail@plt+0x4974>
   16088:	ldr	r7, [r0, #4]
   1608c:	bl	11388 <free@plt>
   16090:	subs	r0, r7, #0
   16094:	bne	16088 <__assert_fail@plt+0x4964>
   16098:	mov	r3, #0
   1609c:	str	r3, [r4, #36]	; 0x24
   160a0:	b	15fcc <__assert_fail@plt+0x48a8>
   160a4:	bl	113f4 <__stack_chk_fail@plt>
   160a8:	andeq	pc, r2, r8, lsl #30
   160ac:	push	{r4, r5, r6, lr}
   160b0:	mov	r4, r0
   160b4:	ldr	r0, [r0]
   160b8:	mov	r5, r1
   160bc:	bl	1be04 <__assert_fail@plt+0xa6e0>
   160c0:	ldr	ip, [r4, #8]
   160c4:	mov	r2, r5
   160c8:	ldr	r1, [r4, #12]
   160cc:	mov	r3, #0
   160d0:	eor	r0, r0, ip
   160d4:	bl	1e398 <__assert_fail@plt+0xcc74>
   160d8:	mov	r0, r2
   160dc:	pop	{r4, r5, r6, pc}
   160e0:	push	{r4, lr}
   160e4:	mov	r2, r1
   160e8:	mov	r3, #0
   160ec:	ldrd	r0, [r0, #8]
   160f0:	bl	1e398 <__assert_fail@plt+0xcc74>
   160f4:	mov	r0, r2
   160f8:	pop	{r4, pc}
   160fc:	ldrd	r2, [r1, #8]
   16100:	push	{r4, r5}
   16104:	ldrd	r4, [r0, #8]
   16108:	cmp	r5, r3
   1610c:	cmpeq	r4, r2
   16110:	beq	16120 <__assert_fail@plt+0x49fc>
   16114:	mov	r0, #0
   16118:	pop	{r4, r5}
   1611c:	bx	lr
   16120:	ldrd	r4, [r0, #16]
   16124:	ldrd	r2, [r1, #16]
   16128:	cmp	r5, r3
   1612c:	cmpeq	r4, r2
   16130:	bne	16114 <__assert_fail@plt+0x49f0>
   16134:	ldr	r1, [r1]
   16138:	ldr	r0, [r0]
   1613c:	pop	{r4, r5}
   16140:	b	197a8 <__assert_fail@plt+0x8084>
   16144:	ldrd	r2, [r1, #8]
   16148:	push	{r4, r5, r6, lr}
   1614c:	ldrd	r4, [r0, #8]
   16150:	cmp	r5, r3
   16154:	cmpeq	r4, r2
   16158:	beq	16164 <__assert_fail@plt+0x4a40>
   1615c:	mov	r0, #0
   16160:	pop	{r4, r5, r6, pc}
   16164:	ldrd	r4, [r0, #16]
   16168:	ldrd	r2, [r1, #16]
   1616c:	cmp	r5, r3
   16170:	cmpeq	r4, r2
   16174:	bne	1615c <__assert_fail@plt+0x4a38>
   16178:	ldr	r1, [r1]
   1617c:	ldr	r0, [r0]
   16180:	bl	11358 <strcmp@plt>
   16184:	clz	r0, r0
   16188:	lsr	r0, r0, #5
   1618c:	pop	{r4, r5, r6, pc}
   16190:	push	{r4, lr}
   16194:	mov	r4, r0
   16198:	ldr	r0, [r0]
   1619c:	bl	11388 <free@plt>
   161a0:	mov	r0, r4
   161a4:	pop	{r4, lr}
   161a8:	b	11388 <free@plt>
   161ac:	andeq	r0, r0, r0
   161b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161b4:	vpush	{d8-d9}
   161b8:	mov	r8, r3
   161bc:	ands	r3, r3, #32
   161c0:	mov	r5, r2
   161c4:	sub	sp, sp, #124	; 0x7c
   161c8:	mov	r7, r1
   161cc:	str	r3, [sp, #32]
   161d0:	ldr	r3, [pc, #1360]	; 16728 <__assert_fail@plt+0x5004>
   161d4:	str	r2, [sp, #24]
   161d8:	movne	r2, #1024	; 0x400
   161dc:	ldr	r3, [r3]
   161e0:	moveq	r2, #1000	; 0x3e8
   161e4:	str	r2, [sp, #28]
   161e8:	str	r3, [sp, #116]	; 0x74
   161ec:	mov	r6, r0
   161f0:	bl	11670 <localeconv@plt>
   161f4:	add	r3, r5, #644	; 0x284
   161f8:	str	r3, [sp, #48]	; 0x30
   161fc:	add	r3, r3, #3
   16200:	str	r3, [sp, #12]
   16204:	ldr	r2, [r0]
   16208:	mov	r4, r0
   1620c:	mov	r0, r2
   16210:	mov	r5, r2
   16214:	bl	11550 <strlen@plt>
   16218:	ldr	r9, [r4, #4]
   1621c:	ldr	r3, [pc, #1288]	; 1672c <__assert_fail@plt+0x5008>
   16220:	sub	r2, r0, #1
   16224:	cmp	r2, #16
   16228:	movcc	r3, r5
   1622c:	mov	fp, r0
   16230:	mov	r0, r9
   16234:	movcs	fp, #1
   16238:	str	r3, [sp, #36]	; 0x24
   1623c:	bl	11550 <strlen@plt>
   16240:	ldr	r3, [pc, #1256]	; 16730 <__assert_fail@plt+0x500c>
   16244:	and	r2, r8, #3
   16248:	str	r2, [sp, #16]
   1624c:	ldr	sl, [r4, #8]
   16250:	cmp	r0, #16
   16254:	movhi	r9, r3
   16258:	ldrd	r0, [sp, #176]	; 0xb0
   1625c:	ldrd	r2, [sp, #184]	; 0xb8
   16260:	cmp	r3, r1
   16264:	cmpeq	r2, r0
   16268:	bhi	16500 <__assert_fail@plt+0x4ddc>
   1626c:	bl	1e398 <__assert_fail@plt+0xcc74>
   16270:	orrs	r3, r2, r3
   16274:	bne	162a8 <__assert_fail@plt+0x4b84>
   16278:	mul	r2, r0, r7
   1627c:	umull	r4, r5, r0, r6
   16280:	mla	r2, r6, r1, r2
   16284:	mov	r3, r1
   16288:	add	r5, r2, r5
   1628c:	mov	r1, r5
   16290:	mov	r2, r0
   16294:	mov	r0, r4
   16298:	bl	1e398 <__assert_fail@plt+0xcc74>
   1629c:	cmp	r1, r7
   162a0:	cmpeq	r0, r6
   162a4:	beq	16864 <__assert_fail@plt+0x5140>
   162a8:	ldrd	r0, [sp, #176]	; 0xb0
   162ac:	bl	1e324 <__assert_fail@plt+0xcc00>
   162b0:	vmov	d9, r0, r1
   162b4:	ldrd	r0, [sp, #184]	; 0xb8
   162b8:	bl	1e324 <__assert_fail@plt+0xcc00>
   162bc:	vmov	d7, r0, r1
   162c0:	mov	r0, r6
   162c4:	mov	r1, r7
   162c8:	vdiv.f64	d8, d9, d7
   162cc:	bl	1e324 <__assert_fail@plt+0xcc00>
   162d0:	tst	r8, #16
   162d4:	vmov	d7, r0, r1
   162d8:	vmul.f64	d8, d8, d7
   162dc:	beq	16448 <__assert_fail@plt+0x4d24>
   162e0:	vldr	s15, [sp, #28]
   162e4:	mov	r6, #0
   162e8:	vcvt.f64.s32	d6, s15
   162ec:	vmov.f64	d7, d6
   162f0:	vmov.f64	d5, d7
   162f4:	vmul.f64	d7, d7, d6
   162f8:	add	r6, r6, #1
   162fc:	vcmpe.f64	d7, d8
   16300:	vmrs	APSR_nzcv, fpscr
   16304:	bhi	16310 <__assert_fail@plt+0x4bec>
   16308:	cmp	r6, #8
   1630c:	bne	162f0 <__assert_fail@plt+0x4bcc>
   16310:	ldr	r3, [sp, #32]
   16314:	clz	r4, r3
   16318:	ldr	r3, [sp, #16]
   1631c:	lsr	r4, r4, #5
   16320:	add	fp, fp, #1
   16324:	add	r4, r4, #1
   16328:	cmp	r3, #1
   1632c:	vdiv.f64	d9, d8, d5
   16330:	add	r4, r4, fp
   16334:	beq	16920 <__assert_fail@plt+0x51fc>
   16338:	vldr	d7, [pc, #984]	; 16718 <__assert_fail@plt+0x4ff4>
   1633c:	vcmpe.f64	d9, d7
   16340:	vmrs	APSR_nzcv, fpscr
   16344:	vmovpl.f64	d7, d9
   16348:	bpl	1638c <__assert_fail@plt+0x4c68>
   1634c:	vmov	r0, r1, d9
   16350:	bl	1e3e8 <__assert_fail@plt+0xccc4>
   16354:	mov	r5, r0
   16358:	mov	r7, r1
   1635c:	bl	1e324 <__assert_fail@plt+0xcc00>
   16360:	ldr	r3, [sp, #16]
   16364:	cmp	r3, #0
   16368:	vmov	d7, r0, r1
   1636c:	bne	1638c <__assert_fail@plt+0x4c68>
   16370:	vcmp.f64	d9, d7
   16374:	vmrs	APSR_nzcv, fpscr
   16378:	beq	1638c <__assert_fail@plt+0x4c68>
   1637c:	adds	r0, r5, #1
   16380:	adc	r1, r7, #0
   16384:	bl	1e324 <__assert_fail@plt+0xcc00>
   16388:	vmov	d7, r0, r1
   1638c:	ldr	r5, [sp, #24]
   16390:	vstr	d7, [sp]
   16394:	ldr	r3, [pc, #928]	; 1673c <__assert_fail@plt+0x5018>
   16398:	mvn	r2, #0
   1639c:	mov	r1, #1
   163a0:	mov	r0, r5
   163a4:	bl	1158c <__sprintf_chk@plt>
   163a8:	mov	r0, r5
   163ac:	bl	11550 <strlen@plt>
   163b0:	cmp	r0, r4
   163b4:	bls	167fc <__assert_fail@plt+0x50d8>
   163b8:	vldr	d7, [pc, #864]	; 16720 <__assert_fail@plt+0x4ffc>
   163bc:	vmul.f64	d9, d9, d7
   163c0:	vldr	d7, [pc, #848]	; 16718 <__assert_fail@plt+0x4ff4>
   163c4:	vcmpe.f64	d9, d7
   163c8:	vmrs	APSR_nzcv, fpscr
   163cc:	bpl	16414 <__assert_fail@plt+0x4cf0>
   163d0:	vmov	r0, r1, d9
   163d4:	bl	1e3e8 <__assert_fail@plt+0xccc4>
   163d8:	mov	r4, r0
   163dc:	mov	r5, r1
   163e0:	bl	1e324 <__assert_fail@plt+0xcc00>
   163e4:	ldr	r3, [sp, #16]
   163e8:	cmp	r3, #0
   163ec:	vmov	d7, r0, r1
   163f0:	bne	16410 <__assert_fail@plt+0x4cec>
   163f4:	vcmp.f64	d9, d7
   163f8:	vmrs	APSR_nzcv, fpscr
   163fc:	beq	16410 <__assert_fail@plt+0x4cec>
   16400:	adds	r0, r4, #1
   16404:	adc	r1, r5, #0
   16408:	bl	1e324 <__assert_fail@plt+0xcc00>
   1640c:	vmov	d7, r0, r1
   16410:	vmov.f64	d9, d7
   16414:	vldr	d6, [pc, #772]	; 16720 <__assert_fail@plt+0x4ffc>
   16418:	ldr	r4, [sp, #24]
   1641c:	ldr	r3, [pc, #784]	; 16734 <__assert_fail@plt+0x5010>
   16420:	mvn	r2, #0
   16424:	vdiv.f64	d7, d9, d6
   16428:	mov	r1, #1
   1642c:	mov	r0, r4
   16430:	vstr	d7, [sp]
   16434:	bl	1158c <__sprintf_chk@plt>
   16438:	mov	r0, r4
   1643c:	bl	11550 <strlen@plt>
   16440:	mov	r7, r0
   16444:	b	16490 <__assert_fail@plt+0x4d6c>
   16448:	and	r6, r8, #3
   1644c:	cmp	r6, #1
   16450:	beq	16464 <__assert_fail@plt+0x4d40>
   16454:	vldr	d7, [pc, #700]	; 16718 <__assert_fail@plt+0x4ff4>
   16458:	vcmpe.f64	d8, d7
   1645c:	vmrs	APSR_nzcv, fpscr
   16460:	bmi	16820 <__assert_fail@plt+0x50fc>
   16464:	ldr	r4, [sp, #24]
   16468:	ldr	r3, [pc, #708]	; 16734 <__assert_fail@plt+0x5010>
   1646c:	mvn	r2, #0
   16470:	mov	r1, #1
   16474:	vstr	d8, [sp]
   16478:	mov	r0, r4
   1647c:	bl	1158c <__sprintf_chk@plt>
   16480:	mov	r0, r4
   16484:	bl	11550 <strlen@plt>
   16488:	mvn	r6, #0
   1648c:	mov	r7, r0
   16490:	ldr	r3, [sp, #12]
   16494:	mov	r2, r0
   16498:	sub	fp, r3, r0
   1649c:	mov	r0, fp
   164a0:	ldr	r1, [sp, #24]
   164a4:	add	r7, fp, r7
   164a8:	bl	1137c <memmove@plt>
   164ac:	tst	r8, #4
   164b0:	bne	16670 <__assert_fail@plt+0x4f4c>
   164b4:	tst	r8, #128	; 0x80
   164b8:	beq	164d0 <__assert_fail@plt+0x4dac>
   164bc:	cmn	r6, #1
   164c0:	beq	16740 <__assert_fail@plt+0x501c>
   164c4:	and	r3, r8, #256	; 0x100
   164c8:	orrs	r2, r3, r6
   164cc:	bne	169a8 <__assert_fail@plt+0x5284>
   164d0:	ldr	r2, [sp, #12]
   164d4:	mov	r3, #0
   164d8:	mov	r0, fp
   164dc:	strb	r3, [r2]
   164e0:	ldr	r3, [pc, #576]	; 16728 <__assert_fail@plt+0x5004>
   164e4:	ldr	r2, [sp, #116]	; 0x74
   164e8:	ldr	r3, [r3]
   164ec:	cmp	r2, r3
   164f0:	bne	16b74 <__assert_fail@plt+0x5450>
   164f4:	add	sp, sp, #124	; 0x7c
   164f8:	vpop	{d8-d9}
   164fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16500:	ldrd	r2, [sp, #176]	; 0xb0
   16504:	orrs	r3, r2, r3
   16508:	beq	162a8 <__assert_fail@plt+0x4b84>
   1650c:	ldrd	r2, [sp, #176]	; 0xb0
   16510:	ldrd	r0, [sp, #184]	; 0xb8
   16514:	bl	1e398 <__assert_fail@plt+0xcc74>
   16518:	orrs	r3, r2, r3
   1651c:	mov	r4, r0
   16520:	mov	r5, r1
   16524:	bne	162a8 <__assert_fail@plt+0x4b84>
   16528:	mov	r0, r6
   1652c:	mov	r1, r7
   16530:	mov	r2, r4
   16534:	mov	r3, r5
   16538:	bl	1e398 <__assert_fail@plt+0xcc74>
   1653c:	strd	r0, [sp, #52]	; 0x34
   16540:	lsl	r0, r2, #2
   16544:	lsl	r1, r3, #2
   16548:	adds	r0, r0, r2
   1654c:	orr	r1, r1, r2, lsr #30
   16550:	adc	r1, r1, r3
   16554:	adds	r0, r0, r0
   16558:	adc	r1, r1, r1
   1655c:	mov	r2, r4
   16560:	mov	r3, r5
   16564:	bl	1e398 <__assert_fail@plt+0xcc74>
   16568:	adds	r1, r2, r2
   1656c:	adc	r3, r3, r3
   16570:	str	r3, [sp, #44]	; 0x2c
   16574:	str	r1, [sp, #40]	; 0x28
   16578:	ldrd	r6, [sp, #40]	; 0x28
   1657c:	mov	r3, r5
   16580:	mov	lr, r0
   16584:	cmp	r5, r7
   16588:	cmpeq	r4, r6
   1658c:	ldrd	r4, [sp, #52]	; 0x34
   16590:	bls	16994 <__assert_fail@plt+0x5270>
   16594:	mov	r3, r6
   16598:	orrs	r3, r3, r7
   1659c:	movne	r3, #1
   165a0:	moveq	r3, #0
   165a4:	mov	ip, r3
   165a8:	ands	r3, r8, #16
   165ac:	str	r3, [sp, #52]	; 0x34
   165b0:	beq	1687c <__assert_fail@plt+0x5158>
   165b4:	ldr	r1, [sp, #28]
   165b8:	mov	r3, #0
   165bc:	mov	r2, r1
   165c0:	cmp	r3, r5
   165c4:	cmpeq	r1, r4
   165c8:	strd	r2, [sp, #40]	; 0x28
   165cc:	mov	r6, #0
   165d0:	bhi	16880 <__assert_fail@plt+0x515c>
   165d4:	str	r9, [sp, #56]	; 0x38
   165d8:	str	r8, [sp, #68]	; 0x44
   165dc:	mov	r7, ip
   165e0:	str	fp, [sp, #60]	; 0x3c
   165e4:	mov	r9, r1
   165e8:	str	sl, [sp, #64]	; 0x40
   165ec:	mov	r8, lr
   165f0:	b	16618 <__assert_fail@plt+0x4ef4>
   165f4:	adds	r7, r7, #0
   165f8:	movne	r7, #1
   165fc:	ldrd	r2, [sp, #40]	; 0x28
   16600:	add	r6, r6, #1
   16604:	cmp	r3, fp
   16608:	cmpeq	r2, sl
   1660c:	bhi	16a18 <__assert_fail@plt+0x52f4>
   16610:	cmp	r6, #8
   16614:	beq	169e0 <__assert_fail@plt+0x52bc>
   16618:	mov	r0, r4
   1661c:	mov	r1, r5
   16620:	ldrd	r2, [sp, #40]	; 0x28
   16624:	bl	1e398 <__assert_fail@plt+0xcc74>
   16628:	add	r2, r2, r2, lsl #2
   1662c:	mov	sl, r0
   16630:	mov	fp, r1
   16634:	add	r0, r8, r2, lsl #1
   16638:	mov	r1, r9
   1663c:	bl	1dfb8 <__assert_fail@plt+0xc894>
   16640:	asr	r3, r7, #1
   16644:	mov	r4, sl
   16648:	mov	r5, fp
   1664c:	add	r1, r3, r1, lsl #1
   16650:	cmp	r9, r1
   16654:	mov	r8, r0
   16658:	add	r7, r7, r1
   1665c:	bhi	165f4 <__assert_fail@plt+0x4ed0>
   16660:	cmp	r9, r7
   16664:	movcc	r7, #3
   16668:	movcs	r7, #2
   1666c:	b	165fc <__assert_fail@plt+0x4ed8>
   16670:	mov	r0, r9
   16674:	bl	11550 <strlen@plt>
   16678:	sub	r4, r7, fp
   1667c:	add	r3, sp, #72	; 0x48
   16680:	mov	r1, fp
   16684:	mov	r2, r4
   16688:	mvn	r5, #0
   1668c:	str	r0, [sp, #16]
   16690:	mov	r0, r3
   16694:	mov	r3, #41	; 0x29
   16698:	bl	11454 <__memcpy_chk@plt>
   1669c:	ldr	fp, [sp, #16]
   166a0:	ldrb	r3, [sl]
   166a4:	cmp	r3, #0
   166a8:	beq	166bc <__assert_fail@plt+0x4f98>
   166ac:	cmp	r3, #255	; 0xff
   166b0:	movne	r5, r3
   166b4:	moveq	r5, r4
   166b8:	add	sl, sl, #1
   166bc:	cmp	r5, r4
   166c0:	bls	166dc <__assert_fail@plt+0x4fb8>
   166c4:	sub	fp, r7, r4
   166c8:	mov	r2, r4
   166cc:	add	r1, sp, #72	; 0x48
   166d0:	mov	r0, fp
   166d4:	bl	113a0 <memcpy@plt>
   166d8:	b	164b4 <__assert_fail@plt+0x4d90>
   166dc:	sub	r4, r4, r5
   166e0:	add	r3, sp, #72	; 0x48
   166e4:	sub	r7, r7, r5
   166e8:	add	r1, r3, r4
   166ec:	mov	r0, r7
   166f0:	mov	r2, r5
   166f4:	bl	113a0 <memcpy@plt>
   166f8:	cmp	r4, #0
   166fc:	beq	16b78 <__assert_fail@plt+0x5454>
   16700:	sub	r7, r7, fp
   16704:	mov	r0, r7
   16708:	mov	r2, fp
   1670c:	mov	r1, r9
   16710:	bl	113a0 <memcpy@plt>
   16714:	b	166a0 <__assert_fail@plt+0x4f7c>
   16718:	andeq	r0, r0, r0
   1671c:	mvnsmi	r0, #0
   16720:	andeq	r0, r0, r0
   16724:	eormi	r0, r4, r0
   16728:	andeq	pc, r2, r8, lsl #30
   1672c:	ldrdeq	pc, [r1], -r8
   16730:	andeq	pc, r1, ip, asr #13
   16734:	andeq	pc, r1, r8, lsl #14
   16738:	andeq	pc, r1, r8, ror #13
   1673c:	andeq	pc, r1, r0, lsl r7	; <UNPREDICTABLE>
   16740:	ldrd	r2, [sp, #184]	; 0xb8
   16744:	cmp	r3, #0
   16748:	cmpeq	r2, #1
   1674c:	bls	169d8 <__assert_fail@plt+0x52b4>
   16750:	ldr	r1, [sp, #28]
   16754:	ldrd	r4, [sp, #184]	; 0xb8
   16758:	mov	r6, #1
   1675c:	mov	r2, #1
   16760:	mov	r3, #0
   16764:	mul	r0, r1, r3
   16768:	umull	r2, r3, r2, r1
   1676c:	add	r3, r0, r3
   16770:	cmp	r5, r3
   16774:	cmpeq	r4, r2
   16778:	bls	16788 <__assert_fail@plt+0x5064>
   1677c:	add	r6, r6, #1
   16780:	cmp	r6, #8
   16784:	bne	16764 <__assert_fail@plt+0x5040>
   16788:	tst	r8, #64	; 0x40
   1678c:	and	r3, r8, #256	; 0x100
   16790:	beq	167b0 <__assert_fail@plt+0x508c>
   16794:	ldr	r1, [sp, #24]
   16798:	add	r2, r1, #648	; 0x288
   1679c:	str	r2, [sp, #12]
   167a0:	mov	r2, #32
   167a4:	strb	r2, [r1, #647]	; 0x287
   167a8:	cmp	r6, #0
   167ac:	beq	16b80 <__assert_fail@plt+0x545c>
   167b0:	ldr	r0, [sp, #32]
   167b4:	cmp	r6, #1
   167b8:	cmpeq	r0, #0
   167bc:	beq	169fc <__assert_fail@plt+0x52d8>
   167c0:	ldr	r1, [pc, #-144]	; 16738 <__assert_fail@plt+0x5014>
   167c4:	cmp	r3, #0
   167c8:	ldr	r2, [sp, #12]
   167cc:	ldrb	r3, [r1, r6]
   167d0:	strb	r3, [r2], #1
   167d4:	beq	16a10 <__assert_fail@plt+0x52ec>
   167d8:	cmp	r0, #0
   167dc:	movne	r3, #105	; 0x69
   167e0:	ldrne	r2, [sp, #12]
   167e4:	strbne	r3, [r2, #1]
   167e8:	addne	r2, r2, #2
   167ec:	mov	r3, #66	; 0x42
   167f0:	strb	r3, [r2], #1
   167f4:	str	r2, [sp, #12]
   167f8:	b	164d0 <__assert_fail@plt+0x4dac>
   167fc:	tst	r8, #8
   16800:	beq	16818 <__assert_fail@plt+0x50f4>
   16804:	ldr	r3, [sp, #24]
   16808:	add	r3, r3, r0
   1680c:	ldrb	r3, [r3, #-1]
   16810:	cmp	r3, #48	; 0x30
   16814:	beq	16ad0 <__assert_fail@plt+0x53ac>
   16818:	sub	r7, r0, fp
   1681c:	b	16490 <__assert_fail@plt+0x4d6c>
   16820:	vmov	r0, r1, d8
   16824:	bl	1e3e8 <__assert_fail@plt+0xccc4>
   16828:	mov	r4, r0
   1682c:	mov	r5, r1
   16830:	bl	1e324 <__assert_fail@plt+0xcc00>
   16834:	cmp	r6, #0
   16838:	vmov	d7, r0, r1
   1683c:	bne	1685c <__assert_fail@plt+0x5138>
   16840:	vcmp.f64	d8, d7
   16844:	vmrs	APSR_nzcv, fpscr
   16848:	beq	1685c <__assert_fail@plt+0x5138>
   1684c:	adds	r0, r4, #1
   16850:	adc	r1, r5, #0
   16854:	bl	1e324 <__assert_fail@plt+0xcc00>
   16858:	vmov	d7, r0, r1
   1685c:	vmov.f64	d8, d7
   16860:	b	16464 <__assert_fail@plt+0x4d40>
   16864:	mov	r3, #0
   16868:	mov	ip, r3
   1686c:	mov	lr, r3
   16870:	ands	r3, r8, #16
   16874:	str	r3, [sp, #52]	; 0x34
   16878:	bne	165b4 <__assert_fail@plt+0x4e90>
   1687c:	mvn	r6, #0
   16880:	ldr	r3, [sp, #16]
   16884:	cmp	r3, #1
   16888:	ldrne	r7, [sp, #12]
   1688c:	beq	16958 <__assert_fail@plt+0x5234>
   16890:	ldr	r3, [sp, #16]
   16894:	cmp	r3, #0
   16898:	bne	168d0 <__assert_fail@plt+0x51ac>
   1689c:	add	r3, lr, ip
   168a0:	cmp	r3, #0
   168a4:	ble	168d0 <__assert_fail@plt+0x51ac>
   168a8:	ldr	r3, [sp, #52]	; 0x34
   168ac:	adds	r4, r4, #1
   168b0:	adc	r5, r5, #0
   168b4:	cmp	r3, #0
   168b8:	beq	168d0 <__assert_fail@plt+0x51ac>
   168bc:	ldr	r2, [sp, #28]
   168c0:	mov	r3, #0
   168c4:	cmp	r3, r5
   168c8:	cmpeq	r2, r4
   168cc:	beq	169b4 <__assert_fail@plt+0x5290>
   168d0:	mov	fp, r7
   168d4:	b	168e0 <__assert_fail@plt+0x51bc>
   168d8:	mov	r4, r0
   168dc:	mov	r5, r1
   168e0:	mov	r2, #10
   168e4:	mov	r3, #0
   168e8:	mov	r0, r4
   168ec:	mov	r1, r5
   168f0:	bl	1e398 <__assert_fail@plt+0xcc74>
   168f4:	mov	r0, r4
   168f8:	mov	r1, r5
   168fc:	mov	r3, #0
   16900:	add	r2, r2, #48	; 0x30
   16904:	strb	r2, [fp, #-1]!
   16908:	mov	r2, #10
   1690c:	bl	1e398 <__assert_fail@plt+0xcc74>
   16910:	cmp	r5, #0
   16914:	cmpeq	r4, #9
   16918:	bhi	168d8 <__assert_fail@plt+0x51b4>
   1691c:	b	164ac <__assert_fail@plt+0x4d88>
   16920:	ldr	r5, [sp, #24]
   16924:	ldr	r3, [pc, #-496]	; 1673c <__assert_fail@plt+0x5018>
   16928:	mvn	r2, #0
   1692c:	ldr	r1, [sp, #16]
   16930:	vstr	d9, [sp]
   16934:	mov	r0, r5
   16938:	bl	1158c <__sprintf_chk@plt>
   1693c:	mov	r0, r5
   16940:	bl	11550 <strlen@plt>
   16944:	cmp	r0, r4
   16948:	bls	167fc <__assert_fail@plt+0x50d8>
   1694c:	vldr	d7, [pc, #572]	; 16b90 <__assert_fail@plt+0x546c>
   16950:	vmul.f64	d9, d9, d7
   16954:	b	16414 <__assert_fail@plt+0x4cf0>
   16958:	and	r3, r4, #1
   1695c:	str	r3, [sp, #16]
   16960:	mov	r3, #0
   16964:	str	r3, [sp, #20]
   16968:	ldrd	r2, [sp, #16]
   1696c:	ldr	r7, [sp, #12]
   16970:	adds	r2, r2, ip
   16974:	adc	r3, r3, ip, asr #31
   16978:	orr	r2, r2, r3
   1697c:	mov	r3, lr
   16980:	cmp	r2, #0
   16984:	addne	r3, r3, #1
   16988:	cmp	r3, #5
   1698c:	bgt	168a8 <__assert_fail@plt+0x5184>
   16990:	b	168d0 <__assert_fail@plt+0x51ac>
   16994:	movcs	r3, #2
   16998:	movcs	ip, r3
   1699c:	movcc	r3, #3
   169a0:	movcc	ip, r3
   169a4:	b	165a8 <__assert_fail@plt+0x4e84>
   169a8:	tst	r8, #64	; 0x40
   169ac:	beq	167a8 <__assert_fail@plt+0x5084>
   169b0:	b	16794 <__assert_fail@plt+0x5070>
   169b4:	cmp	r6, #8
   169b8:	beq	168d0 <__assert_fail@plt+0x51ac>
   169bc:	tst	r8, #8
   169c0:	add	r6, r6, #1
   169c4:	beq	16b40 <__assert_fail@plt+0x541c>
   169c8:	mov	r3, #49	; 0x31
   169cc:	strb	r3, [r7, #-1]
   169d0:	sub	fp, r7, #1
   169d4:	b	164ac <__assert_fail@plt+0x4d88>
   169d8:	mov	r6, #0
   169dc:	b	164c4 <__assert_fail@plt+0x4da0>
   169e0:	mov	lr, r8
   169e4:	ldr	r9, [sp, #56]	; 0x38
   169e8:	mov	ip, r7
   169ec:	ldr	fp, [sp, #60]	; 0x3c
   169f0:	ldr	sl, [sp, #64]	; 0x40
   169f4:	ldr	r8, [sp, #68]	; 0x44
   169f8:	b	16880 <__assert_fail@plt+0x515c>
   169fc:	ldr	r2, [sp, #12]
   16a00:	cmp	r3, #0
   16a04:	mov	r3, #107	; 0x6b
   16a08:	strb	r3, [r2], #1
   16a0c:	bne	167ec <__assert_fail@plt+0x50c8>
   16a10:	str	r2, [sp, #12]
   16a14:	b	164d0 <__assert_fail@plt+0x4dac>
   16a18:	mov	r3, fp
   16a1c:	mov	r2, sl
   16a20:	cmp	r3, #0
   16a24:	cmpeq	r2, #9
   16a28:	mov	lr, r8
   16a2c:	ldr	r9, [sp, #56]	; 0x38
   16a30:	mov	ip, r7
   16a34:	strd	r2, [sp, #40]	; 0x28
   16a38:	ldr	fp, [sp, #60]	; 0x3c
   16a3c:	ldr	sl, [sp, #64]	; 0x40
   16a40:	ldr	r8, [sp, #68]	; 0x44
   16a44:	bhi	16880 <__assert_fail@plt+0x515c>
   16a48:	ldr	r3, [sp, #16]
   16a4c:	cmp	r3, #1
   16a50:	beq	16afc <__assert_fail@plt+0x53d8>
   16a54:	ldr	r2, [sp, #16]
   16a58:	adds	r3, r7, #0
   16a5c:	movne	r3, #1
   16a60:	cmp	r2, #0
   16a64:	movne	r3, #0
   16a68:	cmp	r3, #0
   16a6c:	bne	16ae8 <__assert_fail@plt+0x53c4>
   16a70:	cmp	r0, #0
   16a74:	addne	r3, r0, #48	; 0x30
   16a78:	uxtbne	r3, r3
   16a7c:	bne	16a8c <__assert_fail@plt+0x5368>
   16a80:	tst	r8, #8
   16a84:	bne	16b14 <__assert_fail@plt+0x53f0>
   16a88:	mov	r3, #48	; 0x30
   16a8c:	ldr	r2, [sp, #48]	; 0x30
   16a90:	ldr	r1, [sp, #36]	; 0x24
   16a94:	add	r7, r2, #2
   16a98:	ldr	r2, [sp, #24]
   16a9c:	sub	r7, r7, fp
   16aa0:	mov	r0, r7
   16aa4:	strb	r3, [r2, #646]	; 0x286
   16aa8:	mov	r2, fp
   16aac:	bl	113a0 <memcpy@plt>
   16ab0:	mov	r3, #0
   16ab4:	mov	ip, r3
   16ab8:	ldr	r3, [sp, #16]
   16abc:	cmp	r3, #1
   16ac0:	beq	168d0 <__assert_fail@plt+0x51ac>
   16ac4:	mov	r3, #0
   16ac8:	mov	lr, r3
   16acc:	b	16890 <__assert_fail@plt+0x516c>
   16ad0:	vldr	d7, [pc, #184]	; 16b90 <__assert_fail@plt+0x546c>
   16ad4:	ldr	r3, [sp, #16]
   16ad8:	cmp	r3, #1
   16adc:	vmul.f64	d9, d9, d7
   16ae0:	bne	163c0 <__assert_fail@plt+0x4c9c>
   16ae4:	b	16414 <__assert_fail@plt+0x4cf0>
   16ae8:	cmp	r0, #9
   16aec:	beq	16b1c <__assert_fail@plt+0x53f8>
   16af0:	add	r3, r0, #49	; 0x31
   16af4:	uxtb	r3, r3
   16af8:	b	16a8c <__assert_fail@plt+0x5368>
   16afc:	and	r3, r0, #1
   16b00:	add	r3, r3, r7
   16b04:	cmp	r3, #2
   16b08:	movle	r3, #0
   16b0c:	movgt	r3, #1
   16b10:	b	16a68 <__assert_fail@plt+0x5344>
   16b14:	ldr	r7, [sp, #12]
   16b18:	b	16ab8 <__assert_fail@plt+0x5394>
   16b1c:	ldrd	r2, [sp, #40]	; 0x28
   16b20:	adds	r4, r2, #1
   16b24:	adc	r5, r3, #0
   16b28:	cmp	r5, #0
   16b2c:	cmpeq	r4, #10
   16b30:	beq	16b64 <__assert_fail@plt+0x5440>
   16b34:	mov	r3, #0
   16b38:	mov	ip, r3
   16b3c:	b	16a80 <__assert_fail@plt+0x535c>
   16b40:	mov	r2, #48	; 0x30
   16b44:	mvn	r3, fp
   16b48:	strb	r2, [r7, #-1]
   16b4c:	add	r7, r7, r3
   16b50:	ldr	r1, [sp, #36]	; 0x24
   16b54:	mov	r2, fp
   16b58:	mov	r0, r7
   16b5c:	bl	113a0 <memcpy@plt>
   16b60:	b	169c8 <__assert_fail@plt+0x52a4>
   16b64:	mov	r3, #0
   16b68:	ldr	r7, [sp, #12]
   16b6c:	mov	ip, r3
   16b70:	b	16ab8 <__assert_fail@plt+0x5394>
   16b74:	bl	113f4 <__stack_chk_fail@plt>
   16b78:	mov	fp, r7
   16b7c:	b	164b4 <__assert_fail@plt+0x4d90>
   16b80:	cmp	r3, #0
   16b84:	ldrne	r2, [sp, #12]
   16b88:	bne	167ec <__assert_fail@plt+0x50c8>
   16b8c:	b	164d0 <__assert_fail@plt+0x4dac>
   16b90:	andeq	r0, r0, r0
   16b94:	eormi	r0, r4, r0
   16b98:	push	{r4, r5, r6, r7, r8, r9, lr}
   16b9c:	sub	sp, sp, #20
   16ba0:	ldr	r6, [pc, #424]	; 16d50 <__assert_fail@plt+0x562c>
   16ba4:	subs	r4, r0, #0
   16ba8:	mov	r9, r1
   16bac:	ldr	r3, [r6]
   16bb0:	mov	r7, r2
   16bb4:	str	r3, [sp, #12]
   16bb8:	beq	16cc8 <__assert_fail@plt+0x55a4>
   16bbc:	ldrb	r3, [r4]
   16bc0:	ldr	r5, [pc, #396]	; 16d54 <__assert_fail@plt+0x5630>
   16bc4:	cmp	r3, #39	; 0x27
   16bc8:	addeq	r4, r4, #1
   16bcc:	mov	r3, #4
   16bd0:	add	r2, r5, #12
   16bd4:	add	r1, r5, #20
   16bd8:	mov	r0, r4
   16bdc:	moveq	r8, #4
   16be0:	movne	r8, #0
   16be4:	bl	1b9cc <__assert_fail@plt+0xa2a8>
   16be8:	cmp	r0, #0
   16bec:	blt	16c28 <__assert_fail@plt+0x5504>
   16bf0:	add	r5, r5, r0, lsl #2
   16bf4:	mov	r2, #1
   16bf8:	ldr	r1, [r5, #12]
   16bfc:	mov	r3, #0
   16c00:	mov	r0, #0
   16c04:	orr	r8, r8, r1
   16c08:	strd	r2, [r7]
   16c0c:	str	r8, [r9]
   16c10:	ldr	r2, [sp, #12]
   16c14:	ldr	r3, [r6]
   16c18:	cmp	r2, r3
   16c1c:	bne	16d4c <__assert_fail@plt+0x5628>
   16c20:	add	sp, sp, #20
   16c24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16c28:	ldr	r2, [pc, #296]	; 16d58 <__assert_fail@plt+0x5634>
   16c2c:	mov	r3, r7
   16c30:	str	r2, [sp]
   16c34:	add	r1, sp, #8
   16c38:	mov	r2, #0
   16c3c:	mov	r0, r4
   16c40:	bl	1a0fc <__assert_fail@plt+0x89d8>
   16c44:	cmp	r0, #0
   16c48:	bne	16c90 <__assert_fail@plt+0x556c>
   16c4c:	ldrb	r3, [r4]
   16c50:	sub	r3, r3, #48	; 0x30
   16c54:	cmp	r3, #9
   16c58:	bls	16c84 <__assert_fail@plt+0x5560>
   16c5c:	ldr	r2, [sp, #8]
   16c60:	cmp	r4, r2
   16c64:	bne	16c74 <__assert_fail@plt+0x5550>
   16c68:	b	16d20 <__assert_fail@plt+0x55fc>
   16c6c:	cmp	r2, r4
   16c70:	beq	16d20 <__assert_fail@plt+0x55fc>
   16c74:	ldrb	r3, [r4, #1]!
   16c78:	sub	r3, r3, #48	; 0x30
   16c7c:	cmp	r3, #9
   16c80:	bhi	16c6c <__assert_fail@plt+0x5548>
   16c84:	ldrd	r2, [r7]
   16c88:	str	r8, [r9]
   16c8c:	b	16c9c <__assert_fail@plt+0x5578>
   16c90:	mov	r3, #0
   16c94:	str	r3, [r9]
   16c98:	ldrd	r2, [r7]
   16c9c:	orrs	r3, r2, r3
   16ca0:	bne	16c10 <__assert_fail@plt+0x54ec>
   16ca4:	ldr	r0, [pc, #176]	; 16d5c <__assert_fail@plt+0x5638>
   16ca8:	bl	114d8 <getenv@plt>
   16cac:	mov	r3, #0
   16cb0:	cmp	r0, #0
   16cb4:	moveq	r2, #1024	; 0x400
   16cb8:	movne	r2, #512	; 0x200
   16cbc:	mov	r0, #4
   16cc0:	strd	r2, [r7]
   16cc4:	b	16c10 <__assert_fail@plt+0x54ec>
   16cc8:	ldr	r0, [pc, #144]	; 16d60 <__assert_fail@plt+0x563c>
   16ccc:	bl	114d8 <getenv@plt>
   16cd0:	subs	r4, r0, #0
   16cd4:	bne	16bbc <__assert_fail@plt+0x5498>
   16cd8:	ldr	r0, [pc, #132]	; 16d64 <__assert_fail@plt+0x5640>
   16cdc:	bl	114d8 <getenv@plt>
   16ce0:	subs	r4, r0, #0
   16ce4:	bne	16bbc <__assert_fail@plt+0x5498>
   16ce8:	ldr	r0, [pc, #108]	; 16d5c <__assert_fail@plt+0x5638>
   16cec:	bl	114d8 <getenv@plt>
   16cf0:	subs	r3, r0, #0
   16cf4:	moveq	r4, #1024	; 0x400
   16cf8:	moveq	r5, #0
   16cfc:	movne	r2, #512	; 0x200
   16d00:	movne	r3, #0
   16d04:	strdeq	r4, [r7]
   16d08:	strdne	r2, [r7]
   16d0c:	moveq	r0, r3
   16d10:	streq	r3, [r9]
   16d14:	movne	r0, r4
   16d18:	strne	r4, [r9]
   16d1c:	b	16c10 <__assert_fail@plt+0x54ec>
   16d20:	ldrb	r3, [r2, #-1]
   16d24:	cmp	r3, #66	; 0x42
   16d28:	orrne	r8, r8, #128	; 0x80
   16d2c:	beq	16d38 <__assert_fail@plt+0x5614>
   16d30:	orr	r8, r8, #32
   16d34:	b	16c84 <__assert_fail@plt+0x5560>
   16d38:	ldrb	r3, [r2, #-2]
   16d3c:	orr	r8, r8, #384	; 0x180
   16d40:	cmp	r3, #105	; 0x69
   16d44:	bne	16c84 <__assert_fail@plt+0x5560>
   16d48:	b	16d30 <__assert_fail@plt+0x560c>
   16d4c:	bl	113f4 <__stack_chk_fail@plt>
   16d50:	andeq	pc, r2, r8, lsl #30
   16d54:	andeq	pc, r1, r8, ror #13
   16d58:	andeq	pc, r1, r0, lsr r7	; <UNPREDICTABLE>
   16d5c:	muleq	r1, r4, r2
   16d60:	andeq	pc, r1, r8, lsl r7	; <UNPREDICTABLE>
   16d64:	andeq	pc, r1, r4, lsr #14
   16d68:	push	{r4, r5, r6, lr}
   16d6c:	mov	r4, r0
   16d70:	mov	r5, r1
   16d74:	add	r6, r2, #20
   16d78:	mov	r3, #0
   16d7c:	strb	r3, [r2, #20]
   16d80:	mov	r0, r4
   16d84:	mov	r1, r5
   16d88:	mov	r2, #10
   16d8c:	mov	r3, #0
   16d90:	bl	1e398 <__assert_fail@plt+0xcc74>
   16d94:	mov	r0, r4
   16d98:	mov	r1, r5
   16d9c:	mov	r3, #0
   16da0:	add	r2, r2, #48	; 0x30
   16da4:	strb	r2, [r6, #-1]!
   16da8:	mov	r2, #10
   16dac:	bl	1e398 <__assert_fail@plt+0xcc74>
   16db0:	cmp	r5, #0
   16db4:	cmpeq	r4, #9
   16db8:	mov	r5, r1
   16dbc:	mov	r4, r0
   16dc0:	bhi	16d80 <__assert_fail@plt+0x565c>
   16dc4:	mov	r0, r6
   16dc8:	pop	{r4, r5, r6, pc}
   16dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dd0:	sub	sp, sp, #12
   16dd4:	mov	r6, r1
   16dd8:	mov	r4, r2
   16ddc:	mov	r9, r3
   16de0:	str	r0, [sp]
   16de4:	bl	11550 <strlen@plt>
   16de8:	ldr	r7, [sp, #52]	; 0x34
   16dec:	ands	sl, r7, #2
   16df0:	mov	fp, r0
   16df4:	beq	16f30 <__assert_fail@plt+0x580c>
   16df8:	mov	r8, #0
   16dfc:	mov	sl, r8
   16e00:	mov	r5, fp
   16e04:	ldr	r2, [r9]
   16e08:	cmp	r2, r5
   16e0c:	movcc	fp, r2
   16e10:	movcc	r1, #0
   16e14:	bcs	16f00 <__assert_fail@plt+0x57dc>
   16e18:	ldr	r3, [sp, #48]	; 0x30
   16e1c:	str	r2, [r9]
   16e20:	cmp	r3, #0
   16e24:	beq	16f24 <__assert_fail@plt+0x5800>
   16e28:	cmp	r3, #1
   16e2c:	moveq	r5, #0
   16e30:	lsrne	r5, r1, #1
   16e34:	andne	r1, r1, #1
   16e38:	addne	r1, r1, r5
   16e3c:	tst	r7, #4
   16e40:	addeq	r9, r1, fp
   16e44:	movne	r9, fp
   16e48:	movne	r1, #0
   16e4c:	tst	r7, #8
   16e50:	movne	r5, #0
   16e54:	cmp	r4, #0
   16e58:	beq	16edc <__assert_fail@plt+0x57b8>
   16e5c:	sub	r4, r4, #1
   16e60:	add	r4, r6, r4
   16e64:	cmp	r1, #0
   16e68:	cmpne	r6, r4
   16e6c:	mov	r0, r6
   16e70:	bcs	16e90 <__assert_fail@plt+0x576c>
   16e74:	mov	lr, #32
   16e78:	strb	lr, [r0], #1
   16e7c:	rsb	r3, r1, #0
   16e80:	sub	r2, r6, r0
   16e84:	cmp	r3, r2
   16e88:	cmpne	r4, r0
   16e8c:	bhi	16e78 <__assert_fail@plt+0x5754>
   16e90:	sub	r2, r4, r0
   16e94:	cmp	r2, fp
   16e98:	mov	ip, #0
   16e9c:	movcs	r2, fp
   16ea0:	ldr	r1, [sp]
   16ea4:	strb	ip, [r0]
   16ea8:	bl	11514 <mempcpy@plt>
   16eac:	cmp	r5, #0
   16eb0:	cmpne	r4, r0
   16eb4:	mov	r3, r0
   16eb8:	bls	16ed4 <__assert_fail@plt+0x57b0>
   16ebc:	mov	r1, #32
   16ec0:	strb	r1, [r3], #1
   16ec4:	sub	r2, r3, r5
   16ec8:	cmp	r0, r2
   16ecc:	cmpne	r4, r3
   16ed0:	bhi	16ec0 <__assert_fail@plt+0x579c>
   16ed4:	mov	r2, #0
   16ed8:	strb	r2, [r3]
   16edc:	add	r5, r5, r9
   16ee0:	mov	r0, r8
   16ee4:	bl	11388 <free@plt>
   16ee8:	mov	r0, sl
   16eec:	bl	11388 <free@plt>
   16ef0:	mov	r0, r5
   16ef4:	add	sp, sp, #12
   16ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16efc:	mov	sl, #0
   16f00:	ldr	r3, [sp, #48]	; 0x30
   16f04:	cmp	r5, r2
   16f08:	subcc	r1, r2, r5
   16f0c:	movcs	r2, r5
   16f10:	movcc	r2, r5
   16f14:	movcs	r1, #0
   16f18:	cmp	r3, #0
   16f1c:	str	r2, [r9]
   16f20:	bne	16e28 <__assert_fail@plt+0x5704>
   16f24:	mov	r5, r1
   16f28:	ldr	r1, [sp, #48]	; 0x30
   16f2c:	b	16e3c <__assert_fail@plt+0x5718>
   16f30:	bl	11478 <__ctype_get_mb_cur_max@plt>
   16f34:	cmp	r0, #1
   16f38:	bls	16df8 <__assert_fail@plt+0x56d4>
   16f3c:	mov	r2, sl
   16f40:	ldr	r1, [sp]
   16f44:	mov	r0, sl
   16f48:	bl	1167c <mbstowcs@plt>
   16f4c:	cmn	r0, #1
   16f50:	bne	16f6c <__assert_fail@plt+0x5848>
   16f54:	tst	r7, #1
   16f58:	bne	16df8 <__assert_fail@plt+0x56d4>
   16f5c:	mov	r8, #0
   16f60:	mov	sl, r8
   16f64:	mvn	r5, #0
   16f68:	b	16ee0 <__assert_fail@plt+0x57bc>
   16f6c:	add	r5, r0, #1
   16f70:	lsl	r3, r5, #2
   16f74:	mov	r0, r3
   16f78:	str	r3, [sp, #4]
   16f7c:	bl	114e4 <malloc@plt>
   16f80:	subs	r8, r0, #0
   16f84:	beq	170a4 <__assert_fail@plt+0x5980>
   16f88:	mov	r2, r5
   16f8c:	ldr	r1, [sp]
   16f90:	bl	1167c <mbstowcs@plt>
   16f94:	cmp	r0, #0
   16f98:	beq	170fc <__assert_fail@plt+0x59d8>
   16f9c:	ldr	r3, [sp, #4]
   16fa0:	add	r3, r8, r3
   16fa4:	str	sl, [r3, #-4]
   16fa8:	ldr	r2, [r8]
   16fac:	cmp	r2, #0
   16fb0:	beq	170b8 <__assert_fail@plt+0x5994>
   16fb4:	str	r4, [sp, #4]
   16fb8:	mov	r0, r2
   16fbc:	mov	r4, r8
   16fc0:	bl	1143c <iswprint@plt>
   16fc4:	cmp	r0, #0
   16fc8:	moveq	sl, #1
   16fcc:	ldreq	r3, [pc, #320]	; 17114 <__assert_fail@plt+0x59f0>
   16fd0:	streq	r3, [r4]
   16fd4:	ldr	r0, [r4, #4]!
   16fd8:	cmp	r0, #0
   16fdc:	bne	16fc0 <__assert_fail@plt+0x589c>
   16fe0:	ldr	r4, [sp, #4]
   16fe4:	mov	r1, r5
   16fe8:	str	r0, [sp, #4]
   16fec:	mov	r0, r8
   16ff0:	bl	11634 <wcswidth@plt>
   16ff4:	cmp	sl, #0
   16ff8:	ldr	r2, [sp, #4]
   16ffc:	mov	r5, r0
   17000:	beq	170c8 <__assert_fail@plt+0x59a4>
   17004:	mov	r0, r2
   17008:	mov	r1, r8
   1700c:	bl	114a8 <wcstombs@plt>
   17010:	add	r3, r0, #1
   17014:	str	r3, [sp, #4]
   17018:	ldr	r0, [sp, #4]
   1701c:	bl	114e4 <malloc@plt>
   17020:	subs	sl, r0, #0
   17024:	beq	170ec <__assert_fail@plt+0x59c8>
   17028:	ldr	r0, [r8]
   1702c:	ldr	r3, [r9]
   17030:	cmp	r0, #0
   17034:	beq	17108 <__assert_fail@plt+0x59e4>
   17038:	str	r4, [sp]
   1703c:	mov	fp, r8
   17040:	mov	r5, #0
   17044:	mov	r4, r3
   17048:	b	1705c <__assert_fail@plt+0x5938>
   1704c:	ldr	r0, [fp, #4]!
   17050:	mov	r5, r3
   17054:	cmp	r0, #0
   17058:	beq	1707c <__assert_fail@plt+0x5958>
   1705c:	bl	11370 <wcwidth@plt>
   17060:	cmn	r0, #1
   17064:	moveq	r0, #1
   17068:	ldreq	r3, [pc, #164]	; 17114 <__assert_fail@plt+0x59f0>
   1706c:	streq	r3, [fp]
   17070:	add	r3, r0, r5
   17074:	cmp	r4, r3
   17078:	bcs	1704c <__assert_fail@plt+0x5928>
   1707c:	ldr	r4, [sp]
   17080:	mov	r1, #0
   17084:	str	r1, [fp]
   17088:	ldr	r2, [sp, #4]
   1708c:	mov	r1, r8
   17090:	mov	r0, sl
   17094:	bl	114a8 <wcstombs@plt>
   17098:	str	sl, [sp]
   1709c:	mov	fp, r0
   170a0:	b	16e04 <__assert_fail@plt+0x56e0>
   170a4:	tst	r7, #1
   170a8:	movne	r5, fp
   170ac:	movne	sl, r8
   170b0:	bne	16e04 <__assert_fail@plt+0x56e0>
   170b4:	b	16f5c <__assert_fail@plt+0x5838>
   170b8:	mov	r1, r5
   170bc:	mov	r0, r8
   170c0:	bl	11634 <wcswidth@plt>
   170c4:	mov	r5, r0
   170c8:	ldr	r2, [r9]
   170cc:	cmp	r2, r5
   170d0:	bcs	16efc <__assert_fail@plt+0x57d8>
   170d4:	add	r3, fp, #1
   170d8:	str	r3, [sp, #4]
   170dc:	ldr	r0, [sp, #4]
   170e0:	bl	114e4 <malloc@plt>
   170e4:	subs	sl, r0, #0
   170e8:	bne	17028 <__assert_fail@plt+0x5904>
   170ec:	tst	r7, #1
   170f0:	mvneq	r5, #0
   170f4:	bne	16e04 <__assert_fail@plt+0x56e0>
   170f8:	b	16ee0 <__assert_fail@plt+0x57bc>
   170fc:	mov	sl, r0
   17100:	mov	r5, fp
   17104:	b	16e04 <__assert_fail@plt+0x56e0>
   17108:	mov	r5, r0
   1710c:	mov	fp, r8
   17110:	b	17080 <__assert_fail@plt+0x595c>
   17114:	strdeq	pc, [r0], -sp
   17118:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1711c:	mov	r9, r0
   17120:	ldr	r8, [r1]
   17124:	sub	sp, sp, #12
   17128:	mov	r6, r1
   1712c:	mov	fp, r2
   17130:	mov	sl, r3
   17134:	mov	r0, r8
   17138:	mov	r7, #0
   1713c:	add	r4, r0, #1
   17140:	mov	r1, r4
   17144:	mov	r0, r7
   17148:	bl	11400 <realloc@plt>
   1714c:	mov	r3, r6
   17150:	mov	r2, r4
   17154:	subs	r5, r0, #0
   17158:	mov	r1, r5
   1715c:	mov	r0, r9
   17160:	beq	17194 <__assert_fail@plt+0x5a70>
   17164:	str	r8, [r6]
   17168:	str	sl, [sp, #4]
   1716c:	str	fp, [sp]
   17170:	bl	16dcc <__assert_fail@plt+0x56a8>
   17174:	cmn	r0, #1
   17178:	beq	171a8 <__assert_fail@plt+0x5a84>
   1717c:	cmp	r4, r0
   17180:	mov	r7, r5
   17184:	bls	1713c <__assert_fail@plt+0x5a18>
   17188:	mov	r0, r5
   1718c:	add	sp, sp, #12
   17190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17194:	mov	r0, r7
   17198:	bl	11388 <free@plt>
   1719c:	mov	r0, r5
   171a0:	add	sp, sp, #12
   171a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171a8:	mov	r0, r5
   171ac:	bl	11388 <free@plt>
   171b0:	mov	r5, #0
   171b4:	mov	r0, r5
   171b8:	add	sp, sp, #12
   171bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171c4:	sub	sp, sp, #20
   171c8:	ldr	sl, [pc, #444]	; 1738c <__assert_fail@plt+0x5c68>
   171cc:	mov	r4, r0
   171d0:	add	r7, r0, r1
   171d4:	ldr	r3, [sl]
   171d8:	mov	r9, r2
   171dc:	str	r3, [sp, #12]
   171e0:	bl	11478 <__ctype_get_mb_cur_max@plt>
   171e4:	cmp	r0, #1
   171e8:	bls	17314 <__assert_fail@plt+0x5bf0>
   171ec:	cmp	r4, r7
   171f0:	mov	r6, #0
   171f4:	bcs	172f8 <__assert_fail@plt+0x5bd4>
   171f8:	and	r8, r9, #2
   171fc:	b	17224 <__assert_fail@plt+0x5b00>
   17200:	cmp	r3, #37	; 0x25
   17204:	bcs	17214 <__assert_fail@plt+0x5af0>
   17208:	sub	r3, r3, #32
   1720c:	cmp	r3, #3
   17210:	bhi	1724c <__assert_fail@plt+0x5b28>
   17214:	add	r4, r4, #1
   17218:	add	r6, r6, #1
   1721c:	cmp	r4, r7
   17220:	bcs	172f8 <__assert_fail@plt+0x5bd4>
   17224:	ldrb	r3, [r4]
   17228:	cmp	r3, #63	; 0x3f
   1722c:	bls	17200 <__assert_fail@plt+0x5adc>
   17230:	cmp	r3, #65	; 0x41
   17234:	bcc	1724c <__assert_fail@plt+0x5b28>
   17238:	cmp	r3, #95	; 0x5f
   1723c:	bls	17214 <__assert_fail@plt+0x5af0>
   17240:	sub	r3, r3, #97	; 0x61
   17244:	cmp	r3, #29
   17248:	bls	17214 <__assert_fail@plt+0x5af0>
   1724c:	mov	r3, #0
   17250:	mvn	fp, #-2147483648	; 0x80000000
   17254:	str	r3, [sp, #4]
   17258:	str	r3, [sp, #8]
   1725c:	b	17284 <__assert_fail@plt+0x5b60>
   17260:	sub	r3, fp, r6
   17264:	cmp	r3, r0
   17268:	blt	17380 <__assert_fail@plt+0x5c5c>
   1726c:	add	r6, r6, r0
   17270:	add	r0, sp, #4
   17274:	bl	113b8 <mbsinit@plt>
   17278:	add	r4, r4, r5
   1727c:	cmp	r0, #0
   17280:	bne	1721c <__assert_fail@plt+0x5af8>
   17284:	add	r3, sp, #4
   17288:	sub	r2, r7, r4
   1728c:	mov	r1, r4
   17290:	mov	r0, sp
   17294:	bl	1b00c <__assert_fail@plt+0x98e8>
   17298:	cmn	r0, #1
   1729c:	mov	r5, r0
   172a0:	beq	172ec <__assert_fail@plt+0x5bc8>
   172a4:	cmn	r0, #2
   172a8:	beq	1736c <__assert_fail@plt+0x5c48>
   172ac:	cmp	r0, #0
   172b0:	ldr	r0, [sp]
   172b4:	moveq	r5, #1
   172b8:	bl	11370 <wcwidth@plt>
   172bc:	cmp	r0, #0
   172c0:	bge	17260 <__assert_fail@plt+0x5b3c>
   172c4:	cmp	r8, #0
   172c8:	bne	172f4 <__assert_fail@plt+0x5bd0>
   172cc:	ldr	r0, [sp]
   172d0:	bl	11418 <iswcntrl@plt>
   172d4:	cmp	r0, #0
   172d8:	bne	17270 <__assert_fail@plt+0x5b4c>
   172dc:	cmn	r6, #-2147483647	; 0x80000001
   172e0:	beq	17380 <__assert_fail@plt+0x5c5c>
   172e4:	add	r6, r6, #1
   172e8:	b	17270 <__assert_fail@plt+0x5b4c>
   172ec:	tst	r9, #1
   172f0:	beq	17214 <__assert_fail@plt+0x5af0>
   172f4:	mvn	r6, #0
   172f8:	ldr	r2, [sp, #12]
   172fc:	ldr	r3, [sl]
   17300:	mov	r0, r6
   17304:	cmp	r2, r3
   17308:	bne	17388 <__assert_fail@plt+0x5c64>
   1730c:	add	sp, sp, #20
   17310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17314:	cmp	r4, r7
   17318:	movcs	r6, #0
   1731c:	bcs	172f8 <__assert_fail@plt+0x5bd4>
   17320:	bl	1152c <__ctype_b_loc@plt>
   17324:	mov	r6, #0
   17328:	and	r9, r9, #2
   1732c:	ldr	r2, [r0]
   17330:	ldrb	r3, [r4], #1
   17334:	lsl	r3, r3, #1
   17338:	ldrh	r3, [r2, r3]
   1733c:	tst	r3, #16384	; 0x4000
   17340:	bne	17354 <__assert_fail@plt+0x5c30>
   17344:	cmp	r9, #0
   17348:	bne	172f4 <__assert_fail@plt+0x5bd0>
   1734c:	tst	r3, #2
   17350:	bne	17360 <__assert_fail@plt+0x5c3c>
   17354:	cmn	r6, #-2147483647	; 0x80000001
   17358:	beq	172f8 <__assert_fail@plt+0x5bd4>
   1735c:	add	r6, r6, #1
   17360:	cmp	r7, r4
   17364:	bne	17330 <__assert_fail@plt+0x5c0c>
   17368:	b	172f8 <__assert_fail@plt+0x5bd4>
   1736c:	tst	r9, #1
   17370:	bne	172f4 <__assert_fail@plt+0x5bd0>
   17374:	add	r6, r6, #1
   17378:	mov	r4, r7
   1737c:	b	1721c <__assert_fail@plt+0x5af8>
   17380:	mvn	r6, #-2147483648	; 0x80000000
   17384:	b	172f8 <__assert_fail@plt+0x5bd4>
   17388:	bl	113f4 <__stack_chk_fail@plt>
   1738c:	andeq	pc, r2, r8, lsl #30
   17390:	push	{r4, r5, r6, lr}
   17394:	mov	r5, r1
   17398:	mov	r4, r0
   1739c:	bl	11550 <strlen@plt>
   173a0:	mov	r2, r5
   173a4:	mov	r1, r0
   173a8:	mov	r0, r4
   173ac:	pop	{r4, r5, r6, lr}
   173b0:	b	171c0 <__assert_fail@plt+0x5a9c>
   173b4:	push	{r4, r5, r6, lr}
   173b8:	subs	r4, r0, #0
   173bc:	beq	17430 <__assert_fail@plt+0x5d0c>
   173c0:	mov	r1, #47	; 0x2f
   173c4:	bl	11640 <strrchr@plt>
   173c8:	subs	r5, r0, #0
   173cc:	beq	1741c <__assert_fail@plt+0x5cf8>
   173d0:	add	r6, r5, #1
   173d4:	sub	r3, r6, r4
   173d8:	cmp	r3, #6
   173dc:	ble	1741c <__assert_fail@plt+0x5cf8>
   173e0:	mov	r2, #7
   173e4:	ldr	r1, [pc, #96]	; 1744c <__assert_fail@plt+0x5d28>
   173e8:	sub	r0, r5, #6
   173ec:	bl	116dc <strncmp@plt>
   173f0:	cmp	r0, #0
   173f4:	bne	1741c <__assert_fail@plt+0x5cf8>
   173f8:	mov	r2, #3
   173fc:	ldr	r1, [pc, #76]	; 17450 <__assert_fail@plt+0x5d2c>
   17400:	mov	r0, r6
   17404:	bl	116dc <strncmp@plt>
   17408:	cmp	r0, #0
   1740c:	movne	r4, r6
   17410:	ldreq	r3, [pc, #60]	; 17454 <__assert_fail@plt+0x5d30>
   17414:	addeq	r4, r5, #4
   17418:	streq	r4, [r3]
   1741c:	ldr	r2, [pc, #52]	; 17458 <__assert_fail@plt+0x5d34>
   17420:	ldr	r3, [pc, #52]	; 1745c <__assert_fail@plt+0x5d38>
   17424:	str	r4, [r2]
   17428:	str	r4, [r3]
   1742c:	pop	{r4, r5, r6, pc}
   17430:	ldr	r3, [pc, #40]	; 17460 <__assert_fail@plt+0x5d3c>
   17434:	mov	r2, #55	; 0x37
   17438:	mov	r1, #1
   1743c:	ldr	r3, [r3]
   17440:	ldr	r0, [pc, #28]	; 17464 <__assert_fail@plt+0x5d40>
   17444:	bl	11460 <fwrite@plt>
   17448:	bl	116e8 <abort@plt>
   1744c:	andeq	pc, r1, ip, ror r7	; <UNPREDICTABLE>
   17450:	andeq	pc, r1, r4, lsl #15
   17454:	andeq	r0, r3, r8, lsl r3
   17458:			; <UNDEFINED> instruction: 0x000303b8
   1745c:	andeq	r0, r3, ip, lsl r3
   17460:	andeq	r0, r3, r8, lsr #6
   17464:	andeq	pc, r1, r4, asr #14
   17468:	push	{r4, lr}
   1746c:	mov	r2, #48	; 0x30
   17470:	mov	r4, r1
   17474:	mov	r1, #0
   17478:	bl	115a4 <memset@plt>
   1747c:	cmp	r4, #10
   17480:	beq	1748c <__assert_fail@plt+0x5d68>
   17484:	str	r4, [r0]
   17488:	pop	{r4, pc}
   1748c:	bl	116e8 <abort@plt>
   17490:	push	{r4, r5, r6, lr}
   17494:	mov	r2, #5
   17498:	mov	r5, r0
   1749c:	mov	r6, r1
   174a0:	mov	r1, r0
   174a4:	mov	r0, #0
   174a8:	bl	113dc <dcgettext@plt>
   174ac:	cmp	r5, r0
   174b0:	mov	r4, r0
   174b4:	beq	174c0 <__assert_fail@plt+0x5d9c>
   174b8:	mov	r0, r4
   174bc:	pop	{r4, r5, r6, pc}
   174c0:	bl	1be40 <__assert_fail@plt+0xa71c>
   174c4:	ldrb	r3, [r0]
   174c8:	bic	r3, r3, #32
   174cc:	cmp	r3, #85	; 0x55
   174d0:	bne	17530 <__assert_fail@plt+0x5e0c>
   174d4:	ldrb	r3, [r0, #1]
   174d8:	bic	r3, r3, #32
   174dc:	cmp	r3, #84	; 0x54
   174e0:	bne	175a8 <__assert_fail@plt+0x5e84>
   174e4:	ldrb	r3, [r0, #2]
   174e8:	bic	r3, r3, #32
   174ec:	cmp	r3, #70	; 0x46
   174f0:	bne	175a8 <__assert_fail@plt+0x5e84>
   174f4:	ldrb	r3, [r0, #3]
   174f8:	cmp	r3, #45	; 0x2d
   174fc:	bne	175a8 <__assert_fail@plt+0x5e84>
   17500:	ldrb	r3, [r0, #4]
   17504:	cmp	r3, #56	; 0x38
   17508:	bne	175a8 <__assert_fail@plt+0x5e84>
   1750c:	ldrb	r3, [r0, #5]
   17510:	cmp	r3, #0
   17514:	bne	175a8 <__assert_fail@plt+0x5e84>
   17518:	ldrb	r2, [r4]
   1751c:	ldr	r3, [pc, #156]	; 175c0 <__assert_fail@plt+0x5e9c>
   17520:	ldr	r4, [pc, #156]	; 175c4 <__assert_fail@plt+0x5ea0>
   17524:	cmp	r2, #96	; 0x60
   17528:	movne	r4, r3
   1752c:	b	174b8 <__assert_fail@plt+0x5d94>
   17530:	cmp	r3, #71	; 0x47
   17534:	bne	175a8 <__assert_fail@plt+0x5e84>
   17538:	ldrb	r3, [r0, #1]
   1753c:	bic	r3, r3, #32
   17540:	cmp	r3, #66	; 0x42
   17544:	bne	175a8 <__assert_fail@plt+0x5e84>
   17548:	ldrb	r3, [r0, #2]
   1754c:	cmp	r3, #49	; 0x31
   17550:	bne	175a8 <__assert_fail@plt+0x5e84>
   17554:	ldrb	r3, [r0, #3]
   17558:	cmp	r3, #56	; 0x38
   1755c:	bne	175a8 <__assert_fail@plt+0x5e84>
   17560:	ldrb	r3, [r0, #4]
   17564:	cmp	r3, #48	; 0x30
   17568:	bne	175a8 <__assert_fail@plt+0x5e84>
   1756c:	ldrb	r3, [r0, #5]
   17570:	cmp	r3, #51	; 0x33
   17574:	bne	175a8 <__assert_fail@plt+0x5e84>
   17578:	ldrb	r3, [r0, #6]
   1757c:	cmp	r3, #48	; 0x30
   17580:	bne	175a8 <__assert_fail@plt+0x5e84>
   17584:	ldrb	r3, [r0, #7]
   17588:	cmp	r3, #0
   1758c:	bne	175a8 <__assert_fail@plt+0x5e84>
   17590:	ldrb	r2, [r4]
   17594:	ldr	r3, [pc, #44]	; 175c8 <__assert_fail@plt+0x5ea4>
   17598:	ldr	r4, [pc, #44]	; 175cc <__assert_fail@plt+0x5ea8>
   1759c:	cmp	r2, #96	; 0x60
   175a0:	movne	r4, r3
   175a4:	b	174b8 <__assert_fail@plt+0x5d94>
   175a8:	ldr	r3, [pc, #32]	; 175d0 <__assert_fail@plt+0x5eac>
   175ac:	ldr	r4, [pc, #32]	; 175d4 <__assert_fail@plt+0x5eb0>
   175b0:	cmp	r6, #9
   175b4:	movne	r4, r3
   175b8:	mov	r0, r4
   175bc:	pop	{r4, r5, r6, pc}
   175c0:	ldrdeq	pc, [r1], -ip
   175c4:	andeq	pc, r1, r8, ror #15
   175c8:	andeq	pc, r1, r0, ror #15
   175cc:	andeq	pc, r1, r4, ror #15
   175d0:	andeq	pc, r1, ip, ror #15
   175d4:	andeq	lr, r1, ip, ror #14
   175d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175dc:	sub	sp, sp, #124	; 0x7c
   175e0:	ldr	ip, [pc, #3576]	; 183e0 <__assert_fail@plt+0x6cbc>
   175e4:	str	r3, [sp, #24]
   175e8:	ldr	r3, [sp, #168]	; 0xa8
   175ec:	ldr	ip, [ip]
   175f0:	str	r3, [sp, #56]	; 0x38
   175f4:	ldr	r3, [sp, #172]	; 0xac
   175f8:	ldr	r8, [sp, #160]	; 0xa0
   175fc:	str	r3, [sp, #80]	; 0x50
   17600:	ldr	r3, [sp, #176]	; 0xb0
   17604:	mov	fp, r0
   17608:	str	r3, [sp, #76]	; 0x4c
   1760c:	mov	sl, r1
   17610:	str	r2, [sp, #36]	; 0x24
   17614:	str	ip, [sp, #116]	; 0x74
   17618:	bl	11478 <__ctype_get_mb_cur_max@plt>
   1761c:	ldr	r3, [sp, #164]	; 0xa4
   17620:	ands	r4, r3, #2
   17624:	movne	r3, #1
   17628:	moveq	r3, #0
   1762c:	str	r3, [sp, #32]
   17630:	str	r0, [sp, #64]	; 0x40
   17634:	cmp	r8, #10
   17638:	ldrls	pc, [pc, r8, lsl #2]
   1763c:	b	18dec <__assert_fail@plt+0x76c8>
   17640:	andeq	r7, r1, r4, lsr sl
   17644:	andeq	r7, r1, ip, asr #21
   17648:	andeq	r8, r1, ip, asr #1
   1764c:	andeq	r7, r1, ip, ror #21
   17650:	andeq	r7, r1, r0, lsr #19
   17654:	andeq	r7, r1, r8, ror #19
   17658:	andeq	r7, r1, r4, ror #20
   1765c:	muleq	r1, ip, sl
   17660:	andeq	r7, r1, ip, ror #12
   17664:	andeq	r7, r1, ip, ror #12
   17668:	andeq	r7, r1, ip, ror #12
   1766c:	cmp	r8, #10
   17670:	beq	17694 <__assert_fail@plt+0x5f70>
   17674:	mov	r1, r8
   17678:	ldr	r0, [pc, #3428]	; 183e4 <__assert_fail@plt+0x6cc0>
   1767c:	bl	17490 <__assert_fail@plt+0x5d6c>
   17680:	mov	r1, r8
   17684:	str	r0, [sp, #80]	; 0x50
   17688:	ldr	r0, [pc, #3420]	; 183ec <__assert_fail@plt+0x6cc8>
   1768c:	bl	17490 <__assert_fail@plt+0x5d6c>
   17690:	str	r0, [sp, #76]	; 0x4c
   17694:	cmp	r4, #0
   17698:	movne	r4, #0
   1769c:	beq	18aac <__assert_fail@plt+0x7388>
   176a0:	ldr	r7, [sp, #76]	; 0x4c
   176a4:	mov	r5, #0
   176a8:	mov	r6, #1
   176ac:	mov	r0, r7
   176b0:	str	r6, [sp, #40]	; 0x28
   176b4:	str	r5, [sp, #68]	; 0x44
   176b8:	bl	11550 <strlen@plt>
   176bc:	str	r6, [sp, #28]
   176c0:	str	r5, [sp, #44]	; 0x2c
   176c4:	str	r5, [sp, #72]	; 0x48
   176c8:	str	r7, [sp, #60]	; 0x3c
   176cc:	str	r0, [sp, #52]	; 0x34
   176d0:	str	r8, [sp, #160]	; 0xa0
   176d4:	mov	r8, fp
   176d8:	ldr	fp, [sp, #160]	; 0xa0
   176dc:	mov	r9, #0
   176e0:	ldr	r3, [sp, #24]
   176e4:	cmn	r3, #1
   176e8:	beq	17c50 <__assert_fail@plt+0x652c>
   176ec:	ldr	r3, [sp, #24]
   176f0:	subs	r6, r3, r9
   176f4:	movne	r6, #1
   176f8:	cmp	r6, #0
   176fc:	beq	17c68 <__assert_fail@plt+0x6544>
   17700:	ldr	r7, [sp, #28]
   17704:	ldr	r0, [sp, #36]	; 0x24
   17708:	cmp	fp, #2
   1770c:	moveq	r7, #0
   17710:	andne	r7, r7, #1
   17714:	add	r3, r0, r9
   17718:	cmp	r7, #0
   1771c:	str	r3, [sp, #48]	; 0x30
   17720:	beq	1810c <__assert_fail@plt+0x69e8>
   17724:	ldr	r2, [sp, #52]	; 0x34
   17728:	cmp	r2, #0
   1772c:	beq	183f0 <__assert_fail@plt+0x6ccc>
   17730:	ldr	r1, [sp, #24]
   17734:	cmp	r2, #1
   17738:	mov	r3, r2
   1773c:	movls	r3, #0
   17740:	movhi	r3, #1
   17744:	cmn	r1, #1
   17748:	movne	r3, #0
   1774c:	cmp	r3, #0
   17750:	add	r5, r9, r2
   17754:	beq	17760 <__assert_fail@plt+0x603c>
   17758:	bl	11550 <strlen@plt>
   1775c:	str	r0, [sp, #24]
   17760:	ldr	r3, [sp, #24]
   17764:	cmp	r5, r3
   17768:	bhi	183f0 <__assert_fail@plt+0x6ccc>
   1776c:	ldr	r2, [sp, #52]	; 0x34
   17770:	ldr	r1, [sp, #60]	; 0x3c
   17774:	ldr	r0, [sp, #48]	; 0x30
   17778:	bl	113c4 <memcmp@plt>
   1777c:	cmp	r0, #0
   17780:	bne	183f0 <__assert_fail@plt+0x6ccc>
   17784:	ldr	r3, [sp, #32]
   17788:	cmp	r3, #0
   1778c:	bne	18cac <__assert_fail@plt+0x7588>
   17790:	ldr	r3, [sp, #48]	; 0x30
   17794:	ldrb	r5, [r3]
   17798:	cmp	r5, #126	; 0x7e
   1779c:	ldrls	pc, [pc, r5, lsl #2]
   177a0:	b	18070 <__assert_fail@plt+0x694c>
   177a4:	andeq	r7, r1, ip, asr pc
   177a8:	andeq	r8, r1, r0, ror r0
   177ac:	andeq	r8, r1, r0, ror r0
   177b0:	andeq	r8, r1, r0, ror r0
   177b4:	andeq	r8, r1, r0, ror r0
   177b8:	andeq	r8, r1, r0, ror r0
   177bc:	andeq	r8, r1, r0, ror r0
   177c0:	andeq	r8, r1, r8, lsr #32
   177c4:	andeq	r8, r1, r8, lsl r0
   177c8:	andeq	r7, r1, r8, lsl pc
   177cc:	andeq	r7, r1, r0, ror #29
   177d0:	andeq	r7, r1, r8, lsr pc
   177d4:	andeq	r7, r1, r0, lsr #30
   177d8:	andeq	r7, r1, r0, asr lr
   177dc:	andeq	r8, r1, r0, ror r0
   177e0:	andeq	r8, r1, r0, ror r0
   177e4:	andeq	r8, r1, r0, ror r0
   177e8:	andeq	r8, r1, r0, ror r0
   177ec:	andeq	r8, r1, r0, ror r0
   177f0:	andeq	r8, r1, r0, ror r0
   177f4:	andeq	r8, r1, r0, ror r0
   177f8:	andeq	r8, r1, r0, ror r0
   177fc:	andeq	r8, r1, r0, ror r0
   17800:	andeq	r8, r1, r0, ror r0
   17804:	andeq	r8, r1, r0, ror r0
   17808:	andeq	r8, r1, r0, ror r0
   1780c:	andeq	r8, r1, r0, ror r0
   17810:	andeq	r8, r1, r0, ror r0
   17814:	andeq	r8, r1, r0, ror r0
   17818:	andeq	r8, r1, r0, ror r0
   1781c:	andeq	r8, r1, r0, ror r0
   17820:	andeq	r8, r1, r0, ror r0
   17824:	andeq	r8, r1, r0, lsr r0
   17828:	andeq	r7, r1, r4, asr #30
   1782c:	andeq	r7, r1, r4, asr #30
   17830:	andeq	r8, r1, r8, asr #32
   17834:	andeq	r7, r1, r4, asr #30
   17838:	andeq	r8, r1, r4, rrx
   1783c:	andeq	r7, r1, r4, asr #30
   17840:	andeq	r7, r1, r4, lsl #27
   17844:	andeq	r7, r1, r4, asr #30
   17848:	andeq	r7, r1, r4, asr #30
   1784c:	andeq	r7, r1, r4, asr #30
   17850:	andeq	r8, r1, r4, rrx
   17854:	andeq	r8, r1, r4, rrx
   17858:	andeq	r8, r1, r4, rrx
   1785c:	andeq	r8, r1, r4, rrx
   17860:	andeq	r8, r1, r4, rrx
   17864:	andeq	r8, r1, r4, rrx
   17868:	andeq	r8, r1, r4, rrx
   1786c:	andeq	r8, r1, r4, rrx
   17870:	andeq	r8, r1, r4, rrx
   17874:	andeq	r8, r1, r4, rrx
   17878:	andeq	r8, r1, r4, rrx
   1787c:	andeq	r8, r1, r4, rrx
   17880:	andeq	r8, r1, r4, rrx
   17884:	andeq	r8, r1, r4, rrx
   17888:	andeq	r8, r1, r4, rrx
   1788c:	andeq	r8, r1, r4, rrx
   17890:	andeq	r7, r1, r4, asr #30
   17894:	andeq	r7, r1, r4, asr #30
   17898:	andeq	r7, r1, r4, asr #30
   1789c:	andeq	r7, r1, r4, asr #30
   178a0:	andeq	r7, r1, r8, asr sp
   178a4:	andeq	r8, r1, r0, ror r0
   178a8:	andeq	r8, r1, r4, rrx
   178ac:	andeq	r8, r1, r4, rrx
   178b0:	andeq	r8, r1, r4, rrx
   178b4:	andeq	r8, r1, r4, rrx
   178b8:	andeq	r8, r1, r4, rrx
   178bc:	andeq	r8, r1, r4, rrx
   178c0:	andeq	r8, r1, r4, rrx
   178c4:	andeq	r8, r1, r4, rrx
   178c8:	andeq	r8, r1, r4, rrx
   178cc:	andeq	r8, r1, r4, rrx
   178d0:	andeq	r8, r1, r4, rrx
   178d4:	andeq	r8, r1, r4, rrx
   178d8:	andeq	r8, r1, r4, rrx
   178dc:	andeq	r8, r1, r4, rrx
   178e0:	andeq	r8, r1, r4, rrx
   178e4:	andeq	r8, r1, r4, rrx
   178e8:	andeq	r8, r1, r4, rrx
   178ec:	andeq	r8, r1, r4, rrx
   178f0:	andeq	r8, r1, r4, rrx
   178f4:	andeq	r8, r1, r4, rrx
   178f8:	andeq	r8, r1, r4, rrx
   178fc:	andeq	r8, r1, r4, rrx
   17900:	andeq	r8, r1, r4, rrx
   17904:	andeq	r8, r1, r4, rrx
   17908:	andeq	r8, r1, r4, rrx
   1790c:	andeq	r8, r1, r4, rrx
   17910:	andeq	r7, r1, r4, asr #30
   17914:	andeq	r7, r1, r0, lsl sp
   17918:	andeq	r8, r1, r4, rrx
   1791c:	andeq	r7, r1, r4, asr #30
   17920:	andeq	r8, r1, r4, rrx
   17924:	andeq	r7, r1, r4, asr #30
   17928:	andeq	r8, r1, r4, rrx
   1792c:	andeq	r8, r1, r4, rrx
   17930:	andeq	r8, r1, r4, rrx
   17934:	andeq	r8, r1, r4, rrx
   17938:	andeq	r8, r1, r4, rrx
   1793c:	andeq	r8, r1, r4, rrx
   17940:	andeq	r8, r1, r4, rrx
   17944:	andeq	r8, r1, r4, rrx
   17948:	andeq	r8, r1, r4, rrx
   1794c:	andeq	r8, r1, r4, rrx
   17950:	andeq	r8, r1, r4, rrx
   17954:	andeq	r8, r1, r4, rrx
   17958:	andeq	r8, r1, r4, rrx
   1795c:	andeq	r8, r1, r4, rrx
   17960:	andeq	r8, r1, r4, rrx
   17964:	andeq	r8, r1, r4, rrx
   17968:	andeq	r8, r1, r4, rrx
   1796c:	andeq	r8, r1, r4, rrx
   17970:	andeq	r8, r1, r4, rrx
   17974:	andeq	r8, r1, r4, rrx
   17978:	andeq	r8, r1, r4, rrx
   1797c:	andeq	r8, r1, r4, rrx
   17980:	andeq	r8, r1, r4, rrx
   17984:	andeq	r8, r1, r4, rrx
   17988:	andeq	r8, r1, r4, rrx
   1798c:	andeq	r8, r1, r4, rrx
   17990:	andeq	r7, r1, r8, lsr #22
   17994:	andeq	r7, r1, r4, asr #30
   17998:	andeq	r7, r1, r8, lsr #22
   1799c:	andeq	r8, r1, r8, asr #32
   179a0:	cmp	r4, #0
   179a4:	moveq	r3, #1
   179a8:	streq	r3, [sp, #28]
   179ac:	beq	180d8 <__assert_fail@plt+0x69b4>
   179b0:	mov	r3, #0
   179b4:	mov	r4, r3
   179b8:	mov	r2, #1
   179bc:	str	r2, [sp, #40]	; 0x28
   179c0:	str	r3, [sp, #68]	; 0x44
   179c4:	str	r2, [sp, #32]
   179c8:	str	r2, [sp, #52]	; 0x34
   179cc:	ldr	r3, [pc, #2584]	; 183ec <__assert_fail@plt+0x6cc8>
   179d0:	str	r4, [sp, #44]	; 0x2c
   179d4:	str	r4, [sp, #72]	; 0x48
   179d8:	str	r4, [sp, #28]
   179dc:	str	r3, [sp, #60]	; 0x3c
   179e0:	mov	r8, #2
   179e4:	b	176d0 <__assert_fail@plt+0x5fac>
   179e8:	cmp	r4, #0
   179ec:	bne	18c78 <__assert_fail@plt+0x7554>
   179f0:	cmp	sl, #0
   179f4:	beq	18a38 <__assert_fail@plt+0x7314>
   179f8:	mov	r3, #34	; 0x22
   179fc:	strb	r3, [fp]
   17a00:	ldr	r3, [pc, #2528]	; 183e8 <__assert_fail@plt+0x6cc4>
   17a04:	mov	r1, r4
   17a08:	mov	r2, #1
   17a0c:	str	r4, [sp, #68]	; 0x44
   17a10:	str	r2, [sp, #40]	; 0x28
   17a14:	mov	r4, r2
   17a18:	str	r1, [sp, #44]	; 0x2c
   17a1c:	str	r1, [sp, #72]	; 0x48
   17a20:	str	r1, [sp, #32]
   17a24:	str	r2, [sp, #28]
   17a28:	str	r2, [sp, #52]	; 0x34
   17a2c:	str	r3, [sp, #60]	; 0x3c
   17a30:	b	176d0 <__assert_fail@plt+0x5fac>
   17a34:	mov	r3, #0
   17a38:	str	r3, [sp, #68]	; 0x44
   17a3c:	str	r3, [sp, #44]	; 0x2c
   17a40:	str	r3, [sp, #32]
   17a44:	str	r3, [sp, #28]
   17a48:	str	r3, [sp, #60]	; 0x3c
   17a4c:	mov	r3, #1
   17a50:	str	r8, [sp, #72]	; 0x48
   17a54:	str	r8, [sp, #52]	; 0x34
   17a58:	mov	r4, r8
   17a5c:	str	r3, [sp, #40]	; 0x28
   17a60:	b	176d0 <__assert_fail@plt+0x5fac>
   17a64:	mov	r3, #1
   17a68:	str	r3, [sp, #40]	; 0x28
   17a6c:	str	r3, [sp, #32]
   17a70:	str	r3, [sp, #28]
   17a74:	str	r3, [sp, #52]	; 0x34
   17a78:	ldr	r3, [pc, #2408]	; 183e8 <__assert_fail@plt+0x6cc4>
   17a7c:	mov	r2, #0
   17a80:	mov	r4, r2
   17a84:	str	r2, [sp, #68]	; 0x44
   17a88:	str	r2, [sp, #44]	; 0x2c
   17a8c:	str	r2, [sp, #72]	; 0x48
   17a90:	str	r3, [sp, #60]	; 0x3c
   17a94:	mov	r8, #5
   17a98:	b	176d0 <__assert_fail@plt+0x5fac>
   17a9c:	mov	r3, #0
   17aa0:	mov	r2, #1
   17aa4:	str	r2, [sp, #40]	; 0x28
   17aa8:	mov	r4, r3
   17aac:	str	r3, [sp, #68]	; 0x44
   17ab0:	str	r2, [sp, #28]
   17ab4:	str	r3, [sp, #44]	; 0x2c
   17ab8:	str	r3, [sp, #72]	; 0x48
   17abc:	str	r3, [sp, #32]
   17ac0:	str	r3, [sp, #52]	; 0x34
   17ac4:	str	r3, [sp, #60]	; 0x3c
   17ac8:	b	176d0 <__assert_fail@plt+0x5fac>
   17acc:	mov	r2, #1
   17ad0:	mov	r3, #0
   17ad4:	str	r2, [sp, #40]	; 0x28
   17ad8:	mov	r4, r3
   17adc:	str	r3, [sp, #68]	; 0x44
   17ae0:	str	r8, [sp, #52]	; 0x34
   17ae4:	str	r2, [sp, #32]
   17ae8:	b	179cc <__assert_fail@plt+0x62a8>
   17aec:	mov	r3, #1
   17af0:	str	r3, [sp, #40]	; 0x28
   17af4:	str	r3, [sp, #32]
   17af8:	str	r3, [sp, #28]
   17afc:	str	r3, [sp, #52]	; 0x34
   17b00:	ldr	r3, [pc, #2276]	; 183ec <__assert_fail@plt+0x6cc8>
   17b04:	mov	r2, #0
   17b08:	mov	r4, r2
   17b0c:	str	r2, [sp, #68]	; 0x44
   17b10:	str	r2, [sp, #44]	; 0x2c
   17b14:	str	r2, [sp, #72]	; 0x48
   17b18:	str	r3, [sp, #60]	; 0x3c
   17b1c:	mov	r8, #2
   17b20:	b	176d0 <__assert_fail@plt+0x5fac>
   17b24:	mov	r7, #0
   17b28:	ldr	r3, [sp, #24]
   17b2c:	cmn	r3, #1
   17b30:	beq	1866c <__assert_fail@plt+0x6f48>
   17b34:	ldr	r3, [sp, #24]
   17b38:	subs	r3, r3, #1
   17b3c:	movne	r3, #1
   17b40:	cmp	r3, #0
   17b44:	sub	r2, fp, #2
   17b48:	clz	r2, r2
   17b4c:	lsr	r2, r2, #5
   17b50:	bne	17d4c <__assert_fail@plt+0x6628>
   17b54:	cmp	r9, #0
   17b58:	bne	17d4c <__assert_fail@plt+0x6628>
   17b5c:	ldr	r3, [sp, #32]
   17b60:	tst	r3, r2
   17b64:	bne	17e6c <__assert_fail@plt+0x6748>
   17b68:	ldr	r3, [sp, #28]
   17b6c:	eor	r3, r3, #1
   17b70:	orr	r3, r2, r3
   17b74:	ldr	r2, [sp, #32]
   17b78:	eor	r3, r3, #1
   17b7c:	orrs	r3, r2, r3
   17b80:	beq	17bb0 <__assert_fail@plt+0x648c>
   17b84:	mov	r3, #0
   17b88:	ldr	r1, [sp, #56]	; 0x38
   17b8c:	cmp	r1, #0
   17b90:	beq	17bb0 <__assert_fail@plt+0x648c>
   17b94:	lsr	r2, r5, #5
   17b98:	and	r0, r5, #31
   17b9c:	uxtb	r2, r2
   17ba0:	ldr	r1, [r1, r2, lsl #2]
   17ba4:	lsr	r2, r1, r0
   17ba8:	tst	r2, #1
   17bac:	bne	17bb8 <__assert_fail@plt+0x6494>
   17bb0:	cmp	r7, #0
   17bb4:	beq	17e08 <__assert_fail@plt+0x66e4>
   17bb8:	sub	r2, fp, #2
   17bbc:	clz	r2, r2
   17bc0:	lsr	r2, r2, #5
   17bc4:	ldr	r3, [sp, #32]
   17bc8:	cmp	r3, #0
   17bcc:	bne	17ef8 <__assert_fail@plt+0x67d4>
   17bd0:	ldr	r3, [sp, #44]	; 0x2c
   17bd4:	eor	r3, r3, #1
   17bd8:	ands	r3, r2, r3
   17bdc:	beq	17c14 <__assert_fail@plt+0x64f0>
   17be0:	cmp	sl, r4
   17be4:	movhi	r2, #39	; 0x27
   17be8:	strbhi	r2, [r8, r4]
   17bec:	add	r2, r4, #1
   17bf0:	cmp	r2, sl
   17bf4:	movcc	r1, #36	; 0x24
   17bf8:	strbcc	r1, [r8, r2]
   17bfc:	add	r2, r4, #2
   17c00:	cmp	r2, sl
   17c04:	add	r4, r4, #3
   17c08:	movcc	r1, #39	; 0x27
   17c0c:	strbcc	r1, [r8, r2]
   17c10:	str	r3, [sp, #44]	; 0x2c
   17c14:	cmp	r4, sl
   17c18:	movcc	r3, #92	; 0x5c
   17c1c:	strbcc	r3, [r8, r4]
   17c20:	add	r9, r9, #1
   17c24:	add	r4, r4, #1
   17c28:	cmp	r4, sl
   17c2c:	ldr	r3, [sp, #40]	; 0x28
   17c30:	strbcc	r5, [r8, r4]
   17c34:	cmp	r6, #0
   17c38:	moveq	r3, #0
   17c3c:	str	r3, [sp, #40]	; 0x28
   17c40:	ldr	r3, [sp, #24]
   17c44:	add	r4, r4, #1
   17c48:	cmn	r3, #1
   17c4c:	bne	176ec <__assert_fail@plt+0x5fc8>
   17c50:	ldr	r3, [sp, #36]	; 0x24
   17c54:	ldrb	r6, [r3, r9]
   17c58:	adds	r6, r6, #0
   17c5c:	movne	r6, #1
   17c60:	cmp	r6, #0
   17c64:	bne	17700 <__assert_fail@plt+0x5fdc>
   17c68:	str	fp, [sp, #160]	; 0xa0
   17c6c:	mov	fp, r8
   17c70:	ldr	r8, [sp, #160]	; 0xa0
   17c74:	ldr	r1, [sp, #32]
   17c78:	cmp	r4, #0
   17c7c:	sub	r2, r8, #2
   17c80:	clz	r2, r2
   17c84:	lsr	r2, r2, #5
   17c88:	andeq	r3, r2, r1
   17c8c:	movne	r3, #0
   17c90:	cmp	r3, #0
   17c94:	bne	18d80 <__assert_fail@plt+0x765c>
   17c98:	eor	r3, r1, #1
   17c9c:	ands	r2, r2, r3
   17ca0:	beq	18cbc <__assert_fail@plt+0x7598>
   17ca4:	ldr	r3, [sp, #68]	; 0x44
   17ca8:	cmp	r3, #0
   17cac:	beq	18cc0 <__assert_fail@plt+0x759c>
   17cb0:	ldr	r3, [sp, #40]	; 0x28
   17cb4:	cmp	r3, #0
   17cb8:	bne	18d3c <__assert_fail@plt+0x7618>
   17cbc:	ldr	r3, [sp, #72]	; 0x48
   17cc0:	adds	r3, r3, #0
   17cc4:	movne	r3, #1
   17cc8:	cmp	sl, #0
   17ccc:	movne	r3, #0
   17cd0:	cmp	r3, #0
   17cd4:	ldreq	r2, [sp, #68]	; 0x44
   17cd8:	beq	18cc0 <__assert_fail@plt+0x759c>
   17cdc:	ldr	sl, [sp, #72]	; 0x48
   17ce0:	str	r3, [sp, #68]	; 0x44
   17ce4:	ldr	r3, [pc, #1792]	; 183ec <__assert_fail@plt+0x6cc8>
   17ce8:	mov	r2, #39	; 0x27
   17cec:	mov	r4, #1
   17cf0:	str	r3, [sp, #60]	; 0x3c
   17cf4:	mov	r3, #0
   17cf8:	strb	r2, [fp]
   17cfc:	str	r4, [sp, #52]	; 0x34
   17d00:	mov	r8, #2
   17d04:	str	r3, [sp, #32]
   17d08:	b	176d0 <__assert_fail@plt+0x5fac>
   17d0c:	mov	r7, #0
   17d10:	cmp	fp, #2
   17d14:	beq	1864c <__assert_fail@plt+0x6f28>
   17d18:	ldr	r3, [sp, #52]	; 0x34
   17d1c:	ldr	r2, [sp, #28]
   17d20:	ldr	r1, [sp, #32]
   17d24:	cmp	r3, #0
   17d28:	andne	r2, r2, r1
   17d2c:	moveq	r2, #0
   17d30:	cmp	r2, #0
   17d34:	moveq	r5, #92	; 0x5c
   17d38:	moveq	r3, r5
   17d3c:	bne	18658 <__assert_fail@plt+0x6f34>
   17d40:	ldr	r1, [sp, #28]
   17d44:	cmp	r1, #0
   17d48:	bne	18dc8 <__assert_fail@plt+0x76a4>
   17d4c:	mov	r6, #0
   17d50:	b	17b68 <__assert_fail@plt+0x6444>
   17d54:	mov	r7, #0
   17d58:	cmp	fp, #2
   17d5c:	beq	186bc <__assert_fail@plt+0x6f98>
   17d60:	cmp	fp, #5
   17d64:	beq	18680 <__assert_fail@plt+0x6f5c>
   17d68:	sub	r2, fp, #2
   17d6c:	mov	r6, #0
   17d70:	clz	r2, r2
   17d74:	mov	r5, #63	; 0x3f
   17d78:	lsr	r2, r2, #5
   17d7c:	b	17b68 <__assert_fail@plt+0x6444>
   17d80:	mov	r7, #0
   17d84:	cmp	fp, #2
   17d88:	strne	r6, [sp, #68]	; 0x44
   17d8c:	movne	r2, #0
   17d90:	movne	r5, #39	; 0x27
   17d94:	bne	17b68 <__assert_fail@plt+0x6444>
   17d98:	ldr	r3, [sp, #32]
   17d9c:	cmp	r3, #0
   17da0:	bne	18a9c <__assert_fail@plt+0x7378>
   17da4:	cmp	sl, #0
   17da8:	ldr	r3, [sp, #72]	; 0x48
   17dac:	clz	r3, r3
   17db0:	lsr	r3, r3, #5
   17db4:	moveq	r3, #0
   17db8:	cmp	r3, #0
   17dbc:	bne	189d0 <__assert_fail@plt+0x72ac>
   17dc0:	cmp	sl, r4
   17dc4:	movhi	r3, #39	; 0x27
   17dc8:	strbhi	r3, [r8, r4]
   17dcc:	add	r3, r4, #1
   17dd0:	cmp	sl, r3
   17dd4:	movhi	r2, #92	; 0x5c
   17dd8:	strbhi	r2, [r8, r3]
   17ddc:	add	r3, r4, #2
   17de0:	cmp	sl, r3
   17de4:	movhi	r2, #39	; 0x27
   17de8:	strbhi	r2, [r8, r3]
   17dec:	mov	r3, #0
   17df0:	cmp	r7, #0
   17df4:	add	r4, r4, #3
   17df8:	str	r3, [sp, #44]	; 0x2c
   17dfc:	str	r6, [sp, #68]	; 0x44
   17e00:	mov	r5, #39	; 0x27
   17e04:	bne	17bb8 <__assert_fail@plt+0x6494>
   17e08:	ldr	r2, [sp, #44]	; 0x2c
   17e0c:	eor	r3, r3, #1
   17e10:	and	r3, r3, r2
   17e14:	add	r9, r9, #1
   17e18:	uxtb	r3, r3
   17e1c:	cmp	r3, #0
   17e20:	beq	17c28 <__assert_fail@plt+0x6504>
   17e24:	cmp	sl, r4
   17e28:	movhi	r3, #39	; 0x27
   17e2c:	strbhi	r3, [r8, r4]
   17e30:	add	r3, r4, #1
   17e34:	cmp	sl, r3
   17e38:	movhi	r2, #39	; 0x27
   17e3c:	strbhi	r2, [r8, r3]
   17e40:	mov	r3, #0
   17e44:	add	r4, r4, #2
   17e48:	str	r3, [sp, #44]	; 0x2c
   17e4c:	b	17c28 <__assert_fail@plt+0x6504>
   17e50:	mov	r3, #114	; 0x72
   17e54:	ldr	r1, [sp, #32]
   17e58:	sub	r2, fp, #2
   17e5c:	clz	r2, r2
   17e60:	lsr	r2, r2, #5
   17e64:	tst	r2, r1
   17e68:	beq	17d40 <__assert_fail@plt+0x661c>
   17e6c:	mov	fp, r8
   17e70:	mov	r8, #2
   17e74:	ldr	r3, [sp, #28]
   17e78:	cmp	r3, #0
   17e7c:	movne	r8, #4
   17e80:	ldr	r3, [sp, #164]	; 0xa4
   17e84:	mov	ip, #0
   17e88:	bic	r3, r3, #2
   17e8c:	str	r3, [sp, #4]
   17e90:	ldr	r3, [sp, #76]	; 0x4c
   17e94:	str	r8, [sp]
   17e98:	str	r3, [sp, #16]
   17e9c:	ldr	r3, [sp, #80]	; 0x50
   17ea0:	ldr	r2, [sp, #36]	; 0x24
   17ea4:	str	r3, [sp, #12]
   17ea8:	mov	r1, sl
   17eac:	ldr	r3, [sp, #24]
   17eb0:	mov	r0, fp
   17eb4:	str	ip, [sp, #8]
   17eb8:	bl	175d8 <__assert_fail@plt+0x5eb4>
   17ebc:	mov	r4, r0
   17ec0:	ldr	r3, [pc, #1304]	; 183e0 <__assert_fail@plt+0x6cbc>
   17ec4:	ldr	r2, [sp, #116]	; 0x74
   17ec8:	mov	r0, r4
   17ecc:	ldr	r3, [r3]
   17ed0:	cmp	r2, r3
   17ed4:	bne	18dc4 <__assert_fail@plt+0x76a0>
   17ed8:	add	sp, sp, #124	; 0x7c
   17edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ee0:	mov	r5, #110	; 0x6e
   17ee4:	ldr	r3, [sp, #32]
   17ee8:	mov	r2, #0
   17eec:	cmp	r3, #0
   17ef0:	mov	r6, r2
   17ef4:	beq	17bd0 <__assert_fail@plt+0x64ac>
   17ef8:	str	fp, [sp, #160]	; 0xa0
   17efc:	mov	fp, r8
   17f00:	ldr	r8, [sp, #160]	; 0xa0
   17f04:	mov	r3, r2
   17f08:	ldr	r2, [sp, #28]
   17f0c:	and	r2, r2, r3
   17f10:	str	r2, [sp, #28]
   17f14:	b	17e74 <__assert_fail@plt+0x6750>
   17f18:	mov	r5, #116	; 0x74
   17f1c:	b	17ee4 <__assert_fail@plt+0x67c0>
   17f20:	mov	r5, #102	; 0x66
   17f24:	ldr	r3, [sp, #32]
   17f28:	cmp	r3, #0
   17f2c:	bne	18ad8 <__assert_fail@plt+0x73b4>
   17f30:	mov	r6, #0
   17f34:	b	17c14 <__assert_fail@plt+0x64f0>
   17f38:	mov	r5, #118	; 0x76
   17f3c:	b	17f24 <__assert_fail@plt+0x6800>
   17f40:	mov	r7, #0
   17f44:	mov	r6, #0
   17f48:	b	17b84 <__assert_fail@plt+0x6460>
   17f4c:	ldr	r3, [sp, #32]
   17f50:	cmp	r3, #0
   17f54:	bne	18d1c <__assert_fail@plt+0x75f8>
   17f58:	mov	r7, r3
   17f5c:	ldr	r3, [sp, #44]	; 0x2c
   17f60:	sub	r2, fp, #2
   17f64:	eor	r3, r3, #1
   17f68:	clz	r2, r2
   17f6c:	lsr	r2, r2, #5
   17f70:	ands	r3, r2, r3
   17f74:	beq	189bc <__assert_fail@plt+0x7298>
   17f78:	cmp	sl, r4
   17f7c:	movhi	r1, #39	; 0x27
   17f80:	strbhi	r1, [r8, r4]
   17f84:	add	r1, r4, #1
   17f88:	cmp	sl, r1
   17f8c:	movhi	r0, #36	; 0x24
   17f90:	strbhi	r0, [r8, r1]
   17f94:	add	r1, r4, #2
   17f98:	cmp	sl, r1
   17f9c:	movhi	r0, #39	; 0x27
   17fa0:	strbhi	r0, [r8, r1]
   17fa4:	add	r1, r4, #3
   17fa8:	cmp	sl, r1
   17fac:	bls	18a1c <__assert_fail@plt+0x72f8>
   17fb0:	mov	r4, r1
   17fb4:	mov	r1, #92	; 0x5c
   17fb8:	strb	r1, [r8, r4]
   17fbc:	mov	r1, r4
   17fc0:	str	r3, [sp, #44]	; 0x2c
   17fc4:	cmp	fp, #2
   17fc8:	add	r4, r4, #1
   17fcc:	beq	18a64 <__assert_fail@plt+0x7340>
   17fd0:	ldr	r0, [sp, #24]
   17fd4:	add	r3, r9, #1
   17fd8:	cmp	r3, r0
   17fdc:	bcs	17ff4 <__assert_fail@plt+0x68d0>
   17fe0:	ldr	r0, [sp, #36]	; 0x24
   17fe4:	ldrb	r3, [r0, r3]
   17fe8:	sub	r3, r3, #48	; 0x30
   17fec:	cmp	r3, #9
   17ff0:	bls	18a74 <__assert_fail@plt+0x7350>
   17ff4:	mov	r5, #48	; 0x30
   17ff8:	ldr	r3, [sp, #28]
   17ffc:	eor	r3, r3, #1
   18000:	orrs	r2, r2, r3
   18004:	mov	r3, r6
   18008:	moveq	r6, r2
   1800c:	beq	17b88 <__assert_fail@plt+0x6464>
   18010:	mov	r6, #0
   18014:	b	17bb0 <__assert_fail@plt+0x648c>
   18018:	mov	r2, #0
   1801c:	mov	r6, r2
   18020:	mov	r5, #98	; 0x62
   18024:	b	17bd0 <__assert_fail@plt+0x64ac>
   18028:	mov	r5, #97	; 0x61
   1802c:	b	17f30 <__assert_fail@plt+0x680c>
   18030:	mov	r3, r7
   18034:	mov	r6, r7
   18038:	mov	r2, #0
   1803c:	mov	r7, r3
   18040:	mov	r5, #32
   18044:	b	17b68 <__assert_fail@plt+0x6444>
   18048:	cmp	r9, #0
   1804c:	mov	r3, r7
   18050:	bne	18618 <__assert_fail@plt+0x6ef4>
   18054:	mov	r6, r7
   18058:	mov	r2, r9
   1805c:	mov	r7, r3
   18060:	b	17b68 <__assert_fail@plt+0x6444>
   18064:	mov	r6, r7
   18068:	b	17b84 <__assert_fail@plt+0x6460>
   1806c:	mov	r7, #0
   18070:	ldr	r3, [sp, #64]	; 0x40
   18074:	cmp	r3, #1
   18078:	bne	186d4 <__assert_fail@plt+0x6fb0>
   1807c:	bl	1152c <__ctype_b_loc@plt>
   18080:	ldr	r2, [sp, #64]	; 0x40
   18084:	sxth	r3, r5
   18088:	mov	ip, r2
   1808c:	lsl	r3, r3, #1
   18090:	ldr	r2, [r0]
   18094:	ldrh	r3, [r2, r3]
   18098:	and	r3, r3, #16384	; 0x4000
   1809c:	cmp	r3, #0
   180a0:	ldr	r3, [sp, #28]
   180a4:	movne	r6, #1
   180a8:	moveq	r6, #0
   180ac:	movne	r2, #0
   180b0:	andeq	r2, r3, #1
   180b4:	cmp	r2, #0
   180b8:	bne	189e4 <__assert_fail@plt+0x72c0>
   180bc:	sub	r2, fp, #2
   180c0:	clz	r2, r2
   180c4:	lsr	r2, r2, #5
   180c8:	b	17b68 <__assert_fail@plt+0x6444>
   180cc:	cmp	r4, #0
   180d0:	bne	18d90 <__assert_fail@plt+0x766c>
   180d4:	str	r4, [sp, #28]
   180d8:	cmp	sl, #0
   180dc:	bne	18dd4 <__assert_fail@plt+0x76b0>
   180e0:	ldr	r3, [pc, #772]	; 183ec <__assert_fail@plt+0x6cc8>
   180e4:	mov	r4, #1
   180e8:	str	r4, [sp, #40]	; 0x28
   180ec:	str	r3, [sp, #60]	; 0x3c
   180f0:	str	r4, [sp, #52]	; 0x34
   180f4:	str	sl, [sp, #72]	; 0x48
   180f8:	str	sl, [sp, #68]	; 0x44
   180fc:	str	sl, [sp, #44]	; 0x2c
   18100:	str	sl, [sp, #32]
   18104:	mov	r8, #2
   18108:	b	176d0 <__assert_fail@plt+0x5fac>
   1810c:	ldr	r3, [sp, #36]	; 0x24
   18110:	ldrb	r5, [r3, r9]
   18114:	cmp	r5, #126	; 0x7e
   18118:	ldrls	pc, [pc, r5, lsl #2]
   1811c:	b	18070 <__assert_fail@plt+0x694c>
   18120:	andeq	r8, r1, r4, asr r3
   18124:	andeq	r8, r1, r0, ror r0
   18128:	andeq	r8, r1, r0, ror r0
   1812c:	andeq	r8, r1, r0, ror r0
   18130:	andeq	r8, r1, r0, ror r0
   18134:	andeq	r8, r1, r0, ror r0
   18138:	andeq	r8, r1, r0, ror r0
   1813c:	andeq	r8, r1, r0, asr #6
   18140:	andeq	r8, r1, ip, lsr #6
   18144:	andeq	r8, r1, r4, lsr #6
   18148:	andeq	r8, r1, ip, lsl r3
   1814c:	andeq	r8, r1, ip, asr #7
   18150:			; <UNDEFINED> instruction: 0x000183b8
   18154:	andeq	r7, r1, r0, asr lr
   18158:	andeq	r8, r1, r0, ror r0
   1815c:	andeq	r8, r1, r0, ror r0
   18160:	andeq	r8, r1, r0, ror r0
   18164:	andeq	r8, r1, r0, ror r0
   18168:	andeq	r8, r1, r0, ror r0
   1816c:	andeq	r8, r1, r0, ror r0
   18170:	andeq	r8, r1, r0, ror r0
   18174:	andeq	r8, r1, r0, ror r0
   18178:	andeq	r8, r1, r0, ror r0
   1817c:	andeq	r8, r1, r0, ror r0
   18180:	andeq	r8, r1, r0, ror r0
   18184:	andeq	r8, r1, r0, ror r0
   18188:	andeq	r8, r1, r0, ror r0
   1818c:	andeq	r8, r1, r0, ror r0
   18190:	andeq	r8, r1, r0, ror r0
   18194:	andeq	r8, r1, r0, ror r0
   18198:	andeq	r8, r1, r0, ror r0
   1819c:	andeq	r8, r1, r0, ror r0
   181a0:	andeq	r8, r1, r8, lsr #7
   181a4:	muleq	r1, r4, r3
   181a8:	muleq	r1, r4, r3
   181ac:	andeq	r8, r1, r4, lsl #7
   181b0:	muleq	r1, r4, r3
   181b4:	strheq	r8, [r1], -ip
   181b8:	muleq	r1, r4, r3
   181bc:	andeq	r7, r1, r4, lsl #27
   181c0:	muleq	r1, r4, r3
   181c4:	muleq	r1, r4, r3
   181c8:	muleq	r1, r4, r3
   181cc:	strheq	r8, [r1], -ip
   181d0:	strheq	r8, [r1], -ip
   181d4:	strheq	r8, [r1], -ip
   181d8:	strheq	r8, [r1], -ip
   181dc:	strheq	r8, [r1], -ip
   181e0:	strheq	r8, [r1], -ip
   181e4:	strheq	r8, [r1], -ip
   181e8:	strheq	r8, [r1], -ip
   181ec:	strheq	r8, [r1], -ip
   181f0:	strheq	r8, [r1], -ip
   181f4:	strheq	r8, [r1], -ip
   181f8:	strheq	r8, [r1], -ip
   181fc:	strheq	r8, [r1], -ip
   18200:	strheq	r8, [r1], -ip
   18204:	strheq	r8, [r1], -ip
   18208:	strheq	r8, [r1], -ip
   1820c:	muleq	r1, r4, r3
   18210:	muleq	r1, r4, r3
   18214:	muleq	r1, r4, r3
   18218:	muleq	r1, r4, r3
   1821c:	andeq	r7, r1, r8, asr sp
   18220:	andeq	r8, r1, r0, ror r0
   18224:	strheq	r8, [r1], -ip
   18228:	strheq	r8, [r1], -ip
   1822c:	strheq	r8, [r1], -ip
   18230:	strheq	r8, [r1], -ip
   18234:	strheq	r8, [r1], -ip
   18238:	strheq	r8, [r1], -ip
   1823c:	strheq	r8, [r1], -ip
   18240:	strheq	r8, [r1], -ip
   18244:	strheq	r8, [r1], -ip
   18248:	strheq	r8, [r1], -ip
   1824c:	strheq	r8, [r1], -ip
   18250:	strheq	r8, [r1], -ip
   18254:	strheq	r8, [r1], -ip
   18258:	strheq	r8, [r1], -ip
   1825c:	strheq	r8, [r1], -ip
   18260:	strheq	r8, [r1], -ip
   18264:	strheq	r8, [r1], -ip
   18268:	strheq	r8, [r1], -ip
   1826c:	strheq	r8, [r1], -ip
   18270:	strheq	r8, [r1], -ip
   18274:	strheq	r8, [r1], -ip
   18278:	strheq	r8, [r1], -ip
   1827c:	strheq	r8, [r1], -ip
   18280:	strheq	r8, [r1], -ip
   18284:	strheq	r8, [r1], -ip
   18288:	strheq	r8, [r1], -ip
   1828c:	muleq	r1, r4, r3
   18290:	andeq	r7, r1, r0, lsl sp
   18294:	strheq	r8, [r1], -ip
   18298:	muleq	r1, r4, r3
   1829c:	strheq	r8, [r1], -ip
   182a0:	muleq	r1, r4, r3
   182a4:	strheq	r8, [r1], -ip
   182a8:	strheq	r8, [r1], -ip
   182ac:	strheq	r8, [r1], -ip
   182b0:	strheq	r8, [r1], -ip
   182b4:	strheq	r8, [r1], -ip
   182b8:	strheq	r8, [r1], -ip
   182bc:	strheq	r8, [r1], -ip
   182c0:	strheq	r8, [r1], -ip
   182c4:	strheq	r8, [r1], -ip
   182c8:	strheq	r8, [r1], -ip
   182cc:	strheq	r8, [r1], -ip
   182d0:	strheq	r8, [r1], -ip
   182d4:	strheq	r8, [r1], -ip
   182d8:	strheq	r8, [r1], -ip
   182dc:	strheq	r8, [r1], -ip
   182e0:	strheq	r8, [r1], -ip
   182e4:	strheq	r8, [r1], -ip
   182e8:	strheq	r8, [r1], -ip
   182ec:	strheq	r8, [r1], -ip
   182f0:	strheq	r8, [r1], -ip
   182f4:	strheq	r8, [r1], -ip
   182f8:	strheq	r8, [r1], -ip
   182fc:	strheq	r8, [r1], -ip
   18300:	strheq	r8, [r1], -ip
   18304:	strheq	r8, [r1], -ip
   18308:	strheq	r8, [r1], -ip
   1830c:	andeq	r7, r1, r8, lsr #22
   18310:	muleq	r1, r4, r3
   18314:	andeq	r7, r1, r8, lsr #22
   18318:	andeq	r8, r1, r4, lsl #7
   1831c:	mov	r3, #110	; 0x6e
   18320:	b	17e54 <__assert_fail@plt+0x6730>
   18324:	mov	r3, #116	; 0x74
   18328:	b	17e54 <__assert_fail@plt+0x6730>
   1832c:	sub	r2, fp, #2
   18330:	mov	r3, #98	; 0x62
   18334:	clz	r2, r2
   18338:	lsr	r2, r2, #5
   1833c:	b	17d40 <__assert_fail@plt+0x661c>
   18340:	sub	r2, fp, #2
   18344:	mov	r3, #97	; 0x61
   18348:	clz	r2, r2
   1834c:	lsr	r2, r2, #5
   18350:	b	17d40 <__assert_fail@plt+0x661c>
   18354:	ldr	r3, [sp, #28]
   18358:	cmp	r3, #0
   1835c:	bne	17f4c <__assert_fail@plt+0x6828>
   18360:	ldr	r3, [sp, #164]	; 0xa4
   18364:	tst	r3, #1
   18368:	bne	189dc <__assert_fail@plt+0x72b8>
   1836c:	ldr	r6, [sp, #28]
   18370:	sub	r2, fp, #2
   18374:	mov	r7, r6
   18378:	clz	r2, r2
   1837c:	lsr	r2, r2, #5
   18380:	b	17b68 <__assert_fail@plt+0x6444>
   18384:	sub	r2, fp, #2
   18388:	clz	r2, r2
   1838c:	lsr	r2, r2, #5
   18390:	b	17b54 <__assert_fail@plt+0x6430>
   18394:	sub	r2, fp, #2
   18398:	mov	r6, #0
   1839c:	clz	r2, r2
   183a0:	lsr	r2, r2, #5
   183a4:	b	17b5c <__assert_fail@plt+0x6438>
   183a8:	sub	r2, fp, #2
   183ac:	clz	r2, r2
   183b0:	lsr	r2, r2, #5
   183b4:	b	17b5c <__assert_fail@plt+0x6438>
   183b8:	sub	r2, fp, #2
   183bc:	mov	r3, #102	; 0x66
   183c0:	clz	r2, r2
   183c4:	lsr	r2, r2, #5
   183c8:	b	17d40 <__assert_fail@plt+0x661c>
   183cc:	sub	r2, fp, #2
   183d0:	mov	r3, #118	; 0x76
   183d4:	clz	r2, r2
   183d8:	lsr	r2, r2, #5
   183dc:	b	17d40 <__assert_fail@plt+0x661c>
   183e0:	andeq	pc, r2, r8, lsl #30
   183e4:	strdeq	pc, [r1], -r0
   183e8:	andeq	lr, r1, ip, ror #14
   183ec:	andeq	pc, r1, ip, ror #15
   183f0:	ldr	r3, [sp, #48]	; 0x30
   183f4:	ldrb	r5, [r3]
   183f8:	cmp	r5, #126	; 0x7e
   183fc:	ldrls	pc, [pc, r5, lsl #2]
   18400:	b	1806c <__assert_fail@plt+0x6948>
   18404:	andeq	r7, r1, ip, asr #30
   18408:	andeq	r8, r1, ip, rrx
   1840c:	andeq	r8, r1, ip, rrx
   18410:	andeq	r8, r1, ip, rrx
   18414:	andeq	r8, r1, ip, rrx
   18418:	andeq	r8, r1, ip, rrx
   1841c:	andeq	r8, r1, ip, rrx
   18420:	andeq	r8, r1, r4, asr #12
   18424:	andeq	r8, r1, ip, lsr r6
   18428:	andeq	r7, r1, r8, lsl pc
   1842c:	andeq	r7, r1, r0, ror #29
   18430:	andeq	r7, r1, r8, lsr pc
   18434:	andeq	r7, r1, r0, lsr #30
   18438:	andeq	r8, r1, r0, lsr r6
   1843c:	andeq	r8, r1, ip, rrx
   18440:	andeq	r8, r1, ip, rrx
   18444:	andeq	r8, r1, ip, rrx
   18448:	andeq	r8, r1, ip, rrx
   1844c:	andeq	r8, r1, ip, rrx
   18450:	andeq	r8, r1, ip, rrx
   18454:	andeq	r8, r1, ip, rrx
   18458:	andeq	r8, r1, ip, rrx
   1845c:	andeq	r8, r1, ip, rrx
   18460:	andeq	r8, r1, ip, rrx
   18464:	andeq	r8, r1, ip, rrx
   18468:	andeq	r8, r1, ip, rrx
   1846c:	andeq	r8, r1, ip, rrx
   18470:	andeq	r8, r1, ip, rrx
   18474:	andeq	r8, r1, ip, rrx
   18478:	andeq	r8, r1, ip, rrx
   1847c:	andeq	r8, r1, ip, rrx
   18480:	andeq	r8, r1, ip, rrx
   18484:	andeq	r8, r1, r8, lsr #12
   18488:	andeq	r7, r1, r0, asr #30
   1848c:	andeq	r7, r1, r0, asr #30
   18490:	andeq	r8, r1, ip, lsl #12
   18494:	andeq	r7, r1, r0, asr #30
   18498:	andeq	r8, r1, r0, lsl #12
   1849c:	andeq	r7, r1, r0, asr #30
   184a0:	andeq	r7, r1, r0, lsl #27
   184a4:	andeq	r7, r1, r0, asr #30
   184a8:	andeq	r7, r1, r0, asr #30
   184ac:	andeq	r7, r1, r0, asr #30
   184b0:	andeq	r8, r1, r0, lsl #12
   184b4:	andeq	r8, r1, r0, lsl #12
   184b8:	andeq	r8, r1, r0, lsl #12
   184bc:	andeq	r8, r1, r0, lsl #12
   184c0:	andeq	r8, r1, r0, lsl #12
   184c4:	andeq	r8, r1, r0, lsl #12
   184c8:	andeq	r8, r1, r0, lsl #12
   184cc:	andeq	r8, r1, r0, lsl #12
   184d0:	andeq	r8, r1, r0, lsl #12
   184d4:	andeq	r8, r1, r0, lsl #12
   184d8:	andeq	r8, r1, r0, lsl #12
   184dc:	andeq	r8, r1, r0, lsl #12
   184e0:	andeq	r8, r1, r0, lsl #12
   184e4:	andeq	r8, r1, r0, lsl #12
   184e8:	andeq	r8, r1, r0, lsl #12
   184ec:	andeq	r8, r1, r0, lsl #12
   184f0:	andeq	r7, r1, r0, asr #30
   184f4:	andeq	r7, r1, r0, asr #30
   184f8:	andeq	r7, r1, r0, asr #30
   184fc:	andeq	r7, r1, r0, asr #30
   18500:	andeq	r7, r1, r4, asr sp
   18504:	andeq	r8, r1, ip, rrx
   18508:	andeq	r8, r1, r0, lsl #12
   1850c:	andeq	r8, r1, r0, lsl #12
   18510:	andeq	r8, r1, r0, lsl #12
   18514:	andeq	r8, r1, r0, lsl #12
   18518:	andeq	r8, r1, r0, lsl #12
   1851c:	andeq	r8, r1, r0, lsl #12
   18520:	andeq	r8, r1, r0, lsl #12
   18524:	andeq	r8, r1, r0, lsl #12
   18528:	andeq	r8, r1, r0, lsl #12
   1852c:	andeq	r8, r1, r0, lsl #12
   18530:	andeq	r8, r1, r0, lsl #12
   18534:	andeq	r8, r1, r0, lsl #12
   18538:	andeq	r8, r1, r0, lsl #12
   1853c:	andeq	r8, r1, r0, lsl #12
   18540:	andeq	r8, r1, r0, lsl #12
   18544:	andeq	r8, r1, r0, lsl #12
   18548:	andeq	r8, r1, r0, lsl #12
   1854c:	andeq	r8, r1, r0, lsl #12
   18550:	andeq	r8, r1, r0, lsl #12
   18554:	andeq	r8, r1, r0, lsl #12
   18558:	andeq	r8, r1, r0, lsl #12
   1855c:	andeq	r8, r1, r0, lsl #12
   18560:	andeq	r8, r1, r0, lsl #12
   18564:	andeq	r8, r1, r0, lsl #12
   18568:	andeq	r8, r1, r0, lsl #12
   1856c:	andeq	r8, r1, r0, lsl #12
   18570:	andeq	r7, r1, r0, asr #30
   18574:	andeq	r7, r1, ip, lsl #26
   18578:	andeq	r8, r1, r0, lsl #12
   1857c:	andeq	r7, r1, r0, asr #30
   18580:	andeq	r8, r1, r0, lsl #12
   18584:	andeq	r7, r1, r0, asr #30
   18588:	andeq	r8, r1, r0, lsl #12
   1858c:	andeq	r8, r1, r0, lsl #12
   18590:	andeq	r8, r1, r0, lsl #12
   18594:	andeq	r8, r1, r0, lsl #12
   18598:	andeq	r8, r1, r0, lsl #12
   1859c:	andeq	r8, r1, r0, lsl #12
   185a0:	andeq	r8, r1, r0, lsl #12
   185a4:	andeq	r8, r1, r0, lsl #12
   185a8:	andeq	r8, r1, r0, lsl #12
   185ac:	andeq	r8, r1, r0, lsl #12
   185b0:	andeq	r8, r1, r0, lsl #12
   185b4:	andeq	r8, r1, r0, lsl #12
   185b8:	andeq	r8, r1, r0, lsl #12
   185bc:	andeq	r8, r1, r0, lsl #12
   185c0:	andeq	r8, r1, r0, lsl #12
   185c4:	andeq	r8, r1, r0, lsl #12
   185c8:	andeq	r8, r1, r0, lsl #12
   185cc:	andeq	r8, r1, r0, lsl #12
   185d0:	andeq	r8, r1, r0, lsl #12
   185d4:	andeq	r8, r1, r0, lsl #12
   185d8:	andeq	r8, r1, r0, lsl #12
   185dc:	andeq	r8, r1, r0, lsl #12
   185e0:	andeq	r8, r1, r0, lsl #12
   185e4:	andeq	r8, r1, r0, lsl #12
   185e8:	andeq	r8, r1, r0, lsl #12
   185ec:	andeq	r8, r1, r0, lsl #12
   185f0:	andeq	r7, r1, r4, lsr #22
   185f4:	andeq	r7, r1, r0, asr #30
   185f8:	andeq	r7, r1, r4, lsr #22
   185fc:	andeq	r8, r1, ip, lsl #12
   18600:	mov	r6, r7
   18604:	mov	r7, #0
   18608:	b	17b84 <__assert_fail@plt+0x6460>
   1860c:	cmp	r9, #0
   18610:	mov	r3, #0
   18614:	beq	18054 <__assert_fail@plt+0x6930>
   18618:	mov	r6, #0
   1861c:	mov	r7, r3
   18620:	mov	r3, r6
   18624:	b	17b88 <__assert_fail@plt+0x6464>
   18628:	mov	r3, #0
   1862c:	b	18034 <__assert_fail@plt+0x6910>
   18630:	mov	r7, #0
   18634:	mov	r3, #114	; 0x72
   18638:	b	17e54 <__assert_fail@plt+0x6730>
   1863c:	mov	r5, #98	; 0x62
   18640:	b	17ee4 <__assert_fail@plt+0x67c0>
   18644:	mov	r5, #97	; 0x61
   18648:	b	17f24 <__assert_fail@plt+0x6800>
   1864c:	ldr	r3, [sp, #32]
   18650:	cmp	r3, #0
   18654:	bne	18a9c <__assert_fail@plt+0x7378>
   18658:	add	r9, r9, #1
   1865c:	ldr	r3, [sp, #44]	; 0x2c
   18660:	mov	r6, #0
   18664:	mov	r5, #92	; 0x5c
   18668:	b	17e1c <__assert_fail@plt+0x66f8>
   1866c:	ldr	r3, [sp, #36]	; 0x24
   18670:	ldrb	r3, [r3, #1]
   18674:	adds	r3, r3, #0
   18678:	movne	r3, #1
   1867c:	b	17b40 <__assert_fail@plt+0x641c>
   18680:	ldr	r3, [sp, #164]	; 0xa4
   18684:	ands	r3, r3, #4
   18688:	beq	186ac <__assert_fail@plt+0x6f88>
   1868c:	ldr	r2, [sp, #24]
   18690:	add	r3, r9, #2
   18694:	cmp	r3, r2
   18698:	bcs	186ac <__assert_fail@plt+0x6f88>
   1869c:	ldr	r2, [sp, #48]	; 0x30
   186a0:	ldrb	r5, [r2, #1]
   186a4:	cmp	r5, #63	; 0x3f
   186a8:	beq	18b10 <__assert_fail@plt+0x73ec>
   186ac:	mov	r2, #0
   186b0:	mov	r6, r2
   186b4:	mov	r5, #63	; 0x3f
   186b8:	b	17b68 <__assert_fail@plt+0x6444>
   186bc:	ldr	r3, [sp, #32]
   186c0:	cmp	r3, #0
   186c4:	bne	18a9c <__assert_fail@plt+0x7378>
   186c8:	mov	r6, r3
   186cc:	mov	r5, #63	; 0x3f
   186d0:	b	17bb0 <__assert_fail@plt+0x648c>
   186d4:	ldr	r3, [sp, #24]
   186d8:	cmn	r3, #1
   186dc:	mov	r3, #0
   186e0:	str	r3, [sp, #108]	; 0x6c
   186e4:	str	r3, [sp, #112]	; 0x70
   186e8:	bne	186f8 <__assert_fail@plt+0x6fd4>
   186ec:	ldr	r0, [sp, #36]	; 0x24
   186f0:	bl	11550 <strlen@plt>
   186f4:	str	r0, [sp, #24]
   186f8:	mov	r3, #0
   186fc:	str	sl, [sp, #88]	; 0x58
   18700:	ldr	sl, [sp, #36]	; 0x24
   18704:	str	r5, [sp, #92]	; 0x5c
   18708:	mov	r5, r3
   1870c:	str	r7, [sp, #96]	; 0x60
   18710:	str	r4, [sp, #100]	; 0x64
   18714:	str	r8, [sp, #84]	; 0x54
   18718:	ldr	r3, [sp, #24]
   1871c:	add	r4, r9, r5
   18720:	add	r7, sl, r4
   18724:	sub	r2, r3, r4
   18728:	mov	r1, r7
   1872c:	add	r3, sp, #108	; 0x6c
   18730:	add	r0, sp, #104	; 0x68
   18734:	bl	1b00c <__assert_fail@plt+0x98e8>
   18738:	subs	r8, r0, #0
   1873c:	beq	1878c <__assert_fail@plt+0x7068>
   18740:	cmn	r8, #1
   18744:	beq	18aec <__assert_fail@plt+0x73c8>
   18748:	cmn	r8, #2
   1874c:	beq	18c0c <__assert_fail@plt+0x74e8>
   18750:	ldr	r3, [sp, #32]
   18754:	cmp	fp, #2
   18758:	movne	r3, #0
   1875c:	andeq	r3, r3, #1
   18760:	cmp	r3, #0
   18764:	bne	188ec <__assert_fail@plt+0x71c8>
   18768:	ldr	r0, [sp, #104]	; 0x68
   1876c:	bl	1143c <iswprint@plt>
   18770:	add	r5, r5, r8
   18774:	cmp	r0, #0
   18778:	add	r0, sp, #108	; 0x6c
   1877c:	moveq	r6, #0
   18780:	bl	113b8 <mbsinit@plt>
   18784:	cmp	r0, #0
   18788:	beq	18718 <__assert_fail@plt+0x6ff4>
   1878c:	ldr	r3, [sp, #28]
   18790:	mov	ip, r5
   18794:	eor	r2, r6, #1
   18798:	ldr	r5, [sp, #92]	; 0x5c
   1879c:	ldr	r7, [sp, #96]	; 0x60
   187a0:	ldr	r4, [sp, #100]	; 0x64
   187a4:	ldr	r8, [sp, #84]	; 0x54
   187a8:	ldr	sl, [sp, #88]	; 0x58
   187ac:	and	r2, r2, r3
   187b0:	cmp	ip, #1
   187b4:	bls	180b4 <__assert_fail@plt+0x6990>
   187b8:	add	r1, ip, r9
   187bc:	ldr	lr, [sp, #48]	; 0x30
   187c0:	mov	r0, #0
   187c4:	str	r6, [sp, #48]	; 0x30
   187c8:	mov	ip, #39	; 0x27
   187cc:	ldr	r6, [sp, #44]	; 0x2c
   187d0:	b	18888 <__assert_fail@plt+0x7164>
   187d4:	ldr	r0, [sp, #32]
   187d8:	sub	r3, fp, #2
   187dc:	cmp	r0, #0
   187e0:	clz	r3, r3
   187e4:	lsr	r3, r3, #5
   187e8:	bne	189f0 <__assert_fail@plt+0x72cc>
   187ec:	eor	r0, r6, #1
   187f0:	ands	r3, r3, r0
   187f4:	beq	18824 <__assert_fail@plt+0x7100>
   187f8:	add	r0, r4, #1
   187fc:	cmp	sl, r4
   18800:	strbhi	ip, [r8, r4]
   18804:	cmp	sl, r0
   18808:	movhi	r6, #36	; 0x24
   1880c:	strbhi	r6, [r8, r0]
   18810:	add	r0, r4, #2
   18814:	mov	r6, r3
   18818:	add	r4, r4, #3
   1881c:	cmp	sl, r0
   18820:	strbhi	ip, [r8, r0]
   18824:	cmp	sl, r4
   18828:	movhi	r3, #92	; 0x5c
   1882c:	strbhi	r3, [r8, r4]
   18830:	add	r3, r4, #1
   18834:	cmp	sl, r3
   18838:	lsrhi	r0, r5, #6
   1883c:	addhi	r0, r0, #48	; 0x30
   18840:	strbhi	r0, [r8, r3]
   18844:	add	r0, r4, #2
   18848:	cmp	sl, r0
   1884c:	lsrhi	r3, r5, #3
   18850:	andhi	r3, r3, #7
   18854:	addhi	r3, r3, #48	; 0x30
   18858:	add	r9, r9, #1
   1885c:	strbhi	r3, [r8, r0]
   18860:	and	r5, r5, #7
   18864:	cmp	r9, r1
   18868:	add	r5, r5, #48	; 0x30
   1886c:	add	r4, r4, #3
   18870:	bcs	18a10 <__assert_fail@plt+0x72ec>
   18874:	mov	r0, r2
   18878:	cmp	sl, r4
   1887c:	strbhi	r5, [r8, r4]
   18880:	ldrb	r5, [lr, #1]!
   18884:	add	r4, r4, #1
   18888:	cmp	r2, #0
   1888c:	bne	187d4 <__assert_fail@plt+0x70b0>
   18890:	eor	r3, r0, #1
   18894:	and	r3, r3, r6
   18898:	cmp	r7, #0
   1889c:	uxtb	r3, r3
   188a0:	beq	188b4 <__assert_fail@plt+0x7190>
   188a4:	cmp	sl, r4
   188a8:	movhi	r7, #92	; 0x5c
   188ac:	strbhi	r7, [r8, r4]
   188b0:	add	r4, r4, #1
   188b4:	add	r9, r9, #1
   188b8:	cmp	r9, r1
   188bc:	bcs	18a04 <__assert_fail@plt+0x72e0>
   188c0:	cmp	r3, #0
   188c4:	beq	18a30 <__assert_fail@plt+0x730c>
   188c8:	cmp	sl, r4
   188cc:	add	r3, r4, #1
   188d0:	strbhi	ip, [r8, r4]
   188d4:	mov	r7, #0
   188d8:	cmp	sl, r3
   188dc:	strbhi	ip, [r8, r3]
   188e0:	add	r4, r4, #2
   188e4:	mov	r6, r7
   188e8:	b	18878 <__assert_fail@plt+0x7154>
   188ec:	cmp	r8, #1
   188f0:	beq	18768 <__assert_fail@plt+0x7044>
   188f4:	add	r1, r4, #1
   188f8:	add	r3, sl, r8
   188fc:	add	r1, sl, r1
   18900:	add	r4, r3, r4
   18904:	ldrb	r3, [r1], #1
   18908:	sub	r3, r3, #91	; 0x5b
   1890c:	cmp	r3, #33	; 0x21
   18910:	ldrls	pc, [pc, r3, lsl #2]
   18914:	b	189a0 <__assert_fail@plt+0x727c>
   18918:	andeq	r8, r1, ip, lsr #19
   1891c:	andeq	r8, r1, ip, lsr #19
   18920:	andeq	r8, r1, r0, lsr #19
   18924:	andeq	r8, r1, ip, lsr #19
   18928:	andeq	r8, r1, r0, lsr #19
   1892c:	andeq	r8, r1, ip, lsr #19
   18930:	andeq	r8, r1, r0, lsr #19
   18934:	andeq	r8, r1, r0, lsr #19
   18938:	andeq	r8, r1, r0, lsr #19
   1893c:	andeq	r8, r1, r0, lsr #19
   18940:	andeq	r8, r1, r0, lsr #19
   18944:	andeq	r8, r1, r0, lsr #19
   18948:	andeq	r8, r1, r0, lsr #19
   1894c:	andeq	r8, r1, r0, lsr #19
   18950:	andeq	r8, r1, r0, lsr #19
   18954:	andeq	r8, r1, r0, lsr #19
   18958:	andeq	r8, r1, r0, lsr #19
   1895c:	andeq	r8, r1, r0, lsr #19
   18960:	andeq	r8, r1, r0, lsr #19
   18964:	andeq	r8, r1, r0, lsr #19
   18968:	andeq	r8, r1, r0, lsr #19
   1896c:	andeq	r8, r1, r0, lsr #19
   18970:	andeq	r8, r1, r0, lsr #19
   18974:	andeq	r8, r1, r0, lsr #19
   18978:	andeq	r8, r1, r0, lsr #19
   1897c:	andeq	r8, r1, r0, lsr #19
   18980:	andeq	r8, r1, r0, lsr #19
   18984:	andeq	r8, r1, r0, lsr #19
   18988:	andeq	r8, r1, r0, lsr #19
   1898c:	andeq	r8, r1, r0, lsr #19
   18990:	andeq	r8, r1, r0, lsr #19
   18994:	andeq	r8, r1, r0, lsr #19
   18998:	andeq	r8, r1, r0, lsr #19
   1899c:	andeq	r8, r1, ip, lsr #19
   189a0:	cmp	r4, r1
   189a4:	bne	18904 <__assert_fail@plt+0x71e0>
   189a8:	b	18768 <__assert_fail@plt+0x7044>
   189ac:	ldr	fp, [sp, #84]	; 0x54
   189b0:	ldr	sl, [sp, #88]	; 0x58
   189b4:	mov	r8, #2
   189b8:	b	17e74 <__assert_fail@plt+0x6750>
   189bc:	cmp	sl, r4
   189c0:	movls	r1, r4
   189c4:	bls	17fc4 <__assert_fail@plt+0x68a0>
   189c8:	ldr	r3, [sp, #44]	; 0x2c
   189cc:	b	17fb4 <__assert_fail@plt+0x6890>
   189d0:	str	sl, [sp, #72]	; 0x48
   189d4:	ldr	sl, [sp, #32]
   189d8:	b	17dec <__assert_fail@plt+0x66c8>
   189dc:	add	r9, r9, #1
   189e0:	b	176e0 <__assert_fail@plt+0x5fbc>
   189e4:	ldr	r2, [sp, #28]
   189e8:	mov	r6, #0
   189ec:	b	187b8 <__assert_fail@plt+0x7094>
   189f0:	str	fp, [sp, #160]	; 0xa0
   189f4:	str	r3, [sp, #28]
   189f8:	mov	fp, r8
   189fc:	ldr	r8, [sp, #160]	; 0xa0
   18a00:	b	17e74 <__assert_fail@plt+0x6750>
   18a04:	str	r6, [sp, #44]	; 0x2c
   18a08:	ldr	r6, [sp, #48]	; 0x30
   18a0c:	b	17e1c <__assert_fail@plt+0x66f8>
   18a10:	str	r6, [sp, #44]	; 0x2c
   18a14:	ldr	r6, [sp, #48]	; 0x30
   18a18:	b	17c28 <__assert_fail@plt+0x6504>
   18a1c:	add	r4, r4, #4
   18a20:	str	r3, [sp, #44]	; 0x2c
   18a24:	mov	r6, #0
   18a28:	mov	r5, #48	; 0x30
   18a2c:	b	17bb0 <__assert_fail@plt+0x648c>
   18a30:	mov	r7, r3
   18a34:	b	18878 <__assert_fail@plt+0x7154>
   18a38:	ldr	r3, [pc, #-1624]	; 183e8 <__assert_fail@plt+0x6cc4>
   18a3c:	mov	r4, #1
   18a40:	str	r4, [sp, #40]	; 0x28
   18a44:	str	r4, [sp, #28]
   18a48:	str	r4, [sp, #52]	; 0x34
   18a4c:	str	sl, [sp, #72]	; 0x48
   18a50:	str	sl, [sp, #68]	; 0x44
   18a54:	str	sl, [sp, #44]	; 0x2c
   18a58:	str	sl, [sp, #32]
   18a5c:	str	r3, [sp, #60]	; 0x3c
   18a60:	b	176d0 <__assert_fail@plt+0x5fac>
   18a64:	mov	r3, r6
   18a68:	mov	r5, #48	; 0x30
   18a6c:	mov	r6, #0
   18a70:	b	17bb0 <__assert_fail@plt+0x648c>
   18a74:	cmp	sl, r4
   18a78:	movhi	r3, #48	; 0x30
   18a7c:	strbhi	r3, [r8, r4]
   18a80:	add	r3, r1, #2
   18a84:	cmp	sl, r3
   18a88:	movhi	r0, #48	; 0x30
   18a8c:	strbhi	r0, [r8, r3]
   18a90:	add	r4, r1, #3
   18a94:	mov	r5, #48	; 0x30
   18a98:	b	17ff8 <__assert_fail@plt+0x68d4>
   18a9c:	str	fp, [sp, #160]	; 0xa0
   18aa0:	mov	fp, r8
   18aa4:	ldr	r8, [sp, #160]	; 0xa0
   18aa8:	b	17e74 <__assert_fail@plt+0x6750>
   18aac:	ldr	r2, [sp, #80]	; 0x50
   18ab0:	ldrb	r3, [r2]
   18ab4:	cmp	r3, #0
   18ab8:	beq	176a0 <__assert_fail@plt+0x5f7c>
   18abc:	cmp	sl, r4
   18ac0:	strbhi	r3, [fp, r4]
   18ac4:	ldrb	r3, [r2, #1]!
   18ac8:	add	r4, r4, #1
   18acc:	cmp	r3, #0
   18ad0:	bne	18abc <__assert_fail@plt+0x7398>
   18ad4:	b	176a0 <__assert_fail@plt+0x5f7c>
   18ad8:	str	fp, [sp, #160]	; 0xa0
   18adc:	mov	r3, #0
   18ae0:	mov	fp, r8
   18ae4:	ldr	r8, [sp, #160]	; 0xa0
   18ae8:	b	17f08 <__assert_fail@plt+0x67e4>
   18aec:	mov	ip, r5
   18af0:	ldr	r7, [sp, #96]	; 0x60
   18af4:	ldr	r5, [sp, #92]	; 0x5c
   18af8:	ldr	r4, [sp, #100]	; 0x64
   18afc:	ldr	r8, [sp, #84]	; 0x54
   18b00:	ldr	sl, [sp, #88]	; 0x58
   18b04:	ldr	r2, [sp, #28]
   18b08:	mov	r6, #0
   18b0c:	b	187b0 <__assert_fail@plt+0x708c>
   18b10:	ldr	r2, [sp, #36]	; 0x24
   18b14:	ldrb	r1, [r2, r3]
   18b18:	sub	r2, r1, #33	; 0x21
   18b1c:	cmp	r2, #29
   18b20:	ldrls	pc, [pc, r2, lsl #2]
   18b24:	b	18c00 <__assert_fail@plt+0x74dc>
   18b28:	andeq	r8, r1, r0, lsr #23
   18b2c:	andeq	r8, r1, r0, lsl #24
   18b30:	andeq	r8, r1, r0, lsl #24
   18b34:	andeq	r8, r1, r0, lsl #24
   18b38:	andeq	r8, r1, r0, lsl #24
   18b3c:	andeq	r8, r1, r0, lsl #24
   18b40:	andeq	r8, r1, r0, lsr #23
   18b44:	andeq	r8, r1, r0, lsr #23
   18b48:	andeq	r8, r1, r0, lsr #23
   18b4c:	andeq	r8, r1, r0, lsl #24
   18b50:	andeq	r8, r1, r0, lsl #24
   18b54:	andeq	r8, r1, r0, lsl #24
   18b58:	andeq	r8, r1, r0, lsr #23
   18b5c:	andeq	r8, r1, r0, lsl #24
   18b60:	andeq	r8, r1, r0, lsr #23
   18b64:	andeq	r8, r1, r0, lsl #24
   18b68:	andeq	r8, r1, r0, lsl #24
   18b6c:	andeq	r8, r1, r0, lsl #24
   18b70:	andeq	r8, r1, r0, lsl #24
   18b74:	andeq	r8, r1, r0, lsl #24
   18b78:	andeq	r8, r1, r0, lsl #24
   18b7c:	andeq	r8, r1, r0, lsl #24
   18b80:	andeq	r8, r1, r0, lsl #24
   18b84:	andeq	r8, r1, r0, lsl #24
   18b88:	andeq	r8, r1, r0, lsl #24
   18b8c:	andeq	r8, r1, r0, lsl #24
   18b90:	andeq	r8, r1, r0, lsl #24
   18b94:	andeq	r8, r1, r0, lsr #23
   18b98:	andeq	r8, r1, r0, lsr #23
   18b9c:	andeq	r8, r1, r0, lsr #23
   18ba0:	ldr	r2, [sp, #32]
   18ba4:	cmp	r2, #0
   18ba8:	bne	18cac <__assert_fail@plt+0x7588>
   18bac:	cmp	sl, r4
   18bb0:	movhi	r2, #63	; 0x3f
   18bb4:	strbhi	r2, [r8, r4]
   18bb8:	add	r2, r4, #1
   18bbc:	cmp	sl, r2
   18bc0:	movhi	r0, #34	; 0x22
   18bc4:	strbhi	r0, [r8, r2]
   18bc8:	add	r2, r4, #2
   18bcc:	cmp	sl, r2
   18bd0:	movhi	r0, #34	; 0x22
   18bd4:	strbhi	r0, [r8, r2]
   18bd8:	add	r2, r4, #3
   18bdc:	cmp	sl, r2
   18be0:	movhi	r0, #63	; 0x3f
   18be4:	strbhi	r0, [r8, r2]
   18be8:	mov	r2, #0
   18bec:	add	r4, r4, #4
   18bf0:	mov	r5, r1
   18bf4:	mov	r9, r3
   18bf8:	mov	r6, r2
   18bfc:	b	17ff8 <__assert_fail@plt+0x68d4>
   18c00:	mov	r2, #0
   18c04:	mov	r6, r2
   18c08:	b	17b68 <__assert_fail@plt+0x6444>
   18c0c:	ldr	r0, [sp, #24]
   18c10:	mov	r1, r4
   18c14:	cmp	r1, r0
   18c18:	mov	r2, r7
   18c1c:	mov	r3, r5
   18c20:	mov	ip, r5
   18c24:	ldr	r7, [sp, #96]	; 0x60
   18c28:	ldr	r5, [sp, #92]	; 0x5c
   18c2c:	ldr	r4, [sp, #100]	; 0x64
   18c30:	ldr	r8, [sp, #84]	; 0x54
   18c34:	ldr	sl, [sp, #88]	; 0x58
   18c38:	bcs	18c6c <__assert_fail@plt+0x7548>
   18c3c:	ldrb	r6, [r2]
   18c40:	cmp	r6, #0
   18c44:	bne	18c58 <__assert_fail@plt+0x7534>
   18c48:	b	18d88 <__assert_fail@plt+0x7664>
   18c4c:	ldrb	r6, [r2, #1]!
   18c50:	cmp	r6, #0
   18c54:	beq	18d10 <__assert_fail@plt+0x75ec>
   18c58:	add	r3, r3, #1
   18c5c:	add	r1, r9, r3
   18c60:	cmp	r1, r0
   18c64:	bcc	18c4c <__assert_fail@plt+0x7528>
   18c68:	mov	ip, r3
   18c6c:	ldr	r2, [sp, #28]
   18c70:	mov	r6, #0
   18c74:	b	187b0 <__assert_fail@plt+0x708c>
   18c78:	mov	r3, #1
   18c7c:	str	r3, [sp, #40]	; 0x28
   18c80:	str	r3, [sp, #32]
   18c84:	str	r3, [sp, #28]
   18c88:	str	r3, [sp, #52]	; 0x34
   18c8c:	ldr	r3, [pc, #-2220]	; 183e8 <__assert_fail@plt+0x6cc4>
   18c90:	mov	r2, #0
   18c94:	str	r2, [sp, #68]	; 0x44
   18c98:	str	r2, [sp, #44]	; 0x2c
   18c9c:	str	r2, [sp, #72]	; 0x48
   18ca0:	mov	r4, r2
   18ca4:	str	r3, [sp, #60]	; 0x3c
   18ca8:	b	176d0 <__assert_fail@plt+0x5fac>
   18cac:	str	fp, [sp, #160]	; 0xa0
   18cb0:	mov	fp, r8
   18cb4:	ldr	r8, [sp, #160]	; 0xa0
   18cb8:	b	17e80 <__assert_fail@plt+0x675c>
   18cbc:	mov	r2, r3
   18cc0:	ldr	r3, [sp, #60]	; 0x3c
   18cc4:	cmp	r3, #0
   18cc8:	moveq	r2, #0
   18ccc:	andne	r2, r2, #1
   18cd0:	cmp	r2, #0
   18cd4:	beq	18d00 <__assert_fail@plt+0x75dc>
   18cd8:	mov	r2, r3
   18cdc:	ldrb	r3, [r3]
   18ce0:	cmp	r3, #0
   18ce4:	beq	18d00 <__assert_fail@plt+0x75dc>
   18ce8:	cmp	sl, r4
   18cec:	strbhi	r3, [fp, r4]
   18cf0:	ldrb	r3, [r2, #1]!
   18cf4:	add	r4, r4, #1
   18cf8:	cmp	r3, #0
   18cfc:	bne	18ce8 <__assert_fail@plt+0x75c4>
   18d00:	cmp	sl, r4
   18d04:	movhi	r3, #0
   18d08:	strbhi	r3, [fp, r4]
   18d0c:	b	17ec0 <__assert_fail@plt+0x679c>
   18d10:	mov	ip, r3
   18d14:	ldr	r2, [sp, #28]
   18d18:	b	187b0 <__assert_fail@plt+0x708c>
   18d1c:	str	fp, [sp, #160]	; 0xa0
   18d20:	mov	fp, r8
   18d24:	ldr	r8, [sp, #160]	; 0xa0
   18d28:	sub	r3, r8, #2
   18d2c:	clz	r3, r3
   18d30:	lsr	r3, r3, #5
   18d34:	str	r3, [sp, #28]
   18d38:	b	17e74 <__assert_fail@plt+0x6750>
   18d3c:	ldr	r3, [sp, #76]	; 0x4c
   18d40:	mov	ip, #5
   18d44:	str	r3, [sp, #16]
   18d48:	ldr	r3, [sp, #80]	; 0x50
   18d4c:	ldr	r2, [sp, #36]	; 0x24
   18d50:	str	r3, [sp, #12]
   18d54:	ldr	r3, [sp, #56]	; 0x38
   18d58:	ldr	r1, [sp, #72]	; 0x48
   18d5c:	str	r3, [sp, #8]
   18d60:	ldr	r3, [sp, #164]	; 0xa4
   18d64:	mov	r0, fp
   18d68:	str	r3, [sp, #4]
   18d6c:	str	ip, [sp]
   18d70:	ldr	r3, [sp, #24]
   18d74:	bl	175d8 <__assert_fail@plt+0x5eb4>
   18d78:	mov	r4, r0
   18d7c:	b	17ec0 <__assert_fail@plt+0x679c>
   18d80:	mov	r8, #2
   18d84:	b	17e74 <__assert_fail@plt+0x6750>
   18d88:	ldr	r2, [sp, #28]
   18d8c:	b	187b0 <__assert_fail@plt+0x708c>
   18d90:	mov	r3, #0
   18d94:	str	r3, [sp, #68]	; 0x44
   18d98:	str	r3, [sp, #44]	; 0x2c
   18d9c:	str	r3, [sp, #72]	; 0x48
   18da0:	str	r3, [sp, #28]
   18da4:	mov	r4, r3
   18da8:	ldr	r3, [pc, #-2500]	; 183ec <__assert_fail@plt+0x6cc8>
   18dac:	mov	r2, #1
   18db0:	str	r2, [sp, #40]	; 0x28
   18db4:	str	r2, [sp, #32]
   18db8:	str	r2, [sp, #52]	; 0x34
   18dbc:	str	r3, [sp, #60]	; 0x3c
   18dc0:	b	176d0 <__assert_fail@plt+0x5fac>
   18dc4:	bl	113f4 <__stack_chk_fail@plt>
   18dc8:	mov	r5, r3
   18dcc:	mov	r6, #0
   18dd0:	b	17bc4 <__assert_fail@plt+0x64a0>
   18dd4:	mov	r3, #0
   18dd8:	mov	r2, #1
   18ddc:	str	r3, [sp, #44]	; 0x2c
   18de0:	str	r3, [sp, #72]	; 0x48
   18de4:	str	r2, [sp, #40]	; 0x28
   18de8:	b	17ce0 <__assert_fail@plt+0x65bc>
   18dec:	bl	116e8 <abort@plt>
   18df0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18df4:	sub	sp, sp, #44	; 0x2c
   18df8:	mov	r6, r0
   18dfc:	mov	r4, r3
   18e00:	mov	sl, r1
   18e04:	mov	fp, r2
   18e08:	bl	11580 <__errno_location@plt>
   18e0c:	ldr	r7, [pc, #364]	; 18f80 <__assert_fail@plt+0x785c>
   18e10:	cmp	r6, #0
   18e14:	ldr	r5, [r7]
   18e18:	ldr	r3, [r0]
   18e1c:	str	r3, [sp, #24]
   18e20:	blt	18f7c <__assert_fail@plt+0x7858>
   18e24:	ldr	r3, [r7, #4]
   18e28:	mov	r8, r0
   18e2c:	cmp	r3, r6
   18e30:	bgt	18e7c <__assert_fail@plt+0x7758>
   18e34:	cmn	r6, #-268435454	; 0xf0000002
   18e38:	bgt	18f78 <__assert_fail@plt+0x7854>
   18e3c:	add	r9, r6, #1
   18e40:	add	r3, r7, #8
   18e44:	cmp	r5, r3
   18e48:	lsl	r1, r9, #3
   18e4c:	beq	18f58 <__assert_fail@plt+0x7834>
   18e50:	mov	r0, r5
   18e54:	bl	19e04 <__assert_fail@plt+0x86e0>
   18e58:	mov	r5, r0
   18e5c:	str	r0, [r7]
   18e60:	ldr	r0, [r7, #4]
   18e64:	mov	r1, #0
   18e68:	sub	r2, r9, r0
   18e6c:	add	r0, r5, r0, lsl #3
   18e70:	lsl	r2, r2, #3
   18e74:	bl	115a4 <memset@plt>
   18e78:	str	r9, [r7, #4]
   18e7c:	add	r3, r5, r6, lsl #3
   18e80:	ldr	r1, [r4, #4]
   18e84:	ldr	r7, [r3, #4]
   18e88:	ldr	r9, [r5, r6, lsl #3]
   18e8c:	ldr	r2, [r4, #40]	; 0x28
   18e90:	ldr	ip, [r4, #44]	; 0x2c
   18e94:	str	r3, [sp, #28]
   18e98:	ldr	r3, [r4]
   18e9c:	orr	r1, r1, #1
   18ea0:	add	lr, r4, #8
   18ea4:	str	r1, [sp, #36]	; 0x24
   18ea8:	str	r1, [sp, #4]
   18eac:	str	r2, [sp, #12]
   18eb0:	str	r3, [sp]
   18eb4:	mov	r0, r7
   18eb8:	mov	r1, r9
   18ebc:	str	ip, [sp, #16]
   18ec0:	str	lr, [sp, #8]
   18ec4:	mov	r3, fp
   18ec8:	mov	r2, sl
   18ecc:	str	lr, [sp, #32]
   18ed0:	bl	175d8 <__assert_fail@plt+0x5eb4>
   18ed4:	cmp	r9, r0
   18ed8:	bhi	18f44 <__assert_fail@plt+0x7820>
   18edc:	ldr	r3, [pc, #160]	; 18f84 <__assert_fail@plt+0x7860>
   18ee0:	add	r9, r0, #1
   18ee4:	cmp	r7, r3
   18ee8:	str	r9, [r5, r6, lsl #3]
   18eec:	beq	18ef8 <__assert_fail@plt+0x77d4>
   18ef0:	mov	r0, r7
   18ef4:	bl	11388 <free@plt>
   18ef8:	mov	r0, r9
   18efc:	bl	19da8 <__assert_fail@plt+0x8684>
   18f00:	ldr	lr, [sp, #28]
   18f04:	ldr	ip, [r4, #44]	; 0x2c
   18f08:	ldr	r5, [r4, #40]	; 0x28
   18f0c:	mov	r3, fp
   18f10:	mov	r2, sl
   18f14:	mov	r1, r9
   18f18:	str	r0, [lr, #4]
   18f1c:	ldr	lr, [r4]
   18f20:	ldr	r4, [sp, #32]
   18f24:	str	ip, [sp, #16]
   18f28:	str	r4, [sp, #8]
   18f2c:	ldr	r4, [sp, #36]	; 0x24
   18f30:	str	r5, [sp, #12]
   18f34:	str	r4, [sp, #4]
   18f38:	str	lr, [sp]
   18f3c:	mov	r7, r0
   18f40:	bl	175d8 <__assert_fail@plt+0x5eb4>
   18f44:	ldr	r3, [sp, #24]
   18f48:	mov	r0, r7
   18f4c:	str	r3, [r8]
   18f50:	add	sp, sp, #44	; 0x2c
   18f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f58:	mov	r0, #0
   18f5c:	bl	19e04 <__assert_fail@plt+0x86e0>
   18f60:	ldr	r3, [pc, #32]	; 18f88 <__assert_fail@plt+0x7864>
   18f64:	mov	r5, r0
   18f68:	ldm	r3, {r0, r1}
   18f6c:	str	r5, [r7]
   18f70:	stm	r5, {r0, r1}
   18f74:	b	18e60 <__assert_fail@plt+0x773c>
   18f78:	bl	19ff0 <__assert_fail@plt+0x88cc>
   18f7c:	bl	116e8 <abort@plt>
   18f80:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   18f84:			; <UNDEFINED> instruction: 0x000303bc
   18f88:	ldrdeq	r0, [r3], -r8
   18f8c:	push	{r4, r5, r6, lr}
   18f90:	mov	r5, r0
   18f94:	bl	11580 <__errno_location@plt>
   18f98:	cmp	r5, #0
   18f9c:	mov	r1, #48	; 0x30
   18fa0:	mov	r4, r0
   18fa4:	ldr	r0, [pc, #16]	; 18fbc <__assert_fail@plt+0x7898>
   18fa8:	ldr	r6, [r4]
   18fac:	movne	r0, r5
   18fb0:	bl	19fb0 <__assert_fail@plt+0x888c>
   18fb4:	str	r6, [r4]
   18fb8:	pop	{r4, r5, r6, pc}
   18fbc:			; <UNDEFINED> instruction: 0x000304bc
   18fc0:	ldr	r3, [pc, #12]	; 18fd4 <__assert_fail@plt+0x78b0>
   18fc4:	cmp	r0, #0
   18fc8:	moveq	r0, r3
   18fcc:	ldr	r0, [r0]
   18fd0:	bx	lr
   18fd4:			; <UNDEFINED> instruction: 0x000304bc
   18fd8:	ldr	r3, [pc, #12]	; 18fec <__assert_fail@plt+0x78c8>
   18fdc:	cmp	r0, #0
   18fe0:	moveq	r0, r3
   18fe4:	str	r1, [r0]
   18fe8:	bx	lr
   18fec:			; <UNDEFINED> instruction: 0x000304bc
   18ff0:	ldr	r3, [pc, #52]	; 1902c <__assert_fail@plt+0x7908>
   18ff4:	cmp	r0, #0
   18ff8:	moveq	r0, r3
   18ffc:	add	r3, r0, #8
   19000:	push	{lr}		; (str lr, [sp, #-4]!)
   19004:	lsr	lr, r1, #5
   19008:	and	r1, r1, #31
   1900c:	ldr	ip, [r3, lr, lsl #2]
   19010:	lsr	r0, ip, r1
   19014:	eor	r2, r2, r0
   19018:	and	r2, r2, #1
   1901c:	and	r0, r0, #1
   19020:	eor	r1, ip, r2, lsl r1
   19024:	str	r1, [r3, lr, lsl #2]
   19028:	pop	{pc}		; (ldr pc, [sp], #4)
   1902c:			; <UNDEFINED> instruction: 0x000304bc
   19030:	ldr	r3, [pc, #16]	; 19048 <__assert_fail@plt+0x7924>
   19034:	cmp	r0, #0
   19038:	movne	r3, r0
   1903c:	ldr	r0, [r3, #4]
   19040:	str	r1, [r3, #4]
   19044:	bx	lr
   19048:			; <UNDEFINED> instruction: 0x000304bc
   1904c:	ldr	r3, [pc, #44]	; 19080 <__assert_fail@plt+0x795c>
   19050:	cmp	r0, #0
   19054:	moveq	r0, r3
   19058:	mov	ip, #10
   1905c:	cmp	r2, #0
   19060:	cmpne	r1, #0
   19064:	str	ip, [r0]
   19068:	beq	19078 <__assert_fail@plt+0x7954>
   1906c:	str	r1, [r0, #40]	; 0x28
   19070:	str	r2, [r0, #44]	; 0x2c
   19074:	bx	lr
   19078:	push	{r4, lr}
   1907c:	bl	116e8 <abort@plt>
   19080:			; <UNDEFINED> instruction: 0x000304bc
   19084:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19088:	sub	sp, sp, #24
   1908c:	ldr	ip, [pc, #108]	; 19100 <__assert_fail@plt+0x79dc>
   19090:	ldr	r4, [sp, #56]	; 0x38
   19094:	mov	r9, r2
   19098:	cmp	r4, #0
   1909c:	moveq	r4, ip
   190a0:	mov	sl, r3
   190a4:	mov	r7, r0
   190a8:	mov	r8, r1
   190ac:	bl	11580 <__errno_location@plt>
   190b0:	ldr	r3, [r4, #44]	; 0x2c
   190b4:	mov	r1, r8
   190b8:	ldr	r6, [r0]
   190bc:	str	r3, [sp, #16]
   190c0:	ldr	r2, [r4, #40]	; 0x28
   190c4:	add	r3, r4, #8
   190c8:	str	r3, [sp, #8]
   190cc:	str	r2, [sp, #12]
   190d0:	ldr	r2, [r4, #4]
   190d4:	mov	r5, r0
   190d8:	str	r2, [sp, #4]
   190dc:	ldr	ip, [r4]
   190e0:	mov	r3, sl
   190e4:	mov	r2, r9
   190e8:	mov	r0, r7
   190ec:	str	ip, [sp]
   190f0:	bl	175d8 <__assert_fail@plt+0x5eb4>
   190f4:	str	r6, [r5]
   190f8:	add	sp, sp, #24
   190fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19100:			; <UNDEFINED> instruction: 0x000304bc
   19104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19108:	cmp	r3, #0
   1910c:	sub	sp, sp, #44	; 0x2c
   19110:	ldr	r4, [pc, #192]	; 191d8 <__assert_fail@plt+0x7ab4>
   19114:	mov	r6, r2
   19118:	movne	r4, r3
   1911c:	mov	r9, r1
   19120:	mov	r8, r0
   19124:	bl	11580 <__errno_location@plt>
   19128:	ldr	r3, [r4, #44]	; 0x2c
   1912c:	ldr	r5, [r4, #4]
   19130:	add	sl, r4, #8
   19134:	cmp	r6, #0
   19138:	orreq	r5, r5, #1
   1913c:	mov	r1, #0
   19140:	ldr	r2, [r0]
   19144:	str	r3, [sp, #16]
   19148:	ldr	r3, [r4, #40]	; 0x28
   1914c:	stmib	sp, {r5, sl}
   19150:	str	r3, [sp, #12]
   19154:	ldr	r3, [r4]
   19158:	mov	r7, r0
   1915c:	str	r2, [sp, #28]
   19160:	str	r3, [sp]
   19164:	mov	r2, r8
   19168:	mov	r3, r9
   1916c:	mov	r0, r1
   19170:	bl	175d8 <__assert_fail@plt+0x5eb4>
   19174:	add	r1, r0, #1
   19178:	mov	fp, r0
   1917c:	mov	r0, r1
   19180:	str	r1, [sp, #36]	; 0x24
   19184:	bl	19da8 <__assert_fail@plt+0x8684>
   19188:	ldr	r3, [r4, #44]	; 0x2c
   1918c:	mov	r2, r8
   19190:	str	r3, [sp, #16]
   19194:	ldr	r3, [r4, #40]	; 0x28
   19198:	str	r5, [sp, #4]
   1919c:	str	r3, [sp, #12]
   191a0:	str	sl, [sp, #8]
   191a4:	ldr	ip, [r4]
   191a8:	ldr	r1, [sp, #36]	; 0x24
   191ac:	mov	r3, r9
   191b0:	str	ip, [sp]
   191b4:	str	r0, [sp, #32]
   191b8:	bl	175d8 <__assert_fail@plt+0x5eb4>
   191bc:	ldr	r2, [sp, #28]
   191c0:	cmp	r6, #0
   191c4:	str	r2, [r7]
   191c8:	ldr	r0, [sp, #32]
   191cc:	strne	fp, [r6]
   191d0:	add	sp, sp, #44	; 0x2c
   191d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191d8:			; <UNDEFINED> instruction: 0x000304bc
   191dc:	mov	r3, r2
   191e0:	mov	r2, #0
   191e4:	b	19104 <__assert_fail@plt+0x79e0>
   191e8:	push	{r4, r5, r6, r7, r8, lr}
   191ec:	ldr	r6, [pc, #112]	; 19264 <__assert_fail@plt+0x7b40>
   191f0:	ldr	r3, [r6, #4]
   191f4:	ldr	r7, [r6]
   191f8:	cmp	r3, #1
   191fc:	ble	19220 <__assert_fail@plt+0x7afc>
   19200:	sub	r5, r7, #8
   19204:	add	r5, r5, r3, lsl #3
   19208:	mov	r4, r7
   1920c:	ldr	r0, [r4, #12]
   19210:	add	r4, r4, #8
   19214:	bl	11388 <free@plt>
   19218:	cmp	r4, r5
   1921c:	bne	1920c <__assert_fail@plt+0x7ae8>
   19220:	ldr	r0, [r7, #4]
   19224:	ldr	r4, [pc, #60]	; 19268 <__assert_fail@plt+0x7b44>
   19228:	cmp	r0, r4
   1922c:	beq	19240 <__assert_fail@plt+0x7b1c>
   19230:	bl	11388 <free@plt>
   19234:	mov	r3, #256	; 0x100
   19238:	str	r4, [r6, #12]
   1923c:	str	r3, [r6, #8]
   19240:	ldr	r4, [pc, #36]	; 1926c <__assert_fail@plt+0x7b48>
   19244:	cmp	r7, r4
   19248:	beq	19258 <__assert_fail@plt+0x7b34>
   1924c:	mov	r0, r7
   19250:	bl	11388 <free@plt>
   19254:	str	r4, [r6]
   19258:	mov	r3, #1
   1925c:	str	r3, [r6, #4]
   19260:	pop	{r4, r5, r6, r7, r8, pc}
   19264:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   19268:			; <UNDEFINED> instruction: 0x000303bc
   1926c:	ldrdeq	r0, [r3], -r8
   19270:	ldr	r3, [pc, #4]	; 1927c <__assert_fail@plt+0x7b58>
   19274:	mvn	r2, #0
   19278:	b	18df0 <__assert_fail@plt+0x76cc>
   1927c:			; <UNDEFINED> instruction: 0x000304bc
   19280:	ldr	r3, [pc]	; 19288 <__assert_fail@plt+0x7b64>
   19284:	b	18df0 <__assert_fail@plt+0x76cc>
   19288:			; <UNDEFINED> instruction: 0x000304bc
   1928c:	mov	r1, r0
   19290:	ldr	r3, [pc, #8]	; 192a0 <__assert_fail@plt+0x7b7c>
   19294:	mvn	r2, #0
   19298:	mov	r0, #0
   1929c:	b	18df0 <__assert_fail@plt+0x76cc>
   192a0:			; <UNDEFINED> instruction: 0x000304bc
   192a4:	mov	r2, r1
   192a8:	ldr	r3, [pc, #8]	; 192b8 <__assert_fail@plt+0x7b94>
   192ac:	mov	r1, r0
   192b0:	mov	r0, #0
   192b4:	b	18df0 <__assert_fail@plt+0x76cc>
   192b8:			; <UNDEFINED> instruction: 0x000304bc
   192bc:	push	{r4, r5, r6, lr}
   192c0:	sub	sp, sp, #56	; 0x38
   192c4:	ldr	r4, [pc, #68]	; 19310 <__assert_fail@plt+0x7bec>
   192c8:	mov	r6, r2
   192cc:	mov	r5, r0
   192d0:	ldr	r3, [r4]
   192d4:	add	r0, sp, #4
   192d8:	str	r3, [sp, #52]	; 0x34
   192dc:	bl	17468 <__assert_fail@plt+0x5d44>
   192e0:	add	r3, sp, #4
   192e4:	mvn	r2, #0
   192e8:	mov	r1, r6
   192ec:	mov	r0, r5
   192f0:	bl	18df0 <__assert_fail@plt+0x76cc>
   192f4:	ldr	r2, [sp, #52]	; 0x34
   192f8:	ldr	r3, [r4]
   192fc:	cmp	r2, r3
   19300:	bne	1930c <__assert_fail@plt+0x7be8>
   19304:	add	sp, sp, #56	; 0x38
   19308:	pop	{r4, r5, r6, pc}
   1930c:	bl	113f4 <__stack_chk_fail@plt>
   19310:	andeq	pc, r2, r8, lsl #30
   19314:	push	{r4, r5, r6, r7, lr}
   19318:	sub	sp, sp, #60	; 0x3c
   1931c:	ldr	r4, [pc, #72]	; 1936c <__assert_fail@plt+0x7c48>
   19320:	mov	r6, r2
   19324:	mov	r7, r3
   19328:	ldr	ip, [r4]
   1932c:	mov	r5, r0
   19330:	add	r0, sp, #4
   19334:	str	ip, [sp, #52]	; 0x34
   19338:	bl	17468 <__assert_fail@plt+0x5d44>
   1933c:	add	r3, sp, #4
   19340:	mov	r2, r7
   19344:	mov	r1, r6
   19348:	mov	r0, r5
   1934c:	bl	18df0 <__assert_fail@plt+0x76cc>
   19350:	ldr	r2, [sp, #52]	; 0x34
   19354:	ldr	r3, [r4]
   19358:	cmp	r2, r3
   1935c:	bne	19368 <__assert_fail@plt+0x7c44>
   19360:	add	sp, sp, #60	; 0x3c
   19364:	pop	{r4, r5, r6, r7, pc}
   19368:	bl	113f4 <__stack_chk_fail@plt>
   1936c:	andeq	pc, r2, r8, lsl #30
   19370:	mov	r2, r1
   19374:	mov	r1, r0
   19378:	mov	r0, #0
   1937c:	b	192bc <__assert_fail@plt+0x7b98>
   19380:	mov	r3, r2
   19384:	mov	r2, r1
   19388:	mov	r1, r0
   1938c:	mov	r0, #0
   19390:	b	19314 <__assert_fail@plt+0x7bf0>
   19394:	push	{r4, r5, r6, r7, r8, r9, lr}
   19398:	mov	r4, r2
   1939c:	ldr	lr, [pc, #128]	; 19424 <__assert_fail@plt+0x7d00>
   193a0:	mov	r8, r0
   193a4:	mov	r9, r1
   193a8:	ldm	lr!, {r0, r1, r2, r3}
   193ac:	sub	sp, sp, #60	; 0x3c
   193b0:	add	ip, sp, #4
   193b4:	lsr	r6, r4, #5
   193b8:	stmia	ip!, {r0, r1, r2, r3}
   193bc:	add	r7, sp, #12
   193c0:	ldm	lr!, {r0, r1, r2, r3}
   193c4:	and	r4, r4, #31
   193c8:	ldr	r5, [pc, #88]	; 19428 <__assert_fail@plt+0x7d04>
   193cc:	stmia	ip!, {r0, r1, r2, r3}
   193d0:	ldm	lr, {r0, r1, r2, r3}
   193d4:	stm	ip, {r0, r1, r2, r3}
   193d8:	mov	r2, r9
   193dc:	ldr	r3, [r7, r6, lsl #2]
   193e0:	ldr	ip, [r5]
   193e4:	mov	r1, r8
   193e8:	mvn	r0, r3, lsr r4
   193ec:	and	r0, r0, #1
   193f0:	str	ip, [sp, #52]	; 0x34
   193f4:	eor	r4, r3, r0, lsl r4
   193f8:	add	r3, sp, #4
   193fc:	mov	r0, #0
   19400:	str	r4, [r7, r6, lsl #2]
   19404:	bl	18df0 <__assert_fail@plt+0x76cc>
   19408:	ldr	r2, [sp, #52]	; 0x34
   1940c:	ldr	r3, [r5]
   19410:	cmp	r2, r3
   19414:	bne	19420 <__assert_fail@plt+0x7cfc>
   19418:	add	sp, sp, #60	; 0x3c
   1941c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19420:	bl	113f4 <__stack_chk_fail@plt>
   19424:			; <UNDEFINED> instruction: 0x000304bc
   19428:	andeq	pc, r2, r8, lsl #30
   1942c:	mov	r2, r1
   19430:	mvn	r1, #0
   19434:	b	19394 <__assert_fail@plt+0x7c70>
   19438:	mov	r2, #58	; 0x3a
   1943c:	mvn	r1, #0
   19440:	b	19394 <__assert_fail@plt+0x7c70>
   19444:	mov	r2, #58	; 0x3a
   19448:	b	19394 <__assert_fail@plt+0x7c70>
   1944c:	push	{r4, r5, r6, r7, r8, lr}
   19450:	sub	sp, sp, #104	; 0x68
   19454:	ldr	r5, [pc, #120]	; 194d4 <__assert_fail@plt+0x7db0>
   19458:	mov	r6, r0
   1945c:	mov	r0, sp
   19460:	ldr	r3, [r5]
   19464:	mov	r7, r2
   19468:	str	r3, [sp, #100]	; 0x64
   1946c:	bl	17468 <__assert_fail@plt+0x5d44>
   19470:	mov	ip, sp
   19474:	add	lr, sp, #52	; 0x34
   19478:	ldm	ip!, {r0, r1, r2, r3}
   1947c:	stmia	lr!, {r0, r1, r2, r3}
   19480:	ldm	ip!, {r0, r1, r2, r3}
   19484:	ldr	r8, [sp, #64]	; 0x40
   19488:	stmia	lr!, {r0, r1, r2, r3}
   1948c:	mvn	r4, r8
   19490:	ldm	ip, {r0, r1, r2, r3}
   19494:	and	ip, r4, #67108864	; 0x4000000
   19498:	eor	ip, ip, r8
   1949c:	str	ip, [sp, #64]	; 0x40
   194a0:	stm	lr, {r0, r1, r2, r3}
   194a4:	add	r3, sp, #52	; 0x34
   194a8:	mvn	r2, #0
   194ac:	mov	r1, r7
   194b0:	mov	r0, r6
   194b4:	bl	18df0 <__assert_fail@plt+0x76cc>
   194b8:	ldr	r2, [sp, #100]	; 0x64
   194bc:	ldr	r3, [r5]
   194c0:	cmp	r2, r3
   194c4:	bne	194d0 <__assert_fail@plt+0x7dac>
   194c8:	add	sp, sp, #104	; 0x68
   194cc:	pop	{r4, r5, r6, r7, r8, pc}
   194d0:	bl	113f4 <__stack_chk_fail@plt>
   194d4:	andeq	pc, r2, r8, lsl #30
   194d8:	push	{r4, r5, r6, r7, r8, r9, lr}
   194dc:	mov	r6, r1
   194e0:	ldr	lr, [pc, #132]	; 1956c <__assert_fail@plt+0x7e48>
   194e4:	mov	r5, r2
   194e8:	mov	r8, r0
   194ec:	mov	r9, r3
   194f0:	ldm	lr!, {r0, r1, r2, r3}
   194f4:	sub	sp, sp, #60	; 0x3c
   194f8:	add	ip, sp, #4
   194fc:	ldr	r4, [pc, #108]	; 19570 <__assert_fail@plt+0x7e4c>
   19500:	stmia	ip!, {r0, r1, r2, r3}
   19504:	mov	r7, #10
   19508:	ldm	lr!, {r0, r1, r2, r3}
   1950c:	cmp	r5, #0
   19510:	cmpne	r6, #0
   19514:	str	r7, [sp, #4]
   19518:	stmia	ip!, {r0, r1, r2, r3}
   1951c:	ldm	lr, {r0, r1, r2, r3}
   19520:	ldr	lr, [r4]
   19524:	stm	ip, {r0, r1, r2, r3}
   19528:	str	lr, [sp, #52]	; 0x34
   1952c:	beq	19568 <__assert_fail@plt+0x7e44>
   19530:	add	r3, sp, #4
   19534:	ldr	r2, [sp, #88]	; 0x58
   19538:	mov	r1, r9
   1953c:	mov	r0, r8
   19540:	str	r6, [sp, #44]	; 0x2c
   19544:	str	r5, [sp, #48]	; 0x30
   19548:	bl	18df0 <__assert_fail@plt+0x76cc>
   1954c:	ldr	r2, [sp, #52]	; 0x34
   19550:	ldr	r3, [r4]
   19554:	cmp	r2, r3
   19558:	bne	19564 <__assert_fail@plt+0x7e40>
   1955c:	add	sp, sp, #60	; 0x3c
   19560:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19564:	bl	113f4 <__stack_chk_fail@plt>
   19568:	bl	116e8 <abort@plt>
   1956c:			; <UNDEFINED> instruction: 0x000304bc
   19570:	andeq	pc, r2, r8, lsl #30
   19574:	push	{lr}		; (str lr, [sp, #-4]!)
   19578:	sub	sp, sp, #12
   1957c:	mvn	ip, #0
   19580:	str	ip, [sp]
   19584:	bl	194d8 <__assert_fail@plt+0x7db4>
   19588:	add	sp, sp, #12
   1958c:	pop	{pc}		; (ldr pc, [sp], #4)
   19590:	push	{lr}		; (str lr, [sp, #-4]!)
   19594:	sub	sp, sp, #12
   19598:	mvn	ip, #0
   1959c:	mov	r3, r2
   195a0:	str	ip, [sp]
   195a4:	mov	r2, r1
   195a8:	mov	r1, r0
   195ac:	mov	r0, #0
   195b0:	bl	194d8 <__assert_fail@plt+0x7db4>
   195b4:	add	sp, sp, #12
   195b8:	pop	{pc}		; (ldr pc, [sp], #4)
   195bc:	push	{lr}		; (str lr, [sp, #-4]!)
   195c0:	sub	sp, sp, #12
   195c4:	str	r3, [sp]
   195c8:	mov	r3, r2
   195cc:	mov	r2, r1
   195d0:	mov	r1, r0
   195d4:	mov	r0, #0
   195d8:	bl	194d8 <__assert_fail@plt+0x7db4>
   195dc:	add	sp, sp, #12
   195e0:	pop	{pc}		; (ldr pc, [sp], #4)
   195e4:	ldr	r3, [pc]	; 195ec <__assert_fail@plt+0x7ec8>
   195e8:	b	18df0 <__assert_fail@plt+0x76cc>
   195ec:	andeq	r0, r3, r0, ror #5
   195f0:	mov	r2, r1
   195f4:	ldr	r3, [pc, #8]	; 19604 <__assert_fail@plt+0x7ee0>
   195f8:	mov	r1, r0
   195fc:	mov	r0, #0
   19600:	b	18df0 <__assert_fail@plt+0x76cc>
   19604:	andeq	r0, r3, r0, ror #5
   19608:	ldr	r3, [pc, #4]	; 19614 <__assert_fail@plt+0x7ef0>
   1960c:	mvn	r2, #0
   19610:	b	18df0 <__assert_fail@plt+0x76cc>
   19614:	andeq	r0, r3, r0, ror #5
   19618:	mov	r1, r0
   1961c:	ldr	r3, [pc, #8]	; 1962c <__assert_fail@plt+0x7f08>
   19620:	mvn	r2, #0
   19624:	mov	r0, #0
   19628:	b	18df0 <__assert_fail@plt+0x76cc>
   1962c:	andeq	r0, r3, r0, ror #5
   19630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19634:	mov	r9, r1
   19638:	ldr	r4, [pc, #352]	; 197a0 <__assert_fail@plt+0x807c>
   1963c:	sub	sp, sp, #228	; 0xe4
   19640:	mov	fp, r0
   19644:	ldr	r1, [r4]
   19648:	mov	r0, r9
   1964c:	mov	r8, r3
   19650:	mov	sl, r2
   19654:	str	r1, [sp, #220]	; 0xdc
   19658:	bl	14e60 <__assert_fail@plt+0x373c>
   1965c:	mov	r5, r0
   19660:	mov	r0, r8
   19664:	bl	14e60 <__assert_fail@plt+0x373c>
   19668:	mov	r6, r0
   1966c:	mov	r0, r5
   19670:	bl	14eb0 <__assert_fail@plt+0x378c>
   19674:	mov	r7, r0
   19678:	mov	r0, r6
   1967c:	bl	14eb0 <__assert_fail@plt+0x378c>
   19680:	cmp	r7, r0
   19684:	beq	196a8 <__assert_fail@plt+0x7f84>
   19688:	mov	r6, #0
   1968c:	ldr	r2, [sp, #220]	; 0xdc
   19690:	ldr	r3, [r4]
   19694:	mov	r0, r6
   19698:	cmp	r2, r3
   1969c:	bne	1979c <__assert_fail@plt+0x8078>
   196a0:	add	sp, sp, #228	; 0xe4
   196a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196a8:	mov	r2, r7
   196ac:	mov	r1, r6
   196b0:	mov	r0, r5
   196b4:	bl	113c4 <memcmp@plt>
   196b8:	cmp	r0, #0
   196bc:	bne	19688 <__assert_fail@plt+0x7f64>
   196c0:	mov	r0, r9
   196c4:	bl	14d8c <__assert_fail@plt+0x3668>
   196c8:	mov	r3, #256	; 0x100
   196cc:	str	r3, [sp]
   196d0:	mov	r1, fp
   196d4:	add	r3, sp, #8
   196d8:	mov	r2, r0
   196dc:	mov	r5, r0
   196e0:	mov	r0, #3
   196e4:	bl	11430 <__fxstatat64@plt>
   196e8:	cmp	r0, #0
   196ec:	bne	19780 <__assert_fail@plt+0x805c>
   196f0:	mov	r0, r5
   196f4:	bl	11388 <free@plt>
   196f8:	mov	r0, r8
   196fc:	bl	14d8c <__assert_fail@plt+0x3668>
   19700:	mov	r3, #256	; 0x100
   19704:	str	r3, [sp]
   19708:	mov	r1, sl
   1970c:	add	r3, sp, #112	; 0x70
   19710:	mov	r2, r0
   19714:	mov	r5, r0
   19718:	mov	r0, #3
   1971c:	bl	11430 <__fxstatat64@plt>
   19720:	cmp	r0, #0
   19724:	bne	19764 <__assert_fail@plt+0x8040>
   19728:	ldrd	r0, [sp, #104]	; 0x68
   1972c:	ldrd	r2, [sp, #208]	; 0xd0
   19730:	cmp	r1, r3
   19734:	cmpeq	r0, r2
   19738:	movne	r6, #0
   1973c:	bne	19758 <__assert_fail@plt+0x8034>
   19740:	ldrd	r0, [sp, #8]
   19744:	ldrd	r2, [sp, #112]	; 0x70
   19748:	cmp	r1, r3
   1974c:	cmpeq	r0, r2
   19750:	moveq	r6, #1
   19754:	movne	r6, #0
   19758:	mov	r0, r5
   1975c:	bl	11388 <free@plt>
   19760:	b	1968c <__assert_fail@plt+0x7f68>
   19764:	bl	11580 <__errno_location@plt>
   19768:	mov	r3, r5
   1976c:	ldr	r2, [pc, #48]	; 197a4 <__assert_fail@plt+0x8080>
   19770:	ldr	r1, [r0]
   19774:	mov	r0, #1
   19778:	bl	114b4 <error@plt>
   1977c:	b	19728 <__assert_fail@plt+0x8004>
   19780:	bl	11580 <__errno_location@plt>
   19784:	mov	r3, r5
   19788:	ldr	r2, [pc, #20]	; 197a4 <__assert_fail@plt+0x8080>
   1978c:	ldr	r1, [r0]
   19790:	mov	r0, #1
   19794:	bl	114b4 <error@plt>
   19798:	b	196f0 <__assert_fail@plt+0x7fcc>
   1979c:	bl	113f4 <__stack_chk_fail@plt>
   197a0:	andeq	pc, r2, r8, lsl #30
   197a4:	andeq	pc, r1, r4, ror #12
   197a8:	mvn	r2, #99	; 0x63
   197ac:	mov	r3, r1
   197b0:	mov	r1, r0
   197b4:	mov	r0, r2
   197b8:	b	19630 <__assert_fail@plt+0x7f0c>
   197bc:	push	{r4, r5, r6, lr}
   197c0:	mov	r4, #0
   197c4:	mov	r5, r0
   197c8:	str	r4, [r0, #4]
   197cc:	mov	r1, #524288	; 0x80000
   197d0:	ldr	r0, [pc, #52]	; 1980c <__assert_fail@plt+0x80e8>
   197d4:	bl	1bd5c <__assert_fail@plt+0xa638>
   197d8:	cmp	r0, r4
   197dc:	str	r0, [r5]
   197e0:	blt	197ec <__assert_fail@plt+0x80c8>
   197e4:	mov	r0, r4
   197e8:	pop	{r4, r5, r6, pc}
   197ec:	mov	r1, r4
   197f0:	mov	r0, r4
   197f4:	bl	11538 <getcwd@plt>
   197f8:	clz	r4, r0
   197fc:	lsr	r4, r4, #5
   19800:	str	r0, [r5, #4]
   19804:	rsb	r0, r4, #0
   19808:	pop	{r4, r5, r6, pc}
   1980c:	ldrdeq	pc, [r1], -r8
   19810:	ldr	r3, [r0]
   19814:	cmp	r3, #0
   19818:	blt	19824 <__assert_fail@plt+0x8100>
   1981c:	mov	r0, r3
   19820:	b	11688 <fchdir@plt>
   19824:	ldr	r0, [r0, #4]
   19828:	b	1abc8 <__assert_fail@plt+0x94a4>
   1982c:	push	{r4, lr}
   19830:	mov	r4, r0
   19834:	ldr	r0, [r0]
   19838:	cmp	r0, #0
   1983c:	blt	19844 <__assert_fail@plt+0x8120>
   19840:	bl	116f4 <close@plt>
   19844:	ldr	r0, [r4, #4]
   19848:	pop	{r4, lr}
   1984c:	b	11388 <free@plt>
   19850:	push	{r4, r5, r6, lr}
   19854:	sub	sp, sp, #32
   19858:	cmp	r1, #0
   1985c:	mov	r5, r0
   19860:	ldr	r4, [sp, #48]	; 0x30
   19864:	ldr	r6, [sp, #52]	; 0x34
   19868:	beq	198f8 <__assert_fail@plt+0x81d4>
   1986c:	strd	r2, [sp]
   19870:	mov	r3, r1
   19874:	ldr	r2, [pc, #828]	; 19bb8 <__assert_fail@plt+0x8494>
   19878:	mov	r1, #1
   1987c:	bl	115d4 <__fprintf_chk@plt>
   19880:	mov	r2, #5
   19884:	ldr	r1, [pc, #816]	; 19bbc <__assert_fail@plt+0x8498>
   19888:	mov	r0, #0
   1988c:	bl	113dc <dcgettext@plt>
   19890:	ldr	r3, [pc, #808]	; 19bc0 <__assert_fail@plt+0x849c>
   19894:	ldr	r2, [pc, #808]	; 19bc4 <__assert_fail@plt+0x84a0>
   19898:	str	r3, [sp]
   1989c:	mov	r1, #1
   198a0:	mov	r3, r0
   198a4:	mov	r0, r5
   198a8:	bl	115d4 <__fprintf_chk@plt>
   198ac:	ldr	r1, [pc, #788]	; 19bc8 <__assert_fail@plt+0x84a4>
   198b0:	mov	r2, #5
   198b4:	mov	r0, #0
   198b8:	bl	113dc <dcgettext@plt>
   198bc:	mov	r1, r5
   198c0:	bl	1131c <fputs_unlocked@plt>
   198c4:	cmp	r6, #9
   198c8:	ldrls	pc, [pc, r6, lsl #2]
   198cc:	b	19ba8 <__assert_fail@plt+0x8484>
   198d0:			; <UNDEFINED> instruction: 0x00019bb4
   198d4:	andeq	r9, r1, ip, ror r9
   198d8:	andeq	r9, r1, r8, lsr #19
   198dc:	ldrdeq	r9, [r1], -ip
   198e0:	andeq	r9, r1, r8, lsl sl
   198e4:	andeq	r9, r1, r8, asr sl
   198e8:	andeq	r9, r1, r0, lsr #21
   198ec:	strdeq	r9, [r1], -r0
   198f0:	andeq	r9, r1, r8, asr #22
   198f4:	andeq	r9, r1, r0, lsl r9
   198f8:	str	r3, [sp]
   198fc:	mov	r1, #1
   19900:	mov	r3, r2
   19904:	ldr	r2, [pc, #704]	; 19bcc <__assert_fail@plt+0x84a8>
   19908:	bl	115d4 <__fprintf_chk@plt>
   1990c:	b	19880 <__assert_fail@plt+0x815c>
   19910:	ldr	r1, [pc, #696]	; 19bd0 <__assert_fail@plt+0x84ac>
   19914:	mov	r2, #5
   19918:	mov	r0, #0
   1991c:	bl	113dc <dcgettext@plt>
   19920:	ldr	r2, [r4, #32]
   19924:	ldr	r3, [r4, #28]
   19928:	ldr	r1, [r4, #24]
   1992c:	str	r2, [sp, #28]
   19930:	ldr	r2, [r4, #20]
   19934:	str	r3, [sp, #24]
   19938:	ldr	r3, [r4, #16]
   1993c:	str	r1, [sp, #20]
   19940:	ldr	r1, [r4, #12]
   19944:	str	r2, [sp, #16]
   19948:	ldr	r2, [r4, #8]
   1994c:	str	r3, [sp, #12]
   19950:	ldr	r3, [r4, #4]
   19954:	str	r1, [sp, #8]
   19958:	str	r2, [sp, #4]
   1995c:	str	r3, [sp]
   19960:	mov	r1, #1
   19964:	ldr	r3, [r4]
   19968:	mov	r2, r0
   1996c:	mov	r0, r5
   19970:	bl	115d4 <__fprintf_chk@plt>
   19974:	add	sp, sp, #32
   19978:	pop	{r4, r5, r6, pc}
   1997c:	mov	r2, #5
   19980:	ldr	r1, [pc, #588]	; 19bd4 <__assert_fail@plt+0x84b0>
   19984:	mov	r0, #0
   19988:	bl	113dc <dcgettext@plt>
   1998c:	ldr	r3, [r4]
   19990:	mov	r1, #1
   19994:	mov	r2, r0
   19998:	mov	r0, r5
   1999c:	add	sp, sp, #32
   199a0:	pop	{r4, r5, r6, lr}
   199a4:	b	115d4 <__fprintf_chk@plt>
   199a8:	mov	r2, #5
   199ac:	ldr	r1, [pc, #548]	; 19bd8 <__assert_fail@plt+0x84b4>
   199b0:	mov	r0, #0
   199b4:	bl	113dc <dcgettext@plt>
   199b8:	ldr	r2, [r4, #4]
   199bc:	ldr	r3, [r4]
   199c0:	mov	r1, #1
   199c4:	str	r2, [sp, #48]	; 0x30
   199c8:	mov	r2, r0
   199cc:	mov	r0, r5
   199d0:	add	sp, sp, #32
   199d4:	pop	{r4, r5, r6, lr}
   199d8:	b	115d4 <__fprintf_chk@plt>
   199dc:	mov	r2, #5
   199e0:	ldr	r1, [pc, #500]	; 19bdc <__assert_fail@plt+0x84b8>
   199e4:	mov	r0, #0
   199e8:	bl	113dc <dcgettext@plt>
   199ec:	ldr	r2, [r4, #8]
   199f0:	ldr	r3, [r4, #4]
   199f4:	mov	r1, #1
   199f8:	str	r2, [sp, #52]	; 0x34
   199fc:	str	r3, [sp, #48]	; 0x30
   19a00:	ldr	r3, [r4]
   19a04:	mov	r2, r0
   19a08:	mov	r0, r5
   19a0c:	add	sp, sp, #32
   19a10:	pop	{r4, r5, r6, lr}
   19a14:	b	115d4 <__fprintf_chk@plt>
   19a18:	mov	r2, #5
   19a1c:	ldr	r1, [pc, #444]	; 19be0 <__assert_fail@plt+0x84bc>
   19a20:	mov	r0, #0
   19a24:	bl	113dc <dcgettext@plt>
   19a28:	ldr	r1, [r4, #12]
   19a2c:	ldr	r2, [r4, #8]
   19a30:	ldr	r3, [r4, #4]
   19a34:	str	r1, [sp, #8]
   19a38:	str	r2, [sp, #4]
   19a3c:	str	r3, [sp]
   19a40:	mov	r1, #1
   19a44:	ldr	r3, [r4]
   19a48:	mov	r2, r0
   19a4c:	mov	r0, r5
   19a50:	bl	115d4 <__fprintf_chk@plt>
   19a54:	b	19974 <__assert_fail@plt+0x8250>
   19a58:	mov	r2, #5
   19a5c:	ldr	r1, [pc, #384]	; 19be4 <__assert_fail@plt+0x84c0>
   19a60:	mov	r0, #0
   19a64:	bl	113dc <dcgettext@plt>
   19a68:	ldr	r3, [r4, #16]
   19a6c:	ldr	r1, [r4, #12]
   19a70:	ldr	r2, [r4, #8]
   19a74:	str	r3, [sp, #12]
   19a78:	ldr	r3, [r4, #4]
   19a7c:	str	r1, [sp, #8]
   19a80:	str	r2, [sp, #4]
   19a84:	str	r3, [sp]
   19a88:	mov	r1, #1
   19a8c:	ldr	r3, [r4]
   19a90:	mov	r2, r0
   19a94:	mov	r0, r5
   19a98:	bl	115d4 <__fprintf_chk@plt>
   19a9c:	b	19974 <__assert_fail@plt+0x8250>
   19aa0:	mov	r2, #5
   19aa4:	ldr	r1, [pc, #316]	; 19be8 <__assert_fail@plt+0x84c4>
   19aa8:	mov	r0, #0
   19aac:	bl	113dc <dcgettext@plt>
   19ab0:	ldr	r2, [r4, #20]
   19ab4:	ldr	r3, [r4, #16]
   19ab8:	ldr	r1, [r4, #12]
   19abc:	str	r2, [sp, #16]
   19ac0:	ldr	r2, [r4, #8]
   19ac4:	str	r3, [sp, #12]
   19ac8:	ldr	r3, [r4, #4]
   19acc:	str	r1, [sp, #8]
   19ad0:	str	r2, [sp, #4]
   19ad4:	str	r3, [sp]
   19ad8:	mov	r1, #1
   19adc:	ldr	r3, [r4]
   19ae0:	mov	r2, r0
   19ae4:	mov	r0, r5
   19ae8:	bl	115d4 <__fprintf_chk@plt>
   19aec:	b	19974 <__assert_fail@plt+0x8250>
   19af0:	mov	r2, #5
   19af4:	ldr	r1, [pc, #240]	; 19bec <__assert_fail@plt+0x84c8>
   19af8:	mov	r0, #0
   19afc:	bl	113dc <dcgettext@plt>
   19b00:	ldr	r1, [r4, #24]
   19b04:	ldr	r2, [r4, #20]
   19b08:	ldr	r3, [r4, #16]
   19b0c:	str	r1, [sp, #20]
   19b10:	ldr	r1, [r4, #12]
   19b14:	str	r2, [sp, #16]
   19b18:	ldr	r2, [r4, #8]
   19b1c:	str	r3, [sp, #12]
   19b20:	ldr	r3, [r4, #4]
   19b24:	str	r1, [sp, #8]
   19b28:	str	r2, [sp, #4]
   19b2c:	str	r3, [sp]
   19b30:	mov	r1, #1
   19b34:	ldr	r3, [r4]
   19b38:	mov	r2, r0
   19b3c:	mov	r0, r5
   19b40:	bl	115d4 <__fprintf_chk@plt>
   19b44:	b	19974 <__assert_fail@plt+0x8250>
   19b48:	mov	r2, #5
   19b4c:	ldr	r1, [pc, #156]	; 19bf0 <__assert_fail@plt+0x84cc>
   19b50:	mov	r0, #0
   19b54:	bl	113dc <dcgettext@plt>
   19b58:	ldr	r3, [r4, #28]
   19b5c:	ldr	r1, [r4, #24]
   19b60:	ldr	r2, [r4, #20]
   19b64:	str	r3, [sp, #24]
   19b68:	ldr	r3, [r4, #16]
   19b6c:	str	r1, [sp, #20]
   19b70:	ldr	r1, [r4, #12]
   19b74:	str	r2, [sp, #16]
   19b78:	ldr	r2, [r4, #8]
   19b7c:	str	r3, [sp, #12]
   19b80:	ldr	r3, [r4, #4]
   19b84:	str	r1, [sp, #8]
   19b88:	str	r2, [sp, #4]
   19b8c:	str	r3, [sp]
   19b90:	mov	r1, #1
   19b94:	ldr	r3, [r4]
   19b98:	mov	r2, r0
   19b9c:	mov	r0, r5
   19ba0:	bl	115d4 <__fprintf_chk@plt>
   19ba4:	b	19974 <__assert_fail@plt+0x8250>
   19ba8:	mov	r2, #5
   19bac:	ldr	r1, [pc, #64]	; 19bf4 <__assert_fail@plt+0x84d0>
   19bb0:	b	19918 <__assert_fail@plt+0x81f4>
   19bb4:	bl	116e8 <abort@plt>
   19bb8:	andeq	pc, r1, r8, asr r8	; <UNPREDICTABLE>
   19bbc:	andeq	pc, r1, ip, ror #16
   19bc0:	andeq	r0, r0, r2, ror #15
   19bc4:	andeq	pc, r1, r0, asr #22
   19bc8:	andeq	pc, r1, r0, ror r8	; <UNPREDICTABLE>
   19bcc:	andeq	pc, r1, r4, ror #16
   19bd0:	andeq	pc, r1, r8, asr #20
   19bd4:	andeq	pc, r1, ip, lsr r9	; <UNPREDICTABLE>
   19bd8:	andeq	pc, r1, ip, asr #18
   19bdc:	andeq	pc, r1, r4, ror #18
   19be0:	andeq	pc, r1, r0, lsl #19
   19be4:	andeq	pc, r1, r0, lsr #19
   19be8:	andeq	pc, r1, r4, asr #19
   19bec:	andeq	pc, r1, ip, ror #19
   19bf0:	andeq	pc, r1, r8, lsl sl	; <UNPREDICTABLE>
   19bf4:	andeq	pc, r1, ip, ror sl	; <UNPREDICTABLE>
   19bf8:	push	{r4, r5, lr}
   19bfc:	sub	sp, sp, #12
   19c00:	ldr	r5, [sp, #24]
   19c04:	ldr	ip, [r5]
   19c08:	cmp	ip, #0
   19c0c:	beq	19c28 <__assert_fail@plt+0x8504>
   19c10:	mov	lr, r5
   19c14:	mov	ip, #0
   19c18:	ldr	r4, [lr, #4]!
   19c1c:	add	ip, ip, #1
   19c20:	cmp	r4, #0
   19c24:	bne	19c18 <__assert_fail@plt+0x84f4>
   19c28:	stm	sp, {r5, ip}
   19c2c:	bl	19850 <__assert_fail@plt+0x812c>
   19c30:	add	sp, sp, #12
   19c34:	pop	{r4, r5, pc}
   19c38:	push	{r4, r5, r6, lr}
   19c3c:	sub	sp, sp, #56	; 0x38
   19c40:	ldr	r6, [pc, #88]	; 19ca0 <__assert_fail@plt+0x857c>
   19c44:	ldr	r5, [sp, #72]	; 0x48
   19c48:	add	r4, sp, #8
   19c4c:	ldr	ip, [r6]
   19c50:	str	ip, [sp, #52]	; 0x34
   19c54:	mov	ip, #0
   19c58:	ldr	lr, [r5], #4
   19c5c:	cmp	lr, #0
   19c60:	str	lr, [r4, #4]!
   19c64:	beq	19c74 <__assert_fail@plt+0x8550>
   19c68:	add	ip, ip, #1
   19c6c:	cmp	ip, #10
   19c70:	bne	19c58 <__assert_fail@plt+0x8534>
   19c74:	add	lr, sp, #12
   19c78:	str	ip, [sp, #4]
   19c7c:	str	lr, [sp]
   19c80:	bl	19850 <__assert_fail@plt+0x812c>
   19c84:	ldr	r2, [sp, #52]	; 0x34
   19c88:	ldr	r3, [r6]
   19c8c:	cmp	r2, r3
   19c90:	bne	19c9c <__assert_fail@plt+0x8578>
   19c94:	add	sp, sp, #56	; 0x38
   19c98:	pop	{r4, r5, r6, pc}
   19c9c:	bl	113f4 <__stack_chk_fail@plt>
   19ca0:	andeq	pc, r2, r8, lsl #30
   19ca4:	push	{r3}		; (str r3, [sp, #-4]!)
   19ca8:	mov	ip, #0
   19cac:	push	{r4, r5, r6, lr}
   19cb0:	sub	sp, sp, #60	; 0x3c
   19cb4:	ldr	r6, [pc, #100]	; 19d20 <__assert_fail@plt+0x85fc>
   19cb8:	add	r5, sp, #8
   19cbc:	add	r4, sp, #80	; 0x50
   19cc0:	ldr	r3, [r6]
   19cc4:	str	r4, [sp, #8]
   19cc8:	str	r3, [sp, #52]	; 0x34
   19ccc:	ldr	r3, [sp, #76]	; 0x4c
   19cd0:	ldr	lr, [r4], #4
   19cd4:	cmp	lr, #0
   19cd8:	str	lr, [r5, #4]!
   19cdc:	beq	19cec <__assert_fail@plt+0x85c8>
   19ce0:	add	ip, ip, #1
   19ce4:	cmp	ip, #10
   19ce8:	bne	19cd0 <__assert_fail@plt+0x85ac>
   19cec:	add	lr, sp, #12
   19cf0:	str	ip, [sp, #4]
   19cf4:	str	lr, [sp]
   19cf8:	bl	19850 <__assert_fail@plt+0x812c>
   19cfc:	ldr	r2, [sp, #52]	; 0x34
   19d00:	ldr	r3, [r6]
   19d04:	cmp	r2, r3
   19d08:	bne	19d1c <__assert_fail@plt+0x85f8>
   19d0c:	add	sp, sp, #60	; 0x3c
   19d10:	pop	{r4, r5, r6, lr}
   19d14:	add	sp, sp, #4
   19d18:	bx	lr
   19d1c:	bl	113f4 <__stack_chk_fail@plt>
   19d20:	andeq	pc, r2, r8, lsl #30
   19d24:	push	{r4, lr}
   19d28:	mov	r2, #5
   19d2c:	ldr	r1, [pc, #88]	; 19d8c <__assert_fail@plt+0x8668>
   19d30:	mov	r0, #0
   19d34:	bl	113dc <dcgettext@plt>
   19d38:	ldr	r2, [pc, #80]	; 19d90 <__assert_fail@plt+0x866c>
   19d3c:	mov	r1, r0
   19d40:	mov	r0, #1
   19d44:	bl	115b0 <__printf_chk@plt>
   19d48:	mov	r2, #5
   19d4c:	ldr	r1, [pc, #64]	; 19d94 <__assert_fail@plt+0x8670>
   19d50:	mov	r0, #0
   19d54:	bl	113dc <dcgettext@plt>
   19d58:	ldr	r3, [pc, #56]	; 19d98 <__assert_fail@plt+0x8674>
   19d5c:	ldr	r2, [pc, #56]	; 19d9c <__assert_fail@plt+0x8678>
   19d60:	mov	r1, r0
   19d64:	mov	r0, #1
   19d68:	bl	115b0 <__printf_chk@plt>
   19d6c:	ldr	r1, [pc, #44]	; 19da0 <__assert_fail@plt+0x867c>
   19d70:	mov	r2, #5
   19d74:	mov	r0, #0
   19d78:	bl	113dc <dcgettext@plt>
   19d7c:	ldr	r3, [pc, #32]	; 19da4 <__assert_fail@plt+0x8680>
   19d80:	pop	{r4, lr}
   19d84:	ldr	r1, [r3]
   19d88:	b	1131c <fputs_unlocked@plt>
   19d8c:			; <UNDEFINED> instruction: 0x0001fab8
   19d90:	ldrdeq	pc, [r1], -r0
   19d94:	andeq	pc, r1, r8, ror #21
   19d98:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   19d9c:	ldrdeq	pc, [r1], -ip
   19da0:	strdeq	pc, [r1], -ip
   19da4:	andeq	r0, r3, ip, lsr #6
   19da8:	push	{r4, lr}
   19dac:	mov	r4, r0
   19db0:	bl	114e4 <malloc@plt>
   19db4:	adds	r4, r4, #0
   19db8:	movne	r4, #1
   19dbc:	cmp	r0, #0
   19dc0:	movne	r4, #0
   19dc4:	cmp	r4, #0
   19dc8:	popeq	{r4, pc}
   19dcc:	bl	19ff0 <__assert_fail@plt+0x88cc>
   19dd0:	push	{r4, r5, r6, lr}
   19dd4:	umull	r4, r5, r0, r1
   19dd8:	adds	r3, r5, #0
   19ddc:	movne	r3, #1
   19de0:	cmp	r4, #0
   19de4:	blt	19dfc <__assert_fail@plt+0x86d8>
   19de8:	cmp	r3, #0
   19dec:	bne	19dfc <__assert_fail@plt+0x86d8>
   19df0:	mul	r0, r1, r0
   19df4:	pop	{r4, r5, r6, lr}
   19df8:	b	19da8 <__assert_fail@plt+0x8684>
   19dfc:	bl	19ff0 <__assert_fail@plt+0x88cc>
   19e00:	b	19da8 <__assert_fail@plt+0x8684>
   19e04:	adds	r3, r0, #0
   19e08:	movne	r3, #1
   19e0c:	cmp	r1, #0
   19e10:	movne	r3, #0
   19e14:	cmp	r3, #0
   19e18:	push	{r4, lr}
   19e1c:	bne	19e44 <__assert_fail@plt+0x8720>
   19e20:	mov	r4, r1
   19e24:	bl	11400 <realloc@plt>
   19e28:	adds	r4, r4, #0
   19e2c:	movne	r4, #1
   19e30:	cmp	r0, #0
   19e34:	movne	r4, #0
   19e38:	cmp	r4, #0
   19e3c:	popeq	{r4, pc}
   19e40:	bl	19ff0 <__assert_fail@plt+0x88cc>
   19e44:	bl	11388 <free@plt>
   19e48:	mov	r0, #0
   19e4c:	pop	{r4, pc}
   19e50:	push	{r4, r5, r6, lr}
   19e54:	umull	r4, r5, r1, r2
   19e58:	adds	r3, r5, #0
   19e5c:	movne	r3, #1
   19e60:	cmp	r4, #0
   19e64:	blt	19e7c <__assert_fail@plt+0x8758>
   19e68:	cmp	r3, #0
   19e6c:	bne	19e7c <__assert_fail@plt+0x8758>
   19e70:	mul	r1, r2, r1
   19e74:	pop	{r4, r5, r6, lr}
   19e78:	b	19e04 <__assert_fail@plt+0x86e0>
   19e7c:	bl	19ff0 <__assert_fail@plt+0x88cc>
   19e80:	push	{r4, r5, r6, r7, r8, lr}
   19e84:	subs	r7, r0, #0
   19e88:	mov	r6, r1
   19e8c:	mov	r5, r2
   19e90:	ldr	r4, [r1]
   19e94:	beq	19ec8 <__assert_fail@plt+0x87a4>
   19e98:	mov	r1, r2
   19e9c:	ldr	r0, [pc, #104]	; 19f0c <__assert_fail@plt+0x87e8>
   19ea0:	bl	1ddcc <__assert_fail@plt+0xc6a8>
   19ea4:	cmp	r0, r4
   19ea8:	bls	19eec <__assert_fail@plt+0x87c8>
   19eac:	add	r3, r4, #1
   19eb0:	add	r4, r3, r4, lsr #1
   19eb4:	str	r4, [r6]
   19eb8:	mul	r1, r5, r4
   19ebc:	mov	r0, r7
   19ec0:	pop	{r4, r5, r6, r7, r8, lr}
   19ec4:	b	19e04 <__assert_fail@plt+0x86e0>
   19ec8:	cmp	r4, #0
   19ecc:	beq	19ef0 <__assert_fail@plt+0x87cc>
   19ed0:	umull	r0, r1, r4, r5
   19ed4:	adds	r3, r1, #0
   19ed8:	movne	r3, #1
   19edc:	cmp	r0, #0
   19ee0:	blt	19eec <__assert_fail@plt+0x87c8>
   19ee4:	cmp	r3, #0
   19ee8:	beq	19eb4 <__assert_fail@plt+0x8790>
   19eec:	bl	19ff0 <__assert_fail@plt+0x88cc>
   19ef0:	mov	r1, r2
   19ef4:	mov	r0, #64	; 0x40
   19ef8:	bl	1ddcc <__assert_fail@plt+0xc6a8>
   19efc:	cmp	r5, #64	; 0x40
   19f00:	movls	r4, r0
   19f04:	addhi	r4, r0, #1
   19f08:	b	19ed0 <__assert_fail@plt+0x87ac>
   19f0c:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   19f10:	cmp	r0, #0
   19f14:	ldr	r3, [r1]
   19f18:	beq	19f3c <__assert_fail@plt+0x8818>
   19f1c:	ldr	r2, [pc, #60]	; 19f60 <__assert_fail@plt+0x883c>
   19f20:	cmp	r3, r2
   19f24:	bhi	19f58 <__assert_fail@plt+0x8834>
   19f28:	add	r2, r3, #1
   19f2c:	add	r3, r2, r3, lsr #1
   19f30:	str	r3, [r1]
   19f34:	mov	r1, r3
   19f38:	b	19e04 <__assert_fail@plt+0x86e0>
   19f3c:	cmp	r3, #0
   19f40:	bne	19f54 <__assert_fail@plt+0x8830>
   19f44:	mov	r3, #64	; 0x40
   19f48:	str	r3, [r1]
   19f4c:	mov	r1, r3
   19f50:	b	19e04 <__assert_fail@plt+0x86e0>
   19f54:	bge	19f30 <__assert_fail@plt+0x880c>
   19f58:	push	{r4, lr}
   19f5c:	bl	19ff0 <__assert_fail@plt+0x88cc>
   19f60:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   19f64:	push	{r4, lr}
   19f68:	mov	r4, r0
   19f6c:	bl	19da8 <__assert_fail@plt+0x8684>
   19f70:	mov	r2, r4
   19f74:	mov	r1, #0
   19f78:	pop	{r4, lr}
   19f7c:	b	115a4 <memset@plt>
   19f80:	push	{r4, r5, r6, lr}
   19f84:	umull	r4, r5, r0, r1
   19f88:	adds	r3, r5, #0
   19f8c:	movne	r3, #1
   19f90:	cmp	r4, #0
   19f94:	blt	19fac <__assert_fail@plt+0x8888>
   19f98:	cmp	r3, #0
   19f9c:	bne	19fac <__assert_fail@plt+0x8888>
   19fa0:	bl	11310 <calloc@plt>
   19fa4:	cmp	r0, #0
   19fa8:	popne	{r4, r5, r6, pc}
   19fac:	bl	19ff0 <__assert_fail@plt+0x88cc>
   19fb0:	push	{r4, r5, r6, lr}
   19fb4:	mov	r4, r1
   19fb8:	mov	r5, r0
   19fbc:	mov	r0, r1
   19fc0:	bl	19da8 <__assert_fail@plt+0x8684>
   19fc4:	mov	r2, r4
   19fc8:	mov	r1, r5
   19fcc:	pop	{r4, r5, r6, lr}
   19fd0:	b	113a0 <memcpy@plt>
   19fd4:	push	{r4, lr}
   19fd8:	mov	r4, r0
   19fdc:	bl	11550 <strlen@plt>
   19fe0:	add	r1, r0, #1
   19fe4:	mov	r0, r4
   19fe8:	pop	{r4, lr}
   19fec:	b	19fb0 <__assert_fail@plt+0x888c>
   19ff0:	ldr	r3, [pc, #44]	; 1a024 <__assert_fail@plt+0x8900>
   19ff4:	push	{r4, lr}
   19ff8:	mov	r2, #5
   19ffc:	ldr	r1, [pc, #36]	; 1a028 <__assert_fail@plt+0x8904>
   1a000:	mov	r0, #0
   1a004:	ldr	r4, [r3]
   1a008:	bl	113dc <dcgettext@plt>
   1a00c:	ldr	r2, [pc, #24]	; 1a02c <__assert_fail@plt+0x8908>
   1a010:	mov	r1, #0
   1a014:	mov	r3, r0
   1a018:	mov	r0, r4
   1a01c:	bl	114b4 <error@plt>
   1a020:	bl	116e8 <abort@plt>
   1a024:	andeq	r0, r3, ip, asr #5
   1a028:	andeq	pc, r1, r0, ror fp	; <UNPREDICTABLE>
   1a02c:	andeq	pc, r1, r4, ror #12
   1a030:	mov	r1, #0
   1a034:	push	{r4, lr}
   1a038:	mov	r0, r1
   1a03c:	bl	11538 <getcwd@plt>
   1a040:	subs	r4, r0, #0
   1a044:	beq	1a050 <__assert_fail@plt+0x892c>
   1a048:	mov	r0, r4
   1a04c:	pop	{r4, pc}
   1a050:	bl	11580 <__errno_location@plt>
   1a054:	ldr	r3, [r0]
   1a058:	cmp	r3, #12
   1a05c:	bne	1a048 <__assert_fail@plt+0x8924>
   1a060:	bl	19ff0 <__assert_fail@plt+0x88cc>
   1a064:	ldr	ip, [pc, #128]	; 1a0ec <__assert_fail@plt+0x89c8>
   1a068:	push	{r7, lr}
   1a06c:	sub	r0, r0, #1
   1a070:	ldr	lr, [pc, #120]	; 1a0f0 <__assert_fail@plt+0x89cc>
   1a074:	sub	sp, sp, #16
   1a078:	ldr	r4, [ip]
   1a07c:	cmp	r0, #3
   1a080:	str	r4, [sp, #12]
   1a084:	ldr	r6, [sp, #24]
   1a088:	ldr	r5, [lr]
   1a08c:	bhi	1a0e8 <__assert_fail@plt+0x89c4>
   1a090:	mov	ip, r1
   1a094:	cmp	ip, #0
   1a098:	ldr	r1, [pc, #84]	; 1a0f4 <__assert_fail@plt+0x89d0>
   1a09c:	ldrlt	r4, [pc, #84]	; 1a0f8 <__assert_fail@plt+0x89d4>
   1a0a0:	movlt	r3, #0
   1a0a4:	ldr	r1, [r1, r0, lsl #2]
   1a0a8:	strblt	r2, [sp, #8]
   1a0ac:	mov	r0, #0
   1a0b0:	mov	r2, #5
   1a0b4:	ldrge	r7, [r3, ip, lsl #4]
   1a0b8:	sublt	r4, r4, ip
   1a0bc:	strblt	r3, [sp, #9]
   1a0c0:	addlt	r7, sp, #8
   1a0c4:	ldrge	r4, [pc, #44]	; 1a0f8 <__assert_fail@plt+0x89d4>
   1a0c8:	bl	113dc <dcgettext@plt>
   1a0cc:	str	r6, [sp, #4]
   1a0d0:	str	r7, [sp]
   1a0d4:	mov	r3, r4
   1a0d8:	mov	r1, #0
   1a0dc:	mov	r2, r0
   1a0e0:	mov	r0, r5
   1a0e4:	bl	114b4 <error@plt>
   1a0e8:	bl	116e8 <abort@plt>
   1a0ec:	andeq	pc, r2, r8, lsl #30
   1a0f0:	andeq	r0, r3, ip, asr #5
   1a0f4:	andeq	pc, r1, r4, lsl #23
   1a0f8:	muleq	r1, r4, fp
   1a0fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a100:	sub	sp, sp, #36	; 0x24
   1a104:	ldr	r5, [pc, #2536]	; 1aaf4 <__assert_fail@plt+0x93d0>
   1a108:	mov	r9, r2
   1a10c:	cmp	r2, #36	; 0x24
   1a110:	str	r3, [sp, #12]
   1a114:	ldr	r2, [r5]
   1a118:	ldr	r3, [sp, #72]	; 0x48
   1a11c:	str	r2, [sp, #28]
   1a120:	str	r3, [sp]
   1a124:	bhi	1aae0 <__assert_fail@plt+0x93bc>
   1a128:	cmp	r1, #0
   1a12c:	mov	r4, r1
   1a130:	mov	r6, r0
   1a134:	addeq	r4, sp, #24
   1a138:	bl	11580 <__errno_location@plt>
   1a13c:	mov	r3, #0
   1a140:	str	r3, [r0]
   1a144:	mov	r7, r0
   1a148:	bl	1152c <__ctype_b_loc@plt>
   1a14c:	ldrb	r3, [r6]
   1a150:	mov	r1, r6
   1a154:	ldr	r0, [r0]
   1a158:	b	1a160 <__assert_fail@plt+0x8a3c>
   1a15c:	ldrb	r3, [r1, #1]!
   1a160:	lsl	r2, r3, #1
   1a164:	ldrh	r8, [r0, r2]
   1a168:	ands	r8, r8, #8192	; 0x2000
   1a16c:	bne	1a15c <__assert_fail@plt+0x8a38>
   1a170:	cmp	r3, #45	; 0x2d
   1a174:	beq	1a210 <__assert_fail@plt+0x8aec>
   1a178:	mov	r2, r9
   1a17c:	mov	r3, r8
   1a180:	mov	r1, r4
   1a184:	mov	r0, r6
   1a188:	bl	113ac <__strtoull_internal@plt>
   1a18c:	ldr	r9, [r4]
   1a190:	cmp	r9, r6
   1a194:	mov	sl, r0
   1a198:	mov	fp, r1
   1a19c:	beq	1a1f8 <__assert_fail@plt+0x8ad4>
   1a1a0:	ldr	r8, [r7]
   1a1a4:	cmp	r8, #0
   1a1a8:	bne	1a1e8 <__assert_fail@plt+0x8ac4>
   1a1ac:	ldr	r3, [sp]
   1a1b0:	cmp	r3, #0
   1a1b4:	beq	1a1c4 <__assert_fail@plt+0x8aa0>
   1a1b8:	ldrb	r6, [r9]
   1a1bc:	cmp	r6, #0
   1a1c0:	bne	1a598 <__assert_fail@plt+0x8e74>
   1a1c4:	ldr	r3, [sp, #12]
   1a1c8:	strd	sl, [r3]
   1a1cc:	ldr	r2, [sp, #28]
   1a1d0:	ldr	r3, [r5]
   1a1d4:	mov	r0, r8
   1a1d8:	cmp	r2, r3
   1a1dc:	bne	1aadc <__assert_fail@plt+0x93b8>
   1a1e0:	add	sp, sp, #36	; 0x24
   1a1e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1e8:	cmp	r8, #34	; 0x22
   1a1ec:	bne	1a210 <__assert_fail@plt+0x8aec>
   1a1f0:	mov	r8, #1
   1a1f4:	b	1a1ac <__assert_fail@plt+0x8a88>
   1a1f8:	ldr	r0, [sp]
   1a1fc:	cmp	r0, #0
   1a200:	beq	1a210 <__assert_fail@plt+0x8aec>
   1a204:	ldrb	r6, [r6]
   1a208:	cmp	r6, #0
   1a20c:	bne	1a218 <__assert_fail@plt+0x8af4>
   1a210:	mov	r8, #4
   1a214:	b	1a1cc <__assert_fail@plt+0x8aa8>
   1a218:	mov	r1, r6
   1a21c:	bl	1155c <strchr@plt>
   1a220:	cmp	r0, #0
   1a224:	movne	sl, #1
   1a228:	movne	fp, #0
   1a22c:	beq	1a210 <__assert_fail@plt+0x8aec>
   1a230:	sub	r7, r6, #69	; 0x45
   1a234:	cmp	r7, #47	; 0x2f
   1a238:	ldrls	pc, [pc, r7, lsl #2]
   1a23c:	b	1a3fc <__assert_fail@plt+0x8cd8>
   1a240:	andeq	sl, r1, r0, lsl #6
   1a244:	strdeq	sl, [r1], -ip
   1a248:	andeq	sl, r1, r0, lsl #6
   1a24c:	strdeq	sl, [r1], -ip
   1a250:	strdeq	sl, [r1], -ip
   1a254:	strdeq	sl, [r1], -ip
   1a258:	andeq	sl, r1, r0, lsl #6
   1a25c:	strdeq	sl, [r1], -ip
   1a260:	andeq	sl, r1, r0, lsl #6
   1a264:	strdeq	sl, [r1], -ip
   1a268:	strdeq	sl, [r1], -ip
   1a26c:	andeq	sl, r1, r0, lsl #6
   1a270:	strdeq	sl, [r1], -ip
   1a274:	strdeq	sl, [r1], -ip
   1a278:	strdeq	sl, [r1], -ip
   1a27c:	andeq	sl, r1, r0, lsl #6
   1a280:	strdeq	sl, [r1], -ip
   1a284:	strdeq	sl, [r1], -ip
   1a288:	strdeq	sl, [r1], -ip
   1a28c:	strdeq	sl, [r1], -ip
   1a290:	andeq	sl, r1, r0, lsl #6
   1a294:	andeq	sl, r1, r0, lsl #6
   1a298:	strdeq	sl, [r1], -ip
   1a29c:	strdeq	sl, [r1], -ip
   1a2a0:	strdeq	sl, [r1], -ip
   1a2a4:	strdeq	sl, [r1], -ip
   1a2a8:	strdeq	sl, [r1], -ip
   1a2ac:	strdeq	sl, [r1], -ip
   1a2b0:	strdeq	sl, [r1], -ip
   1a2b4:	strdeq	sl, [r1], -ip
   1a2b8:	strdeq	sl, [r1], -ip
   1a2bc:	strdeq	sl, [r1], -ip
   1a2c0:	strdeq	sl, [r1], -ip
   1a2c4:	strdeq	sl, [r1], -ip
   1a2c8:	andeq	sl, r1, r0, lsl #6
   1a2cc:	strdeq	sl, [r1], -ip
   1a2d0:	strdeq	sl, [r1], -ip
   1a2d4:	strdeq	sl, [r1], -ip
   1a2d8:	andeq	sl, r1, r0, lsl #6
   1a2dc:	strdeq	sl, [r1], -ip
   1a2e0:	andeq	sl, r1, r0, lsl #6
   1a2e4:	strdeq	sl, [r1], -ip
   1a2e8:	strdeq	sl, [r1], -ip
   1a2ec:	strdeq	sl, [r1], -ip
   1a2f0:	strdeq	sl, [r1], -ip
   1a2f4:	strdeq	sl, [r1], -ip
   1a2f8:	strdeq	sl, [r1], -ip
   1a2fc:	andeq	sl, r1, r0, lsl #6
   1a300:	ldr	r0, [sp]
   1a304:	mov	r1, #48	; 0x30
   1a308:	bl	1155c <strchr@plt>
   1a30c:	cmp	r0, #0
   1a310:	beq	1a3fc <__assert_fail@plt+0x8cd8>
   1a314:	ldrb	r3, [r9, #1]
   1a318:	cmp	r3, #68	; 0x44
   1a31c:	beq	1a9dc <__assert_fail@plt+0x92b8>
   1a320:	cmp	r3, #105	; 0x69
   1a324:	beq	1a5bc <__assert_fail@plt+0x8e98>
   1a328:	cmp	r3, #66	; 0x42
   1a32c:	beq	1a9dc <__assert_fail@plt+0x92b8>
   1a330:	cmp	r7, #47	; 0x2f
   1a334:	ldrls	pc, [pc, r7, lsl #2]
   1a338:	b	1a5ac <__assert_fail@plt+0x8e88>
   1a33c:	andeq	sl, r1, r0, asr #19
   1a340:	andeq	sl, r1, ip, lsr #11
   1a344:			; <UNDEFINED> instruction: 0x0001a9b0
   1a348:	andeq	sl, r1, ip, lsr #11
   1a34c:	andeq	sl, r1, ip, lsr #11
   1a350:	andeq	sl, r1, ip, lsr #11
   1a354:	andeq	sl, r1, r0, lsr #19
   1a358:	andeq	sl, r1, ip, lsr #11
   1a35c:	muleq	r1, r0, r9
   1a360:	andeq	sl, r1, ip, lsr #11
   1a364:	andeq	sl, r1, ip, lsr #11
   1a368:	andeq	sl, r1, r0, lsl #19
   1a36c:	andeq	sl, r1, ip, lsr #11
   1a370:	andeq	sl, r1, ip, lsr #11
   1a374:	andeq	sl, r1, ip, lsr #11
   1a378:	andeq	sl, r1, r0, ror r9
   1a37c:	andeq	sl, r1, ip, lsr #11
   1a380:	andeq	sl, r1, ip, lsr #11
   1a384:	andeq	sl, r1, ip, lsr #11
   1a388:	andeq	sl, r1, ip, lsr #11
   1a38c:	andeq	sl, r1, r0, ror #18
   1a390:	andeq	sl, r1, r0, asr r9
   1a394:	andeq	sl, r1, ip, lsr #11
   1a398:	andeq	sl, r1, ip, lsr #11
   1a39c:	andeq	sl, r1, ip, lsr #11
   1a3a0:	andeq	sl, r1, ip, lsr #11
   1a3a4:	andeq	sl, r1, ip, lsr #11
   1a3a8:	andeq	sl, r1, ip, lsr #11
   1a3ac:	andeq	sl, r1, ip, lsr #11
   1a3b0:	strdeq	sl, [r1], -r8
   1a3b4:	andeq	sl, r1, r8, asr #18
   1a3b8:	andeq	sl, r1, ip, lsr #11
   1a3bc:	andeq	sl, r1, ip, lsr #11
   1a3c0:	andeq	sl, r1, ip, lsr #11
   1a3c4:			; <UNDEFINED> instruction: 0x0001a9b0
   1a3c8:	andeq	sl, r1, ip, lsr #11
   1a3cc:	andeq	sl, r1, ip, lsr #11
   1a3d0:	andeq	sl, r1, ip, lsr #11
   1a3d4:	andeq	sl, r1, r0, lsr #19
   1a3d8:	andeq	sl, r1, ip, lsr #11
   1a3dc:	muleq	r1, r0, r9
   1a3e0:	andeq	sl, r1, ip, lsr #11
   1a3e4:	andeq	sl, r1, ip, lsr #11
   1a3e8:	andeq	sl, r1, ip, lsr #11
   1a3ec:	andeq	sl, r1, ip, lsr #11
   1a3f0:	andeq	sl, r1, ip, lsr #11
   1a3f4:	andeq	sl, r1, ip, lsr #11
   1a3f8:	andeq	sl, r1, r0, ror r9
   1a3fc:	mov	lr, #1
   1a400:	mov	r0, #1024	; 0x400
   1a404:	sub	r6, r6, #66	; 0x42
   1a408:	cmp	r6, #53	; 0x35
   1a40c:	ldrls	pc, [pc, r6, lsl #2]
   1a410:	b	1a5ac <__assert_fail@plt+0x8e88>
   1a414:	andeq	sl, r1, r0, lsr #12
   1a418:	andeq	sl, r1, ip, lsr #11
   1a41c:	andeq	sl, r1, ip, lsr #11
   1a420:	andeq	sl, r1, r4, asr #12
   1a424:	andeq	sl, r1, ip, lsr #11
   1a428:	andeq	sl, r1, ip, ror #9
   1a42c:	andeq	sl, r1, ip, lsr #11
   1a430:	andeq	sl, r1, ip, lsr #11
   1a434:	andeq	sl, r1, ip, lsr #11
   1a438:	andeq	sl, r1, ip, lsr r7
   1a43c:	andeq	sl, r1, ip, lsr #11
   1a440:	andeq	sl, r1, r0, ror #17
   1a444:	andeq	sl, r1, ip, lsr #11
   1a448:	andeq	sl, r1, ip, lsr #11
   1a44c:	andeq	sl, r1, r4, ror #16
   1a450:	andeq	sl, r1, ip, lsr #11
   1a454:	andeq	sl, r1, ip, lsr #11
   1a458:	andeq	sl, r1, ip, lsr #11
   1a45c:	andeq	sl, r1, r8, ror #15
   1a460:	andeq	sl, r1, ip, lsr #11
   1a464:	andeq	sl, r1, ip, lsr #11
   1a468:	andeq	sl, r1, ip, lsr #11
   1a46c:	andeq	sl, r1, ip, lsr #11
   1a470:	andeq	sl, r1, ip, ror #14
   1a474:	andeq	sl, r1, r0, asr #13
   1a478:	andeq	sl, r1, ip, lsr #11
   1a47c:	andeq	sl, r1, ip, lsr #11
   1a480:	andeq	sl, r1, ip, lsr #11
   1a484:	andeq	sl, r1, ip, lsr #11
   1a488:	andeq	sl, r1, ip, lsr #11
   1a48c:	andeq	sl, r1, ip, lsr #11
   1a490:	andeq	sl, r1, ip, lsr #11
   1a494:	strdeq	sl, [r1], -ip
   1a498:	andeq	sl, r1, r0, lsl #11
   1a49c:	andeq	sl, r1, ip, lsr #11
   1a4a0:	andeq	sl, r1, ip, lsr #11
   1a4a4:	andeq	sl, r1, ip, lsr #11
   1a4a8:	andeq	sl, r1, ip, ror #9
   1a4ac:	andeq	sl, r1, ip, lsr #11
   1a4b0:	andeq	sl, r1, ip, lsr #11
   1a4b4:	andeq	sl, r1, ip, lsr #11
   1a4b8:	andeq	sl, r1, ip, lsr r7
   1a4bc:	andeq	sl, r1, ip, lsr #11
   1a4c0:	andeq	sl, r1, r0, ror #17
   1a4c4:	andeq	sl, r1, ip, lsr #11
   1a4c8:	andeq	sl, r1, ip, lsr #11
   1a4cc:	andeq	sl, r1, ip, lsr #11
   1a4d0:	andeq	sl, r1, ip, lsr #11
   1a4d4:	andeq	sl, r1, ip, lsr #11
   1a4d8:	andeq	sl, r1, ip, lsr #11
   1a4dc:	andeq	sl, r1, r8, ror #15
   1a4e0:	andeq	sl, r1, ip, lsr #11
   1a4e4:	andeq	sl, r1, ip, lsr #11
   1a4e8:	ldrdeq	sl, [r1], -r4
   1a4ec:	asr	r1, r0, #31
   1a4f0:	mov	r2, #0
   1a4f4:	mov	r3, #0
   1a4f8:	cmp	fp, #0
   1a4fc:	strd	r2, [sp]
   1a500:	bne	1aa20 <__assert_fail@plt+0x92fc>
   1a504:	ldrd	r2, [sp]
   1a508:	orrs	r3, r2, r3
   1a50c:	bne	1aa10 <__assert_fail@plt+0x92ec>
   1a510:	mul	r3, sl, r1
   1a514:	umull	r6, r7, sl, r0
   1a518:	mla	r3, r0, fp, r3
   1a51c:	ldrd	sl, [sp]
   1a520:	add	ip, r3, r7
   1a524:	cmp	ip, #0
   1a528:	mov	r7, ip
   1a52c:	bne	1aab4 <__assert_fail@plt+0x9390>
   1a530:	orrs	r3, sl, fp
   1a534:	bne	1aa10 <__assert_fail@plt+0x92ec>
   1a538:	umull	r2, r3, r6, r0
   1a53c:	mul	ip, r6, r1
   1a540:	strd	r2, [sp]
   1a544:	mla	r3, r0, r7, ip
   1a548:	ldr	r2, [sp, #4]
   1a54c:	add	ip, r3, r2
   1a550:	cmp	ip, #0
   1a554:	str	ip, [sp, #4]
   1a558:	bne	1aa90 <__assert_fail@plt+0x936c>
   1a55c:	orrs	r3, sl, fp
   1a560:	bne	1aa10 <__assert_fail@plt+0x92ec>
   1a564:	ldrd	r6, [sp]
   1a568:	mov	r3, #0
   1a56c:	mul	r2, r6, r1
   1a570:	umull	sl, fp, r6, r0
   1a574:	mla	r2, r0, r7, r2
   1a578:	add	fp, r2, fp
   1a57c:	orr	r8, r8, r3
   1a580:	add	r3, r9, lr
   1a584:	str	r3, [r4]
   1a588:	ldrb	r3, [r9, lr]
   1a58c:	cmp	r3, #0
   1a590:	orrne	r8, r8, #2
   1a594:	b	1a1c4 <__assert_fail@plt+0x8aa0>
   1a598:	mov	r1, r6
   1a59c:	ldr	r0, [sp]
   1a5a0:	bl	1155c <strchr@plt>
   1a5a4:	cmp	r0, #0
   1a5a8:	bne	1a230 <__assert_fail@plt+0x8b0c>
   1a5ac:	ldr	r3, [sp, #12]
   1a5b0:	orr	r8, r8, #2
   1a5b4:	strd	sl, [r3]
   1a5b8:	b	1a1cc <__assert_fail@plt+0x8aa8>
   1a5bc:	ldrb	r3, [r9, #2]
   1a5c0:	mov	r0, #1024	; 0x400
   1a5c4:	cmp	r3, #66	; 0x42
   1a5c8:	movne	lr, #1
   1a5cc:	moveq	lr, #3
   1a5d0:	b	1a404 <__assert_fail@plt+0x8ce0>
   1a5d4:	lsr	r3, fp, #31
   1a5d8:	adds	sl, sl, sl
   1a5dc:	adc	fp, fp, fp
   1a5e0:	cmp	r3, #0
   1a5e4:	beq	1a580 <__assert_fail@plt+0x8e5c>
   1a5e8:	mov	r8, #1
   1a5ec:	mvn	sl, #0
   1a5f0:	mvn	fp, #0
   1a5f4:	b	1a580 <__assert_fail@plt+0x8e5c>
   1a5f8:	mov	lr, #1
   1a5fc:	lsr	r3, fp, #23
   1a600:	cmp	r3, #0
   1a604:	bne	1a5e8 <__assert_fail@plt+0x8ec4>
   1a608:	lsl	r3, fp, #9
   1a60c:	orr	r3, r3, sl, lsr #23
   1a610:	lsl	r2, sl, #9
   1a614:	mov	sl, r2
   1a618:	mov	fp, r3
   1a61c:	b	1a580 <__assert_fail@plt+0x8e5c>
   1a620:	lsr	r3, fp, #22
   1a624:	cmp	r3, #0
   1a628:	bne	1a5e8 <__assert_fail@plt+0x8ec4>
   1a62c:	lsl	r3, fp, #10
   1a630:	orr	r3, r3, sl, lsr #22
   1a634:	lsl	r2, sl, #10
   1a638:	mov	sl, r2
   1a63c:	mov	fp, r3
   1a640:	b	1a580 <__assert_fail@plt+0x8e5c>
   1a644:	mov	r6, r0
   1a648:	asr	r7, r0, #31
   1a64c:	mov	r3, #0
   1a650:	mov	ip, #6
   1a654:	str	r3, [sp]
   1a658:	strd	r4, [sp, #16]
   1a65c:	b	1a68c <__assert_fail@plt+0x8f68>
   1a660:	orrs	r3, r2, r3
   1a664:	movne	r3, #1
   1a668:	muleq	r3, sl, r7
   1a66c:	strne	r3, [sp]
   1a670:	mlaeq	r3, r6, fp, r3
   1a674:	umulleq	sl, fp, sl, r6
   1a678:	mvnne	sl, #0
   1a67c:	addeq	fp, r3, fp
   1a680:	mvnne	fp, #0
   1a684:	subs	ip, ip, #1
   1a688:	beq	1a9d0 <__assert_fail@plt+0x92ac>
   1a68c:	cmp	fp, #0
   1a690:	mov	r2, #0
   1a694:	mov	r3, #0
   1a698:	beq	1a660 <__assert_fail@plt+0x8f3c>
   1a69c:	umull	r0, r1, sl, r6
   1a6a0:	mov	r5, #0
   1a6a4:	mov	r0, r1
   1a6a8:	mov	r1, r5
   1a6ac:	umlal	r0, r1, fp, r6
   1a6b0:	cmp	r1, r5
   1a6b4:	movne	r2, #1
   1a6b8:	movne	r3, #0
   1a6bc:	b	1a660 <__assert_fail@plt+0x8f3c>
   1a6c0:	mov	r6, r0
   1a6c4:	asr	r7, r0, #31
   1a6c8:	mov	r3, #0
   1a6cc:	mov	ip, #7
   1a6d0:	str	r3, [sp]
   1a6d4:	strd	r4, [sp, #16]
   1a6d8:	b	1a708 <__assert_fail@plt+0x8fe4>
   1a6dc:	orrs	r3, r2, r3
   1a6e0:	movne	r3, #1
   1a6e4:	muleq	r3, sl, r7
   1a6e8:	strne	r3, [sp]
   1a6ec:	mlaeq	r3, r6, fp, r3
   1a6f0:	umulleq	sl, fp, sl, r6
   1a6f4:	mvnne	sl, #0
   1a6f8:	addeq	fp, r3, fp
   1a6fc:	mvnne	fp, #0
   1a700:	subs	ip, ip, #1
   1a704:	beq	1a9d0 <__assert_fail@plt+0x92ac>
   1a708:	cmp	fp, #0
   1a70c:	mov	r2, #0
   1a710:	mov	r3, #0
   1a714:	beq	1a6dc <__assert_fail@plt+0x8fb8>
   1a718:	umull	r0, r1, sl, r6
   1a71c:	mov	r5, #0
   1a720:	mov	r0, r1
   1a724:	mov	r1, r5
   1a728:	umlal	r0, r1, fp, r6
   1a72c:	cmp	r1, r5
   1a730:	movne	r2, #1
   1a734:	movne	r3, #0
   1a738:	b	1a6dc <__assert_fail@plt+0x8fb8>
   1a73c:	asr	r1, r0, #31
   1a740:	cmp	fp, #0
   1a744:	mov	r6, #0
   1a748:	mov	r7, #0
   1a74c:	bne	1a9e8 <__assert_fail@plt+0x92c4>
   1a750:	orrs	r3, r6, r7
   1a754:	bne	1a5e8 <__assert_fail@plt+0x8ec4>
   1a758:	mul	r3, sl, r1
   1a75c:	mla	r3, r0, fp, r3
   1a760:	umull	sl, fp, sl, r0
   1a764:	add	fp, r3, fp
   1a768:	b	1a580 <__assert_fail@plt+0x8e5c>
   1a76c:	mov	r6, r0
   1a770:	asr	r7, r0, #31
   1a774:	mov	r3, #0
   1a778:	mov	ip, #8
   1a77c:	str	r3, [sp]
   1a780:	strd	r4, [sp, #16]
   1a784:	b	1a7b4 <__assert_fail@plt+0x9090>
   1a788:	orrs	r3, r2, r3
   1a78c:	movne	r3, #1
   1a790:	muleq	r3, sl, r7
   1a794:	strne	r3, [sp]
   1a798:	mlaeq	r3, r6, fp, r3
   1a79c:	umulleq	sl, fp, sl, r6
   1a7a0:	mvnne	sl, #0
   1a7a4:	addeq	fp, r3, fp
   1a7a8:	mvnne	fp, #0
   1a7ac:	subs	ip, ip, #1
   1a7b0:	beq	1a9d0 <__assert_fail@plt+0x92ac>
   1a7b4:	cmp	fp, #0
   1a7b8:	mov	r2, #0
   1a7bc:	mov	r3, #0
   1a7c0:	beq	1a788 <__assert_fail@plt+0x9064>
   1a7c4:	umull	r0, r1, sl, r6
   1a7c8:	mov	r5, #0
   1a7cc:	mov	r0, r1
   1a7d0:	mov	r1, r5
   1a7d4:	umlal	r0, r1, fp, r6
   1a7d8:	cmp	r1, r5
   1a7dc:	movne	r2, #1
   1a7e0:	movne	r3, #0
   1a7e4:	b	1a788 <__assert_fail@plt+0x9064>
   1a7e8:	mov	r6, r0
   1a7ec:	asr	r7, r0, #31
   1a7f0:	mov	r3, #0
   1a7f4:	mov	ip, #4
   1a7f8:	str	r3, [sp]
   1a7fc:	strd	r4, [sp, #16]
   1a800:	b	1a830 <__assert_fail@plt+0x910c>
   1a804:	orrs	r3, r2, r3
   1a808:	movne	r3, #1
   1a80c:	muleq	r3, sl, r7
   1a810:	strne	r3, [sp]
   1a814:	mlaeq	r3, r6, fp, r3
   1a818:	umulleq	sl, fp, sl, r6
   1a81c:	mvnne	sl, #0
   1a820:	addeq	fp, r3, fp
   1a824:	mvnne	fp, #0
   1a828:	subs	ip, ip, #1
   1a82c:	beq	1a9d0 <__assert_fail@plt+0x92ac>
   1a830:	cmp	fp, #0
   1a834:	mov	r2, #0
   1a838:	mov	r3, #0
   1a83c:	beq	1a804 <__assert_fail@plt+0x90e0>
   1a840:	umull	r0, r1, sl, r6
   1a844:	mov	r5, #0
   1a848:	mov	r0, r1
   1a84c:	mov	r1, r5
   1a850:	umlal	r0, r1, fp, r6
   1a854:	cmp	r1, r5
   1a858:	movne	r2, #1
   1a85c:	movne	r3, #0
   1a860:	b	1a804 <__assert_fail@plt+0x90e0>
   1a864:	mov	r6, r0
   1a868:	asr	r7, r0, #31
   1a86c:	mov	r3, #0
   1a870:	mov	ip, #5
   1a874:	str	r3, [sp]
   1a878:	strd	r4, [sp, #16]
   1a87c:	b	1a8ac <__assert_fail@plt+0x9188>
   1a880:	orrs	r3, r2, r3
   1a884:	movne	r3, #1
   1a888:	muleq	r3, sl, r7
   1a88c:	strne	r3, [sp]
   1a890:	mlaeq	r3, r6, fp, r3
   1a894:	umulleq	sl, fp, sl, r6
   1a898:	mvnne	sl, #0
   1a89c:	addeq	fp, r3, fp
   1a8a0:	mvnne	fp, #0
   1a8a4:	subs	ip, ip, #1
   1a8a8:	beq	1a9d0 <__assert_fail@plt+0x92ac>
   1a8ac:	cmp	fp, #0
   1a8b0:	mov	r2, #0
   1a8b4:	mov	r3, #0
   1a8b8:	beq	1a880 <__assert_fail@plt+0x915c>
   1a8bc:	umull	r0, r1, sl, r6
   1a8c0:	mov	r5, #0
   1a8c4:	mov	r0, r1
   1a8c8:	mov	r1, r5
   1a8cc:	umlal	r0, r1, fp, r6
   1a8d0:	cmp	r1, r5
   1a8d4:	movne	r2, #1
   1a8d8:	movne	r3, #0
   1a8dc:	b	1a880 <__assert_fail@plt+0x915c>
   1a8e0:	asr	r1, r0, #31
   1a8e4:	cmp	fp, #0
   1a8e8:	mov	r6, #0
   1a8ec:	mov	r7, #0
   1a8f0:	bne	1aa44 <__assert_fail@plt+0x9320>
   1a8f4:	orrs	r3, r6, r7
   1a8f8:	bne	1a5e8 <__assert_fail@plt+0x8ec4>
   1a8fc:	umull	r2, r3, sl, r0
   1a900:	mul	ip, sl, r1
   1a904:	strd	r2, [sp]
   1a908:	mla	r3, r0, fp, ip
   1a90c:	ldr	r2, [sp, #4]
   1a910:	mov	sl, r6
   1a914:	add	ip, r3, r2
   1a918:	cmp	ip, #0
   1a91c:	mov	fp, r7
   1a920:	str	ip, [sp, #4]
   1a924:	bne	1aa6c <__assert_fail@plt+0x9348>
   1a928:	orrs	r3, sl, fp
   1a92c:	bne	1a5e8 <__assert_fail@plt+0x8ec4>
   1a930:	ldrd	r6, [sp]
   1a934:	mul	r3, r6, r1
   1a938:	umull	sl, fp, r6, r0
   1a93c:	mla	r0, r0, r7, r3
   1a940:	add	fp, r0, fp
   1a944:	b	1a580 <__assert_fail@plt+0x8e5c>
   1a948:	mov	lr, #1
   1a94c:	b	1a580 <__assert_fail@plt+0x8e5c>
   1a950:	mov	lr, #1
   1a954:	mov	r6, #1024	; 0x400
   1a958:	mov	r7, #0
   1a95c:	b	1a6c8 <__assert_fail@plt+0x8fa4>
   1a960:	mov	lr, #1
   1a964:	mov	r6, #1024	; 0x400
   1a968:	mov	r7, #0
   1a96c:	b	1a774 <__assert_fail@plt+0x9050>
   1a970:	mov	lr, #1
   1a974:	mov	r6, #1024	; 0x400
   1a978:	mov	r7, #0
   1a97c:	b	1a7f0 <__assert_fail@plt+0x90cc>
   1a980:	mov	lr, #1
   1a984:	mov	r6, #1024	; 0x400
   1a988:	mov	r7, #0
   1a98c:	b	1a86c <__assert_fail@plt+0x9148>
   1a990:	mov	lr, #1
   1a994:	mov	r0, #1024	; 0x400
   1a998:	mov	r1, #0
   1a99c:	b	1a8e4 <__assert_fail@plt+0x91c0>
   1a9a0:	mov	lr, #1
   1a9a4:	mov	r0, #1024	; 0x400
   1a9a8:	mov	r1, #0
   1a9ac:	b	1a740 <__assert_fail@plt+0x901c>
   1a9b0:	mov	lr, #1
   1a9b4:	mov	r0, #1024	; 0x400
   1a9b8:	mov	r1, #0
   1a9bc:	b	1a4f0 <__assert_fail@plt+0x8dcc>
   1a9c0:	mov	lr, #1
   1a9c4:	mov	r6, #1024	; 0x400
   1a9c8:	mov	r7, #0
   1a9cc:	b	1a64c <__assert_fail@plt+0x8f28>
   1a9d0:	ldrd	r4, [sp, #16]
   1a9d4:	ldr	r3, [sp]
   1a9d8:	b	1a57c <__assert_fail@plt+0x8e58>
   1a9dc:	mov	lr, #2
   1a9e0:	mov	r0, #1000	; 0x3e8
   1a9e4:	b	1a404 <__assert_fail@plt+0x8ce0>
   1a9e8:	umull	r2, r3, sl, r0
   1a9ec:	str	r3, [sp]
   1a9f0:	mov	r3, #0
   1a9f4:	str	r3, [sp, #4]
   1a9f8:	ldrd	r2, [sp]
   1a9fc:	umlal	r2, r3, fp, r0
   1aa00:	cmp	r3, #0
   1aa04:	movne	r6, #1
   1aa08:	movne	r7, #0
   1aa0c:	b	1a750 <__assert_fail@plt+0x902c>
   1aa10:	mov	r3, #1
   1aa14:	mvn	sl, #0
   1aa18:	mvn	fp, #0
   1aa1c:	b	1a57c <__assert_fail@plt+0x8e58>
   1aa20:	umull	r2, r3, sl, r0
   1aa24:	mov	r7, #0
   1aa28:	mov	r6, r3
   1aa2c:	umlal	r6, r7, fp, r0
   1aa30:	cmp	r7, #0
   1aa34:	movne	r2, #1
   1aa38:	movne	r3, #0
   1aa3c:	strdne	r2, [sp]
   1aa40:	b	1a504 <__assert_fail@plt+0x8de0>
   1aa44:	umull	r2, r3, sl, r0
   1aa48:	str	r3, [sp]
   1aa4c:	mov	r3, #0
   1aa50:	str	r3, [sp, #4]
   1aa54:	ldrd	r2, [sp]
   1aa58:	umlal	r2, r3, fp, r0
   1aa5c:	cmp	r3, #0
   1aa60:	movne	r6, #1
   1aa64:	movne	r7, #0
   1aa68:	b	1a8f4 <__assert_fail@plt+0x91d0>
   1aa6c:	ldr	r3, [sp]
   1aa70:	mov	r7, #0
   1aa74:	umull	r2, r3, r3, r0
   1aa78:	mov	r6, r3
   1aa7c:	umlal	r6, r7, ip, r0
   1aa80:	cmp	r7, #0
   1aa84:	movne	sl, #1
   1aa88:	movne	fp, #0
   1aa8c:	b	1a928 <__assert_fail@plt+0x9204>
   1aa90:	ldr	r3, [sp]
   1aa94:	mov	r7, #0
   1aa98:	umull	r2, r3, r3, r0
   1aa9c:	mov	r6, r3
   1aaa0:	umlal	r6, r7, ip, r0
   1aaa4:	cmp	r7, #0
   1aaa8:	movne	sl, #1
   1aaac:	movne	fp, #0
   1aab0:	b	1a55c <__assert_fail@plt+0x8e38>
   1aab4:	umull	r2, r3, r6, r0
   1aab8:	str	r3, [sp]
   1aabc:	mov	r3, #0
   1aac0:	str	r3, [sp, #4]
   1aac4:	ldrd	r2, [sp]
   1aac8:	umlal	r2, r3, ip, r0
   1aacc:	cmp	r3, #0
   1aad0:	movne	sl, #1
   1aad4:	movne	fp, #0
   1aad8:	b	1a530 <__assert_fail@plt+0x8e0c>
   1aadc:	bl	113f4 <__stack_chk_fail@plt>
   1aae0:	ldr	r3, [pc, #16]	; 1aaf8 <__assert_fail@plt+0x93d4>
   1aae4:	mov	r2, #96	; 0x60
   1aae8:	ldr	r1, [pc, #12]	; 1aafc <__assert_fail@plt+0x93d8>
   1aaec:	ldr	r0, [pc, #12]	; 1ab00 <__assert_fail@plt+0x93dc>
   1aaf0:	bl	11724 <__assert_fail@plt>
   1aaf4:	andeq	pc, r2, r8, lsl #30
   1aaf8:	strdeq	pc, [r1], -ip
   1aafc:	andeq	pc, r1, r8, lsl #24
   1ab00:	andeq	pc, r1, r8, lsl ip	; <UNPREDICTABLE>
   1ab04:	push	{r1, r2, r3}
   1ab08:	push	{r4, lr}
   1ab0c:	sub	sp, sp, #12
   1ab10:	ldr	r4, [pc, #60]	; 1ab54 <__assert_fail@plt+0x9430>
   1ab14:	add	r3, sp, #24
   1ab18:	mov	r2, r3
   1ab1c:	ldr	ip, [r4]
   1ab20:	ldr	r1, [sp, #20]
   1ab24:	str	r3, [sp]
   1ab28:	str	ip, [sp, #4]
   1ab2c:	bl	1b888 <__assert_fail@plt+0xa164>
   1ab30:	ldr	r2, [sp, #4]
   1ab34:	ldr	r3, [r4]
   1ab38:	cmp	r2, r3
   1ab3c:	bne	1ab50 <__assert_fail@plt+0x942c>
   1ab40:	add	sp, sp, #12
   1ab44:	pop	{r4, lr}
   1ab48:	add	sp, sp, #12
   1ab4c:	bx	lr
   1ab50:	bl	113f4 <__stack_chk_fail@plt>
   1ab54:	andeq	pc, r2, r8, lsl #30
   1ab58:	cmp	r0, #0
   1ab5c:	bxlt	lr
   1ab60:	push	{r4, lr}
   1ab64:	bl	116f4 <close@plt>
   1ab68:	cmp	r0, #0
   1ab6c:	popeq	{r4, pc}
   1ab70:	ldr	r3, [pc, #12]	; 1ab84 <__assert_fail@plt+0x9460>
   1ab74:	mov	r2, #64	; 0x40
   1ab78:	ldr	r1, [pc, #8]	; 1ab88 <__assert_fail@plt+0x9464>
   1ab7c:	ldr	r0, [pc, #8]	; 1ab8c <__assert_fail@plt+0x9468>
   1ab80:	bl	11724 <__assert_fail@plt>
   1ab84:	andeq	pc, r1, r0, asr #24
   1ab88:	andeq	pc, r1, r8, asr ip	; <UNPREDICTABLE>
   1ab8c:	andeq	pc, r1, ip, ror #24
   1ab90:	push	{r4, r5, r6, lr}
   1ab94:	mov	r2, #18688	; 0x4900
   1ab98:	mov	r4, r0
   1ab9c:	ldr	r0, [r0]
   1aba0:	bl	11568 <openat64@plt>
   1aba4:	subs	r5, r0, #0
   1aba8:	blt	1abc0 <__assert_fail@plt+0x949c>
   1abac:	ldr	r0, [r4]
   1abb0:	bl	1ab58 <__assert_fail@plt+0x9434>
   1abb4:	str	r5, [r4]
   1abb8:	mov	r0, #0
   1abbc:	pop	{r4, r5, r6, pc}
   1abc0:	mvn	r0, #0
   1abc4:	pop	{r4, r5, r6, pc}
   1abc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1abcc:	sub	sp, sp, #8
   1abd0:	ldr	r9, [pc, #592]	; 1ae28 <__assert_fail@plt+0x9704>
   1abd4:	mov	r7, r0
   1abd8:	ldr	r3, [r9]
   1abdc:	str	r3, [sp, #4]
   1abe0:	bl	11424 <chdir@plt>
   1abe4:	subs	r4, r0, #0
   1abe8:	beq	1ace8 <__assert_fail@plt+0x95c4>
   1abec:	bl	11580 <__errno_location@plt>
   1abf0:	ldr	r3, [r0]
   1abf4:	mov	sl, r0
   1abf8:	cmp	r3, #36	; 0x24
   1abfc:	bne	1ace8 <__assert_fail@plt+0x95c4>
   1ac00:	mov	r0, r7
   1ac04:	bl	11550 <strlen@plt>
   1ac08:	mvn	r3, #99	; 0x63
   1ac0c:	str	r3, [sp]
   1ac10:	subs	r6, r0, #0
   1ac14:	beq	1ae14 <__assert_fail@plt+0x96f0>
   1ac18:	cmp	r6, #4096	; 0x1000
   1ac1c:	bcc	1ae00 <__assert_fail@plt+0x96dc>
   1ac20:	ldr	r1, [pc, #516]	; 1ae2c <__assert_fail@plt+0x9708>
   1ac24:	mov	r0, r7
   1ac28:	bl	11718 <strspn@plt>
   1ac2c:	cmp	r0, #2
   1ac30:	mov	r5, r0
   1ac34:	beq	1ad34 <__assert_fail@plt+0x9610>
   1ac38:	cmp	r0, #0
   1ac3c:	moveq	r5, r7
   1ac40:	bne	1ad04 <__assert_fail@plt+0x95e0>
   1ac44:	ldrb	r3, [r5]
   1ac48:	cmp	r3, #47	; 0x2f
   1ac4c:	beq	1adec <__assert_fail@plt+0x96c8>
   1ac50:	add	r7, r7, r6
   1ac54:	cmp	r5, r7
   1ac58:	bhi	1add8 <__assert_fail@plt+0x96b4>
   1ac5c:	ldr	r6, [pc, #460]	; 1ae30 <__assert_fail@plt+0x970c>
   1ac60:	sub	r3, r7, r5
   1ac64:	cmp	r3, r6
   1ac68:	ble	1ad88 <__assert_fail@plt+0x9664>
   1ac6c:	ldr	r8, [pc, #440]	; 1ae2c <__assert_fail@plt+0x9708>
   1ac70:	b	1acc4 <__assert_fail@plt+0x95a0>
   1ac74:	sub	r3, r4, r5
   1ac78:	cmp	r3, r6
   1ac7c:	mov	r3, #0
   1ac80:	strb	r3, [r4]
   1ac84:	bgt	1adc0 <__assert_fail@plt+0x969c>
   1ac88:	mov	r1, r5
   1ac8c:	mov	r0, sp
   1ac90:	bl	1ab90 <__assert_fail@plt+0x946c>
   1ac94:	mov	r3, #47	; 0x2f
   1ac98:	strb	r3, [r4]
   1ac9c:	cmp	r0, #0
   1aca0:	bne	1ad1c <__assert_fail@plt+0x95f8>
   1aca4:	add	r4, r4, #1
   1aca8:	mov	r0, r4
   1acac:	mov	r1, r8
   1acb0:	bl	11718 <strspn@plt>
   1acb4:	add	r5, r4, r0
   1acb8:	sub	r3, r7, r5
   1acbc:	cmp	r3, r6
   1acc0:	ble	1ad88 <__assert_fail@plt+0x9664>
   1acc4:	mov	r2, #4096	; 0x1000
   1acc8:	mov	r1, #47	; 0x2f
   1accc:	mov	r0, r5
   1acd0:	bl	11574 <memrchr@plt>
   1acd4:	subs	r4, r0, #0
   1acd8:	bne	1ac74 <__assert_fail@plt+0x9550>
   1acdc:	mov	r3, #36	; 0x24
   1ace0:	str	r3, [sl]
   1ace4:	mvn	r4, #0
   1ace8:	ldr	r2, [sp, #4]
   1acec:	ldr	r3, [r9]
   1acf0:	mov	r0, r4
   1acf4:	cmp	r2, r3
   1acf8:	bne	1add4 <__assert_fail@plt+0x96b0>
   1acfc:	add	sp, sp, #8
   1ad00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad04:	ldr	r1, [pc, #288]	; 1ae2c <__assert_fail@plt+0x9708>
   1ad08:	mov	r0, sp
   1ad0c:	bl	1ab90 <__assert_fail@plt+0x946c>
   1ad10:	cmp	r0, #0
   1ad14:	addeq	r5, r7, r5
   1ad18:	beq	1ac44 <__assert_fail@plt+0x9520>
   1ad1c:	ldr	r5, [sl]
   1ad20:	ldr	r0, [sp]
   1ad24:	bl	1ab58 <__assert_fail@plt+0x9434>
   1ad28:	mvn	r4, #0
   1ad2c:	str	r5, [sl]
   1ad30:	b	1ace8 <__assert_fail@plt+0x95c4>
   1ad34:	sub	r2, r6, #3
   1ad38:	mov	r1, #47	; 0x2f
   1ad3c:	add	r0, r7, #3
   1ad40:	bl	115e0 <memchr@plt>
   1ad44:	subs	r4, r0, #0
   1ad48:	beq	1ace4 <__assert_fail@plt+0x95c0>
   1ad4c:	mov	r3, #0
   1ad50:	strb	r3, [r4]
   1ad54:	mov	r1, r7
   1ad58:	mov	r0, sp
   1ad5c:	bl	1ab90 <__assert_fail@plt+0x946c>
   1ad60:	mov	r3, #47	; 0x2f
   1ad64:	strb	r3, [r4]
   1ad68:	cmp	r0, #0
   1ad6c:	bne	1ad1c <__assert_fail@plt+0x95f8>
   1ad70:	add	r4, r4, #1
   1ad74:	mov	r0, r4
   1ad78:	ldr	r1, [pc, #172]	; 1ae2c <__assert_fail@plt+0x9708>
   1ad7c:	bl	11718 <strspn@plt>
   1ad80:	add	r5, r4, r0
   1ad84:	b	1ac44 <__assert_fail@plt+0x9520>
   1ad88:	cmp	r7, r5
   1ad8c:	bls	1ada4 <__assert_fail@plt+0x9680>
   1ad90:	mov	r1, r5
   1ad94:	mov	r0, sp
   1ad98:	bl	1ab90 <__assert_fail@plt+0x946c>
   1ad9c:	cmp	r0, #0
   1ada0:	bne	1ad1c <__assert_fail@plt+0x95f8>
   1ada4:	ldr	r0, [sp]
   1ada8:	bl	11688 <fchdir@plt>
   1adac:	subs	r4, r0, #0
   1adb0:	bne	1ad1c <__assert_fail@plt+0x95f8>
   1adb4:	ldr	r0, [sp]
   1adb8:	bl	1ab58 <__assert_fail@plt+0x9434>
   1adbc:	b	1ace8 <__assert_fail@plt+0x95c4>
   1adc0:	ldr	r3, [pc, #108]	; 1ae34 <__assert_fail@plt+0x9710>
   1adc4:	mov	r2, #179	; 0xb3
   1adc8:	ldr	r1, [pc, #104]	; 1ae38 <__assert_fail@plt+0x9714>
   1adcc:	ldr	r0, [pc, #104]	; 1ae3c <__assert_fail@plt+0x9718>
   1add0:	bl	11724 <__assert_fail@plt>
   1add4:	bl	113f4 <__stack_chk_fail@plt>
   1add8:	ldr	r3, [pc, #84]	; 1ae34 <__assert_fail@plt+0x9710>
   1addc:	mov	r2, #163	; 0xa3
   1ade0:	ldr	r1, [pc, #80]	; 1ae38 <__assert_fail@plt+0x9714>
   1ade4:	ldr	r0, [pc, #84]	; 1ae40 <__assert_fail@plt+0x971c>
   1ade8:	bl	11724 <__assert_fail@plt>
   1adec:	ldr	r3, [pc, #64]	; 1ae34 <__assert_fail@plt+0x9710>
   1adf0:	mov	r2, #162	; 0xa2
   1adf4:	ldr	r1, [pc, #60]	; 1ae38 <__assert_fail@plt+0x9714>
   1adf8:	ldr	r0, [pc, #68]	; 1ae44 <__assert_fail@plt+0x9720>
   1adfc:	bl	11724 <__assert_fail@plt>
   1ae00:	ldr	r3, [pc, #44]	; 1ae34 <__assert_fail@plt+0x9710>
   1ae04:	mov	r2, #127	; 0x7f
   1ae08:	ldr	r1, [pc, #40]	; 1ae38 <__assert_fail@plt+0x9714>
   1ae0c:	ldr	r0, [pc, #52]	; 1ae48 <__assert_fail@plt+0x9724>
   1ae10:	bl	11724 <__assert_fail@plt>
   1ae14:	ldr	r3, [pc, #24]	; 1ae34 <__assert_fail@plt+0x9710>
   1ae18:	mov	r2, #126	; 0x7e
   1ae1c:	ldr	r1, [pc, #20]	; 1ae38 <__assert_fail@plt+0x9714>
   1ae20:	ldr	r0, [pc, #36]	; 1ae4c <__assert_fail@plt+0x9728>
   1ae24:	bl	11724 <__assert_fail@plt>
   1ae28:	andeq	pc, r2, r8, lsl #30
   1ae2c:	andeq	pc, r1, r0, asr r6	; <UNPREDICTABLE>
   1ae30:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1ae34:	andeq	pc, r1, ip, asr #24
   1ae38:	andeq	pc, r1, r8, asr ip	; <UNPREDICTABLE>
   1ae3c:	andeq	pc, r1, ip, lsr #25
   1ae40:	muleq	r1, ip, ip
   1ae44:	muleq	r1, r0, ip
   1ae48:	andeq	pc, r1, r4, lsl #25
   1ae4c:	andeq	pc, r1, ip, ror ip	; <UNPREDICTABLE>
   1ae50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ae54:	sub	sp, sp, #400	; 0x190
   1ae58:	ldr	r4, [pc, #416]	; 1b000 <__assert_fail@plt+0x98dc>
   1ae5c:	ldr	sl, [pc, #416]	; 1b004 <__assert_fail@plt+0x98e0>
   1ae60:	mov	r5, r0
   1ae64:	ldr	r1, [r4]
   1ae68:	ldr	r3, [sl]
   1ae6c:	cmp	r1, #0
   1ae70:	mov	r8, sp
   1ae74:	mov	fp, r2
   1ae78:	str	r3, [sp, #396]	; 0x18c
   1ae7c:	blt	1aebc <__assert_fail@plt+0x9798>
   1ae80:	beq	1aed4 <__assert_fail@plt+0x97b0>
   1ae84:	mov	r0, r5
   1ae88:	mov	r1, r8
   1ae8c:	bl	115bc <statvfs64@plt>
   1ae90:	cmp	r0, #0
   1ae94:	blt	1af68 <__assert_fail@plt+0x9844>
   1ae98:	ldr	r1, [sp, #4]
   1ae9c:	cmp	r1, #0
   1aea0:	beq	1af70 <__assert_fail@plt+0x984c>
   1aea4:	cmn	r1, #1
   1aea8:	mov	lr, r1
   1aeac:	movne	r1, #0
   1aeb0:	bne	1af7c <__assert_fail@plt+0x9858>
   1aeb4:	mov	r1, lr
   1aeb8:	b	1af7c <__assert_fail@plt+0x9858>
   1aebc:	mov	r0, r8
   1aec0:	bl	113d0 <uname@plt>
   1aec4:	subs	r6, r0, #0
   1aec8:	movne	r2, #0
   1aecc:	strne	r2, [r4]
   1aed0:	beq	1afd8 <__assert_fail@plt+0x98b4>
   1aed4:	mov	r0, r5
   1aed8:	mov	r1, r8
   1aedc:	bl	1164c <statfs64@plt>
   1aee0:	cmp	r0, #0
   1aee4:	blt	1af68 <__assert_fail@plt+0x9844>
   1aee8:	ldr	r4, [sp, #60]	; 0x3c
   1aeec:	ldr	r2, [r8, #28]
   1aef0:	cmn	r4, #1
   1aef4:	mov	r0, #0
   1aef8:	asrne	r5, r4, #31
   1aefc:	mvneq	r4, #0
   1af00:	mvneq	r5, #0
   1af04:	and	r7, r2, #-2147483648	; 0x80000000
   1af08:	rsbs	r6, r0, #0
   1af0c:	rsc	r7, r7, #0
   1af10:	orr	ip, r7, r2
   1af14:	lsr	r2, r2, #31
   1af18:	strb	r2, [fp, #32]
   1af1c:	ldrd	r2, [r8, #32]
   1af20:	ldr	r1, [r8, #24]
   1af24:	strd	r4, [fp]
   1af28:	orr	r1, r6, r1
   1af2c:	ldrd	r4, [r8, #8]
   1af30:	ldrd	r6, [r8, #16]
   1af34:	strd	r2, [fp, #40]	; 0x28
   1af38:	ldrd	r2, [r8, #40]	; 0x28
   1af3c:	str	r1, [fp, #24]
   1af40:	str	ip, [fp, #28]
   1af44:	strd	r4, [fp, #8]
   1af48:	strd	r6, [fp, #16]
   1af4c:	strd	r2, [fp, #48]	; 0x30
   1af50:	ldr	r2, [sp, #396]	; 0x18c
   1af54:	ldr	r3, [sl]
   1af58:	cmp	r2, r3
   1af5c:	bne	1affc <__assert_fail@plt+0x98d8>
   1af60:	add	sp, sp, #400	; 0x190
   1af64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1af68:	mvn	r0, #0
   1af6c:	b	1af50 <__assert_fail@plt+0x982c>
   1af70:	ldr	lr, [sp]
   1af74:	cmn	lr, #1
   1af78:	beq	1aeb4 <__assert_fail@plt+0x9790>
   1af7c:	ldr	r2, [r8, #28]
   1af80:	mov	r0, #0
   1af84:	rsbs	r4, r0, #0
   1af88:	and	r5, r2, #-2147483648	; 0x80000000
   1af8c:	ldrd	r6, [r8, #8]
   1af90:	rsc	r5, r5, #0
   1af94:	ldr	ip, [r8, #24]
   1af98:	str	lr, [fp]
   1af9c:	orr	lr, r5, r2
   1afa0:	lsr	r2, r2, #31
   1afa4:	orr	ip, r4, ip
   1afa8:	strb	r2, [fp, #32]
   1afac:	ldrd	r4, [r8, #16]
   1afb0:	ldrd	r2, [r8, #32]
   1afb4:	strd	r6, [fp, #8]
   1afb8:	ldrd	r6, [r8, #40]	; 0x28
   1afbc:	str	r1, [fp, #4]
   1afc0:	str	ip, [fp, #24]
   1afc4:	str	lr, [fp, #28]
   1afc8:	strd	r4, [fp, #16]
   1afcc:	strd	r2, [fp, #40]	; 0x28
   1afd0:	strd	r6, [fp, #48]	; 0x30
   1afd4:	b	1af50 <__assert_fail@plt+0x982c>
   1afd8:	ldr	r1, [pc, #40]	; 1b008 <__assert_fail@plt+0x98e4>
   1afdc:	add	r0, r8, #130	; 0x82
   1afe0:	bl	11340 <strverscmp@plt>
   1afe4:	cmp	r0, #0
   1afe8:	movge	r2, #1
   1afec:	strlt	r6, [r4]
   1aff0:	strge	r2, [r4]
   1aff4:	bge	1ae84 <__assert_fail@plt+0x9760>
   1aff8:	b	1aed4 <__assert_fail@plt+0x97b0>
   1affc:	bl	113f4 <__stack_chk_fail@plt>
   1b000:	andeq	r0, r3, r0, lsl r3
   1b004:	andeq	pc, r2, r8, lsl #30
   1b008:	andeq	pc, r1, r0, asr #25
   1b00c:	push	{r4, r5, r6, r7, r8, lr}
   1b010:	subs	r7, r0, #0
   1b014:	ldr	r5, [pc, #108]	; 1b088 <__assert_fail@plt+0x9964>
   1b018:	sub	sp, sp, #8
   1b01c:	mov	r8, r1
   1b020:	ldr	r1, [r5]
   1b024:	moveq	r7, sp
   1b028:	str	r1, [sp, #4]
   1b02c:	mov	r0, r7
   1b030:	mov	r1, r8
   1b034:	mov	r6, r2
   1b038:	bl	1149c <mbrtowc@plt>
   1b03c:	cmp	r6, #0
   1b040:	cmnne	r0, #3
   1b044:	mov	r4, r0
   1b048:	bhi	1b068 <__assert_fail@plt+0x9944>
   1b04c:	ldr	r2, [sp, #4]
   1b050:	ldr	r3, [r5]
   1b054:	mov	r0, r4
   1b058:	cmp	r2, r3
   1b05c:	bne	1b084 <__assert_fail@plt+0x9960>
   1b060:	add	sp, sp, #8
   1b064:	pop	{r4, r5, r6, r7, r8, pc}
   1b068:	mov	r0, #0
   1b06c:	bl	1bdb8 <__assert_fail@plt+0xa694>
   1b070:	cmp	r0, #0
   1b074:	moveq	r4, #1
   1b078:	ldrbeq	r3, [r8]
   1b07c:	streq	r3, [r7]
   1b080:	b	1b04c <__assert_fail@plt+0x9928>
   1b084:	bl	113f4 <__stack_chk_fail@plt>
   1b088:	andeq	pc, r2, r8, lsl #30
   1b08c:	push	{r4, r5, r6, r7, r8, lr}
   1b090:	mov	r4, r0
   1b094:	bl	11550 <strlen@plt>
   1b098:	mov	ip, r4
   1b09c:	mov	r3, #0
   1b0a0:	add	r0, r0, #1
   1b0a4:	b	1b0b8 <__assert_fail@plt+0x9994>
   1b0a8:	cmp	r0, r2
   1b0ac:	strb	r1, [ip], #1
   1b0b0:	popls	{r4, r5, r6, r7, r8, pc}
   1b0b4:	mov	r3, r2
   1b0b8:	ldrb	r1, [r4, r3]
   1b0bc:	add	r2, r3, #1
   1b0c0:	cmp	r1, #92	; 0x5c
   1b0c4:	bne	1b0a8 <__assert_fail@plt+0x9984>
   1b0c8:	add	lr, r3, #4
   1b0cc:	cmp	lr, r0
   1b0d0:	bcs	1b0a8 <__assert_fail@plt+0x9984>
   1b0d4:	ldrb	r5, [r4, r2]
   1b0d8:	sub	r5, r5, #48	; 0x30
   1b0dc:	uxtb	r6, r5
   1b0e0:	cmp	r6, #3
   1b0e4:	bhi	1b0a8 <__assert_fail@plt+0x9984>
   1b0e8:	add	r3, r4, r3
   1b0ec:	ldrb	r6, [r3, #2]
   1b0f0:	sub	r6, r6, #48	; 0x30
   1b0f4:	uxtb	r7, r6
   1b0f8:	cmp	r7, #7
   1b0fc:	bhi	1b0a8 <__assert_fail@plt+0x9984>
   1b100:	ldrb	r3, [r3, #3]
   1b104:	sub	r3, r3, #48	; 0x30
   1b108:	uxtb	r3, r3
   1b10c:	cmp	r3, #7
   1b110:	bhi	1b0a8 <__assert_fail@plt+0x9984>
   1b114:	add	r5, r6, r5, lsl #3
   1b118:	mov	r2, lr
   1b11c:	add	r5, r3, r5, lsl #3
   1b120:	strb	r5, [ip], #1
   1b124:	b	1b0b4 <__assert_fail@plt+0x9990>
   1b128:	push	{r4, lr}
   1b12c:	mov	r4, r0
   1b130:	ldr	r0, [r0]
   1b134:	bl	11388 <free@plt>
   1b138:	ldr	r0, [r4, #4]
   1b13c:	bl	11388 <free@plt>
   1b140:	ldr	r0, [r4, #8]
   1b144:	bl	11388 <free@plt>
   1b148:	ldrb	r3, [r4, #24]
   1b14c:	tst	r3, #4
   1b150:	bne	1b160 <__assert_fail@plt+0x9a3c>
   1b154:	mov	r0, r4
   1b158:	pop	{r4, lr}
   1b15c:	b	11388 <free@plt>
   1b160:	ldr	r0, [r4, #12]
   1b164:	bl	11388 <free@plt>
   1b168:	mov	r0, r4
   1b16c:	pop	{r4, lr}
   1b170:	b	11388 <free@plt>
   1b174:	ldr	r3, [pc, #1700]	; 1b820 <__assert_fail@plt+0xa0fc>
   1b178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b17c:	sub	sp, sp, #100	; 0x64
   1b180:	ldr	r3, [r3]
   1b184:	ldr	r1, [pc, #1688]	; 1b824 <__assert_fail@plt+0xa100>
   1b188:	ldr	r0, [pc, #1688]	; 1b828 <__assert_fail@plt+0xa104>
   1b18c:	str	r3, [sp, #92]	; 0x5c
   1b190:	bl	116a0 <fopen64@plt>
   1b194:	subs	r5, r0, #0
   1b198:	beq	1b528 <__assert_fail@plt+0x9e04>
   1b19c:	ldr	r7, [pc, #1672]	; 1b82c <__assert_fail@plt+0xa108>
   1b1a0:	ldr	r8, [pc, #1672]	; 1b830 <__assert_fail@plt+0xa10c>
   1b1a4:	ldr	sl, [pc, #1672]	; 1b834 <__assert_fail@plt+0xa110>
   1b1a8:	add	r6, sp, #40	; 0x28
   1b1ac:	mov	r3, #0
   1b1b0:	str	r3, [sp, #44]	; 0x2c
   1b1b4:	str	r3, [sp, #48]	; 0x30
   1b1b8:	mov	r3, r5
   1b1bc:	mov	r2, #10
   1b1c0:	add	r1, sp, #48	; 0x30
   1b1c4:	add	r0, sp, #44	; 0x2c
   1b1c8:	bl	1134c <__getdelim@plt>
   1b1cc:	cmn	r0, #1
   1b1d0:	beq	1b3d4 <__assert_fail@plt+0x9cb0>
   1b1d4:	add	r0, sp, #64	; 0x40
   1b1d8:	add	r1, sp, #60	; 0x3c
   1b1dc:	add	r2, sp, #88	; 0x58
   1b1e0:	add	r3, sp, #84	; 0x54
   1b1e4:	add	ip, sp, #39	; 0x27
   1b1e8:	str	r0, [sp, #12]
   1b1ec:	str	r1, [sp, #8]
   1b1f0:	str	r2, [sp, #4]
   1b1f4:	str	r3, [sp]
   1b1f8:	str	ip, [sp, #16]
   1b1fc:	add	r3, sp, #56	; 0x38
   1b200:	add	r2, sp, #52	; 0x34
   1b204:	mov	r1, r7
   1b208:	ldr	r0, [sp, #44]	; 0x2c
   1b20c:	bl	11664 <sscanf@plt>
   1b210:	bic	r0, r0, #4
   1b214:	cmp	r0, #3
   1b218:	bne	1b1b8 <__assert_fail@plt+0x9a94>
   1b21c:	ldr	r3, [sp, #64]	; 0x40
   1b220:	ldr	r0, [sp, #44]	; 0x2c
   1b224:	mov	r1, r8
   1b228:	add	r0, r0, r3
   1b22c:	bl	11328 <strstr@plt>
   1b230:	subs	fp, r0, #0
   1b234:	beq	1b1b8 <__assert_fail@plt+0x9a94>
   1b238:	add	r2, sp, #80	; 0x50
   1b23c:	add	r3, sp, #76	; 0x4c
   1b240:	add	r1, sp, #39	; 0x27
   1b244:	str	r1, [sp, #8]
   1b248:	str	r2, [sp, #4]
   1b24c:	str	r3, [sp]
   1b250:	add	r2, sp, #68	; 0x44
   1b254:	add	r3, sp, #72	; 0x48
   1b258:	mov	r1, sl
   1b25c:	bl	11664 <sscanf@plt>
   1b260:	bic	r9, r0, #4
   1b264:	cmp	r9, #1
   1b268:	bne	1b1b8 <__assert_fail@plt+0x9a94>
   1b26c:	ldr	r1, [sp, #44]	; 0x2c
   1b270:	ldr	r2, [sp, #88]	; 0x58
   1b274:	mov	r3, #0
   1b278:	strb	r3, [r1, r2]
   1b27c:	ldr	r1, [sp, #44]	; 0x2c
   1b280:	ldr	r2, [sp, #64]	; 0x40
   1b284:	strb	r3, [r1, r2]
   1b288:	ldr	r2, [sp, #72]	; 0x48
   1b28c:	strb	r3, [fp, r2]
   1b290:	ldr	r2, [sp, #80]	; 0x50
   1b294:	strb	r3, [fp, r2]
   1b298:	ldr	r0, [sp, #76]	; 0x4c
   1b29c:	add	r0, fp, r0
   1b2a0:	bl	1b08c <__assert_fail@plt+0x9968>
   1b2a4:	ldr	r3, [sp, #60]	; 0x3c
   1b2a8:	ldr	r0, [sp, #44]	; 0x2c
   1b2ac:	add	r0, r0, r3
   1b2b0:	bl	1b08c <__assert_fail@plt+0x9968>
   1b2b4:	ldr	r3, [sp, #84]	; 0x54
   1b2b8:	ldr	r0, [sp, #44]	; 0x2c
   1b2bc:	add	r0, r0, r3
   1b2c0:	bl	1b08c <__assert_fail@plt+0x9968>
   1b2c4:	mov	r0, #32
   1b2c8:	bl	19da8 <__assert_fail@plt+0x8684>
   1b2cc:	mov	r4, r0
   1b2d0:	ldr	r0, [sp, #76]	; 0x4c
   1b2d4:	add	r0, fp, r0
   1b2d8:	bl	19fd4 <__assert_fail@plt+0x88b0>
   1b2dc:	ldr	r2, [sp, #44]	; 0x2c
   1b2e0:	ldr	r3, [sp, #60]	; 0x3c
   1b2e4:	str	r0, [r4]
   1b2e8:	add	r0, r2, r3
   1b2ec:	bl	19fd4 <__assert_fail@plt+0x88b0>
   1b2f0:	ldr	r2, [sp, #44]	; 0x2c
   1b2f4:	ldr	r3, [sp, #84]	; 0x54
   1b2f8:	str	r0, [r4, #4]
   1b2fc:	add	r0, r2, r3
   1b300:	bl	19fd4 <__assert_fail@plt+0x88b0>
   1b304:	ldr	r3, [sp, #68]	; 0x44
   1b308:	str	r0, [r4, #8]
   1b30c:	add	r0, fp, r3
   1b310:	bl	19fd4 <__assert_fail@plt+0x88b0>
   1b314:	ldr	r3, [sp, #52]	; 0x34
   1b318:	ldr	lr, [pc, #1304]	; 1b838 <__assert_fail@plt+0xa114>
   1b31c:	ldr	r2, [sp, #56]	; 0x38
   1b320:	and	lr, lr, r3, lsl #8
   1b324:	ldr	r1, [pc, #1296]	; 1b83c <__assert_fail@plt+0xa118>
   1b328:	bic	r3, r3, #4080	; 0xff0
   1b32c:	bic	r3, r3, #15
   1b330:	and	r1, r1, r2, lsl #12
   1b334:	orr	r3, r3, r2, lsr #20
   1b338:	ldrb	ip, [r4, #24]
   1b33c:	uxtb	r2, r2
   1b340:	orr	r2, r2, lr
   1b344:	orr	r2, r1, r2
   1b348:	orr	ip, ip, #4
   1b34c:	ldr	r1, [pc, #1260]	; 1b840 <__assert_fail@plt+0xa11c>
   1b350:	strb	ip, [r4, #24]
   1b354:	strd	r2, [r4, #16]
   1b358:	str	r0, [r4, #12]
   1b35c:	mov	fp, r0
   1b360:	bl	11358 <strcmp@plt>
   1b364:	cmp	r0, #0
   1b368:	beq	1b380 <__assert_fail@plt+0x9c5c>
   1b36c:	ldr	r1, [pc, #1232]	; 1b844 <__assert_fail@plt+0xa120>
   1b370:	mov	r0, fp
   1b374:	bl	11358 <strcmp@plt>
   1b378:	cmp	r0, #0
   1b37c:	bne	1b424 <__assert_fail@plt+0x9d00>
   1b380:	mov	r0, #1
   1b384:	ldrb	r9, [r4, #24]
   1b388:	ldr	r3, [r4]
   1b38c:	mov	r1, #58	; 0x3a
   1b390:	bic	r9, r9, #1
   1b394:	orr	r9, r0, r9
   1b398:	strb	r9, [r4, #24]
   1b39c:	mov	r0, r3
   1b3a0:	str	r3, [sp, #28]
   1b3a4:	bl	1155c <strchr@plt>
   1b3a8:	ldr	r3, [sp, #28]
   1b3ac:	cmp	r0, #0
   1b3b0:	beq	1b504 <__assert_fail@plt+0x9de0>
   1b3b4:	mov	r0, #1
   1b3b8:	ldrb	r3, [r4, #24]
   1b3bc:	bic	r3, r3, #2
   1b3c0:	orr	r3, r3, r0, lsl #1
   1b3c4:	strb	r3, [r4, #24]
   1b3c8:	str	r4, [r6]
   1b3cc:	add	r6, r4, #28
   1b3d0:	b	1b1b8 <__assert_fail@plt+0x9a94>
   1b3d4:	ldr	r0, [sp, #44]	; 0x2c
   1b3d8:	bl	11388 <free@plt>
   1b3dc:	ldr	r3, [r5]
   1b3e0:	tst	r3, #32
   1b3e4:	bne	1b7c8 <__assert_fail@plt+0xa0a4>
   1b3e8:	mov	r0, r5
   1b3ec:	bl	1beb8 <__assert_fail@plt+0xa794>
   1b3f0:	cmn	r0, #1
   1b3f4:	beq	1b728 <__assert_fail@plt+0xa004>
   1b3f8:	mov	r3, #0
   1b3fc:	str	r3, [r6]
   1b400:	ldr	r5, [sp, #40]	; 0x28
   1b404:	ldr	r3, [pc, #1044]	; 1b820 <__assert_fail@plt+0xa0fc>
   1b408:	ldr	r2, [sp, #92]	; 0x5c
   1b40c:	mov	r0, r5
   1b410:	ldr	r3, [r3]
   1b414:	cmp	r2, r3
   1b418:	bne	1b81c <__assert_fail@plt+0xa0f8>
   1b41c:	add	sp, sp, #100	; 0x64
   1b420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b424:	ldr	r1, [pc, #1052]	; 1b848 <__assert_fail@plt+0xa124>
   1b428:	mov	r0, fp
   1b42c:	bl	11358 <strcmp@plt>
   1b430:	cmp	r0, #0
   1b434:	beq	1b380 <__assert_fail@plt+0x9c5c>
   1b438:	ldr	r1, [pc, #1036]	; 1b84c <__assert_fail@plt+0xa128>
   1b43c:	mov	r0, fp
   1b440:	bl	11358 <strcmp@plt>
   1b444:	cmp	r0, #0
   1b448:	beq	1b380 <__assert_fail@plt+0x9c5c>
   1b44c:	ldr	r1, [pc, #1020]	; 1b850 <__assert_fail@plt+0xa12c>
   1b450:	mov	r0, fp
   1b454:	bl	11358 <strcmp@plt>
   1b458:	cmp	r0, #0
   1b45c:	beq	1b380 <__assert_fail@plt+0x9c5c>
   1b460:	ldr	r1, [pc, #1004]	; 1b854 <__assert_fail@plt+0xa130>
   1b464:	mov	r0, fp
   1b468:	bl	11358 <strcmp@plt>
   1b46c:	cmp	r0, #0
   1b470:	beq	1b380 <__assert_fail@plt+0x9c5c>
   1b474:	ldr	r1, [pc, #988]	; 1b858 <__assert_fail@plt+0xa134>
   1b478:	mov	r0, fp
   1b47c:	bl	11358 <strcmp@plt>
   1b480:	cmp	r0, #0
   1b484:	beq	1b380 <__assert_fail@plt+0x9c5c>
   1b488:	ldr	r1, [pc, #972]	; 1b85c <__assert_fail@plt+0xa138>
   1b48c:	mov	r0, fp
   1b490:	bl	11358 <strcmp@plt>
   1b494:	cmp	r0, #0
   1b498:	beq	1b380 <__assert_fail@plt+0x9c5c>
   1b49c:	ldr	r1, [pc, #956]	; 1b860 <__assert_fail@plt+0xa13c>
   1b4a0:	mov	r0, fp
   1b4a4:	bl	11358 <strcmp@plt>
   1b4a8:	cmp	r0, #0
   1b4ac:	beq	1b380 <__assert_fail@plt+0x9c5c>
   1b4b0:	ldr	r1, [pc, #940]	; 1b864 <__assert_fail@plt+0xa140>
   1b4b4:	mov	r0, fp
   1b4b8:	bl	11358 <strcmp@plt>
   1b4bc:	cmp	r0, #0
   1b4c0:	beq	1b380 <__assert_fail@plt+0x9c5c>
   1b4c4:	ldr	r1, [pc, #924]	; 1b868 <__assert_fail@plt+0xa144>
   1b4c8:	mov	r0, fp
   1b4cc:	bl	11358 <strcmp@plt>
   1b4d0:	cmp	r0, #0
   1b4d4:	beq	1b380 <__assert_fail@plt+0x9c5c>
   1b4d8:	ldr	r1, [pc, #908]	; 1b86c <__assert_fail@plt+0xa148>
   1b4dc:	mov	r0, fp
   1b4e0:	bl	11358 <strcmp@plt>
   1b4e4:	cmp	r0, #0
   1b4e8:	beq	1b380 <__assert_fail@plt+0x9c5c>
   1b4ec:	ldr	r1, [pc, #892]	; 1b870 <__assert_fail@plt+0xa14c>
   1b4f0:	mov	r0, fp
   1b4f4:	bl	11358 <strcmp@plt>
   1b4f8:	clz	r0, r0
   1b4fc:	lsr	r0, r0, #5
   1b500:	b	1b384 <__assert_fail@plt+0x9c60>
   1b504:	ldrb	r2, [r3]
   1b508:	cmp	r2, #47	; 0x2f
   1b50c:	beq	1b78c <__assert_fail@plt+0xa068>
   1b510:	mov	r1, r3
   1b514:	ldr	r0, [pc, #856]	; 1b874 <__assert_fail@plt+0xa150>
   1b518:	bl	11358 <strcmp@plt>
   1b51c:	clz	r0, r0
   1b520:	lsr	r0, r0, #5
   1b524:	b	1b3b8 <__assert_fail@plt+0x9c94>
   1b528:	ldr	r1, [pc, #756]	; 1b824 <__assert_fail@plt+0xa100>
   1b52c:	ldr	r0, [pc, #836]	; 1b878 <__assert_fail@plt+0xa154>
   1b530:	bl	116ac <setmntent@plt>
   1b534:	subs	r5, r0, #0
   1b538:	beq	1b404 <__assert_fail@plt+0x9ce0>
   1b53c:	mov	r0, r5
   1b540:	bl	114c0 <getmntent@plt>
   1b544:	add	r6, sp, #40	; 0x28
   1b548:	ldr	r8, [pc, #812]	; 1b87c <__assert_fail@plt+0xa158>
   1b54c:	ldr	r7, [pc, #748]	; 1b840 <__assert_fail@plt+0xa11c>
   1b550:	ldr	sl, [pc, #748]	; 1b844 <__assert_fail@plt+0xa120>
   1b554:	subs	r9, r0, #0
   1b558:	beq	1b718 <__assert_fail@plt+0x9ff4>
   1b55c:	mov	r1, r8
   1b560:	bl	11484 <hasmntopt@plt>
   1b564:	mov	fp, r0
   1b568:	mov	r0, #32
   1b56c:	bl	19da8 <__assert_fail@plt+0x8684>
   1b570:	mov	r4, r0
   1b574:	ldr	r0, [r9]
   1b578:	bl	19fd4 <__assert_fail@plt+0x88b0>
   1b57c:	str	r0, [r4]
   1b580:	ldr	r0, [r9, #4]
   1b584:	bl	19fd4 <__assert_fail@plt+0x88b0>
   1b588:	mov	r3, #0
   1b58c:	stmib	r4, {r0, r3}
   1b590:	ldr	r0, [r9, #8]
   1b594:	bl	19fd4 <__assert_fail@plt+0x88b0>
   1b598:	ldrb	r3, [r4, #24]
   1b59c:	mov	r1, r7
   1b5a0:	orr	r3, r3, #4
   1b5a4:	strb	r3, [r4, #24]
   1b5a8:	str	r0, [r4, #12]
   1b5ac:	mov	r9, r0
   1b5b0:	bl	11358 <strcmp@plt>
   1b5b4:	cmp	r0, #0
   1b5b8:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b5bc:	mov	r1, sl
   1b5c0:	mov	r0, r9
   1b5c4:	bl	11358 <strcmp@plt>
   1b5c8:	cmp	r0, #0
   1b5cc:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b5d0:	ldr	r1, [pc, #624]	; 1b848 <__assert_fail@plt+0xa124>
   1b5d4:	mov	r0, r9
   1b5d8:	bl	11358 <strcmp@plt>
   1b5dc:	cmp	r0, #0
   1b5e0:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b5e4:	ldr	r1, [pc, #608]	; 1b84c <__assert_fail@plt+0xa128>
   1b5e8:	mov	r0, r9
   1b5ec:	bl	11358 <strcmp@plt>
   1b5f0:	cmp	r0, #0
   1b5f4:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b5f8:	ldr	r1, [pc, #592]	; 1b850 <__assert_fail@plt+0xa12c>
   1b5fc:	mov	r0, r9
   1b600:	bl	11358 <strcmp@plt>
   1b604:	cmp	r0, #0
   1b608:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b60c:	ldr	r1, [pc, #576]	; 1b854 <__assert_fail@plt+0xa130>
   1b610:	mov	r0, r9
   1b614:	bl	11358 <strcmp@plt>
   1b618:	cmp	r0, #0
   1b61c:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b620:	ldr	r1, [pc, #560]	; 1b858 <__assert_fail@plt+0xa134>
   1b624:	mov	r0, r9
   1b628:	bl	11358 <strcmp@plt>
   1b62c:	cmp	r0, #0
   1b630:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b634:	ldr	r1, [pc, #544]	; 1b85c <__assert_fail@plt+0xa138>
   1b638:	mov	r0, r9
   1b63c:	bl	11358 <strcmp@plt>
   1b640:	cmp	r0, #0
   1b644:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b648:	ldr	r1, [pc, #528]	; 1b860 <__assert_fail@plt+0xa13c>
   1b64c:	mov	r0, r9
   1b650:	bl	11358 <strcmp@plt>
   1b654:	cmp	r0, #0
   1b658:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b65c:	ldr	r1, [pc, #512]	; 1b864 <__assert_fail@plt+0xa140>
   1b660:	mov	r0, r9
   1b664:	bl	11358 <strcmp@plt>
   1b668:	cmp	r0, #0
   1b66c:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b670:	ldr	r1, [pc, #496]	; 1b868 <__assert_fail@plt+0xa144>
   1b674:	mov	r0, r9
   1b678:	bl	11358 <strcmp@plt>
   1b67c:	cmp	r0, #0
   1b680:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b684:	ldr	r1, [pc, #480]	; 1b86c <__assert_fail@plt+0xa148>
   1b688:	mov	r0, r9
   1b68c:	bl	11358 <strcmp@plt>
   1b690:	cmp	r0, #0
   1b694:	beq	1b6b4 <__assert_fail@plt+0x9f90>
   1b698:	ldr	r1, [pc, #464]	; 1b870 <__assert_fail@plt+0xa14c>
   1b69c:	mov	r0, r9
   1b6a0:	bl	11358 <strcmp@plt>
   1b6a4:	orrs	r3, fp, r0
   1b6a8:	moveq	r3, #1
   1b6ac:	movne	r3, #0
   1b6b0:	b	1b6b8 <__assert_fail@plt+0x9f94>
   1b6b4:	mov	r3, #1
   1b6b8:	ldrb	r2, [r4, #24]
   1b6bc:	ldr	fp, [r4]
   1b6c0:	mov	r1, #58	; 0x3a
   1b6c4:	bic	r2, r2, #1
   1b6c8:	orr	r3, r3, r2
   1b6cc:	mov	r0, fp
   1b6d0:	strb	r3, [r4, #24]
   1b6d4:	bl	1155c <strchr@plt>
   1b6d8:	cmp	r0, #0
   1b6dc:	beq	1b768 <__assert_fail@plt+0xa044>
   1b6e0:	mov	r2, #1
   1b6e4:	ldrb	r3, [r4, #24]
   1b6e8:	mvn	r0, #0
   1b6ec:	mvn	r1, #0
   1b6f0:	bic	r3, r3, #2
   1b6f4:	orr	r3, r3, r2, lsl #1
   1b6f8:	strd	r0, [r4, #16]
   1b6fc:	strb	r3, [r4, #24]
   1b700:	mov	r0, r5
   1b704:	str	r4, [r6]
   1b708:	bl	114c0 <getmntent@plt>
   1b70c:	add	r6, r4, #28
   1b710:	subs	r9, r0, #0
   1b714:	bne	1b55c <__assert_fail@plt+0x9e38>
   1b718:	mov	r0, r5
   1b71c:	bl	11604 <endmntent@plt>
   1b720:	cmp	r0, #0
   1b724:	bne	1b3f8 <__assert_fail@plt+0x9cd4>
   1b728:	bl	11580 <__errno_location@plt>
   1b72c:	ldr	r5, [r0]
   1b730:	mov	r7, r0
   1b734:	mov	r3, #0
   1b738:	str	r3, [r6]
   1b73c:	ldr	r0, [sp, #40]	; 0x28
   1b740:	cmp	r0, r3
   1b744:	beq	1b75c <__assert_fail@plt+0xa038>
   1b748:	ldr	r4, [r0, #28]
   1b74c:	bl	1b128 <__assert_fail@plt+0x9a04>
   1b750:	subs	r0, r4, #0
   1b754:	str	r4, [sp, #40]	; 0x28
   1b758:	bne	1b748 <__assert_fail@plt+0xa024>
   1b75c:	str	r5, [r7]
   1b760:	mov	r5, #0
   1b764:	b	1b404 <__assert_fail@plt+0x9ce0>
   1b768:	ldrb	r3, [fp]
   1b76c:	cmp	r3, #47	; 0x2f
   1b770:	beq	1b7e4 <__assert_fail@plt+0xa0c0>
   1b774:	mov	r1, fp
   1b778:	ldr	r0, [pc, #244]	; 1b874 <__assert_fail@plt+0xa150>
   1b77c:	bl	11358 <strcmp@plt>
   1b780:	clz	r2, r0
   1b784:	lsr	r2, r2, #5
   1b788:	b	1b6e4 <__assert_fail@plt+0x9fc0>
   1b78c:	ldrb	r2, [r3, #1]
   1b790:	cmp	r2, #47	; 0x2f
   1b794:	bne	1b510 <__assert_fail@plt+0x9dec>
   1b798:	ldr	r1, [pc, #224]	; 1b880 <__assert_fail@plt+0xa15c>
   1b79c:	mov	r0, fp
   1b7a0:	bl	11358 <strcmp@plt>
   1b7a4:	cmp	r0, #0
   1b7a8:	beq	1b3b4 <__assert_fail@plt+0x9c90>
   1b7ac:	mov	r0, fp
   1b7b0:	ldr	r1, [pc, #204]	; 1b884 <__assert_fail@plt+0xa160>
   1b7b4:	bl	11358 <strcmp@plt>
   1b7b8:	ldr	r3, [sp, #28]
   1b7bc:	cmp	r0, #0
   1b7c0:	beq	1b3b4 <__assert_fail@plt+0x9c90>
   1b7c4:	b	1b510 <__assert_fail@plt+0x9dec>
   1b7c8:	bl	11580 <__errno_location@plt>
   1b7cc:	mov	r7, r0
   1b7d0:	mov	r0, r5
   1b7d4:	ldr	r5, [r7]
   1b7d8:	bl	1beb8 <__assert_fail@plt+0xa794>
   1b7dc:	str	r5, [r7]
   1b7e0:	b	1b734 <__assert_fail@plt+0xa010>
   1b7e4:	ldrb	r3, [fp, #1]
   1b7e8:	cmp	r3, #47	; 0x2f
   1b7ec:	bne	1b774 <__assert_fail@plt+0xa050>
   1b7f0:	ldr	r1, [pc, #136]	; 1b880 <__assert_fail@plt+0xa15c>
   1b7f4:	mov	r0, r9
   1b7f8:	bl	11358 <strcmp@plt>
   1b7fc:	cmp	r0, #0
   1b800:	beq	1b6e0 <__assert_fail@plt+0x9fbc>
   1b804:	mov	r0, r9
   1b808:	ldr	r1, [pc, #116]	; 1b884 <__assert_fail@plt+0xa160>
   1b80c:	bl	11358 <strcmp@plt>
   1b810:	cmp	r0, #0
   1b814:	beq	1b6e0 <__assert_fail@plt+0x9fbc>
   1b818:	b	1b774 <__assert_fail@plt+0xa050>
   1b81c:	bl	113f4 <__stack_chk_fail@plt>
   1b820:	andeq	pc, r2, r8, lsl #30
   1b824:	andeq	pc, r1, r8, asr #25
   1b828:	andeq	pc, r1, ip, asr #25
   1b82c:	andeq	pc, r1, r4, ror #25
   1b830:	andeq	pc, r1, r4, lsl #26
   1b834:	andeq	pc, r1, r8, lsl #26
   1b838:	andeq	pc, pc, r0, lsl #30
   1b83c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1b840:	andeq	pc, r1, r0, lsr #26
   1b844:	andeq	pc, r1, r8, lsr #26
   1b848:	andeq	pc, r1, r0, lsr sp	; <UNPREDICTABLE>
   1b84c:	andeq	pc, r1, r8, lsr sp	; <UNPREDICTABLE>
   1b850:	andeq	pc, r1, r0, asr #26
   1b854:	andeq	pc, r1, r8, asr #26
   1b858:	andeq	pc, r1, r0, asr sp	; <UNPREDICTABLE>
   1b85c:	andeq	pc, r1, r8, asr sp	; <UNPREDICTABLE>
   1b860:	andeq	pc, r1, r4, ror #26
   1b864:	andeq	pc, r1, ip, ror #26
   1b868:	andeq	pc, r1, r4, ror sp	; <UNPREDICTABLE>
   1b86c:	andeq	pc, r1, ip, ror sp	; <UNPREDICTABLE>
   1b870:	andeq	pc, r1, r4, lsl #27
   1b874:	muleq	r1, ip, sp
   1b878:	andeq	pc, r1, r4, lsr #27
   1b87c:			; <UNDEFINED> instruction: 0x0001fdb0
   1b880:	andeq	pc, r1, ip, lsl #27
   1b884:	muleq	r1, r4, sp
   1b888:	push	{r4, r5, lr}
   1b88c:	sub	sp, sp, #12
   1b890:	ldr	r4, [pc, #116]	; 1b90c <__assert_fail@plt+0xa1e8>
   1b894:	mov	r3, r2
   1b898:	mov	r5, r0
   1b89c:	ldr	ip, [r4]
   1b8a0:	mov	r2, r1
   1b8a4:	mov	r0, #0
   1b8a8:	mov	r1, sp
   1b8ac:	str	ip, [sp, #4]
   1b8b0:	bl	1c058 <__assert_fail@plt+0xa934>
   1b8b4:	subs	r2, r0, #0
   1b8b8:	beq	1b8e8 <__assert_fail@plt+0xa1c4>
   1b8bc:	ldr	r3, [sp]
   1b8c0:	cmp	r3, #0
   1b8c4:	strge	r2, [r5]
   1b8c8:	blt	1b8f0 <__assert_fail@plt+0xa1cc>
   1b8cc:	ldr	r1, [sp, #4]
   1b8d0:	ldr	r2, [r4]
   1b8d4:	mov	r0, r3
   1b8d8:	cmp	r1, r2
   1b8dc:	bne	1b908 <__assert_fail@plt+0xa1e4>
   1b8e0:	add	sp, sp, #12
   1b8e4:	pop	{r4, r5, pc}
   1b8e8:	mvn	r3, #0
   1b8ec:	b	1b8cc <__assert_fail@plt+0xa1a8>
   1b8f0:	bl	11388 <free@plt>
   1b8f4:	bl	11580 <__errno_location@plt>
   1b8f8:	mov	r2, #75	; 0x4b
   1b8fc:	mvn	r3, #0
   1b900:	str	r2, [r0]
   1b904:	b	1b8cc <__assert_fail@plt+0xa1a8>
   1b908:	bl	113f4 <__stack_chk_fail@plt>
   1b90c:	andeq	pc, r2, r8, lsl #30
   1b910:	cmp	r1, #1024	; 0x400
   1b914:	push	{r4, r5, r6, r7, r8, lr}
   1b918:	mov	r7, r0
   1b91c:	ldrhi	r4, [pc, #156]	; 1b9c0 <__assert_fail@plt+0xa29c>
   1b920:	addls	r4, r1, #1
   1b924:	mov	r0, r4
   1b928:	bl	114e4 <malloc@plt>
   1b92c:	mov	r2, r4
   1b930:	subs	r5, r0, #0
   1b934:	mov	r1, r5
   1b938:	mov	r0, r7
   1b93c:	beq	1b984 <__assert_fail@plt+0xa260>
   1b940:	bl	11448 <readlink@plt>
   1b944:	subs	r6, r0, #0
   1b948:	blt	1b98c <__assert_fail@plt+0xa268>
   1b94c:	cmp	r4, r6
   1b950:	mov	r0, r5
   1b954:	bhi	1b9b0 <__assert_fail@plt+0xa28c>
   1b958:	bl	11388 <free@plt>
   1b95c:	cmn	r4, #-1073741823	; 0xc0000001
   1b960:	lslls	r4, r4, #1
   1b964:	bls	1b924 <__assert_fail@plt+0xa200>
   1b968:	cmn	r4, #-2147483646	; 0x80000002
   1b96c:	mvn	r4, #-2147483648	; 0x80000000
   1b970:	bls	1b924 <__assert_fail@plt+0xa200>
   1b974:	bl	11580 <__errno_location@plt>
   1b978:	mov	r5, #0
   1b97c:	mov	r3, #12
   1b980:	str	r3, [r0]
   1b984:	mov	r0, r5
   1b988:	pop	{r4, r5, r6, r7, r8, pc}
   1b98c:	bl	11580 <__errno_location@plt>
   1b990:	ldr	r3, [r0]
   1b994:	cmp	r3, #34	; 0x22
   1b998:	beq	1b94c <__assert_fail@plt+0xa228>
   1b99c:	mov	r0, r5
   1b9a0:	mov	r5, #0
   1b9a4:	bl	11388 <free@plt>
   1b9a8:	mov	r0, r5
   1b9ac:	pop	{r4, r5, r6, r7, r8, pc}
   1b9b0:	mov	r3, #0
   1b9b4:	strb	r3, [r5, r6]
   1b9b8:	mov	r0, r5
   1b9bc:	pop	{r4, r5, r6, r7, r8, pc}
   1b9c0:	andeq	r0, r0, r1, lsl #8
   1b9c4:	mov	r0, #1
   1b9c8:	b	13ea0 <__assert_fail@plt+0x277c>
   1b9cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9d0:	mov	r5, r1
   1b9d4:	sub	sp, sp, #12
   1b9d8:	mov	r4, r2
   1b9dc:	str	r2, [sp]
   1b9e0:	mov	r7, r3
   1b9e4:	mov	sl, r0
   1b9e8:	bl	11550 <strlen@plt>
   1b9ec:	ldr	fp, [r5]
   1b9f0:	cmp	fp, #0
   1b9f4:	beq	1bab8 <__assert_fail@plt+0xa394>
   1b9f8:	mov	r6, #0
   1b9fc:	mov	r8, r0
   1ba00:	str	r6, [sp, #4]
   1ba04:	mvn	r9, #0
   1ba08:	b	1ba34 <__assert_fail@plt+0xa310>
   1ba0c:	bl	113c4 <memcmp@plt>
   1ba10:	ldr	r3, [sp, #4]
   1ba14:	cmp	r0, #0
   1ba18:	movne	r3, #1
   1ba1c:	str	r3, [sp, #4]
   1ba20:	ldr	fp, [r5, #4]!
   1ba24:	add	r6, r6, #1
   1ba28:	cmp	fp, #0
   1ba2c:	add	r4, r4, r7
   1ba30:	beq	1ba90 <__assert_fail@plt+0xa36c>
   1ba34:	mov	r2, r8
   1ba38:	mov	r1, sl
   1ba3c:	mov	r0, fp
   1ba40:	bl	116dc <strncmp@plt>
   1ba44:	cmp	r0, #0
   1ba48:	mov	r0, fp
   1ba4c:	bne	1ba20 <__assert_fail@plt+0xa2fc>
   1ba50:	bl	11550 <strlen@plt>
   1ba54:	ldr	r3, [sp]
   1ba58:	mov	r2, r7
   1ba5c:	mov	r1, r4
   1ba60:	cmp	r0, r8
   1ba64:	mla	r0, r7, r9, r3
   1ba68:	beq	1baa8 <__assert_fail@plt+0xa384>
   1ba6c:	cmn	r9, #1
   1ba70:	moveq	r9, r6
   1ba74:	beq	1ba20 <__assert_fail@plt+0xa2fc>
   1ba78:	ldr	r3, [sp]
   1ba7c:	cmp	r3, #0
   1ba80:	bne	1ba0c <__assert_fail@plt+0xa2e8>
   1ba84:	mov	r3, #1
   1ba88:	str	r3, [sp, #4]
   1ba8c:	b	1ba20 <__assert_fail@plt+0xa2fc>
   1ba90:	ldr	r3, [sp, #4]
   1ba94:	cmp	r3, #0
   1ba98:	mvnne	r9, #1
   1ba9c:	mov	r0, r9
   1baa0:	add	sp, sp, #12
   1baa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1baa8:	mov	r9, r6
   1baac:	mov	r0, r9
   1bab0:	add	sp, sp, #12
   1bab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bab8:	mvn	r9, #0
   1babc:	b	1ba9c <__assert_fail@plt+0xa378>
   1bac0:	cmn	r2, #1
   1bac4:	push	{r4, r5, r6, lr}
   1bac8:	mov	r2, #5
   1bacc:	sub	sp, sp, #8
   1bad0:	mov	r5, r1
   1bad4:	mov	r6, r0
   1bad8:	ldreq	r1, [pc, #76]	; 1bb2c <__assert_fail@plt+0xa408>
   1badc:	ldrne	r1, [pc, #76]	; 1bb30 <__assert_fail@plt+0xa40c>
   1bae0:	mov	r0, #0
   1bae4:	bl	113dc <dcgettext@plt>
   1bae8:	mov	r2, r5
   1baec:	mov	r1, #8
   1baf0:	mov	r4, r0
   1baf4:	mov	r0, #0
   1baf8:	bl	192bc <__assert_fail@plt+0x7b98>
   1bafc:	mov	r1, r6
   1bb00:	mov	r5, r0
   1bb04:	mov	r0, #1
   1bb08:	bl	19608 <__assert_fail@plt+0x7ee4>
   1bb0c:	mov	r1, #0
   1bb10:	mov	r3, r5
   1bb14:	mov	r2, r4
   1bb18:	str	r0, [sp]
   1bb1c:	mov	r0, r1
   1bb20:	bl	114b4 <error@plt>
   1bb24:	add	sp, sp, #8
   1bb28:	pop	{r4, r5, r6, pc}
   1bb2c:			; <UNDEFINED> instruction: 0x0001fdb8
   1bb30:	ldrdeq	pc, [r1], -r4
   1bb34:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb38:	mov	r6, r0
   1bb3c:	ldr	sl, [pc, #224]	; 1bc24 <__assert_fail@plt+0xa500>
   1bb40:	mov	r4, r1
   1bb44:	mov	r7, r2
   1bb48:	ldr	r1, [pc, #216]	; 1bc28 <__assert_fail@plt+0xa504>
   1bb4c:	mov	r2, #5
   1bb50:	mov	r0, #0
   1bb54:	bl	113dc <dcgettext@plt>
   1bb58:	ldr	r1, [sl]
   1bb5c:	bl	1131c <fputs_unlocked@plt>
   1bb60:	ldr	fp, [r6]
   1bb64:	cmp	fp, #0
   1bb68:	movne	r9, #0
   1bb6c:	movne	r5, r9
   1bb70:	bne	1bbac <__assert_fail@plt+0xa488>
   1bb74:	b	1bbf0 <__assert_fail@plt+0xa4cc>
   1bb78:	mov	r0, fp
   1bb7c:	bl	19618 <__assert_fail@plt+0x7ef4>
   1bb80:	ldr	r2, [pc, #164]	; 1bc2c <__assert_fail@plt+0xa508>
   1bb84:	mov	r1, #1
   1bb88:	mov	r9, r4
   1bb8c:	mov	r3, r0
   1bb90:	mov	r0, r8
   1bb94:	bl	115d4 <__fprintf_chk@plt>
   1bb98:	ldr	fp, [r6, #4]!
   1bb9c:	add	r5, r5, #1
   1bba0:	cmp	fp, #0
   1bba4:	add	r4, r4, r7
   1bba8:	beq	1bbf0 <__assert_fail@plt+0xa4cc>
   1bbac:	cmp	r5, #0
   1bbb0:	mov	r1, r4
   1bbb4:	mov	r2, r7
   1bbb8:	mov	r0, r9
   1bbbc:	ldr	r8, [sl]
   1bbc0:	beq	1bb78 <__assert_fail@plt+0xa454>
   1bbc4:	bl	113c4 <memcmp@plt>
   1bbc8:	cmp	r0, #0
   1bbcc:	bne	1bb78 <__assert_fail@plt+0xa454>
   1bbd0:	mov	r0, fp
   1bbd4:	bl	19618 <__assert_fail@plt+0x7ef4>
   1bbd8:	ldr	r2, [pc, #80]	; 1bc30 <__assert_fail@plt+0xa50c>
   1bbdc:	mov	r1, #1
   1bbe0:	mov	r3, r0
   1bbe4:	mov	r0, r8
   1bbe8:	bl	115d4 <__fprintf_chk@plt>
   1bbec:	b	1bb98 <__assert_fail@plt+0xa474>
   1bbf0:	ldr	r0, [sl]
   1bbf4:	ldr	r3, [r0, #20]
   1bbf8:	ldr	r2, [r0, #24]
   1bbfc:	cmp	r3, r2
   1bc00:	bcs	1bc18 <__assert_fail@plt+0xa4f4>
   1bc04:	add	r1, r3, #1
   1bc08:	mov	r2, #10
   1bc0c:	str	r1, [r0, #20]
   1bc10:	strb	r2, [r3]
   1bc14:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc18:	mov	r1, #10
   1bc1c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc20:	b	1161c <__overflow@plt>
   1bc24:	andeq	r0, r3, r8, lsr #6
   1bc28:	strdeq	pc, [r1], -r4
   1bc2c:	andeq	pc, r1, ip, lsl #28
   1bc30:	andeq	pc, r1, r4, lsl lr	; <UNPREDICTABLE>
   1bc34:	push	{r4, r5, r6, r7, r8, lr}
   1bc38:	mov	r6, r1
   1bc3c:	mov	r4, r2
   1bc40:	mov	r5, r3
   1bc44:	mov	r7, r0
   1bc48:	ldr	r3, [sp, #24]
   1bc4c:	mov	r2, r5
   1bc50:	mov	r1, r4
   1bc54:	mov	r0, r6
   1bc58:	bl	1b9cc <__assert_fail@plt+0xa2a8>
   1bc5c:	cmp	r0, #0
   1bc60:	popge	{r4, r5, r6, r7, r8, pc}
   1bc64:	mov	r2, r0
   1bc68:	mov	r1, r6
   1bc6c:	mov	r0, r7
   1bc70:	bl	1bac0 <__assert_fail@plt+0xa39c>
   1bc74:	mov	r0, r4
   1bc78:	ldr	r2, [sp, #24]
   1bc7c:	mov	r1, r5
   1bc80:	bl	1bb34 <__assert_fail@plt+0xa410>
   1bc84:	ldr	r3, [sp, #28]
   1bc88:	blx	r3
   1bc8c:	mvn	r0, #0
   1bc90:	pop	{r4, r5, r6, r7, r8, pc}
   1bc94:	push	{r4, r5, r6, r7, r8, lr}
   1bc98:	ldr	r7, [r1]
   1bc9c:	cmp	r7, #0
   1bca0:	beq	1bce0 <__assert_fail@plt+0xa5bc>
   1bca4:	mov	r6, r3
   1bca8:	mov	r8, r0
   1bcac:	mov	r4, r2
   1bcb0:	mov	r5, r1
   1bcb4:	b	1bcc4 <__assert_fail@plt+0xa5a0>
   1bcb8:	ldr	r7, [r5, #4]!
   1bcbc:	cmp	r7, #0
   1bcc0:	beq	1bce0 <__assert_fail@plt+0xa5bc>
   1bcc4:	mov	r1, r4
   1bcc8:	mov	r2, r6
   1bccc:	mov	r0, r8
   1bcd0:	bl	113c4 <memcmp@plt>
   1bcd4:	add	r4, r4, r6
   1bcd8:	cmp	r0, #0
   1bcdc:	bne	1bcb8 <__assert_fail@plt+0xa594>
   1bce0:	mov	r0, r7
   1bce4:	pop	{r4, r5, r6, r7, r8, pc}
   1bce8:	push	{r4, r5, r6, lr}
   1bcec:	mov	r4, r0
   1bcf0:	bl	11490 <__fpending@plt>
   1bcf4:	ldr	r5, [r4]
   1bcf8:	and	r5, r5, #32
   1bcfc:	mov	r6, r0
   1bd00:	mov	r0, r4
   1bd04:	bl	1beb8 <__assert_fail@plt+0xa794>
   1bd08:	cmp	r5, #0
   1bd0c:	mov	r4, r0
   1bd10:	bne	1bd3c <__assert_fail@plt+0xa618>
   1bd14:	cmp	r0, #0
   1bd18:	beq	1bd34 <__assert_fail@plt+0xa610>
   1bd1c:	cmp	r6, #0
   1bd20:	bne	1bd54 <__assert_fail@plt+0xa630>
   1bd24:	bl	11580 <__errno_location@plt>
   1bd28:	ldr	r4, [r0]
   1bd2c:	subs	r4, r4, #9
   1bd30:	mvnne	r4, #0
   1bd34:	mov	r0, r4
   1bd38:	pop	{r4, r5, r6, pc}
   1bd3c:	cmp	r0, #0
   1bd40:	bne	1bd54 <__assert_fail@plt+0xa630>
   1bd44:	bl	11580 <__errno_location@plt>
   1bd48:	str	r4, [r0]
   1bd4c:	mvn	r4, #0
   1bd50:	b	1bd34 <__assert_fail@plt+0xa610>
   1bd54:	mvn	r4, #0
   1bd58:	b	1bd34 <__assert_fail@plt+0xa610>
   1bd5c:	push	{r1, r2, r3}
   1bd60:	push	{r4, lr}
   1bd64:	sub	sp, sp, #12
   1bd68:	ldr	r4, [pc, #68]	; 1bdb4 <__assert_fail@plt+0xa690>
   1bd6c:	ldr	r1, [sp, #20]
   1bd70:	ldr	r3, [r4]
   1bd74:	ands	r2, r1, #64	; 0x40
   1bd78:	str	r3, [sp, #4]
   1bd7c:	ldrne	r2, [sp, #24]
   1bd80:	addne	r3, sp, #24
   1bd84:	strne	r3, [sp]
   1bd88:	bl	114cc <open64@plt>
   1bd8c:	bl	1be74 <__assert_fail@plt+0xa750>
   1bd90:	ldr	r2, [sp, #4]
   1bd94:	ldr	r3, [r4]
   1bd98:	cmp	r2, r3
   1bd9c:	bne	1bdb0 <__assert_fail@plt+0xa68c>
   1bda0:	add	sp, sp, #12
   1bda4:	pop	{r4, lr}
   1bda8:	add	sp, sp, #12
   1bdac:	bx	lr
   1bdb0:	bl	113f4 <__stack_chk_fail@plt>
   1bdb4:	andeq	pc, r2, r8, lsl #30
   1bdb8:	push	{r4, lr}
   1bdbc:	mov	r1, #0
   1bdc0:	bl	11628 <setlocale@plt>
   1bdc4:	subs	r4, r0, #0
   1bdc8:	beq	1bdf4 <__assert_fail@plt+0xa6d0>
   1bdcc:	ldr	r1, [pc, #40]	; 1bdfc <__assert_fail@plt+0xa6d8>
   1bdd0:	bl	11358 <strcmp@plt>
   1bdd4:	cmp	r0, #0
   1bdd8:	popeq	{r4, pc}
   1bddc:	mov	r0, r4
   1bde0:	ldr	r1, [pc, #24]	; 1be00 <__assert_fail@plt+0xa6dc>
   1bde4:	bl	11358 <strcmp@plt>
   1bde8:	adds	r0, r0, #0
   1bdec:	movne	r0, #1
   1bdf0:	pop	{r4, pc}
   1bdf4:	mov	r0, #1
   1bdf8:	pop	{r4, pc}
   1bdfc:	andeq	pc, r1, ip, lsl lr	; <UNPREDICTABLE>
   1be00:	andeq	pc, r1, r0, lsr #28
   1be04:	ldrb	r3, [r0]
   1be08:	cmp	r3, #0
   1be0c:	beq	1be38 <__assert_fail@plt+0xa714>
   1be10:	mov	r2, #0
   1be14:	push	{r4, lr}
   1be18:	add	r2, r3, r2, ror #23
   1be1c:	ldrb	r3, [r0, #1]!
   1be20:	cmp	r3, #0
   1be24:	bne	1be18 <__assert_fail@plt+0xa6f4>
   1be28:	mov	r0, r2
   1be2c:	bl	1dfb8 <__assert_fail@plt+0xc894>
   1be30:	mov	r0, r1
   1be34:	pop	{r4, pc}
   1be38:	mov	r0, r3
   1be3c:	bx	lr
   1be40:	push	{r4, lr}
   1be44:	mov	r0, #14
   1be48:	bl	11658 <nl_langinfo@plt>
   1be4c:	cmp	r0, #0
   1be50:	beq	1be68 <__assert_fail@plt+0xa744>
   1be54:	ldrb	r2, [r0]
   1be58:	ldr	r3, [pc, #16]	; 1be70 <__assert_fail@plt+0xa74c>
   1be5c:	cmp	r2, #0
   1be60:	moveq	r0, r3
   1be64:	pop	{r4, pc}
   1be68:	ldr	r0, [pc]	; 1be70 <__assert_fail@plt+0xa74c>
   1be6c:	pop	{r4, pc}
   1be70:	andeq	pc, r1, r8, lsr #28
   1be74:	cmp	r0, #2
   1be78:	push	{r4, r5, r6, r7, r8, lr}
   1be7c:	mov	r4, r0
   1be80:	bls	1be8c <__assert_fail@plt+0xa768>
   1be84:	mov	r0, r4
   1be88:	pop	{r4, r5, r6, r7, r8, pc}
   1be8c:	bl	1ce74 <__assert_fail@plt+0xb750>
   1be90:	mov	r7, r0
   1be94:	bl	11580 <__errno_location@plt>
   1be98:	mov	r5, r0
   1be9c:	mov	r0, r4
   1bea0:	ldr	r6, [r5]
   1bea4:	mov	r4, r7
   1bea8:	bl	116f4 <close@plt>
   1beac:	str	r6, [r5]
   1beb0:	mov	r0, r4
   1beb4:	pop	{r4, r5, r6, r7, r8, pc}
   1beb8:	push	{r4, r5, lr}
   1bebc:	sub	sp, sp, #12
   1bec0:	mov	r4, r0
   1bec4:	bl	115c8 <fileno@plt>
   1bec8:	cmp	r0, #0
   1becc:	mov	r0, r4
   1bed0:	blt	1bf4c <__assert_fail@plt+0xa828>
   1bed4:	bl	114fc <__freading@plt>
   1bed8:	cmp	r0, #0
   1bedc:	bne	1bf18 <__assert_fail@plt+0xa7f4>
   1bee0:	mov	r0, r4
   1bee4:	bl	1bf58 <__assert_fail@plt+0xa834>
   1bee8:	cmp	r0, #0
   1beec:	beq	1bf48 <__assert_fail@plt+0xa824>
   1bef0:	bl	11580 <__errno_location@plt>
   1bef4:	mov	r5, r0
   1bef8:	mov	r0, r4
   1befc:	ldr	r4, [r5]
   1bf00:	bl	115ec <fclose@plt>
   1bf04:	cmp	r4, #0
   1bf08:	mvnne	r0, #0
   1bf0c:	strne	r4, [r5]
   1bf10:	add	sp, sp, #12
   1bf14:	pop	{r4, r5, pc}
   1bf18:	mov	r0, r4
   1bf1c:	bl	115c8 <fileno@plt>
   1bf20:	mov	r3, #1
   1bf24:	str	r3, [sp]
   1bf28:	mov	r2, #0
   1bf2c:	mov	r3, #0
   1bf30:	bl	1146c <lseek64@plt>
   1bf34:	mvn	r3, #0
   1bf38:	mvn	r2, #0
   1bf3c:	cmp	r1, r3
   1bf40:	cmpeq	r0, r2
   1bf44:	bne	1bee0 <__assert_fail@plt+0xa7bc>
   1bf48:	mov	r0, r4
   1bf4c:	add	sp, sp, #12
   1bf50:	pop	{r4, r5, lr}
   1bf54:	b	115ec <fclose@plt>
   1bf58:	push	{r4, lr}
   1bf5c:	subs	r4, r0, #0
   1bf60:	sub	sp, sp, #8
   1bf64:	beq	1bf80 <__assert_fail@plt+0xa85c>
   1bf68:	bl	114fc <__freading@plt>
   1bf6c:	cmp	r0, #0
   1bf70:	beq	1bf80 <__assert_fail@plt+0xa85c>
   1bf74:	ldr	r3, [r4]
   1bf78:	tst	r3, #256	; 0x100
   1bf7c:	bne	1bf90 <__assert_fail@plt+0xa86c>
   1bf80:	mov	r0, r4
   1bf84:	add	sp, sp, #8
   1bf88:	pop	{r4, lr}
   1bf8c:	b	11364 <fflush@plt>
   1bf90:	mov	r3, #1
   1bf94:	str	r3, [sp]
   1bf98:	mov	r2, #0
   1bf9c:	mov	r3, #0
   1bfa0:	mov	r0, r4
   1bfa4:	bl	1bfb8 <__assert_fail@plt+0xa894>
   1bfa8:	mov	r0, r4
   1bfac:	add	sp, sp, #8
   1bfb0:	pop	{r4, lr}
   1bfb4:	b	11364 <fflush@plt>
   1bfb8:	push	{r4, r5, r6, r7, r8, lr}
   1bfbc:	sub	sp, sp, #8
   1bfc0:	ldmib	r0, {ip, lr}
   1bfc4:	mov	r4, r0
   1bfc8:	ldr	r5, [sp, #32]
   1bfcc:	cmp	lr, ip
   1bfd0:	beq	1bfe8 <__assert_fail@plt+0xa8c4>
   1bfd4:	str	r5, [sp, #32]
   1bfd8:	mov	r0, r4
   1bfdc:	add	sp, sp, #8
   1bfe0:	pop	{r4, r5, r6, r7, r8, lr}
   1bfe4:	b	115f8 <fseeko64@plt>
   1bfe8:	ldr	lr, [r0, #20]
   1bfec:	ldr	ip, [r0, #16]
   1bff0:	cmp	lr, ip
   1bff4:	bne	1bfd4 <__assert_fail@plt+0xa8b0>
   1bff8:	ldr	r8, [r0, #36]	; 0x24
   1bffc:	cmp	r8, #0
   1c000:	bne	1bfd4 <__assert_fail@plt+0xa8b0>
   1c004:	mov	r6, r2
   1c008:	mov	r7, r3
   1c00c:	bl	115c8 <fileno@plt>
   1c010:	mov	r2, r6
   1c014:	mov	r3, r7
   1c018:	str	r5, [sp]
   1c01c:	bl	1146c <lseek64@plt>
   1c020:	mvn	r3, #0
   1c024:	mvn	r2, #0
   1c028:	cmp	r1, r3
   1c02c:	cmpeq	r0, r2
   1c030:	beq	1c050 <__assert_fail@plt+0xa92c>
   1c034:	ldr	r3, [r4]
   1c038:	strd	r0, [r4, #80]	; 0x50
   1c03c:	mov	r0, r8
   1c040:	bic	r3, r3, #16
   1c044:	str	r3, [r4]
   1c048:	add	sp, sp, #8
   1c04c:	pop	{r4, r5, r6, r7, r8, pc}
   1c050:	mvn	r0, #0
   1c054:	b	1c048 <__assert_fail@plt+0xa924>
   1c058:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c05c:	mov	r9, r2
   1c060:	ldr	r2, [pc, #3592]	; 1ce70 <__assert_fail@plt+0xb74c>
   1c064:	add	fp, sp, #32
   1c068:	sub	sp, sp, #540	; 0x21c
   1c06c:	ldr	ip, [r2]
   1c070:	str	r0, [fp, #-504]	; 0xfffffe08
   1c074:	str	r1, [fp, #-532]	; 0xfffffdec
   1c078:	mov	r0, r9
   1c07c:	sub	r2, fp, #484	; 0x1e4
   1c080:	sub	r1, fp, #364	; 0x16c
   1c084:	mov	r4, r3
   1c088:	str	ip, [fp, #-40]	; 0xffffffd8
   1c08c:	bl	1d100 <__assert_fail@plt+0xb9dc>
   1c090:	cmp	r0, #0
   1c094:	blt	1c66c <__assert_fail@plt+0xaf48>
   1c098:	sub	r1, fp, #484	; 0x1e4
   1c09c:	mov	r0, r4
   1c0a0:	bl	1cfcc <__assert_fail@plt+0xb8a8>
   1c0a4:	cmp	r0, #0
   1c0a8:	blt	1cc28 <__assert_fail@plt+0xb504>
   1c0ac:	ldr	r2, [fp, #-356]	; 0xfffffe9c
   1c0b0:	ldr	r3, [fp, #-352]	; 0xfffffea0
   1c0b4:	adds	r2, r2, #7
   1c0b8:	mvncs	r2, #0
   1c0bc:	adds	r3, r3, r2
   1c0c0:	bcs	1c660 <__assert_fail@plt+0xaf3c>
   1c0c4:	mov	r0, #6
   1c0c8:	adds	r0, r3, r0
   1c0cc:	bcs	1c660 <__assert_fail@plt+0xaf3c>
   1c0d0:	cmp	r0, #4000	; 0xfa0
   1c0d4:	bcc	1c304 <__assert_fail@plt+0xabe0>
   1c0d8:	cmn	r0, #1
   1c0dc:	beq	1c660 <__assert_fail@plt+0xaf3c>
   1c0e0:	bl	114e4 <malloc@plt>
   1c0e4:	subs	r3, r0, #0
   1c0e8:	str	r3, [fp, #-516]	; 0xfffffdfc
   1c0ec:	beq	1c660 <__assert_fail@plt+0xaf3c>
   1c0f0:	str	r3, [fp, #-536]	; 0xfffffde8
   1c0f4:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1c0f8:	ldr	sl, [fp, #-360]	; 0xfffffe98
   1c0fc:	cmp	r3, #0
   1c100:	ldr	r5, [fp, #-504]	; 0xfffffe08
   1c104:	ldrne	r3, [fp, #-532]	; 0xfffffdec
   1c108:	ldreq	r6, [fp, #-504]	; 0xfffffe08
   1c10c:	mov	r4, #0
   1c110:	ldrne	r6, [r3]
   1c114:	mov	r3, r5
   1c118:	ldr	r5, [sl]
   1c11c:	str	r4, [fp, #-528]	; 0xfffffdf0
   1c120:	cmp	r5, r9
   1c124:	beq	1c57c <__assert_fail@plt+0xae58>
   1c128:	sub	r5, r5, r9
   1c12c:	adds	r2, r4, r5
   1c130:	mov	r7, r2
   1c134:	bcs	1c584 <__assert_fail@plt+0xae60>
   1c138:	cmp	r6, r2
   1c13c:	bcs	1c1b0 <__assert_fail@plt+0xaa8c>
   1c140:	cmp	r6, #0
   1c144:	bne	1c674 <__assert_fail@plt+0xaf50>
   1c148:	cmp	r2, #12
   1c14c:	movls	r6, #12
   1c150:	bhi	1c684 <__assert_fail@plt+0xaf60>
   1c154:	ldr	r2, [fp, #-504]	; 0xfffffe08
   1c158:	cmp	r3, r2
   1c15c:	cmpne	r3, #0
   1c160:	sub	r8, r3, r2
   1c164:	clz	r8, r8
   1c168:	lsr	r8, r8, #5
   1c16c:	bne	1c618 <__assert_fail@plt+0xaef4>
   1c170:	mov	r0, r6
   1c174:	str	r3, [fp, #-508]	; 0xfffffe04
   1c178:	bl	114e4 <malloc@plt>
   1c17c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1c180:	subs	ip, r0, #0
   1c184:	beq	1ca3c <__assert_fail@plt+0xb318>
   1c188:	cmp	r4, #0
   1c18c:	moveq	r8, #0
   1c190:	cmp	r8, #0
   1c194:	moveq	r3, ip
   1c198:	beq	1c1b0 <__assert_fail@plt+0xaa8c>
   1c19c:	mov	r1, r3
   1c1a0:	mov	r2, r4
   1c1a4:	str	ip, [fp, #-508]	; 0xfffffe04
   1c1a8:	bl	113a0 <memcpy@plt>
   1c1ac:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1c1b0:	add	r0, r3, r4
   1c1b4:	mov	r2, r5
   1c1b8:	mov	r1, r9
   1c1bc:	str	r3, [fp, #-508]	; 0xfffffe04
   1c1c0:	bl	113a0 <memcpy@plt>
   1c1c4:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1c1c8:	ldr	r2, [fp, #-364]	; 0xfffffe94
   1c1cc:	ldr	r1, [fp, #-528]	; 0xfffffdf0
   1c1d0:	cmp	r2, r1
   1c1d4:	beq	1cd10 <__assert_fail@plt+0xb5ec>
   1c1d8:	ldrb	r1, [sl, #36]	; 0x24
   1c1dc:	ldr	r2, [sl, #40]	; 0x28
   1c1e0:	cmp	r1, #37	; 0x25
   1c1e4:	beq	1c4c4 <__assert_fail@plt+0xada0>
   1c1e8:	cmn	r2, #1
   1c1ec:	beq	1ce6c <__assert_fail@plt+0xb748>
   1c1f0:	ldr	r9, [fp, #-480]	; 0xfffffe20
   1c1f4:	cmp	r1, #110	; 0x6e
   1c1f8:	add	r1, r9, r2, lsl #4
   1c1fc:	ldr	r5, [r9, r2, lsl #4]
   1c200:	beq	1c63c <__assert_fail@plt+0xaf18>
   1c204:	ldr	r2, [sl, #8]
   1c208:	ldr	r0, [fp, #-516]	; 0xfffffdfc
   1c20c:	tst	r2, #1
   1c210:	mov	r1, #37	; 0x25
   1c214:	strb	r1, [r0]
   1c218:	ldrne	r0, [fp, #-516]	; 0xfffffdfc
   1c21c:	movne	r1, #39	; 0x27
   1c220:	addne	r4, r0, #2
   1c224:	strbne	r1, [r0, #1]
   1c228:	addeq	r4, r0, #1
   1c22c:	tst	r2, #2
   1c230:	movne	r1, #45	; 0x2d
   1c234:	strbne	r1, [r4], #1
   1c238:	tst	r2, #4
   1c23c:	movne	r1, #43	; 0x2b
   1c240:	strbne	r1, [r4], #1
   1c244:	tst	r2, #8
   1c248:	movne	r1, #32
   1c24c:	strbne	r1, [r4], #1
   1c250:	tst	r2, #16
   1c254:	movne	r1, #35	; 0x23
   1c258:	strbne	r1, [r4], #1
   1c25c:	tst	r2, #64	; 0x40
   1c260:	movne	r1, #73	; 0x49
   1c264:	strbne	r1, [r4], #1
   1c268:	tst	r2, #32
   1c26c:	movne	r2, #48	; 0x30
   1c270:	strbne	r2, [r4], #1
   1c274:	ldr	r1, [sl, #12]
   1c278:	ldr	r8, [sl, #16]
   1c27c:	cmp	r1, r8
   1c280:	beq	1c2a0 <__assert_fail@plt+0xab7c>
   1c284:	sub	r8, r8, r1
   1c288:	mov	r0, r4
   1c28c:	mov	r2, r8
   1c290:	str	r3, [fp, #-508]	; 0xfffffe04
   1c294:	bl	113a0 <memcpy@plt>
   1c298:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1c29c:	add	r4, r4, r8
   1c2a0:	ldr	r1, [sl, #24]
   1c2a4:	ldr	r8, [sl, #28]
   1c2a8:	cmp	r1, r8
   1c2ac:	beq	1c2cc <__assert_fail@plt+0xaba8>
   1c2b0:	sub	r8, r8, r1
   1c2b4:	mov	r0, r4
   1c2b8:	mov	r2, r8
   1c2bc:	str	r3, [fp, #-508]	; 0xfffffe04
   1c2c0:	bl	113a0 <memcpy@plt>
   1c2c4:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1c2c8:	add	r4, r4, r8
   1c2cc:	sub	r2, r5, #7
   1c2d0:	cmp	r2, #9
   1c2d4:	ldrls	pc, [pc, r2, lsl #2]
   1c2d8:	b	1c334 <__assert_fail@plt+0xac10>
   1c2dc:	andeq	ip, r1, ip, lsr #6
   1c2e0:	andeq	ip, r1, ip, lsr #6
   1c2e4:	andeq	ip, r1, r4, lsr #6
   1c2e8:	andeq	ip, r1, r4, lsr #6
   1c2ec:	andeq	ip, r1, r4, lsr r3
   1c2f0:	muleq	r1, r4, r6
   1c2f4:	andeq	ip, r1, r4, lsr r3
   1c2f8:	andeq	ip, r1, ip, lsr #6
   1c2fc:	andeq	ip, r1, r4, lsr r3
   1c300:	andeq	ip, r1, ip, lsr #6
   1c304:	add	r3, r3, #13
   1c308:	bic	r3, r3, #7
   1c30c:	sub	sp, sp, r3
   1c310:	add	r3, sp, #32
   1c314:	str	r3, [fp, #-516]	; 0xfffffdfc
   1c318:	mov	r3, #0
   1c31c:	str	r3, [fp, #-536]	; 0xfffffde8
   1c320:	b	1c0f4 <__assert_fail@plt+0xa9d0>
   1c324:	mov	r2, #108	; 0x6c
   1c328:	strb	r2, [r4], #1
   1c32c:	mov	r2, #108	; 0x6c
   1c330:	strb	r2, [r4], #1
   1c334:	ldrb	r2, [sl, #36]	; 0x24
   1c338:	mov	r1, #0
   1c33c:	strb	r1, [r4, #1]
   1c340:	strb	r2, [r4]
   1c344:	ldr	r2, [sl, #20]
   1c348:	cmn	r2, #1
   1c34c:	beq	1caec <__assert_fail@plt+0xb3c8>
   1c350:	ldr	r1, [r9, r2, lsl #4]
   1c354:	add	r2, r9, r2, lsl #4
   1c358:	cmp	r1, #5
   1c35c:	bne	1ce6c <__assert_fail@plt+0xb748>
   1c360:	ldr	r2, [r2, #8]
   1c364:	mov	r8, #1
   1c368:	str	r2, [fp, #-492]	; 0xfffffe14
   1c36c:	ldr	r2, [sl, #32]
   1c370:	cmn	r2, #1
   1c374:	beq	1c39c <__assert_fail@plt+0xac78>
   1c378:	ldr	r1, [r9, r2, lsl #4]
   1c37c:	add	r9, r9, r2, lsl #4
   1c380:	cmp	r1, #5
   1c384:	bne	1ce6c <__assert_fail@plt+0xb748>
   1c388:	sub	r2, fp, #36	; 0x24
   1c38c:	add	r2, r2, r8, lsl #2
   1c390:	ldr	r1, [r9, #8]
   1c394:	add	r8, r8, #1
   1c398:	str	r1, [r2, #-456]	; 0xfffffe38
   1c39c:	mov	r2, #2
   1c3a0:	adds	r2, r7, r2
   1c3a4:	str	r2, [fp, #-524]	; 0xfffffdf4
   1c3a8:	bcs	1cb24 <__assert_fail@plt+0xb400>
   1c3ac:	cmp	r6, r2
   1c3b0:	bcs	1cb2c <__assert_fail@plt+0xb408>
   1c3b4:	cmp	r6, #0
   1c3b8:	bne	1c9e8 <__assert_fail@plt+0xb2c4>
   1c3bc:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1c3c0:	cmp	r2, #12
   1c3c4:	movls	r6, #12
   1c3c8:	bhi	1c9fc <__assert_fail@plt+0xb2d8>
   1c3cc:	ldr	r1, [fp, #-504]	; 0xfffffe08
   1c3d0:	sub	r2, r3, r1
   1c3d4:	cmp	r3, r1
   1c3d8:	cmpne	r3, #0
   1c3dc:	clz	r2, r2
   1c3e0:	lsr	r2, r2, #5
   1c3e4:	str	r2, [fp, #-508]	; 0xfffffe04
   1c3e8:	bne	1caf4 <__assert_fail@plt+0xb3d0>
   1c3ec:	mov	r0, r6
   1c3f0:	str	r3, [fp, #-512]	; 0xfffffe00
   1c3f4:	bl	114e4 <malloc@plt>
   1c3f8:	ldr	r3, [fp, #-512]	; 0xfffffe00
   1c3fc:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1c400:	subs	r9, r0, #0
   1c404:	beq	1ca3c <__assert_fail@plt+0xb318>
   1c408:	cmp	r7, #0
   1c40c:	moveq	r2, #0
   1c410:	cmp	r2, #0
   1c414:	beq	1c424 <__assert_fail@plt+0xad00>
   1c418:	mov	r1, r3
   1c41c:	mov	r2, r7
   1c420:	bl	113a0 <memcpy@plt>
   1c424:	mov	r3, #0
   1c428:	strb	r3, [r9, r7]
   1c42c:	bl	11580 <__errno_location@plt>
   1c430:	sub	r3, r5, #1
   1c434:	str	r3, [fp, #-520]	; 0xfffffdf8
   1c438:	ldr	r3, [r0]
   1c43c:	str	r0, [fp, #-508]	; 0xfffffe04
   1c440:	str	r3, [fp, #-540]	; 0xfffffde4
   1c444:	sub	r3, r6, r7
   1c448:	str	r3, [fp, #-512]	; 0xfffffe00
   1c44c:	ldr	r3, [fp, #-512]	; 0xfffffe00
   1c450:	mvn	r2, #0
   1c454:	cmp	r3, #0
   1c458:	str	r2, [fp, #-496]	; 0xfffffe10
   1c45c:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1c460:	movge	r5, r3
   1c464:	ldr	r3, [fp, #-520]	; 0xfffffdf8
   1c468:	mov	r1, #0
   1c46c:	str	r1, [r2]
   1c470:	mvnlt	r5, #-2147483648	; 0x80000000
   1c474:	cmp	r3, #16
   1c478:	ldrls	pc, [pc, r3, lsl #2]
   1c47c:	b	1ce6c <__assert_fail@plt+0xb748>
   1c480:	andeq	ip, r1, r8, asr #19
   1c484:	andeq	ip, r1, r8, lsr #19
   1c488:	andeq	ip, r1, ip, asr #18
   1c48c:	andeq	ip, r1, r0, lsl #18
   1c490:	andeq	ip, r1, r0, lsr #13
   1c494:	andeq	ip, r1, r0, lsr #13
   1c498:	andeq	ip, r1, r0, lsr #13
   1c49c:	andeq	ip, r1, r0, lsr #13
   1c4a0:	andeq	ip, r1, r4, asr #15
   1c4a4:	andeq	ip, r1, r4, asr #15
   1c4a8:			; <UNDEFINED> instruction: 0x0001c8b4
   1c4ac:			; <UNDEFINED> instruction: 0x0001c8b4
   1c4b0:	andeq	ip, r1, r0, lsr #13
   1c4b4:	andeq	ip, r1, r0, lsr #13
   1c4b8:	andeq	ip, r1, r0, lsr #13
   1c4bc:	andeq	ip, r1, r0, lsr #13
   1c4c0:	andeq	ip, r1, r0, lsr #13
   1c4c4:	cmn	r2, #1
   1c4c8:	bne	1ce6c <__assert_fail@plt+0xb748>
   1c4cc:	mov	r2, #1
   1c4d0:	adds	r2, r7, r2
   1c4d4:	mov	r4, r2
   1c4d8:	bcs	1cb14 <__assert_fail@plt+0xb3f0>
   1c4dc:	cmp	r6, r2
   1c4e0:	bcs	1c554 <__assert_fail@plt+0xae30>
   1c4e4:	cmp	r6, #0
   1c4e8:	bne	1ca38 <__assert_fail@plt+0xb314>
   1c4ec:	cmp	r2, #12
   1c4f0:	movls	r6, #12
   1c4f4:	bhi	1cc70 <__assert_fail@plt+0xb54c>
   1c4f8:	ldr	r2, [fp, #-504]	; 0xfffffe08
   1c4fc:	cmp	r3, r2
   1c500:	cmpne	r3, #0
   1c504:	sub	r5, r3, r2
   1c508:	clz	r5, r5
   1c50c:	lsr	r5, r5, #5
   1c510:	bne	1cc04 <__assert_fail@plt+0xb4e0>
   1c514:	mov	r0, r6
   1c518:	str	r3, [fp, #-508]	; 0xfffffe04
   1c51c:	bl	114e4 <malloc@plt>
   1c520:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1c524:	subs	ip, r0, #0
   1c528:	beq	1ca3c <__assert_fail@plt+0xb318>
   1c52c:	cmp	r7, #0
   1c530:	moveq	r5, #0
   1c534:	cmp	r5, #0
   1c538:	moveq	r3, ip
   1c53c:	beq	1c554 <__assert_fail@plt+0xae30>
   1c540:	mov	r1, r3
   1c544:	mov	r2, r7
   1c548:	str	ip, [fp, #-508]	; 0xfffffe04
   1c54c:	bl	113a0 <memcpy@plt>
   1c550:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1c554:	mov	r2, #37	; 0x25
   1c558:	strb	r2, [r3, r7]
   1c55c:	ldr	r9, [sl, #4]
   1c560:	add	sl, sl, #44	; 0x2c
   1c564:	ldr	r2, [fp, #-528]	; 0xfffffdf0
   1c568:	ldr	r5, [sl]
   1c56c:	add	r2, r2, #1
   1c570:	cmp	r5, r9
   1c574:	str	r2, [fp, #-528]	; 0xfffffdf0
   1c578:	bne	1c128 <__assert_fail@plt+0xaa04>
   1c57c:	mov	r7, r4
   1c580:	b	1c1c8 <__assert_fail@plt+0xaaa4>
   1c584:	cmn	r6, #1
   1c588:	beq	1cbfc <__assert_fail@plt+0xb4d8>
   1c58c:	mov	r5, r3
   1c590:	bl	11580 <__errno_location@plt>
   1c594:	mov	r9, r5
   1c598:	str	r0, [fp, #-508]	; 0xfffffe04
   1c59c:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1c5a0:	cmp	r9, r3
   1c5a4:	cmpne	r9, #0
   1c5a8:	bne	1ca58 <__assert_fail@plt+0xb334>
   1c5ac:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1c5b0:	cmp	r3, #0
   1c5b4:	beq	1c5c0 <__assert_fail@plt+0xae9c>
   1c5b8:	mov	r0, r3
   1c5bc:	bl	11388 <free@plt>
   1c5c0:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1c5c4:	sub	r3, fp, #348	; 0x15c
   1c5c8:	cmp	r0, r3
   1c5cc:	beq	1c5d4 <__assert_fail@plt+0xaeb0>
   1c5d0:	bl	11388 <free@plt>
   1c5d4:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1c5d8:	sub	r3, fp, #476	; 0x1dc
   1c5dc:	cmp	r0, r3
   1c5e0:	beq	1c5e8 <__assert_fail@plt+0xaec4>
   1c5e4:	bl	11388 <free@plt>
   1c5e8:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1c5ec:	mov	r5, #0
   1c5f0:	mov	r3, #12
   1c5f4:	str	r3, [r2]
   1c5f8:	ldr	r3, [pc, #2160]	; 1ce70 <__assert_fail@plt+0xb74c>
   1c5fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c600:	mov	r0, r5
   1c604:	ldr	r3, [r3]
   1c608:	cmp	r2, r3
   1c60c:	bne	1ce5c <__assert_fail@plt+0xb738>
   1c610:	sub	sp, fp, #32
   1c614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c618:	mov	r0, r3
   1c61c:	mov	r1, r6
   1c620:	str	r3, [fp, #-508]	; 0xfffffe04
   1c624:	bl	11400 <realloc@plt>
   1c628:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1c62c:	cmp	r0, #0
   1c630:	beq	1cdf4 <__assert_fail@plt+0xb6d0>
   1c634:	mov	r3, r0
   1c638:	b	1c1b0 <__assert_fail@plt+0xaa8c>
   1c63c:	sub	r5, r5, #18
   1c640:	cmp	r5, #4
   1c644:	ldrls	pc, [pc, r5, lsl #2]
   1c648:	b	1ce6c <__assert_fail@plt+0xb748>
   1c64c:	andeq	ip, r1, ip, lsl #21
   1c650:	andeq	ip, r1, ip, ror sl
   1c654:	andeq	ip, r1, r8, lsr #20
   1c658:	andeq	ip, r1, r8, lsr #20
   1c65c:	andeq	ip, r1, r4, ror #20
   1c660:	bl	11580 <__errno_location@plt>
   1c664:	str	r0, [fp, #-508]	; 0xfffffe04
   1c668:	b	1c5c0 <__assert_fail@plt+0xae9c>
   1c66c:	mov	r5, #0
   1c670:	b	1c5f8 <__assert_fail@plt+0xaed4>
   1c674:	blt	1ca3c <__assert_fail@plt+0xb318>
   1c678:	lsl	r6, r6, #1
   1c67c:	cmp	r6, r2
   1c680:	bcs	1c154 <__assert_fail@plt+0xaa30>
   1c684:	cmn	r2, #1
   1c688:	beq	1c58c <__assert_fail@plt+0xae68>
   1c68c:	mov	r6, r2
   1c690:	b	1c154 <__assert_fail@plt+0xaa30>
   1c694:	mov	r2, #76	; 0x4c
   1c698:	strb	r2, [r4], #1
   1c69c:	b	1c334 <__assert_fail@plt+0xac10>
   1c6a0:	ldr	r2, [sl, #40]	; 0x28
   1c6a4:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1c6a8:	cmp	r8, #1
   1c6ac:	add	r3, r3, r2, lsl #4
   1c6b0:	add	r0, r9, r7
   1c6b4:	ldr	r3, [r3, #8]
   1c6b8:	beq	1c91c <__assert_fail@plt+0xb1f8>
   1c6bc:	cmp	r8, #2
   1c6c0:	beq	1c970 <__assert_fail@plt+0xb24c>
   1c6c4:	str	r3, [sp, #4]
   1c6c8:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1c6cc:	sub	r2, fp, #496	; 0x1f0
   1c6d0:	str	r2, [sp, #8]
   1c6d4:	str	r3, [sp]
   1c6d8:	mov	r2, #1
   1c6dc:	mvn	r3, #0
   1c6e0:	mov	r1, r5
   1c6e4:	bl	1170c <__snprintf_chk@plt>
   1c6e8:	ldr	r2, [fp, #-496]	; 0xfffffe10
   1c6ec:	cmp	r2, #0
   1c6f0:	blt	1c818 <__assert_fail@plt+0xb0f4>
   1c6f4:	cmp	r2, r5
   1c6f8:	mov	r3, r2
   1c6fc:	bcs	1c710 <__assert_fail@plt+0xafec>
   1c700:	add	r1, r9, r2
   1c704:	ldrb	r1, [r1, r7]
   1c708:	cmp	r1, #0
   1c70c:	bne	1ce6c <__assert_fail@plt+0xb748>
   1c710:	cmp	r2, r0
   1c714:	bge	1c720 <__assert_fail@plt+0xaffc>
   1c718:	mov	r3, r0
   1c71c:	str	r0, [fp, #-496]	; 0xfffffe10
   1c720:	add	r2, r3, #1
   1c724:	cmp	r2, r5
   1c728:	bcc	1cc80 <__assert_fail@plt+0xb55c>
   1c72c:	cmn	r5, #-2147483647	; 0x80000001
   1c730:	beq	1cc98 <__assert_fail@plt+0xb574>
   1c734:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1c738:	add	r3, r3, r2
   1c73c:	cmp	r7, r3
   1c740:	mvnhi	r3, #0
   1c744:	cmp	r6, #0
   1c748:	blt	1ca9c <__assert_fail@plt+0xb378>
   1c74c:	lsl	r2, r6, #1
   1c750:	cmp	r2, r3
   1c754:	movcs	r3, r2
   1c758:	cmp	r6, r3
   1c75c:	bcs	1c44c <__assert_fail@plt+0xad28>
   1c760:	cmp	r2, r3
   1c764:	bcc	1caa8 <__assert_fail@plt+0xb384>
   1c768:	mov	r6, r2
   1c76c:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1c770:	cmp	r9, r3
   1c774:	cmpne	r9, #0
   1c778:	sub	r5, r9, r3
   1c77c:	clz	r5, r5
   1c780:	lsr	r5, r5, #5
   1c784:	bne	1cab8 <__assert_fail@plt+0xb394>
   1c788:	mov	r0, r6
   1c78c:	bl	114e4 <malloc@plt>
   1c790:	subs	r3, r0, #0
   1c794:	beq	1c59c <__assert_fail@plt+0xae78>
   1c798:	cmp	r7, #0
   1c79c:	moveq	r5, #0
   1c7a0:	cmp	r5, #0
   1c7a4:	beq	1cadc <__assert_fail@plt+0xb3b8>
   1c7a8:	mov	r1, r9
   1c7ac:	mov	r2, r7
   1c7b0:	mov	r9, r3
   1c7b4:	bl	113a0 <memcpy@plt>
   1c7b8:	sub	r3, r6, r7
   1c7bc:	str	r3, [fp, #-512]	; 0xfffffe00
   1c7c0:	b	1c44c <__assert_fail@plt+0xad28>
   1c7c4:	ldr	r2, [sl, #40]	; 0x28
   1c7c8:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1c7cc:	cmp	r8, #1
   1c7d0:	add	r3, r3, r2, lsl #4
   1c7d4:	add	r0, r9, r7
   1c7d8:	ldrd	r2, [r3, #8]
   1c7dc:	beq	1cb68 <__assert_fail@plt+0xb444>
   1c7e0:	cmp	r8, #2
   1c7e4:	beq	1cb34 <__assert_fail@plt+0xb410>
   1c7e8:	strd	r2, [sp, #8]
   1c7ec:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1c7f0:	sub	r1, fp, #496	; 0x1f0
   1c7f4:	str	r1, [sp, #16]
   1c7f8:	str	r3, [sp]
   1c7fc:	mov	r2, #1
   1c800:	mvn	r3, #0
   1c804:	mov	r1, r5
   1c808:	bl	1170c <__snprintf_chk@plt>
   1c80c:	ldr	r2, [fp, #-496]	; 0xfffffe10
   1c810:	cmp	r2, #0
   1c814:	bge	1c6f4 <__assert_fail@plt+0xafd0>
   1c818:	ldrb	r3, [r4, #1]
   1c81c:	cmp	r3, #0
   1c820:	movne	r3, #0
   1c824:	strbne	r3, [r4, #1]
   1c828:	bne	1c44c <__assert_fail@plt+0xad28>
   1c82c:	cmp	r0, #0
   1c830:	bge	1c718 <__assert_fail@plt+0xaff4>
   1c834:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1c838:	ldr	r4, [r3]
   1c83c:	cmp	r4, #0
   1c840:	bne	1c858 <__assert_fail@plt+0xb134>
   1c844:	ldrb	r3, [sl, #36]	; 0x24
   1c848:	and	r3, r3, #239	; 0xef
   1c84c:	cmp	r3, #99	; 0x63
   1c850:	moveq	r4, #84	; 0x54
   1c854:	movne	r4, #22
   1c858:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1c85c:	cmp	r9, r3
   1c860:	cmpne	r9, #0
   1c864:	bne	1ccf8 <__assert_fail@plt+0xb5d4>
   1c868:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1c86c:	cmp	r3, #0
   1c870:	beq	1c87c <__assert_fail@plt+0xb158>
   1c874:	mov	r0, r3
   1c878:	bl	11388 <free@plt>
   1c87c:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1c880:	sub	r3, fp, #348	; 0x15c
   1c884:	cmp	r0, r3
   1c888:	beq	1c890 <__assert_fail@plt+0xb16c>
   1c88c:	bl	11388 <free@plt>
   1c890:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1c894:	sub	r3, fp, #476	; 0x1dc
   1c898:	cmp	r0, r3
   1c89c:	beq	1c8a4 <__assert_fail@plt+0xb180>
   1c8a0:	bl	11388 <free@plt>
   1c8a4:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1c8a8:	mov	r5, #0
   1c8ac:	str	r4, [r3]
   1c8b0:	b	1c5f8 <__assert_fail@plt+0xaed4>
   1c8b4:	ldr	r2, [sl, #40]	; 0x28
   1c8b8:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1c8bc:	cmp	r8, #1
   1c8c0:	add	r3, r3, r2, lsl #4
   1c8c4:	add	r0, r9, r7
   1c8c8:	ldrd	r2, [r3, #8]
   1c8cc:	beq	1cbcc <__assert_fail@plt+0xb4a8>
   1c8d0:	cmp	r8, #2
   1c8d4:	beq	1cb98 <__assert_fail@plt+0xb474>
   1c8d8:	strd	r2, [sp, #8]
   1c8dc:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1c8e0:	sub	r1, fp, #496	; 0x1f0
   1c8e4:	str	r1, [sp, #16]
   1c8e8:	str	r3, [sp]
   1c8ec:	mov	r2, #1
   1c8f0:	mvn	r3, #0
   1c8f4:	mov	r1, r5
   1c8f8:	bl	1170c <__snprintf_chk@plt>
   1c8fc:	b	1c6e8 <__assert_fail@plt+0xafc4>
   1c900:	ldr	r2, [sl, #40]	; 0x28
   1c904:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1c908:	cmp	r8, #1
   1c90c:	add	r3, r3, r2, lsl #4
   1c910:	add	r0, r9, r7
   1c914:	ldrh	r3, [r3, #8]
   1c918:	bne	1c6bc <__assert_fail@plt+0xaf98>
   1c91c:	ldr	r2, [fp, #-492]	; 0xfffffe14
   1c920:	str	r3, [sp, #8]
   1c924:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1c928:	sub	r1, fp, #496	; 0x1f0
   1c92c:	str	r1, [sp, #12]
   1c930:	str	r3, [sp]
   1c934:	str	r2, [sp, #4]
   1c938:	mvn	r3, #0
   1c93c:	mov	r2, r8
   1c940:	mov	r1, r5
   1c944:	bl	1170c <__snprintf_chk@plt>
   1c948:	b	1c6e8 <__assert_fail@plt+0xafc4>
   1c94c:	ldr	r2, [sl, #40]	; 0x28
   1c950:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1c954:	cmp	r8, #1
   1c958:	add	r3, r3, r2, lsl #4
   1c95c:	add	r0, r9, r7
   1c960:	ldrsh	r3, [r3, #8]
   1c964:	beq	1c91c <__assert_fail@plt+0xb1f8>
   1c968:	cmp	r8, #2
   1c96c:	bne	1c6c4 <__assert_fail@plt+0xafa0>
   1c970:	ldr	r1, [fp, #-488]	; 0xfffffe18
   1c974:	ldr	r2, [fp, #-492]	; 0xfffffe14
   1c978:	str	r3, [sp, #12]
   1c97c:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1c980:	sub	ip, fp, #496	; 0x1f0
   1c984:	str	r3, [sp]
   1c988:	str	r1, [sp, #8]
   1c98c:	str	r2, [sp, #4]
   1c990:	str	ip, [sp, #16]
   1c994:	mvn	r3, #0
   1c998:	mov	r2, #1
   1c99c:	mov	r1, r5
   1c9a0:	bl	1170c <__snprintf_chk@plt>
   1c9a4:	b	1c6e8 <__assert_fail@plt+0xafc4>
   1c9a8:	ldr	r2, [sl, #40]	; 0x28
   1c9ac:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1c9b0:	cmp	r8, #1
   1c9b4:	add	r3, r3, r2, lsl #4
   1c9b8:	add	r0, r9, r7
   1c9bc:	ldrb	r3, [r3, #8]
   1c9c0:	bne	1c6bc <__assert_fail@plt+0xaf98>
   1c9c4:	b	1c91c <__assert_fail@plt+0xb1f8>
   1c9c8:	ldr	r2, [sl, #40]	; 0x28
   1c9cc:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1c9d0:	cmp	r8, #1
   1c9d4:	add	r3, r3, r2, lsl #4
   1c9d8:	add	r0, r9, r7
   1c9dc:	ldrsb	r3, [r3, #8]
   1c9e0:	bne	1c6bc <__assert_fail@plt+0xaf98>
   1c9e4:	b	1c91c <__assert_fail@plt+0xb1f8>
   1c9e8:	blt	1ca3c <__assert_fail@plt+0xb318>
   1c9ec:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1c9f0:	lsl	r6, r6, #1
   1c9f4:	cmp	r6, r2
   1c9f8:	bcs	1c3cc <__assert_fail@plt+0xaca8>
   1c9fc:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1ca00:	mov	r1, #0
   1ca04:	cmn	r2, #1
   1ca08:	movne	r2, #0
   1ca0c:	moveq	r2, #1
   1ca10:	cmp	r1, r1
   1ca14:	movne	r2, #255	; 0xff
   1ca18:	cmp	r2, r1
   1ca1c:	bne	1c58c <__assert_fail@plt+0xae68>
   1ca20:	ldr	r6, [fp, #-524]	; 0xfffffdf4
   1ca24:	b	1c3cc <__assert_fail@plt+0xaca8>
   1ca28:	ldr	r2, [r1, #8]
   1ca2c:	mov	r4, r7
   1ca30:	str	r7, [r2]
   1ca34:	b	1c55c <__assert_fail@plt+0xae38>
   1ca38:	bge	1cc64 <__assert_fail@plt+0xb540>
   1ca3c:	mov	r9, r3
   1ca40:	bl	11580 <__errno_location@plt>
   1ca44:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1ca48:	cmp	r9, r3
   1ca4c:	cmpne	r9, #0
   1ca50:	str	r0, [fp, #-508]	; 0xfffffe04
   1ca54:	beq	1c5ac <__assert_fail@plt+0xae88>
   1ca58:	mov	r0, r9
   1ca5c:	bl	11388 <free@plt>
   1ca60:	b	1c5ac <__assert_fail@plt+0xae88>
   1ca64:	ldr	r2, [r1, #8]
   1ca68:	mov	r1, #0
   1ca6c:	mov	r4, r7
   1ca70:	str	r7, [r2]
   1ca74:	str	r1, [r2, #4]
   1ca78:	b	1c55c <__assert_fail@plt+0xae38>
   1ca7c:	ldr	r2, [r1, #8]
   1ca80:	mov	r4, r7
   1ca84:	strh	r7, [r2]
   1ca88:	b	1c55c <__assert_fail@plt+0xae38>
   1ca8c:	ldr	r2, [r1, #8]
   1ca90:	mov	r4, r7
   1ca94:	strb	r7, [r2]
   1ca98:	b	1c55c <__assert_fail@plt+0xae38>
   1ca9c:	cmn	r6, #1
   1caa0:	beq	1c44c <__assert_fail@plt+0xad28>
   1caa4:	b	1c59c <__assert_fail@plt+0xae78>
   1caa8:	cmn	r3, #1
   1caac:	beq	1c59c <__assert_fail@plt+0xae78>
   1cab0:	mov	r6, r3
   1cab4:	b	1c76c <__assert_fail@plt+0xb048>
   1cab8:	mov	r1, r6
   1cabc:	mov	r0, r9
   1cac0:	bl	11400 <realloc@plt>
   1cac4:	cmp	r0, #0
   1cac8:	beq	1c59c <__assert_fail@plt+0xae78>
   1cacc:	sub	r3, r6, r7
   1cad0:	mov	r9, r0
   1cad4:	str	r3, [fp, #-512]	; 0xfffffe00
   1cad8:	b	1c44c <__assert_fail@plt+0xad28>
   1cadc:	mov	r9, r3
   1cae0:	sub	r3, r6, r7
   1cae4:	str	r3, [fp, #-512]	; 0xfffffe00
   1cae8:	b	1c44c <__assert_fail@plt+0xad28>
   1caec:	mov	r8, #0
   1caf0:	b	1c36c <__assert_fail@plt+0xac48>
   1caf4:	mov	r0, r3
   1caf8:	mov	r1, r6
   1cafc:	str	r3, [fp, #-508]	; 0xfffffe04
   1cb00:	bl	11400 <realloc@plt>
   1cb04:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1cb08:	subs	r9, r0, #0
   1cb0c:	bne	1c424 <__assert_fail@plt+0xad00>
   1cb10:	b	1ca3c <__assert_fail@plt+0xb318>
   1cb14:	cmn	r6, #1
   1cb18:	bne	1c58c <__assert_fail@plt+0xae68>
   1cb1c:	mov	r4, r6
   1cb20:	b	1c554 <__assert_fail@plt+0xae30>
   1cb24:	cmn	r6, #1
   1cb28:	bne	1c58c <__assert_fail@plt+0xae68>
   1cb2c:	mov	r9, r3
   1cb30:	b	1c424 <__assert_fail@plt+0xad00>
   1cb34:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1cb38:	ldr	ip, [fp, #-488]	; 0xfffffe18
   1cb3c:	strd	r2, [sp, #16]
   1cb40:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1cb44:	sub	lr, fp, #496	; 0x1f0
   1cb48:	str	r3, [sp]
   1cb4c:	stmib	sp, {r1, ip}
   1cb50:	str	lr, [sp, #24]
   1cb54:	mvn	r3, #0
   1cb58:	mov	r2, #1
   1cb5c:	mov	r1, r5
   1cb60:	bl	1170c <__snprintf_chk@plt>
   1cb64:	b	1c6e8 <__assert_fail@plt+0xafc4>
   1cb68:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1cb6c:	strd	r2, [sp, #8]
   1cb70:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1cb74:	sub	ip, fp, #496	; 0x1f0
   1cb78:	str	r3, [sp]
   1cb7c:	str	r1, [sp, #4]
   1cb80:	str	ip, [sp, #16]
   1cb84:	mvn	r3, #0
   1cb88:	mov	r2, r8
   1cb8c:	mov	r1, r5
   1cb90:	bl	1170c <__snprintf_chk@plt>
   1cb94:	b	1c6e8 <__assert_fail@plt+0xafc4>
   1cb98:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1cb9c:	ldr	ip, [fp, #-488]	; 0xfffffe18
   1cba0:	strd	r2, [sp, #16]
   1cba4:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1cba8:	sub	lr, fp, #496	; 0x1f0
   1cbac:	str	r3, [sp]
   1cbb0:	stmib	sp, {r1, ip}
   1cbb4:	str	lr, [sp, #24]
   1cbb8:	mvn	r3, #0
   1cbbc:	mov	r2, #1
   1cbc0:	mov	r1, r5
   1cbc4:	bl	1170c <__snprintf_chk@plt>
   1cbc8:	b	1c6e8 <__assert_fail@plt+0xafc4>
   1cbcc:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1cbd0:	strd	r2, [sp, #8]
   1cbd4:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1cbd8:	sub	ip, fp, #496	; 0x1f0
   1cbdc:	str	r3, [sp]
   1cbe0:	str	r1, [sp, #4]
   1cbe4:	str	ip, [sp, #16]
   1cbe8:	mvn	r3, #0
   1cbec:	mov	r2, r8
   1cbf0:	mov	r1, r5
   1cbf4:	bl	1170c <__snprintf_chk@plt>
   1cbf8:	b	1c6e8 <__assert_fail@plt+0xafc4>
   1cbfc:	mov	r7, r6
   1cc00:	b	1c1b0 <__assert_fail@plt+0xaa8c>
   1cc04:	mov	r0, r3
   1cc08:	mov	r1, r6
   1cc0c:	str	r3, [fp, #-508]	; 0xfffffe04
   1cc10:	bl	11400 <realloc@plt>
   1cc14:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1cc18:	cmp	r0, #0
   1cc1c:	beq	1cdf4 <__assert_fail@plt+0xb6d0>
   1cc20:	mov	r3, r0
   1cc24:	b	1c554 <__assert_fail@plt+0xae30>
   1cc28:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1cc2c:	sub	r3, fp, #348	; 0x15c
   1cc30:	cmp	r0, r3
   1cc34:	beq	1cc3c <__assert_fail@plt+0xb518>
   1cc38:	bl	11388 <free@plt>
   1cc3c:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1cc40:	sub	r3, fp, #476	; 0x1dc
   1cc44:	cmp	r0, r3
   1cc48:	beq	1cc50 <__assert_fail@plt+0xb52c>
   1cc4c:	bl	11388 <free@plt>
   1cc50:	bl	11580 <__errno_location@plt>
   1cc54:	mov	r3, #22
   1cc58:	mov	r5, #0
   1cc5c:	str	r3, [r0]
   1cc60:	b	1c5f8 <__assert_fail@plt+0xaed4>
   1cc64:	lsl	r6, r6, #1
   1cc68:	cmp	r6, r2
   1cc6c:	bcs	1c4f8 <__assert_fail@plt+0xadd4>
   1cc70:	cmn	r2, #1
   1cc74:	beq	1c58c <__assert_fail@plt+0xae68>
   1cc78:	mov	r6, r2
   1cc7c:	b	1c4f8 <__assert_fail@plt+0xadd4>
   1cc80:	add	r4, r7, r3
   1cc84:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1cc88:	ldr	r2, [fp, #-540]	; 0xfffffde4
   1cc8c:	str	r2, [r3]
   1cc90:	mov	r3, r9
   1cc94:	b	1c55c <__assert_fail@plt+0xae38>
   1cc98:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1cc9c:	cmp	r9, r3
   1cca0:	cmpne	r9, #0
   1cca4:	bne	1cd04 <__assert_fail@plt+0xb5e0>
   1cca8:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1ccac:	cmp	r3, #0
   1ccb0:	beq	1ccbc <__assert_fail@plt+0xb598>
   1ccb4:	mov	r0, r3
   1ccb8:	bl	11388 <free@plt>
   1ccbc:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1ccc0:	sub	r3, fp, #348	; 0x15c
   1ccc4:	cmp	r0, r3
   1ccc8:	beq	1ccd0 <__assert_fail@plt+0xb5ac>
   1cccc:	bl	11388 <free@plt>
   1ccd0:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1ccd4:	sub	r3, fp, #476	; 0x1dc
   1ccd8:	cmp	r0, r3
   1ccdc:	beq	1cce4 <__assert_fail@plt+0xb5c0>
   1cce0:	bl	11388 <free@plt>
   1cce4:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1cce8:	mov	r3, #75	; 0x4b
   1ccec:	mov	r5, #0
   1ccf0:	str	r3, [r2]
   1ccf4:	b	1c5f8 <__assert_fail@plt+0xaed4>
   1ccf8:	mov	r0, r9
   1ccfc:	bl	11388 <free@plt>
   1cd00:	b	1c868 <__assert_fail@plt+0xb144>
   1cd04:	mov	r0, r9
   1cd08:	bl	11388 <free@plt>
   1cd0c:	b	1cca8 <__assert_fail@plt+0xb584>
   1cd10:	mov	r5, r3
   1cd14:	mov	r3, #1
   1cd18:	adds	r4, r7, r3
   1cd1c:	mov	r8, r7
   1cd20:	bcs	1ce60 <__assert_fail@plt+0xb73c>
   1cd24:	cmp	r6, r4
   1cd28:	bcs	1cd94 <__assert_fail@plt+0xb670>
   1cd2c:	cmp	r6, #0
   1cd30:	bne	1ce3c <__assert_fail@plt+0xb718>
   1cd34:	cmp	r4, #12
   1cd38:	movls	r6, #12
   1cd3c:	bhi	1ce4c <__assert_fail@plt+0xb728>
   1cd40:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1cd44:	cmp	r5, r3
   1cd48:	cmpne	r5, #0
   1cd4c:	sub	r7, r5, r3
   1cd50:	clz	r7, r7
   1cd54:	lsr	r7, r7, #5
   1cd58:	bne	1ce20 <__assert_fail@plt+0xb6fc>
   1cd5c:	mov	r0, r6
   1cd60:	bl	114e4 <malloc@plt>
   1cd64:	subs	r3, r0, #0
   1cd68:	beq	1c590 <__assert_fail@plt+0xae6c>
   1cd6c:	cmp	r8, #0
   1cd70:	movne	r2, r7
   1cd74:	moveq	r2, #0
   1cd78:	cmp	r2, #0
   1cd7c:	moveq	r5, r3
   1cd80:	beq	1cd94 <__assert_fail@plt+0xb670>
   1cd84:	mov	r1, r5
   1cd88:	mov	r2, r8
   1cd8c:	mov	r5, r3
   1cd90:	bl	113a0 <memcpy@plt>
   1cd94:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1cd98:	cmp	r5, r3
   1cd9c:	cmpne	r6, r4
   1cda0:	mov	r3, #0
   1cda4:	strb	r3, [r5, r8]
   1cda8:	bhi	1ce08 <__assert_fail@plt+0xb6e4>
   1cdac:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1cdb0:	cmp	r3, #0
   1cdb4:	beq	1cdc0 <__assert_fail@plt+0xb69c>
   1cdb8:	mov	r0, r3
   1cdbc:	bl	11388 <free@plt>
   1cdc0:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1cdc4:	sub	r3, fp, #348	; 0x15c
   1cdc8:	cmp	r0, r3
   1cdcc:	beq	1cdd4 <__assert_fail@plt+0xb6b0>
   1cdd0:	bl	11388 <free@plt>
   1cdd4:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1cdd8:	sub	r3, fp, #476	; 0x1dc
   1cddc:	cmp	r0, r3
   1cde0:	beq	1cde8 <__assert_fail@plt+0xb6c4>
   1cde4:	bl	11388 <free@plt>
   1cde8:	ldr	r3, [fp, #-532]	; 0xfffffdec
   1cdec:	str	r8, [r3]
   1cdf0:	b	1c5f8 <__assert_fail@plt+0xaed4>
   1cdf4:	mov	r5, r3
   1cdf8:	bl	11580 <__errno_location@plt>
   1cdfc:	mov	r9, r5
   1ce00:	str	r0, [fp, #-508]	; 0xfffffe04
   1ce04:	b	1ca58 <__assert_fail@plt+0xb334>
   1ce08:	mov	r0, r5
   1ce0c:	mov	r1, r4
   1ce10:	bl	11400 <realloc@plt>
   1ce14:	cmp	r0, #0
   1ce18:	movne	r5, r0
   1ce1c:	b	1cdac <__assert_fail@plt+0xb688>
   1ce20:	mov	r1, r6
   1ce24:	mov	r0, r5
   1ce28:	bl	11400 <realloc@plt>
   1ce2c:	cmp	r0, #0
   1ce30:	beq	1cdf8 <__assert_fail@plt+0xb6d4>
   1ce34:	mov	r5, r0
   1ce38:	b	1cd94 <__assert_fail@plt+0xb670>
   1ce3c:	blt	1c590 <__assert_fail@plt+0xae6c>
   1ce40:	lsl	r6, r6, #1
   1ce44:	cmp	r6, r4
   1ce48:	bcs	1cd40 <__assert_fail@plt+0xb61c>
   1ce4c:	cmn	r4, #1
   1ce50:	movne	r6, r4
   1ce54:	bne	1cd40 <__assert_fail@plt+0xb61c>
   1ce58:	b	1c590 <__assert_fail@plt+0xae6c>
   1ce5c:	bl	113f4 <__stack_chk_fail@plt>
   1ce60:	cmn	r6, #1
   1ce64:	beq	1cd94 <__assert_fail@plt+0xb670>
   1ce68:	b	1c590 <__assert_fail@plt+0xae6c>
   1ce6c:	bl	116e8 <abort@plt>
   1ce70:	andeq	pc, r2, r8, lsl #30
   1ce74:	mov	r2, #3
   1ce78:	mov	r1, #0
   1ce7c:	b	1ce80 <__assert_fail@plt+0xb75c>
   1ce80:	push	{r1, r2, r3}
   1ce84:	push	{r4, r5, r6, r7, r8, lr}
   1ce88:	sub	sp, sp, #12
   1ce8c:	ldr	r4, [pc, #300]	; 1cfc0 <__assert_fail@plt+0xb89c>
   1ce90:	ldr	r3, [pc, #300]	; 1cfc4 <__assert_fail@plt+0xb8a0>
   1ce94:	ldr	r1, [sp, #36]	; 0x24
   1ce98:	ldr	r2, [r4]
   1ce9c:	cmp	r1, r3
   1cea0:	add	r3, sp, #40	; 0x28
   1cea4:	str	r2, [sp, #4]
   1cea8:	str	r3, [sp]
   1ceac:	bne	1cf78 <__assert_fail@plt+0xb854>
   1ceb0:	ldr	r6, [pc, #272]	; 1cfc8 <__assert_fail@plt+0xb8a4>
   1ceb4:	add	r3, sp, #44	; 0x2c
   1ceb8:	str	r3, [sp]
   1cebc:	ldr	r3, [r6]
   1cec0:	ldr	r7, [sp, #40]	; 0x28
   1cec4:	cmp	r3, #0
   1cec8:	blt	1cf0c <__assert_fail@plt+0xb7e8>
   1cecc:	mov	r2, r7
   1ced0:	mov	r8, r0
   1ced4:	bl	11610 <fcntl64@plt>
   1ced8:	subs	r5, r0, #0
   1cedc:	blt	1cf88 <__assert_fail@plt+0xb864>
   1cee0:	mov	r3, #1
   1cee4:	str	r3, [r6]
   1cee8:	ldr	r2, [sp, #4]
   1ceec:	ldr	r3, [r4]
   1cef0:	mov	r0, r5
   1cef4:	cmp	r2, r3
   1cef8:	bne	1cfbc <__assert_fail@plt+0xb898>
   1cefc:	add	sp, sp, #12
   1cf00:	pop	{r4, r5, r6, r7, r8, lr}
   1cf04:	add	sp, sp, #12
   1cf08:	bx	lr
   1cf0c:	mov	r2, r7
   1cf10:	mov	r1, #0
   1cf14:	bl	1ce80 <__assert_fail@plt+0xb75c>
   1cf18:	subs	r5, r0, #0
   1cf1c:	blt	1cee8 <__assert_fail@plt+0xb7c4>
   1cf20:	ldr	r3, [r6]
   1cf24:	cmn	r3, #1
   1cf28:	bne	1cee8 <__assert_fail@plt+0xb7c4>
   1cf2c:	mov	r1, #1
   1cf30:	mov	r0, r5
   1cf34:	bl	11610 <fcntl64@plt>
   1cf38:	subs	r2, r0, #0
   1cf3c:	blt	1cf58 <__assert_fail@plt+0xb834>
   1cf40:	orr	r2, r2, #1
   1cf44:	mov	r1, #2
   1cf48:	mov	r0, r5
   1cf4c:	bl	11610 <fcntl64@plt>
   1cf50:	cmn	r0, #1
   1cf54:	bne	1cee8 <__assert_fail@plt+0xb7c4>
   1cf58:	bl	11580 <__errno_location@plt>
   1cf5c:	mov	r6, r0
   1cf60:	mov	r0, r5
   1cf64:	ldr	r7, [r6]
   1cf68:	mvn	r5, #0
   1cf6c:	bl	116f4 <close@plt>
   1cf70:	str	r7, [r6]
   1cf74:	b	1cee8 <__assert_fail@plt+0xb7c4>
   1cf78:	ldr	r2, [sp, #40]	; 0x28
   1cf7c:	bl	11610 <fcntl64@plt>
   1cf80:	mov	r5, r0
   1cf84:	b	1cee8 <__assert_fail@plt+0xb7c4>
   1cf88:	bl	11580 <__errno_location@plt>
   1cf8c:	ldr	r3, [r0]
   1cf90:	cmp	r3, #22
   1cf94:	bne	1cee0 <__assert_fail@plt+0xb7bc>
   1cf98:	mov	r2, r7
   1cf9c:	mov	r0, r8
   1cfa0:	mov	r1, #0
   1cfa4:	bl	1ce80 <__assert_fail@plt+0xb75c>
   1cfa8:	subs	r5, r0, #0
   1cfac:	mvnge	r3, #0
   1cfb0:	strge	r3, [r6]
   1cfb4:	bge	1cf2c <__assert_fail@plt+0xb808>
   1cfb8:	b	1cee8 <__assert_fail@plt+0xb7c4>
   1cfbc:	bl	113f4 <__stack_chk_fail@plt>
   1cfc0:	andeq	pc, r2, r8, lsl #30
   1cfc4:	andeq	r0, r0, r6, lsl #8
   1cfc8:	andeq	r0, r3, ip, ror #9
   1cfcc:	ldr	r3, [r1]
   1cfd0:	ldr	r2, [r1, #4]
   1cfd4:	cmp	r3, #0
   1cfd8:	beq	1d0e8 <__assert_fail@plt+0xb9c4>
   1cfdc:	push	{r4, r5, r6, lr}
   1cfe0:	add	r2, r2, #8
   1cfe4:	ldr	r6, [pc, #268]	; 1d0f8 <__assert_fail@plt+0xb9d4>
   1cfe8:	ldr	lr, [pc, #268]	; 1d0fc <__assert_fail@plt+0xb9d8>
   1cfec:	mov	ip, #0
   1cff0:	ldr	r3, [r2, #-8]
   1cff4:	sub	r3, r3, #1
   1cff8:	cmp	r3, #21
   1cffc:	ldrls	pc, [pc, r3, lsl #2]
   1d000:	b	1d0f0 <__assert_fail@plt+0xb9cc>
   1d004:	andeq	sp, r1, r0, lsr #1
   1d008:	andeq	sp, r1, r0, lsr #1
   1d00c:	muleq	r1, r4, r0
   1d010:	muleq	r1, r4, r0
   1d014:	andeq	sp, r1, ip, asr r0
   1d018:	andeq	sp, r1, ip, asr r0
   1d01c:	andeq	sp, r1, ip, asr r0
   1d020:	andeq	sp, r1, ip, asr r0
   1d024:	andeq	sp, r1, r0, lsl #1
   1d028:	andeq	sp, r1, r0, lsl #1
   1d02c:	andeq	sp, r1, ip, lsr #1
   1d030:	andeq	sp, r1, ip, lsr #1
   1d034:	andeq	sp, r1, ip, asr r0
   1d038:	andeq	sp, r1, ip, asr r0
   1d03c:	andeq	sp, r1, r0, asr #1
   1d040:	ldrdeq	sp, [r1], -r4
   1d044:	andeq	sp, r1, ip, asr r0
   1d048:	andeq	sp, r1, ip, asr r0
   1d04c:	andeq	sp, r1, ip, asr r0
   1d050:	andeq	sp, r1, ip, asr r0
   1d054:	andeq	sp, r1, ip, asr r0
   1d058:	andeq	sp, r1, ip, asr r0
   1d05c:	ldr	r3, [r0], #4
   1d060:	str	r3, [r2]
   1d064:	ldr	r3, [r1]
   1d068:	add	ip, ip, #1
   1d06c:	cmp	r3, ip
   1d070:	add	r2, r2, #16
   1d074:	bhi	1cff0 <__assert_fail@plt+0xb8cc>
   1d078:	mov	r0, #0
   1d07c:	pop	{r4, r5, r6, pc}
   1d080:	add	r0, r0, #7
   1d084:	bic	r0, r0, #7
   1d088:	ldrd	r4, [r0], #8
   1d08c:	strd	r4, [r2]
   1d090:	b	1d064 <__assert_fail@plt+0xb940>
   1d094:	ldr	r3, [r0], #4
   1d098:	strh	r3, [r2]
   1d09c:	b	1d064 <__assert_fail@plt+0xb940>
   1d0a0:	ldr	r3, [r0], #4
   1d0a4:	strb	r3, [r2]
   1d0a8:	b	1d064 <__assert_fail@plt+0xb940>
   1d0ac:	add	r0, r0, #7
   1d0b0:	bic	r0, r0, #7
   1d0b4:	ldrd	r4, [r0], #8
   1d0b8:	strd	r4, [r2]
   1d0bc:	b	1d064 <__assert_fail@plt+0xb940>
   1d0c0:	ldr	r3, [r0], #4
   1d0c4:	cmp	r3, #0
   1d0c8:	streq	lr, [r2]
   1d0cc:	bne	1d060 <__assert_fail@plt+0xb93c>
   1d0d0:	b	1d064 <__assert_fail@plt+0xb940>
   1d0d4:	ldr	r3, [r0], #4
   1d0d8:	cmp	r3, #0
   1d0dc:	streq	r6, [r2]
   1d0e0:	bne	1d060 <__assert_fail@plt+0xb93c>
   1d0e4:	b	1d064 <__assert_fail@plt+0xb940>
   1d0e8:	mov	r0, #0
   1d0ec:	bx	lr
   1d0f0:	mvn	r0, #0
   1d0f4:	pop	{r4, r5, r6, pc}
   1d0f8:	andeq	pc, r1, r0, lsr lr	; <UNPREDICTABLE>
   1d0fc:	andeq	pc, r1, ip, asr #28
   1d100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d104:	mov	sl, r2
   1d108:	sub	sp, sp, #44	; 0x2c
   1d10c:	mov	fp, r1
   1d110:	mov	r3, r1
   1d114:	mov	r1, sl
   1d118:	mov	r2, #0
   1d11c:	mov	ip, #7
   1d120:	str	r2, [r3], #16
   1d124:	str	fp, [sp, #4]
   1d128:	str	r3, [fp, #4]
   1d12c:	mov	r4, r2
   1d130:	str	r2, [r1], #8
   1d134:	str	ip, [sp, #8]
   1d138:	mov	r7, r0
   1d13c:	str	r3, [sp, #36]	; 0x24
   1d140:	str	r2, [sp, #28]
   1d144:	str	r1, [sp, #12]
   1d148:	str	r2, [sp, #16]
   1d14c:	str	r1, [sl, #4]
   1d150:	str	r2, [sp, #32]
   1d154:	mov	r9, r2
   1d158:	str	ip, [sp, #24]
   1d15c:	mov	fp, sl
   1d160:	b	1d170 <__assert_fail@plt+0xba4c>
   1d164:	cmp	r0, #37	; 0x25
   1d168:	mov	r5, r7
   1d16c:	beq	1d1b0 <__assert_fail@plt+0xba8c>
   1d170:	mov	r2, r7
   1d174:	ldrb	r0, [r7], #1
   1d178:	cmp	r0, #0
   1d17c:	bne	1d164 <__assert_fail@plt+0xba40>
   1d180:	add	ip, r4, r4, lsl #2
   1d184:	ldr	fp, [sp, #4]
   1d188:	add	r4, r4, ip, lsl #1
   1d18c:	mov	r1, r0
   1d190:	str	r2, [r3, r4, lsl #2]
   1d194:	ldr	r3, [sp, #16]
   1d198:	str	r3, [fp, #8]
   1d19c:	ldr	r3, [sp, #28]
   1d1a0:	str	r3, [fp, #12]
   1d1a4:	mov	r0, r1
   1d1a8:	add	sp, sp, #44	; 0x2c
   1d1ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1b0:	add	r1, r4, r4, lsl #2
   1d1b4:	mvn	r8, #0
   1d1b8:	add	r4, r4, r1, lsl #1
   1d1bc:	add	r6, r3, r4, lsl #2
   1d1c0:	str	r2, [r3, r4, lsl #2]
   1d1c4:	str	r9, [r6, #8]
   1d1c8:	str	r9, [r6, #12]
   1d1cc:	str	r9, [r6, #16]
   1d1d0:	str	r9, [r6, #24]
   1d1d4:	str	r9, [r6, #28]
   1d1d8:	str	r8, [r6, #20]
   1d1dc:	str	r8, [r6, #32]
   1d1e0:	str	r8, [r6, #40]	; 0x28
   1d1e4:	ldrb	r4, [r7]
   1d1e8:	sub	r0, r4, #48	; 0x30
   1d1ec:	uxtb	r3, r0
   1d1f0:	cmp	r3, #9
   1d1f4:	bhi	1d240 <__assert_fail@plt+0xbb1c>
   1d1f8:	b	1d6b8 <__assert_fail@plt+0xbf94>
   1d1fc:	cmp	r4, #45	; 0x2d
   1d200:	beq	1d25c <__assert_fail@plt+0xbb38>
   1d204:	cmp	r4, #43	; 0x2b
   1d208:	beq	1d26c <__assert_fail@plt+0xbb48>
   1d20c:	cmp	r4, #32
   1d210:	beq	1d27c <__assert_fail@plt+0xbb58>
   1d214:	cmp	r4, #35	; 0x23
   1d218:	beq	1d28c <__assert_fail@plt+0xbb68>
   1d21c:	cmp	r4, #48	; 0x30
   1d220:	beq	1d29c <__assert_fail@plt+0xbb78>
   1d224:	cmp	r4, #73	; 0x49
   1d228:	bne	1d2ac <__assert_fail@plt+0xbb88>
   1d22c:	ldr	r3, [r6, #8]
   1d230:	orr	r3, r3, #64	; 0x40
   1d234:	str	r3, [r6, #8]
   1d238:	ldrb	r4, [r7]
   1d23c:	mov	r5, r7
   1d240:	cmp	r4, #39	; 0x27
   1d244:	add	r7, r5, #1
   1d248:	bne	1d1fc <__assert_fail@plt+0xbad8>
   1d24c:	ldr	r3, [r6, #8]
   1d250:	orr	r3, r3, #1
   1d254:	str	r3, [r6, #8]
   1d258:	b	1d238 <__assert_fail@plt+0xbb14>
   1d25c:	ldr	r3, [r6, #8]
   1d260:	orr	r3, r3, #2
   1d264:	str	r3, [r6, #8]
   1d268:	b	1d238 <__assert_fail@plt+0xbb14>
   1d26c:	ldr	r3, [r6, #8]
   1d270:	orr	r3, r3, #4
   1d274:	str	r3, [r6, #8]
   1d278:	b	1d238 <__assert_fail@plt+0xbb14>
   1d27c:	ldr	r3, [r6, #8]
   1d280:	orr	r3, r3, #8
   1d284:	str	r3, [r6, #8]
   1d288:	b	1d238 <__assert_fail@plt+0xbb14>
   1d28c:	ldr	r3, [r6, #8]
   1d290:	orr	r3, r3, #16
   1d294:	str	r3, [r6, #8]
   1d298:	b	1d238 <__assert_fail@plt+0xbb14>
   1d29c:	ldr	r3, [r6, #8]
   1d2a0:	orr	r3, r3, #32
   1d2a4:	str	r3, [r6, #8]
   1d2a8:	b	1d238 <__assert_fail@plt+0xbb14>
   1d2ac:	cmp	r4, #42	; 0x2a
   1d2b0:	beq	1d488 <__assert_fail@plt+0xbd64>
   1d2b4:	sub	r3, r4, #48	; 0x30
   1d2b8:	cmp	r3, #9
   1d2bc:	bls	1daa8 <__assert_fail@plt+0xc384>
   1d2c0:	cmp	r4, #46	; 0x2e
   1d2c4:	beq	1d520 <__assert_fail@plt+0xbdfc>
   1d2c8:	add	r5, r5, #1
   1d2cc:	mov	r3, #0
   1d2d0:	mov	r1, #1
   1d2d4:	b	1d2dc <__assert_fail@plt+0xbbb8>
   1d2d8:	ldrb	r4, [r5], #1
   1d2dc:	cmp	r4, #104	; 0x68
   1d2e0:	andeq	r2, r3, #1
   1d2e4:	mov	r7, r5
   1d2e8:	orreq	r3, r3, r1, lsl r2
   1d2ec:	beq	1d2d8 <__assert_fail@plt+0xbbb4>
   1d2f0:	cmp	r4, #76	; 0x4c
   1d2f4:	orreq	r3, r3, #4
   1d2f8:	beq	1d2d8 <__assert_fail@plt+0xbbb4>
   1d2fc:	cmp	r4, #108	; 0x6c
   1d300:	addeq	r3, r3, #8
   1d304:	beq	1d2d8 <__assert_fail@plt+0xbbb4>
   1d308:	cmp	r4, #106	; 0x6a
   1d30c:	addeq	r3, r3, #16
   1d310:	beq	1d2d8 <__assert_fail@plt+0xbbb4>
   1d314:	and	r2, r4, #223	; 0xdf
   1d318:	cmp	r2, #90	; 0x5a
   1d31c:	beq	1d2d8 <__assert_fail@plt+0xbbb4>
   1d320:	cmp	r4, #116	; 0x74
   1d324:	beq	1d2d8 <__assert_fail@plt+0xbbb4>
   1d328:	sub	r2, r4, #37	; 0x25
   1d32c:	cmp	r2, #83	; 0x53
   1d330:	ldrls	pc, [pc, r2, lsl #2]
   1d334:	b	1d728 <__assert_fail@plt+0xc004>
   1d338:	andeq	sp, r1, ip, lsl r6
   1d33c:	andeq	sp, r1, r8, lsr #14
   1d340:	andeq	sp, r1, r8, lsr #14
   1d344:	andeq	sp, r1, r8, lsr #14
   1d348:	andeq	sp, r1, r8, lsr #14
   1d34c:	andeq	sp, r1, r8, lsr #14
   1d350:	andeq	sp, r1, r8, lsr #14
   1d354:	andeq	sp, r1, r8, lsr #14
   1d358:	andeq	sp, r1, r8, lsr #14
   1d35c:	andeq	sp, r1, r8, lsr #14
   1d360:	andeq	sp, r1, r8, lsr #14
   1d364:	andeq	sp, r1, r8, lsr #14
   1d368:	andeq	sp, r1, r8, lsr #14
   1d36c:	andeq	sp, r1, r8, lsr #14
   1d370:	andeq	sp, r1, r8, lsr #14
   1d374:	andeq	sp, r1, r8, lsr #14
   1d378:	andeq	sp, r1, r8, lsr #14
   1d37c:	andeq	sp, r1, r8, lsr #14
   1d380:	andeq	sp, r1, r8, lsr #14
   1d384:	andeq	sp, r1, r8, lsr #14
   1d388:	andeq	sp, r1, r8, lsr #14
   1d38c:	andeq	sp, r1, r8, lsr #14
   1d390:	andeq	sp, r1, r8, lsr #14
   1d394:	andeq	sp, r1, r8, lsr #14
   1d398:	andeq	sp, r1, r8, lsr #14
   1d39c:	andeq	sp, r1, r8, lsr #14
   1d3a0:	andeq	sp, r1, r8, lsr #14
   1d3a4:	andeq	sp, r1, r8, lsr #14
   1d3a8:	andeq	sp, r1, r0, ror r8
   1d3ac:	andeq	sp, r1, r8, lsr #14
   1d3b0:			; <UNDEFINED> instruction: 0x0001d5bc
   1d3b4:	andeq	sp, r1, r8, lsr #14
   1d3b8:	andeq	sp, r1, r0, ror r8
   1d3bc:	andeq	sp, r1, r0, ror r8
   1d3c0:	andeq	sp, r1, r0, ror r8
   1d3c4:	andeq	sp, r1, r8, lsr #14
   1d3c8:	andeq	sp, r1, r8, lsr #14
   1d3cc:	andeq	sp, r1, r8, lsr #14
   1d3d0:	andeq	sp, r1, r8, lsr #14
   1d3d4:	andeq	sp, r1, r8, lsr #14
   1d3d8:	andeq	sp, r1, r8, lsr #14
   1d3dc:	andeq	sp, r1, r8, lsr #14
   1d3e0:	andeq	sp, r1, r8, lsr #14
   1d3e4:	andeq	sp, r1, r8, lsr #14
   1d3e8:	andeq	sp, r1, r8, lsr #14
   1d3ec:	andeq	sp, r1, r8, lsr #14
   1d3f0:			; <UNDEFINED> instruction: 0x0001d9b4
   1d3f4:	andeq	sp, r1, r8, lsr #14
   1d3f8:	andeq	sp, r1, r8, lsr #14
   1d3fc:	andeq	sp, r1, r8, lsr #14
   1d400:	andeq	sp, r1, r8, lsr #14
   1d404:	andeq	sp, r1, r0, ror r9
   1d408:	andeq	sp, r1, r8, lsr #14
   1d40c:	andeq	sp, r1, r8, lsr #14
   1d410:	andeq	sp, r1, r8, lsr #14
   1d414:	andeq	sp, r1, r8, lsr #14
   1d418:	andeq	sp, r1, r8, lsr #14
   1d41c:	andeq	sp, r1, r8, lsr #14
   1d420:	andeq	sp, r1, r8, lsr #14
   1d424:	andeq	sp, r1, r8, lsr #14
   1d428:	andeq	sp, r1, r0, ror r8
   1d42c:	andeq	sp, r1, r8, lsr #14
   1d430:	andeq	sp, r1, ip, asr r9
   1d434:	andeq	sp, r1, r8, lsl r9
   1d438:	andeq	sp, r1, r0, ror r8
   1d43c:	andeq	sp, r1, r0, ror r8
   1d440:	andeq	sp, r1, r0, ror r8
   1d444:	andeq	sp, r1, r8, lsr #14
   1d448:	andeq	sp, r1, r8, lsl r9
   1d44c:	andeq	sp, r1, r8, lsr #14
   1d450:	andeq	sp, r1, r8, lsr #14
   1d454:	andeq	sp, r1, r8, lsr #14
   1d458:	andeq	sp, r1, r8, lsr #14
   1d45c:	ldrdeq	sp, [r1], -r0
   1d460:	andeq	sp, r1, r0, ror r9
   1d464:	andeq	sp, r1, r4, asr #19
   1d468:	andeq	sp, r1, r8, lsr #14
   1d46c:	andeq	sp, r1, r8, lsr #14
   1d470:	andeq	sp, r1, r4, lsl #18
   1d474:	andeq	sp, r1, r8, lsr #14
   1d478:	andeq	sp, r1, r0, ror r9
   1d47c:	andeq	sp, r1, r8, lsr #14
   1d480:	andeq	sp, r1, r8, lsr #14
   1d484:	andeq	sp, r1, r0, ror r9
   1d488:	str	r5, [r6, #12]
   1d48c:	str	r7, [r6, #16]
   1d490:	ldrb	r3, [r5, #1]
   1d494:	ldr	r2, [sp, #16]
   1d498:	sub	r3, r3, #48	; 0x30
   1d49c:	cmp	r2, #0
   1d4a0:	moveq	r2, #1
   1d4a4:	str	r2, [sp, #16]
   1d4a8:	uxtb	r2, r3
   1d4ac:	cmp	r2, #9
   1d4b0:	bls	1d894 <__assert_fail@plt+0xc170>
   1d4b4:	ldr	r4, [r6, #20]
   1d4b8:	cmn	r4, #1
   1d4bc:	beq	1d850 <__assert_fail@plt+0xc12c>
   1d4c0:	ldr	r3, [sp, #8]
   1d4c4:	ldr	sl, [fp, #4]
   1d4c8:	cmp	r3, r4
   1d4cc:	bls	1d7b8 <__assert_fail@plt+0xc094>
   1d4d0:	ldr	r2, [fp]
   1d4d4:	cmp	r2, r4
   1d4d8:	bhi	1d4f4 <__assert_fail@plt+0xbdd0>
   1d4dc:	sub	r1, sl, #16
   1d4e0:	add	r2, r2, #1
   1d4e4:	cmp	r2, r4
   1d4e8:	str	r9, [r1, r2, lsl #4]
   1d4ec:	bls	1d4e0 <__assert_fail@plt+0xbdbc>
   1d4f0:	str	r2, [fp]
   1d4f4:	ldr	r3, [sl, r4, lsl #4]
   1d4f8:	cmp	r3, #0
   1d4fc:	bne	1db04 <__assert_fail@plt+0xc3e0>
   1d500:	mov	r3, r7
   1d504:	mov	r2, #5
   1d508:	str	r2, [sl, r4, lsl #4]
   1d50c:	ldrb	r4, [r3], #1
   1d510:	mov	r5, r7
   1d514:	cmp	r4, #46	; 0x2e
   1d518:	mov	r7, r3
   1d51c:	bne	1d2c8 <__assert_fail@plt+0xbba4>
   1d520:	ldrb	r3, [r5, #1]
   1d524:	cmp	r3, #42	; 0x2a
   1d528:	bne	1d770 <__assert_fail@plt+0xc04c>
   1d52c:	add	r7, r5, #2
   1d530:	str	r5, [r6, #24]
   1d534:	str	r7, [r6, #28]
   1d538:	ldrb	r1, [r5, #2]
   1d53c:	ldr	r3, [sp, #28]
   1d540:	sub	r1, r1, #48	; 0x30
   1d544:	cmp	r3, #2
   1d548:	movcc	r3, #2
   1d54c:	str	r3, [sp, #28]
   1d550:	uxtb	r3, r1
   1d554:	cmp	r3, #9
   1d558:	bls	1dc84 <__assert_fail@plt+0xc560>
   1d55c:	ldr	r4, [r6, #32]
   1d560:	cmn	r4, #1
   1d564:	beq	1dc64 <__assert_fail@plt+0xc540>
   1d568:	ldr	r3, [sp, #8]
   1d56c:	ldr	sl, [fp, #4]
   1d570:	cmp	r3, r4
   1d574:	bls	1db88 <__assert_fail@plt+0xc464>
   1d578:	ldr	r2, [fp]
   1d57c:	cmp	r2, r4
   1d580:	bhi	1d59c <__assert_fail@plt+0xbe78>
   1d584:	sub	r1, sl, #16
   1d588:	add	r2, r2, #1
   1d58c:	cmp	r2, r4
   1d590:	str	r9, [r1, r2, lsl #4]
   1d594:	bls	1d588 <__assert_fail@plt+0xbe64>
   1d598:	str	r2, [fp]
   1d59c:	ldr	r3, [sl, r4, lsl #4]
   1d5a0:	cmp	r3, #0
   1d5a4:	bne	1dbe8 <__assert_fail@plt+0xc4c4>
   1d5a8:	mov	r3, #5
   1d5ac:	str	r3, [sl, r4, lsl #4]
   1d5b0:	mov	r5, r7
   1d5b4:	ldrb	r4, [r7]
   1d5b8:	b	1d2c8 <__assert_fail@plt+0xbba4>
   1d5bc:	mov	r4, #99	; 0x63
   1d5c0:	mov	r3, #14
   1d5c4:	str	r3, [sp, #20]
   1d5c8:	cmn	r8, #1
   1d5cc:	strne	r8, [r6, #40]	; 0x28
   1d5d0:	beq	1da88 <__assert_fail@plt+0xc364>
   1d5d4:	ldr	r3, [sp, #8]
   1d5d8:	ldr	sl, [fp, #4]
   1d5dc:	cmp	r3, r8
   1d5e0:	bls	1da2c <__assert_fail@plt+0xc308>
   1d5e4:	ldr	r3, [fp]
   1d5e8:	cmp	r3, r8
   1d5ec:	bhi	1d608 <__assert_fail@plt+0xbee4>
   1d5f0:	sub	r1, sl, #16
   1d5f4:	add	r3, r3, #1
   1d5f8:	cmp	r3, r8
   1d5fc:	str	r9, [r1, r3, lsl #4]
   1d600:	bls	1d5f4 <__assert_fail@plt+0xbed0>
   1d604:	str	r3, [fp]
   1d608:	ldr	r3, [sl, r8, lsl #4]
   1d60c:	cmp	r3, #0
   1d610:	bne	1da14 <__assert_fail@plt+0xc2f0>
   1d614:	ldr	r3, [sp, #20]
   1d618:	str	r3, [sl, r8, lsl #4]
   1d61c:	ldr	r3, [sp, #4]
   1d620:	strb	r4, [r6, #36]	; 0x24
   1d624:	ldr	r2, [sp, #24]
   1d628:	ldr	r4, [r3]
   1d62c:	str	r5, [r6, #4]
   1d630:	add	r4, r4, #1
   1d634:	cmp	r2, r4
   1d638:	str	r4, [r3]
   1d63c:	ldrhi	r3, [r3, #4]
   1d640:	bhi	1d170 <__assert_fail@plt+0xba4c>
   1d644:	ldr	r3, [sp, #24]
   1d648:	cmp	r3, #0
   1d64c:	blt	1dd60 <__assert_fail@plt+0xc63c>
   1d650:	ldr	r3, [sp, #24]
   1d654:	ldr	r2, [pc, #1896]	; 1ddc4 <__assert_fail@plt+0xc6a0>
   1d658:	lsl	r5, r3, #1
   1d65c:	cmp	r5, r2
   1d660:	bhi	1dd60 <__assert_fail@plt+0xc63c>
   1d664:	ldr	r2, [sp, #4]
   1d668:	add	r1, r3, r3, lsl #2
   1d66c:	ldr	r6, [r2, #4]
   1d670:	add	r1, r3, r1, lsl #1
   1d674:	ldr	r3, [sp, #36]	; 0x24
   1d678:	lsl	r1, r1, #3
   1d67c:	cmp	r3, r6
   1d680:	beq	1d818 <__assert_fail@plt+0xc0f4>
   1d684:	mov	r0, r6
   1d688:	bl	11400 <realloc@plt>
   1d68c:	subs	r3, r0, #0
   1d690:	beq	1dd60 <__assert_fail@plt+0xc63c>
   1d694:	ldr	r2, [sp, #4]
   1d698:	ldm	r2, {r4, r6}
   1d69c:	ldr	r2, [sp, #36]	; 0x24
   1d6a0:	cmp	r2, r6
   1d6a4:	beq	1d828 <__assert_fail@plt+0xc104>
   1d6a8:	ldr	r2, [sp, #4]
   1d6ac:	str	r5, [sp, #24]
   1d6b0:	str	r3, [r2, #4]
   1d6b4:	b	1d170 <__assert_fail@plt+0xba4c>
   1d6b8:	mov	r2, r7
   1d6bc:	ldrb	r3, [r2, #1]!
   1d6c0:	sub	r1, r3, #48	; 0x30
   1d6c4:	cmp	r1, #9
   1d6c8:	bls	1d6bc <__assert_fail@plt+0xbf98>
   1d6cc:	cmp	r3, #36	; 0x24
   1d6d0:	mvnne	r8, #0
   1d6d4:	bne	1d240 <__assert_fail@plt+0xbb1c>
   1d6d8:	mov	r2, #0
   1d6dc:	b	1d6e8 <__assert_fail@plt+0xbfc4>
   1d6e0:	cmp	ip, #9
   1d6e4:	bhi	1dcf4 <__assert_fail@plt+0xc5d0>
   1d6e8:	ldr	r3, [pc, #1752]	; 1ddc8 <__assert_fail@plt+0xc6a4>
   1d6ec:	mov	r1, r5
   1d6f0:	cmp	r2, r3
   1d6f4:	addls	r2, r2, r2, lsl #2
   1d6f8:	mvnhi	r3, #0
   1d6fc:	lslls	r3, r2, #1
   1d700:	ldrb	ip, [r5, #1]!
   1d704:	adds	r3, r0, r3
   1d708:	mov	r2, r3
   1d70c:	sub	r0, ip, #48	; 0x30
   1d710:	uxtb	ip, r0
   1d714:	bcc	1d6e0 <__assert_fail@plt+0xbfbc>
   1d718:	cmp	ip, #9
   1d71c:	mvn	r3, #0
   1d720:	mov	r1, r5
   1d724:	bls	1d700 <__assert_fail@plt+0xbfdc>
   1d728:	mov	sl, fp
   1d72c:	ldr	fp, [sp, #4]
   1d730:	ldr	r3, [sl, #4]
   1d734:	ldr	r2, [sp, #12]
   1d738:	cmp	r2, r3
   1d73c:	beq	1d748 <__assert_fail@plt+0xc024>
   1d740:	mov	r0, r3
   1d744:	bl	11388 <free@plt>
   1d748:	ldr	r0, [fp, #4]
   1d74c:	ldr	r3, [sp, #36]	; 0x24
   1d750:	cmp	r3, r0
   1d754:	beq	1d75c <__assert_fail@plt+0xc038>
   1d758:	bl	11388 <free@plt>
   1d75c:	bl	11580 <__errno_location@plt>
   1d760:	mov	r3, #22
   1d764:	mvn	r1, #0
   1d768:	str	r3, [r0]
   1d76c:	b	1d1a4 <__assert_fail@plt+0xba80>
   1d770:	str	r5, [r6, #24]
   1d774:	ldrb	r3, [r5, #1]
   1d778:	sub	r3, r3, #48	; 0x30
   1d77c:	cmp	r3, #9
   1d780:	bhi	1dd3c <__assert_fail@plt+0xc618>
   1d784:	ldrb	r3, [r7, #1]!
   1d788:	sub	r3, r3, #48	; 0x30
   1d78c:	cmp	r3, #9
   1d790:	bls	1d784 <__assert_fail@plt+0xc060>
   1d794:	sub	r3, r7, r5
   1d798:	mov	r5, r7
   1d79c:	ldr	r2, [sp, #28]
   1d7a0:	str	r7, [r6, #28]
   1d7a4:	cmp	r2, r3
   1d7a8:	movcs	r3, r2
   1d7ac:	ldrb	r4, [r7]
   1d7b0:	str	r3, [sp, #28]
   1d7b4:	b	1d2c8 <__assert_fail@plt+0xbba4>
   1d7b8:	ldr	r3, [sp, #8]
   1d7bc:	lsl	r3, r3, #1
   1d7c0:	cmp	r3, r4
   1d7c4:	str	r3, [sp, #8]
   1d7c8:	addls	r3, r4, #1
   1d7cc:	strls	r3, [sp, #8]
   1d7d0:	ldr	r3, [sp, #8]
   1d7d4:	cmn	r3, #-268435455	; 0xf0000001
   1d7d8:	bhi	1ddac <__assert_fail@plt+0xc688>
   1d7dc:	ldr	r2, [sp, #12]
   1d7e0:	lsl	r1, r3, #4
   1d7e4:	cmp	r2, sl
   1d7e8:	beq	1db44 <__assert_fail@plt+0xc420>
   1d7ec:	mov	r0, sl
   1d7f0:	bl	11400 <realloc@plt>
   1d7f4:	ldr	r3, [fp, #4]
   1d7f8:	subs	sl, r0, #0
   1d7fc:	beq	1ddb0 <__assert_fail@plt+0xc68c>
   1d800:	ldr	r2, [sp, #12]
   1d804:	cmp	r2, r3
   1d808:	ldr	r2, [fp]
   1d80c:	beq	1ddb8 <__assert_fail@plt+0xc694>
   1d810:	str	sl, [fp, #4]
   1d814:	b	1d4d4 <__assert_fail@plt+0xbdb0>
   1d818:	mov	r0, r1
   1d81c:	bl	114e4 <malloc@plt>
   1d820:	subs	r3, r0, #0
   1d824:	beq	1dc40 <__assert_fail@plt+0xc51c>
   1d828:	add	r2, r4, r4, lsl #2
   1d82c:	mov	r0, r3
   1d830:	add	r2, r4, r2, lsl #1
   1d834:	mov	r1, r6
   1d838:	lsl	r2, r2, #2
   1d83c:	bl	113a0 <memcpy@plt>
   1d840:	ldr	r2, [sp, #4]
   1d844:	ldr	r4, [r2]
   1d848:	mov	r3, r0
   1d84c:	b	1d6a8 <__assert_fail@plt+0xbf84>
   1d850:	ldr	r3, [sp, #32]
   1d854:	cmn	r3, #1
   1d858:	str	r3, [r6, #20]
   1d85c:	add	r3, r3, #1
   1d860:	beq	1d728 <__assert_fail@plt+0xc004>
   1d864:	ldr	r4, [sp, #32]
   1d868:	str	r3, [sp, #32]
   1d86c:	b	1d4c0 <__assert_fail@plt+0xbd9c>
   1d870:	cmp	r3, #15
   1d874:	movgt	r3, #12
   1d878:	strgt	r3, [sp, #20]
   1d87c:	bgt	1d5c8 <__assert_fail@plt+0xbea4>
   1d880:	tst	r3, #4
   1d884:	movne	r3, #12
   1d888:	moveq	r3, #11
   1d88c:	str	r3, [sp, #20]
   1d890:	b	1d5c8 <__assert_fail@plt+0xbea4>
   1d894:	mov	r1, r7
   1d898:	ldrb	r2, [r1, #1]!
   1d89c:	sub	r0, r2, #48	; 0x30
   1d8a0:	cmp	r0, #9
   1d8a4:	bls	1d898 <__assert_fail@plt+0xc174>
   1d8a8:	cmp	r2, #36	; 0x24
   1d8ac:	bne	1d4b4 <__assert_fail@plt+0xbd90>
   1d8b0:	mov	r1, #0
   1d8b4:	b	1d8c0 <__assert_fail@plt+0xc19c>
   1d8b8:	cmp	ip, #9
   1d8bc:	bhi	1dd7c <__assert_fail@plt+0xc658>
   1d8c0:	ldr	r2, [pc, #1280]	; 1ddc8 <__assert_fail@plt+0xc6a4>
   1d8c4:	mov	r0, r7
   1d8c8:	cmp	r1, r2
   1d8cc:	addls	r1, r1, r1, lsl #2
   1d8d0:	mvnhi	r2, #0
   1d8d4:	lslls	r2, r1, #1
   1d8d8:	ldrb	ip, [r7, #1]!
   1d8dc:	adds	r2, r3, r2
   1d8e0:	mov	r1, r2
   1d8e4:	sub	r3, ip, #48	; 0x30
   1d8e8:	uxtb	ip, r3
   1d8ec:	bcc	1d8b8 <__assert_fail@plt+0xc194>
   1d8f0:	cmp	ip, #9
   1d8f4:	mvn	r2, #0
   1d8f8:	mov	r0, r7
   1d8fc:	bls	1d8d8 <__assert_fail@plt+0xc1b4>
   1d900:	b	1d728 <__assert_fail@plt+0xc004>
   1d904:	cmp	r3, #7
   1d908:	movgt	r3, #16
   1d90c:	movle	r3, #15
   1d910:	str	r3, [sp, #20]
   1d914:	b	1d5c8 <__assert_fail@plt+0xbea4>
   1d918:	cmp	r3, #15
   1d91c:	bgt	1dc14 <__assert_fail@plt+0xc4f0>
   1d920:	tst	r3, #4
   1d924:	bne	1dc14 <__assert_fail@plt+0xc4f0>
   1d928:	cmp	r3, #7
   1d92c:	movgt	r3, #7
   1d930:	strgt	r3, [sp, #20]
   1d934:	bgt	1d5c8 <__assert_fail@plt+0xbea4>
   1d938:	tst	r3, #2
   1d93c:	movne	r3, #1
   1d940:	strne	r3, [sp, #20]
   1d944:	bne	1d5c8 <__assert_fail@plt+0xbea4>
   1d948:	tst	r3, #1
   1d94c:	movne	r3, #3
   1d950:	moveq	r3, #5
   1d954:	str	r3, [sp, #20]
   1d958:	b	1d5c8 <__assert_fail@plt+0xbea4>
   1d95c:	cmp	r3, #7
   1d960:	movgt	r3, #14
   1d964:	movle	r3, #13
   1d968:	str	r3, [sp, #20]
   1d96c:	b	1d5c8 <__assert_fail@plt+0xbea4>
   1d970:	cmp	r3, #15
   1d974:	bgt	1dc08 <__assert_fail@plt+0xc4e4>
   1d978:	tst	r3, #4
   1d97c:	bne	1dc08 <__assert_fail@plt+0xc4e4>
   1d980:	cmp	r3, #7
   1d984:	movgt	r3, #8
   1d988:	strgt	r3, [sp, #20]
   1d98c:	bgt	1d5c8 <__assert_fail@plt+0xbea4>
   1d990:	tst	r3, #2
   1d994:	movne	r3, #2
   1d998:	strne	r3, [sp, #20]
   1d99c:	bne	1d5c8 <__assert_fail@plt+0xbea4>
   1d9a0:	tst	r3, #1
   1d9a4:	movne	r3, #4
   1d9a8:	moveq	r3, #6
   1d9ac:	str	r3, [sp, #20]
   1d9b0:	b	1d5c8 <__assert_fail@plt+0xbea4>
   1d9b4:	mov	r3, #16
   1d9b8:	str	r3, [sp, #20]
   1d9bc:	mov	r4, #115	; 0x73
   1d9c0:	b	1d5c8 <__assert_fail@plt+0xbea4>
   1d9c4:	mov	r3, #17
   1d9c8:	str	r3, [sp, #20]
   1d9cc:	b	1d5c8 <__assert_fail@plt+0xbea4>
   1d9d0:	cmp	r3, #15
   1d9d4:	bgt	1dbfc <__assert_fail@plt+0xc4d8>
   1d9d8:	tst	r3, #4
   1d9dc:	bne	1dbfc <__assert_fail@plt+0xc4d8>
   1d9e0:	cmp	r3, #7
   1d9e4:	movgt	r3, #21
   1d9e8:	strgt	r3, [sp, #20]
   1d9ec:	bgt	1d5c8 <__assert_fail@plt+0xbea4>
   1d9f0:	tst	r3, #2
   1d9f4:	movne	r3, #18
   1d9f8:	strne	r3, [sp, #20]
   1d9fc:	bne	1d5c8 <__assert_fail@plt+0xbea4>
   1da00:	tst	r3, #1
   1da04:	movne	r3, #19
   1da08:	moveq	r3, #20
   1da0c:	str	r3, [sp, #20]
   1da10:	b	1d5c8 <__assert_fail@plt+0xbea4>
   1da14:	ldr	r2, [sp, #20]
   1da18:	cmp	r3, r2
   1da1c:	beq	1d61c <__assert_fail@plt+0xbef8>
   1da20:	mov	r3, sl
   1da24:	ldr	fp, [sp, #4]
   1da28:	b	1d734 <__assert_fail@plt+0xc010>
   1da2c:	ldr	r3, [sp, #8]
   1da30:	lsl	r3, r3, #1
   1da34:	cmp	r3, r8
   1da38:	str	r3, [sp, #8]
   1da3c:	addls	r3, r8, #1
   1da40:	strls	r3, [sp, #8]
   1da44:	ldr	r3, [sp, #8]
   1da48:	cmn	r3, #-268435455	; 0xf0000001
   1da4c:	bhi	1ddac <__assert_fail@plt+0xc688>
   1da50:	ldr	r2, [sp, #12]
   1da54:	lsl	r1, r3, #4
   1da58:	cmp	r2, sl
   1da5c:	beq	1db18 <__assert_fail@plt+0xc3f4>
   1da60:	mov	r0, sl
   1da64:	bl	11400 <realloc@plt>
   1da68:	subs	sl, r0, #0
   1da6c:	beq	1dd60 <__assert_fail@plt+0xc63c>
   1da70:	ldr	r3, [fp, #4]
   1da74:	ldr	r2, [sp, #12]
   1da78:	cmp	r2, r3
   1da7c:	beq	1dda0 <__assert_fail@plt+0xc67c>
   1da80:	str	sl, [fp, #4]
   1da84:	b	1d5e4 <__assert_fail@plt+0xbec0>
   1da88:	ldr	r3, [sp, #32]
   1da8c:	cmn	r3, #1
   1da90:	str	r3, [r6, #40]	; 0x28
   1da94:	add	r3, r3, #1
   1da98:	beq	1d728 <__assert_fail@plt+0xc004>
   1da9c:	ldr	r8, [sp, #32]
   1daa0:	str	r3, [sp, #32]
   1daa4:	b	1d5d4 <__assert_fail@plt+0xbeb0>
   1daa8:	str	r5, [r6, #12]
   1daac:	ldrb	r3, [r5]
   1dab0:	sub	r3, r3, #48	; 0x30
   1dab4:	cmp	r3, #9
   1dab8:	bhi	1daf8 <__assert_fail@plt+0xc3d4>
   1dabc:	mov	r7, r5
   1dac0:	b	1dac8 <__assert_fail@plt+0xc3a4>
   1dac4:	mov	r7, r2
   1dac8:	ldrb	r3, [r7, #1]
   1dacc:	add	r2, r7, #1
   1dad0:	sub	r3, r3, #48	; 0x30
   1dad4:	cmp	r3, #9
   1dad8:	bls	1dac4 <__assert_fail@plt+0xc3a0>
   1dadc:	ldr	r3, [sp, #16]
   1dae0:	sub	r5, r2, r5
   1dae4:	cmp	r3, r5
   1dae8:	movcc	r3, r5
   1daec:	add	r7, r7, #2
   1daf0:	mov	r5, r2
   1daf4:	str	r3, [sp, #16]
   1daf8:	str	r5, [r6, #16]
   1dafc:	ldrb	r4, [r5]
   1db00:	b	1d2c0 <__assert_fail@plt+0xbb9c>
   1db04:	cmp	r3, #5
   1db08:	bne	1da20 <__assert_fail@plt+0xc2fc>
   1db0c:	mov	r5, r7
   1db10:	ldrb	r4, [r7], #1
   1db14:	b	1d2c0 <__assert_fail@plt+0xbb9c>
   1db18:	mov	r0, r1
   1db1c:	bl	114e4 <malloc@plt>
   1db20:	subs	r3, r0, #0
   1db24:	beq	1db54 <__assert_fail@plt+0xc430>
   1db28:	ldr	r2, [fp]
   1db2c:	mov	r1, sl
   1db30:	mov	r0, r3
   1db34:	lsl	r2, r2, #4
   1db38:	bl	113a0 <memcpy@plt>
   1db3c:	mov	sl, r0
   1db40:	b	1da80 <__assert_fail@plt+0xc35c>
   1db44:	mov	r0, r1
   1db48:	bl	114e4 <malloc@plt>
   1db4c:	subs	r3, r0, #0
   1db50:	bne	1dc20 <__assert_fail@plt+0xc4fc>
   1db54:	ldr	fp, [sp, #4]
   1db58:	ldr	r0, [fp, #4]
   1db5c:	ldr	r3, [sp, #36]	; 0x24
   1db60:	cmp	r3, r0
   1db64:	beq	1db6c <__assert_fail@plt+0xc448>
   1db68:	bl	11388 <free@plt>
   1db6c:	bl	11580 <__errno_location@plt>
   1db70:	mov	r3, #12
   1db74:	mvn	r1, #0
   1db78:	str	r3, [r0]
   1db7c:	mov	r0, r1
   1db80:	add	sp, sp, #44	; 0x2c
   1db84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db88:	ldr	r3, [sp, #8]
   1db8c:	lsl	r3, r3, #1
   1db90:	cmp	r3, r4
   1db94:	str	r3, [sp, #8]
   1db98:	addls	r3, r4, #1
   1db9c:	strls	r3, [sp, #8]
   1dba0:	ldr	r3, [sp, #8]
   1dba4:	cmn	r3, #-268435455	; 0xf0000001
   1dba8:	bhi	1ddac <__assert_fail@plt+0xc688>
   1dbac:	ldr	r2, [sp, #12]
   1dbb0:	lsl	r1, r3, #4
   1dbb4:	cmp	r2, sl
   1dbb8:	beq	1dd0c <__assert_fail@plt+0xc5e8>
   1dbbc:	mov	r0, sl
   1dbc0:	bl	11400 <realloc@plt>
   1dbc4:	ldr	r3, [fp, #4]
   1dbc8:	subs	sl, r0, #0
   1dbcc:	beq	1ddb0 <__assert_fail@plt+0xc68c>
   1dbd0:	ldr	r2, [sp, #12]
   1dbd4:	cmp	r2, r3
   1dbd8:	ldr	r2, [fp]
   1dbdc:	beq	1dd94 <__assert_fail@plt+0xc670>
   1dbe0:	str	sl, [fp, #4]
   1dbe4:	b	1d57c <__assert_fail@plt+0xbe58>
   1dbe8:	cmp	r3, #5
   1dbec:	bne	1da20 <__assert_fail@plt+0xc2fc>
   1dbf0:	ldrb	r4, [r7]
   1dbf4:	mov	r5, r7
   1dbf8:	b	1d2c8 <__assert_fail@plt+0xbba4>
   1dbfc:	mov	r3, #22
   1dc00:	str	r3, [sp, #20]
   1dc04:	b	1d5c8 <__assert_fail@plt+0xbea4>
   1dc08:	mov	r3, #10
   1dc0c:	str	r3, [sp, #20]
   1dc10:	b	1d5c8 <__assert_fail@plt+0xbea4>
   1dc14:	mov	r3, #9
   1dc18:	str	r3, [sp, #20]
   1dc1c:	b	1d5c8 <__assert_fail@plt+0xbea4>
   1dc20:	ldr	r2, [fp]
   1dc24:	lsl	r2, r2, #4
   1dc28:	mov	r1, sl
   1dc2c:	mov	r0, r3
   1dc30:	bl	113a0 <memcpy@plt>
   1dc34:	ldr	r2, [fp]
   1dc38:	mov	sl, r0
   1dc3c:	b	1d810 <__assert_fail@plt+0xc0ec>
   1dc40:	mov	sl, fp
   1dc44:	ldr	r2, [sp, #12]
   1dc48:	ldr	r3, [sl, #4]
   1dc4c:	ldr	fp, [sp, #4]
   1dc50:	cmp	r2, r3
   1dc54:	beq	1db6c <__assert_fail@plt+0xc448>
   1dc58:	mov	r0, r3
   1dc5c:	bl	11388 <free@plt>
   1dc60:	b	1db58 <__assert_fail@plt+0xc434>
   1dc64:	ldr	r3, [sp, #32]
   1dc68:	cmn	r3, #1
   1dc6c:	str	r3, [r6, #32]
   1dc70:	add	r3, r3, #1
   1dc74:	beq	1d728 <__assert_fail@plt+0xc004>
   1dc78:	ldr	r4, [sp, #32]
   1dc7c:	str	r3, [sp, #32]
   1dc80:	b	1d568 <__assert_fail@plt+0xbe44>
   1dc84:	mov	r2, r7
   1dc88:	ldrb	r3, [r2, #1]!
   1dc8c:	sub	r0, r3, #48	; 0x30
   1dc90:	cmp	r0, #9
   1dc94:	bls	1dc88 <__assert_fail@plt+0xc564>
   1dc98:	cmp	r3, #36	; 0x24
   1dc9c:	bne	1d55c <__assert_fail@plt+0xbe38>
   1dca0:	mov	r2, #0
   1dca4:	b	1dcb0 <__assert_fail@plt+0xc58c>
   1dca8:	cmp	ip, #9
   1dcac:	bhi	1dd48 <__assert_fail@plt+0xc624>
   1dcb0:	ldr	r3, [pc, #272]	; 1ddc8 <__assert_fail@plt+0xc6a4>
   1dcb4:	mov	r0, r7
   1dcb8:	cmp	r2, r3
   1dcbc:	addls	r2, r2, r2, lsl #2
   1dcc0:	mvnhi	r3, #0
   1dcc4:	lslls	r3, r2, #1
   1dcc8:	ldrb	ip, [r7, #1]!
   1dccc:	adds	r3, r1, r3
   1dcd0:	mov	r2, r3
   1dcd4:	sub	r1, ip, #48	; 0x30
   1dcd8:	uxtb	ip, r1
   1dcdc:	bcc	1dca8 <__assert_fail@plt+0xc584>
   1dce0:	cmp	ip, #9
   1dce4:	mvn	r3, #0
   1dce8:	mov	r0, r7
   1dcec:	bls	1dcc8 <__assert_fail@plt+0xc5a4>
   1dcf0:	b	1d728 <__assert_fail@plt+0xc004>
   1dcf4:	sub	r8, r3, #1
   1dcf8:	cmn	r8, #3
   1dcfc:	bhi	1d728 <__assert_fail@plt+0xc004>
   1dd00:	add	r5, r1, #2
   1dd04:	ldrb	r4, [r1, #2]
   1dd08:	b	1d240 <__assert_fail@plt+0xbb1c>
   1dd0c:	mov	r0, r1
   1dd10:	bl	114e4 <malloc@plt>
   1dd14:	subs	r3, r0, #0
   1dd18:	beq	1db54 <__assert_fail@plt+0xc430>
   1dd1c:	ldr	r2, [fp]
   1dd20:	lsl	r2, r2, #4
   1dd24:	mov	r1, sl
   1dd28:	mov	r0, r3
   1dd2c:	bl	113a0 <memcpy@plt>
   1dd30:	ldr	r2, [fp]
   1dd34:	mov	sl, r0
   1dd38:	b	1dbe0 <__assert_fail@plt+0xc4bc>
   1dd3c:	mov	r5, r7
   1dd40:	mov	r3, #1
   1dd44:	b	1d79c <__assert_fail@plt+0xc078>
   1dd48:	sub	r4, r3, #1
   1dd4c:	cmn	r4, #3
   1dd50:	bhi	1d728 <__assert_fail@plt+0xc004>
   1dd54:	str	r4, [r6, #32]
   1dd58:	add	r7, r0, #2
   1dd5c:	b	1d568 <__assert_fail@plt+0xbe44>
   1dd60:	mov	sl, fp
   1dd64:	ldr	fp, [sp, #4]
   1dd68:	ldr	r3, [sl, #4]
   1dd6c:	ldr	r2, [sp, #12]
   1dd70:	cmp	r2, r3
   1dd74:	bne	1dc58 <__assert_fail@plt+0xc534>
   1dd78:	b	1db58 <__assert_fail@plt+0xc434>
   1dd7c:	sub	r4, r2, #1
   1dd80:	cmn	r4, #3
   1dd84:	bhi	1d728 <__assert_fail@plt+0xc004>
   1dd88:	str	r4, [r6, #20]
   1dd8c:	add	r7, r0, #2
   1dd90:	b	1d4c0 <__assert_fail@plt+0xbd9c>
   1dd94:	mov	r3, sl
   1dd98:	ldr	sl, [sp, #12]
   1dd9c:	b	1dd20 <__assert_fail@plt+0xc5fc>
   1dda0:	mov	r3, sl
   1dda4:	mov	sl, r2
   1dda8:	b	1db28 <__assert_fail@plt+0xc404>
   1ddac:	mov	r3, sl
   1ddb0:	ldr	fp, [sp, #4]
   1ddb4:	b	1dd6c <__assert_fail@plt+0xc648>
   1ddb8:	mov	r3, sl
   1ddbc:	ldr	sl, [sp, #12]
   1ddc0:	b	1dc24 <__assert_fail@plt+0xc500>
   1ddc4:	ldrbeq	r7, [r1, #1117]	; 0x45d
   1ddc8:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1ddcc:	subs	r2, r1, #1
   1ddd0:	bxeq	lr
   1ddd4:	bcc	1dfac <__assert_fail@plt+0xc888>
   1ddd8:	cmp	r0, r1
   1dddc:	bls	1df90 <__assert_fail@plt+0xc86c>
   1dde0:	tst	r1, r2
   1dde4:	beq	1df9c <__assert_fail@plt+0xc878>
   1dde8:	clz	r3, r0
   1ddec:	clz	r2, r1
   1ddf0:	sub	r3, r2, r3
   1ddf4:	rsbs	r3, r3, #31
   1ddf8:	addne	r3, r3, r3, lsl #1
   1ddfc:	mov	r2, #0
   1de00:	addne	pc, pc, r3, lsl #2
   1de04:	nop			; (mov r0, r0)
   1de08:	cmp	r0, r1, lsl #31
   1de0c:	adc	r2, r2, r2
   1de10:	subcs	r0, r0, r1, lsl #31
   1de14:	cmp	r0, r1, lsl #30
   1de18:	adc	r2, r2, r2
   1de1c:	subcs	r0, r0, r1, lsl #30
   1de20:	cmp	r0, r1, lsl #29
   1de24:	adc	r2, r2, r2
   1de28:	subcs	r0, r0, r1, lsl #29
   1de2c:	cmp	r0, r1, lsl #28
   1de30:	adc	r2, r2, r2
   1de34:	subcs	r0, r0, r1, lsl #28
   1de38:	cmp	r0, r1, lsl #27
   1de3c:	adc	r2, r2, r2
   1de40:	subcs	r0, r0, r1, lsl #27
   1de44:	cmp	r0, r1, lsl #26
   1de48:	adc	r2, r2, r2
   1de4c:	subcs	r0, r0, r1, lsl #26
   1de50:	cmp	r0, r1, lsl #25
   1de54:	adc	r2, r2, r2
   1de58:	subcs	r0, r0, r1, lsl #25
   1de5c:	cmp	r0, r1, lsl #24
   1de60:	adc	r2, r2, r2
   1de64:	subcs	r0, r0, r1, lsl #24
   1de68:	cmp	r0, r1, lsl #23
   1de6c:	adc	r2, r2, r2
   1de70:	subcs	r0, r0, r1, lsl #23
   1de74:	cmp	r0, r1, lsl #22
   1de78:	adc	r2, r2, r2
   1de7c:	subcs	r0, r0, r1, lsl #22
   1de80:	cmp	r0, r1, lsl #21
   1de84:	adc	r2, r2, r2
   1de88:	subcs	r0, r0, r1, lsl #21
   1de8c:	cmp	r0, r1, lsl #20
   1de90:	adc	r2, r2, r2
   1de94:	subcs	r0, r0, r1, lsl #20
   1de98:	cmp	r0, r1, lsl #19
   1de9c:	adc	r2, r2, r2
   1dea0:	subcs	r0, r0, r1, lsl #19
   1dea4:	cmp	r0, r1, lsl #18
   1dea8:	adc	r2, r2, r2
   1deac:	subcs	r0, r0, r1, lsl #18
   1deb0:	cmp	r0, r1, lsl #17
   1deb4:	adc	r2, r2, r2
   1deb8:	subcs	r0, r0, r1, lsl #17
   1debc:	cmp	r0, r1, lsl #16
   1dec0:	adc	r2, r2, r2
   1dec4:	subcs	r0, r0, r1, lsl #16
   1dec8:	cmp	r0, r1, lsl #15
   1decc:	adc	r2, r2, r2
   1ded0:	subcs	r0, r0, r1, lsl #15
   1ded4:	cmp	r0, r1, lsl #14
   1ded8:	adc	r2, r2, r2
   1dedc:	subcs	r0, r0, r1, lsl #14
   1dee0:	cmp	r0, r1, lsl #13
   1dee4:	adc	r2, r2, r2
   1dee8:	subcs	r0, r0, r1, lsl #13
   1deec:	cmp	r0, r1, lsl #12
   1def0:	adc	r2, r2, r2
   1def4:	subcs	r0, r0, r1, lsl #12
   1def8:	cmp	r0, r1, lsl #11
   1defc:	adc	r2, r2, r2
   1df00:	subcs	r0, r0, r1, lsl #11
   1df04:	cmp	r0, r1, lsl #10
   1df08:	adc	r2, r2, r2
   1df0c:	subcs	r0, r0, r1, lsl #10
   1df10:	cmp	r0, r1, lsl #9
   1df14:	adc	r2, r2, r2
   1df18:	subcs	r0, r0, r1, lsl #9
   1df1c:	cmp	r0, r1, lsl #8
   1df20:	adc	r2, r2, r2
   1df24:	subcs	r0, r0, r1, lsl #8
   1df28:	cmp	r0, r1, lsl #7
   1df2c:	adc	r2, r2, r2
   1df30:	subcs	r0, r0, r1, lsl #7
   1df34:	cmp	r0, r1, lsl #6
   1df38:	adc	r2, r2, r2
   1df3c:	subcs	r0, r0, r1, lsl #6
   1df40:	cmp	r0, r1, lsl #5
   1df44:	adc	r2, r2, r2
   1df48:	subcs	r0, r0, r1, lsl #5
   1df4c:	cmp	r0, r1, lsl #4
   1df50:	adc	r2, r2, r2
   1df54:	subcs	r0, r0, r1, lsl #4
   1df58:	cmp	r0, r1, lsl #3
   1df5c:	adc	r2, r2, r2
   1df60:	subcs	r0, r0, r1, lsl #3
   1df64:	cmp	r0, r1, lsl #2
   1df68:	adc	r2, r2, r2
   1df6c:	subcs	r0, r0, r1, lsl #2
   1df70:	cmp	r0, r1, lsl #1
   1df74:	adc	r2, r2, r2
   1df78:	subcs	r0, r0, r1, lsl #1
   1df7c:	cmp	r0, r1
   1df80:	adc	r2, r2, r2
   1df84:	subcs	r0, r0, r1
   1df88:	mov	r0, r2
   1df8c:	bx	lr
   1df90:	moveq	r0, #1
   1df94:	movne	r0, #0
   1df98:	bx	lr
   1df9c:	clz	r2, r1
   1dfa0:	rsb	r2, r2, #31
   1dfa4:	lsr	r0, r0, r2
   1dfa8:	bx	lr
   1dfac:	cmp	r0, #0
   1dfb0:	mvnne	r0, #0
   1dfb4:	b	1e3d4 <__assert_fail@plt+0xccb0>
   1dfb8:	cmp	r1, #0
   1dfbc:	beq	1dfac <__assert_fail@plt+0xc888>
   1dfc0:	push	{r0, r1, lr}
   1dfc4:	bl	1ddcc <__assert_fail@plt+0xc6a8>
   1dfc8:	pop	{r1, r2, lr}
   1dfcc:	mul	r3, r2, r0
   1dfd0:	sub	r1, r1, r3
   1dfd4:	bx	lr
   1dfd8:	eor	r1, r1, #-2147483648	; 0x80000000
   1dfdc:	b	1dfe4 <__assert_fail@plt+0xc8c0>
   1dfe0:	eor	r3, r3, #-2147483648	; 0x80000000
   1dfe4:	push	{r4, r5, lr}
   1dfe8:	lsl	r4, r1, #1
   1dfec:	lsl	r5, r3, #1
   1dff0:	teq	r4, r5
   1dff4:	teqeq	r0, r2
   1dff8:	orrsne	ip, r4, r0
   1dffc:	orrsne	ip, r5, r2
   1e000:	mvnsne	ip, r4, asr #21
   1e004:	mvnsne	ip, r5, asr #21
   1e008:	beq	1e1f4 <__assert_fail@plt+0xcad0>
   1e00c:	lsr	r4, r4, #21
   1e010:	rsbs	r5, r4, r5, lsr #21
   1e014:	rsblt	r5, r5, #0
   1e018:	ble	1e038 <__assert_fail@plt+0xc914>
   1e01c:	add	r4, r4, r5
   1e020:	eor	r2, r0, r2
   1e024:	eor	r3, r1, r3
   1e028:	eor	r0, r2, r0
   1e02c:	eor	r1, r3, r1
   1e030:	eor	r2, r0, r2
   1e034:	eor	r3, r1, r3
   1e038:	cmp	r5, #54	; 0x36
   1e03c:	pophi	{r4, r5, pc}
   1e040:	tst	r1, #-2147483648	; 0x80000000
   1e044:	lsl	r1, r1, #12
   1e048:	mov	ip, #1048576	; 0x100000
   1e04c:	orr	r1, ip, r1, lsr #12
   1e050:	beq	1e05c <__assert_fail@plt+0xc938>
   1e054:	rsbs	r0, r0, #0
   1e058:	rsc	r1, r1, #0
   1e05c:	tst	r3, #-2147483648	; 0x80000000
   1e060:	lsl	r3, r3, #12
   1e064:	orr	r3, ip, r3, lsr #12
   1e068:	beq	1e074 <__assert_fail@plt+0xc950>
   1e06c:	rsbs	r2, r2, #0
   1e070:	rsc	r3, r3, #0
   1e074:	teq	r4, r5
   1e078:	beq	1e1dc <__assert_fail@plt+0xcab8>
   1e07c:	sub	r4, r4, #1
   1e080:	rsbs	lr, r5, #32
   1e084:	blt	1e0a0 <__assert_fail@plt+0xc97c>
   1e088:	lsl	ip, r2, lr
   1e08c:	adds	r0, r0, r2, lsr r5
   1e090:	adc	r1, r1, #0
   1e094:	adds	r0, r0, r3, lsl lr
   1e098:	adcs	r1, r1, r3, asr r5
   1e09c:	b	1e0bc <__assert_fail@plt+0xc998>
   1e0a0:	sub	r5, r5, #32
   1e0a4:	add	lr, lr, #32
   1e0a8:	cmp	r2, #1
   1e0ac:	lsl	ip, r3, lr
   1e0b0:	orrcs	ip, ip, #2
   1e0b4:	adds	r0, r0, r3, asr r5
   1e0b8:	adcs	r1, r1, r3, asr #31
   1e0bc:	and	r5, r1, #-2147483648	; 0x80000000
   1e0c0:	bpl	1e0d0 <__assert_fail@plt+0xc9ac>
   1e0c4:	rsbs	ip, ip, #0
   1e0c8:	rscs	r0, r0, #0
   1e0cc:	rsc	r1, r1, #0
   1e0d0:	cmp	r1, #1048576	; 0x100000
   1e0d4:	bcc	1e114 <__assert_fail@plt+0xc9f0>
   1e0d8:	cmp	r1, #2097152	; 0x200000
   1e0dc:	bcc	1e0fc <__assert_fail@plt+0xc9d8>
   1e0e0:	lsrs	r1, r1, #1
   1e0e4:	rrxs	r0, r0
   1e0e8:	rrx	ip, ip
   1e0ec:	add	r4, r4, #1
   1e0f0:	lsl	r2, r4, #21
   1e0f4:	cmn	r2, #4194304	; 0x400000
   1e0f8:	bcs	1e254 <__assert_fail@plt+0xcb30>
   1e0fc:	cmp	ip, #-2147483648	; 0x80000000
   1e100:	lsrseq	ip, r0, #1
   1e104:	adcs	r0, r0, #0
   1e108:	adc	r1, r1, r4, lsl #20
   1e10c:	orr	r1, r1, r5
   1e110:	pop	{r4, r5, pc}
   1e114:	lsls	ip, ip, #1
   1e118:	adcs	r0, r0, r0
   1e11c:	adc	r1, r1, r1
   1e120:	tst	r1, #1048576	; 0x100000
   1e124:	sub	r4, r4, #1
   1e128:	bne	1e0fc <__assert_fail@plt+0xc9d8>
   1e12c:	teq	r1, #0
   1e130:	moveq	r1, r0
   1e134:	moveq	r0, #0
   1e138:	clz	r3, r1
   1e13c:	addeq	r3, r3, #32
   1e140:	sub	r3, r3, #11
   1e144:	subs	r2, r3, #32
   1e148:	bge	1e16c <__assert_fail@plt+0xca48>
   1e14c:	adds	r2, r2, #12
   1e150:	ble	1e168 <__assert_fail@plt+0xca44>
   1e154:	add	ip, r2, #20
   1e158:	rsb	r2, r2, #12
   1e15c:	lsl	r0, r1, ip
   1e160:	lsr	r1, r1, r2
   1e164:	b	1e17c <__assert_fail@plt+0xca58>
   1e168:	add	r2, r2, #20
   1e16c:	rsble	ip, r2, #32
   1e170:	lsl	r1, r1, r2
   1e174:	orrle	r1, r1, r0, lsr ip
   1e178:	lslle	r0, r0, r2
   1e17c:	subs	r4, r4, r3
   1e180:	addge	r1, r1, r4, lsl #20
   1e184:	orrge	r1, r1, r5
   1e188:	popge	{r4, r5, pc}
   1e18c:	mvn	r4, r4
   1e190:	subs	r4, r4, #31
   1e194:	bge	1e1d0 <__assert_fail@plt+0xcaac>
   1e198:	adds	r4, r4, #12
   1e19c:	bgt	1e1b8 <__assert_fail@plt+0xca94>
   1e1a0:	add	r4, r4, #20
   1e1a4:	rsb	r2, r4, #32
   1e1a8:	lsr	r0, r0, r4
   1e1ac:	orr	r0, r0, r1, lsl r2
   1e1b0:	orr	r1, r5, r1, lsr r4
   1e1b4:	pop	{r4, r5, pc}
   1e1b8:	rsb	r4, r4, #12
   1e1bc:	rsb	r2, r4, #32
   1e1c0:	lsr	r0, r0, r2
   1e1c4:	orr	r0, r0, r1, lsl r4
   1e1c8:	mov	r1, r5
   1e1cc:	pop	{r4, r5, pc}
   1e1d0:	lsr	r0, r1, r4
   1e1d4:	mov	r1, r5
   1e1d8:	pop	{r4, r5, pc}
   1e1dc:	teq	r4, #0
   1e1e0:	eor	r3, r3, #1048576	; 0x100000
   1e1e4:	eoreq	r1, r1, #1048576	; 0x100000
   1e1e8:	addeq	r4, r4, #1
   1e1ec:	subne	r5, r5, #1
   1e1f0:	b	1e07c <__assert_fail@plt+0xc958>
   1e1f4:	mvns	ip, r4, asr #21
   1e1f8:	mvnsne	ip, r5, asr #21
   1e1fc:	beq	1e264 <__assert_fail@plt+0xcb40>
   1e200:	teq	r4, r5
   1e204:	teqeq	r0, r2
   1e208:	beq	1e21c <__assert_fail@plt+0xcaf8>
   1e20c:	orrs	ip, r4, r0
   1e210:	moveq	r1, r3
   1e214:	moveq	r0, r2
   1e218:	pop	{r4, r5, pc}
   1e21c:	teq	r1, r3
   1e220:	movne	r1, #0
   1e224:	movne	r0, #0
   1e228:	popne	{r4, r5, pc}
   1e22c:	lsrs	ip, r4, #21
   1e230:	bne	1e244 <__assert_fail@plt+0xcb20>
   1e234:	lsls	r0, r0, #1
   1e238:	adcs	r1, r1, r1
   1e23c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1e240:	pop	{r4, r5, pc}
   1e244:	adds	r4, r4, #4194304	; 0x400000
   1e248:	addcc	r1, r1, #1048576	; 0x100000
   1e24c:	popcc	{r4, r5, pc}
   1e250:	and	r5, r1, #-2147483648	; 0x80000000
   1e254:	orr	r1, r5, #2130706432	; 0x7f000000
   1e258:	orr	r1, r1, #15728640	; 0xf00000
   1e25c:	mov	r0, #0
   1e260:	pop	{r4, r5, pc}
   1e264:	mvns	ip, r4, asr #21
   1e268:	movne	r1, r3
   1e26c:	movne	r0, r2
   1e270:	mvnseq	ip, r5, asr #21
   1e274:	movne	r3, r1
   1e278:	movne	r2, r0
   1e27c:	orrs	r4, r0, r1, lsl #12
   1e280:	orrseq	r5, r2, r3, lsl #12
   1e284:	teqeq	r1, r3
   1e288:	orrne	r1, r1, #524288	; 0x80000
   1e28c:	pop	{r4, r5, pc}
   1e290:	teq	r0, #0
   1e294:	moveq	r1, #0
   1e298:	bxeq	lr
   1e29c:	push	{r4, r5, lr}
   1e2a0:	mov	r4, #1024	; 0x400
   1e2a4:	add	r4, r4, #50	; 0x32
   1e2a8:	mov	r5, #0
   1e2ac:	mov	r1, #0
   1e2b0:	b	1e12c <__assert_fail@plt+0xca08>
   1e2b4:	teq	r0, #0
   1e2b8:	moveq	r1, #0
   1e2bc:	bxeq	lr
   1e2c0:	push	{r4, r5, lr}
   1e2c4:	mov	r4, #1024	; 0x400
   1e2c8:	add	r4, r4, #50	; 0x32
   1e2cc:	ands	r5, r0, #-2147483648	; 0x80000000
   1e2d0:	rsbmi	r0, r0, #0
   1e2d4:	mov	r1, #0
   1e2d8:	b	1e12c <__assert_fail@plt+0xca08>
   1e2dc:	lsls	r2, r0, #1
   1e2e0:	asr	r1, r2, #3
   1e2e4:	rrx	r1, r1
   1e2e8:	lsl	r0, r2, #28
   1e2ec:	andsne	r3, r2, #-16777216	; 0xff000000
   1e2f0:	teqne	r3, #-16777216	; 0xff000000
   1e2f4:	eorne	r1, r1, #939524096	; 0x38000000
   1e2f8:	bxne	lr
   1e2fc:	bics	r2, r2, #-16777216	; 0xff000000
   1e300:	bxeq	lr
   1e304:	teq	r3, #-16777216	; 0xff000000
   1e308:	orreq	r1, r1, #524288	; 0x80000
   1e30c:	bxeq	lr
   1e310:	push	{r4, r5, lr}
   1e314:	mov	r4, #896	; 0x380
   1e318:	and	r5, r1, #-2147483648	; 0x80000000
   1e31c:	bic	r1, r1, #-2147483648	; 0x80000000
   1e320:	b	1e12c <__assert_fail@plt+0xca08>
   1e324:	orrs	r2, r0, r1
   1e328:	bxeq	lr
   1e32c:	push	{r4, r5, lr}
   1e330:	mov	r5, #0
   1e334:	b	1e354 <__assert_fail@plt+0xcc30>
   1e338:	orrs	r2, r0, r1
   1e33c:	bxeq	lr
   1e340:	push	{r4, r5, lr}
   1e344:	ands	r5, r1, #-2147483648	; 0x80000000
   1e348:	bpl	1e354 <__assert_fail@plt+0xcc30>
   1e34c:	rsbs	r0, r0, #0
   1e350:	rsc	r1, r1, #0
   1e354:	mov	r4, #1024	; 0x400
   1e358:	add	r4, r4, #50	; 0x32
   1e35c:	lsrs	ip, r1, #22
   1e360:	beq	1e0d0 <__assert_fail@plt+0xc9ac>
   1e364:	mov	r2, #3
   1e368:	lsrs	ip, ip, #3
   1e36c:	addne	r2, r2, #3
   1e370:	lsrs	ip, ip, #3
   1e374:	addne	r2, r2, #3
   1e378:	add	r2, r2, ip, lsr #3
   1e37c:	rsb	r3, r2, #32
   1e380:	lsl	ip, r0, r3
   1e384:	lsr	r0, r0, r2
   1e388:	orr	r0, r0, r1, lsl r3
   1e38c:	lsr	r1, r1, r2
   1e390:	add	r4, r4, r2
   1e394:	b	1e0d0 <__assert_fail@plt+0xc9ac>
   1e398:	cmp	r3, #0
   1e39c:	cmpeq	r2, #0
   1e3a0:	bne	1e3b8 <__assert_fail@plt+0xcc94>
   1e3a4:	cmp	r1, #0
   1e3a8:	cmpeq	r0, #0
   1e3ac:	mvnne	r1, #0
   1e3b0:	mvnne	r0, #0
   1e3b4:	b	1e3d4 <__assert_fail@plt+0xccb0>
   1e3b8:	sub	sp, sp, #8
   1e3bc:	push	{sp, lr}
   1e3c0:	bl	1e428 <__assert_fail@plt+0xcd04>
   1e3c4:	ldr	lr, [sp, #4]
   1e3c8:	add	sp, sp, #8
   1e3cc:	pop	{r2, r3}
   1e3d0:	bx	lr
   1e3d4:	push	{r1, lr}
   1e3d8:	mov	r0, #8
   1e3dc:	bl	11334 <raise@plt>
   1e3e0:	pop	{r1, pc}
   1e3e4:	andeq	r0, r0, r0
   1e3e8:	vmov	d6, r0, r1
   1e3ec:	vldr	d7, [pc, #36]	; 1e418 <__assert_fail@plt+0xccf4>
   1e3f0:	vldr	d5, [pc, #40]	; 1e420 <__assert_fail@plt+0xccfc>
   1e3f4:	vmul.f64	d7, d6, d7
   1e3f8:	vcvt.u32.f64	s14, d7
   1e3fc:	vcvt.f64.u32	d4, s14
   1e400:	vmov	r1, s14
   1e404:	vmls.f64	d6, d4, d5
   1e408:	vcvt.u32.f64	s15, d6
   1e40c:	vmov	r0, s15
   1e410:	bx	lr
   1e414:	nop			; (mov r0, r0)
   1e418:	andeq	r0, r0, r0
   1e41c:	ldclcc	0, cr0, [r0]
   1e420:	andeq	r0, r0, r0
   1e424:	mvnsmi	r0, r0
   1e428:	cmp	r1, r3
   1e42c:	cmpeq	r0, r2
   1e430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e434:	mov	r4, r0
   1e438:	movcc	r0, #0
   1e43c:	mov	r5, r1
   1e440:	ldr	lr, [sp, #36]	; 0x24
   1e444:	movcc	r1, r0
   1e448:	bcc	1e544 <__assert_fail@plt+0xce20>
   1e44c:	cmp	r3, #0
   1e450:	clzeq	ip, r2
   1e454:	clzne	ip, r3
   1e458:	addeq	ip, ip, #32
   1e45c:	cmp	r5, #0
   1e460:	clzeq	r1, r4
   1e464:	addeq	r1, r1, #32
   1e468:	clzne	r1, r5
   1e46c:	sub	ip, ip, r1
   1e470:	sub	sl, ip, #32
   1e474:	lsl	r9, r3, ip
   1e478:	rsb	fp, ip, #32
   1e47c:	orr	r9, r9, r2, lsl sl
   1e480:	orr	r9, r9, r2, lsr fp
   1e484:	lsl	r8, r2, ip
   1e488:	cmp	r5, r9
   1e48c:	cmpeq	r4, r8
   1e490:	movcc	r0, #0
   1e494:	movcc	r1, r0
   1e498:	bcc	1e4b4 <__assert_fail@plt+0xcd90>
   1e49c:	mov	r0, #1
   1e4a0:	subs	r4, r4, r8
   1e4a4:	lsl	r1, r0, sl
   1e4a8:	orr	r1, r1, r0, lsr fp
   1e4ac:	lsl	r0, r0, ip
   1e4b0:	sbc	r5, r5, r9
   1e4b4:	cmp	ip, #0
   1e4b8:	beq	1e544 <__assert_fail@plt+0xce20>
   1e4bc:	lsr	r6, r8, #1
   1e4c0:	orr	r6, r6, r9, lsl #31
   1e4c4:	lsr	r7, r9, #1
   1e4c8:	mov	r2, ip
   1e4cc:	b	1e4f0 <__assert_fail@plt+0xcdcc>
   1e4d0:	subs	r3, r4, r6
   1e4d4:	sbc	r8, r5, r7
   1e4d8:	adds	r3, r3, r3
   1e4dc:	adc	r8, r8, r8
   1e4e0:	adds	r4, r3, #1
   1e4e4:	adc	r5, r8, #0
   1e4e8:	subs	r2, r2, #1
   1e4ec:	beq	1e50c <__assert_fail@plt+0xcde8>
   1e4f0:	cmp	r5, r7
   1e4f4:	cmpeq	r4, r6
   1e4f8:	bcs	1e4d0 <__assert_fail@plt+0xcdac>
   1e4fc:	adds	r4, r4, r4
   1e500:	adc	r5, r5, r5
   1e504:	subs	r2, r2, #1
   1e508:	bne	1e4f0 <__assert_fail@plt+0xcdcc>
   1e50c:	lsr	r3, r4, ip
   1e510:	orr	r3, r3, r5, lsl fp
   1e514:	lsr	r2, r5, ip
   1e518:	orr	r3, r3, r5, lsr sl
   1e51c:	adds	r0, r0, r4
   1e520:	mov	r4, r3
   1e524:	lsl	r3, r2, ip
   1e528:	orr	r3, r3, r4, lsl sl
   1e52c:	lsl	ip, r4, ip
   1e530:	orr	r3, r3, r4, lsr fp
   1e534:	adc	r1, r1, r5
   1e538:	subs	r0, r0, ip
   1e53c:	mov	r5, r2
   1e540:	sbc	r1, r1, r3
   1e544:	cmp	lr, #0
   1e548:	strdne	r4, [lr]
   1e54c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e550:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e554:	mov	r7, r0
   1e558:	ldr	r6, [pc, #72]	; 1e5a8 <__assert_fail@plt+0xce84>
   1e55c:	ldr	r5, [pc, #72]	; 1e5ac <__assert_fail@plt+0xce88>
   1e560:	add	r6, pc, r6
   1e564:	add	r5, pc, r5
   1e568:	sub	r6, r6, r5
   1e56c:	mov	r8, r1
   1e570:	mov	r9, r2
   1e574:	bl	112f0 <calloc@plt-0x20>
   1e578:	asrs	r6, r6, #2
   1e57c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e580:	mov	r4, #0
   1e584:	add	r4, r4, #1
   1e588:	ldr	r3, [r5], #4
   1e58c:	mov	r2, r9
   1e590:	mov	r1, r8
   1e594:	mov	r0, r7
   1e598:	blx	r3
   1e59c:	cmp	r6, r4
   1e5a0:	bne	1e584 <__assert_fail@plt+0xce60>
   1e5a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e5a8:	muleq	r1, ip, r9
   1e5ac:	muleq	r1, r4, r9
   1e5b0:	bx	lr
   1e5b4:	ldr	r3, [pc, #12]	; 1e5c8 <__assert_fail@plt+0xcea4>
   1e5b8:	mov	r1, #0
   1e5bc:	add	r3, pc, r3
   1e5c0:	ldr	r2, [r3]
   1e5c4:	b	11598 <__cxa_atexit@plt>
   1e5c8:			; <UNDEFINED> instruction: 0x00011bb0

Disassembly of section .fini:

0001e5cc <.fini>:
   1e5cc:	push	{r3, lr}
   1e5d0:	pop	{r3, pc}
