
raspbian-preinstalled/ulockmgr_server:     file format elf32-littlearm


Disassembly of section .init:

00010a34 <.init>:
   10a34:	push	{r3, lr}
   10a38:	bl	11318 <__assert_fail@plt+0x6f0>
   10a3c:	pop	{r3, pc}

Disassembly of section .plt:

00010a40 <pthread_mutex_unlock@plt-0x14>:
   10a40:	push	{lr}		; (str lr, [sp, #-4]!)
   10a44:	ldr	lr, [pc, #4]	; 10a50 <pthread_mutex_unlock@plt-0x4>
   10a48:	add	lr, pc, lr
   10a4c:	ldr	pc, [lr, #8]!
   10a50:	strdeq	r1, [r1], -ip

00010a54 <pthread_mutex_unlock@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #69632	; 0x11000
   10a5c:	ldr	pc, [ip, #1276]!	; 0x4fc

00010a60 <strtol@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #69632	; 0x11000
   10a68:	ldr	pc, [ip, #1268]!	; 0x4f4

00010a6c <sigprocmask@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #69632	; 0x11000
   10a74:	ldr	pc, [ip, #1260]!	; 0x4ec

00010a78 <free@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #69632	; 0x11000
   10a80:	ldr	pc, [ip, #1252]!	; 0x4e4

00010a84 <pthread_mutex_lock@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #69632	; 0x11000
   10a8c:	ldr	pc, [ip, #1244]!	; 0x4dc

00010a90 <pthread_detach@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #69632	; 0x11000
   10a98:	ldr	pc, [ip, #1236]!	; 0x4d4

00010a9c <_exit@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #69632	; 0x11000
   10aa4:	ldr	pc, [ip, #1228]!	; 0x4cc

00010aa8 <pthread_self@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #69632	; 0x11000
   10ab0:	ldr	pc, [ip, #1220]!	; 0x4c4

00010ab4 <memcpy@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #69632	; 0x11000
   10abc:	ldr	pc, [ip, #1212]!	; 0x4bc

00010ac0 <pthread_mutex_init@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #69632	; 0x11000
   10ac8:	ldr	pc, [ip, #1204]!	; 0x4b4

00010acc <__stack_chk_fail@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #69632	; 0x11000
   10ad4:	ldr	pc, [ip, #1196]!	; 0x4ac

00010ad8 <dup2@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #69632	; 0x11000
   10ae0:	ldr	pc, [ip, #1188]!	; 0x4a4

00010ae4 <chdir@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #69632	; 0x11000
   10aec:	ldr	pc, [ip, #1180]!	; 0x49c

00010af0 <perror@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #69632	; 0x11000
   10af8:	ldr	pc, [ip, #1172]!	; 0x494

00010afc <sigaction@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #69632	; 0x11000
   10b04:	ldr	pc, [ip, #1164]!	; 0x48c

00010b08 <fwrite@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #69632	; 0x11000
   10b10:	ldr	pc, [ip, #1156]!	; 0x484

00010b14 <waitpid@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #69632	; 0x11000
   10b1c:	ldr	pc, [ip, #1148]!	; 0x47c

00010b20 <pthread_create@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #69632	; 0x11000
   10b28:	ldr	pc, [ip, #1140]!	; 0x474

00010b2c <opendir@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #69632	; 0x11000
   10b34:	ldr	pc, [ip, #1132]!	; 0x46c

00010b38 <open64@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #69632	; 0x11000
   10b40:	ldr	pc, [ip, #1124]!	; 0x464

00010b44 <malloc@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #69632	; 0x11000
   10b4c:	ldr	pc, [ip, #1116]!	; 0x45c

00010b50 <__libc_start_main@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #69632	; 0x11000
   10b58:	ldr	pc, [ip, #1108]!	; 0x454

00010b5c <__gmon_start__@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #69632	; 0x11000
   10b64:	ldr	pc, [ip, #1100]!	; 0x44c

00010b68 <exit@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #69632	; 0x11000
   10b70:	ldr	pc, [ip, #1092]!	; 0x444

00010b74 <setsid@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #69632	; 0x11000
   10b7c:	ldr	pc, [ip, #1084]!	; 0x43c

00010b80 <__errno_location@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #69632	; 0x11000
   10b88:	ldr	pc, [ip, #1076]!	; 0x434

00010b8c <memset@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #69632	; 0x11000
   10b94:	ldr	pc, [ip, #1068]!	; 0x42c

00010b98 <__fprintf_chk@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #69632	; 0x11000
   10ba0:	ldr	pc, [ip, #1060]!	; 0x424

00010ba4 <pthread_kill@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #69632	; 0x11000
   10bac:	ldr	pc, [ip, #1052]!	; 0x41c

00010bb0 <fcntl64@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #69632	; 0x11000
   10bb8:	ldr	pc, [ip, #1044]!	; 0x414

00010bbc <sigemptyset@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #69632	; 0x11000
   10bc4:	ldr	pc, [ip, #1036]!	; 0x40c

00010bc8 <fork@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #69632	; 0x11000
   10bd0:	ldr	pc, [ip, #1028]!	; 0x404

00010bd4 <readdir64@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #69632	; 0x11000
   10bdc:	ldr	pc, [ip, #1020]!	; 0x3fc

00010be0 <dirfd@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #69632	; 0x11000
   10be8:	ldr	pc, [ip, #1012]!	; 0x3f4

00010bec <recvmsg@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #69632	; 0x11000
   10bf4:	ldr	pc, [ip, #1004]!	; 0x3ec

00010bf8 <abort@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #69632	; 0x11000
   10c00:	ldr	pc, [ip, #996]!	; 0x3e4

00010c04 <close@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #69632	; 0x11000
   10c0c:	ldr	pc, [ip, #988]!	; 0x3dc

00010c10 <send@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #69632	; 0x11000
   10c18:	ldr	pc, [ip, #980]!	; 0x3d4

00010c1c <closedir@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #69632	; 0x11000
   10c24:	ldr	pc, [ip, #972]!	; 0x3cc

00010c28 <__assert_fail@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #69632	; 0x11000
   10c30:	ldr	pc, [ip, #964]!	; 0x3c4

Disassembly of section .text:

00010c34 <.text>:
   10c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c38:	sub	sp, sp, #412	; 0x19c
   10c3c:	ldr	r4, [pc, #1612]	; 11290 <__assert_fail@plt+0x668>
   10c40:	cmp	r0, #2
   10c44:	mov	r5, r1
   10c48:	ldr	r3, [r4]
   10c4c:	str	r3, [sp, #404]	; 0x194
   10c50:	bne	10c68 <__assert_fail@plt+0x40>
   10c54:	mov	r6, r0
   10c58:	ldr	r0, [r1, #4]
   10c5c:	ldrb	r3, [r0]
   10c60:	cmp	r3, #0
   10c64:	bne	10c9c <__assert_fail@plt+0x74>
   10c68:	ldr	r1, [pc, #1572]	; 11294 <__assert_fail@plt+0x66c>
   10c6c:	ldr	r3, [r5]
   10c70:	ldr	r2, [pc, #1568]	; 11298 <__assert_fail@plt+0x670>
   10c74:	ldr	r0, [r1]
   10c78:	mov	r1, #1
   10c7c:	bl	10b98 <__fprintf_chk@plt>
   10c80:	mov	r0, #1
   10c84:	ldr	r2, [sp, #404]	; 0x194
   10c88:	ldr	r3, [r4]
   10c8c:	cmp	r2, r3
   10c90:	bne	11230 <__assert_fail@plt+0x608>
   10c94:	add	sp, sp, #412	; 0x19c
   10c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c9c:	mov	r2, #10
   10ca0:	add	r1, sp, #20
   10ca4:	bl	10a60 <strtol@plt>
   10ca8:	ldr	r3, [sp, #20]
   10cac:	ldrb	r7, [r3]
   10cb0:	cmp	r7, #0
   10cb4:	mov	r8, r0
   10cb8:	bne	10c68 <__assert_fail@plt+0x40>
   10cbc:	bl	10bc8 <fork@plt>
   10cc0:	cmn	r0, #1
   10cc4:	mov	r5, r0
   10cc8:	beq	11240 <__assert_fail@plt+0x618>
   10ccc:	cmp	r0, #0
   10cd0:	bne	10e48 <__assert_fail@plt+0x220>
   10cd4:	bl	10b74 <setsid@plt>
   10cd8:	cmn	r0, #1
   10cdc:	beq	11260 <__assert_fail@plt+0x638>
   10ce0:	ldr	r0, [pc, #1460]	; 1129c <__assert_fail@plt+0x674>
   10ce4:	bl	10ae4 <chdir@plt>
   10ce8:	add	r0, sp, #136	; 0x88
   10cec:	bl	10bbc <sigemptyset@plt>
   10cf0:	mov	r2, r5
   10cf4:	add	r1, sp, #136	; 0x88
   10cf8:	mov	r0, r6
   10cfc:	bl	10a6c <sigprocmask@plt>
   10d00:	mov	r0, r8
   10d04:	mov	r1, #4
   10d08:	bl	10ad8 <dup2@plt>
   10d0c:	cmn	r0, #1
   10d10:	beq	11250 <__assert_fail@plt+0x628>
   10d14:	mov	r1, r6
   10d18:	ldr	r0, [pc, #1408]	; 112a0 <__assert_fail@plt+0x678>
   10d1c:	bl	10b38 <open64@plt>
   10d20:	subs	r6, r0, #0
   10d24:	bge	10e50 <__assert_fail@plt+0x228>
   10d28:	mov	r0, #3
   10d2c:	bl	10c04 <close@plt>
   10d30:	ldr	r0, [pc, #1388]	; 112a4 <__assert_fail@plt+0x67c>
   10d34:	bl	10b2c <opendir@plt>
   10d38:	subs	r6, r0, #0
   10d3c:	beq	10da0 <__assert_fail@plt+0x178>
   10d40:	bl	10be0 <dirfd@plt>
   10d44:	mov	r7, r0
   10d48:	mov	r0, r6
   10d4c:	bl	10bd4 <readdir64@plt>
   10d50:	subs	r5, r0, #0
   10d54:	beq	10d98 <__assert_fail@plt+0x170>
   10d58:	mov	r2, #10
   10d5c:	add	r1, sp, #40	; 0x28
   10d60:	add	r0, r5, #19
   10d64:	bl	10a60 <strtol@plt>
   10d68:	ldrb	r3, [r5, #19]
   10d6c:	cmp	r3, #0
   10d70:	beq	10d48 <__assert_fail@plt+0x120>
   10d74:	ldr	r3, [sp, #40]	; 0x28
   10d78:	ldrb	r3, [r3]
   10d7c:	cmp	r3, #0
   10d80:	bne	10d48 <__assert_fail@plt+0x120>
   10d84:	cmp	r7, r0
   10d88:	cmpne	r0, #4
   10d8c:	ble	10d48 <__assert_fail@plt+0x120>
   10d90:	bl	10c04 <close@plt>
   10d94:	b	10d48 <__assert_fail@plt+0x120>
   10d98:	mov	r0, r6
   10d9c:	bl	10c1c <closedir@plt>
   10da0:	ldr	r8, [pc, #1280]	; 112a8 <__assert_fail@plt+0x680>
   10da4:	add	r7, sp, #28
   10da8:	mov	r6, #1
   10dac:	b	10dcc <__assert_fail@plt+0x1a4>
   10db0:	cmp	r0, #0
   10db4:	beq	10e68 <__assert_fail@plt+0x240>
   10db8:	mov	r2, #0
   10dbc:	mov	r1, r2
   10dc0:	bl	10b14 <waitpid@plt>
   10dc4:	ldr	r0, [sp, #24]
   10dc8:	bl	10c04 <close@plt>
   10dcc:	str	r7, [sp]
   10dd0:	add	r3, sp, #24
   10dd4:	mov	r2, #1
   10dd8:	add	r1, sp, #19
   10ddc:	mov	r0, #4
   10de0:	str	r6, [sp, #28]
   10de4:	bl	114f4 <__assert_fail@plt+0x8cc>
   10de8:	cmp	r0, #0
   10dec:	beq	10c84 <__assert_fail@plt+0x5c>
   10df0:	cmn	r0, #1
   10df4:	beq	11228 <__assert_fail@plt+0x600>
   10df8:	ldr	r5, [sp, #28]
   10dfc:	cmp	r5, #1
   10e00:	bne	11214 <__assert_fail@plt+0x5ec>
   10e04:	bl	10bc8 <fork@plt>
   10e08:	cmn	r0, #1
   10e0c:	bne	10db0 <__assert_fail@plt+0x188>
   10e10:	mov	r0, r8
   10e14:	bl	10af0 <perror@plt>
   10e18:	ldr	r0, [sp, #24]
   10e1c:	bl	10c04 <close@plt>
   10e20:	b	10dcc <__assert_fail@plt+0x1a4>
   10e24:	ldr	r3, [sp, #108]	; 0x6c
   10e28:	cmp	r3, #0
   10e2c:	beq	10e48 <__assert_fail@plt+0x220>
   10e30:	ldr	r3, [pc, #1116]	; 11294 <__assert_fail@plt+0x66c>
   10e34:	mov	r2, #47	; 0x2f
   10e38:	mov	r1, #1
   10e3c:	ldr	r3, [r3]
   10e40:	ldr	r0, [pc, #1124]	; 112ac <__assert_fail@plt+0x684>
   10e44:	bl	10b08 <fwrite@plt>
   10e48:	mov	r0, #0
   10e4c:	bl	10a9c <_exit@plt>
   10e50:	mov	r1, r5
   10e54:	bl	10ad8 <dup2@plt>
   10e58:	mov	r0, r6
   10e5c:	mov	r1, #1
   10e60:	bl	10ad8 <dup2@plt>
   10e64:	b	10d28 <__assert_fail@plt+0x100>
   10e68:	mov	r0, #4
   10e6c:	bl	10c04 <close@plt>
   10e70:	bl	10bc8 <fork@plt>
   10e74:	cmn	r0, #1
   10e78:	mov	r4, r0
   10e7c:	beq	11270 <__assert_fail@plt+0x648>
   10e80:	cmp	r0, #0
   10e84:	bne	10e48 <__assert_fail@plt+0x220>
   10e88:	mov	r2, #136	; 0x88
   10e8c:	mov	r1, r4
   10e90:	add	r0, sp, #268	; 0x10c
   10e94:	ldr	r6, [sp, #24]
   10e98:	bl	10b8c <memset@plt>
   10e9c:	ldr	r3, [pc, #1036]	; 112b0 <__assert_fail@plt+0x688>
   10ea0:	add	r0, sp, #268	; 0x10c
   10ea4:	str	r3, [sp, #264]	; 0x108
   10ea8:	bl	10bbc <sigemptyset@plt>
   10eac:	mov	r2, r4
   10eb0:	add	r1, sp, #264	; 0x108
   10eb4:	mov	r0, #10
   10eb8:	bl	10afc <sigaction@plt>
   10ebc:	cmn	r0, #1
   10ec0:	beq	11280 <__assert_fail@plt+0x658>
   10ec4:	mov	r1, r4
   10ec8:	add	r0, sp, #112	; 0x70
   10ecc:	str	r4, [sp, #108]	; 0x6c
   10ed0:	str	r4, [sp, #112]	; 0x70
   10ed4:	str	r4, [sp, #116]	; 0x74
   10ed8:	str	r4, [sp, #120]	; 0x78
   10edc:	str	r4, [sp, #124]	; 0x7c
   10ee0:	str	r4, [sp, #128]	; 0x80
   10ee4:	str	r4, [sp, #132]	; 0x84
   10ee8:	bl	10ac0 <pthread_mutex_init@plt>
   10eec:	ldr	sl, [pc, #928]	; 11294 <__assert_fail@plt+0x66c>
   10ef0:	add	r5, sp, #32
   10ef4:	mov	ip, #2
   10ef8:	str	r5, [sp]
   10efc:	add	r3, sp, #100	; 0x64
   10f00:	mov	r2, #56	; 0x38
   10f04:	add	r1, sp, #40	; 0x28
   10f08:	mov	r0, r6
   10f0c:	str	ip, [sp, #32]
   10f10:	bl	114f4 <__assert_fail@plt+0x8cc>
   10f14:	cmp	r0, #0
   10f18:	beq	10e24 <__assert_fail@plt+0x1fc>
   10f1c:	cmn	r0, #1
   10f20:	beq	11228 <__assert_fail@plt+0x600>
   10f24:	ldrb	r3, [sp, #40]	; 0x28
   10f28:	ldr	r2, [sp, #32]
   10f2c:	tst	r3, #1
   10f30:	beq	10f4c <__assert_fail@plt+0x324>
   10f34:	cmp	r2, #0
   10f38:	bne	10fd8 <__assert_fail@plt+0x3b0>
   10f3c:	mov	r1, #10
   10f40:	ldr	r0, [sp, #44]	; 0x2c
   10f44:	bl	10ba4 <pthread_kill@plt>
   10f48:	b	10ef4 <__assert_fail@plt+0x2cc>
   10f4c:	cmp	r2, #2
   10f50:	bne	10ef4 <__assert_fail@plt+0x2cc>
   10f54:	add	r0, sp, #112	; 0x70
   10f58:	bl	10a84 <pthread_mutex_lock@plt>
   10f5c:	ldr	fp, [sp, #48]	; 0x30
   10f60:	ldr	r7, [sp, #100]	; 0x64
   10f64:	cmp	fp, #13
   10f68:	ldr	r9, [sp, #104]	; 0x68
   10f6c:	beq	10ff0 <__assert_fail@plt+0x3c8>
   10f70:	ldrb	r3, [sp, #40]	; 0x28
   10f74:	ands	r8, r3, #2
   10f78:	beq	1104c <__assert_fail@plt+0x424>
   10f7c:	ldr	r4, [sp, #108]	; 0x6c
   10f80:	ldr	r3, [sp, #52]	; 0x34
   10f84:	b	10f98 <__assert_fail@plt+0x370>
   10f88:	ldr	r2, [r4, #8]
   10f8c:	cmp	r2, r3
   10f90:	beq	11164 <__assert_fail@plt+0x53c>
   10f94:	ldr	r4, [r4]
   10f98:	cmp	r4, #0
   10f9c:	bne	10f88 <__assert_fail@plt+0x360>
   10fa0:	ldr	r2, [pc, #780]	; 112b4 <__assert_fail@plt+0x68c>
   10fa4:	mov	r1, #1
   10fa8:	ldr	r0, [sl]
   10fac:	bl	10b98 <__fprintf_chk@plt>
   10fb0:	mov	r3, #5
   10fb4:	mov	r0, r7
   10fb8:	add	r1, sp, #40	; 0x28
   10fbc:	str	r3, [sp, #88]	; 0x58
   10fc0:	bl	113d0 <__assert_fail@plt+0x7a8>
   10fc4:	mov	r0, r7
   10fc8:	bl	10c04 <close@plt>
   10fcc:	add	r0, sp, #112	; 0x70
   10fd0:	bl	10a54 <pthread_mutex_unlock@plt>
   10fd4:	b	10ef4 <__assert_fail@plt+0x2cc>
   10fd8:	ldr	r3, [sl]
   10fdc:	mov	r2, #39	; 0x27
   10fe0:	mov	r1, #1
   10fe4:	ldr	r0, [pc, #716]	; 112b8 <__assert_fail@plt+0x690>
   10fe8:	bl	10b08 <fwrite@plt>
   10fec:	b	10f3c <__assert_fail@plt+0x314>
   10ff0:	ldrsh	r3, [sp, #56]	; 0x38
   10ff4:	cmp	r3, #2
   10ff8:	bne	10f70 <__assert_fail@plt+0x348>
   10ffc:	add	r1, sp, #64	; 0x40
   11000:	ldm	r1, {r1, r2, r3}
   11004:	orr	r3, r1, r3
   11008:	str	r3, [sp, #8]
   1100c:	ldr	r3, [sp, #76]	; 0x4c
   11010:	orr	r3, r2, r3
   11014:	str	r3, [sp, #12]
   11018:	ldrd	r2, [sp, #8]
   1101c:	orrs	r3, r2, r3
   11020:	bne	10f70 <__assert_fail@plt+0x348>
   11024:	add	r8, sp, #108	; 0x6c
   11028:	ldr	r4, [r8]
   1102c:	cmp	r4, #0
   11030:	beq	11200 <__assert_fail@plt+0x5d8>
   11034:	ldr	r2, [r4, #8]
   11038:	ldr	r3, [sp, #52]	; 0x34
   1103c:	cmp	r2, r3
   11040:	beq	111d0 <__assert_fail@plt+0x5a8>
   11044:	mov	r8, r4
   11048:	b	11028 <__assert_fail@plt+0x400>
   1104c:	mov	r0, #16
   11050:	bl	10b44 <malloc@plt>
   11054:	subs	r4, r0, #0
   11058:	beq	111f8 <__assert_fail@plt+0x5d0>
   1105c:	ldr	r3, [sp, #52]	; 0x34
   11060:	str	r9, [r4, #4]
   11064:	mov	r9, r4
   11068:	str	r8, [r4, #12]
   1106c:	str	r3, [r4, #8]
   11070:	sub	r3, fp, #12
   11074:	cmp	r3, #1
   11078:	bls	11114 <__assert_fail@plt+0x4ec>
   1107c:	ldrsh	r3, [sp, #56]	; 0x38
   11080:	cmp	r3, #2
   11084:	beq	11114 <__assert_fail@plt+0x4ec>
   11088:	mov	r0, #72	; 0x48
   1108c:	bl	10b44 <malloc@plt>
   11090:	subs	r8, r0, #0
   11094:	beq	1116c <__assert_fail@plt+0x544>
   11098:	add	lr, sp, #40	; 0x28
   1109c:	ldr	fp, [r4, #12]
   110a0:	ldm	lr!, {r0, r1, r2, r3}
   110a4:	add	fp, fp, #1
   110a8:	add	ip, r8, #16
   110ac:	str	fp, [r4, #12]
   110b0:	add	fp, sp, #108	; 0x6c
   110b4:	str	fp, [r8]
   110b8:	str	r7, [r8, #4]
   110bc:	str	r4, [r8, #8]
   110c0:	stmia	ip!, {r0, r1, r2, r3}
   110c4:	ldm	lr!, {r0, r1, r2, r3}
   110c8:	stmia	ip!, {r0, r1, r2, r3}
   110cc:	ldm	lr!, {r0, r1, r2, r3}
   110d0:	stmia	ip!, {r0, r1, r2, r3}
   110d4:	mov	r3, r8
   110d8:	ldm	lr, {r0, r1}
   110dc:	ldr	r2, [pc, #472]	; 112bc <__assert_fail@plt+0x694>
   110e0:	stm	ip, {r0, r1}
   110e4:	mov	r1, #0
   110e8:	add	r0, sp, #36	; 0x24
   110ec:	bl	10b20 <pthread_create@plt>
   110f0:	cmp	r0, #0
   110f4:	bne	11194 <__assert_fail@plt+0x56c>
   110f8:	cmp	r9, #0
   110fc:	ldr	r0, [sp, #36]	; 0x24
   11100:	ldrne	r3, [sp, #108]	; 0x6c
   11104:	strne	r9, [sp, #108]	; 0x6c
   11108:	strne	r3, [r9]
   1110c:	bl	10a90 <pthread_detach@plt>
   11110:	b	10fcc <__assert_fail@plt+0x3a4>
   11114:	mov	r1, fp
   11118:	ldr	r0, [r4, #4]
   1111c:	add	r2, sp, #56	; 0x38
   11120:	bl	10bb0 <fcntl64@plt>
   11124:	cmn	r0, #1
   11128:	movne	r3, #0
   1112c:	bne	11138 <__assert_fail@plt+0x510>
   11130:	bl	10b80 <__errno_location@plt>
   11134:	ldr	r3, [r0]
   11138:	add	r1, sp, #40	; 0x28
   1113c:	mov	r0, r7
   11140:	str	r3, [sp, #88]	; 0x58
   11144:	bl	113d0 <__assert_fail@plt+0x7a8>
   11148:	mov	r0, r7
   1114c:	bl	10c04 <close@plt>
   11150:	cmp	r9, #0
   11154:	ldrne	r3, [sp, #108]	; 0x6c
   11158:	strne	r9, [sp, #108]	; 0x6c
   1115c:	strne	r3, [r9]
   11160:	b	10fcc <__assert_fail@plt+0x3a4>
   11164:	mov	r9, #0
   11168:	b	11070 <__assert_fail@plt+0x448>
   1116c:	mov	r3, #37	; 0x25
   11170:	add	r1, sp, #40	; 0x28
   11174:	mov	r0, r7
   11178:	str	r3, [sp, #88]	; 0x58
   1117c:	bl	113d0 <__assert_fail@plt+0x7a8>
   11180:	mov	r0, r7
   11184:	bl	10c04 <close@plt>
   11188:	mov	r0, r9
   1118c:	bl	10a78 <free@plt>
   11190:	b	10fcc <__assert_fail@plt+0x3a4>
   11194:	mov	r3, #37	; 0x25
   11198:	add	r1, sp, #40	; 0x28
   1119c:	mov	r0, r7
   111a0:	str	r3, [sp, #88]	; 0x58
   111a4:	bl	113d0 <__assert_fail@plt+0x7a8>
   111a8:	mov	r0, r7
   111ac:	bl	10c04 <close@plt>
   111b0:	mov	r0, r8
   111b4:	bl	10a78 <free@plt>
   111b8:	ldr	r3, [r4, #12]
   111bc:	mov	r0, r9
   111c0:	sub	r3, r3, #1
   111c4:	str	r3, [r4, #12]
   111c8:	bl	10a78 <free@plt>
   111cc:	b	10fcc <__assert_fail@plt+0x3a4>
   111d0:	ldr	r3, [r4, #12]
   111d4:	cmp	r3, #0
   111d8:	bne	11044 <__assert_fail@plt+0x41c>
   111dc:	ldr	r0, [r4, #4]
   111e0:	bl	10c04 <close@plt>
   111e4:	ldr	r3, [r4]
   111e8:	mov	r0, r4
   111ec:	str	r3, [r8]
   111f0:	bl	10a78 <free@plt>
   111f4:	b	11028 <__assert_fail@plt+0x400>
   111f8:	mov	r3, #37	; 0x25
   111fc:	b	10fb4 <__assert_fail@plt+0x38c>
   11200:	ldrb	r3, [sp, #40]	; 0x28
   11204:	tst	r3, #2
   11208:	beq	11234 <__assert_fail@plt+0x60c>
   1120c:	mov	r3, #0
   11210:	b	10fb4 <__assert_fail@plt+0x38c>
   11214:	ldr	r3, [pc, #164]	; 112c0 <__assert_fail@plt+0x698>
   11218:	ldr	r2, [pc, #164]	; 112c4 <__assert_fail@plt+0x69c>
   1121c:	ldr	r1, [pc, #164]	; 112c8 <__assert_fail@plt+0x6a0>
   11220:	ldr	r0, [pc, #164]	; 112cc <__assert_fail@plt+0x6a4>
   11224:	bl	10c28 <__assert_fail@plt>
   11228:	mov	r0, #1
   1122c:	bl	10b68 <exit@plt>
   11230:	bl	10acc <__stack_chk_fail@plt>
   11234:	mov	r0, r9
   11238:	bl	10c04 <close@plt>
   1123c:	b	1120c <__assert_fail@plt+0x5e4>
   11240:	ldr	r0, [pc, #96]	; 112a8 <__assert_fail@plt+0x680>
   11244:	bl	10af0 <perror@plt>
   11248:	mov	r0, #1
   1124c:	bl	10b68 <exit@plt>
   11250:	ldr	r0, [pc, #120]	; 112d0 <__assert_fail@plt+0x6a8>
   11254:	bl	10af0 <perror@plt>
   11258:	mov	r0, #1
   1125c:	bl	10b68 <exit@plt>
   11260:	ldr	r0, [pc, #108]	; 112d4 <__assert_fail@plt+0x6ac>
   11264:	bl	10af0 <perror@plt>
   11268:	mov	r0, #1
   1126c:	bl	10b68 <exit@plt>
   11270:	ldr	r0, [pc, #48]	; 112a8 <__assert_fail@plt+0x680>
   11274:	bl	10af0 <perror@plt>
   11278:	mov	r0, r5
   1127c:	bl	10a9c <_exit@plt>
   11280:	ldr	r0, [pc, #80]	; 112d8 <__assert_fail@plt+0x6b0>
   11284:	bl	10af0 <perror@plt>
   11288:	mov	r0, r5
   1128c:	bl	10b68 <exit@plt>
   11290:	andeq	r1, r2, r0, asr #28
   11294:	andeq	r2, r2, r8
   11298:	andeq	r1, r1, r8, lsr #20
   1129c:	andeq	r1, r1, r8, asr r9
   112a0:	andeq	r1, r1, r4, ror r9
   112a4:	andeq	r1, r1, r0, lsl #19
   112a8:	andeq	r1, r1, r8, lsr #18
   112ac:	strdeq	r1, [r1], -r8
   112b0:	andeq	r1, r1, ip, asr #7
   112b4:	andeq	r1, r1, r0, asr sl
   112b8:	ldrdeq	r1, [r1], -r0
   112bc:	strdeq	r1, [r1], -r8
   112c0:	andeq	r1, r1, r8, ror #15
   112c4:	andeq	r0, r0, lr, lsl #3
   112c8:	andeq	r1, r1, r0, lsl r8
   112cc:	muleq	r1, r0, r9
   112d0:	andeq	r1, r1, ip, asr r9
   112d4:	andeq	r1, r1, r0, asr #18
   112d8:	muleq	r1, ip, r9
   112dc:	mov	fp, #0
   112e0:	mov	lr, #0
   112e4:	pop	{r1}		; (ldr r1, [sp], #4)
   112e8:	mov	r2, sp
   112ec:	push	{r2}		; (str r2, [sp, #-4]!)
   112f0:	push	{r0}		; (str r0, [sp, #-4]!)
   112f4:	ldr	ip, [pc, #16]	; 1130c <__assert_fail@plt+0x6e4>
   112f8:	push	{ip}		; (str ip, [sp, #-4]!)
   112fc:	ldr	r0, [pc, #12]	; 11310 <__assert_fail@plt+0x6e8>
   11300:	ldr	r3, [pc, #12]	; 11314 <__assert_fail@plt+0x6ec>
   11304:	bl	10b50 <__libc_start_main@plt>
   11308:	bl	10bf8 <abort@plt>
   1130c:			; <UNDEFINED> instruction: 0x000117b8
   11310:	andeq	r0, r1, r4, lsr ip
   11314:	andeq	r1, r1, r8, asr r7
   11318:	ldr	r3, [pc, #20]	; 11334 <__assert_fail@plt+0x70c>
   1131c:	ldr	r2, [pc, #20]	; 11338 <__assert_fail@plt+0x710>
   11320:	add	r3, pc, r3
   11324:	ldr	r2, [r3, r2]
   11328:	cmp	r2, #0
   1132c:	bxeq	lr
   11330:	b	10b5c <__gmon_start__@plt>
   11334:	andeq	r0, r1, r4, lsr #24
   11338:	andeq	r0, r0, ip, lsr #1
   1133c:	ldr	r0, [pc, #24]	; 1135c <__assert_fail@plt+0x734>
   11340:	ldr	r3, [pc, #24]	; 11360 <__assert_fail@plt+0x738>
   11344:	cmp	r3, r0
   11348:	bxeq	lr
   1134c:	ldr	r3, [pc, #16]	; 11364 <__assert_fail@plt+0x73c>
   11350:	cmp	r3, #0
   11354:	bxeq	lr
   11358:	bx	r3
   1135c:	andeq	r2, r2, r8
   11360:	andeq	r2, r2, r8
   11364:	andeq	r0, r0, r0
   11368:	ldr	r0, [pc, #36]	; 11394 <__assert_fail@plt+0x76c>
   1136c:	ldr	r1, [pc, #36]	; 11398 <__assert_fail@plt+0x770>
   11370:	sub	r1, r1, r0
   11374:	asr	r1, r1, #2
   11378:	add	r1, r1, r1, lsr #31
   1137c:	asrs	r1, r1, #1
   11380:	bxeq	lr
   11384:	ldr	r3, [pc, #16]	; 1139c <__assert_fail@plt+0x774>
   11388:	cmp	r3, #0
   1138c:	bxeq	lr
   11390:	bx	r3
   11394:	andeq	r2, r2, r8
   11398:	andeq	r2, r2, r8
   1139c:	andeq	r0, r0, r0
   113a0:	push	{r4, lr}
   113a4:	ldr	r4, [pc, #24]	; 113c4 <__assert_fail@plt+0x79c>
   113a8:	ldrb	r3, [r4]
   113ac:	cmp	r3, #0
   113b0:	popne	{r4, pc}
   113b4:	bl	1133c <__assert_fail@plt+0x714>
   113b8:	mov	r3, #1
   113bc:	strb	r3, [r4]
   113c0:	pop	{r4, pc}
   113c4:	andeq	r2, r2, ip
   113c8:	b	11368 <__assert_fail@plt+0x740>
   113cc:	bx	lr
   113d0:	push	{r4, lr}
   113d4:	mov	r3, #16384	; 0x4000
   113d8:	mov	r2, #56	; 0x38
   113dc:	bl	10c10 <send@plt>
   113e0:	cmn	r0, #1
   113e4:	popne	{r4, pc}
   113e8:	ldr	r0, [pc, #4]	; 113f4 <__assert_fail@plt+0x7cc>
   113ec:	pop	{r4, lr}
   113f0:	b	10af0 <perror@plt>
   113f4:	strdeq	r1, [r1], -r0
   113f8:	push	{r4, r5, r6, r7, r8, lr}
   113fc:	ldr	r5, [r0, #24]
   11400:	cmp	r5, #14
   11404:	bne	114d4 <__assert_fail@plt+0x8ac>
   11408:	ldr	r3, [r0, #8]
   1140c:	add	r7, r0, #32
   11410:	mov	r4, r0
   11414:	mov	r2, r7
   11418:	ldr	r0, [r3, #4]
   1141c:	mov	r1, #13
   11420:	bl	10bb0 <fcntl64@plt>
   11424:	add	r6, r4, #16
   11428:	cmn	r0, #1
   1142c:	beq	11484 <__assert_fail@plt+0x85c>
   11430:	mov	r3, #0
   11434:	ldr	r0, [r4]
   11438:	str	r3, [r4, #64]	; 0x40
   1143c:	add	r0, r0, #4
   11440:	bl	10a84 <pthread_mutex_lock@plt>
   11444:	ldr	r2, [r4, #8]
   11448:	ldr	r0, [r4]
   1144c:	ldr	r3, [r2, #12]
   11450:	add	r0, r0, #4
   11454:	sub	r3, r3, #1
   11458:	str	r3, [r2, #12]
   1145c:	bl	10a54 <pthread_mutex_unlock@plt>
   11460:	mov	r1, r6
   11464:	ldr	r0, [r4, #4]
   11468:	bl	113d0 <__assert_fail@plt+0x7a8>
   1146c:	ldr	r0, [r4, #4]
   11470:	bl	10c04 <close@plt>
   11474:	mov	r0, r4
   11478:	bl	10a78 <free@plt>
   1147c:	mov	r0, #0
   11480:	pop	{r4, r5, r6, r7, r8, pc}
   11484:	bl	10b80 <__errno_location@plt>
   11488:	ldr	r3, [r0]
   1148c:	mov	r8, r0
   11490:	cmp	r3, #11
   11494:	bne	11434 <__assert_fail@plt+0x80c>
   11498:	str	r3, [r4, #64]	; 0x40
   1149c:	bl	10aa8 <pthread_self@plt>
   114a0:	mov	r1, r6
   114a4:	str	r0, [r4, #20]
   114a8:	ldr	r0, [r4, #4]
   114ac:	bl	113d0 <__assert_fail@plt+0x7a8>
   114b0:	ldr	r3, [r4, #8]
   114b4:	mov	r2, r7
   114b8:	mov	r1, r5
   114bc:	ldr	r0, [r3, #4]
   114c0:	bl	10bb0 <fcntl64@plt>
   114c4:	cmn	r0, #1
   114c8:	bne	11430 <__assert_fail@plt+0x808>
   114cc:	ldr	r3, [r8]
   114d0:	b	11434 <__assert_fail@plt+0x80c>
   114d4:	ldr	r3, [pc, #12]	; 114e8 <__assert_fail@plt+0x8c0>
   114d8:	mov	r2, #160	; 0xa0
   114dc:	ldr	r1, [pc, #8]	; 114ec <__assert_fail@plt+0x8c4>
   114e0:	ldr	r0, [pc, #8]	; 114f0 <__assert_fail@plt+0x8c8>
   114e4:	bl	10c28 <__assert_fail@plt>
   114e8:	andeq	r1, r1, r8, asr #15
   114ec:	andeq	r1, r1, r0, lsl r8
   114f0:	andeq	r1, r1, r4, lsr #16
   114f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   114f8:	sub	sp, sp, #68	; 0x44
   114fc:	ldr	r8, [pc, #556]	; 11730 <__assert_fail@plt+0xb08>
   11500:	ldr	r5, [sp, #96]	; 0x60
   11504:	mov	lr, r1
   11508:	ldr	r1, [r8]
   1150c:	ldr	ip, [r5]
   11510:	str	r1, [sp, #60]	; 0x3c
   11514:	cmp	ip, #2
   11518:	bgt	1171c <__assert_fail@plt+0xaf4>
   1151c:	mov	ip, #0
   11520:	mov	r6, r2
   11524:	mov	r4, r3
   11528:	mvn	r2, #0
   1152c:	add	r3, sp, #40	; 0x28
   11530:	str	lr, [sp, #4]
   11534:	str	ip, [sp, #16]
   11538:	str	ip, [sp, #12]
   1153c:	str	ip, [sp, #36]	; 0x24
   11540:	add	lr, sp, #4
   11544:	str	r3, [sp, #28]
   11548:	str	r2, [sp, #44]	; 0x2c
   1154c:	str	r2, [sp, #40]	; 0x28
   11550:	str	r2, [sp, #48]	; 0x30
   11554:	str	r2, [sp, #52]	; 0x34
   11558:	str	r2, [sp, #56]	; 0x38
   1155c:	mov	ip, #1
   11560:	mov	r3, #20
   11564:	add	r1, sp, #12
   11568:	mov	r2, #256	; 0x100
   1156c:	mov	r9, r0
   11570:	str	r6, [sp, #8]
   11574:	str	lr, [sp, #20]
   11578:	str	ip, [sp, #24]
   1157c:	str	r3, [sp, #32]
   11580:	bl	10bec <recvmsg@plt>
   11584:	subs	r7, r0, #0
   11588:	beq	116b0 <__assert_fail@plt+0xa88>
   1158c:	cmn	r7, #1
   11590:	beq	1170c <__assert_fail@plt+0xae4>
   11594:	cmp	r6, r7
   11598:	bne	116cc <__assert_fail@plt+0xaa4>
   1159c:	ldr	r3, [sp, #32]
   115a0:	cmp	r3, #11
   115a4:	bls	11648 <__assert_fail@plt+0xa20>
   115a8:	ldr	r1, [sp, #28]
   115ac:	cmp	r1, #0
   115b0:	beq	11648 <__assert_fail@plt+0xa20>
   115b4:	ldr	r6, [r1, #8]
   115b8:	cmp	r6, #1
   115bc:	bne	116ec <__assert_fail@plt+0xac4>
   115c0:	ldr	r2, [r5]
   115c4:	add	r1, r1, #12
   115c8:	mov	r0, r4
   115cc:	lsl	r2, r2, #2
   115d0:	bl	10ab4 <memcpy@plt>
   115d4:	ldr	r3, [sp, #36]	; 0x24
   115d8:	tst	r3, #8
   115dc:	beq	1162c <__assert_fail@plt+0xa04>
   115e0:	ldr	r3, [pc, #332]	; 11734 <__assert_fail@plt+0xb0c>
   115e4:	mov	r1, r6
   115e8:	mov	r2, #43	; 0x2b
   115ec:	ldr	r3, [r3]
   115f0:	ldr	r0, [pc, #320]	; 11738 <__assert_fail@plt+0xb10>
   115f4:	bl	10b08 <fwrite@plt>
   115f8:	ldr	r3, [r5]
   115fc:	cmp	r3, #0
   11600:	ble	11624 <__assert_fail@plt+0x9fc>
   11604:	sub	r4, r4, #4
   11608:	mov	r6, #0
   1160c:	ldr	r0, [r4, #4]!
   11610:	bl	10c04 <close@plt>
   11614:	ldr	r3, [r5]
   11618:	add	r6, r6, #1
   1161c:	cmp	r3, r6
   11620:	bgt	1160c <__assert_fail@plt+0x9e4>
   11624:	mov	r3, #0
   11628:	str	r3, [r5]
   1162c:	ldr	r2, [sp, #60]	; 0x3c
   11630:	ldr	r3, [r8]
   11634:	mov	r0, r7
   11638:	cmp	r2, r3
   1163c:	bne	11718 <__assert_fail@plt+0xaf0>
   11640:	add	sp, sp, #68	; 0x44
   11644:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11648:	ldr	r3, [sp, #36]	; 0x24
   1164c:	tst	r3, #8
   11650:	beq	11624 <__assert_fail@plt+0x9fc>
   11654:	ldr	r3, [pc, #216]	; 11734 <__assert_fail@plt+0xb0c>
   11658:	mov	r2, #46	; 0x2e
   1165c:	mov	r1, #1
   11660:	ldr	r3, [r3]
   11664:	ldr	r0, [pc, #208]	; 1173c <__assert_fail@plt+0xb14>
   11668:	bl	10b08 <fwrite@plt>
   1166c:	ldr	r2, [r5]
   11670:	add	r1, sp, #52	; 0x34
   11674:	mov	r0, r4
   11678:	lsl	r2, r2, #2
   1167c:	bl	10ab4 <memcpy@plt>
   11680:	ldr	r3, [r5]
   11684:	cmp	r3, #0
   11688:	ble	11624 <__assert_fail@plt+0x9fc>
   1168c:	sub	r4, r4, #4
   11690:	mov	r6, #0
   11694:	ldr	r0, [r4, #4]!
   11698:	bl	10c04 <close@plt>
   1169c:	ldr	r3, [r5]
   116a0:	add	r6, r6, #1
   116a4:	cmp	r3, r6
   116a8:	bgt	11694 <__assert_fail@plt+0xa6c>
   116ac:	b	11624 <__assert_fail@plt+0x9fc>
   116b0:	add	r1, sp, #12
   116b4:	mov	r0, r9
   116b8:	mov	r2, #256	; 0x100
   116bc:	bl	10bec <recvmsg@plt>
   116c0:	subs	r7, r0, #0
   116c4:	bne	1158c <__assert_fail@plt+0x964>
   116c8:	b	1162c <__assert_fail@plt+0xa04>
   116cc:	ldr	r3, [pc, #96]	; 11734 <__assert_fail@plt+0xb0c>
   116d0:	mov	r2, #40	; 0x28
   116d4:	mov	r1, #1
   116d8:	ldr	r3, [r3]
   116dc:	ldr	r0, [pc, #92]	; 11740 <__assert_fail@plt+0xb18>
   116e0:	bl	10b08 <fwrite@plt>
   116e4:	mvn	r7, #0
   116e8:	b	1162c <__assert_fail@plt+0xa04>
   116ec:	ldr	r1, [pc, #64]	; 11734 <__assert_fail@plt+0xb0c>
   116f0:	mov	r3, r6
   116f4:	ldr	r2, [pc, #72]	; 11744 <__assert_fail@plt+0xb1c>
   116f8:	ldr	r0, [r1]
   116fc:	mov	r1, #1
   11700:	bl	10b98 <__fprintf_chk@plt>
   11704:	mvn	r7, #0
   11708:	b	1162c <__assert_fail@plt+0xa04>
   1170c:	ldr	r0, [pc, #52]	; 11748 <__assert_fail@plt+0xb20>
   11710:	bl	10af0 <perror@plt>
   11714:	b	1162c <__assert_fail@plt+0xa04>
   11718:	bl	10acc <__stack_chk_fail@plt>
   1171c:	ldr	r3, [pc, #40]	; 1174c <__assert_fail@plt+0xb24>
   11720:	mov	r2, #66	; 0x42
   11724:	ldr	r1, [pc, #36]	; 11750 <__assert_fail@plt+0xb28>
   11728:	ldr	r0, [pc, #36]	; 11754 <__assert_fail@plt+0xb2c>
   1172c:	bl	10c28 <__assert_fail@plt>
   11730:	andeq	r1, r2, r0, asr #28
   11734:	andeq	r2, r2, r8
   11738:	andeq	r1, r1, ip, asr #17
   1173c:	strdeq	r1, [r1], -r8
   11740:	andeq	r1, r1, r0, ror r8
   11744:	muleq	r1, ip, r8
   11748:	andeq	r1, r1, r4, asr r8
   1174c:	ldrdeq	r1, [r1], -r8
   11750:	andeq	r1, r1, r0, lsl r8
   11754:	andeq	r1, r1, ip, lsr r8
   11758:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1175c:	mov	r7, r0
   11760:	ldr	r6, [pc, #72]	; 117b0 <__assert_fail@plt+0xb88>
   11764:	ldr	r5, [pc, #72]	; 117b4 <__assert_fail@plt+0xb8c>
   11768:	add	r6, pc, r6
   1176c:	add	r5, pc, r5
   11770:	sub	r6, r6, r5
   11774:	mov	r8, r1
   11778:	mov	r9, r2
   1177c:	bl	10a34 <pthread_mutex_unlock@plt-0x20>
   11780:	asrs	r6, r6, #2
   11784:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11788:	mov	r4, #0
   1178c:	add	r4, r4, #1
   11790:	ldr	r3, [r5], #4
   11794:	mov	r2, r9
   11798:	mov	r1, r8
   1179c:	mov	r0, r7
   117a0:	blx	r3
   117a4:	cmp	r6, r4
   117a8:	bne	1178c <__assert_fail@plt+0xb64>
   117ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   117b0:	andeq	r0, r1, ip, asr #13
   117b4:	andeq	r0, r1, r4, asr #13
   117b8:	bx	lr

Disassembly of section .fini:

000117bc <.fini>:
   117bc:	push	{r3, lr}
   117c0:	pop	{r3, pc}
