
raspbian-preinstalled/fdtget:     file format elf32-littlearm


Disassembly of section .init:

000108d8 <.init>:
   108d8:	push	{r3, lr}
   108dc:	bl	112cc <__assert_fail@plt+0x830>
   108e0:	pop	{r3, pc}

Disassembly of section .plt:

000108e4 <raise@plt-0x14>:
   108e4:	push	{lr}		; (str lr, [sp, #-4]!)
   108e8:	ldr	lr, [pc, #4]	; 108f4 <raise@plt-0x4>
   108ec:	add	lr, pc, lr
   108f0:	ldr	pc, [lr, #8]!
   108f4:	andeq	r5, r1, r8, asr r6

000108f8 <raise@plt>:
   108f8:	add	ip, pc, #0, 12
   108fc:	add	ip, ip, #86016	; 0x15000
   10900:	ldr	pc, [ip, #1624]!	; 0x658

00010904 <strcmp@plt>:
   10904:	add	ip, pc, #0, 12
   10908:	add	ip, ip, #86016	; 0x15000
   1090c:	ldr	pc, [ip, #1616]!	; 0x650

00010910 <strtol@plt>:
   10910:	add	ip, pc, #0, 12
   10914:	add	ip, ip, #86016	; 0x15000
   10918:	ldr	pc, [ip, #1608]!	; 0x648

0001091c <read@plt>:
   1091c:	add	ip, pc, #0, 12
   10920:	add	ip, ip, #86016	; 0x15000
   10924:	ldr	pc, [ip, #1600]!	; 0x640

00010928 <memmove@plt>:
   10928:	add	ip, pc, #0, 12
   1092c:	add	ip, ip, #86016	; 0x15000
   10930:	ldr	pc, [ip, #1592]!	; 0x638

00010934 <free@plt>:
   10934:	add	ip, pc, #0, 12
   10938:	add	ip, ip, #86016	; 0x15000
   1093c:	ldr	pc, [ip, #1584]!	; 0x630

00010940 <__vsnprintf_chk@plt>:
   10940:	add	ip, pc, #0, 12
   10944:	add	ip, ip, #86016	; 0x15000
   10948:	ldr	pc, [ip, #1576]!	; 0x628

0001094c <memcpy@plt>:
   1094c:	add	ip, pc, #0, 12
   10950:	add	ip, ip, #86016	; 0x15000
   10954:	ldr	pc, [ip, #1568]!	; 0x620

00010958 <memcmp@plt>:
   10958:	add	ip, pc, #0, 12
   1095c:	add	ip, ip, #86016	; 0x15000
   10960:	ldr	pc, [ip, #1560]!	; 0x618

00010964 <__stack_chk_fail@plt>:
   10964:	add	ip, pc, #0, 12
   10968:	add	ip, ip, #86016	; 0x15000
   1096c:	ldr	pc, [ip, #1552]!	; 0x610

00010970 <realloc@plt>:
   10970:	add	ip, pc, #0, 12
   10974:	add	ip, ip, #86016	; 0x15000
   10978:	ldr	pc, [ip, #1544]!	; 0x608

0001097c <fwrite@plt>:
   1097c:	add	ip, pc, #0, 12
   10980:	add	ip, ip, #86016	; 0x15000
   10984:	ldr	pc, [ip, #1536]!	; 0x600

00010988 <puts@plt>:
   10988:	add	ip, pc, #0, 12
   1098c:	add	ip, ip, #86016	; 0x15000
   10990:	ldr	pc, [ip, #1528]!	; 0x5f8

00010994 <malloc@plt>:
   10994:	add	ip, pc, #0, 12
   10998:	add	ip, ip, #86016	; 0x15000
   1099c:	ldr	pc, [ip, #1520]!	; 0x5f0

000109a0 <__libc_start_main@plt>:
   109a0:	add	ip, pc, #0, 12
   109a4:	add	ip, ip, #86016	; 0x15000
   109a8:	ldr	pc, [ip, #1512]!	; 0x5e8

000109ac <strerror@plt>:
   109ac:	add	ip, pc, #0, 12
   109b0:	add	ip, ip, #86016	; 0x15000
   109b4:	ldr	pc, [ip, #1504]!	; 0x5e0

000109b8 <__vfprintf_chk@plt>:
   109b8:	add	ip, pc, #0, 12
   109bc:	add	ip, ip, #86016	; 0x15000
   109c0:	ldr	pc, [ip, #1496]!	; 0x5d8

000109c4 <__gmon_start__@plt>:
   109c4:	add	ip, pc, #0, 12
   109c8:	add	ip, ip, #86016	; 0x15000
   109cc:	ldr	pc, [ip, #1488]!	; 0x5d0

000109d0 <open@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #86016	; 0x15000
   109d8:	ldr	pc, [ip, #1480]!	; 0x5c8

000109dc <getopt_long@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #86016	; 0x15000
   109e4:	ldr	pc, [ip, #1472]!	; 0x5c0

000109e8 <__ctype_b_loc@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #86016	; 0x15000
   109f0:	ldr	pc, [ip, #1464]!	; 0x5b8

000109f4 <exit@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #86016	; 0x15000
   109fc:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a00 <strlen@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #86016	; 0x15000
   10a08:	ldr	pc, [ip, #1448]!	; 0x5a8

00010a0c <strchr@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #86016	; 0x15000
   10a14:	ldr	pc, [ip, #1440]!	; 0x5a0

00010a18 <__errno_location@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #86016	; 0x15000
   10a20:	ldr	pc, [ip, #1432]!	; 0x598

00010a24 <putchar@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #86016	; 0x15000
   10a2c:	ldr	pc, [ip, #1424]!	; 0x590

00010a30 <strncpy@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #86016	; 0x15000
   10a38:	ldr	pc, [ip, #1416]!	; 0x588

00010a3c <__printf_chk@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #86016	; 0x15000
   10a44:	ldr	pc, [ip, #1408]!	; 0x580

00010a48 <write@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #86016	; 0x15000
   10a50:	ldr	pc, [ip, #1400]!	; 0x578

00010a54 <__fprintf_chk@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #86016	; 0x15000
   10a5c:	ldr	pc, [ip, #1392]!	; 0x570

00010a60 <memchr@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #86016	; 0x15000
   10a68:	ldr	pc, [ip, #1384]!	; 0x568

00010a6c <strnlen@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #86016	; 0x15000
   10a74:	ldr	pc, [ip, #1376]!	; 0x560

00010a78 <strrchr@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #86016	; 0x15000
   10a80:	ldr	pc, [ip, #1368]!	; 0x558

00010a84 <abort@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #86016	; 0x15000
   10a8c:	ldr	pc, [ip, #1360]!	; 0x550

00010a90 <close@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #86016	; 0x15000
   10a98:	ldr	pc, [ip, #1352]!	; 0x548

00010a9c <__assert_fail@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #86016	; 0x15000
   10aa4:	ldr	pc, [ip, #1344]!	; 0x540

Disassembly of section .text:

00010aa8 <.text>:
   10aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10aac:	sub	sp, sp, #76	; 0x4c
   10ab0:	ldr	r7, [pc, #1892]	; 1121c <__assert_fail@plt+0x780>
   10ab4:	ldr	r3, [pc, #1892]	; 11220 <__assert_fail@plt+0x784>
   10ab8:	add	r7, pc, r7
   10abc:	ldr	r9, [pc, #1888]	; 11224 <__assert_fail@plt+0x788>
   10ac0:	ldr	r3, [r7, r3]
   10ac4:	ldr	sl, [pc, #1884]	; 11228 <__assert_fail@plt+0x78c>
   10ac8:	mov	r2, r3
   10acc:	add	fp, sp, #48	; 0x30
   10ad0:	ldr	r2, [r2]
   10ad4:	mov	r8, r0
   10ad8:	mov	r4, r1
   10adc:	mov	r5, #2
   10ae0:	add	r9, pc, r9
   10ae4:	add	sl, pc, sl
   10ae8:	mov	r6, #0
   10aec:	str	r3, [sp, #20]
   10af0:	mvn	r3, #0
   10af4:	str	r6, [fp, #8]
   10af8:	str	r6, [sp, #48]	; 0x30
   10afc:	str	r2, [sp, #68]	; 0x44
   10b00:	str	r6, [fp, #12]
   10b04:	str	r3, [sp, #52]	; 0x34
   10b08:	str	r6, [sp]
   10b0c:	mov	r3, r9
   10b10:	mov	r2, sl
   10b14:	mov	r1, r4
   10b18:	mov	r0, r8
   10b1c:	bl	109dc <getopt_long@plt>
   10b20:	cmn	r0, #1
   10b24:	beq	10c88 <__assert_fail@plt+0x1ec>
   10b28:	sub	r0, r0, #63	; 0x3f
   10b2c:	cmp	r0, #53	; 0x35
   10b30:	addls	pc, pc, r0, lsl #2
   10b34:	b	10b08 <__assert_fail@plt+0x6c>
   10b38:	b	1111c <__assert_fail@plt+0x680>
   10b3c:	b	10b08 <__assert_fail@plt+0x6c>
   10b40:	b	10b08 <__assert_fail@plt+0x6c>
   10b44:	b	10b08 <__assert_fail@plt+0x6c>
   10b48:	b	10b08 <__assert_fail@plt+0x6c>
   10b4c:	b	10b08 <__assert_fail@plt+0x6c>
   10b50:	b	10b08 <__assert_fail@plt+0x6c>
   10b54:	b	10b08 <__assert_fail@plt+0x6c>
   10b58:	b	10b08 <__assert_fail@plt+0x6c>
   10b5c:	b	10b08 <__assert_fail@plt+0x6c>
   10b60:	b	10b08 <__assert_fail@plt+0x6c>
   10b64:	b	10b08 <__assert_fail@plt+0x6c>
   10b68:	b	10b08 <__assert_fail@plt+0x6c>
   10b6c:	b	10b08 <__assert_fail@plt+0x6c>
   10b70:	b	10b08 <__assert_fail@plt+0x6c>
   10b74:	b	10b08 <__assert_fail@plt+0x6c>
   10b78:	b	10b08 <__assert_fail@plt+0x6c>
   10b7c:	b	10b08 <__assert_fail@plt+0x6c>
   10b80:	b	10b08 <__assert_fail@plt+0x6c>
   10b84:	b	10b08 <__assert_fail@plt+0x6c>
   10b88:	b	10b08 <__assert_fail@plt+0x6c>
   10b8c:	b	10b08 <__assert_fail@plt+0x6c>
   10b90:	b	10b08 <__assert_fail@plt+0x6c>
   10b94:	b	11118 <__assert_fail@plt+0x67c>
   10b98:	b	10b08 <__assert_fail@plt+0x6c>
   10b9c:	b	10b08 <__assert_fail@plt+0x6c>
   10ba0:	b	10b08 <__assert_fail@plt+0x6c>
   10ba4:	b	10b08 <__assert_fail@plt+0x6c>
   10ba8:	b	10b08 <__assert_fail@plt+0x6c>
   10bac:	b	10b08 <__assert_fail@plt+0x6c>
   10bb0:	b	10b08 <__assert_fail@plt+0x6c>
   10bb4:	b	10b08 <__assert_fail@plt+0x6c>
   10bb8:	b	10b08 <__assert_fail@plt+0x6c>
   10bbc:	b	10b08 <__assert_fail@plt+0x6c>
   10bc0:	b	10b08 <__assert_fail@plt+0x6c>
   10bc4:	b	10b08 <__assert_fail@plt+0x6c>
   10bc8:	b	10b08 <__assert_fail@plt+0x6c>
   10bcc:	b	10c74 <__assert_fail@plt+0x1d8>
   10bd0:	b	10b08 <__assert_fail@plt+0x6c>
   10bd4:	b	10b08 <__assert_fail@plt+0x6c>
   10bd8:	b	10b08 <__assert_fail@plt+0x6c>
   10bdc:	b	110f4 <__assert_fail@plt+0x658>
   10be0:	b	10b08 <__assert_fail@plt+0x6c>
   10be4:	b	10b08 <__assert_fail@plt+0x6c>
   10be8:	b	10b08 <__assert_fail@plt+0x6c>
   10bec:	b	10c64 <__assert_fail@plt+0x1c8>
   10bf0:	b	10b08 <__assert_fail@plt+0x6c>
   10bf4:	b	10b08 <__assert_fail@plt+0x6c>
   10bf8:	b	10b08 <__assert_fail@plt+0x6c>
   10bfc:	b	10c58 <__assert_fail@plt+0x1bc>
   10c00:	b	10b08 <__assert_fail@plt+0x6c>
   10c04:	b	10b08 <__assert_fail@plt+0x6c>
   10c08:	b	10b08 <__assert_fail@plt+0x6c>
   10c0c:	b	10c10 <__assert_fail@plt+0x174>
   10c10:	ldr	r3, [pc, #1556]	; 1122c <__assert_fail@plt+0x790>
   10c14:	add	r2, sp, #52	; 0x34
   10c18:	mov	r1, fp
   10c1c:	ldr	r3, [r7, r3]
   10c20:	ldr	r0, [r3]
   10c24:	bl	11c8c <__assert_fail@plt+0x11f0>
   10c28:	cmp	r0, #0
   10c2c:	beq	10b08 <__assert_fail@plt+0x6c>
   10c30:	ldr	r3, [pc, #1528]	; 11230 <__assert_fail@plt+0x794>
   10c34:	ldr	r2, [pc, #1528]	; 11234 <__assert_fail@plt+0x798>
   10c38:	add	r3, pc, r3
   10c3c:	ldr	r0, [pc, #1524]	; 11238 <__assert_fail@plt+0x79c>
   10c40:	add	r1, r3, #112	; 0x70
   10c44:	add	r2, pc, r2
   10c48:	str	r1, [sp]
   10c4c:	add	r0, pc, r0
   10c50:	add	r1, r2, #12
   10c54:	bl	11f70 <__assert_fail@plt+0x14d4>
   10c58:	mov	r5, #1
   10c5c:	str	r5, [sp, #56]	; 0x38
   10c60:	b	10b08 <__assert_fail@plt+0x6c>
   10c64:	mov	r3, #2
   10c68:	str	r3, [sp, #56]	; 0x38
   10c6c:	mov	r5, #1
   10c70:	b	10b08 <__assert_fail@plt+0x6c>
   10c74:	ldr	r3, [pc, #1456]	; 1122c <__assert_fail@plt+0x790>
   10c78:	ldr	r3, [r7, r3]
   10c7c:	ldr	r3, [r3]
   10c80:	str	r3, [sp, #60]	; 0x3c
   10c84:	b	10b08 <__assert_fail@plt+0x6c>
   10c88:	ldr	r3, [pc, #1452]	; 1123c <__assert_fail@plt+0x7a0>
   10c8c:	ldr	r1, [r7, r3]
   10c90:	ldr	r3, [r1]
   10c94:	cmp	r3, r8
   10c98:	bge	111ac <__assert_fail@plt+0x710>
   10c9c:	ldr	r0, [r4, r3, lsl #2]
   10ca0:	add	r2, r3, #1
   10ca4:	cmp	r0, #0
   10ca8:	str	r2, [r1]
   10cac:	lsl	fp, r3, #2
   10cb0:	beq	111ac <__assert_fail@plt+0x710>
   10cb4:	subs	r3, r8, r2
   10cb8:	mov	r8, r3
   10cbc:	beq	10eac <__assert_fail@plt+0x410>
   10cc0:	cmp	r5, #2
   10cc4:	bne	10cd0 <__assert_fail@plt+0x234>
   10cc8:	tst	r3, #1
   10ccc:	bne	111fc <__assert_fail@plt+0x760>
   10cd0:	mov	r1, #0
   10cd4:	bl	11a54 <__assert_fail@plt+0xfb8>
   10cd8:	subs	r6, r0, #0
   10cdc:	beq	11178 <__assert_fail@plt+0x6dc>
   10ce0:	add	r3, fp, #8
   10ce4:	add	r4, r4, r3
   10ce8:	lsl	r3, r5, #2
   10cec:	str	r3, [sp, #12]
   10cf0:	ldr	r3, [pc, #1352]	; 11240 <__assert_fail@plt+0x7a4>
   10cf4:	mov	fp, #0
   10cf8:	add	r3, pc, r3
   10cfc:	str	r3, [sp, #28]
   10d00:	ldr	r3, [pc, #1340]	; 11244 <__assert_fail@plt+0x7a8>
   10d04:	mov	r9, r8
   10d08:	add	fp, fp, r5
   10d0c:	add	r3, pc, r3
   10d10:	cmp	r9, fp
   10d14:	str	r3, [sp, #24]
   10d18:	str	r7, [sp, #32]
   10d1c:	blt	10e9c <__assert_fail@plt+0x400>
   10d20:	ldr	r1, [r4, #-4]
   10d24:	mov	r0, r6
   10d28:	bl	13a54 <__assert_fail@plt+0x2fb8>
   10d2c:	sub	r3, r4, #4
   10d30:	subs	r7, r0, #0
   10d34:	blt	10e78 <__assert_fail@plt+0x3dc>
   10d38:	cmp	r5, #1
   10d3c:	ldr	r3, [sp, #56]	; 0x38
   10d40:	beq	10ecc <__assert_fail@plt+0x430>
   10d44:	cmp	r3, #1
   10d48:	beq	10f8c <__assert_fail@plt+0x4f0>
   10d4c:	cmp	r3, #2
   10d50:	beq	10edc <__assert_fail@plt+0x440>
   10d54:	ldr	r8, [r4]
   10d58:	cmp	r8, #0
   10d5c:	beq	111d4 <__assert_fail@plt+0x738>
   10d60:	mov	r1, r7
   10d64:	add	r3, sp, #44	; 0x2c
   10d68:	mov	r2, r8
   10d6c:	mov	r0, r6
   10d70:	bl	13760 <__assert_fail@plt+0x2cc4>
   10d74:	subs	r7, r0, #0
   10d78:	beq	10ff8 <__assert_fail@plt+0x55c>
   10d7c:	ldr	r8, [sp, #44]	; 0x2c
   10d80:	cmp	r8, #0
   10d84:	beq	10fec <__assert_fail@plt+0x550>
   10d88:	ldr	r3, [sp, #48]	; 0x30
   10d8c:	cmp	r3, #115	; 0x73
   10d90:	beq	11028 <__assert_fail@plt+0x58c>
   10d94:	cmp	r3, #0
   10d98:	beq	11014 <__assert_fail@plt+0x578>
   10d9c:	ldr	r3, [sp, #52]	; 0x34
   10da0:	cmn	r3, #1
   10da4:	beq	110d4 <__assert_fail@plt+0x638>
   10da8:	mov	r1, r3
   10dac:	mov	r0, r8
   10db0:	str	r3, [sp, #16]
   10db4:	bl	14740 <__assert_fail@plt+0x3ca4>
   10db8:	ldr	r3, [sp, #16]
   10dbc:	cmp	r1, #0
   10dc0:	bne	11184 <__assert_fail@plt+0x6e8>
   10dc4:	ldr	r2, [sp, #48]	; 0x30
   10dc8:	mov	r1, #37	; 0x25
   10dcc:	cmp	r2, #0
   10dd0:	moveq	r2, #100	; 0x64
   10dd4:	mov	sl, #0
   10dd8:	cmp	r8, #0
   10ddc:	strb	r2, [sp, #65]	; 0x41
   10de0:	strb	r1, [sp, #64]	; 0x40
   10de4:	strb	sl, [sp, #66]	; 0x42
   10de8:	ble	10fec <__assert_fail@plt+0x550>
   10dec:	str	r4, [sp, #36]	; 0x24
   10df0:	mov	r4, r7
   10df4:	mov	r7, r3
   10df8:	add	r2, sp, #64	; 0x40
   10dfc:	str	r2, [sp, #16]
   10e00:	cmp	r7, #4
   10e04:	beq	10e50 <__assert_fail@plt+0x3b4>
   10e08:	cmp	r7, #2
   10e0c:	ldrb	r2, [r4]
   10e10:	ldrheq	r2, [r4]
   10e14:	rev16eq	r2, r2
   10e18:	uxtheq	r2, r2
   10e1c:	add	sl, sl, r7
   10e20:	ldr	r1, [sp, #16]
   10e24:	mov	r0, #1
   10e28:	bl	10a3c <__printf_chk@plt>
   10e2c:	cmp	r8, sl
   10e30:	add	r4, r4, r7
   10e34:	ble	10fe8 <__assert_fail@plt+0x54c>
   10e38:	cmp	sl, #0
   10e3c:	beq	10e00 <__assert_fail@plt+0x364>
   10e40:	mov	r0, #32
   10e44:	bl	10a24 <putchar@plt>
   10e48:	cmp	r7, #4
   10e4c:	bne	10e08 <__assert_fail@plt+0x36c>
   10e50:	ldr	r1, [r4]
   10e54:	lsr	r2, r1, #24
   10e58:	lsl	r0, r1, #8
   10e5c:	orr	r2, r2, r1, lsl #24
   10e60:	and	r0, r0, #16711680	; 0xff0000
   10e64:	lsr	r1, r1, #8
   10e68:	orr	r2, r2, r0
   10e6c:	and	r1, r1, #65280	; 0xff00
   10e70:	orr	r2, r2, r1
   10e74:	b	10e1c <__assert_fail@plt+0x380>
   10e78:	ldr	r0, [sp, #60]	; 0x3c
   10e7c:	cmp	r0, #0
   10e80:	beq	11144 <__assert_fail@plt+0x6a8>
   10e84:	bl	10988 <puts@plt>
   10e88:	ldr	r3, [sp, #12]
   10e8c:	add	fp, fp, r5
   10e90:	cmp	r9, fp
   10e94:	add	r4, r4, r3
   10e98:	bge	10d20 <__assert_fail@plt+0x284>
   10e9c:	mov	r0, r6
   10ea0:	bl	10934 <free@plt>
   10ea4:	mov	r3, #0
   10ea8:	mov	r8, r3
   10eac:	ldr	r3, [sp, #20]
   10eb0:	ldr	r2, [sp, #68]	; 0x44
   10eb4:	mov	r0, r8
   10eb8:	ldr	r3, [r3]
   10ebc:	cmp	r2, r3
   10ec0:	bne	111f8 <__assert_fail@plt+0x75c>
   10ec4:	add	sp, sp, #76	; 0x4c
   10ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ecc:	cmp	r3, #1
   10ed0:	beq	10f8c <__assert_fail@plt+0x4f0>
   10ed4:	cmp	r3, #2
   10ed8:	bne	111d4 <__assert_fail@plt+0x738>
   10edc:	mov	r8, #0
   10ee0:	add	sl, sp, #44	; 0x2c
   10ee4:	mov	r2, sl
   10ee8:	mov	r1, r7
   10eec:	mov	r0, r6
   10ef0:	bl	12694 <__assert_fail@plt+0x1bf8>
   10ef4:	sub	r3, r0, #1
   10ef8:	cmp	r3, #8
   10efc:	addls	pc, pc, r3, lsl #2
   10f00:	b	10f70 <__assert_fail@plt+0x4d4>
   10f04:	b	10f40 <__assert_fail@plt+0x4a4>
   10f08:	b	10f28 <__assert_fail@plt+0x48c>
   10f0c:	b	10f30 <__assert_fail@plt+0x494>
   10f10:	b	10f70 <__assert_fail@plt+0x4d4>
   10f14:	b	10f70 <__assert_fail@plt+0x4d4>
   10f18:	b	10f70 <__assert_fail@plt+0x4d4>
   10f1c:	b	10f70 <__assert_fail@plt+0x4d4>
   10f20:	b	10f70 <__assert_fail@plt+0x4d4>
   10f24:	b	10f78 <__assert_fail@plt+0x4dc>
   10f28:	subs	r8, r8, #1
   10f2c:	beq	10e88 <__assert_fail@plt+0x3ec>
   10f30:	cmp	r8, #0
   10f34:	ldr	r7, [sp, #44]	; 0x2c
   10f38:	bge	10ee4 <__assert_fail@plt+0x448>
   10f3c:	b	10e88 <__assert_fail@plt+0x3ec>
   10f40:	mov	r1, r7
   10f44:	mov	r2, #0
   10f48:	mov	r0, r6
   10f4c:	bl	130d4 <__assert_fail@plt+0x2638>
   10f50:	cmp	r8, #1
   10f54:	add	r7, r8, #1
   10f58:	ble	11090 <__assert_fail@plt+0x5f4>
   10f5c:	cmp	r7, #31
   10f60:	bgt	110e4 <__assert_fail@plt+0x648>
   10f64:	mov	r8, r7
   10f68:	ldr	r7, [sp, #44]	; 0x2c
   10f6c:	b	10ee4 <__assert_fail@plt+0x448>
   10f70:	cmp	r8, #1
   10f74:	ble	110bc <__assert_fail@plt+0x620>
   10f78:	mov	r0, r6
   10f7c:	bl	10934 <free@plt>
   10f80:	mov	r3, #1
   10f84:	mov	r8, r3
   10f88:	b	10eac <__assert_fail@plt+0x410>
   10f8c:	mov	r1, r7
   10f90:	mov	r0, r6
   10f94:	bl	132f8 <__assert_fail@plt+0x285c>
   10f98:	subs	r7, r0, #0
   10f9c:	blt	10fdc <__assert_fail@plt+0x540>
   10fa0:	add	sl, sp, #44	; 0x2c
   10fa4:	mov	r3, #0
   10fa8:	mov	r2, sl
   10fac:	mov	r1, r7
   10fb0:	mov	r0, r6
   10fb4:	bl	1362c <__assert_fail@plt+0x2b90>
   10fb8:	ldr	r0, [sp, #44]	; 0x2c
   10fbc:	cmp	r0, #0
   10fc0:	beq	10fc8 <__assert_fail@plt+0x52c>
   10fc4:	bl	10988 <puts@plt>
   10fc8:	mov	r1, r7
   10fcc:	mov	r0, r6
   10fd0:	bl	13318 <__assert_fail@plt+0x287c>
   10fd4:	subs	r7, r0, #0
   10fd8:	bge	10fa4 <__assert_fail@plt+0x508>
   10fdc:	cmn	r7, #1
   10fe0:	bne	10f78 <__assert_fail@plt+0x4dc>
   10fe4:	b	10e88 <__assert_fail@plt+0x3ec>
   10fe8:	ldr	r4, [sp, #36]	; 0x24
   10fec:	mov	r0, #10
   10ff0:	bl	10a24 <putchar@plt>
   10ff4:	b	10e88 <__assert_fail@plt+0x3ec>
   10ff8:	ldr	r0, [sp, #60]	; 0x3c
   10ffc:	cmp	r0, #0
   11000:	bne	10e84 <__assert_fail@plt+0x3e8>
   11004:	ldr	r1, [sp, #44]	; 0x2c
   11008:	mov	r0, r8
   1100c:	bl	11380 <__assert_fail@plt+0x8e4>
   11010:	b	10f78 <__assert_fail@plt+0x4dc>
   11014:	mov	r1, r8
   11018:	mov	r0, r7
   1101c:	bl	11610 <__assert_fail@plt+0xb74>
   11020:	cmp	r0, #0
   11024:	beq	10d9c <__assert_fail@plt+0x300>
   11028:	add	r3, r7, r8
   1102c:	ldrb	r3, [r3, #-1]
   11030:	cmp	r3, #0
   11034:	bne	11150 <__assert_fail@plt+0x6b4>
   11038:	cmp	r8, #0
   1103c:	ble	10fec <__assert_fail@plt+0x550>
   11040:	ldr	r3, [pc, #512]	; 11248 <__assert_fail@plt+0x7ac>
   11044:	mov	sl, r7
   11048:	add	r3, pc, r3
   1104c:	str	r3, [sp, #16]
   11050:	mov	r2, sl
   11054:	ldr	r1, [sp, #16]
   11058:	mov	r0, #1
   1105c:	bl	10a3c <__printf_chk@plt>
   11060:	mov	r0, sl
   11064:	bl	10a00 <strlen@plt>
   11068:	add	r0, r0, #1
   1106c:	add	sl, sl, r0
   11070:	sub	r3, sl, r7
   11074:	cmp	r8, r3
   11078:	ble	10fec <__assert_fail@plt+0x550>
   1107c:	cmp	r7, sl
   11080:	beq	11050 <__assert_fail@plt+0x5b4>
   11084:	mov	r0, #32
   11088:	bl	10a24 <putchar@plt>
   1108c:	b	11050 <__assert_fail@plt+0x5b4>
   11090:	cmp	r0, #0
   11094:	ldreq	r0, [sp, #28]
   11098:	beq	110ac <__assert_fail@plt+0x610>
   1109c:	ldrb	r3, [r0]
   110a0:	cmp	r3, #0
   110a4:	ldr	r3, [sp, #24]
   110a8:	moveq	r0, r3
   110ac:	cmp	r8, #1
   110b0:	bne	10f64 <__assert_fail@plt+0x4c8>
   110b4:	bl	10988 <puts@plt>
   110b8:	b	10f64 <__assert_fail@plt+0x4c8>
   110bc:	ldr	r1, [pc, #392]	; 1124c <__assert_fail@plt+0x7b0>
   110c0:	mov	r2, r0
   110c4:	add	r1, pc, r1
   110c8:	mov	r0, #1
   110cc:	bl	10a3c <__printf_chk@plt>
   110d0:	b	10f78 <__assert_fail@plt+0x4dc>
   110d4:	tst	r8, #3
   110d8:	moveq	r3, #4
   110dc:	movne	r3, #1
   110e0:	b	10dc4 <__assert_fail@plt+0x328>
   110e4:	ldr	r0, [pc, #356]	; 11250 <__assert_fail@plt+0x7b4>
   110e8:	add	r0, pc, r0
   110ec:	bl	10988 <puts@plt>
   110f0:	b	10f78 <__assert_fail@plt+0x4dc>
   110f4:	ldr	r3, [pc, #344]	; 11254 <__assert_fail@plt+0x7b8>
   110f8:	ldr	r2, [pc, #344]	; 11258 <__assert_fail@plt+0x7bc>
   110fc:	add	r3, pc, r3
   11100:	add	r1, r3, #112	; 0x70
   11104:	add	r2, pc, r2
   11108:	str	r1, [sp]
   1110c:	mov	r0, #0
   11110:	add	r1, r2, #12
   11114:	bl	11f70 <__assert_fail@plt+0x14d4>
   11118:	bl	11f44 <__assert_fail@plt+0x14a8>
   1111c:	ldr	r3, [pc, #312]	; 1125c <__assert_fail@plt+0x7c0>
   11120:	ldr	r2, [pc, #312]	; 11260 <__assert_fail@plt+0x7c4>
   11124:	add	r3, pc, r3
   11128:	ldr	r0, [pc, #308]	; 11264 <__assert_fail@plt+0x7c8>
   1112c:	add	r1, r3, #112	; 0x70
   11130:	add	r2, pc, r2
   11134:	str	r1, [sp]
   11138:	add	r0, pc, r0
   1113c:	add	r1, r2, #12
   11140:	bl	11f70 <__assert_fail@plt+0x14d4>
   11144:	mov	r1, r7
   11148:	ldr	r0, [r3]
   1114c:	b	1100c <__assert_fail@plt+0x570>
   11150:	ldr	r7, [sp, #32]
   11154:	ldr	r3, [pc, #268]	; 11268 <__assert_fail@plt+0x7cc>
   11158:	ldr	r0, [pc, #268]	; 1126c <__assert_fail@plt+0x7d0>
   1115c:	mov	r2, #20
   11160:	ldr	r3, [r7, r3]
   11164:	mov	r1, #1
   11168:	add	r0, pc, r0
   1116c:	ldr	r3, [r3]
   11170:	bl	1097c <fwrite@plt>
   11174:	b	10f78 <__assert_fail@plt+0x4dc>
   11178:	mov	r3, #1
   1117c:	mov	r8, r3
   11180:	b	10eac <__assert_fail@plt+0x410>
   11184:	ldr	r7, [sp, #32]
   11188:	ldr	r3, [pc, #216]	; 11268 <__assert_fail@plt+0x7cc>
   1118c:	ldr	r0, [pc, #220]	; 11270 <__assert_fail@plt+0x7d4>
   11190:	mov	r2, #57	; 0x39
   11194:	ldr	r3, [r7, r3]
   11198:	mov	r1, #1
   1119c:	add	r0, pc, r0
   111a0:	ldr	r3, [r3]
   111a4:	bl	1097c <fwrite@plt>
   111a8:	b	10f78 <__assert_fail@plt+0x4dc>
   111ac:	ldr	r3, [pc, #192]	; 11274 <__assert_fail@plt+0x7d8>
   111b0:	ldr	r2, [pc, #192]	; 11278 <__assert_fail@plt+0x7dc>
   111b4:	add	r3, pc, r3
   111b8:	ldr	r0, [pc, #188]	; 1127c <__assert_fail@plt+0x7e0>
   111bc:	add	r1, r3, #112	; 0x70
   111c0:	add	r2, pc, r2
   111c4:	str	r1, [sp]
   111c8:	add	r0, pc, r0
   111cc:	add	r1, r2, #12
   111d0:	bl	11f70 <__assert_fail@plt+0x14d4>
   111d4:	ldr	r3, [pc, #164]	; 11280 <__assert_fail@plt+0x7e4>
   111d8:	ldr	r1, [pc, #164]	; 11284 <__assert_fail@plt+0x7e8>
   111dc:	ldr	r0, [pc, #164]	; 11288 <__assert_fail@plt+0x7ec>
   111e0:	add	r3, pc, r3
   111e4:	mov	r2, #239	; 0xef
   111e8:	add	r3, r3, #288	; 0x120
   111ec:	add	r1, pc, r1
   111f0:	add	r0, pc, r0
   111f4:	bl	10a9c <__assert_fail@plt>
   111f8:	bl	10964 <__stack_chk_fail@plt>
   111fc:	ldr	r0, [pc, #136]	; 1128c <__assert_fail@plt+0x7f0>
   11200:	add	r3, r9, #112	; 0x70
   11204:	str	r3, [sp]
   11208:	mov	r2, sl
   1120c:	mov	r3, r9
   11210:	add	r1, sl, #12
   11214:	add	r0, pc, r0
   11218:	bl	11f70 <__assert_fail@plt+0x14d4>
   1121c:	andeq	r5, r1, ip, lsl #9
   11220:	muleq	r0, ip, r0
   11224:	muleq	r1, r0, r2
   11228:	strdeq	r3, [r0], -r4
   1122c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   11230:	andeq	r5, r1, r8, lsr r1
   11234:	muleq	r0, r4, fp
   11238:	andeq	r3, r0, r4, lsl #26
   1123c:	andeq	r0, r0, r0, lsr #1
   11240:	andeq	r3, r0, r8, lsr #24
   11244:	andeq	r3, r0, r0, lsr ip
   11248:	andeq	r3, r0, r4, lsl #24
   1124c:	strdeq	r3, [r0], -r8
   11250:			; <UNDEFINED> instruction: 0x000038b8
   11254:	andeq	r4, r1, r4, ror ip
   11258:	ldrdeq	r3, [r0], -r4
   1125c:	andeq	r4, r1, ip, asr #24
   11260:	andeq	r3, r0, r8, lsr #13
   11264:	andeq	r3, r0, r8, lsl #16
   11268:	andeq	r0, r0, r4, lsr #1
   1126c:	andeq	r3, r0, r0, lsl #17
   11270:	andeq	r3, r0, r4, ror #16
   11274:			; <UNDEFINED> instruction: 0x00014bbc
   11278:	andeq	r3, r0, r8, lsl r6
   1127c:	muleq	r0, ip, r7
   11280:	strdeq	r3, [r0], -r8
   11284:	andeq	r3, r0, r4, ror #15
   11288:	andeq	r3, r0, ip, ror #15
   1128c:	andeq	r3, r0, r4, ror #14
   11290:	mov	fp, #0
   11294:	mov	lr, #0
   11298:	pop	{r1}		; (ldr r1, [sp], #4)
   1129c:	mov	r2, sp
   112a0:	push	{r2}		; (str r2, [sp, #-4]!)
   112a4:	push	{r0}		; (str r0, [sp, #-4]!)
   112a8:	ldr	ip, [pc, #16]	; 112c0 <__assert_fail@plt+0x824>
   112ac:	push	{ip}		; (str ip, [sp, #-4]!)
   112b0:	ldr	r0, [pc, #12]	; 112c4 <__assert_fail@plt+0x828>
   112b4:	ldr	r3, [pc, #12]	; 112c8 <__assert_fail@plt+0x82c>
   112b8:	bl	109a0 <__libc_start_main@plt>
   112bc:	bl	10a84 <abort@plt>
   112c0:	ldrdeq	r4, [r1], -r0
   112c4:	andeq	r0, r1, r8, lsr #21
   112c8:	andeq	r4, r1, r0, ror r7
   112cc:	ldr	r3, [pc, #20]	; 112e8 <__assert_fail@plt+0x84c>
   112d0:	ldr	r2, [pc, #20]	; 112ec <__assert_fail@plt+0x850>
   112d4:	add	r3, pc, r3
   112d8:	ldr	r2, [r3, r2]
   112dc:	cmp	r2, #0
   112e0:	bxeq	lr
   112e4:	b	109c4 <__gmon_start__@plt>
   112e8:	andeq	r4, r1, r0, ror ip
   112ec:	andeq	r0, r0, r8, lsr #1
   112f0:	ldr	r0, [pc, #24]	; 11310 <__assert_fail@plt+0x874>
   112f4:	ldr	r3, [pc, #24]	; 11314 <__assert_fail@plt+0x878>
   112f8:	cmp	r3, r0
   112fc:	bxeq	lr
   11300:	ldr	r3, [pc, #16]	; 11318 <__assert_fail@plt+0x87c>
   11304:	cmp	r3, #0
   11308:	bxeq	lr
   1130c:	bx	r3
   11310:	andeq	r6, r2, r8
   11314:	andeq	r6, r2, r8
   11318:	andeq	r0, r0, r0
   1131c:	ldr	r0, [pc, #36]	; 11348 <__assert_fail@plt+0x8ac>
   11320:	ldr	r1, [pc, #36]	; 1134c <__assert_fail@plt+0x8b0>
   11324:	sub	r1, r1, r0
   11328:	asr	r1, r1, #2
   1132c:	add	r1, r1, r1, lsr #31
   11330:	asrs	r1, r1, #1
   11334:	bxeq	lr
   11338:	ldr	r3, [pc, #16]	; 11350 <__assert_fail@plt+0x8b4>
   1133c:	cmp	r3, #0
   11340:	bxeq	lr
   11344:	bx	r3
   11348:	andeq	r6, r2, r8
   1134c:	andeq	r6, r2, r8
   11350:	andeq	r0, r0, r0
   11354:	push	{r4, lr}
   11358:	ldr	r4, [pc, #24]	; 11378 <__assert_fail@plt+0x8dc>
   1135c:	ldrb	r3, [r4]
   11360:	cmp	r3, #0
   11364:	popne	{r4, pc}
   11368:	bl	112f0 <__assert_fail@plt+0x854>
   1136c:	mov	r3, #1
   11370:	strb	r3, [r4]
   11374:	pop	{r4, pc}
   11378:	andeq	r6, r2, r8
   1137c:	b	1131c <__assert_fail@plt+0x880>
   11380:	ldr	r2, [pc, #68]	; 113cc <__assert_fail@plt+0x930>
   11384:	ldr	ip, [pc, #68]	; 113d0 <__assert_fail@plt+0x934>
   11388:	add	r2, pc, r2
   1138c:	push	{r4, r5, lr}
   11390:	mov	r5, r0
   11394:	ldr	r3, [r2, ip]
   11398:	sub	sp, sp, #12
   1139c:	mov	r0, r1
   113a0:	ldr	r4, [r3]
   113a4:	bl	144b0 <__assert_fail@plt+0x3a14>
   113a8:	ldr	r2, [pc, #36]	; 113d4 <__assert_fail@plt+0x938>
   113ac:	mov	r3, r5
   113b0:	add	r2, pc, r2
   113b4:	mov	r1, #1
   113b8:	str	r0, [sp]
   113bc:	mov	r0, r4
   113c0:	bl	10a54 <__fprintf_chk@plt>
   113c4:	add	sp, sp, #12
   113c8:	pop	{r4, r5, pc}
   113cc:			; <UNDEFINED> instruction: 0x00014bbc
   113d0:	andeq	r0, r0, r4, lsr #1
   113d4:	andeq	r3, r0, ip, asr r5
   113d8:	ldr	ip, [pc, #100]	; 11444 <__assert_fail@plt+0x9a8>
   113dc:	push	{r0, r1, r2, r3}
   113e0:	add	ip, pc, ip
   113e4:	ldr	r2, [pc, #92]	; 11448 <__assert_fail@plt+0x9ac>
   113e8:	push	{lr}		; (str lr, [sp, #-4]!)
   113ec:	sub	sp, sp, #12
   113f0:	ldr	r2, [ip, r2]
   113f4:	ldr	r3, [pc, #80]	; 1144c <__assert_fail@plt+0x9b0>
   113f8:	add	r1, sp, #20
   113fc:	str	r1, [sp]
   11400:	ldr	r1, [r2]
   11404:	ldr	r0, [pc, #68]	; 11450 <__assert_fail@plt+0x9b4>
   11408:	str	r1, [sp, #4]
   1140c:	ldr	r4, [ip, r3]
   11410:	ldr	r5, [sp, #16]
   11414:	mov	r2, #13
   11418:	mov	r1, #1
   1141c:	ldr	r3, [r4]
   11420:	add	r0, pc, r0
   11424:	bl	1097c <fwrite@plt>
   11428:	ldr	r0, [r4]
   1142c:	mov	r2, r5
   11430:	ldr	r3, [sp]
   11434:	mov	r1, #1
   11438:	bl	109b8 <__vfprintf_chk@plt>
   1143c:	mov	r0, #1
   11440:	bl	109f4 <exit@plt>
   11444:	andeq	r4, r1, r4, ror #22
   11448:	muleq	r0, ip, r0
   1144c:	andeq	r0, r0, r4, lsr #1
   11450:	andeq	r3, r0, r4, lsr #14
   11454:	push	{r4, r5, r6, lr}
   11458:	mov	r6, r0
   1145c:	bl	10a00 <strlen@plt>
   11460:	add	r4, r0, #1
   11464:	mov	r0, r4
   11468:	bl	10994 <malloc@plt>
   1146c:	subs	r5, r0, #0
   11470:	beq	11488 <__assert_fail@plt+0x9ec>
   11474:	mov	r2, r4
   11478:	mov	r1, r6
   1147c:	bl	1094c <memcpy@plt>
   11480:	mov	r0, r5
   11484:	pop	{r4, r5, r6, pc}
   11488:	ldr	r0, [pc, #4]	; 11494 <__assert_fail@plt+0x9f8>
   1148c:	add	r0, pc, r0
   11490:	bl	113d8 <__assert_fail@plt+0x93c>
   11494:	andeq	r3, r0, r8, asr #13
   11498:	push	{r1, r2, r3}
   1149c:	ldr	r3, [pc, #180]	; 11558 <__assert_fail@plt+0xabc>
   114a0:	ldr	r2, [pc, #180]	; 1155c <__assert_fail@plt+0xac0>
   114a4:	add	r3, pc, r3
   114a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   114ac:	sub	sp, sp, #16
   114b0:	ldr	r9, [r3, r2]
   114b4:	ldr	r7, [sp, #44]	; 0x2c
   114b8:	mov	r8, r0
   114bc:	ldr	r2, [r9]
   114c0:	mov	r5, #0
   114c4:	mov	r4, #128	; 0x80
   114c8:	add	r6, sp, #48	; 0x30
   114cc:	str	r2, [sp, #12]
   114d0:	b	114e0 <__assert_fail@plt+0xa44>
   114d4:	cmp	r0, #0
   114d8:	addge	r4, r0, #1
   114dc:	lsllt	r4, r4, #1
   114e0:	mov	r0, r5
   114e4:	mov	r1, r4
   114e8:	bl	10970 <realloc@plt>
   114ec:	subs	r5, r0, #0
   114f0:	beq	11544 <__assert_fail@plt+0xaa8>
   114f4:	str	r6, [sp, #4]
   114f8:	str	r7, [sp]
   114fc:	mvn	r3, #0
   11500:	mov	r2, #1
   11504:	mov	r1, r4
   11508:	str	r6, [sp, #8]
   1150c:	bl	10940 <__vsnprintf_chk@plt>
   11510:	cmp	r4, r0
   11514:	bls	114d4 <__assert_fail@plt+0xa38>
   11518:	str	r5, [r8]
   1151c:	mov	r0, r5
   11520:	bl	10a00 <strlen@plt>
   11524:	ldr	r2, [sp, #12]
   11528:	ldr	r3, [r9]
   1152c:	cmp	r2, r3
   11530:	bne	11554 <__assert_fail@plt+0xab8>
   11534:	add	sp, sp, #16
   11538:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1153c:	add	sp, sp, #12
   11540:	bx	lr
   11544:	ldr	r0, [pc, #20]	; 11560 <__assert_fail@plt+0xac4>
   11548:	mov	r1, r4
   1154c:	add	r0, pc, r0
   11550:	bl	113d8 <__assert_fail@plt+0x93c>
   11554:	bl	10964 <__stack_chk_fail@plt>
   11558:	andeq	r4, r1, r0, lsr #21
   1155c:	muleq	r0, ip, r0
   11560:	andeq	r3, r0, ip, lsl r6
   11564:	push	{r4, r5, r6, r7, r8, lr}
   11568:	mov	r6, r1
   1156c:	mov	r8, r0
   11570:	bl	10a00 <strlen@plt>
   11574:	mov	r4, r0
   11578:	mov	r0, r6
   1157c:	bl	10a00 <strlen@plt>
   11580:	cmp	r4, #0
   11584:	add	r3, r4, r0
   11588:	mov	r7, r0
   1158c:	add	r0, r3, #2
   11590:	beq	115a4 <__assert_fail@plt+0xb08>
   11594:	add	r2, r8, r4
   11598:	ldrb	r2, [r2, #-1]
   1159c:	cmp	r2, #47	; 0x2f
   115a0:	beq	115ec <__assert_fail@plt+0xb50>
   115a4:	bl	10994 <malloc@plt>
   115a8:	subs	r5, r0, #0
   115ac:	beq	115e0 <__assert_fail@plt+0xb44>
   115b0:	mov	r2, r4
   115b4:	mov	r1, r8
   115b8:	bl	1094c <memcpy@plt>
   115bc:	mov	r3, #47	; 0x2f
   115c0:	strb	r3, [r5, r4]
   115c4:	add	r4, r4, #1
   115c8:	add	r2, r7, #1
   115cc:	mov	r1, r6
   115d0:	add	r0, r5, r4
   115d4:	bl	1094c <memcpy@plt>
   115d8:	mov	r0, r5
   115dc:	pop	{r4, r5, r6, r7, r8, pc}
   115e0:	ldr	r0, [pc, #36]	; 1160c <__assert_fail@plt+0xb70>
   115e4:	add	r0, pc, r0
   115e8:	bl	113d8 <__assert_fail@plt+0x93c>
   115ec:	add	r0, r3, #1
   115f0:	bl	10994 <malloc@plt>
   115f4:	subs	r5, r0, #0
   115f8:	beq	115e0 <__assert_fail@plt+0xb44>
   115fc:	mov	r1, r8
   11600:	mov	r2, r4
   11604:	bl	1094c <memcpy@plt>
   11608:	b	115c8 <__assert_fail@plt+0xb2c>
   1160c:	andeq	r3, r0, r0, ror r5
   11610:	cmp	r1, #0
   11614:	beq	116b0 <__assert_fail@plt+0xc14>
   11618:	push	{r4, r5, r6, r7, r8, lr}
   1161c:	add	r8, r0, r1
   11620:	mov	r7, r0
   11624:	ldrb	r3, [r8, #-1]
   11628:	cmp	r3, #0
   1162c:	bne	116a8 <__assert_fail@plt+0xc0c>
   11630:	cmp	r0, r8
   11634:	bcs	116a0 <__assert_fail@plt+0xc04>
   11638:	mov	r5, r7
   1163c:	mov	r6, r5
   11640:	ldrb	r4, [r5], #1
   11644:	cmp	r4, #0
   11648:	beq	11674 <__assert_fail@plt+0xbd8>
   1164c:	bl	109e8 <__ctype_b_loc@plt>
   11650:	lsl	r4, r4, #1
   11654:	ldr	r3, [r0]
   11658:	ldrh	r0, [r3, r4]
   1165c:	ands	r0, r0, #16384	; 0x4000
   11660:	popeq	{r4, r5, r6, r7, r8, pc}
   11664:	cmp	r8, r5
   11668:	bhi	1163c <__assert_fail@plt+0xba0>
   1166c:	ldrb	r4, [r6, #1]
   11670:	mov	r6, r5
   11674:	cmp	r4, #0
   11678:	sub	r7, r6, r7
   1167c:	clz	r7, r7
   11680:	lsr	r7, r7, #5
   11684:	moveq	r4, r7
   11688:	movne	r4, #1
   1168c:	cmp	r4, #0
   11690:	bne	116a8 <__assert_fail@plt+0xc0c>
   11694:	add	r7, r6, #1
   11698:	cmp	r8, r7
   1169c:	bhi	11638 <__assert_fail@plt+0xb9c>
   116a0:	mov	r0, #1
   116a4:	pop	{r4, r5, r6, r7, r8, pc}
   116a8:	mov	r0, #0
   116ac:	pop	{r4, r5, r6, r7, r8, pc}
   116b0:	mov	r0, r1
   116b4:	bx	lr
   116b8:	ldr	r3, [pc, #616]	; 11928 <__assert_fail@plt+0xe8c>
   116bc:	ldr	r2, [pc, #616]	; 1192c <__assert_fail@plt+0xe90>
   116c0:	push	{r4, r5, r6, r7, r8, lr}
   116c4:	add	r3, pc, r3
   116c8:	ldr	r4, [r1]
   116cc:	ldr	r6, [r3, r2]
   116d0:	mov	ip, r0
   116d4:	ldrb	r0, [r0, r4]
   116d8:	sub	sp, sp, #16
   116dc:	ldr	r2, [r6]
   116e0:	sub	r3, r0, #48	; 0x30
   116e4:	mov	r5, r1
   116e8:	str	r2, [sp, #12]
   116ec:	add	r1, ip, r4
   116f0:	add	r7, r4, #1
   116f4:	cmp	r3, #72	; 0x48
   116f8:	addls	pc, pc, r3, lsl #2
   116fc:	b	11828 <__assert_fail@plt+0xd8c>
   11700:	b	118c4 <__assert_fail@plt+0xe28>
   11704:	b	118c4 <__assert_fail@plt+0xe28>
   11708:	b	118c4 <__assert_fail@plt+0xe28>
   1170c:	b	118c4 <__assert_fail@plt+0xe28>
   11710:	b	118c4 <__assert_fail@plt+0xe28>
   11714:	b	118c4 <__assert_fail@plt+0xe28>
   11718:	b	118c4 <__assert_fail@plt+0xe28>
   1171c:	b	118c4 <__assert_fail@plt+0xe28>
   11720:	b	11828 <__assert_fail@plt+0xd8c>
   11724:	b	11828 <__assert_fail@plt+0xd8c>
   11728:	b	11828 <__assert_fail@plt+0xd8c>
   1172c:	b	11828 <__assert_fail@plt+0xd8c>
   11730:	b	11828 <__assert_fail@plt+0xd8c>
   11734:	b	11828 <__assert_fail@plt+0xd8c>
   11738:	b	11828 <__assert_fail@plt+0xd8c>
   1173c:	b	11828 <__assert_fail@plt+0xd8c>
   11740:	b	11828 <__assert_fail@plt+0xd8c>
   11744:	b	11828 <__assert_fail@plt+0xd8c>
   11748:	b	11828 <__assert_fail@plt+0xd8c>
   1174c:	b	11828 <__assert_fail@plt+0xd8c>
   11750:	b	11828 <__assert_fail@plt+0xd8c>
   11754:	b	11828 <__assert_fail@plt+0xd8c>
   11758:	b	11828 <__assert_fail@plt+0xd8c>
   1175c:	b	11828 <__assert_fail@plt+0xd8c>
   11760:	b	11828 <__assert_fail@plt+0xd8c>
   11764:	b	11828 <__assert_fail@plt+0xd8c>
   11768:	b	11828 <__assert_fail@plt+0xd8c>
   1176c:	b	11828 <__assert_fail@plt+0xd8c>
   11770:	b	11828 <__assert_fail@plt+0xd8c>
   11774:	b	11828 <__assert_fail@plt+0xd8c>
   11778:	b	11828 <__assert_fail@plt+0xd8c>
   1177c:	b	11828 <__assert_fail@plt+0xd8c>
   11780:	b	11828 <__assert_fail@plt+0xd8c>
   11784:	b	11828 <__assert_fail@plt+0xd8c>
   11788:	b	11828 <__assert_fail@plt+0xd8c>
   1178c:	b	11828 <__assert_fail@plt+0xd8c>
   11790:	b	11828 <__assert_fail@plt+0xd8c>
   11794:	b	11828 <__assert_fail@plt+0xd8c>
   11798:	b	11828 <__assert_fail@plt+0xd8c>
   1179c:	b	11828 <__assert_fail@plt+0xd8c>
   117a0:	b	11828 <__assert_fail@plt+0xd8c>
   117a4:	b	11828 <__assert_fail@plt+0xd8c>
   117a8:	b	11828 <__assert_fail@plt+0xd8c>
   117ac:	b	11828 <__assert_fail@plt+0xd8c>
   117b0:	b	11828 <__assert_fail@plt+0xd8c>
   117b4:	b	11828 <__assert_fail@plt+0xd8c>
   117b8:	b	11828 <__assert_fail@plt+0xd8c>
   117bc:	b	11828 <__assert_fail@plt+0xd8c>
   117c0:	b	11828 <__assert_fail@plt+0xd8c>
   117c4:	b	11824 <__assert_fail@plt+0xd88>
   117c8:	b	11844 <__assert_fail@plt+0xda8>
   117cc:	b	11828 <__assert_fail@plt+0xd8c>
   117d0:	b	11828 <__assert_fail@plt+0xd8c>
   117d4:	b	11828 <__assert_fail@plt+0xd8c>
   117d8:	b	1184c <__assert_fail@plt+0xdb0>
   117dc:	b	11828 <__assert_fail@plt+0xd8c>
   117e0:	b	11828 <__assert_fail@plt+0xd8c>
   117e4:	b	11828 <__assert_fail@plt+0xd8c>
   117e8:	b	11828 <__assert_fail@plt+0xd8c>
   117ec:	b	11828 <__assert_fail@plt+0xd8c>
   117f0:	b	11828 <__assert_fail@plt+0xd8c>
   117f4:	b	11828 <__assert_fail@plt+0xd8c>
   117f8:	b	11854 <__assert_fail@plt+0xdb8>
   117fc:	b	11828 <__assert_fail@plt+0xd8c>
   11800:	b	11828 <__assert_fail@plt+0xd8c>
   11804:	b	11828 <__assert_fail@plt+0xd8c>
   11808:	b	1185c <__assert_fail@plt+0xdc0>
   1180c:	b	11828 <__assert_fail@plt+0xd8c>
   11810:	b	11864 <__assert_fail@plt+0xdc8>
   11814:	b	11828 <__assert_fail@plt+0xd8c>
   11818:	b	1186c <__assert_fail@plt+0xdd0>
   1181c:	b	11828 <__assert_fail@plt+0xd8c>
   11820:	b	11874 <__assert_fail@plt+0xdd8>
   11824:	mov	r0, #7
   11828:	ldr	r2, [sp, #12]
   1182c:	ldr	r3, [r6]
   11830:	str	r7, [r5]
   11834:	cmp	r2, r3
   11838:	bne	11924 <__assert_fail@plt+0xe88>
   1183c:	add	sp, sp, #16
   11840:	pop	{r4, r5, r6, r7, r8, pc}
   11844:	mov	r0, #8
   11848:	b	11828 <__assert_fail@plt+0xd8c>
   1184c:	mov	r0, #12
   11850:	b	11828 <__assert_fail@plt+0xd8c>
   11854:	mov	r0, #10
   11858:	b	11828 <__assert_fail@plt+0xd8c>
   1185c:	mov	r0, #13
   11860:	b	11828 <__assert_fail@plt+0xd8c>
   11864:	mov	r0, #9
   11868:	b	11828 <__assert_fail@plt+0xd8c>
   1186c:	mov	r0, #11
   11870:	b	11828 <__assert_fail@plt+0xd8c>
   11874:	add	r4, sp, #8
   11878:	add	r1, ip, r7
   1187c:	mov	r3, #0
   11880:	mov	r2, #2
   11884:	mov	r0, r4
   11888:	strb	r3, [sp, #10]
   1188c:	bl	10a30 <strncpy@plt>
   11890:	mov	r0, r4
   11894:	mov	r2, #16
   11898:	add	r1, sp, #4
   1189c:	bl	10910 <strtol@plt>
   118a0:	ldr	r3, [sp, #4]
   118a4:	cmp	r3, r4
   118a8:	subhi	r3, r3, r4
   118ac:	addhi	r7, r7, r3
   118b0:	uxtbhi	r0, r0
   118b4:	bhi	11828 <__assert_fail@plt+0xd8c>
   118b8:	ldr	r0, [pc, #112]	; 11930 <__assert_fail@plt+0xe94>
   118bc:	add	r0, pc, r0
   118c0:	bl	113d8 <__assert_fail@plt+0x93c>
   118c4:	add	r8, sp, #8
   118c8:	mov	r3, #0
   118cc:	mov	r2, #3
   118d0:	mov	r0, r8
   118d4:	strb	r3, [sp, #11]
   118d8:	bl	10a30 <strncpy@plt>
   118dc:	mov	r0, r8
   118e0:	mov	r2, #8
   118e4:	add	r1, sp, #4
   118e8:	bl	10910 <strtol@plt>
   118ec:	ldr	r7, [sp, #4]
   118f0:	cmp	r7, r8
   118f4:	subhi	r7, r7, r8
   118f8:	addhi	r7, r7, r4
   118fc:	uxtbhi	r0, r0
   11900:	bhi	11828 <__assert_fail@plt+0xd8c>
   11904:	ldr	r3, [pc, #40]	; 11934 <__assert_fail@plt+0xe98>
   11908:	ldr	r1, [pc, #40]	; 11938 <__assert_fail@plt+0xe9c>
   1190c:	ldr	r0, [pc, #40]	; 1193c <__assert_fail@plt+0xea0>
   11910:	add	r3, pc, r3
   11914:	mov	r2, #150	; 0x96
   11918:	add	r1, pc, r1
   1191c:	add	r0, pc, r0
   11920:	bl	10a9c <__assert_fail@plt>
   11924:	bl	10964 <__stack_chk_fail@plt>
   11928:	andeq	r4, r1, r0, lsl #17
   1192c:	muleq	r0, ip, r0
   11930:	ldrdeq	r3, [r0], -ip
   11934:	andeq	r3, r0, r8, lsl r2
   11938:	andeq	r3, r0, ip, ror #4
   1193c:	andeq	r3, r0, r0, ror r2
   11940:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11944:	mov	r4, #0
   11948:	str	r4, [r1]
   1194c:	mov	r8, r1
   11950:	ldr	r1, [pc, #240]	; 11a48 <__assert_fail@plt+0xfac>
   11954:	mov	r9, r2
   11958:	add	r1, pc, r1
   1195c:	mov	r5, r0
   11960:	bl	10904 <strcmp@plt>
   11964:	subs	r7, r0, #0
   11968:	beq	11980 <__assert_fail@plt+0xee4>
   1196c:	mov	r1, r4
   11970:	mov	r0, r5
   11974:	bl	109d0 <open@plt>
   11978:	subs	r7, r0, #0
   1197c:	blt	11a2c <__assert_fail@plt+0xf90>
   11980:	mov	r0, #1024	; 0x400
   11984:	bl	10994 <malloc@plt>
   11988:	subs	r6, r0, #0
   1198c:	movne	r4, #0
   11990:	movne	r5, #1024	; 0x400
   11994:	beq	11a3c <__assert_fail@plt+0xfa0>
   11998:	sub	r2, r5, r4
   1199c:	add	r1, r6, r4
   119a0:	mov	r0, r7
   119a4:	bl	1091c <read@plt>
   119a8:	cmp	r0, #0
   119ac:	blt	119e8 <__assert_fail@plt+0xf4c>
   119b0:	add	r4, r4, r0
   119b4:	beq	11a18 <__assert_fail@plt+0xf7c>
   119b8:	cmp	r5, r4
   119bc:	bne	11998 <__assert_fail@plt+0xefc>
   119c0:	lsl	r5, r5, #1
   119c4:	mov	r0, r6
   119c8:	mov	r1, r5
   119cc:	bl	10970 <realloc@plt>
   119d0:	subs	r6, r0, #0
   119d4:	bne	11998 <__assert_fail@plt+0xefc>
   119d8:	ldr	r0, [pc, #108]	; 11a4c <__assert_fail@plt+0xfb0>
   119dc:	mov	r1, r5
   119e0:	add	r0, pc, r0
   119e4:	bl	113d8 <__assert_fail@plt+0x93c>
   119e8:	bl	10a18 <__errno_location@plt>
   119ec:	ldr	r4, [r0]
   119f0:	mov	r0, r7
   119f4:	bl	10a90 <close@plt>
   119f8:	cmp	r4, #0
   119fc:	beq	11a20 <__assert_fail@plt+0xf84>
   11a00:	mov	r0, r6
   11a04:	bl	10934 <free@plt>
   11a08:	cmp	r9, #0
   11a0c:	strne	r5, [r9]
   11a10:	mov	r0, r4
   11a14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11a18:	mov	r0, r7
   11a1c:	bl	10a90 <close@plt>
   11a20:	mov	r4, #0
   11a24:	str	r6, [r8]
   11a28:	b	11a08 <__assert_fail@plt+0xf6c>
   11a2c:	bl	10a18 <__errno_location@plt>
   11a30:	ldr	r4, [r0]
   11a34:	mov	r0, r4
   11a38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11a3c:	ldr	r0, [pc, #12]	; 11a50 <__assert_fail@plt+0xfb4>
   11a40:	add	r0, pc, r0
   11a44:	bl	113d8 <__assert_fail@plt+0x93c>
   11a48:	andeq	r3, r0, r8, ror #4
   11a4c:	andeq	r3, r0, r8, lsl #3
   11a50:	andeq	r3, r0, r4, lsl r1
   11a54:	push	{r4, r5, r6, lr}
   11a58:	sub	sp, sp, #16
   11a5c:	ldr	r4, [pc, #124]	; 11ae0 <__assert_fail@plt+0x1044>
   11a60:	ldr	r3, [pc, #124]	; 11ae4 <__assert_fail@plt+0x1048>
   11a64:	add	r4, pc, r4
   11a68:	mov	r2, r1
   11a6c:	ldr	r5, [r4, r3]
   11a70:	add	r1, sp, #8
   11a74:	mov	r6, r0
   11a78:	ldr	r3, [r5]
   11a7c:	str	r3, [sp, #12]
   11a80:	bl	11940 <__assert_fail@plt+0xea4>
   11a84:	cmp	r0, #0
   11a88:	ldreq	r0, [sp, #8]
   11a8c:	bne	11aa8 <__assert_fail@plt+0x100c>
   11a90:	ldr	r2, [sp, #12]
   11a94:	ldr	r3, [r5]
   11a98:	cmp	r2, r3
   11a9c:	bne	11adc <__assert_fail@plt+0x1040>
   11aa0:	add	sp, sp, #16
   11aa4:	pop	{r4, r5, r6, pc}
   11aa8:	ldr	r3, [pc, #56]	; 11ae8 <__assert_fail@plt+0x104c>
   11aac:	ldr	r3, [r4, r3]
   11ab0:	ldr	r4, [r3]
   11ab4:	bl	109ac <strerror@plt>
   11ab8:	ldr	r2, [pc, #44]	; 11aec <__assert_fail@plt+0x1050>
   11abc:	mov	r3, r6
   11ac0:	add	r2, pc, r2
   11ac4:	mov	r1, #1
   11ac8:	str	r0, [sp]
   11acc:	mov	r0, r4
   11ad0:	bl	10a54 <__fprintf_chk@plt>
   11ad4:	mov	r0, #0
   11ad8:	b	11a90 <__assert_fail@plt+0xff4>
   11adc:	bl	10964 <__stack_chk_fail@plt>
   11ae0:	andeq	r4, r1, r0, ror #9
   11ae4:	muleq	r0, ip, r0
   11ae8:	andeq	r0, r0, r4, lsr #1
   11aec:	andeq	r3, r0, r4, lsl #2
   11af0:	push	{r4, r5, r6, r7, r8, lr}
   11af4:	mov	r6, r1
   11af8:	ldr	r1, [pc, #268]	; 11c0c <__assert_fail@plt+0x1170>
   11afc:	mov	r4, r0
   11b00:	add	r1, pc, r1
   11b04:	bl	10904 <strcmp@plt>
   11b08:	cmp	r0, #0
   11b0c:	bne	11b98 <__assert_fail@plt+0x10fc>
   11b10:	ldr	r3, [r6, #4]
   11b14:	lsr	r5, r3, #24
   11b18:	lsl	r2, r3, #8
   11b1c:	orr	r5, r5, r3, lsl #24
   11b20:	and	r2, r2, #16711680	; 0xff0000
   11b24:	lsr	r3, r3, #8
   11b28:	orr	r5, r5, r2
   11b2c:	and	r3, r3, #65280	; 0xff00
   11b30:	orr	r5, r5, r3
   11b34:	cmp	r5, #0
   11b38:	movgt	r8, #1
   11b3c:	ble	11be8 <__assert_fail@plt+0x114c>
   11b40:	mov	r4, #0
   11b44:	b	11b50 <__assert_fail@plt+0x10b4>
   11b48:	cmp	r4, r5
   11b4c:	bge	11bf0 <__assert_fail@plt+0x1154>
   11b50:	sub	r2, r5, r4
   11b54:	add	r1, r6, r4
   11b58:	mov	r0, r8
   11b5c:	bl	10a48 <write@plt>
   11b60:	subs	r7, r0, #0
   11b64:	add	r4, r4, r7
   11b68:	bge	11b48 <__assert_fail@plt+0x10ac>
   11b6c:	bl	10a18 <__errno_location@plt>
   11b70:	cmp	r8, #1
   11b74:	ldr	r7, [r0]
   11b78:	rsb	r7, r7, #0
   11b7c:	beq	11b88 <__assert_fail@plt+0x10ec>
   11b80:	mov	r0, r8
   11b84:	bl	10a90 <close@plt>
   11b88:	cmp	r7, #0
   11b8c:	bge	11be8 <__assert_fail@plt+0x114c>
   11b90:	rsb	r0, r7, #0
   11b94:	pop	{r4, r5, r6, r7, r8, pc}
   11b98:	mov	r0, r4
   11b9c:	ldr	r2, [pc, #108]	; 11c10 <__assert_fail@plt+0x1174>
   11ba0:	ldr	r1, [pc, #108]	; 11c14 <__assert_fail@plt+0x1178>
   11ba4:	bl	109d0 <open@plt>
   11ba8:	subs	r8, r0, #0
   11bac:	blt	11c00 <__assert_fail@plt+0x1164>
   11bb0:	ldr	r3, [r6, #4]
   11bb4:	lsr	r5, r3, #24
   11bb8:	lsl	r2, r3, #8
   11bbc:	orr	r5, r5, r3, lsl #24
   11bc0:	and	r2, r2, #16711680	; 0xff0000
   11bc4:	lsr	r3, r3, #8
   11bc8:	orr	r5, r5, r2
   11bcc:	and	r3, r3, #65280	; 0xff00
   11bd0:	orr	r5, r5, r3
   11bd4:	cmp	r5, #0
   11bd8:	bgt	11b40 <__assert_fail@plt+0x10a4>
   11bdc:	cmp	r8, #1
   11be0:	beq	11be8 <__assert_fail@plt+0x114c>
   11be4:	bl	10a90 <close@plt>
   11be8:	mov	r0, #0
   11bec:	pop	{r4, r5, r6, r7, r8, pc}
   11bf0:	cmp	r8, #1
   11bf4:	bne	11b80 <__assert_fail@plt+0x10e4>
   11bf8:	mov	r0, #0
   11bfc:	pop	{r4, r5, r6, r7, r8, pc}
   11c00:	bl	10a18 <__errno_location@plt>
   11c04:	ldr	r0, [r0]
   11c08:	pop	{r4, r5, r6, r7, r8, pc}
   11c0c:	andeq	r3, r0, r0, asr #1
   11c10:			; <UNDEFINED> instruction: 0x000001b6
   11c14:	andeq	r0, r0, r1, asr #4
   11c18:	push	{r4, r5, lr}
   11c1c:	sub	sp, sp, #12
   11c20:	mov	r4, r0
   11c24:	bl	11af0 <__assert_fail@plt+0x1054>
   11c28:	ldr	r2, [pc, #80]	; 11c80 <__assert_fail@plt+0x11e4>
   11c2c:	add	r2, pc, r2
   11c30:	subs	r3, r0, #0
   11c34:	bne	11c44 <__assert_fail@plt+0x11a8>
   11c38:	mov	r0, r3
   11c3c:	add	sp, sp, #12
   11c40:	pop	{r4, r5, pc}
   11c44:	ldr	r3, [pc, #56]	; 11c84 <__assert_fail@plt+0x11e8>
   11c48:	ldr	r3, [r2, r3]
   11c4c:	ldr	r5, [r3]
   11c50:	bl	109ac <strerror@plt>
   11c54:	ldr	r2, [pc, #44]	; 11c88 <__assert_fail@plt+0x11ec>
   11c58:	mov	r3, r4
   11c5c:	add	r2, pc, r2
   11c60:	mov	r1, #1
   11c64:	str	r0, [sp]
   11c68:	mov	r0, r5
   11c6c:	bl	10a54 <__fprintf_chk@plt>
   11c70:	mvn	r3, #0
   11c74:	mov	r0, r3
   11c78:	add	sp, sp, #12
   11c7c:	pop	{r4, r5, pc}
   11c80:	andeq	r4, r1, r8, lsl r3
   11c84:	andeq	r0, r0, r4, lsr #1
   11c88:	andeq	r2, r0, ip, lsl #31
   11c8c:	ldrb	r3, [r0]
   11c90:	cmp	r3, #0
   11c94:	beq	11d74 <__assert_fail@plt+0x12d8>
   11c98:	mvn	r3, #0
   11c9c:	push	{r4, r5, r6, r7, r8, lr}
   11ca0:	mov	r5, r0
   11ca4:	str	r3, [r2]
   11ca8:	ldrb	r4, [r0]
   11cac:	ldr	r0, [pc, #200]	; 11d7c <__assert_fail@plt+0x12e0>
   11cb0:	mov	r8, r1
   11cb4:	add	r0, pc, r0
   11cb8:	mov	r1, r4
   11cbc:	mov	r7, r2
   11cc0:	bl	10a0c <strchr@plt>
   11cc4:	mov	r6, r4
   11cc8:	cmp	r0, #0
   11ccc:	moveq	r6, r0
   11cd0:	beq	11ce8 <__assert_fail@plt+0x124c>
   11cd4:	ldrb	r3, [r5, #1]
   11cd8:	cmp	r4, r3
   11cdc:	beq	11d54 <__assert_fail@plt+0x12b8>
   11ce0:	add	r5, r5, #1
   11ce4:	mov	r4, r3
   11ce8:	cmp	r4, #0
   11cec:	beq	11d6c <__assert_fail@plt+0x12d0>
   11cf0:	ldr	r0, [pc, #136]	; 11d80 <__assert_fail@plt+0x12e4>
   11cf4:	mov	r1, r4
   11cf8:	add	r0, pc, r0
   11cfc:	bl	10a0c <strchr@plt>
   11d00:	cmp	r0, #0
   11d04:	beq	11d6c <__assert_fail@plt+0x12d0>
   11d08:	cmp	r4, #115	; 0x73
   11d0c:	beq	11d3c <__assert_fail@plt+0x12a0>
   11d10:	cmp	r6, #98	; 0x62
   11d14:	moveq	r3, #1
   11d18:	beq	11d34 <__assert_fail@plt+0x1298>
   11d1c:	cmp	r6, #104	; 0x68
   11d20:	moveq	r3, #2
   11d24:	beq	11d34 <__assert_fail@plt+0x1298>
   11d28:	cmp	r6, #108	; 0x6c
   11d2c:	moveq	r3, #4
   11d30:	mvnne	r3, #0
   11d34:	str	r3, [r7]
   11d38:	ldrb	r4, [r5]
   11d3c:	str	r4, [r8]
   11d40:	ldrb	r0, [r5, #1]
   11d44:	adds	r0, r0, #0
   11d48:	movne	r0, #1
   11d4c:	rsb	r0, r0, #0
   11d50:	pop	{r4, r5, r6, r7, r8, pc}
   11d54:	cmp	r6, #104	; 0x68
   11d58:	add	r3, r5, #2
   11d5c:	ldrb	r4, [r5, #2]
   11d60:	moveq	r6, #98	; 0x62
   11d64:	mov	r5, r3
   11d68:	b	11ce8 <__assert_fail@plt+0x124c>
   11d6c:	mvn	r0, #0
   11d70:	pop	{r4, r5, r6, r7, r8, pc}
   11d74:	mvn	r0, #0
   11d78:	bx	lr
   11d7c:	andeq	r2, r0, r8, asr pc
   11d80:	andeq	r2, r0, ip, lsl pc
   11d84:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d88:	subs	fp, r1, #0
   11d8c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d90:	mov	r4, r0
   11d94:	bl	11610 <__assert_fail@plt+0xb74>
   11d98:	cmp	r0, #0
   11d9c:	bne	11ebc <__assert_fail@plt+0x1420>
   11da0:	ands	r5, fp, #3
   11da4:	bne	11e44 <__assert_fail@plt+0x13a8>
   11da8:	ldr	r1, [pc, #360]	; 11f18 <__assert_fail@plt+0x147c>
   11dac:	mov	r0, #1
   11db0:	add	r1, pc, r1
   11db4:	bl	10a3c <__printf_chk@plt>
   11db8:	cmp	fp, #0
   11dbc:	add	r6, fp, #3
   11dc0:	movge	r6, fp
   11dc4:	cmp	fp, #3
   11dc8:	asr	r6, r6, #2
   11dcc:	ble	11e38 <__assert_fail@plt+0x139c>
   11dd0:	ldr	sl, [pc, #324]	; 11f1c <__assert_fail@plt+0x1480>
   11dd4:	ldr	r9, [pc, #324]	; 11f20 <__assert_fail@plt+0x1484>
   11dd8:	ldr	r8, [pc, #324]	; 11f24 <__assert_fail@plt+0x1488>
   11ddc:	add	sl, pc, sl
   11de0:	add	r9, pc, r9
   11de4:	add	r8, pc, r8
   11de8:	sub	r4, r4, #4
   11dec:	sub	r7, r6, #1
   11df0:	ldr	r1, [r4, #4]!
   11df4:	cmp	r5, r7
   11df8:	movlt	r3, sl
   11dfc:	lsr	r2, r1, #24
   11e00:	lsl	r0, r1, #8
   11e04:	orr	r2, r2, r1, lsl #24
   11e08:	and	r0, r0, #16711680	; 0xff0000
   11e0c:	lsr	r1, r1, #8
   11e10:	orr	r2, r2, r0
   11e14:	and	r1, r1, #65280	; 0xff00
   11e18:	movge	r3, r9
   11e1c:	orr	r2, r2, r1
   11e20:	add	r5, r5, #1
   11e24:	mov	r1, r8
   11e28:	mov	r0, #1
   11e2c:	bl	10a3c <__printf_chk@plt>
   11e30:	cmp	r6, r5
   11e34:	bgt	11df0 <__assert_fail@plt+0x1354>
   11e38:	mov	r0, #62	; 0x3e
   11e3c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e40:	b	10a24 <putchar@plt>
   11e44:	ldr	r1, [pc, #220]	; 11f28 <__assert_fail@plt+0x148c>
   11e48:	mov	r0, #1
   11e4c:	add	r1, pc, r1
   11e50:	bl	10a3c <__printf_chk@plt>
   11e54:	cmp	fp, #0
   11e58:	ble	11eb0 <__assert_fail@plt+0x1414>
   11e5c:	ldr	sl, [pc, #200]	; 11f2c <__assert_fail@plt+0x1490>
   11e60:	ldr	r9, [pc, #200]	; 11f30 <__assert_fail@plt+0x1494>
   11e64:	ldr	r8, [pc, #200]	; 11f34 <__assert_fail@plt+0x1498>
   11e68:	sub	r7, fp, #1
   11e6c:	add	sl, pc, sl
   11e70:	add	r9, pc, r9
   11e74:	add	r8, pc, r8
   11e78:	add	fp, r4, fp
   11e7c:	mov	r6, r4
   11e80:	add	r6, r6, #1
   11e84:	mov	r3, r6
   11e88:	mov	r1, r8
   11e8c:	ldrb	r2, [r3, #-1]!
   11e90:	mov	r0, #1
   11e94:	sub	r3, r3, r4
   11e98:	cmp	r3, r7
   11e9c:	movge	r3, sl
   11ea0:	movlt	r3, r9
   11ea4:	bl	10a3c <__printf_chk@plt>
   11ea8:	cmp	r6, fp
   11eac:	bne	11e80 <__assert_fail@plt+0x13e4>
   11eb0:	mov	r0, #93	; 0x5d
   11eb4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eb8:	b	10a24 <putchar@plt>
   11ebc:	ldr	r1, [pc, #116]	; 11f38 <__assert_fail@plt+0x149c>
   11ec0:	mov	r0, #1
   11ec4:	add	r1, pc, r1
   11ec8:	bl	10a3c <__printf_chk@plt>
   11ecc:	ldr	r6, [pc, #104]	; 11f3c <__assert_fail@plt+0x14a0>
   11ed0:	ldr	r7, [pc, #104]	; 11f40 <__assert_fail@plt+0x14a4>
   11ed4:	add	r6, pc, r6
   11ed8:	add	r7, pc, r7
   11edc:	add	fp, r4, fp
   11ee0:	mov	r2, r4
   11ee4:	mov	r1, r6
   11ee8:	mov	r0, #1
   11eec:	bl	10a3c <__printf_chk@plt>
   11ef0:	mov	r0, r4
   11ef4:	bl	10a00 <strlen@plt>
   11ef8:	add	r0, r0, #1
   11efc:	add	r4, r4, r0
   11f00:	cmp	r4, fp
   11f04:	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f08:	mov	r1, r7
   11f0c:	mov	r0, #1
   11f10:	bl	10a3c <__printf_chk@plt>
   11f14:	b	11ee0 <__assert_fail@plt+0x1444>
   11f18:	andeq	r2, r0, ip, ror lr
   11f1c:	andeq	r2, r0, r4, ror sp
   11f20:	andeq	r2, r0, r4, lsl #27
   11f24:	andeq	r2, r0, r0, asr lr
   11f28:	strdeq	r2, [r0], -r4
   11f2c:	strdeq	r2, [r0], -r8
   11f30:	andeq	r2, r0, r0, ror #25
   11f34:	ldrdeq	r2, [r0], -r4
   11f38:	andeq	r2, r0, r8, asr sp
   11f3c:	andeq	r2, r0, ip, asr #26
   11f40:	andeq	r2, r0, r0, asr sp
   11f44:	ldr	r2, [pc, #28]	; 11f68 <__assert_fail@plt+0x14cc>
   11f48:	ldr	r1, [pc, #28]	; 11f6c <__assert_fail@plt+0x14d0>
   11f4c:	push	{r4, lr}
   11f50:	add	r2, pc, r2
   11f54:	add	r1, pc, r1
   11f58:	mov	r0, #1
   11f5c:	bl	10a3c <__printf_chk@plt>
   11f60:	mov	r0, #0
   11f64:	bl	109f4 <exit@plt>
   11f68:	andeq	r2, r0, r0, lsl #26
   11f6c:	andeq	r2, r0, r8, lsl #26
   11f70:	push	{r7, fp, lr}
   11f74:	sub	sp, sp, #44	; 0x2c
   11f78:	ldr	lr, [pc, #604]	; 121dc <__assert_fail@plt+0x1740>
   11f7c:	ldr	ip, [pc, #604]	; 121e0 <__assert_fail@plt+0x1744>
   11f80:	add	lr, pc, lr
   11f84:	cmp	r0, #0
   11f88:	str	r0, [sp, #20]
   11f8c:	mov	r5, r1
   11f90:	ldr	r1, [lr, ip]
   11f94:	mov	r4, r3
   11f98:	mov	r8, r2
   11f9c:	ldr	r3, [r1]
   11fa0:	ldr	r6, [sp, #56]	; 0x38
   11fa4:	str	r3, [sp, #36]	; 0x24
   11fa8:	beq	12188 <__assert_fail@plt+0x16ec>
   11fac:	ldr	r3, [pc, #560]	; 121e4 <__assert_fail@plt+0x1748>
   11fb0:	ldr	r2, [pc, #560]	; 121e8 <__assert_fail@plt+0x174c>
   11fb4:	add	r3, pc, r3
   11fb8:	ldm	r3, {r0, r1}
   11fbc:	ldr	r3, [lr, r2]
   11fc0:	str	r0, [sp, #28]
   11fc4:	add	r0, sp, #28
   11fc8:	ldr	r7, [r3]
   11fcc:	strh	r1, [sp, #32]
   11fd0:	bl	10a00 <strlen@plt>
   11fd4:	ldr	r2, [pc, #528]	; 121ec <__assert_fail@plt+0x1750>
   11fd8:	mov	r1, #1
   11fdc:	str	r8, [sp]
   11fe0:	mov	r3, r5
   11fe4:	add	r2, pc, r2
   11fe8:	add	r8, r0, r1
   11fec:	mov	r0, r7
   11ff0:	bl	10a54 <__fprintf_chk@plt>
   11ff4:	ldr	r0, [r4]
   11ff8:	cmp	r0, #0
   11ffc:	beq	12168 <__assert_fail@plt+0x16cc>
   12000:	mov	r9, r4
   12004:	mov	r5, #0
   12008:	bl	10a00 <strlen@plt>
   1200c:	ldr	r3, [r9, #4]
   12010:	cmp	r3, #1
   12014:	add	r3, r0, #1
   12018:	addeq	r3, r3, r8
   1201c:	ldr	r0, [r9, #16]!
   12020:	cmp	r5, r3
   12024:	movlt	r5, r3
   12028:	cmp	r0, #0
   1202c:	bne	12008 <__assert_fail@plt+0x156c>
   12030:	ldr	r3, [r6]
   12034:	cmp	r3, #0
   12038:	beq	12138 <__assert_fail@plt+0x169c>
   1203c:	ldr	sl, [pc, #428]	; 121f0 <__assert_fail@plt+0x1754>
   12040:	ldr	r9, [pc, #428]	; 121f4 <__assert_fail@plt+0x1758>
   12044:	add	sl, pc, sl
   12048:	add	r9, pc, r9
   1204c:	add	r4, r4, #16
   12050:	b	120c8 <__assert_fail@plt+0x162c>
   12054:	mov	r2, #6
   12058:	mov	r3, r7
   1205c:	mov	r1, #1
   12060:	mov	r0, r9
   12064:	bl	1097c <fwrite@plt>
   12068:	ldr	r2, [r4, #-12]
   1206c:	ldr	fp, [r4, #-16]
   12070:	cmp	r2, #0
   12074:	bne	120f4 <__assert_fail@plt+0x1658>
   12078:	ldr	r2, [pc, #376]	; 121f8 <__assert_fail@plt+0x175c>
   1207c:	str	fp, [sp]
   12080:	mov	r3, r5
   12084:	add	r2, pc, r2
   12088:	mov	r1, #1
   1208c:	mov	r0, r7
   12090:	bl	10a54 <__fprintf_chk@plt>
   12094:	ldr	r2, [pc, #352]	; 121fc <__assert_fail@plt+0x1760>
   12098:	ldr	r3, [r6], #4
   1209c:	add	r2, pc, r2
   120a0:	mov	r1, #1
   120a4:	mov	r0, r7
   120a8:	bl	10a54 <__fprintf_chk@plt>
   120ac:	ldr	r3, [r4]
   120b0:	cmp	r3, #0
   120b4:	beq	1215c <__assert_fail@plt+0x16c0>
   120b8:	ldr	r3, [r6]
   120bc:	add	r4, r4, #16
   120c0:	cmp	r3, #0
   120c4:	beq	12138 <__assert_fail@plt+0x169c>
   120c8:	ldr	r3, [r4, #-4]
   120cc:	cmp	r3, #126	; 0x7e
   120d0:	bgt	12054 <__assert_fail@plt+0x15b8>
   120d4:	mov	r2, sl
   120d8:	mov	r1, #1
   120dc:	mov	r0, r7
   120e0:	bl	10a54 <__fprintf_chk@plt>
   120e4:	ldr	r2, [r4, #-12]
   120e8:	ldr	fp, [r4, #-16]
   120ec:	cmp	r2, #0
   120f0:	beq	12078 <__assert_fail@plt+0x15dc>
   120f4:	mov	r0, fp
   120f8:	bl	10a00 <strlen@plt>
   120fc:	ldr	r2, [pc, #252]	; 12200 <__assert_fail@plt+0x1764>
   12100:	sub	ip, r5, r8
   12104:	add	r2, pc, r2
   12108:	str	r2, [sp, #8]
   1210c:	add	r2, sp, #28
   12110:	str	r2, [sp]
   12114:	ldr	r2, [pc, #232]	; 12204 <__assert_fail@plt+0x1768>
   12118:	mov	r3, fp
   1211c:	add	r2, pc, r2
   12120:	mov	r1, #1
   12124:	sub	ip, ip, r0
   12128:	str	ip, [sp, #4]
   1212c:	mov	r0, r7
   12130:	bl	10a54 <__fprintf_chk@plt>
   12134:	b	12094 <__assert_fail@plt+0x15f8>
   12138:	ldr	r3, [pc, #200]	; 12208 <__assert_fail@plt+0x176c>
   1213c:	ldr	r1, [pc, #200]	; 1220c <__assert_fail@plt+0x1770>
   12140:	ldr	r0, [pc, #200]	; 12210 <__assert_fail@plt+0x1774>
   12144:	add	r3, pc, r3
   12148:	ldr	r2, [pc, #196]	; 12214 <__assert_fail@plt+0x1778>
   1214c:	add	r3, r3, #16
   12150:	add	r1, pc, r1
   12154:	add	r0, pc, r0
   12158:	bl	10a9c <__assert_fail@plt>
   1215c:	ldr	r3, [sp, #20]
   12160:	cmp	r3, #0
   12164:	beq	121d4 <__assert_fail@plt+0x1738>
   12168:	ldr	r2, [pc, #168]	; 12218 <__assert_fail@plt+0x177c>
   1216c:	ldr	r3, [sp, #20]
   12170:	mov	r0, r7
   12174:	add	r2, pc, r2
   12178:	mov	r1, #1
   1217c:	bl	10a54 <__fprintf_chk@plt>
   12180:	mov	r0, #1
   12184:	bl	109f4 <exit@plt>
   12188:	ldr	r1, [pc, #140]	; 1221c <__assert_fail@plt+0x1780>
   1218c:	ldr	r2, [pc, #140]	; 12220 <__assert_fail@plt+0x1784>
   12190:	mov	r3, r5
   12194:	ldr	ip, [lr, r1]
   12198:	add	r2, pc, r2
   1219c:	str	r8, [sp]
   121a0:	ldm	r2, {r0, r1}
   121a4:	ldr	r7, [ip]
   121a8:	ldr	r2, [pc, #116]	; 12224 <__assert_fail@plt+0x1788>
   121ac:	str	r0, [sp, #28]
   121b0:	strh	r1, [sp, #32]
   121b4:	mov	r0, r7
   121b8:	add	r2, pc, r2
   121bc:	mov	r1, #1
   121c0:	bl	10a54 <__fprintf_chk@plt>
   121c4:	ldr	r0, [r4]
   121c8:	cmp	r0, #0
   121cc:	movne	r8, #6
   121d0:	bne	12000 <__assert_fail@plt+0x1564>
   121d4:	mov	r0, #0
   121d8:	bl	109f4 <exit@plt>
   121dc:	andeq	r3, r1, r4, asr #31
   121e0:	muleq	r0, ip, r0
   121e4:	andeq	r2, r0, ip, lsl sp
   121e8:	andeq	r0, r0, r4, lsr #1
   121ec:	andeq	r2, r0, r8, lsl #25
   121f0:	andeq	r2, r0, r4, ror #24
   121f4:	andeq	r2, r0, r8, asr ip
   121f8:	andeq	r2, r0, ip, lsr #24
   121fc:	andeq	r2, r0, r0, lsr ip
   12200:	andeq	r2, r0, r0, ror #20
   12204:	muleq	r0, ip, fp
   12208:	andeq	r2, r0, r4, ror #19
   1220c:	andeq	r2, r0, r4, lsr sl
   12210:	andeq	r2, r0, r4, lsr fp
   12214:			; <UNDEFINED> instruction: 0x000001b7
   12218:	andeq	r2, r0, r0, asr fp
   1221c:	andeq	r0, r0, ip, lsr #1
   12220:	andeq	r2, r0, r8, lsr fp
   12224:			; <UNDEFINED> instruction: 0x00002ab4
   12228:	ldr	r3, [r0]
   1222c:	ldr	ip, [pc, #208]	; 12304 <__assert_fail@plt+0x1868>
   12230:	lsr	r2, r3, #24
   12234:	lsl	r1, r3, #8
   12238:	orr	r2, r2, r3, lsl #24
   1223c:	and	r1, r1, #16711680	; 0xff0000
   12240:	lsr	r3, r3, #8
   12244:	orr	r2, r2, r1
   12248:	and	r3, r3, #65280	; 0xff00
   1224c:	orr	r3, r2, r3
   12250:	cmp	r3, ip
   12254:	beq	12294 <__assert_fail@plt+0x17f8>
   12258:	ldr	r2, [pc, #168]	; 12308 <__assert_fail@plt+0x186c>
   1225c:	cmp	r3, r2
   12260:	bne	122f4 <__assert_fail@plt+0x1858>
   12264:	ldr	r3, [r0, #36]	; 0x24
   12268:	lsr	r2, r3, #24
   1226c:	lsl	r1, r3, #8
   12270:	orr	r2, r2, r3, lsl #24
   12274:	and	r1, r1, #16711680	; 0xff0000
   12278:	lsr	r3, r3, #8
   1227c:	orr	r2, r2, r1
   12280:	and	r3, r3, #65280	; 0xff00
   12284:	orrs	r3, r2, r3
   12288:	movne	r0, #0
   1228c:	mvneq	r0, #6
   12290:	bx	lr
   12294:	ldr	r3, [r0, #20]
   12298:	lsr	r2, r3, #24
   1229c:	lsl	r1, r3, #8
   122a0:	orr	r2, r2, r3, lsl #24
   122a4:	and	r1, r1, #16711680	; 0xff0000
   122a8:	lsr	r3, r3, #8
   122ac:	orr	r2, r2, r1
   122b0:	and	r3, r3, #65280	; 0xff00
   122b4:	orr	r3, r2, r3
   122b8:	cmp	r3, #1
   122bc:	bls	122fc <__assert_fail@plt+0x1860>
   122c0:	ldr	r3, [r0, #24]
   122c4:	lsr	r2, r3, #24
   122c8:	lsl	r1, r3, #8
   122cc:	orr	r2, r2, r3, lsl #24
   122d0:	and	r1, r1, #16711680	; 0xff0000
   122d4:	lsr	r3, r3, #8
   122d8:	orr	r2, r2, r1
   122dc:	and	r3, r3, #65280	; 0xff00
   122e0:	orr	r3, r2, r3
   122e4:	cmp	r3, #18
   122e8:	movcc	r0, #0
   122ec:	mvncs	r0, #9
   122f0:	bx	lr
   122f4:	mvn	r0, #8
   122f8:	bx	lr
   122fc:	mvn	r0, #9
   12300:	bx	lr
   12304:	andle	pc, sp, sp, ror #29
   12308:	svccs	0x00f20112
   1230c:	cmp	r0, #1
   12310:	bls	12334 <__assert_fail@plt+0x1898>
   12314:	cmp	r0, #2
   12318:	beq	1232c <__assert_fail@plt+0x1890>
   1231c:	cmp	r0, #17
   12320:	movcc	r0, #36	; 0x24
   12324:	movcs	r0, #40	; 0x28
   12328:	bx	lr
   1232c:	mov	r0, #32
   12330:	bx	lr
   12334:	mov	r0, #28
   12338:	bx	lr
   1233c:	ldr	r3, [r0]
   12340:	ldr	ip, [pc, #628]	; 125bc <__assert_fail@plt+0x1b20>
   12344:	lsr	r2, r3, #24
   12348:	lsl	r1, r3, #8
   1234c:	orr	r2, r2, r3, lsl #24
   12350:	and	r1, r1, #16711680	; 0xff0000
   12354:	lsr	r3, r3, #8
   12358:	orr	r2, r2, r1
   1235c:	and	r3, r3, #65280	; 0xff00
   12360:	orr	r3, r2, r3
   12364:	cmp	r3, ip
   12368:	bne	125ac <__assert_fail@plt+0x1b10>
   1236c:	push	{r4, r5, r6, lr}
   12370:	mov	r4, r0
   12374:	ldr	r3, [r0, #20]
   12378:	lsr	r0, r3, #24
   1237c:	lsl	r2, r3, #8
   12380:	and	r2, r2, #16711680	; 0xff0000
   12384:	orr	r0, r0, r3, lsl #24
   12388:	lsr	r3, r3, #8
   1238c:	orr	r0, r0, r2
   12390:	and	r3, r3, #65280	; 0xff00
   12394:	orr	r0, r0, r3
   12398:	bl	1230c <__assert_fail@plt+0x1870>
   1239c:	ldr	r3, [r4, #20]
   123a0:	lsr	r1, r3, #24
   123a4:	lsl	r2, r3, #8
   123a8:	orr	r1, r1, r3, lsl #24
   123ac:	and	r2, r2, #16711680	; 0xff0000
   123b0:	lsr	r3, r3, #8
   123b4:	orr	r1, r1, r2
   123b8:	and	r3, r3, #65280	; 0xff00
   123bc:	orr	r1, r1, r3
   123c0:	cmp	r1, #1
   123c4:	mov	r5, r0
   123c8:	bls	125b4 <__assert_fail@plt+0x1b18>
   123cc:	ldr	r2, [r4, #24]
   123d0:	lsr	r3, r2, #24
   123d4:	lsl	ip, r2, #8
   123d8:	orr	r3, r3, r2, lsl #24
   123dc:	and	ip, ip, #16711680	; 0xff0000
   123e0:	lsr	r2, r2, #8
   123e4:	and	r2, r2, #65280	; 0xff00
   123e8:	orr	r3, r3, ip
   123ec:	orr	r3, r3, r2
   123f0:	cmp	r1, r3
   123f4:	movcs	r2, #0
   123f8:	movcc	r2, #1
   123fc:	cmp	r3, #17
   12400:	movls	r3, r2
   12404:	orrhi	r3, r2, #1
   12408:	cmp	r3, #0
   1240c:	bne	125b4 <__assert_fail@plt+0x1b18>
   12410:	ldr	r2, [r4, #4]
   12414:	lsr	r3, r2, #24
   12418:	lsl	ip, r2, #8
   1241c:	orr	r3, r3, r2, lsl #24
   12420:	and	ip, ip, #16711680	; 0xff0000
   12424:	lsr	r2, r2, #8
   12428:	orr	r3, r3, ip
   1242c:	and	r2, r2, #65280	; 0xff00
   12430:	orr	r3, r3, r2
   12434:	cmp	r0, r3
   12438:	bhi	125a4 <__assert_fail@plt+0x1b08>
   1243c:	cmp	r3, #0
   12440:	blt	125a4 <__assert_fail@plt+0x1b08>
   12444:	ldr	ip, [r4, #16]
   12448:	lsr	r2, ip, #24
   1244c:	lsl	lr, ip, #8
   12450:	orr	r2, r2, ip, lsl #24
   12454:	and	lr, lr, #16711680	; 0xff0000
   12458:	lsr	ip, ip, #8
   1245c:	and	ip, ip, #65280	; 0xff00
   12460:	orr	r2, r2, lr
   12464:	orr	r2, r2, ip
   12468:	cmp	r0, r2
   1246c:	movhi	ip, #0
   12470:	movls	ip, #1
   12474:	cmp	r3, r2
   12478:	movcc	ip, #0
   1247c:	cmp	ip, #0
   12480:	beq	125a4 <__assert_fail@plt+0x1b08>
   12484:	ldr	ip, [r4, #8]
   12488:	lsr	r2, ip, #24
   1248c:	lsr	lr, ip, #8
   12490:	orr	r2, r2, ip, lsl #24
   12494:	and	lr, lr, #65280	; 0xff00
   12498:	lsl	ip, ip, #8
   1249c:	and	ip, ip, #16711680	; 0xff0000
   124a0:	orr	r2, r2, lr
   124a4:	orr	r2, r2, ip
   124a8:	cmp	r0, r2
   124ac:	movhi	ip, #0
   124b0:	movls	ip, #1
   124b4:	cmp	r3, r2
   124b8:	movcc	ip, #0
   124bc:	cmp	r1, #16
   124c0:	bhi	12558 <__assert_fail@plt+0x1abc>
   124c4:	cmp	ip, #0
   124c8:	beq	125a4 <__assert_fail@plt+0x1b08>
   124cc:	ldr	r1, [r4, #12]
   124d0:	lsr	r2, r1, #24
   124d4:	lsl	ip, r1, #8
   124d8:	orr	r2, r2, r1, lsl #24
   124dc:	and	ip, ip, #16711680	; 0xff0000
   124e0:	lsr	r1, r1, #8
   124e4:	orr	r2, r2, ip
   124e8:	and	r1, r1, #65280	; 0xff00
   124ec:	orr	r2, r2, r1
   124f0:	cmp	r5, r2
   124f4:	movhi	r0, #0
   124f8:	movls	r0, #1
   124fc:	cmp	r3, r2
   12500:	movcc	r0, #0
   12504:	cmp	r0, #0
   12508:	beq	125a4 <__assert_fail@plt+0x1b08>
   1250c:	ldr	r0, [r4, #32]
   12510:	lsr	r1, r0, #24
   12514:	lsl	ip, r0, #8
   12518:	orr	r1, r1, r0, lsl #24
   1251c:	and	ip, ip, #16711680	; 0xff0000
   12520:	lsr	r0, r0, #8
   12524:	and	r0, r0, #65280	; 0xff00
   12528:	orr	r1, r1, ip
   1252c:	orr	r1, r1, r0
   12530:	adds	r2, r1, r2
   12534:	movcc	r1, #1
   12538:	movcs	r1, #0
   1253c:	cmp	r3, r2
   12540:	movcc	r2, #0
   12544:	andcs	r2, r1, #1
   12548:	cmp	r2, #0
   1254c:	mvneq	r0, #7
   12550:	movne	r0, #0
   12554:	pop	{r4, r5, r6, pc}
   12558:	cmp	ip, #0
   1255c:	beq	125a4 <__assert_fail@plt+0x1b08>
   12560:	ldr	ip, [r4, #36]	; 0x24
   12564:	lsr	r1, ip, #24
   12568:	lsl	lr, ip, #8
   1256c:	orr	r1, r1, ip, lsl #24
   12570:	and	lr, lr, #16711680	; 0xff0000
   12574:	lsr	ip, ip, #8
   12578:	orr	r1, r1, lr
   1257c:	and	ip, ip, #65280	; 0xff00
   12580:	orr	r1, r1, ip
   12584:	adds	r2, r2, r1
   12588:	movcc	r1, #1
   1258c:	movcs	r1, #0
   12590:	cmp	r3, r2
   12594:	movcc	r2, #0
   12598:	andcs	r2, r1, #1
   1259c:	cmp	r2, #0
   125a0:	bne	124cc <__assert_fail@plt+0x1a30>
   125a4:	mvn	r0, #7
   125a8:	pop	{r4, r5, r6, pc}
   125ac:	mvn	r0, #8
   125b0:	bx	lr
   125b4:	mvn	r0, #9
   125b8:	pop	{r4, r5, r6, pc}
   125bc:	andle	pc, sp, sp, ror #29
   125c0:	push	{r4, r5, lr}
   125c4:	ldr	ip, [r0, #8]
   125c8:	lsr	r3, ip, #24
   125cc:	lsl	lr, ip, #8
   125d0:	orr	r3, r3, ip, lsl #24
   125d4:	and	lr, lr, #16711680	; 0xff0000
   125d8:	lsr	ip, ip, #8
   125dc:	orr	r3, r3, lr
   125e0:	and	ip, ip, #65280	; 0xff00
   125e4:	orr	r3, r3, ip
   125e8:	adds	r3, r1, r3
   125ec:	bcs	1268c <__assert_fail@plt+0x1bf0>
   125f0:	adds	r5, r3, r2
   125f4:	bcs	1268c <__assert_fail@plt+0x1bf0>
   125f8:	ldr	ip, [r0, #4]
   125fc:	lsr	lr, ip, #24
   12600:	lsl	r4, ip, #8
   12604:	orr	lr, lr, ip, lsl #24
   12608:	and	r4, r4, #16711680	; 0xff0000
   1260c:	lsr	ip, ip, #8
   12610:	orr	lr, lr, r4
   12614:	and	ip, ip, #65280	; 0xff00
   12618:	orr	ip, lr, ip
   1261c:	cmp	r5, ip
   12620:	bhi	1268c <__assert_fail@plt+0x1bf0>
   12624:	ldr	ip, [r0, #20]
   12628:	lsr	lr, ip, #24
   1262c:	lsl	r4, ip, #8
   12630:	orr	lr, lr, ip, lsl #24
   12634:	and	r4, r4, #16711680	; 0xff0000
   12638:	lsr	ip, ip, #8
   1263c:	orr	lr, lr, r4
   12640:	and	ip, ip, #65280	; 0xff00
   12644:	orr	ip, lr, ip
   12648:	cmp	ip, #16
   1264c:	bls	12684 <__assert_fail@plt+0x1be8>
   12650:	adds	r1, r1, r2
   12654:	bcs	1268c <__assert_fail@plt+0x1bf0>
   12658:	ldr	r2, [r0, #36]	; 0x24
   1265c:	lsr	ip, r2, #24
   12660:	lsl	lr, r2, #8
   12664:	orr	ip, ip, r2, lsl #24
   12668:	and	lr, lr, #16711680	; 0xff0000
   1266c:	lsr	r2, r2, #8
   12670:	orr	ip, ip, lr
   12674:	and	r2, r2, #65280	; 0xff00
   12678:	orr	r2, ip, r2
   1267c:	cmp	r1, r2
   12680:	bhi	1268c <__assert_fail@plt+0x1bf0>
   12684:	add	r0, r0, r3
   12688:	pop	{r4, r5, pc}
   1268c:	mov	r0, #0
   12690:	pop	{r4, r5, pc}
   12694:	mvn	r3, #7
   12698:	push	{r4, r5, r6, r7, r8, lr}
   1269c:	mov	r6, r2
   126a0:	str	r3, [r2]
   126a4:	mov	r2, #4
   126a8:	mov	r7, r0
   126ac:	mov	r8, r1
   126b0:	bl	125c0 <__assert_fail@plt+0x1b24>
   126b4:	cmp	r0, #0
   126b8:	beq	12748 <__assert_fail@plt+0x1cac>
   126bc:	ldr	r3, [r0]
   126c0:	mvn	r2, #10
   126c4:	str	r2, [r6]
   126c8:	lsr	r5, r3, #24
   126cc:	lsl	r2, r3, #8
   126d0:	orr	r5, r5, r3, lsl #24
   126d4:	and	r2, r2, #16711680	; 0xff0000
   126d8:	lsr	r3, r3, #8
   126dc:	and	r3, r3, #65280	; 0xff00
   126e0:	orr	r5, r5, r2
   126e4:	orr	r5, r5, r3
   126e8:	sub	r3, r5, #1
   126ec:	add	r4, r8, #4
   126f0:	cmp	r3, #8
   126f4:	addls	pc, pc, r3, lsl #2
   126f8:	b	12748 <__assert_fail@plt+0x1cac>
   126fc:	b	1272c <__assert_fail@plt+0x1c90>
   12700:	b	127e0 <__assert_fail@plt+0x1d44>
   12704:	b	12754 <__assert_fail@plt+0x1cb8>
   12708:	b	127e0 <__assert_fail@plt+0x1d44>
   1270c:	b	12748 <__assert_fail@plt+0x1cac>
   12710:	b	12748 <__assert_fail@plt+0x1cac>
   12714:	b	12748 <__assert_fail@plt+0x1cac>
   12718:	b	12748 <__assert_fail@plt+0x1cac>
   1271c:	b	127e0 <__assert_fail@plt+0x1d44>
   12720:	ldrb	r3, [r0]
   12724:	cmp	r3, #0
   12728:	beq	127e0 <__assert_fail@plt+0x1d44>
   1272c:	mov	r1, r4
   12730:	mov	r2, #1
   12734:	mov	r0, r7
   12738:	bl	125c0 <__assert_fail@plt+0x1b24>
   1273c:	add	r4, r4, #1
   12740:	cmp	r0, #0
   12744:	bne	12720 <__assert_fail@plt+0x1c84>
   12748:	mov	r5, #9
   1274c:	mov	r0, r5
   12750:	pop	{r4, r5, r6, r7, r8, pc}
   12754:	mov	r1, r4
   12758:	mov	r2, #4
   1275c:	mov	r0, r7
   12760:	bl	125c0 <__assert_fail@plt+0x1b24>
   12764:	cmp	r0, #0
   12768:	beq	12748 <__assert_fail@plt+0x1cac>
   1276c:	ldr	r3, [r0]
   12770:	ldr	r2, [r7, #20]
   12774:	add	r1, r8, #12
   12778:	lsr	r4, r3, #24
   1277c:	lsl	ip, r3, #8
   12780:	orr	r4, r4, r3, lsl #24
   12784:	and	ip, ip, #16711680	; 0xff0000
   12788:	lsr	r0, r3, #8
   1278c:	orr	r4, r4, ip
   12790:	lsr	r3, r2, #24
   12794:	lsl	ip, r2, #8
   12798:	orr	r3, r3, r2, lsl #24
   1279c:	and	ip, ip, #16711680	; 0xff0000
   127a0:	lsr	r2, r2, #8
   127a4:	orr	r3, r3, ip
   127a8:	and	r2, r2, #65280	; 0xff00
   127ac:	orr	r2, r3, r2
   127b0:	and	r0, r0, #65280	; 0xff00
   127b4:	cmp	r2, #15
   127b8:	orr	r4, r4, r0
   127bc:	movls	r3, #1
   127c0:	movhi	r3, #0
   127c4:	cmp	r4, #7
   127c8:	movls	r3, #0
   127cc:	cmp	r3, #0
   127d0:	add	r4, r1, r4
   127d4:	beq	127e0 <__assert_fail@plt+0x1d44>
   127d8:	tst	r1, #7
   127dc:	addne	r4, r4, #4
   127e0:	mov	r0, r7
   127e4:	sub	r2, r4, r8
   127e8:	mov	r1, r8
   127ec:	bl	125c0 <__assert_fail@plt+0x1b24>
   127f0:	cmp	r0, #0
   127f4:	beq	12748 <__assert_fail@plt+0x1cac>
   127f8:	add	r4, r4, #3
   127fc:	bic	r4, r4, #3
   12800:	str	r4, [r6]
   12804:	mov	r0, r5
   12808:	pop	{r4, r5, r6, r7, r8, pc}
   1280c:	push	{lr}		; (str lr, [sp, #-4]!)
   12810:	sub	sp, sp, #12
   12814:	subs	r3, r1, #0
   12818:	str	r1, [sp, #4]
   1281c:	blt	12844 <__assert_fail@plt+0x1da8>
   12820:	tst	r3, #3
   12824:	bne	12844 <__assert_fail@plt+0x1da8>
   12828:	add	r2, sp, #4
   1282c:	bl	12694 <__assert_fail@plt+0x1bf8>
   12830:	cmp	r0, #1
   12834:	bne	12844 <__assert_fail@plt+0x1da8>
   12838:	ldr	r0, [sp, #4]
   1283c:	add	sp, sp, #12
   12840:	pop	{pc}		; (ldr pc, [sp], #4)
   12844:	mvn	r0, #3
   12848:	b	1283c <__assert_fail@plt+0x1da0>
   1284c:	push	{lr}		; (str lr, [sp, #-4]!)
   12850:	sub	sp, sp, #12
   12854:	subs	r3, r1, #0
   12858:	str	r1, [sp, #4]
   1285c:	blt	12884 <__assert_fail@plt+0x1de8>
   12860:	tst	r3, #3
   12864:	bne	12884 <__assert_fail@plt+0x1de8>
   12868:	add	r2, sp, #4
   1286c:	bl	12694 <__assert_fail@plt+0x1bf8>
   12870:	cmp	r0, #3
   12874:	bne	12884 <__assert_fail@plt+0x1de8>
   12878:	ldr	r0, [sp, #4]
   1287c:	add	sp, sp, #12
   12880:	pop	{pc}		; (ldr pc, [sp], #4)
   12884:	mvn	r0, #3
   12888:	b	1287c <__assert_fail@plt+0x1de0>
   1288c:	ldr	r3, [pc, #244]	; 12988 <__assert_fail@plt+0x1eec>
   12890:	ldr	ip, [pc, #244]	; 1298c <__assert_fail@plt+0x1ef0>
   12894:	add	r3, pc, r3
   12898:	push	{r4, r5, r6, r7, r8, lr}
   1289c:	sub	sp, sp, #8
   128a0:	ldr	r8, [r3, ip]
   128a4:	mov	r4, #0
   128a8:	cmp	r1, #0
   128ac:	ldr	r3, [r8]
   128b0:	mov	r5, r2
   128b4:	str	r4, [sp]
   128b8:	mov	r6, r0
   128bc:	str	r3, [sp, #4]
   128c0:	bge	12964 <__assert_fail@plt+0x1ec8>
   128c4:	mov	r7, sp
   128c8:	mov	r2, r7
   128cc:	mov	r1, r4
   128d0:	mov	r0, r6
   128d4:	bl	12694 <__assert_fail@plt+0x1bf8>
   128d8:	cmp	r0, #2
   128dc:	beq	128f8 <__assert_fail@plt+0x1e5c>
   128e0:	cmp	r0, #9
   128e4:	beq	12948 <__assert_fail@plt+0x1eac>
   128e8:	cmp	r0, #1
   128ec:	beq	1291c <__assert_fail@plt+0x1e80>
   128f0:	ldr	r4, [sp]
   128f4:	b	128c8 <__assert_fail@plt+0x1e2c>
   128f8:	cmp	r5, #0
   128fc:	beq	128f0 <__assert_fail@plt+0x1e54>
   12900:	ldr	r3, [r5]
   12904:	sub	r3, r3, #1
   12908:	cmp	r3, #0
   1290c:	str	r3, [r5]
   12910:	bge	128f0 <__assert_fail@plt+0x1e54>
   12914:	ldr	r4, [sp]
   12918:	b	1292c <__assert_fail@plt+0x1e90>
   1291c:	cmp	r5, #0
   12920:	ldrne	r3, [r5]
   12924:	addne	r3, r3, #1
   12928:	strne	r3, [r5]
   1292c:	ldr	r2, [sp, #4]
   12930:	ldr	r3, [r8]
   12934:	mov	r0, r4
   12938:	cmp	r2, r3
   1293c:	bne	12984 <__assert_fail@plt+0x1ee8>
   12940:	add	sp, sp, #8
   12944:	pop	{r4, r5, r6, r7, r8, pc}
   12948:	ldr	r4, [sp]
   1294c:	cmp	r4, #0
   12950:	bge	1297c <__assert_fail@plt+0x1ee0>
   12954:	cmp	r5, #0
   12958:	cmneq	r4, #8
   1295c:	mvneq	r4, #0
   12960:	b	1292c <__assert_fail@plt+0x1e90>
   12964:	bl	1280c <__assert_fail@plt+0x1d70>
   12968:	cmp	r0, #0
   1296c:	mov	r4, r0
   12970:	str	r0, [sp]
   12974:	bge	128c4 <__assert_fail@plt+0x1e28>
   12978:	b	1292c <__assert_fail@plt+0x1e90>
   1297c:	mvn	r4, #0
   12980:	b	1292c <__assert_fail@plt+0x1e90>
   12984:	bl	10964 <__stack_chk_fail@plt>
   12988:			; <UNDEFINED> instruction: 0x000136b0
   1298c:	muleq	r0, ip, r0
   12990:	ldr	r3, [pc, #96]	; 129f8 <__assert_fail@plt+0x1f5c>
   12994:	ldr	ip, [pc, #96]	; 129fc <__assert_fail@plt+0x1f60>
   12998:	add	r3, pc, r3
   1299c:	push	{r4, lr}
   129a0:	sub	sp, sp, #8
   129a4:	ldr	r4, [r3, ip]
   129a8:	mov	lr, #0
   129ac:	mov	r2, sp
   129b0:	ldr	r3, [r4]
   129b4:	str	lr, [sp]
   129b8:	str	r3, [sp, #4]
   129bc:	bl	1288c <__assert_fail@plt+0x1df0>
   129c0:	cmp	r0, #0
   129c4:	blt	129ec <__assert_fail@plt+0x1f50>
   129c8:	ldr	r3, [sp]
   129cc:	cmp	r3, #1
   129d0:	mvnne	r0, #0
   129d4:	ldr	r2, [sp, #4]
   129d8:	ldr	r3, [r4]
   129dc:	cmp	r2, r3
   129e0:	bne	129f4 <__assert_fail@plt+0x1f58>
   129e4:	add	sp, sp, #8
   129e8:	pop	{r4, pc}
   129ec:	mvn	r0, #0
   129f0:	b	129d4 <__assert_fail@plt+0x1f38>
   129f4:	bl	10964 <__stack_chk_fail@plt>
   129f8:	andeq	r3, r1, ip, lsr #11
   129fc:	muleq	r0, ip, r0
   12a00:	ldr	r3, [pc, #124]	; 12a84 <__assert_fail@plt+0x1fe8>
   12a04:	ldr	r2, [pc, #124]	; 12a88 <__assert_fail@plt+0x1fec>
   12a08:	add	r3, pc, r3
   12a0c:	push	{r4, r5, r6, lr}
   12a10:	sub	sp, sp, #8
   12a14:	ldr	r6, [r3, r2]
   12a18:	mov	r2, #1
   12a1c:	mov	r5, r0
   12a20:	ldr	r3, [r6]
   12a24:	mov	r4, sp
   12a28:	str	r2, [sp]
   12a2c:	str	r3, [sp, #4]
   12a30:	b	12a48 <__assert_fail@plt+0x1fac>
   12a34:	ldr	r3, [sp]
   12a38:	cmp	r3, #0
   12a3c:	ble	12a5c <__assert_fail@plt+0x1fc0>
   12a40:	cmp	r3, #1
   12a44:	beq	12a78 <__assert_fail@plt+0x1fdc>
   12a48:	mov	r2, r4
   12a4c:	mov	r0, r5
   12a50:	bl	1288c <__assert_fail@plt+0x1df0>
   12a54:	subs	r1, r0, #0
   12a58:	bge	12a34 <__assert_fail@plt+0x1f98>
   12a5c:	mvn	r0, #0
   12a60:	ldr	r2, [sp, #4]
   12a64:	ldr	r3, [r6]
   12a68:	cmp	r2, r3
   12a6c:	bne	12a80 <__assert_fail@plt+0x1fe4>
   12a70:	add	sp, sp, #8
   12a74:	pop	{r4, r5, r6, pc}
   12a78:	mov	r0, r1
   12a7c:	b	12a60 <__assert_fail@plt+0x1fc4>
   12a80:	bl	10964 <__stack_chk_fail@plt>
   12a84:	andeq	r3, r1, ip, lsr r5
   12a88:	muleq	r0, ip, r0
   12a8c:	push	{r4, r5, r6, r7, r8, lr}
   12a90:	mov	r4, r0
   12a94:	mov	r0, r2
   12a98:	mov	r5, r1
   12a9c:	mov	r7, r2
   12aa0:	bl	10a00 <strlen@plt>
   12aa4:	add	r6, r0, #1
   12aa8:	sub	r5, r5, r6
   12aac:	adds	r5, r4, r5
   12ab0:	bcc	12ac4 <__assert_fail@plt+0x2028>
   12ab4:	b	12ae4 <__assert_fail@plt+0x2048>
   12ab8:	add	r4, r4, #1
   12abc:	cmp	r5, r4
   12ac0:	bcc	12ae4 <__assert_fail@plt+0x2048>
   12ac4:	mov	r2, r6
   12ac8:	mov	r1, r7
   12acc:	mov	r0, r4
   12ad0:	bl	10958 <memcmp@plt>
   12ad4:	cmp	r0, #0
   12ad8:	bne	12ab8 <__assert_fail@plt+0x201c>
   12adc:	mov	r0, r4
   12ae0:	pop	{r4, r5, r6, r7, r8, pc}
   12ae4:	mov	r0, #0
   12ae8:	pop	{r4, r5, r6, r7, r8, pc}
   12aec:	push	{r4, r5, r6, r7, r8, lr}
   12af0:	mov	r5, r1
   12af4:	mov	r6, r2
   12af8:	mov	r7, r0
   12afc:	bl	12228 <__assert_fail@plt+0x178c>
   12b00:	subs	r4, r0, #0
   12b04:	bne	12b40 <__assert_fail@plt+0x20a4>
   12b08:	ldr	r3, [r7, #4]
   12b0c:	lsr	r0, r3, #24
   12b10:	lsl	r2, r3, #8
   12b14:	orr	r0, r0, r3, lsl #24
   12b18:	and	r2, r2, #16711680	; 0xff0000
   12b1c:	lsr	r3, r3, #8
   12b20:	orr	r0, r0, r2
   12b24:	and	r3, r3, #65280	; 0xff00
   12b28:	orr	r2, r0, r3
   12b2c:	cmp	r6, r2
   12b30:	bcc	12b48 <__assert_fail@plt+0x20ac>
   12b34:	mov	r1, r7
   12b38:	mov	r0, r5
   12b3c:	bl	10928 <memmove@plt>
   12b40:	mov	r0, r4
   12b44:	pop	{r4, r5, r6, r7, r8, pc}
   12b48:	mvn	r4, #2
   12b4c:	b	12b40 <__assert_fail@plt+0x20a4>
   12b50:	push	{lr}		; (str lr, [sp, #-4]!)
   12b54:	lsl	r1, r1, #4
   12b58:	ldr	r2, [r0, #16]
   12b5c:	lsr	r3, r2, #24
   12b60:	lsl	lr, r2, #8
   12b64:	orr	r3, r3, r2, lsl #24
   12b68:	and	lr, lr, #16711680	; 0xff0000
   12b6c:	lsr	r2, r2, #8
   12b70:	orr	r3, r3, lr
   12b74:	and	r2, r2, #65280	; 0xff00
   12b78:	orr	r3, r3, r2
   12b7c:	adds	r1, r1, r3
   12b80:	bcs	12bc8 <__assert_fail@plt+0x212c>
   12b84:	ldr	lr, [r0, #4]
   12b88:	lsr	r2, lr, #24
   12b8c:	lsl	r3, lr, #8
   12b90:	orr	r2, r2, lr, lsl #24
   12b94:	and	r3, r3, #16711680	; 0xff0000
   12b98:	lsr	lr, lr, #8
   12b9c:	orr	r2, r2, r3
   12ba0:	and	lr, lr, #65280	; 0xff00
   12ba4:	orr	r2, r2, lr
   12ba8:	sub	r2, r2, #16
   12bac:	cmp	r1, r2
   12bb0:	bhi	12bbc <__assert_fail@plt+0x2120>
   12bb4:	add	r0, r0, r1
   12bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bbc:	mov	ip, #0
   12bc0:	mov	r0, ip
   12bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   12bc8:	mov	r0, #0
   12bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   12bd0:	push	{r4, r5, r6, lr}
   12bd4:	mov	r6, r2
   12bd8:	mov	r4, r0
   12bdc:	mov	r5, r1
   12be0:	bl	1284c <__assert_fail@plt+0x1db0>
   12be4:	cmp	r0, #0
   12be8:	blt	12c4c <__assert_fail@plt+0x21b0>
   12bec:	ldr	r3, [r4, #8]
   12bf0:	cmp	r6, #0
   12bf4:	lsr	r0, r3, #24
   12bf8:	lsl	r2, r3, #8
   12bfc:	orr	r0, r0, r3, lsl #24
   12c00:	and	r2, r2, #16711680	; 0xff0000
   12c04:	lsr	r3, r3, #8
   12c08:	orr	r0, r0, r2
   12c0c:	and	r3, r3, #65280	; 0xff00
   12c10:	orr	r0, r0, r3
   12c14:	add	r0, r0, r5
   12c18:	add	r0, r4, r0
   12c1c:	popeq	{r4, r5, r6, pc}
   12c20:	ldr	r3, [r0, #4]
   12c24:	lsr	r2, r3, #24
   12c28:	lsl	r1, r3, #8
   12c2c:	orr	r2, r2, r3, lsl #24
   12c30:	and	r1, r1, #16711680	; 0xff0000
   12c34:	lsr	r3, r3, #8
   12c38:	orr	r2, r2, r1
   12c3c:	and	r3, r3, #65280	; 0xff00
   12c40:	orr	r3, r2, r3
   12c44:	str	r3, [r6]
   12c48:	pop	{r4, r5, r6, pc}
   12c4c:	cmp	r6, #0
   12c50:	strne	r0, [r6]
   12c54:	mov	r0, #0
   12c58:	pop	{r4, r5, r6, pc}
   12c5c:	ldr	r3, [pc, #136]	; 12cec <__assert_fail@plt+0x2250>
   12c60:	ldr	r2, [pc, #136]	; 12cf0 <__assert_fail@plt+0x2254>
   12c64:	add	r3, pc, r3
   12c68:	push	{r4, r5, r6, r7, lr}
   12c6c:	sub	sp, sp, #12
   12c70:	ldr	r5, [r3, r2]
   12c74:	mov	r6, r0
   12c78:	mov	r4, r1
   12c7c:	ldr	r3, [r5]
   12c80:	mov	r7, sp
   12c84:	str	r3, [sp, #4]
   12c88:	mov	r2, r7
   12c8c:	mov	r1, r4
   12c90:	mov	r0, r6
   12c94:	bl	12694 <__assert_fail@plt+0x1bf8>
   12c98:	cmp	r0, #3
   12c9c:	beq	12ccc <__assert_fail@plt+0x2230>
   12ca0:	cmp	r0, #9
   12ca4:	bne	12cd4 <__assert_fail@plt+0x2238>
   12ca8:	ldr	r0, [sp]
   12cac:	cmp	r0, #0
   12cb0:	mvnge	r0, #10
   12cb4:	ldr	r2, [sp, #4]
   12cb8:	ldr	r3, [r5]
   12cbc:	cmp	r2, r3
   12cc0:	bne	12ce8 <__assert_fail@plt+0x224c>
   12cc4:	add	sp, sp, #12
   12cc8:	pop	{r4, r5, r6, r7, pc}
   12ccc:	mov	r0, r4
   12cd0:	b	12cb4 <__assert_fail@plt+0x2218>
   12cd4:	cmp	r0, #4
   12cd8:	ldr	r4, [sp]
   12cdc:	beq	12c88 <__assert_fail@plt+0x21ec>
   12ce0:	mvn	r0, #0
   12ce4:	b	12cb4 <__assert_fail@plt+0x2218>
   12ce8:	bl	10964 <__stack_chk_fail@plt>
   12cec:	andeq	r3, r1, r0, ror #5
   12cf0:	muleq	r0, ip, r0
   12cf4:	push	{r4, r5, r6, r7, r8, lr}
   12cf8:	mov	r4, r0
   12cfc:	mov	r6, r1
   12d00:	mov	r5, r2
   12d04:	ldr	r7, [r0, #12]
   12d08:	bl	12228 <__assert_fail@plt+0x178c>
   12d0c:	cmp	r0, #0
   12d10:	bne	12e74 <__assert_fail@plt+0x23d8>
   12d14:	ldr	r2, [r4, #4]
   12d18:	lsr	r3, r7, #24
   12d1c:	lsl	lr, r7, #8
   12d20:	lsr	r1, r2, #24
   12d24:	lsl	r0, r2, #8
   12d28:	orr	r3, r3, r7, lsl #24
   12d2c:	and	lr, lr, #16711680	; 0xff0000
   12d30:	lsr	ip, r7, #8
   12d34:	orr	r1, r1, r2, lsl #24
   12d38:	and	r0, r0, #16711680	; 0xff0000
   12d3c:	lsr	r2, r2, #8
   12d40:	orr	r3, r3, lr
   12d44:	and	ip, ip, #65280	; 0xff00
   12d48:	orr	r1, r1, r0
   12d4c:	and	r2, r2, #65280	; 0xff00
   12d50:	orr	r3, r3, ip
   12d54:	orr	r2, r1, r2
   12d58:	add	r3, r3, r6
   12d5c:	cmp	r3, r2
   12d60:	bcs	12e70 <__assert_fail@plt+0x23d4>
   12d64:	ldr	r1, [r4]
   12d68:	ldr	lr, [pc, #316]	; 12eac <__assert_fail@plt+0x2410>
   12d6c:	sub	r2, r2, r3
   12d70:	lsr	r0, r1, #24
   12d74:	lsl	ip, r1, #8
   12d78:	orr	r0, r0, r1, lsl #24
   12d7c:	and	ip, ip, #16711680	; 0xff0000
   12d80:	lsr	r1, r1, #8
   12d84:	orr	r0, r0, ip
   12d88:	and	r1, r1, #65280	; 0xff00
   12d8c:	orr	r1, r0, r1
   12d90:	cmp	r1, lr
   12d94:	beq	12e10 <__assert_fail@plt+0x2374>
   12d98:	ldr	r0, [pc, #272]	; 12eb0 <__assert_fail@plt+0x2414>
   12d9c:	cmp	r1, r0
   12da0:	bne	12e8c <__assert_fail@plt+0x23f0>
   12da4:	cmp	r6, #0
   12da8:	bge	12e70 <__assert_fail@plt+0x23d4>
   12dac:	ldr	r0, [r4, #32]
   12db0:	lsr	r1, r0, #24
   12db4:	lsl	ip, r0, #8
   12db8:	orr	r1, r1, r0, lsl #24
   12dbc:	and	ip, ip, #16711680	; 0xff0000
   12dc0:	lsr	r0, r0, #8
   12dc4:	orr	r1, r1, ip
   12dc8:	and	r0, r0, #65280	; 0xff00
   12dcc:	orr	r1, r1, r0
   12dd0:	rsb	r1, r1, #0
   12dd4:	cmp	r6, r1
   12dd8:	bcc	12e70 <__assert_fail@plt+0x23d4>
   12ddc:	rsb	r6, r6, #0
   12de0:	cmp	r2, r6
   12de4:	movcs	r2, r6
   12de8:	add	r4, r4, r3
   12dec:	mov	r0, r4
   12df0:	mov	r1, #0
   12df4:	bl	10a60 <memchr@plt>
   12df8:	cmp	r0, #0
   12dfc:	beq	12ea4 <__assert_fail@plt+0x2408>
   12e00:	cmp	r5, #0
   12e04:	subne	r0, r0, r4
   12e08:	strne	r0, [r5]
   12e0c:	b	12e84 <__assert_fail@plt+0x23e8>
   12e10:	cmp	r6, #0
   12e14:	blt	12e70 <__assert_fail@plt+0x23d4>
   12e18:	ldr	r1, [r4, #20]
   12e1c:	lsr	r0, r1, #24
   12e20:	lsl	ip, r1, #8
   12e24:	orr	r0, r0, r1, lsl #24
   12e28:	and	ip, ip, #16711680	; 0xff0000
   12e2c:	lsr	r1, r1, #8
   12e30:	orr	r0, r0, ip
   12e34:	and	r1, r1, #65280	; 0xff00
   12e38:	orr	r1, r0, r1
   12e3c:	cmp	r1, #16
   12e40:	bls	12de8 <__assert_fail@plt+0x234c>
   12e44:	ldr	r0, [r4, #32]
   12e48:	lsr	r1, r0, #24
   12e4c:	lsl	ip, r0, #8
   12e50:	orr	r1, r1, r0, lsl #24
   12e54:	and	ip, ip, #16711680	; 0xff0000
   12e58:	lsr	r0, r0, #8
   12e5c:	orr	r1, r1, ip
   12e60:	and	r0, r0, #65280	; 0xff00
   12e64:	orr	r1, r1, r0
   12e68:	cmp	r6, r1
   12e6c:	bcc	12e94 <__assert_fail@plt+0x23f8>
   12e70:	mvn	r0, #3
   12e74:	cmp	r5, #0
   12e78:	movne	r4, #0
   12e7c:	moveq	r4, r5
   12e80:	strne	r0, [r5]
   12e84:	mov	r0, r4
   12e88:	pop	{r4, r5, r6, r7, r8, pc}
   12e8c:	mvn	r0, #12
   12e90:	b	12e74 <__assert_fail@plt+0x23d8>
   12e94:	sub	r1, r1, r6
   12e98:	cmp	r2, r1
   12e9c:	movcs	r2, r1
   12ea0:	b	12de8 <__assert_fail@plt+0x234c>
   12ea4:	mvn	r0, #7
   12ea8:	b	12e74 <__assert_fail@plt+0x23d8>
   12eac:	andle	pc, sp, sp, ror #29
   12eb0:	svccs	0x00f20112
   12eb4:	mov	r2, #0
   12eb8:	b	12cf4 <__assert_fail@plt+0x2258>
   12ebc:	ldr	ip, [pc, #308]	; 12ff8 <__assert_fail@plt+0x255c>
   12ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ec4:	add	ip, pc, ip
   12ec8:	ldr	lr, [pc, #300]	; 12ffc <__assert_fail@plt+0x2560>
   12ecc:	sub	sp, sp, #28
   12ed0:	mov	r5, r3
   12ed4:	ldr	r4, [ip, lr]
   12ed8:	mov	r8, r1
   12edc:	mov	r7, r2
   12ee0:	ldr	r3, [r4]
   12ee4:	mov	r2, ip
   12ee8:	mov	r9, r0
   12eec:	str	r3, [sp, #20]
   12ef0:	bl	12228 <__assert_fail@plt+0x178c>
   12ef4:	subs	r6, r0, #0
   12ef8:	bne	12fd0 <__assert_fail@plt+0x2534>
   12efc:	mov	r1, r8
   12f00:	mov	r0, r9
   12f04:	bl	12b50 <__assert_fail@plt+0x20b4>
   12f08:	subs	ip, r0, #0
   12f0c:	beq	12fec <__assert_fail@plt+0x2550>
   12f10:	ldr	r0, [ip]
   12f14:	ldr	r1, [ip, #4]
   12f18:	add	r3, sp, #8
   12f1c:	mov	r2, r3
   12f20:	mov	lr, r0
   12f24:	stmia	r2!, {r0, r1}
   12f28:	ldr	r2, [sp, #12]
   12f2c:	lsl	r1, r0, #8
   12f30:	and	r1, r1, #16711680	; 0xff0000
   12f34:	lsr	r8, r2, #8
   12f38:	lsl	r0, r2, #24
   12f3c:	orr	r0, r0, r2, lsr #24
   12f40:	uxtb	sl, r8
   12f44:	lsr	r2, r2, #16
   12f48:	orr	r8, r0, sl, lsl #16
   12f4c:	orr	r9, r1, lr, lsl #24
   12f50:	uxtb	r0, r2
   12f54:	mov	r1, #0
   12f58:	lsr	sl, lr, #8
   12f5c:	strd	r0, [sp]
   12f60:	ldr	r2, [sp]
   12f64:	and	r1, sl, #65280	; 0xff00
   12f68:	orr	r1, r9, r1
   12f6c:	orr	r2, r8, r2, lsl #8
   12f70:	orr	r1, r1, lr, lsr #24
   12f74:	str	r2, [r7]
   12f78:	str	r1, [r7, #4]
   12f7c:	ldr	r0, [ip, #8]!
   12f80:	mov	lr, r0
   12f84:	ldr	r1, [ip, #4]
   12f88:	lsr	r8, r0, #8
   12f8c:	and	r8, r8, #65280	; 0xff00
   12f90:	stmia	r3!, {r0, r1}
   12f94:	ldr	r7, [sp, #12]
   12f98:	lsl	r3, r0, #8
   12f9c:	and	r1, r3, #16711680	; 0xff0000
   12fa0:	lsr	r2, r7, #8
   12fa4:	lsr	r0, r7, #16
   12fa8:	uxtb	sl, r2
   12fac:	lsl	ip, r7, #24
   12fb0:	orr	r3, r1, lr, lsl #24
   12fb4:	orr	ip, ip, r7, lsr #24
   12fb8:	uxtb	r0, r0
   12fbc:	orr	r3, r3, r8
   12fc0:	orr	r2, ip, sl, lsl #16
   12fc4:	orr	r3, r3, lr, lsr #24
   12fc8:	orr	r0, r2, r0, lsl #8
   12fcc:	stm	r5, {r0, r3}
   12fd0:	ldr	r2, [sp, #20]
   12fd4:	ldr	r3, [r4]
   12fd8:	mov	r0, r6
   12fdc:	cmp	r2, r3
   12fe0:	bne	12ff4 <__assert_fail@plt+0x2558>
   12fe4:	add	sp, sp, #28
   12fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fec:	mvn	r6, #3
   12ff0:	b	12fd0 <__assert_fail@plt+0x2534>
   12ff4:	bl	10964 <__stack_chk_fail@plt>
   12ff8:	andeq	r3, r1, r0, lsl #1
   12ffc:	muleq	r0, ip, r0
   13000:	ldr	r3, [pc, #196]	; 130cc <__assert_fail@plt+0x2630>
   13004:	ldr	r2, [pc, #196]	; 130d0 <__assert_fail@plt+0x2634>
   13008:	add	r3, pc, r3
   1300c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13010:	sub	sp, sp, #28
   13014:	ldr	r8, [r3, r2]
   13018:	add	r3, sp, #8
   1301c:	str	r3, [sp, #4]
   13020:	ldr	r3, [r8]
   13024:	mov	fp, r0
   13028:	mov	r9, #0
   1302c:	str	r3, [sp, #20]
   13030:	b	13094 <__assert_fail@plt+0x25f8>
   13034:	ldr	r0, [r3, #8]!
   13038:	ldr	r2, [sp, #4]
   1303c:	ldr	r1, [r3, #4]
   13040:	stmia	r2!, {r0, r1}
   13044:	ldr	r3, [sp, #12]
   13048:	ldr	ip, [sp, #8]
   1304c:	lsr	r2, r3, #16
   13050:	lsr	r0, r3, #8
   13054:	lsl	lr, r3, #24
   13058:	lsl	sl, ip, #8
   1305c:	orr	lr, lr, r3, lsr #24
   13060:	uxtb	r6, r2
   13064:	uxtb	r0, r0
   13068:	and	r3, sl, #16711680	; 0xff0000
   1306c:	lsr	r2, ip, #8
   13070:	orr	r3, r3, ip, lsl #24
   13074:	and	r1, r2, #65280	; 0xff00
   13078:	orr	r3, r3, r1
   1307c:	orr	r0, lr, r0, lsl #16
   13080:	orr	r4, r0, r6, lsl #8
   13084:	orr	r5, r3, ip, lsr #24
   13088:	orrs	r3, r4, r5
   1308c:	beq	130ac <__assert_fail@plt+0x2610>
   13090:	add	r9, r9, #1
   13094:	mov	r1, r9
   13098:	mov	r0, fp
   1309c:	bl	12b50 <__assert_fail@plt+0x20b4>
   130a0:	subs	r3, r0, #0
   130a4:	bne	13034 <__assert_fail@plt+0x2598>
   130a8:	mvn	r9, #7
   130ac:	ldr	r2, [sp, #20]
   130b0:	ldr	r3, [r8]
   130b4:	mov	r0, r9
   130b8:	cmp	r2, r3
   130bc:	bne	130c8 <__assert_fail@plt+0x262c>
   130c0:	add	sp, sp, #28
   130c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130c8:	bl	10964 <__stack_chk_fail@plt>
   130cc:	andeq	r2, r1, ip, lsr pc
   130d0:	muleq	r0, ip, r0
   130d4:	push	{r4, r5, r6, r7, r8, lr}
   130d8:	mov	r4, r0
   130dc:	mov	r7, r1
   130e0:	mov	r6, r2
   130e4:	ldr	r5, [r0, #8]
   130e8:	bl	12228 <__assert_fail@plt+0x178c>
   130ec:	cmp	r0, #0
   130f0:	beq	1310c <__assert_fail@plt+0x2670>
   130f4:	cmp	r6, #0
   130f8:	movne	r4, #0
   130fc:	moveq	r4, r6
   13100:	strne	r0, [r6]
   13104:	mov	r0, r4
   13108:	pop	{r4, r5, r6, r7, r8, pc}
   1310c:	mov	r1, r7
   13110:	mov	r0, r4
   13114:	bl	1280c <__assert_fail@plt+0x1d70>
   13118:	cmp	r0, #0
   1311c:	blt	130f4 <__assert_fail@plt+0x2658>
   13120:	ldr	r3, [r4, #20]
   13124:	lsr	r1, r5, #24
   13128:	lsl	r2, r5, #8
   1312c:	orr	r1, r1, r5, lsl #24
   13130:	and	r2, r2, #16711680	; 0xff0000
   13134:	lsr	r5, r5, #8
   13138:	orr	r1, r1, r2
   1313c:	and	r5, r5, #65280	; 0xff00
   13140:	lsr	r2, r3, #24
   13144:	orr	r5, r1, r5
   13148:	lsl	r1, r3, #8
   1314c:	orr	r2, r2, r3, lsl #24
   13150:	and	r1, r1, #16711680	; 0xff0000
   13154:	lsr	r3, r3, #8
   13158:	orr	r2, r2, r1
   1315c:	and	r3, r3, #65280	; 0xff00
   13160:	add	r1, r5, r7
   13164:	orr	r3, r2, r3
   13168:	add	r4, r4, r1
   1316c:	cmp	r3, #15
   13170:	add	r4, r4, #4
   13174:	bhi	13190 <__assert_fail@plt+0x26f4>
   13178:	mov	r0, r4
   1317c:	mov	r1, #47	; 0x2f
   13180:	bl	10a78 <strrchr@plt>
   13184:	cmp	r0, #0
   13188:	beq	131ac <__assert_fail@plt+0x2710>
   1318c:	add	r4, r0, #1
   13190:	cmp	r6, #0
   13194:	beq	13104 <__assert_fail@plt+0x2668>
   13198:	mov	r0, r4
   1319c:	bl	10a00 <strlen@plt>
   131a0:	str	r0, [r6]
   131a4:	mov	r0, r4
   131a8:	pop	{r4, r5, r6, r7, r8, pc}
   131ac:	mvn	r0, #10
   131b0:	b	130f4 <__assert_fail@plt+0x2658>
   131b4:	ldr	ip, [pc, #260]	; 132c0 <__assert_fail@plt+0x2824>
   131b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131bc:	add	ip, pc, ip
   131c0:	ldr	lr, [pc, #252]	; 132c4 <__assert_fail@plt+0x2828>
   131c4:	sub	sp, sp, #20
   131c8:	mov	r7, r3
   131cc:	ldr	r9, [ip, lr]
   131d0:	mov	r4, r1
   131d4:	mov	r8, r2
   131d8:	ldr	r3, [r9]
   131dc:	mov	r2, ip
   131e0:	mov	r5, r0
   131e4:	str	r3, [sp, #12]
   131e8:	bl	12228 <__assert_fail@plt+0x178c>
   131ec:	cmp	r0, #0
   131f0:	bne	13298 <__assert_fail@plt+0x27fc>
   131f4:	cmp	r4, #0
   131f8:	str	r0, [sp, #4]
   131fc:	blt	13294 <__assert_fail@plt+0x27f8>
   13200:	add	r6, sp, #4
   13204:	add	sl, sp, #8
   13208:	mov	r1, r4
   1320c:	mov	r2, r6
   13210:	mov	r0, r5
   13214:	bl	1288c <__assert_fail@plt+0x1df0>
   13218:	ldr	r3, [sp, #4]
   1321c:	cmp	r0, #0
   13220:	cmpge	r3, #0
   13224:	mov	r4, r0
   13228:	blt	132b0 <__assert_fail@plt+0x2814>
   1322c:	cmp	r3, #1
   13230:	bne	13208 <__assert_fail@plt+0x276c>
   13234:	mov	r2, sl
   13238:	mov	r1, r4
   1323c:	mov	r0, r5
   13240:	bl	130d4 <__assert_fail@plt+0x2638>
   13244:	subs	fp, r0, #0
   13248:	beq	13208 <__assert_fail@plt+0x276c>
   1324c:	ldr	r3, [sp, #8]
   13250:	cmp	r7, r3
   13254:	bgt	13208 <__assert_fail@plt+0x276c>
   13258:	mov	r2, r7
   1325c:	mov	r1, r8
   13260:	bl	10958 <memcmp@plt>
   13264:	cmp	r0, #0
   13268:	bne	13208 <__assert_fail@plt+0x276c>
   1326c:	ldrb	fp, [fp, r7]
   13270:	cmp	fp, #0
   13274:	beq	13294 <__assert_fail@plt+0x27f8>
   13278:	mov	r2, r7
   1327c:	mov	r1, #64	; 0x40
   13280:	mov	r0, r8
   13284:	bl	10a60 <memchr@plt>
   13288:	cmp	fp, #64	; 0x40
   1328c:	cmpeq	r0, #0
   13290:	bne	13208 <__assert_fail@plt+0x276c>
   13294:	mov	r0, r4
   13298:	ldr	r2, [sp, #12]
   1329c:	ldr	r3, [r9]
   132a0:	cmp	r2, r3
   132a4:	bne	132bc <__assert_fail@plt+0x2820>
   132a8:	add	sp, sp, #20
   132ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132b0:	cmp	r3, #0
   132b4:	mvnlt	r4, #0
   132b8:	b	13294 <__assert_fail@plt+0x27f8>
   132bc:	bl	10964 <__stack_chk_fail@plt>
   132c0:	andeq	r2, r1, r8, lsl #27
   132c4:	muleq	r0, ip, r0
   132c8:	push	{r4, r5, r6, lr}
   132cc:	mov	r5, r0
   132d0:	mov	r0, r2
   132d4:	mov	r4, r2
   132d8:	mov	r6, r1
   132dc:	bl	10a00 <strlen@plt>
   132e0:	mov	r2, r4
   132e4:	mov	r1, r6
   132e8:	mov	r3, r0
   132ec:	mov	r0, r5
   132f0:	pop	{r4, r5, r6, lr}
   132f4:	b	131b4 <__assert_fail@plt+0x2718>
   132f8:	push	{r4, lr}
   132fc:	mov	r4, r0
   13300:	bl	1280c <__assert_fail@plt+0x1d70>
   13304:	subs	r1, r0, #0
   13308:	poplt	{r4, pc}
   1330c:	mov	r0, r4
   13310:	pop	{r4, lr}
   13314:	b	12c5c <__assert_fail@plt+0x21c0>
   13318:	push	{r4, lr}
   1331c:	mov	r4, r0
   13320:	bl	1284c <__assert_fail@plt+0x1db0>
   13324:	subs	r1, r0, #0
   13328:	poplt	{r4, pc}
   1332c:	mov	r0, r4
   13330:	pop	{r4, lr}
   13334:	b	12c5c <__assert_fail@plt+0x21c0>
   13338:	ldr	ip, [pc, #272]	; 13450 <__assert_fail@plt+0x29b4>
   1333c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13340:	add	ip, pc, ip
   13344:	ldr	lr, [pc, #264]	; 13454 <__assert_fail@plt+0x29b8>
   13348:	mov	sl, r2
   1334c:	sub	sp, sp, #20
   13350:	ldr	r2, [ip, lr]
   13354:	mov	r9, r3
   13358:	mov	r3, ip
   1335c:	ldr	r3, [r2]
   13360:	str	r2, [sp, #4]
   13364:	mov	r5, r0
   13368:	ldr	r7, [sp, #56]	; 0x38
   1336c:	ldr	fp, [sp, #60]	; 0x3c
   13370:	str	r3, [sp, #12]
   13374:	bl	132f8 <__assert_fail@plt+0x285c>
   13378:	subs	r4, r0, #0
   1337c:	blt	13438 <__assert_fail@plt+0x299c>
   13380:	add	r8, sp, #8
   13384:	b	1339c <__assert_fail@plt+0x2900>
   13388:	mov	r1, r4
   1338c:	mov	r0, r5
   13390:	bl	13318 <__assert_fail@plt+0x287c>
   13394:	subs	r4, r0, #0
   13398:	blt	13438 <__assert_fail@plt+0x299c>
   1339c:	mov	r2, r7
   133a0:	mov	r1, r4
   133a4:	mov	r0, r5
   133a8:	bl	12bd0 <__assert_fail@plt+0x2134>
   133ac:	subs	r6, r0, #0
   133b0:	beq	13434 <__assert_fail@plt+0x2998>
   133b4:	ldr	r3, [r6, #8]
   133b8:	mov	r2, r8
   133bc:	mov	r0, r5
   133c0:	lsr	r1, r3, #24
   133c4:	lsl	ip, r3, #8
   133c8:	orr	r1, r1, r3, lsl #24
   133cc:	and	ip, ip, #16711680	; 0xff0000
   133d0:	lsr	r3, r3, #8
   133d4:	orr	r1, r1, ip
   133d8:	and	r3, r3, #65280	; 0xff00
   133dc:	orr	r1, r1, r3
   133e0:	bl	12cf4 <__assert_fail@plt+0x2258>
   133e4:	cmp	r0, #0
   133e8:	beq	13388 <__assert_fail@plt+0x28ec>
   133ec:	ldr	r3, [sp, #8]
   133f0:	cmp	r9, r3
   133f4:	bne	13388 <__assert_fail@plt+0x28ec>
   133f8:	mov	r2, r9
   133fc:	mov	r1, sl
   13400:	bl	10958 <memcmp@plt>
   13404:	cmp	r0, #0
   13408:	bne	13388 <__assert_fail@plt+0x28ec>
   1340c:	cmp	fp, #0
   13410:	strne	r4, [fp]
   13414:	ldr	r3, [sp, #4]
   13418:	ldr	r2, [sp, #12]
   1341c:	mov	r0, r6
   13420:	ldr	r3, [r3]
   13424:	cmp	r2, r3
   13428:	bne	1344c <__assert_fail@plt+0x29b0>
   1342c:	add	sp, sp, #20
   13430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13434:	mvn	r4, #12
   13438:	cmp	r7, #0
   1343c:	strne	r4, [r7]
   13440:	movne	r6, #0
   13444:	moveq	r6, r7
   13448:	b	13414 <__assert_fail@plt+0x2978>
   1344c:	bl	10964 <__stack_chk_fail@plt>
   13450:	andeq	r2, r1, r4, lsl #24
   13454:	muleq	r0, ip, r0
   13458:	push	{r4, lr}
   1345c:	ldr	r3, [r0, #20]
   13460:	lsr	ip, r3, #24
   13464:	lsl	lr, r3, #8
   13468:	orr	ip, ip, r3, lsl #24
   1346c:	and	lr, lr, #16711680	; 0xff0000
   13470:	lsr	r3, r3, #8
   13474:	orr	ip, ip, lr
   13478:	and	r3, r3, #65280	; 0xff00
   1347c:	orr	r3, ip, r3
   13480:	cmp	r3, #15
   13484:	bls	13490 <__assert_fail@plt+0x29f4>
   13488:	pop	{r4, lr}
   1348c:	b	12bd0 <__assert_fail@plt+0x2134>
   13490:	cmp	r2, #0
   13494:	mov	r4, r2
   13498:	mvnne	r3, #9
   1349c:	strne	r3, [r2]
   134a0:	mov	r0, #0
   134a4:	pop	{r4, pc}
   134a8:	push	{r4, r5, lr}
   134ac:	sub	sp, sp, #12
   134b0:	ldr	ip, [r0, #20]
   134b4:	ldr	r4, [sp, #24]
   134b8:	lsr	lr, ip, #24
   134bc:	lsl	r5, ip, #8
   134c0:	orr	lr, lr, ip, lsl #24
   134c4:	and	r5, r5, #16711680	; 0xff0000
   134c8:	lsr	ip, ip, #8
   134cc:	orr	lr, lr, r5
   134d0:	and	ip, ip, #65280	; 0xff00
   134d4:	orr	ip, lr, ip
   134d8:	cmp	ip, #15
   134dc:	bls	134f4 <__assert_fail@plt+0x2a58>
   134e0:	mov	ip, #0
   134e4:	stm	sp, {r4, ip}
   134e8:	bl	13338 <__assert_fail@plt+0x289c>
   134ec:	add	sp, sp, #12
   134f0:	pop	{r4, r5, pc}
   134f4:	cmp	r4, #0
   134f8:	moveq	r0, r4
   134fc:	beq	134ec <__assert_fail@plt+0x2a50>
   13500:	mvn	r3, #9
   13504:	mov	r0, #0
   13508:	str	r3, [r4]
   1350c:	add	sp, sp, #12
   13510:	pop	{r4, r5, pc}
   13514:	push	{r4, r5, r6, r7, lr}
   13518:	mov	r5, r0
   1351c:	sub	sp, sp, #12
   13520:	mov	r0, r2
   13524:	mov	r7, r3
   13528:	mov	r4, r2
   1352c:	mov	r6, r1
   13530:	bl	10a00 <strlen@plt>
   13534:	str	r7, [sp]
   13538:	mov	r2, r4
   1353c:	mov	r1, r6
   13540:	mov	r3, r0
   13544:	mov	r0, r5
   13548:	bl	134a8 <__assert_fail@plt+0x2a0c>
   1354c:	add	sp, sp, #12
   13550:	pop	{r4, r5, r6, r7, pc}
   13554:	ldr	ip, [pc, #200]	; 13624 <__assert_fail@plt+0x2b88>
   13558:	push	{r4, r5, lr}
   1355c:	add	ip, pc, ip
   13560:	ldr	lr, [pc, #192]	; 13628 <__assert_fail@plt+0x2b8c>
   13564:	sub	sp, sp, #20
   13568:	ldr	r4, [ip, lr]
   1356c:	ldr	r5, [sp, #32]
   13570:	add	ip, sp, #8
   13574:	str	r5, [sp]
   13578:	ldr	lr, [r4]
   1357c:	str	ip, [sp, #4]
   13580:	str	lr, [sp, #12]
   13584:	mov	r5, r0
   13588:	bl	13338 <__assert_fail@plt+0x289c>
   1358c:	cmp	r0, #0
   13590:	beq	135c4 <__assert_fail@plt+0x2b28>
   13594:	ldr	r3, [r5, #20]
   13598:	lsr	r2, r3, #24
   1359c:	lsl	r1, r3, #8
   135a0:	orr	r2, r2, r3, lsl #24
   135a4:	and	r1, r1, #16711680	; 0xff0000
   135a8:	lsr	r3, r3, #8
   135ac:	orr	r2, r2, r1
   135b0:	and	r3, r3, #65280	; 0xff00
   135b4:	orr	r3, r2, r3
   135b8:	cmp	r3, #15
   135bc:	bls	135dc <__assert_fail@plt+0x2b40>
   135c0:	add	r0, r0, #12
   135c4:	ldr	r2, [sp, #12]
   135c8:	ldr	r3, [r4]
   135cc:	cmp	r2, r3
   135d0:	bne	13620 <__assert_fail@plt+0x2b84>
   135d4:	add	sp, sp, #20
   135d8:	pop	{r4, r5, pc}
   135dc:	ldr	r3, [sp, #8]
   135e0:	add	r3, r3, #12
   135e4:	tst	r3, #7
   135e8:	beq	135c0 <__assert_fail@plt+0x2b24>
   135ec:	ldr	r3, [r0, #4]
   135f0:	lsr	r2, r3, #24
   135f4:	lsl	r1, r3, #8
   135f8:	orr	r2, r2, r3, lsl #24
   135fc:	and	r1, r1, #16711680	; 0xff0000
   13600:	lsr	r3, r3, #8
   13604:	orr	r2, r2, r1
   13608:	and	r3, r3, #65280	; 0xff00
   1360c:	orr	r3, r2, r3
   13610:	cmp	r3, #7
   13614:	addhi	r0, r0, #16
   13618:	bls	135c0 <__assert_fail@plt+0x2b24>
   1361c:	b	135c4 <__assert_fail@plt+0x2b28>
   13620:	bl	10964 <__stack_chk_fail@plt>
   13624:	andeq	r2, r1, r8, ror #19
   13628:	muleq	r0, ip, r0
   1362c:	ldr	ip, [pc, #292]	; 13758 <__assert_fail@plt+0x2cbc>
   13630:	push	{r4, r5, r6, r7, r8, r9, lr}
   13634:	add	ip, pc, ip
   13638:	ldr	lr, [pc, #284]	; 1375c <__assert_fail@plt+0x2cc0>
   1363c:	sub	sp, sp, #12
   13640:	mov	r8, r3
   13644:	ldr	r4, [ip, lr]
   13648:	mov	r3, ip
   1364c:	mov	r7, r2
   13650:	ldr	r3, [r4]
   13654:	mov	r2, r8
   13658:	mov	r9, r0
   1365c:	mov	r5, r1
   13660:	str	r3, [sp, #4]
   13664:	bl	12bd0 <__assert_fail@plt+0x2134>
   13668:	subs	r6, r0, #0
   1366c:	beq	136e4 <__assert_fail@plt+0x2c48>
   13670:	cmp	r7, #0
   13674:	beq	136b4 <__assert_fail@plt+0x2c18>
   13678:	ldr	r3, [r6, #8]
   1367c:	mov	r2, sp
   13680:	lsr	r1, r3, #24
   13684:	lsl	r0, r3, #8
   13688:	orr	r1, r1, r3, lsl #24
   1368c:	and	r0, r0, #16711680	; 0xff0000
   13690:	lsr	r3, r3, #8
   13694:	orr	r1, r1, r0
   13698:	and	r3, r3, #65280	; 0xff00
   1369c:	orr	r1, r1, r3
   136a0:	mov	r0, r9
   136a4:	bl	12cf4 <__assert_fail@plt+0x2258>
   136a8:	cmp	r0, #0
   136ac:	strne	r0, [r7]
   136b0:	beq	13740 <__assert_fail@plt+0x2ca4>
   136b4:	ldr	r3, [r9, #20]
   136b8:	lsr	r2, r3, #24
   136bc:	lsl	r1, r3, #8
   136c0:	orr	r2, r2, r3, lsl #24
   136c4:	and	r1, r1, #16711680	; 0xff0000
   136c8:	lsr	r3, r3, #8
   136cc:	orr	r2, r2, r1
   136d0:	and	r3, r3, #65280	; 0xff00
   136d4:	orr	r3, r2, r3
   136d8:	cmp	r3, #15
   136dc:	bls	13700 <__assert_fail@plt+0x2c64>
   136e0:	add	r6, r6, #12
   136e4:	ldr	r2, [sp, #4]
   136e8:	ldr	r3, [r4]
   136ec:	mov	r0, r6
   136f0:	cmp	r2, r3
   136f4:	bne	13754 <__assert_fail@plt+0x2cb8>
   136f8:	add	sp, sp, #12
   136fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13700:	add	r5, r5, #12
   13704:	tst	r5, #7
   13708:	beq	136e0 <__assert_fail@plt+0x2c44>
   1370c:	ldr	r3, [r6, #4]
   13710:	lsr	r2, r3, #24
   13714:	lsl	r1, r3, #8
   13718:	orr	r2, r2, r3, lsl #24
   1371c:	and	r1, r1, #16711680	; 0xff0000
   13720:	lsr	r3, r3, #8
   13724:	orr	r2, r2, r1
   13728:	and	r3, r3, #65280	; 0xff00
   1372c:	orr	r3, r2, r3
   13730:	cmp	r3, #7
   13734:	addhi	r6, r6, #16
   13738:	bls	136e0 <__assert_fail@plt+0x2c44>
   1373c:	b	136e4 <__assert_fail@plt+0x2c48>
   13740:	cmp	r8, #0
   13744:	mov	r6, #0
   13748:	ldrne	r3, [sp]
   1374c:	strne	r3, [r8]
   13750:	b	136e4 <__assert_fail@plt+0x2c48>
   13754:	bl	10964 <__stack_chk_fail@plt>
   13758:	andeq	r2, r1, r0, lsl r9
   1375c:	muleq	r0, ip, r0
   13760:	push	{r4, r5, r6, r7, lr}
   13764:	mov	r5, r0
   13768:	sub	sp, sp, #12
   1376c:	mov	r0, r2
   13770:	mov	r7, r3
   13774:	mov	r4, r2
   13778:	mov	r6, r1
   1377c:	bl	10a00 <strlen@plt>
   13780:	str	r7, [sp]
   13784:	mov	r2, r4
   13788:	mov	r1, r6
   1378c:	mov	r3, r0
   13790:	mov	r0, r5
   13794:	bl	13554 <__assert_fail@plt+0x2ab8>
   13798:	add	sp, sp, #12
   1379c:	pop	{r4, r5, r6, r7, pc}
   137a0:	ldr	ip, [pc, #188]	; 13864 <__assert_fail@plt+0x2dc8>
   137a4:	ldr	r2, [pc, #188]	; 13868 <__assert_fail@plt+0x2dcc>
   137a8:	add	ip, pc, ip
   137ac:	push	{r4, r5, r6, r7, lr}
   137b0:	sub	sp, sp, #12
   137b4:	ldr	r4, [ip, r2]
   137b8:	ldr	r2, [pc, #172]	; 1386c <__assert_fail@plt+0x2dd0>
   137bc:	mov	r5, sp
   137c0:	ldr	ip, [r4]
   137c4:	mov	r3, r5
   137c8:	add	r2, pc, r2
   137cc:	mov	r6, r0
   137d0:	mov	r7, r1
   137d4:	str	ip, [sp, #4]
   137d8:	bl	13760 <__assert_fail@plt+0x2cc4>
   137dc:	cmp	r0, #0
   137e0:	beq	137f0 <__assert_fail@plt+0x2d54>
   137e4:	ldr	r3, [sp]
   137e8:	cmp	r3, #4
   137ec:	beq	13838 <__assert_fail@plt+0x2d9c>
   137f0:	ldr	r2, [pc, #120]	; 13870 <__assert_fail@plt+0x2dd4>
   137f4:	mov	r3, r5
   137f8:	mov	r1, r7
   137fc:	mov	r0, r6
   13800:	add	r2, pc, r2
   13804:	bl	13760 <__assert_fail@plt+0x2cc4>
   13808:	cmp	r0, #0
   1380c:	beq	13820 <__assert_fail@plt+0x2d84>
   13810:	ldr	r3, [sp]
   13814:	cmp	r3, #4
   13818:	movne	r0, #0
   1381c:	beq	13838 <__assert_fail@plt+0x2d9c>
   13820:	ldr	r2, [sp, #4]
   13824:	ldr	r3, [r4]
   13828:	cmp	r2, r3
   1382c:	bne	13860 <__assert_fail@plt+0x2dc4>
   13830:	add	sp, sp, #12
   13834:	pop	{r4, r5, r6, r7, pc}
   13838:	ldr	r3, [r0]
   1383c:	lsr	r0, r3, #24
   13840:	lsl	r2, r3, #8
   13844:	orr	r0, r0, r3, lsl #24
   13848:	and	r2, r2, #16711680	; 0xff0000
   1384c:	lsr	r3, r3, #8
   13850:	orr	r0, r0, r2
   13854:	and	r3, r3, #65280	; 0xff00
   13858:	orr	r0, r0, r3
   1385c:	b	13820 <__assert_fail@plt+0x2d84>
   13860:	bl	10964 <__stack_chk_fail@plt>
   13864:	muleq	r1, ip, r7
   13868:	muleq	r0, ip, r0
   1386c:	andeq	r1, r0, r0, lsl r5
   13870:	andeq	r1, r0, r0, ror #9
   13874:	push	{r4, r5, r6, lr}
   13878:	mov	r2, #0
   1387c:	mvn	r1, #0
   13880:	mov	r6, r0
   13884:	bl	1288c <__assert_fail@plt+0x1df0>
   13888:	cmn	r0, #1
   1388c:	beq	138f8 <__assert_fail@plt+0x2e5c>
   13890:	cmp	r0, #0
   13894:	mov	r4, r0
   13898:	movge	r5, #0
   1389c:	bge	138ac <__assert_fail@plt+0x2e10>
   138a0:	b	138ec <__assert_fail@plt+0x2e50>
   138a4:	cmp	r4, #0
   138a8:	blt	138ec <__assert_fail@plt+0x2e50>
   138ac:	mov	r1, r4
   138b0:	mov	r0, r6
   138b4:	bl	137a0 <__assert_fail@plt+0x2d04>
   138b8:	mov	r1, r4
   138bc:	mov	r2, #0
   138c0:	cmn	r0, #1
   138c4:	cmpne	r0, r5
   138c8:	mov	r3, r0
   138cc:	mov	r0, r6
   138d0:	movhi	r5, r3
   138d4:	bl	1288c <__assert_fail@plt+0x1df0>
   138d8:	cmn	r0, #1
   138dc:	mov	r4, r0
   138e0:	bne	138a4 <__assert_fail@plt+0x2e08>
   138e4:	mov	r0, r5
   138e8:	pop	{r4, r5, r6, pc}
   138ec:	mvn	r5, #0
   138f0:	mov	r0, r5
   138f4:	pop	{r4, r5, r6, pc}
   138f8:	mov	r5, #0
   138fc:	b	138e4 <__assert_fail@plt+0x2e48>
   13900:	push	{r4, r5, r6, lr}
   13904:	mov	r5, r1
   13908:	ldr	r1, [pc, #60]	; 1394c <__assert_fail@plt+0x2eb0>
   1390c:	sub	sp, sp, #8
   13910:	add	r1, pc, r1
   13914:	mov	r6, r2
   13918:	mov	r4, r0
   1391c:	bl	13a54 <__assert_fail@plt+0x2fb8>
   13920:	subs	r1, r0, #0
   13924:	movlt	r0, #0
   13928:	blt	13944 <__assert_fail@plt+0x2ea8>
   1392c:	mov	ip, #0
   13930:	mov	r3, r6
   13934:	mov	r2, r5
   13938:	mov	r0, r4
   1393c:	str	ip, [sp]
   13940:	bl	13554 <__assert_fail@plt+0x2ab8>
   13944:	add	sp, sp, #8
   13948:	pop	{r4, r5, r6, pc}
   1394c:	andeq	r1, r0, r0, ror #7
   13950:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13954:	mov	r4, r1
   13958:	mov	r5, r2
   1395c:	mov	r8, r0
   13960:	bl	12228 <__assert_fail@plt+0x178c>
   13964:	subs	r7, r0, #0
   13968:	bne	13a24 <__assert_fail@plt+0x2f88>
   1396c:	ldrb	r3, [r4]
   13970:	add	r6, r4, r5
   13974:	cmp	r3, #47	; 0x2f
   13978:	beq	139c0 <__assert_fail@plt+0x2f24>
   1397c:	mov	r2, r5
   13980:	mov	r1, #47	; 0x2f
   13984:	mov	r0, r4
   13988:	bl	10a60 <memchr@plt>
   1398c:	mov	r1, r4
   13990:	subs	r7, r0, #0
   13994:	subne	r5, r7, r4
   13998:	mov	r2, r5
   1399c:	mov	r0, r8
   139a0:	moveq	r7, r6
   139a4:	bl	13900 <__assert_fail@plt+0x2e64>
   139a8:	subs	r1, r0, #0
   139ac:	beq	13a4c <__assert_fail@plt+0x2fb0>
   139b0:	mov	r0, r8
   139b4:	bl	13a54 <__assert_fail@plt+0x2fb8>
   139b8:	mov	r4, r7
   139bc:	mov	r7, r0
   139c0:	cmp	r6, r4
   139c4:	bls	13a24 <__assert_fail@plt+0x2f88>
   139c8:	mov	r1, r4
   139cc:	b	139d8 <__assert_fail@plt+0x2f3c>
   139d0:	cmp	r6, r1
   139d4:	beq	13a24 <__assert_fail@plt+0x2f88>
   139d8:	mov	r5, r1
   139dc:	add	r1, r1, #1
   139e0:	ldrb	r3, [r5]
   139e4:	cmp	r3, #47	; 0x2f
   139e8:	beq	139d0 <__assert_fail@plt+0x2f34>
   139ec:	sub	r9, r6, r5
   139f0:	mov	r2, r9
   139f4:	mov	r1, #47	; 0x2f
   139f8:	mov	r0, r5
   139fc:	bl	10a60 <memchr@plt>
   13a00:	subs	r4, r0, #0
   13a04:	beq	13a2c <__assert_fail@plt+0x2f90>
   13a08:	mov	r1, r7
   13a0c:	sub	r3, r4, r5
   13a10:	mov	r2, r5
   13a14:	mov	r0, r8
   13a18:	bl	131b4 <__assert_fail@plt+0x2718>
   13a1c:	subs	r7, r0, #0
   13a20:	bge	139c0 <__assert_fail@plt+0x2f24>
   13a24:	mov	r0, r7
   13a28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a2c:	mov	r1, r7
   13a30:	mov	r3, r9
   13a34:	mov	r2, r5
   13a38:	mov	r0, r8
   13a3c:	bl	131b4 <__assert_fail@plt+0x2718>
   13a40:	mov	r7, r0
   13a44:	mov	r0, r7
   13a48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a4c:	mvn	r7, #4
   13a50:	b	13a24 <__assert_fail@plt+0x2f88>
   13a54:	push	{r4, r5, r6, lr}
   13a58:	mov	r5, r0
   13a5c:	mov	r0, r1
   13a60:	mov	r4, r1
   13a64:	bl	10a00 <strlen@plt>
   13a68:	mov	r1, r4
   13a6c:	mov	r2, r0
   13a70:	mov	r0, r5
   13a74:	pop	{r4, r5, r6, lr}
   13a78:	b	13950 <__assert_fail@plt+0x2eb4>
   13a7c:	push	{r4, r5, r6, lr}
   13a80:	mov	r5, r0
   13a84:	mov	r0, r1
   13a88:	mov	r4, r1
   13a8c:	bl	10a00 <strlen@plt>
   13a90:	mov	r1, r4
   13a94:	mov	r2, r0
   13a98:	mov	r0, r5
   13a9c:	pop	{r4, r5, r6, lr}
   13aa0:	b	13900 <__assert_fail@plt+0x2e64>
   13aa4:	ldr	ip, [pc, #416]	; 13c4c <__assert_fail@plt+0x31b0>
   13aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13aac:	add	ip, pc, ip
   13ab0:	ldr	lr, [pc, #408]	; 13c50 <__assert_fail@plt+0x31b4>
   13ab4:	mov	r8, r1
   13ab8:	sub	sp, sp, #36	; 0x24
   13abc:	ldr	r1, [ip, lr]
   13ac0:	mov	r4, r3
   13ac4:	str	r3, [sp]
   13ac8:	ldr	r3, [r1]
   13acc:	mov	r6, r2
   13ad0:	str	r1, [sp, #8]
   13ad4:	mov	r2, ip
   13ad8:	mov	r9, r0
   13adc:	str	r3, [sp, #28]
   13ae0:	bl	12228 <__assert_fail@plt+0x178c>
   13ae4:	subs	fp, r0, #0
   13ae8:	bne	13bf8 <__assert_fail@plt+0x315c>
   13aec:	cmp	r4, #1
   13af0:	ble	13c44 <__assert_fail@plt+0x31a8>
   13af4:	cmp	r8, #0
   13af8:	str	fp, [sp, #20]
   13afc:	blt	13c3c <__assert_fail@plt+0x31a0>
   13b00:	mov	r0, fp
   13b04:	mov	r7, fp
   13b08:	mov	r4, fp
   13b0c:	mov	r5, fp
   13b10:	add	sl, sp, #20
   13b14:	add	r3, sp, #24
   13b18:	str	r3, [sp, #4]
   13b1c:	cmp	r0, r5
   13b20:	ble	13b88 <__assert_fail@plt+0x30ec>
   13b24:	cmp	r7, r8
   13b28:	beq	13bdc <__assert_fail@plt+0x3140>
   13b2c:	mov	r1, r7
   13b30:	mov	r2, sl
   13b34:	mov	r0, r9
   13b38:	bl	1288c <__assert_fail@plt+0x1df0>
   13b3c:	cmp	r0, #0
   13b40:	cmpge	r8, r0
   13b44:	mov	r7, r0
   13b48:	blt	13c18 <__assert_fail@plt+0x317c>
   13b4c:	ldr	r0, [sp, #20]
   13b50:	cmp	r5, r0
   13b54:	ble	13b1c <__assert_fail@plt+0x3080>
   13b58:	rsb	r1, r6, #1
   13b5c:	sub	r3, r4, #2
   13b60:	add	r3, r6, r3
   13b64:	add	r4, r1, r3
   13b68:	ldrb	r2, [r3], #-1
   13b6c:	cmp	r2, #47	; 0x2f
   13b70:	bne	13b64 <__assert_fail@plt+0x30c8>
   13b74:	sub	r5, r5, #1
   13b78:	cmp	r5, r0
   13b7c:	bne	13b5c <__assert_fail@plt+0x30c0>
   13b80:	cmp	r0, r5
   13b84:	bgt	13b24 <__assert_fail@plt+0x3088>
   13b88:	mov	r1, r7
   13b8c:	ldr	r2, [sp, #4]
   13b90:	mov	r0, r9
   13b94:	bl	130d4 <__assert_fail@plt+0x2638>
   13b98:	subs	r1, r0, #0
   13b9c:	beq	13c30 <__assert_fail@plt+0x3194>
   13ba0:	ldr	r2, [sp, #24]
   13ba4:	ldr	r0, [sp]
   13ba8:	add	r3, r2, r4
   13bac:	cmp	r3, r0
   13bb0:	bge	13b24 <__assert_fail@plt+0x3088>
   13bb4:	add	r0, r6, r4
   13bb8:	str	r3, [sp, #12]
   13bbc:	add	r4, r3, #1
   13bc0:	bl	1094c <memcpy@plt>
   13bc4:	ldr	r3, [sp, #12]
   13bc8:	mov	r2, #47	; 0x2f
   13bcc:	cmp	r7, r8
   13bd0:	add	r5, r5, #1
   13bd4:	strb	r2, [r6, r3]
   13bd8:	bne	13b2c <__assert_fail@plt+0x3090>
   13bdc:	ldr	r3, [sp, #20]
   13be0:	cmp	r3, r5
   13be4:	bge	13c44 <__assert_fail@plt+0x31a8>
   13be8:	cmp	r4, #1
   13bec:	subgt	r4, r4, #1
   13bf0:	mov	r3, #0
   13bf4:	strb	r3, [r6, r4]
   13bf8:	ldr	r3, [sp, #8]
   13bfc:	ldr	r2, [sp, #28]
   13c00:	mov	r0, fp
   13c04:	ldr	r3, [r3]
   13c08:	cmp	r2, r3
   13c0c:	bne	13c38 <__assert_fail@plt+0x319c>
   13c10:	add	sp, sp, #36	; 0x24
   13c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c18:	cmn	r0, #1
   13c1c:	bge	13c3c <__assert_fail@plt+0x31a0>
   13c20:	cmn	r0, #4
   13c24:	movne	fp, r0
   13c28:	mvneq	fp, #10
   13c2c:	b	13bf8 <__assert_fail@plt+0x315c>
   13c30:	ldr	fp, [sp, #24]
   13c34:	b	13bf8 <__assert_fail@plt+0x315c>
   13c38:	bl	10964 <__stack_chk_fail@plt>
   13c3c:	mvn	fp, #3
   13c40:	b	13bf8 <__assert_fail@plt+0x315c>
   13c44:	mvn	fp, #2
   13c48:	b	13bf8 <__assert_fail@plt+0x315c>
   13c4c:	muleq	r1, r8, r4
   13c50:	muleq	r0, ip, r0
   13c54:	ldr	ip, [pc, #224]	; 13d3c <__assert_fail@plt+0x32a0>
   13c58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c5c:	add	ip, pc, ip
   13c60:	ldr	lr, [pc, #216]	; 13d40 <__assert_fail@plt+0x32a4>
   13c64:	sub	sp, sp, #8
   13c68:	mov	sl, r3
   13c6c:	ldr	r9, [ip, lr]
   13c70:	mov	r4, r1
   13c74:	mov	r6, r2
   13c78:	ldr	r3, [r9]
   13c7c:	mov	r2, ip
   13c80:	mov	r7, r0
   13c84:	str	r3, [sp, #4]
   13c88:	bl	12228 <__assert_fail@plt+0x178c>
   13c8c:	cmp	r0, #0
   13c90:	bne	13cfc <__assert_fail@plt+0x3260>
   13c94:	cmp	r6, #0
   13c98:	blt	13d30 <__assert_fail@plt+0x3294>
   13c9c:	cmp	r4, #0
   13ca0:	str	r0, [sp]
   13ca4:	movge	r3, r0
   13ca8:	mvnge	r5, #12
   13cac:	movge	r8, sp
   13cb0:	bge	13cd8 <__assert_fail@plt+0x323c>
   13cb4:	b	13d28 <__assert_fail@plt+0x328c>
   13cb8:	mov	r1, r0
   13cbc:	mov	r2, r8
   13cc0:	mov	r0, r7
   13cc4:	bl	1288c <__assert_fail@plt+0x1df0>
   13cc8:	cmp	r0, #0
   13ccc:	cmpge	r4, r0
   13cd0:	blt	13d14 <__assert_fail@plt+0x3278>
   13cd4:	ldr	r3, [sp]
   13cd8:	cmp	r6, r3
   13cdc:	moveq	r5, r0
   13ce0:	cmp	r4, r0
   13ce4:	bne	13cb8 <__assert_fail@plt+0x321c>
   13ce8:	cmp	sl, #0
   13cec:	strne	r3, [sl]
   13cf0:	cmp	r6, r3
   13cf4:	movle	r0, r5
   13cf8:	mvngt	r0, #0
   13cfc:	ldr	r2, [sp, #4]
   13d00:	ldr	r3, [r9]
   13d04:	cmp	r2, r3
   13d08:	bne	13d38 <__assert_fail@plt+0x329c>
   13d0c:	add	sp, sp, #8
   13d10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d14:	cmn	r0, #1
   13d18:	bge	13d28 <__assert_fail@plt+0x328c>
   13d1c:	cmn	r0, #4
   13d20:	mvneq	r0, #10
   13d24:	b	13cfc <__assert_fail@plt+0x3260>
   13d28:	mvn	r0, #3
   13d2c:	b	13cfc <__assert_fail@plt+0x3260>
   13d30:	mvn	r0, #0
   13d34:	b	13cfc <__assert_fail@plt+0x3260>
   13d38:	bl	10964 <__stack_chk_fail@plt>
   13d3c:	andeq	r2, r1, r8, ror #5
   13d40:	muleq	r0, ip, r0
   13d44:	ldr	ip, [pc, #80]	; 13d9c <__assert_fail@plt+0x3300>
   13d48:	push	{r4, lr}
   13d4c:	add	ip, pc, ip
   13d50:	ldr	lr, [pc, #72]	; 13da0 <__assert_fail@plt+0x3304>
   13d54:	sub	sp, sp, #8
   13d58:	mov	r3, sp
   13d5c:	ldr	r4, [ip, lr]
   13d60:	mov	r2, #0
   13d64:	ldr	ip, [r4]
   13d68:	str	ip, [sp, #4]
   13d6c:	bl	13c54 <__assert_fail@plt+0x31b8>
   13d70:	cmp	r0, #0
   13d74:	ldreq	r0, [sp]
   13d78:	beq	13d80 <__assert_fail@plt+0x32e4>
   13d7c:	mvnge	r0, #12
   13d80:	ldr	r2, [sp, #4]
   13d84:	ldr	r3, [r4]
   13d88:	cmp	r2, r3
   13d8c:	bne	13d98 <__assert_fail@plt+0x32fc>
   13d90:	add	sp, sp, #8
   13d94:	pop	{r4, pc}
   13d98:	bl	10964 <__stack_chk_fail@plt>
   13d9c:	strdeq	r2, [r1], -r8
   13da0:	muleq	r0, ip, r0
   13da4:	push	{r4, r5, r6, lr}
   13da8:	mov	r4, r0
   13dac:	mov	r5, r1
   13db0:	bl	13d44 <__assert_fail@plt+0x32a8>
   13db4:	subs	r2, r0, #0
   13db8:	poplt	{r4, r5, r6, pc}
   13dbc:	mov	r1, r5
   13dc0:	mov	r0, r4
   13dc4:	sub	r2, r2, #1
   13dc8:	mov	r3, #0
   13dcc:	pop	{r4, r5, r6, lr}
   13dd0:	b	13c54 <__assert_fail@plt+0x31b8>
   13dd4:	ldr	ip, [pc, #212]	; 13eb0 <__assert_fail@plt+0x3414>
   13dd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ddc:	add	ip, pc, ip
   13de0:	ldr	lr, [pc, #204]	; 13eb4 <__assert_fail@plt+0x3418>
   13de4:	sub	sp, sp, #8
   13de8:	mov	sl, r3
   13dec:	ldr	r9, [ip, lr]
   13df0:	mov	r8, r1
   13df4:	mov	r7, r2
   13df8:	ldr	r3, [r9]
   13dfc:	mov	r2, ip
   13e00:	mov	r5, r0
   13e04:	ldr	r6, [sp, #40]	; 0x28
   13e08:	str	r3, [sp, #4]
   13e0c:	bl	12228 <__assert_fail@plt+0x178c>
   13e10:	subs	r4, r0, #0
   13e14:	beq	13e34 <__assert_fail@plt+0x3398>
   13e18:	ldr	r2, [sp, #4]
   13e1c:	ldr	r3, [r9]
   13e20:	mov	r0, r4
   13e24:	cmp	r2, r3
   13e28:	bne	13eac <__assert_fail@plt+0x3410>
   13e2c:	add	sp, sp, #8
   13e30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e34:	mov	r2, r4
   13e38:	mov	r1, r8
   13e3c:	mov	r0, r5
   13e40:	bl	1288c <__assert_fail@plt+0x1df0>
   13e44:	subs	r4, r0, #0
   13e48:	blt	13e18 <__assert_fail@plt+0x337c>
   13e4c:	mov	r8, sp
   13e50:	b	13e6c <__assert_fail@plt+0x33d0>
   13e54:	mov	r1, r4
   13e58:	mov	r2, #0
   13e5c:	mov	r0, r5
   13e60:	bl	1288c <__assert_fail@plt+0x1df0>
   13e64:	subs	r4, r0, #0
   13e68:	blt	13e18 <__assert_fail@plt+0x337c>
   13e6c:	mov	r3, r8
   13e70:	mov	r2, r7
   13e74:	mov	r1, r4
   13e78:	mov	r0, r5
   13e7c:	bl	13760 <__assert_fail@plt+0x2cc4>
   13e80:	cmp	r0, #0
   13e84:	beq	13e54 <__assert_fail@plt+0x33b8>
   13e88:	ldr	r3, [sp]
   13e8c:	cmp	r3, r6
   13e90:	bne	13e54 <__assert_fail@plt+0x33b8>
   13e94:	mov	r2, r6
   13e98:	mov	r1, sl
   13e9c:	bl	10958 <memcmp@plt>
   13ea0:	cmp	r0, #0
   13ea4:	bne	13e54 <__assert_fail@plt+0x33b8>
   13ea8:	b	13e18 <__assert_fail@plt+0x337c>
   13eac:	bl	10964 <__stack_chk_fail@plt>
   13eb0:	andeq	r2, r1, r8, ror #2
   13eb4:	muleq	r0, ip, r0
   13eb8:	sub	r3, r1, #1
   13ebc:	cmn	r3, #3
   13ec0:	push	{r4, r5, r6, lr}
   13ec4:	bhi	13f28 <__assert_fail@plt+0x348c>
   13ec8:	mov	r5, r0
   13ecc:	mov	r6, r1
   13ed0:	bl	12228 <__assert_fail@plt+0x178c>
   13ed4:	subs	r4, r0, #0
   13ed8:	beq	13ee4 <__assert_fail@plt+0x3448>
   13edc:	mov	r0, r4
   13ee0:	pop	{r4, r5, r6, pc}
   13ee4:	mov	r2, r4
   13ee8:	mvn	r1, #0
   13eec:	mov	r0, r5
   13ef0:	b	13f14 <__assert_fail@plt+0x3478>
   13ef4:	mov	r1, r4
   13ef8:	mov	r0, r5
   13efc:	bl	137a0 <__assert_fail@plt+0x2d04>
   13f00:	mov	r1, r4
   13f04:	mov	r2, #0
   13f08:	cmp	r0, r6
   13f0c:	mov	r0, r5
   13f10:	beq	13edc <__assert_fail@plt+0x3440>
   13f14:	bl	1288c <__assert_fail@plt+0x1df0>
   13f18:	subs	r4, r0, #0
   13f1c:	bge	13ef4 <__assert_fail@plt+0x3458>
   13f20:	mov	r0, r4
   13f24:	pop	{r4, r5, r6, pc}
   13f28:	mvn	r4, #5
   13f2c:	b	13edc <__assert_fail@plt+0x3440>
   13f30:	push	{r4, r5, r6, r7, r8, lr}
   13f34:	mov	r4, r0
   13f38:	mov	r0, r2
   13f3c:	mov	r5, r1
   13f40:	mov	r7, r2
   13f44:	bl	10a00 <strlen@plt>
   13f48:	cmp	r0, r5
   13f4c:	bgt	13fac <__assert_fail@plt+0x3510>
   13f50:	mov	r6, r0
   13f54:	add	r8, r0, #1
   13f58:	b	13f80 <__assert_fail@plt+0x34e4>
   13f5c:	bl	10a60 <memchr@plt>
   13f60:	cmp	r0, #0
   13f64:	sub	r4, r0, r4
   13f68:	add	r4, r4, #1
   13f6c:	sub	r5, r5, r4
   13f70:	popeq	{r4, r5, r6, r7, r8, pc}
   13f74:	cmp	r6, r5
   13f78:	add	r4, r0, #1
   13f7c:	bgt	13fac <__assert_fail@plt+0x3510>
   13f80:	mov	r2, r8
   13f84:	mov	r1, r4
   13f88:	mov	r0, r7
   13f8c:	bl	10958 <memcmp@plt>
   13f90:	mov	r1, #0
   13f94:	mov	r2, r5
   13f98:	cmp	r0, r1
   13f9c:	mov	r0, r4
   13fa0:	bne	13f5c <__assert_fail@plt+0x34c0>
   13fa4:	mov	r0, #1
   13fa8:	pop	{r4, r5, r6, r7, r8, pc}
   13fac:	mov	r0, #0
   13fb0:	pop	{r4, r5, r6, r7, r8, pc}
   13fb4:	ldr	ip, [pc, #144]	; 1404c <__assert_fail@plt+0x35b0>
   13fb8:	push	{r4, r5, r6, r7, lr}
   13fbc:	add	ip, pc, ip
   13fc0:	ldr	lr, [pc, #136]	; 14050 <__assert_fail@plt+0x35b4>
   13fc4:	sub	sp, sp, #12
   13fc8:	mov	r3, sp
   13fcc:	ldr	r7, [ip, lr]
   13fd0:	ldr	ip, [r7]
   13fd4:	str	ip, [sp, #4]
   13fd8:	bl	13760 <__assert_fail@plt+0x2cc4>
   13fdc:	subs	r4, r0, #0
   13fe0:	ldreq	r6, [sp]
   13fe4:	beq	1402c <__assert_fail@plt+0x3590>
   13fe8:	ldr	r5, [sp]
   13fec:	mov	r6, #0
   13ff0:	add	r5, r4, r5
   13ff4:	cmp	r4, r5
   13ff8:	bcc	14008 <__assert_fail@plt+0x356c>
   13ffc:	b	1402c <__assert_fail@plt+0x3590>
   14000:	add	r6, r6, #1
   14004:	bcs	1402c <__assert_fail@plt+0x3590>
   14008:	sub	r1, r5, r4
   1400c:	mov	r0, r4
   14010:	bl	10a6c <strnlen@plt>
   14014:	add	r0, r0, #1
   14018:	add	r4, r4, r0
   1401c:	cmp	r4, r5
   14020:	str	r0, [sp]
   14024:	bls	14000 <__assert_fail@plt+0x3564>
   14028:	mvn	r6, #14
   1402c:	ldr	r2, [sp, #4]
   14030:	ldr	r3, [r7]
   14034:	mov	r0, r6
   14038:	cmp	r2, r3
   1403c:	bne	14048 <__assert_fail@plt+0x35ac>
   14040:	add	sp, sp, #12
   14044:	pop	{r4, r5, r6, r7, pc}
   14048:	bl	10964 <__stack_chk_fail@plt>
   1404c:	andeq	r1, r1, r8, lsl #31
   14050:	muleq	r0, ip, r0
   14054:	ldr	ip, [pc, #212]	; 14130 <__assert_fail@plt+0x3694>
   14058:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1405c:	add	ip, pc, ip
   14060:	ldr	lr, [pc, #204]	; 14134 <__assert_fail@plt+0x3698>
   14064:	sub	sp, sp, #8
   14068:	mov	r8, r3
   1406c:	ldr	r9, [ip, lr]
   14070:	mov	r3, sp
   14074:	ldr	ip, [r9]
   14078:	str	ip, [sp, #4]
   1407c:	bl	13760 <__assert_fail@plt+0x2cc4>
   14080:	subs	r4, r0, #0
   14084:	ldreq	r7, [sp]
   14088:	beq	14100 <__assert_fail@plt+0x3664>
   1408c:	mov	r0, r8
   14090:	bl	10a00 <strlen@plt>
   14094:	ldr	r5, [sp]
   14098:	add	r5, r4, r5
   1409c:	cmp	r4, r5
   140a0:	add	sl, r0, #1
   140a4:	bcs	1411c <__assert_fail@plt+0x3680>
   140a8:	mov	r7, #0
   140ac:	b	140c0 <__assert_fail@plt+0x3624>
   140b0:	cmp	r6, r5
   140b4:	mov	r4, r6
   140b8:	add	r7, r7, #1
   140bc:	bcs	1411c <__assert_fail@plt+0x3680>
   140c0:	sub	r1, r5, r4
   140c4:	mov	r0, r4
   140c8:	bl	10a6c <strnlen@plt>
   140cc:	add	r0, r0, #1
   140d0:	add	r6, r4, r0
   140d4:	cmp	r6, r5
   140d8:	str	r0, [sp]
   140dc:	bhi	14124 <__assert_fail@plt+0x3688>
   140e0:	cmp	r0, sl
   140e4:	bne	140b0 <__assert_fail@plt+0x3614>
   140e8:	mov	r0, r4
   140ec:	mov	r2, sl
   140f0:	mov	r1, r8
   140f4:	bl	10958 <memcmp@plt>
   140f8:	cmp	r0, #0
   140fc:	bne	140b0 <__assert_fail@plt+0x3614>
   14100:	ldr	r2, [sp, #4]
   14104:	ldr	r3, [r9]
   14108:	mov	r0, r7
   1410c:	cmp	r2, r3
   14110:	bne	1412c <__assert_fail@plt+0x3690>
   14114:	add	sp, sp, #8
   14118:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1411c:	mvn	r7, #0
   14120:	b	14100 <__assert_fail@plt+0x3664>
   14124:	mvn	r7, #14
   14128:	b	14100 <__assert_fail@plt+0x3664>
   1412c:	bl	10964 <__stack_chk_fail@plt>
   14130:	andeq	r1, r1, r8, ror #29
   14134:	muleq	r0, ip, r0
   14138:	ldr	ip, [pc, #228]	; 14224 <__assert_fail@plt+0x3788>
   1413c:	push	{r4, r5, r6, r7, r8, lr}
   14140:	add	ip, pc, ip
   14144:	ldr	lr, [pc, #220]	; 14228 <__assert_fail@plt+0x378c>
   14148:	sub	sp, sp, #8
   1414c:	mov	r6, r3
   14150:	ldr	r7, [ip, lr]
   14154:	mov	r3, sp
   14158:	ldr	r8, [sp, #32]
   1415c:	ldr	ip, [r7]
   14160:	str	ip, [sp, #4]
   14164:	bl	13760 <__assert_fail@plt+0x2cc4>
   14168:	subs	r4, r0, #0
   1416c:	beq	1420c <__assert_fail@plt+0x3770>
   14170:	ldr	r5, [sp]
   14174:	add	r5, r4, r5
   14178:	cmp	r4, r5
   1417c:	bcc	1419c <__assert_fail@plt+0x3700>
   14180:	b	141e8 <__assert_fail@plt+0x374c>
   14184:	cmp	r6, #0
   14188:	beq	14200 <__assert_fail@plt+0x3764>
   1418c:	cmp	r2, r5
   14190:	mov	r4, r2
   14194:	sub	r6, r6, #1
   14198:	bcs	141e8 <__assert_fail@plt+0x374c>
   1419c:	sub	r1, r5, r4
   141a0:	mov	r0, r4
   141a4:	bl	10a6c <strnlen@plt>
   141a8:	add	r3, r0, #1
   141ac:	add	r2, r4, r3
   141b0:	cmp	r2, r5
   141b4:	str	r3, [sp]
   141b8:	bls	14184 <__assert_fail@plt+0x36e8>
   141bc:	cmp	r8, #0
   141c0:	mvnne	r3, #14
   141c4:	strne	r3, [r8]
   141c8:	mov	r4, #0
   141cc:	ldr	r2, [sp, #4]
   141d0:	ldr	r3, [r7]
   141d4:	mov	r0, r4
   141d8:	cmp	r2, r3
   141dc:	bne	14220 <__assert_fail@plt+0x3784>
   141e0:	add	sp, sp, #8
   141e4:	pop	{r4, r5, r6, r7, r8, pc}
   141e8:	cmp	r8, #0
   141ec:	beq	141c8 <__assert_fail@plt+0x372c>
   141f0:	mvn	r3, #0
   141f4:	mov	r4, #0
   141f8:	str	r3, [r8]
   141fc:	b	141cc <__assert_fail@plt+0x3730>
   14200:	cmp	r8, #0
   14204:	strne	r0, [r8]
   14208:	b	141cc <__assert_fail@plt+0x3730>
   1420c:	cmp	r8, #0
   14210:	beq	141c8 <__assert_fail@plt+0x372c>
   14214:	ldr	r3, [sp]
   14218:	str	r3, [r8]
   1421c:	b	141cc <__assert_fail@plt+0x3730>
   14220:	bl	10964 <__stack_chk_fail@plt>
   14224:	andeq	r1, r1, r4, lsl #28
   14228:	muleq	r0, ip, r0
   1422c:	ldr	ip, [pc, #104]	; 1429c <__assert_fail@plt+0x3800>
   14230:	push	{r4, r5, lr}
   14234:	add	ip, pc, ip
   14238:	ldr	lr, [pc, #96]	; 142a0 <__assert_fail@plt+0x3804>
   1423c:	mov	r5, r2
   14240:	ldr	r2, [pc, #92]	; 142a4 <__assert_fail@plt+0x3808>
   14244:	ldr	r4, [ip, lr]
   14248:	sub	sp, sp, #12
   1424c:	mov	r3, sp
   14250:	ldr	ip, [r4]
   14254:	add	r2, pc, r2
   14258:	str	ip, [sp, #4]
   1425c:	bl	13760 <__assert_fail@plt+0x2cc4>
   14260:	cmp	r0, #0
   14264:	ldreq	r0, [sp]
   14268:	beq	14280 <__assert_fail@plt+0x37e4>
   1426c:	mov	r2, r5
   14270:	ldr	r1, [sp]
   14274:	bl	13f30 <__assert_fail@plt+0x3494>
   14278:	clz	r0, r0
   1427c:	lsr	r0, r0, #5
   14280:	ldr	r2, [sp, #4]
   14284:	ldr	r3, [r4]
   14288:	cmp	r2, r3
   1428c:	bne	14298 <__assert_fail@plt+0x37fc>
   14290:	add	sp, sp, #12
   14294:	pop	{r4, r5, pc}
   14298:	bl	10964 <__stack_chk_fail@plt>
   1429c:	andeq	r1, r1, r0, lsl sp
   142a0:	muleq	r0, ip, r0
   142a4:	andeq	r0, r0, r8, lsr #21
   142a8:	push	{r4, r5, r6, lr}
   142ac:	mov	r4, r1
   142b0:	mov	r6, r2
   142b4:	mov	r5, r0
   142b8:	bl	12228 <__assert_fail@plt+0x178c>
   142bc:	subs	r3, r0, #0
   142c0:	beq	142cc <__assert_fail@plt+0x3830>
   142c4:	mov	r0, r3
   142c8:	pop	{r4, r5, r6, pc}
   142cc:	mov	r2, r3
   142d0:	mov	r1, r4
   142d4:	mov	r0, r5
   142d8:	b	1430c <__assert_fail@plt+0x3870>
   142dc:	mov	r2, r6
   142e0:	mov	r1, r4
   142e4:	mov	r0, r5
   142e8:	bl	1422c <__assert_fail@plt+0x3790>
   142ec:	mov	r1, r4
   142f0:	mov	r2, #0
   142f4:	mov	r3, r0
   142f8:	cmn	r3, #1
   142fc:	mov	r0, r5
   14300:	blt	142c4 <__assert_fail@plt+0x3828>
   14304:	cmp	r3, r2
   14308:	beq	14318 <__assert_fail@plt+0x387c>
   1430c:	bl	1288c <__assert_fail@plt+0x1df0>
   14310:	subs	r4, r0, #0
   14314:	bge	142dc <__assert_fail@plt+0x3840>
   14318:	mov	r3, r4
   1431c:	mov	r0, r3
   14320:	pop	{r4, r5, r6, pc}
   14324:	ldr	r3, [pc, #380]	; 144a8 <__assert_fail@plt+0x3a0c>
   14328:	ldr	r2, [pc, #380]	; 144ac <__assert_fail@plt+0x3a10>
   1432c:	add	r3, pc, r3
   14330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14334:	sub	sp, sp, #20
   14338:	ldr	r5, [r3, r2]
   1433c:	cmp	r1, #27
   14340:	mov	r2, #0
   14344:	ldr	r3, [r5]
   14348:	str	r2, [sp, #4]
   1434c:	str	r3, [sp, #12]
   14350:	bls	1448c <__assert_fail@plt+0x39f0>
   14354:	mov	r7, r1
   14358:	mov	r6, r0
   1435c:	bl	1233c <__assert_fail@plt+0x18a0>
   14360:	cmp	r0, #0
   14364:	mov	r4, r0
   14368:	str	r0, [sp]
   1436c:	bne	143b0 <__assert_fail@plt+0x3914>
   14370:	ldr	r3, [r6, #4]
   14374:	lsr	r2, r3, #24
   14378:	lsl	r1, r3, #8
   1437c:	orr	r2, r2, r3, lsl #24
   14380:	and	r1, r1, #16711680	; 0xff0000
   14384:	lsr	r3, r3, #8
   14388:	orr	r2, r2, r1
   1438c:	and	r3, r3, #65280	; 0xff00
   14390:	orr	r3, r2, r3
   14394:	cmp	r7, r3
   14398:	bcc	1448c <__assert_fail@plt+0x39f0>
   1439c:	mov	r0, r6
   143a0:	bl	13000 <__assert_fail@plt+0x2564>
   143a4:	cmp	r0, #0
   143a8:	movlt	r4, r0
   143ac:	bge	143cc <__assert_fail@plt+0x3930>
   143b0:	ldr	r2, [sp, #12]
   143b4:	ldr	r3, [r5]
   143b8:	mov	r0, r4
   143bc:	cmp	r2, r3
   143c0:	bne	144a4 <__assert_fail@plt+0x3a08>
   143c4:	add	sp, sp, #20
   143c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143cc:	ldr	fp, [sp, #4]
   143d0:	mov	r7, r4
   143d4:	add	r8, sp, #4
   143d8:	mov	sl, sp
   143dc:	add	r9, sp, #8
   143e0:	mov	r2, r8
   143e4:	mov	r1, fp
   143e8:	mov	r0, r6
   143ec:	bl	12694 <__assert_fail@plt+0x1bf8>
   143f0:	ldr	r3, [sp, #4]
   143f4:	cmp	r3, #0
   143f8:	blt	14494 <__assert_fail@plt+0x39f8>
   143fc:	sub	r0, r0, #1
   14400:	cmp	r0, #8
   14404:	addls	pc, pc, r0, lsl #2
   14408:	b	14484 <__assert_fail@plt+0x39e8>
   1440c:	b	14474 <__assert_fail@plt+0x39d8>
   14410:	b	14430 <__assert_fail@plt+0x3994>
   14414:	b	14450 <__assert_fail@plt+0x39b4>
   14418:	b	1443c <__assert_fail@plt+0x39a0>
   1441c:	b	14484 <__assert_fail@plt+0x39e8>
   14420:	b	14484 <__assert_fail@plt+0x39e8>
   14424:	b	14484 <__assert_fail@plt+0x39e8>
   14428:	b	14484 <__assert_fail@plt+0x39e8>
   1442c:	b	14444 <__assert_fail@plt+0x39a8>
   14430:	cmp	r7, #0
   14434:	beq	1447c <__assert_fail@plt+0x39e0>
   14438:	sub	r7, r7, #1
   1443c:	mov	fp, r3
   14440:	b	143e0 <__assert_fail@plt+0x3944>
   14444:	cmp	r7, #0
   14448:	mvnne	r4, #10
   1444c:	b	143b0 <__assert_fail@plt+0x3914>
   14450:	mov	r1, fp
   14454:	mov	r3, sl
   14458:	mov	r2, r9
   1445c:	mov	r0, r6
   14460:	bl	1362c <__assert_fail@plt+0x2b90>
   14464:	cmp	r0, #0
   14468:	beq	1449c <__assert_fail@plt+0x3a00>
   1446c:	ldr	r3, [sp, #4]
   14470:	b	1443c <__assert_fail@plt+0x39a0>
   14474:	adds	r7, r7, #1
   14478:	bpl	1443c <__assert_fail@plt+0x39a0>
   1447c:	mvn	r4, #10
   14480:	b	143b0 <__assert_fail@plt+0x3914>
   14484:	mvn	r4, #12
   14488:	b	143b0 <__assert_fail@plt+0x3914>
   1448c:	mvn	r4, #7
   14490:	b	143b0 <__assert_fail@plt+0x3914>
   14494:	mov	r4, r3
   14498:	b	143b0 <__assert_fail@plt+0x3914>
   1449c:	ldr	r4, [sp]
   144a0:	b	143b0 <__assert_fail@plt+0x3914>
   144a4:	bl	10964 <__stack_chk_fail@plt>
   144a8:	andeq	r1, r1, r8, lsl ip
   144ac:	muleq	r0, ip, r0
   144b0:	cmp	r0, #0
   144b4:	bgt	144e8 <__assert_fail@plt+0x3a4c>
   144b8:	beq	144f4 <__assert_fail@plt+0x3a58>
   144bc:	cmn	r0, #18
   144c0:	bls	14500 <__assert_fail@plt+0x3a64>
   144c4:	ldr	r3, [pc, #64]	; 1450c <__assert_fail@plt+0x3a70>
   144c8:	rsb	r0, r0, #0
   144cc:	add	r3, pc, r3
   144d0:	ldr	r0, [r3, r0, lsl #2]
   144d4:	cmp	r0, #0
   144d8:	bxne	lr
   144dc:	ldr	r0, [pc, #44]	; 14510 <__assert_fail@plt+0x3a74>
   144e0:	add	r0, pc, r0
   144e4:	bx	lr
   144e8:	ldr	r0, [pc, #36]	; 14514 <__assert_fail@plt+0x3a78>
   144ec:	add	r0, pc, r0
   144f0:	bx	lr
   144f4:	ldr	r0, [pc, #28]	; 14518 <__assert_fail@plt+0x3a7c>
   144f8:	add	r0, pc, r0
   144fc:	bx	lr
   14500:	ldr	r0, [pc, #20]	; 1451c <__assert_fail@plt+0x3a80>
   14504:	add	r0, pc, r0
   14508:	bx	lr
   1450c:	andeq	r1, r1, r0, lsr r9
   14510:	andeq	r0, r0, r8, lsr #16
   14514:	andeq	r0, r0, r8, lsr r8
   14518:	andeq	r0, r0, r0, lsr #16
   1451c:	andeq	r0, r0, r4, lsl #16
   14520:	cmp	r1, #0
   14524:	beq	14730 <__assert_fail@plt+0x3c94>
   14528:	eor	ip, r0, r1
   1452c:	rsbmi	r1, r1, #0
   14530:	subs	r2, r1, #1
   14534:	beq	146fc <__assert_fail@plt+0x3c60>
   14538:	movs	r3, r0
   1453c:	rsbmi	r3, r0, #0
   14540:	cmp	r3, r1
   14544:	bls	14708 <__assert_fail@plt+0x3c6c>
   14548:	tst	r1, r2
   1454c:	beq	14718 <__assert_fail@plt+0x3c7c>
   14550:	clz	r2, r3
   14554:	clz	r0, r1
   14558:	sub	r2, r0, r2
   1455c:	rsbs	r2, r2, #31
   14560:	addne	r2, r2, r2, lsl #1
   14564:	mov	r0, #0
   14568:	addne	pc, pc, r2, lsl #2
   1456c:	nop			; (mov r0, r0)
   14570:	cmp	r3, r1, lsl #31
   14574:	adc	r0, r0, r0
   14578:	subcs	r3, r3, r1, lsl #31
   1457c:	cmp	r3, r1, lsl #30
   14580:	adc	r0, r0, r0
   14584:	subcs	r3, r3, r1, lsl #30
   14588:	cmp	r3, r1, lsl #29
   1458c:	adc	r0, r0, r0
   14590:	subcs	r3, r3, r1, lsl #29
   14594:	cmp	r3, r1, lsl #28
   14598:	adc	r0, r0, r0
   1459c:	subcs	r3, r3, r1, lsl #28
   145a0:	cmp	r3, r1, lsl #27
   145a4:	adc	r0, r0, r0
   145a8:	subcs	r3, r3, r1, lsl #27
   145ac:	cmp	r3, r1, lsl #26
   145b0:	adc	r0, r0, r0
   145b4:	subcs	r3, r3, r1, lsl #26
   145b8:	cmp	r3, r1, lsl #25
   145bc:	adc	r0, r0, r0
   145c0:	subcs	r3, r3, r1, lsl #25
   145c4:	cmp	r3, r1, lsl #24
   145c8:	adc	r0, r0, r0
   145cc:	subcs	r3, r3, r1, lsl #24
   145d0:	cmp	r3, r1, lsl #23
   145d4:	adc	r0, r0, r0
   145d8:	subcs	r3, r3, r1, lsl #23
   145dc:	cmp	r3, r1, lsl #22
   145e0:	adc	r0, r0, r0
   145e4:	subcs	r3, r3, r1, lsl #22
   145e8:	cmp	r3, r1, lsl #21
   145ec:	adc	r0, r0, r0
   145f0:	subcs	r3, r3, r1, lsl #21
   145f4:	cmp	r3, r1, lsl #20
   145f8:	adc	r0, r0, r0
   145fc:	subcs	r3, r3, r1, lsl #20
   14600:	cmp	r3, r1, lsl #19
   14604:	adc	r0, r0, r0
   14608:	subcs	r3, r3, r1, lsl #19
   1460c:	cmp	r3, r1, lsl #18
   14610:	adc	r0, r0, r0
   14614:	subcs	r3, r3, r1, lsl #18
   14618:	cmp	r3, r1, lsl #17
   1461c:	adc	r0, r0, r0
   14620:	subcs	r3, r3, r1, lsl #17
   14624:	cmp	r3, r1, lsl #16
   14628:	adc	r0, r0, r0
   1462c:	subcs	r3, r3, r1, lsl #16
   14630:	cmp	r3, r1, lsl #15
   14634:	adc	r0, r0, r0
   14638:	subcs	r3, r3, r1, lsl #15
   1463c:	cmp	r3, r1, lsl #14
   14640:	adc	r0, r0, r0
   14644:	subcs	r3, r3, r1, lsl #14
   14648:	cmp	r3, r1, lsl #13
   1464c:	adc	r0, r0, r0
   14650:	subcs	r3, r3, r1, lsl #13
   14654:	cmp	r3, r1, lsl #12
   14658:	adc	r0, r0, r0
   1465c:	subcs	r3, r3, r1, lsl #12
   14660:	cmp	r3, r1, lsl #11
   14664:	adc	r0, r0, r0
   14668:	subcs	r3, r3, r1, lsl #11
   1466c:	cmp	r3, r1, lsl #10
   14670:	adc	r0, r0, r0
   14674:	subcs	r3, r3, r1, lsl #10
   14678:	cmp	r3, r1, lsl #9
   1467c:	adc	r0, r0, r0
   14680:	subcs	r3, r3, r1, lsl #9
   14684:	cmp	r3, r1, lsl #8
   14688:	adc	r0, r0, r0
   1468c:	subcs	r3, r3, r1, lsl #8
   14690:	cmp	r3, r1, lsl #7
   14694:	adc	r0, r0, r0
   14698:	subcs	r3, r3, r1, lsl #7
   1469c:	cmp	r3, r1, lsl #6
   146a0:	adc	r0, r0, r0
   146a4:	subcs	r3, r3, r1, lsl #6
   146a8:	cmp	r3, r1, lsl #5
   146ac:	adc	r0, r0, r0
   146b0:	subcs	r3, r3, r1, lsl #5
   146b4:	cmp	r3, r1, lsl #4
   146b8:	adc	r0, r0, r0
   146bc:	subcs	r3, r3, r1, lsl #4
   146c0:	cmp	r3, r1, lsl #3
   146c4:	adc	r0, r0, r0
   146c8:	subcs	r3, r3, r1, lsl #3
   146cc:	cmp	r3, r1, lsl #2
   146d0:	adc	r0, r0, r0
   146d4:	subcs	r3, r3, r1, lsl #2
   146d8:	cmp	r3, r1, lsl #1
   146dc:	adc	r0, r0, r0
   146e0:	subcs	r3, r3, r1, lsl #1
   146e4:	cmp	r3, r1
   146e8:	adc	r0, r0, r0
   146ec:	subcs	r3, r3, r1
   146f0:	cmp	ip, #0
   146f4:	rsbmi	r0, r0, #0
   146f8:	bx	lr
   146fc:	teq	ip, r0
   14700:	rsbmi	r0, r0, #0
   14704:	bx	lr
   14708:	movcc	r0, #0
   1470c:	asreq	r0, ip, #31
   14710:	orreq	r0, r0, #1
   14714:	bx	lr
   14718:	clz	r2, r1
   1471c:	rsb	r2, r2, #31
   14720:	cmp	ip, #0
   14724:	lsr	r0, r3, r2
   14728:	rsbmi	r0, r0, #0
   1472c:	bx	lr
   14730:	cmp	r0, #0
   14734:	mvngt	r0, #-2147483648	; 0x80000000
   14738:	movlt	r0, #-2147483648	; 0x80000000
   1473c:	b	14760 <__assert_fail@plt+0x3cc4>
   14740:	cmp	r1, #0
   14744:	beq	14730 <__assert_fail@plt+0x3c94>
   14748:	push	{r0, r1, lr}
   1474c:	bl	14528 <__assert_fail@plt+0x3a8c>
   14750:	pop	{r1, r2, lr}
   14754:	mul	r3, r2, r0
   14758:	sub	r1, r1, r3
   1475c:	bx	lr
   14760:	push	{r1, lr}
   14764:	mov	r0, #8
   14768:	bl	108f8 <raise@plt>
   1476c:	pop	{r1, pc}
   14770:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14774:	mov	r7, r0
   14778:	ldr	r6, [pc, #72]	; 147c8 <__assert_fail@plt+0x3d2c>
   1477c:	ldr	r5, [pc, #72]	; 147cc <__assert_fail@plt+0x3d30>
   14780:	add	r6, pc, r6
   14784:	add	r5, pc, r5
   14788:	sub	r6, r6, r5
   1478c:	mov	r8, r1
   14790:	mov	r9, r2
   14794:	bl	108d8 <raise@plt-0x20>
   14798:	asrs	r6, r6, #2
   1479c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   147a0:	mov	r4, #0
   147a4:	add	r4, r4, #1
   147a8:	ldr	r3, [r5], #4
   147ac:	mov	r2, r9
   147b0:	mov	r1, r8
   147b4:	mov	r0, r7
   147b8:	blx	r3
   147bc:	cmp	r6, r4
   147c0:	bne	147a4 <__assert_fail@plt+0x3d08>
   147c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   147c8:	andeq	r1, r1, ip, ror #11
   147cc:	andeq	r1, r1, r4, ror #11
   147d0:	bx	lr

Disassembly of section .fini:

000147d4 <.fini>:
   147d4:	push	{r3, lr}
   147d8:	pop	{r3, pc}
