
raspbian-preinstalled/bc:     file format elf32-littlearm


Disassembly of section .init:

00010d50 <_init@@Base>:
   10d50:	push	{r3, lr}
   10d54:	bl	1127c <__assert_fail@plt+0x2c0>
   10d58:	pop	{r3, pc}

Disassembly of section .plt:

00010d5c <calloc@plt-0x14>:
   10d5c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d60:	ldr	lr, [pc, #4]	; 10d6c <_init@@Base+0x1c>
   10d64:	add	lr, pc, lr
   10d68:	ldr	pc, [lr, #8]!
   10d6c:			; <UNDEFINED> instruction: 0x000201b8

00010d70 <calloc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #32, 20	; 0x20000
   10d78:	ldr	pc, [ip, #440]!	; 0x1b8

00010d7c <raise@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #32, 20	; 0x20000
   10d84:	ldr	pc, [ip, #432]!	; 0x1b0

00010d88 <stifle_history@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #32, 20	; 0x20000
   10d90:	ldr	pc, [ip, #424]!	; 0x1a8

00010d94 <strcmp@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #32, 20	; 0x20000
   10d9c:	ldr	pc, [ip, #416]!	; 0x1a0

00010da0 <strtol@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #32, 20	; 0x20000
   10da8:	ldr	pc, [ip, #408]!	; 0x198

00010dac <fopen@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #32, 20	; 0x20000
   10db4:	ldr	pc, [ip, #400]!	; 0x190

00010db8 <read@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #32, 20	; 0x20000
   10dc0:	ldr	pc, [ip, #392]!	; 0x188

00010dc4 <fflush@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #32, 20	; 0x20000
   10dcc:	ldr	pc, [ip, #384]!	; 0x180

00010dd0 <free@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #32, 20	; 0x20000
   10dd8:	ldr	pc, [ip, #376]!	; 0x178

00010ddc <add_history@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #32, 20	; 0x20000
   10de4:	ldr	pc, [ip, #368]!	; 0x170

00010de8 <ferror@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #32, 20	; 0x20000
   10df0:	ldr	pc, [ip, #360]!	; 0x168

00010df4 <memcpy@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #32, 20	; 0x20000
   10dfc:	ldr	pc, [ip, #352]!	; 0x160

00010e00 <signal@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #32, 20	; 0x20000
   10e08:	ldr	pc, [ip, #344]!	; 0x158

00010e0c <_IO_getc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #32, 20	; 0x20000
   10e14:	ldr	pc, [ip, #336]!	; 0x150

00010e18 <strdup@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #32, 20	; 0x20000
   10e20:	ldr	pc, [ip, #328]!	; 0x148

00010e24 <__stack_chk_fail@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #32, 20	; 0x20000
   10e2c:	ldr	pc, [ip, #320]!	; 0x140

00010e30 <realloc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #32, 20	; 0x20000
   10e38:	ldr	pc, [ip, #312]!	; 0x138

00010e3c <perror@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #32, 20	; 0x20000
   10e44:	ldr	pc, [ip, #304]!	; 0x130

00010e48 <_IO_putc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #32, 20	; 0x20000
   10e50:	ldr	pc, [ip, #296]!	; 0x128

00010e54 <fwrite@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #32, 20	; 0x20000
   10e5c:	ldr	pc, [ip, #288]!	; 0x120

00010e60 <readline@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #32, 20	; 0x20000
   10e68:	ldr	pc, [ip, #280]!	; 0x118

00010e6c <strcat@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #32, 20	; 0x20000
   10e74:	ldr	pc, [ip, #272]!	; 0x110

00010e78 <getenv@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #32, 20	; 0x20000
   10e80:	ldr	pc, [ip, #264]!	; 0x108

00010e84 <puts@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #32, 20	; 0x20000
   10e8c:	ldr	pc, [ip, #256]!	; 0x100

00010e90 <malloc@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #32, 20	; 0x20000
   10e98:	ldr	pc, [ip, #248]!	; 0xf8

00010e9c <__libc_start_main@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #32, 20	; 0x20000
   10ea4:	ldr	pc, [ip, #240]!	; 0xf0

00010ea8 <__vfprintf_chk@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #32, 20	; 0x20000
   10eb0:	ldr	pc, [ip, #232]!	; 0xe8

00010eb4 <__gmon_start__@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #32, 20	; 0x20000
   10ebc:	ldr	pc, [ip, #224]!	; 0xe0

00010ec0 <getopt_long@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #32, 20	; 0x20000
   10ec8:	ldr	pc, [ip, #216]!	; 0xd8

00010ecc <__ctype_b_loc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #32, 20	; 0x20000
   10ed4:	ldr	pc, [ip, #208]!	; 0xd0

00010ed8 <exit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #32, 20	; 0x20000
   10ee0:	ldr	pc, [ip, #200]!	; 0xc8

00010ee4 <strlen@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #32, 20	; 0x20000
   10eec:	ldr	pc, [ip, #192]!	; 0xc0

00010ef0 <using_history@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #32, 20	; 0x20000
   10ef8:	ldr	pc, [ip, #184]!	; 0xb8

00010efc <__errno_location@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #32, 20	; 0x20000
   10f04:	ldr	pc, [ip, #176]!	; 0xb0

00010f08 <setvbuf@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #32, 20	; 0x20000
   10f10:	ldr	pc, [ip, #168]!	; 0xa8

00010f14 <memset@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #32, 20	; 0x20000
   10f1c:	ldr	pc, [ip, #160]!	; 0xa0

00010f20 <putchar@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #32, 20	; 0x20000
   10f28:	ldr	pc, [ip, #152]!	; 0x98

00010f2c <strncpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #32, 20	; 0x20000
   10f34:	ldr	pc, [ip, #144]!	; 0x90

00010f38 <__printf_chk@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #32, 20	; 0x20000
   10f40:	ldr	pc, [ip, #136]!	; 0x88

00010f44 <write@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #32, 20	; 0x20000
   10f4c:	ldr	pc, [ip, #128]!	; 0x80

00010f50 <fileno@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #32, 20	; 0x20000
   10f58:	ldr	pc, [ip, #120]!	; 0x78

00010f5c <__fprintf_chk@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #32, 20	; 0x20000
   10f64:	ldr	pc, [ip, #112]!	; 0x70

00010f68 <fclose@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #32, 20	; 0x20000
   10f70:	ldr	pc, [ip, #104]!	; 0x68

00010f74 <fputc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #32, 20	; 0x20000
   10f7c:	ldr	pc, [ip, #96]!	; 0x60

00010f80 <unstifle_history@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #32, 20	; 0x20000
   10f88:	ldr	pc, [ip, #88]!	; 0x58

00010f8c <random@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #32, 20	; 0x20000
   10f94:	ldr	pc, [ip, #80]!	; 0x50

00010f98 <isatty@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #32, 20	; 0x20000
   10fa0:	ldr	pc, [ip, #72]!	; 0x48

00010fa4 <abort@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #32, 20	; 0x20000
   10fac:	ldr	pc, [ip, #64]!	; 0x40

00010fb0 <__snprintf_chk@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #32, 20	; 0x20000
   10fb8:	ldr	pc, [ip, #56]!	; 0x38

00010fbc <__assert_fail@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #32, 20	; 0x20000
   10fc4:	ldr	pc, [ip, #48]!	; 0x30

Disassembly of section .text:

00010fc8 <.text>:
   10fc8:	push	{r4, r5, r6, r7, r8, lr}
   10fcc:	sub	sp, sp, #128	; 0x80
   10fd0:	ldr	r6, [pc, #548]	; 111fc <__assert_fail@plt+0x240>
   10fd4:	mov	r7, r0
   10fd8:	mov	r0, #0
   10fdc:	ldr	r3, [r6]
   10fe0:	mov	r8, r1
   10fe4:	str	r3, [sp, #124]	; 0x7c
   10fe8:	bl	10f98 <isatty@plt>
   10fec:	cmp	r0, #0
   10ff0:	bne	111d0 <__assert_fail@plt+0x214>
   10ff4:	ldr	r5, [pc, #516]	; 11200 <__assert_fail@plt+0x244>
   10ff8:	ldr	r2, [pc, #516]	; 11204 <__assert_fail@plt+0x248>
   10ffc:	mov	r3, #0
   11000:	mov	r1, r3
   11004:	ldr	r0, [r2]
   11008:	mov	r2, #1
   1100c:	bl	10f08 <setvbuf@plt>
   11010:	ldr	r0, [pc, #496]	; 11208 <__assert_fail@plt+0x24c>
   11014:	bl	10e78 <getenv@plt>
   11018:	subs	r4, r0, #0
   1101c:	beq	11094 <__assert_fail@plt+0xd8>
   11020:	ldr	r0, [pc, #480]	; 11208 <__assert_fail@plt+0x24c>
   11024:	bl	10e18 <strdup@plt>
   11028:	mov	r2, #1
   1102c:	mov	r1, #0
   11030:	str	r0, [sp, #4]
   11034:	ldrb	r3, [r4]
   11038:	cmp	r3, #0
   1103c:	beq	11088 <__assert_fail@plt+0xcc>
   11040:	cmp	r3, #32
   11044:	addeq	r4, r4, #1
   11048:	beq	11034 <__assert_fail@plt+0x78>
   1104c:	add	r3, sp, #128	; 0x80
   11050:	add	r3, r3, r2, lsl #2
   11054:	add	r2, r2, #1
   11058:	str	r4, [r3, #-124]	; 0xffffff84
   1105c:	ldrb	r3, [r4]
   11060:	tst	r3, #223	; 0xdf
   11064:	beq	11074 <__assert_fail@plt+0xb8>
   11068:	ldrb	r3, [r4, #1]!
   1106c:	tst	r3, #223	; 0xdf
   11070:	bne	11068 <__assert_fail@plt+0xac>
   11074:	cmp	r3, #0
   11078:	strbne	r1, [r4], #1
   1107c:	ldrb	r3, [r4]
   11080:	cmp	r3, #0
   11084:	bne	11040 <__assert_fail@plt+0x84>
   11088:	mov	r0, r2
   1108c:	add	r1, sp, #4
   11090:	bl	1139c <__assert_fail@plt+0x3e0>
   11094:	mov	r1, r8
   11098:	mov	r0, r7
   1109c:	bl	1139c <__assert_fail@plt+0x3e0>
   110a0:	ldr	r0, [pc, #356]	; 1120c <__assert_fail@plt+0x250>
   110a4:	bl	10e78 <getenv@plt>
   110a8:	cmp	r0, #0
   110ac:	movne	r2, #1
   110b0:	ldrne	r3, [pc, #344]	; 11210 <__assert_fail@plt+0x254>
   110b4:	ldr	r0, [pc, #344]	; 11214 <__assert_fail@plt+0x258>
   110b8:	strne	r2, [r3]
   110bc:	bl	10e78 <getenv@plt>
   110c0:	cmp	r0, #0
   110c4:	ldreq	r3, [pc, #332]	; 11218 <__assert_fail@plt+0x25c>
   110c8:	beq	11190 <__assert_fail@plt+0x1d4>
   110cc:	mov	r2, #10
   110d0:	mov	r1, #0
   110d4:	bl	10da0 <strtol@plt>
   110d8:	ldr	r3, [pc, #312]	; 11218 <__assert_fail@plt+0x25c>
   110dc:	cmp	r0, #2
   110e0:	movgt	r2, #0
   110e4:	movle	r2, #1
   110e8:	cmp	r0, #0
   110ec:	moveq	r2, #0
   110f0:	cmp	r2, #0
   110f4:	str	r0, [r3]
   110f8:	bne	11190 <__assert_fail@plt+0x1d4>
   110fc:	bl	16cbc <__assert_fail@plt+0x5d00>
   11100:	bl	15ff0 <__assert_fail@plt+0x5034>
   11104:	ldrb	r3, [r5]
   11108:	cmp	r3, #0
   1110c:	bne	111c0 <__assert_fail@plt+0x204>
   11110:	bl	18188 <__assert_fail@plt+0x71cc>
   11114:	bl	18560 <__assert_fail@plt+0x75a4>
   11118:	ldr	r1, [pc, #252]	; 1121c <__assert_fail@plt+0x260>
   1111c:	ldr	r2, [pc, #252]	; 11220 <__assert_fail@plt+0x264>
   11120:	ldr	r3, [pc, #252]	; 11224 <__assert_fail@plt+0x268>
   11124:	mov	r0, #0
   11128:	mov	r4, #1
   1112c:	strb	r0, [r1]
   11130:	strb	r4, [r2, #4]
   11134:	str	r4, [r3]
   11138:	bl	115b8 <__assert_fail@plt+0x5fc>
   1113c:	cmp	r0, #0
   11140:	beq	111ec <__assert_fail@plt+0x230>
   11144:	ldrb	r3, [r5]
   11148:	cmp	r3, #0
   1114c:	bne	1119c <__assert_fail@plt+0x1e0>
   11150:	bl	117fc <__assert_fail@plt+0x840>
   11154:	ldr	r3, [pc, #204]	; 11228 <__assert_fail@plt+0x26c>
   11158:	ldr	r3, [r3]
   1115c:	cmp	r3, #0
   11160:	beq	1116c <__assert_fail@plt+0x1b0>
   11164:	mov	r0, #10
   11168:	bl	10f20 <putchar@plt>
   1116c:	mov	r0, #0
   11170:	bl	18e70 <__assert_fail@plt+0x7eb4>
   11174:	ldr	r2, [sp, #124]	; 0x7c
   11178:	ldr	r3, [r6]
   1117c:	mov	r0, #0
   11180:	cmp	r2, r3
   11184:	bne	111f8 <__assert_fail@plt+0x23c>
   11188:	add	sp, sp, #128	; 0x80
   1118c:	pop	{r4, r5, r6, r7, r8, pc}
   11190:	mov	r2, #70	; 0x46
   11194:	str	r2, [r3]
   11198:	b	110fc <__assert_fail@plt+0x140>
   1119c:	ldr	r2, [pc, #136]	; 1122c <__assert_fail@plt+0x270>
   111a0:	ldr	r1, [pc, #136]	; 11230 <__assert_fail@plt+0x274>
   111a4:	ldr	r3, [pc, #136]	; 11234 <__assert_fail@plt+0x278>
   111a8:	ldr	r0, [r2]
   111ac:	ldr	r2, [pc, #132]	; 11238 <__assert_fail@plt+0x27c>
   111b0:	str	r0, [r1]
   111b4:	str	r2, [r3]
   111b8:	bl	10ef0 <using_history@plt>
   111bc:	b	11150 <__assert_fail@plt+0x194>
   111c0:	ldr	r1, [pc, #116]	; 1123c <__assert_fail@plt+0x280>
   111c4:	mov	r0, #2
   111c8:	bl	10e00 <signal@plt>
   111cc:	b	11110 <__assert_fail@plt+0x154>
   111d0:	mov	r0, #1
   111d4:	bl	10f98 <isatty@plt>
   111d8:	ldr	r5, [pc, #32]	; 11200 <__assert_fail@plt+0x244>
   111dc:	cmp	r0, #0
   111e0:	movne	r3, #1
   111e4:	strbne	r3, [r5]
   111e8:	b	10ff8 <__assert_fail@plt+0x3c>
   111ec:	mov	r0, r4
   111f0:	bl	18e70 <__assert_fail@plt+0x7eb4>
   111f4:	b	11144 <__assert_fail@plt+0x188>
   111f8:	bl	10e24 <__stack_chk_fail@plt>
   111fc:	andeq	r0, r3, r0, lsl lr
   11200:	strdeq	r1, [r3], -ip
   11204:	andeq	r1, r3, r0, lsl #3
   11208:	andeq	ip, r1, r4, lsr r7
   1120c:	andeq	ip, r1, r0, asr #14
   11210:	andeq	r1, r3, ip, ror #3
   11214:	andeq	ip, r1, r0, asr r7
   11218:	andeq	r1, r3, r4, lsl #5
   1121c:	andeq	r1, r3, r0, ror #4
   11220:	andeq	r1, r3, r8, lsl #3
   11224:	andeq	r1, r3, r0, lsr #5
   11228:	strdeq	r1, [r3], -r8
   1122c:	andeq	r1, r3, r8, ror r1
   11230:	andeq	r1, r3, r0, ror r1
   11234:	andeq	r1, r3, ip, ror r1
   11238:	andeq	ip, r1, r0, ror #14
   1123c:	andeq	r1, r1, ip, ror r5
   11240:	mov	fp, #0
   11244:	mov	lr, #0
   11248:	pop	{r1}		; (ldr r1, [sp], #4)
   1124c:	mov	r2, sp
   11250:	push	{r2}		; (str r2, [sp, #-4]!)
   11254:	push	{r0}		; (str r0, [sp, #-4]!)
   11258:	ldr	ip, [pc, #16]	; 11270 <__assert_fail@plt+0x2b4>
   1125c:	push	{ip}		; (str ip, [sp, #-4]!)
   11260:	ldr	r0, [pc, #12]	; 11274 <__assert_fail@plt+0x2b8>
   11264:	ldr	r3, [pc, #12]	; 11278 <__assert_fail@plt+0x2bc>
   11268:	bl	10e9c <__libc_start_main@plt>
   1126c:	bl	10fa4 <abort@plt>
   11270:	andeq	ip, r1, ip, lsl r5
   11274:	andeq	r0, r1, r8, asr #31
   11278:			; <UNDEFINED> instruction: 0x0001c4bc
   1127c:	ldr	r3, [pc, #20]	; 11298 <__assert_fail@plt+0x2dc>
   11280:	ldr	r2, [pc, #20]	; 1129c <__assert_fail@plt+0x2e0>
   11284:	add	r3, pc, r3
   11288:	ldr	r2, [r3, r2]
   1128c:	cmp	r2, #0
   11290:	bxeq	lr
   11294:	b	10eb4 <__gmon_start__@plt>
   11298:	muleq	r1, r8, ip
   1129c:	ldrdeq	r0, [r0], -r4
   112a0:	ldr	r0, [pc, #24]	; 112c0 <__assert_fail@plt+0x304>
   112a4:	ldr	r3, [pc, #24]	; 112c4 <__assert_fail@plt+0x308>
   112a8:	cmp	r3, r0
   112ac:	bxeq	lr
   112b0:	ldr	r3, [pc, #16]	; 112c8 <__assert_fail@plt+0x30c>
   112b4:	cmp	r3, #0
   112b8:	bxeq	lr
   112bc:	bx	r3
   112c0:	andeq	r1, r3, r0, ror #2
   112c4:	andeq	r1, r3, r0, ror #2
   112c8:	andeq	r0, r0, r0
   112cc:	ldr	r0, [pc, #36]	; 112f8 <__assert_fail@plt+0x33c>
   112d0:	ldr	r1, [pc, #36]	; 112fc <__assert_fail@plt+0x340>
   112d4:	sub	r1, r1, r0
   112d8:	asr	r1, r1, #2
   112dc:	add	r1, r1, r1, lsr #31
   112e0:	asrs	r1, r1, #1
   112e4:	bxeq	lr
   112e8:	ldr	r3, [pc, #16]	; 11300 <__assert_fail@plt+0x344>
   112ec:	cmp	r3, #0
   112f0:	bxeq	lr
   112f4:	bx	r3
   112f8:	andeq	r1, r3, r0, ror #2
   112fc:	andeq	r1, r3, r0, ror #2
   11300:	andeq	r0, r0, r0
   11304:	push	{r4, lr}
   11308:	ldr	r4, [pc, #24]	; 11328 <__assert_fail@plt+0x36c>
   1130c:	ldrb	r3, [r4]
   11310:	cmp	r3, #0
   11314:	popne	{r4, pc}
   11318:	bl	112a0 <__assert_fail@plt+0x2e4>
   1131c:	mov	r3, #1
   11320:	strb	r3, [r4]
   11324:	pop	{r4, pc}
   11328:	andeq	r1, r3, r4, lsl #3
   1132c:	b	112cc <__assert_fail@plt+0x310>
   11330:	push	{r4, lr}
   11334:	sub	sp, sp, #24
   11338:	ldr	r3, [pc, #60]	; 1137c <__assert_fail@plt+0x3c0>
   1133c:	ldr	lr, [pc, #60]	; 11380 <__assert_fail@plt+0x3c4>
   11340:	ldr	ip, [pc, #60]	; 11384 <__assert_fail@plt+0x3c8>
   11344:	ldr	r1, [pc, #60]	; 11388 <__assert_fail@plt+0x3cc>
   11348:	str	r3, [sp, #20]
   1134c:	ldr	r4, [pc, #56]	; 1138c <__assert_fail@plt+0x3d0>
   11350:	ldr	r3, [pc, #56]	; 11390 <__assert_fail@plt+0x3d4>
   11354:	mov	r2, r0
   11358:	stmib	sp, {r1, ip, lr}
   1135c:	mov	r0, #1
   11360:	str	r3, [sp]
   11364:	str	r4, [sp, #16]
   11368:	ldr	r3, [pc, #36]	; 11394 <__assert_fail@plt+0x3d8>
   1136c:	ldr	r1, [pc, #36]	; 11398 <__assert_fail@plt+0x3dc>
   11370:	bl	10f38 <__printf_chk@plt>
   11374:	add	sp, sp, #24
   11378:	pop	{r4, pc}
   1137c:	andeq	ip, r1, ip, lsl #11
   11380:	andeq	ip, r1, r4, lsl #12
   11384:	andeq	ip, r1, r0, asr #12
   11388:	andeq	ip, r1, r4, ror r6
   1138c:	andeq	ip, r1, r8, asr #11
   11390:	andeq	ip, r1, ip, lsr #13
   11394:	andeq	ip, r1, ip, lsr #10
   11398:	andeq	ip, r1, ip, asr r5
   1139c:	ldr	r3, [pc, #424]	; 1154c <__assert_fail@plt+0x590>
   113a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113a4:	sub	sp, sp, #20
   113a8:	ldr	r3, [r3]
   113ac:	ldr	r9, [pc, #412]	; 11550 <__assert_fail@plt+0x594>
   113b0:	ldr	r8, [pc, #412]	; 11554 <__assert_fail@plt+0x598>
   113b4:	ldr	r7, [pc, #412]	; 11558 <__assert_fail@plt+0x59c>
   113b8:	ldr	fp, [pc, #412]	; 1155c <__assert_fail@plt+0x5a0>
   113bc:	ldr	sl, [pc, #412]	; 11560 <__assert_fail@plt+0x5a4>
   113c0:	mov	r5, r0
   113c4:	mov	r4, r1
   113c8:	add	r6, sp, #8
   113cc:	str	r3, [sp, #12]
   113d0:	mov	r3, #0
   113d4:	str	r3, [r9]
   113d8:	str	r6, [sp]
   113dc:	mov	r3, r8
   113e0:	mov	r2, r7
   113e4:	mov	r1, r4
   113e8:	mov	r0, r5
   113ec:	bl	10ec0 <getopt_long@plt>
   113f0:	cmn	r0, #1
   113f4:	beq	114dc <__assert_fail@plt+0x520>
   113f8:	cmp	r0, #108	; 0x6c
   113fc:	beq	114b0 <__assert_fail@plt+0x4f4>
   11400:	bgt	11430 <__assert_fail@plt+0x474>
   11404:	cmp	r0, #99	; 0x63
   11408:	beq	114bc <__assert_fail@plt+0x500>
   1140c:	ble	1145c <__assert_fail@plt+0x4a0>
   11410:	cmp	r0, #104	; 0x68
   11414:	beq	11490 <__assert_fail@plt+0x4d4>
   11418:	cmp	r0, #105	; 0x69
   1141c:	bne	11464 <__assert_fail@plt+0x4a8>
   11420:	ldr	r3, [pc, #316]	; 11564 <__assert_fail@plt+0x5a8>
   11424:	mov	r2, #1
   11428:	strb	r2, [r3]
   1142c:	b	113d8 <__assert_fail@plt+0x41c>
   11430:	cmp	r0, #115	; 0x73
   11434:	beq	114a4 <__assert_fail@plt+0x4e8>
   11438:	ble	11478 <__assert_fail@plt+0x4bc>
   1143c:	cmp	r0, #118	; 0x76
   11440:	beq	114cc <__assert_fail@plt+0x510>
   11444:	cmp	r0, #119	; 0x77
   11448:	bne	11464 <__assert_fail@plt+0x4a8>
   1144c:	ldr	r2, [pc, #276]	; 11568 <__assert_fail@plt+0x5ac>
   11450:	mov	r3, #1
   11454:	str	r3, [r2]
   11458:	b	113d8 <__assert_fail@plt+0x41c>
   1145c:	cmp	r0, #0
   11460:	beq	113d8 <__assert_fail@plt+0x41c>
   11464:	ldr	r0, [r4]
   11468:	bl	11330 <__assert_fail@plt+0x374>
   1146c:	mov	r0, #1
   11470:	bl	18e70 <__assert_fail@plt+0x7eb4>
   11474:	b	113d8 <__assert_fail@plt+0x41c>
   11478:	cmp	r0, #113	; 0x71
   1147c:	bne	11464 <__assert_fail@plt+0x4a8>
   11480:	ldr	r2, [pc, #228]	; 1156c <__assert_fail@plt+0x5b0>
   11484:	mov	r3, #1
   11488:	str	r3, [r2]
   1148c:	b	113d8 <__assert_fail@plt+0x41c>
   11490:	ldr	r0, [r4]
   11494:	bl	11330 <__assert_fail@plt+0x374>
   11498:	mov	r0, #0
   1149c:	bl	18e70 <__assert_fail@plt+0x7eb4>
   114a0:	b	113d8 <__assert_fail@plt+0x41c>
   114a4:	mov	r3, #1
   114a8:	str	r3, [sl]
   114ac:	b	113d8 <__assert_fail@plt+0x41c>
   114b0:	mov	r3, #1
   114b4:	str	r3, [fp]
   114b8:	b	113d8 <__assert_fail@plt+0x41c>
   114bc:	ldr	r3, [pc, #172]	; 11570 <__assert_fail@plt+0x5b4>
   114c0:	mov	r2, #1
   114c4:	str	r2, [r3]
   114c8:	b	113d8 <__assert_fail@plt+0x41c>
   114cc:	bl	18e98 <__assert_fail@plt+0x7edc>
   114d0:	mov	r0, #0
   114d4:	bl	18e70 <__assert_fail@plt+0x7eb4>
   114d8:	b	113d8 <__assert_fail@plt+0x41c>
   114dc:	ldr	r3, [r9]
   114e0:	cmp	r5, r3
   114e4:	ble	1152c <__assert_fail@plt+0x570>
   114e8:	ldr	r8, [pc, #132]	; 11574 <__assert_fail@plt+0x5b8>
   114ec:	ldr	r7, [pc, #132]	; 11578 <__assert_fail@plt+0x5bc>
   114f0:	mov	r6, #0
   114f4:	mov	r0, #8
   114f8:	bl	1828c <__assert_fail@plt+0x72d0>
   114fc:	ldr	r3, [r9]
   11500:	ldr	r2, [r8]
   11504:	ldr	r1, [r4, r3, lsl #2]
   11508:	cmp	r2, #0
   1150c:	add	r3, r3, #1
   11510:	stm	r0, {r1, r6}
   11514:	streq	r0, [r7]
   11518:	strne	r0, [r2, #4]
   1151c:	cmp	r3, r5
   11520:	str	r3, [r9]
   11524:	str	r0, [r8]
   11528:	blt	114f4 <__assert_fail@plt+0x538>
   1152c:	ldr	r3, [pc, #24]	; 1154c <__assert_fail@plt+0x590>
   11530:	ldr	r2, [sp, #12]
   11534:	ldr	r3, [r3]
   11538:	cmp	r2, r3
   1153c:	bne	11548 <__assert_fail@plt+0x58c>
   11540:	add	sp, sp, #20
   11544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11548:	bl	10e24 <__stack_chk_fail@plt>
   1154c:	andeq	r0, r3, r0, lsl lr
   11550:	andeq	r1, r3, r0, ror #2
   11554:	andeq	r1, r3, r8
   11558:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1155c:	strdeq	r1, [r3], -r4
   11560:	andeq	r1, r3, ip, ror #3
   11564:	strdeq	r1, [r3], -ip
   11568:	strdeq	r1, [r3], -r0
   1156c:	andeq	r1, r3, r8, ror #3
   11570:	strdeq	r1, [r3], -r8
   11574:	andeq	r1, r3, r8, lsl #3
   11578:	andeq	r1, r3, r4, ror #3
   1157c:	push	{r4, r5, r6, lr}
   11580:	bl	10efc <__errno_location@plt>
   11584:	mov	r2, #31
   11588:	ldr	r1, [pc, #32]	; 115b0 <__assert_fail@plt+0x5f4>
   1158c:	ldr	r5, [r0]
   11590:	mov	r4, r0
   11594:	mov	r0, #1
   11598:	bl	10f44 <write@plt>
   1159c:	ldr	r1, [pc, #16]	; 115b4 <__assert_fail@plt+0x5f8>
   115a0:	mov	r0, #2
   115a4:	bl	10e00 <signal@plt>
   115a8:	str	r5, [r4]
   115ac:	pop	{r4, r5, r6, pc}
   115b0:	andeq	ip, r1, r8, ror #13
   115b4:	andeq	r1, r1, ip, ror r5
   115b8:	ldr	r3, [pc, #396]	; 1174c <__assert_fail@plt+0x790>
   115bc:	push	{r4, r5, r6, r7, r8, lr}
   115c0:	ldr	r3, [r3]
   115c4:	ldr	r4, [pc, #388]	; 11750 <__assert_fail@plt+0x794>
   115c8:	cmp	r3, #0
   115cc:	beq	116c4 <__assert_fail@plt+0x708>
   115d0:	ldrb	r3, [r4, #4]
   115d4:	cmp	r3, #0
   115d8:	bne	11644 <__assert_fail@plt+0x688>
   115dc:	ldr	r5, [pc, #368]	; 11754 <__assert_fail@plt+0x798>
   115e0:	ldr	r3, [r5]
   115e4:	cmp	r3, #0
   115e8:	beq	1170c <__assert_fail@plt+0x750>
   115ec:	ldr	r0, [r3]
   115f0:	ldr	r1, [pc, #352]	; 11758 <__assert_fail@plt+0x79c>
   115f4:	bl	10dac <fopen@plt>
   115f8:	subs	r7, r0, #0
   115fc:	beq	11724 <__assert_fail@plt+0x768>
   11600:	ldrb	r3, [r4, #4]
   11604:	ldr	r6, [pc, #336]	; 1175c <__assert_fail@plt+0x7a0>
   11608:	cmp	r3, #0
   1160c:	bne	11618 <__assert_fail@plt+0x65c>
   11610:	ldr	r0, [r6]
   11614:	bl	10f68 <fclose@plt>
   11618:	ldr	r0, [r5]
   1161c:	ldr	r3, [pc, #316]	; 11760 <__assert_fail@plt+0x7a4>
   11620:	str	r7, [r6]
   11624:	ldm	r0, {r1, r2}
   11628:	str	r1, [r3]
   1162c:	mov	r3, #0
   11630:	str	r2, [r5]
   11634:	strb	r3, [r4, #4]
   11638:	bl	10dd0 <free@plt>
   1163c:	mov	r0, #1
   11640:	pop	{r4, r5, r6, r7, r8, pc}
   11644:	ldr	r0, [pc, #280]	; 11764 <__assert_fail@plt+0x7a8>
   11648:	bl	10e18 <strdup@plt>
   1164c:	mov	r1, #2
   11650:	bl	18a60 <__assert_fail@plt+0x7aa4>
   11654:	ldr	r0, [pc, #268]	; 11768 <__assert_fail@plt+0x7ac>
   11658:	bl	10e18 <strdup@plt>
   1165c:	mov	r1, #2
   11660:	bl	18a60 <__assert_fail@plt+0x7aa4>
   11664:	ldr	r0, [pc, #256]	; 1176c <__assert_fail@plt+0x7b0>
   11668:	bl	10e18 <strdup@plt>
   1166c:	mov	r1, #2
   11670:	bl	18a60 <__assert_fail@plt+0x7aa4>
   11674:	ldr	r0, [pc, #244]	; 11770 <__assert_fail@plt+0x7b4>
   11678:	bl	10e18 <strdup@plt>
   1167c:	mov	r1, #2
   11680:	bl	18a60 <__assert_fail@plt+0x7aa4>
   11684:	ldr	r0, [pc, #232]	; 11774 <__assert_fail@plt+0x7b8>
   11688:	bl	10e18 <strdup@plt>
   1168c:	ldr	r5, [pc, #228]	; 11778 <__assert_fail@plt+0x7bc>
   11690:	mov	r1, #2
   11694:	bl	18a60 <__assert_fail@plt+0x7aa4>
   11698:	ldr	r0, [pc, #220]	; 1177c <__assert_fail@plt+0x7c0>
   1169c:	bl	10e18 <strdup@plt>
   116a0:	mov	r1, #2
   116a4:	bl	18a60 <__assert_fail@plt+0x7aa4>
   116a8:	ldr	r0, [r5]
   116ac:	cmp	r0, #0
   116b0:	beq	116c4 <__assert_fail@plt+0x708>
   116b4:	bl	16174 <__assert_fail@plt+0x51b8>
   116b8:	ldr	r0, [r5, #4]!
   116bc:	cmp	r0, #0
   116c0:	bne	116b4 <__assert_fail@plt+0x6f8>
   116c4:	ldr	r5, [pc, #136]	; 11754 <__assert_fail@plt+0x798>
   116c8:	ldr	r3, [r5]
   116cc:	cmp	r3, #0
   116d0:	bne	115ec <__assert_fail@plt+0x630>
   116d4:	ldrb	r2, [r4, #4]
   116d8:	ldr	r3, [pc, #160]	; 11780 <__assert_fail@plt+0x7c4>
   116dc:	cmp	r2, #0
   116e0:	ldr	r5, [r3]
   116e4:	beq	11714 <__assert_fail@plt+0x758>
   116e8:	ldr	r6, [pc, #108]	; 1175c <__assert_fail@plt+0x7a0>
   116ec:	ldr	r2, [pc, #144]	; 11784 <__assert_fail@plt+0x7c8>
   116f0:	mov	r1, #1
   116f4:	mov	r3, #0
   116f8:	str	r5, [r6]
   116fc:	strb	r1, [r2]
   11700:	strb	r3, [r4, #4]
   11704:	mov	r0, #1
   11708:	pop	{r4, r5, r6, r7, r8, pc}
   1170c:	ldr	r3, [pc, #108]	; 11780 <__assert_fail@plt+0x7c4>
   11710:	ldr	r5, [r3]
   11714:	ldr	r6, [pc, #64]	; 1175c <__assert_fail@plt+0x7a0>
   11718:	ldr	r0, [r6]
   1171c:	bl	10f68 <fclose@plt>
   11720:	b	116ec <__assert_fail@plt+0x730>
   11724:	ldr	r3, [r5]
   11728:	ldr	r1, [pc, #88]	; 11788 <__assert_fail@plt+0x7cc>
   1172c:	ldr	r2, [pc, #88]	; 1178c <__assert_fail@plt+0x7d0>
   11730:	ldr	r3, [r3]
   11734:	ldr	r0, [r1]
   11738:	mov	r1, #1
   1173c:	bl	10f5c <__fprintf_chk@plt>
   11740:	mov	r0, #1
   11744:	bl	18e70 <__assert_fail@plt+0x7eb4>
   11748:	b	116d4 <__assert_fail@plt+0x718>
   1174c:	strdeq	r1, [r3], -r4
   11750:	andeq	r1, r3, r8, lsl #3
   11754:	andeq	r1, r3, r4, ror #3
   11758:	ldrdeq	r0, [r2], -ip
   1175c:			; <UNDEFINED> instruction: 0x000311b4
   11760:	andeq	r1, r3, r4, asr #4
   11764:	strdeq	sp, [r1], -ip
   11768:	andeq	ip, r1, r8, lsl #14
   1176c:	andeq	pc, r1, r0, lsl #25
   11770:	andeq	ip, r1, ip, lsl #14
   11774:	andeq	ip, r1, r0, lsl r7
   11778:	andeq	r1, r3, r0, lsr #1
   1177c:	andeq	ip, r1, r4, lsl r7
   11780:	andeq	r1, r3, r8, ror r1
   11784:	andeq	r1, r3, r0, ror #4
   11788:	andeq	r1, r3, r8, ror #2
   1178c:	andeq	ip, r1, r8, lsl r7
   11790:	ldr	r3, [pc, #32]	; 117b8 <__assert_fail@plt+0x7fc>
   11794:	ldr	r2, [pc, #32]	; 117bc <__assert_fail@plt+0x800>
   11798:	mov	r1, #1
   1179c:	ldrb	r3, [r3]
   117a0:	str	r1, [r2]
   117a4:	cmp	r3, #0
   117a8:	bne	117b0 <__assert_fail@plt+0x7f4>
   117ac:	b	115b8 <__assert_fail@plt+0x5fc>
   117b0:	mov	r0, #0
   117b4:	bx	lr
   117b8:	andeq	r1, r3, r0, ror #4
   117bc:	andeq	r1, r3, r0, lsr #5
   117c0:	push	{r4, r5, r6, lr}
   117c4:	mov	r6, r0
   117c8:	ldr	r4, [pc, #36]	; 117f4 <__assert_fail@plt+0x838>
   117cc:	ldr	r5, [pc, #36]	; 117f8 <__assert_fail@plt+0x83c>
   117d0:	ldrb	r3, [r4, #4]
   117d4:	cmp	r3, #0
   117d8:	bne	117e4 <__assert_fail@plt+0x828>
   117dc:	ldr	r0, [r5]
   117e0:	bl	10f68 <fclose@plt>
   117e4:	mov	r3, #0
   117e8:	str	r6, [r5]
   117ec:	strb	r3, [r4, #4]
   117f0:	pop	{r4, r5, r6, pc}
   117f4:	andeq	r1, r3, r8, lsl #3
   117f8:			; <UNDEFINED> instruction: 0x000311b4
   117fc:	ldr	r3, [pc, #4072]	; 127ec <__assert_fail@plt+0x1830>
   11800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11804:	sub	sp, sp, #1264	; 0x4f0
   11808:	ldr	fp, [pc, #4064]	; 127f0 <__assert_fail@plt+0x1834>
   1180c:	sub	sp, sp, #12
   11810:	ldr	r1, [r3]
   11814:	add	ip, fp, #4000	; 0xfa0
   11818:	add	lr, fp, #2128	; 0x850
   1181c:	str	r1, [sp, #1268]	; 0x4f4
   11820:	add	r1, ip, #4
   11824:	str	r1, [sp, #40]	; 0x28
   11828:	add	r1, lr, #4
   1182c:	str	r1, [sp, #36]	; 0x24
   11830:	ldr	r1, [pc, #4028]	; 127f4 <__assert_fail@plt+0x1838>
   11834:	mov	r3, #0
   11838:	add	r0, sp, #68	; 0x44
   1183c:	mov	r4, r3
   11840:	str	r3, [sp, #32]
   11844:	strh	r3, [sp, #68]	; 0x44
   11848:	str	r3, [r1]
   1184c:	ldr	r3, [pc, #4004]	; 127f8 <__assert_fail@plt+0x183c>
   11850:	mov	sl, r0
   11854:	mov	r9, r0
   11858:	mov	r6, #200	; 0xc8
   1185c:	mvn	r2, #1
   11860:	add	r8, sp, #468	; 0x1d4
   11864:	str	r0, [sp, #28]
   11868:	str	r2, [r3]
   1186c:	str	r8, [sp, #24]
   11870:	lsl	r3, r4, #1
   11874:	ldrsh	r5, [fp, r3]
   11878:	cmn	r5, #144	; 0x90
   1187c:	mov	r7, r5
   11880:	beq	118d0 <__assert_fail@plt+0x914>
   11884:	ldr	r3, [pc, #3948]	; 127f8 <__assert_fail@plt+0x183c>
   11888:	ldr	r0, [r3]
   1188c:	cmn	r0, #2
   11890:	beq	11dac <__assert_fail@plt+0xdf0>
   11894:	cmp	r0, #0
   11898:	ble	11d38 <__assert_fail@plt+0xd7c>
   1189c:	cmp	r0, #292	; 0x124
   118a0:	addle	r0, fp, r0
   118a4:	addgt	r7, r5, #2
   118a8:	ldrble	r3, [r0, #396]	; 0x18c
   118ac:	movgt	r3, #2
   118b0:	addle	r7, r5, r3
   118b4:	cmp	r7, #720	; 0x2d0
   118b8:	bcs	118d0 <__assert_fail@plt+0x914>
   118bc:	ldr	r2, [pc, #3896]	; 127fc <__assert_fail@plt+0x1840>
   118c0:	lsl	r7, r7, #1
   118c4:	ldrsh	r2, [r2, r7]
   118c8:	cmp	r2, r3
   118cc:	beq	11d48 <__assert_fail@plt+0xd8c>
   118d0:	add	r4, fp, r4
   118d4:	ldrb	r4, [r4, #3572]	; 0xdf4
   118d8:	cmp	r4, #0
   118dc:	beq	11c50 <__assert_fail@plt+0xc94>
   118e0:	add	r2, fp, r4
   118e4:	sub	r3, r4, #2
   118e8:	ldrb	r5, [r2, #3772]	; 0xebc
   118ec:	rsb	r2, r5, #1
   118f0:	ldr	r7, [r8, r2, lsl #2]
   118f4:	cmp	r3, #110	; 0x6e
   118f8:	ldrls	pc, [pc, r3, lsl #2]
   118fc:	b	11b0c <__assert_fail@plt+0xb50>
   11900:	andeq	r2, r1, r8, ror #27
   11904:	andeq	r1, r1, ip, lsl #22
   11908:	strdeq	r1, [r1], -r4
   1190c:	strdeq	r1, [r1], -r4
   11910:	andeq	r2, r1, r0, lsl #6
   11914:	andeq	r1, r1, ip, lsl #22
   11918:	andeq	r2, r1, r8, asr #26
   1191c:	andeq	r1, r1, r8, asr #27
   11920:	andeq	r1, r1, ip, lsl #22
   11924:	andeq	r1, r1, ip, lsl #22
   11928:	andeq	r1, r1, ip, lsl #22
   1192c:	andeq	r1, r1, r8, asr #27
   11930:	andeq	r1, r1, ip, lsl #22
   11934:	andeq	r1, r1, ip, lsl #22
   11938:	andeq	r1, r1, ip, lsl #22
   1193c:	andeq	r1, r1, ip, lsl #22
   11940:	andeq	r1, r1, ip, lsl #22
   11944:	andeq	r1, r1, ip, lsl #22
   11948:	andeq	r2, r1, r4, lsr sp
   1194c:	andeq	r2, r1, r0, lsl #15
   11950:	andeq	r2, r1, r8, ror r7
   11954:	ldrdeq	r2, [r1], -r4
   11958:	andeq	r2, r1, r0, lsr #26
   1195c:	andeq	r1, r1, r8, lsl pc
   11960:	strdeq	r1, [r1], -r4
   11964:	andeq	r1, r1, r8, ror pc
   11968:	andeq	r1, r1, ip, ror #30
   1196c:	andeq	r2, r1, ip, ror #14
   11970:	andeq	r2, r1, r8, asr #14
   11974:	andeq	r2, r1, ip, ror r6
   11978:	andeq	r2, r1, r4, asr #11
   1197c:	andeq	r2, r1, r8, ror #10
   11980:	andeq	r2, r1, r8, lsl #10
   11984:	andeq	r2, r1, r4, lsr #9
   11988:	andeq	r2, r1, r8, asr r4
   1198c:	andeq	r2, r1, ip, lsl r7
   11990:	strdeq	r2, [r1], -r0
   11994:	andeq	r2, r1, ip, lsl #15
   11998:	andeq	r1, r1, r8, asr #27
   1199c:	strdeq	r2, [r1], -r4
   119a0:	andeq	r1, r1, ip, lsl #22
   119a4:	andeq	r1, r1, ip, lsl #22
   119a8:	andeq	r1, r1, ip, lsl #22
   119ac:	andeq	r2, r1, ip, asr #5
   119b0:			; <UNDEFINED> instruction: 0x000122b4
   119b4:	andeq	r1, r1, ip, lsl #22
   119b8:	andeq	r2, r1, ip, lsr r2
   119bc:	andeq	r1, r1, ip, lsl #22
   119c0:	andeq	r2, r1, r8, asr #2
   119c4:	andeq	r2, r1, r4, lsr #2
   119c8:	andeq	r1, r1, r8, asr #27
   119cc:	andeq	r2, r1, r8, asr #8
   119d0:	andeq	r1, r1, r8, asr #27
   119d4:	andeq	r1, r1, ip, lsl #22
   119d8:	andeq	r1, r1, r8, asr #27
   119dc:	andeq	r1, r1, r8, asr lr
   119e0:	andeq	r1, r1, r8, asr lr
   119e4:	andeq	r2, r1, r4, lsr #8
   119e8:	andeq	r2, r1, r4, lsl lr
   119ec:	andeq	r1, r1, ip, lsr #28
   119f0:	andeq	r1, r1, ip, lsr #28
   119f4:	andeq	r2, r1, r0, asr r3
   119f8:	andeq	r2, r1, r8, lsr #6
   119fc:	strdeq	r1, [r1], -ip
   11a00:	strdeq	r1, [r1], -ip
   11a04:	andeq	r1, r1, r8, asr #27
   11a08:	andeq	r1, r1, ip, lsl #22
   11a0c:	strdeq	r2, [r1], -r8
   11a10:	andeq	r2, r1, ip, lsl #7
   11a14:	andeq	r2, r1, r0, ror #6
   11a18:	andeq	r2, r1, r4, ror #23
   11a1c:	ldrdeq	r2, [r1], -r4
   11a20:	andeq	r1, r1, ip, lsl #22
   11a24:	andeq	r2, r1, ip, lsr #23
   11a28:			; <UNDEFINED> instruction: 0x00011abc
   11a2c:	andeq	r2, r1, r0, ror #22
   11a30:	ldrdeq	r2, [r1], -r0
   11a34:	andeq	r2, r1, ip, ror sl
   11a38:	andeq	r2, r1, r0, lsl sl
   11a3c:	andeq	r2, r1, r4, asr sp
   11a40:	andeq	r2, r1, r4, ror #30
   11a44:	andeq	r2, r1, r0, asr #30
   11a48:	andeq	r2, r1, r8, asr lr
   11a4c:	andeq	r2, r1, r0, lsr #28
   11a50:	strdeq	r2, [r1], -r4
   11a54:	andeq	r2, r1, r8, lsl #30
   11a58:	andeq	r1, r1, r4, lsr pc
   11a5c:			; <UNDEFINED> instruction: 0x00011ebc
   11a60:	ldrdeq	r2, [r1], -ip
   11a64:	andeq	r2, r1, r0, lsl #1
   11a68:	muleq	r1, ip, r0
   11a6c:	andeq	r2, r1, r4, asr #32
   11a70:	andeq	r2, r1, r0, lsr r0
   11a74:	andeq	r1, r1, r4, lsl #31
   11a78:	andeq	r1, r1, r0, ror #28
   11a7c:	andeq	r2, r1, r4, lsr #25
   11a80:	andeq	r2, r1, r8, lsl #25
   11a84:	andeq	r2, r1, ip, ror #24
   11a88:	andeq	r2, r1, r0, asr ip
   11a8c:	andeq	r2, r1, r0, lsl r3
   11a90:	andeq	r2, r1, ip, ror sp
   11a94:	muleq	r1, r4, sp
   11a98:	andeq	r2, r1, r0, asr #27
   11a9c:	andeq	r1, r1, r8, asr #27
   11aa0:	andeq	r2, r1, r8, lsl #20
   11aa4:	andeq	r2, r1, r8, lsr #27
   11aa8:			; <UNDEFINED> instruction: 0x00012db0
   11aac:	andeq	r2, r1, r4, lsl r1
   11ab0:	andeq	r2, r1, r4, ror #13
   11ab4:	andeq	r1, r1, ip, lsl #22
   11ab8:	andeq	r2, r1, ip, lsr sp
   11abc:	ldr	r3, [r8]
   11ac0:	tst	r3, #2
   11ac4:	bne	13290 <__assert_fail@plt+0x22d4>
   11ac8:	tst	r3, #4
   11acc:	beq	1327c <__assert_fail@plt+0x22c0>
   11ad0:	tst	r3, #8
   11ad4:	bne	13270 <__assert_fail@plt+0x22b4>
   11ad8:	ldr	r3, [pc, #3588]	; 128e4 <__assert_fail@plt+0x1928>
   11adc:	ldr	r3, [r3]
   11ae0:	cmn	r3, #1
   11ae4:	beq	132d4 <__assert_fail@plt+0x2318>
   11ae8:	ldr	r2, [pc, #3344]	; 12800 <__assert_fail@plt+0x1844>
   11aec:	rsb	r3, r3, r3, lsl #3
   11af0:	ldr	r2, [r2]
   11af4:	add	r3, r2, r3, lsl #2
   11af8:	ldrb	r3, [r3, #1]
   11afc:	cmp	r3, #0
   11b00:	beq	11b0c <__assert_fail@plt+0xb50>
   11b04:	ldr	r0, [pc, #3320]	; 12804 <__assert_fail@plt+0x1848>
   11b08:	bl	186b0 <__assert_fail@plt+0x76f4>
   11b0c:	add	r4, fp, r4
   11b10:	sxth	r5, r5
   11b14:	ldrb	r1, [r4, #3888]	; 0xf30
   11b18:	ldr	r3, [sp, #40]	; 0x28
   11b1c:	sub	r2, sl, r5, lsl #1
   11b20:	sub	r1, r1, #53	; 0x35
   11b24:	ldrsh	r0, [r2]
   11b28:	lsl	r1, r1, #1
   11b2c:	sub	r8, r8, r5, lsl #2
   11b30:	ldrsh	r3, [r3, r1]
   11b34:	str	r7, [r8, #4]
   11b38:	add	r8, r8, #4
   11b3c:	add	r3, r3, r0
   11b40:	cmp	r3, #720	; 0x2d0
   11b44:	bcs	11b5c <__assert_fail@plt+0xba0>
   11b48:	ldr	ip, [pc, #3244]	; 127fc <__assert_fail@plt+0x1840>
   11b4c:	lsl	r3, r3, #1
   11b50:	ldrsh	ip, [ip, r3]
   11b54:	cmp	ip, r0
   11b58:	beq	11dbc <__assert_fail@plt+0xe00>
   11b5c:	ldr	r3, [pc, #3236]	; 12808 <__assert_fail@plt+0x184c>
   11b60:	ldrsh	r4, [r3, r1]
   11b64:	sub	r3, r6, #-2147483647	; 0x80000001
   11b68:	add	sl, r2, #2
   11b6c:	lsl	r3, r3, #1
   11b70:	add	r1, r9, r3
   11b74:	cmp	sl, r1
   11b78:	strh	r4, [r2, #2]
   11b7c:	bcc	11c3c <__assert_fail@plt+0xc80>
   11b80:	sub	r5, sl, r9
   11b84:	ldr	r2, [pc, #3200]	; 1280c <__assert_fail@plt+0x1850>
   11b88:	asr	r5, r5, #1
   11b8c:	cmp	r6, r2
   11b90:	add	r5, r5, #1
   11b94:	bhi	11de0 <__assert_fail@plt+0xe24>
   11b98:	ldr	r6, [pc, #3184]	; 12810 <__assert_fail@plt+0x1854>
   11b9c:	add	r3, r3, #2
   11ba0:	cmp	r3, r6
   11ba4:	movcc	r6, r3
   11ba8:	lsl	r8, r6, #1
   11bac:	add	r0, r8, r6
   11bb0:	lsl	r0, r0, #1
   11bb4:	add	r0, r0, #3
   11bb8:	bl	10e90 <malloc@plt>
   11bbc:	subs	r7, r0, #0
   11bc0:	beq	11de0 <__assert_fail@plt+0xe24>
   11bc4:	lsl	sl, r5, #1
   11bc8:	mov	r2, sl
   11bcc:	mov	r1, r9
   11bd0:	bl	10df4 <memcpy@plt>
   11bd4:	add	r3, r8, #3
   11bd8:	bic	r3, r3, #3
   11bdc:	add	r3, r7, r3
   11be0:	lsl	r5, r5, #2
   11be4:	mov	r0, r3
   11be8:	mov	r2, r5
   11bec:	ldr	r1, [sp, #24]
   11bf0:	bl	10df4 <memcpy@plt>
   11bf4:	ldr	r2, [sp, #28]
   11bf8:	cmp	r9, r2
   11bfc:	mov	r3, r0
   11c00:	beq	11c14 <__assert_fail@plt+0xc58>
   11c04:	str	r0, [sp, #24]
   11c08:	mov	r0, r9
   11c0c:	bl	10dd0 <free@plt>
   11c10:	ldr	r3, [sp, #24]
   11c14:	sub	sl, sl, #2
   11c18:	sub	r8, r8, #2
   11c1c:	add	r8, r7, r8
   11c20:	add	sl, r7, sl
   11c24:	cmp	sl, r8
   11c28:	sub	r5, r5, #4
   11c2c:	add	r8, r3, r5
   11c30:	bcs	13080 <__assert_fail@plt+0x20c4>
   11c34:	mov	r9, r7
   11c38:	str	r3, [sp, #24]
   11c3c:	cmp	r4, #2
   11c40:	bne	11870 <__assert_fail@plt+0x8b4>
   11c44:	mov	sl, r9
   11c48:	mov	r4, #0
   11c4c:	b	11d00 <__assert_fail@plt+0xd44>
   11c50:	ldr	r3, [sp, #32]
   11c54:	cmp	r3, #0
   11c58:	beq	11d90 <__assert_fail@plt+0xdd4>
   11c5c:	ldr	r3, [sp, #32]
   11c60:	cmp	r3, #3
   11c64:	bne	11c84 <__assert_fail@plt+0xcc8>
   11c68:	ldr	r3, [pc, #2952]	; 127f8 <__assert_fail@plt+0x183c>
   11c6c:	ldr	r3, [r3]
   11c70:	cmp	r3, #0
   11c74:	ble	11dd0 <__assert_fail@plt+0xe14>
   11c78:	ldr	r2, [pc, #2936]	; 127f8 <__assert_fail@plt+0x183c>
   11c7c:	mvn	r3, #1
   11c80:	str	r3, [r2]
   11c84:	ldr	r2, [pc, #2952]	; 12814 <__assert_fail@plt+0x1858>
   11c88:	ldr	r1, [pc, #2924]	; 127fc <__assert_fail@plt+0x1840>
   11c8c:	ldr	r0, [sp, #36]	; 0x24
   11c90:	b	11cac <__assert_fail@plt+0xcf0>
   11c94:	cmp	sl, r9
   11c98:	beq	11cfc <__assert_fail@plt+0xd40>
   11c9c:	ldrsh	r3, [sl, #-2]!
   11ca0:	sub	r8, r8, #4
   11ca4:	lsl	r3, r3, #1
   11ca8:	ldrsh	r5, [fp, r3]
   11cac:	cmn	r5, #144	; 0x90
   11cb0:	beq	11c94 <__assert_fail@plt+0xcd8>
   11cb4:	add	r5, r5, #1
   11cb8:	cmp	r5, r2
   11cbc:	bhi	11c94 <__assert_fail@plt+0xcd8>
   11cc0:	lsl	r5, r5, #1
   11cc4:	ldrsh	r3, [r1, r5]
   11cc8:	cmp	r3, #1
   11ccc:	bne	11c94 <__assert_fail@plt+0xcd8>
   11cd0:	ldrsh	r4, [r0, r5]
   11cd4:	cmp	r4, #0
   11cd8:	ble	11c94 <__assert_fail@plt+0xcd8>
   11cdc:	ldr	r3, [pc, #2868]	; 12818 <__assert_fail@plt+0x185c>
   11ce0:	mov	r1, #3
   11ce4:	str	r1, [sp, #32]
   11ce8:	ldr	r3, [r3]
   11cec:	mov	r2, sl
   11cf0:	str	r3, [r8, #4]
   11cf4:	add	r8, r8, #4
   11cf8:	b	11b64 <__assert_fail@plt+0xba8>
   11cfc:	mov	r4, #1
   11d00:	ldr	r3, [sp, #28]
   11d04:	cmp	sl, r3
   11d08:	beq	11d14 <__assert_fail@plt+0xd58>
   11d0c:	mov	r0, sl
   11d10:	bl	10dd0 <free@plt>
   11d14:	ldr	r3, [pc, #2768]	; 127ec <__assert_fail@plt+0x1830>
   11d18:	ldr	r2, [sp, #1268]	; 0x4f4
   11d1c:	mov	r0, r4
   11d20:	ldr	r3, [r3]
   11d24:	cmp	r2, r3
   11d28:	bne	132ec <__assert_fail@plt+0x2330>
   11d2c:	add	sp, sp, #1264	; 0x4f0
   11d30:	add	sp, sp, #12
   11d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d38:	ldr	r2, [pc, #2744]	; 127f8 <__assert_fail@plt+0x183c>
   11d3c:	mov	r3, #0
   11d40:	str	r3, [r2]
   11d44:	b	118b4 <__assert_fail@plt+0x8f8>
   11d48:	ldr	r3, [sp, #36]	; 0x24
   11d4c:	ldrsh	r4, [r3, r7]
   11d50:	cmp	r4, #0
   11d54:	rsble	r4, r4, #0
   11d58:	ble	118e0 <__assert_fail@plt+0x924>
   11d5c:	ldr	r3, [sp, #32]
   11d60:	ldr	r0, [pc, #2704]	; 127f8 <__assert_fail@plt+0x183c>
   11d64:	cmp	r3, #0
   11d68:	subne	r3, r3, #1
   11d6c:	strne	r3, [sp, #32]
   11d70:	ldr	r3, [pc, #2720]	; 12818 <__assert_fail@plt+0x185c>
   11d74:	mvn	r1, #1
   11d78:	str	r1, [r0]
   11d7c:	ldr	r3, [r3]
   11d80:	mov	r2, sl
   11d84:	str	r3, [r8, #4]
   11d88:	add	r8, r8, #4
   11d8c:	b	11b64 <__assert_fail@plt+0xba8>
   11d90:	ldr	r2, [pc, #2652]	; 127f4 <__assert_fail@plt+0x1838>
   11d94:	ldr	r0, [pc, #2688]	; 1281c <__assert_fail@plt+0x1860>
   11d98:	ldr	r3, [r2]
   11d9c:	add	r3, r3, #1
   11da0:	str	r3, [r2]
   11da4:	bl	186b0 <__assert_fail@plt+0x76f4>
   11da8:	b	11c84 <__assert_fail@plt+0xcc8>
   11dac:	bl	13c70 <__assert_fail@plt+0x2cb4>
   11db0:	ldr	r3, [pc, #2624]	; 127f8 <__assert_fail@plt+0x183c>
   11db4:	str	r0, [r3]
   11db8:	b	11894 <__assert_fail@plt+0x8d8>
   11dbc:	ldr	r1, [sp, #36]	; 0x24
   11dc0:	ldrsh	r4, [r1, r3]
   11dc4:	b	11b64 <__assert_fail@plt+0xba8>
   11dc8:	mov	r7, #0
   11dcc:	b	11b0c <__assert_fail@plt+0xb50>
   11dd0:	bne	11c84 <__assert_fail@plt+0xcc8>
   11dd4:	mov	sl, r9
   11dd8:	mov	r4, #1
   11ddc:	b	11d00 <__assert_fail@plt+0xd44>
   11de0:	ldr	r0, [pc, #2616]	; 12820 <__assert_fail@plt+0x1864>
   11de4:	mov	sl, r9
   11de8:	bl	186b0 <__assert_fail@plt+0x76f4>
   11dec:	mov	r4, #2
   11df0:	b	11d00 <__assert_fail@plt+0xd44>
   11df4:	bl	18614 <__assert_fail@plt+0x7658>
   11df8:	b	11b0c <__assert_fail@plt+0xb50>
   11dfc:	mov	r1, #1
   11e00:	ldr	r0, [r8, #-8]
   11e04:	ldr	r7, [r8, #-20]	; 0xffffffec
   11e08:	bl	18a60 <__assert_fail@plt+0x7aa4>
   11e0c:	mov	r2, #1
   11e10:	mov	r1, r0
   11e14:	mov	r0, r7
   11e18:	bl	182d4 <__assert_fail@plt+0x7318>
   11e1c:	mov	r7, r0
   11e20:	ldr	r0, [pc, #2556]	; 12824 <__assert_fail@plt+0x1868>
   11e24:	bl	18784 <__assert_fail@plt+0x77c8>
   11e28:	b	11b0c <__assert_fail@plt+0xb50>
   11e2c:	mov	r1, #1
   11e30:	ldr	r0, [r8, #-8]
   11e34:	bl	18a60 <__assert_fail@plt+0x7aa4>
   11e38:	mov	r2, #1
   11e3c:	mov	r1, r0
   11e40:	mov	r0, #0
   11e44:	bl	182d4 <__assert_fail@plt+0x7318>
   11e48:	mov	r7, r0
   11e4c:	ldr	r0, [pc, #2512]	; 12824 <__assert_fail@plt+0x1868>
   11e50:	bl	18784 <__assert_fail@plt+0x77c8>
   11e54:	b	11b0c <__assert_fail@plt+0xb50>
   11e58:	ldr	r7, [r8, #-4]
   11e5c:	b	11b0c <__assert_fail@plt+0xb50>
   11e60:	ldr	r2, [pc, #2872]	; 129a0 <__assert_fail@plt+0x19e4>
   11e64:	ldr	r3, [r8]
   11e68:	mov	r1, r2
   11e6c:	str	r2, [sp, #44]	; 0x2c
   11e70:	ldr	r2, [pc, #2860]	; 129a4 <__assert_fail@plt+0x19e8>
   11e74:	cmp	r3, #0
   11e78:	ldr	r0, [r1]
   11e7c:	ldr	r1, [r2]
   11e80:	ldrb	r2, [r8, #-4]
   11e84:	blt	130ac <__assert_fail@plt+0x20f0>
   11e88:	cmp	r2, #43	; 0x2b
   11e8c:	ldreq	r2, [pc, #2452]	; 12828 <__assert_fail@plt+0x186c>
   11e90:	ldrne	r2, [pc, #2452]	; 1282c <__assert_fail@plt+0x1870>
   11e94:	strd	r2, [sp]
   11e98:	str	r3, [sp, #8]
   11e9c:	mov	r2, #1
   11ea0:	mvn	r3, #0
   11ea4:	bl	10fb0 <__snprintf_chk@plt>
   11ea8:	ldr	r3, [sp, #44]	; 0x2c
   11eac:	mov	r7, #1
   11eb0:	ldr	r0, [r3]
   11eb4:	bl	17d08 <__assert_fail@plt+0x6d4c>
   11eb8:	b	11b0c <__assert_fail@plt+0xb50>
   11ebc:	ldr	r7, [r8, #-8]
   11ec0:	tst	r7, #8
   11ec4:	bne	11ed4 <__assert_fail@plt+0xf18>
   11ec8:	ldr	r3, [r8]
   11ecc:	tst	r3, #8
   11ed0:	beq	11edc <__assert_fail@plt+0xf20>
   11ed4:	ldr	r0, [pc, #2388]	; 12830 <__assert_fail@plt+0x1874>
   11ed8:	bl	186b0 <__assert_fail@plt+0x76f4>
   11edc:	ldr	r0, [pc, #2384]	; 12834 <__assert_fail@plt+0x1878>
   11ee0:	bl	17d08 <__assert_fail@plt+0x6d4c>
   11ee4:	ldr	r3, [r8]
   11ee8:	orr	r3, r7, r3
   11eec:	bic	r7, r3, #4
   11ef0:	b	11b0c <__assert_fail@plt+0xb50>
   11ef4:	ldr	r0, [pc, #2364]	; 12838 <__assert_fail@plt+0x187c>
   11ef8:	bl	18784 <__assert_fail@plt+0x77c8>
   11efc:	ldr	r3, [pc, #2360]	; 1283c <__assert_fail@plt+0x1880>
   11f00:	ldr	r3, [r3]
   11f04:	cmp	r3, #0
   11f08:	bne	1308c <__assert_fail@plt+0x20d0>
   11f0c:	ldr	r0, [pc, #2348]	; 12840 <__assert_fail@plt+0x1884>
   11f10:	bl	186b0 <__assert_fail@plt+0x76f4>
   11f14:	b	11b0c <__assert_fail@plt+0xb50>
   11f18:	ldr	r3, [pc, #2340]	; 12844 <__assert_fail@plt+0x1888>
   11f1c:	ldr	r3, [r3]
   11f20:	cmp	r3, #0
   11f24:	bne	1308c <__assert_fail@plt+0x20d0>
   11f28:	ldr	r0, [pc, #2328]	; 12848 <__assert_fail@plt+0x188c>
   11f2c:	bl	186b0 <__assert_fail@plt+0x76f4>
   11f30:	b	11b0c <__assert_fail@plt+0xb50>
   11f34:	ldr	r7, [r8, #-8]
   11f38:	tst	r7, #8
   11f3c:	bne	11f4c <__assert_fail@plt+0xf90>
   11f40:	ldr	r3, [r8]
   11f44:	tst	r3, #8
   11f48:	beq	11f54 <__assert_fail@plt+0xf98>
   11f4c:	ldr	r0, [pc, #2296]	; 1284c <__assert_fail@plt+0x1890>
   11f50:	bl	186b0 <__assert_fail@plt+0x76f4>
   11f54:	ldr	r0, [pc, #2292]	; 12850 <__assert_fail@plt+0x1894>
   11f58:	bl	17d08 <__assert_fail@plt+0x6d4c>
   11f5c:	ldr	r3, [r8]
   11f60:	orr	r3, r7, r3
   11f64:	bic	r7, r3, #4
   11f68:	b	11b0c <__assert_fail@plt+0xb50>
   11f6c:	ldr	r0, [pc, #2272]	; 12854 <__assert_fail@plt+0x1898>
   11f70:	bl	17d08 <__assert_fail@plt+0x6d4c>
   11f74:	b	11b0c <__assert_fail@plt+0xb50>
   11f78:	mov	r0, #0
   11f7c:	bl	18e70 <__assert_fail@plt+0x7eb4>
   11f80:	b	11b0c <__assert_fail@plt+0xb50>
   11f84:	mov	r1, #2
   11f88:	ldr	r0, [r8, #-12]
   11f8c:	bl	18a60 <__assert_fail@plt+0x7aa4>
   11f90:	ldr	r3, [pc, #2152]	; 12800 <__assert_fail@plt+0x1844>
   11f94:	ldr	r3, [r3]
   11f98:	rsb	r1, r0, r0, lsl #3
   11f9c:	mov	r2, r0
   11fa0:	add	r3, r3, r1, lsl #2
   11fa4:	ldr	r0, [r8, #-4]
   11fa8:	ldrb	r3, [r3, #1]
   11fac:	cmp	r3, #0
   11fb0:	moveq	r7, #1
   11fb4:	movne	r7, #8
   11fb8:	cmp	r0, #0
   11fbc:	beq	13134 <__assert_fail@plt+0x2178>
   11fc0:	str	r2, [sp, #56]	; 0x38
   11fc4:	str	r0, [sp, #48]	; 0x30
   11fc8:	bl	18448 <__assert_fail@plt+0x748c>
   11fcc:	str	r0, [sp, #52]	; 0x34
   11fd0:	bl	10ee4 <strlen@plt>
   11fd4:	ldr	r3, [pc, #2500]	; 129a0 <__assert_fail@plt+0x19e4>
   11fd8:	str	r3, [sp, #44]	; 0x2c
   11fdc:	add	r0, r0, #20
   11fe0:	bl	18548 <__assert_fail@plt+0x758c>
   11fe4:	ldr	r3, [pc, #2484]	; 129a0 <__assert_fail@plt+0x19e4>
   11fe8:	ldr	r1, [pc, #2484]	; 129a4 <__assert_fail@plt+0x19e8>
   11fec:	ldr	r2, [sp, #52]	; 0x34
   11ff0:	ldr	r0, [r3]
   11ff4:	ldr	r1, [r1]
   11ff8:	ldr	r3, [pc, #2136]	; 12858 <__assert_fail@plt+0x189c>
   11ffc:	str	r2, [sp, #8]
   12000:	ldr	r2, [sp, #56]	; 0x38
   12004:	str	r3, [sp]
   12008:	str	r2, [sp, #4]
   1200c:	mvn	r3, #0
   12010:	mov	r2, #1
   12014:	bl	10fb0 <__snprintf_chk@plt>
   12018:	ldr	r0, [sp, #48]	; 0x30
   1201c:	bl	17ce8 <__assert_fail@plt+0x6d2c>
   12020:	ldr	r3, [sp, #44]	; 0x2c
   12024:	ldr	r0, [r3]
   12028:	bl	17d08 <__assert_fail@plt+0x6d4c>
   1202c:	b	11b0c <__assert_fail@plt+0xb50>
   12030:	ldr	r7, [r8, #-4]
   12034:	tst	r7, #8
   12038:	bne	1311c <__assert_fail@plt+0x2160>
   1203c:	orr	r7, r7, #5
   12040:	b	11b0c <__assert_fail@plt+0xb50>
   12044:	ldr	r7, [r8]
   12048:	mov	r0, r7
   1204c:	bl	10ee4 <strlen@plt>
   12050:	cmp	r0, #1
   12054:	beq	131ac <__assert_fail@plt+0x21f0>
   12058:	ldr	r0, [pc, #2044]	; 1285c <__assert_fail@plt+0x18a0>
   1205c:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12060:	mov	r0, r7
   12064:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12068:	ldr	r0, [pc, #2032]	; 12860 <__assert_fail@plt+0x18a4>
   1206c:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12070:	mov	r0, r7
   12074:	bl	10dd0 <free@plt>
   12078:	mov	r7, #1
   1207c:	b	11b0c <__assert_fail@plt+0xb50>
   12080:	ldr	r7, [r8]
   12084:	tst	r7, #8
   12088:	bne	13128 <__assert_fail@plt+0x216c>
   1208c:	ldr	r0, [pc, #2000]	; 12864 <__assert_fail@plt+0x18a8>
   12090:	bic	r7, r7, #4
   12094:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12098:	b	11b0c <__assert_fail@plt+0xb50>
   1209c:	ldr	r2, [pc, #2300]	; 129a0 <__assert_fail@plt+0x19e4>
   120a0:	ldr	r3, [r8]
   120a4:	mov	r1, r2
   120a8:	str	r2, [sp, #44]	; 0x2c
   120ac:	ldr	r2, [pc, #2288]	; 129a4 <__assert_fail@plt+0x19e8>
   120b0:	cmp	r3, #0
   120b4:	ldr	r0, [r1]
   120b8:	ldr	r1, [r2]
   120bc:	ldrlt	r2, [pc, #1956]	; 12868 <__assert_fail@plt+0x18ac>
   120c0:	ldrge	r2, [pc, #2100]	; 128fc <__assert_fail@plt+0x1940>
   120c4:	rsblt	r3, r3, #0
   120c8:	strd	r2, [sp]
   120cc:	mvn	r3, #0
   120d0:	mov	r2, #1
   120d4:	bl	10fb0 <__snprintf_chk@plt>
   120d8:	b	11ea8 <__assert_fail@plt+0xeec>
   120dc:	ldr	r7, [r8, #-8]
   120e0:	tst	r7, #8
   120e4:	bne	120f4 <__assert_fail@plt+0x1138>
   120e8:	ldr	r3, [r8]
   120ec:	tst	r3, #8
   120f0:	beq	120fc <__assert_fail@plt+0x1140>
   120f4:	ldr	r0, [pc, #1904]	; 1286c <__assert_fail@plt+0x18b0>
   120f8:	bl	186b0 <__assert_fail@plt+0x76f4>
   120fc:	ldr	r0, [pc, #1900]	; 12870 <__assert_fail@plt+0x18b4>
   12100:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12104:	ldr	r3, [r8]
   12108:	orr	r3, r7, r3
   1210c:	bic	r7, r3, #4
   12110:	b	11b0c <__assert_fail@plt+0xb50>
   12114:	ldr	r0, [pc, #1880]	; 12874 <__assert_fail@plt+0x18b8>
   12118:	bl	18784 <__assert_fail@plt+0x77c8>
   1211c:	mov	r7, #4
   12120:	b	11b0c <__assert_fail@plt+0xb50>
   12124:	ldr	r0, [pc, #1868]	; 12878 <__assert_fail@plt+0x18bc>
   12128:	bl	17d08 <__assert_fail@plt+0x6d4c>
   1212c:	ldr	r1, [pc, #2076]	; 12950 <__assert_fail@plt+0x1994>
   12130:	ldr	r3, [pc, #1964]	; 128e4 <__assert_fail@plt+0x1928>
   12134:	ldr	r0, [r8, #-48]	; 0xffffffd0
   12138:	mvn	r2, #0
   1213c:	str	r0, [r1]
   12140:	str	r2, [r3]
   12144:	b	11b0c <__assert_fail@plt+0xb50>
   12148:	ldr	r2, [r8]
   1214c:	ldr	r3, [r8, #-20]	; 0xffffffec
   12150:	mov	r1, r2
   12154:	mov	r0, r3
   12158:	str	r2, [sp, #48]	; 0x30
   1215c:	str	r3, [sp, #44]	; 0x2c
   12160:	bl	188e8 <__assert_fail@plt+0x792c>
   12164:	ldr	r0, [sp, #44]	; 0x2c
   12168:	bl	1840c <__assert_fail@plt+0x7450>
   1216c:	str	r0, [sp, #52]	; 0x34
   12170:	ldr	r0, [sp, #48]	; 0x30
   12174:	bl	1840c <__assert_fail@plt+0x7450>
   12178:	str	r0, [sp, #56]	; 0x38
   1217c:	ldr	r0, [sp, #52]	; 0x34
   12180:	bl	10ee4 <strlen@plt>
   12184:	str	r0, [sp, #60]	; 0x3c
   12188:	ldr	r0, [sp, #56]	; 0x38
   1218c:	bl	10ee4 <strlen@plt>
   12190:	ldr	r3, [sp, #60]	; 0x3c
   12194:	add	r0, r3, r0
   12198:	add	r0, r0, #30
   1219c:	bl	18548 <__assert_fail@plt+0x758c>
   121a0:	mov	r1, #3
   121a4:	ldr	r0, [r8, #-28]	; 0xffffffe4
   121a8:	bl	18a60 <__assert_fail@plt+0x7aa4>
   121ac:	ldr	r3, [pc, #2032]	; 129a4 <__assert_fail@plt+0x19e8>
   121b0:	ldr	r1, [pc, #2024]	; 129a0 <__assert_fail@plt+0x19e4>
   121b4:	ldr	lr, [sp, #56]	; 0x38
   121b8:	mov	r2, #1
   121bc:	mov	ip, r0
   121c0:	ldr	r0, [r1]
   121c4:	str	lr, [sp, #12]
   121c8:	ldr	lr, [sp, #52]	; 0x34
   121cc:	ldr	r1, [r3]
   121d0:	ldr	r3, [pc, #1700]	; 1287c <__assert_fail@plt+0x18c0>
   121d4:	stm	sp, {r3, ip, lr}
   121d8:	mvn	r3, #0
   121dc:	ldr	lr, [pc, #1792]	; 128e4 <__assert_fail@plt+0x1928>
   121e0:	str	ip, [lr]
   121e4:	bl	10fb0 <__snprintf_chk@plt>
   121e8:	ldr	r1, [pc, #1968]	; 129a0 <__assert_fail@plt+0x19e4>
   121ec:	ldr	r0, [r1]
   121f0:	bl	17d08 <__assert_fail@plt+0x6d4c>
   121f4:	ldr	lr, [pc, #1768]	; 128e4 <__assert_fail@plt+0x1928>
   121f8:	ldr	r2, [pc, #1536]	; 12800 <__assert_fail@plt+0x1844>
   121fc:	ldr	r1, [r8, #-32]	; 0xffffffe0
   12200:	ldr	r3, [lr]
   12204:	ldr	r2, [r2]
   12208:	ldr	r0, [sp, #44]	; 0x2c
   1220c:	rsb	r3, r3, r3, lsl #3
   12210:	add	r3, r2, r3, lsl #2
   12214:	strb	r1, [r3, #1]
   12218:	bl	17ce8 <__assert_fail@plt+0x6d2c>
   1221c:	ldr	r0, [sp, #48]	; 0x30
   12220:	bl	17ce8 <__assert_fail@plt+0x6d2c>
   12224:	ldr	r3, [pc, #1828]	; 12950 <__assert_fail@plt+0x1994>
   12228:	mov	r1, #1
   1222c:	ldr	r2, [r3]
   12230:	str	r1, [r3]
   12234:	str	r2, [r8, #-36]	; 0xffffffdc
   12238:	b	11b0c <__assert_fail@plt+0xb50>
   1223c:	ldr	r0, [pc, #1596]	; 12880 <__assert_fail@plt+0x18c4>
   12240:	bl	18784 <__assert_fail@plt+0x77c8>
   12244:	ldr	r3, [pc, #1880]	; 129a4 <__assert_fail@plt+0x19e8>
   12248:	ldr	lr, [pc, #1588]	; 12884 <__assert_fail@plt+0x18c8>
   1224c:	ldr	r2, [pc, #1788]	; 12950 <__assert_fail@plt+0x1994>
   12250:	ldr	r1, [r3]
   12254:	ldr	r3, [pc, #1860]	; 129a0 <__assert_fail@plt+0x19e4>
   12258:	ldr	ip, [r2]
   1225c:	ldr	r0, [r3]
   12260:	ldr	r3, [lr]
   12264:	str	ip, [r8]
   12268:	str	r3, [sp, #48]	; 0x30
   1226c:	add	lr, ip, #1
   12270:	str	ip, [sp, #4]
   12274:	ldr	r3, [pc, #1548]	; 12888 <__assert_fail@plt+0x18cc>
   12278:	str	ip, [sp, #44]	; 0x2c
   1227c:	ldr	ip, [sp, #48]	; 0x30
   12280:	str	r3, [sp]
   12284:	str	ip, [sp, #8]
   12288:	mvn	r3, #0
   1228c:	str	lr, [r2]
   12290:	mov	r2, #1
   12294:	bl	10fb0 <__snprintf_chk@plt>
   12298:	ldr	r3, [pc, #1792]	; 129a0 <__assert_fail@plt+0x19e4>
   1229c:	ldr	r0, [r3]
   122a0:	bl	17d08 <__assert_fail@plt+0x6d4c>
   122a4:	ldr	r3, [pc, #1496]	; 12884 <__assert_fail@plt+0x18c8>
   122a8:	ldr	ip, [sp, #44]	; 0x2c
   122ac:	str	ip, [r3]
   122b0:	b	11b0c <__assert_fail@plt+0xb50>
   122b4:	ldr	r3, [r8]
   122b8:	tst	r3, #8
   122bc:	bne	131cc <__assert_fail@plt+0x2210>
   122c0:	ldr	r0, [pc, #1476]	; 1288c <__assert_fail@plt+0x18d0>
   122c4:	bl	17d08 <__assert_fail@plt+0x6d4c>
   122c8:	b	11b0c <__assert_fail@plt+0xb50>
   122cc:	ldr	r0, [pc, #1468]	; 12890 <__assert_fail@plt+0x18d4>
   122d0:	bl	17d08 <__assert_fail@plt+0x6d4c>
   122d4:	ldr	r3, [r8]
   122d8:	mov	r0, r3
   122dc:	str	r3, [sp, #44]	; 0x2c
   122e0:	bl	17d08 <__assert_fail@plt+0x6d4c>
   122e4:	ldr	r3, [sp, #44]	; 0x2c
   122e8:	mov	r0, r3
   122ec:	bl	10dd0 <free@plt>
   122f0:	b	11b0c <__assert_fail@plt+0xb50>
   122f4:	ldr	r0, [pc, #1432]	; 12894 <__assert_fail@plt+0x18d8>
   122f8:	bl	18784 <__assert_fail@plt+0x77c8>
   122fc:	b	11b0c <__assert_fail@plt+0xb50>
   12300:	bl	18560 <__assert_fail@plt+0x75a4>
   12304:	mov	r3, #0
   12308:	str	r3, [sp, #32]
   1230c:	b	11b0c <__assert_fail@plt+0xb50>
   12310:	ldr	r0, [pc, #1408]	; 12898 <__assert_fail@plt+0x18dc>
   12314:	bl	18784 <__assert_fail@plt+0x77c8>
   12318:	ldr	r0, [pc, #1404]	; 1289c <__assert_fail@plt+0x18e0>
   1231c:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12320:	mov	r7, #1
   12324:	b	11b0c <__assert_fail@plt+0xb50>
   12328:	ldr	r0, [r8, #-8]
   1232c:	ldr	r7, [r8, #-16]
   12330:	mov	r1, #1
   12334:	bl	18a60 <__assert_fail@plt+0x7aa4>
   12338:	mov	r2, #0
   1233c:	mov	r1, r0
   12340:	mov	r0, r7
   12344:	bl	182d4 <__assert_fail@plt+0x7318>
   12348:	mov	r7, r0
   1234c:	b	11b0c <__assert_fail@plt+0xb50>
   12350:	mov	r1, #0
   12354:	ldr	r0, [r8]
   12358:	ldr	r7, [r8, #-8]
   1235c:	b	12334 <__assert_fail@plt+0x1378>
   12360:	ldr	r7, [r8]
   12364:	tst	r7, #2
   12368:	bne	131e4 <__assert_fail@plt+0x2228>
   1236c:	tst	r7, #8
   12370:	bne	131d8 <__assert_fail@plt+0x221c>
   12374:	mov	r2, #0
   12378:	mov	r1, r2
   1237c:	ldr	r0, [r8, #-8]
   12380:	bl	182d4 <__assert_fail@plt+0x7318>
   12384:	mov	r7, r0
   12388:	b	11b0c <__assert_fail@plt+0xb50>
   1238c:	ldr	r7, [pc, #1548]	; 129a0 <__assert_fail@plt+0x19e4>
   12390:	ldr	r3, [pc, #1548]	; 129a4 <__assert_fail@plt+0x19e8>
   12394:	mov	r1, #1
   12398:	ldr	r2, [r7]
   1239c:	ldr	r0, [r8, #-8]
   123a0:	str	r2, [sp, #44]	; 0x2c
   123a4:	ldr	r2, [r3]
   123a8:	str	r2, [sp, #48]	; 0x30
   123ac:	bl	18a60 <__assert_fail@plt+0x7aa4>
   123b0:	ldr	r2, [sp, #48]	; 0x30
   123b4:	ldr	r3, [pc, #1328]	; 128ec <__assert_fail@plt+0x1930>
   123b8:	mov	r1, r2
   123bc:	str	r3, [sp]
   123c0:	mov	r2, #1
   123c4:	mvn	r3, #0
   123c8:	rsb	r0, r0, #0
   123cc:	str	r0, [sp, #4]
   123d0:	ldr	r0, [sp, #44]	; 0x2c
   123d4:	bl	10fb0 <__snprintf_chk@plt>
   123d8:	ldr	r0, [r7]
   123dc:	bl	17d08 <__assert_fail@plt+0x6d4c>
   123e0:	mov	r2, #0
   123e4:	mov	r0, r2
   123e8:	mov	r1, #1
   123ec:	bl	182d4 <__assert_fail@plt+0x7318>
   123f0:	mov	r7, r0
   123f4:	b	11b0c <__assert_fail@plt+0xb50>
   123f8:	ldr	r7, [r8]
   123fc:	tst	r7, #2
   12400:	bne	13264 <__assert_fail@plt+0x22a8>
   12404:	tst	r7, #8
   12408:	bne	13258 <__assert_fail@plt+0x229c>
   1240c:	mov	r2, #0
   12410:	mov	r1, r2
   12414:	mov	r0, r2
   12418:	bl	182d4 <__assert_fail@plt+0x7318>
   1241c:	mov	r7, r0
   12420:	b	11b0c <__assert_fail@plt+0xb50>
   12424:	ldr	r0, [r8]
   12428:	mov	r1, #0
   1242c:	bl	18a60 <__assert_fail@plt+0x7aa4>
   12430:	mov	r2, #0
   12434:	mov	r1, r0
   12438:	mov	r0, r2
   1243c:	bl	182d4 <__assert_fail@plt+0x7318>
   12440:	mov	r7, r0
   12444:	b	11b0c <__assert_fail@plt+0xb50>
   12448:	ldr	r0, [pc, #1104]	; 128a0 <__assert_fail@plt+0x18e4>
   1244c:	bl	18784 <__assert_fail@plt+0x77c8>
   12450:	mov	r7, #1
   12454:	b	11b0c <__assert_fail@plt+0xb50>
   12458:	ldr	r3, [pc, #1348]	; 129a4 <__assert_fail@plt+0x19e8>
   1245c:	ldr	r2, [pc, #1056]	; 12884 <__assert_fail@plt+0x18c8>
   12460:	ldr	r1, [r3]
   12464:	ldr	r3, [pc, #1332]	; 129a0 <__assert_fail@plt+0x19e4>
   12468:	ldr	r2, [r2]
   1246c:	ldr	r0, [r3]
   12470:	ldr	r3, [pc, #1068]	; 128a4 <__assert_fail@plt+0x18e8>
   12474:	str	r2, [sp, #4]
   12478:	str	r3, [sp]
   1247c:	mov	r2, #1
   12480:	mvn	r3, #0
   12484:	bl	10fb0 <__snprintf_chk@plt>
   12488:	ldr	r3, [pc, #1296]	; 129a0 <__assert_fail@plt+0x19e4>
   1248c:	ldr	r0, [r3]
   12490:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12494:	ldr	r2, [pc, #1000]	; 12884 <__assert_fail@plt+0x18c8>
   12498:	ldr	r3, [r8, #-20]	; 0xffffffec
   1249c:	str	r3, [r2]
   124a0:	b	11b0c <__assert_fail@plt+0xb50>
   124a4:	ldr	r3, [r8, #-4]
   124a8:	tst	r3, #8
   124ac:	bne	13194 <__assert_fail@plt+0x21d8>
   124b0:	ldr	r3, [pc, #1260]	; 129a4 <__assert_fail@plt+0x19e8>
   124b4:	ldr	ip, [pc, #1172]	; 12950 <__assert_fail@plt+0x1994>
   124b8:	ldr	r2, [pc, #964]	; 12884 <__assert_fail@plt+0x18c8>
   124bc:	ldr	r1, [r3]
   124c0:	ldr	r3, [ip]
   124c4:	ldr	r0, [r2]
   124c8:	str	r0, [r8, #-4]
   124cc:	ldr	r0, [pc, #1228]	; 129a0 <__assert_fail@plt+0x19e4>
   124d0:	ldr	lr, [pc, #976]	; 128a8 <__assert_fail@plt+0x18ec>
   124d4:	ldr	r0, [r0]
   124d8:	str	r3, [sp, #4]
   124dc:	str	lr, [sp]
   124e0:	str	r3, [r2]
   124e4:	add	r2, r3, #1
   124e8:	mvn	r3, #0
   124ec:	str	r2, [ip]
   124f0:	mov	r2, #1
   124f4:	bl	10fb0 <__snprintf_chk@plt>
   124f8:	ldr	r0, [pc, #1184]	; 129a0 <__assert_fail@plt+0x19e4>
   124fc:	ldr	r0, [r0]
   12500:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12504:	b	11b0c <__assert_fail@plt+0xb50>
   12508:	ldr	r3, [pc, #1172]	; 129a4 <__assert_fail@plt+0x19e8>
   1250c:	ldr	lr, [pc, #808]	; 1283c <__assert_fail@plt+0x1880>
   12510:	ldr	r2, [pc, #812]	; 12844 <__assert_fail@plt+0x1888>
   12514:	ldr	r1, [r3]
   12518:	ldr	r3, [pc, #1152]	; 129a0 <__assert_fail@plt+0x19e4>
   1251c:	ldr	ip, [r2]
   12520:	ldr	r2, [lr]
   12524:	ldr	r0, [r3]
   12528:	ldr	r3, [pc, #892]	; 128ac <__assert_fail@plt+0x18f0>
   1252c:	stmib	sp, {r2, ip}
   12530:	str	r3, [sp]
   12534:	mov	r2, #1
   12538:	mvn	r3, #0
   1253c:	bl	10fb0 <__snprintf_chk@plt>
   12540:	ldr	r3, [pc, #1112]	; 129a0 <__assert_fail@plt+0x19e4>
   12544:	ldr	r0, [r3]
   12548:	bl	17d08 <__assert_fail@plt+0x6d4c>
   1254c:	ldr	r1, [pc, #752]	; 12844 <__assert_fail@plt+0x1888>
   12550:	ldr	lr, [pc, #740]	; 1283c <__assert_fail@plt+0x1880>
   12554:	ldr	r2, [r8, #-52]	; 0xffffffcc
   12558:	ldr	r3, [r8, #-20]	; 0xffffffec
   1255c:	str	r2, [r1]
   12560:	str	r3, [lr]
   12564:	b	11b0c <__assert_fail@plt+0xb50>
   12568:	ldr	r2, [r8, #-4]
   1256c:	tst	r2, #2
   12570:	bne	13244 <__assert_fail@plt+0x2288>
   12574:	tst	r2, #8
   12578:	bne	13230 <__assert_fail@plt+0x2274>
   1257c:	ldr	r3, [pc, #1052]	; 129a0 <__assert_fail@plt+0x19e4>
   12580:	tst	r2, #16
   12584:	mov	r1, r3
   12588:	str	r3, [sp, #44]	; 0x2c
   1258c:	ldr	r3, [pc, #1040]	; 129a4 <__assert_fail@plt+0x19e8>
   12590:	ldr	r2, [r8, #-16]
   12594:	ldr	r0, [r1]
   12598:	ldr	r1, [r3]
   1259c:	ldrne	r3, [pc, #776]	; 128ac <__assert_fail@plt+0x18f0>
   125a0:	ldreq	r3, [pc, #776]	; 128b0 <__assert_fail@plt+0x18f4>
   125a4:	str	r2, [sp, #8]
   125a8:	ldr	r2, [r8, #-28]	; 0xffffffe4
   125ac:	str	r3, [sp]
   125b0:	str	r2, [sp, #4]
   125b4:	mvn	r3, #0
   125b8:	mov	r2, #1
   125bc:	bl	10fb0 <__snprintf_chk@plt>
   125c0:	b	12020 <__assert_fail@plt+0x1064>
   125c4:	ldr	r7, [r8, #-4]
   125c8:	tst	r7, #8
   125cc:	bne	13188 <__assert_fail@plt+0x21cc>
   125d0:	tst	r7, #16
   125d4:	bne	1317c <__assert_fail@plt+0x21c0>
   125d8:	ldr	r7, [pc, #880]	; 12950 <__assert_fail@plt+0x1994>
   125dc:	ldr	r2, [pc, #608]	; 12844 <__assert_fail@plt+0x1888>
   125e0:	ldr	r1, [pc, #956]	; 129a4 <__assert_fail@plt+0x19e8>
   125e4:	ldr	r3, [r7]
   125e8:	ldr	r0, [pc, #944]	; 129a0 <__assert_fail@plt+0x19e4>
   125ec:	ldr	lr, [r2]
   125f0:	ldr	r2, [pc, #700]	; 128b4 <__assert_fail@plt+0x18f8>
   125f4:	add	ip, r3, #1
   125f8:	ldr	r1, [r1]
   125fc:	str	r3, [r8, #-4]
   12600:	ldr	r0, [r0]
   12604:	str	lr, [sp, #8]
   12608:	str	r3, [sp, #4]
   1260c:	str	r2, [sp]
   12610:	mvn	r3, #0
   12614:	str	ip, [r7]
   12618:	mov	r2, #1
   1261c:	bl	10fb0 <__snprintf_chk@plt>
   12620:	ldr	r0, [pc, #888]	; 129a0 <__assert_fail@plt+0x19e4>
   12624:	ldr	r0, [r0]
   12628:	bl	17d08 <__assert_fail@plt+0x6d4c>
   1262c:	ldr	ip, [r7]
   12630:	ldr	lr, [pc, #516]	; 1283c <__assert_fail@plt+0x1880>
   12634:	ldr	r1, [pc, #872]	; 129a4 <__assert_fail@plt+0x19e8>
   12638:	ldr	r0, [pc, #864]	; 129a0 <__assert_fail@plt+0x19e4>
   1263c:	ldr	r3, [pc, #608]	; 128a4 <__assert_fail@plt+0x18e8>
   12640:	add	r2, ip, #1
   12644:	ldr	r1, [r1]
   12648:	ldr	r0, [r0]
   1264c:	str	r3, [sp]
   12650:	str	ip, [sp, #4]
   12654:	mvn	r3, #0
   12658:	str	r2, [r7]
   1265c:	ldr	r7, [lr]
   12660:	mov	r2, #1
   12664:	str	ip, [lr]
   12668:	bl	10fb0 <__snprintf_chk@plt>
   1266c:	ldr	r0, [pc, #812]	; 129a0 <__assert_fail@plt+0x19e4>
   12670:	ldr	r0, [r0]
   12674:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12678:	b	11b0c <__assert_fail@plt+0xb50>
   1267c:	ldr	r3, [r8, #-4]
   12680:	tst	r3, #2
   12684:	bne	1321c <__assert_fail@plt+0x2260>
   12688:	tst	r3, #8
   1268c:	bne	13208 <__assert_fail@plt+0x224c>
   12690:	tst	r3, #16
   12694:	beq	131fc <__assert_fail@plt+0x2240>
   12698:	ldr	r2, [pc, #772]	; 129a4 <__assert_fail@plt+0x19e8>
   1269c:	ldr	ip, [pc, #684]	; 12950 <__assert_fail@plt+0x1994>
   126a0:	ldr	lr, [pc, #508]	; 128a4 <__assert_fail@plt+0x18e8>
   126a4:	ldr	r1, [r2]
   126a8:	ldr	r2, [pc, #752]	; 129a0 <__assert_fail@plt+0x19e4>
   126ac:	ldr	r3, [ip]
   126b0:	ldr	r0, [r2]
   126b4:	add	r2, r3, #1
   126b8:	str	r3, [r8, #-4]
   126bc:	str	r3, [sp, #4]
   126c0:	str	lr, [sp]
   126c4:	mvn	r3, #0
   126c8:	str	r2, [ip]
   126cc:	mov	r2, #1
   126d0:	bl	10fb0 <__snprintf_chk@plt>
   126d4:	ldr	r2, [pc, #708]	; 129a0 <__assert_fail@plt+0x19e4>
   126d8:	ldr	r0, [r2]
   126dc:	bl	17d08 <__assert_fail@plt+0x6d4c>
   126e0:	b	11b0c <__assert_fail@plt+0xb50>
   126e4:	ldr	r0, [pc, #460]	; 128b8 <__assert_fail@plt+0x18fc>
   126e8:	bl	18784 <__assert_fail@plt+0x77c8>
   126ec:	b	11b0c <__assert_fail@plt+0xb50>
   126f0:	ldr	r3, [r8]
   126f4:	tst	r3, #8
   126f8:	bne	131a0 <__assert_fail@plt+0x21e4>
   126fc:	ldr	r2, [pc, #320]	; 12844 <__assert_fail@plt+0x1888>
   12700:	ldr	r3, [pc, #668]	; 129a4 <__assert_fail@plt+0x19e8>
   12704:	ldr	ip, [pc, #580]	; 12950 <__assert_fail@plt+0x1994>
   12708:	ldr	r0, [r2]
   1270c:	ldr	r1, [r3]
   12710:	str	r0, [r8]
   12714:	ldr	r3, [ip]
   12718:	b	124cc <__assert_fail@plt+0x1510>
   1271c:	ldr	r2, [pc, #280]	; 1283c <__assert_fail@plt+0x1880>
   12720:	ldr	r3, [pc, #636]	; 129a4 <__assert_fail@plt+0x19e8>
   12724:	ldr	ip, [pc, #548]	; 12950 <__assert_fail@plt+0x1994>
   12728:	ldr	r0, [r2]
   1272c:	ldr	r1, [r3]
   12730:	str	r0, [r8]
   12734:	ldr	r0, [pc, #612]	; 129a0 <__assert_fail@plt+0x19e4>
   12738:	ldr	r3, [ip]
   1273c:	ldr	lr, [pc, #352]	; 128a4 <__assert_fail@plt+0x18e8>
   12740:	ldr	r0, [r0]
   12744:	b	124d8 <__assert_fail@plt+0x151c>
   12748:	ldr	r1, [pc, #512]	; 12950 <__assert_fail@plt+0x1994>
   1274c:	ldr	r3, [pc, #240]	; 12844 <__assert_fail@plt+0x1888>
   12750:	ldr	r2, [r1]
   12754:	ldr	r0, [r3]
   12758:	add	ip, r2, #1
   1275c:	str	ip, [r1]
   12760:	str	r2, [r3]
   12764:	str	r0, [r8]
   12768:	b	11b0c <__assert_fail@plt+0xb50>
   1276c:	ldr	r0, [pc, #328]	; 128bc <__assert_fail@plt+0x1900>
   12770:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12774:	b	11b0c <__assert_fail@plt+0xb50>
   12778:	bl	181cc <__assert_fail@plt+0x7210>
   1277c:	b	11b0c <__assert_fail@plt+0xb50>
   12780:	ldr	r0, [pc, #312]	; 128c0 <__assert_fail@plt+0x1904>
   12784:	bl	18ed4 <__assert_fail@plt+0x7f18>
   12788:	b	11b0c <__assert_fail@plt+0xb50>
   1278c:	ldr	r3, [pc, #528]	; 129a4 <__assert_fail@plt+0x19e8>
   12790:	ldr	lr, [pc, #164]	; 1283c <__assert_fail@plt+0x1880>
   12794:	ldr	r2, [pc, #168]	; 12844 <__assert_fail@plt+0x1888>
   12798:	ldr	r1, [r3]
   1279c:	ldr	r3, [pc, #508]	; 129a0 <__assert_fail@plt+0x19e4>
   127a0:	ldr	ip, [r2]
   127a4:	ldr	r2, [lr]
   127a8:	ldr	r0, [r3]
   127ac:	ldr	r3, [pc, #248]	; 128ac <__assert_fail@plt+0x18f0>
   127b0:	stmib	sp, {r2, ip}
   127b4:	str	r3, [sp]
   127b8:	mov	r2, #1
   127bc:	mvn	r3, #0
   127c0:	bl	10fb0 <__snprintf_chk@plt>
   127c4:	ldr	r3, [pc, #468]	; 129a0 <__assert_fail@plt+0x19e4>
   127c8:	ldr	r0, [r3]
   127cc:	bl	17d08 <__assert_fail@plt+0x6d4c>
   127d0:	ldr	r1, [pc, #108]	; 12844 <__assert_fail@plt+0x1888>
   127d4:	ldr	lr, [pc, #96]	; 1283c <__assert_fail@plt+0x1880>
   127d8:	ldr	r2, [r8, #-16]
   127dc:	ldr	r3, [r8, #-28]	; 0xffffffe4
   127e0:	str	r2, [r1]
   127e4:	str	r3, [lr]
   127e8:	b	11b0c <__assert_fail@plt+0xb50>
   127ec:	andeq	r0, r3, r0, lsl lr
   127f0:	andeq	ip, r1, r0, lsr #15
   127f4:	andeq	r1, r3, ip, lsl #4
   127f8:	andeq	r1, r3, r0, lsl r2
   127fc:	andeq	ip, r1, r4, asr sl
   12800:	andeq	r1, r3, r8, ror r2
   12804:	muleq	r1, r8, sl
   12808:	andeq	sp, r1, ip, lsl #15
   1280c:	andeq	r2, r0, pc, lsl #14
   12810:	andeq	r2, r0, r0, lsl r7
   12814:	andeq	r0, r0, pc, asr #5
   12818:	andeq	r1, r3, r4, lsl r2
   1281c:	andeq	sp, r1, r0, lsr lr
   12820:	andeq	sp, r1, r0, asr #28
   12824:	andeq	sp, r1, r0, lsr #19
   12828:	ldrdeq	sp, [r1], -ip
   1282c:	andeq	sp, r1, r8, ror #25
   12830:	andeq	sp, r1, r0, lsr ip
   12834:	andeq	sp, r1, r8, asr #24
   12838:	andeq	sp, r1, r0, lsr r8
   1283c:	andeq	r1, r3, ip, lsr r2
   12840:	andeq	sp, r1, r4, asr #16
   12844:	andeq	r1, r3, r0, asr #4
   12848:	andeq	sp, r1, ip, lsl #16
   1284c:	andeq	sp, r1, r4, lsl ip
   12850:	andeq	sp, r1, ip, lsr #24
   12854:	andeq	pc, r1, r0, asr #21
   12858:			; <UNDEFINED> instruction: 0x0001dcb4
   1285c:	muleq	r1, r0, ip
   12860:	muleq	r1, ip, sp
   12864:	andeq	sp, r1, r8, lsl #27
   12868:	andeq	sp, r1, r8, lsl #25
   1286c:	andeq	sp, r1, ip, asr #24
   12870:	andeq	sp, r1, r4, ror #24
   12874:	strdeq	sp, [r1], -r0
   12878:	andeq	sp, r1, ip, lsl #19
   1287c:	andeq	sp, r1, r0, lsl #19
   12880:	andeq	sp, r1, r8, asr r9
   12884:	andeq	r1, r3, r8, ror #4
   12888:	andeq	sp, r1, r4, ror r9
   1288c:	andeq	sp, r1, r4, asr r9
   12890:	andeq	sp, r1, r4, lsr r9
   12894:	andeq	sp, r1, r4, lsr #18
   12898:	andeq	sp, r1, ip, ror sp
   1289c:	andeq	sp, r1, ip, lsl #27
   128a0:	muleq	r1, r0, r9
   128a4:	andeq	sp, r1, r8, ror r9
   128a8:	andeq	sp, r1, ip, lsl r9
   128ac:	andeq	sp, r1, r4, lsl #18
   128b0:	andeq	sp, r1, r0, lsl r9
   128b4:			; <UNDEFINED> instruction: 0x0001d8b8
   128b8:	andeq	sp, r1, r0, lsl #28
   128bc:	ldrdeq	pc, [r1], -ip
   128c0:	andeq	ip, r1, r0, lsr r7
   128c4:	andeq	sp, r1, ip, lsl #22
   128c8:	andeq	sp, r1, r4, lsr #22
   128cc:	strdeq	sp, [r1], -r8
   128d0:	andeq	sp, r1, r4, lsl #22
   128d4:	andeq	pc, r1, r4, asr #11
   128d8:	andeq	sp, r1, r8, ror #21
   128dc:	strdeq	sp, [r1], -r0
   128e0:	andeq	sp, r1, r0, asr #21
   128e4:	muleq	r3, r8, r0
   128e8:	andeq	sp, r1, r8, ror #19
   128ec:	andeq	sp, r1, r0, ror #19
   128f0:	andeq	sp, r1, r8, ror sp
   128f4:	andeq	sp, r1, r8, asr sp
   128f8:	andeq	sp, r1, r8, lsr sp
   128fc:	andeq	sp, r1, ip, ror #25
   12900:	andeq	sp, r1, ip, lsl #26
   12904:	andeq	sp, r1, r4, lsl sp
   12908:	andeq	sp, r1, r8, lsl #16
   1290c:	andeq	sp, r1, r8, lsl lr
   12910:	ldrdeq	sp, [r1], -r4
   12914:	andeq	sp, r1, r0, lsr fp
   12918:	andeq	sp, r1, ip, lsr fp
   1291c:	muleq	r1, r0, sp
   12920:	andeq	sp, r1, r0, lsr #27
   12924:	ldrdeq	sp, [r1], -ip
   12928:	strdeq	r1, [r3], -ip
   1292c:	andeq	r1, r3, r8, ror #3
   12930:	andeq	sp, r1, ip, asr #23
   12934:	ldrdeq	pc, [r1], -ip
   12938:	muleq	r1, r8, fp
   1293c:	strdeq	sp, [r1], -ip
   12940:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   12944:	andeq	sp, r1, r8, lsl #23
   12948:	muleq	r1, r4, fp
   1294c:	andeq	sp, r1, r4, asr #22
   12950:	andeq	r1, r3, r8, asr #4
   12954:	andeq	sp, r1, ip, asr fp
   12958:	andeq	sp, r1, r4, lsl #16
   1295c:	andeq	sp, r1, r4, ror #23
   12960:	muleq	r1, r8, r9
   12964:			; <UNDEFINED> instruction: 0x0001dbb8
   12968:			; <UNDEFINED> instruction: 0x0001dbbc
   1296c:			; <UNDEFINED> instruction: 0x000206b0
   12970:	andeq	sp, r1, r0, asr #23
   12974:	andeq	sp, r1, r4, asr #23
   12978:	andeq	sp, r1, r8, asr #23
   1297c:	andeq	sp, r1, r8, lsr #16
   12980:	andeq	sp, r1, r4, asr #25
   12984:	ldrdeq	sp, [r1], -r0
   12988:	strdeq	sp, [r1], -r4
   1298c:	strdeq	sp, [r1], -ip
   12990:	andeq	sp, r1, r4, lsl #26
   12994:	andeq	sp, r1, r8, ror #15
   12998:	muleq	r1, r4, ip
   1299c:	andeq	sp, r1, r8, ror #24
   129a0:	andeq	r1, r3, r4, lsl #4
   129a4:	andeq	r1, r3, r0, lsl #4
   129a8:			; <UNDEFINED> instruction: 0x0001dcbc
   129ac:	andeq	sp, r1, ip, lsl sp
   129b0:	andeq	sp, r1, r0, ror fp
   129b4:	muleq	r1, ip, r8
   129b8:	ldrdeq	sp, [r1], -r8
   129bc:	andeq	r0, r2, r8, lsr #6
   129c0:	andeq	sp, r1, r8, lsr r9
   129c4:	andeq	sp, r1, r8, asr #21
   129c8:	andeq	r0, r2, r0, lsl r2
   129cc:	andeq	sp, r1, r0, lsl #17
   129d0:	andeq	sp, r1, ip, asr r8
   129d4:	andeq	sp, r1, r8, ror #17
   129d8:	andeq	sp, r1, r4, asr #17
   129dc:	ldrdeq	sp, [r1], -r0
   129e0:			; <UNDEFINED> instruction: 0x0001d9b8
   129e4:	andeq	sp, r1, r4, ror sl
   129e8:	andeq	sp, r1, ip, asr #20
   129ec:	andeq	sp, r1, ip, lsr #20
   129f0:	andeq	sp, r1, ip, asr sp
   129f4:	andeq	sp, r1, ip, lsr sp
   129f8:	andeq	sp, r1, r4, asr #27
   129fc:	andeq	sp, r1, r4, lsr #27
   12a00:	andeq	sp, r1, ip, lsl #20
   12a04:	andeq	r0, r2, r0, lsl r1
   12a08:	mov	r7, #1
   12a0c:	b	11b0c <__assert_fail@plt+0xb50>
   12a10:	ldr	r3, [r8, #-12]
   12a14:	tst	r3, #8
   12a18:	str	r3, [sp, #44]	; 0x2c
   12a1c:	bne	12a2c <__assert_fail@plt+0x1a70>
   12a20:	ldr	r3, [r8]
   12a24:	tst	r3, #8
   12a28:	beq	12a34 <__assert_fail@plt+0x1a78>
   12a2c:	ldr	r0, [pc, #-368]	; 128c4 <__assert_fail@plt+0x1908>
   12a30:	bl	186b0 <__assert_fail@plt+0x76f4>
   12a34:	ldr	r2, [pc, #-152]	; 129a4 <__assert_fail@plt+0x19e8>
   12a38:	ldr	r3, [r8, #-8]
   12a3c:	ldr	r7, [pc, #-164]	; 129a0 <__assert_fail@plt+0x19e4>
   12a40:	ldr	r1, [r2]
   12a44:	ldr	r2, [pc, #-388]	; 128c8 <__assert_fail@plt+0x190c>
   12a48:	ldr	r0, [r7]
   12a4c:	str	r3, [sp, #8]
   12a50:	strd	r2, [sp]
   12a54:	mvn	r3, #0
   12a58:	mov	r2, #1
   12a5c:	bl	10fb0 <__snprintf_chk@plt>
   12a60:	ldr	r0, [r7]
   12a64:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12a68:	ldr	r3, [r8]
   12a6c:	ldr	r2, [sp, #44]	; 0x2c
   12a70:	orr	r7, r2, r3
   12a74:	bic	r7, r7, #4
   12a78:	b	11b0c <__assert_fail@plt+0xb50>
   12a7c:	ldr	r0, [pc, #-440]	; 128cc <__assert_fail@plt+0x1910>
   12a80:	bl	18784 <__assert_fail@plt+0x77c8>
   12a84:	ldr	r3, [pc, #-236]	; 129a0 <__assert_fail@plt+0x19e4>
   12a88:	ldr	ip, [pc, #-320]	; 12950 <__assert_fail@plt+0x1994>
   12a8c:	ldr	r2, [pc, #-240]	; 129a4 <__assert_fail@plt+0x19e8>
   12a90:	ldr	r0, [r3]
   12a94:	ldr	lr, [pc, #-460]	; 128d0 <__assert_fail@plt+0x1914>
   12a98:	ldr	r3, [ip]
   12a9c:	ldr	r1, [r2]
   12aa0:	add	r2, r3, #1
   12aa4:	str	r3, [r8]
   12aa8:	str	r3, [sp, #4]
   12aac:	str	lr, [sp]
   12ab0:	mvn	r3, #0
   12ab4:	str	r2, [ip]
   12ab8:	mov	r2, #1
   12abc:	bl	10fb0 <__snprintf_chk@plt>
   12ac0:	ldr	r3, [pc, #-296]	; 129a0 <__assert_fail@plt+0x19e4>
   12ac4:	ldr	r0, [r3]
   12ac8:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12acc:	b	11b0c <__assert_fail@plt+0xb50>
   12ad0:	ldr	r3, [r8]
   12ad4:	tst	r3, #8
   12ad8:	bne	131f0 <__assert_fail@plt+0x2234>
   12adc:	ldrb	r3, [r8, #-8]
   12ae0:	ldr	r2, [pc, #-328]	; 129a0 <__assert_fail@plt+0x19e4>
   12ae4:	ldr	r7, [pc, #-328]	; 129a4 <__assert_fail@plt+0x19e8>
   12ae8:	cmp	r3, #61	; 0x3d
   12aec:	str	r2, [sp, #44]	; 0x2c
   12af0:	ldr	r0, [r2]
   12af4:	ldr	r1, [r7]
   12af8:	beq	12b28 <__assert_fail@plt+0x1b6c>
   12afc:	ldr	r2, [pc, #-560]	; 128d4 <__assert_fail@plt+0x1918>
   12b00:	strd	r2, [sp]
   12b04:	mvn	r3, #0
   12b08:	mov	r2, #1
   12b0c:	bl	10fb0 <__snprintf_chk@plt>
   12b10:	ldr	r2, [sp, #44]	; 0x2c
   12b14:	ldr	r0, [r2]
   12b18:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12b1c:	ldr	r2, [sp, #44]	; 0x2c
   12b20:	ldr	r1, [r7]
   12b24:	ldr	r0, [r2]
   12b28:	ldr	r3, [r8, #-12]
   12b2c:	mov	r7, #0
   12b30:	cmp	r3, #0
   12b34:	rsblt	r3, r3, #0
   12b38:	ldrlt	r2, [pc, #-616]	; 128d8 <__assert_fail@plt+0x191c>
   12b3c:	ldrge	r2, [pc, #-616]	; 128dc <__assert_fail@plt+0x1920>
   12b40:	strd	r2, [sp]
   12b44:	mvn	r3, #0
   12b48:	mov	r2, #1
   12b4c:	bl	10fb0 <__snprintf_chk@plt>
   12b50:	ldr	r3, [sp, #44]	; 0x2c
   12b54:	ldr	r0, [r3]
   12b58:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12b5c:	b	11b0c <__assert_fail@plt+0xb50>
   12b60:	ldrb	r3, [r8]
   12b64:	cmp	r3, #61	; 0x3d
   12b68:	beq	11b0c <__assert_fail@plt+0xb50>
   12b6c:	ldr	r2, [pc, #-468]	; 129a0 <__assert_fail@plt+0x19e4>
   12b70:	ldr	r3, [r8, #-4]
   12b74:	mov	r1, r2
   12b78:	str	r2, [sp, #44]	; 0x2c
   12b7c:	ldr	r2, [pc, #-480]	; 129a4 <__assert_fail@plt+0x19e8>
   12b80:	cmp	r3, #0
   12b84:	ldr	r0, [r1]
   12b88:	ldr	r1, [r2]
   12b8c:	ldrlt	r2, [pc, #-692]	; 128e0 <__assert_fail@plt+0x1924>
   12b90:	ldrge	r2, [pc, #-668]	; 128fc <__assert_fail@plt+0x1940>
   12b94:	rsblt	r3, r3, #0
   12b98:	strd	r2, [sp]
   12b9c:	mvn	r3, #0
   12ba0:	mov	r2, #1
   12ba4:	bl	10fb0 <__snprintf_chk@plt>
   12ba8:	b	12020 <__assert_fail@plt+0x1064>
   12bac:	ldr	r0, [pc, #-432]	; 12a04 <__assert_fail@plt+0x1a48>
   12bb0:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12bb4:	ldr	r3, [pc, #-728]	; 128e4 <__assert_fail@plt+0x1928>
   12bb8:	ldr	r3, [r3]
   12bbc:	cmn	r3, #1
   12bc0:	bne	11dc8 <__assert_fail@plt+0xe0c>
   12bc4:	ldr	r0, [pc, #-460]	; 12a00 <__assert_fail@plt+0x1a44>
   12bc8:	bl	186b0 <__assert_fail@plt+0x76f4>
   12bcc:	mov	r7, #0
   12bd0:	b	11b0c <__assert_fail@plt+0xb50>
   12bd4:	ldr	r0, [pc, #-756]	; 128e8 <__assert_fail@plt+0x192c>
   12bd8:	bl	18784 <__assert_fail@plt+0x77c8>
   12bdc:	mov	r7, #16
   12be0:	b	11b0c <__assert_fail@plt+0xb50>
   12be4:	ldr	r7, [pc, #-588]	; 129a0 <__assert_fail@plt+0x19e4>
   12be8:	ldr	r3, [pc, #-588]	; 129a4 <__assert_fail@plt+0x19e8>
   12bec:	mov	r1, #1
   12bf0:	ldr	r2, [r7]
   12bf4:	ldr	r0, [r8, #-8]
   12bf8:	str	r2, [sp, #44]	; 0x2c
   12bfc:	ldr	r2, [r3]
   12c00:	str	r2, [sp, #48]	; 0x30
   12c04:	bl	18a60 <__assert_fail@plt+0x7aa4>
   12c08:	ldr	r2, [sp, #48]	; 0x30
   12c0c:	ldr	r3, [pc, #-808]	; 128ec <__assert_fail@plt+0x1930>
   12c10:	mov	r1, r2
   12c14:	str	r3, [sp]
   12c18:	mov	r2, #1
   12c1c:	mvn	r3, #0
   12c20:	rsb	r0, r0, #0
   12c24:	str	r0, [sp, #4]
   12c28:	ldr	r0, [sp, #44]	; 0x2c
   12c2c:	bl	10fb0 <__snprintf_chk@plt>
   12c30:	ldr	r0, [r7]
   12c34:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12c38:	mov	r2, #0
   12c3c:	mov	r1, #1
   12c40:	ldr	r0, [r8, #-16]
   12c44:	bl	182d4 <__assert_fail@plt+0x7318>
   12c48:	mov	r7, r0
   12c4c:	b	11b0c <__assert_fail@plt+0xb50>
   12c50:	ldr	r3, [r8, #-4]
   12c54:	tst	r3, #8
   12c58:	bne	132a4 <__assert_fail@plt+0x22e8>
   12c5c:	ldr	r0, [pc, #-884]	; 128f0 <__assert_fail@plt+0x1934>
   12c60:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12c64:	mov	r7, #1
   12c68:	b	11b0c <__assert_fail@plt+0xb50>
   12c6c:	ldr	r3, [r8, #-4]
   12c70:	tst	r3, #8
   12c74:	bne	132b0 <__assert_fail@plt+0x22f4>
   12c78:	ldr	r0, [pc, #-908]	; 128f4 <__assert_fail@plt+0x1938>
   12c7c:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12c80:	mov	r7, #1
   12c84:	b	11b0c <__assert_fail@plt+0xb50>
   12c88:	ldr	r3, [r8, #-4]
   12c8c:	tst	r3, #8
   12c90:	bne	13164 <__assert_fail@plt+0x21a8>
   12c94:	ldr	r0, [pc, #-932]	; 128f8 <__assert_fail@plt+0x193c>
   12c98:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12c9c:	mov	r7, #1
   12ca0:	b	11b0c <__assert_fail@plt+0xb50>
   12ca4:	ldr	r3, [pc, #-780]	; 129a0 <__assert_fail@plt+0x19e4>
   12ca8:	ldr	r7, [r8, #-4]
   12cac:	str	r3, [sp, #44]	; 0x2c
   12cb0:	ldr	r0, [r3]
   12cb4:	ldr	r3, [pc, #-792]	; 129a4 <__assert_fail@plt+0x19e8>
   12cb8:	cmp	r7, #0
   12cbc:	ldr	r1, [r3]
   12cc0:	ldrb	r3, [r8]
   12cc4:	str	r3, [sp, #48]	; 0x30
   12cc8:	blt	130c0 <__assert_fail@plt+0x2104>
   12ccc:	ldr	r3, [pc, #-984]	; 128fc <__assert_fail@plt+0x1940>
   12cd0:	mov	r2, #1
   12cd4:	stm	sp, {r3, r7}
   12cd8:	mvn	r3, #0
   12cdc:	bl	10fb0 <__snprintf_chk@plt>
   12ce0:	ldr	r3, [sp, #44]	; 0x2c
   12ce4:	ldr	r0, [r3]
   12ce8:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12cec:	ldr	r3, [sp, #48]	; 0x30
   12cf0:	cmp	r3, #43	; 0x2b
   12cf4:	ldr	r3, [pc, #-856]	; 129a4 <__assert_fail@plt+0x19e8>
   12cf8:	ldr	r1, [r3]
   12cfc:	ldr	r3, [sp, #44]	; 0x2c
   12d00:	ldr	r0, [r3]
   12d04:	ldreq	r3, [pc, #-1036]	; 12900 <__assert_fail@plt+0x1944>
   12d08:	ldrne	r3, [pc, #-1036]	; 12904 <__assert_fail@plt+0x1948>
   12d0c:	stm	sp, {r3, r7}
   12d10:	mov	r2, #1
   12d14:	mvn	r3, #0
   12d18:	bl	10fb0 <__snprintf_chk@plt>
   12d1c:	b	11ea8 <__assert_fail@plt+0xeec>
   12d20:	ldr	r0, [pc, #-1056]	; 12908 <__assert_fail@plt+0x194c>
   12d24:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12d28:	mov	r7, #0
   12d2c:	ldr	r3, [r8]
   12d30:	b	122d8 <__assert_fail@plt+0x131c>
   12d34:	ldr	r7, [r8]
   12d38:	b	11b0c <__assert_fail@plt+0xb50>
   12d3c:	ldr	r0, [pc, #-1080]	; 1290c <__assert_fail@plt+0x1950>
   12d40:	bl	18784 <__assert_fail@plt+0x77c8>
   12d44:	b	11b0c <__assert_fail@plt+0xb50>
   12d48:	ldr	r0, [pc, #-1088]	; 12910 <__assert_fail@plt+0x1954>
   12d4c:	bl	18784 <__assert_fail@plt+0x77c8>
   12d50:	b	11b0c <__assert_fail@plt+0xb50>
   12d54:	ldr	r0, [pc, #-1096]	; 12914 <__assert_fail@plt+0x1958>
   12d58:	bl	18784 <__assert_fail@plt+0x77c8>
   12d5c:	ldr	r3, [pc, #-964]	; 129a0 <__assert_fail@plt+0x19e4>
   12d60:	ldr	ip, [pc, #-1048]	; 12950 <__assert_fail@plt+0x1994>
   12d64:	ldr	r2, [pc, #-968]	; 129a4 <__assert_fail@plt+0x19e8>
   12d68:	ldr	r0, [r3]
   12d6c:	ldr	lr, [pc, #-1116]	; 12918 <__assert_fail@plt+0x195c>
   12d70:	ldr	r3, [ip]
   12d74:	ldr	r1, [r2]
   12d78:	b	12aa0 <__assert_fail@plt+0x1ae4>
   12d7c:	ldr	r0, [pc, #-1128]	; 1291c <__assert_fail@plt+0x1960>
   12d80:	bl	18784 <__assert_fail@plt+0x77c8>
   12d84:	ldr	r0, [pc, #-1132]	; 12920 <__assert_fail@plt+0x1964>
   12d88:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12d8c:	mov	r7, #1
   12d90:	b	11b0c <__assert_fail@plt+0xb50>
   12d94:	mov	r1, #0
   12d98:	ldr	r0, [r8]
   12d9c:	bl	18a60 <__assert_fail@plt+0x7aa4>
   12da0:	mov	r7, r0
   12da4:	b	11b0c <__assert_fail@plt+0xb50>
   12da8:	mov	r7, #2
   12dac:	b	11b0c <__assert_fail@plt+0xb50>
   12db0:	ldr	r0, [pc, #-1172]	; 12924 <__assert_fail@plt+0x1968>
   12db4:	bl	18784 <__assert_fail@plt+0x77c8>
   12db8:	mov	r7, #3
   12dbc:	b	11b0c <__assert_fail@plt+0xb50>
   12dc0:	ldr	r7, [r8, #-4]
   12dc4:	tst	r7, #8
   12dc8:	bne	132c8 <__assert_fail@plt+0x230c>
   12dcc:	tst	r7, #2
   12dd0:	bne	132bc <__assert_fail@plt+0x2300>
   12dd4:	mov	r1, #1
   12dd8:	ldr	r0, [r8, #-12]
   12ddc:	bl	18a60 <__assert_fail@plt+0x7aa4>
   12de0:	mov	r7, r0
   12de4:	b	11b0c <__assert_fail@plt+0xb50>
   12de8:	ldr	r3, [pc, #-1224]	; 12928 <__assert_fail@plt+0x196c>
   12dec:	ldrb	r7, [r3]
   12df0:	cmp	r7, #0
   12df4:	beq	11b0c <__assert_fail@plt+0xb50>
   12df8:	ldr	r3, [pc, #-1236]	; 1292c <__assert_fail@plt+0x1970>
   12dfc:	ldr	r7, [r3]
   12e00:	cmp	r7, #0
   12e04:	bne	11dc8 <__assert_fail@plt+0xe0c>
   12e08:	bl	18e98 <__assert_fail@plt+0x7edc>
   12e0c:	bl	18e78 <__assert_fail@plt+0x7ebc>
   12e10:	b	11b0c <__assert_fail@plt+0xb50>
   12e14:	mov	r1, #1
   12e18:	ldr	r0, [r8, #-8]
   12e1c:	b	1242c <__assert_fail@plt+0x1470>
   12e20:	ldr	r7, [r8, #-8]
   12e24:	tst	r7, #8
   12e28:	bne	12e38 <__assert_fail@plt+0x1e7c>
   12e2c:	ldr	r3, [r8]
   12e30:	tst	r3, #8
   12e34:	beq	12e40 <__assert_fail@plt+0x1e84>
   12e38:	ldr	r0, [pc, #-1296]	; 12930 <__assert_fail@plt+0x1974>
   12e3c:	bl	186b0 <__assert_fail@plt+0x76f4>
   12e40:	ldr	r0, [pc, #-1300]	; 12934 <__assert_fail@plt+0x1978>
   12e44:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12e48:	ldr	r3, [r8]
   12e4c:	orr	r3, r7, r3
   12e50:	bic	r7, r3, #4
   12e54:	b	11b0c <__assert_fail@plt+0xb50>
   12e58:	ldr	r3, [r8, #-8]
   12e5c:	tst	r3, #8
   12e60:	bne	12e70 <__assert_fail@plt+0x1eb4>
   12e64:	ldr	r3, [r8]
   12e68:	tst	r3, #8
   12e6c:	beq	12e78 <__assert_fail@plt+0x1ebc>
   12e70:	ldr	r0, [pc, #-1344]	; 12938 <__assert_fail@plt+0x197c>
   12e74:	bl	186b0 <__assert_fail@plt+0x76f4>
   12e78:	ldr	r7, [r8, #-4]
   12e7c:	ldrb	r3, [r7]
   12e80:	sub	r3, r3, #33	; 0x21
   12e84:	cmp	r3, #29
   12e88:	ldrls	pc, [pc, r3, lsl #2]
   12e8c:	b	13034 <__assert_fail@plt+0x2078>
   12e90:	andeq	r3, r1, r4, asr #32
   12e94:	andeq	r3, r1, r4, lsr r0
   12e98:	andeq	r3, r1, r4, lsr r0
   12e9c:	andeq	r3, r1, r4, lsr r0
   12ea0:	andeq	r3, r1, r4, lsr r0
   12ea4:	andeq	r3, r1, r4, lsr r0
   12ea8:	andeq	r3, r1, r4, lsr r0
   12eac:	andeq	r3, r1, r4, lsr r0
   12eb0:	andeq	r3, r1, r4, lsr r0
   12eb4:	andeq	r3, r1, r4, lsr r0
   12eb8:	andeq	r3, r1, r4, lsr r0
   12ebc:	andeq	r3, r1, r4, lsr r0
   12ec0:	andeq	r3, r1, r4, lsr r0
   12ec4:	andeq	r3, r1, r4, lsr r0
   12ec8:	andeq	r3, r1, r4, lsr r0
   12ecc:	andeq	r3, r1, r4, lsr r0
   12ed0:	andeq	r3, r1, r4, lsr r0
   12ed4:	andeq	r3, r1, r4, lsr r0
   12ed8:	andeq	r3, r1, r4, lsr r0
   12edc:	andeq	r3, r1, r4, lsr r0
   12ee0:	andeq	r3, r1, r4, lsr r0
   12ee4:	andeq	r3, r1, r4, lsr r0
   12ee8:	andeq	r3, r1, r4, lsr r0
   12eec:	andeq	r3, r1, r4, lsr r0
   12ef0:	andeq	r3, r1, r4, lsr r0
   12ef4:	andeq	r3, r1, r4, lsr r0
   12ef8:	andeq	r3, r1, r4, lsr r0
   12efc:	andeq	r3, r1, r0, asr r0
   12f00:	andeq	r3, r1, ip, lsr #32
   12f04:	andeq	r3, r1, r8, rrx
   12f08:	ldr	r7, [r8, #-8]
   12f0c:	tst	r7, #8
   12f10:	bne	12f20 <__assert_fail@plt+0x1f64>
   12f14:	ldr	r3, [r8]
   12f18:	tst	r3, #8
   12f1c:	beq	12f28 <__assert_fail@plt+0x1f6c>
   12f20:	ldr	r0, [pc, #-1516]	; 1293c <__assert_fail@plt+0x1980>
   12f24:	bl	186b0 <__assert_fail@plt+0x76f4>
   12f28:	ldr	r0, [pc, #-1520]	; 12940 <__assert_fail@plt+0x1984>
   12f2c:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12f30:	ldr	r3, [r8]
   12f34:	orr	r3, r7, r3
   12f38:	bic	r7, r3, #4
   12f3c:	b	11b0c <__assert_fail@plt+0xb50>
   12f40:	ldr	r7, [r8]
   12f44:	tst	r7, #8
   12f48:	bne	13170 <__assert_fail@plt+0x21b4>
   12f4c:	ldr	r0, [pc, #-1552]	; 12944 <__assert_fail@plt+0x1988>
   12f50:	bl	18784 <__assert_fail@plt+0x77c8>
   12f54:	ldr	r0, [pc, #-1556]	; 12948 <__assert_fail@plt+0x198c>
   12f58:	bic	r7, r7, #4
   12f5c:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12f60:	b	11b0c <__assert_fail@plt+0xb50>
   12f64:	ldr	r3, [r8, #-12]
   12f68:	tst	r3, #8
   12f6c:	str	r3, [sp, #44]	; 0x2c
   12f70:	bne	12f80 <__assert_fail@plt+0x1fc4>
   12f74:	ldr	r3, [r8]
   12f78:	tst	r3, #8
   12f7c:	beq	12f88 <__assert_fail@plt+0x1fcc>
   12f80:	ldr	r0, [pc, #-1596]	; 1294c <__assert_fail@plt+0x1990>
   12f84:	bl	186b0 <__assert_fail@plt+0x76f4>
   12f88:	ldr	r2, [pc, #-1600]	; 12950 <__assert_fail@plt+0x1994>
   12f8c:	ldr	r3, [pc, #-1520]	; 129a4 <__assert_fail@plt+0x19e8>
   12f90:	ldr	r7, [pc, #-1528]	; 129a0 <__assert_fail@plt+0x19e4>
   12f94:	ldr	lr, [r2]
   12f98:	ldr	r1, [r3]
   12f9c:	ldr	r0, [r7]
   12fa0:	ldr	r3, [r8, #-8]
   12fa4:	add	ip, lr, #1
   12fa8:	str	lr, [sp, #16]
   12fac:	str	lr, [sp, #8]
   12fb0:	ldr	lr, [pc, #-1636]	; 12954 <__assert_fail@plt+0x1998>
   12fb4:	str	r3, [sp, #12]
   12fb8:	str	r3, [sp, #4]
   12fbc:	str	lr, [sp]
   12fc0:	mvn	r3, #0
   12fc4:	str	ip, [r2]
   12fc8:	mov	r2, #1
   12fcc:	bl	10fb0 <__snprintf_chk@plt>
   12fd0:	b	12a60 <__assert_fail@plt+0x1aa4>
   12fd4:	ldr	r3, [r8]
   12fd8:	tst	r3, #2
   12fdc:	bne	13108 <__assert_fail@plt+0x214c>
   12fe0:	tst	r3, #1
   12fe4:	ldrne	r0, [pc, #-1684]	; 12958 <__assert_fail@plt+0x199c>
   12fe8:	ldreq	r0, [pc, #-1576]	; 129c8 <__assert_fail@plt+0x1a0c>
   12fec:	bl	17d08 <__assert_fail@plt+0x6d4c>
   12ff0:	b	11b0c <__assert_fail@plt+0xb50>
   12ff4:	ldr	r7, [r8, #-8]
   12ff8:	tst	r7, #8
   12ffc:	bne	1300c <__assert_fail@plt+0x2050>
   13000:	ldr	r3, [r8]
   13004:	tst	r3, #8
   13008:	beq	13014 <__assert_fail@plt+0x2058>
   1300c:	ldr	r0, [pc, #-1720]	; 1295c <__assert_fail@plt+0x19a0>
   13010:	bl	186b0 <__assert_fail@plt+0x76f4>
   13014:	ldr	r0, [pc, #-1724]	; 12960 <__assert_fail@plt+0x19a4>
   13018:	bl	17d08 <__assert_fail@plt+0x6d4c>
   1301c:	ldr	r3, [r8]
   13020:	orr	r3, r7, r3
   13024:	bic	r7, r3, #4
   13028:	b	11b0c <__assert_fail@plt+0xb50>
   1302c:	ldr	r0, [pc, #-1744]	; 12964 <__assert_fail@plt+0x19a8>
   13030:	bl	17d08 <__assert_fail@plt+0x6d4c>
   13034:	mov	r0, r7
   13038:	bl	10dd0 <free@plt>
   1303c:	mov	r7, #3
   13040:	b	11b0c <__assert_fail@plt+0xb50>
   13044:	ldr	r0, [pc, #-1764]	; 12968 <__assert_fail@plt+0x19ac>
   13048:	bl	17d08 <__assert_fail@plt+0x6d4c>
   1304c:	b	13034 <__assert_fail@plt+0x2078>
   13050:	ldrb	r3, [r7, #1]
   13054:	cmp	r3, #61	; 0x3d
   13058:	ldreq	r0, [pc, #-1780]	; 1296c <__assert_fail@plt+0x19b0>
   1305c:	ldrne	r0, [pc, #-1780]	; 12970 <__assert_fail@plt+0x19b4>
   13060:	bl	17d08 <__assert_fail@plt+0x6d4c>
   13064:	b	13034 <__assert_fail@plt+0x2078>
   13068:	ldrb	r3, [r7, #1]
   1306c:	cmp	r3, #61	; 0x3d
   13070:	ldreq	r0, [pc, #-1796]	; 12974 <__assert_fail@plt+0x19b8>
   13074:	ldrne	r0, [pc, #-1796]	; 12978 <__assert_fail@plt+0x19bc>
   13078:	bl	17d08 <__assert_fail@plt+0x6d4c>
   1307c:	b	13034 <__assert_fail@plt+0x2078>
   13080:	mov	sl, r7
   13084:	mov	r4, #1
   13088:	b	11d0c <__assert_fail@plt+0xd50>
   1308c:	ldr	r1, [pc, #-1776]	; 129a4 <__assert_fail@plt+0x19e8>
   13090:	ldr	r2, [pc, #-1820]	; 1297c <__assert_fail@plt+0x19c0>
   13094:	ldr	r0, [pc, #-1788]	; 129a0 <__assert_fail@plt+0x19e4>
   13098:	ldr	r1, [r1]
   1309c:	ldr	r0, [r0]
   130a0:	strd	r2, [sp]
   130a4:	mvn	r3, #0
   130a8:	b	124f0 <__assert_fail@plt+0x1534>
   130ac:	cmp	r2, #43	; 0x2b
   130b0:	rsb	r3, r3, #0
   130b4:	ldreq	r2, [pc, #-1852]	; 12980 <__assert_fail@plt+0x19c4>
   130b8:	ldrne	r2, [pc, #-1852]	; 12984 <__assert_fail@plt+0x19c8>
   130bc:	b	11e94 <__assert_fail@plt+0xed8>
   130c0:	ldr	r3, [pc, #-1856]	; 12988 <__assert_fail@plt+0x19cc>
   130c4:	rsb	r7, r7, #0
   130c8:	mov	r2, #1
   130cc:	stm	sp, {r3, r7}
   130d0:	mvn	r3, #0
   130d4:	bl	10fb0 <__snprintf_chk@plt>
   130d8:	ldr	r3, [sp, #44]	; 0x2c
   130dc:	ldr	r0, [r3]
   130e0:	bl	17d08 <__assert_fail@plt+0x6d4c>
   130e4:	ldr	r3, [sp, #48]	; 0x30
   130e8:	cmp	r3, #43	; 0x2b
   130ec:	ldr	r3, [pc, #-1872]	; 129a4 <__assert_fail@plt+0x19e8>
   130f0:	ldr	r1, [r3]
   130f4:	ldr	r3, [sp, #44]	; 0x2c
   130f8:	ldr	r0, [r3]
   130fc:	ldreq	r3, [pc, #-1912]	; 1298c <__assert_fail@plt+0x19d0>
   13100:	ldrne	r3, [pc, #-1912]	; 12990 <__assert_fail@plt+0x19d4>
   13104:	b	12d0c <__assert_fail@plt+0x1d50>
   13108:	ldr	r0, [pc, #-1916]	; 12994 <__assert_fail@plt+0x19d8>
   1310c:	str	r3, [sp, #44]	; 0x2c
   13110:	bl	18784 <__assert_fail@plt+0x77c8>
   13114:	ldr	r3, [sp, #44]	; 0x2c
   13118:	b	12fe0 <__assert_fail@plt+0x2024>
   1311c:	ldr	r0, [pc, #-1932]	; 12998 <__assert_fail@plt+0x19dc>
   13120:	bl	186b0 <__assert_fail@plt+0x76f4>
   13124:	b	1203c <__assert_fail@plt+0x1080>
   13128:	ldr	r0, [pc, #-1940]	; 1299c <__assert_fail@plt+0x19e0>
   1312c:	bl	186b0 <__assert_fail@plt+0x76f4>
   13130:	b	1208c <__assert_fail@plt+0x10d0>
   13134:	ldr	r0, [pc, #-1948]	; 129a0 <__assert_fail@plt+0x19e4>
   13138:	ldr	r1, [pc, #-1948]	; 129a4 <__assert_fail@plt+0x19e8>
   1313c:	ldr	r3, [pc, #-1948]	; 129a8 <__assert_fail@plt+0x19ec>
   13140:	str	r0, [sp, #44]	; 0x2c
   13144:	ldr	r1, [r1]
   13148:	ldr	r0, [r0]
   1314c:	str	r2, [sp, #4]
   13150:	str	r3, [sp]
   13154:	mov	r2, #1
   13158:	mvn	r3, #0
   1315c:	bl	10fb0 <__snprintf_chk@plt>
   13160:	b	12020 <__assert_fail@plt+0x1064>
   13164:	ldr	r0, [pc, #-1984]	; 129ac <__assert_fail@plt+0x19f0>
   13168:	bl	186b0 <__assert_fail@plt+0x76f4>
   1316c:	b	12c94 <__assert_fail@plt+0x1cd8>
   13170:	ldr	r0, [pc, #-1992]	; 129b0 <__assert_fail@plt+0x19f4>
   13174:	bl	186b0 <__assert_fail@plt+0x76f4>
   13178:	b	12f4c <__assert_fail@plt+0x1f90>
   1317c:	ldr	r0, [pc, #-1992]	; 129bc <__assert_fail@plt+0x1a00>
   13180:	bl	17d08 <__assert_fail@plt+0x6d4c>
   13184:	b	125d8 <__assert_fail@plt+0x161c>
   13188:	ldr	r0, [pc, #-2012]	; 129b4 <__assert_fail@plt+0x19f8>
   1318c:	bl	186b0 <__assert_fail@plt+0x76f4>
   13190:	b	125d0 <__assert_fail@plt+0x1614>
   13194:	ldr	r0, [pc, #-2020]	; 129b8 <__assert_fail@plt+0x19fc>
   13198:	bl	186b0 <__assert_fail@plt+0x76f4>
   1319c:	b	124b0 <__assert_fail@plt+0x14f4>
   131a0:	ldr	r0, [pc, #-2032]	; 129b8 <__assert_fail@plt+0x19fc>
   131a4:	bl	186b0 <__assert_fail@plt+0x76f4>
   131a8:	b	126fc <__assert_fail@plt+0x1740>
   131ac:	ldrb	r3, [r7]
   131b0:	cmp	r3, #48	; 0x30
   131b4:	beq	132e0 <__assert_fail@plt+0x2324>
   131b8:	cmp	r3, #49	; 0x31
   131bc:	bne	12058 <__assert_fail@plt+0x109c>
   131c0:	ldr	r0, [pc, #-2060]	; 129bc <__assert_fail@plt+0x1a00>
   131c4:	bl	17d08 <__assert_fail@plt+0x6d4c>
   131c8:	b	12070 <__assert_fail@plt+0x10b4>
   131cc:	ldr	r0, [pc, #-2068]	; 129c0 <__assert_fail@plt+0x1a04>
   131d0:	bl	186b0 <__assert_fail@plt+0x76f4>
   131d4:	b	122c0 <__assert_fail@plt+0x1304>
   131d8:	ldr	r0, [pc, #-2052]	; 129dc <__assert_fail@plt+0x1a20>
   131dc:	bl	186b0 <__assert_fail@plt+0x76f4>
   131e0:	b	12374 <__assert_fail@plt+0x13b8>
   131e4:	ldr	r0, [pc, #-2060]	; 129e0 <__assert_fail@plt+0x1a24>
   131e8:	bl	18784 <__assert_fail@plt+0x77c8>
   131ec:	b	1236c <__assert_fail@plt+0x13b0>
   131f0:	ldr	r0, [pc, #-2100]	; 129c4 <__assert_fail@plt+0x1a08>
   131f4:	bl	186b0 <__assert_fail@plt+0x76f4>
   131f8:	b	12adc <__assert_fail@plt+0x1b20>
   131fc:	ldr	r0, [pc, #-2108]	; 129c8 <__assert_fail@plt+0x1a0c>
   13200:	bl	17d08 <__assert_fail@plt+0x6d4c>
   13204:	b	12698 <__assert_fail@plt+0x16dc>
   13208:	ldr	r0, [pc, #-2116]	; 129cc <__assert_fail@plt+0x1a10>
   1320c:	str	r3, [sp, #44]	; 0x2c
   13210:	bl	186b0 <__assert_fail@plt+0x76f4>
   13214:	ldr	r3, [sp, #44]	; 0x2c
   13218:	b	12690 <__assert_fail@plt+0x16d4>
   1321c:	ldr	r0, [pc, #-2132]	; 129d0 <__assert_fail@plt+0x1a14>
   13220:	str	r3, [sp, #44]	; 0x2c
   13224:	bl	18784 <__assert_fail@plt+0x77c8>
   13228:	ldr	r3, [sp, #44]	; 0x2c
   1322c:	b	12688 <__assert_fail@plt+0x16cc>
   13230:	ldr	r0, [pc, #-2148]	; 129d4 <__assert_fail@plt+0x1a18>
   13234:	str	r2, [sp, #44]	; 0x2c
   13238:	bl	186b0 <__assert_fail@plt+0x76f4>
   1323c:	ldr	r2, [sp, #44]	; 0x2c
   13240:	b	1257c <__assert_fail@plt+0x15c0>
   13244:	ldr	r0, [pc, #-2164]	; 129d8 <__assert_fail@plt+0x1a1c>
   13248:	str	r2, [sp, #44]	; 0x2c
   1324c:	bl	18784 <__assert_fail@plt+0x77c8>
   13250:	ldr	r2, [sp, #44]	; 0x2c
   13254:	b	12574 <__assert_fail@plt+0x15b8>
   13258:	ldr	r0, [pc, #-2180]	; 129dc <__assert_fail@plt+0x1a20>
   1325c:	bl	186b0 <__assert_fail@plt+0x76f4>
   13260:	b	1240c <__assert_fail@plt+0x1450>
   13264:	ldr	r0, [pc, #-2188]	; 129e0 <__assert_fail@plt+0x1a24>
   13268:	bl	18784 <__assert_fail@plt+0x77c8>
   1326c:	b	12404 <__assert_fail@plt+0x1448>
   13270:	ldr	r0, [pc, #-2196]	; 129e4 <__assert_fail@plt+0x1a28>
   13274:	bl	186b0 <__assert_fail@plt+0x76f4>
   13278:	b	11ad8 <__assert_fail@plt+0xb1c>
   1327c:	ldr	r0, [pc, #-2204]	; 129e8 <__assert_fail@plt+0x1a2c>
   13280:	str	r3, [sp, #44]	; 0x2c
   13284:	bl	18784 <__assert_fail@plt+0x77c8>
   13288:	ldr	r3, [sp, #44]	; 0x2c
   1328c:	b	11ad0 <__assert_fail@plt+0xb14>
   13290:	ldr	r0, [pc, #-2220]	; 129ec <__assert_fail@plt+0x1a30>
   13294:	str	r3, [sp, #44]	; 0x2c
   13298:	bl	18784 <__assert_fail@plt+0x77c8>
   1329c:	ldr	r3, [sp, #44]	; 0x2c
   132a0:	b	11ac8 <__assert_fail@plt+0xb0c>
   132a4:	ldr	r0, [pc, #-2236]	; 129f0 <__assert_fail@plt+0x1a34>
   132a8:	bl	186b0 <__assert_fail@plt+0x76f4>
   132ac:	b	12c5c <__assert_fail@plt+0x1ca0>
   132b0:	ldr	r0, [pc, #-2244]	; 129f4 <__assert_fail@plt+0x1a38>
   132b4:	bl	186b0 <__assert_fail@plt+0x76f4>
   132b8:	b	12c78 <__assert_fail@plt+0x1cbc>
   132bc:	ldr	r0, [pc, #-2252]	; 129f8 <__assert_fail@plt+0x1a3c>
   132c0:	bl	18784 <__assert_fail@plt+0x77c8>
   132c4:	b	12dd4 <__assert_fail@plt+0x1e18>
   132c8:	ldr	r0, [pc, #-2260]	; 129fc <__assert_fail@plt+0x1a40>
   132cc:	bl	186b0 <__assert_fail@plt+0x76f4>
   132d0:	b	12dcc <__assert_fail@plt+0x1e10>
   132d4:	ldr	r0, [pc, #-2268]	; 12a00 <__assert_fail@plt+0x1a44>
   132d8:	bl	186b0 <__assert_fail@plt+0x76f4>
   132dc:	b	11b0c <__assert_fail@plt+0xb50>
   132e0:	ldr	r0, [pc, #-2276]	; 12a04 <__assert_fail@plt+0x1a48>
   132e4:	bl	17d08 <__assert_fail@plt+0x6d4c>
   132e8:	b	12070 <__assert_fail@plt+0x10b4>
   132ec:	bl	10e24 <__stack_chk_fail@plt>
   132f0:	ldr	r2, [pc, #232]	; 133e0 <__assert_fail@plt+0x2424>
   132f4:	ldr	r3, [pc, #232]	; 133e4 <__assert_fail@plt+0x2428>
   132f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132fc:	sub	sp, sp, #12
   13300:	ldr	r1, [r2, #4]
   13304:	ldr	r9, [r3]
   13308:	str	r1, [sp, #4]
   1330c:	cmp	r9, r1
   13310:	ldr	r0, [r2]
   13314:	bcs	133d8 <__assert_fail@plt+0x241c>
   13318:	ldr	r4, [pc, #200]	; 133e8 <__assert_fail@plt+0x242c>
   1331c:	ldr	fp, [r2, #8]
   13320:	add	r6, r4, #2512	; 0x9d0
   13324:	add	r5, r4, #3152	; 0xc50
   13328:	add	r7, r4, #1648	; 0x670
   1332c:	ldr	r8, [pc, #184]	; 133ec <__assert_fail@plt+0x2430>
   13330:	ldr	r3, [r2, #12]
   13334:	add	r6, r6, #4
   13338:	add	r5, r5, #4
   1333c:	add	r7, r7, #8
   13340:	mov	sl, #0
   13344:	str	r3, [sp]
   13348:	mov	r3, r9
   1334c:	ldrb	r2, [r9], #1
   13350:	ldr	ip, [pc, #152]	; 133f0 <__assert_fail@plt+0x2434>
   13354:	cmp	r2, #0
   13358:	moveq	r1, #1
   1335c:	ldrbne	r1, [r4, r2, lsl #2]
   13360:	lsl	r2, r0, #1
   13364:	ldrsh	ip, [ip, r2]
   13368:	cmp	ip, #0
   1336c:	ldr	ip, [sp]
   13370:	movne	ip, r3
   13374:	str	ip, [sp]
   13378:	movne	fp, r0
   1337c:	movne	sl, #1
   13380:	b	13394 <__assert_fail@plt+0x23d8>
   13384:	ldrsh	r0, [r7, r2]
   13388:	cmp	r0, r8
   1338c:	lsl	r2, r0, #1
   13390:	ldrbgt	r1, [ip, #2296]	; 0x8f8
   13394:	ldrsh	r3, [r6, r2]
   13398:	add	ip, r4, r1, lsl #2
   1339c:	add	r3, r3, r1
   133a0:	lsl	r3, r3, #1
   133a4:	ldrsh	lr, [r5, r3]
   133a8:	cmp	lr, r0
   133ac:	bne	13384 <__assert_fail@plt+0x23c8>
   133b0:	ldr	r2, [sp, #4]
   133b4:	cmp	r2, r9
   133b8:	ldr	r2, [pc, #52]	; 133f4 <__assert_fail@plt+0x2438>
   133bc:	ldrsh	r0, [r2, r3]
   133c0:	bne	13348 <__assert_fail@plt+0x238c>
   133c4:	cmp	sl, #0
   133c8:	ldrne	r3, [pc, #16]	; 133e0 <__assert_fail@plt+0x2424>
   133cc:	ldrne	r2, [sp]
   133d0:	strne	fp, [r3, #8]
   133d4:	strne	r2, [r3, #12]
   133d8:	add	sp, sp, #12
   133dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133e0:	muleq	r3, r0, r1
   133e4:	andeq	r1, r3, r8, lsl r2
   133e8:	andeq	sp, r1, r4, asr lr
   133ec:	andeq	r0, r0, fp, lsr r1
   133f0:	andeq	lr, r1, r4, asr r2
   133f4:	andeq	lr, r1, ip, ror #30
   133f8:	ldr	r1, [pc, #28]	; 1341c <__assert_fail@plt+0x2460>
   133fc:	mov	r3, r0
   13400:	push	{r4, lr}
   13404:	ldr	r0, [r1]
   13408:	ldr	r2, [pc, #16]	; 13420 <__assert_fail@plt+0x2464>
   1340c:	mov	r1, #1
   13410:	bl	10f5c <__fprintf_chk@plt>
   13414:	mov	r0, #2
   13418:	bl	10ed8 <exit@plt>
   1341c:	andeq	r1, r3, r8, ror #2
   13420:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   13424:	push	{r4, r5, r6, lr}
   13428:	ldr	r4, [pc, #136]	; 134b8 <__assert_fail@plt+0x24fc>
   1342c:	ldr	r6, [r4, #16]
   13430:	cmp	r6, #0
   13434:	beq	13488 <__assert_fail@plt+0x24cc>
   13438:	ldr	r3, [r4, #20]
   1343c:	ldr	r2, [r4, #24]
   13440:	sub	r1, r3, #1
   13444:	cmp	r1, r2
   13448:	pophi	{r4, r5, r6, pc}
   1344c:	add	r5, r3, #8
   13450:	mov	r0, r6
   13454:	lsl	r6, r5, #2
   13458:	mov	r1, r6
   1345c:	bl	10e30 <realloc@plt>
   13460:	cmp	r0, #0
   13464:	str	r0, [r4, #16]
   13468:	beq	134b0 <__assert_fail@plt+0x24f4>
   1346c:	sub	r6, r6, #32
   13470:	add	r0, r0, r6
   13474:	mov	r2, #32
   13478:	mov	r1, #0
   1347c:	bl	10f14 <memset@plt>
   13480:	str	r5, [r4, #20]
   13484:	pop	{r4, r5, r6, pc}
   13488:	mov	r1, #1
   1348c:	mov	r0, #4
   13490:	bl	10d70 <calloc@plt>
   13494:	cmp	r0, #0
   13498:	str	r0, [r4, #16]
   1349c:	beq	134b0 <__assert_fail@plt+0x24f4>
   134a0:	mov	r3, #1
   134a4:	str	r6, [r4, #24]
   134a8:	str	r3, [r4, #20]
   134ac:	pop	{r4, r5, r6, pc}
   134b0:	ldr	r0, [pc, #4]	; 134bc <__assert_fail@plt+0x2500>
   134b4:	bl	133f8 <__assert_fail@plt+0x243c>
   134b8:	muleq	r3, r0, r1
   134bc:	andeq	pc, r1, r4, lsr r4	; <UNPREDICTABLE>
   134c0:	push	{r4, lr}
   134c4:	mov	r4, r0
   134c8:	bl	13424 <__assert_fail@plt+0x2468>
   134cc:	ldr	r3, [pc, #140]	; 13560 <__assert_fail@plt+0x25a4>
   134d0:	ldr	r2, [r3, #16]
   134d4:	cmp	r2, #0
   134d8:	beq	1354c <__assert_fail@plt+0x2590>
   134dc:	ldr	r1, [r3, #24]
   134e0:	ldr	ip, [r2, r1, lsl #2]
   134e4:	add	r0, r2, r1, lsl #2
   134e8:	cmp	ip, r4
   134ec:	popeq	{r4, pc}
   134f0:	cmp	ip, #0
   134f4:	beq	13514 <__assert_fail@plt+0x2558>
   134f8:	ldr	ip, [r3, #4]
   134fc:	ldrb	lr, [r3, #28]
   13500:	strb	lr, [ip]
   13504:	ldr	r2, [r2, r1, lsl #2]
   13508:	ldr	r1, [r3, #32]
   1350c:	str	ip, [r2, #8]
   13510:	str	r1, [r2, #16]
   13514:	ldr	r2, [r4, #8]
   13518:	ldr	lr, [pc, #68]	; 13564 <__assert_fail@plt+0x25a8>
   1351c:	ldr	r1, [r4]
   13520:	ldr	ip, [r4, #16]
   13524:	str	r4, [r0]
   13528:	str	r1, [r3, #36]	; 0x24
   1352c:	str	r2, [lr]
   13530:	str	ip, [r3, #32]
   13534:	ldrb	r0, [r2]
   13538:	mov	r1, #1
   1353c:	str	r2, [r3, #4]
   13540:	strb	r0, [r3, #28]
   13544:	str	r1, [r3, #40]	; 0x28
   13548:	pop	{r4, pc}
   1354c:	cmp	r4, #0
   13550:	popeq	{r4, pc}
   13554:	ldr	r0, [r3, #24]
   13558:	lsl	r0, r0, #2
   1355c:	b	13514 <__assert_fail@plt+0x2558>
   13560:	muleq	r3, r0, r1
   13564:	andeq	r1, r3, r8, lsl r2
   13568:	push	{r4, lr}
   1356c:	subs	r4, r0, #0
   13570:	popeq	{r4, pc}
   13574:	ldr	r2, [pc, #72]	; 135c4 <__assert_fail@plt+0x2608>
   13578:	ldr	r3, [r2, #16]
   1357c:	cmp	r3, #0
   13580:	beq	13598 <__assert_fail@plt+0x25dc>
   13584:	ldr	r2, [r2, #24]
   13588:	ldr	r1, [r3, r2, lsl #2]
   1358c:	cmp	r4, r1
   13590:	moveq	r1, #0
   13594:	streq	r1, [r3, r2, lsl #2]
   13598:	ldr	r3, [r4, #20]
   1359c:	cmp	r3, #0
   135a0:	bne	135b0 <__assert_fail@plt+0x25f4>
   135a4:	mov	r0, r4
   135a8:	pop	{r4, lr}
   135ac:	b	10dd0 <free@plt>
   135b0:	ldr	r0, [r4, #4]
   135b4:	bl	10dd0 <free@plt>
   135b8:	mov	r0, r4
   135bc:	pop	{r4, lr}
   135c0:	b	10dd0 <free@plt>
   135c4:	muleq	r3, r0, r1
   135c8:	cmp	r0, #0
   135cc:	bxeq	lr
   135d0:	ldr	r1, [r0, #4]
   135d4:	ldr	r2, [pc, #108]	; 13648 <__assert_fail@plt+0x268c>
   135d8:	mov	r3, #0
   135dc:	push	{lr}		; (str lr, [sp, #-4]!)
   135e0:	mov	lr, #1
   135e4:	str	r3, [r0, #16]
   135e8:	strb	r3, [r1]
   135ec:	ldr	r1, [r0, #4]
   135f0:	ldr	ip, [r2, #16]
   135f4:	strb	r3, [r1, #1]
   135f8:	cmp	ip, r3
   135fc:	ldr	r1, [r0, #4]
   13600:	str	r3, [r0, #44]	; 0x2c
   13604:	str	r1, [r0, #8]
   13608:	str	lr, [r0, #28]
   1360c:	popeq	{pc}		; (ldreq pc, [sp], #4)
   13610:	ldr	r3, [r2, #24]
   13614:	ldr	r3, [ip, r3, lsl #2]
   13618:	cmp	r0, r3
   1361c:	popne	{pc}		; (ldrne pc, [sp], #4)
   13620:	ldr	lr, [pc, #36]	; 1364c <__assert_fail@plt+0x2690>
   13624:	ldr	r3, [r0]
   13628:	ldr	ip, [r0, #16]
   1362c:	str	r1, [lr]
   13630:	str	ip, [r2, #32]
   13634:	str	r3, [r2, #36]	; 0x24
   13638:	ldrb	r3, [r1]
   1363c:	str	r1, [r2, #4]
   13640:	strb	r3, [r2, #28]
   13644:	pop	{pc}		; (ldr pc, [sp], #4)
   13648:	muleq	r3, r0, r1
   1364c:	andeq	r1, r3, r8, lsl r2
   13650:	push	{r4, r5, r6, r7, r8, lr}
   13654:	mov	r4, r0
   13658:	mov	r5, r1
   1365c:	bl	10efc <__errno_location@plt>
   13660:	mov	r6, r0
   13664:	mov	r0, r4
   13668:	ldr	r7, [r6]
   1366c:	bl	135c8 <__assert_fail@plt+0x260c>
   13670:	ldr	r2, [pc, #92]	; 136d4 <__assert_fail@plt+0x2718>
   13674:	mov	r1, #1
   13678:	str	r5, [r4]
   1367c:	ldr	r3, [r2, #16]
   13680:	str	r1, [r4, #40]	; 0x28
   13684:	cmp	r3, #0
   13688:	beq	1369c <__assert_fail@plt+0x26e0>
   1368c:	ldr	r2, [r2, #24]
   13690:	ldr	r3, [r3, r2, lsl #2]
   13694:	cmp	r4, r3
   13698:	beq	136a8 <__assert_fail@plt+0x26ec>
   1369c:	mov	r2, #1
   136a0:	mov	r3, #0
   136a4:	strd	r2, [r4, #32]
   136a8:	cmp	r5, #0
   136ac:	beq	136c8 <__assert_fail@plt+0x270c>
   136b0:	mov	r0, r5
   136b4:	bl	10f50 <fileno@plt>
   136b8:	bl	10f98 <isatty@plt>
   136bc:	cmp	r0, #0
   136c0:	movle	r5, #0
   136c4:	movgt	r5, #1
   136c8:	str	r5, [r4, #24]
   136cc:	str	r7, [r6]
   136d0:	pop	{r4, r5, r6, r7, r8, pc}
   136d4:	muleq	r3, r0, r1
   136d8:	push	{r4, r5, r6, lr}
   136dc:	mov	r6, r0
   136e0:	mov	r0, #48	; 0x30
   136e4:	mov	r5, r1
   136e8:	bl	10e90 <malloc@plt>
   136ec:	subs	r4, r0, #0
   136f0:	beq	13728 <__assert_fail@plt+0x276c>
   136f4:	str	r5, [r4, #12]
   136f8:	add	r0, r5, #2
   136fc:	bl	10e90 <malloc@plt>
   13700:	cmp	r0, #0
   13704:	str	r0, [r4, #4]
   13708:	beq	13728 <__assert_fail@plt+0x276c>
   1370c:	mov	r3, #1
   13710:	mov	r0, r4
   13714:	mov	r1, r6
   13718:	str	r3, [r4, #20]
   1371c:	bl	13650 <__assert_fail@plt+0x2694>
   13720:	mov	r0, r4
   13724:	pop	{r4, r5, r6, pc}
   13728:	ldr	r0, [pc]	; 13730 <__assert_fail@plt+0x2774>
   1372c:	bl	133f8 <__assert_fail@plt+0x243c>
   13730:	andeq	pc, r1, r8, ror #8
   13734:	push	{r4, r5, r6, r7, r8, lr}
   13738:	mov	r6, r0
   1373c:	ldr	r4, [pc, #128]	; 137c4 <__assert_fail@plt+0x2808>
   13740:	ldr	r3, [r4, #16]
   13744:	cmp	r3, #0
   13748:	beq	13798 <__assert_fail@plt+0x27dc>
   1374c:	ldr	r5, [r4, #24]
   13750:	ldr	r0, [r3, r5, lsl #2]
   13754:	add	r5, r3, r5, lsl #2
   13758:	cmp	r0, #0
   1375c:	beq	13798 <__assert_fail@plt+0x27dc>
   13760:	mov	r1, r6
   13764:	bl	13650 <__assert_fail@plt+0x2694>
   13768:	ldr	r2, [r5]
   1376c:	ldr	r0, [pc, #84]	; 137c8 <__assert_fail@plt+0x280c>
   13770:	ldr	r3, [r2, #8]
   13774:	ldr	r1, [r2, #16]
   13778:	ldr	r2, [r2]
   1377c:	str	r3, [r0]
   13780:	str	r1, [r4, #32]
   13784:	str	r2, [r4, #36]	; 0x24
   13788:	ldrb	r2, [r3]
   1378c:	str	r3, [r4, #4]
   13790:	strb	r2, [r4, #28]
   13794:	pop	{r4, r5, r6, r7, r8, pc}
   13798:	bl	13424 <__assert_fail@plt+0x2468>
   1379c:	mov	r1, #16384	; 0x4000
   137a0:	ldr	r0, [r4, #36]	; 0x24
   137a4:	ldr	r5, [r4, #16]
   137a8:	ldr	r7, [r4, #24]
   137ac:	bl	136d8 <__assert_fail@plt+0x271c>
   137b0:	cmp	r5, #0
   137b4:	str	r0, [r5, r7, lsl #2]
   137b8:	add	r5, r5, r7, lsl #2
   137bc:	moveq	r0, #0
   137c0:	b	13760 <__assert_fail@plt+0x27a4>
   137c4:	muleq	r3, r0, r1
   137c8:	andeq	r1, r3, r8, lsl r2
   137cc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137d0:	ldr	r5, [pc, #916]	; 13b6c <__assert_fail@plt+0x2bb0>
   137d4:	ldr	r7, [pc, #916]	; 13b70 <__assert_fail@plt+0x2bb4>
   137d8:	ldr	r8, [r5, #16]
   137dc:	ldr	ip, [r5, #24]
   137e0:	ldr	r0, [r5, #32]
   137e4:	ldr	r4, [r5, #4]
   137e8:	ldr	r3, [r8, ip, lsl #2]
   137ec:	add	r0, r0, #1
   137f0:	add	r9, r8, ip, lsl #2
   137f4:	ldr	r1, [r3, #4]
   137f8:	ldr	r2, [r7]
   137fc:	add	r0, r1, r0
   13800:	cmp	r4, r0
   13804:	bhi	13b5c <__assert_fail@plt+0x2ba0>
   13808:	ldr	r0, [r3, #40]	; 0x28
   1380c:	sub	sl, r4, r2
   13810:	cmp	r0, #0
   13814:	bne	13828 <__assert_fail@plt+0x286c>
   13818:	cmp	sl, #1
   1381c:	movne	sl, #2
   13820:	mov	r0, sl
   13824:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13828:	sub	r6, sl, #1
   1382c:	cmp	r6, #0
   13830:	ble	13850 <__assert_fail@plt+0x2894>
   13834:	sub	r3, r1, #1
   13838:	add	r0, r2, r6
   1383c:	ldrb	r1, [r2], #1
   13840:	cmp	r2, r0
   13844:	strb	r1, [r3, #1]!
   13848:	bne	1383c <__assert_fail@plt+0x2880>
   1384c:	ldr	r3, [r8, ip, lsl #2]
   13850:	ldr	r2, [r3, #44]	; 0x2c
   13854:	cmp	r2, #2
   13858:	moveq	r2, #0
   1385c:	streq	r2, [r5, #32]
   13860:	streq	r2, [r3, #16]
   13864:	beq	1390c <__assert_fail@plt+0x2950>
   13868:	ldr	r4, [r3, #12]
   1386c:	sub	r4, r4, sl
   13870:	cmp	r4, #0
   13874:	ble	138c4 <__assert_fail@plt+0x2908>
   13878:	b	13940 <__assert_fail@plt+0x2984>
   1387c:	ldr	r3, [r4, #12]
   13880:	lsl	r1, r3, #1
   13884:	cmp	r1, #0
   13888:	addle	r1, r3, r3, lsr #3
   1388c:	str	r1, [r4, #12]
   13890:	add	r1, r1, #2
   13894:	bl	10e30 <realloc@plt>
   13898:	cmp	r0, #0
   1389c:	str	r0, [r4, #4]
   138a0:	beq	138ec <__assert_fail@plt+0x2930>
   138a4:	ldr	r3, [r9]
   138a8:	add	r0, r0, sl
   138ac:	str	r0, [r5, #4]
   138b0:	ldr	r4, [r3, #12]
   138b4:	sub	r4, r4, #1
   138b8:	sub	r4, r4, r6
   138bc:	cmp	r4, #0
   138c0:	bgt	13940 <__assert_fail@plt+0x2984>
   138c4:	cmp	r8, #0
   138c8:	beq	13938 <__assert_fail@plt+0x297c>
   138cc:	ldr	r4, [r9]
   138d0:	ldr	sl, [r5, #4]
   138d4:	ldr	r3, [r4, #20]
   138d8:	ldr	r0, [r4, #4]
   138dc:	cmp	r3, #0
   138e0:	sub	sl, sl, r0
   138e4:	bne	1387c <__assert_fail@plt+0x28c0>
   138e8:	str	r3, [r4, #4]
   138ec:	ldr	r0, [pc, #640]	; 13b74 <__assert_fail@plt+0x2bb8>
   138f0:	bl	133f8 <__assert_fail@plt+0x243c>
   138f4:	ldr	r2, [r5, #24]
   138f8:	ldr	r3, [r5, #16]
   138fc:	str	r0, [r5, #32]
   13900:	str	r0, [r5, #44]	; 0x2c
   13904:	ldr	r3, [r3, r2, lsl #2]
   13908:	str	r0, [r3, #16]
   1390c:	cmp	r6, #0
   13910:	beq	13a20 <__assert_fail@plt+0x2a64>
   13914:	ldr	r1, [r5, #24]
   13918:	ldr	r2, [r5, #16]
   1391c:	mov	r3, #2
   13920:	mov	sl, r3
   13924:	ldr	r8, [r2, r1, lsl #2]
   13928:	add	r9, r2, r1, lsl r3
   1392c:	ldr	r4, [r5, #32]
   13930:	str	r3, [r8, #44]	; 0x2c
   13934:	b	139c4 <__assert_fail@plt+0x2a08>
   13938:	ldr	r3, [r8, #4]
   1393c:	udf	#0
   13940:	ldr	r2, [pc, #560]	; 13b78 <__assert_fail@plt+0x2bbc>
   13944:	ldr	r0, [r5, #36]	; 0x24
   13948:	cmp	r4, #8192	; 0x2000
   1394c:	ldr	r2, [r2]
   13950:	ldr	r8, [r3, #4]
   13954:	movge	r4, #8192	; 0x2000
   13958:	cmp	r0, r2
   1395c:	add	r8, r8, r6
   13960:	beq	13a6c <__assert_fail@plt+0x2ab0>
   13964:	mov	r9, r4
   13968:	ldr	sl, [pc, #524]	; 13b7c <__assert_fail@plt+0x2bc0>
   1396c:	b	13984 <__assert_fail@plt+0x29c8>
   13970:	bl	10efc <__errno_location@plt>
   13974:	ldr	r3, [r0]
   13978:	cmp	r3, #4
   1397c:	bne	13a0c <__assert_fail@plt+0x2a50>
   13980:	ldr	r0, [r5, #36]	; 0x24
   13984:	bl	10f50 <fileno@plt>
   13988:	mov	r2, r9
   1398c:	mov	r1, r8
   13990:	bl	10db8 <read@plt>
   13994:	cmp	r0, #0
   13998:	mov	r4, r0
   1399c:	str	r0, [r5, #32]
   139a0:	blt	13970 <__assert_fail@plt+0x29b4>
   139a4:	ldr	r2, [r5, #24]
   139a8:	ldr	r3, [r5, #16]
   139ac:	cmp	r4, #0
   139b0:	add	r9, r3, r2, lsl #2
   139b4:	ldr	r8, [r3, r2, lsl #2]
   139b8:	movne	sl, #0
   139bc:	str	r4, [r8, #16]
   139c0:	beq	1390c <__assert_fail@plt+0x2950>
   139c4:	ldr	r3, [r8, #12]
   139c8:	add	r1, r6, r4
   139cc:	cmp	r1, r3
   139d0:	ldr	r0, [r8, #4]
   139d4:	bhi	13a44 <__assert_fail@plt+0x2a88>
   139d8:	mov	r2, #0
   139dc:	str	r1, [r5, #32]
   139e0:	strb	r2, [r0, r1]
   139e4:	ldr	r3, [r9]
   139e8:	ldr	r1, [r5, #32]
   139ec:	mov	r0, sl
   139f0:	ldr	r3, [r3, #4]
   139f4:	add	r3, r3, r1
   139f8:	strb	r2, [r3, #1]
   139fc:	ldr	r3, [r9]
   13a00:	ldr	r3, [r3, #4]
   13a04:	str	r3, [r7]
   13a08:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a0c:	mov	r0, sl
   13a10:	bl	186b0 <__assert_fail@plt+0x76f4>
   13a14:	mov	r0, #1
   13a18:	bl	18e70 <__assert_fail@plt+0x7eb4>
   13a1c:	b	13980 <__assert_fail@plt+0x29c4>
   13a20:	ldr	r0, [r5, #36]	; 0x24
   13a24:	bl	13734 <__assert_fail@plt+0x2778>
   13a28:	ldr	r2, [r5, #24]
   13a2c:	ldr	r3, [r5, #16]
   13a30:	ldr	r4, [r5, #32]
   13a34:	add	r9, r3, r2, lsl #2
   13a38:	ldr	r8, [r3, r2, lsl #2]
   13a3c:	mov	sl, #1
   13a40:	b	139c4 <__assert_fail@plt+0x2a08>
   13a44:	add	r1, r1, r4, asr #1
   13a48:	bl	10e30 <realloc@plt>
   13a4c:	ldr	r3, [r9]
   13a50:	str	r0, [r8, #4]
   13a54:	ldr	r0, [r3, #4]
   13a58:	cmp	r0, #0
   13a5c:	beq	13b64 <__assert_fail@plt+0x2ba8>
   13a60:	ldr	r1, [r5, #32]
   13a64:	add	r1, r6, r1
   13a68:	b	139d8 <__assert_fail@plt+0x2a1c>
   13a6c:	ldr	sl, [r5, #44]	; 0x2c
   13a70:	cmp	sl, #0
   13a74:	bne	13aec <__assert_fail@plt+0x2b30>
   13a78:	ldr	r0, [r5, #48]	; 0x30
   13a7c:	cmp	r0, #0
   13a80:	beq	13a88 <__assert_fail@plt+0x2acc>
   13a84:	bl	10dd0 <free@plt>
   13a88:	ldr	r0, [pc, #240]	; 13b80 <__assert_fail@plt+0x2bc4>
   13a8c:	bl	10e60 <readline@plt>
   13a90:	cmp	r0, #0
   13a94:	mov	r9, r0
   13a98:	str	r0, [r5, #48]	; 0x30
   13a9c:	beq	138f4 <__assert_fail@plt+0x2938>
   13aa0:	str	r0, [r5, #52]	; 0x34
   13aa4:	bl	10ee4 <strlen@plt>
   13aa8:	add	r0, r0, #1
   13aac:	cmp	r0, #1
   13ab0:	str	r0, [r5, #44]	; 0x2c
   13ab4:	beq	13ac8 <__assert_fail@plt+0x2b0c>
   13ab8:	mov	r0, r9
   13abc:	bl	10ddc <add_history@plt>
   13ac0:	ldr	r9, [r5, #52]	; 0x34
   13ac4:	ldr	r0, [r5, #44]	; 0x2c
   13ac8:	ldr	sl, [pc, #180]	; 13b84 <__assert_fail@plt+0x2bc8>
   13acc:	add	r9, r9, r0
   13ad0:	mov	r3, #10
   13ad4:	strb	r3, [r9, #-1]
   13ad8:	ldr	r0, [sl]
   13adc:	bl	10dc4 <fflush@plt>
   13ae0:	ldr	r0, [sl]
   13ae4:	bl	1c03c <__assert_fail@plt+0xb080>
   13ae8:	ldr	sl, [r5, #44]	; 0x2c
   13aec:	cmp	r4, sl
   13af0:	ldr	fp, [r5, #52]	; 0x34
   13af4:	bge	13b38 <__assert_fail@plt+0x2b7c>
   13af8:	mov	r0, r8
   13afc:	mov	r1, fp
   13b00:	mov	r2, r4
   13b04:	bl	10f2c <strncpy@plt>
   13b08:	ldr	r3, [r5, #24]
   13b0c:	ldr	r9, [r5, #16]
   13b10:	sub	sl, sl, r4
   13b14:	add	fp, fp, r4
   13b18:	ldr	r8, [r9, r3, lsl #2]
   13b1c:	str	sl, [r5, #44]	; 0x2c
   13b20:	str	fp, [r5, #52]	; 0x34
   13b24:	str	r4, [r5, #32]
   13b28:	str	r4, [r8, #16]
   13b2c:	add	r9, r9, r3, lsl #2
   13b30:	mov	sl, #0
   13b34:	b	139c4 <__assert_fail@plt+0x2a08>
   13b38:	mov	r1, fp
   13b3c:	mov	r0, r8
   13b40:	mov	r2, sl
   13b44:	bl	10f2c <strncpy@plt>
   13b48:	mov	r3, #0
   13b4c:	str	sl, [r5, #32]
   13b50:	mov	r4, sl
   13b54:	str	r3, [r5, #44]	; 0x2c
   13b58:	b	139a4 <__assert_fail@plt+0x29e8>
   13b5c:	ldr	r0, [pc, #36]	; 13b88 <__assert_fail@plt+0x2bcc>
   13b60:	bl	133f8 <__assert_fail@plt+0x243c>
   13b64:	ldr	r0, [pc, #32]	; 13b8c <__assert_fail@plt+0x2bd0>
   13b68:	bl	133f8 <__assert_fail@plt+0x243c>
   13b6c:	muleq	r3, r0, r1
   13b70:	andeq	r1, r3, r8, lsl r2
   13b74:	andeq	pc, r1, ip, asr #9
   13b78:	andeq	r1, r3, r0, ror r1
   13b7c:	strdeq	pc, [r1], -r8
   13b80:	andeq	ip, r1, r0, lsr r7
   13b84:	andeq	r1, r3, r0, lsl #3
   13b88:	muleq	r1, r4, r4
   13b8c:	andeq	pc, r1, r8, lsl r5	; <UNPREDICTABLE>
   13b90:	push	{r4, r5, r6, r7, r8, lr}
   13b94:	ldr	r4, [pc, #204]	; 13c68 <__assert_fail@plt+0x2cac>
   13b98:	ldr	r6, [pc, #204]	; 13c6c <__assert_fail@plt+0x2cb0>
   13b9c:	ldrb	r0, [r4, #28]
   13ba0:	ldr	r5, [r4, #4]
   13ba4:	mov	r3, r5
   13ba8:	cmp	r0, #0
   13bac:	strb	r0, [r3], #1
   13bb0:	bne	13c04 <__assert_fail@plt+0x2c48>
   13bb4:	ldr	ip, [r4, #24]
   13bb8:	ldr	r2, [r4, #16]
   13bbc:	ldr	r1, [r4, #32]
   13bc0:	ldr	r2, [r2, ip, lsl #2]
   13bc4:	ldr	r2, [r2, #4]
   13bc8:	add	r2, r2, r1
   13bcc:	cmp	r5, r2
   13bd0:	bcc	13c04 <__assert_fail@plt+0x2c48>
   13bd4:	str	r3, [r4, #4]
   13bd8:	ldr	r7, [r6]
   13bdc:	bl	137cc <__assert_fail@plt+0x2810>
   13be0:	cmp	r0, #1
   13be4:	beq	13c24 <__assert_fail@plt+0x2c68>
   13be8:	cmp	r0, #2
   13bec:	beq	13c1c <__assert_fail@plt+0x2c60>
   13bf0:	cmp	r0, #0
   13bf4:	beq	13c48 <__assert_fail@plt+0x2c8c>
   13bf8:	ldr	r5, [r4, #4]
   13bfc:	mov	r3, r5
   13c00:	ldrb	r0, [r3], #1
   13c04:	ldrb	r1, [r5, #1]
   13c08:	mov	r2, #0
   13c0c:	str	r3, [r4, #4]
   13c10:	strb	r1, [r4, #28]
   13c14:	strb	r2, [r5]
   13c18:	pop	{r4, r5, r6, r7, r8, pc}
   13c1c:	ldr	r0, [r4, #36]	; 0x24
   13c20:	bl	13734 <__assert_fail@plt+0x2778>
   13c24:	bl	11790 <__assert_fail@plt+0x7d4>
   13c28:	cmp	r0, #0
   13c2c:	beq	13c60 <__assert_fail@plt+0x2ca4>
   13c30:	ldr	r3, [r4, #40]	; 0x28
   13c34:	cmp	r3, #0
   13c38:	bne	13b9c <__assert_fail@plt+0x2be0>
   13c3c:	ldr	r0, [r4, #36]	; 0x24
   13c40:	bl	13734 <__assert_fail@plt+0x2778>
   13c44:	b	13b9c <__assert_fail@plt+0x2be0>
   13c48:	ldr	r3, [r6]
   13c4c:	sub	r7, r5, r7
   13c50:	add	r5, r3, r7
   13c54:	ldrb	r0, [r3, r7]
   13c58:	add	r3, r5, #1
   13c5c:	b	13c04 <__assert_fail@plt+0x2c48>
   13c60:	mvn	r0, #0
   13c64:	pop	{r4, r5, r6, r7, r8, pc}
   13c68:	muleq	r3, r0, r1
   13c6c:	andeq	r1, r3, r8, lsl r2
   13c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c74:	sub	sp, sp, #12
   13c78:	ldr	r9, [pc, #2428]	; 145fc <__assert_fail@plt+0x3640>
   13c7c:	ldr	r3, [r9, #56]	; 0x38
   13c80:	ldr	r4, [r9]
   13c84:	cmp	r3, #0
   13c88:	beq	13e80 <__assert_fail@plt+0x2ec4>
   13c8c:	ldrb	r2, [r9, #28]
   13c90:	ldr	r8, [r9, #4]
   13c94:	ldr	r3, [pc, #2404]	; 14600 <__assert_fail@plt+0x3644>
   13c98:	str	r3, [sp]
   13c9c:	ldr	r3, [pc, #2400]	; 14604 <__assert_fail@plt+0x3648>
   13ca0:	lsl	r1, r4, #1
   13ca4:	sub	r0, r3, #1488	; 0x5d0
   13ca8:	add	r3, r3, #4
   13cac:	sub	r6, r0, #1024	; 0x400
   13cb0:	add	r5, r6, #1648	; 0x670
   13cb4:	ldrsh	r3, [r3, r1]
   13cb8:	ldrsh	r0, [r0, r1]
   13cbc:	add	r5, r5, #8
   13cc0:	mov	r7, r5
   13cc4:	ldr	r5, [pc, #2364]	; 14608 <__assert_fail@plt+0x364c>
   13cc8:	strb	r2, [r8]
   13ccc:	str	r8, [sp, #4]
   13cd0:	ldr	r1, [pc, #2356]	; 1460c <__assert_fail@plt+0x3650>
   13cd4:	ldrd	sl, [r9, #8]
   13cd8:	add	ip, r1, #4
   13cdc:	mov	lr, #0
   13ce0:	sub	r1, r1, #636	; 0x27c
   13ce4:	cmp	r0, #0
   13ce8:	movne	sl, r4
   13cec:	movne	fp, r8
   13cf0:	movne	lr, #1
   13cf4:	ldrb	r2, [r6, r2, lsl #2]
   13cf8:	b	13d18 <__assert_fail@plt+0x2d5c>
   13cfc:	lsl	r4, r4, #1
   13d00:	ldrsh	r4, [r7, r4]
   13d04:	cmp	r4, r5
   13d08:	addgt	r2, r6, r2, lsl #2
   13d0c:	lsl	r3, r4, #1
   13d10:	ldrbgt	r2, [r2, #2296]	; 0x8f8
   13d14:	ldrsh	r3, [r1, r3]
   13d18:	add	r3, r3, r2
   13d1c:	lsl	r3, r3, #1
   13d20:	ldrsh	r0, [ip, r3]
   13d24:	cmp	r0, r4
   13d28:	bne	13cfc <__assert_fail@plt+0x2d40>
   13d2c:	ldr	r2, [pc, #2268]	; 14610 <__assert_fail@plt+0x3654>
   13d30:	ldr	r0, [pc, #2268]	; 14614 <__assert_fail@plt+0x3658>
   13d34:	add	r8, r8, #1
   13d38:	ldrsh	r4, [r2, r3]
   13d3c:	lsl	r2, r4, #1
   13d40:	ldrsh	r3, [r1, r2]
   13d44:	cmp	r3, r0
   13d48:	ldrne	r0, [pc, #2248]	; 14618 <__assert_fail@plt+0x365c>
   13d4c:	ldrshne	r0, [r0, r2]
   13d50:	ldrbne	r2, [r8]
   13d54:	bne	13ce4 <__assert_fail@plt+0x2d28>
   13d58:	cmp	lr, #0
   13d5c:	bne	145ec <__assert_fail@plt+0x3630>
   13d60:	ldr	r4, [sp, #4]
   13d64:	mov	sl, #0
   13d68:	mov	fp, #1
   13d6c:	ldr	r1, [pc, #2212]	; 14618 <__assert_fail@plt+0x365c>
   13d70:	ldrsh	r3, [r1, r2]
   13d74:	cmp	r3, #0
   13d78:	ldreq	r3, [r9, #8]
   13d7c:	ldreq	r8, [r9, #12]
   13d80:	lsleq	r3, r3, #1
   13d84:	sub	r2, r8, r4
   13d88:	ldrsheq	r3, [r1, r3]
   13d8c:	ldr	r1, [sp]
   13d90:	str	r8, [r9, #4]
   13d94:	str	r4, [r1]
   13d98:	ldr	r1, [pc, #2172]	; 1461c <__assert_fail@plt+0x3660>
   13d9c:	str	r2, [r1]
   13da0:	ldrb	r2, [r8]
   13da4:	strb	sl, [r8]
   13da8:	strb	r2, [r9, #28]
   13dac:	cmp	r3, #49	; 0x31
   13db0:	ldrls	pc, [pc, r3, lsl #2]
   13db4:	b	145f4 <__assert_fail@plt+0x3638>
   13db8:	andeq	r4, r1, r0, lsl r0
   13dbc:	andeq	r4, r1, r8, lsr r4
   13dc0:	andeq	r4, r1, r4, lsr #8
   13dc4:	andeq	r4, r1, r4, lsl #8
   13dc8:	strdeq	r4, [r1], -ip
   13dcc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13dd0:	andeq	r4, r1, ip, ror #7
   13dd4:	andeq	r4, r1, r4, ror #7
   13dd8:	ldrdeq	r4, [r1], -ip
   13ddc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13de0:	andeq	r4, r1, ip, asr #7
   13de4:	andeq	r4, r1, r4, asr #7
   13de8:			; <UNDEFINED> instruction: 0x000143bc
   13dec:			; <UNDEFINED> instruction: 0x000143b4
   13df0:	andeq	r4, r1, ip, ror r0
   13df4:	andeq	r4, r1, r4, ror r0
   13df8:	andeq	r4, r1, ip, rrx
   13dfc:	andeq	r4, r1, r4, rrx
   13e00:	andeq	r4, r1, ip, asr r0
   13e04:	andeq	r4, r1, r4, asr r0
   13e08:	andeq	r4, r1, ip, asr #32
   13e0c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13e10:	andeq	r4, r1, ip, lsr #7
   13e14:	andeq	r4, r1, r8, ror #2
   13e18:	andeq	r4, r1, r0, ror #2
   13e1c:	andeq	r4, r1, r8, asr r1
   13e20:	andeq	r4, r1, r0, asr r1
   13e24:	andeq	r4, r1, r8, asr #2
   13e28:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13e2c:	andeq	r3, r1, r8, ror pc
   13e30:	andeq	r4, r1, r4, asr r3
   13e34:	andeq	r4, r1, r4, lsr #7
   13e38:	andeq	r4, r1, r4, asr #32
   13e3c:	andeq	r3, r1, r8, ror pc
   13e40:	andeq	r4, r1, r0, ror r1
   13e44:	andeq	r4, r1, ip, asr r3
   13e48:	andeq	r4, r1, r8, lsr r3
   13e4c:	andeq	r4, r1, ip, lsl r3
   13e50:	andeq	r4, r1, r4, lsl #4
   13e54:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e58:	andeq	r4, r1, ip, lsl #3
   13e5c:	andeq	r3, r1, r8, lsr #30
   13e60:	andeq	r4, r1, r8, lsr #32
   13e64:			; <UNDEFINED> instruction: 0x000142b8
   13e68:	andeq	r4, r1, ip, lsl r2
   13e6c:	andeq	r3, r1, r4, lsr #31
   13e70:			; <UNDEFINED> instruction: 0x000141b4
   13e74:	andeq	r4, r1, r4, lsl #1
   13e78:	andeq	r4, r1, r0, asr #2
   13e7c:	andeq	r4, r1, r0, asr #2
   13e80:	mov	r3, #1
   13e84:	cmp	r4, #0
   13e88:	streq	r3, [r9]
   13e8c:	str	r3, [r9, #56]	; 0x38
   13e90:	ldr	r3, [r9, #36]	; 0x24
   13e94:	cmp	r3, #0
   13e98:	ldreq	r3, [pc, #1920]	; 14620 <__assert_fail@plt+0x3664>
   13e9c:	ldreq	r3, [r3]
   13ea0:	streq	r3, [r9, #36]	; 0x24
   13ea4:	ldr	r3, [r9, #60]	; 0x3c
   13ea8:	cmp	r3, #0
   13eac:	ldreq	r3, [pc, #1904]	; 14624 <__assert_fail@plt+0x3668>
   13eb0:	ldreq	r3, [r3]
   13eb4:	streq	r3, [r9, #60]	; 0x3c
   13eb8:	ldr	r3, [r9, #16]
   13ebc:	cmp	r3, #0
   13ec0:	beq	13f58 <__assert_fail@plt+0x2f9c>
   13ec4:	ldr	r2, [r9, #24]
   13ec8:	ldr	r0, [r3, r2, lsl #2]
   13ecc:	cmp	r0, #0
   13ed0:	beq	13f58 <__assert_fail@plt+0x2f9c>
   13ed4:	ldr	r8, [r0, #8]
   13ed8:	ldr	r1, [pc, #1824]	; 14600 <__assert_fail@plt+0x3644>
   13edc:	ldr	r2, [r0, #16]
   13ee0:	ldr	r3, [r0]
   13ee4:	str	r8, [r1]
   13ee8:	str	r1, [sp]
   13eec:	strd	r2, [r9, #32]
   13ef0:	ldrb	r2, [r8]
   13ef4:	ldr	r4, [r9]
   13ef8:	str	r8, [r9, #4]
   13efc:	strb	r2, [r9, #28]
   13f00:	b	13c9c <__assert_fail@plt+0x2ce0>
   13f04:	bl	13b90 <__assert_fail@plt+0x2bd4>
   13f08:	cmp	r0, #42	; 0x2a
   13f0c:	beq	13f04 <__assert_fail@plt+0x2f48>
   13f10:	cmp	r0, #47	; 0x2f
   13f14:	beq	13fcc <__assert_fail@plt+0x3010>
   13f18:	cmp	r0, #10
   13f1c:	beq	13f44 <__assert_fail@plt+0x2f88>
   13f20:	cmn	r0, #1
   13f24:	beq	13ff4 <__assert_fail@plt+0x3038>
   13f28:	bl	13b90 <__assert_fail@plt+0x2bd4>
   13f2c:	cmp	r0, #42	; 0x2a
   13f30:	beq	13f04 <__assert_fail@plt+0x2f48>
   13f34:	cmn	r0, #1
   13f38:	beq	13ff4 <__assert_fail@plt+0x3038>
   13f3c:	cmp	r0, #10
   13f40:	bne	13f28 <__assert_fail@plt+0x2f6c>
   13f44:	ldr	r2, [pc, #1756]	; 14628 <__assert_fail@plt+0x366c>
   13f48:	ldr	r3, [r2]
   13f4c:	add	r3, r3, #1
   13f50:	str	r3, [r2]
   13f54:	b	13f28 <__assert_fail@plt+0x2f6c>
   13f58:	bl	13424 <__assert_fail@plt+0x2468>
   13f5c:	mov	r1, #16384	; 0x4000
   13f60:	ldr	r0, [r9, #36]	; 0x24
   13f64:	ldr	r5, [r9, #24]
   13f68:	ldr	r4, [r9, #16]
   13f6c:	bl	136d8 <__assert_fail@plt+0x271c>
   13f70:	str	r0, [r4, r5, lsl #2]
   13f74:	b	13ed4 <__assert_fail@plt+0x2f18>
   13f78:	ldr	r3, [sp]
   13f7c:	ldr	r2, [pc, #1704]	; 1462c <__assert_fail@plt+0x3670>
   13f80:	ldr	r3, [r3]
   13f84:	ldrb	r1, [r3]
   13f88:	strb	r1, [r2]
   13f8c:	ldrb	r3, [r3]
   13f90:	mov	r0, r3
   13f94:	add	sp, sp, #12
   13f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f9c:	ldr	r3, [pc, #1676]	; 14630 <__assert_fail@plt+0x3674>
   13fa0:	b	13f90 <__assert_fail@plt+0x2fd4>
   13fa4:	ldr	r3, [sp]
   13fa8:	ldr	r3, [r3]
   13fac:	ldrb	r1, [r3]
   13fb0:	cmp	r1, #31
   13fb4:	bls	14498 <__assert_fail@plt+0x34dc>
   13fb8:	cmp	r1, #126	; 0x7e
   13fbc:	movls	r1, r3
   13fc0:	ldrhi	r0, [pc, #1644]	; 14634 <__assert_fail@plt+0x3678>
   13fc4:	ldrls	r0, [pc, #1644]	; 14638 <__assert_fail@plt+0x367c>
   13fc8:	bl	186b0 <__assert_fail@plt+0x76f4>
   13fcc:	ldr	r4, [r9]
   13fd0:	ldr	r3, [pc, #1580]	; 14604 <__assert_fail@plt+0x3648>
   13fd4:	lsl	r2, r4, #1
   13fd8:	sub	r1, r3, #1488	; 0x5d0
   13fdc:	add	r3, r3, #4
   13fe0:	ldrsh	r0, [r1, r2]
   13fe4:	ldrsh	r3, [r3, r2]
   13fe8:	ldrb	r2, [r9, #28]
   13fec:	ldr	r8, [r9, #4]
   13ff0:	b	13cc4 <__assert_fail@plt+0x2d08>
   13ff4:	ldr	r3, [pc, #1600]	; 1463c <__assert_fail@plt+0x3680>
   13ff8:	mov	r2, #30
   13ffc:	mov	r1, #1
   14000:	ldr	r3, [r3]
   14004:	ldr	r0, [pc, #1588]	; 14640 <__assert_fail@plt+0x3684>
   14008:	bl	10e54 <fwrite@plt>
   1400c:	b	13fcc <__assert_fail@plt+0x3010>
   14010:	ldrb	r3, [r9, #28]
   14014:	ldr	r0, [r9, #8]
   14018:	strb	r3, [r8]
   1401c:	lsl	r2, r0, #1
   14020:	ldr	r8, [r9, #12]
   14024:	b	13d6c <__assert_fail@plt+0x2db0>
   14028:	ldr	r3, [sp]
   1402c:	ldr	r0, [r3]
   14030:	bl	182a0 <__assert_fail@plt+0x72e4>
   14034:	ldr	r2, [pc, #1520]	; 1462c <__assert_fail@plt+0x3670>
   14038:	ldr	r3, [pc, #1540]	; 14644 <__assert_fail@plt+0x3688>
   1403c:	str	r0, [r2]
   14040:	b	13f90 <__assert_fail@plt+0x2fd4>
   14044:	ldr	r3, [pc, #1532]	; 14648 <__assert_fail@plt+0x368c>
   14048:	b	13f90 <__assert_fail@plt+0x2fd4>
   1404c:	ldr	r3, [pc, #1528]	; 1464c <__assert_fail@plt+0x3690>
   14050:	b	13f90 <__assert_fail@plt+0x2fd4>
   14054:	ldr	r3, [pc, #1524]	; 14650 <__assert_fail@plt+0x3694>
   14058:	b	13f90 <__assert_fail@plt+0x2fd4>
   1405c:	ldr	r3, [pc, #1520]	; 14654 <__assert_fail@plt+0x3698>
   14060:	b	13f90 <__assert_fail@plt+0x2fd4>
   14064:	ldr	r3, [pc, #1516]	; 14658 <__assert_fail@plt+0x369c>
   14068:	b	13f90 <__assert_fail@plt+0x2fd4>
   1406c:	ldr	r3, [pc, #1512]	; 1465c <__assert_fail@plt+0x36a0>
   14070:	b	13f90 <__assert_fail@plt+0x2fd4>
   14074:	mov	r3, #280	; 0x118
   14078:	b	13f90 <__assert_fail@plt+0x2fd4>
   1407c:	ldr	r3, [pc, #1500]	; 14660 <__assert_fail@plt+0x36a4>
   14080:	b	13f90 <__assert_fail@plt+0x2fd4>
   14084:	ldrb	r0, [r9, #28]
   14088:	ldr	r1, [r9, #24]
   1408c:	ldr	r3, [r9, #16]
   14090:	ldr	r2, [sp]
   14094:	ldr	r2, [r2]
   14098:	strb	r0, [r8]
   1409c:	ldr	r3, [r3, r1, lsl #2]
   140a0:	sub	r2, r8, r2
   140a4:	sub	r2, r2, #1
   140a8:	ldr	r1, [r3, #44]	; 0x2c
   140ac:	cmp	r1, #0
   140b0:	streq	fp, [r3, #44]	; 0x2c
   140b4:	ldreq	r1, [r3, #16]
   140b8:	ldreq	r0, [r9, #36]	; 0x24
   140bc:	ldrne	r1, [r9, #32]
   140c0:	streq	r1, [r9, #32]
   140c4:	streq	r0, [r3]
   140c8:	ldr	r3, [r3, #4]
   140cc:	ldr	r0, [r9, #4]
   140d0:	add	r3, r3, r1
   140d4:	cmp	r0, r3
   140d8:	bls	1450c <__assert_fail@plt+0x3550>
   140dc:	str	r2, [sp, #4]
   140e0:	bl	137cc <__assert_fail@plt+0x2810>
   140e4:	cmp	r0, #1
   140e8:	beq	144d8 <__assert_fail@plt+0x351c>
   140ec:	cmp	r0, #2
   140f0:	ldr	r2, [sp, #4]
   140f4:	beq	144a8 <__assert_fail@plt+0x34ec>
   140f8:	cmp	r0, #0
   140fc:	bne	13fcc <__assert_fail@plt+0x3010>
   14100:	ldr	sl, [sp]
   14104:	ldr	r8, [sl]
   14108:	add	r8, r8, r2
   1410c:	str	r8, [r9, #4]
   14110:	bl	132f0 <__assert_fail@plt+0x2334>
   14114:	ldr	r3, [sl]
   14118:	str	r3, [sp, #4]
   1411c:	mov	r4, r0
   14120:	ldr	r3, [pc, #1244]	; 14604 <__assert_fail@plt+0x3648>
   14124:	lsl	r2, r4, #1
   14128:	sub	r1, r3, #1488	; 0x5d0
   1412c:	add	r3, r3, #4
   14130:	ldrsh	r0, [r1, r2]
   14134:	ldrsh	r3, [r3, r2]
   14138:	ldrb	r2, [r8]
   1413c:	b	13cd0 <__assert_fail@plt+0x2d14>
   14140:	mov	r3, #0
   14144:	b	13f90 <__assert_fail@plt+0x2fd4>
   14148:	ldr	r3, [pc, #1300]	; 14664 <__assert_fail@plt+0x36a8>
   1414c:	b	13f90 <__assert_fail@plt+0x2fd4>
   14150:	mov	r3, #288	; 0x120
   14154:	b	13f90 <__assert_fail@plt+0x2fd4>
   14158:	ldr	r3, [pc, #1288]	; 14668 <__assert_fail@plt+0x36ac>
   1415c:	b	13f90 <__assert_fail@plt+0x2fd4>
   14160:	mov	r3, #284	; 0x11c
   14164:	b	13f90 <__assert_fail@plt+0x2fd4>
   14168:	ldr	r3, [pc, #1276]	; 1466c <__assert_fail@plt+0x36b0>
   1416c:	b	13f90 <__assert_fail@plt+0x2fd4>
   14170:	ldr	r3, [sp]
   14174:	ldr	r2, [pc, #1200]	; 1462c <__assert_fail@plt+0x3670>
   14178:	ldr	r1, [r3]
   1417c:	ldr	r3, [pc, #1260]	; 14670 <__assert_fail@plt+0x36b4>
   14180:	ldrb	r1, [r1]
   14184:	strb	r1, [r2]
   14188:	b	13f90 <__assert_fail@plt+0x2fd4>
   1418c:	ldr	r4, [r9]
   14190:	ldr	r3, [pc, #1132]	; 14604 <__assert_fail@plt+0x3648>
   14194:	ldrb	r2, [r9, #28]
   14198:	lsl	r1, r4, #1
   1419c:	sub	r0, r3, #1488	; 0x5d0
   141a0:	add	r3, r3, #4
   141a4:	ldr	r8, [r9, #4]
   141a8:	ldrsh	r0, [r0, r1]
   141ac:	ldrsh	r3, [r3, r1]
   141b0:	b	13cc8 <__assert_fail@plt+0x2d0c>
   141b4:	ldr	r0, [sp]
   141b8:	ldr	r1, [pc, #1116]	; 1461c <__assert_fail@plt+0x3660>
   141bc:	ldr	r3, [r9, #60]	; 0x3c
   141c0:	mov	r2, #1
   141c4:	ldr	r1, [r1]
   141c8:	ldr	r0, [r0]
   141cc:	bl	10e54 <fwrite@plt>
   141d0:	b	13fcc <__assert_fail@plt+0x3010>
   141d4:	ldr	ip, [pc, #1100]	; 14628 <__assert_fail@plt+0x366c>
   141d8:	ldr	r4, [r9]
   141dc:	ldr	r3, [pc, #1056]	; 14604 <__assert_fail@plt+0x3648>
   141e0:	ldr	r2, [ip]
   141e4:	lsl	r1, r4, #1
   141e8:	sub	r0, r3, #1488	; 0x5d0
   141ec:	add	r3, r3, #4
   141f0:	add	r2, r2, #1
   141f4:	ldrsh	r0, [r0, r1]
   141f8:	ldrsh	r3, [r3, r1]
   141fc:	str	r2, [ip]
   14200:	b	13fe8 <__assert_fail@plt+0x302c>
   14204:	ldr	r1, [pc, #1052]	; 14628 <__assert_fail@plt+0x366c>
   14208:	ldr	r3, [pc, #1124]	; 14674 <__assert_fail@plt+0x36b8>
   1420c:	ldr	r2, [r1]
   14210:	add	r2, r2, #1
   14214:	str	r2, [r1]
   14218:	b	13f90 <__assert_fail@plt+0x2fd4>
   1421c:	ldr	r3, [sp]
   14220:	ldr	r5, [r3]
   14224:	mov	r0, r5
   14228:	bl	10ee4 <strlen@plt>
   1422c:	sub	r0, r0, #1
   14230:	ldrb	r3, [r5, r0]
   14234:	cmp	r3, #46	; 0x2e
   14238:	moveq	r3, #0
   1423c:	strbeq	r3, [r5, r0]
   14240:	ldreq	r3, [sp]
   14244:	ldreq	r5, [r3]
   14248:	mov	r4, r5
   1424c:	ldrb	r3, [r5]
   14250:	cmp	r3, #48	; 0x30
   14254:	bne	14264 <__assert_fail@plt+0x32a8>
   14258:	ldrb	r3, [r4, #1]!
   1425c:	cmp	r3, #48	; 0x30
   14260:	beq	14258 <__assert_fail@plt+0x329c>
   14264:	cmp	r3, #0
   14268:	ldr	r6, [pc, #952]	; 14628 <__assert_fail@plt+0x366c>
   1426c:	ldr	r7, [pc, #1028]	; 14678 <__assert_fail@plt+0x36bc>
   14270:	subeq	r4, r4, #1
   14274:	ldrb	r3, [r4]
   14278:	cmp	r3, #0
   1427c:	beq	1445c <__assert_fail@plt+0x34a0>
   14280:	cmp	r3, #92	; 0x5c
   14284:	ldreq	r3, [r6]
   14288:	addeq	r3, r3, #1
   1428c:	streq	r3, [r6]
   14290:	ldrbeq	r3, [r4, #2]
   14294:	addeq	r4, r4, #2
   14298:	add	r4, r4, #1
   1429c:	cmp	r3, #44	; 0x2c
   142a0:	strbne	r3, [r5]
   142a4:	addne	r5, r5, #1
   142a8:	bne	14274 <__assert_fail@plt+0x32b8>
   142ac:	mov	r0, r7
   142b0:	bl	18784 <__assert_fail@plt+0x77c8>
   142b4:	b	14274 <__assert_fail@plt+0x32b8>
   142b8:	ldr	r4, [sp]
   142bc:	ldr	r0, [r4]
   142c0:	bl	182a0 <__assert_fail@plt+0x72e4>
   142c4:	ldr	r3, [pc, #864]	; 1462c <__assert_fail@plt+0x3670>
   142c8:	ldr	r2, [r4]
   142cc:	str	r0, [r3]
   142d0:	ldrb	r3, [r2]
   142d4:	cmp	r3, #0
   142d8:	beq	1447c <__assert_fail@plt+0x34c0>
   142dc:	ldr	r0, [pc, #836]	; 14628 <__assert_fail@plt+0x366c>
   142e0:	mov	r1, #0
   142e4:	cmp	r3, #10
   142e8:	ldreq	r3, [r0]
   142ec:	addeq	r3, r3, #1
   142f0:	streq	r3, [r0]
   142f4:	ldrb	r3, [r2]
   142f8:	cmp	r3, #34	; 0x22
   142fc:	ldrb	r3, [r2, #1]!
   14300:	addeq	r1, r1, #1
   14304:	cmp	r3, #0
   14308:	bne	142e4 <__assert_fail@plt+0x3328>
   1430c:	cmp	r1, #2
   14310:	bne	1447c <__assert_fail@plt+0x34c0>
   14314:	ldr	r3, [pc, #864]	; 1467c <__assert_fail@plt+0x36c0>
   14318:	b	13f90 <__assert_fail@plt+0x2fd4>
   1431c:	ldr	r3, [sp]
   14320:	ldr	r2, [pc, #772]	; 1462c <__assert_fail@plt+0x3670>
   14324:	ldr	r1, [r3]
   14328:	ldr	r3, [pc, #848]	; 14680 <__assert_fail@plt+0x36c4>
   1432c:	ldrb	r1, [r1]
   14330:	strb	r1, [r2]
   14334:	b	13f90 <__assert_fail@plt+0x2fd4>
   14338:	ldr	r3, [sp]
   1433c:	ldr	r0, [r3]
   14340:	bl	182a0 <__assert_fail@plt+0x72e4>
   14344:	ldr	r2, [pc, #736]	; 1462c <__assert_fail@plt+0x3670>
   14348:	ldr	r3, [pc, #820]	; 14684 <__assert_fail@plt+0x36c8>
   1434c:	str	r0, [r2]
   14350:	b	13f90 <__assert_fail@plt+0x2fd4>
   14354:	ldr	r3, [pc, #812]	; 14688 <__assert_fail@plt+0x36cc>
   14358:	b	13f90 <__assert_fail@plt+0x2fd4>
   1435c:	ldrb	r2, [r9, #28]
   14360:	ldr	r3, [pc, #708]	; 1462c <__assert_fail@plt+0x3670>
   14364:	mov	r1, #61	; 0x3d
   14368:	strb	r1, [r3]
   1436c:	strb	r2, [r8]
   14370:	ldr	r2, [sp]
   14374:	mov	r3, #1
   14378:	str	r4, [r2]
   1437c:	ldr	r2, [pc, #664]	; 1461c <__assert_fail@plt+0x3660>
   14380:	str	r3, [r2]
   14384:	ldrb	r1, [r4, #1]
   14388:	add	r2, r4, r3
   1438c:	mov	r3, #0
   14390:	strb	r3, [r4, #1]
   14394:	strb	r1, [r9, #28]
   14398:	str	r2, [r9, #4]
   1439c:	ldr	r3, [pc, #716]	; 14670 <__assert_fail@plt+0x36b4>
   143a0:	b	13f90 <__assert_fail@plt+0x2fd4>
   143a4:	mov	r3, #260	; 0x104
   143a8:	b	13f90 <__assert_fail@plt+0x2fd4>
   143ac:	mov	r3, #292	; 0x124
   143b0:	b	13f90 <__assert_fail@plt+0x2fd4>
   143b4:	ldr	r3, [pc, #720]	; 1468c <__assert_fail@plt+0x36d0>
   143b8:	b	13f90 <__assert_fail@plt+0x2fd4>
   143bc:	mov	r3, #276	; 0x114
   143c0:	b	13f90 <__assert_fail@plt+0x2fd4>
   143c4:	ldr	r3, [pc, #708]	; 14690 <__assert_fail@plt+0x36d4>
   143c8:	b	13f90 <__assert_fail@plt+0x2fd4>
   143cc:	ldr	r3, [pc, #704]	; 14694 <__assert_fail@plt+0x36d8>
   143d0:	b	13f90 <__assert_fail@plt+0x2fd4>
   143d4:	ldr	r3, [pc, #700]	; 14698 <__assert_fail@plt+0x36dc>
   143d8:	b	13f90 <__assert_fail@plt+0x2fd4>
   143dc:	mov	r3, #272	; 0x110
   143e0:	b	13f90 <__assert_fail@plt+0x2fd4>
   143e4:	ldr	r3, [pc, #688]	; 1469c <__assert_fail@plt+0x36e0>
   143e8:	b	13f90 <__assert_fail@plt+0x2fd4>
   143ec:	ldr	r3, [pc, #684]	; 146a0 <__assert_fail@plt+0x36e4>
   143f0:	b	13f90 <__assert_fail@plt+0x2fd4>
   143f4:	ldr	r3, [pc, #680]	; 146a4 <__assert_fail@plt+0x36e8>
   143f8:	b	13f90 <__assert_fail@plt+0x2fd4>
   143fc:	mov	r3, #268	; 0x10c
   14400:	b	13f90 <__assert_fail@plt+0x2fd4>
   14404:	ldr	r1, [pc, #540]	; 14628 <__assert_fail@plt+0x366c>
   14408:	mov	r3, #1
   1440c:	str	r3, [r9]
   14410:	ldr	r2, [r1]
   14414:	ldr	r3, [pc, #600]	; 14674 <__assert_fail@plt+0x36b8>
   14418:	add	r2, r2, #1
   1441c:	str	r2, [r1]
   14420:	b	13f90 <__assert_fail@plt+0x2fd4>
   14424:	mov	r4, #1
   14428:	mov	r3, #0
   1442c:	str	r4, [r9]
   14430:	mov	r0, r3
   14434:	b	13fe8 <__assert_fail@plt+0x302c>
   14438:	ldr	r3, [pc, #616]	; 146a8 <__assert_fail@plt+0x36ec>
   1443c:	ldr	r3, [r3]
   14440:	cmp	r3, #0
   14444:	bne	1448c <__assert_fail@plt+0x34d0>
   14448:	mov	r4, #3
   1444c:	str	r4, [r9]
   14450:	mov	r3, #54	; 0x36
   14454:	mov	r0, #2
   14458:	b	13fe8 <__assert_fail@plt+0x302c>
   1445c:	strb	r3, [r5]
   14460:	ldr	r3, [sp]
   14464:	ldr	r0, [r3]
   14468:	bl	182a0 <__assert_fail@plt+0x72e4>
   1446c:	ldr	r2, [pc, #440]	; 1462c <__assert_fail@plt+0x3670>
   14470:	mov	r3, #264	; 0x108
   14474:	str	r0, [r2]
   14478:	b	13f90 <__assert_fail@plt+0x2fd4>
   1447c:	ldr	r0, [pc, #552]	; 146ac <__assert_fail@plt+0x36f0>
   14480:	bl	186b0 <__assert_fail@plt+0x76f4>
   14484:	ldr	r3, [pc, #496]	; 1467c <__assert_fail@plt+0x36c0>
   14488:	b	13f90 <__assert_fail@plt+0x2fd4>
   1448c:	ldr	r0, [pc, #540]	; 146b0 <__assert_fail@plt+0x36f4>
   14490:	bl	186b0 <__assert_fail@plt+0x76f4>
   14494:	b	13fcc <__assert_fail@plt+0x3010>
   14498:	add	r1, r1, #64	; 0x40
   1449c:	ldr	r0, [pc, #528]	; 146b4 <__assert_fail@plt+0x36f8>
   144a0:	bl	186b0 <__assert_fail@plt+0x76f4>
   144a4:	b	13fcc <__assert_fail@plt+0x3010>
   144a8:	ldr	r1, [r9, #24]
   144ac:	ldr	r2, [r9, #16]
   144b0:	ldr	r3, [r9, #32]
   144b4:	ldr	r2, [r2, r1, lsl #2]
   144b8:	ldr	r8, [r2, #4]
   144bc:	add	r8, r8, r3
   144c0:	str	r8, [r9, #4]
   144c4:	bl	132f0 <__assert_fail@plt+0x2334>
   144c8:	ldr	r3, [sp]
   144cc:	ldr	r4, [r3]
   144d0:	lsl	r2, r0, #1
   144d4:	b	13d6c <__assert_fail@plt+0x2db0>
   144d8:	str	sl, [r9, #40]	; 0x28
   144dc:	bl	11790 <__assert_fail@plt+0x7d4>
   144e0:	cmp	r0, #0
   144e4:	bne	145b8 <__assert_fail@plt+0x35fc>
   144e8:	ldr	r3, [r9]
   144ec:	ldr	r2, [sp]
   144f0:	sub	r3, r3, #1
   144f4:	add	r3, r3, r3, lsr #31
   144f8:	ldr	r2, [r2]
   144fc:	asr	r3, r3, #1
   14500:	str	r2, [r9, #4]
   14504:	add	r3, r3, #48	; 0x30
   14508:	b	13dac <__assert_fail@plt+0x2df0>
   1450c:	ldr	r3, [sp]
   14510:	ldr	r8, [r3]
   14514:	add	r8, r8, r2
   14518:	str	r8, [r9, #4]
   1451c:	bl	132f0 <__assert_fail@plt+0x2334>
   14520:	ldr	r3, [pc, #240]	; 14618 <__assert_fail@plt+0x365c>
   14524:	lsl	r2, r0, #1
   14528:	ldrsh	r3, [r3, r2]
   1452c:	cmp	r3, #0
   14530:	ldr	r3, [pc, #204]	; 14604 <__assert_fail@plt+0x3648>
   14534:	strne	r0, [r9, #8]
   14538:	add	ip, r3, #4
   1453c:	add	r1, r3, #644	; 0x284
   14540:	ldrsh	r3, [ip, r2]
   14544:	strne	r8, [r9, #12]
   14548:	add	r3, r3, #1
   1454c:	lsl	lr, r3, #1
   14550:	ldrsh	lr, [r1, lr]
   14554:	cmp	lr, r0
   14558:	beq	14580 <__assert_fail@plt+0x35c4>
   1455c:	lsl	r0, r0, #1
   14560:	ldrsh	lr, [r7, r0]
   14564:	lsl	r0, lr, #1
   14568:	ldrsh	r3, [ip, r0]
   1456c:	add	r3, r3, #1
   14570:	lsl	r4, r3, #1
   14574:	ldrsh	r4, [r1, r4]
   14578:	cmp	lr, r4
   1457c:	bne	14560 <__assert_fail@plt+0x35a4>
   14580:	ldr	r1, [sp]
   14584:	lsl	r3, r3, #1
   14588:	ldr	r4, [r1]
   1458c:	ldr	r1, [pc, #124]	; 14610 <__assert_fail@plt+0x3654>
   14590:	ldrsh	r3, [r1, r3]
   14594:	cmp	r3, r5
   14598:	beq	13d6c <__assert_fail@plt+0x2db0>
   1459c:	cmp	r3, #0
   145a0:	beq	13d6c <__assert_fail@plt+0x2db0>
   145a4:	add	r8, r8, #1
   145a8:	str	r4, [sp, #4]
   145ac:	str	r8, [r9, #4]
   145b0:	mov	r4, r3
   145b4:	b	14120 <__assert_fail@plt+0x3164>
   145b8:	ldr	r3, [r9, #40]	; 0x28
   145bc:	ldr	r4, [r9]
   145c0:	cmp	r3, #0
   145c4:	bne	145d0 <__assert_fail@plt+0x3614>
   145c8:	ldr	r0, [r9, #36]	; 0x24
   145cc:	bl	13734 <__assert_fail@plt+0x2778>
   145d0:	ldr	r2, [pc, #44]	; 14604 <__assert_fail@plt+0x3648>
   145d4:	lsl	r3, r4, #1
   145d8:	sub	r1, r2, #1488	; 0x5d0
   145dc:	add	r2, r2, #4
   145e0:	ldrsh	r0, [r1, r3]
   145e4:	ldrsh	r3, [r2, r3]
   145e8:	b	13fe8 <__assert_fail@plt+0x302c>
   145ec:	strd	sl, [r9, #8]
   145f0:	b	13d60 <__assert_fail@plt+0x2da4>
   145f4:	ldr	r0, [pc, #188]	; 146b8 <__assert_fail@plt+0x36fc>
   145f8:	bl	133f8 <__assert_fail@plt+0x243c>
   145fc:	muleq	r3, r0, r1
   14600:	andeq	r1, r3, r8, lsl r2
   14604:	andeq	lr, r1, r4, lsr #16
   14608:	andeq	r0, r0, fp, lsr r1
   1460c:	andeq	lr, r1, r4, lsr #21
   14610:	andeq	lr, r1, ip, ror #30
   14614:	andeq	r0, r0, sl, lsr #4
   14618:	andeq	lr, r1, r4, asr r2
   1461c:	andeq	r1, r3, ip, lsl r2
   14620:	andeq	r1, r3, r8, ror r1
   14624:	andeq	r1, r3, r0, lsl #3
   14628:	andeq	r1, r3, r0, lsr #5
   1462c:	andeq	r1, r3, r4, lsl r2
   14630:	andeq	r0, r0, lr, lsl r1
   14634:	andeq	pc, r1, r8, asr #11
   14638:	andeq	pc, r1, r4, ror #11
   1463c:	andeq	r1, r3, r8, ror #2
   14640:	andeq	pc, r1, r0, ror #10
   14644:	andeq	r0, r0, r7, lsl #2
   14648:	andeq	r0, r0, r5, lsl #2
   1464c:	andeq	r0, r0, sp, lsl r1
   14650:	andeq	r0, r0, fp, lsl r1
   14654:	andeq	r0, r0, sl, lsl r1
   14658:	andeq	r0, r0, r5, lsl r1
   1465c:	andeq	r0, r0, r9, lsl r1
   14660:	andeq	r0, r0, r7, lsl r1
   14664:	andeq	r0, r0, r1, lsr #2
   14668:	andeq	r0, r0, pc, lsl r1
   1466c:	andeq	r0, r0, r3, lsr #2
   14670:	andeq	r0, r0, r9, lsl #2
   14674:	andeq	r0, r0, r2, lsl #2
   14678:	muleq	r1, ip, r5
   1467c:	andeq	r0, r0, r6, lsl #2
   14680:	andeq	r0, r0, fp, lsl #2
   14684:	andeq	r0, r0, sl, lsl #2
   14688:	andeq	r0, r0, r3, lsl #2
   1468c:	andeq	r0, r0, r6, lsl r1
   14690:	andeq	r0, r0, r3, lsl r1
   14694:	andeq	r0, r0, r2, lsl r1
   14698:	andeq	r0, r0, r1, lsl r1
   1469c:	andeq	r0, r0, pc, lsl #2
   146a0:	andeq	r0, r0, lr, lsl #2
   146a4:	andeq	r0, r0, sp, lsl #2
   146a8:	andeq	r1, r3, ip, ror #3
   146ac:	andeq	pc, r1, r0, lsl #11
   146b0:	andeq	pc, r1, r8, asr #10
   146b4:			; <UNDEFINED> instruction: 0x0001f5b0
   146b8:	strdeq	pc, [r1], -ip
   146bc:	push	{r4, r5, r6, lr}
   146c0:	subs	r4, r0, #0
   146c4:	popeq	{r4, r5, r6, pc}
   146c8:	bl	13424 <__assert_fail@plt+0x2468>
   146cc:	ldr	r3, [pc, #144]	; 14764 <__assert_fail@plt+0x37a8>
   146d0:	ldr	r2, [r3, #16]
   146d4:	cmp	r2, #0
   146d8:	beq	14758 <__assert_fail@plt+0x379c>
   146dc:	ldr	r1, [r3, #24]
   146e0:	ldr	r0, [r2, r1, lsl #2]
   146e4:	lsl	ip, r1, #2
   146e8:	cmp	r0, #0
   146ec:	add	r0, r2, ip
   146f0:	beq	14720 <__assert_fail@plt+0x3764>
   146f4:	ldr	lr, [r3, #4]
   146f8:	ldrb	r5, [r3, #28]
   146fc:	add	r0, ip, #4
   14700:	add	r0, r2, r0
   14704:	strb	r5, [lr]
   14708:	ldr	r2, [r2, r1, lsl #2]
   1470c:	ldr	ip, [r3, #32]
   14710:	add	r1, r1, #1
   14714:	str	lr, [r2, #8]
   14718:	str	r1, [r3, #24]
   1471c:	str	ip, [r2, #16]
   14720:	ldr	r2, [r4, #8]
   14724:	ldr	lr, [pc, #60]	; 14768 <__assert_fail@plt+0x37ac>
   14728:	ldr	r1, [r4]
   1472c:	ldr	ip, [r4, #16]
   14730:	str	r4, [r0]
   14734:	str	r1, [r3, #36]	; 0x24
   14738:	str	r2, [lr]
   1473c:	str	ip, [r3, #32]
   14740:	ldrb	r0, [r2]
   14744:	mov	r1, #1
   14748:	str	r2, [r3, #4]
   1474c:	strb	r0, [r3, #28]
   14750:	str	r1, [r3, #40]	; 0x28
   14754:	pop	{r4, r5, r6, pc}
   14758:	ldr	r0, [r3, #24]
   1475c:	lsl	r0, r0, #2
   14760:	b	14720 <__assert_fail@plt+0x3764>
   14764:	muleq	r3, r0, r1
   14768:	andeq	r1, r3, r8, lsl r2
   1476c:	push	{r4, r5, r6, lr}
   14770:	ldr	r4, [pc, #116]	; 147ec <__assert_fail@plt+0x3830>
   14774:	ldr	r5, [r4, #16]
   14778:	cmp	r5, #0
   1477c:	popeq	{r4, r5, r6, pc}
   14780:	ldr	r6, [r4, #24]
   14784:	ldr	r0, [r5, r6, lsl #2]
   14788:	cmp	r0, #0
   1478c:	popeq	{r4, r5, r6, pc}
   14790:	bl	13568 <__assert_fail@plt+0x25ac>
   14794:	cmp	r6, #0
   14798:	mov	r3, #0
   1479c:	str	r3, [r5, r6, lsl #2]
   147a0:	popeq	{r4, r5, r6, pc}
   147a4:	sub	r6, r6, #1
   147a8:	str	r6, [r4, #24]
   147ac:	ldr	r3, [r5, r6, lsl #2]
   147b0:	cmp	r3, #0
   147b4:	popeq	{r4, r5, r6, pc}
   147b8:	ldr	r2, [r3, #8]
   147bc:	ldr	r0, [pc, #44]	; 147f0 <__assert_fail@plt+0x3834>
   147c0:	ldr	r1, [r3, #16]
   147c4:	ldr	r3, [r3]
   147c8:	str	r2, [r0]
   147cc:	str	r3, [r4, #36]	; 0x24
   147d0:	str	r1, [r4, #32]
   147d4:	ldrb	r1, [r2]
   147d8:	mov	r3, #1
   147dc:	str	r2, [r4, #4]
   147e0:	strb	r1, [r4, #28]
   147e4:	str	r3, [r4, #40]	; 0x28
   147e8:	pop	{r4, r5, r6, pc}
   147ec:	muleq	r3, r0, r1
   147f0:	andeq	r1, r3, r8, lsl r2
   147f4:	cmp	r1, #1
   147f8:	push	{r4, r5, r6, r7, r8, lr}
   147fc:	bls	1486c <__assert_fail@plt+0x38b0>
   14800:	sub	r7, r1, #2
   14804:	ldrb	r4, [r0, r7]
   14808:	cmp	r4, #0
   1480c:	bne	1486c <__assert_fail@plt+0x38b0>
   14810:	add	r1, r0, r1
   14814:	ldrb	r6, [r1, #-1]
   14818:	cmp	r6, #0
   1481c:	bne	14864 <__assert_fail@plt+0x38a8>
   14820:	mov	r5, r0
   14824:	mov	r0, #48	; 0x30
   14828:	bl	10e90 <malloc@plt>
   1482c:	subs	r4, r0, #0
   14830:	beq	14878 <__assert_fail@plt+0x38bc>
   14834:	mov	r3, #1
   14838:	str	r7, [r4, #12]
   1483c:	str	r5, [r4, #4]
   14840:	str	r5, [r4, #8]
   14844:	str	r6, [r4, #20]
   14848:	str	r6, [r4]
   1484c:	str	r7, [r4, #16]
   14850:	str	r6, [r4, #24]
   14854:	str	r6, [r4, #40]	; 0x28
   14858:	str	r6, [r4, #44]	; 0x2c
   1485c:	str	r3, [r4, #28]
   14860:	bl	134c0 <__assert_fail@plt+0x2504>
   14864:	mov	r0, r4
   14868:	pop	{r4, r5, r6, r7, r8, pc}
   1486c:	mov	r4, #0
   14870:	mov	r0, r4
   14874:	pop	{r4, r5, r6, r7, r8, pc}
   14878:	ldr	r0, [pc]	; 14880 <__assert_fail@plt+0x38c4>
   1487c:	bl	133f8 <__assert_fail@plt+0x243c>
   14880:	andeq	pc, r1, r0, lsr r6	; <UNPREDICTABLE>
   14884:	push	{r4, r5, r6, lr}
   14888:	add	r6, r1, #2
   1488c:	mov	r4, r0
   14890:	mov	r0, r6
   14894:	mov	r5, r1
   14898:	bl	10e90 <malloc@plt>
   1489c:	subs	lr, r0, #0
   148a0:	beq	148f8 <__assert_fail@plt+0x393c>
   148a4:	cmp	r5, #0
   148a8:	subgt	r0, r4, #1
   148ac:	addgt	ip, r0, r5
   148b0:	subgt	r3, lr, #1
   148b4:	ble	148c8 <__assert_fail@plt+0x390c>
   148b8:	ldrb	r2, [r0, #1]!
   148bc:	cmp	r0, ip
   148c0:	strb	r2, [r3, #1]!
   148c4:	bne	148b8 <__assert_fail@plt+0x38fc>
   148c8:	add	r2, lr, r5
   148cc:	mov	r3, #0
   148d0:	strb	r3, [r2, #1]
   148d4:	mov	r1, r6
   148d8:	strb	r3, [lr, r5]
   148dc:	mov	r0, lr
   148e0:	bl	147f4 <__assert_fail@plt+0x3838>
   148e4:	subs	r3, r0, #0
   148e8:	beq	14900 <__assert_fail@plt+0x3944>
   148ec:	mov	r2, #1
   148f0:	str	r2, [r3, #20]
   148f4:	pop	{r4, r5, r6, pc}
   148f8:	ldr	r0, [pc, #8]	; 14908 <__assert_fail@plt+0x394c>
   148fc:	bl	133f8 <__assert_fail@plt+0x243c>
   14900:	ldr	r0, [pc, #4]	; 1490c <__assert_fail@plt+0x3950>
   14904:	bl	133f8 <__assert_fail@plt+0x243c>
   14908:	andeq	pc, r1, ip, asr r6	; <UNPREDICTABLE>
   1490c:	andeq	pc, r1, r8, lsl #13
   14910:	push	{r4, lr}
   14914:	mov	r4, r0
   14918:	bl	10ee4 <strlen@plt>
   1491c:	mov	r1, r0
   14920:	mov	r0, r4
   14924:	pop	{r4, lr}
   14928:	b	14884 <__assert_fail@plt+0x38c8>
   1492c:	ldr	r3, [pc, #4]	; 14938 <__assert_fail@plt+0x397c>
   14930:	ldr	r0, [r3]
   14934:	bx	lr
   14938:	muleq	r3, ip, r0
   1493c:	ldr	r3, [pc, #4]	; 14948 <__assert_fail@plt+0x398c>
   14940:	ldr	r0, [r3, #36]	; 0x24
   14944:	bx	lr
   14948:	muleq	r3, r0, r1
   1494c:	ldr	r3, [pc, #4]	; 14958 <__assert_fail@plt+0x399c>
   14950:	ldr	r0, [r3, #60]	; 0x3c
   14954:	bx	lr
   14958:	muleq	r3, r0, r1
   1495c:	ldr	r3, [pc, #4]	; 14968 <__assert_fail@plt+0x39ac>
   14960:	ldr	r0, [r3]
   14964:	bx	lr
   14968:	andeq	r1, r3, ip, lsl r2
   1496c:	ldr	r3, [pc, #4]	; 14978 <__assert_fail@plt+0x39bc>
   14970:	ldr	r0, [r3]
   14974:	bx	lr
   14978:	andeq	r1, r3, r8, lsl r2
   1497c:	ldr	r3, [pc, #4]	; 14988 <__assert_fail@plt+0x39cc>
   14980:	str	r0, [r3]
   14984:	bx	lr
   14988:	muleq	r3, ip, r0
   1498c:	ldr	r3, [pc, #4]	; 14998 <__assert_fail@plt+0x39dc>
   14990:	str	r0, [r3, #36]	; 0x24
   14994:	bx	lr
   14998:	muleq	r3, r0, r1
   1499c:	ldr	r3, [pc, #4]	; 149a8 <__assert_fail@plt+0x39ec>
   149a0:	str	r0, [r3, #60]	; 0x3c
   149a4:	bx	lr
   149a8:	muleq	r3, r0, r1
   149ac:	ldr	r3, [pc, #4]	; 149b8 <__assert_fail@plt+0x39fc>
   149b0:	ldr	r0, [r3, #64]	; 0x40
   149b4:	bx	lr
   149b8:	muleq	r3, r0, r1
   149bc:	ldr	r3, [pc, #4]	; 149c8 <__assert_fail@plt+0x3a0c>
   149c0:	str	r0, [r3, #64]	; 0x40
   149c4:	bx	lr
   149c8:	muleq	r3, r0, r1
   149cc:	push	{r4, r5, r6, r7, r8, lr}
   149d0:	ldr	r5, [pc, #112]	; 14a48 <__assert_fail@plt+0x3a8c>
   149d4:	ldr	r6, [r5, #16]
   149d8:	cmp	r6, #0
   149dc:	beq	14a18 <__assert_fail@plt+0x3a5c>
   149e0:	ldr	r3, [r5, #24]
   149e4:	ldr	r0, [r6, r3, lsl #2]
   149e8:	add	r4, r6, r3, lsl #2
   149ec:	cmp	r0, #0
   149f0:	beq	14a18 <__assert_fail@plt+0x3a5c>
   149f4:	mov	r7, #0
   149f8:	bl	13568 <__assert_fail@plt+0x25ac>
   149fc:	str	r7, [r4]
   14a00:	bl	1476c <__assert_fail@plt+0x37b0>
   14a04:	ldr	r3, [r5, #24]
   14a08:	ldr	r0, [r6, r3, lsl #2]
   14a0c:	add	r4, r6, r3, lsl #2
   14a10:	cmp	r0, #0
   14a14:	bne	149f8 <__assert_fail@plt+0x3a3c>
   14a18:	mov	r0, r6
   14a1c:	bl	10dd0 <free@plt>
   14a20:	mov	r0, #0
   14a24:	str	r0, [r5, #16]
   14a28:	str	r0, [r5, #24]
   14a2c:	str	r0, [r5, #20]
   14a30:	str	r0, [r5, #4]
   14a34:	str	r0, [r5, #56]	; 0x38
   14a38:	str	r0, [r5]
   14a3c:	str	r0, [r5, #36]	; 0x24
   14a40:	str	r0, [r5, #60]	; 0x3c
   14a44:	pop	{r4, r5, r6, r7, r8, pc}
   14a48:	muleq	r3, r0, r1
   14a4c:	b	10e90 <malloc@plt>
   14a50:	b	10e30 <realloc@plt>
   14a54:	b	10dd0 <free@plt>
   14a58:	push	{r4, lr}
   14a5c:	bl	11790 <__assert_fail@plt+0x7d4>
   14a60:	clz	r0, r0
   14a64:	lsr	r0, r0, #5
   14a68:	pop	{r4, pc}
   14a6c:	ldr	r3, [pc, #8]	; 14a7c <__assert_fail@plt+0x3ac0>
   14a70:	mov	r2, #1
   14a74:	str	r2, [r3]
   14a78:	bx	lr
   14a7c:	andeq	r1, r3, r0, lsr #4
   14a80:	ldr	r2, [pc, #40]	; 14ab0 <__assert_fail@plt+0x3af4>
   14a84:	ldr	r1, [pc, #40]	; 14ab4 <__assert_fail@plt+0x3af8>
   14a88:	ldr	r3, [r2]
   14a8c:	ldr	r1, [r1]
   14a90:	ldr	r0, [r2, #4]
   14a94:	rsb	r3, r3, r3, lsl #3
   14a98:	add	ip, r0, #1
   14a9c:	add	r3, r1, r3, lsl #2
   14aa0:	ldr	r3, [r3, #4]
   14aa4:	str	ip, [r2, #4]
   14aa8:	ldrb	r0, [r3, r0]
   14aac:	bx	lr
   14ab0:	andeq	r1, r3, ip, lsr #5
   14ab4:	andeq	r1, r3, r8, ror r2
   14ab8:	push	{r4, r5, r6, lr}
   14abc:	ldr	r5, [pc, #172]	; 14b70 <__assert_fail@plt+0x3bb4>
   14ac0:	ldr	r0, [r5]
   14ac4:	bl	10e0c <_IO_getc@plt>
   14ac8:	cmp	r0, #92	; 0x5c
   14acc:	mov	r4, r0
   14ad0:	beq	14b40 <__assert_fail@plt+0x3b84>
   14ad4:	ldr	r0, [r5]
   14ad8:	bl	1c018 <__assert_fail@plt+0xb05c>
   14adc:	bl	10ecc <__ctype_b_loc@plt>
   14ae0:	lsl	r3, r4, #1
   14ae4:	ldr	r2, [r0]
   14ae8:	ldrh	r3, [r2, r3]
   14aec:	tst	r3, #2048	; 0x800
   14af0:	subne	r4, r4, #48	; 0x30
   14af4:	bne	14b38 <__assert_fail@plt+0x3b7c>
   14af8:	sub	r3, r4, #65	; 0x41
   14afc:	cmp	r3, #25
   14b00:	subls	r4, r4, #55	; 0x37
   14b04:	bls	14b38 <__assert_fail@plt+0x3b7c>
   14b08:	sub	r3, r4, #97	; 0x61
   14b0c:	cmp	r3, #25
   14b10:	subls	r4, r4, #87	; 0x57
   14b14:	bls	14b38 <__assert_fail@plt+0x3b7c>
   14b18:	cmp	r4, #43	; 0x2b
   14b1c:	cmpne	r4, #46	; 0x2e
   14b20:	beq	14b38 <__assert_fail@plt+0x3b7c>
   14b24:	cmp	r4, #45	; 0x2d
   14b28:	beq	14b38 <__assert_fail@plt+0x3b7c>
   14b2c:	cmp	r4, #33	; 0x21
   14b30:	movlt	r4, #126	; 0x7e
   14b34:	movge	r4, #58	; 0x3a
   14b38:	mov	r0, r4
   14b3c:	pop	{r4, r5, r6, pc}
   14b40:	ldr	r0, [r5]
   14b44:	bl	10e0c <_IO_getc@plt>
   14b48:	cmp	r0, #10
   14b4c:	mov	r4, r0
   14b50:	bne	14ad4 <__assert_fail@plt+0x3b18>
   14b54:	ldr	r0, [r5]
   14b58:	bl	10e0c <_IO_getc@plt>
   14b5c:	ldr	r3, [pc, #16]	; 14b74 <__assert_fail@plt+0x3bb8>
   14b60:	mov	r2, #0
   14b64:	str	r2, [r3]
   14b68:	mov	r4, r0
   14b6c:	b	14ad4 <__assert_fail@plt+0x3b18>
   14b70:	andeq	r1, r3, r8, ror r1
   14b74:	andeq	r1, r3, r8, lsr #5
   14b78:	ldr	r3, [r0]
   14b7c:	ldr	r2, [pc, #32]	; 14ba4 <__assert_fail@plt+0x3be8>
   14b80:	ldr	r1, [r0, #4]
   14b84:	rsb	r3, r3, r3, lsl #3
   14b88:	ldr	r2, [r2]
   14b8c:	add	ip, r1, #1
   14b90:	add	r3, r2, r3, lsl #2
   14b94:	ldr	r3, [r3, #4]
   14b98:	str	ip, [r0, #4]
   14b9c:	ldrb	r0, [r3, r1]
   14ba0:	bx	lr
   14ba4:	andeq	r1, r3, r8, ror r2
   14ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bac:	sub	sp, sp, #28
   14bb0:	ldr	r9, [pc, #628]	; 14e2c <__assert_fail@plt+0x3e70>
   14bb4:	mov	r5, r0
   14bb8:	ldr	r8, [pc, #624]	; 14e30 <__assert_fail@plt+0x3e74>
   14bbc:	ldr	r3, [r9]
   14bc0:	add	r0, sp, #4
   14bc4:	str	r3, [sp, #20]
   14bc8:	mov	r7, r1
   14bcc:	bl	19918 <__assert_fail@plt+0x895c>
   14bd0:	add	r0, sp, #8
   14bd4:	bl	19918 <__assert_fail@plt+0x895c>
   14bd8:	add	r0, sp, #12
   14bdc:	bl	19918 <__assert_fail@plt+0x895c>
   14be0:	ldr	r0, [r8]
   14be4:	bl	19908 <__assert_fail@plt+0x894c>
   14be8:	mov	r1, r7
   14bec:	str	r0, [sp]
   14bf0:	add	r0, sp, #12
   14bf4:	bl	1b3fc <__assert_fail@plt+0xa440>
   14bf8:	blx	r5
   14bfc:	cmp	r0, #126	; 0x7e
   14c00:	movne	r6, r0
   14c04:	bne	14c18 <__assert_fail@plt+0x3c5c>
   14c08:	blx	r5
   14c0c:	cmp	r0, #126	; 0x7e
   14c10:	mov	r6, r0
   14c14:	beq	14c08 <__assert_fail@plt+0x3c4c>
   14c18:	cmp	r6, #43	; 0x2b
   14c1c:	bne	14e0c <__assert_fail@plt+0x3e50>
   14c20:	blx	r5
   14c24:	mov	sl, #0
   14c28:	mov	r6, r0
   14c2c:	cmp	r6, #35	; 0x23
   14c30:	movgt	r4, r6
   14c34:	bgt	14cc4 <__assert_fail@plt+0x3d08>
   14c38:	blx	r5
   14c3c:	mov	fp, sp
   14c40:	cmp	r0, #35	; 0x23
   14c44:	movgt	r3, #0
   14c48:	movle	r3, #1
   14c4c:	cmp	r6, r7
   14c50:	movlt	r3, #0
   14c54:	cmp	r3, #0
   14c58:	mov	r4, r0
   14c5c:	bne	14dfc <__assert_fail@plt+0x3e40>
   14c60:	mov	r1, r6
   14c64:	mov	r0, fp
   14c68:	bl	1b3fc <__assert_fail@plt+0xa440>
   14c6c:	cmp	r4, #35	; 0x23
   14c70:	bgt	14cc4 <__assert_fail@plt+0x3d08>
   14c74:	sub	r6, r7, #1
   14c78:	cmp	r7, r4
   14c7c:	movle	r4, r6
   14c80:	mov	r3, #0
   14c84:	add	r2, sp, #8
   14c88:	ldr	r1, [sp, #12]
   14c8c:	ldr	r0, [sp]
   14c90:	bl	1a48c <__assert_fail@plt+0x94d0>
   14c94:	mov	r1, r4
   14c98:	add	r0, sp, #4
   14c9c:	bl	1b3fc <__assert_fail@plt+0xa440>
   14ca0:	mov	r3, #0
   14ca4:	mov	r2, fp
   14ca8:	ldr	r1, [sp, #4]
   14cac:	ldr	r0, [sp, #8]
   14cb0:	bl	1a3a4 <__assert_fail@plt+0x93e8>
   14cb4:	blx	r5
   14cb8:	cmp	r0, #35	; 0x23
   14cbc:	mov	r4, r0
   14cc0:	ble	14c78 <__assert_fail@plt+0x3cbc>
   14cc4:	cmp	r4, #46	; 0x2e
   14cc8:	bne	14da4 <__assert_fail@plt+0x3de8>
   14ccc:	blx	r5
   14cd0:	mov	r6, #0
   14cd4:	cmp	r7, r0
   14cd8:	mov	r4, r0
   14cdc:	add	r0, sp, #8
   14ce0:	suble	r4, r7, #1
   14ce4:	bl	19840 <__assert_fail@plt+0x8884>
   14ce8:	add	r0, sp, #4
   14cec:	bl	19840 <__assert_fail@plt+0x8884>
   14cf0:	ldr	r3, [pc, #316]	; 14e34 <__assert_fail@plt+0x3e78>
   14cf4:	ldr	r0, [r3]
   14cf8:	bl	19908 <__assert_fail@plt+0x894c>
   14cfc:	str	r0, [sp, #16]
   14d00:	ldr	r0, [r8]
   14d04:	bl	19908 <__assert_fail@plt+0x894c>
   14d08:	cmp	r4, #35	; 0x23
   14d0c:	str	r0, [sp, #8]
   14d10:	bgt	14d80 <__assert_fail@plt+0x3dc4>
   14d14:	sub	fp, r7, #1
   14d18:	mov	r3, #0
   14d1c:	add	r2, sp, #8
   14d20:	ldr	r1, [sp, #12]
   14d24:	bl	1a48c <__assert_fail@plt+0x94d0>
   14d28:	mov	r1, r4
   14d2c:	add	r0, sp, #4
   14d30:	bl	1b3fc <__assert_fail@plt+0xa440>
   14d34:	mov	r3, #0
   14d38:	add	r2, sp, #8
   14d3c:	ldr	r1, [sp, #4]
   14d40:	ldr	r0, [sp, #8]
   14d44:	bl	1a3a4 <__assert_fail@plt+0x93e8>
   14d48:	mov	r3, #0
   14d4c:	add	r2, sp, #16
   14d50:	ldr	r1, [sp, #12]
   14d54:	ldr	r0, [sp, #16]
   14d58:	bl	1a48c <__assert_fail@plt+0x94d0>
   14d5c:	blx	r5
   14d60:	add	r6, r6, #1
   14d64:	cmp	r0, #35	; 0x23
   14d68:	cmple	r7, r0
   14d6c:	mov	r4, r0
   14d70:	movle	r4, fp
   14d74:	cmp	r4, #35	; 0x23
   14d78:	ldr	r0, [sp, #8]
   14d7c:	ble	14d18 <__assert_fail@plt+0x3d5c>
   14d80:	mov	r3, r6
   14d84:	add	r2, sp, #8
   14d88:	ldr	r1, [sp, #16]
   14d8c:	bl	1a608 <__assert_fail@plt+0x964c>
   14d90:	mov	r3, #0
   14d94:	mov	r2, sp
   14d98:	ldr	r1, [sp, #8]
   14d9c:	ldr	r0, [sp]
   14da0:	bl	1a3a4 <__assert_fail@plt+0x93e8>
   14da4:	cmp	sl, #0
   14da8:	ldr	r0, [sp]
   14dac:	beq	14dc8 <__assert_fail@plt+0x3e0c>
   14db0:	mov	r1, r0
   14db4:	mov	r3, #0
   14db8:	ldr	r0, [r8]
   14dbc:	mov	r2, sp
   14dc0:	bl	19a60 <__assert_fail@plt+0x8aa4>
   14dc4:	ldr	r0, [sp]
   14dc8:	bl	16ec8 <__assert_fail@plt+0x5f0c>
   14dcc:	add	r0, sp, #4
   14dd0:	bl	19840 <__assert_fail@plt+0x8884>
   14dd4:	add	r0, sp, #8
   14dd8:	bl	19840 <__assert_fail@plt+0x8884>
   14ddc:	add	r0, sp, #12
   14de0:	bl	19840 <__assert_fail@plt+0x8884>
   14de4:	ldr	r2, [sp, #20]
   14de8:	ldr	r3, [r9]
   14dec:	cmp	r2, r3
   14df0:	bne	14e28 <__assert_fail@plt+0x3e6c>
   14df4:	add	sp, sp, #28
   14df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dfc:	mov	r0, fp
   14e00:	sub	r1, r7, #1
   14e04:	bl	1b3fc <__assert_fail@plt+0xa440>
   14e08:	b	14c74 <__assert_fail@plt+0x3cb8>
   14e0c:	cmp	r6, #45	; 0x2d
   14e10:	movne	sl, #0
   14e14:	bne	14c2c <__assert_fail@plt+0x3c70>
   14e18:	blx	r5
   14e1c:	mov	sl, #1
   14e20:	mov	r6, r0
   14e24:	b	14c2c <__assert_fail@plt+0x3c70>
   14e28:	bl	10e24 <__stack_chk_fail@plt>
   14e2c:	andeq	r0, r3, r0, lsl lr
   14e30:	andeq	r1, r3, r8, asr #5
   14e34:	andeq	r1, r3, r0, asr #5
   14e38:	push	{r4, r5, r6, r7, r8, r9, lr}
   14e3c:	sub	sp, sp, #12
   14e40:	ldm	r0, {r3, r4}
   14e44:	ldr	r7, [pc, #512]	; 1504c <__assert_fail@plt+0x4090>
   14e48:	ldr	r6, [pc, #512]	; 15050 <__assert_fail@plt+0x4094>
   14e4c:	rsb	r3, r3, r3, lsl #3
   14e50:	ldr	r2, [r7]
   14e54:	mov	r5, r0
   14e58:	add	r3, r2, r3, lsl #2
   14e5c:	ldr	r2, [r6]
   14e60:	ldr	r8, [r3, #4]
   14e64:	str	r2, [sp, #4]
   14e68:	add	r9, r4, #1
   14e6c:	ldrb	r3, [r8, r4]
   14e70:	add	ip, r8, r4
   14e74:	cmp	r3, #46	; 0x2e
   14e78:	cmpne	r3, #58	; 0x3a
   14e7c:	movne	r2, #1
   14e80:	moveq	r2, #0
   14e84:	beq	15018 <__assert_fail@plt+0x405c>
   14e88:	mov	r2, #1
   14e8c:	ldrb	r3, [ip, #1]!
   14e90:	mov	r0, r2
   14e94:	add	r2, r2, #1
   14e98:	cmp	r3, #46	; 0x2e
   14e9c:	cmpne	r3, #58	; 0x3a
   14ea0:	movne	r1, #1
   14ea4:	moveq	r1, #0
   14ea8:	add	lr, r2, r4
   14eac:	bne	14e8c <__assert_fail@plt+0x3ed0>
   14eb0:	cmp	r3, #46	; 0x2e
   14eb4:	sub	r2, r0, #1
   14eb8:	clz	r2, r2
   14ebc:	lsr	r2, r2, #5
   14ec0:	beq	14f98 <__assert_fail@plt+0x3fdc>
   14ec4:	cmp	r0, #1
   14ec8:	str	r9, [r5, #4]
   14ecc:	ldrb	r4, [r8, r4]
   14ed0:	bne	14ef4 <__assert_fail@plt+0x3f38>
   14ed4:	cmp	r4, #0
   14ed8:	ldreq	r3, [pc, #372]	; 15054 <__assert_fail@plt+0x4098>
   14edc:	beq	14f78 <__assert_fail@plt+0x3fbc>
   14ee0:	cmp	r4, #1
   14ee4:	beq	14f74 <__assert_fail@plt+0x3fb8>
   14ee8:	cmp	r4, #9
   14eec:	movls	r1, #0
   14ef0:	bhi	14fec <__assert_fail@plt+0x4030>
   14ef4:	bl	19338 <__assert_fail@plt+0x837c>
   14ef8:	str	r0, [sp]
   14efc:	ldr	r0, [r0, #24]
   14f00:	cmp	r4, #58	; 0x3a
   14f04:	beq	14f54 <__assert_fail@plt+0x3f98>
   14f08:	mov	lr, #9
   14f0c:	cmp	r4, #46	; 0x2e
   14f10:	beq	14f28 <__assert_fail@plt+0x3f6c>
   14f14:	cmp	r4, #9
   14f18:	add	r3, r0, #1
   14f1c:	strbhi	lr, [r0]
   14f20:	strbls	r4, [r0]
   14f24:	mov	r0, r3
   14f28:	ldr	r3, [r5]
   14f2c:	ldr	r2, [r7]
   14f30:	ldr	r1, [r5, #4]
   14f34:	rsb	r3, r3, r3, lsl #3
   14f38:	add	ip, r1, #1
   14f3c:	add	r3, r2, r3, lsl #2
   14f40:	ldr	r3, [r3, #4]
   14f44:	str	ip, [r5, #4]
   14f48:	ldrb	r4, [r3, r1]
   14f4c:	cmp	r4, #58	; 0x3a
   14f50:	bne	14f0c <__assert_fail@plt+0x3f50>
   14f54:	ldr	r0, [sp]
   14f58:	bl	16ec8 <__assert_fail@plt+0x5f0c>
   14f5c:	ldr	r2, [sp, #4]
   14f60:	ldr	r3, [r6]
   14f64:	cmp	r2, r3
   14f68:	bne	15048 <__assert_fail@plt+0x408c>
   14f6c:	add	sp, sp, #12
   14f70:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14f74:	ldr	r3, [pc, #220]	; 15058 <__assert_fail@plt+0x409c>
   14f78:	ldr	r0, [r3]
   14f7c:	bl	16e94 <__assert_fail@plt+0x5ed8>
   14f80:	ldr	r3, [r5, #4]
   14f84:	add	r3, r3, #1
   14f88:	str	r3, [r5, #4]
   14f8c:	b	14f5c <__assert_fail@plt+0x3fa0>
   14f90:	mov	lr, r9
   14f94:	mov	r0, r2
   14f98:	ldrb	r3, [r8, lr]
   14f9c:	add	lr, r8, lr
   14fa0:	cmp	r3, #58	; 0x3a
   14fa4:	beq	15030 <__assert_fail@plt+0x4074>
   14fa8:	mov	r1, #0
   14fac:	ldrb	r3, [lr, #1]!
   14fb0:	add	r1, r1, #1
   14fb4:	cmp	r3, #58	; 0x3a
   14fb8:	bne	14fac <__assert_fail@plt+0x3ff0>
   14fbc:	str	r9, [r5, #4]
   14fc0:	ldrb	r4, [r8, r4]
   14fc4:	cmp	r0, #0
   14fc8:	bne	14ef4 <__assert_fail@plt+0x3f38>
   14fcc:	mov	r0, #1
   14fd0:	bl	19338 <__assert_fail@plt+0x837c>
   14fd4:	mov	r2, #0
   14fd8:	ldr	r3, [r0, #24]
   14fdc:	str	r0, [sp]
   14fe0:	add	r0, r3, #1
   14fe4:	strb	r2, [r3]
   14fe8:	b	14f00 <__assert_fail@plt+0x3f44>
   14fec:	mov	r0, sp
   14ff0:	bl	19918 <__assert_fail@plt+0x895c>
   14ff4:	mov	r1, r4
   14ff8:	mov	r0, sp
   14ffc:	bl	1b3fc <__assert_fail@plt+0xa440>
   15000:	ldr	r0, [sp]
   15004:	bl	16ec8 <__assert_fail@plt+0x5f0c>
   15008:	ldr	r3, [r5, #4]
   1500c:	add	r3, r3, #1
   15010:	str	r3, [r5, #4]
   15014:	b	14f5c <__assert_fail@plt+0x3fa0>
   15018:	cmp	r3, #46	; 0x2e
   1501c:	beq	14f90 <__assert_fail@plt+0x3fd4>
   15020:	str	r9, [r5, #4]
   15024:	mov	r1, r2
   15028:	ldrb	r4, [r8, r4]
   1502c:	b	14fcc <__assert_fail@plt+0x4010>
   15030:	cmp	r2, #0
   15034:	str	r9, [r5, #4]
   15038:	ldrb	r4, [r8, r4]
   1503c:	bne	14ed4 <__assert_fail@plt+0x3f18>
   15040:	mov	r1, r2
   15044:	b	14fc4 <__assert_fail@plt+0x4008>
   15048:	bl	10e24 <__stack_chk_fail@plt>
   1504c:	andeq	r1, r3, r8, ror r2
   15050:	andeq	r0, r3, r0, lsl lr
   15054:	andeq	r1, r3, r8, asr #5
   15058:	andeq	r1, r3, r0, asr #5
   1505c:	push	{r4, r5, r6, lr}
   15060:	mov	r5, r0
   15064:	ldr	r4, [pc, #36]	; 15090 <__assert_fail@plt+0x40d4>
   15068:	ldr	r0, [r4]
   1506c:	bl	19840 <__assert_fail@plt+0x8884>
   15070:	cmp	r5, #0
   15074:	ldr	r4, [r4]
   15078:	ldrne	r3, [pc, #20]	; 15094 <__assert_fail@plt+0x40d8>
   1507c:	ldreq	r3, [pc, #20]	; 15098 <__assert_fail@plt+0x40dc>
   15080:	ldr	r0, [r3]
   15084:	bl	19908 <__assert_fail@plt+0x894c>
   15088:	str	r0, [r4]
   1508c:	pop	{r4, r5, r6, pc}
   15090:			; <UNDEFINED> instruction: 0x000312bc
   15094:	andeq	r1, r3, r0, asr #5
   15098:	andeq	r1, r3, r8, asr #5
   1509c:	ldr	r3, [pc, #3660]	; 15ef0 <__assert_fail@plt+0x4f34>
   150a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150a4:	sub	sp, sp, #12
   150a8:	ldr	r2, [r3]
   150ac:	ldr	r5, [pc, #3648]	; 15ef4 <__assert_fail@plt+0x4f38>
   150b0:	str	r2, [sp, #4]
   150b4:	ldr	r2, [pc, #3644]	; 15ef8 <__assert_fail@plt+0x4f3c>
   150b8:	mov	r3, #0
   150bc:	mov	r0, sp
   150c0:	str	r3, [r5]
   150c4:	str	r3, [r5, #4]
   150c8:	strb	r3, [r2]
   150cc:	bl	19918 <__assert_fail@plt+0x895c>
   150d0:	ldr	r3, [pc, #3620]	; 15efc <__assert_fail@plt+0x4f40>
   150d4:	ldrb	r3, [r3]
   150d8:	cmp	r3, #0
   150dc:	bne	154b0 <__assert_fail@plt+0x44f4>
   150e0:	ldr	r4, [r5]
   150e4:	ldr	r6, [pc, #3604]	; 15f00 <__assert_fail@plt+0x4f44>
   150e8:	ldr	ip, [pc, #3604]	; 15f04 <__assert_fail@plt+0x4f48>
   150ec:	lsl	r1, r4, #3
   150f0:	ldr	r3, [r6]
   150f4:	sub	r2, r1, r4
   150f8:	mov	r0, #0
   150fc:	add	r2, r3, r2, lsl #2
   15100:	str	r0, [ip]
   15104:	ldr	r8, [pc, #3580]	; 15f08 <__assert_fail@plt+0x4f4c>
   15108:	ldr	r0, [r2, #12]
   1510c:	ldr	ip, [r5, #4]
   15110:	mov	lr, r3
   15114:	sub	r3, r1, r4
   15118:	cmp	ip, r0
   1511c:	add	r3, lr, r3, lsl #2
   15120:	bcs	1539c <__assert_fail@plt+0x43e0>
   15124:	ldr	r2, [pc, #3532]	; 15ef8 <__assert_fail@plt+0x4f3c>
   15128:	ldrb	r9, [r2]
   1512c:	cmp	r9, #0
   15130:	bne	1539c <__assert_fail@plt+0x43e0>
   15134:	ldr	r2, [pc, #3528]	; 15f04 <__assert_fail@plt+0x4f48>
   15138:	ldr	r2, [r2]
   1513c:	cmp	r2, #0
   15140:	bne	1539c <__assert_fail@plt+0x43e0>
   15144:	ldr	sl, [r3, #4]
   15148:	add	r2, ip, #1
   1514c:	str	r2, [r5, #4]
   15150:	ldrb	r7, [sl, ip]
   15154:	sub	fp, r7, #33	; 0x21
   15158:	cmp	fp, #92	; 0x5c
   1515c:	ldrls	pc, [pc, fp, lsl #2]
   15160:	b	15d00 <__assert_fail@plt+0x4d44>
   15164:	andeq	r5, r1, r4, asr #8
   15168:	andeq	r5, r1, r0, lsl #26
   1516c:	andeq	r5, r1, r4, ror #10
   15170:	andeq	r5, r1, r0, lsl #26
   15174:	muleq	r1, r0, r5
   15178:	andeq	r5, r1, r0, asr #11
   1517c:	andeq	r5, r1, r0, lsl #26
   15180:	andeq	r5, r1, r0, lsl #26
   15184:	andeq	r5, r1, r0, lsl #26
   15188:	andeq	r5, r1, r8, lsl r6
   1518c:	andeq	r5, r1, ip, asr #12
   15190:	andeq	r5, r1, r0, lsl #26
   15194:	andeq	r5, r1, ip, ror r6
   15198:	andeq	r5, r1, r0, lsl #26
   1519c:	andeq	r5, r1, ip, lsr #13
   151a0:	strdeq	r5, [r1], -r0
   151a4:	andeq	r5, r1, r0, lsl #14
   151a8:	andeq	r5, r1, r0, lsl #26
   151ac:	andeq	r5, r1, r0, lsl #26
   151b0:	andeq	r5, r1, r0, lsl #26
   151b4:	andeq	r5, r1, r0, lsl #26
   151b8:	andeq	r5, r1, r0, lsl #26
   151bc:	andeq	r5, r1, r0, lsl #26
   151c0:	andeq	r5, r1, r0, lsl #26
   151c4:	andeq	r5, r1, r0, lsl #26
   151c8:	andeq	r5, r1, r0, lsl #26
   151cc:	andeq	r5, r1, r0, lsl #26
   151d0:	andeq	r5, r1, r0, lsl r7
   151d4:	andeq	r5, r1, r0, asr #14
   151d8:	andeq	r5, r1, ip, ror #14
   151dc:	andeq	r5, r1, r0, lsl #26
   151e0:	andeq	r5, r1, r0, lsl #26
   151e4:	muleq	r1, ip, r7
   151e8:	ldrdeq	r5, [r1], -r0
   151ec:	andeq	r5, r1, ip, asr #16
   151f0:	andeq	r5, r1, r8, lsr #17
   151f4:	andeq	r5, r1, r0, lsl #26
   151f8:	andeq	r5, r1, r0, lsl #26
   151fc:	andeq	r5, r1, r0, lsl #26
   15200:	andeq	r5, r1, r0, lsl #26
   15204:	andeq	r5, r1, r0, lsl #26
   15208:	muleq	r1, r8, r9
   1520c:	andeq	r5, r1, r8, lsr #20
   15210:	strdeq	r5, [r1], -r4
   15214:	andeq	r5, r1, r0, asr sl
   15218:	andeq	r5, r1, r0, lsl #26
   1521c:	strdeq	r5, [r1], -r8
   15220:			; <UNDEFINED> instruction: 0x000158b8
   15224:	andeq	r5, r1, r0, lsl #26
   15228:	andeq	r5, r1, r8, lsl #18
   1522c:	andeq	r5, r1, r4, ror #18
   15230:	andeq	r5, r1, r4, asr #8
   15234:	andeq	r5, r1, r0, lsl #26
   15238:	andeq	r5, r1, r0, lsl #26
   1523c:			; <UNDEFINED> instruction: 0x000158b8
   15240:	andeq	r5, r1, r0, lsl #26
   15244:	andeq	r5, r1, r0, lsl #26
   15248:	ldrdeq	r5, [r1], -r0
   1524c:	andeq	r5, r1, r0, lsl #26
   15250:	andeq	r5, r1, r0, lsl #26
   15254:	andeq	r5, r1, r0, lsl #26
   15258:			; <UNDEFINED> instruction: 0x00015bbc
   1525c:	andeq	r5, r1, r0, lsl #26
   15260:	andeq	r5, r1, r0, lsl #26
   15264:	andeq	r5, r1, r0, lsl #26
   15268:	andeq	r5, r1, r0, lsl #26
   1526c:	andeq	r5, r1, r0, lsr #24
   15270:	andeq	r5, r1, ip, ror ip
   15274:	andeq	r5, r1, r0, lsl #26
   15278:	andeq	r5, r1, r0, lsl #26
   1527c:	andeq	r5, r1, r0, lsl #26
   15280:			; <UNDEFINED> instruction: 0x00015cb0
   15284:	andeq	r5, r1, r4, lsl #21
   15288:	andeq	r5, r1, r0, lsl #26
   1528c:	andeq	r5, r1, r0, lsl #26
   15290:			; <UNDEFINED> instruction: 0x00015ab8
   15294:	andeq	r5, r1, r0, lsl #26
   15298:	andeq	r5, r1, ip, ror #21
   1529c:	andeq	r5, r1, r0, lsl #26
   152a0:	andeq	r5, r1, r8, lsl #22
   152a4:	andeq	r5, r1, r0, lsl #26
   152a8:	andeq	r5, r1, r0, lsl #26
   152ac:	andeq	r5, r1, r0, lsl fp
   152b0:	andeq	r5, r1, r0, lsl #26
   152b4:	andeq	r5, r1, r0, lsl #26
   152b8:	andeq	r5, r1, r0, lsl #26
   152bc:	andeq	r5, r1, r0, asr #9
   152c0:	andeq	r5, r1, r4, asr #22
   152c4:	andeq	r5, r1, r0, lsl #26
   152c8:	andeq	r5, r1, r0, lsl #26
   152cc:	andeq	r5, r1, ip, lsl #23
   152d0:	andeq	r5, r1, r0, lsr #10
   152d4:			; <UNDEFINED> instruction: 0x00015cbc
   152d8:	mov	r0, #92	; 0x5c
   152dc:	bl	17e54 <__assert_fail@plt+0x6e98>
   152e0:	ldr	r3, [r5]
   152e4:	ldr	r1, [r6]
   152e8:	ldr	r2, [r5, #4]
   152ec:	rsb	r3, r3, r3, lsl #3
   152f0:	add	r3, r1, r3, lsl #2
   152f4:	ldr	sl, [r3, #4]
   152f8:	add	r3, r2, #1
   152fc:	str	r3, [r5, #4]
   15300:	ldrb	r0, [sl, r2]
   15304:	cmp	r0, #34	; 0x22
   15308:	beq	15504 <__assert_fail@plt+0x4548>
   1530c:	cmp	r0, #92	; 0x5c
   15310:	bne	152dc <__assert_fail@plt+0x4320>
   15314:	add	r2, r2, #2
   15318:	str	r2, [r5, #4]
   1531c:	ldrb	r3, [sl, r3]
   15320:	cmp	r3, #34	; 0x22
   15324:	beq	15504 <__assert_fail@plt+0x4548>
   15328:	sub	r3, r3, #92	; 0x5c
   1532c:	cmp	r3, #24
   15330:	ldrls	pc, [pc, r3, lsl #2]
   15334:	b	152f8 <__assert_fail@plt+0x433c>
   15338:	ldrdeq	r5, [r1], -r8
   1533c:	strdeq	r5, [r1], -r8
   15340:	strdeq	r5, [r1], -r8
   15344:	strdeq	r5, [r1], -r8
   15348:	strdeq	r5, [r1], -r8
   1534c:	andeq	r5, r1, ip, lsl #26
   15350:	andeq	r5, r1, r4, lsl sp
   15354:	strdeq	r5, [r1], -r8
   15358:	strdeq	r5, [r1], -r8
   1535c:	strdeq	r5, [r1], -r8
   15360:	andeq	r5, r1, r4, lsr #26
   15364:	strdeq	r5, [r1], -r8
   15368:	strdeq	r5, [r1], -r8
   1536c:	strdeq	r5, [r1], -r8
   15370:	strdeq	r5, [r1], -r8
   15374:	strdeq	r5, [r1], -r8
   15378:	strdeq	r5, [r1], -r8
   1537c:	strdeq	r5, [r1], -r8
   15380:	andeq	r5, r1, ip, lsr #26
   15384:	strdeq	r5, [r1], -r8
   15388:	strdeq	r5, [r1], -r8
   1538c:	andeq	r5, r1, r4, lsr sp
   15390:	andeq	r5, r1, ip, lsr sp
   15394:	strdeq	r5, [r1], -r8
   15398:	andeq	r5, r1, ip, lsl sp
   1539c:	cmp	r4, #0
   153a0:	mov	r3, lr
   153a4:	movne	r0, r4
   153a8:	bne	153b8 <__assert_fail@plt+0x43fc>
   153ac:	b	1540c <__assert_fail@plt+0x4450>
   153b0:	ldr	r3, [r6]
   153b4:	lsl	r1, r0, #3
   153b8:	sub	r0, r1, r0
   153bc:	add	r0, r3, r0, lsl #2
   153c0:	ldr	r0, [r0, #24]
   153c4:	bl	17a68 <__assert_fail@plt+0x6aac>
   153c8:	ldr	r3, [r5]
   153cc:	ldr	r2, [r6]
   153d0:	rsb	r3, r3, r3, lsl #3
   153d4:	add	r3, r2, r3, lsl #2
   153d8:	ldr	r0, [r3, #20]
   153dc:	bl	17a68 <__assert_fail@plt+0x6aac>
   153e0:	bl	16dec <__assert_fail@plt+0x5e30>
   153e4:	bl	16dec <__assert_fail@plt+0x5e30>
   153e8:	str	r0, [r5, #4]
   153ec:	bl	16dec <__assert_fail@plt+0x5e30>
   153f0:	cmp	r0, #0
   153f4:	str	r0, [r5]
   153f8:	bne	153b0 <__assert_fail@plt+0x43f4>
   153fc:	ldr	r3, [r8]
   15400:	cmp	r3, #0
   15404:	beq	15418 <__assert_fail@plt+0x445c>
   15408:	bl	16e60 <__assert_fail@plt+0x5ea4>
   1540c:	ldr	r3, [r8]
   15410:	cmp	r3, #0
   15414:	bne	15408 <__assert_fail@plt+0x444c>
   15418:	ldr	r3, [pc, #2780]	; 15efc <__assert_fail@plt+0x4f40>
   1541c:	ldrb	r3, [r3]
   15420:	cmp	r3, #0
   15424:	bne	1547c <__assert_fail@plt+0x44c0>
   15428:	ldr	r3, [pc, #2752]	; 15ef0 <__assert_fail@plt+0x4f34>
   1542c:	ldr	r2, [sp, #4]
   15430:	ldr	r3, [r3]
   15434:	cmp	r2, r3
   15438:	bne	15eec <__assert_fail@plt+0x4f30>
   1543c:	add	sp, sp, #12
   15440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15444:	ldr	r3, [r8]
   15448:	ldr	r0, [r3]
   1544c:	bl	19974 <__assert_fail@plt+0x89b8>
   15450:	ldr	r3, [pc, #2740]	; 15f0c <__assert_fail@plt+0x4f50>
   15454:	strb	r0, [r3]
   15458:	bl	1505c <__assert_fail@plt+0x40a0>
   1545c:	ldr	r4, [r5]
   15460:	ldr	lr, [r6]
   15464:	ldr	ip, [r5, #4]
   15468:	lsl	r1, r4, #3
   1546c:	sub	r3, r1, r4
   15470:	add	r3, lr, r3, lsl #2
   15474:	ldr	r0, [r3, #12]
   15478:	b	15114 <__assert_fail@plt+0x4158>
   1547c:	ldr	r1, [pc, #2700]	; 15f10 <__assert_fail@plt+0x4f54>
   15480:	mov	r0, #2
   15484:	bl	10e00 <signal@plt>
   15488:	ldr	r3, [pc, #2676]	; 15f04 <__assert_fail@plt+0x4f48>
   1548c:	ldr	r3, [r3]
   15490:	cmp	r3, #0
   15494:	beq	15428 <__assert_fail@plt+0x446c>
   15498:	ldr	r0, [pc, #2676]	; 15f14 <__assert_fail@plt+0x4f58>
   1549c:	bl	10e84 <puts@plt>
   154a0:	ldr	r3, [pc, #2672]	; 15f18 <__assert_fail@plt+0x4f5c>
   154a4:	ldr	r0, [r3]
   154a8:	bl	1c03c <__assert_fail@plt+0xb080>
   154ac:	b	15428 <__assert_fail@plt+0x446c>
   154b0:	ldr	r1, [pc, #2660]	; 15f1c <__assert_fail@plt+0x4f60>
   154b4:	mov	r0, #2
   154b8:	bl	10e00 <signal@plt>
   154bc:	b	150e0 <__assert_fail@plt+0x4124>
   154c0:	add	ip, ip, #2
   154c4:	str	ip, [r5, #4]
   154c8:	ldrb	r0, [sl, r2]
   154cc:	cmp	r0, #34	; 0x22
   154d0:	beq	15504 <__assert_fail@plt+0x4548>
   154d4:	bl	17e54 <__assert_fail@plt+0x6e98>
   154d8:	ldr	r3, [r5]
   154dc:	ldr	r2, [r6]
   154e0:	ldr	r1, [r5, #4]
   154e4:	rsb	r3, r3, r3, lsl #3
   154e8:	add	r0, r1, #1
   154ec:	add	r3, r2, r3, lsl #2
   154f0:	ldr	r3, [r3, #4]
   154f4:	str	r0, [r5, #4]
   154f8:	ldrb	r0, [r3, r1]
   154fc:	cmp	r0, #34	; 0x22
   15500:	bne	154d4 <__assert_fail@plt+0x4518>
   15504:	ldr	r3, [pc, #2572]	; 15f18 <__assert_fail@plt+0x4f5c>
   15508:	mov	r4, r3
   1550c:	ldr	r0, [r3]
   15510:	bl	10dc4 <fflush@plt>
   15514:	ldr	r0, [r4]
   15518:	bl	1c03c <__assert_fail@plt+0xb080>
   1551c:	b	1545c <__assert_fail@plt+0x44a0>
   15520:	mov	r0, #2
   15524:	bl	16ef4 <__assert_fail@plt+0x5f38>
   15528:	cmp	r0, #0
   1552c:	beq	1545c <__assert_fail@plt+0x44a0>
   15530:	ldr	r3, [r8]
   15534:	ldr	r3, [r3, #4]
   15538:	ldr	r0, [r3]
   1553c:	bl	19974 <__assert_fail@plt+0x89b8>
   15540:	cmp	r0, #0
   15544:	moveq	r0, #1
   15548:	beq	15ce4 <__assert_fail@plt+0x4d28>
   1554c:	ldr	r3, [r8]
   15550:	ldr	r0, [r3]
   15554:	bl	19974 <__assert_fail@plt+0x89b8>
   15558:	clz	r0, r0
   1555c:	lsr	r0, r0, #5
   15560:	b	15ce4 <__assert_fail@plt+0x4d28>
   15564:	mov	r0, #2
   15568:	bl	16ef4 <__assert_fail@plt+0x5f38>
   1556c:	cmp	r0, #0
   15570:	beq	1545c <__assert_fail@plt+0x44a0>
   15574:	ldr	r3, [r8]
   15578:	ldm	r3, {r1, r2}
   1557c:	ldr	r0, [r2]
   15580:	bl	19938 <__assert_fail@plt+0x897c>
   15584:	adds	r0, r0, #0
   15588:	movne	r0, #1
   1558c:	b	15ce4 <__assert_fail@plt+0x4d28>
   15590:	mov	r0, #2
   15594:	bl	16ef4 <__assert_fail@plt+0x5f38>
   15598:	cmp	r0, #0
   1559c:	beq	1545c <__assert_fail@plt+0x44a0>
   155a0:	ldr	r3, [r8]
   155a4:	ldr	r0, [r3]
   155a8:	bl	19974 <__assert_fail@plt+0x89b8>
   155ac:	cmp	r0, #0
   155b0:	beq	15e9c <__assert_fail@plt+0x4ee0>
   155b4:	ldr	r0, [pc, #2404]	; 15f20 <__assert_fail@plt+0x4f64>
   155b8:	bl	18cf8 <__assert_fail@plt+0x7d3c>
   155bc:	b	1545c <__assert_fail@plt+0x44a0>
   155c0:	mov	r0, #2
   155c4:	bl	16ef4 <__assert_fail@plt+0x5f38>
   155c8:	cmp	r0, #0
   155cc:	beq	1545c <__assert_fail@plt+0x44a0>
   155d0:	ldr	r3, [r8]
   155d4:	ldr	r3, [r3, #4]
   155d8:	ldr	r0, [r3]
   155dc:	bl	19974 <__assert_fail@plt+0x89b8>
   155e0:	cmp	r0, #0
   155e4:	bne	155fc <__assert_fail@plt+0x4640>
   155e8:	ldr	r3, [r8]
   155ec:	ldr	r0, [r3]
   155f0:	bl	19974 <__assert_fail@plt+0x89b8>
   155f4:	clz	r9, r0
   155f8:	lsr	r9, r9, #5
   155fc:	ldr	r3, [pc, #2312]	; 15f0c <__assert_fail@plt+0x4f50>
   15600:	mov	r4, r3
   15604:	strb	r9, [r3]
   15608:	bl	16e60 <__assert_fail@plt+0x5ea4>
   1560c:	ldrb	r0, [r4]
   15610:	bl	1505c <__assert_fail@plt+0x40a0>
   15614:	b	1545c <__assert_fail@plt+0x44a0>
   15618:	mov	r0, #2
   1561c:	bl	16ef4 <__assert_fail@plt+0x5f38>
   15620:	cmp	r0, #0
   15624:	beq	1545c <__assert_fail@plt+0x44a0>
   15628:	ldr	r1, [r8]
   1562c:	ldr	r3, [pc, #2288]	; 15f24 <__assert_fail@plt+0x4f68>
   15630:	mov	r2, sp
   15634:	ldr	r0, [r1, #4]
   15638:	ldr	r3, [r3]
   1563c:	ldr	r1, [r1]
   15640:	ldr	r0, [r0]
   15644:	bl	1a48c <__assert_fail@plt+0x94d0>
   15648:	b	15c04 <__assert_fail@plt+0x4c48>
   1564c:	mov	r0, #2
   15650:	bl	16ef4 <__assert_fail@plt+0x5f38>
   15654:	cmp	r0, #0
   15658:	beq	1545c <__assert_fail@plt+0x44a0>
   1565c:	ldr	r1, [r8]
   15660:	mov	r3, #0
   15664:	mov	r2, sp
   15668:	ldr	r0, [r1, #4]
   1566c:	ldr	r1, [r1]
   15670:	ldr	r0, [r0]
   15674:	bl	1a3a4 <__assert_fail@plt+0x93e8>
   15678:	b	15c04 <__assert_fail@plt+0x4c48>
   1567c:	mov	r0, #2
   15680:	bl	16ef4 <__assert_fail@plt+0x5f38>
   15684:	cmp	r0, #0
   15688:	beq	1545c <__assert_fail@plt+0x44a0>
   1568c:	ldr	r1, [r8]
   15690:	mov	r3, #0
   15694:	mov	r2, sp
   15698:	ldr	r0, [r1, #4]
   1569c:	ldr	r1, [r1]
   156a0:	ldr	r0, [r0]
   156a4:	bl	19a60 <__assert_fail@plt+0x8aa4>
   156a8:	b	15c04 <__assert_fail@plt+0x4c48>
   156ac:	mov	r0, #2
   156b0:	bl	16ef4 <__assert_fail@plt+0x5f38>
   156b4:	cmp	r0, #0
   156b8:	beq	1545c <__assert_fail@plt+0x44a0>
   156bc:	ldr	r1, [r8]
   156c0:	ldr	r3, [pc, #2140]	; 15f24 <__assert_fail@plt+0x4f68>
   156c4:	mov	r2, sp
   156c8:	ldr	r0, [r1, #4]
   156cc:	ldr	r3, [r3]
   156d0:	ldr	r1, [r1]
   156d4:	ldr	r0, [r0]
   156d8:	bl	1a608 <__assert_fail@plt+0x964c>
   156dc:	cmp	r0, #0
   156e0:	beq	15c04 <__assert_fail@plt+0x4c48>
   156e4:	ldr	r0, [pc, #2108]	; 15f28 <__assert_fail@plt+0x4f6c>
   156e8:	bl	18cf8 <__assert_fail@plt+0x7d3c>
   156ec:	b	1545c <__assert_fail@plt+0x44a0>
   156f0:	ldr	r3, [pc, #2100]	; 15f2c <__assert_fail@plt+0x4f70>
   156f4:	ldr	r0, [r3]
   156f8:	bl	16e94 <__assert_fail@plt+0x5ed8>
   156fc:	b	1545c <__assert_fail@plt+0x44a0>
   15700:	ldr	r3, [pc, #2088]	; 15f30 <__assert_fail@plt+0x4f74>
   15704:	ldr	r0, [r3]
   15708:	bl	16e94 <__assert_fail@plt+0x5ed8>
   1570c:	b	1545c <__assert_fail@plt+0x44a0>
   15710:	mov	r0, #2
   15714:	bl	16ef4 <__assert_fail@plt+0x5f38>
   15718:	cmp	r0, #0
   1571c:	beq	1545c <__assert_fail@plt+0x44a0>
   15720:	ldr	r3, [r8]
   15724:	ldm	r3, {r1, r2}
   15728:	ldr	r0, [r2]
   1572c:	bl	19938 <__assert_fail@plt+0x897c>
   15730:	cmn	r0, #1
   15734:	movne	r0, #0
   15738:	moveq	r0, #1
   1573c:	b	15ce4 <__assert_fail@plt+0x4d28>
   15740:	mov	r0, #2
   15744:	bl	16ef4 <__assert_fail@plt+0x5f38>
   15748:	cmp	r0, #0
   1574c:	beq	1545c <__assert_fail@plt+0x44a0>
   15750:	ldr	r3, [r8]
   15754:	ldm	r3, {r1, r2}
   15758:	ldr	r0, [r2]
   1575c:	bl	19938 <__assert_fail@plt+0x897c>
   15760:	clz	r0, r0
   15764:	lsr	r0, r0, #5
   15768:	b	15ce4 <__assert_fail@plt+0x4d28>
   1576c:	mov	r0, #2
   15770:	bl	16ef4 <__assert_fail@plt+0x5f38>
   15774:	cmp	r0, #0
   15778:	beq	1545c <__assert_fail@plt+0x44a0>
   1577c:	ldr	r3, [r8]
   15780:	ldm	r3, {r1, r2}
   15784:	ldr	r0, [r2]
   15788:	bl	19938 <__assert_fail@plt+0x897c>
   1578c:	sub	r0, r0, #1
   15790:	clz	r0, r0
   15794:	lsr	r0, r0, #5
   15798:	b	15ce4 <__assert_fail@plt+0x4d28>
   1579c:	add	r3, ip, #2
   157a0:	str	r3, [r5, #4]
   157a4:	ldrb	r0, [sl, r2]
   157a8:	tst	r0, #128	; 0x80
   157ac:	beq	157c8 <__assert_fail@plt+0x480c>
   157b0:	add	ip, ip, #3
   157b4:	str	ip, [r5, #4]
   157b8:	ldrb	r3, [sl, r3]
   157bc:	lsl	r0, r0, #8
   157c0:	and	r0, r0, #32512	; 0x7f00
   157c4:	add	r0, r3, r0
   157c8:	bl	178e0 <__assert_fail@plt+0x6924>
   157cc:	b	1545c <__assert_fail@plt+0x44a0>
   157d0:	ldr	r3, [r8]
   157d4:	ldr	r0, [r3]
   157d8:	bl	19974 <__assert_fail@plt+0x89b8>
   157dc:	ldr	r3, [pc, #1832]	; 15f0c <__assert_fail@plt+0x4f50>
   157e0:	clz	r0, r0
   157e4:	lsr	r0, r0, #5
   157e8:	strb	r0, [r3]
   157ec:	bl	16e60 <__assert_fail@plt+0x5ea4>
   157f0:	ldr	r4, [r5]
   157f4:	ldr	lr, [r6]
   157f8:	ldr	r2, [r5, #4]
   157fc:	lsl	r1, r4, #3
   15800:	sub	r3, r1, r4
   15804:	add	r0, r2, #1
   15808:	add	r3, lr, r3, lsl #2
   1580c:	add	ip, r2, #2
   15810:	ldr	sl, [r3, #4]
   15814:	cmp	r7, #74	; 0x4a
   15818:	str	r0, [r5, #4]
   1581c:	ldrb	r9, [sl, r2]
   15820:	str	ip, [r5, #4]
   15824:	beq	159ac <__assert_fail@plt+0x49f0>
   15828:	cmp	r7, #66	; 0x42
   1582c:	beq	15d44 <__assert_fail@plt+0x4d88>
   15830:	cmp	r7, #90	; 0x5a
   15834:	bne	15474 <__assert_fail@plt+0x44b8>
   15838:	ldr	r2, [pc, #1740]	; 15f0c <__assert_fail@plt+0x4f50>
   1583c:	ldrb	r2, [r2]
   15840:	cmp	r2, #0
   15844:	bne	15474 <__assert_fail@plt+0x44b8>
   15848:	b	159ac <__assert_fail@plt+0x49f0>
   1584c:	add	r3, ip, #2
   15850:	str	r3, [r5, #4]
   15854:	ldrb	r7, [sl, r2]
   15858:	tst	r7, #128	; 0x80
   1585c:	beq	15878 <__assert_fail@plt+0x48bc>
   15860:	add	ip, ip, #3
   15864:	str	ip, [r5, #4]
   15868:	ldrb	r3, [sl, r3]
   1586c:	lsl	r1, r7, #8
   15870:	and	r1, r1, #32512	; 0x7f00
   15874:	add	r7, r3, r1
   15878:	rsb	r9, r7, r7, lsl #3
   1587c:	mov	r4, r7
   15880:	ldrb	r3, [lr, r9, lsl #2]
   15884:	lsl	r9, r9, #2
   15888:	cmp	r3, #0
   1588c:	bne	15d70 <__assert_fail@plt+0x4db4>
   15890:	ldr	r3, [pc, #1692]	; 15f34 <__assert_fail@plt+0x4f78>
   15894:	ldr	r0, [pc, #1692]	; 15f38 <__assert_fail@plt+0x4f7c>
   15898:	ldr	r3, [r3]
   1589c:	ldr	r1, [r3, r7, lsl #2]
   158a0:	bl	18cf8 <__assert_fail@plt+0x7d3c>
   158a4:	b	1545c <__assert_fail@plt+0x44a0>
   158a8:	ldr	r3, [r8]
   158ac:	ldr	r0, [r3]
   158b0:	bl	16e94 <__assert_fail@plt+0x5ed8>
   158b4:	b	1545c <__assert_fail@plt+0x44a0>
   158b8:	ldr	r2, [r8]
   158bc:	ldr	r3, [pc, #1656]	; 15f3c <__assert_fail@plt+0x4f80>
   158c0:	ldr	r1, [pc, #1656]	; 15f40 <__assert_fail@plt+0x4f84>
   158c4:	ldr	r0, [r2]
   158c8:	ldr	r3, [r3]
   158cc:	ldr	r1, [r1]
   158d0:	ldr	r2, [pc, #1644]	; 15f44 <__assert_fail@plt+0x4f88>
   158d4:	bl	1b8ac <__assert_fail@plt+0xa8f0>
   158d8:	cmp	r7, #87	; 0x57
   158dc:	beq	15e90 <__assert_fail@plt+0x4ed4>
   158e0:	mov	r0, #4
   158e4:	bl	17174 <__assert_fail@plt+0x61b8>
   158e8:	ldr	r3, [pc, #1576]	; 15f18 <__assert_fail@plt+0x4f5c>
   158ec:	mov	r4, r3
   158f0:	ldr	r0, [r3]
   158f4:	bl	10dc4 <fflush@plt>
   158f8:	ldr	r0, [r4]
   158fc:	bl	1c03c <__assert_fail@plt+0xb080>
   15900:	bl	16e60 <__assert_fail@plt+0x5ea4>
   15904:	b	1545c <__assert_fail@plt+0x44a0>
   15908:	cmp	r4, #0
   1590c:	beq	15d58 <__assert_fail@plt+0x4d9c>
   15910:	ldr	r0, [r3, #24]
   15914:	bl	17a68 <__assert_fail@plt+0x6aac>
   15918:	ldr	r3, [r5]
   1591c:	ldr	r2, [r6]
   15920:	rsb	r3, r3, r3, lsl #3
   15924:	add	r3, r2, r3, lsl #2
   15928:	ldr	r0, [r3, #20]
   1592c:	bl	17a68 <__assert_fail@plt+0x6aac>
   15930:	bl	16dec <__assert_fail@plt+0x5e30>
   15934:	bl	16dec <__assert_fail@plt+0x5e30>
   15938:	str	r0, [r5, #4]
   1593c:	bl	16dec <__assert_fail@plt+0x5e30>
   15940:	ldr	lr, [r6]
   15944:	ldr	ip, [r5, #4]
   15948:	lsl	r1, r0, #3
   1594c:	sub	r3, r1, r0
   15950:	mov	r4, r0
   15954:	add	r3, lr, r3, lsl #2
   15958:	str	r0, [r5]
   1595c:	ldr	r0, [r3, #12]
   15960:	b	15114 <__assert_fail@plt+0x4158>
   15964:	add	r3, ip, #2
   15968:	str	r3, [r5, #4]
   1596c:	ldrb	r0, [sl, r2]
   15970:	tst	r0, #128	; 0x80
   15974:	beq	15990 <__assert_fail@plt+0x49d4>
   15978:	add	ip, ip, #3
   1597c:	str	ip, [r5, #4]
   15980:	ldrb	r3, [sl, r3]
   15984:	lsl	r0, r0, #8
   15988:	and	r0, r0, #32512	; 0x7f00
   1598c:	add	r0, r3, r0
   15990:	bl	17410 <__assert_fail@plt+0x6454>
   15994:	b	1545c <__assert_fail@plt+0x44a0>
   15998:	add	r0, ip, #2
   1599c:	add	ip, ip, #3
   159a0:	str	r0, [r5, #4]
   159a4:	ldrb	r9, [sl, r2]
   159a8:	str	ip, [r5, #4]
   159ac:	ldrb	r2, [sl, r0]
   159b0:	ldr	r0, [r3, #16]
   159b4:	add	r2, r9, r2, lsl #8
   159b8:	and	ip, r2, #63	; 0x3f
   159bc:	lsr	r2, r2, #6
   159c0:	cmp	r2, #0
   159c4:	sub	r2, r2, #1
   159c8:	beq	159dc <__assert_fail@plt+0x4a20>
   159cc:	sub	r2, r2, #1
   159d0:	cmn	r2, #1
   159d4:	ldr	r0, [r0, #256]	; 0x100
   159d8:	bne	159cc <__assert_fail@plt+0x4a10>
   159dc:	cmp	r0, #0
   159e0:	beq	15ec0 <__assert_fail@plt+0x4f04>
   159e4:	ldr	ip, [r0, ip, lsl #2]
   159e8:	ldr	r0, [r3, #12]
   159ec:	str	ip, [r5, #4]
   159f0:	b	15114 <__assert_fail@plt+0x4158>
   159f4:	add	r3, ip, #2
   159f8:	str	r3, [r5, #4]
   159fc:	ldrb	r0, [sl, r2]
   15a00:	tst	r0, #128	; 0x80
   15a04:	beq	15a20 <__assert_fail@plt+0x4a64>
   15a08:	add	ip, ip, #3
   15a0c:	str	ip, [r5, #4]
   15a10:	ldrb	r3, [sl, r3]
   15a14:	lsl	r0, r0, #8
   15a18:	and	r0, r0, #32512	; 0x7f00
   15a1c:	add	r0, r3, r0
   15a20:	bl	1759c <__assert_fail@plt+0x65e0>
   15a24:	b	1545c <__assert_fail@plt+0x44a0>
   15a28:	cmp	r4, #0
   15a2c:	ldrne	r3, [pc, #1300]	; 15f48 <__assert_fail@plt+0x4f8c>
   15a30:	ldreq	r3, [pc, #1300]	; 15f4c <__assert_fail@plt+0x4f90>
   15a34:	ldrne	r3, [r3]
   15a38:	ldr	r1, [r3]
   15a3c:	cmp	r1, #10
   15a40:	beq	15d64 <__assert_fail@plt+0x4da8>
   15a44:	ldr	r0, [pc, #1284]	; 15f50 <__assert_fail@plt+0x4f94>
   15a48:	bl	14ba8 <__assert_fail@plt+0x3bec>
   15a4c:	b	1545c <__assert_fail@plt+0x44a0>
   15a50:	add	r3, ip, #2
   15a54:	str	r3, [r5, #4]
   15a58:	ldrb	r0, [sl, r2]
   15a5c:	tst	r0, #128	; 0x80
   15a60:	beq	15a7c <__assert_fail@plt+0x4ac0>
   15a64:	add	ip, ip, #3
   15a68:	str	ip, [r5, #4]
   15a6c:	ldrb	r3, [sl, r3]
   15a70:	lsl	r0, r0, #8
   15a74:	and	r0, r0, #32512	; 0x7f00
   15a78:	add	r0, r3, r0
   15a7c:	bl	17734 <__assert_fail@plt+0x6778>
   15a80:	b	1545c <__assert_fail@plt+0x44a0>
   15a84:	add	r3, ip, #2
   15a88:	str	r3, [r5, #4]
   15a8c:	ldrb	r0, [sl, r2]
   15a90:	tst	r0, #128	; 0x80
   15a94:	beq	15ab0 <__assert_fail@plt+0x4af4>
   15a98:	add	ip, ip, #3
   15a9c:	str	ip, [r5, #4]
   15aa0:	ldrb	r3, [sl, r3]
   15aa4:	lsl	r0, r0, #8
   15aa8:	and	r0, r0, #32512	; 0x7f00
   15aac:	add	r0, r3, r0
   15ab0:	bl	177e0 <__assert_fail@plt+0x6824>
   15ab4:	b	1545c <__assert_fail@plt+0x44a0>
   15ab8:	add	r3, ip, #2
   15abc:	str	r3, [r5, #4]
   15ac0:	ldrb	r0, [sl, r2]
   15ac4:	tst	r0, #128	; 0x80
   15ac8:	beq	15ae4 <__assert_fail@plt+0x4b28>
   15acc:	add	ip, ip, #3
   15ad0:	str	ip, [r5, #4]
   15ad4:	ldrb	r3, [sl, r3]
   15ad8:	lsl	r0, r0, #8
   15adc:	and	r0, r0, #32512	; 0x7f00
   15ae0:	add	r0, r3, r0
   15ae4:	bl	174e0 <__assert_fail@plt+0x6524>
   15ae8:	b	1545c <__assert_fail@plt+0x44a0>
   15aec:	ldr	r2, [r8]
   15af0:	ldr	r3, [pc, #1076]	; 15f2c <__assert_fail@plt+0x4f70>
   15af4:	ldr	r1, [r2]
   15af8:	ldr	r0, [r3]
   15afc:	mov	r3, #0
   15b00:	bl	19a60 <__assert_fail@plt+0x8aa4>
   15b04:	b	1545c <__assert_fail@plt+0x44a0>
   15b08:	bl	16e60 <__assert_fail@plt+0x5ea4>
   15b0c:	b	1545c <__assert_fail@plt+0x44a0>
   15b10:	add	r3, ip, #2
   15b14:	str	r3, [r5, #4]
   15b18:	ldrb	r0, [sl, r2]
   15b1c:	tst	r0, #128	; 0x80
   15b20:	beq	15b3c <__assert_fail@plt+0x4b80>
   15b24:	add	ip, ip, #3
   15b28:	str	ip, [r5, #4]
   15b2c:	ldrb	r3, [sl, r3]
   15b30:	lsl	r0, r0, #8
   15b34:	and	r0, r0, #32512	; 0x7f00
   15b38:	add	r0, r3, r0
   15b3c:	bl	17174 <__assert_fail@plt+0x61b8>
   15b40:	b	1545c <__assert_fail@plt+0x44a0>
   15b44:	mov	r0, #2
   15b48:	bl	16ef4 <__assert_fail@plt+0x5f38>
   15b4c:	cmp	r0, #0
   15b50:	beq	1545c <__assert_fail@plt+0x44a0>
   15b54:	ldr	r2, [r8]
   15b58:	ldr	r4, [r5]
   15b5c:	ldr	lr, [r6]
   15b60:	ldr	r0, [r2, #4]
   15b64:	lsl	r1, r4, #3
   15b68:	sub	r3, r1, r4
   15b6c:	ldr	ip, [r2]
   15b70:	ldr	r7, [r0]
   15b74:	add	r3, lr, r3, lsl #2
   15b78:	str	r7, [r2]
   15b7c:	str	ip, [r0]
   15b80:	ldr	r0, [r3, #12]
   15b84:	ldr	ip, [r5, #4]
   15b88:	b	15114 <__assert_fail@plt+0x4158>
   15b8c:	mov	r0, #2
   15b90:	bl	16ef4 <__assert_fail@plt+0x5f38>
   15b94:	cmp	r0, #0
   15b98:	beq	1545c <__assert_fail@plt+0x44a0>
   15b9c:	ldr	r3, [r8]
   15ba0:	ldm	r3, {r1, r2}
   15ba4:	ldr	r0, [r2]
   15ba8:	bl	19938 <__assert_fail@plt+0x897c>
   15bac:	cmp	r0, #0
   15bb0:	movgt	r0, #0
   15bb4:	movle	r0, #1
   15bb8:	b	15ce4 <__assert_fail@plt+0x4d28>
   15bbc:	mov	r0, #2
   15bc0:	bl	16ef4 <__assert_fail@plt+0x5f38>
   15bc4:	cmp	r0, #0
   15bc8:	beq	1545c <__assert_fail@plt+0x44a0>
   15bcc:	ldr	r1, [r8]
   15bd0:	ldr	r3, [pc, #844]	; 15f24 <__assert_fail@plt+0x4f68>
   15bd4:	mov	r2, sp
   15bd8:	ldr	r0, [r1, #4]
   15bdc:	ldr	r3, [r3]
   15be0:	ldr	r1, [r1]
   15be4:	ldr	r0, [r0]
   15be8:	bl	1b208 <__assert_fail@plt+0xa24c>
   15bec:	ldr	r3, [r8]
   15bf0:	ldr	r3, [r3, #4]
   15bf4:	ldr	r0, [r3]
   15bf8:	bl	19974 <__assert_fail@plt+0x89b8>
   15bfc:	cmp	r0, #0
   15c00:	bne	15ecc <__assert_fail@plt+0x4f10>
   15c04:	bl	16e60 <__assert_fail@plt+0x5ea4>
   15c08:	bl	16e60 <__assert_fail@plt+0x5ea4>
   15c0c:	ldr	r0, [sp]
   15c10:	bl	16ec8 <__assert_fail@plt+0x5f0c>
   15c14:	mov	r0, sp
   15c18:	bl	19918 <__assert_fail@plt+0x895c>
   15c1c:	b	1545c <__assert_fail@plt+0x44a0>
   15c20:	add	ip, ip, #2
   15c24:	str	ip, [r5, #4]
   15c28:	ldrb	r3, [sl, r2]
   15c2c:	sub	r3, r3, #73	; 0x49
   15c30:	cmp	r3, #15
   15c34:	ldrls	pc, [pc, r3, lsl #2]
   15c38:	b	15114 <__assert_fail@plt+0x4158>
   15c3c:	andeq	r5, r1, ip, ror lr
   15c40:	andeq	r5, r1, r4, lsl r1
   15c44:	andeq	r5, r1, r4, lsl r1
   15c48:	andeq	r5, r1, r0, asr #28
   15c4c:	andeq	r5, r1, r4, lsl r1
   15c50:	andeq	r5, r1, r4, lsl r1
   15c54:	andeq	r5, r1, r4, lsl r1
   15c58:	andeq	r5, r1, r4, lsl r1
   15c5c:	andeq	r5, r1, r4, lsl r1
   15c60:	andeq	r5, r1, ip, lsl lr
   15c64:	andeq	r5, r1, r4, lsl #28
   15c68:	andeq	r5, r1, r4, lsl r1
   15c6c:	andeq	r5, r1, r4, lsl r1
   15c70:	andeq	r5, r1, r4, lsl r1
   15c74:	andeq	r5, r1, r4, lsl r1
   15c78:	andeq	r5, r1, r0, ror #27
   15c7c:	add	r3, ip, #2
   15c80:	str	r3, [r5, #4]
   15c84:	ldrb	r0, [sl, r2]
   15c88:	tst	r0, #128	; 0x80
   15c8c:	beq	15ca8 <__assert_fail@plt+0x4cec>
   15c90:	add	ip, ip, #3
   15c94:	str	ip, [r5, #4]
   15c98:	ldrb	r3, [sl, r3]
   15c9c:	lsl	r0, r0, #8
   15ca0:	and	r0, r0, #32512	; 0x7f00
   15ca4:	add	r0, r3, r0
   15ca8:	bl	17634 <__assert_fail@plt+0x6678>
   15cac:	b	1545c <__assert_fail@plt+0x44a0>
   15cb0:	mov	r0, #0
   15cb4:	bl	18e70 <__assert_fail@plt+0x7eb4>
   15cb8:	b	1545c <__assert_fail@plt+0x44a0>
   15cbc:	mov	r0, #2
   15cc0:	bl	16ef4 <__assert_fail@plt+0x5f38>
   15cc4:	cmp	r0, #0
   15cc8:	beq	1545c <__assert_fail@plt+0x44a0>
   15ccc:	ldr	r3, [r8]
   15cd0:	ldm	r3, {r1, r2}
   15cd4:	ldr	r0, [r2]
   15cd8:	bl	19938 <__assert_fail@plt+0x897c>
   15cdc:	mvn	r0, r0
   15ce0:	lsr	r0, r0, #31
   15ce4:	ldr	r3, [pc, #544]	; 15f0c <__assert_fail@plt+0x4f50>
   15ce8:	mov	r4, r3
   15cec:	strb	r0, [r3]
   15cf0:	bl	16e60 <__assert_fail@plt+0x5ea4>
   15cf4:	ldrb	r0, [r4]
   15cf8:	bl	1505c <__assert_fail@plt+0x40a0>
   15cfc:	b	1545c <__assert_fail@plt+0x44a0>
   15d00:	mov	r1, r7
   15d04:	ldr	r0, [pc, #584]	; 15f54 <__assert_fail@plt+0x4f98>
   15d08:	b	158a0 <__assert_fail@plt+0x48e4>
   15d0c:	mov	r0, #7
   15d10:	b	152dc <__assert_fail@plt+0x4320>
   15d14:	mov	r0, #8
   15d18:	b	152dc <__assert_fail@plt+0x4320>
   15d1c:	mov	r0, #9
   15d20:	b	152dc <__assert_fail@plt+0x4320>
   15d24:	mov	r0, #12
   15d28:	b	152dc <__assert_fail@plt+0x4320>
   15d2c:	mov	r0, #10
   15d30:	b	152dc <__assert_fail@plt+0x4320>
   15d34:	mov	r0, #34	; 0x22
   15d38:	b	152dc <__assert_fail@plt+0x4320>
   15d3c:	mov	r0, #13
   15d40:	b	152dc <__assert_fail@plt+0x4320>
   15d44:	ldr	r2, [pc, #448]	; 15f0c <__assert_fail@plt+0x4f50>
   15d48:	ldrb	r2, [r2]
   15d4c:	cmp	r2, #0
   15d50:	beq	15474 <__assert_fail@plt+0x44b8>
   15d54:	b	159ac <__assert_fail@plt+0x49f0>
   15d58:	ldr	r0, [pc, #504]	; 15f58 <__assert_fail@plt+0x4f9c>
   15d5c:	bl	18cf8 <__assert_fail@plt+0x7d3c>
   15d60:	b	1545c <__assert_fail@plt+0x44a0>
   15d64:	ldr	r0, [pc, #392]	; 15ef4 <__assert_fail@plt+0x4f38>
   15d68:	bl	14e38 <__assert_fail@plt+0x3e7c>
   15d6c:	b	1545c <__assert_fail@plt+0x44a0>
   15d70:	mov	r1, r7
   15d74:	ldr	r0, [pc, #376]	; 15ef4 <__assert_fail@plt+0x4f38>
   15d78:	bl	17b18 <__assert_fail@plt+0x6b5c>
   15d7c:	ldr	r3, [r6]
   15d80:	add	r3, r3, r9
   15d84:	ldr	sl, [r3, #24]
   15d88:	cmp	sl, #0
   15d8c:	beq	15da4 <__assert_fail@plt+0x4de8>
   15d90:	ldr	r0, [sl]
   15d94:	bl	1798c <__assert_fail@plt+0x69d0>
   15d98:	ldr	sl, [sl, #8]
   15d9c:	cmp	sl, #0
   15da0:	bne	15d90 <__assert_fail@plt+0x4dd4>
   15da4:	ldr	r0, [r5]
   15da8:	bl	16e34 <__assert_fail@plt+0x5e78>
   15dac:	ldr	r0, [r5, #4]
   15db0:	bl	16e34 <__assert_fail@plt+0x5e78>
   15db4:	ldr	r3, [pc, #400]	; 15f4c <__assert_fail@plt+0x4f90>
   15db8:	ldr	r0, [r3]
   15dbc:	bl	16e34 <__assert_fail@plt+0x5e78>
   15dc0:	ldr	lr, [r6]
   15dc4:	mov	ip, #0
   15dc8:	add	r9, lr, r9
   15dcc:	str	r7, [r5]
   15dd0:	lsl	r1, r7, #3
   15dd4:	ldr	r0, [r9, #12]
   15dd8:	str	ip, [r5, #4]
   15ddc:	b	15114 <__assert_fail@plt+0x4158>
   15de0:	ldr	r3, [pc, #324]	; 15f2c <__assert_fail@plt+0x4f70>
   15de4:	ldr	r0, [r3]
   15de8:	bl	16e94 <__assert_fail@plt+0x5ed8>
   15dec:	ldr	r4, [r8]
   15df0:	bl	10f8c <random@plt>
   15df4:	mov	r1, r0
   15df8:	mov	r0, r4
   15dfc:	bl	1b3fc <__assert_fail@plt+0xa440>
   15e00:	b	1545c <__assert_fail@plt+0x44a0>
   15e04:	ldr	r3, [r8]
   15e08:	mov	r0, r3
   15e0c:	ldr	r3, [r3]
   15e10:	ldr	r1, [r3, #8]
   15e14:	bl	1b3fc <__assert_fail@plt+0xa440>
   15e18:	b	1545c <__assert_fail@plt+0x44a0>
   15e1c:	ldr	r3, [pc, #256]	; 15f24 <__assert_fail@plt+0x4f68>
   15e20:	ldr	r0, [r8]
   15e24:	ldr	r1, [r3]
   15e28:	bl	1b56c <__assert_fail@plt+0xa5b0>
   15e2c:	cmp	r0, #0
   15e30:	bne	1545c <__assert_fail@plt+0x44a0>
   15e34:	ldr	r0, [pc, #288]	; 15f5c <__assert_fail@plt+0x4fa0>
   15e38:	bl	18cf8 <__assert_fail@plt+0x7d3c>
   15e3c:	b	1545c <__assert_fail@plt+0x44a0>
   15e40:	ldr	r0, [r8]
   15e44:	ldr	r3, [r0]
   15e48:	ldr	r2, [r3, #4]
   15e4c:	ldr	r1, [r3, #8]
   15e50:	cmp	r2, #1
   15e54:	bne	15e70 <__assert_fail@plt+0x4eb4>
   15e58:	cmp	r1, #0
   15e5c:	beq	15e70 <__assert_fail@plt+0x4eb4>
   15e60:	ldr	r3, [r3, #24]
   15e64:	ldrb	r3, [r3]
   15e68:	cmp	r3, #0
   15e6c:	beq	15dfc <__assert_fail@plt+0x4e40>
   15e70:	add	r1, r2, r1
   15e74:	bl	1b3fc <__assert_fail@plt+0xa440>
   15e78:	b	1545c <__assert_fail@plt+0x44a0>
   15e7c:	ldr	r3, [pc, #200]	; 15f4c <__assert_fail@plt+0x4f90>
   15e80:	ldr	r0, [pc, #216]	; 15f60 <__assert_fail@plt+0x4fa4>
   15e84:	ldr	r1, [r3]
   15e88:	bl	14ba8 <__assert_fail@plt+0x3bec>
   15e8c:	b	1545c <__assert_fail@plt+0x44a0>
   15e90:	mov	r0, #10
   15e94:	bl	17da4 <__assert_fail@plt+0x6de8>
   15e98:	b	158e0 <__assert_fail@plt+0x4924>
   15e9c:	ldr	r1, [r8]
   15ea0:	ldr	r3, [pc, #124]	; 15f24 <__assert_fail@plt+0x4f68>
   15ea4:	mov	r2, sp
   15ea8:	ldr	r0, [r1, #4]
   15eac:	ldr	r3, [r3]
   15eb0:	ldr	r1, [r1]
   15eb4:	ldr	r0, [r0]
   15eb8:	bl	1ade4 <__assert_fail@plt+0x9e28>
   15ebc:	b	15c04 <__assert_fail@plt+0x4c48>
   15ec0:	ldr	r0, [pc, #156]	; 15f64 <__assert_fail@plt+0x4fa8>
   15ec4:	bl	18cf8 <__assert_fail@plt+0x7d3c>
   15ec8:	b	1545c <__assert_fail@plt+0x44a0>
   15ecc:	ldr	r3, [r8]
   15ed0:	ldr	r0, [r3]
   15ed4:	bl	19960 <__assert_fail@plt+0x89a4>
   15ed8:	cmp	r0, #0
   15edc:	beq	15c04 <__assert_fail@plt+0x4c48>
   15ee0:	ldr	r0, [pc, #128]	; 15f68 <__assert_fail@plt+0x4fac>
   15ee4:	bl	18cf8 <__assert_fail@plt+0x7d3c>
   15ee8:	b	15c04 <__assert_fail@plt+0x4c48>
   15eec:	bl	10e24 <__stack_chk_fail@plt>
   15ef0:	andeq	r0, r3, r0, lsl lr
   15ef4:	andeq	r1, r3, ip, lsr #5
   15ef8:	andeq	r1, r3, ip, lsl #5
   15efc:	strdeq	r1, [r3], -ip
   15f00:	andeq	r1, r3, r8, ror r2
   15f04:	andeq	r1, r3, r0, lsr #4
   15f08:			; <UNDEFINED> instruction: 0x000312bc
   15f0c:	muleq	r3, r4, r2
   15f10:	andeq	r1, r1, ip, ror r5
   15f14:	andeq	pc, r1, r0, ror #14
   15f18:	andeq	r1, r3, r0, lsl #3
   15f1c:	andeq	r4, r1, ip, ror #20
   15f20:	andeq	pc, r1, r4, lsr #14
   15f24:	muleq	r3, r8, r2
   15f28:	andeq	pc, r1, r4, lsl r7	; <UNPREDICTABLE>
   15f2c:	andeq	r1, r3, r8, asr #5
   15f30:	andeq	r1, r3, r0, asr #5
   15f34:	andeq	r1, r3, r8, lsl #5
   15f38:			; <UNDEFINED> instruction: 0x0001f6b8
   15f3c:	andeq	r1, r3, ip, ror #3
   15f40:	andeq	r1, r3, r0, lsl #5
   15f44:	andeq	r7, r1, r4, lsr #27
   15f48:	andeq	r1, r3, r0, asr r2
   15f4c:	andeq	r1, r3, r4, lsr #5
   15f50:	andeq	r4, r1, r0, lsl #21
   15f54:	andeq	pc, r1, r4, asr #14
   15f58:	ldrdeq	pc, [r1], -r4
   15f5c:	strdeq	pc, [r1], -r0
   15f60:			; <UNDEFINED> instruction: 0x00014ab8
   15f64:	andeq	pc, r1, r8, lsr #13
   15f68:	andeq	pc, r1, r4, lsr r7	; <UNPREDICTABLE>
   15f6c:	ldr	r2, [pc, #116]	; 15fe8 <__assert_fail@plt+0x502c>
   15f70:	ldr	r1, [pc, #116]	; 15fec <__assert_fail@plt+0x5030>
   15f74:	push	{r4, r5, r6, r7, r8, lr}
   15f78:	mov	r7, r0
   15f7c:	ldr	r3, [r2]
   15f80:	ldr	r4, [r1]
   15f84:	ldr	r5, [r2, #4]
   15f88:	rsb	r3, r3, r3, lsl #3
   15f8c:	add	r1, r5, #1
   15f90:	add	r4, r4, r3, lsl #2
   15f94:	str	r1, [r2, #4]
   15f98:	ldr	r0, [r4, #8]
   15f9c:	cmp	r5, r0
   15fa0:	bcs	15fbc <__assert_fail@plt+0x5000>
   15fa4:	ldr	r6, [r4, #4]
   15fa8:	strb	r7, [r6, r5]
   15fac:	ldr	r3, [r4, #12]
   15fb0:	add	r3, r3, #1
   15fb4:	str	r3, [r4, #12]
   15fb8:	pop	{r4, r5, r6, r7, r8, pc}
   15fbc:	lsl	r0, r0, #1
   15fc0:	str	r0, [r4, #8]
   15fc4:	bl	1828c <__assert_fail@plt+0x72d0>
   15fc8:	ldmib	r4, {r1, r2}
   15fcc:	lsr	r2, r2, #1
   15fd0:	mov	r6, r0
   15fd4:	bl	10df4 <memcpy@plt>
   15fd8:	ldr	r0, [r4, #4]
   15fdc:	bl	10dd0 <free@plt>
   15fe0:	str	r6, [r4, #4]
   15fe4:	b	15fa8 <__assert_fail@plt+0x4fec>
   15fe8:	andeq	r1, r3, r8, lsr #4
   15fec:	andeq	r1, r3, r8, ror r2
   15ff0:	mov	r0, #0
   15ff4:	push	{r4, lr}
   15ff8:	bl	16d74 <__assert_fail@plt+0x5db8>
   15ffc:	ldr	r2, [pc, #28]	; 16020 <__assert_fail@plt+0x5064>
   16000:	ldr	r0, [pc, #28]	; 16024 <__assert_fail@plt+0x5068>
   16004:	ldr	r1, [pc, #28]	; 16028 <__assert_fail@plt+0x506c>
   16008:	mov	r3, #0
   1600c:	str	r3, [r2]
   16010:	str	r3, [r2, #4]
   16014:	strb	r3, [r0]
   16018:	strb	r3, [r1]
   1601c:	pop	{r4, pc}
   16020:	andeq	r1, r3, r8, lsr #4
   16024:	andeq	r1, r3, r4, lsr #4
   16028:	andeq	r1, r3, r0, lsr r2
   1602c:	ldr	r3, [pc, #12]	; 16040 <__assert_fail@plt+0x5084>
   16030:	ldr	r3, [r3]
   16034:	cmp	r3, #0
   16038:	bxne	lr
   1603c:	b	15f6c <__assert_fail@plt+0x4fb0>
   16040:	andeq	r1, r3, r8, lsr r2
   16044:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16048:	lsr	r5, r0, #6
   1604c:	ldr	r9, [pc, #156]	; 160f0 <__assert_fail@plt+0x5134>
   16050:	ldr	sl, [pc, #156]	; 160f4 <__assert_fail@plt+0x5138>
   16054:	and	r7, r0, #63	; 0x3f
   16058:	ldr	r3, [r9]
   1605c:	ldr	r8, [sl]
   16060:	rsb	r3, r3, r3, lsl #3
   16064:	lsl	r4, r3, #2
   16068:	add	r8, r8, r4
   1606c:	ldr	r6, [r8, #16]
   16070:	cmp	r6, #0
   16074:	beq	160cc <__assert_fail@plt+0x5110>
   16078:	cmp	r5, #0
   1607c:	moveq	r4, r6
   16080:	bne	16094 <__assert_fail@plt+0x50d8>
   16084:	b	160c0 <__assert_fail@plt+0x5104>
   16088:	subs	r5, r5, #1
   1608c:	mov	r6, r4
   16090:	beq	160c0 <__assert_fail@plt+0x5104>
   16094:	ldr	r4, [r6, #256]	; 0x100
   16098:	cmp	r4, #0
   1609c:	bne	16088 <__assert_fail@plt+0x50cc>
   160a0:	mov	r0, #260	; 0x104
   160a4:	bl	1828c <__assert_fail@plt+0x72d0>
   160a8:	subs	r5, r5, #1
   160ac:	str	r0, [r6, #256]	; 0x100
   160b0:	str	r4, [r0, #256]	; 0x100
   160b4:	ldr	r4, [r6, #256]	; 0x100
   160b8:	mov	r6, r4
   160bc:	bne	16094 <__assert_fail@plt+0x50d8>
   160c0:	ldr	r3, [r9, #4]
   160c4:	str	r3, [r4, r7, lsl #2]
   160c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   160cc:	mov	r0, #260	; 0x104
   160d0:	bl	1828c <__assert_fail@plt+0x72d0>
   160d4:	ldr	r3, [sl]
   160d8:	mov	r2, #0
   160dc:	add	r4, r3, r4
   160e0:	str	r0, [r8, #16]
   160e4:	ldr	r6, [r4, #16]
   160e8:	str	r2, [r6, #256]	; 0x100
   160ec:	b	16078 <__assert_fail@plt+0x50bc>
   160f0:	andeq	r1, r3, r8, lsr #4
   160f4:	andeq	r1, r3, r8, ror r2
   160f8:	push	{r4, r5, r6, r7, r8, lr}
   160fc:	mov	r6, r0
   16100:	ldr	r4, [r0]
   16104:	ldrb	r5, [r4]
   16108:	cmp	r5, #45	; 0x2d
   1610c:	movne	r7, #0
   16110:	bne	16128 <__assert_fail@plt+0x516c>
   16114:	add	r3, r4, #1
   16118:	str	r3, [r0]
   1611c:	mov	r7, #1
   16120:	ldrb	r5, [r4, #1]
   16124:	mov	r4, r3
   16128:	bl	10ecc <__ctype_b_loc@plt>
   1612c:	mov	r3, #0
   16130:	ldr	r0, [r0]
   16134:	b	1614c <__assert_fail@plt+0x5190>
   16138:	str	r4, [r6]
   1613c:	ldrb	r3, [r4, #-1]
   16140:	ldrb	r5, [r4]
   16144:	add	r3, r3, r1, lsl #1
   16148:	sub	r3, r3, #48	; 0x30
   1614c:	lsl	r5, r5, #1
   16150:	add	r4, r4, #1
   16154:	ldrh	r2, [r0, r5]
   16158:	add	r1, r3, r3, lsl #2
   1615c:	tst	r2, #2048	; 0x800
   16160:	bne	16138 <__assert_fail@plt+0x517c>
   16164:	cmp	r7, #0
   16168:	rsbne	r3, r3, #0
   1616c:	mov	r0, r3
   16170:	pop	{r4, r5, r6, r7, r8, pc}
   16174:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16178:	mov	r2, r0
   1617c:	ldr	r7, [pc, #1880]	; 168dc <__assert_fail@plt+0x5920>
   16180:	ldr	r4, [pc, #1880]	; 168e0 <__assert_fail@plt+0x5924>
   16184:	ldr	r5, [pc, #1880]	; 168e4 <__assert_fail@plt+0x5928>
   16188:	ldr	r6, [pc, #1880]	; 168e8 <__assert_fail@plt+0x592c>
   1618c:	ldr	fp, [pc, #1880]	; 168ec <__assert_fail@plt+0x5930>
   16190:	ldr	r8, [pc, #1880]	; 168f0 <__assert_fail@plt+0x5934>
   16194:	sub	sp, sp, #20
   16198:	ldr	r3, [r7]
   1619c:	str	r0, [sp, #8]
   161a0:	str	r3, [sp, #12]
   161a4:	ldrb	r0, [r2]
   161a8:	cmp	r0, #0
   161ac:	beq	161f0 <__assert_fail@plt+0x5234>
   161b0:	ldr	r3, [r4]
   161b4:	cmp	r3, #0
   161b8:	bne	161f0 <__assert_fail@plt+0x5234>
   161bc:	ldrb	r1, [r5]
   161c0:	cmp	r1, #0
   161c4:	beq	16208 <__assert_fail@plt+0x524c>
   161c8:	cmp	r0, #34	; 0x22
   161cc:	strbeq	r3, [r5]
   161d0:	add	r3, r2, #1
   161d4:	str	r3, [sp, #8]
   161d8:	ldrb	r0, [r2]
   161dc:	bl	15f6c <__assert_fail@plt+0x4fb0>
   161e0:	ldr	r2, [sp, #8]
   161e4:	ldrb	r0, [r2]
   161e8:	cmp	r0, #0
   161ec:	bne	161b0 <__assert_fail@plt+0x51f4>
   161f0:	ldr	r2, [sp, #12]
   161f4:	ldr	r3, [r7]
   161f8:	cmp	r2, r3
   161fc:	bne	168d8 <__assert_fail@plt+0x591c>
   16200:	add	sp, sp, #20
   16204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16208:	ldrb	r3, [r6]
   1620c:	cmp	r3, #0
   16210:	beq	162a0 <__assert_fail@plt+0x52e4>
   16214:	cmp	r0, #10
   16218:	beq	16294 <__assert_fail@plt+0x52d8>
   1621c:	cmp	r0, #58	; 0x3a
   16220:	beq	16744 <__assert_fail@plt+0x5788>
   16224:	cmp	r0, #46	; 0x2e
   16228:	beq	161d0 <__assert_fail@plt+0x5214>
   1622c:	cmp	r0, #70	; 0x46
   16230:	bhi	16458 <__assert_fail@plt+0x549c>
   16234:	add	r3, r2, #1
   16238:	cmp	r0, #64	; 0x40
   1623c:	str	r3, [sp, #8]
   16240:	bls	164a8 <__assert_fail@plt+0x54ec>
   16244:	ldrb	r0, [r2]
   16248:	sub	r0, r0, #55	; 0x37
   1624c:	uxtb	r0, r0
   16250:	bl	15f6c <__assert_fail@plt+0x4fb0>
   16254:	ldr	r2, [sp, #8]
   16258:	b	161a4 <__assert_fail@plt+0x51e8>
   1625c:	add	r9, sp, #16
   16260:	add	r3, r2, #1
   16264:	str	r3, [r9, #-8]!
   16268:	ldrb	r0, [r2]
   1626c:	bl	15f6c <__assert_fail@plt+0x4fb0>
   16270:	mov	r0, r9
   16274:	bl	160f8 <__assert_fail@plt+0x513c>
   16278:	cmp	r0, #65536	; 0x10000
   1627c:	mov	r9, r0
   16280:	bcs	16890 <__assert_fail@plt+0x58d4>
   16284:	ldr	r3, [r4]
   16288:	cmp	r3, #0
   1628c:	beq	164c0 <__assert_fail@plt+0x5504>
   16290:	ldr	r2, [sp, #8]
   16294:	add	r2, r2, #1
   16298:	str	r2, [sp, #8]
   1629c:	b	161a4 <__assert_fail@plt+0x51e8>
   162a0:	sub	r3, r0, #10
   162a4:	cmp	r3, #105	; 0x69
   162a8:	ldrls	pc, [pc, r3, lsl #2]
   162ac:	b	164dc <__assert_fail@plt+0x5520>
   162b0:	muleq	r1, r4, r2
   162b4:	ldrdeq	r6, [r1], -ip
   162b8:	ldrdeq	r6, [r1], -ip
   162bc:	ldrdeq	r6, [r1], -ip
   162c0:	ldrdeq	r6, [r1], -ip
   162c4:	ldrdeq	r6, [r1], -ip
   162c8:	ldrdeq	r6, [r1], -ip
   162cc:	ldrdeq	r6, [r1], -ip
   162d0:	ldrdeq	r6, [r1], -ip
   162d4:	ldrdeq	r6, [r1], -ip
   162d8:	ldrdeq	r6, [r1], -ip
   162dc:	ldrdeq	r6, [r1], -ip
   162e0:	ldrdeq	r6, [r1], -ip
   162e4:	ldrdeq	r6, [r1], -ip
   162e8:	ldrdeq	r6, [r1], -ip
   162ec:	ldrdeq	r6, [r1], -ip
   162f0:	ldrdeq	r6, [r1], -ip
   162f4:	ldrdeq	r6, [r1], -ip
   162f8:	ldrdeq	r6, [r1], -ip
   162fc:	ldrdeq	r6, [r1], -ip
   16300:	ldrdeq	r6, [r1], -ip
   16304:	ldrdeq	r6, [r1], -ip
   16308:	ldrdeq	r6, [r1], -ip
   1630c:	ldrdeq	r6, [r1], -ip
   16310:	andeq	r6, r1, r4, lsl #10
   16314:	ldrdeq	r6, [r1], -ip
   16318:	ldrdeq	r6, [r1], -ip
   1631c:	ldrdeq	r6, [r1], -ip
   16320:	ldrdeq	r6, [r1], -ip
   16324:	ldrdeq	r6, [r1], -ip
   16328:	ldrdeq	r6, [r1], -ip
   1632c:	ldrdeq	r6, [r1], -ip
   16330:	ldrdeq	r6, [r1], -ip
   16334:	ldrdeq	r6, [r1], -ip
   16338:	ldrdeq	r6, [r1], -ip
   1633c:	ldrdeq	r6, [r1], -ip
   16340:	ldrdeq	r6, [r1], -ip
   16344:	ldrdeq	r6, [r1], -ip
   16348:	ldrdeq	r6, [r1], -ip
   1634c:	ldrdeq	r6, [r1], -ip
   16350:	ldrdeq	r6, [r1], -ip
   16354:	ldrdeq	r6, [r1], -ip
   16358:	ldrdeq	r6, [r1], -ip
   1635c:	ldrdeq	r6, [r1], -ip
   16360:	ldrdeq	r6, [r1], -ip
   16364:	ldrdeq	r6, [r1], -ip
   16368:	ldrdeq	r6, [r1], -ip
   1636c:	ldrdeq	r6, [r1], -ip
   16370:	ldrdeq	r6, [r1], -ip
   16374:	ldrdeq	r6, [r1], -ip
   16378:	ldrdeq	r6, [r1], -ip
   1637c:	ldrdeq	r6, [r1], -ip
   16380:	ldrdeq	r6, [r1], -ip
   16384:	ldrdeq	r6, [r1], -ip
   16388:	andeq	r6, r1, r8, lsl r5
   1638c:	andeq	r6, r1, ip, lsr r5
   16390:	andeq	r6, r1, ip, asr r2
   16394:	andeq	r6, r1, r4, asr #11
   16398:	ldrdeq	r6, [r1], -ip
   1639c:	ldrdeq	r6, [r1], -ip
   163a0:	andeq	r6, r1, r8, asr #12
   163a4:	ldrdeq	r6, [r1], -ip
   163a8:	ldrdeq	r6, [r1], -ip
   163ac:	ldrdeq	r6, [r1], -ip
   163b0:	andeq	r6, r1, ip, asr r2
   163b4:	andeq	r6, r1, r0, lsl #11
   163b8:	andeq	r6, r1, ip, lsr r5
   163bc:	andeq	r6, r1, ip, lsr r5
   163c0:	andeq	r6, r1, r0, lsr #11
   163c4:	ldrdeq	r6, [r1], -ip
   163c8:	ldrdeq	r6, [r1], -ip
   163cc:	ldrdeq	r6, [r1], -ip
   163d0:	ldrdeq	r6, [r1], -ip
   163d4:	andeq	r6, r1, ip, lsr r5
   163d8:	ldrdeq	r6, [r1], -ip
   163dc:	ldrdeq	r6, [r1], -ip
   163e0:	ldrdeq	r6, [r1], -ip
   163e4:	ldrdeq	r6, [r1], -ip
   163e8:	ldrdeq	r6, [r1], -ip
   163ec:	ldrdeq	r6, [r1], -ip
   163f0:	andeq	r6, r1, ip, asr r2
   163f4:	ldrdeq	r6, [r1], -ip
   163f8:	ldrdeq	r6, [r1], -ip
   163fc:	andeq	r6, r1, r8, ror #13
   16400:	ldrdeq	r6, [r1], -ip
   16404:	ldrdeq	r6, [r1], -ip
   16408:	ldrdeq	r6, [r1], -ip
   1640c:	ldrdeq	r6, [r1], -ip
   16410:	ldrdeq	r6, [r1], -ip
   16414:	andeq	r6, r1, r4, lsl r7
   16418:	andeq	r6, r1, ip, lsr r5
   1641c:	ldrdeq	r6, [r1], -ip
   16420:	ldrdeq	r6, [r1], -ip
   16424:	ldrdeq	r6, [r1], -ip
   16428:	ldrdeq	r6, [r1], -ip
   1642c:	andeq	r6, r1, ip, lsr r5
   16430:	ldrdeq	r6, [r1], -ip
   16434:	ldrdeq	r6, [r1], -ip
   16438:	andeq	r6, r1, ip, lsr r5
   1643c:	ldrdeq	r6, [r1], -ip
   16440:	ldrdeq	r6, [r1], -ip
   16444:	ldrdeq	r6, [r1], -ip
   16448:	ldrdeq	r6, [r1], -ip
   1644c:	ldrdeq	r6, [r1], -ip
   16450:	ldrdeq	r6, [r1], -ip
   16454:	andeq	r6, r1, ip, lsr r5
   16458:	ldr	r1, [pc, #1172]	; 168f4 <__assert_fail@plt+0x5938>
   1645c:	ldr	r3, [pc, #1172]	; 168f8 <__assert_fail@plt+0x593c>
   16460:	ldr	r1, [r1]
   16464:	ldr	r3, [r3]
   16468:	cmp	r1, #0
   1646c:	beq	164f0 <__assert_fail@plt+0x5534>
   16470:	cmp	r3, #0
   16474:	bne	167e0 <__assert_fail@plt+0x5824>
   16478:	ldr	r0, [pc, #1148]	; 168fc <__assert_fail@plt+0x5940>
   1647c:	bl	18784 <__assert_fail@plt+0x77c8>
   16480:	ldr	r3, [sp, #8]
   16484:	ldr	r1, [r4]
   16488:	ldrb	r2, [r3]
   1648c:	cmp	r2, #64	; 0x40
   16490:	add	r2, r3, #1
   16494:	bhi	1680c <__assert_fail@plt+0x5850>
   16498:	cmp	r1, #0
   1649c:	str	r2, [sp, #8]
   164a0:	bne	161a4 <__assert_fail@plt+0x51e8>
   164a4:	mov	r2, r3
   164a8:	ldrb	r0, [r2]
   164ac:	sub	r0, r0, #48	; 0x30
   164b0:	uxtb	r0, r0
   164b4:	bl	15f6c <__assert_fail@plt+0x4fb0>
   164b8:	ldr	r2, [sp, #8]
   164bc:	b	161a4 <__assert_fail@plt+0x51e8>
   164c0:	uxtb	r0, r9
   164c4:	bl	15f6c <__assert_fail@plt+0x4fb0>
   164c8:	ldr	r3, [r4]
   164cc:	lsr	r0, r9, #8
   164d0:	cmp	r3, #0
   164d4:	uxtb	r0, r0
   164d8:	bne	16290 <__assert_fail@plt+0x52d4>
   164dc:	bl	15f6c <__assert_fail@plt+0x4fb0>
   164e0:	ldr	r2, [sp, #8]
   164e4:	add	r2, r2, #1
   164e8:	str	r2, [sp, #8]
   164ec:	b	161a4 <__assert_fail@plt+0x51e8>
   164f0:	cmp	r3, #0
   164f4:	bne	167e0 <__assert_fail@plt+0x5824>
   164f8:	add	r3, r2, #1
   164fc:	str	r3, [sp, #8]
   16500:	b	16244 <__assert_fail@plt+0x5288>
   16504:	mov	r3, #1
   16508:	add	r2, r2, #1
   1650c:	strb	r3, [r5]
   16510:	str	r2, [sp, #8]
   16514:	b	161a4 <__assert_fail@plt+0x51e8>
   16518:	add	r1, r2, #1
   1651c:	str	r1, [sp, #8]
   16520:	ldrb	r3, [r2, #1]
   16524:	cmp	r3, #105	; 0x69
   16528:	beq	168b4 <__assert_fail@plt+0x58f8>
   1652c:	cmp	r3, #114	; 0x72
   16530:	bne	1687c <__assert_fail@plt+0x58c0>
   16534:	bl	1509c <__assert_fail@plt+0x40e0>
   16538:	b	16290 <__assert_fail@plt+0x52d4>
   1653c:	add	r9, sp, #16
   16540:	add	r3, r2, #1
   16544:	str	r3, [r9, #-8]!
   16548:	ldrb	r0, [r2]
   1654c:	bl	15f6c <__assert_fail@plt+0x4fb0>
   16550:	mov	r0, r9
   16554:	bl	160f8 <__assert_fail@plt+0x513c>
   16558:	ldr	r3, [r4]
   1655c:	cmp	r0, #127	; 0x7f
   16560:	mov	r9, r0
   16564:	bhi	16850 <__assert_fail@plt+0x5894>
   16568:	cmp	r3, #0
   1656c:	bne	16290 <__assert_fail@plt+0x52d4>
   16570:	uxtb	r0, r0
   16574:	bl	15f6c <__assert_fail@plt+0x4fb0>
   16578:	ldr	r2, [sp, #8]
   1657c:	b	16294 <__assert_fail@plt+0x52d8>
   16580:	mov	r0, #75	; 0x4b
   16584:	bl	15f6c <__assert_fail@plt+0x4fb0>
   16588:	ldr	r2, [sp, #8]
   1658c:	mov	r3, #1
   16590:	add	r2, r2, #1
   16594:	strb	r3, [r6]
   16598:	str	r2, [sp, #8]
   1659c:	b	161a4 <__assert_fail@plt+0x51e8>
   165a0:	add	r0, sp, #16
   165a4:	add	r2, r2, #1
   165a8:	str	r2, [r0, #-8]!
   165ac:	bl	160f8 <__assert_fail@plt+0x513c>
   165b0:	bl	16044 <__assert_fail@plt+0x5088>
   165b4:	ldr	r2, [sp, #8]
   165b8:	add	r2, r2, #1
   165bc:	str	r2, [sp, #8]
   165c0:	b	161a4 <__assert_fail@plt+0x51e8>
   165c4:	add	r9, sp, #16
   165c8:	add	r3, r2, #1
   165cc:	str	r3, [r9, #-8]!
   165d0:	ldrb	r0, [r2]
   165d4:	bl	15f6c <__assert_fail@plt+0x4fb0>
   165d8:	mov	r0, r9
   165dc:	bl	160f8 <__assert_fail@plt+0x513c>
   165e0:	ldr	r3, [r4]
   165e4:	cmp	r0, #127	; 0x7f
   165e8:	mov	r9, r0
   165ec:	bhi	16820 <__assert_fail@plt+0x5864>
   165f0:	cmp	r3, #0
   165f4:	beq	16884 <__assert_fail@plt+0x58c8>
   165f8:	ldr	r3, [sp, #8]
   165fc:	ldrb	r0, [r3]
   16600:	cmp	r0, #44	; 0x2c
   16604:	addeq	r2, r3, #1
   16608:	streq	r2, [sp, #8]
   1660c:	ldrbeq	r0, [r3, #1]
   16610:	moveq	r3, r2
   16614:	ldr	r1, [r4]
   16618:	b	16630 <__assert_fail@plt+0x5674>
   1661c:	add	r3, r3, #1
   16620:	cmp	r1, #0
   16624:	str	r3, [sp, #8]
   16628:	beq	167f8 <__assert_fail@plt+0x583c>
   1662c:	ldrb	r0, [r3]
   16630:	cmp	r0, #58	; 0x3a
   16634:	mov	r2, r3
   16638:	bne	1661c <__assert_fail@plt+0x5660>
   1663c:	cmp	r1, #0
   16640:	bne	16294 <__assert_fail@plt+0x52d8>
   16644:	b	164dc <__assert_fail@plt+0x5520>
   16648:	add	r9, sp, #16
   1664c:	add	r2, r2, #1
   16650:	str	r2, [r9, #-8]!
   16654:	mov	r0, r9
   16658:	bl	160f8 <__assert_fail@plt+0x513c>
   1665c:	mov	sl, r0
   16660:	str	r0, [sp, #4]
   16664:	rsb	sl, sl, sl, lsl #3
   16668:	bl	16d74 <__assert_fail@plt+0x5db8>
   1666c:	lsl	sl, sl, #2
   16670:	b	166a0 <__assert_fail@plt+0x56e4>
   16674:	mov	r0, r9
   16678:	bl	160f8 <__assert_fail@plt+0x513c>
   1667c:	ldr	r3, [r8]
   16680:	mov	r2, #0
   16684:	add	r3, r3, sl
   16688:	mov	r1, r0
   1668c:	ldr	r0, [r3, #20]
   16690:	str	r3, [sp]
   16694:	bl	182d4 <__assert_fail@plt+0x7318>
   16698:	ldr	r3, [sp]
   1669c:	str	r0, [r3, #20]
   166a0:	ldr	r3, [sp, #8]
   166a4:	add	r2, r3, #1
   166a8:	str	r2, [sp, #8]
   166ac:	ldrb	r1, [r3]
   166b0:	cmp	r1, #46	; 0x2e
   166b4:	beq	16768 <__assert_fail@plt+0x57ac>
   166b8:	ldrb	r2, [r3, #1]
   166bc:	cmp	r2, #46	; 0x2e
   166c0:	beq	16760 <__assert_fail@plt+0x57a4>
   166c4:	cmp	r2, #42	; 0x2a
   166c8:	bne	16674 <__assert_fail@plt+0x56b8>
   166cc:	add	r3, r3, #2
   166d0:	mov	r0, r9
   166d4:	str	r3, [sp, #8]
   166d8:	bl	160f8 <__assert_fail@plt+0x513c>
   166dc:	ldr	r3, [r8]
   166e0:	mov	r2, #1
   166e4:	b	16684 <__assert_fail@plt+0x56c8>
   166e8:	ldr	r1, [pc, #528]	; 16900 <__assert_fail@plt+0x5944>
   166ec:	ldr	r3, [fp]
   166f0:	ldr	ip, [r8]
   166f4:	ldm	r1, {r0, r1}
   166f8:	rsb	r3, r3, r3, lsl #3
   166fc:	mov	lr, #1
   16700:	add	r2, r2, #1
   16704:	strb	lr, [ip, r3, lsl #2]
   16708:	stm	fp, {r0, r1}
   1670c:	str	r2, [sp, #8]
   16710:	b	161a4 <__assert_fail@plt+0x51e8>
   16714:	add	r3, r2, #1
   16718:	str	r3, [sp, #8]
   1671c:	ldrb	r0, [r2]
   16720:	bl	15f6c <__assert_fail@plt+0x4fb0>
   16724:	ldr	r3, [r4]
   16728:	ldr	r2, [sp, #8]
   1672c:	cmp	r3, #0
   16730:	bne	16294 <__assert_fail@plt+0x52d8>
   16734:	ldrb	r0, [r2]
   16738:	bl	15f6c <__assert_fail@plt+0x4fb0>
   1673c:	ldr	r2, [sp, #8]
   16740:	b	16294 <__assert_fail@plt+0x52d8>
   16744:	add	r3, r2, #1
   16748:	strb	r1, [r6]
   1674c:	str	r3, [sp, #8]
   16750:	ldrb	r0, [r2]
   16754:	bl	15f6c <__assert_fail@plt+0x4fb0>
   16758:	ldr	r2, [sp, #8]
   1675c:	b	161a4 <__assert_fail@plt+0x51e8>
   16760:	add	r2, r3, #2
   16764:	str	r2, [sp, #8]
   16768:	ldrb	r3, [r2]
   1676c:	cmp	r3, #91	; 0x5b
   16770:	strne	r9, [sp]
   16774:	beq	167b8 <__assert_fail@plt+0x57fc>
   16778:	cmp	r3, #44	; 0x2c
   1677c:	addeq	r2, r2, #1
   16780:	ldr	r0, [sp]
   16784:	streq	r2, [sp, #8]
   16788:	bl	160f8 <__assert_fail@plt+0x513c>
   1678c:	ldr	r3, [r8]
   16790:	mov	r2, #0
   16794:	add	r9, r3, sl
   16798:	mov	r1, r0
   1679c:	ldr	r0, [r9, #24]
   167a0:	bl	182d4 <__assert_fail@plt+0x7318>
   167a4:	ldr	r2, [sp, #8]
   167a8:	str	r0, [r9, #24]
   167ac:	ldrb	r3, [r2]
   167b0:	cmp	r3, #91	; 0x5b
   167b4:	bne	16778 <__assert_fail@plt+0x57bc>
   167b8:	ldm	fp, {r0, r1}
   167bc:	ldr	r3, [pc, #316]	; 16900 <__assert_fail@plt+0x5944>
   167c0:	ldr	lr, [sp, #4]
   167c4:	mov	ip, #0
   167c8:	add	r2, r2, #1
   167cc:	str	lr, [fp]
   167d0:	stm	r3, {r0, r1}
   167d4:	str	ip, [fp, #4]
   167d8:	str	r2, [sp, #8]
   167dc:	b	161a4 <__assert_fail@plt+0x51e8>
   167e0:	ldr	r0, [pc, #284]	; 16904 <__assert_fail@plt+0x5948>
   167e4:	bl	186b0 <__assert_fail@plt+0x76f4>
   167e8:	ldr	r3, [sp, #8]
   167ec:	ldr	r1, [r4]
   167f0:	ldrb	r2, [r3]
   167f4:	b	1648c <__assert_fail@plt+0x54d0>
   167f8:	ldrb	r0, [r2]
   167fc:	bl	15f6c <__assert_fail@plt+0x4fb0>
   16800:	ldr	r3, [sp, #8]
   16804:	ldrb	r0, [r3]
   16808:	b	16614 <__assert_fail@plt+0x5658>
   1680c:	cmp	r1, #0
   16810:	str	r2, [sp, #8]
   16814:	bne	161a4 <__assert_fail@plt+0x51e8>
   16818:	mov	r2, r3
   1681c:	b	16244 <__assert_fail@plt+0x5288>
   16820:	cmp	r3, #0
   16824:	bne	165f8 <__assert_fail@plt+0x563c>
   16828:	mvn	r0, #127	; 0x7f
   1682c:	orr	r0, r0, r9, lsr #8
   16830:	uxtb	r0, r0
   16834:	bl	15f6c <__assert_fail@plt+0x4fb0>
   16838:	ldr	r3, [r4]
   1683c:	uxtb	r0, r9
   16840:	cmp	r3, #0
   16844:	bne	165f8 <__assert_fail@plt+0x563c>
   16848:	bl	15f6c <__assert_fail@plt+0x4fb0>
   1684c:	b	165f8 <__assert_fail@plt+0x563c>
   16850:	cmp	r3, #0
   16854:	bne	16290 <__assert_fail@plt+0x52d4>
   16858:	mvn	r0, #127	; 0x7f
   1685c:	orr	r0, r0, r9, lsr #8
   16860:	uxtb	r0, r0
   16864:	bl	15f6c <__assert_fail@plt+0x4fb0>
   16868:	ldr	r3, [r4]
   1686c:	uxtb	r0, r9
   16870:	cmp	r3, #0
   16874:	beq	164dc <__assert_fail@plt+0x5520>
   16878:	b	16290 <__assert_fail@plt+0x52d4>
   1687c:	mov	r2, r1
   16880:	b	16294 <__assert_fail@plt+0x52d8>
   16884:	uxtb	r0, r0
   16888:	bl	15f6c <__assert_fail@plt+0x4fb0>
   1688c:	b	165f8 <__assert_fail@plt+0x563c>
   16890:	ldr	r3, [pc, #112]	; 16908 <__assert_fail@plt+0x594c>
   16894:	mov	r2, #17
   16898:	mov	r1, #1
   1689c:	ldr	r3, [r3]
   168a0:	ldr	r0, [pc, #100]	; 1690c <__assert_fail@plt+0x5950>
   168a4:	bl	10e54 <fwrite@plt>
   168a8:	mov	r0, #1
   168ac:	bl	18e70 <__assert_fail@plt+0x7eb4>
   168b0:	b	16284 <__assert_fail@plt+0x52c8>
   168b4:	mov	r0, #0
   168b8:	bl	16d74 <__assert_fail@plt+0x5db8>
   168bc:	mov	r3, #0
   168c0:	str	r3, [fp]
   168c4:	str	r3, [fp, #4]
   168c8:	strb	r3, [r5]
   168cc:	strb	r3, [r6]
   168d0:	ldr	r2, [sp, #8]
   168d4:	b	16294 <__assert_fail@plt+0x52d8>
   168d8:	bl	10e24 <__stack_chk_fail@plt>
   168dc:	andeq	r0, r3, r0, lsl lr
   168e0:	andeq	r1, r3, r8, lsr r2
   168e4:	andeq	r1, r3, r4, lsr #4
   168e8:	andeq	r1, r3, r0, lsr r2
   168ec:	andeq	r1, r3, r8, lsr #4
   168f0:	andeq	r1, r3, r8, ror r2
   168f4:	strdeq	r1, [r3], -r0
   168f8:	andeq	r1, r3, ip, ror #3
   168fc:	muleq	r1, r4, r7
   16900:	ldrdeq	r1, [r3], -r4
   16904:	andeq	pc, r1, r8, ror r7	; <UNPREDICTABLE>
   16908:	andeq	r1, r3, r8, ror #2
   1690c:			; <UNDEFINED> instruction: 0x0001f7bc
   16910:	push	{r4, r5, r6, r7, r8, lr}
   16914:	mov	r6, r0
   16918:	mov	r0, #256	; 0x100
   1691c:	mov	r8, r1
   16920:	bl	1828c <__assert_fail@plt+0x72d0>
   16924:	cmp	r8, #1
   16928:	mov	r7, r0
   1692c:	ble	16980 <__assert_fail@plt+0x59c4>
   16930:	sub	r4, r6, #4
   16934:	sub	r8, r8, #1
   16938:	add	r6, r6, #252	; 0xfc
   1693c:	mov	r5, r0
   16940:	b	16950 <__assert_fail@plt+0x5994>
   16944:	cmp	r4, r6
   16948:	add	r5, r5, #4
   1694c:	beq	16978 <__assert_fail@plt+0x59bc>
   16950:	ldr	r0, [r4, #4]!
   16954:	cmp	r0, #0
   16958:	streq	r0, [r5]
   1695c:	beq	16944 <__assert_fail@plt+0x5988>
   16960:	mov	r1, r8
   16964:	bl	16910 <__assert_fail@plt+0x5954>
   16968:	cmp	r4, r6
   1696c:	add	r5, r5, #4
   16970:	str	r0, [r5, #-4]
   16974:	bne	16950 <__assert_fail@plt+0x5994>
   16978:	mov	r0, r7
   1697c:	pop	{r4, r5, r6, r7, r8, pc}
   16980:	sub	r5, r6, #4
   16984:	mov	r4, r0
   16988:	add	r6, r6, #252	; 0xfc
   1698c:	ldr	r3, [r5, #4]!
   16990:	subs	r0, r3, #0
   16994:	streq	r3, [r4]
   16998:	beq	169a4 <__assert_fail@plt+0x59e8>
   1699c:	bl	19908 <__assert_fail@plt+0x894c>
   169a0:	str	r0, [r4]
   169a4:	cmp	r5, r6
   169a8:	add	r4, r4, #4
   169ac:	bne	1698c <__assert_fail@plt+0x59d0>
   169b0:	mov	r0, r7
   169b4:	pop	{r4, r5, r6, r7, r8, pc}
   169b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169bc:	sub	sp, sp, #12
   169c0:	ldr	r7, [pc, #304]	; 16af8 <__assert_fail@plt+0x5b3c>
   169c4:	ldr	r4, [pc, #304]	; 16afc <__assert_fail@plt+0x5b40>
   169c8:	ldr	r8, [pc, #304]	; 16b00 <__assert_fail@plt+0x5b44>
   169cc:	ldr	r6, [r7]
   169d0:	ldr	sl, [r4]
   169d4:	add	r5, r6, #32
   169d8:	str	r5, [r7]
   169dc:	rsb	r5, r5, r5, lsl #3
   169e0:	str	r6, [sp]
   169e4:	lsl	r5, r5, #2
   169e8:	mov	r0, r5
   169ec:	ldr	r9, [r8]
   169f0:	str	sl, [sp, #4]
   169f4:	bl	1828c <__assert_fail@plt+0x72d0>
   169f8:	ldr	r3, [r7]
   169fc:	str	r0, [r8]
   16a00:	lsl	r0, r3, #2
   16a04:	bl	1828c <__assert_fail@plt+0x72d0>
   16a08:	cmp	r6, #0
   16a0c:	str	r0, [r4]
   16a10:	ble	16ae4 <__assert_fail@plt+0x5b28>
   16a14:	ldr	fp, [r8]
   16a18:	sub	r6, r0, #4
   16a1c:	sub	r5, r5, #896	; 0x380
   16a20:	sub	sl, sl, #4
   16a24:	mov	r4, #0
   16a28:	add	lr, r9, r4
   16a2c:	add	ip, fp, r4
   16a30:	ldm	lr!, {r0, r1, r2, r3}
   16a34:	add	r4, r4, #28
   16a38:	cmp	r5, r4
   16a3c:	stmia	ip!, {r0, r1, r2, r3}
   16a40:	ldm	lr, {r0, r1, r2}
   16a44:	stm	ip, {r0, r1, r2}
   16a48:	ldr	r3, [sl, #4]!
   16a4c:	str	r3, [r6, #4]!
   16a50:	bne	16a28 <__assert_fail@plt+0x5a6c>
   16a54:	ldr	r3, [r7]
   16a58:	ldr	r2, [sp]
   16a5c:	cmp	r3, r2
   16a60:	ldrgt	fp, [sp]
   16a64:	ble	16acc <__assert_fail@plt+0x5b10>
   16a68:	rsb	sl, fp, fp, lsl #3
   16a6c:	mov	r5, #0
   16a70:	lsl	sl, sl, #2
   16a74:	mov	r6, #1024	; 0x400
   16a78:	ldr	r3, [r8]
   16a7c:	mov	r0, #1024	; 0x400
   16a80:	add	r4, r3, sl
   16a84:	strh	r5, [r3, sl]
   16a88:	bl	1828c <__assert_fail@plt+0x72d0>
   16a8c:	ldr	r3, [r7]
   16a90:	add	fp, fp, #1
   16a94:	cmp	r3, fp
   16a98:	str	r6, [r4, #8]
   16a9c:	add	sl, sl, #28
   16aa0:	str	r5, [r4, #12]
   16aa4:	str	r5, [r4, #16]
   16aa8:	str	r5, [r4, #24]
   16aac:	str	r5, [r4, #20]
   16ab0:	str	r0, [r4, #4]
   16ab4:	bgt	16a78 <__assert_fail@plt+0x5abc>
   16ab8:	ldr	r3, [sp]
   16abc:	cmp	r3, #0
   16ac0:	bne	16acc <__assert_fail@plt+0x5b10>
   16ac4:	add	sp, sp, #12
   16ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16acc:	mov	r0, r9
   16ad0:	bl	10dd0 <free@plt>
   16ad4:	ldr	r0, [sp, #4]
   16ad8:	add	sp, sp, #12
   16adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ae0:	b	10dd0 <free@plt>
   16ae4:	ldr	r3, [r7]
   16ae8:	cmp	r3, #0
   16aec:	movgt	fp, #0
   16af0:	bgt	16a68 <__assert_fail@plt+0x5aac>
   16af4:	b	16ab8 <__assert_fail@plt+0x5afc>
   16af8:	andeq	r1, r3, ip, asr #4
   16afc:	andeq	r1, r3, r8, lsl #5
   16b00:	andeq	r1, r3, r8, ror r2
   16b04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b08:	ldr	r8, [pc, #200]	; 16bd8 <__assert_fail@plt+0x5c1c>
   16b0c:	ldr	r9, [pc, #200]	; 16bdc <__assert_fail@plt+0x5c20>
   16b10:	ldr	sl, [pc, #200]	; 16be0 <__assert_fail@plt+0x5c24>
   16b14:	ldr	r6, [r8]
   16b18:	ldr	r7, [r9]
   16b1c:	add	r0, r6, #32
   16b20:	str	r0, [r8]
   16b24:	lsl	r4, r0, #2
   16b28:	mov	r0, r4
   16b2c:	ldr	r5, [sl]
   16b30:	bl	1828c <__assert_fail@plt+0x72d0>
   16b34:	ldr	r3, [r8]
   16b38:	str	r0, [r9]
   16b3c:	lsl	r0, r3, #2
   16b40:	bl	1828c <__assert_fail@plt+0x72d0>
   16b44:	cmp	r6, #3
   16b48:	movle	r1, #3
   16b4c:	str	r0, [sl]
   16b50:	ble	16b8c <__assert_fail@plt+0x5bd0>
   16b54:	ldr	r1, [r9]
   16b58:	add	r2, r7, r4
   16b5c:	sub	r2, r2, #132	; 0x84
   16b60:	add	r0, r0, #8
   16b64:	add	r1, r1, #8
   16b68:	add	r3, r7, #8
   16b6c:	add	ip, r5, #8
   16b70:	ldr	r4, [r3, #4]!
   16b74:	ldr	lr, [ip, #4]!
   16b78:	cmp	r3, r2
   16b7c:	str	r4, [r1, #4]!
   16b80:	str	lr, [r0, #4]!
   16b84:	bne	16b70 <__assert_fail@plt+0x5bb4>
   16b88:	mov	r1, r6
   16b8c:	ldr	r0, [r8]
   16b90:	cmp	r0, r1
   16b94:	ble	16bbc <__assert_fail@plt+0x5c00>
   16b98:	ldr	r3, [r9]
   16b9c:	sub	r1, r1, #-1073741823	; 0xc0000001
   16ba0:	sub	r2, r3, #4
   16ba4:	add	r2, r2, r0, lsl #2
   16ba8:	add	r3, r3, r1, lsl #2
   16bac:	mov	r1, #0
   16bb0:	str	r1, [r3, #4]!
   16bb4:	cmp	r3, r2
   16bb8:	bne	16bb0 <__assert_fail@plt+0x5bf4>
   16bbc:	cmp	r6, #0
   16bc0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16bc4:	mov	r0, r7
   16bc8:	bl	10dd0 <free@plt>
   16bcc:	mov	r0, r5
   16bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16bd4:	b	10dd0 <free@plt>
   16bd8:	andeq	r1, r3, ip, ror #4
   16bdc:			; <UNDEFINED> instruction: 0x000312b4
   16be0:	muleq	r3, ip, r2
   16be4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16be8:	ldr	r8, [pc, #192]	; 16cb0 <__assert_fail@plt+0x5cf4>
   16bec:	ldr	r9, [pc, #192]	; 16cb4 <__assert_fail@plt+0x5cf8>
   16bf0:	ldr	sl, [pc, #192]	; 16cb8 <__assert_fail@plt+0x5cfc>
   16bf4:	ldr	r6, [r8]
   16bf8:	ldr	r7, [r9]
   16bfc:	add	r0, r6, #32
   16c00:	str	r0, [r8]
   16c04:	lsl	r4, r0, #2
   16c08:	mov	r0, r4
   16c0c:	ldr	r5, [sl]
   16c10:	bl	1828c <__assert_fail@plt+0x72d0>
   16c14:	ldr	r3, [r8]
   16c18:	str	r0, [r9]
   16c1c:	lsl	r0, r3, #2
   16c20:	bl	1828c <__assert_fail@plt+0x72d0>
   16c24:	cmp	r6, #1
   16c28:	movle	r1, #1
   16c2c:	str	r0, [sl]
   16c30:	ble	16c64 <__assert_fail@plt+0x5ca8>
   16c34:	add	r2, r7, r4
   16c38:	ldr	ip, [r9]
   16c3c:	sub	r2, r2, #132	; 0x84
   16c40:	mov	r3, r7
   16c44:	mov	r1, r5
   16c48:	ldr	r4, [r3, #4]!
   16c4c:	ldr	lr, [r1, #4]!
   16c50:	cmp	r3, r2
   16c54:	str	r4, [ip, #4]!
   16c58:	str	lr, [r0, #4]!
   16c5c:	bne	16c48 <__assert_fail@plt+0x5c8c>
   16c60:	mov	r1, r6
   16c64:	ldr	r0, [r8]
   16c68:	cmp	r0, r1
   16c6c:	ble	16c94 <__assert_fail@plt+0x5cd8>
   16c70:	ldr	r3, [r9]
   16c74:	sub	r1, r1, #-1073741823	; 0xc0000001
   16c78:	sub	r2, r3, #4
   16c7c:	add	r2, r2, r0, lsl #2
   16c80:	add	r3, r3, r1, lsl #2
   16c84:	mov	r1, #0
   16c88:	str	r1, [r3, #4]!
   16c8c:	cmp	r3, r2
   16c90:	bne	16c88 <__assert_fail@plt+0x5ccc>
   16c94:	cmp	r6, #0
   16c98:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c9c:	mov	r0, r7
   16ca0:	bl	10dd0 <free@plt>
   16ca4:	mov	r0, r5
   16ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16cac:	b	10dd0 <free@plt>
   16cb0:	andeq	r1, r3, ip, asr r2
   16cb4:	andeq	r1, r3, r4, asr r2
   16cb8:	andeq	r1, r3, r8, asr r2
   16cbc:	ldr	r3, [pc, #128]	; 16d44 <__assert_fail@plt+0x5d88>
   16cc0:	push	{r4, r5, r6, lr}
   16cc4:	mov	r4, #0
   16cc8:	str	r4, [r3]
   16ccc:	bl	169b8 <__assert_fail@plt+0x59fc>
   16cd0:	ldr	r3, [pc, #112]	; 16d48 <__assert_fail@plt+0x5d8c>
   16cd4:	ldr	r0, [pc, #112]	; 16d4c <__assert_fail@plt+0x5d90>
   16cd8:	ldr	r5, [r3]
   16cdc:	bl	10e18 <strdup@plt>
   16ce0:	ldr	r3, [pc, #104]	; 16d50 <__assert_fail@plt+0x5d94>
   16ce4:	str	r0, [r5]
   16ce8:	str	r4, [r3]
   16cec:	bl	16b04 <__assert_fail@plt+0x5b48>
   16cf0:	ldr	r3, [pc, #92]	; 16d54 <__assert_fail@plt+0x5d98>
   16cf4:	str	r4, [r3]
   16cf8:	bl	16be4 <__assert_fail@plt+0x5c28>
   16cfc:	ldr	r2, [pc, #84]	; 16d58 <__assert_fail@plt+0x5d9c>
   16d00:	ldr	lr, [pc, #84]	; 16d5c <__assert_fail@plt+0x5da0>
   16d04:	ldr	r3, [pc, #84]	; 16d60 <__assert_fail@plt+0x5da4>
   16d08:	ldr	r1, [pc, #84]	; 16d64 <__assert_fail@plt+0x5da8>
   16d0c:	str	r4, [r2]
   16d10:	ldr	ip, [pc, #80]	; 16d68 <__assert_fail@plt+0x5dac>
   16d14:	ldr	r0, [pc, #80]	; 16d6c <__assert_fail@plt+0x5db0>
   16d18:	ldr	r2, [pc, #80]	; 16d70 <__assert_fail@plt+0x5db4>
   16d1c:	str	r4, [r3]
   16d20:	strb	r4, [r1]
   16d24:	mov	r3, #10
   16d28:	str	r4, [lr]
   16d2c:	mvn	r1, #0
   16d30:	pop	{r4, r5, r6, lr}
   16d34:	str	r3, [ip]
   16d38:	str	r3, [r0]
   16d3c:	str	r1, [r2]
   16d40:	b	198a0 <__assert_fail@plt+0x88e4>
   16d44:	andeq	r1, r3, ip, asr #4
   16d48:	andeq	r1, r3, r8, lsl #5
   16d4c:	ldrdeq	pc, [r1], -r0
   16d50:	andeq	r1, r3, ip, ror #4
   16d54:	andeq	r1, r3, ip, asr r2
   16d58:			; <UNDEFINED> instruction: 0x000312bc
   16d5c:	andeq	r1, r3, r0, asr r2
   16d60:	muleq	r3, r8, r2
   16d64:	muleq	r3, r4, r2
   16d68:	andeq	r1, r3, r4, lsr #5
   16d6c:	andeq	r1, r3, r0, lsl #5
   16d70:	andeq	r1, r3, r4, ror #4
   16d74:	ldr	r3, [pc, #108]	; 16de8 <__assert_fail@plt+0x5e2c>
   16d78:	rsb	r0, r0, r0, lsl #3
   16d7c:	push	{r4, r5, r6, lr}
   16d80:	lsl	r0, r0, #2
   16d84:	ldr	r3, [r3]
   16d88:	mov	r4, #0
   16d8c:	add	r5, r3, r0
   16d90:	strb	r4, [r3, r0]
   16d94:	ldr	r0, [r5, #24]
   16d98:	str	r4, [r5, #12]
   16d9c:	cmp	r0, r4
   16da0:	beq	16dac <__assert_fail@plt+0x5df0>
   16da4:	bl	17ce8 <__assert_fail@plt+0x6d2c>
   16da8:	str	r4, [r5, #24]
   16dac:	ldr	r0, [r5, #20]
   16db0:	cmp	r0, #0
   16db4:	beq	16dc4 <__assert_fail@plt+0x5e08>
   16db8:	bl	17ce8 <__assert_fail@plt+0x6d2c>
   16dbc:	mov	r3, #0
   16dc0:	str	r3, [r5, #20]
   16dc4:	ldr	r0, [r5, #16]
   16dc8:	cmp	r0, #0
   16dcc:	popeq	{r4, r5, r6, pc}
   16dd0:	ldr	r4, [r0, #256]	; 0x100
   16dd4:	bl	10dd0 <free@plt>
   16dd8:	subs	r0, r4, #0
   16ddc:	str	r4, [r5, #16]
   16de0:	bne	16dd0 <__assert_fail@plt+0x5e14>
   16de4:	pop	{r4, r5, r6, pc}
   16de8:	andeq	r1, r3, r8, ror r2
   16dec:	ldr	r3, [pc, #56]	; 16e2c <__assert_fail@plt+0x5e70>
   16df0:	push	{r4, lr}
   16df4:	ldr	r4, [r3]
   16df8:	cmp	r4, #0
   16dfc:	beq	16e1c <__assert_fail@plt+0x5e60>
   16e00:	ldr	r2, [r4, #4]
   16e04:	mov	r0, r4
   16e08:	ldr	r4, [r4]
   16e0c:	str	r2, [r3]
   16e10:	bl	10dd0 <free@plt>
   16e14:	mov	r0, r4
   16e18:	pop	{r4, pc}
   16e1c:	ldr	r0, [pc, #12]	; 16e30 <__assert_fail@plt+0x5e74>
   16e20:	bl	18cf8 <__assert_fail@plt+0x7d3c>
   16e24:	mov	r0, r4
   16e28:	pop	{r4, pc}
   16e2c:	andeq	r1, r3, r0, asr r2
   16e30:	ldrdeq	pc, [r1], -r8
   16e34:	push	{r4, lr}
   16e38:	mov	r4, r0
   16e3c:	mov	r0, #8
   16e40:	bl	1828c <__assert_fail@plt+0x72d0>
   16e44:	ldr	r3, [pc, #16]	; 16e5c <__assert_fail@plt+0x5ea0>
   16e48:	ldr	r2, [r3]
   16e4c:	str	r4, [r0]
   16e50:	str	r2, [r0, #4]
   16e54:	str	r0, [r3]
   16e58:	pop	{r4, pc}
   16e5c:	andeq	r1, r3, r0, asr r2
   16e60:	ldr	r3, [pc, #40]	; 16e90 <__assert_fail@plt+0x5ed4>
   16e64:	push	{r4, lr}
   16e68:	ldr	r4, [r3]
   16e6c:	cmp	r4, #0
   16e70:	popeq	{r4, pc}
   16e74:	ldr	r2, [r4, #4]
   16e78:	mov	r0, r4
   16e7c:	str	r2, [r3]
   16e80:	bl	19840 <__assert_fail@plt+0x8884>
   16e84:	mov	r0, r4
   16e88:	pop	{r4, lr}
   16e8c:	b	10dd0 <free@plt>
   16e90:			; <UNDEFINED> instruction: 0x000312bc
   16e94:	push	{r4, r5, r6, lr}
   16e98:	mov	r5, r0
   16e9c:	mov	r0, #8
   16ea0:	bl	1828c <__assert_fail@plt+0x72d0>
   16ea4:	mov	r4, r0
   16ea8:	mov	r0, r5
   16eac:	bl	19908 <__assert_fail@plt+0x894c>
   16eb0:	ldr	r3, [pc, #12]	; 16ec4 <__assert_fail@plt+0x5f08>
   16eb4:	ldr	r2, [r3]
   16eb8:	stm	r4, {r0, r2}
   16ebc:	str	r4, [r3]
   16ec0:	pop	{r4, r5, r6, pc}
   16ec4:			; <UNDEFINED> instruction: 0x000312bc
   16ec8:	push	{r4, lr}
   16ecc:	mov	r4, r0
   16ed0:	mov	r0, #8
   16ed4:	bl	1828c <__assert_fail@plt+0x72d0>
   16ed8:	ldr	r3, [pc, #16]	; 16ef0 <__assert_fail@plt+0x5f34>
   16edc:	ldr	r2, [r3]
   16ee0:	str	r4, [r0]
   16ee4:	str	r2, [r0, #4]
   16ee8:	str	r0, [r3]
   16eec:	pop	{r4, pc}
   16ef0:			; <UNDEFINED> instruction: 0x000312bc
   16ef4:	ldr	r3, [pc, #68]	; 16f40 <__assert_fail@plt+0x5f84>
   16ef8:	ldr	r3, [r3]
   16efc:	cmp	r3, #0
   16f00:	cmpne	r0, #0
   16f04:	ble	16f1c <__assert_fail@plt+0x5f60>
   16f08:	ldr	r3, [r3, #4]
   16f0c:	sub	r0, r0, #1
   16f10:	cmp	r3, #0
   16f14:	cmpne	r0, #0
   16f18:	bgt	16f08 <__assert_fail@plt+0x5f4c>
   16f1c:	cmp	r0, #0
   16f20:	ble	16f38 <__assert_fail@plt+0x5f7c>
   16f24:	push	{r4, lr}
   16f28:	ldr	r0, [pc, #20]	; 16f44 <__assert_fail@plt+0x5f88>
   16f2c:	bl	18cf8 <__assert_fail@plt+0x7d3c>
   16f30:	mov	r0, #0
   16f34:	pop	{r4, pc}
   16f38:	mov	r0, #1
   16f3c:	bx	lr
   16f40:			; <UNDEFINED> instruction: 0x000312bc
   16f44:	andeq	pc, r1, r8, lsl #16
   16f48:	ldr	r3, [pc, #56]	; 16f88 <__assert_fail@plt+0x5fcc>
   16f4c:	push	{r4, r5, r6, lr}
   16f50:	ldr	r6, [r3]
   16f54:	ldr	r4, [r6, r0, lsl #2]
   16f58:	cmp	r4, #0
   16f5c:	beq	16f68 <__assert_fail@plt+0x5fac>
   16f60:	mov	r0, r4
   16f64:	pop	{r4, r5, r6, pc}
   16f68:	mov	r5, r0
   16f6c:	mov	r0, #8
   16f70:	bl	1828c <__assert_fail@plt+0x72d0>
   16f74:	mov	r4, r0
   16f78:	str	r0, [r6, r5, lsl #2]
   16f7c:	bl	19918 <__assert_fail@plt+0x895c>
   16f80:	mov	r0, r4
   16f84:	pop	{r4, r5, r6, pc}
   16f88:			; <UNDEFINED> instruction: 0x000312b4
   16f8c:	ldr	r3, [pc, #468]	; 17168 <__assert_fail@plt+0x61ac>
   16f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f94:	sub	sp, sp, #28
   16f98:	ldr	r6, [r3]
   16f9c:	ldr	sl, [pc, #456]	; 1716c <__assert_fail@plt+0x61b0>
   16fa0:	mov	r5, r1
   16fa4:	ldr	r4, [r6, r0, lsl #2]
   16fa8:	ldr	r3, [sl]
   16fac:	cmp	r4, #0
   16fb0:	str	r3, [sp, #20]
   16fb4:	beq	170f4 <__assert_fail@plt+0x6138>
   16fb8:	ldr	r9, [r4]
   16fbc:	cmp	r9, #0
   16fc0:	beq	17118 <__assert_fail@plt+0x615c>
   16fc4:	ldrsh	r1, [r9, #4]
   16fc8:	add	r2, sp, #24
   16fcc:	and	r3, r5, #63	; 0x3f
   16fd0:	str	r3, [r2, #-20]!	; 0xffffffec
   16fd4:	lsr	r5, r5, #6
   16fd8:	mov	r7, #1
   16fdc:	b	16ff0 <__assert_fail@plt+0x6034>
   16fe0:	and	r3, r5, #63	; 0x3f
   16fe4:	str	r3, [r2, r7, lsl #2]
   16fe8:	lsr	r5, r5, #6
   16fec:	add	r7, r7, #1
   16ff0:	cmp	r5, #0
   16ff4:	bne	16fe0 <__assert_fail@plt+0x6024>
   16ff8:	cmp	r7, r1
   16ffc:	blt	16fe0 <__assert_fail@plt+0x6024>
   17000:	ble	1713c <__assert_fail@plt+0x6180>
   17004:	ldr	r6, [pc, #356]	; 17170 <__assert_fail@plt+0x61b4>
   17008:	mov	r0, #256	; 0x100
   1700c:	bl	1828c <__assert_fail@plt+0x72d0>
   17010:	ldrsh	r1, [r9, #4]
   17014:	cmp	r1, #0
   17018:	mov	r8, r0
   1701c:	beq	170d0 <__assert_fail@plt+0x6114>
   17020:	ldr	r0, [r9]
   17024:	mov	r3, r8
   17028:	add	r2, r8, #252	; 0xfc
   1702c:	str	r0, [r8]
   17030:	str	r5, [r3, #4]!
   17034:	cmp	r3, r2
   17038:	bne	17030 <__assert_fail@plt+0x6074>
   1703c:	add	r1, r1, #1
   17040:	str	r8, [r9]
   17044:	sxth	r1, r1
   17048:	cmp	r1, r7
   1704c:	strh	r1, [r9, #4]
   17050:	blt	17008 <__assert_fail@plt+0x604c>
   17054:	ldr	r4, [pc, #276]	; 17170 <__assert_fail@plt+0x61b4>
   17058:	add	r5, sp, #4
   1705c:	subs	r7, r7, #1
   17060:	beq	170b0 <__assert_fail@plt+0x60f4>
   17064:	ldr	r3, [r5, r7, lsl #2]
   17068:	add	r6, r8, r3, lsl #2
   1706c:	ldr	r8, [r8, r3, lsl #2]
   17070:	cmp	r8, #0
   17074:	bne	1705c <__assert_fail@plt+0x60a0>
   17078:	mov	r0, #256	; 0x100
   1707c:	bl	1828c <__assert_fail@plt+0x72d0>
   17080:	cmp	r7, #1
   17084:	mov	r8, r0
   17088:	str	r0, [r6]
   1708c:	beq	17144 <__assert_fail@plt+0x6188>
   17090:	sub	r3, r0, #4
   17094:	add	r1, r0, #252	; 0xfc
   17098:	mov	r2, #0
   1709c:	str	r2, [r3, #4]!
   170a0:	cmp	r1, r3
   170a4:	bne	1709c <__assert_fail@plt+0x60e0>
   170a8:	subs	r7, r7, #1
   170ac:	bne	17064 <__assert_fail@plt+0x60a8>
   170b0:	ldr	r2, [sp, #20]
   170b4:	ldr	r0, [sp, #4]
   170b8:	ldr	r3, [sl]
   170bc:	cmp	r2, r3
   170c0:	add	r0, r8, r0, lsl #2
   170c4:	bne	17164 <__assert_fail@plt+0x61a8>
   170c8:	add	sp, sp, #28
   170cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170d0:	sub	r4, r0, #4
   170d4:	add	fp, r0, #252	; 0xfc
   170d8:	ldr	r0, [r6]
   170dc:	bl	19908 <__assert_fail@plt+0x894c>
   170e0:	str	r0, [r4, #4]!
   170e4:	cmp	r4, fp
   170e8:	bne	170d8 <__assert_fail@plt+0x611c>
   170ec:	ldrsh	r1, [r9, #4]
   170f0:	b	1703c <__assert_fail@plt+0x6080>
   170f4:	mov	r7, r0
   170f8:	mov	r0, #12
   170fc:	bl	1828c <__assert_fail@plt+0x72d0>
   17100:	mov	r3, #0
   17104:	mov	r4, r0
   17108:	str	r0, [r6, r7, lsl #2]
   1710c:	str	r3, [r0]
   17110:	str	r3, [r0, #8]
   17114:	strb	r3, [r0, #4]
   17118:	mov	r0, #8
   1711c:	bl	1828c <__assert_fail@plt+0x72d0>
   17120:	mov	r3, #0
   17124:	mov	r1, r3
   17128:	str	r0, [r4]
   1712c:	mov	r9, r0
   17130:	str	r3, [r0]
   17134:	strh	r3, [r0, #4]
   17138:	b	16fc8 <__assert_fail@plt+0x600c>
   1713c:	ldr	r8, [r9]
   17140:	b	17054 <__assert_fail@plt+0x6098>
   17144:	sub	r6, r0, #4
   17148:	add	r9, r0, #252	; 0xfc
   1714c:	ldr	r0, [r4]
   17150:	bl	19908 <__assert_fail@plt+0x894c>
   17154:	str	r0, [r6, #4]!
   17158:	cmp	r6, r9
   1715c:	bne	1714c <__assert_fail@plt+0x6190>
   17160:	b	1705c <__assert_fail@plt+0x60a0>
   17164:	bl	10e24 <__stack_chk_fail@plt>
   17168:	andeq	r1, r3, r4, asr r2
   1716c:	andeq	r0, r3, r0, lsl lr
   17170:	andeq	r1, r3, r8, asr #5
   17174:	cmp	r0, #3
   17178:	push	{r4, r5, r6, lr}
   1717c:	ble	171a8 <__assert_fail@plt+0x61ec>
   17180:	bl	16f48 <__assert_fail@plt+0x5f8c>
   17184:	subs	r4, r0, #0
   17188:	popeq	{r4, r5, r6, pc}
   1718c:	bl	19840 <__assert_fail@plt+0x8884>
   17190:	ldr	r3, [pc, #560]	; 173c8 <__assert_fail@plt+0x640c>
   17194:	ldr	r3, [r3]
   17198:	ldr	r0, [r3]
   1719c:	bl	19908 <__assert_fail@plt+0x894c>
   171a0:	str	r0, [r4]
   171a4:	pop	{r4, r5, r6, pc}
   171a8:	ldr	r5, [pc, #536]	; 173c8 <__assert_fail@plt+0x640c>
   171ac:	mov	r4, r0
   171b0:	ldr	r3, [r5]
   171b4:	ldr	r0, [r3]
   171b8:	bl	19960 <__assert_fail@plt+0x89a4>
   171bc:	cmp	r0, #0
   171c0:	beq	171e4 <__assert_fail@plt+0x6228>
   171c4:	cmp	r4, #3
   171c8:	ldrls	pc, [pc, r4, lsl #2]
   171cc:	b	171e0 <__assert_fail@plt+0x6224>
   171d0:	andeq	r7, r1, r4, asr r2
   171d4:	andeq	r7, r1, ip, lsr r2
   171d8:	andeq	r7, r1, ip, ror #4
   171dc:	andeq	r7, r1, r8, lsr #4
   171e0:	pop	{r4, r5, r6, pc}
   171e4:	ldr	r3, [r5]
   171e8:	ldr	r0, [r3]
   171ec:	bl	1b19c <__assert_fail@plt+0xa1e0>
   171f0:	ldr	r3, [r5]
   171f4:	mov	r6, r0
   171f8:	ldr	r0, [r3]
   171fc:	bl	19974 <__assert_fail@plt+0x89b8>
   17200:	cmp	r6, #0
   17204:	cmpeq	r0, #0
   17208:	beq	172e0 <__assert_fail@plt+0x6324>
   1720c:	cmp	r4, #3
   17210:	ldrls	pc, [pc, r4, lsl #2]
   17214:	b	171e0 <__assert_fail@plt+0x6224>
   17218:	andeq	r7, r1, r0, asr #5
   1721c:	andeq	r7, r1, r0, lsr #5
   17220:	andeq	r7, r1, r8, ror r2
   17224:	andeq	r7, r1, r4, lsl #5
   17228:	ldr	r3, [pc, #412]	; 173cc <__assert_fail@plt+0x6410>
   1722c:	mvn	r2, #0
   17230:	str	r2, [r3]
   17234:	pop	{r4, r5, r6, lr}
   17238:	b	10f80 <unstifle_history@plt>
   1723c:	ldr	r0, [pc, #396]	; 173d0 <__assert_fail@plt+0x6414>
   17240:	bl	18dbc <__assert_fail@plt+0x7e00>
   17244:	mov	r6, #2
   17248:	ldr	r3, [pc, #388]	; 173d4 <__assert_fail@plt+0x6418>
   1724c:	str	r6, [r3]
   17250:	pop	{r4, r5, r6, pc}
   17254:	ldr	r0, [pc, #380]	; 173d8 <__assert_fail@plt+0x641c>
   17258:	bl	18dbc <__assert_fail@plt+0x7e00>
   1725c:	mov	r6, #2
   17260:	ldr	r3, [pc, #372]	; 173dc <__assert_fail@plt+0x6420>
   17264:	str	r6, [r3]
   17268:	pop	{r4, r5, r6, pc}
   1726c:	ldr	r0, [pc, #364]	; 173e0 <__assert_fail@plt+0x6424>
   17270:	bl	18dbc <__assert_fail@plt+0x7e00>
   17274:	mov	r6, #0
   17278:	ldr	r3, [pc, #356]	; 173e4 <__assert_fail@plt+0x6428>
   1727c:	str	r6, [r3]
   17280:	pop	{r4, r5, r6, pc}
   17284:	ldr	r3, [pc, #320]	; 173cc <__assert_fail@plt+0x6410>
   17288:	cmp	r6, #0
   1728c:	str	r6, [r3]
   17290:	blt	17234 <__assert_fail@plt+0x6278>
   17294:	mov	r0, r6
   17298:	pop	{r4, r5, r6, lr}
   1729c:	b	10d88 <stifle_history@plt>
   172a0:	cmp	r6, #1
   172a4:	bgt	17248 <__assert_fail@plt+0x628c>
   172a8:	ldr	r3, [pc, #292]	; 173d4 <__assert_fail@plt+0x6418>
   172ac:	mov	r2, #2
   172b0:	ldr	r0, [pc, #304]	; 173e8 <__assert_fail@plt+0x642c>
   172b4:	str	r2, [r3]
   172b8:	pop	{r4, r5, r6, lr}
   172bc:	b	18dbc <__assert_fail@plt+0x7e00>
   172c0:	cmp	r6, #1
   172c4:	bgt	17384 <__assert_fail@plt+0x63c8>
   172c8:	ldr	r3, [pc, #268]	; 173dc <__assert_fail@plt+0x6420>
   172cc:	mov	r2, #2
   172d0:	ldr	r0, [pc, #276]	; 173ec <__assert_fail@plt+0x6430>
   172d4:	str	r2, [r3]
   172d8:	pop	{r4, r5, r6, lr}
   172dc:	b	18dbc <__assert_fail@plt+0x7e00>
   172e0:	cmp	r4, #3
   172e4:	ldrls	pc, [pc, r4, lsl #2]
   172e8:	b	171e0 <__assert_fail@plt+0x6224>
   172ec:	andeq	r7, r1, r8, lsr #6
   172f0:	andeq	r7, r1, ip, lsl #6
   172f4:	andeq	r7, r1, r0, asr r3
   172f8:	strdeq	r7, [r1], -ip
   172fc:	ldr	r0, [pc, #236]	; 173f0 <__assert_fail@plt+0x6434>
   17300:	bl	18dbc <__assert_fail@plt+0x7e00>
   17304:	pop	{r4, r5, r6, lr}
   17308:	b	10f80 <unstifle_history@plt>
   1730c:	ldr	r2, [pc, #192]	; 173d4 <__assert_fail@plt+0x6418>
   17310:	mvn	r3, #-2147483648	; 0x80000000
   17314:	mov	r1, r3
   17318:	ldr	r0, [pc, #212]	; 173f4 <__assert_fail@plt+0x6438>
   1731c:	str	r3, [r2]
   17320:	pop	{r4, r5, r6, lr}
   17324:	b	18dbc <__assert_fail@plt+0x7e00>
   17328:	ldr	r3, [pc, #200]	; 173f8 <__assert_fail@plt+0x643c>
   1732c:	ldr	r3, [r3]
   17330:	cmp	r3, #0
   17334:	bne	1736c <__assert_fail@plt+0x63b0>
   17338:	ldr	r3, [pc, #156]	; 173dc <__assert_fail@plt+0x6420>
   1733c:	mov	r2, #36	; 0x24
   17340:	ldr	r0, [pc, #180]	; 173fc <__assert_fail@plt+0x6440>
   17344:	str	r2, [r3]
   17348:	pop	{r4, r5, r6, lr}
   1734c:	b	18dbc <__assert_fail@plt+0x7e00>
   17350:	ldr	r2, [pc, #140]	; 173e4 <__assert_fail@plt+0x6428>
   17354:	mvn	r3, #-2147483648	; 0x80000000
   17358:	mov	r1, r3
   1735c:	ldr	r0, [pc, #156]	; 17400 <__assert_fail@plt+0x6444>
   17360:	str	r3, [r2]
   17364:	pop	{r4, r5, r6, lr}
   17368:	b	18dbc <__assert_fail@plt+0x7e00>
   1736c:	ldr	r3, [pc, #104]	; 173dc <__assert_fail@plt+0x6420>
   17370:	mov	r2, #16
   17374:	ldr	r0, [pc, #136]	; 17404 <__assert_fail@plt+0x6448>
   17378:	str	r2, [r3]
   1737c:	pop	{r4, r5, r6, lr}
   17380:	b	18dbc <__assert_fail@plt+0x7e00>
   17384:	cmp	r6, #16
   17388:	ble	17260 <__assert_fail@plt+0x62a4>
   1738c:	ldr	r3, [pc, #100]	; 173f8 <__assert_fail@plt+0x643c>
   17390:	ldr	r3, [r3]
   17394:	cmp	r3, #0
   17398:	bne	1736c <__assert_fail@plt+0x63b0>
   1739c:	cmp	r6, #36	; 0x24
   173a0:	bgt	17338 <__assert_fail@plt+0x637c>
   173a4:	cmp	r6, #15
   173a8:	ble	17260 <__assert_fail@plt+0x62a4>
   173ac:	ldr	r3, [pc, #84]	; 17408 <__assert_fail@plt+0x644c>
   173b0:	ldr	r3, [r3]
   173b4:	cmp	r3, #0
   173b8:	beq	17260 <__assert_fail@plt+0x62a4>
   173bc:	ldr	r0, [pc, #72]	; 1740c <__assert_fail@plt+0x6450>
   173c0:	bl	18dbc <__assert_fail@plt+0x7e00>
   173c4:	b	17260 <__assert_fail@plt+0x62a4>
   173c8:			; <UNDEFINED> instruction: 0x000312bc
   173cc:	andeq	r1, r3, r4, ror #4
   173d0:	andeq	pc, r1, r4, lsr r8	; <UNPREDICTABLE>
   173d4:	andeq	r1, r3, r0, lsl #5
   173d8:	andeq	pc, r1, r8, lsl r8	; <UNPREDICTABLE>
   173dc:	andeq	r1, r3, r4, lsr #5
   173e0:	andeq	pc, r1, r0, asr r8	; <UNPREDICTABLE>
   173e4:	muleq	r3, r8, r2
   173e8:	andeq	pc, r1, r4, lsl #18
   173ec:	andeq	pc, r1, ip, ror #16
   173f0:	andeq	pc, r1, ip, lsr r9	; <UNPREDICTABLE>
   173f4:	andeq	pc, r1, r8, ror #17
   173f8:	andeq	r1, r3, ip, ror #3
   173fc:	andeq	pc, r1, r4, lsr #17
   17400:	andeq	pc, r1, r0, lsr #18
   17404:	andeq	pc, r1, r8, lsl #17
   17408:	strdeq	r1, [r3], -r0
   1740c:	andeq	pc, r1, r0, asr #17
   17410:	push	{r4, r5, r6, lr}
   17414:	mov	r4, r0
   17418:	mov	r0, #2
   1741c:	bl	16ef4 <__assert_fail@plt+0x5f38>
   17420:	cmp	r0, #0
   17424:	popeq	{r4, r5, r6, pc}
   17428:	ldr	r5, [pc, #164]	; 174d4 <__assert_fail@plt+0x6518>
   1742c:	ldr	r3, [r5]
   17430:	ldr	r3, [r3, #4]
   17434:	ldr	r0, [r3]
   17438:	bl	1b19c <__assert_fail@plt+0xa1e0>
   1743c:	cmp	r0, #16777216	; 0x1000000
   17440:	mov	r6, r0
   17444:	bcs	17468 <__assert_fail@plt+0x64ac>
   17448:	cmp	r0, #0
   1744c:	bne	17480 <__assert_fail@plt+0x64c4>
   17450:	ldr	r3, [r5]
   17454:	ldr	r3, [r3, #4]
   17458:	ldr	r0, [r3]
   1745c:	bl	19974 <__assert_fail@plt+0x89b8>
   17460:	cmp	r0, #0
   17464:	bne	17480 <__assert_fail@plt+0x64c4>
   17468:	ldr	r3, [pc, #104]	; 174d8 <__assert_fail@plt+0x651c>
   1746c:	ldr	r0, [pc, #104]	; 174dc <__assert_fail@plt+0x6520>
   17470:	ldr	r3, [r3]
   17474:	ldr	r1, [r3, r4, lsl #2]
   17478:	pop	{r4, r5, r6, lr}
   1747c:	b	18cf8 <__assert_fail@plt+0x7d3c>
   17480:	mov	r0, r4
   17484:	mov	r1, r6
   17488:	bl	16f8c <__assert_fail@plt+0x5fd0>
   1748c:	subs	r4, r0, #0
   17490:	popeq	{r4, r5, r6, pc}
   17494:	bl	19840 <__assert_fail@plt+0x8884>
   17498:	ldr	r3, [r5]
   1749c:	ldr	r0, [r3]
   174a0:	bl	19908 <__assert_fail@plt+0x894c>
   174a4:	ldr	r3, [r5]
   174a8:	str	r0, [r4]
   174ac:	ldr	r0, [r3, #4]
   174b0:	bl	19840 <__assert_fail@plt+0x8884>
   174b4:	ldr	r3, [r5]
   174b8:	mov	r0, r3
   174bc:	ldr	r2, [r3, #4]
   174c0:	ldr	r3, [r3]
   174c4:	str	r3, [r2]
   174c8:	bl	19918 <__assert_fail@plt+0x895c>
   174cc:	pop	{r4, r5, r6, lr}
   174d0:	b	16e60 <__assert_fail@plt+0x5ea4>
   174d4:			; <UNDEFINED> instruction: 0x000312bc
   174d8:	andeq	r1, r3, r8, asr r2
   174dc:	andeq	pc, r1, r0, ror #18
   174e0:	push	{r4, lr}
   174e4:	cmp	r0, #3
   174e8:	ldrls	pc, [pc, r0, lsl #2]
   174ec:	b	17560 <__assert_fail@plt+0x65a4>
   174f0:	andeq	r7, r1, ip, asr #10
   174f4:	andeq	r7, r1, r8, lsr r5
   174f8:	andeq	r7, r1, r4, lsr #10
   174fc:	andeq	r7, r1, r0, lsl #10
   17500:	ldr	r3, [pc, #120]	; 17580 <__assert_fail@plt+0x65c4>
   17504:	ldr	r0, [r3]
   17508:	bl	16e94 <__assert_fail@plt+0x5ed8>
   1750c:	ldr	r2, [pc, #112]	; 17584 <__assert_fail@plt+0x65c8>
   17510:	ldr	r3, [pc, #112]	; 17588 <__assert_fail@plt+0x65cc>
   17514:	ldr	r1, [r2]
   17518:	pop	{r4, lr}
   1751c:	ldr	r0, [r3]
   17520:	b	1b3fc <__assert_fail@plt+0xa440>
   17524:	ldr	r3, [pc, #84]	; 17580 <__assert_fail@plt+0x65c4>
   17528:	ldr	r0, [r3]
   1752c:	bl	16e94 <__assert_fail@plt+0x5ed8>
   17530:	ldr	r2, [pc, #84]	; 1758c <__assert_fail@plt+0x65d0>
   17534:	b	17510 <__assert_fail@plt+0x6554>
   17538:	ldr	r3, [pc, #64]	; 17580 <__assert_fail@plt+0x65c4>
   1753c:	ldr	r0, [r3]
   17540:	bl	16e94 <__assert_fail@plt+0x5ed8>
   17544:	ldr	r2, [pc, #68]	; 17590 <__assert_fail@plt+0x65d4>
   17548:	b	17510 <__assert_fail@plt+0x6554>
   1754c:	ldr	r3, [pc, #44]	; 17580 <__assert_fail@plt+0x65c4>
   17550:	ldr	r0, [r3]
   17554:	bl	16e94 <__assert_fail@plt+0x5ed8>
   17558:	ldr	r2, [pc, #52]	; 17594 <__assert_fail@plt+0x65d8>
   1755c:	b	17510 <__assert_fail@plt+0x6554>
   17560:	ldr	r3, [pc, #48]	; 17598 <__assert_fail@plt+0x65dc>
   17564:	pop	{r4, lr}
   17568:	ldr	r3, [r3]
   1756c:	ldr	r3, [r3, r0, lsl #2]
   17570:	cmp	r3, #0
   17574:	ldreq	r3, [pc, #4]	; 17580 <__assert_fail@plt+0x65c4>
   17578:	ldr	r0, [r3]
   1757c:	b	16e94 <__assert_fail@plt+0x5ed8>
   17580:	andeq	r1, r3, r8, asr #5
   17584:	andeq	r1, r3, r4, ror #4
   17588:			; <UNDEFINED> instruction: 0x000312bc
   1758c:	muleq	r3, r8, r2
   17590:	andeq	r1, r3, r0, lsl #5
   17594:	andeq	r1, r3, r4, lsr #5
   17598:			; <UNDEFINED> instruction: 0x000312b4
   1759c:	push	{r4, r5, r6, lr}
   175a0:	mov	r4, r0
   175a4:	mov	r0, #1
   175a8:	bl	16ef4 <__assert_fail@plt+0x5f38>
   175ac:	cmp	r0, #0
   175b0:	popeq	{r4, r5, r6, pc}
   175b4:	ldr	r6, [pc, #108]	; 17628 <__assert_fail@plt+0x666c>
   175b8:	ldr	r3, [r6]
   175bc:	ldr	r0, [r3]
   175c0:	bl	1b19c <__assert_fail@plt+0xa1e0>
   175c4:	cmp	r0, #16777216	; 0x1000000
   175c8:	mov	r5, r0
   175cc:	bcs	175ec <__assert_fail@plt+0x6630>
   175d0:	cmp	r0, #0
   175d4:	bne	17604 <__assert_fail@plt+0x6648>
   175d8:	ldr	r3, [r6]
   175dc:	ldr	r0, [r3]
   175e0:	bl	19974 <__assert_fail@plt+0x89b8>
   175e4:	cmp	r0, #0
   175e8:	bne	17604 <__assert_fail@plt+0x6648>
   175ec:	ldr	r3, [pc, #56]	; 1762c <__assert_fail@plt+0x6670>
   175f0:	ldr	r0, [pc, #56]	; 17630 <__assert_fail@plt+0x6674>
   175f4:	ldr	r3, [r3]
   175f8:	ldr	r1, [r3, r4, lsl #2]
   175fc:	pop	{r4, r5, r6, lr}
   17600:	b	18cf8 <__assert_fail@plt+0x7d3c>
   17604:	mov	r0, r4
   17608:	mov	r1, r5
   1760c:	bl	16f8c <__assert_fail@plt+0x5fd0>
   17610:	subs	r4, r0, #0
   17614:	popeq	{r4, r5, r6, pc}
   17618:	bl	16e60 <__assert_fail@plt+0x5ea4>
   1761c:	ldr	r0, [r4]
   17620:	pop	{r4, r5, r6, lr}
   17624:	b	16e94 <__assert_fail@plt+0x5ed8>
   17628:			; <UNDEFINED> instruction: 0x000312bc
   1762c:	andeq	r1, r3, r8, asr r2
   17630:	andeq	pc, r1, r0, ror #18
   17634:	push	{r4, lr}
   17638:	cmp	r0, #3
   1763c:	ldrls	pc, [pc, r0, lsl #2]
   17640:	b	176c8 <__assert_fail@plt+0x670c>
   17644:	andeq	r7, r1, ip, lsr #13
   17648:	muleq	r1, r0, r6
   1764c:	andeq	r7, r1, r4, ror r6
   17650:	andeq	r7, r1, r4, asr r6
   17654:	ldr	r3, [pc, #180]	; 17710 <__assert_fail@plt+0x6754>
   17658:	ldr	r0, [r3]
   1765c:	sub	r0, r0, #1
   17660:	cmp	r0, #0
   17664:	str	r0, [r3]
   17668:	blt	176ec <__assert_fail@plt+0x6730>
   1766c:	pop	{r4, lr}
   17670:	b	10d88 <stifle_history@plt>
   17674:	ldr	r2, [pc, #152]	; 17714 <__assert_fail@plt+0x6758>
   17678:	ldr	r3, [r2]
   1767c:	cmp	r3, #0
   17680:	ble	17704 <__assert_fail@plt+0x6748>
   17684:	sub	r3, r3, #1
   17688:	str	r3, [r2]
   1768c:	pop	{r4, pc}
   17690:	ldr	r2, [pc, #128]	; 17718 <__assert_fail@plt+0x675c>
   17694:	ldr	r3, [r2]
   17698:	cmp	r3, #2
   1769c:	bgt	17684 <__assert_fail@plt+0x66c8>
   176a0:	ldr	r0, [pc, #116]	; 1771c <__assert_fail@plt+0x6760>
   176a4:	pop	{r4, lr}
   176a8:	b	18dbc <__assert_fail@plt+0x7e00>
   176ac:	ldr	r2, [pc, #108]	; 17720 <__assert_fail@plt+0x6764>
   176b0:	ldr	r3, [r2]
   176b4:	cmp	r3, #2
   176b8:	bgt	17684 <__assert_fail@plt+0x66c8>
   176bc:	ldr	r0, [pc, #96]	; 17724 <__assert_fail@plt+0x6768>
   176c0:	pop	{r4, lr}
   176c4:	b	18dbc <__assert_fail@plt+0x7e00>
   176c8:	bl	16f48 <__assert_fail@plt+0x5f8c>
   176cc:	subs	r2, r0, #0
   176d0:	popeq	{r4, pc}
   176d4:	ldr	r1, [pc, #76]	; 17728 <__assert_fail@plt+0x676c>
   176d8:	mov	r3, #0
   176dc:	ldr	r0, [r2]
   176e0:	ldr	r1, [r1]
   176e4:	pop	{r4, lr}
   176e8:	b	19a60 <__assert_fail@plt+0x8aa4>
   176ec:	mvn	r2, #0
   176f0:	ldr	r0, [pc, #52]	; 1772c <__assert_fail@plt+0x6770>
   176f4:	str	r2, [r3]
   176f8:	bl	18dbc <__assert_fail@plt+0x7e00>
   176fc:	pop	{r4, lr}
   17700:	b	10f80 <unstifle_history@plt>
   17704:	ldr	r0, [pc, #36]	; 17730 <__assert_fail@plt+0x6774>
   17708:	pop	{r4, lr}
   1770c:	b	18dbc <__assert_fail@plt+0x7e00>
   17710:	andeq	r1, r3, r4, ror #4
   17714:	muleq	r3, r8, r2
   17718:	andeq	r1, r3, r0, lsl #5
   1771c:	muleq	r1, ip, r9
   17720:	andeq	r1, r3, r4, lsr #5
   17724:	andeq	pc, r1, r4, lsl #19
   17728:	andeq	r1, r3, r0, asr #5
   1772c:	ldrdeq	pc, [r1], -r8
   17730:			; <UNDEFINED> instruction: 0x0001f9b4
   17734:	push	{r4, r5, r6, lr}
   17738:	mov	r4, r0
   1773c:	mov	r0, #1
   17740:	bl	16ef4 <__assert_fail@plt+0x5f38>
   17744:	cmp	r0, #0
   17748:	popeq	{r4, r5, r6, pc}
   1774c:	ldr	r6, [pc, #124]	; 177d0 <__assert_fail@plt+0x6814>
   17750:	ldr	r3, [r6]
   17754:	ldr	r0, [r3]
   17758:	bl	1b19c <__assert_fail@plt+0xa1e0>
   1775c:	cmp	r0, #16777216	; 0x1000000
   17760:	mov	r5, r0
   17764:	bcs	17784 <__assert_fail@plt+0x67c8>
   17768:	cmp	r0, #0
   1776c:	bne	1779c <__assert_fail@plt+0x67e0>
   17770:	ldr	r3, [r6]
   17774:	ldr	r0, [r3]
   17778:	bl	19974 <__assert_fail@plt+0x89b8>
   1777c:	cmp	r0, #0
   17780:	bne	1779c <__assert_fail@plt+0x67e0>
   17784:	ldr	r3, [pc, #72]	; 177d4 <__assert_fail@plt+0x6818>
   17788:	ldr	r0, [pc, #72]	; 177d8 <__assert_fail@plt+0x681c>
   1778c:	ldr	r3, [r3]
   17790:	ldr	r1, [r3, r4, lsl #2]
   17794:	pop	{r4, r5, r6, lr}
   17798:	b	18cf8 <__assert_fail@plt+0x7d3c>
   1779c:	mov	r0, r4
   177a0:	mov	r1, r5
   177a4:	bl	16f8c <__assert_fail@plt+0x5fd0>
   177a8:	subs	r4, r0, #0
   177ac:	popeq	{r4, r5, r6, pc}
   177b0:	bl	16e60 <__assert_fail@plt+0x5ea4>
   177b4:	ldr	r1, [pc, #32]	; 177dc <__assert_fail@plt+0x6820>
   177b8:	mov	r2, r4
   177bc:	ldr	r0, [r4]
   177c0:	mov	r3, #0
   177c4:	ldr	r1, [r1]
   177c8:	pop	{r4, r5, r6, lr}
   177cc:	b	19a60 <__assert_fail@plt+0x8aa4>
   177d0:			; <UNDEFINED> instruction: 0x000312bc
   177d4:	andeq	r1, r3, r8, asr r2
   177d8:	andeq	pc, r1, r0, ror #18
   177dc:	andeq	r1, r3, r0, asr #5
   177e0:	push	{r4, lr}
   177e4:	cmp	r0, #3
   177e8:	ldrls	pc, [pc, r0, lsl #2]
   177ec:	b	17874 <__assert_fail@plt+0x68b8>
   177f0:	andeq	r7, r1, r8, asr r8
   177f4:	andeq	r7, r1, ip, lsr r8
   177f8:	andeq	r7, r1, r0, lsr #16
   177fc:	andeq	r7, r1, r0, lsl #16
   17800:	ldr	r3, [pc, #180]	; 178bc <__assert_fail@plt+0x6900>
   17804:	ldr	r0, [r3]
   17808:	add	r0, r0, #1
   1780c:	cmp	r0, #0
   17810:	str	r0, [r3]
   17814:	ble	17898 <__assert_fail@plt+0x68dc>
   17818:	pop	{r4, lr}
   1781c:	b	10d88 <stifle_history@plt>
   17820:	ldr	r2, [pc, #152]	; 178c0 <__assert_fail@plt+0x6904>
   17824:	ldr	r3, [r2]
   17828:	cmn	r3, #-2147483647	; 0x80000001
   1782c:	beq	178b0 <__assert_fail@plt+0x68f4>
   17830:	add	r3, r3, #1
   17834:	str	r3, [r2]
   17838:	pop	{r4, pc}
   1783c:	ldr	r2, [pc, #128]	; 178c4 <__assert_fail@plt+0x6908>
   17840:	ldr	r3, [r2]
   17844:	cmn	r3, #-2147483647	; 0x80000001
   17848:	bne	17830 <__assert_fail@plt+0x6874>
   1784c:	ldr	r0, [pc, #116]	; 178c8 <__assert_fail@plt+0x690c>
   17850:	pop	{r4, lr}
   17854:	b	18dbc <__assert_fail@plt+0x7e00>
   17858:	ldr	r2, [pc, #108]	; 178cc <__assert_fail@plt+0x6910>
   1785c:	ldr	r3, [r2]
   17860:	cmp	r3, #15
   17864:	ble	17830 <__assert_fail@plt+0x6874>
   17868:	ldr	r0, [pc, #96]	; 178d0 <__assert_fail@plt+0x6914>
   1786c:	pop	{r4, lr}
   17870:	b	18dbc <__assert_fail@plt+0x7e00>
   17874:	bl	16f48 <__assert_fail@plt+0x5f8c>
   17878:	subs	r2, r0, #0
   1787c:	popeq	{r4, pc}
   17880:	ldr	r1, [pc, #76]	; 178d4 <__assert_fail@plt+0x6918>
   17884:	mov	r3, #0
   17888:	ldr	r0, [r2]
   1788c:	ldr	r1, [r1]
   17890:	pop	{r4, lr}
   17894:	b	1a3a4 <__assert_fail@plt+0x93e8>
   17898:	mvn	r2, #0
   1789c:	ldr	r0, [pc, #52]	; 178d8 <__assert_fail@plt+0x691c>
   178a0:	str	r2, [r3]
   178a4:	bl	18dbc <__assert_fail@plt+0x7e00>
   178a8:	pop	{r4, lr}
   178ac:	b	10f80 <unstifle_history@plt>
   178b0:	ldr	r0, [pc, #36]	; 178dc <__assert_fail@plt+0x6920>
   178b4:	pop	{r4, lr}
   178b8:	b	18dbc <__assert_fail@plt+0x7e00>
   178bc:	andeq	r1, r3, r4, ror #4
   178c0:	muleq	r3, r8, r2
   178c4:	andeq	r1, r3, r0, lsl #5
   178c8:	andeq	pc, r1, r4, lsl sl	; <UNPREDICTABLE>
   178cc:	andeq	r1, r3, r4, lsr #5
   178d0:	andeq	pc, r1, r0, lsl #20
   178d4:	andeq	r1, r3, r0, asr #5
   178d8:	andeq	pc, r1, ip, lsr sl	; <UNPREDICTABLE>
   178dc:	andeq	pc, r1, r8, lsr #20
   178e0:	push	{r4, r5, r6, lr}
   178e4:	mov	r4, r0
   178e8:	mov	r0, #1
   178ec:	bl	16ef4 <__assert_fail@plt+0x5f38>
   178f0:	cmp	r0, #0
   178f4:	popeq	{r4, r5, r6, pc}
   178f8:	ldr	r6, [pc, #124]	; 1797c <__assert_fail@plt+0x69c0>
   178fc:	ldr	r3, [r6]
   17900:	ldr	r0, [r3]
   17904:	bl	1b19c <__assert_fail@plt+0xa1e0>
   17908:	cmp	r0, #16777216	; 0x1000000
   1790c:	mov	r5, r0
   17910:	bcs	17930 <__assert_fail@plt+0x6974>
   17914:	cmp	r0, #0
   17918:	bne	17948 <__assert_fail@plt+0x698c>
   1791c:	ldr	r3, [r6]
   17920:	ldr	r0, [r3]
   17924:	bl	19974 <__assert_fail@plt+0x89b8>
   17928:	cmp	r0, #0
   1792c:	bne	17948 <__assert_fail@plt+0x698c>
   17930:	ldr	r3, [pc, #72]	; 17980 <__assert_fail@plt+0x69c4>
   17934:	ldr	r0, [pc, #72]	; 17984 <__assert_fail@plt+0x69c8>
   17938:	ldr	r3, [r3]
   1793c:	ldr	r1, [r3, r4, lsl #2]
   17940:	pop	{r4, r5, r6, lr}
   17944:	b	18cf8 <__assert_fail@plt+0x7d3c>
   17948:	mov	r0, r4
   1794c:	mov	r1, r5
   17950:	bl	16f8c <__assert_fail@plt+0x5fd0>
   17954:	subs	r4, r0, #0
   17958:	popeq	{r4, r5, r6, pc}
   1795c:	bl	16e60 <__assert_fail@plt+0x5ea4>
   17960:	ldr	r1, [pc, #32]	; 17988 <__assert_fail@plt+0x69cc>
   17964:	mov	r2, r4
   17968:	ldr	r0, [r4]
   1796c:	mov	r3, #0
   17970:	ldr	r1, [r1]
   17974:	pop	{r4, r5, r6, lr}
   17978:	b	1a3a4 <__assert_fail@plt+0x93e8>
   1797c:			; <UNDEFINED> instruction: 0x000312bc
   17980:	andeq	r1, r3, r8, asr r2
   17984:	andeq	pc, r1, r0, ror #18
   17988:	andeq	r1, r3, r0, asr #5
   1798c:	push	{r4, r5, r6, lr}
   17990:	subs	r4, r0, #0
   17994:	ble	179c4 <__assert_fail@plt+0x6a08>
   17998:	mov	r0, #8
   1799c:	bl	1828c <__assert_fail@plt+0x72d0>
   179a0:	ldr	r6, [pc, #80]	; 179f8 <__assert_fail@plt+0x6a3c>
   179a4:	ldr	r3, [r6]
   179a8:	ldr	r3, [r3, r4, lsl #2]
   179ac:	str	r3, [r0, #4]
   179b0:	mov	r5, r0
   179b4:	bl	19918 <__assert_fail@plt+0x895c>
   179b8:	ldr	r3, [r6]
   179bc:	str	r5, [r3, r4, lsl #2]
   179c0:	pop	{r4, r5, r6, pc}
   179c4:	mov	r0, #12
   179c8:	bl	1828c <__assert_fail@plt+0x72d0>
   179cc:	ldr	r3, [pc, #40]	; 179fc <__assert_fail@plt+0x6a40>
   179d0:	rsb	r4, r4, r4, lsl #30
   179d4:	mov	r2, #0
   179d8:	ldr	r3, [r3]
   179dc:	lsl	r4, r4, #2
   179e0:	ldr	r1, [r3, r4]
   179e4:	str	r2, [r0]
   179e8:	str	r1, [r0, #8]
   179ec:	strb	r2, [r0, #4]
   179f0:	str	r0, [r3, r4]
   179f4:	pop	{r4, r5, r6, pc}
   179f8:			; <UNDEFINED> instruction: 0x000312b4
   179fc:	andeq	r1, r3, r4, asr r2
   17a00:	push	{r4, r5, r6, r7, r8, lr}
   17a04:	subs	r7, r0, #0
   17a08:	popeq	{r4, r5, r6, r7, r8, pc}
   17a0c:	cmp	r1, #1
   17a10:	ble	17a40 <__assert_fail@plt+0x6a84>
   17a14:	sub	r5, r1, #1
   17a18:	sub	r4, r7, #4
   17a1c:	add	r6, r7, #252	; 0xfc
   17a20:	ldr	r0, [r4, #4]!
   17a24:	mov	r1, r5
   17a28:	bl	17a00 <__assert_fail@plt+0x6a44>
   17a2c:	cmp	r4, r6
   17a30:	bne	17a20 <__assert_fail@plt+0x6a64>
   17a34:	mov	r0, r7
   17a38:	pop	{r4, r5, r6, r7, r8, lr}
   17a3c:	b	10dd0 <free@plt>
   17a40:	mov	r4, r7
   17a44:	add	r5, r7, #256	; 0x100
   17a48:	mov	r0, r4
   17a4c:	add	r4, r4, #4
   17a50:	bl	19840 <__assert_fail@plt+0x8884>
   17a54:	cmp	r4, r5
   17a58:	bne	17a48 <__assert_fail@plt+0x6a8c>
   17a5c:	mov	r0, r7
   17a60:	pop	{r4, r5, r6, r7, r8, lr}
   17a64:	b	10dd0 <free@plt>
   17a68:	push	{r4, r5, r6, r7, r8, lr}
   17a6c:	subs	r4, r0, #0
   17a70:	popeq	{r4, r5, r6, r7, r8, pc}
   17a74:	ldr	r7, [pc, #148]	; 17b10 <__assert_fail@plt+0x6b54>
   17a78:	ldr	r6, [pc, #148]	; 17b14 <__assert_fail@plt+0x6b58>
   17a7c:	b	17ab0 <__assert_fail@plt+0x6af4>
   17a80:	ldr	r2, [r6]
   17a84:	ldr	r5, [r2, r3, lsl #2]
   17a88:	subs	r0, r5, #0
   17a8c:	beq	17aa4 <__assert_fail@plt+0x6ae8>
   17a90:	ldr	r1, [r5, #4]
   17a94:	str	r1, [r2, r3, lsl #2]
   17a98:	bl	19840 <__assert_fail@plt+0x8884>
   17a9c:	mov	r0, r5
   17aa0:	bl	10dd0 <free@plt>
   17aa4:	ldr	r4, [r4, #8]
   17aa8:	cmp	r4, #0
   17aac:	popeq	{r4, r5, r6, r7, r8, pc}
   17ab0:	ldr	r3, [r4]
   17ab4:	cmp	r3, #0
   17ab8:	bgt	17a80 <__assert_fail@plt+0x6ac4>
   17abc:	ldr	r2, [r7]
   17ac0:	rsb	r3, r3, r3, lsl #30
   17ac4:	ldr	r5, [r2, r3, lsl #2]
   17ac8:	cmp	r5, #0
   17acc:	beq	17aa4 <__assert_fail@plt+0x6ae8>
   17ad0:	ldr	r1, [r5, #8]
   17ad4:	str	r1, [r2, r3, lsl #2]
   17ad8:	ldrb	r3, [r5, #4]
   17adc:	cmp	r3, #0
   17ae0:	bne	17b04 <__assert_fail@plt+0x6b48>
   17ae4:	ldr	r3, [r5]
   17ae8:	cmp	r3, #0
   17aec:	beq	17b04 <__assert_fail@plt+0x6b48>
   17af0:	ldr	r0, [r3]
   17af4:	ldrsh	r1, [r3, #4]
   17af8:	bl	17a00 <__assert_fail@plt+0x6a44>
   17afc:	ldr	r0, [r5]
   17b00:	bl	10dd0 <free@plt>
   17b04:	mov	r0, r5
   17b08:	bl	10dd0 <free@plt>
   17b0c:	b	17aa4 <__assert_fail@plt+0x6ae8>
   17b10:	andeq	r1, r3, r4, asr r2
   17b14:			; <UNDEFINED> instruction: 0x000312b4
   17b18:	ldr	r3, [pc, #420]	; 17cc4 <__assert_fail@plt+0x6d08>
   17b1c:	rsb	r1, r1, r1, lsl #3
   17b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b24:	mov	r5, r0
   17b28:	ldr	r3, [r3]
   17b2c:	sub	sp, sp, #12
   17b30:	add	r1, r3, r1, lsl #2
   17b34:	ldr	r7, [pc, #396]	; 17cc8 <__assert_fail@plt+0x6d0c>
   17b38:	ldr	r6, [pc, #396]	; 17ccc <__assert_fail@plt+0x6d10>
   17b3c:	ldr	r4, [r1, #20]
   17b40:	ldr	r9, [pc, #392]	; 17cd0 <__assert_fail@plt+0x6d14>
   17b44:	ldr	sl, [pc, #392]	; 17cd4 <__assert_fail@plt+0x6d18>
   17b48:	b	17b7c <__assert_fail@plt+0x6bc0>
   17b4c:	cmp	r0, #49	; 0x31
   17b50:	beq	17be4 <__assert_fail@plt+0x6c28>
   17b54:	cmp	fp, #0
   17b58:	bge	17bec <__assert_fail@plt+0x6c30>
   17b5c:	ldr	r2, [r9]
   17b60:	rsb	r3, fp, fp, lsl #30
   17b64:	ldr	r0, [pc, #364]	; 17cd8 <__assert_fail@plt+0x6d1c>
   17b68:	ldr	r1, [r2, r3, lsl #2]
   17b6c:	bl	18cf8 <__assert_fail@plt+0x7d3c>
   17b70:	add	r4, r4, #12
   17b74:	bl	16e60 <__assert_fail@plt+0x5ea4>
   17b78:	ldr	r4, [r4, #8]
   17b7c:	mov	r0, r5
   17b80:	bl	14b78 <__assert_fail@plt+0x3bbc>
   17b84:	cmp	r0, #58	; 0x3a
   17b88:	beq	17c00 <__assert_fail@plt+0x6c44>
   17b8c:	cmp	r4, #0
   17b90:	beq	17c08 <__assert_fail@plt+0x6c4c>
   17b94:	cmp	r0, #48	; 0x30
   17b98:	ldr	fp, [r4]
   17b9c:	bne	17b4c <__assert_fail@plt+0x6b90>
   17ba0:	cmp	fp, #0
   17ba4:	ble	17b54 <__assert_fail@plt+0x6b98>
   17ba8:	mov	r0, #8
   17bac:	bl	1828c <__assert_fail@plt+0x72d0>
   17bb0:	ldr	r8, [pc, #292]	; 17cdc <__assert_fail@plt+0x6d20>
   17bb4:	ldr	ip, [r8]
   17bb8:	ldr	lr, [ip, fp, lsl #2]
   17bbc:	mov	r2, r0
   17bc0:	ldr	r0, [sl]
   17bc4:	str	r2, [sp, #4]
   17bc8:	ldr	ip, [r0]
   17bcc:	stm	r2, {ip, lr}
   17bd0:	bl	19918 <__assert_fail@plt+0x895c>
   17bd4:	ldr	r1, [r8]
   17bd8:	ldr	r2, [sp, #4]
   17bdc:	str	r2, [r1, fp, lsl #2]
   17be0:	b	17b74 <__assert_fail@plt+0x6bb8>
   17be4:	cmp	fp, #0
   17be8:	blt	17c18 <__assert_fail@plt+0x6c5c>
   17bec:	ldr	r2, [r7]
   17bf0:	mov	r0, r6
   17bf4:	ldr	r1, [r2, fp, lsl #2]
   17bf8:	bl	18cf8 <__assert_fail@plt+0x7d3c>
   17bfc:	b	17b70 <__assert_fail@plt+0x6bb4>
   17c00:	cmp	r4, #0
   17c04:	beq	17c7c <__assert_fail@plt+0x6cc0>
   17c08:	ldr	r0, [pc, #208]	; 17ce0 <__assert_fail@plt+0x6d24>
   17c0c:	add	sp, sp, #12
   17c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c14:	b	18cf8 <__assert_fail@plt+0x7d3c>
   17c18:	ldr	r3, [sl]
   17c1c:	ldr	r0, [r3]
   17c20:	bl	1b19c <__assert_fail@plt+0xa1e0>
   17c24:	mov	r1, #0
   17c28:	mov	fp, r0
   17c2c:	bl	16f8c <__assert_fail@plt+0x5fd0>
   17c30:	ldr	r0, [r4]
   17c34:	bl	1798c <__assert_fail@plt+0x69d0>
   17c38:	ldr	r2, [pc, #164]	; 17ce4 <__assert_fail@plt+0x6d28>
   17c3c:	ldr	r3, [r4]
   17c40:	ldr	r1, [r2]
   17c44:	cmn	fp, r3
   17c48:	rsb	r3, r3, r3, lsl #30
   17c4c:	ldreq	r2, [r1, fp, lsl #2]
   17c50:	ldrne	r0, [r1, fp, lsl #2]
   17c54:	ldr	fp, [r1, r3, lsl #2]
   17c58:	ldreq	r0, [r2, #8]
   17c5c:	ldr	r2, [r4, #4]
   17c60:	cmp	r2, #0
   17c64:	ldr	r1, [r0]
   17c68:	beq	17c84 <__assert_fail@plt+0x6cc8>
   17c6c:	mov	r2, #1
   17c70:	str	r1, [fp]
   17c74:	strb	r2, [fp, #4]
   17c78:	b	17b74 <__assert_fail@plt+0x6bb8>
   17c7c:	add	sp, sp, #12
   17c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c84:	strb	r2, [fp, #4]
   17c88:	mov	r0, #8
   17c8c:	str	r1, [sp, #4]
   17c90:	bl	1828c <__assert_fail@plt+0x72d0>
   17c94:	ldr	r1, [sp, #4]
   17c98:	ldrsh	ip, [r1, #4]
   17c9c:	mov	r2, r0
   17ca0:	ldr	r0, [r1]
   17ca4:	strh	ip, [r2, #4]
   17ca8:	ldrsh	r1, [r1, #4]
   17cac:	str	r2, [sp, #4]
   17cb0:	bl	16910 <__assert_fail@plt+0x5954>
   17cb4:	ldr	r2, [sp, #4]
   17cb8:	str	r0, [r2]
   17cbc:	str	r2, [fp]
   17cc0:	b	17b74 <__assert_fail@plt+0x6bb8>
   17cc4:	andeq	r1, r3, r8, ror r2
   17cc8:	muleq	r3, ip, r2
   17ccc:	andeq	pc, r1, r0, lsl #21
   17cd0:	andeq	r1, r3, r8, asr r2
   17cd4:			; <UNDEFINED> instruction: 0x000312bc
   17cd8:	andeq	pc, r1, r8, asr sl	; <UNPREDICTABLE>
   17cdc:			; <UNDEFINED> instruction: 0x000312b4
   17ce0:	andeq	pc, r1, r8, lsr #21
   17ce4:	andeq	r1, r3, r4, asr r2
   17ce8:	cmp	r0, #0
   17cec:	bxeq	lr
   17cf0:	push	{r4, lr}
   17cf4:	ldr	r4, [r0, #8]
   17cf8:	bl	10dd0 <free@plt>
   17cfc:	subs	r0, r4, #0
   17d00:	bne	17cf4 <__assert_fail@plt+0x6d38>
   17d04:	pop	{r4, pc}
   17d08:	ldr	r2, [pc, #128]	; 17d90 <__assert_fail@plt+0x6dd4>
   17d0c:	ldr	r1, [pc, #128]	; 17d94 <__assert_fail@plt+0x6dd8>
   17d10:	mov	r3, #1
   17d14:	ldr	r2, [r2]
   17d18:	strb	r3, [r1]
   17d1c:	cmp	r2, #0
   17d20:	beq	17d6c <__assert_fail@plt+0x6db0>
   17d24:	push	{r4, lr}
   17d28:	mov	r4, r0
   17d2c:	mov	r2, r4
   17d30:	mov	r0, r3
   17d34:	ldr	r1, [pc, #92]	; 17d98 <__assert_fail@plt+0x6ddc>
   17d38:	bl	10f38 <__printf_chk@plt>
   17d3c:	mov	r0, r4
   17d40:	bl	10ee4 <strlen@plt>
   17d44:	ldr	r4, [pc, #80]	; 17d9c <__assert_fail@plt+0x6de0>
   17d48:	ldr	r3, [r4]
   17d4c:	add	r0, r0, r3
   17d50:	cmp	r0, #60	; 0x3c
   17d54:	str	r0, [r4]
   17d58:	bgt	17d70 <__assert_fail@plt+0x6db4>
   17d5c:	ldr	r3, [pc, #60]	; 17da0 <__assert_fail@plt+0x6de4>
   17d60:	pop	{r4, lr}
   17d64:	ldr	r0, [r3]
   17d68:	b	1c03c <__assert_fail@plt+0xb080>
   17d6c:	b	16174 <__assert_fail@plt+0x51b8>
   17d70:	mov	r0, #10
   17d74:	bl	10f20 <putchar@plt>
   17d78:	mov	r3, #0
   17d7c:	str	r3, [r4]
   17d80:	ldr	r3, [pc, #24]	; 17da0 <__assert_fail@plt+0x6de4>
   17d84:	pop	{r4, lr}
   17d88:	ldr	r0, [r3]
   17d8c:	b	1c03c <__assert_fail@plt+0xb080>
   17d90:	strdeq	r1, [r3], -r8
   17d94:	andeq	r1, r3, r0, ror r2
   17d98:	andeq	pc, r1, r4, asr #21
   17d9c:	andeq	r1, r3, r4, ror r2
   17da0:	andeq	r1, r3, r0, lsl #3
   17da4:	push	{r4, r5, r6, lr}
   17da8:	cmp	r0, #10
   17dac:	ldr	r4, [pc, #148]	; 17e48 <__assert_fail@plt+0x6e8c>
   17db0:	ldr	r1, [r4]
   17db4:	beq	17e08 <__assert_fail@plt+0x6e4c>
   17db8:	ldr	r6, [pc, #140]	; 17e4c <__assert_fail@plt+0x6e90>
   17dbc:	ldr	r2, [pc, #140]	; 17e50 <__assert_fail@plt+0x6e94>
   17dc0:	mov	r5, r0
   17dc4:	ldr	r3, [r6]
   17dc8:	ldr	r0, [r2]
   17dcc:	add	r3, r3, #1
   17dd0:	cmp	r0, #0
   17dd4:	sub	ip, r0, #1
   17dd8:	sub	r2, ip, r3
   17ddc:	clz	r2, r2
   17de0:	lsr	r2, r2, #5
   17de4:	moveq	r2, #0
   17de8:	cmp	r2, #0
   17dec:	str	r3, [r6]
   17df0:	bne	17e24 <__assert_fail@plt+0x6e68>
   17df4:	mov	r0, r5
   17df8:	bl	10e48 <_IO_putc@plt>
   17dfc:	ldr	r0, [r4]
   17e00:	pop	{r4, r5, r6, lr}
   17e04:	b	1c03c <__assert_fail@plt+0xb080>
   17e08:	ldr	r3, [pc, #60]	; 17e4c <__assert_fail@plt+0x6e90>
   17e0c:	mov	r2, #0
   17e10:	str	r2, [r3]
   17e14:	bl	10e48 <_IO_putc@plt>
   17e18:	ldr	r0, [r4]
   17e1c:	pop	{r4, r5, r6, lr}
   17e20:	b	1c03c <__assert_fail@plt+0xb080>
   17e24:	mov	r0, #92	; 0x5c
   17e28:	bl	10e48 <_IO_putc@plt>
   17e2c:	ldr	r1, [r4]
   17e30:	mov	r0, #10
   17e34:	bl	10e48 <_IO_putc@plt>
   17e38:	mov	r3, #1
   17e3c:	ldr	r1, [r4]
   17e40:	str	r3, [r6]
   17e44:	b	17df4 <__assert_fail@plt+0x6e38>
   17e48:	andeq	r1, r3, r0, lsl #3
   17e4c:	andeq	r1, r3, r8, lsr #5
   17e50:	andeq	r1, r3, r4, lsl #5
   17e54:	push	{r4, r5, r6, lr}
   17e58:	cmp	r0, #10
   17e5c:	ldr	r4, [pc, #164]	; 17f08 <__assert_fail@plt+0x6f4c>
   17e60:	ldr	r1, [r4]
   17e64:	beq	17eec <__assert_fail@plt+0x6f30>
   17e68:	ldr	r3, [pc, #156]	; 17f0c <__assert_fail@plt+0x6f50>
   17e6c:	mov	r5, r0
   17e70:	ldr	r3, [r3]
   17e74:	cmp	r3, #0
   17e78:	beq	17e90 <__assert_fail@plt+0x6ed4>
   17e7c:	mov	r0, r5
   17e80:	bl	10e48 <_IO_putc@plt>
   17e84:	ldr	r0, [r4]
   17e88:	pop	{r4, r5, r6, lr}
   17e8c:	b	1c03c <__assert_fail@plt+0xb080>
   17e90:	ldr	r6, [pc, #120]	; 17f10 <__assert_fail@plt+0x6f54>
   17e94:	ldr	r2, [pc, #120]	; 17f14 <__assert_fail@plt+0x6f58>
   17e98:	ldr	r3, [r6]
   17e9c:	ldr	r0, [r2]
   17ea0:	add	r3, r3, #1
   17ea4:	cmp	r0, #0
   17ea8:	sub	ip, r0, #1
   17eac:	sub	r2, ip, r3
   17eb0:	clz	r2, r2
   17eb4:	lsr	r2, r2, #5
   17eb8:	moveq	r2, #0
   17ebc:	cmp	r2, #0
   17ec0:	str	r3, [r6]
   17ec4:	beq	17e7c <__assert_fail@plt+0x6ec0>
   17ec8:	mov	r0, #92	; 0x5c
   17ecc:	bl	10e48 <_IO_putc@plt>
   17ed0:	ldr	r1, [r4]
   17ed4:	mov	r0, #10
   17ed8:	bl	10e48 <_IO_putc@plt>
   17edc:	mov	r3, #1
   17ee0:	ldr	r1, [r4]
   17ee4:	str	r3, [r6]
   17ee8:	b	17e7c <__assert_fail@plt+0x6ec0>
   17eec:	ldr	r3, [pc, #28]	; 17f10 <__assert_fail@plt+0x6f54>
   17ef0:	mov	r2, #0
   17ef4:	str	r2, [r3]
   17ef8:	bl	10e48 <_IO_putc@plt>
   17efc:	ldr	r0, [r4]
   17f00:	pop	{r4, r5, r6, lr}
   17f04:	b	1c03c <__assert_fail@plt+0xb080>
   17f08:	andeq	r1, r3, r0, lsl #3
   17f0c:	andeq	r1, r3, ip, ror #3
   17f10:	andeq	r1, r3, r8, lsr #5
   17f14:	andeq	r1, r3, r4, lsl #5
   17f18:	push	{r4, r5, r6, lr}
   17f1c:	subs	r4, r0, #0
   17f20:	movne	r5, r1
   17f24:	bne	17f40 <__assert_fail@plt+0x6f84>
   17f28:	b	17f54 <__assert_fail@plt+0x6f98>
   17f2c:	ldr	r3, [r4, #20]
   17f30:	ldr	r4, [r4, #24]
   17f34:	movlt	r4, r3
   17f38:	cmp	r4, #0
   17f3c:	beq	17f54 <__assert_fail@plt+0x6f98>
   17f40:	ldr	r1, [r4]
   17f44:	mov	r0, r5
   17f48:	bl	10d94 <strcmp@plt>
   17f4c:	cmp	r0, #0
   17f50:	bne	17f2c <__assert_fail@plt+0x6f70>
   17f54:	mov	r0, r4
   17f58:	pop	{r4, r5, r6, pc}
   17f5c:	push	{r4, r5, r6, lr}
   17f60:	ldr	r5, [r0]
   17f64:	cmp	r5, #0
   17f68:	beq	18038 <__assert_fail@plt+0x707c>
   17f6c:	mov	r4, r1
   17f70:	mov	r6, r0
   17f74:	ldr	r1, [r5]
   17f78:	ldr	r0, [r4]
   17f7c:	bl	10d94 <strcmp@plt>
   17f80:	mov	r1, r4
   17f84:	cmp	r0, #0
   17f88:	blt	17ff4 <__assert_fail@plt+0x7038>
   17f8c:	add	r0, r5, #24
   17f90:	bl	17f5c <__assert_fail@plt+0x6fa0>
   17f94:	cmp	r0, #0
   17f98:	beq	18030 <__assert_fail@plt+0x7074>
   17f9c:	ldr	r2, [r6]
   17fa0:	ldrh	r3, [r2, #16]
   17fa4:	add	r3, r3, #1
   17fa8:	uxth	r3, r3
   17fac:	cmp	r3, #1
   17fb0:	strh	r3, [r2, #16]
   17fb4:	beq	18028 <__assert_fail@plt+0x706c>
   17fb8:	cmp	r3, #2
   17fbc:	bne	18030 <__assert_fail@plt+0x7074>
   17fc0:	ldr	r3, [r2, #24]
   17fc4:	ldrsh	r0, [r3, #16]
   17fc8:	ldr	r1, [r3, #20]
   17fcc:	cmp	r0, #0
   17fd0:	blt	180c4 <__assert_fail@plt+0x7108>
   17fd4:	mov	ip, #0
   17fd8:	str	r1, [r2, #24]
   17fdc:	mov	r0, ip
   17fe0:	str	r2, [r3, #20]
   17fe4:	str	r3, [r6]
   17fe8:	strh	ip, [r2, #16]
   17fec:	strh	ip, [r3, #16]
   17ff0:	pop	{r4, r5, r6, pc}
   17ff4:	add	r0, r5, #20
   17ff8:	bl	17f5c <__assert_fail@plt+0x6fa0>
   17ffc:	cmp	r0, #0
   18000:	beq	18030 <__assert_fail@plt+0x7074>
   18004:	ldr	r2, [r6]
   18008:	ldrh	r3, [r2, #16]
   1800c:	sub	r3, r3, #1
   18010:	sxth	r3, r3
   18014:	cmn	r3, #2
   18018:	strh	r3, [r2, #16]
   1801c:	beq	18050 <__assert_fail@plt+0x7094>
   18020:	cmn	r3, #1
   18024:	bne	18030 <__assert_fail@plt+0x7074>
   18028:	mov	r0, #1
   1802c:	pop	{r4, r5, r6, pc}
   18030:	mov	r0, #0
   18034:	pop	{r4, r5, r6, pc}
   18038:	str	r1, [r0]
   1803c:	mov	r0, #1
   18040:	str	r5, [r1, #20]
   18044:	str	r5, [r1, #24]
   18048:	strh	r5, [r1, #16]
   1804c:	pop	{r4, r5, r6, pc}
   18050:	ldr	r3, [r2, #20]
   18054:	ldrsh	r0, [r3, #16]
   18058:	ldr	r1, [r3, #24]
   1805c:	cmp	r0, #0
   18060:	ble	18128 <__assert_fail@plt+0x716c>
   18064:	str	r1, [r6]
   18068:	ldr	r1, [r1, #20]
   1806c:	str	r1, [r3, #24]
   18070:	ldr	r1, [r6]
   18074:	ldr	r1, [r1, #24]
   18078:	str	r1, [r2, #20]
   1807c:	ldr	r1, [r6]
   18080:	str	r3, [r1, #20]
   18084:	ldr	r1, [r6]
   18088:	str	r2, [r1, #24]
   1808c:	ldr	ip, [r6]
   18090:	ldrsh	r1, [ip, #16]
   18094:	cmp	r1, #0
   18098:	beq	1817c <__assert_fail@plt+0x71c0>
   1809c:	cmp	r1, #1
   180a0:	beq	18168 <__assert_fail@plt+0x71ac>
   180a4:	cmn	r1, #1
   180a8:	moveq	r0, #1
   180ac:	moveq	r1, #0
   180b0:	strheq	r0, [r2, #16]
   180b4:	strheq	r1, [r3, #16]
   180b8:	mov	r0, #0
   180bc:	strh	r0, [ip, #16]
   180c0:	pop	{r4, r5, r6, pc}
   180c4:	str	r1, [r6]
   180c8:	ldr	r1, [r1, #24]
   180cc:	str	r1, [r3, #20]
   180d0:	ldr	r1, [r6]
   180d4:	ldr	r1, [r1, #20]
   180d8:	str	r1, [r2, #24]
   180dc:	ldr	r1, [r6]
   180e0:	str	r2, [r1, #20]
   180e4:	ldr	r1, [r6]
   180e8:	str	r3, [r1, #24]
   180ec:	ldr	ip, [r6]
   180f0:	ldrsh	r1, [ip, #16]
   180f4:	cmp	r1, #0
   180f8:	beq	1815c <__assert_fail@plt+0x71a0>
   180fc:	cmp	r1, #1
   18100:	beq	18148 <__assert_fail@plt+0x718c>
   18104:	cmn	r1, #1
   18108:	moveq	r0, #0
   1810c:	moveq	r1, #1
   18110:	strheq	r0, [r2, #16]
   18114:	strheq	r1, [r3, #16]
   18118:	mov	r3, #0
   1811c:	mov	r0, r3
   18120:	strh	r3, [ip, #16]
   18124:	pop	{r4, r5, r6, pc}
   18128:	mov	ip, #0
   1812c:	str	r1, [r2, #20]
   18130:	mov	r0, ip
   18134:	str	r2, [r3, #24]
   18138:	str	r3, [r6]
   1813c:	strh	ip, [r2, #16]
   18140:	strh	ip, [r3, #16]
   18144:	pop	{r4, r5, r6, pc}
   18148:	mvn	r0, #0
   1814c:	mov	r1, #0
   18150:	strh	r0, [r2, #16]
   18154:	strh	r1, [r3, #16]
   18158:	b	18118 <__assert_fail@plt+0x715c>
   1815c:	strh	r1, [r2, #16]
   18160:	strh	r1, [r3, #16]
   18164:	b	18118 <__assert_fail@plt+0x715c>
   18168:	mov	r0, #0
   1816c:	mvn	r1, #0
   18170:	strh	r0, [r2, #16]
   18174:	strh	r1, [r3, #16]
   18178:	b	180b8 <__assert_fail@plt+0x70fc>
   1817c:	strh	r1, [r2, #16]
   18180:	strh	r1, [r3, #16]
   18184:	b	180b8 <__assert_fail@plt+0x70fc>
   18188:	ldr	r1, [pc, #44]	; 181bc <__assert_fail@plt+0x7200>
   1818c:	ldr	ip, [pc, #44]	; 181c0 <__assert_fail@plt+0x7204>
   18190:	ldr	r0, [pc, #44]	; 181c4 <__assert_fail@plt+0x7208>
   18194:	ldr	r2, [pc, #44]	; 181c8 <__assert_fail@plt+0x720c>
   18198:	push	{lr}		; (str lr, [sp, #-4]!)
   1819c:	mov	lr, #0
   181a0:	mov	r3, #1
   181a4:	str	lr, [r1]
   181a8:	mov	r1, #5
   181ac:	str	r3, [ip]
   181b0:	str	r3, [r0]
   181b4:	str	r1, [r2]
   181b8:	pop	{pc}		; (ldr pc, [sp], #4)
   181bc:	andeq	r1, r3, ip, ror r2
   181c0:	muleq	r3, r0, r2
   181c4:	andeq	r1, r3, r4, lsr r2
   181c8:			; <UNDEFINED> instruction: 0x000312b8
   181cc:	push	{r4, lr}
   181d0:	mvn	r2, #-2147483648	; 0x80000000
   181d4:	ldr	r1, [pc, #100]	; 18240 <__assert_fail@plt+0x7284>
   181d8:	mov	r0, #1
   181dc:	bl	10f38 <__printf_chk@plt>
   181e0:	mvn	r2, #-16777216	; 0xff000000
   181e4:	ldr	r1, [pc, #88]	; 18244 <__assert_fail@plt+0x7288>
   181e8:	mov	r0, #1
   181ec:	bl	10f38 <__printf_chk@plt>
   181f0:	mvn	r2, #-2147483648	; 0x80000000
   181f4:	ldr	r1, [pc, #76]	; 18248 <__assert_fail@plt+0x728c>
   181f8:	mov	r0, #1
   181fc:	bl	10f38 <__printf_chk@plt>
   18200:	mvn	r2, #-2147483648	; 0x80000000
   18204:	ldr	r1, [pc, #64]	; 1824c <__assert_fail@plt+0x7290>
   18208:	mov	r0, #1
   1820c:	bl	10f38 <__printf_chk@plt>
   18210:	mvn	r2, #-2147483648	; 0x80000000
   18214:	ldr	r1, [pc, #52]	; 18250 <__assert_fail@plt+0x7294>
   18218:	mov	r0, #1
   1821c:	bl	10f38 <__printf_chk@plt>
   18220:	ldr	r2, [pc, #44]	; 18254 <__assert_fail@plt+0x7298>
   18224:	ldr	r1, [pc, #44]	; 18258 <__assert_fail@plt+0x729c>
   18228:	mov	r0, #1
   1822c:	bl	10f38 <__printf_chk@plt>
   18230:	ldr	r3, [pc, #36]	; 1825c <__assert_fail@plt+0x72a0>
   18234:	pop	{r4, lr}
   18238:	ldr	r0, [r3]
   1823c:	b	1c03c <__assert_fail@plt+0xb080>
   18240:	andeq	pc, r1, r8, asr #21
   18244:	andeq	pc, r1, r0, ror #21
   18248:	strdeq	pc, [r1], -r8
   1824c:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   18250:	andeq	pc, r1, r8, lsr #22
   18254:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   18258:	andeq	pc, r1, r0, asr #22
   1825c:	andeq	r1, r3, r0, lsl #3
   18260:	ldr	r3, [pc, #28]	; 18284 <__assert_fail@plt+0x72c8>
   18264:	push	{r4, lr}
   18268:	mov	r2, #39	; 0x27
   1826c:	mov	r1, #1
   18270:	ldr	r3, [r3]
   18274:	ldr	r0, [pc, #12]	; 18288 <__assert_fail@plt+0x72cc>
   18278:	bl	10e54 <fwrite@plt>
   1827c:	mov	r0, #1
   18280:	bl	10ed8 <exit@plt>
   18284:	andeq	r1, r3, r8, ror #2
   18288:	andeq	pc, r1, r8, asr fp	; <UNPREDICTABLE>
   1828c:	push	{r4, lr}
   18290:	bl	10e90 <malloc@plt>
   18294:	cmp	r0, #0
   18298:	popne	{r4, pc}
   1829c:	bl	18260 <__assert_fail@plt+0x72a4>
   182a0:	push	{r4, r5, r6, lr}
   182a4:	mov	r5, r0
   182a8:	bl	10ee4 <strlen@plt>
   182ac:	add	r4, r0, #1
   182b0:	mov	r0, r4
   182b4:	bl	10e90 <malloc@plt>
   182b8:	cmp	r0, #0
   182bc:	beq	182d0 <__assert_fail@plt+0x7314>
   182c0:	mov	r2, r4
   182c4:	mov	r1, r5
   182c8:	pop	{r4, r5, r6, lr}
   182cc:	b	10df4 <memcpy@plt>
   182d0:	bl	18260 <__assert_fail@plt+0x72a4>
   182d4:	push	{r4, r5, r6, lr}
   182d8:	mov	r4, r0
   182dc:	mov	r0, #12
   182e0:	mov	r6, r1
   182e4:	mov	r5, r2
   182e8:	bl	10e90 <malloc@plt>
   182ec:	subs	r3, r0, #0
   182f0:	beq	18304 <__assert_fail@plt+0x7348>
   182f4:	str	r6, [r3]
   182f8:	str	r5, [r3, #4]
   182fc:	str	r4, [r3, #8]
   18300:	pop	{r4, r5, r6, pc}
   18304:	bl	18260 <__assert_fail@plt+0x72a4>
   18308:	push	{r4, r5, r6, r7, lr}
   1830c:	sub	sp, sp, #52	; 0x34
   18310:	ldr	r4, [pc, #224]	; 183f8 <__assert_fail@plt+0x743c>
   18314:	subs	r5, r0, #0
   18318:	mov	r6, r1
   1831c:	ldr	r3, [r4]
   18320:	str	r3, [sp, #44]	; 0x2c
   18324:	bne	18354 <__assert_fail@plt+0x7398>
   18328:	mov	r0, r1
   1832c:	bl	10e90 <malloc@plt>
   18330:	cmp	r0, #0
   18334:	strbne	r5, [r0]
   18338:	beq	183f4 <__assert_fail@plt+0x7438>
   1833c:	ldr	r2, [sp, #44]	; 0x2c
   18340:	ldr	r3, [r4]
   18344:	cmp	r2, r3
   18348:	bne	183f0 <__assert_fail@plt+0x7434>
   1834c:	add	sp, sp, #52	; 0x34
   18350:	pop	{r4, r5, r6, r7, pc}
   18354:	add	r1, r1, #12
   18358:	ldr	r0, [r5, #8]
   1835c:	bl	18308 <__assert_fail@plt+0x734c>
   18360:	ldr	r3, [r5, #4]
   18364:	cmp	r3, #0
   18368:	mov	r7, r0
   1836c:	beq	18384 <__assert_fail@plt+0x73c8>
   18370:	cmp	r6, #1
   18374:	ldr	r2, [r5]
   18378:	beq	183c0 <__assert_fail@plt+0x7404>
   1837c:	ldr	r1, [pc, #120]	; 183fc <__assert_fail@plt+0x7440>
   18380:	b	18394 <__assert_fail@plt+0x73d8>
   18384:	cmp	r6, #1
   18388:	ldr	r2, [r5]
   1838c:	beq	183e8 <__assert_fail@plt+0x742c>
   18390:	ldr	r1, [pc, #104]	; 18400 <__assert_fail@plt+0x7444>
   18394:	add	r5, sp, #12
   18398:	mov	r3, #30
   1839c:	stm	sp, {r1, r2}
   183a0:	mov	r0, r5
   183a4:	mov	r1, r3
   183a8:	mov	r2, #1
   183ac:	bl	10fb0 <__snprintf_chk@plt>
   183b0:	mov	r1, r5
   183b4:	mov	r0, r7
   183b8:	bl	10e6c <strcat@plt>
   183bc:	b	1833c <__assert_fail@plt+0x7380>
   183c0:	ldr	r1, [pc, #60]	; 18404 <__assert_fail@plt+0x7448>
   183c4:	add	r5, sp, #12
   183c8:	mov	r3, #30
   183cc:	str	r2, [sp, #4]
   183d0:	str	r1, [sp]
   183d4:	mov	r2, r6
   183d8:	mov	r0, r5
   183dc:	mov	r1, r3
   183e0:	bl	10fb0 <__snprintf_chk@plt>
   183e4:	b	183b0 <__assert_fail@plt+0x73f4>
   183e8:	ldr	r1, [pc, #24]	; 18408 <__assert_fail@plt+0x744c>
   183ec:	b	183c4 <__assert_fail@plt+0x7408>
   183f0:	bl	10e24 <__stack_chk_fail@plt>
   183f4:	bl	18260 <__assert_fail@plt+0x72a4>
   183f8:	andeq	r0, r3, r0, lsl lr
   183fc:	andeq	pc, r1, r0, lsl #23
   18400:	andeq	pc, r1, ip, lsl #23
   18404:	andeq	pc, r1, r8, lsl #23
   18408:	andeq	pc, r1, r8, lsr r9	; <UNPREDICTABLE>
   1840c:	push	{r4, r5, r6, lr}
   18410:	mov	r5, r0
   18414:	ldr	r4, [pc, #40]	; 18444 <__assert_fail@plt+0x7488>
   18418:	ldr	r0, [r4]
   1841c:	cmp	r0, #0
   18420:	beq	18428 <__assert_fail@plt+0x746c>
   18424:	bl	10dd0 <free@plt>
   18428:	ldr	r3, [r4, #4]
   1842c:	mov	r0, r5
   18430:	mov	r1, #1
   18434:	str	r3, [r4]
   18438:	bl	18308 <__assert_fail@plt+0x734c>
   1843c:	str	r0, [r4, #4]
   18440:	pop	{r4, r5, r6, pc}
   18444:	ldrdeq	r1, [r3], -ip
   18448:	push	{r4, r5, r6, lr}
   1844c:	mov	r5, r0
   18450:	ldr	r6, [pc, #164]	; 184fc <__assert_fail@plt+0x7540>
   18454:	ldr	r0, [r6]
   18458:	cmp	r0, #0
   1845c:	beq	18464 <__assert_fail@plt+0x74a8>
   18460:	bl	10dd0 <free@plt>
   18464:	ldr	r3, [r6, #4]
   18468:	cmp	r5, #0
   1846c:	str	r3, [r6]
   18470:	beq	184e0 <__assert_fail@plt+0x7524>
   18474:	mov	r4, r5
   18478:	mov	r0, #0
   1847c:	b	18484 <__assert_fail@plt+0x74c8>
   18480:	mov	r0, r3
   18484:	ldr	r4, [r4, #8]
   18488:	add	r3, r0, #1
   1848c:	cmp	r4, #0
   18490:	bne	18480 <__assert_fail@plt+0x74c4>
   18494:	add	r0, r0, #2
   18498:	bl	10e90 <malloc@plt>
   1849c:	cmp	r0, #0
   184a0:	strne	r0, [r6, #4]
   184a4:	subne	r3, r0, #1
   184a8:	beq	184f8 <__assert_fail@plt+0x753c>
   184ac:	ldr	r2, [r5]
   184b0:	add	r4, r4, #1
   184b4:	cmp	r2, #0
   184b8:	moveq	r2, #48	; 0x30
   184bc:	movne	r2, #49	; 0x31
   184c0:	strb	r2, [r3, #1]!
   184c4:	ldr	r5, [r5, #8]
   184c8:	cmp	r5, #0
   184cc:	bne	184ac <__assert_fail@plt+0x74f0>
   184d0:	add	r4, r0, r4
   184d4:	mov	r3, #0
   184d8:	strb	r3, [r4]
   184dc:	pop	{r4, r5, r6, pc}
   184e0:	mov	r0, #1
   184e4:	bl	10e90 <malloc@plt>
   184e8:	cmp	r0, #0
   184ec:	strne	r0, [r6, #4]
   184f0:	movne	r4, r0
   184f4:	bne	184d4 <__assert_fail@plt+0x7518>
   184f8:	bl	18260 <__assert_fail@plt+0x72a4>
   184fc:	ldrdeq	r1, [r3], -ip
   18500:	push	{r4, r5, r6, lr}
   18504:	mov	r4, r0
   18508:	ldr	r5, [pc, #48]	; 18540 <__assert_fail@plt+0x7584>
   1850c:	ldr	r0, [r5]
   18510:	cmp	r0, #0
   18514:	beq	1851c <__assert_fail@plt+0x7560>
   18518:	bl	10dd0 <free@plt>
   1851c:	mov	r0, r4
   18520:	bl	10e90 <malloc@plt>
   18524:	cmp	r0, #0
   18528:	beq	1853c <__assert_fail@plt+0x7580>
   1852c:	ldr	r3, [pc, #16]	; 18544 <__assert_fail@plt+0x7588>
   18530:	str	r0, [r5]
   18534:	str	r4, [r3]
   18538:	pop	{r4, r5, r6, pc}
   1853c:	bl	18260 <__assert_fail@plt+0x72a4>
   18540:	andeq	r1, r3, r4, lsl #4
   18544:	andeq	r1, r3, r0, lsl #4
   18548:	ldr	r3, [pc, #12]	; 1855c <__assert_fail@plt+0x75a0>
   1854c:	ldr	r3, [r3]
   18550:	cmp	r3, r0
   18554:	bxge	lr
   18558:	b	18500 <__assert_fail@plt+0x7544>
   1855c:	andeq	r1, r3, r0, lsl #4
   18560:	ldr	r3, [pc, #132]	; 185ec <__assert_fail@plt+0x7630>
   18564:	ldr	r1, [pc, #132]	; 185f0 <__assert_fail@plt+0x7634>
   18568:	push	{r4, lr}
   1856c:	mov	r0, #1
   18570:	ldr	r3, [r3]
   18574:	ldr	lr, [pc, #120]	; 185f4 <__assert_fail@plt+0x7638>
   18578:	ldr	ip, [pc, #120]	; 185f8 <__assert_fail@plt+0x763c>
   1857c:	ldr	r2, [pc, #120]	; 185fc <__assert_fail@plt+0x7640>
   18580:	cmp	r3, #0
   18584:	mov	r3, #0
   18588:	str	r3, [r1]
   1858c:	mov	r1, #2
   18590:	str	r3, [lr]
   18594:	str	r0, [ip]
   18598:	str	r1, [r2]
   1859c:	beq	185e4 <__assert_fail@plt+0x7628>
   185a0:	ldr	r1, [pc, #88]	; 18600 <__assert_fail@plt+0x7644>
   185a4:	bl	10f38 <__printf_chk@plt>
   185a8:	ldr	r3, [pc, #84]	; 18604 <__assert_fail@plt+0x7648>
   185ac:	ldr	r0, [r3]
   185b0:	bl	1c03c <__assert_fail@plt+0xb080>
   185b4:	ldr	r3, [pc, #76]	; 18608 <__assert_fail@plt+0x764c>
   185b8:	ldr	r1, [pc, #76]	; 1860c <__assert_fail@plt+0x7650>
   185bc:	ldr	r2, [pc, #76]	; 18610 <__assert_fail@plt+0x7654>
   185c0:	ldr	r0, [r3]
   185c4:	mov	r3, #0
   185c8:	cmp	r0, #63	; 0x3f
   185cc:	str	r3, [r1]
   185d0:	strb	r3, [r2]
   185d4:	popgt	{r4, pc}
   185d8:	mov	r0, #64	; 0x40
   185dc:	pop	{r4, lr}
   185e0:	b	18500 <__assert_fail@plt+0x7544>
   185e4:	bl	15ff0 <__assert_fail@plt+0x5034>
   185e8:	b	185b4 <__assert_fail@plt+0x75f8>
   185ec:	strdeq	r1, [r3], -r8
   185f0:	andeq	r1, r3, r0, asr #4
   185f4:	andeq	r1, r3, ip, lsr r2
   185f8:	andeq	r1, r3, r8, asr #4
   185fc:	andeq	r1, r3, r4, ror r2
   18600:	muleq	r1, r0, fp
   18604:	andeq	r1, r3, r0, lsl #3
   18608:	andeq	r1, r3, r0, lsl #4
   1860c:	andeq	r1, r3, r8, lsr r2
   18610:	andeq	r1, r3, r0, ror r2
   18614:	push	{r4, r5, r6, lr}
   18618:	ldr	r4, [pc, #120]	; 18698 <__assert_fail@plt+0x76dc>
   1861c:	ldr	r5, [pc, #120]	; 1869c <__assert_fail@plt+0x76e0>
   18620:	ldr	r6, [r4]
   18624:	ldrb	r3, [r5]
   18628:	cmp	r6, #0
   1862c:	bne	18668 <__assert_fail@plt+0x76ac>
   18630:	cmp	r3, #0
   18634:	beq	18670 <__assert_fail@plt+0x76b4>
   18638:	ldr	r3, [pc, #96]	; 186a0 <__assert_fail@plt+0x76e4>
   1863c:	ldr	r3, [r3]
   18640:	cmp	r3, #0
   18644:	beq	18684 <__assert_fail@plt+0x76c8>
   18648:	ldr	r0, [pc, #84]	; 186a4 <__assert_fail@plt+0x76e8>
   1864c:	bl	10e84 <puts@plt>
   18650:	ldr	r3, [pc, #80]	; 186a8 <__assert_fail@plt+0x76ec>
   18654:	ldr	r0, [r3]
   18658:	bl	1c03c <__assert_fail@plt+0xb080>
   1865c:	ldrb	r3, [r5]
   18660:	ldr	r2, [pc, #68]	; 186ac <__assert_fail@plt+0x76f0>
   18664:	str	r6, [r2]
   18668:	cmp	r3, #0
   1866c:	bne	1867c <__assert_fail@plt+0x76c0>
   18670:	mov	r3, #0
   18674:	str	r3, [r4]
   18678:	pop	{r4, r5, r6, pc}
   1867c:	pop	{r4, r5, r6, lr}
   18680:	b	18560 <__assert_fail@plt+0x75a4>
   18684:	bl	1509c <__assert_fail@plt+0x40e0>
   18688:	ldrb	r3, [r5]
   1868c:	cmp	r3, #0
   18690:	beq	18670 <__assert_fail@plt+0x76b4>
   18694:	b	1867c <__assert_fail@plt+0x76c0>
   18698:	andeq	r1, r3, r8, lsr r2
   1869c:	andeq	r1, r3, r0, ror r2
   186a0:	strdeq	r1, [r3], -r8
   186a4:	andeq	r0, r2, ip, ror #11
   186a8:	andeq	r1, r3, r0, lsl #3
   186ac:	andeq	r1, r3, r4, ror r2
   186b0:	push	{r0, r1, r2, r3}
   186b4:	ldr	r3, [pc, #168]	; 18764 <__assert_fail@plt+0x77a8>
   186b8:	push	{r4, r5, r6, lr}
   186bc:	sub	sp, sp, #16
   186c0:	ldrb	r2, [r3]
   186c4:	ldr	r5, [pc, #156]	; 18768 <__assert_fail@plt+0x77ac>
   186c8:	ldr	r4, [pc, #156]	; 1876c <__assert_fail@plt+0x77b0>
   186cc:	cmp	r2, #0
   186d0:	ldr	r3, [r5]
   186d4:	ldr	r2, [pc, #148]	; 18770 <__assert_fail@plt+0x77b4>
   186d8:	str	r3, [sp, #12]
   186dc:	ldreq	r3, [pc, #144]	; 18774 <__assert_fail@plt+0x77b8>
   186e0:	ldr	r2, [r2]
   186e4:	add	r1, sp, #36	; 0x24
   186e8:	ldr	r6, [sp, #32]
   186ec:	ldreq	r3, [r3]
   186f0:	ldrne	r3, [pc, #128]	; 18778 <__assert_fail@plt+0x77bc>
   186f4:	str	r1, [sp, #8]
   186f8:	str	r2, [sp]
   186fc:	mov	r1, #1
   18700:	ldr	r2, [pc, #116]	; 1877c <__assert_fail@plt+0x77c0>
   18704:	ldr	r0, [r4]
   18708:	bl	10f5c <__fprintf_chk@plt>
   1870c:	mov	r2, r6
   18710:	ldr	r3, [sp, #8]
   18714:	mov	r1, #1
   18718:	ldr	r0, [r4]
   1871c:	bl	10ea8 <__vfprintf_chk@plt>
   18720:	ldr	r1, [r4]
   18724:	mov	r0, #10
   18728:	bl	10f74 <fputc@plt>
   1872c:	ldr	r0, [r4]
   18730:	bl	1c03c <__assert_fail@plt+0xb080>
   18734:	ldr	r0, [sp, #12]
   18738:	ldr	r3, [pc, #64]	; 18780 <__assert_fail@plt+0x77c4>
   1873c:	ldr	r1, [r5]
   18740:	mov	r2, #1
   18744:	cmp	r0, r1
   18748:	str	r2, [r3]
   1874c:	bne	18760 <__assert_fail@plt+0x77a4>
   18750:	add	sp, sp, #16
   18754:	pop	{r4, r5, r6, lr}
   18758:	add	sp, sp, #16
   1875c:	bx	lr
   18760:	bl	10e24 <__stack_chk_fail@plt>
   18764:	andeq	r1, r3, r0, ror #4
   18768:	andeq	r0, r3, r0, lsl lr
   1876c:	andeq	r1, r3, r8, ror #2
   18770:	andeq	r1, r3, r0, lsr #5
   18774:	andeq	r1, r3, r4, asr #4
   18778:	muleq	r1, r4, fp
   1877c:	andeq	pc, r1, r4, lsr #23
   18780:	andeq	r1, r3, r8, lsr r2
   18784:	push	{r0, r1, r2, r3}
   18788:	ldr	r2, [pc, #300]	; 188bc <__assert_fail@plt+0x7900>
   1878c:	push	{r4, r5, r6, lr}
   18790:	sub	sp, sp, #16
   18794:	ldr	r4, [pc, #292]	; 188c0 <__assert_fail@plt+0x7904>
   18798:	ldr	r1, [r2]
   1879c:	add	r3, sp, #36	; 0x24
   187a0:	ldr	r2, [r4]
   187a4:	cmp	r1, #0
   187a8:	str	r2, [sp, #12]
   187ac:	str	r3, [sp, #8]
   187b0:	ldr	r6, [sp, #32]
   187b4:	beq	18844 <__assert_fail@plt+0x7888>
   187b8:	ldr	r3, [pc, #260]	; 188c4 <__assert_fail@plt+0x7908>
   187bc:	ldr	r2, [pc, #260]	; 188c8 <__assert_fail@plt+0x790c>
   187c0:	ldr	r5, [pc, #260]	; 188cc <__assert_fail@plt+0x7910>
   187c4:	ldrb	r3, [r3]
   187c8:	ldr	r2, [r2]
   187cc:	mov	r1, #1
   187d0:	cmp	r3, #0
   187d4:	ldr	r0, [r5]
   187d8:	ldreq	r3, [pc, #240]	; 188d0 <__assert_fail@plt+0x7914>
   187dc:	ldrne	r3, [pc, #240]	; 188d4 <__assert_fail@plt+0x7918>
   187e0:	ldreq	r3, [r3]
   187e4:	str	r2, [sp]
   187e8:	ldr	r2, [pc, #232]	; 188d8 <__assert_fail@plt+0x791c>
   187ec:	bl	10f5c <__fprintf_chk@plt>
   187f0:	mov	r2, r6
   187f4:	ldr	r3, [sp, #8]
   187f8:	mov	r1, #1
   187fc:	ldr	r0, [r5]
   18800:	bl	10ea8 <__vfprintf_chk@plt>
   18804:	ldr	r1, [r5]
   18808:	mov	r0, #10
   1880c:	bl	10f74 <fputc@plt>
   18810:	ldr	r0, [r5]
   18814:	bl	1c03c <__assert_fail@plt+0xb080>
   18818:	ldr	r3, [pc, #188]	; 188dc <__assert_fail@plt+0x7920>
   1881c:	mov	r2, #1
   18820:	str	r2, [r3]
   18824:	ldr	r2, [sp, #12]
   18828:	ldr	r3, [r4]
   1882c:	cmp	r2, r3
   18830:	bne	188b8 <__assert_fail@plt+0x78fc>
   18834:	add	sp, sp, #16
   18838:	pop	{r4, r5, r6, lr}
   1883c:	add	sp, sp, #16
   18840:	bx	lr
   18844:	ldr	r3, [pc, #148]	; 188e0 <__assert_fail@plt+0x7924>
   18848:	ldr	r3, [r3]
   1884c:	cmp	r3, #0
   18850:	beq	18824 <__assert_fail@plt+0x7868>
   18854:	ldr	r3, [pc, #104]	; 188c4 <__assert_fail@plt+0x7908>
   18858:	ldr	r2, [pc, #104]	; 188c8 <__assert_fail@plt+0x790c>
   1885c:	ldr	r5, [pc, #104]	; 188cc <__assert_fail@plt+0x7910>
   18860:	ldrb	r3, [r3]
   18864:	ldr	r2, [r2]
   18868:	ldr	r0, [r5]
   1886c:	cmp	r3, #0
   18870:	mov	r1, #1
   18874:	ldreq	r3, [pc, #84]	; 188d0 <__assert_fail@plt+0x7914>
   18878:	ldrne	r3, [pc, #84]	; 188d4 <__assert_fail@plt+0x7918>
   1887c:	ldreq	r3, [r3]
   18880:	str	r2, [sp]
   18884:	ldr	r2, [pc, #88]	; 188e4 <__assert_fail@plt+0x7928>
   18888:	bl	10f5c <__fprintf_chk@plt>
   1888c:	mov	r2, r6
   18890:	ldr	r3, [sp, #8]
   18894:	ldr	r0, [r5]
   18898:	mov	r1, #1
   1889c:	bl	10ea8 <__vfprintf_chk@plt>
   188a0:	ldr	r1, [r5]
   188a4:	mov	r0, #10
   188a8:	bl	10f74 <fputc@plt>
   188ac:	ldr	r0, [r5]
   188b0:	bl	1c03c <__assert_fail@plt+0xb080>
   188b4:	b	18824 <__assert_fail@plt+0x7868>
   188b8:	bl	10e24 <__stack_chk_fail@plt>
   188bc:	andeq	r1, r3, ip, ror #3
   188c0:	andeq	r0, r3, r0, lsl lr
   188c4:	andeq	r1, r3, r0, ror #4
   188c8:	andeq	r1, r3, r0, lsr #5
   188cc:	andeq	r1, r3, r8, ror #2
   188d0:	andeq	r1, r3, r4, asr #4
   188d4:	muleq	r1, r4, fp
   188d8:	andeq	pc, r1, ip, lsr #23
   188dc:	andeq	r1, r3, r8, lsr r2
   188e0:	strdeq	r1, [r3], -r0
   188e4:			; <UNDEFINED> instruction: 0x0001fbbc
   188e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   188ec:	subs	r7, r0, #0
   188f0:	mov	r5, r1
   188f4:	beq	1895c <__assert_fail@plt+0x79a0>
   188f8:	ldr	r8, [pc, #332]	; 18a4c <__assert_fail@plt+0x7a90>
   188fc:	ldr	r9, [pc, #332]	; 18a50 <__assert_fail@plt+0x7a94>
   18900:	mov	r6, r7
   18904:	ldr	r4, [r6, #8]
   18908:	cmp	r4, #0
   1890c:	bne	18920 <__assert_fail@plt+0x7964>
   18910:	b	18a34 <__assert_fail@plt+0x7a78>
   18914:	ldr	r4, [r4, #8]
   18918:	cmp	r4, #0
   1891c:	beq	18944 <__assert_fail@plt+0x7988>
   18920:	ldr	r2, [r4]
   18924:	ldr	r3, [r6]
   18928:	cmp	r2, r3
   1892c:	bne	18914 <__assert_fail@plt+0x7958>
   18930:	mov	r0, r8
   18934:	bl	186b0 <__assert_fail@plt+0x76f4>
   18938:	ldr	r4, [r4, #8]
   1893c:	cmp	r4, #0
   18940:	bne	18920 <__assert_fail@plt+0x7964>
   18944:	ldr	r3, [r6, #4]
   18948:	cmp	r3, #0
   1894c:	bne	18a40 <__assert_fail@plt+0x7a84>
   18950:	ldr	r6, [r6, #8]
   18954:	cmp	r6, #0
   18958:	bne	18904 <__assert_fail@plt+0x7948>
   1895c:	cmp	r5, #0
   18960:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18964:	ldr	r8, [pc, #232]	; 18a54 <__assert_fail@plt+0x7a98>
   18968:	ldr	r9, [pc, #232]	; 18a58 <__assert_fail@plt+0x7a9c>
   1896c:	mov	r6, r5
   18970:	ldr	r4, [r6, #8]
   18974:	cmp	r4, #0
   18978:	bne	1898c <__assert_fail@plt+0x79d0>
   1897c:	b	18a1c <__assert_fail@plt+0x7a60>
   18980:	ldr	r4, [r4, #8]
   18984:	cmp	r4, #0
   18988:	beq	189b0 <__assert_fail@plt+0x79f4>
   1898c:	ldr	r2, [r4]
   18990:	ldr	r3, [r6]
   18994:	cmp	r2, r3
   18998:	bne	18980 <__assert_fail@plt+0x79c4>
   1899c:	mov	r0, r8
   189a0:	bl	186b0 <__assert_fail@plt+0x76f4>
   189a4:	ldr	r4, [r4, #8]
   189a8:	cmp	r4, #0
   189ac:	bne	1898c <__assert_fail@plt+0x79d0>
   189b0:	ldr	r3, [r6, #4]
   189b4:	cmp	r3, #0
   189b8:	bne	18a28 <__assert_fail@plt+0x7a6c>
   189bc:	ldr	r6, [r6, #8]
   189c0:	cmp	r6, #0
   189c4:	bne	18970 <__assert_fail@plt+0x79b4>
   189c8:	cmp	r7, #0
   189cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   189d0:	ldr	r6, [pc, #132]	; 18a5c <__assert_fail@plt+0x7aa0>
   189d4:	mov	r4, r5
   189d8:	b	189e8 <__assert_fail@plt+0x7a2c>
   189dc:	ldr	r4, [r4, #8]
   189e0:	cmp	r4, #0
   189e4:	beq	18a0c <__assert_fail@plt+0x7a50>
   189e8:	ldr	r2, [r4]
   189ec:	ldr	r3, [r7]
   189f0:	cmp	r2, r3
   189f4:	bne	189dc <__assert_fail@plt+0x7a20>
   189f8:	mov	r0, r6
   189fc:	bl	186b0 <__assert_fail@plt+0x76f4>
   18a00:	ldr	r4, [r4, #8]
   18a04:	cmp	r4, #0
   18a08:	bne	189e8 <__assert_fail@plt+0x7a2c>
   18a0c:	ldr	r7, [r7, #8]
   18a10:	cmp	r7, #0
   18a14:	bne	189d4 <__assert_fail@plt+0x7a18>
   18a18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a1c:	ldr	r3, [r6, #4]
   18a20:	cmp	r3, #0
   18a24:	beq	189c8 <__assert_fail@plt+0x7a0c>
   18a28:	mov	r0, r9
   18a2c:	bl	186b0 <__assert_fail@plt+0x76f4>
   18a30:	b	189bc <__assert_fail@plt+0x7a00>
   18a34:	ldr	r3, [r6, #4]
   18a38:	cmp	r3, #0
   18a3c:	beq	1895c <__assert_fail@plt+0x79a0>
   18a40:	mov	r0, r9
   18a44:	bl	18784 <__assert_fail@plt+0x77c8>
   18a48:	b	18950 <__assert_fail@plt+0x7994>
   18a4c:	ldrdeq	pc, [r1], -r0
   18a50:	andeq	pc, r1, ip, ror #23
   18a54:	andeq	pc, r1, r8, lsl #24
   18a58:	andeq	pc, r1, r8, lsr #24
   18a5c:	andeq	pc, r1, ip, lsr ip	; <UNPREDICTABLE>
   18a60:	push	{r4, r5, r6, r7, r8, lr}
   18a64:	mov	r6, r1
   18a68:	mov	r5, r0
   18a6c:	bl	10ee4 <strlen@plt>
   18a70:	cmp	r0, #1
   18a74:	beq	18a84 <__assert_fail@plt+0x7ac8>
   18a78:	mov	r1, r5
   18a7c:	ldr	r0, [pc, #560]	; 18cb4 <__assert_fail@plt+0x7cf8>
   18a80:	bl	18784 <__assert_fail@plt+0x77c8>
   18a84:	ldr	r7, [pc, #556]	; 18cb8 <__assert_fail@plt+0x7cfc>
   18a88:	mov	r1, r5
   18a8c:	ldr	r0, [r7]
   18a90:	bl	17f18 <__assert_fail@plt+0x6f5c>
   18a94:	subs	r4, r0, #0
   18a98:	beq	18bc4 <__assert_fail@plt+0x7c08>
   18a9c:	cmp	r6, #3
   18aa0:	ldrls	pc, [pc, r6, lsl #2]
   18aa4:	b	18c70 <__assert_fail@plt+0x7cb4>
   18aa8:	andeq	r8, r1, r4, asr fp
   18aac:	andeq	r8, r1, r4, lsl #22
   18ab0:			; <UNDEFINED> instruction: 0x00018ab8
   18ab4:			; <UNDEFINED> instruction: 0x00018ab8
   18ab8:	ldr	r3, [r4, #8]
   18abc:	cmp	r3, #0
   18ac0:	bne	18c00 <__assert_fail@plt+0x7c44>
   18ac4:	ldr	r3, [pc, #496]	; 18cbc <__assert_fail@plt+0x7d00>
   18ac8:	ldr	r1, [pc, #496]	; 18cc0 <__assert_fail@plt+0x7d04>
   18acc:	ldr	r0, [r3]
   18ad0:	add	r2, r0, #1
   18ad4:	cmp	r0, r1
   18ad8:	str	r0, [r4, #8]
   18adc:	str	r2, [r3]
   18ae0:	bgt	18c84 <__assert_fail@plt+0x7cc8>
   18ae4:	ldr	r3, [pc, #472]	; 18cc4 <__assert_fail@plt+0x7d08>
   18ae8:	ldr	r3, [r3]
   18aec:	cmp	r0, r3
   18af0:	bge	18bb8 <__assert_fail@plt+0x7bfc>
   18af4:	ldr	r3, [pc, #460]	; 18cc8 <__assert_fail@plt+0x7d0c>
   18af8:	ldr	r3, [r3]
   18afc:	str	r5, [r3, r0, lsl #2]
   18b00:	pop	{r4, r5, r6, r7, r8, pc}
   18b04:	ldr	r3, [r4, #4]
   18b08:	cmp	r3, #0
   18b0c:	bne	18c4c <__assert_fail@plt+0x7c90>
   18b10:	ldr	r2, [pc, #436]	; 18ccc <__assert_fail@plt+0x7d10>
   18b14:	ldr	r0, [pc, #420]	; 18cc0 <__assert_fail@plt+0x7d04>
   18b18:	ldr	r3, [r2]
   18b1c:	add	r1, r3, #1
   18b20:	cmp	r3, r0
   18b24:	str	r3, [r4, #4]
   18b28:	str	r1, [r2]
   18b2c:	bgt	18ca4 <__assert_fail@plt+0x7ce8>
   18b30:	ldr	r2, [pc, #408]	; 18cd0 <__assert_fail@plt+0x7d14>
   18b34:	ldr	r2, [r2]
   18b38:	cmp	r3, r2
   18b3c:	bge	18bac <__assert_fail@plt+0x7bf0>
   18b40:	ldr	r2, [pc, #396]	; 18cd4 <__assert_fail@plt+0x7d18>
   18b44:	rsb	r0, r3, #0
   18b48:	ldr	r2, [r2]
   18b4c:	str	r5, [r2, r3, lsl #2]
   18b50:	pop	{r4, r5, r6, r7, r8, pc}
   18b54:	ldr	r3, [r4, #12]
   18b58:	cmp	r3, #0
   18b5c:	bne	18c60 <__assert_fail@plt+0x7ca4>
   18b60:	ldr	r3, [pc, #368]	; 18cd8 <__assert_fail@plt+0x7d1c>
   18b64:	ldr	r0, [r3]
   18b68:	add	r2, r0, #1
   18b6c:	cmp	r0, #32768	; 0x8000
   18b70:	str	r0, [r4, #12]
   18b74:	str	r2, [r3]
   18b78:	bge	18c94 <__assert_fail@plt+0x7cd8>
   18b7c:	ldr	r3, [pc, #344]	; 18cdc <__assert_fail@plt+0x7d20>
   18b80:	ldr	r3, [r3]
   18b84:	cmp	r0, r3
   18b88:	bge	18ba0 <__assert_fail@plt+0x7be4>
   18b8c:	ldr	r2, [pc, #332]	; 18ce0 <__assert_fail@plt+0x7d24>
   18b90:	sub	r3, r0, #-1073741823	; 0xc0000001
   18b94:	ldr	r2, [r2]
   18b98:	str	r5, [r2, r3, lsl #2]
   18b9c:	pop	{r4, r5, r6, r7, r8, pc}
   18ba0:	bl	16b04 <__assert_fail@plt+0x5b48>
   18ba4:	ldr	r0, [r4, #12]
   18ba8:	b	18b8c <__assert_fail@plt+0x7bd0>
   18bac:	bl	16be4 <__assert_fail@plt+0x5c28>
   18bb0:	ldr	r3, [r4, #4]
   18bb4:	b	18b40 <__assert_fail@plt+0x7b84>
   18bb8:	bl	169b8 <__assert_fail@plt+0x59fc>
   18bbc:	ldr	r0, [r4, #8]
   18bc0:	b	18af4 <__assert_fail@plt+0x7b38>
   18bc4:	mov	r0, #28
   18bc8:	bl	10e90 <malloc@plt>
   18bcc:	subs	r4, r0, #0
   18bd0:	beq	18c80 <__assert_fail@plt+0x7cc4>
   18bd4:	mov	r0, r5
   18bd8:	bl	182a0 <__assert_fail@plt+0x72e4>
   18bdc:	mov	r3, #0
   18be0:	str	r3, [r4, #4]
   18be4:	str	r3, [r4, #8]
   18be8:	str	r3, [r4, #12]
   18bec:	mov	r1, r4
   18bf0:	str	r0, [r4]
   18bf4:	mov	r0, r7
   18bf8:	bl	17f5c <__assert_fail@plt+0x6fa0>
   18bfc:	b	18a9c <__assert_fail@plt+0x7ae0>
   18c00:	mov	r0, r5
   18c04:	bl	10dd0 <free@plt>
   18c08:	ldr	r3, [pc, #212]	; 18ce4 <__assert_fail@plt+0x7d28>
   18c0c:	sub	r6, r6, #3
   18c10:	clz	r6, r6
   18c14:	ldr	r3, [r3]
   18c18:	lsr	r6, r6, #5
   18c1c:	cmp	r3, #0
   18c20:	moveq	r6, #0
   18c24:	cmp	r6, #0
   18c28:	ldr	r0, [r4, #8]
   18c2c:	popeq	{r4, r5, r6, r7, r8, pc}
   18c30:	cmp	r0, #6
   18c34:	ldrle	r3, [pc, #128]	; 18cbc <__assert_fail@plt+0x7d00>
   18c38:	ldrle	r0, [r3]
   18c3c:	addle	r2, r0, #1
   18c40:	strle	r0, [r4, #8]
   18c44:	strle	r2, [r3]
   18c48:	pop	{r4, r5, r6, r7, r8, pc}
   18c4c:	mov	r0, r5
   18c50:	bl	10dd0 <free@plt>
   18c54:	ldr	r0, [r4, #4]
   18c58:	rsb	r0, r0, #0
   18c5c:	pop	{r4, r5, r6, r7, r8, pc}
   18c60:	mov	r0, r5
   18c64:	bl	10dd0 <free@plt>
   18c68:	ldr	r0, [r4, #12]
   18c6c:	pop	{r4, r5, r6, r7, r8, pc}
   18c70:	ldr	r0, [pc, #112]	; 18ce8 <__assert_fail@plt+0x7d2c>
   18c74:	bl	186b0 <__assert_fail@plt+0x76f4>
   18c78:	mov	r0, #1
   18c7c:	bl	10ed8 <exit@plt>
   18c80:	bl	18260 <__assert_fail@plt+0x72a4>
   18c84:	ldr	r0, [pc, #96]	; 18cec <__assert_fail@plt+0x7d30>
   18c88:	bl	186b0 <__assert_fail@plt+0x76f4>
   18c8c:	mov	r0, #1
   18c90:	bl	10ed8 <exit@plt>
   18c94:	ldr	r0, [pc, #84]	; 18cf0 <__assert_fail@plt+0x7d34>
   18c98:	bl	186b0 <__assert_fail@plt+0x76f4>
   18c9c:	mov	r0, #1
   18ca0:	bl	10ed8 <exit@plt>
   18ca4:	ldr	r0, [pc, #72]	; 18cf4 <__assert_fail@plt+0x7d38>
   18ca8:	bl	186b0 <__assert_fail@plt+0x76f4>
   18cac:	mov	r0, #1
   18cb0:	bl	10ed8 <exit@plt>
   18cb4:	andeq	pc, r1, r8, ror #24
   18cb8:	andeq	r1, r3, ip, ror r2
   18cbc:	andeq	r1, r3, r4, lsr r2
   18cc0:	strdeq	r7, [r0], -lr
   18cc4:	andeq	r1, r3, ip, asr #4
   18cc8:	andeq	r1, r3, r8, lsl #5
   18ccc:	muleq	r3, r0, r2
   18cd0:	andeq	r1, r3, ip, asr r2
   18cd4:	andeq	r1, r3, r8, asr r2
   18cd8:			; <UNDEFINED> instruction: 0x000312b8
   18cdc:	andeq	r1, r3, ip, ror #4
   18ce0:	muleq	r3, ip, r2
   18ce4:	strdeq	r1, [r3], -r4
   18ce8:	andeq	pc, r1, r8, asr #25
   18cec:	andeq	pc, r1, r0, lsr #25
   18cf0:			; <UNDEFINED> instruction: 0x0001fcb4
   18cf4:	andeq	pc, r1, r4, lsl #25
   18cf8:	push	{r0, r1, r2, r3}
   18cfc:	ldr	r3, [pc, #160]	; 18da4 <__assert_fail@plt+0x7de8>
   18d00:	ldr	r2, [pc, #160]	; 18da8 <__assert_fail@plt+0x7dec>
   18d04:	push	{r4, r5, r6, lr}
   18d08:	sub	sp, sp, #16
   18d0c:	ldr	r5, [pc, #152]	; 18dac <__assert_fail@plt+0x7df0>
   18d10:	ldr	r1, [r2]
   18d14:	ldr	r4, [pc, #148]	; 18db0 <__assert_fail@plt+0x7df4>
   18d18:	ldr	r0, [r3]
   18d1c:	ldr	r2, [r3, #4]
   18d20:	ldr	ip, [r5]
   18d24:	ldr	r3, [r1, r0, lsl #2]
   18d28:	ldr	r6, [sp, #32]
   18d2c:	str	r2, [sp]
   18d30:	mov	r1, #1
   18d34:	ldr	r2, [pc, #120]	; 18db4 <__assert_fail@plt+0x7df8>
   18d38:	ldr	r0, [r4]
   18d3c:	str	ip, [sp, #12]
   18d40:	bl	10f5c <__fprintf_chk@plt>
   18d44:	add	ip, sp, #36	; 0x24
   18d48:	mov	r2, r6
   18d4c:	mov	r3, ip
   18d50:	mov	r1, #1
   18d54:	ldr	r0, [r4]
   18d58:	str	ip, [sp, #8]
   18d5c:	bl	10ea8 <__vfprintf_chk@plt>
   18d60:	ldr	r1, [r4]
   18d64:	mov	r0, #10
   18d68:	bl	10f74 <fputc@plt>
   18d6c:	ldr	r0, [r4]
   18d70:	bl	1c03c <__assert_fail@plt+0xb080>
   18d74:	ldr	r0, [sp, #12]
   18d78:	ldr	r3, [pc, #56]	; 18db8 <__assert_fail@plt+0x7dfc>
   18d7c:	ldr	r1, [r5]
   18d80:	mov	r2, #1
   18d84:	cmp	r0, r1
   18d88:	strb	r2, [r3]
   18d8c:	bne	18da0 <__assert_fail@plt+0x7de4>
   18d90:	add	sp, sp, #16
   18d94:	pop	{r4, r5, r6, lr}
   18d98:	add	sp, sp, #16
   18d9c:	bx	lr
   18da0:	bl	10e24 <__stack_chk_fail@plt>
   18da4:	andeq	r1, r3, ip, lsr #5
   18da8:	andeq	r1, r3, r8, lsl #5
   18dac:	andeq	r0, r3, r0, lsl lr
   18db0:	andeq	r1, r3, r8, ror #2
   18db4:	andeq	pc, r1, r4, lsl #26
   18db8:	andeq	r1, r3, ip, lsl #5
   18dbc:	push	{r0, r1, r2, r3}
   18dc0:	ldr	r3, [pc, #148]	; 18e5c <__assert_fail@plt+0x7ea0>
   18dc4:	ldr	r2, [pc, #148]	; 18e60 <__assert_fail@plt+0x7ea4>
   18dc8:	push	{r4, r5, r6, lr}
   18dcc:	sub	sp, sp, #16
   18dd0:	ldr	r5, [pc, #140]	; 18e64 <__assert_fail@plt+0x7ea8>
   18dd4:	ldr	r1, [r2]
   18dd8:	ldr	r4, [pc, #136]	; 18e68 <__assert_fail@plt+0x7eac>
   18ddc:	ldr	r0, [r3]
   18de0:	ldr	r2, [r3, #4]
   18de4:	ldr	ip, [r5]
   18de8:	ldr	r3, [r1, r0, lsl #2]
   18dec:	ldr	r6, [sp, #32]
   18df0:	str	r2, [sp]
   18df4:	mov	r1, #1
   18df8:	ldr	r2, [pc, #108]	; 18e6c <__assert_fail@plt+0x7eb0>
   18dfc:	ldr	r0, [r4]
   18e00:	str	ip, [sp, #12]
   18e04:	bl	10f5c <__fprintf_chk@plt>
   18e08:	add	ip, sp, #36	; 0x24
   18e0c:	mov	r2, r6
   18e10:	mov	r3, ip
   18e14:	mov	r1, #1
   18e18:	ldr	r0, [r4]
   18e1c:	str	ip, [sp, #8]
   18e20:	bl	10ea8 <__vfprintf_chk@plt>
   18e24:	ldr	r1, [r4]
   18e28:	mov	r0, #10
   18e2c:	bl	10f74 <fputc@plt>
   18e30:	ldr	r0, [r4]
   18e34:	bl	1c03c <__assert_fail@plt+0xb080>
   18e38:	ldr	r2, [sp, #12]
   18e3c:	ldr	r3, [r5]
   18e40:	cmp	r2, r3
   18e44:	bne	18e58 <__assert_fail@plt+0x7e9c>
   18e48:	add	sp, sp, #16
   18e4c:	pop	{r4, r5, r6, lr}
   18e50:	add	sp, sp, #16
   18e54:	bx	lr
   18e58:	bl	10e24 <__stack_chk_fail@plt>
   18e5c:	andeq	r1, r3, ip, lsr #5
   18e60:	andeq	r1, r3, r8, lsl #5
   18e64:	andeq	r0, r3, r0, lsl lr
   18e68:	andeq	r1, r3, r8, ror #2
   18e6c:	andeq	pc, r1, r8, lsr #26
   18e70:	push	{r4, lr}
   18e74:	bl	10ed8 <exit@plt>
   18e78:	push	{r4, lr}
   18e7c:	ldr	r0, [pc, #12]	; 18e90 <__assert_fail@plt+0x7ed4>
   18e80:	bl	10e84 <puts@plt>
   18e84:	ldr	r0, [pc, #8]	; 18e94 <__assert_fail@plt+0x7ed8>
   18e88:	pop	{r4, lr}
   18e8c:	b	10e84 <puts@plt>
   18e90:	andeq	r0, r2, r0, ror #15
   18e94:	andeq	r0, r2, r4, lsl r8
   18e98:	push	{lr}		; (str lr, [sp, #-4]!)
   18e9c:	sub	sp, sp, #12
   18ea0:	ldr	r2, [pc, #28]	; 18ec4 <__assert_fail@plt+0x7f08>
   18ea4:	ldr	r3, [pc, #28]	; 18ec8 <__assert_fail@plt+0x7f0c>
   18ea8:	str	r2, [sp]
   18eac:	ldr	r1, [pc, #24]	; 18ecc <__assert_fail@plt+0x7f10>
   18eb0:	ldr	r2, [pc, #24]	; 18ed0 <__assert_fail@plt+0x7f14>
   18eb4:	mov	r0, #1
   18eb8:	bl	10f38 <__printf_chk@plt>
   18ebc:	add	sp, sp, #12
   18ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ec4:	andeq	r0, r2, r8, asr #16
   18ec8:	andeq	r0, r2, r4, lsr r8
   18ecc:	andeq	r0, r2, ip, lsr r8
   18ed0:	andeq	ip, r1, r0, ror #14
   18ed4:	push	{lr}		; (str lr, [sp, #-4]!)
   18ed8:	mov	r2, r0
   18edc:	sub	sp, sp, #12
   18ee0:	ldr	r1, [pc, #48]	; 18f18 <__assert_fail@plt+0x7f5c>
   18ee4:	mov	r0, #1
   18ee8:	bl	10f38 <__printf_chk@plt>
   18eec:	ldr	r2, [pc, #40]	; 18f1c <__assert_fail@plt+0x7f60>
   18ef0:	ldr	r3, [pc, #40]	; 18f20 <__assert_fail@plt+0x7f64>
   18ef4:	str	r2, [sp]
   18ef8:	ldr	r1, [pc, #36]	; 18f24 <__assert_fail@plt+0x7f68>
   18efc:	ldr	r2, [pc, #36]	; 18f28 <__assert_fail@plt+0x7f6c>
   18f00:	mov	r0, #1
   18f04:	bl	10f38 <__printf_chk@plt>
   18f08:	ldr	r0, [pc, #28]	; 18f2c <__assert_fail@plt+0x7f70>
   18f0c:	add	sp, sp, #12
   18f10:	pop	{lr}		; (ldr lr, [sp], #4)
   18f14:	b	10e84 <puts@plt>
   18f18:	andeq	r0, r2, ip, lsr #17
   18f1c:	andeq	r0, r2, r8, asr #16
   18f20:	andeq	r0, r2, r4, lsr r8
   18f24:	andeq	r0, r2, ip, lsr r8
   18f28:	andeq	ip, r1, r0, ror #14
   18f2c:			; <UNDEFINED> instruction: 0x000208b0
   18f30:	push	{r4, r5, r6, r7, r8, lr}
   18f34:	subs	r8, r2, #0
   18f38:	beq	18fa4 <__assert_fail@plt+0x7fe8>
   18f3c:	cmp	r8, #1
   18f40:	beq	18fb8 <__assert_fail@plt+0x7ffc>
   18f44:	cmp	r1, #0
   18f48:	sub	r4, r1, #1
   18f4c:	add	r3, r3, r4
   18f50:	add	r4, r0, r4
   18f54:	pople	{r4, r5, r6, r7, r8, pc}
   18f58:	ldr	r2, [pc, #108]	; 18fcc <__assert_fail@plt+0x8010>
   18f5c:	sub	r0, r0, #1
   18f60:	mov	r5, r3
   18f64:	mov	r6, #0
   18f68:	ldrb	ip, [r4], #-1
   18f6c:	cmp	r0, r4
   18f70:	mla	ip, r8, ip, r6
   18f74:	smull	r6, r7, ip, r2
   18f78:	asr	lr, ip, #31
   18f7c:	rsb	lr, lr, r7, asr #2
   18f80:	mov	r6, lr
   18f84:	add	lr, lr, lr, lsl #2
   18f88:	sub	ip, ip, lr, lsl #1
   18f8c:	strb	ip, [r5], #-1
   18f90:	bne	18f68 <__assert_fail@plt+0x7fac>
   18f94:	cmp	r6, #0
   18f98:	rsb	r1, r1, #0
   18f9c:	strbne	r6, [r3, r1]
   18fa0:	pop	{r4, r5, r6, r7, r8, pc}
   18fa4:	mov	r2, r1
   18fa8:	mov	r0, r3
   18fac:	mov	r1, r8
   18fb0:	pop	{r4, r5, r6, r7, r8, lr}
   18fb4:	b	10f14 <memset@plt>
   18fb8:	mov	r2, r1
   18fbc:	pop	{r4, r5, r6, r7, r8, lr}
   18fc0:	mov	r1, r0
   18fc4:	mov	r0, r3
   18fc8:	b	10df4 <memcpy@plt>
   18fcc:	strbtvs	r6, [r6], -r7, ror #12
   18fd0:	push	{r4, r5, r6, lr}
   18fd4:	ldrb	ip, [r2]
   18fd8:	ldmib	r0, {r5, r6}
   18fdc:	ldr	lr, [sp, #16]
   18fe0:	cmp	ip, #0
   18fe4:	subeq	r4, r1, #1
   18fe8:	movne	r4, r1
   18fec:	add	ip, r4, r3
   18ff0:	add	r5, r5, r6
   18ff4:	cmp	r5, ip
   18ff8:	blt	19150 <__assert_fail@plt+0x8194>
   18ffc:	mvn	r3, r3
   19000:	ldr	ip, [r0, #24]
   19004:	add	r5, r5, r3
   19008:	sub	r1, r1, #1
   1900c:	cmp	lr, #0
   19010:	rsb	r4, r4, #0
   19014:	add	ip, ip, r5
   19018:	add	r2, r2, r1
   1901c:	bne	190b8 <__assert_fail@plt+0x80fc>
   19020:	mov	r1, lr
   19024:	add	r5, r2, r4
   19028:	mov	lr, ip
   1902c:	b	19060 <__assert_fail@plt+0x80a4>
   19030:	ldrsb	r3, [r2], #-1
   19034:	ldrb	r0, [lr], #-1
   19038:	add	r3, r3, r1
   1903c:	add	r3, r3, r0
   19040:	uxtb	r3, r3
   19044:	sxtb	r1, r3
   19048:	cmp	r1, #9
   1904c:	strble	r1, [lr, #1]
   19050:	movgt	r1, #1
   19054:	movle	r1, #0
   19058:	subgt	r0, r3, #10
   1905c:	strbgt	r0, [lr, #1]
   19060:	cmp	r2, r5
   19064:	bne	19030 <__assert_fail@plt+0x8074>
   19068:	cmp	r1, #0
   1906c:	add	r2, ip, r4
   19070:	popeq	{r4, r5, r6, pc}
   19074:	ldrb	r3, [ip, r4]
   19078:	add	r3, r3, #1
   1907c:	uxtb	r3, r3
   19080:	sxtb	r1, r3
   19084:	cmp	r1, #9
   19088:	strb	r1, [ip, r4]
   1908c:	pople	{r4, r5, r6, pc}
   19090:	sub	r3, r3, #10
   19094:	strb	r3, [r2], #-1
   19098:	ldrb	r3, [r2]
   1909c:	add	r3, r3, #1
   190a0:	uxtb	r3, r3
   190a4:	sxtb	r1, r3
   190a8:	cmp	r1, #9
   190ac:	strb	r1, [r2]
   190b0:	bgt	19090 <__assert_fail@plt+0x80d4>
   190b4:	pop	{r4, r5, r6, pc}
   190b8:	add	r6, r2, r4
   190bc:	mov	r3, ip
   190c0:	mov	r5, #0
   190c4:	b	190f8 <__assert_fail@plt+0x813c>
   190c8:	ldrsb	r0, [r2], #-1
   190cc:	ldrb	r1, [r3], #-1
   190d0:	add	r0, r0, r5
   190d4:	sub	r1, r1, r0
   190d8:	uxtb	r1, r1
   190dc:	sxtb	r0, r1
   190e0:	cmp	r0, #0
   190e4:	movge	r5, #0
   190e8:	movlt	r5, lr
   190ec:	addlt	r1, r1, #10
   190f0:	strbge	r0, [r3, #1]
   190f4:	strblt	r1, [r3, #1]
   190f8:	cmp	r2, r6
   190fc:	bne	190c8 <__assert_fail@plt+0x810c>
   19100:	cmp	r5, #0
   19104:	add	r2, ip, r4
   19108:	popeq	{r4, r5, r6, pc}
   1910c:	ldrb	r3, [ip, r4]
   19110:	sub	r3, r3, #1
   19114:	uxtb	r3, r3
   19118:	sxtb	r1, r3
   1911c:	cmp	r1, #0
   19120:	strb	r1, [ip, r4]
   19124:	popge	{r4, r5, r6, pc}
   19128:	add	r3, r3, #10
   1912c:	strb	r3, [r2], #-1
   19130:	ldrb	r3, [r2]
   19134:	sub	r3, r3, #1
   19138:	uxtb	r3, r3
   1913c:	sxtb	r1, r3
   19140:	cmp	r1, #0
   19144:	strb	r1, [r2]
   19148:	blt	19128 <__assert_fail@plt+0x816c>
   1914c:	pop	{r4, r5, r6, pc}
   19150:	ldr	r3, [pc, #12]	; 19164 <__assert_fail@plt+0x81a8>
   19154:	ldr	r2, [pc, #12]	; 19168 <__assert_fail@plt+0x81ac>
   19158:	ldr	r1, [pc, #12]	; 1916c <__assert_fail@plt+0x81b0>
   1915c:	ldr	r0, [pc, #12]	; 19170 <__assert_fail@plt+0x81b4>
   19160:	bl	10fbc <__assert_fail@plt>
   19164:	muleq	r2, r8, fp
   19168:	andeq	r0, r0, sl, lsr #5
   1916c:	andeq	r0, r2, r0, asr #23
   19170:	andeq	r0, r2, ip, asr #23
   19174:	ldr	r3, [pc, #108]	; 191e8 <__assert_fail@plt+0x822c>
   19178:	push	{r4, r5, lr}
   1917c:	mov	r5, r0
   19180:	ldr	r0, [r3]
   19184:	sub	sp, sp, #12
   19188:	cmp	r0, #0
   1918c:	beq	191c0 <__assert_fail@plt+0x8204>
   19190:	ldr	r2, [r0, #16]
   19194:	str	r2, [r3]
   19198:	mov	r3, #0
   1919c:	mov	r2, #1
   191a0:	str	r5, [r0, #4]
   191a4:	str	r1, [r0, #24]
   191a8:	str	r3, [r0]
   191ac:	str	r3, [r0, #8]
   191b0:	str	r3, [r0, #20]
   191b4:	str	r2, [r0, #12]
   191b8:	add	sp, sp, #12
   191bc:	pop	{r4, r5, pc}
   191c0:	mov	r0, #28
   191c4:	str	r1, [sp, #4]
   191c8:	bl	10e90 <malloc@plt>
   191cc:	ldr	r1, [sp, #4]
   191d0:	cmp	r0, #0
   191d4:	mov	r4, r0
   191d8:	bne	19198 <__assert_fail@plt+0x81dc>
   191dc:	bl	18260 <__assert_fail@plt+0x72a4>
   191e0:	str	r4, [r4]
   191e4:	udf	#0
   191e8:	andeq	r1, r3, r8, lsl #4
   191ec:	ldr	r3, [r0, #4]
   191f0:	ldr	ip, [r1, #4]
   191f4:	push	{r4, r5, r6, r7, r8, lr}
   191f8:	cmp	r3, ip
   191fc:	beq	19258 <__assert_fail@plt+0x829c>
   19200:	bgt	19238 <__assert_fail@plt+0x827c>
   19204:	cmp	r2, #0
   19208:	beq	19330 <__assert_fail@plt+0x8374>
   1920c:	ldr	r3, [r0]
   19210:	cmp	r3, #0
   19214:	movne	r3, #1
   19218:	mvneq	r3, #0
   1921c:	mov	r0, r3
   19220:	pop	{r4, r5, r6, r7, r8, pc}
   19224:	beq	192b8 <__assert_fail@plt+0x82fc>
   19228:	ldrb	lr, [r5]
   1922c:	ldrb	r4, [r7]
   19230:	cmp	r4, lr
   19234:	bcs	19204 <__assert_fail@plt+0x8248>
   19238:	cmp	r2, #0
   1923c:	beq	192e8 <__assert_fail@plt+0x832c>
   19240:	ldr	r3, [r0]
   19244:	cmp	r3, #0
   19248:	mvnne	r3, #0
   1924c:	moveq	r3, #1
   19250:	mov	r0, r3
   19254:	pop	{r4, r5, r6, r7, r8, pc}
   19258:	ldr	r8, [r0, #8]
   1925c:	ldr	r6, [r1, #8]
   19260:	ldr	r7, [r1, #24]
   19264:	cmp	r8, r6
   19268:	addle	r3, r3, r8
   1926c:	addgt	r3, r3, r6
   19270:	cmp	r3, #0
   19274:	ldr	r5, [r0, #24]
   19278:	ble	19224 <__assert_fail@plt+0x8268>
   1927c:	ldrb	lr, [r5]
   19280:	ldrb	r4, [r7]
   19284:	cmp	r4, lr
   19288:	bne	19230 <__assert_fail@plt+0x8274>
   1928c:	add	ip, r5, #1
   19290:	add	r1, r7, #1
   19294:	b	192a8 <__assert_fail@plt+0x82ec>
   19298:	ldrb	lr, [ip], #1
   1929c:	ldrb	r4, [r1], #1
   192a0:	cmp	lr, r4
   192a4:	bne	19230 <__assert_fail@plt+0x8274>
   192a8:	subs	r3, r3, #1
   192ac:	mov	r5, ip
   192b0:	mov	r7, r1
   192b4:	bne	19298 <__assert_fail@plt+0x82dc>
   192b8:	cmp	r8, r6
   192bc:	beq	19328 <__assert_fail@plt+0x836c>
   192c0:	ble	192f4 <__assert_fail@plt+0x8338>
   192c4:	sub	r3, r8, r6
   192c8:	add	r6, r5, r3
   192cc:	b	192d8 <__assert_fail@plt+0x831c>
   192d0:	cmp	r5, r6
   192d4:	beq	1921c <__assert_fail@plt+0x8260>
   192d8:	ldrb	r3, [r5], #1
   192dc:	cmp	r3, #0
   192e0:	beq	192d0 <__assert_fail@plt+0x8314>
   192e4:	b	19238 <__assert_fail@plt+0x827c>
   192e8:	mov	r3, #1
   192ec:	mov	r0, r3
   192f0:	pop	{r4, r5, r6, r7, r8, pc}
   192f4:	subs	r3, r6, r8
   192f8:	beq	1921c <__assert_fail@plt+0x8260>
   192fc:	ldrb	ip, [r7]
   19300:	add	r1, r7, #1
   19304:	cmp	ip, #0
   19308:	addeq	r3, r7, r3
   1930c:	beq	19320 <__assert_fail@plt+0x8364>
   19310:	b	19204 <__assert_fail@plt+0x8248>
   19314:	ldrb	ip, [r1], #1
   19318:	cmp	ip, #0
   1931c:	bne	19204 <__assert_fail@plt+0x8248>
   19320:	cmp	r3, r1
   19324:	bne	19314 <__assert_fail@plt+0x8358>
   19328:	mov	r3, #0
   1932c:	b	1921c <__assert_fail@plt+0x8260>
   19330:	mvn	r3, #0
   19334:	b	1921c <__assert_fail@plt+0x8260>
   19338:	ldr	r3, [pc, #160]	; 193e0 <__assert_fail@plt+0x8424>
   1933c:	push	{r4, r5, r6, lr}
   19340:	mov	r6, r0
   19344:	ldr	r4, [r3]
   19348:	sub	sp, sp, #8
   1934c:	cmp	r4, #0
   19350:	beq	193b4 <__assert_fail@plt+0x83f8>
   19354:	ldr	r2, [r4, #16]
   19358:	str	r2, [r3]
   1935c:	add	r5, r6, r1
   19360:	mov	r2, #0
   19364:	mov	r3, #1
   19368:	str	r6, [r4, #4]
   1936c:	str	r1, [r4, #8]
   19370:	mov	r0, r5
   19374:	str	r2, [r4]
   19378:	str	r3, [r4, #12]
   1937c:	bl	10e90 <malloc@plt>
   19380:	cmp	r0, #0
   19384:	str	r0, [r4, #20]
   19388:	beq	193a8 <__assert_fail@plt+0x83ec>
   1938c:	str	r0, [r4, #24]
   19390:	mov	r2, r5
   19394:	mov	r1, #0
   19398:	bl	10f14 <memset@plt>
   1939c:	mov	r0, r4
   193a0:	add	sp, sp, #8
   193a4:	pop	{r4, r5, r6, pc}
   193a8:	bl	18260 <__assert_fail@plt+0x72a4>
   193ac:	ldr	r0, [r4, #20]
   193b0:	b	1938c <__assert_fail@plt+0x83d0>
   193b4:	mov	r0, #28
   193b8:	str	r1, [sp, #4]
   193bc:	bl	10e90 <malloc@plt>
   193c0:	ldr	r1, [sp, #4]
   193c4:	cmp	r0, #0
   193c8:	mov	r5, r0
   193cc:	mov	r4, r0
   193d0:	bne	1935c <__assert_fail@plt+0x83a0>
   193d4:	bl	18260 <__assert_fail@plt+0x72a4>
   193d8:	str	r5, [r5]
   193dc:	udf	#0
   193e0:	andeq	r1, r3, r8, lsl #4
   193e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   193e8:	mov	r6, r1
   193ec:	ldr	r1, [r0, #8]
   193f0:	ldr	r4, [r6, #8]
   193f4:	ldr	r8, [r6, #4]
   193f8:	ldr	r3, [r0, #4]
   193fc:	cmp	r4, r1
   19400:	movlt	r4, r1
   19404:	cmp	r8, r3
   19408:	movlt	r8, r3
   1940c:	add	r8, r8, #1
   19410:	cmp	r4, r2
   19414:	mov	r5, r2
   19418:	movge	r1, r4
   1941c:	movlt	r1, r2
   19420:	mov	r7, r0
   19424:	mov	r0, r8
   19428:	bl	19338 <__assert_fail@plt+0x837c>
   1942c:	cmp	r4, r5
   19430:	bge	19458 <__assert_fail@plt+0x849c>
   19434:	ldr	r1, [r0, #24]
   19438:	add	r3, r4, r8
   1943c:	sub	r5, r5, r4
   19440:	add	r3, r1, r3
   19444:	add	r5, r3, r5
   19448:	mov	r2, #0
   1944c:	strb	r2, [r3], #1
   19450:	cmp	r5, r3
   19454:	bne	1944c <__assert_fail@plt+0x8490>
   19458:	ldmib	r7, {r1, r3}
   1945c:	ldr	r9, [r6, #8]
   19460:	ldr	ip, [r6, #4]
   19464:	sub	r4, r4, #1
   19468:	ldr	lr, [r0, #24]
   1946c:	add	r4, r4, r8
   19470:	add	r1, r1, r3
   19474:	ldr	r5, [r7, #24]
   19478:	add	ip, ip, r9
   1947c:	ldr	r2, [r6, #24]
   19480:	sub	r8, r1, #1
   19484:	add	lr, lr, r4
   19488:	cmp	r3, r9
   1948c:	sub	r4, ip, #1
   19490:	add	r5, r5, r8
   19494:	add	r2, r2, r4
   19498:	beq	194d0 <__assert_fail@plt+0x8514>
   1949c:	ble	195dc <__assert_fail@plt+0x8620>
   194a0:	sub	r3, r9, r3
   194a4:	add	r4, r5, r3
   194a8:	add	r1, lr, #1
   194ac:	ldrb	ip, [r5], #-1
   194b0:	cmp	r4, r5
   194b4:	strb	ip, [r1, #-1]!
   194b8:	bne	194ac <__assert_fail@plt+0x84f0>
   194bc:	ldr	r1, [r7, #4]
   194c0:	ldr	ip, [r6, #4]
   194c4:	add	r1, r1, r9
   194c8:	add	ip, ip, r9
   194cc:	add	lr, lr, r3
   194d0:	cmp	ip, #0
   194d4:	cmpgt	r1, #0
   194d8:	movgt	r4, #1
   194dc:	movle	r4, #0
   194e0:	ble	1952c <__assert_fail@plt+0x8570>
   194e4:	mov	r4, #0
   194e8:	ldrb	r6, [r2], #-1
   194ec:	ldrb	r3, [r5], #-1
   194f0:	sub	r1, r1, #1
   194f4:	sub	ip, ip, #1
   194f8:	add	r3, r3, r6
   194fc:	add	r3, r3, r4
   19500:	mov	r4, #1
   19504:	uxtb	r3, r3
   19508:	cmp	r3, #9
   1950c:	sub	r6, r3, #10
   19510:	strbls	r3, [lr]
   19514:	strbhi	r6, [lr]
   19518:	movls	r4, #0
   1951c:	cmp	r1, #0
   19520:	cmpgt	ip, #0
   19524:	sub	lr, lr, #1
   19528:	bgt	194e8 <__assert_fail@plt+0x852c>
   1952c:	cmp	r1, #0
   19530:	moveq	r1, ip
   19534:	movne	r2, r5
   19538:	cmp	r1, #0
   1953c:	ble	1957c <__assert_fail@plt+0x85c0>
   19540:	sub	r6, r2, r1
   19544:	mov	ip, lr
   19548:	ldrb	r3, [r2], #-1
   1954c:	sub	ip, ip, #1
   19550:	add	r3, r3, r4
   19554:	mov	r4, #1
   19558:	uxtb	r3, r3
   1955c:	cmp	r3, #9
   19560:	sub	r5, r3, #10
   19564:	strbls	r3, [ip, #1]
   19568:	strbhi	r5, [ip, #1]
   1956c:	movls	r4, #0
   19570:	cmp	r2, r6
   19574:	bne	19548 <__assert_fail@plt+0x858c>
   19578:	sub	lr, lr, r1
   1957c:	cmp	r4, #1
   19580:	ldrbeq	r3, [lr]
   19584:	addeq	r3, r3, #1
   19588:	strbeq	r3, [lr]
   1958c:	ldr	r3, [r0, #24]
   19590:	ldrb	r2, [r3]
   19594:	cmp	r2, #0
   19598:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   1959c:	ldr	ip, [r0, #4]
   195a0:	cmp	ip, #1
   195a4:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   195a8:	sub	r2, ip, #1
   195ac:	add	ip, r3, ip
   195b0:	add	r3, r3, #1
   195b4:	str	r3, [r0, #24]
   195b8:	str	r2, [r0, #4]
   195bc:	ldrb	r1, [r3]
   195c0:	sub	r2, r2, #1
   195c4:	add	r3, r3, #1
   195c8:	cmp	r1, #0
   195cc:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   195d0:	cmp	ip, r3
   195d4:	bne	195b4 <__assert_fail@plt+0x85f8>
   195d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195dc:	sublt	r9, r3, r9
   195e0:	addlt	r4, r2, r9
   195e4:	addlt	r1, lr, #1
   195e8:	bge	194d0 <__assert_fail@plt+0x8514>
   195ec:	ldrb	ip, [r2], #-1
   195f0:	cmp	r4, r2
   195f4:	strb	ip, [r1, #-1]!
   195f8:	bne	195ec <__assert_fail@plt+0x8630>
   195fc:	ldr	r1, [r7, #4]
   19600:	ldr	ip, [r6, #4]
   19604:	add	r1, r1, r3
   19608:	add	ip, ip, r3
   1960c:	add	lr, lr, r9
   19610:	b	194d0 <__assert_fail@plt+0x8514>
   19614:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19618:	mov	r7, r1
   1961c:	ldr	r1, [r0, #4]
   19620:	ldmib	r7, {r5, r6}
   19624:	ldr	r3, [r0, #8]
   19628:	mov	fp, r2
   1962c:	cmp	r5, r1
   19630:	movlt	r4, r1
   19634:	movge	r4, r5
   19638:	cmp	r6, r3
   1963c:	movge	r9, r6
   19640:	movlt	r9, r3
   19644:	cmp	r5, r1
   19648:	movge	r5, r1
   1964c:	cmp	r6, r3
   19650:	movge	r6, r3
   19654:	cmp	r9, r2
   19658:	movge	r1, r9
   1965c:	movlt	r1, r2
   19660:	mov	r8, r0
   19664:	mov	r0, r4
   19668:	bl	19338 <__assert_fail@plt+0x837c>
   1966c:	cmp	r9, fp
   19670:	add	sl, r4, r9
   19674:	bge	19698 <__assert_fail@plt+0x86dc>
   19678:	ldr	r3, [r0, #24]
   1967c:	sub	r9, fp, r9
   19680:	add	r3, r3, sl
   19684:	add	r9, r3, r9
   19688:	mov	r2, #0
   1968c:	strb	r2, [r3], #1
   19690:	cmp	r9, r3
   19694:	bne	1968c <__assert_fail@plt+0x86d0>
   19698:	ldmib	r8, {r1, r3}
   1969c:	ldr	r9, [r7, #8]
   196a0:	ldr	lr, [r7, #4]
   196a4:	add	r1, r3, r1
   196a8:	ldr	ip, [r8, #24]
   196ac:	sub	r1, r1, #1
   196b0:	add	lr, r9, lr
   196b4:	ldr	r7, [r7, #24]
   196b8:	ldr	r2, [r0, #24]
   196bc:	sub	lr, lr, #1
   196c0:	add	ip, ip, r1
   196c4:	cmp	r3, r6
   196c8:	sub	r1, sl, #1
   196cc:	add	lr, r7, lr
   196d0:	add	r1, r2, r1
   196d4:	beq	197e4 <__assert_fail@plt+0x8828>
   196d8:	sub	r7, r3, r6
   196dc:	cmp	r7, #0
   196e0:	ble	19838 <__assert_fail@plt+0x887c>
   196e4:	add	r2, r2, sl
   196e8:	sub	r9, ip, r7
   196ec:	mov	r3, ip
   196f0:	ldrb	r8, [r3], #-1
   196f4:	cmp	r9, r3
   196f8:	strb	r8, [r2, #-1]!
   196fc:	bne	196f0 <__assert_fail@plt+0x8734>
   19700:	rsb	r3, r7, #0
   19704:	add	ip, ip, r3
   19708:	add	r1, r1, r3
   1970c:	mov	r2, #0
   19710:	add	r6, r5, r6
   19714:	cmp	r6, #0
   19718:	ble	19754 <__assert_fail@plt+0x8798>
   1971c:	rsb	r6, r6, #0
   19720:	add	r9, r1, r6
   19724:	mov	r7, ip
   19728:	ldrb	r3, [r7], #-1
   1972c:	ldrb	r8, [lr], #-1
   19730:	sub	r3, r3, r8
   19734:	subs	r3, r3, r2
   19738:	addmi	r3, r3, #10
   1973c:	mov	r2, #0
   19740:	strb	r3, [r1], #-1
   19744:	movmi	r2, #1
   19748:	cmp	r9, r1
   1974c:	bne	19728 <__assert_fail@plt+0x876c>
   19750:	add	ip, ip, r6
   19754:	cmp	r4, r5
   19758:	beq	19794 <__assert_fail@plt+0x87d8>
   1975c:	sub	r4, r4, r5
   19760:	cmp	r4, #0
   19764:	ble	19794 <__assert_fail@plt+0x87d8>
   19768:	sub	r4, ip, r4
   1976c:	ldrb	r3, [ip], #-1
   19770:	sub	r2, r3, r2
   19774:	cmn	r2, #1
   19778:	uxtbne	r3, r2
   1977c:	moveq	r3, #9
   19780:	movne	r2, #0
   19784:	moveq	r2, #1
   19788:	cmp	r4, ip
   1978c:	strb	r3, [r1], #-1
   19790:	bne	1976c <__assert_fail@plt+0x87b0>
   19794:	ldr	r3, [r0, #24]
   19798:	ldrb	r2, [r3]
   1979c:	cmp	r2, #0
   197a0:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197a4:	ldr	ip, [r0, #4]
   197a8:	cmp	ip, #1
   197ac:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197b0:	sub	r2, ip, #1
   197b4:	add	ip, r3, ip
   197b8:	add	r3, r3, #1
   197bc:	str	r3, [r0, #24]
   197c0:	str	r2, [r0, #4]
   197c4:	ldrb	r1, [r3]
   197c8:	sub	r2, r2, #1
   197cc:	add	r3, r3, #1
   197d0:	cmp	r1, #0
   197d4:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197d8:	cmp	ip, r3
   197dc:	bne	197bc <__assert_fail@plt+0x8800>
   197e0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197e4:	sub	r9, r9, r6
   197e8:	cmp	r9, #0
   197ec:	ble	19838 <__assert_fail@plt+0x887c>
   197f0:	sub	sl, r1, r9
   197f4:	mov	r7, r1
   197f8:	mov	r8, lr
   197fc:	mov	r2, #0
   19800:	ldrb	r3, [r8], #-1
   19804:	rsb	r3, r3, #0
   19808:	subs	r2, r3, r2
   1980c:	mov	r3, r2
   19810:	addne	r3, r2, #10
   19814:	movne	r2, #1
   19818:	uxtbne	r3, r3
   1981c:	strb	r3, [r7], #-1
   19820:	cmp	sl, r7
   19824:	bne	19800 <__assert_fail@plt+0x8844>
   19828:	rsb	r9, r9, #0
   1982c:	add	lr, lr, r9
   19830:	add	r1, r1, r9
   19834:	b	19710 <__assert_fail@plt+0x8754>
   19838:	mov	r2, #0
   1983c:	b	19710 <__assert_fail@plt+0x8754>
   19840:	ldr	r3, [r0]
   19844:	cmp	r3, #0
   19848:	bxeq	lr
   1984c:	ldr	r2, [r3, #12]
   19850:	push	{r4, lr}
   19854:	sub	r2, r2, #1
   19858:	cmp	r2, #0
   1985c:	mov	r4, r0
   19860:	str	r2, [r3, #12]
   19864:	bne	19890 <__assert_fail@plt+0x88d4>
   19868:	ldr	r0, [r3, #20]
   1986c:	cmp	r0, #0
   19870:	beq	1987c <__assert_fail@plt+0x88c0>
   19874:	bl	10dd0 <free@plt>
   19878:	ldr	r3, [r4]
   1987c:	ldr	r2, [pc, #24]	; 1989c <__assert_fail@plt+0x88e0>
   19880:	ldr	r1, [r2]
   19884:	str	r1, [r3, #16]
   19888:	ldr	r3, [r4]
   1988c:	str	r3, [r2]
   19890:	mov	r3, #0
   19894:	str	r3, [r4]
   19898:	pop	{r4, pc}
   1989c:	andeq	r1, r3, r8, lsl #4
   198a0:	push	{r4, lr}
   198a4:	mov	r1, #0
   198a8:	mov	r0, #1
   198ac:	bl	19338 <__assert_fail@plt+0x837c>
   198b0:	ldr	r3, [pc, #68]	; 198fc <__assert_fail@plt+0x8940>
   198b4:	mov	r1, #0
   198b8:	str	r0, [r3]
   198bc:	mov	r0, #1
   198c0:	bl	19338 <__assert_fail@plt+0x837c>
   198c4:	ldr	r1, [pc, #52]	; 19900 <__assert_fail@plt+0x8944>
   198c8:	mov	r3, #1
   198cc:	ldr	r2, [r0, #24]
   198d0:	str	r0, [r1]
   198d4:	mov	r0, r3
   198d8:	strb	r3, [r2]
   198dc:	mov	r1, #0
   198e0:	bl	19338 <__assert_fail@plt+0x837c>
   198e4:	ldr	r1, [pc, #24]	; 19904 <__assert_fail@plt+0x8948>
   198e8:	mov	r2, #2
   198ec:	ldr	r3, [r0, #24]
   198f0:	str	r0, [r1]
   198f4:	strb	r2, [r3]
   198f8:	pop	{r4, pc}
   198fc:	andeq	r1, r3, r8, asr #5
   19900:	andeq	r1, r3, r0, asr #5
   19904:	andeq	r1, r3, r4, asr #5
   19908:	ldr	r3, [r0, #12]
   1990c:	add	r3, r3, #1
   19910:	str	r3, [r0, #12]
   19914:	bx	lr
   19918:	ldr	r3, [pc, #20]	; 19934 <__assert_fail@plt+0x8978>
   1991c:	ldr	r3, [r3]
   19920:	ldr	r2, [r3, #12]
   19924:	add	r2, r2, #1
   19928:	str	r2, [r3, #12]
   1992c:	str	r3, [r0]
   19930:	bx	lr
   19934:	andeq	r1, r3, r8, asr #5
   19938:	ldr	r3, [r0]
   1993c:	ldr	r2, [r1]
   19940:	cmp	r3, r2
   19944:	beq	19958 <__assert_fail@plt+0x899c>
   19948:	cmp	r3, #0
   1994c:	moveq	r0, #1
   19950:	mvnne	r0, #0
   19954:	bx	lr
   19958:	mov	r2, #1
   1995c:	b	191ec <__assert_fail@plt+0x8230>
   19960:	ldr	r0, [r0]
   19964:	sub	r0, r0, #1
   19968:	clz	r0, r0
   1996c:	lsr	r0, r0, #5
   19970:	bx	lr
   19974:	ldr	r3, [pc, #100]	; 199e0 <__assert_fail@plt+0x8a24>
   19978:	ldr	r3, [r3]
   1997c:	cmp	r3, r0
   19980:	beq	199d0 <__assert_fail@plt+0x8a14>
   19984:	ldr	r3, [r0, #4]
   19988:	ldr	r1, [r0, #8]
   1998c:	ldr	r2, [r0, #24]
   19990:	add	r3, r3, r1
   19994:	cmp	r3, #0
   19998:	ble	199c4 <__assert_fail@plt+0x8a08>
   1999c:	ldrb	r0, [r2]
   199a0:	add	r2, r2, #1
   199a4:	cmp	r0, #0
   199a8:	beq	199bc <__assert_fail@plt+0x8a00>
   199ac:	b	199d8 <__assert_fail@plt+0x8a1c>
   199b0:	ldrb	r1, [r2], #1
   199b4:	cmp	r1, #0
   199b8:	bxne	lr
   199bc:	subs	r3, r3, #1
   199c0:	bne	199b0 <__assert_fail@plt+0x89f4>
   199c4:	clz	r0, r3
   199c8:	lsr	r0, r0, #5
   199cc:	bx	lr
   199d0:	mov	r0, #1
   199d4:	bx	lr
   199d8:	mov	r0, #0
   199dc:	bx	lr
   199e0:	andeq	r1, r3, r8, asr #5
   199e4:	ldmib	r0, {r3, ip}
   199e8:	ldr	r2, [r0, #24]
   199ec:	cmp	r1, ip
   199f0:	addle	r1, r3, r1
   199f4:	addgt	r1, r3, ip
   199f8:	cmp	r1, #0
   199fc:	ble	19a54 <__assert_fail@plt+0x8a98>
   19a00:	ldrb	r0, [r2]
   19a04:	add	r3, r2, #1
   19a08:	cmp	r0, #0
   19a0c:	beq	19a20 <__assert_fail@plt+0x8a64>
   19a10:	b	19a30 <__assert_fail@plt+0x8a74>
   19a14:	ldrb	r2, [r3], #1
   19a18:	cmp	r2, #0
   19a1c:	bne	19a30 <__assert_fail@plt+0x8a74>
   19a20:	subs	r1, r1, #1
   19a24:	bne	19a14 <__assert_fail@plt+0x8a58>
   19a28:	mov	r0, #1
   19a2c:	bx	lr
   19a30:	cmp	r1, #1
   19a34:	beq	19a40 <__assert_fail@plt+0x8a84>
   19a38:	mov	r0, #0
   19a3c:	bx	lr
   19a40:	ldrb	r0, [r3, #-1]
   19a44:	sub	r0, r0, #1
   19a48:	clz	r0, r0
   19a4c:	lsr	r0, r0, #5
   19a50:	bx	lr
   19a54:	moveq	r0, #1
   19a58:	movne	r0, #0
   19a5c:	bx	lr
   19a60:	push	{r4, r5, r6, r7, r8, lr}
   19a64:	mov	r5, r0
   19a68:	ldr	lr, [r0]
   19a6c:	ldr	ip, [r1]
   19a70:	mov	r4, r2
   19a74:	cmp	lr, ip
   19a78:	mov	r6, r3
   19a7c:	bne	19ab8 <__assert_fail@plt+0x8afc>
   19a80:	mov	r2, #0
   19a84:	mov	r7, r1
   19a88:	bl	191ec <__assert_fail@plt+0x8230>
   19a8c:	subs	r8, r0, #0
   19a90:	beq	19ad0 <__assert_fail@plt+0x8b14>
   19a94:	cmp	r8, #1
   19a98:	beq	19b34 <__assert_fail@plt+0x8b78>
   19a9c:	cmn	r8, #1
   19aa0:	movne	r6, #0
   19aa4:	beq	19b0c <__assert_fail@plt+0x8b50>
   19aa8:	mov	r0, r4
   19aac:	bl	19840 <__assert_fail@plt+0x8884>
   19ab0:	str	r6, [r4]
   19ab4:	pop	{r4, r5, r6, r7, r8, pc}
   19ab8:	mov	r2, r3
   19abc:	bl	193e4 <__assert_fail@plt+0x8428>
   19ac0:	ldr	r3, [r5]
   19ac4:	mov	r6, r0
   19ac8:	str	r3, [r0]
   19acc:	b	19aa8 <__assert_fail@plt+0x8aec>
   19ad0:	ldr	r3, [r7, #8]
   19ad4:	ldr	r5, [r5, #8]
   19ad8:	cmp	r6, r3
   19adc:	movlt	r6, r3
   19ae0:	cmp	r6, r5
   19ae4:	movge	r5, r6
   19ae8:	mov	r1, r5
   19aec:	mov	r0, #1
   19af0:	bl	19338 <__assert_fail@plt+0x837c>
   19af4:	add	r2, r5, #1
   19af8:	mov	r1, r8
   19afc:	mov	r6, r0
   19b00:	ldr	r0, [r0, #24]
   19b04:	bl	10f14 <memset@plt>
   19b08:	b	19aa8 <__assert_fail@plt+0x8aec>
   19b0c:	mov	r2, r6
   19b10:	mov	r1, r5
   19b14:	mov	r0, r7
   19b18:	bl	19614 <__assert_fail@plt+0x8658>
   19b1c:	ldr	r3, [r7]
   19b20:	clz	r3, r3
   19b24:	lsr	r3, r3, #5
   19b28:	mov	r6, r0
   19b2c:	str	r3, [r0]
   19b30:	b	19aa8 <__assert_fail@plt+0x8aec>
   19b34:	mov	r2, r6
   19b38:	mov	r1, r7
   19b3c:	mov	r0, r5
   19b40:	bl	19614 <__assert_fail@plt+0x8658>
   19b44:	ldr	r3, [r5]
   19b48:	mov	r6, r0
   19b4c:	str	r3, [r0]
   19b50:	b	19aa8 <__assert_fail@plt+0x8aec>
   19b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b58:	mov	r4, r3
   19b5c:	ldr	ip, [pc, #2096]	; 1a394 <__assert_fail@plt+0x93d8>
   19b60:	add	r5, r1, r4
   19b64:	mov	r9, r1
   19b68:	ldr	r1, [pc, #2088]	; 1a398 <__assert_fail@plt+0x93dc>
   19b6c:	ldr	r3, [ip]
   19b70:	sub	sp, sp, #76	; 0x4c
   19b74:	ldr	r1, [r1]
   19b78:	cmp	r5, r3
   19b7c:	mov	r6, r0
   19b80:	mov	sl, r2
   19b84:	str	r1, [sp, #68]	; 0x44
   19b88:	ldr	r8, [sp, #112]	; 0x70
   19b8c:	blt	19bac <__assert_fail@plt+0x8bf0>
   19b90:	cmp	r3, #0
   19b94:	add	r2, r3, #3
   19b98:	movlt	r3, r2
   19b9c:	asr	r3, r3, #2
   19ba0:	cmp	r3, r9
   19ba4:	cmple	r3, r4
   19ba8:	ble	19cc4 <__assert_fail@plt+0x8d08>
   19bac:	mov	r1, #0
   19bb0:	add	r0, r5, #1
   19bb4:	bl	19338 <__assert_fail@plt+0x837c>
   19bb8:	ldr	r3, [sl, #24]
   19bbc:	sub	lr, r4, #1
   19bc0:	add	lr, r3, lr
   19bc4:	cmp	r5, #0
   19bc8:	sub	r3, r9, #1
   19bcc:	str	r3, [sp, #28]
   19bd0:	ldr	r2, [r0, #24]
   19bd4:	str	r0, [r8]
   19bd8:	add	r2, r2, r5
   19bdc:	str	r2, [sp, #24]
   19be0:	ldr	r8, [r6, #24]
   19be4:	mov	r0, #0
   19be8:	ble	19ca0 <__assert_fail@plt+0x8ce4>
   19bec:	sub	r3, r4, #2
   19bf0:	ldr	sl, [pc, #1956]	; 1a39c <__assert_fail@plt+0x93e0>
   19bf4:	add	r3, r3, r9
   19bf8:	mov	r7, r0
   19bfc:	mov	fp, r8
   19c00:	mov	r9, r2
   19c04:	str	r3, [sp, #16]
   19c08:	rsb	r3, r4, #1
   19c0c:	str	r3, [sp, #20]
   19c10:	sub	r3, r7, r4
   19c14:	cmn	r3, #1
   19c18:	ldrge	r3, [sp, #16]
   19c1c:	ldrlt	r2, [sp, #28]
   19c20:	subge	r2, r3, r7
   19c24:	cmp	r4, r7
   19c28:	rsbgt	r3, r7, #0
   19c2c:	ldrle	r3, [sp, #20]
   19c30:	add	r2, r8, r2
   19c34:	add	r3, lr, r3
   19c38:	cmp	r2, fp
   19c3c:	cmpcs	lr, r3
   19c40:	bcc	19c5c <__assert_fail@plt+0x8ca0>
   19c44:	ldrb	ip, [r2], #-1
   19c48:	ldrb	r1, [r3], #1
   19c4c:	cmp	lr, r3
   19c50:	cmpcs	r2, fp
   19c54:	mla	r0, ip, r1, r0
   19c58:	bcs	19c44 <__assert_fail@plt+0x8c88>
   19c5c:	smull	r2, r3, r0, sl
   19c60:	add	r7, r7, #1
   19c64:	strd	r2, [sp, #8]
   19c68:	ldr	r3, [sp, #12]
   19c6c:	asr	r2, r0, #31
   19c70:	cmp	r5, r7
   19c74:	rsb	r3, r2, r3, asr #2
   19c78:	add	r2, r3, r3, lsl #2
   19c7c:	sub	r0, r0, r2, lsl #1
   19c80:	strb	r0, [r9], #-1
   19c84:	mov	r0, r3
   19c88:	ldrne	fp, [r6, #24]
   19c8c:	bne	19c10 <__assert_fail@plt+0x8c54>
   19c90:	ldr	r3, [sp, #24]
   19c94:	uxtb	r0, r0
   19c98:	sub	r3, r3, r5
   19c9c:	str	r3, [sp, #24]
   19ca0:	ldr	r3, [sp, #24]
   19ca4:	strb	r0, [r3]
   19ca8:	ldr	r3, [pc, #1768]	; 1a398 <__assert_fail@plt+0x93dc>
   19cac:	ldr	r2, [sp, #68]	; 0x44
   19cb0:	ldr	r3, [r3]
   19cb4:	cmp	r2, r3
   19cb8:	bne	1a390 <__assert_fail@plt+0x93d4>
   19cbc:	add	sp, sp, #76	; 0x4c
   19cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cc4:	cmp	r9, r4
   19cc8:	movge	r7, r9
   19ccc:	movlt	r7, r4
   19cd0:	add	r7, r7, #1
   19cd4:	ldr	r1, [r0, #24]
   19cd8:	add	r7, r7, r7, lsr #31
   19cdc:	asr	r7, r7, #1
   19ce0:	cmp	r9, r7
   19ce4:	blt	1a124 <__assert_fail@plt+0x9168>
   19ce8:	sub	r9, r9, r7
   19cec:	mov	r0, r9
   19cf0:	bl	19174 <__assert_fail@plt+0x81b8>
   19cf4:	ldr	r1, [r6, #24]
   19cf8:	ldr	r6, [pc, #1696]	; 1a3a0 <__assert_fail@plt+0x93e4>
   19cfc:	add	r1, r1, r9
   19d00:	str	r0, [sp, #36]	; 0x24
   19d04:	mov	r0, r7
   19d08:	bl	19174 <__assert_fail@plt+0x81b8>
   19d0c:	cmp	r4, r7
   19d10:	ldr	r1, [sl, #24]
   19d14:	str	r0, [sp, #32]
   19d18:	bge	1a154 <__assert_fail@plt+0x9198>
   19d1c:	ldr	r3, [r6]
   19d20:	mov	r0, r4
   19d24:	str	r3, [sp, #44]	; 0x2c
   19d28:	ldr	r2, [r3, #12]
   19d2c:	add	r2, r2, #1
   19d30:	str	r2, [r3, #12]
   19d34:	bl	19174 <__assert_fail@plt+0x81b8>
   19d38:	mov	r2, r0
   19d3c:	str	r0, [sp, #40]	; 0x28
   19d40:	ldr	r0, [sp, #36]	; 0x24
   19d44:	ldr	r3, [r0, #24]
   19d48:	ldrb	r1, [r3]
   19d4c:	cmp	r1, #0
   19d50:	bne	19d94 <__assert_fail@plt+0x8dd8>
   19d54:	ldr	lr, [r0, #4]
   19d58:	cmp	lr, #1
   19d5c:	ble	19d94 <__assert_fail@plt+0x8dd8>
   19d60:	sub	r1, lr, #1
   19d64:	add	lr, r3, lr
   19d68:	add	r3, r3, #1
   19d6c:	b	19d7c <__assert_fail@plt+0x8dc0>
   19d70:	cmp	lr, r3
   19d74:	sub	r1, r1, #1
   19d78:	beq	19d94 <__assert_fail@plt+0x8dd8>
   19d7c:	str	r3, [r0, #24]
   19d80:	str	r1, [r0, #4]
   19d84:	ldrb	ip, [r3]
   19d88:	add	r3, r3, #1
   19d8c:	cmp	ip, #0
   19d90:	beq	19d70 <__assert_fail@plt+0x8db4>
   19d94:	ldr	r1, [sp, #32]
   19d98:	ldr	r3, [r1, #24]
   19d9c:	ldrb	ip, [r3]
   19da0:	cmp	ip, #0
   19da4:	bne	19de8 <__assert_fail@plt+0x8e2c>
   19da8:	ldr	r4, [r1, #4]
   19dac:	cmp	r4, #1
   19db0:	ble	19de8 <__assert_fail@plt+0x8e2c>
   19db4:	sub	ip, r4, #1
   19db8:	add	r4, r3, r4
   19dbc:	add	r3, r3, #1
   19dc0:	b	19dd0 <__assert_fail@plt+0x8e14>
   19dc4:	cmp	r4, r3
   19dc8:	sub	ip, ip, #1
   19dcc:	beq	19de8 <__assert_fail@plt+0x8e2c>
   19dd0:	str	r3, [r1, #24]
   19dd4:	str	ip, [r1, #4]
   19dd8:	ldrb	lr, [r3]
   19ddc:	add	r3, r3, #1
   19de0:	cmp	lr, #0
   19de4:	beq	19dc4 <__assert_fail@plt+0x8e08>
   19de8:	ldr	lr, [sp, #44]	; 0x2c
   19dec:	ldr	r3, [lr, #24]
   19df0:	ldrb	ip, [r3]
   19df4:	cmp	ip, #0
   19df8:	bne	19e3c <__assert_fail@plt+0x8e80>
   19dfc:	ldr	r9, [lr, #4]
   19e00:	cmp	r9, #1
   19e04:	ble	19e3c <__assert_fail@plt+0x8e80>
   19e08:	sub	ip, r9, #1
   19e0c:	add	r9, r3, r9
   19e10:	add	r3, r3, #1
   19e14:	b	19e24 <__assert_fail@plt+0x8e68>
   19e18:	cmp	r9, r3
   19e1c:	sub	ip, ip, #1
   19e20:	beq	19e3c <__assert_fail@plt+0x8e80>
   19e24:	str	r3, [lr, #24]
   19e28:	str	ip, [lr, #4]
   19e2c:	ldrb	r4, [r3]
   19e30:	add	r3, r3, #1
   19e34:	cmp	r4, #0
   19e38:	beq	19e18 <__assert_fail@plt+0x8e5c>
   19e3c:	ldr	r3, [r2, #24]
   19e40:	ldrb	ip, [r3]
   19e44:	cmp	ip, #0
   19e48:	bne	19e8c <__assert_fail@plt+0x8ed0>
   19e4c:	ldr	r9, [r2, #4]
   19e50:	cmp	r9, #1
   19e54:	ble	19e8c <__assert_fail@plt+0x8ed0>
   19e58:	sub	ip, r9, #1
   19e5c:	add	r9, r3, r9
   19e60:	add	r3, r3, #1
   19e64:	b	19e74 <__assert_fail@plt+0x8eb8>
   19e68:	cmp	r9, r3
   19e6c:	sub	ip, ip, #1
   19e70:	beq	19e8c <__assert_fail@plt+0x8ed0>
   19e74:	str	r3, [r2, #24]
   19e78:	str	ip, [r2, #4]
   19e7c:	ldrb	r4, [r3]
   19e80:	add	r3, r3, #1
   19e84:	cmp	r4, #0
   19e88:	beq	19e68 <__assert_fail@plt+0x8eac>
   19e8c:	ldr	ip, [r6]
   19e90:	cmp	r0, ip
   19e94:	beq	19ed4 <__assert_fail@plt+0x8f18>
   19e98:	ldmib	r0, {r3, r4}
   19e9c:	ldr	r2, [r0, #24]
   19ea0:	add	r3, r3, r4
   19ea4:	cmp	r3, #0
   19ea8:	ble	1a1dc <__assert_fail@plt+0x9220>
   19eac:	ldrb	r4, [r2]
   19eb0:	add	r2, r2, #1
   19eb4:	cmp	r4, #0
   19eb8:	beq	19ecc <__assert_fail@plt+0x8f10>
   19ebc:	b	1a1e0 <__assert_fail@plt+0x9224>
   19ec0:	ldrb	r4, [r2], #1
   19ec4:	cmp	r4, #0
   19ec8:	bne	1a1e0 <__assert_fail@plt+0x9224>
   19ecc:	subs	r3, r3, #1
   19ed0:	bne	19ec0 <__assert_fail@plt+0x8f04>
   19ed4:	ldr	r3, [ip, #12]
   19ed8:	add	sl, sp, #60	; 0x3c
   19edc:	add	r3, r3, #2
   19ee0:	str	r3, [ip, #12]
   19ee4:	mov	r2, sl
   19ee8:	mov	r3, #0
   19eec:	str	ip, [sp, #60]	; 0x3c
   19ef0:	str	ip, [sp, #64]	; 0x40
   19ef4:	bl	19a60 <__assert_fail@plt+0x8aa4>
   19ef8:	ldr	ip, [sp, #60]	; 0x3c
   19efc:	add	fp, sp, #64	; 0x40
   19f00:	mov	r3, #0
   19f04:	ldr	ip, [ip, #4]
   19f08:	mov	r2, fp
   19f0c:	ldrd	r0, [sp, #40]	; 0x28
   19f10:	str	ip, [sp, #20]
   19f14:	bl	19a60 <__assert_fail@plt+0x8aa4>
   19f18:	ldr	r3, [sp, #64]	; 0x40
   19f1c:	ldr	r3, [r3, #4]
   19f20:	str	r3, [sp, #16]
   19f24:	ldr	r3, [r6]
   19f28:	mov	r2, #1
   19f2c:	str	r2, [sp, #8]
   19f30:	ldr	r2, [r3, #12]
   19f34:	add	r9, sp, #72	; 0x48
   19f38:	add	r2, r2, #1
   19f3c:	str	r3, [r9, #-24]!	; 0xffffffe8
   19f40:	str	r2, [r3, #12]
   19f44:	ldr	r0, [sp, #60]	; 0x3c
   19f48:	cmp	r0, r3
   19f4c:	beq	19f90 <__assert_fail@plt+0x8fd4>
   19f50:	ldr	ip, [r0, #4]
   19f54:	ldr	r2, [r0, #8]
   19f58:	ldr	r1, [r0, #24]
   19f5c:	add	r2, ip, r2
   19f60:	cmp	r2, #0
   19f64:	ble	1a2ac <__assert_fail@plt+0x92f0>
   19f68:	ldrb	ip, [r1]
   19f6c:	add	r1, r1, #1
   19f70:	cmp	ip, #0
   19f74:	beq	19f88 <__assert_fail@plt+0x8fcc>
   19f78:	b	1a2b0 <__assert_fail@plt+0x92f4>
   19f7c:	ldrb	ip, [r1], #1
   19f80:	cmp	ip, #0
   19f84:	bne	1a2b0 <__assert_fail@plt+0x92f4>
   19f88:	subs	r2, r2, #1
   19f8c:	bne	19f7c <__assert_fail@plt+0x8fc0>
   19f90:	ldr	r2, [r3, #12]
   19f94:	add	r4, sp, #72	; 0x48
   19f98:	add	r2, r2, #1
   19f9c:	str	r2, [r3, #12]
   19fa0:	str	r3, [r4, #-20]!	; 0xffffffec
   19fa4:	ldr	r0, [sp, #32]
   19fa8:	cmp	r0, r3
   19fac:	beq	19ff8 <__assert_fail@plt+0x903c>
   19fb0:	ldr	r2, [r0, #4]
   19fb4:	ldr	r1, [r0, #24]
   19fb8:	mov	ip, r2
   19fbc:	str	r2, [sp, #16]
   19fc0:	ldr	r2, [r0, #8]
   19fc4:	add	r2, ip, r2
   19fc8:	cmp	r2, #0
   19fcc:	ble	1a180 <__assert_fail@plt+0x91c4>
   19fd0:	ldrb	ip, [r1]
   19fd4:	add	r1, r1, #1
   19fd8:	cmp	ip, #0
   19fdc:	beq	19ff0 <__assert_fail@plt+0x9034>
   19fe0:	b	1a184 <__assert_fail@plt+0x91c8>
   19fe4:	ldrb	ip, [r1], #1
   19fe8:	cmp	ip, #0
   19fec:	bne	1a184 <__assert_fail@plt+0x91c8>
   19ff0:	subs	r2, r2, #1
   19ff4:	bne	19fe4 <__assert_fail@plt+0x9028>
   19ff8:	ldr	r2, [r3, #12]
   19ffc:	add	r6, sp, #72	; 0x48
   1a000:	add	r2, r2, #1
   1a004:	str	r2, [r3, #12]
   1a008:	str	r3, [r6, #-16]!
   1a00c:	add	r0, r5, #1
   1a010:	mov	r1, #0
   1a014:	bl	19338 <__assert_fail@plt+0x837c>
   1a018:	ldr	r2, [sp, #8]
   1a01c:	cmp	r2, #0
   1a020:	mov	r3, r0
   1a024:	str	r0, [r8]
   1a028:	bne	1a068 <__assert_fail@plt+0x90ac>
   1a02c:	ldr	r1, [sp, #48]	; 0x30
   1a030:	ldr	r5, [sp, #8]
   1a034:	lsl	r3, r7, #1
   1a038:	ldr	r2, [r1, #24]
   1a03c:	ldr	r1, [r1, #4]
   1a040:	str	r5, [sp]
   1a044:	bl	18fd0 <__assert_fail@plt+0x8014>
   1a048:	ldr	r1, [sp, #48]	; 0x30
   1a04c:	ldr	r0, [r8]
   1a050:	mov	r3, r7
   1a054:	ldr	r2, [r1, #24]
   1a058:	ldr	r1, [r1, #4]
   1a05c:	str	r5, [sp]
   1a060:	bl	18fd0 <__assert_fail@plt+0x8014>
   1a064:	ldr	r3, [r8]
   1a068:	ldr	r1, [sp, #56]	; 0x38
   1a06c:	mov	r5, #0
   1a070:	mov	r0, r3
   1a074:	ldr	r2, [r1, #24]
   1a078:	mov	r3, r7
   1a07c:	ldr	r1, [r1, #4]
   1a080:	str	r5, [sp]
   1a084:	bl	18fd0 <__assert_fail@plt+0x8014>
   1a088:	ldr	r1, [sp, #56]	; 0x38
   1a08c:	ldr	r0, [r8]
   1a090:	mov	r3, r5
   1a094:	ldr	r2, [r1, #24]
   1a098:	ldr	r1, [r1, #4]
   1a09c:	str	r5, [sp]
   1a0a0:	bl	18fd0 <__assert_fail@plt+0x8014>
   1a0a4:	ldr	r1, [sp, #60]	; 0x3c
   1a0a8:	ldr	r2, [sp, #64]	; 0x40
   1a0ac:	ldr	r3, [sp, #52]	; 0x34
   1a0b0:	ldr	ip, [r1]
   1a0b4:	ldr	lr, [r2]
   1a0b8:	ldr	r1, [r3, #4]
   1a0bc:	subs	ip, ip, lr
   1a0c0:	movne	ip, #1
   1a0c4:	ldr	r2, [r3, #24]
   1a0c8:	ldr	r0, [r8]
   1a0cc:	mov	r3, r7
   1a0d0:	str	ip, [sp]
   1a0d4:	bl	18fd0 <__assert_fail@plt+0x8014>
   1a0d8:	add	r0, sp, #36	; 0x24
   1a0dc:	bl	19840 <__assert_fail@plt+0x8884>
   1a0e0:	add	r0, sp, #32
   1a0e4:	bl	19840 <__assert_fail@plt+0x8884>
   1a0e8:	add	r0, sp, #44	; 0x2c
   1a0ec:	bl	19840 <__assert_fail@plt+0x8884>
   1a0f0:	mov	r0, r9
   1a0f4:	bl	19840 <__assert_fail@plt+0x8884>
   1a0f8:	add	r0, sp, #40	; 0x28
   1a0fc:	bl	19840 <__assert_fail@plt+0x8884>
   1a100:	mov	r0, r4
   1a104:	bl	19840 <__assert_fail@plt+0x8884>
   1a108:	mov	r0, r6
   1a10c:	bl	19840 <__assert_fail@plt+0x8884>
   1a110:	mov	r0, sl
   1a114:	bl	19840 <__assert_fail@plt+0x8884>
   1a118:	mov	r0, fp
   1a11c:	bl	19840 <__assert_fail@plt+0x8884>
   1a120:	b	19ca8 <__assert_fail@plt+0x8cec>
   1a124:	ldr	r6, [pc, #628]	; 1a3a0 <__assert_fail@plt+0x93e4>
   1a128:	mov	r0, r9
   1a12c:	ldr	r3, [r6]
   1a130:	str	r3, [sp, #36]	; 0x24
   1a134:	ldr	r2, [r3, #12]
   1a138:	add	r2, r2, #1
   1a13c:	str	r2, [r3, #12]
   1a140:	bl	19174 <__assert_fail@plt+0x81b8>
   1a144:	cmp	r4, r7
   1a148:	ldr	r1, [sl, #24]
   1a14c:	str	r0, [sp, #32]
   1a150:	blt	19d1c <__assert_fail@plt+0x8d60>
   1a154:	sub	r4, r4, r7
   1a158:	mov	r0, r4
   1a15c:	bl	19174 <__assert_fail@plt+0x81b8>
   1a160:	ldr	r1, [sl, #24]
   1a164:	add	r1, r1, r4
   1a168:	str	r0, [sp, #44]	; 0x2c
   1a16c:	mov	r0, r7
   1a170:	bl	19174 <__assert_fail@plt+0x81b8>
   1a174:	mov	r2, r0
   1a178:	str	r0, [sp, #40]	; 0x28
   1a17c:	b	19d40 <__assert_fail@plt+0x8d84>
   1a180:	beq	19ff8 <__assert_fail@plt+0x903c>
   1a184:	ldr	r2, [sp, #40]	; 0x28
   1a188:	cmp	r2, r3
   1a18c:	beq	19ff8 <__assert_fail@plt+0x903c>
   1a190:	ldr	r1, [r2, #4]
   1a194:	ldr	ip, [r2, #24]
   1a198:	mov	lr, r1
   1a19c:	str	r1, [sp, #20]
   1a1a0:	ldr	r1, [r2, #8]
   1a1a4:	add	r1, lr, r1
   1a1a8:	cmp	r1, #0
   1a1ac:	ble	1a320 <__assert_fail@plt+0x9364>
   1a1b0:	ldrb	lr, [ip]
   1a1b4:	add	ip, ip, #1
   1a1b8:	cmp	lr, #0
   1a1bc:	beq	1a1d0 <__assert_fail@plt+0x9214>
   1a1c0:	b	1a324 <__assert_fail@plt+0x9368>
   1a1c4:	ldrb	lr, [ip], #1
   1a1c8:	cmp	lr, #0
   1a1cc:	bne	1a324 <__assert_fail@plt+0x9368>
   1a1d0:	subs	r1, r1, #1
   1a1d4:	bne	1a1c4 <__assert_fail@plt+0x9208>
   1a1d8:	b	19ff8 <__assert_fail@plt+0x903c>
   1a1dc:	beq	19ed4 <__assert_fail@plt+0x8f18>
   1a1e0:	cmp	lr, ip
   1a1e4:	beq	19ed4 <__assert_fail@plt+0x8f18>
   1a1e8:	ldr	r4, [lr, #4]
   1a1ec:	ldr	r2, [lr, #8]
   1a1f0:	ldr	r3, [lr, #24]
   1a1f4:	add	r4, r4, r2
   1a1f8:	cmp	r4, #0
   1a1fc:	ble	1a228 <__assert_fail@plt+0x926c>
   1a200:	ldrb	r2, [r3]
   1a204:	add	r3, r3, #1
   1a208:	cmp	r2, #0
   1a20c:	beq	1a220 <__assert_fail@plt+0x9264>
   1a210:	b	1a33c <__assert_fail@plt+0x9380>
   1a214:	ldrb	r2, [r3], #1
   1a218:	cmp	r2, #0
   1a21c:	bne	1a33c <__assert_fail@plt+0x9380>
   1a220:	subs	r4, r4, #1
   1a224:	bne	1a214 <__assert_fail@plt+0x9258>
   1a228:	ldr	r3, [ip, #12]
   1a22c:	add	sl, sp, #60	; 0x3c
   1a230:	add	r3, r3, #2
   1a234:	str	r3, [ip, #12]
   1a238:	mov	r2, sl
   1a23c:	mov	r3, #0
   1a240:	str	ip, [sp, #60]	; 0x3c
   1a244:	str	ip, [sp, #64]	; 0x40
   1a248:	bl	19a60 <__assert_fail@plt+0x8aa4>
   1a24c:	ldr	ip, [sp, #60]	; 0x3c
   1a250:	add	fp, sp, #64	; 0x40
   1a254:	mov	r3, #0
   1a258:	ldr	ip, [ip, #4]
   1a25c:	mov	r2, fp
   1a260:	ldrd	r0, [sp, #40]	; 0x28
   1a264:	str	ip, [sp, #20]
   1a268:	bl	19a60 <__assert_fail@plt+0x8aa4>
   1a26c:	ldr	r3, [sp, #64]	; 0x40
   1a270:	cmp	r4, #0
   1a274:	ldr	r3, [r3, #4]
   1a278:	str	r3, [sp, #16]
   1a27c:	beq	19f24 <__assert_fail@plt+0x8f68>
   1a280:	ldr	r2, [sp, #44]	; 0x2c
   1a284:	ldr	r0, [sp, #36]	; 0x24
   1a288:	add	r9, sp, #48	; 0x30
   1a28c:	ldr	r3, [r2, #4]
   1a290:	ldr	r1, [r0, #4]
   1a294:	str	r9, [sp]
   1a298:	bl	19b54 <__assert_fail@plt+0x8b98>
   1a29c:	mov	r2, #0
   1a2a0:	ldr	r3, [r6]
   1a2a4:	str	r2, [sp, #8]
   1a2a8:	b	19f44 <__assert_fail@plt+0x8f88>
   1a2ac:	beq	19f90 <__assert_fail@plt+0x8fd4>
   1a2b0:	ldr	r2, [sp, #64]	; 0x40
   1a2b4:	cmp	r2, r3
   1a2b8:	beq	19f90 <__assert_fail@plt+0x8fd4>
   1a2bc:	ldr	lr, [r2, #4]
   1a2c0:	ldr	r1, [r2, #8]
   1a2c4:	ldr	ip, [r2, #24]
   1a2c8:	add	r1, lr, r1
   1a2cc:	cmp	r1, #0
   1a2d0:	ble	1a300 <__assert_fail@plt+0x9344>
   1a2d4:	ldrb	lr, [ip]
   1a2d8:	add	ip, ip, #1
   1a2dc:	cmp	lr, #0
   1a2e0:	beq	1a2f4 <__assert_fail@plt+0x9338>
   1a2e4:	b	1a304 <__assert_fail@plt+0x9348>
   1a2e8:	ldrb	lr, [ip], #1
   1a2ec:	cmp	lr, #0
   1a2f0:	bne	1a304 <__assert_fail@plt+0x9348>
   1a2f4:	subs	r1, r1, #1
   1a2f8:	bne	1a2e8 <__assert_fail@plt+0x932c>
   1a2fc:	b	19f90 <__assert_fail@plt+0x8fd4>
   1a300:	beq	19f90 <__assert_fail@plt+0x8fd4>
   1a304:	add	r4, sp, #52	; 0x34
   1a308:	ldr	r3, [sp, #16]
   1a30c:	ldr	r1, [sp, #20]
   1a310:	str	r4, [sp]
   1a314:	bl	19b54 <__assert_fail@plt+0x8b98>
   1a318:	ldr	r3, [r6]
   1a31c:	b	19fa4 <__assert_fail@plt+0x8fe8>
   1a320:	beq	19ff8 <__assert_fail@plt+0x903c>
   1a324:	add	r6, sp, #56	; 0x38
   1a328:	ldr	r3, [sp, #20]
   1a32c:	ldr	r1, [sp, #16]
   1a330:	str	r6, [sp]
   1a334:	bl	19b54 <__assert_fail@plt+0x8b98>
   1a338:	b	1a00c <__assert_fail@plt+0x9050>
   1a33c:	ldr	r3, [ip, #12]
   1a340:	add	sl, sp, #60	; 0x3c
   1a344:	add	r3, r3, #2
   1a348:	str	r3, [ip, #12]
   1a34c:	mov	r2, sl
   1a350:	mov	r3, #0
   1a354:	str	ip, [sp, #60]	; 0x3c
   1a358:	str	ip, [sp, #64]	; 0x40
   1a35c:	bl	19a60 <__assert_fail@plt+0x8aa4>
   1a360:	ldr	ip, [sp, #60]	; 0x3c
   1a364:	add	fp, sp, #64	; 0x40
   1a368:	mov	r3, #0
   1a36c:	ldr	ip, [ip, #4]
   1a370:	mov	r2, fp
   1a374:	ldrd	r0, [sp, #40]	; 0x28
   1a378:	str	ip, [sp, #20]
   1a37c:	bl	19a60 <__assert_fail@plt+0x8aa4>
   1a380:	ldr	r3, [sp, #64]	; 0x40
   1a384:	ldr	r3, [r3, #4]
   1a388:	str	r3, [sp, #16]
   1a38c:	b	1a280 <__assert_fail@plt+0x92c4>
   1a390:	bl	10e24 <__stack_chk_fail@plt>
   1a394:	andeq	r1, r3, ip, asr r1
   1a398:	andeq	r0, r3, r0, lsl lr
   1a39c:	strbtvs	r6, [r6], -r7, ror #12
   1a3a0:	andeq	r1, r3, r8, asr #5
   1a3a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a3a8:	mov	r6, r0
   1a3ac:	ldr	lr, [r0]
   1a3b0:	ldr	ip, [r1]
   1a3b4:	mov	r5, r2
   1a3b8:	cmp	lr, ip
   1a3bc:	mov	r4, r3
   1a3c0:	beq	1a474 <__assert_fail@plt+0x94b8>
   1a3c4:	mov	r2, #0
   1a3c8:	mov	r7, r1
   1a3cc:	bl	191ec <__assert_fail@plt+0x8230>
   1a3d0:	subs	r9, r0, #0
   1a3d4:	beq	1a438 <__assert_fail@plt+0x947c>
   1a3d8:	cmp	r9, #1
   1a3dc:	beq	1a418 <__assert_fail@plt+0x945c>
   1a3e0:	cmn	r9, #1
   1a3e4:	movne	r8, #0
   1a3e8:	bne	1a408 <__assert_fail@plt+0x944c>
   1a3ec:	mov	r2, r4
   1a3f0:	mov	r1, r6
   1a3f4:	mov	r0, r7
   1a3f8:	bl	19614 <__assert_fail@plt+0x8658>
   1a3fc:	ldr	r3, [r7]
   1a400:	mov	r8, r0
   1a404:	str	r3, [r0]
   1a408:	mov	r0, r5
   1a40c:	bl	19840 <__assert_fail@plt+0x8884>
   1a410:	str	r8, [r5]
   1a414:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a418:	mov	r2, r4
   1a41c:	mov	r1, r7
   1a420:	mov	r0, r6
   1a424:	bl	19614 <__assert_fail@plt+0x8658>
   1a428:	ldr	r3, [r6]
   1a42c:	mov	r8, r0
   1a430:	str	r3, [r0]
   1a434:	b	1a408 <__assert_fail@plt+0x944c>
   1a438:	ldr	r3, [r7, #8]
   1a43c:	ldr	r2, [r6, #8]
   1a440:	cmp	r4, r3
   1a444:	movlt	r4, r3
   1a448:	cmp	r4, r2
   1a44c:	movlt	r4, r2
   1a450:	mov	r1, r4
   1a454:	mov	r0, #1
   1a458:	bl	19338 <__assert_fail@plt+0x837c>
   1a45c:	add	r2, r4, #1
   1a460:	mov	r1, r9
   1a464:	mov	r8, r0
   1a468:	ldr	r0, [r0, #24]
   1a46c:	bl	10f14 <memset@plt>
   1a470:	b	1a408 <__assert_fail@plt+0x944c>
   1a474:	mov	r2, r3
   1a478:	bl	193e4 <__assert_fail@plt+0x8428>
   1a47c:	ldr	r3, [r6]
   1a480:	mov	r8, r0
   1a484:	str	r3, [r0]
   1a488:	b	1a408 <__assert_fail@plt+0x944c>
   1a48c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a490:	mov	r9, r1
   1a494:	ldr	r6, [r1, #8]
   1a498:	ldr	r4, [r0, #8]
   1a49c:	cmp	r6, r3
   1a4a0:	ldr	r7, [pc, #344]	; 1a600 <__assert_fail@plt+0x9644>
   1a4a4:	movge	r5, r6
   1a4a8:	movlt	r5, r3
   1a4ac:	ldr	r1, [r0, #4]
   1a4b0:	ldr	r3, [r9, #4]
   1a4b4:	sub	sp, sp, #20
   1a4b8:	cmp	r5, r4
   1a4bc:	add	sl, r4, r6
   1a4c0:	movlt	r5, r4
   1a4c4:	add	r6, r6, r3
   1a4c8:	add	r4, r4, r1
   1a4cc:	ldr	ip, [r7]
   1a4d0:	add	lr, sp, #8
   1a4d4:	cmp	r5, sl
   1a4d8:	mov	r1, r4
   1a4dc:	mov	r3, r6
   1a4e0:	mov	r8, r2
   1a4e4:	str	lr, [sp]
   1a4e8:	mov	r2, r9
   1a4ec:	movge	r5, sl
   1a4f0:	mov	fp, r0
   1a4f4:	str	ip, [sp, #12]
   1a4f8:	bl	19b54 <__assert_fail@plt+0x8b98>
   1a4fc:	ldr	r1, [sp, #8]
   1a500:	ldr	r3, [fp]
   1a504:	ldr	r0, [r9]
   1a508:	ldr	r2, [r1, #20]
   1a50c:	add	r4, r4, r6
   1a510:	subs	r3, r3, r0
   1a514:	add	r4, r4, #1
   1a518:	movne	r3, #1
   1a51c:	sub	sl, r4, sl
   1a520:	str	r3, [r1]
   1a524:	str	r5, [r1, #8]
   1a528:	str	sl, [r1, #4]
   1a52c:	str	r2, [r1, #24]
   1a530:	ldrb	r3, [r2]
   1a534:	cmp	r3, #0
   1a538:	bne	1a57c <__assert_fail@plt+0x95c0>
   1a53c:	cmp	sl, #1
   1a540:	ble	1a57c <__assert_fail@plt+0x95c0>
   1a544:	sub	r0, sl, #1
   1a548:	add	r3, r2, #1
   1a54c:	add	sl, r2, sl
   1a550:	b	1a560 <__assert_fail@plt+0x95a4>
   1a554:	cmp	r3, sl
   1a558:	sub	r0, r0, #1
   1a55c:	beq	1a57c <__assert_fail@plt+0x95c0>
   1a560:	str	r3, [r1, #24]
   1a564:	str	r0, [r1, #4]
   1a568:	ldrb	ip, [r3]
   1a56c:	mov	r2, r3
   1a570:	add	r3, r3, #1
   1a574:	cmp	ip, #0
   1a578:	beq	1a554 <__assert_fail@plt+0x9598>
   1a57c:	ldr	r3, [pc, #128]	; 1a604 <__assert_fail@plt+0x9648>
   1a580:	ldr	r3, [r3]
   1a584:	cmp	r1, r3
   1a588:	beq	1a5c4 <__assert_fail@plt+0x9608>
   1a58c:	ldr	r3, [r1, #4]
   1a590:	add	r5, r5, r3
   1a594:	cmp	r5, #0
   1a598:	ble	1a5f4 <__assert_fail@plt+0x9638>
   1a59c:	ldrb	r3, [r2]
   1a5a0:	add	r2, r2, #1
   1a5a4:	cmp	r3, #0
   1a5a8:	beq	1a5bc <__assert_fail@plt+0x9600>
   1a5ac:	b	1a5cc <__assert_fail@plt+0x9610>
   1a5b0:	ldrb	r3, [r2], #1
   1a5b4:	cmp	r3, #0
   1a5b8:	bne	1a5cc <__assert_fail@plt+0x9610>
   1a5bc:	subs	r5, r5, #1
   1a5c0:	bne	1a5b0 <__assert_fail@plt+0x95f4>
   1a5c4:	mov	r3, #0
   1a5c8:	str	r3, [r1]
   1a5cc:	mov	r0, r8
   1a5d0:	bl	19840 <__assert_fail@plt+0x8884>
   1a5d4:	ldr	r3, [sp, #8]
   1a5d8:	ldr	r2, [sp, #12]
   1a5dc:	str	r3, [r8]
   1a5e0:	ldr	r3, [r7]
   1a5e4:	cmp	r2, r3
   1a5e8:	bne	1a5fc <__assert_fail@plt+0x9640>
   1a5ec:	add	sp, sp, #20
   1a5f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5f4:	beq	1a5c4 <__assert_fail@plt+0x9608>
   1a5f8:	b	1a5cc <__assert_fail@plt+0x9610>
   1a5fc:	bl	10e24 <__stack_chk_fail@plt>
   1a600:	andeq	r0, r3, r0, lsl lr
   1a604:	andeq	r1, r3, r8, asr #5
   1a608:	ldr	ip, [pc, #1636]	; 1ac74 <__assert_fail@plt+0x9cb8>
   1a60c:	ldr	ip, [ip]
   1a610:	cmp	r1, ip
   1a614:	beq	1ac64 <__assert_fail@plt+0x9ca8>
   1a618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a61c:	sub	sp, sp, #44	; 0x2c
   1a620:	ldmib	r1, {r4, ip}
   1a624:	mov	r8, r3
   1a628:	str	r2, [sp, #28]
   1a62c:	add	r7, r4, ip
   1a630:	cmp	r7, #0
   1a634:	str	r0, [sp, #4]
   1a638:	str	r1, [sp, #16]
   1a63c:	ldr	lr, [r1, #24]
   1a640:	mov	r3, r7
   1a644:	ble	1a67c <__assert_fail@plt+0x96c0>
   1a648:	ldrb	r1, [lr]
   1a64c:	add	r2, lr, #1
   1a650:	cmp	r1, #0
   1a654:	beq	1a668 <__assert_fail@plt+0x96ac>
   1a658:	b	1a680 <__assert_fail@plt+0x96c4>
   1a65c:	ldrb	r1, [r2], #1
   1a660:	cmp	r1, #0
   1a664:	bne	1aae8 <__assert_fail@plt+0x9b2c>
   1a668:	subs	r3, r3, #1
   1a66c:	bne	1a65c <__assert_fail@plt+0x96a0>
   1a670:	mvn	r0, #0
   1a674:	add	sp, sp, #44	; 0x2c
   1a678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a67c:	beq	1a670 <__assert_fail@plt+0x96b4>
   1a680:	ldr	r3, [sp, #4]
   1a684:	cmp	ip, #0
   1a688:	cmpeq	r4, #1
   1a68c:	ldr	r0, [r3, #4]
   1a690:	beq	1aaf4 <__assert_fail@plt+0x9b38>
   1a694:	sub	r7, r7, #1
   1a698:	cmp	ip, #0
   1a69c:	mov	r6, r4
   1a6a0:	add	r1, lr, r7
   1a6a4:	beq	1a6dc <__assert_fail@plt+0x9720>
   1a6a8:	ldrb	r2, [lr, r7]
   1a6ac:	sub	r3, r1, #1
   1a6b0:	cmp	r2, #0
   1a6b4:	bne	1ac54 <__assert_fail@plt+0x9c98>
   1a6b8:	sub	lr, r1, ip
   1a6bc:	sub	r1, ip, r1
   1a6c0:	b	1a6d0 <__assert_fail@plt+0x9714>
   1a6c4:	ldrb	r2, [r3], #-1
   1a6c8:	cmp	r2, #0
   1a6cc:	bne	1a6e0 <__assert_fail@plt+0x9724>
   1a6d0:	cmp	r3, lr
   1a6d4:	add	r4, r3, r1
   1a6d8:	bne	1a6c4 <__assert_fail@plt+0x9708>
   1a6dc:	mov	r4, #0
   1a6e0:	ldr	r3, [sp, #4]
   1a6e4:	add	r9, r0, r4
   1a6e8:	ldr	r5, [r3, #8]
   1a6ec:	sub	sl, r5, r4
   1a6f0:	cmp	r8, sl
   1a6f4:	subgt	r3, r8, sl
   1a6f8:	movle	r3, #0
   1a6fc:	str	r3, [sp, #12]
   1a700:	ldr	r3, [sp, #12]
   1a704:	add	r5, r5, r0
   1a708:	add	r7, r5, #2
   1a70c:	add	r7, r7, r3
   1a710:	mov	r0, r7
   1a714:	bl	10e90 <malloc@plt>
   1a718:	subs	r3, r0, #0
   1a71c:	str	r3, [sp, #8]
   1a720:	beq	1ab8c <__assert_fail@plt+0x9bd0>
   1a724:	add	r4, r4, r6
   1a728:	ldr	r6, [sp, #8]
   1a72c:	mov	r2, r7
   1a730:	mov	r1, #0
   1a734:	mov	r0, r6
   1a738:	bl	10f14 <memset@plt>
   1a73c:	ldr	r3, [sp, #4]
   1a740:	mov	r2, r5
   1a744:	add	r0, r6, #1
   1a748:	ldr	r1, [r3, #24]
   1a74c:	add	r5, r4, #1
   1a750:	bl	10df4 <memcpy@plt>
   1a754:	mov	r0, r5
   1a758:	bl	10e90 <malloc@plt>
   1a75c:	subs	r3, r0, #0
   1a760:	str	r3, [sp, #20]
   1a764:	beq	1abb8 <__assert_fail@plt+0x9bfc>
   1a768:	ldr	r3, [sp, #16]
   1a76c:	ldr	r6, [sp, #20]
   1a770:	mov	r2, r4
   1a774:	ldr	r1, [r3, #24]
   1a778:	mov	r0, r6
   1a77c:	bl	10df4 <memcpy@plt>
   1a780:	mov	r3, #0
   1a784:	strb	r3, [r6, r4]
   1a788:	ldrb	r3, [r6]
   1a78c:	cmp	r3, #0
   1a790:	addeq	r3, r6, #1
   1a794:	beq	1a7a0 <__assert_fail@plt+0x97e4>
   1a798:	b	1abc0 <__assert_fail@plt+0x9c04>
   1a79c:	mov	r4, r7
   1a7a0:	mov	r6, r3
   1a7a4:	sub	r7, r4, #1
   1a7a8:	ldrb	r2, [r6]
   1a7ac:	add	r3, r3, #1
   1a7b0:	cmp	r2, #0
   1a7b4:	beq	1a79c <__assert_fail@plt+0x97e0>
   1a7b8:	add	fp, r8, r9
   1a7bc:	cmp	fp, r7
   1a7c0:	bcc	1a9b8 <__assert_fail@plt+0x99fc>
   1a7c4:	cmp	r9, r7
   1a7c8:	add	r2, r8, #1
   1a7cc:	addcs	r2, r2, r9
   1a7d0:	subcs	r2, r2, r7
   1a7d4:	subcs	r0, r2, r8
   1a7d8:	movcc	r0, #1
   1a7dc:	mov	r1, r8
   1a7e0:	str	r2, [sp, #24]
   1a7e4:	bl	19338 <__assert_fail@plt+0x837c>
   1a7e8:	ldr	r2, [sp, #24]
   1a7ec:	mov	r1, #0
   1a7f0:	mov	r5, r0
   1a7f4:	ldr	r0, [r0, #24]
   1a7f8:	bl	10f14 <memset@plt>
   1a7fc:	mov	r0, r4
   1a800:	bl	10e90 <malloc@plt>
   1a804:	subs	r3, r0, #0
   1a808:	str	r3, [sp, #24]
   1a80c:	beq	1ac6c <__assert_fail@plt+0x9cb0>
   1a810:	ldrb	r3, [r6]
   1a814:	mov	r0, #10
   1a818:	add	r1, r3, #1
   1a81c:	str	r3, [sp, #32]
   1a820:	bl	1c26c <__assert_fail@plt+0xb2b0>
   1a824:	ldr	r3, [sp, #32]
   1a828:	cmp	r0, #1
   1a82c:	mov	r8, r0
   1a830:	beq	1a86c <__assert_fail@plt+0x98b0>
   1a834:	ldr	r3, [sp, #12]
   1a838:	ldr	r0, [sp, #8]
   1a83c:	add	r1, sl, r9
   1a840:	add	r1, r1, #1
   1a844:	add	r1, r1, r3
   1a848:	mov	r2, r8
   1a84c:	mov	r3, r0
   1a850:	bl	18f30 <__assert_fail@plt+0x7f74>
   1a854:	mov	r3, r6
   1a858:	mov	r2, r8
   1a85c:	mov	r1, r7
   1a860:	mov	r0, r6
   1a864:	bl	18f30 <__assert_fail@plt+0x7f74>
   1a868:	ldrb	r3, [r6]
   1a86c:	ldr	r2, [r5, #24]
   1a870:	cmp	r9, r7
   1a874:	subcc	r9, r7, r9
   1a878:	mov	r1, r2
   1a87c:	addcc	r2, r2, r9
   1a880:	movcc	r1, r2
   1a884:	sub	r2, fp, r7
   1a888:	str	r4, [sp, #32]
   1a88c:	str	r5, [sp, #36]	; 0x24
   1a890:	str	r2, [sp, #12]
   1a894:	ldr	r9, [sp, #8]
   1a898:	mov	sl, r1
   1a89c:	mov	r4, r1
   1a8a0:	mov	r5, r3
   1a8a4:	b	1a8c0 <__assert_fail@plt+0x9904>
   1a8a8:	ldr	r2, [sp, #12]
   1a8ac:	strb	r8, [sl], #1
   1a8b0:	sub	r3, sl, r4
   1a8b4:	cmp	r2, r3
   1a8b8:	bcc	1aae0 <__assert_fail@plt+0x9b24>
   1a8bc:	ldrb	r5, [r6]
   1a8c0:	ldrb	r2, [r9]
   1a8c4:	ldrb	r1, [r9, #1]!
   1a8c8:	mov	fp, #10
   1a8cc:	cmp	r2, r5
   1a8d0:	smlabb	fp, fp, r2, r1
   1a8d4:	moveq	r8, #9
   1a8d8:	beq	1a8ec <__assert_fail@plt+0x9930>
   1a8dc:	mov	r1, r5
   1a8e0:	mov	r0, fp
   1a8e4:	bl	1c26c <__assert_fail@plt+0xb2b0>
   1a8e8:	mov	r8, r0
   1a8ec:	mul	ip, r8, r5
   1a8f0:	ldrb	lr, [r6, #1]
   1a8f4:	sub	r2, fp, ip
   1a8f8:	ldrb	r0, [r9, #1]
   1a8fc:	add	r2, r2, r2, lsl #2
   1a900:	mul	r1, r8, lr
   1a904:	add	r2, r0, r2, lsl #1
   1a908:	cmp	r1, r2
   1a90c:	bls	1a934 <__assert_fail@plt+0x9978>
   1a910:	sub	r3, ip, r5
   1a914:	sub	fp, fp, r3
   1a918:	sub	r1, r1, lr
   1a91c:	add	fp, fp, fp, lsl #2
   1a920:	sub	r3, r8, #1
   1a924:	add	fp, r0, fp, lsl #1
   1a928:	cmp	fp, r1
   1a92c:	subcc	r8, r8, #2
   1a930:	movcs	r8, r3
   1a934:	cmp	r8, #0
   1a938:	beq	1a8a8 <__assert_fail@plt+0x98ec>
   1a93c:	ldr	r5, [sp, #24]
   1a940:	mov	r1, #0
   1a944:	mov	r3, r5
   1a948:	mov	r0, r6
   1a94c:	strb	r1, [r3], #1
   1a950:	mov	r2, r8
   1a954:	mov	r1, r7
   1a958:	bl	18f30 <__assert_fail@plt+0x7f74>
   1a95c:	ldr	r3, [sp, #32]
   1a960:	add	r0, r5, r7
   1a964:	cmp	r3, #0
   1a968:	beq	1a9b0 <__assert_fail@plt+0x99f4>
   1a96c:	ldr	r3, [sp, #32]
   1a970:	add	fp, r7, r9
   1a974:	mov	ip, fp
   1a978:	sub	lr, r0, r3
   1a97c:	mov	r1, #0
   1a980:	ldrb	r3, [ip, #-1]!
   1a984:	ldrb	r2, [r0], #-1
   1a988:	sub	r3, r3, r2
   1a98c:	subs	r3, r3, r1
   1a990:	addmi	r3, r3, #10
   1a994:	mov	r1, #0
   1a998:	movmi	r1, #1
   1a99c:	cmp	r0, lr
   1a9a0:	strb	r3, [ip]
   1a9a4:	bne	1a980 <__assert_fail@plt+0x99c4>
   1a9a8:	cmp	r1, #1
   1a9ac:	beq	1abdc <__assert_fail@plt+0x9c20>
   1a9b0:	uxtb	r8, r8
   1a9b4:	b	1a8a8 <__assert_fail@plt+0x98ec>
   1a9b8:	mov	r1, r8
   1a9bc:	mov	r0, #1
   1a9c0:	bl	19338 <__assert_fail@plt+0x837c>
   1a9c4:	add	r2, r8, #1
   1a9c8:	mov	r1, #0
   1a9cc:	mov	r5, r0
   1a9d0:	ldr	r0, [r0, #24]
   1a9d4:	bl	10f14 <memset@plt>
   1a9d8:	mov	r0, r4
   1a9dc:	bl	10e90 <malloc@plt>
   1a9e0:	subs	r3, r0, #0
   1a9e4:	str	r3, [sp, #24]
   1a9e8:	bne	1a9f0 <__assert_fail@plt+0x9a34>
   1a9ec:	bl	18260 <__assert_fail@plt+0x72a4>
   1a9f0:	ldr	r2, [sp, #16]
   1a9f4:	ldr	r3, [sp, #4]
   1a9f8:	ldr	r1, [r2]
   1a9fc:	ldr	r2, [pc, #624]	; 1ac74 <__assert_fail@plt+0x9cb8>
   1aa00:	ldr	r3, [r3]
   1aa04:	ldr	r2, [r2]
   1aa08:	subs	r3, r3, r1
   1aa0c:	movne	r3, #1
   1aa10:	cmp	r2, r5
   1aa14:	str	r3, [r5]
   1aa18:	ldr	r3, [r5, #24]
   1aa1c:	beq	1aa58 <__assert_fail@plt+0x9a9c>
   1aa20:	ldmib	r5, {r1, r2}
   1aa24:	add	r2, r2, r1
   1aa28:	cmp	r2, #0
   1aa2c:	ble	1ac5c <__assert_fail@plt+0x9ca0>
   1aa30:	ldrb	r0, [r3]
   1aa34:	add	r1, r3, #1
   1aa38:	cmp	r0, #0
   1aa3c:	beq	1aa50 <__assert_fail@plt+0x9a94>
   1aa40:	b	1aaac <__assert_fail@plt+0x9af0>
   1aa44:	ldrb	r0, [r1], #1
   1aa48:	cmp	r0, #0
   1aa4c:	bne	1aa6c <__assert_fail@plt+0x9ab0>
   1aa50:	subs	r2, r2, #1
   1aa54:	bne	1aa44 <__assert_fail@plt+0x9a88>
   1aa58:	mov	r2, #0
   1aa5c:	str	r2, [r5]
   1aa60:	ldrb	r2, [r3]
   1aa64:	cmp	r2, #0
   1aa68:	bne	1aaac <__assert_fail@plt+0x9af0>
   1aa6c:	ldr	r0, [r5, #4]
   1aa70:	cmp	r0, #1
   1aa74:	ble	1aaac <__assert_fail@plt+0x9af0>
   1aa78:	sub	r2, r0, #1
   1aa7c:	add	r0, r3, r0
   1aa80:	add	r3, r3, #1
   1aa84:	b	1aa90 <__assert_fail@plt+0x9ad4>
   1aa88:	cmp	r0, r3
   1aa8c:	beq	1aaac <__assert_fail@plt+0x9af0>
   1aa90:	str	r3, [r5, #24]
   1aa94:	str	r2, [r5, #4]
   1aa98:	ldrb	r1, [r3]
   1aa9c:	sub	r2, r2, #1
   1aaa0:	add	r3, r3, #1
   1aaa4:	cmp	r1, #0
   1aaa8:	beq	1aa88 <__assert_fail@plt+0x9acc>
   1aaac:	ldr	r4, [sp, #28]
   1aab0:	mov	r0, r4
   1aab4:	bl	19840 <__assert_fail@plt+0x8884>
   1aab8:	ldr	r0, [sp, #24]
   1aabc:	str	r5, [r4]
   1aac0:	bl	10dd0 <free@plt>
   1aac4:	ldr	r0, [sp, #8]
   1aac8:	bl	10dd0 <free@plt>
   1aacc:	ldr	r0, [sp, #20]
   1aad0:	bl	10dd0 <free@plt>
   1aad4:	mov	r0, #0
   1aad8:	add	sp, sp, #44	; 0x2c
   1aadc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aae0:	ldr	r5, [sp, #36]	; 0x24
   1aae4:	b	1a9f0 <__assert_fail@plt+0x9a34>
   1aae8:	ldr	r3, [sp, #4]
   1aaec:	ldr	r0, [r3, #4]
   1aaf0:	b	1a694 <__assert_fail@plt+0x96d8>
   1aaf4:	ldrb	r3, [lr]
   1aaf8:	cmp	r3, #1
   1aafc:	movne	r6, #1
   1ab00:	bne	1a6dc <__assert_fail@plt+0x9720>
   1ab04:	mov	r1, r8
   1ab08:	bl	19338 <__assert_fail@plt+0x837c>
   1ab0c:	ldr	r6, [sp, #4]
   1ab10:	ldr	r4, [sp, #16]
   1ab14:	ldr	r3, [r6]
   1ab18:	ldr	r1, [r4]
   1ab1c:	ldr	r2, [r6, #4]
   1ab20:	subs	r3, r3, r1
   1ab24:	movne	r3, #1
   1ab28:	mov	r1, #0
   1ab2c:	mov	r5, r0
   1ab30:	ldr	r0, [r0, #24]
   1ab34:	str	r3, [r5]
   1ab38:	add	r0, r0, r2
   1ab3c:	mov	r2, r8
   1ab40:	bl	10f14 <memset@plt>
   1ab44:	ldr	r3, [r6, #4]
   1ab48:	ldr	r2, [r6, #8]
   1ab4c:	ldr	r1, [r6, #24]
   1ab50:	cmp	r8, r2
   1ab54:	addle	r2, r3, r8
   1ab58:	addgt	r2, r3, r2
   1ab5c:	ldr	r0, [r5, #24]
   1ab60:	bl	10df4 <memcpy@plt>
   1ab64:	ldr	r9, [sp, #28]
   1ab68:	mov	r0, r9
   1ab6c:	bl	19840 <__assert_fail@plt+0x8884>
   1ab70:	mov	r3, r4
   1ab74:	ldmib	r4, {r4, ip}
   1ab78:	ldr	lr, [r3, #24]
   1ab7c:	ldr	r0, [r6, #4]
   1ab80:	add	r7, r4, ip
   1ab84:	str	r5, [r9]
   1ab88:	b	1a694 <__assert_fail@plt+0x96d8>
   1ab8c:	bl	18260 <__assert_fail@plt+0x72a4>
   1ab90:	ldr	r3, [sp, #4]
   1ab94:	ldr	r2, [sp, #16]
   1ab98:	ldr	r5, [r3, #4]
   1ab9c:	ldr	r3, [r3, #8]
   1aba0:	ldr	r6, [r2, #4]
   1aba4:	add	r5, r5, r3
   1aba8:	ldr	r3, [sp, #12]
   1abac:	add	r7, r5, #2
   1abb0:	add	r7, r7, r3
   1abb4:	b	1a724 <__assert_fail@plt+0x9768>
   1abb8:	bl	18260 <__assert_fail@plt+0x72a4>
   1abbc:	b	1a768 <__assert_fail@plt+0x97ac>
   1abc0:	mov	r7, r4
   1abc4:	add	fp, r8, r9
   1abc8:	cmp	fp, r7
   1abcc:	ldr	r6, [sp, #20]
   1abd0:	mov	r4, r5
   1abd4:	bcs	1a7c4 <__assert_fail@plt+0x9808>
   1abd8:	b	1a9b8 <__assert_fail@plt+0x99fc>
   1abdc:	sub	r8, r8, #1
   1abe0:	sub	r1, r7, #1
   1abe4:	cmp	r7, #0
   1abe8:	uxtb	r8, r8
   1abec:	add	r1, r6, r1
   1abf0:	beq	1a8a8 <__assert_fail@plt+0x98ec>
   1abf4:	sub	ip, r6, #1
   1abf8:	mov	r0, #0
   1abfc:	ldrb	r3, [fp, #-1]!
   1ac00:	ldrb	r2, [r1], #-1
   1ac04:	add	r3, r3, r2
   1ac08:	add	r3, r3, r0
   1ac0c:	cmp	r3, #9
   1ac10:	subhi	r3, r3, #10
   1ac14:	mov	r0, #0
   1ac18:	movhi	r0, #1
   1ac1c:	cmp	r1, ip
   1ac20:	strb	r3, [fp]
   1ac24:	bne	1abfc <__assert_fail@plt+0x9c40>
   1ac28:	cmp	r0, #1
   1ac2c:	bne	1a8a8 <__assert_fail@plt+0x98ec>
   1ac30:	ldrb	r1, [r9, #-1]
   1ac34:	ldr	r3, [pc, #60]	; 1ac78 <__assert_fail@plt+0x9cbc>
   1ac38:	add	r1, r1, #1
   1ac3c:	umull	r2, r3, r1, r3
   1ac40:	lsr	r3, r3, #3
   1ac44:	add	r3, r3, r3, lsl #2
   1ac48:	sub	r1, r1, r3, lsl #1
   1ac4c:	strb	r1, [r9, #-1]
   1ac50:	b	1a8a8 <__assert_fail@plt+0x98ec>
   1ac54:	mov	r4, ip
   1ac58:	b	1a6e0 <__assert_fail@plt+0x9724>
   1ac5c:	beq	1aa58 <__assert_fail@plt+0x9a9c>
   1ac60:	b	1aa60 <__assert_fail@plt+0x9aa4>
   1ac64:	mvn	r0, #0
   1ac68:	bx	lr
   1ac6c:	bl	18260 <__assert_fail@plt+0x72a4>
   1ac70:	b	1a810 <__assert_fail@plt+0x9854>
   1ac74:	andeq	r1, r3, r8, asr #5
   1ac78:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1ac7c:	ldr	ip, [pc, #344]	; 1addc <__assert_fail@plt+0x9e20>
   1ac80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac84:	mov	r4, r1
   1ac88:	ldr	r7, [pc, #336]	; 1ade0 <__assert_fail@plt+0x9e24>
   1ac8c:	ldr	ip, [ip]
   1ac90:	sub	sp, sp, #12
   1ac94:	ldr	r1, [r7]
   1ac98:	cmp	r4, ip
   1ac9c:	mov	r8, r3
   1aca0:	str	r1, [sp, #4]
   1aca4:	ldr	r3, [sp, #48]	; 0x30
   1aca8:	beq	1acf0 <__assert_fail@plt+0x9d34>
   1acac:	mov	r5, r2
   1acb0:	ldmib	r4, {r2, lr}
   1acb4:	mov	r6, r0
   1acb8:	ldr	r1, [r4, #24]
   1acbc:	add	r2, lr, r2
   1acc0:	cmp	r2, #0
   1acc4:	ble	1acf8 <__assert_fail@plt+0x9d3c>
   1acc8:	ldrb	r0, [r1]
   1accc:	add	r1, r1, #1
   1acd0:	cmp	r0, #0
   1acd4:	beq	1ace8 <__assert_fail@plt+0x9d2c>
   1acd8:	b	1acfc <__assert_fail@plt+0x9d40>
   1acdc:	ldrb	r0, [r1], #1
   1ace0:	cmp	r0, #0
   1ace4:	bne	1acfc <__assert_fail@plt+0x9d40>
   1ace8:	subs	r2, r2, #1
   1acec:	bne	1acdc <__assert_fail@plt+0x9d20>
   1acf0:	mvn	r0, #0
   1acf4:	b	1ad88 <__assert_fail@plt+0x9dcc>
   1acf8:	beq	1acf0 <__assert_fail@plt+0x9d34>
   1acfc:	ldr	r2, [ip, #12]
   1ad00:	ldr	sl, [r6, #8]
   1ad04:	add	r9, sp, #8
   1ad08:	add	lr, r3, lr
   1ad0c:	add	r2, r2, #1
   1ad10:	cmp	lr, sl
   1ad14:	str	r2, [ip, #12]
   1ad18:	str	ip, [r9, #-8]!
   1ad1c:	mov	r1, r4
   1ad20:	mov	r2, r9
   1ad24:	mov	r0, r6
   1ad28:	movge	sl, lr
   1ad2c:	bl	1a608 <__assert_fail@plt+0x964c>
   1ad30:	cmp	r5, #0
   1ad34:	beq	1ada0 <__assert_fail@plt+0x9de4>
   1ad38:	ldr	fp, [sp]
   1ad3c:	mov	r1, r4
   1ad40:	mov	r0, fp
   1ad44:	ldr	r2, [fp, #12]
   1ad48:	mov	r3, sl
   1ad4c:	add	r2, r2, #1
   1ad50:	str	r2, [fp, #12]
   1ad54:	mov	r2, r9
   1ad58:	bl	1a48c <__assert_fail@plt+0x94d0>
   1ad5c:	mov	r3, sl
   1ad60:	mov	r2, r8
   1ad64:	ldr	r1, [sp]
   1ad68:	mov	r0, r6
   1ad6c:	bl	19a60 <__assert_fail@plt+0x8aa4>
   1ad70:	mov	r0, r9
   1ad74:	bl	19840 <__assert_fail@plt+0x8884>
   1ad78:	mov	r0, r5
   1ad7c:	bl	19840 <__assert_fail@plt+0x8884>
   1ad80:	mov	r0, #0
   1ad84:	str	fp, [r5]
   1ad88:	ldr	r2, [sp, #4]
   1ad8c:	ldr	r3, [r7]
   1ad90:	cmp	r2, r3
   1ad94:	bne	1add8 <__assert_fail@plt+0x9e1c>
   1ad98:	add	sp, sp, #12
   1ad9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ada0:	mov	r1, r4
   1ada4:	mov	r3, sl
   1ada8:	mov	r2, r9
   1adac:	ldr	r0, [sp]
   1adb0:	bl	1a48c <__assert_fail@plt+0x94d0>
   1adb4:	mov	r3, sl
   1adb8:	mov	r2, r8
   1adbc:	mov	r0, r6
   1adc0:	ldr	r1, [sp]
   1adc4:	bl	19a60 <__assert_fail@plt+0x8aa4>
   1adc8:	mov	r0, r9
   1adcc:	bl	19840 <__assert_fail@plt+0x8884>
   1add0:	mov	r0, r5
   1add4:	b	1ad88 <__assert_fail@plt+0x9dcc>
   1add8:	bl	10e24 <__stack_chk_fail@plt>
   1addc:	andeq	r1, r3, r8, asr #5
   1ade0:	andeq	r0, r3, r0, lsl lr
   1ade4:	push	{lr}		; (str lr, [sp, #-4]!)
   1ade8:	sub	sp, sp, #12
   1adec:	str	r3, [sp]
   1adf0:	mov	r3, r2
   1adf4:	mov	r2, #0
   1adf8:	bl	1ac7c <__assert_fail@plt+0x9cc0>
   1adfc:	add	sp, sp, #12
   1ae00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae08:	mov	r6, r2
   1ae0c:	ldr	r4, [pc, #692]	; 1b0c8 <__assert_fail@plt+0xa10c>
   1ae10:	ldr	r2, [pc, #692]	; 1b0cc <__assert_fail@plt+0xa110>
   1ae14:	sub	sp, sp, #44	; 0x2c
   1ae18:	ldr	ip, [r4]
   1ae1c:	ldr	r2, [r2]
   1ae20:	cmp	r6, ip
   1ae24:	str	r3, [sp, #12]
   1ae28:	str	r2, [sp, #36]	; 0x24
   1ae2c:	ldr	r8, [sp, #80]	; 0x50
   1ae30:	beq	1ae74 <__assert_fail@plt+0x9eb8>
   1ae34:	mov	r5, r0
   1ae38:	ldmib	r6, {r0, r3}
   1ae3c:	ldr	r2, [r6, #24]
   1ae40:	add	r3, r3, r0
   1ae44:	cmp	r3, #0
   1ae48:	ble	1ae7c <__assert_fail@plt+0x9ec0>
   1ae4c:	ldrb	r0, [r2]
   1ae50:	add	r2, r2, #1
   1ae54:	cmp	r0, #0
   1ae58:	beq	1ae6c <__assert_fail@plt+0x9eb0>
   1ae5c:	b	1ae80 <__assert_fail@plt+0x9ec4>
   1ae60:	ldrb	r0, [r2], #1
   1ae64:	cmp	r0, #0
   1ae68:	bne	1ae80 <__assert_fail@plt+0x9ec4>
   1ae6c:	subs	r3, r3, #1
   1ae70:	bne	1ae60 <__assert_fail@plt+0x9ea4>
   1ae74:	mvn	r0, #0
   1ae78:	b	1af8c <__assert_fail@plt+0x9fd0>
   1ae7c:	beq	1ae74 <__assert_fail@plt+0x9eb8>
   1ae80:	ldr	r3, [r1]
   1ae84:	cmp	r3, #1
   1ae88:	beq	1ae74 <__assert_fail@plt+0x9eb8>
   1ae8c:	ldr	r3, [r5, #12]
   1ae90:	ldr	r7, [pc, #568]	; 1b0d0 <__assert_fail@plt+0xa114>
   1ae94:	add	r3, r3, #1
   1ae98:	str	r3, [r5, #12]
   1ae9c:	ldr	r2, [r7]
   1aea0:	ldr	r3, [r1, #12]
   1aea4:	ldr	r0, [r5, #8]
   1aea8:	add	r3, r3, #1
   1aeac:	str	r3, [r1, #12]
   1aeb0:	ldr	r3, [r2, #12]
   1aeb4:	cmp	r0, #0
   1aeb8:	add	r3, r3, #1
   1aebc:	str	r3, [r2, #12]
   1aec0:	ldr	r3, [ip, #12]
   1aec4:	str	r5, [sp, #20]
   1aec8:	add	r3, r3, #1
   1aecc:	str	r1, [sp, #24]
   1aed0:	str	ip, [sp, #28]
   1aed4:	str	r2, [sp, #32]
   1aed8:	str	r3, [ip, #12]
   1aedc:	bne	1b0b4 <__assert_fail@plt+0xa0f8>
   1aee0:	ldr	r3, [r1, #8]
   1aee4:	cmp	r3, #0
   1aee8:	addeq	r9, sp, #24
   1aeec:	bne	1b090 <__assert_fail@plt+0xa0d4>
   1aef0:	ldr	r3, [r6, #8]
   1aef4:	cmp	r3, #0
   1aef8:	bne	1b084 <__assert_fail@plt+0xa0c8>
   1aefc:	ldr	r7, [r5, #8]
   1af00:	ldr	r0, [sp, #24]
   1af04:	ldr	r3, [r4]
   1af08:	cmp	r8, r7
   1af0c:	movge	r7, r8
   1af10:	cmp	r0, r3
   1af14:	add	r5, sp, #20
   1af18:	ldrne	fp, [pc, #436]	; 1b0d4 <__assert_fail@plt+0xa118>
   1af1c:	movne	sl, #0
   1af20:	beq	1af64 <__assert_fail@plt+0x9fa8>
   1af24:	ldr	r3, [r0, #4]
   1af28:	ldr	r1, [r0, #8]
   1af2c:	ldr	r2, [r0, #24]
   1af30:	add	r3, r3, r1
   1af34:	cmp	r3, #0
   1af38:	ble	1afa8 <__assert_fail@plt+0x9fec>
   1af3c:	ldrb	r1, [r2]
   1af40:	add	r2, r2, #1
   1af44:	cmp	r1, #0
   1af48:	beq	1af5c <__assert_fail@plt+0x9fa0>
   1af4c:	b	1afac <__assert_fail@plt+0x9ff0>
   1af50:	ldrb	r1, [r2], #1
   1af54:	cmp	r1, #0
   1af58:	bne	1afac <__assert_fail@plt+0x9ff0>
   1af5c:	subs	r3, r3, #1
   1af60:	bne	1af50 <__assert_fail@plt+0x9f94>
   1af64:	mov	r0, r5
   1af68:	bl	19840 <__assert_fail@plt+0x8884>
   1af6c:	mov	r0, r9
   1af70:	bl	19840 <__assert_fail@plt+0x8884>
   1af74:	ldr	r4, [sp, #12]
   1af78:	mov	r0, r4
   1af7c:	bl	19840 <__assert_fail@plt+0x8884>
   1af80:	ldr	r3, [sp, #32]
   1af84:	mov	r0, #0
   1af88:	str	r3, [r4]
   1af8c:	ldr	r3, [pc, #312]	; 1b0cc <__assert_fail@plt+0xa110>
   1af90:	ldr	r2, [sp, #36]	; 0x24
   1af94:	ldr	r3, [r3]
   1af98:	cmp	r2, r3
   1af9c:	bne	1b0c4 <__assert_fail@plt+0xa108>
   1afa0:	add	sp, sp, #44	; 0x2c
   1afa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afa8:	beq	1af64 <__assert_fail@plt+0x9fa8>
   1afac:	ldr	r1, [fp]
   1afb0:	add	r3, sp, #28
   1afb4:	mov	r2, r9
   1afb8:	str	sl, [sp]
   1afbc:	bl	1ac7c <__assert_fail@plt+0x9cc0>
   1afc0:	ldr	r2, [sp, #28]
   1afc4:	ldr	r3, [r4]
   1afc8:	cmp	r2, r3
   1afcc:	beq	1b010 <__assert_fail@plt+0xa054>
   1afd0:	ldr	r3, [r2, #4]
   1afd4:	ldr	r1, [r2, #8]
   1afd8:	ldr	r2, [r2, #24]
   1afdc:	add	r3, r3, r1
   1afe0:	cmp	r3, #0
   1afe4:	ble	1b050 <__assert_fail@plt+0xa094>
   1afe8:	ldrb	r1, [r2]
   1afec:	add	r2, r2, #1
   1aff0:	cmp	r1, #0
   1aff4:	beq	1b008 <__assert_fail@plt+0xa04c>
   1aff8:	b	1b054 <__assert_fail@plt+0xa098>
   1affc:	ldrb	r1, [r2], #1
   1b000:	cmp	r1, #0
   1b004:	bne	1b054 <__assert_fail@plt+0xa098>
   1b008:	subs	r3, r3, #1
   1b00c:	bne	1affc <__assert_fail@plt+0xa040>
   1b010:	ldr	r1, [sp, #20]
   1b014:	mov	r3, r7
   1b018:	mov	r0, r1
   1b01c:	mov	r2, r5
   1b020:	bl	1a48c <__assert_fail@plt+0x94d0>
   1b024:	mov	r3, r5
   1b028:	ldr	r0, [sp, #20]
   1b02c:	str	r8, [sp]
   1b030:	mov	r2, #0
   1b034:	mov	r1, r6
   1b038:	bl	1ac7c <__assert_fail@plt+0x9cc0>
   1b03c:	ldr	r0, [sp, #24]
   1b040:	ldr	r3, [r4]
   1b044:	cmp	r0, r3
   1b048:	bne	1af24 <__assert_fail@plt+0x9f68>
   1b04c:	b	1af64 <__assert_fail@plt+0x9fa8>
   1b050:	beq	1b010 <__assert_fail@plt+0xa054>
   1b054:	add	r2, sp, #32
   1b058:	mov	r3, r7
   1b05c:	ldr	r1, [sp, #20]
   1b060:	ldr	r0, [sp, #32]
   1b064:	bl	1a48c <__assert_fail@plt+0x94d0>
   1b068:	ldr	r0, [sp, #32]
   1b06c:	add	r3, sp, #32
   1b070:	str	r8, [sp]
   1b074:	mov	r2, #0
   1b078:	mov	r1, r6
   1b07c:	bl	1ac7c <__assert_fail@plt+0x9cc0>
   1b080:	b	1b010 <__assert_fail@plt+0xa054>
   1b084:	ldr	r0, [pc, #76]	; 1b0d8 <__assert_fail@plt+0xa11c>
   1b088:	bl	18dbc <__assert_fail@plt+0x7e00>
   1b08c:	b	1aefc <__assert_fail@plt+0x9f40>
   1b090:	ldr	r0, [pc, #68]	; 1b0dc <__assert_fail@plt+0xa120>
   1b094:	add	r9, sp, #24
   1b098:	bl	18dbc <__assert_fail@plt+0x7e00>
   1b09c:	ldr	r1, [r7]
   1b0a0:	mov	r2, r9
   1b0a4:	mov	r3, #0
   1b0a8:	ldr	r0, [sp, #24]
   1b0ac:	bl	1a608 <__assert_fail@plt+0x964c>
   1b0b0:	b	1aef0 <__assert_fail@plt+0x9f34>
   1b0b4:	ldr	r0, [pc, #36]	; 1b0e0 <__assert_fail@plt+0xa124>
   1b0b8:	bl	18dbc <__assert_fail@plt+0x7e00>
   1b0bc:	ldr	r1, [sp, #24]
   1b0c0:	b	1aee0 <__assert_fail@plt+0x9f24>
   1b0c4:	bl	10e24 <__stack_chk_fail@plt>
   1b0c8:	andeq	r1, r3, r8, asr #5
   1b0cc:	andeq	r0, r3, r0, lsl lr
   1b0d0:	andeq	r1, r3, r0, asr #5
   1b0d4:	andeq	r1, r3, r4, asr #5
   1b0d8:	andeq	r0, r2, ip, lsr #24
   1b0dc:	andeq	r0, r2, r0, lsl ip
   1b0e0:	strdeq	r0, [r2], -r8
   1b0e4:	push	{r4, r5, r6, r7, lr}
   1b0e8:	cmp	r2, #0
   1b0ec:	ldr	r7, [pc, #160]	; 1b194 <__assert_fail@plt+0xa1d8>
   1b0f0:	sub	sp, sp, #60	; 0x3c
   1b0f4:	mov	r5, r0
   1b0f8:	ldr	r2, [r7]
   1b0fc:	mov	r4, r1
   1b100:	mov	r6, r3
   1b104:	str	r2, [sp, #52]	; 0x34
   1b108:	beq	1b114 <__assert_fail@plt+0xa158>
   1b10c:	mov	r0, #32
   1b110:	blx	r3
   1b114:	ldr	r2, [pc, #124]	; 1b198 <__assert_fail@plt+0xa1dc>
   1b118:	mov	r3, #40	; 0x28
   1b11c:	mov	r1, r3
   1b120:	stm	sp, {r2, r5}
   1b124:	add	r0, sp, #12
   1b128:	mov	r2, #1
   1b12c:	bl	10fb0 <__snprintf_chk@plt>
   1b130:	add	r0, sp, #12
   1b134:	bl	10ee4 <strlen@plt>
   1b138:	cmp	r0, r4
   1b13c:	mov	r5, r0
   1b140:	bge	1b158 <__assert_fail@plt+0xa19c>
   1b144:	sub	r4, r4, #1
   1b148:	mov	r0, #48	; 0x30
   1b14c:	blx	r6
   1b150:	cmp	r5, r4
   1b154:	bne	1b144 <__assert_fail@plt+0xa188>
   1b158:	cmp	r5, #0
   1b15c:	beq	1b178 <__assert_fail@plt+0xa1bc>
   1b160:	add	r4, sp, #12
   1b164:	add	r5, r4, r5
   1b168:	ldrb	r0, [r4], #1
   1b16c:	blx	r6
   1b170:	cmp	r5, r4
   1b174:	bne	1b168 <__assert_fail@plt+0xa1ac>
   1b178:	ldr	r2, [sp, #52]	; 0x34
   1b17c:	ldr	r3, [r7]
   1b180:	cmp	r2, r3
   1b184:	bne	1b190 <__assert_fail@plt+0xa1d4>
   1b188:	add	sp, sp, #60	; 0x3c
   1b18c:	pop	{r4, r5, r6, r7, pc}
   1b190:	bl	10e24 <__stack_chk_fail@plt>
   1b194:	andeq	r0, r3, r0, lsl lr
   1b198:	andeq	r0, r2, r8, asr #24
   1b19c:	ldr	r3, [r0, #4]
   1b1a0:	push	{lr}		; (str lr, [sp, #-4]!)
   1b1a4:	cmp	r3, #0
   1b1a8:	mov	lr, r0
   1b1ac:	ldr	r2, [r0, #24]
   1b1b0:	movle	r0, #0
   1b1b4:	ble	1b1f4 <__assert_fail@plt+0xa238>
   1b1b8:	ldr	ip, [pc, #68]	; 1b204 <__assert_fail@plt+0xa248>
   1b1bc:	mov	r0, #0
   1b1c0:	ldrb	r1, [r2], #1
   1b1c4:	add	r0, r0, r0, lsl #2
   1b1c8:	sub	r3, r3, #1
   1b1cc:	add	r0, r1, r0, lsl #1
   1b1d0:	cmp	r3, #0
   1b1d4:	movgt	r1, #1
   1b1d8:	movle	r1, #0
   1b1dc:	cmp	r0, ip
   1b1e0:	movgt	r1, #0
   1b1e4:	cmp	r1, #0
   1b1e8:	bne	1b1c0 <__assert_fail@plt+0xa204>
   1b1ec:	cmp	r3, #0
   1b1f0:	movgt	r0, #0
   1b1f4:	ldr	r3, [lr]
   1b1f8:	cmp	r3, #0
   1b1fc:	rsbne	r0, r0, #0
   1b200:	pop	{pc}		; (ldr pc, [sp], #4)
   1b204:	stcleq	12, cr12, [ip], {204}	; 0xcc
   1b208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b20c:	mov	r5, r1
   1b210:	ldr	sl, [pc, #468]	; 1b3ec <__assert_fail@plt+0xa430>
   1b214:	ldr	ip, [r1, #8]
   1b218:	sub	sp, sp, #28
   1b21c:	mov	r1, r0
   1b220:	ldr	r0, [sl]
   1b224:	cmp	ip, #0
   1b228:	mov	r9, r2
   1b22c:	mov	r7, r3
   1b230:	str	r0, [sp, #20]
   1b234:	bne	1b3d4 <__assert_fail@plt+0xa418>
   1b238:	mov	r0, r5
   1b23c:	str	r1, [sp, #4]
   1b240:	bl	1b19c <__assert_fail@plt+0xa1e0>
   1b244:	ldr	r1, [sp, #4]
   1b248:	subs	r4, r0, #0
   1b24c:	bne	1b2ac <__assert_fail@plt+0xa2f0>
   1b250:	ldr	r3, [r5, #4]
   1b254:	cmp	r3, #1
   1b258:	bgt	1b26c <__assert_fail@plt+0xa2b0>
   1b25c:	ldr	r3, [r5, #24]
   1b260:	ldrb	r3, [r3]
   1b264:	cmp	r3, #0
   1b268:	beq	1b274 <__assert_fail@plt+0xa2b8>
   1b26c:	ldr	r0, [pc, #380]	; 1b3f0 <__assert_fail@plt+0xa434>
   1b270:	bl	18cf8 <__assert_fail@plt+0x7d3c>
   1b274:	mov	r0, r9
   1b278:	bl	19840 <__assert_fail@plt+0x8884>
   1b27c:	ldr	r3, [pc, #368]	; 1b3f4 <__assert_fail@plt+0xa438>
   1b280:	ldr	r3, [r3]
   1b284:	ldr	r2, [r3, #12]
   1b288:	add	r2, r2, #1
   1b28c:	str	r2, [r3, #12]
   1b290:	str	r3, [r9]
   1b294:	ldr	r2, [sp, #20]
   1b298:	ldr	r3, [sl]
   1b29c:	cmp	r2, r3
   1b2a0:	bne	1b3e8 <__assert_fail@plt+0xa42c>
   1b2a4:	add	sp, sp, #28
   1b2a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2ac:	ldr	r5, [r1, #8]
   1b2b0:	blt	1b3a8 <__assert_fail@plt+0xa3ec>
   1b2b4:	mul	r3, r4, r5
   1b2b8:	cmp	r5, r7
   1b2bc:	movge	r7, r5
   1b2c0:	cmp	r3, r7
   1b2c4:	movcc	r7, r3
   1b2c8:	mov	fp, #0
   1b2cc:	ldr	r3, [r1, #12]
   1b2d0:	tst	r4, #1
   1b2d4:	add	r3, r3, #1
   1b2d8:	add	r6, sp, #16
   1b2dc:	str	r1, [sp, #16]
   1b2e0:	str	r3, [r1, #12]
   1b2e4:	bne	1b310 <__assert_fail@plt+0xa354>
   1b2e8:	lsl	r5, r5, #1
   1b2ec:	mov	r0, r1
   1b2f0:	lsr	r4, r4, #1
   1b2f4:	mov	r3, r5
   1b2f8:	mov	r2, r6
   1b2fc:	bl	1a48c <__assert_fail@plt+0x94d0>
   1b300:	tst	r4, #1
   1b304:	ldr	r1, [sp, #16]
   1b308:	beq	1b2e8 <__assert_fail@plt+0xa32c>
   1b30c:	ldr	r3, [r1, #12]
   1b310:	add	r3, r3, #1
   1b314:	lsrs	r4, r4, #1
   1b318:	str	r3, [r1, #12]
   1b31c:	str	r1, [sp, #12]
   1b320:	beq	1b370 <__assert_fail@plt+0xa3b4>
   1b324:	mov	r8, r5
   1b328:	b	1b338 <__assert_fail@plt+0xa37c>
   1b32c:	lsrs	r4, r4, #1
   1b330:	beq	1b370 <__assert_fail@plt+0xa3b4>
   1b334:	ldr	r1, [sp, #16]
   1b338:	lsl	r5, r5, #1
   1b33c:	mov	r3, r5
   1b340:	mov	r2, r6
   1b344:	mov	r0, r1
   1b348:	bl	1a48c <__assert_fail@plt+0x94d0>
   1b34c:	tst	r4, #1
   1b350:	beq	1b32c <__assert_fail@plt+0xa370>
   1b354:	add	r8, r8, r5
   1b358:	mov	r3, r8
   1b35c:	add	r2, sp, #12
   1b360:	ldrd	r0, [sp, #12]
   1b364:	bl	1a48c <__assert_fail@plt+0x94d0>
   1b368:	lsrs	r4, r4, #1
   1b36c:	bne	1b334 <__assert_fail@plt+0xa378>
   1b370:	cmp	fp, #0
   1b374:	beq	1b3b4 <__assert_fail@plt+0xa3f8>
   1b378:	ldr	r1, [pc, #116]	; 1b3f4 <__assert_fail@plt+0xa438>
   1b37c:	add	r4, sp, #24
   1b380:	mov	r3, r7
   1b384:	ldr	r0, [r1]
   1b388:	ldr	r1, [r4, #-12]!
   1b38c:	mov	r2, r9
   1b390:	bl	1a608 <__assert_fail@plt+0x964c>
   1b394:	mov	r0, r4
   1b398:	bl	19840 <__assert_fail@plt+0x8884>
   1b39c:	mov	r0, r6
   1b3a0:	bl	19840 <__assert_fail@plt+0x8884>
   1b3a4:	b	1b294 <__assert_fail@plt+0xa2d8>
   1b3a8:	rsb	r4, r4, #0
   1b3ac:	mov	fp, #1
   1b3b0:	b	1b2cc <__assert_fail@plt+0xa310>
   1b3b4:	mov	r0, r9
   1b3b8:	bl	19840 <__assert_fail@plt+0x8884>
   1b3bc:	ldr	r3, [sp, #12]
   1b3c0:	str	r3, [r9]
   1b3c4:	ldr	r2, [r3, #8]
   1b3c8:	cmp	r2, r7
   1b3cc:	strgt	r7, [r3, #8]
   1b3d0:	b	1b39c <__assert_fail@plt+0xa3e0>
   1b3d4:	ldr	r0, [pc, #28]	; 1b3f8 <__assert_fail@plt+0xa43c>
   1b3d8:	str	r1, [sp, #4]
   1b3dc:	bl	18dbc <__assert_fail@plt+0x7e00>
   1b3e0:	ldr	r1, [sp, #4]
   1b3e4:	b	1b238 <__assert_fail@plt+0xa27c>
   1b3e8:	bl	10e24 <__stack_chk_fail@plt>
   1b3ec:	andeq	r0, r3, r0, lsl lr
   1b3f0:	andeq	r0, r2, ip, asr #24
   1b3f4:	andeq	r1, r3, r0, asr #5
   1b3f8:	andeq	r0, r2, r0, lsl ip
   1b3fc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b400:	sub	sp, sp, #44	; 0x2c
   1b404:	ldr	r7, [pc, #340]	; 1b560 <__assert_fail@plt+0xa5a4>
   1b408:	cmp	r1, #0
   1b40c:	mov	r8, r0
   1b410:	ldr	r3, [r7]
   1b414:	str	r3, [sp, #36]	; 0x24
   1b418:	blt	1b4ec <__assert_fail@plt+0xa530>
   1b41c:	ldr	r2, [pc, #320]	; 1b564 <__assert_fail@plt+0xa5a8>
   1b420:	asr	r5, r1, #31
   1b424:	smull	r2, r3, r1, r2
   1b428:	rsb	r5, r5, r3, asr #2
   1b42c:	subs	r6, r5, #0
   1b430:	add	r5, r5, r5, lsl #2
   1b434:	sub	r1, r1, r5, lsl #1
   1b438:	uxtb	r5, r1
   1b43c:	strb	r5, [sp, #4]
   1b440:	movne	r5, #0
   1b444:	beq	1b53c <__assert_fail@plt+0xa580>
   1b448:	ldr	lr, [pc, #276]	; 1b564 <__assert_fail@plt+0xa5a8>
   1b44c:	add	r4, sp, #5
   1b450:	add	ip, sp, #4
   1b454:	smull	r0, r1, r6, lr
   1b458:	asr	r3, r6, #31
   1b45c:	rsb	r3, r3, r1, asr #2
   1b460:	add	r2, r3, r3, lsl #2
   1b464:	sub	r2, r6, r2, lsl #1
   1b468:	subs	r6, r3, #0
   1b46c:	strb	r2, [r4], #1
   1b470:	sub	r9, r4, ip
   1b474:	bne	1b454 <__assert_fail@plt+0xa498>
   1b478:	mov	r0, r8
   1b47c:	bl	19840 <__assert_fail@plt+0x8884>
   1b480:	mov	r1, r6
   1b484:	mov	r0, r9
   1b488:	bl	19338 <__assert_fail@plt+0x837c>
   1b48c:	cmp	r5, #0
   1b490:	movne	r3, #1
   1b494:	sub	r6, r9, #1
   1b498:	str	r0, [r8]
   1b49c:	strne	r3, [r0]
   1b4a0:	cmp	r9, #0
   1b4a4:	ldr	r3, [r0, #24]
   1b4a8:	ble	1b4d4 <__assert_fail@plt+0xa518>
   1b4ac:	ldrb	r5, [r4, #-1]
   1b4b0:	add	r6, r6, #2
   1b4b4:	sub	r6, r6, r4
   1b4b8:	sub	r4, r4, #2
   1b4bc:	b	1b4c4 <__assert_fail@plt+0xa508>
   1b4c0:	ldrb	r5, [r4], #-1
   1b4c4:	add	r2, r6, r4
   1b4c8:	cmp	r2, #0
   1b4cc:	strb	r5, [r3], #1
   1b4d0:	bgt	1b4c0 <__assert_fail@plt+0xa504>
   1b4d4:	ldr	r2, [sp, #36]	; 0x24
   1b4d8:	ldr	r3, [r7]
   1b4dc:	cmp	r2, r3
   1b4e0:	bne	1b55c <__assert_fail@plt+0xa5a0>
   1b4e4:	add	sp, sp, #44	; 0x2c
   1b4e8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b4ec:	ldr	r2, [pc, #116]	; 1b568 <__assert_fail@plt+0xa5ac>
   1b4f0:	rsb	r1, r1, #0
   1b4f4:	umull	r2, r3, r1, r2
   1b4f8:	lsr	r3, r3, #3
   1b4fc:	subs	r6, r3, #0
   1b500:	add	r3, r3, r3, lsl #2
   1b504:	movne	r5, #1
   1b508:	sub	r1, r1, r3, lsl #1
   1b50c:	strb	r1, [sp, #4]
   1b510:	bne	1b448 <__assert_fail@plt+0xa48c>
   1b514:	bl	19840 <__assert_fail@plt+0x8884>
   1b518:	mov	r1, r6
   1b51c:	mov	r0, #1
   1b520:	bl	19338 <__assert_fail@plt+0x837c>
   1b524:	mov	r2, #1
   1b528:	add	r4, sp, #5
   1b52c:	str	r0, [r8]
   1b530:	ldr	r3, [r0, #24]
   1b534:	str	r2, [r0]
   1b538:	b	1b4ac <__assert_fail@plt+0xa4f0>
   1b53c:	bl	19840 <__assert_fail@plt+0x8884>
   1b540:	mov	r1, r6
   1b544:	mov	r0, #1
   1b548:	bl	19338 <__assert_fail@plt+0x837c>
   1b54c:	add	r4, sp, #5
   1b550:	str	r0, [r8]
   1b554:	ldr	r3, [r0, #24]
   1b558:	b	1b4b0 <__assert_fail@plt+0xa4f4>
   1b55c:	bl	10e24 <__stack_chk_fail@plt>
   1b560:	andeq	r0, r3, r0, lsl lr
   1b564:	strbtvs	r6, [r6], -r7, ror #12
   1b568:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1b56c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b570:	sub	sp, sp, #36	; 0x24
   1b574:	ldr	r8, [pc, #804]	; 1b8a0 <__assert_fail@plt+0xa8e4>
   1b578:	ldr	r5, [r0]
   1b57c:	ldr	fp, [pc, #800]	; 1b8a4 <__assert_fail@plt+0xa8e8>
   1b580:	ldr	r4, [r8]
   1b584:	ldr	r3, [r5]
   1b588:	ldr	r2, [fp]
   1b58c:	ldr	r7, [r4]
   1b590:	mov	r6, r0
   1b594:	cmp	r7, r3
   1b598:	mov	r9, r1
   1b59c:	str	r2, [sp, #28]
   1b5a0:	beq	1b700 <__assert_fail@plt+0xa744>
   1b5a4:	cmp	r3, #0
   1b5a8:	bne	1b6e4 <__assert_fail@plt+0xa728>
   1b5ac:	ldr	r3, [pc, #756]	; 1b8a8 <__assert_fail@plt+0xa8ec>
   1b5b0:	str	r3, [sp, #4]
   1b5b4:	ldr	r1, [r3]
   1b5b8:	ldr	r3, [r1]
   1b5bc:	cmp	r3, #0
   1b5c0:	bne	1b7ec <__assert_fail@plt+0xa830>
   1b5c4:	mov	r2, #1
   1b5c8:	mov	r0, r5
   1b5cc:	bl	191ec <__assert_fail@plt+0x8230>
   1b5d0:	subs	r7, r0, #0
   1b5d4:	beq	1b888 <__assert_fail@plt+0xa8cc>
   1b5d8:	ldr	r3, [r4, #12]
   1b5dc:	ldr	r2, [r5, #8]
   1b5e0:	add	r3, r3, #3
   1b5e4:	mov	r1, #1
   1b5e8:	cmp	r9, r2
   1b5ec:	str	r3, [r4, #12]
   1b5f0:	mov	r0, r1
   1b5f4:	movlt	r9, r2
   1b5f8:	str	r4, [sp, #12]
   1b5fc:	str	r4, [sp, #16]
   1b600:	str	r4, [sp, #24]
   1b604:	bl	19338 <__assert_fail@plt+0x837c>
   1b608:	mov	r2, #5
   1b60c:	cmp	r7, #0
   1b610:	ldr	r3, [r0, #24]
   1b614:	str	r0, [sp, #20]
   1b618:	strb	r2, [r3, #1]
   1b61c:	bge	1b82c <__assert_fail@plt+0xa870>
   1b620:	ldr	r3, [sp, #4]
   1b624:	ldr	r1, [r6]
   1b628:	add	r5, sp, #32
   1b62c:	ldr	r3, [r3]
   1b630:	add	r8, sp, #16
   1b634:	ldr	r4, [r1, #8]
   1b638:	ldr	r2, [r3, #12]
   1b63c:	str	r3, [r5, #-20]!	; 0xffffffec
   1b640:	add	r2, r2, #1
   1b644:	str	r2, [r3, #12]
   1b648:	add	r7, r4, #1
   1b64c:	add	sl, r9, #1
   1b650:	mov	r0, r8
   1b654:	bl	19840 <__assert_fail@plt+0x8884>
   1b658:	ldr	r2, [sp, #12]
   1b65c:	mov	r3, r4
   1b660:	mov	r1, r2
   1b664:	ldr	r0, [r2, #12]
   1b668:	str	r2, [sp, #16]
   1b66c:	add	r0, r0, #1
   1b670:	str	r0, [r2, #12]
   1b674:	mov	r2, r5
   1b678:	ldr	r0, [r6]
   1b67c:	bl	1a608 <__assert_fail@plt+0x964c>
   1b680:	ldrd	r0, [sp, #12]
   1b684:	mov	r3, #0
   1b688:	mov	r2, r5
   1b68c:	bl	1a3a4 <__assert_fail@plt+0x93e8>
   1b690:	mov	r3, r4
   1b694:	mov	r2, r5
   1b698:	ldr	r1, [sp, #20]
   1b69c:	ldr	r0, [sp, #12]
   1b6a0:	bl	1a48c <__assert_fail@plt+0x94d0>
   1b6a4:	ldrd	r0, [sp, #12]
   1b6a8:	mov	r3, r7
   1b6ac:	add	r2, sp, #24
   1b6b0:	bl	19a60 <__assert_fail@plt+0x8aa4>
   1b6b4:	mov	r1, r4
   1b6b8:	ldr	r0, [sp, #24]
   1b6bc:	bl	199e4 <__assert_fail@plt+0x8a28>
   1b6c0:	cmp	r0, #0
   1b6c4:	beq	1b650 <__assert_fail@plt+0xa694>
   1b6c8:	cmp	r4, r9
   1b6cc:	bgt	1b7a4 <__assert_fail@plt+0xa7e8>
   1b6d0:	add	r4, r4, r4, lsl #1
   1b6d4:	cmp	sl, r4
   1b6d8:	movlt	r4, sl
   1b6dc:	add	r7, r4, #1
   1b6e0:	b	1b650 <__assert_fail@plt+0xa694>
   1b6e4:	mov	r0, #0
   1b6e8:	ldr	r2, [sp, #28]
   1b6ec:	ldr	r3, [fp]
   1b6f0:	cmp	r2, r3
   1b6f4:	bne	1b89c <__assert_fail@plt+0xa8e0>
   1b6f8:	add	sp, sp, #36	; 0x24
   1b6fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b700:	mov	r2, #1
   1b704:	mov	r1, r4
   1b708:	mov	r0, r5
   1b70c:	bl	191ec <__assert_fail@plt+0x8230>
   1b710:	cmp	r0, #0
   1b714:	blt	1b6e4 <__assert_fail@plt+0xa728>
   1b718:	bne	1b740 <__assert_fail@plt+0xa784>
   1b71c:	mov	r0, r6
   1b720:	bl	19840 <__assert_fail@plt+0x8884>
   1b724:	ldr	r3, [r8]
   1b728:	ldr	r2, [r3, #12]
   1b72c:	mov	r0, #1
   1b730:	add	r2, r2, r0
   1b734:	str	r2, [r3, #12]
   1b738:	str	r3, [r6]
   1b73c:	b	1b6e8 <__assert_fail@plt+0xa72c>
   1b740:	ldr	r3, [pc, #352]	; 1b8a8 <__assert_fail@plt+0xa8ec>
   1b744:	str	r3, [sp, #4]
   1b748:	ldr	r1, [r3]
   1b74c:	ldr	r3, [r1]
   1b750:	cmp	r7, r3
   1b754:	beq	1b5c4 <__assert_fail@plt+0xa608>
   1b758:	ldr	r2, [r5, #8]
   1b75c:	ldr	r3, [r4, #12]
   1b760:	cmp	r9, r2
   1b764:	movlt	r9, r2
   1b768:	cmp	r7, #0
   1b76c:	add	r3, r3, #3
   1b770:	beq	1b800 <__assert_fail@plt+0xa844>
   1b774:	mov	r1, #1
   1b778:	str	r3, [r4, #12]
   1b77c:	mov	r0, r1
   1b780:	str	r4, [sp, #12]
   1b784:	str	r4, [sp, #16]
   1b788:	str	r4, [sp, #24]
   1b78c:	bl	19338 <__assert_fail@plt+0x837c>
   1b790:	mov	r2, #5
   1b794:	ldr	r3, [r0, #24]
   1b798:	str	r0, [sp, #20]
   1b79c:	strb	r2, [r3, #1]
   1b7a0:	b	1b620 <__assert_fail@plt+0xa664>
   1b7a4:	mov	r0, r6
   1b7a8:	bl	19840 <__assert_fail@plt+0x8884>
   1b7ac:	ldr	r1, [sp, #4]
   1b7b0:	mov	r3, r9
   1b7b4:	mov	r2, r6
   1b7b8:	ldr	r1, [r1]
   1b7bc:	ldr	r0, [sp, #12]
   1b7c0:	bl	1a608 <__assert_fail@plt+0x964c>
   1b7c4:	mov	r0, r5
   1b7c8:	bl	19840 <__assert_fail@plt+0x8884>
   1b7cc:	mov	r0, r8
   1b7d0:	bl	19840 <__assert_fail@plt+0x8884>
   1b7d4:	add	r0, sp, #20
   1b7d8:	bl	19840 <__assert_fail@plt+0x8884>
   1b7dc:	add	r0, sp, #24
   1b7e0:	bl	19840 <__assert_fail@plt+0x8884>
   1b7e4:	mov	r0, #1
   1b7e8:	b	1b6e8 <__assert_fail@plt+0xa72c>
   1b7ec:	ldr	r2, [r5, #8]
   1b7f0:	ldr	r3, [r4, #12]
   1b7f4:	cmp	r9, r2
   1b7f8:	movlt	r9, r2
   1b7fc:	add	r3, r3, #3
   1b800:	mov	r1, #1
   1b804:	str	r3, [r4, #12]
   1b808:	mov	r0, r1
   1b80c:	str	r4, [sp, #12]
   1b810:	str	r4, [sp, #16]
   1b814:	str	r4, [sp, #24]
   1b818:	bl	19338 <__assert_fail@plt+0x837c>
   1b81c:	mov	r2, #5
   1b820:	ldr	r3, [r0, #24]
   1b824:	str	r0, [sp, #20]
   1b828:	strb	r2, [r3, #1]
   1b82c:	add	r5, sp, #12
   1b830:	mov	r0, r5
   1b834:	mov	r1, #10
   1b838:	bl	1b3fc <__assert_fail@plt+0xa440>
   1b83c:	ldr	r3, [r6]
   1b840:	add	r8, sp, #16
   1b844:	mov	r0, r8
   1b848:	ldr	r1, [r3, #4]
   1b84c:	bl	1b3fc <__assert_fail@plt+0xa440>
   1b850:	ldrd	r0, [sp, #16]
   1b854:	mov	r2, r8
   1b858:	mov	r3, #0
   1b85c:	bl	1a48c <__assert_fail@plt+0x94d0>
   1b860:	ldr	r1, [sp, #16]
   1b864:	mov	r3, #0
   1b868:	mov	r2, r5
   1b86c:	str	r3, [r1, #8]
   1b870:	ldr	r0, [sp, #12]
   1b874:	bl	1b208 <__assert_fail@plt+0xa24c>
   1b878:	mov	r0, r8
   1b87c:	bl	19840 <__assert_fail@plt+0x8884>
   1b880:	mov	r4, #3
   1b884:	b	1b648 <__assert_fail@plt+0xa68c>
   1b888:	mov	r0, r6
   1b88c:	bl	19840 <__assert_fail@plt+0x8884>
   1b890:	ldr	r3, [sp, #4]
   1b894:	ldr	r3, [r3]
   1b898:	b	1b728 <__assert_fail@plt+0xa76c>
   1b89c:	bl	10e24 <__stack_chk_fail@plt>
   1b8a0:	andeq	r1, r3, r8, asr #5
   1b8a4:	andeq	r0, r3, r0, lsl lr
   1b8a8:	andeq	r1, r3, r0, asr #5
   1b8ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8b0:	mov	r4, r0
   1b8b4:	ldr	r8, [pc, #1208]	; 1bd74 <__assert_fail@plt+0xadb8>
   1b8b8:	ldr	r0, [r0]
   1b8bc:	sub	sp, sp, #60	; 0x3c
   1b8c0:	mov	r9, r1
   1b8c4:	ldr	r1, [r8]
   1b8c8:	cmp	r0, #1
   1b8cc:	mov	r5, r2
   1b8d0:	mov	r6, r3
   1b8d4:	str	r1, [sp, #52]	; 0x34
   1b8d8:	bne	1b8e4 <__assert_fail@plt+0xa928>
   1b8dc:	mov	r0, #45	; 0x2d
   1b8e0:	blx	r2
   1b8e4:	ldr	r7, [pc, #1164]	; 1bd78 <__assert_fail@plt+0xadbc>
   1b8e8:	ldr	r0, [r7]
   1b8ec:	cmp	r4, r0
   1b8f0:	bne	1b914 <__assert_fail@plt+0xa958>
   1b8f4:	mov	r0, #48	; 0x30
   1b8f8:	blx	r5
   1b8fc:	ldr	r2, [sp, #52]	; 0x34
   1b900:	ldr	r3, [r8]
   1b904:	cmp	r2, r3
   1b908:	bne	1bd58 <__assert_fail@plt+0xad9c>
   1b90c:	add	sp, sp, #60	; 0x3c
   1b910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b914:	ldmib	r4, {fp, lr}
   1b918:	ldr	sl, [r4, #24]
   1b91c:	add	ip, fp, lr
   1b920:	cmp	ip, #0
   1b924:	ble	1bd40 <__assert_fail@plt+0xad84>
   1b928:	ldrb	r3, [sl]
   1b92c:	add	r2, sl, #1
   1b930:	cmp	r3, #0
   1b934:	bne	1b950 <__assert_fail@plt+0xa994>
   1b938:	mov	r3, ip
   1b93c:	subs	r3, r3, #1
   1b940:	beq	1b8f4 <__assert_fail@plt+0xa938>
   1b944:	ldrb	r1, [r2], #1
   1b948:	cmp	r1, #0
   1b94c:	beq	1b93c <__assert_fail@plt+0xa980>
   1b950:	cmp	r9, #10
   1b954:	beq	1bc30 <__assert_fail@plt+0xac74>
   1b958:	cmp	r6, #0
   1b95c:	beq	1b978 <__assert_fail@plt+0xa9bc>
   1b960:	cmp	ip, #0
   1b964:	ble	1bd50 <__assert_fail@plt+0xad94>
   1b968:	ldrb	r3, [sl]
   1b96c:	add	sl, sl, #1
   1b970:	cmp	r3, #0
   1b974:	beq	1bba8 <__assert_fail@plt+0xabec>
   1b978:	ldr	r3, [r0, #12]
   1b97c:	add	fp, sp, #56	; 0x38
   1b980:	add	r3, r3, #1
   1b984:	str	r3, [r0, #12]
   1b988:	ldr	r3, [pc, #1004]	; 1bd7c <__assert_fail@plt+0xadc0>
   1b98c:	str	r0, [fp, #-28]!	; 0xffffffe4
   1b990:	mov	r0, r4
   1b994:	ldr	r1, [r3]
   1b998:	mov	r2, fp
   1b99c:	mov	r3, #0
   1b9a0:	bl	1a608 <__assert_fail@plt+0x964c>
   1b9a4:	ldr	ip, [r7]
   1b9a8:	add	r2, sp, #32
   1b9ac:	mov	r3, #0
   1b9b0:	ldr	r1, [ip, #12]
   1b9b4:	mov	r0, r4
   1b9b8:	add	r1, r1, #3
   1b9bc:	str	r1, [ip, #12]
   1b9c0:	ldr	r1, [sp, #28]
   1b9c4:	str	ip, [sp, #32]
   1b9c8:	str	ip, [sp, #40]	; 0x28
   1b9cc:	str	ip, [sp, #36]	; 0x24
   1b9d0:	bl	19a60 <__assert_fail@plt+0x8aa4>
   1b9d4:	ldrd	r2, [sp, #28]
   1b9d8:	mov	sl, #0
   1b9dc:	add	r0, sp, #36	; 0x24
   1b9e0:	str	sl, [r2]
   1b9e4:	mov	r1, r9
   1b9e8:	str	sl, [r3]
   1b9ec:	bl	1b3fc <__assert_fail@plt+0xa440>
   1b9f0:	ldr	r3, [r7]
   1b9f4:	add	r0, sp, #56	; 0x38
   1b9f8:	sub	r1, r9, #1
   1b9fc:	ldr	r2, [r3, #12]
   1ba00:	str	r3, [r0, #-8]!
   1ba04:	add	r2, r2, #1
   1ba08:	str	r2, [r3, #12]
   1ba0c:	str	r0, [sp, #16]
   1ba10:	bl	1b3fc <__assert_fail@plt+0xa440>
   1ba14:	ldr	r3, [r7]
   1ba18:	ldr	r0, [sp, #28]
   1ba1c:	cmp	r3, r0
   1ba20:	add	r3, sp, #40	; 0x28
   1ba24:	str	r3, [sp, #12]
   1ba28:	beq	1baa4 <__assert_fail@plt+0xaae8>
   1ba2c:	ldr	r3, [r0, #4]
   1ba30:	ldr	r1, [r0, #8]
   1ba34:	ldr	r2, [r0, #24]
   1ba38:	add	r3, r3, r1
   1ba3c:	cmp	r3, #0
   1ba40:	ble	1bbc0 <__assert_fail@plt+0xac04>
   1ba44:	ldrb	r1, [r2]
   1ba48:	add	r2, r2, #1
   1ba4c:	cmp	r1, #0
   1ba50:	beq	1ba64 <__assert_fail@plt+0xaaa8>
   1ba54:	b	1bbc4 <__assert_fail@plt+0xac08>
   1ba58:	ldrb	r1, [r2], #1
   1ba5c:	cmp	r1, #0
   1ba60:	bne	1bbc4 <__assert_fail@plt+0xac08>
   1ba64:	subs	r3, r3, #1
   1ba68:	bne	1ba58 <__assert_fail@plt+0xaa9c>
   1ba6c:	cmp	sl, #0
   1ba70:	beq	1baa4 <__assert_fail@plt+0xaae8>
   1ba74:	mov	r6, sl
   1ba78:	ldr	sl, [pc, #768]	; 1bd80 <__assert_fail@plt+0xadc4>
   1ba7c:	cmp	r9, #16
   1ba80:	ldm	r6, {r0, r7}
   1ba84:	bgt	1bd28 <__assert_fail@plt+0xad6c>
   1ba88:	add	r0, sl, r0
   1ba8c:	ldrb	r0, [r0, #20]
   1ba90:	blx	r5
   1ba94:	mov	r0, r6
   1ba98:	bl	10dd0 <free@plt>
   1ba9c:	subs	r6, r7, #0
   1baa0:	bne	1ba7c <__assert_fail@plt+0xaac0>
   1baa4:	ldr	r3, [r4, #8]
   1baa8:	cmp	r3, #0
   1baac:	ble	1bb70 <__assert_fail@plt+0xabb4>
   1bab0:	mov	r0, #46	; 0x2e
   1bab4:	blx	r5
   1bab8:	ldr	r3, [pc, #700]	; 1bd7c <__assert_fail@plt+0xadc0>
   1babc:	ldr	r2, [r3]
   1bac0:	ldr	r3, [r4, #8]
   1bac4:	str	r2, [sp, #44]	; 0x2c
   1bac8:	ldr	r1, [r2, #12]
   1bacc:	ldr	r0, [r2, #4]
   1bad0:	add	r1, r1, #1
   1bad4:	cmp	r0, r3
   1bad8:	str	r1, [r2, #12]
   1badc:	addgt	r7, sp, #44	; 0x2c
   1bae0:	bgt	1bb68 <__assert_fail@plt+0xabac>
   1bae4:	ldr	sl, [pc, #660]	; 1bd80 <__assert_fail@plt+0xadc4>
   1bae8:	add	r7, sp, #44	; 0x2c
   1baec:	mov	r2, #0
   1baf0:	str	r2, [sp, #20]
   1baf4:	add	r2, sp, #32
   1baf8:	ldrd	r0, [sp, #32]
   1bafc:	bl	1a48c <__assert_fail@plt+0x94d0>
   1bb00:	ldr	r0, [sp, #32]
   1bb04:	bl	1b19c <__assert_fail@plt+0xa1e0>
   1bb08:	mov	r1, r0
   1bb0c:	mov	r6, r0
   1bb10:	mov	r0, fp
   1bb14:	bl	1b3fc <__assert_fail@plt+0xa440>
   1bb18:	mov	r3, #0
   1bb1c:	add	r2, sp, #32
   1bb20:	ldr	r1, [sp, #28]
   1bb24:	ldr	r0, [sp, #32]
   1bb28:	bl	19a60 <__assert_fail@plt+0x8aa4>
   1bb2c:	cmp	r9, #16
   1bb30:	bgt	1bd04 <__assert_fail@plt+0xad48>
   1bb34:	add	r6, sl, r6
   1bb38:	ldrb	r0, [r6, #20]
   1bb3c:	blx	r5
   1bb40:	mov	r3, #0
   1bb44:	mov	r2, r7
   1bb48:	ldr	r1, [sp, #36]	; 0x24
   1bb4c:	ldr	r0, [sp, #44]	; 0x2c
   1bb50:	bl	1a48c <__assert_fail@plt+0x94d0>
   1bb54:	ldr	r2, [sp, #44]	; 0x2c
   1bb58:	ldr	r3, [r4, #8]
   1bb5c:	ldr	r2, [r2, #4]
   1bb60:	cmp	r2, r3
   1bb64:	ble	1baf4 <__assert_fail@plt+0xab38>
   1bb68:	mov	r0, r7
   1bb6c:	bl	19840 <__assert_fail@plt+0x8884>
   1bb70:	mov	r0, fp
   1bb74:	bl	19840 <__assert_fail@plt+0x8884>
   1bb78:	add	r0, sp, #32
   1bb7c:	bl	19840 <__assert_fail@plt+0x8884>
   1bb80:	add	r0, sp, #36	; 0x24
   1bb84:	bl	19840 <__assert_fail@plt+0x8884>
   1bb88:	ldr	r0, [sp, #12]
   1bb8c:	bl	19840 <__assert_fail@plt+0x8884>
   1bb90:	ldr	r0, [sp, #16]
   1bb94:	bl	19840 <__assert_fail@plt+0x8884>
   1bb98:	b	1b8fc <__assert_fail@plt+0xa940>
   1bb9c:	ldrb	r3, [sl], #1
   1bba0:	cmp	r3, #0
   1bba4:	bne	1b978 <__assert_fail@plt+0xa9bc>
   1bba8:	subs	ip, ip, #1
   1bbac:	bne	1bb9c <__assert_fail@plt+0xabe0>
   1bbb0:	mov	r0, #48	; 0x30
   1bbb4:	blx	r5
   1bbb8:	ldr	r0, [r7]
   1bbbc:	b	1b978 <__assert_fail@plt+0xa9bc>
   1bbc0:	beq	1ba6c <__assert_fail@plt+0xaab0>
   1bbc4:	mov	r3, #0
   1bbc8:	ldr	r1, [sp, #36]	; 0x24
   1bbcc:	str	r3, [sp]
   1bbd0:	mov	r2, #0
   1bbd4:	ldr	r3, [sp, #12]
   1bbd8:	bl	1ac7c <__assert_fail@plt+0x9cc0>
   1bbdc:	mov	r0, #8
   1bbe0:	bl	10e90 <malloc@plt>
   1bbe4:	subs	r6, r0, #0
   1bbe8:	beq	1bc28 <__assert_fail@plt+0xac6c>
   1bbec:	ldr	r0, [sp, #40]	; 0x28
   1bbf0:	bl	1b19c <__assert_fail@plt+0xa1e0>
   1bbf4:	str	sl, [r6, #4]
   1bbf8:	mov	r3, #0
   1bbfc:	mov	r2, fp
   1bc00:	ldr	r1, [sp, #36]	; 0x24
   1bc04:	mov	sl, r6
   1bc08:	str	r0, [r6]
   1bc0c:	ldr	r0, [sp, #28]
   1bc10:	bl	1a608 <__assert_fail@plt+0x964c>
   1bc14:	ldr	r0, [sp, #28]
   1bc18:	ldr	r3, [r7]
   1bc1c:	cmp	r0, r3
   1bc20:	bne	1ba2c <__assert_fail@plt+0xaa70>
   1bc24:	b	1ba78 <__assert_fail@plt+0xaabc>
   1bc28:	bl	18260 <__assert_fail@plt+0x72a4>
   1bc2c:	b	1bbec <__assert_fail@plt+0xac30>
   1bc30:	cmp	fp, #1
   1bc34:	ble	1bcb0 <__assert_fail@plt+0xacf4>
   1bc38:	add	fp, sl, fp
   1bc3c:	ldrb	r0, [sl], #1
   1bc40:	add	r0, r0, #48	; 0x30
   1bc44:	blx	r5
   1bc48:	cmp	sl, fp
   1bc4c:	bne	1bc3c <__assert_fail@plt+0xac80>
   1bc50:	cmp	r6, #0
   1bc54:	beq	1bc6c <__assert_fail@plt+0xacb0>
   1bc58:	ldr	r3, [r7]
   1bc5c:	cmp	r4, r3
   1bc60:	bne	1bd64 <__assert_fail@plt+0xada8>
   1bc64:	mov	r0, #48	; 0x30
   1bc68:	blx	r5
   1bc6c:	ldr	lr, [r4, #8]
   1bc70:	cmp	lr, #0
   1bc74:	ble	1b8fc <__assert_fail@plt+0xa940>
   1bc78:	mov	r0, #46	; 0x2e
   1bc7c:	blx	r5
   1bc80:	ldr	r3, [r4, #8]
   1bc84:	cmp	r3, #0
   1bc88:	ble	1b8fc <__assert_fail@plt+0xa940>
   1bc8c:	mov	r6, fp
   1bc90:	ldrb	r0, [r6], #1
   1bc94:	add	r0, r0, #48	; 0x30
   1bc98:	blx	r5
   1bc9c:	ldr	r2, [r4, #8]
   1bca0:	sub	r3, r6, fp
   1bca4:	cmp	r2, r3
   1bca8:	bgt	1bc90 <__assert_fail@plt+0xacd4>
   1bcac:	b	1b8fc <__assert_fail@plt+0xa940>
   1bcb0:	ldrb	r3, [sl]
   1bcb4:	cmp	r3, #0
   1bcb8:	beq	1bd48 <__assert_fail@plt+0xad8c>
   1bcbc:	cmp	fp, #0
   1bcc0:	movle	fp, sl
   1bcc4:	bgt	1bc38 <__assert_fail@plt+0xac7c>
   1bcc8:	cmp	r6, #0
   1bccc:	beq	1bc70 <__assert_fail@plt+0xacb4>
   1bcd0:	cmp	ip, #0
   1bcd4:	ble	1bd5c <__assert_fail@plt+0xada0>
   1bcd8:	ldrb	r3, [sl]
   1bcdc:	add	sl, sl, #1
   1bce0:	cmp	r3, #0
   1bce4:	beq	1bcf8 <__assert_fail@plt+0xad3c>
   1bce8:	b	1bc70 <__assert_fail@plt+0xacb4>
   1bcec:	ldrb	r3, [sl], #1
   1bcf0:	cmp	r3, #0
   1bcf4:	bne	1bc70 <__assert_fail@plt+0xacb4>
   1bcf8:	subs	ip, ip, #1
   1bcfc:	bne	1bcec <__assert_fail@plt+0xad30>
   1bd00:	b	1bc64 <__assert_fail@plt+0xaca8>
   1bd04:	ldr	r3, [sp, #48]	; 0x30
   1bd08:	ldr	r2, [sp, #20]
   1bd0c:	mov	r0, r6
   1bd10:	ldr	r1, [r3, #4]
   1bd14:	mov	r3, r5
   1bd18:	bl	1b0e4 <__assert_fail@plt+0xa128>
   1bd1c:	mov	r3, #1
   1bd20:	str	r3, [sp, #20]
   1bd24:	b	1bb40 <__assert_fail@plt+0xab84>
   1bd28:	ldr	r2, [sp, #48]	; 0x30
   1bd2c:	mov	r3, r5
   1bd30:	ldr	r1, [r2, #4]
   1bd34:	mov	r2, #1
   1bd38:	bl	1b0e4 <__assert_fail@plt+0xa128>
   1bd3c:	b	1ba94 <__assert_fail@plt+0xaad8>
   1bd40:	bne	1b950 <__assert_fail@plt+0xa994>
   1bd44:	b	1b8f4 <__assert_fail@plt+0xa938>
   1bd48:	add	fp, sl, #1
   1bd4c:	b	1bcc8 <__assert_fail@plt+0xad0c>
   1bd50:	beq	1bbb0 <__assert_fail@plt+0xabf4>
   1bd54:	b	1b978 <__assert_fail@plt+0xa9bc>
   1bd58:	bl	10e24 <__stack_chk_fail@plt>
   1bd5c:	beq	1bc64 <__assert_fail@plt+0xaca8>
   1bd60:	b	1bc70 <__assert_fail@plt+0xacb4>
   1bd64:	ldmib	r4, {ip, lr}
   1bd68:	ldr	sl, [r4, #24]
   1bd6c:	add	ip, lr, ip
   1bd70:	b	1bcd0 <__assert_fail@plt+0xad14>
   1bd74:	andeq	r0, r3, r0, lsl lr
   1bd78:	andeq	r1, r3, r8, asr #5
   1bd7c:	andeq	r1, r3, r0, asr #5
   1bd80:	muleq	r2, r8, fp
   1bd84:	push	{r4, r5, r6, r7, lr}
   1bd88:	mov	r5, r0
   1bd8c:	ldr	r7, [r0]
   1bd90:	ldr	r4, [r0, #8]
   1bd94:	ldr	r6, [r5, #4]
   1bd98:	adds	r0, r7, #0
   1bd9c:	movne	r0, #1
   1bda0:	cmp	r4, #0
   1bda4:	addgt	r3, r4, r6
   1bda8:	addgt	r3, r3, #2
   1bdac:	addle	r3, r6, #1
   1bdb0:	sub	sp, sp, #12
   1bdb4:	add	r0, r3, r0
   1bdb8:	bl	10e90 <malloc@plt>
   1bdbc:	cmp	r0, #0
   1bdc0:	beq	1be50 <__assert_fail@plt+0xae94>
   1bdc4:	cmp	r7, #0
   1bdc8:	movne	r3, #45	; 0x2d
   1bdcc:	addne	r2, r0, #1
   1bdd0:	moveq	r2, r0
   1bdd4:	strbne	r3, [r0]
   1bdd8:	cmp	r6, #0
   1bddc:	ldr	ip, [r5, #24]
   1bde0:	movle	lr, r2
   1bde4:	ble	1be08 <__assert_fail@plt+0xae4c>
   1bde8:	add	lr, r2, r6
   1bdec:	mov	r1, ip
   1bdf0:	ldrb	r3, [r1], #1
   1bdf4:	add	r3, r3, #48	; 0x30
   1bdf8:	strb	r3, [r2], #1
   1bdfc:	cmp	r2, lr
   1be00:	bne	1bdf0 <__assert_fail@plt+0xae34>
   1be04:	add	ip, ip, r6
   1be08:	cmp	r4, #0
   1be0c:	ble	1be40 <__assert_fail@plt+0xae84>
   1be10:	add	r5, lr, #1
   1be14:	add	r1, r4, #1
   1be18:	mov	r2, r5
   1be1c:	add	r1, lr, r1
   1be20:	mov	r3, #46	; 0x2e
   1be24:	strb	r3, [lr]
   1be28:	ldrb	r3, [ip], #1
   1be2c:	add	r3, r3, #48	; 0x30
   1be30:	strb	r3, [r2], #1
   1be34:	cmp	r1, r2
   1be38:	bne	1be28 <__assert_fail@plt+0xae6c>
   1be3c:	add	lr, r5, r4
   1be40:	mov	r3, #0
   1be44:	strb	r3, [lr]
   1be48:	add	sp, sp, #12
   1be4c:	pop	{r4, r5, r6, r7, pc}
   1be50:	str	r0, [sp, #4]
   1be54:	bl	18260 <__assert_fail@plt+0x72a4>
   1be58:	ldr	r4, [r5, #8]
   1be5c:	ldr	r6, [r5, #4]
   1be60:	ldr	r0, [sp, #4]
   1be64:	b	1bdc4 <__assert_fail@plt+0xae08>
   1be68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1be6c:	mov	r6, r1
   1be70:	mov	r5, r2
   1be74:	mov	r7, r0
   1be78:	bl	19840 <__assert_fail@plt+0x8884>
   1be7c:	ldrb	r4, [r6]
   1be80:	sub	r3, r4, #43	; 0x2b
   1be84:	tst	r3, #253	; 0xfd
   1be88:	addeq	r9, r6, #1
   1be8c:	ldrbeq	r4, [r6, #1]
   1be90:	movne	r9, r6
   1be94:	b	1be9c <__assert_fail@plt+0xaee0>
   1be98:	ldrb	r4, [r9, #1]!
   1be9c:	cmp	r4, #48	; 0x30
   1bea0:	beq	1be98 <__assert_fail@plt+0xaedc>
   1bea4:	bl	10ecc <__ctype_b_loc@plt>
   1bea8:	mov	r2, r9
   1beac:	ldr	r1, [r0]
   1beb0:	b	1beb8 <__assert_fail@plt+0xaefc>
   1beb4:	ldrb	r4, [r2, #1]!
   1beb8:	lsl	r3, r4, #1
   1bebc:	sub	r8, r2, r9
   1bec0:	ldrh	r3, [r1, r3]
   1bec4:	ands	r3, r3, #2048	; 0x800
   1bec8:	bne	1beb4 <__assert_fail@plt+0xaef8>
   1becc:	cmp	r4, #46	; 0x2e
   1bed0:	beq	1bfa0 <__assert_fail@plt+0xafe4>
   1bed4:	cmp	r4, #0
   1bed8:	bne	1bf84 <__assert_fail@plt+0xafc8>
   1bedc:	cmn	r8, r3
   1bee0:	beq	1bf84 <__assert_fail@plt+0xafc8>
   1bee4:	cmp	r5, r3
   1bee8:	movge	r5, r3
   1beec:	cmp	r8, #0
   1bef0:	moveq	r4, #1
   1bef4:	moveq	r8, r4
   1bef8:	mov	r1, r5
   1befc:	mov	r0, r8
   1bf00:	bl	19338 <__assert_fail@plt+0x837c>
   1bf04:	str	r0, [r7]
   1bf08:	ldrb	r3, [r6]
   1bf0c:	cmp	r3, #45	; 0x2d
   1bf10:	beq	1bfd4 <__assert_fail@plt+0xb018>
   1bf14:	mov	r3, #0
   1bf18:	str	r3, [r0]
   1bf1c:	ldrb	r3, [r6]
   1bf20:	cmp	r3, #43	; 0x2b
   1bf24:	ldrbeq	r3, [r6, #1]
   1bf28:	addeq	r6, r6, #1
   1bf2c:	cmp	r3, #48	; 0x30
   1bf30:	bne	1bf40 <__assert_fail@plt+0xaf84>
   1bf34:	ldrb	r3, [r6, #1]!
   1bf38:	cmp	r3, #48	; 0x30
   1bf3c:	beq	1bf34 <__assert_fail@plt+0xaf78>
   1bf40:	cmp	r4, #0
   1bf44:	ldr	r1, [r0, #24]
   1bf48:	beq	1bfe8 <__assert_fail@plt+0xb02c>
   1bf4c:	cmp	r5, #0
   1bf50:	mov	r3, #0
   1bf54:	strb	r3, [r1]
   1bf58:	add	r8, r1, #1
   1bf5c:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bf60:	add	r3, r5, #1
   1bf64:	add	r3, r6, r3
   1bf68:	add	r6, r6, #1
   1bf6c:	ldrb	r2, [r6], #1
   1bf70:	sub	r2, r2, #48	; 0x30
   1bf74:	cmp	r6, r3
   1bf78:	strb	r2, [r8], #1
   1bf7c:	bne	1bf6c <__assert_fail@plt+0xafb0>
   1bf80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bf84:	ldr	r3, [pc, #136]	; 1c014 <__assert_fail@plt+0xb058>
   1bf88:	ldr	r3, [r3]
   1bf8c:	ldr	r2, [r3, #12]
   1bf90:	add	r2, r2, #1
   1bf94:	str	r2, [r3, #12]
   1bf98:	str	r3, [r7]
   1bf9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bfa0:	ldrb	r4, [r2, #1]
   1bfa4:	add	r0, r2, #1
   1bfa8:	lsl	r3, r4, #1
   1bfac:	ldrh	r3, [r1, r3]
   1bfb0:	ands	r3, r3, #2048	; 0x800
   1bfb4:	beq	1bed4 <__assert_fail@plt+0xaf18>
   1bfb8:	sub	r3, r0, r2
   1bfbc:	ldrb	r4, [r0, #1]!
   1bfc0:	lsl	ip, r4, #1
   1bfc4:	ldrh	ip, [r1, ip]
   1bfc8:	tst	ip, #2048	; 0x800
   1bfcc:	bne	1bfb8 <__assert_fail@plt+0xaffc>
   1bfd0:	b	1bed4 <__assert_fail@plt+0xaf18>
   1bfd4:	mov	r3, #1
   1bfd8:	str	r3, [r0]
   1bfdc:	add	r6, r6, #1
   1bfe0:	ldrb	r3, [r6]
   1bfe4:	b	1bf2c <__assert_fail@plt+0xaf70>
   1bfe8:	add	r0, r6, r8
   1bfec:	mov	r2, r1
   1bff0:	ldrb	r3, [r6], #1
   1bff4:	sub	r3, r3, #48	; 0x30
   1bff8:	cmp	r6, r0
   1bffc:	strb	r3, [r2], #1
   1c000:	bne	1bff0 <__assert_fail@plt+0xb034>
   1c004:	cmp	r5, #0
   1c008:	add	r8, r1, r8
   1c00c:	bgt	1bf60 <__assert_fail@plt+0xafa4>
   1c010:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c014:	andeq	r1, r3, r8, asr #5
   1c018:	push	{r4, lr}
   1c01c:	bl	10de8 <ferror@plt>
   1c020:	cmp	r0, #0
   1c024:	popeq	{r4, pc}
   1c028:	ldr	r0, [pc, #8]	; 1c038 <__assert_fail@plt+0xb07c>
   1c02c:	bl	10e3c <perror@plt>
   1c030:	mov	r0, #1
   1c034:	bl	10ed8 <exit@plt>
   1c038:	andeq	r0, r2, r8, ror #24
   1c03c:	push	{r4, lr}
   1c040:	bl	10de8 <ferror@plt>
   1c044:	cmp	r0, #0
   1c048:	popeq	{r4, pc}
   1c04c:	ldr	r0, [pc, #8]	; 1c05c <__assert_fail@plt+0xb0a0>
   1c050:	bl	10e3c <perror@plt>
   1c054:	mov	r0, #1
   1c058:	bl	10ed8 <exit@plt>
   1c05c:	andeq	r0, r2, r8, lsl #25
   1c060:	subs	r2, r1, #1
   1c064:	bxeq	lr
   1c068:	bcc	1c240 <__assert_fail@plt+0xb284>
   1c06c:	cmp	r0, r1
   1c070:	bls	1c224 <__assert_fail@plt+0xb268>
   1c074:	tst	r1, r2
   1c078:	beq	1c230 <__assert_fail@plt+0xb274>
   1c07c:	clz	r3, r0
   1c080:	clz	r2, r1
   1c084:	sub	r3, r2, r3
   1c088:	rsbs	r3, r3, #31
   1c08c:	addne	r3, r3, r3, lsl #1
   1c090:	mov	r2, #0
   1c094:	addne	pc, pc, r3, lsl #2
   1c098:	nop			; (mov r0, r0)
   1c09c:	cmp	r0, r1, lsl #31
   1c0a0:	adc	r2, r2, r2
   1c0a4:	subcs	r0, r0, r1, lsl #31
   1c0a8:	cmp	r0, r1, lsl #30
   1c0ac:	adc	r2, r2, r2
   1c0b0:	subcs	r0, r0, r1, lsl #30
   1c0b4:	cmp	r0, r1, lsl #29
   1c0b8:	adc	r2, r2, r2
   1c0bc:	subcs	r0, r0, r1, lsl #29
   1c0c0:	cmp	r0, r1, lsl #28
   1c0c4:	adc	r2, r2, r2
   1c0c8:	subcs	r0, r0, r1, lsl #28
   1c0cc:	cmp	r0, r1, lsl #27
   1c0d0:	adc	r2, r2, r2
   1c0d4:	subcs	r0, r0, r1, lsl #27
   1c0d8:	cmp	r0, r1, lsl #26
   1c0dc:	adc	r2, r2, r2
   1c0e0:	subcs	r0, r0, r1, lsl #26
   1c0e4:	cmp	r0, r1, lsl #25
   1c0e8:	adc	r2, r2, r2
   1c0ec:	subcs	r0, r0, r1, lsl #25
   1c0f0:	cmp	r0, r1, lsl #24
   1c0f4:	adc	r2, r2, r2
   1c0f8:	subcs	r0, r0, r1, lsl #24
   1c0fc:	cmp	r0, r1, lsl #23
   1c100:	adc	r2, r2, r2
   1c104:	subcs	r0, r0, r1, lsl #23
   1c108:	cmp	r0, r1, lsl #22
   1c10c:	adc	r2, r2, r2
   1c110:	subcs	r0, r0, r1, lsl #22
   1c114:	cmp	r0, r1, lsl #21
   1c118:	adc	r2, r2, r2
   1c11c:	subcs	r0, r0, r1, lsl #21
   1c120:	cmp	r0, r1, lsl #20
   1c124:	adc	r2, r2, r2
   1c128:	subcs	r0, r0, r1, lsl #20
   1c12c:	cmp	r0, r1, lsl #19
   1c130:	adc	r2, r2, r2
   1c134:	subcs	r0, r0, r1, lsl #19
   1c138:	cmp	r0, r1, lsl #18
   1c13c:	adc	r2, r2, r2
   1c140:	subcs	r0, r0, r1, lsl #18
   1c144:	cmp	r0, r1, lsl #17
   1c148:	adc	r2, r2, r2
   1c14c:	subcs	r0, r0, r1, lsl #17
   1c150:	cmp	r0, r1, lsl #16
   1c154:	adc	r2, r2, r2
   1c158:	subcs	r0, r0, r1, lsl #16
   1c15c:	cmp	r0, r1, lsl #15
   1c160:	adc	r2, r2, r2
   1c164:	subcs	r0, r0, r1, lsl #15
   1c168:	cmp	r0, r1, lsl #14
   1c16c:	adc	r2, r2, r2
   1c170:	subcs	r0, r0, r1, lsl #14
   1c174:	cmp	r0, r1, lsl #13
   1c178:	adc	r2, r2, r2
   1c17c:	subcs	r0, r0, r1, lsl #13
   1c180:	cmp	r0, r1, lsl #12
   1c184:	adc	r2, r2, r2
   1c188:	subcs	r0, r0, r1, lsl #12
   1c18c:	cmp	r0, r1, lsl #11
   1c190:	adc	r2, r2, r2
   1c194:	subcs	r0, r0, r1, lsl #11
   1c198:	cmp	r0, r1, lsl #10
   1c19c:	adc	r2, r2, r2
   1c1a0:	subcs	r0, r0, r1, lsl #10
   1c1a4:	cmp	r0, r1, lsl #9
   1c1a8:	adc	r2, r2, r2
   1c1ac:	subcs	r0, r0, r1, lsl #9
   1c1b0:	cmp	r0, r1, lsl #8
   1c1b4:	adc	r2, r2, r2
   1c1b8:	subcs	r0, r0, r1, lsl #8
   1c1bc:	cmp	r0, r1, lsl #7
   1c1c0:	adc	r2, r2, r2
   1c1c4:	subcs	r0, r0, r1, lsl #7
   1c1c8:	cmp	r0, r1, lsl #6
   1c1cc:	adc	r2, r2, r2
   1c1d0:	subcs	r0, r0, r1, lsl #6
   1c1d4:	cmp	r0, r1, lsl #5
   1c1d8:	adc	r2, r2, r2
   1c1dc:	subcs	r0, r0, r1, lsl #5
   1c1e0:	cmp	r0, r1, lsl #4
   1c1e4:	adc	r2, r2, r2
   1c1e8:	subcs	r0, r0, r1, lsl #4
   1c1ec:	cmp	r0, r1, lsl #3
   1c1f0:	adc	r2, r2, r2
   1c1f4:	subcs	r0, r0, r1, lsl #3
   1c1f8:	cmp	r0, r1, lsl #2
   1c1fc:	adc	r2, r2, r2
   1c200:	subcs	r0, r0, r1, lsl #2
   1c204:	cmp	r0, r1, lsl #1
   1c208:	adc	r2, r2, r2
   1c20c:	subcs	r0, r0, r1, lsl #1
   1c210:	cmp	r0, r1
   1c214:	adc	r2, r2, r2
   1c218:	subcs	r0, r0, r1
   1c21c:	mov	r0, r2
   1c220:	bx	lr
   1c224:	moveq	r0, #1
   1c228:	movne	r0, #0
   1c22c:	bx	lr
   1c230:	clz	r2, r1
   1c234:	rsb	r2, r2, #31
   1c238:	lsr	r0, r0, r2
   1c23c:	bx	lr
   1c240:	cmp	r0, #0
   1c244:	mvnne	r0, #0
   1c248:	b	1c4ac <__assert_fail@plt+0xb4f0>
   1c24c:	cmp	r1, #0
   1c250:	beq	1c240 <__assert_fail@plt+0xb284>
   1c254:	push	{r0, r1, lr}
   1c258:	bl	1c060 <__assert_fail@plt+0xb0a4>
   1c25c:	pop	{r1, r2, lr}
   1c260:	mul	r3, r2, r0
   1c264:	sub	r1, r1, r3
   1c268:	bx	lr
   1c26c:	cmp	r1, #0
   1c270:	beq	1c47c <__assert_fail@plt+0xb4c0>
   1c274:	eor	ip, r0, r1
   1c278:	rsbmi	r1, r1, #0
   1c27c:	subs	r2, r1, #1
   1c280:	beq	1c448 <__assert_fail@plt+0xb48c>
   1c284:	movs	r3, r0
   1c288:	rsbmi	r3, r0, #0
   1c28c:	cmp	r3, r1
   1c290:	bls	1c454 <__assert_fail@plt+0xb498>
   1c294:	tst	r1, r2
   1c298:	beq	1c464 <__assert_fail@plt+0xb4a8>
   1c29c:	clz	r2, r3
   1c2a0:	clz	r0, r1
   1c2a4:	sub	r2, r0, r2
   1c2a8:	rsbs	r2, r2, #31
   1c2ac:	addne	r2, r2, r2, lsl #1
   1c2b0:	mov	r0, #0
   1c2b4:	addne	pc, pc, r2, lsl #2
   1c2b8:	nop			; (mov r0, r0)
   1c2bc:	cmp	r3, r1, lsl #31
   1c2c0:	adc	r0, r0, r0
   1c2c4:	subcs	r3, r3, r1, lsl #31
   1c2c8:	cmp	r3, r1, lsl #30
   1c2cc:	adc	r0, r0, r0
   1c2d0:	subcs	r3, r3, r1, lsl #30
   1c2d4:	cmp	r3, r1, lsl #29
   1c2d8:	adc	r0, r0, r0
   1c2dc:	subcs	r3, r3, r1, lsl #29
   1c2e0:	cmp	r3, r1, lsl #28
   1c2e4:	adc	r0, r0, r0
   1c2e8:	subcs	r3, r3, r1, lsl #28
   1c2ec:	cmp	r3, r1, lsl #27
   1c2f0:	adc	r0, r0, r0
   1c2f4:	subcs	r3, r3, r1, lsl #27
   1c2f8:	cmp	r3, r1, lsl #26
   1c2fc:	adc	r0, r0, r0
   1c300:	subcs	r3, r3, r1, lsl #26
   1c304:	cmp	r3, r1, lsl #25
   1c308:	adc	r0, r0, r0
   1c30c:	subcs	r3, r3, r1, lsl #25
   1c310:	cmp	r3, r1, lsl #24
   1c314:	adc	r0, r0, r0
   1c318:	subcs	r3, r3, r1, lsl #24
   1c31c:	cmp	r3, r1, lsl #23
   1c320:	adc	r0, r0, r0
   1c324:	subcs	r3, r3, r1, lsl #23
   1c328:	cmp	r3, r1, lsl #22
   1c32c:	adc	r0, r0, r0
   1c330:	subcs	r3, r3, r1, lsl #22
   1c334:	cmp	r3, r1, lsl #21
   1c338:	adc	r0, r0, r0
   1c33c:	subcs	r3, r3, r1, lsl #21
   1c340:	cmp	r3, r1, lsl #20
   1c344:	adc	r0, r0, r0
   1c348:	subcs	r3, r3, r1, lsl #20
   1c34c:	cmp	r3, r1, lsl #19
   1c350:	adc	r0, r0, r0
   1c354:	subcs	r3, r3, r1, lsl #19
   1c358:	cmp	r3, r1, lsl #18
   1c35c:	adc	r0, r0, r0
   1c360:	subcs	r3, r3, r1, lsl #18
   1c364:	cmp	r3, r1, lsl #17
   1c368:	adc	r0, r0, r0
   1c36c:	subcs	r3, r3, r1, lsl #17
   1c370:	cmp	r3, r1, lsl #16
   1c374:	adc	r0, r0, r0
   1c378:	subcs	r3, r3, r1, lsl #16
   1c37c:	cmp	r3, r1, lsl #15
   1c380:	adc	r0, r0, r0
   1c384:	subcs	r3, r3, r1, lsl #15
   1c388:	cmp	r3, r1, lsl #14
   1c38c:	adc	r0, r0, r0
   1c390:	subcs	r3, r3, r1, lsl #14
   1c394:	cmp	r3, r1, lsl #13
   1c398:	adc	r0, r0, r0
   1c39c:	subcs	r3, r3, r1, lsl #13
   1c3a0:	cmp	r3, r1, lsl #12
   1c3a4:	adc	r0, r0, r0
   1c3a8:	subcs	r3, r3, r1, lsl #12
   1c3ac:	cmp	r3, r1, lsl #11
   1c3b0:	adc	r0, r0, r0
   1c3b4:	subcs	r3, r3, r1, lsl #11
   1c3b8:	cmp	r3, r1, lsl #10
   1c3bc:	adc	r0, r0, r0
   1c3c0:	subcs	r3, r3, r1, lsl #10
   1c3c4:	cmp	r3, r1, lsl #9
   1c3c8:	adc	r0, r0, r0
   1c3cc:	subcs	r3, r3, r1, lsl #9
   1c3d0:	cmp	r3, r1, lsl #8
   1c3d4:	adc	r0, r0, r0
   1c3d8:	subcs	r3, r3, r1, lsl #8
   1c3dc:	cmp	r3, r1, lsl #7
   1c3e0:	adc	r0, r0, r0
   1c3e4:	subcs	r3, r3, r1, lsl #7
   1c3e8:	cmp	r3, r1, lsl #6
   1c3ec:	adc	r0, r0, r0
   1c3f0:	subcs	r3, r3, r1, lsl #6
   1c3f4:	cmp	r3, r1, lsl #5
   1c3f8:	adc	r0, r0, r0
   1c3fc:	subcs	r3, r3, r1, lsl #5
   1c400:	cmp	r3, r1, lsl #4
   1c404:	adc	r0, r0, r0
   1c408:	subcs	r3, r3, r1, lsl #4
   1c40c:	cmp	r3, r1, lsl #3
   1c410:	adc	r0, r0, r0
   1c414:	subcs	r3, r3, r1, lsl #3
   1c418:	cmp	r3, r1, lsl #2
   1c41c:	adc	r0, r0, r0
   1c420:	subcs	r3, r3, r1, lsl #2
   1c424:	cmp	r3, r1, lsl #1
   1c428:	adc	r0, r0, r0
   1c42c:	subcs	r3, r3, r1, lsl #1
   1c430:	cmp	r3, r1
   1c434:	adc	r0, r0, r0
   1c438:	subcs	r3, r3, r1
   1c43c:	cmp	ip, #0
   1c440:	rsbmi	r0, r0, #0
   1c444:	bx	lr
   1c448:	teq	ip, r0
   1c44c:	rsbmi	r0, r0, #0
   1c450:	bx	lr
   1c454:	movcc	r0, #0
   1c458:	asreq	r0, ip, #31
   1c45c:	orreq	r0, r0, #1
   1c460:	bx	lr
   1c464:	clz	r2, r1
   1c468:	rsb	r2, r2, #31
   1c46c:	cmp	ip, #0
   1c470:	lsr	r0, r3, r2
   1c474:	rsbmi	r0, r0, #0
   1c478:	bx	lr
   1c47c:	cmp	r0, #0
   1c480:	mvngt	r0, #-2147483648	; 0x80000000
   1c484:	movlt	r0, #-2147483648	; 0x80000000
   1c488:	b	1c4ac <__assert_fail@plt+0xb4f0>
   1c48c:	cmp	r1, #0
   1c490:	beq	1c47c <__assert_fail@plt+0xb4c0>
   1c494:	push	{r0, r1, lr}
   1c498:	bl	1c274 <__assert_fail@plt+0xb2b8>
   1c49c:	pop	{r1, r2, lr}
   1c4a0:	mul	r3, r2, r0
   1c4a4:	sub	r1, r1, r3
   1c4a8:	bx	lr
   1c4ac:	push	{r1, lr}
   1c4b0:	mov	r0, #8
   1c4b4:	bl	10d7c <raise@plt>
   1c4b8:	pop	{r1, pc}
   1c4bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c4c0:	mov	r7, r0
   1c4c4:	ldr	r6, [pc, #72]	; 1c514 <__assert_fail@plt+0xb558>
   1c4c8:	ldr	r5, [pc, #72]	; 1c518 <__assert_fail@plt+0xb55c>
   1c4cc:	add	r6, pc, r6
   1c4d0:	add	r5, pc, r5
   1c4d4:	sub	r6, r6, r5
   1c4d8:	mov	r8, r1
   1c4dc:	mov	r9, r2
   1c4e0:	bl	10d50 <_init@@Base>
   1c4e4:	asrs	r6, r6, #2
   1c4e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c4ec:	mov	r4, #0
   1c4f0:	add	r4, r4, #1
   1c4f4:	ldr	r3, [r5], #4
   1c4f8:	mov	r2, r9
   1c4fc:	mov	r1, r8
   1c500:	mov	r0, r7
   1c504:	blx	r3
   1c508:	cmp	r6, r4
   1c50c:	bne	1c4f0 <__assert_fail@plt+0xb534>
   1c510:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c514:	andeq	r4, r1, r8, lsr r9
   1c518:	andeq	r4, r1, r0, lsr r9
   1c51c:	bx	lr

Disassembly of section .fini:

0001c520 <_fini@@Base>:
   1c520:	push	{r3, lr}
   1c524:	pop	{r3, pc}
