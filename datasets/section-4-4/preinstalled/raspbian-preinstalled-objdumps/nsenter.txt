
raspbian-preinstalled/nsenter:     file format elf32-littlearm


Disassembly of section .init:

00010fd8 <.init>:
   10fd8:	push	{r3, lr}
   10fdc:	bl	12050 <__assert_fail@plt+0xd28>
   10fe0:	pop	{r3, pc}

Disassembly of section .plt:

00010fe4 <raise@plt-0x14>:
   10fe4:	push	{lr}		; (str lr, [sp, #-4]!)
   10fe8:	ldr	lr, [pc, #4]	; 10ff4 <raise@plt-0x4>
   10fec:	add	lr, pc, lr
   10ff0:	ldr	pc, [lr, #8]!
   10ff4:	andeq	r4, r1, r0, ror #29

00010ff8 <raise@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #20, 20	; 0x14000
   11000:	ldr	pc, [ip, #3808]!	; 0xee0

00011004 <is_selinux_enabled@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #20, 20	; 0x14000
   1100c:	ldr	pc, [ip, #3800]!	; 0xed8

00011010 <strcmp@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #20, 20	; 0x14000
   11018:	ldr	pc, [ip, #3792]!	; 0xed0

0001101c <strtol@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #20, 20	; 0x14000
   11024:	ldr	pc, [ip, #3784]!	; 0xec8

00011028 <strcspn@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #20, 20	; 0x14000
   11030:	ldr	pc, [ip, #3776]!	; 0xec0

00011034 <free@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #20, 20	; 0x14000
   1103c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011040 <ferror@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #20, 20	; 0x14000
   11048:	ldr	pc, [ip, #3760]!	; 0xeb0

0001104c <strndup@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #20, 20	; 0x14000
   11054:	ldr	pc, [ip, #3752]!	; 0xea8

00011058 <_exit@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #20, 20	; 0x14000
   11060:	ldr	pc, [ip, #3744]!	; 0xea0

00011064 <memcpy@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #20, 20	; 0x14000
   1106c:	ldr	pc, [ip, #3736]!	; 0xe98

00011070 <execvp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #20, 20	; 0x14000
   11078:	ldr	pc, [ip, #3728]!	; 0xe90

0001107c <__strtoull_internal@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #20, 20	; 0x14000
   11084:	ldr	pc, [ip, #3720]!	; 0xe88

00011088 <dcgettext@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #20, 20	; 0x14000
   11090:	ldr	pc, [ip, #3712]!	; 0xe80

00011094 <strdup@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #20, 20	; 0x14000
   1109c:	ldr	pc, [ip, #3704]!	; 0xe78

000110a0 <__stack_chk_fail@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #20, 20	; 0x14000
   110a8:	ldr	pc, [ip, #3696]!	; 0xe70

000110ac <setns@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #20, 20	; 0x14000
   110b4:	ldr	pc, [ip, #3688]!	; 0xe68

000110b8 <textdomain@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #20, 20	; 0x14000
   110c0:	ldr	pc, [ip, #3680]!	; 0xe60

000110c4 <err@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #20, 20	; 0x14000
   110cc:	ldr	pc, [ip, #3672]!	; 0xe58

000110d0 <setgroups@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #20, 20	; 0x14000
   110d8:	ldr	pc, [ip, #3664]!	; 0xe50

000110dc <waitpid@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #20, 20	; 0x14000
   110e4:	ldr	pc, [ip, #3656]!	; 0xe48

000110e8 <strcpy@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #20, 20	; 0x14000
   110f0:	ldr	pc, [ip, #3648]!	; 0xe40

000110f4 <chroot@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #20, 20	; 0x14000
   110fc:	ldr	pc, [ip, #3640]!	; 0xe38

00011100 <__fpending@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #20, 20	; 0x14000
   11108:	ldr	pc, [ip, #3632]!	; 0xe30

0001110c <open64@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #20, 20	; 0x14000
   11114:	ldr	pc, [ip, #3624]!	; 0xe28

00011118 <getenv@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #20, 20	; 0x14000
   11120:	ldr	pc, [ip, #3616]!	; 0xe20

00011124 <setgid@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #20, 20	; 0x14000
   1112c:	ldr	pc, [ip, #3608]!	; 0xe18

00011130 <malloc@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #20, 20	; 0x14000
   11138:	ldr	pc, [ip, #3600]!	; 0xe10

0001113c <__libc_start_main@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #20, 20	; 0x14000
   11144:	ldr	pc, [ip, #3592]!	; 0xe08

00011148 <__gmon_start__@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #20, 20	; 0x14000
   11150:	ldr	pc, [ip, #3584]!	; 0xe00

00011154 <getopt_long@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #20, 20	; 0x14000
   1115c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011160 <kill@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #20, 20	; 0x14000
   11168:	ldr	pc, [ip, #3568]!	; 0xdf0

0001116c <__ctype_b_loc@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #20, 20	; 0x14000
   11174:	ldr	pc, [ip, #3560]!	; 0xde8

00011178 <getpid@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #20, 20	; 0x14000
   11180:	ldr	pc, [ip, #3552]!	; 0xde0

00011184 <exit@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #20, 20	; 0x14000
   1118c:	ldr	pc, [ip, #3544]!	; 0xdd8

00011190 <strtoul@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #20, 20	; 0x14000
   11198:	ldr	pc, [ip, #3536]!	; 0xdd0

0001119c <strlen@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #20, 20	; 0x14000
   111a4:	ldr	pc, [ip, #3528]!	; 0xdc8

000111a8 <strchr@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #20, 20	; 0x14000
   111b0:	ldr	pc, [ip, #3520]!	; 0xdc0

000111b4 <warnx@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #20, 20	; 0x14000
   111bc:	ldr	pc, [ip, #3512]!	; 0xdb8

000111c0 <__errno_location@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #20, 20	; 0x14000
   111c8:	ldr	pc, [ip, #3504]!	; 0xdb0

000111cc <__cxa_atexit@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #20, 20	; 0x14000
   111d4:	ldr	pc, [ip, #3496]!	; 0xda8

000111d8 <__vasprintf_chk@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #20, 20	; 0x14000
   111e0:	ldr	pc, [ip, #3488]!	; 0xda0

000111e4 <__xpg_basename@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #20, 20	; 0x14000
   111ec:	ldr	pc, [ip, #3480]!	; 0xd98

000111f0 <fgetc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #20, 20	; 0x14000
   111f8:	ldr	pc, [ip, #3472]!	; 0xd90

000111fc <__printf_chk@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #20, 20	; 0x14000
   11204:	ldr	pc, [ip, #3464]!	; 0xd88

00011208 <strtod@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #20, 20	; 0x14000
   11210:	ldr	pc, [ip, #3456]!	; 0xd80

00011214 <__fprintf_chk@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #20, 20	; 0x14000
   1121c:	ldr	pc, [ip, #3448]!	; 0xd78

00011220 <fclose@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #20, 20	; 0x14000
   11228:	ldr	pc, [ip, #3440]!	; 0xd70

0001122c <setlocale@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #20, 20	; 0x14000
   11234:	ldr	pc, [ip, #3432]!	; 0xd68

00011238 <fork@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #20, 20	; 0x14000
   11240:	ldr	pc, [ip, #3424]!	; 0xd60

00011244 <errx@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #20, 20	; 0x14000
   1124c:	ldr	pc, [ip, #3416]!	; 0xd58

00011250 <execl@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #20, 20	; 0x14000
   11258:	ldr	pc, [ip, #3408]!	; 0xd50

0001125c <warn@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #20, 20	; 0x14000
   11264:	ldr	pc, [ip, #3400]!	; 0xd48

00011268 <fputc@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #20, 20	; 0x14000
   11270:	ldr	pc, [ip, #3392]!	; 0xd40

00011274 <setuid@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #20, 20	; 0x14000
   1127c:	ldr	pc, [ip, #3384]!	; 0xd38

00011280 <localeconv@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #20, 20	; 0x14000
   11288:	ldr	pc, [ip, #3376]!	; 0xd30

0001128c <fchdir@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #20, 20	; 0x14000
   11294:	ldr	pc, [ip, #3368]!	; 0xd28

00011298 <__strtoll_internal@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #20, 20	; 0x14000
   112a0:	ldr	pc, [ip, #3360]!	; 0xd20

000112a4 <freecon@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #20, 20	; 0x14000
   112ac:	ldr	pc, [ip, #3352]!	; 0xd18

000112b0 <bindtextdomain@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #20, 20	; 0x14000
   112b8:	ldr	pc, [ip, #3344]!	; 0xd10

000112bc <setexeccon@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #20, 20	; 0x14000
   112c4:	ldr	pc, [ip, #3336]!	; 0xd08

000112c8 <__xstat64@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #20, 20	; 0x14000
   112d0:	ldr	pc, [ip, #3328]!	; 0xd00

000112d4 <getpidcon@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #20, 20	; 0x14000
   112dc:	ldr	pc, [ip, #3320]!	; 0xcf8

000112e0 <fputs@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #20, 20	; 0x14000
   112e8:	ldr	pc, [ip, #3312]!	; 0xcf0

000112ec <strncmp@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #20, 20	; 0x14000
   112f4:	ldr	pc, [ip, #3304]!	; 0xce8

000112f8 <abort@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #20, 20	; 0x14000
   11300:	ldr	pc, [ip, #3296]!	; 0xce0

00011304 <close@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #20, 20	; 0x14000
   1130c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011310 <__snprintf_chk@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #20, 20	; 0x14000
   11318:	ldr	pc, [ip, #3280]!	; 0xcd0

0001131c <strspn@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #20, 20	; 0x14000
   11324:	ldr	pc, [ip, #3272]!	; 0xcc8

00011328 <__assert_fail@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #20, 20	; 0x14000
   11330:	ldr	pc, [ip, #3264]!	; 0xcc0

Disassembly of section .text:

00011338 <.text>:
   11338:	ldr	r3, [pc, #3016]	; 11f08 <__assert_fail@plt+0xbe0>
   1133c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11340:	sub	sp, sp, #60	; 0x3c
   11344:	ldr	r3, [r3]
   11348:	mov	r7, r0
   1134c:	mov	r6, r1
   11350:	mov	r0, #6
   11354:	ldr	r1, [pc, #2992]	; 11f0c <__assert_fail@plt+0xbe4>
   11358:	str	r3, [sp, #52]	; 0x34
   1135c:	bl	1122c <setlocale@plt>
   11360:	ldr	r1, [pc, #2984]	; 11f10 <__assert_fail@plt+0xbe8>
   11364:	ldr	r0, [pc, #2984]	; 11f14 <__assert_fail@plt+0xbec>
   11368:	mov	sl, #0
   1136c:	bl	112b0 <bindtextdomain@plt>
   11370:	ldr	r9, [pc, #2976]	; 11f18 <__assert_fail@plt+0xbf0>
   11374:	ldr	r0, [pc, #2968]	; 11f14 <__assert_fail@plt+0xbec>
   11378:	ldr	r8, [pc, #2972]	; 11f1c <__assert_fail@plt+0xbf4>
   1137c:	ldr	fp, [pc, #2972]	; 11f20 <__assert_fail@plt+0xbf8>
   11380:	bl	110b8 <textdomain@plt>
   11384:	mov	r5, sl
   11388:	ldr	r0, [pc, #2964]	; 11f24 <__assert_fail@plt+0xbfc>
   1138c:	bl	14788 <__assert_fail@plt+0x3460>
   11390:	mvn	r3, #0
   11394:	str	sl, [sp, #36]	; 0x24
   11398:	str	sl, [sp, #32]
   1139c:	str	sl, [sp, #16]
   113a0:	str	sl, [sp, #28]
   113a4:	str	sl, [sp, #24]
   113a8:	str	sl, [sp, #40]	; 0x28
   113ac:	str	sl, [sp, #44]	; 0x2c
   113b0:	str	sl, [sp, #20]
   113b4:	str	r3, [sp, #12]
   113b8:	mov	r4, #0
   113bc:	str	r4, [sp]
   113c0:	mov	r3, r9
   113c4:	mov	r2, r8
   113c8:	mov	r1, r6
   113cc:	mov	r0, r7
   113d0:	bl	11154 <getopt_long@plt>
   113d4:	cmn	r0, #1
   113d8:	beq	116f0 <__assert_fail@plt+0x3c8>
   113dc:	sub	r0, r0, #67	; 0x43
   113e0:	cmp	r0, #61	; 0x3d
   113e4:	ldrls	pc, [pc, r0, lsl #2]
   113e8:	b	11d6c <__assert_fail@plt+0xa44>
   113ec:			; <UNDEFINED> instruction: 0x000116bc
   113f0:	andeq	r1, r1, ip, ror #26
   113f4:	andeq	r1, r1, ip, ror #26
   113f8:	andeq	r1, r1, r4, ror #13
   113fc:	andeq	r1, r1, ip, lsl #13
   11400:	andeq	r1, r1, ip, ror #26
   11404:	andeq	r1, r1, ip, ror #26
   11408:	andeq	r1, r1, ip, ror #26
   1140c:	andeq	r1, r1, ip, ror #26
   11410:	andeq	r1, r1, ip, ror #26
   11414:	andeq	r1, r1, ip, ror #26
   11418:	andeq	r1, r1, ip, ror #26
   1141c:	andeq	r1, r1, ip, ror #26
   11420:	andeq	r1, r1, ip, ror #26
   11424:	andeq	r1, r1, ip, ror #26
   11428:	andeq	r1, r1, ip, ror #26
   1142c:	andeq	r1, r1, ip, asr r6
   11430:	andeq	r1, r1, ip, ror #26
   11434:	andeq	r1, r1, r0, asr #12
   11438:	strdeq	r1, [r1], -r8
   1143c:	andeq	r1, r1, ip, ror #26
   11440:	andeq	r1, r1, ip, ror #26
   11444:	andeq	r1, r1, ip, ror #26
   11448:	strdeq	r1, [r1], -r0
   1144c:	andeq	r1, r1, ip, ror #26
   11450:	andeq	r1, r1, ip, ror #26
   11454:	andeq	r1, r1, ip, ror #26
   11458:	andeq	r1, r1, ip, ror #26
   1145c:	andeq	r1, r1, ip, ror #26
   11460:	andeq	r1, r1, ip, ror #26
   11464:	ldrdeq	r1, [r1], -r8
   11468:	andeq	r1, r1, ip, ror #26
   1146c:	andeq	r1, r1, ip, ror #26
   11470:	andeq	r1, r1, ip, ror #26
   11474:	andeq	r1, r1, ip, ror #26
   11478:	andeq	r1, r1, ip, ror #26
   1147c:	andeq	r1, r1, ip, ror #26
   11480:	strdeq	r1, [r1], -r0
   11484:	ldrdeq	r1, [r1], -r4
   11488:	andeq	r1, r1, ip, ror #26
   1148c:	andeq	r1, r1, ip, ror #26
   11490:	andeq	r1, r1, ip, ror #26
   11494:			; <UNDEFINED> instruction: 0x000115b8
   11498:	muleq	r1, ip, r5
   1149c:	andeq	r1, r1, ip, ror #26
   114a0:	andeq	r1, r1, r0, lsl #11
   114a4:	andeq	r1, r1, ip, ror #26
   114a8:	andeq	r1, r1, ip, asr r5
   114ac:	andeq	r1, r1, ip, ror #26
   114b0:	andeq	r1, r1, r0, lsr r5
   114b4:	andeq	r1, r1, r4, lsl r5
   114b8:	andeq	r1, r1, ip, ror #26
   114bc:	strdeq	r1, [r1], -r0
   114c0:	andeq	r1, r1, ip, ror #26
   114c4:	andeq	r1, r1, ip, ror #26
   114c8:	andeq	r1, r1, ip, ror #26
   114cc:	andeq	r1, r1, ip, ror #26
   114d0:	andeq	r1, r1, ip, ror #26
   114d4:	andeq	r1, r1, ip, ror #26
   114d8:	andeq	r1, r1, ip, ror #26
   114dc:	andeq	r1, r1, ip, ror #26
   114e0:	andeq	r1, r1, r4, ror #9
   114e4:	mov	r3, #1
   114e8:	str	r3, [sp, #20]
   114ec:	b	113b8 <__assert_fail@plt+0x90>
   114f0:	ldr	r2, [fp]
   114f4:	cmp	r2, #0
   114f8:	moveq	r3, #1
   114fc:	streq	r3, [sp, #40]	; 0x28
   11500:	beq	113b8 <__assert_fail@plt+0x90>
   11504:	ldr	r1, [pc, #2588]	; 11f28 <__assert_fail@plt+0xc00>
   11508:	ldr	r0, [pc, #2588]	; 11f2c <__assert_fail@plt+0xc04>
   1150c:	bl	12104 <__assert_fail@plt+0xddc>
   11510:	b	113b8 <__assert_fail@plt+0x90>
   11514:	ldr	r1, [fp]
   11518:	cmp	r1, #0
   1151c:	orreq	r5, r5, #67108864	; 0x4000000
   11520:	beq	113b8 <__assert_fail@plt+0x90>
   11524:	mov	r0, #67108864	; 0x4000000
   11528:	bl	1238c <__assert_fail@plt+0x1064>
   1152c:	b	113b8 <__assert_fail@plt+0x90>
   11530:	mov	r2, #5
   11534:	ldr	r1, [pc, #2548]	; 11f30 <__assert_fail@plt+0xc08>
   11538:	mov	r0, #0
   1153c:	ldr	r4, [fp]
   11540:	bl	11088 <dcgettext@plt>
   11544:	mov	r1, r0
   11548:	mov	r0, r4
   1154c:	bl	13534 <__assert_fail@plt+0x220c>
   11550:	ldr	r3, [pc, #2524]	; 11f34 <__assert_fail@plt+0xc0c>
   11554:	str	r0, [r3]
   11558:	b	113b8 <__assert_fail@plt+0x90>
   1155c:	ldr	r2, [fp]
   11560:	cmp	r2, #0
   11564:	moveq	r3, #1
   11568:	streq	r3, [sp, #44]	; 0x2c
   1156c:	beq	113b8 <__assert_fail@plt+0x90>
   11570:	ldr	r1, [pc, #2496]	; 11f38 <__assert_fail@plt+0xc10>
   11574:	ldr	r0, [pc, #2496]	; 11f3c <__assert_fail@plt+0xc14>
   11578:	bl	12104 <__assert_fail@plt+0xddc>
   1157c:	b	113b8 <__assert_fail@plt+0x90>
   11580:	ldr	r1, [fp]
   11584:	cmp	r1, #0
   11588:	orreq	r5, r5, #536870912	; 0x20000000
   1158c:	beq	113b8 <__assert_fail@plt+0x90>
   11590:	mov	r0, #536870912	; 0x20000000
   11594:	bl	1238c <__assert_fail@plt+0x1064>
   11598:	b	113b8 <__assert_fail@plt+0x90>
   1159c:	ldr	r1, [fp]
   115a0:	cmp	r1, #0
   115a4:	orreq	r5, r5, #1073741824	; 0x40000000
   115a8:	beq	113b8 <__assert_fail@plt+0x90>
   115ac:	mov	r0, #1073741824	; 0x40000000
   115b0:	bl	1238c <__assert_fail@plt+0x1064>
   115b4:	b	113b8 <__assert_fail@plt+0x90>
   115b8:	ldr	r1, [fp]
   115bc:	cmp	r1, #0
   115c0:	orreq	r5, r5, #131072	; 0x20000
   115c4:	beq	113b8 <__assert_fail@plt+0x90>
   115c8:	mov	r0, #131072	; 0x20000
   115cc:	bl	1238c <__assert_fail@plt+0x1064>
   115d0:	b	113b8 <__assert_fail@plt+0x90>
   115d4:	ldr	r1, [fp]
   115d8:	cmp	r1, #0
   115dc:	orreq	r5, r5, #134217728	; 0x8000000
   115e0:	beq	113b8 <__assert_fail@plt+0x90>
   115e4:	mov	r0, #134217728	; 0x8000000
   115e8:	bl	1238c <__assert_fail@plt+0x1064>
   115ec:	b	113b8 <__assert_fail@plt+0x90>
   115f0:	mov	sl, #1
   115f4:	b	113b8 <__assert_fail@plt+0x90>
   115f8:	mov	r2, #5
   115fc:	ldr	r1, [pc, #2364]	; 11f40 <__assert_fail@plt+0xc18>
   11600:	mov	r0, #0
   11604:	bl	11088 <dcgettext@plt>
   11608:	ldr	r2, [pc, #2356]	; 11f44 <__assert_fail@plt+0xc1c>
   1160c:	ldr	r3, [pc, #2356]	; 11f48 <__assert_fail@plt+0xc20>
   11610:	ldr	r2, [r2]
   11614:	mov	r1, r0
   11618:	mov	r0, #1
   1161c:	bl	111fc <__printf_chk@plt>
   11620:	ldr	r3, [pc, #2272]	; 11f08 <__assert_fail@plt+0xbe0>
   11624:	ldr	r2, [sp, #52]	; 0x34
   11628:	mov	r0, #0
   1162c:	ldr	r3, [r3]
   11630:	cmp	r2, r3
   11634:	bne	11ecc <__assert_fail@plt+0xba4>
   11638:	add	sp, sp, #60	; 0x3c
   1163c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11640:	ldr	r1, [fp]
   11644:	cmp	r1, #0
   11648:	orreq	r5, r5, #268435456	; 0x10000000
   1164c:	beq	113b8 <__assert_fail@plt+0x90>
   11650:	mov	r0, #268435456	; 0x10000000
   11654:	bl	1238c <__assert_fail@plt+0x1064>
   11658:	b	113b8 <__assert_fail@plt+0x90>
   1165c:	mov	r2, #5
   11660:	ldr	r1, [pc, #2276]	; 11f4c <__assert_fail@plt+0xc24>
   11664:	mov	r0, #0
   11668:	ldr	r4, [fp]
   1166c:	bl	11088 <dcgettext@plt>
   11670:	mov	r1, r0
   11674:	mov	r0, r4
   11678:	bl	13534 <__assert_fail@plt+0x220c>
   1167c:	mov	r3, #1
   11680:	str	r3, [sp, #24]
   11684:	str	r0, [sp, #32]
   11688:	b	113b8 <__assert_fail@plt+0x90>
   1168c:	mov	r2, #5
   11690:	ldr	r1, [pc, #2232]	; 11f50 <__assert_fail@plt+0xc28>
   11694:	mov	r0, #0
   11698:	ldr	r4, [fp]
   1169c:	bl	11088 <dcgettext@plt>
   116a0:	mov	r1, r0
   116a4:	mov	r0, r4
   116a8:	bl	13534 <__assert_fail@plt+0x220c>
   116ac:	mov	r3, #1
   116b0:	str	r3, [sp, #28]
   116b4:	str	r0, [sp, #36]	; 0x24
   116b8:	b	113b8 <__assert_fail@plt+0x90>
   116bc:	ldr	r1, [fp]
   116c0:	cmp	r1, #0
   116c4:	orreq	r5, r5, #33554432	; 0x2000000
   116c8:	beq	113b8 <__assert_fail@plt+0x90>
   116cc:	mov	r0, #33554432	; 0x2000000
   116d0:	bl	1238c <__assert_fail@plt+0x1064>
   116d4:	b	113b8 <__assert_fail@plt+0x90>
   116d8:	mov	r3, #1
   116dc:	str	r3, [sp, #16]
   116e0:	b	113b8 <__assert_fail@plt+0x90>
   116e4:	mov	r3, #0
   116e8:	str	r3, [sp, #12]
   116ec:	b	113b8 <__assert_fail@plt+0x90>
   116f0:	cmp	sl, r4
   116f4:	bne	118b8 <__assert_fail@plt+0x590>
   116f8:	ldr	r3, [sp, #16]
   116fc:	cmp	r3, #0
   11700:	ldreq	r4, [pc, #2124]	; 11f54 <__assert_fail@plt+0xc2c>
   11704:	beq	11774 <__assert_fail@plt+0x44c>
   11708:	ldr	r8, [pc, #2084]	; 11f34 <__assert_fail@plt+0xc0c>
   1170c:	ldr	r0, [r8]
   11710:	cmp	r0, #0
   11714:	beq	11eb4 <__assert_fail@plt+0xb8c>
   11718:	ldr	r4, [pc, #2100]	; 11f54 <__assert_fail@plt+0xc2c>
   1171c:	ldr	r3, [r4]
   11720:	cmp	r3, #0
   11724:	movne	r9, r4
   11728:	bne	11744 <__assert_fail@plt+0x41c>
   1172c:	b	117b0 <__assert_fail@plt+0x488>
   11730:	ldr	r3, [r9]
   11734:	orr	r5, r5, r3
   11738:	ldr	r3, [r9, #12]!
   1173c:	cmp	r3, #0
   11740:	beq	11774 <__assert_fail@plt+0x44c>
   11744:	ldr	r2, [r9, #8]
   11748:	cmp	r2, #0
   1174c:	bge	11738 <__assert_fail@plt+0x410>
   11750:	tst	r3, #268435456	; 0x10000000
   11754:	beq	11730 <__assert_fail@plt+0x408>
   11758:	bl	11178 <getpid@plt>
   1175c:	ldr	r2, [r9, #4]
   11760:	ldr	r1, [r8]
   11764:	bl	12274 <__assert_fail@plt+0xf4c>
   11768:	cmp	r0, #0
   1176c:	beq	11730 <__assert_fail@plt+0x408>
   11770:	b	11738 <__assert_fail@plt+0x410>
   11774:	ldr	r0, [r4]
   11778:	cmp	r0, #0
   1177c:	beq	117b0 <__assert_fail@plt+0x488>
   11780:	ldr	r8, [pc, #1996]	; 11f54 <__assert_fail@plt+0xc2c>
   11784:	b	11794 <__assert_fail@plt+0x46c>
   11788:	ldr	r0, [r8, #12]!
   1178c:	cmp	r0, #0
   11790:	beq	117b0 <__assert_fail@plt+0x488>
   11794:	tst	r5, r0
   11798:	beq	11788 <__assert_fail@plt+0x460>
   1179c:	mov	r1, #0
   117a0:	bl	1238c <__assert_fail@plt+0x1064>
   117a4:	ldr	r0, [r8, #12]!
   117a8:	cmp	r0, #0
   117ac:	bne	11794 <__assert_fail@plt+0x46c>
   117b0:	ldr	r3, [sp, #44]	; 0x2c
   117b4:	cmp	r3, #0
   117b8:	bne	11918 <__assert_fail@plt+0x5f0>
   117bc:	ldr	r3, [sp, #40]	; 0x28
   117c0:	cmp	r3, #0
   117c4:	bne	11904 <__assert_fail@plt+0x5dc>
   117c8:	ldr	r2, [r4]
   117cc:	cmp	r2, #0
   117d0:	beq	117f0 <__assert_fail@plt+0x4c8>
   117d4:	ldr	r3, [pc, #1912]	; 11f54 <__assert_fail@plt+0xc2c>
   117d8:	ldr	r1, [r3, #8]
   117dc:	cmp	r1, #0
   117e0:	orrge	r5, r5, r2
   117e4:	ldr	r2, [r3, #12]!
   117e8:	cmp	r2, #0
   117ec:	bne	117d8 <__assert_fail@plt+0x4b0>
   117f0:	ldr	r3, [sp, #20]
   117f4:	eor	r3, r3, #1
   117f8:	ands	r5, r3, r5, lsr #28
   117fc:	bne	11a84 <__assert_fail@plt+0x75c>
   11800:	ldr	r1, [r4, #12]
   11804:	cmp	r1, #0
   11808:	mvnne	r8, #0
   1180c:	ldrne	r9, [pc, #1860]	; 11f58 <__assert_fail@plt+0xc30>
   11810:	ldrne	sl, [sp, #12]
   11814:	beq	1184c <__assert_fail@plt+0x524>
   11818:	ldr	r0, [r9, #8]
   1181c:	cmp	r0, #0
   11820:	blt	1183c <__assert_fail@plt+0x514>
   11824:	cmp	r1, #536870912	; 0x20000000
   11828:	cmneq	sl, #1
   1182c:	moveq	sl, #1
   11830:	bl	110ac <setns@plt>
   11834:	cmp	r0, #0
   11838:	beq	118a8 <__assert_fail@plt+0x580>
   1183c:	ldr	r1, [r9, #12]!
   11840:	cmp	r1, #0
   11844:	bne	11818 <__assert_fail@plt+0x4f0>
   11848:	str	sl, [sp, #12]
   1184c:	ldr	r9, [pc, #1792]	; 11f54 <__assert_fail@plt+0xc2c>
   11850:	ldr	sl, [sp, #12]
   11854:	mvn	r8, #0
   11858:	ldr	r1, [r9]
   1185c:	cmp	r1, #0
   11860:	beq	11940 <__assert_fail@plt+0x618>
   11864:	ldr	r0, [r9, #8]
   11868:	cmp	r0, #0
   1186c:	blt	11938 <__assert_fail@plt+0x610>
   11870:	cmp	r1, #536870912	; 0x20000000
   11874:	cmneq	sl, #1
   11878:	moveq	sl, #1
   1187c:	bl	110ac <setns@plt>
   11880:	cmp	r0, #0
   11884:	beq	1192c <__assert_fail@plt+0x604>
   11888:	mov	r2, #5
   1188c:	ldr	r1, [pc, #1736]	; 11f5c <__assert_fail@plt+0xc34>
   11890:	mov	r0, #0
   11894:	bl	11088 <dcgettext@plt>
   11898:	ldr	r2, [r9, #4]
   1189c:	mov	r1, r0
   118a0:	mov	r0, #1
   118a4:	bl	110c4 <err@plt>
   118a8:	ldr	r0, [r9, #8]
   118ac:	bl	11304 <close@plt>
   118b0:	str	r8, [r9, #8]
   118b4:	b	1183c <__assert_fail@plt+0x514>
   118b8:	bl	11004 <is_selinux_enabled@plt>
   118bc:	cmp	r0, r4
   118c0:	ble	116f8 <__assert_fail@plt+0x3d0>
   118c4:	ldr	r8, [pc, #1640]	; 11f34 <__assert_fail@plt+0xc0c>
   118c8:	str	r4, [sp, #48]	; 0x30
   118cc:	ldr	r0, [r8]
   118d0:	cmp	r0, r4
   118d4:	beq	11ef0 <__assert_fail@plt+0xbc8>
   118d8:	add	r1, sp, #48	; 0x30
   118dc:	bl	112d4 <getpidcon@plt>
   118e0:	cmp	r0, #0
   118e4:	blt	11ed0 <__assert_fail@plt+0xba8>
   118e8:	ldr	r0, [sp, #48]	; 0x30
   118ec:	bl	112bc <setexeccon@plt>
   118f0:	cmp	r0, #0
   118f4:	blt	11e94 <__assert_fail@plt+0xb6c>
   118f8:	ldr	r0, [sp, #48]	; 0x30
   118fc:	bl	112a4 <freecon@plt>
   11900:	b	116f8 <__assert_fail@plt+0x3d0>
   11904:	mov	r2, #0
   11908:	ldr	r1, [pc, #1560]	; 11f28 <__assert_fail@plt+0xc00>
   1190c:	ldr	r0, [pc, #1560]	; 11f2c <__assert_fail@plt+0xc04>
   11910:	bl	12104 <__assert_fail@plt+0xddc>
   11914:	b	117c8 <__assert_fail@plt+0x4a0>
   11918:	mov	r2, #0
   1191c:	ldr	r1, [pc, #1556]	; 11f38 <__assert_fail@plt+0xc10>
   11920:	ldr	r0, [pc, #1556]	; 11f3c <__assert_fail@plt+0xc14>
   11924:	bl	12104 <__assert_fail@plt+0xddc>
   11928:	b	117bc <__assert_fail@plt+0x494>
   1192c:	ldr	r0, [r9, #8]
   11930:	bl	11304 <close@plt>
   11934:	str	r8, [r9, #8]
   11938:	add	r9, r9, #12
   1193c:	b	11858 <__assert_fail@plt+0x530>
   11940:	ldr	r3, [r4, #96]	; 0x60
   11944:	str	sl, [sp, #12]
   11948:	cmp	r3, #0
   1194c:	mov	sl, r1
   11950:	blt	11998 <__assert_fail@plt+0x670>
   11954:	ldr	r2, [r4, #100]	; 0x64
   11958:	cmp	r2, #0
   1195c:	blt	11aa8 <__assert_fail@plt+0x780>
   11960:	mov	r0, r3
   11964:	bl	1128c <fchdir@plt>
   11968:	cmp	r0, #0
   1196c:	movlt	r2, #5
   11970:	ldrlt	r1, [pc, #1512]	; 11f60 <__assert_fail@plt+0xc38>
   11974:	blt	119dc <__assert_fail@plt+0x6b4>
   11978:	ldr	r0, [pc, #1508]	; 11f64 <__assert_fail@plt+0xc3c>
   1197c:	bl	110f4 <chroot@plt>
   11980:	cmp	r0, #0
   11984:	blt	11e88 <__assert_fail@plt+0xb60>
   11988:	ldr	r0, [r4, #96]	; 0x60
   1198c:	bl	11304 <close@plt>
   11990:	mvn	r3, #0
   11994:	str	r3, [r4, #96]	; 0x60
   11998:	ldr	r0, [r4, #100]	; 0x64
   1199c:	cmp	r0, #0
   119a0:	bge	11ac8 <__assert_fail@plt+0x7a0>
   119a4:	ldr	r3, [sp, #12]
   119a8:	cmp	r3, #1
   119ac:	beq	11da4 <__assert_fail@plt+0xa7c>
   119b0:	ldrd	r2, [sp, #24]
   119b4:	orrs	r2, r2, r3
   119b8:	beq	11a30 <__assert_fail@plt+0x708>
   119bc:	cmp	r3, #0
   119c0:	bne	119f0 <__assert_fail@plt+0x6c8>
   119c4:	ldr	r0, [sp, #32]
   119c8:	bl	11274 <setuid@plt>
   119cc:	cmp	r0, #0
   119d0:	bge	11a30 <__assert_fail@plt+0x708>
   119d4:	ldr	r1, [pc, #1420]	; 11f68 <__assert_fail@plt+0xc40>
   119d8:	mov	r2, #5
   119dc:	mov	r0, #0
   119e0:	bl	11088 <dcgettext@plt>
   119e4:	mov	r1, r0
   119e8:	mov	r0, #1
   119ec:	bl	110c4 <err@plt>
   119f0:	mov	r1, #0
   119f4:	mov	r0, r1
   119f8:	bl	110d0 <setgroups@plt>
   119fc:	cmp	r0, #0
   11a00:	moveq	r5, #0
   11a04:	cmp	r5, #0
   11a08:	movne	r2, #5
   11a0c:	ldrne	r1, [pc, #1368]	; 11f6c <__assert_fail@plt+0xc44>
   11a10:	bne	119dc <__assert_fail@plt+0x6b4>
   11a14:	ldr	r0, [sp, #36]	; 0x24
   11a18:	bl	11124 <setgid@plt>
   11a1c:	cmp	r0, #0
   11a20:	blt	11e6c <__assert_fail@plt+0xb44>
   11a24:	ldr	r3, [sp, #24]
   11a28:	cmp	r3, #0
   11a2c:	bne	119c4 <__assert_fail@plt+0x69c>
   11a30:	ldr	r4, [pc, #1336]	; 11f70 <__assert_fail@plt+0xc48>
   11a34:	ldr	r3, [r4]
   11a38:	cmp	r3, r7
   11a3c:	bge	11aa4 <__assert_fail@plt+0x77c>
   11a40:	add	r1, r6, r3, lsl #2
   11a44:	ldr	r0, [r6, r3, lsl #2]
   11a48:	bl	11070 <execvp@plt>
   11a4c:	bl	111c0 <__errno_location@plt>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #1304]	; 11f74 <__assert_fail@plt+0xc4c>
   11a58:	ldr	r3, [r0]
   11a5c:	mov	r0, #0
   11a60:	cmp	r3, #2
   11a64:	moveq	r5, #127	; 0x7f
   11a68:	movne	r5, #126	; 0x7e
   11a6c:	bl	11088 <dcgettext@plt>
   11a70:	ldr	r3, [r4]
   11a74:	ldr	r2, [r6, r3, lsl #2]
   11a78:	mov	r1, r0
   11a7c:	mov	r0, r5
   11a80:	bl	110c4 <err@plt>
   11a84:	mov	r1, #0
   11a88:	mov	r0, r1
   11a8c:	bl	110d0 <setgroups@plt>
   11a90:	str	r5, [sp, #28]
   11a94:	str	r5, [sp, #24]
   11a98:	adds	r5, r0, #0
   11a9c:	movne	r5, #1
   11aa0:	b	11800 <__assert_fail@plt+0x4d8>
   11aa4:	bl	144c8 <__assert_fail@plt+0x31a0>
   11aa8:	ldr	r0, [pc, #1204]	; 11f64 <__assert_fail@plt+0xc3c>
   11aac:	bl	1110c <open64@plt>
   11ab0:	cmp	r0, #0
   11ab4:	str	r0, [r4, #100]	; 0x64
   11ab8:	blt	11e34 <__assert_fail@plt+0xb0c>
   11abc:	ldr	r3, [r4, #96]	; 0x60
   11ac0:	cmp	r3, #0
   11ac4:	bge	11960 <__assert_fail@plt+0x638>
   11ac8:	bl	1128c <fchdir@plt>
   11acc:	cmp	r0, #0
   11ad0:	movlt	r2, #5
   11ad4:	ldrlt	r1, [pc, #1180]	; 11f78 <__assert_fail@plt+0xc50>
   11ad8:	blt	119dc <__assert_fail@plt+0x6b4>
   11adc:	ldr	r0, [r4, #100]	; 0x64
   11ae0:	bl	11304 <close@plt>
   11ae4:	mvn	r3, #0
   11ae8:	str	r3, [r4, #100]	; 0x64
   11aec:	b	119a4 <__assert_fail@plt+0x67c>
   11af0:	ldr	r3, [pc, #1156]	; 11f7c <__assert_fail@plt+0xc54>
   11af4:	mov	r2, #5
   11af8:	ldr	r1, [pc, #1152]	; 11f80 <__assert_fail@plt+0xc58>
   11afc:	ldr	r4, [r3]
   11b00:	mov	r0, #0
   11b04:	bl	11088 <dcgettext@plt>
   11b08:	mov	r1, r4
   11b0c:	bl	112e0 <fputs@plt>
   11b10:	mov	r2, #5
   11b14:	ldr	r1, [pc, #1128]	; 11f84 <__assert_fail@plt+0xc5c>
   11b18:	mov	r0, #0
   11b1c:	bl	11088 <dcgettext@plt>
   11b20:	ldr	r3, [pc, #1052]	; 11f44 <__assert_fail@plt+0xc1c>
   11b24:	mov	r1, #1
   11b28:	ldr	r3, [r3]
   11b2c:	mov	r2, r0
   11b30:	mov	r0, r4
   11b34:	bl	11214 <__fprintf_chk@plt>
   11b38:	mov	r1, r4
   11b3c:	mov	r0, #10
   11b40:	bl	11268 <fputc@plt>
   11b44:	mov	r2, #5
   11b48:	ldr	r1, [pc, #1080]	; 11f88 <__assert_fail@plt+0xc60>
   11b4c:	mov	r0, #0
   11b50:	bl	11088 <dcgettext@plt>
   11b54:	mov	r1, r4
   11b58:	bl	112e0 <fputs@plt>
   11b5c:	mov	r2, #5
   11b60:	ldr	r1, [pc, #1060]	; 11f8c <__assert_fail@plt+0xc64>
   11b64:	mov	r0, #0
   11b68:	bl	11088 <dcgettext@plt>
   11b6c:	mov	r1, r4
   11b70:	bl	112e0 <fputs@plt>
   11b74:	mov	r2, #5
   11b78:	ldr	r1, [pc, #1040]	; 11f90 <__assert_fail@plt+0xc68>
   11b7c:	mov	r0, #0
   11b80:	bl	11088 <dcgettext@plt>
   11b84:	mov	r1, r4
   11b88:	bl	112e0 <fputs@plt>
   11b8c:	mov	r2, #5
   11b90:	ldr	r1, [pc, #1020]	; 11f94 <__assert_fail@plt+0xc6c>
   11b94:	mov	r0, #0
   11b98:	bl	11088 <dcgettext@plt>
   11b9c:	mov	r1, r4
   11ba0:	bl	112e0 <fputs@plt>
   11ba4:	mov	r2, #5
   11ba8:	ldr	r1, [pc, #1000]	; 11f98 <__assert_fail@plt+0xc70>
   11bac:	mov	r0, #0
   11bb0:	bl	11088 <dcgettext@plt>
   11bb4:	mov	r1, r4
   11bb8:	bl	112e0 <fputs@plt>
   11bbc:	mov	r2, #5
   11bc0:	ldr	r1, [pc, #980]	; 11f9c <__assert_fail@plt+0xc74>
   11bc4:	mov	r0, #0
   11bc8:	bl	11088 <dcgettext@plt>
   11bcc:	mov	r1, r4
   11bd0:	bl	112e0 <fputs@plt>
   11bd4:	mov	r2, #5
   11bd8:	ldr	r1, [pc, #960]	; 11fa0 <__assert_fail@plt+0xc78>
   11bdc:	mov	r0, #0
   11be0:	bl	11088 <dcgettext@plt>
   11be4:	mov	r1, r4
   11be8:	bl	112e0 <fputs@plt>
   11bec:	mov	r2, #5
   11bf0:	ldr	r1, [pc, #940]	; 11fa4 <__assert_fail@plt+0xc7c>
   11bf4:	mov	r0, #0
   11bf8:	bl	11088 <dcgettext@plt>
   11bfc:	mov	r1, r4
   11c00:	bl	112e0 <fputs@plt>
   11c04:	mov	r2, #5
   11c08:	ldr	r1, [pc, #920]	; 11fa8 <__assert_fail@plt+0xc80>
   11c0c:	mov	r0, #0
   11c10:	bl	11088 <dcgettext@plt>
   11c14:	mov	r1, r4
   11c18:	bl	112e0 <fputs@plt>
   11c1c:	mov	r2, #5
   11c20:	ldr	r1, [pc, #900]	; 11fac <__assert_fail@plt+0xc84>
   11c24:	mov	r0, #0
   11c28:	bl	11088 <dcgettext@plt>
   11c2c:	mov	r1, r4
   11c30:	bl	112e0 <fputs@plt>
   11c34:	mov	r2, #5
   11c38:	ldr	r1, [pc, #880]	; 11fb0 <__assert_fail@plt+0xc88>
   11c3c:	mov	r0, #0
   11c40:	bl	11088 <dcgettext@plt>
   11c44:	mov	r1, r4
   11c48:	bl	112e0 <fputs@plt>
   11c4c:	mov	r2, #5
   11c50:	ldr	r1, [pc, #860]	; 11fb4 <__assert_fail@plt+0xc8c>
   11c54:	mov	r0, #0
   11c58:	bl	11088 <dcgettext@plt>
   11c5c:	mov	r1, r4
   11c60:	bl	112e0 <fputs@plt>
   11c64:	mov	r2, #5
   11c68:	ldr	r1, [pc, #840]	; 11fb8 <__assert_fail@plt+0xc90>
   11c6c:	mov	r0, #0
   11c70:	bl	11088 <dcgettext@plt>
   11c74:	mov	r1, r4
   11c78:	bl	112e0 <fputs@plt>
   11c7c:	mov	r2, #5
   11c80:	ldr	r1, [pc, #820]	; 11fbc <__assert_fail@plt+0xc94>
   11c84:	mov	r0, #0
   11c88:	bl	11088 <dcgettext@plt>
   11c8c:	mov	r1, r4
   11c90:	bl	112e0 <fputs@plt>
   11c94:	mov	r2, #5
   11c98:	ldr	r1, [pc, #800]	; 11fc0 <__assert_fail@plt+0xc98>
   11c9c:	mov	r0, #0
   11ca0:	bl	11088 <dcgettext@plt>
   11ca4:	mov	r1, r4
   11ca8:	bl	112e0 <fputs@plt>
   11cac:	mov	r2, #5
   11cb0:	ldr	r1, [pc, #780]	; 11fc4 <__assert_fail@plt+0xc9c>
   11cb4:	mov	r0, #0
   11cb8:	bl	11088 <dcgettext@plt>
   11cbc:	mov	r1, r4
   11cc0:	bl	112e0 <fputs@plt>
   11cc4:	mov	r2, #5
   11cc8:	ldr	r1, [pc, #760]	; 11fc8 <__assert_fail@plt+0xca0>
   11ccc:	mov	r0, #0
   11cd0:	bl	11088 <dcgettext@plt>
   11cd4:	mov	r1, r4
   11cd8:	bl	112e0 <fputs@plt>
   11cdc:	mov	r2, #5
   11ce0:	ldr	r1, [pc, #740]	; 11fcc <__assert_fail@plt+0xca4>
   11ce4:	mov	r0, #0
   11ce8:	bl	11088 <dcgettext@plt>
   11cec:	mov	r1, r4
   11cf0:	bl	112e0 <fputs@plt>
   11cf4:	mov	r1, r4
   11cf8:	mov	r0, #10
   11cfc:	bl	11268 <fputc@plt>
   11d00:	mov	r2, #5
   11d04:	ldr	r1, [pc, #708]	; 11fd0 <__assert_fail@plt+0xca8>
   11d08:	mov	r0, #0
   11d0c:	bl	11088 <dcgettext@plt>
   11d10:	mov	r2, #5
   11d14:	ldr	r1, [pc, #696]	; 11fd4 <__assert_fail@plt+0xcac>
   11d18:	mov	r4, r0
   11d1c:	mov	r0, #0
   11d20:	bl	11088 <dcgettext@plt>
   11d24:	ldr	r2, [pc, #684]	; 11fd8 <__assert_fail@plt+0xcb0>
   11d28:	mov	r3, r4
   11d2c:	str	r2, [sp]
   11d30:	ldr	r1, [pc, #676]	; 11fdc <__assert_fail@plt+0xcb4>
   11d34:	ldr	r2, [pc, #676]	; 11fe0 <__assert_fail@plt+0xcb8>
   11d38:	str	r0, [sp, #4]
   11d3c:	mov	r0, #1
   11d40:	bl	111fc <__printf_chk@plt>
   11d44:	mov	r2, #5
   11d48:	ldr	r1, [pc, #660]	; 11fe4 <__assert_fail@plt+0xcbc>
   11d4c:	mov	r0, #0
   11d50:	bl	11088 <dcgettext@plt>
   11d54:	ldr	r2, [pc, #652]	; 11fe8 <__assert_fail@plt+0xcc0>
   11d58:	mov	r1, r0
   11d5c:	mov	r0, #1
   11d60:	bl	111fc <__printf_chk@plt>
   11d64:	mov	r0, #0
   11d68:	bl	11184 <exit@plt>
   11d6c:	ldr	r3, [pc, #632]	; 11fec <__assert_fail@plt+0xcc4>
   11d70:	mov	r2, #5
   11d74:	ldr	r1, [pc, #628]	; 11ff0 <__assert_fail@plt+0xcc8>
   11d78:	mov	r0, #0
   11d7c:	ldr	r4, [r3]
   11d80:	bl	11088 <dcgettext@plt>
   11d84:	ldr	r3, [pc, #440]	; 11f44 <__assert_fail@plt+0xc1c>
   11d88:	mov	r1, #1
   11d8c:	ldr	r3, [r3]
   11d90:	mov	r2, r0
   11d94:	mov	r0, r4
   11d98:	bl	11214 <__fprintf_chk@plt>
   11d9c:	mov	r0, #1
   11da0:	bl	11184 <exit@plt>
   11da4:	bl	11238 <fork@plt>
   11da8:	subs	r4, r0, #0
   11dac:	blt	11e50 <__assert_fail@plt+0xb28>
   11db0:	bne	11ddc <__assert_fail@plt+0xab4>
   11db4:	b	119b0 <__assert_fail@plt+0x688>
   11db8:	uxtb	r2, r3
   11dbc:	cmp	r2, #127	; 0x7f
   11dc0:	bne	11df8 <__assert_fail@plt+0xad0>
   11dc4:	bl	11178 <getpid@plt>
   11dc8:	mov	r1, #19
   11dcc:	bl	11160 <kill@plt>
   11dd0:	mov	r1, #18
   11dd4:	mov	r0, r4
   11dd8:	bl	11160 <kill@plt>
   11ddc:	mov	r2, #2
   11de0:	add	r1, sp, #48	; 0x30
   11de4:	mov	r0, r4
   11de8:	bl	110dc <waitpid@plt>
   11dec:	ldr	r3, [sp, #48]	; 0x30
   11df0:	cmp	r4, r0
   11df4:	beq	11db8 <__assert_fail@plt+0xa90>
   11df8:	ands	r2, r3, #127	; 0x7f
   11dfc:	beq	11e28 <__assert_fail@plt+0xb00>
   11e00:	add	r3, r2, #1
   11e04:	sxtb	r3, r3
   11e08:	cmp	r3, #1
   11e0c:	ble	11e20 <__assert_fail@plt+0xaf8>
   11e10:	bl	11178 <getpid@plt>
   11e14:	ldr	r1, [sp, #48]	; 0x30
   11e18:	and	r1, r1, #127	; 0x7f
   11e1c:	bl	11160 <kill@plt>
   11e20:	mov	r0, #1
   11e24:	bl	11184 <exit@plt>
   11e28:	asr	r3, r3, #8
   11e2c:	uxtb	r0, r3
   11e30:	bl	11184 <exit@plt>
   11e34:	ldr	r1, [pc, #440]	; 11ff4 <__assert_fail@plt+0xccc>
   11e38:	mov	r0, sl
   11e3c:	mov	r2, #5
   11e40:	bl	11088 <dcgettext@plt>
   11e44:	mov	r1, r0
   11e48:	mov	r0, #1
   11e4c:	bl	110c4 <err@plt>
   11e50:	ldr	r1, [pc, #416]	; 11ff8 <__assert_fail@plt+0xcd0>
   11e54:	mov	r2, #5
   11e58:	mov	r0, #0
   11e5c:	bl	11088 <dcgettext@plt>
   11e60:	mov	r1, r0
   11e64:	ldr	r0, [sp, #12]
   11e68:	bl	110c4 <err@plt>
   11e6c:	ldr	r1, [pc, #392]	; 11ffc <__assert_fail@plt+0xcd4>
   11e70:	mov	r0, r5
   11e74:	mov	r2, #5
   11e78:	bl	11088 <dcgettext@plt>
   11e7c:	mov	r1, r0
   11e80:	mov	r0, #1
   11e84:	bl	110c4 <err@plt>
   11e88:	mov	r2, #5
   11e8c:	ldr	r1, [pc, #364]	; 12000 <__assert_fail@plt+0xcd8>
   11e90:	b	119dc <__assert_fail@plt+0x6b4>
   11e94:	mov	r2, #5
   11e98:	ldr	r1, [pc, #356]	; 12004 <__assert_fail@plt+0xcdc>
   11e9c:	mov	r0, r4
   11ea0:	bl	11088 <dcgettext@plt>
   11ea4:	ldr	r2, [sp, #48]	; 0x30
   11ea8:	mov	r1, r0
   11eac:	mov	r0, #1
   11eb0:	bl	11244 <errx@plt>
   11eb4:	ldr	r1, [pc, #332]	; 12008 <__assert_fail@plt+0xce0>
   11eb8:	mov	r2, #5
   11ebc:	bl	11088 <dcgettext@plt>
   11ec0:	mov	r1, r0
   11ec4:	mov	r0, #1
   11ec8:	bl	11244 <errx@plt>
   11ecc:	bl	110a0 <__stack_chk_fail@plt>
   11ed0:	mov	r2, #5
   11ed4:	ldr	r1, [pc, #304]	; 1200c <__assert_fail@plt+0xce4>
   11ed8:	mov	r0, r4
   11edc:	bl	11088 <dcgettext@plt>
   11ee0:	ldr	r2, [r8]
   11ee4:	mov	r1, r0
   11ee8:	mov	r0, #1
   11eec:	bl	11244 <errx@plt>
   11ef0:	ldr	r1, [pc, #280]	; 12010 <__assert_fail@plt+0xce8>
   11ef4:	mov	r2, #5
   11ef8:	bl	11088 <dcgettext@plt>
   11efc:	mov	r1, r0
   11f00:	mov	r0, #1
   11f04:	bl	11244 <errx@plt>
   11f08:	andeq	r5, r2, r8, asr #27
   11f0c:	andeq	r4, r1, r8, lsr #19
   11f10:	andeq	r4, r1, r0, lsl #19
   11f14:	muleq	r1, r4, r9
   11f18:	andeq	r4, r1, r0, asr #15
   11f1c:	muleq	r1, r0, lr
   11f20:	muleq	r2, r0, r0
   11f24:	strdeq	r2, [r1], -r0
   11f28:	andeq	r4, r1, r4, ror #28
   11f2c:	andeq	r6, r2, ip, rrx
   11f30:	andeq	r4, r1, r0, lsr #28
   11f34:	muleq	r2, r8, r0
   11f38:	andeq	r4, r1, ip, asr lr
   11f3c:	andeq	r6, r2, r8, rrx
   11f40:	andeq	r4, r1, r0, lsl #28
   11f44:	andeq	r6, r2, r8, ror r0
   11f48:	andeq	r4, r1, ip, lsl #28
   11f4c:	andeq	r4, r1, r4, lsr lr
   11f50:	andeq	r4, r1, r8, asr #28
   11f54:	andeq	r6, r2, r8
   11f58:	andeq	r6, r2, r4, lsl r0
   11f5c:	andeq	r4, r1, r4, asr pc
   11f60:	andeq	r4, r1, r8, lsr #31
   11f64:	andeq	r4, r1, ip, ror pc
   11f68:	andeq	r5, r1, r8, asr r0
   11f6c:	andeq	r5, r1, r4, lsr r0
   11f70:	andeq	r6, r2, r0, lsl #1
   11f74:	andeq	r5, r1, r8, rrx
   11f78:	andeq	r4, r1, r8, ror #31
   11f7c:	andeq	r6, r2, ip, lsl #1
   11f80:	andeq	r4, r1, r0, lsr #19
   11f84:	andeq	r4, r1, ip, lsr #19
   11f88:	ldrdeq	r4, [r1], -r8
   11f8c:	andeq	r4, r1, ip, lsl #20
   11f90:	andeq	r4, r1, r8, lsl sl
   11f94:	andeq	r4, r1, r8, asr #20
   11f98:	andeq	r4, r1, r8, lsl #21
   11f9c:			; <UNDEFINED> instruction: 0x00014ab8
   11fa0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11fa4:	andeq	r4, r1, ip, lsr #22
   11fa8:	andeq	r4, r1, r0, ror #22
   11fac:	muleq	r1, r0, fp
   11fb0:	andeq	r4, r1, r0, asr #23
   11fb4:	strdeq	r4, [r1], -r0
   11fb8:	andeq	r4, r1, r8, lsr #24
   11fbc:	andeq	r4, r1, r0, ror #24
   11fc0:	muleq	r1, r8, ip
   11fc4:	andeq	r4, r1, r8, asr #25
   11fc8:	strdeq	r4, [r1], -ip
   11fcc:	andeq	r4, r1, ip, lsr sp
   11fd0:	andeq	r4, r1, r4, lsl #27
   11fd4:	muleq	r1, r8, sp
   11fd8:	andeq	r4, r1, r8, asr #27
   11fdc:			; <UNDEFINED> instruction: 0x00014db4
   11fe0:	andeq	r4, r1, r8, lsr #27
   11fe4:	ldrdeq	r4, [r1], -r8
   11fe8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11fec:	andeq	r6, r2, r8, lsl #1
   11ff0:	andeq	r4, r1, r8, ror #28
   11ff4:	andeq	r4, r1, r0, lsl #31
   11ff8:	andeq	r5, r1, r8, lsr #32
   11ffc:	andeq	r5, r1, r8, asr #32
   12000:	ldrdeq	r4, [r1], -r8
   12004:	andeq	r4, r1, ip, lsl #30
   12008:	andeq	r4, r1, r0, lsr pc
   1200c:	andeq	r4, r1, r8, ror #29
   12010:			; <UNDEFINED> instruction: 0x00014eb8
   12014:	mov	fp, #0
   12018:	mov	lr, #0
   1201c:	pop	{r1}		; (ldr r1, [sp], #4)
   12020:	mov	r2, sp
   12024:	push	{r2}		; (str r2, [sp, #-4]!)
   12028:	push	{r0}		; (str r0, [sp, #-4]!)
   1202c:	ldr	ip, [pc, #16]	; 12044 <__assert_fail@plt+0xd1c>
   12030:	push	{ip}		; (str ip, [sp, #-4]!)
   12034:	ldr	r0, [pc, #12]	; 12048 <__assert_fail@plt+0xd20>
   12038:	ldr	r3, [pc, #12]	; 1204c <__assert_fail@plt+0xd24>
   1203c:	bl	1113c <__libc_start_main@plt>
   12040:	bl	112f8 <abort@plt>
   12044:	andeq	r4, r1, r4, lsl #15
   12048:	andeq	r1, r1, r8, lsr r3
   1204c:	andeq	r4, r1, r4, lsr #14
   12050:	ldr	r3, [pc, #20]	; 1206c <__assert_fail@plt+0xd44>
   12054:	ldr	r2, [pc, #20]	; 12070 <__assert_fail@plt+0xd48>
   12058:	add	r3, pc, r3
   1205c:	ldr	r2, [r3, r2]
   12060:	cmp	r2, #0
   12064:	bxeq	lr
   12068:	b	11148 <__gmon_start__@plt>
   1206c:	andeq	r3, r1, r4, ror lr
   12070:	andeq	r0, r0, r4, lsr #2
   12074:	ldr	r0, [pc, #24]	; 12094 <__assert_fail@plt+0xd6c>
   12078:	ldr	r3, [pc, #24]	; 12098 <__assert_fail@plt+0xd70>
   1207c:	cmp	r3, r0
   12080:	bxeq	lr
   12084:	ldr	r3, [pc, #16]	; 1209c <__assert_fail@plt+0xd74>
   12088:	cmp	r3, #0
   1208c:	bxeq	lr
   12090:	bx	r3
   12094:	andeq	r6, r2, r4, ror r0
   12098:	andeq	r6, r2, r4, ror r0
   1209c:	andeq	r0, r0, r0
   120a0:	ldr	r0, [pc, #36]	; 120cc <__assert_fail@plt+0xda4>
   120a4:	ldr	r1, [pc, #36]	; 120d0 <__assert_fail@plt+0xda8>
   120a8:	sub	r1, r1, r0
   120ac:	asr	r1, r1, #2
   120b0:	add	r1, r1, r1, lsr #31
   120b4:	asrs	r1, r1, #1
   120b8:	bxeq	lr
   120bc:	ldr	r3, [pc, #16]	; 120d4 <__assert_fail@plt+0xdac>
   120c0:	cmp	r3, #0
   120c4:	bxeq	lr
   120c8:	bx	r3
   120cc:	andeq	r6, r2, r4, ror r0
   120d0:	andeq	r6, r2, r4, ror r0
   120d4:	andeq	r0, r0, r0
   120d8:	push	{r4, lr}
   120dc:	ldr	r4, [pc, #24]	; 120fc <__assert_fail@plt+0xdd4>
   120e0:	ldrb	r3, [r4]
   120e4:	cmp	r3, #0
   120e8:	popne	{r4, pc}
   120ec:	bl	12074 <__assert_fail@plt+0xd4c>
   120f0:	mov	r3, #1
   120f4:	strb	r3, [r4]
   120f8:	pop	{r4, pc}
   120fc:	muleq	r2, r4, r0
   12100:	b	120a0 <__assert_fail@plt+0xd78>
   12104:	push	{r4, r5, r6, r7, lr}
   12108:	sub	sp, sp, #4096	; 0x1000
   1210c:	ldr	r4, [pc, #228]	; 121f8 <__assert_fail@plt+0xed0>
   12110:	sub	sp, sp, #28
   12114:	subs	r6, r2, #0
   12118:	add	r2, sp, #4096	; 0x1000
   1211c:	ldr	r3, [r4]
   12120:	add	r2, r2, #20
   12124:	mov	r5, r0
   12128:	str	r3, [r2]
   1212c:	beq	1217c <__assert_fail@plt+0xe54>
   12130:	ldr	r0, [r5]
   12134:	cmp	r0, #0
   12138:	blt	12140 <__assert_fail@plt+0xe18>
   1213c:	bl	11304 <close@plt>
   12140:	mov	r1, #0
   12144:	mov	r0, r6
   12148:	bl	1110c <open64@plt>
   1214c:	cmp	r0, #0
   12150:	str	r0, [r5]
   12154:	blt	121d4 <__assert_fail@plt+0xeac>
   12158:	add	r3, sp, #4096	; 0x1000
   1215c:	add	r3, r3, #20
   12160:	ldr	r2, [r3]
   12164:	ldr	r3, [r4]
   12168:	cmp	r2, r3
   1216c:	bne	121f4 <__assert_fail@plt+0xecc>
   12170:	add	sp, sp, #4096	; 0x1000
   12174:	add	sp, sp, #28
   12178:	pop	{r4, r5, r6, r7, pc}
   1217c:	ldr	r3, [pc, #120]	; 121fc <__assert_fail@plt+0xed4>
   12180:	mov	r7, r1
   12184:	ldr	r0, [r3]
   12188:	cmp	r0, #0
   1218c:	bne	121ac <__assert_fail@plt+0xe84>
   12190:	mov	r2, #5
   12194:	ldr	r1, [pc, #100]	; 12200 <__assert_fail@plt+0xed8>
   12198:	bl	11088 <dcgettext@plt>
   1219c:	mov	r2, r7
   121a0:	mov	r1, r0
   121a4:	mov	r0, #1
   121a8:	bl	11244 <errx@plt>
   121ac:	ldr	r2, [pc, #80]	; 12204 <__assert_fail@plt+0xedc>
   121b0:	mov	r3, #4096	; 0x1000
   121b4:	stmib	sp, {r0, r7}
   121b8:	str	r2, [sp]
   121bc:	add	r0, sp, #20
   121c0:	mov	r1, r3
   121c4:	mov	r2, #1
   121c8:	mov	r6, r0
   121cc:	bl	11310 <__snprintf_chk@plt>
   121d0:	b	12130 <__assert_fail@plt+0xe08>
   121d4:	mov	r2, #5
   121d8:	ldr	r1, [pc, #40]	; 12208 <__assert_fail@plt+0xee0>
   121dc:	mov	r0, #0
   121e0:	bl	11088 <dcgettext@plt>
   121e4:	mov	r2, r6
   121e8:	mov	r1, r0
   121ec:	mov	r0, #1
   121f0:	bl	110c4 <err@plt>
   121f4:	bl	110a0 <__stack_chk_fail@plt>
   121f8:	andeq	r5, r2, r8, asr #27
   121fc:	muleq	r2, r8, r0
   12200:	strdeq	r4, [r1], -r0
   12204:	andeq	r4, r1, r0, lsr #18
   12208:	andeq	r4, r1, ip, lsr #18
   1220c:	push	{r4, r5, lr}
   12210:	sub	sp, sp, #116	; 0x74
   12214:	ldr	r4, [pc, #84]	; 12270 <__assert_fail@plt+0xf48>
   12218:	mov	r5, r1
   1221c:	mov	r2, sp
   12220:	ldr	r3, [r4]
   12224:	mov	r1, r0
   12228:	mov	r0, #3
   1222c:	str	r3, [sp, #108]	; 0x6c
   12230:	bl	112c8 <__xstat64@plt>
   12234:	cmp	r0, #0
   12238:	bne	1225c <__assert_fail@plt+0xf34>
   1223c:	ldrd	r2, [sp, #96]	; 0x60
   12240:	strd	r2, [r5]
   12244:	ldr	r2, [sp, #108]	; 0x6c
   12248:	ldr	r3, [r4]
   1224c:	cmp	r2, r3
   12250:	bne	1226c <__assert_fail@plt+0xf44>
   12254:	add	sp, sp, #116	; 0x74
   12258:	pop	{r4, r5, pc}
   1225c:	bl	111c0 <__errno_location@plt>
   12260:	ldr	r0, [r0]
   12264:	rsb	r0, r0, #0
   12268:	b	12244 <__assert_fail@plt+0xf1c>
   1226c:	bl	110a0 <__stack_chk_fail@plt>
   12270:	andeq	r5, r2, r8, asr #27
   12274:	push	{r4, r5, r6, r7, r8, r9, lr}
   12278:	sub	sp, sp, #4096	; 0x1000
   1227c:	ldr	r6, [pc, #252]	; 12380 <__assert_fail@plt+0x1058>
   12280:	sub	sp, sp, #44	; 0x2c
   12284:	mov	r9, r1
   12288:	add	r1, sp, #4096	; 0x1000
   1228c:	mov	r8, r2
   12290:	add	r1, r1, #36	; 0x24
   12294:	ldr	r2, [r6]
   12298:	ldr	r7, [pc, #228]	; 12384 <__assert_fail@plt+0x105c>
   1229c:	mov	r4, #0
   122a0:	mov	r3, #4096	; 0x1000
   122a4:	mov	r5, #0
   122a8:	str	r0, [sp, #4]
   122ac:	str	r8, [sp, #8]
   122b0:	str	r7, [sp]
   122b4:	add	r0, sp, #36	; 0x24
   122b8:	str	r2, [r1]
   122bc:	mov	r1, r3
   122c0:	mov	r2, #1
   122c4:	strd	r4, [sp, #16]
   122c8:	strd	r4, [sp, #24]
   122cc:	bl	11310 <__snprintf_chk@plt>
   122d0:	add	r1, sp, #16
   122d4:	add	r0, sp, #36	; 0x24
   122d8:	bl	1220c <__assert_fail@plt+0xee4>
   122dc:	subs	r4, r0, #0
   122e0:	movne	r2, #5
   122e4:	ldrne	r1, [pc, #156]	; 12388 <__assert_fail@plt+0x1060>
   122e8:	movne	r0, #0
   122ec:	bne	12368 <__assert_fail@plt+0x1040>
   122f0:	mov	r3, #4096	; 0x1000
   122f4:	mov	r1, r3
   122f8:	mov	r2, #1
   122fc:	str	r8, [sp, #8]
   12300:	stm	sp, {r7, r9}
   12304:	add	r0, sp, #36	; 0x24
   12308:	bl	11310 <__snprintf_chk@plt>
   1230c:	add	r1, sp, #24
   12310:	add	r0, sp, #36	; 0x24
   12314:	bl	1220c <__assert_fail@plt+0xee4>
   12318:	cmp	r0, #0
   1231c:	bne	1235c <__assert_fail@plt+0x1034>
   12320:	ldrd	r0, [sp, #24]
   12324:	ldrd	r4, [sp, #16]
   12328:	add	r3, sp, #4096	; 0x1000
   1232c:	add	r3, r3, #36	; 0x24
   12330:	cmp	r5, r1
   12334:	ldr	r2, [r3]
   12338:	ldr	r3, [r6]
   1233c:	cmpeq	r4, r0
   12340:	moveq	r0, #1
   12344:	movne	r0, #0
   12348:	cmp	r2, r3
   1234c:	bne	1237c <__assert_fail@plt+0x1054>
   12350:	add	sp, sp, #4096	; 0x1000
   12354:	add	sp, sp, #44	; 0x2c
   12358:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1235c:	ldr	r1, [pc, #36]	; 12388 <__assert_fail@plt+0x1060>
   12360:	mov	r0, r4
   12364:	mov	r2, #5
   12368:	bl	11088 <dcgettext@plt>
   1236c:	add	r2, sp, #36	; 0x24
   12370:	mov	r1, r0
   12374:	mov	r0, #1
   12378:	bl	110c4 <err@plt>
   1237c:	bl	110a0 <__stack_chk_fail@plt>
   12380:	andeq	r5, r2, r8, asr #27
   12384:	andeq	r4, r1, r0, lsr #18
   12388:	andeq	r4, r1, ip, lsr r9
   1238c:	ldr	r3, [pc, #76]	; 123e0 <__assert_fail@plt+0x10b8>
   12390:	ldr	ip, [r3]
   12394:	cmp	ip, #0
   12398:	beq	123c8 <__assert_fail@plt+0x10a0>
   1239c:	cmp	r0, ip
   123a0:	beq	123b8 <__assert_fail@plt+0x1090>
   123a4:	ldr	ip, [r3, #12]!
   123a8:	cmp	ip, #0
   123ac:	beq	123c8 <__assert_fail@plt+0x10a0>
   123b0:	cmp	ip, r0
   123b4:	bne	123a4 <__assert_fail@plt+0x107c>
   123b8:	mov	r2, r1
   123bc:	add	r0, r3, #8
   123c0:	ldr	r1, [r3, #4]
   123c4:	b	12104 <__assert_fail@plt+0xddc>
   123c8:	push	{r4, lr}
   123cc:	mov	r2, #144	; 0x90
   123d0:	ldr	r3, [pc, #12]	; 123e4 <__assert_fail@plt+0x10bc>
   123d4:	ldr	r1, [pc, #12]	; 123e8 <__assert_fail@plt+0x10c0>
   123d8:	ldr	r0, [pc, #12]	; 123ec <__assert_fail@plt+0x10c4>
   123dc:	bl	11328 <__assert_fail@plt>
   123e0:	andeq	r6, r2, r8
   123e4:	andeq	r4, r1, ip, lsr #15
   123e8:	andeq	r4, r1, r0, asr r9
   123ec:	andeq	r4, r1, r4, ror #18
   123f0:	ldr	r3, [pc, #292]	; 1251c <__assert_fail@plt+0x11f4>
   123f4:	push	{r4, r5, r6, lr}
   123f8:	ldr	r4, [r3]
   123fc:	mov	r0, r4
   12400:	bl	11100 <__fpending@plt>
   12404:	mov	r6, r0
   12408:	mov	r0, r4
   1240c:	bl	11040 <ferror@plt>
   12410:	mov	r5, r0
   12414:	mov	r0, r4
   12418:	bl	11220 <fclose@plt>
   1241c:	cmp	r5, #0
   12420:	mov	r4, r0
   12424:	bne	124cc <__assert_fail@plt+0x11a4>
   12428:	cmp	r0, #0
   1242c:	beq	12448 <__assert_fail@plt+0x1120>
   12430:	bl	111c0 <__errno_location@plt>
   12434:	cmp	r6, #0
   12438:	ldr	r3, [r0]
   1243c:	bne	124a4 <__assert_fail@plt+0x117c>
   12440:	cmp	r3, #9
   12444:	bne	124a4 <__assert_fail@plt+0x117c>
   12448:	ldr	r3, [pc, #208]	; 12520 <__assert_fail@plt+0x11f8>
   1244c:	ldr	r4, [r3]
   12450:	mov	r0, r4
   12454:	bl	11100 <__fpending@plt>
   12458:	mov	r6, r0
   1245c:	mov	r0, r4
   12460:	bl	11040 <ferror@plt>
   12464:	mov	r5, r0
   12468:	mov	r0, r4
   1246c:	bl	11220 <fclose@plt>
   12470:	cmp	r5, #0
   12474:	mov	r4, r0
   12478:	bne	12500 <__assert_fail@plt+0x11d8>
   1247c:	cmp	r0, #0
   12480:	popeq	{r4, r5, r6, pc}
   12484:	cmp	r6, #0
   12488:	bne	1249c <__assert_fail@plt+0x1174>
   1248c:	bl	111c0 <__errno_location@plt>
   12490:	ldr	r3, [r0]
   12494:	cmp	r3, #9
   12498:	popeq	{r4, r5, r6, pc}
   1249c:	mov	r0, #1
   124a0:	bl	11058 <_exit@plt>
   124a4:	cmp	r3, #32
   124a8:	beq	12448 <__assert_fail@plt+0x1120>
   124ac:	cmp	r3, #0
   124b0:	beq	124e8 <__assert_fail@plt+0x11c0>
   124b4:	mov	r2, #5
   124b8:	ldr	r1, [pc, #100]	; 12524 <__assert_fail@plt+0x11fc>
   124bc:	mov	r0, #0
   124c0:	bl	11088 <dcgettext@plt>
   124c4:	bl	1125c <warn@plt>
   124c8:	b	1249c <__assert_fail@plt+0x1174>
   124cc:	bl	111c0 <__errno_location@plt>
   124d0:	cmp	r4, #0
   124d4:	ldr	r3, [r0]
   124d8:	bne	124a4 <__assert_fail@plt+0x117c>
   124dc:	cmp	r3, #32
   124e0:	strne	r4, [r0]
   124e4:	beq	12448 <__assert_fail@plt+0x1120>
   124e8:	mov	r2, #5
   124ec:	ldr	r1, [pc, #48]	; 12524 <__assert_fail@plt+0x11fc>
   124f0:	mov	r0, #0
   124f4:	bl	11088 <dcgettext@plt>
   124f8:	bl	111b4 <warnx@plt>
   124fc:	b	1249c <__assert_fail@plt+0x1174>
   12500:	cmp	r0, #0
   12504:	bne	1249c <__assert_fail@plt+0x1174>
   12508:	bl	111c0 <__errno_location@plt>
   1250c:	ldr	r3, [r0]
   12510:	cmp	r3, #32
   12514:	strne	r4, [r0]
   12518:	b	1249c <__assert_fail@plt+0x1174>
   1251c:	andeq	r6, r2, ip, lsl #1
   12520:	andeq	r6, r2, r8, lsl #1
   12524:	andeq	r4, r1, r4, ror r9
   12528:	cmp	r0, #0
   1252c:	mov	r3, #0
   12530:	str	r3, [r1]
   12534:	bxeq	lr
   12538:	ldrsb	r2, [r0]
   1253c:	cmp	r2, #47	; 0x2f
   12540:	bne	1257c <__assert_fail@plt+0x1254>
   12544:	ldrsb	r3, [r0, #1]
   12548:	cmp	r3, #47	; 0x2f
   1254c:	bne	12584 <__assert_fail@plt+0x125c>
   12550:	add	r3, r0, #1
   12554:	b	12564 <__assert_fail@plt+0x123c>
   12558:	ldrsb	r2, [r3]
   1255c:	cmp	r2, #47	; 0x2f
   12560:	bne	12584 <__assert_fail@plt+0x125c>
   12564:	cmp	r3, #0
   12568:	mov	r0, r3
   1256c:	bxeq	lr
   12570:	ldrsb	r2, [r3], #1
   12574:	cmp	r2, #47	; 0x2f
   12578:	beq	12558 <__assert_fail@plt+0x1230>
   1257c:	cmp	r2, #0
   12580:	beq	125c0 <__assert_fail@plt+0x1298>
   12584:	mov	r3, #1
   12588:	str	r3, [r1]
   1258c:	ldrsb	r3, [r0, #1]
   12590:	add	r2, r0, #1
   12594:	cmp	r3, #47	; 0x2f
   12598:	cmpne	r3, #0
   1259c:	bxeq	lr
   125a0:	rsb	r3, r0, #1
   125a4:	add	ip, r2, r3
   125a8:	str	ip, [r1]
   125ac:	ldrsb	ip, [r2, #1]!
   125b0:	cmp	ip, #0
   125b4:	cmpne	ip, #47	; 0x2f
   125b8:	bne	125a4 <__assert_fail@plt+0x127c>
   125bc:	bx	lr
   125c0:	mov	r0, r2
   125c4:	bx	lr
   125c8:	push	{r4, r5, r6, r7, r8, lr}
   125cc:	mov	r7, r1
   125d0:	ldrsb	r1, [r0]
   125d4:	cmp	r1, #0
   125d8:	movne	r5, r0
   125dc:	movne	r4, #0
   125e0:	beq	1264c <__assert_fail@plt+0x1324>
   125e4:	cmp	r1, #92	; 0x5c
   125e8:	addne	r6, r5, r4
   125ec:	beq	1261c <__assert_fail@plt+0x12f4>
   125f0:	mov	r0, r7
   125f4:	bl	111a8 <strchr@plt>
   125f8:	cmp	r0, #0
   125fc:	bne	12644 <__assert_fail@plt+0x131c>
   12600:	ldrsb	r1, [r6, #1]!
   12604:	add	r4, r4, #1
   12608:	mov	r0, r4
   1260c:	cmp	r1, #0
   12610:	popeq	{r4, r5, r6, r7, r8, pc}
   12614:	cmp	r1, #92	; 0x5c
   12618:	bne	125f0 <__assert_fail@plt+0x12c8>
   1261c:	add	r3, r5, r4
   12620:	ldrsb	r3, [r3, #1]
   12624:	cmp	r3, #0
   12628:	beq	12644 <__assert_fail@plt+0x131c>
   1262c:	add	r4, r4, #2
   12630:	mov	r0, r4
   12634:	ldrsb	r1, [r5, r4]
   12638:	cmp	r1, #0
   1263c:	bne	125e4 <__assert_fail@plt+0x12bc>
   12640:	pop	{r4, r5, r6, r7, r8, pc}
   12644:	mov	r0, r4
   12648:	pop	{r4, r5, r6, r7, r8, pc}
   1264c:	mov	r0, r1
   12650:	pop	{r4, r5, r6, r7, r8, pc}
   12654:	ldr	ip, [pc, #244]	; 12750 <__assert_fail@plt+0x1428>
   12658:	push	{r4, r5, r6, r7, r8, r9, lr}
   1265c:	add	ip, pc, ip
   12660:	ldr	lr, [pc, #236]	; 12754 <__assert_fail@plt+0x142c>
   12664:	sub	sp, sp, #12
   12668:	mov	r5, #0
   1266c:	ldr	r7, [ip, lr]
   12670:	mov	r4, r0
   12674:	mov	r8, r1
   12678:	ldr	r3, [r7]
   1267c:	mov	r0, ip
   12680:	mov	r9, r2
   12684:	str	r5, [sp]
   12688:	str	r3, [sp, #4]
   1268c:	bl	111c0 <__errno_location@plt>
   12690:	cmp	r4, r5
   12694:	str	r5, [r0]
   12698:	beq	126a8 <__assert_fail@plt+0x1380>
   1269c:	ldrsb	r3, [r4]
   126a0:	cmp	r3, r5
   126a4:	bne	126c8 <__assert_fail@plt+0x13a0>
   126a8:	ldr	r1, [pc, #168]	; 12758 <__assert_fail@plt+0x1430>
   126ac:	mov	r3, r4
   126b0:	add	r1, pc, r1
   126b4:	mov	r2, r8
   126b8:	ldr	r0, [r1]
   126bc:	ldr	r1, [pc, #152]	; 1275c <__assert_fail@plt+0x1434>
   126c0:	add	r1, pc, r1
   126c4:	bl	11244 <errx@plt>
   126c8:	mov	r6, r0
   126cc:	mov	r2, r9
   126d0:	mov	r3, r5
   126d4:	mov	r1, sp
   126d8:	mov	r0, r4
   126dc:	bl	1107c <__strtoull_internal@plt>
   126e0:	ldr	r2, [r6]
   126e4:	cmp	r2, r5
   126e8:	bne	12724 <__assert_fail@plt+0x13fc>
   126ec:	ldr	r3, [sp]
   126f0:	cmp	r3, r4
   126f4:	beq	126a8 <__assert_fail@plt+0x1380>
   126f8:	cmp	r3, r5
   126fc:	beq	1270c <__assert_fail@plt+0x13e4>
   12700:	ldrsb	r3, [r3]
   12704:	cmp	r3, r5
   12708:	bne	126a8 <__assert_fail@plt+0x1380>
   1270c:	ldr	r2, [sp, #4]
   12710:	ldr	r3, [r7]
   12714:	cmp	r2, r3
   12718:	bne	1274c <__assert_fail@plt+0x1424>
   1271c:	add	sp, sp, #12
   12720:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12724:	ldr	r3, [pc, #52]	; 12760 <__assert_fail@plt+0x1438>
   12728:	cmp	r2, #34	; 0x22
   1272c:	add	r3, pc, r3
   12730:	ldr	r0, [r3]
   12734:	bne	126a8 <__assert_fail@plt+0x1380>
   12738:	ldr	r1, [pc, #36]	; 12764 <__assert_fail@plt+0x143c>
   1273c:	mov	r3, r4
   12740:	mov	r2, r8
   12744:	add	r1, pc, r1
   12748:	bl	110c4 <err@plt>
   1274c:	bl	110a0 <__stack_chk_fail@plt>
   12750:	andeq	r3, r1, r0, ror r8
   12754:	andeq	r0, r0, r0, lsr #2
   12758:			; <UNDEFINED> instruction: 0x000139b8
   1275c:	andeq	r2, r0, r0, ror sl
   12760:	andeq	r3, r1, ip, lsr r9
   12764:	andeq	r2, r0, ip, ror #19
   12768:	push	{r4, lr}
   1276c:	mov	r5, r0
   12770:	mov	r4, r1
   12774:	bl	111c0 <__errno_location@plt>
   12778:	ldr	ip, [pc, #32]	; 127a0 <__assert_fail@plt+0x1478>
   1277c:	ldr	r1, [pc, #32]	; 127a4 <__assert_fail@plt+0x147c>
   12780:	add	ip, pc, ip
   12784:	mov	lr, #34	; 0x22
   12788:	mov	r3, r5
   1278c:	mov	r2, r4
   12790:	add	r1, pc, r1
   12794:	str	lr, [r0]
   12798:	ldr	r0, [ip]
   1279c:	bl	110c4 <err@plt>
   127a0:	andeq	r3, r1, r8, ror #17
   127a4:	andeq	r2, r0, r0, lsr #19
   127a8:	push	{r4, r5, r6, lr}
   127ac:	mov	r4, r0
   127b0:	mov	r5, r1
   127b4:	bl	12654 <__assert_fail@plt+0x132c>
   127b8:	mov	r3, #0
   127bc:	mvn	r2, #0
   127c0:	cmp	r1, r3
   127c4:	cmpeq	r0, r2
   127c8:	popls	{r4, r5, r6, pc}
   127cc:	mov	r1, r5
   127d0:	mov	r0, r4
   127d4:	bl	12768 <__assert_fail@plt+0x1440>
   127d8:	ldr	r3, [pc, #8]	; 127e8 <__assert_fail@plt+0x14c0>
   127dc:	add	r3, pc, r3
   127e0:	str	r0, [r3]
   127e4:	bx	lr
   127e8:	andeq	r3, r1, ip, lsl #17
   127ec:	ldr	r3, [pc, #1648]	; 12e64 <__assert_fail@plt+0x1b3c>
   127f0:	ldr	ip, [pc, #1648]	; 12e68 <__assert_fail@plt+0x1b40>
   127f4:	add	r3, pc, r3
   127f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127fc:	mov	r5, r1
   12800:	ldr	r1, [r3, ip]
   12804:	sub	sp, sp, #52	; 0x34
   12808:	mov	ip, r1
   1280c:	mov	r8, r0
   12810:	str	r1, [sp, #24]
   12814:	mov	r0, #0
   12818:	mov	r1, #0
   1281c:	ldr	r3, [ip]
   12820:	strd	r0, [r5]
   12824:	mov	r9, r2
   12828:	str	r3, [sp, #44]	; 0x2c
   1282c:	bl	111c0 <__errno_location@plt>
   12830:	cmp	r8, #0
   12834:	mov	r4, r0
   12838:	beq	12a18 <__assert_fail@plt+0x16f0>
   1283c:	ldrsb	fp, [r8]
   12840:	cmp	fp, #0
   12844:	beq	12a18 <__assert_fail@plt+0x16f0>
   12848:	bl	1116c <__ctype_b_loc@plt>
   1284c:	mov	r2, r8
   12850:	ldr	r1, [r0]
   12854:	b	1285c <__assert_fail@plt+0x1534>
   12858:	ldrsb	fp, [r2, #1]!
   1285c:	uxtb	r3, fp
   12860:	lsl	r3, r3, #1
   12864:	ldrh	ip, [r1, r3]
   12868:	ands	ip, ip, #8192	; 0x2000
   1286c:	bne	12858 <__assert_fail@plt+0x1530>
   12870:	cmp	fp, #45	; 0x2d
   12874:	beq	12a18 <__assert_fail@plt+0x16f0>
   12878:	add	fp, sp, #40	; 0x28
   1287c:	mov	r3, ip
   12880:	mov	r2, ip
   12884:	str	ip, [r4]
   12888:	mov	r1, fp
   1288c:	mov	r0, r8
   12890:	str	ip, [sp, #40]	; 0x28
   12894:	bl	1107c <__strtoull_internal@plt>
   12898:	ldr	sl, [sp, #40]	; 0x28
   1289c:	cmp	sl, r8
   128a0:	mov	r2, r0
   128a4:	mov	r3, r1
   128a8:	ldr	r0, [r4]
   128ac:	strd	r2, [sp, #16]
   128b0:	beq	12b98 <__assert_fail@plt+0x1870>
   128b4:	cmp	r0, #0
   128b8:	bne	12a40 <__assert_fail@plt+0x1718>
   128bc:	cmp	sl, #0
   128c0:	beq	12bcc <__assert_fail@plt+0x18a4>
   128c4:	ldrsb	r0, [sl]
   128c8:	cmp	r0, #0
   128cc:	beq	12bc0 <__assert_fail@plt+0x1898>
   128d0:	mov	r8, #0
   128d4:	mov	r2, #0
   128d8:	mov	r3, #0
   128dc:	str	r9, [sp, #32]
   128e0:	mov	r6, fp
   128e4:	mov	r9, sl
   128e8:	mov	r7, r8
   128ec:	mov	sl, r2
   128f0:	mov	fp, r3
   128f4:	str	r5, [sp, #28]
   128f8:	ldrsb	r2, [r9, #1]
   128fc:	cmp	r2, #105	; 0x69
   12900:	beq	12a84 <__assert_fail@plt+0x175c>
   12904:	bic	r1, r2, #32
   12908:	cmp	r1, #66	; 0x42
   1290c:	bne	12ba4 <__assert_fail@plt+0x187c>
   12910:	ldrsb	r2, [r9, #2]
   12914:	cmp	r2, #0
   12918:	beq	12d88 <__assert_fail@plt+0x1a60>
   1291c:	bl	11280 <localeconv@plt>
   12920:	cmp	r0, #0
   12924:	beq	12a18 <__assert_fail@plt+0x16f0>
   12928:	ldr	r2, [r0]
   1292c:	cmp	r2, #0
   12930:	beq	12a18 <__assert_fail@plt+0x16f0>
   12934:	mov	r0, r2
   12938:	str	r2, [sp]
   1293c:	bl	1119c <strlen@plt>
   12940:	orrs	r3, sl, fp
   12944:	mov	r5, r0
   12948:	bne	12a18 <__assert_fail@plt+0x16f0>
   1294c:	ldrsb	r1, [r9]
   12950:	cmp	r1, #0
   12954:	beq	12a18 <__assert_fail@plt+0x16f0>
   12958:	ldr	r2, [sp]
   1295c:	mov	r1, r9
   12960:	mov	r0, r2
   12964:	mov	r2, r5
   12968:	bl	112ec <strncmp@plt>
   1296c:	cmp	r0, #0
   12970:	bne	12a18 <__assert_fail@plt+0x16f0>
   12974:	ldrsb	r2, [r9, r5]
   12978:	add	r5, r9, r5
   1297c:	cmp	r2, #48	; 0x30
   12980:	bne	129a0 <__assert_fail@plt+0x1678>
   12984:	add	r8, r8, #1
   12988:	sub	r1, r8, r5
   1298c:	mov	r3, r5
   12990:	add	r8, r3, r1
   12994:	ldrsb	r2, [r3, #1]!
   12998:	cmp	r2, #48	; 0x30
   1299c:	beq	12990 <__assert_fail@plt+0x1668>
   129a0:	mov	r3, #0
   129a4:	str	r7, [r4]
   129a8:	mov	r2, r3
   129ac:	mov	r1, r6
   129b0:	mov	r0, r5
   129b4:	str	r7, [sp, #40]	; 0x28
   129b8:	bl	1107c <__strtoull_internal@plt>
   129bc:	ldr	r9, [sp, #40]	; 0x28
   129c0:	cmp	r9, r5
   129c4:	mov	sl, r0
   129c8:	mov	fp, r1
   129cc:	beq	12b94 <__assert_fail@plt+0x186c>
   129d0:	ldr	ip, [r4]
   129d4:	cmp	ip, #0
   129d8:	beq	12a70 <__assert_fail@plt+0x1748>
   129dc:	subs	r3, r0, #1
   129e0:	str	r3, [sp, #8]
   129e4:	sbc	r3, r1, #0
   129e8:	str	r3, [sp, #12]
   129ec:	ldrd	r2, [sp, #8]
   129f0:	mvn	r1, #0
   129f4:	mvn	r0, #2
   129f8:	cmp	r3, r1
   129fc:	cmpeq	r2, r0
   12a00:	bhi	12dc4 <__assert_fail@plt+0x1a9c>
   12a04:	cmp	r9, #0
   12a08:	beq	12a18 <__assert_fail@plt+0x16f0>
   12a0c:	ldrsb	r2, [r9]
   12a10:	cmp	r2, #0
   12a14:	bne	128f8 <__assert_fail@plt+0x15d0>
   12a18:	mov	r3, #22
   12a1c:	mvn	r0, #21
   12a20:	str	r3, [r4]
   12a24:	ldr	r3, [sp, #24]
   12a28:	ldr	r2, [sp, #44]	; 0x2c
   12a2c:	ldr	r3, [r3]
   12a30:	cmp	r2, r3
   12a34:	bne	12e60 <__assert_fail@plt+0x1b38>
   12a38:	add	sp, sp, #52	; 0x34
   12a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a40:	subs	r6, r2, #1
   12a44:	sbc	r7, r3, #0
   12a48:	mvn	r3, #0
   12a4c:	mvn	r2, #2
   12a50:	cmp	r7, r3
   12a54:	cmpeq	r6, r2
   12a58:	bls	128bc <__assert_fail@plt+0x1594>
   12a5c:	rsb	r0, r0, #0
   12a60:	cmp	r0, #0
   12a64:	bge	12a24 <__assert_fail@plt+0x16fc>
   12a68:	rsb	r3, r0, #0
   12a6c:	b	12a20 <__assert_fail@plt+0x16f8>
   12a70:	orrs	r3, sl, fp
   12a74:	bne	12a04 <__assert_fail@plt+0x16dc>
   12a78:	ldrsb	r2, [r9, #1]
   12a7c:	cmp	r2, #105	; 0x69
   12a80:	bne	12904 <__assert_fail@plt+0x15dc>
   12a84:	ldrsb	r2, [r9, #2]
   12a88:	bic	r2, r2, #32
   12a8c:	cmp	r2, #66	; 0x42
   12a90:	bne	1291c <__assert_fail@plt+0x15f4>
   12a94:	ldrsb	r2, [r9, #3]
   12a98:	cmp	r2, #0
   12a9c:	bne	1291c <__assert_fail@plt+0x15f4>
   12aa0:	strd	sl, [sp]
   12aa4:	mov	sl, r9
   12aa8:	ldr	r9, [sp, #32]
   12aac:	mov	r3, #1024	; 0x400
   12ab0:	ldr	r5, [sp, #28]
   12ab4:	str	r3, [sp, #28]
   12ab8:	ldrsb	r7, [sl]
   12abc:	ldr	r6, [pc, #936]	; 12e6c <__assert_fail@plt+0x1b44>
   12ac0:	add	r6, pc, r6
   12ac4:	mov	r1, r7
   12ac8:	mov	r0, r6
   12acc:	bl	111a8 <strchr@plt>
   12ad0:	cmp	r0, #0
   12ad4:	beq	12da4 <__assert_fail@plt+0x1a7c>
   12ad8:	sub	ip, r0, r6
   12adc:	add	fp, ip, #1
   12ae0:	cmp	fp, #0
   12ae4:	beq	12bb0 <__assert_fail@plt+0x1888>
   12ae8:	ldr	r3, [sp, #20]
   12aec:	ldr	r6, [sp, #28]
   12af0:	cmp	r3, #0
   12af4:	mov	r0, #0
   12af8:	asr	r7, r6, #31
   12afc:	mov	r1, #0
   12b00:	bne	12e00 <__assert_fail@plt+0x1ad8>
   12b04:	orrs	r3, r0, r1
   12b08:	bne	12bf4 <__assert_fail@plt+0x18cc>
   12b0c:	str	fp, [sp, #32]
   12b10:	sub	ip, ip, #1
   12b14:	str	r8, [sp, #36]	; 0x24
   12b18:	mov	fp, r4
   12b1c:	ldrd	r0, [sp, #16]
   12b20:	mov	lr, r5
   12b24:	mov	sl, r9
   12b28:	b	12b38 <__assert_fail@plt+0x1810>
   12b2c:	orrs	r3, r4, r5
   12b30:	sub	ip, ip, #1
   12b34:	bne	12bdc <__assert_fail@plt+0x18b4>
   12b38:	mul	r2, r0, r7
   12b3c:	cmn	ip, #1
   12b40:	mla	r2, r6, r1, r2
   12b44:	umull	r0, r1, r0, r6
   12b48:	add	r2, r2, r1
   12b4c:	mov	r1, r2
   12b50:	beq	12d68 <__assert_fail@plt+0x1a40>
   12b54:	cmp	r2, #0
   12b58:	mov	r4, #0
   12b5c:	mov	r5, #0
   12b60:	beq	12b2c <__assert_fail@plt+0x1804>
   12b64:	umull	r2, r3, r6, r2
   12b68:	umull	r8, r9, r0, r6
   12b6c:	strd	r2, [sp, #8]
   12b70:	mov	r8, r9
   12b74:	ldr	r3, [sp, #12]
   12b78:	adds	r8, r2, r8
   12b7c:	mov	r2, #0
   12b80:	adc	r3, r3, r2
   12b84:	cmp	r3, r2
   12b88:	movne	r4, #1
   12b8c:	movne	r5, #0
   12b90:	b	12b2c <__assert_fail@plt+0x1804>
   12b94:	ldr	r0, [r4]
   12b98:	cmp	r0, #0
   12b9c:	beq	12a18 <__assert_fail@plt+0x16f0>
   12ba0:	b	12a5c <__assert_fail@plt+0x1734>
   12ba4:	cmp	r2, #0
   12ba8:	bne	1291c <__assert_fail@plt+0x15f4>
   12bac:	b	12aa0 <__assert_fail@plt+0x1778>
   12bb0:	cmp	r9, #0
   12bb4:	movne	r0, fp
   12bb8:	bne	12c00 <__assert_fail@plt+0x18d8>
   12bbc:	mov	r0, r9
   12bc0:	ldrd	r2, [sp, #16]
   12bc4:	strd	r2, [r5]
   12bc8:	b	12a24 <__assert_fail@plt+0x16fc>
   12bcc:	ldrd	r2, [sp, #16]
   12bd0:	mov	r0, sl
   12bd4:	strd	r2, [r5]
   12bd8:	b	12a24 <__assert_fail@plt+0x16fc>
   12bdc:	mov	r4, fp
   12be0:	ldr	r8, [sp, #36]	; 0x24
   12be4:	ldr	fp, [sp, #32]
   12be8:	mov	r5, lr
   12bec:	mov	r9, sl
   12bf0:	strd	r0, [sp, #16]
   12bf4:	mvn	r0, #33	; 0x21
   12bf8:	cmp	r9, #0
   12bfc:	beq	12c04 <__assert_fail@plt+0x18dc>
   12c00:	str	fp, [r9]
   12c04:	ldrd	r2, [sp]
   12c08:	mov	r1, r2
   12c0c:	orrs	r3, r1, r3
   12c10:	movne	r3, #1
   12c14:	moveq	r3, #0
   12c18:	cmp	fp, #0
   12c1c:	moveq	r3, #0
   12c20:	cmp	r3, #0
   12c24:	beq	12d5c <__assert_fail@plt+0x1a34>
   12c28:	ldr	r3, [pc, #576]	; 12e70 <__assert_fail@plt+0x1b48>
   12c2c:	ldr	r1, [pc, #576]	; 12e74 <__assert_fail@plt+0x1b4c>
   12c30:	umull	ip, r3, r3, r8
   12c34:	smull	ip, r1, r1, r8
   12c38:	lsr	r3, r3, #1
   12c3c:	rsb	r1, r1, r8, asr #31
   12c40:	add	r3, r3, r3, lsl #1
   12c44:	add	r1, r1, fp
   12c48:	subs	r3, r8, r3
   12c4c:	sub	r6, r1, #1
   12c50:	bne	12dcc <__assert_fail@plt+0x1aa4>
   12c54:	ldrd	r8, [sp]
   12c58:	adds	r3, r8, r8
   12c5c:	adc	r2, r9, r9
   12c60:	adds	r3, r3, r8
   12c64:	adc	r2, r2, r9
   12c68:	lsl	ip, r3, #5
   12c6c:	lsl	lr, r2, #5
   12c70:	orr	lr, lr, r3, lsr #27
   12c74:	adds	r3, r3, ip
   12c78:	adc	r2, r2, lr
   12c7c:	adds	r3, r8, r3
   12c80:	str	r3, [sp]
   12c84:	ldr	r3, [sp, #4]
   12c88:	adc	r3, r3, r2
   12c8c:	str	r3, [sp, #4]
   12c90:	cmp	r6, #0
   12c94:	blt	12a18 <__assert_fail@plt+0x16f0>
   12c98:	beq	12d40 <__assert_fail@plt+0x1a18>
   12c9c:	ldr	r3, [sp, #4]
   12ca0:	ldr	r8, [sp, #28]
   12ca4:	cmp	r3, #0
   12ca8:	mov	r6, #0
   12cac:	asr	r9, r8, #31
   12cb0:	mov	r7, #0
   12cb4:	bne	12e34 <__assert_fail@plt+0x1b0c>
   12cb8:	orrs	r3, r6, r7
   12cbc:	bne	12d40 <__assert_fail@plt+0x1a18>
   12cc0:	sub	r1, r1, #3
   12cc4:	ldrd	r2, [sp]
   12cc8:	mov	lr, r4
   12ccc:	str	r5, [sp, #8]
   12cd0:	b	12ce0 <__assert_fail@plt+0x19b8>
   12cd4:	orrs	ip, r6, r7
   12cd8:	sub	r1, r1, #1
   12cdc:	bne	12d34 <__assert_fail@plt+0x1a0c>
   12ce0:	mul	ip, r2, r9
   12ce4:	cmn	r1, #1
   12ce8:	mla	ip, r8, r3, ip
   12cec:	umull	r2, r3, r2, r8
   12cf0:	add	ip, ip, r3
   12cf4:	mov	r3, ip
   12cf8:	beq	12d34 <__assert_fail@plt+0x1a0c>
   12cfc:	cmp	ip, #0
   12d00:	mov	r6, #0
   12d04:	mov	r7, #0
   12d08:	beq	12cd4 <__assert_fail@plt+0x19ac>
   12d0c:	umull	sl, fp, r2, r8
   12d10:	umull	r4, r5, r8, ip
   12d14:	mov	ip, fp
   12d18:	adds	ip, r4, ip
   12d1c:	mov	ip, #0
   12d20:	adc	ip, r5, ip
   12d24:	cmp	ip, #0
   12d28:	movne	r6, #1
   12d2c:	movne	r7, #0
   12d30:	b	12cd4 <__assert_fail@plt+0x19ac>
   12d34:	ldr	r5, [sp, #8]
   12d38:	mov	r4, lr
   12d3c:	strd	r2, [sp]
   12d40:	ldrd	r2, [sp]
   12d44:	ldr	r1, [sp, #16]
   12d48:	adds	r1, r1, r2
   12d4c:	str	r1, [sp, #16]
   12d50:	ldr	r1, [sp, #20]
   12d54:	adc	r3, r1, r3
   12d58:	str	r3, [sp, #20]
   12d5c:	ldrd	r2, [sp, #16]
   12d60:	strd	r2, [r5]
   12d64:	b	12a60 <__assert_fail@plt+0x1738>
   12d68:	mov	r4, fp
   12d6c:	strd	r0, [sp, #16]
   12d70:	ldr	r8, [sp, #36]	; 0x24
   12d74:	ldr	fp, [sp, #32]
   12d78:	mov	r5, lr
   12d7c:	mov	r9, sl
   12d80:	mov	r0, #0
   12d84:	b	12bf8 <__assert_fail@plt+0x18d0>
   12d88:	mov	r3, #1000	; 0x3e8
   12d8c:	strd	sl, [sp]
   12d90:	ldr	r5, [sp, #28]
   12d94:	mov	sl, r9
   12d98:	str	r3, [sp, #28]
   12d9c:	ldr	r9, [sp, #32]
   12da0:	b	12ab8 <__assert_fail@plt+0x1790>
   12da4:	ldr	r6, [pc, #204]	; 12e78 <__assert_fail@plt+0x1b50>
   12da8:	mov	r1, r7
   12dac:	add	r6, pc, r6
   12db0:	mov	r0, r6
   12db4:	bl	111a8 <strchr@plt>
   12db8:	cmp	r0, #0
   12dbc:	bne	12ad8 <__assert_fail@plt+0x17b0>
   12dc0:	b	12a18 <__assert_fail@plt+0x16f0>
   12dc4:	mov	r0, ip
   12dc8:	b	12a5c <__assert_fail@plt+0x1734>
   12dcc:	cmp	r3, #1
   12dd0:	bne	12c90 <__assert_fail@plt+0x1968>
   12dd4:	ldrd	r8, [sp]
   12dd8:	lsl	r2, r9, #2
   12ddc:	lsl	r3, r8, #2
   12de0:	adds	r3, r3, r8
   12de4:	orr	r2, r2, r8, lsr #30
   12de8:	adc	r2, r2, r9
   12dec:	adds	r3, r3, r3
   12df0:	str	r3, [sp]
   12df4:	adc	r3, r2, r2
   12df8:	str	r3, [sp, #4]
   12dfc:	b	12c90 <__assert_fail@plt+0x1968>
   12e00:	ldr	lr, [sp, #28]
   12e04:	ldr	r3, [sp, #16]
   12e08:	ldr	sl, [sp, #20]
   12e0c:	umull	r2, r3, r3, lr
   12e10:	str	r3, [sp, #8]
   12e14:	mov	r3, #0
   12e18:	str	r3, [sp, #12]
   12e1c:	ldrd	r2, [sp, #8]
   12e20:	umlal	r2, r3, sl, lr
   12e24:	cmp	r3, #0
   12e28:	movne	r0, #1
   12e2c:	movne	r1, #0
   12e30:	b	12b04 <__assert_fail@plt+0x17dc>
   12e34:	ldr	r3, [sp]
   12e38:	ldr	ip, [sp, #28]
   12e3c:	ldr	lr, [sp, #4]
   12e40:	umull	sl, fp, r3, ip
   12e44:	mov	r3, #0
   12e48:	mov	r2, fp
   12e4c:	umlal	r2, r3, lr, ip
   12e50:	cmp	r3, #0
   12e54:	movne	r6, #1
   12e58:	movne	r7, #0
   12e5c:	b	12cb8 <__assert_fail@plt+0x1990>
   12e60:	bl	110a0 <__stack_chk_fail@plt>
   12e64:	ldrdeq	r3, [r1], -r8
   12e68:	andeq	r0, r0, r0, lsr #2
   12e6c:	andeq	r2, r0, ip, ror r6
   12e70:	bge	feabd924 <optarg@@GLIBC_2.4+0xfea97894>
   12e74:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   12e78:	muleq	r0, ip, r3
   12e7c:	mov	r2, #0
   12e80:	b	127ec <__assert_fail@plt+0x14c4>
   12e84:	push	{r4, r5, r6, lr}
   12e88:	subs	r5, r0, #0
   12e8c:	mov	r6, r1
   12e90:	beq	12efc <__assert_fail@plt+0x1bd4>
   12e94:	ldrsb	r4, [r5]
   12e98:	cmp	r4, #0
   12e9c:	beq	12f10 <__assert_fail@plt+0x1be8>
   12ea0:	bl	1116c <__ctype_b_loc@plt>
   12ea4:	mov	r3, r5
   12ea8:	ldr	r0, [r0]
   12eac:	b	12ec4 <__assert_fail@plt+0x1b9c>
   12eb0:	adds	r3, r3, #1
   12eb4:	beq	12efc <__assert_fail@plt+0x1bd4>
   12eb8:	ldrsb	r4, [r3]
   12ebc:	cmp	r4, #0
   12ec0:	beq	12ed8 <__assert_fail@plt+0x1bb0>
   12ec4:	uxtb	r4, r4
   12ec8:	lsl	r4, r4, #1
   12ecc:	ldrh	r2, [r0, r4]
   12ed0:	tst	r2, #2048	; 0x800
   12ed4:	bne	12eb0 <__assert_fail@plt+0x1b88>
   12ed8:	cmp	r6, #0
   12edc:	strne	r3, [r6]
   12ee0:	cmp	r5, r3
   12ee4:	bcs	12f08 <__assert_fail@plt+0x1be0>
   12ee8:	ldrsb	r3, [r3]
   12eec:	cmp	r3, #0
   12ef0:	bne	12f08 <__assert_fail@plt+0x1be0>
   12ef4:	mov	r0, #1
   12ef8:	pop	{r4, r5, r6, pc}
   12efc:	cmp	r6, #0
   12f00:	movne	r3, #0
   12f04:	strne	r3, [r6]
   12f08:	mov	r0, #0
   12f0c:	pop	{r4, r5, r6, pc}
   12f10:	cmp	r1, #0
   12f14:	strne	r5, [r1]
   12f18:	b	12f08 <__assert_fail@plt+0x1be0>
   12f1c:	push	{r4, r5, r6, lr}
   12f20:	subs	r5, r0, #0
   12f24:	mov	r6, r1
   12f28:	beq	12f94 <__assert_fail@plt+0x1c6c>
   12f2c:	ldrsb	r4, [r5]
   12f30:	cmp	r4, #0
   12f34:	beq	12fa8 <__assert_fail@plt+0x1c80>
   12f38:	bl	1116c <__ctype_b_loc@plt>
   12f3c:	mov	r3, r5
   12f40:	ldr	r0, [r0]
   12f44:	b	12f5c <__assert_fail@plt+0x1c34>
   12f48:	adds	r3, r3, #1
   12f4c:	beq	12f94 <__assert_fail@plt+0x1c6c>
   12f50:	ldrsb	r4, [r3]
   12f54:	cmp	r4, #0
   12f58:	beq	12f70 <__assert_fail@plt+0x1c48>
   12f5c:	uxtb	r4, r4
   12f60:	lsl	r4, r4, #1
   12f64:	ldrh	r2, [r0, r4]
   12f68:	tst	r2, #4096	; 0x1000
   12f6c:	bne	12f48 <__assert_fail@plt+0x1c20>
   12f70:	cmp	r6, #0
   12f74:	strne	r3, [r6]
   12f78:	cmp	r5, r3
   12f7c:	bcs	12fa0 <__assert_fail@plt+0x1c78>
   12f80:	ldrsb	r3, [r3]
   12f84:	cmp	r3, #0
   12f88:	bne	12fa0 <__assert_fail@plt+0x1c78>
   12f8c:	mov	r0, #1
   12f90:	pop	{r4, r5, r6, pc}
   12f94:	cmp	r6, #0
   12f98:	movne	r3, #0
   12f9c:	strne	r3, [r6]
   12fa0:	mov	r0, #0
   12fa4:	pop	{r4, r5, r6, pc}
   12fa8:	cmp	r1, #0
   12fac:	strne	r5, [r1]
   12fb0:	b	12fa0 <__assert_fail@plt+0x1c78>
   12fb4:	push	{r1, r2, r3}
   12fb8:	ldr	r3, [pc, #188]	; 1307c <__assert_fail@plt+0x1d54>
   12fbc:	ldr	r2, [pc, #188]	; 13080 <__assert_fail@plt+0x1d58>
   12fc0:	add	r3, pc, r3
   12fc4:	push	{r4, r5, r6, r7, r8, lr}
   12fc8:	sub	sp, sp, #12
   12fcc:	ldr	r7, [r3, r2]
   12fd0:	ldr	r8, [sp, #36]	; 0x24
   12fd4:	mov	r6, r0
   12fd8:	ldr	r3, [r7]
   12fdc:	add	r4, sp, #48	; 0x30
   12fe0:	str	r3, [sp, #4]
   12fe4:	b	13000 <__assert_fail@plt+0x1cd8>
   12fe8:	mov	r1, r5
   12fec:	mov	r0, r6
   12ff0:	bl	11010 <strcmp@plt>
   12ff4:	add	r4, r4, #8
   12ff8:	cmp	r0, #0
   12ffc:	beq	13038 <__assert_fail@plt+0x1d10>
   13000:	ldr	r1, [r4, #-8]
   13004:	sub	r3, r4, #4
   13008:	cmp	r1, #0
   1300c:	str	r3, [sp]
   13010:	beq	13058 <__assert_fail@plt+0x1d30>
   13014:	ldr	r5, [r4, #-4]
   13018:	str	r4, [sp]
   1301c:	cmp	r5, #0
   13020:	beq	13058 <__assert_fail@plt+0x1d30>
   13024:	mov	r0, r6
   13028:	bl	11010 <strcmp@plt>
   1302c:	cmp	r0, #0
   13030:	bne	12fe8 <__assert_fail@plt+0x1cc0>
   13034:	mov	r0, #1
   13038:	ldr	r2, [sp, #4]
   1303c:	ldr	r3, [r7]
   13040:	cmp	r2, r3
   13044:	bne	13078 <__assert_fail@plt+0x1d50>
   13048:	add	sp, sp, #12
   1304c:	pop	{r4, r5, r6, r7, r8, lr}
   13050:	add	sp, sp, #12
   13054:	bx	lr
   13058:	ldr	r1, [pc, #36]	; 13084 <__assert_fail@plt+0x1d5c>
   1305c:	mov	r3, r6
   13060:	add	r1, pc, r1
   13064:	mov	r2, r8
   13068:	ldr	r0, [r1]
   1306c:	ldr	r1, [pc, #20]	; 13088 <__assert_fail@plt+0x1d60>
   13070:	add	r1, pc, r1
   13074:	bl	11244 <errx@plt>
   13078:	bl	110a0 <__stack_chk_fail@plt>
   1307c:	andeq	r2, r1, ip, lsl #30
   13080:	andeq	r0, r0, r0, lsr #2
   13084:	andeq	r3, r1, r8
   13088:	andeq	r2, r0, r0, asr #1
   1308c:	cmp	r1, #0
   13090:	beq	130dc <__assert_fail@plt+0x1db4>
   13094:	ldrsb	r3, [r0]
   13098:	cmp	r3, #0
   1309c:	beq	130dc <__assert_fail@plt+0x1db4>
   130a0:	sxtb	r2, r2
   130a4:	cmp	r3, r2
   130a8:	bxeq	lr
   130ac:	add	r1, r0, r1
   130b0:	add	r3, r0, #1
   130b4:	b	130d0 <__assert_fail@plt+0x1da8>
   130b8:	ldrsb	ip, [r3]
   130bc:	add	r3, r3, #1
   130c0:	cmp	ip, #0
   130c4:	beq	130dc <__assert_fail@plt+0x1db4>
   130c8:	cmp	ip, r2
   130cc:	bxeq	lr
   130d0:	cmp	r3, r1
   130d4:	mov	r0, r3
   130d8:	bne	130b8 <__assert_fail@plt+0x1d90>
   130dc:	mov	r0, #0
   130e0:	bx	lr
   130e4:	push	{r4, r5, r6, lr}
   130e8:	mov	r2, #10
   130ec:	mov	r4, r0
   130f0:	mov	r5, r1
   130f4:	bl	127a8 <__assert_fail@plt+0x1480>
   130f8:	cmp	r0, #65536	; 0x10000
   130fc:	bcs	13108 <__assert_fail@plt+0x1de0>
   13100:	uxth	r0, r0
   13104:	pop	{r4, r5, r6, pc}
   13108:	mov	r1, r5
   1310c:	mov	r0, r4
   13110:	bl	12768 <__assert_fail@plt+0x1440>
   13114:	push	{r4, r5, r6, lr}
   13118:	mov	r2, #16
   1311c:	mov	r4, r0
   13120:	mov	r5, r1
   13124:	bl	127a8 <__assert_fail@plt+0x1480>
   13128:	cmp	r0, #65536	; 0x10000
   1312c:	bcs	13138 <__assert_fail@plt+0x1e10>
   13130:	uxth	r0, r0
   13134:	pop	{r4, r5, r6, pc}
   13138:	mov	r1, r5
   1313c:	mov	r0, r4
   13140:	bl	12768 <__assert_fail@plt+0x1440>
   13144:	mov	r2, #10
   13148:	b	127a8 <__assert_fail@plt+0x1480>
   1314c:	mov	r2, #16
   13150:	b	127a8 <__assert_fail@plt+0x1480>
   13154:	ldr	r2, [pc, #236]	; 13248 <__assert_fail@plt+0x1f20>
   13158:	ldr	ip, [pc, #236]	; 1324c <__assert_fail@plt+0x1f24>
   1315c:	add	r2, pc, r2
   13160:	push	{r4, r5, r6, r7, r8, lr}
   13164:	sub	sp, sp, #8
   13168:	ldr	r7, [r2, ip]
   1316c:	mov	r5, #0
   13170:	mov	r4, r0
   13174:	ldr	r3, [r7]
   13178:	mov	r8, r1
   1317c:	str	r5, [sp]
   13180:	str	r3, [sp, #4]
   13184:	bl	111c0 <__errno_location@plt>
   13188:	cmp	r4, r5
   1318c:	str	r5, [r0]
   13190:	beq	131a0 <__assert_fail@plt+0x1e78>
   13194:	ldrsb	r3, [r4]
   13198:	cmp	r3, r5
   1319c:	bne	131c0 <__assert_fail@plt+0x1e98>
   131a0:	ldr	r1, [pc, #168]	; 13250 <__assert_fail@plt+0x1f28>
   131a4:	mov	r3, r4
   131a8:	add	r1, pc, r1
   131ac:	mov	r2, r8
   131b0:	ldr	r0, [r1]
   131b4:	ldr	r1, [pc, #152]	; 13254 <__assert_fail@plt+0x1f2c>
   131b8:	add	r1, pc, r1
   131bc:	bl	11244 <errx@plt>
   131c0:	mov	r6, r0
   131c4:	mov	r2, #10
   131c8:	mov	r3, r5
   131cc:	mov	r1, sp
   131d0:	mov	r0, r4
   131d4:	bl	11298 <__strtoll_internal@plt>
   131d8:	ldr	r2, [r6]
   131dc:	cmp	r2, r5
   131e0:	bne	1321c <__assert_fail@plt+0x1ef4>
   131e4:	ldr	r3, [sp]
   131e8:	cmp	r3, r4
   131ec:	beq	131a0 <__assert_fail@plt+0x1e78>
   131f0:	cmp	r3, r5
   131f4:	beq	13204 <__assert_fail@plt+0x1edc>
   131f8:	ldrsb	r3, [r3]
   131fc:	cmp	r3, r5
   13200:	bne	131a0 <__assert_fail@plt+0x1e78>
   13204:	ldr	r2, [sp, #4]
   13208:	ldr	r3, [r7]
   1320c:	cmp	r2, r3
   13210:	bne	13244 <__assert_fail@plt+0x1f1c>
   13214:	add	sp, sp, #8
   13218:	pop	{r4, r5, r6, r7, r8, pc}
   1321c:	ldr	r3, [pc, #52]	; 13258 <__assert_fail@plt+0x1f30>
   13220:	cmp	r2, #34	; 0x22
   13224:	add	r3, pc, r3
   13228:	ldr	r0, [r3]
   1322c:	bne	131a0 <__assert_fail@plt+0x1e78>
   13230:	ldr	r1, [pc, #36]	; 1325c <__assert_fail@plt+0x1f34>
   13234:	mov	r3, r4
   13238:	mov	r2, r8
   1323c:	add	r1, pc, r1
   13240:	bl	110c4 <err@plt>
   13244:	bl	110a0 <__stack_chk_fail@plt>
   13248:	andeq	r2, r1, r0, ror sp
   1324c:	andeq	r0, r0, r0, lsr #2
   13250:	andeq	r2, r1, r0, asr #29
   13254:	andeq	r1, r0, r8, ror pc
   13258:	andeq	r2, r1, r4, asr #28
   1325c:	strdeq	r1, [r0], -r4
   13260:	push	{r4, r5, r6, r7, r8, lr}
   13264:	mov	r7, r0
   13268:	mov	r6, r1
   1326c:	bl	13154 <__assert_fail@plt+0x1e2c>
   13270:	mov	r3, #0
   13274:	mvn	r2, #0
   13278:	adds	r4, r0, #-2147483648	; 0x80000000
   1327c:	adc	r5, r1, #0
   13280:	cmp	r5, r3
   13284:	cmpeq	r4, r2
   13288:	popls	{r4, r5, r6, r7, r8, pc}
   1328c:	bl	111c0 <__errno_location@plt>
   13290:	ldr	ip, [pc, #32]	; 132b8 <__assert_fail@plt+0x1f90>
   13294:	ldr	r1, [pc, #32]	; 132bc <__assert_fail@plt+0x1f94>
   13298:	add	ip, pc, ip
   1329c:	mov	lr, #34	; 0x22
   132a0:	mov	r3, r7
   132a4:	mov	r2, r6
   132a8:	add	r1, pc, r1
   132ac:	str	lr, [r0]
   132b0:	ldr	r0, [ip]
   132b4:	bl	110c4 <err@plt>
   132b8:	ldrdeq	r2, [r1], -r0
   132bc:	andeq	r1, r0, r8, lsl #29
   132c0:	push	{r4, r5, r6, lr}
   132c4:	mov	r5, r0
   132c8:	mov	r4, r1
   132cc:	bl	13260 <__assert_fail@plt+0x1f38>
   132d0:	add	r3, r0, #32768	; 0x8000
   132d4:	cmp	r3, #65536	; 0x10000
   132d8:	bcs	132e4 <__assert_fail@plt+0x1fbc>
   132dc:	sxth	r0, r0
   132e0:	pop	{r4, r5, r6, pc}
   132e4:	bl	111c0 <__errno_location@plt>
   132e8:	ldr	ip, [pc, #32]	; 13310 <__assert_fail@plt+0x1fe8>
   132ec:	ldr	r1, [pc, #32]	; 13314 <__assert_fail@plt+0x1fec>
   132f0:	add	ip, pc, ip
   132f4:	mov	lr, #34	; 0x22
   132f8:	mov	r3, r5
   132fc:	mov	r2, r4
   13300:	add	r1, pc, r1
   13304:	str	lr, [r0]
   13308:	ldr	r0, [ip]
   1330c:	bl	110c4 <err@plt>
   13310:	andeq	r2, r1, r8, ror sp
   13314:	andeq	r1, r0, r0, lsr lr
   13318:	mov	r2, #10
   1331c:	b	12654 <__assert_fail@plt+0x132c>
   13320:	mov	r2, #16
   13324:	b	12654 <__assert_fail@plt+0x132c>
   13328:	ldr	r2, [pc, #228]	; 13414 <__assert_fail@plt+0x20ec>
   1332c:	ldr	r3, [pc, #228]	; 13418 <__assert_fail@plt+0x20f0>
   13330:	add	r2, pc, r2
   13334:	push	{r4, r5, r6, r7, r8, lr}
   13338:	sub	sp, sp, #8
   1333c:	ldr	r7, [r2, r3]
   13340:	mov	r5, #0
   13344:	mov	r4, r0
   13348:	ldr	r3, [r7]
   1334c:	mov	r8, r1
   13350:	str	r5, [sp]
   13354:	str	r3, [sp, #4]
   13358:	bl	111c0 <__errno_location@plt>
   1335c:	cmp	r4, r5
   13360:	str	r5, [r0]
   13364:	beq	13374 <__assert_fail@plt+0x204c>
   13368:	ldrsb	r3, [r4]
   1336c:	cmp	r3, r5
   13370:	bne	13394 <__assert_fail@plt+0x206c>
   13374:	ldr	r1, [pc, #160]	; 1341c <__assert_fail@plt+0x20f4>
   13378:	mov	r3, r4
   1337c:	add	r1, pc, r1
   13380:	mov	r2, r8
   13384:	ldr	r0, [r1]
   13388:	ldr	r1, [pc, #144]	; 13420 <__assert_fail@plt+0x20f8>
   1338c:	add	r1, pc, r1
   13390:	bl	11244 <errx@plt>
   13394:	mov	r6, r0
   13398:	mov	r1, sp
   1339c:	mov	r0, r4
   133a0:	bl	11208 <strtod@plt>
   133a4:	ldr	r2, [r6]
   133a8:	cmp	r2, r5
   133ac:	bne	133e8 <__assert_fail@plt+0x20c0>
   133b0:	ldr	r3, [sp]
   133b4:	cmp	r3, r4
   133b8:	beq	13374 <__assert_fail@plt+0x204c>
   133bc:	cmp	r3, r5
   133c0:	beq	133d0 <__assert_fail@plt+0x20a8>
   133c4:	ldrsb	r3, [r3]
   133c8:	cmp	r3, r5
   133cc:	bne	13374 <__assert_fail@plt+0x204c>
   133d0:	ldr	r2, [sp, #4]
   133d4:	ldr	r3, [r7]
   133d8:	cmp	r2, r3
   133dc:	bne	13410 <__assert_fail@plt+0x20e8>
   133e0:	add	sp, sp, #8
   133e4:	pop	{r4, r5, r6, r7, r8, pc}
   133e8:	ldr	r3, [pc, #52]	; 13424 <__assert_fail@plt+0x20fc>
   133ec:	cmp	r2, #34	; 0x22
   133f0:	add	r3, pc, r3
   133f4:	ldr	r0, [r3]
   133f8:	bne	13374 <__assert_fail@plt+0x204c>
   133fc:	ldr	r1, [pc, #36]	; 13428 <__assert_fail@plt+0x2100>
   13400:	mov	r3, r4
   13404:	mov	r2, r8
   13408:	add	r1, pc, r1
   1340c:	bl	110c4 <err@plt>
   13410:	bl	110a0 <__stack_chk_fail@plt>
   13414:	muleq	r1, ip, fp
   13418:	andeq	r0, r0, r0, lsr #2
   1341c:	andeq	r2, r1, ip, ror #25
   13420:	andeq	r1, r0, r4, lsr #27
   13424:	andeq	r2, r1, r8, ror ip
   13428:	andeq	r1, r0, r8, lsr #26
   1342c:	ldr	r2, [pc, #232]	; 1351c <__assert_fail@plt+0x21f4>
   13430:	ldr	r3, [pc, #232]	; 13520 <__assert_fail@plt+0x21f8>
   13434:	add	r2, pc, r2
   13438:	push	{r4, r5, r6, r7, r8, lr}
   1343c:	sub	sp, sp, #8
   13440:	ldr	r7, [r2, r3]
   13444:	mov	r5, #0
   13448:	mov	r4, r0
   1344c:	ldr	r3, [r7]
   13450:	mov	r8, r1
   13454:	str	r5, [sp]
   13458:	str	r3, [sp, #4]
   1345c:	bl	111c0 <__errno_location@plt>
   13460:	cmp	r4, r5
   13464:	str	r5, [r0]
   13468:	beq	13478 <__assert_fail@plt+0x2150>
   1346c:	ldrsb	r3, [r4]
   13470:	cmp	r3, r5
   13474:	bne	13498 <__assert_fail@plt+0x2170>
   13478:	ldr	r1, [pc, #164]	; 13524 <__assert_fail@plt+0x21fc>
   1347c:	mov	r3, r4
   13480:	add	r1, pc, r1
   13484:	mov	r2, r8
   13488:	ldr	r0, [r1]
   1348c:	ldr	r1, [pc, #148]	; 13528 <__assert_fail@plt+0x2200>
   13490:	add	r1, pc, r1
   13494:	bl	11244 <errx@plt>
   13498:	mov	r6, r0
   1349c:	mov	r2, #10
   134a0:	mov	r1, sp
   134a4:	mov	r0, r4
   134a8:	bl	1101c <strtol@plt>
   134ac:	ldr	r2, [r6]
   134b0:	cmp	r2, r5
   134b4:	bne	134f0 <__assert_fail@plt+0x21c8>
   134b8:	ldr	r3, [sp]
   134bc:	cmp	r3, r4
   134c0:	beq	13478 <__assert_fail@plt+0x2150>
   134c4:	cmp	r3, r5
   134c8:	beq	134d8 <__assert_fail@plt+0x21b0>
   134cc:	ldrsb	r3, [r3]
   134d0:	cmp	r3, r5
   134d4:	bne	13478 <__assert_fail@plt+0x2150>
   134d8:	ldr	r2, [sp, #4]
   134dc:	ldr	r3, [r7]
   134e0:	cmp	r2, r3
   134e4:	bne	13518 <__assert_fail@plt+0x21f0>
   134e8:	add	sp, sp, #8
   134ec:	pop	{r4, r5, r6, r7, r8, pc}
   134f0:	ldr	r3, [pc, #52]	; 1352c <__assert_fail@plt+0x2204>
   134f4:	cmp	r2, #34	; 0x22
   134f8:	add	r3, pc, r3
   134fc:	ldr	r0, [r3]
   13500:	bne	13478 <__assert_fail@plt+0x2150>
   13504:	ldr	r1, [pc, #36]	; 13530 <__assert_fail@plt+0x2208>
   13508:	mov	r3, r4
   1350c:	mov	r2, r8
   13510:	add	r1, pc, r1
   13514:	bl	110c4 <err@plt>
   13518:	bl	110a0 <__stack_chk_fail@plt>
   1351c:	muleq	r1, r8, sl
   13520:	andeq	r0, r0, r0, lsr #2
   13524:	andeq	r2, r1, r8, ror #23
   13528:	andeq	r1, r0, r0, lsr #25
   1352c:	andeq	r2, r1, r0, ror fp
   13530:	andeq	r1, r0, r0, lsr #24
   13534:	ldr	r2, [pc, #232]	; 13624 <__assert_fail@plt+0x22fc>
   13538:	ldr	r3, [pc, #232]	; 13628 <__assert_fail@plt+0x2300>
   1353c:	add	r2, pc, r2
   13540:	push	{r4, r5, r6, r7, r8, lr}
   13544:	sub	sp, sp, #8
   13548:	ldr	r7, [r2, r3]
   1354c:	mov	r5, #0
   13550:	mov	r4, r0
   13554:	ldr	r3, [r7]
   13558:	mov	r8, r1
   1355c:	str	r5, [sp]
   13560:	str	r3, [sp, #4]
   13564:	bl	111c0 <__errno_location@plt>
   13568:	cmp	r4, r5
   1356c:	str	r5, [r0]
   13570:	beq	13580 <__assert_fail@plt+0x2258>
   13574:	ldrsb	r3, [r4]
   13578:	cmp	r3, r5
   1357c:	bne	135a0 <__assert_fail@plt+0x2278>
   13580:	ldr	r1, [pc, #164]	; 1362c <__assert_fail@plt+0x2304>
   13584:	mov	r3, r4
   13588:	add	r1, pc, r1
   1358c:	mov	r2, r8
   13590:	ldr	r0, [r1]
   13594:	ldr	r1, [pc, #148]	; 13630 <__assert_fail@plt+0x2308>
   13598:	add	r1, pc, r1
   1359c:	bl	11244 <errx@plt>
   135a0:	mov	r6, r0
   135a4:	mov	r2, #10
   135a8:	mov	r1, sp
   135ac:	mov	r0, r4
   135b0:	bl	11190 <strtoul@plt>
   135b4:	ldr	r2, [r6]
   135b8:	cmp	r2, r5
   135bc:	bne	135f8 <__assert_fail@plt+0x22d0>
   135c0:	ldr	r3, [sp]
   135c4:	cmp	r3, r4
   135c8:	beq	13580 <__assert_fail@plt+0x2258>
   135cc:	cmp	r3, r5
   135d0:	beq	135e0 <__assert_fail@plt+0x22b8>
   135d4:	ldrsb	r3, [r3]
   135d8:	cmp	r3, r5
   135dc:	bne	13580 <__assert_fail@plt+0x2258>
   135e0:	ldr	r2, [sp, #4]
   135e4:	ldr	r3, [r7]
   135e8:	cmp	r2, r3
   135ec:	bne	13620 <__assert_fail@plt+0x22f8>
   135f0:	add	sp, sp, #8
   135f4:	pop	{r4, r5, r6, r7, r8, pc}
   135f8:	ldr	r3, [pc, #52]	; 13634 <__assert_fail@plt+0x230c>
   135fc:	cmp	r2, #34	; 0x22
   13600:	add	r3, pc, r3
   13604:	ldr	r0, [r3]
   13608:	bne	13580 <__assert_fail@plt+0x2258>
   1360c:	ldr	r1, [pc, #36]	; 13638 <__assert_fail@plt+0x2310>
   13610:	mov	r3, r4
   13614:	mov	r2, r8
   13618:	add	r1, pc, r1
   1361c:	bl	110c4 <err@plt>
   13620:	bl	110a0 <__stack_chk_fail@plt>
   13624:	muleq	r1, r0, r9
   13628:	andeq	r0, r0, r0, lsr #2
   1362c:	andeq	r2, r1, r0, ror #21
   13630:	muleq	r0, r8, fp
   13634:	andeq	r2, r1, r8, ror #20
   13638:	andeq	r1, r0, r8, lsl fp
   1363c:	ldr	r3, [pc, #140]	; 136d0 <__assert_fail@plt+0x23a8>
   13640:	ldr	r2, [pc, #140]	; 136d4 <__assert_fail@plt+0x23ac>
   13644:	add	r3, pc, r3
   13648:	push	{r4, r5, r6, lr}
   1364c:	sub	sp, sp, #16
   13650:	ldr	r4, [r3, r2]
   13654:	mov	r5, r1
   13658:	mov	r1, sp
   1365c:	ldr	r3, [r4]
   13660:	mov	r6, r0
   13664:	str	r3, [sp, #12]
   13668:	bl	12e7c <__assert_fail@plt+0x1b54>
   1366c:	cmp	r0, #0
   13670:	beq	136b0 <__assert_fail@plt+0x2388>
   13674:	bl	111c0 <__errno_location@plt>
   13678:	ldr	r3, [pc, #88]	; 136d8 <__assert_fail@plt+0x23b0>
   1367c:	mov	r2, r5
   13680:	ldr	r1, [pc, r3]
   13684:	ldr	r3, [r0]
   13688:	mov	r0, r1
   1368c:	cmp	r3, #0
   13690:	mov	r3, r6
   13694:	beq	136a4 <__assert_fail@plt+0x237c>
   13698:	ldr	r1, [pc, #60]	; 136dc <__assert_fail@plt+0x23b4>
   1369c:	add	r1, pc, r1
   136a0:	bl	110c4 <err@plt>
   136a4:	ldr	r1, [pc, #52]	; 136e0 <__assert_fail@plt+0x23b8>
   136a8:	add	r1, pc, r1
   136ac:	bl	11244 <errx@plt>
   136b0:	ldr	r2, [sp, #12]
   136b4:	ldr	r3, [r4]
   136b8:	ldrd	r0, [sp]
   136bc:	cmp	r2, r3
   136c0:	bne	136cc <__assert_fail@plt+0x23a4>
   136c4:	add	sp, sp, #16
   136c8:	pop	{r4, r5, r6, pc}
   136cc:	bl	110a0 <__stack_chk_fail@plt>
   136d0:	andeq	r2, r1, r8, lsl #17
   136d4:	andeq	r0, r0, r0, lsr #2
   136d8:	andeq	r2, r1, r8, ror #19
   136dc:	muleq	r0, r4, sl
   136e0:	andeq	r1, r0, r8, lsl #21
   136e4:	push	{r4, lr}
   136e8:	mov	r4, r1
   136ec:	mov	r1, r2
   136f0:	bl	13328 <__assert_fail@plt+0x2000>
   136f4:	vldr	d6, [pc, #28]	; 13718 <__assert_fail@plt+0x23f0>
   136f8:	vcvt.s32.f64	s15, d0
   136fc:	vcvt.f64.s32	d5, s15
   13700:	vstr	s15, [r4]
   13704:	vsub.f64	d0, d0, d5
   13708:	vmul.f64	d0, d0, d6
   1370c:	vcvt.s32.f64	s0, d0
   13710:	vstr	s0, [r4, #4]
   13714:	pop	{r4, pc}
   13718:	andeq	r0, r0, r0
   1371c:	smlawbmi	lr, r0, r4, r8
   13720:	and	r2, r0, #61440	; 0xf000
   13724:	cmp	r2, #16384	; 0x4000
   13728:	moveq	r2, r1
   1372c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13730:	moveq	sl, #100	; 0x64
   13734:	mov	r3, r0
   13738:	add	r9, r1, #1
   1373c:	add	r8, r1, #2
   13740:	add	r7, r1, #3
   13744:	add	r6, r1, #4
   13748:	add	r5, r1, #5
   1374c:	add	r4, r1, #6
   13750:	add	lr, r1, #7
   13754:	add	ip, r1, #8
   13758:	add	r0, r1, #9
   1375c:	strbeq	sl, [r2], #10
   13760:	beq	13804 <__assert_fail@plt+0x24dc>
   13764:	cmp	r2, #40960	; 0xa000
   13768:	moveq	r2, r1
   1376c:	moveq	sl, #108	; 0x6c
   13770:	strbeq	sl, [r2], #10
   13774:	beq	13804 <__assert_fail@plt+0x24dc>
   13778:	cmp	r2, #8192	; 0x2000
   1377c:	moveq	r2, r1
   13780:	moveq	sl, #99	; 0x63
   13784:	strbeq	sl, [r2], #10
   13788:	beq	13804 <__assert_fail@plt+0x24dc>
   1378c:	cmp	r2, #24576	; 0x6000
   13790:	moveq	r2, r1
   13794:	moveq	sl, #98	; 0x62
   13798:	strbeq	sl, [r2], #10
   1379c:	beq	13804 <__assert_fail@plt+0x24dc>
   137a0:	cmp	r2, #49152	; 0xc000
   137a4:	moveq	r2, r1
   137a8:	moveq	sl, #115	; 0x73
   137ac:	strbeq	sl, [r2], #10
   137b0:	beq	13804 <__assert_fail@plt+0x24dc>
   137b4:	cmp	r2, #4096	; 0x1000
   137b8:	moveq	r2, r1
   137bc:	moveq	sl, #112	; 0x70
   137c0:	strbeq	sl, [r2], #10
   137c4:	beq	13804 <__assert_fail@plt+0x24dc>
   137c8:	cmp	r2, #32768	; 0x8000
   137cc:	moveq	r2, r1
   137d0:	moveq	sl, #45	; 0x2d
   137d4:	strbeq	sl, [r2], #10
   137d8:	beq	13804 <__assert_fail@plt+0x24dc>
   137dc:	mov	r2, r0
   137e0:	mov	r0, ip
   137e4:	mov	ip, lr
   137e8:	mov	lr, r4
   137ec:	mov	r4, r5
   137f0:	mov	r5, r6
   137f4:	mov	r6, r7
   137f8:	mov	r7, r8
   137fc:	mov	r8, r9
   13800:	mov	r9, r1
   13804:	tst	r3, #256	; 0x100
   13808:	movne	fp, #114	; 0x72
   1380c:	moveq	fp, #45	; 0x2d
   13810:	tst	r3, #128	; 0x80
   13814:	movne	sl, #119	; 0x77
   13818:	moveq	sl, #45	; 0x2d
   1381c:	tst	r3, #2048	; 0x800
   13820:	strb	fp, [r9]
   13824:	and	r9, r3, #64	; 0x40
   13828:	strb	sl, [r8]
   1382c:	beq	138c8 <__assert_fail@plt+0x25a0>
   13830:	cmp	r9, #0
   13834:	movne	r9, #115	; 0x73
   13838:	moveq	r9, #83	; 0x53
   1383c:	tst	r3, #32
   13840:	movne	r8, #114	; 0x72
   13844:	moveq	r8, #45	; 0x2d
   13848:	tst	r3, #16
   1384c:	strb	r9, [r7]
   13850:	movne	r7, #119	; 0x77
   13854:	moveq	r7, #45	; 0x2d
   13858:	tst	r3, #1024	; 0x400
   1385c:	strb	r8, [r6]
   13860:	and	r6, r3, #8
   13864:	strb	r7, [r5]
   13868:	beq	138d8 <__assert_fail@plt+0x25b0>
   1386c:	cmp	r6, #0
   13870:	movne	r6, #115	; 0x73
   13874:	moveq	r6, #83	; 0x53
   13878:	tst	r3, #4
   1387c:	movne	r5, #114	; 0x72
   13880:	moveq	r5, #45	; 0x2d
   13884:	tst	r3, #2
   13888:	strb	r6, [r4]
   1388c:	movne	r4, #119	; 0x77
   13890:	moveq	r4, #45	; 0x2d
   13894:	tst	r3, #512	; 0x200
   13898:	strb	r5, [lr]
   1389c:	and	r3, r3, #1
   138a0:	strb	r4, [ip]
   138a4:	beq	138e8 <__assert_fail@plt+0x25c0>
   138a8:	cmp	r3, #0
   138ac:	movne	ip, #116	; 0x74
   138b0:	moveq	ip, #84	; 0x54
   138b4:	mov	r3, #0
   138b8:	strb	ip, [r0]
   138bc:	mov	r0, r1
   138c0:	strb	r3, [r2]
   138c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138c8:	cmp	r9, #0
   138cc:	movne	r9, #120	; 0x78
   138d0:	moveq	r9, #45	; 0x2d
   138d4:	b	1383c <__assert_fail@plt+0x2514>
   138d8:	cmp	r6, #0
   138dc:	movne	r6, #120	; 0x78
   138e0:	moveq	r6, #45	; 0x2d
   138e4:	b	13878 <__assert_fail@plt+0x2550>
   138e8:	cmp	r3, #0
   138ec:	movne	ip, #120	; 0x78
   138f0:	moveq	ip, #45	; 0x2d
   138f4:	b	138b4 <__assert_fail@plt+0x258c>
   138f8:	ldr	r1, [pc, #680]	; 13ba8 <__assert_fail@plt+0x2880>
   138fc:	ldr	ip, [pc, #680]	; 13bac <__assert_fail@plt+0x2884>
   13900:	add	r1, pc, r1
   13904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13908:	sub	sp, sp, #108	; 0x6c
   1390c:	ldr	r8, [r1, ip]
   13910:	tst	r0, #2
   13914:	strd	r2, [sp, #32]
   13918:	ldr	r1, [r8]
   1391c:	addeq	r9, sp, #60	; 0x3c
   13920:	str	r1, [sp, #100]	; 0x64
   13924:	ldrd	r2, [sp, #32]
   13928:	movne	r1, #32
   1392c:	strbne	r1, [sp, #60]	; 0x3c
   13930:	addne	ip, sp, #61	; 0x3d
   13934:	addne	r9, sp, #60	; 0x3c
   13938:	moveq	ip, r9
   1393c:	mov	r1, #10
   13940:	mov	sl, #1
   13944:	sub	lr, r1, #32
   13948:	lsl	r4, sl, r1
   1394c:	lsl	r5, sl, lr
   13950:	rsb	lr, r1, #32
   13954:	orr	r5, r5, sl, lsr lr
   13958:	cmp	r3, r5
   1395c:	cmpeq	r2, r4
   13960:	bcc	13b1c <__assert_fail@plt+0x27f4>
   13964:	add	r1, r1, #10
   13968:	cmp	r1, #70	; 0x46
   1396c:	bne	13944 <__assert_fail@plt+0x261c>
   13970:	mov	lr, ip
   13974:	strd	r2, [sp, #32]
   13978:	mov	r4, r2
   1397c:	tst	r0, #1
   13980:	mov	r2, #69	; 0x45
   13984:	bic	r5, r3, #-268435456	; 0xf0000000
   13988:	lsr	sl, r3, #28
   1398c:	strb	r2, [lr], #1
   13990:	bne	13b04 <__assert_fail@plt+0x27dc>
   13994:	orrs	r3, r4, r5
   13998:	mov	r3, #0
   1399c:	strb	r3, [lr]
   139a0:	beq	13b44 <__assert_fail@plt+0x281c>
   139a4:	sub	r2, r1, #20
   139a8:	rsb	r0, r2, #32
   139ac:	lsr	r3, r4, r2
   139b0:	sub	r1, r1, #52	; 0x34
   139b4:	orr	r3, r3, r5, lsl r0
   139b8:	orr	r3, r3, r5, lsr r1
   139bc:	lsr	r2, r5, r2
   139c0:	adds	r6, r3, #50	; 0x32
   139c4:	adc	r7, r2, #0
   139c8:	mov	r3, #0
   139cc:	mov	r2, #100	; 0x64
   139d0:	mov	r0, r6
   139d4:	mov	r1, r7
   139d8:	bl	145b0 <__assert_fail@plt+0x3288>
   139dc:	cmp	r1, #0
   139e0:	cmpeq	r0, #10
   139e4:	mov	r2, r0
   139e8:	mov	r3, r1
   139ec:	addeq	sl, sl, #1
   139f0:	beq	13b44 <__assert_fail@plt+0x281c>
   139f4:	cmp	r7, #0
   139f8:	cmpeq	r6, #99	; 0x63
   139fc:	strd	r2, [sp, #32]
   13a00:	bls	13b44 <__assert_fail@plt+0x281c>
   13a04:	bl	11280 <localeconv@plt>
   13a08:	ldrd	r2, [sp, #32]
   13a0c:	cmp	r0, #0
   13a10:	beq	13b8c <__assert_fail@plt+0x2864>
   13a14:	ldr	r0, [r0]
   13a18:	cmp	r0, #0
   13a1c:	beq	13b98 <__assert_fail@plt+0x2870>
   13a20:	ldrsb	r1, [r0]
   13a24:	cmp	r1, #0
   13a28:	ldreq	r0, [pc, #384]	; 13bb0 <__assert_fail@plt+0x2888>
   13a2c:	addeq	r0, pc, r0
   13a30:	ldr	r1, [pc, #380]	; 13bb4 <__assert_fail@plt+0x288c>
   13a34:	strd	r2, [sp, #16]
   13a38:	add	r1, pc, r1
   13a3c:	add	r4, sp, #68	; 0x44
   13a40:	mov	r3, #32
   13a44:	str	r0, [sp, #8]
   13a48:	str	r1, [sp]
   13a4c:	str	r9, [sp, #24]
   13a50:	str	sl, [sp, #4]
   13a54:	mov	r0, r4
   13a58:	mov	r1, r3
   13a5c:	mov	r2, #1
   13a60:	bl	11310 <__snprintf_chk@plt>
   13a64:	b	13b6c <__assert_fail@plt+0x2844>
   13a68:	ldr	r4, [pc, #328]	; 13bb8 <__assert_fail@plt+0x2890>
   13a6c:	mvn	sl, #0
   13a70:	ldr	fp, [pc, #324]	; 13bbc <__assert_fail@plt+0x2894>
   13a74:	umull	r2, r3, lr, r4
   13a78:	sub	r4, r1, #42	; 0x2a
   13a7c:	strd	r2, [sp, #40]	; 0x28
   13a80:	ldr	r3, [sp, #44]	; 0x2c
   13a84:	lsl	r2, sl, lr
   13a88:	lsr	r3, r3, #3
   13a8c:	str	r3, [sp, #52]	; 0x34
   13a90:	ldr	r3, [sp, #32]
   13a94:	str	r4, [sp, #48]	; 0x30
   13a98:	orr	r4, r2, sl, lsl r4
   13a9c:	lsr	r2, r3, lr
   13aa0:	mov	r3, r2
   13aa4:	ldr	r2, [sp, #52]	; 0x34
   13aa8:	add	fp, pc, fp
   13aac:	str	r4, [sp, #40]	; 0x28
   13ab0:	ldrsb	fp, [fp, r2]
   13ab4:	mov	r2, r3
   13ab8:	ldr	r3, [sp, #36]	; 0x24
   13abc:	rsb	r5, lr, #32
   13ac0:	ldr	r4, [sp, #40]	; 0x28
   13ac4:	orr	r2, r2, r3, lsl r5
   13ac8:	orr	r4, r4, sl, lsr r5
   13acc:	ldr	r3, [sp, #32]
   13ad0:	str	r4, [sp, #40]	; 0x28
   13ad4:	cmp	r0, #0
   13ad8:	bic	r4, r3, sl, lsl lr
   13adc:	ldr	r0, [sp, #36]	; 0x24
   13ae0:	ldr	r3, [sp, #48]	; 0x30
   13ae4:	mov	lr, ip
   13ae8:	orr	sl, r2, r0, lsr r3
   13aec:	ldr	r3, [sp, #40]	; 0x28
   13af0:	strb	fp, [lr], #1
   13af4:	bic	r5, r0, r3
   13af8:	beq	13994 <__assert_fail@plt+0x266c>
   13afc:	cmp	fp, #66	; 0x42
   13b00:	beq	13994 <__assert_fail@plt+0x266c>
   13b04:	mov	r3, #105	; 0x69
   13b08:	strb	r3, [ip, #1]
   13b0c:	mov	r3, #66	; 0x42
   13b10:	add	lr, ip, #3
   13b14:	strb	r3, [ip, #2]
   13b18:	b	13994 <__assert_fail@plt+0x266c>
   13b1c:	subs	lr, r1, #10
   13b20:	strd	r2, [sp, #32]
   13b24:	and	r0, r0, #1
   13b28:	bne	13a68 <__assert_fail@plt+0x2740>
   13b2c:	ldr	sl, [sp, #32]
   13b30:	cmp	r0, #0
   13b34:	movne	r0, lr
   13b38:	mov	r3, #66	; 0x42
   13b3c:	strb	r0, [ip, #1]
   13b40:	strb	r3, [ip]
   13b44:	ldr	r2, [pc, #116]	; 13bc0 <__assert_fail@plt+0x2898>
   13b48:	add	r4, sp, #68	; 0x44
   13b4c:	add	r2, pc, r2
   13b50:	mov	r3, #32
   13b54:	stm	sp, {r2, sl}
   13b58:	str	r9, [sp, #8]
   13b5c:	mov	r0, r4
   13b60:	mov	r1, r3
   13b64:	mov	r2, #1
   13b68:	bl	11310 <__snprintf_chk@plt>
   13b6c:	mov	r0, r4
   13b70:	bl	11094 <strdup@plt>
   13b74:	ldr	r2, [sp, #100]	; 0x64
   13b78:	ldr	r3, [r8]
   13b7c:	cmp	r2, r3
   13b80:	bne	13ba4 <__assert_fail@plt+0x287c>
   13b84:	add	sp, sp, #108	; 0x6c
   13b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b8c:	ldr	r0, [pc, #48]	; 13bc4 <__assert_fail@plt+0x289c>
   13b90:	add	r0, pc, r0
   13b94:	b	13a30 <__assert_fail@plt+0x2708>
   13b98:	ldr	r0, [pc, #40]	; 13bc8 <__assert_fail@plt+0x28a0>
   13b9c:	add	r0, pc, r0
   13ba0:	b	13a30 <__assert_fail@plt+0x2708>
   13ba4:	bl	110a0 <__stack_chk_fail@plt>
   13ba8:	andeq	r2, r1, ip, asr #11
   13bac:	andeq	r0, r0, r0, lsr #2
   13bb0:	andeq	r1, r0, r8, asr #10
   13bb4:	andeq	r1, r0, r4, lsr #14
   13bb8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   13bbc:	andeq	r1, r0, ip, lsr #13
   13bc0:	andeq	r1, r0, ip, lsl r6
   13bc4:	andeq	r1, r0, r4, ror #7
   13bc8:	ldrdeq	r1, [r0], -r8
   13bcc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13bd0:	subs	r4, r0, #0
   13bd4:	beq	13ca4 <__assert_fail@plt+0x297c>
   13bd8:	ldrsb	lr, [r4]
   13bdc:	cmp	lr, #0
   13be0:	beq	13ca4 <__assert_fail@plt+0x297c>
   13be4:	cmp	r1, #0
   13be8:	clz	ip, r2
   13bec:	lsr	ip, ip, #5
   13bf0:	moveq	r0, #1
   13bf4:	movne	r0, ip
   13bf8:	cmp	r3, #0
   13bfc:	moveq	r0, #1
   13c00:	cmp	r0, #0
   13c04:	bne	13ca4 <__assert_fail@plt+0x297c>
   13c08:	mov	r8, r3
   13c0c:	mov	r7, r2
   13c10:	mov	r9, r1
   13c14:	mov	r5, r0
   13c18:	b	13c74 <__assert_fail@plt+0x294c>
   13c1c:	cmp	r3, #0
   13c20:	bne	13c60 <__assert_fail@plt+0x2938>
   13c24:	cmn	r4, #1
   13c28:	add	r6, r4, #1
   13c2c:	beq	13cac <__assert_fail@plt+0x2984>
   13c30:	cmp	r0, r6
   13c34:	bcs	13ca4 <__assert_fail@plt+0x297c>
   13c38:	sub	r1, r6, r0
   13c3c:	blx	r8
   13c40:	cmn	r0, #1
   13c44:	beq	13ca4 <__assert_fail@plt+0x297c>
   13c48:	str	r0, [r9, r5, lsl #2]
   13c4c:	ldrsb	r3, [r6]
   13c50:	add	r5, r5, #1
   13c54:	cmp	r3, #0
   13c58:	beq	13cac <__assert_fail@plt+0x2984>
   13c5c:	mov	r0, #0
   13c60:	cmn	r4, #1
   13c64:	beq	13cac <__assert_fail@plt+0x2984>
   13c68:	ldrsb	lr, [r4, #1]!
   13c6c:	cmp	lr, #0
   13c70:	beq	13cac <__assert_fail@plt+0x2984>
   13c74:	cmp	r7, r5
   13c78:	mov	r6, r4
   13c7c:	bls	13cb4 <__assert_fail@plt+0x298c>
   13c80:	cmp	r0, #0
   13c84:	moveq	r0, r4
   13c88:	cmp	lr, #44	; 0x2c
   13c8c:	ldrsb	r3, [r4, #1]
   13c90:	bne	13c1c <__assert_fail@plt+0x28f4>
   13c94:	cmp	r3, #0
   13c98:	beq	13c24 <__assert_fail@plt+0x28fc>
   13c9c:	cmp	r0, r6
   13ca0:	bcc	13c38 <__assert_fail@plt+0x2910>
   13ca4:	mvn	r0, #0
   13ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cac:	mov	r0, r5
   13cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cb4:	mvn	r0, #1
   13cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cbc:	cmp	r0, #0
   13cc0:	beq	13d2c <__assert_fail@plt+0x2a04>
   13cc4:	push	{r4, lr}
   13cc8:	mov	r4, r3
   13ccc:	cmp	r4, #0
   13cd0:	ldrsb	ip, [r0]
   13cd4:	clz	r3, ip
   13cd8:	lsr	r3, r3, #5
   13cdc:	moveq	r3, #1
   13ce0:	cmp	r3, #0
   13ce4:	bne	13d24 <__assert_fail@plt+0x29fc>
   13ce8:	ldr	lr, [r4]
   13cec:	cmp	lr, r2
   13cf0:	bhi	13d24 <__assert_fail@plt+0x29fc>
   13cf4:	cmp	ip, #43	; 0x2b
   13cf8:	strne	r3, [r4]
   13cfc:	addeq	r0, r0, #1
   13d00:	ldr	r3, [sp, #8]
   13d04:	addeq	r1, r1, lr, lsl #2
   13d08:	subeq	r2, r2, lr
   13d0c:	bl	13bcc <__assert_fail@plt+0x28a4>
   13d10:	cmp	r0, #0
   13d14:	ldrgt	r3, [r4]
   13d18:	addgt	r3, r3, r0
   13d1c:	strgt	r3, [r4]
   13d20:	pop	{r4, pc}
   13d24:	mvn	r0, #0
   13d28:	pop	{r4, pc}
   13d2c:	mvn	r0, #0
   13d30:	bx	lr
   13d34:	cmp	r2, #0
   13d38:	clz	r3, r1
   13d3c:	lsr	r3, r3, #5
   13d40:	moveq	r3, #1
   13d44:	cmp	r0, #0
   13d48:	moveq	r3, #1
   13d4c:	cmp	r3, #0
   13d50:	bne	13e1c <__assert_fail@plt+0x2af4>
   13d54:	push	{r4, r5, r6, r7, r8, lr}
   13d58:	mov	r6, r2
   13d5c:	mov	r2, r3
   13d60:	ldrsb	r3, [r0]
   13d64:	mov	r8, r1
   13d68:	mov	r4, r0
   13d6c:	mov	r7, #1
   13d70:	cmp	r3, #0
   13d74:	beq	13de4 <__assert_fail@plt+0x2abc>
   13d78:	cmp	r2, #0
   13d7c:	moveq	r2, r4
   13d80:	cmp	r3, #44	; 0x2c
   13d84:	mov	r5, r4
   13d88:	ldrsb	r3, [r4, #1]!
   13d8c:	beq	13dec <__assert_fail@plt+0x2ac4>
   13d90:	cmp	r3, #0
   13d94:	bne	13e0c <__assert_fail@plt+0x2ae4>
   13d98:	mov	r5, r4
   13d9c:	cmp	r2, r5
   13da0:	sub	r1, r5, r2
   13da4:	mov	r0, r2
   13da8:	bcs	13e04 <__assert_fail@plt+0x2adc>
   13dac:	blx	r6
   13db0:	mov	r2, r4
   13db4:	cmp	r0, #0
   13db8:	and	r1, r0, #7
   13dbc:	poplt	{r4, r5, r6, r7, r8, pc}
   13dc0:	ldrb	r3, [r8, r0, asr #3]
   13dc4:	orr	r3, r3, r7, lsl r1
   13dc8:	strb	r3, [r8, r0, asr #3]
   13dcc:	ldrsb	r3, [r5]
   13dd0:	cmp	r3, #0
   13dd4:	beq	13de4 <__assert_fail@plt+0x2abc>
   13dd8:	ldrsb	r3, [r4]
   13ddc:	cmp	r3, #0
   13de0:	bne	13d80 <__assert_fail@plt+0x2a58>
   13de4:	mov	r0, #0
   13de8:	pop	{r4, r5, r6, r7, r8, pc}
   13dec:	cmp	r3, #0
   13df0:	moveq	r5, r4
   13df4:	cmp	r2, r5
   13df8:	sub	r1, r5, r2
   13dfc:	mov	r0, r2
   13e00:	bcc	13dac <__assert_fail@plt+0x2a84>
   13e04:	mvn	r0, #0
   13e08:	pop	{r4, r5, r6, r7, r8, pc}
   13e0c:	adds	r4, r5, #1
   13e10:	bne	13d70 <__assert_fail@plt+0x2a48>
   13e14:	mov	r0, #0
   13e18:	pop	{r4, r5, r6, r7, r8, pc}
   13e1c:	mvn	r0, #21
   13e20:	bx	lr
   13e24:	cmp	r2, #0
   13e28:	clz	r3, r1
   13e2c:	lsr	r3, r3, #5
   13e30:	moveq	r3, #1
   13e34:	cmp	r0, #0
   13e38:	moveq	r3, #1
   13e3c:	cmp	r3, #0
   13e40:	bne	13f04 <__assert_fail@plt+0x2bdc>
   13e44:	push	{r4, r5, r6, r7, r8, lr}
   13e48:	mov	r6, r2
   13e4c:	mov	r2, r3
   13e50:	ldrsb	r3, [r0]
   13e54:	mov	r7, r1
   13e58:	mov	r4, r0
   13e5c:	cmp	r3, #0
   13e60:	beq	13ecc <__assert_fail@plt+0x2ba4>
   13e64:	cmp	r2, #0
   13e68:	moveq	r2, r4
   13e6c:	cmp	r3, #44	; 0x2c
   13e70:	mov	r5, r4
   13e74:	ldrsb	r3, [r4, #1]!
   13e78:	beq	13ed4 <__assert_fail@plt+0x2bac>
   13e7c:	cmp	r3, #0
   13e80:	bne	13ef4 <__assert_fail@plt+0x2bcc>
   13e84:	mov	r5, r4
   13e88:	cmp	r2, r5
   13e8c:	sub	r1, r5, r2
   13e90:	mov	r0, r2
   13e94:	bcs	13eec <__assert_fail@plt+0x2bc4>
   13e98:	blx	r6
   13e9c:	mov	r2, r4
   13ea0:	cmp	r0, #0
   13ea4:	poplt	{r4, r5, r6, r7, r8, pc}
   13ea8:	ldr	r3, [r7]
   13eac:	orr	r3, r3, r0
   13eb0:	str	r3, [r7]
   13eb4:	ldrsb	r3, [r5]
   13eb8:	cmp	r3, #0
   13ebc:	beq	13ecc <__assert_fail@plt+0x2ba4>
   13ec0:	ldrsb	r3, [r4]
   13ec4:	cmp	r3, #0
   13ec8:	bne	13e6c <__assert_fail@plt+0x2b44>
   13ecc:	mov	r0, #0
   13ed0:	pop	{r4, r5, r6, r7, r8, pc}
   13ed4:	cmp	r3, #0
   13ed8:	moveq	r5, r4
   13edc:	cmp	r2, r5
   13ee0:	sub	r1, r5, r2
   13ee4:	mov	r0, r2
   13ee8:	bcc	13e98 <__assert_fail@plt+0x2b70>
   13eec:	mvn	r0, #0
   13ef0:	pop	{r4, r5, r6, r7, r8, pc}
   13ef4:	adds	r4, r5, #1
   13ef8:	bne	13e5c <__assert_fail@plt+0x2b34>
   13efc:	mov	r0, #0
   13f00:	pop	{r4, r5, r6, r7, r8, pc}
   13f04:	mvn	r0, #21
   13f08:	bx	lr
   13f0c:	ldr	ip, [pc, #396]	; 140a0 <__assert_fail@plt+0x2d78>
   13f10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f14:	add	ip, pc, ip
   13f18:	ldr	lr, [pc, #388]	; 140a4 <__assert_fail@plt+0x2d7c>
   13f1c:	sub	sp, sp, #8
   13f20:	mov	r9, r3
   13f24:	ldr	r5, [ip, lr]
   13f28:	mov	sl, #0
   13f2c:	subs	r4, r0, #0
   13f30:	ldr	r3, [r5]
   13f34:	mov	r7, r1
   13f38:	str	sl, [sp]
   13f3c:	mov	r1, ip
   13f40:	str	r3, [sp, #4]
   13f44:	beq	13fb8 <__assert_fail@plt+0x2c90>
   13f48:	str	r9, [r7]
   13f4c:	str	r9, [r2]
   13f50:	mov	r6, r2
   13f54:	bl	111c0 <__errno_location@plt>
   13f58:	str	sl, [r0]
   13f5c:	ldrsb	r3, [r4]
   13f60:	mov	r8, r0
   13f64:	cmp	r3, #58	; 0x3a
   13f68:	beq	13fd4 <__assert_fail@plt+0x2cac>
   13f6c:	mov	sl, sp
   13f70:	mov	r1, sl
   13f74:	mov	r2, #10
   13f78:	mov	r0, r4
   13f7c:	bl	1101c <strtol@plt>
   13f80:	str	r0, [r7]
   13f84:	str	r0, [r6]
   13f88:	ldr	r0, [r8]
   13f8c:	cmp	r0, #0
   13f90:	bne	14024 <__assert_fail@plt+0x2cfc>
   13f94:	ldr	r2, [sp]
   13f98:	cmp	r2, #0
   13f9c:	cmpne	r2, r4
   13fa0:	beq	14024 <__assert_fail@plt+0x2cfc>
   13fa4:	ldrsb	r3, [r2]
   13fa8:	cmp	r3, #58	; 0x3a
   13fac:	beq	1402c <__assert_fail@plt+0x2d04>
   13fb0:	cmp	r3, #45	; 0x2d
   13fb4:	beq	1403c <__assert_fail@plt+0x2d14>
   13fb8:	mov	r0, #0
   13fbc:	ldr	r2, [sp, #4]
   13fc0:	ldr	r3, [r5]
   13fc4:	cmp	r2, r3
   13fc8:	bne	1409c <__assert_fail@plt+0x2d74>
   13fcc:	add	sp, sp, #8
   13fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13fd4:	add	r4, r4, #1
   13fd8:	mov	r0, r4
   13fdc:	mov	r2, #10
   13fe0:	mov	r1, sp
   13fe4:	bl	1101c <strtol@plt>
   13fe8:	str	r0, [r6]
   13fec:	ldr	r3, [r8]
   13ff0:	cmp	r3, #0
   13ff4:	bne	14024 <__assert_fail@plt+0x2cfc>
   13ff8:	ldr	r3, [sp]
   13ffc:	cmp	r3, #0
   14000:	beq	14024 <__assert_fail@plt+0x2cfc>
   14004:	ldrsb	r2, [r3]
   14008:	sub	r3, r3, r4
   1400c:	clz	r3, r3
   14010:	cmp	r2, #0
   14014:	lsr	r3, r3, #5
   14018:	movne	r3, #1
   1401c:	cmp	r3, #0
   14020:	beq	13fb8 <__assert_fail@plt+0x2c90>
   14024:	mvn	r0, #0
   14028:	b	13fbc <__assert_fail@plt+0x2c94>
   1402c:	ldrsb	r3, [r2, #1]
   14030:	cmp	r3, #0
   14034:	streq	r9, [r6]
   14038:	beq	13fbc <__assert_fail@plt+0x2c94>
   1403c:	mov	r3, #0
   14040:	add	r4, r2, #1
   14044:	str	r3, [r8]
   14048:	mov	r1, sl
   1404c:	mov	r0, r4
   14050:	mov	r2, #10
   14054:	str	r3, [sp]
   14058:	bl	1101c <strtol@plt>
   1405c:	str	r0, [r6]
   14060:	ldr	r3, [r8]
   14064:	cmp	r3, #0
   14068:	bne	14024 <__assert_fail@plt+0x2cfc>
   1406c:	ldr	r2, [sp]
   14070:	cmp	r2, #0
   14074:	beq	14024 <__assert_fail@plt+0x2cfc>
   14078:	ldrsb	r3, [r2]
   1407c:	sub	r2, r2, r4
   14080:	clz	r2, r2
   14084:	cmp	r3, #0
   14088:	lsr	r2, r2, #5
   1408c:	movne	r2, #1
   14090:	cmp	r2, #0
   14094:	beq	13fb8 <__assert_fail@plt+0x2c90>
   14098:	b	14024 <__assert_fail@plt+0x2cfc>
   1409c:	bl	110a0 <__stack_chk_fail@plt>
   140a0:			; <UNDEFINED> instruction: 0x00011fb8
   140a4:	andeq	r0, r0, r0, lsr #2
   140a8:	ldr	r3, [pc, #244]	; 141a4 <__assert_fail@plt+0x2e7c>
   140ac:	ldr	r2, [pc, #244]	; 141a8 <__assert_fail@plt+0x2e80>
   140b0:	add	r3, pc, r3
   140b4:	push	{r4, r5, r6, r7, r8, r9, lr}
   140b8:	sub	sp, sp, #20
   140bc:	ldr	r9, [r3, r2]
   140c0:	cmp	r0, #0
   140c4:	cmpne	r1, #0
   140c8:	ldr	r3, [r9]
   140cc:	str	r3, [sp, #12]
   140d0:	beq	14198 <__assert_fail@plt+0x2e70>
   140d4:	mov	r4, r1
   140d8:	add	r8, sp, #4
   140dc:	add	r7, sp, #8
   140e0:	b	14120 <__assert_fail@plt+0x2df8>
   140e4:	cmp	r4, r3
   140e8:	bne	14198 <__assert_fail@plt+0x2e70>
   140ec:	mov	r2, r4
   140f0:	mov	r1, r6
   140f4:	mov	r0, r5
   140f8:	bl	112ec <strncmp@plt>
   140fc:	cmp	r0, #0
   14100:	bne	14198 <__assert_fail@plt+0x2e70>
   14104:	adds	r0, r5, r4
   14108:	moveq	r3, #0
   1410c:	movne	r3, #1
   14110:	adds	r4, r6, r4
   14114:	moveq	r3, #0
   14118:	cmp	r3, #0
   1411c:	beq	14198 <__assert_fail@plt+0x2e70>
   14120:	mov	r1, r8
   14124:	bl	12528 <__assert_fail@plt+0x1200>
   14128:	mov	r1, r7
   1412c:	mov	r5, r0
   14130:	mov	r0, r4
   14134:	bl	12528 <__assert_fail@plt+0x1200>
   14138:	ldr	r4, [sp, #4]
   1413c:	ldr	r3, [sp, #8]
   14140:	mov	r6, r0
   14144:	adds	r0, r4, r3
   14148:	beq	1417c <__assert_fail@plt+0x2e54>
   1414c:	cmp	r0, #1
   14150:	bne	140e4 <__assert_fail@plt+0x2dbc>
   14154:	cmp	r5, #0
   14158:	beq	14168 <__assert_fail@plt+0x2e40>
   1415c:	ldrsb	r2, [r5]
   14160:	cmp	r2, #47	; 0x2f
   14164:	beq	14180 <__assert_fail@plt+0x2e58>
   14168:	cmp	r6, #0
   1416c:	beq	140e4 <__assert_fail@plt+0x2dbc>
   14170:	ldrsb	r2, [r6]
   14174:	cmp	r2, #47	; 0x2f
   14178:	bne	140e4 <__assert_fail@plt+0x2dbc>
   1417c:	mov	r0, #1
   14180:	ldr	r2, [sp, #12]
   14184:	ldr	r3, [r9]
   14188:	cmp	r2, r3
   1418c:	bne	141a0 <__assert_fail@plt+0x2e78>
   14190:	add	sp, sp, #20
   14194:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14198:	mov	r0, #0
   1419c:	b	14180 <__assert_fail@plt+0x2e58>
   141a0:	bl	110a0 <__stack_chk_fail@plt>
   141a4:	andeq	r1, r1, ip, lsl lr
   141a8:	andeq	r0, r0, r0, lsr #2
   141ac:	orrs	r3, r0, r1
   141b0:	beq	1422c <__assert_fail@plt+0x2f04>
   141b4:	cmp	r0, #0
   141b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141bc:	mov	r4, r1
   141c0:	mov	r5, r0
   141c4:	beq	14238 <__assert_fail@plt+0x2f10>
   141c8:	cmp	r1, #0
   141cc:	beq	14248 <__assert_fail@plt+0x2f20>
   141d0:	mov	r6, r2
   141d4:	bl	1119c <strlen@plt>
   141d8:	mvn	r3, r0
   141dc:	cmp	r6, r3
   141e0:	mov	r7, r0
   141e4:	movhi	r8, #0
   141e8:	bhi	14224 <__assert_fail@plt+0x2efc>
   141ec:	add	r9, r6, r0
   141f0:	add	r0, r9, #1
   141f4:	bl	11130 <malloc@plt>
   141f8:	subs	r8, r0, #0
   141fc:	beq	14224 <__assert_fail@plt+0x2efc>
   14200:	mov	r1, r5
   14204:	mov	r2, r7
   14208:	bl	11064 <memcpy@plt>
   1420c:	mov	r2, r6
   14210:	mov	r1, r4
   14214:	add	r0, r8, r7
   14218:	bl	11064 <memcpy@plt>
   1421c:	mov	r3, #0
   14220:	strb	r3, [r8, r9]
   14224:	mov	r0, r8
   14228:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1422c:	ldr	r0, [pc, #28]	; 14250 <__assert_fail@plt+0x2f28>
   14230:	add	r0, pc, r0
   14234:	b	11094 <strdup@plt>
   14238:	mov	r0, r4
   1423c:	mov	r1, r2
   14240:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14244:	b	1104c <strndup@plt>
   14248:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1424c:	b	11094 <strdup@plt>
   14250:	andeq	r0, r0, r0, ror r7
   14254:	push	{r4, r5, r6, lr}
   14258:	subs	r4, r1, #0
   1425c:	mov	r5, r0
   14260:	moveq	r2, r4
   14264:	beq	14274 <__assert_fail@plt+0x2f4c>
   14268:	mov	r0, r4
   1426c:	bl	1119c <strlen@plt>
   14270:	mov	r2, r0
   14274:	mov	r1, r4
   14278:	mov	r0, r5
   1427c:	pop	{r4, r5, r6, lr}
   14280:	b	141ac <__assert_fail@plt+0x2e84>
   14284:	push	{r1, r2, r3}
   14288:	ldr	r1, [pc, #132]	; 14314 <__assert_fail@plt+0x2fec>
   1428c:	ldr	r3, [pc, #132]	; 14318 <__assert_fail@plt+0x2ff0>
   14290:	add	r1, pc, r1
   14294:	push	{r4, r5, lr}
   14298:	mov	r5, r0
   1429c:	ldr	r4, [r1, r3]
   142a0:	sub	sp, sp, #16
   142a4:	add	ip, sp, #32
   142a8:	ldr	r0, [r4]
   142ac:	ldr	r2, [sp, #28]
   142b0:	str	r0, [sp, #12]
   142b4:	mov	r3, ip
   142b8:	add	r0, sp, #8
   142bc:	mov	r1, #1
   142c0:	str	ip, [sp, #4]
   142c4:	bl	111d8 <__vasprintf_chk@plt>
   142c8:	subs	r2, r0, #0
   142cc:	movlt	r5, #0
   142d0:	blt	142ec <__assert_fail@plt+0x2fc4>
   142d4:	mov	r0, r5
   142d8:	ldr	r1, [sp, #8]
   142dc:	bl	141ac <__assert_fail@plt+0x2e84>
   142e0:	mov	r5, r0
   142e4:	ldr	r0, [sp, #8]
   142e8:	bl	11034 <free@plt>
   142ec:	ldr	r2, [sp, #12]
   142f0:	ldr	r3, [r4]
   142f4:	mov	r0, r5
   142f8:	cmp	r2, r3
   142fc:	bne	14310 <__assert_fail@plt+0x2fe8>
   14300:	add	sp, sp, #16
   14304:	pop	{r4, r5, lr}
   14308:	add	sp, sp, #12
   1430c:	bx	lr
   14310:	bl	110a0 <__stack_chk_fail@plt>
   14314:	andeq	r1, r1, ip, lsr ip
   14318:	andeq	r0, r0, r0, lsr #2
   1431c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14320:	mov	r6, r0
   14324:	ldr	r0, [pc, #348]	; 14488 <__assert_fail@plt+0x3160>
   14328:	ldr	ip, [pc, #348]	; 1448c <__assert_fail@plt+0x3164>
   1432c:	add	r0, pc, r0
   14330:	ldr	r5, [r6]
   14334:	ldr	r8, [r0, ip]
   14338:	sub	sp, sp, #8
   1433c:	ldrsb	r4, [r5]
   14340:	mov	r9, r2
   14344:	ldr	r2, [r8]
   14348:	cmp	r4, #0
   1434c:	mov	r7, r1
   14350:	str	r2, [sp, #4]
   14354:	mov	r1, r0
   14358:	beq	14408 <__assert_fail@plt+0x30e0>
   1435c:	mov	r0, r5
   14360:	mov	r1, r9
   14364:	mov	sl, r3
   14368:	bl	1131c <strspn@plt>
   1436c:	add	r4, r5, r0
   14370:	ldrsb	r5, [r5, r0]
   14374:	cmp	r5, #0
   14378:	beq	14470 <__assert_fail@plt+0x3148>
   1437c:	cmp	sl, #0
   14380:	beq	14424 <__assert_fail@plt+0x30fc>
   14384:	ldr	r0, [pc, #260]	; 14490 <__assert_fail@plt+0x3168>
   14388:	mov	r1, r5
   1438c:	add	r0, pc, r0
   14390:	bl	111a8 <strchr@plt>
   14394:	cmp	r0, #0
   14398:	beq	14440 <__assert_fail@plt+0x3118>
   1439c:	add	sl, r4, #1
   143a0:	mov	r3, #0
   143a4:	mov	r0, sl
   143a8:	mov	r1, sp
   143ac:	strb	r5, [sp]
   143b0:	strb	r3, [sp, #1]
   143b4:	bl	125c8 <__assert_fail@plt+0x12a0>
   143b8:	add	r3, r4, r0
   143bc:	str	r0, [r7]
   143c0:	ldrsb	r3, [r3, #1]
   143c4:	subs	r5, r5, r3
   143c8:	movne	r5, #1
   143cc:	cmp	r3, #0
   143d0:	moveq	r5, #1
   143d4:	cmp	r5, #0
   143d8:	bne	14470 <__assert_fail@plt+0x3148>
   143dc:	add	r0, r0, #2
   143e0:	add	r5, r4, r0
   143e4:	ldrsb	r1, [r4, r0]
   143e8:	cmp	r1, #0
   143ec:	beq	14400 <__assert_fail@plt+0x30d8>
   143f0:	mov	r0, r9
   143f4:	bl	111a8 <strchr@plt>
   143f8:	cmp	r0, #0
   143fc:	beq	14470 <__assert_fail@plt+0x3148>
   14400:	mov	r4, sl
   14404:	str	r5, [r6]
   14408:	ldr	r2, [sp, #4]
   1440c:	ldr	r3, [r8]
   14410:	mov	r0, r4
   14414:	cmp	r2, r3
   14418:	bne	14484 <__assert_fail@plt+0x315c>
   1441c:	add	sp, sp, #8
   14420:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14424:	mov	r1, r9
   14428:	mov	r0, r4
   1442c:	bl	11028 <strcspn@plt>
   14430:	add	r3, r4, r0
   14434:	str	r0, [r7]
   14438:	str	r3, [r6]
   1443c:	b	14408 <__assert_fail@plt+0x30e0>
   14440:	mov	r1, r9
   14444:	mov	r0, r4
   14448:	bl	125c8 <__assert_fail@plt+0x12a0>
   1444c:	str	r0, [r7]
   14450:	ldrsb	r1, [r4, r0]
   14454:	add	r5, r4, r0
   14458:	cmp	r1, #0
   1445c:	beq	1447c <__assert_fail@plt+0x3154>
   14460:	mov	r0, r9
   14464:	bl	111a8 <strchr@plt>
   14468:	cmp	r0, #0
   1446c:	bne	1447c <__assert_fail@plt+0x3154>
   14470:	str	r4, [r6]
   14474:	mov	r4, #0
   14478:	b	14408 <__assert_fail@plt+0x30e0>
   1447c:	str	r5, [r6]
   14480:	b	14408 <__assert_fail@plt+0x30e0>
   14484:	bl	110a0 <__stack_chk_fail@plt>
   14488:	andeq	r1, r1, r0, lsr #23
   1448c:	andeq	r0, r0, r0, lsr #2
   14490:	andeq	r0, r0, r4, ror #27
   14494:	push	{r4, lr}
   14498:	mov	r4, r0
   1449c:	b	144a8 <__assert_fail@plt+0x3180>
   144a0:	cmp	r0, #10
   144a4:	beq	144c0 <__assert_fail@plt+0x3198>
   144a8:	mov	r0, r4
   144ac:	bl	111f0 <fgetc@plt>
   144b0:	cmn	r0, #1
   144b4:	bne	144a0 <__assert_fail@plt+0x3178>
   144b8:	mov	r0, #1
   144bc:	pop	{r4, pc}
   144c0:	mov	r0, #0
   144c4:	pop	{r4, pc}
   144c8:	ldr	r0, [pc, #204]	; 1459c <__assert_fail@plt+0x3274>
   144cc:	push	{r7, lr}
   144d0:	add	r0, pc, r0
   144d4:	bl	11118 <getenv@plt>
   144d8:	subs	r4, r0, #0
   144dc:	beq	1456c <__assert_fail@plt+0x3244>
   144e0:	mov	r0, r4
   144e4:	bl	11094 <strdup@plt>
   144e8:	cmp	r0, #0
   144ec:	beq	1458c <__assert_fail@plt+0x3264>
   144f0:	bl	111e4 <__xpg_basename@plt>
   144f4:	mov	r7, r0
   144f8:	bl	1119c <strlen@plt>
   144fc:	add	r6, r0, #2
   14500:	mov	r0, r6
   14504:	bl	11130 <malloc@plt>
   14508:	subs	r5, r0, #0
   1450c:	beq	14578 <__assert_fail@plt+0x3250>
   14510:	mov	r0, r5
   14514:	mov	r3, #45	; 0x2d
   14518:	strb	r3, [r0], #1
   1451c:	mov	r1, r7
   14520:	bl	110e8 <strcpy@plt>
   14524:	mov	r1, r5
   14528:	mov	r2, #0
   1452c:	mov	r0, r4
   14530:	bl	11250 <execl@plt>
   14534:	bl	111c0 <__errno_location@plt>
   14538:	ldr	r1, [pc, #96]	; 145a0 <__assert_fail@plt+0x3278>
   1453c:	mov	r2, #5
   14540:	add	r1, pc, r1
   14544:	ldr	r3, [r0]
   14548:	mov	r0, #0
   1454c:	cmp	r3, #2
   14550:	moveq	r5, #127	; 0x7f
   14554:	movne	r5, #126	; 0x7e
   14558:	bl	11088 <dcgettext@plt>
   1455c:	mov	r2, r4
   14560:	mov	r1, r0
   14564:	mov	r0, r5
   14568:	bl	110c4 <err@plt>
   1456c:	ldr	r4, [pc, #48]	; 145a4 <__assert_fail@plt+0x327c>
   14570:	add	r4, pc, r4
   14574:	b	144e0 <__assert_fail@plt+0x31b8>
   14578:	ldr	r1, [pc, #40]	; 145a8 <__assert_fail@plt+0x3280>
   1457c:	mov	r2, r6
   14580:	add	r1, pc, r1
   14584:	mov	r0, #1
   14588:	bl	110c4 <err@plt>
   1458c:	ldr	r1, [pc, #24]	; 145ac <__assert_fail@plt+0x3284>
   14590:	mov	r0, #1
   14594:	add	r1, pc, r1
   14598:	bl	110c4 <err@plt>
   1459c:	andeq	r0, r0, ip, lsr #25
   145a0:	andeq	r0, r0, r0, lsr #22
   145a4:	andeq	r0, r0, r4, lsl #24
   145a8:	andeq	r0, r0, ip, lsl ip
   145ac:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   145b0:	cmp	r3, #0
   145b4:	cmpeq	r2, #0
   145b8:	bne	145d0 <__assert_fail@plt+0x32a8>
   145bc:	cmp	r1, #0
   145c0:	cmpeq	r0, #0
   145c4:	mvnne	r1, #0
   145c8:	mvnne	r0, #0
   145cc:	b	145ec <__assert_fail@plt+0x32c4>
   145d0:	sub	sp, sp, #8
   145d4:	push	{sp, lr}
   145d8:	bl	145fc <__assert_fail@plt+0x32d4>
   145dc:	ldr	lr, [sp, #4]
   145e0:	add	sp, sp, #8
   145e4:	pop	{r2, r3}
   145e8:	bx	lr
   145ec:	push	{r1, lr}
   145f0:	mov	r0, #8
   145f4:	bl	10ff8 <raise@plt>
   145f8:	pop	{r1, pc}
   145fc:	cmp	r1, r3
   14600:	cmpeq	r0, r2
   14604:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14608:	mov	r4, r0
   1460c:	movcc	r0, #0
   14610:	mov	r5, r1
   14614:	ldr	lr, [sp, #36]	; 0x24
   14618:	movcc	r1, r0
   1461c:	bcc	14718 <__assert_fail@plt+0x33f0>
   14620:	cmp	r3, #0
   14624:	clzeq	ip, r2
   14628:	clzne	ip, r3
   1462c:	addeq	ip, ip, #32
   14630:	cmp	r5, #0
   14634:	clzeq	r1, r4
   14638:	addeq	r1, r1, #32
   1463c:	clzne	r1, r5
   14640:	sub	ip, ip, r1
   14644:	sub	sl, ip, #32
   14648:	lsl	r9, r3, ip
   1464c:	rsb	fp, ip, #32
   14650:	orr	r9, r9, r2, lsl sl
   14654:	orr	r9, r9, r2, lsr fp
   14658:	lsl	r8, r2, ip
   1465c:	cmp	r5, r9
   14660:	cmpeq	r4, r8
   14664:	movcc	r0, #0
   14668:	movcc	r1, r0
   1466c:	bcc	14688 <__assert_fail@plt+0x3360>
   14670:	mov	r0, #1
   14674:	subs	r4, r4, r8
   14678:	lsl	r1, r0, sl
   1467c:	orr	r1, r1, r0, lsr fp
   14680:	lsl	r0, r0, ip
   14684:	sbc	r5, r5, r9
   14688:	cmp	ip, #0
   1468c:	beq	14718 <__assert_fail@plt+0x33f0>
   14690:	lsr	r6, r8, #1
   14694:	orr	r6, r6, r9, lsl #31
   14698:	lsr	r7, r9, #1
   1469c:	mov	r2, ip
   146a0:	b	146c4 <__assert_fail@plt+0x339c>
   146a4:	subs	r3, r4, r6
   146a8:	sbc	r8, r5, r7
   146ac:	adds	r3, r3, r3
   146b0:	adc	r8, r8, r8
   146b4:	adds	r4, r3, #1
   146b8:	adc	r5, r8, #0
   146bc:	subs	r2, r2, #1
   146c0:	beq	146e0 <__assert_fail@plt+0x33b8>
   146c4:	cmp	r5, r7
   146c8:	cmpeq	r4, r6
   146cc:	bcs	146a4 <__assert_fail@plt+0x337c>
   146d0:	adds	r4, r4, r4
   146d4:	adc	r5, r5, r5
   146d8:	subs	r2, r2, #1
   146dc:	bne	146c4 <__assert_fail@plt+0x339c>
   146e0:	lsr	r3, r4, ip
   146e4:	orr	r3, r3, r5, lsl fp
   146e8:	lsr	r2, r5, ip
   146ec:	orr	r3, r3, r5, lsr sl
   146f0:	adds	r0, r0, r4
   146f4:	mov	r4, r3
   146f8:	lsl	r3, r2, ip
   146fc:	orr	r3, r3, r4, lsl sl
   14700:	lsl	ip, r4, ip
   14704:	orr	r3, r3, r4, lsr fp
   14708:	adc	r1, r1, r5
   1470c:	subs	r0, r0, ip
   14710:	mov	r5, r2
   14714:	sbc	r1, r1, r3
   14718:	cmp	lr, #0
   1471c:	strdne	r4, [lr]
   14720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14724:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14728:	mov	r7, r0
   1472c:	ldr	r6, [pc, #72]	; 1477c <__assert_fail@plt+0x3454>
   14730:	ldr	r5, [pc, #72]	; 14780 <__assert_fail@plt+0x3458>
   14734:	add	r6, pc, r6
   14738:	add	r5, pc, r5
   1473c:	sub	r6, r6, r5
   14740:	mov	r8, r1
   14744:	mov	r9, r2
   14748:	bl	10fd8 <raise@plt-0x20>
   1474c:	asrs	r6, r6, #2
   14750:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14754:	mov	r4, #0
   14758:	add	r4, r4, #1
   1475c:	ldr	r3, [r5], #4
   14760:	mov	r2, r9
   14764:	mov	r1, r8
   14768:	mov	r0, r7
   1476c:	blx	r3
   14770:	cmp	r6, r4
   14774:	bne	14758 <__assert_fail@plt+0x3430>
   14778:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1477c:	andeq	r1, r1, r8, lsl #13
   14780:	andeq	r1, r1, r0, lsl #13
   14784:	bx	lr
   14788:	ldr	r3, [pc, #12]	; 1479c <__assert_fail@plt+0x3474>
   1478c:	mov	r1, #0
   14790:	add	r3, pc, r3
   14794:	ldr	r2, [r3]
   14798:	b	111cc <__cxa_atexit@plt>
   1479c:	andeq	r1, r1, ip, ror #16

Disassembly of section .fini:

000147a0 <.fini>:
   147a0:	push	{r3, lr}
   147a4:	pop	{r3, pc}
