
raspbian-preinstalled/lsmem:     file format elf32-littlearm


Disassembly of section .init:

000117fc <.init>:
   117fc:	push	{r3, lr}
   11800:	bl	12a3c <__assert_fail@plt+0xd10>
   11804:	pop	{r3, pc}

Disassembly of section .plt:

00011808 <fdopen@plt-0x14>:
   11808:	push	{lr}		; (str lr, [sp, #-4]!)
   1180c:	ldr	lr, [pc, #4]	; 11818 <fdopen@plt-0x4>
   11810:	add	lr, pc, lr
   11814:	ldr	pc, [lr, #8]!
   11818:	andeq	r9, r1, ip, lsl r6

0001181c <fdopen@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #102400	; 0x19000
   11824:	ldr	pc, [ip, #1564]!	; 0x61c

00011828 <scols_column_set_json_type@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #102400	; 0x19000
   11830:	ldr	pc, [ip, #1556]!	; 0x614

00011834 <calloc@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #102400	; 0x19000
   1183c:	ldr	pc, [ip, #1548]!	; 0x60c

00011840 <raise@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #102400	; 0x19000
   11848:	ldr	pc, [ip, #1540]!	; 0x604

0001184c <scols_line_refer_data@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #102400	; 0x19000
   11854:	ldr	pc, [ip, #1532]!	; 0x5fc

00011858 <strcmp@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #102400	; 0x19000
   11860:	ldr	pc, [ip, #1524]!	; 0x5f4

00011864 <rewinddir@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #102400	; 0x19000
   1186c:	ldr	pc, [ip, #1516]!	; 0x5ec

00011870 <strtol@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #102400	; 0x19000
   11878:	ldr	pc, [ip, #1508]!	; 0x5e4

0001187c <strcspn@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #102400	; 0x19000
   11884:	ldr	pc, [ip, #1500]!	; 0x5dc

00011888 <scols_table_set_name@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #102400	; 0x19000
   11890:	ldr	pc, [ip, #1492]!	; 0x5d4

00011894 <scols_table_enable_noheadings@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #102400	; 0x19000
   1189c:	ldr	pc, [ip, #1484]!	; 0x5cc

000118a0 <read@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #102400	; 0x19000
   118a8:	ldr	pc, [ip, #1476]!	; 0x5c4

000118ac <scols_table_new_column@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #102400	; 0x19000
   118b4:	ldr	pc, [ip, #1468]!	; 0x5bc

000118b8 <getuid@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #102400	; 0x19000
   118c0:	ldr	pc, [ip, #1460]!	; 0x5b4

000118c4 <free@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #102400	; 0x19000
   118cc:	ldr	pc, [ip, #1452]!	; 0x5ac

000118d0 <fgets@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #102400	; 0x19000
   118d8:	ldr	pc, [ip, #1444]!	; 0x5a4

000118dc <nanosleep@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #102400	; 0x19000
   118e4:	ldr	pc, [ip, #1436]!	; 0x59c

000118e8 <scols_table_enable_raw@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #102400	; 0x19000
   118f0:	ldr	pc, [ip, #1428]!	; 0x594

000118f4 <faccessat@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #102400	; 0x19000
   118fc:	ldr	pc, [ip, #1420]!	; 0x58c

00011900 <ferror@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #102400	; 0x19000
   11908:	ldr	pc, [ip, #1412]!	; 0x584

0001190c <strndup@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #102400	; 0x19000
   11914:	ldr	pc, [ip, #1404]!	; 0x57c

00011918 <__openat64_2@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #102400	; 0x19000
   11920:	ldr	pc, [ip, #1396]!	; 0x574

00011924 <_exit@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #102400	; 0x19000
   1192c:	ldr	pc, [ip, #1388]!	; 0x56c

00011930 <__vsnprintf_chk@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #102400	; 0x19000
   11938:	ldr	pc, [ip, #1380]!	; 0x564

0001193c <memcpy@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #102400	; 0x19000
   11944:	ldr	pc, [ip, #1372]!	; 0x55c

00011948 <__strtoull_internal@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #102400	; 0x19000
   11950:	ldr	pc, [ip, #1364]!	; 0x554

00011954 <versionsort64@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #102400	; 0x19000
   1195c:	ldr	pc, [ip, #1356]!	; 0x54c

00011960 <dcgettext@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #102400	; 0x19000
   11968:	ldr	pc, [ip, #1348]!	; 0x544

0001196c <strdup@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #102400	; 0x19000
   11974:	ldr	pc, [ip, #1340]!	; 0x53c

00011978 <__stack_chk_fail@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #102400	; 0x19000
   11980:	ldr	pc, [ip, #1332]!	; 0x534

00011984 <realloc@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #102400	; 0x19000
   1198c:	ldr	pc, [ip, #1324]!	; 0x52c

00011990 <dup@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #102400	; 0x19000
   11998:	ldr	pc, [ip, #1316]!	; 0x524

0001199c <textdomain@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #102400	; 0x19000
   119a4:	ldr	pc, [ip, #1308]!	; 0x51c

000119a8 <strcasecmp@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #102400	; 0x19000
   119b0:	ldr	pc, [ip, #1300]!	; 0x514

000119b4 <err@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #102400	; 0x19000
   119bc:	ldr	pc, [ip, #1292]!	; 0x50c

000119c0 <geteuid@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #102400	; 0x19000
   119c8:	ldr	pc, [ip, #1284]!	; 0x504

000119cc <vfscanf@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #102400	; 0x19000
   119d4:	ldr	pc, [ip, #1276]!	; 0x4fc

000119d8 <readlink@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #102400	; 0x19000
   119e0:	ldr	pc, [ip, #1268]!	; 0x4f4

000119e4 <getegid@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #102400	; 0x19000
   119ec:	ldr	pc, [ip, #1260]!	; 0x4ec

000119f0 <__memcpy_chk@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #102400	; 0x19000
   119f8:	ldr	pc, [ip, #1252]!	; 0x4e4

000119fc <mkostemp64@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #102400	; 0x19000
   11a04:	ldr	pc, [ip, #1244]!	; 0x4dc

00011a08 <scols_new_table@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #102400	; 0x19000
   11a10:	ldr	pc, [ip, #1236]!	; 0x4d4

00011a14 <scols_table_enable_export@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #102400	; 0x19000
   11a1c:	ldr	pc, [ip, #1228]!	; 0x4cc

00011a20 <__fpending@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #102400	; 0x19000
   11a28:	ldr	pc, [ip, #1220]!	; 0x4c4

00011a2c <open64@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #102400	; 0x19000
   11a34:	ldr	pc, [ip, #1212]!	; 0x4bc

00011a38 <__asprintf_chk@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #102400	; 0x19000
   11a40:	ldr	pc, [ip, #1204]!	; 0x4b4

00011a44 <getenv@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #102400	; 0x19000
   11a4c:	ldr	pc, [ip, #1196]!	; 0x4ac

00011a50 <malloc@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #102400	; 0x19000
   11a58:	ldr	pc, [ip, #1188]!	; 0x4a4

00011a5c <__libc_start_main@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #102400	; 0x19000
   11a64:	ldr	pc, [ip, #1180]!	; 0x49c

00011a68 <readlinkat@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #102400	; 0x19000
   11a70:	ldr	pc, [ip, #1172]!	; 0x494

00011a74 <scols_table_new_line@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #102400	; 0x19000
   11a7c:	ldr	pc, [ip, #1164]!	; 0x48c

00011a80 <scols_unref_table@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #102400	; 0x19000
   11a88:	ldr	pc, [ip, #1156]!	; 0x484

00011a8c <__vfprintf_chk@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #102400	; 0x19000
   11a94:	ldr	pc, [ip, #1148]!	; 0x47c

00011a98 <getdtablesize@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #102400	; 0x19000
   11aa0:	ldr	pc, [ip, #1140]!	; 0x474

00011aa4 <__ctype_tolower_loc@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #102400	; 0x19000
   11aac:	ldr	pc, [ip, #1132]!	; 0x46c

00011ab0 <__gmon_start__@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #102400	; 0x19000
   11ab8:	ldr	pc, [ip, #1124]!	; 0x464

00011abc <getopt_long@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #102400	; 0x19000
   11ac4:	ldr	pc, [ip, #1116]!	; 0x45c

00011ac8 <__ctype_b_loc@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #102400	; 0x19000
   11ad0:	ldr	pc, [ip, #1108]!	; 0x454

00011ad4 <getpid@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #102400	; 0x19000
   11adc:	ldr	pc, [ip, #1100]!	; 0x44c

00011ae0 <exit@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #102400	; 0x19000
   11ae8:	ldr	pc, [ip, #1092]!	; 0x444

00011aec <syscall@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #102400	; 0x19000
   11af4:	ldr	pc, [ip, #1084]!	; 0x43c

00011af8 <strtoul@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #102400	; 0x19000
   11b00:	ldr	pc, [ip, #1076]!	; 0x434

00011b04 <strlen@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #102400	; 0x19000
   11b0c:	ldr	pc, [ip, #1068]!	; 0x42c

00011b10 <strchr@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #102400	; 0x19000
   11b18:	ldr	pc, [ip, #1060]!	; 0x424

00011b1c <warnx@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #102400	; 0x19000
   11b24:	ldr	pc, [ip, #1052]!	; 0x41c

00011b28 <__open64_2@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #102400	; 0x19000
   11b30:	ldr	pc, [ip, #1044]!	; 0x414

00011b34 <__errno_location@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #102400	; 0x19000
   11b3c:	ldr	pc, [ip, #1036]!	; 0x40c

00011b40 <strncasecmp@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #102400	; 0x19000
   11b48:	ldr	pc, [ip, #1028]!	; 0x404

00011b4c <__cxa_atexit@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #102400	; 0x19000
   11b54:	ldr	pc, [ip, #1020]!	; 0x3fc

00011b58 <__vasprintf_chk@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #102400	; 0x19000
   11b60:	ldr	pc, [ip, #1012]!	; 0x3f4

00011b64 <mkdir@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #102400	; 0x19000
   11b6c:	ldr	pc, [ip, #1004]!	; 0x3ec

00011b70 <getgid@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #102400	; 0x19000
   11b78:	ldr	pc, [ip, #996]!	; 0x3e4

00011b7c <__sched_cpufree@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #102400	; 0x19000
   11b84:	ldr	pc, [ip, #988]!	; 0x3dc

00011b88 <memset@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #102400	; 0x19000
   11b90:	ldr	pc, [ip, #980]!	; 0x3d4

00011b94 <strncpy@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #102400	; 0x19000
   11b9c:	ldr	pc, [ip, #972]!	; 0x3cc

00011ba0 <fgetc@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #102400	; 0x19000
   11ba8:	ldr	pc, [ip, #964]!	; 0x3c4

00011bac <__printf_chk@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #102400	; 0x19000
   11bb4:	ldr	pc, [ip, #956]!	; 0x3bc

00011bb8 <strtod@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #102400	; 0x19000
   11bc0:	ldr	pc, [ip, #948]!	; 0x3b4

00011bc4 <write@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #102400	; 0x19000
   11bcc:	ldr	pc, [ip, #940]!	; 0x3ac

00011bd0 <__sched_cpualloc@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #102400	; 0x19000
   11bd8:	ldr	pc, [ip, #932]!	; 0x3a4

00011bdc <scols_table_enable_json@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #102400	; 0x19000
   11be4:	ldr	pc, [ip, #924]!	; 0x39c

00011be8 <__fprintf_chk@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #102400	; 0x19000
   11bf0:	ldr	pc, [ip, #916]!	; 0x394

00011bf4 <fclose@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #102400	; 0x19000
   11bfc:	ldr	pc, [ip, #908]!	; 0x38c

00011c00 <strtok@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #102400	; 0x19000
   11c08:	ldr	pc, [ip, #900]!	; 0x384

00011c0c <fcntl64@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #102400	; 0x19000
   11c14:	ldr	pc, [ip, #892]!	; 0x37c

00011c18 <setlocale@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #102400	; 0x19000
   11c20:	ldr	pc, [ip, #884]!	; 0x374

00011c24 <errx@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #102400	; 0x19000
   11c2c:	ldr	pc, [ip, #876]!	; 0x36c

00011c30 <strrchr@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #102400	; 0x19000
   11c38:	ldr	pc, [ip, #868]!	; 0x364

00011c3c <warn@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #102400	; 0x19000
   11c44:	ldr	pc, [ip, #860]!	; 0x35c

00011c48 <scols_print_table@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #102400	; 0x19000
   11c50:	ldr	pc, [ip, #852]!	; 0x354

00011c54 <fputc@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #102400	; 0x19000
   11c5c:	ldr	pc, [ip, #844]!	; 0x34c

00011c60 <sscanf@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #102400	; 0x19000
   11c68:	ldr	pc, [ip, #836]!	; 0x344

00011c6c <localeconv@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #102400	; 0x19000
   11c74:	ldr	pc, [ip, #828]!	; 0x33c

00011c78 <readdir64@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #102400	; 0x19000
   11c80:	ldr	pc, [ip, #820]!	; 0x334

00011c84 <fdopendir@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #102400	; 0x19000
   11c8c:	ldr	pc, [ip, #812]!	; 0x32c

00011c90 <__strtoll_internal@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #102400	; 0x19000
   11c98:	ldr	pc, [ip, #804]!	; 0x324

00011c9c <fopen64@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #102400	; 0x19000
   11ca4:	ldr	pc, [ip, #796]!	; 0x31c

00011ca8 <bindtextdomain@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #102400	; 0x19000
   11cb0:	ldr	pc, [ip, #788]!	; 0x314

00011cb4 <umask@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #102400	; 0x19000
   11cbc:	ldr	pc, [ip, #780]!	; 0x30c

00011cc0 <scandir64@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #102400	; 0x19000
   11cc8:	ldr	pc, [ip, #772]!	; 0x304

00011ccc <fputs@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #102400	; 0x19000
   11cd4:	ldr	pc, [ip, #764]!	; 0x2fc

00011cd8 <strncmp@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #102400	; 0x19000
   11ce0:	ldr	pc, [ip, #756]!	; 0x2f4

00011ce4 <abort@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #102400	; 0x19000
   11cec:	ldr	pc, [ip, #748]!	; 0x2ec

00011cf0 <close@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #102400	; 0x19000
   11cf8:	ldr	pc, [ip, #740]!	; 0x2e4

00011cfc <closedir@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #102400	; 0x19000
   11d04:	ldr	pc, [ip, #732]!	; 0x2dc

00011d08 <__snprintf_chk@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #102400	; 0x19000
   11d10:	ldr	pc, [ip, #724]!	; 0x2d4

00011d14 <scols_init_debug@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #102400	; 0x19000
   11d1c:	ldr	pc, [ip, #716]!	; 0x2cc

00011d20 <strspn@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #102400	; 0x19000
   11d28:	ldr	pc, [ip, #708]!	; 0x2c4

00011d2c <__assert_fail@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #102400	; 0x19000
   11d34:	ldr	pc, [ip, #700]!	; 0x2bc

Disassembly of section .text:

00011d38 <.text>:
   11d38:	ldr	r3, [pc, #2988]	; 128ec <__assert_fail@plt+0xbc0>
   11d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d40:	sub	sp, sp, #124	; 0x7c
   11d44:	ldr	r3, [r3]
   11d48:	mov	r2, #56	; 0x38
   11d4c:	mov	r5, r0
   11d50:	mov	r8, r1
   11d54:	add	r0, sp, #16
   11d58:	mov	r1, #0
   11d5c:	mov	r9, r1
   11d60:	str	r3, [sp, #116]	; 0x74
   11d64:	bl	11b88 <memset@plt>
   11d68:	mov	r3, #3
   11d6c:	ldr	r1, [pc, #2940]	; 128f0 <__assert_fail@plt+0xbc4>
   11d70:	mov	r0, #6
   11d74:	strb	r3, [sp, #69]	; 0x45
   11d78:	str	r9, [sp, #80]	; 0x50
   11d7c:	str	r9, [sp, #76]	; 0x4c
   11d80:	str	r9, [sp, #84]	; 0x54
   11d84:	bl	11c18 <setlocale@plt>
   11d88:	ldr	r1, [pc, #2916]	; 128f4 <__assert_fail@plt+0xbc8>
   11d8c:	ldr	r0, [pc, #2916]	; 128f8 <__assert_fail@plt+0xbcc>
   11d90:	bl	11ca8 <bindtextdomain@plt>
   11d94:	ldr	r0, [pc, #2908]	; 128f8 <__assert_fail@plt+0xbcc>
   11d98:	bl	1199c <textdomain@plt>
   11d9c:	ldr	r0, [pc, #2904]	; 128fc <__assert_fail@plt+0xbd0>
   11da0:	str	r9, [sp, #12]
   11da4:	str	r9, [sp, #8]
   11da8:	bl	19060 <__assert_fail@plt+0x7334>
   11dac:	ldr	fp, [pc, #2892]	; 12900 <__assert_fail@plt+0xbd4>
   11db0:	ldr	r6, [pc, #2892]	; 12904 <__assert_fail@plt+0xbd8>
   11db4:	ldr	sl, [pc, #2892]	; 12908 <__assert_fail@plt+0xbdc>
   11db8:	add	r7, fp, #216	; 0xd8
   11dbc:	mov	r4, #0
   11dc0:	str	r4, [sp]
   11dc4:	mov	r3, r7
   11dc8:	mov	r2, r6
   11dcc:	mov	r1, r8
   11dd0:	mov	r0, r5
   11dd4:	bl	11abc <getopt_long@plt>
   11dd8:	cmn	r0, #1
   11ddc:	beq	120fc <__assert_fail@plt+0x3d0>
   11de0:	cmp	r0, #73	; 0x49
   11de4:	ble	11e68 <__assert_fail@plt+0x13c>
   11de8:	ldr	r4, [pc, #2844]	; 1290c <__assert_fail@plt+0xbe0>
   11dec:	add	r2, sp, #76	; 0x4c
   11df0:	mov	r3, #74	; 0x4a
   11df4:	cmp	r3, r0
   11df8:	bgt	11e44 <__assert_fail@plt+0x118>
   11dfc:	beq	11e2c <__assert_fail@plt+0x100>
   11e00:	mov	r1, r4
   11e04:	ldr	r3, [r1, #4]!
   11e08:	cmp	r0, r3
   11e0c:	movlt	ip, #0
   11e10:	movge	ip, #1
   11e14:	cmp	r3, #0
   11e18:	moveq	ip, #0
   11e1c:	cmp	ip, #0
   11e20:	beq	11e44 <__assert_fail@plt+0x118>
   11e24:	cmp	r0, r3
   11e28:	bne	11e04 <__assert_fail@plt+0xd8>
   11e2c:	ldr	r3, [r2]
   11e30:	cmp	r3, #0
   11e34:	streq	r0, [r2]
   11e38:	beq	11e44 <__assert_fail@plt+0x118>
   11e3c:	cmp	r0, r3
   11e40:	bne	12718 <__assert_fail@plt+0x9ec>
   11e44:	ldr	r3, [r4, #64]!	; 0x40
   11e48:	add	r2, r2, #4
   11e4c:	cmp	r0, r3
   11e50:	movlt	r1, #0
   11e54:	movge	r1, #1
   11e58:	cmp	r3, #0
   11e5c:	moveq	r1, #0
   11e60:	cmp	r1, #0
   11e64:	bne	11df4 <__assert_fail@plt+0xc8>
   11e68:	sub	r0, r0, #74	; 0x4a
   11e6c:	cmp	r0, #55	; 0x37
   11e70:	ldrls	pc, [pc, r0, lsl #2]
   11e74:	b	126c0 <__assert_fail@plt+0x994>
   11e78:	andeq	r2, r1, r0, lsr #1
   11e7c:	andeq	r2, r1, r0, asr #13
   11e80:	andeq	r2, r1, r0, asr #13
   11e84:	andeq	r2, r1, r0, asr #13
   11e88:	andeq	r2, r1, r0, asr #13
   11e8c:	andeq	r2, r1, r0, asr #13
   11e90:	andeq	r2, r1, ip, lsl #1
   11e94:	andeq	r2, r1, r0, asr #13
   11e98:	andeq	r2, r1, r0, asr #13
   11e9c:	andeq	r2, r1, ip, ror r0
   11ea0:	andeq	r2, r1, r0, asr #13
   11ea4:	andeq	r2, r1, r0, asr #13
   11ea8:	andeq	r2, r1, r4, lsr r0
   11eac:	andeq	r2, r1, r0, asr #13
   11eb0:	andeq	r2, r1, r0, asr #13
   11eb4:	andeq	r2, r1, r0, asr #13
   11eb8:	andeq	r2, r1, r0, asr #13
   11ebc:	andeq	r2, r1, r0, asr #13
   11ec0:	andeq	r2, r1, r0, asr #13
   11ec4:	andeq	r2, r1, r0, asr #13
   11ec8:	andeq	r2, r1, r0, asr #13
   11ecc:	andeq	r2, r1, r0, asr #13
   11ed0:	andeq	r2, r1, r0, asr #13
   11ed4:	andeq	r2, r1, r4, lsr #32
   11ed8:	andeq	r2, r1, r4, lsl r0
   11edc:	andeq	r2, r1, r0, asr #13
   11ee0:	andeq	r2, r1, r0, asr #13
   11ee4:	andeq	r2, r1, r0, asr #13
   11ee8:	andeq	r2, r1, r0, asr #13
   11eec:	andeq	r2, r1, r0, asr #13
   11ef0:	andeq	r2, r1, ip, asr #8
   11ef4:	andeq	r2, r1, r0, asr #13
   11ef8:	andeq	r2, r1, r0, asr #13
   11efc:	andeq	r2, r1, r0, asr #13
   11f00:	andeq	r2, r1, r0, asr #13
   11f04:	andeq	r2, r1, r0, asr #13
   11f08:	andeq	r2, r1, r4
   11f0c:	strdeq	r1, [r1], -r4
   11f10:	andeq	r2, r1, r0, asr #13
   11f14:	andeq	r2, r1, r0, asr #13
   11f18:	ldrdeq	r1, [r1], -ip
   11f1c:	ldrdeq	r1, [r1], -r0
   11f20:	andeq	r2, r1, r0, asr #13
   11f24:	andeq	r2, r1, r0, asr #13
   11f28:	andeq	r2, r1, r0, asr #13
   11f2c:	andeq	r2, r1, r0, asr #13
   11f30:	andeq	r2, r1, r0, asr #13
   11f34:	andeq	r2, r1, r0, asr #13
   11f38:	andeq	r2, r1, r0, asr #13
   11f3c:	andeq	r2, r1, r0, asr #13
   11f40:	andeq	r2, r1, r0, asr #13
   11f44:	andeq	r2, r1, r0, asr #13
   11f48:	andeq	r2, r1, r0, asr #13
   11f4c:	andeq	r2, r1, r0, asr #13
   11f50:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11f54:	andeq	r1, r1, r8, asr pc
   11f58:	mov	r2, #0
   11f5c:	mov	r3, #1
   11f60:	str	r2, [sl, #4]
   11f64:	str	r3, [sl, #8]
   11f68:	mov	r2, #2
   11f6c:	mov	r3, #3
   11f70:	str	r2, [sl, #12]
   11f74:	str	r3, [sl, #16]
   11f78:	mov	r2, #4
   11f7c:	mov	r3, #5
   11f80:	str	r2, [sl, #20]
   11f84:	str	r3, [sl, #24]
   11f88:	mov	r2, #6
   11f8c:	mov	r3, #7
   11f90:	str	r2, [sl, #28]
   11f94:	str	r3, [sl]
   11f98:	b	11dbc <__assert_fail@plt+0x90>
   11f9c:	ldr	r3, [pc, #2412]	; 12910 <__assert_fail@plt+0xbe4>
   11fa0:	ldr	r4, [r3]
   11fa4:	cmp	r4, #0
   11fa8:	beq	120ec <__assert_fail@plt+0x3c0>
   11fac:	ldr	r1, [pc, #2400]	; 12914 <__assert_fail@plt+0xbe8>
   11fb0:	mov	r0, r4
   11fb4:	bl	11858 <strcmp@plt>
   11fb8:	cmp	r0, #0
   11fbc:	bne	120b4 <__assert_fail@plt+0x388>
   11fc0:	ldrb	r3, [sp, #69]	; 0x45
   11fc4:	bic	r3, r3, #1
   11fc8:	strb	r3, [sp, #69]	; 0x45
   11fcc:	b	11dbc <__assert_fail@plt+0x90>
   11fd0:	ldr	r3, [pc, #2360]	; 12910 <__assert_fail@plt+0xbe4>
   11fd4:	ldr	r9, [r3]
   11fd8:	b	11dbc <__assert_fail@plt+0x90>
   11fdc:	ldrh	r3, [sp, #68]	; 0x44
   11fe0:	ldr	r2, [pc, #2352]	; 12918 <__assert_fail@plt+0xbec>
   11fe4:	and	r3, r3, r2
   11fe8:	orr	r3, r3, #2
   11fec:	strh	r3, [sp, #68]	; 0x44
   11ff0:	b	11dbc <__assert_fail@plt+0x90>
   11ff4:	ldr	r3, [pc, #2324]	; 12910 <__assert_fail@plt+0xbe4>
   11ff8:	ldr	r3, [r3]
   11ffc:	str	r3, [sp, #8]
   12000:	b	11dbc <__assert_fail@plt+0x90>
   12004:	ldrb	r3, [sp, #68]	; 0x44
   12008:	orr	r3, r3, #16
   1200c:	strb	r3, [sp, #68]	; 0x44
   12010:	b	11dbc <__assert_fail@plt+0x90>
   12014:	ldrb	r3, [sp, #68]	; 0x44
   12018:	orr	r3, r3, #128	; 0x80
   1201c:	strb	r3, [sp, #68]	; 0x44
   12020:	b	11dbc <__assert_fail@plt+0x90>
   12024:	ldrb	r3, [sp, #68]	; 0x44
   12028:	orr	r3, r3, #64	; 0x40
   1202c:	strb	r3, [sp, #68]	; 0x44
   12030:	b	11dbc <__assert_fail@plt+0x90>
   12034:	mov	r2, #5
   12038:	ldr	r1, [pc, #2268]	; 1291c <__assert_fail@plt+0xbf0>
   1203c:	mov	r0, #0
   12040:	bl	11960 <dcgettext@plt>
   12044:	ldr	r2, [pc, #2260]	; 12920 <__assert_fail@plt+0xbf4>
   12048:	ldr	r3, [pc, #2260]	; 12924 <__assert_fail@plt+0xbf8>
   1204c:	ldr	r2, [r2]
   12050:	mov	r1, r0
   12054:	mov	r0, #1
   12058:	bl	11bac <__printf_chk@plt>
   1205c:	mov	r0, #0
   12060:	ldr	r3, [pc, #2180]	; 128ec <__assert_fail@plt+0xbc0>
   12064:	ldr	r2, [sp, #116]	; 0x74
   12068:	ldr	r3, [r3]
   1206c:	cmp	r2, r3
   12070:	bne	12844 <__assert_fail@plt+0xb18>
   12074:	add	sp, sp, #124	; 0x7c
   12078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1207c:	ldr	r3, [pc, #2188]	; 12910 <__assert_fail@plt+0xbe4>
   12080:	ldr	r3, [r3]
   12084:	str	r3, [sp, #12]
   12088:	b	11dbc <__assert_fail@plt+0x90>
   1208c:	ldrh	r3, [sp, #68]	; 0x44
   12090:	bic	r3, r3, #260	; 0x104
   12094:	orr	r3, r3, #4
   12098:	strh	r3, [sp, #68]	; 0x44
   1209c:	b	11dbc <__assert_fail@plt+0x90>
   120a0:	ldrh	r3, [sp, #68]	; 0x44
   120a4:	bic	r3, r3, #264	; 0x108
   120a8:	orr	r3, r3, #8
   120ac:	strh	r3, [sp, #68]	; 0x44
   120b0:	b	11dbc <__assert_fail@plt+0x90>
   120b4:	ldr	r1, [pc, #2156]	; 12928 <__assert_fail@plt+0xbfc>
   120b8:	mov	r0, r4
   120bc:	bl	11858 <strcmp@plt>
   120c0:	cmp	r0, #0
   120c4:	beq	120ec <__assert_fail@plt+0x3c0>
   120c8:	mov	r0, r4
   120cc:	ldr	r1, [pc, #2136]	; 1292c <__assert_fail@plt+0xc00>
   120d0:	bl	11858 <strcmp@plt>
   120d4:	cmp	r0, #0
   120d8:	bne	128d0 <__assert_fail@plt+0xba4>
   120dc:	ldrb	r3, [sp, #69]	; 0x45
   120e0:	orr	r3, r3, #1
   120e4:	strb	r3, [sp, #69]	; 0x45
   120e8:	b	11dbc <__assert_fail@plt+0x90>
   120ec:	ldrb	r3, [sp, #69]	; 0x45
   120f0:	bic	r3, r3, #2
   120f4:	strb	r3, [sp, #69]	; 0x45
   120f8:	b	11dbc <__assert_fail@plt+0x90>
   120fc:	ldr	r3, [pc, #2092]	; 12930 <__assert_fail@plt+0xc04>
   12100:	ldr	r3, [r3]
   12104:	cmp	r3, r5
   12108:	bne	12848 <__assert_fail@plt+0xb1c>
   1210c:	ldrb	r0, [sp, #69]	; 0x45
   12110:	and	r3, r0, #1
   12114:	lsl	r0, r0, #30
   12118:	adds	r0, r3, r0, lsr #31
   1211c:	beq	1289c <__assert_fail@plt+0xb70>
   12120:	bl	15c44 <__assert_fail@plt+0x3f18>
   12124:	ldr	r0, [pc, #2056]	; 12934 <__assert_fail@plt+0xc08>
   12128:	bl	15ed8 <__assert_fail@plt+0x41ac>
   1212c:	cmp	r0, #0
   12130:	str	r0, [sp, #16]
   12134:	beq	12828 <__assert_fail@plt+0xafc>
   12138:	cmp	r9, #0
   1213c:	beq	12150 <__assert_fail@plt+0x424>
   12140:	mov	r1, r9
   12144:	bl	1601c <__assert_fail@plt+0x42f0>
   12148:	cmp	r0, #0
   1214c:	bne	128b4 <__assert_fail@plt+0xb88>
   12150:	ldrb	r3, [sp, #69]	; 0x45
   12154:	and	r3, r3, #3
   12158:	cmp	r3, #1
   1215c:	beq	12424 <__assert_fail@plt+0x6f8>
   12160:	ldr	r4, [pc, #1952]	; 12908 <__assert_fail@plt+0xbdc>
   12164:	ldr	r3, [r4]
   12168:	cmp	r3, #0
   1216c:	bne	1219c <__assert_fail@plt+0x470>
   12170:	mov	r2, #2
   12174:	str	r3, [r4, #4]
   12178:	mov	r3, #3
   1217c:	mov	r1, #1
   12180:	str	r2, [r4, #12]
   12184:	str	r3, [r4, #16]
   12188:	mov	r2, #5
   1218c:	mov	r3, #4
   12190:	str	r1, [r4, #8]
   12194:	str	r2, [r4]
   12198:	str	r3, [r4, #20]
   1219c:	ldr	r3, [sp, #8]
   121a0:	cmp	r3, #0
   121a4:	beq	121cc <__assert_fail@plt+0x4a0>
   121a8:	ldr	r2, [pc, #1928]	; 12938 <__assert_fail@plt+0xc0c>
   121ac:	ldr	r3, [pc, #1876]	; 12908 <__assert_fail@plt+0xbdc>
   121b0:	str	r2, [sp]
   121b4:	ldr	r0, [sp, #8]
   121b8:	add	r1, r3, #4
   121bc:	mov	r2, #14
   121c0:	bl	151e4 <__assert_fail@plt+0x34b8>
   121c4:	cmp	r0, #0
   121c8:	blt	12444 <__assert_fail@plt+0x718>
   121cc:	mov	r0, #0
   121d0:	bl	11d14 <scols_init_debug@plt>
   121d4:	bl	11a08 <scols_new_table@plt>
   121d8:	cmp	r0, #0
   121dc:	str	r0, [sp, #64]	; 0x40
   121e0:	beq	12884 <__assert_fail@plt+0xb58>
   121e4:	ldrb	r1, [sp, #68]	; 0x44
   121e8:	lsr	r1, r1, #1
   121ec:	and	r1, r1, #1
   121f0:	bl	118e8 <scols_table_enable_raw@plt>
   121f4:	ldrb	r1, [sp, #68]	; 0x44
   121f8:	ldr	r0, [sp, #64]	; 0x40
   121fc:	lsr	r1, r1, #2
   12200:	and	r1, r1, #1
   12204:	bl	11a14 <scols_table_enable_export@plt>
   12208:	ldrb	r1, [sp, #68]	; 0x44
   1220c:	ldr	r0, [sp, #64]	; 0x40
   12210:	lsr	r1, r1, #3
   12214:	and	r1, r1, #1
   12218:	bl	11bdc <scols_table_enable_json@plt>
   1221c:	ldrb	r1, [sp, #68]	; 0x44
   12220:	ldr	r0, [sp, #64]	; 0x40
   12224:	lsr	r1, r1, #4
   12228:	and	r1, r1, #1
   1222c:	bl	11894 <scols_table_enable_noheadings@plt>
   12230:	ldrb	r3, [sp, #68]	; 0x44
   12234:	tst	r3, #8
   12238:	bne	126f8 <__assert_fail@plt+0x9cc>
   1223c:	ldr	r2, [r4]
   12240:	cmp	r2, #0
   12244:	beq	12318 <__assert_fail@plt+0x5ec>
   12248:	ldr	r3, [r4, #4]
   1224c:	cmp	r3, #6
   12250:	movle	r7, #0
   12254:	ldrle	r6, [pc, #1760]	; 1293c <__assert_fail@plt+0xc10>
   12258:	movle	r5, r7
   1225c:	ble	12288 <__assert_fail@plt+0x55c>
   12260:	b	12814 <__assert_fail@plt+0xae8>
   12264:	add	r7, r7, #1
   12268:	cmp	r2, r7
   1226c:	bls	12318 <__assert_fail@plt+0x5ec>
   12270:	cmp	r7, #0
   12274:	mov	r5, r7
   12278:	blt	127e8 <__assert_fail@plt+0xabc>
   1227c:	ldr	r3, [r6], #4
   12280:	cmp	r3, #6
   12284:	bgt	12814 <__assert_fail@plt+0xae8>
   12288:	add	r3, r3, r3, lsl #1
   1228c:	ldr	r0, [sp, #64]	; 0x40
   12290:	add	ip, fp, r3, lsl #3
   12294:	ldr	r1, [fp, r3, lsl #3]
   12298:	ldr	r2, [ip, #16]
   1229c:	vldr	d0, [ip, #8]
   122a0:	bl	118ac <scols_table_new_column@plt>
   122a4:	subs	ip, r0, #0
   122a8:	beq	127fc <__assert_fail@plt+0xad0>
   122ac:	ldrb	r3, [sp, #68]	; 0x44
   122b0:	ldr	r2, [r4]
   122b4:	tst	r3, #8
   122b8:	beq	12264 <__assert_fail@plt+0x538>
   122bc:	cmp	r2, r7
   122c0:	bls	12870 <__assert_fail@plt+0xb44>
   122c4:	add	r5, r4, r5, lsl #2
   122c8:	ldr	r1, [r5, #4]
   122cc:	cmp	r1, #6
   122d0:	bgt	12814 <__assert_fail@plt+0xae8>
   122d4:	cmp	r1, #3
   122d8:	beq	12308 <__assert_fail@plt+0x5dc>
   122dc:	cmp	r1, #5
   122e0:	beq	122f4 <__assert_fail@plt+0x5c8>
   122e4:	cmp	r1, #1
   122e8:	bne	12264 <__assert_fail@plt+0x538>
   122ec:	tst	r3, #128	; 0x80
   122f0:	beq	12264 <__assert_fail@plt+0x538>
   122f4:	mov	r0, ip
   122f8:	mov	r1, #1
   122fc:	bl	11828 <scols_column_set_json_type@plt>
   12300:	ldr	r2, [r4]
   12304:	b	12264 <__assert_fail@plt+0x538>
   12308:	mov	r1, #2
   1230c:	bl	11828 <scols_column_set_json_type@plt>
   12310:	ldr	r2, [r4]
   12314:	b	12264 <__assert_fail@plt+0x538>
   12318:	ldr	r5, [sp, #12]
   1231c:	cmp	r5, #0
   12320:	beq	12708 <__assert_fail@plt+0x9dc>
   12324:	mov	r3, #0
   12328:	ldr	r1, [pc, #1552]	; 12940 <__assert_fail@plt+0xc14>
   1232c:	mov	r0, r5
   12330:	str	r3, [sp, #92]	; 0x5c
   12334:	str	r3, [sp, #88]	; 0x58
   12338:	str	r3, [sp, #96]	; 0x60
   1233c:	str	r3, [sp, #100]	; 0x64
   12340:	str	r3, [sp, #104]	; 0x68
   12344:	str	r3, [sp, #108]	; 0x6c
   12348:	str	r3, [sp, #112]	; 0x70
   1234c:	bl	119a8 <strcasecmp@plt>
   12350:	cmp	r0, #0
   12354:	beq	1237c <__assert_fail@plt+0x650>
   12358:	ldr	r3, [pc, #1496]	; 12938 <__assert_fail@plt+0xc0c>
   1235c:	mov	r0, r5
   12360:	str	r3, [sp]
   12364:	mov	r2, #7
   12368:	ldr	r3, [pc, #1492]	; 12944 <__assert_fail@plt+0xc18>
   1236c:	add	r1, sp, #88	; 0x58
   12370:	bl	151e4 <__assert_fail@plt+0x34b8>
   12374:	cmp	r0, #0
   12378:	blt	12444 <__assert_fail@plt+0x718>
   1237c:	ldr	r2, [r4, #60]	; 0x3c
   12380:	add	r1, sp, #88	; 0x58
   12384:	add	r0, sp, #16
   12388:	bl	12af0 <__assert_fail@plt+0xdc4>
   1238c:	add	r0, sp, #16
   12390:	bl	12edc <__assert_fail@plt+0x11b0>
   12394:	add	r0, sp, #16
   12398:	bl	13010 <__assert_fail@plt+0x12e4>
   1239c:	ldrb	r3, [sp, #69]	; 0x45
   123a0:	tst	r3, #2
   123a4:	beq	12410 <__assert_fail@plt+0x6e4>
   123a8:	mov	r4, #0
   123ac:	b	123c4 <__assert_fail@plt+0x698>
   123b0:	ldr	r1, [sp, #28]
   123b4:	add	r0, sp, #16
   123b8:	add	r1, r1, r4, lsl #6
   123bc:	bl	134e0 <__assert_fail@plt+0x17b4>
   123c0:	add	r4, r4, #1
   123c4:	ldr	r3, [sp, #32]
   123c8:	cmp	r4, r3
   123cc:	blt	123b0 <__assert_fail@plt+0x684>
   123d0:	ldr	r0, [sp, #64]	; 0x40
   123d4:	bl	11c48 <scols_print_table@plt>
   123d8:	ldrb	r3, [sp, #69]	; 0x45
   123dc:	tst	r3, #1
   123e0:	bne	123fc <__assert_fail@plt+0x6d0>
   123e4:	ldr	r0, [sp, #64]	; 0x40
   123e8:	bl	11a80 <scols_unref_table@plt>
   123ec:	ldr	r0, [sp, #16]
   123f0:	bl	15dd0 <__assert_fail@plt+0x40a4>
   123f4:	mov	r0, #0
   123f8:	b	12060 <__assert_fail@plt+0x334>
   123fc:	ldr	r3, [pc, #1348]	; 12948 <__assert_fail@plt+0xc1c>
   12400:	mov	r0, #10
   12404:	ldr	r1, [r3]
   12408:	bl	11c54 <fputc@plt>
   1240c:	ldrb	r3, [sp, #69]	; 0x45
   12410:	tst	r3, #1
   12414:	beq	123e4 <__assert_fail@plt+0x6b8>
   12418:	add	r0, sp, #16
   1241c:	bl	12c18 <__assert_fail@plt+0xeec>
   12420:	b	123e4 <__assert_fail@plt+0x6b8>
   12424:	add	r0, sp, #16
   12428:	bl	12edc <__assert_fail@plt+0x11b0>
   1242c:	add	r0, sp, #16
   12430:	bl	13010 <__assert_fail@plt+0x12e4>
   12434:	add	r0, sp, #16
   12438:	bl	12c18 <__assert_fail@plt+0xeec>
   1243c:	mov	r0, #0
   12440:	b	12060 <__assert_fail@plt+0x334>
   12444:	mov	r0, #1
   12448:	b	12060 <__assert_fail@plt+0x334>
   1244c:	ldr	r3, [pc, #1268]	; 12948 <__assert_fail@plt+0xc1c>
   12450:	mov	r2, #5
   12454:	ldr	r1, [pc, #1264]	; 1294c <__assert_fail@plt+0xc20>
   12458:	ldr	r4, [r3]
   1245c:	mov	r0, #0
   12460:	bl	11960 <dcgettext@plt>
   12464:	mov	r1, r4
   12468:	bl	11ccc <fputs@plt>
   1246c:	mov	r2, #5
   12470:	ldr	r1, [pc, #1240]	; 12950 <__assert_fail@plt+0xc24>
   12474:	mov	r0, #0
   12478:	bl	11960 <dcgettext@plt>
   1247c:	ldr	r3, [pc, #1180]	; 12920 <__assert_fail@plt+0xbf4>
   12480:	mov	r1, #1
   12484:	mov	r6, #0
   12488:	ldr	r3, [r3]
   1248c:	ldr	r5, [pc, #1132]	; 12900 <__assert_fail@plt+0xbd4>
   12490:	ldr	r8, [pc, #1212]	; 12954 <__assert_fail@plt+0xc28>
   12494:	mov	r2, r0
   12498:	mov	r0, r4
   1249c:	bl	11be8 <__fprintf_chk@plt>
   124a0:	mov	r1, r4
   124a4:	mov	r0, #10
   124a8:	bl	11c54 <fputc@plt>
   124ac:	mov	r2, #5
   124b0:	ldr	r1, [pc, #1184]	; 12958 <__assert_fail@plt+0xc2c>
   124b4:	mov	r0, r6
   124b8:	bl	11960 <dcgettext@plt>
   124bc:	mov	r1, r4
   124c0:	bl	11ccc <fputs@plt>
   124c4:	mov	r2, #5
   124c8:	ldr	r1, [pc, #1164]	; 1295c <__assert_fail@plt+0xc30>
   124cc:	mov	r0, r6
   124d0:	bl	11960 <dcgettext@plt>
   124d4:	mov	r1, r4
   124d8:	bl	11ccc <fputs@plt>
   124dc:	mov	r2, #5
   124e0:	ldr	r1, [pc, #1144]	; 12960 <__assert_fail@plt+0xc34>
   124e4:	mov	r0, r6
   124e8:	bl	11960 <dcgettext@plt>
   124ec:	mov	r1, r4
   124f0:	bl	11ccc <fputs@plt>
   124f4:	mov	r2, #5
   124f8:	ldr	r1, [pc, #1124]	; 12964 <__assert_fail@plt+0xc38>
   124fc:	mov	r0, r6
   12500:	bl	11960 <dcgettext@plt>
   12504:	mov	r1, r4
   12508:	bl	11ccc <fputs@plt>
   1250c:	mov	r2, #5
   12510:	ldr	r1, [pc, #1104]	; 12968 <__assert_fail@plt+0xc3c>
   12514:	mov	r0, r6
   12518:	bl	11960 <dcgettext@plt>
   1251c:	mov	r1, r4
   12520:	bl	11ccc <fputs@plt>
   12524:	mov	r2, #5
   12528:	ldr	r1, [pc, #1084]	; 1296c <__assert_fail@plt+0xc40>
   1252c:	mov	r0, r6
   12530:	bl	11960 <dcgettext@plt>
   12534:	mov	r1, r4
   12538:	bl	11ccc <fputs@plt>
   1253c:	mov	r2, #5
   12540:	ldr	r1, [pc, #1064]	; 12970 <__assert_fail@plt+0xc44>
   12544:	mov	r0, r6
   12548:	bl	11960 <dcgettext@plt>
   1254c:	mov	r1, r4
   12550:	bl	11ccc <fputs@plt>
   12554:	mov	r2, #5
   12558:	ldr	r1, [pc, #1044]	; 12974 <__assert_fail@plt+0xc48>
   1255c:	mov	r0, r6
   12560:	bl	11960 <dcgettext@plt>
   12564:	mov	r1, r4
   12568:	bl	11ccc <fputs@plt>
   1256c:	mov	r2, #5
   12570:	ldr	r1, [pc, #1024]	; 12978 <__assert_fail@plt+0xc4c>
   12574:	mov	r0, r6
   12578:	bl	11960 <dcgettext@plt>
   1257c:	mov	r1, r4
   12580:	bl	11ccc <fputs@plt>
   12584:	mov	r2, #5
   12588:	ldr	r1, [pc, #1004]	; 1297c <__assert_fail@plt+0xc50>
   1258c:	mov	r0, r6
   12590:	bl	11960 <dcgettext@plt>
   12594:	mov	r1, r4
   12598:	bl	11ccc <fputs@plt>
   1259c:	mov	r2, #5
   125a0:	ldr	r1, [pc, #984]	; 12980 <__assert_fail@plt+0xc54>
   125a4:	mov	r0, r6
   125a8:	bl	11960 <dcgettext@plt>
   125ac:	mov	r1, r4
   125b0:	bl	11ccc <fputs@plt>
   125b4:	mov	r2, #5
   125b8:	ldr	r1, [pc, #964]	; 12984 <__assert_fail@plt+0xc58>
   125bc:	mov	r0, r6
   125c0:	bl	11960 <dcgettext@plt>
   125c4:	mov	r1, r4
   125c8:	bl	11ccc <fputs@plt>
   125cc:	mov	r2, #5
   125d0:	ldr	r1, [pc, #944]	; 12988 <__assert_fail@plt+0xc5c>
   125d4:	mov	r0, r6
   125d8:	bl	11960 <dcgettext@plt>
   125dc:	mov	r1, r4
   125e0:	bl	11ccc <fputs@plt>
   125e4:	mov	r1, r4
   125e8:	mov	r0, #10
   125ec:	bl	11c54 <fputc@plt>
   125f0:	mov	r2, #5
   125f4:	ldr	r1, [pc, #912]	; 1298c <__assert_fail@plt+0xc60>
   125f8:	mov	r0, r6
   125fc:	bl	11960 <dcgettext@plt>
   12600:	mov	r2, #5
   12604:	ldr	r1, [pc, #900]	; 12990 <__assert_fail@plt+0xc64>
   12608:	mov	r7, r0
   1260c:	mov	r0, r6
   12610:	bl	11960 <dcgettext@plt>
   12614:	ldr	r2, [pc, #888]	; 12994 <__assert_fail@plt+0xc68>
   12618:	mov	r3, r7
   1261c:	str	r2, [sp]
   12620:	ldr	r1, [pc, #880]	; 12998 <__assert_fail@plt+0xc6c>
   12624:	ldr	r2, [pc, #880]	; 1299c <__assert_fail@plt+0xc70>
   12628:	str	r0, [sp, #4]
   1262c:	mov	r0, #1
   12630:	bl	11bac <__printf_chk@plt>
   12634:	ldr	r1, [pc, #868]	; 129a0 <__assert_fail@plt+0xc74>
   12638:	mov	r2, #5
   1263c:	mov	r0, r6
   12640:	bl	11960 <dcgettext@plt>
   12644:	mov	r1, r4
   12648:	bl	11ccc <fputs@plt>
   1264c:	ldr	r1, [r5, #20]
   12650:	mov	r2, #5
   12654:	mov	r0, #0
   12658:	ldr	r7, [r5]
   1265c:	bl	11960 <dcgettext@plt>
   12660:	add	r6, r6, #1
   12664:	mov	r3, r7
   12668:	mov	r2, r8
   1266c:	mov	r1, #1
   12670:	add	r5, r5, #24
   12674:	str	r0, [sp]
   12678:	mov	r0, r4
   1267c:	bl	11be8 <__fprintf_chk@plt>
   12680:	cmp	r6, #7
   12684:	bne	1264c <__assert_fail@plt+0x920>
   12688:	mov	r2, #5
   1268c:	ldr	r1, [pc, #784]	; 129a4 <__assert_fail@plt+0xc78>
   12690:	mov	r0, #0
   12694:	bl	11960 <dcgettext@plt>
   12698:	ldr	r2, [pc, #776]	; 129a8 <__assert_fail@plt+0xc7c>
   1269c:	mov	r1, r0
   126a0:	mov	r0, #1
   126a4:	bl	11bac <__printf_chk@plt>
   126a8:	ldr	r3, [pc, #764]	; 129ac <__assert_fail@plt+0xc80>
   126ac:	ldr	r0, [r3]
   126b0:	sub	r0, r0, r4
   126b4:	clz	r0, r0
   126b8:	lsr	r0, r0, #5
   126bc:	bl	11ae0 <exit@plt>
   126c0:	ldr	r3, [pc, #740]	; 129ac <__assert_fail@plt+0xc80>
   126c4:	ldr	r1, [pc, #740]	; 129b0 <__assert_fail@plt+0xc84>
   126c8:	mov	r2, #5
   126cc:	mov	r0, #0
   126d0:	ldr	r4, [r3]
   126d4:	bl	11960 <dcgettext@plt>
   126d8:	ldr	r3, [pc, #576]	; 12920 <__assert_fail@plt+0xbf4>
   126dc:	mov	r1, #1
   126e0:	ldr	r3, [r3]
   126e4:	mov	r2, r0
   126e8:	mov	r0, r4
   126ec:	bl	11be8 <__fprintf_chk@plt>
   126f0:	mov	r0, #1
   126f4:	bl	11ae0 <exit@plt>
   126f8:	ldr	r1, [pc, #692]	; 129b4 <__assert_fail@plt+0xc88>
   126fc:	ldr	r0, [sp, #64]	; 0x40
   12700:	bl	11888 <scols_table_set_name@plt>
   12704:	b	1223c <__assert_fail@plt+0x510>
   12708:	ldr	r1, [pc, #680]	; 129b8 <__assert_fail@plt+0xc8c>
   1270c:	add	r0, sp, #16
   12710:	bl	12af0 <__assert_fail@plt+0xdc4>
   12714:	b	1238c <__assert_fail@plt+0x660>
   12718:	ldr	r6, [pc, #652]	; 129ac <__assert_fail@plt+0xc80>
   1271c:	mov	r2, #5
   12720:	ldr	r1, [pc, #660]	; 129bc <__assert_fail@plt+0xc90>
   12724:	mov	r0, #0
   12728:	ldr	sl, [r6]
   1272c:	bl	11960 <dcgettext@plt>
   12730:	ldr	r3, [pc, #488]	; 12920 <__assert_fail@plt+0xbf4>
   12734:	mov	r1, #1
   12738:	sub	r5, r4, #4
   1273c:	ldr	r3, [r3]
   12740:	add	r4, r4, #56	; 0x38
   12744:	ldr	r7, [pc, #628]	; 129c0 <__assert_fail@plt+0xc94>
   12748:	ldr	r9, [pc, #628]	; 129c4 <__assert_fail@plt+0xc98>
   1274c:	ldr	r8, [pc, #628]	; 129c8 <__assert_fail@plt+0xc9c>
   12750:	mov	r2, r0
   12754:	mov	r0, sl
   12758:	bl	11be8 <__fprintf_chk@plt>
   1275c:	ldr	r0, [r5, #4]!
   12760:	cmp	r0, #0
   12764:	beq	127bc <__assert_fail@plt+0xa90>
   12768:	cmp	r0, #97	; 0x61
   1276c:	beq	127d0 <__assert_fail@plt+0xaa4>
   12770:	ldr	r2, [pc, #596]	; 129cc <__assert_fail@plt+0xca0>
   12774:	b	12788 <__assert_fail@plt+0xa5c>
   12778:	add	r2, r2, #16
   1277c:	ldr	r1, [r2, #12]
   12780:	cmp	r0, r1
   12784:	beq	127d4 <__assert_fail@plt+0xaa8>
   12788:	ldr	r3, [r2, #16]
   1278c:	cmp	r3, #0
   12790:	bne	12778 <__assert_fail@plt+0xa4c>
   12794:	sub	r3, r0, #33	; 0x21
   12798:	cmp	r3, #93	; 0x5d
   1279c:	bhi	127b4 <__assert_fail@plt+0xa88>
   127a0:	mov	r3, r0
   127a4:	mov	r2, r8
   127a8:	mov	r1, #1
   127ac:	ldr	r0, [r6]
   127b0:	bl	11be8 <__fprintf_chk@plt>
   127b4:	cmp	r4, r5
   127b8:	bne	1275c <__assert_fail@plt+0xa30>
   127bc:	ldr	r1, [r6]
   127c0:	mov	r0, #10
   127c4:	bl	11c54 <fputc@plt>
   127c8:	mov	r0, #1
   127cc:	bl	11ae0 <exit@plt>
   127d0:	mov	r3, r9
   127d4:	mov	r2, r7
   127d8:	mov	r1, #1
   127dc:	ldr	r0, [r6]
   127e0:	bl	11be8 <__fprintf_chk@plt>
   127e4:	b	127b4 <__assert_fail@plt+0xa88>
   127e8:	ldr	r3, [pc, #480]	; 129d0 <__assert_fail@plt+0xca4>
   127ec:	mov	r2, #184	; 0xb8
   127f0:	ldr	r1, [pc, #476]	; 129d4 <__assert_fail@plt+0xca8>
   127f4:	ldr	r0, [pc, #476]	; 129d8 <__assert_fail@plt+0xcac>
   127f8:	bl	11d2c <__assert_fail@plt>
   127fc:	ldr	r1, [pc, #472]	; 129dc <__assert_fail@plt+0xcb0>
   12800:	mov	r2, #5
   12804:	bl	11960 <dcgettext@plt>
   12808:	mov	r1, r0
   1280c:	mov	r0, #1
   12810:	bl	119b4 <err@plt>
   12814:	ldr	r3, [pc, #436]	; 129d0 <__assert_fail@plt+0xca4>
   12818:	mov	r2, #186	; 0xba
   1281c:	ldr	r1, [pc, #432]	; 129d4 <__assert_fail@plt+0xca8>
   12820:	ldr	r0, [pc, #440]	; 129e0 <__assert_fail@plt+0xcb4>
   12824:	bl	11d2c <__assert_fail@plt>
   12828:	mov	r2, #5
   1282c:	ldr	r1, [pc, #432]	; 129e4 <__assert_fail@plt+0xcb8>
   12830:	bl	11960 <dcgettext@plt>
   12834:	ldr	r2, [pc, #248]	; 12934 <__assert_fail@plt+0xc08>
   12838:	mov	r1, r0
   1283c:	mov	r0, #1
   12840:	bl	119b4 <err@plt>
   12844:	bl	11978 <__stack_chk_fail@plt>
   12848:	mov	r2, #5
   1284c:	ldr	r1, [pc, #404]	; 129e8 <__assert_fail@plt+0xcbc>
   12850:	mov	r0, r4
   12854:	bl	11960 <dcgettext@plt>
   12858:	bl	11b1c <warnx@plt>
   1285c:	ldr	r3, [pc, #328]	; 129ac <__assert_fail@plt+0xc80>
   12860:	mov	r0, r4
   12864:	mov	r2, #5
   12868:	ldr	r1, [pc, #320]	; 129b0 <__assert_fail@plt+0xc84>
   1286c:	b	126d0 <__assert_fail@plt+0x9a4>
   12870:	ldr	r3, [pc, #344]	; 129d0 <__assert_fail@plt+0xca4>
   12874:	mov	r2, #185	; 0xb9
   12878:	ldr	r1, [pc, #340]	; 129d4 <__assert_fail@plt+0xca8>
   1287c:	ldr	r0, [pc, #360]	; 129ec <__assert_fail@plt+0xcc0>
   12880:	bl	11d2c <__assert_fail@plt>
   12884:	ldr	r1, [pc, #356]	; 129f0 <__assert_fail@plt+0xcc4>
   12888:	mov	r2, #5
   1288c:	bl	11960 <dcgettext@plt>
   12890:	mov	r1, r0
   12894:	mov	r0, #1
   12898:	bl	11c24 <errx@plt>
   1289c:	ldr	r1, [pc, #336]	; 129f4 <__assert_fail@plt+0xcc8>
   128a0:	mov	r2, #5
   128a4:	bl	11960 <dcgettext@plt>
   128a8:	mov	r1, r0
   128ac:	mov	r0, #1
   128b0:	bl	11c24 <errx@plt>
   128b4:	ldr	r1, [pc, #316]	; 129f8 <__assert_fail@plt+0xccc>
   128b8:	mov	r0, r4
   128bc:	mov	r2, #5
   128c0:	bl	11960 <dcgettext@plt>
   128c4:	mov	r1, r0
   128c8:	mov	r0, #1
   128cc:	bl	119b4 <err@plt>
   128d0:	ldr	r1, [pc, #292]	; 129fc <__assert_fail@plt+0xcd0>
   128d4:	mov	r2, #5
   128d8:	mov	r0, #0
   128dc:	bl	11960 <dcgettext@plt>
   128e0:	mov	r1, r0
   128e4:	mov	r0, #1
   128e8:	bl	11c24 <errx@plt>
   128ec:	andeq	sl, r2, r8, lsr #26
   128f0:	andeq	r9, r1, r4, asr sp
   128f4:	andeq	r9, r1, ip, ror r5
   128f8:	muleq	r1, r0, r5
   128fc:	andeq	r3, r1, r4, lsl r9
   12900:	andeq	r9, r1, r8, lsl #1
   12904:	andeq	r9, r1, r0, asr #19
   12908:	andeq	fp, r2, r0, lsr r0
   1290c:	andeq	r9, r1, r0, asr #4
   12910:	andeq	fp, r2, r8, lsr #32
   12914:	andeq	r9, r1, r0, ror #18
   12918:			; <UNDEFINED> instruction: 0xfffffefd
   1291c:	andeq	r9, r1, r0, asr #18
   12920:	andeq	fp, r2, r0, lsl r0
   12924:	andeq	r9, r1, ip, asr #18
   12928:	andeq	r9, r1, r8, ror #18
   1292c:	andeq	r9, r1, r0, ror r9
   12930:	andeq	fp, r2, r8, lsl r0
   12934:	andeq	r9, r1, r4, lsr #20
   12938:	muleq	r1, r4, fp
   1293c:	andeq	fp, r2, r8, lsr r0
   12940:	andeq	r9, r1, r0, ror #21
   12944:	andeq	fp, r2, ip, rrx
   12948:	andeq	fp, r2, r4, lsr #32
   1294c:	andeq	r9, r1, r8, asr #11
   12950:	ldrdeq	r9, [r1], -r4
   12954:	andeq	r9, r1, ip, lsl #18
   12958:	andeq	r9, r1, r4, ror #11
   1295c:	andeq	r9, r1, r4, lsr #12
   12960:	andeq	r9, r1, r0, lsr r6
   12964:	andeq	r9, r1, r0, ror #12
   12968:	muleq	r1, r8, r6
   1296c:	ldrdeq	r9, [r1], -r4
   12970:	andeq	r9, r1, r4, lsr #14
   12974:	andeq	r9, r1, r0, asr r7
   12978:	andeq	r9, r1, r8, ror r7
   1297c:	andeq	r9, r1, r4, lsr #15
   12980:	ldrdeq	r9, [r1], -r4
   12984:	andeq	r9, r1, r0, lsl r8
   12988:	andeq	r9, r1, r4, asr r8
   1298c:	muleq	r1, ip, r8
   12990:			; <UNDEFINED> instruction: 0x000198b0
   12994:	andeq	r9, r1, r0, ror #17
   12998:	andeq	r9, r1, ip, asr #17
   1299c:	andeq	r9, r1, r0, asr #17
   129a0:	strdeq	r9, [r1], -r0
   129a4:	andeq	r9, r1, r8, lsl r9
   129a8:	andeq	r9, r1, r4, lsr r9
   129ac:	andeq	fp, r2, r0, lsr #32
   129b0:	muleq	r1, r8, r9
   129b4:	andeq	r9, r1, r4, lsl #10
   129b8:	andeq	fp, r2, r4, lsr r0
   129bc:	muleq	r1, ip, r5
   129c0:	andeq	r9, r1, r8, ror #21
   129c4:	andeq	r9, r1, r8, ror r5
   129c8:	andeq	r9, r1, r0, asr #11
   129cc:	andeq	r9, r1, r0, ror #2
   129d0:	andeq	r9, r1, r0, asr r1
   129d4:	andeq	r9, r1, ip, lsr #9
   129d8:	andeq	r9, r1, ip, lsl #10
   129dc:	andeq	r9, r1, r4, lsr #21
   129e0:	andeq	r9, r1, r0, asr #9
   129e4:	andeq	r9, r1, r0, asr #20
   129e8:	ldrdeq	r9, [r1], -r0
   129ec:	andeq	r9, r1, r8, asr #21
   129f0:	andeq	r9, r1, r0, lsl #21
   129f4:	ldrdeq	r9, [r1], -ip
   129f8:	andeq	r9, r1, r0, ror #20
   129fc:	andeq	r9, r1, r8, ror r9
   12a00:	mov	fp, #0
   12a04:	mov	lr, #0
   12a08:	pop	{r1}		; (ldr r1, [sp], #4)
   12a0c:	mov	r2, sp
   12a10:	push	{r2}		; (str r2, [sp, #-4]!)
   12a14:	push	{r0}		; (str r0, [sp, #-4]!)
   12a18:	ldr	ip, [pc, #16]	; 12a30 <__assert_fail@plt+0xd04>
   12a1c:	push	{ip}		; (str ip, [sp, #-4]!)
   12a20:	ldr	r0, [pc, #12]	; 12a34 <__assert_fail@plt+0xd08>
   12a24:	ldr	r3, [pc, #12]	; 12a38 <__assert_fail@plt+0xd0c>
   12a28:	bl	11a5c <__libc_start_main@plt>
   12a2c:	bl	11ce4 <abort@plt>
   12a30:	andeq	r9, r1, ip, asr r0
   12a34:	andeq	r1, r1, r8, lsr sp
   12a38:	strdeq	r8, [r1], -ip
   12a3c:	ldr	r3, [pc, #20]	; 12a58 <__assert_fail@plt+0xd2c>
   12a40:	ldr	r2, [pc, #20]	; 12a5c <__assert_fail@plt+0xd30>
   12a44:	add	r3, pc, r3
   12a48:	ldr	r2, [r3, r2]
   12a4c:	cmp	r2, #0
   12a50:	bxeq	lr
   12a54:	b	11ab0 <__gmon_start__@plt>
   12a58:	andeq	r8, r1, r8, ror #7
   12a5c:	andeq	r0, r0, r8, asr #3
   12a60:	ldr	r0, [pc, #24]	; 12a80 <__assert_fail@plt+0xd54>
   12a64:	ldr	r3, [pc, #24]	; 12a84 <__assert_fail@plt+0xd58>
   12a68:	cmp	r3, r0
   12a6c:	bxeq	lr
   12a70:	ldr	r3, [pc, #16]	; 12a88 <__assert_fail@plt+0xd5c>
   12a74:	cmp	r3, #0
   12a78:	bxeq	lr
   12a7c:	bx	r3
   12a80:	andeq	fp, r2, ip
   12a84:	andeq	fp, r2, ip
   12a88:	andeq	r0, r0, r0
   12a8c:	ldr	r0, [pc, #36]	; 12ab8 <__assert_fail@plt+0xd8c>
   12a90:	ldr	r1, [pc, #36]	; 12abc <__assert_fail@plt+0xd90>
   12a94:	sub	r1, r1, r0
   12a98:	asr	r1, r1, #2
   12a9c:	add	r1, r1, r1, lsr #31
   12aa0:	asrs	r1, r1, #1
   12aa4:	bxeq	lr
   12aa8:	ldr	r3, [pc, #16]	; 12ac0 <__assert_fail@plt+0xd94>
   12aac:	cmp	r3, #0
   12ab0:	bxeq	lr
   12ab4:	bx	r3
   12ab8:	andeq	fp, r2, ip
   12abc:	andeq	fp, r2, ip
   12ac0:	andeq	r0, r0, r0
   12ac4:	push	{r4, lr}
   12ac8:	ldr	r4, [pc, #24]	; 12ae8 <__assert_fail@plt+0xdbc>
   12acc:	ldrb	r3, [r4]
   12ad0:	cmp	r3, #0
   12ad4:	popne	{r4, pc}
   12ad8:	bl	12a60 <__assert_fail@plt+0xd34>
   12adc:	mov	r3, #1
   12ae0:	strb	r3, [r4]
   12ae4:	pop	{r4, pc}
   12ae8:	andeq	fp, r2, ip, lsr #32
   12aec:	b	12a8c <__assert_fail@plt+0xd60>
   12af0:	ldrb	r3, [r0, #53]	; 0x35
   12af4:	cmp	r2, #0
   12af8:	bic	r3, r3, #60	; 0x3c
   12afc:	strb	r3, [r0, #53]	; 0x35
   12b00:	bxeq	lr
   12b04:	sub	r1, r1, #4
   12b08:	add	r2, r1, r2, lsl #2
   12b0c:	ldr	r3, [r1, #4]!
   12b10:	sub	r3, r3, #2
   12b14:	cmp	r3, #4
   12b18:	ldrls	pc, [pc, r3, lsl #2]
   12b1c:	b	12b40 <__assert_fail@plt+0xe14>
   12b20:	andeq	r2, r1, r4, ror #22
   12b24:	andeq	r2, r1, ip, ror fp
   12b28:	andeq	r2, r1, r0, asr #22
   12b2c:	andeq	r2, r1, ip, asr #22
   12b30:	andeq	r2, r1, r4, lsr fp
   12b34:	ldrb	r3, [r0, #53]	; 0x35
   12b38:	orr	r3, r3, #32
   12b3c:	strb	r3, [r0, #53]	; 0x35
   12b40:	cmp	r1, r2
   12b44:	bne	12b0c <__assert_fail@plt+0xde0>
   12b48:	bx	lr
   12b4c:	ldrb	r3, [r0, #53]	; 0x35
   12b50:	cmp	r1, r2
   12b54:	orr	r3, r3, #4
   12b58:	strb	r3, [r0, #53]	; 0x35
   12b5c:	bne	12b0c <__assert_fail@plt+0xde0>
   12b60:	bx	lr
   12b64:	ldrb	r3, [r0, #53]	; 0x35
   12b68:	cmp	r1, r2
   12b6c:	orr	r3, r3, #8
   12b70:	strb	r3, [r0, #53]	; 0x35
   12b74:	bne	12b0c <__assert_fail@plt+0xde0>
   12b78:	bx	lr
   12b7c:	ldrb	r3, [r0, #53]	; 0x35
   12b80:	cmp	r1, r2
   12b84:	orr	r3, r3, #16
   12b88:	strb	r3, [r0, #53]	; 0x35
   12b8c:	bne	12b0c <__assert_fail@plt+0xde0>
   12b90:	bx	lr
   12b94:	push	{r4, r5, r6, r7, r8, lr}
   12b98:	mov	r8, r0
   12b9c:	ldr	r6, [pc, #104]	; 12c0c <__assert_fail@plt+0xee0>
   12ba0:	ldr	r5, [pc, #104]	; 12c10 <__assert_fail@plt+0xee4>
   12ba4:	mov	r7, r1
   12ba8:	mov	r4, #0
   12bac:	b	12bb4 <__assert_fail@plt+0xe88>
   12bb0:	ldr	r5, [r6, #24]!
   12bb4:	mov	r2, r7
   12bb8:	mov	r1, r5
   12bbc:	mov	r0, r8
   12bc0:	bl	11b40 <strncasecmp@plt>
   12bc4:	cmp	r0, #0
   12bc8:	bne	12bd8 <__assert_fail@plt+0xeac>
   12bcc:	ldrsb	r3, [r5, r7]
   12bd0:	cmp	r3, #0
   12bd4:	beq	12c04 <__assert_fail@plt+0xed8>
   12bd8:	add	r4, r4, #1
   12bdc:	cmp	r4, #7
   12be0:	bne	12bb0 <__assert_fail@plt+0xe84>
   12be4:	mov	r2, #5
   12be8:	ldr	r1, [pc, #36]	; 12c14 <__assert_fail@plt+0xee8>
   12bec:	mov	r0, #0
   12bf0:	bl	11960 <dcgettext@plt>
   12bf4:	mov	r1, r8
   12bf8:	bl	11b1c <warnx@plt>
   12bfc:	mvn	r0, #0
   12c00:	pop	{r4, r5, r6, r7, r8, pc}
   12c04:	mov	r0, r4
   12c08:	pop	{r4, r5, r6, r7, r8, pc}
   12c0c:	andeq	r9, r1, r8, lsl #1
   12c10:	andeq	r9, r1, r0, lsl #6
   12c14:	andeq	r9, r1, r8, lsl #6
   12c18:	ldrsb	r3, [r0, #52]	; 0x34
   12c1c:	push	{r4, r5, lr}
   12c20:	mov	r4, r0
   12c24:	cmp	r3, #0
   12c28:	sub	sp, sp, #12
   12c2c:	blt	12cf8 <__assert_fail@plt+0xfcc>
   12c30:	ldrd	r2, [r0, #24]
   12c34:	mov	r0, #0
   12c38:	bl	14e20 <__assert_fail@plt+0x30f4>
   12c3c:	subs	r5, r0, #0
   12c40:	beq	12c68 <__assert_fail@plt+0xf3c>
   12c44:	mov	r2, #5
   12c48:	ldr	r1, [pc, #296]	; 12d78 <__assert_fail@plt+0x104c>
   12c4c:	mov	r0, #0
   12c50:	bl	11960 <dcgettext@plt>
   12c54:	mov	r3, r5
   12c58:	ldr	r1, [pc, #284]	; 12d7c <__assert_fail@plt+0x1050>
   12c5c:	mov	r2, r0
   12c60:	mov	r0, #1
   12c64:	bl	11bac <__printf_chk@plt>
   12c68:	mov	r0, r5
   12c6c:	bl	118c4 <free@plt>
   12c70:	ldrd	r2, [r4, #32]
   12c74:	mov	r0, #0
   12c78:	bl	14e20 <__assert_fail@plt+0x30f4>
   12c7c:	subs	r5, r0, #0
   12c80:	beq	12ca8 <__assert_fail@plt+0xf7c>
   12c84:	mov	r2, #5
   12c88:	ldr	r1, [pc, #240]	; 12d80 <__assert_fail@plt+0x1054>
   12c8c:	mov	r0, #0
   12c90:	bl	11960 <dcgettext@plt>
   12c94:	mov	r3, r5
   12c98:	ldr	r1, [pc, #220]	; 12d7c <__assert_fail@plt+0x1050>
   12c9c:	mov	r2, r0
   12ca0:	mov	r0, #1
   12ca4:	bl	11bac <__printf_chk@plt>
   12ca8:	mov	r0, r5
   12cac:	bl	118c4 <free@plt>
   12cb0:	ldrd	r2, [r4, #40]	; 0x28
   12cb4:	mov	r0, #0
   12cb8:	bl	14e20 <__assert_fail@plt+0x30f4>
   12cbc:	subs	r4, r0, #0
   12cc0:	beq	12ce8 <__assert_fail@plt+0xfbc>
   12cc4:	mov	r2, #5
   12cc8:	ldr	r1, [pc, #180]	; 12d84 <__assert_fail@plt+0x1058>
   12ccc:	mov	r0, #0
   12cd0:	bl	11960 <dcgettext@plt>
   12cd4:	mov	r3, r4
   12cd8:	ldr	r1, [pc, #156]	; 12d7c <__assert_fail@plt+0x1050>
   12cdc:	mov	r2, r0
   12ce0:	mov	r0, #1
   12ce4:	bl	11bac <__printf_chk@plt>
   12ce8:	mov	r0, r4
   12cec:	add	sp, sp, #12
   12cf0:	pop	{r4, r5, lr}
   12cf4:	b	118c4 <free@plt>
   12cf8:	mov	r2, #5
   12cfc:	ldr	r1, [pc, #116]	; 12d78 <__assert_fail@plt+0x104c>
   12d00:	mov	r0, #0
   12d04:	bl	11960 <dcgettext@plt>
   12d08:	ldrd	r2, [r4, #24]
   12d0c:	ldr	r1, [pc, #116]	; 12d88 <__assert_fail@plt+0x105c>
   12d10:	strd	r2, [sp]
   12d14:	mov	r2, r0
   12d18:	mov	r0, #1
   12d1c:	bl	11bac <__printf_chk@plt>
   12d20:	mov	r2, #5
   12d24:	ldr	r1, [pc, #84]	; 12d80 <__assert_fail@plt+0x1054>
   12d28:	mov	r0, #0
   12d2c:	bl	11960 <dcgettext@plt>
   12d30:	ldrd	r2, [r4, #32]
   12d34:	ldr	r1, [pc, #76]	; 12d88 <__assert_fail@plt+0x105c>
   12d38:	strd	r2, [sp]
   12d3c:	mov	r2, r0
   12d40:	mov	r0, #1
   12d44:	bl	11bac <__printf_chk@plt>
   12d48:	mov	r2, #5
   12d4c:	ldr	r1, [pc, #48]	; 12d84 <__assert_fail@plt+0x1058>
   12d50:	mov	r0, #0
   12d54:	bl	11960 <dcgettext@plt>
   12d58:	ldrd	r2, [r4, #40]	; 0x28
   12d5c:	ldr	r1, [pc, #36]	; 12d88 <__assert_fail@plt+0x105c>
   12d60:	strd	r2, [sp]
   12d64:	mov	r2, r0
   12d68:	mov	r0, #1
   12d6c:	bl	11bac <__printf_chk@plt>
   12d70:	add	sp, sp, #12
   12d74:	pop	{r4, r5, pc}
   12d78:	andeq	r9, r1, ip, lsl r3
   12d7c:	andeq	r9, r1, r0, ror r3
   12d80:	andeq	r9, r1, r0, asr #6
   12d84:	andeq	r9, r1, r8, asr r3
   12d88:	andeq	r9, r1, r0, lsr r3
   12d8c:	push	{r1, r2, r3}
   12d90:	push	{r4, lr}
   12d94:	sub	sp, sp, #12
   12d98:	ldr	r4, [pc, #84]	; 12df4 <__assert_fail@plt+0x10c8>
   12d9c:	add	ip, sp, #24
   12da0:	mov	r3, ip
   12da4:	ldr	r1, [r4]
   12da8:	ldr	r2, [sp, #20]
   12dac:	str	r1, [sp, #4]
   12db0:	mov	r1, #1
   12db4:	str	ip, [sp]
   12db8:	bl	11b58 <__vasprintf_chk@plt>
   12dbc:	cmp	r0, #0
   12dc0:	blt	12de4 <__assert_fail@plt+0x10b8>
   12dc4:	ldr	r2, [sp, #4]
   12dc8:	ldr	r3, [r4]
   12dcc:	cmp	r2, r3
   12dd0:	bne	12df0 <__assert_fail@plt+0x10c4>
   12dd4:	add	sp, sp, #12
   12dd8:	pop	{r4, lr}
   12ddc:	add	sp, sp, #12
   12de0:	bx	lr
   12de4:	ldr	r1, [pc, #12]	; 12df8 <__assert_fail@plt+0x10cc>
   12de8:	mov	r0, #1
   12dec:	bl	119b4 <err@plt>
   12df0:	bl	11978 <__stack_chk_fail@plt>
   12df4:	andeq	sl, r2, r8, lsr #26
   12df8:	andeq	r9, r1, ip, ror r3
   12dfc:	add	r1, r0, #19
   12e00:	push	{r4, lr}
   12e04:	mov	r2, #6
   12e08:	mov	r4, r0
   12e0c:	ldr	r0, [pc, #28]	; 12e30 <__assert_fail@plt+0x1104>
   12e10:	bl	11cd8 <strncmp@plt>
   12e14:	subs	r1, r0, #0
   12e18:	beq	12e24 <__assert_fail@plt+0x10f8>
   12e1c:	mov	r0, #0
   12e20:	pop	{r4, pc}
   12e24:	add	r0, r4, #25
   12e28:	pop	{r4, lr}
   12e2c:	b	143ac <__assert_fail@plt+0x2680>
   12e30:	andeq	r9, r1, r4, lsl #10
   12e34:	push	{r4, r5, r6, r7, r8, lr}
   12e38:	mov	r4, r1
   12e3c:	bl	16da0 <__assert_fail@plt+0x5074>
   12e40:	subs	r6, r0, #0
   12e44:	beq	12eb8 <__assert_fail@plt+0x118c>
   12e48:	ldr	r7, [pc, #132]	; 12ed4 <__assert_fail@plt+0x11a8>
   12e4c:	mov	r0, r6
   12e50:	bl	11c78 <readdir64@plt>
   12e54:	subs	r4, r0, #0
   12e58:	beq	12eb0 <__assert_fail@plt+0x1184>
   12e5c:	mov	r2, #4
   12e60:	add	r1, r4, #19
   12e64:	mov	r0, r7
   12e68:	bl	11cd8 <strncmp@plt>
   12e6c:	subs	r5, r0, #0
   12e70:	bne	12e4c <__assert_fail@plt+0x1120>
   12e74:	add	r4, r4, #23
   12e78:	mov	r0, r4
   12e7c:	mov	r1, r5
   12e80:	bl	143ac <__assert_fail@plt+0x2680>
   12e84:	cmp	r0, #0
   12e88:	beq	12e4c <__assert_fail@plt+0x1120>
   12e8c:	mov	r0, r4
   12e90:	mov	r1, r5
   12e94:	mov	r2, #10
   12e98:	bl	11870 <strtol@plt>
   12e9c:	mov	r4, r0
   12ea0:	mov	r0, r6
   12ea4:	bl	11cfc <closedir@plt>
   12ea8:	mov	r0, r4
   12eac:	pop	{r4, r5, r6, r7, r8, pc}
   12eb0:	mvn	r4, #0
   12eb4:	b	12ea0 <__assert_fail@plt+0x1174>
   12eb8:	mov	r2, #5
   12ebc:	ldr	r1, [pc, #20]	; 12ed8 <__assert_fail@plt+0x11ac>
   12ec0:	bl	11960 <dcgettext@plt>
   12ec4:	mov	r2, r4
   12ec8:	mov	r1, r0
   12ecc:	mov	r0, #1
   12ed0:	bl	119b4 <err@plt>
   12ed4:	andeq	r9, r1, r8, lsr #7
   12ed8:	muleq	r1, r4, r3
   12edc:	push	{r4, r5, r6, r7, lr}
   12ee0:	sub	sp, sp, #4096	; 0x1000
   12ee4:	ldr	r6, [pc, #264]	; 12ff4 <__assert_fail@plt+0x12c8>
   12ee8:	sub	sp, sp, #12
   12eec:	add	ip, sp, #4096	; 0x1000
   12ef0:	ldr	r3, [r6]
   12ef4:	add	ip, ip, #4
   12ef8:	mov	r4, r0
   12efc:	ldr	r2, [pc, #244]	; 12ff8 <__assert_fail@plt+0x12cc>
   12f00:	ldr	r0, [r0]
   12f04:	mov	r1, #0
   12f08:	str	r3, [ip]
   12f0c:	bl	165e8 <__assert_fail@plt+0x48bc>
   12f10:	subs	r7, r0, #0
   12f14:	bne	12fb4 <__assert_fail@plt+0x1288>
   12f18:	mov	r5, r4
   12f1c:	add	r1, sp, #4
   12f20:	ldr	r0, [r5], #4
   12f24:	mov	r3, r7
   12f28:	mov	r2, #4096	; 0x1000
   12f2c:	bl	16470 <__assert_fail@plt+0x4744>
   12f30:	mov	r1, r5
   12f34:	add	r0, sp, #4
   12f38:	ldr	r3, [pc, #188]	; 12ffc <__assert_fail@plt+0x12d0>
   12f3c:	ldr	r2, [pc, #188]	; 13000 <__assert_fail@plt+0x12d4>
   12f40:	bl	11cc0 <scandir64@plt>
   12f44:	cmp	r0, #0
   12f48:	str	r0, [r4, #8]
   12f4c:	ble	12fd4 <__assert_fail@plt+0x12a8>
   12f50:	ldm	r4, {r0, r3}
   12f54:	ldr	r1, [r3]
   12f58:	add	r1, r1, #19
   12f5c:	bl	12e34 <__assert_fail@plt+0x1108>
   12f60:	ldr	r2, [pc, #156]	; 13004 <__assert_fail@plt+0x12d8>
   12f64:	mov	r1, #0
   12f68:	cmn	r0, #1
   12f6c:	ldr	r0, [r4]
   12f70:	ldrbne	r3, [r4, #52]	; 0x34
   12f74:	orrne	r3, r3, #1
   12f78:	strbne	r3, [r4, #52]	; 0x34
   12f7c:	bl	165e8 <__assert_fail@plt+0x48bc>
   12f80:	cmp	r0, #0
   12f84:	ldrbeq	r3, [r4, #53]	; 0x35
   12f88:	orreq	r3, r3, #64	; 0x40
   12f8c:	strbeq	r3, [r4, #53]	; 0x35
   12f90:	add	r3, sp, #4096	; 0x1000
   12f94:	add	r3, r3, #4
   12f98:	ldr	r2, [r3]
   12f9c:	ldr	r3, [r6]
   12fa0:	cmp	r2, r3
   12fa4:	bne	12fd0 <__assert_fail@plt+0x12a4>
   12fa8:	add	sp, sp, #4096	; 0x1000
   12fac:	add	sp, sp, #12
   12fb0:	pop	{r4, r5, r6, r7, pc}
   12fb4:	ldr	r1, [pc, #76]	; 13008 <__assert_fail@plt+0x12dc>
   12fb8:	mov	r2, #5
   12fbc:	mov	r0, #0
   12fc0:	bl	11960 <dcgettext@plt>
   12fc4:	mov	r1, r0
   12fc8:	mov	r0, #1
   12fcc:	bl	11c24 <errx@plt>
   12fd0:	bl	11978 <__stack_chk_fail@plt>
   12fd4:	mov	r2, #5
   12fd8:	ldr	r1, [pc, #44]	; 1300c <__assert_fail@plt+0x12e0>
   12fdc:	mov	r0, r7
   12fe0:	bl	11960 <dcgettext@plt>
   12fe4:	add	r2, sp, #4
   12fe8:	mov	r1, r0
   12fec:	mov	r0, #1
   12ff0:	bl	119b4 <err@plt>
   12ff4:	andeq	sl, r2, r8, lsr #26
   12ff8:			; <UNDEFINED> instruction: 0x000193b0
   12ffc:	andeq	r1, r1, r4, asr r9
   13000:	strdeq	r2, [r1], -ip
   13004:	andeq	r9, r1, r4, lsl #8
   13008:	andeq	r9, r1, r4, asr #7
   1300c:	strdeq	r9, [r1], -r0
   13010:	ldr	r3, [pc, #1168]	; 134a8 <__assert_fail@plt+0x177c>
   13014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13018:	sub	sp, sp, #228	; 0xe4
   1301c:	ldr	ip, [r3]
   13020:	mov	r4, r0
   13024:	add	r1, sp, #92	; 0x5c
   13028:	ldr	r0, [r0]
   1302c:	ldr	r3, [pc, #1144]	; 134ac <__assert_fail@plt+0x1780>
   13030:	mov	r2, #128	; 0x80
   13034:	str	ip, [sp, #220]	; 0xdc
   13038:	bl	17404 <__assert_fail@plt+0x56d8>
   1303c:	cmp	r0, #0
   13040:	ble	13488 <__assert_fail@plt+0x175c>
   13044:	mov	r3, #0
   13048:	mov	r1, r3
   1304c:	add	r0, sp, #92	; 0x5c
   13050:	mov	r2, #16
   13054:	bl	11948 <__strtoull_internal@plt>
   13058:	ldr	r3, [r4, #8]
   1305c:	cmp	r3, #0
   13060:	strd	r0, [r4, #24]
   13064:	ble	13270 <__assert_fail@plt+0x1544>
   13068:	mov	fp, #0
   1306c:	ldr	r3, [r4, #4]
   13070:	mov	r8, #0
   13074:	mov	r2, #44	; 0x2c
   13078:	ldr	r5, [r3, fp, lsl #2]
   1307c:	mov	r1, r8
   13080:	add	r0, sp, r2
   13084:	mov	r6, #1
   13088:	mov	r7, #0
   1308c:	str	r8, [sp, #16]
   13090:	str	r8, [sp, #20]
   13094:	bl	11b88 <memset@plt>
   13098:	mov	ip, #3
   1309c:	add	r0, r5, #25
   130a0:	mov	r3, r8
   130a4:	mov	r2, #10
   130a8:	mov	r1, r8
   130ac:	strd	r6, [sp, #32]
   130b0:	str	ip, [sp, #40]	; 0x28
   130b4:	bl	11948 <__strtoull_internal@plt>
   130b8:	add	r5, r5, #19
   130bc:	mov	r3, r5
   130c0:	ldr	r2, [pc, #1000]	; 134b0 <__assert_fail@plt+0x1784>
   130c4:	mov	r6, r0
   130c8:	mov	r7, r1
   130cc:	ldr	r0, [r4]
   130d0:	add	r1, sp, #20
   130d4:	strd	r6, [sp]
   130d8:	strd	r6, [sp, #24]
   130dc:	bl	17958 <__assert_fail@plt+0x5c2c>
   130e0:	cmp	r0, r8
   130e4:	bne	13100 <__assert_fail@plt+0x13d4>
   130e8:	ldrb	r3, [sp, #84]	; 0x54
   130ec:	ldr	r2, [sp, #20]
   130f0:	bic	r3, r3, #1
   130f4:	cmp	r2, #1
   130f8:	orreq	r3, r3, #1
   130fc:	strb	r3, [sp, #84]	; 0x54
   13100:	mov	r3, r5
   13104:	ldr	r2, [pc, #936]	; 134b4 <__assert_fail@plt+0x1788>
   13108:	add	r1, sp, #16
   1310c:	ldr	r0, [r4]
   13110:	bl	1737c <__assert_fail@plt+0x5650>
   13114:	cmp	r0, #0
   13118:	movle	sl, #3
   1311c:	ble	1314c <__assert_fail@plt+0x1420>
   13120:	ldr	r6, [sp, #16]
   13124:	ldr	r1, [pc, #908]	; 134b8 <__assert_fail@plt+0x178c>
   13128:	mov	r0, r6
   1312c:	bl	11858 <strcmp@plt>
   13130:	cmp	r0, #0
   13134:	bne	133c0 <__assert_fail@plt+0x1694>
   13138:	mov	r7, #1
   1313c:	mov	sl, r7
   13140:	str	r7, [sp, #40]	; 0x28
   13144:	mov	r0, r6
   13148:	bl	118c4 <free@plt>
   1314c:	ldrb	r3, [r4, #52]	; 0x34
   13150:	tst	r3, #1
   13154:	bne	133ac <__assert_fail@plt+0x1680>
   13158:	ldrb	r3, [r4, #53]	; 0x35
   1315c:	tst	r3, #64	; 0x40
   13160:	bne	132f4 <__assert_fail@plt+0x15c8>
   13164:	cmp	sl, #0
   13168:	ldr	r2, [r4, #24]
   1316c:	ldr	r0, [r4, #28]
   13170:	bne	132d8 <__assert_fail@plt+0x15ac>
   13174:	ldr	r3, [r4, #32]
   13178:	ldr	r1, [r4, #36]	; 0x24
   1317c:	adds	r3, r3, r2
   13180:	adc	r2, r1, r0
   13184:	str	r3, [r4, #32]
   13188:	str	r2, [r4, #36]	; 0x24
   1318c:	ldrd	r0, [r4, #12]
   13190:	cmp	r1, #0
   13194:	beq	131fc <__assert_fail@plt+0x14d0>
   13198:	ldrb	r3, [r4, #52]	; 0x34
   1319c:	tst	r3, #64	; 0x40
   131a0:	bne	131fc <__assert_fail@plt+0x14d0>
   131a4:	sub	ip, r1, #-67108863	; 0xfc000001
   131a8:	ldrd	r8, [sp]
   131ac:	lsl	ip, ip, #6
   131b0:	add	r2, r0, ip
   131b4:	ldr	lr, [r0, ip]
   131b8:	ldr	r3, [r2, #8]
   131bc:	ldr	r5, [r2, #4]
   131c0:	ldr	ip, [r2, #12]
   131c4:	adds	lr, r3, lr
   131c8:	str	lr, [sp, #8]
   131cc:	adc	lr, ip, r5
   131d0:	str	lr, [sp, #12]
   131d4:	ldrd	r6, [sp, #8]
   131d8:	cmp	r9, r7
   131dc:	cmpeq	r8, r6
   131e0:	bne	131fc <__assert_fail@plt+0x14d0>
   131e4:	ldrb	lr, [r4, #53]	; 0x35
   131e8:	tst	lr, #8
   131ec:	beq	1328c <__assert_fail@plt+0x1560>
   131f0:	ldr	r5, [r2, #16]
   131f4:	cmp	r5, sl
   131f8:	beq	1328c <__assert_fail@plt+0x1560>
   131fc:	add	r1, r1, #1
   13200:	str	r1, [r4, #16]
   13204:	lsl	r6, r1, #6
   13208:	mov	r1, r6
   1320c:	bl	11984 <realloc@plt>
   13210:	adds	r3, r6, #0
   13214:	movne	r3, #1
   13218:	cmp	r0, #0
   1321c:	movne	r3, #0
   13220:	cmp	r3, #0
   13224:	mov	r5, r0
   13228:	bne	13478 <__assert_fail@plt+0x174c>
   1322c:	ldr	ip, [r4, #16]
   13230:	add	lr, sp, #24
   13234:	sub	ip, ip, #-67108863	; 0xfc000001
   13238:	ldm	lr!, {r0, r1, r2, r3}
   1323c:	add	ip, r5, ip, lsl #6
   13240:	str	r5, [r4, #12]
   13244:	stmia	ip!, {r0, r1, r2, r3}
   13248:	ldm	lr!, {r0, r1, r2, r3}
   1324c:	stmia	ip!, {r0, r1, r2, r3}
   13250:	ldm	lr!, {r0, r1, r2, r3}
   13254:	stmia	ip!, {r0, r1, r2, r3}
   13258:	ldm	lr, {r0, r1, r2, r3}
   1325c:	stm	ip, {r0, r1, r2, r3}
   13260:	add	fp, fp, #1
   13264:	ldr	r3, [r4, #8]
   13268:	cmp	fp, r3
   1326c:	blt	1306c <__assert_fail@plt+0x1340>
   13270:	ldr	r3, [pc, #560]	; 134a8 <__assert_fail@plt+0x177c>
   13274:	ldr	r2, [sp, #220]	; 0xdc
   13278:	ldr	r3, [r3]
   1327c:	cmp	r2, r3
   13280:	bne	134a4 <__assert_fail@plt+0x1778>
   13284:	add	sp, sp, #228	; 0xe4
   13288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1328c:	tst	lr, #16
   13290:	beq	132a8 <__assert_fail@plt+0x157c>
   13294:	ldrb	r5, [r2, #60]	; 0x3c
   13298:	ldrb	r6, [sp, #84]	; 0x54
   1329c:	eor	r5, r5, r6
   132a0:	tst	r5, #1
   132a4:	bne	131fc <__assert_fail@plt+0x14d0>
   132a8:	ldrh	r6, [r4, #52]	; 0x34
   132ac:	ldr	r5, [pc, #520]	; 134bc <__assert_fail@plt+0x1790>
   132b0:	bics	r5, r5, r6
   132b4:	beq	133fc <__assert_fail@plt+0x16d0>
   132b8:	and	lr, lr, #96	; 0x60
   132bc:	cmp	lr, #96	; 0x60
   132c0:	beq	13410 <__assert_fail@plt+0x16e4>
   132c4:	adds	r3, r3, #1
   132c8:	adc	ip, ip, #0
   132cc:	str	ip, [r2, #12]
   132d0:	str	r3, [r2, #8]
   132d4:	b	13260 <__assert_fail@plt+0x1534>
   132d8:	ldr	r3, [r4, #40]	; 0x28
   132dc:	ldr	r1, [r4, #44]	; 0x2c
   132e0:	adds	r3, r3, r2
   132e4:	adc	r2, r1, r0
   132e8:	str	r3, [r4, #40]	; 0x28
   132ec:	str	r2, [r4, #44]	; 0x2c
   132f0:	b	1318c <__assert_fail@plt+0x1460>
   132f4:	mov	r3, r5
   132f8:	ldr	r2, [pc, #448]	; 134c0 <__assert_fail@plt+0x1794>
   132fc:	add	r1, sp, #16
   13300:	ldr	r0, [r4]
   13304:	bl	1737c <__assert_fail@plt+0x5650>
   13308:	cmp	r0, #0
   1330c:	ble	13164 <__assert_fail@plt+0x1438>
   13310:	ldr	r1, [pc, #428]	; 134c4 <__assert_fail@plt+0x1798>
   13314:	ldr	r0, [sp, #16]
   13318:	bl	11c00 <strtok@plt>
   1331c:	subs	r8, r0, #0
   13320:	addne	r9, sp, #48	; 0x30
   13324:	movne	r6, #0
   13328:	movne	r7, sl
   1332c:	beq	133a0 <__assert_fail@plt+0x1674>
   13330:	ldr	sl, [pc, #400]	; 134c8 <__assert_fail@plt+0x179c>
   13334:	ldr	r1, [pc, #400]	; 134cc <__assert_fail@plt+0x17a0>
   13338:	mov	r5, #0
   1333c:	b	13344 <__assert_fail@plt+0x1618>
   13340:	ldr	r1, [sl, #4]!
   13344:	mov	r0, r8
   13348:	bl	119a8 <strcasecmp@plt>
   1334c:	cmp	r0, #0
   13350:	beq	13364 <__assert_fail@plt+0x1638>
   13354:	add	r5, r5, #1
   13358:	cmp	r5, #8
   1335c:	bne	13340 <__assert_fail@plt+0x1614>
   13360:	mov	r5, #7
   13364:	add	r6, r6, #1
   13368:	str	r5, [r9, #4]!
   1336c:	ldr	r1, [pc, #336]	; 134c4 <__assert_fail@plt+0x1798>
   13370:	mov	r0, #0
   13374:	str	r6, [sp, #48]	; 0x30
   13378:	bl	11c00 <strtok@plt>
   1337c:	cmp	r6, #7
   13380:	movgt	r3, #0
   13384:	movle	r3, #1
   13388:	cmp	r0, #0
   1338c:	moveq	r3, #0
   13390:	cmp	r3, #0
   13394:	mov	r8, r0
   13398:	bne	13330 <__assert_fail@plt+0x1604>
   1339c:	mov	sl, r7
   133a0:	ldr	r0, [sp, #16]
   133a4:	bl	118c4 <free@plt>
   133a8:	b	13164 <__assert_fail@plt+0x1438>
   133ac:	mov	r1, r5
   133b0:	ldr	r0, [r4]
   133b4:	bl	12e34 <__assert_fail@plt+0x1108>
   133b8:	str	r0, [sp, #44]	; 0x2c
   133bc:	b	13158 <__assert_fail@plt+0x142c>
   133c0:	ldr	r1, [pc, #264]	; 134d0 <__assert_fail@plt+0x17a4>
   133c4:	mov	r0, r6
   133c8:	bl	11858 <strcmp@plt>
   133cc:	subs	sl, r0, #0
   133d0:	streq	sl, [sp, #40]	; 0x28
   133d4:	beq	13144 <__assert_fail@plt+0x1418>
   133d8:	ldr	r1, [pc, #244]	; 134d4 <__assert_fail@plt+0x17a8>
   133dc:	mov	r0, r6
   133e0:	bl	11858 <strcmp@plt>
   133e4:	cmp	r0, #0
   133e8:	moveq	r7, #2
   133ec:	streq	r7, [sp, #40]	; 0x28
   133f0:	moveq	sl, r7
   133f4:	movne	sl, #3
   133f8:	b	13144 <__assert_fail@plt+0x1418>
   133fc:	ldr	r6, [r2, #20]
   13400:	ldr	r5, [sp, #44]	; 0x2c
   13404:	cmp	r6, r5
   13408:	bne	131fc <__assert_fail@plt+0x14d0>
   1340c:	b	132b8 <__assert_fail@plt+0x158c>
   13410:	ldr	r9, [r2, #24]
   13414:	ldr	lr, [sp, #48]	; 0x30
   13418:	cmp	r9, lr
   1341c:	bne	131fc <__assert_fail@plt+0x14d0>
   13420:	cmp	r9, #0
   13424:	ble	132c4 <__assert_fail@plt+0x1598>
   13428:	ldr	lr, [r2, #28]
   1342c:	cmp	lr, #7
   13430:	beq	131fc <__assert_fail@plt+0x14d0>
   13434:	ldr	r5, [sp, #52]	; 0x34
   13438:	cmp	r5, lr
   1343c:	bne	131fc <__assert_fail@plt+0x14d0>
   13440:	add	r7, sp, #52	; 0x34
   13444:	add	r6, r2, #32
   13448:	mov	lr, #0
   1344c:	b	1345c <__assert_fail@plt+0x1730>
   13450:	ldr	r8, [r7, #4]!
   13454:	cmp	r5, r8
   13458:	bne	131fc <__assert_fail@plt+0x14d0>
   1345c:	add	lr, lr, #1
   13460:	cmp	r9, lr
   13464:	beq	132c4 <__assert_fail@plt+0x1598>
   13468:	ldr	r5, [r6], #4
   1346c:	cmp	r5, #7
   13470:	bne	13450 <__assert_fail@plt+0x1724>
   13474:	b	131fc <__assert_fail@plt+0x14d0>
   13478:	mov	r2, r6
   1347c:	ldr	r1, [pc, #84]	; 134d8 <__assert_fail@plt+0x17ac>
   13480:	mov	r0, #1
   13484:	bl	119b4 <err@plt>
   13488:	ldr	r1, [pc, #76]	; 134dc <__assert_fail@plt+0x17b0>
   1348c:	mov	r2, #5
   13490:	mov	r0, #0
   13494:	bl	11960 <dcgettext@plt>
   13498:	mov	r1, r0
   1349c:	mov	r0, #1
   134a0:	bl	119b4 <err@plt>
   134a4:	bl	11978 <__stack_chk_fail@plt>
   134a8:	andeq	sl, r2, r8, lsr #26
   134ac:			; <UNDEFINED> instruction: 0x000193b0
   134b0:	andeq	r9, r1, r0, asr #8
   134b4:	andeq	r9, r1, r0, asr r4
   134b8:	andeq	r9, r1, ip, asr r4
   134bc:	andeq	r0, r0, r1, lsl #8
   134c0:	andeq	r9, r1, ip, ror r4
   134c4:	andeq	r9, r1, ip, ror #26
   134c8:	andeq	r9, r1, r0, lsr r1
   134cc:	andeq	r9, r1, r8, lsl r4
   134d0:	andeq	r9, r1, r4, ror #8
   134d4:	andeq	r9, r1, ip, ror #8
   134d8:	andeq	r9, r1, ip, lsl #9
   134dc:	andeq	r9, r1, ip, lsl r4
   134e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134e4:	sub	sp, sp, #8192	; 0x2000
   134e8:	ldr	r3, [pc, #976]	; 138c0 <__assert_fail@plt+0x1b94>
   134ec:	sub	sp, sp, #44	; 0x2c
   134f0:	add	r2, sp, #8192	; 0x2000
   134f4:	ldr	r3, [r3]
   134f8:	add	r2, r2, #36	; 0x24
   134fc:	mov	r9, r0
   13500:	mov	r5, r1
   13504:	ldr	r0, [r0, #48]	; 0x30
   13508:	mov	r1, #0
   1350c:	str	r3, [r2]
   13510:	bl	11a74 <scols_table_new_line@plt>
   13514:	subs	r3, r0, #0
   13518:	str	r3, [sp, #16]
   1351c:	beq	138a8 <__assert_fail@plt+0x1b7c>
   13520:	ldr	sl, [pc, #924]	; 138c4 <__assert_fail@plt+0x1b98>
   13524:	ldr	r3, [sl]
   13528:	cmp	r3, #0
   1352c:	beq	137a4 <__assert_fail@plt+0x1a78>
   13530:	ldr	r3, [sl, #4]
   13534:	mov	r4, #0
   13538:	cmp	r3, #6
   1353c:	str	r4, [sp, #32]
   13540:	bgt	135b4 <__assert_fail@plt+0x1888>
   13544:	add	fp, sl, #8
   13548:	cmp	r3, #6
   1354c:	ldrls	pc, [pc, r3, lsl #2]
   13550:	b	1357c <__assert_fail@plt+0x1850>
   13554:	muleq	r1, r8, r6
   13558:	andeq	r3, r1, ip, ror #11
   1355c:	andeq	r3, r1, ip, asr #14
   13560:	andeq	r3, r1, ip, lsr #12
   13564:	andeq	r3, r1, r0, lsl r7
   13568:	andeq	r3, r1, r8, asr #11
   1356c:	andeq	r3, r1, r0, ror r5
   13570:	ldrb	r3, [r9, #53]	; 0x35
   13574:	tst	r3, #64	; 0x40
   13578:	bne	137cc <__assert_fail@plt+0x1aa0>
   1357c:	ldr	r2, [sp, #32]
   13580:	cmp	r2, #0
   13584:	bne	13670 <__assert_fail@plt+0x1944>
   13588:	ldr	r3, [sl]
   1358c:	add	r4, r4, #1
   13590:	cmp	r3, r4
   13594:	bls	137a4 <__assert_fail@plt+0x1a78>
   13598:	mov	r3, #0
   1359c:	cmp	r4, #0
   135a0:	str	r3, [sp, #32]
   135a4:	blt	13888 <__assert_fail@plt+0x1b5c>
   135a8:	ldr	r3, [fp], #4
   135ac:	cmp	r3, #6
   135b0:	ble	13548 <__assert_fail@plt+0x181c>
   135b4:	ldr	r3, [pc, #780]	; 138c8 <__assert_fail@plt+0x1b9c>
   135b8:	mov	r2, #186	; 0xba
   135bc:	ldr	r1, [pc, #776]	; 138cc <__assert_fail@plt+0x1ba0>
   135c0:	ldr	r0, [pc, #776]	; 138d0 <__assert_fail@plt+0x1ba4>
   135c4:	bl	11d2c <__assert_fail@plt>
   135c8:	ldrb	r3, [r9, #52]	; 0x34
   135cc:	tst	r3, #1
   135d0:	beq	1357c <__assert_fail@plt+0x1850>
   135d4:	ldr	r2, [r5, #20]
   135d8:	ldr	r1, [pc, #756]	; 138d4 <__assert_fail@plt+0x1ba8>
   135dc:	add	r0, sp, #32
   135e0:	bl	12d8c <__assert_fail@plt+0x1060>
   135e4:	ldr	r2, [sp, #32]
   135e8:	b	13580 <__assert_fail@plt+0x1854>
   135ec:	ldr	r2, [r9, #24]
   135f0:	ldr	r0, [r5, #12]
   135f4:	ldr	ip, [r5, #8]
   135f8:	ldr	r1, [r9, #28]
   135fc:	mul	r0, r2, r0
   13600:	umull	r2, r3, r2, ip
   13604:	mla	r1, ip, r1, r0
   13608:	ldrsb	r0, [r9, #52]	; 0x34
   1360c:	add	r3, r1, r3
   13610:	cmp	r0, #0
   13614:	blt	13780 <__assert_fail@plt+0x1a54>
   13618:	mov	r0, #0
   1361c:	bl	14e20 <__assert_fail@plt+0x30f4>
   13620:	mov	r2, r0
   13624:	str	r0, [sp, #32]
   13628:	b	13580 <__assert_fail@plt+0x1854>
   1362c:	ldr	r0, [r5, #16]
   13630:	cmp	r0, #0
   13634:	bne	1357c <__assert_fail@plt+0x1850>
   13638:	ldrb	r3, [r5, #60]	; 0x3c
   1363c:	ands	r3, r3, #1
   13640:	movne	r2, #5
   13644:	ldrne	r1, [pc, #652]	; 138d8 <__assert_fail@plt+0x1bac>
   13648:	moveq	r0, r3
   1364c:	moveq	r2, #5
   13650:	ldreq	r1, [pc, #644]	; 138dc <__assert_fail@plt+0x1bb0>
   13654:	bl	11960 <dcgettext@plt>
   13658:	cmp	r0, #0
   1365c:	beq	13588 <__assert_fail@plt+0x185c>
   13660:	bl	1196c <strdup@plt>
   13664:	subs	r2, r0, #0
   13668:	beq	1389c <__assert_fail@plt+0x1b70>
   1366c:	str	r2, [sp, #32]
   13670:	mov	r1, r4
   13674:	ldr	r0, [sp, #16]
   13678:	bl	1184c <scols_line_refer_data@plt>
   1367c:	cmp	r0, #0
   13680:	beq	13588 <__assert_fail@plt+0x185c>
   13684:	mov	r3, #300	; 0x12c
   13688:	ldr	r2, [pc, #572]	; 138cc <__assert_fail@plt+0x1ba0>
   1368c:	ldr	r1, [pc, #588]	; 138e0 <__assert_fail@plt+0x1bb4>
   13690:	mov	r0, #1
   13694:	bl	119b4 <err@plt>
   13698:	ldr	r3, [r9, #24]
   1369c:	ldr	ip, [r5, #12]
   136a0:	ldr	r0, [r5, #4]
   136a4:	ldr	r6, [r5]
   136a8:	ldr	r2, [r5, #8]
   136ac:	ldr	lr, [r9, #28]
   136b0:	mul	r1, r3, ip
   136b4:	mul	r0, r3, r0
   136b8:	mla	ip, lr, r2, r1
   136bc:	mla	r0, lr, r6, r0
   136c0:	umull	r6, r7, r6, r3
   136c4:	umull	r2, r3, r2, r3
   136c8:	ldr	r1, [pc, #532]	; 138e4 <__assert_fail@plt+0x1bb8>
   136cc:	add	r7, r0, r7
   136d0:	strd	r2, [sp, #8]
   136d4:	add	r3, ip, r3
   136d8:	str	r3, [sp, #12]
   136dc:	ldr	r3, [sp, #8]
   136e0:	add	r0, sp, #32
   136e4:	adds	r2, r3, r6
   136e8:	ldr	r3, [sp, #12]
   136ec:	adc	r3, r3, r7
   136f0:	subs	r2, r2, #1
   136f4:	sbc	r3, r3, #0
   136f8:	strd	r2, [sp]
   136fc:	mov	r2, r6
   13700:	mov	r3, r7
   13704:	bl	12d8c <__assert_fail@plt+0x1060>
   13708:	ldr	r2, [sp, #32]
   1370c:	b	13580 <__assert_fail@plt+0x1854>
   13710:	ldrd	r6, [r5, #8]
   13714:	ldrd	r2, [r5]
   13718:	cmp	r7, #0
   1371c:	cmpeq	r6, #1
   13720:	beq	13780 <__assert_fail@plt+0x1a54>
   13724:	adds	r0, r6, r2
   13728:	adc	r1, r7, r3
   1372c:	subs	r0, r0, #1
   13730:	sbc	r1, r1, #0
   13734:	strd	r0, [sp]
   13738:	ldr	r1, [pc, #424]	; 138e8 <__assert_fail@plt+0x1bbc>
   1373c:	add	r0, sp, #32
   13740:	bl	12d8c <__assert_fail@plt+0x1060>
   13744:	ldr	r2, [sp, #32]
   13748:	b	13580 <__assert_fail@plt+0x1854>
   1374c:	ldr	r0, [r5, #16]
   13750:	cmp	r0, #0
   13754:	beq	13794 <__assert_fail@plt+0x1a68>
   13758:	cmp	r0, #1
   1375c:	beq	13874 <__assert_fail@plt+0x1b48>
   13760:	cmp	r0, #2
   13764:	ldrne	r0, [pc, #384]	; 138ec <__assert_fail@plt+0x1bc0>
   13768:	bne	13660 <__assert_fail@plt+0x1934>
   1376c:	mov	r2, #5
   13770:	ldr	r1, [pc, #376]	; 138f0 <__assert_fail@plt+0x1bc4>
   13774:	mov	r0, #0
   13778:	bl	11960 <dcgettext@plt>
   1377c:	b	13658 <__assert_fail@plt+0x192c>
   13780:	ldr	r1, [pc, #364]	; 138f4 <__assert_fail@plt+0x1bc8>
   13784:	add	r0, sp, #32
   13788:	bl	12d8c <__assert_fail@plt+0x1060>
   1378c:	ldr	r2, [sp, #32]
   13790:	b	13580 <__assert_fail@plt+0x1854>
   13794:	mov	r2, #5
   13798:	ldr	r1, [pc, #344]	; 138f8 <__assert_fail@plt+0x1bcc>
   1379c:	bl	11960 <dcgettext@plt>
   137a0:	b	13658 <__assert_fail@plt+0x192c>
   137a4:	add	r3, sp, #8192	; 0x2000
   137a8:	add	r3, r3, #36	; 0x24
   137ac:	ldr	r2, [r3]
   137b0:	ldr	r3, [pc, #264]	; 138c0 <__assert_fail@plt+0x1b94>
   137b4:	ldr	r3, [r3]
   137b8:	cmp	r2, r3
   137bc:	bne	138bc <__assert_fail@plt+0x1b90>
   137c0:	add	sp, sp, #8192	; 0x2000
   137c4:	add	sp, sp, #44	; 0x2c
   137c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137cc:	mov	r8, r5
   137d0:	mov	r6, #0
   137d4:	ldr	r3, [r8, #24]!
   137d8:	strb	r6, [sp, #36]	; 0x24
   137dc:	str	r3, [sp, #8]
   137e0:	add	r7, sp, #36	; 0x24
   137e4:	str	r4, [sp, #20]
   137e8:	str	r9, [sp, #24]
   137ec:	str	r5, [sp, #28]
   137f0:	b	13854 <__assert_fail@plt+0x1b28>
   137f4:	mov	r0, r7
   137f8:	bl	11b04 <strlen@plt>
   137fc:	ldr	r2, [r8, #4]!
   13800:	ldr	r3, [pc, #244]	; 138fc <__assert_fail@plt+0x1bd0>
   13804:	add	r2, r3, r2, lsl #2
   13808:	ldr	r9, [r2, #168]	; 0xa8
   1380c:	mov	r5, r0
   13810:	mov	r0, r9
   13814:	bl	11b04 <strlen@plt>
   13818:	ldr	r3, [pc, #224]	; 13900 <__assert_fail@plt+0x1bd4>
   1381c:	add	r4, r5, r0
   13820:	cmp	r4, r3
   13824:	bhi	13860 <__assert_fail@plt+0x1b34>
   13828:	add	r2, r0, #1
   1382c:	mov	r3, #8192	; 0x2000
   13830:	mov	r1, r9
   13834:	add	r0, r7, r5
   13838:	bl	119f0 <__memcpy_chk@plt>
   1383c:	ldr	r3, [sp, #8]
   13840:	add	r6, r6, #1
   13844:	cmp	r6, r3
   13848:	ldrlt	r3, [pc, #180]	; 13904 <__assert_fail@plt+0x1bd8>
   1384c:	ldrhlt	r3, [r3]
   13850:	strhlt	r3, [r7, r4]
   13854:	ldr	r3, [sp, #8]
   13858:	cmp	r6, r3
   1385c:	blt	137f4 <__assert_fail@plt+0x1ac8>
   13860:	ldr	r4, [sp, #20]
   13864:	ldr	r9, [sp, #24]
   13868:	ldr	r5, [sp, #28]
   1386c:	mov	r0, r7
   13870:	b	13660 <__assert_fail@plt+0x1934>
   13874:	mov	r2, #5
   13878:	ldr	r1, [pc, #136]	; 13908 <__assert_fail@plt+0x1bdc>
   1387c:	mov	r0, #0
   13880:	bl	11960 <dcgettext@plt>
   13884:	b	13658 <__assert_fail@plt+0x192c>
   13888:	ldr	r3, [pc, #56]	; 138c8 <__assert_fail@plt+0x1b9c>
   1388c:	mov	r2, #184	; 0xb8
   13890:	ldr	r1, [pc, #52]	; 138cc <__assert_fail@plt+0x1ba0>
   13894:	ldr	r0, [pc, #112]	; 1390c <__assert_fail@plt+0x1be0>
   13898:	bl	11d2c <__assert_fail@plt>
   1389c:	ldr	r1, [pc, #108]	; 13910 <__assert_fail@plt+0x1be4>
   138a0:	mov	r0, #1
   138a4:	bl	119b4 <err@plt>
   138a8:	mov	r3, #237	; 0xed
   138ac:	ldr	r2, [pc, #24]	; 138cc <__assert_fail@plt+0x1ba0>
   138b0:	ldr	r1, [pc, #40]	; 138e0 <__assert_fail@plt+0x1bb4>
   138b4:	mov	r0, #1
   138b8:	bl	119b4 <err@plt>
   138bc:	bl	11978 <__stack_chk_fail@plt>
   138c0:	andeq	sl, r2, r8, lsr #26
   138c4:	andeq	fp, r2, r0, lsr r0
   138c8:	andeq	r9, r1, r0, asr r1
   138cc:	andeq	r9, r1, ip, lsr #9
   138d0:	andeq	r9, r1, r0, asr #9
   138d4:	andeq	r9, r1, r8, ror #10
   138d8:	andeq	r9, r1, r4, asr r5
   138dc:	andeq	r9, r1, r8, asr r5
   138e0:	andeq	r9, r1, ip, ror #9
   138e4:	andeq	r9, r1, r8, lsl r5
   138e8:	andeq	r9, r1, ip, asr r5
   138ec:	andeq	r9, r1, r8, lsr #9
   138f0:	andeq	r9, r1, r4, lsr r5
   138f4:	andeq	r9, r1, ip, lsr #10
   138f8:	andeq	r9, r1, r4, ror #8
   138fc:	andeq	r9, r1, r8, lsl #1
   13900:	strdeq	r1, [r0], -lr
   13904:	andeq	r9, r1, r0, lsr #29
   13908:	andeq	r9, r1, ip, asr r4
   1390c:	andeq	r9, r1, ip, lsl #10
   13910:	andeq	r9, r1, ip, lsr r5
   13914:	ldr	r3, [pc, #292]	; 13a40 <__assert_fail@plt+0x1d14>
   13918:	push	{r4, r5, r6, lr}
   1391c:	ldr	r4, [r3]
   13920:	mov	r0, r4
   13924:	bl	11a20 <__fpending@plt>
   13928:	mov	r6, r0
   1392c:	mov	r0, r4
   13930:	bl	11900 <ferror@plt>
   13934:	mov	r5, r0
   13938:	mov	r0, r4
   1393c:	bl	11bf4 <fclose@plt>
   13940:	cmp	r5, #0
   13944:	mov	r4, r0
   13948:	bne	139f0 <__assert_fail@plt+0x1cc4>
   1394c:	cmp	r0, #0
   13950:	beq	1396c <__assert_fail@plt+0x1c40>
   13954:	bl	11b34 <__errno_location@plt>
   13958:	cmp	r6, #0
   1395c:	ldr	r3, [r0]
   13960:	bne	139c8 <__assert_fail@plt+0x1c9c>
   13964:	cmp	r3, #9
   13968:	bne	139c8 <__assert_fail@plt+0x1c9c>
   1396c:	ldr	r3, [pc, #208]	; 13a44 <__assert_fail@plt+0x1d18>
   13970:	ldr	r4, [r3]
   13974:	mov	r0, r4
   13978:	bl	11a20 <__fpending@plt>
   1397c:	mov	r6, r0
   13980:	mov	r0, r4
   13984:	bl	11900 <ferror@plt>
   13988:	mov	r5, r0
   1398c:	mov	r0, r4
   13990:	bl	11bf4 <fclose@plt>
   13994:	cmp	r5, #0
   13998:	mov	r4, r0
   1399c:	bne	13a24 <__assert_fail@plt+0x1cf8>
   139a0:	cmp	r0, #0
   139a4:	popeq	{r4, r5, r6, pc}
   139a8:	cmp	r6, #0
   139ac:	bne	139c0 <__assert_fail@plt+0x1c94>
   139b0:	bl	11b34 <__errno_location@plt>
   139b4:	ldr	r3, [r0]
   139b8:	cmp	r3, #9
   139bc:	popeq	{r4, r5, r6, pc}
   139c0:	mov	r0, #1
   139c4:	bl	11924 <_exit@plt>
   139c8:	cmp	r3, #32
   139cc:	beq	1396c <__assert_fail@plt+0x1c40>
   139d0:	cmp	r3, #0
   139d4:	beq	13a0c <__assert_fail@plt+0x1ce0>
   139d8:	mov	r2, #5
   139dc:	ldr	r1, [pc, #100]	; 13a48 <__assert_fail@plt+0x1d1c>
   139e0:	mov	r0, #0
   139e4:	bl	11960 <dcgettext@plt>
   139e8:	bl	11c3c <warn@plt>
   139ec:	b	139c0 <__assert_fail@plt+0x1c94>
   139f0:	bl	11b34 <__errno_location@plt>
   139f4:	cmp	r4, #0
   139f8:	ldr	r3, [r0]
   139fc:	bne	139c8 <__assert_fail@plt+0x1c9c>
   13a00:	cmp	r3, #32
   13a04:	strne	r4, [r0]
   13a08:	beq	1396c <__assert_fail@plt+0x1c40>
   13a0c:	mov	r2, #5
   13a10:	ldr	r1, [pc, #48]	; 13a48 <__assert_fail@plt+0x1d1c>
   13a14:	mov	r0, #0
   13a18:	bl	11960 <dcgettext@plt>
   13a1c:	bl	11b1c <warnx@plt>
   13a20:	b	139c0 <__assert_fail@plt+0x1c94>
   13a24:	cmp	r0, #0
   13a28:	bne	139c0 <__assert_fail@plt+0x1c94>
   13a2c:	bl	11b34 <__errno_location@plt>
   13a30:	ldr	r3, [r0]
   13a34:	cmp	r3, #32
   13a38:	strne	r4, [r0]
   13a3c:	b	139c0 <__assert_fail@plt+0x1c94>
   13a40:	andeq	fp, r2, r4, lsr #32
   13a44:	andeq	fp, r2, r0, lsr #32
   13a48:	andeq	r9, r1, ip, ror #10
   13a4c:	andeq	r0, r0, r0
   13a50:	cmp	r0, #0
   13a54:	mov	r3, #0
   13a58:	str	r3, [r1]
   13a5c:	bxeq	lr
   13a60:	ldrsb	r2, [r0]
   13a64:	cmp	r2, #47	; 0x2f
   13a68:	bne	13aa4 <__assert_fail@plt+0x1d78>
   13a6c:	ldrsb	r3, [r0, #1]
   13a70:	cmp	r3, #47	; 0x2f
   13a74:	bne	13aac <__assert_fail@plt+0x1d80>
   13a78:	add	r3, r0, #1
   13a7c:	b	13a8c <__assert_fail@plt+0x1d60>
   13a80:	ldrsb	r2, [r3]
   13a84:	cmp	r2, #47	; 0x2f
   13a88:	bne	13aac <__assert_fail@plt+0x1d80>
   13a8c:	cmp	r3, #0
   13a90:	mov	r0, r3
   13a94:	bxeq	lr
   13a98:	ldrsb	r2, [r3], #1
   13a9c:	cmp	r2, #47	; 0x2f
   13aa0:	beq	13a80 <__assert_fail@plt+0x1d54>
   13aa4:	cmp	r2, #0
   13aa8:	beq	13ae8 <__assert_fail@plt+0x1dbc>
   13aac:	mov	r3, #1
   13ab0:	str	r3, [r1]
   13ab4:	ldrsb	r3, [r0, #1]
   13ab8:	add	r2, r0, #1
   13abc:	cmp	r3, #47	; 0x2f
   13ac0:	cmpne	r3, #0
   13ac4:	bxeq	lr
   13ac8:	rsb	r3, r0, #1
   13acc:	add	ip, r2, r3
   13ad0:	str	ip, [r1]
   13ad4:	ldrsb	ip, [r2, #1]!
   13ad8:	cmp	ip, #0
   13adc:	cmpne	ip, #47	; 0x2f
   13ae0:	bne	13acc <__assert_fail@plt+0x1da0>
   13ae4:	bx	lr
   13ae8:	mov	r0, r2
   13aec:	bx	lr
   13af0:	push	{r4, r5, r6, r7, r8, lr}
   13af4:	mov	r7, r1
   13af8:	ldrsb	r1, [r0]
   13afc:	cmp	r1, #0
   13b00:	movne	r5, r0
   13b04:	movne	r4, #0
   13b08:	beq	13b74 <__assert_fail@plt+0x1e48>
   13b0c:	cmp	r1, #92	; 0x5c
   13b10:	addne	r6, r5, r4
   13b14:	beq	13b44 <__assert_fail@plt+0x1e18>
   13b18:	mov	r0, r7
   13b1c:	bl	11b10 <strchr@plt>
   13b20:	cmp	r0, #0
   13b24:	bne	13b6c <__assert_fail@plt+0x1e40>
   13b28:	ldrsb	r1, [r6, #1]!
   13b2c:	add	r4, r4, #1
   13b30:	mov	r0, r4
   13b34:	cmp	r1, #0
   13b38:	popeq	{r4, r5, r6, r7, r8, pc}
   13b3c:	cmp	r1, #92	; 0x5c
   13b40:	bne	13b18 <__assert_fail@plt+0x1dec>
   13b44:	add	r3, r5, r4
   13b48:	ldrsb	r3, [r3, #1]
   13b4c:	cmp	r3, #0
   13b50:	beq	13b6c <__assert_fail@plt+0x1e40>
   13b54:	add	r4, r4, #2
   13b58:	mov	r0, r4
   13b5c:	ldrsb	r1, [r5, r4]
   13b60:	cmp	r1, #0
   13b64:	bne	13b0c <__assert_fail@plt+0x1de0>
   13b68:	pop	{r4, r5, r6, r7, r8, pc}
   13b6c:	mov	r0, r4
   13b70:	pop	{r4, r5, r6, r7, r8, pc}
   13b74:	mov	r0, r1
   13b78:	pop	{r4, r5, r6, r7, r8, pc}
   13b7c:	ldr	ip, [pc, #244]	; 13c78 <__assert_fail@plt+0x1f4c>
   13b80:	push	{r4, r5, r6, r7, r8, r9, lr}
   13b84:	add	ip, pc, ip
   13b88:	ldr	lr, [pc, #236]	; 13c7c <__assert_fail@plt+0x1f50>
   13b8c:	sub	sp, sp, #12
   13b90:	mov	r5, #0
   13b94:	ldr	r7, [ip, lr]
   13b98:	mov	r4, r0
   13b9c:	mov	r8, r1
   13ba0:	ldr	r3, [r7]
   13ba4:	mov	r0, ip
   13ba8:	mov	r9, r2
   13bac:	str	r5, [sp]
   13bb0:	str	r3, [sp, #4]
   13bb4:	bl	11b34 <__errno_location@plt>
   13bb8:	cmp	r4, r5
   13bbc:	str	r5, [r0]
   13bc0:	beq	13bd0 <__assert_fail@plt+0x1ea4>
   13bc4:	ldrsb	r3, [r4]
   13bc8:	cmp	r3, r5
   13bcc:	bne	13bf0 <__assert_fail@plt+0x1ec4>
   13bd0:	ldr	r1, [pc, #168]	; 13c80 <__assert_fail@plt+0x1f54>
   13bd4:	mov	r3, r4
   13bd8:	add	r1, pc, r1
   13bdc:	mov	r2, r8
   13be0:	ldr	r0, [r1]
   13be4:	ldr	r1, [pc, #152]	; 13c84 <__assert_fail@plt+0x1f58>
   13be8:	add	r1, pc, r1
   13bec:	bl	11c24 <errx@plt>
   13bf0:	mov	r6, r0
   13bf4:	mov	r2, r9
   13bf8:	mov	r3, r5
   13bfc:	mov	r1, sp
   13c00:	mov	r0, r4
   13c04:	bl	11948 <__strtoull_internal@plt>
   13c08:	ldr	r2, [r6]
   13c0c:	cmp	r2, r5
   13c10:	bne	13c4c <__assert_fail@plt+0x1f20>
   13c14:	ldr	r3, [sp]
   13c18:	cmp	r3, r4
   13c1c:	beq	13bd0 <__assert_fail@plt+0x1ea4>
   13c20:	cmp	r3, r5
   13c24:	beq	13c34 <__assert_fail@plt+0x1f08>
   13c28:	ldrsb	r3, [r3]
   13c2c:	cmp	r3, r5
   13c30:	bne	13bd0 <__assert_fail@plt+0x1ea4>
   13c34:	ldr	r2, [sp, #4]
   13c38:	ldr	r3, [r7]
   13c3c:	cmp	r2, r3
   13c40:	bne	13c74 <__assert_fail@plt+0x1f48>
   13c44:	add	sp, sp, #12
   13c48:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13c4c:	ldr	r3, [pc, #52]	; 13c88 <__assert_fail@plt+0x1f5c>
   13c50:	cmp	r2, #34	; 0x22
   13c54:	add	r3, pc, r3
   13c58:	ldr	r0, [r3]
   13c5c:	bne	13bd0 <__assert_fail@plt+0x1ea4>
   13c60:	ldr	r1, [pc, #36]	; 13c8c <__assert_fail@plt+0x1f60>
   13c64:	mov	r3, r4
   13c68:	mov	r2, r8
   13c6c:	add	r1, pc, r1
   13c70:	bl	119b4 <err@plt>
   13c74:	bl	11978 <__stack_chk_fail@plt>
   13c78:	andeq	r7, r1, r8, lsr #5
   13c7c:	andeq	r0, r0, r0, asr #3
   13c80:	andeq	r7, r1, r8, lsr #8
   13c84:	muleq	r0, ip, r0
   13c88:	andeq	r7, r1, ip, lsr #7
   13c8c:	andeq	r6, r0, r8, lsl r0
   13c90:	push	{r4, lr}
   13c94:	mov	r5, r0
   13c98:	mov	r4, r1
   13c9c:	bl	11b34 <__errno_location@plt>
   13ca0:	ldr	ip, [pc, #32]	; 13cc8 <__assert_fail@plt+0x1f9c>
   13ca4:	ldr	r1, [pc, #32]	; 13ccc <__assert_fail@plt+0x1fa0>
   13ca8:	add	ip, pc, ip
   13cac:	mov	lr, #34	; 0x22
   13cb0:	mov	r3, r5
   13cb4:	mov	r2, r4
   13cb8:	add	r1, pc, r1
   13cbc:	str	lr, [r0]
   13cc0:	ldr	r0, [ip]
   13cc4:	bl	119b4 <err@plt>
   13cc8:	andeq	r7, r1, r8, asr r3
   13ccc:	andeq	r5, r0, ip, asr #31
   13cd0:	push	{r4, r5, r6, lr}
   13cd4:	mov	r4, r0
   13cd8:	mov	r5, r1
   13cdc:	bl	13b7c <__assert_fail@plt+0x1e50>
   13ce0:	mov	r3, #0
   13ce4:	mvn	r2, #0
   13ce8:	cmp	r1, r3
   13cec:	cmpeq	r0, r2
   13cf0:	popls	{r4, r5, r6, pc}
   13cf4:	mov	r1, r5
   13cf8:	mov	r0, r4
   13cfc:	bl	13c90 <__assert_fail@plt+0x1f64>
   13d00:	ldr	r3, [pc, #8]	; 13d10 <__assert_fail@plt+0x1fe4>
   13d04:	add	r3, pc, r3
   13d08:	str	r0, [r3]
   13d0c:	bx	lr
   13d10:	strdeq	r7, [r1], -ip
   13d14:	ldr	r3, [pc, #1648]	; 1438c <__assert_fail@plt+0x2660>
   13d18:	ldr	ip, [pc, #1648]	; 14390 <__assert_fail@plt+0x2664>
   13d1c:	add	r3, pc, r3
   13d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d24:	mov	r5, r1
   13d28:	ldr	r1, [r3, ip]
   13d2c:	sub	sp, sp, #52	; 0x34
   13d30:	mov	ip, r1
   13d34:	mov	r8, r0
   13d38:	str	r1, [sp, #24]
   13d3c:	mov	r0, #0
   13d40:	mov	r1, #0
   13d44:	ldr	r3, [ip]
   13d48:	strd	r0, [r5]
   13d4c:	mov	r9, r2
   13d50:	str	r3, [sp, #44]	; 0x2c
   13d54:	bl	11b34 <__errno_location@plt>
   13d58:	cmp	r8, #0
   13d5c:	mov	r4, r0
   13d60:	beq	13f40 <__assert_fail@plt+0x2214>
   13d64:	ldrsb	fp, [r8]
   13d68:	cmp	fp, #0
   13d6c:	beq	13f40 <__assert_fail@plt+0x2214>
   13d70:	bl	11ac8 <__ctype_b_loc@plt>
   13d74:	mov	r2, r8
   13d78:	ldr	r1, [r0]
   13d7c:	b	13d84 <__assert_fail@plt+0x2058>
   13d80:	ldrsb	fp, [r2, #1]!
   13d84:	uxtb	r3, fp
   13d88:	lsl	r3, r3, #1
   13d8c:	ldrh	ip, [r1, r3]
   13d90:	ands	ip, ip, #8192	; 0x2000
   13d94:	bne	13d80 <__assert_fail@plt+0x2054>
   13d98:	cmp	fp, #45	; 0x2d
   13d9c:	beq	13f40 <__assert_fail@plt+0x2214>
   13da0:	add	fp, sp, #40	; 0x28
   13da4:	mov	r3, ip
   13da8:	mov	r2, ip
   13dac:	str	ip, [r4]
   13db0:	mov	r1, fp
   13db4:	mov	r0, r8
   13db8:	str	ip, [sp, #40]	; 0x28
   13dbc:	bl	11948 <__strtoull_internal@plt>
   13dc0:	ldr	sl, [sp, #40]	; 0x28
   13dc4:	cmp	sl, r8
   13dc8:	mov	r2, r0
   13dcc:	mov	r3, r1
   13dd0:	ldr	r0, [r4]
   13dd4:	strd	r2, [sp, #16]
   13dd8:	beq	140c0 <__assert_fail@plt+0x2394>
   13ddc:	cmp	r0, #0
   13de0:	bne	13f68 <__assert_fail@plt+0x223c>
   13de4:	cmp	sl, #0
   13de8:	beq	140f4 <__assert_fail@plt+0x23c8>
   13dec:	ldrsb	r0, [sl]
   13df0:	cmp	r0, #0
   13df4:	beq	140e8 <__assert_fail@plt+0x23bc>
   13df8:	mov	r8, #0
   13dfc:	mov	r2, #0
   13e00:	mov	r3, #0
   13e04:	str	r9, [sp, #32]
   13e08:	mov	r6, fp
   13e0c:	mov	r9, sl
   13e10:	mov	r7, r8
   13e14:	mov	sl, r2
   13e18:	mov	fp, r3
   13e1c:	str	r5, [sp, #28]
   13e20:	ldrsb	r2, [r9, #1]
   13e24:	cmp	r2, #105	; 0x69
   13e28:	beq	13fac <__assert_fail@plt+0x2280>
   13e2c:	bic	r1, r2, #32
   13e30:	cmp	r1, #66	; 0x42
   13e34:	bne	140cc <__assert_fail@plt+0x23a0>
   13e38:	ldrsb	r2, [r9, #2]
   13e3c:	cmp	r2, #0
   13e40:	beq	142b0 <__assert_fail@plt+0x2584>
   13e44:	bl	11c6c <localeconv@plt>
   13e48:	cmp	r0, #0
   13e4c:	beq	13f40 <__assert_fail@plt+0x2214>
   13e50:	ldr	r2, [r0]
   13e54:	cmp	r2, #0
   13e58:	beq	13f40 <__assert_fail@plt+0x2214>
   13e5c:	mov	r0, r2
   13e60:	str	r2, [sp]
   13e64:	bl	11b04 <strlen@plt>
   13e68:	orrs	r3, sl, fp
   13e6c:	mov	r5, r0
   13e70:	bne	13f40 <__assert_fail@plt+0x2214>
   13e74:	ldrsb	r1, [r9]
   13e78:	cmp	r1, #0
   13e7c:	beq	13f40 <__assert_fail@plt+0x2214>
   13e80:	ldr	r2, [sp]
   13e84:	mov	r1, r9
   13e88:	mov	r0, r2
   13e8c:	mov	r2, r5
   13e90:	bl	11cd8 <strncmp@plt>
   13e94:	cmp	r0, #0
   13e98:	bne	13f40 <__assert_fail@plt+0x2214>
   13e9c:	ldrsb	r2, [r9, r5]
   13ea0:	add	r5, r9, r5
   13ea4:	cmp	r2, #48	; 0x30
   13ea8:	bne	13ec8 <__assert_fail@plt+0x219c>
   13eac:	add	r8, r8, #1
   13eb0:	sub	r1, r8, r5
   13eb4:	mov	r3, r5
   13eb8:	add	r8, r3, r1
   13ebc:	ldrsb	r2, [r3, #1]!
   13ec0:	cmp	r2, #48	; 0x30
   13ec4:	beq	13eb8 <__assert_fail@plt+0x218c>
   13ec8:	mov	r3, #0
   13ecc:	str	r7, [r4]
   13ed0:	mov	r2, r3
   13ed4:	mov	r1, r6
   13ed8:	mov	r0, r5
   13edc:	str	r7, [sp, #40]	; 0x28
   13ee0:	bl	11948 <__strtoull_internal@plt>
   13ee4:	ldr	r9, [sp, #40]	; 0x28
   13ee8:	cmp	r9, r5
   13eec:	mov	sl, r0
   13ef0:	mov	fp, r1
   13ef4:	beq	140bc <__assert_fail@plt+0x2390>
   13ef8:	ldr	ip, [r4]
   13efc:	cmp	ip, #0
   13f00:	beq	13f98 <__assert_fail@plt+0x226c>
   13f04:	subs	r3, r0, #1
   13f08:	str	r3, [sp, #8]
   13f0c:	sbc	r3, r1, #0
   13f10:	str	r3, [sp, #12]
   13f14:	ldrd	r2, [sp, #8]
   13f18:	mvn	r1, #0
   13f1c:	mvn	r0, #2
   13f20:	cmp	r3, r1
   13f24:	cmpeq	r2, r0
   13f28:	bhi	142ec <__assert_fail@plt+0x25c0>
   13f2c:	cmp	r9, #0
   13f30:	beq	13f40 <__assert_fail@plt+0x2214>
   13f34:	ldrsb	r2, [r9]
   13f38:	cmp	r2, #0
   13f3c:	bne	13e20 <__assert_fail@plt+0x20f4>
   13f40:	mov	r3, #22
   13f44:	mvn	r0, #21
   13f48:	str	r3, [r4]
   13f4c:	ldr	r3, [sp, #24]
   13f50:	ldr	r2, [sp, #44]	; 0x2c
   13f54:	ldr	r3, [r3]
   13f58:	cmp	r2, r3
   13f5c:	bne	14388 <__assert_fail@plt+0x265c>
   13f60:	add	sp, sp, #52	; 0x34
   13f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f68:	subs	r6, r2, #1
   13f6c:	sbc	r7, r3, #0
   13f70:	mvn	r3, #0
   13f74:	mvn	r2, #2
   13f78:	cmp	r7, r3
   13f7c:	cmpeq	r6, r2
   13f80:	bls	13de4 <__assert_fail@plt+0x20b8>
   13f84:	rsb	r0, r0, #0
   13f88:	cmp	r0, #0
   13f8c:	bge	13f4c <__assert_fail@plt+0x2220>
   13f90:	rsb	r3, r0, #0
   13f94:	b	13f48 <__assert_fail@plt+0x221c>
   13f98:	orrs	r3, sl, fp
   13f9c:	bne	13f2c <__assert_fail@plt+0x2200>
   13fa0:	ldrsb	r2, [r9, #1]
   13fa4:	cmp	r2, #105	; 0x69
   13fa8:	bne	13e2c <__assert_fail@plt+0x2100>
   13fac:	ldrsb	r2, [r9, #2]
   13fb0:	bic	r2, r2, #32
   13fb4:	cmp	r2, #66	; 0x42
   13fb8:	bne	13e44 <__assert_fail@plt+0x2118>
   13fbc:	ldrsb	r2, [r9, #3]
   13fc0:	cmp	r2, #0
   13fc4:	bne	13e44 <__assert_fail@plt+0x2118>
   13fc8:	strd	sl, [sp]
   13fcc:	mov	sl, r9
   13fd0:	ldr	r9, [sp, #32]
   13fd4:	mov	r3, #1024	; 0x400
   13fd8:	ldr	r5, [sp, #28]
   13fdc:	str	r3, [sp, #28]
   13fe0:	ldrsb	r7, [sl]
   13fe4:	ldr	r6, [pc, #936]	; 14394 <__assert_fail@plt+0x2668>
   13fe8:	add	r6, pc, r6
   13fec:	mov	r1, r7
   13ff0:	mov	r0, r6
   13ff4:	bl	11b10 <strchr@plt>
   13ff8:	cmp	r0, #0
   13ffc:	beq	142cc <__assert_fail@plt+0x25a0>
   14000:	sub	ip, r0, r6
   14004:	add	fp, ip, #1
   14008:	cmp	fp, #0
   1400c:	beq	140d8 <__assert_fail@plt+0x23ac>
   14010:	ldr	r3, [sp, #20]
   14014:	ldr	r6, [sp, #28]
   14018:	cmp	r3, #0
   1401c:	mov	r0, #0
   14020:	asr	r7, r6, #31
   14024:	mov	r1, #0
   14028:	bne	14328 <__assert_fail@plt+0x25fc>
   1402c:	orrs	r3, r0, r1
   14030:	bne	1411c <__assert_fail@plt+0x23f0>
   14034:	str	fp, [sp, #32]
   14038:	sub	ip, ip, #1
   1403c:	str	r8, [sp, #36]	; 0x24
   14040:	mov	fp, r4
   14044:	ldrd	r0, [sp, #16]
   14048:	mov	lr, r5
   1404c:	mov	sl, r9
   14050:	b	14060 <__assert_fail@plt+0x2334>
   14054:	orrs	r3, r4, r5
   14058:	sub	ip, ip, #1
   1405c:	bne	14104 <__assert_fail@plt+0x23d8>
   14060:	mul	r2, r0, r7
   14064:	cmn	ip, #1
   14068:	mla	r2, r6, r1, r2
   1406c:	umull	r0, r1, r0, r6
   14070:	add	r2, r2, r1
   14074:	mov	r1, r2
   14078:	beq	14290 <__assert_fail@plt+0x2564>
   1407c:	cmp	r2, #0
   14080:	mov	r4, #0
   14084:	mov	r5, #0
   14088:	beq	14054 <__assert_fail@plt+0x2328>
   1408c:	umull	r2, r3, r6, r2
   14090:	umull	r8, r9, r0, r6
   14094:	strd	r2, [sp, #8]
   14098:	mov	r8, r9
   1409c:	ldr	r3, [sp, #12]
   140a0:	adds	r8, r2, r8
   140a4:	mov	r2, #0
   140a8:	adc	r3, r3, r2
   140ac:	cmp	r3, r2
   140b0:	movne	r4, #1
   140b4:	movne	r5, #0
   140b8:	b	14054 <__assert_fail@plt+0x2328>
   140bc:	ldr	r0, [r4]
   140c0:	cmp	r0, #0
   140c4:	beq	13f40 <__assert_fail@plt+0x2214>
   140c8:	b	13f84 <__assert_fail@plt+0x2258>
   140cc:	cmp	r2, #0
   140d0:	bne	13e44 <__assert_fail@plt+0x2118>
   140d4:	b	13fc8 <__assert_fail@plt+0x229c>
   140d8:	cmp	r9, #0
   140dc:	movne	r0, fp
   140e0:	bne	14128 <__assert_fail@plt+0x23fc>
   140e4:	mov	r0, r9
   140e8:	ldrd	r2, [sp, #16]
   140ec:	strd	r2, [r5]
   140f0:	b	13f4c <__assert_fail@plt+0x2220>
   140f4:	ldrd	r2, [sp, #16]
   140f8:	mov	r0, sl
   140fc:	strd	r2, [r5]
   14100:	b	13f4c <__assert_fail@plt+0x2220>
   14104:	mov	r4, fp
   14108:	ldr	r8, [sp, #36]	; 0x24
   1410c:	ldr	fp, [sp, #32]
   14110:	mov	r5, lr
   14114:	mov	r9, sl
   14118:	strd	r0, [sp, #16]
   1411c:	mvn	r0, #33	; 0x21
   14120:	cmp	r9, #0
   14124:	beq	1412c <__assert_fail@plt+0x2400>
   14128:	str	fp, [r9]
   1412c:	ldrd	r2, [sp]
   14130:	mov	r1, r2
   14134:	orrs	r3, r1, r3
   14138:	movne	r3, #1
   1413c:	moveq	r3, #0
   14140:	cmp	fp, #0
   14144:	moveq	r3, #0
   14148:	cmp	r3, #0
   1414c:	beq	14284 <__assert_fail@plt+0x2558>
   14150:	ldr	r3, [pc, #576]	; 14398 <__assert_fail@plt+0x266c>
   14154:	ldr	r1, [pc, #576]	; 1439c <__assert_fail@plt+0x2670>
   14158:	umull	ip, r3, r3, r8
   1415c:	smull	ip, r1, r1, r8
   14160:	lsr	r3, r3, #1
   14164:	rsb	r1, r1, r8, asr #31
   14168:	add	r3, r3, r3, lsl #1
   1416c:	add	r1, r1, fp
   14170:	subs	r3, r8, r3
   14174:	sub	r6, r1, #1
   14178:	bne	142f4 <__assert_fail@plt+0x25c8>
   1417c:	ldrd	r8, [sp]
   14180:	adds	r3, r8, r8
   14184:	adc	r2, r9, r9
   14188:	adds	r3, r3, r8
   1418c:	adc	r2, r2, r9
   14190:	lsl	ip, r3, #5
   14194:	lsl	lr, r2, #5
   14198:	orr	lr, lr, r3, lsr #27
   1419c:	adds	r3, r3, ip
   141a0:	adc	r2, r2, lr
   141a4:	adds	r3, r8, r3
   141a8:	str	r3, [sp]
   141ac:	ldr	r3, [sp, #4]
   141b0:	adc	r3, r3, r2
   141b4:	str	r3, [sp, #4]
   141b8:	cmp	r6, #0
   141bc:	blt	13f40 <__assert_fail@plt+0x2214>
   141c0:	beq	14268 <__assert_fail@plt+0x253c>
   141c4:	ldr	r3, [sp, #4]
   141c8:	ldr	r8, [sp, #28]
   141cc:	cmp	r3, #0
   141d0:	mov	r6, #0
   141d4:	asr	r9, r8, #31
   141d8:	mov	r7, #0
   141dc:	bne	1435c <__assert_fail@plt+0x2630>
   141e0:	orrs	r3, r6, r7
   141e4:	bne	14268 <__assert_fail@plt+0x253c>
   141e8:	sub	r1, r1, #3
   141ec:	ldrd	r2, [sp]
   141f0:	mov	lr, r4
   141f4:	str	r5, [sp, #8]
   141f8:	b	14208 <__assert_fail@plt+0x24dc>
   141fc:	orrs	ip, r6, r7
   14200:	sub	r1, r1, #1
   14204:	bne	1425c <__assert_fail@plt+0x2530>
   14208:	mul	ip, r2, r9
   1420c:	cmn	r1, #1
   14210:	mla	ip, r8, r3, ip
   14214:	umull	r2, r3, r2, r8
   14218:	add	ip, ip, r3
   1421c:	mov	r3, ip
   14220:	beq	1425c <__assert_fail@plt+0x2530>
   14224:	cmp	ip, #0
   14228:	mov	r6, #0
   1422c:	mov	r7, #0
   14230:	beq	141fc <__assert_fail@plt+0x24d0>
   14234:	umull	sl, fp, r2, r8
   14238:	umull	r4, r5, r8, ip
   1423c:	mov	ip, fp
   14240:	adds	ip, r4, ip
   14244:	mov	ip, #0
   14248:	adc	ip, r5, ip
   1424c:	cmp	ip, #0
   14250:	movne	r6, #1
   14254:	movne	r7, #0
   14258:	b	141fc <__assert_fail@plt+0x24d0>
   1425c:	ldr	r5, [sp, #8]
   14260:	mov	r4, lr
   14264:	strd	r2, [sp]
   14268:	ldrd	r2, [sp]
   1426c:	ldr	r1, [sp, #16]
   14270:	adds	r1, r1, r2
   14274:	str	r1, [sp, #16]
   14278:	ldr	r1, [sp, #20]
   1427c:	adc	r3, r1, r3
   14280:	str	r3, [sp, #20]
   14284:	ldrd	r2, [sp, #16]
   14288:	strd	r2, [r5]
   1428c:	b	13f88 <__assert_fail@plt+0x225c>
   14290:	mov	r4, fp
   14294:	strd	r0, [sp, #16]
   14298:	ldr	r8, [sp, #36]	; 0x24
   1429c:	ldr	fp, [sp, #32]
   142a0:	mov	r5, lr
   142a4:	mov	r9, sl
   142a8:	mov	r0, #0
   142ac:	b	14120 <__assert_fail@plt+0x23f4>
   142b0:	mov	r3, #1000	; 0x3e8
   142b4:	strd	sl, [sp]
   142b8:	ldr	r5, [sp, #28]
   142bc:	mov	sl, r9
   142c0:	str	r3, [sp, #28]
   142c4:	ldr	r9, [sp, #32]
   142c8:	b	13fe0 <__assert_fail@plt+0x22b4>
   142cc:	ldr	r6, [pc, #204]	; 143a0 <__assert_fail@plt+0x2674>
   142d0:	mov	r1, r7
   142d4:	add	r6, pc, r6
   142d8:	mov	r0, r6
   142dc:	bl	11b10 <strchr@plt>
   142e0:	cmp	r0, #0
   142e4:	bne	14000 <__assert_fail@plt+0x22d4>
   142e8:	b	13f40 <__assert_fail@plt+0x2214>
   142ec:	mov	r0, ip
   142f0:	b	13f84 <__assert_fail@plt+0x2258>
   142f4:	cmp	r3, #1
   142f8:	bne	141b8 <__assert_fail@plt+0x248c>
   142fc:	ldrd	r8, [sp]
   14300:	lsl	r2, r9, #2
   14304:	lsl	r3, r8, #2
   14308:	adds	r3, r3, r8
   1430c:	orr	r2, r2, r8, lsr #30
   14310:	adc	r2, r2, r9
   14314:	adds	r3, r3, r3
   14318:	str	r3, [sp]
   1431c:	adc	r3, r2, r2
   14320:	str	r3, [sp, #4]
   14324:	b	141b8 <__assert_fail@plt+0x248c>
   14328:	ldr	lr, [sp, #28]
   1432c:	ldr	r3, [sp, #16]
   14330:	ldr	sl, [sp, #20]
   14334:	umull	r2, r3, r3, lr
   14338:	str	r3, [sp, #8]
   1433c:	mov	r3, #0
   14340:	str	r3, [sp, #12]
   14344:	ldrd	r2, [sp, #8]
   14348:	umlal	r2, r3, sl, lr
   1434c:	cmp	r3, #0
   14350:	movne	r0, #1
   14354:	movne	r1, #0
   14358:	b	1402c <__assert_fail@plt+0x2300>
   1435c:	ldr	r3, [sp]
   14360:	ldr	ip, [sp, #28]
   14364:	ldr	lr, [sp, #4]
   14368:	umull	sl, fp, r3, ip
   1436c:	mov	r3, #0
   14370:	mov	r2, fp
   14374:	umlal	r2, r3, lr, ip
   14378:	cmp	r3, #0
   1437c:	movne	r6, #1
   14380:	movne	r7, #0
   14384:	b	141e0 <__assert_fail@plt+0x24b4>
   14388:	bl	11978 <__stack_chk_fail@plt>
   1438c:	andeq	r7, r1, r0, lsl r1
   14390:	andeq	r0, r0, r0, asr #3
   14394:	andeq	r5, r0, r8, lsr #25
   14398:	bge	feabee4c <optarg@@GLIBC_2.4+0xfea93e24>
   1439c:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   143a0:	andeq	r5, r0, r8, asr #19
   143a4:	mov	r2, #0
   143a8:	b	13d14 <__assert_fail@plt+0x1fe8>
   143ac:	push	{r4, r5, r6, lr}
   143b0:	subs	r5, r0, #0
   143b4:	mov	r6, r1
   143b8:	beq	14424 <__assert_fail@plt+0x26f8>
   143bc:	ldrsb	r4, [r5]
   143c0:	cmp	r4, #0
   143c4:	beq	14438 <__assert_fail@plt+0x270c>
   143c8:	bl	11ac8 <__ctype_b_loc@plt>
   143cc:	mov	r3, r5
   143d0:	ldr	r0, [r0]
   143d4:	b	143ec <__assert_fail@plt+0x26c0>
   143d8:	adds	r3, r3, #1
   143dc:	beq	14424 <__assert_fail@plt+0x26f8>
   143e0:	ldrsb	r4, [r3]
   143e4:	cmp	r4, #0
   143e8:	beq	14400 <__assert_fail@plt+0x26d4>
   143ec:	uxtb	r4, r4
   143f0:	lsl	r4, r4, #1
   143f4:	ldrh	r2, [r0, r4]
   143f8:	tst	r2, #2048	; 0x800
   143fc:	bne	143d8 <__assert_fail@plt+0x26ac>
   14400:	cmp	r6, #0
   14404:	strne	r3, [r6]
   14408:	cmp	r5, r3
   1440c:	bcs	14430 <__assert_fail@plt+0x2704>
   14410:	ldrsb	r3, [r3]
   14414:	cmp	r3, #0
   14418:	bne	14430 <__assert_fail@plt+0x2704>
   1441c:	mov	r0, #1
   14420:	pop	{r4, r5, r6, pc}
   14424:	cmp	r6, #0
   14428:	movne	r3, #0
   1442c:	strne	r3, [r6]
   14430:	mov	r0, #0
   14434:	pop	{r4, r5, r6, pc}
   14438:	cmp	r1, #0
   1443c:	strne	r5, [r1]
   14440:	b	14430 <__assert_fail@plt+0x2704>
   14444:	push	{r4, r5, r6, lr}
   14448:	subs	r5, r0, #0
   1444c:	mov	r6, r1
   14450:	beq	144bc <__assert_fail@plt+0x2790>
   14454:	ldrsb	r4, [r5]
   14458:	cmp	r4, #0
   1445c:	beq	144d0 <__assert_fail@plt+0x27a4>
   14460:	bl	11ac8 <__ctype_b_loc@plt>
   14464:	mov	r3, r5
   14468:	ldr	r0, [r0]
   1446c:	b	14484 <__assert_fail@plt+0x2758>
   14470:	adds	r3, r3, #1
   14474:	beq	144bc <__assert_fail@plt+0x2790>
   14478:	ldrsb	r4, [r3]
   1447c:	cmp	r4, #0
   14480:	beq	14498 <__assert_fail@plt+0x276c>
   14484:	uxtb	r4, r4
   14488:	lsl	r4, r4, #1
   1448c:	ldrh	r2, [r0, r4]
   14490:	tst	r2, #4096	; 0x1000
   14494:	bne	14470 <__assert_fail@plt+0x2744>
   14498:	cmp	r6, #0
   1449c:	strne	r3, [r6]
   144a0:	cmp	r5, r3
   144a4:	bcs	144c8 <__assert_fail@plt+0x279c>
   144a8:	ldrsb	r3, [r3]
   144ac:	cmp	r3, #0
   144b0:	bne	144c8 <__assert_fail@plt+0x279c>
   144b4:	mov	r0, #1
   144b8:	pop	{r4, r5, r6, pc}
   144bc:	cmp	r6, #0
   144c0:	movne	r3, #0
   144c4:	strne	r3, [r6]
   144c8:	mov	r0, #0
   144cc:	pop	{r4, r5, r6, pc}
   144d0:	cmp	r1, #0
   144d4:	strne	r5, [r1]
   144d8:	b	144c8 <__assert_fail@plt+0x279c>
   144dc:	push	{r1, r2, r3}
   144e0:	ldr	r3, [pc, #188]	; 145a4 <__assert_fail@plt+0x2878>
   144e4:	ldr	r2, [pc, #188]	; 145a8 <__assert_fail@plt+0x287c>
   144e8:	add	r3, pc, r3
   144ec:	push	{r4, r5, r6, r7, r8, lr}
   144f0:	sub	sp, sp, #12
   144f4:	ldr	r7, [r3, r2]
   144f8:	ldr	r8, [sp, #36]	; 0x24
   144fc:	mov	r6, r0
   14500:	ldr	r3, [r7]
   14504:	add	r4, sp, #48	; 0x30
   14508:	str	r3, [sp, #4]
   1450c:	b	14528 <__assert_fail@plt+0x27fc>
   14510:	mov	r1, r5
   14514:	mov	r0, r6
   14518:	bl	11858 <strcmp@plt>
   1451c:	add	r4, r4, #8
   14520:	cmp	r0, #0
   14524:	beq	14560 <__assert_fail@plt+0x2834>
   14528:	ldr	r1, [r4, #-8]
   1452c:	sub	r3, r4, #4
   14530:	cmp	r1, #0
   14534:	str	r3, [sp]
   14538:	beq	14580 <__assert_fail@plt+0x2854>
   1453c:	ldr	r5, [r4, #-4]
   14540:	str	r4, [sp]
   14544:	cmp	r5, #0
   14548:	beq	14580 <__assert_fail@plt+0x2854>
   1454c:	mov	r0, r6
   14550:	bl	11858 <strcmp@plt>
   14554:	cmp	r0, #0
   14558:	bne	14510 <__assert_fail@plt+0x27e4>
   1455c:	mov	r0, #1
   14560:	ldr	r2, [sp, #4]
   14564:	ldr	r3, [r7]
   14568:	cmp	r2, r3
   1456c:	bne	145a0 <__assert_fail@plt+0x2874>
   14570:	add	sp, sp, #12
   14574:	pop	{r4, r5, r6, r7, r8, lr}
   14578:	add	sp, sp, #12
   1457c:	bx	lr
   14580:	ldr	r1, [pc, #36]	; 145ac <__assert_fail@plt+0x2880>
   14584:	mov	r3, r6
   14588:	add	r1, pc, r1
   1458c:	mov	r2, r8
   14590:	ldr	r0, [r1]
   14594:	ldr	r1, [pc, #20]	; 145b0 <__assert_fail@plt+0x2884>
   14598:	add	r1, pc, r1
   1459c:	bl	11c24 <errx@plt>
   145a0:	bl	11978 <__stack_chk_fail@plt>
   145a4:	andeq	r6, r1, r4, asr #18
   145a8:	andeq	r0, r0, r0, asr #3
   145ac:	andeq	r6, r1, r8, ror sl
   145b0:	andeq	r5, r0, ip, ror #13
   145b4:	cmp	r1, #0
   145b8:	beq	14604 <__assert_fail@plt+0x28d8>
   145bc:	ldrsb	r3, [r0]
   145c0:	cmp	r3, #0
   145c4:	beq	14604 <__assert_fail@plt+0x28d8>
   145c8:	sxtb	r2, r2
   145cc:	cmp	r3, r2
   145d0:	bxeq	lr
   145d4:	add	r1, r0, r1
   145d8:	add	r3, r0, #1
   145dc:	b	145f8 <__assert_fail@plt+0x28cc>
   145e0:	ldrsb	ip, [r3]
   145e4:	add	r3, r3, #1
   145e8:	cmp	ip, #0
   145ec:	beq	14604 <__assert_fail@plt+0x28d8>
   145f0:	cmp	ip, r2
   145f4:	bxeq	lr
   145f8:	cmp	r3, r1
   145fc:	mov	r0, r3
   14600:	bne	145e0 <__assert_fail@plt+0x28b4>
   14604:	mov	r0, #0
   14608:	bx	lr
   1460c:	push	{r4, r5, r6, lr}
   14610:	mov	r2, #10
   14614:	mov	r4, r0
   14618:	mov	r5, r1
   1461c:	bl	13cd0 <__assert_fail@plt+0x1fa4>
   14620:	cmp	r0, #65536	; 0x10000
   14624:	bcs	14630 <__assert_fail@plt+0x2904>
   14628:	uxth	r0, r0
   1462c:	pop	{r4, r5, r6, pc}
   14630:	mov	r1, r5
   14634:	mov	r0, r4
   14638:	bl	13c90 <__assert_fail@plt+0x1f64>
   1463c:	push	{r4, r5, r6, lr}
   14640:	mov	r2, #16
   14644:	mov	r4, r0
   14648:	mov	r5, r1
   1464c:	bl	13cd0 <__assert_fail@plt+0x1fa4>
   14650:	cmp	r0, #65536	; 0x10000
   14654:	bcs	14660 <__assert_fail@plt+0x2934>
   14658:	uxth	r0, r0
   1465c:	pop	{r4, r5, r6, pc}
   14660:	mov	r1, r5
   14664:	mov	r0, r4
   14668:	bl	13c90 <__assert_fail@plt+0x1f64>
   1466c:	mov	r2, #10
   14670:	b	13cd0 <__assert_fail@plt+0x1fa4>
   14674:	mov	r2, #16
   14678:	b	13cd0 <__assert_fail@plt+0x1fa4>
   1467c:	ldr	r2, [pc, #236]	; 14770 <__assert_fail@plt+0x2a44>
   14680:	ldr	ip, [pc, #236]	; 14774 <__assert_fail@plt+0x2a48>
   14684:	add	r2, pc, r2
   14688:	push	{r4, r5, r6, r7, r8, lr}
   1468c:	sub	sp, sp, #8
   14690:	ldr	r7, [r2, ip]
   14694:	mov	r5, #0
   14698:	mov	r4, r0
   1469c:	ldr	r3, [r7]
   146a0:	mov	r8, r1
   146a4:	str	r5, [sp]
   146a8:	str	r3, [sp, #4]
   146ac:	bl	11b34 <__errno_location@plt>
   146b0:	cmp	r4, r5
   146b4:	str	r5, [r0]
   146b8:	beq	146c8 <__assert_fail@plt+0x299c>
   146bc:	ldrsb	r3, [r4]
   146c0:	cmp	r3, r5
   146c4:	bne	146e8 <__assert_fail@plt+0x29bc>
   146c8:	ldr	r1, [pc, #168]	; 14778 <__assert_fail@plt+0x2a4c>
   146cc:	mov	r3, r4
   146d0:	add	r1, pc, r1
   146d4:	mov	r2, r8
   146d8:	ldr	r0, [r1]
   146dc:	ldr	r1, [pc, #152]	; 1477c <__assert_fail@plt+0x2a50>
   146e0:	add	r1, pc, r1
   146e4:	bl	11c24 <errx@plt>
   146e8:	mov	r6, r0
   146ec:	mov	r2, #10
   146f0:	mov	r3, r5
   146f4:	mov	r1, sp
   146f8:	mov	r0, r4
   146fc:	bl	11c90 <__strtoll_internal@plt>
   14700:	ldr	r2, [r6]
   14704:	cmp	r2, r5
   14708:	bne	14744 <__assert_fail@plt+0x2a18>
   1470c:	ldr	r3, [sp]
   14710:	cmp	r3, r4
   14714:	beq	146c8 <__assert_fail@plt+0x299c>
   14718:	cmp	r3, r5
   1471c:	beq	1472c <__assert_fail@plt+0x2a00>
   14720:	ldrsb	r3, [r3]
   14724:	cmp	r3, r5
   14728:	bne	146c8 <__assert_fail@plt+0x299c>
   1472c:	ldr	r2, [sp, #4]
   14730:	ldr	r3, [r7]
   14734:	cmp	r2, r3
   14738:	bne	1476c <__assert_fail@plt+0x2a40>
   1473c:	add	sp, sp, #8
   14740:	pop	{r4, r5, r6, r7, r8, pc}
   14744:	ldr	r3, [pc, #52]	; 14780 <__assert_fail@plt+0x2a54>
   14748:	cmp	r2, #34	; 0x22
   1474c:	add	r3, pc, r3
   14750:	ldr	r0, [r3]
   14754:	bne	146c8 <__assert_fail@plt+0x299c>
   14758:	ldr	r1, [pc, #36]	; 14784 <__assert_fail@plt+0x2a58>
   1475c:	mov	r3, r4
   14760:	mov	r2, r8
   14764:	add	r1, pc, r1
   14768:	bl	119b4 <err@plt>
   1476c:	bl	11978 <__stack_chk_fail@plt>
   14770:	andeq	r6, r1, r8, lsr #15
   14774:	andeq	r0, r0, r0, asr #3
   14778:	andeq	r6, r1, r0, lsr r9
   1477c:	andeq	r5, r0, r4, lsr #11
   14780:			; <UNDEFINED> instruction: 0x000168b4
   14784:	andeq	r5, r0, r0, lsr #10
   14788:	push	{r4, r5, r6, r7, r8, lr}
   1478c:	mov	r7, r0
   14790:	mov	r6, r1
   14794:	bl	1467c <__assert_fail@plt+0x2950>
   14798:	mov	r3, #0
   1479c:	mvn	r2, #0
   147a0:	adds	r4, r0, #-2147483648	; 0x80000000
   147a4:	adc	r5, r1, #0
   147a8:	cmp	r5, r3
   147ac:	cmpeq	r4, r2
   147b0:	popls	{r4, r5, r6, r7, r8, pc}
   147b4:	bl	11b34 <__errno_location@plt>
   147b8:	ldr	ip, [pc, #32]	; 147e0 <__assert_fail@plt+0x2ab4>
   147bc:	ldr	r1, [pc, #32]	; 147e4 <__assert_fail@plt+0x2ab8>
   147c0:	add	ip, pc, ip
   147c4:	mov	lr, #34	; 0x22
   147c8:	mov	r3, r7
   147cc:	mov	r2, r6
   147d0:	add	r1, pc, r1
   147d4:	str	lr, [r0]
   147d8:	ldr	r0, [ip]
   147dc:	bl	119b4 <err@plt>
   147e0:	andeq	r6, r1, r0, asr #16
   147e4:			; <UNDEFINED> instruction: 0x000054b4
   147e8:	push	{r4, r5, r6, lr}
   147ec:	mov	r5, r0
   147f0:	mov	r4, r1
   147f4:	bl	14788 <__assert_fail@plt+0x2a5c>
   147f8:	add	r3, r0, #32768	; 0x8000
   147fc:	cmp	r3, #65536	; 0x10000
   14800:	bcs	1480c <__assert_fail@plt+0x2ae0>
   14804:	sxth	r0, r0
   14808:	pop	{r4, r5, r6, pc}
   1480c:	bl	11b34 <__errno_location@plt>
   14810:	ldr	ip, [pc, #32]	; 14838 <__assert_fail@plt+0x2b0c>
   14814:	ldr	r1, [pc, #32]	; 1483c <__assert_fail@plt+0x2b10>
   14818:	add	ip, pc, ip
   1481c:	mov	lr, #34	; 0x22
   14820:	mov	r3, r5
   14824:	mov	r2, r4
   14828:	add	r1, pc, r1
   1482c:	str	lr, [r0]
   14830:	ldr	r0, [ip]
   14834:	bl	119b4 <err@plt>
   14838:	andeq	r6, r1, r8, ror #15
   1483c:	andeq	r5, r0, ip, asr r4
   14840:	mov	r2, #10
   14844:	b	13b7c <__assert_fail@plt+0x1e50>
   14848:	mov	r2, #16
   1484c:	b	13b7c <__assert_fail@plt+0x1e50>
   14850:	ldr	r2, [pc, #228]	; 1493c <__assert_fail@plt+0x2c10>
   14854:	ldr	r3, [pc, #228]	; 14940 <__assert_fail@plt+0x2c14>
   14858:	add	r2, pc, r2
   1485c:	push	{r4, r5, r6, r7, r8, lr}
   14860:	sub	sp, sp, #8
   14864:	ldr	r7, [r2, r3]
   14868:	mov	r5, #0
   1486c:	mov	r4, r0
   14870:	ldr	r3, [r7]
   14874:	mov	r8, r1
   14878:	str	r5, [sp]
   1487c:	str	r3, [sp, #4]
   14880:	bl	11b34 <__errno_location@plt>
   14884:	cmp	r4, r5
   14888:	str	r5, [r0]
   1488c:	beq	1489c <__assert_fail@plt+0x2b70>
   14890:	ldrsb	r3, [r4]
   14894:	cmp	r3, r5
   14898:	bne	148bc <__assert_fail@plt+0x2b90>
   1489c:	ldr	r1, [pc, #160]	; 14944 <__assert_fail@plt+0x2c18>
   148a0:	mov	r3, r4
   148a4:	add	r1, pc, r1
   148a8:	mov	r2, r8
   148ac:	ldr	r0, [r1]
   148b0:	ldr	r1, [pc, #144]	; 14948 <__assert_fail@plt+0x2c1c>
   148b4:	add	r1, pc, r1
   148b8:	bl	11c24 <errx@plt>
   148bc:	mov	r6, r0
   148c0:	mov	r1, sp
   148c4:	mov	r0, r4
   148c8:	bl	11bb8 <strtod@plt>
   148cc:	ldr	r2, [r6]
   148d0:	cmp	r2, r5
   148d4:	bne	14910 <__assert_fail@plt+0x2be4>
   148d8:	ldr	r3, [sp]
   148dc:	cmp	r3, r4
   148e0:	beq	1489c <__assert_fail@plt+0x2b70>
   148e4:	cmp	r3, r5
   148e8:	beq	148f8 <__assert_fail@plt+0x2bcc>
   148ec:	ldrsb	r3, [r3]
   148f0:	cmp	r3, r5
   148f4:	bne	1489c <__assert_fail@plt+0x2b70>
   148f8:	ldr	r2, [sp, #4]
   148fc:	ldr	r3, [r7]
   14900:	cmp	r2, r3
   14904:	bne	14938 <__assert_fail@plt+0x2c0c>
   14908:	add	sp, sp, #8
   1490c:	pop	{r4, r5, r6, r7, r8, pc}
   14910:	ldr	r3, [pc, #52]	; 1494c <__assert_fail@plt+0x2c20>
   14914:	cmp	r2, #34	; 0x22
   14918:	add	r3, pc, r3
   1491c:	ldr	r0, [r3]
   14920:	bne	1489c <__assert_fail@plt+0x2b70>
   14924:	ldr	r1, [pc, #36]	; 14950 <__assert_fail@plt+0x2c24>
   14928:	mov	r3, r4
   1492c:	mov	r2, r8
   14930:	add	r1, pc, r1
   14934:	bl	119b4 <err@plt>
   14938:	bl	11978 <__stack_chk_fail@plt>
   1493c:	ldrdeq	r6, [r1], -r4
   14940:	andeq	r0, r0, r0, asr #3
   14944:	andeq	r6, r1, ip, asr r7
   14948:	ldrdeq	r5, [r0], -r0
   1494c:	andeq	r6, r1, r8, ror #13
   14950:	andeq	r5, r0, r4, asr r3
   14954:	ldr	r2, [pc, #232]	; 14a44 <__assert_fail@plt+0x2d18>
   14958:	ldr	r3, [pc, #232]	; 14a48 <__assert_fail@plt+0x2d1c>
   1495c:	add	r2, pc, r2
   14960:	push	{r4, r5, r6, r7, r8, lr}
   14964:	sub	sp, sp, #8
   14968:	ldr	r7, [r2, r3]
   1496c:	mov	r5, #0
   14970:	mov	r4, r0
   14974:	ldr	r3, [r7]
   14978:	mov	r8, r1
   1497c:	str	r5, [sp]
   14980:	str	r3, [sp, #4]
   14984:	bl	11b34 <__errno_location@plt>
   14988:	cmp	r4, r5
   1498c:	str	r5, [r0]
   14990:	beq	149a0 <__assert_fail@plt+0x2c74>
   14994:	ldrsb	r3, [r4]
   14998:	cmp	r3, r5
   1499c:	bne	149c0 <__assert_fail@plt+0x2c94>
   149a0:	ldr	r1, [pc, #164]	; 14a4c <__assert_fail@plt+0x2d20>
   149a4:	mov	r3, r4
   149a8:	add	r1, pc, r1
   149ac:	mov	r2, r8
   149b0:	ldr	r0, [r1]
   149b4:	ldr	r1, [pc, #148]	; 14a50 <__assert_fail@plt+0x2d24>
   149b8:	add	r1, pc, r1
   149bc:	bl	11c24 <errx@plt>
   149c0:	mov	r6, r0
   149c4:	mov	r2, #10
   149c8:	mov	r1, sp
   149cc:	mov	r0, r4
   149d0:	bl	11870 <strtol@plt>
   149d4:	ldr	r2, [r6]
   149d8:	cmp	r2, r5
   149dc:	bne	14a18 <__assert_fail@plt+0x2cec>
   149e0:	ldr	r3, [sp]
   149e4:	cmp	r3, r4
   149e8:	beq	149a0 <__assert_fail@plt+0x2c74>
   149ec:	cmp	r3, r5
   149f0:	beq	14a00 <__assert_fail@plt+0x2cd4>
   149f4:	ldrsb	r3, [r3]
   149f8:	cmp	r3, r5
   149fc:	bne	149a0 <__assert_fail@plt+0x2c74>
   14a00:	ldr	r2, [sp, #4]
   14a04:	ldr	r3, [r7]
   14a08:	cmp	r2, r3
   14a0c:	bne	14a40 <__assert_fail@plt+0x2d14>
   14a10:	add	sp, sp, #8
   14a14:	pop	{r4, r5, r6, r7, r8, pc}
   14a18:	ldr	r3, [pc, #52]	; 14a54 <__assert_fail@plt+0x2d28>
   14a1c:	cmp	r2, #34	; 0x22
   14a20:	add	r3, pc, r3
   14a24:	ldr	r0, [r3]
   14a28:	bne	149a0 <__assert_fail@plt+0x2c74>
   14a2c:	ldr	r1, [pc, #36]	; 14a58 <__assert_fail@plt+0x2d2c>
   14a30:	mov	r3, r4
   14a34:	mov	r2, r8
   14a38:	add	r1, pc, r1
   14a3c:	bl	119b4 <err@plt>
   14a40:	bl	11978 <__stack_chk_fail@plt>
   14a44:	ldrdeq	r6, [r1], -r0
   14a48:	andeq	r0, r0, r0, asr #3
   14a4c:	andeq	r6, r1, r8, asr r6
   14a50:	andeq	r5, r0, ip, asr #5
   14a54:	andeq	r6, r1, r0, ror #11
   14a58:	andeq	r5, r0, ip, asr #4
   14a5c:	ldr	r2, [pc, #232]	; 14b4c <__assert_fail@plt+0x2e20>
   14a60:	ldr	r3, [pc, #232]	; 14b50 <__assert_fail@plt+0x2e24>
   14a64:	add	r2, pc, r2
   14a68:	push	{r4, r5, r6, r7, r8, lr}
   14a6c:	sub	sp, sp, #8
   14a70:	ldr	r7, [r2, r3]
   14a74:	mov	r5, #0
   14a78:	mov	r4, r0
   14a7c:	ldr	r3, [r7]
   14a80:	mov	r8, r1
   14a84:	str	r5, [sp]
   14a88:	str	r3, [sp, #4]
   14a8c:	bl	11b34 <__errno_location@plt>
   14a90:	cmp	r4, r5
   14a94:	str	r5, [r0]
   14a98:	beq	14aa8 <__assert_fail@plt+0x2d7c>
   14a9c:	ldrsb	r3, [r4]
   14aa0:	cmp	r3, r5
   14aa4:	bne	14ac8 <__assert_fail@plt+0x2d9c>
   14aa8:	ldr	r1, [pc, #164]	; 14b54 <__assert_fail@plt+0x2e28>
   14aac:	mov	r3, r4
   14ab0:	add	r1, pc, r1
   14ab4:	mov	r2, r8
   14ab8:	ldr	r0, [r1]
   14abc:	ldr	r1, [pc, #148]	; 14b58 <__assert_fail@plt+0x2e2c>
   14ac0:	add	r1, pc, r1
   14ac4:	bl	11c24 <errx@plt>
   14ac8:	mov	r6, r0
   14acc:	mov	r2, #10
   14ad0:	mov	r1, sp
   14ad4:	mov	r0, r4
   14ad8:	bl	11af8 <strtoul@plt>
   14adc:	ldr	r2, [r6]
   14ae0:	cmp	r2, r5
   14ae4:	bne	14b20 <__assert_fail@plt+0x2df4>
   14ae8:	ldr	r3, [sp]
   14aec:	cmp	r3, r4
   14af0:	beq	14aa8 <__assert_fail@plt+0x2d7c>
   14af4:	cmp	r3, r5
   14af8:	beq	14b08 <__assert_fail@plt+0x2ddc>
   14afc:	ldrsb	r3, [r3]
   14b00:	cmp	r3, r5
   14b04:	bne	14aa8 <__assert_fail@plt+0x2d7c>
   14b08:	ldr	r2, [sp, #4]
   14b0c:	ldr	r3, [r7]
   14b10:	cmp	r2, r3
   14b14:	bne	14b48 <__assert_fail@plt+0x2e1c>
   14b18:	add	sp, sp, #8
   14b1c:	pop	{r4, r5, r6, r7, r8, pc}
   14b20:	ldr	r3, [pc, #52]	; 14b5c <__assert_fail@plt+0x2e30>
   14b24:	cmp	r2, #34	; 0x22
   14b28:	add	r3, pc, r3
   14b2c:	ldr	r0, [r3]
   14b30:	bne	14aa8 <__assert_fail@plt+0x2d7c>
   14b34:	ldr	r1, [pc, #36]	; 14b60 <__assert_fail@plt+0x2e34>
   14b38:	mov	r3, r4
   14b3c:	mov	r2, r8
   14b40:	add	r1, pc, r1
   14b44:	bl	119b4 <err@plt>
   14b48:	bl	11978 <__stack_chk_fail@plt>
   14b4c:	andeq	r6, r1, r8, asr #7
   14b50:	andeq	r0, r0, r0, asr #3
   14b54:	andeq	r6, r1, r0, asr r5
   14b58:	andeq	r5, r0, r4, asr #3
   14b5c:	ldrdeq	r6, [r1], -r8
   14b60:	andeq	r5, r0, r4, asr #2
   14b64:	ldr	r3, [pc, #140]	; 14bf8 <__assert_fail@plt+0x2ecc>
   14b68:	ldr	r2, [pc, #140]	; 14bfc <__assert_fail@plt+0x2ed0>
   14b6c:	add	r3, pc, r3
   14b70:	push	{r4, r5, r6, lr}
   14b74:	sub	sp, sp, #16
   14b78:	ldr	r4, [r3, r2]
   14b7c:	mov	r5, r1
   14b80:	mov	r1, sp
   14b84:	ldr	r3, [r4]
   14b88:	mov	r6, r0
   14b8c:	str	r3, [sp, #12]
   14b90:	bl	143a4 <__assert_fail@plt+0x2678>
   14b94:	cmp	r0, #0
   14b98:	beq	14bd8 <__assert_fail@plt+0x2eac>
   14b9c:	bl	11b34 <__errno_location@plt>
   14ba0:	ldr	r3, [pc, #88]	; 14c00 <__assert_fail@plt+0x2ed4>
   14ba4:	mov	r2, r5
   14ba8:	ldr	r1, [pc, r3]
   14bac:	ldr	r3, [r0]
   14bb0:	mov	r0, r1
   14bb4:	cmp	r3, #0
   14bb8:	mov	r3, r6
   14bbc:	beq	14bcc <__assert_fail@plt+0x2ea0>
   14bc0:	ldr	r1, [pc, #60]	; 14c04 <__assert_fail@plt+0x2ed8>
   14bc4:	add	r1, pc, r1
   14bc8:	bl	119b4 <err@plt>
   14bcc:	ldr	r1, [pc, #52]	; 14c08 <__assert_fail@plt+0x2edc>
   14bd0:	add	r1, pc, r1
   14bd4:	bl	11c24 <errx@plt>
   14bd8:	ldr	r2, [sp, #12]
   14bdc:	ldr	r3, [r4]
   14be0:	ldrd	r0, [sp]
   14be4:	cmp	r2, r3
   14be8:	bne	14bf4 <__assert_fail@plt+0x2ec8>
   14bec:	add	sp, sp, #16
   14bf0:	pop	{r4, r5, r6, pc}
   14bf4:	bl	11978 <__stack_chk_fail@plt>
   14bf8:	andeq	r6, r1, r0, asr #5
   14bfc:	andeq	r0, r0, r0, asr #3
   14c00:	andeq	r6, r1, r8, asr r4
   14c04:	andeq	r5, r0, r0, asr #1
   14c08:	strheq	r5, [r0], -r4
   14c0c:	push	{r4, lr}
   14c10:	mov	r4, r1
   14c14:	mov	r1, r2
   14c18:	bl	14850 <__assert_fail@plt+0x2b24>
   14c1c:	vldr	d6, [pc, #28]	; 14c40 <__assert_fail@plt+0x2f14>
   14c20:	vcvt.s32.f64	s15, d0
   14c24:	vcvt.f64.s32	d5, s15
   14c28:	vstr	s15, [r4]
   14c2c:	vsub.f64	d0, d0, d5
   14c30:	vmul.f64	d0, d0, d6
   14c34:	vcvt.s32.f64	s0, d0
   14c38:	vstr	s0, [r4, #4]
   14c3c:	pop	{r4, pc}
   14c40:	andeq	r0, r0, r0
   14c44:	smlawbmi	lr, r0, r4, r8
   14c48:	and	r2, r0, #61440	; 0xf000
   14c4c:	cmp	r2, #16384	; 0x4000
   14c50:	moveq	r2, r1
   14c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c58:	moveq	sl, #100	; 0x64
   14c5c:	mov	r3, r0
   14c60:	add	r9, r1, #1
   14c64:	add	r8, r1, #2
   14c68:	add	r7, r1, #3
   14c6c:	add	r6, r1, #4
   14c70:	add	r5, r1, #5
   14c74:	add	r4, r1, #6
   14c78:	add	lr, r1, #7
   14c7c:	add	ip, r1, #8
   14c80:	add	r0, r1, #9
   14c84:	strbeq	sl, [r2], #10
   14c88:	beq	14d2c <__assert_fail@plt+0x3000>
   14c8c:	cmp	r2, #40960	; 0xa000
   14c90:	moveq	r2, r1
   14c94:	moveq	sl, #108	; 0x6c
   14c98:	strbeq	sl, [r2], #10
   14c9c:	beq	14d2c <__assert_fail@plt+0x3000>
   14ca0:	cmp	r2, #8192	; 0x2000
   14ca4:	moveq	r2, r1
   14ca8:	moveq	sl, #99	; 0x63
   14cac:	strbeq	sl, [r2], #10
   14cb0:	beq	14d2c <__assert_fail@plt+0x3000>
   14cb4:	cmp	r2, #24576	; 0x6000
   14cb8:	moveq	r2, r1
   14cbc:	moveq	sl, #98	; 0x62
   14cc0:	strbeq	sl, [r2], #10
   14cc4:	beq	14d2c <__assert_fail@plt+0x3000>
   14cc8:	cmp	r2, #49152	; 0xc000
   14ccc:	moveq	r2, r1
   14cd0:	moveq	sl, #115	; 0x73
   14cd4:	strbeq	sl, [r2], #10
   14cd8:	beq	14d2c <__assert_fail@plt+0x3000>
   14cdc:	cmp	r2, #4096	; 0x1000
   14ce0:	moveq	r2, r1
   14ce4:	moveq	sl, #112	; 0x70
   14ce8:	strbeq	sl, [r2], #10
   14cec:	beq	14d2c <__assert_fail@plt+0x3000>
   14cf0:	cmp	r2, #32768	; 0x8000
   14cf4:	moveq	r2, r1
   14cf8:	moveq	sl, #45	; 0x2d
   14cfc:	strbeq	sl, [r2], #10
   14d00:	beq	14d2c <__assert_fail@plt+0x3000>
   14d04:	mov	r2, r0
   14d08:	mov	r0, ip
   14d0c:	mov	ip, lr
   14d10:	mov	lr, r4
   14d14:	mov	r4, r5
   14d18:	mov	r5, r6
   14d1c:	mov	r6, r7
   14d20:	mov	r7, r8
   14d24:	mov	r8, r9
   14d28:	mov	r9, r1
   14d2c:	tst	r3, #256	; 0x100
   14d30:	movne	fp, #114	; 0x72
   14d34:	moveq	fp, #45	; 0x2d
   14d38:	tst	r3, #128	; 0x80
   14d3c:	movne	sl, #119	; 0x77
   14d40:	moveq	sl, #45	; 0x2d
   14d44:	tst	r3, #2048	; 0x800
   14d48:	strb	fp, [r9]
   14d4c:	and	r9, r3, #64	; 0x40
   14d50:	strb	sl, [r8]
   14d54:	beq	14df0 <__assert_fail@plt+0x30c4>
   14d58:	cmp	r9, #0
   14d5c:	movne	r9, #115	; 0x73
   14d60:	moveq	r9, #83	; 0x53
   14d64:	tst	r3, #32
   14d68:	movne	r8, #114	; 0x72
   14d6c:	moveq	r8, #45	; 0x2d
   14d70:	tst	r3, #16
   14d74:	strb	r9, [r7]
   14d78:	movne	r7, #119	; 0x77
   14d7c:	moveq	r7, #45	; 0x2d
   14d80:	tst	r3, #1024	; 0x400
   14d84:	strb	r8, [r6]
   14d88:	and	r6, r3, #8
   14d8c:	strb	r7, [r5]
   14d90:	beq	14e00 <__assert_fail@plt+0x30d4>
   14d94:	cmp	r6, #0
   14d98:	movne	r6, #115	; 0x73
   14d9c:	moveq	r6, #83	; 0x53
   14da0:	tst	r3, #4
   14da4:	movne	r5, #114	; 0x72
   14da8:	moveq	r5, #45	; 0x2d
   14dac:	tst	r3, #2
   14db0:	strb	r6, [r4]
   14db4:	movne	r4, #119	; 0x77
   14db8:	moveq	r4, #45	; 0x2d
   14dbc:	tst	r3, #512	; 0x200
   14dc0:	strb	r5, [lr]
   14dc4:	and	r3, r3, #1
   14dc8:	strb	r4, [ip]
   14dcc:	beq	14e10 <__assert_fail@plt+0x30e4>
   14dd0:	cmp	r3, #0
   14dd4:	movne	ip, #116	; 0x74
   14dd8:	moveq	ip, #84	; 0x54
   14ddc:	mov	r3, #0
   14de0:	strb	ip, [r0]
   14de4:	mov	r0, r1
   14de8:	strb	r3, [r2]
   14dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14df0:	cmp	r9, #0
   14df4:	movne	r9, #120	; 0x78
   14df8:	moveq	r9, #45	; 0x2d
   14dfc:	b	14d64 <__assert_fail@plt+0x3038>
   14e00:	cmp	r6, #0
   14e04:	movne	r6, #120	; 0x78
   14e08:	moveq	r6, #45	; 0x2d
   14e0c:	b	14da0 <__assert_fail@plt+0x3074>
   14e10:	cmp	r3, #0
   14e14:	movne	ip, #120	; 0x78
   14e18:	moveq	ip, #45	; 0x2d
   14e1c:	b	14ddc <__assert_fail@plt+0x30b0>
   14e20:	ldr	r1, [pc, #680]	; 150d0 <__assert_fail@plt+0x33a4>
   14e24:	ldr	ip, [pc, #680]	; 150d4 <__assert_fail@plt+0x33a8>
   14e28:	add	r1, pc, r1
   14e2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e30:	sub	sp, sp, #108	; 0x6c
   14e34:	ldr	r8, [r1, ip]
   14e38:	tst	r0, #2
   14e3c:	strd	r2, [sp, #32]
   14e40:	ldr	r1, [r8]
   14e44:	addeq	r9, sp, #60	; 0x3c
   14e48:	str	r1, [sp, #100]	; 0x64
   14e4c:	ldrd	r2, [sp, #32]
   14e50:	movne	r1, #32
   14e54:	strbne	r1, [sp, #60]	; 0x3c
   14e58:	addne	ip, sp, #61	; 0x3d
   14e5c:	addne	r9, sp, #60	; 0x3c
   14e60:	moveq	ip, r9
   14e64:	mov	r1, #10
   14e68:	mov	sl, #1
   14e6c:	sub	lr, r1, #32
   14e70:	lsl	r4, sl, r1
   14e74:	lsl	r5, sl, lr
   14e78:	rsb	lr, r1, #32
   14e7c:	orr	r5, r5, sl, lsr lr
   14e80:	cmp	r3, r5
   14e84:	cmpeq	r2, r4
   14e88:	bcc	15044 <__assert_fail@plt+0x3318>
   14e8c:	add	r1, r1, #10
   14e90:	cmp	r1, #70	; 0x46
   14e94:	bne	14e6c <__assert_fail@plt+0x3140>
   14e98:	mov	lr, ip
   14e9c:	strd	r2, [sp, #32]
   14ea0:	mov	r4, r2
   14ea4:	tst	r0, #1
   14ea8:	mov	r2, #69	; 0x45
   14eac:	bic	r5, r3, #-268435456	; 0xf0000000
   14eb0:	lsr	sl, r3, #28
   14eb4:	strb	r2, [lr], #1
   14eb8:	bne	1502c <__assert_fail@plt+0x3300>
   14ebc:	orrs	r3, r4, r5
   14ec0:	mov	r3, #0
   14ec4:	strb	r3, [lr]
   14ec8:	beq	1506c <__assert_fail@plt+0x3340>
   14ecc:	sub	r2, r1, #20
   14ed0:	rsb	r0, r2, #32
   14ed4:	lsr	r3, r4, r2
   14ed8:	sub	r1, r1, #52	; 0x34
   14edc:	orr	r3, r3, r5, lsl r0
   14ee0:	orr	r3, r3, r5, lsr r1
   14ee4:	lsr	r2, r5, r2
   14ee8:	adds	r6, r3, #50	; 0x32
   14eec:	adc	r7, r2, #0
   14ef0:	mov	r3, #0
   14ef4:	mov	r2, #100	; 0x64
   14ef8:	mov	r0, r6
   14efc:	mov	r1, r7
   14f00:	bl	18e88 <__assert_fail@plt+0x715c>
   14f04:	cmp	r1, #0
   14f08:	cmpeq	r0, #10
   14f0c:	mov	r2, r0
   14f10:	mov	r3, r1
   14f14:	addeq	sl, sl, #1
   14f18:	beq	1506c <__assert_fail@plt+0x3340>
   14f1c:	cmp	r7, #0
   14f20:	cmpeq	r6, #99	; 0x63
   14f24:	strd	r2, [sp, #32]
   14f28:	bls	1506c <__assert_fail@plt+0x3340>
   14f2c:	bl	11c6c <localeconv@plt>
   14f30:	ldrd	r2, [sp, #32]
   14f34:	cmp	r0, #0
   14f38:	beq	150b4 <__assert_fail@plt+0x3388>
   14f3c:	ldr	r0, [r0]
   14f40:	cmp	r0, #0
   14f44:	beq	150c0 <__assert_fail@plt+0x3394>
   14f48:	ldrsb	r1, [r0]
   14f4c:	cmp	r1, #0
   14f50:	ldreq	r0, [pc, #384]	; 150d8 <__assert_fail@plt+0x33ac>
   14f54:	addeq	r0, pc, r0
   14f58:	ldr	r1, [pc, #380]	; 150dc <__assert_fail@plt+0x33b0>
   14f5c:	strd	r2, [sp, #16]
   14f60:	add	r1, pc, r1
   14f64:	add	r4, sp, #68	; 0x44
   14f68:	mov	r3, #32
   14f6c:	str	r0, [sp, #8]
   14f70:	str	r1, [sp]
   14f74:	str	r9, [sp, #24]
   14f78:	str	sl, [sp, #4]
   14f7c:	mov	r0, r4
   14f80:	mov	r1, r3
   14f84:	mov	r2, #1
   14f88:	bl	11d08 <__snprintf_chk@plt>
   14f8c:	b	15094 <__assert_fail@plt+0x3368>
   14f90:	ldr	r4, [pc, #328]	; 150e0 <__assert_fail@plt+0x33b4>
   14f94:	mvn	sl, #0
   14f98:	ldr	fp, [pc, #324]	; 150e4 <__assert_fail@plt+0x33b8>
   14f9c:	umull	r2, r3, lr, r4
   14fa0:	sub	r4, r1, #42	; 0x2a
   14fa4:	strd	r2, [sp, #40]	; 0x28
   14fa8:	ldr	r3, [sp, #44]	; 0x2c
   14fac:	lsl	r2, sl, lr
   14fb0:	lsr	r3, r3, #3
   14fb4:	str	r3, [sp, #52]	; 0x34
   14fb8:	ldr	r3, [sp, #32]
   14fbc:	str	r4, [sp, #48]	; 0x30
   14fc0:	orr	r4, r2, sl, lsl r4
   14fc4:	lsr	r2, r3, lr
   14fc8:	mov	r3, r2
   14fcc:	ldr	r2, [sp, #52]	; 0x34
   14fd0:	add	fp, pc, fp
   14fd4:	str	r4, [sp, #40]	; 0x28
   14fd8:	ldrsb	fp, [fp, r2]
   14fdc:	mov	r2, r3
   14fe0:	ldr	r3, [sp, #36]	; 0x24
   14fe4:	rsb	r5, lr, #32
   14fe8:	ldr	r4, [sp, #40]	; 0x28
   14fec:	orr	r2, r2, r3, lsl r5
   14ff0:	orr	r4, r4, sl, lsr r5
   14ff4:	ldr	r3, [sp, #32]
   14ff8:	str	r4, [sp, #40]	; 0x28
   14ffc:	cmp	r0, #0
   15000:	bic	r4, r3, sl, lsl lr
   15004:	ldr	r0, [sp, #36]	; 0x24
   15008:	ldr	r3, [sp, #48]	; 0x30
   1500c:	mov	lr, ip
   15010:	orr	sl, r2, r0, lsr r3
   15014:	ldr	r3, [sp, #40]	; 0x28
   15018:	strb	fp, [lr], #1
   1501c:	bic	r5, r0, r3
   15020:	beq	14ebc <__assert_fail@plt+0x3190>
   15024:	cmp	fp, #66	; 0x42
   15028:	beq	14ebc <__assert_fail@plt+0x3190>
   1502c:	mov	r3, #105	; 0x69
   15030:	strb	r3, [ip, #1]
   15034:	mov	r3, #66	; 0x42
   15038:	add	lr, ip, #3
   1503c:	strb	r3, [ip, #2]
   15040:	b	14ebc <__assert_fail@plt+0x3190>
   15044:	subs	lr, r1, #10
   15048:	strd	r2, [sp, #32]
   1504c:	and	r0, r0, #1
   15050:	bne	14f90 <__assert_fail@plt+0x3264>
   15054:	ldr	sl, [sp, #32]
   15058:	cmp	r0, #0
   1505c:	movne	r0, lr
   15060:	mov	r3, #66	; 0x42
   15064:	strb	r0, [ip, #1]
   15068:	strb	r3, [ip]
   1506c:	ldr	r2, [pc, #116]	; 150e8 <__assert_fail@plt+0x33bc>
   15070:	add	r4, sp, #68	; 0x44
   15074:	add	r2, pc, r2
   15078:	mov	r3, #32
   1507c:	stm	sp, {r2, sl}
   15080:	str	r9, [sp, #8]
   15084:	mov	r0, r4
   15088:	mov	r1, r3
   1508c:	mov	r2, #1
   15090:	bl	11d08 <__snprintf_chk@plt>
   15094:	mov	r0, r4
   15098:	bl	1196c <strdup@plt>
   1509c:	ldr	r2, [sp, #100]	; 0x64
   150a0:	ldr	r3, [r8]
   150a4:	cmp	r2, r3
   150a8:	bne	150cc <__assert_fail@plt+0x33a0>
   150ac:	add	sp, sp, #108	; 0x6c
   150b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150b4:	ldr	r0, [pc, #48]	; 150ec <__assert_fail@plt+0x33c0>
   150b8:	add	r0, pc, r0
   150bc:	b	14f58 <__assert_fail@plt+0x322c>
   150c0:	ldr	r0, [pc, #40]	; 150f0 <__assert_fail@plt+0x33c4>
   150c4:	add	r0, pc, r0
   150c8:	b	14f58 <__assert_fail@plt+0x322c>
   150cc:	bl	11978 <__stack_chk_fail@plt>
   150d0:	andeq	r6, r1, r4
   150d4:	andeq	r0, r0, r0, asr #3
   150d8:	andeq	r4, r0, r4, asr sp
   150dc:	andeq	r4, r0, r4, asr sp
   150e0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   150e4:	ldrdeq	r4, [r0], -ip
   150e8:	andeq	r4, r0, ip, asr #24
   150ec:	strdeq	r4, [r0], -r0
   150f0:	andeq	r4, r0, r4, ror #23
   150f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   150f8:	subs	r4, r0, #0
   150fc:	beq	151cc <__assert_fail@plt+0x34a0>
   15100:	ldrsb	lr, [r4]
   15104:	cmp	lr, #0
   15108:	beq	151cc <__assert_fail@plt+0x34a0>
   1510c:	cmp	r1, #0
   15110:	clz	ip, r2
   15114:	lsr	ip, ip, #5
   15118:	moveq	r0, #1
   1511c:	movne	r0, ip
   15120:	cmp	r3, #0
   15124:	moveq	r0, #1
   15128:	cmp	r0, #0
   1512c:	bne	151cc <__assert_fail@plt+0x34a0>
   15130:	mov	r8, r3
   15134:	mov	r7, r2
   15138:	mov	r9, r1
   1513c:	mov	r5, r0
   15140:	b	1519c <__assert_fail@plt+0x3470>
   15144:	cmp	r3, #0
   15148:	bne	15188 <__assert_fail@plt+0x345c>
   1514c:	cmn	r4, #1
   15150:	add	r6, r4, #1
   15154:	beq	151d4 <__assert_fail@plt+0x34a8>
   15158:	cmp	r0, r6
   1515c:	bcs	151cc <__assert_fail@plt+0x34a0>
   15160:	sub	r1, r6, r0
   15164:	blx	r8
   15168:	cmn	r0, #1
   1516c:	beq	151cc <__assert_fail@plt+0x34a0>
   15170:	str	r0, [r9, r5, lsl #2]
   15174:	ldrsb	r3, [r6]
   15178:	add	r5, r5, #1
   1517c:	cmp	r3, #0
   15180:	beq	151d4 <__assert_fail@plt+0x34a8>
   15184:	mov	r0, #0
   15188:	cmn	r4, #1
   1518c:	beq	151d4 <__assert_fail@plt+0x34a8>
   15190:	ldrsb	lr, [r4, #1]!
   15194:	cmp	lr, #0
   15198:	beq	151d4 <__assert_fail@plt+0x34a8>
   1519c:	cmp	r7, r5
   151a0:	mov	r6, r4
   151a4:	bls	151dc <__assert_fail@plt+0x34b0>
   151a8:	cmp	r0, #0
   151ac:	moveq	r0, r4
   151b0:	cmp	lr, #44	; 0x2c
   151b4:	ldrsb	r3, [r4, #1]
   151b8:	bne	15144 <__assert_fail@plt+0x3418>
   151bc:	cmp	r3, #0
   151c0:	beq	1514c <__assert_fail@plt+0x3420>
   151c4:	cmp	r0, r6
   151c8:	bcc	15160 <__assert_fail@plt+0x3434>
   151cc:	mvn	r0, #0
   151d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151d4:	mov	r0, r5
   151d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151dc:	mvn	r0, #1
   151e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151e4:	cmp	r0, #0
   151e8:	beq	15254 <__assert_fail@plt+0x3528>
   151ec:	push	{r4, lr}
   151f0:	mov	r4, r3
   151f4:	cmp	r4, #0
   151f8:	ldrsb	ip, [r0]
   151fc:	clz	r3, ip
   15200:	lsr	r3, r3, #5
   15204:	moveq	r3, #1
   15208:	cmp	r3, #0
   1520c:	bne	1524c <__assert_fail@plt+0x3520>
   15210:	ldr	lr, [r4]
   15214:	cmp	lr, r2
   15218:	bhi	1524c <__assert_fail@plt+0x3520>
   1521c:	cmp	ip, #43	; 0x2b
   15220:	strne	r3, [r4]
   15224:	addeq	r0, r0, #1
   15228:	ldr	r3, [sp, #8]
   1522c:	addeq	r1, r1, lr, lsl #2
   15230:	subeq	r2, r2, lr
   15234:	bl	150f4 <__assert_fail@plt+0x33c8>
   15238:	cmp	r0, #0
   1523c:	ldrgt	r3, [r4]
   15240:	addgt	r3, r3, r0
   15244:	strgt	r3, [r4]
   15248:	pop	{r4, pc}
   1524c:	mvn	r0, #0
   15250:	pop	{r4, pc}
   15254:	mvn	r0, #0
   15258:	bx	lr
   1525c:	cmp	r2, #0
   15260:	clz	r3, r1
   15264:	lsr	r3, r3, #5
   15268:	moveq	r3, #1
   1526c:	cmp	r0, #0
   15270:	moveq	r3, #1
   15274:	cmp	r3, #0
   15278:	bne	15344 <__assert_fail@plt+0x3618>
   1527c:	push	{r4, r5, r6, r7, r8, lr}
   15280:	mov	r6, r2
   15284:	mov	r2, r3
   15288:	ldrsb	r3, [r0]
   1528c:	mov	r8, r1
   15290:	mov	r4, r0
   15294:	mov	r7, #1
   15298:	cmp	r3, #0
   1529c:	beq	1530c <__assert_fail@plt+0x35e0>
   152a0:	cmp	r2, #0
   152a4:	moveq	r2, r4
   152a8:	cmp	r3, #44	; 0x2c
   152ac:	mov	r5, r4
   152b0:	ldrsb	r3, [r4, #1]!
   152b4:	beq	15314 <__assert_fail@plt+0x35e8>
   152b8:	cmp	r3, #0
   152bc:	bne	15334 <__assert_fail@plt+0x3608>
   152c0:	mov	r5, r4
   152c4:	cmp	r2, r5
   152c8:	sub	r1, r5, r2
   152cc:	mov	r0, r2
   152d0:	bcs	1532c <__assert_fail@plt+0x3600>
   152d4:	blx	r6
   152d8:	mov	r2, r4
   152dc:	cmp	r0, #0
   152e0:	and	r1, r0, #7
   152e4:	poplt	{r4, r5, r6, r7, r8, pc}
   152e8:	ldrb	r3, [r8, r0, asr #3]
   152ec:	orr	r3, r3, r7, lsl r1
   152f0:	strb	r3, [r8, r0, asr #3]
   152f4:	ldrsb	r3, [r5]
   152f8:	cmp	r3, #0
   152fc:	beq	1530c <__assert_fail@plt+0x35e0>
   15300:	ldrsb	r3, [r4]
   15304:	cmp	r3, #0
   15308:	bne	152a8 <__assert_fail@plt+0x357c>
   1530c:	mov	r0, #0
   15310:	pop	{r4, r5, r6, r7, r8, pc}
   15314:	cmp	r3, #0
   15318:	moveq	r5, r4
   1531c:	cmp	r2, r5
   15320:	sub	r1, r5, r2
   15324:	mov	r0, r2
   15328:	bcc	152d4 <__assert_fail@plt+0x35a8>
   1532c:	mvn	r0, #0
   15330:	pop	{r4, r5, r6, r7, r8, pc}
   15334:	adds	r4, r5, #1
   15338:	bne	15298 <__assert_fail@plt+0x356c>
   1533c:	mov	r0, #0
   15340:	pop	{r4, r5, r6, r7, r8, pc}
   15344:	mvn	r0, #21
   15348:	bx	lr
   1534c:	cmp	r2, #0
   15350:	clz	r3, r1
   15354:	lsr	r3, r3, #5
   15358:	moveq	r3, #1
   1535c:	cmp	r0, #0
   15360:	moveq	r3, #1
   15364:	cmp	r3, #0
   15368:	bne	1542c <__assert_fail@plt+0x3700>
   1536c:	push	{r4, r5, r6, r7, r8, lr}
   15370:	mov	r6, r2
   15374:	mov	r2, r3
   15378:	ldrsb	r3, [r0]
   1537c:	mov	r7, r1
   15380:	mov	r4, r0
   15384:	cmp	r3, #0
   15388:	beq	153f4 <__assert_fail@plt+0x36c8>
   1538c:	cmp	r2, #0
   15390:	moveq	r2, r4
   15394:	cmp	r3, #44	; 0x2c
   15398:	mov	r5, r4
   1539c:	ldrsb	r3, [r4, #1]!
   153a0:	beq	153fc <__assert_fail@plt+0x36d0>
   153a4:	cmp	r3, #0
   153a8:	bne	1541c <__assert_fail@plt+0x36f0>
   153ac:	mov	r5, r4
   153b0:	cmp	r2, r5
   153b4:	sub	r1, r5, r2
   153b8:	mov	r0, r2
   153bc:	bcs	15414 <__assert_fail@plt+0x36e8>
   153c0:	blx	r6
   153c4:	mov	r2, r4
   153c8:	cmp	r0, #0
   153cc:	poplt	{r4, r5, r6, r7, r8, pc}
   153d0:	ldr	r3, [r7]
   153d4:	orr	r3, r3, r0
   153d8:	str	r3, [r7]
   153dc:	ldrsb	r3, [r5]
   153e0:	cmp	r3, #0
   153e4:	beq	153f4 <__assert_fail@plt+0x36c8>
   153e8:	ldrsb	r3, [r4]
   153ec:	cmp	r3, #0
   153f0:	bne	15394 <__assert_fail@plt+0x3668>
   153f4:	mov	r0, #0
   153f8:	pop	{r4, r5, r6, r7, r8, pc}
   153fc:	cmp	r3, #0
   15400:	moveq	r5, r4
   15404:	cmp	r2, r5
   15408:	sub	r1, r5, r2
   1540c:	mov	r0, r2
   15410:	bcc	153c0 <__assert_fail@plt+0x3694>
   15414:	mvn	r0, #0
   15418:	pop	{r4, r5, r6, r7, r8, pc}
   1541c:	adds	r4, r5, #1
   15420:	bne	15384 <__assert_fail@plt+0x3658>
   15424:	mov	r0, #0
   15428:	pop	{r4, r5, r6, r7, r8, pc}
   1542c:	mvn	r0, #21
   15430:	bx	lr
   15434:	ldr	ip, [pc, #396]	; 155c8 <__assert_fail@plt+0x389c>
   15438:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1543c:	add	ip, pc, ip
   15440:	ldr	lr, [pc, #388]	; 155cc <__assert_fail@plt+0x38a0>
   15444:	sub	sp, sp, #8
   15448:	mov	r9, r3
   1544c:	ldr	r5, [ip, lr]
   15450:	mov	sl, #0
   15454:	subs	r4, r0, #0
   15458:	ldr	r3, [r5]
   1545c:	mov	r7, r1
   15460:	str	sl, [sp]
   15464:	mov	r1, ip
   15468:	str	r3, [sp, #4]
   1546c:	beq	154e0 <__assert_fail@plt+0x37b4>
   15470:	str	r9, [r7]
   15474:	str	r9, [r2]
   15478:	mov	r6, r2
   1547c:	bl	11b34 <__errno_location@plt>
   15480:	str	sl, [r0]
   15484:	ldrsb	r3, [r4]
   15488:	mov	r8, r0
   1548c:	cmp	r3, #58	; 0x3a
   15490:	beq	154fc <__assert_fail@plt+0x37d0>
   15494:	mov	sl, sp
   15498:	mov	r1, sl
   1549c:	mov	r2, #10
   154a0:	mov	r0, r4
   154a4:	bl	11870 <strtol@plt>
   154a8:	str	r0, [r7]
   154ac:	str	r0, [r6]
   154b0:	ldr	r0, [r8]
   154b4:	cmp	r0, #0
   154b8:	bne	1554c <__assert_fail@plt+0x3820>
   154bc:	ldr	r2, [sp]
   154c0:	cmp	r2, #0
   154c4:	cmpne	r2, r4
   154c8:	beq	1554c <__assert_fail@plt+0x3820>
   154cc:	ldrsb	r3, [r2]
   154d0:	cmp	r3, #58	; 0x3a
   154d4:	beq	15554 <__assert_fail@plt+0x3828>
   154d8:	cmp	r3, #45	; 0x2d
   154dc:	beq	15564 <__assert_fail@plt+0x3838>
   154e0:	mov	r0, #0
   154e4:	ldr	r2, [sp, #4]
   154e8:	ldr	r3, [r5]
   154ec:	cmp	r2, r3
   154f0:	bne	155c4 <__assert_fail@plt+0x3898>
   154f4:	add	sp, sp, #8
   154f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154fc:	add	r4, r4, #1
   15500:	mov	r0, r4
   15504:	mov	r2, #10
   15508:	mov	r1, sp
   1550c:	bl	11870 <strtol@plt>
   15510:	str	r0, [r6]
   15514:	ldr	r3, [r8]
   15518:	cmp	r3, #0
   1551c:	bne	1554c <__assert_fail@plt+0x3820>
   15520:	ldr	r3, [sp]
   15524:	cmp	r3, #0
   15528:	beq	1554c <__assert_fail@plt+0x3820>
   1552c:	ldrsb	r2, [r3]
   15530:	sub	r3, r3, r4
   15534:	clz	r3, r3
   15538:	cmp	r2, #0
   1553c:	lsr	r3, r3, #5
   15540:	movne	r3, #1
   15544:	cmp	r3, #0
   15548:	beq	154e0 <__assert_fail@plt+0x37b4>
   1554c:	mvn	r0, #0
   15550:	b	154e4 <__assert_fail@plt+0x37b8>
   15554:	ldrsb	r3, [r2, #1]
   15558:	cmp	r3, #0
   1555c:	streq	r9, [r6]
   15560:	beq	154e4 <__assert_fail@plt+0x37b8>
   15564:	mov	r3, #0
   15568:	add	r4, r2, #1
   1556c:	str	r3, [r8]
   15570:	mov	r1, sl
   15574:	mov	r0, r4
   15578:	mov	r2, #10
   1557c:	str	r3, [sp]
   15580:	bl	11870 <strtol@plt>
   15584:	str	r0, [r6]
   15588:	ldr	r3, [r8]
   1558c:	cmp	r3, #0
   15590:	bne	1554c <__assert_fail@plt+0x3820>
   15594:	ldr	r2, [sp]
   15598:	cmp	r2, #0
   1559c:	beq	1554c <__assert_fail@plt+0x3820>
   155a0:	ldrsb	r3, [r2]
   155a4:	sub	r2, r2, r4
   155a8:	clz	r2, r2
   155ac:	cmp	r3, #0
   155b0:	lsr	r2, r2, #5
   155b4:	movne	r2, #1
   155b8:	cmp	r2, #0
   155bc:	beq	154e0 <__assert_fail@plt+0x37b4>
   155c0:	b	1554c <__assert_fail@plt+0x3820>
   155c4:	bl	11978 <__stack_chk_fail@plt>
   155c8:	strdeq	r5, [r1], -r0
   155cc:	andeq	r0, r0, r0, asr #3
   155d0:	ldr	r3, [pc, #244]	; 156cc <__assert_fail@plt+0x39a0>
   155d4:	ldr	r2, [pc, #244]	; 156d0 <__assert_fail@plt+0x39a4>
   155d8:	add	r3, pc, r3
   155dc:	push	{r4, r5, r6, r7, r8, r9, lr}
   155e0:	sub	sp, sp, #20
   155e4:	ldr	r9, [r3, r2]
   155e8:	cmp	r0, #0
   155ec:	cmpne	r1, #0
   155f0:	ldr	r3, [r9]
   155f4:	str	r3, [sp, #12]
   155f8:	beq	156c0 <__assert_fail@plt+0x3994>
   155fc:	mov	r4, r1
   15600:	add	r8, sp, #4
   15604:	add	r7, sp, #8
   15608:	b	15648 <__assert_fail@plt+0x391c>
   1560c:	cmp	r4, r3
   15610:	bne	156c0 <__assert_fail@plt+0x3994>
   15614:	mov	r2, r4
   15618:	mov	r1, r6
   1561c:	mov	r0, r5
   15620:	bl	11cd8 <strncmp@plt>
   15624:	cmp	r0, #0
   15628:	bne	156c0 <__assert_fail@plt+0x3994>
   1562c:	adds	r0, r5, r4
   15630:	moveq	r3, #0
   15634:	movne	r3, #1
   15638:	adds	r4, r6, r4
   1563c:	moveq	r3, #0
   15640:	cmp	r3, #0
   15644:	beq	156c0 <__assert_fail@plt+0x3994>
   15648:	mov	r1, r8
   1564c:	bl	13a50 <__assert_fail@plt+0x1d24>
   15650:	mov	r1, r7
   15654:	mov	r5, r0
   15658:	mov	r0, r4
   1565c:	bl	13a50 <__assert_fail@plt+0x1d24>
   15660:	ldr	r4, [sp, #4]
   15664:	ldr	r3, [sp, #8]
   15668:	mov	r6, r0
   1566c:	adds	r0, r4, r3
   15670:	beq	156a4 <__assert_fail@plt+0x3978>
   15674:	cmp	r0, #1
   15678:	bne	1560c <__assert_fail@plt+0x38e0>
   1567c:	cmp	r5, #0
   15680:	beq	15690 <__assert_fail@plt+0x3964>
   15684:	ldrsb	r2, [r5]
   15688:	cmp	r2, #47	; 0x2f
   1568c:	beq	156a8 <__assert_fail@plt+0x397c>
   15690:	cmp	r6, #0
   15694:	beq	1560c <__assert_fail@plt+0x38e0>
   15698:	ldrsb	r2, [r6]
   1569c:	cmp	r2, #47	; 0x2f
   156a0:	bne	1560c <__assert_fail@plt+0x38e0>
   156a4:	mov	r0, #1
   156a8:	ldr	r2, [sp, #12]
   156ac:	ldr	r3, [r9]
   156b0:	cmp	r2, r3
   156b4:	bne	156c8 <__assert_fail@plt+0x399c>
   156b8:	add	sp, sp, #20
   156bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   156c0:	mov	r0, #0
   156c4:	b	156a8 <__assert_fail@plt+0x397c>
   156c8:	bl	11978 <__stack_chk_fail@plt>
   156cc:	andeq	r5, r1, r4, asr r8
   156d0:	andeq	r0, r0, r0, asr #3
   156d4:	orrs	r3, r0, r1
   156d8:	beq	15754 <__assert_fail@plt+0x3a28>
   156dc:	cmp	r0, #0
   156e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   156e4:	mov	r4, r1
   156e8:	mov	r5, r0
   156ec:	beq	15760 <__assert_fail@plt+0x3a34>
   156f0:	cmp	r1, #0
   156f4:	beq	15770 <__assert_fail@plt+0x3a44>
   156f8:	mov	r6, r2
   156fc:	bl	11b04 <strlen@plt>
   15700:	mvn	r3, r0
   15704:	cmp	r6, r3
   15708:	mov	r7, r0
   1570c:	movhi	r8, #0
   15710:	bhi	1574c <__assert_fail@plt+0x3a20>
   15714:	add	r9, r6, r0
   15718:	add	r0, r9, #1
   1571c:	bl	11a50 <malloc@plt>
   15720:	subs	r8, r0, #0
   15724:	beq	1574c <__assert_fail@plt+0x3a20>
   15728:	mov	r1, r5
   1572c:	mov	r2, r7
   15730:	bl	1193c <memcpy@plt>
   15734:	mov	r2, r6
   15738:	mov	r1, r4
   1573c:	add	r0, r8, r7
   15740:	bl	1193c <memcpy@plt>
   15744:	mov	r3, #0
   15748:	strb	r3, [r8, r9]
   1574c:	mov	r0, r8
   15750:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15754:	ldr	r0, [pc, #28]	; 15778 <__assert_fail@plt+0x3a4c>
   15758:	add	r0, pc, r0
   1575c:	b	1196c <strdup@plt>
   15760:	mov	r0, r4
   15764:	mov	r1, r2
   15768:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1576c:	b	1190c <strndup@plt>
   15770:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15774:	b	1196c <strdup@plt>
   15778:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1577c:	push	{r4, r5, r6, lr}
   15780:	subs	r4, r1, #0
   15784:	mov	r5, r0
   15788:	moveq	r2, r4
   1578c:	beq	1579c <__assert_fail@plt+0x3a70>
   15790:	mov	r0, r4
   15794:	bl	11b04 <strlen@plt>
   15798:	mov	r2, r0
   1579c:	mov	r1, r4
   157a0:	mov	r0, r5
   157a4:	pop	{r4, r5, r6, lr}
   157a8:	b	156d4 <__assert_fail@plt+0x39a8>
   157ac:	push	{r1, r2, r3}
   157b0:	ldr	r1, [pc, #132]	; 1583c <__assert_fail@plt+0x3b10>
   157b4:	ldr	r3, [pc, #132]	; 15840 <__assert_fail@plt+0x3b14>
   157b8:	add	r1, pc, r1
   157bc:	push	{r4, r5, lr}
   157c0:	mov	r5, r0
   157c4:	ldr	r4, [r1, r3]
   157c8:	sub	sp, sp, #16
   157cc:	add	ip, sp, #32
   157d0:	ldr	r0, [r4]
   157d4:	ldr	r2, [sp, #28]
   157d8:	str	r0, [sp, #12]
   157dc:	mov	r3, ip
   157e0:	add	r0, sp, #8
   157e4:	mov	r1, #1
   157e8:	str	ip, [sp, #4]
   157ec:	bl	11b58 <__vasprintf_chk@plt>
   157f0:	subs	r2, r0, #0
   157f4:	movlt	r5, #0
   157f8:	blt	15814 <__assert_fail@plt+0x3ae8>
   157fc:	mov	r0, r5
   15800:	ldr	r1, [sp, #8]
   15804:	bl	156d4 <__assert_fail@plt+0x39a8>
   15808:	mov	r5, r0
   1580c:	ldr	r0, [sp, #8]
   15810:	bl	118c4 <free@plt>
   15814:	ldr	r2, [sp, #12]
   15818:	ldr	r3, [r4]
   1581c:	mov	r0, r5
   15820:	cmp	r2, r3
   15824:	bne	15838 <__assert_fail@plt+0x3b0c>
   15828:	add	sp, sp, #16
   1582c:	pop	{r4, r5, lr}
   15830:	add	sp, sp, #12
   15834:	bx	lr
   15838:	bl	11978 <__stack_chk_fail@plt>
   1583c:	andeq	r5, r1, r4, ror r6
   15840:	andeq	r0, r0, r0, asr #3
   15844:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15848:	mov	r6, r0
   1584c:	ldr	r0, [pc, #348]	; 159b0 <__assert_fail@plt+0x3c84>
   15850:	ldr	ip, [pc, #348]	; 159b4 <__assert_fail@plt+0x3c88>
   15854:	add	r0, pc, r0
   15858:	ldr	r5, [r6]
   1585c:	ldr	r8, [r0, ip]
   15860:	sub	sp, sp, #8
   15864:	ldrsb	r4, [r5]
   15868:	mov	r9, r2
   1586c:	ldr	r2, [r8]
   15870:	cmp	r4, #0
   15874:	mov	r7, r1
   15878:	str	r2, [sp, #4]
   1587c:	mov	r1, r0
   15880:	beq	15930 <__assert_fail@plt+0x3c04>
   15884:	mov	r0, r5
   15888:	mov	r1, r9
   1588c:	mov	sl, r3
   15890:	bl	11d20 <strspn@plt>
   15894:	add	r4, r5, r0
   15898:	ldrsb	r5, [r5, r0]
   1589c:	cmp	r5, #0
   158a0:	beq	15998 <__assert_fail@plt+0x3c6c>
   158a4:	cmp	sl, #0
   158a8:	beq	1594c <__assert_fail@plt+0x3c20>
   158ac:	ldr	r0, [pc, #260]	; 159b8 <__assert_fail@plt+0x3c8c>
   158b0:	mov	r1, r5
   158b4:	add	r0, pc, r0
   158b8:	bl	11b10 <strchr@plt>
   158bc:	cmp	r0, #0
   158c0:	beq	15968 <__assert_fail@plt+0x3c3c>
   158c4:	add	sl, r4, #1
   158c8:	mov	r3, #0
   158cc:	mov	r0, sl
   158d0:	mov	r1, sp
   158d4:	strb	r5, [sp]
   158d8:	strb	r3, [sp, #1]
   158dc:	bl	13af0 <__assert_fail@plt+0x1dc4>
   158e0:	add	r3, r4, r0
   158e4:	str	r0, [r7]
   158e8:	ldrsb	r3, [r3, #1]
   158ec:	subs	r5, r5, r3
   158f0:	movne	r5, #1
   158f4:	cmp	r3, #0
   158f8:	moveq	r5, #1
   158fc:	cmp	r5, #0
   15900:	bne	15998 <__assert_fail@plt+0x3c6c>
   15904:	add	r0, r0, #2
   15908:	add	r5, r4, r0
   1590c:	ldrsb	r1, [r4, r0]
   15910:	cmp	r1, #0
   15914:	beq	15928 <__assert_fail@plt+0x3bfc>
   15918:	mov	r0, r9
   1591c:	bl	11b10 <strchr@plt>
   15920:	cmp	r0, #0
   15924:	beq	15998 <__assert_fail@plt+0x3c6c>
   15928:	mov	r4, sl
   1592c:	str	r5, [r6]
   15930:	ldr	r2, [sp, #4]
   15934:	ldr	r3, [r8]
   15938:	mov	r0, r4
   1593c:	cmp	r2, r3
   15940:	bne	159ac <__assert_fail@plt+0x3c80>
   15944:	add	sp, sp, #8
   15948:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1594c:	mov	r1, r9
   15950:	mov	r0, r4
   15954:	bl	1187c <strcspn@plt>
   15958:	add	r3, r4, r0
   1595c:	str	r0, [r7]
   15960:	str	r3, [r6]
   15964:	b	15930 <__assert_fail@plt+0x3c04>
   15968:	mov	r1, r9
   1596c:	mov	r0, r4
   15970:	bl	13af0 <__assert_fail@plt+0x1dc4>
   15974:	str	r0, [r7]
   15978:	ldrsb	r1, [r4, r0]
   1597c:	add	r5, r4, r0
   15980:	cmp	r1, #0
   15984:	beq	159a4 <__assert_fail@plt+0x3c78>
   15988:	mov	r0, r9
   1598c:	bl	11b10 <strchr@plt>
   15990:	cmp	r0, #0
   15994:	bne	159a4 <__assert_fail@plt+0x3c78>
   15998:	str	r4, [r6]
   1599c:	mov	r4, #0
   159a0:	b	15930 <__assert_fail@plt+0x3c04>
   159a4:	str	r5, [r6]
   159a8:	b	15930 <__assert_fail@plt+0x3c04>
   159ac:	bl	11978 <__stack_chk_fail@plt>
   159b0:	ldrdeq	r5, [r1], -r8
   159b4:	andeq	r0, r0, r0, asr #3
   159b8:	andeq	r4, r0, r4, lsl r4
   159bc:	push	{r4, lr}
   159c0:	mov	r4, r0
   159c4:	b	159d0 <__assert_fail@plt+0x3ca4>
   159c8:	cmp	r0, #10
   159cc:	beq	159e8 <__assert_fail@plt+0x3cbc>
   159d0:	mov	r0, r4
   159d4:	bl	11ba0 <fgetc@plt>
   159d8:	cmn	r0, #1
   159dc:	bne	159c8 <__assert_fail@plt+0x3c9c>
   159e0:	mov	r0, #1
   159e4:	pop	{r4, pc}
   159e8:	mov	r0, #0
   159ec:	pop	{r4, pc}
   159f0:	push	{r1, r2, r3}
   159f4:	subs	r3, r0, #0
   159f8:	ldr	r1, [pc, #168]	; 15aa8 <__assert_fail@plt+0x3d7c>
   159fc:	ldr	r2, [pc, #168]	; 15aac <__assert_fail@plt+0x3d80>
   15a00:	add	r1, pc, r1
   15a04:	push	{r4, r5, r6, lr}
   15a08:	sub	sp, sp, #12
   15a0c:	ldr	r5, [r1, r2]
   15a10:	ldr	r6, [sp, #28]
   15a14:	ldr	r2, [r5]
   15a18:	str	r2, [sp, #4]
   15a1c:	beq	15a34 <__assert_fail@plt+0x3d08>
   15a20:	ldr	r2, [pc, #136]	; 15ab0 <__assert_fail@plt+0x3d84>
   15a24:	add	r2, pc, r2
   15a28:	ldr	r2, [r2]
   15a2c:	tst	r2, #16777216	; 0x1000000
   15a30:	beq	15a84 <__assert_fail@plt+0x3d58>
   15a34:	ldr	r3, [pc, #120]	; 15ab4 <__assert_fail@plt+0x3d88>
   15a38:	ldr	r4, [r1, r3]
   15a3c:	add	ip, sp, #32
   15a40:	mov	r2, r6
   15a44:	mov	r3, ip
   15a48:	mov	r1, #1
   15a4c:	ldr	r0, [r4]
   15a50:	str	ip, [sp]
   15a54:	bl	11a8c <__vfprintf_chk@plt>
   15a58:	ldr	r1, [r4]
   15a5c:	mov	r0, #10
   15a60:	bl	11c54 <fputc@plt>
   15a64:	ldr	r2, [sp, #4]
   15a68:	ldr	r3, [r5]
   15a6c:	cmp	r2, r3
   15a70:	bne	15aa4 <__assert_fail@plt+0x3d78>
   15a74:	add	sp, sp, #12
   15a78:	pop	{r4, r5, r6, lr}
   15a7c:	add	sp, sp, #12
   15a80:	bx	lr
   15a84:	ldr	r0, [pc, #40]	; 15ab4 <__assert_fail@plt+0x3d88>
   15a88:	ldr	r2, [pc, #40]	; 15ab8 <__assert_fail@plt+0x3d8c>
   15a8c:	ldr	r4, [r1, r0]
   15a90:	add	r2, pc, r2
   15a94:	mov	r1, #1
   15a98:	ldr	r0, [r4]
   15a9c:	bl	11be8 <__fprintf_chk@plt>
   15aa0:	b	15a3c <__assert_fail@plt+0x3d10>
   15aa4:	bl	11978 <__stack_chk_fail@plt>
   15aa8:	andeq	r5, r1, ip, lsr #8
   15aac:	andeq	r0, r0, r0, asr #3
   15ab0:	andeq	r5, r1, r4, asr #12
   15ab4:	andeq	r0, r0, r4, asr #3
   15ab8:	andeq	r4, r0, r4, ror #4
   15abc:	push	{r0, r1, r2, r3}
   15ac0:	ldr	r0, [pc, #104]	; 15b30 <__assert_fail@plt+0x3e04>
   15ac4:	ldr	r2, [pc, #104]	; 15b34 <__assert_fail@plt+0x3e08>
   15ac8:	add	r0, pc, r0
   15acc:	push	{r4, r5, lr}
   15ad0:	sub	sp, sp, #12
   15ad4:	ldr	r4, [r0, r2]
   15ad8:	ldr	r1, [pc, #88]	; 15b38 <__assert_fail@plt+0x3e0c>
   15adc:	add	r3, sp, #28
   15ae0:	ldr	ip, [r4]
   15ae4:	str	r3, [sp]
   15ae8:	str	ip, [sp, #4]
   15aec:	ldr	r5, [r0, r1]
   15af0:	ldr	r2, [sp, #24]
   15af4:	mov	r1, #1
   15af8:	ldr	r0, [r5]
   15afc:	bl	11a8c <__vfprintf_chk@plt>
   15b00:	ldr	r1, [r5]
   15b04:	mov	r0, #10
   15b08:	bl	11c54 <fputc@plt>
   15b0c:	ldr	r2, [sp, #4]
   15b10:	ldr	r3, [r4]
   15b14:	cmp	r2, r3
   15b18:	bne	15b2c <__assert_fail@plt+0x3e00>
   15b1c:	add	sp, sp, #12
   15b20:	pop	{r4, r5, lr}
   15b24:	add	sp, sp, #16
   15b28:	bx	lr
   15b2c:	bl	11978 <__stack_chk_fail@plt>
   15b30:	andeq	r5, r1, r4, ror #6
   15b34:	andeq	r0, r0, r0, asr #3
   15b38:	andeq	r0, r0, r4, asr #3
   15b3c:	ldr	r1, [r0, #12]
   15b40:	ldr	r2, [r0, #4]
   15b44:	cmp	r1, #0
   15b48:	push	{r4, lr}
   15b4c:	moveq	r4, r2
   15b50:	sub	sp, sp, #16
   15b54:	beq	15ba8 <__assert_fail@plt+0x3e7c>
   15b58:	cmp	r2, #0
   15b5c:	beq	15bd0 <__assert_fail@plt+0x3ea4>
   15b60:	ldrsb	r3, [r2]
   15b64:	ldr	ip, [pc, #116]	; 15be0 <__assert_fail@plt+0x3eb4>
   15b68:	add	r4, r0, #16
   15b6c:	cmp	r3, #47	; 0x2f
   15b70:	addeq	r2, r2, #1
   15b74:	add	ip, pc, ip
   15b78:	mov	r3, #4096	; 0x1000
   15b7c:	stmib	sp, {r1, r2}
   15b80:	mov	r0, r4
   15b84:	str	ip, [sp]
   15b88:	mov	r1, r3
   15b8c:	mov	r2, #1
   15b90:	bl	11d08 <__snprintf_chk@plt>
   15b94:	cmp	r0, #0
   15b98:	movlt	r4, #0
   15b9c:	blt	15ba8 <__assert_fail@plt+0x3e7c>
   15ba0:	cmp	r0, #4096	; 0x1000
   15ba4:	bge	15bb4 <__assert_fail@plt+0x3e88>
   15ba8:	mov	r0, r4
   15bac:	add	sp, sp, #16
   15bb0:	pop	{r4, pc}
   15bb4:	bl	11b34 <__errno_location@plt>
   15bb8:	mov	r4, #0
   15bbc:	mov	r3, #36	; 0x24
   15bc0:	str	r3, [r0]
   15bc4:	mov	r0, r4
   15bc8:	add	sp, sp, #16
   15bcc:	pop	{r4, pc}
   15bd0:	mov	r4, r1
   15bd4:	mov	r0, r4
   15bd8:	add	sp, sp, #16
   15bdc:	pop	{r4, pc}
   15be0:	andeq	r4, r0, r8, lsl #3
   15be4:	push	{r4, lr}
   15be8:	sub	sp, sp, #8
   15bec:	add	r4, r0, #16
   15bf0:	mov	r3, #4096	; 0x1000
   15bf4:	stm	sp, {r1, r2}
   15bf8:	mov	r0, r4
   15bfc:	mov	r1, r3
   15c00:	mov	r2, #1
   15c04:	bl	11930 <__vsnprintf_chk@plt>
   15c08:	cmp	r0, #0
   15c0c:	movlt	r4, #0
   15c10:	blt	15c1c <__assert_fail@plt+0x3ef0>
   15c14:	cmp	r0, #4096	; 0x1000
   15c18:	bge	15c28 <__assert_fail@plt+0x3efc>
   15c1c:	mov	r0, r4
   15c20:	add	sp, sp, #8
   15c24:	pop	{r4, pc}
   15c28:	bl	11b34 <__errno_location@plt>
   15c2c:	mov	r4, #0
   15c30:	mov	r3, #36	; 0x24
   15c34:	str	r3, [r0]
   15c38:	mov	r0, r4
   15c3c:	add	sp, sp, #8
   15c40:	pop	{r4, pc}
   15c44:	push	{r4, r5, r6, r7, lr}
   15c48:	sub	sp, sp, #20
   15c4c:	ldr	r4, [pc, #312]	; 15d8c <__assert_fail@plt+0x4060>
   15c50:	ldr	r3, [pc, #312]	; 15d90 <__assert_fail@plt+0x4064>
   15c54:	add	r4, pc, r4
   15c58:	ldr	r7, [pc, #308]	; 15d94 <__assert_fail@plt+0x4068>
   15c5c:	ldr	r5, [r4, r3]
   15c60:	add	r7, pc, r7
   15c64:	ldr	r6, [r7]
   15c68:	ldr	r3, [r5]
   15c6c:	cmp	r6, #0
   15c70:	str	r3, [sp, #12]
   15c74:	beq	15c90 <__assert_fail@plt+0x3f64>
   15c78:	ldr	r2, [sp, #12]
   15c7c:	ldr	r3, [r5]
   15c80:	cmp	r2, r3
   15c84:	bne	15d88 <__assert_fail@plt+0x405c>
   15c88:	add	sp, sp, #20
   15c8c:	pop	{r4, r5, r6, r7, pc}
   15c90:	ldr	r0, [pc, #256]	; 15d98 <__assert_fail@plt+0x406c>
   15c94:	add	r0, pc, r0
   15c98:	bl	11a44 <getenv@plt>
   15c9c:	cmp	r0, #0
   15ca0:	beq	15ce8 <__assert_fail@plt+0x3fbc>
   15ca4:	mov	r2, r6
   15ca8:	add	r1, sp, #8
   15cac:	bl	11af8 <strtoul@plt>
   15cb0:	mov	r6, r0
   15cb4:	ldr	r0, [sp, #8]
   15cb8:	cmp	r0, #0
   15cbc:	beq	15cd4 <__assert_fail@plt+0x3fa8>
   15cc0:	ldr	r1, [pc, #212]	; 15d9c <__assert_fail@plt+0x4070>
   15cc4:	add	r1, pc, r1
   15cc8:	bl	11858 <strcmp@plt>
   15ccc:	cmp	r0, #0
   15cd0:	beq	15cfc <__assert_fail@plt+0x3fd0>
   15cd4:	ldr	r3, [pc, #196]	; 15da0 <__assert_fail@plt+0x4074>
   15cd8:	cmp	r6, #0
   15cdc:	add	r3, pc, r3
   15ce0:	str	r6, [r3]
   15ce4:	bne	15d08 <__assert_fail@plt+0x3fdc>
   15ce8:	mov	r3, #2
   15cec:	ldr	r2, [pc, #176]	; 15da4 <__assert_fail@plt+0x4078>
   15cf0:	add	r2, pc, r2
   15cf4:	str	r3, [r2]
   15cf8:	b	15c78 <__assert_fail@plt+0x3f4c>
   15cfc:	ldr	r3, [pc, #164]	; 15da8 <__assert_fail@plt+0x407c>
   15d00:	mov	r6, r3
   15d04:	str	r3, [r7]
   15d08:	bl	118b8 <getuid@plt>
   15d0c:	mov	r7, r0
   15d10:	bl	119c0 <geteuid@plt>
   15d14:	cmp	r7, r0
   15d18:	beq	15d6c <__assert_fail@plt+0x4040>
   15d1c:	ldr	r7, [pc, #136]	; 15dac <__assert_fail@plt+0x4080>
   15d20:	ldr	r2, [pc, #136]	; 15db0 <__assert_fail@plt+0x4084>
   15d24:	add	r7, pc, r7
   15d28:	orr	r3, r6, #16777216	; 0x1000000
   15d2c:	str	r3, [r7]
   15d30:	ldr	r3, [r4, r2]
   15d34:	ldr	r4, [r3]
   15d38:	bl	11ad4 <getpid@plt>
   15d3c:	ldr	r3, [pc, #112]	; 15db4 <__assert_fail@plt+0x4088>
   15d40:	ldr	r2, [pc, #112]	; 15db8 <__assert_fail@plt+0x408c>
   15d44:	add	r3, pc, r3
   15d48:	str	r3, [sp]
   15d4c:	add	r2, pc, r2
   15d50:	mov	r1, #1
   15d54:	mov	r3, r0
   15d58:	mov	r0, r4
   15d5c:	bl	11be8 <__fprintf_chk@plt>
   15d60:	ldr	r3, [r7]
   15d64:	orr	r3, r3, #2
   15d68:	b	15cec <__assert_fail@plt+0x3fc0>
   15d6c:	bl	11b70 <getgid@plt>
   15d70:	mov	r7, r0
   15d74:	bl	119e4 <getegid@plt>
   15d78:	cmp	r7, r0
   15d7c:	orreq	r3, r6, #2
   15d80:	bne	15d1c <__assert_fail@plt+0x3ff0>
   15d84:	b	15cec <__assert_fail@plt+0x3fc0>
   15d88:	bl	11978 <__stack_chk_fail@plt>
   15d8c:	ldrdeq	r5, [r1], -r8
   15d90:	andeq	r0, r0, r0, asr #3
   15d94:	andeq	r5, r1, r8, lsl #8
   15d98:	andeq	r4, r0, r0, ror r0
   15d9c:	andeq	r3, r0, ip, lsr #17
   15da0:	andeq	r5, r1, ip, lsl #7
   15da4:	andeq	r5, r1, r8, ror r3
   15da8:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   15dac:	andeq	r5, r1, r4, asr #6
   15db0:	andeq	r0, r0, r4, asr #3
   15db4:	andeq	r4, r0, ip
   15db8:	andeq	r3, r0, r8, asr #31
   15dbc:	cmp	r0, #0
   15dc0:	ldrne	r3, [r0, #8]
   15dc4:	addne	r3, r3, #1
   15dc8:	strne	r3, [r0, #8]
   15dcc:	bx	lr
   15dd0:	ldr	r2, [pc, #228]	; 15ebc <__assert_fail@plt+0x4190>
   15dd4:	push	{r4, r5, lr}
   15dd8:	subs	r4, r0, #0
   15ddc:	sub	sp, sp, #12
   15de0:	add	r2, pc, r2
   15de4:	beq	15dfc <__assert_fail@plt+0x40d0>
   15de8:	ldr	r3, [r4, #8]
   15dec:	sub	r3, r3, #1
   15df0:	cmp	r3, #0
   15df4:	str	r3, [r4, #8]
   15df8:	ble	15e04 <__assert_fail@plt+0x40d8>
   15dfc:	add	sp, sp, #12
   15e00:	pop	{r4, r5, pc}
   15e04:	ldr	r3, [pc, #180]	; 15ec0 <__assert_fail@plt+0x4194>
   15e08:	add	r3, pc, r3
   15e0c:	ldr	r3, [r3]
   15e10:	tst	r3, #4
   15e14:	bne	15e68 <__assert_fail@plt+0x413c>
   15e18:	add	r3, r4, #4096	; 0x1000
   15e1c:	ldr	r2, [r3, #16]
   15e20:	cmp	r2, #0
   15e24:	beq	15e34 <__assert_fail@plt+0x4108>
   15e28:	ldr	r3, [r3, #20]
   15e2c:	mov	r0, r4
   15e30:	blx	r3
   15e34:	ldr	r0, [r4]
   15e38:	cmp	r0, #0
   15e3c:	bge	15e60 <__assert_fail@plt+0x4134>
   15e40:	ldr	r0, [r4, #4]
   15e44:	bl	118c4 <free@plt>
   15e48:	ldr	r0, [r4, #12]
   15e4c:	bl	118c4 <free@plt>
   15e50:	mov	r0, r4
   15e54:	add	sp, sp, #12
   15e58:	pop	{r4, r5, lr}
   15e5c:	b	118c4 <free@plt>
   15e60:	bl	11cf0 <close@plt>
   15e64:	b	15e40 <__assert_fail@plt+0x4114>
   15e68:	ldr	r3, [pc, #84]	; 15ec4 <__assert_fail@plt+0x4198>
   15e6c:	ldr	r3, [r2, r3]
   15e70:	ldr	r5, [r3]
   15e74:	bl	11ad4 <getpid@plt>
   15e78:	ldr	r2, [pc, #72]	; 15ec8 <__assert_fail@plt+0x419c>
   15e7c:	ldr	r3, [pc, #72]	; 15ecc <__assert_fail@plt+0x41a0>
   15e80:	add	r2, pc, r2
   15e84:	str	r2, [sp, #4]
   15e88:	ldr	r2, [pc, #64]	; 15ed0 <__assert_fail@plt+0x41a4>
   15e8c:	add	r3, pc, r3
   15e90:	str	r3, [sp]
   15e94:	add	r2, pc, r2
   15e98:	mov	r1, #1
   15e9c:	mov	r3, r0
   15ea0:	mov	r0, r5
   15ea4:	bl	11be8 <__fprintf_chk@plt>
   15ea8:	ldr	r1, [pc, #36]	; 15ed4 <__assert_fail@plt+0x41a8>
   15eac:	mov	r0, r4
   15eb0:	add	r1, pc, r1
   15eb4:	bl	159f0 <__assert_fail@plt+0x3cc4>
   15eb8:	b	15e18 <__assert_fail@plt+0x40ec>
   15ebc:	andeq	r5, r1, ip, asr #32
   15ec0:	andeq	r5, r1, r0, ror #4
   15ec4:	andeq	r0, r0, r4, asr #3
   15ec8:	andeq	r3, r0, r8, ror #29
   15ecc:	andeq	r3, r0, r4, asr #29
   15ed0:	andeq	r3, r0, r4, asr #29
   15ed4:			; <UNDEFINED> instruction: 0x00003ebc
   15ed8:	push	{r0, r1, r2, r3}
   15edc:	mov	r0, #1
   15ee0:	push	{r4, r5, r6, r7, lr}
   15ee4:	sub	sp, sp, #20
   15ee8:	ldr	r5, [pc, #264]	; 15ff8 <__assert_fail@plt+0x42cc>
   15eec:	ldr	r3, [pc, #264]	; 15ffc <__assert_fail@plt+0x42d0>
   15ef0:	add	r5, pc, r5
   15ef4:	ldr	r1, [pc, #260]	; 16000 <__assert_fail@plt+0x42d4>
   15ef8:	ldr	r6, [r5, r3]
   15efc:	ldr	r7, [sp, #40]	; 0x28
   15f00:	ldr	r3, [r6]
   15f04:	str	r3, [sp, #12]
   15f08:	bl	11834 <calloc@plt>
   15f0c:	subs	r4, r0, #0
   15f10:	beq	15f6c <__assert_fail@plt+0x4240>
   15f14:	ldr	r3, [pc, #232]	; 16004 <__assert_fail@plt+0x42d8>
   15f18:	add	r3, pc, r3
   15f1c:	ldr	r3, [r3]
   15f20:	tst	r3, #4
   15f24:	bne	15f90 <__assert_fail@plt+0x4264>
   15f28:	mov	r1, #1
   15f2c:	mvn	r3, #0
   15f30:	cmp	r7, #0
   15f34:	str	r1, [r4, #8]
   15f38:	str	r3, [r4]
   15f3c:	beq	15f6c <__assert_fail@plt+0x4240>
   15f40:	add	ip, sp, #44	; 0x2c
   15f44:	mov	r2, r7
   15f48:	mov	r3, ip
   15f4c:	add	r0, r4, #4
   15f50:	str	ip, [sp, #8]
   15f54:	bl	11b58 <__vasprintf_chk@plt>
   15f58:	cmp	r0, #0
   15f5c:	blt	15fe4 <__assert_fail@plt+0x42b8>
   15f60:	ldr	r3, [r4, #4]
   15f64:	cmp	r3, #0
   15f68:	beq	15fe4 <__assert_fail@plt+0x42b8>
   15f6c:	ldr	r2, [sp, #12]
   15f70:	ldr	r3, [r6]
   15f74:	mov	r0, r4
   15f78:	cmp	r2, r3
   15f7c:	bne	15ff4 <__assert_fail@plt+0x42c8>
   15f80:	add	sp, sp, #20
   15f84:	pop	{r4, r5, r6, r7, lr}
   15f88:	add	sp, sp, #16
   15f8c:	bx	lr
   15f90:	ldr	r3, [pc, #112]	; 16008 <__assert_fail@plt+0x42dc>
   15f94:	ldr	r3, [r5, r3]
   15f98:	ldr	r5, [r3]
   15f9c:	bl	11ad4 <getpid@plt>
   15fa0:	ldr	r2, [pc, #100]	; 1600c <__assert_fail@plt+0x42e0>
   15fa4:	ldr	r3, [pc, #100]	; 16010 <__assert_fail@plt+0x42e4>
   15fa8:	add	r2, pc, r2
   15fac:	str	r2, [sp, #4]
   15fb0:	ldr	r2, [pc, #92]	; 16014 <__assert_fail@plt+0x42e8>
   15fb4:	add	r3, pc, r3
   15fb8:	str	r3, [sp]
   15fbc:	add	r2, pc, r2
   15fc0:	mov	r1, #1
   15fc4:	mov	r3, r0
   15fc8:	mov	r0, r5
   15fcc:	bl	11be8 <__fprintf_chk@plt>
   15fd0:	ldr	r1, [pc, #64]	; 16018 <__assert_fail@plt+0x42ec>
   15fd4:	mov	r0, r4
   15fd8:	add	r1, pc, r1
   15fdc:	bl	159f0 <__assert_fail@plt+0x3cc4>
   15fe0:	b	15f28 <__assert_fail@plt+0x41fc>
   15fe4:	mov	r0, r4
   15fe8:	bl	15dd0 <__assert_fail@plt+0x40a4>
   15fec:	mov	r4, #0
   15ff0:	b	15f6c <__assert_fail@plt+0x4240>
   15ff4:	bl	11978 <__stack_chk_fail@plt>
   15ff8:	andeq	r4, r1, ip, lsr pc
   15ffc:	andeq	r0, r0, r0, asr #3
   16000:	andeq	r1, r0, ip, lsl r0
   16004:	andeq	r5, r1, r0, asr r1
   16008:	andeq	r0, r0, r4, asr #3
   1600c:	andeq	r3, r0, r0, asr #27
   16010:	muleq	r0, ip, sp
   16014:	muleq	r0, ip, sp
   16018:	muleq	r0, ip, sp
   1601c:	ldr	r3, [r0]
   16020:	push	{r4, r5, r6, lr}
   16024:	cmp	r3, #0
   16028:	ldr	r6, [pc, #220]	; 1610c <__assert_fail@plt+0x43e0>
   1602c:	sub	sp, sp, #8
   16030:	add	r6, pc, r6
   16034:	bge	160ec <__assert_fail@plt+0x43c0>
   16038:	cmp	r1, #0
   1603c:	mov	r5, r0
   16040:	beq	160dc <__assert_fail@plt+0x43b0>
   16044:	mov	r0, r1
   16048:	bl	1196c <strdup@plt>
   1604c:	subs	r4, r0, #0
   16050:	beq	160e4 <__assert_fail@plt+0x43b8>
   16054:	ldr	r0, [r5, #12]
   16058:	bl	118c4 <free@plt>
   1605c:	ldr	r3, [pc, #172]	; 16110 <__assert_fail@plt+0x43e4>
   16060:	str	r4, [r5, #12]
   16064:	add	r3, pc, r3
   16068:	ldr	r0, [r3]
   1606c:	ands	r0, r0, #4
   16070:	bne	1607c <__assert_fail@plt+0x4350>
   16074:	add	sp, sp, #8
   16078:	pop	{r4, r5, r6, pc}
   1607c:	ldr	r3, [pc, #144]	; 16114 <__assert_fail@plt+0x43e8>
   16080:	ldr	r3, [r6, r3]
   16084:	ldr	r6, [r3]
   16088:	bl	11ad4 <getpid@plt>
   1608c:	ldr	r2, [pc, #132]	; 16118 <__assert_fail@plt+0x43ec>
   16090:	ldr	r3, [pc, #132]	; 1611c <__assert_fail@plt+0x43f0>
   16094:	add	r2, pc, r2
   16098:	str	r2, [sp, #4]
   1609c:	ldr	r2, [pc, #124]	; 16120 <__assert_fail@plt+0x43f4>
   160a0:	add	r3, pc, r3
   160a4:	str	r3, [sp]
   160a8:	add	r2, pc, r2
   160ac:	mov	r1, #1
   160b0:	mov	r3, r0
   160b4:	mov	r0, r6
   160b8:	bl	11be8 <__fprintf_chk@plt>
   160bc:	ldr	r1, [pc, #96]	; 16124 <__assert_fail@plt+0x43f8>
   160c0:	mov	r0, r5
   160c4:	mov	r2, r4
   160c8:	add	r1, pc, r1
   160cc:	bl	159f0 <__assert_fail@plt+0x3cc4>
   160d0:	mov	r0, #0
   160d4:	add	sp, sp, #8
   160d8:	pop	{r4, r5, r6, pc}
   160dc:	mov	r4, r1
   160e0:	b	16054 <__assert_fail@plt+0x4328>
   160e4:	mvn	r0, #11
   160e8:	b	16074 <__assert_fail@plt+0x4348>
   160ec:	ldr	r3, [pc, #52]	; 16128 <__assert_fail@plt+0x43fc>
   160f0:	ldr	r1, [pc, #52]	; 1612c <__assert_fail@plt+0x4400>
   160f4:	ldr	r0, [pc, #52]	; 16130 <__assert_fail@plt+0x4404>
   160f8:	add	r3, pc, r3
   160fc:	mov	r2, #109	; 0x6d
   16100:	add	r1, pc, r1
   16104:	add	r0, pc, r0
   16108:	bl	11d2c <__assert_fail@plt>
   1610c:	strdeq	r4, [r1], -ip
   16110:	andeq	r5, r1, r4
   16114:	andeq	r0, r0, r4, asr #3
   16118:	ldrdeq	r3, [r0], -r4
   1611c:			; <UNDEFINED> instruction: 0x00003cb0
   16120:			; <UNDEFINED> instruction: 0x00003cb0
   16124:	ldrdeq	r3, [r0], -r0
   16128:	ldrdeq	r3, [r0], -r4
   1612c:	andeq	r3, r0, ip, ror ip
   16130:	andeq	r3, r0, r4, lsl #25
   16134:	cmp	r0, #0
   16138:	ldrne	r0, [r0, #12]
   1613c:	bx	lr
   16140:	push	{r4, r5, r6, lr}
   16144:	subs	r5, r1, #0
   16148:	ldr	r6, [pc, #196]	; 16214 <__assert_fail@plt+0x44e8>
   1614c:	sub	sp, sp, #8
   16150:	mov	r4, r0
   16154:	add	r6, pc, r6
   16158:	beq	1616c <__assert_fail@plt+0x4440>
   1615c:	mov	r0, r5
   16160:	bl	1196c <strdup@plt>
   16164:	subs	r5, r0, #0
   16168:	beq	1620c <__assert_fail@plt+0x44e0>
   1616c:	ldr	r0, [r4]
   16170:	cmp	r0, #0
   16174:	blt	16184 <__assert_fail@plt+0x4458>
   16178:	bl	11cf0 <close@plt>
   1617c:	mvn	r3, #0
   16180:	str	r3, [r4]
   16184:	ldr	r0, [r4, #4]
   16188:	bl	118c4 <free@plt>
   1618c:	ldr	r3, [pc, #132]	; 16218 <__assert_fail@plt+0x44ec>
   16190:	str	r5, [r4, #4]
   16194:	add	r3, pc, r3
   16198:	ldr	r3, [r3]
   1619c:	ands	r0, r3, #4
   161a0:	bne	161ac <__assert_fail@plt+0x4480>
   161a4:	add	sp, sp, #8
   161a8:	pop	{r4, r5, r6, pc}
   161ac:	ldr	r3, [pc, #104]	; 1621c <__assert_fail@plt+0x44f0>
   161b0:	ldr	r3, [r6, r3]
   161b4:	ldr	r6, [r3]
   161b8:	bl	11ad4 <getpid@plt>
   161bc:	ldr	r2, [pc, #92]	; 16220 <__assert_fail@plt+0x44f4>
   161c0:	ldr	r3, [pc, #92]	; 16224 <__assert_fail@plt+0x44f8>
   161c4:	add	r2, pc, r2
   161c8:	str	r2, [sp, #4]
   161cc:	ldr	r2, [pc, #84]	; 16228 <__assert_fail@plt+0x44fc>
   161d0:	add	r3, pc, r3
   161d4:	str	r3, [sp]
   161d8:	add	r2, pc, r2
   161dc:	mov	r1, #1
   161e0:	mov	r3, r0
   161e4:	mov	r0, r6
   161e8:	bl	11be8 <__fprintf_chk@plt>
   161ec:	ldr	r1, [pc, #56]	; 1622c <__assert_fail@plt+0x4500>
   161f0:	mov	r0, r4
   161f4:	mov	r2, r5
   161f8:	add	r1, pc, r1
   161fc:	bl	159f0 <__assert_fail@plt+0x3cc4>
   16200:	mov	r0, #0
   16204:	add	sp, sp, #8
   16208:	pop	{r4, r5, r6, pc}
   1620c:	mvn	r0, #11
   16210:	b	161a4 <__assert_fail@plt+0x4478>
   16214:	ldrdeq	r4, [r1], -r8
   16218:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1621c:	andeq	r0, r0, r4, asr #3
   16220:	andeq	r3, r0, r4, lsr #23
   16224:	andeq	r3, r0, r0, lsl #23
   16228:	andeq	r3, r0, r0, lsl #23
   1622c:			; <UNDEFINED> instruction: 0x00003bb4
   16230:	cmp	r0, #0
   16234:	ldrne	r0, [r0, #4]
   16238:	bx	lr
   1623c:	ldr	r3, [pc, #144]	; 162d4 <__assert_fail@plt+0x45a8>
   16240:	add	ip, r0, #4096	; 0x1000
   16244:	add	r3, pc, r3
   16248:	str	r1, [ip, #16]
   1624c:	ldr	r3, [r3]
   16250:	str	r2, [ip, #20]
   16254:	tst	r3, #4
   16258:	ldr	r3, [pc, #120]	; 162d8 <__assert_fail@plt+0x45ac>
   1625c:	add	r3, pc, r3
   16260:	bne	1626c <__assert_fail@plt+0x4540>
   16264:	mov	r0, #0
   16268:	bx	lr
   1626c:	ldr	r2, [pc, #104]	; 162dc <__assert_fail@plt+0x45b0>
   16270:	push	{r4, r5, lr}
   16274:	sub	sp, sp, #12
   16278:	ldr	r3, [r3, r2]
   1627c:	mov	r4, r0
   16280:	ldr	r5, [r3]
   16284:	bl	11ad4 <getpid@plt>
   16288:	ldr	r2, [pc, #80]	; 162e0 <__assert_fail@plt+0x45b4>
   1628c:	ldr	r3, [pc, #80]	; 162e4 <__assert_fail@plt+0x45b8>
   16290:	add	r2, pc, r2
   16294:	str	r2, [sp, #4]
   16298:	ldr	r2, [pc, #72]	; 162e8 <__assert_fail@plt+0x45bc>
   1629c:	add	r3, pc, r3
   162a0:	str	r3, [sp]
   162a4:	add	r2, pc, r2
   162a8:	mov	r1, #1
   162ac:	mov	r3, r0
   162b0:	mov	r0, r5
   162b4:	bl	11be8 <__fprintf_chk@plt>
   162b8:	ldr	r1, [pc, #44]	; 162ec <__assert_fail@plt+0x45c0>
   162bc:	mov	r0, r4
   162c0:	add	r1, pc, r1
   162c4:	bl	159f0 <__assert_fail@plt+0x3cc4>
   162c8:	mov	r0, #0
   162cc:	add	sp, sp, #12
   162d0:	pop	{r4, r5, pc}
   162d4:	andeq	r4, r1, r4, lsr #28
   162d8:	ldrdeq	r4, [r1], -r0
   162dc:	andeq	r0, r0, r4, asr #3
   162e0:	ldrdeq	r3, [r0], -r8
   162e4:			; <UNDEFINED> instruction: 0x00003ab4
   162e8:			; <UNDEFINED> instruction: 0x00003ab4
   162ec:	strdeq	r3, [r0], -ip
   162f0:	cmp	r0, #0
   162f4:	addne	r0, r0, #4096	; 0x1000
   162f8:	ldrne	r0, [r0, #16]
   162fc:	bx	lr
   16300:	add	r3, r0, #4096	; 0x1000
   16304:	mov	r0, #0
   16308:	str	r1, [r3, #24]
   1630c:	bx	lr
   16310:	push	{r4, r5, r6, lr}
   16314:	subs	r4, r0, #0
   16318:	ldr	r5, [pc, #284]	; 1643c <__assert_fail@plt+0x4710>
   1631c:	sub	sp, sp, #8
   16320:	add	r5, pc, r5
   16324:	beq	16418 <__assert_fail@plt+0x46ec>
   16328:	ldr	r3, [r4, #4]
   1632c:	cmp	r3, #0
   16330:	beq	163f4 <__assert_fail@plt+0x46c8>
   16334:	ldr	r3, [r4]
   16338:	cmp	r3, #0
   1633c:	blt	1634c <__assert_fail@plt+0x4620>
   16340:	mov	r0, r3
   16344:	add	sp, sp, #8
   16348:	pop	{r4, r5, r6, pc}
   1634c:	bl	15b3c <__assert_fail@plt+0x3e10>
   16350:	subs	r6, r0, #0
   16354:	beq	163e4 <__assert_fail@plt+0x46b8>
   16358:	ldr	r3, [pc, #224]	; 16440 <__assert_fail@plt+0x4714>
   1635c:	add	r3, pc, r3
   16360:	ldr	r3, [r3]
   16364:	tst	r3, #4
   16368:	bne	1638c <__assert_fail@plt+0x4660>
   1636c:	mov	r0, r6
   16370:	mov	r1, #524288	; 0x80000
   16374:	bl	11a2c <open64@plt>
   16378:	mov	r3, r0
   1637c:	str	r0, [r4]
   16380:	mov	r0, r3
   16384:	add	sp, sp, #8
   16388:	pop	{r4, r5, r6, pc}
   1638c:	ldr	r3, [pc, #176]	; 16444 <__assert_fail@plt+0x4718>
   16390:	ldr	r3, [r5, r3]
   16394:	ldr	r5, [r3]
   16398:	bl	11ad4 <getpid@plt>
   1639c:	ldr	r2, [pc, #164]	; 16448 <__assert_fail@plt+0x471c>
   163a0:	ldr	r3, [pc, #164]	; 1644c <__assert_fail@plt+0x4720>
   163a4:	add	r2, pc, r2
   163a8:	str	r2, [sp, #4]
   163ac:	ldr	r2, [pc, #156]	; 16450 <__assert_fail@plt+0x4724>
   163b0:	add	r3, pc, r3
   163b4:	str	r3, [sp]
   163b8:	add	r2, pc, r2
   163bc:	mov	r1, #1
   163c0:	mov	r3, r0
   163c4:	mov	r0, r5
   163c8:	bl	11be8 <__fprintf_chk@plt>
   163cc:	ldr	r1, [pc, #128]	; 16454 <__assert_fail@plt+0x4728>
   163d0:	mov	r2, r6
   163d4:	add	r1, pc, r1
   163d8:	mov	r0, r4
   163dc:	bl	159f0 <__assert_fail@plt+0x3cc4>
   163e0:	b	1636c <__assert_fail@plt+0x4640>
   163e4:	bl	11b34 <__errno_location@plt>
   163e8:	ldr	r3, [r0]
   163ec:	rsb	r3, r3, #0
   163f0:	b	16340 <__assert_fail@plt+0x4614>
   163f4:	ldr	r3, [pc, #92]	; 16458 <__assert_fail@plt+0x472c>
   163f8:	ldr	r1, [pc, #92]	; 1645c <__assert_fail@plt+0x4730>
   163fc:	ldr	r0, [pc, #92]	; 16460 <__assert_fail@plt+0x4734>
   16400:	add	r3, pc, r3
   16404:	mov	r2, #201	; 0xc9
   16408:	add	r3, r3, #20
   1640c:	add	r1, pc, r1
   16410:	add	r0, pc, r0
   16414:	bl	11d2c <__assert_fail@plt>
   16418:	ldr	r3, [pc, #68]	; 16464 <__assert_fail@plt+0x4738>
   1641c:	ldr	r1, [pc, #68]	; 16468 <__assert_fail@plt+0x473c>
   16420:	ldr	r0, [pc, #68]	; 1646c <__assert_fail@plt+0x4740>
   16424:	add	r3, pc, r3
   16428:	mov	r2, #200	; 0xc8
   1642c:	add	r3, r3, #20
   16430:	add	r1, pc, r1
   16434:	add	r0, pc, r0
   16438:	bl	11d2c <__assert_fail@plt>
   1643c:	andeq	r4, r1, ip, lsl #22
   16440:	andeq	r4, r1, ip, lsl #26
   16444:	andeq	r0, r0, r4, asr #3
   16448:	andeq	r3, r0, r4, asr #19
   1644c:	andeq	r3, r0, r0, lsr #19
   16450:	andeq	r3, r0, r0, lsr #19
   16454:	andeq	r3, r0, ip, lsl #20
   16458:	andeq	r3, r0, ip, asr #17
   1645c:	andeq	r3, r0, r0, ror r9
   16460:	andeq	r3, r0, r0, asr #19
   16464:	andeq	r3, r0, r8, lsr #17
   16468:	andeq	r3, r0, ip, asr #18
   1646c:	muleq	r0, r8, r9
   16470:	push	{r3}		; (str r3, [sp, #-4]!)
   16474:	ldr	r3, [pc, #340]	; 165d0 <__assert_fail@plt+0x48a4>
   16478:	ldr	ip, [pc, #340]	; 165d4 <__assert_fail@plt+0x48a8>
   1647c:	add	r3, pc, r3
   16480:	push	{r4, r5, r6, r7, r8, r9, lr}
   16484:	sub	sp, sp, #24
   16488:	ldr	r8, [r3, ip]
   1648c:	ldr	r7, [sp, #52]	; 0x34
   16490:	mov	r6, r2
   16494:	ldr	r2, [r8]
   16498:	cmp	r7, #0
   1649c:	mov	r4, r1
   164a0:	str	r2, [sp, #20]
   164a4:	beq	16590 <__assert_fail@plt+0x4864>
   164a8:	add	r3, sp, #56	; 0x38
   164ac:	ldr	r5, [r0, #4]
   164b0:	mov	r1, r7
   164b4:	mov	r2, r3
   164b8:	mov	r9, r0
   164bc:	str	r3, [sp, #16]
   164c0:	bl	15be4 <__assert_fail@plt+0x3eb8>
   164c4:	cmp	r5, #0
   164c8:	beq	164d8 <__assert_fail@plt+0x47ac>
   164cc:	ldrsb	r3, [r5]
   164d0:	cmp	r3, #47	; 0x2f
   164d4:	addeq	r5, r5, #1
   164d8:	cmp	r0, #0
   164dc:	beq	164ec <__assert_fail@plt+0x47c0>
   164e0:	ldrsb	r3, [r0]
   164e4:	cmp	r3, #47	; 0x2f
   164e8:	addeq	r0, r0, #1
   164ec:	ldr	r2, [r9, #12]
   164f0:	cmp	r2, #0
   164f4:	beq	1657c <__assert_fail@plt+0x4850>
   164f8:	cmp	r5, #0
   164fc:	beq	16568 <__assert_fail@plt+0x483c>
   16500:	cmp	r0, #0
   16504:	beq	1655c <__assert_fail@plt+0x4830>
   16508:	ldr	r3, [pc, #200]	; 165d8 <__assert_fail@plt+0x48ac>
   1650c:	str	r0, [sp, #12]
   16510:	add	r3, pc, r3
   16514:	stmib	sp, {r2, r5}
   16518:	str	r3, [sp]
   1651c:	mov	r2, #1
   16520:	mvn	r3, #0
   16524:	mov	r1, r6
   16528:	mov	r0, r4
   1652c:	bl	11d08 <__snprintf_chk@plt>
   16530:	cmp	r0, r6
   16534:	bcs	165b8 <__assert_fail@plt+0x488c>
   16538:	ldr	r2, [sp, #20]
   1653c:	ldr	r3, [r8]
   16540:	mov	r0, r4
   16544:	cmp	r2, r3
   16548:	bne	165cc <__assert_fail@plt+0x48a0>
   1654c:	add	sp, sp, #24
   16550:	pop	{r4, r5, r6, r7, r8, r9, lr}
   16554:	add	sp, sp, #4
   16558:	bx	lr
   1655c:	ldr	r0, [pc, #120]	; 165dc <__assert_fail@plt+0x48b0>
   16560:	add	r0, pc, r0
   16564:	b	16508 <__assert_fail@plt+0x47dc>
   16568:	ldr	r5, [pc, #112]	; 165e0 <__assert_fail@plt+0x48b4>
   1656c:	cmp	r0, #0
   16570:	add	r5, pc, r5
   16574:	bne	16508 <__assert_fail@plt+0x47dc>
   16578:	b	1655c <__assert_fail@plt+0x4830>
   1657c:	ldr	r2, [pc, #96]	; 165e4 <__assert_fail@plt+0x48b8>
   16580:	cmp	r5, #0
   16584:	add	r2, pc, r2
   16588:	bne	16500 <__assert_fail@plt+0x47d4>
   1658c:	b	16568 <__assert_fail@plt+0x483c>
   16590:	bl	15b3c <__assert_fail@plt+0x3e10>
   16594:	subs	r1, r0, #0
   16598:	moveq	r4, r1
   1659c:	beq	16538 <__assert_fail@plt+0x480c>
   165a0:	mov	r2, r6
   165a4:	add	r6, r4, r6
   165a8:	mov	r0, r4
   165ac:	bl	11b94 <strncpy@plt>
   165b0:	strb	r7, [r6, #-1]
   165b4:	b	16538 <__assert_fail@plt+0x480c>
   165b8:	bl	11b34 <__errno_location@plt>
   165bc:	mov	r3, #36	; 0x24
   165c0:	mov	r4, #0
   165c4:	str	r3, [r0]
   165c8:	b	16538 <__assert_fail@plt+0x480c>
   165cc:	bl	11978 <__stack_chk_fail@plt>
   165d0:			; <UNDEFINED> instruction: 0x000149b0
   165d4:	andeq	r0, r0, r0, asr #3
   165d8:	andeq	r3, r0, r4, ror #17
   165dc:	andeq	r3, r0, ip, ror #15
   165e0:	ldrdeq	r3, [r0], -ip
   165e4:	andeq	r3, r0, r8, asr #15
   165e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   165ec:	sub	sp, sp, #20
   165f0:	ldr	r5, [pc, #296]	; 16720 <__assert_fail@plt+0x49f4>
   165f4:	ldr	r3, [pc, #296]	; 16724 <__assert_fail@plt+0x49f8>
   165f8:	add	r5, pc, r5
   165fc:	mov	r8, r1
   16600:	ldr	r6, [r5, r3]
   16604:	mov	r7, r2
   16608:	mov	r9, r0
   1660c:	ldr	r3, [r6]
   16610:	str	r3, [sp, #12]
   16614:	bl	16310 <__assert_fail@plt+0x45e4>
   16618:	subs	r4, r0, #0
   1661c:	str	r0, [sp, #8]
   16620:	blt	16654 <__assert_fail@plt+0x4928>
   16624:	ldr	r3, [pc, #252]	; 16728 <__assert_fail@plt+0x49fc>
   16628:	add	r3, pc, r3
   1662c:	ldr	r3, [r3]
   16630:	tst	r3, #4
   16634:	bne	166c0 <__assert_fail@plt+0x4994>
   16638:	mov	r0, r4
   1663c:	mov	r3, #0
   16640:	mov	r2, r8
   16644:	mov	r1, r7
   16648:	bl	118f4 <faccessat@plt>
   1664c:	subs	r4, r0, #0
   16650:	bne	16670 <__assert_fail@plt+0x4944>
   16654:	ldr	r2, [sp, #12]
   16658:	ldr	r3, [r6]
   1665c:	mov	r0, r4
   16660:	cmp	r2, r3
   16664:	bne	1671c <__assert_fail@plt+0x49f0>
   16668:	add	sp, sp, #20
   1666c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16670:	bl	11b34 <__errno_location@plt>
   16674:	ldr	r3, [r0]
   16678:	cmp	r3, #2
   1667c:	bne	16654 <__assert_fail@plt+0x4928>
   16680:	add	r3, r9, #4096	; 0x1000
   16684:	ldr	r3, [r3, #24]
   16688:	cmp	r3, #0
   1668c:	beq	16654 <__assert_fail@plt+0x4928>
   16690:	mov	r0, r9
   16694:	add	r2, sp, #8
   16698:	mov	r1, r7
   1669c:	blx	r3
   166a0:	subs	r3, r0, #0
   166a4:	bne	16654 <__assert_fail@plt+0x4928>
   166a8:	mov	r2, r8
   166ac:	mov	r1, r7
   166b0:	ldr	r0, [sp, #8]
   166b4:	bl	118f4 <faccessat@plt>
   166b8:	mov	r4, r0
   166bc:	b	16654 <__assert_fail@plt+0x4928>
   166c0:	ldr	r3, [pc, #100]	; 1672c <__assert_fail@plt+0x4a00>
   166c4:	ldr	r3, [r5, r3]
   166c8:	ldr	r4, [r3]
   166cc:	bl	11ad4 <getpid@plt>
   166d0:	ldr	r2, [pc, #88]	; 16730 <__assert_fail@plt+0x4a04>
   166d4:	ldr	r3, [pc, #88]	; 16734 <__assert_fail@plt+0x4a08>
   166d8:	add	r2, pc, r2
   166dc:	str	r2, [sp, #4]
   166e0:	ldr	r2, [pc, #80]	; 16738 <__assert_fail@plt+0x4a0c>
   166e4:	add	r3, pc, r3
   166e8:	str	r3, [sp]
   166ec:	add	r2, pc, r2
   166f0:	mov	r1, #1
   166f4:	mov	r3, r0
   166f8:	mov	r0, r4
   166fc:	bl	11be8 <__fprintf_chk@plt>
   16700:	ldr	r1, [pc, #52]	; 1673c <__assert_fail@plt+0x4a10>
   16704:	mov	r2, r7
   16708:	add	r1, pc, r1
   1670c:	mov	r0, r9
   16710:	bl	159f0 <__assert_fail@plt+0x3cc4>
   16714:	ldr	r4, [sp, #8]
   16718:	b	16638 <__assert_fail@plt+0x490c>
   1671c:	bl	11978 <__stack_chk_fail@plt>
   16720:	andeq	r4, r1, r4, lsr r8
   16724:	andeq	r0, r0, r0, asr #3
   16728:	andeq	r4, r1, r0, asr #20
   1672c:	andeq	r0, r0, r4, asr #3
   16730:	muleq	r0, r0, r6
   16734:	andeq	r3, r0, ip, ror #12
   16738:	andeq	r3, r0, ip, ror #12
   1673c:	strdeq	r3, [r0], -r8
   16740:	push	{r2, r3}
   16744:	ldr	r3, [pc, #104]	; 167b4 <__assert_fail@plt+0x4a88>
   16748:	ldr	r2, [pc, #104]	; 167b8 <__assert_fail@plt+0x4a8c>
   1674c:	add	r3, pc, r3
   16750:	push	{r4, r5, r6, lr}
   16754:	sub	sp, sp, #8
   16758:	ldr	r4, [r3, r2]
   1675c:	add	ip, sp, #28
   16760:	mov	r2, ip
   16764:	ldr	r3, [r4]
   16768:	mov	r6, r1
   1676c:	ldr	r1, [sp, #24]
   16770:	str	r3, [sp, #4]
   16774:	mov	r5, r0
   16778:	str	ip, [sp]
   1677c:	bl	15be4 <__assert_fail@plt+0x3eb8>
   16780:	mov	r1, r6
   16784:	mov	r2, r0
   16788:	mov	r0, r5
   1678c:	bl	165e8 <__assert_fail@plt+0x48bc>
   16790:	ldr	r2, [sp, #4]
   16794:	ldr	r3, [r4]
   16798:	cmp	r2, r3
   1679c:	bne	167b0 <__assert_fail@plt+0x4a84>
   167a0:	add	sp, sp, #8
   167a4:	pop	{r4, r5, r6, lr}
   167a8:	add	sp, sp, #8
   167ac:	bx	lr
   167b0:	bl	11978 <__stack_chk_fail@plt>
   167b4:	andeq	r4, r1, r0, ror #13
   167b8:	andeq	r0, r0, r0, asr #3
   167bc:	push	{r4, r5, r6, r7, r8, r9, lr}
   167c0:	sub	sp, sp, #20
   167c4:	ldr	r5, [pc, #536]	; 169e4 <__assert_fail@plt+0x4cb8>
   167c8:	ldr	r3, [pc, #536]	; 169e8 <__assert_fail@plt+0x4cbc>
   167cc:	add	r5, pc, r5
   167d0:	subs	r8, r0, #0
   167d4:	ldr	r6, [r5, r3]
   167d8:	mov	r7, r2
   167dc:	ldr	r3, [r6]
   167e0:	str	r3, [sp, #12]
   167e4:	beq	16844 <__assert_fail@plt+0x4b18>
   167e8:	mov	r9, r1
   167ec:	bl	16310 <__assert_fail@plt+0x45e4>
   167f0:	cmp	r0, #0
   167f4:	mov	r4, r0
   167f8:	str	r0, [sp, #8]
   167fc:	blt	16828 <__assert_fail@plt+0x4afc>
   16800:	mov	r2, r9
   16804:	mov	r1, r7
   16808:	bl	11918 <__openat64_2@plt>
   1680c:	subs	r4, r0, #0
   16810:	blt	168b8 <__assert_fail@plt+0x4b8c>
   16814:	ldr	r3, [pc, #464]	; 169ec <__assert_fail@plt+0x4cc0>
   16818:	add	r3, pc, r3
   1681c:	ldr	r3, [r3]
   16820:	tst	r3, #4
   16824:	bne	16970 <__assert_fail@plt+0x4c44>
   16828:	ldr	r2, [sp, #12]
   1682c:	ldr	r3, [r6]
   16830:	mov	r0, r4
   16834:	cmp	r2, r3
   16838:	bne	169d8 <__assert_fail@plt+0x4cac>
   1683c:	add	sp, sp, #20
   16840:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16844:	mov	r0, r2
   16848:	bl	11b28 <__open64_2@plt>
   1684c:	ldr	r3, [pc, #412]	; 169f0 <__assert_fail@plt+0x4cc4>
   16850:	add	r3, pc, r3
   16854:	ldr	r3, [r3]
   16858:	tst	r3, #4
   1685c:	mov	r4, r0
   16860:	beq	16828 <__assert_fail@plt+0x4afc>
   16864:	ldr	r3, [pc, #392]	; 169f4 <__assert_fail@plt+0x4cc8>
   16868:	ldr	r3, [r5, r3]
   1686c:	ldr	r5, [r3]
   16870:	bl	11ad4 <getpid@plt>
   16874:	ldr	r2, [pc, #380]	; 169f8 <__assert_fail@plt+0x4ccc>
   16878:	ldr	r3, [pc, #380]	; 169fc <__assert_fail@plt+0x4cd0>
   1687c:	add	r2, pc, r2
   16880:	str	r2, [sp, #4]
   16884:	ldr	r2, [pc, #372]	; 16a00 <__assert_fail@plt+0x4cd4>
   16888:	add	r3, pc, r3
   1688c:	str	r3, [sp]
   16890:	add	r2, pc, r2
   16894:	mov	r1, #1
   16898:	mov	r3, r0
   1689c:	mov	r0, r5
   168a0:	bl	11be8 <__fprintf_chk@plt>
   168a4:	ldr	r0, [pc, #344]	; 16a04 <__assert_fail@plt+0x4cd8>
   168a8:	mov	r1, r7
   168ac:	add	r0, pc, r0
   168b0:	bl	15abc <__assert_fail@plt+0x3d90>
   168b4:	b	16828 <__assert_fail@plt+0x4afc>
   168b8:	bl	11b34 <__errno_location@plt>
   168bc:	ldr	r3, [r0]
   168c0:	cmp	r3, #2
   168c4:	bne	16814 <__assert_fail@plt+0x4ae8>
   168c8:	add	r3, r8, #4096	; 0x1000
   168cc:	ldr	r3, [r3, #24]
   168d0:	cmp	r3, #0
   168d4:	beq	16814 <__assert_fail@plt+0x4ae8>
   168d8:	add	r2, sp, #8
   168dc:	mov	r1, r7
   168e0:	mov	r0, r8
   168e4:	blx	r3
   168e8:	cmp	r0, #0
   168ec:	bne	16814 <__assert_fail@plt+0x4ae8>
   168f0:	mov	r2, r9
   168f4:	mov	r1, r7
   168f8:	ldr	r0, [sp, #8]
   168fc:	bl	11918 <__openat64_2@plt>
   16900:	ldr	r3, [pc, #256]	; 16a08 <__assert_fail@plt+0x4cdc>
   16904:	add	r3, pc, r3
   16908:	ldr	r3, [r3]
   1690c:	tst	r3, #4
   16910:	mov	r9, r0
   16914:	beq	169dc <__assert_fail@plt+0x4cb0>
   16918:	ldr	r3, [pc, #212]	; 169f4 <__assert_fail@plt+0x4cc8>
   1691c:	ldr	r3, [r5, r3]
   16920:	ldr	r5, [r3]
   16924:	bl	11ad4 <getpid@plt>
   16928:	ldr	r2, [pc, #220]	; 16a0c <__assert_fail@plt+0x4ce0>
   1692c:	ldr	r3, [pc, #220]	; 16a10 <__assert_fail@plt+0x4ce4>
   16930:	add	r2, pc, r2
   16934:	str	r2, [sp, #4]
   16938:	ldr	r2, [pc, #212]	; 16a14 <__assert_fail@plt+0x4ce8>
   1693c:	add	r3, pc, r3
   16940:	str	r3, [sp]
   16944:	add	r2, pc, r2
   16948:	mov	r1, #1
   1694c:	mov	r3, r0
   16950:	mov	r0, r5
   16954:	bl	11be8 <__fprintf_chk@plt>
   16958:	ldr	r3, [pc, #184]	; 16a18 <__assert_fail@plt+0x4cec>
   1695c:	cmp	r4, r9
   16960:	add	r3, pc, r3
   16964:	ldrne	r3, [pc, #176]	; 16a1c <__assert_fail@plt+0x4cf0>
   16968:	addne	r3, pc, r3
   1696c:	b	169bc <__assert_fail@plt+0x4c90>
   16970:	ldr	r3, [pc, #124]	; 169f4 <__assert_fail@plt+0x4cc8>
   16974:	mov	r9, r4
   16978:	ldr	r3, [r5, r3]
   1697c:	ldr	r4, [r3]
   16980:	bl	11ad4 <getpid@plt>
   16984:	ldr	r2, [pc, #148]	; 16a20 <__assert_fail@plt+0x4cf4>
   16988:	ldr	r3, [pc, #148]	; 16a24 <__assert_fail@plt+0x4cf8>
   1698c:	add	r2, pc, r2
   16990:	str	r2, [sp, #4]
   16994:	ldr	r2, [pc, #140]	; 16a28 <__assert_fail@plt+0x4cfc>
   16998:	add	r3, pc, r3
   1699c:	str	r3, [sp]
   169a0:	add	r2, pc, r2
   169a4:	mov	r1, #1
   169a8:	mov	r3, r0
   169ac:	mov	r0, r4
   169b0:	bl	11be8 <__fprintf_chk@plt>
   169b4:	ldr	r3, [pc, #112]	; 16a2c <__assert_fail@plt+0x4d00>
   169b8:	add	r3, pc, r3
   169bc:	ldr	r1, [pc, #108]	; 16a30 <__assert_fail@plt+0x4d04>
   169c0:	mov	r2, r7
   169c4:	mov	r0, r8
   169c8:	add	r1, pc, r1
   169cc:	mov	r4, r9
   169d0:	bl	159f0 <__assert_fail@plt+0x3cc4>
   169d4:	b	16828 <__assert_fail@plt+0x4afc>
   169d8:	bl	11978 <__stack_chk_fail@plt>
   169dc:	mov	r4, r0
   169e0:	b	16828 <__assert_fail@plt+0x4afc>
   169e4:	andeq	r4, r1, r0, ror #12
   169e8:	andeq	r0, r0, r0, asr #3
   169ec:	andeq	r4, r1, r0, asr r8
   169f0:	andeq	r4, r1, r8, lsl r8
   169f4:	andeq	r0, r0, r4, asr #3
   169f8:	andeq	r3, r0, ip, ror #9
   169fc:	andeq	r3, r0, r8, asr #9
   16a00:	andeq	r3, r0, r8, asr #9
   16a04:	andeq	r3, r0, r4, ror r5
   16a08:	andeq	r4, r1, r4, ror #14
   16a0c:	andeq	r3, r0, r8, lsr r4
   16a10:	andeq	r3, r0, r4, lsl r4
   16a14:	andeq	r3, r0, r4, lsl r4
   16a18:	andeq	r3, r0, ip, ror #7
   16a1c:	andeq	r3, r0, r8, lsr #9
   16a20:	ldrdeq	r3, [r0], -ip
   16a24:			; <UNDEFINED> instruction: 0x000033b8
   16a28:			; <UNDEFINED> instruction: 0x000033b8
   16a2c:	muleq	r0, r4, r3
   16a30:	andeq	r3, r0, r8, ror #8
   16a34:	mov	ip, r2
   16a38:	push	{r4, r5, r6, lr}
   16a3c:	mov	r2, r3
   16a40:	mov	r5, r1
   16a44:	mov	r1, ip
   16a48:	mov	r4, r0
   16a4c:	bl	15be4 <__assert_fail@plt+0x3eb8>
   16a50:	subs	r2, r0, #0
   16a54:	beq	16a68 <__assert_fail@plt+0x4d3c>
   16a58:	mov	r1, r5
   16a5c:	mov	r0, r4
   16a60:	pop	{r4, r5, r6, lr}
   16a64:	b	167bc <__assert_fail@plt+0x4a90>
   16a68:	bl	11b34 <__errno_location@plt>
   16a6c:	ldr	r0, [r0]
   16a70:	rsb	r0, r0, #0
   16a74:	pop	{r4, r5, r6, pc}
   16a78:	push	{r2, r3}
   16a7c:	ldr	r2, [pc, #80]	; 16ad4 <__assert_fail@plt+0x4da8>
   16a80:	ldr	ip, [pc, #80]	; 16ad8 <__assert_fail@plt+0x4dac>
   16a84:	add	r2, pc, r2
   16a88:	push	{r4, lr}
   16a8c:	sub	sp, sp, #8
   16a90:	ldr	r4, [r2, ip]
   16a94:	add	lr, sp, #20
   16a98:	mov	r3, lr
   16a9c:	ldr	ip, [r4]
   16aa0:	ldr	r2, [sp, #16]
   16aa4:	str	lr, [sp]
   16aa8:	str	ip, [sp, #4]
   16aac:	bl	16a34 <__assert_fail@plt+0x4d08>
   16ab0:	ldr	r2, [sp, #4]
   16ab4:	ldr	r3, [r4]
   16ab8:	cmp	r2, r3
   16abc:	bne	16ad0 <__assert_fail@plt+0x4da4>
   16ac0:	add	sp, sp, #8
   16ac4:	pop	{r4, lr}
   16ac8:	add	sp, sp, #8
   16acc:	bx	lr
   16ad0:	bl	11978 <__stack_chk_fail@plt>
   16ad4:	andeq	r4, r1, r8, lsr #7
   16ad8:	andeq	r0, r0, r0, asr #3
   16adc:	push	{r4, r5, r6, r7, r8, lr}
   16ae0:	subs	r4, r1, #0
   16ae4:	beq	16ba0 <__assert_fail@plt+0x4e74>
   16ae8:	ldrsb	r3, [r4]
   16aec:	cmp	r3, #0
   16af0:	beq	16ba8 <__assert_fail@plt+0x4e7c>
   16af4:	ldr	r5, [pc, #180]	; 16bb0 <__assert_fail@plt+0x4e84>
   16af8:	ldr	r7, [pc, #180]	; 16bb4 <__assert_fail@plt+0x4e88>
   16afc:	ldr	lr, [pc, #180]	; 16bb8 <__assert_fail@plt+0x4e8c>
   16b00:	ldr	r6, [pc, #180]	; 16bbc <__assert_fail@plt+0x4e90>
   16b04:	mov	ip, r4
   16b08:	mov	r1, #0
   16b0c:	b	16b3c <__assert_fail@plt+0x4e10>
   16b10:	cmp	r3, #119	; 0x77
   16b14:	beq	16b70 <__assert_fail@plt+0x4e44>
   16b18:	cmp	r3, #97	; 0x61
   16b1c:	beq	16b84 <__assert_fail@plt+0x4e58>
   16b20:	cmp	r3, #101	; 0x65
   16b24:	orreq	r1, r1, #524288	; 0x80000
   16b28:	cmn	ip, #1
   16b2c:	beq	16b58 <__assert_fail@plt+0x4e2c>
   16b30:	ldrsb	r3, [ip, #1]!
   16b34:	cmp	r3, #0
   16b38:	beq	16b58 <__assert_fail@plt+0x4e2c>
   16b3c:	cmp	r3, #114	; 0x72
   16b40:	bne	16b10 <__assert_fail@plt+0x4de4>
   16b44:	ldrsb	r3, [ip, #1]
   16b48:	cmp	r3, #43	; 0x2b
   16b4c:	orreq	r1, r1, #2
   16b50:	cmn	ip, #1
   16b54:	bne	16b30 <__assert_fail@plt+0x4e04>
   16b58:	bl	167bc <__assert_fail@plt+0x4a90>
   16b5c:	cmp	r0, #0
   16b60:	blt	16b98 <__assert_fail@plt+0x4e6c>
   16b64:	mov	r1, r4
   16b68:	pop	{r4, r5, r6, r7, r8, lr}
   16b6c:	b	1181c <fdopen@plt>
   16b70:	ldrsb	r3, [ip, #1]
   16b74:	cmp	r3, #43	; 0x2b
   16b78:	orreq	r1, r1, r6
   16b7c:	orrne	r1, r1, lr
   16b80:	b	16b28 <__assert_fail@plt+0x4dfc>
   16b84:	ldrsb	r3, [ip, #1]
   16b88:	cmp	r3, #43	; 0x2b
   16b8c:	orreq	r1, r1, r7
   16b90:	orrne	r1, r1, r5
   16b94:	b	16b28 <__assert_fail@plt+0x4dfc>
   16b98:	mov	r0, #0
   16b9c:	pop	{r4, r5, r6, r7, r8, pc}
   16ba0:	mov	r1, r4
   16ba4:	b	16b58 <__assert_fail@plt+0x4e2c>
   16ba8:	mov	r1, r3
   16bac:	b	16b58 <__assert_fail@plt+0x4e2c>
   16bb0:	andeq	r0, r0, r1, lsl #8
   16bb4:	andeq	r0, r0, r2, lsl #8
   16bb8:	andeq	r0, r0, r1, lsl #4
   16bbc:	andeq	r0, r0, r2, lsl #4
   16bc0:	mov	ip, r2
   16bc4:	push	{r4, r5, r6, lr}
   16bc8:	mov	r2, r3
   16bcc:	mov	r5, r1
   16bd0:	mov	r1, ip
   16bd4:	mov	r4, r0
   16bd8:	bl	15be4 <__assert_fail@plt+0x3eb8>
   16bdc:	subs	r2, r0, #0
   16be0:	popeq	{r4, r5, r6, pc}
   16be4:	mov	r1, r5
   16be8:	mov	r0, r4
   16bec:	pop	{r4, r5, r6, lr}
   16bf0:	b	16adc <__assert_fail@plt+0x4db0>
   16bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bf8:	add	fp, sp, #32
   16bfc:	ldr	lr, [pc, #300]	; 16d30 <__assert_fail@plt+0x5004>
   16c00:	ldr	ip, [pc, #300]	; 16d34 <__assert_fail@plt+0x5008>
   16c04:	add	lr, pc, lr
   16c08:	sub	sp, sp, #20
   16c0c:	ldr	ip, [lr, ip]
   16c10:	rsb	r6, r2, r2, lsl #3
   16c14:	mov	r7, r1
   16c18:	mov	r4, r2
   16c1c:	mov	r1, lr
   16c20:	add	r2, r6, #7
   16c24:	ldr	r1, [pc, #268]	; 16d38 <__assert_fail@plt+0x500c>
   16c28:	str	ip, [fp, #-48]	; 0xffffffd0
   16c2c:	bic	r2, r2, #7
   16c30:	ldr	ip, [ip]
   16c34:	mov	r8, #0
   16c38:	sub	sp, sp, r2
   16c3c:	mov	r9, r3
   16c40:	str	r8, [r7]
   16c44:	ldrd	r2, [fp, #4]
   16c48:	add	r1, pc, r1
   16c4c:	str	ip, [fp, #-40]	; 0xffffffd8
   16c50:	bl	16bc0 <__assert_fail@plt+0x4e94>
   16c54:	subs	r5, r0, #0
   16c58:	beq	16d14 <__assert_fail@plt+0x4fe8>
   16c5c:	mov	r1, r6
   16c60:	mov	r2, r5
   16c64:	mov	r0, sp
   16c68:	bl	118d0 <fgets@plt>
   16c6c:	cmp	r0, #0
   16c70:	beq	16d14 <__assert_fail@plt+0x4fe8>
   16c74:	mov	r0, r5
   16c78:	bl	11bf4 <fclose@plt>
   16c7c:	mov	r0, sp
   16c80:	bl	11b04 <strlen@plt>
   16c84:	mov	r2, #0
   16c88:	sub	r1, fp, #44	; 0x2c
   16c8c:	mov	sl, sp
   16c90:	sub	r0, r0, #1
   16c94:	ldrsb	r3, [sp, r0]
   16c98:	cmp	r3, #10
   16c9c:	strbeq	r8, [sp, r0]
   16ca0:	mov	r0, r4
   16ca4:	bl	186a0 <__assert_fail@plt+0x6974>
   16ca8:	cmp	r0, #0
   16cac:	str	r0, [r7]
   16cb0:	beq	16d24 <__assert_fail@plt+0x4ff8>
   16cb4:	cmp	r9, #0
   16cb8:	mov	r1, r0
   16cbc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16cc0:	mov	r0, sl
   16cc4:	bne	16cf4 <__assert_fail@plt+0x4fc8>
   16cc8:	bl	18ad0 <__assert_fail@plt+0x6da4>
   16ccc:	cmp	r0, #0
   16cd0:	bne	16d04 <__assert_fail@plt+0x4fd8>
   16cd4:	mov	r0, #0
   16cd8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16cdc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16ce0:	ldr	r3, [r3]
   16ce4:	cmp	r2, r3
   16ce8:	bne	16d2c <__assert_fail@plt+0x5000>
   16cec:	sub	sp, fp, #32
   16cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cf4:	mov	r3, #0
   16cf8:	bl	18c28 <__assert_fail@plt+0x6efc>
   16cfc:	cmp	r0, #0
   16d00:	beq	16cd4 <__assert_fail@plt+0x4fa8>
   16d04:	ldr	r0, [r7]
   16d08:	bl	186e4 <__assert_fail@plt+0x69b8>
   16d0c:	mvn	r0, #21
   16d10:	b	16cd8 <__assert_fail@plt+0x4fac>
   16d14:	bl	11b34 <__errno_location@plt>
   16d18:	ldr	r0, [r0]
   16d1c:	rsb	r0, r0, #0
   16d20:	b	16cd8 <__assert_fail@plt+0x4fac>
   16d24:	mvn	r0, #11
   16d28:	b	16cd8 <__assert_fail@plt+0x4fac>
   16d2c:	bl	11978 <__stack_chk_fail@plt>
   16d30:	andeq	r4, r1, r8, lsr #4
   16d34:	andeq	r0, r0, r0, asr #3
   16d38:	strdeq	r3, [r0], -r8
   16d3c:	push	{r2, r3}
   16d40:	ldr	r2, [pc, #80]	; 16d98 <__assert_fail@plt+0x506c>
   16d44:	ldr	ip, [pc, #80]	; 16d9c <__assert_fail@plt+0x5070>
   16d48:	add	r2, pc, r2
   16d4c:	push	{r4, lr}
   16d50:	sub	sp, sp, #8
   16d54:	ldr	r4, [r2, ip]
   16d58:	add	lr, sp, #20
   16d5c:	mov	r3, lr
   16d60:	ldr	ip, [r4]
   16d64:	ldr	r2, [sp, #16]
   16d68:	str	lr, [sp]
   16d6c:	str	ip, [sp, #4]
   16d70:	bl	16bc0 <__assert_fail@plt+0x4e94>
   16d74:	ldr	r2, [sp, #4]
   16d78:	ldr	r3, [r4]
   16d7c:	cmp	r2, r3
   16d80:	bne	16d94 <__assert_fail@plt+0x5068>
   16d84:	add	sp, sp, #8
   16d88:	pop	{r4, lr}
   16d8c:	add	sp, sp, #8
   16d90:	bx	lr
   16d94:	bl	11978 <__stack_chk_fail@plt>
   16d98:	andeq	r4, r1, r4, ror #1
   16d9c:	andeq	r0, r0, r0, asr #3
   16da0:	ldr	r3, [pc, #268]	; 16eb4 <__assert_fail@plt+0x5188>
   16da4:	push	{r4, r5, r6, lr}
   16da8:	subs	r5, r1, #0
   16dac:	sub	sp, sp, #8
   16db0:	add	r3, pc, r3
   16db4:	beq	16df4 <__assert_fail@plt+0x50c8>
   16db8:	mov	r2, r5
   16dbc:	mov	r1, #524288	; 0x80000
   16dc0:	bl	167bc <__assert_fail@plt+0x4a90>
   16dc4:	mov	r4, r0
   16dc8:	cmp	r4, #0
   16dcc:	blt	16e34 <__assert_fail@plt+0x5108>
   16dd0:	mov	r0, r4
   16dd4:	bl	11c84 <fdopendir@plt>
   16dd8:	subs	r6, r0, #0
   16ddc:	beq	16ea8 <__assert_fail@plt+0x517c>
   16de0:	cmp	r5, #0
   16de4:	beq	16e98 <__assert_fail@plt+0x516c>
   16de8:	mov	r0, r6
   16dec:	add	sp, sp, #8
   16df0:	pop	{r4, r5, r6, pc}
   16df4:	ldr	r2, [r0, #4]
   16df8:	mov	r4, r0
   16dfc:	cmp	r2, #0
   16e00:	beq	16e34 <__assert_fail@plt+0x5108>
   16e04:	ldr	r2, [pc, #172]	; 16eb8 <__assert_fail@plt+0x518c>
   16e08:	add	r2, pc, r2
   16e0c:	ldr	r2, [r2]
   16e10:	tst	r2, #4
   16e14:	bne	16e44 <__assert_fail@plt+0x5118>
   16e18:	mov	r0, r4
   16e1c:	bl	16310 <__assert_fail@plt+0x45e4>
   16e20:	mov	r1, #3
   16e24:	bl	184e0 <__assert_fail@plt+0x67b4>
   16e28:	mov	r4, r0
   16e2c:	cmp	r4, #0
   16e30:	bge	16dd0 <__assert_fail@plt+0x50a4>
   16e34:	mov	r6, #0
   16e38:	mov	r0, r6
   16e3c:	add	sp, sp, #8
   16e40:	pop	{r4, r5, r6, pc}
   16e44:	ldr	r2, [pc, #112]	; 16ebc <__assert_fail@plt+0x5190>
   16e48:	ldr	r3, [r3, r2]
   16e4c:	ldr	r6, [r3]
   16e50:	bl	11ad4 <getpid@plt>
   16e54:	ldr	r2, [pc, #100]	; 16ec0 <__assert_fail@plt+0x5194>
   16e58:	ldr	r3, [pc, #100]	; 16ec4 <__assert_fail@plt+0x5198>
   16e5c:	add	r2, pc, r2
   16e60:	str	r2, [sp, #4]
   16e64:	ldr	r2, [pc, #92]	; 16ec8 <__assert_fail@plt+0x519c>
   16e68:	add	r3, pc, r3
   16e6c:	str	r3, [sp]
   16e70:	add	r2, pc, r2
   16e74:	mov	r1, #1
   16e78:	mov	r3, r0
   16e7c:	mov	r0, r6
   16e80:	bl	11be8 <__fprintf_chk@plt>
   16e84:	ldr	r1, [pc, #64]	; 16ecc <__assert_fail@plt+0x51a0>
   16e88:	mov	r0, r4
   16e8c:	add	r1, pc, r1
   16e90:	bl	159f0 <__assert_fail@plt+0x3cc4>
   16e94:	b	16e18 <__assert_fail@plt+0x50ec>
   16e98:	bl	11864 <rewinddir@plt>
   16e9c:	mov	r0, r6
   16ea0:	add	sp, sp, #8
   16ea4:	pop	{r4, r5, r6, pc}
   16ea8:	mov	r0, r4
   16eac:	bl	11cf0 <close@plt>
   16eb0:	b	16de8 <__assert_fail@plt+0x50bc>
   16eb4:	andeq	r4, r1, ip, ror r0
   16eb8:	andeq	r4, r1, r0, ror #4
   16ebc:	andeq	r0, r0, r4, asr #3
   16ec0:	andeq	r2, r0, ip, lsl #30
   16ec4:	andeq	r2, r0, r8, ror #29
   16ec8:	andeq	r2, r0, r8, ror #29
   16ecc:			; <UNDEFINED> instruction: 0x00002fb8
   16ed0:	push	{r4, lr}
   16ed4:	mov	r4, r0
   16ed8:	bl	15be4 <__assert_fail@plt+0x3eb8>
   16edc:	subs	r1, r0, #0
   16ee0:	popeq	{r4, pc}
   16ee4:	mov	r0, r4
   16ee8:	pop	{r4, lr}
   16eec:	b	16da0 <__assert_fail@plt+0x5074>
   16ef0:	push	{r1, r2, r3}
   16ef4:	ldr	r3, [pc, #80]	; 16f4c <__assert_fail@plt+0x5220>
   16ef8:	ldr	r1, [pc, #80]	; 16f50 <__assert_fail@plt+0x5224>
   16efc:	add	r3, pc, r3
   16f00:	push	{r4, lr}
   16f04:	sub	sp, sp, #12
   16f08:	ldr	r4, [r3, r1]
   16f0c:	add	ip, sp, #24
   16f10:	mov	r2, ip
   16f14:	ldr	r3, [r4]
   16f18:	ldr	r1, [sp, #20]
   16f1c:	str	r3, [sp, #4]
   16f20:	str	ip, [sp]
   16f24:	bl	16ed0 <__assert_fail@plt+0x51a4>
   16f28:	ldr	r2, [sp, #4]
   16f2c:	ldr	r3, [r4]
   16f30:	cmp	r2, r3
   16f34:	bne	16f48 <__assert_fail@plt+0x521c>
   16f38:	add	sp, sp, #12
   16f3c:	pop	{r4, lr}
   16f40:	add	sp, sp, #12
   16f44:	bx	lr
   16f48:	bl	11978 <__stack_chk_fail@plt>
   16f4c:	andeq	r3, r1, r0, lsr pc
   16f50:	andeq	r0, r0, r0, asr #3
   16f54:	push	{r4, r5, r6, lr}
   16f58:	subs	r6, r3, #0
   16f5c:	mov	r4, r1
   16f60:	mov	r5, r2
   16f64:	beq	16f88 <__assert_fail@plt+0x525c>
   16f68:	bl	16310 <__assert_fail@plt+0x45e4>
   16f6c:	subs	r3, r0, #0
   16f70:	blt	16fb0 <__assert_fail@plt+0x5284>
   16f74:	mov	r3, r5
   16f78:	mov	r2, r4
   16f7c:	mov	r1, r6
   16f80:	pop	{r4, r5, r6, lr}
   16f84:	b	11a68 <readlinkat@plt>
   16f88:	bl	15b3c <__assert_fail@plt+0x3e10>
   16f8c:	cmp	r0, #0
   16f90:	beq	16fa4 <__assert_fail@plt+0x5278>
   16f94:	mov	r2, r5
   16f98:	mov	r1, r4
   16f9c:	pop	{r4, r5, r6, lr}
   16fa0:	b	119d8 <readlink@plt>
   16fa4:	bl	11b34 <__errno_location@plt>
   16fa8:	ldr	r3, [r0]
   16fac:	rsb	r3, r3, #0
   16fb0:	mov	r0, r3
   16fb4:	pop	{r4, r5, r6, pc}
   16fb8:	push	{r3}		; (str r3, [sp, #-4]!)
   16fbc:	ldr	r3, [pc, #132]	; 17048 <__assert_fail@plt+0x531c>
   16fc0:	ldr	ip, [pc, #132]	; 1704c <__assert_fail@plt+0x5320>
   16fc4:	add	r3, pc, r3
   16fc8:	push	{r4, r5, r6, r7, lr}
   16fcc:	sub	sp, sp, #8
   16fd0:	ldr	r4, [r3, ip]
   16fd4:	add	lr, sp, #32
   16fd8:	mov	r5, r1
   16fdc:	ldr	ip, [r4]
   16fe0:	mov	r7, r2
   16fe4:	ldr	r1, [sp, #28]
   16fe8:	mov	r2, lr
   16fec:	str	ip, [sp, #4]
   16ff0:	str	lr, [sp]
   16ff4:	mov	r6, r0
   16ff8:	bl	15be4 <__assert_fail@plt+0x3eb8>
   16ffc:	subs	r3, r0, #0
   17000:	beq	17034 <__assert_fail@plt+0x5308>
   17004:	mov	r2, r7
   17008:	mov	r1, r5
   1700c:	mov	r0, r6
   17010:	bl	16f54 <__assert_fail@plt+0x5228>
   17014:	ldr	r2, [sp, #4]
   17018:	ldr	r3, [r4]
   1701c:	cmp	r2, r3
   17020:	bne	17044 <__assert_fail@plt+0x5318>
   17024:	add	sp, sp, #8
   17028:	pop	{r4, r5, r6, r7, lr}
   1702c:	add	sp, sp, #4
   17030:	bx	lr
   17034:	bl	11b34 <__errno_location@plt>
   17038:	ldr	r0, [r0]
   1703c:	rsb	r0, r0, #0
   17040:	b	17014 <__assert_fail@plt+0x52e8>
   17044:	bl	11978 <__stack_chk_fail@plt>
   17048:	andeq	r3, r1, r8, ror #28
   1704c:	andeq	r0, r0, r0, asr #3
   17050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17054:	mov	r9, r3
   17058:	ldr	r4, [pc, #400]	; 171f0 <__assert_fail@plt+0x54c4>
   1705c:	ldr	ip, [pc, #400]	; 171f4 <__assert_fail@plt+0x54c8>
   17060:	add	r4, pc, r4
   17064:	sub	sp, sp, #36	; 0x24
   17068:	ldr	r3, [r4, ip]
   1706c:	mov	r6, r1
   17070:	str	r3, [sp, #12]
   17074:	ldr	r3, [r3]
   17078:	mov	r1, #524288	; 0x80000
   1707c:	mov	r5, r2
   17080:	mov	r2, r9
   17084:	str	r3, [sp, #28]
   17088:	bl	167bc <__assert_fail@plt+0x4a90>
   1708c:	mov	r7, r0
   17090:	bl	11b34 <__errno_location@plt>
   17094:	cmp	r7, #0
   17098:	mov	r8, r0
   1709c:	blt	171cc <__assert_fail@plt+0x54a0>
   170a0:	ldr	r3, [pc, #336]	; 171f8 <__assert_fail@plt+0x54cc>
   170a4:	add	r3, pc, r3
   170a8:	ldr	r3, [r3]
   170ac:	tst	r3, #4
   170b0:	bne	17158 <__assert_fail@plt+0x542c>
   170b4:	mov	r2, r5
   170b8:	mov	r1, #0
   170bc:	mov	r0, r6
   170c0:	bl	11b88 <memset@plt>
   170c4:	cmp	r5, #0
   170c8:	movne	r4, #0
   170cc:	movne	fp, r4
   170d0:	addne	r9, sp, #20
   170d4:	beq	171e0 <__assert_fail@plt+0x54b4>
   170d8:	mov	r2, r5
   170dc:	mov	r1, r6
   170e0:	mov	r0, r7
   170e4:	bl	118a0 <read@plt>
   170e8:	cmp	r0, #0
   170ec:	ble	17108 <__assert_fail@plt+0x53dc>
   170f0:	subs	r5, r5, r0
   170f4:	add	r6, r6, r0
   170f8:	add	r4, r4, r0
   170fc:	beq	171d8 <__assert_fail@plt+0x54ac>
   17100:	mov	fp, #0
   17104:	b	170d8 <__assert_fail@plt+0x53ac>
   17108:	ldr	sl, [r8]
   1710c:	beq	17124 <__assert_fail@plt+0x53f8>
   17110:	cmp	sl, #4
   17114:	cmpne	sl, #11
   17118:	bne	17124 <__assert_fail@plt+0x53f8>
   1711c:	cmp	fp, #4
   17120:	ble	171ac <__assert_fail@plt+0x5480>
   17124:	cmp	r4, #0
   17128:	mvneq	r4, #0
   1712c:	mov	r0, r7
   17130:	bl	11cf0 <close@plt>
   17134:	str	sl, [r8]
   17138:	ldr	r3, [sp, #12]
   1713c:	ldr	r2, [sp, #28]
   17140:	mov	r0, r4
   17144:	ldr	r3, [r3]
   17148:	cmp	r2, r3
   1714c:	bne	171ec <__assert_fail@plt+0x54c0>
   17150:	add	sp, sp, #36	; 0x24
   17154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17158:	ldr	r3, [pc, #156]	; 171fc <__assert_fail@plt+0x54d0>
   1715c:	ldr	r3, [r4, r3]
   17160:	ldr	r4, [r3]
   17164:	bl	11ad4 <getpid@plt>
   17168:	ldr	r2, [pc, #144]	; 17200 <__assert_fail@plt+0x54d4>
   1716c:	ldr	r3, [pc, #144]	; 17204 <__assert_fail@plt+0x54d8>
   17170:	add	r2, pc, r2
   17174:	str	r2, [sp, #4]
   17178:	ldr	r2, [pc, #136]	; 17208 <__assert_fail@plt+0x54dc>
   1717c:	add	r3, pc, r3
   17180:	str	r3, [sp]
   17184:	add	r2, pc, r2
   17188:	mov	r1, #1
   1718c:	mov	r3, r0
   17190:	mov	r0, r4
   17194:	bl	11be8 <__fprintf_chk@plt>
   17198:	ldr	r0, [pc, #108]	; 1720c <__assert_fail@plt+0x54e0>
   1719c:	mov	r1, r9
   171a0:	add	r0, pc, r0
   171a4:	bl	15abc <__assert_fail@plt+0x3d90>
   171a8:	b	170b4 <__assert_fail@plt+0x5388>
   171ac:	ldr	r3, [pc, #92]	; 17210 <__assert_fail@plt+0x54e4>
   171b0:	mov	r1, #0
   171b4:	mov	r0, r9
   171b8:	add	fp, fp, #1
   171bc:	str	r1, [sp, #20]
   171c0:	str	r3, [sp, #24]
   171c4:	bl	118dc <nanosleep@plt>
   171c8:	b	170d8 <__assert_fail@plt+0x53ac>
   171cc:	ldr	r4, [r0]
   171d0:	rsb	r4, r4, #0
   171d4:	b	17138 <__assert_fail@plt+0x540c>
   171d8:	ldr	sl, [r8]
   171dc:	b	1712c <__assert_fail@plt+0x5400>
   171e0:	ldr	sl, [r8]
   171e4:	mov	r4, r5
   171e8:	b	1712c <__assert_fail@plt+0x5400>
   171ec:	bl	11978 <__stack_chk_fail@plt>
   171f0:	andeq	r3, r1, ip, asr #27
   171f4:	andeq	r0, r0, r0, asr #3
   171f8:	andeq	r3, r1, r4, asr #31
   171fc:	andeq	r0, r0, r4, asr #3
   17200:	strdeq	r2, [r0], -r8
   17204:	ldrdeq	r2, [r0], -r4
   17208:	ldrdeq	r2, [r0], -r4
   1720c:			; <UNDEFINED> instruction: 0x00002cb8
   17210:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   17214:	push	{r4, r5, r6, lr}
   17218:	mov	r5, r1
   1721c:	mov	r6, r2
   17220:	mov	r1, r3
   17224:	ldr	r2, [sp, #16]
   17228:	mov	r4, r0
   1722c:	bl	15be4 <__assert_fail@plt+0x3eb8>
   17230:	subs	r3, r0, #0
   17234:	beq	1724c <__assert_fail@plt+0x5520>
   17238:	mov	r2, r6
   1723c:	mov	r1, r5
   17240:	mov	r0, r4
   17244:	pop	{r4, r5, r6, lr}
   17248:	b	17050 <__assert_fail@plt+0x5324>
   1724c:	mvn	r0, #21
   17250:	pop	{r4, r5, r6, pc}
   17254:	push	{r3}		; (str r3, [sp, #-4]!)
   17258:	ldr	r3, [pc, #80]	; 172b0 <__assert_fail@plt+0x5584>
   1725c:	ldr	ip, [pc, #80]	; 172b4 <__assert_fail@plt+0x5588>
   17260:	add	r3, pc, r3
   17264:	push	{r4, lr}
   17268:	sub	sp, sp, #20
   1726c:	ldr	r4, [r3, ip]
   17270:	add	lr, sp, #32
   17274:	str	lr, [sp]
   17278:	ldr	ip, [r4]
   1727c:	ldr	r3, [sp, #28]
   17280:	str	lr, [sp, #8]
   17284:	str	ip, [sp, #12]
   17288:	bl	17214 <__assert_fail@plt+0x54e8>
   1728c:	ldr	r2, [sp, #12]
   17290:	ldr	r3, [r4]
   17294:	cmp	r2, r3
   17298:	bne	172ac <__assert_fail@plt+0x5580>
   1729c:	add	sp, sp, #20
   172a0:	pop	{r4, lr}
   172a4:	add	sp, sp, #4
   172a8:	bx	lr
   172ac:	bl	11978 <__stack_chk_fail@plt>
   172b0:	andeq	r3, r1, ip, asr #23
   172b4:	andeq	r0, r0, r0, asr #3
   172b8:	ldr	ip, [pc, #176]	; 17370 <__assert_fail@plt+0x5644>
   172bc:	ldr	r3, [pc, #176]	; 17374 <__assert_fail@plt+0x5648>
   172c0:	add	ip, pc, ip
   172c4:	push	{r4, r5, r6, r7, r8, lr}
   172c8:	sub	sp, sp, #8192	; 0x2000
   172cc:	ldr	r7, [ip, r3]
   172d0:	sub	sp, sp, #8
   172d4:	mov	r6, r1
   172d8:	add	r5, sp, #8
   172dc:	add	ip, sp, #8192	; 0x2000
   172e0:	ldr	lr, [r7]
   172e4:	mov	r1, #0
   172e8:	add	ip, ip, #4
   172ec:	sub	r8, r5, #4
   172f0:	mov	r3, r2
   172f4:	str	r1, [r6]
   172f8:	ldr	r2, [pc, #120]	; 17378 <__assert_fail@plt+0x564c>
   172fc:	mov	r1, r8
   17300:	str	lr, [ip]
   17304:	bl	17050 <__assert_fail@plt+0x5324>
   17308:	subs	r4, r0, #0
   1730c:	blt	17344 <__assert_fail@plt+0x5618>
   17310:	beq	17324 <__assert_fail@plt+0x55f8>
   17314:	sub	r3, r5, #5
   17318:	ldrsb	r3, [r3, r4]
   1731c:	cmp	r3, #10
   17320:	subeq	r4, r4, #1
   17324:	add	r5, r5, r4
   17328:	mov	r3, #0
   1732c:	mov	r0, r8
   17330:	strb	r3, [r5, #-4]
   17334:	bl	1196c <strdup@plt>
   17338:	cmp	r0, #0
   1733c:	mvneq	r4, #11
   17340:	str	r0, [r6]
   17344:	add	r3, sp, #8192	; 0x2000
   17348:	add	r3, r3, #4
   1734c:	ldr	r2, [r3]
   17350:	ldr	r3, [r7]
   17354:	mov	r0, r4
   17358:	cmp	r2, r3
   1735c:	bne	1736c <__assert_fail@plt+0x5640>
   17360:	add	sp, sp, #8192	; 0x2000
   17364:	add	sp, sp, #8
   17368:	pop	{r4, r5, r6, r7, r8, pc}
   1736c:	bl	11978 <__stack_chk_fail@plt>
   17370:	andeq	r3, r1, ip, ror #22
   17374:	andeq	r0, r0, r0, asr #3
   17378:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   1737c:	push	{r2, r3}
   17380:	ldr	r3, [pc, #116]	; 173fc <__assert_fail@plt+0x56d0>
   17384:	ldr	r2, [pc, #116]	; 17400 <__assert_fail@plt+0x56d4>
   17388:	add	r3, pc, r3
   1738c:	push	{r4, r5, r6, lr}
   17390:	sub	sp, sp, #8
   17394:	ldr	r4, [r3, r2]
   17398:	add	ip, sp, #28
   1739c:	mov	r2, ip
   173a0:	ldr	r3, [r4]
   173a4:	mov	r5, r1
   173a8:	ldr	r1, [sp, #24]
   173ac:	str	ip, [sp]
   173b0:	str	r3, [sp, #4]
   173b4:	mov	r6, r0
   173b8:	bl	15be4 <__assert_fail@plt+0x3eb8>
   173bc:	subs	r2, r0, #0
   173c0:	beq	173f0 <__assert_fail@plt+0x56c4>
   173c4:	mov	r1, r5
   173c8:	mov	r0, r6
   173cc:	bl	172b8 <__assert_fail@plt+0x558c>
   173d0:	ldr	r2, [sp, #4]
   173d4:	ldr	r3, [r4]
   173d8:	cmp	r2, r3
   173dc:	bne	173f8 <__assert_fail@plt+0x56cc>
   173e0:	add	sp, sp, #8
   173e4:	pop	{r4, r5, r6, lr}
   173e8:	add	sp, sp, #8
   173ec:	bx	lr
   173f0:	mvn	r0, #21
   173f4:	b	173d0 <__assert_fail@plt+0x56a4>
   173f8:	bl	11978 <__stack_chk_fail@plt>
   173fc:	andeq	r3, r1, r4, lsr #21
   17400:	andeq	r0, r0, r0, asr #3
   17404:	push	{r4, lr}
   17408:	sub	r2, r2, #1
   1740c:	mov	r4, r1
   17410:	bl	17050 <__assert_fail@plt+0x5324>
   17414:	cmp	r0, #0
   17418:	poplt	{r4, pc}
   1741c:	beq	17438 <__assert_fail@plt+0x570c>
   17420:	add	r3, r4, r0
   17424:	ldrsb	r2, [r3, #-1]
   17428:	cmp	r2, #10
   1742c:	subeq	r0, r0, #1
   17430:	movne	r4, r3
   17434:	addeq	r4, r4, r0
   17438:	mov	r3, #0
   1743c:	strb	r3, [r4]
   17440:	pop	{r4, pc}
   17444:	push	{r3}		; (str r3, [sp, #-4]!)
   17448:	ldr	r3, [pc, #124]	; 174cc <__assert_fail@plt+0x57a0>
   1744c:	ldr	ip, [pc, #124]	; 174d0 <__assert_fail@plt+0x57a4>
   17450:	add	r3, pc, r3
   17454:	push	{r4, r5, r6, r7, lr}
   17458:	sub	sp, sp, #8
   1745c:	ldr	r4, [r3, ip]
   17460:	add	lr, sp, #32
   17464:	mov	r5, r1
   17468:	ldr	ip, [r4]
   1746c:	mov	r7, r2
   17470:	ldr	r1, [sp, #28]
   17474:	mov	r2, lr
   17478:	str	ip, [sp, #4]
   1747c:	str	lr, [sp]
   17480:	mov	r6, r0
   17484:	bl	15be4 <__assert_fail@plt+0x3eb8>
   17488:	subs	r3, r0, #0
   1748c:	beq	174c0 <__assert_fail@plt+0x5794>
   17490:	mov	r2, r7
   17494:	mov	r1, r5
   17498:	mov	r0, r6
   1749c:	bl	17404 <__assert_fail@plt+0x56d8>
   174a0:	ldr	r2, [sp, #4]
   174a4:	ldr	r3, [r4]
   174a8:	cmp	r2, r3
   174ac:	bne	174c8 <__assert_fail@plt+0x579c>
   174b0:	add	sp, sp, #8
   174b4:	pop	{r4, r5, r6, r7, lr}
   174b8:	add	sp, sp, #4
   174bc:	bx	lr
   174c0:	mvn	r0, #21
   174c4:	b	174a0 <__assert_fail@plt+0x5774>
   174c8:	bl	11978 <__stack_chk_fail@plt>
   174cc:	ldrdeq	r3, [r1], -ip
   174d0:	andeq	r0, r0, r0, asr #3
   174d4:	push	{r2, r3}
   174d8:	mov	r2, r1
   174dc:	push	{r4, r5, r6, r7, r8, lr}
   174e0:	mov	r7, r1
   174e4:	ldr	r4, [pc, #236]	; 175d8 <__assert_fail@plt+0x58ac>
   174e8:	ldr	r3, [pc, #236]	; 175dc <__assert_fail@plt+0x58b0>
   174ec:	add	r4, pc, r4
   174f0:	ldr	r1, [pc, #232]	; 175e0 <__assert_fail@plt+0x58b4>
   174f4:	ldr	r5, [r4, r3]
   174f8:	sub	sp, sp, #16
   174fc:	add	r1, pc, r1
   17500:	ldr	r3, [r5]
   17504:	ldr	r8, [sp, #40]	; 0x28
   17508:	str	r3, [sp, #12]
   1750c:	bl	16adc <__assert_fail@plt+0x4db0>
   17510:	subs	r6, r0, #0
   17514:	beq	175cc <__assert_fail@plt+0x58a0>
   17518:	ldr	r3, [pc, #196]	; 175e4 <__assert_fail@plt+0x58b8>
   1751c:	add	r3, pc, r3
   17520:	ldr	r3, [r3]
   17524:	tst	r3, #4
   17528:	bne	17574 <__assert_fail@plt+0x5848>
   1752c:	add	r3, sp, #44	; 0x2c
   17530:	mov	r1, r8
   17534:	mov	r2, r3
   17538:	mov	r0, r6
   1753c:	str	r3, [sp, #8]
   17540:	bl	119cc <vfscanf@plt>
   17544:	mov	r4, r0
   17548:	mov	r0, r6
   1754c:	bl	11bf4 <fclose@plt>
   17550:	ldr	r2, [sp, #12]
   17554:	ldr	r3, [r5]
   17558:	mov	r0, r4
   1755c:	cmp	r2, r3
   17560:	bne	175d4 <__assert_fail@plt+0x58a8>
   17564:	add	sp, sp, #16
   17568:	pop	{r4, r5, r6, r7, r8, lr}
   1756c:	add	sp, sp, #8
   17570:	bx	lr
   17574:	ldr	r3, [pc, #108]	; 175e8 <__assert_fail@plt+0x58bc>
   17578:	ldr	r3, [r4, r3]
   1757c:	ldr	r4, [r3]
   17580:	bl	11ad4 <getpid@plt>
   17584:	ldr	r2, [pc, #96]	; 175ec <__assert_fail@plt+0x58c0>
   17588:	ldr	r3, [pc, #96]	; 175f0 <__assert_fail@plt+0x58c4>
   1758c:	add	r2, pc, r2
   17590:	str	r2, [sp, #4]
   17594:	ldr	r2, [pc, #88]	; 175f4 <__assert_fail@plt+0x58c8>
   17598:	add	r3, pc, r3
   1759c:	str	r3, [sp]
   175a0:	add	r2, pc, r2
   175a4:	mov	r1, #1
   175a8:	mov	r3, r0
   175ac:	mov	r0, r4
   175b0:	bl	11be8 <__fprintf_chk@plt>
   175b4:	ldr	r0, [pc, #60]	; 175f8 <__assert_fail@plt+0x58cc>
   175b8:	mov	r2, r7
   175bc:	mov	r1, r8
   175c0:	add	r0, pc, r0
   175c4:	bl	15abc <__assert_fail@plt+0x3d90>
   175c8:	b	1752c <__assert_fail@plt+0x5800>
   175cc:	mvn	r4, #21
   175d0:	b	17550 <__assert_fail@plt+0x5824>
   175d4:	bl	11978 <__stack_chk_fail@plt>
   175d8:	andeq	r3, r1, r0, asr #18
   175dc:	andeq	r0, r0, r0, asr #3
   175e0:	andeq	r2, r0, r4, asr #18
   175e4:	andeq	r3, r1, ip, asr #22
   175e8:	andeq	r0, r0, r4, asr #3
   175ec:	ldrdeq	r2, [r0], -ip
   175f0:			; <UNDEFINED> instruction: 0x000027b8
   175f4:			; <UNDEFINED> instruction: 0x000027b8
   175f8:	andeq	r2, r0, r8, lsr #17
   175fc:	ldr	ip, [pc, #140]	; 17690 <__assert_fail@plt+0x5964>
   17600:	push	{r3}		; (str r3, [sp, #-4]!)
   17604:	add	ip, pc, ip
   17608:	push	{r4, r5, r6, lr}
   1760c:	mov	r3, r2
   17610:	ldr	lr, [pc, #124]	; 17694 <__assert_fail@plt+0x5968>
   17614:	mov	r2, r1
   17618:	ldr	r1, [pc, #120]	; 17698 <__assert_fail@plt+0x596c>
   1761c:	ldr	r4, [ip, lr]
   17620:	sub	sp, sp, #12
   17624:	add	r1, pc, r1
   17628:	ldr	ip, [r4]
   1762c:	ldr	r5, [sp, #28]
   17630:	str	ip, [sp, #4]
   17634:	bl	16bc0 <__assert_fail@plt+0x4e94>
   17638:	subs	r6, r0, #0
   1763c:	beq	17684 <__assert_fail@plt+0x5958>
   17640:	add	r3, sp, #32
   17644:	mov	r1, r5
   17648:	mov	r2, r3
   1764c:	str	r3, [sp]
   17650:	bl	119cc <vfscanf@plt>
   17654:	mov	r5, r0
   17658:	mov	r0, r6
   1765c:	bl	11bf4 <fclose@plt>
   17660:	ldr	r2, [sp, #4]
   17664:	ldr	r3, [r4]
   17668:	mov	r0, r5
   1766c:	cmp	r2, r3
   17670:	bne	1768c <__assert_fail@plt+0x5960>
   17674:	add	sp, sp, #12
   17678:	pop	{r4, r5, r6, lr}
   1767c:	add	sp, sp, #4
   17680:	bx	lr
   17684:	mvn	r5, #21
   17688:	b	17660 <__assert_fail@plt+0x5934>
   1768c:	bl	11978 <__stack_chk_fail@plt>
   17690:	andeq	r3, r1, r8, lsr #16
   17694:	andeq	r0, r0, r0, asr #3
   17698:	andeq	r2, r0, ip, lsl r8
   1769c:	ldr	r3, [pc, #124]	; 17720 <__assert_fail@plt+0x59f4>
   176a0:	ldr	ip, [pc, #124]	; 17724 <__assert_fail@plt+0x59f8>
   176a4:	add	r3, pc, r3
   176a8:	push	{r4, r5, r6, r7, lr}
   176ac:	mov	r5, r1
   176b0:	ldr	r4, [r3, ip]
   176b4:	mov	r1, r2
   176b8:	ldr	r2, [pc, #104]	; 17728 <__assert_fail@plt+0x59fc>
   176bc:	sub	sp, sp, #20
   176c0:	ldr	ip, [r4]
   176c4:	mov	r6, #0
   176c8:	mov	r7, #0
   176cc:	add	r2, pc, r2
   176d0:	mov	r3, sp
   176d4:	strd	r6, [sp]
   176d8:	str	ip, [sp, #12]
   176dc:	bl	174d4 <__assert_fail@plt+0x57a8>
   176e0:	cmp	r0, #1
   176e4:	bne	17714 <__assert_fail@plt+0x59e8>
   176e8:	cmp	r5, #0
   176ec:	moveq	r0, r5
   176f0:	ldrdne	r2, [sp]
   176f4:	movne	r0, #0
   176f8:	strdne	r2, [r5]
   176fc:	ldr	r2, [sp, #12]
   17700:	ldr	r3, [r4]
   17704:	cmp	r2, r3
   17708:	bne	1771c <__assert_fail@plt+0x59f0>
   1770c:	add	sp, sp, #20
   17710:	pop	{r4, r5, r6, r7, pc}
   17714:	mvn	r0, #0
   17718:	b	176fc <__assert_fail@plt+0x59d0>
   1771c:	bl	11978 <__stack_chk_fail@plt>
   17720:	andeq	r3, r1, r8, lsl #15
   17724:	andeq	r0, r0, r0, asr #3
   17728:	andeq	r1, r0, r8, asr lr
   1772c:	push	{r2, r3}
   17730:	ldr	r3, [pc, #116]	; 177ac <__assert_fail@plt+0x5a80>
   17734:	ldr	r2, [pc, #116]	; 177b0 <__assert_fail@plt+0x5a84>
   17738:	add	r3, pc, r3
   1773c:	push	{r4, r5, r6, lr}
   17740:	sub	sp, sp, #8
   17744:	ldr	r4, [r3, r2]
   17748:	add	ip, sp, #28
   1774c:	mov	r2, ip
   17750:	ldr	r3, [r4]
   17754:	mov	r5, r1
   17758:	ldr	r1, [sp, #24]
   1775c:	str	ip, [sp]
   17760:	str	r3, [sp, #4]
   17764:	mov	r6, r0
   17768:	bl	15be4 <__assert_fail@plt+0x3eb8>
   1776c:	subs	r2, r0, #0
   17770:	beq	177a0 <__assert_fail@plt+0x5a74>
   17774:	mov	r1, r5
   17778:	mov	r0, r6
   1777c:	bl	1769c <__assert_fail@plt+0x5970>
   17780:	ldr	r2, [sp, #4]
   17784:	ldr	r3, [r4]
   17788:	cmp	r2, r3
   1778c:	bne	177a8 <__assert_fail@plt+0x5a7c>
   17790:	add	sp, sp, #8
   17794:	pop	{r4, r5, r6, lr}
   17798:	add	sp, sp, #8
   1779c:	bx	lr
   177a0:	mvn	r0, #21
   177a4:	b	17780 <__assert_fail@plt+0x5a54>
   177a8:	bl	11978 <__stack_chk_fail@plt>
   177ac:	strdeq	r3, [r1], -r4
   177b0:	andeq	r0, r0, r0, asr #3
   177b4:	ldr	r3, [pc, #124]	; 17838 <__assert_fail@plt+0x5b0c>
   177b8:	ldr	ip, [pc, #124]	; 1783c <__assert_fail@plt+0x5b10>
   177bc:	add	r3, pc, r3
   177c0:	push	{r4, r5, r6, r7, lr}
   177c4:	mov	r5, r1
   177c8:	ldr	r4, [r3, ip]
   177cc:	mov	r1, r2
   177d0:	ldr	r2, [pc, #104]	; 17840 <__assert_fail@plt+0x5b14>
   177d4:	sub	sp, sp, #20
   177d8:	ldr	ip, [r4]
   177dc:	mov	r6, #0
   177e0:	mov	r7, #0
   177e4:	add	r2, pc, r2
   177e8:	mov	r3, sp
   177ec:	strd	r6, [sp]
   177f0:	str	ip, [sp, #12]
   177f4:	bl	174d4 <__assert_fail@plt+0x57a8>
   177f8:	cmp	r0, #1
   177fc:	bne	1782c <__assert_fail@plt+0x5b00>
   17800:	cmp	r5, #0
   17804:	moveq	r0, r5
   17808:	ldrdne	r2, [sp]
   1780c:	movne	r0, #0
   17810:	strdne	r2, [r5]
   17814:	ldr	r2, [sp, #12]
   17818:	ldr	r3, [r4]
   1781c:	cmp	r2, r3
   17820:	bne	17834 <__assert_fail@plt+0x5b08>
   17824:	add	sp, sp, #20
   17828:	pop	{r4, r5, r6, r7, pc}
   1782c:	mvn	r0, #0
   17830:	b	17814 <__assert_fail@plt+0x5ae8>
   17834:	bl	11978 <__stack_chk_fail@plt>
   17838:	andeq	r3, r1, r0, ror r6
   1783c:	andeq	r0, r0, r0, asr #3
   17840:	muleq	r0, r8, r6
   17844:	push	{r2, r3}
   17848:	ldr	r3, [pc, #116]	; 178c4 <__assert_fail@plt+0x5b98>
   1784c:	ldr	r2, [pc, #116]	; 178c8 <__assert_fail@plt+0x5b9c>
   17850:	add	r3, pc, r3
   17854:	push	{r4, r5, r6, lr}
   17858:	sub	sp, sp, #8
   1785c:	ldr	r4, [r3, r2]
   17860:	add	ip, sp, #28
   17864:	mov	r2, ip
   17868:	ldr	r3, [r4]
   1786c:	mov	r5, r1
   17870:	ldr	r1, [sp, #24]
   17874:	str	ip, [sp]
   17878:	str	r3, [sp, #4]
   1787c:	mov	r6, r0
   17880:	bl	15be4 <__assert_fail@plt+0x3eb8>
   17884:	subs	r2, r0, #0
   17888:	beq	178b8 <__assert_fail@plt+0x5b8c>
   1788c:	mov	r1, r5
   17890:	mov	r0, r6
   17894:	bl	177b4 <__assert_fail@plt+0x5a88>
   17898:	ldr	r2, [sp, #4]
   1789c:	ldr	r3, [r4]
   178a0:	cmp	r2, r3
   178a4:	bne	178c0 <__assert_fail@plt+0x5b94>
   178a8:	add	sp, sp, #8
   178ac:	pop	{r4, r5, r6, lr}
   178b0:	add	sp, sp, #8
   178b4:	bx	lr
   178b8:	mvn	r0, #21
   178bc:	b	17898 <__assert_fail@plt+0x5b6c>
   178c0:	bl	11978 <__stack_chk_fail@plt>
   178c4:	ldrdeq	r3, [r1], -ip
   178c8:	andeq	r0, r0, r0, asr #3
   178cc:	ldr	ip, [pc, #120]	; 1794c <__assert_fail@plt+0x5c20>
   178d0:	ldr	r3, [pc, #120]	; 17950 <__assert_fail@plt+0x5c24>
   178d4:	add	ip, pc, ip
   178d8:	push	{r4, r5, r6, lr}
   178dc:	mov	r6, r1
   178e0:	ldr	r5, [ip, r3]
   178e4:	mov	r1, r2
   178e8:	ldr	r2, [pc, #100]	; 17954 <__assert_fail@plt+0x5c28>
   178ec:	sub	sp, sp, #8
   178f0:	ldr	lr, [r5]
   178f4:	mov	r4, #0
   178f8:	mov	r3, sp
   178fc:	add	r2, pc, r2
   17900:	str	lr, [sp, #4]
   17904:	str	r4, [sp]
   17908:	bl	174d4 <__assert_fail@plt+0x57a8>
   1790c:	cmp	r0, #1
   17910:	bne	17940 <__assert_fail@plt+0x5c14>
   17914:	cmp	r6, r4
   17918:	moveq	r0, r6
   1791c:	ldrne	r3, [sp]
   17920:	movne	r0, r4
   17924:	strne	r3, [r6]
   17928:	ldr	r2, [sp, #4]
   1792c:	ldr	r3, [r5]
   17930:	cmp	r2, r3
   17934:	bne	17948 <__assert_fail@plt+0x5c1c>
   17938:	add	sp, sp, #8
   1793c:	pop	{r4, r5, r6, pc}
   17940:	mvn	r0, #0
   17944:	b	17928 <__assert_fail@plt+0x5bfc>
   17948:	bl	11978 <__stack_chk_fail@plt>
   1794c:	andeq	r3, r1, r8, asr r5
   17950:	andeq	r0, r0, r0, asr #3
   17954:	andeq	r1, r0, r4, ror #24
   17958:	push	{r2, r3}
   1795c:	ldr	r3, [pc, #116]	; 179d8 <__assert_fail@plt+0x5cac>
   17960:	ldr	r2, [pc, #116]	; 179dc <__assert_fail@plt+0x5cb0>
   17964:	add	r3, pc, r3
   17968:	push	{r4, r5, r6, lr}
   1796c:	sub	sp, sp, #8
   17970:	ldr	r4, [r3, r2]
   17974:	add	ip, sp, #28
   17978:	mov	r2, ip
   1797c:	ldr	r3, [r4]
   17980:	mov	r5, r1
   17984:	ldr	r1, [sp, #24]
   17988:	str	ip, [sp]
   1798c:	str	r3, [sp, #4]
   17990:	mov	r6, r0
   17994:	bl	15be4 <__assert_fail@plt+0x3eb8>
   17998:	subs	r2, r0, #0
   1799c:	beq	179cc <__assert_fail@plt+0x5ca0>
   179a0:	mov	r1, r5
   179a4:	mov	r0, r6
   179a8:	bl	178cc <__assert_fail@plt+0x5ba0>
   179ac:	ldr	r2, [sp, #4]
   179b0:	ldr	r3, [r4]
   179b4:	cmp	r2, r3
   179b8:	bne	179d4 <__assert_fail@plt+0x5ca8>
   179bc:	add	sp, sp, #8
   179c0:	pop	{r4, r5, r6, lr}
   179c4:	add	sp, sp, #8
   179c8:	bx	lr
   179cc:	mvn	r0, #21
   179d0:	b	179ac <__assert_fail@plt+0x5c80>
   179d4:	bl	11978 <__stack_chk_fail@plt>
   179d8:	andeq	r3, r1, r8, asr #9
   179dc:	andeq	r0, r0, r0, asr #3
   179e0:	ldr	ip, [pc, #112]	; 17a58 <__assert_fail@plt+0x5d2c>
   179e4:	ldr	r3, [pc, #112]	; 17a5c <__assert_fail@plt+0x5d30>
   179e8:	add	ip, pc, ip
   179ec:	push	{r4, r5, lr}
   179f0:	mov	r5, r1
   179f4:	ldr	r4, [ip, r3]
   179f8:	mov	r1, r2
   179fc:	ldr	r2, [pc, #92]	; 17a60 <__assert_fail@plt+0x5d34>
   17a00:	sub	sp, sp, #12
   17a04:	ldr	lr, [r4]
   17a08:	mov	r3, sp
   17a0c:	add	r2, pc, r2
   17a10:	str	lr, [sp, #4]
   17a14:	bl	174d4 <__assert_fail@plt+0x57a8>
   17a18:	cmp	r0, #1
   17a1c:	bne	17a4c <__assert_fail@plt+0x5d20>
   17a20:	cmp	r5, #0
   17a24:	moveq	r0, r5
   17a28:	ldrne	r3, [sp]
   17a2c:	movne	r0, #0
   17a30:	strne	r3, [r5]
   17a34:	ldr	r2, [sp, #4]
   17a38:	ldr	r3, [r4]
   17a3c:	cmp	r2, r3
   17a40:	bne	17a54 <__assert_fail@plt+0x5d28>
   17a44:	add	sp, sp, #12
   17a48:	pop	{r4, r5, pc}
   17a4c:	mvn	r0, #0
   17a50:	b	17a34 <__assert_fail@plt+0x5d08>
   17a54:	bl	11978 <__stack_chk_fail@plt>
   17a58:	andeq	r3, r1, r4, asr #8
   17a5c:	andeq	r0, r0, r0, asr #3
   17a60:	andeq	r2, r0, r8, ror r4
   17a64:	push	{r2, r3}
   17a68:	ldr	r3, [pc, #116]	; 17ae4 <__assert_fail@plt+0x5db8>
   17a6c:	ldr	r2, [pc, #116]	; 17ae8 <__assert_fail@plt+0x5dbc>
   17a70:	add	r3, pc, r3
   17a74:	push	{r4, r5, r6, lr}
   17a78:	sub	sp, sp, #8
   17a7c:	ldr	r4, [r3, r2]
   17a80:	add	ip, sp, #28
   17a84:	mov	r2, ip
   17a88:	ldr	r3, [r4]
   17a8c:	mov	r5, r1
   17a90:	ldr	r1, [sp, #24]
   17a94:	str	ip, [sp]
   17a98:	str	r3, [sp, #4]
   17a9c:	mov	r6, r0
   17aa0:	bl	15be4 <__assert_fail@plt+0x3eb8>
   17aa4:	subs	r2, r0, #0
   17aa8:	beq	17ad8 <__assert_fail@plt+0x5dac>
   17aac:	mov	r1, r5
   17ab0:	mov	r0, r6
   17ab4:	bl	179e0 <__assert_fail@plt+0x5cb4>
   17ab8:	ldr	r2, [sp, #4]
   17abc:	ldr	r3, [r4]
   17ac0:	cmp	r2, r3
   17ac4:	bne	17ae0 <__assert_fail@plt+0x5db4>
   17ac8:	add	sp, sp, #8
   17acc:	pop	{r4, r5, r6, lr}
   17ad0:	add	sp, sp, #8
   17ad4:	bx	lr
   17ad8:	mvn	r0, #21
   17adc:	b	17ab8 <__assert_fail@plt+0x5d8c>
   17ae0:	bl	11978 <__stack_chk_fail@plt>
   17ae4:			; <UNDEFINED> instruction: 0x000133bc
   17ae8:	andeq	r0, r0, r0, asr #3
   17aec:	ldr	ip, [pc, #168]	; 17b9c <__assert_fail@plt+0x5e70>
   17af0:	ldr	r3, [pc, #168]	; 17ba0 <__assert_fail@plt+0x5e74>
   17af4:	add	ip, pc, ip
   17af8:	push	{r4, r5, lr}
   17afc:	sub	sp, sp, #28
   17b00:	ldr	r5, [ip, r3]
   17b04:	mov	r4, r1
   17b08:	add	r3, sp, #16
   17b0c:	mov	r1, r2
   17b10:	ldr	r2, [pc, #140]	; 17ba4 <__assert_fail@plt+0x5e78>
   17b14:	str	r3, [sp]
   17b18:	ldr	lr, [r5]
   17b1c:	add	r3, sp, #12
   17b20:	add	r2, pc, r2
   17b24:	str	lr, [sp, #20]
   17b28:	bl	174d4 <__assert_fail@plt+0x57a8>
   17b2c:	cmp	r0, #2
   17b30:	bne	17b90 <__assert_fail@plt+0x5e64>
   17b34:	cmp	r4, #0
   17b38:	moveq	r0, r4
   17b3c:	beq	17b78 <__assert_fail@plt+0x5e4c>
   17b40:	ldr	r0, [sp, #16]
   17b44:	ldr	r3, [sp, #12]
   17b48:	ldr	ip, [pc, #88]	; 17ba8 <__assert_fail@plt+0x5e7c>
   17b4c:	ldr	r2, [pc, #88]	; 17bac <__assert_fail@plt+0x5e80>
   17b50:	uxtb	r1, r0
   17b54:	and	ip, ip, r3, lsl #8
   17b58:	bic	r3, r3, #4080	; 0xff0
   17b5c:	and	r2, r2, r0, lsl #12
   17b60:	orr	r1, r1, ip
   17b64:	bic	r3, r3, #15
   17b68:	orr	r3, r3, r0, lsr #20
   17b6c:	orr	r2, r2, r1
   17b70:	mov	r0, #0
   17b74:	strd	r2, [r4]
   17b78:	ldr	r2, [sp, #20]
   17b7c:	ldr	r3, [r5]
   17b80:	cmp	r2, r3
   17b84:	bne	17b98 <__assert_fail@plt+0x5e6c>
   17b88:	add	sp, sp, #28
   17b8c:	pop	{r4, r5, pc}
   17b90:	mvn	r0, #0
   17b94:	b	17b78 <__assert_fail@plt+0x5e4c>
   17b98:	bl	11978 <__stack_chk_fail@plt>
   17b9c:	andeq	r3, r1, r8, lsr r3
   17ba0:	andeq	r0, r0, r0, asr #3
   17ba4:	andeq	r2, r0, r8, ror #6
   17ba8:	andeq	pc, pc, r0, lsl #30
   17bac:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   17bb0:	push	{r2, r3}
   17bb4:	ldr	r3, [pc, #116]	; 17c30 <__assert_fail@plt+0x5f04>
   17bb8:	ldr	r2, [pc, #116]	; 17c34 <__assert_fail@plt+0x5f08>
   17bbc:	add	r3, pc, r3
   17bc0:	push	{r4, r5, r6, lr}
   17bc4:	sub	sp, sp, #8
   17bc8:	ldr	r4, [r3, r2]
   17bcc:	add	ip, sp, #28
   17bd0:	mov	r2, ip
   17bd4:	ldr	r3, [r4]
   17bd8:	mov	r5, r1
   17bdc:	ldr	r1, [sp, #24]
   17be0:	str	ip, [sp]
   17be4:	str	r3, [sp, #4]
   17be8:	mov	r6, r0
   17bec:	bl	15be4 <__assert_fail@plt+0x3eb8>
   17bf0:	subs	r2, r0, #0
   17bf4:	beq	17c24 <__assert_fail@plt+0x5ef8>
   17bf8:	mov	r1, r5
   17bfc:	mov	r0, r6
   17c00:	bl	17aec <__assert_fail@plt+0x5dc0>
   17c04:	ldr	r2, [sp, #4]
   17c08:	ldr	r3, [r4]
   17c0c:	cmp	r2, r3
   17c10:	bne	17c2c <__assert_fail@plt+0x5f00>
   17c14:	add	sp, sp, #8
   17c18:	pop	{r4, r5, r6, lr}
   17c1c:	add	sp, sp, #8
   17c20:	bx	lr
   17c24:	mvn	r0, #21
   17c28:	b	17c04 <__assert_fail@plt+0x5ed8>
   17c2c:	bl	11978 <__stack_chk_fail@plt>
   17c30:	andeq	r3, r1, r0, ror r2
   17c34:	andeq	r0, r0, r0, asr #3
   17c38:	ldr	r3, [pc, #284]	; 17d5c <__assert_fail@plt+0x6030>
   17c3c:	ldr	ip, [pc, #284]	; 17d60 <__assert_fail@plt+0x6034>
   17c40:	add	r3, pc, r3
   17c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c48:	sub	sp, sp, #20
   17c4c:	ldr	r8, [r3, ip]
   17c50:	mov	r6, r1
   17c54:	ldr	r1, [pc, #264]	; 17d64 <__assert_fail@plt+0x6038>
   17c58:	ldr	r3, [r8]
   17c5c:	str	r3, [sp, #12]
   17c60:	bl	167bc <__assert_fail@plt+0x4a90>
   17c64:	mov	r7, r0
   17c68:	bl	11b34 <__errno_location@plt>
   17c6c:	cmp	r7, #0
   17c70:	mov	r5, r0
   17c74:	blt	17d44 <__assert_fail@plt+0x6018>
   17c78:	mov	r0, r6
   17c7c:	bl	11b04 <strlen@plt>
   17c80:	subs	r4, r0, #0
   17c84:	beq	17cfc <__assert_fail@plt+0x5fd0>
   17c88:	mov	r9, #0
   17c8c:	add	sl, sp, #4
   17c90:	str	r9, [r5]
   17c94:	mov	r2, r4
   17c98:	mov	r1, r6
   17c9c:	mov	r0, r7
   17ca0:	bl	11bc4 <write@plt>
   17ca4:	cmp	r0, #0
   17ca8:	ble	17d28 <__assert_fail@plt+0x5ffc>
   17cac:	subs	r4, r4, r0
   17cb0:	ldr	fp, [r5]
   17cb4:	beq	17ce0 <__assert_fail@plt+0x5fb4>
   17cb8:	cmp	fp, #11
   17cbc:	add	r6, r6, r0
   17cc0:	bne	17c90 <__assert_fail@plt+0x5f64>
   17cc4:	ldr	r3, [pc, #156]	; 17d68 <__assert_fail@plt+0x603c>
   17cc8:	mov	r1, #0
   17ccc:	mov	r0, sl
   17cd0:	str	r9, [sp, #4]
   17cd4:	str	r3, [sp, #8]
   17cd8:	bl	118dc <nanosleep@plt>
   17cdc:	b	17c90 <__assert_fail@plt+0x5f64>
   17ce0:	cmp	fp, #11
   17ce4:	bne	17d00 <__assert_fail@plt+0x5fd4>
   17ce8:	ldr	r3, [pc, #120]	; 17d68 <__assert_fail@plt+0x603c>
   17cec:	mov	r1, r4
   17cf0:	add	r0, sp, #4
   17cf4:	stmib	sp, {r1, r3}
   17cf8:	bl	118dc <nanosleep@plt>
   17cfc:	ldr	fp, [r5]
   17d00:	mov	r0, r7
   17d04:	bl	11cf0 <close@plt>
   17d08:	str	fp, [r5]
   17d0c:	ldr	r2, [sp, #12]
   17d10:	ldr	r3, [r8]
   17d14:	mov	r0, r4
   17d18:	cmp	r2, r3
   17d1c:	bne	17d58 <__assert_fail@plt+0x602c>
   17d20:	add	sp, sp, #20
   17d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d28:	ldr	fp, [r5]
   17d2c:	cmp	fp, #4
   17d30:	cmpne	fp, #11
   17d34:	bne	17d50 <__assert_fail@plt+0x6024>
   17d38:	cmp	fp, #11
   17d3c:	bne	17c90 <__assert_fail@plt+0x5f64>
   17d40:	b	17cc4 <__assert_fail@plt+0x5f98>
   17d44:	ldr	r4, [r0]
   17d48:	rsb	r4, r4, #0
   17d4c:	b	17d0c <__assert_fail@plt+0x5fe0>
   17d50:	mvn	r4, #0
   17d54:	b	17d00 <__assert_fail@plt+0x5fd4>
   17d58:	bl	11978 <__stack_chk_fail@plt>
   17d5c:	andeq	r3, r1, ip, ror #3
   17d60:	andeq	r0, r0, r0, asr #3
   17d64:	andeq	r0, r8, r1
   17d68:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   17d6c:	push	{r2, r3}
   17d70:	ldr	r3, [pc, #116]	; 17dec <__assert_fail@plt+0x60c0>
   17d74:	ldr	r2, [pc, #116]	; 17df0 <__assert_fail@plt+0x60c4>
   17d78:	add	r3, pc, r3
   17d7c:	push	{r4, r5, r6, lr}
   17d80:	sub	sp, sp, #8
   17d84:	ldr	r4, [r3, r2]
   17d88:	add	ip, sp, #28
   17d8c:	mov	r2, ip
   17d90:	ldr	r3, [r4]
   17d94:	mov	r5, r1
   17d98:	ldr	r1, [sp, #24]
   17d9c:	str	ip, [sp]
   17da0:	str	r3, [sp, #4]
   17da4:	mov	r6, r0
   17da8:	bl	15be4 <__assert_fail@plt+0x3eb8>
   17dac:	subs	r2, r0, #0
   17db0:	beq	17de0 <__assert_fail@plt+0x60b4>
   17db4:	mov	r1, r5
   17db8:	mov	r0, r6
   17dbc:	bl	17c38 <__assert_fail@plt+0x5f0c>
   17dc0:	ldr	r2, [sp, #4]
   17dc4:	ldr	r3, [r4]
   17dc8:	cmp	r2, r3
   17dcc:	bne	17de8 <__assert_fail@plt+0x60bc>
   17dd0:	add	sp, sp, #8
   17dd4:	pop	{r4, r5, r6, lr}
   17dd8:	add	sp, sp, #8
   17ddc:	bx	lr
   17de0:	mvn	r0, #21
   17de4:	b	17dc0 <__assert_fail@plt+0x6094>
   17de8:	bl	11978 <__stack_chk_fail@plt>
   17dec:	strheq	r3, [r1], -r4
   17df0:	andeq	r0, r0, r0, asr #3
   17df4:	ldr	ip, [pc, #328]	; 17f44 <__assert_fail@plt+0x6218>
   17df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dfc:	add	ip, pc, ip
   17e00:	ldr	lr, [pc, #320]	; 17f48 <__assert_fail@plt+0x621c>
   17e04:	sub	sp, sp, #60	; 0x3c
   17e08:	mov	r9, r3
   17e0c:	ldr	r7, [ip, lr]
   17e10:	mov	r3, ip
   17e14:	ldr	r1, [pc, #304]	; 17f4c <__assert_fail@plt+0x6220>
   17e18:	ldr	r3, [r7]
   17e1c:	mov	r8, r2
   17e20:	ldr	r2, [sp, #96]	; 0x60
   17e24:	str	r3, [sp, #52]	; 0x34
   17e28:	bl	167bc <__assert_fail@plt+0x4a90>
   17e2c:	mov	r6, r0
   17e30:	bl	11b34 <__errno_location@plt>
   17e34:	cmp	r6, #0
   17e38:	mov	r5, r0
   17e3c:	blt	17f2c <__assert_fail@plt+0x6200>
   17e40:	ldr	r2, [pc, #264]	; 17f50 <__assert_fail@plt+0x6224>
   17e44:	mov	r3, #21
   17e48:	add	r2, pc, r2
   17e4c:	strd	r8, [sp, #8]
   17e50:	str	r2, [sp]
   17e54:	add	r0, sp, #28
   17e58:	mov	r1, r3
   17e5c:	mov	r2, #1
   17e60:	mov	r8, r0
   17e64:	bl	11d08 <__snprintf_chk@plt>
   17e68:	mov	r9, #0
   17e6c:	add	sl, sp, #20
   17e70:	mov	r4, r0
   17e74:	str	r9, [r5]
   17e78:	mov	r2, r4
   17e7c:	mov	r1, r8
   17e80:	mov	r0, r6
   17e84:	bl	11bc4 <write@plt>
   17e88:	cmp	r0, #0
   17e8c:	ble	17ec4 <__assert_fail@plt+0x6198>
   17e90:	subs	r4, r4, r0
   17e94:	ldr	fp, [r5]
   17e98:	beq	17ee0 <__assert_fail@plt+0x61b4>
   17e9c:	cmp	fp, #11
   17ea0:	add	r8, r8, r0
   17ea4:	bne	17e74 <__assert_fail@plt+0x6148>
   17ea8:	ldr	r3, [pc, #164]	; 17f54 <__assert_fail@plt+0x6228>
   17eac:	mov	r1, #0
   17eb0:	mov	r0, sl
   17eb4:	str	r9, [sp, #20]
   17eb8:	str	r3, [sp, #24]
   17ebc:	bl	118dc <nanosleep@plt>
   17ec0:	b	17e74 <__assert_fail@plt+0x6148>
   17ec4:	ldr	fp, [r5]
   17ec8:	cmp	fp, #4
   17ecc:	cmpne	fp, #11
   17ed0:	bne	17f38 <__assert_fail@plt+0x620c>
   17ed4:	cmp	fp, #11
   17ed8:	bne	17e74 <__assert_fail@plt+0x6148>
   17edc:	b	17ea8 <__assert_fail@plt+0x617c>
   17ee0:	cmp	fp, #11
   17ee4:	bne	17f04 <__assert_fail@plt+0x61d8>
   17ee8:	ldr	r3, [pc, #100]	; 17f54 <__assert_fail@plt+0x6228>
   17eec:	mov	r1, r4
   17ef0:	add	r0, sp, #20
   17ef4:	str	r4, [sp, #20]
   17ef8:	str	r3, [sp, #24]
   17efc:	bl	118dc <nanosleep@plt>
   17f00:	ldr	fp, [r5]
   17f04:	mov	r0, r6
   17f08:	bl	11cf0 <close@plt>
   17f0c:	str	fp, [r5]
   17f10:	ldr	r2, [sp, #52]	; 0x34
   17f14:	ldr	r3, [r7]
   17f18:	mov	r0, r4
   17f1c:	cmp	r2, r3
   17f20:	bne	17f40 <__assert_fail@plt+0x6214>
   17f24:	add	sp, sp, #60	; 0x3c
   17f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f2c:	ldr	r4, [r0]
   17f30:	rsb	r4, r4, #0
   17f34:	b	17f10 <__assert_fail@plt+0x61e4>
   17f38:	mvn	r4, #0
   17f3c:	b	17f04 <__assert_fail@plt+0x61d8>
   17f40:	bl	11978 <__stack_chk_fail@plt>
   17f44:	andeq	r3, r1, r0, lsr r0
   17f48:	andeq	r0, r0, r0, asr #3
   17f4c:	andeq	r0, r8, r1
   17f50:	ldrdeq	r1, [r0], -ip
   17f54:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   17f58:	ldr	ip, [pc, #328]	; 180a8 <__assert_fail@plt+0x637c>
   17f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f60:	add	ip, pc, ip
   17f64:	ldr	lr, [pc, #320]	; 180ac <__assert_fail@plt+0x6380>
   17f68:	sub	sp, sp, #76	; 0x4c
   17f6c:	mov	r9, r3
   17f70:	ldr	r7, [ip, lr]
   17f74:	mov	r3, ip
   17f78:	ldr	r1, [pc, #304]	; 180b0 <__assert_fail@plt+0x6384>
   17f7c:	ldr	r3, [r7]
   17f80:	mov	r8, r2
   17f84:	ldr	r2, [sp, #112]	; 0x70
   17f88:	str	r3, [sp, #68]	; 0x44
   17f8c:	bl	167bc <__assert_fail@plt+0x4a90>
   17f90:	mov	r6, r0
   17f94:	bl	11b34 <__errno_location@plt>
   17f98:	cmp	r6, #0
   17f9c:	mov	r5, r0
   17fa0:	blt	18090 <__assert_fail@plt+0x6364>
   17fa4:	ldr	r2, [pc, #264]	; 180b4 <__assert_fail@plt+0x6388>
   17fa8:	mov	r3, #37	; 0x25
   17fac:	add	r2, pc, r2
   17fb0:	strd	r8, [sp, #8]
   17fb4:	str	r2, [sp]
   17fb8:	add	r0, sp, #28
   17fbc:	mov	r1, r3
   17fc0:	mov	r2, #1
   17fc4:	mov	r8, r0
   17fc8:	bl	11d08 <__snprintf_chk@plt>
   17fcc:	mov	r9, #0
   17fd0:	add	sl, sp, #20
   17fd4:	mov	r4, r0
   17fd8:	str	r9, [r5]
   17fdc:	mov	r2, r4
   17fe0:	mov	r1, r8
   17fe4:	mov	r0, r6
   17fe8:	bl	11bc4 <write@plt>
   17fec:	cmp	r0, #0
   17ff0:	ble	18028 <__assert_fail@plt+0x62fc>
   17ff4:	subs	r4, r4, r0
   17ff8:	ldr	fp, [r5]
   17ffc:	beq	18044 <__assert_fail@plt+0x6318>
   18000:	cmp	fp, #11
   18004:	add	r8, r8, r0
   18008:	bne	17fd8 <__assert_fail@plt+0x62ac>
   1800c:	ldr	r3, [pc, #164]	; 180b8 <__assert_fail@plt+0x638c>
   18010:	mov	r1, #0
   18014:	mov	r0, sl
   18018:	str	r9, [sp, #20]
   1801c:	str	r3, [sp, #24]
   18020:	bl	118dc <nanosleep@plt>
   18024:	b	17fd8 <__assert_fail@plt+0x62ac>
   18028:	ldr	fp, [r5]
   1802c:	cmp	fp, #4
   18030:	cmpne	fp, #11
   18034:	bne	1809c <__assert_fail@plt+0x6370>
   18038:	cmp	fp, #11
   1803c:	bne	17fd8 <__assert_fail@plt+0x62ac>
   18040:	b	1800c <__assert_fail@plt+0x62e0>
   18044:	cmp	fp, #11
   18048:	bne	18068 <__assert_fail@plt+0x633c>
   1804c:	ldr	r3, [pc, #100]	; 180b8 <__assert_fail@plt+0x638c>
   18050:	mov	r1, r4
   18054:	add	r0, sp, #20
   18058:	str	r4, [sp, #20]
   1805c:	str	r3, [sp, #24]
   18060:	bl	118dc <nanosleep@plt>
   18064:	ldr	fp, [r5]
   18068:	mov	r0, r6
   1806c:	bl	11cf0 <close@plt>
   18070:	str	fp, [r5]
   18074:	ldr	r2, [sp, #68]	; 0x44
   18078:	ldr	r3, [r7]
   1807c:	mov	r0, r4
   18080:	cmp	r2, r3
   18084:	bne	180a4 <__assert_fail@plt+0x6378>
   18088:	add	sp, sp, #76	; 0x4c
   1808c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18090:	ldr	r4, [r0]
   18094:	rsb	r4, r4, #0
   18098:	b	18074 <__assert_fail@plt+0x6348>
   1809c:	mvn	r4, #0
   180a0:	b	18068 <__assert_fail@plt+0x633c>
   180a4:	bl	11978 <__stack_chk_fail@plt>
   180a8:	andeq	r2, r1, ip, asr #29
   180ac:	andeq	r0, r0, r0, asr #3
   180b0:	andeq	r0, r8, r1
   180b4:	ldrdeq	r1, [r0], -r0
   180b8:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   180bc:	ldr	r1, [pc, #124]	; 18140 <__assert_fail@plt+0x6414>
   180c0:	ldr	ip, [pc, #124]	; 18144 <__assert_fail@plt+0x6418>
   180c4:	add	r1, pc, r1
   180c8:	push	{r4, r5, r6, r7, lr}
   180cc:	sub	sp, sp, #20
   180d0:	ldr	r6, [r1, ip]
   180d4:	add	lr, sp, #44	; 0x2c
   180d8:	mov	r5, r3
   180dc:	mov	r3, r1
   180e0:	ldr	r3, [r6]
   180e4:	mov	r4, r2
   180e8:	ldr	r1, [sp, #40]	; 0x28
   180ec:	mov	r2, lr
   180f0:	str	lr, [sp, #8]
   180f4:	str	r3, [sp, #12]
   180f8:	mov	r7, r0
   180fc:	bl	15be4 <__assert_fail@plt+0x3eb8>
   18100:	cmp	r0, #0
   18104:	beq	18134 <__assert_fail@plt+0x6408>
   18108:	str	r0, [sp]
   1810c:	mov	r2, r4
   18110:	mov	r3, r5
   18114:	mov	r0, r7
   18118:	bl	17f58 <__assert_fail@plt+0x622c>
   1811c:	ldr	r2, [sp, #12]
   18120:	ldr	r3, [r6]
   18124:	cmp	r2, r3
   18128:	bne	1813c <__assert_fail@plt+0x6410>
   1812c:	add	sp, sp, #20
   18130:	pop	{r4, r5, r6, r7, pc}
   18134:	mvn	r0, #21
   18138:	b	1811c <__assert_fail@plt+0x63f0>
   1813c:	bl	11978 <__stack_chk_fail@plt>
   18140:	andeq	r2, r1, r8, ror #26
   18144:	andeq	r0, r0, r0, asr #3
   18148:	push	{r4, r5, r6, r7, r8, lr}
   1814c:	bl	16da0 <__assert_fail@plt+0x5074>
   18150:	subs	r6, r0, #0
   18154:	moveq	r5, r6
   18158:	beq	181b8 <__assert_fail@plt+0x648c>
   1815c:	ldr	r8, [pc, #92]	; 181c0 <__assert_fail@plt+0x6494>
   18160:	ldr	r7, [pc, #92]	; 181c4 <__assert_fail@plt+0x6498>
   18164:	mov	r5, #0
   18168:	add	r8, pc, r8
   1816c:	add	r7, pc, r7
   18170:	mov	r0, r6
   18174:	bl	11c78 <readdir64@plt>
   18178:	mov	r1, r8
   1817c:	cmp	r0, #0
   18180:	add	r4, r0, #19
   18184:	mov	r0, r4
   18188:	beq	181b0 <__assert_fail@plt+0x6484>
   1818c:	bl	11858 <strcmp@plt>
   18190:	mov	r1, r7
   18194:	cmp	r0, #0
   18198:	mov	r0, r4
   1819c:	beq	18170 <__assert_fail@plt+0x6444>
   181a0:	bl	11858 <strcmp@plt>
   181a4:	cmp	r0, #0
   181a8:	addne	r5, r5, #1
   181ac:	b	18170 <__assert_fail@plt+0x6444>
   181b0:	mov	r0, r6
   181b4:	bl	11cfc <closedir@plt>
   181b8:	mov	r0, r5
   181bc:	pop	{r4, r5, r6, r7, r8, pc}
   181c0:	andeq	r1, r0, r0, asr #22
   181c4:	andeq	r1, r0, r4, lsr #26
   181c8:	push	{r1, r2, r3}
   181cc:	ldr	r3, [pc, #104]	; 1823c <__assert_fail@plt+0x6510>
   181d0:	ldr	r1, [pc, #104]	; 18240 <__assert_fail@plt+0x6514>
   181d4:	add	r3, pc, r3
   181d8:	push	{r4, r5, lr}
   181dc:	sub	sp, sp, #8
   181e0:	ldr	r4, [r3, r1]
   181e4:	add	ip, sp, #24
   181e8:	ldr	r1, [sp, #20]
   181ec:	ldr	r3, [r4]
   181f0:	mov	r2, ip
   181f4:	str	ip, [sp]
   181f8:	mov	r5, r0
   181fc:	str	r3, [sp, #4]
   18200:	bl	15be4 <__assert_fail@plt+0x3eb8>
   18204:	subs	r1, r0, #0
   18208:	moveq	r0, r1
   1820c:	beq	18218 <__assert_fail@plt+0x64ec>
   18210:	mov	r0, r5
   18214:	bl	18148 <__assert_fail@plt+0x641c>
   18218:	ldr	r2, [sp, #4]
   1821c:	ldr	r3, [r4]
   18220:	cmp	r2, r3
   18224:	bne	18238 <__assert_fail@plt+0x650c>
   18228:	add	sp, sp, #8
   1822c:	pop	{r4, r5, lr}
   18230:	add	sp, sp, #12
   18234:	bx	lr
   18238:	bl	11978 <__stack_chk_fail@plt>
   1823c:	andeq	r2, r1, r8, asr ip
   18240:	andeq	r0, r0, r0, asr #3
   18244:	ldr	r3, [pc, #184]	; 18304 <__assert_fail@plt+0x65d8>
   18248:	push	{r4, r5, r6, lr}
   1824c:	add	r3, pc, r3
   18250:	ldr	lr, [pc, #176]	; 18308 <__assert_fail@plt+0x65dc>
   18254:	sub	sp, sp, #4096	; 0x1000
   18258:	sub	sp, sp, #24
   1825c:	ldr	r5, [r3, lr]
   18260:	mov	r6, r2
   18264:	add	r2, sp, #4096	; 0x1000
   18268:	add	r2, r2, #20
   1826c:	ldr	r3, [r5]
   18270:	subs	ip, r1, #0
   18274:	str	r3, [r2]
   18278:	beq	182f8 <__assert_fail@plt+0x65cc>
   1827c:	cmp	r0, #0
   18280:	beq	182e8 <__assert_fail@plt+0x65bc>
   18284:	ldrsb	r3, [ip]
   18288:	ldr	r2, [pc, #124]	; 1830c <__assert_fail@plt+0x65e0>
   1828c:	add	r4, sp, #20
   18290:	cmp	r3, #47	; 0x2f
   18294:	addeq	ip, ip, #1
   18298:	add	r2, pc, r2
   1829c:	mov	r3, #4096	; 0x1000
   182a0:	stmib	sp, {r0, ip}
   182a4:	str	r2, [sp]
   182a8:	mov	r1, r3
   182ac:	mov	r0, r4
   182b0:	mov	r2, #1
   182b4:	bl	11d08 <__snprintf_chk@plt>
   182b8:	mov	r1, r6
   182bc:	mov	r0, r4
   182c0:	bl	11c9c <fopen64@plt>
   182c4:	add	r3, sp, #4096	; 0x1000
   182c8:	add	r3, r3, #20
   182cc:	ldr	r2, [r3]
   182d0:	ldr	r3, [r5]
   182d4:	cmp	r2, r3
   182d8:	bne	18300 <__assert_fail@plt+0x65d4>
   182dc:	add	sp, sp, #4096	; 0x1000
   182e0:	add	sp, sp, #24
   182e4:	pop	{r4, r5, r6, pc}
   182e8:	mov	r1, r6
   182ec:	mov	r0, ip
   182f0:	bl	11c9c <fopen64@plt>
   182f4:	b	182c4 <__assert_fail@plt+0x6598>
   182f8:	mov	r0, ip
   182fc:	b	182c4 <__assert_fail@plt+0x6598>
   18300:	bl	11978 <__stack_chk_fail@plt>
   18304:	andeq	r2, r1, r0, ror #23
   18308:	andeq	r0, r0, r0, asr #3
   1830c:	andeq	r1, r0, r4, ror #20
   18310:	push	{r3}		; (str r3, [sp, #-4]!)
   18314:	ldr	r3, [pc, #88]	; 18374 <__assert_fail@plt+0x6648>
   18318:	ldr	ip, [pc, #88]	; 18378 <__assert_fail@plt+0x664c>
   1831c:	add	r3, pc, r3
   18320:	push	{r4, lr}
   18324:	sub	sp, sp, #20
   18328:	ldr	r4, [r3, ip]
   1832c:	ldr	lr, [sp, #28]
   18330:	add	ip, sp, #32
   18334:	str	lr, [sp]
   18338:	ldr	r3, [r4]
   1833c:	str	ip, [sp, #4]
   18340:	str	r3, [sp, #12]
   18344:	mov	r3, #0
   18348:	str	ip, [sp, #8]
   1834c:	bl	16bf4 <__assert_fail@plt+0x4ec8>
   18350:	ldr	r2, [sp, #12]
   18354:	ldr	r3, [r4]
   18358:	cmp	r2, r3
   1835c:	bne	18370 <__assert_fail@plt+0x6644>
   18360:	add	sp, sp, #20
   18364:	pop	{r4, lr}
   18368:	add	sp, sp, #4
   1836c:	bx	lr
   18370:	bl	11978 <__stack_chk_fail@plt>
   18374:	andeq	r2, r1, r0, lsl fp
   18378:	andeq	r0, r0, r0, asr #3
   1837c:	push	{r3}		; (str r3, [sp, #-4]!)
   18380:	ldr	r3, [pc, #88]	; 183e0 <__assert_fail@plt+0x66b4>
   18384:	ldr	ip, [pc, #88]	; 183e4 <__assert_fail@plt+0x66b8>
   18388:	add	r3, pc, r3
   1838c:	push	{r4, lr}
   18390:	sub	sp, sp, #20
   18394:	ldr	r4, [r3, ip]
   18398:	ldr	lr, [sp, #28]
   1839c:	add	ip, sp, #32
   183a0:	str	lr, [sp]
   183a4:	ldr	r3, [r4]
   183a8:	str	ip, [sp, #4]
   183ac:	str	r3, [sp, #12]
   183b0:	mov	r3, #1
   183b4:	str	ip, [sp, #8]
   183b8:	bl	16bf4 <__assert_fail@plt+0x4ec8>
   183bc:	ldr	r2, [sp, #12]
   183c0:	ldr	r3, [r4]
   183c4:	cmp	r2, r3
   183c8:	bne	183dc <__assert_fail@plt+0x66b0>
   183cc:	add	sp, sp, #20
   183d0:	pop	{r4, lr}
   183d4:	add	sp, sp, #4
   183d8:	bx	lr
   183dc:	bl	11978 <__stack_chk_fail@plt>
   183e0:	andeq	r2, r1, r4, lsr #21
   183e4:	andeq	r0, r0, r0, asr #3
   183e8:	ldr	r1, [pc]	; 183f0 <__assert_fail@plt+0x66c4>
   183ec:	b	119fc <mkostemp64@plt>
   183f0:	andeq	r0, r8, r2, asr #1
   183f4:	ldr	ip, [pc, #208]	; 184cc <__assert_fail@plt+0x67a0>
   183f8:	push	{r4, r5, r6, r7, lr}
   183fc:	add	ip, pc, ip
   18400:	ldr	lr, [pc, #200]	; 184d0 <__assert_fail@plt+0x67a4>
   18404:	sub	sp, sp, #20
   18408:	mov	r5, r2
   1840c:	ldr	r4, [ip, lr]
   18410:	subs	r3, r1, #0
   18414:	mov	r6, r0
   18418:	ldr	r2, [r4]
   1841c:	mov	r0, ip
   18420:	str	r2, [sp, #12]
   18424:	beq	18494 <__assert_fail@plt+0x6768>
   18428:	ldr	r2, [pc, #164]	; 184d4 <__assert_fail@plt+0x67a8>
   1842c:	str	r5, [sp]
   18430:	add	r2, pc, r2
   18434:	mov	r1, #1
   18438:	add	r0, sp, #8
   1843c:	bl	11a38 <__asprintf_chk@plt>
   18440:	cmp	r0, #0
   18444:	blt	184c0 <__assert_fail@plt+0x6794>
   18448:	mov	r0, #63	; 0x3f
   1844c:	bl	11cb4 <umask@plt>
   18450:	mov	r7, r0
   18454:	ldr	r0, [sp, #8]
   18458:	bl	183e8 <__assert_fail@plt+0x66bc>
   1845c:	mov	r5, r0
   18460:	mov	r0, r7
   18464:	bl	11cb4 <umask@plt>
   18468:	cmn	r5, #1
   1846c:	beq	184b0 <__assert_fail@plt+0x6784>
   18470:	ldr	r3, [sp, #8]
   18474:	str	r3, [r6]
   18478:	ldr	r2, [sp, #12]
   1847c:	ldr	r3, [r4]
   18480:	mov	r0, r5
   18484:	cmp	r2, r3
   18488:	bne	184c8 <__assert_fail@plt+0x679c>
   1848c:	add	sp, sp, #20
   18490:	pop	{r4, r5, r6, r7, pc}
   18494:	ldr	r0, [pc, #60]	; 184d8 <__assert_fail@plt+0x67ac>
   18498:	add	r0, pc, r0
   1849c:	bl	11a44 <getenv@plt>
   184a0:	subs	r3, r0, #0
   184a4:	ldreq	r3, [pc, #48]	; 184dc <__assert_fail@plt+0x67b0>
   184a8:	addeq	r3, pc, r3
   184ac:	b	18428 <__assert_fail@plt+0x66fc>
   184b0:	ldr	r0, [sp, #8]
   184b4:	bl	118c4 <free@plt>
   184b8:	mov	r3, #0
   184bc:	b	18474 <__assert_fail@plt+0x6748>
   184c0:	mvn	r5, #0
   184c4:	b	18478 <__assert_fail@plt+0x674c>
   184c8:	bl	11978 <__stack_chk_fail@plt>
   184cc:	andeq	r2, r1, r0, lsr sl
   184d0:	andeq	r0, r0, r0, asr #3
   184d4:	andeq	r1, r0, r4, ror sl
   184d8:	andeq	r1, r0, r4, lsl #20
   184dc:	andeq	r1, r0, ip, ror #19
   184e0:	push	{r4, r5, r6, lr}
   184e4:	mov	r2, r1
   184e8:	ldr	r1, [pc, #108]	; 1855c <__assert_fail@plt+0x6830>
   184ec:	mov	r5, r0
   184f0:	bl	11c0c <fcntl64@plt>
   184f4:	subs	r4, r0, #0
   184f8:	blt	18504 <__assert_fail@plt+0x67d8>
   184fc:	mov	r0, r4
   18500:	pop	{r4, r5, r6, pc}
   18504:	mov	r0, r5
   18508:	bl	11990 <dup@plt>
   1850c:	subs	r4, r0, #0
   18510:	blt	184fc <__assert_fail@plt+0x67d0>
   18514:	mov	r1, #1
   18518:	bl	11c0c <fcntl64@plt>
   1851c:	subs	r2, r0, #0
   18520:	blt	1853c <__assert_fail@plt+0x6810>
   18524:	orr	r2, r2, #1
   18528:	mov	r1, #2
   1852c:	mov	r0, r4
   18530:	bl	11c0c <fcntl64@plt>
   18534:	cmp	r0, #0
   18538:	bge	184fc <__assert_fail@plt+0x67d0>
   1853c:	bl	11b34 <__errno_location@plt>
   18540:	mov	r5, r0
   18544:	mov	r0, r4
   18548:	ldr	r6, [r5]
   1854c:	mvn	r4, #0
   18550:	bl	11cf0 <close@plt>
   18554:	str	r6, [r5]
   18558:	b	184fc <__assert_fail@plt+0x67d0>
   1855c:	andeq	r0, r0, r6, lsl #8
   18560:	b	11a98 <getdtablesize@plt>
   18564:	subs	r3, r0, #0
   18568:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1856c:	beq	18664 <__assert_fail@plt+0x6938>
   18570:	ldrsb	r3, [r3]
   18574:	cmp	r3, #0
   18578:	beq	18664 <__assert_fail@plt+0x6938>
   1857c:	mov	r9, r1
   18580:	bl	1196c <strdup@plt>
   18584:	subs	r8, r0, #0
   18588:	beq	1866c <__assert_fail@plt+0x6940>
   1858c:	ldrsb	r3, [r8]
   18590:	cmp	r3, #47	; 0x2f
   18594:	addeq	r4, r8, #1
   18598:	ldrsbeq	r3, [r8, #1]
   1859c:	movne	r4, r8
   185a0:	cmp	r3, #0
   185a4:	beq	18634 <__assert_fail@plt+0x6908>
   185a8:	mov	r6, #47	; 0x2f
   185ac:	mov	r7, #0
   185b0:	b	185e0 <__assert_fail@plt+0x68b4>
   185b4:	strb	r7, [r5]
   185b8:	ldrsb	r3, [r4]
   185bc:	cmp	r3, #0
   185c0:	bne	1863c <__assert_fail@plt+0x6910>
   185c4:	mov	r4, r5
   185c8:	strb	r6, [r4], #1
   185cc:	cmp	r4, #0
   185d0:	beq	18634 <__assert_fail@plt+0x6908>
   185d4:	ldrsb	r3, [r5, #1]
   185d8:	cmp	r3, #0
   185dc:	beq	18634 <__assert_fail@plt+0x6908>
   185e0:	mov	r1, #47	; 0x2f
   185e4:	mov	r0, r4
   185e8:	bl	11b10 <strchr@plt>
   185ec:	subs	r5, r0, #0
   185f0:	bne	185b4 <__assert_fail@plt+0x6888>
   185f4:	ldrsb	r3, [r4]
   185f8:	cmp	r3, #0
   185fc:	beq	18634 <__assert_fail@plt+0x6908>
   18600:	mov	r1, r9
   18604:	mov	r0, r8
   18608:	bl	11b64 <mkdir@plt>
   1860c:	subs	r4, r0, #0
   18610:	beq	18634 <__assert_fail@plt+0x6908>
   18614:	bl	11b34 <__errno_location@plt>
   18618:	ldr	r3, [r0]
   1861c:	cmp	r3, #17
   18620:	beq	18634 <__assert_fail@plt+0x6908>
   18624:	mov	r0, r8
   18628:	bl	118c4 <free@plt>
   1862c:	mov	r0, r4
   18630:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18634:	mov	r4, #0
   18638:	b	18624 <__assert_fail@plt+0x68f8>
   1863c:	mov	r1, r9
   18640:	mov	r0, r8
   18644:	bl	11b64 <mkdir@plt>
   18648:	subs	r4, r0, #0
   1864c:	beq	185c4 <__assert_fail@plt+0x6898>
   18650:	bl	11b34 <__errno_location@plt>
   18654:	ldr	r3, [r0]
   18658:	cmp	r3, #17
   1865c:	beq	185c4 <__assert_fail@plt+0x6898>
   18660:	b	18624 <__assert_fail@plt+0x68f8>
   18664:	mvn	r4, #21
   18668:	b	1862c <__assert_fail@plt+0x6900>
   1866c:	mvn	r4, #11
   18670:	b	1862c <__assert_fail@plt+0x6900>
   18674:	subs	r3, r0, #0
   18678:	beq	18698 <__assert_fail@plt+0x696c>
   1867c:	push	{r4, lr}
   18680:	mov	r1, #47	; 0x2f
   18684:	bl	11c30 <strrchr@plt>
   18688:	cmp	r0, #0
   1868c:	movne	r3, #0
   18690:	strbne	r3, [r0], #1
   18694:	pop	{r4, pc}
   18698:	mov	r0, r3
   1869c:	bx	lr
   186a0:	push	{r4, r5, r6, lr}
   186a4:	mov	r6, r1
   186a8:	mov	r5, r2
   186ac:	mov	r4, r0
   186b0:	bl	11bd0 <__sched_cpualloc@plt>
   186b4:	cmp	r0, #0
   186b8:	popeq	{r4, r5, r6, pc}
   186bc:	cmp	r6, #0
   186c0:	addne	r3, r4, #31
   186c4:	lsrne	r3, r3, #5
   186c8:	lslne	r3, r3, #2
   186cc:	strne	r3, [r6]
   186d0:	cmp	r5, #0
   186d4:	addne	r4, r4, #31
   186d8:	bicne	r4, r4, #31
   186dc:	strne	r4, [r5]
   186e0:	pop	{r4, r5, r6, pc}
   186e4:	b	11b7c <__sched_cpufree@plt>
   186e8:	ldr	r3, [pc, #212]	; 187c4 <__assert_fail@plt+0x6a98>
   186ec:	ldr	r2, [pc, #212]	; 187c8 <__assert_fail@plt+0x6a9c>
   186f0:	add	r3, pc, r3
   186f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   186f8:	sub	sp, sp, #12
   186fc:	ldr	r9, [r3, r2]
   18700:	mov	r7, sp
   18704:	mov	r1, r7
   18708:	ldr	r3, [r9]
   1870c:	mov	r2, #0
   18710:	mov	r0, #2048	; 0x800
   18714:	str	r3, [sp, #4]
   18718:	bl	186a0 <__assert_fail@plt+0x6974>
   1871c:	subs	r4, r0, #0
   18720:	movne	r5, #2048	; 0x800
   18724:	ldrne	r8, [pc, #160]	; 187cc <__assert_fail@plt+0x6aa0>
   18728:	bne	18754 <__assert_fail@plt+0x6a28>
   1872c:	b	187b8 <__assert_fail@plt+0x6a8c>
   18730:	mov	r0, r4
   18734:	lsl	r5, r5, #1
   18738:	bl	186e4 <__assert_fail@plt+0x69b8>
   1873c:	mov	r0, r5
   18740:	mov	r2, #0
   18744:	mov	r1, r7
   18748:	bl	186a0 <__assert_fail@plt+0x6974>
   1874c:	subs	r4, r0, #0
   18750:	beq	187b8 <__assert_fail@plt+0x6a8c>
   18754:	ldr	r2, [sp]
   18758:	mov	r1, #0
   1875c:	mov	r0, r4
   18760:	bl	11b88 <memset@plt>
   18764:	mov	r3, r4
   18768:	ldr	r2, [sp]
   1876c:	mov	r1, #0
   18770:	mov	r0, #242	; 0xf2
   18774:	bl	11aec <syscall@plt>
   18778:	subs	r6, r0, #0
   1877c:	bge	18794 <__assert_fail@plt+0x6a68>
   18780:	bl	11b34 <__errno_location@plt>
   18784:	ldr	r3, [r0]
   18788:	cmp	r5, r8
   1878c:	cmple	r3, #22
   18790:	beq	18730 <__assert_fail@plt+0x6a04>
   18794:	mov	r0, r4
   18798:	bl	186e4 <__assert_fail@plt+0x69b8>
   1879c:	lsl	r0, r6, #3
   187a0:	ldr	r2, [sp, #4]
   187a4:	ldr	r3, [r9]
   187a8:	cmp	r2, r3
   187ac:	bne	187c0 <__assert_fail@plt+0x6a94>
   187b0:	add	sp, sp, #12
   187b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   187b8:	mvn	r0, #0
   187bc:	b	187a0 <__assert_fail@plt+0x6a74>
   187c0:	bl	11978 <__stack_chk_fail@plt>
   187c4:	andeq	r2, r1, ip, lsr r7
   187c8:	andeq	r0, r0, r0, asr #3
   187cc:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   187d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187d4:	lsls	r7, r3, #3
   187d8:	sub	sp, sp, #28
   187dc:	mov	sl, r0
   187e0:	beq	1897c <__assert_fail@plt+0x6c50>
   187e4:	mov	r5, r3
   187e8:	ldr	r3, [pc, #404]	; 18984 <__assert_fail@plt+0x6c58>
   187ec:	ldr	fp, [pc, #404]	; 18988 <__assert_fail@plt+0x6c5c>
   187f0:	add	r3, pc, r3
   187f4:	str	r3, [sp, #16]
   187f8:	ldr	r3, [pc, #396]	; 1898c <__assert_fail@plt+0x6c60>
   187fc:	mov	r9, r1
   18800:	add	r3, pc, r3
   18804:	mov	r1, #0
   18808:	mov	r6, r2
   1880c:	add	fp, pc, fp
   18810:	str	r3, [sp, #20]
   18814:	mov	ip, r1
   18818:	mov	r8, r0
   1881c:	b	1882c <__assert_fail@plt+0x6b00>
   18820:	cmp	r7, r4
   18824:	mov	ip, r4
   18828:	bls	18908 <__assert_fail@plt+0x6bdc>
   1882c:	cmp	r5, ip, lsr #3
   18830:	add	r4, ip, #1
   18834:	bls	18820 <__assert_fail@plt+0x6af4>
   18838:	lsr	r2, ip, #5
   1883c:	and	r3, ip, #31
   18840:	ldr	r2, [r6, r2, lsl #2]
   18844:	lsr	r3, r2, r3
   18848:	tst	r3, #1
   1884c:	beq	18820 <__assert_fail@plt+0x6af4>
   18850:	cmp	r7, r4
   18854:	bls	18920 <__assert_fail@plt+0x6bf4>
   18858:	cmp	r5, r4, lsr #3
   1885c:	bls	18920 <__assert_fail@plt+0x6bf4>
   18860:	lsr	r2, r4, #5
   18864:	and	r3, r4, #31
   18868:	ldr	r2, [r6, r2, lsl #2]
   1886c:	lsr	r3, r2, r3
   18870:	tst	r3, #1
   18874:	beq	18920 <__assert_fail@plt+0x6bf4>
   18878:	sub	r0, r7, #1
   1887c:	sub	r0, r0, ip
   18880:	mov	r2, #1
   18884:	b	188a8 <__assert_fail@plt+0x6b7c>
   18888:	cmp	r5, r3, lsr #3
   1888c:	bls	188bc <__assert_fail@plt+0x6b90>
   18890:	ldr	r3, [r6, lr, lsl #2]
   18894:	add	lr, r2, #1
   18898:	lsr	r3, r3, r1
   1889c:	tst	r3, #1
   188a0:	beq	188bc <__assert_fail@plt+0x6b90>
   188a4:	mov	r2, lr
   188a8:	add	r3, r2, r4
   188ac:	cmp	r0, r2
   188b0:	and	r1, r3, #31
   188b4:	lsr	lr, r3, #5
   188b8:	bne	18888 <__assert_fail@plt+0x6b5c>
   188bc:	cmp	r2, #1
   188c0:	beq	18958 <__assert_fail@plt+0x6c2c>
   188c4:	add	r4, ip, r2
   188c8:	str	r4, [sp, #8]
   188cc:	stm	sp, {fp, ip}
   188d0:	mvn	r3, #0
   188d4:	mov	r2, #1
   188d8:	mov	r1, r9
   188dc:	mov	r0, r8
   188e0:	bl	11d08 <__snprintf_chk@plt>
   188e4:	cmp	r0, r9
   188e8:	bcs	1894c <__assert_fail@plt+0x6c20>
   188ec:	add	r4, r4, #1
   188f0:	cmp	r7, r4
   188f4:	add	r8, r8, r0
   188f8:	sub	r9, r9, r0
   188fc:	mov	r1, #1
   18900:	mov	ip, r4
   18904:	bhi	1882c <__assert_fail@plt+0x6b00>
   18908:	sub	r8, r8, r1
   1890c:	mov	r3, #0
   18910:	mov	r0, sl
   18914:	strb	r3, [r8]
   18918:	add	sp, sp, #28
   1891c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18920:	ldr	r3, [sp, #16]
   18924:	str	ip, [sp, #4]
   18928:	str	r3, [sp]
   1892c:	mov	r2, #1
   18930:	mvn	r3, #0
   18934:	mov	r1, r9
   18938:	mov	r0, r8
   1893c:	mov	r4, ip
   18940:	bl	11d08 <__snprintf_chk@plt>
   18944:	cmp	r0, r9
   18948:	bcc	188ec <__assert_fail@plt+0x6bc0>
   1894c:	mov	r0, #0
   18950:	add	sp, sp, #28
   18954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18958:	ldr	r3, [sp, #20]
   1895c:	str	r4, [sp, #8]
   18960:	str	r3, [sp]
   18964:	str	ip, [sp, #4]
   18968:	mvn	r3, #0
   1896c:	mov	r1, r9
   18970:	mov	r0, r8
   18974:	bl	11d08 <__snprintf_chk@plt>
   18978:	b	188e4 <__assert_fail@plt+0x6bb8>
   1897c:	mov	r8, r0
   18980:	b	1890c <__assert_fail@plt+0x6be0>
   18984:	andeq	r1, r0, r8, asr #13
   18988:			; <UNDEFINED> instruction: 0x000016b4
   1898c:			; <UNDEFINED> instruction: 0x000016b4
   18990:	lsl	ip, r3, #3
   18994:	subs	ip, ip, #4
   18998:	push	{r4, r5, r6, r7, r8, lr}
   1899c:	mov	r7, r0
   189a0:	mov	r6, r0
   189a4:	bmi	18ac0 <__assert_fail@plt+0x6d94>
   189a8:	cmp	r1, #0
   189ac:	beq	18ac0 <__assert_fail@plt+0x6d94>
   189b0:	mov	r0, #0
   189b4:	b	18a0c <__assert_fail@plt+0x6ce0>
   189b8:	lsr	r8, r5, #5
   189bc:	and	r5, r5, #31
   189c0:	ldr	r8, [r2, r8, lsl #2]
   189c4:	lsr	r5, r8, r5
   189c8:	tst	r5, #1
   189cc:	beq	18a84 <__assert_fail@plt+0x6d58>
   189d0:	orr	r4, lr, #8
   189d4:	cmp	r0, #0
   189d8:	moveq	r0, r6
   189dc:	cmp	r4, #9
   189e0:	mov	lr, r4
   189e4:	addgt	lr, r4, #87	; 0x57
   189e8:	ble	18a94 <__assert_fail@plt+0x6d68>
   189ec:	mov	r4, r6
   189f0:	subs	ip, ip, #4
   189f4:	strb	lr, [r4], #1
   189f8:	bmi	18aa8 <__assert_fail@plt+0x6d7c>
   189fc:	sub	lr, r4, r7
   18a00:	cmp	lr, r1
   18a04:	beq	18aa8 <__assert_fail@plt+0x6d7c>
   18a08:	mov	r6, r4
   18a0c:	cmp	r3, ip, lsr #3
   18a10:	lsrhi	r4, ip, #5
   18a14:	andhi	lr, ip, #31
   18a18:	ldrhi	r4, [r2, r4, lsl #2]
   18a1c:	movls	lr, #0
   18a20:	lsrhi	lr, r4, lr
   18a24:	add	r4, ip, #1
   18a28:	andhi	lr, lr, #1
   18a2c:	cmp	r3, r4, lsr #3
   18a30:	bls	18a4c <__assert_fail@plt+0x6d20>
   18a34:	lsr	r5, r4, #5
   18a38:	and	r4, r4, #31
   18a3c:	ldr	r5, [r2, r5, lsl #2]
   18a40:	lsr	r4, r5, r4
   18a44:	tst	r4, #1
   18a48:	orrne	lr, lr, #2
   18a4c:	add	r4, ip, #2
   18a50:	cmp	r3, r4, lsr #3
   18a54:	bls	18a70 <__assert_fail@plt+0x6d44>
   18a58:	lsr	r5, r4, #5
   18a5c:	and	r4, r4, #31
   18a60:	ldr	r5, [r2, r5, lsl #2]
   18a64:	lsr	r4, r5, r4
   18a68:	tst	r4, #1
   18a6c:	orrne	lr, lr, #4
   18a70:	add	r5, ip, #3
   18a74:	clz	r4, r0
   18a78:	cmp	r3, r5, lsr #3
   18a7c:	lsr	r4, r4, #5
   18a80:	bhi	189b8 <__assert_fail@plt+0x6c8c>
   18a84:	cmp	lr, #0
   18a88:	moveq	r4, #0
   18a8c:	cmp	r4, #0
   18a90:	movne	r0, r6
   18a94:	mov	r4, r6
   18a98:	add	lr, lr, #48	; 0x30
   18a9c:	subs	ip, ip, #4
   18aa0:	strb	lr, [r4], #1
   18aa4:	bpl	189fc <__assert_fail@plt+0x6cd0>
   18aa8:	cmp	r0, #0
   18aac:	mov	r3, #0
   18ab0:	strb	r3, [r4]
   18ab4:	popne	{r4, r5, r6, r7, r8, pc}
   18ab8:	mov	r0, r6
   18abc:	pop	{r4, r5, r6, r7, r8, pc}
   18ac0:	mov	r3, #0
   18ac4:	strb	r3, [r6], #-1
   18ac8:	mov	r0, r6
   18acc:	pop	{r4, r5, r6, r7, r8, pc}
   18ad0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ad4:	mov	r7, r0
   18ad8:	mov	r6, r1
   18adc:	mov	r9, r2
   18ae0:	bl	11b04 <strlen@plt>
   18ae4:	cmp	r0, #1
   18ae8:	sub	r0, r0, #1
   18aec:	add	r4, r7, r0
   18af0:	bls	18b00 <__assert_fail@plt+0x6dd4>
   18af4:	ldrb	r3, [r7]
   18af8:	cmp	r3, #48	; 0x30
   18afc:	beq	18c10 <__assert_fail@plt+0x6ee4>
   18b00:	mov	r2, r9
   18b04:	mov	r1, #0
   18b08:	mov	r0, r6
   18b0c:	bl	11b88 <memset@plt>
   18b10:	cmp	r7, r4
   18b14:	movls	r5, #0
   18b18:	movls	r8, #1
   18b1c:	bls	18bcc <__assert_fail@plt+0x6ea0>
   18b20:	b	18c08 <__assert_fail@plt+0x6edc>
   18b24:	sxtb	r0, r3
   18b28:	cmn	r0, #1
   18b2c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b30:	tst	r3, #1
   18b34:	beq	18b50 <__assert_fail@plt+0x6e24>
   18b38:	cmp	r9, r5, lsr #3
   18b3c:	lsrhi	r0, r5, #5
   18b40:	andhi	r2, r5, #31
   18b44:	ldrhi	r1, [r6, r0, lsl #2]
   18b48:	orrhi	r2, r1, r8, lsl r2
   18b4c:	strhi	r2, [r6, r0, lsl #2]
   18b50:	tst	r3, #2
   18b54:	beq	18b74 <__assert_fail@plt+0x6e48>
   18b58:	add	r2, r5, #1
   18b5c:	cmp	r9, r2, lsr #3
   18b60:	lsrhi	r0, r2, #5
   18b64:	andhi	r2, r2, #31
   18b68:	ldrhi	r1, [r6, r0, lsl #2]
   18b6c:	orrhi	r2, r1, r8, lsl r2
   18b70:	strhi	r2, [r6, r0, lsl #2]
   18b74:	tst	r3, #4
   18b78:	beq	18b98 <__assert_fail@plt+0x6e6c>
   18b7c:	add	r2, r5, #2
   18b80:	cmp	r9, r2, lsr #3
   18b84:	lsrhi	r0, r2, #5
   18b88:	andhi	r2, r2, #31
   18b8c:	ldrhi	r1, [r6, r0, lsl #2]
   18b90:	orrhi	r2, r1, r8, lsl r2
   18b94:	strhi	r2, [r6, r0, lsl #2]
   18b98:	tst	r3, #8
   18b9c:	beq	18bbc <__assert_fail@plt+0x6e90>
   18ba0:	add	r3, r5, #3
   18ba4:	cmp	r9, r3, lsr #3
   18ba8:	lsrhi	r1, r3, #5
   18bac:	andhi	r3, r3, #31
   18bb0:	ldrhi	r2, [r6, r1, lsl #2]
   18bb4:	orrhi	r3, r2, r8, lsl r3
   18bb8:	strhi	r3, [r6, r1, lsl #2]
   18bbc:	sub	r4, r4, #1
   18bc0:	cmp	r7, r4
   18bc4:	add	r5, r5, #4
   18bc8:	bhi	18c08 <__assert_fail@plt+0x6edc>
   18bcc:	ldrsb	sl, [r4]
   18bd0:	cmp	sl, #44	; 0x2c
   18bd4:	ldrsbeq	sl, [r4, #-1]
   18bd8:	subeq	r4, r4, #1
   18bdc:	sub	r3, sl, #48	; 0x30
   18be0:	cmp	r3, #9
   18be4:	bls	18b24 <__assert_fail@plt+0x6df8>
   18be8:	bl	11aa4 <__ctype_tolower_loc@plt>
   18bec:	ldr	r3, [r0]
   18bf0:	ldr	r3, [r3, sl, lsl #2]
   18bf4:	sub	r2, r3, #97	; 0x61
   18bf8:	cmp	r2, #5
   18bfc:	bhi	18c20 <__assert_fail@plt+0x6ef4>
   18c00:	sub	r3, r3, #87	; 0x57
   18c04:	b	18b30 <__assert_fail@plt+0x6e04>
   18c08:	mov	r0, #0
   18c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c10:	ldrb	r3, [r7, #1]
   18c14:	cmp	r3, #120	; 0x78
   18c18:	addeq	r7, r7, #2
   18c1c:	b	18b00 <__assert_fail@plt+0x6dd4>
   18c20:	mvn	r0, #0
   18c24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c28:	ldr	ip, [pc, #584]	; 18e78 <__assert_fail@plt+0x714c>
   18c2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c30:	add	ip, pc, ip
   18c34:	ldr	lr, [pc, #576]	; 18e7c <__assert_fail@plt+0x7150>
   18c38:	mov	r6, r1
   18c3c:	sub	sp, sp, #52	; 0x34
   18c40:	ldr	r1, [ip, lr]
   18c44:	mov	sl, r0
   18c48:	mov	lr, r1
   18c4c:	str	r1, [sp, #16]
   18c50:	ldr	lr, [lr]
   18c54:	mov	r1, #0
   18c58:	mov	r0, r6
   18c5c:	str	r3, [sp, #8]
   18c60:	mov	r4, r2
   18c64:	str	lr, [sp, #44]	; 0x2c
   18c68:	lsl	r5, r2, #3
   18c6c:	bl	11b88 <memset@plt>
   18c70:	mov	r3, #0
   18c74:	str	r3, [sp]
   18c78:	ldr	r3, [pc, #512]	; 18e80 <__assert_fail@plt+0x7154>
   18c7c:	cmp	sl, #0
   18c80:	add	r3, pc, r3
   18c84:	str	r3, [sp, #4]
   18c88:	ldr	r3, [pc, #500]	; 18e84 <__assert_fail@plt+0x7158>
   18c8c:	add	r3, pc, r3
   18c90:	str	r3, [sp, #20]
   18c94:	beq	18da8 <__assert_fail@plt+0x707c>
   18c98:	mov	r1, #44	; 0x2c
   18c9c:	mov	r0, sl
   18ca0:	bl	11b10 <strchr@plt>
   18ca4:	subs	r9, r0, #0
   18ca8:	addne	r9, r9, #1
   18cac:	add	r3, sp, #31
   18cb0:	add	r2, sp, #32
   18cb4:	ldr	r1, [sp, #4]
   18cb8:	mov	r0, sl
   18cbc:	str	r3, [sp, #12]
   18cc0:	bl	11c60 <sscanf@plt>
   18cc4:	subs	r3, r0, #0
   18cc8:	str	r3, [sp]
   18ccc:	ble	18e40 <__assert_fail@plt+0x7114>
   18cd0:	ldr	fp, [sp, #32]
   18cd4:	mov	r7, #1
   18cd8:	mov	r1, #45	; 0x2d
   18cdc:	mov	r0, sl
   18ce0:	str	fp, [sp, #36]	; 0x24
   18ce4:	str	r7, [sp, #40]	; 0x28
   18ce8:	bl	11b10 <strchr@plt>
   18cec:	subs	r8, r0, #0
   18cf0:	beq	18d34 <__assert_fail@plt+0x7008>
   18cf4:	mov	r0, sl
   18cf8:	mov	r1, #44	; 0x2c
   18cfc:	bl	11b10 <strchr@plt>
   18d00:	add	r8, r8, r7
   18d04:	subs	sl, r0, #0
   18d08:	beq	18ddc <__assert_fail@plt+0x70b0>
   18d0c:	cmp	r8, #0
   18d10:	add	sl, sl, r7
   18d14:	beq	18d34 <__assert_fail@plt+0x7008>
   18d18:	clz	r7, sl
   18d1c:	lsr	r7, r7, #5
   18d20:	cmp	sl, r8
   18d24:	movls	r2, r7
   18d28:	orrhi	r2, r7, #1
   18d2c:	cmp	r2, #0
   18d30:	bne	18de4 <__assert_fail@plt+0x70b8>
   18d34:	mov	lr, fp
   18d38:	ldr	r3, [sp, #8]
   18d3c:	adds	ip, r3, #0
   18d40:	movne	ip, #1
   18d44:	cmp	r5, fp
   18d48:	movhi	r2, #0
   18d4c:	andls	r2, ip, #1
   18d50:	cmp	r2, #0
   18d54:	bne	18dbc <__assert_fail@plt+0x7090>
   18d58:	ldr	r7, [sp, #40]	; 0x28
   18d5c:	mov	r8, #1
   18d60:	b	18d78 <__assert_fail@plt+0x704c>
   18d64:	cmp	fp, r5
   18d68:	movcc	r3, #0
   18d6c:	andcs	r3, ip, #1
   18d70:	cmp	r3, #0
   18d74:	bne	18dbc <__assert_fail@plt+0x7090>
   18d78:	cmp	r4, fp, lsr #3
   18d7c:	lsrhi	r1, fp, #5
   18d80:	andhi	r3, fp, #31
   18d84:	ldrhi	r2, [r6, r1, lsl #2]
   18d88:	add	fp, fp, r7
   18d8c:	orrhi	r3, r2, r8, lsl r3
   18d90:	strhi	r3, [r6, r1, lsl #2]
   18d94:	cmp	fp, lr
   18d98:	bls	18d64 <__assert_fail@plt+0x7038>
   18d9c:	mov	sl, r9
   18da0:	cmp	sl, #0
   18da4:	bne	18c98 <__assert_fail@plt+0x6f6c>
   18da8:	ldr	r3, [sp]
   18dac:	sub	r0, r3, #2
   18db0:	clz	r0, r0
   18db4:	lsr	r0, r0, #5
   18db8:	b	18dc0 <__assert_fail@plt+0x7094>
   18dbc:	mov	r0, #2
   18dc0:	ldr	r3, [sp, #16]
   18dc4:	ldr	r2, [sp, #44]	; 0x2c
   18dc8:	ldr	r3, [r3]
   18dcc:	cmp	r2, r3
   18dd0:	bne	18e74 <__assert_fail@plt+0x7148>
   18dd4:	add	sp, sp, #52	; 0x34
   18dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ddc:	cmp	r8, #0
   18de0:	beq	18d34 <__assert_fail@plt+0x7008>
   18de4:	ldr	r3, [sp, #12]
   18de8:	add	r2, sp, #36	; 0x24
   18dec:	ldr	r1, [sp, #20]
   18df0:	mov	r0, r8
   18df4:	bl	11c60 <sscanf@plt>
   18df8:	subs	r3, r0, #0
   18dfc:	str	r3, [sp]
   18e00:	ble	18e40 <__assert_fail@plt+0x7114>
   18e04:	mov	r0, r8
   18e08:	mov	r1, #58	; 0x3a
   18e0c:	bl	11b10 <strchr@plt>
   18e10:	cmp	r0, #0
   18e14:	beq	18e30 <__assert_fail@plt+0x7104>
   18e18:	adds	r0, r0, #1
   18e1c:	beq	18e30 <__assert_fail@plt+0x7104>
   18e20:	cmp	r0, sl
   18e24:	orrcc	r7, r7, #1
   18e28:	cmp	r7, #0
   18e2c:	bne	18e48 <__assert_fail@plt+0x711c>
   18e30:	ldr	fp, [sp, #32]
   18e34:	ldr	lr, [sp, #36]	; 0x24
   18e38:	cmp	fp, lr
   18e3c:	bls	18d38 <__assert_fail@plt+0x700c>
   18e40:	mov	r0, #1
   18e44:	b	18dc0 <__assert_fail@plt+0x7094>
   18e48:	ldr	r3, [sp, #12]
   18e4c:	add	r2, sp, #40	; 0x28
   18e50:	ldr	r1, [sp, #20]
   18e54:	bl	11c60 <sscanf@plt>
   18e58:	subs	r3, r0, #0
   18e5c:	str	r3, [sp]
   18e60:	ble	18e40 <__assert_fail@plt+0x7114>
   18e64:	ldr	r3, [sp, #40]	; 0x28
   18e68:	cmp	r3, #0
   18e6c:	bne	18e30 <__assert_fail@plt+0x7104>
   18e70:	b	18e40 <__assert_fail@plt+0x7114>
   18e74:	bl	11978 <__stack_chk_fail@plt>
   18e78:	strdeq	r2, [r1], -ip
   18e7c:	andeq	r0, r0, r0, asr #3
   18e80:	andeq	r1, r0, r0, asr r2
   18e84:	andeq	r1, r0, r4, asr #4
   18e88:	cmp	r3, #0
   18e8c:	cmpeq	r2, #0
   18e90:	bne	18ea8 <__assert_fail@plt+0x717c>
   18e94:	cmp	r1, #0
   18e98:	cmpeq	r0, #0
   18e9c:	mvnne	r1, #0
   18ea0:	mvnne	r0, #0
   18ea4:	b	18ec4 <__assert_fail@plt+0x7198>
   18ea8:	sub	sp, sp, #8
   18eac:	push	{sp, lr}
   18eb0:	bl	18ed4 <__assert_fail@plt+0x71a8>
   18eb4:	ldr	lr, [sp, #4]
   18eb8:	add	sp, sp, #8
   18ebc:	pop	{r2, r3}
   18ec0:	bx	lr
   18ec4:	push	{r1, lr}
   18ec8:	mov	r0, #8
   18ecc:	bl	11840 <raise@plt>
   18ed0:	pop	{r1, pc}
   18ed4:	cmp	r1, r3
   18ed8:	cmpeq	r0, r2
   18edc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ee0:	mov	r4, r0
   18ee4:	movcc	r0, #0
   18ee8:	mov	r5, r1
   18eec:	ldr	lr, [sp, #36]	; 0x24
   18ef0:	movcc	r1, r0
   18ef4:	bcc	18ff0 <__assert_fail@plt+0x72c4>
   18ef8:	cmp	r3, #0
   18efc:	clzeq	ip, r2
   18f00:	clzne	ip, r3
   18f04:	addeq	ip, ip, #32
   18f08:	cmp	r5, #0
   18f0c:	clzeq	r1, r4
   18f10:	addeq	r1, r1, #32
   18f14:	clzne	r1, r5
   18f18:	sub	ip, ip, r1
   18f1c:	sub	sl, ip, #32
   18f20:	lsl	r9, r3, ip
   18f24:	rsb	fp, ip, #32
   18f28:	orr	r9, r9, r2, lsl sl
   18f2c:	orr	r9, r9, r2, lsr fp
   18f30:	lsl	r8, r2, ip
   18f34:	cmp	r5, r9
   18f38:	cmpeq	r4, r8
   18f3c:	movcc	r0, #0
   18f40:	movcc	r1, r0
   18f44:	bcc	18f60 <__assert_fail@plt+0x7234>
   18f48:	mov	r0, #1
   18f4c:	subs	r4, r4, r8
   18f50:	lsl	r1, r0, sl
   18f54:	orr	r1, r1, r0, lsr fp
   18f58:	lsl	r0, r0, ip
   18f5c:	sbc	r5, r5, r9
   18f60:	cmp	ip, #0
   18f64:	beq	18ff0 <__assert_fail@plt+0x72c4>
   18f68:	lsr	r6, r8, #1
   18f6c:	orr	r6, r6, r9, lsl #31
   18f70:	lsr	r7, r9, #1
   18f74:	mov	r2, ip
   18f78:	b	18f9c <__assert_fail@plt+0x7270>
   18f7c:	subs	r3, r4, r6
   18f80:	sbc	r8, r5, r7
   18f84:	adds	r3, r3, r3
   18f88:	adc	r8, r8, r8
   18f8c:	adds	r4, r3, #1
   18f90:	adc	r5, r8, #0
   18f94:	subs	r2, r2, #1
   18f98:	beq	18fb8 <__assert_fail@plt+0x728c>
   18f9c:	cmp	r5, r7
   18fa0:	cmpeq	r4, r6
   18fa4:	bcs	18f7c <__assert_fail@plt+0x7250>
   18fa8:	adds	r4, r4, r4
   18fac:	adc	r5, r5, r5
   18fb0:	subs	r2, r2, #1
   18fb4:	bne	18f9c <__assert_fail@plt+0x7270>
   18fb8:	lsr	r3, r4, ip
   18fbc:	orr	r3, r3, r5, lsl fp
   18fc0:	lsr	r2, r5, ip
   18fc4:	orr	r3, r3, r5, lsr sl
   18fc8:	adds	r0, r0, r4
   18fcc:	mov	r4, r3
   18fd0:	lsl	r3, r2, ip
   18fd4:	orr	r3, r3, r4, lsl sl
   18fd8:	lsl	ip, r4, ip
   18fdc:	orr	r3, r3, r4, lsr fp
   18fe0:	adc	r1, r1, r5
   18fe4:	subs	r0, r0, ip
   18fe8:	mov	r5, r2
   18fec:	sbc	r1, r1, r3
   18ff0:	cmp	lr, #0
   18ff4:	strdne	r4, [lr]
   18ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ffc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19000:	mov	r7, r0
   19004:	ldr	r6, [pc, #72]	; 19054 <__assert_fail@plt+0x7328>
   19008:	ldr	r5, [pc, #72]	; 19058 <__assert_fail@plt+0x732c>
   1900c:	add	r6, pc, r6
   19010:	add	r5, pc, r5
   19014:	sub	r6, r6, r5
   19018:	mov	r8, r1
   1901c:	mov	r9, r2
   19020:	bl	117fc <fdopen@plt-0x20>
   19024:	asrs	r6, r6, #2
   19028:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1902c:	mov	r4, #0
   19030:	add	r4, r4, #1
   19034:	ldr	r3, [r5], #4
   19038:	mov	r2, r9
   1903c:	mov	r1, r8
   19040:	mov	r0, r7
   19044:	blx	r3
   19048:	cmp	r6, r4
   1904c:	bne	19030 <__assert_fail@plt+0x7304>
   19050:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19054:	andeq	r1, r1, r0, lsl sp
   19058:	andeq	r1, r1, r8, lsl #26
   1905c:	bx	lr
   19060:	ldr	r3, [pc, #12]	; 19074 <__assert_fail@plt+0x7348>
   19064:	mov	r1, #0
   19068:	add	r3, pc, r3
   1906c:	ldr	r2, [r3]
   19070:	b	11b4c <__cxa_atexit@plt>
   19074:	muleq	r1, r4, pc	; <UNPREDICTABLE>

Disassembly of section .fini:

00019078 <.fini>:
   19078:	push	{r3, lr}
   1907c:	pop	{r3, pc}
