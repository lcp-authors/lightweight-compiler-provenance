
raspbian-preinstalled/lsusb:     file format elf32-littlearm


Disassembly of section .init:

00011220 <.init>:
   11220:	push	{r3, lr}
   11224:	bl	119d8 <__assert_fail@plt+0x444>
   11228:	pop	{r3, pc}

Disassembly of section .plt:

0001122c <calloc@plt-0x14>:
   1122c:	push	{lr}		; (str lr, [sp, #-4]!)
   11230:	ldr	lr, [pc, #4]	; 1123c <calloc@plt-0x4>
   11234:	add	lr, pc, lr
   11238:	ldr	pc, [lr, #8]!
   1123c:	andeq	fp, r2, r4, asr #27

00011240 <calloc@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #176128	; 0x2b000
   11248:	ldr	pc, [ip, #3524]!	; 0xdc4

0001124c <udev_hwdb_unref@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #176128	; 0x2b000
   11254:	ldr	pc, [ip, #3516]!	; 0xdbc

00011258 <raise@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #176128	; 0x2b000
   11260:	ldr	pc, [ip, #3508]!	; 0xdb4

00011264 <iconv_close@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #176128	; 0x2b000
   1126c:	ldr	pc, [ip, #3500]!	; 0xdac

00011270 <iconv@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #176128	; 0x2b000
   11278:	ldr	pc, [ip, #3492]!	; 0xda4

0001127c <strcmp@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #176128	; 0x2b000
   11284:	ldr	pc, [ip, #3484]!	; 0xd9c

00011288 <libusb_open@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #176128	; 0x2b000
   11290:	ldr	pc, [ip, #3476]!	; 0xd94

00011294 <read@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #176128	; 0x2b000
   1129c:	ldr	pc, [ip, #3468]!	; 0xd8c

000112a0 <free@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #176128	; 0x2b000
   112a8:	ldr	pc, [ip, #3460]!	; 0xd84

000112ac <memcpy@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #176128	; 0x2b000
   112b4:	ldr	pc, [ip, #3452]!	; 0xd7c

000112b8 <strdup@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #176128	; 0x2b000
   112c0:	ldr	pc, [ip, #3444]!	; 0xd74

000112c4 <libusb_release_interface@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #176128	; 0x2b000
   112cc:	ldr	pc, [ip, #3436]!	; 0xd6c

000112d0 <__stack_chk_fail@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #176128	; 0x2b000
   112d8:	ldr	pc, [ip, #3428]!	; 0xd64

000112dc <libusb_close@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #176128	; 0x2b000
   112e4:	ldr	pc, [ip, #3420]!	; 0xd5c

000112e8 <perror@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #176128	; 0x2b000
   112f0:	ldr	pc, [ip, #3412]!	; 0xd54

000112f4 <libusb_get_string_descriptor_ascii@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #176128	; 0x2b000
   112fc:	ldr	pc, [ip, #3404]!	; 0xd4c

00011300 <udev_hwdb_new@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #176128	; 0x2b000
   11308:	ldr	pc, [ip, #3396]!	; 0xd44

0001130c <readlink@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #176128	; 0x2b000
   11314:	ldr	pc, [ip, #3388]!	; 0xd3c

00011318 <libusb_free_config_descriptor@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #176128	; 0x2b000
   11320:	ldr	pc, [ip, #3380]!	; 0xd34

00011324 <__memcpy_chk@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #176128	; 0x2b000
   1132c:	ldr	pc, [ip, #3372]!	; 0xd2c

00011330 <fwrite@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #176128	; 0x2b000
   11338:	ldr	pc, [ip, #3364]!	; 0xd24

0001133c <libusb_get_config_descriptor@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #176128	; 0x2b000
   11344:	ldr	pc, [ip, #3356]!	; 0xd1c

00011348 <udev_new@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #176128	; 0x2b000
   11350:	ldr	pc, [ip, #3348]!	; 0xd14

00011354 <__ctype_get_mb_cur_max@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #176128	; 0x2b000
   1135c:	ldr	pc, [ip, #3340]!	; 0xd0c

00011360 <__strcpy_chk@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #176128	; 0x2b000
   11368:	ldr	pc, [ip, #3332]!	; 0xd04

0001136c <opendir@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #176128	; 0x2b000
   11374:	ldr	pc, [ip, #3324]!	; 0xcfc

00011378 <puts@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #176128	; 0x2b000
   11380:	ldr	pc, [ip, #3316]!	; 0xcf4

00011384 <malloc@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #176128	; 0x2b000
   1138c:	ldr	pc, [ip, #3308]!	; 0xcec

00011390 <iconv_open@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #176128	; 0x2b000
   11398:	ldr	pc, [ip, #3300]!	; 0xce4

0001139c <__libc_start_main@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #176128	; 0x2b000
   113a4:	ldr	pc, [ip, #3292]!	; 0xcdc

000113a8 <strerror@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #176128	; 0x2b000
   113b0:	ldr	pc, [ip, #3284]!	; 0xcd4

000113b4 <__gmon_start__@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #176128	; 0x2b000
   113bc:	ldr	pc, [ip, #3276]!	; 0xccc

000113c0 <open@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #176128	; 0x2b000
   113c8:	ldr	pc, [ip, #3268]!	; 0xcc4

000113cc <getopt_long@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #176128	; 0x2b000
   113d4:	ldr	pc, [ip, #3260]!	; 0xcbc

000113d8 <__ctype_b_loc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #176128	; 0x2b000
   113e0:	ldr	pc, [ip, #3252]!	; 0xcb4

000113e4 <libusb_get_bus_number@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #176128	; 0x2b000
   113ec:	ldr	pc, [ip, #3244]!	; 0xcac

000113f0 <getcwd@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #176128	; 0x2b000
   113f8:	ldr	pc, [ip, #3236]!	; 0xca4

000113fc <exit@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #176128	; 0x2b000
   11404:	ldr	pc, [ip, #3228]!	; 0xc9c

00011408 <udev_unref@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #176128	; 0x2b000
   11410:	ldr	pc, [ip, #3220]!	; 0xc94

00011414 <strtoul@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #176128	; 0x2b000
   1141c:	ldr	pc, [ip, #3212]!	; 0xc8c

00011420 <strlen@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #176128	; 0x2b000
   11428:	ldr	pc, [ip, #3204]!	; 0xc84

0001142c <libusb_get_device_list@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #176128	; 0x2b000
   11434:	ldr	pc, [ip, #3196]!	; 0xc7c

00011438 <strchr@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #176128	; 0x2b000
   11440:	ldr	pc, [ip, #3188]!	; 0xc74

00011444 <libusb_error_name@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #176128	; 0x2b000
   1144c:	ldr	pc, [ip, #3180]!	; 0xc6c

00011450 <__errno_location@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #176128	; 0x2b000
   11458:	ldr	pc, [ip, #3172]!	; 0xc64

0001145c <__sprintf_chk@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #176128	; 0x2b000
   11464:	ldr	pc, [ip, #3164]!	; 0xc5c

00011468 <snprintf@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #176128	; 0x2b000
   11470:	ldr	pc, [ip, #3156]!	; 0xc54

00011474 <putchar@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #176128	; 0x2b000
   1147c:	ldr	pc, [ip, #3148]!	; 0xc4c

00011480 <strncpy@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #176128	; 0x2b000
   11488:	ldr	pc, [ip, #3140]!	; 0xc44

0001148c <__printf_chk@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #176128	; 0x2b000
   11494:	ldr	pc, [ip, #3132]!	; 0xc3c

00011498 <__fprintf_chk@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #176128	; 0x2b000
   114a0:	ldr	pc, [ip, #3124]!	; 0xc34

000114a4 <udev_list_entry_get_name@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #176128	; 0x2b000
   114ac:	ldr	pc, [ip, #3116]!	; 0xc2c

000114b0 <setlocale@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #176128	; 0x2b000
   114b8:	ldr	pc, [ip, #3108]!	; 0xc24

000114bc <libusb_exit@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #176128	; 0x2b000
   114c4:	ldr	pc, [ip, #3100]!	; 0xc1c

000114c8 <libusb_init@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #176128	; 0x2b000
   114d0:	ldr	pc, [ip, #3092]!	; 0xc14

000114d4 <readdir@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #176128	; 0x2b000
   114dc:	ldr	pc, [ip, #3084]!	; 0xc0c

000114e0 <libusb_get_device_descriptor@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #176128	; 0x2b000
   114e8:	ldr	pc, [ip, #3076]!	; 0xc04

000114ec <strrchr@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #176128	; 0x2b000
   114f4:	ldr	pc, [ip, #3068]!	; 0xbfc

000114f8 <libusb_free_device_list@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #176128	; 0x2b000
   11500:	ldr	pc, [ip, #3060]!	; 0xbf4

00011504 <nl_langinfo@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #176128	; 0x2b000
   1150c:	ldr	pc, [ip, #3052]!	; 0xbec

00011510 <libusb_claim_interface@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #176128	; 0x2b000
   11518:	ldr	pc, [ip, #3044]!	; 0xbe4

0001151c <udev_list_entry_get_next@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #176128	; 0x2b000
   11524:	ldr	pc, [ip, #3036]!	; 0xbdc

00011528 <putc@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #176128	; 0x2b000
   11530:	ldr	pc, [ip, #3028]!	; 0xbd4

00011534 <libusb_control_transfer@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #176128	; 0x2b000
   1153c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011540 <udev_hwdb_get_properties_list_entry@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #176128	; 0x2b000
   11548:	ldr	pc, [ip, #3012]!	; 0xbc4

0001154c <udev_list_entry_get_value@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #176128	; 0x2b000
   11554:	ldr	pc, [ip, #3004]!	; 0xbbc

00011558 <abort@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #176128	; 0x2b000
   11560:	ldr	pc, [ip, #2996]!	; 0xbb4

00011564 <close@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #176128	; 0x2b000
   1156c:	ldr	pc, [ip, #2988]!	; 0xbac

00011570 <libusb_get_device_address@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #176128	; 0x2b000
   11578:	ldr	pc, [ip, #2980]!	; 0xba4

0001157c <closedir@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #176128	; 0x2b000
   11584:	ldr	pc, [ip, #2972]!	; 0xb9c

00011588 <__snprintf_chk@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #176128	; 0x2b000
   11590:	ldr	pc, [ip, #2964]!	; 0xb94

00011594 <__assert_fail@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #176128	; 0x2b000
   1159c:	ldr	pc, [ip, #2956]!	; 0xb8c

Disassembly of section .text:

000115a0 <.text>:
   115a0:	ldr	r3, [pc, #960]	; 11968 <__assert_fail@plt+0x3d4>
   115a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115a8:	mov	r5, r0
   115ac:	mov	r0, #0
   115b0:	mov	r9, r0
   115b4:	ldr	r7, [pc, #944]	; 1196c <__assert_fail@plt+0x3d8>
   115b8:	ldr	r6, [pc, #944]	; 11970 <__assert_fail@plt+0x3dc>
   115bc:	ldr	fp, [pc, #944]	; 11974 <__assert_fail@plt+0x3e0>
   115c0:	sub	sp, sp, #52	; 0x34
   115c4:	ldr	r3, [r3]
   115c8:	mov	r4, r9
   115cc:	mvn	sl, #0
   115d0:	mov	r8, r1
   115d4:	ldr	r1, [pc, #924]	; 11978 <__assert_fail@plt+0x3e4>
   115d8:	str	r3, [sp, #44]	; 0x2c
   115dc:	str	r0, [sp, #20]
   115e0:	bl	114b0 <setlocale@plt>
   115e4:	str	r9, [sp, #16]
   115e8:	str	r9, [sp, #12]
   115ec:	str	sl, [sp, #36]	; 0x24
   115f0:	str	sl, [sp, #28]
   115f4:	str	sl, [sp, #32]
   115f8:	str	r4, [sp]
   115fc:	mov	r3, r7
   11600:	mov	r2, r6
   11604:	mov	r1, r8
   11608:	mov	r0, r5
   1160c:	bl	113cc <getopt_long@plt>
   11610:	cmn	r0, #1
   11614:	beq	1182c <__assert_fail@plt+0x298>
   11618:	sub	r0, r0, #68	; 0x44
   1161c:	cmp	r0, #50	; 0x32
   11620:	ldrls	pc, [pc, r0, lsl #2]
   11624:	b	117f8 <__assert_fail@plt+0x264>
   11628:	andeq	r1, r1, r4, ror r7
   1162c:	strdeq	r1, [r1], -r8
   11630:	strdeq	r1, [r1], -r8
   11634:	strdeq	r1, [r1], -r8
   11638:	strdeq	r1, [r1], -r8
   1163c:	strdeq	r1, [r1], -r8
   11640:	strdeq	r1, [r1], -r8
   11644:	strdeq	r1, [r1], -r8
   11648:	strdeq	r1, [r1], -r8
   1164c:	strdeq	r1, [r1], -r8
   11650:	strdeq	r1, [r1], -r8
   11654:	strdeq	r1, [r1], -r8
   11658:	strdeq	r1, [r1], -r8
   1165c:	strdeq	r1, [r1], -r8
   11660:	strdeq	r1, [r1], -r8
   11664:	strdeq	r1, [r1], -r8
   11668:	strdeq	r1, [r1], -r8
   1166c:	strdeq	r1, [r1], -r8
   11670:	andeq	r1, r1, r8, asr #14
   11674:	strdeq	r1, [r1], -r8
   11678:	strdeq	r1, [r1], -r8
   1167c:	strdeq	r1, [r1], -r8
   11680:	strdeq	r1, [r1], -r8
   11684:	strdeq	r1, [r1], -r8
   11688:	strdeq	r1, [r1], -r8
   1168c:	strdeq	r1, [r1], -r8
   11690:	strdeq	r1, [r1], -r8
   11694:	strdeq	r1, [r1], -r8
   11698:	strdeq	r1, [r1], -r8
   1169c:	strdeq	r1, [r1], -r8
   116a0:	strdeq	r1, [r1], -r8
   116a4:	strdeq	r1, [r1], -r8
   116a8:	strdeq	r1, [r1], -ip
   116ac:	strdeq	r1, [r1], -r8
   116b0:	strdeq	r1, [r1], -r8
   116b4:	strdeq	r1, [r1], -r8
   116b8:	strdeq	r1, [r1], -r4
   116bc:	strdeq	r1, [r1], -r8
   116c0:	strdeq	r1, [r1], -r8
   116c4:	strdeq	r1, [r1], -r8
   116c8:	strdeq	r1, [r1], -r8
   116cc:	strdeq	r1, [r1], -r8
   116d0:	strdeq	r1, [r1], -r8
   116d4:	strdeq	r1, [r1], -r8
   116d8:	strdeq	r1, [r1], -r8
   116dc:	strdeq	r1, [r1], -r8
   116e0:	strdeq	r1, [r1], -r8
   116e4:	andeq	r1, r1, r0, lsr #15
   116e8:	muleq	r1, r4, r7
   116ec:	strdeq	r1, [r1], -r8
   116f0:	andeq	r1, r1, r0, lsl #15
   116f4:	mov	r9, #1
   116f8:	b	115f8 <__assert_fail@plt+0x64>
   116fc:	mov	r1, #58	; 0x3a
   11700:	ldr	r0, [fp]
   11704:	bl	11438 <strchr@plt>
   11708:	subs	r3, r0, #0
   1170c:	beq	117f8 <__assert_fail@plt+0x264>
   11710:	strb	r4, [r3]
   11714:	ldr	r0, [fp]
   11718:	ldrb	r2, [r0]
   1171c:	cmp	r2, #0
   11720:	bne	118b8 <__assert_fail@plt+0x324>
   11724:	ldrb	r2, [r3, #1]
   11728:	cmp	r2, #0
   1172c:	beq	115f8 <__assert_fail@plt+0x64>
   11730:	add	r0, r3, #1
   11734:	mov	r2, #16
   11738:	mov	r1, #0
   1173c:	bl	11414 <strtoul@plt>
   11740:	mov	sl, r0
   11744:	b	115f8 <__assert_fail@plt+0x64>
   11748:	ldr	r0, [pc, #556]	; 1197c <__assert_fail@plt+0x3e8>
   1174c:	bl	11378 <puts@plt>
   11750:	mov	r4, #0
   11754:	ldr	r3, [pc, #524]	; 11968 <__assert_fail@plt+0x3d4>
   11758:	ldr	r2, [sp, #44]	; 0x2c
   1175c:	mov	r0, r4
   11760:	ldr	r3, [r3]
   11764:	cmp	r2, r3
   11768:	bne	11964 <__assert_fail@plt+0x3d0>
   1176c:	add	sp, sp, #52	; 0x34
   11770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11774:	ldr	r3, [fp]
   11778:	str	r3, [sp, #20]
   1177c:	b	115f8 <__assert_fail@plt+0x64>
   11780:	ldr	r2, [pc, #504]	; 11980 <__assert_fail@plt+0x3ec>
   11784:	ldr	r3, [r2, #40]	; 0x28
   11788:	add	r3, r3, #1
   1178c:	str	r3, [r2, #40]	; 0x28
   11790:	b	115f8 <__assert_fail@plt+0x64>
   11794:	mov	r3, #1
   11798:	str	r3, [sp, #16]
   1179c:	b	115f8 <__assert_fail@plt+0x64>
   117a0:	ldr	r2, [fp]
   117a4:	mov	r1, #58	; 0x3a
   117a8:	mov	r0, r2
   117ac:	str	r2, [sp, #24]
   117b0:	bl	11438 <strchr@plt>
   117b4:	ldr	r2, [sp, #24]
   117b8:	subs	r3, r0, #0
   117bc:	beq	11808 <__assert_fail@plt+0x274>
   117c0:	strb	r4, [r3]
   117c4:	ldr	r0, [fp]
   117c8:	ldrb	r2, [r0]
   117cc:	cmp	r2, #0
   117d0:	bne	118d4 <__assert_fail@plt+0x340>
   117d4:	ldrb	r2, [r3, #1]
   117d8:	cmp	r2, #0
   117dc:	beq	115f8 <__assert_fail@plt+0x64>
   117e0:	add	r0, r3, #1
   117e4:	mov	r2, #10
   117e8:	mov	r1, #0
   117ec:	bl	11414 <strtoul@plt>
   117f0:	str	r0, [sp, #28]
   117f4:	b	115f8 <__assert_fail@plt+0x64>
   117f8:	ldr	r3, [sp, #12]
   117fc:	add	r3, r3, #1
   11800:	str	r3, [sp, #12]
   11804:	b	115f8 <__assert_fail@plt+0x64>
   11808:	ldrb	r1, [r2]
   1180c:	cmp	r1, #0
   11810:	beq	115f8 <__assert_fail@plt+0x64>
   11814:	mov	r0, r2
   11818:	mov	r1, r3
   1181c:	mov	r2, #10
   11820:	bl	11414 <strtoul@plt>
   11824:	str	r0, [sp, #28]
   11828:	b	115f8 <__assert_fail@plt+0x64>
   1182c:	ldr	r3, [sp, #12]
   11830:	orrs	r3, r3, r9
   11834:	bne	11848 <__assert_fail@plt+0x2b4>
   11838:	ldr	r3, [pc, #324]	; 11984 <__assert_fail@plt+0x3f0>
   1183c:	ldr	r3, [r3]
   11840:	cmp	r3, r5
   11844:	bge	11868 <__assert_fail@plt+0x2d4>
   11848:	ldr	r3, [pc, #312]	; 11988 <__assert_fail@plt+0x3f4>
   1184c:	ldr	r2, [pc, #312]	; 1198c <__assert_fail@plt+0x3f8>
   11850:	mov	r1, #1
   11854:	ldr	r3, [r3]
   11858:	ldr	r0, [pc, #304]	; 11990 <__assert_fail@plt+0x3fc>
   1185c:	bl	11330 <fwrite@plt>
   11860:	mov	r4, #1
   11864:	b	11754 <__assert_fail@plt+0x1c0>
   11868:	bl	1af98 <__assert_fail@plt+0x9a04>
   1186c:	cmp	r0, #0
   11870:	blt	1192c <__assert_fail@plt+0x398>
   11874:	ldr	r3, [sp, #16]
   11878:	cmp	r3, #0
   1187c:	bne	1190c <__assert_fail@plt+0x378>
   11880:	add	r0, sp, #40	; 0x28
   11884:	bl	114c8 <libusb_init@plt>
   11888:	subs	r3, r0, #0
   1188c:	bne	118f0 <__assert_fail@plt+0x35c>
   11890:	ldr	r1, [sp, #20]
   11894:	ldr	r0, [sp, #40]	; 0x28
   11898:	cmp	r1, #0
   1189c:	beq	11948 <__assert_fail@plt+0x3b4>
   118a0:	bl	18658 <__assert_fail@plt+0x70c4>
   118a4:	mov	r4, r0
   118a8:	bl	1b358 <__assert_fail@plt+0x9dc4>
   118ac:	ldr	r0, [sp, #40]	; 0x28
   118b0:	bl	114bc <libusb_exit@plt>
   118b4:	b	11754 <__assert_fail@plt+0x1c0>
   118b8:	mov	r2, #16
   118bc:	mov	r1, #0
   118c0:	str	r3, [sp, #24]
   118c4:	bl	11414 <strtoul@plt>
   118c8:	ldr	r3, [sp, #24]
   118cc:	str	r0, [sp, #36]	; 0x24
   118d0:	b	11724 <__assert_fail@plt+0x190>
   118d4:	mov	r2, #10
   118d8:	mov	r1, #0
   118dc:	str	r3, [sp, #24]
   118e0:	bl	11414 <strtoul@plt>
   118e4:	ldr	r3, [sp, #24]
   118e8:	str	r0, [sp, #32]
   118ec:	b	117d4 <__assert_fail@plt+0x240>
   118f0:	ldr	r1, [pc, #144]	; 11988 <__assert_fail@plt+0x3f4>
   118f4:	ldr	r2, [pc, #152]	; 11994 <__assert_fail@plt+0x400>
   118f8:	mov	r4, #1
   118fc:	ldr	r0, [r1]
   11900:	mov	r1, #1
   11904:	bl	11498 <__fprintf_chk@plt>
   11908:	b	11754 <__assert_fail@plt+0x1c0>
   1190c:	ldr	r2, [pc, #108]	; 11980 <__assert_fail@plt+0x3ec>
   11910:	ldr	r3, [r2, #40]	; 0x28
   11914:	add	r3, r3, #1
   11918:	str	r3, [r2, #40]	; 0x28
   1191c:	bl	1966c <__assert_fail@plt+0x80d8>
   11920:	mov	r4, r0
   11924:	bl	1b358 <__assert_fail@plt+0x9dc4>
   11928:	b	11754 <__assert_fail@plt+0x1c0>
   1192c:	ldr	r3, [pc, #84]	; 11988 <__assert_fail@plt+0x3f4>
   11930:	mov	r2, #29
   11934:	mov	r1, #1
   11938:	ldr	r3, [r3]
   1193c:	ldr	r0, [pc, #84]	; 11998 <__assert_fail@plt+0x404>
   11940:	bl	11330 <fwrite@plt>
   11944:	b	11874 <__assert_fail@plt+0x2e0>
   11948:	str	sl, [sp]
   1194c:	ldr	r3, [sp, #36]	; 0x24
   11950:	ldr	r2, [sp, #28]
   11954:	ldr	r1, [sp, #32]
   11958:	bl	18724 <__assert_fail@plt+0x7190>
   1195c:	mov	r4, r0
   11960:	b	118a8 <__assert_fail@plt+0x314>
   11964:	bl	112d0 <__stack_chk_fail@plt>
   11968:	strdeq	ip, [r3], -r8
   1196c:	andeq	ip, r1, r4, lsl r3
   11970:	andeq	r2, r2, r0, lsl r1
   11974:	muleq	r4, r8, r8
   11978:	ldrdeq	r2, [r2], -r8
   1197c:	strdeq	r2, [r2], -r8
   11980:	andeq	r1, r4, r0, lsr #17
   11984:	andeq	r1, r4, r8, lsl #17
   11988:	muleq	r4, r0, r8
   1198c:	andeq	r0, r0, sl, lsl r2
   11990:	andeq	r2, r2, r0, lsr #2
   11994:	andeq	r2, r2, ip, asr r3
   11998:	andeq	r2, r2, ip, lsr r3
   1199c:	mov	fp, #0
   119a0:	mov	lr, #0
   119a4:	pop	{r1}		; (ldr r1, [sp], #4)
   119a8:	mov	r2, sp
   119ac:	push	{r2}		; (str r2, [sp, #-4]!)
   119b0:	push	{r0}		; (str r0, [sp, #-4]!)
   119b4:	ldr	ip, [pc, #16]	; 119cc <__assert_fail@plt+0x438>
   119b8:	push	{ip}		; (str ip, [sp, #-4]!)
   119bc:	ldr	r0, [pc, #12]	; 119d0 <__assert_fail@plt+0x43c>
   119c0:	ldr	r3, [pc, #12]	; 119d4 <__assert_fail@plt+0x440>
   119c4:	bl	1139c <__libc_start_main@plt>
   119c8:	bl	11558 <abort@plt>
   119cc:	muleq	r1, r4, fp
   119d0:	andeq	r1, r1, r0, lsr #11
   119d4:	andeq	fp, r1, r4, lsr fp
   119d8:	ldr	r3, [pc, #20]	; 119f4 <__assert_fail@plt+0x460>
   119dc:	ldr	r2, [pc, #20]	; 119f8 <__assert_fail@plt+0x464>
   119e0:	add	r3, pc, r3
   119e4:	ldr	r2, [r3, r2]
   119e8:	cmp	r2, #0
   119ec:	bxeq	lr
   119f0:	b	113b4 <__gmon_start__@plt>
   119f4:	andeq	fp, r2, r8, lsl r6
   119f8:	andeq	r0, r0, ip, lsr #2
   119fc:	ldr	r0, [pc, #24]	; 11a1c <__assert_fail@plt+0x488>
   11a00:	ldr	r3, [pc, #24]	; 11a20 <__assert_fail@plt+0x48c>
   11a04:	cmp	r3, r0
   11a08:	bxeq	lr
   11a0c:	ldr	r3, [pc, #16]	; 11a24 <__assert_fail@plt+0x490>
   11a10:	cmp	r3, #0
   11a14:	bxeq	lr
   11a18:	bx	r3
   11a1c:	andeq	r1, r4, r8, lsl #17
   11a20:	andeq	r1, r4, r8, lsl #17
   11a24:	andeq	r0, r0, r0
   11a28:	ldr	r0, [pc, #36]	; 11a54 <__assert_fail@plt+0x4c0>
   11a2c:	ldr	r1, [pc, #36]	; 11a58 <__assert_fail@plt+0x4c4>
   11a30:	sub	r1, r1, r0
   11a34:	asr	r1, r1, #2
   11a38:	add	r1, r1, r1, lsr #31
   11a3c:	asrs	r1, r1, #1
   11a40:	bxeq	lr
   11a44:	ldr	r3, [pc, #16]	; 11a5c <__assert_fail@plt+0x4c8>
   11a48:	cmp	r3, #0
   11a4c:	bxeq	lr
   11a50:	bx	r3
   11a54:	andeq	r1, r4, r8, lsl #17
   11a58:	andeq	r1, r4, r8, lsl #17
   11a5c:	andeq	r0, r0, r0
   11a60:	push	{r4, lr}
   11a64:	ldr	r4, [pc, #24]	; 11a84 <__assert_fail@plt+0x4f0>
   11a68:	ldrb	r3, [r4]
   11a6c:	cmp	r3, #0
   11a70:	popne	{r4, pc}
   11a74:	bl	119fc <__assert_fail@plt+0x468>
   11a78:	mov	r3, #1
   11a7c:	strb	r3, [r4]
   11a80:	pop	{r4, pc}
   11a84:	muleq	r4, ip, r8
   11a88:	b	11a28 <__assert_fail@plt+0x494>
   11a8c:	cmp	r1, #0
   11a90:	beq	11acc <__assert_fail@plt+0x538>
   11a94:	push	{r4, r5, r6, lr}
   11a98:	add	r5, r0, r1
   11a9c:	ldr	r6, [pc, #48]	; 11ad4 <__assert_fail@plt+0x540>
   11aa0:	sub	r5, r5, #1
   11aa4:	sub	r4, r0, #1
   11aa8:	ldrb	r2, [r4, #1]!
   11aac:	mov	r1, r6
   11ab0:	mov	r0, #1
   11ab4:	bl	1148c <__printf_chk@plt>
   11ab8:	cmp	r4, r5
   11abc:	bne	11aa8 <__assert_fail@plt+0x514>
   11ac0:	mov	r0, #10
   11ac4:	pop	{r4, r5, r6, lr}
   11ac8:	b	11474 <putchar@plt>
   11acc:	mov	r0, #10
   11ad0:	b	11474 <putchar@plt>
   11ad4:	andeq	ip, r1, r4, ror #6
   11ad8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11adc:	mov	r8, r0
   11ae0:	ldr	ip, [sp, #32]
   11ae4:	mov	r6, r1
   11ae8:	cmp	ip, #32
   11aec:	mov	r5, r2
   11af0:	mov	r4, r3
   11af4:	ldr	r7, [sp, #36]	; 0x24
   11af8:	beq	11b44 <__assert_fail@plt+0x5b0>
   11afc:	cmp	ip, #48	; 0x30
   11b00:	movne	r9, #0
   11b04:	addeq	r5, r2, #8
   11b08:	moveq	r9, #2
   11b0c:	ldr	r1, [pc, #100]	; 11b78 <__assert_fail@plt+0x5e4>
   11b10:	mov	r2, r6
   11b14:	mov	r0, #1
   11b18:	bl	1148c <__printf_chk@plt>
   11b1c:	ldr	r1, [r5]
   11b20:	cmp	r1, #0
   11b24:	beq	11b50 <__assert_fail@plt+0x5bc>
   11b28:	mov	r2, r4
   11b2c:	str	r7, [sp, #32]
   11b30:	ldrb	r3, [r2], #3
   11b34:	mov	r0, r8
   11b38:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11b3c:	sub	r3, r3, #3
   11b40:	b	1a1a8 <__assert_fail@plt+0x8c14>
   11b44:	add	r5, r2, #4
   11b48:	mov	r9, #1
   11b4c:	b	11b0c <__assert_fail@plt+0x578>
   11b50:	ldr	r3, [pc, #36]	; 11b7c <__assert_fail@plt+0x5e8>
   11b54:	str	r6, [sp, #32]
   11b58:	lsl	r2, r7, #1
   11b5c:	ldr	r1, [r3, r9, lsl #2]
   11b60:	mov	r0, #1
   11b64:	str	r1, [sp, #36]	; 0x24
   11b68:	ldr	r3, [pc, #16]	; 11b80 <__assert_fail@plt+0x5ec>
   11b6c:	ldr	r1, [pc, #16]	; 11b84 <__assert_fail@plt+0x5f0>
   11b70:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11b74:	b	1148c <__printf_chk@plt>
   11b78:	andeq	pc, r1, ip, lsr #28
   11b7c:	andeq	fp, r1, r4, lsr #23
   11b80:	ldrdeq	r2, [r2], -r8
   11b84:	andeq	ip, r1, ip, ror #6
   11b88:	push	{r4, r5, r6, lr}
   11b8c:	mov	r4, r1
   11b90:	ldrb	r3, [r1, #1]
   11b94:	sub	sp, sp, #8
   11b98:	mov	r5, r0
   11b9c:	cmp	r3, #37	; 0x25
   11ba0:	mov	r6, r2
   11ba4:	beq	11bb4 <__assert_fail@plt+0x620>
   11ba8:	ldr	r0, [pc, #92]	; 11c0c <__assert_fail@plt+0x678>
   11bac:	bl	11378 <puts@plt>
   11bb0:	ldrb	r3, [r4, #1]
   11bb4:	ldrb	r1, [r4, #2]
   11bb8:	ldrb	r2, [r4]
   11bbc:	mov	r0, #1
   11bc0:	str	r1, [sp]
   11bc4:	ldr	r1, [pc, #68]	; 11c10 <__assert_fail@plt+0x67c>
   11bc8:	bl	1148c <__printf_chk@plt>
   11bcc:	ldrb	r3, [r4, #2]
   11bd0:	ldr	r2, [pc, #60]	; 11c14 <__assert_fail@plt+0x680>
   11bd4:	mov	ip, #5
   11bd8:	sub	r3, r3, #1
   11bdc:	clz	r3, r3
   11be0:	lsr	r3, r3, #5
   11be4:	str	r6, [sp]
   11be8:	add	r2, r2, r3, lsl #2
   11bec:	mov	r0, r5
   11bf0:	ldr	r1, [r2, #12]
   11bf4:	mov	r3, r4
   11bf8:	str	ip, [sp, #4]
   11bfc:	ldr	r2, [pc, #20]	; 11c18 <__assert_fail@plt+0x684>
   11c00:	bl	11ad8 <__assert_fail@plt+0x544>
   11c04:	add	sp, sp, #8
   11c08:	pop	{r4, r5, r6, pc}
   11c0c:	muleq	r1, ip, r3
   11c10:	andeq	ip, r1, r0, asr #7
   11c14:	andeq	fp, r1, r4, lsr #23
   11c18:	andeq	r3, r2, r0, lsr #3
   11c1c:	push	{r4, r5, lr}
   11c20:	sub	sp, sp, #68	; 0x44
   11c24:	ldrb	lr, [r0, #15]
   11c28:	ldrb	ip, [r0, #14]
   11c2c:	ldrb	r3, [r0, #13]
   11c30:	ldrb	r2, [r0, #12]
   11c34:	ldrb	r1, [r0, #11]
   11c38:	str	lr, [sp, #60]	; 0x3c
   11c3c:	ldrb	lr, [r0, #10]
   11c40:	str	ip, [sp, #56]	; 0x38
   11c44:	ldrb	ip, [r0, #9]
   11c48:	str	r3, [sp, #52]	; 0x34
   11c4c:	ldrb	r3, [r0, #8]
   11c50:	str	r2, [sp, #48]	; 0x30
   11c54:	ldrb	r2, [r0, #6]
   11c58:	str	r1, [sp, #44]	; 0x2c
   11c5c:	ldrb	r1, [r0, #7]
   11c60:	str	lr, [sp, #40]	; 0x28
   11c64:	ldrb	r5, [r0, #4]
   11c68:	str	ip, [sp, #36]	; 0x24
   11c6c:	ldrb	lr, [r0, #5]
   11c70:	str	r3, [sp, #32]
   11c74:	ldrb	r3, [r0]
   11c78:	str	r2, [sp, #28]
   11c7c:	ldrb	r2, [r0, #1]
   11c80:	str	r1, [sp, #24]
   11c84:	ldrb	r1, [r0, #2]
   11c88:	ldrb	ip, [r0, #3]
   11c8c:	ldr	r4, [pc, #52]	; 11cc8 <__assert_fail@plt+0x734>
   11c90:	str	r3, [sp, #12]
   11c94:	str	r2, [sp, #8]
   11c98:	str	r1, [sp, #4]
   11c9c:	mov	r0, r4
   11ca0:	ldr	r3, [pc, #36]	; 11ccc <__assert_fail@plt+0x738>
   11ca4:	mov	r2, #39	; 0x27
   11ca8:	mov	r1, #1
   11cac:	str	lr, [sp, #16]
   11cb0:	str	r5, [sp, #20]
   11cb4:	str	ip, [sp]
   11cb8:	bl	1145c <__sprintf_chk@plt>
   11cbc:	mov	r0, r4
   11cc0:	add	sp, sp, #68	; 0x44
   11cc4:	pop	{r4, r5, pc}
   11cc8:	andeq	r1, r4, r0, lsr #17
   11ccc:	andeq	ip, r1, r4, asr r4
   11cd0:	push	{r4, r5, r6, lr}
   11cd4:	mov	r5, r0
   11cd8:	mov	r4, r2
   11cdc:	mov	r0, #1
   11ce0:	mov	r2, r1
   11ce4:	ldr	r1, [pc, #76]	; 11d38 <__assert_fail@plt+0x7a4>
   11ce8:	bl	1148c <__printf_chk@plt>
   11cec:	ldrb	r3, [r5]
   11cf0:	cmp	r4, r3
   11cf4:	bcs	11d2c <__assert_fail@plt+0x798>
   11cf8:	sub	r4, r4, #1
   11cfc:	ldr	r6, [pc, #56]	; 11d3c <__assert_fail@plt+0x7a8>
   11d00:	add	r4, r5, r4
   11d04:	ldrb	r2, [r4, #1]
   11d08:	mov	r1, r6
   11d0c:	mov	r0, #1
   11d10:	bl	1148c <__printf_chk@plt>
   11d14:	ldrb	r2, [r5]
   11d18:	add	r3, r4, #2
   11d1c:	sub	r3, r3, r5
   11d20:	cmp	r2, r3
   11d24:	add	r4, r4, #1
   11d28:	bhi	11d04 <__assert_fail@plt+0x770>
   11d2c:	mov	r0, #10
   11d30:	pop	{r4, r5, r6, lr}
   11d34:	b	11474 <putchar@plt>
   11d38:	muleq	r1, ip, r4
   11d3c:	andeq	ip, r1, r4, ror #6
   11d40:	push	{r4, r5, r6, r7, r8, lr}
   11d44:	mov	r4, r1
   11d48:	ldrb	r3, [r1, #1]
   11d4c:	sub	sp, sp, #16
   11d50:	mov	r6, r0
   11d54:	cmp	r3, #36	; 0x24
   11d58:	mov	r5, r2
   11d5c:	bne	11dc0 <__assert_fail@plt+0x82c>
   11d60:	ldrb	r2, [r1]
   11d64:	cmp	r2, #2
   11d68:	bls	11f74 <__assert_fail@plt+0x9e0>
   11d6c:	ldrb	r1, [r4, #2]
   11d70:	mov	r0, #1
   11d74:	str	r1, [sp]
   11d78:	ldr	r1, [pc, #2292]	; 12674 <__assert_fail@plt+0x10e0>
   11d7c:	bl	1148c <__printf_chk@plt>
   11d80:	ldrb	r3, [r4, #2]
   11d84:	cmp	r3, #2
   11d88:	beq	11f28 <__assert_fail@plt+0x994>
   11d8c:	cmp	r3, #3
   11d90:	beq	11dfc <__assert_fail@plt+0x868>
   11d94:	cmp	r3, #1
   11d98:	beq	11dd4 <__assert_fail@plt+0x840>
   11d9c:	ldr	r1, [pc, #2260]	; 12678 <__assert_fail@plt+0x10e4>
   11da0:	mov	r0, #1
   11da4:	bl	1148c <__printf_chk@plt>
   11da8:	mov	r0, r4
   11dac:	ldrb	r1, [r0], #3
   11db0:	sub	r1, r1, #3
   11db4:	add	sp, sp, #16
   11db8:	pop	{r4, r5, r6, r7, r8, lr}
   11dbc:	b	11a8c <__assert_fail@plt+0x4f8>
   11dc0:	ldr	r0, [pc, #2228]	; 1267c <__assert_fail@plt+0x10e8>
   11dc4:	bl	11378 <puts@plt>
   11dc8:	ldrb	r2, [r4]
   11dcc:	ldrb	r3, [r4, #1]
   11dd0:	b	11d6c <__assert_fail@plt+0x7d8>
   11dd4:	mov	r2, #4
   11dd8:	str	r2, [sp, #4]
   11ddc:	str	r5, [sp]
   11de0:	mov	r3, r4
   11de4:	mov	r0, r6
   11de8:	ldr	r2, [pc, #2192]	; 12680 <__assert_fail@plt+0x10ec>
   11dec:	ldr	r1, [pc, #2192]	; 12684 <__assert_fail@plt+0x10f0>
   11df0:	bl	11ad8 <__assert_fail@plt+0x544>
   11df4:	add	sp, sp, #16
   11df8:	pop	{r4, r5, r6, r7, r8, pc}
   11dfc:	ldr	r0, [pc, #2180]	; 12688 <__assert_fail@plt+0x10f4>
   11e00:	bl	11378 <puts@plt>
   11e04:	ldrb	r3, [r4]
   11e08:	cmp	r3, #4
   11e0c:	bls	120c0 <__assert_fail@plt+0xb2c>
   11e10:	ldrh	r5, [r4, #3]
   11e14:	cmp	r5, #5
   11e18:	ble	11f88 <__assert_fail@plt+0x9f4>
   11e1c:	sub	r3, r5, #4096	; 0x1000
   11e20:	cmp	r3, #2
   11e24:	bhi	12178 <__assert_fail@plt+0xbe4>
   11e28:	lsl	r2, r5, #20
   11e2c:	ldr	r3, [pc, #2136]	; 1268c <__assert_fail@plt+0x10f8>
   11e30:	lsr	r2, r2, #20
   11e34:	add	r3, r3, r2, lsl #2
   11e38:	ldr	r3, [r3, #44]	; 0x2c
   11e3c:	mov	r2, r5
   11e40:	ldr	r1, [pc, #2120]	; 12690 <__assert_fail@plt+0x10fc>
   11e44:	mov	r0, #1
   11e48:	bl	1148c <__printf_chk@plt>
   11e4c:	ldr	r3, [pc, #2112]	; 12694 <__assert_fail@plt+0x1100>
   11e50:	cmp	r5, r3
   11e54:	bne	120cc <__assert_fail@plt+0xb38>
   11e58:	ldrb	r3, [r4]
   11e5c:	cmp	r3, #7
   11e60:	bls	12310 <__assert_fail@plt+0xd7c>
   11e64:	ldrh	r2, [r4, #5]
   11e68:	ldr	r1, [pc, #2088]	; 12698 <__assert_fail@plt+0x1104>
   11e6c:	mov	r0, #1
   11e70:	bl	1148c <__printf_chk@plt>
   11e74:	ldrb	r3, [r4, #5]
   11e78:	tst	r3, #1
   11e7c:	bne	12300 <__assert_fail@plt+0xd6c>
   11e80:	tst	r3, #2
   11e84:	bne	122f0 <__assert_fail@plt+0xd5c>
   11e88:	tst	r3, #4
   11e8c:	bne	122e0 <__assert_fail@plt+0xd4c>
   11e90:	tst	r3, #8
   11e94:	bne	122d0 <__assert_fail@plt+0xd3c>
   11e98:	tst	r3, #16
   11e9c:	bne	122c0 <__assert_fail@plt+0xd2c>
   11ea0:	tst	r3, #32
   11ea4:	bne	122b0 <__assert_fail@plt+0xd1c>
   11ea8:	tst	r3, #64	; 0x40
   11eac:	bne	122a0 <__assert_fail@plt+0xd0c>
   11eb0:	tst	r3, #128	; 0x80
   11eb4:	bne	12358 <__assert_fail@plt+0xdc4>
   11eb8:	ldr	r1, [pc, #2012]	; 1269c <__assert_fail@plt+0x1108>
   11ebc:	mov	r0, #1
   11ec0:	bl	1148c <__printf_chk@plt>
   11ec4:	ldrb	r3, [r4, #6]
   11ec8:	and	r3, r3, #3
   11ecc:	cmp	r3, #1
   11ed0:	beq	12364 <__assert_fail@plt+0xdd0>
   11ed4:	cmp	r3, #0
   11ed8:	beq	12428 <__assert_fail@plt+0xe94>
   11edc:	cmp	r3, #2
   11ee0:	bne	1219c <__assert_fail@plt+0xc08>
   11ee4:	ldr	r0, [pc, #1972]	; 126a0 <__assert_fail@plt+0x110c>
   11ee8:	bl	11378 <puts@plt>
   11eec:	ldrb	r2, [r4, #7]
   11ef0:	ldr	r1, [pc, #1964]	; 126a4 <__assert_fail@plt+0x1110>
   11ef4:	mov	r0, #1
   11ef8:	bl	1148c <__printf_chk@plt>
   11efc:	ldr	r1, [pc, #1956]	; 126a8 <__assert_fail@plt+0x1114>
   11f00:	mov	r0, #1
   11f04:	bl	1148c <__printf_chk@plt>
   11f08:	ldrb	r3, [r4, #7]
   11f0c:	lsr	r3, r3, #4
   11f10:	and	r3, r3, #3
   11f14:	cmp	r3, #1
   11f18:	bne	1213c <__assert_fail@plt+0xba8>
   11f1c:	ldr	r0, [pc, #1928]	; 126ac <__assert_fail@plt+0x1118>
   11f20:	bl	11378 <puts@plt>
   11f24:	b	12154 <__assert_fail@plt+0xbc0>
   11f28:	ldr	r0, [pc, #1920]	; 126b0 <__assert_fail@plt+0x111c>
   11f2c:	bl	11378 <puts@plt>
   11f30:	cmp	r5, #0
   11f34:	beq	11fc8 <__assert_fail@plt+0xa34>
   11f38:	cmp	r5, #32
   11f3c:	bne	11df4 <__assert_fail@plt+0x860>
   11f40:	ldrb	r2, [r4, #3]
   11f44:	ldr	r1, [pc, #1896]	; 126b4 <__assert_fail@plt+0x1120>
   11f48:	mov	r0, #1
   11f4c:	bl	1148c <__printf_chk@plt>
   11f50:	ldrb	r3, [r4, #3]
   11f54:	sub	r3, r3, #1
   11f58:	cmp	r3, #3
   11f5c:	ldrls	pc, [pc, r3, lsl #2]
   11f60:	b	11fa4 <__assert_fail@plt+0xa10>
   11f64:	andeq	r2, r1, r0, asr r2
   11f68:	andeq	r2, r1, r4, lsr #4
   11f6c:	andeq	r2, r1, r4, ror #3
   11f70:	andeq	r2, r1, r8, lsr #3
   11f74:	ldr	r0, [pc, #1852]	; 126b8 <__assert_fail@plt+0x1124>
   11f78:	bl	11378 <puts@plt>
   11f7c:	ldrb	r2, [r4]
   11f80:	ldrb	r3, [r4, #1]
   11f84:	b	11d6c <__assert_fail@plt+0x7d8>
   11f88:	ldr	r3, [pc, #1788]	; 1268c <__assert_fail@plt+0x10f8>
   11f8c:	mov	r2, r5
   11f90:	add	r5, r3, r5, lsl #2
   11f94:	ldr	r1, [pc, #1780]	; 12690 <__assert_fail@plt+0x10fc>
   11f98:	ldr	r3, [r5, #20]
   11f9c:	mov	r0, #1
   11fa0:	bl	1148c <__printf_chk@plt>
   11fa4:	ldr	r1, [pc, #1808]	; 126bc <__assert_fail@plt+0x1128>
   11fa8:	mov	r0, #1
   11fac:	bl	1148c <__printf_chk@plt>
   11fb0:	mov	r0, r4
   11fb4:	ldrb	r1, [r0], #4
   11fb8:	sub	r1, r1, #4
   11fbc:	add	sp, sp, #16
   11fc0:	pop	{r4, r5, r6, r7, r8, lr}
   11fc4:	b	11a8c <__assert_fail@plt+0x4f8>
   11fc8:	ldrb	r3, [r4]
   11fcc:	cmp	r3, #7
   11fd0:	bls	12288 <__assert_fail@plt+0xcf4>
   11fd4:	ldrb	r2, [r4, #3]
   11fd8:	ldr	r1, [pc, #1748]	; 126b4 <__assert_fail@plt+0x1120>
   11fdc:	mov	r0, #1
   11fe0:	bl	1148c <__printf_chk@plt>
   11fe4:	ldrb	r6, [r4, #3]
   11fe8:	cmp	r6, #2
   11fec:	beq	12370 <__assert_fail@plt+0xddc>
   11ff0:	cmp	r6, #3
   11ff4:	beq	12434 <__assert_fail@plt+0xea0>
   11ff8:	cmp	r6, #1
   11ffc:	bne	11fa4 <__assert_fail@plt+0xa10>
   12000:	ldr	r0, [pc, #1720]	; 126c0 <__assert_fail@plt+0x112c>
   12004:	bl	11378 <puts@plt>
   12008:	ldrb	r3, [r4, #7]
   1200c:	cmp	r3, #0
   12010:	beq	1253c <__assert_fail@plt+0xfa8>
   12014:	mov	r7, #3
   12018:	mov	r1, #8
   1201c:	ldrb	r2, [r4]
   12020:	smlabb	r7, r7, r3, r1
   12024:	cmp	r7, r2
   12028:	bhi	125c8 <__assert_fail@plt+0x1034>
   1202c:	mov	r5, r3
   12030:	ldrb	r2, [r4, #4]
   12034:	ldrb	r3, [r4, #5]
   12038:	ldrb	r0, [r4, #6]
   1203c:	ldr	r1, [pc, #1664]	; 126c4 <__assert_fail@plt+0x1130>
   12040:	str	r1, [sp, #8]
   12044:	stm	sp, {r0, r5}
   12048:	ldr	r1, [pc, #1656]	; 126c8 <__assert_fail@plt+0x1134>
   1204c:	mov	r0, #1
   12050:	bl	1148c <__printf_chk@plt>
   12054:	ldrb	r3, [r4, #7]
   12058:	cmp	r3, #0
   1205c:	beq	124dc <__assert_fail@plt+0xf48>
   12060:	ldr	r8, [pc, #1636]	; 126cc <__assert_fail@plt+0x1138>
   12064:	mov	r5, r4
   12068:	mov	r6, #0
   1206c:	ldrb	r1, [r5, #10]
   12070:	ldrb	r3, [r5, #9]
   12074:	ldrb	r0, [r5, #8]
   12078:	mov	r2, r6
   1207c:	lsl	r1, r1, #16
   12080:	orr	r3, r1, r3, lsl #8
   12084:	orr	r3, r3, r0
   12088:	mov	r1, r8
   1208c:	mov	r0, #1
   12090:	bl	1148c <__printf_chk@plt>
   12094:	ldrb	r3, [r4, #7]
   12098:	add	r6, r6, #1
   1209c:	add	r5, r5, #3
   120a0:	cmp	r3, r6
   120a4:	bhi	1206c <__assert_fail@plt+0xad8>
   120a8:	ldrb	r3, [r4]
   120ac:	cmp	r3, r7
   120b0:	bls	11df4 <__assert_fail@plt+0x860>
   120b4:	mov	r2, r7
   120b8:	mov	r0, r4
   120bc:	b	12168 <__assert_fail@plt+0xbd4>
   120c0:	ldr	r0, [pc, #1520]	; 126b8 <__assert_fail@plt+0x1124>
   120c4:	bl	11378 <puts@plt>
   120c8:	b	11e10 <__assert_fail@plt+0x87c>
   120cc:	add	r3, r3, #1
   120d0:	cmp	r5, r3
   120d4:	bne	11fa4 <__assert_fail@plt+0xa10>
   120d8:	ldrb	r3, [r4]
   120dc:	cmp	r3, #9
   120e0:	bls	1234c <__assert_fail@plt+0xdb8>
   120e4:	ldrb	r3, [r4, #9]
   120e8:	ldr	r2, [r4, #5]
   120ec:	ldr	r1, [pc, #1500]	; 126d0 <__assert_fail@plt+0x113c>
   120f0:	mov	r0, #1
   120f4:	bl	1148c <__printf_chk@plt>
   120f8:	ldrb	r3, [r4, #9]
   120fc:	tst	r3, #1
   12100:	bne	1233c <__assert_fail@plt+0xda8>
   12104:	tst	r3, #2
   12108:	bne	1232c <__assert_fail@plt+0xd98>
   1210c:	tst	r3, #4
   12110:	bne	1231c <__assert_fail@plt+0xd88>
   12114:	tst	r3, #8
   12118:	bne	12294 <__assert_fail@plt+0xd00>
   1211c:	ldr	r1, [pc, #1412]	; 126a8 <__assert_fail@plt+0x1114>
   12120:	mov	r0, #1
   12124:	bl	1148c <__printf_chk@plt>
   12128:	ldrb	r3, [r4, #9]
   1212c:	lsr	r3, r3, #4
   12130:	and	r3, r3, #3
   12134:	cmp	r3, #1
   12138:	beq	11f1c <__assert_fail@plt+0x988>
   1213c:	cmp	r3, #0
   12140:	beq	12270 <__assert_fail@plt+0xcdc>
   12144:	cmp	r3, #2
   12148:	beq	1227c <__assert_fail@plt+0xce8>
   1214c:	ldr	r0, [pc, #1408]	; 126d4 <__assert_fail@plt+0x1140>
   12150:	bl	11378 <puts@plt>
   12154:	ldrb	r3, [r4]
   12158:	cmp	r3, #8
   1215c:	movhi	r0, r4
   12160:	movhi	r2, #8
   12164:	bls	11df4 <__assert_fail@plt+0x860>
   12168:	ldr	r1, [pc, #1384]	; 126d8 <__assert_fail@plt+0x1144>
   1216c:	add	sp, sp, #16
   12170:	pop	{r4, r5, r6, r7, r8, lr}
   12174:	b	11cd0 <__assert_fail@plt+0x73c>
   12178:	sub	r3, r5, #8192	; 0x2000
   1217c:	cmp	r3, #6
   12180:	lslls	r2, r5, #20
   12184:	ldrls	r3, [pc, #1280]	; 1268c <__assert_fail@plt+0x10f8>
   12188:	lsrls	r2, r2, #20
   1218c:	ldrhi	r3, [pc, #1352]	; 126dc <__assert_fail@plt+0x1148>
   12190:	addls	r3, r3, r2, lsl #2
   12194:	ldrls	r3, [r3, #56]	; 0x38
   12198:	b	11e3c <__assert_fail@plt+0x8a8>
   1219c:	ldr	r0, [pc, #1340]	; 126e0 <__assert_fail@plt+0x114c>
   121a0:	bl	11378 <puts@plt>
   121a4:	b	11eec <__assert_fail@plt+0x958>
   121a8:	ldr	r0, [pc, #1332]	; 126e4 <__assert_fail@plt+0x1150>
   121ac:	bl	11378 <puts@plt>
   121b0:	ldrb	r3, [r4]
   121b4:	cmp	r3, #3
   121b8:	bls	12668 <__assert_fail@plt+0x10d4>
   121bc:	ldrb	r2, [r4, #3]
   121c0:	ldr	r1, [pc, #1312]	; 126e8 <__assert_fail@plt+0x1154>
   121c4:	mov	r0, #1
   121c8:	bl	1148c <__printf_chk@plt>
   121cc:	ldrb	r3, [r4]
   121d0:	cmp	r3, #4
   121d4:	bls	11df4 <__assert_fail@plt+0x860>
   121d8:	mov	r0, r4
   121dc:	mov	r2, #4
   121e0:	b	12168 <__assert_fail@plt+0xbd4>
   121e4:	ldr	r0, [pc, #1280]	; 126ec <__assert_fail@plt+0x1158>
   121e8:	bl	11378 <puts@plt>
   121ec:	ldrb	r3, [r4]
   121f0:	cmp	r3, #5
   121f4:	bls	12264 <__assert_fail@plt+0xcd0>
   121f8:	ldrb	r3, [r4, #5]
   121fc:	ldrb	r2, [r4, #4]
   12200:	ldr	r1, [pc, #1256]	; 126f0 <__assert_fail@plt+0x115c>
   12204:	mov	r0, #1
   12208:	bl	1148c <__printf_chk@plt>
   1220c:	ldrb	r3, [r4]
   12210:	cmp	r3, #6
   12214:	movhi	r0, r4
   12218:	movhi	r2, #6
   1221c:	bls	11df4 <__assert_fail@plt+0x860>
   12220:	b	12168 <__assert_fail@plt+0xbd4>
   12224:	ldr	r0, [pc, #1224]	; 126f4 <__assert_fail@plt+0x1160>
   12228:	bl	11378 <puts@plt>
   1222c:	ldrb	r3, [r4]
   12230:	cmp	r3, #7
   12234:	bls	1265c <__assert_fail@plt+0x10c8>
   12238:	ldrh	r3, [r4, #6]
   1223c:	ldrh	r2, [r4, #4]
   12240:	ldr	r1, [pc, #1200]	; 126f8 <__assert_fail@plt+0x1164>
   12244:	mov	r0, #1
   12248:	bl	1148c <__printf_chk@plt>
   1224c:	b	12154 <__assert_fail@plt+0xbc0>
   12250:	ldr	r0, [pc, #1128]	; 126c0 <__assert_fail@plt+0x112c>
   12254:	bl	11378 <puts@plt>
   12258:	ldrb	r3, [r4]
   1225c:	cmp	r3, #5
   12260:	bhi	121f8 <__assert_fail@plt+0xc64>
   12264:	ldr	r0, [pc, #1100]	; 126b8 <__assert_fail@plt+0x1124>
   12268:	bl	11378 <puts@plt>
   1226c:	b	121f8 <__assert_fail@plt+0xc64>
   12270:	ldr	r0, [pc, #1156]	; 126fc <__assert_fail@plt+0x1168>
   12274:	bl	11378 <puts@plt>
   12278:	b	12154 <__assert_fail@plt+0xbc0>
   1227c:	ldr	r0, [pc, #1148]	; 12700 <__assert_fail@plt+0x116c>
   12280:	bl	11378 <puts@plt>
   12284:	b	12154 <__assert_fail@plt+0xbc0>
   12288:	ldr	r0, [pc, #1064]	; 126b8 <__assert_fail@plt+0x1124>
   1228c:	bl	11378 <puts@plt>
   12290:	b	11fd4 <__assert_fail@plt+0xa40>
   12294:	ldr	r0, [pc, #1128]	; 12704 <__assert_fail@plt+0x1170>
   12298:	bl	11378 <puts@plt>
   1229c:	b	1211c <__assert_fail@plt+0xb88>
   122a0:	ldr	r0, [pc, #1120]	; 12708 <__assert_fail@plt+0x1174>
   122a4:	bl	11378 <puts@plt>
   122a8:	ldrb	r3, [r4, #5]
   122ac:	b	11eb0 <__assert_fail@plt+0x91c>
   122b0:	ldr	r0, [pc, #1108]	; 1270c <__assert_fail@plt+0x1178>
   122b4:	bl	11378 <puts@plt>
   122b8:	ldrb	r3, [r4, #5]
   122bc:	b	11ea8 <__assert_fail@plt+0x914>
   122c0:	ldr	r0, [pc, #1096]	; 12710 <__assert_fail@plt+0x117c>
   122c4:	bl	11378 <puts@plt>
   122c8:	ldrb	r3, [r4, #5]
   122cc:	b	11ea0 <__assert_fail@plt+0x90c>
   122d0:	ldr	r0, [pc, #1084]	; 12714 <__assert_fail@plt+0x1180>
   122d4:	bl	11378 <puts@plt>
   122d8:	ldrb	r3, [r4, #5]
   122dc:	b	11e98 <__assert_fail@plt+0x904>
   122e0:	ldr	r0, [pc, #1072]	; 12718 <__assert_fail@plt+0x1184>
   122e4:	bl	11378 <puts@plt>
   122e8:	ldrb	r3, [r4, #5]
   122ec:	b	11e90 <__assert_fail@plt+0x8fc>
   122f0:	ldr	r0, [pc, #1060]	; 1271c <__assert_fail@plt+0x1188>
   122f4:	bl	11378 <puts@plt>
   122f8:	ldrb	r3, [r4, #5]
   122fc:	b	11e88 <__assert_fail@plt+0x8f4>
   12300:	ldr	r0, [pc, #1048]	; 12720 <__assert_fail@plt+0x118c>
   12304:	bl	11378 <puts@plt>
   12308:	ldrb	r3, [r4, #5]
   1230c:	b	11e80 <__assert_fail@plt+0x8ec>
   12310:	ldr	r0, [pc, #928]	; 126b8 <__assert_fail@plt+0x1124>
   12314:	bl	11378 <puts@plt>
   12318:	b	11e64 <__assert_fail@plt+0x8d0>
   1231c:	ldr	r0, [pc, #1024]	; 12724 <__assert_fail@plt+0x1190>
   12320:	bl	11378 <puts@plt>
   12324:	ldrb	r3, [r4, #9]
   12328:	b	12114 <__assert_fail@plt+0xb80>
   1232c:	ldr	r0, [pc, #1012]	; 12728 <__assert_fail@plt+0x1194>
   12330:	bl	11378 <puts@plt>
   12334:	ldrb	r3, [r4, #9]
   12338:	b	1210c <__assert_fail@plt+0xb78>
   1233c:	ldr	r0, [pc, #1000]	; 1272c <__assert_fail@plt+0x1198>
   12340:	bl	11378 <puts@plt>
   12344:	ldrb	r3, [r4, #9]
   12348:	b	12104 <__assert_fail@plt+0xb70>
   1234c:	ldr	r0, [pc, #868]	; 126b8 <__assert_fail@plt+0x1124>
   12350:	bl	11378 <puts@plt>
   12354:	b	120e4 <__assert_fail@plt+0xb50>
   12358:	ldr	r0, [pc, #976]	; 12730 <__assert_fail@plt+0x119c>
   1235c:	bl	11378 <puts@plt>
   12360:	b	11eb8 <__assert_fail@plt+0x924>
   12364:	ldr	r0, [pc, #968]	; 12734 <__assert_fail@plt+0x11a0>
   12368:	bl	11378 <puts@plt>
   1236c:	b	11eec <__assert_fail@plt+0x958>
   12370:	ldr	r0, [pc, #892]	; 126f4 <__assert_fail@plt+0x1160>
   12374:	bl	11378 <puts@plt>
   12378:	ldrb	r3, [r4, #8]
   1237c:	cmp	r3, #0
   12380:	beq	1251c <__assert_fail@plt+0xf88>
   12384:	ldrb	r0, [r4, #7]
   12388:	mov	r7, #3
   1238c:	mov	r1, #9
   12390:	ldrb	r2, [r4]
   12394:	smlabb	r7, r7, r0, r1
   12398:	cmp	r2, r7
   1239c:	bcc	12630 <__assert_fail@plt+0x109c>
   123a0:	mov	r5, r3
   123a4:	ldrh	r2, [r4, #4]
   123a8:	ldrh	r3, [r4, #6]
   123ac:	ldr	r1, [pc, #784]	; 126c4 <__assert_fail@plt+0x1130>
   123b0:	str	r1, [sp, #4]
   123b4:	str	r5, [sp]
   123b8:	ldr	r1, [pc, #888]	; 12738 <__assert_fail@plt+0x11a4>
   123bc:	mov	r0, #1
   123c0:	bl	1148c <__printf_chk@plt>
   123c4:	ldrb	r3, [r4, #8]
   123c8:	cmp	r3, #0
   123cc:	beq	12584 <__assert_fail@plt+0xff0>
   123d0:	ldr	r8, [pc, #756]	; 126cc <__assert_fail@plt+0x1138>
   123d4:	mov	r5, r4
   123d8:	mov	r6, #0
   123dc:	ldrb	r1, [r5, #11]
   123e0:	ldrb	r3, [r5, #10]
   123e4:	ldrb	r0, [r5, #9]
   123e8:	mov	r2, r6
   123ec:	lsl	r1, r1, #16
   123f0:	orr	r3, r1, r3, lsl #8
   123f4:	orr	r3, r3, r0
   123f8:	mov	r1, r8
   123fc:	mov	r0, #1
   12400:	bl	1148c <__printf_chk@plt>
   12404:	ldrb	r3, [r4, #8]
   12408:	add	r6, r6, #1
   1240c:	add	r5, r5, #3
   12410:	cmp	r3, r6
   12414:	bhi	123dc <__assert_fail@plt+0xe48>
   12418:	ldrb	r3, [r4]
   1241c:	cmp	r7, r3
   12420:	bcs	11df4 <__assert_fail@plt+0x860>
   12424:	b	120b4 <__assert_fail@plt+0xb20>
   12428:	ldr	r0, [pc, #780]	; 1273c <__assert_fail@plt+0x11a8>
   1242c:	bl	11378 <puts@plt>
   12430:	b	11eec <__assert_fail@plt+0x958>
   12434:	ldr	r0, [pc, #688]	; 126ec <__assert_fail@plt+0x1158>
   12438:	bl	11378 <puts@plt>
   1243c:	ldrb	r3, [r4, #7]
   12440:	cmp	r3, #0
   12444:	beq	12560 <__assert_fail@plt+0xfcc>
   12448:	mov	r7, #8
   1244c:	ldrb	r2, [r4]
   12450:	smlabb	r7, r6, r3, r7
   12454:	cmp	r7, r2
   12458:	bhi	125fc <__assert_fail@plt+0x1068>
   1245c:	mov	r5, r3
   12460:	ldrb	r2, [r4, #4]
   12464:	ldrb	r3, [r4, #5]
   12468:	ldrb	r0, [r4, #6]
   1246c:	ldr	r1, [pc, #592]	; 126c4 <__assert_fail@plt+0x1130>
   12470:	str	r1, [sp, #8]
   12474:	stm	sp, {r0, r5}
   12478:	ldr	r1, [pc, #584]	; 126c8 <__assert_fail@plt+0x1134>
   1247c:	mov	r0, #1
   12480:	bl	1148c <__printf_chk@plt>
   12484:	ldrb	r3, [r4, #7]
   12488:	cmp	r3, #0
   1248c:	beq	124dc <__assert_fail@plt+0xf48>
   12490:	ldr	r8, [pc, #564]	; 126cc <__assert_fail@plt+0x1138>
   12494:	mov	r5, r4
   12498:	mov	r6, #0
   1249c:	ldrb	r1, [r5, #10]
   124a0:	ldrb	r3, [r5, #9]
   124a4:	ldrb	r0, [r5, #8]
   124a8:	mov	r2, r6
   124ac:	lsl	r1, r1, #16
   124b0:	orr	r3, r1, r3, lsl #8
   124b4:	orr	r3, r3, r0
   124b8:	mov	r1, r8
   124bc:	mov	r0, #1
   124c0:	bl	1148c <__printf_chk@plt>
   124c4:	ldrb	r3, [r4, #7]
   124c8:	add	r6, r6, #1
   124cc:	add	r5, r5, #3
   124d0:	cmp	r3, r6
   124d4:	bhi	1249c <__assert_fail@plt+0xf08>
   124d8:	b	120a8 <__assert_fail@plt+0xb14>
   124dc:	ldrb	r3, [r4, #13]
   124e0:	ldrb	r1, [r4, #12]
   124e4:	ldrb	r2, [r4, #10]
   124e8:	ldrb	ip, [r4, #9]
   124ec:	lsl	r3, r3, #16
   124f0:	ldrb	r0, [r4, #11]
   124f4:	orr	r3, r3, r1, lsl #8
   124f8:	ldrb	r1, [r4, #8]
   124fc:	lsl	r2, r2, #16
   12500:	orr	r2, r2, ip, lsl #8
   12504:	orr	r3, r3, r0
   12508:	orr	r2, r2, r1
   1250c:	mov	r0, #1
   12510:	ldr	r1, [pc, #552]	; 12740 <__assert_fail@plt+0x11ac>
   12514:	bl	1148c <__printf_chk@plt>
   12518:	b	120a8 <__assert_fail@plt+0xb14>
   1251c:	ldrb	r3, [r4]
   12520:	cmp	r3, #14
   12524:	bls	1262c <__assert_fail@plt+0x1098>
   12528:	ldrh	r2, [r4, #4]
   1252c:	ldrh	r3, [r4, #6]
   12530:	mov	r7, #15
   12534:	ldr	r1, [pc, #520]	; 12744 <__assert_fail@plt+0x11b0>
   12538:	b	123b0 <__assert_fail@plt+0xe1c>
   1253c:	ldrb	r3, [r4]
   12540:	cmp	r3, #13
   12544:	bls	125c4 <__assert_fail@plt+0x1030>
   12548:	ldrb	r2, [r4, #4]
   1254c:	ldrb	r3, [r4, #5]
   12550:	ldrb	r0, [r4, #6]
   12554:	mov	r7, #14
   12558:	ldr	r1, [pc, #484]	; 12744 <__assert_fail@plt+0x11b0>
   1255c:	b	12040 <__assert_fail@plt+0xaac>
   12560:	ldrb	r3, [r4]
   12564:	cmp	r3, #13
   12568:	bls	125f8 <__assert_fail@plt+0x1064>
   1256c:	ldrb	r2, [r4, #4]
   12570:	ldrb	r3, [r4, #5]
   12574:	ldrb	r0, [r4, #6]
   12578:	mov	r7, #14
   1257c:	ldr	r1, [pc, #448]	; 12744 <__assert_fail@plt+0x11b0>
   12580:	b	12470 <__assert_fail@plt+0xedc>
   12584:	ldrb	r3, [r4, #14]
   12588:	ldrb	r1, [r4, #13]
   1258c:	ldrb	r2, [r4, #11]
   12590:	ldrb	ip, [r4, #10]
   12594:	lsl	r3, r3, #16
   12598:	ldrb	r0, [r4, #12]
   1259c:	orr	r3, r3, r1, lsl #8
   125a0:	ldrb	r1, [r4, #9]
   125a4:	lsl	r2, r2, #16
   125a8:	orr	r2, r2, ip, lsl #8
   125ac:	orr	r3, r3, r0
   125b0:	orr	r2, r2, r1
   125b4:	mov	r0, #1
   125b8:	ldr	r1, [pc, #384]	; 12740 <__assert_fail@plt+0x11ac>
   125bc:	bl	1148c <__printf_chk@plt>
   125c0:	b	12418 <__assert_fail@plt+0xe84>
   125c4:	mov	r7, #14
   125c8:	ldr	r0, [pc, #232]	; 126b8 <__assert_fail@plt+0x1124>
   125cc:	bl	11378 <puts@plt>
   125d0:	ldrb	r0, [r4, #7]
   125d4:	ldr	ip, [pc, #360]	; 12744 <__assert_fail@plt+0x11b0>
   125d8:	ldr	r1, [pc, #228]	; 126c4 <__assert_fail@plt+0x1130>
   125dc:	cmp	r0, #0
   125e0:	movne	r5, r0
   125e4:	ldrb	r2, [r4, #4]
   125e8:	ldrb	r3, [r4, #5]
   125ec:	ldrb	r0, [r4, #6]
   125f0:	moveq	r1, ip
   125f4:	b	12040 <__assert_fail@plt+0xaac>
   125f8:	mov	r7, #14
   125fc:	ldr	r0, [pc, #180]	; 126b8 <__assert_fail@plt+0x1124>
   12600:	bl	11378 <puts@plt>
   12604:	ldrb	r0, [r4, #7]
   12608:	ldr	ip, [pc, #308]	; 12744 <__assert_fail@plt+0x11b0>
   1260c:	ldr	r1, [pc, #176]	; 126c4 <__assert_fail@plt+0x1130>
   12610:	cmp	r0, #0
   12614:	movne	r5, r0
   12618:	ldrb	r2, [r4, #4]
   1261c:	ldrb	r3, [r4, #5]
   12620:	ldrb	r0, [r4, #6]
   12624:	moveq	r1, ip
   12628:	b	12470 <__assert_fail@plt+0xedc>
   1262c:	mov	r7, #15
   12630:	ldr	r0, [pc, #128]	; 126b8 <__assert_fail@plt+0x1124>
   12634:	bl	11378 <puts@plt>
   12638:	ldrb	r3, [r4, #8]
   1263c:	ldr	r0, [pc, #256]	; 12744 <__assert_fail@plt+0x11b0>
   12640:	ldr	r1, [pc, #124]	; 126c4 <__assert_fail@plt+0x1130>
   12644:	cmp	r3, #0
   12648:	movne	r5, r3
   1264c:	ldrh	r2, [r4, #4]
   12650:	ldrh	r3, [r4, #6]
   12654:	moveq	r1, r0
   12658:	b	123b0 <__assert_fail@plt+0xe1c>
   1265c:	ldr	r0, [pc, #84]	; 126b8 <__assert_fail@plt+0x1124>
   12660:	bl	11378 <puts@plt>
   12664:	b	12238 <__assert_fail@plt+0xca4>
   12668:	ldr	r0, [pc, #72]	; 126b8 <__assert_fail@plt+0x1124>
   1266c:	bl	11378 <puts@plt>
   12670:	b	121bc <__assert_fail@plt+0xc28>
   12674:	andeq	ip, r1, r0, lsl #10
   12678:	andeq	ip, r1, ip, ror #22
   1267c:	muleq	r1, ip, r3
   12680:	andeq	r3, r2, r0, ror #7
   12684:	andeq	ip, r1, ip, lsl #11
   12688:	andeq	ip, r1, r8, lsr r8
   1268c:	andeq	fp, r1, r4, lsr #23
   12690:	andeq	ip, r1, ip, asr #16
   12694:	andeq	r1, r0, r1
   12698:	andeq	ip, r1, r0, ror r8
   1269c:	andeq	ip, r1, r0, lsl #19
   126a0:	andeq	ip, r1, r8, asr #19
   126a4:	strdeq	ip, [r1], -r0
   126a8:	andeq	ip, r1, r8, lsl sl
   126ac:	andeq	ip, r1, r4, asr sl
   126b0:	muleq	r1, r8, r5
   126b4:	andeq	ip, r1, r8, lsr #11
   126b8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   126bc:	andeq	ip, r1, ip, asr #14
   126c0:	andeq	ip, r1, ip, asr #11
   126c4:	andeq	ip, r1, r4, asr #9
   126c8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   126cc:	andeq	ip, r1, r0, lsr #13
   126d0:	ldrdeq	ip, [r1], -r0
   126d4:	andeq	ip, r1, r0, lsr #21
   126d8:	andeq	ip, r1, r8, lsl #31
   126dc:	ldrdeq	ip, [r1], -r0
   126e0:	ldrdeq	ip, [r1], -r4
   126e4:	andeq	ip, r1, r0, lsl #16
   126e8:	andeq	ip, r1, r4, lsl r8
   126ec:	andeq	ip, r1, r8, lsr r7
   126f0:	andeq	ip, r1, r8, ror r7
   126f4:	andeq	ip, r1, r0, asr #13
   126f8:			; <UNDEFINED> instruction: 0x0001c7bc
   126fc:	andeq	ip, r1, r4, asr #20
   12700:	andeq	ip, r1, r0, ror sl
   12704:	andeq	ip, r1, r4, asr fp
   12708:	andeq	ip, r1, r8, lsr #18
   1270c:	andeq	ip, r1, r8, lsl #18
   12710:	andeq	ip, r1, r8, ror #17
   12714:	ldrdeq	ip, [r1], -r0
   12718:			; <UNDEFINED> instruction: 0x0001c8bc
   1271c:	andeq	ip, r1, r8, lsr #17
   12720:	muleq	r1, r4, r8
   12724:	andeq	ip, r1, ip, lsr fp
   12728:	andeq	ip, r1, r8, lsr #22
   1272c:	andeq	ip, r1, r4, lsl fp
   12730:	andeq	ip, r1, r4, asr r9
   12734:			; <UNDEFINED> instruction: 0x0001c9b8
   12738:	ldrdeq	ip, [r1], -r4
   1273c:	andeq	ip, r1, r8, lsr #19
   12740:	andeq	ip, r1, r0, ror #12
   12744:			; <UNDEFINED> instruction: 0x0001c4b8
   12748:	cmp	r1, #2
   1274c:	bgt	1276c <__assert_fail@plt+0x11d8>
   12750:	b	12790 <__assert_fail@plt+0x11fc>
   12754:	cmp	r3, r1
   12758:	sub	r1, r1, r3
   1275c:	bgt	12790 <__assert_fail@plt+0x11fc>
   12760:	cmp	r1, #2
   12764:	add	r0, r0, r3
   12768:	ble	12790 <__assert_fail@plt+0x11fc>
   1276c:	ldrb	r3, [r0]
   12770:	cmp	r3, #3
   12774:	bne	12754 <__assert_fail@plt+0x11c0>
   12778:	ldrb	r2, [r0, #1]
   1277c:	cmp	r2, #9
   12780:	bxeq	lr
   12784:	cmp	r3, r1
   12788:	sub	r1, r1, r3
   1278c:	ble	12760 <__assert_fail@plt+0x11cc>
   12790:	mov	r0, #0
   12794:	bx	lr
   12798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1279c:	sub	sp, sp, #8448	; 0x2100
   127a0:	ldr	r3, [pc, #1944]	; 12f40 <__assert_fail@plt+0x19ac>
   127a4:	sub	sp, sp, #52	; 0x34
   127a8:	ldrb	r4, [r2, #1]
   127ac:	mov	fp, r2
   127b0:	add	r2, sp, #8448	; 0x2100
   127b4:	ldr	r3, [r3]
   127b8:	add	r2, r2, #44	; 0x2c
   127bc:	cmp	r4, #33	; 0x21
   127c0:	str	r0, [sp, #40]	; 0x28
   127c4:	str	r1, [sp, #44]	; 0x2c
   127c8:	str	r3, [r2]
   127cc:	bne	129f8 <__assert_fail@plt+0x1464>
   127d0:	ldrb	r1, [fp, #5]
   127d4:	mov	r3, #3
   127d8:	mov	r2, #5
   127dc:	ldrb	r6, [fp]
   127e0:	smlabb	r3, r3, r1, r2
   127e4:	cmp	r3, r6
   127e8:	bge	12e5c <__assert_fail@plt+0x18c8>
   127ec:	ldrb	r5, [fp, #4]
   127f0:	ldrb	r7, [fp, #3]
   127f4:	ldrb	r8, [fp, #2]
   127f8:	mov	r0, r5
   127fc:	bl	1ab8c <__assert_fail@plt+0x95f8>
   12800:	ldrb	r1, [fp, #5]
   12804:	ldr	ip, [pc, #1848]	; 12f44 <__assert_fail@plt+0x19b0>
   12808:	mov	r3, r4
   1280c:	str	r1, [sp, #16]
   12810:	str	r5, [sp, #8]
   12814:	stm	sp, {r7, r8}
   12818:	mov	r2, r6
   1281c:	ldr	r1, [pc, #1828]	; 12f48 <__assert_fail@plt+0x19b4>
   12820:	cmp	r0, #0
   12824:	moveq	r0, ip
   12828:	str	r0, [sp, #12]
   1282c:	mov	r0, #1
   12830:	bl	1148c <__printf_chk@plt>
   12834:	ldrb	r3, [fp, #5]
   12838:	cmp	r3, #0
   1283c:	beq	12f20 <__assert_fail@plt+0x198c>
   12840:	ldr	r6, [pc, #1796]	; 12f4c <__assert_fail@plt+0x19b8>
   12844:	mov	r4, fp
   12848:	mov	r5, #0
   1284c:	ldrb	r7, [r4, #6]
   12850:	add	r5, r5, #1
   12854:	add	r4, r4, #3
   12858:	mov	r0, r7
   1285c:	bl	1ab1c <__assert_fail@plt+0x9588>
   12860:	ldrb	ip, [r4, #5]
   12864:	ldrb	r3, [r4, #4]
   12868:	mov	r2, r7
   1286c:	mov	r1, r6
   12870:	orr	r3, r3, ip, lsl #8
   12874:	str	r3, [sp]
   12878:	mov	r3, r0
   1287c:	mov	r0, #1
   12880:	bl	1148c <__printf_chk@plt>
   12884:	ldrb	r2, [fp, #5]
   12888:	cmp	r5, r2
   1288c:	bcc	1284c <__assert_fail@plt+0x12b8>
   12890:	mov	r3, #3
   12894:	mov	r1, #6
   12898:	smlabb	r2, r3, r2, r1
   1289c:	ldrb	r3, [fp]
   128a0:	cmp	r3, r2
   128a4:	bls	128b4 <__assert_fail@plt+0x1320>
   128a8:	ldr	r1, [pc, #1696]	; 12f50 <__assert_fail@plt+0x19bc>
   128ac:	mov	r0, fp
   128b0:	bl	11cd0 <__assert_fail@plt+0x73c>
   128b4:	ldr	r3, [sp, #40]	; 0x28
   128b8:	cmp	r3, #0
   128bc:	beq	12a0c <__assert_fail@plt+0x1478>
   128c0:	ldrb	r2, [fp, #5]
   128c4:	cmp	r2, #0
   128c8:	beq	1295c <__assert_fail@plt+0x13c8>
   128cc:	mov	r3, #0
   128d0:	mov	sl, fp
   128d4:	str	fp, [sp, #48]	; 0x30
   128d8:	mov	fp, r3
   128dc:	b	1291c <__assert_fail@plt+0x1388>
   128e0:	ldr	r9, [sp, #44]	; 0x2c
   128e4:	ldr	r8, [sp, #40]	; 0x28
   128e8:	ldrb	r1, [r9]
   128ec:	mov	r0, r8
   128f0:	bl	11510 <libusb_claim_interface@plt>
   128f4:	cmp	r0, #0
   128f8:	beq	12984 <__assert_fail@plt+0x13f0>
   128fc:	ldr	r0, [pc, #1616]	; 12f54 <__assert_fail@plt+0x19c0>
   12900:	bl	11378 <puts@plt>
   12904:	ldr	r3, [sp, #48]	; 0x30
   12908:	ldrb	r2, [r3, #5]
   1290c:	add	fp, fp, #1
   12910:	cmp	fp, r2
   12914:	add	sl, sl, #3
   12918:	bcs	1295c <__assert_fail@plt+0x13c8>
   1291c:	ldrb	r3, [sl, #6]
   12920:	cmp	r3, #34	; 0x22
   12924:	bne	1290c <__assert_fail@plt+0x1378>
   12928:	ldrb	r3, [sl, #8]
   1292c:	ldrb	r4, [sl, #7]
   12930:	orr	r4, r4, r3, lsl #8
   12934:	cmp	r4, #8192	; 0x2000
   12938:	ble	128e0 <__assert_fail@plt+0x134c>
   1293c:	ldr	r0, [pc, #1556]	; 12f58 <__assert_fail@plt+0x19c4>
   12940:	bl	11378 <puts@plt>
   12944:	ldr	r3, [sp, #48]	; 0x30
   12948:	add	fp, fp, #1
   1294c:	add	sl, sl, #3
   12950:	ldrb	r2, [r3, #5]
   12954:	cmp	fp, r2
   12958:	bcc	1291c <__assert_fail@plt+0x1388>
   1295c:	add	r3, sp, #8448	; 0x2100
   12960:	add	r3, r3, #44	; 0x2c
   12964:	ldr	r2, [r3]
   12968:	ldr	r3, [pc, #1488]	; 12f40 <__assert_fail@plt+0x19ac>
   1296c:	ldr	r3, [r3]
   12970:	cmp	r2, r3
   12974:	bne	12f28 <__assert_fail@plt+0x1994>
   12978:	add	sp, sp, #8448	; 0x2100
   1297c:	add	sp, sp, #52	; 0x34
   12980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12984:	cmp	r4, #0
   12988:	beq	129dc <__assert_fail@plt+0x1448>
   1298c:	ldr	r7, [pc, #1480]	; 12f5c <__assert_fail@plt+0x19c8>
   12990:	uxth	r6, r4
   12994:	mov	r5, #4
   12998:	ldrb	r3, [r9]
   1299c:	add	r2, sp, #300	; 0x12c
   129a0:	str	r2, [sp, #4]
   129a4:	str	r3, [sp]
   129a8:	strd	r6, [sp, #8]
   129ac:	mov	r3, #8704	; 0x2200
   129b0:	mov	r2, #6
   129b4:	mov	r1, #129	; 0x81
   129b8:	mov	r0, r8
   129bc:	bl	11534 <libusb_control_transfer@plt>
   129c0:	cmp	r4, r0
   129c4:	bls	12a18 <__assert_fail@plt+0x1484>
   129c8:	subs	r5, r5, #1
   129cc:	bne	12998 <__assert_fail@plt+0x1404>
   129d0:	cmp	r0, #0
   129d4:	mov	r5, r0
   129d8:	bne	12e70 <__assert_fail@plt+0x18dc>
   129dc:	ldr	r3, [sp, #44]	; 0x2c
   129e0:	ldr	r0, [sp, #40]	; 0x28
   129e4:	ldrb	r1, [r3]
   129e8:	bl	112c4 <libusb_release_interface@plt>
   129ec:	ldr	r3, [sp, #48]	; 0x30
   129f0:	ldrb	r2, [r3, #5]
   129f4:	b	1290c <__assert_fail@plt+0x1378>
   129f8:	ldr	r0, [pc, #1376]	; 12f60 <__assert_fail@plt+0x19cc>
   129fc:	bl	11378 <puts@plt>
   12a00:	ldrb	r6, [fp]
   12a04:	ldrb	r4, [fp, #1]
   12a08:	b	127ec <__assert_fail@plt+0x1258>
   12a0c:	ldr	r0, [pc, #1344]	; 12f54 <__assert_fail@plt+0x19c0>
   12a10:	bl	11378 <puts@plt>
   12a14:	b	1295c <__assert_fail@plt+0x13c8>
   12a18:	ldr	r3, [pc, #1348]	; 12f64 <__assert_fail@plt+0x19d0>
   12a1c:	mov	r5, r0
   12a20:	ldr	lr, [pc, #1344]	; 12f68 <__assert_fail@plt+0x19d4>
   12a24:	ldm	r3, {r0, r1, r2, r3}
   12a28:	add	r4, sp, #72	; 0x48
   12a2c:	add	ip, sp, #304	; 0x130
   12a30:	sub	ip, ip, #36	; 0x24
   12a34:	stm	r4, {r0, r1, r2, r3}
   12a38:	ldm	lr!, {r0, r1, r2, r3}
   12a3c:	stmia	ip!, {r0, r1, r2, r3}
   12a40:	ldm	lr, {r0, r1, r2, r3}
   12a44:	stmia	ip!, {r0, r1, r2}
   12a48:	mov	r2, r5
   12a4c:	ldr	r1, [pc, #1304]	; 12f6c <__assert_fail@plt+0x19d8>
   12a50:	mov	r0, #1
   12a54:	strb	r3, [ip]
   12a58:	bl	1148c <__printf_chk@plt>
   12a5c:	cmp	r5, #0
   12a60:	ble	129dc <__assert_fail@plt+0x1448>
   12a64:	ldr	r9, [pc, #1284]	; 12f70 <__assert_fail@plt+0x19dc>
   12a68:	str	fp, [sp, #56]	; 0x38
   12a6c:	str	r9, [sp, #52]	; 0x34
   12a70:	mov	r4, #0
   12a74:	mov	fp, r5
   12a78:	str	sl, [sp, #60]	; 0x3c
   12a7c:	b	12ae8 <__assert_fail@plt+0x1554>
   12a80:	cmp	r5, #100	; 0x64
   12a84:	bne	12cf4 <__assert_fail@plt+0x1760>
   12a88:	add	r2, sp, #268	; 0x10c
   12a8c:	ldr	r1, [pc, #1248]	; 12f74 <__assert_fail@plt+0x19e0>
   12a90:	mov	r0, #1
   12a94:	bl	1148c <__printf_chk@plt>
   12a98:	ldr	lr, [pc, #1240]	; 12f78 <__assert_fail@plt+0x19e4>
   12a9c:	add	ip, sp, #88	; 0x58
   12aa0:	and	r6, r9, #15
   12aa4:	ldm	lr!, {r0, r1, r2, r3}
   12aa8:	stmia	ip!, {r0, r1, r2, r3}
   12aac:	mov	r1, lr
   12ab0:	mov	r2, #160	; 0xa0
   12ab4:	ldr	r3, [r1], #4
   12ab8:	add	r0, sp, #108	; 0x6c
   12abc:	str	r3, [ip]
   12ac0:	bl	112ac <memcpy@plt>
   12ac4:	cmp	r6, #4
   12ac8:	bls	12d90 <__assert_fail@plt+0x17fc>
   12acc:	cmp	r6, #15
   12ad0:	ldreq	r0, [pc, #1188]	; 12f7c <__assert_fail@plt+0x19e8>
   12ad4:	ldrne	r0, [pc, #1188]	; 12f80 <__assert_fail@plt+0x19ec>
   12ad8:	bl	11378 <puts@plt>
   12adc:	add	r4, r4, sl
   12ae0:	cmp	fp, r4
   12ae4:	ble	12be8 <__assert_fail@plt+0x1654>
   12ae8:	add	r3, sp, #300	; 0x12c
   12aec:	add	r6, r3, r4
   12af0:	ldrb	r5, [r3, r4]
   12af4:	add	r2, sp, #304	; 0x130
   12af8:	add	sl, r4, #1
   12afc:	and	r3, r5, #12
   12b00:	and	r4, r5, #3
   12b04:	add	r3, r2, r3
   12b08:	bic	r5, r5, #3
   12b0c:	cmp	r4, #3
   12b10:	ldr	r7, [r3, #-232]	; 0xffffff18
   12b14:	uxtb	r0, r5
   12b18:	beq	12d00 <__assert_fail@plt+0x176c>
   12b1c:	bl	1ab2c <__assert_fail@plt+0x9598>
   12b20:	mov	r2, r7
   12b24:	ldr	r1, [pc, #1112]	; 12f84 <__assert_fail@plt+0x19f0>
   12b28:	mov	r3, r0
   12b2c:	mov	r0, #1
   12b30:	bl	1148c <__printf_chk@plt>
   12b34:	cmp	r4, #0
   12b38:	bne	12d1c <__assert_fail@plt+0x1788>
   12b3c:	ldr	r1, [pc, #1092]	; 12f88 <__assert_fail@plt+0x19f4>
   12b40:	mov	r0, #1
   12b44:	bl	1148c <__printf_chk@plt>
   12b48:	mov	r0, #10
   12b4c:	bl	11474 <putchar@plt>
   12b50:	cmp	r5, #84	; 0x54
   12b54:	beq	12d78 <__assert_fail@plt+0x17e4>
   12b58:	bls	12ba8 <__assert_fail@plt+0x1614>
   12b5c:	cmp	r5, #144	; 0x90
   12b60:	beq	12bfc <__assert_fail@plt+0x1668>
   12b64:	bls	12a80 <__assert_fail@plt+0x14ec>
   12b68:	cmp	r5, #160	; 0xa0
   12b6c:	bne	12bf4 <__assert_fail@plt+0x1660>
   12b70:	add	r2, sp, #268	; 0x10c
   12b74:	ldr	r1, [pc, #1016]	; 12f74 <__assert_fail@plt+0x19e0>
   12b78:	mov	r0, #1
   12b7c:	bl	1148c <__printf_chk@plt>
   12b80:	cmp	r9, #6
   12b84:	ldrls	pc, [pc, r9, lsl #2]
   12b88:	b	12f2c <__assert_fail@plt+0x1998>
   12b8c:	andeq	r2, r1, r4, lsl #30
   12b90:	strdeq	r2, [r1], -r8
   12b94:	andeq	r2, r1, r0, ror #29
   12b98:	ldrdeq	r2, [r1], -r4
   12b9c:	andeq	r2, r1, r8, asr #29
   12ba0:			; <UNDEFINED> instruction: 0x00012ebc
   12ba4:	andeq	r2, r1, ip, ror #29
   12ba8:	cmp	r5, #8
   12bac:	beq	12cd0 <__assert_fail@plt+0x173c>
   12bb0:	bhi	12cc0 <__assert_fail@plt+0x172c>
   12bb4:	cmp	r5, #4
   12bb8:	bne	12adc <__assert_fail@plt+0x1548>
   12bbc:	mov	r0, r9
   12bc0:	bl	1ab3c <__assert_fail@plt+0x95a8>
   12bc4:	add	r4, r4, sl
   12bc8:	add	r2, sp, #268	; 0x10c
   12bcc:	ldr	r1, [pc, #952]	; 12f8c <__assert_fail@plt+0x19f8>
   12bd0:	mov	r3, r0
   12bd4:	mov	r0, #1
   12bd8:	bl	1148c <__printf_chk@plt>
   12bdc:	cmp	fp, r4
   12be0:	str	r9, [sp, #52]	; 0x34
   12be4:	bgt	12ae8 <__assert_fail@plt+0x1554>
   12be8:	ldr	fp, [sp, #56]	; 0x38
   12bec:	ldr	sl, [sp, #60]	; 0x3c
   12bf0:	b	129dc <__assert_fail@plt+0x1448>
   12bf4:	cmp	r5, #176	; 0xb0
   12bf8:	bne	12adc <__assert_fail@plt+0x1548>
   12bfc:	ldr	r2, [pc, #908]	; 12f90 <__assert_fail@plt+0x19fc>
   12c00:	tst	r9, #1
   12c04:	ldr	r1, [pc, #904]	; 12f94 <__assert_fail@plt+0x1a00>
   12c08:	ldr	r3, [pc, #904]	; 12f98 <__assert_fail@plt+0x1a04>
   12c0c:	movne	r3, r2
   12c10:	tst	r9, #2
   12c14:	ldr	r2, [pc, #896]	; 12f9c <__assert_fail@plt+0x1a08>
   12c18:	ldr	ip, [pc, #896]	; 12fa0 <__assert_fail@plt+0x1a0c>
   12c1c:	moveq	ip, r1
   12c20:	tst	r9, #4
   12c24:	ldr	r0, [pc, #888]	; 12fa4 <__assert_fail@plt+0x1a10>
   12c28:	moveq	r0, r2
   12c2c:	ldr	r2, [pc, #884]	; 12fa8 <__assert_fail@plt+0x1a14>
   12c30:	tst	r9, #8
   12c34:	ldr	r1, [pc, #880]	; 12fac <__assert_fail@plt+0x1a18>
   12c38:	moveq	r1, r2
   12c3c:	ldr	r2, [pc, #876]	; 12fb0 <__assert_fail@plt+0x1a1c>
   12c40:	tst	r9, #16
   12c44:	ldr	r5, [pc, #872]	; 12fb4 <__assert_fail@plt+0x1a20>
   12c48:	ldr	lr, [pc, #872]	; 12fb8 <__assert_fail@plt+0x1a24>
   12c4c:	moveq	lr, r2
   12c50:	tst	r9, #32
   12c54:	ldr	r2, [pc, #864]	; 12fbc <__assert_fail@plt+0x1a28>
   12c58:	movne	r2, r5
   12c5c:	ldr	r5, [pc, #860]	; 12fc0 <__assert_fail@plt+0x1a2c>
   12c60:	tst	r9, #64	; 0x40
   12c64:	str	ip, [sp]
   12c68:	ldr	ip, [pc, #852]	; 12fc4 <__assert_fail@plt+0x1a30>
   12c6c:	movne	ip, r5
   12c70:	ldr	r5, [pc, #848]	; 12fc8 <__assert_fail@plt+0x1a34>
   12c74:	tst	r9, #128	; 0x80
   12c78:	str	lr, [sp, #12]
   12c7c:	ldr	lr, [pc, #840]	; 12fcc <__assert_fail@plt+0x1a38>
   12c80:	str	r0, [sp, #4]
   12c84:	str	r1, [sp, #8]
   12c88:	ldr	r0, [pc, #832]	; 12fd0 <__assert_fail@plt+0x1a3c>
   12c8c:	ldr	r1, [pc, #832]	; 12fd4 <__assert_fail@plt+0x1a40>
   12c90:	movne	r0, r5
   12c94:	tst	r9, #256	; 0x100
   12c98:	moveq	r1, lr
   12c9c:	str	r2, [sp, #20]
   12ca0:	add	r2, sp, #268	; 0x10c
   12ca4:	strd	r0, [sp, #28]
   12ca8:	str	ip, [sp, #24]
   12cac:	str	r2, [sp, #16]
   12cb0:	ldr	r1, [pc, #800]	; 12fd8 <__assert_fail@plt+0x1a44>
   12cb4:	mov	r0, #1
   12cb8:	bl	1148c <__printf_chk@plt>
   12cbc:	b	12adc <__assert_fail@plt+0x1548>
   12cc0:	cmp	r5, #24
   12cc4:	beq	12cd0 <__assert_fail@plt+0x173c>
   12cc8:	cmp	r5, #40	; 0x28
   12ccc:	bne	12adc <__assert_fail@plt+0x1548>
   12cd0:	ldr	r3, [sp, #52]	; 0x34
   12cd4:	add	r0, r9, r3, lsl #16
   12cd8:	bl	1ab4c <__assert_fail@plt+0x95b8>
   12cdc:	add	r2, sp, #268	; 0x10c
   12ce0:	ldr	r1, [pc, #676]	; 12f8c <__assert_fail@plt+0x19f8>
   12ce4:	mov	r3, r0
   12ce8:	mov	r0, #1
   12cec:	bl	1148c <__printf_chk@plt>
   12cf0:	b	12adc <__assert_fail@plt+0x1548>
   12cf4:	cmp	r5, #128	; 0x80
   12cf8:	beq	12bfc <__assert_fail@plt+0x1668>
   12cfc:	b	12adc <__assert_fail@plt+0x1548>
   12d00:	bl	1ab2c <__assert_fail@plt+0x9598>
   12d04:	mov	r2, r7
   12d08:	ldr	r1, [pc, #628]	; 12f84 <__assert_fail@plt+0x19f0>
   12d0c:	mov	r4, #4
   12d10:	mov	r3, r0
   12d14:	mov	r0, #1
   12d18:	bl	1148c <__printf_chk@plt>
   12d1c:	ldr	r1, [pc, #696]	; 12fdc <__assert_fail@plt+0x1a48>
   12d20:	mov	r0, #1
   12d24:	bl	1148c <__printf_chk@plt>
   12d28:	mov	r9, #0
   12d2c:	mov	r7, r9
   12d30:	ldrb	r2, [r6, #1]!
   12d34:	ldr	r1, [pc, #676]	; 12fe0 <__assert_fail@plt+0x1a4c>
   12d38:	mov	r0, #1
   12d3c:	bl	1148c <__printf_chk@plt>
   12d40:	ldrb	r2, [r6]
   12d44:	lsl	r3, r7, #3
   12d48:	add	r7, r7, #1
   12d4c:	cmp	r7, r4
   12d50:	add	r9, r9, r2, lsl r3
   12d54:	bcc	12d30 <__assert_fail@plt+0x179c>
   12d58:	mov	r2, r9
   12d5c:	ldr	r1, [pc, #640]	; 12fe4 <__assert_fail@plt+0x1a50>
   12d60:	mov	r0, #1
   12d64:	bl	1148c <__printf_chk@plt>
   12d68:	mov	r0, #10
   12d6c:	bl	11474 <putchar@plt>
   12d70:	cmp	r5, #84	; 0x54
   12d74:	bne	12b58 <__assert_fail@plt+0x15c4>
   12d78:	sxtb	r3, r9
   12d7c:	add	r2, sp, #268	; 0x10c
   12d80:	ldr	r1, [pc, #608]	; 12fe8 <__assert_fail@plt+0x1a54>
   12d84:	mov	r0, #1
   12d88:	bl	1148c <__printf_chk@plt>
   12d8c:	b	12adc <__assert_fail@plt+0x1548>
   12d90:	add	r3, sp, #304	; 0x130
   12d94:	add	r3, r3, r6, lsl #2
   12d98:	ldr	r1, [pc, #588]	; 12fec <__assert_fail@plt+0x1a58>
   12d9c:	ldr	r2, [r3, #-216]	; 0xffffff28
   12da0:	mov	r0, #1
   12da4:	bl	1148c <__printf_chk@plt>
   12da8:	lsl	r3, r4, #1
   12dac:	cmp	r3, #1
   12db0:	bls	12f10 <__assert_fail@plt+0x197c>
   12db4:	add	r2, r3, r6, lsl #3
   12db8:	add	r3, sp, #104	; 0x68
   12dbc:	add	r1, sp, #108	; 0x6c
   12dc0:	add	r3, r3, r2, lsl #2
   12dc4:	str	fp, [sp, #64]	; 0x40
   12dc8:	add	r6, r1, r6, lsl #5
   12dcc:	lsr	r7, r9, #4
   12dd0:	mov	r8, #0
   12dd4:	mov	fp, r3
   12dd8:	str	r4, [sp, #68]	; 0x44
   12ddc:	uxtb	r5, r7
   12de0:	ands	r4, r5, #15
   12de4:	lsr	r7, r7, #4
   12de8:	beq	12e34 <__assert_fail@plt+0x18a0>
   12dec:	cmp	r8, #0
   12df0:	add	r8, r8, #1
   12df4:	beq	12e00 <__assert_fail@plt+0x186c>
   12df8:	mov	r0, #42	; 0x2a
   12dfc:	bl	11474 <putchar@plt>
   12e00:	ldr	r2, [r6, #4]
   12e04:	ldr	r1, [pc, #360]	; 12f74 <__assert_fail@plt+0x19e0>
   12e08:	mov	r0, #1
   12e0c:	bl	1148c <__printf_chk@plt>
   12e10:	cmp	r4, #1
   12e14:	beq	12e34 <__assert_fail@plt+0x18a0>
   12e18:	and	r2, r5, #7
   12e1c:	tst	r5, #8
   12e20:	mvnne	r2, r2, lsl #29
   12e24:	ldr	r1, [pc, #452]	; 12ff0 <__assert_fail@plt+0x1a5c>
   12e28:	mvnne	r2, r2, lsr #29
   12e2c:	mov	r0, #1
   12e30:	bl	1148c <__printf_chk@plt>
   12e34:	add	r6, r6, #4
   12e38:	cmp	fp, r6
   12e3c:	bne	12ddc <__assert_fail@plt+0x1848>
   12e40:	cmp	r8, #0
   12e44:	ldr	fp, [sp, #64]	; 0x40
   12e48:	ldr	r4, [sp, #68]	; 0x44
   12e4c:	beq	12f10 <__assert_fail@plt+0x197c>
   12e50:	mov	r0, #10
   12e54:	bl	11474 <putchar@plt>
   12e58:	b	12adc <__assert_fail@plt+0x1548>
   12e5c:	ldr	r0, [pc, #400]	; 12ff4 <__assert_fail@plt+0x1a60>
   12e60:	bl	11378 <puts@plt>
   12e64:	ldrb	r6, [fp]
   12e68:	ldrb	r4, [fp, #1]
   12e6c:	b	127ec <__assert_fail@plt+0x1258>
   12e70:	ldr	r0, [pc, #384]	; 12ff8 <__assert_fail@plt+0x1a64>
   12e74:	bl	11378 <puts@plt>
   12e78:	ldr	r3, [pc, #228]	; 12f64 <__assert_fail@plt+0x19d0>
   12e7c:	ldr	lr, [pc, #228]	; 12f68 <__assert_fail@plt+0x19d4>
   12e80:	add	r4, sp, #72	; 0x48
   12e84:	ldm	r3, {r0, r1, r2, r3}
   12e88:	add	ip, sp, #304	; 0x130
   12e8c:	sub	ip, ip, #36	; 0x24
   12e90:	stm	r4, {r0, r1, r2, r3}
   12e94:	ldm	lr!, {r0, r1, r2, r3}
   12e98:	stmia	ip!, {r0, r1, r2, r3}
   12e9c:	ldm	lr, {r0, r1, r2, r3}
   12ea0:	stmia	ip!, {r0, r1, r2}
   12ea4:	mov	r2, r5
   12ea8:	ldr	r1, [pc, #188]	; 12f6c <__assert_fail@plt+0x19d8>
   12eac:	mov	r0, #1
   12eb0:	strb	r3, [ip]
   12eb4:	bl	1148c <__printf_chk@plt>
   12eb8:	b	12a64 <__assert_fail@plt+0x14d0>
   12ebc:	ldr	r0, [pc, #312]	; 12ffc <__assert_fail@plt+0x1a68>
   12ec0:	bl	11378 <puts@plt>
   12ec4:	b	12adc <__assert_fail@plt+0x1548>
   12ec8:	ldr	r0, [pc, #304]	; 13000 <__assert_fail@plt+0x1a6c>
   12ecc:	bl	11378 <puts@plt>
   12ed0:	b	12adc <__assert_fail@plt+0x1548>
   12ed4:	ldr	r0, [pc, #296]	; 13004 <__assert_fail@plt+0x1a70>
   12ed8:	bl	11378 <puts@plt>
   12edc:	b	12adc <__assert_fail@plt+0x1548>
   12ee0:	ldr	r0, [pc, #288]	; 13008 <__assert_fail@plt+0x1a74>
   12ee4:	bl	11378 <puts@plt>
   12ee8:	b	12adc <__assert_fail@plt+0x1548>
   12eec:	ldr	r0, [pc, #280]	; 1300c <__assert_fail@plt+0x1a78>
   12ef0:	bl	11378 <puts@plt>
   12ef4:	b	12adc <__assert_fail@plt+0x1548>
   12ef8:	ldr	r0, [pc, #272]	; 13010 <__assert_fail@plt+0x1a7c>
   12efc:	bl	11378 <puts@plt>
   12f00:	b	12adc <__assert_fail@plt+0x1548>
   12f04:	ldr	r0, [pc, #264]	; 13014 <__assert_fail@plt+0x1a80>
   12f08:	bl	11378 <puts@plt>
   12f0c:	b	12adc <__assert_fail@plt+0x1548>
   12f10:	ldr	r1, [pc, #256]	; 13018 <__assert_fail@plt+0x1a84>
   12f14:	mov	r0, #1
   12f18:	bl	1148c <__printf_chk@plt>
   12f1c:	b	12e50 <__assert_fail@plt+0x18bc>
   12f20:	mov	r2, #6
   12f24:	b	1289c <__assert_fail@plt+0x1308>
   12f28:	bl	112d0 <__stack_chk_fail@plt>
   12f2c:	tst	r9, #128	; 0x80
   12f30:	ldrne	r0, [pc, #228]	; 1301c <__assert_fail@plt+0x1a88>
   12f34:	ldreq	r0, [pc, #228]	; 13020 <__assert_fail@plt+0x1a8c>
   12f38:	bl	11378 <puts@plt>
   12f3c:	b	12adc <__assert_fail@plt+0x1548>
   12f40:	strdeq	ip, [r3], -r8
   12f44:	ldrdeq	r9, [r2], -r4
   12f48:	andeq	ip, r1, r0, asr ip
   12f4c:	andeq	ip, r1, r4, lsr #26
   12f50:	andeq	ip, r1, r8, lsl #31
   12f54:	andeq	ip, r1, ip, ror #26
   12f58:	andeq	ip, r1, r8, lsr #27
   12f5c:	andeq	r1, r0, r8, lsl #7
   12f60:	muleq	r1, ip, r3
   12f64:	strdeq	fp, [r1], -r8
   12f68:	andeq	ip, r1, r4, ror pc
   12f6c:	strdeq	ip, [r1], -r4
   12f70:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   12f74:	andeq	r0, r2, r8, ror #21
   12f78:	andeq	fp, r1, r8, lsl #24
   12f7c:	andeq	ip, r1, ip, ror lr
   12f80:	andeq	ip, r1, r4, lsr #29
   12f84:	andeq	ip, r1, r4, lsr #28
   12f88:	andeq	ip, r1, ip, asr lr
   12f8c:	andeq	r1, r2, r4, ror #1
   12f90:	andeq	ip, r1, ip, lsl #23
   12f94:	andeq	ip, r1, r4, lsr #23
   12f98:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   12f9c:			; <UNDEFINED> instruction: 0x0001cbb8
   12fa0:	muleq	r1, r8, fp
   12fa4:	andeq	ip, r1, ip, lsr #23
   12fa8:	andeq	ip, r1, ip, asr #23
   12fac:	andeq	ip, r1, r4, asr #23
   12fb0:	andeq	r2, r2, ip, asr r5
   12fb4:	andeq	ip, r1, r0, ror #23
   12fb8:	ldrdeq	ip, [r1], -r4
   12fbc:	strdeq	ip, [r1], -r4
   12fc0:	andeq	ip, r1, r4, lsl #24
   12fc4:	andeq	ip, r1, r0, lsl ip
   12fc8:	andeq	ip, r1, r8, lsr #24
   12fcc:	andeq	ip, r1, r4, asr #24
   12fd0:	andeq	ip, r1, r4, lsr #24
   12fd4:	andeq	ip, r1, r4, lsr ip
   12fd8:	andeq	ip, r1, r4, asr pc
   12fdc:	andeq	ip, r1, r8, asr #28
   12fe0:	andeq	ip, r1, ip, asr #28
   12fe4:	andeq	ip, r1, r4, asr lr
   12fe8:	andeq	ip, r1, r4, ror #28
   12fec:	andeq	ip, r1, r8, asr #29
   12ff0:	andeq	ip, r1, r4, ror #29
   12ff4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12ff8:	andeq	ip, r1, r4, asr #27
   12ffc:	andeq	ip, r1, r8, lsl #30
   13000:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   13004:	andeq	sl, r2, ip, ror #8
   13008:	strdeq	ip, [r1], -r4
   1300c:	andeq	ip, r1, r8, lsl pc
   13010:			; <UNDEFINED> instruction: 0x000297bc
   13014:	andeq	ip, r1, r8, ror #29
   13018:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1301c:	andeq	ip, r1, r8, lsr #30
   13020:	andeq	ip, r1, r8, lsr pc
   13024:	ldrb	r2, [r0]
   13028:	cmp	r2, #53	; 0x35
   1302c:	bls	132a0 <__assert_fail@plt+0x1d0c>
   13030:	push	{r4, r5, r6, lr}
   13034:	sub	sp, sp, #16
   13038:	ldrb	r1, [r0, #2]
   1303c:	ldrb	r3, [r0, #3]
   13040:	mov	r4, r0
   13044:	str	r1, [sp, #4]
   13048:	str	r3, [sp]
   1304c:	ldr	r1, [pc, #1620]	; 136a8 <__assert_fail@plt+0x2114>
   13050:	ldrb	r3, [r0, #1]
   13054:	mov	r0, #1
   13058:	bl	1148c <__printf_chk@plt>
   1305c:	ldrb	r3, [r4, #3]
   13060:	ldr	r5, [pc, #1604]	; 136ac <__assert_fail@plt+0x2118>
   13064:	cmp	r3, #1
   13068:	bne	13078 <__assert_fail@plt+0x1ae4>
   1306c:	ldrb	r3, [r4, #2]
   13070:	cmp	r3, #0
   13074:	beq	1308c <__assert_fail@plt+0x1af8>
   13078:	mov	r2, #42	; 0x2a
   1307c:	mov	r1, #1
   13080:	ldr	r3, [r5]
   13084:	ldr	r0, [pc, #1572]	; 136b0 <__assert_fail@plt+0x211c>
   13088:	bl	11330 <fwrite@plt>
   1308c:	ldr	r1, [r5]
   13090:	mov	r0, #10
   13094:	bl	11528 <putc@plt>
   13098:	ldrb	r3, [r4, #5]
   1309c:	ldr	ip, [pc, #1552]	; 136b4 <__assert_fail@plt+0x2120>
   130a0:	ldr	r0, [pc, #1552]	; 136b8 <__assert_fail@plt+0x2124>
   130a4:	tst	r3, #1
   130a8:	moveq	r0, ip
   130ac:	ldr	r1, [pc, #1544]	; 136bc <__assert_fail@plt+0x2128>
   130b0:	tst	r3, #2
   130b4:	moveq	r1, ip
   130b8:	ldr	r2, [pc, #1536]	; 136c0 <__assert_fail@plt+0x212c>
   130bc:	tst	r3, #4
   130c0:	moveq	r2, ip
   130c4:	strd	r0, [sp]
   130c8:	str	r2, [sp, #8]
   130cc:	ldr	r1, [pc, #1520]	; 136c4 <__assert_fail@plt+0x2130>
   130d0:	ldrb	r2, [r4, #4]
   130d4:	mov	r0, #1
   130d8:	bl	1148c <__printf_chk@plt>
   130dc:	ldr	r6, [r4, #6]
   130e0:	ldr	r1, [pc, #1504]	; 136c8 <__assert_fail@plt+0x2134>
   130e4:	mov	r2, r6
   130e8:	mov	r0, #1
   130ec:	bl	1148c <__printf_chk@plt>
   130f0:	tst	r6, #1
   130f4:	bne	1340c <__assert_fail@plt+0x1e78>
   130f8:	tst	r6, #2
   130fc:	ldr	r1, [r5]
   13100:	bne	1342c <__assert_fail@plt+0x1e98>
   13104:	bics	r3, r6, #3
   13108:	bne	1344c <__assert_fail@plt+0x1eb8>
   1310c:	mov	r0, #10
   13110:	bl	11528 <putc@plt>
   13114:	ldr	r2, [r4, #10]
   13118:	ldr	r1, [pc, #1452]	; 136cc <__assert_fail@plt+0x2138>
   1311c:	mov	r0, #1
   13120:	bl	1148c <__printf_chk@plt>
   13124:	ldr	r2, [r4, #14]
   13128:	ldr	r1, [pc, #1440]	; 136d0 <__assert_fail@plt+0x213c>
   1312c:	mov	r0, #1
   13130:	bl	1148c <__printf_chk@plt>
   13134:	ldrb	r2, [r4, #18]
   13138:	ldr	r1, [pc, #1428]	; 136d4 <__assert_fail@plt+0x2140>
   1313c:	mov	r0, #1
   13140:	bl	1148c <__printf_chk@plt>
   13144:	ldr	r2, [r4, #19]
   13148:	ldr	r1, [pc, #1416]	; 136d8 <__assert_fail@plt+0x2144>
   1314c:	mov	r0, #1
   13150:	bl	1148c <__printf_chk@plt>
   13154:	ldr	r2, [r4, #23]
   13158:	ldr	r1, [pc, #1404]	; 136dc <__assert_fail@plt+0x2148>
   1315c:	mov	r0, #1
   13160:	bl	1148c <__printf_chk@plt>
   13164:	ldrb	r2, [r4, #27]
   13168:	ldr	r1, [pc, #1392]	; 136e0 <__assert_fail@plt+0x214c>
   1316c:	mov	r0, #1
   13170:	bl	1148c <__printf_chk@plt>
   13174:	ldr	r2, [r4, #28]
   13178:	ldr	r1, [pc, #1380]	; 136e4 <__assert_fail@plt+0x2150>
   1317c:	mov	r0, #1
   13180:	bl	1148c <__printf_chk@plt>
   13184:	ldr	r6, [r4, #32]
   13188:	ldr	r1, [pc, #1368]	; 136e8 <__assert_fail@plt+0x2154>
   1318c:	mov	r2, r6
   13190:	mov	r0, #1
   13194:	bl	1148c <__printf_chk@plt>
   13198:	tst	r6, #1
   1319c:	bne	13584 <__assert_fail@plt+0x1ff0>
   131a0:	tst	r6, #2
   131a4:	ldr	r1, [r5]
   131a8:	bne	13568 <__assert_fail@plt+0x1fd4>
   131ac:	tst	r6, #4
   131b0:	bne	1354c <__assert_fail@plt+0x1fb8>
   131b4:	mov	r0, #10
   131b8:	bl	11528 <putc@plt>
   131bc:	ldr	r6, [r4, #36]	; 0x24
   131c0:	ldr	r1, [pc, #1316]	; 136ec <__assert_fail@plt+0x2158>
   131c4:	mov	r2, r6
   131c8:	mov	r0, #1
   131cc:	bl	1148c <__printf_chk@plt>
   131d0:	tst	r6, #1
   131d4:	bne	13534 <__assert_fail@plt+0x1fa0>
   131d8:	tst	r6, #2
   131dc:	ldr	r1, [r5]
   131e0:	bne	13518 <__assert_fail@plt+0x1f84>
   131e4:	tst	r6, #4
   131e8:	bne	134fc <__assert_fail@plt+0x1f68>
   131ec:	tst	r6, #8
   131f0:	bne	134e0 <__assert_fail@plt+0x1f4c>
   131f4:	mov	r0, #10
   131f8:	bl	11528 <putc@plt>
   131fc:	ldr	r6, [r4, #40]	; 0x28
   13200:	ldr	r1, [pc, #1256]	; 136f0 <__assert_fail@plt+0x215c>
   13204:	mov	r2, r6
   13208:	mov	r0, #1
   1320c:	bl	1148c <__printf_chk@plt>
   13210:	tst	r6, #2
   13214:	bne	134c8 <__assert_fail@plt+0x1f34>
   13218:	tst	r6, #4
   1321c:	bne	134b0 <__assert_fail@plt+0x1f1c>
   13220:	tst	r6, #8
   13224:	bne	13498 <__assert_fail@plt+0x1f04>
   13228:	tst	r6, #16
   1322c:	bne	13480 <__assert_fail@plt+0x1eec>
   13230:	tst	r6, #32
   13234:	bne	13468 <__assert_fail@plt+0x1ed4>
   13238:	tst	r6, #64	; 0x40
   1323c:	bne	132a8 <__assert_fail@plt+0x1d14>
   13240:	tst	r6, #128	; 0x80
   13244:	bne	13678 <__assert_fail@plt+0x20e4>
   13248:	tst	r6, #192	; 0xc0
   1324c:	bne	13648 <__assert_fail@plt+0x20b4>
   13250:	tst	r6, #256	; 0x100
   13254:	bne	132c4 <__assert_fail@plt+0x1d30>
   13258:	tst	r6, #512	; 0x200
   1325c:	bne	132e0 <__assert_fail@plt+0x1d4c>
   13260:	tst	r6, #1024	; 0x400
   13264:	bne	132fc <__assert_fail@plt+0x1d68>
   13268:	tst	r6, #65536	; 0x10000
   1326c:	bne	13318 <__assert_fail@plt+0x1d84>
   13270:	tst	r6, #131072	; 0x20000
   13274:	bne	13660 <__assert_fail@plt+0x20cc>
   13278:	tst	r6, #262144	; 0x40000
   1327c:	bne	13630 <__assert_fail@plt+0x209c>
   13280:	tst	r6, #458752	; 0x70000
   13284:	beq	1332c <__assert_fail@plt+0x1d98>
   13288:	ldr	r3, [r5]
   1328c:	mov	r2, #45	; 0x2d
   13290:	mov	r1, #1
   13294:	ldr	r0, [pc, #1112]	; 136f4 <__assert_fail@plt+0x2160>
   13298:	bl	11330 <fwrite@plt>
   1329c:	b	1332c <__assert_fail@plt+0x1d98>
   132a0:	ldr	r0, [pc, #1104]	; 136f8 <__assert_fail@plt+0x2164>
   132a4:	b	11378 <puts@plt>
   132a8:	ldr	r3, [r5]
   132ac:	mov	r2, #50	; 0x32
   132b0:	mov	r1, #1
   132b4:	ldr	r0, [pc, #1088]	; 136fc <__assert_fail@plt+0x2168>
   132b8:	bl	11330 <fwrite@plt>
   132bc:	tst	r6, #256	; 0x100
   132c0:	beq	13258 <__assert_fail@plt+0x1cc4>
   132c4:	ldr	r3, [r5]
   132c8:	mov	r2, #46	; 0x2e
   132cc:	mov	r1, #1
   132d0:	ldr	r0, [pc, #1064]	; 13700 <__assert_fail@plt+0x216c>
   132d4:	bl	11330 <fwrite@plt>
   132d8:	tst	r6, #512	; 0x200
   132dc:	beq	13260 <__assert_fail@plt+0x1ccc>
   132e0:	ldr	r3, [r5]
   132e4:	mov	r2, #45	; 0x2d
   132e8:	mov	r1, #1
   132ec:	ldr	r0, [pc, #1040]	; 13704 <__assert_fail@plt+0x2170>
   132f0:	bl	11330 <fwrite@plt>
   132f4:	tst	r6, #1024	; 0x400
   132f8:	beq	13268 <__assert_fail@plt+0x1cd4>
   132fc:	ldr	r3, [r5]
   13300:	mov	r2, #29
   13304:	mov	r1, #1
   13308:	ldr	r0, [pc, #1016]	; 13708 <__assert_fail@plt+0x2174>
   1330c:	bl	11330 <fwrite@plt>
   13310:	tst	r6, #65536	; 0x10000
   13314:	beq	13270 <__assert_fail@plt+0x1cdc>
   13318:	ldr	r3, [r5]
   1331c:	mov	r2, #30
   13320:	mov	r1, #1
   13324:	ldr	r0, [pc, #992]	; 1370c <__assert_fail@plt+0x2178>
   13328:	bl	11330 <fwrite@plt>
   1332c:	ldr	r2, [r4, #44]	; 0x2c
   13330:	ldr	r1, [pc, #984]	; 13710 <__assert_fail@plt+0x217c>
   13334:	mov	r0, #1
   13338:	bl	1148c <__printf_chk@plt>
   1333c:	ldr	r1, [pc, #976]	; 13714 <__assert_fail@plt+0x2180>
   13340:	mov	r0, #1
   13344:	bl	1148c <__printf_chk@plt>
   13348:	ldrb	r2, [r4, #48]	; 0x30
   1334c:	cmp	r2, #255	; 0xff
   13350:	beq	135b4 <__assert_fail@plt+0x2020>
   13354:	ldr	r1, [pc, #956]	; 13718 <__assert_fail@plt+0x2184>
   13358:	mov	r0, #1
   1335c:	bl	1148c <__printf_chk@plt>
   13360:	ldr	r1, [pc, #948]	; 1371c <__assert_fail@plt+0x2188>
   13364:	mov	r0, #1
   13368:	bl	1148c <__printf_chk@plt>
   1336c:	ldrb	r3, [r4, #49]	; 0x31
   13370:	cmp	r3, #255	; 0xff
   13374:	beq	1359c <__assert_fail@plt+0x2008>
   13378:	ldrb	r2, [r4, #48]	; 0x30
   1337c:	ldr	r1, [pc, #916]	; 13718 <__assert_fail@plt+0x2184>
   13380:	mov	r0, #1
   13384:	bl	1148c <__printf_chk@plt>
   13388:	ldr	r1, [pc, #912]	; 13720 <__assert_fail@plt+0x218c>
   1338c:	mov	r0, #1
   13390:	bl	1148c <__printf_chk@plt>
   13394:	ldrb	r2, [r4, #50]	; 0x32
   13398:	ldrb	r3, [r4, #51]	; 0x33
   1339c:	cmp	r2, #0
   133a0:	bne	133ac <__assert_fail@plt+0x1e18>
   133a4:	cmp	r3, #0
   133a8:	beq	13690 <__assert_fail@plt+0x20fc>
   133ac:	ldr	r1, [pc, #880]	; 13724 <__assert_fail@plt+0x2190>
   133b0:	mov	r0, #1
   133b4:	bl	1148c <__printf_chk@plt>
   133b8:	ldrb	r2, [r4, #52]	; 0x34
   133bc:	ldr	r1, [pc, #868]	; 13728 <__assert_fail@plt+0x2194>
   133c0:	mov	r0, #1
   133c4:	bl	1148c <__printf_chk@plt>
   133c8:	ldrb	r3, [r4, #52]	; 0x34
   133cc:	tst	r3, #1
   133d0:	bne	135e8 <__assert_fail@plt+0x2054>
   133d4:	tst	r3, #2
   133d8:	ldr	r1, [r5]
   133dc:	bne	135cc <__assert_fail@plt+0x2038>
   133e0:	mov	r0, #10
   133e4:	bl	11528 <putc@plt>
   133e8:	ldrb	r2, [r4, #53]	; 0x35
   133ec:	ldr	r1, [pc, #824]	; 1372c <__assert_fail@plt+0x2198>
   133f0:	mov	r0, #1
   133f4:	bl	1148c <__printf_chk@plt>
   133f8:	ldrb	r3, [r4]
   133fc:	cmp	r3, #54	; 0x36
   13400:	bhi	13604 <__assert_fail@plt+0x2070>
   13404:	add	sp, sp, #16
   13408:	pop	{r4, r5, r6, pc}
   1340c:	mov	r1, #1
   13410:	ldr	r3, [r5]
   13414:	mov	r2, #4
   13418:	ldr	r0, [pc, #784]	; 13730 <__assert_fail@plt+0x219c>
   1341c:	bl	11330 <fwrite@plt>
   13420:	tst	r6, #2
   13424:	ldr	r1, [r5]
   13428:	beq	13104 <__assert_fail@plt+0x1b70>
   1342c:	mov	r3, r1
   13430:	mov	r2, #4
   13434:	mov	r1, #1
   13438:	ldr	r0, [pc, #756]	; 13734 <__assert_fail@plt+0x21a0>
   1343c:	bl	11330 <fwrite@plt>
   13440:	bics	r3, r6, #3
   13444:	ldr	r1, [r5]
   13448:	beq	1310c <__assert_fail@plt+0x1b78>
   1344c:	mov	r3, r1
   13450:	mov	r2, #26
   13454:	mov	r1, #1
   13458:	ldr	r0, [pc, #728]	; 13738 <__assert_fail@plt+0x21a4>
   1345c:	bl	11330 <fwrite@plt>
   13460:	ldr	r1, [r5]
   13464:	b	1310c <__assert_fail@plt+0x1b78>
   13468:	ldr	r3, [r5]
   1346c:	mov	r2, #32
   13470:	mov	r1, #1
   13474:	ldr	r0, [pc, #704]	; 1373c <__assert_fail@plt+0x21a8>
   13478:	bl	11330 <fwrite@plt>
   1347c:	b	13238 <__assert_fail@plt+0x1ca4>
   13480:	ldr	r3, [r5]
   13484:	mov	r2, #28
   13488:	mov	r1, #1
   1348c:	ldr	r0, [pc, #684]	; 13740 <__assert_fail@plt+0x21ac>
   13490:	bl	11330 <fwrite@plt>
   13494:	b	13230 <__assert_fail@plt+0x1c9c>
   13498:	ldr	r3, [r5]
   1349c:	mov	r2, #33	; 0x21
   134a0:	mov	r1, #1
   134a4:	ldr	r0, [pc, #664]	; 13744 <__assert_fail@plt+0x21b0>
   134a8:	bl	11330 <fwrite@plt>
   134ac:	b	13228 <__assert_fail@plt+0x1c94>
   134b0:	ldr	r3, [r5]
   134b4:	mov	r2, #36	; 0x24
   134b8:	mov	r1, #1
   134bc:	ldr	r0, [pc, #644]	; 13748 <__assert_fail@plt+0x21b4>
   134c0:	bl	11330 <fwrite@plt>
   134c4:	b	13220 <__assert_fail@plt+0x1c8c>
   134c8:	ldr	r3, [r5]
   134cc:	mov	r2, #42	; 0x2a
   134d0:	mov	r1, #1
   134d4:	ldr	r0, [pc, #624]	; 1374c <__assert_fail@plt+0x21b8>
   134d8:	bl	11330 <fwrite@plt>
   134dc:	b	13218 <__assert_fail@plt+0x1c84>
   134e0:	mov	r3, r1
   134e4:	mov	r2, #5
   134e8:	mov	r1, #1
   134ec:	ldr	r0, [pc, #604]	; 13750 <__assert_fail@plt+0x21bc>
   134f0:	bl	11330 <fwrite@plt>
   134f4:	ldr	r1, [r5]
   134f8:	b	131f4 <__assert_fail@plt+0x1c60>
   134fc:	mov	r3, r1
   13500:	mov	r2, #8
   13504:	mov	r1, #1
   13508:	ldr	r0, [pc, #580]	; 13754 <__assert_fail@plt+0x21c0>
   1350c:	bl	11330 <fwrite@plt>
   13510:	ldr	r1, [r5]
   13514:	b	131ec <__assert_fail@plt+0x1c58>
   13518:	mov	r3, r1
   1351c:	mov	r2, #6
   13520:	mov	r1, #1
   13524:	ldr	r0, [pc, #556]	; 13758 <__assert_fail@plt+0x21c4>
   13528:	bl	11330 <fwrite@plt>
   1352c:	ldr	r1, [r5]
   13530:	b	131e4 <__assert_fail@plt+0x1c50>
   13534:	ldr	r3, [r5]
   13538:	mov	r2, #7
   1353c:	mov	r1, #1
   13540:	ldr	r0, [pc, #532]	; 1375c <__assert_fail@plt+0x21c8>
   13544:	bl	11330 <fwrite@plt>
   13548:	b	131d8 <__assert_fail@plt+0x1c44>
   1354c:	mov	r3, r1
   13550:	mov	r2, #4
   13554:	mov	r1, #1
   13558:	ldr	r0, [pc, #512]	; 13760 <__assert_fail@plt+0x21cc>
   1355c:	bl	11330 <fwrite@plt>
   13560:	ldr	r1, [r5]
   13564:	b	131b4 <__assert_fail@plt+0x1c20>
   13568:	mov	r3, r1
   1356c:	mov	r2, #7
   13570:	mov	r1, #1
   13574:	ldr	r0, [pc, #488]	; 13764 <__assert_fail@plt+0x21d0>
   13578:	bl	11330 <fwrite@plt>
   1357c:	ldr	r1, [r5]
   13580:	b	131ac <__assert_fail@plt+0x1c18>
   13584:	ldr	r3, [r5]
   13588:	mov	r2, #7
   1358c:	mov	r1, #1
   13590:	ldr	r0, [pc, #464]	; 13768 <__assert_fail@plt+0x21d4>
   13594:	bl	11330 <fwrite@plt>
   13598:	b	131a0 <__assert_fail@plt+0x1c0c>
   1359c:	ldr	r3, [r5]
   135a0:	mov	r2, #5
   135a4:	mov	r1, #1
   135a8:	ldr	r0, [pc, #444]	; 1376c <__assert_fail@plt+0x21d8>
   135ac:	bl	11330 <fwrite@plt>
   135b0:	b	13388 <__assert_fail@plt+0x1df4>
   135b4:	ldr	r3, [r5]
   135b8:	mov	r2, #5
   135bc:	mov	r1, #1
   135c0:	ldr	r0, [pc, #420]	; 1376c <__assert_fail@plt+0x21d8>
   135c4:	bl	11330 <fwrite@plt>
   135c8:	b	13360 <__assert_fail@plt+0x1dcc>
   135cc:	mov	r3, r1
   135d0:	mov	r2, #13
   135d4:	mov	r1, #1
   135d8:	ldr	r0, [pc, #400]	; 13770 <__assert_fail@plt+0x21dc>
   135dc:	bl	11330 <fwrite@plt>
   135e0:	ldr	r1, [r5]
   135e4:	b	133e0 <__assert_fail@plt+0x1e4c>
   135e8:	ldr	r3, [r5]
   135ec:	mov	r2, #13
   135f0:	mov	r1, #1
   135f4:	ldr	r0, [pc, #376]	; 13774 <__assert_fail@plt+0x21e0>
   135f8:	bl	11330 <fwrite@plt>
   135fc:	ldrb	r3, [r4, #52]	; 0x34
   13600:	b	133d4 <__assert_fail@plt+0x1e40>
   13604:	ldr	r3, [r5]
   13608:	mov	r2, #25
   1360c:	mov	r1, #1
   13610:	ldr	r0, [pc, #352]	; 13778 <__assert_fail@plt+0x21e4>
   13614:	bl	11330 <fwrite@plt>
   13618:	mov	r0, r4
   1361c:	ldrb	r1, [r0], #54	; 0x36
   13620:	sub	r1, r1, #54	; 0x36
   13624:	add	sp, sp, #16
   13628:	pop	{r4, r5, r6, lr}
   1362c:	b	11a8c <__assert_fail@plt+0x4f8>
   13630:	ldr	r3, [r5]
   13634:	mov	r2, #49	; 0x31
   13638:	mov	r1, #1
   1363c:	ldr	r0, [pc, #312]	; 1377c <__assert_fail@plt+0x21e8>
   13640:	bl	11330 <fwrite@plt>
   13644:	b	1332c <__assert_fail@plt+0x1d98>
   13648:	ldr	r3, [r5]
   1364c:	mov	r2, #50	; 0x32
   13650:	mov	r1, #1
   13654:	ldr	r0, [pc, #292]	; 13780 <__assert_fail@plt+0x21ec>
   13658:	bl	11330 <fwrite@plt>
   1365c:	b	13250 <__assert_fail@plt+0x1cbc>
   13660:	ldr	r3, [r5]
   13664:	mov	r2, #36	; 0x24
   13668:	mov	r1, #1
   1366c:	ldr	r0, [pc, #272]	; 13784 <__assert_fail@plt+0x21f0>
   13670:	bl	11330 <fwrite@plt>
   13674:	b	1332c <__assert_fail@plt+0x1d98>
   13678:	ldr	r3, [r5]
   1367c:	mov	r2, #32
   13680:	mov	r1, #1
   13684:	ldr	r0, [pc, #252]	; 13788 <__assert_fail@plt+0x21f4>
   13688:	bl	11330 <fwrite@plt>
   1368c:	b	13250 <__assert_fail@plt+0x1cbc>
   13690:	ldr	r3, [r5]
   13694:	mov	r2, #5
   13698:	mov	r1, #1
   1369c:	ldr	r0, [pc, #232]	; 1378c <__assert_fail@plt+0x21f8>
   136a0:	bl	11330 <fwrite@plt>
   136a4:	b	133b8 <__assert_fail@plt+0x1e24>
   136a8:	andeq	ip, r1, ip, lsr #31
   136ac:	muleq	r4, r4, r8
   136b0:	andeq	sp, r1, r8, lsr r0
   136b4:	ldrdeq	r2, [r2], -r8
   136b8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   136bc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   136c0:	andeq	ip, r1, r4, lsr #31
   136c4:	andeq	sp, r1, r4, rrx
   136c8:	strheq	sp, [r1], -r0
   136cc:	andeq	sp, r1, r0, lsl #2
   136d0:	andeq	sp, r1, r4, lsr #2
   136d4:	andeq	sp, r1, r8, asr #2
   136d8:	andeq	sp, r1, ip, ror #2
   136dc:	muleq	r1, r0, r1
   136e0:			; <UNDEFINED> instruction: 0x0001d1b4
   136e4:	ldrdeq	sp, [r1], -r8
   136e8:	strdeq	sp, [r1], -ip
   136ec:	andeq	sp, r1, r4, lsr r2
   136f0:	andeq	sp, r1, r8, ror r2
   136f4:	ldrdeq	sp, [r1], -ip
   136f8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   136fc:	andeq	sp, r1, r4, asr r3
   13700:	andeq	sp, r1, r0, ror #7
   13704:	andeq	sp, r1, r0, lsl r4
   13708:	andeq	sp, r1, r0, asr #8
   1370c:	andeq	sp, r1, r0, ror #8
   13710:	andeq	sp, r1, ip, lsl #10
   13714:	andeq	sp, r1, r0, lsr r5
   13718:	andeq	sp, r1, r8, asr r5
   1371c:	andeq	sp, r1, r0, ror #10
   13720:	andeq	sp, r1, r0, lsl #11
   13724:	andeq	sp, r1, r8, lsr #11
   13728:			; <UNDEFINED> instruction: 0x0001d5bc
   1372c:	andeq	sp, r1, r0, lsl #12
   13730:	ldrdeq	sp, [r1], -r4
   13734:	ldrdeq	sp, [r1], -ip
   13738:	andeq	sp, r1, r4, ror #1
   1373c:	andeq	sp, r1, r0, lsr r3
   13740:	andeq	sp, r1, r0, lsl r3
   13744:	andeq	sp, r1, ip, ror #5
   13748:	andeq	sp, r1, r4, asr #5
   1374c:	muleq	r1, r8, r2
   13750:	andeq	sp, r1, r0, ror r2
   13754:	andeq	sp, r1, r4, ror #4
   13758:	andeq	sp, r1, ip, asr r2
   1375c:	andeq	sp, r1, r4, asr r2
   13760:	andeq	sp, r1, ip, lsr #4
   13764:	andeq	sp, r1, r4, lsr #4
   13768:	andeq	sp, r1, ip, lsl r2
   1376c:	andeq	sp, r1, r0, asr r5
   13770:	strdeq	sp, [r1], -r0
   13774:	andeq	sp, r1, r0, ror #11
   13778:	andeq	sp, r1, r4, lsr #12
   1377c:	andeq	sp, r1, r8, lsr #9
   13780:	andeq	sp, r1, ip, lsr #7
   13784:	andeq	sp, r1, r0, lsl #9
   13788:	andeq	sp, r1, r8, lsl #7
   1378c:	andeq	sp, r1, r0, lsr #11
   13790:	push	{r4, r5, r6, r7, r8, r9, lr}
   13794:	mov	r4, r1
   13798:	ldrb	r3, [r1, #2]
   1379c:	sub	sp, sp, #52	; 0x34
   137a0:	cmp	r3, #28
   137a4:	ldrls	pc, [pc, r3, lsl #2]
   137a8:	b	13e44 <__assert_fail@plt+0x28b0>
   137ac:	andeq	r3, r1, r8, asr r8
   137b0:	andeq	r3, r1, r8, ror #27
   137b4:	andeq	r3, r1, r8, lsl sp
   137b8:	andeq	r3, r1, r4, asr #28
   137bc:	andeq	r3, r1, r4, asr #28
   137c0:	andeq	r3, r1, r4, asr #28
   137c4:	andeq	r3, r1, r0, ror sp
   137c8:	muleq	r1, ip, fp
   137cc:			; <UNDEFINED> instruction: 0x00013bb8
   137d0:	andeq	r3, r1, r4, asr #28
   137d4:	andeq	r3, r1, r8, lsl ip
   137d8:	andeq	r3, r1, r4, asr #28
   137dc:	andeq	r3, r1, r4, asr #28
   137e0:	andeq	r3, r1, r4, asr #28
   137e4:	andeq	r3, r1, r4, asr #28
   137e8:	andeq	r3, r1, ip, ror ip
   137ec:	andeq	r3, r1, r4, asr #28
   137f0:	muleq	r1, r4, r8
   137f4:	ldrdeq	r3, [r1], -r0
   137f8:	andeq	r3, r1, ip, lsl r9
   137fc:	andeq	r3, r1, r0, ror r9
   13800:			; <UNDEFINED> instruction: 0x000139b8
   13804:	strdeq	r3, [r1], -r4
   13808:	andeq	r3, r1, r4, asr #28
   1380c:	andeq	r3, r1, r4, asr #28
   13810:	andeq	r3, r1, r4, asr #28
   13814:	andeq	r3, r1, ip, ror #20
   13818:	strdeq	r3, [r1], -ip
   1381c:	andeq	r3, r1, r0, lsr #16
   13820:	ldrb	r3, [r1]
   13824:	cmp	r3, #8
   13828:	ldrne	r3, [pc, #2160]	; 140a0 <__assert_fail@plt+0x2b0c>
   1382c:	beq	13e68 <__assert_fail@plt+0x28d4>
   13830:	ldr	r2, [pc, #2156]	; 140a4 <__assert_fail@plt+0x2b10>
   13834:	ldr	r1, [pc, #2156]	; 140a8 <__assert_fail@plt+0x2b14>
   13838:	mov	r0, #1
   1383c:	bl	1148c <__printf_chk@plt>
   13840:	mov	r0, r4
   13844:	ldrb	r1, [r4]
   13848:	bl	11a8c <__assert_fail@plt+0x4f8>
   1384c:	ldr	r0, [pc, #2136]	; 140ac <__assert_fail@plt+0x2b18>
   13850:	add	sp, sp, #52	; 0x34
   13854:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13858:	ldrb	r3, [r1]
   1385c:	cmp	r3, #5
   13860:	ldrne	r3, [pc, #2120]	; 140b0 <__assert_fail@plt+0x2b1c>
   13864:	bne	13830 <__assert_fail@plt+0x229c>
   13868:	ldrb	r1, [r1, #3]
   1386c:	ldrb	r2, [r4, #4]
   13870:	ldr	r3, [pc, #2092]	; 140a4 <__assert_fail@plt+0x2b10>
   13874:	str	r1, [sp, #4]
   13878:	str	r2, [sp]
   1387c:	ldr	r1, [pc, #2096]	; 140b4 <__assert_fail@plt+0x2b20>
   13880:	mov	r2, r3
   13884:	mov	r0, #1
   13888:	bl	1148c <__printf_chk@plt>
   1388c:	mov	r6, #0
   13890:	b	1395c <__assert_fail@plt+0x23c8>
   13894:	ldrb	r3, [r1]
   13898:	cmp	r3, #5
   1389c:	ldrne	r3, [pc, #2068]	; 140b8 <__assert_fail@plt+0x2b24>
   138a0:	bne	13830 <__assert_fail@plt+0x229c>
   138a4:	ldrb	r1, [r1, #3]
   138a8:	ldrb	r2, [r4, #4]
   138ac:	ldr	r3, [pc, #2032]	; 140a4 <__assert_fail@plt+0x2b10>
   138b0:	str	r1, [sp, #4]
   138b4:	str	r2, [sp]
   138b8:	ldr	r1, [pc, #2044]	; 140bc <__assert_fail@plt+0x2b28>
   138bc:	mov	r2, r3
   138c0:	mov	r0, #1
   138c4:	bl	1148c <__printf_chk@plt>
   138c8:	mov	r6, #0
   138cc:	b	1395c <__assert_fail@plt+0x23c8>
   138d0:	ldrb	r3, [r1]
   138d4:	cmp	r3, #21
   138d8:	ldrne	r3, [pc, #2016]	; 140c0 <__assert_fail@plt+0x2b2c>
   138dc:	bne	13830 <__assert_fail@plt+0x229c>
   138e0:	add	r0, r1, #5
   138e4:	ldrb	r5, [r1, #4]
   138e8:	ldrb	r4, [r1, #3]
   138ec:	bl	11c1c <__assert_fail@plt+0x688>
   138f0:	ldr	r3, [pc, #1964]	; 140a4 <__assert_fail@plt+0x2b10>
   138f4:	str	r4, [sp, #4]
   138f8:	str	r5, [sp]
   138fc:	str	r3, [sp, #8]
   13900:	mov	r2, r3
   13904:	ldr	r1, [pc, #1976]	; 140c4 <__assert_fail@plt+0x2b30>
   13908:	mov	r6, #0
   1390c:	str	r0, [sp, #12]
   13910:	mov	r0, #1
   13914:	bl	1148c <__printf_chk@plt>
   13918:	b	1395c <__assert_fail@plt+0x23c8>
   1391c:	ldrb	r3, [r1]
   13920:	cmp	r3, #4
   13924:	ldrls	r3, [pc, #1948]	; 140c8 <__assert_fail@plt+0x2b34>
   13928:	bls	13830 <__assert_fail@plt+0x229c>
   1392c:	ldrb	r2, [r1, #3]
   13930:	ldr	r3, [pc, #1900]	; 140a4 <__assert_fail@plt+0x2b10>
   13934:	ldr	r1, [pc, #1936]	; 140cc <__assert_fail@plt+0x2b38>
   13938:	mov	r0, #1
   1393c:	strd	r2, [sp]
   13940:	mov	r2, r3
   13944:	bl	1148c <__printf_chk@plt>
   13948:	mov	r0, r4
   1394c:	mov	r6, #0
   13950:	ldrb	r1, [r0], #4
   13954:	sub	r1, r1, #4
   13958:	bl	11a8c <__assert_fail@plt+0x4f8>
   1395c:	mov	r0, r6
   13960:	bl	112a0 <free@plt>
   13964:	mov	r0, #0
   13968:	add	sp, sp, #52	; 0x34
   1396c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13970:	ldrb	r3, [r1]
   13974:	cmp	r3, #7
   13978:	ldrne	r3, [pc, #1872]	; 140d0 <__assert_fail@plt+0x2b3c>
   1397c:	bne	13830 <__assert_fail@plt+0x229c>
   13980:	ldrh	r0, [r1, #5]
   13984:	ldrb	r2, [r4, #4]
   13988:	ldrb	r1, [r1, #3]
   1398c:	ldr	r3, [pc, #1808]	; 140a4 <__assert_fail@plt+0x2b10>
   13990:	str	r0, [sp, #12]
   13994:	str	r1, [sp, #4]
   13998:	str	r2, [sp]
   1399c:	str	r3, [sp, #8]
   139a0:	mov	r2, r3
   139a4:	ldr	r1, [pc, #1832]	; 140d4 <__assert_fail@plt+0x2b40>
   139a8:	mov	r0, #1
   139ac:	bl	1148c <__printf_chk@plt>
   139b0:	mov	r6, #0
   139b4:	b	1395c <__assert_fail@plt+0x23c8>
   139b8:	ldrb	r3, [r1]
   139bc:	cmp	r3, #5
   139c0:	ldrne	r3, [pc, #1808]	; 140d8 <__assert_fail@plt+0x2b44>
   139c4:	bne	13830 <__assert_fail@plt+0x229c>
   139c8:	ldrb	r1, [r1, #3]
   139cc:	ldrb	r2, [r4, #4]
   139d0:	ldr	r3, [pc, #1740]	; 140a4 <__assert_fail@plt+0x2b10>
   139d4:	str	r1, [sp, #4]
   139d8:	str	r2, [sp]
   139dc:	ldr	r1, [pc, #1784]	; 140dc <__assert_fail@plt+0x2b48>
   139e0:	mov	r2, r3
   139e4:	mov	r0, #1
   139e8:	bl	1148c <__printf_chk@plt>
   139ec:	mov	r6, #0
   139f0:	b	1395c <__assert_fail@plt+0x23c8>
   139f4:	ldrb	r3, [r1]
   139f8:	cmp	r3, #22
   139fc:	ldrne	r3, [pc, #1756]	; 140e0 <__assert_fail@plt+0x2b4c>
   13a00:	bne	13830 <__assert_fail@plt+0x229c>
   13a04:	ldrb	r1, [r1, #5]
   13a08:	bl	1b724 <__assert_fail@plt+0xa190>
   13a0c:	ldrb	r5, [r4, #5]
   13a10:	ldrb	r8, [r4, #4]
   13a14:	ldrb	r9, [r4, #3]
   13a18:	cmp	r5, #0
   13a1c:	mov	r6, r0
   13a20:	beq	13f4c <__assert_fail@plt+0x29b8>
   13a24:	ldrb	r3, [r0]
   13a28:	ldr	r7, [pc, #1716]	; 140e4 <__assert_fail@plt+0x2b50>
   13a2c:	cmp	r3, #0
   13a30:	movne	r7, r0
   13a34:	add	r0, r4, #6
   13a38:	bl	11c1c <__assert_fail@plt+0x688>
   13a3c:	ldr	r3, [pc, #1632]	; 140a4 <__assert_fail@plt+0x2b10>
   13a40:	str	r7, [sp, #16]
   13a44:	str	r5, [sp, #12]
   13a48:	strd	r8, [sp]
   13a4c:	str	r3, [sp, #20]
   13a50:	str	r3, [sp, #8]
   13a54:	mov	r2, r3
   13a58:	ldr	r1, [pc, #1672]	; 140e8 <__assert_fail@plt+0x2b54>
   13a5c:	str	r0, [sp, #24]
   13a60:	mov	r0, #1
   13a64:	bl	1148c <__printf_chk@plt>
   13a68:	b	1395c <__assert_fail@plt+0x23c8>
   13a6c:	ldrb	r3, [r1]
   13a70:	cmp	r3, #6
   13a74:	ldrne	r3, [pc, #1648]	; 140ec <__assert_fail@plt+0x2b58>
   13a78:	bne	13830 <__assert_fail@plt+0x229c>
   13a7c:	ldrb	r1, [r1, #5]
   13a80:	ldrb	r2, [r4, #3]
   13a84:	ldrb	r3, [r4, #4]
   13a88:	ldr	r5, [pc, #1556]	; 140a4 <__assert_fail@plt+0x2b10>
   13a8c:	str	r1, [sp, #12]
   13a90:	str	r2, [sp, #4]
   13a94:	str	r3, [sp]
   13a98:	str	r5, [sp, #8]
   13a9c:	mov	r3, r5
   13aa0:	mov	r2, r5
   13aa4:	ldr	r1, [pc, #1604]	; 140f0 <__assert_fail@plt+0x2b5c>
   13aa8:	mov	r0, #1
   13aac:	bl	1148c <__printf_chk@plt>
   13ab0:	ldrb	r3, [r4, #5]
   13ab4:	tst	r3, #32
   13ab8:	bne	14088 <__assert_fail@plt+0x2af4>
   13abc:	tst	r3, #16
   13ac0:	bne	14070 <__assert_fail@plt+0x2adc>
   13ac4:	tst	r3, #8
   13ac8:	bne	14058 <__assert_fail@plt+0x2ac4>
   13acc:	tst	r3, #4
   13ad0:	bne	14040 <__assert_fail@plt+0x2aac>
   13ad4:	tst	r3, #2
   13ad8:	bne	13ff8 <__assert_fail@plt+0x2a64>
   13adc:	tst	r3, #1
   13ae0:	beq	13d68 <__assert_fail@plt+0x27d4>
   13ae4:	ldr	r2, [pc, #1464]	; 140a4 <__assert_fail@plt+0x2b10>
   13ae8:	ldr	r1, [pc, #1540]	; 140f4 <__assert_fail@plt+0x2b60>
   13aec:	mov	r0, #1
   13af0:	bl	1148c <__printf_chk@plt>
   13af4:	mov	r6, #0
   13af8:	b	1395c <__assert_fail@plt+0x23c8>
   13afc:	ldrb	r3, [r1]
   13b00:	cmp	r3, #12
   13b04:	ldrne	r3, [pc, #1516]	; 140f8 <__assert_fail@plt+0x2b64>
   13b08:	bne	13830 <__assert_fail@plt+0x229c>
   13b0c:	ldrb	r5, [r1, #11]
   13b10:	ldrb	r0, [r1, #7]
   13b14:	ldrh	lr, [r1, #9]
   13b18:	ldrb	ip, [r1, #8]
   13b1c:	ldrb	r2, [r4, #3]
   13b20:	ldrh	r1, [r1, #5]
   13b24:	ldrb	r3, [r4, #4]
   13b28:	str	r5, [sp, #44]	; 0x2c
   13b2c:	ldr	r5, [pc, #1392]	; 140a4 <__assert_fail@plt+0x2b10>
   13b30:	str	r0, [sp, #20]
   13b34:	str	r1, [sp, #12]
   13b38:	str	r2, [sp, #4]
   13b3c:	str	r3, [sp]
   13b40:	str	lr, [sp, #36]	; 0x24
   13b44:	mov	r3, r5
   13b48:	str	ip, [sp, #28]
   13b4c:	str	r5, [sp, #40]	; 0x28
   13b50:	str	r5, [sp, #32]
   13b54:	str	r5, [sp, #24]
   13b58:	str	r5, [sp, #16]
   13b5c:	str	r5, [sp, #8]
   13b60:	mov	r2, r5
   13b64:	ldr	r1, [pc, #1424]	; 140fc <__assert_fail@plt+0x2b68>
   13b68:	mov	r0, #1
   13b6c:	bl	1148c <__printf_chk@plt>
   13b70:	ldrb	r3, [r4, #11]
   13b74:	tst	r3, #32
   13b78:	bne	13fe0 <__assert_fail@plt+0x2a4c>
   13b7c:	tst	r3, #8
   13b80:	beq	13d68 <__assert_fail@plt+0x27d4>
   13b84:	ldr	r2, [pc, #1304]	; 140a4 <__assert_fail@plt+0x2b10>
   13b88:	ldr	r1, [pc, #1392]	; 14100 <__assert_fail@plt+0x2b6c>
   13b8c:	mov	r0, #1
   13b90:	bl	1148c <__printf_chk@plt>
   13b94:	mov	r6, #0
   13b98:	b	1395c <__assert_fail@plt+0x23c8>
   13b9c:	ldrb	r3, [r1]
   13ba0:	cmp	r3, #5
   13ba4:	bls	13bb0 <__assert_fail@plt+0x261c>
   13ba8:	tst	r3, #1
   13bac:	beq	13eac <__assert_fail@plt+0x2918>
   13bb0:	ldr	r3, [pc, #1356]	; 14104 <__assert_fail@plt+0x2b70>
   13bb4:	b	13830 <__assert_fail@plt+0x229c>
   13bb8:	ldrb	r3, [r1]
   13bbc:	cmp	r3, #4
   13bc0:	ldrne	r3, [pc, #1344]	; 14108 <__assert_fail@plt+0x2b74>
   13bc4:	bne	13830 <__assert_fail@plt+0x229c>
   13bc8:	ldrb	r2, [r1, #3]
   13bcc:	ldr	r3, [pc, #1232]	; 140a4 <__assert_fail@plt+0x2b10>
   13bd0:	ldr	r1, [pc, #1332]	; 1410c <__assert_fail@plt+0x2b78>
   13bd4:	str	r2, [sp]
   13bd8:	mov	r0, #1
   13bdc:	mov	r2, r3
   13be0:	bl	1148c <__printf_chk@plt>
   13be4:	ldrb	r3, [r4, #3]
   13be8:	tst	r3, #4
   13bec:	bne	14028 <__assert_fail@plt+0x2a94>
   13bf0:	tst	r3, #2
   13bf4:	bne	14010 <__assert_fail@plt+0x2a7c>
   13bf8:	tst	r3, #1
   13bfc:	beq	13d68 <__assert_fail@plt+0x27d4>
   13c00:	ldr	r2, [pc, #1180]	; 140a4 <__assert_fail@plt+0x2b10>
   13c04:	ldr	r1, [pc, #1284]	; 14110 <__assert_fail@plt+0x2b7c>
   13c08:	mov	r0, #1
   13c0c:	bl	1148c <__printf_chk@plt>
   13c10:	mov	r6, #0
   13c14:	b	1395c <__assert_fail@plt+0x23c8>
   13c18:	ldrb	r3, [r1]
   13c1c:	cmp	r3, #7
   13c20:	ldrne	r3, [pc, #1260]	; 14114 <__assert_fail@plt+0x2b80>
   13c24:	bne	13830 <__assert_fail@plt+0x229c>
   13c28:	ldrb	r1, [r1, #4]
   13c2c:	bl	1b724 <__assert_fail@plt+0xa190>
   13c30:	ldrb	r1, [r4, #4]
   13c34:	ldrb	r2, [r4, #3]
   13c38:	ldrb	ip, [r4, #6]
   13c3c:	ldr	r3, [pc, #1120]	; 140a4 <__assert_fail@plt+0x2b10>
   13c40:	mov	r6, r0
   13c44:	ldrb	r0, [r4, #5]
   13c48:	str	r1, [sp, #8]
   13c4c:	str	r2, [sp]
   13c50:	str	r0, [sp, #20]
   13c54:	str	r6, [sp, #12]
   13c58:	str	ip, [sp, #28]
   13c5c:	str	r3, [sp, #24]
   13c60:	str	r3, [sp, #16]
   13c64:	str	r3, [sp, #4]
   13c68:	mov	r2, r3
   13c6c:	ldr	r1, [pc, #1188]	; 14118 <__assert_fail@plt+0x2b84>
   13c70:	mov	r0, #1
   13c74:	bl	1148c <__printf_chk@plt>
   13c78:	b	1395c <__assert_fail@plt+0x23c8>
   13c7c:	ldrb	r3, [r1]
   13c80:	cmp	r3, #13
   13c84:	ldrne	r3, [pc, #1168]	; 1411c <__assert_fail@plt+0x2b88>
   13c88:	bne	13830 <__assert_fail@plt+0x229c>
   13c8c:	ldrb	r1, [r1, #3]
   13c90:	bl	1b724 <__assert_fail@plt+0xa190>
   13c94:	ldrb	r2, [r4, #5]
   13c98:	ldrb	r1, [r4, #3]
   13c9c:	ldrb	r3, [r4, #4]
   13ca0:	cmp	r1, #0
   13ca4:	mov	r6, r0
   13ca8:	ldrh	r0, [r4, #6]
   13cac:	orr	r2, r2, r0, lsl #8
   13cb0:	orr	r3, r3, r2, lsl #8
   13cb4:	beq	13f44 <__assert_fail@plt+0x29b0>
   13cb8:	ldrb	r0, [r6]
   13cbc:	ldr	r2, [pc, #1056]	; 140e4 <__assert_fail@plt+0x2b50>
   13cc0:	cmp	r0, #0
   13cc4:	movne	r2, r6
   13cc8:	ldr	r5, [pc, #980]	; 140a4 <__assert_fail@plt+0x2b10>
   13ccc:	str	r3, [sp, #12]
   13cd0:	mov	r0, #1
   13cd4:	stm	sp, {r1, r2, r5}
   13cd8:	mov	r3, r5
   13cdc:	mov	r2, r5
   13ce0:	ldr	r1, [pc, #1080]	; 14120 <__assert_fail@plt+0x2b8c>
   13ce4:	bl	1148c <__printf_chk@plt>
   13ce8:	ldrb	r1, [r4, #12]
   13cec:	ldrh	r3, [r4, #10]
   13cf0:	mov	r2, r5
   13cf4:	str	r1, [sp, #12]
   13cf8:	str	r5, [sp, #8]
   13cfc:	str	r5, [sp]
   13d00:	str	r3, [sp, #4]
   13d04:	ldr	r1, [pc, #1048]	; 14124 <__assert_fail@plt+0x2b90>
   13d08:	ldrh	r3, [r4, #8]
   13d0c:	mov	r0, #1
   13d10:	bl	1148c <__printf_chk@plt>
   13d14:	b	1395c <__assert_fail@plt+0x23c8>
   13d18:	ldrb	r3, [r1]
   13d1c:	cmp	r3, #4
   13d20:	ldrne	r3, [pc, #1024]	; 14128 <__assert_fail@plt+0x2b94>
   13d24:	bne	13830 <__assert_fail@plt+0x229c>
   13d28:	ldrb	r2, [r1, #3]
   13d2c:	ldr	r3, [pc, #880]	; 140a4 <__assert_fail@plt+0x2b10>
   13d30:	ldr	r1, [pc, #1012]	; 1412c <__assert_fail@plt+0x2b98>
   13d34:	str	r2, [sp]
   13d38:	mov	r0, #1
   13d3c:	mov	r2, r3
   13d40:	bl	1148c <__printf_chk@plt>
   13d44:	ldrb	r3, [r4, #3]
   13d48:	tst	r3, #8
   13d4c:	bne	13fc8 <__assert_fail@plt+0x2a34>
   13d50:	tst	r3, #4
   13d54:	bne	13fb0 <__assert_fail@plt+0x2a1c>
   13d58:	tst	r3, #2
   13d5c:	bne	13f98 <__assert_fail@plt+0x2a04>
   13d60:	tst	r3, #1
   13d64:	bne	13f80 <__assert_fail@plt+0x29ec>
   13d68:	mov	r6, #0
   13d6c:	b	1395c <__assert_fail@plt+0x23c8>
   13d70:	ldrb	r3, [r1]
   13d74:	cmp	r3, #4
   13d78:	ldrls	r3, [pc, #944]	; 14130 <__assert_fail@plt+0x2b9c>
   13d7c:	bls	13830 <__assert_fail@plt+0x229c>
   13d80:	ldrb	r2, [r1, #3]
   13d84:	ldr	r3, [pc, #792]	; 140a4 <__assert_fail@plt+0x2b10>
   13d88:	ldr	r1, [pc, #932]	; 14134 <__assert_fail@plt+0x2ba0>
   13d8c:	mov	r0, #1
   13d90:	strd	r2, [sp]
   13d94:	mov	r2, r3
   13d98:	bl	1148c <__printf_chk@plt>
   13d9c:	ldrb	r3, [r4]
   13da0:	cmp	r3, #4
   13da4:	addhi	r5, r4, #3
   13da8:	ldrhi	r6, [pc, #904]	; 14138 <__assert_fail@plt+0x2ba4>
   13dac:	bls	13dd8 <__assert_fail@plt+0x2844>
   13db0:	ldrb	r2, [r5, #1]
   13db4:	mov	r1, r6
   13db8:	mov	r0, #1
   13dbc:	bl	1148c <__printf_chk@plt>
   13dc0:	ldrb	r2, [r4]
   13dc4:	add	r3, r5, #2
   13dc8:	sub	r3, r3, r4
   13dcc:	cmp	r2, r3
   13dd0:	add	r5, r5, #1
   13dd4:	bgt	13db0 <__assert_fail@plt+0x281c>
   13dd8:	mov	r0, #10
   13ddc:	bl	11474 <putchar@plt>
   13de0:	mov	r6, #0
   13de4:	b	1395c <__assert_fail@plt+0x23c8>
   13de8:	ldrb	r3, [r1]
   13dec:	cmp	r3, #5
   13df0:	ldrne	r3, [pc, #836]	; 1413c <__assert_fail@plt+0x2ba8>
   13df4:	bne	13830 <__assert_fail@plt+0x229c>
   13df8:	ldrb	r2, [r1, #3]
   13dfc:	ldr	r3, [pc, #672]	; 140a4 <__assert_fail@plt+0x2b10>
   13e00:	ldr	r1, [pc, #824]	; 14140 <__assert_fail@plt+0x2bac>
   13e04:	str	r2, [sp]
   13e08:	mov	r0, #1
   13e0c:	mov	r2, r3
   13e10:	bl	1148c <__printf_chk@plt>
   13e14:	ldrb	r3, [r4, #3]
   13e18:	tst	r3, #1
   13e1c:	bne	13f68 <__assert_fail@plt+0x29d4>
   13e20:	tst	r3, #2
   13e24:	bne	13f54 <__assert_fail@plt+0x29c0>
   13e28:	ldrb	r3, [r4, #4]
   13e2c:	ldr	r2, [pc, #624]	; 140a4 <__assert_fail@plt+0x2b10>
   13e30:	ldr	r1, [pc, #780]	; 14144 <__assert_fail@plt+0x2bb0>
   13e34:	mov	r0, #1
   13e38:	bl	1148c <__printf_chk@plt>
   13e3c:	mov	r6, #0
   13e40:	b	1395c <__assert_fail@plt+0x23c8>
   13e44:	ldr	r2, [pc, #600]	; 140a4 <__assert_fail@plt+0x2b10>
   13e48:	ldr	r1, [pc, #760]	; 14148 <__assert_fail@plt+0x2bb4>
   13e4c:	mov	r0, #1
   13e50:	bl	1148c <__printf_chk@plt>
   13e54:	mov	r0, r4
   13e58:	ldrb	r1, [r4]
   13e5c:	bl	11a8c <__assert_fail@plt+0x4f8>
   13e60:	ldr	r0, [pc, #740]	; 1414c <__assert_fail@plt+0x2bb8>
   13e64:	b	13850 <__assert_fail@plt+0x22bc>
   13e68:	ldrb	r0, [r1, #5]
   13e6c:	ldrh	ip, [r1, #6]
   13e70:	ldrb	r2, [r4, #4]
   13e74:	ldrb	r1, [r1, #3]
   13e78:	ldr	r3, [pc, #548]	; 140a4 <__assert_fail@plt+0x2b10>
   13e7c:	str	r0, [sp, #12]
   13e80:	str	r1, [sp, #4]
   13e84:	str	r2, [sp]
   13e88:	str	ip, [sp, #20]
   13e8c:	str	r3, [sp, #16]
   13e90:	str	r3, [sp, #8]
   13e94:	mov	r2, r3
   13e98:	ldr	r1, [pc, #688]	; 14150 <__assert_fail@plt+0x2bbc>
   13e9c:	mov	r0, #1
   13ea0:	bl	1148c <__printf_chk@plt>
   13ea4:	mov	r6, #0
   13ea8:	b	1395c <__assert_fail@plt+0x23c8>
   13eac:	ldrb	r1, [r1, #3]
   13eb0:	bl	1b724 <__assert_fail@plt+0xa190>
   13eb4:	ldrb	r2, [r4, #3]
   13eb8:	cmp	r2, #0
   13ebc:	mov	r6, r0
   13ec0:	beq	13f3c <__assert_fail@plt+0x29a8>
   13ec4:	ldrb	r3, [r0]
   13ec8:	ldr	r1, [pc, #532]	; 140e4 <__assert_fail@plt+0x2b50>
   13ecc:	cmp	r3, #0
   13ed0:	movne	r1, r0
   13ed4:	ldr	r3, [pc, #456]	; 140a4 <__assert_fail@plt+0x2b10>
   13ed8:	str	r1, [sp, #4]
   13edc:	str	r2, [sp]
   13ee0:	ldr	r1, [pc, #620]	; 14154 <__assert_fail@plt+0x2bc0>
   13ee4:	mov	r2, r3
   13ee8:	mov	r0, #1
   13eec:	bl	1148c <__printf_chk@plt>
   13ef0:	ldrb	r3, [r4]
   13ef4:	cmp	r3, #4
   13ef8:	bls	1395c <__assert_fail@plt+0x23c8>
   13efc:	ldr	r9, [pc, #416]	; 140a4 <__assert_fail@plt+0x2b10>
   13f00:	ldr	r8, [pc, #592]	; 14158 <__assert_fail@plt+0x2bc4>
   13f04:	mov	r5, #4
   13f08:	add	r7, r4, #1
   13f0c:	ldrb	r1, [r7, r5]
   13f10:	ldrb	r3, [r4, r5]
   13f14:	mov	r2, r9
   13f18:	str	r1, [sp]
   13f1c:	mov	r0, #1
   13f20:	mov	r1, r8
   13f24:	bl	1148c <__printf_chk@plt>
   13f28:	ldrb	r3, [r4]
   13f2c:	add	r5, r5, #2
   13f30:	cmp	r5, r3
   13f34:	blt	13f0c <__assert_fail@plt+0x2978>
   13f38:	b	1395c <__assert_fail@plt+0x23c8>
   13f3c:	ldr	r1, [pc, #416]	; 140e4 <__assert_fail@plt+0x2b50>
   13f40:	b	13ed4 <__assert_fail@plt+0x2940>
   13f44:	ldr	r2, [pc, #408]	; 140e4 <__assert_fail@plt+0x2b50>
   13f48:	b	13cc8 <__assert_fail@plt+0x2734>
   13f4c:	ldr	r7, [pc, #400]	; 140e4 <__assert_fail@plt+0x2b50>
   13f50:	b	13a34 <__assert_fail@plt+0x24a0>
   13f54:	ldr	r2, [pc, #328]	; 140a4 <__assert_fail@plt+0x2b10>
   13f58:	ldr	r1, [pc, #508]	; 1415c <__assert_fail@plt+0x2bc8>
   13f5c:	mov	r0, #1
   13f60:	bl	1148c <__printf_chk@plt>
   13f64:	b	13e28 <__assert_fail@plt+0x2894>
   13f68:	ldr	r2, [pc, #308]	; 140a4 <__assert_fail@plt+0x2b10>
   13f6c:	ldr	r1, [pc, #492]	; 14160 <__assert_fail@plt+0x2bcc>
   13f70:	mov	r0, #1
   13f74:	bl	1148c <__printf_chk@plt>
   13f78:	ldrb	r3, [r4, #3]
   13f7c:	b	13e20 <__assert_fail@plt+0x288c>
   13f80:	ldr	r2, [pc, #284]	; 140a4 <__assert_fail@plt+0x2b10>
   13f84:	ldr	r1, [pc, #472]	; 14164 <__assert_fail@plt+0x2bd0>
   13f88:	mov	r0, #1
   13f8c:	bl	1148c <__printf_chk@plt>
   13f90:	mov	r6, #0
   13f94:	b	1395c <__assert_fail@plt+0x23c8>
   13f98:	ldr	r2, [pc, #260]	; 140a4 <__assert_fail@plt+0x2b10>
   13f9c:	ldr	r1, [pc, #452]	; 14168 <__assert_fail@plt+0x2bd4>
   13fa0:	mov	r0, #1
   13fa4:	bl	1148c <__printf_chk@plt>
   13fa8:	ldrb	r3, [r4, #3]
   13fac:	b	13d60 <__assert_fail@plt+0x27cc>
   13fb0:	ldr	r2, [pc, #236]	; 140a4 <__assert_fail@plt+0x2b10>
   13fb4:	ldr	r1, [pc, #432]	; 1416c <__assert_fail@plt+0x2bd8>
   13fb8:	mov	r0, #1
   13fbc:	bl	1148c <__printf_chk@plt>
   13fc0:	ldrb	r3, [r4, #3]
   13fc4:	b	13d58 <__assert_fail@plt+0x27c4>
   13fc8:	ldr	r2, [pc, #212]	; 140a4 <__assert_fail@plt+0x2b10>
   13fcc:	ldr	r1, [pc, #412]	; 14170 <__assert_fail@plt+0x2bdc>
   13fd0:	mov	r0, #1
   13fd4:	bl	1148c <__printf_chk@plt>
   13fd8:	ldrb	r3, [r4, #3]
   13fdc:	b	13d50 <__assert_fail@plt+0x27bc>
   13fe0:	mov	r2, r5
   13fe4:	ldr	r1, [pc, #392]	; 14174 <__assert_fail@plt+0x2be0>
   13fe8:	mov	r0, #1
   13fec:	bl	1148c <__printf_chk@plt>
   13ff0:	ldrb	r3, [r4, #11]
   13ff4:	b	13b7c <__assert_fail@plt+0x25e8>
   13ff8:	ldr	r2, [pc, #164]	; 140a4 <__assert_fail@plt+0x2b10>
   13ffc:	ldr	r1, [pc, #372]	; 14178 <__assert_fail@plt+0x2be4>
   14000:	mov	r0, #1
   14004:	bl	1148c <__printf_chk@plt>
   14008:	ldrb	r3, [r4, #5]
   1400c:	b	13adc <__assert_fail@plt+0x2548>
   14010:	ldr	r2, [pc, #140]	; 140a4 <__assert_fail@plt+0x2b10>
   14014:	ldr	r1, [pc, #352]	; 1417c <__assert_fail@plt+0x2be8>
   14018:	mov	r0, #1
   1401c:	bl	1148c <__printf_chk@plt>
   14020:	ldrb	r3, [r4, #3]
   14024:	b	13bf8 <__assert_fail@plt+0x2664>
   14028:	ldr	r2, [pc, #116]	; 140a4 <__assert_fail@plt+0x2b10>
   1402c:	ldr	r1, [pc, #332]	; 14180 <__assert_fail@plt+0x2bec>
   14030:	mov	r0, #1
   14034:	bl	1148c <__printf_chk@plt>
   14038:	ldrb	r3, [r4, #3]
   1403c:	b	13bf0 <__assert_fail@plt+0x265c>
   14040:	ldr	r2, [pc, #92]	; 140a4 <__assert_fail@plt+0x2b10>
   14044:	ldr	r1, [pc, #312]	; 14184 <__assert_fail@plt+0x2bf0>
   14048:	mov	r0, #1
   1404c:	bl	1148c <__printf_chk@plt>
   14050:	ldrb	r3, [r4, #5]
   14054:	b	13ad4 <__assert_fail@plt+0x2540>
   14058:	ldr	r2, [pc, #68]	; 140a4 <__assert_fail@plt+0x2b10>
   1405c:	ldr	r1, [pc, #156]	; 14100 <__assert_fail@plt+0x2b6c>
   14060:	mov	r0, #1
   14064:	bl	1148c <__printf_chk@plt>
   14068:	ldrb	r3, [r4, #5]
   1406c:	b	13acc <__assert_fail@plt+0x2538>
   14070:	ldr	r2, [pc, #44]	; 140a4 <__assert_fail@plt+0x2b10>
   14074:	ldr	r1, [pc, #268]	; 14188 <__assert_fail@plt+0x2bf4>
   14078:	mov	r0, #1
   1407c:	bl	1148c <__printf_chk@plt>
   14080:	ldrb	r3, [r4, #5]
   14084:	b	13ac4 <__assert_fail@plt+0x2530>
   14088:	mov	r2, r5
   1408c:	ldr	r1, [pc, #224]	; 14174 <__assert_fail@plt+0x2be0>
   14090:	mov	r0, #1
   14094:	bl	1148c <__printf_chk@plt>
   14098:	ldrb	r3, [r4, #5]
   1409c:	b	13abc <__assert_fail@plt+0x2528>
   140a0:	andeq	sp, r1, r8, lsl r7
   140a4:	andeq	r0, r2, r0, ror #11
   140a8:	andeq	sp, r1, r4, lsl #31
   140ac:	andeq	sp, r1, r8, asr #14
   140b0:	andeq	sp, r1, r8, ror #12
   140b4:	andeq	sp, r1, r0, ror #14
   140b8:	andeq	sp, r1, r0, ror #13
   140bc:	andeq	sp, r1, r8, ror #22
   140c0:	strdeq	sp, [r1], -r0
   140c4:	muleq	r1, r8, fp
   140c8:	strdeq	sp, [r1], -r8
   140cc:	andeq	sp, r1, r4, ror #23
   140d0:	andeq	sp, r1, r4, lsl #14
   140d4:	andeq	sp, r1, r0, lsr ip
   140d8:	andeq	sp, r1, r8, asr #12
   140dc:	andeq	sp, r1, r8, lsl #25
   140e0:	andeq	sp, r1, r0, asr r6
   140e4:	andeq	sp, r1, r0, asr #12
   140e8:			; <UNDEFINED> instruction: 0x0001dcb8
   140ec:	andeq	sp, r1, r8, lsl #13
   140f0:	andeq	sp, r1, ip, lsr #26
   140f4:	strdeq	sp, [r1], -ip
   140f8:	andeq	sp, r1, r0, ror #12
   140fc:	andeq	sp, r1, r4, lsl lr
   14100:	andeq	sp, r1, ip, lsr #27
   14104:	andeq	sp, r1, ip, lsl #13
   14108:	andeq	sp, r1, r0, lsr #13
   1410c:	andeq	sp, r1, r8, ror r9
   14110:	strdeq	sp, [r1], -r0
   14114:			; <UNDEFINED> instruction: 0x0001d6b8
   14118:	andeq	sp, r1, r4, lsl #20
   1411c:	ldrdeq	sp, [r1], -r4
   14120:	andeq	sp, r1, r4, lsr #21
   14124:	strdeq	sp, [r1], -ip
   14128:	andeq	sp, r1, ip, asr r6
   1412c:	andeq	sp, r1, ip, lsl r8
   14130:	andeq	sp, r1, r0, lsl #13
   14134:	andeq	sp, r1, r4, asr #17
   14138:	andeq	sp, r1, r0, lsl r9
   1413c:	andeq	sp, r1, r0, ror r6
   14140:	muleq	r1, r0, r7
   14144:	strdeq	sp, [r1], -ip
   14148:	andeq	sp, r1, ip, ror #30
   1414c:	andeq	sp, r1, r8, lsr #14
   14150:	ldrdeq	sp, [r1], -r4
   14154:	andeq	sp, r1, r4, lsl r9
   14158:	andeq	sp, r1, r0, asr r9
   1415c:	andeq	sp, r1, r0, ror #15
   14160:	andeq	sp, r1, r8, asr #15
   14164:	andeq	sp, r1, r0, lsr #17
   14168:	andeq	sp, r1, ip, ror r8
   1416c:	andeq	sp, r1, r8, ror #16
   14170:	andeq	sp, r1, r8, asr #16
   14174:	andeq	sp, r1, ip, ror sp
   14178:	andeq	sp, r1, r8, ror #27
   1417c:	ldrdeq	sp, [r1], -r8
   14180:			; <UNDEFINED> instruction: 0x0001d9b8
   14184:	andeq	sp, r1, r8, asr #27
   14188:	muleq	r1, ip, sp
   1418c:	push	{r4, lr}
   14190:	mov	r4, r0
   14194:	mov	r3, #0
   14198:	strb	r3, [r4]
   1419c:	mov	r0, r1
   141a0:	bl	1adfc <__assert_fail@plt+0x9868>
   141a4:	subs	r3, r0, #0
   141a8:	popeq	{r4, pc}
   141ac:	mov	r0, r4
   141b0:	ldr	r2, [pc, #8]	; 141c0 <__assert_fail@plt+0x2c2c>
   141b4:	mov	r1, #128	; 0x80
   141b8:	pop	{r4, lr}
   141bc:	b	11468 <snprintf@plt>
   141c0:	andeq	r0, r2, r8, ror #21
   141c4:	push	{r4, lr}
   141c8:	mov	r4, r0
   141cc:	mov	ip, #0
   141d0:	mov	r0, r1
   141d4:	strb	ip, [r4]
   141d8:	mov	r1, r2
   141dc:	mov	r2, r3
   141e0:	bl	1ad24 <__assert_fail@plt+0x9790>
   141e4:	subs	r3, r0, #0
   141e8:	popeq	{r4, pc}
   141ec:	mov	r0, r4
   141f0:	ldr	r2, [pc, #8]	; 14200 <__assert_fail@plt+0x2c6c>
   141f4:	mov	r1, #128	; 0x80
   141f8:	pop	{r4, lr}
   141fc:	b	11468 <snprintf@plt>
   14200:	andeq	r0, r2, r8, ror #21
   14204:	push	{r4, r5, r6, r7, r8, lr}
   14208:	sub	sp, sp, #440	; 0x1b8
   1420c:	ldr	r4, [pc, #308]	; 14348 <__assert_fail@plt+0x2db4>
   14210:	ldr	r3, [pc, #308]	; 1434c <__assert_fail@plt+0x2db8>
   14214:	mov	r1, #10
   14218:	ldr	ip, [r4]
   1421c:	add	r2, sp, #40	; 0x28
   14220:	str	r3, [sp, #12]
   14224:	mov	r3, #0
   14228:	str	r1, [sp, #8]
   1422c:	str	r2, [sp, #4]
   14230:	str	r3, [sp]
   14234:	mov	r2, #6
   14238:	mov	r3, #1536	; 0x600
   1423c:	mov	r1, #128	; 0x80
   14240:	str	ip, [sp, #436]	; 0x1b4
   14244:	bl	11534 <libusb_control_transfer@plt>
   14248:	cmp	r0, #0
   1424c:	blt	14288 <__assert_fail@plt+0x2cf4>
   14250:	cmp	r0, #10
   14254:	bne	14270 <__assert_fail@plt+0x2cdc>
   14258:	ldrb	r3, [sp, #40]	; 0x28
   1425c:	cmp	r3, #10
   14260:	bne	14270 <__assert_fail@plt+0x2cdc>
   14264:	ldrb	r3, [sp, #41]	; 0x29
   14268:	cmp	r3, #6
   1426c:	beq	142a4 <__assert_fail@plt+0x2d10>
   14270:	ldr	r2, [sp, #436]	; 0x1b4
   14274:	ldr	r3, [r4]
   14278:	cmp	r2, r3
   1427c:	bne	14344 <__assert_fail@plt+0x2db0>
   14280:	add	sp, sp, #440	; 0x1b8
   14284:	pop	{r4, r5, r6, r7, r8, pc}
   14288:	bl	11450 <__errno_location@plt>
   1428c:	ldr	r3, [r0]
   14290:	cmp	r3, #32
   14294:	beq	14270 <__assert_fail@plt+0x2cdc>
   14298:	ldr	r0, [pc, #176]	; 14350 <__assert_fail@plt+0x2dbc>
   1429c:	bl	112e8 <perror@plt>
   142a0:	b	14270 <__assert_fail@plt+0x2cdc>
   142a4:	add	r7, sp, #52	; 0x34
   142a8:	ldrb	r2, [sp, #44]	; 0x2c
   142ac:	add	r5, sp, #180	; 0xb4
   142b0:	mov	r0, r7
   142b4:	mov	r1, #128	; 0x80
   142b8:	bl	1af04 <__assert_fail@plt+0x9970>
   142bc:	add	r6, sp, #308	; 0x134
   142c0:	ldrb	r3, [sp, #45]	; 0x2d
   142c4:	ldrb	r2, [sp, #44]	; 0x2c
   142c8:	mov	r0, r5
   142cc:	mov	r1, #128	; 0x80
   142d0:	bl	1af4c <__assert_fail@plt+0x99b8>
   142d4:	ldrb	r3, [sp, #46]	; 0x2e
   142d8:	ldrb	r2, [sp, #45]	; 0x2d
   142dc:	ldrb	r1, [sp, #44]	; 0x2c
   142e0:	mov	r0, r6
   142e4:	bl	141c4 <__assert_fail@plt+0x2c30>
   142e8:	ldrb	r0, [sp, #45]	; 0x2d
   142ec:	ldrb	r1, [sp, #44]	; 0x2c
   142f0:	ldrb	r2, [sp, #42]	; 0x2a
   142f4:	ldrb	r3, [sp, #43]	; 0x2b
   142f8:	ldrb	r8, [sp, #48]	; 0x30
   142fc:	ldrb	lr, [sp, #47]	; 0x2f
   14300:	ldrb	ip, [sp, #46]	; 0x2e
   14304:	str	r0, [sp, #16]
   14308:	str	r1, [sp, #8]
   1430c:	str	r2, [sp, #4]
   14310:	str	r3, [sp]
   14314:	str	r7, [sp, #12]
   14318:	str	r6, [sp, #28]
   1431c:	str	r5, [sp, #20]
   14320:	str	r8, [sp, #36]	; 0x24
   14324:	str	lr, [sp, #32]
   14328:	str	ip, [sp, #24]
   1432c:	ldrb	r3, [sp, #41]	; 0x29
   14330:	ldrb	r2, [sp, #40]	; 0x28
   14334:	ldr	r1, [pc, #24]	; 14354 <__assert_fail@plt+0x2dc0>
   14338:	mov	r0, #1
   1433c:	bl	1148c <__printf_chk@plt>
   14340:	b	14270 <__assert_fail@plt+0x2cdc>
   14344:	bl	112d0 <__stack_chk_fail@plt>
   14348:	strdeq	ip, [r3], -r8
   1434c:	andeq	r1, r0, r8, lsl #7
   14350:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14354:			; <UNDEFINED> instruction: 0x0001dfb8
   14358:	push	{r4, r5, r6, r7, r8, r9, lr}
   1435c:	sub	sp, sp, #436	; 0x1b4
   14360:	ldr	r5, [pc, #216]	; 14440 <__assert_fail@plt+0x2eac>
   14364:	mov	r4, r1
   14368:	add	r9, sp, #44	; 0x2c
   1436c:	ldr	r3, [r5]
   14370:	mov	r6, r0
   14374:	ldrb	r2, [r1, #4]
   14378:	add	r7, sp, #172	; 0xac
   1437c:	mov	r1, #128	; 0x80
   14380:	mov	r0, r9
   14384:	str	r3, [sp, #428]	; 0x1ac
   14388:	add	r8, sp, #300	; 0x12c
   1438c:	bl	1af04 <__assert_fail@plt+0x9970>
   14390:	ldrb	r3, [r4, #5]
   14394:	ldrb	r2, [r4, #4]
   14398:	mov	r1, #128	; 0x80
   1439c:	mov	r0, r7
   143a0:	bl	1af4c <__assert_fail@plt+0x99b8>
   143a4:	ldrb	r3, [r4, #6]
   143a8:	ldrb	r2, [r4, #5]
   143ac:	ldrb	r1, [r4, #4]
   143b0:	mov	r0, r8
   143b4:	bl	141c4 <__assert_fail@plt+0x2c30>
   143b8:	mov	r0, r6
   143bc:	ldrb	r1, [r4, #7]
   143c0:	bl	1b724 <__assert_fail@plt+0xa190>
   143c4:	ldrb	lr, [r4, #7]
   143c8:	ldrb	ip, [r4, #6]
   143cc:	ldrb	r1, [r4, #4]
   143d0:	ldrb	r2, [r4, #3]
   143d4:	ldrb	r3, [r4, #2]
   143d8:	mov	r6, r0
   143dc:	ldrb	r0, [r4, #5]
   143e0:	str	lr, [sp, #32]
   143e4:	str	ip, [sp, #24]
   143e8:	str	r0, [sp, #16]
   143ec:	str	r1, [sp, #8]
   143f0:	str	r9, [sp, #12]
   143f4:	str	r8, [sp, #28]
   143f8:	str	r7, [sp, #20]
   143fc:	str	r6, [sp, #36]	; 0x24
   14400:	str	r2, [sp, #4]
   14404:	str	r3, [sp]
   14408:	ldr	r1, [pc, #52]	; 14444 <__assert_fail@plt+0x2eb0>
   1440c:	ldrb	r3, [r4, #1]
   14410:	ldrb	r2, [r4]
   14414:	mov	r0, #1
   14418:	bl	1148c <__printf_chk@plt>
   1441c:	mov	r0, r6
   14420:	bl	112a0 <free@plt>
   14424:	ldr	r2, [sp, #428]	; 0x1ac
   14428:	ldr	r3, [r5]
   1442c:	cmp	r2, r3
   14430:	bne	1443c <__assert_fail@plt+0x2ea8>
   14434:	add	sp, sp, #436	; 0x1b4
   14438:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1443c:	bl	112d0 <__stack_chk_fail@plt>
   14440:	strdeq	ip, [r3], -r8
   14444:	andeq	lr, r1, r4, asr #1
   14448:	ldr	r3, [pc, #3844]	; 15354 <__assert_fail@plt+0x3dc0>
   1444c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14450:	sub	sp, sp, #612	; 0x264
   14454:	mov	r8, r1
   14458:	ldr	r3, [r3]
   1445c:	add	r7, sp, #92	; 0x5c
   14460:	mov	r4, r0
   14464:	ldrb	r2, [r1, #5]
   14468:	str	r0, [sp, #60]	; 0x3c
   1446c:	mov	r1, #128	; 0x80
   14470:	add	r5, sp, #220	; 0xdc
   14474:	mov	r0, r7
   14478:	str	r3, [sp, #604]	; 0x25c
   1447c:	add	r6, sp, #348	; 0x15c
   14480:	bl	1af04 <__assert_fail@plt+0x9970>
   14484:	ldrb	r3, [r8, #6]
   14488:	ldrb	r2, [r8, #5]
   1448c:	mov	r1, #128	; 0x80
   14490:	mov	r0, r5
   14494:	bl	1af4c <__assert_fail@plt+0x99b8>
   14498:	ldrb	r3, [r8, #7]
   1449c:	ldrb	r2, [r8, #6]
   144a0:	ldrb	r1, [r8, #5]
   144a4:	mov	r0, r6
   144a8:	bl	141c4 <__assert_fail@plt+0x2c30>
   144ac:	ldrb	r1, [r8, #8]
   144b0:	mov	r0, r4
   144b4:	bl	1b724 <__assert_fail@plt+0xa190>
   144b8:	ldrb	lr, [r8, #7]
   144bc:	ldrb	ip, [r8, #6]
   144c0:	ldrb	r1, [r8, #4]
   144c4:	ldrb	r9, [r8, #8]
   144c8:	mov	r4, r0
   144cc:	ldrb	r0, [r8, #5]
   144d0:	str	r7, [sp, #16]
   144d4:	ldrb	r2, [r8, #3]
   144d8:	str	r6, [sp, #32]
   144dc:	ldrb	r3, [r8, #2]
   144e0:	str	lr, [sp, #28]
   144e4:	str	ip, [sp, #20]
   144e8:	str	r0, [sp, #12]
   144ec:	str	r1, [sp, #8]
   144f0:	str	r5, [sp, #24]
   144f4:	str	r4, [sp, #40]	; 0x28
   144f8:	str	r9, [sp, #36]	; 0x24
   144fc:	str	r2, [sp, #4]
   14500:	str	r3, [sp]
   14504:	ldr	r1, [pc, #3660]	; 15358 <__assert_fail@plt+0x3dc4>
   14508:	ldrb	r3, [r8, #1]
   1450c:	ldrb	r2, [r8]
   14510:	mov	r0, #1
   14514:	bl	1148c <__printf_chk@plt>
   14518:	mov	r0, r4
   1451c:	bl	112a0 <free@plt>
   14520:	ldr	r3, [r8, #20]
   14524:	cmp	r3, #0
   14528:	beq	14610 <__assert_fail@plt+0x307c>
   1452c:	cmp	r3, #1
   14530:	mov	r9, r3
   14534:	ldr	fp, [r8, #16]
   14538:	beq	14610 <__assert_fail@plt+0x307c>
   1453c:	ldrb	r2, [fp]
   14540:	cmp	r2, #1
   14544:	bls	14610 <__assert_fail@plt+0x307c>
   14548:	ldr	sl, [pc, #3596]	; 1535c <__assert_fail@plt+0x3dc8>
   1454c:	ldrb	r3, [fp, #1]
   14550:	ldrb	r1, [r8, #5]
   14554:	cmp	r3, #33	; 0x21
   14558:	beq	14a60 <__assert_fail@plt+0x34cc>
   1455c:	cmp	r3, #36	; 0x24
   14560:	beq	14a60 <__assert_fail@plt+0x34cc>
   14564:	cmp	r1, #3
   14568:	beq	14ab8 <__assert_fail@plt+0x3524>
   1456c:	bls	14a24 <__assert_fail@plt+0x3490>
   14570:	cmp	r1, #11
   14574:	beq	14a84 <__assert_fail@plt+0x34f0>
   14578:	cmp	r1, #224	; 0xe0
   1457c:	bne	14ad0 <__assert_fail@plt+0x353c>
   14580:	ldrb	r0, [r8, #6]
   14584:	cmp	r0, #1
   14588:	beq	14e08 <__assert_fail@plt+0x3874>
   1458c:	cmp	r0, #2
   14590:	bne	14a40 <__assert_fail@plt+0x34ac>
   14594:	ldrb	r1, [fp, #13]
   14598:	mov	r0, #1
   1459c:	str	r1, [sp, #36]	; 0x24
   145a0:	ldrb	ip, [fp, #12]
   145a4:	ldr	r1, [pc, #3508]	; 15360 <__assert_fail@plt+0x3dcc>
   145a8:	str	ip, [sp, #32]
   145ac:	ldrb	ip, [fp, #11]
   145b0:	str	ip, [sp, #28]
   145b4:	ldrb	ip, [fp, #10]
   145b8:	str	ip, [sp, #24]
   145bc:	ldrh	ip, [fp, #8]
   145c0:	str	ip, [sp, #20]
   145c4:	ldrh	ip, [fp, #6]
   145c8:	str	ip, [sp, #16]
   145cc:	ldrb	ip, [fp, #5]
   145d0:	str	ip, [sp, #12]
   145d4:	ldrb	ip, [fp, #4]
   145d8:	str	ip, [sp, #8]
   145dc:	ldrb	ip, [fp, #2]
   145e0:	str	ip, [sp, #4]
   145e4:	ldrb	ip, [fp, #3]
   145e8:	str	ip, [sp]
   145ec:	bl	1148c <__printf_chk@plt>
   145f0:	ldrb	r3, [fp]
   145f4:	sub	r9, r9, r3
   145f8:	cmp	r9, #1
   145fc:	add	fp, fp, r3
   14600:	bls	14610 <__assert_fail@plt+0x307c>
   14604:	ldrb	r2, [fp]
   14608:	cmp	r2, #1
   1460c:	bhi	1454c <__assert_fail@plt+0x2fb8>
   14610:	ldrb	r3, [r8, #4]
   14614:	cmp	r3, #0
   14618:	beq	14838 <__assert_fail@plt+0x32a4>
   1461c:	ldr	fp, [pc, #4008]	; 155cc <__assert_fail@plt+0x4038>
   14620:	mov	sl, #0
   14624:	mov	r9, fp
   14628:	str	sl, [sp, #52]	; 0x34
   1462c:	ldr	r6, [r8, #12]
   14630:	ldr	r1, [pc, #3372]	; 15364 <__assert_fail@plt+0x3dd0>
   14634:	add	r5, r6, sl
   14638:	ldrb	r2, [r6, sl]
   1463c:	ldrb	r4, [r5, #3]
   14640:	ldrh	r0, [r5, #4]
   14644:	ldrb	r3, [r5, #1]
   14648:	ldrb	ip, [r5, #2]
   1464c:	lsr	lr, r4, #2
   14650:	and	lr, lr, #12
   14654:	add	lr, r9, lr
   14658:	and	fp, r4, #3
   1465c:	ldr	lr, [lr, #716]	; 0x2cc
   14660:	str	r3, [sp, #56]	; 0x38
   14664:	lsr	r7, r0, #9
   14668:	ldrb	r3, [r5, #6]
   1466c:	str	lr, [sp, #24]
   14670:	str	r0, [sp, #28]
   14674:	and	lr, r4, #12
   14678:	lsl	r0, r0, #21
   1467c:	tst	ip, #128	; 0x80
   14680:	str	ip, [sp]
   14684:	and	r7, r7, #12
   14688:	and	ip, ip, #15
   1468c:	add	fp, r9, fp, lsl #2
   14690:	add	lr, r9, lr
   14694:	lsr	r0, r0, #21
   14698:	str	ip, [sp, #4]
   1469c:	add	r7, r9, r7
   146a0:	ldr	ip, [pc, #3264]	; 15368 <__assert_fail@plt+0x3dd4>
   146a4:	ldr	fp, [fp, #748]	; 0x2ec
   146a8:	ldr	lr, [lr, #732]	; 0x2dc
   146ac:	str	r0, [sp, #36]	; 0x24
   146b0:	ldr	r0, [pc, #3252]	; 1536c <__assert_fail@plt+0x3dd8>
   146b4:	ldr	r7, [r7, #700]	; 0x2bc
   146b8:	moveq	r0, ip
   146bc:	str	r3, [sp, #40]	; 0x28
   146c0:	str	r0, [sp, #8]
   146c4:	ldr	r3, [sp, #56]	; 0x38
   146c8:	str	r4, [sp, #12]
   146cc:	str	fp, [sp, #16]
   146d0:	str	lr, [sp, #20]
   146d4:	mov	r0, #1
   146d8:	str	r7, [sp, #32]
   146dc:	bl	1148c <__printf_chk@plt>
   146e0:	ldrb	r3, [r6, sl]
   146e4:	cmp	r3, #9
   146e8:	beq	149b4 <__assert_fail@plt+0x3420>
   146ec:	ldr	r6, [r5, #16]
   146f0:	cmp	r6, #0
   146f4:	beq	1481c <__assert_fail@plt+0x3288>
   146f8:	cmp	r6, #1
   146fc:	ldr	r4, [r5, #12]
   14700:	beq	1481c <__assert_fail@plt+0x3288>
   14704:	ldrb	r1, [r4]
   14708:	cmp	r1, #1
   1470c:	bls	1481c <__assert_fail@plt+0x3288>
   14710:	mov	fp, r5
   14714:	ldrb	r3, [r4, #1]
   14718:	sub	r2, r3, #9
   1471c:	cmp	r2, #39	; 0x27
   14720:	ldrls	pc, [pc, r2, lsl #2]
   14724:	b	14980 <__assert_fail@plt+0x33ec>
   14728:	strdeq	r4, [r1], -ip
   1472c:	andeq	r4, r1, r0, lsl #19
   14730:	andeq	r4, r1, ip, ror #18
   14734:	andeq	r4, r1, r0, lsl #19
   14738:	andeq	r4, r1, r0, lsl #19
   1473c:	andeq	r4, r1, r0, lsl #19
   14740:	andeq	r4, r1, r0, lsl #19
   14744:	andeq	r4, r1, r0, lsl #19
   14748:	andeq	r4, r1, r0, lsl #19
   1474c:	andeq	r4, r1, r0, lsl #19
   14750:	andeq	r4, r1, r0, lsl #19
   14754:	andeq	r4, r1, r0, lsl #19
   14758:	andeq	r4, r1, r0, lsl #19
   1475c:	andeq	r4, r1, r0, lsl #19
   14760:	andeq	r4, r1, r0, lsl #19
   14764:	andeq	r4, r1, r0, lsl #19
   14768:	andeq	r4, r1, r0, lsl #19
   1476c:	andeq	r4, r1, r0, lsl #19
   14770:	andeq	r4, r1, r0, lsl #19
   14774:	andeq	r4, r1, r0, lsl #19
   14778:	andeq	r4, r1, r0, lsl #19
   1477c:	andeq	r4, r1, r0, lsl #19
   14780:	andeq	r4, r1, r0, lsl #19
   14784:	andeq	r4, r1, r0, lsl #19
   14788:	andeq	r4, r1, ip, asr #18
   1478c:	andeq	r4, r1, r0, lsl #19
   14790:	andeq	r4, r1, r0, lsl #19
   14794:	andeq	r4, r1, r8, asr #15
   14798:	muleq	r1, r8, r8
   1479c:	andeq	r4, r1, r0, lsl #19
   147a0:	andeq	r4, r1, r0, lsl #19
   147a4:	andeq	r4, r1, r0, lsl #19
   147a8:	andeq	r4, r1, r0, lsl #19
   147ac:	andeq	r4, r1, r0, lsl #19
   147b0:	andeq	r4, r1, r0, lsl #19
   147b4:	andeq	r4, r1, r0, lsl #19
   147b8:	andeq	r4, r1, r0, lsl #19
   147bc:	andeq	r4, r1, r0, lsl #19
   147c0:	andeq	r4, r1, r0, lsl #19
   147c4:	andeq	r4, r1, r4, asr r8
   147c8:	ldrb	r3, [r8, #5]
   147cc:	cmp	r3, #8
   147d0:	beq	149e0 <__assert_fail@plt+0x344c>
   147d4:	cmp	r3, #10
   147d8:	beq	149cc <__assert_fail@plt+0x3438>
   147dc:	cmp	r3, #2
   147e0:	beq	149cc <__assert_fail@plt+0x3438>
   147e4:	ldr	r1, [pc, #2948]	; 15370 <__assert_fail@plt+0x3ddc>
   147e8:	mov	r0, #1
   147ec:	bl	1148c <__printf_chk@plt>
   147f0:	ldrb	r1, [r4]
   147f4:	mov	r0, r4
   147f8:	bl	11a8c <__assert_fail@plt+0x4f8>
   147fc:	ldrb	r3, [r4]
   14800:	sub	r6, r6, r3
   14804:	cmp	r6, #1
   14808:	add	r4, r4, r3
   1480c:	bls	1481c <__assert_fail@plt+0x3288>
   14810:	ldrb	r1, [r4]
   14814:	cmp	r1, #1
   14818:	bhi	14714 <__assert_fail@plt+0x3180>
   1481c:	ldr	r2, [sp, #52]	; 0x34
   14820:	ldrb	r3, [r8, #4]
   14824:	add	r2, r2, #1
   14828:	str	r2, [sp, #52]	; 0x34
   1482c:	cmp	r3, r2
   14830:	add	sl, sl, #20
   14834:	bhi	1462c <__assert_fail@plt+0x3098>
   14838:	ldr	r3, [pc, #2836]	; 15354 <__assert_fail@plt+0x3dc0>
   1483c:	ldr	r2, [sp, #604]	; 0x25c
   14840:	ldr	r3, [r3]
   14844:	cmp	r2, r3
   14848:	bne	169fc <__assert_fail@plt+0x5468>
   1484c:	add	sp, sp, #612	; 0x264
   14850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14854:	ldrb	r2, [r4, #2]
   14858:	ldr	r1, [pc, #2836]	; 15374 <__assert_fail@plt+0x3de0>
   1485c:	mov	r0, #1
   14860:	bl	1148c <__printf_chk@plt>
   14864:	ldrb	r0, [fp, #3]
   14868:	and	r0, r0, #3
   1486c:	cmp	r0, #2
   14870:	beq	14988 <__assert_fail@plt+0x33f4>
   14874:	cmp	r0, #1
   14878:	bne	147fc <__assert_fail@plt+0x3268>
   1487c:	ldrb	r2, [r4, #3]
   14880:	ands	r2, r2, #3
   14884:	beq	147fc <__assert_fail@plt+0x3268>
   14888:	ldr	r1, [pc, #2792]	; 15378 <__assert_fail@plt+0x3de4>
   1488c:	bl	1148c <__printf_chk@plt>
   14890:	ldrb	r3, [r4]
   14894:	b	14800 <__assert_fail@plt+0x326c>
   14898:	ldr	r2, [r8, #4]
   1489c:	ldr	r0, [pc, #2776]	; 1537c <__assert_fail@plt+0x3de8>
   148a0:	bic	r2, r2, #-16777216	; 0xff000000
   148a4:	bic	r2, r2, #255	; 0xff
   148a8:	cmp	r2, r0
   148ac:	beq	14a0c <__assert_fail@plt+0x3478>
   148b0:	ldr	r0, [pc, #2760]	; 15380 <__assert_fail@plt+0x3dec>
   148b4:	cmp	r2, r0
   148b8:	bne	147fc <__assert_fail@plt+0x3268>
   148bc:	cmp	r1, #4
   148c0:	bls	14e34 <__assert_fail@plt+0x38a0>
   148c4:	ldrb	r0, [r4, #2]
   148c8:	ldr	lr, [pc, #2740]	; 15384 <__assert_fail@plt+0x3df0>
   148cc:	ldrb	ip, [r4, #3]
   148d0:	cmp	r0, #1
   148d4:	ldr	r1, [pc, #2732]	; 15388 <__assert_fail@plt+0x3df4>
   148d8:	movne	r1, lr
   148dc:	ldrb	r2, [r4]
   148e0:	stm	sp, {r0, r1, ip}
   148e4:	mov	r0, #1
   148e8:	ldr	r1, [pc, #2716]	; 1538c <__assert_fail@plt+0x3df8>
   148ec:	bl	1148c <__printf_chk@plt>
   148f0:	ldrb	r3, [r4, #3]
   148f4:	cmp	r3, #0
   148f8:	beq	14e44 <__assert_fail@plt+0x38b0>
   148fc:	add	r7, r4, #3
   14900:	mov	r5, #0
   14904:	mov	r2, r5
   14908:	ldrb	r3, [r7, #1]!
   1490c:	ldr	r1, [pc, #2684]	; 15390 <__assert_fail@plt+0x3dfc>
   14910:	mov	r0, #1
   14914:	bl	1148c <__printf_chk@plt>
   14918:	ldrb	r2, [r4, #3]
   1491c:	add	r5, r5, #1
   14920:	cmp	r5, r2
   14924:	bcc	14904 <__assert_fail@plt+0x3370>
   14928:	add	r2, r2, #4
   1492c:	ldrb	r3, [r4]
   14930:	cmp	r3, r2
   14934:	bls	14800 <__assert_fail@plt+0x326c>
   14938:	ldr	r1, [pc, #2644]	; 15394 <__assert_fail@plt+0x3e00>
   1493c:	mov	r0, r4
   14940:	bl	11cd0 <__assert_fail@plt+0x73c>
   14944:	ldrb	r3, [r4]
   14948:	b	14800 <__assert_fail@plt+0x326c>
   1494c:	ldrb	r3, [r8, #5]
   14950:	cmp	r3, #11
   14954:	ldrne	r1, [pc, #2620]	; 15398 <__assert_fail@plt+0x3e04>
   14958:	bne	147e8 <__assert_fail@plt+0x3254>
   1495c:	mov	r0, r4
   14960:	bl	13024 <__assert_fail@plt+0x1a90>
   14964:	ldrb	r3, [r4]
   14968:	b	14800 <__assert_fail@plt+0x326c>
   1496c:	mov	r1, r4
   14970:	ldr	r0, [sp, #60]	; 0x3c
   14974:	bl	14358 <__assert_fail@plt+0x2dc4>
   14978:	ldrb	r3, [r4]
   1497c:	b	14800 <__assert_fail@plt+0x326c>
   14980:	ldr	r1, [pc, #2580]	; 1539c <__assert_fail@plt+0x3e08>
   14984:	b	147e8 <__assert_fail@plt+0x3254>
   14988:	ldrb	r3, [r4, #3]
   1498c:	tst	r3, #31
   14990:	beq	147fc <__assert_fail@plt+0x3268>
   14994:	mov	r2, #1
   14998:	mov	r0, r2
   1499c:	ldr	r1, [pc, #2556]	; 153a0 <__assert_fail@plt+0x3e0c>
   149a0:	lsl	r2, r2, r3
   149a4:	bl	1148c <__printf_chk@plt>
   149a8:	ldrb	r0, [fp, #3]
   149ac:	and	r0, r0, #3
   149b0:	b	14874 <__assert_fail@plt+0x32e0>
   149b4:	ldrb	r3, [r5, #8]
   149b8:	ldrb	r2, [r5, #7]
   149bc:	ldr	r1, [pc, #2528]	; 153a4 <__assert_fail@plt+0x3e10>
   149c0:	mov	r0, #1
   149c4:	bl	1148c <__printf_chk@plt>
   149c8:	b	146ec <__assert_fail@plt+0x3158>
   149cc:	mov	r1, r4
   149d0:	ldr	r0, [sp, #60]	; 0x3c
   149d4:	bl	13790 <__assert_fail@plt+0x21fc>
   149d8:	ldrb	r3, [r4]
   149dc:	b	14800 <__assert_fail@plt+0x326c>
   149e0:	cmp	r1, #4
   149e4:	bne	147e4 <__assert_fail@plt+0x3250>
   149e8:	ldrb	r2, [r4, #2]
   149ec:	ldr	r1, [pc, #2484]	; 153a8 <__assert_fail@plt+0x3e14>
   149f0:	mov	r0, #1
   149f4:	mov	r3, r2
   149f8:	add	r2, r9, r2, lsl #2
   149fc:	ldr	r2, [r2, #764]	; 0x2fc
   14a00:	bl	1148c <__printf_chk@plt>
   14a04:	ldrb	r3, [r4]
   14a08:	b	14800 <__assert_fail@plt+0x326c>
   14a0c:	ldrb	r2, [r8, #7]
   14a10:	mov	r1, r4
   14a14:	ldr	r0, [sp, #60]	; 0x3c
   14a18:	bl	11b88 <__assert_fail@plt+0x5f4>
   14a1c:	ldrb	r3, [r4]
   14a20:	b	14800 <__assert_fail@plt+0x326c>
   14a24:	cmp	r1, #1
   14a28:	bne	14ad0 <__assert_fail@plt+0x353c>
   14a2c:	cmp	r3, #37	; 0x25
   14a30:	bne	14a40 <__assert_fail@plt+0x34ac>
   14a34:	ldrb	r3, [r8, #6]
   14a38:	cmp	r3, #2
   14a3c:	beq	14df0 <__assert_fail@plt+0x385c>
   14a40:	mov	r1, sl
   14a44:	mov	r0, #1
   14a48:	bl	1148c <__printf_chk@plt>
   14a4c:	ldrb	r1, [fp]
   14a50:	mov	r0, fp
   14a54:	bl	11a8c <__assert_fail@plt+0x4f8>
   14a58:	ldrb	r3, [fp]
   14a5c:	b	145f4 <__assert_fail@plt+0x3060>
   14a60:	cmp	r1, #3
   14a64:	beq	14ab8 <__assert_fail@plt+0x3524>
   14a68:	bls	14a94 <__assert_fail@plt+0x3500>
   14a6c:	cmp	r1, #14
   14a70:	beq	14bec <__assert_fail@plt+0x3658>
   14a74:	cmp	r1, #254	; 0xfe
   14a78:	beq	14af4 <__assert_fail@plt+0x3560>
   14a7c:	cmp	r1, #11
   14a80:	bne	14a40 <__assert_fail@plt+0x34ac>
   14a84:	mov	r0, fp
   14a88:	bl	13024 <__assert_fail@plt+0x1a90>
   14a8c:	ldrb	r3, [fp]
   14a90:	b	145f4 <__assert_fail@plt+0x3060>
   14a94:	cmp	r1, #1
   14a98:	beq	14c84 <__assert_fail@plt+0x36f0>
   14a9c:	cmp	r1, #2
   14aa0:	bne	14a40 <__assert_fail@plt+0x34ac>
   14aa4:	mov	r1, fp
   14aa8:	ldr	r0, [sp, #60]	; 0x3c
   14aac:	bl	13790 <__assert_fail@plt+0x21fc>
   14ab0:	ldrb	r3, [fp]
   14ab4:	b	145f4 <__assert_fail@plt+0x3060>
   14ab8:	mov	r2, fp
   14abc:	add	r1, r8, #2
   14ac0:	ldr	r0, [sp, #60]	; 0x3c
   14ac4:	bl	12798 <__assert_fail@plt+0x1204>
   14ac8:	ldrb	r3, [fp]
   14acc:	b	145f4 <__assert_fail@plt+0x3060>
   14ad0:	cmp	r3, #9
   14ad4:	beq	14a58 <__assert_fail@plt+0x34c4>
   14ad8:	cmp	r3, #11
   14adc:	bne	14a40 <__assert_fail@plt+0x34ac>
   14ae0:	mov	r1, fp
   14ae4:	ldr	r0, [sp, #60]	; 0x3c
   14ae8:	bl	14358 <__assert_fail@plt+0x2dc4>
   14aec:	ldrb	r3, [fp]
   14af0:	b	145f4 <__assert_fail@plt+0x3060>
   14af4:	ldrb	r1, [r8, #6]
   14af8:	cmp	r1, #1
   14afc:	bne	14a40 <__assert_fail@plt+0x34ac>
   14b00:	cmp	r3, #33	; 0x21
   14b04:	bne	164c8 <__assert_fail@plt+0x4f34>
   14b08:	cmp	r2, #6
   14b0c:	bls	1527c <__assert_fail@plt+0x3ce8>
   14b10:	ldrb	r1, [fp, #2]
   14b14:	ldrb	r2, [fp]
   14b18:	mov	r0, #1
   14b1c:	str	r1, [sp]
   14b20:	ldr	r1, [pc, #2180]	; 153ac <__assert_fail@plt+0x3e18>
   14b24:	bl	1148c <__printf_chk@plt>
   14b28:	ldrb	r3, [fp, #2]
   14b2c:	tst	r3, #240	; 0xf0
   14b30:	bne	164d8 <__assert_fail@plt+0x4f44>
   14b34:	ldr	r1, [pc, #2492]	; 154f8 <__assert_fail@plt+0x3f64>
   14b38:	tst	r3, #8
   14b3c:	ldr	r2, [pc, #2156]	; 153b0 <__assert_fail@plt+0x3e1c>
   14b40:	mov	r0, #1
   14b44:	movne	r2, r1
   14b48:	ldr	r1, [pc, #2148]	; 153b4 <__assert_fail@plt+0x3e20>
   14b4c:	bl	1148c <__printf_chk@plt>
   14b50:	ldrb	r1, [fp, #2]
   14b54:	ldr	r3, [pc, #2140]	; 153b8 <__assert_fail@plt+0x3e24>
   14b58:	ldr	r2, [pc, #2140]	; 153bc <__assert_fail@plt+0x3e28>
   14b5c:	tst	r1, #4
   14b60:	moveq	r2, r3
   14b64:	ldr	r1, [pc, #2132]	; 153c0 <__assert_fail@plt+0x3e2c>
   14b68:	mov	r0, #1
   14b6c:	bl	1148c <__printf_chk@plt>
   14b70:	ldrb	r3, [fp, #2]
   14b74:	ldr	r5, [pc, #2120]	; 153c4 <__assert_fail@plt+0x3e30>
   14b78:	ldr	r4, [pc, #2120]	; 153c8 <__assert_fail@plt+0x3e34>
   14b7c:	tst	r3, #2
   14b80:	movne	r2, r5
   14b84:	moveq	r2, r4
   14b88:	ldr	r1, [pc, #2108]	; 153cc <__assert_fail@plt+0x3e38>
   14b8c:	mov	r0, #1
   14b90:	bl	1148c <__printf_chk@plt>
   14b94:	ldrb	r3, [fp, #2]
   14b98:	ldr	r1, [pc, #2096]	; 153d0 <__assert_fail@plt+0x3e3c>
   14b9c:	mov	r0, #1
   14ba0:	tst	r3, #1
   14ba4:	movne	r2, r5
   14ba8:	moveq	r2, r4
   14bac:	bl	1148c <__printf_chk@plt>
   14bb0:	ldrh	r3, [fp, #5]
   14bb4:	ldrh	r2, [fp, #3]
   14bb8:	ldr	r1, [pc, #2068]	; 153d4 <__assert_fail@plt+0x3e40>
   14bbc:	mov	r0, #1
   14bc0:	bl	1148c <__printf_chk@plt>
   14bc4:	ldrb	r3, [fp]
   14bc8:	cmp	r3, #8
   14bcc:	bls	145f4 <__assert_fail@plt+0x3060>
   14bd0:	ldrb	r3, [fp, #7]
   14bd4:	ldrb	r2, [fp, #8]
   14bd8:	ldr	r1, [pc, #2040]	; 153d8 <__assert_fail@plt+0x3e44>
   14bdc:	mov	r0, #1
   14be0:	bl	1148c <__printf_chk@plt>
   14be4:	ldrb	r3, [fp]
   14be8:	b	145f4 <__assert_fail@plt+0x3060>
   14bec:	ldrb	r1, [r8, #6]
   14bf0:	cmp	r1, #1
   14bf4:	beq	14d48 <__assert_fail@plt+0x37b4>
   14bf8:	cmp	r1, #2
   14bfc:	bne	14a40 <__assert_fail@plt+0x34ac>
   14c00:	cmp	r3, #36	; 0x24
   14c04:	bne	164b8 <__assert_fail@plt+0x4f24>
   14c08:	cmp	r2, #2
   14c0c:	beq	1529c <__assert_fail@plt+0x3d08>
   14c10:	ldrb	r1, [fp, #2]
   14c14:	ldrb	r2, [fp]
   14c18:	mov	r0, #1
   14c1c:	str	r1, [sp]
   14c20:	ldr	r1, [pc, #1972]	; 153dc <__assert_fail@plt+0x3e48>
   14c24:	bl	1148c <__printf_chk@plt>
   14c28:	ldrb	r2, [fp, #2]
   14c2c:	sub	r3, r2, #1
   14c30:	cmp	r3, #17
   14c34:	ldrls	pc, [pc, r3, lsl #2]
   14c38:	b	1624c <__assert_fail@plt+0x4cb8>
   14c3c:	muleq	r1, r8, ip
   14c40:	andeq	r5, r1, r0, lsl ip
   14c44:	andeq	r5, r1, r8, lsl #22
   14c48:	andeq	r6, r1, ip, lsl r1
   14c4c:	andeq	r5, r1, r8, lsr #29
   14c50:	strdeq	r5, [r1], -r8
   14c54:	andeq	r5, r1, r8, lsr #29
   14c58:	andeq	r6, r1, ip, asr #4
   14c5c:	andeq	r6, r1, ip, asr #4
   14c60:	andeq	r5, r1, r0, asr #26
   14c64:	andeq	r6, r1, ip, asr #4
   14c68:	andeq	r6, r1, ip, asr #4
   14c6c:	andeq	r5, r1, r4, lsl lr
   14c70:	andeq	r6, r1, ip, asr #4
   14c74:	andeq	r6, r1, ip, asr #4
   14c78:	andeq	r6, r1, ip, lsl r1
   14c7c:	andeq	r5, r1, r8, lsr #29
   14c80:	andeq	r5, r1, ip, lsr #27
   14c84:	ldrb	r1, [r8, #6]
   14c88:	cmp	r1, #2
   14c8c:	beq	14e4c <__assert_fail@plt+0x38b8>
   14c90:	cmp	r1, #3
   14c94:	beq	14da4 <__assert_fail@plt+0x3810>
   14c98:	cmp	r1, #1
   14c9c:	bne	14a40 <__assert_fail@plt+0x34ac>
   14ca0:	cmp	r3, #36	; 0x24
   14ca4:	ldrb	r4, [r8, #7]
   14ca8:	bne	14e64 <__assert_fail@plt+0x38d0>
   14cac:	cmp	r2, #2
   14cb0:	beq	16578 <__assert_fail@plt+0x4fe4>
   14cb4:	ldrb	r1, [fp, #2]
   14cb8:	ldrb	r2, [fp]
   14cbc:	mov	r0, #1
   14cc0:	str	r1, [sp]
   14cc4:	ldr	r1, [pc, #1812]	; 153e0 <__assert_fail@plt+0x3e4c>
   14cc8:	bl	1148c <__printf_chk@plt>
   14ccc:	cmp	r4, #0
   14cd0:	ldrb	r3, [fp, #2]
   14cd4:	beq	164e8 <__assert_fail@plt+0x4f54>
   14cd8:	cmp	r4, #32
   14cdc:	bne	14cf8 <__assert_fail@plt+0x3764>
   14ce0:	sub	r2, r3, #4
   14ce4:	uxtb	r2, r2
   14ce8:	cmp	r2, #9
   14cec:	ldrls	r3, [pc, #2264]	; 155cc <__assert_fail@plt+0x4038>
   14cf0:	addls	r3, r3, r2, lsl #2
   14cf4:	ldrls	r3, [r3, #300]	; 0x12c
   14cf8:	sub	r3, r3, #1
   14cfc:	cmp	r3, #15
   14d00:	ldrls	pc, [pc, r3, lsl #2]
   14d04:	b	164a0 <__assert_fail@plt+0x4f0c>
   14d08:	andeq	r6, r1, r0, asr r4
   14d0c:	andeq	r6, r1, r8, lsr #8
   14d10:	andeq	r6, r1, r0, lsl #8
   14d14:	andeq	r6, r1, r0, lsr #9
   14d18:	ldrdeq	r6, [r1], -r8
   14d1c:			; <UNDEFINED> instruction: 0x000163b0
   14d20:	andeq	r6, r1, r8, lsl #7
   14d24:	andeq	r6, r1, r0, ror #6
   14d28:	andeq	r6, r1, r8, lsr r3
   14d2c:	andeq	r6, r1, r0, lsl r3
   14d30:	andeq	r6, r1, r8, ror #5
   14d34:	andeq	r6, r1, r0, asr #5
   14d38:	muleq	r1, r8, r2
   14d3c:	andeq	r6, r1, r0, ror r2
   14d40:	andeq	r6, r1, r0, lsr #9
   14d44:	andeq	r6, r1, r8, ror r4
   14d48:	cmp	r3, #36	; 0x24
   14d4c:	ldrb	r4, [r8, #7]
   14d50:	bne	164a8 <__assert_fail@plt+0x4f14>
   14d54:	cmp	r2, #2
   14d58:	beq	1528c <__assert_fail@plt+0x3cf8>
   14d5c:	ldrb	r1, [fp, #2]
   14d60:	ldrb	r2, [fp]
   14d64:	mov	r0, #1
   14d68:	str	r1, [sp]
   14d6c:	ldr	r1, [pc, #1648]	; 153e4 <__assert_fail@plt+0x3e50>
   14d70:	bl	1148c <__printf_chk@plt>
   14d74:	ldrb	r3, [fp, #2]
   14d78:	sub	r3, r3, #1
   14d7c:	cmp	r3, #6
   14d80:	ldrls	pc, [pc, r3, lsl #2]
   14d84:	b	16a24 <__assert_fail@plt+0x5490>
   14d88:	andeq	r5, r1, r0, lsr #14
   14d8c:	andeq	r5, r1, ip, lsr sl
   14d90:	andeq	r5, r1, r0, lsr #19
   14d94:	ldrdeq	r5, [r1], -ip
   14d98:	strdeq	r5, [r1], -r4
   14d9c:	andeq	r5, r1, r8, ror #11
   14da0:	andeq	r5, r1, ip, lsr #5
   14da4:	cmp	r3, #36	; 0x24
   14da8:	bne	14e74 <__assert_fail@plt+0x38e0>
   14dac:	cmp	r2, #2
   14db0:	beq	16504 <__assert_fail@plt+0x4f70>
   14db4:	ldrb	r1, [fp, #2]
   14db8:	ldrb	r2, [fp]
   14dbc:	mov	r0, #1
   14dc0:	str	r1, [sp]
   14dc4:	ldr	r1, [pc, #1564]	; 153e8 <__assert_fail@plt+0x3e54>
   14dc8:	bl	1148c <__printf_chk@plt>
   14dcc:	ldrb	r3, [fp, #2]
   14dd0:	sub	r3, r3, #1
   14dd4:	cmp	r3, #3
   14dd8:	ldrls	pc, [pc, r3, lsl #2]
   14ddc:	b	16a00 <__assert_fail@plt+0x546c>
   14de0:	andeq	r5, r1, r4, lsr #4
   14de4:	muleq	r1, ip, r1
   14de8:	strheq	r5, [r1], -r8
   14dec:	andeq	r4, r1, r4, lsl #29
   14df0:	ldrb	r2, [r8, #7]
   14df4:	mov	r1, fp
   14df8:	ldr	r0, [sp, #60]	; 0x3c
   14dfc:	bl	11b88 <__assert_fail@plt+0x5f4>
   14e00:	ldrb	r3, [fp]
   14e04:	b	145f4 <__assert_fail@plt+0x3060>
   14e08:	ldrb	r1, [r8, #7]
   14e0c:	cmp	r1, #2
   14e10:	bne	14a40 <__assert_fail@plt+0x34ac>
   14e14:	ldrb	r1, [fp, #2]
   14e18:	str	r1, [sp, #4]
   14e1c:	ldrb	ip, [fp, #3]
   14e20:	ldr	r1, [pc, #1476]	; 153ec <__assert_fail@plt+0x3e58>
   14e24:	str	ip, [sp]
   14e28:	bl	1148c <__printf_chk@plt>
   14e2c:	ldrb	r3, [fp]
   14e30:	b	145f4 <__assert_fail@plt+0x3060>
   14e34:	ldr	r0, [pc, #1948]	; 155d8 <__assert_fail@plt+0x4044>
   14e38:	bl	11378 <puts@plt>
   14e3c:	ldrb	r3, [r4, #1]
   14e40:	b	148c4 <__assert_fail@plt+0x3330>
   14e44:	mov	r2, #4
   14e48:	b	1492c <__assert_fail@plt+0x3398>
   14e4c:	ldrb	r2, [r8, #7]
   14e50:	mov	r1, fp
   14e54:	ldr	r0, [sp, #60]	; 0x3c
   14e58:	bl	11d40 <__assert_fail@plt+0x7ac>
   14e5c:	ldrb	r3, [fp]
   14e60:	b	145f4 <__assert_fail@plt+0x3060>
   14e64:	ldr	r0, [pc, #1880]	; 155c4 <__assert_fail@plt+0x4030>
   14e68:	bl	11378 <puts@plt>
   14e6c:	ldrb	r3, [fp, #1]
   14e70:	b	14cb4 <__assert_fail@plt+0x3720>
   14e74:	ldr	r0, [pc, #1864]	; 155c4 <__assert_fail@plt+0x4030>
   14e78:	bl	11378 <puts@plt>
   14e7c:	ldrb	r3, [fp, #1]
   14e80:	b	14db4 <__assert_fail@plt+0x3820>
   14e84:	ldr	r0, [pc, #1380]	; 153f0 <__assert_fail@plt+0x3e5c>
   14e88:	bl	11378 <puts@plt>
   14e8c:	ldrb	r3, [fp]
   14e90:	cmp	r3, #11
   14e94:	bls	1668c <__assert_fail@plt+0x50f8>
   14e98:	ldrb	r3, [fp, #4]
   14e9c:	ldrb	r2, [fp, #3]
   14ea0:	ldr	r1, [pc, #1356]	; 153f4 <__assert_fail@plt+0x3e60>
   14ea4:	mov	r0, #1
   14ea8:	bl	1148c <__printf_chk@plt>
   14eac:	ldrb	r3, [fp, #4]
   14eb0:	cmp	r3, #0
   14eb4:	beq	1696c <__assert_fail@plt+0x53d8>
   14eb8:	ldr	r7, [pc, #1336]	; 153f8 <__assert_fail@plt+0x3e64>
   14ebc:	mov	r4, #0
   14ec0:	add	r5, fp, #6
   14ec4:	add	r6, fp, #5
   14ec8:	ldrb	r1, [r5, r4, lsl #1]
   14ecc:	ldrb	r3, [r6, r4, lsl #1]
   14ed0:	mov	r2, r4
   14ed4:	str	r1, [sp, #4]
   14ed8:	str	r4, [sp]
   14edc:	mov	r1, r7
   14ee0:	mov	r0, #1
   14ee4:	bl	1148c <__printf_chk@plt>
   14ee8:	ldrb	r3, [fp, #4]
   14eec:	add	r4, r4, #1
   14ef0:	cmp	r4, r3
   14ef4:	bcc	14ec8 <__assert_fail@plt+0x3934>
   14ef8:	lsl	r3, r3, #1
   14efc:	add	r2, r3, #5
   14f00:	add	r0, r3, #6
   14f04:	add	r1, r3, #7
   14f08:	add	r4, r3, #8
   14f0c:	ldrb	ip, [fp, r4]
   14f10:	ldrb	r3, [fp, r0]
   14f14:	ldrb	r2, [fp, r2]
   14f18:	str	ip, [sp, #4]
   14f1c:	ldrb	r1, [fp, r1]
   14f20:	mov	r0, #1
   14f24:	str	r1, [sp]
   14f28:	ldr	r1, [pc, #1228]	; 153fc <__assert_fail@plt+0x3e68>
   14f2c:	bl	1148c <__printf_chk@plt>
   14f30:	ldrb	r5, [fp, r4]
   14f34:	cmp	r5, #0
   14f38:	beq	16980 <__assert_fail@plt+0x53ec>
   14f3c:	ldrb	r0, [fp, #4]
   14f40:	mov	r1, #2
   14f44:	add	ip, fp, #8
   14f48:	mov	r2, #0
   14f4c:	mla	r3, r1, r0, fp
   14f50:	smlabb	r1, r1, r0, ip
   14f54:	add	r3, r3, #8
   14f58:	add	r0, r1, r5
   14f5c:	mov	r4, r2
   14f60:	ldrb	r1, [r3, #1]!
   14f64:	cmp	r3, r0
   14f68:	orr	r4, r4, r1, lsl r2
   14f6c:	add	r2, r2, #8
   14f70:	bne	14f60 <__assert_fail@plt+0x39cc>
   14f74:	mov	r2, r4
   14f78:	ldr	r1, [pc, #1152]	; 15400 <__assert_fail@plt+0x3e6c>
   14f7c:	mov	r0, #1
   14f80:	bl	1148c <__printf_chk@plt>
   14f84:	and	r2, r4, #4
   14f88:	str	r2, [sp, #80]	; 0x50
   14f8c:	and	r2, r4, #8
   14f90:	str	r2, [sp, #68]	; 0x44
   14f94:	and	r2, r4, #16
   14f98:	str	r2, [sp, #72]	; 0x48
   14f9c:	and	r2, r4, #32
   14fa0:	str	r2, [sp, #76]	; 0x4c
   14fa4:	and	r2, r4, #64	; 0x40
   14fa8:	str	r2, [sp, #52]	; 0x34
   14fac:	and	r2, r4, #128	; 0x80
   14fb0:	tst	r4, #1
   14fb4:	str	r2, [sp, #56]	; 0x38
   14fb8:	and	r2, r4, #256	; 0x100
   14fbc:	and	r3, r4, #2
   14fc0:	and	r7, r4, #512	; 0x200
   14fc4:	and	r6, r4, #1024	; 0x400
   14fc8:	str	r2, [sp, #64]	; 0x40
   14fcc:	and	r4, r4, #2048	; 0x800
   14fd0:	beq	14fe4 <__assert_fail@plt+0x3a50>
   14fd4:	ldr	r0, [pc, #1064]	; 15404 <__assert_fail@plt+0x3e70>
   14fd8:	str	r3, [sp, #84]	; 0x54
   14fdc:	bl	11378 <puts@plt>
   14fe0:	ldr	r3, [sp, #84]	; 0x54
   14fe4:	cmp	r3, #0
   14fe8:	beq	14ff4 <__assert_fail@plt+0x3a60>
   14fec:	ldr	r0, [pc, #1044]	; 15408 <__assert_fail@plt+0x3e74>
   14ff0:	bl	11378 <puts@plt>
   14ff4:	ldr	r3, [sp, #80]	; 0x50
   14ff8:	cmp	r3, #0
   14ffc:	beq	15008 <__assert_fail@plt+0x3a74>
   15000:	ldr	r0, [pc, #1028]	; 1540c <__assert_fail@plt+0x3e78>
   15004:	bl	11378 <puts@plt>
   15008:	ldr	r3, [sp, #68]	; 0x44
   1500c:	cmp	r3, #0
   15010:	bne	16840 <__assert_fail@plt+0x52ac>
   15014:	ldr	r3, [sp, #72]	; 0x48
   15018:	cmp	r3, #0
   1501c:	bne	16834 <__assert_fail@plt+0x52a0>
   15020:	ldr	r3, [sp, #76]	; 0x4c
   15024:	cmp	r3, #0
   15028:	bne	16828 <__assert_fail@plt+0x5294>
   1502c:	ldr	r3, [sp, #52]	; 0x34
   15030:	cmp	r3, #0
   15034:	bne	1681c <__assert_fail@plt+0x5288>
   15038:	ldr	r3, [sp, #56]	; 0x38
   1503c:	cmp	r3, #0
   15040:	bne	16810 <__assert_fail@plt+0x527c>
   15044:	ldr	r3, [sp, #64]	; 0x40
   15048:	cmp	r3, #0
   1504c:	bne	16804 <__assert_fail@plt+0x5270>
   15050:	cmp	r7, #0
   15054:	bne	167f8 <__assert_fail@plt+0x5264>
   15058:	cmp	r6, #0
   1505c:	bne	167ec <__assert_fail@plt+0x5258>
   15060:	cmp	r4, #0
   15064:	bne	165f4 <__assert_fail@plt+0x5060>
   15068:	ldrb	r4, [fp, #4]
   1506c:	ldr	r0, [sp, #60]	; 0x3c
   15070:	add	r4, r5, r4, lsl #1
   15074:	add	r6, r4, #9
   15078:	ldrb	r1, [fp, r6]
   1507c:	bl	1b724 <__assert_fail@plt+0xa190>
   15080:	ldrb	r2, [fp, r6]
   15084:	ldr	r1, [pc, #900]	; 15410 <__assert_fail@plt+0x3e7c>
   15088:	mov	r3, r0
   1508c:	mov	r5, r0
   15090:	mov	r0, #1
   15094:	bl	1148c <__printf_chk@plt>
   15098:	ldrb	r3, [fp]
   1509c:	add	r2, r4, #10
   150a0:	cmp	r2, r3
   150a4:	bcs	15214 <__assert_fail@plt+0x3c80>
   150a8:	ldr	r1, [pc, #1180]	; 1554c <__assert_fail@plt+0x3fb8>
   150ac:	mov	r0, fp
   150b0:	bl	11cd0 <__assert_fail@plt+0x73c>
   150b4:	b	15214 <__assert_fail@plt+0x3c80>
   150b8:	ldr	r0, [pc, #852]	; 15414 <__assert_fail@plt+0x3e80>
   150bc:	bl	11378 <puts@plt>
   150c0:	ldrb	r3, [fp]
   150c4:	cmp	r3, #8
   150c8:	bls	166a4 <__assert_fail@plt+0x5110>
   150cc:	ldrb	r2, [fp, #3]
   150d0:	ldrb	r1, [fp, #5]
   150d4:	mov	r0, #1
   150d8:	cmp	r2, #2
   150dc:	str	r1, [sp, #4]
   150e0:	ldrls	r3, [pc, #1252]	; 155cc <__assert_fail@plt+0x4038>
   150e4:	ldrb	ip, [fp, #4]
   150e8:	addls	r3, r3, r2, lsl #2
   150ec:	ldrhi	r3, [pc, #656]	; 15384 <__assert_fail@plt+0x3df0>
   150f0:	ldrls	r3, [r3, #340]	; 0x154
   150f4:	ldr	r1, [pc, #796]	; 15418 <__assert_fail@plt+0x3e84>
   150f8:	str	ip, [sp]
   150fc:	bl	1148c <__printf_chk@plt>
   15100:	ldrb	r3, [fp, #5]
   15104:	cmp	r3, #0
   15108:	beq	169ac <__assert_fail@plt+0x5418>
   1510c:	ldr	r7, [pc, #740]	; 153f8 <__assert_fail@plt+0x3e64>
   15110:	mov	r4, #0
   15114:	add	r5, fp, #6
   15118:	add	r6, fp, #7
   1511c:	ldrb	r1, [r6, r4, lsl #1]
   15120:	ldrb	r3, [r5, r4, lsl #1]
   15124:	mov	r2, r4
   15128:	str	r1, [sp, #4]
   1512c:	str	r4, [sp]
   15130:	mov	r1, r7
   15134:	mov	r0, #1
   15138:	bl	1148c <__printf_chk@plt>
   1513c:	ldrb	r3, [fp, #5]
   15140:	add	r4, r4, #1
   15144:	cmp	r4, r3
   15148:	bcc	1511c <__assert_fail@plt+0x3b88>
   1514c:	add	r3, r3, #3
   15150:	lsl	r4, r3, #1
   15154:	add	r6, r4, #1
   15158:	ldrb	r1, [fp, r4]
   1515c:	ldr	r0, [sp, #60]	; 0x3c
   15160:	bl	1b724 <__assert_fail@plt+0xa190>
   15164:	ldrb	r2, [fp, r4]
   15168:	ldr	r1, [pc, #684]	; 1541c <__assert_fail@plt+0x3e88>
   1516c:	mov	r3, r0
   15170:	mov	r5, r0
   15174:	mov	r0, #1
   15178:	bl	1148c <__printf_chk@plt>
   1517c:	ldrb	r3, [fp]
   15180:	cmp	r3, r6
   15184:	bls	15214 <__assert_fail@plt+0x3c80>
   15188:	mov	r2, r6
   1518c:	ldr	r1, [pc, #952]	; 1554c <__assert_fail@plt+0x3fb8>
   15190:	mov	r0, fp
   15194:	bl	11cd0 <__assert_fail@plt+0x73c>
   15198:	b	15214 <__assert_fail@plt+0x3c80>
   1519c:	ldr	r0, [pc, #636]	; 15420 <__assert_fail@plt+0x3e8c>
   151a0:	bl	11378 <puts@plt>
   151a4:	ldrb	r3, [fp]
   151a8:	cmp	r3, #5
   151ac:	bls	1665c <__assert_fail@plt+0x50c8>
   151b0:	ldrb	r1, [fp, #5]
   151b4:	ldr	r0, [sp, #60]	; 0x3c
   151b8:	bl	1b724 <__assert_fail@plt+0xa190>
   151bc:	ldrb	r2, [fp, #3]
   151c0:	cmp	r2, #2
   151c4:	ldrls	r3, [pc, #1024]	; 155cc <__assert_fail@plt+0x4038>
   151c8:	ldrhi	r3, [pc, #436]	; 15384 <__assert_fail@plt+0x3df0>
   151cc:	str	r0, [sp, #8]
   151d0:	ldrb	r1, [fp, #5]
   151d4:	addls	r3, r3, r2, lsl #2
   151d8:	mov	r5, r0
   151dc:	str	r1, [sp, #4]
   151e0:	ldrb	ip, [fp, #4]
   151e4:	ldrls	r3, [r3, #340]	; 0x154
   151e8:	ldr	r1, [pc, #564]	; 15424 <__assert_fail@plt+0x3e90>
   151ec:	mov	r0, #1
   151f0:	str	ip, [sp]
   151f4:	bl	1148c <__printf_chk@plt>
   151f8:	ldrb	r3, [fp]
   151fc:	cmp	r3, #6
   15200:	bls	15214 <__assert_fail@plt+0x3c80>
   15204:	mov	r2, #6
   15208:	ldr	r1, [pc, #828]	; 1554c <__assert_fail@plt+0x3fb8>
   1520c:	mov	r0, fp
   15210:	bl	11cd0 <__assert_fail@plt+0x73c>
   15214:	mov	r0, r5
   15218:	bl	112a0 <free@plt>
   1521c:	ldrb	r3, [fp]
   15220:	b	145f4 <__assert_fail@plt+0x3060>
   15224:	ldr	r0, [pc, #548]	; 15450 <__assert_fail@plt+0x3ebc>
   15228:	bl	11378 <puts@plt>
   1522c:	ldrb	r3, [fp]
   15230:	cmp	r3, #6
   15234:	bls	16698 <__assert_fail@plt+0x5104>
   15238:	ldrh	r1, [fp, #5]
   1523c:	ldrb	r3, [fp, #3]
   15240:	ldrb	r2, [fp, #4]
   15244:	mov	r0, #1
   15248:	str	r1, [sp]
   1524c:	ldr	r1, [pc, #468]	; 15428 <__assert_fail@plt+0x3e94>
   15250:	bl	1148c <__printf_chk@plt>
   15254:	ldrb	r3, [fp]
   15258:	cmp	r3, #7
   1525c:	movls	r5, #0
   15260:	bls	15214 <__assert_fail@plt+0x3c80>
   15264:	mov	r2, #7
   15268:	ldr	r1, [pc, #732]	; 1554c <__assert_fail@plt+0x3fb8>
   1526c:	mov	r0, fp
   15270:	bl	11cd0 <__assert_fail@plt+0x73c>
   15274:	mov	r5, #0
   15278:	b	15214 <__assert_fail@plt+0x3c80>
   1527c:	ldr	r0, [pc, #852]	; 155d8 <__assert_fail@plt+0x4044>
   15280:	bl	11378 <puts@plt>
   15284:	ldrb	r3, [fp, #1]
   15288:	b	14b10 <__assert_fail@plt+0x357c>
   1528c:	ldr	r0, [pc, #836]	; 155d8 <__assert_fail@plt+0x4044>
   15290:	bl	11378 <puts@plt>
   15294:	ldrb	r3, [fp, #1]
   15298:	b	14d5c <__assert_fail@plt+0x37c8>
   1529c:	ldr	r0, [pc, #820]	; 155d8 <__assert_fail@plt+0x4044>
   152a0:	bl	11378 <puts@plt>
   152a4:	ldrb	r3, [fp, #1]
   152a8:	b	14c10 <__assert_fail@plt+0x367c>
   152ac:	ldr	r0, [pc, #376]	; 1542c <__assert_fail@plt+0x3e98>
   152b0:	bl	11378 <puts@plt>
   152b4:	ldrb	r1, [fp, #5]
   152b8:	ldr	r0, [sp, #60]	; 0x3c
   152bc:	bl	1b724 <__assert_fail@plt+0xa190>
   152c0:	ldrb	r3, [fp]
   152c4:	cmp	r3, #12
   152c8:	str	r0, [sp, #52]	; 0x34
   152cc:	bls	16644 <__assert_fail@plt+0x50b0>
   152d0:	ldrb	r1, [fp, #6]
   152d4:	ldrb	r3, [fp, #4]
   152d8:	ldrb	r2, [fp, #3]
   152dc:	str	r1, [sp, #8]
   152e0:	ldr	r1, [sp, #52]	; 0x34
   152e4:	mov	r0, #1
   152e8:	str	r1, [sp, #4]
   152ec:	ldrb	r1, [fp, #5]
   152f0:	ldr	r5, [pc, #748]	; 155e4 <__assert_fail@plt+0x4050>
   152f4:	mov	r4, #0
   152f8:	str	r1, [sp]
   152fc:	ldr	r1, [pc, #300]	; 15430 <__assert_fail@plt+0x3e9c>
   15300:	bl	1148c <__printf_chk@plt>
   15304:	ldrh	r3, [fp, #8]
   15308:	ldrb	r7, [fp, #7]
   1530c:	ldr	r1, [pc, #288]	; 15434 <__assert_fail@plt+0x3ea0>
   15310:	mov	r0, #1
   15314:	orr	r7, r7, r3, lsl #8
   15318:	mov	r2, r7
   1531c:	bl	1148c <__printf_chk@plt>
   15320:	b	15330 <__assert_fail@plt+0x3d9c>
   15324:	add	r4, r4, #1
   15328:	cmp	r4, #20
   1532c:	beq	16514 <__assert_fail@plt+0x4f80>
   15330:	lsr	r3, r7, r4
   15334:	tst	r3, #1
   15338:	beq	15324 <__assert_fail@plt+0x3d90>
   1533c:	ldr	r3, [pc, #656]	; 155d4 <__assert_fail@plt+0x4040>
   15340:	mov	r1, r5
   15344:	mov	r0, #1
   15348:	ldr	r2, [r3, r4, lsl #2]
   1534c:	bl	1148c <__printf_chk@plt>
   15350:	b	15324 <__assert_fail@plt+0x3d90>
   15354:	strdeq	ip, [r3], -r8
   15358:	andeq	lr, r1, r8, lsr r2
   1535c:	andeq	r0, r2, r4, lsr r3
   15360:	andeq	r0, r2, r4, ror #3
   15364:	andeq	r0, r2, ip, asr #6
   15368:	andeq	lr, r1, ip, lsr #4
   1536c:	andeq	lr, r1, r8, lsr #4
   15370:	andeq	r0, r2, r0, lsl #12
   15374:	andeq	r0, r2, r4, lsr r6
   15378:	andeq	r0, r2, r8, ror #12
   1537c:	andeq	r0, r2, r0, lsl #2
   15380:	andeq	r0, r3, r0, lsl #2
   15384:	ldrdeq	lr, [r1], -ip
   15388:	andeq	lr, r1, r0, lsr r2
   1538c:	strdeq	r0, [r2], -ip
   15390:			; <UNDEFINED> instruction: 0x000205b8
   15394:	ldrdeq	r0, [r2], -ip
   15398:	andeq	r0, r2, ip, lsl r6
   1539c:	andeq	r0, r2, ip, ror r6
   153a0:	andeq	r0, r2, ip, asr #12
   153a4:			; <UNDEFINED> instruction: 0x000204b8
   153a8:	andeq	r0, r2, r8, ror #11
   153ac:	andeq	pc, r1, r8, ror #30
   153b0:	strdeq	lr, [r1], -r0
   153b4:	andeq	r0, r2, r4, asr #32
   153b8:	andeq	lr, r1, r4, lsl #4
   153bc:	strdeq	lr, [r1], -r8
   153c0:	andeq	r0, r2, r0, rrx
   153c4:	andeq	lr, r1, r0, lsl r2
   153c8:	andeq	lr, r1, ip, lsl r2
   153cc:	andeq	r0, r2, ip, ror r0
   153d0:	muleq	r2, r4, r0
   153d4:	andeq	r0, r2, ip, lsr #1
   153d8:	andeq	r0, r2, r8, lsl r1
   153dc:	ldrdeq	pc, [r1], -ip
   153e0:	andeq	lr, r1, r0, ror r3
   153e4:	andeq	lr, r1, ip, ror #19
   153e8:	andeq	lr, r1, r0, lsl #10
   153ec:	andeq	r0, r2, ip, asr #2
   153f0:	andeq	lr, r1, r4, lsr r7
   153f4:	andeq	lr, r1, r0, asr #14
   153f8:	andeq	lr, r1, ip, asr #13
   153fc:	andeq	lr, r1, r4, lsl #15
   15400:	andeq	lr, r1, r8, lsl #16
   15404:	andeq	lr, r1, r8, lsr #16
   15408:	andeq	lr, r1, ip, lsr r8
   1540c:	andeq	lr, r1, r4, asr r8
   15410:	andeq	lr, r1, r8, lsr #19
   15414:	andeq	lr, r1, r8, asr r6
   15418:	andeq	lr, r1, r8, ror #12
   1541c:	andeq	lr, r1, r0, lsl r7
   15420:	andeq	lr, r1, r0, ror #11
   15424:	strdeq	lr, [r1], -r0
   15428:	muleq	r1, r8, r5
   1542c:	strdeq	lr, [r1], -r8
   15430:	andeq	pc, r1, r8
   15434:	andeq	pc, r1, ip, lsl #1
   15438:	andeq	lr, r1, ip, ror #29
   1543c:	andeq	lr, r1, r0, lsl #30
   15440:	andeq	lr, r1, r8, lsl #31
   15444:	andeq	lr, r1, r0, ror #28
   15448:	ldrdeq	lr, [r1], -r0
   1544c:	andeq	lr, r1, ip, lsr #31
   15450:	andeq	lr, r1, ip, lsl #11
   15454:	tstmi	fp, #2096	; 0x830
   15458:	andeq	lr, r1, r8, ror sl
   1545c:	andeq	lr, r1, r8, lsl #22
   15460:	andeq	lr, r1, ip, ror #27
   15464:	andeq	lr, r1, r0, lsl #28
   15468:	andeq	lr, r1, r4, lsl #29
   1546c:	andeq	lr, r1, r0, asr sp
   15470:	andeq	lr, r1, r0, ror #26
   15474:	andeq	lr, r1, r8, asr #27
   15478:	andeq	lr, r1, r4, lsr #27
   1547c:	muleq	r1, r0, ip
   15480:	andeq	lr, r1, r4, lsr #25
   15484:	andeq	lr, r1, ip, lsr #22
   15488:	andeq	r0, r0, r1, lsl #4
   1548c:	andeq	lr, r1, r0, asr #22
   15490:	andeq	lr, r1, r8, lsr #23
   15494:	andeq	fp, r1, ip, asr sp
   15498:	andeq	pc, r1, r4, ror #8
   1549c:	andeq	pc, r1, r8, ror r4	; <UNPREDICTABLE>
   154a0:	andeq	pc, r1, r4, lsl #10
   154a4:	ldrdeq	pc, [r1], -r4
   154a8:	andeq	pc, r1, r0, ror #10
   154ac:	andeq	pc, r1, ip, asr r3	; <UNPREDICTABLE>
   154b0:	andeq	pc, r1, ip, ror #6
   154b4:	andeq	pc, r1, r8, lsr r4	; <UNPREDICTABLE>
   154b8:	andeq	pc, r1, ip, lsl #3
   154bc:	muleq	r1, ip, r1
   154c0:	andeq	pc, r1, ip, lsr #6
   154c4:	andeq	pc, r1, r8, lsr #26
   154c8:	andeq	pc, r1, ip, lsr sp	; <UNPREDICTABLE>
   154cc:	muleq	r1, ip, lr
   154d0:			; <UNDEFINED> instruction: 0x0001feb4
   154d4:	andeq	pc, r1, r0, ror #29
   154d8:	strdeq	pc, [r1], -r0
   154dc:	andeq	pc, r1, r0, lsl #28
   154e0:	andeq	pc, r1, r4, lsr lr	; <UNPREDICTABLE>
   154e4:	andeq	pc, r1, r8, ror #28
   154e8:	ldrdeq	r9, [r2], -r4
   154ec:	andeq	pc, r1, ip, lsr #17
   154f0:	andeq	pc, r1, r0, asr #17
   154f4:	andeq	lr, r1, ip, ror #3
   154f8:	ldrdeq	r2, [r2], -r8
   154fc:	andeq	pc, r1, r0, lsr #18
   15500:	andeq	pc, r1, r0, ror #18
   15504:	andeq	pc, r1, ip, lsl #20
   15508:	andeq	pc, r1, ip, lsl #21
   1550c:	andeq	pc, r1, r8, lsl #23
   15510:			; <UNDEFINED> instruction: 0x0001fbb4
   15514:	andeq	pc, r1, r4, asr #23
   15518:	andeq	pc, r1, ip, asr #24
   1551c:	andeq	pc, r1, r0, ror ip	; <UNPREDICTABLE>
   15520:	andeq	pc, r1, r8, lsr #11
   15524:	andeq	pc, r1, r0, asr #11
   15528:	andeq	lr, r1, r4, ror #3
   1552c:	andeq	lr, r1, r8, ror #3
   15530:	andeq	pc, r1, ip, lsr #14
   15534:	andeq	pc, r1, ip, asr r7	; <UNPREDICTABLE>
   15538:	andeq	pc, r1, r4, lsl #15
   1553c:	andeq	pc, r1, r4, lsr #15
   15540:	andeq	pc, r1, r0, asr #15
   15544:	ldrdeq	pc, [r1], -r0
   15548:	andeq	pc, r1, r8, lsr #16
   1554c:	andeq	ip, r1, r8, lsl #31
   15550:	andeq	ip, r1, ip, ror #22
   15554:	andeq	lr, r1, r4, lsr #9
   15558:			; <UNDEFINED> instruction: 0x000238b8
   1555c:	muleq	r1, r0, r4
   15560:	andeq	r3, r2, r8, lsr sl
   15564:	andeq	lr, r1, r0, lsl #9
   15568:	strdeq	r3, [r2], -ip
   1556c:	andeq	lr, r1, r0, ror r4
   15570:	andeq	r3, r2, r4, asr #27
   15574:	andeq	lr, r1, r0, ror #8
   15578:	andeq	r4, r2, r8, lsl #9
   1557c:	andeq	lr, r1, r0, asr r4
   15580:	andeq	r5, r2, r4, lsr #17
   15584:			; <UNDEFINED> instruction: 0x0001e4bc
   15588:	andeq	r4, r2, r4, lsl #4
   1558c:	andeq	lr, r1, r0, asr #8
   15590:	strdeq	r4, [r2], -r0
   15594:	andeq	lr, r1, r0, lsr r4
   15598:	andeq	r4, r2, r8, ror #22
   1559c:	andeq	lr, r1, r4, lsr #8
   155a0:	ldrdeq	r5, [r2], -ip
   155a4:	andeq	lr, r1, r4, lsl r4
   155a8:	andeq	r5, r2, r4, ror r4
   155ac:	andeq	lr, r1, r4, lsl #8
   155b0:	andeq	r5, r2, r0, ror #20
   155b4:	strdeq	lr, [r1], -ip
   155b8:	andeq	r4, r2, ip, asr pc
   155bc:	andeq	lr, r1, r8, asr #9
   155c0:	ldrdeq	lr, [r1], -r8
   155c4:	muleq	r1, ip, r3
   155c8:	andeq	r0, r2, r4, lsr #32
   155cc:	andeq	fp, r1, r4, lsr #23
   155d0:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   155d4:	andeq	fp, r1, r0, asr #27
   155d8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   155dc:	andeq	lr, r1, r4, lsr #29
   155e0:	andeq	fp, r1, r8, lsr #27
   155e4:			; <UNDEFINED> instruction: 0x000206bc
   155e8:	ldr	r0, [pc, #-440]	; 15438 <__assert_fail@plt+0x3ea4>
   155ec:	bl	11378 <puts@plt>
   155f0:	ldrb	r5, [fp, #21]
   155f4:	ldr	r0, [sp, #60]	; 0x3c
   155f8:	add	r3, r5, #22
   155fc:	add	r2, fp, r3
   15600:	ldrb	r7, [fp, r3]
   15604:	str	r2, [sp, #56]	; 0x38
   15608:	add	r4, r5, r7
   1560c:	add	r3, r4, #23
   15610:	add	r2, fp, r3
   15614:	ldrb	r1, [fp, r3]
   15618:	str	r2, [sp, #68]	; 0x44
   1561c:	bl	1b724 <__assert_fail@plt+0xa190>
   15620:	ldrb	r3, [fp]
   15624:	add	r2, r4, #24
   15628:	str	r2, [sp, #64]	; 0x40
   1562c:	cmp	r3, r2
   15630:	str	r0, [sp, #52]	; 0x34
   15634:	bcc	165e8 <__assert_fail@plt+0x5054>
   15638:	add	r0, fp, #4
   1563c:	ldrb	r4, [fp, #3]
   15640:	bl	11c1c <__assert_fail@plt+0x688>
   15644:	ldrb	r3, [fp, #21]
   15648:	mov	r2, r4
   1564c:	ldr	r1, [pc, #-536]	; 1543c <__assert_fail@plt+0x3ea8>
   15650:	str	r3, [sp, #4]
   15654:	ldrb	r3, [fp, #20]
   15658:	str	r3, [sp]
   1565c:	mov	r3, r0
   15660:	mov	r0, #1
   15664:	bl	1148c <__printf_chk@plt>
   15668:	cmp	r5, #0
   1566c:	addne	r4, fp, #21
   15670:	mvnne	r6, #20
   15674:	addne	r5, r4, r5
   15678:	subne	r6, r6, fp
   1567c:	beq	1569c <__assert_fail@plt+0x4108>
   15680:	add	r2, r6, r4
   15684:	ldrb	r3, [r4, #1]!
   15688:	ldr	r1, [pc, #-592]	; 15440 <__assert_fail@plt+0x3eac>
   1568c:	mov	r0, #1
   15690:	bl	1148c <__printf_chk@plt>
   15694:	cmp	r5, r4
   15698:	bne	15680 <__assert_fail@plt+0x40ec>
   1569c:	ldr	r3, [sp, #56]	; 0x38
   156a0:	ldr	r1, [pc, #-612]	; 15444 <__assert_fail@plt+0x3eb0>
   156a4:	mov	r0, #1
   156a8:	ldrb	r2, [r3]
   156ac:	bl	1148c <__printf_chk@plt>
   156b0:	cmp	r7, #0
   156b4:	beq	156e4 <__assert_fail@plt+0x4150>
   156b8:	ldr	r6, [pc, #-632]	; 15448 <__assert_fail@plt+0x3eb4>
   156bc:	ldr	r5, [sp, #56]	; 0x38
   156c0:	mov	r4, #0
   156c4:	mov	r2, r4
   156c8:	ldrb	r3, [r5, #1]!
   156cc:	mov	r1, r6
   156d0:	add	r4, r4, #1
   156d4:	mov	r0, #1
   156d8:	bl	1148c <__printf_chk@plt>
   156dc:	cmp	r7, r4
   156e0:	bne	156c4 <__assert_fail@plt+0x4130>
   156e4:	ldr	r3, [sp, #68]	; 0x44
   156e8:	ldr	r1, [pc, #-676]	; 1544c <__assert_fail@plt+0x3eb8>
   156ec:	mov	r0, #1
   156f0:	ldrb	r2, [r3]
   156f4:	ldr	r3, [sp, #52]	; 0x34
   156f8:	bl	1148c <__printf_chk@plt>
   156fc:	ldrb	r3, [fp]
   15700:	ldr	r2, [sp, #64]	; 0x40
   15704:	cmp	r2, r3
   15708:	bcs	15a2c <__assert_fail@plt+0x4498>
   1570c:	ldr	r2, [sp, #64]	; 0x40
   15710:	ldr	r1, [pc, #-460]	; 1554c <__assert_fail@plt+0x3fb8>
   15714:	mov	r0, fp
   15718:	bl	11cd0 <__assert_fail@plt+0x73c>
   1571c:	b	15a2c <__assert_fail@plt+0x4498>
   15720:	ldr	r0, [pc, #-728]	; 15450 <__assert_fail@plt+0x3ebc>
   15724:	bl	11378 <puts@plt>
   15728:	ldrb	r5, [fp, #11]
   1572c:	ldrb	r3, [fp]
   15730:	add	r2, r5, #12
   15734:	cmp	r3, r2
   15738:	str	r2, [sp, #52]	; 0x34
   1573c:	bcc	16668 <__assert_fail@plt+0x50d4>
   15740:	ldr	ip, [fp, #7]
   15744:	ldr	r1, [pc, #-760]	; 15454 <__assert_fail@plt+0x3ec0>
   15748:	ldrb	r3, [fp, #3]
   1574c:	ldrb	r2, [fp, #4]
   15750:	umull	r0, r1, r1, ip
   15754:	str	r5, [sp, #12]
   15758:	lsr	r1, r1, #18
   1575c:	str	r1, [sp, #4]
   15760:	rsb	r0, r1, r1, lsl #5
   15764:	rsb	r0, r0, r0, lsl #6
   15768:	add	r0, r1, r0, lsl #3
   1576c:	ldr	r1, [pc, #-796]	; 15458 <__assert_fail@plt+0x3ec4>
   15770:	sub	r0, ip, r0, lsl #6
   15774:	str	r0, [sp, #8]
   15778:	ldrh	ip, [fp, #5]
   1577c:	mov	r0, #1
   15780:	str	ip, [sp]
   15784:	bl	1148c <__printf_chk@plt>
   15788:	cmp	r5, #0
   1578c:	beq	157c0 <__assert_fail@plt+0x422c>
   15790:	add	r4, fp, #11
   15794:	mvn	r6, #10
   15798:	ldr	r7, [pc, #-836]	; 1545c <__assert_fail@plt+0x3ec8>
   1579c:	add	r5, r4, r5
   157a0:	sub	r6, r6, fp
   157a4:	add	r2, r6, r4
   157a8:	ldrb	r3, [r4, #1]!
   157ac:	mov	r1, r7
   157b0:	mov	r0, #1
   157b4:	bl	1148c <__printf_chk@plt>
   157b8:	cmp	r4, r5
   157bc:	bne	157a4 <__assert_fail@plt+0x4210>
   157c0:	ldrb	r3, [fp]
   157c4:	ldr	r2, [sp, #52]	; 0x34
   157c8:	cmp	r2, r3
   157cc:	movcs	r3, #0
   157d0:	strcs	r3, [sp, #52]	; 0x34
   157d4:	bcs	15a2c <__assert_fail@plt+0x4498>
   157d8:	ldr	r2, [sp, #52]	; 0x34
   157dc:	ldr	r1, [pc, #-664]	; 1554c <__assert_fail@plt+0x3fb8>
   157e0:	mov	r0, fp
   157e4:	bl	11cd0 <__assert_fail@plt+0x73c>
   157e8:	mov	r3, #0
   157ec:	str	r3, [sp, #52]	; 0x34
   157f0:	b	15a2c <__assert_fail@plt+0x4498>
   157f4:	ldr	r0, [pc, #-924]	; 15460 <__assert_fail@plt+0x3ecc>
   157f8:	bl	11378 <puts@plt>
   157fc:	ldrb	r6, [fp, #7]
   15800:	ldr	r0, [sp, #60]	; 0x3c
   15804:	add	r3, r6, #8
   15808:	add	r2, fp, r3
   1580c:	ldrb	r1, [fp, r3]
   15810:	str	r2, [sp, #56]	; 0x38
   15814:	bl	1b724 <__assert_fail@plt+0xa190>
   15818:	ldrb	r2, [fp]
   1581c:	add	r3, r6, #10
   15820:	cmp	r2, r3
   15824:	str	r0, [sp, #52]	; 0x34
   15828:	bcc	16680 <__assert_fail@plt+0x50ec>
   1582c:	ldrb	r3, [fp, #4]
   15830:	ldrb	r2, [fp, #3]
   15834:	str	r6, [sp, #4]
   15838:	ldrh	r1, [fp, #5]
   1583c:	mov	r0, #1
   15840:	str	r1, [sp]
   15844:	ldr	r1, [pc, #-1000]	; 15464 <__assert_fail@plt+0x3ed0>
   15848:	bl	1148c <__printf_chk@plt>
   1584c:	cmp	r6, #0
   15850:	beq	16964 <__assert_fail@plt+0x53d0>
   15854:	mov	r3, #0
   15858:	ldr	r2, [sp, #56]	; 0x38
   1585c:	mov	r5, r3
   15860:	add	r3, r3, #1
   15864:	cmp	r3, #2
   15868:	movls	r0, #1
   1586c:	movhi	r0, #0
   15870:	ldrb	r1, [r2, #-1]!
   15874:	cmp	r6, r3
   15878:	movls	r0, #0
   1587c:	cmp	r0, #0
   15880:	orr	r5, r1, r5, lsl #8
   15884:	bne	15860 <__assert_fail@plt+0x42cc>
   15888:	mov	r2, r5
   1588c:	ldr	r1, [pc, #-1068]	; 15468 <__assert_fail@plt+0x3ed4>
   15890:	mov	r0, #1
   15894:	bl	1148c <__printf_chk@plt>
   15898:	cmp	r4, #1
   1589c:	mov	r7, #0
   158a0:	ldr	r4, [pc, #-708]	; 155e4 <__assert_fail@plt+0x4050>
   158a4:	bne	158b8 <__assert_fail@plt+0x4324>
   158a8:	b	15af8 <__assert_fail@plt+0x4564>
   158ac:	add	r7, r7, #1
   158b0:	cmp	r7, #18
   158b4:	beq	16588 <__assert_fail@plt+0x4ff4>
   158b8:	lsr	r3, r5, r7
   158bc:	tst	r3, #1
   158c0:	beq	158ac <__assert_fail@plt+0x4318>
   158c4:	ldr	r3, [pc, #-1080]	; 15494 <__assert_fail@plt+0x3f00>
   158c8:	mov	r1, r4
   158cc:	mov	r0, #1
   158d0:	ldr	r2, [r3, r7, lsl #2]
   158d4:	bl	1148c <__printf_chk@plt>
   158d8:	b	158ac <__assert_fail@plt+0x4318>
   158dc:	ldr	r0, [pc, #-1144]	; 1546c <__assert_fail@plt+0x3ed8>
   158e0:	bl	11378 <puts@plt>
   158e4:	ldrb	r5, [fp, #4]
   158e8:	ldrb	r3, [fp]
   158ec:	add	r2, r5, #6
   158f0:	cmp	r3, r2
   158f4:	str	r2, [sp, #56]	; 0x38
   158f8:	bcc	16674 <__assert_fail@plt+0x50e0>
   158fc:	add	r3, r5, #5
   15900:	ldr	r0, [sp, #60]	; 0x3c
   15904:	ldrb	r1, [fp, r3]
   15908:	add	r3, fp, r3
   1590c:	str	r3, [sp, #64]	; 0x40
   15910:	bl	1b724 <__assert_fail@plt+0xa190>
   15914:	mov	r3, r5
   15918:	ldrb	r2, [fp, #3]
   1591c:	ldr	r1, [pc, #-1204]	; 15470 <__assert_fail@plt+0x3edc>
   15920:	str	r0, [sp, #52]	; 0x34
   15924:	mov	r0, #1
   15928:	bl	1148c <__printf_chk@plt>
   1592c:	cmp	r5, #0
   15930:	beq	15964 <__assert_fail@plt+0x43d0>
   15934:	add	r4, fp, #4
   15938:	mvn	r6, #3
   1593c:	ldr	r7, [pc, #-1232]	; 15474 <__assert_fail@plt+0x3ee0>
   15940:	add	r5, r4, r5
   15944:	sub	r6, r6, fp
   15948:	add	r2, r6, r4
   1594c:	ldrb	r3, [r4, #1]!
   15950:	mov	r1, r7
   15954:	mov	r0, #1
   15958:	bl	1148c <__printf_chk@plt>
   1595c:	cmp	r5, r4
   15960:	bne	15948 <__assert_fail@plt+0x43b4>
   15964:	ldr	r3, [sp, #64]	; 0x40
   15968:	ldr	r1, [pc, #-1272]	; 15478 <__assert_fail@plt+0x3ee4>
   1596c:	mov	r0, #1
   15970:	ldrb	r2, [r3]
   15974:	ldr	r3, [sp, #52]	; 0x34
   15978:	bl	1148c <__printf_chk@plt>
   1597c:	ldrb	r3, [fp]
   15980:	ldr	r2, [sp, #56]	; 0x38
   15984:	cmp	r2, r3
   15988:	bcs	15a2c <__assert_fail@plt+0x4498>
   1598c:	ldr	r2, [sp, #56]	; 0x38
   15990:	ldr	r1, [pc, #-1100]	; 1554c <__assert_fail@plt+0x3fb8>
   15994:	mov	r0, fp
   15998:	bl	11cd0 <__assert_fail@plt+0x73c>
   1599c:	b	15a2c <__assert_fail@plt+0x4498>
   159a0:	ldr	r0, [pc, #-1324]	; 1547c <__assert_fail@plt+0x3ee8>
   159a4:	bl	11378 <puts@plt>
   159a8:	ldrb	r1, [fp, #8]
   159ac:	ldr	r0, [sp, #60]	; 0x3c
   159b0:	bl	1b724 <__assert_fail@plt+0xa190>
   159b4:	ldrh	r4, [fp, #4]
   159b8:	add	r5, sp, #476	; 0x1dc
   159bc:	mov	r1, r4
   159c0:	str	r0, [sp, #52]	; 0x34
   159c4:	mov	r0, r5
   159c8:	bl	1418c <__assert_fail@plt+0x2bf8>
   159cc:	ldrb	r3, [fp]
   159d0:	cmp	r3, #8
   159d4:	bls	16650 <__assert_fail@plt+0x50bc>
   159d8:	ldr	r3, [sp, #52]	; 0x34
   159dc:	ldrb	r2, [fp, #3]
   159e0:	str	r3, [sp, #16]
   159e4:	ldrb	r1, [fp, #8]
   159e8:	mov	r3, r4
   159ec:	str	r1, [sp, #12]
   159f0:	ldrb	r0, [fp, #7]
   159f4:	ldr	r1, [pc, #-1404]	; 15480 <__assert_fail@plt+0x3eec>
   159f8:	str	r0, [sp, #8]
   159fc:	ldrb	ip, [fp, #6]
   15a00:	mov	r0, #1
   15a04:	str	r5, [sp]
   15a08:	str	ip, [sp, #4]
   15a0c:	bl	1148c <__printf_chk@plt>
   15a10:	ldrb	r3, [fp]
   15a14:	cmp	r3, #9
   15a18:	bls	15a2c <__assert_fail@plt+0x4498>
   15a1c:	mov	r2, #9
   15a20:	ldr	r1, [pc, #-1244]	; 1554c <__assert_fail@plt+0x3fb8>
   15a24:	mov	r0, fp
   15a28:	bl	11cd0 <__assert_fail@plt+0x73c>
   15a2c:	ldr	r0, [sp, #52]	; 0x34
   15a30:	bl	112a0 <free@plt>
   15a34:	ldrb	r3, [fp]
   15a38:	b	145f4 <__assert_fail@plt+0x3060>
   15a3c:	ldr	r0, [pc, #-1472]	; 15484 <__assert_fail@plt+0x3ef0>
   15a40:	bl	11378 <puts@plt>
   15a44:	ldrb	r1, [fp, #7]
   15a48:	ldr	r0, [sp, #60]	; 0x3c
   15a4c:	bl	1b724 <__assert_fail@plt+0xa190>
   15a50:	ldrh	r6, [fp, #4]
   15a54:	ldr	r3, [pc, #-1492]	; 15488 <__assert_fail@plt+0x3ef4>
   15a58:	cmp	r6, r3
   15a5c:	str	r0, [sp, #52]	; 0x34
   15a60:	beq	166b0 <__assert_fail@plt+0x511c>
   15a64:	add	r5, sp, #476	; 0x1dc
   15a68:	mov	r0, r5
   15a6c:	mov	r1, r6
   15a70:	bl	1418c <__assert_fail@plt+0x2bf8>
   15a74:	ldrb	r3, [fp]
   15a78:	cmp	r3, #7
   15a7c:	bls	168dc <__assert_fail@plt+0x5348>
   15a80:	ldrb	r1, [fp, #6]
   15a84:	ldrb	r2, [fp, #3]
   15a88:	mov	r3, r6
   15a8c:	str	r1, [sp, #4]
   15a90:	str	r5, [sp]
   15a94:	ldr	r1, [pc, #-1552]	; 1548c <__assert_fail@plt+0x3ef8>
   15a98:	mov	r0, #1
   15a9c:	bl	1148c <__printf_chk@plt>
   15aa0:	ldr	r3, [sp, #52]	; 0x34
   15aa4:	ldrb	r2, [fp, #7]
   15aa8:	ldr	r1, [pc, #-1568]	; 15490 <__assert_fail@plt+0x3efc>
   15aac:	mov	r0, #1
   15ab0:	bl	1148c <__printf_chk@plt>
   15ab4:	mov	r7, #8
   15ab8:	ldrb	r3, [fp]
   15abc:	cmp	r3, r7
   15ac0:	bls	15a2c <__assert_fail@plt+0x4498>
   15ac4:	mov	r2, r7
   15ac8:	ldr	r1, [pc, #-1412]	; 1554c <__assert_fail@plt+0x3fb8>
   15acc:	mov	r0, fp
   15ad0:	bl	11cd0 <__assert_fail@plt+0x73c>
   15ad4:	b	15a2c <__assert_fail@plt+0x4498>
   15ad8:	ldr	r3, [pc, #-1612]	; 15494 <__assert_fail@plt+0x3f00>
   15adc:	mov	r1, r4
   15ae0:	mov	r0, #1
   15ae4:	ldr	r2, [r3, r7, lsl #2]
   15ae8:	bl	1148c <__printf_chk@plt>
   15aec:	add	r7, r7, #1
   15af0:	cmp	r7, #19
   15af4:	beq	16588 <__assert_fail@plt+0x4ff4>
   15af8:	lsr	r3, r5, r7
   15afc:	tst	r3, #1
   15b00:	beq	15aec <__assert_fail@plt+0x4558>
   15b04:	b	15ad8 <__assert_fail@plt+0x4544>
   15b08:	ldr	r0, [pc, #-1656]	; 15498 <__assert_fail@plt+0x3f04>
   15b0c:	bl	11378 <puts@plt>
   15b10:	ldrb	r7, [fp, #4]
   15b14:	ldrb	r2, [fp]
   15b18:	lsl	r3, r7, #2
   15b1c:	add	r5, r3, #5
   15b20:	add	r3, r3, #6
   15b24:	ldrb	r6, [fp, r5]
   15b28:	add	r1, fp, r5
   15b2c:	str	r1, [sp, #56]	; 0x38
   15b30:	add	r3, r3, r6
   15b34:	cmp	r2, r3
   15b38:	str	r3, [sp, #52]	; 0x34
   15b3c:	bcc	16888 <__assert_fail@plt+0x52f4>
   15b40:	mov	r3, r7
   15b44:	ldrb	r2, [fp, #3]
   15b48:	ldr	r1, [pc, #-1716]	; 1549c <__assert_fail@plt+0x3f08>
   15b4c:	mov	r0, #1
   15b50:	bl	1148c <__printf_chk@plt>
   15b54:	cmp	r7, #0
   15b58:	movne	r4, fp
   15b5c:	movne	r5, #0
   15b60:	beq	15ba4 <__assert_fail@plt+0x4610>
   15b64:	ldrb	r0, [r4, #8]
   15b68:	ldrb	r1, [r4, #6]
   15b6c:	ldrb	r2, [r4, #7]
   15b70:	ldrb	r3, [r4, #5]
   15b74:	str	r5, [sp]
   15b78:	orr	r2, r2, r0, lsl #8
   15b7c:	str	r2, [sp, #4]
   15b80:	orr	r3, r3, r1, lsl #8
   15b84:	mov	r2, r5
   15b88:	ldr	r1, [pc, #-1776]	; 154a0 <__assert_fail@plt+0x3f0c>
   15b8c:	add	r5, r5, #1
   15b90:	mov	r0, #1
   15b94:	bl	1148c <__printf_chk@plt>
   15b98:	cmp	r7, r5
   15b9c:	add	r4, r4, #4
   15ba0:	bne	15b64 <__assert_fail@plt+0x45d0>
   15ba4:	mov	r2, r6
   15ba8:	ldr	r1, [pc, #-1804]	; 154a4 <__assert_fail@plt+0x3f10>
   15bac:	mov	r0, #1
   15bb0:	bl	1148c <__printf_chk@plt>
   15bb4:	cmp	r6, #0
   15bb8:	beq	15be8 <__assert_fail@plt+0x4654>
   15bbc:	ldr	r7, [pc, #-1820]	; 154a8 <__assert_fail@plt+0x3f14>
   15bc0:	ldr	r5, [sp, #56]	; 0x38
   15bc4:	mov	r4, #0
   15bc8:	mov	r2, r4
   15bcc:	ldrb	r3, [r5, #1]!
   15bd0:	mov	r1, r7
   15bd4:	add	r4, r4, #1
   15bd8:	mov	r0, #1
   15bdc:	bl	1148c <__printf_chk@plt>
   15be0:	cmp	r6, r4
   15be4:	bne	15bc8 <__assert_fail@plt+0x4634>
   15be8:	ldrb	r3, [fp]
   15bec:	ldr	r2, [sp, #52]	; 0x34
   15bf0:	cmp	r2, r3
   15bf4:	bcs	145f4 <__assert_fail@plt+0x3060>
   15bf8:	ldr	r2, [sp, #52]	; 0x34
   15bfc:	ldr	r1, [pc, #-1720]	; 1554c <__assert_fail@plt+0x3fb8>
   15c00:	mov	r0, fp
   15c04:	bl	11cd0 <__assert_fail@plt+0x73c>
   15c08:	ldrb	r3, [fp]
   15c0c:	b	145f4 <__assert_fail@plt+0x3060>
   15c10:	ldr	r0, [pc, #-1900]	; 154ac <__assert_fail@plt+0x3f18>
   15c14:	bl	11378 <puts@plt>
   15c18:	ldrb	r6, [fp, #3]
   15c1c:	ldrb	r7, [fp, #8]
   15c20:	ldrb	r3, [fp]
   15c24:	smulbb	r2, r6, r7
   15c28:	add	r2, r2, #9
   15c2c:	cmp	r3, r2
   15c30:	str	r2, [sp, #52]	; 0x34
   15c34:	bcc	168b4 <__assert_fail@plt+0x5320>
   15c38:	ldrh	r3, [fp, #4]
   15c3c:	str	r7, [sp, #8]
   15c40:	ldrb	r1, [fp, #7]
   15c44:	mov	r2, r6
   15c48:	mov	r0, #1
   15c4c:	str	r1, [sp, #4]
   15c50:	ldrb	ip, [fp, #6]
   15c54:	ldr	r1, [pc, #-1964]	; 154b0 <__assert_fail@plt+0x3f1c>
   15c58:	str	ip, [sp]
   15c5c:	bl	1148c <__printf_chk@plt>
   15c60:	cmp	r6, #0
   15c64:	movne	r5, fp
   15c68:	movne	r4, #0
   15c6c:	beq	15be8 <__assert_fail@plt+0x4654>
   15c70:	ldrb	r3, [r5, #9]
   15c74:	mov	r2, r4
   15c78:	ldr	r1, [pc, #-1996]	; 154b4 <__assert_fail@plt+0x3f20>
   15c7c:	add	r4, r4, #1
   15c80:	mov	r0, #1
   15c84:	bl	1148c <__printf_chk@plt>
   15c88:	cmp	r6, r4
   15c8c:	add	r5, r5, r7
   15c90:	bne	15c70 <__assert_fail@plt+0x46dc>
   15c94:	b	15be8 <__assert_fail@plt+0x4654>
   15c98:	ldr	r0, [pc, #-2024]	; 154b8 <__assert_fail@plt+0x3f24>
   15c9c:	bl	11378 <puts@plt>
   15ca0:	ldrb	r6, [fp, #3]
   15ca4:	ldrb	r7, [fp, #12]
   15ca8:	ldrb	r3, [fp]
   15cac:	smulbb	r2, r6, r7
   15cb0:	add	r2, r2, #13
   15cb4:	cmp	r3, r2
   15cb8:	str	r2, [sp, #52]	; 0x34
   15cbc:	bcc	1687c <__assert_fail@plt+0x52e8>
   15cc0:	ldrh	r3, [fp, #4]
   15cc4:	str	r7, [sp, #24]
   15cc8:	ldrb	r1, [fp, #11]
   15ccc:	mov	r2, r6
   15cd0:	mov	r0, #1
   15cd4:	str	r1, [sp, #20]
   15cd8:	ldrb	ip, [fp, #10]
   15cdc:	ldr	r1, [pc, #-2088]	; 154bc <__assert_fail@plt+0x3f28>
   15ce0:	str	ip, [sp, #16]
   15ce4:	ldrb	ip, [fp, #9]
   15ce8:	str	ip, [sp, #12]
   15cec:	ldrb	ip, [fp, #8]
   15cf0:	str	ip, [sp, #8]
   15cf4:	ldrb	ip, [fp, #7]
   15cf8:	str	ip, [sp, #4]
   15cfc:	ldrb	ip, [fp, #6]
   15d00:	str	ip, [sp]
   15d04:	bl	1148c <__printf_chk@plt>
   15d08:	cmp	r6, #0
   15d0c:	movne	r5, fp
   15d10:	movne	r4, #0
   15d14:	beq	15be8 <__assert_fail@plt+0x4654>
   15d18:	ldrb	r3, [r5, #13]
   15d1c:	mov	r2, r4
   15d20:	ldr	r1, [pc, #-2152]	; 154c0 <__assert_fail@plt+0x3f2c>
   15d24:	add	r4, r4, #1
   15d28:	mov	r0, #1
   15d2c:	bl	1148c <__printf_chk@plt>
   15d30:	cmp	r6, r4
   15d34:	add	r5, r5, r7
   15d38:	bne	15d18 <__assert_fail@plt+0x4784>
   15d3c:	b	15be8 <__assert_fail@plt+0x4654>
   15d40:	ldr	r0, [pc, #-2180]	; 154c4 <__assert_fail@plt+0x3f30>
   15d44:	bl	11378 <puts@plt>
   15d48:	ldrb	r3, [fp]
   15d4c:	cmp	r3, #22
   15d50:	bhi	16600 <__assert_fail@plt+0x506c>
   15d54:	cmp	r3, #6
   15d58:	bhi	15d64 <__assert_fail@plt+0x47d0>
   15d5c:	ldr	r0, [pc, #-1932]	; 155d8 <__assert_fail@plt+0x4044>
   15d60:	bl	11378 <puts@plt>
   15d64:	ldrb	r1, [fp, #6]
   15d68:	ldrb	r2, [fp, #3]
   15d6c:	ldrb	r3, [fp, #4]
   15d70:	str	r1, [sp, #4]
   15d74:	ldrb	r1, [fp, #5]
   15d78:	mov	r0, #1
   15d7c:	str	r1, [sp]
   15d80:	ldr	r1, [pc, #-2240]	; 154c8 <__assert_fail@plt+0x3f34>
   15d84:	bl	1148c <__printf_chk@plt>
   15d88:	mov	r2, #7
   15d8c:	ldrb	r3, [fp]
   15d90:	cmp	r3, r2
   15d94:	bls	145f4 <__assert_fail@plt+0x3060>
   15d98:	ldr	r1, [pc, #-2132]	; 1554c <__assert_fail@plt+0x3fb8>
   15d9c:	mov	r0, fp
   15da0:	bl	11cd0 <__assert_fail@plt+0x73c>
   15da4:	ldrb	r3, [fp]
   15da8:	b	145f4 <__assert_fail@plt+0x3060>
   15dac:	ldr	r0, [pc, #-2280]	; 154cc <__assert_fail@plt+0x3f38>
   15db0:	bl	11378 <puts@plt>
   15db4:	ldrb	r3, [fp]
   15db8:	cmp	r3, #24
   15dbc:	beq	15dc8 <__assert_fail@plt+0x4834>
   15dc0:	ldr	r0, [pc, #-2296]	; 154d0 <__assert_fail@plt+0x3f3c>
   15dc4:	bl	11378 <puts@plt>
   15dc8:	add	r0, fp, #4
   15dcc:	ldrb	r4, [fp, #3]
   15dd0:	bl	11c1c <__assert_fail@plt+0x688>
   15dd4:	ldrb	r3, [fp, #20]
   15dd8:	mov	r2, r4
   15ddc:	ldr	r1, [pc, #-2320]	; 154d4 <__assert_fail@plt+0x3f40>
   15de0:	str	r3, [sp]
   15de4:	mov	r3, r0
   15de8:	mov	r0, #1
   15dec:	bl	1148c <__printf_chk@plt>
   15df0:	ldrb	r3, [fp]
   15df4:	cmp	r3, #24
   15df8:	bls	145f4 <__assert_fail@plt+0x3060>
   15dfc:	mov	r2, #24
   15e00:	ldr	r1, [pc, #-2236]	; 1554c <__assert_fail@plt+0x3fb8>
   15e04:	mov	r0, fp
   15e08:	bl	11cd0 <__assert_fail@plt+0x73c>
   15e0c:	ldrb	r3, [fp]
   15e10:	b	145f4 <__assert_fail@plt+0x3060>
   15e14:	ldr	r0, [pc, #-2372]	; 154d8 <__assert_fail@plt+0x3f44>
   15e18:	bl	11378 <puts@plt>
   15e1c:	ldrb	r3, [fp]
   15e20:	cmp	r3, #5
   15e24:	bls	16864 <__assert_fail@plt+0x52d0>
   15e28:	ldrb	r2, [fp, #3]
   15e2c:	ldr	r1, [pc, #-2392]	; 154dc <__assert_fail@plt+0x3f48>
   15e30:	mov	r0, #1
   15e34:	cmp	r2, #5
   15e38:	ldrls	r3, [pc, #-2164]	; 155cc <__assert_fail@plt+0x4038>
   15e3c:	ldrhi	r3, [pc, #-2396]	; 154e8 <__assert_fail@plt+0x3f54>
   15e40:	addls	r3, r3, r2, lsl #2
   15e44:	ldrls	r3, [r3, #620]	; 0x26c
   15e48:	bl	1148c <__printf_chk@plt>
   15e4c:	ldrb	r2, [fp, #4]
   15e50:	ldr	r1, [pc, #-2424]	; 154e0 <__assert_fail@plt+0x3f4c>
   15e54:	mov	r0, #1
   15e58:	cmp	r2, #7
   15e5c:	ldrls	r3, [pc, #-2200]	; 155cc <__assert_fail@plt+0x4038>
   15e60:	ldrhi	r3, [pc, #-2432]	; 154e8 <__assert_fail@plt+0x3f54>
   15e64:	addls	r3, r3, r2, lsl #2
   15e68:	ldrls	r3, [r3, #644]	; 0x284
   15e6c:	bl	1148c <__printf_chk@plt>
   15e70:	ldrb	r2, [fp, #5]
   15e74:	ldr	r1, [pc, #-2456]	; 154e4 <__assert_fail@plt+0x3f50>
   15e78:	mov	r0, #1
   15e7c:	cmp	r2, #5
   15e80:	ldrls	r3, [pc, #-2236]	; 155cc <__assert_fail@plt+0x4038>
   15e84:	ldrhi	r3, [pc, #-2468]	; 154e8 <__assert_fail@plt+0x3f54>
   15e88:	addls	r3, r3, r2, lsl #2
   15e8c:	ldrls	r3, [r3, #676]	; 0x2a4
   15e90:	bl	1148c <__printf_chk@plt>
   15e94:	ldrb	r3, [fp]
   15e98:	cmp	r3, #6
   15e9c:	bls	145f4 <__assert_fail@plt+0x3060>
   15ea0:	mov	r2, #6
   15ea4:	b	15d98 <__assert_fail@plt+0x4804>
   15ea8:	cmp	r2, #5
   15eac:	beq	16954 <__assert_fail@plt+0x53c0>
   15eb0:	cmp	r2, #7
   15eb4:	beq	16934 <__assert_fail@plt+0x53a0>
   15eb8:	ldr	r0, [pc, #-2516]	; 154ec <__assert_fail@plt+0x3f58>
   15ebc:	bl	11378 <puts@plt>
   15ec0:	mov	r6, #21
   15ec4:	ldrb	r3, [fp, r6]
   15ec8:	add	r6, fp, r6
   15ecc:	cmp	r3, #0
   15ed0:	movne	r2, #26
   15ed4:	addne	r3, r2, r3, lsl #2
   15ed8:	moveq	r3, #38	; 0x26
   15edc:	str	r3, [sp, #52]	; 0x34
   15ee0:	ldrb	r3, [fp]
   15ee4:	ldr	r2, [sp, #52]	; 0x34
   15ee8:	cmp	r3, r2
   15eec:	bcc	16858 <__assert_fail@plt+0x52c4>
   15ef0:	ldrb	r4, [fp, #4]
   15ef4:	ldrb	r2, [fp, #3]
   15ef8:	ldr	r1, [pc, #-2576]	; 154f0 <__assert_fail@plt+0x3f5c>
   15efc:	mov	r3, r4
   15f00:	mov	r0, #1
   15f04:	bl	1148c <__printf_chk@plt>
   15f08:	ldr	r3, [pc, #-2588]	; 154f4 <__assert_fail@plt+0x3f60>
   15f0c:	tst	r4, #1
   15f10:	ldr	r2, [pc, #-2592]	; 154f8 <__assert_fail@plt+0x3f64>
   15f14:	ldr	r1, [pc, #-2592]	; 154fc <__assert_fail@plt+0x3f68>
   15f18:	moveq	r2, r3
   15f1c:	mov	r0, #1
   15f20:	bl	1148c <__printf_chk@plt>
   15f24:	tst	r4, #2
   15f28:	bne	1684c <__assert_fail@plt+0x52b8>
   15f2c:	ldr	r1, [fp, #13]
   15f30:	ldrh	r2, [fp, #5]
   15f34:	ldrh	r3, [fp, #7]
   15f38:	str	r1, [sp, #4]
   15f3c:	ldr	r1, [fp, #9]
   15f40:	mov	r0, #1
   15f44:	str	r1, [sp]
   15f48:	ldr	r1, [pc, #-2640]	; 15500 <__assert_fail@plt+0x3f6c>
   15f4c:	bl	1148c <__printf_chk@plt>
   15f50:	ldrb	r3, [fp, #2]
   15f54:	mov	r0, #1
   15f58:	cmp	r3, #17
   15f5c:	ldrbne	r1, [fp, #25]
   15f60:	ldreq	r1, [fp, #22]
   15f64:	ldrbeq	r3, [fp, #21]
   15f68:	ldrne	r3, [fp, #21]
   15f6c:	ldreq	r2, [fp, #17]
   15f70:	ldrne	r2, [fp, #17]
   15f74:	streq	r1, [sp]
   15f78:	strne	r1, [sp]
   15f7c:	ldreq	r1, [pc, #-2688]	; 15504 <__assert_fail@plt+0x3f70>
   15f80:	ldrne	r1, [pc, #-2688]	; 15508 <__assert_fail@plt+0x3f74>
   15f84:	bl	1148c <__printf_chk@plt>
   15f88:	ldrb	r3, [r6]
   15f8c:	cmp	r3, #0
   15f90:	beq	16894 <__assert_fail@plt+0x5300>
   15f94:	ldr	r7, [pc, #-2704]	; 1550c <__assert_fail@plt+0x3f78>
   15f98:	mov	r4, fp
   15f9c:	mov	r5, #0
   15fa0:	ldrb	r3, [r4, #28]
   15fa4:	ldrb	r0, [r4, #27]
   15fa8:	ldrb	r1, [r4, #26]
   15fac:	ldrb	r2, [r4, #29]
   15fb0:	lsl	r3, r3, #16
   15fb4:	orr	r3, r3, r0, lsl #8
   15fb8:	orr	r3, r3, r1
   15fbc:	orr	r3, r3, r2, lsl #24
   15fc0:	mov	r1, r7
   15fc4:	mov	r2, r5
   15fc8:	mov	r0, #1
   15fcc:	bl	1148c <__printf_chk@plt>
   15fd0:	ldrb	r3, [r6]
   15fd4:	add	r5, r5, #1
   15fd8:	add	r4, r4, #4
   15fdc:	cmp	r5, r3
   15fe0:	bcc	15fa0 <__assert_fail@plt+0x4a0c>
   15fe4:	ldrb	r3, [fp]
   15fe8:	ldr	r2, [sp, #52]	; 0x34
   15fec:	cmp	r2, r3
   15ff0:	bcs	145f4 <__assert_fail@plt+0x3060>
   15ff4:	b	15d98 <__assert_fail@plt+0x4804>
   15ff8:	ldr	r0, [pc, #-2800]	; 15510 <__assert_fail@plt+0x3f7c>
   15ffc:	bl	11378 <puts@plt>
   16000:	ldrb	r3, [fp]
   16004:	cmp	r3, #10
   16008:	bls	16870 <__assert_fail@plt+0x52dc>
   1600c:	ldrb	r4, [fp, #5]
   16010:	ldrb	r2, [fp, #3]
   16014:	ldrb	r3, [fp, #4]
   16018:	ldr	r6, [pc, #-2808]	; 15528 <__assert_fail@plt+0x3f94>
   1601c:	ldr	r5, [pc, #-2808]	; 1552c <__assert_fail@plt+0x3f98>
   16020:	ldr	r1, [pc, #-2836]	; 15514 <__assert_fail@plt+0x3f80>
   16024:	str	r4, [sp]
   16028:	mov	r0, #1
   1602c:	bl	1148c <__printf_chk@plt>
   16030:	tst	r4, #1
   16034:	movne	r2, r6
   16038:	moveq	r2, r5
   1603c:	ldr	r1, [pc, #-2860]	; 15518 <__assert_fail@plt+0x3f84>
   16040:	mov	r0, #1
   16044:	bl	1148c <__printf_chk@plt>
   16048:	ldrb	r4, [fp, #9]
   1604c:	ldrb	r2, [fp, #6]
   16050:	ldrb	r3, [fp, #7]
   16054:	str	r4, [sp, #4]
   16058:	ldrb	r1, [fp, #8]
   1605c:	mov	r0, #1
   16060:	str	r1, [sp]
   16064:	ldr	r1, [pc, #-2896]	; 1551c <__assert_fail@plt+0x3f88>
   16068:	bl	1148c <__printf_chk@plt>
   1606c:	tst	r4, #1
   16070:	movne	r2, r6
   16074:	moveq	r2, r5
   16078:	ldr	r1, [pc, #-2896]	; 15530 <__assert_fail@plt+0x3f9c>
   1607c:	mov	r0, #1
   16080:	bl	1148c <__printf_chk@plt>
   16084:	tst	r4, #2
   16088:	movne	r2, #2
   1608c:	moveq	r2, #1
   16090:	ldr	r1, [pc, #-2916]	; 15534 <__assert_fail@plt+0x3fa0>
   16094:	mov	r0, #1
   16098:	bl	1148c <__printf_chk@plt>
   1609c:	tst	r4, #4
   160a0:	movne	r2, r6
   160a4:	moveq	r2, r5
   160a8:	ldr	r1, [pc, #-2936]	; 15538 <__assert_fail@plt+0x3fa4>
   160ac:	mov	r0, #1
   160b0:	bl	1148c <__printf_chk@plt>
   160b4:	ldr	r1, [pc, #-2944]	; 1553c <__assert_fail@plt+0x3fa8>
   160b8:	mov	r0, #1
   160bc:	bl	1148c <__printf_chk@plt>
   160c0:	lsr	r3, r4, #4
   160c4:	and	r3, r3, #3
   160c8:	cmp	r3, #2
   160cc:	beq	169c4 <__assert_fail@plt+0x5430>
   160d0:	cmp	r3, #3
   160d4:	beq	169b8 <__assert_fail@plt+0x5424>
   160d8:	cmp	r3, #1
   160dc:	ldrne	r0, [pc, #-2980]	; 15540 <__assert_fail@plt+0x3fac>
   160e0:	ldreq	r0, [pc, #-2980]	; 15544 <__assert_fail@plt+0x3fb0>
   160e4:	bl	11378 <puts@plt>
   160e8:	ldrb	r2, [fp, #10]
   160ec:	ldr	r1, [pc, #-2988]	; 15548 <__assert_fail@plt+0x3fb4>
   160f0:	mov	r0, #1
   160f4:	bl	1148c <__printf_chk@plt>
   160f8:	ldrb	r3, [fp]
   160fc:	cmp	r3, #11
   16100:	bls	145f4 <__assert_fail@plt+0x3060>
   16104:	mov	r2, #11
   16108:	ldr	r1, [pc, #-3012]	; 1554c <__assert_fail@plt+0x3fb8>
   1610c:	mov	r0, fp
   16110:	bl	11cd0 <__assert_fail@plt+0x73c>
   16114:	ldrb	r3, [fp]
   16118:	b	145f4 <__assert_fail@plt+0x3060>
   1611c:	cmp	r2, #4
   16120:	beq	168cc <__assert_fail@plt+0x5338>
   16124:	ldr	r0, [pc, #-3084]	; 15520 <__assert_fail@plt+0x3f8c>
   16128:	bl	11378 <puts@plt>
   1612c:	mov	r5, #28
   16130:	ldrb	r3, [fp]
   16134:	cmp	r3, r5
   16138:	bcc	168c0 <__assert_fail@plt+0x532c>
   1613c:	add	r0, fp, #5
   16140:	ldrb	r4, [fp, #25]
   16144:	ldrb	r6, [fp, #3]
   16148:	ldrb	r7, [fp, #4]
   1614c:	bl	11c1c <__assert_fail@plt+0x688>
   16150:	str	r4, [sp, #20]
   16154:	ldrb	r1, [fp, #24]
   16158:	mov	r2, r6
   1615c:	mov	r3, r7
   16160:	str	r1, [sp, #16]
   16164:	ldrb	ip, [fp, #23]
   16168:	ldr	r1, [pc, #-3148]	; 15524 <__assert_fail@plt+0x3f90>
   1616c:	ldr	r7, [pc, #-3148]	; 15528 <__assert_fail@plt+0x3f94>
   16170:	str	ip, [sp, #12]
   16174:	ldrb	ip, [fp, #22]
   16178:	ldr	r6, [pc, #-3156]	; 1552c <__assert_fail@plt+0x3f98>
   1617c:	str	ip, [sp, #8]
   16180:	ldrb	ip, [fp, #21]
   16184:	stm	sp, {r0, ip}
   16188:	mov	r0, #1
   1618c:	bl	1148c <__printf_chk@plt>
   16190:	tst	r4, #1
   16194:	movne	r2, r7
   16198:	moveq	r2, r6
   1619c:	ldr	r1, [pc, #-3188]	; 15530 <__assert_fail@plt+0x3f9c>
   161a0:	mov	r0, #1
   161a4:	bl	1148c <__printf_chk@plt>
   161a8:	tst	r4, #2
   161ac:	movne	r2, #1
   161b0:	moveq	r2, #2
   161b4:	ldr	r1, [pc, #-3208]	; 15534 <__assert_fail@plt+0x3fa0>
   161b8:	mov	r0, #1
   161bc:	bl	1148c <__printf_chk@plt>
   161c0:	tst	r4, #4
   161c4:	movne	r2, r7
   161c8:	moveq	r2, r6
   161cc:	ldr	r1, [pc, #-3228]	; 15538 <__assert_fail@plt+0x3fa4>
   161d0:	mov	r0, #1
   161d4:	bl	1148c <__printf_chk@plt>
   161d8:	ldr	r1, [pc, #-3236]	; 1553c <__assert_fail@plt+0x3fa8>
   161dc:	mov	r0, #1
   161e0:	bl	1148c <__printf_chk@plt>
   161e4:	lsr	r3, r4, #4
   161e8:	and	r3, r3, #3
   161ec:	cmp	r3, #2
   161f0:	beq	169dc <__assert_fail@plt+0x5448>
   161f4:	cmp	r3, #3
   161f8:	beq	169d0 <__assert_fail@plt+0x543c>
   161fc:	cmp	r3, #1
   16200:	ldrne	r0, [pc, #-3272]	; 15540 <__assert_fail@plt+0x3fac>
   16204:	ldreq	r0, [pc, #-3272]	; 15544 <__assert_fail@plt+0x3fb0>
   16208:	bl	11378 <puts@plt>
   1620c:	ldrb	r2, [fp, #26]
   16210:	ldr	r1, [pc, #-3280]	; 15548 <__assert_fail@plt+0x3fb4>
   16214:	mov	r0, #1
   16218:	bl	1148c <__printf_chk@plt>
   1621c:	ldrb	r3, [fp, #2]
   16220:	cmp	r3, #16
   16224:	beq	169e8 <__assert_fail@plt+0x5454>
   16228:	ldrb	r3, [fp]
   1622c:	cmp	r5, r3
   16230:	bcs	145f4 <__assert_fail@plt+0x3060>
   16234:	mov	r2, r5
   16238:	ldr	r1, [pc, #-3316]	; 1554c <__assert_fail@plt+0x3fb8>
   1623c:	mov	r0, fp
   16240:	bl	11cd0 <__assert_fail@plt+0x73c>
   16244:	ldrb	r3, [fp]
   16248:	b	145f4 <__assert_fail@plt+0x3060>
   1624c:	ldr	r1, [pc, #-3332]	; 15550 <__assert_fail@plt+0x3fbc>
   16250:	mov	r0, #1
   16254:	bl	1148c <__printf_chk@plt>
   16258:	mov	r0, fp
   1625c:	ldrb	r1, [r0], #3
   16260:	sub	r1, r1, #3
   16264:	bl	11a8c <__assert_fail@plt+0x4f8>
   16268:	ldrb	r3, [fp]
   1626c:	b	145f4 <__assert_fail@plt+0x3060>
   16270:	mov	r3, #4
   16274:	str	r3, [sp, #4]
   16278:	str	r4, [sp]
   1627c:	mov	r3, fp
   16280:	ldr	r2, [pc, #-3376]	; 15558 <__assert_fail@plt+0x3fc4>
   16284:	ldr	r1, [pc, #-3384]	; 15554 <__assert_fail@plt+0x3fc0>
   16288:	ldr	r0, [sp, #60]	; 0x3c
   1628c:	bl	11ad8 <__assert_fail@plt+0x544>
   16290:	ldrb	r3, [fp]
   16294:	b	145f4 <__assert_fail@plt+0x3060>
   16298:	mov	r3, #4
   1629c:	str	r3, [sp, #4]
   162a0:	str	r4, [sp]
   162a4:	mov	r3, fp
   162a8:	ldr	r2, [pc, #-3416]	; 15558 <__assert_fail@plt+0x3fc4>
   162ac:	ldr	r1, [pc, #-3416]	; 1555c <__assert_fail@plt+0x3fc8>
   162b0:	ldr	r0, [sp, #60]	; 0x3c
   162b4:	bl	11ad8 <__assert_fail@plt+0x544>
   162b8:	ldrb	r3, [fp]
   162bc:	b	145f4 <__assert_fail@plt+0x3060>
   162c0:	mov	r3, #4
   162c4:	str	r3, [sp, #4]
   162c8:	str	r4, [sp]
   162cc:	mov	r3, fp
   162d0:	ldr	r2, [pc, #-3448]	; 15560 <__assert_fail@plt+0x3fcc>
   162d4:	ldr	r1, [pc, #-3448]	; 15564 <__assert_fail@plt+0x3fd0>
   162d8:	ldr	r0, [sp, #60]	; 0x3c
   162dc:	bl	11ad8 <__assert_fail@plt+0x544>
   162e0:	ldrb	r3, [fp]
   162e4:	b	145f4 <__assert_fail@plt+0x3060>
   162e8:	mov	r3, #4
   162ec:	str	r3, [sp, #4]
   162f0:	str	r4, [sp]
   162f4:	mov	r3, fp
   162f8:	ldr	r2, [pc, #-3480]	; 15568 <__assert_fail@plt+0x3fd4>
   162fc:	ldr	r1, [pc, #-3480]	; 1556c <__assert_fail@plt+0x3fd8>
   16300:	ldr	r0, [sp, #60]	; 0x3c
   16304:	bl	11ad8 <__assert_fail@plt+0x544>
   16308:	ldrb	r3, [fp]
   1630c:	b	145f4 <__assert_fail@plt+0x3060>
   16310:	mov	r3, #4
   16314:	str	r3, [sp, #4]
   16318:	str	r4, [sp]
   1631c:	mov	r3, fp
   16320:	ldr	r2, [pc, #-3512]	; 15570 <__assert_fail@plt+0x3fdc>
   16324:	ldr	r1, [pc, #-3512]	; 15574 <__assert_fail@plt+0x3fe0>
   16328:	ldr	r0, [sp, #60]	; 0x3c
   1632c:	bl	11ad8 <__assert_fail@plt+0x544>
   16330:	ldrb	r3, [fp]
   16334:	b	145f4 <__assert_fail@plt+0x3060>
   16338:	mov	r3, #4
   1633c:	str	r3, [sp, #4]
   16340:	str	r4, [sp]
   16344:	mov	r3, fp
   16348:	ldr	r2, [pc, #-3544]	; 15578 <__assert_fail@plt+0x3fe4>
   1634c:	ldr	r1, [pc, #-3544]	; 1557c <__assert_fail@plt+0x3fe8>
   16350:	ldr	r0, [sp, #60]	; 0x3c
   16354:	bl	11ad8 <__assert_fail@plt+0x544>
   16358:	ldrb	r3, [fp]
   1635c:	b	145f4 <__assert_fail@plt+0x3060>
   16360:	mov	r3, #4
   16364:	str	r3, [sp, #4]
   16368:	str	r4, [sp]
   1636c:	mov	r3, fp
   16370:	ldr	r2, [pc, #-3576]	; 15580 <__assert_fail@plt+0x3fec>
   16374:	ldr	r1, [pc, #-3576]	; 15584 <__assert_fail@plt+0x3ff0>
   16378:	ldr	r0, [sp, #60]	; 0x3c
   1637c:	bl	11ad8 <__assert_fail@plt+0x544>
   16380:	ldrb	r3, [fp]
   16384:	b	145f4 <__assert_fail@plt+0x3060>
   16388:	mov	r3, #4
   1638c:	str	r3, [sp, #4]
   16390:	str	r4, [sp]
   16394:	mov	r3, fp
   16398:	ldr	r2, [pc, #-3608]	; 15588 <__assert_fail@plt+0x3ff4>
   1639c:	ldr	r1, [pc, #-3608]	; 1558c <__assert_fail@plt+0x3ff8>
   163a0:	ldr	r0, [sp, #60]	; 0x3c
   163a4:	bl	11ad8 <__assert_fail@plt+0x544>
   163a8:	ldrb	r3, [fp]
   163ac:	b	145f4 <__assert_fail@plt+0x3060>
   163b0:	mov	r3, #4
   163b4:	str	r3, [sp, #4]
   163b8:	str	r4, [sp]
   163bc:	mov	r3, fp
   163c0:	ldr	r2, [pc, #-3640]	; 15590 <__assert_fail@plt+0x3ffc>
   163c4:	ldr	r1, [pc, #-3640]	; 15594 <__assert_fail@plt+0x4000>
   163c8:	ldr	r0, [sp, #60]	; 0x3c
   163cc:	bl	11ad8 <__assert_fail@plt+0x544>
   163d0:	ldrb	r3, [fp]
   163d4:	b	145f4 <__assert_fail@plt+0x3060>
   163d8:	mov	r3, #4
   163dc:	str	r3, [sp, #4]
   163e0:	str	r4, [sp]
   163e4:	mov	r3, fp
   163e8:	ldr	r2, [pc, #-3672]	; 15598 <__assert_fail@plt+0x4004>
   163ec:	ldr	r1, [pc, #-3672]	; 1559c <__assert_fail@plt+0x4008>
   163f0:	ldr	r0, [sp, #60]	; 0x3c
   163f4:	bl	11ad8 <__assert_fail@plt+0x544>
   163f8:	ldrb	r3, [fp]
   163fc:	b	145f4 <__assert_fail@plt+0x3060>
   16400:	mov	r3, #4
   16404:	str	r3, [sp, #4]
   16408:	str	r4, [sp]
   1640c:	mov	r3, fp
   16410:	ldr	r2, [pc, #-3704]	; 155a0 <__assert_fail@plt+0x400c>
   16414:	ldr	r1, [pc, #-3704]	; 155a4 <__assert_fail@plt+0x4010>
   16418:	ldr	r0, [sp, #60]	; 0x3c
   1641c:	bl	11ad8 <__assert_fail@plt+0x544>
   16420:	ldrb	r3, [fp]
   16424:	b	145f4 <__assert_fail@plt+0x3060>
   16428:	mov	r3, #4
   1642c:	str	r3, [sp, #4]
   16430:	str	r4, [sp]
   16434:	mov	r3, fp
   16438:	ldr	r2, [pc, #-3736]	; 155a8 <__assert_fail@plt+0x4014>
   1643c:	ldr	r1, [pc, #-3736]	; 155ac <__assert_fail@plt+0x4018>
   16440:	ldr	r0, [sp, #60]	; 0x3c
   16444:	bl	11ad8 <__assert_fail@plt+0x544>
   16448:	ldrb	r3, [fp]
   1644c:	b	145f4 <__assert_fail@plt+0x3060>
   16450:	mov	r3, #4
   16454:	str	r3, [sp, #4]
   16458:	str	r4, [sp]
   1645c:	mov	r3, fp
   16460:	ldr	r2, [pc, #-3768]	; 155b0 <__assert_fail@plt+0x401c>
   16464:	ldr	r1, [pc, #-3768]	; 155b4 <__assert_fail@plt+0x4020>
   16468:	ldr	r0, [sp, #60]	; 0x3c
   1646c:	bl	11ad8 <__assert_fail@plt+0x544>
   16470:	ldrb	r3, [fp]
   16474:	b	145f4 <__assert_fail@plt+0x3060>
   16478:	mov	r3, #4
   1647c:	str	r3, [sp, #4]
   16480:	str	r4, [sp]
   16484:	mov	r3, fp
   16488:	ldr	r2, [pc, #-3800]	; 155b8 <__assert_fail@plt+0x4024>
   1648c:	ldr	r1, [pc, #-3800]	; 155bc <__assert_fail@plt+0x4028>
   16490:	ldr	r0, [sp, #60]	; 0x3c
   16494:	bl	11ad8 <__assert_fail@plt+0x544>
   16498:	ldrb	r3, [fp]
   1649c:	b	145f4 <__assert_fail@plt+0x3060>
   164a0:	ldr	r1, [pc, #-3816]	; 155c0 <__assert_fail@plt+0x402c>
   164a4:	b	16250 <__assert_fail@plt+0x4cbc>
   164a8:	ldr	r0, [pc, #-3820]	; 155c4 <__assert_fail@plt+0x4030>
   164ac:	bl	11378 <puts@plt>
   164b0:	ldrb	r3, [fp, #1]
   164b4:	b	14d5c <__assert_fail@plt+0x37c8>
   164b8:	ldr	r0, [pc, #-3836]	; 155c4 <__assert_fail@plt+0x4030>
   164bc:	bl	11378 <puts@plt>
   164c0:	ldrb	r3, [fp, #1]
   164c4:	b	14c10 <__assert_fail@plt+0x367c>
   164c8:	ldr	r0, [pc, #-3852]	; 155c4 <__assert_fail@plt+0x4030>
   164cc:	bl	11378 <puts@plt>
   164d0:	ldrb	r3, [fp, #1]
   164d4:	b	14b10 <__assert_fail@plt+0x357c>
   164d8:	ldr	r0, [pc, #-3864]	; 155c8 <__assert_fail@plt+0x4034>
   164dc:	bl	11378 <puts@plt>
   164e0:	ldrb	r3, [fp, #2]
   164e4:	b	14b34 <__assert_fail@plt+0x35a0>
   164e8:	sub	r2, r3, #4
   164ec:	uxtb	r2, r2
   164f0:	cmp	r2, #4
   164f4:	ldrls	r3, [pc, #-3888]	; 155cc <__assert_fail@plt+0x4038>
   164f8:	addls	r3, r3, r2, lsl #2
   164fc:	ldrls	r3, [r3, #280]	; 0x118
   16500:	b	14cf8 <__assert_fail@plt+0x3764>
   16504:	ldr	r0, [pc, #-3892]	; 155d8 <__assert_fail@plt+0x4044>
   16508:	bl	11378 <puts@plt>
   1650c:	ldrb	r3, [fp, #1]
   16510:	b	14db4 <__assert_fail@plt+0x3820>
   16514:	ldrb	r2, [fp, #12]
   16518:	ldrb	r3, [fp, #11]
   1651c:	ldrb	r6, [fp, #10]
   16520:	orr	r7, r2, r7, lsl #8
   16524:	ldr	r1, [pc, #-3932]	; 155d0 <__assert_fail@plt+0x403c>
   16528:	orr	r3, r3, r7, lsl #8
   1652c:	mov	r0, #1
   16530:	orr	r6, r6, r3, lsl #8
   16534:	mov	r2, r6
   16538:	bl	1148c <__printf_chk@plt>
   1653c:	ldr	r5, [pc, #-3936]	; 155e4 <__assert_fail@plt+0x4050>
   16540:	mov	r4, #0
   16544:	b	16554 <__assert_fail@plt+0x4fc0>
   16548:	add	r4, r4, #1
   1654c:	cmp	r4, #20
   16550:	beq	15a2c <__assert_fail@plt+0x4498>
   16554:	lsr	r3, r6, r4
   16558:	tst	r3, #1
   1655c:	beq	16548 <__assert_fail@plt+0x4fb4>
   16560:	ldr	r3, [pc, #-3988]	; 155d4 <__assert_fail@plt+0x4040>
   16564:	mov	r1, r5
   16568:	mov	r0, #1
   1656c:	ldr	r2, [r3, r4, lsl #2]
   16570:	bl	1148c <__printf_chk@plt>
   16574:	b	16548 <__assert_fail@plt+0x4fb4>
   16578:	ldr	r0, [pc, #-4008]	; 155d8 <__assert_fail@plt+0x4044>
   1657c:	bl	11378 <puts@plt>
   16580:	ldrb	r3, [fp, #1]
   16584:	b	14cb4 <__assert_fail@plt+0x3720>
   16588:	add	r6, fp, r6
   1658c:	ldr	r3, [sp, #56]	; 0x38
   16590:	ldrb	r4, [r6, #9]
   16594:	ldr	r1, [pc, #-4032]	; 155dc <__assert_fail@plt+0x4048>
   16598:	ldrb	r2, [r3]
   1659c:	mov	r0, #1
   165a0:	ldr	r3, [sp, #52]	; 0x34
   165a4:	str	r4, [sp]
   165a8:	bl	1148c <__printf_chk@plt>
   165ac:	mov	r7, #0
   165b0:	ldr	r6, [pc, #-4056]	; 155e0 <__assert_fail@plt+0x404c>
   165b4:	ldr	r5, [pc, #-4056]	; 155e4 <__assert_fail@plt+0x4050>
   165b8:	b	165c8 <__assert_fail@plt+0x5034>
   165bc:	add	r7, r7, #1
   165c0:	cmp	r7, #6
   165c4:	beq	15a2c <__assert_fail@plt+0x4498>
   165c8:	lsr	r3, r4, r7
   165cc:	tst	r3, #1
   165d0:	beq	165bc <__assert_fail@plt+0x5028>
   165d4:	ldr	r2, [r6, r7, lsl #2]
   165d8:	mov	r1, r5
   165dc:	mov	r0, #1
   165e0:	bl	1148c <__printf_chk@plt>
   165e4:	b	165bc <__assert_fail@plt+0x5028>
   165e8:	ldr	r0, [pc, #1116]	; 16a4c <__assert_fail@plt+0x54b8>
   165ec:	bl	11378 <puts@plt>
   165f0:	b	15638 <__assert_fail@plt+0x40a4>
   165f4:	ldr	r0, [pc, #1108]	; 16a50 <__assert_fail@plt+0x54bc>
   165f8:	bl	11378 <puts@plt>
   165fc:	b	15068 <__assert_fail@plt+0x3ad4>
   16600:	ldrb	r1, [fp, #6]
   16604:	ldrb	r3, [fp, #4]
   16608:	ldrb	r2, [fp, #3]
   1660c:	str	r1, [sp, #4]
   16610:	ldrb	r1, [fp, #5]
   16614:	mov	r0, #1
   16618:	str	r1, [sp]
   1661c:	ldr	r1, [pc, #1072]	; 16a54 <__assert_fail@plt+0x54c0>
   16620:	bl	1148c <__printf_chk@plt>
   16624:	add	r0, fp, #7
   16628:	bl	11c1c <__assert_fail@plt+0x688>
   1662c:	ldr	r1, [pc, #1060]	; 16a58 <__assert_fail@plt+0x54c4>
   16630:	mov	r2, r0
   16634:	mov	r0, #1
   16638:	bl	1148c <__printf_chk@plt>
   1663c:	mov	r2, #23
   16640:	b	15d8c <__assert_fail@plt+0x47f8>
   16644:	ldr	r0, [pc, #1024]	; 16a4c <__assert_fail@plt+0x54b8>
   16648:	bl	11378 <puts@plt>
   1664c:	b	152d0 <__assert_fail@plt+0x3d3c>
   16650:	ldr	r0, [pc, #1012]	; 16a4c <__assert_fail@plt+0x54b8>
   16654:	bl	11378 <puts@plt>
   16658:	b	159d8 <__assert_fail@plt+0x4444>
   1665c:	ldr	r0, [pc, #1000]	; 16a4c <__assert_fail@plt+0x54b8>
   16660:	bl	11378 <puts@plt>
   16664:	b	151b0 <__assert_fail@plt+0x3c1c>
   16668:	ldr	r0, [pc, #988]	; 16a4c <__assert_fail@plt+0x54b8>
   1666c:	bl	11378 <puts@plt>
   16670:	b	15740 <__assert_fail@plt+0x41ac>
   16674:	ldr	r0, [pc, #976]	; 16a4c <__assert_fail@plt+0x54b8>
   16678:	bl	11378 <puts@plt>
   1667c:	b	158fc <__assert_fail@plt+0x4368>
   16680:	ldr	r0, [pc, #964]	; 16a4c <__assert_fail@plt+0x54b8>
   16684:	bl	11378 <puts@plt>
   16688:	b	1582c <__assert_fail@plt+0x4298>
   1668c:	ldr	r0, [pc, #952]	; 16a4c <__assert_fail@plt+0x54b8>
   16690:	bl	11378 <puts@plt>
   16694:	b	14e98 <__assert_fail@plt+0x3904>
   16698:	ldr	r0, [pc, #940]	; 16a4c <__assert_fail@plt+0x54b8>
   1669c:	bl	11378 <puts@plt>
   166a0:	b	15238 <__assert_fail@plt+0x3ca4>
   166a4:	ldr	r0, [pc, #928]	; 16a4c <__assert_fail@plt+0x54b8>
   166a8:	bl	11378 <puts@plt>
   166ac:	b	150cc <__assert_fail@plt+0x3b38>
   166b0:	add	r5, sp, #476	; 0x1dc
   166b4:	mov	r0, r5
   166b8:	mov	r1, r6
   166bc:	bl	1418c <__assert_fail@plt+0x2bf8>
   166c0:	ldrb	r3, [fp]
   166c4:	cmp	r3, #14
   166c8:	bls	16944 <__assert_fail@plt+0x53b0>
   166cc:	ldrb	r1, [fp, #6]
   166d0:	ldrb	r2, [fp, #3]
   166d4:	mov	r3, r6
   166d8:	str	r1, [sp, #4]
   166dc:	str	r5, [sp]
   166e0:	ldr	r1, [pc, #884]	; 16a5c <__assert_fail@plt+0x54c8>
   166e4:	mov	r0, #1
   166e8:	bl	1148c <__printf_chk@plt>
   166ec:	ldr	r3, [sp, #52]	; 0x34
   166f0:	ldrb	r2, [fp, #7]
   166f4:	ldr	r1, [pc, #868]	; 16a60 <__assert_fail@plt+0x54cc>
   166f8:	mov	r0, #1
   166fc:	bl	1148c <__printf_chk@plt>
   16700:	mov	r3, #7
   16704:	str	r3, [sp, #56]	; 0x38
   16708:	ldrb	r5, [fp, #14]
   1670c:	ldrh	r3, [fp, #10]
   16710:	ldrh	r2, [fp, #8]
   16714:	str	r5, [sp, #4]
   16718:	ldrh	r1, [fp, #12]
   1671c:	mov	r0, #1
   16720:	str	r1, [sp]
   16724:	ldr	r1, [pc, #824]	; 16a64 <__assert_fail@plt+0x54d0>
   16728:	bl	1148c <__printf_chk@plt>
   1672c:	ldr	r3, [sp, #56]	; 0x38
   16730:	ldrb	r1, [fp, #14]
   16734:	add	r5, r5, r3
   16738:	add	r7, r5, #8
   1673c:	mov	r3, #0
   16740:	add	r2, fp, r7
   16744:	mov	r5, r3
   16748:	cmp	r1, r3
   1674c:	bls	16764 <__assert_fail@plt+0x51d0>
   16750:	ldrb	r0, [r2, #-1]!
   16754:	add	r3, r3, #1
   16758:	cmp	r3, #3
   1675c:	orr	r5, r0, r5, lsl #8
   16760:	bne	16748 <__assert_fail@plt+0x51b4>
   16764:	mov	r2, r5
   16768:	ldr	r1, [pc, #760]	; 16a68 <__assert_fail@plt+0x54d4>
   1676c:	mov	r0, #1
   16770:	bl	1148c <__printf_chk@plt>
   16774:	cmp	r4, #1
   16778:	ldr	r6, [pc, #748]	; 16a6c <__assert_fail@plt+0x54d8>
   1677c:	ldr	r3, [pc, #748]	; 16a70 <__assert_fail@plt+0x54dc>
   16780:	mov	r4, #0
   16784:	bne	16798 <__assert_fail@plt+0x5204>
   16788:	b	167dc <__assert_fail@plt+0x5248>
   1678c:	add	r4, r4, #1
   16790:	cmp	r4, #19
   16794:	beq	15ab8 <__assert_fail@plt+0x4524>
   16798:	lsr	r2, r5, r4
   1679c:	tst	r2, #1
   167a0:	beq	1678c <__assert_fail@plt+0x51f8>
   167a4:	mov	r1, r3
   167a8:	ldr	r2, [r6, r4, lsl #2]
   167ac:	mov	r0, #1
   167b0:	bl	1148c <__printf_chk@plt>
   167b4:	ldr	r3, [pc, #692]	; 16a70 <__assert_fail@plt+0x54dc>
   167b8:	b	1678c <__assert_fail@plt+0x51f8>
   167bc:	mov	r1, r3
   167c0:	ldr	r2, [r6, r4, lsl #2]
   167c4:	mov	r0, #1
   167c8:	bl	1148c <__printf_chk@plt>
   167cc:	ldr	r3, [pc, #668]	; 16a70 <__assert_fail@plt+0x54dc>
   167d0:	add	r4, r4, #1
   167d4:	cmp	r4, #22
   167d8:	beq	15ab8 <__assert_fail@plt+0x4524>
   167dc:	lsr	r2, r5, r4
   167e0:	tst	r2, #1
   167e4:	beq	167d0 <__assert_fail@plt+0x523c>
   167e8:	b	167bc <__assert_fail@plt+0x5228>
   167ec:	ldr	r0, [pc, #640]	; 16a74 <__assert_fail@plt+0x54e0>
   167f0:	bl	11378 <puts@plt>
   167f4:	b	15060 <__assert_fail@plt+0x3acc>
   167f8:	ldr	r0, [pc, #632]	; 16a78 <__assert_fail@plt+0x54e4>
   167fc:	bl	11378 <puts@plt>
   16800:	b	15058 <__assert_fail@plt+0x3ac4>
   16804:	ldr	r0, [pc, #624]	; 16a7c <__assert_fail@plt+0x54e8>
   16808:	bl	11378 <puts@plt>
   1680c:	b	15050 <__assert_fail@plt+0x3abc>
   16810:	ldr	r0, [pc, #616]	; 16a80 <__assert_fail@plt+0x54ec>
   16814:	bl	11378 <puts@plt>
   16818:	b	15044 <__assert_fail@plt+0x3ab0>
   1681c:	ldr	r0, [pc, #608]	; 16a84 <__assert_fail@plt+0x54f0>
   16820:	bl	11378 <puts@plt>
   16824:	b	15038 <__assert_fail@plt+0x3aa4>
   16828:	ldr	r0, [pc, #600]	; 16a88 <__assert_fail@plt+0x54f4>
   1682c:	bl	11378 <puts@plt>
   16830:	b	1502c <__assert_fail@plt+0x3a98>
   16834:	ldr	r0, [pc, #592]	; 16a8c <__assert_fail@plt+0x54f8>
   16838:	bl	11378 <puts@plt>
   1683c:	b	15020 <__assert_fail@plt+0x3a8c>
   16840:	ldr	r0, [pc, #584]	; 16a90 <__assert_fail@plt+0x54fc>
   16844:	bl	11378 <puts@plt>
   16848:	b	15014 <__assert_fail@plt+0x3a80>
   1684c:	ldr	r0, [pc, #576]	; 16a94 <__assert_fail@plt+0x5500>
   16850:	bl	11378 <puts@plt>
   16854:	b	15f2c <__assert_fail@plt+0x4998>
   16858:	ldr	r0, [pc, #492]	; 16a4c <__assert_fail@plt+0x54b8>
   1685c:	bl	11378 <puts@plt>
   16860:	b	15ef0 <__assert_fail@plt+0x495c>
   16864:	ldr	r0, [pc, #480]	; 16a4c <__assert_fail@plt+0x54b8>
   16868:	bl	11378 <puts@plt>
   1686c:	b	15e28 <__assert_fail@plt+0x4894>
   16870:	ldr	r0, [pc, #468]	; 16a4c <__assert_fail@plt+0x54b8>
   16874:	bl	11378 <puts@plt>
   16878:	b	1600c <__assert_fail@plt+0x4a78>
   1687c:	ldr	r0, [pc, #456]	; 16a4c <__assert_fail@plt+0x54b8>
   16880:	bl	11378 <puts@plt>
   16884:	b	15cc0 <__assert_fail@plt+0x472c>
   16888:	ldr	r0, [pc, #444]	; 16a4c <__assert_fail@plt+0x54b8>
   1688c:	bl	11378 <puts@plt>
   16890:	b	15b40 <__assert_fail@plt+0x45ac>
   16894:	ldr	r1, [fp, #34]	; 0x22
   16898:	ldr	r3, [fp, #30]
   1689c:	ldr	r2, [fp, #26]
   168a0:	mov	r0, #1
   168a4:	str	r1, [sp]
   168a8:	ldr	r1, [pc, #488]	; 16a98 <__assert_fail@plt+0x5504>
   168ac:	bl	1148c <__printf_chk@plt>
   168b0:	b	15fe4 <__assert_fail@plt+0x4a50>
   168b4:	ldr	r0, [pc, #400]	; 16a4c <__assert_fail@plt+0x54b8>
   168b8:	bl	11378 <puts@plt>
   168bc:	b	15c38 <__assert_fail@plt+0x46a4>
   168c0:	ldr	r0, [pc, #388]	; 16a4c <__assert_fail@plt+0x54b8>
   168c4:	bl	11378 <puts@plt>
   168c8:	b	1613c <__assert_fail@plt+0x4ba8>
   168cc:	ldr	r0, [pc, #456]	; 16a9c <__assert_fail@plt+0x5508>
   168d0:	bl	11378 <puts@plt>
   168d4:	mov	r5, #27
   168d8:	b	16130 <__assert_fail@plt+0x4b9c>
   168dc:	mov	r7, #8
   168e0:	mov	r3, #0
   168e4:	str	r3, [sp, #56]	; 0x38
   168e8:	ldr	r0, [pc, #348]	; 16a4c <__assert_fail@plt+0x54b8>
   168ec:	bl	11378 <puts@plt>
   168f0:	ldrb	r1, [fp, #6]
   168f4:	ldrb	r2, [fp, #3]
   168f8:	mov	r3, r6
   168fc:	str	r1, [sp, #4]
   16900:	str	r5, [sp]
   16904:	ldr	r1, [pc, #336]	; 16a5c <__assert_fail@plt+0x54c8>
   16908:	mov	r0, #1
   1690c:	bl	1148c <__printf_chk@plt>
   16910:	ldr	r3, [sp, #52]	; 0x34
   16914:	ldrb	r2, [fp, #7]
   16918:	ldr	r1, [pc, #320]	; 16a60 <__assert_fail@plt+0x54cc>
   1691c:	mov	r0, #1
   16920:	bl	1148c <__printf_chk@plt>
   16924:	ldr	r3, [pc, #372]	; 16aa0 <__assert_fail@plt+0x550c>
   16928:	cmp	r6, r3
   1692c:	bne	15ab8 <__assert_fail@plt+0x4524>
   16930:	b	16708 <__assert_fail@plt+0x5174>
   16934:	ldr	r0, [pc, #360]	; 16aa4 <__assert_fail@plt+0x5510>
   16938:	bl	11378 <puts@plt>
   1693c:	mov	r6, #25
   16940:	b	15ec4 <__assert_fail@plt+0x4930>
   16944:	mov	r3, #7
   16948:	mov	r7, #15
   1694c:	str	r3, [sp, #56]	; 0x38
   16950:	b	168e8 <__assert_fail@plt+0x5354>
   16954:	ldr	r0, [pc, #332]	; 16aa8 <__assert_fail@plt+0x5514>
   16958:	bl	11378 <puts@plt>
   1695c:	mov	r6, #25
   16960:	b	15ec4 <__assert_fail@plt+0x4930>
   16964:	mov	r5, r6
   16968:	b	15888 <__assert_fail@plt+0x42f4>
   1696c:	mov	r4, #8
   16970:	mov	r1, #7
   16974:	mov	r0, #6
   16978:	mov	r2, #5
   1697c:	b	14f0c <__assert_fail@plt+0x3978>
   16980:	mov	r2, r5
   16984:	ldr	r1, [pc, #288]	; 16aac <__assert_fail@plt+0x5518>
   16988:	mov	r0, #1
   1698c:	bl	1148c <__printf_chk@plt>
   16990:	mov	r7, r5
   16994:	mov	r6, r5
   16998:	str	r5, [sp, #52]	; 0x34
   1699c:	str	r5, [sp, #56]	; 0x38
   169a0:	mov	r4, r5
   169a4:	str	r5, [sp, #64]	; 0x40
   169a8:	b	1502c <__assert_fail@plt+0x3a98>
   169ac:	mov	r6, #7
   169b0:	mov	r4, #6
   169b4:	b	15158 <__assert_fail@plt+0x3bc4>
   169b8:	ldr	r0, [pc, #240]	; 16ab0 <__assert_fail@plt+0x551c>
   169bc:	bl	11378 <puts@plt>
   169c0:	b	160e8 <__assert_fail@plt+0x4b54>
   169c4:	ldr	r0, [pc, #232]	; 16ab4 <__assert_fail@plt+0x5520>
   169c8:	bl	11378 <puts@plt>
   169cc:	b	160e8 <__assert_fail@plt+0x4b54>
   169d0:	ldr	r0, [pc, #216]	; 16ab0 <__assert_fail@plt+0x551c>
   169d4:	bl	11378 <puts@plt>
   169d8:	b	1620c <__assert_fail@plt+0x4c78>
   169dc:	ldr	r0, [pc, #208]	; 16ab4 <__assert_fail@plt+0x5520>
   169e0:	bl	11378 <puts@plt>
   169e4:	b	1620c <__assert_fail@plt+0x4c78>
   169e8:	ldrb	r2, [fp, #27]
   169ec:	ldr	r1, [pc, #196]	; 16ab8 <__assert_fail@plt+0x5524>
   169f0:	mov	r0, #1
   169f4:	bl	1148c <__printf_chk@plt>
   169f8:	b	16228 <__assert_fail@plt+0x4c94>
   169fc:	bl	112d0 <__stack_chk_fail@plt>
   16a00:	ldr	r1, [pc, #180]	; 16abc <__assert_fail@plt+0x5528>
   16a04:	mov	r0, #1
   16a08:	bl	1148c <__printf_chk@plt>
   16a0c:	mov	r0, fp
   16a10:	mov	r5, #0
   16a14:	ldrb	r1, [r0], #3
   16a18:	sub	r1, r1, #3
   16a1c:	bl	11a8c <__assert_fail@plt+0x4f8>
   16a20:	b	15214 <__assert_fail@plt+0x3c80>
   16a24:	ldr	r1, [pc, #148]	; 16ac0 <__assert_fail@plt+0x552c>
   16a28:	mov	r0, #1
   16a2c:	bl	1148c <__printf_chk@plt>
   16a30:	mov	r0, fp
   16a34:	mov	r3, #0
   16a38:	ldrb	r1, [r0], #3
   16a3c:	str	r3, [sp, #52]	; 0x34
   16a40:	sub	r1, r1, #3
   16a44:	bl	11a8c <__assert_fail@plt+0x4f8>
   16a48:	b	15a2c <__assert_fail@plt+0x4498>
   16a4c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   16a50:	andeq	lr, r1, r8, ror r9
   16a54:	andeq	pc, r1, ip, lsr sp	; <UNPREDICTABLE>
   16a58:	muleq	r2, r8, r6
   16a5c:	andeq	lr, r1, r0, asr #22
   16a60:	andeq	lr, r1, r8, lsr #23
   16a64:	andeq	lr, r1, ip, asr #23
   16a68:	andeq	lr, r1, r8, ror #24
   16a6c:	andeq	fp, r1, r4, lsl #26
   16a70:			; <UNDEFINED> instruction: 0x000206bc
   16a74:	andeq	lr, r1, r8, asr #18
   16a78:	andeq	lr, r1, ip, lsr #18
   16a7c:	andeq	lr, r1, ip, lsl r9
   16a80:	andeq	lr, r1, r0, lsl #18
   16a84:	andeq	lr, r1, r4, ror #17
   16a88:	andeq	lr, r1, r0, asr #17
   16a8c:	muleq	r1, ip, r8
   16a90:	andeq	lr, r1, r4, ror r8
   16a94:	andeq	pc, r1, r4, asr #18
   16a98:	andeq	pc, r1, ip, lsl #22
   16a9c:	muleq	r1, r0, r5
   16aa0:	andeq	r0, r0, r1, lsl #4
   16aa4:	muleq	r1, ip, r8
   16aa8:	andeq	pc, r1, r4, lsl #17
   16aac:	andeq	lr, r1, r8, lsl #16
   16ab0:	andeq	pc, r1, r4, lsl #16
   16ab4:	andeq	pc, r1, r0, ror #15
   16ab8:	andeq	pc, r1, r8, asr r8	; <UNPREDICTABLE>
   16abc:	andeq	lr, r1, ip, asr #19
   16ac0:	ldrdeq	lr, [r1], -r8
   16ac4:	ldr	r3, [pc, #408]	; 16c64 <__assert_fail@plt+0x56d0>
   16ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16acc:	sub	sp, sp, #740	; 0x2e4
   16ad0:	mov	r4, r1
   16ad4:	ldr	r3, [r3]
   16ad8:	add	fp, sp, #92	; 0x5c
   16adc:	mov	r5, r0
   16ae0:	ldrh	r2, [r1, #8]
   16ae4:	add	sl, sp, #220	; 0xdc
   16ae8:	mov	r1, #128	; 0x80
   16aec:	mov	r0, fp
   16af0:	str	r3, [sp, #732]	; 0x2dc
   16af4:	bl	1ae70 <__assert_fail@plt+0x98dc>
   16af8:	ldrh	r3, [r4, #10]
   16afc:	ldrh	r2, [r4, #8]
   16b00:	mov	r0, sl
   16b04:	mov	r1, #128	; 0x80
   16b08:	bl	1aeb8 <__assert_fail@plt+0x9924>
   16b0c:	add	r8, sp, #476	; 0x1dc
   16b10:	ldrb	r2, [r4, #4]
   16b14:	mov	r1, #128	; 0x80
   16b18:	add	r0, sp, #348	; 0x15c
   16b1c:	bl	1af04 <__assert_fail@plt+0x9970>
   16b20:	add	r9, sp, #604	; 0x25c
   16b24:	ldrb	r3, [r4, #5]
   16b28:	ldrb	r2, [r4, #4]
   16b2c:	mov	r0, r8
   16b30:	mov	r1, #128	; 0x80
   16b34:	bl	1af4c <__assert_fail@plt+0x99b8>
   16b38:	ldrb	r3, [r4, #6]
   16b3c:	ldrb	r2, [r4, #5]
   16b40:	ldrb	r1, [r4, #4]
   16b44:	mov	r0, r9
   16b48:	bl	141c4 <__assert_fail@plt+0x2c30>
   16b4c:	ldrb	r1, [r4, #14]
   16b50:	mov	r0, r5
   16b54:	bl	1b724 <__assert_fail@plt+0xa190>
   16b58:	ldrb	r1, [r4, #15]
   16b5c:	mov	r7, r0
   16b60:	mov	r0, r5
   16b64:	bl	1b724 <__assert_fail@plt+0xa190>
   16b68:	ldrb	r1, [r4, #16]
   16b6c:	mov	r6, r0
   16b70:	mov	r0, r5
   16b74:	bl	1b724 <__assert_fail@plt+0xa190>
   16b78:	ldrh	r3, [r4, #12]
   16b7c:	ldrh	r2, [r4, #2]
   16b80:	ldrb	lr, [r4, #17]
   16b84:	ldrb	ip, [r4, #16]
   16b88:	str	fp, [sp, #40]	; 0x28
   16b8c:	mov	r5, r0
   16b90:	ldrb	r0, [r4, #15]
   16b94:	str	sl, [sp, #48]	; 0x30
   16b98:	add	sl, sp, #348	; 0x15c
   16b9c:	str	r6, [sp, #72]	; 0x48
   16ba0:	str	r7, [sp, #64]	; 0x40
   16ba4:	ldrb	r1, [r4, #14]
   16ba8:	str	r9, [sp, #28]
   16bac:	ldrh	r9, [r4, #10]
   16bb0:	str	r8, [sp, #20]
   16bb4:	ldrh	r8, [r4, #8]
   16bb8:	str	sl, [sp, #12]
   16bbc:	uxtb	sl, r3
   16bc0:	lsr	r3, r3, #8
   16bc4:	str	r5, [sp, #80]	; 0x50
   16bc8:	str	sl, [sp, #56]	; 0x38
   16bcc:	ldrb	sl, [r4, #7]
   16bd0:	str	r3, [sp, #52]	; 0x34
   16bd4:	str	lr, [sp, #84]	; 0x54
   16bd8:	ldrb	lr, [r4, #6]
   16bdc:	str	ip, [sp, #76]	; 0x4c
   16be0:	ldrb	ip, [r4, #5]
   16be4:	str	r0, [sp, #68]	; 0x44
   16be8:	ldrb	r0, [r4, #4]
   16bec:	uxtb	r3, r2
   16bf0:	lsr	r2, r2, #8
   16bf4:	str	lr, [sp, #24]
   16bf8:	str	ip, [sp, #16]
   16bfc:	str	r1, [sp, #60]	; 0x3c
   16c00:	str	r0, [sp, #8]
   16c04:	ldr	r1, [pc, #92]	; 16c68 <__assert_fail@plt+0x56d4>
   16c08:	str	r9, [sp, #44]	; 0x2c
   16c0c:	str	r8, [sp, #36]	; 0x24
   16c10:	str	sl, [sp, #32]
   16c14:	mov	r0, #1
   16c18:	str	r3, [sp, #4]
   16c1c:	str	r2, [sp]
   16c20:	ldrb	r3, [r4, #1]
   16c24:	ldrb	r2, [r4]
   16c28:	bl	1148c <__printf_chk@plt>
   16c2c:	mov	r0, r7
   16c30:	bl	112a0 <free@plt>
   16c34:	mov	r0, r6
   16c38:	bl	112a0 <free@plt>
   16c3c:	mov	r0, r5
   16c40:	bl	112a0 <free@plt>
   16c44:	ldr	r3, [pc, #24]	; 16c64 <__assert_fail@plt+0x56d0>
   16c48:	ldr	r2, [sp, #732]	; 0x2dc
   16c4c:	ldr	r3, [r3]
   16c50:	cmp	r2, r3
   16c54:	bne	16c60 <__assert_fail@plt+0x56cc>
   16c58:	add	sp, sp, #740	; 0x2e4
   16c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c60:	bl	112d0 <__stack_chk_fail@plt>
   16c64:	strdeq	ip, [r3], -r8
   16c68:	andeq	r0, r2, ip, asr #13
   16c6c:	ldr	r3, [pc, #3880]	; 17b9c <__assert_fail@plt+0x6608>
   16c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c74:	sub	sp, sp, #412	; 0x19c
   16c78:	ldr	r3, [r3]
   16c7c:	add	r1, sp, #64	; 0x40
   16c80:	mov	fp, r0
   16c84:	str	r3, [sp, #404]	; 0x194
   16c88:	bl	11288 <libusb_open@plt>
   16c8c:	cmp	r0, #0
   16c90:	bne	16f94 <__assert_fail@plt+0x5a00>
   16c94:	add	r1, sp, #72	; 0x48
   16c98:	mov	r0, fp
   16c9c:	bl	114e0 <libusb_get_device_descriptor@plt>
   16ca0:	add	r1, sp, #72	; 0x48
   16ca4:	ldr	r0, [sp, #64]	; 0x40
   16ca8:	bl	16ac4 <__assert_fail@plt+0x5530>
   16cac:	ldrb	r3, [sp, #89]	; 0x59
   16cb0:	cmp	r3, #0
   16cb4:	streq	r3, [sp, #44]	; 0x2c
   16cb8:	bne	16e38 <__assert_fail@plt+0x58a4>
   16cbc:	ldr	sl, [sp, #64]	; 0x40
   16cc0:	cmp	sl, #0
   16cc4:	beq	16e00 <__assert_fail@plt+0x586c>
   16cc8:	ldrb	r3, [sp, #76]	; 0x4c
   16ccc:	ldrh	r4, [sp, #74]	; 0x4a
   16cd0:	cmp	r3, #9
   16cd4:	addne	r9, sp, #148	; 0x94
   16cd8:	beq	173c4 <__assert_fail@plt+0x5e30>
   16cdc:	cmp	r4, #512	; 0x200
   16ce0:	bhi	16fe0 <__assert_fail@plt+0x5a4c>
   16ce4:	cmp	r4, #512	; 0x200
   16ce8:	beq	17044 <__assert_fail@plt+0x5ab0>
   16cec:	ldr	r1, [pc, #3756]	; 17ba0 <__assert_fail@plt+0x660c>
   16cf0:	mov	r2, #4
   16cf4:	mov	r3, #0
   16cf8:	str	r1, [sp, #12]
   16cfc:	str	r2, [sp, #8]
   16d00:	str	r3, [sp]
   16d04:	str	r9, [sp, #4]
   16d08:	mov	r0, sl
   16d0c:	mov	r3, #2560	; 0xa00
   16d10:	mov	r2, #6
   16d14:	mov	r1, #128	; 0x80
   16d18:	bl	11534 <libusb_control_transfer@plt>
   16d1c:	cmp	r0, #0
   16d20:	blt	16e1c <__assert_fail@plt+0x5888>
   16d24:	cmp	r0, #4
   16d28:	bne	16d44 <__assert_fail@plt+0x57b0>
   16d2c:	ldrb	r2, [sp, #148]	; 0x94
   16d30:	cmp	r2, #4
   16d34:	bne	16d44 <__assert_fail@plt+0x57b0>
   16d38:	ldrb	r3, [sp, #149]	; 0x95
   16d3c:	cmp	r3, #10
   16d40:	beq	17338 <__assert_fail@plt+0x5da4>
   16d44:	ldr	r1, [pc, #3668]	; 17ba0 <__assert_fail@plt+0x660c>
   16d48:	mov	r3, #0
   16d4c:	mov	r2, #2
   16d50:	str	r1, [sp, #12]
   16d54:	str	r2, [sp, #8]
   16d58:	str	r9, [sp, #4]
   16d5c:	str	r3, [sp]
   16d60:	mov	r2, r3
   16d64:	mov	r1, #128	; 0x80
   16d68:	ldr	r0, [sp, #64]	; 0x40
   16d6c:	ldrh	r4, [sp, #74]	; 0x4a
   16d70:	bl	11534 <libusb_control_transfer@plt>
   16d74:	cmp	r0, #0
   16d78:	blt	17054 <__assert_fail@plt+0x5ac0>
   16d7c:	ldrb	r3, [sp, #148]	; 0x94
   16d80:	ldrb	r2, [sp, #149]	; 0x95
   16d84:	ldr	r1, [pc, #3608]	; 17ba4 <__assert_fail@plt+0x6610>
   16d88:	mov	r0, #1
   16d8c:	bl	1148c <__printf_chk@plt>
   16d90:	ldrb	r3, [sp, #148]	; 0x94
   16d94:	tst	r3, #1
   16d98:	ldrne	r0, [pc, #3592]	; 17ba8 <__assert_fail@plt+0x6614>
   16d9c:	ldreq	r0, [pc, #3592]	; 17bac <__assert_fail@plt+0x6618>
   16da0:	bl	11378 <puts@plt>
   16da4:	ldrb	r3, [sp, #148]	; 0x94
   16da8:	tst	r3, #2
   16dac:	bne	173a8 <__assert_fail@plt+0x5e14>
   16db0:	tst	r3, #4
   16db4:	beq	16fb8 <__assert_fail@plt+0x5a24>
   16db8:	cmp	r4, #768	; 0x300
   16dbc:	bcs	17328 <__assert_fail@plt+0x5d94>
   16dc0:	ldr	r0, [pc, #3560]	; 17bb0 <__assert_fail@plt+0x661c>
   16dc4:	bl	11378 <puts@plt>
   16dc8:	ldrb	r3, [sp, #148]	; 0x94
   16dcc:	ldr	r2, [sp, #44]	; 0x2c
   16dd0:	cmp	r2, #0
   16dd4:	beq	16df0 <__assert_fail@plt+0x585c>
   16dd8:	tst	r3, #8
   16ddc:	bne	178a8 <__assert_fail@plt+0x6314>
   16de0:	tst	r3, #16
   16de4:	bne	17898 <__assert_fail@plt+0x6304>
   16de8:	tst	r3, #32
   16dec:	bne	17888 <__assert_fail@plt+0x62f4>
   16df0:	tst	r3, #64	; 0x40
   16df4:	bne	173b8 <__assert_fail@plt+0x5e24>
   16df8:	ldr	r0, [sp, #64]	; 0x40
   16dfc:	bl	112dc <libusb_close@plt>
   16e00:	ldr	r3, [pc, #3476]	; 17b9c <__assert_fail@plt+0x6608>
   16e04:	ldr	r2, [sp, #404]	; 0x194
   16e08:	ldr	r3, [r3]
   16e0c:	cmp	r2, r3
   16e10:	bne	185c0 <__assert_fail@plt+0x702c>
   16e14:	add	sp, sp, #412	; 0x19c
   16e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e1c:	bl	11450 <__errno_location@plt>
   16e20:	ldr	r3, [r0]
   16e24:	cmp	r3, #32
   16e28:	beq	16d44 <__assert_fail@plt+0x57b0>
   16e2c:	ldr	r0, [pc, #3456]	; 17bb4 <__assert_fail@plt+0x6620>
   16e30:	bl	112e8 <perror@plt>
   16e34:	b	16d44 <__assert_fail@plt+0x57b0>
   16e38:	add	r2, sp, #68	; 0x44
   16e3c:	mov	r1, #0
   16e40:	mov	r0, fp
   16e44:	bl	1133c <libusb_get_config_descriptor@plt>
   16e48:	subs	r3, r0, #0
   16e4c:	str	r3, [sp, #44]	; 0x2c
   16e50:	bne	1708c <__assert_fail@plt+0x5af8>
   16e54:	ldr	r3, [sp, #68]	; 0x44
   16e58:	str	r3, [sp, #52]	; 0x34
   16e5c:	ldrd	r0, [r3, #16]
   16e60:	cmp	r0, #0
   16e64:	beq	16e74 <__assert_fail@plt+0x58e0>
   16e68:	bl	12748 <__assert_fail@plt+0x11b4>
   16e6c:	cmp	r0, #0
   16e70:	bne	16f3c <__assert_fail@plt+0x59a8>
   16e74:	ldr	r3, [sp, #52]	; 0x34
   16e78:	ldrb	r3, [r3, #4]
   16e7c:	cmp	r3, #0
   16e80:	str	r3, [sp, #48]	; 0x30
   16e84:	beq	16f88 <__assert_fail@plt+0x59f4>
   16e88:	ldr	r3, [sp, #52]	; 0x34
   16e8c:	ldr	r7, [r3, #12]
   16e90:	mov	r3, #0
   16e94:	add	r7, r7, #4
   16e98:	str	r3, [sp, #40]	; 0x28
   16e9c:	ldr	r8, [r7]
   16ea0:	mov	r5, #0
   16ea4:	cmp	r8, r5
   16ea8:	mov	r6, r5
   16eac:	ble	17368 <__assert_fail@plt+0x5dd4>
   16eb0:	ldr	r9, [r7, #-4]
   16eb4:	add	r9, r9, r6
   16eb8:	ldrd	r0, [r9, #16]
   16ebc:	cmp	r0, #0
   16ec0:	beq	16ed0 <__assert_fail@plt+0x593c>
   16ec4:	bl	12748 <__assert_fail@plt+0x11b4>
   16ec8:	cmp	r0, #0
   16ecc:	bne	16f3c <__assert_fail@plt+0x59a8>
   16ed0:	ldrb	sl, [r9, #4]
   16ed4:	mov	r4, #0
   16ed8:	b	16eec <__assert_fail@plt+0x5958>
   16edc:	bl	12748 <__assert_fail@plt+0x11b4>
   16ee0:	add	r4, r4, #1
   16ee4:	cmp	r0, #0
   16ee8:	bne	16f3c <__assert_fail@plt+0x59a8>
   16eec:	cmp	sl, r4
   16ef0:	bls	17358 <__assert_fail@plt+0x5dc4>
   16ef4:	add	r3, r4, r4, lsl #2
   16ef8:	ldr	r2, [r9, #12]
   16efc:	add	r3, r2, r3, lsl #2
   16f00:	ldrd	r0, [r3, #12]
   16f04:	cmp	r0, #0
   16f08:	bne	16edc <__assert_fail@plt+0x5948>
   16f0c:	add	r4, r4, #1
   16f10:	cmp	sl, r4
   16f14:	beq	17358 <__assert_fail@plt+0x5dc4>
   16f18:	ldr	r0, [r3, #32]
   16f1c:	add	r3, r3, #20
   16f20:	cmp	r0, #0
   16f24:	ldr	r1, [r3, #16]
   16f28:	beq	16f0c <__assert_fail@plt+0x5978>
   16f2c:	bl	12748 <__assert_fail@plt+0x11b4>
   16f30:	add	r4, r4, #1
   16f34:	cmp	r0, #0
   16f38:	beq	16eec <__assert_fail@plt+0x5958>
   16f3c:	ldrb	ip, [r0, #2]
   16f40:	ldr	r4, [pc, #3764]	; 17dfc <__assert_fail@plt+0x6868>
   16f44:	ldr	lr, [pc, #3180]	; 17bb8 <__assert_fail@plt+0x6624>
   16f48:	tst	ip, #1
   16f4c:	ldr	r1, [pc, #3176]	; 17bbc <__assert_fail@plt+0x6628>
   16f50:	moveq	lr, r4
   16f54:	tst	ip, #2
   16f58:	moveq	r1, r4
   16f5c:	ldrb	r3, [r0, #1]
   16f60:	ldrb	r2, [r0]
   16f64:	str	r1, [sp, #8]
   16f68:	stm	sp, {ip, lr}
   16f6c:	ldr	r1, [pc, #3148]	; 17bc0 <__assert_fail@plt+0x662c>
   16f70:	mov	r0, #1
   16f74:	bl	1148c <__printf_chk@plt>
   16f78:	mov	r3, #1
   16f7c:	str	r3, [sp, #44]	; 0x2c
   16f80:	ldr	r3, [sp, #68]	; 0x44
   16f84:	str	r3, [sp, #52]	; 0x34
   16f88:	ldr	r0, [sp, #52]	; 0x34
   16f8c:	bl	11318 <libusb_free_config_descriptor@plt>
   16f90:	b	170ac <__assert_fail@plt+0x5b18>
   16f94:	ldr	r3, [pc, #3664]	; 17dec <__assert_fail@plt+0x6858>
   16f98:	mov	r2, #55	; 0x37
   16f9c:	mov	r1, #1
   16fa0:	ldr	r3, [r3]
   16fa4:	ldr	r0, [pc, #3096]	; 17bc4 <__assert_fail@plt+0x6630>
   16fa8:	bl	11330 <fwrite@plt>
   16fac:	mov	r3, #0
   16fb0:	str	r3, [sp, #64]	; 0x40
   16fb4:	b	16c94 <__assert_fail@plt+0x5700>
   16fb8:	cmp	r4, #768	; 0x300
   16fbc:	bcc	16dcc <__assert_fail@plt+0x5838>
   16fc0:	tst	r3, #8
   16fc4:	bne	17878 <__assert_fail@plt+0x62e4>
   16fc8:	tst	r3, #16
   16fcc:	beq	16dcc <__assert_fail@plt+0x5838>
   16fd0:	ldr	r0, [pc, #3056]	; 17bc8 <__assert_fail@plt+0x6634>
   16fd4:	bl	11378 <puts@plt>
   16fd8:	ldrb	r3, [sp, #148]	; 0x94
   16fdc:	b	16dcc <__assert_fail@plt+0x5838>
   16fe0:	ldr	r5, [pc, #3000]	; 17ba0 <__assert_fail@plt+0x660c>
   16fe4:	mov	r2, #5
   16fe8:	add	r3, sp, #140	; 0x8c
   16fec:	mov	r4, #0
   16ff0:	str	r2, [sp, #8]
   16ff4:	str	r3, [sp, #4]
   16ff8:	str	r5, [sp, #12]
   16ffc:	str	r4, [sp]
   17000:	mov	r3, #3840	; 0xf00
   17004:	mov	r2, #6
   17008:	mov	r1, #128	; 0x80
   1700c:	mov	r0, sl
   17010:	bl	11534 <libusb_control_transfer@plt>
   17014:	cmp	r0, r4
   17018:	ble	17034 <__assert_fail@plt+0x5aa0>
   1701c:	ldrb	r2, [sp, #140]	; 0x8c
   17020:	cmp	r2, #5
   17024:	bne	17034 <__assert_fail@plt+0x5aa0>
   17028:	ldrb	r3, [sp, #141]	; 0x8d
   1702c:	cmp	r3, #15
   17030:	beq	178cc <__assert_fail@plt+0x6338>
   17034:	ldrh	r4, [sp, #74]	; 0x4a
   17038:	ldr	sl, [sp, #64]	; 0x40
   1703c:	cmp	r4, #512	; 0x200
   17040:	bne	16cec <__assert_fail@plt+0x5758>
   17044:	mov	r0, sl
   17048:	bl	14204 <__assert_fail@plt+0x2c70>
   1704c:	ldr	sl, [sp, #64]	; 0x40
   17050:	b	16cec <__assert_fail@plt+0x5758>
   17054:	ldr	r3, [pc, #3472]	; 17dec <__assert_fail@plt+0x6858>
   17058:	ldr	r5, [r3]
   1705c:	bl	11450 <__errno_location@plt>
   17060:	mov	r4, r0
   17064:	ldr	r0, [r0]
   17068:	bl	113a8 <strerror@plt>
   1706c:	ldr	r3, [r4]
   17070:	ldr	r2, [pc, #2900]	; 17bcc <__assert_fail@plt+0x6638>
   17074:	str	r3, [sp]
   17078:	mov	r1, #1
   1707c:	mov	r3, r0
   17080:	mov	r0, r5
   17084:	bl	11498 <__fprintf_chk@plt>
   17088:	b	16df8 <__assert_fail@plt+0x5864>
   1708c:	ldr	r3, [pc, #3416]	; 17dec <__assert_fail@plt+0x6858>
   17090:	mov	r2, #74	; 0x4a
   17094:	mov	r1, #1
   17098:	ldr	r3, [r3]
   1709c:	ldr	r0, [pc, #2860]	; 17bd0 <__assert_fail@plt+0x663c>
   170a0:	bl	11330 <fwrite@plt>
   170a4:	mov	r3, #0
   170a8:	str	r3, [sp, #44]	; 0x2c
   170ac:	ldrb	r3, [sp, #89]	; 0x59
   170b0:	cmp	r3, #0
   170b4:	beq	16cbc <__assert_fail@plt+0x5728>
   170b8:	mov	r7, #0
   170bc:	b	170e8 <__assert_fail@plt+0x5b54>
   170c0:	ldr	r1, [pc, #3364]	; 17dec <__assert_fail@plt+0x6858>
   170c4:	mov	r3, r7
   170c8:	ldr	r2, [pc, #2820]	; 17bd4 <__assert_fail@plt+0x6640>
   170cc:	ldr	r0, [r1]
   170d0:	mov	r1, #1
   170d4:	bl	11498 <__fprintf_chk@plt>
   170d8:	ldrb	r3, [sp, #89]	; 0x59
   170dc:	add	r7, r7, #1
   170e0:	cmp	r3, r7
   170e4:	ble	16cbc <__assert_fail@plt+0x5728>
   170e8:	add	r2, sp, #68	; 0x44
   170ec:	uxtb	r1, r7
   170f0:	mov	r0, fp
   170f4:	bl	1133c <libusb_get_config_descriptor@plt>
   170f8:	cmp	r0, #0
   170fc:	bne	170c0 <__assert_fail@plt+0x5b2c>
   17100:	ldr	r4, [sp, #68]	; 0x44
   17104:	ldr	r8, [sp, #64]	; 0x40
   17108:	ldrh	r6, [sp, #74]	; 0x4a
   1710c:	ldrb	r1, [r4, #6]
   17110:	mov	r0, r8
   17114:	bl	1b724 <__assert_fail@plt+0xa190>
   17118:	ldrb	r1, [r4, #7]
   1711c:	ldrb	r3, [r4, #1]
   17120:	ldrb	r2, [r4]
   17124:	mov	r5, r0
   17128:	ldrh	r0, [r4, #2]
   1712c:	str	r1, [sp, #20]
   17130:	str	r5, [sp, #16]
   17134:	ldrb	r1, [r4, #6]
   17138:	str	r1, [sp, #12]
   1713c:	ldrb	ip, [r4, #5]
   17140:	ldr	r1, [pc, #2704]	; 17bd8 <__assert_fail@plt+0x6644>
   17144:	str	ip, [sp, #8]
   17148:	ldrb	ip, [r4, #4]
   1714c:	str	r0, [sp]
   17150:	mov	r0, #1
   17154:	str	ip, [sp, #4]
   17158:	bl	1148c <__printf_chk@plt>
   1715c:	mov	r0, r5
   17160:	bl	112a0 <free@plt>
   17164:	ldrb	r3, [r4, #7]
   17168:	tst	r3, #128	; 0x80
   1716c:	bne	1717c <__assert_fail@plt+0x5be8>
   17170:	ldr	r0, [pc, #2660]	; 17bdc <__assert_fail@plt+0x6648>
   17174:	bl	11378 <puts@plt>
   17178:	ldrb	r3, [r4, #7]
   1717c:	tst	r3, #64	; 0x40
   17180:	ldrne	r0, [pc, #2648]	; 17be0 <__assert_fail@plt+0x664c>
   17184:	ldreq	r0, [pc, #2648]	; 17be4 <__assert_fail@plt+0x6650>
   17188:	bl	11378 <puts@plt>
   1718c:	ldrb	r3, [r4, #7]
   17190:	tst	r3, #32
   17194:	bne	17388 <__assert_fail@plt+0x5df4>
   17198:	tst	r3, #16
   1719c:	bne	1739c <__assert_fail@plt+0x5e08>
   171a0:	ldrb	r3, [r4, #8]
   171a4:	cmp	r6, #768	; 0x300
   171a8:	movcs	r2, #8
   171ac:	movcc	r2, #2
   171b0:	ldr	r1, [pc, #2608]	; 17be8 <__assert_fail@plt+0x6654>
   171b4:	mul	r2, r2, r3
   171b8:	mov	r0, #1
   171bc:	bl	1148c <__printf_chk@plt>
   171c0:	ldr	r6, [r4, #20]
   171c4:	cmp	r6, #0
   171c8:	beq	1724c <__assert_fail@plt+0x5cb8>
   171cc:	cmp	r6, #1
   171d0:	ldr	r5, [r4, #16]
   171d4:	ble	1724c <__assert_fail@plt+0x5cb8>
   171d8:	ldrb	r2, [r5]
   171dc:	cmp	r2, #1
   171e0:	bls	1724c <__assert_fail@plt+0x5cb8>
   171e4:	ldr	r9, [pc, #2560]	; 17bec <__assert_fail@plt+0x6658>
   171e8:	ldrb	r3, [r5, #1]
   171ec:	sub	r3, r3, #9
   171f0:	cmp	r3, #5
   171f4:	ldrls	pc, [pc, r3, lsl #2]
   171f8:	b	17214 <__assert_fail@plt+0x5c80>
   171fc:	andeq	r7, r1, ip, lsr #4
   17200:	andeq	r7, r1, r4, lsl r2
   17204:	andeq	r7, r1, r8, lsl r3
   17208:	strdeq	r7, [r1], -r4
   1720c:	andeq	r7, r1, r4, lsl r2
   17210:			; <UNDEFINED> instruction: 0x000172b8
   17214:	ldr	r1, [pc, #2516]	; 17bf0 <__assert_fail@plt+0x665c>
   17218:	mov	r0, #1
   1721c:	bl	1148c <__printf_chk@plt>
   17220:	ldrb	r1, [r5]
   17224:	mov	r0, r5
   17228:	bl	11a8c <__assert_fail@plt+0x4f8>
   1722c:	ldrb	r3, [r5]
   17230:	sub	r6, r6, r3
   17234:	cmp	r6, #1
   17238:	add	r5, r5, r3
   1723c:	ble	1724c <__assert_fail@plt+0x5cb8>
   17240:	ldrb	r2, [r5]
   17244:	cmp	r2, #1
   17248:	bhi	171e8 <__assert_fail@plt+0x5c54>
   1724c:	ldrb	r3, [r4, #4]
   17250:	cmp	r3, #0
   17254:	movne	r9, #0
   17258:	beq	172ac <__assert_fail@plt+0x5d18>
   1725c:	ldr	r5, [r4, #12]
   17260:	add	r5, r5, r9, lsl #3
   17264:	ldr	r2, [r5, #4]
   17268:	cmp	r2, #0
   1726c:	movgt	r6, #0
   17270:	movgt	sl, r6
   17274:	ble	172a0 <__assert_fail@plt+0x5d0c>
   17278:	ldr	r1, [r5]
   1727c:	mov	r0, r8
   17280:	add	r1, r1, sl
   17284:	bl	14448 <__assert_fail@plt+0x2eb4>
   17288:	ldr	r3, [r5, #4]
   1728c:	add	r6, r6, #1
   17290:	cmp	r6, r3
   17294:	add	sl, sl, #24
   17298:	blt	17278 <__assert_fail@plt+0x5ce4>
   1729c:	ldrb	r3, [r4, #4]
   172a0:	add	r9, r9, #1
   172a4:	cmp	r9, r3
   172a8:	blt	1725c <__assert_fail@plt+0x5cc8>
   172ac:	ldr	r0, [sp, #68]	; 0x44
   172b0:	bl	11318 <libusb_free_config_descriptor@plt>
   172b4:	b	170d8 <__assert_fail@plt+0x5b44>
   172b8:	ldrb	r1, [r5, #2]
   172bc:	ldrb	r0, [r5, #4]
   172c0:	and	r3, r1, #4
   172c4:	str	r0, [sp, #12]
   172c8:	ldr	r0, [pc, #2652]	; 17d2c <__assert_fail@plt+0x6798>
   172cc:	add	r3, r0, r3, lsl #2
   172d0:	ldrb	r0, [r5, #3]
   172d4:	ldr	r3, [r3, #1788]	; 0x6fc
   172d8:	str	r0, [sp, #8]
   172dc:	stm	sp, {r1, r3}
   172e0:	mov	r0, #1
   172e4:	mov	r3, #14
   172e8:	ldr	r1, [pc, #2308]	; 17bf4 <__assert_fail@plt+0x6660>
   172ec:	bl	1148c <__printf_chk@plt>
   172f0:	b	1722c <__assert_fail@plt+0x5c98>
   172f4:	ldrb	r1, [r5, #4]
   172f8:	mov	r3, #12
   172fc:	mov	r0, #1
   17300:	str	r1, [sp, #4]
   17304:	ldrh	ip, [r5, #2]
   17308:	mov	r1, r9
   1730c:	str	ip, [sp]
   17310:	bl	1148c <__printf_chk@plt>
   17314:	b	1722c <__assert_fail@plt+0x5c98>
   17318:	mov	r1, r5
   1731c:	mov	r0, r8
   17320:	bl	14358 <__assert_fail@plt+0x2dc4>
   17324:	b	1722c <__assert_fail@plt+0x5c98>
   17328:	ldr	r0, [pc, #2248]	; 17bf8 <__assert_fail@plt+0x6664>
   1732c:	bl	11378 <puts@plt>
   17330:	ldrb	r3, [sp, #148]	; 0x94
   17334:	b	16fc0 <__assert_fail@plt+0x5a2c>
   17338:	ldrb	r0, [sp, #151]	; 0x97
   1733c:	ldrb	r1, [sp, #150]	; 0x96
   17340:	str	r0, [sp, #4]
   17344:	str	r1, [sp]
   17348:	mov	r0, #1
   1734c:	ldr	r1, [pc, #2216]	; 17bfc <__assert_fail@plt+0x6668>
   17350:	bl	1148c <__printf_chk@plt>
   17354:	b	16d44 <__assert_fail@plt+0x57b0>
   17358:	add	r5, r5, #1
   1735c:	cmp	r8, r5
   17360:	add	r6, r6, #24
   17364:	bgt	16eb0 <__assert_fail@plt+0x591c>
   17368:	ldr	r3, [sp, #40]	; 0x28
   1736c:	ldr	r2, [sp, #48]	; 0x30
   17370:	add	r3, r3, #1
   17374:	cmp	r2, r3
   17378:	str	r3, [sp, #40]	; 0x28
   1737c:	add	r7, r7, #8
   17380:	bne	16e9c <__assert_fail@plt+0x5908>
   17384:	b	16f88 <__assert_fail@plt+0x59f4>
   17388:	ldr	r0, [pc, #2160]	; 17c00 <__assert_fail@plt+0x666c>
   1738c:	bl	11378 <puts@plt>
   17390:	ldrb	r3, [r4, #7]
   17394:	tst	r3, #16
   17398:	beq	171a0 <__assert_fail@plt+0x5c0c>
   1739c:	ldr	r0, [pc, #2144]	; 17c04 <__assert_fail@plt+0x6670>
   173a0:	bl	11378 <puts@plt>
   173a4:	b	171a0 <__assert_fail@plt+0x5c0c>
   173a8:	ldr	r0, [pc, #2136]	; 17c08 <__assert_fail@plt+0x6674>
   173ac:	bl	11378 <puts@plt>
   173b0:	ldrb	r3, [sp, #148]	; 0x94
   173b4:	b	16db0 <__assert_fail@plt+0x581c>
   173b8:	ldr	r0, [pc, #2124]	; 17c0c <__assert_fail@plt+0x6678>
   173bc:	bl	11378 <puts@plt>
   173c0:	b	16df8 <__assert_fail@plt+0x5864>
   173c4:	ldr	lr, [pc, #2116]	; 17c10 <__assert_fail@plt+0x667c>
   173c8:	add	ip, sp, #92	; 0x5c
   173cc:	mov	r5, #13
   173d0:	ldm	lr!, {r0, r1, r2, r3}
   173d4:	add	r9, sp, #148	; 0x94
   173d8:	str	r5, [sp, #8]
   173dc:	ldr	r5, [pc, #1980]	; 17ba0 <__assert_fail@plt+0x660c>
   173e0:	stmia	ip!, {r0, r1, r2, r3}
   173e4:	cmp	r4, #768	; 0x300
   173e8:	ldm	lr!, {r0, r1, r2, r3}
   173ec:	str	r5, [sp, #12]
   173f0:	mov	r5, #0
   173f4:	stmia	ip!, {r0, r1, r2, r3}
   173f8:	ldm	lr, {r0, r1, r2, r3}
   173fc:	stm	sp, {r5, r9}
   17400:	stm	ip, {r0, r1, r2, r3}
   17404:	movcs	r3, #10752	; 0x2a00
   17408:	ldrb	ip, [sp, #78]	; 0x4e
   1740c:	movcc	r3, #10496	; 0x2900
   17410:	mov	r2, #6
   17414:	mov	r1, #160	; 0xa0
   17418:	mov	r0, sl
   1741c:	str	ip, [sp, #40]	; 0x28
   17420:	bl	11534 <libusb_control_transfer@plt>
   17424:	subs	r5, r0, #0
   17428:	blt	17920 <__assert_fail@plt+0x638c>
   1742c:	cmp	r5, #8
   17430:	ble	17990 <__assert_fail@plt+0x63fc>
   17434:	ldr	r2, [pc, #2496]	; 17dfc <__assert_fail@plt+0x6868>
   17438:	ldr	r1, [pc, #2004]	; 17c14 <__assert_fail@plt+0x6680>
   1743c:	mov	r0, #1
   17440:	ldrh	r5, [r9, #3]
   17444:	bl	1148c <__printf_chk@plt>
   17448:	ldrb	r3, [sp, #148]	; 0x94
   1744c:	ldr	r2, [pc, #2472]	; 17dfc <__assert_fail@plt+0x6868>
   17450:	ldr	r1, [pc, #1984]	; 17c18 <__assert_fail@plt+0x6684>
   17454:	mov	r0, #1
   17458:	bl	1148c <__printf_chk@plt>
   1745c:	ldrb	r3, [sp, #149]	; 0x95
   17460:	ldr	r2, [pc, #2452]	; 17dfc <__assert_fail@plt+0x6868>
   17464:	ldr	r1, [pc, #1968]	; 17c1c <__assert_fail@plt+0x6688>
   17468:	mov	r0, #1
   1746c:	bl	1148c <__printf_chk@plt>
   17470:	ldrb	r3, [sp, #150]	; 0x96
   17474:	ldr	r2, [pc, #2432]	; 17dfc <__assert_fail@plt+0x6868>
   17478:	ldr	r1, [pc, #1952]	; 17c20 <__assert_fail@plt+0x668c>
   1747c:	mov	r0, #1
   17480:	bl	1148c <__printf_chk@plt>
   17484:	mov	r3, r5
   17488:	ldr	r2, [pc, #2412]	; 17dfc <__assert_fail@plt+0x6868>
   1748c:	ldr	r1, [pc, #1936]	; 17c24 <__assert_fail@plt+0x6690>
   17490:	mov	r0, #1
   17494:	bl	1148c <__printf_chk@plt>
   17498:	ands	r0, r5, #3
   1749c:	beq	17a74 <__assert_fail@plt+0x64e0>
   174a0:	cmp	r0, #1
   174a4:	bne	178b8 <__assert_fail@plt+0x6324>
   174a8:	ldr	r2, [pc, #2380]	; 17dfc <__assert_fail@plt+0x6868>
   174ac:	ldr	r1, [pc, #1908]	; 17c28 <__assert_fail@plt+0x6694>
   174b0:	bl	1148c <__printf_chk@plt>
   174b4:	tst	r5, #4
   174b8:	bne	17a88 <__assert_fail@plt+0x64f4>
   174bc:	lsr	r0, r5, #3
   174c0:	ands	r0, r0, #3
   174c4:	beq	17a60 <__assert_fail@plt+0x64cc>
   174c8:	cmp	r0, #1
   174cc:	beq	17a50 <__assert_fail@plt+0x64bc>
   174d0:	ldr	r2, [pc, #2340]	; 17dfc <__assert_fail@plt+0x6868>
   174d4:	ldr	r1, [pc, #1872]	; 17c2c <__assert_fail@plt+0x6698>
   174d8:	mov	r0, #1
   174dc:	bl	1148c <__printf_chk@plt>
   174e0:	ldr	r3, [sp, #40]	; 0x28
   174e4:	sub	r3, r3, #1
   174e8:	cmp	r3, #1
   174ec:	bls	17a9c <__assert_fail@plt+0x6508>
   174f0:	ldr	r3, [sp, #40]	; 0x28
   174f4:	cmp	r3, #3
   174f8:	beq	179e8 <__assert_fail@plt+0x6454>
   174fc:	tst	r5, #128	; 0x80
   17500:	bne	17ac0 <__assert_fail@plt+0x652c>
   17504:	ldrb	r3, [sp, #153]	; 0x99
   17508:	ldr	r2, [pc, #2284]	; 17dfc <__assert_fail@plt+0x6868>
   1750c:	ldr	r1, [pc, #1820]	; 17c30 <__assert_fail@plt+0x669c>
   17510:	mov	r0, #1
   17514:	bl	1148c <__printf_chk@plt>
   17518:	ldrb	r3, [sp, #154]	; 0x9a
   1751c:	ldr	r2, [pc, #2264]	; 17dfc <__assert_fail@plt+0x6868>
   17520:	ldr	r1, [pc, #1804]	; 17c34 <__assert_fail@plt+0x66a0>
   17524:	mov	r0, #1
   17528:	bl	1148c <__printf_chk@plt>
   1752c:	mov	r3, #7
   17530:	str	r3, [sp, #48]	; 0x30
   17534:	ldrb	r5, [sp, #150]	; 0x96
   17538:	mov	r0, #1
   1753c:	ldr	r2, [pc, #2232]	; 17dfc <__assert_fail@plt+0x6868>
   17540:	ldr	r1, [pc, #1776]	; 17c38 <__assert_fail@plt+0x66a4>
   17544:	lsr	r5, r5, #3
   17548:	add	r5, r5, r0
   1754c:	cmp	r5, #3
   17550:	movge	r5, #3
   17554:	bl	1148c <__printf_chk@plt>
   17558:	ldr	r3, [sp, #48]	; 0x30
   1755c:	add	r8, r9, r5
   17560:	ldr	r7, [pc, #1748]	; 17c3c <__assert_fail@plt+0x66a8>
   17564:	add	r6, r8, r3
   17568:	add	fp, r9, r3
   1756c:	ldrb	r2, [fp], #1
   17570:	mov	r1, r7
   17574:	mov	r0, #1
   17578:	bl	1148c <__printf_chk@plt>
   1757c:	cmp	fp, r6
   17580:	bne	1756c <__assert_fail@plt+0x5fd8>
   17584:	ldr	r3, [sp, #40]	; 0x28
   17588:	cmp	r3, #3
   1758c:	beq	175cc <__assert_fail@plt+0x6038>
   17590:	ldr	r2, [pc, #2148]	; 17dfc <__assert_fail@plt+0x6868>
   17594:	ldr	r1, [pc, #1700]	; 17c40 <__assert_fail@plt+0x66ac>
   17598:	mov	r0, #1
   1759c:	bl	1148c <__printf_chk@plt>
   175a0:	ldr	r3, [sp, #48]	; 0x30
   175a4:	ldr	r6, [pc, #1680]	; 17c3c <__assert_fail@plt+0x66a8>
   175a8:	add	r5, r3, r5
   175ac:	add	r8, r8, r5
   175b0:	add	r5, r9, r5
   175b4:	ldrb	r2, [r5], #1
   175b8:	mov	r1, r6
   175bc:	mov	r0, #1
   175c0:	bl	1148c <__printf_chk@plt>
   175c4:	cmp	r5, r8
   175c8:	bne	175b4 <__assert_fail@plt+0x6020>
   175cc:	mov	r0, #10
   175d0:	bl	11474 <putchar@plt>
   175d4:	ldr	r0, [pc, #1640]	; 17c44 <__assert_fail@plt+0x66b0>
   175d8:	bl	11378 <puts@plt>
   175dc:	ldrb	r3, [sp, #150]	; 0x96
   175e0:	cmp	r3, #0
   175e4:	beq	17968 <__assert_fail@plt+0x63d4>
   175e8:	ldr	r5, [pc, #2060]	; 17dfc <__assert_fail@plt+0x6868>
   175ec:	mov	r6, #0
   175f0:	add	fp, sp, #140	; 0x8c
   175f4:	b	1770c <__assert_fail@plt+0x6178>
   175f8:	tst	r1, #16
   175fc:	ldr	r2, [pc, #1604]	; 17c48 <__assert_fail@plt+0x66b4>
   17600:	moveq	r2, r5
   17604:	tst	r1, #8
   17608:	ldr	r3, [pc, #1596]	; 17c4c <__assert_fail@plt+0x66b8>
   1760c:	moveq	r3, r5
   17610:	tst	r1, #4
   17614:	ldr	ip, [pc, #1588]	; 17c50 <__assert_fail@plt+0x66bc>
   17618:	moveq	ip, r5
   1761c:	tst	r1, #2
   17620:	ldr	r0, [pc, #1580]	; 17c54 <__assert_fail@plt+0x66c0>
   17624:	moveq	r0, r5
   17628:	tst	r1, #1
   1762c:	ldr	r1, [pc, #1572]	; 17c58 <__assert_fail@plt+0x66c4>
   17630:	moveq	r1, r5
   17634:	str	ip, [sp]
   17638:	strd	r0, [sp, #4]
   1763c:	ldr	r1, [pc, #1560]	; 17c5c <__assert_fail@plt+0x66c8>
   17640:	mov	r0, #1
   17644:	bl	1148c <__printf_chk@plt>
   17648:	ldrb	r0, [sp, #141]	; 0x8d
   1764c:	ldr	r2, [pc, #1548]	; 17c60 <__assert_fail@plt+0x66cc>
   17650:	ldrb	r1, [sp, #140]	; 0x8c
   17654:	tst	r0, #16
   17658:	moveq	r2, r5
   1765c:	tst	r0, #8
   17660:	ldr	r3, [pc, #1532]	; 17c64 <__assert_fail@plt+0x66d0>
   17664:	moveq	r3, r5
   17668:	tst	r0, #4
   1766c:	ldr	lr, [pc, #1524]	; 17c68 <__assert_fail@plt+0x66d4>
   17670:	moveq	lr, r5
   17674:	tst	r0, #2
   17678:	ldr	ip, [pc, #1516]	; 17c6c <__assert_fail@plt+0x66d8>
   1767c:	moveq	ip, r5
   17680:	tst	r0, #1
   17684:	ldr	r8, [pc, #1508]	; 17c70 <__assert_fail@plt+0x66dc>
   17688:	moveq	r8, r5
   1768c:	tst	r1, #32
   17690:	ldr	r0, [pc, #1500]	; 17c74 <__assert_fail@plt+0x66e0>
   17694:	moveq	r0, r5
   17698:	tst	r1, #16
   1769c:	ldr	r7, [pc, #1492]	; 17c78 <__assert_fail@plt+0x66e4>
   176a0:	moveq	r7, r5
   176a4:	tst	r1, #8
   176a8:	str	lr, [sp]
   176ac:	ldr	lr, [pc, #1480]	; 17c7c <__assert_fail@plt+0x66e8>
   176b0:	moveq	lr, r5
   176b4:	tst	r1, #4
   176b8:	str	ip, [sp, #4]
   176bc:	ldr	ip, [pc, #1468]	; 17c80 <__assert_fail@plt+0x66ec>
   176c0:	moveq	ip, r5
   176c4:	tst	r1, #2
   176c8:	str	r0, [sp, #12]
   176cc:	ldr	r0, [pc, #1456]	; 17c84 <__assert_fail@plt+0x66f0>
   176d0:	moveq	r0, r5
   176d4:	tst	r1, #1
   176d8:	ldr	r1, [pc, #1448]	; 17c88 <__assert_fail@plt+0x66f4>
   176dc:	moveq	r1, r5
   176e0:	str	r8, [sp, #8]
   176e4:	strd	r0, [sp, #28]
   176e8:	str	r7, [sp, #16]
   176ec:	str	lr, [sp, #20]
   176f0:	str	ip, [sp, #24]
   176f4:	ldr	r1, [pc, #1424]	; 17c8c <__assert_fail@plt+0x66f8>
   176f8:	mov	r0, #1
   176fc:	bl	1148c <__printf_chk@plt>
   17700:	ldrb	r3, [sp, #150]	; 0x96
   17704:	cmp	r6, r3
   17708:	bge	17968 <__assert_fail@plt+0x63d4>
   1770c:	add	r6, r6, #1
   17710:	ldr	r1, [pc, #1160]	; 17ba0 <__assert_fail@plt+0x660c>
   17714:	uxth	r0, r6
   17718:	mov	r2, #4
   1771c:	mov	r3, #0
   17720:	stm	sp, {r0, fp}
   17724:	str	r1, [sp, #12]
   17728:	str	r2, [sp, #8]
   1772c:	mov	r1, #163	; 0xa3
   17730:	mov	r2, r3
   17734:	mov	r0, sl
   17738:	bl	11534 <libusb_control_transfer@plt>
   1773c:	cmp	r0, #0
   17740:	blt	179ac <__assert_fail@plt+0x6418>
   17744:	ldrb	r1, [sp, #140]	; 0x8c
   17748:	ldrb	r2, [sp, #141]	; 0x8d
   1774c:	ldrb	r3, [sp, #142]	; 0x8e
   17750:	str	r1, [sp, #8]
   17754:	str	r2, [sp, #4]
   17758:	str	r3, [sp]
   1775c:	ldr	r1, [pc, #1324]	; 17c90 <__assert_fail@plt+0x66fc>
   17760:	ldrb	r3, [sp, #143]	; 0x8f
   17764:	mov	r2, r6
   17768:	mov	r0, #1
   1776c:	bl	1148c <__printf_chk@plt>
   17770:	cmp	r4, #768	; 0x300
   17774:	ldrb	r1, [sp, #142]	; 0x8e
   17778:	bne	175f8 <__assert_fail@plt+0x6064>
   1777c:	ldr	r3, [pc, #1296]	; 17c94 <__assert_fail@plt+0x6700>
   17780:	tst	r1, #128	; 0x80
   17784:	movne	r2, r3
   17788:	moveq	r2, r5
   1778c:	tst	r1, #64	; 0x40
   17790:	ldr	r3, [pc, #1280]	; 17c98 <__assert_fail@plt+0x6704>
   17794:	moveq	r3, r5
   17798:	tst	r1, #32
   1779c:	ldr	ip, [pc, #1272]	; 17c9c <__assert_fail@plt+0x6708>
   177a0:	ldrb	r7, [sp, #141]	; 0x8d
   177a4:	moveq	ip, r5
   177a8:	tst	r1, #16
   177ac:	ldr	lr, [pc, #1172]	; 17c48 <__assert_fail@plt+0x66b4>
   177b0:	moveq	lr, r5
   177b4:	tst	r1, #8
   177b8:	ldr	r0, [pc, #1164]	; 17c4c <__assert_fail@plt+0x66b8>
   177bc:	str	ip, [sp]
   177c0:	moveq	r0, r5
   177c4:	ldrb	ip, [sp, #140]	; 0x8c
   177c8:	tst	r1, #1
   177cc:	ldr	r1, [pc, #1156]	; 17c58 <__assert_fail@plt+0x66c4>
   177d0:	moveq	r1, r5
   177d4:	lsl	r7, r7, #3
   177d8:	strd	r0, [sp, #8]
   177dc:	str	lr, [sp, #4]
   177e0:	ldr	r1, [pc, #1208]	; 17ca0 <__assert_fail@plt+0x670c>
   177e4:	and	r7, r7, #8
   177e8:	mov	r0, #1
   177ec:	add	r7, r7, ip, lsr #5
   177f0:	bl	1148c <__printf_chk@plt>
   177f4:	ldrb	r1, [sp, #141]	; 0x8d
   177f8:	ldr	r0, [pc, #1188]	; 17ca4 <__assert_fail@plt+0x6710>
   177fc:	ldr	r2, [pc, #1188]	; 17ca8 <__assert_fail@plt+0x6714>
   17800:	tst	r1, #28
   17804:	movne	r2, r0
   17808:	tst	r1, #2
   1780c:	ldr	r3, [pc, #1116]	; 17c70 <__assert_fail@plt+0x66dc>
   17810:	ldr	r1, [pc, #1172]	; 17cac <__assert_fail@plt+0x6718>
   17814:	moveq	r3, r5
   17818:	mov	r0, #1
   1781c:	bl	1148c <__printf_chk@plt>
   17820:	cmp	r7, #11
   17824:	ble	17974 <__assert_fail@plt+0x63e0>
   17828:	ldrb	r1, [sp, #140]	; 0x8c
   1782c:	ldr	r2, [pc, #1092]	; 17c78 <__assert_fail@plt+0x66e4>
   17830:	ldr	r3, [pc, #1092]	; 17c7c <__assert_fail@plt+0x66e8>
   17834:	tst	r1, #16
   17838:	moveq	r2, r5
   1783c:	tst	r1, #8
   17840:	moveq	r3, r5
   17844:	ldr	r0, [pc, #1084]	; 17c88 <__assert_fail@plt+0x66f4>
   17848:	tst	r1, #2
   1784c:	ldr	ip, [pc, #1072]	; 17c84 <__assert_fail@plt+0x66f0>
   17850:	moveq	ip, r5
   17854:	tst	r1, #1
   17858:	movne	r1, r0
   1785c:	moveq	r1, r5
   17860:	str	r1, [sp, #4]
   17864:	str	ip, [sp]
   17868:	ldr	r1, [pc, #1088]	; 17cb0 <__assert_fail@plt+0x671c>
   1786c:	mov	r0, #1
   17870:	bl	1148c <__printf_chk@plt>
   17874:	b	17700 <__assert_fail@plt+0x616c>
   17878:	ldr	r0, [pc, #1076]	; 17cb4 <__assert_fail@plt+0x6720>
   1787c:	bl	11378 <puts@plt>
   17880:	ldrb	r3, [sp, #148]	; 0x94
   17884:	b	16fc8 <__assert_fail@plt+0x5a34>
   17888:	ldr	r0, [pc, #1064]	; 17cb8 <__assert_fail@plt+0x6724>
   1788c:	bl	11378 <puts@plt>
   17890:	ldrb	r3, [sp, #148]	; 0x94
   17894:	b	16df0 <__assert_fail@plt+0x585c>
   17898:	ldr	r0, [pc, #1052]	; 17cbc <__assert_fail@plt+0x6728>
   1789c:	bl	11378 <puts@plt>
   178a0:	ldrb	r3, [sp, #148]	; 0x94
   178a4:	b	16de8 <__assert_fail@plt+0x5854>
   178a8:	ldr	r0, [pc, #1040]	; 17cc0 <__assert_fail@plt+0x672c>
   178ac:	bl	11378 <puts@plt>
   178b0:	ldrb	r3, [sp, #148]	; 0x94
   178b4:	b	16de0 <__assert_fail@plt+0x584c>
   178b8:	ldr	r2, [pc, #1340]	; 17dfc <__assert_fail@plt+0x6868>
   178bc:	ldr	r1, [pc, #1024]	; 17cc4 <__assert_fail@plt+0x6730>
   178c0:	mov	r0, #1
   178c4:	bl	1148c <__printf_chk@plt>
   178c8:	b	174b4 <__assert_fail@plt+0x5f20>
   178cc:	ldrb	r0, [sp, #143]	; 0x8f
   178d0:	ldrb	r6, [sp, #142]	; 0x8e
   178d4:	ldrb	r1, [sp, #144]	; 0x90
   178d8:	add	r6, r6, r0, lsl #8
   178dc:	str	r1, [sp, #4]
   178e0:	str	r6, [sp]
   178e4:	ldr	r1, [pc, #988]	; 17cc8 <__assert_fail@plt+0x6734>
   178e8:	mov	r0, #1
   178ec:	bl	1148c <__printf_chk@plt>
   178f0:	cmp	r6, #5
   178f4:	bgt	17ad4 <__assert_fail@plt+0x6540>
   178f8:	ldrb	r3, [sp, #144]	; 0x90
   178fc:	cmp	r3, r4
   17900:	beq	17034 <__assert_fail@plt+0x5aa0>
   17904:	ldr	r3, [pc, #1248]	; 17dec <__assert_fail@plt+0x6858>
   17908:	mov	r2, #43	; 0x2b
   1790c:	mov	r1, #1
   17910:	ldr	r3, [r3]
   17914:	ldr	r0, [pc, #1228]	; 17de8 <__assert_fail@plt+0x6854>
   17918:	bl	11330 <fwrite@plt>
   1791c:	b	17034 <__assert_fail@plt+0x5aa0>
   17920:	bl	11450 <__errno_location@plt>
   17924:	ldr	r3, [r0]
   17928:	mov	r4, r0
   1792c:	cmp	r3, #113	; 0x71
   17930:	beq	17968 <__assert_fail@plt+0x63d4>
   17934:	ldr	r3, [pc, #1200]	; 17dec <__assert_fail@plt+0x6858>
   17938:	mov	r0, r5
   1793c:	ldr	r5, [r3]
   17940:	bl	11444 <libusb_error_name@plt>
   17944:	mov	r6, r0
   17948:	ldr	r0, [r4]
   1794c:	bl	113a8 <strerror@plt>
   17950:	mov	r3, r6
   17954:	ldr	r2, [pc, #880]	; 17ccc <__assert_fail@plt+0x6738>
   17958:	mov	r1, #1
   1795c:	str	r0, [sp]
   17960:	mov	r0, r5
   17964:	bl	11498 <__fprintf_chk@plt>
   17968:	ldrh	r4, [sp, #74]	; 0x4a
   1796c:	ldr	sl, [sp, #64]	; 0x40
   17970:	b	16cdc <__assert_fail@plt+0x5748>
   17974:	add	r3, sp, #408	; 0x198
   17978:	add	r7, r3, r7, lsl #2
   1797c:	ldr	r1, [pc, #844]	; 17cd0 <__assert_fail@plt+0x673c>
   17980:	ldr	r2, [r7, #-316]	; 0xfffffec4
   17984:	mov	r0, #1
   17988:	bl	1148c <__printf_chk@plt>
   1798c:	b	17828 <__assert_fail@plt+0x6294>
   17990:	ldr	r1, [pc, #1108]	; 17dec <__assert_fail@plt+0x6858>
   17994:	mov	r3, r5
   17998:	ldr	r2, [pc, #820]	; 17cd4 <__assert_fail@plt+0x6740>
   1799c:	ldr	r0, [r1]
   179a0:	mov	r1, #1
   179a4:	bl	11498 <__fprintf_chk@plt>
   179a8:	b	17968 <__assert_fail@plt+0x63d4>
   179ac:	ldr	r3, [pc, #1080]	; 17dec <__assert_fail@plt+0x6858>
   179b0:	ldr	r5, [r3]
   179b4:	bl	11450 <__errno_location@plt>
   179b8:	mov	r4, r0
   179bc:	ldr	r0, [r0]
   179c0:	bl	113a8 <strerror@plt>
   179c4:	ldr	r2, [r4]
   179c8:	mov	r3, r6
   179cc:	str	r2, [sp, #4]
   179d0:	mov	r1, #1
   179d4:	ldr	r2, [pc, #764]	; 17cd8 <__assert_fail@plt+0x6744>
   179d8:	str	r0, [sp]
   179dc:	mov	r0, r5
   179e0:	bl	11498 <__fprintf_chk@plt>
   179e4:	b	17968 <__assert_fail@plt+0x63d4>
   179e8:	ldrb	r3, [sp, #153]	; 0x99
   179ec:	ldr	r2, [pc, #1032]	; 17dfc <__assert_fail@plt+0x6868>
   179f0:	ldr	r1, [pc, #568]	; 17c30 <__assert_fail@plt+0x669c>
   179f4:	mov	r0, #1
   179f8:	bl	1148c <__printf_chk@plt>
   179fc:	ldrb	r3, [sp, #154]	; 0x9a
   17a00:	ldr	r2, [pc, #1012]	; 17dfc <__assert_fail@plt+0x6868>
   17a04:	ldr	r1, [pc, #720]	; 17cdc <__assert_fail@plt+0x6748>
   17a08:	mov	r0, #1
   17a0c:	lsl	r3, r3, #2
   17a10:	bl	1148c <__printf_chk@plt>
   17a14:	ldrb	r3, [sp, #155]	; 0x9b
   17a18:	ldr	r2, [pc, #988]	; 17dfc <__assert_fail@plt+0x6868>
   17a1c:	ldr	r1, [pc, #700]	; 17ce0 <__assert_fail@plt+0x674c>
   17a20:	mov	r0, #1
   17a24:	bl	1148c <__printf_chk@plt>
   17a28:	ldrb	r0, [sp, #156]	; 0x9c
   17a2c:	ldrb	r3, [sp, #155]	; 0x9b
   17a30:	ldr	r2, [pc, #964]	; 17dfc <__assert_fail@plt+0x6868>
   17a34:	ldr	r1, [pc, #680]	; 17ce4 <__assert_fail@plt+0x6750>
   17a38:	add	r3, r3, r0, lsl #4
   17a3c:	mov	r0, #1
   17a40:	bl	1148c <__printf_chk@plt>
   17a44:	mov	r3, #10
   17a48:	str	r3, [sp, #48]	; 0x30
   17a4c:	b	17534 <__assert_fail@plt+0x5fa0>
   17a50:	ldr	r2, [pc, #932]	; 17dfc <__assert_fail@plt+0x6868>
   17a54:	ldr	r1, [pc, #652]	; 17ce8 <__assert_fail@plt+0x6754>
   17a58:	bl	1148c <__printf_chk@plt>
   17a5c:	b	174e0 <__assert_fail@plt+0x5f4c>
   17a60:	ldr	r2, [pc, #916]	; 17dfc <__assert_fail@plt+0x6868>
   17a64:	ldr	r1, [pc, #640]	; 17cec <__assert_fail@plt+0x6758>
   17a68:	mov	r0, #1
   17a6c:	bl	1148c <__printf_chk@plt>
   17a70:	b	174e0 <__assert_fail@plt+0x5f4c>
   17a74:	ldr	r2, [pc, #896]	; 17dfc <__assert_fail@plt+0x6868>
   17a78:	ldr	r1, [pc, #624]	; 17cf0 <__assert_fail@plt+0x675c>
   17a7c:	mov	r0, #1
   17a80:	bl	1148c <__printf_chk@plt>
   17a84:	b	174b4 <__assert_fail@plt+0x5f20>
   17a88:	ldr	r2, [pc, #876]	; 17dfc <__assert_fail@plt+0x6868>
   17a8c:	ldr	r1, [pc, #608]	; 17cf4 <__assert_fail@plt+0x6760>
   17a90:	mov	r0, #1
   17a94:	bl	1148c <__printf_chk@plt>
   17a98:	b	174bc <__assert_fail@plt+0x5f28>
   17a9c:	lsr	r3, r5, #5
   17aa0:	and	r3, r3, #3
   17aa4:	add	r3, r3, #1
   17aa8:	ldr	r2, [pc, #844]	; 17dfc <__assert_fail@plt+0x6868>
   17aac:	lsl	r3, r3, #3
   17ab0:	ldr	r1, [pc, #576]	; 17cf8 <__assert_fail@plt+0x6764>
   17ab4:	mov	r0, #1
   17ab8:	bl	1148c <__printf_chk@plt>
   17abc:	b	174f0 <__assert_fail@plt+0x5f5c>
   17ac0:	ldr	r2, [pc, #820]	; 17dfc <__assert_fail@plt+0x6868>
   17ac4:	ldr	r1, [pc, #560]	; 17cfc <__assert_fail@plt+0x6768>
   17ac8:	mov	r0, #1
   17acc:	bl	1148c <__printf_chk@plt>
   17ad0:	b	17504 <__assert_fail@plt+0x5f70>
   17ad4:	mov	r1, #1
   17ad8:	mov	r0, r6
   17adc:	bl	11240 <calloc@plt>
   17ae0:	subs	r2, r0, #0
   17ae4:	str	r2, [sp, #40]	; 0x28
   17ae8:	beq	17034 <__assert_fail@plt+0x5aa0>
   17aec:	uxth	r3, r6
   17af0:	str	r2, [sp, #4]
   17af4:	str	r3, [sp, #8]
   17af8:	str	r5, [sp, #12]
   17afc:	str	r4, [sp]
   17b00:	mov	r3, #3840	; 0xf00
   17b04:	mov	r2, #6
   17b08:	mov	r1, #128	; 0x80
   17b0c:	mov	r0, sl
   17b10:	bl	11534 <libusb_control_transfer@plt>
   17b14:	cmp	r0, #0
   17b18:	blt	18574 <__assert_fail@plt+0x6fe0>
   17b1c:	sub	r8, r6, #5
   17b20:	ldr	r3, [sp, #40]	; 0x28
   17b24:	cmp	r8, #2
   17b28:	add	fp, r3, #5
   17b2c:	bls	17f08 <__assert_fail@plt+0x6974>
   17b30:	ldrb	r4, [r3, #5]
   17b34:	cmp	r4, #2
   17b38:	bls	17ef8 <__assert_fail@plt+0x6964>
   17b3c:	str	sl, [sp, #52]	; 0x34
   17b40:	mov	sl, r8
   17b44:	str	r9, [sp, #48]	; 0x30
   17b48:	ldrb	r3, [fp, #2]
   17b4c:	sub	r3, r3, #1
   17b50:	cmp	r3, #15
   17b54:	ldrls	pc, [pc, r3, lsl #2]
   17b58:	b	183c8 <__assert_fail@plt+0x6e34>
   17b5c:	ldrdeq	r7, [r1], -r4
   17b60:	andeq	r8, r1, ip, lsr #6
   17b64:	andeq	r8, r1, ip, lsl #5
   17b68:	andeq	r8, r1, r0, lsl #7
   17b6c:	andeq	r8, r1, ip, ror #3
   17b70:	andeq	r8, r1, r8, asr #7
   17b74:	andeq	r8, r1, r8, asr #7
   17b78:	andeq	r8, r1, r8, asr #7
   17b7c:	andeq	r8, r1, r8, asr #7
   17b80:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b84:	andeq	r8, r1, r8, asr #7
   17b88:	andeq	r8, r1, r8, asr #7
   17b8c:	andeq	r7, r1, r4, asr #30
   17b90:	andeq	r8, r1, r8, asr #7
   17b94:	andeq	r8, r1, r8, asr #7
   17b98:	andeq	r7, r1, ip, lsl pc
   17b9c:	strdeq	ip, [r3], -r8
   17ba0:	andeq	r1, r0, r8, lsl #7
   17ba4:	ldrdeq	r1, [r2], -r8
   17ba8:	andeq	r0, r2, ip, asr #24
   17bac:	andeq	r0, r2, r0, ror #24
   17bb0:	andeq	r1, r2, r0, lsl pc
   17bb4:	andeq	r1, r2, r0, lsl lr
   17bb8:	andeq	r0, r2, r4, ror r8
   17bbc:	muleq	r2, r8, r8
   17bc0:	andeq	r0, r2, r0, lsl #21
   17bc4:	strdeq	r0, [r2], -ip
   17bc8:	andeq	r1, r2, ip, lsr #30
   17bcc:			; <UNDEFINED> instruction: 0x00021eb4
   17bd0:	andeq	r0, r2, r4, lsr sl
   17bd4:	andeq	r0, r2, ip, ror #21
   17bd8:	andeq	r0, r2, r8, lsr fp
   17bdc:	andeq	r0, r2, r4, lsr #24
   17be0:	andeq	r0, r2, r8, asr #24
   17be4:	andeq	r0, r2, ip, asr ip
   17be8:	muleq	r2, ip, ip
   17bec:			; <UNDEFINED> instruction: 0x00020cbc
   17bf0:	andeq	r0, r2, r0, lsl #13
   17bf4:	andeq	r0, r2, r0, asr sp
   17bf8:	andeq	r2, r2, r8, lsl #1
   17bfc:	andeq	r1, r2, ip, lsr #28
   17c00:	andeq	r0, r2, r0, ror ip
   17c04:	andeq	r0, r2, r4, lsl #25
   17c08:	strdeq	r1, [r2], -r8
   17c0c:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   17c10:			; <UNDEFINED> instruction: 0x0001c2b4
   17c14:	andeq	r0, r2, r8, asr lr
   17c18:	andeq	r0, r2, ip, ror #28
   17c1c:	andeq	r0, r2, ip, lsl #29
   17c20:	andeq	r0, r2, ip, lsr #29
   17c24:	andeq	r0, r2, ip, asr #29
   17c28:	andeq	r0, r2, ip, lsl #30
   17c2c:			; <UNDEFINED> instruction: 0x00020fb8
   17c30:	andeq	r1, r2, r4, lsr #31
   17c34:	andeq	r2, r2, ip, asr r0
   17c38:	andeq	r1, r2, r4, lsl r0
   17c3c:	andeq	r1, r2, ip, lsr #32
   17c40:	andeq	r1, r2, r8, asr #32
   17c44:	andeq	r1, r2, r4, lsr r0
   17c48:	andeq	r0, r2, r0, asr #17
   17c4c:	andeq	r0, r2, ip, asr #17
   17c50:	ldrdeq	r0, [r2], -r4
   17c54:	andeq	r0, r2, r0, ror #17
   17c58:	andeq	r0, r2, ip, ror #17
   17c5c:	andeq	r1, r2, r8, lsr #1
   17c60:	strdeq	r0, [r2], -r8
   17c64:	andeq	r0, r2, r4, lsl #18
   17c68:	andeq	r0, r2, ip, lsl #18
   17c6c:	andeq	r0, r2, r8, lsl r9
   17c70:	andeq	r0, r2, r4, lsr #18
   17c74:	andeq	r0, r2, ip, lsr #18
   17c78:	andeq	r0, r2, r0, lsr r9
   17c7c:	andeq	r0, r2, r8, lsr r9
   17c80:	andeq	r0, r2, ip, lsr r9
   17c84:	andeq	r0, r2, r8, asr #18
   17c88:	andeq	r0, r2, r0, asr r9
   17c8c:	strheq	r1, [r2], -r4
   17c90:	andeq	r1, r2, r8, lsl #1
   17c94:	andeq	r0, r2, ip, asr r9
   17c98:	andeq	r0, r2, ip, ror #18
   17c9c:	andeq	r0, r2, ip, ror r9
   17ca0:	andeq	r1, r2, ip, asr #1
   17ca4:	muleq	r2, r0, r9
   17ca8:	andeq	r0, r2, r8, lsl #19
   17cac:	ldrdeq	r1, [r2], -r4
   17cb0:	andeq	r1, r2, r0, ror #1
   17cb4:	andeq	r1, r2, ip, lsl pc
   17cb8:	andeq	r1, r2, r8, ror pc
   17cbc:	andeq	r1, r2, r8, ror #30
   17cc0:	andeq	r1, r2, r8, asr pc
   17cc4:	andeq	r0, r2, ip, lsr #30
   17cc8:	andeq	r1, r2, ip, ror #1
   17ccc:	andeq	r0, r2, ip, lsl #28
   17cd0:	ldrdeq	r1, [r2], -ip
   17cd4:	andeq	r0, r2, r0, lsr lr
   17cd8:	andeq	r1, r2, r0, rrx
   17cdc:	ldrdeq	r1, [r2], -r4
   17ce0:	andeq	r2, r2, r0
   17ce4:	andeq	r2, r2, r0, lsr r0
   17ce8:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   17cec:	andeq	r0, r2, r8, ror #30
   17cf0:	andeq	r0, r2, ip, ror #29
   17cf4:	andeq	r0, r2, r0, asr pc
   17cf8:	ldrdeq	r0, [r2], -ip
   17cfc:	strdeq	r0, [r2], -ip
   17d00:	andeq	r1, r0, r8, lsl #7
   17d04:	andeq	r1, r2, ip, ror #20
   17d08:	andeq	r1, r2, r0, lsl #21
   17d0c:	andeq	r1, r2, r4, lsr #3
   17d10:	andeq	r1, r2, r4, ror #27
   17d14:	andeq	r3, r2, r8, lsr r0
   17d18:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   17d1c:	muleq	r2, r8, fp
   17d20:	muleq	r2, r8, ip
   17d24:			; <UNDEFINED> instruction: 0x00021cb8
   17d28:	andeq	r1, r2, r0, lsr #26
   17d2c:	andeq	fp, r1, r4, lsr #23
   17d30:	andeq	r1, r2, r4, asr sp
   17d34:	muleq	r2, r8, r0
   17d38:	andeq	r1, r2, r0, lsl #14
   17d3c:	andeq	r1, r2, r0, lsr #15
   17d40:	andeq	r1, r2, r8, asr #15
   17d44:	andeq	r1, r2, ip, ror #15
   17d48:	andeq	r0, r2, r0, lsr #19
   17d4c:	andeq	r0, r2, ip, lsr #19
   17d50:			; <UNDEFINED> instruction: 0x000209b8
   17d54:	andeq	r1, r2, r4, lsl r8
   17d58:			; <UNDEFINED> instruction: 0x000209bc
   17d5c:	strdeq	r8, [r2], -r4
   17d60:	andeq	r1, r2, ip, lsr r8
   17d64:	muleq	r2, r0, r9
   17d68:	andeq	r1, r2, r0, lsr #20
   17d6c:	andeq	r1, r2, r4, asr #20
   17d70:	andeq	r1, r2, r4, ror #21
   17d74:	andeq	r1, r2, ip, asr #6
   17d78:	andeq	r1, r2, ip, lsl r4
   17d7c:	andeq	r1, r2, r4, lsl #10
   17d80:			; <UNDEFINED> instruction: 0x000211b4
   17d84:	andeq	r1, r2, r4, ror r2
   17d88:	andeq	r1, r2, ip, lsr #17
   17d8c:	andeq	r1, r2, r0, asr #18
   17d90:	andeq	r0, r2, r8, lsr r3
   17d94:	andeq	r1, r2, r8, lsr #11
   17d98:	andeq	r1, r2, r4, ror r6
   17d9c:	andeq	r1, r2, r0, lsr #13
   17da0:	andeq	r1, r2, r4, ror #10
   17da4:	andeq	r1, r2, r4, lsr #10
   17da8:	andeq	r1, r2, ip, ror #11
   17dac:	andeq	r1, r2, r8, ror r8
   17db0:	andeq	r1, r2, r0, ror #18
   17db4:	andeq	r1, r2, r8, lsr #5
   17db8:	strdeq	r1, [r2], -r8
   17dbc:	andeq	r1, r2, ip, asr #4
   17dc0:	andeq	r1, r2, r8, asr #13
   17dc4:	andeq	r1, r2, r8, lsl r3
   17dc8:	andeq	r1, r2, r0, ror #22
   17dcc:	andeq	r1, r2, r8, ror #7
   17dd0:	ldrdeq	r0, [r2], -r4
   17dd4:	andeq	r1, r2, r8, lsl #22
   17dd8:	ldrdeq	r1, [r2], -r4
   17ddc:	andeq	r1, r2, r0, lsr #9
   17de0:	andeq	r1, r2, r0, ror r4
   17de4:	andeq	r1, r2, r0, asr #8
   17de8:	andeq	r1, r2, r8, ror r1
   17dec:	muleq	r4, r0, r8
   17df0:	andeq	r1, r2, r0, lsr fp
   17df4:	ldrdeq	r1, [r2], -ip
   17df8:	andeq	r0, r2, r8, asr #19
   17dfc:	ldrdeq	r2, [r2], -r8
   17e00:	andeq	r0, r2, r0, asr #19
   17e04:	andeq	r1, r2, r0, lsr r6
   17e08:	ldr	r0, [sp, #48]	; 0x30
   17e0c:	ldr	r1, [pc, #-276]	; 17d00 <__assert_fail@plt+0x676c>
   17e10:	mov	r2, #255	; 0xff
   17e14:	mov	r3, #2
   17e18:	str	r0, [sp, #4]
   17e1c:	str	r1, [sp, #12]
   17e20:	str	r2, [sp, #8]
   17e24:	str	r3, [sp]
   17e28:	mov	r1, #192	; 0xc0
   17e2c:	ldrb	r3, [fp, #23]
   17e30:	ldrb	r2, [fp, #22]
   17e34:	ldr	r0, [sp, #52]	; 0x34
   17e38:	bl	11534 <libusb_control_transfer@plt>
   17e3c:	cmp	r0, #0
   17e40:	ble	185c4 <__assert_fail@plt+0x7030>
   17e44:	ldrb	r6, [sp, #148]	; 0x94
   17e48:	cmp	r6, #3
   17e4c:	bls	185c4 <__assert_fail@plt+0x7030>
   17e50:	ldrb	r3, [sp, #149]	; 0x95
   17e54:	cmp	r3, #3
   17e58:	bne	185c4 <__assert_fail@plt+0x7030>
   17e5c:	cmp	r0, r6
   17e60:	bne	185c4 <__assert_fail@plt+0x7030>
   17e64:	ldrb	r3, [sp, #150]	; 0x96
   17e68:	cmp	r3, #1
   17e6c:	beq	185d4 <__assert_fail@plt+0x7040>
   17e70:	cmp	r3, #0
   17e74:	beq	18644 <__assert_fail@plt+0x70b0>
   17e78:	cmp	r3, #255	; 0xff
   17e7c:	beq	1863c <__assert_fail@plt+0x70a8>
   17e80:	ldr	r3, [pc, #-156]	; 17dec <__assert_fail@plt+0x6858>
   17e84:	mov	r2, #16
   17e88:	mov	r1, #1
   17e8c:	ldr	r3, [r3]
   17e90:	ldr	r0, [pc, #-404]	; 17d04 <__assert_fail@plt+0x6770>
   17e94:	bl	11330 <fwrite@plt>
   17e98:	ldr	r0, [pc, #-164]	; 17dfc <__assert_fail@plt+0x6868>
   17e9c:	bl	112b8 <strdup@plt>
   17ea0:	mov	r5, r0
   17ea4:	str	r5, [sp, #8]
   17ea8:	ldrb	r3, [fp, #23]
   17eac:	ldr	r1, [pc, #-428]	; 17d08 <__assert_fail@plt+0x6774>
   17eb0:	mov	r0, #1
   17eb4:	str	r3, [sp, #4]
   17eb8:	ldrb	r3, [fp, #22]
   17ebc:	str	r3, [sp]
   17ec0:	ldrb	r3, [fp, #20]
   17ec4:	ldrb	r2, [fp, #21]
   17ec8:	bl	1148c <__printf_chk@plt>
   17ecc:	mov	r0, r5
   17ed0:	bl	112a0 <free@plt>
   17ed4:	ldrb	r3, [fp]
   17ed8:	sub	sl, sl, r3
   17edc:	cmp	sl, #2
   17ee0:	add	fp, fp, r3
   17ee4:	ble	1843c <__assert_fail@plt+0x6ea8>
   17ee8:	ldrb	r4, [fp]
   17eec:	cmp	r4, #2
   17ef0:	bhi	17b48 <__assert_fail@plt+0x65b4>
   17ef4:	ldr	r9, [sp, #48]	; 0x30
   17ef8:	mov	r2, r4
   17efc:	ldr	r1, [pc, #-504]	; 17d0c <__assert_fail@plt+0x6778>
   17f00:	mov	r0, #1
   17f04:	bl	1148c <__printf_chk@plt>
   17f08:	ldr	r0, [sp, #40]	; 0x28
   17f0c:	bl	112a0 <free@plt>
   17f10:	ldrh	r4, [sp, #74]	; 0x4a
   17f14:	ldr	sl, [sp, #64]	; 0x40
   17f18:	b	16ce4 <__assert_fail@plt+0x5750>
   17f1c:	ldr	r0, [pc, #-532]	; 17d10 <__assert_fail@plt+0x677c>
   17f20:	bl	11378 <puts@plt>
   17f24:	mov	r3, #2
   17f28:	str	r3, [sp]
   17f2c:	mov	r2, fp
   17f30:	mvn	r3, #0
   17f34:	ldr	r1, [pc, #-552]	; 17d14 <__assert_fail@plt+0x6780>
   17f38:	ldr	r0, [sp, #52]	; 0x34
   17f3c:	bl	1a1a8 <__assert_fail@plt+0x8c14>
   17f40:	b	17ed4 <__assert_fail@plt+0x6940>
   17f44:	cmp	r4, #47	; 0x2f
   17f48:	bls	1851c <__assert_fail@plt+0x6f88>
   17f4c:	ldrb	r3, [fp, #4]
   17f50:	cmp	r3, #52	; 0x34
   17f54:	bhi	18590 <__assert_fail@plt+0x6ffc>
   17f58:	add	r3, r3, #11
   17f5c:	cmp	r4, r3, lsl #2
   17f60:	blt	184ec <__assert_fail@plt+0x6f58>
   17f64:	ldrb	r1, [fp, #3]
   17f68:	ldr	r0, [sp, #52]	; 0x34
   17f6c:	bl	1b724 <__assert_fail@plt+0xa190>
   17f70:	ldrh	r3, [fp, #6]
   17f74:	tst	r3, #32768	; 0x8000
   17f78:	str	r0, [sp, #56]	; 0x38
   17f7c:	bne	18514 <__assert_fail@plt+0x6f80>
   17f80:	cmp	r3, #6
   17f84:	ldrgt	r2, [pc, #-628]	; 17d18 <__assert_fail@plt+0x6784>
   17f88:	ldrle	r7, [pc, #-612]	; 17d2c <__assert_fail@plt+0x6798>
   17f8c:	addle	r7, r7, r3, lsl #2
   17f90:	ldrle	r2, [r7, #1856]	; 0x740
   17f94:	str	r2, [sp, #24]
   17f98:	str	r3, [sp, #20]
   17f9c:	ldrb	r3, [fp, #5]
   17fa0:	ldr	r2, [sp, #56]	; 0x38
   17fa4:	ldr	r1, [pc, #-656]	; 17d1c <__assert_fail@plt+0x6788>
   17fa8:	str	r3, [sp, #16]
   17fac:	ldrb	r3, [fp, #4]
   17fb0:	str	r2, [sp, #8]
   17fb4:	mov	r0, #1
   17fb8:	str	r3, [sp, #12]
   17fbc:	ldrb	r3, [fp, #3]
   17fc0:	add	r9, fp, #8
   17fc4:	str	r3, [sp, #4]
   17fc8:	ldrb	r3, [fp, #2]
   17fcc:	str	r3, [sp]
   17fd0:	ldrb	r3, [fp, #1]
   17fd4:	ldrb	r2, [fp]
   17fd8:	bl	1148c <__printf_chk@plt>
   17fdc:	ldr	r1, [pc, #-708]	; 17d20 <__assert_fail@plt+0x678c>
   17fe0:	mov	r0, #1
   17fe4:	bl	1148c <__printf_chk@plt>
   17fe8:	mov	r0, r9
   17fec:	mov	r1, #32
   17ff0:	bl	11a8c <__assert_fail@plt+0x4f8>
   17ff4:	ldrb	r3, [fp, #43]	; 0x2b
   17ff8:	ldrb	r2, [fp, #41]	; 0x29
   17ffc:	ldr	r1, [pc, #-736]	; 17d24 <__assert_fail@plt+0x6790>
   18000:	str	r3, [sp, #4]
   18004:	ldrb	r3, [fp, #42]	; 0x2a
   18008:	cmp	r2, #0
   1800c:	moveq	r2, #1
   18010:	str	r3, [sp]
   18014:	mov	r0, #1
   18018:	ldrb	r3, [fp, #40]	; 0x28
   1801c:	bl	1148c <__printf_chk@plt>
   18020:	ldr	r0, [pc, #-768]	; 17d28 <__assert_fail@plt+0x6794>
   18024:	bl	11378 <puts@plt>
   18028:	ldrb	r3, [fp, #4]
   1802c:	cmp	r3, #0
   18030:	beq	180cc <__assert_fail@plt+0x6b38>
   18034:	ldr	r7, [pc, #-784]	; 17d2c <__assert_fail@plt+0x6798>
   18038:	ldr	r8, [sp, #52]	; 0x34
   1803c:	add	r5, fp, #44	; 0x2c
   18040:	mov	r4, #0
   18044:	str	sl, [sp, #60]	; 0x3c
   18048:	ldrb	r1, [r5, #3]
   1804c:	mov	r0, r8
   18050:	ldrh	sl, [r5]
   18054:	bl	1b724 <__assert_fail@plt+0xa190>
   18058:	ldrb	r3, [r9, r4, asr #2]
   1805c:	lsl	r1, r4, #1
   18060:	and	r1, r1, #6
   18064:	mov	r2, r4
   18068:	asr	r3, r3, r1
   1806c:	and	r3, r3, #3
   18070:	add	r5, r5, #4
   18074:	add	r3, r7, r3, lsl #2
   18078:	ldr	r3, [r3, #1888]	; 0x760
   1807c:	str	r0, [sp, #24]
   18080:	ldrb	r1, [r5, #-1]
   18084:	str	r4, [sp, #16]
   18088:	mov	r6, r0
   1808c:	str	r1, [sp, #20]
   18090:	ldrb	r1, [r5, #-2]
   18094:	mov	r0, #1
   18098:	str	r4, [sp, #8]
   1809c:	str	r1, [sp, #12]
   180a0:	str	r4, [sp]
   180a4:	ldr	r1, [pc, #-892]	; 17d30 <__assert_fail@plt+0x679c>
   180a8:	str	sl, [sp, #4]
   180ac:	bl	1148c <__printf_chk@plt>
   180b0:	mov	r0, r6
   180b4:	bl	112a0 <free@plt>
   180b8:	ldrb	r3, [fp, #4]
   180bc:	add	r4, r4, #1
   180c0:	cmp	r4, r3
   180c4:	blt	18048 <__assert_fail@plt+0x6ab4>
   180c8:	ldr	sl, [sp, #60]	; 0x3c
   180cc:	ldr	r0, [sp, #56]	; 0x38
   180d0:	bl	112a0 <free@plt>
   180d4:	b	17ed4 <__assert_fail@plt+0x6940>
   180d8:	ldr	r3, [pc, #-940]	; 17d34 <__assert_fail@plt+0x67a0>
   180dc:	cmp	r4, #11
   180e0:	ldm	r3, {r0, r1}
   180e4:	ldr	r3, [sp, #48]	; 0x30
   180e8:	strb	r1, [sp, #152]	; 0x98
   180ec:	str	r0, [r3]
   180f0:	bls	184b4 <__assert_fail@plt+0x6f20>
   180f4:	ldr	r5, [fp, #4]
   180f8:	mov	r3, #10
   180fc:	mov	r2, r4
   18100:	stm	sp, {r3, r5}
   18104:	ldr	r1, [pc, #-980]	; 17d38 <__assert_fail@plt+0x67a4>
   18108:	ldrb	r3, [fp, #1]
   1810c:	mov	r0, #1
   18110:	bl	1148c <__printf_chk@plt>
   18114:	ldrb	r2, [fp, #4]
   18118:	ldr	r1, [pc, #-996]	; 17d3c <__assert_fail@plt+0x67a8>
   1811c:	mov	r0, #1
   18120:	and	r2, r2, #31
   18124:	bl	1148c <__printf_chk@plt>
   18128:	lsr	r2, r5, #5
   1812c:	and	r2, r2, #15
   18130:	ldr	r1, [pc, #-1016]	; 17d40 <__assert_fail@plt+0x67ac>
   18134:	mov	r0, #1
   18138:	bl	1148c <__printf_chk@plt>
   1813c:	ldrb	r3, [fp, #8]
   18140:	ldrb	r2, [fp, #9]
   18144:	ldr	r1, [pc, #-1032]	; 17d44 <__assert_fail@plt+0x67b0>
   18148:	mov	r0, #1
   1814c:	bl	1148c <__printf_chk@plt>
   18150:	ldr	r9, [pc, #-1040]	; 17d48 <__assert_fail@plt+0x67b4>
   18154:	ldr	r8, [pc, #-1040]	; 17d4c <__assert_fail@plt+0x67b8>
   18158:	ldr	r7, [pc, #-1040]	; 17d50 <__assert_fail@plt+0x67bc>
   1815c:	add	r6, fp, #12
   18160:	mov	r5, #0
   18164:	ldr	r4, [r6], #4
   18168:	mov	r2, r5
   1816c:	mov	r3, r4
   18170:	ldr	r1, [pc, #-1060]	; 17d54 <__assert_fail@plt+0x67c0>
   18174:	mov	r0, #1
   18178:	bl	1148c <__printf_chk@plt>
   1817c:	lsl	r3, r4, #26
   18180:	add	r2, sp, #408	; 0x198
   18184:	add	r3, r2, r3, lsr #30
   18188:	tst	r4, #64	; 0x40
   1818c:	ldrb	r2, [r3, #-260]	; 0xfffffefc
   18190:	movne	r0, r9
   18194:	moveq	r0, r8
   18198:	ldr	r1, [pc, #-1096]	; 17d58 <__assert_fail@plt+0x67c4>
   1819c:	tst	r4, #128	; 0x80
   181a0:	ldr	ip, [pc, #-1100]	; 17d5c <__assert_fail@plt+0x67c8>
   181a4:	ldr	r3, [pc, #-944]	; 17dfc <__assert_fail@plt+0x6868>
   181a8:	movne	r1, r7
   181ac:	tst	r4, #16384	; 0x4000
   181b0:	movne	r3, ip
   181b4:	str	r2, [sp]
   181b8:	str	r3, [sp, #12]
   181bc:	and	r2, r4, #15
   181c0:	lsr	r3, r4, #16
   181c4:	add	r5, r5, #1
   181c8:	strd	r0, [sp, #4]
   181cc:	ldr	r1, [pc, #-1140]	; 17d60 <__assert_fail@plt+0x67cc>
   181d0:	mov	r0, #1
   181d4:	bl	1148c <__printf_chk@plt>
   181d8:	ldrb	r3, [fp, #4]
   181dc:	and	r3, r3, #31
   181e0:	cmp	r5, r3
   181e4:	ble	18164 <__assert_fail@plt+0x6bd0>
   181e8:	b	17ed4 <__assert_fail@plt+0x6940>
   181ec:	cmp	r4, #19
   181f0:	bls	18460 <__assert_fail@plt+0x6ecc>
   181f4:	ldrb	r3, [fp, #3]
   181f8:	mov	r2, #5
   181fc:	ldr	r1, [pc, #-1184]	; 17d64 <__assert_fail@plt+0x67d0>
   18200:	mov	r0, #1
   18204:	strd	r2, [sp]
   18208:	mov	r2, r4
   1820c:	ldrb	r3, [fp, #1]
   18210:	bl	1148c <__printf_chk@plt>
   18214:	add	r0, fp, #4
   18218:	bl	11c1c <__assert_fail@plt+0x688>
   1821c:	ldr	r1, [pc, #-1212]	; 17d68 <__assert_fail@plt+0x67d4>
   18220:	mov	r2, r0
   18224:	mov	r5, r0
   18228:	mov	r0, #1
   1822c:	bl	1148c <__printf_chk@plt>
   18230:	mov	r1, r5
   18234:	ldr	r0, [pc, #-1232]	; 17d6c <__assert_fail@plt+0x67d8>
   18238:	bl	1127c <strcmp@plt>
   1823c:	cmp	r0, #0
   18240:	cmpeq	r4, #24
   18244:	beq	17e08 <__assert_fail@plt+0x6874>
   18248:	cmp	r4, #20
   1824c:	beq	17ed4 <__assert_fail@plt+0x6940>
   18250:	sub	r4, r4, #21
   18254:	add	r3, fp, #20
   18258:	mvn	r6, #18
   1825c:	uxtab	r4, r3, r4
   18260:	ldr	r7, [pc, #-1272]	; 17d70 <__assert_fail@plt+0x67dc>
   18264:	sub	r6, r6, fp
   18268:	add	r5, fp, #19
   1826c:	add	r2, r6, r5
   18270:	ldrb	r3, [r5, #1]!
   18274:	mov	r1, r7
   18278:	mov	r0, #1
   1827c:	bl	1148c <__printf_chk@plt>
   18280:	cmp	r4, r5
   18284:	bne	1826c <__assert_fail@plt+0x6cd8>
   18288:	b	17ed4 <__assert_fail@plt+0x6940>
   1828c:	cmp	r4, #9
   18290:	bls	184d0 <__assert_fail@plt+0x6f3c>
   18294:	ldrb	r1, [fp, #3]
   18298:	mov	r3, #3
   1829c:	str	r3, [sp]
   182a0:	str	r1, [sp, #4]
   182a4:	mov	r2, r4
   182a8:	ldrb	r3, [fp, #1]
   182ac:	ldr	r1, [pc, #-1344]	; 17d74 <__assert_fail@plt+0x67e0>
   182b0:	mov	r0, #1
   182b4:	bl	1148c <__printf_chk@plt>
   182b8:	ldrb	r3, [fp, #3]
   182bc:	tst	r3, #2
   182c0:	bne	18508 <__assert_fail@plt+0x6f74>
   182c4:	ldrb	r3, [fp, #4]
   182c8:	ldrb	r2, [fp, #5]
   182cc:	ldr	r1, [pc, #-1372]	; 17d78 <__assert_fail@plt+0x67e4>
   182d0:	mov	r0, #1
   182d4:	bl	1148c <__printf_chk@plt>
   182d8:	ldrb	r3, [fp, #4]
   182dc:	tst	r3, #1
   182e0:	bne	18564 <__assert_fail@plt+0x6fd0>
   182e4:	tst	r3, #2
   182e8:	bne	18554 <__assert_fail@plt+0x6fc0>
   182ec:	tst	r3, #4
   182f0:	bne	18544 <__assert_fail@plt+0x6fb0>
   182f4:	tst	r3, #8
   182f8:	bne	18538 <__assert_fail@plt+0x6fa4>
   182fc:	ldrb	r2, [fp, #6]
   18300:	ldr	r1, [pc, #-1420]	; 17d7c <__assert_fail@plt+0x67e8>
   18304:	mov	r0, #1
   18308:	bl	1148c <__printf_chk@plt>
   1830c:	ldrb	r3, [fp, #6]
   18310:	cmp	r3, #3
   18314:	ldrls	pc, [pc, r3, lsl #2]
   18318:	b	1864c <__assert_fail@plt+0x70b8>
   1831c:	andeq	r8, r1, r4, lsr #8
   18320:	andeq	r8, r1, r8, lsl r4
   18324:	andeq	r8, r1, r4, ror #7
   18328:	andeq	r8, r1, r0, lsr r4
   1832c:	ldrb	r3, [fp, #4]
   18330:	ldrb	r1, [fp, #5]
   18334:	ldrb	r5, [fp, #3]
   18338:	ldrb	r2, [fp, #6]
   1833c:	mov	r0, #1
   18340:	add	r5, r5, r3, lsl #8
   18344:	add	r5, r5, r1, lsl #16
   18348:	add	r5, r5, r2, lsl #24
   1834c:	mov	r3, #2
   18350:	mov	r2, r4
   18354:	stm	sp, {r3, r5}
   18358:	ldr	r1, [pc, #-1504]	; 17d80 <__assert_fail@plt+0x67ec>
   1835c:	ldrb	r3, [fp, #1]
   18360:	bl	1148c <__printf_chk@plt>
   18364:	tst	r5, #2
   18368:	beq	184a8 <__assert_fail@plt+0x6f14>
   1836c:	tst	r5, #4
   18370:	bne	1847c <__assert_fail@plt+0x6ee8>
   18374:	ldr	r0, [pc, #-1528]	; 17d84 <__assert_fail@plt+0x67f0>
   18378:	bl	11378 <puts@plt>
   1837c:	b	17ed4 <__assert_fail@plt+0x6940>
   18380:	cmp	r4, #19
   18384:	bls	18444 <__assert_fail@plt+0x6eb0>
   18388:	ldrb	r1, [fp, #3]
   1838c:	mov	r3, #4
   18390:	mov	r2, r4
   18394:	str	r1, [sp, #4]
   18398:	str	r3, [sp]
   1839c:	ldr	r1, [pc, #-1564]	; 17d88 <__assert_fail@plt+0x67f4>
   183a0:	ldrb	r3, [fp, #1]
   183a4:	mov	r0, #1
   183a8:	bl	1148c <__printf_chk@plt>
   183ac:	add	r0, fp, #4
   183b0:	bl	11c1c <__assert_fail@plt+0x688>
   183b4:	ldr	r1, [pc, #-1584]	; 17d8c <__assert_fail@plt+0x67f8>
   183b8:	mov	r2, r0
   183bc:	mov	r0, #1
   183c0:	bl	1148c <__printf_chk@plt>
   183c4:	b	17ed4 <__assert_fail@plt+0x6940>
   183c8:	ldr	r1, [pc, #-1600]	; 17d90 <__assert_fail@plt+0x67fc>
   183cc:	mov	r0, #1
   183d0:	bl	1148c <__printf_chk@plt>
   183d4:	ldrb	r1, [fp]
   183d8:	mov	r0, fp
   183dc:	bl	11a8c <__assert_fail@plt+0x4f8>
   183e0:	b	17ed4 <__assert_fail@plt+0x6940>
   183e4:	ldr	r0, [pc, #-1624]	; 17d94 <__assert_fail@plt+0x6800>
   183e8:	bl	11378 <puts@plt>
   183ec:	ldrb	r2, [fp, #7]
   183f0:	ldr	r1, [pc, #-1632]	; 17d98 <__assert_fail@plt+0x6804>
   183f4:	mov	r0, #1
   183f8:	bl	1148c <__printf_chk@plt>
   183fc:	ldrb	r2, [fp, #9]
   18400:	ldrb	r3, [fp, #8]
   18404:	ldr	r1, [pc, #-1648]	; 17d9c <__assert_fail@plt+0x6808>
   18408:	mov	r0, #1
   1840c:	add	r2, r3, r2, lsl #8
   18410:	bl	1148c <__printf_chk@plt>
   18414:	b	17ed4 <__assert_fail@plt+0x6940>
   18418:	ldr	r0, [pc, #-1664]	; 17da0 <__assert_fail@plt+0x680c>
   1841c:	bl	11378 <puts@plt>
   18420:	b	183ec <__assert_fail@plt+0x6e58>
   18424:	ldr	r0, [pc, #-1672]	; 17da4 <__assert_fail@plt+0x6810>
   18428:	bl	11378 <puts@plt>
   1842c:	b	183ec <__assert_fail@plt+0x6e58>
   18430:	ldr	r0, [pc, #-1680]	; 17da8 <__assert_fail@plt+0x6814>
   18434:	bl	11378 <puts@plt>
   18438:	b	183ec <__assert_fail@plt+0x6e58>
   1843c:	ldr	r9, [sp, #48]	; 0x30
   18440:	b	17f08 <__assert_fail@plt+0x6974>
   18444:	ldr	r3, [pc, #-1632]	; 17dec <__assert_fail@plt+0x6858>
   18448:	mov	r2, #49	; 0x31
   1844c:	mov	r1, #1
   18450:	ldr	r3, [r3]
   18454:	ldr	r0, [pc, #-1712]	; 17dac <__assert_fail@plt+0x6818>
   18458:	bl	11330 <fwrite@plt>
   1845c:	b	17ed4 <__assert_fail@plt+0x6940>
   18460:	ldr	r3, [pc, #-1660]	; 17dec <__assert_fail@plt+0x6858>
   18464:	mov	r2, #45	; 0x2d
   18468:	mov	r1, #1
   1846c:	ldr	r3, [r3]
   18470:	ldr	r0, [pc, #-1736]	; 17db0 <__assert_fail@plt+0x681c>
   18474:	bl	11330 <fwrite@plt>
   18478:	b	17ed4 <__assert_fail@plt+0x6940>
   1847c:	ldr	r0, [pc, #-1744]	; 17db4 <__assert_fail@plt+0x6820>
   18480:	bl	11378 <puts@plt>
   18484:	tst	r5, #8
   18488:	bne	185ac <__assert_fail@plt+0x7018>
   1848c:	tst	r5, #16
   18490:	beq	17ed4 <__assert_fail@plt+0x6940>
   18494:	and	r2, r5, #61440	; 0xf000
   18498:	ldr	r1, [pc, #-1768]	; 17db8 <__assert_fail@plt+0x6824>
   1849c:	mov	r0, #1
   184a0:	bl	1148c <__printf_chk@plt>
   184a4:	b	17ed4 <__assert_fail@plt+0x6940>
   184a8:	ldr	r0, [pc, #-1780]	; 17dbc <__assert_fail@plt+0x6828>
   184ac:	bl	11378 <puts@plt>
   184b0:	b	17ed4 <__assert_fail@plt+0x6940>
   184b4:	ldr	r3, [pc, #-1744]	; 17dec <__assert_fail@plt+0x6858>
   184b8:	mov	r2, #55	; 0x37
   184bc:	mov	r1, #1
   184c0:	ldr	r3, [r3]
   184c4:	ldr	r0, [pc, #-1804]	; 17dc0 <__assert_fail@plt+0x682c>
   184c8:	bl	11330 <fwrite@plt>
   184cc:	b	17ed4 <__assert_fail@plt+0x6940>
   184d0:	ldr	r3, [pc, #-1772]	; 17dec <__assert_fail@plt+0x6858>
   184d4:	mov	r2, #51	; 0x33
   184d8:	mov	r1, #1
   184dc:	ldr	r3, [r3]
   184e0:	ldr	r0, [pc, #-1828]	; 17dc4 <__assert_fail@plt+0x6830>
   184e4:	bl	11330 <fwrite@plt>
   184e8:	b	17ed4 <__assert_fail@plt+0x6940>
   184ec:	ldr	r3, [pc, #-1800]	; 17dec <__assert_fail@plt+0x6858>
   184f0:	mov	r2, #55	; 0x37
   184f4:	mov	r1, #1
   184f8:	ldr	r3, [r3]
   184fc:	ldr	r0, [pc, #-1852]	; 17dc8 <__assert_fail@plt+0x6834>
   18500:	bl	11330 <fwrite@plt>
   18504:	b	17ed4 <__assert_fail@plt+0x6940>
   18508:	ldr	r0, [pc, #-1860]	; 17dcc <__assert_fail@plt+0x6838>
   1850c:	bl	11378 <puts@plt>
   18510:	b	182c4 <__assert_fail@plt+0x6d30>
   18514:	ldr	r2, [pc, #-1868]	; 17dd0 <__assert_fail@plt+0x683c>
   18518:	b	17f94 <__assert_fail@plt+0x6a00>
   1851c:	ldr	r3, [pc, #-1848]	; 17dec <__assert_fail@plt+0x6858>
   18520:	mov	r2, #39	; 0x27
   18524:	mov	r1, #1
   18528:	ldr	r3, [r3]
   1852c:	ldr	r0, [pc, #-1888]	; 17dd4 <__assert_fail@plt+0x6840>
   18530:	bl	11330 <fwrite@plt>
   18534:	b	17ed4 <__assert_fail@plt+0x6940>
   18538:	ldr	r0, [pc, #-1896]	; 17dd8 <__assert_fail@plt+0x6844>
   1853c:	bl	11378 <puts@plt>
   18540:	b	182fc <__assert_fail@plt+0x6d68>
   18544:	ldr	r0, [pc, #-1904]	; 17ddc <__assert_fail@plt+0x6848>
   18548:	bl	11378 <puts@plt>
   1854c:	ldrb	r3, [fp, #4]
   18550:	b	182f4 <__assert_fail@plt+0x6d60>
   18554:	ldr	r0, [pc, #-1916]	; 17de0 <__assert_fail@plt+0x684c>
   18558:	bl	11378 <puts@plt>
   1855c:	ldrb	r3, [fp, #4]
   18560:	b	182ec <__assert_fail@plt+0x6d58>
   18564:	ldr	r0, [pc, #-1928]	; 17de4 <__assert_fail@plt+0x6850>
   18568:	bl	11378 <puts@plt>
   1856c:	ldrb	r3, [fp, #4]
   18570:	b	182e4 <__assert_fail@plt+0x6d50>
   18574:	ldr	r3, [pc, #-1936]	; 17dec <__assert_fail@plt+0x6858>
   18578:	mov	r2, #43	; 0x2b
   1857c:	mov	r1, #1
   18580:	ldr	r3, [r3]
   18584:	ldr	r0, [pc, #-1956]	; 17de8 <__assert_fail@plt+0x6854>
   18588:	bl	11330 <fwrite@plt>
   1858c:	b	17f08 <__assert_fail@plt+0x6974>
   18590:	ldr	r3, [pc, #-1964]	; 17dec <__assert_fail@plt+0x6858>
   18594:	mov	r2, #45	; 0x2d
   18598:	mov	r1, #1
   1859c:	ldr	r3, [r3]
   185a0:	ldr	r0, [pc, #-1976]	; 17df0 <__assert_fail@plt+0x685c>
   185a4:	bl	11330 <fwrite@plt>
   185a8:	b	17ed4 <__assert_fail@plt+0x6940>
   185ac:	and	r2, r5, #3840	; 0xf00
   185b0:	ldr	r1, [pc, #-1988]	; 17df4 <__assert_fail@plt+0x6860>
   185b4:	mov	r0, #1
   185b8:	bl	1148c <__printf_chk@plt>
   185bc:	b	1848c <__assert_fail@plt+0x6ef8>
   185c0:	bl	112d0 <__stack_chk_fail@plt>
   185c4:	ldr	r0, [pc, #-2000]	; 17dfc <__assert_fail@plt+0x6868>
   185c8:	bl	112b8 <strdup@plt>
   185cc:	mov	r5, r0
   185d0:	b	17ea4 <__assert_fail@plt+0x6910>
   185d4:	ldr	r7, [pc, #-2020]	; 17df8 <__assert_fail@plt+0x6864>
   185d8:	mov	r0, r7
   185dc:	bl	11420 <strlen@plt>
   185e0:	mov	r4, r0
   185e4:	sub	r0, r6, #2
   185e8:	add	r0, r0, r4
   185ec:	bl	11384 <malloc@plt>
   185f0:	subs	r5, r0, #0
   185f4:	beq	185c4 <__assert_fail@plt+0x7030>
   185f8:	add	r2, r4, #1
   185fc:	mov	r1, r7
   18600:	add	r4, r5, r4
   18604:	bl	112ac <memcpy@plt>
   18608:	mov	r3, #3
   1860c:	mov	r2, r4
   18610:	ldr	r1, [sp, #48]	; 0x30
   18614:	ldrb	r1, [r1, r3]
   18618:	add	r3, r3, #1
   1861c:	tst	r1, #128	; 0x80
   18620:	strbeq	r1, [r2], #1
   18624:	uxtb	r1, r3
   18628:	cmp	r1, r6
   1862c:	bcc	18610 <__assert_fail@plt+0x707c>
   18630:	mov	r3, #0
   18634:	strb	r3, [r2]
   18638:	b	17ea4 <__assert_fail@plt+0x6910>
   1863c:	ldr	r7, [pc, #-2120]	; 17dfc <__assert_fail@plt+0x6868>
   18640:	b	185d8 <__assert_fail@plt+0x7044>
   18644:	ldr	r7, [pc, #-2124]	; 17e00 <__assert_fail@plt+0x686c>
   18648:	b	185d8 <__assert_fail@plt+0x7044>
   1864c:	ldr	r0, [pc, #-2128]	; 17e04 <__assert_fail@plt+0x6870>
   18650:	bl	11378 <puts@plt>
   18654:	b	183ec <__assert_fail@plt+0x6e58>
   18658:	push	{r4, r5, r6, r7, lr}
   1865c:	sub	sp, sp, #292	; 0x124
   18660:	ldr	r4, [pc, #172]	; 18714 <__assert_fail@plt+0x7180>
   18664:	mov	r5, r1
   18668:	ldr	r3, [r4]
   1866c:	str	r3, [sp, #284]	; 0x11c
   18670:	bl	1b4b4 <__assert_fail@plt+0x9f20>
   18674:	subs	r7, r0, #0
   18678:	beq	186f0 <__assert_fail@plt+0x715c>
   1867c:	add	r1, sp, #8
   18680:	add	r6, sp, #28
   18684:	bl	114e0 <libusb_get_device_descriptor@plt>
   18688:	add	r5, sp, #156	; 0x9c
   1868c:	ldrh	r2, [sp, #16]
   18690:	mov	r1, #128	; 0x80
   18694:	mov	r0, r6
   18698:	bl	1ae70 <__assert_fail@plt+0x98dc>
   1869c:	ldrh	r3, [sp, #18]
   186a0:	ldrh	r2, [sp, #16]
   186a4:	mov	r1, #128	; 0x80
   186a8:	mov	r0, r5
   186ac:	bl	1aeb8 <__assert_fail@plt+0x9924>
   186b0:	ldrh	r3, [sp, #18]
   186b4:	ldrh	r2, [sp, #16]
   186b8:	ldr	r1, [pc, #88]	; 18718 <__assert_fail@plt+0x7184>
   186bc:	str	r6, [sp]
   186c0:	str	r5, [sp, #4]
   186c4:	mov	r0, #1
   186c8:	bl	1148c <__printf_chk@plt>
   186cc:	mov	r0, r7
   186d0:	bl	16c6c <__assert_fail@plt+0x56d8>
   186d4:	mov	r0, #0
   186d8:	ldr	r2, [sp, #284]	; 0x11c
   186dc:	ldr	r3, [r4]
   186e0:	cmp	r2, r3
   186e4:	bne	18710 <__assert_fail@plt+0x717c>
   186e8:	add	sp, sp, #292	; 0x124
   186ec:	pop	{r4, r5, r6, r7, pc}
   186f0:	ldr	r1, [pc, #36]	; 1871c <__assert_fail@plt+0x7188>
   186f4:	mov	r3, r5
   186f8:	ldr	r2, [pc, #32]	; 18720 <__assert_fail@plt+0x718c>
   186fc:	ldr	r0, [r1]
   18700:	mov	r1, #1
   18704:	bl	11498 <__fprintf_chk@plt>
   18708:	mov	r0, #1
   1870c:	b	186d8 <__assert_fail@plt+0x7144>
   18710:	bl	112d0 <__stack_chk_fail@plt>
   18714:	strdeq	ip, [r3], -r8
   18718:	strheq	r2, [r2], -r0
   1871c:	muleq	r4, r0, r8
   18720:	andeq	r2, r2, r0, lsr #1
   18724:	ldr	ip, [pc, #400]	; 188bc <__assert_fail@plt+0x7328>
   18728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1872c:	sub	sp, sp, #316	; 0x13c
   18730:	ldr	ip, [ip]
   18734:	mov	r7, r1
   18738:	add	r1, sp, #28
   1873c:	mov	r9, r2
   18740:	str	r3, [sp, #20]
   18744:	str	ip, [sp, #308]	; 0x134
   18748:	bl	1142c <libusb_get_device_list@plt>
   1874c:	subs	fp, r0, #0
   18750:	movlt	sl, #1
   18754:	blt	18874 <__assert_fail@plt+0x72e0>
   18758:	beq	188b0 <__assert_fail@plt+0x731c>
   1875c:	mov	r4, #0
   18760:	mov	sl, #1
   18764:	ldr	r3, [sp, #28]
   18768:	ldr	r5, [r3, r4, lsl #2]
   1876c:	mov	r0, r5
   18770:	bl	113e4 <libusb_get_bus_number@plt>
   18774:	mov	r6, r0
   18778:	mov	r0, r5
   1877c:	bl	11570 <libusb_get_device_address@plt>
   18780:	cmn	r7, #1
   18784:	mov	r8, r0
   18788:	beq	18794 <__assert_fail@plt+0x7200>
   1878c:	cmp	r6, r7
   18790:	bne	1885c <__assert_fail@plt+0x72c8>
   18794:	cmn	r9, #1
   18798:	beq	187a4 <__assert_fail@plt+0x7210>
   1879c:	cmp	r8, r9
   187a0:	bne	1885c <__assert_fail@plt+0x72c8>
   187a4:	add	r1, sp, #32
   187a8:	mov	r0, r5
   187ac:	bl	114e0 <libusb_get_device_descriptor@plt>
   187b0:	ldr	r2, [sp, #20]
   187b4:	cmn	r2, #1
   187b8:	beq	187c8 <__assert_fail@plt+0x7234>
   187bc:	ldrh	r3, [sp, #40]	; 0x28
   187c0:	cmp	r3, r2
   187c4:	bne	1885c <__assert_fail@plt+0x72c8>
   187c8:	ldr	r3, [sp, #352]	; 0x160
   187cc:	cmn	r3, #1
   187d0:	beq	187e4 <__assert_fail@plt+0x7250>
   187d4:	ldrh	r3, [sp, #42]	; 0x2a
   187d8:	ldr	r2, [sp, #352]	; 0x160
   187dc:	cmp	r3, r2
   187e0:	bne	1885c <__assert_fail@plt+0x72c8>
   187e4:	ldrh	r2, [sp, #40]	; 0x28
   187e8:	mov	r1, #128	; 0x80
   187ec:	add	r0, sp, #52	; 0x34
   187f0:	add	sl, sp, #180	; 0xb4
   187f4:	bl	1ae70 <__assert_fail@plt+0x98dc>
   187f8:	ldrh	r3, [sp, #42]	; 0x2a
   187fc:	mov	r0, sl
   18800:	ldrh	r2, [sp, #40]	; 0x28
   18804:	mov	r1, #128	; 0x80
   18808:	bl	1aeb8 <__assert_fail@plt+0x9924>
   1880c:	ldr	r3, [pc, #172]	; 188c0 <__assert_fail@plt+0x732c>
   18810:	ldr	r3, [r3, #40]	; 0x28
   18814:	cmp	r3, #0
   18818:	bne	18894 <__assert_fail@plt+0x7300>
   1881c:	ldrh	r0, [sp, #42]	; 0x2a
   18820:	ldrh	r1, [sp, #40]	; 0x28
   18824:	add	r3, sp, #52	; 0x34
   18828:	str	sl, [sp, #12]
   1882c:	str	r3, [sp, #8]
   18830:	str	r0, [sp, #4]
   18834:	mov	r3, r8
   18838:	str	r1, [sp]
   1883c:	mov	r2, r6
   18840:	ldr	r1, [pc, #124]	; 188c4 <__assert_fail@plt+0x7330>
   18844:	mov	r0, #1
   18848:	bl	1148c <__printf_chk@plt>
   1884c:	ldr	r3, [pc, #108]	; 188c0 <__assert_fail@plt+0x732c>
   18850:	ldr	sl, [r3, #40]	; 0x28
   18854:	cmp	sl, #0
   18858:	bne	188a0 <__assert_fail@plt+0x730c>
   1885c:	add	r4, r4, #1
   18860:	cmp	fp, r4
   18864:	bne	18764 <__assert_fail@plt+0x71d0>
   18868:	mov	r1, #0
   1886c:	ldr	r0, [sp, #28]
   18870:	bl	114f8 <libusb_free_device_list@plt>
   18874:	ldr	r3, [pc, #64]	; 188bc <__assert_fail@plt+0x7328>
   18878:	ldr	r2, [sp, #308]	; 0x134
   1887c:	mov	r0, sl
   18880:	ldr	r3, [r3]
   18884:	cmp	r2, r3
   18888:	bne	188b8 <__assert_fail@plt+0x7324>
   1888c:	add	sp, sp, #316	; 0x13c
   18890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18894:	mov	r0, #10
   18898:	bl	11474 <putchar@plt>
   1889c:	b	1881c <__assert_fail@plt+0x7288>
   188a0:	mov	r0, r5
   188a4:	bl	16c6c <__assert_fail@plt+0x56d8>
   188a8:	mov	sl, #0
   188ac:	b	1885c <__assert_fail@plt+0x72c8>
   188b0:	mov	sl, #1
   188b4:	b	18868 <__assert_fail@plt+0x72d4>
   188b8:	bl	112d0 <__stack_chk_fail@plt>
   188bc:	strdeq	ip, [r3], -r8
   188c0:	andeq	r1, r4, r0, lsr #17
   188c4:	andeq	r2, r2, ip, asr #1
   188c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   188cc:	mov	r4, r0
   188d0:	ldr	r6, [r0]
   188d4:	ldr	r3, [r6, #16]
   188d8:	cmp	r3, #0
   188dc:	moveq	r3, r6
   188e0:	beq	188f0 <__assert_fail@plt+0x735c>
   188e4:	add	r0, r6, #16
   188e8:	bl	188c8 <__assert_fail@plt+0x7334>
   188ec:	ldr	r3, [r4]
   188f0:	ldr	r2, [r6, #12]
   188f4:	cmp	r2, #0
   188f8:	beq	18998 <__assert_fail@plt+0x7404>
   188fc:	ldr	r0, [r2, #8]
   18900:	add	r9, r6, #12
   18904:	cmp	r0, #0
   18908:	beq	18998 <__assert_fail@plt+0x7404>
   1890c:	mov	ip, r9
   18910:	mov	r8, #0
   18914:	ldr	lr, [r2, #16]
   18918:	ldr	r1, [r0, #16]
   1891c:	cmp	lr, r1
   18920:	bls	1893c <__assert_fail@plt+0x73a8>
   18924:	ldr	r1, [r0, #8]
   18928:	mov	r8, #1
   1892c:	str	r1, [r2, #8]
   18930:	str	r2, [r0, #8]
   18934:	mov	r2, r0
   18938:	str	r0, [ip]
   1893c:	ldr	r1, [r2, #8]
   18940:	ldr	r5, [r2, #20]
   18944:	mov	r7, r1
   18948:	ldr	lr, [r1, #20]
   1894c:	ldr	r0, [r1, #8]
   18950:	cmp	r5, lr
   18954:	strhi	r0, [r2, #8]
   18958:	strhi	r2, [r1, #8]
   1895c:	strhi	r1, [ip]
   18960:	ldrhi	r2, [r1, #8]
   18964:	movls	r1, r2
   18968:	movhi	r8, #1
   1896c:	ldrhi	r0, [r2, #8]
   18970:	movls	r2, r7
   18974:	cmp	r0, #0
   18978:	add	ip, r1, #8
   1897c:	bne	18914 <__assert_fail@plt+0x7380>
   18980:	cmp	r8, #0
   18984:	beq	18998 <__assert_fail@plt+0x7404>
   18988:	ldr	r2, [r6, #12]
   1898c:	ldr	r0, [r2, #8]
   18990:	cmp	r0, #0
   18994:	bne	1890c <__assert_fail@plt+0x7378>
   18998:	ldr	r2, [r3, #8]
   1899c:	cmp	r2, #0
   189a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   189a4:	mov	ip, r4
   189a8:	mov	lr, #0
   189ac:	ldr	r0, [r3, #32]
   189b0:	ldr	r1, [r2, #32]
   189b4:	cmp	r0, r1
   189b8:	bls	189d4 <__assert_fail@plt+0x7440>
   189bc:	ldr	r1, [r2, #8]
   189c0:	mov	lr, #1
   189c4:	str	r1, [r3, #8]
   189c8:	str	r3, [r2, #8]
   189cc:	mov	r3, r2
   189d0:	str	r2, [ip]
   189d4:	add	ip, r3, #8
   189d8:	ldr	r3, [r3, #8]
   189dc:	ldr	r2, [r3, #8]
   189e0:	cmp	r2, #0
   189e4:	bne	189ac <__assert_fail@plt+0x7418>
   189e8:	cmp	lr, #0
   189ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   189f0:	ldr	r3, [r4]
   189f4:	b	18998 <__assert_fail@plt+0x7404>
   189f8:	push	{r4, r5, r6, r7, lr}
   189fc:	sub	sp, sp, #8192	; 0x2000
   18a00:	ldr	lr, [pc, #240]	; 18af8 <__assert_fail@plt+0x7564>
   18a04:	ldr	r2, [pc, #240]	; 18afc <__assert_fail@plt+0x7568>
   18a08:	sub	sp, sp, #28
   18a0c:	ldr	r4, [pc, #236]	; 18b00 <__assert_fail@plt+0x756c>
   18a10:	stm	sp, {r2, lr}
   18a14:	add	lr, sp, #8192	; 0x2000
   18a18:	ldr	ip, [r4]
   18a1c:	add	lr, lr, #20
   18a20:	mov	r3, #4096	; 0x1000
   18a24:	mov	r7, r0
   18a28:	add	r0, sp, #4096	; 0x1000
   18a2c:	str	r1, [sp, #8]
   18a30:	mov	r5, r1
   18a34:	add	r0, r0, #20
   18a38:	mov	r1, r3
   18a3c:	mov	r2, #1
   18a40:	str	ip, [lr]
   18a44:	bl	11588 <__snprintf_chk@plt>
   18a48:	ldr	r6, [pc, #180]	; 18b04 <__assert_fail@plt+0x7570>
   18a4c:	sub	r3, r0, #1
   18a50:	cmp	r3, r6
   18a54:	bhi	18adc <__assert_fail@plt+0x7548>
   18a58:	add	r0, sp, #4096	; 0x1000
   18a5c:	add	r0, r0, #20
   18a60:	add	r1, sp, #20
   18a64:	mov	r2, #4096	; 0x1000
   18a68:	bl	1130c <readlink@plt>
   18a6c:	cmp	r0, #0
   18a70:	blt	18ab8 <__assert_fail@plt+0x7524>
   18a74:	cmp	r0, r6
   18a78:	addle	r3, sp, #24
   18a7c:	addle	r0, r3, r0
   18a80:	movle	r3, #0
   18a84:	strble	r3, [r0, #-4]
   18a88:	movgt	r3, #0
   18a8c:	add	r0, sp, #20
   18a90:	mov	r1, #47	; 0x2f
   18a94:	strbgt	r3, [sp, #20]
   18a98:	bl	114ec <strrchr@plt>
   18a9c:	cmp	r0, #0
   18aa0:	beq	18ab8 <__assert_fail@plt+0x7524>
   18aa4:	add	r3, r0, #1
   18aa8:	ldr	r2, [pc, #88]	; 18b08 <__assert_fail@plt+0x7574>
   18aac:	add	r0, r7, #34	; 0x22
   18ab0:	mov	r1, #255	; 0xff
   18ab4:	bl	11468 <snprintf@plt>
   18ab8:	add	r3, sp, #8192	; 0x2000
   18abc:	add	r3, r3, #20
   18ac0:	ldr	r2, [r3]
   18ac4:	ldr	r3, [r4]
   18ac8:	cmp	r2, r3
   18acc:	bne	18af4 <__assert_fail@plt+0x7560>
   18ad0:	add	sp, sp, #8192	; 0x2000
   18ad4:	add	sp, sp, #28
   18ad8:	pop	{r4, r5, r6, r7, pc}
   18adc:	mov	r3, r0
   18ae0:	mov	r2, r5
   18ae4:	ldr	r1, [pc, #32]	; 18b0c <__assert_fail@plt+0x7578>
   18ae8:	mov	r0, #1
   18aec:	bl	1148c <__printf_chk@plt>
   18af0:	b	18ab8 <__assert_fail@plt+0x7524>
   18af4:	bl	112d0 <__stack_chk_fail@plt>
   18af8:	andeq	r2, r2, r0, ror #25
   18afc:	strdeq	r2, [r2], -r8
   18b00:	strdeq	ip, [r3], -r8
   18b04:	strdeq	r0, [r0], -lr
   18b08:	andeq	r0, r2, r8, ror #21
   18b0c:	andeq	r2, r2, r8, lsl #26
   18b10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b14:	add	r6, r1, #48	; 0x30
   18b18:	ldr	r5, [pc, #348]	; 18c7c <__assert_fail@plt+0x76e8>
   18b1c:	sub	sp, sp, #264	; 0x108
   18b20:	mov	r4, r1
   18b24:	ldr	r3, [r5]
   18b28:	mov	r7, r0
   18b2c:	mov	r1, #58	; 0x3a
   18b30:	mov	r0, r6
   18b34:	str	r3, [sp, #260]	; 0x104
   18b38:	bl	11438 <strchr@plt>
   18b3c:	subs	sl, r0, #0
   18b40:	beq	18ba4 <__assert_fail@plt+0x7610>
   18b44:	sub	r8, sl, r6
   18b48:	cmp	r8, #254	; 0xfe
   18b4c:	movgt	r3, #0
   18b50:	add	r9, sp, #4
   18b54:	strbgt	r3, [sp, #4]
   18b58:	ble	18bbc <__assert_fail@plt+0x7628>
   18b5c:	mov	r1, r9
   18b60:	add	r0, r7, #476	; 0x1dc
   18b64:	bl	1127c <strcmp@plt>
   18b68:	cmp	r0, #0
   18b6c:	bne	18be4 <__assert_fail@plt+0x7650>
   18b70:	ldr	r3, [r7, #12]
   18b74:	str	r7, [r4, #12]
   18b78:	cmp	r3, #0
   18b7c:	bne	18b90 <__assert_fail@plt+0x75fc>
   18b80:	b	18c34 <__assert_fail@plt+0x76a0>
   18b84:	cmp	r4, r3
   18b88:	beq	18ba4 <__assert_fail@plt+0x7610>
   18b8c:	mov	r3, r2
   18b90:	ldr	r2, [r3, #8]
   18b94:	cmp	r2, #0
   18b98:	bne	18b84 <__assert_fail@plt+0x75f0>
   18b9c:	cmp	r4, r3
   18ba0:	strne	r4, [r3, #8]
   18ba4:	ldr	r2, [sp, #260]	; 0x104
   18ba8:	ldr	r3, [r5]
   18bac:	cmp	r2, r3
   18bb0:	bne	18c78 <__assert_fail@plt+0x76e4>
   18bb4:	add	sp, sp, #264	; 0x108
   18bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18bbc:	mov	r3, #255	; 0xff
   18bc0:	mov	r2, r8
   18bc4:	mov	r1, r6
   18bc8:	mov	r0, r9
   18bcc:	bl	11324 <__memcpy_chk@plt>
   18bd0:	add	r3, sp, #264	; 0x108
   18bd4:	add	r8, r3, r8
   18bd8:	mov	r3, #0
   18bdc:	strb	r3, [r8, #-260]	; 0xfffffefc
   18be0:	b	18b5c <__assert_fail@plt+0x75c8>
   18be4:	mov	r2, #10
   18be8:	mov	r1, sp
   18bec:	mov	r0, r9
   18bf0:	bl	11414 <strtoul@plt>
   18bf4:	ldr	r3, [sp]
   18bf8:	cmp	r3, #0
   18bfc:	cmpne	r3, r9
   18c00:	beq	18ba4 <__assert_fail@plt+0x7610>
   18c04:	ldrb	r3, [sl, #1]
   18c08:	cmp	r3, #48	; 0x30
   18c0c:	bne	18ba4 <__assert_fail@plt+0x7610>
   18c10:	ldr	r3, [pc, #104]	; 18c80 <__assert_fail@plt+0x76ec>
   18c14:	b	18c24 <__assert_fail@plt+0x7690>
   18c18:	ldr	r2, [r3, #12]
   18c1c:	cmp	r0, r2
   18c20:	beq	18c3c <__assert_fail@plt+0x76a8>
   18c24:	ldr	r3, [r3]
   18c28:	cmp	r3, #0
   18c2c:	bne	18c18 <__assert_fail@plt+0x7684>
   18c30:	b	18ba4 <__assert_fail@plt+0x7610>
   18c34:	str	r4, [r7, #12]
   18c38:	b	18ba4 <__assert_fail@plt+0x7610>
   18c3c:	ldr	r2, [r3, #4]
   18c40:	cmp	r2, #0
   18c44:	bne	18c58 <__assert_fail@plt+0x76c4>
   18c48:	b	18c70 <__assert_fail@plt+0x76dc>
   18c4c:	cmp	r4, r2
   18c50:	beq	18ba4 <__assert_fail@plt+0x7610>
   18c54:	mov	r2, r3
   18c58:	ldr	r3, [r2, #8]
   18c5c:	cmp	r3, #0
   18c60:	bne	18c4c <__assert_fail@plt+0x76b8>
   18c64:	cmp	r4, r2
   18c68:	strne	r4, [r2, #8]
   18c6c:	b	18ba4 <__assert_fail@plt+0x7610>
   18c70:	str	r4, [r3, #4]
   18c74:	b	18ba4 <__assert_fail@plt+0x7610>
   18c78:	bl	112d0 <__stack_chk_fail@plt>
   18c7c:	strdeq	ip, [r3], -r8
   18c80:	andeq	r1, r4, ip, asr #17
   18c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c88:	sub	sp, sp, #164	; 0xa4
   18c8c:	ldr	r6, [pc, #312]	; 18dcc <__assert_fail@plt+0x7838>
   18c90:	ldr	r3, [pc, #312]	; 18dd0 <__assert_fail@plt+0x783c>
   18c94:	subs	r4, r0, #0
   18c98:	ldr	r2, [r6, #4]
   18c9c:	ldr	r1, [r3]
   18ca0:	add	r3, r2, #4
   18ca4:	str	r3, [r6, #4]
   18ca8:	str	r1, [sp, #156]	; 0x9c
   18cac:	beq	18da8 <__assert_fail@plt+0x7814>
   18cb0:	ldr	fp, [pc, #284]	; 18dd4 <__assert_fail@plt+0x7840>
   18cb4:	ldr	sl, [pc, #284]	; 18dd8 <__assert_fail@plt+0x7844>
   18cb8:	ldr	r9, [pc, #284]	; 18ddc <__assert_fail@plt+0x7848>
   18cbc:	add	r7, sp, #28
   18cc0:	ldr	r5, [r4, #12]
   18cc4:	add	r2, r3, #3
   18cc8:	cmp	r5, #0
   18ccc:	str	r2, [r6, #4]
   18cd0:	beq	18d84 <__assert_fail@plt+0x77f0>
   18cd4:	add	r8, r4, #412	; 0x19c
   18cd8:	b	18d0c <__assert_fail@plt+0x7778>
   18cdc:	str	r8, [sp, #12]
   18ce0:	str	r1, [sp, #8]
   18ce4:	str	r7, [sp, #4]
   18ce8:	ldr	r1, [r5, #20]
   18cec:	mov	r0, #1
   18cf0:	str	r1, [sp]
   18cf4:	mov	r1, r9
   18cf8:	bl	1148c <__printf_chk@plt>
   18cfc:	ldr	r5, [r5, #8]
   18d00:	ldr	r2, [r6, #4]
   18d04:	cmp	r5, #0
   18d08:	beq	18d80 <__assert_fail@plt+0x77ec>
   18d0c:	mov	r3, fp
   18d10:	mov	r1, sl
   18d14:	mov	r0, #1
   18d18:	bl	1148c <__printf_chk@plt>
   18d1c:	ldrb	r2, [r5, #28]
   18d20:	mov	r1, #128	; 0x80
   18d24:	mov	r0, r7
   18d28:	bl	1af04 <__assert_fail@plt+0x9970>
   18d2c:	ldr	r3, [r5, #28]
   18d30:	add	r1, r5, #300	; 0x12c
   18d34:	cmp	r3, #9
   18d38:	add	r1, r1, #3
   18d3c:	ldr	r3, [r4, #140]	; 0x8c
   18d40:	ldr	r2, [r4, #32]
   18d44:	bne	18cdc <__assert_fail@plt+0x7748>
   18d48:	str	r8, [sp, #16]
   18d4c:	ldr	r0, [r4, #152]	; 0x98
   18d50:	str	r1, [sp, #8]
   18d54:	str	r0, [sp, #12]
   18d58:	str	r7, [sp, #4]
   18d5c:	ldr	r1, [r5, #20]
   18d60:	mov	r0, #1
   18d64:	str	r1, [sp]
   18d68:	ldr	r1, [pc, #112]	; 18de0 <__assert_fail@plt+0x784c>
   18d6c:	bl	1148c <__printf_chk@plt>
   18d70:	ldr	r5, [r5, #8]
   18d74:	ldr	r2, [r6, #4]
   18d78:	cmp	r5, #0
   18d7c:	bne	18d0c <__assert_fail@plt+0x7778>
   18d80:	sub	r3, r2, #3
   18d84:	ldr	r0, [r4, #16]
   18d88:	str	r3, [r6, #4]
   18d8c:	bl	18c84 <__assert_fail@plt+0x76f0>
   18d90:	ldr	r4, [r4, #8]
   18d94:	cmp	r4, #0
   18d98:	ldrne	r3, [r6, #4]
   18d9c:	bne	18cc0 <__assert_fail@plt+0x772c>
   18da0:	ldr	r2, [r6, #4]
   18da4:	sub	r2, r2, #4
   18da8:	ldr	r3, [pc, #32]	; 18dd0 <__assert_fail@plt+0x783c>
   18dac:	ldr	r1, [sp, #156]	; 0x9c
   18db0:	str	r2, [r6, #4]
   18db4:	ldr	r3, [r3]
   18db8:	cmp	r1, r3
   18dbc:	bne	18dc8 <__assert_fail@plt+0x7834>
   18dc0:	add	sp, sp, #164	; 0xa4
   18dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dc8:	bl	112d0 <__stack_chk_fail@plt>
   18dcc:	andeq	r1, r4, ip, asr #17
   18dd0:	strdeq	ip, [r3], -r8
   18dd4:	andeq	r2, r2, r0, lsr sp
   18dd8:	andeq	r2, r2, r8, lsr sp
   18ddc:	andeq	r2, r2, r8, ror sp
   18de0:	andeq	r2, r2, r0, asr #26
   18de4:	push	{r4, r5, r6, r7, r8, r9, lr}
   18de8:	sub	sp, sp, #4096	; 0x1000
   18dec:	sub	sp, sp, #36	; 0x24
   18df0:	ldr	lr, [pc, #212]	; 18ecc <__assert_fail@plt+0x7938>
   18df4:	ldr	r6, [pc, #212]	; 18ed0 <__assert_fail@plt+0x793c>
   18df8:	str	lr, [sp]
   18dfc:	add	lr, sp, #4096	; 0x1000
   18e00:	ldr	ip, [r6]
   18e04:	add	lr, lr, #28
   18e08:	ldr	r4, [pc, #196]	; 18ed4 <__assert_fail@plt+0x7940>
   18e0c:	mov	r3, #4096	; 0x1000
   18e10:	str	r1, [sp, #12]
   18e14:	str	r0, [sp, #8]
   18e18:	str	r4, [sp, #4]
   18e1c:	mov	r1, r3
   18e20:	str	ip, [lr]
   18e24:	mov	r4, #0
   18e28:	add	r5, sp, #32
   18e2c:	mov	r8, r2
   18e30:	add	r0, sp, #28
   18e34:	mov	r2, #1
   18e38:	bl	11588 <__snprintf_chk@plt>
   18e3c:	add	r0, sp, #28
   18e40:	mov	r1, r4
   18e44:	strb	r4, [r5, #4091]	; 0xffb
   18e48:	bl	113c0 <open@plt>
   18e4c:	subs	r7, r0, #0
   18e50:	blt	18e98 <__assert_fail@plt+0x7904>
   18e54:	add	r1, sp, #16
   18e58:	mov	r2, #11
   18e5c:	str	r4, [r5, #-16]
   18e60:	str	r4, [sp, #20]
   18e64:	str	r4, [sp, #24]
   18e68:	bl	11294 <read@plt>
   18e6c:	mov	r9, r0
   18e70:	mov	r0, r7
   18e74:	bl	11564 <close@plt>
   18e78:	cmp	r9, r4
   18e7c:	blt	18e98 <__assert_fail@plt+0x7904>
   18e80:	mov	r2, r8
   18e84:	add	r0, sp, #16
   18e88:	mov	r1, r4
   18e8c:	strb	r4, [r5, #-5]
   18e90:	bl	11414 <strtoul@plt>
   18e94:	b	18ea4 <__assert_fail@plt+0x7910>
   18e98:	add	r0, sp, #28
   18e9c:	bl	112e8 <perror@plt>
   18ea0:	mov	r0, #0
   18ea4:	add	r3, sp, #4096	; 0x1000
   18ea8:	add	r3, r3, #28
   18eac:	ldr	r2, [r3]
   18eb0:	ldr	r3, [r6]
   18eb4:	cmp	r2, r3
   18eb8:	bne	18ec8 <__assert_fail@plt+0x7934>
   18ebc:	add	sp, sp, #4096	; 0x1000
   18ec0:	add	sp, sp, #36	; 0x24
   18ec4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18ec8:	bl	112d0 <__stack_chk_fail@plt>
   18ecc:	andeq	r2, r2, ip, lsr #27
   18ed0:	strdeq	ip, [r3], -r8
   18ed4:	andeq	r2, r2, r0, ror #25
   18ed8:	push	{r4, r5, r6, r7, r8, lr}
   18edc:	sub	sp, sp, #8192	; 0x2000
   18ee0:	ldr	r7, [pc, #596]	; 1913c <__assert_fail@plt+0x7ba8>
   18ee4:	sub	sp, sp, #24
   18ee8:	add	r2, sp, #8192	; 0x2000
   18eec:	ldr	r3, [r7]
   18ef0:	add	r2, r2, #20
   18ef4:	mov	r1, #58	; 0x3a
   18ef8:	str	r3, [r2]
   18efc:	mov	r6, r0
   18f00:	bl	11438 <strchr@plt>
   18f04:	add	r1, sp, #16
   18f08:	mov	r2, #10
   18f0c:	add	r5, r0, #1
   18f10:	mov	r0, r5
   18f14:	bl	11414 <strtoul@plt>
   18f18:	ldr	r4, [sp, #16]
   18f1c:	cmp	r4, r5
   18f20:	cmpne	r4, #0
   18f24:	beq	190d0 <__assert_fail@plt+0x7b3c>
   18f28:	mov	r8, r0
   18f2c:	mov	r1, #1
   18f30:	mov	r0, #560	; 0x230
   18f34:	bl	11240 <calloc@plt>
   18f38:	subs	r5, r0, #0
   18f3c:	beq	190d0 <__assert_fail@plt+0x7b3c>
   18f40:	add	r4, r4, #1
   18f44:	str	r8, [r5, #16]
   18f48:	add	r1, sp, #16
   18f4c:	mov	r0, r4
   18f50:	mov	r2, #10
   18f54:	bl	11414 <strtoul@plt>
   18f58:	ldr	r3, [sp, #16]
   18f5c:	cmp	r3, r4
   18f60:	cmpne	r3, #0
   18f64:	beq	1910c <__assert_fail@plt+0x7b78>
   18f68:	add	r4, r5, #48	; 0x30
   18f6c:	str	r0, [r5, #20]
   18f70:	mov	r3, r6
   18f74:	mov	r0, r4
   18f78:	ldr	r2, [pc, #448]	; 19140 <__assert_fail@plt+0x7bac>
   18f7c:	mov	r1, #255	; 0xff
   18f80:	bl	11468 <snprintf@plt>
   18f84:	cmp	r0, #254	; 0xfe
   18f88:	bgt	190f4 <__assert_fail@plt+0x7b60>
   18f8c:	mov	r2, #10
   18f90:	ldr	r1, [pc, #428]	; 19144 <__assert_fail@plt+0x7bb0>
   18f94:	mov	r0, r6
   18f98:	bl	18de4 <__assert_fail@plt+0x7850>
   18f9c:	mov	r2, #16
   18fa0:	ldr	r1, [pc, #416]	; 19148 <__assert_fail@plt+0x7bb4>
   18fa4:	ldr	r4, [pc, #416]	; 1914c <__assert_fail@plt+0x7bb8>
   18fa8:	str	r0, [r5, #24]
   18fac:	mov	r0, r6
   18fb0:	bl	18de4 <__assert_fail@plt+0x7850>
   18fb4:	mov	r2, #16
   18fb8:	ldr	r1, [pc, #400]	; 19150 <__assert_fail@plt+0x7bbc>
   18fbc:	str	r0, [r5, #28]
   18fc0:	mov	r0, r6
   18fc4:	bl	18de4 <__assert_fail@plt+0x7850>
   18fc8:	mov	r2, #16
   18fcc:	ldr	r1, [pc, #384]	; 19154 <__assert_fail@plt+0x7bc0>
   18fd0:	str	r0, [r5, #32]
   18fd4:	mov	r0, r6
   18fd8:	bl	18de4 <__assert_fail@plt+0x7850>
   18fdc:	mov	r2, #16
   18fe0:	ldr	r1, [pc, #368]	; 19158 <__assert_fail@plt+0x7bc4>
   18fe4:	str	r0, [r5, #36]	; 0x24
   18fe8:	mov	r0, r6
   18fec:	bl	18de4 <__assert_fail@plt+0x7850>
   18ff0:	mov	r2, #16
   18ff4:	ldr	r1, [pc, #352]	; 1915c <__assert_fail@plt+0x7bc8>
   18ff8:	str	r0, [r5, #40]	; 0x28
   18ffc:	mov	r0, r6
   19000:	bl	18de4 <__assert_fail@plt+0x7850>
   19004:	ldr	lr, [pc, #340]	; 19160 <__assert_fail@plt+0x7bcc>
   19008:	ldr	ip, [pc, #340]	; 19164 <__assert_fail@plt+0x7bd0>
   1900c:	mov	r3, #4096	; 0x1000
   19010:	mov	r1, r3
   19014:	mov	r2, #1
   19018:	str	r0, [r5, #44]	; 0x2c
   1901c:	add	r0, sp, #4096	; 0x1000
   19020:	str	r6, [sp, #8]
   19024:	stm	sp, {ip, lr}
   19028:	add	r0, r0, #20
   1902c:	bl	11588 <__snprintf_chk@plt>
   19030:	sub	r3, r0, #1
   19034:	cmp	r3, r4
   19038:	bhi	190a4 <__assert_fail@plt+0x7b10>
   1903c:	add	r0, sp, #4096	; 0x1000
   19040:	add	r0, r0, #20
   19044:	add	r1, sp, #20
   19048:	mov	r2, #4096	; 0x1000
   1904c:	bl	1130c <readlink@plt>
   19050:	cmp	r0, #0
   19054:	blt	190b8 <__assert_fail@plt+0x7b24>
   19058:	cmp	r0, r4
   1905c:	addle	r3, sp, #24
   19060:	addle	r0, r3, r0
   19064:	movle	r3, #0
   19068:	strble	r3, [r0, #-4]
   1906c:	movgt	r3, #0
   19070:	add	r0, sp, #20
   19074:	mov	r1, #47	; 0x2f
   19078:	strbgt	r3, [sp, #20]
   1907c:	bl	114ec <strrchr@plt>
   19080:	subs	r3, r0, #0
   19084:	beq	190b8 <__assert_fail@plt+0x7b24>
   19088:	add	r0, r5, #300	; 0x12c
   1908c:	add	r3, r3, #1
   19090:	ldr	r2, [pc, #168]	; 19140 <__assert_fail@plt+0x7bac>
   19094:	mov	r1, #255	; 0xff
   19098:	add	r0, r0, #3
   1909c:	bl	11468 <snprintf@plt>
   190a0:	b	190b8 <__assert_fail@plt+0x7b24>
   190a4:	mov	r3, r0
   190a8:	mov	r2, r6
   190ac:	ldr	r1, [pc, #180]	; 19168 <__assert_fail@plt+0x7bd4>
   190b0:	mov	r0, #1
   190b4:	bl	1148c <__printf_chk@plt>
   190b8:	ldr	r3, [pc, #172]	; 1916c <__assert_fail@plt+0x7bd8>
   190bc:	str	r3, [r5]
   190c0:	ldr	r2, [r3, #4]
   190c4:	str	r5, [r3, #4]
   190c8:	str	r2, [r5, #4]
   190cc:	str	r5, [r2]
   190d0:	add	r3, sp, #8192	; 0x2000
   190d4:	add	r3, r3, #20
   190d8:	ldr	r2, [r3]
   190dc:	ldr	r3, [r7]
   190e0:	cmp	r2, r3
   190e4:	bne	19138 <__assert_fail@plt+0x7ba4>
   190e8:	add	sp, sp, #8192	; 0x2000
   190ec:	add	sp, sp, #24
   190f0:	pop	{r4, r5, r6, r7, r8, pc}
   190f4:	mov	r2, r4
   190f8:	mov	r3, r6
   190fc:	ldr	r1, [pc, #108]	; 19170 <__assert_fail@plt+0x7bdc>
   19100:	mov	r0, #1
   19104:	bl	1148c <__printf_chk@plt>
   19108:	b	18f8c <__assert_fail@plt+0x79f8>
   1910c:	add	r3, sp, #8192	; 0x2000
   19110:	add	r3, r3, #20
   19114:	ldr	r2, [r3]
   19118:	ldr	r3, [r7]
   1911c:	cmp	r2, r3
   19120:	bne	19138 <__assert_fail@plt+0x7ba4>
   19124:	mov	r0, r5
   19128:	add	sp, sp, #8192	; 0x2000
   1912c:	add	sp, sp, #24
   19130:	pop	{r4, r5, r6, r7, r8, lr}
   19134:	b	112a0 <free@plt>
   19138:	bl	112d0 <__stack_chk_fail@plt>
   1913c:	strdeq	ip, [r3], -r8
   19140:	andeq	r0, r2, r8, ror #21
   19144:	ldrdeq	r2, [r2], -ip
   19148:	strdeq	r2, [r2], -r0
   1914c:	strdeq	r0, [r0], -lr
   19150:	andeq	r2, r2, r0, lsl #28
   19154:	andeq	r2, r2, r4, lsl lr
   19158:	andeq	r2, r2, r8, lsr #28
   1915c:	andeq	r2, r2, ip, lsr lr
   19160:	andeq	r2, r2, r0, ror #25
   19164:	andeq	r2, r2, ip, asr #28
   19168:	andeq	r2, r2, r8, lsl #26
   1916c:	andeq	sp, r3, r8, lsr r1
   19170:			; <UNDEFINED> instruction: 0x00022db8
   19174:	push	{r4, r5, r6, r7, r8, lr}
   19178:	sub	sp, sp, #4096	; 0x1000
   1917c:	sub	sp, sp, #24
   19180:	ldr	lr, [pc, #288]	; 192a8 <__assert_fail@plt+0x7d14>
   19184:	ldr	r5, [pc, #288]	; 192ac <__assert_fail@plt+0x7d18>
   19188:	str	lr, [sp]
   1918c:	add	lr, sp, #4096	; 0x1000
   19190:	ldr	ip, [r5]
   19194:	add	lr, lr, #20
   19198:	ldr	r6, [pc, #272]	; 192b0 <__assert_fail@plt+0x7d1c>
   1919c:	mov	r3, #4096	; 0x1000
   191a0:	str	r1, [sp, #12]
   191a4:	str	r0, [sp, #8]
   191a8:	str	r6, [sp, #4]
   191ac:	mov	r4, r2
   191b0:	add	r0, sp, #20
   191b4:	mov	r1, r3
   191b8:	mov	r2, #1
   191bc:	str	ip, [lr]
   191c0:	bl	11588 <__snprintf_chk@plt>
   191c4:	cmp	r0, #4096	; 0x1000
   191c8:	bcc	191f8 <__assert_fail@plt+0x7c64>
   191cc:	mov	r3, #0
   191d0:	strb	r3, [r4]
   191d4:	add	r3, sp, #4096	; 0x1000
   191d8:	add	r3, r3, #20
   191dc:	ldr	r2, [r3]
   191e0:	ldr	r3, [r5]
   191e4:	cmp	r2, r3
   191e8:	bne	192a4 <__assert_fail@plt+0x7d10>
   191ec:	add	sp, sp, #4096	; 0x1000
   191f0:	add	sp, sp, #24
   191f4:	pop	{r4, r5, r6, r7, r8, pc}
   191f8:	add	r3, sp, #24
   191fc:	add	r3, r3, r0
   19200:	mov	r6, #0
   19204:	add	r0, sp, #20
   19208:	mov	r1, r6
   1920c:	strb	r6, [r3, #-4]
   19210:	bl	113c0 <open@plt>
   19214:	subs	r8, r0, #0
   19218:	blt	191cc <__assert_fail@plt+0x7c38>
   1921c:	mov	r2, #64	; 0x40
   19220:	mov	r1, r4
   19224:	bl	11294 <read@plt>
   19228:	mov	r7, r0
   1922c:	mov	r0, r8
   19230:	bl	11564 <close@plt>
   19234:	sub	r2, r7, #1
   19238:	cmp	r2, #62	; 0x3e
   1923c:	bhi	191cc <__assert_fail@plt+0x7c38>
   19240:	strb	r6, [r4, r7]
   19244:	ldrb	r1, [r4, r2]
   19248:	mov	r3, r2
   1924c:	add	r2, r4, r2
   19250:	cmp	r1, #10
   19254:	bne	19274 <__assert_fail@plt+0x7ce0>
   19258:	add	r0, r4, r7
   1925c:	mvn	ip, r4
   19260:	strb	r6, [r0, #-1]!
   19264:	add	r3, ip, r2
   19268:	ldrb	r1, [r2, #-1]!
   1926c:	cmp	r1, #10
   19270:	beq	19260 <__assert_fail@plt+0x7ccc>
   19274:	cmp	r3, #0
   19278:	beq	191d4 <__assert_fail@plt+0x7c40>
   1927c:	add	r3, r3, #1
   19280:	add	r3, r4, r3
   19284:	mov	r1, #32
   19288:	add	r4, r4, #1
   1928c:	ldrb	r2, [r3, #-1]!
   19290:	cmp	r2, #10
   19294:	strbeq	r1, [r3]
   19298:	cmp	r4, r3
   1929c:	bne	1928c <__assert_fail@plt+0x7cf8>
   192a0:	b	191d4 <__assert_fail@plt+0x7c40>
   192a4:	bl	112d0 <__stack_chk_fail@plt>
   192a8:	andeq	r2, r2, ip, lsr #27
   192ac:	strdeq	ip, [r3], -r8
   192b0:	andeq	r2, r2, r0, ror #25
   192b4:	push	{r4, r5, r6, r7, r8, lr}
   192b8:	sub	sp, sp, #8192	; 0x2000
   192bc:	ldr	r8, [pc, #824]	; 195fc <__assert_fail@plt+0x8068>
   192c0:	sub	sp, sp, #24
   192c4:	add	ip, sp, #8192	; 0x2000
   192c8:	ldr	r3, [r8]
   192cc:	add	ip, ip, #20
   192d0:	add	r1, sp, #16
   192d4:	mov	r2, #10
   192d8:	mov	r6, r0
   192dc:	str	r3, [ip]
   192e0:	bl	11414 <strtoul@plt>
   192e4:	ldr	r5, [sp, #16]
   192e8:	cmp	r5, r6
   192ec:	cmpne	r5, #0
   192f0:	beq	195bc <__assert_fail@plt+0x8028>
   192f4:	mov	r7, r0
   192f8:	mov	r1, #1
   192fc:	mov	r0, #988	; 0x3dc
   19300:	bl	11240 <calloc@plt>
   19304:	subs	r4, r0, #0
   19308:	beq	195bc <__assert_fail@plt+0x8028>
   1930c:	str	r7, [r4, #24]
   19310:	ldrb	r3, [r5]
   19314:	cmp	r3, #0
   19318:	bne	19338 <__assert_fail@plt+0x7da4>
   1931c:	b	19358 <__assert_fail@plt+0x7dc4>
   19320:	ldr	r3, [r4, #32]
   19324:	str	r0, [r4, #32]
   19328:	str	r3, [r4, #28]
   1932c:	ldrb	r3, [r5]
   19330:	cmp	r3, #0
   19334:	beq	19358 <__assert_fail@plt+0x7dc4>
   19338:	add	r7, r5, #1
   1933c:	mov	r0, r7
   19340:	mov	r2, #10
   19344:	add	r1, sp, #16
   19348:	bl	11414 <strtoul@plt>
   1934c:	ldr	r5, [sp, #16]
   19350:	cmp	r5, r7
   19354:	bne	19320 <__assert_fail@plt+0x7d8c>
   19358:	add	r5, r4, #476	; 0x1dc
   1935c:	mov	r0, r5
   19360:	mov	r3, r6
   19364:	ldr	r2, [pc, #660]	; 19600 <__assert_fail@plt+0x806c>
   19368:	mov	r1, #255	; 0xff
   1936c:	bl	11468 <snprintf@plt>
   19370:	cmp	r0, #254	; 0xfe
   19374:	bgt	195e0 <__assert_fail@plt+0x804c>
   19378:	mov	r2, #10
   1937c:	ldr	r1, [pc, #640]	; 19604 <__assert_fail@plt+0x8070>
   19380:	mov	r0, r6
   19384:	bl	18de4 <__assert_fail@plt+0x7850>
   19388:	mov	r2, #16
   1938c:	ldr	r1, [pc, #628]	; 19608 <__assert_fail@plt+0x8074>
   19390:	ldr	r5, [pc, #628]	; 1960c <__assert_fail@plt+0x8078>
   19394:	str	r0, [r4, #36]	; 0x24
   19398:	mov	r0, r6
   1939c:	bl	18de4 <__assert_fail@plt+0x7850>
   193a0:	mov	r2, #16
   193a4:	ldr	r1, [pc, #612]	; 19610 <__assert_fail@plt+0x807c>
   193a8:	str	r0, [r4, #40]	; 0x28
   193ac:	mov	r0, r6
   193b0:	bl	18de4 <__assert_fail@plt+0x7850>
   193b4:	mov	r2, #16
   193b8:	ldr	r1, [pc, #596]	; 19614 <__assert_fail@plt+0x8080>
   193bc:	str	r0, [r4, #44]	; 0x2c
   193c0:	mov	r0, r6
   193c4:	bl	18de4 <__assert_fail@plt+0x7850>
   193c8:	mov	r2, #16
   193cc:	ldr	r1, [pc, #580]	; 19618 <__assert_fail@plt+0x8084>
   193d0:	str	r0, [r4, #48]	; 0x30
   193d4:	mov	r0, r6
   193d8:	bl	18de4 <__assert_fail@plt+0x7850>
   193dc:	add	r2, r4, #56	; 0x38
   193e0:	ldr	r1, [pc, #564]	; 1961c <__assert_fail@plt+0x8088>
   193e4:	str	r0, [r4, #52]	; 0x34
   193e8:	mov	r0, r6
   193ec:	bl	19174 <__assert_fail@plt+0x7be0>
   193f0:	mov	r2, #10
   193f4:	ldr	r1, [pc, #548]	; 19620 <__assert_fail@plt+0x808c>
   193f8:	mov	r0, r6
   193fc:	bl	18de4 <__assert_fail@plt+0x7850>
   19400:	mov	r2, #16
   19404:	ldr	r1, [pc, #536]	; 19624 <__assert_fail@plt+0x8090>
   19408:	str	r0, [r4, #120]	; 0x78
   1940c:	mov	r0, r6
   19410:	bl	18de4 <__assert_fail@plt+0x7850>
   19414:	mov	r2, #16
   19418:	ldr	r1, [pc, #520]	; 19628 <__assert_fail@plt+0x8094>
   1941c:	str	r0, [r4, #124]	; 0x7c
   19420:	mov	r0, r6
   19424:	bl	18de4 <__assert_fail@plt+0x7850>
   19428:	mov	r2, #16
   1942c:	ldr	r1, [pc, #504]	; 1962c <__assert_fail@plt+0x8098>
   19430:	str	r0, [r4, #128]	; 0x80
   19434:	mov	r0, r6
   19438:	bl	18de4 <__assert_fail@plt+0x7850>
   1943c:	mov	r2, #10
   19440:	ldr	r1, [pc, #488]	; 19630 <__assert_fail@plt+0x809c>
   19444:	str	r0, [r4, #132]	; 0x84
   19448:	mov	r0, r6
   1944c:	bl	18de4 <__assert_fail@plt+0x7850>
   19450:	mov	r2, #10
   19454:	ldr	r1, [pc, #472]	; 19634 <__assert_fail@plt+0x80a0>
   19458:	str	r0, [r4, #136]	; 0x88
   1945c:	mov	r0, r6
   19460:	bl	18de4 <__assert_fail@plt+0x7850>
   19464:	mov	r2, #16
   19468:	ldr	r1, [pc, #456]	; 19638 <__assert_fail@plt+0x80a4>
   1946c:	str	r0, [r4, #140]	; 0x8c
   19470:	mov	r0, r6
   19474:	bl	18de4 <__assert_fail@plt+0x7850>
   19478:	mov	r2, #16
   1947c:	ldr	r1, [pc, #440]	; 1963c <__assert_fail@plt+0x80a8>
   19480:	str	r0, [r4, #144]	; 0x90
   19484:	mov	r0, r6
   19488:	bl	18de4 <__assert_fail@plt+0x7850>
   1948c:	mov	r2, #10
   19490:	ldr	r1, [pc, #424]	; 19640 <__assert_fail@plt+0x80ac>
   19494:	str	r0, [r4, #148]	; 0x94
   19498:	mov	r0, r6
   1949c:	bl	18de4 <__assert_fail@plt+0x7850>
   194a0:	add	r2, r4, #156	; 0x9c
   194a4:	ldr	r1, [pc, #408]	; 19644 <__assert_fail@plt+0x80b0>
   194a8:	str	r0, [r4, #152]	; 0x98
   194ac:	mov	r0, r6
   194b0:	bl	19174 <__assert_fail@plt+0x7be0>
   194b4:	add	r2, r4, #220	; 0xdc
   194b8:	ldr	r1, [pc, #392]	; 19648 <__assert_fail@plt+0x80b4>
   194bc:	mov	r0, r6
   194c0:	bl	19174 <__assert_fail@plt+0x7be0>
   194c4:	add	r2, r4, #284	; 0x11c
   194c8:	ldr	r1, [pc, #380]	; 1964c <__assert_fail@plt+0x80b8>
   194cc:	mov	r0, r6
   194d0:	bl	19174 <__assert_fail@plt+0x7be0>
   194d4:	add	r2, r4, #348	; 0x15c
   194d8:	ldr	r1, [pc, #368]	; 19650 <__assert_fail@plt+0x80bc>
   194dc:	mov	r0, r6
   194e0:	bl	19174 <__assert_fail@plt+0x7be0>
   194e4:	add	r2, r4, #412	; 0x19c
   194e8:	ldr	r1, [pc, #356]	; 19654 <__assert_fail@plt+0x80c0>
   194ec:	mov	r0, r6
   194f0:	bl	19174 <__assert_fail@plt+0x7be0>
   194f4:	ldr	r1, [pc, #348]	; 19658 <__assert_fail@plt+0x80c4>
   194f8:	ldr	r2, [pc, #348]	; 1965c <__assert_fail@plt+0x80c8>
   194fc:	mov	r3, #4096	; 0x1000
   19500:	add	r0, sp, #4096	; 0x1000
   19504:	stmib	sp, {r1, r6}
   19508:	str	r2, [sp]
   1950c:	mov	r1, r3
   19510:	add	r0, r0, #20
   19514:	mov	r2, #1
   19518:	bl	11588 <__snprintf_chk@plt>
   1951c:	sub	r3, r0, #1
   19520:	cmp	r3, r5
   19524:	bhi	19590 <__assert_fail@plt+0x7ffc>
   19528:	add	r0, sp, #4096	; 0x1000
   1952c:	add	r0, r0, #20
   19530:	add	r1, sp, #20
   19534:	mov	r2, #4096	; 0x1000
   19538:	bl	1130c <readlink@plt>
   1953c:	cmp	r0, #0
   19540:	blt	195a4 <__assert_fail@plt+0x8010>
   19544:	cmp	r0, r5
   19548:	addle	r3, sp, #24
   1954c:	addle	r0, r3, r0
   19550:	movle	r3, #0
   19554:	strble	r3, [r0, #-4]
   19558:	movgt	r3, #0
   1955c:	add	r0, sp, #20
   19560:	mov	r1, #47	; 0x2f
   19564:	strbgt	r3, [sp, #20]
   19568:	bl	114ec <strrchr@plt>
   1956c:	subs	r3, r0, #0
   19570:	beq	195a4 <__assert_fail@plt+0x8010>
   19574:	add	r0, r4, #728	; 0x2d8
   19578:	add	r3, r3, #1
   1957c:	ldr	r2, [pc, #124]	; 19600 <__assert_fail@plt+0x806c>
   19580:	mov	r1, #255	; 0xff
   19584:	add	r0, r0, #3
   19588:	bl	11468 <snprintf@plt>
   1958c:	b	195a4 <__assert_fail@plt+0x8010>
   19590:	mov	r3, r0
   19594:	mov	r2, r6
   19598:	ldr	r1, [pc, #192]	; 19660 <__assert_fail@plt+0x80cc>
   1959c:	mov	r0, #1
   195a0:	bl	1148c <__printf_chk@plt>
   195a4:	ldr	r3, [pc, #184]	; 19664 <__assert_fail@plt+0x80d0>
   195a8:	add	r1, r3, #8
   195ac:	ldr	r2, [r3, #12]
   195b0:	str	r4, [r3, #12]
   195b4:	stm	r4, {r1, r2}
   195b8:	str	r4, [r2]
   195bc:	add	r3, sp, #8192	; 0x2000
   195c0:	add	r3, r3, #20
   195c4:	ldr	r2, [r3]
   195c8:	ldr	r3, [r8]
   195cc:	cmp	r2, r3
   195d0:	bne	195f8 <__assert_fail@plt+0x8064>
   195d4:	add	sp, sp, #8192	; 0x2000
   195d8:	add	sp, sp, #24
   195dc:	pop	{r4, r5, r6, r7, r8, pc}
   195e0:	mov	r2, r5
   195e4:	mov	r3, r6
   195e8:	ldr	r1, [pc, #120]	; 19668 <__assert_fail@plt+0x80d4>
   195ec:	mov	r0, #1
   195f0:	bl	1148c <__printf_chk@plt>
   195f4:	b	19378 <__assert_fail@plt+0x7de4>
   195f8:	bl	112d0 <__stack_chk_fail@plt>
   195fc:	strdeq	ip, [r3], -r8
   19600:	andeq	r0, r2, r8, ror #21
   19604:	andeq	r2, r2, ip, asr lr
   19608:	andeq	r2, r2, r0, ror lr
   1960c:	strdeq	r0, [r0], -lr
   19610:	andeq	r2, r2, r0, lsl #29
   19614:	muleq	r2, r0, lr
   19618:	andeq	r2, r2, r0, lsr #29
   1961c:			; <UNDEFINED> instruction: 0x00022eb0
   19620:			; <UNDEFINED> instruction: 0x00022ebc
   19624:	ldrdeq	r2, [r2], -r0
   19628:	andeq	r2, r2, r0, ror #29
   1962c:	andeq	r2, r2, ip, ror #29
   19630:	strdeq	r2, [r2], -ip
   19634:	andeq	r2, r2, ip, lsl #30
   19638:	andeq	r2, r2, r4, lsl pc
   1963c:	andeq	r2, r2, r0, lsr #30
   19640:	andeq	r2, r2, ip, lsr #30
   19644:	andeq	r2, r2, r8, lsr pc
   19648:	andeq	r2, r2, r8, asr #30
   1964c:	andeq	r2, r2, r0, asr pc
   19650:	ldrdeq	r2, [r2], -r0
   19654:	andeq	r0, r2, ip, lsl r9
   19658:	andeq	r2, r2, r0, ror #25
   1965c:	andeq	r2, r2, ip, asr #28
   19660:	andeq	r2, r2, r8, lsl #26
   19664:	andeq	sp, r3, r8, lsr r1
   19668:			; <UNDEFINED> instruction: 0x00022db8
   1966c:	ldr	r3, [pc, #1264]	; 19b64 <__assert_fail@plt+0x85d0>
   19670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19674:	sub	sp, sp, #300	; 0x12c
   19678:	ldr	r3, [r3]
   1967c:	ldr	r0, [pc, #1252]	; 19b68 <__assert_fail@plt+0x85d4>
   19680:	str	r3, [sp, #292]	; 0x124
   19684:	bl	1136c <opendir@plt>
   19688:	subs	r9, r0, #0
   1968c:	beq	19b4c <__assert_fail@plt+0x85b8>
   19690:	ldr	r8, [pc, #1236]	; 19b6c <__assert_fail@plt+0x85d8>
   19694:	ldr	r7, [pc, #1236]	; 19b70 <__assert_fail@plt+0x85dc>
   19698:	ldr	r6, [pc, #1236]	; 19b74 <__assert_fail@plt+0x85e0>
   1969c:	ldr	fp, [pc, #1236]	; 19b78 <__assert_fail@plt+0x85e4>
   196a0:	mov	r0, r9
   196a4:	bl	114d4 <readdir@plt>
   196a8:	subs	r4, r0, #0
   196ac:	beq	1970c <__assert_fail@plt+0x8178>
   196b0:	ldrb	r5, [r4, #11]
   196b4:	add	sl, r4, #11
   196b8:	cmp	r5, #46	; 0x2e
   196bc:	beq	19b0c <__assert_fail@plt+0x8578>
   196c0:	bl	113d8 <__ctype_b_loc@plt>
   196c4:	cmp	r5, #117	; 0x75
   196c8:	ldr	r3, [r0]
   196cc:	beq	19a38 <__assert_fail@plt+0x84a4>
   196d0:	lsl	r5, r5, #1
   196d4:	ldrh	r3, [r3, r5]
   196d8:	tst	r3, #2048	; 0x800
   196dc:	beq	19a20 <__assert_fail@plt+0x848c>
   196e0:	mov	r1, #58	; 0x3a
   196e4:	mov	r0, sl
   196e8:	bl	11438 <strchr@plt>
   196ec:	cmp	r0, #0
   196f0:	mov	r0, sl
   196f4:	beq	19b2c <__assert_fail@plt+0x8598>
   196f8:	bl	18ed8 <__assert_fail@plt+0x7944>
   196fc:	mov	r0, r9
   19700:	bl	114d4 <readdir@plt>
   19704:	subs	r4, r0, #0
   19708:	bne	196b0 <__assert_fail@plt+0x811c>
   1970c:	ldr	r6, [pc, #1128]	; 19b7c <__assert_fail@plt+0x85e8>
   19710:	mov	r0, r9
   19714:	mov	r7, r6
   19718:	bl	1157c <closedir@plt>
   1971c:	ldr	r4, [r7, #8]!
   19720:	ldr	r5, [r6]
   19724:	cmp	r4, r7
   19728:	beq	1984c <__assert_fail@plt+0x82b8>
   1972c:	str	r9, [sp, #28]
   19730:	mov	r9, r5
   19734:	ldr	fp, [r4, #28]
   19738:	cmp	fp, #0
   1973c:	beq	199c8 <__assert_fail@plt+0x8434>
   19740:	ldr	sl, [r6, #8]
   19744:	cmp	sl, r7
   19748:	beq	197ec <__assert_fail@plt+0x8258>
   1974c:	add	r5, r4, #476	; 0x1dc
   19750:	b	19760 <__assert_fail@plt+0x81cc>
   19754:	ldr	sl, [sl]
   19758:	cmp	sl, r7
   1975c:	beq	197ec <__assert_fail@plt+0x8258>
   19760:	cmp	sl, r4
   19764:	beq	19754 <__assert_fail@plt+0x81c0>
   19768:	ldr	r2, [sl, #24]
   1976c:	ldr	r3, [r4, #24]
   19770:	cmp	r2, r3
   19774:	bne	19754 <__assert_fail@plt+0x81c0>
   19778:	ldr	r3, [sl, #32]
   1977c:	cmp	fp, r3
   19780:	bne	19754 <__assert_fail@plt+0x81c0>
   19784:	mov	r2, #255	; 0xff
   19788:	mov	r1, r5
   1978c:	add	r0, sp, #36	; 0x24
   19790:	bl	11360 <__strcpy_chk@plt>
   19794:	mov	r1, #46	; 0x2e
   19798:	add	r0, sp, #36	; 0x24
   1979c:	bl	114ec <strrchr@plt>
   197a0:	cmp	r0, #0
   197a4:	beq	19754 <__assert_fail@plt+0x81c0>
   197a8:	mov	r3, #0
   197ac:	strb	r3, [r0]
   197b0:	add	r1, sl, #476	; 0x1dc
   197b4:	add	r0, sp, #36	; 0x24
   197b8:	bl	1127c <strcmp@plt>
   197bc:	cmp	r0, #0
   197c0:	bne	19754 <__assert_fail@plt+0x81c0>
   197c4:	ldr	r2, [sl, #16]
   197c8:	str	sl, [r4, #20]
   197cc:	cmp	r2, #0
   197d0:	bne	197dc <__assert_fail@plt+0x8248>
   197d4:	b	19b44 <__assert_fail@plt+0x85b0>
   197d8:	mov	r2, r3
   197dc:	ldr	r3, [r2, #8]
   197e0:	cmp	r3, #0
   197e4:	bne	197d8 <__assert_fail@plt+0x8244>
   197e8:	str	r4, [r2, #8]
   197ec:	cmp	r9, r6
   197f0:	bne	19804 <__assert_fail@plt+0x8270>
   197f4:	b	1982c <__assert_fail@plt+0x8298>
   197f8:	ldr	r9, [r9]
   197fc:	cmp	r9, r6
   19800:	beq	19828 <__assert_fail@plt+0x8294>
   19804:	ldr	r3, [r9, #12]
   19808:	cmp	r3, #0
   1980c:	bne	197f8 <__assert_fail@plt+0x8264>
   19810:	mov	r1, r9
   19814:	mov	r0, r4
   19818:	bl	18b10 <__assert_fail@plt+0x757c>
   1981c:	ldr	r9, [r9]
   19820:	cmp	r9, r6
   19824:	bne	19804 <__assert_fail@plt+0x8270>
   19828:	ldr	r9, [r9]
   1982c:	ldr	r4, [r4]
   19830:	cmp	r4, r7
   19834:	bne	19734 <__assert_fail@plt+0x81a0>
   19838:	mov	r5, r9
   1983c:	cmp	r5, r6
   19840:	ldr	r9, [sp, #28]
   19844:	beq	19854 <__assert_fail@plt+0x82c0>
   19848:	ldr	r5, [r5]
   1984c:	cmp	r5, r6
   19850:	bne	19848 <__assert_fail@plt+0x82b4>
   19854:	ldr	r4, [r8]
   19858:	cmp	r4, #0
   1985c:	beq	1999c <__assert_fail@plt+0x8408>
   19860:	ldr	r3, [r4, #8]
   19864:	cmp	r3, #0
   19868:	beq	19874 <__assert_fail@plt+0x82e0>
   1986c:	add	r0, r4, #8
   19870:	bl	188c8 <__assert_fail@plt+0x7334>
   19874:	ldr	r4, [r4]
   19878:	cmp	r4, #0
   1987c:	bne	19860 <__assert_fail@plt+0x82cc>
   19880:	ldr	r4, [r8]
   19884:	ldr	r5, [pc, #736]	; 19b6c <__assert_fail@plt+0x85d8>
   19888:	cmp	r4, #0
   1988c:	beq	1999c <__assert_fail@plt+0x8408>
   19890:	ldr	r3, [r4]
   19894:	mov	r0, #0
   19898:	mov	r2, r5
   1989c:	b	198cc <__assert_fail@plt+0x8338>
   198a0:	str	r1, [r4]
   198a4:	str	r4, [r3]
   198a8:	str	r3, [r2]
   198ac:	mov	r2, r3
   198b0:	ldr	r3, [r3]
   198b4:	cmp	r3, #0
   198b8:	beq	199c0 <__assert_fail@plt+0x842c>
   198bc:	ldr	r1, [r3]
   198c0:	mov	r0, #1
   198c4:	mov	r4, r3
   198c8:	mov	r3, r1
   198cc:	cmp	r3, #0
   198d0:	beq	198f0 <__assert_fail@plt+0x835c>
   198d4:	ldr	lr, [r4, #12]
   198d8:	ldr	ip, [r3, #12]
   198dc:	ldr	r1, [r3]
   198e0:	cmp	lr, ip
   198e4:	bcc	198a0 <__assert_fail@plt+0x830c>
   198e8:	mov	r2, r4
   198ec:	b	198c4 <__assert_fail@plt+0x8330>
   198f0:	cmp	r0, #0
   198f4:	ldr	r4, [r8]
   198f8:	bne	19888 <__assert_fail@plt+0x82f4>
   198fc:	cmp	r4, #0
   19900:	beq	1999c <__assert_fail@plt+0x8408>
   19904:	ldr	fp, [pc, #628]	; 19b80 <__assert_fail@plt+0x85ec>
   19908:	ldr	sl, [pc, #628]	; 19b84 <__assert_fail@plt+0x85f0>
   1990c:	ldr	r5, [pc, #628]	; 19b88 <__assert_fail@plt+0x85f4>
   19910:	ldr	r8, [pc, #628]	; 19b8c <__assert_fail@plt+0x85f8>
   19914:	ldr	r2, [r4, #16]
   19918:	ldr	r7, [r4, #12]
   1991c:	cmp	r2, #9
   19920:	ldr	r6, [r4, #20]
   19924:	moveq	r0, fp
   19928:	beq	1994c <__assert_fail@plt+0x83b8>
   1992c:	mov	r3, #128	; 0x80
   19930:	str	r2, [sp, #4]
   19934:	str	sl, [sp]
   19938:	mov	r1, r3
   1993c:	mov	r2, #1
   19940:	mov	r0, r5
   19944:	bl	11588 <__snprintf_chk@plt>
   19948:	mov	r0, r5
   1994c:	add	r3, r4, #28
   19950:	str	r3, [sp, #16]
   19954:	ldr	r3, [r4, #24]
   19958:	add	r1, r4, #34	; 0x22
   1995c:	str	r3, [sp, #12]
   19960:	mov	r3, #1
   19964:	str	r0, [sp, #4]
   19968:	str	r1, [sp, #8]
   1996c:	mov	r2, r7
   19970:	str	r6, [sp]
   19974:	mov	r0, r3
   19978:	mov	r1, r8
   1997c:	bl	1148c <__printf_chk@plt>
   19980:	ldr	r0, [r4, #8]
   19984:	cmp	r0, #0
   19988:	beq	19990 <__assert_fail@plt+0x83fc>
   1998c:	bl	18c84 <__assert_fail@plt+0x76f0>
   19990:	ldr	r4, [r4]
   19994:	cmp	r4, #0
   19998:	bne	19914 <__assert_fail@plt+0x8380>
   1999c:	ldr	r3, [pc, #448]	; 19b64 <__assert_fail@plt+0x85d0>
   199a0:	ldr	r2, [sp, #292]	; 0x124
   199a4:	clz	r0, r9
   199a8:	ldr	r3, [r3]
   199ac:	lsr	r0, r0, #5
   199b0:	cmp	r2, r3
   199b4:	bne	19b60 <__assert_fail@plt+0x85cc>
   199b8:	add	sp, sp, #300	; 0x12c
   199bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199c0:	ldr	r4, [r8]
   199c4:	b	19888 <__assert_fail@plt+0x82f4>
   199c8:	ldr	r2, [r8]
   199cc:	cmp	r2, #0
   199d0:	beq	197ec <__assert_fail@plt+0x8258>
   199d4:	ldr	ip, [r4, #24]
   199d8:	b	199e8 <__assert_fail@plt+0x8454>
   199dc:	ldr	r2, [r2]
   199e0:	cmp	r2, #0
   199e4:	beq	197ec <__assert_fail@plt+0x8258>
   199e8:	ldr	r3, [r2, #12]
   199ec:	cmp	r3, ip
   199f0:	bne	199dc <__assert_fail@plt+0x8448>
   199f4:	ldr	r3, [r2, #8]
   199f8:	cmp	r3, #0
   199fc:	streq	r4, [r2, #8]
   19a00:	beq	199dc <__assert_fail@plt+0x8448>
   19a04:	b	19a0c <__assert_fail@plt+0x8478>
   19a08:	mov	r3, r1
   19a0c:	ldr	r1, [r3, #8]
   19a10:	cmp	r1, #0
   19a14:	bne	19a08 <__assert_fail@plt+0x8474>
   19a18:	str	r4, [r3, #8]
   19a1c:	b	199dc <__assert_fail@plt+0x8448>
   19a20:	mov	r3, sl
   19a24:	mov	r2, r6
   19a28:	mov	r1, #1
   19a2c:	ldr	r0, [r7]
   19a30:	bl	11498 <__fprintf_chk@plt>
   19a34:	b	196a0 <__assert_fail@plt+0x810c>
   19a38:	ldrb	r2, [r4, #12]
   19a3c:	cmp	r2, #115	; 0x73
   19a40:	bne	196d0 <__assert_fail@plt+0x813c>
   19a44:	ldrb	r2, [r4, #13]
   19a48:	cmp	r2, #98	; 0x62
   19a4c:	bne	196d0 <__assert_fail@plt+0x813c>
   19a50:	ldrb	r2, [r4, #14]
   19a54:	lsl	r2, r2, #1
   19a58:	ldrh	r2, [r3, r2]
   19a5c:	tst	r2, #2048	; 0x800
   19a60:	beq	196d0 <__assert_fail@plt+0x813c>
   19a64:	mov	r1, #1
   19a68:	mov	r0, #292	; 0x124
   19a6c:	bl	11240 <calloc@plt>
   19a70:	subs	r5, r0, #0
   19a74:	beq	196a0 <__assert_fail@plt+0x810c>
   19a78:	mov	r2, #10
   19a7c:	mov	r1, #0
   19a80:	add	r0, r4, #14
   19a84:	bl	11414 <strtoul@plt>
   19a88:	mov	r2, #10
   19a8c:	ldr	r1, [pc, #252]	; 19b90 <__assert_fail@plt+0x85fc>
   19a90:	str	r0, [r5, #12]
   19a94:	mov	r0, sl
   19a98:	bl	18de4 <__assert_fail@plt+0x7850>
   19a9c:	mov	r2, #16
   19aa0:	mov	r1, fp
   19aa4:	str	r0, [r5, #20]
   19aa8:	mov	r0, sl
   19aac:	bl	18de4 <__assert_fail@plt+0x7850>
   19ab0:	mov	r2, #10
   19ab4:	ldr	r1, [pc, #216]	; 19b94 <__assert_fail@plt+0x8600>
   19ab8:	str	r0, [r5, #16]
   19abc:	mov	r0, sl
   19ac0:	bl	18de4 <__assert_fail@plt+0x7850>
   19ac4:	add	r2, r5, #28
   19ac8:	ldr	r1, [pc, #200]	; 19b98 <__assert_fail@plt+0x8604>
   19acc:	str	r0, [r5, #24]
   19ad0:	mov	r0, sl
   19ad4:	bl	19174 <__assert_fail@plt+0x7be0>
   19ad8:	ldr	r2, [r8]
   19adc:	cmp	r2, #0
   19ae0:	bne	19aec <__assert_fail@plt+0x8558>
   19ae4:	b	19b58 <__assert_fail@plt+0x85c4>
   19ae8:	mov	r2, r3
   19aec:	ldr	r3, [r2]
   19af0:	cmp	r3, #0
   19af4:	bne	19ae8 <__assert_fail@plt+0x8554>
   19af8:	str	r5, [r2]
   19afc:	mov	r1, sl
   19b00:	mov	r0, r5
   19b04:	bl	189f8 <__assert_fail@plt+0x7464>
   19b08:	b	196a0 <__assert_fail@plt+0x810c>
   19b0c:	ldrb	r3, [r4, #12]
   19b10:	cmp	r3, #0
   19b14:	beq	196a0 <__assert_fail@plt+0x810c>
   19b18:	cmp	r3, #46	; 0x2e
   19b1c:	beq	19b34 <__assert_fail@plt+0x85a0>
   19b20:	bl	113d8 <__ctype_b_loc@plt>
   19b24:	ldr	r3, [r0]
   19b28:	b	196d0 <__assert_fail@plt+0x813c>
   19b2c:	bl	192b4 <__assert_fail@plt+0x7d20>
   19b30:	b	196a0 <__assert_fail@plt+0x810c>
   19b34:	ldrb	r3, [r4, #13]
   19b38:	cmp	r3, #0
   19b3c:	bne	19b20 <__assert_fail@plt+0x858c>
   19b40:	b	196a0 <__assert_fail@plt+0x810c>
   19b44:	str	r4, [sl, #16]
   19b48:	b	197ec <__assert_fail@plt+0x8258>
   19b4c:	ldr	r0, [pc, #20]	; 19b68 <__assert_fail@plt+0x85d4>
   19b50:	bl	112e8 <perror@plt>
   19b54:	b	1999c <__assert_fail@plt+0x8408>
   19b58:	str	r5, [r8]
   19b5c:	b	19afc <__assert_fail@plt+0x8568>
   19b60:	bl	112d0 <__stack_chk_fail@plt>
   19b64:	strdeq	ip, [r3], -r8
   19b68:	andeq	r2, r2, r0, ror #25
   19b6c:	andeq	r1, r4, ip, asr #17
   19b70:	muleq	r4, r0, r8
   19b74:	andeq	r2, r2, r4, ror #30
   19b78:	andeq	r2, r2, r0, ror lr
   19b7c:	andeq	sp, r3, r8, lsr r1
   19b80:	andeq	r2, r2, r8, asr pc
   19b84:	andeq	r2, r2, r4, ror pc
   19b88:	ldrdeq	r1, [r4], -r4
   19b8c:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   19b90:	andeq	r2, r2, ip, lsl #30
   19b94:	andeq	r2, r2, ip, lsr #30
   19b98:	andeq	r0, r2, ip, lsl r9
   19b9c:	ldr	r1, [pc, #52]	; 19bd8 <__assert_fail@plt+0x8644>
   19ba0:	and	r2, r0, #4
   19ba4:	mov	r3, #0
   19ba8:	push	{lr}		; (str lr, [sp, #-4]!)
   19bac:	and	r0, r0, #3
   19bb0:	ldr	lr, [pc, #36]	; 19bdc <__assert_fail@plt+0x8648>
   19bb4:	ldr	ip, [pc, #36]	; 19be0 <__assert_fail@plt+0x864c>
   19bb8:	orrs	r3, r2, r3
   19bbc:	movne	r3, lr
   19bc0:	ldr	r2, [r1, r0, lsl #2]
   19bc4:	moveq	r3, ip
   19bc8:	ldr	r1, [pc, #20]	; 19be4 <__assert_fail@plt+0x8650>
   19bcc:	mov	r0, #1
   19bd0:	pop	{lr}		; (ldr lr, [sp], #4)
   19bd4:	b	1148c <__printf_chk@plt>
   19bd8:	ldrdeq	r2, [r2], -r8
   19bdc:	andeq	r5, r2, r8, lsl #26
   19be0:	ldrdeq	r2, [r2], -r8
   19be4:	andeq	r5, r2, r0, lsr #26
   19be8:	and	r2, r0, #1
   19bec:	lsr	r0, r0, #1
   19bf0:	and	r0, r0, #1
   19bf4:	ldr	r3, [pc, #28]	; 19c18 <__assert_fail@plt+0x8684>
   19bf8:	orr	r0, r0, #2
   19bfc:	add	r2, r3, r2, lsl #2
   19c00:	add	r0, r3, r0, lsl #2
   19c04:	ldr	r1, [pc, #16]	; 19c1c <__assert_fail@plt+0x8688>
   19c08:	ldr	r3, [r0, #16]
   19c0c:	ldr	r2, [r2, #16]
   19c10:	mov	r0, #1
   19c14:	b	1148c <__printf_chk@plt>
   19c18:	ldrdeq	r2, [r2], -r8
   19c1c:	andeq	r5, r2, r0, lsr #26
   19c20:	cmp	r1, #0
   19c24:	cmpeq	r0, #6
   19c28:	bhi	19c44 <__assert_fail@plt+0x86b0>
   19c2c:	ldr	r3, [pc, #128]	; 19cb4 <__assert_fail@plt+0x8720>
   19c30:	ldr	r1, [pc, #128]	; 19cb8 <__assert_fail@plt+0x8724>
   19c34:	add	r0, r3, r0, lsl #2
   19c38:	ldr	r2, [r0, #32]
   19c3c:	mov	r0, #1
   19c40:	b	1148c <__printf_chk@plt>
   19c44:	subs	r2, r0, #4096	; 0x1000
   19c48:	sbc	r3, r1, #0
   19c4c:	cmp	r3, #0
   19c50:	cmpeq	r2, #3
   19c54:	bhi	19c78 <__assert_fail@plt+0x86e4>
   19c58:	lsl	r0, r0, #20
   19c5c:	ldr	r3, [pc, #80]	; 19cb4 <__assert_fail@plt+0x8720>
   19c60:	lsr	r0, r0, #20
   19c64:	ldr	r1, [pc, #76]	; 19cb8 <__assert_fail@plt+0x8724>
   19c68:	add	r0, r3, r0, lsl #2
   19c6c:	ldr	r2, [r0, #56]	; 0x38
   19c70:	mov	r0, #1
   19c74:	b	1148c <__printf_chk@plt>
   19c78:	push	{r4, r5}
   19c7c:	subs	r4, r0, #8192	; 0x2000
   19c80:	sbc	r5, r1, #0
   19c84:	cmp	r5, #0
   19c88:	cmpeq	r4, #7
   19c8c:	lslls	r0, r0, #20
   19c90:	ldrls	r3, [pc, #28]	; 19cb4 <__assert_fail@plt+0x8720>
   19c94:	lsrls	r0, r0, #20
   19c98:	ldrhi	r2, [pc, #28]	; 19cbc <__assert_fail@plt+0x8728>
   19c9c:	addls	r0, r3, r0, lsl #2
   19ca0:	ldr	r1, [pc, #16]	; 19cb8 <__assert_fail@plt+0x8724>
   19ca4:	ldrls	r2, [r0, #68]	; 0x44
   19ca8:	pop	{r4, r5}
   19cac:	mov	r0, #1
   19cb0:	b	1148c <__printf_chk@plt>
   19cb4:	ldrdeq	r2, [r2], -r8
   19cb8:	andeq	sp, r1, r4, lsr #26
   19cbc:	ldrdeq	ip, [r1], -r0
   19cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cc4:	mov	r4, r2
   19cc8:	sub	sp, sp, #20
   19ccc:	mov	r8, r0
   19cd0:	ldr	fp, [pc, #116]	; 19d4c <__assert_fail@plt+0x87b8>
   19cd4:	mov	r0, #10
   19cd8:	ldr	sl, [pc, #112]	; 19d50 <__assert_fail@plt+0x87bc>
   19cdc:	ldr	r9, [pc, #112]	; 19d54 <__assert_fail@plt+0x87c0>
   19ce0:	mov	r5, r1
   19ce4:	bl	11474 <putchar@plt>
   19ce8:	lsl	r3, r4, #1
   19cec:	mov	r4, #0
   19cf0:	str	r3, [sp, #12]
   19cf4:	rsb	r1, r4, #32
   19cf8:	lsr	r3, r8, r4
   19cfc:	sub	r2, r4, #32
   19d00:	orr	r3, r3, r5, lsl r1
   19d04:	orr	r3, r3, r5, lsr r2
   19d08:	mov	r7, #0
   19d0c:	and	r6, r3, #1
   19d10:	orrs	r3, r6, r7
   19d14:	add	r4, r4, #1
   19d18:	bne	19d2c <__assert_fail@plt+0x8798>
   19d1c:	cmp	r4, #5
   19d20:	bne	19cf4 <__assert_fail@plt+0x8760>
   19d24:	add	sp, sp, #20
   19d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d2c:	ldr	r2, [fp, r4, lsl #2]
   19d30:	mov	r3, sl
   19d34:	str	r2, [sp]
   19d38:	mov	r1, r9
   19d3c:	ldr	r2, [sp, #12]
   19d40:	mov	r0, #1
   19d44:	bl	1148c <__printf_chk@plt>
   19d48:	b	19d1c <__assert_fail@plt+0x8788>
   19d4c:	strdeq	r2, [r2], -r8
   19d50:	ldrdeq	r2, [r2], -r8
   19d54:	andeq	r5, r2, r0, lsr sp
   19d58:	cmp	r2, #8
   19d5c:	push	{r4, r5, r6, lr}
   19d60:	bhi	19e30 <__assert_fail@plt+0x889c>
   19d64:	sub	r2, r2, #1
   19d68:	add	ip, r0, r1
   19d6c:	cmp	r2, #7
   19d70:	ldrls	pc, [pc, r2, lsl #2]
   19d74:	b	19e50 <__assert_fail@plt+0x88bc>
   19d78:	andeq	r9, r1, r4, ror #27
   19d7c:	strdeq	r9, [r1], -r0
   19d80:	strdeq	r9, [r1], -ip
   19d84:	andeq	r9, r1, r8, lsl #28
   19d88:	andeq	r9, r1, r4, lsl lr
   19d8c:	andeq	r9, r1, ip, lsl lr
   19d90:	muleq	r1, r8, sp
   19d94:	andeq	r9, r1, r4, lsr #28
   19d98:	mov	r3, #0
   19d9c:	ldrb	r4, [ip, #6]
   19da0:	orr	r3, r3, r4, lsl #16
   19da4:	ldrb	r4, [ip, #5]
   19da8:	orr	r3, r3, r4, lsl #8
   19dac:	ldrb	r4, [ip, #4]
   19db0:	mov	r2, #0
   19db4:	orr	r3, r3, r4
   19db8:	ldrb	r4, [ip, #3]
   19dbc:	orr	r2, r2, r4, lsl #24
   19dc0:	ldrb	r4, [ip, #2]
   19dc4:	orr	r2, r2, r4, lsl #16
   19dc8:	ldrb	r4, [ip, #1]
   19dcc:	mov	r5, #0
   19dd0:	orr	r2, r2, r4, lsl #8
   19dd4:	ldrb	r0, [r0, r1]
   19dd8:	mov	r1, r3
   19ddc:	orr	r0, r0, r2
   19de0:	pop	{r4, r5, r6, pc}
   19de4:	mov	r2, #0
   19de8:	mov	r3, r2
   19dec:	b	19dd4 <__assert_fail@plt+0x8840>
   19df0:	mov	r2, #0
   19df4:	mov	r3, r2
   19df8:	b	19dc8 <__assert_fail@plt+0x8834>
   19dfc:	mov	r2, #0
   19e00:	mov	r3, r2
   19e04:	b	19dc0 <__assert_fail@plt+0x882c>
   19e08:	mov	r2, #0
   19e0c:	mov	r3, r2
   19e10:	b	19db8 <__assert_fail@plt+0x8824>
   19e14:	mov	r3, #0
   19e18:	b	19dac <__assert_fail@plt+0x8818>
   19e1c:	mov	r3, #0
   19e20:	b	19da4 <__assert_fail@plt+0x8810>
   19e24:	ldrb	r2, [ip, #7]
   19e28:	lsl	r3, r2, #24
   19e2c:	b	19d9c <__assert_fail@plt+0x8808>
   19e30:	ldr	r3, [pc, #36]	; 19e5c <__assert_fail@plt+0x88c8>
   19e34:	mov	r2, #43	; 0x2b
   19e38:	mov	r1, #1
   19e3c:	ldr	r3, [r3]
   19e40:	ldr	r0, [pc, #24]	; 19e60 <__assert_fail@plt+0x88cc>
   19e44:	bl	11330 <fwrite@plt>
   19e48:	mov	r0, #1
   19e4c:	bl	113fc <exit@plt>
   19e50:	mov	r0, #0
   19e54:	mov	r1, r0
   19e58:	pop	{r4, r5, r6, pc}
   19e5c:	muleq	r4, r0, r8
   19e60:	andeq	r6, r2, ip, lsr #15
   19e64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e68:	mov	r6, r2
   19e6c:	ldr	r2, [r2, #8]
   19e70:	ldr	r9, [r6, #4]
   19e74:	cmp	r2, #0
   19e78:	beq	19ee8 <__assert_fail@plt+0x8954>
   19e7c:	ldr	r3, [r1]
   19e80:	mov	r7, r1
   19e84:	cmp	r3, #0
   19e88:	beq	19ee8 <__assert_fail@plt+0x8954>
   19e8c:	mov	r8, r0
   19e90:	mov	r4, r1
   19e94:	mov	r5, #0
   19e98:	mov	r1, r2
   19e9c:	mov	r0, r3
   19ea0:	bl	1127c <strcmp@plt>
   19ea4:	cmp	r0, #0
   19ea8:	beq	19ed4 <__assert_fail@plt+0x8940>
   19eac:	mov	r2, r4
   19eb0:	mov	r1, r7
   19eb4:	mov	r0, r8
   19eb8:	bl	19e64 <__assert_fail@plt+0x88d0>
   19ebc:	ldr	r3, [r4, #36]!	; 0x24
   19ec0:	cmp	r3, #0
   19ec4:	add	r5, r5, r0
   19ec8:	beq	19ee8 <__assert_fail@plt+0x8954>
   19ecc:	ldr	r2, [r6, #8]
   19ed0:	b	19e98 <__assert_fail@plt+0x8904>
   19ed4:	ldr	r2, [r4, #4]
   19ed8:	mov	r1, r5
   19edc:	mov	r0, r8
   19ee0:	bl	19d58 <__assert_fail@plt+0x87c4>
   19ee4:	mov	r9, r0
   19ee8:	cmp	r9, #0
   19eec:	beq	19ef8 <__assert_fail@plt+0x8964>
   19ef0:	mov	r0, r9
   19ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ef8:	ldr	r1, [pc, #24]	; 19f18 <__assert_fail@plt+0x8984>
   19efc:	ldr	r3, [r6]
   19f00:	ldr	r2, [pc, #20]	; 19f1c <__assert_fail@plt+0x8988>
   19f04:	ldr	r0, [r1]
   19f08:	mov	r1, #1
   19f0c:	bl	11498 <__fprintf_chk@plt>
   19f10:	mov	r0, #1
   19f14:	bl	113fc <exit@plt>
   19f18:	muleq	r4, r0, r8
   19f1c:	ldrdeq	r6, [r2], -r8
   19f20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19f24:	mov	r5, r2
   19f28:	ldr	r2, [r3, #28]
   19f2c:	mov	r6, r3
   19f30:	cmp	r2, #0
   19f34:	mov	r7, r0
   19f38:	ldr	r3, [r5]
   19f3c:	beq	1a038 <__assert_fail@plt+0x8aa4>
   19f40:	cmp	r3, #0
   19f44:	beq	1a030 <__assert_fail@plt+0x8a9c>
   19f48:	mov	r4, r5
   19f4c:	mov	r8, #0
   19f50:	b	19f78 <__assert_fail@plt+0x89e4>
   19f54:	mov	r2, r4
   19f58:	mov	r1, r5
   19f5c:	mov	r0, r7
   19f60:	bl	19e64 <__assert_fail@plt+0x88d0>
   19f64:	ldr	r3, [r4, #36]!	; 0x24
   19f68:	cmp	r3, #0
   19f6c:	add	r8, r8, r0
   19f70:	beq	1a030 <__assert_fail@plt+0x8a9c>
   19f74:	ldr	r2, [r6, #28]
   19f78:	mov	r1, r2
   19f7c:	mov	r0, r3
   19f80:	bl	1127c <strcmp@plt>
   19f84:	cmp	r0, #0
   19f88:	bne	19f54 <__assert_fail@plt+0x89c0>
   19f8c:	ldr	r2, [r4, #4]
   19f90:	mov	r1, r8
   19f94:	mov	r0, r7
   19f98:	bl	19d58 <__assert_fail@plt+0x87c4>
   19f9c:	mov	r9, r0
   19fa0:	ldr	r1, [r6, #32]
   19fa4:	cmp	r1, #0
   19fa8:	beq	1a00c <__assert_fail@plt+0x8a78>
   19fac:	ldr	r3, [r5]
   19fb0:	cmp	r3, #0
   19fb4:	beq	1a00c <__assert_fail@plt+0x8a78>
   19fb8:	mov	r4, r5
   19fbc:	mov	r8, #0
   19fc0:	b	19fe8 <__assert_fail@plt+0x8a54>
   19fc4:	mov	r2, r4
   19fc8:	mov	r1, r5
   19fcc:	mov	r0, r7
   19fd0:	bl	19e64 <__assert_fail@plt+0x88d0>
   19fd4:	ldr	r3, [r4, #36]!	; 0x24
   19fd8:	cmp	r3, #0
   19fdc:	add	r8, r8, r0
   19fe0:	beq	1a00c <__assert_fail@plt+0x8a78>
   19fe4:	ldr	r1, [r6, #32]
   19fe8:	mov	r0, r3
   19fec:	bl	1127c <strcmp@plt>
   19ff0:	cmp	r0, #0
   19ff4:	bne	19fc4 <__assert_fail@plt+0x8a30>
   19ff8:	ldr	r2, [r4, #4]
   19ffc:	mov	r1, r8
   1a000:	mov	r0, r7
   1a004:	bl	19d58 <__assert_fail@plt+0x87c4>
   1a008:	mul	r9, r0, r9
   1a00c:	ldrb	r3, [r6, #25]
   1a010:	cmp	r3, #0
   1a014:	beq	1a028 <__assert_fail@plt+0x8a94>
   1a018:	and	r3, r9, #7
   1a01c:	add	r9, r3, r9, lsr #3
   1a020:	adds	r9, r9, #0
   1a024:	movne	r9, #1
   1a028:	mov	r0, r9
   1a02c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a030:	mov	r9, #0
   1a034:	b	19fa0 <__assert_fail@plt+0x8a0c>
   1a038:	cmp	r3, #0
   1a03c:	mov	r9, r1
   1a040:	moveq	sl, r1
   1a044:	beq	1a0d8 <__assert_fail@plt+0x8b44>
   1a048:	mov	r4, r5
   1a04c:	mov	sl, r1
   1a050:	b	1a0a4 <__assert_fail@plt+0x8b10>
   1a054:	ldr	r3, [r4, #28]
   1a058:	cmp	r3, #0
   1a05c:	beq	1a100 <__assert_fail@plt+0x8b6c>
   1a060:	mov	r3, r4
   1a064:	mov	r2, r5
   1a068:	mov	r1, r9
   1a06c:	mov	r0, r7
   1a070:	bl	19f20 <__assert_fail@plt+0x898c>
   1a074:	cmn	r0, #1
   1a078:	mov	r8, r0
   1a07c:	beq	1a10c <__assert_fail@plt+0x8b78>
   1a080:	mov	r2, r4
   1a084:	mov	r1, r5
   1a088:	mov	r0, r7
   1a08c:	bl	19e64 <__assert_fail@plt+0x88d0>
   1a090:	mul	r0, r8, r0
   1a094:	sub	sl, sl, r0
   1a098:	ldr	r3, [r4, #36]!	; 0x24
   1a09c:	cmp	r3, #0
   1a0a0:	beq	1a0d8 <__assert_fail@plt+0x8b44>
   1a0a4:	cmp	r6, r4
   1a0a8:	beq	1a098 <__assert_fail@plt+0x8b04>
   1a0ac:	ldrb	r3, [r4, #24]
   1a0b0:	cmp	r3, #0
   1a0b4:	bne	1a054 <__assert_fail@plt+0x8ac0>
   1a0b8:	mov	r2, r4
   1a0bc:	mov	r1, r5
   1a0c0:	mov	r0, r7
   1a0c4:	bl	19e64 <__assert_fail@plt+0x88d0>
   1a0c8:	ldr	r3, [r4, #36]!	; 0x24
   1a0cc:	cmp	r3, #0
   1a0d0:	sub	sl, sl, r0
   1a0d4:	bne	1a0a4 <__assert_fail@plt+0x8b10>
   1a0d8:	mov	r2, r6
   1a0dc:	mov	r1, r5
   1a0e0:	mov	r0, r7
   1a0e4:	bl	19e64 <__assert_fail@plt+0x88d0>
   1a0e8:	mov	r1, r0
   1a0ec:	mov	r0, sl
   1a0f0:	bl	1b918 <__assert_fail@plt+0xa384>
   1a0f4:	mov	r9, r0
   1a0f8:	mov	r0, r9
   1a0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a100:	mvn	r9, #0
   1a104:	mov	r0, r9
   1a108:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a10c:	ldr	r3, [pc, #24]	; 1a12c <__assert_fail@plt+0x8b98>
   1a110:	mov	r2, #60	; 0x3c
   1a114:	mov	r1, #1
   1a118:	ldr	r3, [r3]
   1a11c:	ldr	r0, [pc, #12]	; 1a130 <__assert_fail@plt+0x8b9c>
   1a120:	bl	11330 <fwrite@plt>
   1a124:	mov	r0, #1
   1a128:	bl	113fc <exit@plt>
   1a12c:	muleq	r4, r0, r8
   1a130:	andeq	r6, r2, r0, lsl r8
   1a134:	push	{r4, r5, lr}
   1a138:	lsl	r4, r2, #1
   1a13c:	sub	sp, sp, #20
   1a140:	cmp	r4, #4
   1a144:	rsbls	r5, r4, #4
   1a148:	movhi	r5, #0
   1a14c:	bl	19d58 <__assert_fail@plt+0x87c4>
   1a150:	str	r4, [sp]
   1a154:	mov	r2, r5
   1a158:	ldr	r3, [pc, #20]	; 1a174 <__assert_fail@plt+0x8be0>
   1a15c:	strd	r0, [sp, #8]
   1a160:	ldr	r1, [pc, #16]	; 1a178 <__assert_fail@plt+0x8be4>
   1a164:	mov	r0, #1
   1a168:	bl	1148c <__printf_chk@plt>
   1a16c:	add	sp, sp, #20
   1a170:	pop	{r4, r5, pc}
   1a174:	ldrdeq	r2, [r2], -r8
   1a178:	andeq	r6, r2, r0, asr r8
   1a17c:	cmp	r2, #1
   1a180:	beq	1a188 <__assert_fail@plt+0x8bf4>
   1a184:	b	1a134 <__assert_fail@plt+0x8ba0>
   1a188:	push	{lr}		; (str lr, [sp, #-4]!)
   1a18c:	pop	{lr}		; (ldr lr, [sp], #4)
   1a190:	ldrb	r3, [r0, r1]
   1a194:	mov	r0, r2
   1a198:	ldr	r1, [pc, #4]	; 1a1a4 <__assert_fail@plt+0x8c10>
   1a19c:	mov	r2, #4
   1a1a0:	b	1148c <__printf_chk@plt>
   1a1a4:	andeq	r6, r2, r0, ror #16
   1a1a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1ac:	sub	sp, sp, #92	; 0x5c
   1a1b0:	cmn	r3, #1
   1a1b4:	str	r3, [sp, #32]
   1a1b8:	moveq	r3, #1
   1a1bc:	movne	r3, #0
   1a1c0:	cmp	r1, #0
   1a1c4:	moveq	r3, #0
   1a1c8:	cmp	r3, #0
   1a1cc:	ldr	r3, [sp, #128]	; 0x80
   1a1d0:	str	r0, [sp, #60]	; 0x3c
   1a1d4:	mov	fp, r2
   1a1d8:	str	r1, [sp, #56]	; 0x38
   1a1dc:	str	r3, [sp, #84]	; 0x54
   1a1e0:	bne	1a8c0 <__assert_fail@plt+0x932c>
   1a1e4:	ldr	r3, [sp, #56]	; 0x38
   1a1e8:	ldr	r3, [r3]
   1a1ec:	cmp	r3, #0
   1a1f0:	beq	1a8e4 <__assert_fail@plt+0x9350>
   1a1f4:	ldr	r7, [sp, #56]	; 0x38
   1a1f8:	mov	r3, #18
   1a1fc:	mov	r5, r7
   1a200:	mov	r6, r3
   1a204:	ldr	r8, [sp, #32]
   1a208:	b	1a22c <__assert_fail@plt+0x8c98>
   1a20c:	ldr	r0, [r5]
   1a210:	bl	11420 <strlen@plt>
   1a214:	ldr	r3, [r5, #36]!	; 0x24
   1a218:	add	r0, r0, r4
   1a21c:	cmp	r6, r0
   1a220:	movcc	r6, r0
   1a224:	cmp	r3, #0
   1a228:	beq	1a26c <__assert_fail@plt+0x8cd8>
   1a22c:	ldrb	r0, [r5, #24]
   1a230:	cmp	r0, #0
   1a234:	moveq	r4, r0
   1a238:	beq	1a20c <__assert_fail@plt+0x8c78>
   1a23c:	mov	r3, r5
   1a240:	mov	r2, r7
   1a244:	mov	r1, r8
   1a248:	mov	r0, fp
   1a24c:	bl	19f20 <__assert_fail@plt+0x898c>
   1a250:	cmp	r0, #100	; 0x64
   1a254:	movhi	r4, #5
   1a258:	bhi	1a20c <__assert_fail@plt+0x8c78>
   1a25c:	cmp	r0, #11
   1a260:	movcc	r4, #3
   1a264:	movcs	r4, #4
   1a268:	b	1a20c <__assert_fail@plt+0x8c78>
   1a26c:	ldr	r1, [sp, #56]	; 0x38
   1a270:	str	r6, [sp, #40]	; 0x28
   1a274:	ldr	r2, [r1]
   1a278:	cmp	r2, #0
   1a27c:	beq	1a8e4 <__assert_fail@plt+0x9350>
   1a280:	ldr	r0, [sp, #84]	; 0x54
   1a284:	add	sl, r1, #36	; 0x24
   1a288:	str	r3, [sp, #28]
   1a28c:	lsl	r2, r0, #1
   1a290:	add	r3, r2, #2
   1a294:	mov	r8, sl
   1a298:	str	r3, [sp, #44]	; 0x2c
   1a29c:	add	r3, r0, #1
   1a2a0:	str	r2, [sp, #36]	; 0x24
   1a2a4:	str	r3, [sp, #80]	; 0x50
   1a2a8:	str	fp, [sp, #16]
   1a2ac:	ldrb	r3, [r8, #-12]
   1a2b0:	sub	r4, r8, #36	; 0x24
   1a2b4:	cmp	r3, #0
   1a2b8:	bne	1a870 <__assert_fail@plt+0x92dc>
   1a2bc:	mov	r2, r4
   1a2c0:	ldr	r1, [sp, #56]	; 0x38
   1a2c4:	ldr	r0, [sp, #16]
   1a2c8:	bl	19e64 <__assert_fail@plt+0x88d0>
   1a2cc:	mov	r3, #1
   1a2d0:	str	r3, [sp, #24]
   1a2d4:	mov	r9, r0
   1a2d8:	ldr	r3, [sp, #28]
   1a2dc:	ldr	r2, [sp, #32]
   1a2e0:	add	r3, r9, r3
   1a2e4:	cmp	r2, r3
   1a2e8:	bcc	1a3f8 <__assert_fail@plt+0x8e64>
   1a2ec:	ldr	r2, [sp, #16]
   1a2f0:	ldr	fp, [sp, #28]
   1a2f4:	add	r3, r2, r3
   1a2f8:	str	r3, [sp, #20]
   1a2fc:	mov	sl, #0
   1a300:	sub	r3, r3, r2
   1a304:	ldrb	r2, [r8, #-12]
   1a308:	str	r3, [sp, #28]
   1a30c:	ldr	r5, [r8, #-36]	; 0xffffffdc
   1a310:	cmp	r2, #0
   1a314:	beq	1a820 <__assert_fail@plt+0x928c>
   1a318:	ldr	r3, [sp, #24]
   1a31c:	cmp	r3, #100	; 0x64
   1a320:	movhi	r4, #5
   1a324:	bhi	1a334 <__assert_fail@plt+0x8da0>
   1a328:	cmp	r3, #10
   1a32c:	movhi	r4, #4
   1a330:	movls	r4, #3
   1a334:	mov	r0, r5
   1a338:	bl	11420 <strlen@plt>
   1a33c:	ldr	ip, [sp, #40]	; 0x28
   1a340:	ldr	r3, [pc, #1584]	; 1a978 <__assert_fail@plt+0x93e4>
   1a344:	stm	sp, {r5, sl}
   1a348:	str	r3, [sp, #12]
   1a34c:	ldr	r2, [sp, #36]	; 0x24
   1a350:	ldr	r1, [pc, #1572]	; 1a97c <__assert_fail@plt+0x93e8>
   1a354:	add	r0, r0, r4
   1a358:	sub	r0, ip, r0
   1a35c:	str	r0, [sp, #8]
   1a360:	mov	r0, #1
   1a364:	bl	1148c <__printf_chk@plt>
   1a368:	ldr	r3, [r8, #-24]	; 0xffffffe8
   1a36c:	cmp	r3, #12
   1a370:	ldrls	pc, [pc, r3, lsl #2]
   1a374:	b	1a3c4 <__assert_fail@plt+0x8e30>
   1a378:	andeq	sl, r1, ip, lsr #7
   1a37c:	andeq	sl, r1, ip, lsr #7
   1a380:	andeq	sl, r1, r8, ror #12
   1a384:	andeq	sl, r1, r8, lsl #12
   1a388:	andeq	sl, r1, r4, lsr #12
   1a38c:	andeq	sl, r1, r4, lsl #10
   1a390:	andeq	sl, r1, r4, lsl #10
   1a394:	andeq	sl, r1, ip, asr r4
   1a398:	andeq	sl, r1, ip, lsr #7
   1a39c:	andeq	sl, r1, r0, ror #15
   1a3a0:	andeq	sl, r1, r8, lsl r7
   1a3a4:	andeq	sl, r1, r4, lsl #13
   1a3a8:	ldrdeq	sl, [r1], -r0
   1a3ac:	ldr	r0, [sp, #16]
   1a3b0:	mov	r2, r9
   1a3b4:	mov	r1, fp
   1a3b8:	bl	1a17c <__assert_fail@plt+0x8be8>
   1a3bc:	mov	r0, #10
   1a3c0:	bl	11474 <putchar@plt>
   1a3c4:	ldr	r3, [sp, #24]
   1a3c8:	add	sl, sl, #1
   1a3cc:	cmp	r3, sl
   1a3d0:	bls	1a4ac <__assert_fail@plt+0x8f18>
   1a3d4:	ldr	r3, [sp, #20]
   1a3d8:	ldr	r2, [sp, #16]
   1a3dc:	add	r3, r3, r9
   1a3e0:	str	r3, [sp, #20]
   1a3e4:	sub	r3, r3, r2
   1a3e8:	ldr	r2, [sp, #32]
   1a3ec:	add	fp, fp, r9
   1a3f0:	cmp	r2, r3
   1a3f4:	bcs	1a304 <__assert_fail@plt+0x8d70>
   1a3f8:	ldr	r3, [sp, #36]	; 0x24
   1a3fc:	ldr	r1, [pc, #1404]	; 1a980 <__assert_fail@plt+0x93ec>
   1a400:	sub	r2, r3, #2
   1a404:	mov	r0, #1
   1a408:	ldr	r3, [pc, #1384]	; 1a978 <__assert_fail@plt+0x93e4>
   1a40c:	ldr	fp, [sp, #16]
   1a410:	bl	1148c <__printf_chk@plt>
   1a414:	ldrd	r2, [sp, #28]
   1a418:	cmp	r3, r2
   1a41c:	bls	1a44c <__assert_fail@plt+0x8eb8>
   1a420:	sub	r4, r2, #1
   1a424:	sub	r5, fp, #1
   1a428:	ldr	r6, [pc, #1364]	; 1a984 <__assert_fail@plt+0x93f0>
   1a42c:	add	r4, fp, r4
   1a430:	add	r5, r5, r3
   1a434:	ldrb	r2, [r4, #1]!
   1a438:	mov	r1, r6
   1a43c:	mov	r0, #1
   1a440:	bl	1148c <__printf_chk@plt>
   1a444:	cmp	r5, r4
   1a448:	bne	1a434 <__assert_fail@plt+0x8ea0>
   1a44c:	mov	r0, #10
   1a450:	add	sp, sp, #92	; 0x5c
   1a454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a458:	b	11474 <putchar@plt>
   1a45c:	ldr	r4, [sp, #16]
   1a460:	mov	r2, r9
   1a464:	mov	r0, r4
   1a468:	mov	r1, fp
   1a46c:	bl	1a17c <__assert_fail@plt+0x8be8>
   1a470:	ldrb	r1, [r4, fp]
   1a474:	ldr	r0, [sp, #60]	; 0x3c
   1a478:	bl	1b724 <__assert_fail@plt+0xa190>
   1a47c:	subs	r4, r0, #0
   1a480:	beq	1a618 <__assert_fail@plt+0x9084>
   1a484:	mov	r2, r4
   1a488:	ldr	r1, [pc, #1272]	; 1a988 <__assert_fail@plt+0x93f4>
   1a48c:	mov	r0, #1
   1a490:	bl	1148c <__printf_chk@plt>
   1a494:	mov	r0, r4
   1a498:	bl	112a0 <free@plt>
   1a49c:	ldr	r3, [sp, #24]
   1a4a0:	add	sl, sl, #1
   1a4a4:	cmp	r3, sl
   1a4a8:	bhi	1a3d4 <__assert_fail@plt+0x8e40>
   1a4ac:	ldr	r3, [r8], #36	; 0x24
   1a4b0:	cmp	r3, #0
   1a4b4:	bne	1a2ac <__assert_fail@plt+0x8d18>
   1a4b8:	ldr	fp, [sp, #16]
   1a4bc:	ldrd	r2, [sp, #28]
   1a4c0:	cmp	r3, r2
   1a4c4:	bhi	1a8f0 <__assert_fail@plt+0x935c>
   1a4c8:	add	sp, sp, #92	; 0x5c
   1a4cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4d0:	ldr	r4, [sp, #16]
   1a4d4:	mov	r2, r9
   1a4d8:	mov	r1, fp
   1a4dc:	mov	r0, r4
   1a4e0:	bl	1a17c <__assert_fail@plt+0x8be8>
   1a4e4:	mov	r2, r9
   1a4e8:	mov	r1, fp
   1a4ec:	mov	r0, r4
   1a4f0:	ldr	r4, [r8, #-20]	; 0xffffffec
   1a4f4:	bl	19d58 <__assert_fail@plt+0x87c4>
   1a4f8:	ldr	r2, [sp, #80]	; 0x50
   1a4fc:	blx	r4
   1a500:	b	1a3c4 <__assert_fail@plt+0x8e30>
   1a504:	ldr	r4, [sp, #16]
   1a508:	mov	r2, r9
   1a50c:	mov	r1, fp
   1a510:	mov	r0, r4
   1a514:	bl	1a134 <__assert_fail@plt+0x8ba0>
   1a518:	mov	r0, #10
   1a51c:	bl	11474 <putchar@plt>
   1a520:	mov	r2, r9
   1a524:	mov	r1, fp
   1a528:	mov	r0, r4
   1a52c:	bl	19d58 <__assert_fail@plt+0x87c4>
   1a530:	ldr	r7, [r8, #-24]	; 0xffffffe8
   1a534:	ldr	r5, [r8, #-20]	; 0xffffffec
   1a538:	sub	r3, r7, #5
   1a53c:	cmp	r3, #1
   1a540:	mov	r6, r1
   1a544:	bhi	1a964 <__assert_fail@plt+0x93d0>
   1a548:	ldr	r3, [r5]
   1a54c:	cmp	r3, #0
   1a550:	strne	r8, [sp, #72]	; 0x48
   1a554:	movne	r4, #0
   1a558:	movne	r8, r0
   1a55c:	bne	1a594 <__assert_fail@plt+0x9000>
   1a560:	b	1a3c4 <__assert_fail@plt+0x8e30>
   1a564:	lsl	r1, r4, #1
   1a568:	rsb	r0, r1, #32
   1a56c:	lsr	r2, r8, r1
   1a570:	sub	r1, r1, #32
   1a574:	orr	r2, r2, r6, lsl r0
   1a578:	orr	r2, r2, r6, lsr r1
   1a57c:	ands	r2, r2, #3
   1a580:	bne	1a844 <__assert_fail@plt+0x92b0>
   1a584:	ldr	r3, [r5, #4]!
   1a588:	add	r4, r4, #1
   1a58c:	cmp	r3, #0
   1a590:	beq	1a600 <__assert_fail@plt+0x906c>
   1a594:	ldrb	r2, [r3]
   1a598:	cmp	r2, #0
   1a59c:	beq	1a584 <__assert_fail@plt+0x8ff0>
   1a5a0:	cmp	r7, #5
   1a5a4:	bne	1a564 <__assert_fail@plt+0x8fd0>
   1a5a8:	rsb	r1, r4, #32
   1a5ac:	lsr	r2, r8, r4
   1a5b0:	orr	r2, r2, r6, lsl r1
   1a5b4:	sub	r1, r4, #32
   1a5b8:	orr	r2, r2, r6, lsr r1
   1a5bc:	and	r2, r2, #1
   1a5c0:	str	r2, [sp, #48]	; 0x30
   1a5c4:	mov	r2, #0
   1a5c8:	str	r2, [sp, #52]	; 0x34
   1a5cc:	ldrd	r0, [sp, #48]	; 0x30
   1a5d0:	orrs	r2, r0, r1
   1a5d4:	beq	1a584 <__assert_fail@plt+0x8ff0>
   1a5d8:	str	r3, [sp]
   1a5dc:	ldr	r2, [sp, #44]	; 0x2c
   1a5e0:	ldr	r3, [pc, #912]	; 1a978 <__assert_fail@plt+0x93e4>
   1a5e4:	ldr	r1, [pc, #928]	; 1a98c <__assert_fail@plt+0x93f8>
   1a5e8:	mov	r0, #1
   1a5ec:	bl	1148c <__printf_chk@plt>
   1a5f0:	ldr	r3, [r5, #4]!
   1a5f4:	add	r4, r4, #1
   1a5f8:	cmp	r3, #0
   1a5fc:	bne	1a594 <__assert_fail@plt+0x9000>
   1a600:	ldr	r8, [sp, #72]	; 0x48
   1a604:	b	1a3c4 <__assert_fail@plt+0x8e30>
   1a608:	mov	r2, r9
   1a60c:	mov	r1, fp
   1a610:	ldr	r0, [sp, #16]
   1a614:	bl	1a134 <__assert_fail@plt+0x8ba0>
   1a618:	mov	r0, #10
   1a61c:	bl	11474 <putchar@plt>
   1a620:	b	1a3c4 <__assert_fail@plt+0x8e30>
   1a624:	ldr	r4, [sp, #20]
   1a628:	ldr	r1, [pc, #864]	; 1a990 <__assert_fail@plt+0x93fc>
   1a62c:	mov	r0, #1
   1a630:	ldrb	r2, [r4, #-1]
   1a634:	bl	1148c <__printf_chk@plt>
   1a638:	cmp	r9, #1
   1a63c:	bls	1a618 <__assert_fail@plt+0x9084>
   1a640:	ldr	r5, [pc, #844]	; 1a994 <__assert_fail@plt+0x9400>
   1a644:	sub	r6, r4, #1
   1a648:	sub	r4, r4, r9
   1a64c:	ldrb	r2, [r6, #-1]!
   1a650:	mov	r1, r5
   1a654:	mov	r0, #1
   1a658:	bl	1148c <__printf_chk@plt>
   1a65c:	cmp	r6, r4
   1a660:	bne	1a64c <__assert_fail@plt+0x90b8>
   1a664:	b	1a618 <__assert_fail@plt+0x9084>
   1a668:	ldr	r0, [sp, #16]
   1a66c:	mov	r2, r9
   1a670:	mov	r1, fp
   1a674:	bl	1a17c <__assert_fail@plt+0x8be8>
   1a678:	ldr	r0, [r8, #-20]	; 0xffffffec
   1a67c:	bl	11378 <puts@plt>
   1a680:	b	1a3c4 <__assert_fail@plt+0x8e30>
   1a684:	ldr	r6, [sp, #16]
   1a688:	mov	r2, r9
   1a68c:	mov	r1, fp
   1a690:	mov	r0, r6
   1a694:	bl	19d58 <__assert_fail@plt+0x87c4>
   1a698:	mov	r2, r9
   1a69c:	mov	r4, r0
   1a6a0:	mov	r5, r1
   1a6a4:	mov	r0, r6
   1a6a8:	mov	r1, fp
   1a6ac:	bl	1a17c <__assert_fail@plt+0x8be8>
   1a6b0:	ldr	r3, [r8, #-20]	; 0xffffffec
   1a6b4:	ldr	r2, [r3]
   1a6b8:	cmp	r2, #0
   1a6bc:	beq	1a618 <__assert_fail@plt+0x9084>
   1a6c0:	ldr	r6, [pc, #720]	; 1a998 <__assert_fail@plt+0x9404>
   1a6c4:	mov	r0, #0
   1a6c8:	mov	r1, #0
   1a6cc:	mov	r7, #0
   1a6d0:	b	1a6fc <__assert_fail@plt+0x9168>
   1a6d4:	mov	r1, #0
   1a6d8:	add	r7, r7, #1
   1a6dc:	cmp	r5, r1
   1a6e0:	cmpeq	r4, r7
   1a6e4:	mov	r0, r7
   1a6e8:	bcc	1a618 <__assert_fail@plt+0x9084>
   1a6ec:	ldr	r3, [r8, #-20]	; 0xffffffec
   1a6f0:	ldr	r2, [r3, r7, lsl #2]
   1a6f4:	cmp	r2, #0
   1a6f8:	beq	1a618 <__assert_fail@plt+0x9084>
   1a6fc:	cmp	r5, r1
   1a700:	cmpeq	r4, r0
   1a704:	bne	1a6d4 <__assert_fail@plt+0x9140>
   1a708:	mov	r1, r6
   1a70c:	mov	r0, #1
   1a710:	bl	1148c <__printf_chk@plt>
   1a714:	b	1a6d4 <__assert_fail@plt+0x9140>
   1a718:	ldr	r4, [sp, #16]
   1a71c:	mov	r2, r9
   1a720:	mov	r1, fp
   1a724:	mov	r0, r4
   1a728:	bl	19d58 <__assert_fail@plt+0x87c4>
   1a72c:	mov	r2, r9
   1a730:	mov	r6, r0
   1a734:	mov	r5, r1
   1a738:	mov	r0, r4
   1a73c:	mov	r1, fp
   1a740:	bl	1a134 <__assert_fail@plt+0x8ba0>
   1a744:	mov	r0, #10
   1a748:	bl	11474 <putchar@plt>
   1a74c:	ldr	r0, [r8, #-16]
   1a750:	cmp	r0, #0
   1a754:	beq	1a3c4 <__assert_fail@plt+0x8e30>
   1a758:	mov	r4, #0
   1a75c:	str	fp, [sp, #72]	; 0x48
   1a760:	str	r9, [sp, #76]	; 0x4c
   1a764:	mov	fp, r8
   1a768:	ldrd	r8, [sp, #64]	; 0x40
   1a76c:	mov	r7, r4
   1a770:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a774:	ldr	r1, [r3, r4, lsl #2]
   1a778:	cmp	r1, #0
   1a77c:	beq	1a7c0 <__assert_fail@plt+0x922c>
   1a780:	rsb	r2, r4, #32
   1a784:	lsr	r3, r6, r4
   1a788:	orr	r3, r3, r5, lsl r2
   1a78c:	sub	r2, r4, #32
   1a790:	mov	r9, r7
   1a794:	orr	r3, r3, r5, lsr r2
   1a798:	and	r8, r3, #1
   1a79c:	orrs	r3, r8, r9
   1a7a0:	beq	1a7c0 <__assert_fail@plt+0x922c>
   1a7a4:	str	r1, [sp]
   1a7a8:	ldr	r3, [pc, #456]	; 1a978 <__assert_fail@plt+0x93e4>
   1a7ac:	ldr	r2, [sp, #44]	; 0x2c
   1a7b0:	ldr	r1, [pc, #484]	; 1a99c <__assert_fail@plt+0x9408>
   1a7b4:	mov	r0, #1
   1a7b8:	bl	1148c <__printf_chk@plt>
   1a7bc:	ldr	r0, [fp, #-16]
   1a7c0:	add	r4, r4, #1
   1a7c4:	cmp	r4, r0
   1a7c8:	bcc	1a770 <__assert_fail@plt+0x91dc>
   1a7cc:	strd	r8, [sp, #64]	; 0x40
   1a7d0:	mov	r8, fp
   1a7d4:	ldr	r9, [sp, #76]	; 0x4c
   1a7d8:	ldr	fp, [sp, #72]	; 0x48
   1a7dc:	b	1a3c4 <__assert_fail@plt+0x8e30>
   1a7e0:	ldr	r4, [sp, #16]
   1a7e4:	mov	r2, r9
   1a7e8:	mov	r1, fp
   1a7ec:	mov	r0, r4
   1a7f0:	bl	1a17c <__assert_fail@plt+0x8be8>
   1a7f4:	mov	r2, r9
   1a7f8:	mov	r1, fp
   1a7fc:	mov	r0, r4
   1a800:	bl	19d58 <__assert_fail@plt+0x87c4>
   1a804:	uxth	r0, r0
   1a808:	bl	1ad88 <__assert_fail@plt+0x97f4>
   1a80c:	ldr	r1, [pc, #372]	; 1a988 <__assert_fail@plt+0x93f4>
   1a810:	mov	r2, r0
   1a814:	mov	r0, #1
   1a818:	bl	1148c <__printf_chk@plt>
   1a81c:	b	1a3c4 <__assert_fail@plt+0x8e30>
   1a820:	ldr	r3, [sp, #40]	; 0x28
   1a824:	str	r5, [sp, #4]
   1a828:	str	r3, [sp]
   1a82c:	ldr	r2, [sp, #36]	; 0x24
   1a830:	ldr	r3, [pc, #320]	; 1a978 <__assert_fail@plt+0x93e4>
   1a834:	ldr	r1, [pc, #356]	; 1a9a0 <__assert_fail@plt+0x940c>
   1a838:	mov	r0, #1
   1a83c:	bl	1148c <__printf_chk@plt>
   1a840:	b	1a368 <__assert_fail@plt+0x8dd4>
   1a844:	ldr	r1, [pc, #344]	; 1a9a4 <__assert_fail@plt+0x9410>
   1a848:	str	r3, [sp]
   1a84c:	add	r2, r1, r2, lsl #2
   1a850:	ldr	r3, [pc, #288]	; 1a978 <__assert_fail@plt+0x93e4>
   1a854:	ldr	r2, [r2, #16]
   1a858:	ldr	r1, [pc, #328]	; 1a9a8 <__assert_fail@plt+0x9414>
   1a85c:	str	r2, [sp, #4]
   1a860:	mov	r0, #1
   1a864:	ldr	r2, [sp, #44]	; 0x2c
   1a868:	bl	1148c <__printf_chk@plt>
   1a86c:	b	1a584 <__assert_fail@plt+0x8ff0>
   1a870:	ldr	r7, [sp, #56]	; 0x38
   1a874:	ldr	r6, [sp, #16]
   1a878:	mov	r3, r4
   1a87c:	mov	r2, r7
   1a880:	ldr	r1, [sp, #32]
   1a884:	mov	r0, r6
   1a888:	bl	19f20 <__assert_fail@plt+0x898c>
   1a88c:	mov	r2, r4
   1a890:	mov	r1, r7
   1a894:	mov	r5, r0
   1a898:	str	r0, [sp, #24]
   1a89c:	mov	r0, r6
   1a8a0:	bl	19e64 <__assert_fail@plt+0x88d0>
   1a8a4:	cmp	r5, #0
   1a8a8:	mov	r9, r0
   1a8ac:	bne	1a2d8 <__assert_fail@plt+0x8d44>
   1a8b0:	ldr	r3, [r8], #36	; 0x24
   1a8b4:	cmp	r3, #0
   1a8b8:	bne	1a2ac <__assert_fail@plt+0x8d18>
   1a8bc:	b	1a4b8 <__assert_fail@plt+0x8f24>
   1a8c0:	ldr	r2, [r1, #4]
   1a8c4:	mov	r0, fp
   1a8c8:	mov	r1, #0
   1a8cc:	bl	19d58 <__assert_fail@plt+0x87c4>
   1a8d0:	ldr	r3, [sp, #56]	; 0x38
   1a8d4:	ldr	r3, [r3]
   1a8d8:	cmp	r3, #0
   1a8dc:	str	r0, [sp, #32]
   1a8e0:	bne	1a1f4 <__assert_fail@plt+0x8c60>
   1a8e4:	mov	r3, #0
   1a8e8:	str	r3, [sp, #28]
   1a8ec:	b	1a4bc <__assert_fail@plt+0x8f28>
   1a8f0:	ldr	r3, [sp, #84]	; 0x54
   1a8f4:	ldr	r7, [sp, #32]
   1a8f8:	sub	r4, r3, #-2147483647	; 0x80000001
   1a8fc:	sub	r3, r7, r2
   1a900:	lsl	r4, r4, #1
   1a904:	mov	r5, r2
   1a908:	str	r3, [sp]
   1a90c:	mov	r2, r4
   1a910:	ldr	r3, [pc, #96]	; 1a978 <__assert_fail@plt+0x93e4>
   1a914:	ldr	r1, [pc, #144]	; 1a9ac <__assert_fail@plt+0x9418>
   1a918:	mov	r0, #1
   1a91c:	bl	1148c <__printf_chk@plt>
   1a920:	add	r2, r4, #2
   1a924:	ldr	r3, [pc, #76]	; 1a978 <__assert_fail@plt+0x93e4>
   1a928:	ldr	r1, [pc, #128]	; 1a9b0 <__assert_fail@plt+0x941c>
   1a92c:	mov	r0, #1
   1a930:	bl	1148c <__printf_chk@plt>
   1a934:	sub	r4, r5, #1
   1a938:	ldr	r6, [pc, #68]	; 1a984 <__assert_fail@plt+0x93f0>
   1a93c:	sub	r5, fp, #1
   1a940:	add	r4, fp, r4
   1a944:	add	r5, r5, r7
   1a948:	ldrb	r2, [r4, #1]!
   1a94c:	mov	r1, r6
   1a950:	mov	r0, #1
   1a954:	bl	1148c <__printf_chk@plt>
   1a958:	cmp	r5, r4
   1a95c:	bne	1a948 <__assert_fail@plt+0x93b4>
   1a960:	b	1a44c <__assert_fail@plt+0x8eb8>
   1a964:	ldr	r3, [pc, #56]	; 1a9a4 <__assert_fail@plt+0x9410>
   1a968:	mov	r2, #50	; 0x32
   1a96c:	ldr	r1, [pc, #64]	; 1a9b4 <__assert_fail@plt+0x9420>
   1a970:	ldr	r0, [pc, #64]	; 1a9b8 <__assert_fail@plt+0x9424>
   1a974:	bl	11594 <__assert_fail@plt>
   1a978:	ldrdeq	r2, [r2], -r8
   1a97c:	andeq	r6, r2, r8, lsr #17
   1a980:	andeq	r6, r2, r8, ror #16
   1a984:	andeq	r6, r2, r0, lsr #17
   1a988:	andeq	sp, r1, r4, lsr #26
   1a98c:	andeq	r6, r2, r0, lsl r9
   1a990:	andeq	r6, r2, r0, asr #17
   1a994:	andeq	sp, r1, r0, lsr r0
   1a998:	ldrdeq	r1, [r2], -ip
   1a99c:	andeq	r5, r2, r0, lsr sp
   1a9a0:			; <UNDEFINED> instruction: 0x000268b8
   1a9a4:	andeq	r6, r2, ip, lsl #15
   1a9a8:	andeq	r6, r2, r0, lsr #18
   1a9ac:	andeq	r6, r2, r4, lsr r9
   1a9b0:	andeq	r6, r2, r8, ror #18
   1a9b4:	andeq	r6, r2, r8, asr #17
   1a9b8:	ldrdeq	r6, [r2], -r4
   1a9bc:	push	{lr}		; (str lr, [sp, #-4]!)
   1a9c0:	mov	r2, #28
   1a9c4:	mov	lr, r1
   1a9c8:	mov	ip, #268435456	; 0x10000000
   1a9cc:	mov	r3, #-2147483648	; 0x80000000
   1a9d0:	tst	lr, r3
   1a9d4:	eorne	lr, lr, ip
   1a9d8:	subs	r2, r2, #1
   1a9dc:	lsr	r3, r3, #1
   1a9e0:	lsr	ip, ip, #1
   1a9e4:	bne	1a9d0 <__assert_fail@plt+0x943c>
   1a9e8:	lsl	lr, lr, #23
   1a9ec:	lsr	lr, lr, #23
   1a9f0:	ldr	r0, [r0, lr, lsl #2]
   1a9f4:	cmp	r0, #0
   1a9f8:	popeq	{pc}		; (ldreq pc, [sp], #4)
   1a9fc:	ldr	r3, [r0, #4]
   1aa00:	cmp	r1, r3
   1aa04:	beq	1aa20 <__assert_fail@plt+0x948c>
   1aa08:	ldr	r0, [r0]
   1aa0c:	cmp	r0, #0
   1aa10:	popeq	{pc}		; (ldreq pc, [sp], #4)
   1aa14:	ldr	r3, [r0, #4]
   1aa18:	cmp	r3, r1
   1aa1c:	bne	1aa08 <__assert_fail@plt+0x9474>
   1aa20:	ldr	r0, [r0, #8]
   1aa24:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa28:	push	{r4, lr}
   1aa2c:	mov	r2, #28
   1aa30:	ldr	r4, [r1, #4]
   1aa34:	mov	ip, #268435456	; 0x10000000
   1aa38:	mov	lr, r4
   1aa3c:	mov	r3, #-2147483648	; 0x80000000
   1aa40:	tst	lr, r3
   1aa44:	eorne	lr, lr, ip
   1aa48:	subs	r2, r2, #1
   1aa4c:	lsr	r3, r3, #1
   1aa50:	lsr	ip, ip, #1
   1aa54:	bne	1aa40 <__assert_fail@plt+0x94ac>
   1aa58:	lsl	lr, lr, #23
   1aa5c:	lsr	lr, lr, #23
   1aa60:	ldr	ip, [r0, lr, lsl #2]
   1aa64:	cmp	ip, #0
   1aa68:	beq	1aa98 <__assert_fail@plt+0x9504>
   1aa6c:	ldr	r3, [ip, #4]
   1aa70:	cmp	r4, r3
   1aa74:	beq	1aaac <__assert_fail@plt+0x9518>
   1aa78:	mov	r3, ip
   1aa7c:	b	1aa8c <__assert_fail@plt+0x94f8>
   1aa80:	ldr	r2, [r3, #4]
   1aa84:	cmp	r4, r2
   1aa88:	beq	1aaac <__assert_fail@plt+0x9518>
   1aa8c:	ldr	r3, [r3]
   1aa90:	cmp	r3, #0
   1aa94:	bne	1aa80 <__assert_fail@plt+0x94ec>
   1aa98:	mov	r3, #0
   1aa9c:	str	ip, [r1]
   1aaa0:	str	r1, [r0, lr, lsl #2]
   1aaa4:	mov	r0, r3
   1aaa8:	pop	{r4, pc}
   1aaac:	mvn	r3, #0
   1aab0:	mov	r0, r3
   1aab4:	pop	{r4, pc}
   1aab8:	ldr	r3, [pc, #88]	; 1ab18 <__assert_fail@plt+0x9584>
   1aabc:	push	{r4, r5, r6, lr}
   1aac0:	mov	r2, #0
   1aac4:	mov	r5, r1
   1aac8:	mov	r1, r0
   1aacc:	ldr	r0, [r3]
   1aad0:	bl	11540 <udev_hwdb_get_properties_list_entry@plt>
   1aad4:	subs	r4, r0, #0
   1aad8:	bne	1aaec <__assert_fail@plt+0x9558>
   1aadc:	b	1ab10 <__assert_fail@plt+0x957c>
   1aae0:	bl	1151c <udev_list_entry_get_next@plt>
   1aae4:	subs	r4, r0, #0
   1aae8:	beq	1ab10 <__assert_fail@plt+0x957c>
   1aaec:	mov	r0, r4
   1aaf0:	bl	114a4 <udev_list_entry_get_name@plt>
   1aaf4:	mov	r1, r5
   1aaf8:	bl	1127c <strcmp@plt>
   1aafc:	cmp	r0, #0
   1ab00:	mov	r0, r4
   1ab04:	bne	1aae0 <__assert_fail@plt+0x954c>
   1ab08:	pop	{r4, r5, r6, lr}
   1ab0c:	b	1154c <udev_list_entry_get_value@plt>
   1ab10:	mov	r0, #0
   1ab14:	pop	{r4, r5, r6, pc}
   1ab18:	andeq	r1, r4, r4, asr r9
   1ab1c:	mov	r1, r0
   1ab20:	ldr	r0, [pc]	; 1ab28 <__assert_fail@plt+0x9594>
   1ab24:	b	1a9bc <__assert_fail@plt+0x9428>
   1ab28:	andeq	r1, r4, r8, asr r9
   1ab2c:	mov	r1, r0
   1ab30:	ldr	r0, [pc]	; 1ab38 <__assert_fail@plt+0x95a4>
   1ab34:	b	1a9bc <__assert_fail@plt+0x9428>
   1ab38:	andeq	r2, r4, r8, asr r1
   1ab3c:	mov	r1, r0
   1ab40:	ldr	r0, [pc]	; 1ab48 <__assert_fail@plt+0x95b4>
   1ab44:	b	1a9bc <__assert_fail@plt+0x9428>
   1ab48:	andeq	r2, r4, r8, asr r9
   1ab4c:	mov	r1, r0
   1ab50:	ldr	r0, [pc]	; 1ab58 <__assert_fail@plt+0x95c4>
   1ab54:	b	1a9bc <__assert_fail@plt+0x9428>
   1ab58:	andeq	r3, r4, r8, asr r1
   1ab5c:	mov	r1, r0
   1ab60:	ldr	r0, [pc]	; 1ab68 <__assert_fail@plt+0x95d4>
   1ab64:	b	1a9bc <__assert_fail@plt+0x9428>
   1ab68:	andeq	r3, r4, r8, asr r9
   1ab6c:	mov	r1, r0
   1ab70:	ldr	r0, [pc]	; 1ab78 <__assert_fail@plt+0x95e4>
   1ab74:	b	1a9bc <__assert_fail@plt+0x9428>
   1ab78:	andeq	r4, r4, r8, asr r1
   1ab7c:	mov	r1, r0
   1ab80:	ldr	r0, [pc]	; 1ab88 <__assert_fail@plt+0x95f4>
   1ab84:	b	1a9bc <__assert_fail@plt+0x9428>
   1ab88:	andeq	r4, r4, r8, asr r9
   1ab8c:	mov	r1, r0
   1ab90:	ldr	r0, [pc]	; 1ab98 <__assert_fail@plt+0x9604>
   1ab94:	b	1a9bc <__assert_fail@plt+0x9428>
   1ab98:	andeq	r5, r4, r8, asr r1
   1ab9c:	push	{r4, lr}
   1aba0:	sub	sp, sp, #80	; 0x50
   1aba4:	ldr	r4, [pc, #68]	; 1abf0 <__assert_fail@plt+0x965c>
   1aba8:	ldr	r3, [pc, #68]	; 1abf4 <__assert_fail@plt+0x9660>
   1abac:	mov	r2, #64	; 0x40
   1abb0:	ldr	ip, [r4]
   1abb4:	str	r0, [sp]
   1abb8:	mov	r1, #1
   1abbc:	add	r0, sp, #12
   1abc0:	str	ip, [sp, #76]	; 0x4c
   1abc4:	bl	1145c <__sprintf_chk@plt>
   1abc8:	add	r0, sp, #12
   1abcc:	ldr	r1, [pc, #36]	; 1abf8 <__assert_fail@plt+0x9664>
   1abd0:	bl	1aab8 <__assert_fail@plt+0x9524>
   1abd4:	ldr	r2, [sp, #76]	; 0x4c
   1abd8:	ldr	r3, [r4]
   1abdc:	cmp	r2, r3
   1abe0:	bne	1abec <__assert_fail@plt+0x9658>
   1abe4:	add	sp, sp, #80	; 0x50
   1abe8:	pop	{r4, pc}
   1abec:	bl	112d0 <__stack_chk_fail@plt>
   1abf0:	strdeq	ip, [r3], -r8
   1abf4:	muleq	r2, ip, r9
   1abf8:	andeq	r6, r2, r8, lsr #19
   1abfc:	push	{r4, lr}
   1ac00:	sub	sp, sp, #80	; 0x50
   1ac04:	ldr	r4, [pc, #72]	; 1ac54 <__assert_fail@plt+0x96c0>
   1ac08:	ldr	r3, [pc, #72]	; 1ac58 <__assert_fail@plt+0x96c4>
   1ac0c:	mov	r2, #64	; 0x40
   1ac10:	ldr	ip, [r4]
   1ac14:	str	r1, [sp, #4]
   1ac18:	str	r0, [sp]
   1ac1c:	mov	r1, #1
   1ac20:	add	r0, sp, #12
   1ac24:	str	ip, [sp, #76]	; 0x4c
   1ac28:	bl	1145c <__sprintf_chk@plt>
   1ac2c:	add	r0, sp, #12
   1ac30:	ldr	r1, [pc, #36]	; 1ac5c <__assert_fail@plt+0x96c8>
   1ac34:	bl	1aab8 <__assert_fail@plt+0x9524>
   1ac38:	ldr	r2, [sp, #76]	; 0x4c
   1ac3c:	ldr	r3, [r4]
   1ac40:	cmp	r2, r3
   1ac44:	bne	1ac50 <__assert_fail@plt+0x96bc>
   1ac48:	add	sp, sp, #80	; 0x50
   1ac4c:	pop	{r4, pc}
   1ac50:	bl	112d0 <__stack_chk_fail@plt>
   1ac54:	strdeq	ip, [r3], -r8
   1ac58:	andeq	r6, r2, r0, asr #19
   1ac5c:	ldrdeq	r6, [r2], -r0
   1ac60:	push	{r4, lr}
   1ac64:	sub	sp, sp, #80	; 0x50
   1ac68:	ldr	r4, [pc, #68]	; 1acb4 <__assert_fail@plt+0x9720>
   1ac6c:	ldr	r3, [pc, #68]	; 1acb8 <__assert_fail@plt+0x9724>
   1ac70:	mov	r2, #64	; 0x40
   1ac74:	ldr	ip, [r4]
   1ac78:	str	r0, [sp]
   1ac7c:	mov	r1, #1
   1ac80:	add	r0, sp, #12
   1ac84:	str	ip, [sp, #76]	; 0x4c
   1ac88:	bl	1145c <__sprintf_chk@plt>
   1ac8c:	add	r0, sp, #12
   1ac90:	ldr	r1, [pc, #36]	; 1acbc <__assert_fail@plt+0x9728>
   1ac94:	bl	1aab8 <__assert_fail@plt+0x9524>
   1ac98:	ldr	r2, [sp, #76]	; 0x4c
   1ac9c:	ldr	r3, [r4]
   1aca0:	cmp	r2, r3
   1aca4:	bne	1acb0 <__assert_fail@plt+0x971c>
   1aca8:	add	sp, sp, #80	; 0x50
   1acac:	pop	{r4, pc}
   1acb0:	bl	112d0 <__stack_chk_fail@plt>
   1acb4:	strdeq	ip, [r3], -r8
   1acb8:	andeq	r6, r2, r8, ror #19
   1acbc:	strdeq	r6, [r2], -ip
   1acc0:	push	{r4, lr}
   1acc4:	sub	sp, sp, #80	; 0x50
   1acc8:	ldr	r4, [pc, #72]	; 1ad18 <__assert_fail@plt+0x9784>
   1accc:	ldr	r3, [pc, #72]	; 1ad1c <__assert_fail@plt+0x9788>
   1acd0:	mov	r2, #64	; 0x40
   1acd4:	ldr	ip, [r4]
   1acd8:	str	r1, [sp, #4]
   1acdc:	str	r0, [sp]
   1ace0:	mov	r1, #1
   1ace4:	add	r0, sp, #12
   1ace8:	str	ip, [sp, #76]	; 0x4c
   1acec:	bl	1145c <__sprintf_chk@plt>
   1acf0:	add	r0, sp, #12
   1acf4:	ldr	r1, [pc, #36]	; 1ad20 <__assert_fail@plt+0x978c>
   1acf8:	bl	1aab8 <__assert_fail@plt+0x9524>
   1acfc:	ldr	r2, [sp, #76]	; 0x4c
   1ad00:	ldr	r3, [r4]
   1ad04:	cmp	r2, r3
   1ad08:	bne	1ad14 <__assert_fail@plt+0x9780>
   1ad0c:	add	sp, sp, #80	; 0x50
   1ad10:	pop	{r4, pc}
   1ad14:	bl	112d0 <__stack_chk_fail@plt>
   1ad18:	strdeq	ip, [r3], -r8
   1ad1c:	andeq	r6, r2, r8, lsl sl
   1ad20:	andeq	r6, r2, r4, lsr sl
   1ad24:	push	{r4, lr}
   1ad28:	sub	sp, sp, #88	; 0x58
   1ad2c:	ldr	r4, [pc, #72]	; 1ad7c <__assert_fail@plt+0x97e8>
   1ad30:	strd	r0, [sp]
   1ad34:	ldr	r3, [pc, #68]	; 1ad80 <__assert_fail@plt+0x97ec>
   1ad38:	ldr	ip, [r4]
   1ad3c:	str	r2, [sp, #8]
   1ad40:	mov	r1, #1
   1ad44:	mov	r2, #64	; 0x40
   1ad48:	add	r0, sp, #20
   1ad4c:	str	ip, [sp, #84]	; 0x54
   1ad50:	bl	1145c <__sprintf_chk@plt>
   1ad54:	add	r0, sp, #20
   1ad58:	ldr	r1, [pc, #36]	; 1ad84 <__assert_fail@plt+0x97f0>
   1ad5c:	bl	1aab8 <__assert_fail@plt+0x9524>
   1ad60:	ldr	r2, [sp, #84]	; 0x54
   1ad64:	ldr	r3, [r4]
   1ad68:	cmp	r2, r3
   1ad6c:	bne	1ad78 <__assert_fail@plt+0x97e4>
   1ad70:	add	sp, sp, #88	; 0x58
   1ad74:	pop	{r4, pc}
   1ad78:	bl	112d0 <__stack_chk_fail@plt>
   1ad7c:	strdeq	ip, [r3], -r8
   1ad80:	andeq	r6, r2, r4, asr sl
   1ad84:	andeq	r6, r2, r4, ror sl
   1ad88:	mov	ip, r0
   1ad8c:	mov	r3, #28
   1ad90:	mov	r1, #268435456	; 0x10000000
   1ad94:	mov	r2, #-2147483648	; 0x80000000
   1ad98:	b	1ada4 <__assert_fail@plt+0x9810>
   1ad9c:	tst	r2, ip
   1ada0:	eorne	ip, ip, r1
   1ada4:	subs	r3, r3, #1
   1ada8:	lsr	r2, r2, #1
   1adac:	lsr	r1, r1, #1
   1adb0:	bne	1ad9c <__assert_fail@plt+0x9808>
   1adb4:	lsl	ip, ip, #23
   1adb8:	ldr	r3, [pc, #56]	; 1adf8 <__assert_fail@plt+0x9864>
   1adbc:	lsr	ip, ip, #23
   1adc0:	add	ip, r3, ip, lsl #2
   1adc4:	ldr	r3, [ip, #20]
   1adc8:	cmp	r3, #0
   1adcc:	bne	1ade0 <__assert_fail@plt+0x984c>
   1add0:	b	1adf0 <__assert_fail@plt+0x985c>
   1add4:	ldr	r3, [r3]
   1add8:	cmp	r3, #0
   1addc:	beq	1adf0 <__assert_fail@plt+0x985c>
   1ade0:	ldrh	r2, [r3, #4]
   1ade4:	cmp	r2, r0
   1ade8:	bne	1add4 <__assert_fail@plt+0x9840>
   1adec:	ldr	r3, [r3, #8]
   1adf0:	mov	r0, r3
   1adf4:	bx	lr
   1adf8:	andeq	r5, r4, r4, asr #18
   1adfc:	mov	ip, r0
   1ae00:	mov	r3, #28
   1ae04:	mov	r1, #268435456	; 0x10000000
   1ae08:	mov	r2, #-2147483648	; 0x80000000
   1ae0c:	b	1ae18 <__assert_fail@plt+0x9884>
   1ae10:	tst	r2, ip
   1ae14:	eorne	ip, ip, r1
   1ae18:	subs	r3, r3, #1
   1ae1c:	lsr	r2, r2, #1
   1ae20:	lsr	r1, r1, #1
   1ae24:	bne	1ae10 <__assert_fail@plt+0x987c>
   1ae28:	lsl	ip, ip, #23
   1ae2c:	ldr	r3, [pc, #56]	; 1ae6c <__assert_fail@plt+0x98d8>
   1ae30:	lsr	ip, ip, #23
   1ae34:	add	ip, r3, ip, lsl #2
   1ae38:	ldr	r3, [ip, #2068]	; 0x814
   1ae3c:	cmp	r3, #0
   1ae40:	bne	1ae54 <__assert_fail@plt+0x98c0>
   1ae44:	b	1ae64 <__assert_fail@plt+0x98d0>
   1ae48:	ldr	r3, [r3]
   1ae4c:	cmp	r3, #0
   1ae50:	beq	1ae64 <__assert_fail@plt+0x98d0>
   1ae54:	ldrh	r2, [r3, #4]
   1ae58:	cmp	r2, r0
   1ae5c:	bne	1ae48 <__assert_fail@plt+0x98b4>
   1ae60:	ldr	r3, [r3, #8]
   1ae64:	mov	r0, r3
   1ae68:	bx	lr
   1ae6c:	andeq	r5, r4, r4, asr #18
   1ae70:	push	{r4, r5, r6, lr}
   1ae74:	subs	r5, r1, #0
   1ae78:	bne	1ae84 <__assert_fail@plt+0x98f0>
   1ae7c:	mov	r0, #0
   1ae80:	pop	{r4, r5, r6, pc}
   1ae84:	mov	r4, r0
   1ae88:	mov	r3, #0
   1ae8c:	strb	r3, [r4]
   1ae90:	mov	r0, r2
   1ae94:	bl	1ab9c <__assert_fail@plt+0x9608>
   1ae98:	subs	r3, r0, #0
   1ae9c:	beq	1ae7c <__assert_fail@plt+0x98e8>
   1aea0:	mov	r1, r5
   1aea4:	mov	r0, r4
   1aea8:	ldr	r2, [pc, #4]	; 1aeb4 <__assert_fail@plt+0x9920>
   1aeac:	pop	{r4, r5, r6, lr}
   1aeb0:	b	11468 <snprintf@plt>
   1aeb4:	andeq	r0, r2, r8, ror #21
   1aeb8:	push	{r4, r5, r6, lr}
   1aebc:	subs	r5, r1, #0
   1aec0:	bne	1aecc <__assert_fail@plt+0x9938>
   1aec4:	mov	r0, #0
   1aec8:	pop	{r4, r5, r6, pc}
   1aecc:	mov	r4, r0
   1aed0:	mov	r1, r3
   1aed4:	mov	r3, #0
   1aed8:	strb	r3, [r4]
   1aedc:	mov	r0, r2
   1aee0:	bl	1abfc <__assert_fail@plt+0x9668>
   1aee4:	subs	r3, r0, #0
   1aee8:	beq	1aec4 <__assert_fail@plt+0x9930>
   1aeec:	mov	r1, r5
   1aef0:	mov	r0, r4
   1aef4:	ldr	r2, [pc, #4]	; 1af00 <__assert_fail@plt+0x996c>
   1aef8:	pop	{r4, r5, r6, lr}
   1aefc:	b	11468 <snprintf@plt>
   1af00:	andeq	r0, r2, r8, ror #21
   1af04:	push	{r4, r5, r6, lr}
   1af08:	subs	r5, r1, #0
   1af0c:	bne	1af18 <__assert_fail@plt+0x9984>
   1af10:	mov	r0, #0
   1af14:	pop	{r4, r5, r6, pc}
   1af18:	mov	r4, r0
   1af1c:	mov	r3, #0
   1af20:	strb	r3, [r4]
   1af24:	mov	r0, r2
   1af28:	bl	1ac60 <__assert_fail@plt+0x96cc>
   1af2c:	subs	r3, r0, #0
   1af30:	beq	1af10 <__assert_fail@plt+0x997c>
   1af34:	mov	r1, r5
   1af38:	mov	r0, r4
   1af3c:	ldr	r2, [pc, #4]	; 1af48 <__assert_fail@plt+0x99b4>
   1af40:	pop	{r4, r5, r6, lr}
   1af44:	b	11468 <snprintf@plt>
   1af48:	andeq	r0, r2, r8, ror #21
   1af4c:	push	{r4, r5, r6, lr}
   1af50:	subs	r5, r1, #0
   1af54:	bne	1af60 <__assert_fail@plt+0x99cc>
   1af58:	mov	r0, #0
   1af5c:	pop	{r4, r5, r6, pc}
   1af60:	mov	r4, r0
   1af64:	mov	r1, r3
   1af68:	mov	r3, #0
   1af6c:	strb	r3, [r4]
   1af70:	mov	r0, r2
   1af74:	bl	1acc0 <__assert_fail@plt+0x972c>
   1af78:	subs	r3, r0, #0
   1af7c:	beq	1af58 <__assert_fail@plt+0x99c4>
   1af80:	mov	r1, r5
   1af84:	mov	r0, r4
   1af88:	ldr	r2, [pc, #4]	; 1af94 <__assert_fail@plt+0x9a00>
   1af8c:	pop	{r4, r5, r6, lr}
   1af90:	b	11468 <snprintf@plt>
   1af94:	andeq	r0, r2, r8, ror #21
   1af98:	push	{r4, r5, r6, r7, r8, lr}
   1af9c:	bl	11348 <udev_new@plt>
   1afa0:	ldr	r2, [pc, #856]	; 1b300 <__assert_fail@plt+0x9d6c>
   1afa4:	cmp	r0, #0
   1afa8:	str	r0, [r2, #-4068]	; 0xfffff01c
   1afac:	beq	1afbc <__assert_fail@plt+0x9a28>
   1afb0:	bl	11300 <udev_hwdb_new@plt>
   1afb4:	ldr	r3, [pc, #840]	; 1b304 <__assert_fail@plt+0x9d70>
   1afb8:	str	r0, [r3]
   1afbc:	ldr	r5, [pc, #836]	; 1b308 <__assert_fail@plt+0x9d74>
   1afc0:	ldr	r2, [r5, #8]
   1afc4:	cmp	r2, #0
   1afc8:	beq	1b060 <__assert_fail@plt+0x9acc>
   1afcc:	ldr	r0, [pc, #824]	; 1b30c <__assert_fail@plt+0x9d78>
   1afd0:	ldr	r6, [pc, #824]	; 1b310 <__assert_fail@plt+0x9d7c>
   1afd4:	mov	r1, r5
   1afd8:	mov	r2, #0
   1afdc:	ldrh	r4, [r1, #4]
   1afe0:	mov	r7, #28
   1afe4:	mov	lr, #268435456	; 0x10000000
   1afe8:	mov	r3, r4
   1afec:	mov	ip, #-2147483648	; 0x80000000
   1aff0:	subs	r7, r7, #1
   1aff4:	lsr	ip, ip, #1
   1aff8:	lsr	lr, lr, #1
   1affc:	bne	1b2ec <__assert_fail@plt+0x9d58>
   1b000:	and	r3, r3, r6
   1b004:	lsl	r3, r3, #2
   1b008:	add	ip, r0, r3
   1b00c:	ldr	ip, [ip, #20]
   1b010:	cmp	ip, #0
   1b014:	beq	1b044 <__assert_fail@plt+0x9ab0>
   1b018:	ldrh	lr, [ip, #4]
   1b01c:	cmp	lr, r4
   1b020:	beq	1b2f8 <__assert_fail@plt+0x9d64>
   1b024:	mov	lr, ip
   1b028:	b	1b038 <__assert_fail@plt+0x9aa4>
   1b02c:	ldrh	r7, [lr, #4]
   1b030:	cmp	r7, r4
   1b034:	beq	1b2f8 <__assert_fail@plt+0x9d64>
   1b038:	ldr	lr, [lr]
   1b03c:	cmp	lr, #0
   1b040:	bne	1b02c <__assert_fail@plt+0x9a98>
   1b044:	add	r3, r0, r3
   1b048:	str	ip, [r1]
   1b04c:	str	r1, [r3, #20]
   1b050:	add	r1, r1, #12
   1b054:	ldr	r3, [r1, #8]
   1b058:	cmp	r3, #0
   1b05c:	bne	1afdc <__assert_fail@plt+0x9a48>
   1b060:	ldr	r3, [r5, #692]	; 0x2b4
   1b064:	cmp	r3, #0
   1b068:	beq	1b108 <__assert_fail@plt+0x9b74>
   1b06c:	ldr	r1, [pc, #672]	; 1b314 <__assert_fail@plt+0x9d80>
   1b070:	ldr	r0, [pc, #660]	; 1b30c <__assert_fail@plt+0x9d78>
   1b074:	ldr	r7, [pc, #660]	; 1b310 <__assert_fail@plt+0x9d7c>
   1b078:	mov	r4, #0
   1b07c:	ldrh	r6, [r1, #4]
   1b080:	mov	r8, #28
   1b084:	mov	lr, #268435456	; 0x10000000
   1b088:	mov	r3, r6
   1b08c:	mov	ip, #-2147483648	; 0x80000000
   1b090:	subs	r8, r8, #1
   1b094:	lsr	ip, ip, #1
   1b098:	lsr	lr, lr, #1
   1b09c:	bne	1b2d8 <__assert_fail@plt+0x9d44>
   1b0a0:	and	r3, r3, r7
   1b0a4:	lsl	r3, r3, #2
   1b0a8:	add	ip, r0, r3
   1b0ac:	ldr	ip, [ip, #2068]	; 0x814
   1b0b0:	cmp	ip, #0
   1b0b4:	beq	1b0e4 <__assert_fail@plt+0x9b50>
   1b0b8:	ldrh	lr, [ip, #4]
   1b0bc:	cmp	lr, r6
   1b0c0:	beq	1b2e4 <__assert_fail@plt+0x9d50>
   1b0c4:	mov	lr, ip
   1b0c8:	b	1b0d8 <__assert_fail@plt+0x9b44>
   1b0cc:	ldrh	r8, [lr, #4]
   1b0d0:	cmp	r8, r6
   1b0d4:	beq	1b2e4 <__assert_fail@plt+0x9d50>
   1b0d8:	ldr	lr, [lr]
   1b0dc:	cmp	lr, #0
   1b0e0:	bne	1b0cc <__assert_fail@plt+0x9b38>
   1b0e4:	add	r3, r0, r3
   1b0e8:	str	ip, [r1]
   1b0ec:	str	r1, [r3, #2068]	; 0x814
   1b0f0:	add	r1, r1, #12
   1b0f4:	ldr	r3, [r1, #8]
   1b0f8:	cmp	r3, #0
   1b0fc:	bne	1b07c <__assert_fail@plt+0x9ae8>
   1b100:	cmn	r4, #1
   1b104:	beq	1b10c <__assert_fail@plt+0x9b78>
   1b108:	mov	r4, r2
   1b10c:	ldr	r3, [r5, #848]	; 0x350
   1b110:	cmp	r3, #0
   1b114:	beq	1b144 <__assert_fail@plt+0x9bb0>
   1b118:	ldr	r6, [pc, #504]	; 1b318 <__assert_fail@plt+0x9d84>
   1b11c:	ldr	r7, [pc, #504]	; 1b31c <__assert_fail@plt+0x9d88>
   1b120:	mov	r1, r6
   1b124:	mov	r0, r7
   1b128:	bl	1aa28 <__assert_fail@plt+0x9494>
   1b12c:	add	r6, r6, #12
   1b130:	ldr	r3, [r6, #8]
   1b134:	cmp	r0, #0
   1b138:	movlt	r4, r0
   1b13c:	cmp	r3, #0
   1b140:	bne	1b120 <__assert_fail@plt+0x9b8c>
   1b144:	ldr	r3, [r5, #896]	; 0x380
   1b148:	cmp	r3, #0
   1b14c:	beq	1b17c <__assert_fail@plt+0x9be8>
   1b150:	ldr	r6, [pc, #456]	; 1b320 <__assert_fail@plt+0x9d8c>
   1b154:	ldr	r7, [pc, #456]	; 1b324 <__assert_fail@plt+0x9d90>
   1b158:	mov	r1, r6
   1b15c:	mov	r0, r7
   1b160:	bl	1aa28 <__assert_fail@plt+0x9494>
   1b164:	add	r6, r6, #12
   1b168:	ldr	r3, [r6, #8]
   1b16c:	cmp	r0, #0
   1b170:	movlt	r4, r0
   1b174:	cmp	r3, #0
   1b178:	bne	1b158 <__assert_fail@plt+0x9bc4>
   1b17c:	ldr	r3, [r5, #1232]	; 0x4d0
   1b180:	cmp	r3, #0
   1b184:	beq	1b1b4 <__assert_fail@plt+0x9c20>
   1b188:	ldr	r6, [pc, #408]	; 1b328 <__assert_fail@plt+0x9d94>
   1b18c:	ldr	r7, [pc, #408]	; 1b32c <__assert_fail@plt+0x9d98>
   1b190:	mov	r1, r6
   1b194:	mov	r0, r7
   1b198:	bl	1aa28 <__assert_fail@plt+0x9494>
   1b19c:	add	r6, r6, #12
   1b1a0:	ldr	r3, [r6, #8]
   1b1a4:	cmp	r0, #0
   1b1a8:	movlt	r4, r0
   1b1ac:	cmp	r3, #0
   1b1b0:	bne	1b190 <__assert_fail@plt+0x9bfc>
   1b1b4:	ldr	r6, [pc, #372]	; 1b330 <__assert_fail@plt+0x9d9c>
   1b1b8:	ldr	r3, [r6, #8]
   1b1bc:	cmp	r3, #0
   1b1c0:	beq	1b1ec <__assert_fail@plt+0x9c58>
   1b1c4:	ldr	r7, [pc, #360]	; 1b334 <__assert_fail@plt+0x9da0>
   1b1c8:	mov	r1, r6
   1b1cc:	mov	r0, r7
   1b1d0:	bl	1aa28 <__assert_fail@plt+0x9494>
   1b1d4:	add	r6, r6, #12
   1b1d8:	ldr	r3, [r6, #8]
   1b1dc:	cmp	r0, #0
   1b1e0:	movlt	r4, r0
   1b1e4:	cmp	r3, #0
   1b1e8:	bne	1b1c8 <__assert_fail@plt+0x9c34>
   1b1ec:	ldr	r3, [r5, #1592]	; 0x638
   1b1f0:	cmp	r3, #0
   1b1f4:	beq	1b224 <__assert_fail@plt+0x9c90>
   1b1f8:	ldr	r6, [pc, #312]	; 1b338 <__assert_fail@plt+0x9da4>
   1b1fc:	ldr	r7, [pc, #312]	; 1b33c <__assert_fail@plt+0x9da8>
   1b200:	mov	r1, r6
   1b204:	mov	r0, r7
   1b208:	bl	1aa28 <__assert_fail@plt+0x9494>
   1b20c:	add	r6, r6, #12
   1b210:	ldr	r3, [r6, #8]
   1b214:	cmp	r0, #0
   1b218:	movlt	r4, r0
   1b21c:	cmp	r3, #0
   1b220:	bne	1b200 <__assert_fail@plt+0x9c6c>
   1b224:	ldr	r3, [r5, #3548]	; 0xddc
   1b228:	cmp	r3, #0
   1b22c:	beq	1b25c <__assert_fail@plt+0x9cc8>
   1b230:	ldr	r6, [pc, #264]	; 1b340 <__assert_fail@plt+0x9dac>
   1b234:	ldr	r7, [pc, #264]	; 1b344 <__assert_fail@plt+0x9db0>
   1b238:	mov	r1, r6
   1b23c:	mov	r0, r7
   1b240:	bl	1aa28 <__assert_fail@plt+0x9494>
   1b244:	add	r6, r6, #12
   1b248:	ldr	r3, [r6, #8]
   1b24c:	cmp	r0, #0
   1b250:	movlt	r4, r0
   1b254:	cmp	r3, #0
   1b258:	bne	1b238 <__assert_fail@plt+0x9ca4>
   1b25c:	ldr	r3, [r5, #4040]	; 0xfc8
   1b260:	cmp	r3, #0
   1b264:	beq	1b294 <__assert_fail@plt+0x9d00>
   1b268:	ldr	r5, [pc, #216]	; 1b348 <__assert_fail@plt+0x9db4>
   1b26c:	ldr	r6, [pc, #216]	; 1b34c <__assert_fail@plt+0x9db8>
   1b270:	mov	r1, r5
   1b274:	mov	r0, r6
   1b278:	bl	1aa28 <__assert_fail@plt+0x9494>
   1b27c:	add	r5, r5, #12
   1b280:	ldr	r3, [r5, #8]
   1b284:	cmp	r0, #0
   1b288:	movlt	r4, r0
   1b28c:	cmp	r3, #0
   1b290:	bne	1b270 <__assert_fail@plt+0x9cdc>
   1b294:	ldr	r5, [pc, #180]	; 1b350 <__assert_fail@plt+0x9dbc>
   1b298:	ldr	r3, [r5, #-4072]	; 0xfffff018
   1b29c:	cmp	r3, #0
   1b2a0:	beq	1b2d0 <__assert_fail@plt+0x9d3c>
   1b2a4:	ldr	r6, [pc, #168]	; 1b354 <__assert_fail@plt+0x9dc0>
   1b2a8:	sub	r5, r5, #4080	; 0xff0
   1b2ac:	mov	r1, r5
   1b2b0:	mov	r0, r6
   1b2b4:	bl	1aa28 <__assert_fail@plt+0x9494>
   1b2b8:	add	r5, r5, #12
   1b2bc:	ldr	r3, [r5, #8]
   1b2c0:	cmp	r0, #0
   1b2c4:	movlt	r4, r0
   1b2c8:	cmp	r3, #0
   1b2cc:	bne	1b2ac <__assert_fail@plt+0x9d18>
   1b2d0:	mov	r0, r4
   1b2d4:	pop	{r4, r5, r6, r7, r8, pc}
   1b2d8:	tst	ip, r3
   1b2dc:	eorne	r3, r3, lr
   1b2e0:	b	1b090 <__assert_fail@plt+0x9afc>
   1b2e4:	mvn	r4, #0
   1b2e8:	b	1b0f0 <__assert_fail@plt+0x9b5c>
   1b2ec:	tst	ip, r3
   1b2f0:	eorne	r3, r3, lr
   1b2f4:	b	1aff0 <__assert_fail@plt+0x9a5c>
   1b2f8:	mvn	r2, #0
   1b2fc:	b	1b050 <__assert_fail@plt+0x9abc>
   1b300:	andeq	r7, r4, ip, lsr r9
   1b304:	andeq	r1, r4, r4, asr r9
   1b308:	andeq	sp, r3, r8, asr #2
   1b30c:	andeq	r5, r4, r4, asr #18
   1b310:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1b314:	strdeq	sp, [r3], -r4
   1b318:	muleq	r3, r0, r4
   1b31c:	andeq	r1, r4, r8, asr r9
   1b320:	andeq	sp, r3, r0, asr #9
   1b324:	andeq	r2, r4, r8, asr r1
   1b328:	andeq	sp, r3, r0, lsl r6
   1b32c:	andeq	r2, r4, r8, asr r9
   1b330:	andeq	lr, r3, ip, lsl #6
   1b334:	andeq	r3, r4, r8, asr r1
   1b338:	andeq	sp, r3, r8, ror r7
   1b33c:	andeq	r3, r4, r8, asr r9
   1b340:	andeq	sp, r3, ip, lsl pc
   1b344:	andeq	r4, r4, r8, asr r1
   1b348:	andeq	lr, r3, r8, lsl #2
   1b34c:	andeq	r4, r4, r8, asr r9
   1b350:	andeq	pc, r3, r0, asr #2
   1b354:	andeq	r5, r4, r8, asr r1
   1b358:	push	{r4, r5, r6, lr}
   1b35c:	ldr	r5, [pc, #28]	; 1b380 <__assert_fail@plt+0x9dec>
   1b360:	ldr	r4, [pc, #28]	; 1b384 <__assert_fail@plt+0x9df0>
   1b364:	ldr	r0, [r5]
   1b368:	bl	1124c <udev_hwdb_unref@plt>
   1b36c:	str	r0, [r5]
   1b370:	ldr	r0, [r4, #-4068]	; 0xfffff01c
   1b374:	bl	11408 <udev_unref@plt>
   1b378:	str	r0, [r4, #-4068]	; 0xfffff01c
   1b37c:	pop	{r4, r5, r6, pc}
   1b380:	andeq	r1, r4, r4, asr r9
   1b384:	andeq	r7, r4, ip, lsr r9
   1b388:	push	{r4, r5, r6, r7, lr}
   1b38c:	sub	sp, sp, #4096	; 0x1000
   1b390:	ldr	r6, [pc, #276]	; 1b4ac <__assert_fail@plt+0x9f18>
   1b394:	sub	sp, sp, #12
   1b398:	add	ip, sp, #4096	; 0x1000
   1b39c:	ldr	r3, [r6]
   1b3a0:	add	ip, ip, #4
   1b3a4:	mov	r2, #4096	; 0x1000
   1b3a8:	mov	r7, r0
   1b3ac:	mov	r5, r1
   1b3b0:	str	r3, [ip]
   1b3b4:	bl	1130c <readlink@plt>
   1b3b8:	cmp	r0, #0
   1b3bc:	ble	1b474 <__assert_fail@plt+0x9ee0>
   1b3c0:	mov	r3, #0
   1b3c4:	strb	r3, [r5, r0]
   1b3c8:	ldrb	r3, [r5]
   1b3cc:	cmp	r3, #47	; 0x2f
   1b3d0:	beq	1b430 <__assert_fail@plt+0x9e9c>
   1b3d4:	mov	r4, sp
   1b3d8:	mov	r1, r7
   1b3dc:	mov	r2, #4096	; 0x1000
   1b3e0:	mov	r0, r4
   1b3e4:	bl	11480 <strncpy@plt>
   1b3e8:	mov	r0, r4
   1b3ec:	bl	11420 <strlen@plt>
   1b3f0:	add	r0, r4, r0
   1b3f4:	cmp	r0, r4
   1b3f8:	bne	1b40c <__assert_fail@plt+0x9e78>
   1b3fc:	b	1b490 <__assert_fail@plt+0x9efc>
   1b400:	cmp	r2, r4
   1b404:	mov	r0, r2
   1b408:	beq	1b490 <__assert_fail@plt+0x9efc>
   1b40c:	ldrb	r3, [r0, #-1]
   1b410:	sub	r2, r0, #1
   1b414:	cmp	r3, #47	; 0x2f
   1b418:	bne	1b400 <__assert_fail@plt+0x9e6c>
   1b41c:	sub	r2, r4, r0
   1b420:	add	r2, r2, #4096	; 0x1000
   1b424:	mov	r1, r5
   1b428:	bl	11480 <strncpy@plt>
   1b42c:	b	1b444 <__assert_fail@plt+0x9eb0>
   1b430:	mov	r4, sp
   1b434:	mov	r0, r4
   1b438:	mov	r2, #4096	; 0x1000
   1b43c:	mov	r1, r5
   1b440:	bl	11480 <strncpy@plt>
   1b444:	mov	r1, r5
   1b448:	mov	r0, r4
   1b44c:	bl	1b388 <__assert_fail@plt+0x9df4>
   1b450:	add	r3, sp, #4096	; 0x1000
   1b454:	add	r3, r3, #4
   1b458:	ldr	r2, [r3]
   1b45c:	ldr	r3, [r6]
   1b460:	cmp	r2, r3
   1b464:	bne	1b4a8 <__assert_fail@plt+0x9f14>
   1b468:	add	sp, sp, #4096	; 0x1000
   1b46c:	add	sp, sp, #12
   1b470:	pop	{r4, r5, r6, r7, pc}
   1b474:	mov	r1, r7
   1b478:	ldr	r2, [pc, #48]	; 1b4b0 <__assert_fail@plt+0x9f1c>
   1b47c:	mov	r0, r5
   1b480:	bl	11480 <strncpy@plt>
   1b484:	mov	r0, r5
   1b488:	bl	11420 <strlen@plt>
   1b48c:	b	1b450 <__assert_fail@plt+0x9ebc>
   1b490:	add	r0, sp, #1
   1b494:	sub	r2, r4, r0
   1b498:	add	r2, r2, #4096	; 0x1000
   1b49c:	mov	r1, r5
   1b4a0:	bl	11480 <strncpy@plt>
   1b4a4:	b	1b444 <__assert_fail@plt+0x9eb0>
   1b4a8:	bl	112d0 <__stack_chk_fail@plt>
   1b4ac:	strdeq	ip, [r3], -r8
   1b4b0:	andeq	r1, r0, r1
   1b4b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4b8:	sub	sp, sp, #8192	; 0x2000
   1b4bc:	ldr	r3, [pc, #592]	; 1b714 <__assert_fail@plt+0xa180>
   1b4c0:	sub	sp, sp, #36	; 0x24
   1b4c4:	mov	r2, r1
   1b4c8:	mov	r7, r0
   1b4cc:	mov	r0, r2
   1b4d0:	add	r2, sp, #8192	; 0x2000
   1b4d4:	ldr	r3, [r3]
   1b4d8:	add	r2, r2, #28
   1b4dc:	add	r1, sp, #20
   1b4e0:	str	r3, [r2]
   1b4e4:	bl	1b388 <__assert_fail@plt+0x9df4>
   1b4e8:	ldrb	r3, [sp, #20]
   1b4ec:	add	r5, sp, #4096	; 0x1000
   1b4f0:	add	r5, r5, #32
   1b4f4:	mov	r2, #0
   1b4f8:	cmp	r3, #47	; 0x2f
   1b4fc:	strb	r2, [r5, #-8]
   1b500:	sub	r5, r5, #8
   1b504:	beq	1b6d8 <__assert_fail@plt+0xa144>
   1b508:	ldr	r1, [pc, #520]	; 1b718 <__assert_fail@plt+0xa184>
   1b50c:	mov	r0, r5
   1b510:	bl	113f0 <getcwd@plt>
   1b514:	mov	r8, r0
   1b518:	bl	11420 <strlen@plt>
   1b51c:	mov	r3, #47	; 0x2f
   1b520:	strb	r3, [r5, r0]
   1b524:	ldrb	r3, [sp, #20]
   1b528:	add	r2, r5, r0
   1b52c:	add	r1, r2, #1
   1b530:	rsb	r0, r0, #4096	; 0x1000
   1b534:	add	lr, sp, #20
   1b538:	mov	r9, #47	; 0x2f
   1b53c:	cmp	r3, #0
   1b540:	cmpne	r0, #1
   1b544:	movhi	r4, #1
   1b548:	movls	r4, #0
   1b54c:	bls	1b5d8 <__assert_fail@plt+0xa044>
   1b550:	cmp	r3, #47	; 0x2f
   1b554:	ldrb	ip, [lr, #1]
   1b558:	beq	1b5a8 <__assert_fail@plt+0xa014>
   1b55c:	cmp	r3, #46	; 0x2e
   1b560:	beq	1b580 <__assert_fail@plt+0x9fec>
   1b564:	mov	r2, r1
   1b568:	add	lr, lr, #1
   1b56c:	strb	r3, [r2], #1
   1b570:	sub	r0, r0, #1
   1b574:	mov	r1, r2
   1b578:	mov	r3, ip
   1b57c:	b	1b53c <__assert_fail@plt+0x9fa8>
   1b580:	cmp	ip, #46	; 0x2e
   1b584:	beq	1b69c <__assert_fail@plt+0xa108>
   1b588:	cmp	ip, #47	; 0x2f
   1b58c:	bne	1b564 <__assert_fail@plt+0x9fd0>
   1b590:	ldrb	r2, [r1, #-1]
   1b594:	cmp	r2, #47	; 0x2f
   1b598:	bne	1b564 <__assert_fail@plt+0x9fd0>
   1b59c:	ldrb	r3, [lr, #2]
   1b5a0:	add	lr, lr, #2
   1b5a4:	b	1b53c <__assert_fail@plt+0x9fa8>
   1b5a8:	add	r2, lr, #1
   1b5ac:	mov	r3, ip
   1b5b0:	b	1b5b8 <__assert_fail@plt+0xa024>
   1b5b4:	ldrb	r3, [r2, #1]!
   1b5b8:	cmp	r3, #47	; 0x2f
   1b5bc:	mov	lr, r2
   1b5c0:	beq	1b5b4 <__assert_fail@plt+0xa020>
   1b5c4:	mov	r2, r1
   1b5c8:	sub	r0, r0, #1
   1b5cc:	strb	r9, [r2], #1
   1b5d0:	mov	r1, r2
   1b5d4:	b	1b53c <__assert_fail@plt+0x9fa8>
   1b5d8:	strb	r4, [r1]
   1b5dc:	mov	r0, r7
   1b5e0:	add	r1, sp, #16
   1b5e4:	bl	1142c <libusb_get_device_list@plt>
   1b5e8:	subs	sl, r0, #0
   1b5ec:	ble	1b6e8 <__assert_fail@plt+0xa154>
   1b5f0:	ldr	r9, [pc, #292]	; 1b71c <__assert_fail@plt+0xa188>
   1b5f4:	ldr	r8, [pc, #292]	; 1b720 <__assert_fail@plt+0xa18c>
   1b5f8:	ldr	r7, [pc, #280]	; 1b718 <__assert_fail@plt+0xa184>
   1b5fc:	b	1b60c <__assert_fail@plt+0xa078>
   1b600:	add	r4, r4, #1
   1b604:	cmp	sl, r4
   1b608:	beq	1b6cc <__assert_fail@plt+0xa138>
   1b60c:	ldr	r3, [sp, #16]
   1b610:	lsl	fp, r4, #2
   1b614:	ldr	r0, [r3, r4, lsl #2]
   1b618:	bl	113e4 <libusb_get_bus_number@plt>
   1b61c:	ldr	r2, [sp, #16]
   1b620:	mov	r6, r0
   1b624:	ldr	r0, [r2, r4, lsl #2]
   1b628:	bl	11570 <libusb_get_device_address@plt>
   1b62c:	mov	r3, r7
   1b630:	mov	r2, #1
   1b634:	ldr	r1, [pc, #220]	; 1b718 <__assert_fail@plt+0xa184>
   1b638:	str	r6, [sp, #8]
   1b63c:	strd	r8, [sp]
   1b640:	str	r0, [sp, #12]
   1b644:	add	r0, sp, #20
   1b648:	bl	11588 <__snprintf_chk@plt>
   1b64c:	mov	r1, r5
   1b650:	add	r0, sp, #20
   1b654:	bl	1127c <strcmp@plt>
   1b658:	cmp	r0, #0
   1b65c:	bne	1b600 <__assert_fail@plt+0xa06c>
   1b660:	ldr	r0, [sp, #16]
   1b664:	ldr	r4, [r0, fp]
   1b668:	mov	r1, #0
   1b66c:	bl	114f8 <libusb_free_device_list@plt>
   1b670:	add	r3, sp, #8192	; 0x2000
   1b674:	add	r3, r3, #28
   1b678:	ldr	r2, [r3]
   1b67c:	ldr	r3, [pc, #144]	; 1b714 <__assert_fail@plt+0xa180>
   1b680:	mov	r0, r4
   1b684:	ldr	r3, [r3]
   1b688:	cmp	r2, r3
   1b68c:	bne	1b710 <__assert_fail@plt+0xa17c>
   1b690:	add	sp, sp, #8192	; 0x2000
   1b694:	add	sp, sp, #36	; 0x24
   1b698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b69c:	ldrb	r2, [lr, #2]
   1b6a0:	cmp	r2, #47	; 0x2f
   1b6a4:	bne	1b564 <__assert_fail@plt+0x9fd0>
   1b6a8:	ldrb	r2, [r1, #-1]
   1b6ac:	cmp	r2, #47	; 0x2f
   1b6b0:	bne	1b564 <__assert_fail@plt+0x9fd0>
   1b6b4:	sub	r3, r1, #1
   1b6b8:	cmp	r3, r8
   1b6bc:	bne	1b6f0 <__assert_fail@plt+0xa15c>
   1b6c0:	ldrb	r3, [lr, #3]
   1b6c4:	add	lr, lr, #3
   1b6c8:	b	1b53c <__assert_fail@plt+0x9fa8>
   1b6cc:	ldr	r0, [sp, #16]
   1b6d0:	mov	r4, #0
   1b6d4:	b	1b668 <__assert_fail@plt+0xa0d4>
   1b6d8:	ldr	r0, [pc, #56]	; 1b718 <__assert_fail@plt+0xa184>
   1b6dc:	mov	r1, r5
   1b6e0:	mov	r8, r5
   1b6e4:	b	1b534 <__assert_fail@plt+0x9fa0>
   1b6e8:	ldr	r0, [sp, #16]
   1b6ec:	b	1b668 <__assert_fail@plt+0xa0d4>
   1b6f0:	add	r1, r1, r0
   1b6f4:	mov	r2, r3
   1b6f8:	sub	r0, r1, r3
   1b6fc:	ldrb	ip, [r3, #-1]!
   1b700:	cmp	ip, #47	; 0x2f
   1b704:	bne	1b6f4 <__assert_fail@plt+0xa160>
   1b708:	mov	r1, r2
   1b70c:	b	1b6c0 <__assert_fail@plt+0xa12c>
   1b710:	bl	112d0 <__stack_chk_fail@plt>
   1b714:	strdeq	ip, [r3], -r8
   1b718:	andeq	r1, r0, r1
   1b71c:	andeq	fp, r2, r4, asr #30
   1b720:	andeq	fp, r2, r4, asr pc
   1b724:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b728:	cmp	r0, #0
   1b72c:	ldr	r5, [pc, #468]	; 1b908 <__assert_fail@plt+0xa374>
   1b730:	clz	r3, r1
   1b734:	lsr	r3, r3, #5
   1b738:	movne	r4, r3
   1b73c:	sub	sp, sp, #296	; 0x128
   1b740:	moveq	r4, #1
   1b744:	ldr	r3, [r5]
   1b748:	cmp	r4, #0
   1b74c:	str	r3, [sp, #292]	; 0x124
   1b750:	bne	1b804 <__assert_fail@plt+0xa270>
   1b754:	mov	r3, #4
   1b758:	mov	r9, #1000	; 0x3e8
   1b75c:	add	r6, sp, #36	; 0x24
   1b760:	str	r3, [sp, #8]
   1b764:	mov	r7, r1
   1b768:	str	r4, [sp]
   1b76c:	str	r9, [sp, #12]
   1b770:	str	r6, [sp, #4]
   1b774:	mov	r3, #768	; 0x300
   1b778:	mov	r2, #6
   1b77c:	mov	r1, #128	; 0x80
   1b780:	mov	r8, r0
   1b784:	bl	11534 <libusb_control_transfer@plt>
   1b788:	cmp	r0, #4
   1b78c:	bne	1b7e4 <__assert_fail@plt+0xa250>
   1b790:	ldrb	r2, [sp, #39]	; 0x27
   1b794:	ldrb	r3, [sp, #38]	; 0x26
   1b798:	orrs	r3, r3, r2, lsl #8
   1b79c:	beq	1b7e4 <__assert_fail@plt+0xa250>
   1b7a0:	mov	r2, #254	; 0xfe
   1b7a4:	stm	sp, {r3, r6}
   1b7a8:	str	r2, [sp, #8]
   1b7ac:	str	r9, [sp, #12]
   1b7b0:	orr	r3, r7, #768	; 0x300
   1b7b4:	mov	r2, #6
   1b7b8:	mov	r1, #128	; 0x80
   1b7bc:	mov	r0, r8
   1b7c0:	bl	11534 <libusb_control_transfer@plt>
   1b7c4:	cmp	r0, #1
   1b7c8:	ble	1b7e4 <__assert_fail@plt+0xa250>
   1b7cc:	ldrb	r3, [sp, #36]	; 0x24
   1b7d0:	cmp	r3, #1
   1b7d4:	bls	1b7e4 <__assert_fail@plt+0xa250>
   1b7d8:	ldrb	r2, [sp, #37]	; 0x25
   1b7dc:	cmp	r2, #3
   1b7e0:	beq	1b81c <__assert_fail@plt+0xa288>
   1b7e4:	ldr	r2, [sp, #292]	; 0x124
   1b7e8:	ldr	r3, [r5]
   1b7ec:	cmp	r2, r3
   1b7f0:	ldreq	r0, [pc, #276]	; 1b90c <__assert_fail@plt+0xa378>
   1b7f4:	bne	1b818 <__assert_fail@plt+0xa284>
   1b7f8:	add	sp, sp, #296	; 0x128
   1b7fc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b800:	b	112b8 <strdup@plt>
   1b804:	ldr	r2, [sp, #292]	; 0x124
   1b808:	ldr	r3, [r5]
   1b80c:	cmp	r2, r3
   1b810:	ldreq	r0, [pc, #248]	; 1b910 <__assert_fail@plt+0xa37c>
   1b814:	beq	1b7f8 <__assert_fail@plt+0xa264>
   1b818:	bl	112d0 <__stack_chk_fail@plt>
   1b81c:	sub	r3, r3, #2
   1b820:	add	r6, r6, #2
   1b824:	mov	r0, #14
   1b828:	asr	r9, r3, #1
   1b82c:	str	r6, [sp, #20]
   1b830:	bl	11504 <nl_langinfo@plt>
   1b834:	ldr	r1, [pc, #216]	; 1b914 <__assert_fail@plt+0xa380>
   1b838:	bl	11390 <iconv_open@plt>
   1b83c:	cmn	r0, #1
   1b840:	mov	r6, r0
   1b844:	beq	1b8d0 <__assert_fail@plt+0xa33c>
   1b848:	lsl	r3, r9, #1
   1b84c:	str	r3, [sp, #28]
   1b850:	bl	11354 <__ctype_get_mb_cur_max@plt>
   1b854:	mul	r9, r0, r9
   1b858:	add	r0, r9, #1
   1b85c:	str	r9, [sp, #32]
   1b860:	bl	11384 <malloc@plt>
   1b864:	add	r3, sp, #32
   1b868:	str	r3, [sp]
   1b86c:	add	r2, sp, #28
   1b870:	add	r3, sp, #24
   1b874:	add	r1, sp, #20
   1b878:	mov	r9, r0
   1b87c:	mov	r0, r6
   1b880:	str	r9, [sp, #24]
   1b884:	bl	11270 <iconv@plt>
   1b888:	mov	sl, r0
   1b88c:	mov	r0, r6
   1b890:	bl	11264 <iconv_close@plt>
   1b894:	cmn	sl, #1
   1b898:	beq	1b8c8 <__assert_fail@plt+0xa334>
   1b89c:	ldr	r3, [sp, #24]
   1b8a0:	cmp	r9, #0
   1b8a4:	strb	r4, [r3]
   1b8a8:	beq	1b8d0 <__assert_fail@plt+0xa33c>
   1b8ac:	ldr	r2, [sp, #292]	; 0x124
   1b8b0:	ldr	r3, [r5]
   1b8b4:	mov	r0, r9
   1b8b8:	cmp	r2, r3
   1b8bc:	bne	1b818 <__assert_fail@plt+0xa284>
   1b8c0:	add	sp, sp, #296	; 0x128
   1b8c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b8c8:	mov	r0, r9
   1b8cc:	bl	112a0 <free@plt>
   1b8d0:	mov	r0, #127	; 0x7f
   1b8d4:	bl	11384 <malloc@plt>
   1b8d8:	mov	r1, r7
   1b8dc:	mov	r3, #127	; 0x7f
   1b8e0:	mov	r4, r0
   1b8e4:	mov	r2, r4
   1b8e8:	mov	r0, r8
   1b8ec:	bl	112f4 <libusb_get_string_descriptor_ascii@plt>
   1b8f0:	mov	r9, r4
   1b8f4:	cmp	r0, #0
   1b8f8:	bge	1b8ac <__assert_fail@plt+0xa318>
   1b8fc:	mov	r0, r4
   1b900:	bl	112a0 <free@plt>
   1b904:	b	1b7e4 <__assert_fail@plt+0xa250>
   1b908:	strdeq	ip, [r3], -r8
   1b90c:	andeq	fp, r2, r4, ror #30
   1b910:	ldrdeq	r2, [r2], -r8
   1b914:	andeq	fp, r2, ip, ror #30
   1b918:	subs	r2, r1, #1
   1b91c:	bxeq	lr
   1b920:	bcc	1baf8 <__assert_fail@plt+0xa564>
   1b924:	cmp	r0, r1
   1b928:	bls	1badc <__assert_fail@plt+0xa548>
   1b92c:	tst	r1, r2
   1b930:	beq	1bae8 <__assert_fail@plt+0xa554>
   1b934:	clz	r3, r0
   1b938:	clz	r2, r1
   1b93c:	sub	r3, r2, r3
   1b940:	rsbs	r3, r3, #31
   1b944:	addne	r3, r3, r3, lsl #1
   1b948:	mov	r2, #0
   1b94c:	addne	pc, pc, r3, lsl #2
   1b950:	nop			; (mov r0, r0)
   1b954:	cmp	r0, r1, lsl #31
   1b958:	adc	r2, r2, r2
   1b95c:	subcs	r0, r0, r1, lsl #31
   1b960:	cmp	r0, r1, lsl #30
   1b964:	adc	r2, r2, r2
   1b968:	subcs	r0, r0, r1, lsl #30
   1b96c:	cmp	r0, r1, lsl #29
   1b970:	adc	r2, r2, r2
   1b974:	subcs	r0, r0, r1, lsl #29
   1b978:	cmp	r0, r1, lsl #28
   1b97c:	adc	r2, r2, r2
   1b980:	subcs	r0, r0, r1, lsl #28
   1b984:	cmp	r0, r1, lsl #27
   1b988:	adc	r2, r2, r2
   1b98c:	subcs	r0, r0, r1, lsl #27
   1b990:	cmp	r0, r1, lsl #26
   1b994:	adc	r2, r2, r2
   1b998:	subcs	r0, r0, r1, lsl #26
   1b99c:	cmp	r0, r1, lsl #25
   1b9a0:	adc	r2, r2, r2
   1b9a4:	subcs	r0, r0, r1, lsl #25
   1b9a8:	cmp	r0, r1, lsl #24
   1b9ac:	adc	r2, r2, r2
   1b9b0:	subcs	r0, r0, r1, lsl #24
   1b9b4:	cmp	r0, r1, lsl #23
   1b9b8:	adc	r2, r2, r2
   1b9bc:	subcs	r0, r0, r1, lsl #23
   1b9c0:	cmp	r0, r1, lsl #22
   1b9c4:	adc	r2, r2, r2
   1b9c8:	subcs	r0, r0, r1, lsl #22
   1b9cc:	cmp	r0, r1, lsl #21
   1b9d0:	adc	r2, r2, r2
   1b9d4:	subcs	r0, r0, r1, lsl #21
   1b9d8:	cmp	r0, r1, lsl #20
   1b9dc:	adc	r2, r2, r2
   1b9e0:	subcs	r0, r0, r1, lsl #20
   1b9e4:	cmp	r0, r1, lsl #19
   1b9e8:	adc	r2, r2, r2
   1b9ec:	subcs	r0, r0, r1, lsl #19
   1b9f0:	cmp	r0, r1, lsl #18
   1b9f4:	adc	r2, r2, r2
   1b9f8:	subcs	r0, r0, r1, lsl #18
   1b9fc:	cmp	r0, r1, lsl #17
   1ba00:	adc	r2, r2, r2
   1ba04:	subcs	r0, r0, r1, lsl #17
   1ba08:	cmp	r0, r1, lsl #16
   1ba0c:	adc	r2, r2, r2
   1ba10:	subcs	r0, r0, r1, lsl #16
   1ba14:	cmp	r0, r1, lsl #15
   1ba18:	adc	r2, r2, r2
   1ba1c:	subcs	r0, r0, r1, lsl #15
   1ba20:	cmp	r0, r1, lsl #14
   1ba24:	adc	r2, r2, r2
   1ba28:	subcs	r0, r0, r1, lsl #14
   1ba2c:	cmp	r0, r1, lsl #13
   1ba30:	adc	r2, r2, r2
   1ba34:	subcs	r0, r0, r1, lsl #13
   1ba38:	cmp	r0, r1, lsl #12
   1ba3c:	adc	r2, r2, r2
   1ba40:	subcs	r0, r0, r1, lsl #12
   1ba44:	cmp	r0, r1, lsl #11
   1ba48:	adc	r2, r2, r2
   1ba4c:	subcs	r0, r0, r1, lsl #11
   1ba50:	cmp	r0, r1, lsl #10
   1ba54:	adc	r2, r2, r2
   1ba58:	subcs	r0, r0, r1, lsl #10
   1ba5c:	cmp	r0, r1, lsl #9
   1ba60:	adc	r2, r2, r2
   1ba64:	subcs	r0, r0, r1, lsl #9
   1ba68:	cmp	r0, r1, lsl #8
   1ba6c:	adc	r2, r2, r2
   1ba70:	subcs	r0, r0, r1, lsl #8
   1ba74:	cmp	r0, r1, lsl #7
   1ba78:	adc	r2, r2, r2
   1ba7c:	subcs	r0, r0, r1, lsl #7
   1ba80:	cmp	r0, r1, lsl #6
   1ba84:	adc	r2, r2, r2
   1ba88:	subcs	r0, r0, r1, lsl #6
   1ba8c:	cmp	r0, r1, lsl #5
   1ba90:	adc	r2, r2, r2
   1ba94:	subcs	r0, r0, r1, lsl #5
   1ba98:	cmp	r0, r1, lsl #4
   1ba9c:	adc	r2, r2, r2
   1baa0:	subcs	r0, r0, r1, lsl #4
   1baa4:	cmp	r0, r1, lsl #3
   1baa8:	adc	r2, r2, r2
   1baac:	subcs	r0, r0, r1, lsl #3
   1bab0:	cmp	r0, r1, lsl #2
   1bab4:	adc	r2, r2, r2
   1bab8:	subcs	r0, r0, r1, lsl #2
   1babc:	cmp	r0, r1, lsl #1
   1bac0:	adc	r2, r2, r2
   1bac4:	subcs	r0, r0, r1, lsl #1
   1bac8:	cmp	r0, r1
   1bacc:	adc	r2, r2, r2
   1bad0:	subcs	r0, r0, r1
   1bad4:	mov	r0, r2
   1bad8:	bx	lr
   1badc:	moveq	r0, #1
   1bae0:	movne	r0, #0
   1bae4:	bx	lr
   1bae8:	clz	r2, r1
   1baec:	rsb	r2, r2, #31
   1baf0:	lsr	r0, r0, r2
   1baf4:	bx	lr
   1baf8:	cmp	r0, #0
   1bafc:	mvnne	r0, #0
   1bb00:	b	1bb24 <__assert_fail@plt+0xa590>
   1bb04:	cmp	r1, #0
   1bb08:	beq	1baf8 <__assert_fail@plt+0xa564>
   1bb0c:	push	{r0, r1, lr}
   1bb10:	bl	1b918 <__assert_fail@plt+0xa384>
   1bb14:	pop	{r1, r2, lr}
   1bb18:	mul	r3, r2, r0
   1bb1c:	sub	r1, r1, r3
   1bb20:	bx	lr
   1bb24:	push	{r1, lr}
   1bb28:	mov	r0, #8
   1bb2c:	bl	11258 <raise@plt>
   1bb30:	pop	{r1, pc}
   1bb34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bb38:	mov	r7, r0
   1bb3c:	ldr	r6, [pc, #72]	; 1bb8c <__assert_fail@plt+0xa5f8>
   1bb40:	ldr	r5, [pc, #72]	; 1bb90 <__assert_fail@plt+0xa5fc>
   1bb44:	add	r6, pc, r6
   1bb48:	add	r5, pc, r5
   1bb4c:	sub	r6, r6, r5
   1bb50:	mov	r8, r1
   1bb54:	mov	r9, r2
   1bb58:	bl	11220 <calloc@plt-0x20>
   1bb5c:	asrs	r6, r6, #2
   1bb60:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bb64:	mov	r4, #0
   1bb68:	add	r4, r4, #1
   1bb6c:	ldr	r3, [r5], #4
   1bb70:	mov	r2, r9
   1bb74:	mov	r1, r8
   1bb78:	mov	r0, r7
   1bb7c:	blx	r3
   1bb80:	cmp	r6, r4
   1bb84:	bne	1bb68 <__assert_fail@plt+0xa5d4>
   1bb88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bb8c:	andeq	r1, r2, r8, lsr #7
   1bb90:	andeq	r1, r2, r0, lsr #7
   1bb94:	bx	lr

Disassembly of section .fini:

0001bb98 <.fini>:
   1bb98:	push	{r3, lr}
   1bb9c:	pop	{r3, pc}
