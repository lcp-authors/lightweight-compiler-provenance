
raspbian-preinstalled/findmnt:     file format elf32-littlearm


Disassembly of section .init:

0001244c <.init>:
   1244c:	push	{r3, lr}
   12450:	bl	14954 <__assert_fail@plt+0x1d8c>
   12454:	pop	{r3, pc}

Disassembly of section .plt:

00012458 <mnt_table_set_parser_errcb@plt-0x14>:
   12458:	push	{lr}		; (str lr, [sp, #-4]!)
   1245c:	ldr	lr, [pc, #4]	; 12468 <mnt_table_set_parser_errcb@plt-0x4>
   12460:	add	lr, pc, lr
   12464:	ldr	pc, [lr, #8]!
   12468:	andeq	r9, r1, ip, lsl #18

0001246c <mnt_table_set_parser_errcb@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #102400	; 0x19000
   12474:	ldr	pc, [ip, #2316]!	; 0x90c

00012478 <scols_column_set_json_type@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #102400	; 0x19000
   12480:	ldr	pc, [ip, #2308]!	; 0x904

00012484 <strstr@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #102400	; 0x19000
   1248c:	ldr	pc, [ip, #2300]!	; 0x8fc

00012490 <mnt_fs_get_source@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #102400	; 0x19000
   12498:	ldr	pc, [ip, #2292]!	; 0x8f4

0001249c <raise@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #102400	; 0x19000
   124a4:	ldr	pc, [ip, #2284]!	; 0x8ec

000124a8 <mnt_get_fstype@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #102400	; 0x19000
   124b0:	ldr	pc, [ip, #2276]!	; 0x8e4

000124b4 <mnt_fs_get_id@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #102400	; 0x19000
   124bc:	ldr	pc, [ip, #2268]!	; 0x8dc

000124c0 <mnt_unref_table@plt>:
   124c0:	add	ip, pc, #0, 12
   124c4:	add	ip, ip, #102400	; 0x19000
   124c8:	ldr	pc, [ip, #2260]!	; 0x8d4

000124cc <mnt_fs_get_fstype@plt>:
   124cc:	add	ip, pc, #0, 12
   124d0:	add	ip, ip, #102400	; 0x19000
   124d4:	ldr	pc, [ip, #2252]!	; 0x8cc

000124d8 <scols_line_refer_data@plt>:
   124d8:	add	ip, pc, #0, 12
   124dc:	add	ip, ip, #102400	; 0x19000
   124e0:	ldr	pc, [ip, #2244]!	; 0x8c4

000124e4 <strcmp@plt>:
   124e4:	add	ip, pc, #0, 12
   124e8:	add	ip, ip, #102400	; 0x19000
   124ec:	ldr	pc, [ip, #2236]!	; 0x8bc

000124f0 <strtol@plt>:
   124f0:	add	ip, pc, #0, 12
   124f4:	add	ip, ip, #102400	; 0x19000
   124f8:	ldr	pc, [ip, #2228]!	; 0x8b4

000124fc <strcspn@plt>:
   124fc:	add	ip, pc, #0, 12
   12500:	add	ip, ip, #102400	; 0x19000
   12504:	ldr	pc, [ip, #2220]!	; 0x8ac

00012508 <scols_table_set_name@plt>:
   12508:	add	ip, pc, #0, 12
   1250c:	add	ip, ip, #102400	; 0x19000
   12510:	ldr	pc, [ip, #2212]!	; 0x8a4

00012514 <scols_table_enable_noheadings@plt>:
   12514:	add	ip, pc, #0, 12
   12518:	add	ip, ip, #102400	; 0x19000
   1251c:	ldr	pc, [ip, #2204]!	; 0x89c

00012520 <scols_table_new_column@plt>:
   12520:	add	ip, pc, #0, 12
   12524:	add	ip, ip, #102400	; 0x19000
   12528:	ldr	pc, [ip, #2196]!	; 0x894

0001252c <mnt_table_find_source@plt>:
   1252c:	add	ip, pc, #0, 12
   12530:	add	ip, ip, #102400	; 0x19000
   12534:	ldr	pc, [ip, #2188]!	; 0x88c

00012538 <fflush@plt>:
   12538:	add	ip, pc, #0, 12
   1253c:	add	ip, ip, #102400	; 0x19000
   12540:	ldr	pc, [ip, #2180]!	; 0x884

00012544 <scols_free_iter@plt>:
   12544:	add	ip, pc, #0, 12
   12548:	add	ip, ip, #102400	; 0x19000
   1254c:	ldr	pc, [ip, #2172]!	; 0x87c

00012550 <mnt_reset_table@plt>:
   12550:	add	ip, pc, #0, 12
   12554:	add	ip, ip, #102400	; 0x19000
   12558:	ldr	pc, [ip, #2164]!	; 0x874

0001255c <free@plt>:
   1255c:	add	ip, pc, #0, 12
   12560:	add	ip, ip, #102400	; 0x19000
   12564:	ldr	pc, [ip, #2156]!	; 0x86c

00012568 <fgets@plt>:
   12568:	add	ip, pc, #0, 12
   1256c:	add	ip, ip, #102400	; 0x19000
   12570:	ldr	pc, [ip, #2148]!	; 0x864

00012574 <mnt_table_next_fs@plt>:
   12574:	add	ip, pc, #0, 12
   12578:	add	ip, ip, #102400	; 0x19000
   1257c:	ldr	pc, [ip, #2140]!	; 0x85c

00012580 <scols_table_enable_raw@plt>:
   12580:	add	ip, pc, #0, 12
   12584:	add	ip, ip, #102400	; 0x19000
   12588:	ldr	pc, [ip, #2132]!	; 0x854

0001258c <ferror@plt>:
   1258c:	add	ip, pc, #0, 12
   12590:	add	ip, ip, #102400	; 0x19000
   12594:	ldr	pc, [ip, #2124]!	; 0x84c

00012598 <strndup@plt>:
   12598:	add	ip, pc, #0, 12
   1259c:	add	ip, ip, #102400	; 0x19000
   125a0:	ldr	pc, [ip, #2116]!	; 0x844

000125a4 <_exit@plt>:
   125a4:	add	ip, pc, #0, 12
   125a8:	add	ip, ip, #102400	; 0x19000
   125ac:	ldr	pc, [ip, #2108]!	; 0x83c

000125b0 <memcpy@plt>:
   125b0:	add	ip, pc, #0, 12
   125b4:	add	ip, ip, #102400	; 0x19000
   125b8:	ldr	pc, [ip, #2100]!	; 0x834

000125bc <mnt_new_iter@plt>:
   125bc:	add	ip, pc, #0, 12
   125c0:	add	ip, ip, #102400	; 0x19000
   125c4:	ldr	pc, [ip, #2092]!	; 0x82c

000125c8 <__strtoull_internal@plt>:
   125c8:	add	ip, pc, #0, 12
   125cc:	add	ip, ip, #102400	; 0x19000
   125d0:	ldr	pc, [ip, #2084]!	; 0x824

000125d4 <mnt_table_parse_mtab@plt>:
   125d4:	add	ip, pc, #0, 12
   125d8:	add	ip, ip, #102400	; 0x19000
   125dc:	ldr	pc, [ip, #2076]!	; 0x81c

000125e0 <mnt_resolve_target@plt>:
   125e0:	add	ip, pc, #0, 12
   125e4:	add	ip, ip, #102400	; 0x19000
   125e8:	ldr	pc, [ip, #2068]!	; 0x814

000125ec <mnt_fs_get_user_options@plt>:
   125ec:	add	ip, pc, #0, 12
   125f0:	add	ip, ip, #102400	; 0x19000
   125f4:	ldr	pc, [ip, #2060]!	; 0x80c

000125f8 <mnt_tabdiff_next_change@plt>:
   125f8:	add	ip, pc, #0, 12
   125fc:	add	ip, ip, #102400	; 0x19000
   12600:	ldr	pc, [ip, #2052]!	; 0x804

00012604 <scols_table_print_range@plt>:
   12604:	add	ip, pc, #0, 12
   12608:	add	ip, ip, #102400	; 0x19000
   1260c:	ldr	pc, [ip, #2044]!	; 0x7fc

00012610 <uname@plt>:
   12610:	add	ip, pc, #0, 12
   12614:	add	ip, ip, #102400	; 0x19000
   12618:	ldr	pc, [ip, #2036]!	; 0x7f4

0001261c <dcgettext@plt>:
   1261c:	add	ip, pc, #0, 12
   12620:	add	ip, ip, #102400	; 0x19000
   12624:	ldr	pc, [ip, #2028]!	; 0x7ec

00012628 <strdup@plt>:
   12628:	add	ip, pc, #0, 12
   1262c:	add	ip, ip, #102400	; 0x19000
   12630:	ldr	pc, [ip, #2020]!	; 0x7e4

00012634 <__stack_chk_fail@plt>:
   12634:	add	ip, pc, #0, 12
   12638:	add	ip, ip, #102400	; 0x19000
   1263c:	ldr	pc, [ip, #2012]!	; 0x7dc

00012640 <mnt_cache_find_tag_value@plt>:
   12640:	add	ip, pc, #0, 12
   12644:	add	ip, ip, #102400	; 0x19000
   12648:	ldr	pc, [ip, #2004]!	; 0x7d4

0001264c <rewind@plt>:
   1264c:	add	ip, pc, #0, 12
   12650:	add	ip, ip, #102400	; 0x19000
   12654:	ldr	pc, [ip, #1996]!	; 0x7cc

00012658 <realloc@plt>:
   12658:	add	ip, pc, #0, 12
   1265c:	add	ip, ip, #102400	; 0x19000
   12660:	ldr	pc, [ip, #1988]!	; 0x7c4

00012664 <mnt_new_table@plt>:
   12664:	add	ip, pc, #0, 12
   12668:	add	ip, ip, #102400	; 0x19000
   1266c:	ldr	pc, [ip, #1980]!	; 0x7bc

00012670 <textdomain@plt>:
   12670:	add	ip, pc, #0, 12
   12674:	add	ip, ip, #102400	; 0x19000
   12678:	ldr	pc, [ip, #1972]!	; 0x7b4

0001267c <scols_table_remove_lines@plt>:
   1267c:	add	ip, pc, #0, 12
   12680:	add	ip, ip, #102400	; 0x19000
   12684:	ldr	pc, [ip, #1964]!	; 0x7ac

00012688 <mnt_resolve_spec@plt>:
   12688:	add	ip, pc, #0, 12
   1268c:	add	ip, ip, #102400	; 0x19000
   12690:	ldr	pc, [ip, #1956]!	; 0x7a4

00012694 <err@plt>:
   12694:	add	ip, pc, #0, 12
   12698:	add	ip, ip, #102400	; 0x19000
   1269c:	ldr	pc, [ip, #1948]!	; 0x79c

000126a0 <poll@plt>:
   126a0:	add	ip, pc, #0, 12
   126a4:	add	ip, ip, #102400	; 0x19000
   126a8:	ldr	pc, [ip, #1940]!	; 0x794

000126ac <udev_new@plt>:
   126ac:	add	ip, pc, #0, 12
   126b0:	add	ip, ip, #102400	; 0x19000
   126b4:	ldr	pc, [ip, #1932]!	; 0x78c

000126b8 <mnt_fs_get_fs_options@plt>:
   126b8:	add	ip, pc, #0, 12
   126bc:	add	ip, ip, #102400	; 0x19000
   126c0:	ldr	pc, [ip, #1924]!	; 0x784

000126c4 <scols_new_table@plt>:
   126c4:	add	ip, pc, #0, 12
   126c8:	add	ip, ip, #102400	; 0x19000
   126cc:	ldr	pc, [ip, #1916]!	; 0x77c

000126d0 <scols_table_enable_ascii@plt>:
   126d0:	add	ip, pc, #0, 12
   126d4:	add	ip, ip, #102400	; 0x19000
   126d8:	ldr	pc, [ip, #1908]!	; 0x774

000126dc <mnt_table_parse_stream@plt>:
   126dc:	add	ip, pc, #0, 12
   126e0:	add	ip, ip, #102400	; 0x19000
   126e4:	ldr	pc, [ip, #1900]!	; 0x76c

000126e8 <scols_table_enable_export@plt>:
   126e8:	add	ip, pc, #0, 12
   126ec:	add	ip, ip, #102400	; 0x19000
   126f0:	ldr	pc, [ip, #1892]!	; 0x764

000126f4 <__fpending@plt>:
   126f4:	add	ip, pc, #0, 12
   126f8:	add	ip, ip, #102400	; 0x19000
   126fc:	ldr	pc, [ip, #1884]!	; 0x75c

00012700 <scols_line_set_userdata@plt>:
   12700:	add	ip, pc, #0, 12
   12704:	add	ip, ip, #102400	; 0x19000
   12708:	ldr	pc, [ip, #1876]!	; 0x754

0001270c <mnt_diff_tables@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #102400	; 0x19000
   12714:	ldr	pc, [ip, #1868]!	; 0x74c

00012718 <scols_table_get_stream@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #102400	; 0x19000
   12720:	ldr	pc, [ip, #1860]!	; 0x744

00012724 <mnt_fs_get_target@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #102400	; 0x19000
   1272c:	ldr	pc, [ip, #1852]!	; 0x73c

00012730 <mnt_fs_get_optional_fields@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #102400	; 0x19000
   12738:	ldr	pc, [ip, #1844]!	; 0x734

0001273c <mnt_fs_get_root@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #102400	; 0x19000
   12744:	ldr	pc, [ip, #1836]!	; 0x72c

00012748 <mnt_table_uniq_fs@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #102400	; 0x19000
   12750:	ldr	pc, [ip, #1828]!	; 0x724

00012754 <mnt_fs_get_tid@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #102400	; 0x19000
   1275c:	ldr	pc, [ip, #1820]!	; 0x71c

00012760 <mnt_free_tabdiff@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #102400	; 0x19000
   12768:	ldr	pc, [ip, #1812]!	; 0x714

0001276c <malloc@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #102400	; 0x19000
   12774:	ldr	pc, [ip, #1804]!	; 0x70c

00012778 <mnt_fs_get_freq@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #102400	; 0x19000
   12780:	ldr	pc, [ip, #1796]!	; 0x704

00012784 <__libc_start_main@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #102400	; 0x19000
   1278c:	ldr	pc, [ip, #1788]!	; 0x6fc

00012790 <scols_table_new_line@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #102400	; 0x19000
   12798:	ldr	pc, [ip, #1780]!	; 0x6f4

0001279c <scols_unref_table@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #102400	; 0x19000
   127a4:	ldr	pc, [ip, #1772]!	; 0x6ec

000127a8 <__vfprintf_chk@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #102400	; 0x19000
   127b0:	ldr	pc, [ip, #1764]!	; 0x6e4

000127b4 <mnt_fs_get_vfs_options@plt>:
   127b4:	add	ip, pc, #0, 12
   127b8:	add	ip, ip, #102400	; 0x19000
   127bc:	ldr	pc, [ip, #1756]!	; 0x6dc

000127c0 <__ctype_tolower_loc@plt>:
   127c0:	add	ip, pc, #0, 12
   127c4:	add	ip, ip, #102400	; 0x19000
   127c8:	ldr	pc, [ip, #1748]!	; 0x6d4

000127cc <__gmon_start__@plt>:
   127cc:	add	ip, pc, #0, 12
   127d0:	add	ip, ip, #102400	; 0x19000
   127d4:	ldr	pc, [ip, #1740]!	; 0x6cc

000127d8 <getopt_long@plt>:
   127d8:	add	ip, pc, #0, 12
   127dc:	add	ip, ip, #102400	; 0x19000
   127e0:	ldr	pc, [ip, #1732]!	; 0x6c4

000127e4 <__ctype_b_loc@plt>:
   127e4:	add	ip, pc, #0, 12
   127e8:	add	ip, ip, #102400	; 0x19000
   127ec:	ldr	pc, [ip, #1724]!	; 0x6bc

000127f0 <mnt_fs_get_srcpath@plt>:
   127f0:	add	ip, pc, #0, 12
   127f4:	add	ip, ip, #102400	; 0x19000
   127f8:	ldr	pc, [ip, #1716]!	; 0x6b4

000127fc <exit@plt>:
   127fc:	add	ip, pc, #0, 12
   12800:	add	ip, ip, #102400	; 0x19000
   12804:	ldr	pc, [ip, #1708]!	; 0x6ac

00012808 <feof@plt>:
   12808:	add	ip, pc, #0, 12
   1280c:	add	ip, ip, #102400	; 0x19000
   12810:	ldr	pc, [ip, #1700]!	; 0x6a4

00012814 <udev_unref@plt>:
   12814:	add	ip, pc, #0, 12
   12818:	add	ip, ip, #102400	; 0x19000
   1281c:	ldr	pc, [ip, #1692]!	; 0x69c

00012820 <strtoul@plt>:
   12820:	add	ip, pc, #0, 12
   12824:	add	ip, ip, #102400	; 0x19000
   12828:	ldr	pc, [ip, #1684]!	; 0x694

0001282c <strlen@plt>:
   1282c:	add	ip, pc, #0, 12
   12830:	add	ip, ip, #102400	; 0x19000
   12834:	ldr	pc, [ip, #1676]!	; 0x68c

00012838 <scols_table_next_line@plt>:
   12838:	add	ip, pc, #0, 12
   1283c:	add	ip, ip, #102400	; 0x19000
   12840:	ldr	pc, [ip, #1668]!	; 0x684

00012844 <strchr@plt>:
   12844:	add	ip, pc, #0, 12
   12848:	add	ip, ip, #102400	; 0x19000
   1284c:	ldr	pc, [ip, #1660]!	; 0x67c

00012850 <warnx@plt>:
   12850:	add	ip, pc, #0, 12
   12854:	add	ip, ip, #102400	; 0x19000
   12858:	ldr	pc, [ip, #1652]!	; 0x674

0001285c <mnt_init_debug@plt>:
   1285c:	add	ip, pc, #0, 12
   12860:	add	ip, ip, #102400	; 0x19000
   12864:	ldr	pc, [ip, #1644]!	; 0x66c

00012868 <mnt_new_cache@plt>:
   12868:	add	ip, pc, #0, 12
   1286c:	add	ip, ip, #102400	; 0x19000
   12870:	ldr	pc, [ip, #1636]!	; 0x664

00012874 <mnt_fs_get_tag@plt>:
   12874:	add	ip, pc, #0, 12
   12878:	add	ip, ip, #102400	; 0x19000
   1287c:	ldr	pc, [ip, #1628]!	; 0x65c

00012880 <__errno_location@plt>:
   12880:	add	ip, pc, #0, 12
   12884:	add	ip, ip, #102400	; 0x19000
   12888:	ldr	pc, [ip, #1620]!	; 0x654

0001288c <mnt_resolve_path@plt>:
   1288c:	add	ip, pc, #0, 12
   12890:	add	ip, ip, #102400	; 0x19000
   12894:	ldr	pc, [ip, #1612]!	; 0x64c

00012898 <mnt_table_set_iter@plt>:
   12898:	add	ip, pc, #0, 12
   1289c:	add	ip, ip, #102400	; 0x19000
   128a0:	ldr	pc, [ip, #1604]!	; 0x644

000128a4 <mnt_iter_get_direction@plt>:
   128a4:	add	ip, pc, #0, 12
   128a8:	add	ip, ip, #102400	; 0x19000
   128ac:	ldr	pc, [ip, #1596]!	; 0x63c

000128b0 <mnt_fs_is_pseudofs@plt>:
   128b0:	add	ip, pc, #0, 12
   128b4:	add	ip, ip, #102400	; 0x19000
   128b8:	ldr	pc, [ip, #1588]!	; 0x634

000128bc <strncasecmp@plt>:
   128bc:	add	ip, pc, #0, 12
   128c0:	add	ip, ip, #102400	; 0x19000
   128c4:	ldr	pc, [ip, #1580]!	; 0x62c

000128c8 <__cxa_atexit@plt>:
   128c8:	add	ip, pc, #0, 12
   128cc:	add	ip, ip, #102400	; 0x19000
   128d0:	ldr	pc, [ip, #1572]!	; 0x624

000128d4 <__vasprintf_chk@plt>:
   128d4:	add	ip, pc, #0, 12
   128d8:	add	ip, ip, #102400	; 0x19000
   128dc:	ldr	pc, [ip, #1564]!	; 0x61c

000128e0 <mnt_fs_get_option@plt>:
   128e0:	add	ip, pc, #0, 12
   128e4:	add	ip, ip, #102400	; 0x19000
   128e8:	ldr	pc, [ip, #1556]!	; 0x614

000128ec <blkid_parse_tag_string@plt>:
   128ec:	add	ip, pc, #0, 12
   128f0:	add	ip, ip, #102400	; 0x19000
   128f4:	ldr	pc, [ip, #1548]!	; 0x60c

000128f8 <memset@plt>:
   128f8:	add	ip, pc, #0, 12
   128fc:	add	ip, ip, #102400	; 0x19000
   12900:	ldr	pc, [ip, #1540]!	; 0x604

00012904 <mnt_free_iter@plt>:
   12904:	add	ip, pc, #0, 12
   12908:	add	ip, ip, #102400	; 0x19000
   1290c:	ldr	pc, [ip, #1532]!	; 0x5fc

00012910 <mnt_unref_cache@plt>:
   12910:	add	ip, pc, #0, 12
   12914:	add	ip, ip, #102400	; 0x19000
   12918:	ldr	pc, [ip, #1524]!	; 0x5f4

0001291c <mnt_fs_is_netfs@plt>:
   1291c:	add	ip, pc, #0, 12
   12920:	add	ip, ip, #102400	; 0x19000
   12924:	ldr	pc, [ip, #1516]!	; 0x5ec

00012928 <mnt_fs_match_options@plt>:
   12928:	add	ip, pc, #0, 12
   1292c:	add	ip, ip, #102400	; 0x19000
   12930:	ldr	pc, [ip, #1508]!	; 0x5e4

00012934 <mnt_table_find_next_fs@plt>:
   12934:	add	ip, pc, #0, 12
   12938:	add	ip, ip, #102400	; 0x19000
   1293c:	ldr	pc, [ip, #1500]!	; 0x5dc

00012940 <fgetc@plt>:
   12940:	add	ip, pc, #0, 12
   12944:	add	ip, ip, #102400	; 0x19000
   12948:	ldr	pc, [ip, #1492]!	; 0x5d4

0001294c <__printf_chk@plt>:
   1294c:	add	ip, pc, #0, 12
   12950:	add	ip, ip, #102400	; 0x19000
   12954:	ldr	pc, [ip, #1484]!	; 0x5cc

00012958 <statvfs64@plt>:
   12958:	add	ip, pc, #0, 12
   1295c:	add	ip, ip, #102400	; 0x19000
   12960:	ldr	pc, [ip, #1476]!	; 0x5c4

00012964 <strtod@plt>:
   12964:	add	ip, pc, #0, 12
   12968:	add	ip, ip, #102400	; 0x19000
   1296c:	ldr	pc, [ip, #1468]!	; 0x5bc

00012970 <fileno@plt>:
   12970:	add	ip, pc, #0, 12
   12974:	add	ip, ip, #102400	; 0x19000
   12978:	ldr	pc, [ip, #1460]!	; 0x5b4

0001297c <mnt_new_tabdiff@plt>:
   1297c:	add	ip, pc, #0, 12
   12980:	add	ip, ip, #102400	; 0x19000
   12984:	ldr	pc, [ip, #1452]!	; 0x5ac

00012988 <mnt_table_set_cache@plt>:
   12988:	add	ip, pc, #0, 12
   1298c:	add	ip, ip, #102400	; 0x19000
   12990:	ldr	pc, [ip, #1444]!	; 0x5a4

00012994 <scols_table_enable_json@plt>:
   12994:	add	ip, pc, #0, 12
   12998:	add	ip, ip, #102400	; 0x19000
   1299c:	ldr	pc, [ip, #1436]!	; 0x59c

000129a0 <mnt_fs_is_kernel@plt>:
   129a0:	add	ip, pc, #0, 12
   129a4:	add	ip, ip, #102400	; 0x19000
   129a8:	ldr	pc, [ip, #1428]!	; 0x594

000129ac <__fprintf_chk@plt>:
   129ac:	add	ip, pc, #0, 12
   129b0:	add	ip, ip, #102400	; 0x19000
   129b4:	ldr	pc, [ip, #1420]!	; 0x58c

000129b8 <mnt_table_find_target@plt>:
   129b8:	add	ip, pc, #0, 12
   129bc:	add	ip, ip, #102400	; 0x19000
   129c0:	ldr	pc, [ip, #1412]!	; 0x584

000129c4 <access@plt>:
   129c4:	add	ip, pc, #0, 12
   129c8:	add	ip, ip, #102400	; 0x19000
   129cc:	ldr	pc, [ip, #1404]!	; 0x57c

000129d0 <scols_line_get_userdata@plt>:
   129d0:	add	ip, pc, #0, 12
   129d4:	add	ip, ip, #102400	; 0x19000
   129d8:	ldr	pc, [ip, #1396]!	; 0x574

000129dc <fclose@plt>:
   129dc:	add	ip, pc, #0, 12
   129e0:	add	ip, ip, #102400	; 0x19000
   129e4:	ldr	pc, [ip, #1388]!	; 0x56c

000129e8 <mnt_resolve_tag@plt>:
   129e8:	add	ip, pc, #0, 12
   129ec:	add	ip, ip, #102400	; 0x19000
   129f0:	ldr	pc, [ip, #1380]!	; 0x564

000129f4 <mnt_fs_match_fstype@plt>:
   129f4:	add	ip, pc, #0, 12
   129f8:	add	ip, ip, #102400	; 0x19000
   129fc:	ldr	pc, [ip, #1372]!	; 0x55c

00012a00 <mnt_fs_get_devno@plt>:
   12a00:	add	ip, pc, #0, 12
   12a04:	add	ip, ip, #102400	; 0x19000
   12a08:	ldr	pc, [ip, #1364]!	; 0x554

00012a0c <udev_device_new_from_subsystem_sysname@plt>:
   12a0c:	add	ip, pc, #0, 12
   12a10:	add	ip, ip, #102400	; 0x19000
   12a14:	ldr	pc, [ip, #1356]!	; 0x54c

00012a18 <mnt_table_get_root_fs@plt>:
   12a18:	add	ip, pc, #0, 12
   12a1c:	add	ip, ip, #102400	; 0x19000
   12a20:	ldr	pc, [ip, #1348]!	; 0x544

00012a24 <setlocale@plt>:
   12a24:	add	ip, pc, #0, 12
   12a28:	add	ip, ip, #102400	; 0x19000
   12a2c:	ldr	pc, [ip, #1340]!	; 0x53c

00012a30 <mnt_fs_match_target@plt>:
   12a30:	add	ip, pc, #0, 12
   12a34:	add	ip, ip, #102400	; 0x19000
   12a38:	ldr	pc, [ip, #1332]!	; 0x534

00012a3c <errx@plt>:
   12a3c:	add	ip, pc, #0, 12
   12a40:	add	ip, ip, #102400	; 0x19000
   12a44:	ldr	pc, [ip, #1324]!	; 0x52c

00012a48 <mnt_fs_match_source@plt>:
   12a48:	add	ip, pc, #0, 12
   12a4c:	add	ip, ip, #102400	; 0x19000
   12a50:	ldr	pc, [ip, #1316]!	; 0x524

00012a54 <strrchr@plt>:
   12a54:	add	ip, pc, #0, 12
   12a58:	add	ip, ip, #102400	; 0x19000
   12a5c:	ldr	pc, [ip, #1308]!	; 0x51c

00012a60 <warn@plt>:
   12a60:	add	ip, pc, #0, 12
   12a64:	add	ip, ip, #102400	; 0x19000
   12a68:	ldr	pc, [ip, #1300]!	; 0x514

00012a6c <scols_print_table@plt>:
   12a6c:	add	ip, pc, #0, 12
   12a70:	add	ip, ip, #102400	; 0x19000
   12a74:	ldr	pc, [ip, #1292]!	; 0x50c

00012a78 <mnt_fs_get_propagation@plt>:
   12a78:	add	ip, pc, #0, 12
   12a7c:	add	ip, ip, #102400	; 0x19000
   12a80:	ldr	pc, [ip, #1284]!	; 0x504

00012a84 <fputc@plt>:
   12a84:	add	ip, pc, #0, 12
   12a88:	add	ip, ip, #102400	; 0x19000
   12a8c:	ldr	pc, [ip, #1276]!	; 0x4fc

00012a90 <sscanf@plt>:
   12a90:	add	ip, pc, #0, 12
   12a94:	add	ip, ip, #102400	; 0x19000
   12a98:	ldr	pc, [ip, #1268]!	; 0x4f4

00012a9c <localeconv@plt>:
   12a9c:	add	ip, pc, #0, 12
   12aa0:	add	ip, ip, #102400	; 0x19000
   12aa4:	ldr	pc, [ip, #1260]!	; 0x4ec

00012aa8 <udev_device_get_property_value@plt>:
   12aa8:	add	ip, pc, #0, 12
   12aac:	add	ip, ip, #102400	; 0x19000
   12ab0:	ldr	pc, [ip, #1252]!	; 0x4e4

00012ab4 <scols_new_iter@plt>:
   12ab4:	add	ip, pc, #0, 12
   12ab8:	add	ip, ip, #102400	; 0x19000
   12abc:	ldr	pc, [ip, #1244]!	; 0x4dc

00012ac0 <mnt_table_find_mountpoint@plt>:
   12ac0:	add	ip, pc, #0, 12
   12ac4:	add	ip, ip, #102400	; 0x19000
   12ac8:	ldr	pc, [ip, #1236]!	; 0x4d4

00012acc <__strtoll_internal@plt>:
   12acc:	add	ip, pc, #0, 12
   12ad0:	add	ip, ip, #102400	; 0x19000
   12ad4:	ldr	pc, [ip, #1228]!	; 0x4cc

00012ad8 <fopen64@plt>:
   12ad8:	add	ip, pc, #0, 12
   12adc:	add	ip, ip, #102400	; 0x19000
   12ae0:	ldr	pc, [ip, #1220]!	; 0x4c4

00012ae4 <mnt_fs_is_swaparea@plt>:
   12ae4:	add	ip, pc, #0, 12
   12ae8:	add	ip, ip, #102400	; 0x19000
   12aec:	ldr	pc, [ip, #1212]!	; 0x4bc

00012af0 <mnt_cache_set_targets@plt>:
   12af0:	add	ip, pc, #0, 12
   12af4:	add	ip, ip, #102400	; 0x19000
   12af8:	ldr	pc, [ip, #1204]!	; 0x4b4

00012afc <udev_device_unref@plt>:
   12afc:	add	ip, pc, #0, 12
   12b00:	add	ip, ip, #102400	; 0x19000
   12b04:	ldr	pc, [ip, #1196]!	; 0x4ac

00012b08 <bindtextdomain@plt>:
   12b08:	add	ip, pc, #0, 12
   12b0c:	add	ip, ip, #102400	; 0x19000
   12b10:	ldr	pc, [ip, #1188]!	; 0x4a4

00012b14 <mnt_table_next_child_fs@plt>:
   12b14:	add	ip, pc, #0, 12
   12b18:	add	ip, ip, #102400	; 0x19000
   12b1c:	ldr	pc, [ip, #1180]!	; 0x49c

00012b20 <mnt_fs_get_options@plt>:
   12b20:	add	ip, pc, #0, 12
   12b24:	add	ip, ip, #102400	; 0x19000
   12b28:	ldr	pc, [ip, #1172]!	; 0x494

00012b2c <mnt_table_parse_fstab@plt>:
   12b2c:	add	ip, pc, #0, 12
   12b30:	add	ip, ip, #102400	; 0x19000
   12b34:	ldr	pc, [ip, #1164]!	; 0x48c

00012b38 <__xstat64@plt>:
   12b38:	add	ip, pc, #0, 12
   12b3c:	add	ip, ip, #102400	; 0x19000
   12b40:	ldr	pc, [ip, #1156]!	; 0x484

00012b44 <mnt_fs_get_passno@plt>:
   12b44:	add	ip, pc, #0, 12
   12b48:	add	ip, ip, #102400	; 0x19000
   12b4c:	ldr	pc, [ip, #1148]!	; 0x47c

00012b50 <fputs@plt>:
   12b50:	add	ip, pc, #0, 12
   12b54:	add	ip, ip, #102400	; 0x19000
   12b58:	ldr	pc, [ip, #1140]!	; 0x474

00012b5c <strncmp@plt>:
   12b5c:	add	ip, pc, #0, 12
   12b60:	add	ip, ip, #102400	; 0x19000
   12b64:	ldr	pc, [ip, #1132]!	; 0x46c

00012b68 <abort@plt>:
   12b68:	add	ip, pc, #0, 12
   12b6c:	add	ip, ip, #102400	; 0x19000
   12b70:	ldr	pc, [ip, #1124]!	; 0x464

00012b74 <mnt_reset_iter@plt>:
   12b74:	add	ip, pc, #0, 12
   12b78:	add	ip, ip, #102400	; 0x19000
   12b7c:	ldr	pc, [ip, #1116]!	; 0x45c

00012b80 <realpath@plt>:
   12b80:	add	ip, pc, #0, 12
   12b84:	add	ip, ip, #102400	; 0x19000
   12b88:	ldr	pc, [ip, #1108]!	; 0x454

00012b8c <mnt_table_parse_file@plt>:
   12b8c:	add	ip, pc, #0, 12
   12b90:	add	ip, ip, #102400	; 0x19000
   12b94:	ldr	pc, [ip, #1100]!	; 0x44c

00012b98 <dcngettext@plt>:
   12b98:	add	ip, pc, #0, 12
   12b9c:	add	ip, ip, #102400	; 0x19000
   12ba0:	ldr	pc, [ip, #1092]!	; 0x444

00012ba4 <__snprintf_chk@plt>:
   12ba4:	add	ip, pc, #0, 12
   12ba8:	add	ip, ip, #102400	; 0x19000
   12bac:	ldr	pc, [ip, #1084]!	; 0x43c

00012bb0 <scols_init_debug@plt>:
   12bb0:	add	ip, pc, #0, 12
   12bb4:	add	ip, ip, #102400	; 0x19000
   12bb8:	ldr	pc, [ip, #1076]!	; 0x434

00012bbc <strspn@plt>:
   12bbc:	add	ip, pc, #0, 12
   12bc0:	add	ip, ip, #102400	; 0x19000
   12bc4:	ldr	pc, [ip, #1068]!	; 0x42c

00012bc8 <__assert_fail@plt>:
   12bc8:	add	ip, pc, #0, 12
   12bcc:	add	ip, ip, #102400	; 0x19000
   12bd0:	ldr	pc, [ip, #1060]!	; 0x424

Disassembly of section .text:

00012bd8 <.text>:
   12bd8:	ldr	r3, [pc, #3484]	; 1397c <__assert_fail@plt+0xdb4>
   12bdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12be0:	sub	sp, sp, #132	; 0x84
   12be4:	ldr	r3, [r3]
   12be8:	mov	r2, #40	; 0x28
   12bec:	mov	r6, r0
   12bf0:	mov	r7, r1
   12bf4:	add	r0, sp, #84	; 0x54
   12bf8:	mov	r1, #0
   12bfc:	str	r3, [sp, #124]	; 0x7c
   12c00:	bl	128f8 <memset@plt>
   12c04:	ldr	r1, [pc, #3444]	; 13980 <__assert_fail@plt+0xdb8>
   12c08:	mov	r0, #6
   12c0c:	bl	12a24 <setlocale@plt>
   12c10:	ldr	fp, [pc, #3436]	; 13984 <__assert_fail@plt+0xdbc>
   12c14:	ldr	r1, [pc, #3436]	; 13988 <__assert_fail@plt+0xdc0>
   12c18:	ldr	r0, [pc, #3436]	; 1398c <__assert_fail@plt+0xdc4>
   12c1c:	bl	12b08 <bindtextdomain@plt>
   12c20:	ldr	r0, [pc, #3428]	; 1398c <__assert_fail@plt+0xdc4>
   12c24:	bl	12670 <textdomain@plt>
   12c28:	ldr	r0, [pc, #3424]	; 13990 <__assert_fail@plt+0xdc8>
   12c2c:	bl	19878 <__assert_fail@plt+0x6cb0>
   12c30:	ldr	r3, [fp]
   12c34:	mov	r2, fp
   12c38:	ldr	r9, [pc, #3740]	; 13adc <__assert_fail@plt+0xf14>
   12c3c:	ldr	r8, [pc, #3408]	; 13994 <__assert_fail@plt+0xdcc>
   12c40:	orr	r3, r3, #16777216	; 0x1000000
   12c44:	mov	sl, #0
   12c48:	str	r3, [r2], #16
   12c4c:	mvn	r3, #0
   12c50:	str	r2, [sp, #36]	; 0x24
   12c54:	str	sl, [sp, #28]
   12c58:	str	sl, [sp, #20]
   12c5c:	str	sl, [sp, #8]
   12c60:	str	sl, [sp, #16]
   12c64:	str	sl, [sp, #24]
   12c68:	str	sl, [sp, #12]
   12c6c:	str	r3, [sp, #32]
   12c70:	mov	r3, #0
   12c74:	str	r3, [sp]
   12c78:	mov	r2, r8
   12c7c:	mov	r3, r9
   12c80:	mov	r1, r7
   12c84:	mov	r0, r6
   12c88:	bl	127d8 <getopt_long@plt>
   12c8c:	cmn	r0, #1
   12c90:	beq	13274 <__assert_fail@plt+0x6ac>
   12c94:	cmp	r0, #66	; 0x42
   12c98:	ble	12d1c <__assert_fail@plt+0x154>
   12c9c:	ldr	r5, [pc, #3316]	; 13998 <__assert_fail@plt+0xdd0>
   12ca0:	add	r2, sp, #84	; 0x54
   12ca4:	mov	r3, #67	; 0x43
   12ca8:	cmp	r0, r3
   12cac:	blt	12cf8 <__assert_fail@plt+0x130>
   12cb0:	beq	12ce0 <__assert_fail@plt+0x118>
   12cb4:	mov	ip, r5
   12cb8:	ldr	r1, [ip, #4]!
   12cbc:	cmp	r0, r1
   12cc0:	movlt	r3, #0
   12cc4:	movge	r3, #1
   12cc8:	cmp	r1, #0
   12ccc:	moveq	r3, #0
   12cd0:	cmp	r3, #0
   12cd4:	beq	12cf8 <__assert_fail@plt+0x130>
   12cd8:	cmp	r0, r1
   12cdc:	bne	12cb8 <__assert_fail@plt+0xf0>
   12ce0:	ldr	r3, [r2]
   12ce4:	cmp	r3, #0
   12ce8:	streq	r0, [r2]
   12cec:	beq	12cf8 <__assert_fail@plt+0x130>
   12cf0:	cmp	r0, r3
   12cf4:	bne	140b8 <__assert_fail@plt+0x14f0>
   12cf8:	ldr	r3, [r5, #64]!	; 0x40
   12cfc:	add	r2, r2, #4
   12d00:	cmp	r0, r3
   12d04:	movlt	r1, #0
   12d08:	movge	r1, #1
   12d0c:	cmp	r3, #0
   12d10:	moveq	r1, #0
   12d14:	cmp	r1, #0
   12d18:	bne	12ca8 <__assert_fail@plt+0xe0>
   12d1c:	sub	r0, r0, #65	; 0x41
   12d20:	cmp	r0, #67	; 0x43
   12d24:	ldrls	pc, [pc, r0, lsl #2]
   12d28:	b	14070 <__assert_fail@plt+0x14a8>
   12d2c:	andeq	r2, r1, r0, asr #31
   12d30:	andeq	r4, r1, r0, ror r0
   12d34:			; <UNDEFINED> instruction: 0x00012fb0
   12d38:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12d3c:	andeq	r4, r1, r0, ror r0
   12d40:	andeq	r2, r1, r4, asr pc
   12d44:	andeq	r4, r1, r0, ror r0
   12d48:	andeq	r4, r1, r0, ror r0
   12d4c:	andeq	r4, r1, r0, ror r0
   12d50:	andeq	r2, r1, r4, asr #30
   12d54:	andeq	r4, r1, r0, ror r0
   12d58:	andeq	r4, r1, r0, ror r0
   12d5c:	andeq	r2, r1, ip, lsr lr
   12d60:			; <UNDEFINED> instruction: 0x00012ebc
   12d64:	andeq	r2, r1, r8, lsr #29
   12d68:	muleq	r1, r4, lr
   12d6c:	andeq	r4, r1, r0, ror r0
   12d70:	andeq	r2, r1, r4, lsl #29
   12d74:	andeq	r2, r1, r8, ror #28
   12d78:	andeq	r2, r1, r8, asr #28
   12d7c:	andeq	r3, r1, r4, ror #4
   12d80:	andeq	r3, r1, ip, lsl r2
   12d84:	andeq	r4, r1, r0, ror r0
   12d88:	andeq	r4, r1, r0, ror r0
   12d8c:	andeq	r4, r1, r0, ror r0
   12d90:	andeq	r4, r1, r0, ror r0
   12d94:	andeq	r4, r1, r0, ror r0
   12d98:	andeq	r4, r1, r0, ror r0
   12d9c:	andeq	r4, r1, r0, ror r0
   12da0:	andeq	r4, r1, r0, ror r0
   12da4:	andeq	r4, r1, r0, ror r0
   12da8:	andeq	r4, r1, r0, ror r0
   12dac:	andeq	r3, r1, ip, lsl #4
   12db0:	strdeq	r3, [r1], -ip
   12db4:	andeq	r3, r1, ip, ror #3
   12db8:	andeq	r3, r1, ip, lsr #3
   12dbc:	muleq	r1, ip, r1
   12dc0:	andeq	r3, r1, ip, lsl #3
   12dc4:	andeq	r4, r1, r0, ror r0
   12dc8:	andeq	r3, r1, r0, ror #22
   12dcc:	andeq	r3, r1, ip, ror r1
   12dd0:	andeq	r4, r1, r0, ror r0
   12dd4:	andeq	r3, r1, r0, ror r1
   12dd8:	andeq	r3, r1, r0, ror #2
   12ddc:	andeq	r3, r1, r8, asr #2
   12de0:	andeq	r3, r1, r8, lsr r1
   12de4:	andeq	r3, r1, r8, lsr #2
   12de8:	andeq	r3, r1, r8, ror #1
   12dec:	andeq	r4, r1, r0, ror r0
   12df0:	ldrdeq	r3, [r1], -r4
   12df4:	strheq	r3, [r1], -ip
   12df8:	andeq	r3, r1, r8, lsr #1
   12dfc:	andeq	r3, r1, r4, lsl #1
   12e00:	andeq	r3, r1, r4, ror r0
   12e04:	andeq	r3, r1, r8, asr #32
   12e08:	andeq	r3, r1, ip, lsr r0
   12e0c:	andeq	r4, r1, r0, ror r0
   12e10:	andeq	r4, r1, r0, ror r0
   12e14:	andeq	r4, r1, r0, ror r0
   12e18:	andeq	r4, r1, r0, ror r0
   12e1c:	andeq	r4, r1, r0, ror r0
   12e20:	andeq	r4, r1, r0, ror r0
   12e24:	andeq	r4, r1, r0, ror r0
   12e28:	andeq	r3, r1, ip, lsr #32
   12e2c:	andeq	r3, r1, r0, lsr #32
   12e30:	strdeq	r2, [r1], -r0
   12e34:	andeq	r2, r1, r0, ror #31
   12e38:	ldrdeq	r2, [r1], -r0
   12e3c:	ldr	r3, [fp]
   12e40:	orr	r3, r3, #32768	; 0x8000
   12e44:	str	r3, [fp]
   12e48:	ldr	r3, [fp]
   12e4c:	ldr	r2, [pc, #3296]	; 13b34 <__assert_fail@plt+0xf6c>
   12e50:	orr	r3, r3, #64	; 0x40
   12e54:	str	r3, [fp]
   12e58:	ldr	r3, [pc, #3256]	; 13b18 <__assert_fail@plt+0xf50>
   12e5c:	ldr	r2, [r2]
   12e60:	str	r2, [r3, #56]	; 0x38
   12e64:	b	12c70 <__assert_fail@plt+0xa8>
   12e68:	ldr	r3, [pc, #3268]	; 13b34 <__assert_fail@plt+0xf6c>
   12e6c:	ldr	r0, [r3]
   12e70:	bl	14e10 <__assert_fail@plt+0x2248>
   12e74:	ldr	r3, [fp]
   12e78:	orr	r3, r3, #64	; 0x40
   12e7c:	str	r3, [fp]
   12e80:	b	12c70 <__assert_fail@plt+0xa8>
   12e84:	ldr	r3, [fp]
   12e88:	orr	r3, r3, #256	; 0x100
   12e8c:	str	r3, [fp]
   12e90:	b	12c70 <__assert_fail@plt+0xa8>
   12e94:	ldr	r3, [fp]
   12e98:	bic	r3, r3, #16777216	; 0x1000000
   12e9c:	orr	r3, r3, #8388608	; 0x800000
   12ea0:	str	r3, [fp]
   12ea4:	b	12c70 <__assert_fail@plt+0xa8>
   12ea8:	ldr	r3, [pc, #3204]	; 13b34 <__assert_fail@plt+0xf6c>
   12eac:	ldr	r2, [pc, #3172]	; 13b18 <__assert_fail@plt+0xf50>
   12eb0:	ldr	r3, [r3]
   12eb4:	str	r3, [r2, #120]	; 0x78
   12eb8:	b	12c70 <__assert_fail@plt+0xa8>
   12ebc:	ldr	r3, [pc, #3184]	; 13b34 <__assert_fail@plt+0xf6c>
   12ec0:	mov	r2, #5
   12ec4:	ldr	r1, [pc, #2768]	; 1399c <__assert_fail@plt+0xdd4>
   12ec8:	mov	r0, #0
   12ecc:	ldr	r4, [r3]
   12ed0:	bl	1261c <dcgettext@plt>
   12ed4:	add	sl, sl, #1
   12ed8:	mov	r1, r0
   12edc:	mov	r0, r4
   12ee0:	bl	17f5c <__assert_fail@plt+0x5394>
   12ee4:	lsl	r4, sl, #2
   12ee8:	mov	r3, #0
   12eec:	ldr	r1, [pc, #2732]	; 139a0 <__assert_fail@plt+0xdd8>
   12ef0:	str	r3, [sp, #72]	; 0x48
   12ef4:	mov	r2, r0
   12ef8:	add	r0, sp, #72	; 0x48
   12efc:	bl	14bd8 <__assert_fail@plt+0x2010>
   12f00:	ldr	r0, [sp, #12]
   12f04:	mov	r1, r4
   12f08:	ldr	r5, [sp, #72]	; 0x48
   12f0c:	bl	12658 <realloc@plt>
   12f10:	adds	r3, r4, #0
   12f14:	movne	r3, #1
   12f18:	cmp	r0, #0
   12f1c:	movne	r3, #0
   12f20:	cmp	r3, #0
   12f24:	str	r0, [sp, #12]
   12f28:	bne	14808 <__assert_fail@plt+0x1c40>
   12f2c:	ldr	r3, [sp, #12]
   12f30:	add	r4, r3, r4
   12f34:	mov	r3, #3
   12f38:	str	r3, [sp, #8]
   12f3c:	str	r5, [r4, #-4]
   12f40:	b	12c70 <__assert_fail@plt+0xa8>
   12f44:	ldr	r3, [fp]
   12f48:	orr	r3, r3, #33554432	; 0x2000000
   12f4c:	str	r3, [fp]
   12f50:	b	12c70 <__assert_fail@plt+0xa8>
   12f54:	add	sl, sl, #1
   12f58:	ldr	r3, [pc, #3028]	; 13b34 <__assert_fail@plt+0xf6c>
   12f5c:	lsl	r4, sl, #2
   12f60:	ldr	r0, [sp, #12]
   12f64:	mov	r1, r4
   12f68:	ldr	r5, [r3]
   12f6c:	bl	12658 <realloc@plt>
   12f70:	adds	r3, r4, #0
   12f74:	movne	r3, #1
   12f78:	cmp	r0, #0
   12f7c:	movne	r3, #0
   12f80:	cmp	r3, #0
   12f84:	str	r0, [sp, #12]
   12f88:	bne	14808 <__assert_fail@plt+0x1c40>
   12f8c:	ldr	r3, [sp, #12]
   12f90:	add	r4, r3, r4
   12f94:	str	r5, [r4, #-4]
   12f98:	b	12c70 <__assert_fail@plt+0xa8>
   12f9c:	ldr	r3, [fp]
   12fa0:	bic	r3, r3, #16777216	; 0x1000000
   12fa4:	orr	r3, r3, #1024	; 0x400
   12fa8:	str	r3, [fp]
   12fac:	b	12c70 <__assert_fail@plt+0xa8>
   12fb0:	ldr	r3, [fp]
   12fb4:	orr	r3, r3, #16384	; 0x4000
   12fb8:	str	r3, [fp]
   12fbc:	b	12c70 <__assert_fail@plt+0xa8>
   12fc0:	ldr	r3, [fp]
   12fc4:	orr	r3, r3, #2048	; 0x800
   12fc8:	str	r3, [fp]
   12fcc:	b	12c70 <__assert_fail@plt+0xa8>
   12fd0:	ldr	r3, [fp]
   12fd4:	orr	r3, r3, #262144	; 0x40000
   12fd8:	str	r3, [fp]
   12fdc:	b	12c70 <__assert_fail@plt+0xa8>
   12fe0:	ldr	r3, [fp]
   12fe4:	orr	r3, r3, #131072	; 0x20000
   12fe8:	str	r3, [fp]
   12fec:	b	12c70 <__assert_fail@plt+0xa8>
   12ff0:	ldr	r0, [sp, #36]	; 0x24
   12ff4:	mvn	r3, #10
   12ff8:	cmp	r3, #2
   12ffc:	addhi	r2, r0, r3, lsl #2
   13000:	addhi	r1, r3, #11
   13004:	add	r3, r3, #1
   13008:	strhi	r1, [r2, #44]	; 0x2c
   1300c:	cmp	r3, #14
   13010:	bne	12ff8 <__assert_fail@plt+0x430>
   13014:	mov	r3, #25
   13018:	str	r3, [fp, #12]
   1301c:	b	12c70 <__assert_fail@plt+0xa8>
   13020:	mov	r3, #1
   13024:	str	r3, [sp, #28]
   13028:	b	12c70 <__assert_fail@plt+0xa8>
   1302c:	ldr	r3, [fp]
   13030:	orr	r3, r3, #65536	; 0x10000
   13034:	str	r3, [fp]
   13038:	b	12c70 <__assert_fail@plt+0xa8>
   1303c:	mov	r3, #1
   13040:	str	r3, [sp, #16]
   13044:	b	12c70 <__assert_fail@plt+0xa8>
   13048:	ldr	r3, [pc, #2788]	; 13b34 <__assert_fail@plt+0xf6c>
   1304c:	mov	r2, #5
   13050:	ldr	r1, [pc, #2380]	; 139a4 <__assert_fail@plt+0xddc>
   13054:	mov	r0, #0
   13058:	ldr	r4, [r3]
   1305c:	bl	1261c <dcgettext@plt>
   13060:	mov	r1, r0
   13064:	mov	r0, r4
   13068:	bl	18078 <__assert_fail@plt+0x54b0>
   1306c:	str	r0, [sp, #32]
   13070:	b	12c70 <__assert_fail@plt+0xa8>
   13074:	ldr	r3, [fp]
   13078:	orr	r3, r3, #128	; 0x80
   1307c:	str	r3, [fp]
   13080:	b	12c70 <__assert_fail@plt+0xa8>
   13084:	ldr	r3, [pc, #2700]	; 13b18 <__assert_fail@plt+0xf50>
   13088:	add	r1, r3, #800	; 0x320
   1308c:	ldr	r2, [r3, #16]
   13090:	add	r3, r3, #32
   13094:	bic	r2, r2, #1
   13098:	str	r2, [r3, #-16]
   1309c:	cmp	r3, r1
   130a0:	bne	1308c <__assert_fail@plt+0x4c4>
   130a4:	b	12c70 <__assert_fail@plt+0xa8>
   130a8:	ldr	r3, [pc, #2692]	; 13b34 <__assert_fail@plt+0xf6c>
   130ac:	ldr	r2, [pc, #2660]	; 13b18 <__assert_fail@plt+0xf50>
   130b0:	ldr	r3, [r3]
   130b4:	str	r3, [r2, #88]	; 0x58
   130b8:	b	12c70 <__assert_fail@plt+0xa8>
   130bc:	ldr	r3, [fp]
   130c0:	mov	r2, #1
   130c4:	bic	r3, r3, #16777216	; 0x1000000
   130c8:	str	r2, [sp, #8]
   130cc:	str	r3, [fp]
   130d0:	b	12c70 <__assert_fail@plt+0xa8>
   130d4:	ldr	r3, [fp]
   130d8:	bic	r3, r3, #16777216	; 0x1000000
   130dc:	orr	r3, r3, #2097152	; 0x200000
   130e0:	str	r3, [fp]
   130e4:	b	12c70 <__assert_fail@plt+0xa8>
   130e8:	ldr	r3, [pc, #2628]	; 13b34 <__assert_fail@plt+0xf6c>
   130ec:	ldr	r0, [r3]
   130f0:	cmp	r0, #0
   130f4:	beq	13114 <__assert_fail@plt+0x54c>
   130f8:	ldr	r3, [pc, #2216]	; 139a8 <__assert_fail@plt+0xde0>
   130fc:	mov	r2, #4
   13100:	ldr	r1, [pc, #2212]	; 139ac <__assert_fail@plt+0xde4>
   13104:	bl	189e4 <__assert_fail@plt+0x5e1c>
   13108:	cmp	r0, #0
   1310c:	str	r0, [fp, #236]	; 0xec
   13110:	blt	140a0 <__assert_fail@plt+0x14d8>
   13114:	ldr	r3, [fp]
   13118:	bic	r3, r3, #16777216	; 0x1000000
   1311c:	orr	r3, r3, #512	; 0x200
   13120:	str	r3, [fp]
   13124:	b	12c70 <__assert_fail@plt+0xa8>
   13128:	ldr	r3, [pc, #2564]	; 13b34 <__assert_fail@plt+0xf6c>
   1312c:	ldr	r3, [r3]
   13130:	str	r3, [sp, #20]
   13134:	b	12c70 <__assert_fail@plt+0xa8>
   13138:	ldr	r3, [fp]
   1313c:	orr	r3, r3, #4194304	; 0x400000
   13140:	str	r3, [fp]
   13144:	b	12c70 <__assert_fail@plt+0xa8>
   13148:	ldr	r3, [fp]
   1314c:	mov	r2, #2
   13150:	bic	r3, r3, #16777216	; 0x1000000
   13154:	str	r2, [sp, #8]
   13158:	str	r3, [fp]
   1315c:	b	12c70 <__assert_fail@plt+0xa8>
   13160:	ldr	r3, [fp]
   13164:	bic	r3, r3, #16777216	; 0x1000000
   13168:	str	r3, [fp]
   1316c:	b	12c70 <__assert_fail@plt+0xa8>
   13170:	mov	r3, #3
   13174:	str	r3, [sp, #8]
   13178:	b	12c70 <__assert_fail@plt+0xa8>
   1317c:	ldr	r3, [fp]
   13180:	orr	r3, r3, #16
   13184:	str	r3, [fp]
   13188:	b	12c70 <__assert_fail@plt+0xa8>
   1318c:	ldr	r3, [fp]
   13190:	orr	r3, r3, #8
   13194:	str	r3, [fp]
   13198:	b	12c70 <__assert_fail@plt+0xa8>
   1319c:	ldr	r3, [fp]
   131a0:	orr	r3, r3, #2
   131a4:	str	r3, [fp]
   131a8:	b	12c70 <__assert_fail@plt+0xa8>
   131ac:	ldr	r3, [pc, #2432]	; 13b34 <__assert_fail@plt+0xf6c>
   131b0:	ldr	r1, [pc, #2040]	; 139b0 <__assert_fail@plt+0xde8>
   131b4:	ldr	r4, [r3]
   131b8:	mov	r0, r4
   131bc:	bl	124e4 <strcmp@plt>
   131c0:	subs	r3, r0, #0
   131c4:	str	r3, [sp, #24]
   131c8:	beq	12c70 <__assert_fail@plt+0xa8>
   131cc:	mov	r0, r4
   131d0:	ldr	r1, [pc, #2012]	; 139b4 <__assert_fail@plt+0xdec>
   131d4:	bl	124e4 <strcmp@plt>
   131d8:	cmp	r0, #0
   131dc:	bne	1481c <__assert_fail@plt+0x1c54>
   131e0:	mov	r3, #1
   131e4:	str	r3, [sp, #24]
   131e8:	b	12c70 <__assert_fail@plt+0xa8>
   131ec:	ldr	r3, [fp]
   131f0:	orr	r3, r3, #4
   131f4:	str	r3, [fp]
   131f8:	b	12c70 <__assert_fail@plt+0xa8>
   131fc:	ldr	r3, [fp]
   13200:	orr	r3, r3, #8192	; 0x2000
   13204:	str	r3, [fp]
   13208:	b	12c70 <__assert_fail@plt+0xa8>
   1320c:	ldr	r3, [fp]
   13210:	orr	r3, r3, #1048576	; 0x100000
   13214:	str	r3, [fp]
   13218:	b	12c70 <__assert_fail@plt+0xa8>
   1321c:	mov	r2, #5
   13220:	ldr	r1, [pc, #1936]	; 139b8 <__assert_fail@plt+0xdf0>
   13224:	mov	r0, #0
   13228:	bl	1261c <dcgettext@plt>
   1322c:	ldr	r2, [pc, #2200]	; 13acc <__assert_fail@plt+0xf04>
   13230:	ldr	r3, [pc, #1924]	; 139bc <__assert_fail@plt+0xdf4>
   13234:	ldr	r2, [r2]
   13238:	mov	r1, r0
   1323c:	mov	r0, #1
   13240:	bl	1294c <__printf_chk@plt>
   13244:	mov	r0, #0
   13248:	ldr	r3, [pc, #1836]	; 1397c <__assert_fail@plt+0xdb4>
   1324c:	ldr	r2, [sp, #124]	; 0x7c
   13250:	ldr	r3, [r3]
   13254:	cmp	r2, r3
   13258:	bne	14840 <__assert_fail@plt+0x1c78>
   1325c:	add	sp, sp, #132	; 0x84
   13260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13264:	ldr	r3, [fp]
   13268:	orr	r3, r3, #4096	; 0x1000
   1326c:	str	r3, [fp]
   13270:	b	12c70 <__assert_fail@plt+0xa8>
   13274:	ldr	r3, [fp, #12]
   13278:	mov	r4, r0
   1327c:	cmp	r3, #0
   13280:	bne	13334 <__assert_fail@plt+0x76c>
   13284:	ldr	r2, [fp]
   13288:	tst	r2, #1024	; 0x400
   1328c:	beq	132d0 <__assert_fail@plt+0x708>
   13290:	mov	r2, #14
   13294:	str	r3, [fp, #16]
   13298:	mov	r3, #16
   1329c:	str	r2, [fp, #24]
   132a0:	str	r3, [fp, #28]
   132a4:	mov	r2, #15
   132a8:	mov	r3, #17
   132ac:	mov	r1, #2
   132b0:	str	r2, [fp, #32]
   132b4:	str	r3, [fp, #36]	; 0x24
   132b8:	mov	r2, #7
   132bc:	mov	r3, #1
   132c0:	str	r1, [fp, #20]
   132c4:	str	r2, [fp, #12]
   132c8:	str	r3, [fp, #40]	; 0x28
   132cc:	b	13334 <__assert_fail@plt+0x76c>
   132d0:	tst	r2, #512	; 0x200
   132d4:	bne	13558 <__assert_fail@plt+0x990>
   132d8:	ldr	r3, [fp, #12]
   132dc:	mov	ip, #1
   132e0:	add	r0, r3, ip
   132e4:	add	r2, fp, r3, lsl #2
   132e8:	add	r0, fp, r0, lsl #2
   132ec:	add	r1, r3, #2
   132f0:	str	ip, [r2, #16]
   132f4:	cmp	r1, #49	; 0x31
   132f8:	mov	ip, #0
   132fc:	add	r2, r3, #3
   13300:	str	ip, [r0, #16]
   13304:	str	r2, [fp, #12]
   13308:	bhi	14818 <__assert_fail@plt+0x1c50>
   1330c:	add	r1, fp, r1, lsl #2
   13310:	add	r3, r3, #4
   13314:	mov	r0, #2
   13318:	cmp	r2, #49	; 0x31
   1331c:	str	r3, [fp, #12]
   13320:	str	r0, [r1, #16]
   13324:	bhi	14818 <__assert_fail@plt+0x1c50>
   13328:	add	r2, fp, r2, lsl r0
   1332c:	mov	r3, #3
   13330:	str	r3, [r2, #16]
   13334:	ldr	r3, [sp, #20]
   13338:	cmp	r3, #0
   1333c:	beq	13364 <__assert_fail@plt+0x79c>
   13340:	ldr	r2, [pc, #1656]	; 139c0 <__assert_fail@plt+0xdf8>
   13344:	ldr	r3, [pc, #1656]	; 139c4 <__assert_fail@plt+0xdfc>
   13348:	str	r2, [sp]
   1334c:	ldr	r0, [sp, #20]
   13350:	add	r1, r3, #4
   13354:	mov	r2, #50	; 0x32
   13358:	bl	18ad4 <__assert_fail@plt+0x5f0c>
   1335c:	cmp	r0, #0
   13360:	blt	13568 <__assert_fail@plt+0x9a0>
   13364:	ldr	r3, [sp, #8]
   13368:	cmp	r3, #0
   1336c:	beq	1352c <__assert_fail@plt+0x964>
   13370:	ldr	r3, [fp]
   13374:	cmp	sl, #1
   13378:	movle	r5, #0
   1337c:	movgt	r5, #1
   13380:	ands	r3, r5, r3, lsr #9
   13384:	movne	r2, #5
   13388:	ldrne	r1, [pc, #1592]	; 139c8 <__assert_fail@plt+0xe00>
   1338c:	bne	147f4 <__assert_fail@plt+0x1c2c>
   13390:	ldr	r8, [pc, #1588]	; 139cc <__assert_fail@plt+0xe04>
   13394:	ldr	r3, [r8]
   13398:	cmp	r3, r6
   1339c:	bge	133e4 <__assert_fail@plt+0x81c>
   133a0:	ldr	r9, [pc, #1904]	; 13b18 <__assert_fail@plt+0xf50>
   133a4:	ldr	r2, [r9, #24]
   133a8:	cmp	r2, #0
   133ac:	bne	147ec <__assert_fail@plt+0x1c24>
   133b0:	ldr	r2, [r9, #56]	; 0x38
   133b4:	cmp	r2, #0
   133b8:	bne	147ec <__assert_fail@plt+0x1c24>
   133bc:	add	r2, r3, #1
   133c0:	ldr	r0, [r7, r3, lsl #2]
   133c4:	str	r2, [r8]
   133c8:	bl	14e10 <__assert_fail@plt+0x2248>
   133cc:	ldr	r3, [r8]
   133d0:	cmp	r3, r6
   133d4:	ldrlt	r2, [r7, r3, lsl #2]
   133d8:	addlt	r3, r3, #1
   133dc:	strlt	r3, [r8]
   133e0:	strlt	r2, [r9, #56]	; 0x38
   133e4:	ldr	r1, [fp]
   133e8:	tst	r1, #256	; 0x100
   133ec:	bne	13540 <__assert_fail@plt+0x978>
   133f0:	ldr	r3, [fp]
   133f4:	tst	r3, #8
   133f8:	bne	1340c <__assert_fail@plt+0x844>
   133fc:	ldr	r2, [pc, #1812]	; 13b18 <__assert_fail@plt+0xf50>
   13400:	ldr	r1, [r2, #56]	; 0x38
   13404:	cmp	r1, #0
   13408:	beq	141b4 <__assert_fail@plt+0x15ec>
   1340c:	bic	r3, r3, #16777216	; 0x1000000
   13410:	str	r3, [fp]
   13414:	ldr	r6, [fp]
   13418:	tst	r6, #64	; 0x40
   1341c:	bne	13430 <__assert_fail@plt+0x868>
   13420:	ldr	r3, [pc, #1776]	; 13b18 <__assert_fail@plt+0xf50>
   13424:	ldr	r2, [r3, #56]	; 0x38
   13428:	cmp	r2, #0
   1342c:	beq	138f4 <__assert_fail@plt+0xd2c>
   13430:	mov	r0, #0
   13434:	bl	1285c <mnt_init_debug@plt>
   13438:	bl	12664 <mnt_new_table@plt>
   1343c:	subs	r9, r0, #0
   13440:	beq	1419c <__assert_fail@plt+0x15d4>
   13444:	ldr	r1, [pc, #1700]	; 13af0 <__assert_fail@plt+0xf28>
   13448:	bl	1246c <mnt_table_set_parser_errcb@plt>
   1344c:	cmp	sl, #0
   13450:	ldr	r6, [sp, #12]
   13454:	bne	13498 <__assert_fail@plt+0x8d0>
   13458:	ldr	r3, [sp, #8]
   1345c:	cmp	r3, #2
   13460:	beq	13570 <__assert_fail@plt+0x9a8>
   13464:	cmp	r3, #3
   13468:	beq	13780 <__assert_fail@plt+0xbb8>
   1346c:	ldr	r6, [sp, #12]
   13470:	mov	r7, sl
   13474:	mov	r1, r7
   13478:	mov	r0, r9
   1347c:	bl	12b2c <mnt_table_parse_fstab@plt>
   13480:	mov	r3, r0
   13484:	cmp	r3, #0
   13488:	bne	134d0 <__assert_fail@plt+0x908>
   1348c:	sub	sl, sl, #1
   13490:	cmp	sl, #0
   13494:	ble	13588 <__assert_fail@plt+0x9c0>
   13498:	ldr	r3, [sp, #8]
   1349c:	ldr	r7, [r6], #4
   134a0:	cmp	r3, #2
   134a4:	beq	13574 <__assert_fail@plt+0x9ac>
   134a8:	cmp	r3, #3
   134ac:	bne	13474 <__assert_fail@plt+0x8ac>
   134b0:	cmp	r7, #0
   134b4:	beq	13780 <__assert_fail@plt+0xbb8>
   134b8:	mov	r1, r7
   134bc:	mov	r0, r9
   134c0:	bl	12b8c <mnt_table_parse_file@plt>
   134c4:	mov	r3, r0
   134c8:	cmp	r3, #0
   134cc:	beq	1348c <__assert_fail@plt+0x8c4>
   134d0:	mov	r0, r9
   134d4:	bl	124c0 <mnt_unref_table@plt>
   134d8:	mov	r2, #5
   134dc:	ldr	r1, [pc, #1260]	; 139d0 <__assert_fail@plt+0xe08>
   134e0:	mov	r0, #0
   134e4:	bl	1261c <dcgettext@plt>
   134e8:	mov	r1, r7
   134ec:	bl	12a60 <warn@plt>
   134f0:	mov	r9, #0
   134f4:	mov	sl, r9
   134f8:	mov	r0, sl
   134fc:	bl	1279c <scols_unref_table@plt>
   13500:	mov	r0, r9
   13504:	bl	124c0 <mnt_unref_table@plt>
   13508:	ldr	r0, [fp, #4]
   1350c:	bl	12910 <mnt_unref_cache@plt>
   13510:	ldr	r0, [sp, #12]
   13514:	bl	1255c <free@plt>
   13518:	ldr	r0, [fp, #216]	; 0xd8
   1351c:	bl	12814 <udev_unref@plt>
   13520:	adds	r0, r4, #0
   13524:	movne	r0, #1
   13528:	b	13248 <__assert_fail@plt+0x680>
   1352c:	ldr	r3, [sp, #16]
   13530:	cmp	r3, #0
   13534:	moveq	r3, #3
   13538:	str	r3, [sp, #8]
   1353c:	b	13370 <__assert_fail@plt+0x7a8>
   13540:	bl	15a88 <__assert_fail@plt+0x2ec0>
   13544:	cmp	r0, #0
   13548:	bicne	r1, r1, #256	; 0x100
   1354c:	strne	r1, [fp]
   13550:	bne	133f0 <__assert_fail@plt+0x828>
   13554:	b	13414 <__assert_fail@plt+0x84c>
   13558:	mov	r2, #1
   1355c:	mov	r3, #11
   13560:	strd	r2, [fp, #12]
   13564:	b	132d8 <__assert_fail@plt+0x710>
   13568:	mov	r0, #1
   1356c:	b	13248 <__assert_fail@plt+0x680>
   13570:	mov	r7, sl
   13574:	mov	r1, r7
   13578:	mov	r0, r9
   1357c:	bl	125d4 <mnt_table_parse_mtab@plt>
   13580:	mov	r3, r0
   13584:	b	13484 <__assert_fail@plt+0x8bc>
   13588:	ldr	r2, [sp, #8]
   1358c:	cmp	r2, #2
   13590:	beq	1389c <__assert_fail@plt+0xcd4>
   13594:	mov	r3, #0
   13598:	mov	r0, #1
   1359c:	str	r3, [sp, #72]	; 0x48
   135a0:	bl	125bc <mnt_new_iter@plt>
   135a4:	subs	r6, r0, #0
   135a8:	beq	135cc <__assert_fail@plt+0xa04>
   135ac:	add	r2, sp, #72	; 0x48
   135b0:	mov	r1, r6
   135b4:	mov	r0, r9
   135b8:	bl	12574 <mnt_table_next_fs@plt>
   135bc:	cmp	r0, #0
   135c0:	beq	137a0 <__assert_fail@plt+0xbd8>
   135c4:	mov	r0, r6
   135c8:	bl	12904 <mnt_free_iter@plt>
   135cc:	ldr	r3, [fp]
   135d0:	tst	r3, #16777216	; 0x1000000
   135d4:	bne	137f4 <__assert_fail@plt+0xc2c>
   135d8:	ldr	r3, [fp]
   135dc:	tst	r3, #16384	; 0x4000
   135e0:	beq	13800 <__assert_fail@plt+0xc38>
   135e4:	ldr	r3, [fp]
   135e8:	tst	r3, #4096	; 0x1000
   135ec:	bne	13888 <__assert_fail@plt+0xcc0>
   135f0:	ldr	r3, [sp, #16]
   135f4:	cmp	r3, #0
   135f8:	bne	13874 <__assert_fail@plt+0xcac>
   135fc:	ldr	r0, [sp, #16]
   13600:	bl	12bb0 <scols_init_debug@plt>
   13604:	bl	126c4 <scols_new_table@plt>
   13608:	subs	sl, r0, #0
   1360c:	beq	14188 <__assert_fail@plt+0x15c0>
   13610:	ldr	r1, [fp]
   13614:	lsr	r1, r1, #21
   13618:	and	r1, r1, #1
   1361c:	bl	12580 <scols_table_enable_raw@plt>
   13620:	ldr	r1, [fp]
   13624:	mov	r0, sl
   13628:	lsr	r1, r1, #23
   1362c:	and	r1, r1, #1
   13630:	bl	126e8 <scols_table_enable_export@plt>
   13634:	ldr	r1, [fp]
   13638:	mov	r0, sl
   1363c:	lsr	r1, r1, #25
   13640:	and	r1, r1, #1
   13644:	bl	12994 <scols_table_enable_json@plt>
   13648:	ldr	r1, [fp]
   1364c:	mov	r0, sl
   13650:	lsr	r1, r1, #20
   13654:	and	r1, r1, #1
   13658:	bl	126d0 <scols_table_enable_ascii@plt>
   1365c:	ldr	r1, [fp]
   13660:	mov	r0, sl
   13664:	lsr	r1, r1, #22
   13668:	and	r1, r1, #1
   1366c:	bl	12514 <scols_table_enable_noheadings@plt>
   13670:	ldr	r3, [fp]
   13674:	tst	r3, #33554432	; 0x2000000
   13678:	bne	140a8 <__assert_fail@plt+0x14e0>
   1367c:	ldr	r6, [pc, #1172]	; 13b18 <__assert_fail@plt+0xf50>
   13680:	mov	r5, #0
   13684:	ldr	r3, [fp, #12]
   13688:	ldr	r8, [fp]
   1368c:	cmp	r3, r5
   13690:	bls	141f0 <__assert_fail@plt+0x1628>
   13694:	mov	r0, r5
   13698:	bl	14c48 <__assert_fail@plt+0x2080>
   1369c:	tst	r8, #16777216	; 0x1000000
   136a0:	lsl	r3, r0, #5
   136a4:	add	r2, r6, r3
   136a8:	mov	r7, r0
   136ac:	ldr	r2, [r2, #16]
   136b0:	biceq	r2, r2, #2
   136b4:	ands	r0, r8, #512	; 0x200
   136b8:	bne	136f8 <__assert_fail@plt+0xb30>
   136bc:	cmp	r7, #24
   136c0:	bhi	148e8 <__assert_fail@plt+0x1d20>
   136c4:	sub	r1, r7, #11
   136c8:	cmp	r1, #2
   136cc:	bhi	136f8 <__assert_fail@plt+0xb30>
   136d0:	mov	r2, #5
   136d4:	ldr	r1, [pc, #760]	; 139d4 <__assert_fail@plt+0xe0c>
   136d8:	bl	1261c <dcgettext@plt>
   136dc:	mov	r7, r0
   136e0:	mov	r0, r5
   136e4:	bl	14c48 <__assert_fail@plt+0x2080>
   136e8:	ldr	r1, [r6, r0, lsl #5]
   136ec:	mov	r0, r7
   136f0:	bl	12850 <warnx@plt>
   136f4:	b	134f8 <__assert_fail@plt+0x930>
   136f8:	add	r3, r6, r3
   136fc:	ldr	r1, [r6, r7, lsl #5]
   13700:	vldr	d7, [r3, #8]
   13704:	mov	r0, sl
   13708:	vcvt.f32.f64	s14, d7
   1370c:	vcvt.f64.f32	d0, s14
   13710:	bl	12520 <scols_table_new_column@plt>
   13714:	subs	r2, r0, #0
   13718:	beq	1471c <__assert_fail@plt+0x1b54>
   1371c:	ldr	r3, [fp]
   13720:	tst	r3, #33554432	; 0x2000000
   13724:	beq	13778 <__assert_fail@plt+0xbb0>
   13728:	sub	r7, r7, #14
   1372c:	cmp	r7, #10
   13730:	ldrls	pc, [pc, r7, lsl #2]
   13734:	b	1396c <__assert_fail@plt+0xda4>
   13738:	andeq	r3, r1, r4, ror #14
   1373c:	andeq	r3, r1, r4, ror #14
   13740:	andeq	r3, r1, r4, ror #14
   13744:	andeq	r3, r1, ip, ror #18
   13748:	andeq	r3, r1, ip, ror #18
   1374c:	andeq	r3, r1, ip, ror #14
   13750:	andeq	r3, r1, ip, ror #14
   13754:	andeq	r3, r1, ip, ror #18
   13758:	andeq	r3, r1, ip, ror #18
   1375c:	andeq	r3, r1, ip, ror #14
   13760:	andeq	r3, r1, ip, ror #14
   13764:	tst	r3, #8192	; 0x2000
   13768:	beq	13778 <__assert_fail@plt+0xbb0>
   1376c:	mov	r0, r2
   13770:	mov	r1, #1
   13774:	bl	12478 <scols_column_set_json_type@plt>
   13778:	add	r5, r5, #1
   1377c:	b	13684 <__assert_fail@plt+0xabc>
   13780:	mov	r1, #4
   13784:	ldr	r0, [pc, #860]	; 13ae8 <__assert_fail@plt+0xf20>
   13788:	bl	129c4 <access@plt>
   1378c:	ldr	r3, [pc, #580]	; 139d8 <__assert_fail@plt+0xe10>
   13790:	ldr	r7, [pc, #848]	; 13ae8 <__assert_fail@plt+0xf20>
   13794:	cmp	r0, #0
   13798:	movne	r7, r3
   1379c:	b	134b8 <__assert_fail@plt+0x8f0>
   137a0:	ldr	r0, [sp, #72]	; 0x48
   137a4:	bl	129a0 <mnt_fs_is_kernel@plt>
   137a8:	cmp	r0, #0
   137ac:	beq	135c4 <__assert_fail@plt+0x9fc>
   137b0:	ldr	r0, [sp, #72]	; 0x48
   137b4:	bl	1273c <mnt_fs_get_root@plt>
   137b8:	adds	r7, r0, #0
   137bc:	mov	r0, r6
   137c0:	movne	r7, #1
   137c4:	bl	12904 <mnt_free_iter@plt>
   137c8:	ldr	r3, [sp, #28]
   137cc:	tst	r7, r3
   137d0:	ldr	r3, [fp]
   137d4:	beq	147e0 <__assert_fail@plt+0x1c18>
   137d8:	mov	r7, #1
   137dc:	orr	r3, r3, #16777216	; 0x1000000
   137e0:	str	r3, [fp]
   137e4:	eor	r7, r7, #1
   137e8:	orr	r5, r5, r7
   137ec:	tst	r5, #255	; 0xff
   137f0:	beq	135d8 <__assert_fail@plt+0xa10>
   137f4:	bic	r3, r3, #16777216	; 0x1000000
   137f8:	str	r3, [fp]
   137fc:	b	135d8 <__assert_fail@plt+0xa10>
   13800:	bl	12868 <mnt_new_cache@plt>
   13804:	cmp	r0, #0
   13808:	mov	sl, r0
   1380c:	str	r0, [fp, #4]
   13810:	beq	141dc <__assert_fail@plt+0x1614>
   13814:	mov	r1, r0
   13818:	mov	r0, r9
   1381c:	bl	12988 <mnt_table_set_cache@plt>
   13820:	ldr	r3, [sp, #8]
   13824:	cmp	r3, #3
   13828:	beq	135e4 <__assert_fail@plt+0xa1c>
   1382c:	ldr	r6, [fp, #4]
   13830:	bl	12664 <mnt_new_table@plt>
   13834:	subs	r5, r0, #0
   13838:	beq	135e4 <__assert_fail@plt+0xa1c>
   1383c:	mov	r1, #4
   13840:	ldr	r0, [pc, #672]	; 13ae8 <__assert_fail@plt+0xf20>
   13844:	bl	129c4 <access@plt>
   13848:	ldr	r3, [pc, #392]	; 139d8 <__assert_fail@plt+0xe10>
   1384c:	ldr	r1, [pc, #660]	; 13ae8 <__assert_fail@plt+0xf20>
   13850:	cmp	r0, #0
   13854:	movne	r1, r3
   13858:	mov	r0, r5
   1385c:	bl	12b8c <mnt_table_parse_file@plt>
   13860:	cmp	r0, #0
   13864:	beq	145f0 <__assert_fail@plt+0x1a28>
   13868:	mov	r0, r5
   1386c:	bl	124c0 <mnt_unref_table@plt>
   13870:	b	135e4 <__assert_fail@plt+0xa1c>
   13874:	mov	r0, r9
   13878:	bl	161ac <__assert_fail@plt+0x35e4>
   1387c:	mov	sl, #0
   13880:	mov	r4, r0
   13884:	b	134f8 <__assert_fail@plt+0x930>
   13888:	ldr	r2, [pc, #332]	; 139dc <__assert_fail@plt+0xe14>
   1388c:	mov	r1, #4
   13890:	mov	r0, r9
   13894:	bl	12748 <mnt_table_uniq_fs@plt>
   13898:	b	135f0 <__assert_fail@plt+0xa28>
   1389c:	mov	r0, #1
   138a0:	str	r3, [sp, #72]	; 0x48
   138a4:	bl	125bc <mnt_new_iter@plt>
   138a8:	subs	r6, r0, #0
   138ac:	addne	r7, sp, #72	; 0x48
   138b0:	bne	138c8 <__assert_fail@plt+0xd00>
   138b4:	b	13594 <__assert_fail@plt+0x9cc>
   138b8:	ldr	r0, [sp, #72]	; 0x48
   138bc:	bl	129a0 <mnt_fs_is_kernel@plt>
   138c0:	cmp	r0, #0
   138c4:	beq	141d0 <__assert_fail@plt+0x1608>
   138c8:	mov	r2, r7
   138cc:	mov	r1, r6
   138d0:	mov	r0, r9
   138d4:	bl	12574 <mnt_table_next_fs@plt>
   138d8:	cmp	r0, #0
   138dc:	beq	138b8 <__assert_fail@plt+0xcf0>
   138e0:	mov	r0, r6
   138e4:	bl	12904 <mnt_free_iter@plt>
   138e8:	mov	r3, #3
   138ec:	str	r3, [sp, #8]
   138f0:	b	13594 <__assert_fail@plt+0x9cc>
   138f4:	ldr	r7, [r3, #24]
   138f8:	cmp	r7, #0
   138fc:	beq	13430 <__assert_fail@plt+0x868>
   13900:	mov	r2, #6
   13904:	ldr	r1, [pc, #212]	; 139e0 <__assert_fail@plt+0xe18>
   13908:	mov	r0, r7
   1390c:	bl	12b5c <strncmp@plt>
   13910:	cmp	r0, #0
   13914:	beq	13960 <__assert_fail@plt+0xd98>
   13918:	mov	r2, #5
   1391c:	ldr	r1, [pc, #192]	; 139e4 <__assert_fail@plt+0xe1c>
   13920:	mov	r0, r7
   13924:	bl	12b5c <strncmp@plt>
   13928:	cmp	r0, #0
   1392c:	beq	13960 <__assert_fail@plt+0xd98>
   13930:	mov	r2, #10
   13934:	ldr	r1, [pc, #172]	; 139e8 <__assert_fail@plt+0xe20>
   13938:	mov	r0, r7
   1393c:	bl	12b5c <strncmp@plt>
   13940:	cmp	r0, #0
   13944:	beq	13960 <__assert_fail@plt+0xd98>
   13948:	mov	r0, r7
   1394c:	mov	r2, #9
   13950:	ldr	r1, [pc, #148]	; 139ec <__assert_fail@plt+0xe24>
   13954:	bl	12b5c <strncmp@plt>
   13958:	cmp	r0, #0
   1395c:	bne	13430 <__assert_fail@plt+0x868>
   13960:	orr	r6, r6, #64	; 0x40
   13964:	str	r6, [fp]
   13968:	b	13430 <__assert_fail@plt+0x868>
   1396c:	mov	r0, r2
   13970:	mov	r1, #0
   13974:	bl	12478 <scols_column_set_json_type@plt>
   13978:	b	13778 <__assert_fail@plt+0xbb0>
   1397c:	andeq	fp, r2, r0, asr ip
   13980:	andeq	sl, r1, r8, asr r5
   13984:	andeq	ip, r2, r0, asr r3
   13988:	andeq	sl, r1, r8, lsr #1
   1398c:	strheq	sl, [r1], -ip
   13990:	andeq	r4, r1, ip, lsl pc
   13994:	andeq	sl, r1, ip, ror sp
   13998:	andeq	r9, r1, ip, lsr fp
   1399c:	andeq	sl, r1, ip, ror #25
   139a0:	andeq	sl, r1, r4, lsl #26
   139a4:	andeq	sl, r1, r8, lsl sp
   139a8:	andeq	r4, r1, r0, asr #26
   139ac:	andeq	ip, r2, ip, lsr #8
   139b0:	strdeq	sl, [r1], -r4
   139b4:	strdeq	sl, [r1], -ip
   139b8:	andeq	sl, r1, r4, lsr sp
   139bc:	andeq	sl, r1, r0, asr #26
   139c0:	andeq	r4, r1, r8, asr #25
   139c4:	andeq	ip, r2, ip, asr r3
   139c8:	andeq	sl, r1, ip, lsr #27
   139cc:	andeq	ip, r2, r8, lsr r3
   139d0:	muleq	r1, r0, lr
   139d4:	andeq	sl, r1, r0, lsl pc
   139d8:	muleq	r1, r4, r0
   139dc:	andeq	r4, r1, r4, lsr #23
   139e0:	andeq	sl, r1, r8, asr lr
   139e4:	andeq	sl, r1, r4, ror #28
   139e8:	andeq	sl, r1, r4, asr lr
   139ec:	andeq	sl, r1, r0, ror #28
   139f0:	andeq	sl, r1, r0, lsr #2
   139f4:	andeq	sl, r1, ip, lsr #2
   139f8:			; <UNDEFINED> instruction: 0x0001acb8
   139fc:	ldrdeq	sl, [r1], -r8
   13a00:	strdeq	sl, [r1], -r8
   13a04:	andeq	sl, r1, r4, lsl #4
   13a08:	andeq	sl, r1, r4, asr #4
   13a0c:	andeq	sl, r1, r4, asr #5
   13a10:	andeq	sl, r1, r0, lsr r3
   13a14:	andeq	sl, r1, ip, ror r3
   13a18:	andeq	sl, r1, r8, asr #7
   13a1c:	andeq	sl, r1, r8, lsl r4
   13a20:	andeq	sl, r1, r8, asr r4
   13a24:	andeq	sl, r1, ip, lsr #9
   13a28:	strdeq	sl, [r1], -r0
   13a2c:	andeq	sl, r1, r4, lsr #10
   13a30:	andeq	sl, r1, ip, asr r5
   13a34:	andeq	sl, r1, r4, lsr #11
   13a38:	andeq	sl, r1, r8, lsl r6
   13a3c:	andeq	sl, r1, ip, asr r6
   13a40:	muleq	r1, ip, r6
   13a44:	ldrdeq	sl, [r1], -r4
   13a48:	andeq	sl, r1, r4, lsl #14
   13a4c:	andeq	sl, r1, r4, lsr r7
   13a50:	andeq	sl, r1, r4, lsl #15
   13a54:			; <UNDEFINED> instruction: 0x0001a7bc
   13a58:	andeq	sl, r1, r4, lsl #16
   13a5c:	andeq	sl, r1, ip, lsr r8
   13a60:	andeq	sl, r1, r4, ror r8
   13a64:	andeq	sl, r1, ip, lsr #17
   13a68:	andeq	sl, r1, r4, ror #17
   13a6c:	andeq	sl, r1, r0, lsr r9
   13a70:	andeq	sl, r1, r0, ror #18
   13a74:	muleq	r1, r8, r9
   13a78:	andeq	sl, r1, ip, lsl sl
   13a7c:	andeq	sl, r1, r8, asr sl
   13a80:	muleq	r1, r8, sl
   13a84:	andeq	sl, r1, ip, asr #21
   13a88:	andeq	sl, r1, r0, lsl fp
   13a8c:	andeq	sl, r1, r4, asr fp
   13a90:	andeq	sl, r1, ip, lsl #23
   13a94:	ldrdeq	sl, [r1], -r4
   13a98:	andeq	sl, r1, ip, lsl ip
   13a9c:	andeq	sl, r1, r8, asr #24
   13aa0:	andeq	sl, r1, ip, asr ip
   13aa4:	andeq	sl, r1, ip, lsl #25
   13aa8:	andeq	sl, r1, r8, ror ip
   13aac:	andeq	sl, r1, ip, ror #24
   13ab0:	muleq	r1, ip, ip
   13ab4:	andeq	sl, r1, r4, asr #25
   13ab8:	andeq	sl, r1, r0, ror #25
   13abc:	andeq	sl, r1, r4, asr sp
   13ac0:	andeq	sl, r1, r4, ror #29
   13ac4:	andeq	ip, r2, r0, asr #6
   13ac8:	andeq	sl, r1, r8, asr #1
   13acc:	andeq	ip, r2, r0, lsr r3
   13ad0:			; <UNDEFINED> instruction: 0x0001afb8
   13ad4:	andeq	sl, r1, r4, lsr #1
   13ad8:	andeq	sl, r1, ip, ror #1
   13adc:	andeq	r9, r1, ip, lsr #17
   13ae0:	andeq	sl, r1, r4, asr #29
   13ae4:	andeq	sl, r1, r0, lsr #29
   13ae8:	andeq	sl, r1, ip, ror r0
   13aec:	andeq	fp, r1, r8, lsl #4
   13af0:	andeq	r4, r1, ip, asr fp
   13af4:	andeq	ip, r2, r0, lsr r4
   13af8:	andeq	r9, r1, r0, lsr pc
   13afc:	andeq	r9, r1, ip, lsr #29
   13b00:	muleq	r1, r4, lr
   13b04:	andeq	r9, r1, r4, lsr #29
   13b08:	muleq	r1, ip, lr
   13b0c:	andeq	ip, r2, r4, asr #6
   13b10:	mrseq	r0, (UNDEF: 16)
   13b14:	andeq	r8, r0, r0, asr #32
   13b18:	andeq	ip, r2, r8
   13b1c:	andeq	sl, r1, r4, asr #30
   13b20:	andeq	sl, r1, r0, lsr #31
   13b24:	andeq	sl, r1, r8, lsr r0
   13b28:	andeq	sl, r1, ip, ror #27
   13b2c:	ldrdeq	r9, [r1], -r0
   13b30:	andeq	sl, r1, r8, lsl #2
   13b34:	andeq	ip, r2, r8, asr #6
   13b38:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13b3c:	andeq	sl, r1, r8, ror #30
   13b40:	andeq	sl, r1, r4, asr r0
   13b44:	andeq	sl, r1, r8, lsl r0
   13b48:	andeq	sl, r1, ip, ror #28
   13b4c:			; <UNDEFINED> instruction: 0x00019dbc
   13b50:	andeq	r0, r0, r5, lsl r1
   13b54:	andeq	r9, r1, r8, lsl lr
   13b58:	strdeq	sl, [r1], -r0
   13b5c:			; <UNDEFINED> instruction: 0x0001afb0
   13b60:	ldr	r3, [pc, #-92]	; 13b0c <__assert_fail@plt+0xf44>
   13b64:	mov	r2, #5
   13b68:	ldr	r1, [pc, #-384]	; 139f0 <__assert_fail@plt+0xe28>
   13b6c:	ldr	r4, [r3]
   13b70:	mov	r0, #0
   13b74:	bl	1261c <dcgettext@plt>
   13b78:	mov	r1, r4
   13b7c:	bl	12b50 <fputs@plt>
   13b80:	mov	r2, #5
   13b84:	ldr	r1, [pc, #-408]	; 139f4 <__assert_fail@plt+0xe2c>
   13b88:	mov	r0, #0
   13b8c:	bl	1261c <dcgettext@plt>
   13b90:	ldr	r3, [pc, #-204]	; 13acc <__assert_fail@plt+0xf04>
   13b94:	mov	r1, #1
   13b98:	mov	r6, #0
   13b9c:	ldr	r3, [r3]
   13ba0:	ldr	r5, [pc, #-144]	; 13b18 <__assert_fail@plt+0xf50>
   13ba4:	ldr	r8, [pc, #-436]	; 139f8 <__assert_fail@plt+0xe30>
   13ba8:	mov	r2, r0
   13bac:	mov	r0, r4
   13bb0:	bl	129ac <__fprintf_chk@plt>
   13bb4:	mov	r1, r4
   13bb8:	mov	r0, #10
   13bbc:	bl	12a84 <fputc@plt>
   13bc0:	mov	r2, #5
   13bc4:	ldr	r1, [pc, #-464]	; 139fc <__assert_fail@plt+0xe34>
   13bc8:	mov	r0, r6
   13bcc:	bl	1261c <dcgettext@plt>
   13bd0:	mov	r1, r4
   13bd4:	bl	12b50 <fputs@plt>
   13bd8:	mov	r2, #5
   13bdc:	ldr	r1, [pc, #-484]	; 13a00 <__assert_fail@plt+0xe38>
   13be0:	mov	r0, r6
   13be4:	bl	1261c <dcgettext@plt>
   13be8:	mov	r1, r4
   13bec:	bl	12b50 <fputs@plt>
   13bf0:	mov	r2, #5
   13bf4:	ldr	r1, [pc, #-504]	; 13a04 <__assert_fail@plt+0xe3c>
   13bf8:	mov	r0, r6
   13bfc:	bl	1261c <dcgettext@plt>
   13c00:	mov	r1, r4
   13c04:	bl	12b50 <fputs@plt>
   13c08:	mov	r2, #5
   13c0c:	ldr	r1, [pc, #-524]	; 13a08 <__assert_fail@plt+0xe40>
   13c10:	mov	r0, r6
   13c14:	bl	1261c <dcgettext@plt>
   13c18:	mov	r1, r4
   13c1c:	bl	12b50 <fputs@plt>
   13c20:	mov	r2, #5
   13c24:	ldr	r1, [pc, #-544]	; 13a0c <__assert_fail@plt+0xe44>
   13c28:	mov	r0, r6
   13c2c:	bl	1261c <dcgettext@plt>
   13c30:	mov	r1, r4
   13c34:	bl	12b50 <fputs@plt>
   13c38:	mov	r1, r4
   13c3c:	mov	r0, #10
   13c40:	bl	12a84 <fputc@plt>
   13c44:	mov	r2, #5
   13c48:	ldr	r1, [pc, #-576]	; 13a10 <__assert_fail@plt+0xe48>
   13c4c:	mov	r0, r6
   13c50:	bl	1261c <dcgettext@plt>
   13c54:	mov	r1, r4
   13c58:	bl	12b50 <fputs@plt>
   13c5c:	mov	r2, #5
   13c60:	ldr	r1, [pc, #-596]	; 13a14 <__assert_fail@plt+0xe4c>
   13c64:	mov	r0, r6
   13c68:	bl	1261c <dcgettext@plt>
   13c6c:	mov	r1, r4
   13c70:	bl	12b50 <fputs@plt>
   13c74:	mov	r1, r4
   13c78:	mov	r0, #10
   13c7c:	bl	12a84 <fputc@plt>
   13c80:	mov	r2, #5
   13c84:	ldr	r1, [pc, #-628]	; 13a18 <__assert_fail@plt+0xe50>
   13c88:	mov	r0, r6
   13c8c:	bl	1261c <dcgettext@plt>
   13c90:	mov	r1, r4
   13c94:	bl	12b50 <fputs@plt>
   13c98:	mov	r2, #5
   13c9c:	ldr	r1, [pc, #-648]	; 13a1c <__assert_fail@plt+0xe54>
   13ca0:	mov	r0, r6
   13ca4:	bl	1261c <dcgettext@plt>
   13ca8:	mov	r1, r4
   13cac:	bl	12b50 <fputs@plt>
   13cb0:	mov	r2, #5
   13cb4:	ldr	r1, [pc, #-668]	; 13a20 <__assert_fail@plt+0xe58>
   13cb8:	mov	r0, r6
   13cbc:	bl	1261c <dcgettext@plt>
   13cc0:	mov	r1, r4
   13cc4:	bl	12b50 <fputs@plt>
   13cc8:	mov	r2, #5
   13ccc:	ldr	r1, [pc, #-688]	; 13a24 <__assert_fail@plt+0xe5c>
   13cd0:	mov	r0, r6
   13cd4:	bl	1261c <dcgettext@plt>
   13cd8:	mov	r1, r4
   13cdc:	bl	12b50 <fputs@plt>
   13ce0:	mov	r2, #5
   13ce4:	ldr	r1, [pc, #-708]	; 13a28 <__assert_fail@plt+0xe60>
   13ce8:	mov	r0, r6
   13cec:	bl	1261c <dcgettext@plt>
   13cf0:	mov	r1, r4
   13cf4:	bl	12b50 <fputs@plt>
   13cf8:	mov	r2, #5
   13cfc:	ldr	r1, [pc, #-728]	; 13a2c <__assert_fail@plt+0xe64>
   13d00:	mov	r0, r6
   13d04:	bl	1261c <dcgettext@plt>
   13d08:	mov	r1, r4
   13d0c:	bl	12b50 <fputs@plt>
   13d10:	mov	r2, #5
   13d14:	ldr	r1, [pc, #-748]	; 13a30 <__assert_fail@plt+0xe68>
   13d18:	mov	r0, r6
   13d1c:	bl	1261c <dcgettext@plt>
   13d20:	mov	r1, r4
   13d24:	bl	12b50 <fputs@plt>
   13d28:	mov	r2, #5
   13d2c:	ldr	r1, [pc, #-768]	; 13a34 <__assert_fail@plt+0xe6c>
   13d30:	mov	r0, r6
   13d34:	bl	1261c <dcgettext@plt>
   13d38:	mov	r1, r4
   13d3c:	bl	12b50 <fputs@plt>
   13d40:	mov	r2, #5
   13d44:	ldr	r1, [pc, #-788]	; 13a38 <__assert_fail@plt+0xe70>
   13d48:	mov	r0, r6
   13d4c:	bl	1261c <dcgettext@plt>
   13d50:	mov	r1, r4
   13d54:	bl	12b50 <fputs@plt>
   13d58:	mov	r2, #5
   13d5c:	ldr	r1, [pc, #-808]	; 13a3c <__assert_fail@plt+0xe74>
   13d60:	mov	r0, r6
   13d64:	bl	1261c <dcgettext@plt>
   13d68:	mov	r1, r4
   13d6c:	bl	12b50 <fputs@plt>
   13d70:	mov	r2, #5
   13d74:	ldr	r1, [pc, #-828]	; 13a40 <__assert_fail@plt+0xe78>
   13d78:	mov	r0, r6
   13d7c:	bl	1261c <dcgettext@plt>
   13d80:	mov	r1, r4
   13d84:	bl	12b50 <fputs@plt>
   13d88:	mov	r2, #5
   13d8c:	ldr	r1, [pc, #-848]	; 13a44 <__assert_fail@plt+0xe7c>
   13d90:	mov	r0, r6
   13d94:	bl	1261c <dcgettext@plt>
   13d98:	mov	r1, r4
   13d9c:	bl	12b50 <fputs@plt>
   13da0:	mov	r2, #5
   13da4:	ldr	r1, [pc, #-868]	; 13a48 <__assert_fail@plt+0xe80>
   13da8:	mov	r0, r6
   13dac:	bl	1261c <dcgettext@plt>
   13db0:	mov	r1, r4
   13db4:	bl	12b50 <fputs@plt>
   13db8:	mov	r2, #5
   13dbc:	ldr	r1, [pc, #-888]	; 13a4c <__assert_fail@plt+0xe84>
   13dc0:	mov	r0, r6
   13dc4:	bl	1261c <dcgettext@plt>
   13dc8:	mov	r1, r4
   13dcc:	bl	12b50 <fputs@plt>
   13dd0:	mov	r2, #5
   13dd4:	ldr	r1, [pc, #-908]	; 13a50 <__assert_fail@plt+0xe88>
   13dd8:	mov	r0, r6
   13ddc:	bl	1261c <dcgettext@plt>
   13de0:	mov	r1, r4
   13de4:	bl	12b50 <fputs@plt>
   13de8:	mov	r2, #5
   13dec:	ldr	r1, [pc, #-928]	; 13a54 <__assert_fail@plt+0xe8c>
   13df0:	mov	r0, r6
   13df4:	bl	1261c <dcgettext@plt>
   13df8:	mov	r1, r4
   13dfc:	bl	12b50 <fputs@plt>
   13e00:	mov	r2, #5
   13e04:	ldr	r1, [pc, #-948]	; 13a58 <__assert_fail@plt+0xe90>
   13e08:	mov	r0, r6
   13e0c:	bl	1261c <dcgettext@plt>
   13e10:	mov	r1, r4
   13e14:	bl	12b50 <fputs@plt>
   13e18:	mov	r2, #5
   13e1c:	ldr	r1, [pc, #-968]	; 13a5c <__assert_fail@plt+0xe94>
   13e20:	mov	r0, r6
   13e24:	bl	1261c <dcgettext@plt>
   13e28:	mov	r1, r4
   13e2c:	bl	12b50 <fputs@plt>
   13e30:	mov	r2, #5
   13e34:	ldr	r1, [pc, #-988]	; 13a60 <__assert_fail@plt+0xe98>
   13e38:	mov	r0, r6
   13e3c:	bl	1261c <dcgettext@plt>
   13e40:	mov	r1, r4
   13e44:	bl	12b50 <fputs@plt>
   13e48:	mov	r2, #5
   13e4c:	ldr	r1, [pc, #-1008]	; 13a64 <__assert_fail@plt+0xe9c>
   13e50:	mov	r0, r6
   13e54:	bl	1261c <dcgettext@plt>
   13e58:	mov	r1, r4
   13e5c:	bl	12b50 <fputs@plt>
   13e60:	mov	r2, #5
   13e64:	ldr	r1, [pc, #-1028]	; 13a68 <__assert_fail@plt+0xea0>
   13e68:	mov	r0, r6
   13e6c:	bl	1261c <dcgettext@plt>
   13e70:	mov	r1, r4
   13e74:	bl	12b50 <fputs@plt>
   13e78:	mov	r2, #5
   13e7c:	ldr	r1, [pc, #-1048]	; 13a6c <__assert_fail@plt+0xea4>
   13e80:	mov	r0, r6
   13e84:	bl	1261c <dcgettext@plt>
   13e88:	mov	r1, r4
   13e8c:	bl	12b50 <fputs@plt>
   13e90:	mov	r2, #5
   13e94:	ldr	r1, [pc, #-1068]	; 13a70 <__assert_fail@plt+0xea8>
   13e98:	mov	r0, r6
   13e9c:	bl	1261c <dcgettext@plt>
   13ea0:	mov	r1, r4
   13ea4:	bl	12b50 <fputs@plt>
   13ea8:	mov	r2, #5
   13eac:	ldr	r1, [pc, #-1088]	; 13a74 <__assert_fail@plt+0xeac>
   13eb0:	mov	r0, r6
   13eb4:	bl	1261c <dcgettext@plt>
   13eb8:	mov	r1, r4
   13ebc:	bl	12b50 <fputs@plt>
   13ec0:	mov	r2, #5
   13ec4:	ldr	r1, [pc, #-1108]	; 13a78 <__assert_fail@plt+0xeb0>
   13ec8:	mov	r0, r6
   13ecc:	bl	1261c <dcgettext@plt>
   13ed0:	mov	r1, r4
   13ed4:	bl	12b50 <fputs@plt>
   13ed8:	mov	r2, #5
   13edc:	ldr	r1, [pc, #-1128]	; 13a7c <__assert_fail@plt+0xeb4>
   13ee0:	mov	r0, r6
   13ee4:	bl	1261c <dcgettext@plt>
   13ee8:	mov	r1, r4
   13eec:	bl	12b50 <fputs@plt>
   13ef0:	mov	r2, #5
   13ef4:	ldr	r1, [pc, #-1148]	; 13a80 <__assert_fail@plt+0xeb8>
   13ef8:	mov	r0, r6
   13efc:	bl	1261c <dcgettext@plt>
   13f00:	mov	r1, r4
   13f04:	bl	12b50 <fputs@plt>
   13f08:	mov	r2, #5
   13f0c:	ldr	r1, [pc, #-1168]	; 13a84 <__assert_fail@plt+0xebc>
   13f10:	mov	r0, r6
   13f14:	bl	1261c <dcgettext@plt>
   13f18:	mov	r1, r4
   13f1c:	bl	12b50 <fputs@plt>
   13f20:	mov	r2, #5
   13f24:	ldr	r1, [pc, #-1188]	; 13a88 <__assert_fail@plt+0xec0>
   13f28:	mov	r0, r6
   13f2c:	bl	1261c <dcgettext@plt>
   13f30:	mov	r1, r4
   13f34:	bl	12b50 <fputs@plt>
   13f38:	mov	r2, #5
   13f3c:	ldr	r1, [pc, #-1208]	; 13a8c <__assert_fail@plt+0xec4>
   13f40:	mov	r0, r6
   13f44:	bl	1261c <dcgettext@plt>
   13f48:	mov	r1, r4
   13f4c:	bl	12b50 <fputs@plt>
   13f50:	mov	r2, #5
   13f54:	ldr	r1, [pc, #-1228]	; 13a90 <__assert_fail@plt+0xec8>
   13f58:	mov	r0, r6
   13f5c:	bl	1261c <dcgettext@plt>
   13f60:	mov	r1, r4
   13f64:	bl	12b50 <fputs@plt>
   13f68:	mov	r1, r4
   13f6c:	mov	r0, #10
   13f70:	bl	12a84 <fputc@plt>
   13f74:	mov	r2, #5
   13f78:	ldr	r1, [pc, #-1260]	; 13a94 <__assert_fail@plt+0xecc>
   13f7c:	mov	r0, r6
   13f80:	bl	1261c <dcgettext@plt>
   13f84:	mov	r1, r4
   13f88:	bl	12b50 <fputs@plt>
   13f8c:	mov	r2, #5
   13f90:	ldr	r1, [pc, #-1280]	; 13a98 <__assert_fail@plt+0xed0>
   13f94:	mov	r0, r6
   13f98:	bl	1261c <dcgettext@plt>
   13f9c:	mov	r1, r4
   13fa0:	bl	12b50 <fputs@plt>
   13fa4:	mov	r1, r4
   13fa8:	mov	r0, #10
   13fac:	bl	12a84 <fputc@plt>
   13fb0:	mov	r2, #5
   13fb4:	ldr	r1, [pc, #-1312]	; 13a9c <__assert_fail@plt+0xed4>
   13fb8:	mov	r0, r6
   13fbc:	bl	1261c <dcgettext@plt>
   13fc0:	mov	r2, #5
   13fc4:	ldr	r1, [pc, #-1324]	; 13aa0 <__assert_fail@plt+0xed8>
   13fc8:	mov	r7, r0
   13fcc:	mov	r0, r6
   13fd0:	bl	1261c <dcgettext@plt>
   13fd4:	ldr	r2, [pc, #-1336]	; 13aa4 <__assert_fail@plt+0xedc>
   13fd8:	mov	r3, r7
   13fdc:	str	r2, [sp]
   13fe0:	ldr	r1, [pc, #-1344]	; 13aa8 <__assert_fail@plt+0xee0>
   13fe4:	ldr	r2, [pc, #-1344]	; 13aac <__assert_fail@plt+0xee4>
   13fe8:	str	r0, [sp, #4]
   13fec:	mov	r0, #1
   13ff0:	bl	1294c <__printf_chk@plt>
   13ff4:	ldr	r1, [pc, #-1356]	; 13ab0 <__assert_fail@plt+0xee8>
   13ff8:	mov	r2, #5
   13ffc:	mov	r0, r6
   14000:	bl	1261c <dcgettext@plt>
   14004:	mov	r1, r4
   14008:	bl	12b50 <fputs@plt>
   1400c:	ldr	r1, [r5, #20]
   14010:	mov	r2, #5
   14014:	mov	r0, #0
   14018:	ldr	r7, [r5]
   1401c:	bl	1261c <dcgettext@plt>
   14020:	add	r6, r6, #1
   14024:	mov	r3, r7
   14028:	mov	r2, r8
   1402c:	mov	r1, #1
   14030:	add	r5, r5, #32
   14034:	str	r0, [sp]
   14038:	mov	r0, r4
   1403c:	bl	129ac <__fprintf_chk@plt>
   14040:	cmp	r6, #25
   14044:	bne	1400c <__assert_fail@plt+0x1444>
   14048:	mov	r2, #5
   1404c:	ldr	r1, [pc, #-1440]	; 13ab4 <__assert_fail@plt+0xeec>
   14050:	mov	r0, #0
   14054:	bl	1261c <dcgettext@plt>
   14058:	ldr	r2, [pc, #-1448]	; 13ab8 <__assert_fail@plt+0xef0>
   1405c:	mov	r1, r0
   14060:	mov	r0, #1
   14064:	bl	1294c <__printf_chk@plt>
   14068:	mov	r0, #0
   1406c:	bl	127fc <exit@plt>
   14070:	ldr	r3, [pc, #-1460]	; 13ac4 <__assert_fail@plt+0xefc>
   14074:	mov	r2, #5
   14078:	ldr	r1, [pc, #-1476]	; 13abc <__assert_fail@plt+0xef4>
   1407c:	mov	r0, #0
   14080:	ldr	r4, [r3]
   14084:	bl	1261c <dcgettext@plt>
   14088:	ldr	r3, [pc, #-1476]	; 13acc <__assert_fail@plt+0xf04>
   1408c:	mov	r1, #1
   14090:	ldr	r3, [r3]
   14094:	mov	r2, r0
   14098:	mov	r0, r4
   1409c:	bl	129ac <__fprintf_chk@plt>
   140a0:	mov	r0, #1
   140a4:	bl	127fc <exit@plt>
   140a8:	ldr	r1, [pc, #-1520]	; 13ac0 <__assert_fail@plt+0xef8>
   140ac:	mov	r0, sl
   140b0:	bl	12508 <scols_table_set_name@plt>
   140b4:	b	1367c <__assert_fail@plt+0xab4>
   140b8:	ldr	r6, [pc, #-1532]	; 13ac4 <__assert_fail@plt+0xefc>
   140bc:	mov	r2, #5
   140c0:	ldr	r1, [pc, #-1536]	; 13ac8 <__assert_fail@plt+0xf00>
   140c4:	mov	r0, #0
   140c8:	ldr	sl, [r6]
   140cc:	bl	1261c <dcgettext@plt>
   140d0:	ldr	r3, [pc, #-1548]	; 13acc <__assert_fail@plt+0xf04>
   140d4:	mov	r1, #1
   140d8:	sub	r4, r5, #4
   140dc:	ldr	r3, [r3]
   140e0:	add	r5, r5, #56	; 0x38
   140e4:	ldr	r7, [pc, #-1564]	; 13ad0 <__assert_fail@plt+0xf08>
   140e8:	ldr	r9, [pc, #-1564]	; 13ad4 <__assert_fail@plt+0xf0c>
   140ec:	ldr	r8, [pc, #-1564]	; 13ad8 <__assert_fail@plt+0xf10>
   140f0:	mov	r2, r0
   140f4:	mov	r0, sl
   140f8:	bl	129ac <__fprintf_chk@plt>
   140fc:	ldr	r0, [r4, #4]!
   14100:	cmp	r0, #0
   14104:	beq	1415c <__assert_fail@plt+0x1594>
   14108:	cmp	r0, #65	; 0x41
   1410c:	beq	14170 <__assert_fail@plt+0x15a8>
   14110:	ldr	r2, [pc, #-1596]	; 13adc <__assert_fail@plt+0xf14>
   14114:	b	14128 <__assert_fail@plt+0x1560>
   14118:	add	r2, r2, #16
   1411c:	ldr	r1, [r2, #12]
   14120:	cmp	r0, r1
   14124:	beq	14174 <__assert_fail@plt+0x15ac>
   14128:	ldr	r3, [r2, #16]
   1412c:	cmp	r3, #0
   14130:	bne	14118 <__assert_fail@plt+0x1550>
   14134:	sub	r3, r0, #33	; 0x21
   14138:	cmp	r3, #93	; 0x5d
   1413c:	bhi	14154 <__assert_fail@plt+0x158c>
   14140:	mov	r3, r0
   14144:	mov	r2, r8
   14148:	mov	r1, #1
   1414c:	ldr	r0, [r6]
   14150:	bl	129ac <__fprintf_chk@plt>
   14154:	cmp	r4, r5
   14158:	bne	140fc <__assert_fail@plt+0x1534>
   1415c:	ldr	r1, [r6]
   14160:	mov	r0, #10
   14164:	bl	12a84 <fputc@plt>
   14168:	mov	r0, #1
   1416c:	bl	127fc <exit@plt>
   14170:	mov	r3, r9
   14174:	mov	r2, r7
   14178:	mov	r1, #1
   1417c:	ldr	r0, [r6]
   14180:	bl	129ac <__fprintf_chk@plt>
   14184:	b	14154 <__assert_fail@plt+0x158c>
   14188:	mov	r2, #5
   1418c:	ldr	r1, [pc, #-1716]	; 13ae0 <__assert_fail@plt+0xf18>
   14190:	bl	1261c <dcgettext@plt>
   14194:	bl	12a60 <warn@plt>
   14198:	b	134f8 <__assert_fail@plt+0x930>
   1419c:	mov	r2, #5
   141a0:	ldr	r1, [pc, #-1632]	; 13b48 <__assert_fail@plt+0xf80>
   141a4:	bl	1261c <dcgettext@plt>
   141a8:	bl	12a60 <warn@plt>
   141ac:	mov	sl, r9
   141b0:	b	134f8 <__assert_fail@plt+0x930>
   141b4:	ldr	r1, [r2, #24]
   141b8:	cmp	r1, #0
   141bc:	bne	1340c <__assert_fail@plt+0x844>
   141c0:	ldr	r2, [r2, #344]	; 0x158
   141c4:	cmp	r2, #0
   141c8:	bne	1340c <__assert_fail@plt+0x844>
   141cc:	b	13430 <__assert_fail@plt+0x868>
   141d0:	mov	r0, r6
   141d4:	bl	12904 <mnt_free_iter@plt>
   141d8:	b	13594 <__assert_fail@plt+0x9cc>
   141dc:	mov	r2, #5
   141e0:	ldr	r1, [pc, #-1796]	; 13ae4 <__assert_fail@plt+0xf1c>
   141e4:	bl	1261c <dcgettext@plt>
   141e8:	bl	12a60 <warn@plt>
   141ec:	b	134f8 <__assert_fail@plt+0x930>
   141f0:	ands	r5, r8, #512	; 0x200
   141f4:	beq	14654 <__assert_fail@plt+0x1a8c>
   141f8:	ldr	r3, [sp, #12]
   141fc:	cmp	r3, #0
   14200:	ldrne	r3, [r3]
   14204:	ldreq	r3, [pc, #-1828]	; 13ae8 <__assert_fail@plt+0xf20>
   14208:	str	r3, [sp, #56]	; 0x38
   1420c:	bl	12664 <mnt_new_table@plt>
   14210:	subs	r3, r0, #0
   14214:	str	r3, [sp, #40]	; 0x28
   14218:	beq	148c8 <__assert_fail@plt+0x1d00>
   1421c:	ldr	r0, [sp, #24]
   14220:	bl	125bc <mnt_new_iter@plt>
   14224:	subs	r3, r0, #0
   14228:	str	r3, [sp, #8]
   1422c:	beq	14894 <__assert_fail@plt+0x1ccc>
   14230:	bl	1297c <mnt_new_tabdiff@plt>
   14234:	subs	r3, r0, #0
   14238:	str	r3, [sp, #20]
   1423c:	beq	14880 <__assert_fail@plt+0x1cb8>
   14240:	mov	r1, #0
   14244:	mov	r0, r9
   14248:	bl	12988 <mnt_table_set_cache@plt>
   1424c:	mov	r1, #0
   14250:	ldr	r0, [sp, #40]	; 0x28
   14254:	bl	12988 <mnt_table_set_cache@plt>
   14258:	ldr	r1, [pc, #-1908]	; 13aec <__assert_fail@plt+0xf24>
   1425c:	ldr	r0, [sp, #56]	; 0x38
   14260:	bl	12ad8 <fopen64@plt>
   14264:	subs	r3, r0, #0
   14268:	str	r3, [sp, #60]	; 0x3c
   1426c:	beq	14850 <__assert_fail@plt+0x1c88>
   14270:	ldr	r1, [pc, #-1928]	; 13af0 <__assert_fail@plt+0xf28>
   14274:	ldr	r0, [sp, #40]	; 0x28
   14278:	bl	1246c <mnt_table_set_parser_errcb@plt>
   1427c:	ldr	r0, [sp, #60]	; 0x3c
   14280:	bl	12970 <fileno@plt>
   14284:	mov	r3, #2
   14288:	str	r9, [sp, #48]	; 0x30
   1428c:	strh	r3, [sp, #80]	; 0x50
   14290:	str	sl, [sp, #28]
   14294:	str	r9, [sp, #52]	; 0x34
   14298:	str	r0, [sp, #76]	; 0x4c
   1429c:	ldr	r2, [sp, #32]
   142a0:	mov	r1, #1
   142a4:	add	r0, sp, #76	; 0x4c
   142a8:	bl	126a0 <poll@plt>
   142ac:	cmp	r0, #0
   142b0:	beq	14844 <__assert_fail@plt+0x1c7c>
   142b4:	blt	14798 <__assert_fail@plt+0x1bd0>
   142b8:	ldr	r4, [sp, #60]	; 0x3c
   142bc:	mov	r0, r4
   142c0:	bl	1264c <rewind@plt>
   142c4:	mov	r1, r4
   142c8:	ldr	r2, [sp, #56]	; 0x38
   142cc:	ldr	r0, [sp, #40]	; 0x28
   142d0:	bl	126dc <mnt_table_parse_stream@plt>
   142d4:	subs	r4, r0, #0
   142d8:	beq	14730 <__assert_fail@plt+0x1b68>
   142dc:	cmp	r4, #0
   142e0:	blt	147d4 <__assert_fail@plt+0x1c0c>
   142e4:	ldr	r1, [sp, #24]
   142e8:	ldr	r0, [sp, #8]
   142ec:	bl	12b74 <mnt_reset_iter@plt>
   142f0:	mov	r3, #0
   142f4:	str	r3, [sp, #44]	; 0x2c
   142f8:	add	r3, sp, #72	; 0x48
   142fc:	str	r3, [sp, #36]	; 0x24
   14300:	ldr	r3, [sp, #36]	; 0x24
   14304:	add	r2, sp, #64	; 0x40
   14308:	str	r3, [sp]
   1430c:	ldr	r1, [sp, #8]
   14310:	add	r3, sp, #68	; 0x44
   14314:	ldr	r0, [sp, #20]
   14318:	bl	125f8 <mnt_tabdiff_next_change@plt>
   1431c:	cmp	r0, #0
   14320:	bne	145c0 <__assert_fail@plt+0x19f8>
   14324:	ldr	r1, [fp, #236]	; 0xec
   14328:	cmp	r1, #0
   1432c:	beq	14360 <__assert_fail@plt+0x1798>
   14330:	ble	14300 <__assert_fail@plt+0x1738>
   14334:	ldr	ip, [sp, #72]	; 0x48
   14338:	ldr	r3, [fp, #220]	; 0xdc
   1433c:	cmp	ip, r3
   14340:	beq	14360 <__assert_fail@plt+0x1798>
   14344:	ldr	r3, [pc, #-2136]	; 13af4 <__assert_fail@plt+0xf2c>
   14348:	add	r0, r0, #1
   1434c:	cmp	r1, r0
   14350:	beq	14300 <__assert_fail@plt+0x1738>
   14354:	ldr	r2, [r3], #4
   14358:	cmp	ip, r2
   1435c:	bne	14348 <__assert_fail@plt+0x1780>
   14360:	ldr	r5, [sp, #68]	; 0x44
   14364:	mov	r1, #0
   14368:	cmp	r5, #0
   1436c:	ldreq	r5, [sp, #64]	; 0x40
   14370:	mov	r0, r5
   14374:	bl	14a08 <__assert_fail@plt+0x1e40>
   14378:	cmp	r0, #0
   1437c:	beq	1456c <__assert_fail@plt+0x19a4>
   14380:	mov	r1, #0
   14384:	ldr	r0, [sp, #28]
   14388:	ldrd	r6, [sp, #64]	; 0x40
   1438c:	ldr	r8, [sp, #72]	; 0x48
   14390:	bl	12790 <scols_table_new_line@plt>
   14394:	ldr	r3, [sp, #44]	; 0x2c
   14398:	add	r3, r3, #1
   1439c:	str	r3, [sp, #44]	; 0x2c
   143a0:	subs	r5, r0, #0
   143a4:	beq	148b0 <__assert_fail@plt+0x1ce8>
   143a8:	ldr	r3, [fp, #12]
   143ac:	cmp	r3, #0
   143b0:	subne	r9, r8, #2
   143b4:	bicne	sl, r9, #2
   143b8:	movne	r4, #0
   143bc:	bne	14408 <__assert_fail@plt+0x1840>
   143c0:	b	144ec <__assert_fail@plt+0x1924>
   143c4:	cmp	r0, #11
   143c8:	beq	14480 <__assert_fail@plt+0x18b8>
   143cc:	cmp	r7, #0
   143d0:	mov	r1, r4
   143d4:	movne	r0, r7
   143d8:	moveq	r0, r6
   143dc:	bl	1527c <__assert_fail@plt+0x26b4>
   143e0:	mov	r2, r0
   143e4:	mov	r1, r4
   143e8:	mov	r0, r5
   143ec:	bl	124d8 <scols_line_refer_data@plt>
   143f0:	cmp	r0, #0
   143f4:	bne	147b8 <__assert_fail@plt+0x1bf0>
   143f8:	ldr	r3, [fp, #12]
   143fc:	add	r4, r4, #1
   14400:	cmp	r4, r3
   14404:	bcs	144ec <__assert_fail@plt+0x1924>
   14408:	mov	r0, r4
   1440c:	bl	14c48 <__assert_fail@plt+0x2080>
   14410:	cmp	r0, #12
   14414:	beq	14458 <__assert_fail@plt+0x1890>
   14418:	cmp	r0, #13
   1441c:	bne	143c4 <__assert_fail@plt+0x17fc>
   14420:	cmp	r6, #0
   14424:	beq	14478 <__assert_fail@plt+0x18b0>
   14428:	cmp	sl, #0
   1442c:	bne	14478 <__assert_fail@plt+0x18b0>
   14430:	mov	r0, r6
   14434:	bl	12b20 <mnt_fs_get_options@plt>
   14438:	cmp	r0, #0
   1443c:	beq	14478 <__assert_fail@plt+0x18b0>
   14440:	bl	12628 <strdup@plt>
   14444:	subs	r2, r0, #0
   14448:	bne	143e4 <__assert_fail@plt+0x181c>
   1444c:	ldr	r1, [pc, #-2396]	; 13af8 <__assert_fail@plt+0xf30>
   14450:	mov	r0, #1
   14454:	bl	12694 <err@plt>
   14458:	cmp	r6, #0
   1445c:	beq	14478 <__assert_fail@plt+0x18b0>
   14460:	cmp	r9, #1
   14464:	bhi	14478 <__assert_fail@plt+0x18b0>
   14468:	mov	r0, r6
   1446c:	bl	12724 <mnt_fs_get_target@plt>
   14470:	cmp	r0, #0
   14474:	bne	14440 <__assert_fail@plt+0x1878>
   14478:	mov	r2, #0
   1447c:	b	143e4 <__assert_fail@plt+0x181c>
   14480:	sub	r3, r8, #1
   14484:	mov	r2, #5
   14488:	cmp	r3, #3
   1448c:	ldrls	pc, [pc, r3, lsl #2]
   14490:	b	14908 <__assert_fail@plt+0x1d40>
   14494:	ldrdeq	r4, [r1], -ip
   14498:	andeq	r4, r1, ip, asr #9
   1449c:			; <UNDEFINED> instruction: 0x000144bc
   144a0:	andeq	r4, r1, r4, lsr #9
   144a4:	ldr	r1, [pc, #-2480]	; 13afc <__assert_fail@plt+0xf34>
   144a8:	mov	r0, #0
   144ac:	bl	1261c <dcgettext@plt>
   144b0:	cmp	r0, #0
   144b4:	bne	14440 <__assert_fail@plt+0x1878>
   144b8:	b	14478 <__assert_fail@plt+0x18b0>
   144bc:	ldr	r1, [pc, #-2500]	; 13b00 <__assert_fail@plt+0xf38>
   144c0:	mov	r0, #0
   144c4:	bl	1261c <dcgettext@plt>
   144c8:	b	144b0 <__assert_fail@plt+0x18e8>
   144cc:	ldr	r1, [pc, #-2512]	; 13b04 <__assert_fail@plt+0xf3c>
   144d0:	mov	r0, #0
   144d4:	bl	1261c <dcgettext@plt>
   144d8:	b	144b0 <__assert_fail@plt+0x18e8>
   144dc:	ldr	r1, [pc, #-2524]	; 13b08 <__assert_fail@plt+0xf40>
   144e0:	mov	r0, #0
   144e4:	bl	1261c <dcgettext@plt>
   144e8:	b	144b0 <__assert_fail@plt+0x18e8>
   144ec:	ldr	r4, [fp]
   144f0:	ands	r4, r4, #8
   144f4:	beq	14300 <__assert_fail@plt+0x1738>
   144f8:	mov	r2, #0
   144fc:	mov	r1, r2
   14500:	ldr	r0, [sp, #28]
   14504:	bl	12604 <scols_table_print_range@plt>
   14508:	subs	r4, r0, #0
   1450c:	beq	14600 <__assert_fail@plt+0x1a38>
   14510:	ldr	r3, [pc, #-2572]	; 13b0c <__assert_fail@plt+0xf44>
   14514:	ldr	sl, [sp, #28]
   14518:	ldr	r9, [sp, #52]	; 0x34
   1451c:	ldr	r0, [r3]
   14520:	bl	12538 <fflush@plt>
   14524:	str	r4, [sp, #16]
   14528:	ldr	r0, [sp, #40]	; 0x28
   1452c:	bl	124c0 <mnt_unref_table@plt>
   14530:	ldr	r0, [sp, #20]
   14534:	bl	12760 <mnt_free_tabdiff@plt>
   14538:	ldr	r0, [sp, #8]
   1453c:	bl	12904 <mnt_free_iter@plt>
   14540:	ldr	r0, [sp, #60]	; 0x3c
   14544:	bl	129dc <fclose@plt>
   14548:	ldr	r4, [sp, #16]
   1454c:	cmp	r4, #0
   14550:	bne	134f8 <__assert_fail@plt+0x930>
   14554:	ldr	r3, [fp]
   14558:	tst	r3, #512	; 0x200
   1455c:	bne	134f8 <__assert_fail@plt+0x930>
   14560:	mov	r0, sl
   14564:	bl	12a6c <scols_print_table@plt>
   14568:	b	134f8 <__assert_fail@plt+0x930>
   1456c:	ldr	r3, [fp]
   14570:	tst	r3, #64	; 0x40
   14574:	bne	14300 <__assert_fail@plt+0x1738>
   14578:	ldr	r3, [pc, #-2664]	; 13b18 <__assert_fail@plt+0xf50>
   1457c:	ldr	r6, [r3, #24]
   14580:	cmp	r6, #0
   14584:	beq	14300 <__assert_fail@plt+0x1738>
   14588:	ldr	r7, [r3, #56]	; 0x38
   1458c:	cmp	r7, #0
   14590:	bne	14300 <__assert_fail@plt+0x1738>
   14594:	mov	r0, r5
   14598:	mov	r1, r7
   1459c:	str	r6, [r3, #56]	; 0x38
   145a0:	str	r7, [r3, #24]
   145a4:	mov	r5, r3
   145a8:	bl	14a08 <__assert_fail@plt+0x1e40>
   145ac:	str	r7, [r5, #56]	; 0x38
   145b0:	str	r6, [r5, #24]
   145b4:	cmp	r0, #0
   145b8:	beq	14300 <__assert_fail@plt+0x1738>
   145bc:	b	14380 <__assert_fail@plt+0x17b8>
   145c0:	ldr	r3, [sp, #44]	; 0x2c
   145c4:	cmp	r3, #0
   145c8:	bne	144f8 <__assert_fail@plt+0x1930>
   145cc:	ldr	r0, [sp, #28]
   145d0:	bl	1267c <scols_table_remove_lines@plt>
   145d4:	ldr	r0, [sp, #48]	; 0x30
   145d8:	bl	12550 <mnt_reset_table@plt>
   145dc:	ldr	r3, [sp, #48]	; 0x30
   145e0:	ldr	r2, [sp, #40]	; 0x28
   145e4:	str	r3, [sp, #40]	; 0x28
   145e8:	str	r2, [sp, #48]	; 0x30
   145ec:	b	1429c <__assert_fail@plt+0x16d4>
   145f0:	mov	r0, r6
   145f4:	mov	r1, r5
   145f8:	bl	12af0 <mnt_cache_set_targets@plt>
   145fc:	b	13868 <__assert_fail@plt+0xca0>
   14600:	ldr	r4, [sp, #28]
   14604:	mov	r0, r4
   14608:	bl	12718 <scols_table_get_stream@plt>
   1460c:	mov	r1, r0
   14610:	mov	r0, #10
   14614:	bl	12a84 <fputc@plt>
   14618:	ldr	r3, [pc, #-2836]	; 13b0c <__assert_fail@plt+0xf44>
   1461c:	ldr	r0, [r3]
   14620:	bl	12538 <fflush@plt>
   14624:	mov	r0, r4
   14628:	bl	1267c <scols_table_remove_lines@plt>
   1462c:	ldr	r0, [sp, #48]	; 0x30
   14630:	bl	12550 <mnt_reset_table@plt>
   14634:	ldr	r4, [fp]
   14638:	ands	r4, r4, #8
   1463c:	beq	145dc <__assert_fail@plt+0x1a14>
   14640:	ldr	r3, [sp, #48]	; 0x30
   14644:	ldr	sl, [sp, #28]
   14648:	ldr	r9, [sp, #52]	; 0x34
   1464c:	str	r3, [sp, #40]	; 0x28
   14650:	b	14528 <__assert_fail@plt+0x1960>
   14654:	ldr	r3, [pc, #-2892]	; 13b10 <__assert_fail@plt+0xf48>
   14658:	and	r8, r8, r3
   1465c:	cmp	r8, #16777216	; 0x1000000
   14660:	beq	14748 <__assert_fail@plt+0x1b80>
   14664:	ldr	r2, [sp, #24]
   14668:	mov	r1, sl
   1466c:	mov	r0, r9
   14670:	bl	15c58 <__assert_fail@plt+0x3090>
   14674:	ldr	r3, [sp, #8]
   14678:	sub	r3, r3, #3
   1467c:	clz	r3, r3
   14680:	lsr	r3, r3, #5
   14684:	cmp	r0, #0
   14688:	moveq	r3, #0
   1468c:	cmp	r3, #0
   14690:	mov	r4, r0
   14694:	beq	1454c <__assert_fail@plt+0x1984>
   14698:	ldr	r2, [fp]
   1469c:	ldr	r3, [pc, #-2960]	; 13b14 <__assert_fail@plt+0xf4c>
   146a0:	and	r3, r3, r2
   146a4:	cmp	r3, #64	; 0x40
   146a8:	bne	134f8 <__assert_fail@plt+0x930>
   146ac:	ldr	r6, [pc, #-2972]	; 13b18 <__assert_fail@plt+0xf50>
   146b0:	ldr	r7, [r6, #56]	; 0x38
   146b4:	cmp	r7, #0
   146b8:	beq	134f8 <__assert_fail@plt+0x930>
   146bc:	tst	r2, #16384	; 0x4000
   146c0:	beq	1477c <__assert_fail@plt+0x1bb4>
   146c4:	mov	r2, #1
   146c8:	mov	r1, r7
   146cc:	mov	r0, r9
   146d0:	bl	12ac0 <mnt_table_find_mountpoint@plt>
   146d4:	cmp	r0, #0
   146d8:	beq	146f8 <__assert_fail@plt+0x1b30>
   146dc:	bl	12724 <mnt_fs_get_target@plt>
   146e0:	subs	r4, r0, #0
   146e4:	beq	146f8 <__assert_fail@plt+0x1b30>
   146e8:	mov	r1, r7
   146ec:	bl	124e4 <strcmp@plt>
   146f0:	cmp	r0, #0
   146f4:	bne	14764 <__assert_fail@plt+0x1b9c>
   146f8:	ldr	r3, [fp, #4]
   146fc:	cmp	r3, #0
   14700:	beq	148fc <__assert_fail@plt+0x1d34>
   14704:	ldr	r2, [sp, #24]
   14708:	mov	r1, sl
   1470c:	mov	r0, r9
   14710:	bl	15c58 <__assert_fail@plt+0x3090>
   14714:	mov	r4, r0
   14718:	b	1454c <__assert_fail@plt+0x1984>
   1471c:	mov	r2, #5
   14720:	ldr	r1, [pc, #-3084]	; 13b1c <__assert_fail@plt+0xf54>
   14724:	bl	1261c <dcgettext@plt>
   14728:	bl	12a60 <warn@plt>
   1472c:	b	134f8 <__assert_fail@plt+0x930>
   14730:	ldr	r2, [sp, #40]	; 0x28
   14734:	ldr	r1, [sp, #48]	; 0x30
   14738:	ldr	r0, [sp, #20]
   1473c:	bl	1270c <mnt_diff_tables@plt>
   14740:	mov	r4, r0
   14744:	b	142dc <__assert_fail@plt+0x1714>
   14748:	mov	r3, r5
   1474c:	mov	r2, r5
   14750:	mov	r1, r9
   14754:	mov	r0, sl
   14758:	bl	158fc <__assert_fail@plt+0x2d34>
   1475c:	mov	r4, r0
   14760:	b	1454c <__assert_fail@plt+0x1984>
   14764:	mov	r0, r4
   14768:	bl	12628 <strdup@plt>
   1476c:	cmp	r0, #0
   14770:	beq	1444c <__assert_fail@plt+0x1884>
   14774:	str	r0, [r6, #56]	; 0x38
   14778:	b	146f8 <__assert_fail@plt+0x1b30>
   1477c:	mov	r0, r7
   14780:	ldr	r1, [fp, #4]
   14784:	bl	1288c <mnt_resolve_path@plt>
   14788:	subs	r5, r0, #0
   1478c:	beq	14704 <__assert_fail@plt+0x1b3c>
   14790:	mov	r7, r5
   14794:	b	146c4 <__assert_fail@plt+0x1afc>
   14798:	mov	r2, #5
   1479c:	ldr	r1, [pc, #-3204]	; 13b20 <__assert_fail@plt+0xf58>
   147a0:	mov	r0, #0
   147a4:	ldr	sl, [sp, #28]
   147a8:	ldr	r9, [sp, #52]	; 0x34
   147ac:	bl	1261c <dcgettext@plt>
   147b0:	bl	12a60 <warn@plt>
   147b4:	b	14524 <__assert_fail@plt+0x195c>
   147b8:	ldr	r1, [pc, #-3228]	; 13b24 <__assert_fail@plt+0xf5c>
   147bc:	mov	r2, #5
   147c0:	mov	r0, #0
   147c4:	bl	1261c <dcgettext@plt>
   147c8:	mov	r1, r0
   147cc:	mov	r0, #1
   147d0:	bl	12694 <err@plt>
   147d4:	ldr	sl, [sp, #28]
   147d8:	ldr	r9, [sp, #52]	; 0x34
   147dc:	b	14524 <__assert_fail@plt+0x195c>
   147e0:	tst	r3, #16777216	; 0x1000000
   147e4:	beq	135d8 <__assert_fail@plt+0xa10>
   147e8:	b	137e4 <__assert_fail@plt+0xc1c>
   147ec:	ldr	r1, [pc, #-3276]	; 13b28 <__assert_fail@plt+0xf60>
   147f0:	mov	r2, #5
   147f4:	mov	r0, #0
   147f8:	bl	1261c <dcgettext@plt>
   147fc:	mov	r1, r0
   14800:	mov	r0, #1
   14804:	bl	12a3c <errx@plt>
   14808:	mov	r2, r4
   1480c:	ldr	r1, [pc, #-3304]	; 13b2c <__assert_fail@plt+0xf64>
   14810:	mov	r0, #1
   14814:	bl	12694 <err@plt>
   14818:	bl	14ef4 <__assert_fail@plt+0x232c>
   1481c:	mov	r2, #5
   14820:	ldr	r1, [pc, #-3320]	; 13b30 <__assert_fail@plt+0xf68>
   14824:	mov	r0, #0
   14828:	bl	1261c <dcgettext@plt>
   1482c:	ldr	r3, [pc, #-3328]	; 13b34 <__assert_fail@plt+0xf6c>
   14830:	ldr	r2, [r3]
   14834:	mov	r1, r0
   14838:	mov	r0, #1
   1483c:	bl	12a3c <errx@plt>
   14840:	bl	12634 <__stack_chk_fail@plt>
   14844:	ldr	sl, [sp, #28]
   14848:	ldr	r9, [sp, #52]	; 0x34
   1484c:	b	14528 <__assert_fail@plt+0x1960>
   14850:	ldr	r1, [pc, #-3360]	; 13b38 <__assert_fail@plt+0xf70>
   14854:	mov	r2, #5
   14858:	bl	1261c <dcgettext@plt>
   1485c:	ldr	r1, [sp, #56]	; 0x38
   14860:	bl	12a60 <warn@plt>
   14864:	ldr	r0, [sp, #40]	; 0x28
   14868:	bl	124c0 <mnt_unref_table@plt>
   1486c:	ldr	r0, [sp, #20]
   14870:	bl	12760 <mnt_free_tabdiff@plt>
   14874:	ldr	r0, [sp, #8]
   14878:	bl	12904 <mnt_free_iter@plt>
   1487c:	b	134f8 <__assert_fail@plt+0x930>
   14880:	mov	r2, #5
   14884:	ldr	r1, [pc, #-3408]	; 13b3c <__assert_fail@plt+0xf74>
   14888:	bl	1261c <dcgettext@plt>
   1488c:	bl	12a60 <warn@plt>
   14890:	b	14864 <__assert_fail@plt+0x1c9c>
   14894:	mov	r2, #5
   14898:	ldr	r1, [pc, #-3424]	; 13b40 <__assert_fail@plt+0xf78>
   1489c:	bl	1261c <dcgettext@plt>
   148a0:	bl	12a60 <warn@plt>
   148a4:	ldr	r3, [sp, #8]
   148a8:	str	r3, [sp, #20]
   148ac:	b	14864 <__assert_fail@plt+0x1c9c>
   148b0:	ldr	r1, [pc, #-3444]	; 13b44 <__assert_fail@plt+0xf7c>
   148b4:	mov	r2, #5
   148b8:	bl	1261c <dcgettext@plt>
   148bc:	mov	r1, r0
   148c0:	mov	r0, #1
   148c4:	bl	12694 <err@plt>
   148c8:	mov	r2, #5
   148cc:	ldr	r1, [pc, #-3468]	; 13b48 <__assert_fail@plt+0xf80>
   148d0:	bl	1261c <dcgettext@plt>
   148d4:	bl	12a60 <warn@plt>
   148d8:	ldr	r3, [sp, #40]	; 0x28
   148dc:	str	r3, [sp, #20]
   148e0:	str	r3, [sp, #8]
   148e4:	b	14864 <__assert_fail@plt+0x1c9c>
   148e8:	ldr	r3, [pc, #-3492]	; 13b4c <__assert_fail@plt+0xf84>
   148ec:	ldr	r2, [pc, #-3492]	; 13b50 <__assert_fail@plt+0xf88>
   148f0:	ldr	r1, [pc, #-3492]	; 13b54 <__assert_fail@plt+0xf8c>
   148f4:	ldr	r0, [pc, #-3492]	; 13b58 <__assert_fail@plt+0xf90>
   148f8:	bl	12bc8 <__assert_fail@plt>
   148fc:	mov	r0, r5
   14900:	bl	1255c <free@plt>
   14904:	b	14704 <__assert_fail@plt+0x1b3c>
   14908:	ldr	r1, [pc, #-3508]	; 13b5c <__assert_fail@plt+0xf94>
   1490c:	mov	r0, #0
   14910:	bl	1261c <dcgettext@plt>
   14914:	b	144b0 <__assert_fail@plt+0x18e8>
   14918:	mov	fp, #0
   1491c:	mov	lr, #0
   14920:	pop	{r1}		; (ldr r1, [sp], #4)
   14924:	mov	r2, sp
   14928:	push	{r2}		; (str r2, [sp, #-4]!)
   1492c:	push	{r0}		; (str r0, [sp, #-4]!)
   14930:	ldr	ip, [pc, #16]	; 14948 <__assert_fail@plt+0x1d80>
   14934:	push	{ip}		; (str ip, [sp, #-4]!)
   14938:	ldr	r0, [pc, #12]	; 1494c <__assert_fail@plt+0x1d84>
   1493c:	ldr	r3, [pc, #12]	; 14950 <__assert_fail@plt+0x1d88>
   14940:	bl	12784 <__libc_start_main@plt>
   14944:	bl	12b68 <abort@plt>
   14948:	andeq	r9, r1, r4, ror r8
   1494c:	ldrdeq	r2, [r1], -r8
   14950:	andeq	r9, r1, r4, lsl r8
   14954:	ldr	r3, [pc, #20]	; 14970 <__assert_fail@plt+0x1da8>
   14958:	ldr	r2, [pc, #20]	; 14974 <__assert_fail@plt+0x1dac>
   1495c:	add	r3, pc, r3
   14960:	ldr	r2, [r3, r2]
   14964:	cmp	r2, #0
   14968:	bxeq	lr
   1496c:	b	127cc <__gmon_start__@plt>
   14970:	andeq	r7, r1, r0, lsl r4
   14974:	andeq	r0, r0, r8, lsl #5
   14978:	ldr	r0, [pc, #24]	; 14998 <__assert_fail@plt+0x1dd0>
   1497c:	ldr	r3, [pc, #24]	; 1499c <__assert_fail@plt+0x1dd4>
   14980:	cmp	r3, r0
   14984:	bxeq	lr
   14988:	ldr	r3, [pc, #16]	; 149a0 <__assert_fail@plt+0x1dd8>
   1498c:	cmp	r3, #0
   14990:	bxeq	lr
   14994:	bx	r3
   14998:	andeq	ip, r2, ip, lsr #6
   1499c:	andeq	ip, r2, ip, lsr #6
   149a0:	andeq	r0, r0, r0
   149a4:	ldr	r0, [pc, #36]	; 149d0 <__assert_fail@plt+0x1e08>
   149a8:	ldr	r1, [pc, #36]	; 149d4 <__assert_fail@plt+0x1e0c>
   149ac:	sub	r1, r1, r0
   149b0:	asr	r1, r1, #2
   149b4:	add	r1, r1, r1, lsr #31
   149b8:	asrs	r1, r1, #1
   149bc:	bxeq	lr
   149c0:	ldr	r3, [pc, #16]	; 149d8 <__assert_fail@plt+0x1e10>
   149c4:	cmp	r3, #0
   149c8:	bxeq	lr
   149cc:	bx	r3
   149d0:	andeq	ip, r2, ip, lsr #6
   149d4:	andeq	ip, r2, ip, lsr #6
   149d8:	andeq	r0, r0, r0
   149dc:	push	{r4, lr}
   149e0:	ldr	r4, [pc, #24]	; 14a00 <__assert_fail@plt+0x1e38>
   149e4:	ldrb	r3, [r4]
   149e8:	cmp	r3, #0
   149ec:	popne	{r4, pc}
   149f0:	bl	14978 <__assert_fail@plt+0x1db0>
   149f4:	mov	r3, #1
   149f8:	strb	r3, [r4]
   149fc:	pop	{r4, pc}
   14a00:	andeq	ip, r2, ip, asr #6
   14a04:	b	149a4 <__assert_fail@plt+0x1ddc>
   14a08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a0c:	mov	r8, r0
   14a10:	ldr	r7, [pc, #312]	; 14b50 <__assert_fail@plt+0x1f88>
   14a14:	ldr	r4, [pc, #312]	; 14b54 <__assert_fail@plt+0x1f8c>
   14a18:	ldr	r5, [r7]
   14a1c:	ldr	r1, [r4, #88]	; 0x58
   14a20:	asr	r5, r5, #4
   14a24:	cmp	r1, #0
   14a28:	and	r6, r5, #1
   14a2c:	beq	14a3c <__assert_fail@plt+0x1e74>
   14a30:	bl	129f4 <mnt_fs_match_fstype@plt>
   14a34:	cmp	r0, #0
   14a38:	beq	14ae4 <__assert_fail@plt+0x1f1c>
   14a3c:	ldr	r1, [r4, #120]	; 0x78
   14a40:	cmp	r1, #0
   14a44:	beq	14a58 <__assert_fail@plt+0x1e90>
   14a48:	mov	r0, r8
   14a4c:	bl	12928 <mnt_fs_match_options@plt>
   14a50:	cmp	r0, #0
   14a54:	beq	14ae4 <__assert_fail@plt+0x1f1c>
   14a58:	ldr	r9, [r4, #348]	; 0x15c
   14a5c:	cmp	r9, #0
   14a60:	beq	14a7c <__assert_fail@plt+0x1eb4>
   14a64:	mov	r0, r8
   14a68:	bl	12a00 <mnt_fs_get_devno@plt>
   14a6c:	ldrd	r2, [r9]
   14a70:	cmp	r1, r3
   14a74:	cmpeq	r0, r2
   14a78:	bne	14ae4 <__assert_fail@plt+0x1f1c>
   14a7c:	ldr	r1, [r4, #56]	; 0x38
   14a80:	cmp	r1, #0
   14a84:	beq	14a9c <__assert_fail@plt+0x1ed4>
   14a88:	ldr	r2, [r7, #4]
   14a8c:	mov	r0, r8
   14a90:	bl	12a30 <mnt_fs_match_target@plt>
   14a94:	cmp	r0, #0
   14a98:	beq	14ae4 <__assert_fail@plt+0x1f1c>
   14a9c:	ldr	r1, [r4, #24]
   14aa0:	cmp	r1, #0
   14aa4:	beq	14abc <__assert_fail@plt+0x1ef4>
   14aa8:	ldr	r2, [r7, #4]
   14aac:	mov	r0, r8
   14ab0:	bl	12a48 <mnt_fs_match_source@plt>
   14ab4:	cmp	r0, #0
   14ab8:	beq	14ae4 <__assert_fail@plt+0x1f1c>
   14abc:	ldr	r3, [r7]
   14ac0:	and	r2, r3, #3072	; 0xc00
   14ac4:	cmp	r2, #1024	; 0x400
   14ac8:	beq	14b18 <__assert_fail@plt+0x1f50>
   14acc:	tst	r3, #262144	; 0x40000
   14ad0:	bne	14aec <__assert_fail@plt+0x1f24>
   14ad4:	tst	r3, #131072	; 0x20000
   14ad8:	bne	14b04 <__assert_fail@plt+0x1f3c>
   14adc:	mvn	r5, r5
   14ae0:	and	r6, r5, #1
   14ae4:	mov	r0, r6
   14ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14aec:	mov	r0, r8
   14af0:	bl	128b0 <mnt_fs_is_pseudofs@plt>
   14af4:	cmp	r0, #0
   14af8:	bne	14ae4 <__assert_fail@plt+0x1f1c>
   14afc:	ldr	r3, [r7]
   14b00:	b	14ad4 <__assert_fail@plt+0x1f0c>
   14b04:	mov	r0, r8
   14b08:	bl	128b0 <mnt_fs_is_pseudofs@plt>
   14b0c:	cmp	r0, #0
   14b10:	bne	14adc <__assert_fail@plt+0x1f14>
   14b14:	b	14ae4 <__assert_fail@plt+0x1f1c>
   14b18:	mov	r0, r8
   14b1c:	bl	124cc <mnt_fs_get_fstype@plt>
   14b20:	cmp	r0, #0
   14b24:	beq	14b38 <__assert_fail@plt+0x1f70>
   14b28:	ldr	r1, [pc, #40]	; 14b58 <__assert_fail@plt+0x1f90>
   14b2c:	bl	12484 <strstr@plt>
   14b30:	cmp	r0, #0
   14b34:	bne	14adc <__assert_fail@plt+0x1f14>
   14b38:	mov	r0, r8
   14b3c:	bl	128b0 <mnt_fs_is_pseudofs@plt>
   14b40:	cmp	r0, #0
   14b44:	bne	14ae4 <__assert_fail@plt+0x1f1c>
   14b48:	ldr	r3, [r7]
   14b4c:	b	14acc <__assert_fail@plt+0x1f04>
   14b50:	andeq	ip, r2, r0, asr r3
   14b54:	andeq	ip, r2, r8
   14b58:	ldrdeq	r9, [r1], -r0
   14b5c:	push	{r4, r5, r6, lr}
   14b60:	mov	r0, #0
   14b64:	mov	r4, r1
   14b68:	mov	r5, r2
   14b6c:	ldr	r1, [pc, #40]	; 14b9c <__assert_fail@plt+0x1fd4>
   14b70:	mov	r2, #5
   14b74:	bl	1261c <dcgettext@plt>
   14b78:	mov	r2, r5
   14b7c:	mov	r1, r4
   14b80:	bl	12850 <warnx@plt>
   14b84:	ldr	r2, [pc, #20]	; 14ba0 <__assert_fail@plt+0x1fd8>
   14b88:	mov	r0, #1
   14b8c:	ldr	r3, [r2, #8]
   14b90:	add	r3, r3, r0
   14b94:	str	r3, [r2, #8]
   14b98:	pop	{r4, r5, r6, pc}
   14b9c:	ldrdeq	r9, [r1], -r8
   14ba0:	andeq	ip, r2, r0, asr r3
   14ba4:	push	{r4, lr}
   14ba8:	mov	r0, r2
   14bac:	mov	r4, r1
   14bb0:	bl	12724 <mnt_fs_get_target@plt>
   14bb4:	ldr	r3, [pc, #24]	; 14bd4 <__assert_fail@plt+0x200c>
   14bb8:	ldr	r2, [r3, #4]
   14bbc:	mov	r1, r0
   14bc0:	mov	r0, r4
   14bc4:	bl	12a30 <mnt_fs_match_target@plt>
   14bc8:	clz	r0, r0
   14bcc:	lsr	r0, r0, #5
   14bd0:	pop	{r4, pc}
   14bd4:	andeq	ip, r2, r0, asr r3
   14bd8:	push	{r1, r2, r3}
   14bdc:	push	{r4, lr}
   14be0:	sub	sp, sp, #12
   14be4:	ldr	r4, [pc, #84]	; 14c40 <__assert_fail@plt+0x2078>
   14be8:	add	ip, sp, #24
   14bec:	mov	r3, ip
   14bf0:	ldr	r1, [r4]
   14bf4:	ldr	r2, [sp, #20]
   14bf8:	str	r1, [sp, #4]
   14bfc:	mov	r1, #1
   14c00:	str	ip, [sp]
   14c04:	bl	128d4 <__vasprintf_chk@plt>
   14c08:	cmp	r0, #0
   14c0c:	blt	14c30 <__assert_fail@plt+0x2068>
   14c10:	ldr	r2, [sp, #4]
   14c14:	ldr	r3, [r4]
   14c18:	cmp	r2, r3
   14c1c:	bne	14c3c <__assert_fail@plt+0x2074>
   14c20:	add	sp, sp, #12
   14c24:	pop	{r4, lr}
   14c28:	add	sp, sp, #12
   14c2c:	bx	lr
   14c30:	ldr	r1, [pc, #12]	; 14c44 <__assert_fail@plt+0x207c>
   14c34:	mov	r0, #1
   14c38:	bl	12694 <err@plt>
   14c3c:	bl	12634 <__stack_chk_fail@plt>
   14c40:	andeq	fp, r2, r0, asr ip
   14c44:	andeq	r9, r1, r0, lsl #28
   14c48:	cmp	r0, #0
   14c4c:	push	{r4, lr}
   14c50:	blt	14c9c <__assert_fail@plt+0x20d4>
   14c54:	ldr	r3, [pc, #84]	; 14cb0 <__assert_fail@plt+0x20e8>
   14c58:	ldr	r2, [r3, #12]
   14c5c:	cmp	r0, r2
   14c60:	bcs	14c88 <__assert_fail@plt+0x20c0>
   14c64:	add	r3, r3, r0, lsl #2
   14c68:	ldr	r0, [r3, #16]
   14c6c:	cmp	r0, #24
   14c70:	popls	{r4, pc}
   14c74:	ldr	r3, [pc, #56]	; 14cb4 <__assert_fail@plt+0x20ec>
   14c78:	mov	r2, #167	; 0xa7
   14c7c:	ldr	r1, [pc, #52]	; 14cb8 <__assert_fail@plt+0x20f0>
   14c80:	ldr	r0, [pc, #52]	; 14cbc <__assert_fail@plt+0x20f4>
   14c84:	bl	12bc8 <__assert_fail@plt>
   14c88:	ldr	r3, [pc, #36]	; 14cb4 <__assert_fail@plt+0x20ec>
   14c8c:	mov	r2, #166	; 0xa6
   14c90:	ldr	r1, [pc, #32]	; 14cb8 <__assert_fail@plt+0x20f0>
   14c94:	ldr	r0, [pc, #36]	; 14cc0 <__assert_fail@plt+0x20f8>
   14c98:	bl	12bc8 <__assert_fail@plt>
   14c9c:	ldr	r3, [pc, #16]	; 14cb4 <__assert_fail@plt+0x20ec>
   14ca0:	mov	r2, #165	; 0xa5
   14ca4:	ldr	r1, [pc, #12]	; 14cb8 <__assert_fail@plt+0x20f0>
   14ca8:	ldr	r0, [pc, #20]	; 14cc4 <__assert_fail@plt+0x20fc>
   14cac:	bl	12bc8 <__assert_fail@plt>
   14cb0:	andeq	ip, r2, r0, asr r3
   14cb4:	muleq	r1, ip, r8
   14cb8:	andeq	r9, r1, r8, lsl lr
   14cbc:	andeq	r9, r1, r4, asr lr
   14cc0:	andeq	r9, r1, ip, lsr lr
   14cc4:	andeq	r9, r1, r0, lsr lr
   14cc8:	push	{r4, r5, r6, r7, r8, lr}
   14ccc:	mov	r7, r0
   14cd0:	ldr	r8, [pc, #96]	; 14d38 <__assert_fail@plt+0x2170>
   14cd4:	mov	r6, r1
   14cd8:	mov	r4, #0
   14cdc:	ldr	r5, [r8, r4, lsl #5]
   14ce0:	mov	r2, r6
   14ce4:	mov	r1, r5
   14ce8:	mov	r0, r7
   14cec:	bl	128bc <strncasecmp@plt>
   14cf0:	mov	r3, r4
   14cf4:	add	r4, r4, #1
   14cf8:	cmp	r0, #0
   14cfc:	bne	14d0c <__assert_fail@plt+0x2144>
   14d00:	ldrsb	r2, [r5, r6]
   14d04:	cmp	r2, #0
   14d08:	beq	14d30 <__assert_fail@plt+0x2168>
   14d0c:	cmp	r4, #25
   14d10:	bne	14cdc <__assert_fail@plt+0x2114>
   14d14:	mov	r2, #5
   14d18:	ldr	r1, [pc, #28]	; 14d3c <__assert_fail@plt+0x2174>
   14d1c:	mov	r0, #0
   14d20:	bl	1261c <dcgettext@plt>
   14d24:	mov	r1, r7
   14d28:	bl	12850 <warnx@plt>
   14d2c:	mvn	r3, #0
   14d30:	mov	r0, r3
   14d34:	pop	{r4, r5, r6, r7, r8, pc}
   14d38:	andeq	ip, r2, r8
   14d3c:	andeq	r9, r1, r0, lsl #29
   14d40:	push	{r4, r5, r6, lr}
   14d44:	mov	r2, r1
   14d48:	mov	r4, r1
   14d4c:	ldr	r1, [pc, #168]	; 14dfc <__assert_fail@plt+0x2234>
   14d50:	mov	r5, r0
   14d54:	bl	128bc <strncasecmp@plt>
   14d58:	cmp	r4, #4
   14d5c:	cmpeq	r0, #0
   14d60:	beq	14dd0 <__assert_fail@plt+0x2208>
   14d64:	mov	r2, r4
   14d68:	ldr	r1, [pc, #144]	; 14e00 <__assert_fail@plt+0x2238>
   14d6c:	mov	r0, r5
   14d70:	bl	128bc <strncasecmp@plt>
   14d74:	cmp	r0, #0
   14d78:	cmpeq	r4, #5
   14d7c:	beq	14dc8 <__assert_fail@plt+0x2200>
   14d80:	mov	r2, r4
   14d84:	ldr	r1, [pc, #120]	; 14e04 <__assert_fail@plt+0x223c>
   14d88:	mov	r0, r5
   14d8c:	bl	128bc <strncasecmp@plt>
   14d90:	cmp	r4, #6
   14d94:	cmpeq	r0, #0
   14d98:	beq	14dd8 <__assert_fail@plt+0x2210>
   14d9c:	mov	r2, r4
   14da0:	ldr	r1, [pc, #96]	; 14e08 <__assert_fail@plt+0x2240>
   14da4:	mov	r0, r5
   14da8:	bl	128bc <strncasecmp@plt>
   14dac:	cmp	r4, #7
   14db0:	cmpeq	r0, #0
   14db4:	moveq	r0, #1
   14db8:	movne	r0, #0
   14dbc:	bne	14de0 <__assert_fail@plt+0x2218>
   14dc0:	mov	r0, #4
   14dc4:	pop	{r4, r5, r6, pc}
   14dc8:	mov	r0, #1
   14dcc:	pop	{r4, r5, r6, pc}
   14dd0:	mov	r0, #3
   14dd4:	pop	{r4, r5, r6, pc}
   14dd8:	mov	r0, #2
   14ddc:	pop	{r4, r5, r6, pc}
   14de0:	mov	r2, #5
   14de4:	ldr	r1, [pc, #32]	; 14e0c <__assert_fail@plt+0x2244>
   14de8:	bl	1261c <dcgettext@plt>
   14dec:	mov	r1, r5
   14df0:	bl	12850 <warnx@plt>
   14df4:	mvn	r0, #0
   14df8:	pop	{r4, r5, r6, pc}
   14dfc:	muleq	r1, r4, lr
   14e00:	muleq	r1, ip, lr
   14e04:	andeq	r9, r1, r4, lsr #29
   14e08:	andeq	r9, r1, ip, lsr #29
   14e0c:			; <UNDEFINED> instruction: 0x00019eb4
   14e10:	push	{r4, r5, lr}
   14e14:	sub	sp, sp, #20
   14e18:	ldr	r4, [pc, #184]	; 14ed8 <__assert_fail@plt+0x2310>
   14e1c:	add	r3, sp, #8
   14e20:	add	r2, sp, #4
   14e24:	ldr	ip, [r4]
   14e28:	ldr	r1, [pc, #172]	; 14edc <__assert_fail@plt+0x2314>
   14e2c:	str	ip, [sp, #12]
   14e30:	mov	r5, r0
   14e34:	bl	12a90 <sscanf@plt>
   14e38:	cmp	r0, #2
   14e3c:	beq	14e60 <__assert_fail@plt+0x2298>
   14e40:	ldr	r3, [pc, #152]	; 14ee0 <__assert_fail@plt+0x2318>
   14e44:	str	r5, [r3, #24]
   14e48:	ldr	r2, [sp, #12]
   14e4c:	ldr	r3, [r4]
   14e50:	cmp	r2, r3
   14e54:	bne	14ec4 <__assert_fail@plt+0x22fc>
   14e58:	add	sp, sp, #20
   14e5c:	pop	{r4, r5, pc}
   14e60:	mov	r0, #8
   14e64:	bl	1276c <malloc@plt>
   14e68:	cmp	r0, #0
   14e6c:	beq	14ec8 <__assert_fail@plt+0x2300>
   14e70:	ldr	r1, [sp, #8]
   14e74:	ldr	r3, [sp, #4]
   14e78:	ldr	ip, [pc, #100]	; 14ee4 <__assert_fail@plt+0x231c>
   14e7c:	uxtb	r2, r1
   14e80:	and	ip, ip, r3, lsl #8
   14e84:	orr	ip, r2, ip
   14e88:	ldr	lr, [pc, #88]	; 14ee8 <__assert_fail@plt+0x2320>
   14e8c:	ldr	r2, [pc, #88]	; 14eec <__assert_fail@plt+0x2324>
   14e90:	bic	r3, r3, #4080	; 0xff0
   14e94:	and	r2, r2, r1, lsl #12
   14e98:	bic	r3, r3, #15
   14e9c:	orr	r3, r3, r1, lsr #20
   14ea0:	orr	r2, r2, ip
   14ea4:	ldr	r1, [lr]
   14ea8:	ldr	ip, [pc, #48]	; 14ee0 <__assert_fail@plt+0x2318>
   14eac:	orr	r1, r1, #64	; 0x40
   14eb0:	strd	r2, [r0]
   14eb4:	str	r1, [lr]
   14eb8:	str	r5, [ip, #344]	; 0x158
   14ebc:	str	r0, [ip, #348]	; 0x15c
   14ec0:	b	14e48 <__assert_fail@plt+0x2280>
   14ec4:	bl	12634 <__stack_chk_fail@plt>
   14ec8:	mov	r2, #8
   14ecc:	ldr	r1, [pc, #28]	; 14ef0 <__assert_fail@plt+0x2328>
   14ed0:	mov	r0, #1
   14ed4:	bl	12694 <err@plt>
   14ed8:	andeq	fp, r2, r0, asr ip
   14edc:	andeq	r9, r1, r8, asr #29
   14ee0:	andeq	ip, r2, r8
   14ee4:	andeq	pc, pc, r0, lsl #30
   14ee8:	andeq	ip, r2, r0, asr r3
   14eec:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   14ef0:	ldrdeq	r9, [r1], -r0
   14ef4:	mov	r2, #5
   14ef8:	ldr	r1, [pc, #24]	; 14f18 <__assert_fail@plt+0x2350>
   14efc:	push	{r4, lr}
   14f00:	mov	r0, #0
   14f04:	bl	1261c <dcgettext@plt>
   14f08:	mov	r2, #49	; 0x31
   14f0c:	mov	r1, r0
   14f10:	mov	r0, #1
   14f14:	bl	12a3c <errx@plt>
   14f18:	andeq	r9, r1, ip, ror #29
   14f1c:	ldr	r3, [pc, #292]	; 15048 <__assert_fail@plt+0x2480>
   14f20:	push	{r4, r5, r6, lr}
   14f24:	ldr	r4, [r3]
   14f28:	mov	r0, r4
   14f2c:	bl	126f4 <__fpending@plt>
   14f30:	mov	r6, r0
   14f34:	mov	r0, r4
   14f38:	bl	1258c <ferror@plt>
   14f3c:	mov	r5, r0
   14f40:	mov	r0, r4
   14f44:	bl	129dc <fclose@plt>
   14f48:	cmp	r5, #0
   14f4c:	mov	r4, r0
   14f50:	bne	14ff8 <__assert_fail@plt+0x2430>
   14f54:	cmp	r0, #0
   14f58:	beq	14f74 <__assert_fail@plt+0x23ac>
   14f5c:	bl	12880 <__errno_location@plt>
   14f60:	cmp	r6, #0
   14f64:	ldr	r3, [r0]
   14f68:	bne	14fd0 <__assert_fail@plt+0x2408>
   14f6c:	cmp	r3, #9
   14f70:	bne	14fd0 <__assert_fail@plt+0x2408>
   14f74:	ldr	r3, [pc, #208]	; 1504c <__assert_fail@plt+0x2484>
   14f78:	ldr	r4, [r3]
   14f7c:	mov	r0, r4
   14f80:	bl	126f4 <__fpending@plt>
   14f84:	mov	r6, r0
   14f88:	mov	r0, r4
   14f8c:	bl	1258c <ferror@plt>
   14f90:	mov	r5, r0
   14f94:	mov	r0, r4
   14f98:	bl	129dc <fclose@plt>
   14f9c:	cmp	r5, #0
   14fa0:	mov	r4, r0
   14fa4:	bne	1502c <__assert_fail@plt+0x2464>
   14fa8:	cmp	r0, #0
   14fac:	popeq	{r4, r5, r6, pc}
   14fb0:	cmp	r6, #0
   14fb4:	bne	14fc8 <__assert_fail@plt+0x2400>
   14fb8:	bl	12880 <__errno_location@plt>
   14fbc:	ldr	r3, [r0]
   14fc0:	cmp	r3, #9
   14fc4:	popeq	{r4, r5, r6, pc}
   14fc8:	mov	r0, #1
   14fcc:	bl	125a4 <_exit@plt>
   14fd0:	cmp	r3, #32
   14fd4:	beq	14f74 <__assert_fail@plt+0x23ac>
   14fd8:	cmp	r3, #0
   14fdc:	beq	15014 <__assert_fail@plt+0x244c>
   14fe0:	mov	r2, #5
   14fe4:	ldr	r1, [pc, #100]	; 15050 <__assert_fail@plt+0x2488>
   14fe8:	mov	r0, #0
   14fec:	bl	1261c <dcgettext@plt>
   14ff0:	bl	12a60 <warn@plt>
   14ff4:	b	14fc8 <__assert_fail@plt+0x2400>
   14ff8:	bl	12880 <__errno_location@plt>
   14ffc:	cmp	r4, #0
   15000:	ldr	r3, [r0]
   15004:	bne	14fd0 <__assert_fail@plt+0x2408>
   15008:	cmp	r3, #32
   1500c:	strne	r4, [r0]
   15010:	beq	14f74 <__assert_fail@plt+0x23ac>
   15014:	mov	r2, #5
   15018:	ldr	r1, [pc, #48]	; 15050 <__assert_fail@plt+0x2488>
   1501c:	mov	r0, #0
   15020:	bl	1261c <dcgettext@plt>
   15024:	bl	12850 <warnx@plt>
   15028:	b	14fc8 <__assert_fail@plt+0x2400>
   1502c:	cmp	r0, #0
   15030:	bne	14fc8 <__assert_fail@plt+0x2400>
   15034:	bl	12880 <__errno_location@plt>
   15038:	ldr	r3, [r0]
   1503c:	cmp	r3, #32
   15040:	strne	r4, [r0]
   15044:	b	14fc8 <__assert_fail@plt+0x2400>
   15048:	andeq	ip, r2, r4, asr #6
   1504c:	andeq	ip, r2, r0, asr #6
   15050:	andeq	r9, r1, r4, lsr #30
   15054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15058:	sub	sp, sp, #20
   1505c:	ldr	r4, [pc, #500]	; 15258 <__assert_fail@plt+0x2690>
   15060:	mov	r8, r1
   15064:	mov	r5, r2
   15068:	ldr	r3, [r4]
   1506c:	add	r2, sp, #8
   15070:	add	r1, sp, #4
   15074:	str	r3, [sp, #12]
   15078:	mov	r6, r0
   1507c:	bl	12874 <mnt_fs_get_tag@plt>
   15080:	cmp	r0, #0
   15084:	bne	1509c <__assert_fail@plt+0x24d4>
   15088:	mov	r1, r8
   1508c:	ldr	r0, [sp, #4]
   15090:	bl	124e4 <strcmp@plt>
   15094:	cmp	r0, #0
   15098:	beq	1513c <__assert_fail@plt+0x2574>
   1509c:	mov	r0, r6
   150a0:	bl	12490 <mnt_fs_get_source@plt>
   150a4:	ldr	r6, [pc, #432]	; 1525c <__assert_fail@plt+0x2694>
   150a8:	subs	r7, r0, #0
   150ac:	beq	15180 <__assert_fail@plt+0x25b8>
   150b0:	ldr	r3, [r6]
   150b4:	tst	r3, #16384	; 0x4000
   150b8:	beq	15170 <__assert_fail@plt+0x25a8>
   150bc:	ldr	fp, [r6, #216]	; 0xd8
   150c0:	cmp	fp, #0
   150c4:	beq	1521c <__assert_fail@plt+0x2654>
   150c8:	mov	r1, #0
   150cc:	mov	r0, r7
   150d0:	bl	12b80 <realpath@plt>
   150d4:	mov	r2, #5
   150d8:	ldr	r1, [pc, #384]	; 15260 <__assert_fail@plt+0x2698>
   150dc:	subs	sl, r0, #0
   150e0:	moveq	r9, r7
   150e4:	movne	r9, sl
   150e8:	mov	r0, r9
   150ec:	bl	12b5c <strncmp@plt>
   150f0:	ldr	r1, [pc, #364]	; 15264 <__assert_fail@plt+0x269c>
   150f4:	cmp	r0, #0
   150f8:	addeq	r9, r9, #5
   150fc:	mov	r2, r9
   15100:	mov	r0, fp
   15104:	bl	12a0c <udev_device_new_from_subsystem_sysname@plt>
   15108:	mov	r9, r0
   1510c:	mov	r0, sl
   15110:	bl	1255c <free@plt>
   15114:	cmp	r9, #0
   15118:	beq	15184 <__assert_fail@plt+0x25bc>
   1511c:	sub	r5, r5, #6
   15120:	cmp	r5, #3
   15124:	ldrls	pc, [pc, r5, lsl #2]
   15128:	b	1523c <__assert_fail@plt+0x2674>
   1512c:	andeq	r5, r1, ip, lsl #4
   15130:	strdeq	r5, [r1], -ip
   15134:	andeq	r5, r1, ip, ror #3
   15138:	andeq	r5, r1, ip, lsr #3
   1513c:	ldr	r0, [sp, #8]
   15140:	cmp	r0, #0
   15144:	beq	15234 <__assert_fail@plt+0x266c>
   15148:	bl	12628 <strdup@plt>
   1514c:	subs	r5, r0, #0
   15150:	beq	1524c <__assert_fail@plt+0x2684>
   15154:	ldr	r2, [sp, #12]
   15158:	ldr	r3, [r4]
   1515c:	mov	r0, r5
   15160:	cmp	r2, r3
   15164:	bne	15248 <__assert_fail@plt+0x2680>
   15168:	add	sp, sp, #20
   1516c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15170:	ldr	r1, [r6, #4]
   15174:	bl	12688 <mnt_resolve_spec@plt>
   15178:	subs	r7, r0, #0
   1517c:	bne	150bc <__assert_fail@plt+0x24f4>
   15180:	mov	r7, #0
   15184:	mov	r2, r8
   15188:	mov	r1, r7
   1518c:	ldr	r0, [r6, #4]
   15190:	bl	12640 <mnt_cache_find_tag_value@plt>
   15194:	subs	r5, r0, #0
   15198:	beq	15234 <__assert_fail@plt+0x266c>
   1519c:	ldr	r3, [r6, #4]
   151a0:	cmp	r3, #0
   151a4:	bne	15148 <__assert_fail@plt+0x2580>
   151a8:	b	15154 <__assert_fail@plt+0x258c>
   151ac:	ldr	r1, [pc, #180]	; 15268 <__assert_fail@plt+0x26a0>
   151b0:	mov	r0, r9
   151b4:	bl	12aa8 <udev_device_get_property_value@plt>
   151b8:	cmp	r0, #0
   151bc:	beq	1523c <__assert_fail@plt+0x2674>
   151c0:	bl	12628 <strdup@plt>
   151c4:	subs	r5, r0, #0
   151c8:	beq	1524c <__assert_fail@plt+0x2684>
   151cc:	bl	1282c <strlen@plt>
   151d0:	mov	r1, r5
   151d4:	add	r2, r0, #1
   151d8:	mov	r0, r5
   151dc:	bl	17168 <__assert_fail@plt+0x45a0>
   151e0:	mov	r0, r9
   151e4:	bl	12afc <udev_device_unref@plt>
   151e8:	b	15154 <__assert_fail@plt+0x258c>
   151ec:	ldr	r1, [pc, #120]	; 1526c <__assert_fail@plt+0x26a4>
   151f0:	mov	r0, r9
   151f4:	bl	12aa8 <udev_device_get_property_value@plt>
   151f8:	b	151b8 <__assert_fail@plt+0x25f0>
   151fc:	ldr	r1, [pc, #108]	; 15270 <__assert_fail@plt+0x26a8>
   15200:	mov	r0, r9
   15204:	bl	12aa8 <udev_device_get_property_value@plt>
   15208:	b	151b8 <__assert_fail@plt+0x25f0>
   1520c:	ldr	r1, [pc, #96]	; 15274 <__assert_fail@plt+0x26ac>
   15210:	mov	r0, r9
   15214:	bl	12aa8 <udev_device_get_property_value@plt>
   15218:	b	151b8 <__assert_fail@plt+0x25f0>
   1521c:	bl	126ac <udev_new@plt>
   15220:	cmp	r0, #0
   15224:	mov	fp, r0
   15228:	str	r0, [r6, #216]	; 0xd8
   1522c:	bne	150c8 <__assert_fail@plt+0x2500>
   15230:	b	15184 <__assert_fail@plt+0x25bc>
   15234:	mov	r5, #0
   15238:	b	15154 <__assert_fail@plt+0x258c>
   1523c:	mov	r0, r9
   15240:	bl	12afc <udev_device_unref@plt>
   15244:	b	15184 <__assert_fail@plt+0x25bc>
   15248:	bl	12634 <__stack_chk_fail@plt>
   1524c:	ldr	r1, [pc, #36]	; 15278 <__assert_fail@plt+0x26b0>
   15250:	mov	r0, #1
   15254:	bl	12694 <err@plt>
   15258:	andeq	fp, r2, r0, asr ip
   1525c:	andeq	ip, r2, r0, asr r3
   15260:	andeq	r9, r1, r8, asr #30
   15264:	andeq	r9, r1, r0, asr pc
   15268:	andeq	r9, r1, r8, ror pc
   1526c:	andeq	r9, r1, ip, lsl #31
   15270:	andeq	r9, r1, r8, ror #30
   15274:	andeq	r9, r1, r8, asr pc
   15278:	andeq	r9, r1, r0, lsr pc
   1527c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15280:	vpush	{d8}
   15284:	ldr	r5, [pc, #1388]	; 157f8 <__assert_fail@plt+0x2c30>
   15288:	mov	r6, r0
   1528c:	mov	r3, #0
   15290:	sub	sp, sp, #116	; 0x74
   15294:	ldr	r2, [r5]
   15298:	mov	r0, r1
   1529c:	str	r2, [sp, #108]	; 0x6c
   152a0:	str	r3, [sp]
   152a4:	bl	14c48 <__assert_fail@plt+0x2080>
   152a8:	cmp	r0, #24
   152ac:	ldrls	pc, [pc, r0, lsl #2]
   152b0:	b	15674 <__assert_fail@plt+0x2aac>
   152b4:	andeq	r5, r1, r0, lsr r3
   152b8:			; <UNDEFINED> instruction: 0x000153b8
   152bc:	andeq	r5, r1, r0, ror #7
   152c0:	strdeq	r5, [r1], -r4
   152c4:	andeq	r5, r1, ip, asr #12
   152c8:	andeq	r5, r1, r0, ror #12
   152cc:	ldrdeq	r5, [r1], -r0
   152d0:	andeq	r5, r1, r4, lsl #12
   152d4:	andeq	r5, r1, ip, lsl r6
   152d8:	andeq	r5, r1, r4, lsr r6
   152dc:	andeq	r5, r1, r8, lsl #8
   152e0:	andeq	r5, r1, r4, ror r6
   152e4:	andeq	r5, r1, r4, ror r6
   152e8:	andeq	r5, r1, r4, ror r6
   152ec:	andeq	r5, r1, ip, asr r4
   152f0:	andeq	r5, r1, ip, asr r4
   152f4:	andeq	r5, r1, ip, asr r4
   152f8:	andeq	r5, r1, ip, asr r4
   152fc:	ldrdeq	r5, [r1], -r4
   15300:	andeq	r5, r1, r8, ror #9
   15304:	andeq	r5, r1, r4, lsl #10
   15308:	andeq	r5, r1, r0, lsr #10
   1530c:	andeq	r5, r1, r4, lsr r5
   15310:	andeq	r5, r1, r4, lsr #11
   15314:	andeq	r5, r1, r8, lsl r3
   15318:	mov	r0, r6
   1531c:	bl	129a0 <mnt_fs_is_kernel@plt>
   15320:	cmp	r0, #0
   15324:	beq	1567c <__assert_fail@plt+0x2ab4>
   15328:	ldr	r4, [sp]
   1532c:	b	155e4 <__assert_fail@plt+0x2a1c>
   15330:	mov	r0, r6
   15334:	bl	1273c <mnt_fs_get_root@plt>
   15338:	ldr	r7, [pc, #1212]	; 157fc <__assert_fail@plt+0x2c34>
   1533c:	mov	r9, r0
   15340:	mov	r0, r6
   15344:	bl	127f0 <mnt_fs_get_srcpath@plt>
   15348:	subs	r8, r0, #0
   1534c:	beq	15688 <__assert_fail@plt+0x2ac0>
   15350:	ldr	r3, [r7]
   15354:	ands	r4, r3, #4
   15358:	bne	156e0 <__assert_fail@plt+0x2b18>
   1535c:	adds	r6, r9, #0
   15360:	movne	r6, #1
   15364:	cmp	r6, #0
   15368:	beq	1538c <__assert_fail@plt+0x27c4>
   1536c:	ldr	r3, [r7]
   15370:	tst	r3, #128	; 0x80
   15374:	bne	1538c <__assert_fail@plt+0x27c4>
   15378:	ldr	r1, [pc, #1152]	; 15800 <__assert_fail@plt+0x2c38>
   1537c:	mov	r0, r9
   15380:	bl	124e4 <strcmp@plt>
   15384:	cmp	r0, #0
   15388:	bne	157a4 <__assert_fail@plt+0x2bdc>
   1538c:	mov	r0, r8
   15390:	bl	12628 <strdup@plt>
   15394:	cmp	r0, #0
   15398:	strne	r0, [sp]
   1539c:	beq	153d4 <__assert_fail@plt+0x280c>
   153a0:	ldr	r3, [r7, #4]
   153a4:	cmp	r3, #0
   153a8:	bne	15328 <__assert_fail@plt+0x2760>
   153ac:	mov	r0, r4
   153b0:	bl	1255c <free@plt>
   153b4:	b	15328 <__assert_fail@plt+0x2760>
   153b8:	mov	r0, r6
   153bc:	bl	12724 <mnt_fs_get_target@plt>
   153c0:	subs	r4, r0, #0
   153c4:	beq	155e4 <__assert_fail@plt+0x2a1c>
   153c8:	bl	12628 <strdup@plt>
   153cc:	subs	r4, r0, #0
   153d0:	bne	155e4 <__assert_fail@plt+0x2a1c>
   153d4:	ldr	r1, [pc, #1064]	; 15804 <__assert_fail@plt+0x2c3c>
   153d8:	mov	r0, #1
   153dc:	bl	12694 <err@plt>
   153e0:	mov	r0, r6
   153e4:	bl	124cc <mnt_fs_get_fstype@plt>
   153e8:	subs	r4, r0, #0
   153ec:	bne	153c8 <__assert_fail@plt+0x2800>
   153f0:	b	155e4 <__assert_fail@plt+0x2a1c>
   153f4:	mov	r0, r6
   153f8:	bl	12b20 <mnt_fs_get_options@plt>
   153fc:	subs	r4, r0, #0
   15400:	bne	153c8 <__assert_fail@plt+0x2800>
   15404:	b	155e4 <__assert_fail@plt+0x2a1c>
   15408:	mov	r0, r6
   1540c:	bl	12a00 <mnt_fs_get_devno@plt>
   15410:	orrs	r3, r0, r1
   15414:	beq	15328 <__assert_fail@plt+0x2760>
   15418:	ldr	r2, [pc, #988]	; 157fc <__assert_fail@plt+0x2c34>
   1541c:	lsr	r3, r0, #12
   15420:	uxtb	ip, r0
   15424:	ldr	r2, [r2]
   15428:	orr	r3, r3, r1, lsl #20
   1542c:	tst	r2, #44040192	; 0x2a00000
   15430:	lsl	r0, r0, #12
   15434:	bic	r2, r1, #4080	; 0xff0
   15438:	bic	r3, r3, #255	; 0xff
   1543c:	bic	r2, r2, #15
   15440:	orr	r3, r3, ip
   15444:	orr	r2, r2, r0, lsr #20
   15448:	beq	15700 <__assert_fail@plt+0x2b38>
   1544c:	ldr	r1, [pc, #948]	; 15808 <__assert_fail@plt+0x2c40>
   15450:	mov	r0, sp
   15454:	bl	14bd8 <__assert_fail@plt+0x2010>
   15458:	b	15328 <__assert_fail@plt+0x2760>
   1545c:	mov	r4, r0
   15460:	mov	r0, r6
   15464:	bl	12724 <mnt_fs_get_target@plt>
   15468:	add	r1, sp, #8
   1546c:	bl	12958 <statvfs64@plt>
   15470:	cmp	r0, #0
   15474:	bne	15674 <__assert_fail@plt+0x2aac>
   15478:	cmp	r4, #16
   1547c:	beq	15728 <__assert_fail@plt+0x2b60>
   15480:	cmp	r4, #17
   15484:	beq	15714 <__assert_fail@plt+0x2b4c>
   15488:	cmp	r4, #15
   1548c:	ldr	r1, [sp, #12]
   15490:	ldrne	r2, [sp, #16]
   15494:	ldreq	r2, [sp, #32]
   15498:	ldrne	r0, [sp, #20]
   1549c:	ldreq	r0, [sp, #36]	; 0x24
   154a0:	umull	r2, r3, r2, r1
   154a4:	mla	r3, r1, r0, r3
   154a8:	orrs	r1, r2, r3
   154ac:	beq	156d8 <__assert_fail@plt+0x2b10>
   154b0:	ldr	r1, [pc, #836]	; 157fc <__assert_fail@plt+0x2c34>
   154b4:	ldr	r1, [r1]
   154b8:	ands	r0, r1, #8192	; 0x2000
   154bc:	beq	15750 <__assert_fail@plt+0x2b88>
   154c0:	ldr	r1, [pc, #836]	; 1580c <__assert_fail@plt+0x2c44>
   154c4:	add	r0, sp, #4
   154c8:	bl	14bd8 <__assert_fail@plt+0x2010>
   154cc:	ldr	r4, [sp, #4]
   154d0:	b	155e4 <__assert_fail@plt+0x2a1c>
   154d4:	mov	r0, r6
   154d8:	bl	1273c <mnt_fs_get_root@plt>
   154dc:	subs	r4, r0, #0
   154e0:	bne	153c8 <__assert_fail@plt+0x2800>
   154e4:	b	155e4 <__assert_fail@plt+0x2a1c>
   154e8:	mov	r0, r6
   154ec:	bl	12754 <mnt_fs_get_tid@plt>
   154f0:	cmp	r0, #0
   154f4:	beq	15328 <__assert_fail@plt+0x2760>
   154f8:	mov	r0, r6
   154fc:	bl	12754 <mnt_fs_get_tid@plt>
   15500:	b	155bc <__assert_fail@plt+0x29f4>
   15504:	mov	r0, r6
   15508:	bl	124b4 <mnt_fs_get_id@plt>
   1550c:	cmp	r0, #0
   15510:	beq	15328 <__assert_fail@plt+0x2760>
   15514:	mov	r0, r6
   15518:	bl	124b4 <mnt_fs_get_id@plt>
   1551c:	b	155bc <__assert_fail@plt+0x29f4>
   15520:	mov	r0, r6
   15524:	bl	12730 <mnt_fs_get_optional_fields@plt>
   15528:	subs	r4, r0, #0
   1552c:	bne	153c8 <__assert_fail@plt+0x2800>
   15530:	b	155e4 <__assert_fail@plt+0x2a1c>
   15534:	mov	r0, r6
   15538:	bl	129a0 <mnt_fs_is_kernel@plt>
   1553c:	cmp	r0, #0
   15540:	beq	15328 <__assert_fail@plt+0x2760>
   15544:	mov	r3, #0
   15548:	mov	r0, r6
   1554c:	add	r1, sp, #4
   15550:	str	r3, [sp, #4]
   15554:	bl	12a78 <mnt_fs_get_propagation@plt>
   15558:	cmp	r0, #0
   1555c:	bne	15328 <__assert_fail@plt+0x2760>
   15560:	ldr	r6, [sp, #4]
   15564:	ldr	r3, [pc, #676]	; 15810 <__assert_fail@plt+0x2c48>
   15568:	tst	r6, #1048576	; 0x100000
   1556c:	ldr	r0, [pc, #672]	; 15814 <__assert_fail@plt+0x2c4c>
   15570:	moveq	r0, r3
   15574:	bl	12628 <strdup@plt>
   15578:	subs	r4, r0, #0
   1557c:	beq	153d4 <__assert_fail@plt+0x280c>
   15580:	tst	r6, #524288	; 0x80000
   15584:	bne	157bc <__assert_fail@plt+0x2bf4>
   15588:	tst	r6, #131072	; 0x20000
   1558c:	beq	155e4 <__assert_fail@plt+0x2a1c>
   15590:	mov	r2, r4
   15594:	ldr	r1, [pc, #636]	; 15818 <__assert_fail@plt+0x2c50>
   15598:	mov	r0, sp
   1559c:	bl	14bd8 <__assert_fail@plt+0x2010>
   155a0:	b	153ac <__assert_fail@plt+0x27e4>
   155a4:	mov	r0, r6
   155a8:	bl	129a0 <mnt_fs_is_kernel@plt>
   155ac:	cmp	r0, #0
   155b0:	bne	15328 <__assert_fail@plt+0x2760>
   155b4:	mov	r0, r6
   155b8:	bl	12778 <mnt_fs_get_freq@plt>
   155bc:	mov	r2, r0
   155c0:	ldr	r1, [pc, #596]	; 1581c <__assert_fail@plt+0x2c54>
   155c4:	mov	r0, sp
   155c8:	bl	14bd8 <__assert_fail@plt+0x2010>
   155cc:	b	15328 <__assert_fail@plt+0x2760>
   155d0:	mov	r0, r6
   155d4:	mov	r2, #6
   155d8:	ldr	r1, [pc, #576]	; 15820 <__assert_fail@plt+0x2c58>
   155dc:	bl	15054 <__assert_fail@plt+0x248c>
   155e0:	mov	r4, r0
   155e4:	ldr	r2, [sp, #108]	; 0x6c
   155e8:	ldr	r3, [r5]
   155ec:	mov	r0, r4
   155f0:	cmp	r2, r3
   155f4:	bne	157dc <__assert_fail@plt+0x2c14>
   155f8:	add	sp, sp, #116	; 0x74
   155fc:	vpop	{d8}
   15600:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15604:	mov	r0, r6
   15608:	mov	r2, #7
   1560c:	ldr	r1, [pc, #528]	; 15824 <__assert_fail@plt+0x2c5c>
   15610:	bl	15054 <__assert_fail@plt+0x248c>
   15614:	mov	r4, r0
   15618:	b	155e4 <__assert_fail@plt+0x2a1c>
   1561c:	mov	r0, r6
   15620:	mov	r2, #8
   15624:	ldr	r1, [pc, #508]	; 15828 <__assert_fail@plt+0x2c60>
   15628:	bl	15054 <__assert_fail@plt+0x248c>
   1562c:	mov	r4, r0
   15630:	b	155e4 <__assert_fail@plt+0x2a1c>
   15634:	mov	r0, r6
   15638:	mov	r2, #9
   1563c:	ldr	r1, [pc, #488]	; 1582c <__assert_fail@plt+0x2c64>
   15640:	bl	15054 <__assert_fail@plt+0x248c>
   15644:	mov	r4, r0
   15648:	b	155e4 <__assert_fail@plt+0x2a1c>
   1564c:	mov	r0, r6
   15650:	bl	127b4 <mnt_fs_get_vfs_options@plt>
   15654:	subs	r4, r0, #0
   15658:	bne	153c8 <__assert_fail@plt+0x2800>
   1565c:	b	155e4 <__assert_fail@plt+0x2a1c>
   15660:	mov	r0, r6
   15664:	bl	126b8 <mnt_fs_get_fs_options@plt>
   15668:	subs	r4, r0, #0
   1566c:	bne	153c8 <__assert_fail@plt+0x2800>
   15670:	b	155e4 <__assert_fail@plt+0x2a1c>
   15674:	mov	r4, #0
   15678:	b	155e4 <__assert_fail@plt+0x2a1c>
   1567c:	mov	r0, r6
   15680:	bl	12b44 <mnt_fs_get_passno@plt>
   15684:	b	155bc <__assert_fail@plt+0x29f4>
   15688:	mov	r0, r6
   1568c:	bl	12490 <mnt_fs_get_source@plt>
   15690:	subs	r8, r0, #0
   15694:	beq	156d0 <__assert_fail@plt+0x2b08>
   15698:	ldr	r3, [r7]
   1569c:	adds	r6, r9, #0
   156a0:	movne	r6, #1
   156a4:	ands	r4, r3, #2
   156a8:	beq	15364 <__assert_fail@plt+0x279c>
   156ac:	ldr	r1, [r7, #4]
   156b0:	bl	12688 <mnt_resolve_spec@plt>
   156b4:	cmp	r0, #0
   156b8:	moveq	r6, #0
   156bc:	cmp	r6, #0
   156c0:	mov	r8, r0
   156c4:	bne	157e8 <__assert_fail@plt+0x2c20>
   156c8:	cmp	r0, #0
   156cc:	bne	157e0 <__assert_fail@plt+0x2c18>
   156d0:	mov	r4, #0
   156d4:	b	153a0 <__assert_fail@plt+0x27d8>
   156d8:	ldr	r0, [pc, #336]	; 15830 <__assert_fail@plt+0x2c68>
   156dc:	b	153c8 <__assert_fail@plt+0x2800>
   156e0:	ldr	r1, [r7, #4]
   156e4:	bl	1288c <mnt_resolve_path@plt>
   156e8:	subs	r8, r0, #0
   156ec:	beq	15688 <__assert_fail@plt+0x2ac0>
   156f0:	adds	r6, r9, #0
   156f4:	movne	r6, #1
   156f8:	mov	r4, r8
   156fc:	b	15364 <__assert_fail@plt+0x279c>
   15700:	ldr	r1, [pc, #300]	; 15834 <__assert_fail@plt+0x2c6c>
   15704:	mov	r0, sp
   15708:	bl	14bd8 <__assert_fail@plt+0x2010>
   1570c:	ldr	r4, [sp]
   15710:	b	155e4 <__assert_fail@plt+0x2a1c>
   15714:	ldrd	r6, [sp, #16]
   15718:	orrs	r3, r6, r7
   1571c:	bne	1575c <__assert_fail@plt+0x2b94>
   15720:	ldr	r0, [pc, #272]	; 15838 <__assert_fail@plt+0x2c70>
   15724:	b	153c8 <__assert_fail@plt+0x2800>
   15728:	ldr	r2, [sp, #24]
   1572c:	ldr	r3, [sp, #16]
   15730:	ldr	r0, [sp, #12]
   15734:	subs	r3, r3, r2
   15738:	ldr	r1, [sp, #20]
   1573c:	ldr	ip, [sp, #28]
   15740:	umull	r2, r3, r3, r0
   15744:	sbc	r1, r1, ip
   15748:	mla	r3, r0, r1, r3
   1574c:	b	154a8 <__assert_fail@plt+0x28e0>
   15750:	bl	18710 <__assert_fail@plt+0x5b48>
   15754:	mov	r4, r0
   15758:	b	155e4 <__assert_fail@plt+0x2a1c>
   1575c:	ldrd	r0, [sp, #24]
   15760:	subs	r0, r6, r0
   15764:	sbc	r1, r7, r1
   15768:	bl	1962c <__assert_fail@plt+0x6a64>
   1576c:	vmov	d8, r0, r1
   15770:	mov	r0, r6
   15774:	mov	r1, r7
   15778:	bl	1962c <__assert_fail@plt+0x6a64>
   1577c:	vldr	d7, [pc, #108]	; 157f0 <__assert_fail@plt+0x2c28>
   15780:	vmov	d6, r0, r1
   15784:	ldr	r1, [pc, #176]	; 1583c <__assert_fail@plt+0x2c74>
   15788:	add	r0, sp, #4
   1578c:	vdiv.f64	d6, d8, d6
   15790:	vmul.f64	d7, d6, d7
   15794:	vmov	r2, r3, d7
   15798:	bl	14bd8 <__assert_fail@plt+0x2010>
   1579c:	ldr	r4, [sp, #4]
   157a0:	b	155e4 <__assert_fail@plt+0x2a1c>
   157a4:	mov	r3, r9
   157a8:	mov	r2, r8
   157ac:	ldr	r1, [pc, #140]	; 15840 <__assert_fail@plt+0x2c78>
   157b0:	mov	r0, sp
   157b4:	bl	14bd8 <__assert_fail@plt+0x2010>
   157b8:	b	153a0 <__assert_fail@plt+0x27d8>
   157bc:	mov	r2, r4
   157c0:	ldr	r1, [pc, #124]	; 15844 <__assert_fail@plt+0x2c7c>
   157c4:	mov	r0, sp
   157c8:	bl	14bd8 <__assert_fail@plt+0x2010>
   157cc:	mov	r0, r4
   157d0:	bl	1255c <free@plt>
   157d4:	ldm	sp, {r4, r6}
   157d8:	b	15588 <__assert_fail@plt+0x29c0>
   157dc:	bl	12634 <__stack_chk_fail@plt>
   157e0:	mov	r4, r0
   157e4:	b	1538c <__assert_fail@plt+0x27c4>
   157e8:	mov	r4, r0
   157ec:	b	1536c <__assert_fail@plt+0x27a4>
   157f0:	andeq	r0, r0, r0
   157f4:	subsmi	r0, r9, r0
   157f8:	andeq	fp, r2, r0, asr ip
   157fc:	andeq	ip, r2, r0, asr r3
   15800:	andeq	r9, r1, ip, asr #30
   15804:	andeq	r9, r1, r0, lsr pc
   15808:	ldrdeq	r9, [r1], -r0
   1580c:	strdeq	r9, [r1], -r4
   15810:	andeq	r9, r1, r8, lsr #31
   15814:	andeq	r9, r1, r0, lsr #31
   15818:	andeq	sl, r1, r8
   1581c:	strdeq	r9, [r1], -r8
   15820:	andeq	r9, r1, r8, asr #31
   15824:			; <UNDEFINED> instruction: 0x00019fbc
   15828:	andeq	r9, r1, r4, asr #31
   1582c:			; <UNDEFINED> instruction: 0x00019fb8
   15830:	strdeq	r9, [r1], -r0
   15834:	ldrdeq	r9, [r1], -r8
   15838:	andeq	r9, r1, r4, ror #31
   1583c:	andeq	r9, r1, r8, ror #31
   15840:			; <UNDEFINED> instruction: 0x00019fb0
   15844:	strdeq	r9, [r1], -ip
   15848:	push	{r4, r5, r6, r7, r8, lr}
   1584c:	mov	r6, r1
   15850:	mov	r1, r2
   15854:	bl	12790 <scols_table_new_line@plt>
   15858:	subs	r5, r0, #0
   1585c:	beq	158d8 <__assert_fail@plt+0x2d10>
   15860:	ldr	r7, [pc, #136]	; 158f0 <__assert_fail@plt+0x2d28>
   15864:	ldr	r3, [r7, #12]
   15868:	cmp	r3, #0
   1586c:	movne	r4, #0
   15870:	beq	158a8 <__assert_fail@plt+0x2ce0>
   15874:	mov	r1, r4
   15878:	mov	r0, r6
   1587c:	bl	1527c <__assert_fail@plt+0x26b4>
   15880:	mov	r1, r4
   15884:	mov	r2, r0
   15888:	mov	r0, r5
   1588c:	bl	124d8 <scols_line_refer_data@plt>
   15890:	cmp	r0, #0
   15894:	bne	158bc <__assert_fail@plt+0x2cf4>
   15898:	ldr	r3, [r7, #12]
   1589c:	add	r4, r4, #1
   158a0:	cmp	r3, r4
   158a4:	bhi	15874 <__assert_fail@plt+0x2cac>
   158a8:	mov	r1, r6
   158ac:	mov	r0, r5
   158b0:	bl	12700 <scols_line_set_userdata@plt>
   158b4:	mov	r0, r5
   158b8:	pop	{r4, r5, r6, r7, r8, pc}
   158bc:	ldr	r1, [pc, #48]	; 158f4 <__assert_fail@plt+0x2d2c>
   158c0:	mov	r2, #5
   158c4:	mov	r0, #0
   158c8:	bl	1261c <dcgettext@plt>
   158cc:	mov	r1, r0
   158d0:	mov	r0, #1
   158d4:	bl	12694 <err@plt>
   158d8:	ldr	r1, [pc, #24]	; 158f8 <__assert_fail@plt+0x2d30>
   158dc:	mov	r2, #5
   158e0:	bl	1261c <dcgettext@plt>
   158e4:	mov	r1, r0
   158e8:	mov	r0, #1
   158ec:	bl	12694 <err@plt>
   158f0:	andeq	ip, r2, r0, asr r3
   158f4:	andeq	sl, r1, r8, lsr r0
   158f8:	andeq	sl, r1, r8, lsl r0
   158fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15900:	sub	sp, sp, #24
   15904:	ldr	r9, [pc, #372]	; 15a80 <__assert_fail@plt+0x2eb8>
   15908:	subs	r7, r2, #0
   1590c:	str	r2, [sp, #4]
   15910:	ldr	r2, [r9]
   15914:	mov	ip, #0
   15918:	mov	r5, r0
   1591c:	mov	r4, r1
   15920:	str	r2, [sp, #20]
   15924:	str	ip, [sp, #12]
   15928:	beq	15a58 <__assert_fail@plt+0x2e90>
   1592c:	mov	r6, r3
   15930:	ldr	r3, [pc, #332]	; 15a84 <__assert_fail@plt+0x2ebc>
   15934:	ldr	r3, [r3]
   15938:	tst	r3, #256	; 0x100
   1593c:	bne	159f8 <__assert_fail@plt+0x2e30>
   15940:	mov	r0, #0
   15944:	bl	125bc <mnt_new_iter@plt>
   15948:	subs	r7, r0, #0
   1594c:	beq	15a4c <__assert_fail@plt+0x2e84>
   15950:	ldr	r3, [pc, #300]	; 15a84 <__assert_fail@plt+0x2ebc>
   15954:	ldr	r0, [sp, #4]
   15958:	ldr	r1, [r3]
   1595c:	ands	r1, r1, #256	; 0x100
   15960:	beq	159dc <__assert_fail@plt+0x2e14>
   15964:	mov	r2, r6
   15968:	mov	r1, r0
   1596c:	mov	r0, r5
   15970:	bl	15848 <__assert_fail@plt+0x2c80>
   15974:	subs	r6, r0, #0
   15978:	beq	159b4 <__assert_fail@plt+0x2dec>
   1597c:	add	r3, sp, #12
   15980:	ldr	r2, [sp, #4]
   15984:	mov	r1, r7
   15988:	mov	r0, r4
   1598c:	bl	12b14 <mnt_table_next_child_fs@plt>
   15990:	cmp	r0, #0
   15994:	bne	159f0 <__assert_fail@plt+0x2e28>
   15998:	mov	r3, r6
   1599c:	ldr	r2, [sp, #12]
   159a0:	mov	r1, r4
   159a4:	mov	r0, r5
   159a8:	bl	158fc <__assert_fail@plt+0x2d34>
   159ac:	cmp	r0, #0
   159b0:	beq	1597c <__assert_fail@plt+0x2db4>
   159b4:	mvn	r8, #0
   159b8:	mov	r0, r7
   159bc:	bl	12904 <mnt_free_iter@plt>
   159c0:	ldr	r2, [sp, #20]
   159c4:	ldr	r3, [r9]
   159c8:	mov	r0, r8
   159cc:	cmp	r2, r3
   159d0:	bne	15a7c <__assert_fail@plt+0x2eb4>
   159d4:	add	sp, sp, #24
   159d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   159dc:	bl	14a08 <__assert_fail@plt+0x1e40>
   159e0:	cmp	r0, #0
   159e4:	beq	1597c <__assert_fail@plt+0x2db4>
   159e8:	ldr	r0, [sp, #4]
   159ec:	b	15964 <__assert_fail@plt+0x2d9c>
   159f0:	mov	r8, #0
   159f4:	b	159b8 <__assert_fail@plt+0x2df0>
   159f8:	mov	r0, ip
   159fc:	bl	12ab4 <scols_new_iter@plt>
   15a00:	subs	sl, r0, #0
   15a04:	bne	15a1c <__assert_fail@plt+0x2e54>
   15a08:	b	15940 <__assert_fail@plt+0x2d78>
   15a0c:	ldr	r0, [sp, #16]
   15a10:	bl	129d0 <scols_line_get_userdata@plt>
   15a14:	cmp	r7, r0
   15a18:	beq	15a70 <__assert_fail@plt+0x2ea8>
   15a1c:	add	r2, sp, #16
   15a20:	mov	r1, sl
   15a24:	mov	r0, r5
   15a28:	bl	12838 <scols_table_next_line@plt>
   15a2c:	subs	r8, r0, #0
   15a30:	beq	15a0c <__assert_fail@plt+0x2e44>
   15a34:	mov	r0, sl
   15a38:	bl	12544 <scols_free_iter@plt>
   15a3c:	mov	r0, #0
   15a40:	bl	125bc <mnt_new_iter@plt>
   15a44:	subs	r7, r0, #0
   15a48:	bne	15950 <__assert_fail@plt+0x2d88>
   15a4c:	mvn	r8, #0
   15a50:	mov	r7, #0
   15a54:	b	159b8 <__assert_fail@plt+0x2df0>
   15a58:	add	r1, sp, #4
   15a5c:	mov	r0, r4
   15a60:	bl	12a18 <mnt_table_get_root_fs@plt>
   15a64:	subs	r6, r0, #0
   15a68:	beq	15940 <__assert_fail@plt+0x2d78>
   15a6c:	b	15a4c <__assert_fail@plt+0x2e84>
   15a70:	mov	r0, sl
   15a74:	bl	12544 <scols_free_iter@plt>
   15a78:	b	159c0 <__assert_fail@plt+0x2df8>
   15a7c:	bl	12634 <__stack_chk_fail@plt>
   15a80:	andeq	fp, r2, r0, asr ip
   15a84:	andeq	ip, r2, r0, asr r3
   15a88:	ldr	r3, [pc, #84]	; 15ae4 <__assert_fail@plt+0x2f1c>
   15a8c:	ldr	r3, [r3]
   15a90:	and	r3, r3, #3072	; 0xc00
   15a94:	cmp	r3, #1024	; 0x400
   15a98:	beq	15aac <__assert_fail@plt+0x2ee4>
   15a9c:	ldr	r3, [pc, #68]	; 15ae8 <__assert_fail@plt+0x2f20>
   15aa0:	ldr	r0, [r3, #24]
   15aa4:	cmp	r0, #0
   15aa8:	beq	15ab4 <__assert_fail@plt+0x2eec>
   15aac:	mov	r0, #0
   15ab0:	bx	lr
   15ab4:	ldr	r2, [r3, #56]	; 0x38
   15ab8:	cmp	r2, #0
   15abc:	bxne	lr
   15ac0:	ldr	r0, [r3, #88]	; 0x58
   15ac4:	cmp	r0, #0
   15ac8:	bne	15aac <__assert_fail@plt+0x2ee4>
   15acc:	ldr	r2, [r3, #120]	; 0x78
   15ad0:	cmp	r2, #0
   15ad4:	ldreq	r0, [r3, #344]	; 0x158
   15ad8:	clzeq	r0, r0
   15adc:	lsreq	r0, r0, #5
   15ae0:	bx	lr
   15ae4:	andeq	ip, r2, r0, asr r3
   15ae8:	andeq	ip, r2, r8
   15aec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15af0:	sub	sp, sp, #16
   15af4:	ldr	sl, [pc, #332]	; 15c48 <__assert_fail@plt+0x3080>
   15af8:	mov	r4, #0
   15afc:	mov	r6, r0
   15b00:	ldr	r3, [sl]
   15b04:	mov	r5, r1
   15b08:	str	r3, [sp, #12]
   15b0c:	str	r4, [sp, #8]
   15b10:	bl	15a88 <__assert_fail@plt+0x2ec0>
   15b14:	cmp	r0, r4
   15b18:	bne	15c28 <__assert_fail@plt+0x3060>
   15b1c:	ldr	r4, [pc, #296]	; 15c4c <__assert_fail@plt+0x3084>
   15b20:	ldr	r7, [r4, #24]
   15b24:	cmp	r7, #0
   15b28:	beq	15b38 <__assert_fail@plt+0x2f70>
   15b2c:	ldr	r3, [r4, #88]	; 0x58
   15b30:	cmp	r3, #0
   15b34:	beq	15bbc <__assert_fail@plt+0x2ff4>
   15b38:	ldr	r8, [pc, #272]	; 15c50 <__assert_fail@plt+0x3088>
   15b3c:	ldr	r9, [pc, #272]	; 15c54 <__assert_fail@plt+0x308c>
   15b40:	add	r7, sp, #8
   15b44:	b	15b80 <__assert_fail@plt+0x2fb8>
   15b48:	ldr	r3, [r9]
   15b4c:	tst	r3, #64	; 0x40
   15b50:	bne	15ba4 <__assert_fail@plt+0x2fdc>
   15b54:	ldr	r3, [r4, #56]	; 0x38
   15b58:	cmp	r3, #0
   15b5c:	bne	15ba4 <__assert_fail@plt+0x2fdc>
   15b60:	ldr	r2, [r4, #24]
   15b64:	cmp	r2, #0
   15b68:	beq	15ba4 <__assert_fail@plt+0x2fdc>
   15b6c:	mvn	r1, #0
   15b70:	mov	r0, r5
   15b74:	str	r2, [r4, #56]	; 0x38
   15b78:	str	r3, [r4, #24]
   15b7c:	bl	12b74 <mnt_reset_iter@plt>
   15b80:	str	r7, [sp]
   15b84:	mov	r3, #0
   15b88:	mov	r2, r8
   15b8c:	mov	r1, r5
   15b90:	mov	r0, r6
   15b94:	bl	12934 <mnt_table_find_next_fs@plt>
   15b98:	ldr	r0, [sp, #8]
   15b9c:	cmp	r0, #0
   15ba0:	beq	15b48 <__assert_fail@plt+0x2f80>
   15ba4:	ldr	r2, [sp, #12]
   15ba8:	ldr	r3, [sl]
   15bac:	cmp	r2, r3
   15bb0:	bne	15c44 <__assert_fail@plt+0x307c>
   15bb4:	add	sp, sp, #16
   15bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15bbc:	ldr	r3, [r4, #120]	; 0x78
   15bc0:	cmp	r3, #0
   15bc4:	bne	15b38 <__assert_fail@plt+0x2f70>
   15bc8:	ldr	r8, [pc, #132]	; 15c54 <__assert_fail@plt+0x308c>
   15bcc:	ldr	r3, [r8]
   15bd0:	tst	r3, #8
   15bd4:	beq	15b38 <__assert_fail@plt+0x2f70>
   15bd8:	mov	r0, r1
   15bdc:	bl	128a4 <mnt_iter_get_direction@plt>
   15be0:	mov	r1, r7
   15be4:	mov	r2, r0
   15be8:	mov	r0, r6
   15bec:	bl	1252c <mnt_table_find_source@plt>
   15bf0:	cmp	r0, #0
   15bf4:	str	r0, [sp, #8]
   15bf8:	bne	15ba4 <__assert_fail@plt+0x2fdc>
   15bfc:	ldr	r3, [r8]
   15c00:	tst	r3, #64	; 0x40
   15c04:	bne	15ba4 <__assert_fail@plt+0x2fdc>
   15c08:	mov	r0, r5
   15c0c:	ldr	r4, [r4, #24]
   15c10:	bl	128a4 <mnt_iter_get_direction@plt>
   15c14:	mov	r1, r4
   15c18:	mov	r2, r0
   15c1c:	mov	r0, r6
   15c20:	bl	129b8 <mnt_table_find_target@plt>
   15c24:	b	15ba4 <__assert_fail@plt+0x2fdc>
   15c28:	mov	r0, r6
   15c2c:	add	r2, sp, #8
   15c30:	bl	12574 <mnt_table_next_fs@plt>
   15c34:	cmp	r0, r4
   15c38:	ldreq	r0, [sp, #8]
   15c3c:	movne	r0, r4
   15c40:	b	15ba4 <__assert_fail@plt+0x2fdc>
   15c44:	bl	12634 <__stack_chk_fail@plt>
   15c48:	andeq	fp, r2, r0, asr ip
   15c4c:	andeq	ip, r2, r8
   15c50:	andeq	r4, r1, r8, lsl #20
   15c54:	andeq	ip, r2, r0, asr r3
   15c58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c5c:	mov	r6, r0
   15c60:	mov	r0, r2
   15c64:	mov	r9, r1
   15c68:	bl	125bc <mnt_new_iter@plt>
   15c6c:	subs	sl, r0, #0
   15c70:	beq	15d20 <__assert_fail@plt+0x3158>
   15c74:	ldr	r5, [pc, #188]	; 15d38 <__assert_fail@plt+0x3170>
   15c78:	ldr	r7, [pc, #188]	; 15d3c <__assert_fail@plt+0x3174>
   15c7c:	mvn	r4, #0
   15c80:	mov	r8, #0
   15c84:	b	15cb4 <__assert_fail@plt+0x30ec>
   15c88:	mov	r0, r9
   15c8c:	bl	158fc <__assert_fail@plt+0x2d34>
   15c90:	mov	r4, r0
   15c94:	cmp	r4, #0
   15c98:	bne	15d00 <__assert_fail@plt+0x3138>
   15c9c:	ldr	r3, [r5]
   15ca0:	add	r8, r8, #1
   15ca4:	ands	r4, r3, #8
   15ca8:	orr	r3, r3, #64	; 0x40
   15cac:	bne	15d18 <__assert_fail@plt+0x3150>
   15cb0:	str	r3, [r5]
   15cb4:	mov	r1, sl
   15cb8:	mov	r0, r6
   15cbc:	bl	15aec <__assert_fail@plt+0x2f24>
   15cc0:	mov	r3, #0
   15cc4:	mov	r1, r6
   15cc8:	subs	lr, r0, #0
   15ccc:	mov	r2, lr
   15cd0:	mov	r0, r9
   15cd4:	beq	15d10 <__assert_fail@plt+0x3148>
   15cd8:	ldr	ip, [r5]
   15cdc:	ands	ip, r7, ip
   15ce0:	bne	15c88 <__assert_fail@plt+0x30c0>
   15ce4:	mov	r2, ip
   15ce8:	mov	r1, lr
   15cec:	bl	15848 <__assert_fail@plt+0x2c80>
   15cf0:	clz	r4, r0
   15cf4:	lsr	r4, r4, #5
   15cf8:	cmp	r4, #0
   15cfc:	beq	15c9c <__assert_fail@plt+0x30d4>
   15d00:	mov	r0, sl
   15d04:	bl	12904 <mnt_free_iter@plt>
   15d08:	mov	r0, r4
   15d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d10:	cmp	r8, r3
   15d14:	beq	15d00 <__assert_fail@plt+0x3138>
   15d18:	mov	r4, #0
   15d1c:	b	15d00 <__assert_fail@plt+0x3138>
   15d20:	mov	r2, #5
   15d24:	ldr	r1, [pc, #20]	; 15d40 <__assert_fail@plt+0x3178>
   15d28:	bl	1261c <dcgettext@plt>
   15d2c:	bl	12a60 <warn@plt>
   15d30:	mvn	r4, #0
   15d34:	b	15d00 <__assert_fail@plt+0x3138>
   15d38:	andeq	ip, r2, r0, asr r3
   15d3c:	mrseq	r0, (UNDEF: 16)
   15d40:	andeq	sl, r1, r4, asr r0
   15d44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15d48:	mov	r5, r0
   15d4c:	ldrb	r0, [r0, #28]
   15d50:	ldr	r4, [pc, #124]	; 15dd4 <__assert_fail@plt+0x320c>
   15d54:	mov	r9, r1
   15d58:	tst	r0, #1
   15d5c:	mov	r7, r2
   15d60:	mov	r8, r3
   15d64:	ldr	r6, [r4]
   15d68:	beq	15da4 <__assert_fail@plt+0x31dc>
   15d6c:	mov	r3, r9
   15d70:	mov	r0, r6
   15d74:	ldr	r2, [pc, #92]	; 15dd8 <__assert_fail@plt+0x3210>
   15d78:	mov	r1, #1
   15d7c:	bl	129ac <__fprintf_chk@plt>
   15d80:	mov	r3, r8
   15d84:	mov	r2, r7
   15d88:	mov	r1, #1
   15d8c:	ldr	r0, [r4]
   15d90:	bl	127a8 <__vfprintf_chk@plt>
   15d94:	ldr	r1, [r4]
   15d98:	mov	r0, #10
   15d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15da0:	b	12a84 <fputc@plt>
   15da4:	ldr	r0, [r5]
   15da8:	bl	12724 <mnt_fs_get_target@plt>
   15dac:	ldr	r2, [pc, #40]	; 15ddc <__assert_fail@plt+0x3214>
   15db0:	mov	r1, #1
   15db4:	mov	r3, r0
   15db8:	mov	r0, r6
   15dbc:	bl	129ac <__fprintf_chk@plt>
   15dc0:	ldrb	r3, [r5, #28]
   15dc4:	ldr	r6, [r4]
   15dc8:	orr	r3, r3, #1
   15dcc:	strb	r3, [r5, #28]
   15dd0:	b	15d6c <__assert_fail@plt+0x31a4>
   15dd4:	andeq	ip, r2, r4, asr #6
   15dd8:	andeq	fp, r1, r8, ror #7
   15ddc:	andeq	sl, r1, ip, lsr sp
   15de0:	push	{r1, r2, r3}
   15de4:	push	{r4, lr}
   15de8:	sub	sp, sp, #12
   15dec:	ldr	r4, [pc, #80]	; 15e44 <__assert_fail@plt+0x327c>
   15df0:	ldr	r3, [r0, #20]
   15df4:	add	ip, sp, #24
   15df8:	ldr	r1, [r4]
   15dfc:	add	r3, r3, #1
   15e00:	str	r3, [r0, #20]
   15e04:	ldr	r2, [sp, #20]
   15e08:	mov	r3, ip
   15e0c:	str	r1, [sp, #4]
   15e10:	mov	r1, #87	; 0x57
   15e14:	str	ip, [sp]
   15e18:	bl	15d44 <__assert_fail@plt+0x317c>
   15e1c:	ldr	r2, [sp, #4]
   15e20:	ldr	r3, [r4]
   15e24:	cmp	r2, r3
   15e28:	bne	15e40 <__assert_fail@plt+0x3278>
   15e2c:	mov	r0, #0
   15e30:	add	sp, sp, #12
   15e34:	pop	{r4, lr}
   15e38:	add	sp, sp, #12
   15e3c:	bx	lr
   15e40:	bl	12634 <__stack_chk_fail@plt>
   15e44:	andeq	fp, r2, r0, asr ip
   15e48:	push	{r1, r2, r3}
   15e4c:	push	{r4, lr}
   15e50:	sub	sp, sp, #12
   15e54:	ldr	r4, [pc, #80]	; 15eac <__assert_fail@plt+0x32e4>
   15e58:	ldr	r3, [r0, #24]
   15e5c:	add	ip, sp, #24
   15e60:	ldr	r1, [r4]
   15e64:	add	r3, r3, #1
   15e68:	str	r3, [r0, #24]
   15e6c:	ldr	r2, [sp, #20]
   15e70:	mov	r3, ip
   15e74:	str	r1, [sp, #4]
   15e78:	mov	r1, #69	; 0x45
   15e7c:	str	ip, [sp]
   15e80:	bl	15d44 <__assert_fail@plt+0x317c>
   15e84:	ldr	r2, [sp, #4]
   15e88:	ldr	r3, [r4]
   15e8c:	cmp	r2, r3
   15e90:	bne	15ea8 <__assert_fail@plt+0x32e0>
   15e94:	mov	r0, #0
   15e98:	add	sp, sp, #12
   15e9c:	pop	{r4, lr}
   15ea0:	add	sp, sp, #12
   15ea4:	bx	lr
   15ea8:	bl	12634 <__stack_chk_fail@plt>
   15eac:	andeq	fp, r2, r0, asr ip
   15eb0:	push	{r1, r2, r3}
   15eb4:	ldr	r3, [pc, #92]	; 15f18 <__assert_fail@plt+0x3350>
   15eb8:	push	{r4, lr}
   15ebc:	sub	sp, sp, #12
   15ec0:	ldr	r4, [pc, #84]	; 15f1c <__assert_fail@plt+0x3354>
   15ec4:	ldr	r1, [r3]
   15ec8:	ldr	r2, [sp, #20]
   15ecc:	ldr	r3, [r4]
   15ed0:	tst	r1, #65536	; 0x10000
   15ed4:	str	r3, [sp, #4]
   15ed8:	beq	15ef0 <__assert_fail@plt+0x3328>
   15edc:	add	ip, sp, #24
   15ee0:	mov	r3, ip
   15ee4:	mov	r1, #32
   15ee8:	str	ip, [sp]
   15eec:	bl	15d44 <__assert_fail@plt+0x317c>
   15ef0:	ldr	r2, [sp, #4]
   15ef4:	ldr	r3, [r4]
   15ef8:	mov	r0, #0
   15efc:	cmp	r2, r3
   15f00:	bne	15f14 <__assert_fail@plt+0x334c>
   15f04:	add	sp, sp, #12
   15f08:	pop	{r4, lr}
   15f0c:	add	sp, sp, #12
   15f10:	bx	lr
   15f14:	bl	12634 <__stack_chk_fail@plt>
   15f18:	andeq	ip, r2, r0, asr r3
   15f1c:	andeq	fp, r2, r0, asr ip
   15f20:	push	{r4, r5, r6, r7, r8, lr}
   15f24:	subs	r6, r1, #0
   15f28:	beq	15f64 <__assert_fail@plt+0x339c>
   15f2c:	mov	r7, r2
   15f30:	sub	r5, r0, #4
   15f34:	mov	r4, #0
   15f38:	b	15f44 <__assert_fail@plt+0x337c>
   15f3c:	cmp	r4, r6
   15f40:	beq	15f64 <__assert_fail@plt+0x339c>
   15f44:	mov	r1, r7
   15f48:	ldr	r0, [r5, #4]!
   15f4c:	bl	124e4 <strcmp@plt>
   15f50:	add	r4, r4, #1
   15f54:	cmp	r0, #0
   15f58:	bne	15f3c <__assert_fail@plt+0x3374>
   15f5c:	mov	r0, #1
   15f60:	pop	{r4, r5, r6, r7, r8, pc}
   15f64:	mov	r0, #0
   15f68:	pop	{r4, r5, r6, r7, r8, pc}
   15f6c:	push	{r4, r5, r6, r7, r8, lr}
   15f70:	mov	r7, r1
   15f74:	ldrd	r4, [r0, #8]
   15f78:	mov	r6, r0
   15f7c:	mov	r2, r7
   15f80:	mov	r0, r4
   15f84:	mov	r1, r5
   15f88:	bl	15f20 <__assert_fail@plt+0x3358>
   15f8c:	cmp	r0, #0
   15f90:	bne	16014 <__assert_fail@plt+0x344c>
   15f94:	ldr	r2, [r6, #16]
   15f98:	cmp	r2, #0
   15f9c:	beq	15fac <__assert_fail@plt+0x33e4>
   15fa0:	add	r3, r5, #1
   15fa4:	cmp	r2, r3
   15fa8:	bcc	15fec <__assert_fail@plt+0x3424>
   15fac:	add	r5, r2, #17
   15fb0:	bic	r5, r5, #15
   15fb4:	str	r5, [r6, #16]
   15fb8:	lsl	r5, r5, #2
   15fbc:	mov	r0, r4
   15fc0:	mov	r1, r5
   15fc4:	bl	12658 <realloc@plt>
   15fc8:	adds	r3, r5, #0
   15fcc:	movne	r3, #1
   15fd0:	cmp	r0, #0
   15fd4:	movne	r3, #0
   15fd8:	cmp	r3, #0
   15fdc:	mov	r4, r0
   15fe0:	ldreq	r5, [r6, #12]
   15fe4:	streq	r0, [r6, #8]
   15fe8:	bne	1601c <__assert_fail@plt+0x3454>
   15fec:	cmp	r7, #0
   15ff0:	add	r4, r4, r5, lsl #2
   15ff4:	beq	16008 <__assert_fail@plt+0x3440>
   15ff8:	mov	r0, r7
   15ffc:	bl	12628 <strdup@plt>
   16000:	subs	r7, r0, #0
   16004:	beq	1602c <__assert_fail@plt+0x3464>
   16008:	add	r5, r5, #1
   1600c:	str	r7, [r4]
   16010:	str	r5, [r6, #12]
   16014:	mov	r0, #0
   16018:	pop	{r4, r5, r6, r7, r8, pc}
   1601c:	mov	r2, r5
   16020:	ldr	r1, [pc, #16]	; 16038 <__assert_fail@plt+0x3470>
   16024:	mov	r0, #1
   16028:	bl	12694 <err@plt>
   1602c:	ldr	r1, [pc, #8]	; 1603c <__assert_fail@plt+0x3474>
   16030:	mov	r0, #1
   16034:	bl	12694 <err@plt>
   16038:	ldrdeq	r9, [r1], -r0
   1603c:	andeq	r9, r1, r0, lsr pc
   16040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16044:	sub	sp, sp, #1424	; 0x590
   16048:	ldr	r8, [pc, #324]	; 16194 <__assert_fail@plt+0x35cc>
   1604c:	sub	sp, sp, #12
   16050:	mov	sl, r0
   16054:	ldr	r3, [r8]
   16058:	add	r0, sp, #12
   1605c:	str	r3, [sp, #1428]	; 0x594
   16060:	bl	12610 <uname@plt>
   16064:	subs	r9, r0, #0
   16068:	beq	16090 <__assert_fail@plt+0x34c8>
   1606c:	mov	r9, #0
   16070:	ldr	r2, [sp, #1428]	; 0x594
   16074:	ldr	r3, [r8]
   16078:	mov	r0, r9
   1607c:	cmp	r2, r3
   16080:	bne	16190 <__assert_fail@plt+0x35c8>
   16084:	add	sp, sp, #1424	; 0x590
   16088:	add	sp, sp, #12
   1608c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16090:	ldr	r1, [pc, #256]	; 16198 <__assert_fail@plt+0x35d0>
   16094:	add	r2, sp, #142	; 0x8e
   16098:	mov	r3, #1024	; 0x400
   1609c:	stm	sp, {r1, r2}
   160a0:	add	r0, sp, #404	; 0x194
   160a4:	mov	r1, r3
   160a8:	mov	r2, #1
   160ac:	bl	12ba4 <__snprintf_chk@plt>
   160b0:	add	r0, sp, #404	; 0x194
   160b4:	ldr	r1, [pc, #224]	; 1619c <__assert_fail@plt+0x35d4>
   160b8:	bl	12ad8 <fopen64@plt>
   160bc:	subs	r4, r0, #0
   160c0:	beq	1606c <__assert_fail@plt+0x34a4>
   160c4:	ldr	r6, [pc, #212]	; 161a0 <__assert_fail@plt+0x35d8>
   160c8:	ldr	r7, [pc, #212]	; 161a4 <__assert_fail@plt+0x35dc>
   160cc:	mov	r0, r4
   160d0:	bl	12808 <feof@plt>
   160d4:	cmp	r0, #0
   160d8:	bne	16184 <__assert_fail@plt+0x35bc>
   160dc:	mov	r2, r4
   160e0:	mov	r1, #1024	; 0x400
   160e4:	add	r0, sp, #404	; 0x194
   160e8:	bl	12568 <fgets@plt>
   160ec:	cmp	r0, #0
   160f0:	beq	16184 <__assert_fail@plt+0x35bc>
   160f4:	mov	r2, #10
   160f8:	add	r1, sp, #404	; 0x194
   160fc:	mov	r0, r6
   16100:	bl	12b5c <strncmp@plt>
   16104:	subs	r5, r0, #0
   16108:	bne	160cc <__assert_fail@plt+0x3504>
   1610c:	mov	r2, #14
   16110:	add	r1, sp, #404	; 0x194
   16114:	mov	r0, r7
   16118:	bl	12b5c <strncmp@plt>
   1611c:	cmp	r0, #0
   16120:	beq	160cc <__assert_fail@plt+0x3504>
   16124:	mov	r1, #58	; 0x3a
   16128:	add	r0, sp, #404	; 0x194
   1612c:	bl	12844 <strchr@plt>
   16130:	cmp	r0, #0
   16134:	beq	160cc <__assert_fail@plt+0x3504>
   16138:	strb	r5, [r0]
   1613c:	mov	r1, #47	; 0x2f
   16140:	add	r0, sp, #404	; 0x194
   16144:	bl	12a54 <strrchr@plt>
   16148:	cmp	r0, #0
   1614c:	beq	160cc <__assert_fail@plt+0x3504>
   16150:	add	fp, r0, #1
   16154:	mov	r0, fp
   16158:	ldr	r1, [pc, #72]	; 161a8 <__assert_fail@plt+0x35e0>
   1615c:	bl	12484 <strstr@plt>
   16160:	cmp	r0, #0
   16164:	beq	160cc <__assert_fail@plt+0x3504>
   16168:	strb	r5, [r0]
   1616c:	mov	r1, fp
   16170:	mov	r0, sl
   16174:	bl	15f6c <__assert_fail@plt+0x33a4>
   16178:	cmp	r0, #0
   1617c:	beq	160cc <__assert_fail@plt+0x3504>
   16180:	mov	r9, r0
   16184:	mov	r0, r4
   16188:	bl	129dc <fclose@plt>
   1618c:	b	16070 <__assert_fail@plt+0x34a8>
   16190:	bl	12634 <__stack_chk_fail@plt>
   16194:	andeq	fp, r2, r0, asr ip
   16198:	strdeq	fp, [r1], -r4
   1619c:	andeq	fp, r1, r8, lsl #4
   161a0:	andeq	fp, r1, r0, lsl r4
   161a4:	andeq	fp, r1, ip, lsl r4
   161a8:	andeq	fp, r1, ip, lsr #8
   161ac:	ldr	r3, [pc, #3384]	; 16eec <__assert_fail@plt+0x4324>
   161b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161b4:	sub	sp, sp, #260	; 0x104
   161b8:	ldr	r3, [r3]
   161bc:	mov	r2, #32
   161c0:	mov	r1, #0
   161c4:	mov	sl, r0
   161c8:	add	r0, sp, #32
   161cc:	str	r3, [sp, #252]	; 0xfc
   161d0:	bl	128f8 <memset@plt>
   161d4:	bl	15a88 <__assert_fail@plt+0x2ec0>
   161d8:	str	r0, [sp, #12]
   161dc:	mov	r0, #0
   161e0:	bl	125bc <mnt_new_iter@plt>
   161e4:	subs	r9, r0, #0
   161e8:	beq	16d2c <__assert_fail@plt+0x4164>
   161ec:	ldr	r5, [pc, #3324]	; 16ef0 <__assert_fail@plt+0x4328>
   161f0:	str	sl, [sp, #36]	; 0x24
   161f4:	ldr	r3, [r5]
   161f8:	cmp	r3, #0
   161fc:	beq	169d4 <__assert_fail@plt+0x3e0c>
   16200:	ldr	r5, [pc, #3308]	; 16ef4 <__assert_fail@plt+0x432c>
   16204:	mov	r1, r9
   16208:	mov	r0, sl
   1620c:	bl	15aec <__assert_fail@plt+0x2f24>
   16210:	cmp	r0, #0
   16214:	mov	r3, r0
   16218:	str	r0, [sp, #32]
   1621c:	beq	169c0 <__assert_fail@plt+0x3df8>
   16220:	ldrb	r2, [sp, #60]	; 0x3c
   16224:	ldr	r1, [sp, #12]
   16228:	bic	r2, r2, #1
   1622c:	cmp	r1, #0
   16230:	strb	r2, [sp, #60]	; 0x3c
   16234:	bne	16548 <__assert_fail@plt+0x3980>
   16238:	mov	r0, r3
   1623c:	bl	12ae4 <mnt_fs_is_swaparea@plt>
   16240:	cmp	r0, #0
   16244:	beq	16664 <__assert_fail@plt+0x3a9c>
   16248:	add	fp, sp, #64	; 0x40
   1624c:	mov	ip, #0
   16250:	mov	r3, fp
   16254:	add	r2, sp, #28
   16258:	ldr	r1, [pc, #3224]	; 16ef8 <__assert_fail@plt+0x4330>
   1625c:	ldr	r0, [sp, #32]
   16260:	str	ip, [sp, #64]	; 0x40
   16264:	bl	128e0 <mnt_fs_get_option@plt>
   16268:	subs	r6, r0, #0
   1626c:	bne	162b0 <__assert_fail@plt+0x36e8>
   16270:	ldr	r4, [sp, #28]
   16274:	cmp	r4, #0
   16278:	beq	162b0 <__assert_fail@plt+0x36e8>
   1627c:	ldr	r7, [sp, #64]	; 0x40
   16280:	ldr	r1, [pc, #3188]	; 16efc <__assert_fail@plt+0x4334>
   16284:	mov	r2, r7
   16288:	mov	r0, r4
   1628c:	bl	12b5c <strncmp@plt>
   16290:	cmp	r0, #0
   16294:	beq	162b0 <__assert_fail@plt+0x36e8>
   16298:	mov	r2, r7
   1629c:	mov	r0, r4
   162a0:	ldr	r1, [pc, #3160]	; 16f00 <__assert_fail@plt+0x4338>
   162a4:	bl	12b5c <strncmp@plt>
   162a8:	cmp	r0, #0
   162ac:	bne	16c30 <__assert_fail@plt+0x4068>
   162b0:	mov	r3, fp
   162b4:	add	r2, sp, #28
   162b8:	ldr	r1, [pc, #3140]	; 16f04 <__assert_fail@plt+0x433c>
   162bc:	ldr	r0, [sp, #32]
   162c0:	bl	128e0 <mnt_fs_get_option@plt>
   162c4:	cmp	r0, #0
   162c8:	bne	16340 <__assert_fail@plt+0x3778>
   162cc:	ldr	r1, [sp, #28]
   162d0:	cmp	r1, #0
   162d4:	beq	16340 <__assert_fail@plt+0x3778>
   162d8:	ldrsb	r3, [r1]
   162dc:	ldr	r6, [sp, #64]	; 0x40
   162e0:	cmp	r3, #45	; 0x2d
   162e4:	addeq	r4, r1, #1
   162e8:	movne	r4, r1
   162ec:	add	r6, r1, r6
   162f0:	cmp	r4, r6
   162f4:	bcs	16340 <__assert_fail@plt+0x3778>
   162f8:	bl	127e4 <__ctype_b_loc@plt>
   162fc:	sub	r2, r4, #1
   16300:	sub	r1, r6, #1
   16304:	ldr	ip, [r0]
   16308:	b	16314 <__assert_fail@plt+0x374c>
   1630c:	cmp	r1, r2
   16310:	beq	16340 <__assert_fail@plt+0x3778>
   16314:	ldrb	r3, [r2, #1]!
   16318:	lsl	r3, r3, #1
   1631c:	ldrh	r0, [ip, r3]
   16320:	ands	r0, r0, #2048	; 0x800
   16324:	bne	1630c <__assert_fail@plt+0x3744>
   16328:	ldr	r1, [pc, #3032]	; 16f08 <__assert_fail@plt+0x4340>
   1632c:	mov	r2, #5
   16330:	bl	1261c <dcgettext@plt>
   16334:	mov	r1, r0
   16338:	add	r0, sp, #32
   1633c:	bl	15e48 <__assert_fail@plt+0x3280>
   16340:	ldr	r0, [sp, #32]
   16344:	bl	127f0 <mnt_fs_get_srcpath@plt>
   16348:	mov	r3, #0
   1634c:	str	r3, [sp, #20]
   16350:	str	r3, [sp, #24]
   16354:	subs	r4, r0, #0
   16358:	beq	16afc <__assert_fail@plt+0x3f34>
   1635c:	add	r2, sp, #24
   16360:	add	r1, sp, #20
   16364:	bl	128ec <blkid_parse_tag_string@plt>
   16368:	subs	r6, r0, #0
   1636c:	beq	16b6c <__assert_fail@plt+0x3fa4>
   16370:	mov	r3, #0
   16374:	mov	r2, r3
   16378:	ldr	r1, [pc, #2956]	; 16f0c <__assert_fail@plt+0x4344>
   1637c:	ldr	r0, [sp, #32]
   16380:	bl	128e0 <mnt_fs_get_option@plt>
   16384:	mov	r6, r0
   16388:	ldr	r0, [sp, #32]
   1638c:	bl	128b0 <mnt_fs_is_pseudofs@plt>
   16390:	cmp	r0, #0
   16394:	beq	168d4 <__assert_fail@plt+0x3d0c>
   16398:	ldr	r1, [pc, #2928]	; 16f10 <__assert_fail@plt+0x4348>
   1639c:	mov	r2, #5
   163a0:	mov	r0, #0
   163a4:	bl	1261c <dcgettext@plt>
   163a8:	mov	r2, r4
   163ac:	mov	r1, r0
   163b0:	add	r0, sp, #32
   163b4:	bl	15eb0 <__assert_fail@plt+0x32e8>
   163b8:	ldr	r0, [sp, #20]
   163bc:	bl	1255c <free@plt>
   163c0:	ldr	r0, [sp, #24]
   163c4:	bl	1255c <free@plt>
   163c8:	ldr	r0, [sp, #32]
   163cc:	bl	12490 <mnt_fs_get_source@plt>
   163d0:	ldr	r3, [pc, #2876]	; 16f14 <__assert_fail@plt+0x434c>
   163d4:	ldr	r1, [r3]
   163d8:	bl	12688 <mnt_resolve_spec@plt>
   163dc:	mov	r3, #0
   163e0:	str	r3, [sp, #64]	; 0x40
   163e4:	subs	r4, r0, #0
   163e8:	beq	1687c <__assert_fail@plt+0x3cb4>
   163ec:	ldr	r0, [sp, #32]
   163f0:	bl	128b0 <mnt_fs_is_pseudofs@plt>
   163f4:	cmp	r0, #0
   163f8:	bne	1640c <__assert_fail@plt+0x3844>
   163fc:	ldr	r0, [sp, #32]
   16400:	bl	1291c <mnt_fs_is_netfs@plt>
   16404:	cmp	r0, #0
   16408:	beq	16c54 <__assert_fail@plt+0x408c>
   1640c:	mov	r2, #5
   16410:	ldr	r1, [pc, #2816]	; 16f18 <__assert_fail@plt+0x4350>
   16414:	mov	r0, #0
   16418:	bl	1261c <dcgettext@plt>
   1641c:	mov	r2, r4
   16420:	mov	r1, r0
   16424:	add	r0, sp, #32
   16428:	bl	15eb0 <__assert_fail@plt+0x32e8>
   1642c:	mov	r4, r0
   16430:	cmp	r4, #0
   16434:	beq	1687c <__assert_fail@plt+0x3cb4>
   16438:	ldr	r3, [r5]
   1643c:	tst	r3, #8
   16440:	beq	169c8 <__assert_fail@plt+0x3e00>
   16444:	ldr	r6, [pc, #2768]	; 16f1c <__assert_fail@plt+0x4354>
   16448:	mov	r0, r9
   1644c:	bl	12904 <mnt_free_iter@plt>
   16450:	ldr	r2, [r6]
   16454:	ldr	r0, [sp, #56]	; 0x38
   16458:	ldr	r3, [sp, #52]	; 0x34
   1645c:	orr	r0, r0, r2
   16460:	orrs	r0, r0, r3
   16464:	beq	16d04 <__assert_fail@plt+0x413c>
   16468:	ldr	r5, [pc, #2736]	; 16f20 <__assert_fail@plt+0x4358>
   1646c:	mov	r7, #5
   16470:	mov	r0, #10
   16474:	ldr	r1, [r5]
   16478:	bl	12a84 <fputc@plt>
   1647c:	str	r7, [sp]
   16480:	ldr	r2, [pc, #2716]	; 16f24 <__assert_fail@plt+0x435c>
   16484:	ldr	r3, [r6]
   16488:	ldr	r1, [pc, #2712]	; 16f28 <__assert_fail@plt+0x4360>
   1648c:	mov	r0, #0
   16490:	ldr	r8, [r5]
   16494:	bl	12b98 <dcngettext@plt>
   16498:	ldr	r3, [r6]
   1649c:	mov	r1, #1
   164a0:	mov	r2, r0
   164a4:	mov	r0, r8
   164a8:	bl	129ac <__fprintf_chk@plt>
   164ac:	str	r7, [sp]
   164b0:	ldr	r3, [sp, #56]	; 0x38
   164b4:	ldr	r2, [pc, #2672]	; 16f2c <__assert_fail@plt+0x4364>
   164b8:	ldr	r1, [pc, #2672]	; 16f30 <__assert_fail@plt+0x4368>
   164bc:	mov	r0, #0
   164c0:	ldr	r8, [r5]
   164c4:	bl	12b98 <dcngettext@plt>
   164c8:	ldr	r3, [sp, #56]	; 0x38
   164cc:	mov	r1, #1
   164d0:	mov	r2, r0
   164d4:	mov	r0, r8
   164d8:	bl	129ac <__fprintf_chk@plt>
   164dc:	str	r7, [sp]
   164e0:	ldr	r3, [sp, #52]	; 0x34
   164e4:	ldr	r2, [pc, #2632]	; 16f34 <__assert_fail@plt+0x436c>
   164e8:	ldr	r1, [pc, #2632]	; 16f38 <__assert_fail@plt+0x4370>
   164ec:	mov	r0, #0
   164f0:	ldr	r7, [r5]
   164f4:	bl	12b98 <dcngettext@plt>
   164f8:	mov	r1, #1
   164fc:	ldr	r3, [sp, #52]	; 0x34
   16500:	mov	r2, r0
   16504:	mov	r0, r7
   16508:	bl	129ac <__fprintf_chk@plt>
   1650c:	ldr	r1, [r5]
   16510:	mov	r0, #10
   16514:	bl	12a84 <fputc@plt>
   16518:	cmp	r4, #0
   1651c:	ldreq	r3, [r6]
   16520:	ldreq	r4, [sp, #56]	; 0x38
   16524:	addeq	r4, r4, r3
   16528:	ldr	r3, [pc, #2492]	; 16eec <__assert_fail@plt+0x4324>
   1652c:	ldr	r2, [sp, #252]	; 0xfc
   16530:	mov	r0, r4
   16534:	ldr	r3, [r3]
   16538:	cmp	r2, r3
   1653c:	bne	16ee0 <__assert_fail@plt+0x4318>
   16540:	add	sp, sp, #260	; 0x104
   16544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16548:	bl	12724 <mnt_fs_get_target@plt>
   1654c:	subs	r7, r0, #0
   16550:	beq	16650 <__assert_fail@plt+0x3a88>
   16554:	ldr	r3, [r5]
   16558:	tst	r3, #16384	; 0x4000
   1655c:	beq	168c0 <__assert_fail@plt+0x3cf8>
   16560:	mov	r0, #0
   16564:	bl	125bc <mnt_new_iter@plt>
   16568:	subs	r8, r0, #0
   1656c:	beq	16638 <__assert_fail@plt+0x3a70>
   16570:	ldr	r2, [sp, #32]
   16574:	mov	r1, r8
   16578:	ldr	r0, [sp, #36]	; 0x24
   1657c:	add	fp, sp, #64	; 0x40
   16580:	bl	12898 <mnt_table_set_iter@plt>
   16584:	mov	r2, fp
   16588:	mov	r1, r8
   1658c:	ldr	r0, [sp, #36]	; 0x24
   16590:	bl	12574 <mnt_table_next_fs@plt>
   16594:	mov	r2, fp
   16598:	mov	r1, r8
   1659c:	ldr	r0, [sp, #36]	; 0x24
   165a0:	bl	12574 <mnt_table_next_fs@plt>
   165a4:	cmp	r0, #0
   165a8:	bne	16648 <__assert_fail@plt+0x3a80>
   165ac:	ldr	r0, [sp, #64]	; 0x40
   165b0:	bl	12724 <mnt_fs_get_target@plt>
   165b4:	subs	r4, r0, #0
   165b8:	beq	16594 <__assert_fail@plt+0x39cc>
   165bc:	ldr	r3, [r5]
   165c0:	tst	r3, #16384	; 0x4000
   165c4:	beq	16624 <__assert_fail@plt+0x3a5c>
   165c8:	mov	r0, r4
   165cc:	bl	1282c <strlen@plt>
   165d0:	mov	r1, r7
   165d4:	mov	r2, r0
   165d8:	mov	r6, r0
   165dc:	mov	r0, r4
   165e0:	bl	12b5c <strncmp@plt>
   165e4:	cmp	r0, #0
   165e8:	bne	16594 <__assert_fail@plt+0x39cc>
   165ec:	ldrsb	r3, [r7, r6]
   165f0:	cmp	r3, #0
   165f4:	beq	1679c <__assert_fail@plt+0x3bd4>
   165f8:	cmp	r3, #47	; 0x2f
   165fc:	bne	16594 <__assert_fail@plt+0x39cc>
   16600:	mov	r2, #5
   16604:	ldr	r1, [pc, #2352]	; 16f3c <__assert_fail@plt+0x4374>
   16608:	bl	1261c <dcgettext@plt>
   1660c:	mov	r3, r4
   16610:	mov	r2, r7
   16614:	mov	r1, r0
   16618:	add	r0, sp, #32
   1661c:	bl	15e48 <__assert_fail@plt+0x3280>
   16620:	b	16594 <__assert_fail@plt+0x39cc>
   16624:	ldr	r3, [pc, #2280]	; 16f14 <__assert_fail@plt+0x434c>
   16628:	ldr	r1, [r3]
   1662c:	bl	125e0 <mnt_resolve_target@plt>
   16630:	mov	r4, r0
   16634:	b	165c8 <__assert_fail@plt+0x3a00>
   16638:	mov	r2, #5
   1663c:	ldr	r1, [pc, #2300]	; 16f40 <__assert_fail@plt+0x4378>
   16640:	bl	1261c <dcgettext@plt>
   16644:	bl	12a60 <warn@plt>
   16648:	mov	r0, r8
   1664c:	bl	12904 <mnt_free_iter@plt>
   16650:	ldr	r3, [sp, #32]
   16654:	mov	r0, r3
   16658:	bl	12ae4 <mnt_fs_is_swaparea@plt>
   1665c:	cmp	r0, #0
   16660:	bne	16248 <__assert_fail@plt+0x3680>
   16664:	ldr	r0, [sp, #32]
   16668:	bl	12724 <mnt_fs_get_target@plt>
   1666c:	subs	r6, r0, #0
   16670:	beq	16ce0 <__assert_fail@plt+0x4118>
   16674:	ldr	r3, [r5]
   16678:	ands	r4, r3, #16384	; 0x4000
   1667c:	bne	166a8 <__assert_fail@plt+0x3ae0>
   16680:	ldr	r3, [pc, #2188]	; 16f14 <__assert_fail@plt+0x434c>
   16684:	ldr	r1, [r3]
   16688:	bl	125e0 <mnt_resolve_target@plt>
   1668c:	subs	r7, r0, #0
   16690:	beq	16ec4 <__assert_fail@plt+0x42fc>
   16694:	mov	r1, r6
   16698:	bl	124e4 <strcmp@plt>
   1669c:	cmp	r0, #0
   166a0:	moveq	r6, r7
   166a4:	bne	16bbc <__assert_fail@plt+0x3ff4>
   166a8:	mov	r1, r6
   166ac:	add	r2, sp, #64	; 0x40
   166b0:	mov	r0, #3
   166b4:	bl	12b38 <__xstat64@plt>
   166b8:	subs	r4, r0, #0
   166bc:	bne	16984 <__assert_fail@plt+0x3dbc>
   166c0:	ldr	r3, [sp, #80]	; 0x50
   166c4:	and	r3, r3, #61440	; 0xf000
   166c8:	cmp	r3, #16384	; 0x4000
   166cc:	beq	166ec <__assert_fail@plt+0x3b24>
   166d0:	mov	r3, r4
   166d4:	mov	r2, r4
   166d8:	ldr	r1, [pc, #2092]	; 16f0c <__assert_fail@plt+0x4344>
   166dc:	ldr	r0, [sp, #32]
   166e0:	bl	128e0 <mnt_fs_get_option@plt>
   166e4:	cmp	r0, #1
   166e8:	beq	16be4 <__assert_fail@plt+0x401c>
   166ec:	ldr	r1, [pc, #2128]	; 16f44 <__assert_fail@plt+0x437c>
   166f0:	mov	r2, #5
   166f4:	mov	r0, #0
   166f8:	bl	1261c <dcgettext@plt>
   166fc:	mov	r1, r0
   16700:	add	r0, sp, #32
   16704:	bl	15eb0 <__assert_fail@plt+0x32e8>
   16708:	ldr	r0, [sp, #32]
   1670c:	bl	127b4 <mnt_fs_get_vfs_options@plt>
   16710:	subs	r4, r0, #0
   16714:	beq	16738 <__assert_fail@plt+0x3b70>
   16718:	mov	r2, #5
   1671c:	ldr	r1, [pc, #2084]	; 16f48 <__assert_fail@plt+0x4380>
   16720:	mov	r0, #0
   16724:	bl	1261c <dcgettext@plt>
   16728:	mov	r2, r4
   1672c:	mov	r1, r0
   16730:	add	r0, sp, #32
   16734:	bl	15eb0 <__assert_fail@plt+0x32e8>
   16738:	ldr	r0, [sp, #32]
   1673c:	bl	126b8 <mnt_fs_get_fs_options@plt>
   16740:	subs	r4, r0, #0
   16744:	beq	16768 <__assert_fail@plt+0x3ba0>
   16748:	mov	r2, #5
   1674c:	ldr	r1, [pc, #2040]	; 16f4c <__assert_fail@plt+0x4384>
   16750:	mov	r0, #0
   16754:	bl	1261c <dcgettext@plt>
   16758:	mov	r2, r4
   1675c:	mov	r1, r0
   16760:	add	r0, sp, #32
   16764:	bl	15eb0 <__assert_fail@plt+0x32e8>
   16768:	ldr	r0, [sp, #32]
   1676c:	bl	125ec <mnt_fs_get_user_options@plt>
   16770:	subs	r4, r0, #0
   16774:	beq	16340 <__assert_fail@plt+0x3778>
   16778:	mov	r2, #5
   1677c:	ldr	r1, [pc, #1996]	; 16f50 <__assert_fail@plt+0x4388>
   16780:	mov	r0, #0
   16784:	bl	1261c <dcgettext@plt>
   16788:	mov	r2, r4
   1678c:	mov	r1, r0
   16790:	add	r0, sp, #32
   16794:	bl	15eb0 <__assert_fail@plt+0x32e8>
   16798:	b	16340 <__assert_fail@plt+0x3778>
   1679c:	mov	r2, #5
   167a0:	ldr	r1, [pc, #1964]	; 16f54 <__assert_fail@plt+0x438c>
   167a4:	bl	1261c <dcgettext@plt>
   167a8:	mov	r1, r0
   167ac:	add	r0, sp, #32
   167b0:	bl	15de0 <__assert_fail@plt+0x3218>
   167b4:	b	16594 <__assert_fail@plt+0x39cc>
   167b8:	ldr	r1, [pc, #1944]	; 16f58 <__assert_fail@plt+0x4390>
   167bc:	mov	r0, r6
   167c0:	bl	124e4 <strcmp@plt>
   167c4:	cmp	r0, #0
   167c8:	beq	16804 <__assert_fail@plt+0x3c3c>
   167cc:	cmp	r7, #0
   167d0:	beq	16804 <__assert_fail@plt+0x3c3c>
   167d4:	mov	r2, r6
   167d8:	ldrd	r0, [sp, #40]	; 0x28
   167dc:	bl	15f20 <__assert_fail@plt+0x3358>
   167e0:	cmp	r0, #0
   167e4:	bne	16804 <__assert_fail@plt+0x3c3c>
   167e8:	mov	r2, #5
   167ec:	ldr	r1, [pc, #1896]	; 16f5c <__assert_fail@plt+0x4394>
   167f0:	bl	1261c <dcgettext@plt>
   167f4:	mov	r2, r6
   167f8:	mov	r1, r0
   167fc:	add	r0, sp, #32
   16800:	bl	15de0 <__assert_fail@plt+0x3218>
   16804:	ldr	r3, [pc, #1800]	; 16f14 <__assert_fail@plt+0x434c>
   16808:	mov	r0, r4
   1680c:	add	r1, sp, #64	; 0x40
   16810:	ldr	r2, [r3]
   16814:	bl	124a8 <mnt_get_fstype@plt>
   16818:	subs	r4, r0, #0
   1681c:	beq	16e58 <__assert_fail@plt+0x4290>
   16820:	ldr	r1, [pc, #1840]	; 16f58 <__assert_fail@plt+0x4390>
   16824:	bl	124e4 <strcmp@plt>
   16828:	mov	r1, r4
   1682c:	mov	r7, r0
   16830:	mov	r0, r6
   16834:	bl	124e4 <strcmp@plt>
   16838:	cmp	r0, #0
   1683c:	bne	16e98 <__assert_fail@plt+0x42d0>
   16840:	cmp	r7, #0
   16844:	beq	1685c <__assert_fail@plt+0x3c94>
   16848:	mov	r2, r4
   1684c:	ldrd	r0, [sp, #40]	; 0x28
   16850:	bl	15f20 <__assert_fail@plt+0x3358>
   16854:	cmp	r0, #0
   16858:	beq	16e74 <__assert_fail@plt+0x42ac>
   1685c:	mov	r2, #5
   16860:	ldr	r1, [pc, #1784]	; 16f60 <__assert_fail@plt+0x4398>
   16864:	mov	r0, #0
   16868:	bl	1261c <dcgettext@plt>
   1686c:	mov	r2, r4
   16870:	mov	r1, r0
   16874:	add	r0, sp, #32
   16878:	bl	15eb0 <__assert_fail@plt+0x32e8>
   1687c:	ldr	r0, [sp, #32]
   16880:	bl	12b44 <mnt_fs_get_passno@plt>
   16884:	mov	r4, r0
   16888:	ldr	r0, [sp, #32]
   1688c:	bl	12724 <mnt_fs_get_target@plt>
   16890:	subs	r1, r0, #0
   16894:	beq	168a8 <__assert_fail@plt+0x3ce0>
   16898:	ldr	r0, [pc, #1732]	; 16f64 <__assert_fail@plt+0x439c>
   1689c:	bl	124e4 <strcmp@plt>
   168a0:	cmp	r0, #0
   168a4:	beq	1693c <__assert_fail@plt+0x3d74>
   168a8:	ldr	r3, [r5]
   168ac:	tst	r3, #8
   168b0:	bne	169c0 <__assert_fail@plt+0x3df8>
   168b4:	orr	r3, r3, #64	; 0x40
   168b8:	str	r3, [r5]
   168bc:	b	16204 <__assert_fail@plt+0x363c>
   168c0:	ldr	r3, [pc, #1612]	; 16f14 <__assert_fail@plt+0x434c>
   168c4:	ldr	r1, [r3]
   168c8:	bl	125e0 <mnt_resolve_target@plt>
   168cc:	mov	r7, r0
   168d0:	b	16560 <__assert_fail@plt+0x3998>
   168d4:	ldr	r0, [sp, #32]
   168d8:	bl	1291c <mnt_fs_is_netfs@plt>
   168dc:	subs	r7, r0, #0
   168e0:	bne	16398 <__assert_fail@plt+0x37d0>
   168e4:	add	r2, sp, #64	; 0x40
   168e8:	mov	r1, r4
   168ec:	mov	r0, #3
   168f0:	bl	12b38 <__xstat64@plt>
   168f4:	cmp	r0, #0
   168f8:	bne	16e2c <__assert_fail@plt+0x4264>
   168fc:	ldr	r3, [sp, #80]	; 0x50
   16900:	and	r3, r3, #61440	; 0xf000
   16904:	sub	r2, r3, #16384	; 0x4000
   16908:	bic	r2, r2, #16384	; 0x4000
   1690c:	cmp	r2, #0
   16910:	bne	16de4 <__assert_fail@plt+0x421c>
   16914:	cmp	r6, #0
   16918:	beq	16df0 <__assert_fail@plt+0x4228>
   1691c:	ldr	r1, [pc, #1604]	; 16f68 <__assert_fail@plt+0x43a0>
   16920:	mov	r2, #5
   16924:	bl	1261c <dcgettext@plt>
   16928:	mov	r2, r4
   1692c:	mov	r1, r0
   16930:	add	r0, sp, #32
   16934:	bl	15de0 <__assert_fail@plt+0x3218>
   16938:	b	163b8 <__assert_fail@plt+0x37f0>
   1693c:	cmp	r4, #1
   16940:	beq	168a8 <__assert_fail@plt+0x3ce0>
   16944:	mov	r2, #5
   16948:	ldr	r1, [pc, #1564]	; 16f6c <__assert_fail@plt+0x43a4>
   1694c:	bl	1261c <dcgettext@plt>
   16950:	mov	r2, r4
   16954:	mov	r1, r0
   16958:	add	r0, sp, #32
   1695c:	bl	15de0 <__assert_fail@plt+0x3218>
   16960:	ldr	r3, [r5]
   16964:	tst	r3, #8
   16968:	mov	r4, r0
   1696c:	bne	16444 <__assert_fail@plt+0x387c>
   16970:	orr	r3, r3, #64	; 0x40
   16974:	cmp	r0, #0
   16978:	str	r3, [r5]
   1697c:	beq	16204 <__assert_fail@plt+0x363c>
   16980:	b	16444 <__assert_fail@plt+0x387c>
   16984:	mov	r3, #0
   16988:	mov	r2, r3
   1698c:	ldr	r1, [pc, #1500]	; 16f70 <__assert_fail@plt+0x43a8>
   16990:	ldr	r0, [sp, #32]
   16994:	bl	128e0 <mnt_fs_get_option@plt>
   16998:	mov	r2, #5
   1699c:	cmp	r0, #1
   169a0:	beq	16cc4 <__assert_fail@plt+0x40fc>
   169a4:	ldr	r1, [pc, #1480]	; 16f74 <__assert_fail@plt+0x43ac>
   169a8:	mov	r0, #0
   169ac:	bl	1261c <dcgettext@plt>
   169b0:	mov	r1, r0
   169b4:	add	r0, sp, #32
   169b8:	bl	15de0 <__assert_fail@plt+0x3218>
   169bc:	b	16708 <__assert_fail@plt+0x3b40>
   169c0:	mov	r4, #0
   169c4:	b	16444 <__assert_fail@plt+0x387c>
   169c8:	orr	r3, r3, #64	; 0x40
   169cc:	str	r3, [r5]
   169d0:	b	16444 <__assert_fail@plt+0x387c>
   169d4:	ldr	r1, [pc, #1436]	; 16f78 <__assert_fail@plt+0x43b0>
   169d8:	ldr	r0, [pc, #1436]	; 16f7c <__assert_fail@plt+0x43b4>
   169dc:	bl	12ad8 <fopen64@plt>
   169e0:	subs	r4, r0, #0
   169e4:	beq	16abc <__assert_fail@plt+0x3ef4>
   169e8:	mov	r0, r4
   169ec:	bl	12808 <feof@plt>
   169f0:	cmp	r0, #0
   169f4:	bne	16ab4 <__assert_fail@plt+0x3eec>
   169f8:	mov	r2, r4
   169fc:	mov	r1, #80	; 0x50
   16a00:	add	r0, sp, #172	; 0xac
   16a04:	bl	12568 <fgets@plt>
   16a08:	cmp	r0, #0
   16a0c:	beq	16ab4 <__assert_fail@plt+0x3eec>
   16a10:	bl	127e4 <__ctype_b_loc@plt>
   16a14:	ldrsb	r3, [sp, #172]	; 0xac
   16a18:	add	r6, sp, #172	; 0xac
   16a1c:	lsl	r1, r3, #1
   16a20:	ldr	r2, [r0]
   16a24:	ldrh	r1, [r2, r1]
   16a28:	tst	r1, #8192	; 0x2000
   16a2c:	beq	16ad0 <__assert_fail@plt+0x3f08>
   16a30:	cmp	r3, #0
   16a34:	bne	16a4c <__assert_fail@plt+0x3e84>
   16a38:	b	16a58 <__assert_fail@plt+0x3e90>
   16a3c:	lsl	r3, r3, #1
   16a40:	ldrh	r3, [r2, r3]
   16a44:	tst	r3, #8192	; 0x2000
   16a48:	beq	16a58 <__assert_fail@plt+0x3e90>
   16a4c:	ldrsb	r3, [r6, #1]!
   16a50:	cmp	r3, #0
   16a54:	bne	16a3c <__assert_fail@plt+0x3e74>
   16a58:	mov	r1, #10
   16a5c:	mov	r0, r6
   16a60:	bl	12844 <strchr@plt>
   16a64:	mov	r1, #9
   16a68:	cmp	r0, #0
   16a6c:	movne	r3, #0
   16a70:	strbne	r3, [r0]
   16a74:	mov	r0, r6
   16a78:	bl	12844 <strchr@plt>
   16a7c:	mov	r1, #32
   16a80:	cmp	r0, #0
   16a84:	movne	r3, #0
   16a88:	strbne	r3, [r0]
   16a8c:	mov	r0, r6
   16a90:	bl	12844 <strchr@plt>
   16a94:	mov	r1, r6
   16a98:	cmp	r0, #0
   16a9c:	movne	r3, #0
   16aa0:	strbne	r3, [r0]
   16aa4:	add	r0, sp, #32
   16aa8:	bl	15f6c <__assert_fail@plt+0x33a4>
   16aac:	cmp	r0, #0
   16ab0:	beq	169e8 <__assert_fail@plt+0x3e20>
   16ab4:	mov	r0, r4
   16ab8:	bl	129dc <fclose@plt>
   16abc:	add	r0, sp, #32
   16ac0:	bl	16040 <__assert_fail@plt+0x3478>
   16ac4:	mov	r3, #1
   16ac8:	str	r3, [r5]
   16acc:	b	16200 <__assert_fail@plt+0x3638>
   16ad0:	cmp	r3, #0
   16ad4:	bne	16aec <__assert_fail@plt+0x3f24>
   16ad8:	b	16a58 <__assert_fail@plt+0x3e90>
   16adc:	lsl	r3, r3, #1
   16ae0:	ldrh	r3, [r2, r3]
   16ae4:	tst	r3, #8192	; 0x2000
   16ae8:	bne	16a4c <__assert_fail@plt+0x3e84>
   16aec:	ldrsb	r3, [r6, #1]!
   16af0:	cmp	r3, #0
   16af4:	bne	16adc <__assert_fail@plt+0x3f14>
   16af8:	b	16a58 <__assert_fail@plt+0x3e90>
   16afc:	add	r2, sp, #64	; 0x40
   16b00:	add	r1, sp, #28
   16b04:	ldr	r0, [sp, #32]
   16b08:	str	r4, [sp, #28]
   16b0c:	str	r4, [sp, #64]	; 0x40
   16b10:	bl	12874 <mnt_fs_get_tag@plt>
   16b14:	subs	r8, r0, #0
   16b18:	bne	16c04 <__assert_fail@plt+0x403c>
   16b1c:	ldr	r3, [pc, #1008]	; 16f14 <__assert_fail@plt+0x434c>
   16b20:	ldr	r6, [sp, #28]
   16b24:	ldr	r7, [sp, #64]	; 0x40
   16b28:	mov	r0, r6
   16b2c:	mov	r1, r7
   16b30:	ldr	r2, [r3]
   16b34:	bl	129e8 <mnt_resolve_tag@plt>
   16b38:	subs	r4, r0, #0
   16b3c:	beq	16da0 <__assert_fail@plt+0x41d8>
   16b40:	mov	r0, r8
   16b44:	mov	r2, #5
   16b48:	ldr	r1, [pc, #1072]	; 16f80 <__assert_fail@plt+0x43b8>
   16b4c:	bl	1261c <dcgettext@plt>
   16b50:	str	r4, [sp]
   16b54:	mov	r3, r7
   16b58:	mov	r2, r6
   16b5c:	mov	r1, r0
   16b60:	add	r0, sp, #32
   16b64:	bl	15eb0 <__assert_fail@plt+0x32e8>
   16b68:	b	16370 <__assert_fail@plt+0x37a8>
   16b6c:	add	r2, sp, #64	; 0x40
   16b70:	mov	r1, r4
   16b74:	mov	r0, #3
   16b78:	bl	12b38 <__xstat64@plt>
   16b7c:	cmp	r0, #0
   16b80:	beq	16370 <__assert_fail@plt+0x37a8>
   16b84:	mov	r0, r6
   16b88:	mov	r2, #5
   16b8c:	ldr	r1, [pc, #1008]	; 16f84 <__assert_fail@plt+0x43bc>
   16b90:	bl	1261c <dcgettext@plt>
   16b94:	mov	r2, r4
   16b98:	mov	r1, r0
   16b9c:	add	r0, sp, #32
   16ba0:	bl	15e48 <__assert_fail@plt+0x3280>
   16ba4:	mov	r4, r0
   16ba8:	ldr	r0, [sp, #20]
   16bac:	bl	1255c <free@plt>
   16bb0:	ldr	r0, [sp, #24]
   16bb4:	bl	1255c <free@plt>
   16bb8:	b	16c24 <__assert_fail@plt+0x405c>
   16bbc:	mov	r0, r4
   16bc0:	mov	r2, #5
   16bc4:	ldr	r1, [pc, #956]	; 16f88 <__assert_fail@plt+0x43c0>
   16bc8:	bl	1261c <dcgettext@plt>
   16bcc:	mov	r2, r7
   16bd0:	mov	r6, r7
   16bd4:	mov	r1, r0
   16bd8:	add	r0, sp, #32
   16bdc:	bl	15de0 <__assert_fail@plt+0x3218>
   16be0:	b	166a8 <__assert_fail@plt+0x3ae0>
   16be4:	mov	r0, r4
   16be8:	mov	r2, #5
   16bec:	ldr	r1, [pc, #920]	; 16f8c <__assert_fail@plt+0x43c4>
   16bf0:	bl	1261c <dcgettext@plt>
   16bf4:	mov	r1, r0
   16bf8:	add	r0, sp, #32
   16bfc:	bl	15e48 <__assert_fail@plt+0x3280>
   16c00:	b	16708 <__assert_fail@plt+0x3b40>
   16c04:	mov	r0, r4
   16c08:	mov	r2, #5
   16c0c:	ldr	r1, [pc, #892]	; 16f90 <__assert_fail@plt+0x43c8>
   16c10:	bl	1261c <dcgettext@plt>
   16c14:	mov	r1, r0
   16c18:	add	r0, sp, #32
   16c1c:	bl	15e48 <__assert_fail@plt+0x3280>
   16c20:	mov	r4, r0
   16c24:	cmp	r4, #0
   16c28:	bne	16438 <__assert_fail@plt+0x3870>
   16c2c:	b	163c8 <__assert_fail@plt+0x3800>
   16c30:	mov	r0, r6
   16c34:	mov	r2, #5
   16c38:	ldr	r1, [pc, #852]	; 16f94 <__assert_fail@plt+0x43cc>
   16c3c:	bl	1261c <dcgettext@plt>
   16c40:	ldr	r2, [sp, #28]
   16c44:	mov	r1, r0
   16c48:	add	r0, sp, #32
   16c4c:	bl	15e48 <__assert_fail@plt+0x3280>
   16c50:	b	162b0 <__assert_fail@plt+0x36e8>
   16c54:	ldr	r0, [sp, #32]
   16c58:	bl	124cc <mnt_fs_get_fstype@plt>
   16c5c:	subs	r6, r0, #0
   16c60:	beq	16e3c <__assert_fail@plt+0x4274>
   16c64:	ldr	r1, [pc, #812]	; 16f98 <__assert_fail@plt+0x43d0>
   16c68:	bl	124e4 <strcmp@plt>
   16c6c:	subs	r7, r0, #0
   16c70:	beq	16d44 <__assert_fail@plt+0x417c>
   16c74:	ldr	r1, [pc, #800]	; 16f9c <__assert_fail@plt+0x43d4>
   16c78:	mov	r0, r6
   16c7c:	bl	124e4 <strcmp@plt>
   16c80:	cmp	r0, #0
   16c84:	bne	167b8 <__assert_fail@plt+0x3bf0>
   16c88:	ldr	r3, [pc, #644]	; 16f14 <__assert_fail@plt+0x434c>
   16c8c:	mov	r0, r4
   16c90:	add	r1, sp, #64	; 0x40
   16c94:	ldr	r2, [r3]
   16c98:	bl	124a8 <mnt_get_fstype@plt>
   16c9c:	subs	r4, r0, #0
   16ca0:	bne	16e1c <__assert_fail@plt+0x4254>
   16ca4:	mov	r2, #5
   16ca8:	ldr	r1, [pc, #752]	; 16fa0 <__assert_fail@plt+0x43d8>
   16cac:	bl	1261c <dcgettext@plt>
   16cb0:	mov	r1, r0
   16cb4:	add	r0, sp, #32
   16cb8:	bl	15e48 <__assert_fail@plt+0x3280>
   16cbc:	mov	r4, r0
   16cc0:	b	16430 <__assert_fail@plt+0x3868>
   16cc4:	ldr	r1, [pc, #728]	; 16fa4 <__assert_fail@plt+0x43dc>
   16cc8:	mov	r0, #0
   16ccc:	bl	1261c <dcgettext@plt>
   16cd0:	mov	r1, r0
   16cd4:	add	r0, sp, #32
   16cd8:	bl	15e48 <__assert_fail@plt+0x3280>
   16cdc:	b	16708 <__assert_fail@plt+0x3b40>
   16ce0:	mov	r2, #5
   16ce4:	ldr	r1, [pc, #700]	; 16fa8 <__assert_fail@plt+0x43e0>
   16ce8:	bl	1261c <dcgettext@plt>
   16cec:	mov	r1, r0
   16cf0:	add	r0, sp, #32
   16cf4:	bl	15e48 <__assert_fail@plt+0x3280>
   16cf8:	subs	r4, r0, #0
   16cfc:	bne	16438 <__assert_fail@plt+0x3870>
   16d00:	b	16708 <__assert_fail@plt+0x3b40>
   16d04:	ldr	r3, [pc, #672]	; 16fac <__assert_fail@plt+0x43e4>
   16d08:	mov	r2, #5
   16d0c:	ldr	r1, [pc, #668]	; 16fb0 <__assert_fail@plt+0x43e8>
   16d10:	ldr	r5, [r3]
   16d14:	bl	1261c <dcgettext@plt>
   16d18:	mov	r1, #1
   16d1c:	mov	r2, r0
   16d20:	mov	r0, r5
   16d24:	bl	129ac <__fprintf_chk@plt>
   16d28:	b	16518 <__assert_fail@plt+0x3950>
   16d2c:	mov	r2, #5
   16d30:	ldr	r1, [pc, #520]	; 16f40 <__assert_fail@plt+0x4378>
   16d34:	bl	1261c <dcgettext@plt>
   16d38:	bl	12a60 <warn@plt>
   16d3c:	mov	r4, r9
   16d40:	b	16444 <__assert_fail@plt+0x387c>
   16d44:	mov	r3, r7
   16d48:	mov	r2, r7
   16d4c:	ldr	r1, [pc, #440]	; 16f0c <__assert_fail@plt+0x4344>
   16d50:	ldr	r0, [sp, #32]
   16d54:	bl	128e0 <mnt_fs_get_option@plt>
   16d58:	cmp	r0, #1
   16d5c:	bne	16c74 <__assert_fail@plt+0x40ac>
   16d60:	mov	r3, r7
   16d64:	mov	r2, r7
   16d68:	ldr	r1, [pc, #580]	; 16fb4 <__assert_fail@plt+0x43ec>
   16d6c:	ldr	r0, [sp, #32]
   16d70:	bl	128e0 <mnt_fs_get_option@plt>
   16d74:	cmp	r0, #1
   16d78:	bne	16c74 <__assert_fail@plt+0x40ac>
   16d7c:	ldr	r1, [pc, #564]	; 16fb8 <__assert_fail@plt+0x43f0>
   16d80:	mov	r0, r7
   16d84:	mov	r2, #5
   16d88:	bl	1261c <dcgettext@plt>
   16d8c:	mov	r1, r0
   16d90:	add	r0, sp, #32
   16d94:	bl	15de0 <__assert_fail@plt+0x3218>
   16d98:	mov	r4, r0
   16d9c:	b	16430 <__assert_fail@plt+0x3868>
   16da0:	mov	r2, r4
   16da4:	mov	r3, r4
   16da8:	ldr	r1, [pc, #448]	; 16f70 <__assert_fail@plt+0x43a8>
   16dac:	ldr	r0, [sp, #32]
   16db0:	bl	128e0 <mnt_fs_get_option@plt>
   16db4:	mov	r2, #5
   16db8:	cmp	r0, #1
   16dbc:	mov	r0, r4
   16dc0:	beq	16dfc <__assert_fail@plt+0x4234>
   16dc4:	ldr	r1, [pc, #496]	; 16fbc <__assert_fail@plt+0x43f4>
   16dc8:	bl	1261c <dcgettext@plt>
   16dcc:	mov	r3, r7
   16dd0:	mov	r2, r6
   16dd4:	mov	r1, r0
   16dd8:	add	r0, sp, #32
   16ddc:	bl	15de0 <__assert_fail@plt+0x3218>
   16de0:	b	163b8 <__assert_fail@plt+0x37f0>
   16de4:	cmp	r6, #0
   16de8:	cmpne	r3, #24576	; 0x6000
   16dec:	bne	16e68 <__assert_fail@plt+0x42a0>
   16df0:	mov	r2, #5
   16df4:	ldr	r1, [pc, #452]	; 16fc0 <__assert_fail@plt+0x43f8>
   16df8:	b	163a0 <__assert_fail@plt+0x37d8>
   16dfc:	ldr	r1, [pc, #448]	; 16fc4 <__assert_fail@plt+0x43fc>
   16e00:	bl	1261c <dcgettext@plt>
   16e04:	mov	r3, r7
   16e08:	mov	r2, r6
   16e0c:	mov	r1, r0
   16e10:	add	r0, sp, #32
   16e14:	bl	15e48 <__assert_fail@plt+0x3280>
   16e18:	b	163b8 <__assert_fail@plt+0x37f0>
   16e1c:	ldr	r1, [pc, #308]	; 16f58 <__assert_fail@plt+0x4390>
   16e20:	bl	124e4 <strcmp@plt>
   16e24:	mov	r7, r0
   16e28:	b	16840 <__assert_fail@plt+0x3c78>
   16e2c:	mov	r0, r7
   16e30:	mov	r2, #5
   16e34:	ldr	r1, [pc, #396]	; 16fc8 <__assert_fail@plt+0x4400>
   16e38:	b	16924 <__assert_fail@plt+0x3d5c>
   16e3c:	ldr	r3, [pc, #208]	; 16f14 <__assert_fail@plt+0x434c>
   16e40:	mov	r0, r4
   16e44:	add	r1, sp, #64	; 0x40
   16e48:	ldr	r2, [r3]
   16e4c:	bl	124a8 <mnt_get_fstype@plt>
   16e50:	subs	r4, r0, #0
   16e54:	bne	16e1c <__assert_fail@plt+0x4254>
   16e58:	mov	r2, #5
   16e5c:	ldr	r1, [pc, #316]	; 16fa0 <__assert_fail@plt+0x43d8>
   16e60:	mov	r0, #0
   16e64:	b	16d88 <__assert_fail@plt+0x41c0>
   16e68:	mov	r2, #5
   16e6c:	ldr	r1, [pc, #344]	; 16fcc <__assert_fail@plt+0x4404>
   16e70:	b	16924 <__assert_fail@plt+0x3d5c>
   16e74:	mov	r2, #5
   16e78:	ldr	r1, [pc, #336]	; 16fd0 <__assert_fail@plt+0x4408>
   16e7c:	bl	1261c <dcgettext@plt>
   16e80:	mov	r2, r4
   16e84:	mov	r1, r0
   16e88:	add	r0, sp, #32
   16e8c:	bl	15e48 <__assert_fail@plt+0x3280>
   16e90:	mov	r4, r0
   16e94:	b	16430 <__assert_fail@plt+0x3868>
   16e98:	mov	r2, #5
   16e9c:	ldr	r1, [pc, #304]	; 16fd4 <__assert_fail@plt+0x440c>
   16ea0:	mov	r0, #0
   16ea4:	bl	1261c <dcgettext@plt>
   16ea8:	mov	r3, r4
   16eac:	mov	r2, r6
   16eb0:	mov	r1, r0
   16eb4:	add	r0, sp, #32
   16eb8:	bl	15e48 <__assert_fail@plt+0x3280>
   16ebc:	mov	r4, r0
   16ec0:	b	16430 <__assert_fail@plt+0x3868>
   16ec4:	ldr	r3, [r5]
   16ec8:	tst	r3, #8
   16ecc:	bne	16ee4 <__assert_fail@plt+0x431c>
   16ed0:	orr	r3, r3, #64	; 0x40
   16ed4:	str	r3, [r5]
   16ed8:	mvn	r4, #11
   16edc:	b	16444 <__assert_fail@plt+0x387c>
   16ee0:	bl	12634 <__stack_chk_fail@plt>
   16ee4:	mvn	r4, #11
   16ee8:	b	16444 <__assert_fail@plt+0x387c>
   16eec:	andeq	fp, r2, r0, asr ip
   16ef0:	andeq	ip, r2, r0, asr #8
   16ef4:	andeq	ip, r2, r0, asr r3
   16ef8:	andeq	fp, r1, r8, lsl #9
   16efc:	muleq	r1, r0, r4
   16f00:	muleq	r1, r8, r4
   16f04:	andeq	fp, r1, r8, asr #9
   16f08:	andeq	fp, r1, ip, asr #9
   16f0c:	andeq	fp, r1, r4, lsl #11
   16f10:	andeq	fp, r1, r0, lsl #13
   16f14:	andeq	ip, r2, r4, asr r3
   16f18:	andeq	fp, r1, ip, lsr #14
   16f1c:	andeq	ip, r2, r8, asr r3
   16f20:	andeq	ip, r2, r0, asr #6
   16f24:	andeq	fp, r1, ip, ror #16
   16f28:	andeq	fp, r1, ip, ror r8
   16f2c:	andeq	fp, r1, ip, lsl #17
   16f30:	muleq	r1, r8, r8
   16f34:	andeq	fp, r1, r4, lsr #17
   16f38:			; <UNDEFINED> instruction: 0x0001b8b4
   16f3c:	andeq	fp, r1, r4, ror #8
   16f40:	andeq	sl, r1, r4, asr r0
   16f44:	andeq	fp, r1, r8, lsr #11
   16f48:			; <UNDEFINED> instruction: 0x0001b5b8
   16f4c:	andeq	fp, r1, r8, asr #11
   16f50:	ldrdeq	fp, [r1], -r8
   16f54:	andeq	fp, r1, r4, asr #8
   16f58:	andeq	fp, r1, r4, lsr #15
   16f5c:	andeq	fp, r1, r0, lsl #16
   16f60:	andeq	fp, r1, ip, lsr #16
   16f64:	andeq	r9, r1, ip, asr #30
   16f68:	andeq	fp, r1, r0, asr #13
   16f6c:	andeq	fp, r1, ip, lsr r8
   16f70:	andeq	fp, r1, ip, lsr r5
   16f74:	andeq	fp, r1, ip, ror #10
   16f78:	andeq	fp, r1, r8, lsl #4
   16f7c:	andeq	fp, r1, r0, lsr r4
   16f80:	andeq	fp, r1, ip, asr #12
   16f84:	andeq	fp, r1, r4, ror #12
   16f88:	andeq	fp, r1, r4, lsl r5
   16f8c:	andeq	fp, r1, ip, lsl #11
   16f90:	strdeq	fp, [r1], -r0
   16f94:	andeq	fp, r1, r0, lsr #9
   16f98:	andeq	fp, r1, r4, asr r7
   16f9c:	muleq	r1, ip, r7
   16fa0:	andeq	fp, r1, ip, lsr #15
   16fa4:	andeq	fp, r1, r4, asr #10
   16fa8:	strdeq	fp, [r1], -r8
   16fac:	andeq	ip, r2, r4, asr #6
   16fb0:	andeq	fp, r1, r4, asr #17
   16fb4:	muleq	r1, r4, lr
   16fb8:	andeq	fp, r1, ip, asr r7
   16fbc:	andeq	fp, r1, r8, lsr r6
   16fc0:	andeq	fp, r1, r8, lsl r7
   16fc4:	andeq	fp, r1, ip, lsl #12
   16fc8:	andeq	fp, r1, r4, lsr #13
   16fcc:	strdeq	fp, [r1], -r8
   16fd0:	strdeq	fp, [r1], -r8
   16fd4:	ldrdeq	fp, [r1], -r4
   16fd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16fdc:	subs	r9, r0, #0
   16fe0:	beq	17080 <__assert_fail@plt+0x44b8>
   16fe4:	bl	1282c <strlen@plt>
   16fe8:	lsl	r0, r0, #2
   16fec:	add	r0, r0, #1
   16ff0:	bl	1276c <malloc@plt>
   16ff4:	subs	r7, r0, #0
   16ff8:	beq	17080 <__assert_fail@plt+0x44b8>
   16ffc:	ldrsb	r8, [r9]
   17000:	cmp	r8, #0
   17004:	beq	1708c <__assert_fail@plt+0x44c4>
   17008:	ldr	r5, [pc, #132]	; 17094 <__assert_fail@plt+0x44cc>
   1700c:	mov	r4, r7
   17010:	add	r5, pc, r5
   17014:	mov	r6, #92	; 0x5c
   17018:	mov	r1, r8
   1701c:	mov	r0, r5
   17020:	bl	12844 <strchr@plt>
   17024:	uxtb	r3, r8
   17028:	asr	r2, r8, #6
   1702c:	asr	r1, r3, #3
   17030:	and	r2, r2, #3
   17034:	and	r1, r1, #7
   17038:	and	r3, r3, #7
   1703c:	add	r2, r2, #48	; 0x30
   17040:	add	r1, r1, #48	; 0x30
   17044:	add	r3, r3, #48	; 0x30
   17048:	cmp	r0, #0
   1704c:	strbeq	r8, [r4], #1
   17050:	ldrsb	r8, [r9, #1]!
   17054:	strbne	r6, [r4]
   17058:	strbne	r2, [r4, #1]
   1705c:	strbne	r1, [r4, #2]
   17060:	strbne	r3, [r4, #3]
   17064:	addne	r4, r4, #4
   17068:	cmp	r8, #0
   1706c:	bne	17018 <__assert_fail@plt+0x4450>
   17070:	mov	r3, #0
   17074:	strb	r3, [r4]
   17078:	mov	r0, r7
   1707c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17080:	mov	r7, #0
   17084:	mov	r0, r7
   17088:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1708c:	mov	r4, r7
   17090:	b	17070 <__assert_fail@plt+0x44a8>
   17094:	ldrdeq	r4, [r0], -r8
   17098:	cmp	r0, #0
   1709c:	bxeq	lr
   170a0:	ldrsb	r3, [r0]
   170a4:	cmp	r3, #0
   170a8:	beq	1715c <__assert_fail@plt+0x4594>
   170ac:	subs	r2, r2, #1
   170b0:	beq	1715c <__assert_fail@plt+0x4594>
   170b4:	push	{r4, r5, r6, r7, lr}
   170b8:	mov	ip, #0
   170bc:	mov	r6, #8
   170c0:	b	170e4 <__assert_fail@plt+0x451c>
   170c4:	add	r0, r0, #1
   170c8:	add	ip, ip, #1
   170cc:	strb	r3, [r1, #-1]
   170d0:	ldrsb	r3, [r0]
   170d4:	cmp	r3, #0
   170d8:	beq	17150 <__assert_fail@plt+0x4588>
   170dc:	cmp	ip, r2
   170e0:	bcs	17150 <__assert_fail@plt+0x4588>
   170e4:	cmp	r3, #92	; 0x5c
   170e8:	add	r1, r1, #1
   170ec:	bne	170c4 <__assert_fail@plt+0x44fc>
   170f0:	add	lr, ip, #3
   170f4:	cmp	lr, r2
   170f8:	bcs	170c4 <__assert_fail@plt+0x44fc>
   170fc:	ldrsb	lr, [r0, #1]
   17100:	bic	r4, lr, #7
   17104:	cmp	r4, #48	; 0x30
   17108:	bne	170c4 <__assert_fail@plt+0x44fc>
   1710c:	ldrsb	r4, [r0, #2]
   17110:	bic	r5, r4, #7
   17114:	cmp	r5, #48	; 0x30
   17118:	bne	170c4 <__assert_fail@plt+0x44fc>
   1711c:	ldrsb	r5, [r0, #3]
   17120:	bic	r7, r5, #7
   17124:	cmp	r7, #48	; 0x30
   17128:	bne	170c4 <__assert_fail@plt+0x44fc>
   1712c:	and	r3, lr, #7
   17130:	and	r4, r4, #7
   17134:	smlabb	r3, r6, r3, r4
   17138:	and	r5, r5, #7
   1713c:	add	r0, r0, #4
   17140:	add	r3, r5, r3, lsl #3
   17144:	add	ip, ip, #4
   17148:	sxtb	r3, r3
   1714c:	b	170cc <__assert_fail@plt+0x4504>
   17150:	mov	r3, #0
   17154:	strb	r3, [r1]
   17158:	pop	{r4, r5, r6, r7, pc}
   1715c:	mov	r3, #0
   17160:	strb	r3, [r1]
   17164:	bx	lr
   17168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1716c:	subs	r5, r0, #0
   17170:	sub	sp, sp, #12
   17174:	moveq	r0, r5
   17178:	beq	17288 <__assert_fail@plt+0x46c0>
   1717c:	mov	r9, r1
   17180:	sub	r8, r2, #1
   17184:	mov	r7, r1
   17188:	mov	r6, #0
   1718c:	b	171a0 <__assert_fail@plt+0x45d8>
   17190:	add	r5, r5, #1
   17194:	add	r6, r6, #1
   17198:	strb	r4, [r7]
   1719c:	add	r7, r7, #1
   171a0:	ldrsb	r4, [r5]
   171a4:	cmp	r4, #0
   171a8:	beq	17278 <__assert_fail@plt+0x46b0>
   171ac:	cmp	r6, r8
   171b0:	bcs	17278 <__assert_fail@plt+0x46b0>
   171b4:	cmp	r4, #92	; 0x5c
   171b8:	bne	17190 <__assert_fail@plt+0x45c8>
   171bc:	add	r3, r6, #3
   171c0:	cmp	r3, r8
   171c4:	bcs	17190 <__assert_fail@plt+0x45c8>
   171c8:	ldrsb	r3, [r5, #1]
   171cc:	cmp	r3, #120	; 0x78
   171d0:	bne	17190 <__assert_fail@plt+0x45c8>
   171d4:	bl	127e4 <__ctype_b_loc@plt>
   171d8:	ldrsb	r3, [r5, #2]
   171dc:	sxth	r1, r3
   171e0:	lsl	r2, r1, #1
   171e4:	ldr	r0, [r0]
   171e8:	ldrh	ip, [r0, r2]
   171ec:	tst	ip, #4096	; 0x1000
   171f0:	beq	17190 <__assert_fail@plt+0x45c8>
   171f4:	ldrsb	sl, [r5, #3]
   171f8:	sxth	r2, sl
   171fc:	lsl	lr, r2, #1
   17200:	ldrh	fp, [r0, lr]
   17204:	tst	fp, #4096	; 0x1000
   17208:	beq	17190 <__assert_fail@plt+0x45c8>
   1720c:	tst	ip, #2048	; 0x800
   17210:	bne	17290 <__assert_fail@plt+0x46c8>
   17214:	stm	sp, {r1, r2}
   17218:	bl	127c0 <__ctype_tolower_loc@plt>
   1721c:	ldr	r1, [sp]
   17220:	ldr	r2, [sp, #4]
   17224:	ldr	r3, [r0]
   17228:	ldr	r4, [r3, r1, lsl #2]
   1722c:	sub	r4, r4, #87	; 0x57
   17230:	lsl	r4, r4, #4
   17234:	sxtb	r4, r4
   17238:	tst	fp, #2048	; 0x800
   1723c:	subne	r3, sl, #48	; 0x30
   17240:	sxtbne	r3, r3
   17244:	bne	17264 <__assert_fail@plt+0x469c>
   17248:	str	r2, [sp]
   1724c:	bl	127c0 <__ctype_tolower_loc@plt>
   17250:	ldr	r2, [sp]
   17254:	ldr	r3, [r0]
   17258:	ldr	r3, [r3, r2, lsl #2]
   1725c:	sub	r3, r3, #87	; 0x57
   17260:	sxtb	r3, r3
   17264:	orr	r3, r4, r3
   17268:	strb	r3, [r7]
   1726c:	add	r5, r5, #4
   17270:	add	r6, r6, #4
   17274:	b	1719c <__assert_fail@plt+0x45d4>
   17278:	sub	r0, r7, r9
   1727c:	add	r0, r0, #1
   17280:	mov	r3, #0
   17284:	strb	r3, [r7]
   17288:	add	sp, sp, #12
   1728c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17290:	sub	r4, r3, #48	; 0x30
   17294:	lsl	r4, r4, #4
   17298:	sxtb	r4, r4
   1729c:	b	17238 <__assert_fail@plt+0x4670>
   172a0:	push	{r4, r5, r6, lr}
   172a4:	subs	r4, r0, #0
   172a8:	beq	17330 <__assert_fail@plt+0x4768>
   172ac:	ldrsb	r3, [r4]
   172b0:	bics	r2, r3, #32
   172b4:	beq	17320 <__assert_fail@plt+0x4758>
   172b8:	cmp	r3, #9
   172bc:	beq	17320 <__assert_fail@plt+0x4758>
   172c0:	mov	ip, r4
   172c4:	b	172d0 <__assert_fail@plt+0x4708>
   172c8:	cmp	r3, #9
   172cc:	beq	172dc <__assert_fail@plt+0x4714>
   172d0:	ldrsb	r3, [ip, #1]!
   172d4:	bics	r2, r3, #32
   172d8:	bne	172c8 <__assert_fail@plt+0x4700>
   172dc:	sub	r5, ip, r4
   172e0:	cmp	r1, #0
   172e4:	add	r5, r5, #1
   172e8:	beq	172f0 <__assert_fail@plt+0x4728>
   172ec:	str	ip, [r1]
   172f0:	cmp	r4, ip
   172f4:	beq	17330 <__assert_fail@plt+0x4768>
   172f8:	mov	r0, r5
   172fc:	bl	1276c <malloc@plt>
   17300:	subs	r6, r0, #0
   17304:	beq	17318 <__assert_fail@plt+0x4750>
   17308:	mov	r2, r5
   1730c:	mov	r0, r4
   17310:	mov	r1, r6
   17314:	bl	17098 <__assert_fail@plt+0x44d0>
   17318:	mov	r0, r6
   1731c:	pop	{r4, r5, r6, pc}
   17320:	cmp	r1, #0
   17324:	movne	ip, r4
   17328:	movne	r5, #1
   1732c:	bne	172ec <__assert_fail@plt+0x4724>
   17330:	mov	r6, #0
   17334:	mov	r0, r6
   17338:	pop	{r4, r5, r6, pc}
   1733c:	andeq	r0, r0, r0
   17340:	cmp	r0, #0
   17344:	mov	r3, #0
   17348:	str	r3, [r1]
   1734c:	bxeq	lr
   17350:	ldrsb	r2, [r0]
   17354:	cmp	r2, #47	; 0x2f
   17358:	bne	17394 <__assert_fail@plt+0x47cc>
   1735c:	ldrsb	r3, [r0, #1]
   17360:	cmp	r3, #47	; 0x2f
   17364:	bne	1739c <__assert_fail@plt+0x47d4>
   17368:	add	r3, r0, #1
   1736c:	b	1737c <__assert_fail@plt+0x47b4>
   17370:	ldrsb	r2, [r3]
   17374:	cmp	r2, #47	; 0x2f
   17378:	bne	1739c <__assert_fail@plt+0x47d4>
   1737c:	cmp	r3, #0
   17380:	mov	r0, r3
   17384:	bxeq	lr
   17388:	ldrsb	r2, [r3], #1
   1738c:	cmp	r2, #47	; 0x2f
   17390:	beq	17370 <__assert_fail@plt+0x47a8>
   17394:	cmp	r2, #0
   17398:	beq	173d8 <__assert_fail@plt+0x4810>
   1739c:	mov	r3, #1
   173a0:	str	r3, [r1]
   173a4:	ldrsb	r3, [r0, #1]
   173a8:	add	r2, r0, #1
   173ac:	cmp	r3, #47	; 0x2f
   173b0:	cmpne	r3, #0
   173b4:	bxeq	lr
   173b8:	rsb	r3, r0, #1
   173bc:	add	ip, r2, r3
   173c0:	str	ip, [r1]
   173c4:	ldrsb	ip, [r2, #1]!
   173c8:	cmp	ip, #0
   173cc:	cmpne	ip, #47	; 0x2f
   173d0:	bne	173bc <__assert_fail@plt+0x47f4>
   173d4:	bx	lr
   173d8:	mov	r0, r2
   173dc:	bx	lr
   173e0:	push	{r4, r5, r6, r7, r8, lr}
   173e4:	mov	r7, r1
   173e8:	ldrsb	r1, [r0]
   173ec:	cmp	r1, #0
   173f0:	movne	r5, r0
   173f4:	movne	r4, #0
   173f8:	beq	17464 <__assert_fail@plt+0x489c>
   173fc:	cmp	r1, #92	; 0x5c
   17400:	addne	r6, r5, r4
   17404:	beq	17434 <__assert_fail@plt+0x486c>
   17408:	mov	r0, r7
   1740c:	bl	12844 <strchr@plt>
   17410:	cmp	r0, #0
   17414:	bne	1745c <__assert_fail@plt+0x4894>
   17418:	ldrsb	r1, [r6, #1]!
   1741c:	add	r4, r4, #1
   17420:	mov	r0, r4
   17424:	cmp	r1, #0
   17428:	popeq	{r4, r5, r6, r7, r8, pc}
   1742c:	cmp	r1, #92	; 0x5c
   17430:	bne	17408 <__assert_fail@plt+0x4840>
   17434:	add	r3, r5, r4
   17438:	ldrsb	r3, [r3, #1]
   1743c:	cmp	r3, #0
   17440:	beq	1745c <__assert_fail@plt+0x4894>
   17444:	add	r4, r4, #2
   17448:	mov	r0, r4
   1744c:	ldrsb	r1, [r5, r4]
   17450:	cmp	r1, #0
   17454:	bne	173fc <__assert_fail@plt+0x4834>
   17458:	pop	{r4, r5, r6, r7, r8, pc}
   1745c:	mov	r0, r4
   17460:	pop	{r4, r5, r6, r7, r8, pc}
   17464:	mov	r0, r1
   17468:	pop	{r4, r5, r6, r7, r8, pc}
   1746c:	ldr	ip, [pc, #244]	; 17568 <__assert_fail@plt+0x49a0>
   17470:	push	{r4, r5, r6, r7, r8, r9, lr}
   17474:	add	ip, pc, ip
   17478:	ldr	lr, [pc, #236]	; 1756c <__assert_fail@plt+0x49a4>
   1747c:	sub	sp, sp, #12
   17480:	mov	r5, #0
   17484:	ldr	r7, [ip, lr]
   17488:	mov	r4, r0
   1748c:	mov	r8, r1
   17490:	ldr	r3, [r7]
   17494:	mov	r0, ip
   17498:	mov	r9, r2
   1749c:	str	r5, [sp]
   174a0:	str	r3, [sp, #4]
   174a4:	bl	12880 <__errno_location@plt>
   174a8:	cmp	r4, r5
   174ac:	str	r5, [r0]
   174b0:	beq	174c0 <__assert_fail@plt+0x48f8>
   174b4:	ldrsb	r3, [r4]
   174b8:	cmp	r3, r5
   174bc:	bne	174e0 <__assert_fail@plt+0x4918>
   174c0:	ldr	r1, [pc, #168]	; 17570 <__assert_fail@plt+0x49a8>
   174c4:	mov	r3, r4
   174c8:	add	r1, pc, r1
   174cc:	mov	r2, r8
   174d0:	ldr	r0, [r1]
   174d4:	ldr	r1, [pc, #152]	; 17574 <__assert_fail@plt+0x49ac>
   174d8:	add	r1, pc, r1
   174dc:	bl	12a3c <errx@plt>
   174e0:	mov	r6, r0
   174e4:	mov	r2, r9
   174e8:	mov	r3, r5
   174ec:	mov	r1, sp
   174f0:	mov	r0, r4
   174f4:	bl	125c8 <__strtoull_internal@plt>
   174f8:	ldr	r2, [r6]
   174fc:	cmp	r2, r5
   17500:	bne	1753c <__assert_fail@plt+0x4974>
   17504:	ldr	r3, [sp]
   17508:	cmp	r3, r4
   1750c:	beq	174c0 <__assert_fail@plt+0x48f8>
   17510:	cmp	r3, r5
   17514:	beq	17524 <__assert_fail@plt+0x495c>
   17518:	ldrsb	r3, [r3]
   1751c:	cmp	r3, r5
   17520:	bne	174c0 <__assert_fail@plt+0x48f8>
   17524:	ldr	r2, [sp, #4]
   17528:	ldr	r3, [r7]
   1752c:	cmp	r2, r3
   17530:	bne	17564 <__assert_fail@plt+0x499c>
   17534:	add	sp, sp, #12
   17538:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1753c:	ldr	r3, [pc, #52]	; 17578 <__assert_fail@plt+0x49b0>
   17540:	cmp	r2, #34	; 0x22
   17544:	add	r3, pc, r3
   17548:	ldr	r0, [r3]
   1754c:	bne	174c0 <__assert_fail@plt+0x48f8>
   17550:	ldr	r1, [pc, #36]	; 1757c <__assert_fail@plt+0x49b4>
   17554:	mov	r3, r4
   17558:	mov	r2, r8
   1755c:	add	r1, pc, r1
   17560:	bl	12694 <err@plt>
   17564:	bl	12634 <__stack_chk_fail@plt>
   17568:	strdeq	r4, [r1], -r8
   1756c:	andeq	r0, r0, r4, lsl #5
   17570:	andeq	r4, r1, r8, asr lr
   17574:	andeq	r4, r0, r8, lsl r4
   17578:	ldrdeq	r4, [r1], -ip
   1757c:	muleq	r0, r4, r3
   17580:	push	{r4, lr}
   17584:	mov	r5, r0
   17588:	mov	r4, r1
   1758c:	bl	12880 <__errno_location@plt>
   17590:	ldr	ip, [pc, #32]	; 175b8 <__assert_fail@plt+0x49f0>
   17594:	ldr	r1, [pc, #32]	; 175bc <__assert_fail@plt+0x49f4>
   17598:	add	ip, pc, ip
   1759c:	mov	lr, #34	; 0x22
   175a0:	mov	r3, r5
   175a4:	mov	r2, r4
   175a8:	add	r1, pc, r1
   175ac:	str	lr, [r0]
   175b0:	ldr	r0, [ip]
   175b4:	bl	12694 <err@plt>
   175b8:	andeq	r4, r1, r8, lsl #27
   175bc:	andeq	r4, r0, r8, asr #6
   175c0:	push	{r4, r5, r6, lr}
   175c4:	mov	r4, r0
   175c8:	mov	r5, r1
   175cc:	bl	1746c <__assert_fail@plt+0x48a4>
   175d0:	mov	r3, #0
   175d4:	mvn	r2, #0
   175d8:	cmp	r1, r3
   175dc:	cmpeq	r0, r2
   175e0:	popls	{r4, r5, r6, pc}
   175e4:	mov	r1, r5
   175e8:	mov	r0, r4
   175ec:	bl	17580 <__assert_fail@plt+0x49b8>
   175f0:	ldr	r3, [pc, #8]	; 17600 <__assert_fail@plt+0x4a38>
   175f4:	add	r3, pc, r3
   175f8:	str	r0, [r3]
   175fc:	bx	lr
   17600:	andeq	r4, r1, ip, lsr #26
   17604:	ldr	r3, [pc, #1648]	; 17c7c <__assert_fail@plt+0x50b4>
   17608:	ldr	ip, [pc, #1648]	; 17c80 <__assert_fail@plt+0x50b8>
   1760c:	add	r3, pc, r3
   17610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17614:	mov	r5, r1
   17618:	ldr	r1, [r3, ip]
   1761c:	sub	sp, sp, #52	; 0x34
   17620:	mov	ip, r1
   17624:	mov	r8, r0
   17628:	str	r1, [sp, #24]
   1762c:	mov	r0, #0
   17630:	mov	r1, #0
   17634:	ldr	r3, [ip]
   17638:	strd	r0, [r5]
   1763c:	mov	r9, r2
   17640:	str	r3, [sp, #44]	; 0x2c
   17644:	bl	12880 <__errno_location@plt>
   17648:	cmp	r8, #0
   1764c:	mov	r4, r0
   17650:	beq	17830 <__assert_fail@plt+0x4c68>
   17654:	ldrsb	fp, [r8]
   17658:	cmp	fp, #0
   1765c:	beq	17830 <__assert_fail@plt+0x4c68>
   17660:	bl	127e4 <__ctype_b_loc@plt>
   17664:	mov	r2, r8
   17668:	ldr	r1, [r0]
   1766c:	b	17674 <__assert_fail@plt+0x4aac>
   17670:	ldrsb	fp, [r2, #1]!
   17674:	uxtb	r3, fp
   17678:	lsl	r3, r3, #1
   1767c:	ldrh	ip, [r1, r3]
   17680:	ands	ip, ip, #8192	; 0x2000
   17684:	bne	17670 <__assert_fail@plt+0x4aa8>
   17688:	cmp	fp, #45	; 0x2d
   1768c:	beq	17830 <__assert_fail@plt+0x4c68>
   17690:	add	fp, sp, #40	; 0x28
   17694:	mov	r3, ip
   17698:	mov	r2, ip
   1769c:	str	ip, [r4]
   176a0:	mov	r1, fp
   176a4:	mov	r0, r8
   176a8:	str	ip, [sp, #40]	; 0x28
   176ac:	bl	125c8 <__strtoull_internal@plt>
   176b0:	ldr	sl, [sp, #40]	; 0x28
   176b4:	cmp	sl, r8
   176b8:	mov	r2, r0
   176bc:	mov	r3, r1
   176c0:	ldr	r0, [r4]
   176c4:	strd	r2, [sp, #16]
   176c8:	beq	179b0 <__assert_fail@plt+0x4de8>
   176cc:	cmp	r0, #0
   176d0:	bne	17858 <__assert_fail@plt+0x4c90>
   176d4:	cmp	sl, #0
   176d8:	beq	179e4 <__assert_fail@plt+0x4e1c>
   176dc:	ldrsb	r0, [sl]
   176e0:	cmp	r0, #0
   176e4:	beq	179d8 <__assert_fail@plt+0x4e10>
   176e8:	mov	r8, #0
   176ec:	mov	r2, #0
   176f0:	mov	r3, #0
   176f4:	str	r9, [sp, #32]
   176f8:	mov	r6, fp
   176fc:	mov	r9, sl
   17700:	mov	r7, r8
   17704:	mov	sl, r2
   17708:	mov	fp, r3
   1770c:	str	r5, [sp, #28]
   17710:	ldrsb	r2, [r9, #1]
   17714:	cmp	r2, #105	; 0x69
   17718:	beq	1789c <__assert_fail@plt+0x4cd4>
   1771c:	bic	r1, r2, #32
   17720:	cmp	r1, #66	; 0x42
   17724:	bne	179bc <__assert_fail@plt+0x4df4>
   17728:	ldrsb	r2, [r9, #2]
   1772c:	cmp	r2, #0
   17730:	beq	17ba0 <__assert_fail@plt+0x4fd8>
   17734:	bl	12a9c <localeconv@plt>
   17738:	cmp	r0, #0
   1773c:	beq	17830 <__assert_fail@plt+0x4c68>
   17740:	ldr	r2, [r0]
   17744:	cmp	r2, #0
   17748:	beq	17830 <__assert_fail@plt+0x4c68>
   1774c:	mov	r0, r2
   17750:	str	r2, [sp]
   17754:	bl	1282c <strlen@plt>
   17758:	orrs	r3, sl, fp
   1775c:	mov	r5, r0
   17760:	bne	17830 <__assert_fail@plt+0x4c68>
   17764:	ldrsb	r1, [r9]
   17768:	cmp	r1, #0
   1776c:	beq	17830 <__assert_fail@plt+0x4c68>
   17770:	ldr	r2, [sp]
   17774:	mov	r1, r9
   17778:	mov	r0, r2
   1777c:	mov	r2, r5
   17780:	bl	12b5c <strncmp@plt>
   17784:	cmp	r0, #0
   17788:	bne	17830 <__assert_fail@plt+0x4c68>
   1778c:	ldrsb	r2, [r9, r5]
   17790:	add	r5, r9, r5
   17794:	cmp	r2, #48	; 0x30
   17798:	bne	177b8 <__assert_fail@plt+0x4bf0>
   1779c:	add	r8, r8, #1
   177a0:	sub	r1, r8, r5
   177a4:	mov	r3, r5
   177a8:	add	r8, r3, r1
   177ac:	ldrsb	r2, [r3, #1]!
   177b0:	cmp	r2, #48	; 0x30
   177b4:	beq	177a8 <__assert_fail@plt+0x4be0>
   177b8:	mov	r3, #0
   177bc:	str	r7, [r4]
   177c0:	mov	r2, r3
   177c4:	mov	r1, r6
   177c8:	mov	r0, r5
   177cc:	str	r7, [sp, #40]	; 0x28
   177d0:	bl	125c8 <__strtoull_internal@plt>
   177d4:	ldr	r9, [sp, #40]	; 0x28
   177d8:	cmp	r9, r5
   177dc:	mov	sl, r0
   177e0:	mov	fp, r1
   177e4:	beq	179ac <__assert_fail@plt+0x4de4>
   177e8:	ldr	ip, [r4]
   177ec:	cmp	ip, #0
   177f0:	beq	17888 <__assert_fail@plt+0x4cc0>
   177f4:	subs	r3, r0, #1
   177f8:	str	r3, [sp, #8]
   177fc:	sbc	r3, r1, #0
   17800:	str	r3, [sp, #12]
   17804:	ldrd	r2, [sp, #8]
   17808:	mvn	r1, #0
   1780c:	mvn	r0, #2
   17810:	cmp	r3, r1
   17814:	cmpeq	r2, r0
   17818:	bhi	17bdc <__assert_fail@plt+0x5014>
   1781c:	cmp	r9, #0
   17820:	beq	17830 <__assert_fail@plt+0x4c68>
   17824:	ldrsb	r2, [r9]
   17828:	cmp	r2, #0
   1782c:	bne	17710 <__assert_fail@plt+0x4b48>
   17830:	mov	r3, #22
   17834:	mvn	r0, #21
   17838:	str	r3, [r4]
   1783c:	ldr	r3, [sp, #24]
   17840:	ldr	r2, [sp, #44]	; 0x2c
   17844:	ldr	r3, [r3]
   17848:	cmp	r2, r3
   1784c:	bne	17c78 <__assert_fail@plt+0x50b0>
   17850:	add	sp, sp, #52	; 0x34
   17854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17858:	subs	r6, r2, #1
   1785c:	sbc	r7, r3, #0
   17860:	mvn	r3, #0
   17864:	mvn	r2, #2
   17868:	cmp	r7, r3
   1786c:	cmpeq	r6, r2
   17870:	bls	176d4 <__assert_fail@plt+0x4b0c>
   17874:	rsb	r0, r0, #0
   17878:	cmp	r0, #0
   1787c:	bge	1783c <__assert_fail@plt+0x4c74>
   17880:	rsb	r3, r0, #0
   17884:	b	17838 <__assert_fail@plt+0x4c70>
   17888:	orrs	r3, sl, fp
   1788c:	bne	1781c <__assert_fail@plt+0x4c54>
   17890:	ldrsb	r2, [r9, #1]
   17894:	cmp	r2, #105	; 0x69
   17898:	bne	1771c <__assert_fail@plt+0x4b54>
   1789c:	ldrsb	r2, [r9, #2]
   178a0:	bic	r2, r2, #32
   178a4:	cmp	r2, #66	; 0x42
   178a8:	bne	17734 <__assert_fail@plt+0x4b6c>
   178ac:	ldrsb	r2, [r9, #3]
   178b0:	cmp	r2, #0
   178b4:	bne	17734 <__assert_fail@plt+0x4b6c>
   178b8:	strd	sl, [sp]
   178bc:	mov	sl, r9
   178c0:	ldr	r9, [sp, #32]
   178c4:	mov	r3, #1024	; 0x400
   178c8:	ldr	r5, [sp, #28]
   178cc:	str	r3, [sp, #28]
   178d0:	ldrsb	r7, [sl]
   178d4:	ldr	r6, [pc, #936]	; 17c84 <__assert_fail@plt+0x50bc>
   178d8:	add	r6, pc, r6
   178dc:	mov	r1, r7
   178e0:	mov	r0, r6
   178e4:	bl	12844 <strchr@plt>
   178e8:	cmp	r0, #0
   178ec:	beq	17bbc <__assert_fail@plt+0x4ff4>
   178f0:	sub	ip, r0, r6
   178f4:	add	fp, ip, #1
   178f8:	cmp	fp, #0
   178fc:	beq	179c8 <__assert_fail@plt+0x4e00>
   17900:	ldr	r3, [sp, #20]
   17904:	ldr	r6, [sp, #28]
   17908:	cmp	r3, #0
   1790c:	mov	r0, #0
   17910:	asr	r7, r6, #31
   17914:	mov	r1, #0
   17918:	bne	17c18 <__assert_fail@plt+0x5050>
   1791c:	orrs	r3, r0, r1
   17920:	bne	17a0c <__assert_fail@plt+0x4e44>
   17924:	str	fp, [sp, #32]
   17928:	sub	ip, ip, #1
   1792c:	str	r8, [sp, #36]	; 0x24
   17930:	mov	fp, r4
   17934:	ldrd	r0, [sp, #16]
   17938:	mov	lr, r5
   1793c:	mov	sl, r9
   17940:	b	17950 <__assert_fail@plt+0x4d88>
   17944:	orrs	r3, r4, r5
   17948:	sub	ip, ip, #1
   1794c:	bne	179f4 <__assert_fail@plt+0x4e2c>
   17950:	mul	r2, r0, r7
   17954:	cmn	ip, #1
   17958:	mla	r2, r6, r1, r2
   1795c:	umull	r0, r1, r0, r6
   17960:	add	r2, r2, r1
   17964:	mov	r1, r2
   17968:	beq	17b80 <__assert_fail@plt+0x4fb8>
   1796c:	cmp	r2, #0
   17970:	mov	r4, #0
   17974:	mov	r5, #0
   17978:	beq	17944 <__assert_fail@plt+0x4d7c>
   1797c:	umull	r2, r3, r6, r2
   17980:	umull	r8, r9, r0, r6
   17984:	strd	r2, [sp, #8]
   17988:	mov	r8, r9
   1798c:	ldr	r3, [sp, #12]
   17990:	adds	r8, r2, r8
   17994:	mov	r2, #0
   17998:	adc	r3, r3, r2
   1799c:	cmp	r3, r2
   179a0:	movne	r4, #1
   179a4:	movne	r5, #0
   179a8:	b	17944 <__assert_fail@plt+0x4d7c>
   179ac:	ldr	r0, [r4]
   179b0:	cmp	r0, #0
   179b4:	beq	17830 <__assert_fail@plt+0x4c68>
   179b8:	b	17874 <__assert_fail@plt+0x4cac>
   179bc:	cmp	r2, #0
   179c0:	bne	17734 <__assert_fail@plt+0x4b6c>
   179c4:	b	178b8 <__assert_fail@plt+0x4cf0>
   179c8:	cmp	r9, #0
   179cc:	movne	r0, fp
   179d0:	bne	17a18 <__assert_fail@plt+0x4e50>
   179d4:	mov	r0, r9
   179d8:	ldrd	r2, [sp, #16]
   179dc:	strd	r2, [r5]
   179e0:	b	1783c <__assert_fail@plt+0x4c74>
   179e4:	ldrd	r2, [sp, #16]
   179e8:	mov	r0, sl
   179ec:	strd	r2, [r5]
   179f0:	b	1783c <__assert_fail@plt+0x4c74>
   179f4:	mov	r4, fp
   179f8:	ldr	r8, [sp, #36]	; 0x24
   179fc:	ldr	fp, [sp, #32]
   17a00:	mov	r5, lr
   17a04:	mov	r9, sl
   17a08:	strd	r0, [sp, #16]
   17a0c:	mvn	r0, #33	; 0x21
   17a10:	cmp	r9, #0
   17a14:	beq	17a1c <__assert_fail@plt+0x4e54>
   17a18:	str	fp, [r9]
   17a1c:	ldrd	r2, [sp]
   17a20:	mov	r1, r2
   17a24:	orrs	r3, r1, r3
   17a28:	movne	r3, #1
   17a2c:	moveq	r3, #0
   17a30:	cmp	fp, #0
   17a34:	moveq	r3, #0
   17a38:	cmp	r3, #0
   17a3c:	beq	17b74 <__assert_fail@plt+0x4fac>
   17a40:	ldr	r3, [pc, #576]	; 17c88 <__assert_fail@plt+0x50c0>
   17a44:	ldr	r1, [pc, #576]	; 17c8c <__assert_fail@plt+0x50c4>
   17a48:	umull	ip, r3, r3, r8
   17a4c:	smull	ip, r1, r1, r8
   17a50:	lsr	r3, r3, #1
   17a54:	rsb	r1, r1, r8, asr #31
   17a58:	add	r3, r3, r3, lsl #1
   17a5c:	add	r1, r1, fp
   17a60:	subs	r3, r8, r3
   17a64:	sub	r6, r1, #1
   17a68:	bne	17be4 <__assert_fail@plt+0x501c>
   17a6c:	ldrd	r8, [sp]
   17a70:	adds	r3, r8, r8
   17a74:	adc	r2, r9, r9
   17a78:	adds	r3, r3, r8
   17a7c:	adc	r2, r2, r9
   17a80:	lsl	ip, r3, #5
   17a84:	lsl	lr, r2, #5
   17a88:	orr	lr, lr, r3, lsr #27
   17a8c:	adds	r3, r3, ip
   17a90:	adc	r2, r2, lr
   17a94:	adds	r3, r8, r3
   17a98:	str	r3, [sp]
   17a9c:	ldr	r3, [sp, #4]
   17aa0:	adc	r3, r3, r2
   17aa4:	str	r3, [sp, #4]
   17aa8:	cmp	r6, #0
   17aac:	blt	17830 <__assert_fail@plt+0x4c68>
   17ab0:	beq	17b58 <__assert_fail@plt+0x4f90>
   17ab4:	ldr	r3, [sp, #4]
   17ab8:	ldr	r8, [sp, #28]
   17abc:	cmp	r3, #0
   17ac0:	mov	r6, #0
   17ac4:	asr	r9, r8, #31
   17ac8:	mov	r7, #0
   17acc:	bne	17c4c <__assert_fail@plt+0x5084>
   17ad0:	orrs	r3, r6, r7
   17ad4:	bne	17b58 <__assert_fail@plt+0x4f90>
   17ad8:	sub	r1, r1, #3
   17adc:	ldrd	r2, [sp]
   17ae0:	mov	lr, r4
   17ae4:	str	r5, [sp, #8]
   17ae8:	b	17af8 <__assert_fail@plt+0x4f30>
   17aec:	orrs	ip, r6, r7
   17af0:	sub	r1, r1, #1
   17af4:	bne	17b4c <__assert_fail@plt+0x4f84>
   17af8:	mul	ip, r2, r9
   17afc:	cmn	r1, #1
   17b00:	mla	ip, r8, r3, ip
   17b04:	umull	r2, r3, r2, r8
   17b08:	add	ip, ip, r3
   17b0c:	mov	r3, ip
   17b10:	beq	17b4c <__assert_fail@plt+0x4f84>
   17b14:	cmp	ip, #0
   17b18:	mov	r6, #0
   17b1c:	mov	r7, #0
   17b20:	beq	17aec <__assert_fail@plt+0x4f24>
   17b24:	umull	sl, fp, r2, r8
   17b28:	umull	r4, r5, r8, ip
   17b2c:	mov	ip, fp
   17b30:	adds	ip, r4, ip
   17b34:	mov	ip, #0
   17b38:	adc	ip, r5, ip
   17b3c:	cmp	ip, #0
   17b40:	movne	r6, #1
   17b44:	movne	r7, #0
   17b48:	b	17aec <__assert_fail@plt+0x4f24>
   17b4c:	ldr	r5, [sp, #8]
   17b50:	mov	r4, lr
   17b54:	strd	r2, [sp]
   17b58:	ldrd	r2, [sp]
   17b5c:	ldr	r1, [sp, #16]
   17b60:	adds	r1, r1, r2
   17b64:	str	r1, [sp, #16]
   17b68:	ldr	r1, [sp, #20]
   17b6c:	adc	r3, r1, r3
   17b70:	str	r3, [sp, #20]
   17b74:	ldrd	r2, [sp, #16]
   17b78:	strd	r2, [r5]
   17b7c:	b	17878 <__assert_fail@plt+0x4cb0>
   17b80:	mov	r4, fp
   17b84:	strd	r0, [sp, #16]
   17b88:	ldr	r8, [sp, #36]	; 0x24
   17b8c:	ldr	fp, [sp, #32]
   17b90:	mov	r5, lr
   17b94:	mov	r9, sl
   17b98:	mov	r0, #0
   17b9c:	b	17a10 <__assert_fail@plt+0x4e48>
   17ba0:	mov	r3, #1000	; 0x3e8
   17ba4:	strd	sl, [sp]
   17ba8:	ldr	r5, [sp, #28]
   17bac:	mov	sl, r9
   17bb0:	str	r3, [sp, #28]
   17bb4:	ldr	r9, [sp, #32]
   17bb8:	b	178d0 <__assert_fail@plt+0x4d08>
   17bbc:	ldr	r6, [pc, #204]	; 17c90 <__assert_fail@plt+0x50c8>
   17bc0:	mov	r1, r7
   17bc4:	add	r6, pc, r6
   17bc8:	mov	r0, r6
   17bcc:	bl	12844 <strchr@plt>
   17bd0:	cmp	r0, #0
   17bd4:	bne	178f0 <__assert_fail@plt+0x4d28>
   17bd8:	b	17830 <__assert_fail@plt+0x4c68>
   17bdc:	mov	r0, ip
   17be0:	b	17874 <__assert_fail@plt+0x4cac>
   17be4:	cmp	r3, #1
   17be8:	bne	17aa8 <__assert_fail@plt+0x4ee0>
   17bec:	ldrd	r8, [sp]
   17bf0:	lsl	r2, r9, #2
   17bf4:	lsl	r3, r8, #2
   17bf8:	adds	r3, r3, r8
   17bfc:	orr	r2, r2, r8, lsr #30
   17c00:	adc	r2, r2, r9
   17c04:	adds	r3, r3, r3
   17c08:	str	r3, [sp]
   17c0c:	adc	r3, r2, r2
   17c10:	str	r3, [sp, #4]
   17c14:	b	17aa8 <__assert_fail@plt+0x4ee0>
   17c18:	ldr	lr, [sp, #28]
   17c1c:	ldr	r3, [sp, #16]
   17c20:	ldr	sl, [sp, #20]
   17c24:	umull	r2, r3, r3, lr
   17c28:	str	r3, [sp, #8]
   17c2c:	mov	r3, #0
   17c30:	str	r3, [sp, #12]
   17c34:	ldrd	r2, [sp, #8]
   17c38:	umlal	r2, r3, sl, lr
   17c3c:	cmp	r3, #0
   17c40:	movne	r0, #1
   17c44:	movne	r1, #0
   17c48:	b	1791c <__assert_fail@plt+0x4d54>
   17c4c:	ldr	r3, [sp]
   17c50:	ldr	ip, [sp, #28]
   17c54:	ldr	lr, [sp, #4]
   17c58:	umull	sl, fp, r3, ip
   17c5c:	mov	r3, #0
   17c60:	mov	r2, fp
   17c64:	umlal	r2, r3, lr, ip
   17c68:	cmp	r3, #0
   17c6c:	movne	r6, #1
   17c70:	movne	r7, #0
   17c74:	b	17ad0 <__assert_fail@plt+0x4f08>
   17c78:	bl	12634 <__stack_chk_fail@plt>
   17c7c:	andeq	r4, r1, r0, ror #14
   17c80:	andeq	r0, r0, r4, lsl #5
   17c84:	andeq	r4, r0, r4, lsr #32
   17c88:	bge	feac273c <optarg@@GLIBC_2.4+0xfea963f4>
   17c8c:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   17c90:	andeq	r3, r0, r4, asr #26
   17c94:	mov	r2, #0
   17c98:	b	17604 <__assert_fail@plt+0x4a3c>
   17c9c:	push	{r4, r5, r6, lr}
   17ca0:	subs	r5, r0, #0
   17ca4:	mov	r6, r1
   17ca8:	beq	17d14 <__assert_fail@plt+0x514c>
   17cac:	ldrsb	r4, [r5]
   17cb0:	cmp	r4, #0
   17cb4:	beq	17d28 <__assert_fail@plt+0x5160>
   17cb8:	bl	127e4 <__ctype_b_loc@plt>
   17cbc:	mov	r3, r5
   17cc0:	ldr	r0, [r0]
   17cc4:	b	17cdc <__assert_fail@plt+0x5114>
   17cc8:	adds	r3, r3, #1
   17ccc:	beq	17d14 <__assert_fail@plt+0x514c>
   17cd0:	ldrsb	r4, [r3]
   17cd4:	cmp	r4, #0
   17cd8:	beq	17cf0 <__assert_fail@plt+0x5128>
   17cdc:	uxtb	r4, r4
   17ce0:	lsl	r4, r4, #1
   17ce4:	ldrh	r2, [r0, r4]
   17ce8:	tst	r2, #2048	; 0x800
   17cec:	bne	17cc8 <__assert_fail@plt+0x5100>
   17cf0:	cmp	r6, #0
   17cf4:	strne	r3, [r6]
   17cf8:	cmp	r5, r3
   17cfc:	bcs	17d20 <__assert_fail@plt+0x5158>
   17d00:	ldrsb	r3, [r3]
   17d04:	cmp	r3, #0
   17d08:	bne	17d20 <__assert_fail@plt+0x5158>
   17d0c:	mov	r0, #1
   17d10:	pop	{r4, r5, r6, pc}
   17d14:	cmp	r6, #0
   17d18:	movne	r3, #0
   17d1c:	strne	r3, [r6]
   17d20:	mov	r0, #0
   17d24:	pop	{r4, r5, r6, pc}
   17d28:	cmp	r1, #0
   17d2c:	strne	r5, [r1]
   17d30:	b	17d20 <__assert_fail@plt+0x5158>
   17d34:	push	{r4, r5, r6, lr}
   17d38:	subs	r5, r0, #0
   17d3c:	mov	r6, r1
   17d40:	beq	17dac <__assert_fail@plt+0x51e4>
   17d44:	ldrsb	r4, [r5]
   17d48:	cmp	r4, #0
   17d4c:	beq	17dc0 <__assert_fail@plt+0x51f8>
   17d50:	bl	127e4 <__ctype_b_loc@plt>
   17d54:	mov	r3, r5
   17d58:	ldr	r0, [r0]
   17d5c:	b	17d74 <__assert_fail@plt+0x51ac>
   17d60:	adds	r3, r3, #1
   17d64:	beq	17dac <__assert_fail@plt+0x51e4>
   17d68:	ldrsb	r4, [r3]
   17d6c:	cmp	r4, #0
   17d70:	beq	17d88 <__assert_fail@plt+0x51c0>
   17d74:	uxtb	r4, r4
   17d78:	lsl	r4, r4, #1
   17d7c:	ldrh	r2, [r0, r4]
   17d80:	tst	r2, #4096	; 0x1000
   17d84:	bne	17d60 <__assert_fail@plt+0x5198>
   17d88:	cmp	r6, #0
   17d8c:	strne	r3, [r6]
   17d90:	cmp	r5, r3
   17d94:	bcs	17db8 <__assert_fail@plt+0x51f0>
   17d98:	ldrsb	r3, [r3]
   17d9c:	cmp	r3, #0
   17da0:	bne	17db8 <__assert_fail@plt+0x51f0>
   17da4:	mov	r0, #1
   17da8:	pop	{r4, r5, r6, pc}
   17dac:	cmp	r6, #0
   17db0:	movne	r3, #0
   17db4:	strne	r3, [r6]
   17db8:	mov	r0, #0
   17dbc:	pop	{r4, r5, r6, pc}
   17dc0:	cmp	r1, #0
   17dc4:	strne	r5, [r1]
   17dc8:	b	17db8 <__assert_fail@plt+0x51f0>
   17dcc:	push	{r1, r2, r3}
   17dd0:	ldr	r3, [pc, #188]	; 17e94 <__assert_fail@plt+0x52cc>
   17dd4:	ldr	r2, [pc, #188]	; 17e98 <__assert_fail@plt+0x52d0>
   17dd8:	add	r3, pc, r3
   17ddc:	push	{r4, r5, r6, r7, r8, lr}
   17de0:	sub	sp, sp, #12
   17de4:	ldr	r7, [r3, r2]
   17de8:	ldr	r8, [sp, #36]	; 0x24
   17dec:	mov	r6, r0
   17df0:	ldr	r3, [r7]
   17df4:	add	r4, sp, #48	; 0x30
   17df8:	str	r3, [sp, #4]
   17dfc:	b	17e18 <__assert_fail@plt+0x5250>
   17e00:	mov	r1, r5
   17e04:	mov	r0, r6
   17e08:	bl	124e4 <strcmp@plt>
   17e0c:	add	r4, r4, #8
   17e10:	cmp	r0, #0
   17e14:	beq	17e50 <__assert_fail@plt+0x5288>
   17e18:	ldr	r1, [r4, #-8]
   17e1c:	sub	r3, r4, #4
   17e20:	cmp	r1, #0
   17e24:	str	r3, [sp]
   17e28:	beq	17e70 <__assert_fail@plt+0x52a8>
   17e2c:	ldr	r5, [r4, #-4]
   17e30:	str	r4, [sp]
   17e34:	cmp	r5, #0
   17e38:	beq	17e70 <__assert_fail@plt+0x52a8>
   17e3c:	mov	r0, r6
   17e40:	bl	124e4 <strcmp@plt>
   17e44:	cmp	r0, #0
   17e48:	bne	17e00 <__assert_fail@plt+0x5238>
   17e4c:	mov	r0, #1
   17e50:	ldr	r2, [sp, #4]
   17e54:	ldr	r3, [r7]
   17e58:	cmp	r2, r3
   17e5c:	bne	17e90 <__assert_fail@plt+0x52c8>
   17e60:	add	sp, sp, #12
   17e64:	pop	{r4, r5, r6, r7, r8, lr}
   17e68:	add	sp, sp, #12
   17e6c:	bx	lr
   17e70:	ldr	r1, [pc, #36]	; 17e9c <__assert_fail@plt+0x52d4>
   17e74:	mov	r3, r6
   17e78:	add	r1, pc, r1
   17e7c:	mov	r2, r8
   17e80:	ldr	r0, [r1]
   17e84:	ldr	r1, [pc, #20]	; 17ea0 <__assert_fail@plt+0x52d8>
   17e88:	add	r1, pc, r1
   17e8c:	bl	12a3c <errx@plt>
   17e90:	bl	12634 <__stack_chk_fail@plt>
   17e94:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   17e98:	andeq	r0, r0, r4, lsl #5
   17e9c:	andeq	r4, r1, r8, lsr #9
   17ea0:	andeq	r3, r0, r8, ror #20
   17ea4:	cmp	r1, #0
   17ea8:	beq	17ef4 <__assert_fail@plt+0x532c>
   17eac:	ldrsb	r3, [r0]
   17eb0:	cmp	r3, #0
   17eb4:	beq	17ef4 <__assert_fail@plt+0x532c>
   17eb8:	sxtb	r2, r2
   17ebc:	cmp	r3, r2
   17ec0:	bxeq	lr
   17ec4:	add	r1, r0, r1
   17ec8:	add	r3, r0, #1
   17ecc:	b	17ee8 <__assert_fail@plt+0x5320>
   17ed0:	ldrsb	ip, [r3]
   17ed4:	add	r3, r3, #1
   17ed8:	cmp	ip, #0
   17edc:	beq	17ef4 <__assert_fail@plt+0x532c>
   17ee0:	cmp	ip, r2
   17ee4:	bxeq	lr
   17ee8:	cmp	r3, r1
   17eec:	mov	r0, r3
   17ef0:	bne	17ed0 <__assert_fail@plt+0x5308>
   17ef4:	mov	r0, #0
   17ef8:	bx	lr
   17efc:	push	{r4, r5, r6, lr}
   17f00:	mov	r2, #10
   17f04:	mov	r4, r0
   17f08:	mov	r5, r1
   17f0c:	bl	175c0 <__assert_fail@plt+0x49f8>
   17f10:	cmp	r0, #65536	; 0x10000
   17f14:	bcs	17f20 <__assert_fail@plt+0x5358>
   17f18:	uxth	r0, r0
   17f1c:	pop	{r4, r5, r6, pc}
   17f20:	mov	r1, r5
   17f24:	mov	r0, r4
   17f28:	bl	17580 <__assert_fail@plt+0x49b8>
   17f2c:	push	{r4, r5, r6, lr}
   17f30:	mov	r2, #16
   17f34:	mov	r4, r0
   17f38:	mov	r5, r1
   17f3c:	bl	175c0 <__assert_fail@plt+0x49f8>
   17f40:	cmp	r0, #65536	; 0x10000
   17f44:	bcs	17f50 <__assert_fail@plt+0x5388>
   17f48:	uxth	r0, r0
   17f4c:	pop	{r4, r5, r6, pc}
   17f50:	mov	r1, r5
   17f54:	mov	r0, r4
   17f58:	bl	17580 <__assert_fail@plt+0x49b8>
   17f5c:	mov	r2, #10
   17f60:	b	175c0 <__assert_fail@plt+0x49f8>
   17f64:	mov	r2, #16
   17f68:	b	175c0 <__assert_fail@plt+0x49f8>
   17f6c:	ldr	r2, [pc, #236]	; 18060 <__assert_fail@plt+0x5498>
   17f70:	ldr	ip, [pc, #236]	; 18064 <__assert_fail@plt+0x549c>
   17f74:	add	r2, pc, r2
   17f78:	push	{r4, r5, r6, r7, r8, lr}
   17f7c:	sub	sp, sp, #8
   17f80:	ldr	r7, [r2, ip]
   17f84:	mov	r5, #0
   17f88:	mov	r4, r0
   17f8c:	ldr	r3, [r7]
   17f90:	mov	r8, r1
   17f94:	str	r5, [sp]
   17f98:	str	r3, [sp, #4]
   17f9c:	bl	12880 <__errno_location@plt>
   17fa0:	cmp	r4, r5
   17fa4:	str	r5, [r0]
   17fa8:	beq	17fb8 <__assert_fail@plt+0x53f0>
   17fac:	ldrsb	r3, [r4]
   17fb0:	cmp	r3, r5
   17fb4:	bne	17fd8 <__assert_fail@plt+0x5410>
   17fb8:	ldr	r1, [pc, #168]	; 18068 <__assert_fail@plt+0x54a0>
   17fbc:	mov	r3, r4
   17fc0:	add	r1, pc, r1
   17fc4:	mov	r2, r8
   17fc8:	ldr	r0, [r1]
   17fcc:	ldr	r1, [pc, #152]	; 1806c <__assert_fail@plt+0x54a4>
   17fd0:	add	r1, pc, r1
   17fd4:	bl	12a3c <errx@plt>
   17fd8:	mov	r6, r0
   17fdc:	mov	r2, #10
   17fe0:	mov	r3, r5
   17fe4:	mov	r1, sp
   17fe8:	mov	r0, r4
   17fec:	bl	12acc <__strtoll_internal@plt>
   17ff0:	ldr	r2, [r6]
   17ff4:	cmp	r2, r5
   17ff8:	bne	18034 <__assert_fail@plt+0x546c>
   17ffc:	ldr	r3, [sp]
   18000:	cmp	r3, r4
   18004:	beq	17fb8 <__assert_fail@plt+0x53f0>
   18008:	cmp	r3, r5
   1800c:	beq	1801c <__assert_fail@plt+0x5454>
   18010:	ldrsb	r3, [r3]
   18014:	cmp	r3, r5
   18018:	bne	17fb8 <__assert_fail@plt+0x53f0>
   1801c:	ldr	r2, [sp, #4]
   18020:	ldr	r3, [r7]
   18024:	cmp	r2, r3
   18028:	bne	1805c <__assert_fail@plt+0x5494>
   1802c:	add	sp, sp, #8
   18030:	pop	{r4, r5, r6, r7, r8, pc}
   18034:	ldr	r3, [pc, #52]	; 18070 <__assert_fail@plt+0x54a8>
   18038:	cmp	r2, #34	; 0x22
   1803c:	add	r3, pc, r3
   18040:	ldr	r0, [r3]
   18044:	bne	17fb8 <__assert_fail@plt+0x53f0>
   18048:	ldr	r1, [pc, #36]	; 18074 <__assert_fail@plt+0x54ac>
   1804c:	mov	r3, r4
   18050:	mov	r2, r8
   18054:	add	r1, pc, r1
   18058:	bl	12694 <err@plt>
   1805c:	bl	12634 <__stack_chk_fail@plt>
   18060:	strdeq	r3, [r1], -r8
   18064:	andeq	r0, r0, r4, lsl #5
   18068:	andeq	r4, r1, r0, ror #6
   1806c:	andeq	r3, r0, r0, lsr #18
   18070:	andeq	r4, r1, r4, ror #5
   18074:	muleq	r0, ip, r8
   18078:	push	{r4, r5, r6, r7, r8, lr}
   1807c:	mov	r7, r0
   18080:	mov	r6, r1
   18084:	bl	17f6c <__assert_fail@plt+0x53a4>
   18088:	mov	r3, #0
   1808c:	mvn	r2, #0
   18090:	adds	r4, r0, #-2147483648	; 0x80000000
   18094:	adc	r5, r1, #0
   18098:	cmp	r5, r3
   1809c:	cmpeq	r4, r2
   180a0:	popls	{r4, r5, r6, r7, r8, pc}
   180a4:	bl	12880 <__errno_location@plt>
   180a8:	ldr	ip, [pc, #32]	; 180d0 <__assert_fail@plt+0x5508>
   180ac:	ldr	r1, [pc, #32]	; 180d4 <__assert_fail@plt+0x550c>
   180b0:	add	ip, pc, ip
   180b4:	mov	lr, #34	; 0x22
   180b8:	mov	r3, r7
   180bc:	mov	r2, r6
   180c0:	add	r1, pc, r1
   180c4:	str	lr, [r0]
   180c8:	ldr	r0, [ip]
   180cc:	bl	12694 <err@plt>
   180d0:	andeq	r4, r1, r0, ror r2
   180d4:	andeq	r3, r0, r0, lsr r8
   180d8:	push	{r4, r5, r6, lr}
   180dc:	mov	r5, r0
   180e0:	mov	r4, r1
   180e4:	bl	18078 <__assert_fail@plt+0x54b0>
   180e8:	add	r3, r0, #32768	; 0x8000
   180ec:	cmp	r3, #65536	; 0x10000
   180f0:	bcs	180fc <__assert_fail@plt+0x5534>
   180f4:	sxth	r0, r0
   180f8:	pop	{r4, r5, r6, pc}
   180fc:	bl	12880 <__errno_location@plt>
   18100:	ldr	ip, [pc, #32]	; 18128 <__assert_fail@plt+0x5560>
   18104:	ldr	r1, [pc, #32]	; 1812c <__assert_fail@plt+0x5564>
   18108:	add	ip, pc, ip
   1810c:	mov	lr, #34	; 0x22
   18110:	mov	r3, r5
   18114:	mov	r2, r4
   18118:	add	r1, pc, r1
   1811c:	str	lr, [r0]
   18120:	ldr	r0, [ip]
   18124:	bl	12694 <err@plt>
   18128:	andeq	r4, r1, r8, lsl r2
   1812c:	ldrdeq	r3, [r0], -r8
   18130:	mov	r2, #10
   18134:	b	1746c <__assert_fail@plt+0x48a4>
   18138:	mov	r2, #16
   1813c:	b	1746c <__assert_fail@plt+0x48a4>
   18140:	ldr	r2, [pc, #228]	; 1822c <__assert_fail@plt+0x5664>
   18144:	ldr	r3, [pc, #228]	; 18230 <__assert_fail@plt+0x5668>
   18148:	add	r2, pc, r2
   1814c:	push	{r4, r5, r6, r7, r8, lr}
   18150:	sub	sp, sp, #8
   18154:	ldr	r7, [r2, r3]
   18158:	mov	r5, #0
   1815c:	mov	r4, r0
   18160:	ldr	r3, [r7]
   18164:	mov	r8, r1
   18168:	str	r5, [sp]
   1816c:	str	r3, [sp, #4]
   18170:	bl	12880 <__errno_location@plt>
   18174:	cmp	r4, r5
   18178:	str	r5, [r0]
   1817c:	beq	1818c <__assert_fail@plt+0x55c4>
   18180:	ldrsb	r3, [r4]
   18184:	cmp	r3, r5
   18188:	bne	181ac <__assert_fail@plt+0x55e4>
   1818c:	ldr	r1, [pc, #160]	; 18234 <__assert_fail@plt+0x566c>
   18190:	mov	r3, r4
   18194:	add	r1, pc, r1
   18198:	mov	r2, r8
   1819c:	ldr	r0, [r1]
   181a0:	ldr	r1, [pc, #144]	; 18238 <__assert_fail@plt+0x5670>
   181a4:	add	r1, pc, r1
   181a8:	bl	12a3c <errx@plt>
   181ac:	mov	r6, r0
   181b0:	mov	r1, sp
   181b4:	mov	r0, r4
   181b8:	bl	12964 <strtod@plt>
   181bc:	ldr	r2, [r6]
   181c0:	cmp	r2, r5
   181c4:	bne	18200 <__assert_fail@plt+0x5638>
   181c8:	ldr	r3, [sp]
   181cc:	cmp	r3, r4
   181d0:	beq	1818c <__assert_fail@plt+0x55c4>
   181d4:	cmp	r3, r5
   181d8:	beq	181e8 <__assert_fail@plt+0x5620>
   181dc:	ldrsb	r3, [r3]
   181e0:	cmp	r3, r5
   181e4:	bne	1818c <__assert_fail@plt+0x55c4>
   181e8:	ldr	r2, [sp, #4]
   181ec:	ldr	r3, [r7]
   181f0:	cmp	r2, r3
   181f4:	bne	18228 <__assert_fail@plt+0x5660>
   181f8:	add	sp, sp, #8
   181fc:	pop	{r4, r5, r6, r7, r8, pc}
   18200:	ldr	r3, [pc, #52]	; 1823c <__assert_fail@plt+0x5674>
   18204:	cmp	r2, #34	; 0x22
   18208:	add	r3, pc, r3
   1820c:	ldr	r0, [r3]
   18210:	bne	1818c <__assert_fail@plt+0x55c4>
   18214:	ldr	r1, [pc, #36]	; 18240 <__assert_fail@plt+0x5678>
   18218:	mov	r3, r4
   1821c:	mov	r2, r8
   18220:	add	r1, pc, r1
   18224:	bl	12694 <err@plt>
   18228:	bl	12634 <__stack_chk_fail@plt>
   1822c:	andeq	r3, r1, r4, lsr #24
   18230:	andeq	r0, r0, r4, lsl #5
   18234:	andeq	r4, r1, ip, lsl #3
   18238:	andeq	r3, r0, ip, asr #14
   1823c:	andeq	r4, r1, r8, lsl r1
   18240:	ldrdeq	r3, [r0], -r0
   18244:	ldr	r2, [pc, #232]	; 18334 <__assert_fail@plt+0x576c>
   18248:	ldr	r3, [pc, #232]	; 18338 <__assert_fail@plt+0x5770>
   1824c:	add	r2, pc, r2
   18250:	push	{r4, r5, r6, r7, r8, lr}
   18254:	sub	sp, sp, #8
   18258:	ldr	r7, [r2, r3]
   1825c:	mov	r5, #0
   18260:	mov	r4, r0
   18264:	ldr	r3, [r7]
   18268:	mov	r8, r1
   1826c:	str	r5, [sp]
   18270:	str	r3, [sp, #4]
   18274:	bl	12880 <__errno_location@plt>
   18278:	cmp	r4, r5
   1827c:	str	r5, [r0]
   18280:	beq	18290 <__assert_fail@plt+0x56c8>
   18284:	ldrsb	r3, [r4]
   18288:	cmp	r3, r5
   1828c:	bne	182b0 <__assert_fail@plt+0x56e8>
   18290:	ldr	r1, [pc, #164]	; 1833c <__assert_fail@plt+0x5774>
   18294:	mov	r3, r4
   18298:	add	r1, pc, r1
   1829c:	mov	r2, r8
   182a0:	ldr	r0, [r1]
   182a4:	ldr	r1, [pc, #148]	; 18340 <__assert_fail@plt+0x5778>
   182a8:	add	r1, pc, r1
   182ac:	bl	12a3c <errx@plt>
   182b0:	mov	r6, r0
   182b4:	mov	r2, #10
   182b8:	mov	r1, sp
   182bc:	mov	r0, r4
   182c0:	bl	124f0 <strtol@plt>
   182c4:	ldr	r2, [r6]
   182c8:	cmp	r2, r5
   182cc:	bne	18308 <__assert_fail@plt+0x5740>
   182d0:	ldr	r3, [sp]
   182d4:	cmp	r3, r4
   182d8:	beq	18290 <__assert_fail@plt+0x56c8>
   182dc:	cmp	r3, r5
   182e0:	beq	182f0 <__assert_fail@plt+0x5728>
   182e4:	ldrsb	r3, [r3]
   182e8:	cmp	r3, r5
   182ec:	bne	18290 <__assert_fail@plt+0x56c8>
   182f0:	ldr	r2, [sp, #4]
   182f4:	ldr	r3, [r7]
   182f8:	cmp	r2, r3
   182fc:	bne	18330 <__assert_fail@plt+0x5768>
   18300:	add	sp, sp, #8
   18304:	pop	{r4, r5, r6, r7, r8, pc}
   18308:	ldr	r3, [pc, #52]	; 18344 <__assert_fail@plt+0x577c>
   1830c:	cmp	r2, #34	; 0x22
   18310:	add	r3, pc, r3
   18314:	ldr	r0, [r3]
   18318:	bne	18290 <__assert_fail@plt+0x56c8>
   1831c:	ldr	r1, [pc, #36]	; 18348 <__assert_fail@plt+0x5780>
   18320:	mov	r3, r4
   18324:	mov	r2, r8
   18328:	add	r1, pc, r1
   1832c:	bl	12694 <err@plt>
   18330:	bl	12634 <__stack_chk_fail@plt>
   18334:	andeq	r3, r1, r0, lsr #22
   18338:	andeq	r0, r0, r4, lsl #5
   1833c:	andeq	r4, r1, r8, lsl #1
   18340:	andeq	r3, r0, r8, asr #12
   18344:	andeq	r4, r1, r0, lsl r0
   18348:	andeq	r3, r0, r8, asr #11
   1834c:	ldr	r2, [pc, #232]	; 1843c <__assert_fail@plt+0x5874>
   18350:	ldr	r3, [pc, #232]	; 18440 <__assert_fail@plt+0x5878>
   18354:	add	r2, pc, r2
   18358:	push	{r4, r5, r6, r7, r8, lr}
   1835c:	sub	sp, sp, #8
   18360:	ldr	r7, [r2, r3]
   18364:	mov	r5, #0
   18368:	mov	r4, r0
   1836c:	ldr	r3, [r7]
   18370:	mov	r8, r1
   18374:	str	r5, [sp]
   18378:	str	r3, [sp, #4]
   1837c:	bl	12880 <__errno_location@plt>
   18380:	cmp	r4, r5
   18384:	str	r5, [r0]
   18388:	beq	18398 <__assert_fail@plt+0x57d0>
   1838c:	ldrsb	r3, [r4]
   18390:	cmp	r3, r5
   18394:	bne	183b8 <__assert_fail@plt+0x57f0>
   18398:	ldr	r1, [pc, #164]	; 18444 <__assert_fail@plt+0x587c>
   1839c:	mov	r3, r4
   183a0:	add	r1, pc, r1
   183a4:	mov	r2, r8
   183a8:	ldr	r0, [r1]
   183ac:	ldr	r1, [pc, #148]	; 18448 <__assert_fail@plt+0x5880>
   183b0:	add	r1, pc, r1
   183b4:	bl	12a3c <errx@plt>
   183b8:	mov	r6, r0
   183bc:	mov	r2, #10
   183c0:	mov	r1, sp
   183c4:	mov	r0, r4
   183c8:	bl	12820 <strtoul@plt>
   183cc:	ldr	r2, [r6]
   183d0:	cmp	r2, r5
   183d4:	bne	18410 <__assert_fail@plt+0x5848>
   183d8:	ldr	r3, [sp]
   183dc:	cmp	r3, r4
   183e0:	beq	18398 <__assert_fail@plt+0x57d0>
   183e4:	cmp	r3, r5
   183e8:	beq	183f8 <__assert_fail@plt+0x5830>
   183ec:	ldrsb	r3, [r3]
   183f0:	cmp	r3, r5
   183f4:	bne	18398 <__assert_fail@plt+0x57d0>
   183f8:	ldr	r2, [sp, #4]
   183fc:	ldr	r3, [r7]
   18400:	cmp	r2, r3
   18404:	bne	18438 <__assert_fail@plt+0x5870>
   18408:	add	sp, sp, #8
   1840c:	pop	{r4, r5, r6, r7, r8, pc}
   18410:	ldr	r3, [pc, #52]	; 1844c <__assert_fail@plt+0x5884>
   18414:	cmp	r2, #34	; 0x22
   18418:	add	r3, pc, r3
   1841c:	ldr	r0, [r3]
   18420:	bne	18398 <__assert_fail@plt+0x57d0>
   18424:	ldr	r1, [pc, #36]	; 18450 <__assert_fail@plt+0x5888>
   18428:	mov	r3, r4
   1842c:	mov	r2, r8
   18430:	add	r1, pc, r1
   18434:	bl	12694 <err@plt>
   18438:	bl	12634 <__stack_chk_fail@plt>
   1843c:	andeq	r3, r1, r8, lsl sl
   18440:	andeq	r0, r0, r4, lsl #5
   18444:	andeq	r3, r1, r0, lsl #31
   18448:	andeq	r3, r0, r0, asr #10
   1844c:	andeq	r3, r1, r8, lsl #30
   18450:	andeq	r3, r0, r0, asr #9
   18454:	ldr	r3, [pc, #140]	; 184e8 <__assert_fail@plt+0x5920>
   18458:	ldr	r2, [pc, #140]	; 184ec <__assert_fail@plt+0x5924>
   1845c:	add	r3, pc, r3
   18460:	push	{r4, r5, r6, lr}
   18464:	sub	sp, sp, #16
   18468:	ldr	r4, [r3, r2]
   1846c:	mov	r5, r1
   18470:	mov	r1, sp
   18474:	ldr	r3, [r4]
   18478:	mov	r6, r0
   1847c:	str	r3, [sp, #12]
   18480:	bl	17c94 <__assert_fail@plt+0x50cc>
   18484:	cmp	r0, #0
   18488:	beq	184c8 <__assert_fail@plt+0x5900>
   1848c:	bl	12880 <__errno_location@plt>
   18490:	ldr	r3, [pc, #88]	; 184f0 <__assert_fail@plt+0x5928>
   18494:	mov	r2, r5
   18498:	ldr	r1, [pc, r3]
   1849c:	ldr	r3, [r0]
   184a0:	mov	r0, r1
   184a4:	cmp	r3, #0
   184a8:	mov	r3, r6
   184ac:	beq	184bc <__assert_fail@plt+0x58f4>
   184b0:	ldr	r1, [pc, #60]	; 184f4 <__assert_fail@plt+0x592c>
   184b4:	add	r1, pc, r1
   184b8:	bl	12694 <err@plt>
   184bc:	ldr	r1, [pc, #52]	; 184f8 <__assert_fail@plt+0x5930>
   184c0:	add	r1, pc, r1
   184c4:	bl	12a3c <errx@plt>
   184c8:	ldr	r2, [sp, #12]
   184cc:	ldr	r3, [r4]
   184d0:	ldrd	r0, [sp]
   184d4:	cmp	r2, r3
   184d8:	bne	184e4 <__assert_fail@plt+0x591c>
   184dc:	add	sp, sp, #16
   184e0:	pop	{r4, r5, r6, pc}
   184e4:	bl	12634 <__stack_chk_fail@plt>
   184e8:	andeq	r3, r1, r0, lsl r9
   184ec:	andeq	r0, r0, r4, lsl #5
   184f0:	andeq	r3, r1, r8, lsl #29
   184f4:	andeq	r3, r0, ip, lsr r4
   184f8:	andeq	r3, r0, r0, lsr r4
   184fc:	push	{r4, lr}
   18500:	mov	r4, r1
   18504:	mov	r1, r2
   18508:	bl	18140 <__assert_fail@plt+0x5578>
   1850c:	vldr	d6, [pc, #28]	; 18530 <__assert_fail@plt+0x5968>
   18510:	vcvt.s32.f64	s15, d0
   18514:	vcvt.f64.s32	d5, s15
   18518:	vstr	s15, [r4]
   1851c:	vsub.f64	d0, d0, d5
   18520:	vmul.f64	d0, d0, d6
   18524:	vcvt.s32.f64	s0, d0
   18528:	vstr	s0, [r4, #4]
   1852c:	pop	{r4, pc}
   18530:	andeq	r0, r0, r0
   18534:	smlawbmi	lr, r0, r4, r8
   18538:	and	r2, r0, #61440	; 0xf000
   1853c:	cmp	r2, #16384	; 0x4000
   18540:	moveq	r2, r1
   18544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18548:	moveq	sl, #100	; 0x64
   1854c:	mov	r3, r0
   18550:	add	r9, r1, #1
   18554:	add	r8, r1, #2
   18558:	add	r7, r1, #3
   1855c:	add	r6, r1, #4
   18560:	add	r5, r1, #5
   18564:	add	r4, r1, #6
   18568:	add	lr, r1, #7
   1856c:	add	ip, r1, #8
   18570:	add	r0, r1, #9
   18574:	strbeq	sl, [r2], #10
   18578:	beq	1861c <__assert_fail@plt+0x5a54>
   1857c:	cmp	r2, #40960	; 0xa000
   18580:	moveq	r2, r1
   18584:	moveq	sl, #108	; 0x6c
   18588:	strbeq	sl, [r2], #10
   1858c:	beq	1861c <__assert_fail@plt+0x5a54>
   18590:	cmp	r2, #8192	; 0x2000
   18594:	moveq	r2, r1
   18598:	moveq	sl, #99	; 0x63
   1859c:	strbeq	sl, [r2], #10
   185a0:	beq	1861c <__assert_fail@plt+0x5a54>
   185a4:	cmp	r2, #24576	; 0x6000
   185a8:	moveq	r2, r1
   185ac:	moveq	sl, #98	; 0x62
   185b0:	strbeq	sl, [r2], #10
   185b4:	beq	1861c <__assert_fail@plt+0x5a54>
   185b8:	cmp	r2, #49152	; 0xc000
   185bc:	moveq	r2, r1
   185c0:	moveq	sl, #115	; 0x73
   185c4:	strbeq	sl, [r2], #10
   185c8:	beq	1861c <__assert_fail@plt+0x5a54>
   185cc:	cmp	r2, #4096	; 0x1000
   185d0:	moveq	r2, r1
   185d4:	moveq	sl, #112	; 0x70
   185d8:	strbeq	sl, [r2], #10
   185dc:	beq	1861c <__assert_fail@plt+0x5a54>
   185e0:	cmp	r2, #32768	; 0x8000
   185e4:	moveq	r2, r1
   185e8:	moveq	sl, #45	; 0x2d
   185ec:	strbeq	sl, [r2], #10
   185f0:	beq	1861c <__assert_fail@plt+0x5a54>
   185f4:	mov	r2, r0
   185f8:	mov	r0, ip
   185fc:	mov	ip, lr
   18600:	mov	lr, r4
   18604:	mov	r4, r5
   18608:	mov	r5, r6
   1860c:	mov	r6, r7
   18610:	mov	r7, r8
   18614:	mov	r8, r9
   18618:	mov	r9, r1
   1861c:	tst	r3, #256	; 0x100
   18620:	movne	fp, #114	; 0x72
   18624:	moveq	fp, #45	; 0x2d
   18628:	tst	r3, #128	; 0x80
   1862c:	movne	sl, #119	; 0x77
   18630:	moveq	sl, #45	; 0x2d
   18634:	tst	r3, #2048	; 0x800
   18638:	strb	fp, [r9]
   1863c:	and	r9, r3, #64	; 0x40
   18640:	strb	sl, [r8]
   18644:	beq	186e0 <__assert_fail@plt+0x5b18>
   18648:	cmp	r9, #0
   1864c:	movne	r9, #115	; 0x73
   18650:	moveq	r9, #83	; 0x53
   18654:	tst	r3, #32
   18658:	movne	r8, #114	; 0x72
   1865c:	moveq	r8, #45	; 0x2d
   18660:	tst	r3, #16
   18664:	strb	r9, [r7]
   18668:	movne	r7, #119	; 0x77
   1866c:	moveq	r7, #45	; 0x2d
   18670:	tst	r3, #1024	; 0x400
   18674:	strb	r8, [r6]
   18678:	and	r6, r3, #8
   1867c:	strb	r7, [r5]
   18680:	beq	186f0 <__assert_fail@plt+0x5b28>
   18684:	cmp	r6, #0
   18688:	movne	r6, #115	; 0x73
   1868c:	moveq	r6, #83	; 0x53
   18690:	tst	r3, #4
   18694:	movne	r5, #114	; 0x72
   18698:	moveq	r5, #45	; 0x2d
   1869c:	tst	r3, #2
   186a0:	strb	r6, [r4]
   186a4:	movne	r4, #119	; 0x77
   186a8:	moveq	r4, #45	; 0x2d
   186ac:	tst	r3, #512	; 0x200
   186b0:	strb	r5, [lr]
   186b4:	and	r3, r3, #1
   186b8:	strb	r4, [ip]
   186bc:	beq	18700 <__assert_fail@plt+0x5b38>
   186c0:	cmp	r3, #0
   186c4:	movne	ip, #116	; 0x74
   186c8:	moveq	ip, #84	; 0x54
   186cc:	mov	r3, #0
   186d0:	strb	ip, [r0]
   186d4:	mov	r0, r1
   186d8:	strb	r3, [r2]
   186dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186e0:	cmp	r9, #0
   186e4:	movne	r9, #120	; 0x78
   186e8:	moveq	r9, #45	; 0x2d
   186ec:	b	18654 <__assert_fail@plt+0x5a8c>
   186f0:	cmp	r6, #0
   186f4:	movne	r6, #120	; 0x78
   186f8:	moveq	r6, #45	; 0x2d
   186fc:	b	18690 <__assert_fail@plt+0x5ac8>
   18700:	cmp	r3, #0
   18704:	movne	ip, #120	; 0x78
   18708:	moveq	ip, #45	; 0x2d
   1870c:	b	186cc <__assert_fail@plt+0x5b04>
   18710:	ldr	r1, [pc, #680]	; 189c0 <__assert_fail@plt+0x5df8>
   18714:	ldr	ip, [pc, #680]	; 189c4 <__assert_fail@plt+0x5dfc>
   18718:	add	r1, pc, r1
   1871c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18720:	sub	sp, sp, #108	; 0x6c
   18724:	ldr	r8, [r1, ip]
   18728:	tst	r0, #2
   1872c:	strd	r2, [sp, #32]
   18730:	ldr	r1, [r8]
   18734:	addeq	r9, sp, #60	; 0x3c
   18738:	str	r1, [sp, #100]	; 0x64
   1873c:	ldrd	r2, [sp, #32]
   18740:	movne	r1, #32
   18744:	strbne	r1, [sp, #60]	; 0x3c
   18748:	addne	ip, sp, #61	; 0x3d
   1874c:	addne	r9, sp, #60	; 0x3c
   18750:	moveq	ip, r9
   18754:	mov	r1, #10
   18758:	mov	sl, #1
   1875c:	sub	lr, r1, #32
   18760:	lsl	r4, sl, r1
   18764:	lsl	r5, sl, lr
   18768:	rsb	lr, r1, #32
   1876c:	orr	r5, r5, sl, lsr lr
   18770:	cmp	r3, r5
   18774:	cmpeq	r2, r4
   18778:	bcc	18934 <__assert_fail@plt+0x5d6c>
   1877c:	add	r1, r1, #10
   18780:	cmp	r1, #70	; 0x46
   18784:	bne	1875c <__assert_fail@plt+0x5b94>
   18788:	mov	lr, ip
   1878c:	strd	r2, [sp, #32]
   18790:	mov	r4, r2
   18794:	tst	r0, #1
   18798:	mov	r2, #69	; 0x45
   1879c:	bic	r5, r3, #-268435456	; 0xf0000000
   187a0:	lsr	sl, r3, #28
   187a4:	strb	r2, [lr], #1
   187a8:	bne	1891c <__assert_fail@plt+0x5d54>
   187ac:	orrs	r3, r4, r5
   187b0:	mov	r3, #0
   187b4:	strb	r3, [lr]
   187b8:	beq	1895c <__assert_fail@plt+0x5d94>
   187bc:	sub	r2, r1, #20
   187c0:	rsb	r0, r2, #32
   187c4:	lsr	r3, r4, r2
   187c8:	sub	r1, r1, #52	; 0x34
   187cc:	orr	r3, r3, r5, lsl r0
   187d0:	orr	r3, r3, r5, lsr r1
   187d4:	lsr	r2, r5, r2
   187d8:	adds	r6, r3, #50	; 0x32
   187dc:	adc	r7, r2, #0
   187e0:	mov	r3, #0
   187e4:	mov	r2, #100	; 0x64
   187e8:	mov	r0, r6
   187ec:	mov	r1, r7
   187f0:	bl	196a0 <__assert_fail@plt+0x6ad8>
   187f4:	cmp	r1, #0
   187f8:	cmpeq	r0, #10
   187fc:	mov	r2, r0
   18800:	mov	r3, r1
   18804:	addeq	sl, sl, #1
   18808:	beq	1895c <__assert_fail@plt+0x5d94>
   1880c:	cmp	r7, #0
   18810:	cmpeq	r6, #99	; 0x63
   18814:	strd	r2, [sp, #32]
   18818:	bls	1895c <__assert_fail@plt+0x5d94>
   1881c:	bl	12a9c <localeconv@plt>
   18820:	ldrd	r2, [sp, #32]
   18824:	cmp	r0, #0
   18828:	beq	189a4 <__assert_fail@plt+0x5ddc>
   1882c:	ldr	r0, [r0]
   18830:	cmp	r0, #0
   18834:	beq	189b0 <__assert_fail@plt+0x5de8>
   18838:	ldrsb	r1, [r0]
   1883c:	cmp	r1, #0
   18840:	ldreq	r0, [pc, #384]	; 189c8 <__assert_fail@plt+0x5e00>
   18844:	addeq	r0, pc, r0
   18848:	ldr	r1, [pc, #380]	; 189cc <__assert_fail@plt+0x5e04>
   1884c:	strd	r2, [sp, #16]
   18850:	add	r1, pc, r1
   18854:	add	r4, sp, #68	; 0x44
   18858:	mov	r3, #32
   1885c:	str	r0, [sp, #8]
   18860:	str	r1, [sp]
   18864:	str	r9, [sp, #24]
   18868:	str	sl, [sp, #4]
   1886c:	mov	r0, r4
   18870:	mov	r1, r3
   18874:	mov	r2, #1
   18878:	bl	12ba4 <__snprintf_chk@plt>
   1887c:	b	18984 <__assert_fail@plt+0x5dbc>
   18880:	ldr	r4, [pc, #328]	; 189d0 <__assert_fail@plt+0x5e08>
   18884:	mvn	sl, #0
   18888:	ldr	fp, [pc, #324]	; 189d4 <__assert_fail@plt+0x5e0c>
   1888c:	umull	r2, r3, lr, r4
   18890:	sub	r4, r1, #42	; 0x2a
   18894:	strd	r2, [sp, #40]	; 0x28
   18898:	ldr	r3, [sp, #44]	; 0x2c
   1889c:	lsl	r2, sl, lr
   188a0:	lsr	r3, r3, #3
   188a4:	str	r3, [sp, #52]	; 0x34
   188a8:	ldr	r3, [sp, #32]
   188ac:	str	r4, [sp, #48]	; 0x30
   188b0:	orr	r4, r2, sl, lsl r4
   188b4:	lsr	r2, r3, lr
   188b8:	mov	r3, r2
   188bc:	ldr	r2, [sp, #52]	; 0x34
   188c0:	add	fp, pc, fp
   188c4:	str	r4, [sp, #40]	; 0x28
   188c8:	ldrsb	fp, [fp, r2]
   188cc:	mov	r2, r3
   188d0:	ldr	r3, [sp, #36]	; 0x24
   188d4:	rsb	r5, lr, #32
   188d8:	ldr	r4, [sp, #40]	; 0x28
   188dc:	orr	r2, r2, r3, lsl r5
   188e0:	orr	r4, r4, sl, lsr r5
   188e4:	ldr	r3, [sp, #32]
   188e8:	str	r4, [sp, #40]	; 0x28
   188ec:	cmp	r0, #0
   188f0:	bic	r4, r3, sl, lsl lr
   188f4:	ldr	r0, [sp, #36]	; 0x24
   188f8:	ldr	r3, [sp, #48]	; 0x30
   188fc:	mov	lr, ip
   18900:	orr	sl, r2, r0, lsr r3
   18904:	ldr	r3, [sp, #40]	; 0x28
   18908:	strb	fp, [lr], #1
   1890c:	bic	r5, r0, r3
   18910:	beq	187ac <__assert_fail@plt+0x5be4>
   18914:	cmp	fp, #66	; 0x42
   18918:	beq	187ac <__assert_fail@plt+0x5be4>
   1891c:	mov	r3, #105	; 0x69
   18920:	strb	r3, [ip, #1]
   18924:	mov	r3, #66	; 0x42
   18928:	add	lr, ip, #3
   1892c:	strb	r3, [ip, #2]
   18930:	b	187ac <__assert_fail@plt+0x5be4>
   18934:	subs	lr, r1, #10
   18938:	strd	r2, [sp, #32]
   1893c:	and	r0, r0, #1
   18940:	bne	18880 <__assert_fail@plt+0x5cb8>
   18944:	ldr	sl, [sp, #32]
   18948:	cmp	r0, #0
   1894c:	movne	r0, lr
   18950:	mov	r3, #66	; 0x42
   18954:	strb	r0, [ip, #1]
   18958:	strb	r3, [ip]
   1895c:	ldr	r2, [pc, #116]	; 189d8 <__assert_fail@plt+0x5e10>
   18960:	add	r4, sp, #68	; 0x44
   18964:	add	r2, pc, r2
   18968:	mov	r3, #32
   1896c:	stm	sp, {r2, sl}
   18970:	str	r9, [sp, #8]
   18974:	mov	r0, r4
   18978:	mov	r1, r3
   1897c:	mov	r2, #1
   18980:	bl	12ba4 <__snprintf_chk@plt>
   18984:	mov	r0, r4
   18988:	bl	12628 <strdup@plt>
   1898c:	ldr	r2, [sp, #100]	; 0x64
   18990:	ldr	r3, [r8]
   18994:	cmp	r2, r3
   18998:	bne	189bc <__assert_fail@plt+0x5df4>
   1899c:	add	sp, sp, #108	; 0x6c
   189a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189a4:	ldr	r0, [pc, #48]	; 189dc <__assert_fail@plt+0x5e14>
   189a8:	add	r0, pc, r0
   189ac:	b	18848 <__assert_fail@plt+0x5c80>
   189b0:	ldr	r0, [pc, #40]	; 189e0 <__assert_fail@plt+0x5e18>
   189b4:	add	r0, pc, r0
   189b8:	b	18848 <__assert_fail@plt+0x5c80>
   189bc:	bl	12634 <__stack_chk_fail@plt>
   189c0:	andeq	r3, r1, r4, asr r6
   189c4:	andeq	r0, r0, r4, lsl #5
   189c8:	ldrdeq	r3, [r0], -r0
   189cc:	ldrdeq	r3, [r0], -r0
   189d0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   189d4:	andeq	r3, r0, r8, asr r0
   189d8:	andeq	r2, r0, r8, asr #31
   189dc:	andeq	r2, r0, ip, ror #30
   189e0:	andeq	r2, r0, r0, ror #30
   189e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   189e8:	subs	r4, r0, #0
   189ec:	beq	18abc <__assert_fail@plt+0x5ef4>
   189f0:	ldrsb	lr, [r4]
   189f4:	cmp	lr, #0
   189f8:	beq	18abc <__assert_fail@plt+0x5ef4>
   189fc:	cmp	r1, #0
   18a00:	clz	ip, r2
   18a04:	lsr	ip, ip, #5
   18a08:	moveq	r0, #1
   18a0c:	movne	r0, ip
   18a10:	cmp	r3, #0
   18a14:	moveq	r0, #1
   18a18:	cmp	r0, #0
   18a1c:	bne	18abc <__assert_fail@plt+0x5ef4>
   18a20:	mov	r8, r3
   18a24:	mov	r7, r2
   18a28:	mov	r9, r1
   18a2c:	mov	r5, r0
   18a30:	b	18a8c <__assert_fail@plt+0x5ec4>
   18a34:	cmp	r3, #0
   18a38:	bne	18a78 <__assert_fail@plt+0x5eb0>
   18a3c:	cmn	r4, #1
   18a40:	add	r6, r4, #1
   18a44:	beq	18ac4 <__assert_fail@plt+0x5efc>
   18a48:	cmp	r0, r6
   18a4c:	bcs	18abc <__assert_fail@plt+0x5ef4>
   18a50:	sub	r1, r6, r0
   18a54:	blx	r8
   18a58:	cmn	r0, #1
   18a5c:	beq	18abc <__assert_fail@plt+0x5ef4>
   18a60:	str	r0, [r9, r5, lsl #2]
   18a64:	ldrsb	r3, [r6]
   18a68:	add	r5, r5, #1
   18a6c:	cmp	r3, #0
   18a70:	beq	18ac4 <__assert_fail@plt+0x5efc>
   18a74:	mov	r0, #0
   18a78:	cmn	r4, #1
   18a7c:	beq	18ac4 <__assert_fail@plt+0x5efc>
   18a80:	ldrsb	lr, [r4, #1]!
   18a84:	cmp	lr, #0
   18a88:	beq	18ac4 <__assert_fail@plt+0x5efc>
   18a8c:	cmp	r7, r5
   18a90:	mov	r6, r4
   18a94:	bls	18acc <__assert_fail@plt+0x5f04>
   18a98:	cmp	r0, #0
   18a9c:	moveq	r0, r4
   18aa0:	cmp	lr, #44	; 0x2c
   18aa4:	ldrsb	r3, [r4, #1]
   18aa8:	bne	18a34 <__assert_fail@plt+0x5e6c>
   18aac:	cmp	r3, #0
   18ab0:	beq	18a3c <__assert_fail@plt+0x5e74>
   18ab4:	cmp	r0, r6
   18ab8:	bcc	18a50 <__assert_fail@plt+0x5e88>
   18abc:	mvn	r0, #0
   18ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ac4:	mov	r0, r5
   18ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18acc:	mvn	r0, #1
   18ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ad4:	cmp	r0, #0
   18ad8:	beq	18b44 <__assert_fail@plt+0x5f7c>
   18adc:	push	{r4, lr}
   18ae0:	mov	r4, r3
   18ae4:	cmp	r4, #0
   18ae8:	ldrsb	ip, [r0]
   18aec:	clz	r3, ip
   18af0:	lsr	r3, r3, #5
   18af4:	moveq	r3, #1
   18af8:	cmp	r3, #0
   18afc:	bne	18b3c <__assert_fail@plt+0x5f74>
   18b00:	ldr	lr, [r4]
   18b04:	cmp	lr, r2
   18b08:	bhi	18b3c <__assert_fail@plt+0x5f74>
   18b0c:	cmp	ip, #43	; 0x2b
   18b10:	strne	r3, [r4]
   18b14:	addeq	r0, r0, #1
   18b18:	ldr	r3, [sp, #8]
   18b1c:	addeq	r1, r1, lr, lsl #2
   18b20:	subeq	r2, r2, lr
   18b24:	bl	189e4 <__assert_fail@plt+0x5e1c>
   18b28:	cmp	r0, #0
   18b2c:	ldrgt	r3, [r4]
   18b30:	addgt	r3, r3, r0
   18b34:	strgt	r3, [r4]
   18b38:	pop	{r4, pc}
   18b3c:	mvn	r0, #0
   18b40:	pop	{r4, pc}
   18b44:	mvn	r0, #0
   18b48:	bx	lr
   18b4c:	cmp	r2, #0
   18b50:	clz	r3, r1
   18b54:	lsr	r3, r3, #5
   18b58:	moveq	r3, #1
   18b5c:	cmp	r0, #0
   18b60:	moveq	r3, #1
   18b64:	cmp	r3, #0
   18b68:	bne	18c34 <__assert_fail@plt+0x606c>
   18b6c:	push	{r4, r5, r6, r7, r8, lr}
   18b70:	mov	r6, r2
   18b74:	mov	r2, r3
   18b78:	ldrsb	r3, [r0]
   18b7c:	mov	r8, r1
   18b80:	mov	r4, r0
   18b84:	mov	r7, #1
   18b88:	cmp	r3, #0
   18b8c:	beq	18bfc <__assert_fail@plt+0x6034>
   18b90:	cmp	r2, #0
   18b94:	moveq	r2, r4
   18b98:	cmp	r3, #44	; 0x2c
   18b9c:	mov	r5, r4
   18ba0:	ldrsb	r3, [r4, #1]!
   18ba4:	beq	18c04 <__assert_fail@plt+0x603c>
   18ba8:	cmp	r3, #0
   18bac:	bne	18c24 <__assert_fail@plt+0x605c>
   18bb0:	mov	r5, r4
   18bb4:	cmp	r2, r5
   18bb8:	sub	r1, r5, r2
   18bbc:	mov	r0, r2
   18bc0:	bcs	18c1c <__assert_fail@plt+0x6054>
   18bc4:	blx	r6
   18bc8:	mov	r2, r4
   18bcc:	cmp	r0, #0
   18bd0:	and	r1, r0, #7
   18bd4:	poplt	{r4, r5, r6, r7, r8, pc}
   18bd8:	ldrb	r3, [r8, r0, asr #3]
   18bdc:	orr	r3, r3, r7, lsl r1
   18be0:	strb	r3, [r8, r0, asr #3]
   18be4:	ldrsb	r3, [r5]
   18be8:	cmp	r3, #0
   18bec:	beq	18bfc <__assert_fail@plt+0x6034>
   18bf0:	ldrsb	r3, [r4]
   18bf4:	cmp	r3, #0
   18bf8:	bne	18b98 <__assert_fail@plt+0x5fd0>
   18bfc:	mov	r0, #0
   18c00:	pop	{r4, r5, r6, r7, r8, pc}
   18c04:	cmp	r3, #0
   18c08:	moveq	r5, r4
   18c0c:	cmp	r2, r5
   18c10:	sub	r1, r5, r2
   18c14:	mov	r0, r2
   18c18:	bcc	18bc4 <__assert_fail@plt+0x5ffc>
   18c1c:	mvn	r0, #0
   18c20:	pop	{r4, r5, r6, r7, r8, pc}
   18c24:	adds	r4, r5, #1
   18c28:	bne	18b88 <__assert_fail@plt+0x5fc0>
   18c2c:	mov	r0, #0
   18c30:	pop	{r4, r5, r6, r7, r8, pc}
   18c34:	mvn	r0, #21
   18c38:	bx	lr
   18c3c:	cmp	r2, #0
   18c40:	clz	r3, r1
   18c44:	lsr	r3, r3, #5
   18c48:	moveq	r3, #1
   18c4c:	cmp	r0, #0
   18c50:	moveq	r3, #1
   18c54:	cmp	r3, #0
   18c58:	bne	18d1c <__assert_fail@plt+0x6154>
   18c5c:	push	{r4, r5, r6, r7, r8, lr}
   18c60:	mov	r6, r2
   18c64:	mov	r2, r3
   18c68:	ldrsb	r3, [r0]
   18c6c:	mov	r7, r1
   18c70:	mov	r4, r0
   18c74:	cmp	r3, #0
   18c78:	beq	18ce4 <__assert_fail@plt+0x611c>
   18c7c:	cmp	r2, #0
   18c80:	moveq	r2, r4
   18c84:	cmp	r3, #44	; 0x2c
   18c88:	mov	r5, r4
   18c8c:	ldrsb	r3, [r4, #1]!
   18c90:	beq	18cec <__assert_fail@plt+0x6124>
   18c94:	cmp	r3, #0
   18c98:	bne	18d0c <__assert_fail@plt+0x6144>
   18c9c:	mov	r5, r4
   18ca0:	cmp	r2, r5
   18ca4:	sub	r1, r5, r2
   18ca8:	mov	r0, r2
   18cac:	bcs	18d04 <__assert_fail@plt+0x613c>
   18cb0:	blx	r6
   18cb4:	mov	r2, r4
   18cb8:	cmp	r0, #0
   18cbc:	poplt	{r4, r5, r6, r7, r8, pc}
   18cc0:	ldr	r3, [r7]
   18cc4:	orr	r3, r3, r0
   18cc8:	str	r3, [r7]
   18ccc:	ldrsb	r3, [r5]
   18cd0:	cmp	r3, #0
   18cd4:	beq	18ce4 <__assert_fail@plt+0x611c>
   18cd8:	ldrsb	r3, [r4]
   18cdc:	cmp	r3, #0
   18ce0:	bne	18c84 <__assert_fail@plt+0x60bc>
   18ce4:	mov	r0, #0
   18ce8:	pop	{r4, r5, r6, r7, r8, pc}
   18cec:	cmp	r3, #0
   18cf0:	moveq	r5, r4
   18cf4:	cmp	r2, r5
   18cf8:	sub	r1, r5, r2
   18cfc:	mov	r0, r2
   18d00:	bcc	18cb0 <__assert_fail@plt+0x60e8>
   18d04:	mvn	r0, #0
   18d08:	pop	{r4, r5, r6, r7, r8, pc}
   18d0c:	adds	r4, r5, #1
   18d10:	bne	18c74 <__assert_fail@plt+0x60ac>
   18d14:	mov	r0, #0
   18d18:	pop	{r4, r5, r6, r7, r8, pc}
   18d1c:	mvn	r0, #21
   18d20:	bx	lr
   18d24:	ldr	ip, [pc, #396]	; 18eb8 <__assert_fail@plt+0x62f0>
   18d28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d2c:	add	ip, pc, ip
   18d30:	ldr	lr, [pc, #388]	; 18ebc <__assert_fail@plt+0x62f4>
   18d34:	sub	sp, sp, #8
   18d38:	mov	r9, r3
   18d3c:	ldr	r5, [ip, lr]
   18d40:	mov	sl, #0
   18d44:	subs	r4, r0, #0
   18d48:	ldr	r3, [r5]
   18d4c:	mov	r7, r1
   18d50:	str	sl, [sp]
   18d54:	mov	r1, ip
   18d58:	str	r3, [sp, #4]
   18d5c:	beq	18dd0 <__assert_fail@plt+0x6208>
   18d60:	str	r9, [r7]
   18d64:	str	r9, [r2]
   18d68:	mov	r6, r2
   18d6c:	bl	12880 <__errno_location@plt>
   18d70:	str	sl, [r0]
   18d74:	ldrsb	r3, [r4]
   18d78:	mov	r8, r0
   18d7c:	cmp	r3, #58	; 0x3a
   18d80:	beq	18dec <__assert_fail@plt+0x6224>
   18d84:	mov	sl, sp
   18d88:	mov	r1, sl
   18d8c:	mov	r2, #10
   18d90:	mov	r0, r4
   18d94:	bl	124f0 <strtol@plt>
   18d98:	str	r0, [r7]
   18d9c:	str	r0, [r6]
   18da0:	ldr	r0, [r8]
   18da4:	cmp	r0, #0
   18da8:	bne	18e3c <__assert_fail@plt+0x6274>
   18dac:	ldr	r2, [sp]
   18db0:	cmp	r2, #0
   18db4:	cmpne	r2, r4
   18db8:	beq	18e3c <__assert_fail@plt+0x6274>
   18dbc:	ldrsb	r3, [r2]
   18dc0:	cmp	r3, #58	; 0x3a
   18dc4:	beq	18e44 <__assert_fail@plt+0x627c>
   18dc8:	cmp	r3, #45	; 0x2d
   18dcc:	beq	18e54 <__assert_fail@plt+0x628c>
   18dd0:	mov	r0, #0
   18dd4:	ldr	r2, [sp, #4]
   18dd8:	ldr	r3, [r5]
   18ddc:	cmp	r2, r3
   18de0:	bne	18eb4 <__assert_fail@plt+0x62ec>
   18de4:	add	sp, sp, #8
   18de8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18dec:	add	r4, r4, #1
   18df0:	mov	r0, r4
   18df4:	mov	r2, #10
   18df8:	mov	r1, sp
   18dfc:	bl	124f0 <strtol@plt>
   18e00:	str	r0, [r6]
   18e04:	ldr	r3, [r8]
   18e08:	cmp	r3, #0
   18e0c:	bne	18e3c <__assert_fail@plt+0x6274>
   18e10:	ldr	r3, [sp]
   18e14:	cmp	r3, #0
   18e18:	beq	18e3c <__assert_fail@plt+0x6274>
   18e1c:	ldrsb	r2, [r3]
   18e20:	sub	r3, r3, r4
   18e24:	clz	r3, r3
   18e28:	cmp	r2, #0
   18e2c:	lsr	r3, r3, #5
   18e30:	movne	r3, #1
   18e34:	cmp	r3, #0
   18e38:	beq	18dd0 <__assert_fail@plt+0x6208>
   18e3c:	mvn	r0, #0
   18e40:	b	18dd4 <__assert_fail@plt+0x620c>
   18e44:	ldrsb	r3, [r2, #1]
   18e48:	cmp	r3, #0
   18e4c:	streq	r9, [r6]
   18e50:	beq	18dd4 <__assert_fail@plt+0x620c>
   18e54:	mov	r3, #0
   18e58:	add	r4, r2, #1
   18e5c:	str	r3, [r8]
   18e60:	mov	r1, sl
   18e64:	mov	r0, r4
   18e68:	mov	r2, #10
   18e6c:	str	r3, [sp]
   18e70:	bl	124f0 <strtol@plt>
   18e74:	str	r0, [r6]
   18e78:	ldr	r3, [r8]
   18e7c:	cmp	r3, #0
   18e80:	bne	18e3c <__assert_fail@plt+0x6274>
   18e84:	ldr	r2, [sp]
   18e88:	cmp	r2, #0
   18e8c:	beq	18e3c <__assert_fail@plt+0x6274>
   18e90:	ldrsb	r3, [r2]
   18e94:	sub	r2, r2, r4
   18e98:	clz	r2, r2
   18e9c:	cmp	r3, #0
   18ea0:	lsr	r2, r2, #5
   18ea4:	movne	r2, #1
   18ea8:	cmp	r2, #0
   18eac:	beq	18dd0 <__assert_fail@plt+0x6208>
   18eb0:	b	18e3c <__assert_fail@plt+0x6274>
   18eb4:	bl	12634 <__stack_chk_fail@plt>
   18eb8:	andeq	r3, r1, r0, asr #32
   18ebc:	andeq	r0, r0, r4, lsl #5
   18ec0:	ldr	r3, [pc, #244]	; 18fbc <__assert_fail@plt+0x63f4>
   18ec4:	ldr	r2, [pc, #244]	; 18fc0 <__assert_fail@plt+0x63f8>
   18ec8:	add	r3, pc, r3
   18ecc:	push	{r4, r5, r6, r7, r8, r9, lr}
   18ed0:	sub	sp, sp, #20
   18ed4:	ldr	r9, [r3, r2]
   18ed8:	cmp	r0, #0
   18edc:	cmpne	r1, #0
   18ee0:	ldr	r3, [r9]
   18ee4:	str	r3, [sp, #12]
   18ee8:	beq	18fb0 <__assert_fail@plt+0x63e8>
   18eec:	mov	r4, r1
   18ef0:	add	r8, sp, #4
   18ef4:	add	r7, sp, #8
   18ef8:	b	18f38 <__assert_fail@plt+0x6370>
   18efc:	cmp	r4, r3
   18f00:	bne	18fb0 <__assert_fail@plt+0x63e8>
   18f04:	mov	r2, r4
   18f08:	mov	r1, r6
   18f0c:	mov	r0, r5
   18f10:	bl	12b5c <strncmp@plt>
   18f14:	cmp	r0, #0
   18f18:	bne	18fb0 <__assert_fail@plt+0x63e8>
   18f1c:	adds	r0, r5, r4
   18f20:	moveq	r3, #0
   18f24:	movne	r3, #1
   18f28:	adds	r4, r6, r4
   18f2c:	moveq	r3, #0
   18f30:	cmp	r3, #0
   18f34:	beq	18fb0 <__assert_fail@plt+0x63e8>
   18f38:	mov	r1, r8
   18f3c:	bl	17340 <__assert_fail@plt+0x4778>
   18f40:	mov	r1, r7
   18f44:	mov	r5, r0
   18f48:	mov	r0, r4
   18f4c:	bl	17340 <__assert_fail@plt+0x4778>
   18f50:	ldr	r4, [sp, #4]
   18f54:	ldr	r3, [sp, #8]
   18f58:	mov	r6, r0
   18f5c:	adds	r0, r4, r3
   18f60:	beq	18f94 <__assert_fail@plt+0x63cc>
   18f64:	cmp	r0, #1
   18f68:	bne	18efc <__assert_fail@plt+0x6334>
   18f6c:	cmp	r5, #0
   18f70:	beq	18f80 <__assert_fail@plt+0x63b8>
   18f74:	ldrsb	r2, [r5]
   18f78:	cmp	r2, #47	; 0x2f
   18f7c:	beq	18f98 <__assert_fail@plt+0x63d0>
   18f80:	cmp	r6, #0
   18f84:	beq	18efc <__assert_fail@plt+0x6334>
   18f88:	ldrsb	r2, [r6]
   18f8c:	cmp	r2, #47	; 0x2f
   18f90:	bne	18efc <__assert_fail@plt+0x6334>
   18f94:	mov	r0, #1
   18f98:	ldr	r2, [sp, #12]
   18f9c:	ldr	r3, [r9]
   18fa0:	cmp	r2, r3
   18fa4:	bne	18fb8 <__assert_fail@plt+0x63f0>
   18fa8:	add	sp, sp, #20
   18fac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18fb0:	mov	r0, #0
   18fb4:	b	18f98 <__assert_fail@plt+0x63d0>
   18fb8:	bl	12634 <__stack_chk_fail@plt>
   18fbc:	andeq	r2, r1, r4, lsr #29
   18fc0:	andeq	r0, r0, r4, lsl #5
   18fc4:	orrs	r3, r0, r1
   18fc8:	beq	19044 <__assert_fail@plt+0x647c>
   18fcc:	cmp	r0, #0
   18fd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18fd4:	mov	r4, r1
   18fd8:	mov	r5, r0
   18fdc:	beq	19050 <__assert_fail@plt+0x6488>
   18fe0:	cmp	r1, #0
   18fe4:	beq	19060 <__assert_fail@plt+0x6498>
   18fe8:	mov	r6, r2
   18fec:	bl	1282c <strlen@plt>
   18ff0:	mvn	r3, r0
   18ff4:	cmp	r6, r3
   18ff8:	mov	r7, r0
   18ffc:	movhi	r8, #0
   19000:	bhi	1903c <__assert_fail@plt+0x6474>
   19004:	add	r9, r6, r0
   19008:	add	r0, r9, #1
   1900c:	bl	1276c <malloc@plt>
   19010:	subs	r8, r0, #0
   19014:	beq	1903c <__assert_fail@plt+0x6474>
   19018:	mov	r1, r5
   1901c:	mov	r2, r7
   19020:	bl	125b0 <memcpy@plt>
   19024:	mov	r2, r6
   19028:	mov	r1, r4
   1902c:	add	r0, r8, r7
   19030:	bl	125b0 <memcpy@plt>
   19034:	mov	r3, #0
   19038:	strb	r3, [r8, r9]
   1903c:	mov	r0, r8
   19040:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19044:	ldr	r0, [pc, #28]	; 19068 <__assert_fail@plt+0x64a0>
   19048:	add	r0, pc, r0
   1904c:	b	12628 <strdup@plt>
   19050:	mov	r0, r4
   19054:	mov	r1, r2
   19058:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1905c:	b	12598 <strndup@plt>
   19060:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19064:	b	12628 <strdup@plt>
   19068:	andeq	r1, r0, r8, lsl #10
   1906c:	push	{r4, r5, r6, lr}
   19070:	subs	r4, r1, #0
   19074:	mov	r5, r0
   19078:	moveq	r2, r4
   1907c:	beq	1908c <__assert_fail@plt+0x64c4>
   19080:	mov	r0, r4
   19084:	bl	1282c <strlen@plt>
   19088:	mov	r2, r0
   1908c:	mov	r1, r4
   19090:	mov	r0, r5
   19094:	pop	{r4, r5, r6, lr}
   19098:	b	18fc4 <__assert_fail@plt+0x63fc>
   1909c:	push	{r1, r2, r3}
   190a0:	ldr	r1, [pc, #132]	; 1912c <__assert_fail@plt+0x6564>
   190a4:	ldr	r3, [pc, #132]	; 19130 <__assert_fail@plt+0x6568>
   190a8:	add	r1, pc, r1
   190ac:	push	{r4, r5, lr}
   190b0:	mov	r5, r0
   190b4:	ldr	r4, [r1, r3]
   190b8:	sub	sp, sp, #16
   190bc:	add	ip, sp, #32
   190c0:	ldr	r0, [r4]
   190c4:	ldr	r2, [sp, #28]
   190c8:	str	r0, [sp, #12]
   190cc:	mov	r3, ip
   190d0:	add	r0, sp, #8
   190d4:	mov	r1, #1
   190d8:	str	ip, [sp, #4]
   190dc:	bl	128d4 <__vasprintf_chk@plt>
   190e0:	subs	r2, r0, #0
   190e4:	movlt	r5, #0
   190e8:	blt	19104 <__assert_fail@plt+0x653c>
   190ec:	mov	r0, r5
   190f0:	ldr	r1, [sp, #8]
   190f4:	bl	18fc4 <__assert_fail@plt+0x63fc>
   190f8:	mov	r5, r0
   190fc:	ldr	r0, [sp, #8]
   19100:	bl	1255c <free@plt>
   19104:	ldr	r2, [sp, #12]
   19108:	ldr	r3, [r4]
   1910c:	mov	r0, r5
   19110:	cmp	r2, r3
   19114:	bne	19128 <__assert_fail@plt+0x6560>
   19118:	add	sp, sp, #16
   1911c:	pop	{r4, r5, lr}
   19120:	add	sp, sp, #12
   19124:	bx	lr
   19128:	bl	12634 <__stack_chk_fail@plt>
   1912c:	andeq	r2, r1, r4, asr #25
   19130:	andeq	r0, r0, r4, lsl #5
   19134:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19138:	mov	r6, r0
   1913c:	ldr	r0, [pc, #348]	; 192a0 <__assert_fail@plt+0x66d8>
   19140:	ldr	ip, [pc, #348]	; 192a4 <__assert_fail@plt+0x66dc>
   19144:	add	r0, pc, r0
   19148:	ldr	r5, [r6]
   1914c:	ldr	r8, [r0, ip]
   19150:	sub	sp, sp, #8
   19154:	ldrsb	r4, [r5]
   19158:	mov	r9, r2
   1915c:	ldr	r2, [r8]
   19160:	cmp	r4, #0
   19164:	mov	r7, r1
   19168:	str	r2, [sp, #4]
   1916c:	mov	r1, r0
   19170:	beq	19220 <__assert_fail@plt+0x6658>
   19174:	mov	r0, r5
   19178:	mov	r1, r9
   1917c:	mov	sl, r3
   19180:	bl	12bbc <strspn@plt>
   19184:	add	r4, r5, r0
   19188:	ldrsb	r5, [r5, r0]
   1918c:	cmp	r5, #0
   19190:	beq	19288 <__assert_fail@plt+0x66c0>
   19194:	cmp	sl, #0
   19198:	beq	1923c <__assert_fail@plt+0x6674>
   1919c:	ldr	r0, [pc, #260]	; 192a8 <__assert_fail@plt+0x66e0>
   191a0:	mov	r1, r5
   191a4:	add	r0, pc, r0
   191a8:	bl	12844 <strchr@plt>
   191ac:	cmp	r0, #0
   191b0:	beq	19258 <__assert_fail@plt+0x6690>
   191b4:	add	sl, r4, #1
   191b8:	mov	r3, #0
   191bc:	mov	r0, sl
   191c0:	mov	r1, sp
   191c4:	strb	r5, [sp]
   191c8:	strb	r3, [sp, #1]
   191cc:	bl	173e0 <__assert_fail@plt+0x4818>
   191d0:	add	r3, r4, r0
   191d4:	str	r0, [r7]
   191d8:	ldrsb	r3, [r3, #1]
   191dc:	subs	r5, r5, r3
   191e0:	movne	r5, #1
   191e4:	cmp	r3, #0
   191e8:	moveq	r5, #1
   191ec:	cmp	r5, #0
   191f0:	bne	19288 <__assert_fail@plt+0x66c0>
   191f4:	add	r0, r0, #2
   191f8:	add	r5, r4, r0
   191fc:	ldrsb	r1, [r4, r0]
   19200:	cmp	r1, #0
   19204:	beq	19218 <__assert_fail@plt+0x6650>
   19208:	mov	r0, r9
   1920c:	bl	12844 <strchr@plt>
   19210:	cmp	r0, #0
   19214:	beq	19288 <__assert_fail@plt+0x66c0>
   19218:	mov	r4, sl
   1921c:	str	r5, [r6]
   19220:	ldr	r2, [sp, #4]
   19224:	ldr	r3, [r8]
   19228:	mov	r0, r4
   1922c:	cmp	r2, r3
   19230:	bne	1929c <__assert_fail@plt+0x66d4>
   19234:	add	sp, sp, #8
   19238:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1923c:	mov	r1, r9
   19240:	mov	r0, r4
   19244:	bl	124fc <strcspn@plt>
   19248:	add	r3, r4, r0
   1924c:	str	r0, [r7]
   19250:	str	r3, [r6]
   19254:	b	19220 <__assert_fail@plt+0x6658>
   19258:	mov	r1, r9
   1925c:	mov	r0, r4
   19260:	bl	173e0 <__assert_fail@plt+0x4818>
   19264:	str	r0, [r7]
   19268:	ldrsb	r1, [r4, r0]
   1926c:	add	r5, r4, r0
   19270:	cmp	r1, #0
   19274:	beq	19294 <__assert_fail@plt+0x66cc>
   19278:	mov	r0, r9
   1927c:	bl	12844 <strchr@plt>
   19280:	cmp	r0, #0
   19284:	bne	19294 <__assert_fail@plt+0x66cc>
   19288:	str	r4, [r6]
   1928c:	mov	r4, #0
   19290:	b	19220 <__assert_fail@plt+0x6658>
   19294:	str	r5, [r6]
   19298:	b	19220 <__assert_fail@plt+0x6658>
   1929c:	bl	12634 <__stack_chk_fail@plt>
   192a0:	andeq	r2, r1, r8, lsr #24
   192a4:	andeq	r0, r0, r4, lsl #5
   192a8:	muleq	r0, r0, r7
   192ac:	push	{r4, lr}
   192b0:	mov	r4, r0
   192b4:	b	192c0 <__assert_fail@plt+0x66f8>
   192b8:	cmp	r0, #10
   192bc:	beq	192d8 <__assert_fail@plt+0x6710>
   192c0:	mov	r0, r4
   192c4:	bl	12940 <fgetc@plt>
   192c8:	cmn	r0, #1
   192cc:	bne	192b8 <__assert_fail@plt+0x66f0>
   192d0:	mov	r0, #1
   192d4:	pop	{r4, pc}
   192d8:	mov	r0, #0
   192dc:	pop	{r4, pc}
   192e0:	eor	r1, r1, #-2147483648	; 0x80000000
   192e4:	b	192ec <__assert_fail@plt+0x6724>
   192e8:	eor	r3, r3, #-2147483648	; 0x80000000
   192ec:	push	{r4, r5, lr}
   192f0:	lsl	r4, r1, #1
   192f4:	lsl	r5, r3, #1
   192f8:	teq	r4, r5
   192fc:	teqeq	r0, r2
   19300:	orrsne	ip, r4, r0
   19304:	orrsne	ip, r5, r2
   19308:	mvnsne	ip, r4, asr #21
   1930c:	mvnsne	ip, r5, asr #21
   19310:	beq	194fc <__assert_fail@plt+0x6934>
   19314:	lsr	r4, r4, #21
   19318:	rsbs	r5, r4, r5, lsr #21
   1931c:	rsblt	r5, r5, #0
   19320:	ble	19340 <__assert_fail@plt+0x6778>
   19324:	add	r4, r4, r5
   19328:	eor	r2, r0, r2
   1932c:	eor	r3, r1, r3
   19330:	eor	r0, r2, r0
   19334:	eor	r1, r3, r1
   19338:	eor	r2, r0, r2
   1933c:	eor	r3, r1, r3
   19340:	cmp	r5, #54	; 0x36
   19344:	pophi	{r4, r5, pc}
   19348:	tst	r1, #-2147483648	; 0x80000000
   1934c:	lsl	r1, r1, #12
   19350:	mov	ip, #1048576	; 0x100000
   19354:	orr	r1, ip, r1, lsr #12
   19358:	beq	19364 <__assert_fail@plt+0x679c>
   1935c:	rsbs	r0, r0, #0
   19360:	rsc	r1, r1, #0
   19364:	tst	r3, #-2147483648	; 0x80000000
   19368:	lsl	r3, r3, #12
   1936c:	orr	r3, ip, r3, lsr #12
   19370:	beq	1937c <__assert_fail@plt+0x67b4>
   19374:	rsbs	r2, r2, #0
   19378:	rsc	r3, r3, #0
   1937c:	teq	r4, r5
   19380:	beq	194e4 <__assert_fail@plt+0x691c>
   19384:	sub	r4, r4, #1
   19388:	rsbs	lr, r5, #32
   1938c:	blt	193a8 <__assert_fail@plt+0x67e0>
   19390:	lsl	ip, r2, lr
   19394:	adds	r0, r0, r2, lsr r5
   19398:	adc	r1, r1, #0
   1939c:	adds	r0, r0, r3, lsl lr
   193a0:	adcs	r1, r1, r3, asr r5
   193a4:	b	193c4 <__assert_fail@plt+0x67fc>
   193a8:	sub	r5, r5, #32
   193ac:	add	lr, lr, #32
   193b0:	cmp	r2, #1
   193b4:	lsl	ip, r3, lr
   193b8:	orrcs	ip, ip, #2
   193bc:	adds	r0, r0, r3, asr r5
   193c0:	adcs	r1, r1, r3, asr #31
   193c4:	and	r5, r1, #-2147483648	; 0x80000000
   193c8:	bpl	193d8 <__assert_fail@plt+0x6810>
   193cc:	rsbs	ip, ip, #0
   193d0:	rscs	r0, r0, #0
   193d4:	rsc	r1, r1, #0
   193d8:	cmp	r1, #1048576	; 0x100000
   193dc:	bcc	1941c <__assert_fail@plt+0x6854>
   193e0:	cmp	r1, #2097152	; 0x200000
   193e4:	bcc	19404 <__assert_fail@plt+0x683c>
   193e8:	lsrs	r1, r1, #1
   193ec:	rrxs	r0, r0
   193f0:	rrx	ip, ip
   193f4:	add	r4, r4, #1
   193f8:	lsl	r2, r4, #21
   193fc:	cmn	r2, #4194304	; 0x400000
   19400:	bcs	1955c <__assert_fail@plt+0x6994>
   19404:	cmp	ip, #-2147483648	; 0x80000000
   19408:	lsrseq	ip, r0, #1
   1940c:	adcs	r0, r0, #0
   19410:	adc	r1, r1, r4, lsl #20
   19414:	orr	r1, r1, r5
   19418:	pop	{r4, r5, pc}
   1941c:	lsls	ip, ip, #1
   19420:	adcs	r0, r0, r0
   19424:	adc	r1, r1, r1
   19428:	tst	r1, #1048576	; 0x100000
   1942c:	sub	r4, r4, #1
   19430:	bne	19404 <__assert_fail@plt+0x683c>
   19434:	teq	r1, #0
   19438:	moveq	r1, r0
   1943c:	moveq	r0, #0
   19440:	clz	r3, r1
   19444:	addeq	r3, r3, #32
   19448:	sub	r3, r3, #11
   1944c:	subs	r2, r3, #32
   19450:	bge	19474 <__assert_fail@plt+0x68ac>
   19454:	adds	r2, r2, #12
   19458:	ble	19470 <__assert_fail@plt+0x68a8>
   1945c:	add	ip, r2, #20
   19460:	rsb	r2, r2, #12
   19464:	lsl	r0, r1, ip
   19468:	lsr	r1, r1, r2
   1946c:	b	19484 <__assert_fail@plt+0x68bc>
   19470:	add	r2, r2, #20
   19474:	rsble	ip, r2, #32
   19478:	lsl	r1, r1, r2
   1947c:	orrle	r1, r1, r0, lsr ip
   19480:	lslle	r0, r0, r2
   19484:	subs	r4, r4, r3
   19488:	addge	r1, r1, r4, lsl #20
   1948c:	orrge	r1, r1, r5
   19490:	popge	{r4, r5, pc}
   19494:	mvn	r4, r4
   19498:	subs	r4, r4, #31
   1949c:	bge	194d8 <__assert_fail@plt+0x6910>
   194a0:	adds	r4, r4, #12
   194a4:	bgt	194c0 <__assert_fail@plt+0x68f8>
   194a8:	add	r4, r4, #20
   194ac:	rsb	r2, r4, #32
   194b0:	lsr	r0, r0, r4
   194b4:	orr	r0, r0, r1, lsl r2
   194b8:	orr	r1, r5, r1, lsr r4
   194bc:	pop	{r4, r5, pc}
   194c0:	rsb	r4, r4, #12
   194c4:	rsb	r2, r4, #32
   194c8:	lsr	r0, r0, r2
   194cc:	orr	r0, r0, r1, lsl r4
   194d0:	mov	r1, r5
   194d4:	pop	{r4, r5, pc}
   194d8:	lsr	r0, r1, r4
   194dc:	mov	r1, r5
   194e0:	pop	{r4, r5, pc}
   194e4:	teq	r4, #0
   194e8:	eor	r3, r3, #1048576	; 0x100000
   194ec:	eoreq	r1, r1, #1048576	; 0x100000
   194f0:	addeq	r4, r4, #1
   194f4:	subne	r5, r5, #1
   194f8:	b	19384 <__assert_fail@plt+0x67bc>
   194fc:	mvns	ip, r4, asr #21
   19500:	mvnsne	ip, r5, asr #21
   19504:	beq	1956c <__assert_fail@plt+0x69a4>
   19508:	teq	r4, r5
   1950c:	teqeq	r0, r2
   19510:	beq	19524 <__assert_fail@plt+0x695c>
   19514:	orrs	ip, r4, r0
   19518:	moveq	r1, r3
   1951c:	moveq	r0, r2
   19520:	pop	{r4, r5, pc}
   19524:	teq	r1, r3
   19528:	movne	r1, #0
   1952c:	movne	r0, #0
   19530:	popne	{r4, r5, pc}
   19534:	lsrs	ip, r4, #21
   19538:	bne	1954c <__assert_fail@plt+0x6984>
   1953c:	lsls	r0, r0, #1
   19540:	adcs	r1, r1, r1
   19544:	orrcs	r1, r1, #-2147483648	; 0x80000000
   19548:	pop	{r4, r5, pc}
   1954c:	adds	r4, r4, #4194304	; 0x400000
   19550:	addcc	r1, r1, #1048576	; 0x100000
   19554:	popcc	{r4, r5, pc}
   19558:	and	r5, r1, #-2147483648	; 0x80000000
   1955c:	orr	r1, r5, #2130706432	; 0x7f000000
   19560:	orr	r1, r1, #15728640	; 0xf00000
   19564:	mov	r0, #0
   19568:	pop	{r4, r5, pc}
   1956c:	mvns	ip, r4, asr #21
   19570:	movne	r1, r3
   19574:	movne	r0, r2
   19578:	mvnseq	ip, r5, asr #21
   1957c:	movne	r3, r1
   19580:	movne	r2, r0
   19584:	orrs	r4, r0, r1, lsl #12
   19588:	orrseq	r5, r2, r3, lsl #12
   1958c:	teqeq	r1, r3
   19590:	orrne	r1, r1, #524288	; 0x80000
   19594:	pop	{r4, r5, pc}
   19598:	teq	r0, #0
   1959c:	moveq	r1, #0
   195a0:	bxeq	lr
   195a4:	push	{r4, r5, lr}
   195a8:	mov	r4, #1024	; 0x400
   195ac:	add	r4, r4, #50	; 0x32
   195b0:	mov	r5, #0
   195b4:	mov	r1, #0
   195b8:	b	19434 <__assert_fail@plt+0x686c>
   195bc:	teq	r0, #0
   195c0:	moveq	r1, #0
   195c4:	bxeq	lr
   195c8:	push	{r4, r5, lr}
   195cc:	mov	r4, #1024	; 0x400
   195d0:	add	r4, r4, #50	; 0x32
   195d4:	ands	r5, r0, #-2147483648	; 0x80000000
   195d8:	rsbmi	r0, r0, #0
   195dc:	mov	r1, #0
   195e0:	b	19434 <__assert_fail@plt+0x686c>
   195e4:	lsls	r2, r0, #1
   195e8:	asr	r1, r2, #3
   195ec:	rrx	r1, r1
   195f0:	lsl	r0, r2, #28
   195f4:	andsne	r3, r2, #-16777216	; 0xff000000
   195f8:	teqne	r3, #-16777216	; 0xff000000
   195fc:	eorne	r1, r1, #939524096	; 0x38000000
   19600:	bxne	lr
   19604:	bics	r2, r2, #-16777216	; 0xff000000
   19608:	bxeq	lr
   1960c:	teq	r3, #-16777216	; 0xff000000
   19610:	orreq	r1, r1, #524288	; 0x80000
   19614:	bxeq	lr
   19618:	push	{r4, r5, lr}
   1961c:	mov	r4, #896	; 0x380
   19620:	and	r5, r1, #-2147483648	; 0x80000000
   19624:	bic	r1, r1, #-2147483648	; 0x80000000
   19628:	b	19434 <__assert_fail@plt+0x686c>
   1962c:	orrs	r2, r0, r1
   19630:	bxeq	lr
   19634:	push	{r4, r5, lr}
   19638:	mov	r5, #0
   1963c:	b	1965c <__assert_fail@plt+0x6a94>
   19640:	orrs	r2, r0, r1
   19644:	bxeq	lr
   19648:	push	{r4, r5, lr}
   1964c:	ands	r5, r1, #-2147483648	; 0x80000000
   19650:	bpl	1965c <__assert_fail@plt+0x6a94>
   19654:	rsbs	r0, r0, #0
   19658:	rsc	r1, r1, #0
   1965c:	mov	r4, #1024	; 0x400
   19660:	add	r4, r4, #50	; 0x32
   19664:	lsrs	ip, r1, #22
   19668:	beq	193d8 <__assert_fail@plt+0x6810>
   1966c:	mov	r2, #3
   19670:	lsrs	ip, ip, #3
   19674:	addne	r2, r2, #3
   19678:	lsrs	ip, ip, #3
   1967c:	addne	r2, r2, #3
   19680:	add	r2, r2, ip, lsr #3
   19684:	rsb	r3, r2, #32
   19688:	lsl	ip, r0, r3
   1968c:	lsr	r0, r0, r2
   19690:	orr	r0, r0, r1, lsl r3
   19694:	lsr	r1, r1, r2
   19698:	add	r4, r4, r2
   1969c:	b	193d8 <__assert_fail@plt+0x6810>
   196a0:	cmp	r3, #0
   196a4:	cmpeq	r2, #0
   196a8:	bne	196c0 <__assert_fail@plt+0x6af8>
   196ac:	cmp	r1, #0
   196b0:	cmpeq	r0, #0
   196b4:	mvnne	r1, #0
   196b8:	mvnne	r0, #0
   196bc:	b	196dc <__assert_fail@plt+0x6b14>
   196c0:	sub	sp, sp, #8
   196c4:	push	{sp, lr}
   196c8:	bl	196ec <__assert_fail@plt+0x6b24>
   196cc:	ldr	lr, [sp, #4]
   196d0:	add	sp, sp, #8
   196d4:	pop	{r2, r3}
   196d8:	bx	lr
   196dc:	push	{r1, lr}
   196e0:	mov	r0, #8
   196e4:	bl	1249c <raise@plt>
   196e8:	pop	{r1, pc}
   196ec:	cmp	r1, r3
   196f0:	cmpeq	r0, r2
   196f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196f8:	mov	r4, r0
   196fc:	movcc	r0, #0
   19700:	mov	r5, r1
   19704:	ldr	lr, [sp, #36]	; 0x24
   19708:	movcc	r1, r0
   1970c:	bcc	19808 <__assert_fail@plt+0x6c40>
   19710:	cmp	r3, #0
   19714:	clzeq	ip, r2
   19718:	clzne	ip, r3
   1971c:	addeq	ip, ip, #32
   19720:	cmp	r5, #0
   19724:	clzeq	r1, r4
   19728:	addeq	r1, r1, #32
   1972c:	clzne	r1, r5
   19730:	sub	ip, ip, r1
   19734:	sub	sl, ip, #32
   19738:	lsl	r9, r3, ip
   1973c:	rsb	fp, ip, #32
   19740:	orr	r9, r9, r2, lsl sl
   19744:	orr	r9, r9, r2, lsr fp
   19748:	lsl	r8, r2, ip
   1974c:	cmp	r5, r9
   19750:	cmpeq	r4, r8
   19754:	movcc	r0, #0
   19758:	movcc	r1, r0
   1975c:	bcc	19778 <__assert_fail@plt+0x6bb0>
   19760:	mov	r0, #1
   19764:	subs	r4, r4, r8
   19768:	lsl	r1, r0, sl
   1976c:	orr	r1, r1, r0, lsr fp
   19770:	lsl	r0, r0, ip
   19774:	sbc	r5, r5, r9
   19778:	cmp	ip, #0
   1977c:	beq	19808 <__assert_fail@plt+0x6c40>
   19780:	lsr	r6, r8, #1
   19784:	orr	r6, r6, r9, lsl #31
   19788:	lsr	r7, r9, #1
   1978c:	mov	r2, ip
   19790:	b	197b4 <__assert_fail@plt+0x6bec>
   19794:	subs	r3, r4, r6
   19798:	sbc	r8, r5, r7
   1979c:	adds	r3, r3, r3
   197a0:	adc	r8, r8, r8
   197a4:	adds	r4, r3, #1
   197a8:	adc	r5, r8, #0
   197ac:	subs	r2, r2, #1
   197b0:	beq	197d0 <__assert_fail@plt+0x6c08>
   197b4:	cmp	r5, r7
   197b8:	cmpeq	r4, r6
   197bc:	bcs	19794 <__assert_fail@plt+0x6bcc>
   197c0:	adds	r4, r4, r4
   197c4:	adc	r5, r5, r5
   197c8:	subs	r2, r2, #1
   197cc:	bne	197b4 <__assert_fail@plt+0x6bec>
   197d0:	lsr	r3, r4, ip
   197d4:	orr	r3, r3, r5, lsl fp
   197d8:	lsr	r2, r5, ip
   197dc:	orr	r3, r3, r5, lsr sl
   197e0:	adds	r0, r0, r4
   197e4:	mov	r4, r3
   197e8:	lsl	r3, r2, ip
   197ec:	orr	r3, r3, r4, lsl sl
   197f0:	lsl	ip, r4, ip
   197f4:	orr	r3, r3, r4, lsr fp
   197f8:	adc	r1, r1, r5
   197fc:	subs	r0, r0, ip
   19800:	mov	r5, r2
   19804:	sbc	r1, r1, r3
   19808:	cmp	lr, #0
   1980c:	strdne	r4, [lr]
   19810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19814:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19818:	mov	r7, r0
   1981c:	ldr	r6, [pc, #72]	; 1986c <__assert_fail@plt+0x6ca4>
   19820:	ldr	r5, [pc, #72]	; 19870 <__assert_fail@plt+0x6ca8>
   19824:	add	r6, pc, r6
   19828:	add	r5, pc, r5
   1982c:	sub	r6, r6, r5
   19830:	mov	r8, r1
   19834:	mov	r9, r2
   19838:	bl	1244c <mnt_table_set_parser_errcb@plt-0x20>
   1983c:	asrs	r6, r6, #2
   19840:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19844:	mov	r4, #0
   19848:	add	r4, r4, #1
   1984c:	ldr	r3, [r5], #4
   19850:	mov	r2, r9
   19854:	mov	r1, r8
   19858:	mov	r0, r7
   1985c:	blx	r3
   19860:	cmp	r6, r4
   19864:	bne	19848 <__assert_fail@plt+0x6c80>
   19868:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1986c:	andeq	r2, r1, r0, lsr #8
   19870:	andeq	r2, r1, r8, lsl r4
   19874:	bx	lr
   19878:	ldr	r3, [pc, #12]	; 1988c <__assert_fail@plt+0x6cc4>
   1987c:	mov	r1, #0
   19880:	add	r3, pc, r3
   19884:	ldr	r2, [r3]
   19888:	b	128c8 <__cxa_atexit@plt>
   1988c:	andeq	r2, r1, ip, ror r7

Disassembly of section .fini:

00019890 <.fini>:
   19890:	push	{r3, lr}
   19894:	pop	{r3, pc}
