
raspbian-preinstalled/patch:     file format elf32-littlearm


Disassembly of section .init:

000119e0 <.init>:
   119e0:	push	{r3, lr}
   119e4:	bl	15638 <__assert_fail@plt+0x3650>
   119e8:	pop	{r3, pc}

Disassembly of section .plt:

000119ec <fdopen@plt-0x14>:
   119ec:	push	{lr}		; (str lr, [sp, #-4]!)
   119f0:	ldr	lr, [pc, #4]	; 119fc <fdopen@plt-0x4>
   119f4:	add	lr, pc, lr
   119f8:	ldr	pc, [lr, #8]!
   119fc:	andeq	r6, r3, r4, lsl #12

00011a00 <fdopen@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #221184	; 0x36000
   11a08:	ldr	pc, [ip, #1540]!	; 0x604

00011a0c <calloc@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #221184	; 0x36000
   11a14:	ldr	pc, [ip, #1532]!	; 0x5fc

00011a18 <raise@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #221184	; 0x36000
   11a20:	ldr	pc, [ip, #1524]!	; 0x5f4

00011a24 <gmtime_r@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #221184	; 0x36000
   11a2c:	ldr	pc, [ip, #1516]!	; 0x5ec

00011a30 <utimensat@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #221184	; 0x36000
   11a38:	ldr	pc, [ip, #1508]!	; 0x5e4

00011a3c <setbuf@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #221184	; 0x36000
   11a44:	ldr	pc, [ip, #1500]!	; 0x5dc

00011a48 <strcmp@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #221184	; 0x36000
   11a50:	ldr	pc, [ip, #1492]!	; 0x5d4

00011a54 <pathconf@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #221184	; 0x36000
   11a5c:	ldr	pc, [ip, #1484]!	; 0x5cc

00011a60 <rewinddir@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #221184	; 0x36000
   11a68:	ldr	pc, [ip, #1476]!	; 0x5c4

00011a6c <read@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #221184	; 0x36000
   11a74:	ldr	pc, [ip, #1468]!	; 0x5bc

00011a78 <mktime@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #221184	; 0x36000
   11a80:	ldr	pc, [ip, #1460]!	; 0x5b4

00011a84 <fflush@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #221184	; 0x36000
   11a8c:	ldr	pc, [ip, #1452]!	; 0x5ac

00011a90 <unlinkat@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #221184	; 0x36000
   11a98:	ldr	pc, [ip, #1444]!	; 0x5a4

00011a9c <sigprocmask@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #221184	; 0x36000
   11aa4:	ldr	pc, [ip, #1436]!	; 0x59c

00011aa8 <memmove@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #221184	; 0x36000
   11ab0:	ldr	pc, [ip, #1428]!	; 0x594

00011ab4 <free@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #221184	; 0x36000
   11abc:	ldr	pc, [ip, #1420]!	; 0x58c

00011ac0 <faccessat@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #221184	; 0x36000
   11ac8:	ldr	pc, [ip, #1412]!	; 0x584

00011acc <ferror@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #221184	; 0x36000
   11ad4:	ldr	pc, [ip, #1404]!	; 0x57c

00011ad8 <strndup@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #221184	; 0x36000
   11ae0:	ldr	pc, [ip, #1396]!	; 0x574

00011ae4 <clock_gettime@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #221184	; 0x36000
   11aec:	ldr	pc, [ip, #1388]!	; 0x56c

00011af0 <_exit@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #221184	; 0x36000
   11af8:	ldr	pc, [ip, #1380]!	; 0x564

00011afc <memcpy@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #221184	; 0x36000
   11b04:	ldr	pc, [ip, #1372]!	; 0x55c

00011b08 <execlp@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #221184	; 0x36000
   11b10:	ldr	pc, [ip, #1364]!	; 0x554

00011b14 <mbsinit@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #221184	; 0x36000
   11b1c:	ldr	pc, [ip, #1356]!	; 0x54c

00011b20 <signal@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #221184	; 0x36000
   11b28:	ldr	pc, [ip, #1348]!	; 0x544

00011b2c <rmdir@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #221184	; 0x36000
   11b34:	ldr	pc, [ip, #1340]!	; 0x53c

00011b38 <ftell@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #221184	; 0x36000
   11b40:	ldr	pc, [ip, #1332]!	; 0x534

00011b44 <memcmp@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #221184	; 0x36000
   11b4c:	ldr	pc, [ip, #1324]!	; 0x52c

00011b50 <__stack_chk_fail@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #221184	; 0x36000
   11b58:	ldr	pc, [ip, #1316]!	; 0x524

00011b5c <unlink@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #221184	; 0x36000
   11b64:	ldr	pc, [ip, #1308]!	; 0x51c

00011b68 <dup2@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #221184	; 0x36000
   11b70:	ldr	pc, [ip, #1300]!	; 0x514

00011b74 <getrlimit64@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #221184	; 0x36000
   11b7c:	ldr	pc, [ip, #1292]!	; 0x50c

00011b80 <realloc@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #221184	; 0x36000
   11b88:	ldr	pc, [ip, #1284]!	; 0x504

00011b8c <dup@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #221184	; 0x36000
   11b94:	ldr	pc, [ip, #1276]!	; 0x4fc

00011b98 <localtime_r@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #221184	; 0x36000
   11ba0:	ldr	pc, [ip, #1268]!	; 0x4f4

00011ba4 <chdir@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #221184	; 0x36000
   11bac:	ldr	pc, [ip, #1260]!	; 0x4ec

00011bb0 <geteuid@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #221184	; 0x36000
   11bb8:	ldr	pc, [ip, #1252]!	; 0x4e4

00011bbc <__fxstatat64@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #221184	; 0x36000
   11bc4:	ldr	pc, [ip, #1244]!	; 0x4dc

00011bc8 <perror@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #221184	; 0x36000
   11bd0:	ldr	pc, [ip, #1236]!	; 0x4d4

00011bd4 <iswprint@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #221184	; 0x36000
   11bdc:	ldr	pc, [ip, #1228]!	; 0x4cc

00011be0 <tzset@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #221184	; 0x36000
   11be8:	ldr	pc, [ip, #1220]!	; 0x4c4

00011bec <__fxstat64@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #221184	; 0x36000
   11bf4:	ldr	pc, [ip, #1212]!	; 0x4bc

00011bf8 <readlink@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #221184	; 0x36000
   11c00:	ldr	pc, [ip, #1204]!	; 0x4b4

00011c04 <getegid@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #221184	; 0x36000
   11c0c:	ldr	pc, [ip, #1196]!	; 0x4ac

00011c10 <sigaction@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #221184	; 0x36000
   11c18:	ldr	pc, [ip, #1188]!	; 0x4a4

00011c1c <fwrite@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #221184	; 0x36000
   11c24:	ldr	pc, [ip, #1180]!	; 0x49c

00011c28 <lseek64@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #221184	; 0x36000
   11c30:	ldr	pc, [ip, #1172]!	; 0x494

00011c34 <waitpid@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #221184	; 0x36000
   11c3c:	ldr	pc, [ip, #1164]!	; 0x48c

00011c40 <__ctype_get_mb_cur_max@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #221184	; 0x36000
   11c48:	ldr	pc, [ip, #1156]!	; 0x484

00011c4c <gettimeofday@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #221184	; 0x36000
   11c54:	ldr	pc, [ip, #1148]!	; 0x47c

00011c58 <fread@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #221184	; 0x36000
   11c60:	ldr	pc, [ip, #1140]!	; 0x474

00011c64 <mbrtowc@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #221184	; 0x36000
   11c6c:	ldr	pc, [ip, #1132]!	; 0x46c

00011c70 <error@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #221184	; 0x36000
   11c78:	ldr	pc, [ip, #1124]!	; 0x464

00011c7c <opendir@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #221184	; 0x36000
   11c84:	ldr	pc, [ip, #1116]!	; 0x45c

00011c88 <open64@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #221184	; 0x36000
   11c90:	ldr	pc, [ip, #1108]!	; 0x454

00011c94 <getenv@plt>:
   11c94:	add	ip, pc, #0, 12
   11c98:	add	ip, ip, #221184	; 0x36000
   11c9c:	ldr	pc, [ip, #1100]!	; 0x44c

00011ca0 <puts@plt>:
   11ca0:	add	ip, pc, #0, 12
   11ca4:	add	ip, ip, #221184	; 0x36000
   11ca8:	ldr	pc, [ip, #1092]!	; 0x444

00011cac <malloc@plt>:
   11cac:	add	ip, pc, #0, 12
   11cb0:	add	ip, ip, #221184	; 0x36000
   11cb4:	ldr	pc, [ip, #1084]!	; 0x43c

00011cb8 <sigaddset@plt>:
   11cb8:	add	ip, pc, #0, 12
   11cbc:	add	ip, ip, #221184	; 0x36000
   11cc0:	ldr	pc, [ip, #1076]!	; 0x434

00011cc4 <__libc_start_main@plt>:
   11cc4:	add	ip, pc, #0, 12
   11cc8:	add	ip, ip, #221184	; 0x36000
   11ccc:	ldr	pc, [ip, #1068]!	; 0x42c

00011cd0 <readlinkat@plt>:
   11cd0:	add	ip, pc, #0, 12
   11cd4:	add	ip, ip, #221184	; 0x36000
   11cd8:	ldr	pc, [ip, #1060]!	; 0x424

00011cdc <system@plt>:
   11cdc:	add	ip, pc, #0, 12
   11ce0:	add	ip, ip, #221184	; 0x36000
   11ce4:	ldr	pc, [ip, #1052]!	; 0x41c

00011ce8 <strftime@plt>:
   11ce8:	add	ip, pc, #0, 12
   11cec:	add	ip, ip, #221184	; 0x36000
   11cf0:	ldr	pc, [ip, #1044]!	; 0x414

00011cf4 <__vfprintf_chk@plt>:
   11cf4:	add	ip, pc, #0, 12
   11cf8:	add	ip, ip, #221184	; 0x36000
   11cfc:	ldr	pc, [ip, #1036]!	; 0x40c

00011d00 <mkdirat@plt>:
   11d00:	add	ip, pc, #0, 12
   11d04:	add	ip, ip, #221184	; 0x36000
   11d08:	ldr	pc, [ip, #1028]!	; 0x404

00011d0c <__ctype_tolower_loc@plt>:
   11d0c:	add	ip, pc, #0, 12
   11d10:	add	ip, ip, #221184	; 0x36000
   11d14:	ldr	pc, [ip, #1020]!	; 0x3fc

00011d18 <__ctype_toupper_loc@plt>:
   11d18:	add	ip, pc, #0, 12
   11d1c:	add	ip, ip, #221184	; 0x36000
   11d20:	ldr	pc, [ip, #1012]!	; 0x3f4

00011d24 <__gmon_start__@plt>:
   11d24:	add	ip, pc, #0, 12
   11d28:	add	ip, ip, #221184	; 0x36000
   11d2c:	ldr	pc, [ip, #1004]!	; 0x3ec

00011d30 <rename@plt>:
   11d30:	add	ip, pc, #0, 12
   11d34:	add	ip, ip, #221184	; 0x36000
   11d38:	ldr	pc, [ip, #996]!	; 0x3e4

00011d3c <getopt_long@plt>:
   11d3c:	add	ip, pc, #0, 12
   11d40:	add	ip, ip, #221184	; 0x36000
   11d44:	ldr	pc, [ip, #988]!	; 0x3dc

00011d48 <__ctype_b_loc@plt>:
   11d48:	add	ip, pc, #0, 12
   11d4c:	add	ip, ip, #221184	; 0x36000
   11d50:	ldr	pc, [ip, #980]!	; 0x3d4

00011d54 <getpid@plt>:
   11d54:	add	ip, pc, #0, 12
   11d58:	add	ip, ip, #221184	; 0x36000
   11d5c:	ldr	pc, [ip, #972]!	; 0x3cc

00011d60 <exit@plt>:
   11d60:	add	ip, pc, #0, 12
   11d64:	add	ip, ip, #221184	; 0x36000
   11d68:	ldr	pc, [ip, #964]!	; 0x3c4

00011d6c <syscall@plt>:
   11d6c:	add	ip, pc, #0, 12
   11d70:	add	ip, ip, #221184	; 0x36000
   11d74:	ldr	pc, [ip, #956]!	; 0x3bc

00011d78 <strlen@plt>:
   11d78:	add	ip, pc, #0, 12
   11d7c:	add	ip, ip, #221184	; 0x36000
   11d80:	ldr	pc, [ip, #948]!	; 0x3b4

00011d84 <strchr@plt>:
   11d84:	add	ip, pc, #0, 12
   11d88:	add	ip, ip, #221184	; 0x36000
   11d8c:	ldr	pc, [ip, #940]!	; 0x3ac

00011d90 <setenv@plt>:
   11d90:	add	ip, pc, #0, 12
   11d94:	add	ip, ip, #221184	; 0x36000
   11d98:	ldr	pc, [ip, #932]!	; 0x3a4

00011d9c <openat64@plt>:
   11d9c:	add	ip, pc, #0, 12
   11da0:	add	ip, ip, #221184	; 0x36000
   11da4:	ldr	pc, [ip, #924]!	; 0x39c

00011da8 <ungetc@plt>:
   11da8:	add	ip, pc, #0, 12
   11dac:	add	ip, ip, #221184	; 0x36000
   11db0:	ldr	pc, [ip, #916]!	; 0x394

00011db4 <fchmodat@plt>:
   11db4:	add	ip, pc, #0, 12
   11db8:	add	ip, ip, #221184	; 0x36000
   11dbc:	ldr	pc, [ip, #908]!	; 0x38c

00011dc0 <__errno_location@plt>:
   11dc0:	add	ip, pc, #0, 12
   11dc4:	add	ip, ip, #221184	; 0x36000
   11dc8:	ldr	pc, [ip, #900]!	; 0x384

00011dcc <__sprintf_chk@plt>:
   11dcc:	add	ip, pc, #0, 12
   11dd0:	add	ip, ip, #221184	; 0x36000
   11dd4:	ldr	pc, [ip, #892]!	; 0x37c

00011dd8 <snprintf@plt>:
   11dd8:	add	ip, pc, #0, 12
   11ddc:	add	ip, ip, #221184	; 0x36000
   11de0:	ldr	pc, [ip, #884]!	; 0x374

00011de4 <mkdir@plt>:
   11de4:	add	ip, pc, #0, 12
   11de8:	add	ip, ip, #221184	; 0x36000
   11dec:	ldr	pc, [ip, #876]!	; 0x36c

00011df0 <memset@plt>:
   11df0:	add	ip, pc, #0, 12
   11df4:	add	ip, ip, #221184	; 0x36000
   11df8:	ldr	pc, [ip, #868]!	; 0x364

00011dfc <putchar@plt>:
   11dfc:	add	ip, pc, #0, 12
   11e00:	add	ip, ip, #221184	; 0x36000
   11e04:	ldr	pc, [ip, #860]!	; 0x35c

00011e08 <fscanf@plt>:
   11e08:	add	ip, pc, #0, 12
   11e0c:	add	ip, ip, #221184	; 0x36000
   11e10:	ldr	pc, [ip, #852]!	; 0x354

00011e14 <__printf_chk@plt>:
   11e14:	add	ip, pc, #0, 12
   11e18:	add	ip, ip, #221184	; 0x36000
   11e1c:	ldr	pc, [ip, #844]!	; 0x34c

00011e20 <write@plt>:
   11e20:	add	ip, pc, #0, 12
   11e24:	add	ip, ip, #221184	; 0x36000
   11e28:	ldr	pc, [ip, #836]!	; 0x344

00011e2c <fileno@plt>:
   11e2c:	add	ip, pc, #0, 12
   11e30:	add	ip, ip, #221184	; 0x36000
   11e34:	ldr	pc, [ip, #828]!	; 0x33c

00011e38 <__fprintf_chk@plt>:
   11e38:	add	ip, pc, #0, 12
   11e3c:	add	ip, ip, #221184	; 0x36000
   11e40:	ldr	pc, [ip, #820]!	; 0x334

00011e44 <memchr@plt>:
   11e44:	add	ip, pc, #0, 12
   11e48:	add	ip, ip, #221184	; 0x36000
   11e4c:	ldr	pc, [ip, #812]!	; 0x32c

00011e50 <access@plt>:
   11e50:	add	ip, pc, #0, 12
   11e54:	add	ip, ip, #221184	; 0x36000
   11e58:	ldr	pc, [ip, #804]!	; 0x324

00011e5c <fclose@plt>:
   11e5c:	add	ip, pc, #0, 12
   11e60:	add	ip, ip, #221184	; 0x36000
   11e64:	ldr	pc, [ip, #796]!	; 0x31c

00011e68 <fcntl64@plt>:
   11e68:	add	ip, pc, #0, 12
   11e6c:	add	ip, ip, #221184	; 0x36000
   11e70:	ldr	pc, [ip, #788]!	; 0x314

00011e74 <__uflow@plt>:
   11e74:	add	ip, pc, #0, 12
   11e78:	add	ip, ip, #221184	; 0x36000
   11e7c:	ldr	pc, [ip, #780]!	; 0x30c

00011e80 <setlocale@plt>:
   11e80:	add	ip, pc, #0, 12
   11e84:	add	ip, ip, #221184	; 0x36000
   11e88:	ldr	pc, [ip, #772]!	; 0x304

00011e8c <sigemptyset@plt>:
   11e8c:	add	ip, pc, #0, 12
   11e90:	add	ip, ip, #221184	; 0x36000
   11e94:	ldr	pc, [ip, #764]!	; 0x2fc

00011e98 <fork@plt>:
   11e98:	add	ip, pc, #0, 12
   11e9c:	add	ip, ip, #221184	; 0x36000
   11ea0:	ldr	pc, [ip, #756]!	; 0x2f4

00011ea4 <strrchr@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #221184	; 0x36000
   11eac:	ldr	pc, [ip, #748]!	; 0x2ec

00011eb0 <nl_langinfo@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #221184	; 0x36000
   11eb8:	ldr	pc, [ip, #740]!	; 0x2e4

00011ebc <lchown@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #221184	; 0x36000
   11ec4:	ldr	pc, [ip, #732]!	; 0x2dc

00011ec8 <fputc@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #221184	; 0x36000
   11ed0:	ldr	pc, [ip, #724]!	; 0x2d4

00011ed4 <symlink@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #221184	; 0x36000
   11edc:	ldr	pc, [ip, #716]!	; 0x2cc

00011ee0 <readdir64@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #221184	; 0x36000
   11ee8:	ldr	pc, [ip, #708]!	; 0x2c4

00011eec <fdopendir@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #221184	; 0x36000
   11ef4:	ldr	pc, [ip, #700]!	; 0x2bc

00011ef8 <timegm@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #221184	; 0x36000
   11f00:	ldr	pc, [ip, #692]!	; 0x2b4

00011f04 <putc@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #221184	; 0x36000
   11f0c:	ldr	pc, [ip, #684]!	; 0x2ac

00011f10 <dirfd@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #221184	; 0x36000
   11f18:	ldr	pc, [ip, #676]!	; 0x2a4

00011f1c <fopen64@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #221184	; 0x36000
   11f24:	ldr	pc, [ip, #668]!	; 0x29c

00011f28 <fchownat@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #221184	; 0x36000
   11f30:	ldr	pc, [ip, #660]!	; 0x294

00011f34 <renameat@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #221184	; 0x36000
   11f3c:	ldr	pc, [ip, #652]!	; 0x28c

00011f40 <symlinkat@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #221184	; 0x36000
   11f48:	ldr	pc, [ip, #644]!	; 0x284

00011f4c <chmod@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #221184	; 0x36000
   11f54:	ldr	pc, [ip, #636]!	; 0x27c

00011f58 <fseek@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #221184	; 0x36000
   11f60:	ldr	pc, [ip, #628]!	; 0x274

00011f64 <__xstat64@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #221184	; 0x36000
   11f6c:	ldr	pc, [ip, #620]!	; 0x26c

00011f70 <isatty@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #221184	; 0x36000
   11f78:	ldr	pc, [ip, #612]!	; 0x264

00011f7c <unsetenv@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #221184	; 0x36000
   11f84:	ldr	pc, [ip, #604]!	; 0x25c

00011f88 <fputs@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #221184	; 0x36000
   11f90:	ldr	pc, [ip, #596]!	; 0x254

00011f94 <strncmp@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #221184	; 0x36000
   11f9c:	ldr	pc, [ip, #588]!	; 0x24c

00011fa0 <abort@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #221184	; 0x36000
   11fa8:	ldr	pc, [ip, #580]!	; 0x244

00011fac <getc@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #221184	; 0x36000
   11fb4:	ldr	pc, [ip, #572]!	; 0x23c

00011fb8 <close@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #221184	; 0x36000
   11fc0:	ldr	pc, [ip, #564]!	; 0x234

00011fc4 <__lxstat64@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #221184	; 0x36000
   11fcc:	ldr	pc, [ip, #556]!	; 0x22c

00011fd0 <closedir@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #221184	; 0x36000
   11fd8:	ldr	pc, [ip, #548]!	; 0x224

00011fdc <__snprintf_chk@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #221184	; 0x36000
   11fe4:	ldr	pc, [ip, #540]!	; 0x21c

00011fe8 <__assert_fail@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #221184	; 0x36000
   11ff0:	ldr	pc, [ip, #532]!	; 0x214

Disassembly of section .text:

00011ff8 <renameat2@@Base-0x1cd1c>:
   11ff8:	ldr	r2, [pc, #3916]	; 12f4c <__assert_fail@plt+0xf64>
   11ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12000:	mov	r7, r1
   12004:	ldr	r3, [pc, #3908]	; 12f50 <__assert_fail@plt+0xf68>
   12008:	ldr	r9, [pc, #3908]	; 12f54 <__assert_fail@plt+0xf6c>
   1200c:	sub	sp, sp, #580	; 0x244
   12010:	ldr	r1, [r2]
   12014:	mov	r4, #0
   12018:	mov	r2, #2
   1201c:	mov	r8, r0
   12020:	ldr	r0, [r7]
   12024:	str	r1, [sp, #572]	; 0x23c
   12028:	strb	r4, [sp, #171]	; 0xab
   1202c:	str	r2, [r3]
   12030:	bl	2cb24 <__assert_fail@plt+0x1ab3c>
   12034:	bl	20b4c <__assert_fail@plt+0xeb64>
   12038:	ldr	r1, [pc, #3864]	; 12f58 <__assert_fail@plt+0xf70>
   1203c:	ldr	r0, [r9]
   12040:	bl	11a3c <setbuf@plt>
   12044:	ldr	r2, [pc, #3856]	; 12f5c <__assert_fail@plt+0xf74>
   12048:	mov	r3, #8192	; 0x2000
   1204c:	mov	r0, r3
   12050:	str	r3, [r2]
   12054:	bl	2f2ec <renameat2@@Base+0x5d8>
   12058:	ldr	r3, [pc, #3840]	; 12f60 <__assert_fail@plt+0xf78>
   1205c:	ldr	r1, [pc, #3840]	; 12f64 <__assert_fail@plt+0xf7c>
   12060:	mvn	r2, #0
   12064:	str	r2, [r1]
   12068:	str	r0, [r3]
   1206c:	ldr	r0, [pc, #3828]	; 12f68 <__assert_fail@plt+0xf80>
   12070:	bl	11c94 <getenv@plt>
   12074:	cmp	r0, r4
   12078:	moveq	r1, #1
   1207c:	beq	12098 <__assert_fail@plt+0xb0>
   12080:	ldr	r1, [pc, #3812]	; 12f6c <__assert_fail@plt+0xf84>
   12084:	mov	r3, r4
   12088:	mov	r2, r4
   1208c:	bl	24828 <__assert_fail@plt+0x12840>
   12090:	subs	r1, r0, #0
   12094:	movlt	r1, #1
   12098:	mov	r0, #0
   1209c:	bl	2e6bc <__assert_fail@plt+0x1c6d4>
   120a0:	ldr	r0, [pc, #3784]	; 12f70 <__assert_fail@plt+0xf88>
   120a4:	bl	11c94 <getenv@plt>
   120a8:	ldr	fp, [pc, #3780]	; 12f74 <__assert_fail@plt+0xf8c>
   120ac:	ldr	r1, [pc, #3780]	; 12f78 <__assert_fail@plt+0xf90>
   120b0:	cmp	r0, #0
   120b4:	movne	r2, #1
   120b8:	moveq	r2, #0
   120bc:	moveq	r3, #1
   120c0:	movne	r3, #0
   120c4:	ldr	r0, [pc, #3760]	; 12f7c <__assert_fail@plt+0xf94>
   120c8:	strb	r3, [fp, #20]
   120cc:	strb	r2, [r1]
   120d0:	bl	11c94 <getenv@plt>
   120d4:	subs	r3, r0, #0
   120d8:	beq	120ec <__assert_fail@plt+0x104>
   120dc:	ldr	r2, [pc, #3740]	; 12f80 <__assert_fail@plt+0xf98>
   120e0:	mov	r1, #1
   120e4:	bl	16444 <__assert_fail@plt+0x445c>
   120e8:	mov	r3, r0
   120ec:	ldr	r2, [pc, #3728]	; 12f84 <__assert_fail@plt+0xf9c>
   120f0:	ldr	r0, [pc, #3728]	; 12f88 <__assert_fail@plt+0xfa0>
   120f4:	str	r3, [r2]
   120f8:	bl	11c94 <getenv@plt>
   120fc:	subs	r3, r0, #0
   12100:	beq	14ba4 <__assert_fail@plt+0x2bbc>
   12104:	ldrb	r1, [r3]
   12108:	ldr	r2, [pc, #3708]	; 12f8c <__assert_fail@plt+0xfa4>
   1210c:	cmp	r1, #0
   12110:	moveq	r3, r2
   12114:	ldr	r2, [pc, #3700]	; 12f90 <__assert_fail@plt+0xfa8>
   12118:	ldr	r0, [pc, #3700]	; 12f94 <__assert_fail@plt+0xfac>
   1211c:	str	r3, [r2]
   12120:	bl	11c94 <getenv@plt>
   12124:	cmp	r0, #0
   12128:	str	r0, [fp, #24]
   1212c:	beq	14e98 <__assert_fail@plt+0x2eb0>
   12130:	ldr	r3, [pc, #3680]	; 12f98 <__assert_fail@plt+0xfb0>
   12134:	str	r3, [fp, #28]
   12138:	ldr	r4, [pc, #3676]	; 12f9c <__assert_fail@plt+0xfb4>
   1213c:	bl	1f5e8 <__assert_fail@plt+0xd600>
   12140:	mov	r6, #1
   12144:	mov	r3, #0
   12148:	ldr	r5, [r4]
   1214c:	mov	r0, r4
   12150:	str	r6, [sp]
   12154:	mov	r2, r3
   12158:	mov	r1, r3
   1215c:	blx	r5
   12160:	subs	ip, r0, #0
   12164:	beq	155e4 <__assert_fail@plt+0x35fc>
   12168:	mov	r2, #0
   1216c:	str	r6, [sp]
   12170:	ldr	r3, [pc, #3624]	; 12fa0 <__assert_fail@plt+0xfb8>
   12174:	mov	r0, r4
   12178:	mov	r1, r2
   1217c:	str	ip, [fp, #16]
   12180:	blx	r5
   12184:	subs	r3, r0, #0
   12188:	beq	155e4 <__assert_fail@plt+0x35fc>
   1218c:	ldr	r6, [pc, #3600]	; 12fa4 <__assert_fail@plt+0xfbc>
   12190:	ldr	r0, [fp, #36]	; 0x24
   12194:	str	r3, [fp, #4]
   12198:	str	r8, [fp, #32]
   1219c:	str	r7, [fp]
   121a0:	bl	11ab4 <free@plt>
   121a4:	ldr	r2, [r6]
   121a8:	mov	r3, #0
   121ac:	cmp	r8, r2
   121b0:	str	r3, [fp, #36]	; 0x24
   121b4:	beq	12528 <__assert_fail@plt+0x540>
   121b8:	ldr	sl, [pc, #3560]	; 12fa8 <__assert_fail@plt+0xfc0>
   121bc:	ldr	r5, [pc, #3560]	; 12fac <__assert_fail@plt+0xfc4>
   121c0:	mov	r3, #0
   121c4:	str	r3, [sp]
   121c8:	ldr	r2, [pc, #3552]	; 12fb0 <__assert_fail@plt+0xfc8>
   121cc:	mov	r3, sl
   121d0:	mov	r1, r7
   121d4:	mov	r0, r8
   121d8:	bl	11d3c <getopt_long@plt>
   121dc:	cmn	r0, #1
   121e0:	beq	12518 <__assert_fail@plt+0x530>
   121e4:	sub	r0, r0, #66	; 0x42
   121e8:	cmp	r0, #200	; 0xc8
   121ec:	ldrls	pc, [pc, r0, lsl #2]
   121f0:	b	15454 <__assert_fail@plt+0x346c>
   121f4:	andeq	r2, r1, ip, asr ip
   121f8:	andeq	r5, r1, r4, asr r4
   121fc:	andeq	r2, r1, ip, asr #24
   12200:	andeq	r2, r1, r0, asr #24
   12204:	andeq	r2, r1, r0, lsr #24
   12208:	andeq	r5, r1, r4, asr r4
   1220c:	andeq	r5, r1, r4, asr r4
   12210:	andeq	r5, r1, r4, asr r4
   12214:	andeq	r5, r1, r4, asr r4
   12218:	andeq	r5, r1, r4, asr r4
   1221c:	andeq	r5, r1, r4, asr r4
   12220:	andeq	r5, r1, r4, asr r4
   12224:	andeq	r2, r1, r0, lsl ip
   12228:	andeq	r5, r1, r4, asr r4
   1222c:	andeq	r5, r1, r4, asr r4
   12230:	andeq	r5, r1, r4, asr r4
   12234:	strdeq	r2, [r1], -ip
   12238:	andeq	r5, r1, r4, asr r4
   1223c:	andeq	r2, r1, ip, ror #23
   12240:	andeq	r5, r1, r4, asr r4
   12244:	ldrdeq	r2, [r1], -ip
   12248:	andeq	r5, r1, r4, asr r4
   1224c:	andeq	r5, r1, r4, asr r4
   12250:			; <UNDEFINED> instruction: 0x00012bbc
   12254:	andeq	r2, r1, ip, lsr #23
   12258:	andeq	r5, r1, r4, asr r4
   1225c:	andeq	r5, r1, r4, asr r4
   12260:	andeq	r5, r1, r4, asr r4
   12264:	andeq	r5, r1, r4, asr r4
   12268:	andeq	r5, r1, r4, asr r4
   1226c:	andeq	r5, r1, r4, asr r4
   12270:	andeq	r5, r1, r4, asr r4
   12274:	andeq	r2, r1, r8, lsr #21
   12278:	muleq	r1, r8, sl
   1227c:	andeq	r2, r1, r4, ror sl
   12280:	andeq	r2, r1, r4, ror #20
   12284:	andeq	r2, r1, ip, lsl #23
   12288:	andeq	r2, r1, r0, ror fp
   1228c:	andeq	r5, r1, r4, asr r4
   12290:	muleq	r1, ip, fp
   12294:	andeq	r5, r1, r4, asr r4
   12298:	andeq	r5, r1, r4, asr r4
   1229c:	andeq	r2, r1, r4, asr sl
   122a0:	andeq	r2, r1, ip, lsl #20
   122a4:	strdeq	r2, [r1], -ip
   122a8:	andeq	r2, r1, r8, ror #19
   122ac:	andeq	r2, r1, ip, asr #19
   122b0:	andeq	r5, r1, r4, asr r4
   122b4:			; <UNDEFINED> instruction: 0x000129bc
   122b8:	andeq	r2, r1, ip, lsr #19
   122bc:	muleq	r1, ip, r9
   122c0:	andeq	r2, r1, r4, lsl #19
   122c4:	andeq	r2, r1, r8, asr #26
   122c8:	andeq	r5, r1, r4, asr r4
   122cc:	andeq	r2, r1, ip, lsr #26
   122d0:	andeq	r5, r1, r4, asr r4
   122d4:	andeq	r2, r1, r0, asr fp
   122d8:	andeq	r5, r1, r4, asr r4
   122dc:	andeq	r5, r1, r4, asr r4
   122e0:	andeq	r5, r1, r4, asr r4
   122e4:	andeq	r5, r1, r4, asr r4
   122e8:	andeq	r5, r1, r4, asr r4
   122ec:	andeq	r5, r1, r4, asr r4
   122f0:	andeq	r5, r1, r4, asr r4
   122f4:	andeq	r5, r1, r4, asr r4
   122f8:	andeq	r5, r1, r4, asr r4
   122fc:	andeq	r5, r1, r4, asr r4
   12300:	andeq	r5, r1, r4, asr r4
   12304:	andeq	r5, r1, r4, asr r4
   12308:	andeq	r5, r1, r4, asr r4
   1230c:	andeq	r5, r1, r4, asr r4
   12310:	andeq	r5, r1, r4, asr r4
   12314:	andeq	r5, r1, r4, asr r4
   12318:	andeq	r5, r1, r4, asr r4
   1231c:	andeq	r5, r1, r4, asr r4
   12320:	andeq	r5, r1, r4, asr r4
   12324:	andeq	r5, r1, r4, asr r4
   12328:	andeq	r5, r1, r4, asr r4
   1232c:	andeq	r5, r1, r4, asr r4
   12330:	andeq	r5, r1, r4, asr r4
   12334:	andeq	r5, r1, r4, asr r4
   12338:	andeq	r5, r1, r4, asr r4
   1233c:	andeq	r5, r1, r4, asr r4
   12340:	andeq	r5, r1, r4, asr r4
   12344:	andeq	r5, r1, r4, asr r4
   12348:	andeq	r5, r1, r4, asr r4
   1234c:	andeq	r5, r1, r4, asr r4
   12350:	andeq	r5, r1, r4, asr r4
   12354:	andeq	r5, r1, r4, asr r4
   12358:	andeq	r5, r1, r4, asr r4
   1235c:	andeq	r5, r1, r4, asr r4
   12360:	andeq	r5, r1, r4, asr r4
   12364:	andeq	r5, r1, r4, asr r4
   12368:	andeq	r5, r1, r4, asr r4
   1236c:	andeq	r5, r1, r4, asr r4
   12370:	andeq	r5, r1, r4, asr r4
   12374:	andeq	r5, r1, r4, asr r4
   12378:	andeq	r5, r1, r4, asr r4
   1237c:	andeq	r5, r1, r4, asr r4
   12380:	andeq	r5, r1, r4, asr r4
   12384:	andeq	r5, r1, r4, asr r4
   12388:	andeq	r5, r1, r4, asr r4
   1238c:	andeq	r5, r1, r4, asr r4
   12390:	andeq	r5, r1, r4, asr r4
   12394:	andeq	r5, r1, r4, asr r4
   12398:	andeq	r5, r1, r4, asr r4
   1239c:	andeq	r5, r1, r4, asr r4
   123a0:	andeq	r5, r1, r4, asr r4
   123a4:	andeq	r5, r1, r4, asr r4
   123a8:	andeq	r5, r1, r4, asr r4
   123ac:	andeq	r5, r1, r4, asr r4
   123b0:	andeq	r5, r1, r4, asr r4
   123b4:	andeq	r5, r1, r4, asr r4
   123b8:	andeq	r5, r1, r4, asr r4
   123bc:	andeq	r5, r1, r4, asr r4
   123c0:	andeq	r5, r1, r4, asr r4
   123c4:	andeq	r5, r1, r4, asr r4
   123c8:	andeq	r5, r1, r4, asr r4
   123cc:	andeq	r5, r1, r4, asr r4
   123d0:	andeq	r5, r1, r4, asr r4
   123d4:	andeq	r5, r1, r4, asr r4
   123d8:	andeq	r5, r1, r4, asr r4
   123dc:	andeq	r5, r1, r4, asr r4
   123e0:	andeq	r5, r1, r4, asr r4
   123e4:	andeq	r5, r1, r4, asr r4
   123e8:	andeq	r5, r1, r4, asr r4
   123ec:	andeq	r5, r1, r4, asr r4
   123f0:	andeq	r5, r1, r4, asr r4
   123f4:	andeq	r5, r1, r4, asr r4
   123f8:	andeq	r5, r1, r4, asr r4
   123fc:	andeq	r5, r1, r4, asr r4
   12400:	andeq	r5, r1, r4, asr r4
   12404:	andeq	r5, r1, r4, asr r4
   12408:	andeq	r5, r1, r4, asr r4
   1240c:	andeq	r5, r1, r4, asr r4
   12410:	andeq	r5, r1, r4, asr r4
   12414:	andeq	r5, r1, r4, asr r4
   12418:	andeq	r5, r1, r4, asr r4
   1241c:	andeq	r5, r1, r4, asr r4
   12420:	andeq	r5, r1, r4, asr r4
   12424:	andeq	r5, r1, r4, asr r4
   12428:	andeq	r5, r1, r4, asr r4
   1242c:	andeq	r5, r1, r4, asr r4
   12430:	andeq	r5, r1, r4, asr r4
   12434:	andeq	r5, r1, r4, asr r4
   12438:	andeq	r5, r1, r4, asr r4
   1243c:	andeq	r5, r1, r4, asr r4
   12440:	andeq	r5, r1, r4, asr r4
   12444:	andeq	r5, r1, r4, asr r4
   12448:	andeq	r5, r1, r4, asr r4
   1244c:	andeq	r5, r1, r4, asr r4
   12450:	andeq	r5, r1, r4, asr r4
   12454:	andeq	r5, r1, r4, asr r4
   12458:	andeq	r5, r1, r4, asr r4
   1245c:	andeq	r5, r1, r4, asr r4
   12460:	andeq	r5, r1, r4, asr r4
   12464:	andeq	r5, r1, r4, asr r4
   12468:	andeq	r5, r1, r4, asr r4
   1246c:	andeq	r5, r1, r4, asr r4
   12470:	andeq	r5, r1, r4, asr r4
   12474:	andeq	r5, r1, r4, asr r4
   12478:	andeq	r5, r1, r4, asr r4
   1247c:	andeq	r5, r1, r4, asr r4
   12480:	andeq	r5, r1, r4, asr r4
   12484:	andeq	r5, r1, r4, asr r4
   12488:	andeq	r5, r1, r4, asr r4
   1248c:	andeq	r5, r1, r4, asr r4
   12490:	andeq	r5, r1, r4, asr r4
   12494:	andeq	r5, r1, r4, asr r4
   12498:	andeq	r5, r1, r4, asr r4
   1249c:	andeq	r5, r1, r4, asr r4
   124a0:	andeq	r5, r1, r4, asr r4
   124a4:	andeq	r5, r1, r4, asr r4
   124a8:	andeq	r5, r1, r4, asr r4
   124ac:	andeq	r5, r1, r4, asr r4
   124b0:	andeq	r5, r1, r4, asr r4
   124b4:	andeq	r5, r1, r4, asr r4
   124b8:	andeq	r5, r1, r4, asr r4
   124bc:	andeq	r5, r1, r4, asr r4
   124c0:	andeq	r5, r1, r4, asr r4
   124c4:	andeq	r5, r1, r4, asr r4
   124c8:	andeq	r5, r1, r4, asr r4
   124cc:	andeq	r5, r1, r4, asr r4
   124d0:	andeq	r5, r1, r4, asr r4
   124d4:	andeq	r5, r1, r4, asr r4
   124d8:	andeq	r5, r1, r4, asr r4
   124dc:	andeq	r5, r1, r4, asr r4
   124e0:	andeq	r5, r1, r4, asr r4
   124e4:	andeq	r5, r1, r4, asr r4
   124e8:	andeq	r5, r1, r4, asr r4
   124ec:	andeq	r2, r1, ip, lsl sp
   124f0:	andeq	r2, r1, ip, lsl #26
   124f4:	strdeq	r2, [r1], -ip
   124f8:	strdeq	r5, [r1], -r0
   124fc:	strdeq	r2, [r1], -r0
   12500:	andeq	r2, r1, r4, ror #26
   12504:	andeq	r2, r1, r4, asr sp
   12508:	andeq	r2, r1, r0, ror sp
   1250c:			; <UNDEFINED> instruction: 0x00012cb0
   12510:	andeq	r2, r1, ip, lsl #25
   12514:	andeq	r2, r1, ip, ror ip
   12518:	ldr	r3, [r6]
   1251c:	mov	r4, r0
   12520:	cmp	r3, r8
   12524:	blt	14f9c <__assert_fail@plt+0x2fb4>
   12528:	ldr	r3, [pc, #2692]	; 12fb4 <__assert_fail@plt+0xfcc>
   1252c:	ldrb	r3, [r3]
   12530:	cmp	r3, #0
   12534:	bne	14ef0 <__assert_fail@plt+0x2f08>
   12538:	ldrb	r2, [fp, #40]	; 0x28
   1253c:	ldrb	r3, [fp, #20]
   12540:	orrs	r3, r2, r3
   12544:	bne	14f04 <__assert_fail@plt+0x2f1c>
   12548:	ldr	r3, [pc, #3024]	; 13120 <__assert_fail@plt+0x1138>
   1254c:	ldr	r2, [pc, #2660]	; 12fb8 <__assert_fail@plt+0xfd0>
   12550:	ldr	r4, [r3]
   12554:	mov	r3, #0
   12558:	cmp	r4, r3
   1255c:	strh	r2, [sp, #180]	; 0xb4
   12560:	str	r3, [sp, #176]	; 0xb0
   12564:	beq	125d0 <__assert_fail@plt+0x5e8>
   12568:	ldr	r1, [pc, #2636]	; 12fbc <__assert_fail@plt+0xfd4>
   1256c:	mov	r0, r4
   12570:	bl	11a48 <strcmp@plt>
   12574:	cmp	r0, #0
   12578:	bne	15384 <__assert_fail@plt+0x339c>
   1257c:	ldr	r4, [pc, #2620]	; 12fc0 <__assert_fail@plt+0xfd8>
   12580:	ldr	r0, [r4]
   12584:	bl	11e2c <fileno@plt>
   12588:	bl	11b8c <dup@plt>
   1258c:	cmn	r0, #1
   12590:	beq	15414 <__assert_fail@plt+0x342c>
   12594:	ldr	r1, [pc, #2600]	; 12fc4 <__assert_fail@plt+0xfdc>
   12598:	bl	11a00 <fdopen@plt>
   1259c:	subs	r5, r0, #0
   125a0:	beq	15414 <__assert_fail@plt+0x342c>
   125a4:	ldr	r0, [r9]
   125a8:	bl	11e2c <fileno@plt>
   125ac:	mov	r6, r0
   125b0:	ldr	r0, [r4]
   125b4:	bl	11e2c <fileno@plt>
   125b8:	mov	r1, r0
   125bc:	mov	r0, r6
   125c0:	bl	11b68 <dup2@plt>
   125c4:	cmn	r0, #1
   125c8:	beq	1540c <__assert_fail@plt+0x3424>
   125cc:	str	r5, [sp, #176]	; 0xb0
   125d0:	mov	r0, #0
   125d4:	bl	2075c <__assert_fail@plt+0xe774>
   125d8:	ldr	r3, [pc, #2888]	; 13128 <__assert_fail@plt+0x1140>
   125dc:	ldr	r3, [r3]
   125e0:	cmp	r3, #0
   125e4:	beq	14bac <__assert_fail@plt+0x2bc4>
   125e8:	ldr	r2, [pc, #2864]	; 13120 <__assert_fail@plt+0x1138>
   125ec:	ldr	r3, [pc, #2516]	; 12fc8 <__assert_fail@plt+0xfe0>
   125f0:	mov	r4, #1
   125f4:	ldr	r2, [r2]
   125f8:	strb	r4, [r3]
   125fc:	cmp	r2, #0
   12600:	beq	14bac <__assert_fail@plt+0x2bc4>
   12604:	ldr	r2, [pc, #2496]	; 12fcc <__assert_fail@plt+0xfe4>
   12608:	mvn	r1, #0
   1260c:	mov	r3, #32768	; 0x8000
   12610:	str	r1, [r2]
   12614:	str	r3, [sp, #172]	; 0xac
   12618:	ldr	r0, [fp, #52]	; 0x34
   1261c:	bl	181e4 <__assert_fail@plt+0x61fc>
   12620:	ldr	r3, [pc, #2472]	; 12fd0 <__assert_fail@plt+0xfe8>
   12624:	mov	r2, #0
   12628:	sub	r3, r3, #31
   1262c:	str	r2, [sp, #156]	; 0x9c
   12630:	strd	r2, [sp, #160]	; 0xa0
   12634:	mvn	r3, #0
   12638:	str	r3, [sp, #140]	; 0x8c
   1263c:	ldr	r3, [pc, #2788]	; 13128 <__assert_fail@plt+0x1140>
   12640:	add	r1, sp, #172	; 0xac
   12644:	ldr	r3, [r3]
   12648:	cmp	r3, #0
   1264c:	movne	r0, #0
   12650:	ldreq	r3, [pc, #2336]	; 12f78 <__assert_fail@plt+0xf90>
   12654:	ldrbeq	r0, [r3]
   12658:	eoreq	r0, r0, #1
   1265c:	bl	1c8f8 <__assert_fail@plt+0xa910>
   12660:	orr	r0, r0, r4
   12664:	ands	r3, r0, #255	; 0xff
   12668:	str	r3, [sp, #80]	; 0x50
   1266c:	beq	14db0 <__assert_fail@plt+0x2dc8>
   12670:	ldr	r3, [pc, #2720]	; 13118 <__assert_fail@plt+0x1130>
   12674:	ldrb	r3, [r3]
   12678:	cmp	r3, #0
   1267c:	movne	r3, #1
   12680:	strbne	r3, [sp, #171]	; 0xab
   12684:	bl	1ce80 <__assert_fail@plt+0xae98>
   12688:	ldr	r3, [sp, #156]	; 0x9c
   1268c:	cmp	r0, r3
   12690:	beq	126a8 <__assert_fail@plt+0x6c0>
   12694:	cmp	r3, #0
   12698:	bne	146b8 <__assert_fail@plt+0x26d0>
   1269c:	ldr	r3, [sp, #156]	; 0x9c
   126a0:	eor	r3, r3, #1
   126a4:	str	r3, [sp, #156]	; 0x9c
   126a8:	ldrb	r3, [fp, #8]
   126ac:	cmp	r3, #0
   126b0:	beq	126d8 <__assert_fail@plt+0x6f0>
   126b4:	ldr	r0, [fp, #68]	; 0x44
   126b8:	cmp	r0, #0
   126bc:	beq	14798 <__assert_fail@plt+0x27b0>
   126c0:	bl	11e5c <fclose@plt>
   126c4:	ldrb	r3, [fp, #8]
   126c8:	mov	r2, #0
   126cc:	str	r2, [fp, #68]	; 0x44
   126d0:	cmp	r3, r2
   126d4:	bne	14798 <__assert_fail@plt+0x27b0>
   126d8:	ldr	r5, [pc, #2292]	; 12fd4 <__assert_fail@plt+0xfec>
   126dc:	ldrb	r3, [r5]
   126e0:	cmp	r3, #0
   126e4:	bne	1442c <__assert_fail@plt+0x2444>
   126e8:	ldr	r3, [pc, #2280]	; 12fd8 <__assert_fail@plt+0xff0>
   126ec:	str	r3, [sp, #136]	; 0x88
   126f0:	ldr	r4, [pc, #2276]	; 12fdc <__assert_fail@plt+0xff4>
   126f4:	ldrb	r3, [r4]
   126f8:	cmp	r3, #0
   126fc:	bne	14460 <__assert_fail@plt+0x2478>
   12700:	ldr	r3, [pc, #2576]	; 13118 <__assert_fail@plt+0x1130>
   12704:	ldrb	r3, [r3]
   12708:	cmp	r3, #0
   1270c:	bne	14420 <__assert_fail@plt+0x2438>
   12710:	ldr	r6, [sp, #172]	; 0xac
   12714:	ldr	r3, [pc, #2572]	; 13128 <__assert_fail@plt+0x1140>
   12718:	cmp	r6, #0
   1271c:	ldr	r4, [r3]
   12720:	beq	143d4 <__assert_fail@plt+0x23ec>
   12724:	ldr	r3, [pc, #2548]	; 13120 <__assert_fail@plt+0x1138>
   12728:	ldr	r3, [r3]
   1272c:	cmp	r3, #0
   12730:	str	r3, [sp, #116]	; 0x74
   12734:	beq	14764 <__assert_fail@plt+0x277c>
   12738:	bl	1ce80 <__assert_fail@plt+0xae98>
   1273c:	cmp	r0, #0
   12740:	beq	14574 <__assert_fail@plt+0x258c>
   12744:	ldr	r1, [sp, #116]	; 0x74
   12748:	mov	r0, r4
   1274c:	bl	11a48 <strcmp@plt>
   12750:	cmp	r0, #0
   12754:	bne	149ec <__assert_fail@plt+0x2a04>
   12758:	ldr	r9, [pc, #2156]	; 12fcc <__assert_fail@plt+0xfe4>
   1275c:	ldr	r6, [r9]
   12760:	cmn	r6, #1
   12764:	beq	149d4 <__assert_fail@plt+0x29ec>
   12768:	add	r4, sp, #392	; 0x188
   1276c:	mov	r0, r4
   12770:	mov	r2, #104	; 0x68
   12774:	ldr	r1, [pc, #2456]	; 13114 <__assert_fail@plt+0x112c>
   12778:	bl	11afc <memcpy@plt>
   1277c:	cmp	r6, #0
   12780:	beq	14a04 <__assert_fail@plt+0x2a1c>
   12784:	ldr	r3, [pc, #2444]	; 13118 <__assert_fail@plt+0x1130>
   12788:	ldrb	r3, [r3]
   1278c:	cmp	r3, #0
   12790:	beq	14568 <__assert_fail@plt+0x2580>
   12794:	ldr	r3, [pc, #2116]	; 12fe0 <__assert_fail@plt+0xff8>
   12798:	ldr	r4, [pc, #2420]	; 13114 <__assert_fail@plt+0x112c>
   1279c:	ldr	r2, [r3, #8]
   127a0:	ldr	r3, [r4, #16]
   127a4:	cmp	r2, #0
   127a8:	beq	127e4 <__assert_fail@plt+0x7fc>
   127ac:	ldr	r9, [pc, #2072]	; 12fcc <__assert_fail@plt+0xfe4>
   127b0:	ldr	r2, [r9]
   127b4:	cmp	r2, #0
   127b8:	bne	127e4 <__assert_fail@plt+0x7fc>
   127bc:	and	r2, r3, #61440	; 0xf000
   127c0:	cmp	r2, #40960	; 0xa000
   127c4:	beq	127e4 <__assert_fail@plt+0x7fc>
   127c8:	ldr	r3, [pc, #2392]	; 13128 <__assert_fail@plt+0x1140>
   127cc:	mov	r1, #2
   127d0:	ldr	r0, [r3]
   127d4:	bl	1e7e0 <__assert_fail@plt+0xc7f8>
   127d8:	cmp	r0, #0
   127dc:	ldreq	r3, [r4, #16]
   127e0:	bne	14d54 <__assert_fail@plt+0x2d6c>
   127e4:	lsl	r3, r3, #23
   127e8:	mvn	r6, #0
   127ec:	lsr	r3, r3, #23
   127f0:	mvn	r7, #0
   127f4:	str	r3, [sp]
   127f8:	ldr	r2, [sp, #116]	; 0x74
   127fc:	mov	r3, #1
   12800:	mov	r1, #111	; 0x6f
   12804:	ldr	r0, [pc, #1996]	; 12fd8 <__assert_fail@plt+0xff0>
   12808:	strd	r6, [sp, #232]	; 0xe8
   1280c:	bl	20fec <__assert_fail@plt+0xf004>
   12810:	cmn	r0, #1
   12814:	str	r0, [sp, #140]	; 0x8c
   12818:	beq	14500 <__assert_fail@plt+0x2518>
   1281c:	ldr	r3, [pc, #1984]	; 12fe4 <__assert_fail@plt+0xffc>
   12820:	mov	r4, #1
   12824:	str	r3, [sp, #92]	; 0x5c
   12828:	ldr	r2, [r3]
   1282c:	strb	r4, [r5]
   12830:	cmp	r2, #3
   12834:	beq	146d0 <__assert_fail@plt+0x26e8>
   12838:	ldr	r3, [pc, #2264]	; 13118 <__assert_fail@plt+0x1130>
   1283c:	ldrb	r1, [fp, #56]	; 0x38
   12840:	ldrb	r3, [r3]
   12844:	str	r1, [sp, #24]
   12848:	str	r3, [sp, #112]	; 0x70
   1284c:	eor	r3, r3, #1
   12850:	cmp	r2, #6
   12854:	movne	r3, #0
   12858:	andeq	r3, r3, #1
   1285c:	cmp	r3, #0
   12860:	bne	14be4 <__assert_fail@plt+0x2bfc>
   12864:	ldr	r2, [sp, #112]	; 0x70
   12868:	cmp	r2, #0
   1286c:	bne	153d8 <__assert_fail@plt+0x33f0>
   12870:	ldr	r3, [pc, #2216]	; 13120 <__assert_fail@plt+0x1138>
   12874:	ldr	r3, [r3]
   12878:	cmp	r3, #0
   1287c:	beq	147dc <__assert_fail@plt+0x27f4>
   12880:	ldr	r4, [pc, #2208]	; 13128 <__assert_fail@plt+0x1140>
   12884:	ldr	r5, [pc, #2048]	; 1308c <__assert_fail@plt+0x10a4>
   12888:	ldr	r1, [sp, #172]	; 0xac
   1288c:	ldr	r0, [r4]
   12890:	bl	1585c <__assert_fail@plt+0x3874>
   12894:	ldr	r3, [r5]
   12898:	cmp	r3, #1
   1289c:	beq	12de4 <__assert_fail@plt+0xdfc>
   128a0:	ldr	r0, [r4]
   128a4:	ldr	r1, [sp, #116]	; 0x74
   128a8:	bl	11a48 <strcmp@plt>
   128ac:	subs	r4, r0, #0
   128b0:	movne	r8, #1
   128b4:	moveq	r8, #0
   128b8:	movne	r4, #0
   128bc:	bne	128cc <__assert_fail@plt+0x8e4>
   128c0:	bl	188d8 <__assert_fail@plt+0x68f0>
   128c4:	subs	r8, r0, #0
   128c8:	movne	r4, #1
   128cc:	ldr	r2, [pc, #1812]	; 12fe8 <__assert_fail@plt+0x1000>
   128d0:	ldr	r3, [sp, #172]	; 0xac
   128d4:	ldr	r1, [pc, #1808]	; 12fec <__assert_fail@plt+0x1004>
   128d8:	ldrb	r0, [r2]
   128dc:	ldr	r2, [pc, #1804]	; 12ff0 <__assert_fail@plt+0x1008>
   128e0:	and	r3, r3, #61440	; 0xf000
   128e4:	cmp	r0, #0
   128e8:	ldr	r6, [pc, #1796]	; 12ff4 <__assert_fail@plt+0x100c>
   128ec:	moveq	r6, r2
   128f0:	ldr	r2, [pc, #1792]	; 12ff8 <__assert_fail@plt+0x1010>
   128f4:	cmp	r3, #40960	; 0xa000
   128f8:	ldr	r0, [sp, #116]	; 0x74
   128fc:	moveq	r7, r1
   12900:	movne	r7, r2
   12904:	bl	2e970 <__assert_fail@plt+0x1c988>
   12908:	cmp	r8, #0
   1290c:	mov	r3, r0
   12910:	beq	12d9c <__assert_fail@plt+0xdb4>
   12914:	mov	ip, #32
   12918:	mov	r2, r7
   1291c:	mov	r1, r6
   12920:	str	ip, [sp]
   12924:	ldr	r0, [pc, #1744]	; 12ffc <__assert_fail@plt+0x1014>
   12928:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1292c:	cmp	r4, #0
   12930:	beq	149a4 <__assert_fail@plt+0x29bc>
   12934:	bl	188c0 <__assert_fail@plt+0x68d8>
   12938:	cmp	r0, #0
   1293c:	ldrne	r4, [pc, #1724]	; 13000 <__assert_fail@plt+0x1018>
   12940:	beq	153c0 <__assert_fail@plt+0x33d8>
   12944:	ldr	r3, [pc, #2012]	; 13128 <__assert_fail@plt+0x1140>
   12948:	mov	r0, #0
   1294c:	ldr	r6, [r3]
   12950:	bl	188a4 <__assert_fail@plt+0x68bc>
   12954:	mov	r1, r0
   12958:	mov	r0, r6
   1295c:	bl	11a48 <strcmp@plt>
   12960:	clz	r0, r0
   12964:	lsr	r0, r0, #5
   12968:	bl	188a4 <__assert_fail@plt+0x68bc>
   1296c:	ldr	r1, [pc, #1680]	; 13004 <__assert_fail@plt+0x101c>
   12970:	mov	r3, r0
   12974:	mov	r2, r4
   12978:	ldr	r0, [pc, #1672]	; 13008 <__assert_fail@plt+0x1020>
   1297c:	bl	1fc1c <__assert_fail@plt+0xdc34>
   12980:	b	12db4 <__assert_fail@plt+0xdcc>
   12984:	ldr	r3, [pc, #1624]	; 12fe4 <__assert_fail@plt+0xffc>
   12988:	mov	r2, #5
   1298c:	str	r2, [r3]
   12990:	ldr	r8, [fp, #32]
   12994:	ldr	r7, [fp]
   12998:	b	121c0 <__assert_fail@plt+0x1d8>
   1299c:	ldr	r3, [pc, #1640]	; 1300c <__assert_fail@plt+0x1024>
   129a0:	mov	r2, #1
   129a4:	strb	r2, [r3]
   129a8:	b	12990 <__assert_fail@plt+0x9a8>
   129ac:	ldr	r3, [pc, #1752]	; 1308c <__assert_fail@plt+0x10a4>
   129b0:	mov	r2, #1
   129b4:	str	r2, [r3]
   129b8:	b	12990 <__assert_fail@plt+0x9a8>
   129bc:	ldr	r0, [r5]
   129c0:	bl	2f518 <renameat2@@Base+0x804>
   129c4:	str	r0, [fp, #36]	; 0x24
   129c8:	b	12990 <__assert_fail@plt+0x9a8>
   129cc:	ldr	r2, [pc, #1596]	; 13010 <__assert_fail@plt+0x1028>
   129d0:	mov	r1, #0
   129d4:	ldr	r0, [r5]
   129d8:	bl	16444 <__assert_fail@plt+0x445c>
   129dc:	ldr	r3, [pc, #1408]	; 12f64 <__assert_fail@plt+0xf7c>
   129e0:	str	r0, [r3]
   129e4:	b	12990 <__assert_fail@plt+0x9a8>
   129e8:	ldr	r0, [r5]
   129ec:	bl	2f518 <renameat2@@Base+0x804>
   129f0:	ldr	r3, [pc, #1832]	; 13120 <__assert_fail@plt+0x1138>
   129f4:	str	r0, [r3]
   129f8:	b	12990 <__assert_fail@plt+0x9a8>
   129fc:	ldr	r3, [pc, #1504]	; 12fe4 <__assert_fail@plt+0xffc>
   12a00:	mov	r2, #2
   12a04:	str	r2, [r3]
   12a08:	b	12990 <__assert_fail@plt+0x9a8>
   12a0c:	ldr	r4, [r5]
   12a10:	mov	r7, #1
   12a14:	cmp	r4, #0
   12a18:	strb	r7, [fp, #56]	; 0x38
   12a1c:	beq	14994 <__assert_fail@plt+0x29ac>
   12a20:	ldr	r1, [pc, #1516]	; 13014 <__assert_fail@plt+0x102c>
   12a24:	mov	r0, r4
   12a28:	bl	11a48 <strcmp@plt>
   12a2c:	cmp	r0, #0
   12a30:	beq	14994 <__assert_fail@plt+0x29ac>
   12a34:	mov	r0, r4
   12a38:	ldr	r1, [pc, #1496]	; 13018 <__assert_fail@plt+0x1030>
   12a3c:	bl	11a48 <strcmp@plt>
   12a40:	cmp	r0, #0
   12a44:	bne	15454 <__assert_fail@plt+0x346c>
   12a48:	ldr	r3, [pc, #1484]	; 1301c <__assert_fail@plt+0x1034>
   12a4c:	str	r7, [r3]
   12a50:	b	12990 <__assert_fail@plt+0x9a8>
   12a54:	ldr	r3, [pc, #1476]	; 13020 <__assert_fail@plt+0x1038>
   12a58:	mov	r2, #1
   12a5c:	strb	r2, [r3]
   12a60:	b	12990 <__assert_fail@plt+0x9a8>
   12a64:	ldr	r3, [pc, #1400]	; 12fe4 <__assert_fail@plt+0xffc>
   12a68:	mov	r2, #3
   12a6c:	str	r2, [r3]
   12a70:	b	12990 <__assert_fail@plt+0x9a8>
   12a74:	ldr	r0, [r5]
   12a78:	bl	11ba4 <chdir@plt>
   12a7c:	cmp	r0, #0
   12a80:	bge	12990 <__assert_fail@plt+0x9a8>
   12a84:	ldr	r0, [r5]
   12a88:	bl	2e970 <__assert_fail@plt+0x1c988>
   12a8c:	mov	r1, r0
   12a90:	ldr	r0, [pc, #1420]	; 13024 <__assert_fail@plt+0x103c>
   12a94:	bl	1f774 <__assert_fail@plt+0xd78c>
   12a98:	ldr	r3, [pc, #1348]	; 12fe4 <__assert_fail@plt+0xffc>
   12a9c:	mov	r2, #1
   12aa0:	str	r2, [r3]
   12aa4:	b	12990 <__assert_fail@plt+0x9a8>
   12aa8:	ldr	r4, [r6]
   12aac:	mov	r3, #1
   12ab0:	sub	r8, r8, r4
   12ab4:	cmp	r8, #3
   12ab8:	strb	r3, [fp, #40]	; 0x28
   12abc:	bne	12990 <__assert_fail@plt+0x9a8>
   12ac0:	sub	r3, r4, #-1073741823	; 0xc0000001
   12ac4:	ldr	r1, [pc, #1372]	; 13028 <__assert_fail@plt+0x1040>
   12ac8:	ldr	r0, [r7, r3, lsl #2]
   12acc:	lsl	r8, r3, #2
   12ad0:	bl	11a48 <strcmp@plt>
   12ad4:	cmp	r0, #0
   12ad8:	bne	12990 <__assert_fail@plt+0x9a8>
   12adc:	add	r7, r7, r8
   12ae0:	ldr	r2, [r7, #4]
   12ae4:	ldrb	r3, [r2]
   12ae8:	cmp	r3, #45	; 0x2d
   12aec:	beq	1541c <__assert_fail@plt+0x3434>
   12af0:	ldr	r3, [r7, #8]
   12af4:	ldrb	r1, [r3]
   12af8:	cmp	r1, #45	; 0x2d
   12afc:	bne	12b0c <__assert_fail@plt+0xb24>
   12b00:	ldrb	r3, [r3, #1]
   12b04:	cmp	r3, #0
   12b08:	bne	12990 <__assert_fail@plt+0x9a8>
   12b0c:	ldr	r3, [r7, #12]
   12b10:	ldrb	r1, [r3]
   12b14:	cmp	r1, #45	; 0x2d
   12b18:	bne	12b28 <__assert_fail@plt+0xb40>
   12b1c:	ldrb	r3, [r3, #1]
   12b20:	cmp	r3, #0
   12b24:	bne	12990 <__assert_fail@plt+0x9a8>
   12b28:	ldr	r3, [pc, #1372]	; 1308c <__assert_fail@plt+0x10a4>
   12b2c:	add	r4, r4, #1
   12b30:	str	r4, [r6]
   12b34:	ldr	r3, [r3]
   12b38:	str	r2, [r5]
   12b3c:	cmp	r3, #1
   12b40:	beq	12b50 <__assert_fail@plt+0xb68>
   12b44:	mov	r1, r2
   12b48:	ldr	r0, [pc, #1244]	; 1302c <__assert_fail@plt+0x1044>
   12b4c:	bl	1fc1c <__assert_fail@plt+0xdc34>
   12b50:	ldr	r0, [r5]
   12b54:	ldrb	r3, [r0]
   12b58:	cmp	r3, #0
   12b5c:	beq	1543c <__assert_fail@plt+0x3454>
   12b60:	bl	2f518 <renameat2@@Base+0x804>
   12b64:	ldr	r3, [pc, #1220]	; 13030 <__assert_fail@plt+0x1048>
   12b68:	str	r0, [r3]
   12b6c:	b	12990 <__assert_fail@plt+0x9a8>
   12b70:	ldr	r2, [pc, #1212]	; 13034 <__assert_fail@plt+0x104c>
   12b74:	mov	r1, #1
   12b78:	ldr	r0, [r5]
   12b7c:	bl	16444 <__assert_fail@plt+0x445c>
   12b80:	ldr	r3, [pc, #1020]	; 12f84 <__assert_fail@plt+0xf9c>
   12b84:	str	r0, [r3]
   12b88:	b	12990 <__assert_fail@plt+0x9a8>
   12b8c:	ldr	r3, [pc, #1288]	; 1309c <__assert_fail@plt+0x10b4>
   12b90:	mov	r2, #1
   12b94:	strb	r2, [r3]
   12b98:	b	12990 <__assert_fail@plt+0x9a8>
   12b9c:	ldr	r0, [r5]
   12ba0:	bl	2f518 <renameat2@@Base+0x804>
   12ba4:	str	r0, [fp, #52]	; 0x34
   12ba8:	b	12990 <__assert_fail@plt+0x9a8>
   12bac:	ldr	r3, [pc, #1024]	; 12fb4 <__assert_fail@plt+0xfcc>
   12bb0:	mov	r2, #1
   12bb4:	strb	r2, [r3]
   12bb8:	b	12990 <__assert_fail@plt+0x9a8>
   12bbc:	ldr	r0, [r5]
   12bc0:	ldrb	r3, [r0]
   12bc4:	cmp	r3, #0
   12bc8:	beq	1542c <__assert_fail@plt+0x3444>
   12bcc:	bl	2f518 <renameat2@@Base+0x804>
   12bd0:	ldr	r3, [pc, #1120]	; 13038 <__assert_fail@plt+0x1050>
   12bd4:	str	r0, [r3]
   12bd8:	b	12990 <__assert_fail@plt+0x9a8>
   12bdc:	ldr	r2, [r5]
   12be0:	ldr	r3, [pc, #1108]	; 1303c <__assert_fail@plt+0x1054>
   12be4:	strd	r2, [fp, #24]
   12be8:	b	12990 <__assert_fail@plt+0x9a8>
   12bec:	ldr	r3, [pc, #1100]	; 13040 <__assert_fail@plt+0x1058>
   12bf0:	mov	r2, #1
   12bf4:	strb	r2, [r3]
   12bf8:	b	12990 <__assert_fail@plt+0x9a8>
   12bfc:	ldr	r2, [pc, #1088]	; 13044 <__assert_fail@plt+0x105c>
   12c00:	mov	r3, #1
   12c04:	strb	r3, [fp, #57]	; 0x39
   12c08:	strb	r3, [r2]
   12c0c:	b	12990 <__assert_fail@plt+0x9a8>
   12c10:	ldr	r3, [pc, #1072]	; 13048 <__assert_fail@plt+0x1060>
   12c14:	mov	r2, #1
   12c18:	strb	r2, [r3]
   12c1c:	b	12990 <__assert_fail@plt+0x9a8>
   12c20:	mov	r1, #0
   12c24:	ldr	r2, [pc, #1056]	; 1304c <__assert_fail@plt+0x1064>
   12c28:	ldr	r0, [r5]
   12c2c:	bl	16444 <__assert_fail@plt+0x445c>
   12c30:	ldr	r3, [pc, #936]	; 12fe0 <__assert_fail@plt+0xff8>
   12c34:	asr	r1, r0, #31
   12c38:	strd	r0, [r3]
   12c3c:	b	12990 <__assert_fail@plt+0x9a8>
   12c40:	mov	r3, #1
   12c44:	strb	r3, [fp, #48]	; 0x30
   12c48:	b	12990 <__assert_fail@plt+0x9a8>
   12c4c:	ldr	r0, [r5]
   12c50:	bl	2f518 <renameat2@@Base+0x804>
   12c54:	str	r0, [fp, #44]	; 0x2c
   12c58:	b	12990 <__assert_fail@plt+0x9a8>
   12c5c:	ldr	r0, [r5]
   12c60:	ldrb	r3, [r0]
   12c64:	cmp	r3, #0
   12c68:	beq	15434 <__assert_fail@plt+0x344c>
   12c6c:	bl	2f518 <renameat2@@Base+0x804>
   12c70:	ldr	r3, [pc, #984]	; 13050 <__assert_fail@plt+0x1068>
   12c74:	str	r0, [r3]
   12c78:	b	12990 <__assert_fail@plt+0x9a8>
   12c7c:	ldr	r2, [pc, #976]	; 13054 <__assert_fail@plt+0x106c>
   12c80:	mov	r3, #1
   12c84:	strb	r3, [r2]
   12c88:	b	12990 <__assert_fail@plt+0x9a8>
   12c8c:	ldr	r4, [r5]
   12c90:	ldr	r1, [pc, #960]	; 13058 <__assert_fail@plt+0x1070>
   12c94:	mov	r0, r4
   12c98:	bl	11a48 <strcmp@plt>
   12c9c:	cmp	r0, #0
   12ca0:	bne	14d1c <__assert_fail@plt+0x2d34>
   12ca4:	ldr	r3, [pc, #820]	; 12fe0 <__assert_fail@plt+0xff8>
   12ca8:	str	r0, [r3, #8]
   12cac:	b	12990 <__assert_fail@plt+0x9a8>
   12cb0:	ldr	r4, [r5]
   12cb4:	ldr	r1, [pc, #928]	; 1305c <__assert_fail@plt+0x1074>
   12cb8:	mov	r0, r4
   12cbc:	bl	11a48 <strcmp@plt>
   12cc0:	cmp	r0, #0
   12cc4:	moveq	r3, #4
   12cc8:	streq	r3, [fp, #60]	; 0x3c
   12ccc:	beq	12990 <__assert_fail@plt+0x9a8>
   12cd0:	mov	r0, r4
   12cd4:	ldr	r1, [pc, #900]	; 13060 <__assert_fail@plt+0x1078>
   12cd8:	bl	11a48 <strcmp@plt>
   12cdc:	cmp	r0, #0
   12ce0:	bne	15454 <__assert_fail@plt+0x346c>
   12ce4:	mov	r3, #5
   12ce8:	str	r3, [fp, #60]	; 0x3c
   12cec:	b	12990 <__assert_fail@plt+0x9a8>
   12cf0:	mov	r3, #1
   12cf4:	strb	r3, [fp, #20]
   12cf8:	b	12990 <__assert_fail@plt+0x9a8>
   12cfc:	ldr	r3, [pc, #864]	; 13064 <__assert_fail@plt+0x107c>
   12d00:	mov	r2, #1
   12d04:	strb	r2, [r3]
   12d08:	b	12990 <__assert_fail@plt+0x9a8>
   12d0c:	ldr	r3, [pc, #888]	; 1308c <__assert_fail@plt+0x10a4>
   12d10:	mov	r2, #2
   12d14:	str	r2, [r3]
   12d18:	b	12990 <__assert_fail@plt+0x9a8>
   12d1c:	ldr	r3, [pc, #708]	; 12fe8 <__assert_fail@plt+0x1000>
   12d20:	mov	r2, #1
   12d24:	strb	r2, [r3]
   12d28:	b	12990 <__assert_fail@plt+0x9a8>
   12d2c:	ldr	r2, [pc, #820]	; 13068 <__assert_fail@plt+0x1080>
   12d30:	mov	r1, #1
   12d34:	ldr	r0, [r5]
   12d38:	bl	16444 <__assert_fail@plt+0x445c>
   12d3c:	ldr	r3, [pc, #808]	; 1306c <__assert_fail@plt+0x1084>
   12d40:	str	r0, [r3]
   12d44:	b	12990 <__assert_fail@plt+0x9a8>
   12d48:	bl	216b4 <__assert_fail@plt+0xf6cc>
   12d4c:	mov	r0, #0
   12d50:	bl	11d60 <exit@plt>
   12d54:	ldr	r2, [pc, #540]	; 12f78 <__assert_fail@plt+0xf90>
   12d58:	mov	r3, #1
   12d5c:	strb	r3, [r2]
   12d60:	b	12990 <__assert_fail@plt+0x9a8>
   12d64:	mov	r3, #0
   12d68:	strb	r3, [fp, #20]
   12d6c:	b	12990 <__assert_fail@plt+0x9a8>
   12d70:	ldr	r4, [r5]
   12d74:	mov	r3, #0
   12d78:	ldr	r1, [pc, #492]	; 12f6c <__assert_fail@plt+0xf84>
   12d7c:	mov	r0, r4
   12d80:	mov	r2, r3
   12d84:	bl	24828 <__assert_fail@plt+0x12840>
   12d88:	subs	r1, r0, #0
   12d8c:	blt	15444 <__assert_fail@plt+0x345c>
   12d90:	mov	r0, #0
   12d94:	bl	2e6bc <__assert_fail@plt+0x1c6d4>
   12d98:	b	12990 <__assert_fail@plt+0x9a8>
   12d9c:	mov	r0, #10
   12da0:	str	r0, [sp]
   12da4:	mov	r2, r7
   12da8:	mov	r1, r6
   12dac:	ldr	r0, [pc, #584]	; 12ffc <__assert_fail@plt+0x1014>
   12db0:	bl	1fc1c <__assert_fail@plt+0xdc34>
   12db4:	ldr	r3, [r5]
   12db8:	cmp	r3, #2
   12dbc:	bne	12de4 <__assert_fail@plt+0xdfc>
   12dc0:	ldr	r1, [pc, #852]	; 1311c <__assert_fail@plt+0x1134>
   12dc4:	ldr	r2, [pc, #676]	; 13070 <__assert_fail@plt+0x1088>
   12dc8:	ldr	r3, [pc, #676]	; 13074 <__assert_fail@plt+0x108c>
   12dcc:	ldrb	r1, [r1]
   12dd0:	ldr	r0, [pc, #672]	; 13078 <__assert_fail@plt+0x1090>
   12dd4:	cmp	r1, #0
   12dd8:	movne	r1, r2
   12ddc:	moveq	r1, r3
   12de0:	bl	1fc1c <__assert_fail@plt+0xdc34>
   12de4:	ldr	r2, [pc, #600]	; 13044 <__assert_fail@plt+0x105c>
   12de8:	mov	r3, #0
   12dec:	str	r3, [sp, #28]
   12df0:	strd	r2, [sp, #64]	; 0x40
   12df4:	str	r3, [sp, #12]
   12df8:	ldr	r3, [sp, #64]	; 0x40
   12dfc:	ldrb	r1, [r3]
   12e00:	ldr	r3, [sp, #92]	; 0x5c
   12e04:	ldr	r0, [r3]
   12e08:	bl	189f4 <__assert_fail@plt+0x6a0c>
   12e0c:	cmp	r0, #0
   12e10:	ble	1406c <__assert_fail@plt+0x2084>
   12e14:	ldrb	r3, [fp, #56]	; 0x38
   12e18:	cmp	r3, #0
   12e1c:	movne	r8, #0
   12e20:	movne	r9, #0
   12e24:	bne	12e68 <__assert_fail@plt+0xe80>
   12e28:	bl	18940 <__assert_fail@plt+0x6958>
   12e2c:	mov	r5, r0
   12e30:	mov	r4, r1
   12e34:	bl	18950 <__assert_fail@plt+0x6968>
   12e38:	mov	r3, r4
   12e3c:	mov	r2, r5
   12e40:	cmp	r5, r0
   12e44:	sbcs	ip, r4, r1
   12e48:	movlt	r3, r1
   12e4c:	ldr	r1, [pc, #396]	; 12fe0 <__assert_fail@plt+0xff8>
   12e50:	movlt	r2, r0
   12e54:	ldrd	r8, [r1]
   12e58:	cmp	r2, r8
   12e5c:	sbcs	r1, r3, r9
   12e60:	movlt	r8, r2
   12e64:	movlt	r9, r3
   12e68:	ldr	r3, [pc, #680]	; 13118 <__assert_fail@plt+0x1130>
   12e6c:	ldr	r2, [sp, #12]
   12e70:	ldrb	r3, [r3]
   12e74:	add	r2, r2, #1
   12e78:	str	r2, [sp, #12]
   12e7c:	cmp	r3, #0
   12e80:	movne	r4, #0
   12e84:	movne	r5, #0
   12e88:	beq	13510 <__assert_fail@plt+0x1528>
   12e8c:	str	r3, [sp, #16]
   12e90:	bl	188f0 <__assert_fail@plt+0x6908>
   12e94:	ldr	r3, [sp, #16]
   12e98:	mov	r6, #0
   12e9c:	mov	r7, #0
   12ea0:	ldr	sl, [pc, #660]	; 1313c <__assert_fail@plt+0x1154>
   12ea4:	ldm	sl, {r2, ip}
   12ea8:	adds	r2, r0, r2
   12eac:	str	r2, [sp, #84]	; 0x54
   12eb0:	adc	r2, r1, ip
   12eb4:	cmp	r3, #0
   12eb8:	str	r2, [sp, #88]	; 0x58
   12ebc:	beq	131ec <__assert_fail@plt+0x1204>
   12ec0:	ldr	r3, [sp, #112]	; 0x70
   12ec4:	cmp	r3, #0
   12ec8:	beq	136b0 <__assert_fail@plt+0x16c8>
   12ecc:	ldr	r3, [sp, #68]	; 0x44
   12ed0:	ldr	r2, [pc, #436]	; 1308c <__assert_fail@plt+0x10a4>
   12ed4:	add	r3, r3, #1
   12ed8:	str	r3, [sp, #68]	; 0x44
   12edc:	ldr	r2, [r2]
   12ee0:	ldr	r3, [pc, #560]	; 13118 <__assert_fail@plt+0x1130>
   12ee4:	cmp	r2, #2
   12ee8:	ldrb	r3, [r3]
   12eec:	beq	1369c <__assert_fail@plt+0x16b4>
   12ef0:	eor	r3, r3, #1
   12ef4:	cmp	r2, #1
   12ef8:	moveq	r3, #0
   12efc:	andne	r3, r3, #1
   12f00:	cmp	r3, #0
   12f04:	beq	12df8 <__assert_fail@plt+0xe10>
   12f08:	ldr	r4, [pc, #404]	; 130a4 <__assert_fail@plt+0x10bc>
   12f0c:	ldrd	r2, [sp, #84]	; 0x54
   12f10:	add	r0, sp, #500	; 0x1f4
   12f14:	bl	1f490 <__assert_fail@plt+0xd4a8>
   12f18:	ldr	r3, [pc, #504]	; 13118 <__assert_fail@plt+0x1130>
   12f1c:	ldrb	r7, [r3]
   12f20:	cmp	r7, #0
   12f24:	mov	r5, r0
   12f28:	beq	13cc4 <__assert_fail@plt+0x1cdc>
   12f2c:	ldr	r3, [pc, #448]	; 130f4 <__assert_fail@plt+0x110c>
   12f30:	str	r3, [sp]
   12f34:	mov	r2, r4
   12f38:	mov	r3, r5
   12f3c:	ldr	r1, [sp, #12]
   12f40:	ldr	r0, [pc, #308]	; 1307c <__assert_fail@plt+0x1094>
   12f44:	bl	1fc1c <__assert_fail@plt+0xdc34>
   12f48:	b	12df8 <__assert_fail@plt+0xe10>
   12f4c:	andeq	r7, r4, r8, lsl #30
   12f50:	andeq	r8, r4, r0, lsr #5
   12f54:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   12f58:	andeq	r8, r4, ip, ror r3
   12f5c:	andeq	sl, r4, r4, lsr #15
   12f60:	andeq	sl, r4, r0, ror r7
   12f64:	andeq	sl, r4, r8, ror r7
   12f68:			; <UNDEFINED> instruction: 0x000328bc
   12f6c:	andeq	r6, r3, r4, lsl lr
   12f70:	andeq	r2, r3, ip, asr #17
   12f74:	andeq	r8, r4, r4, lsr r3
   12f78:	andeq	sl, r4, r9, ror #14
   12f7c:	ldrdeq	r2, [r3], -ip
   12f80:	andeq	r2, r3, r8, ror #17
   12f84:	strdeq	sl, [r4], -r4
   12f88:	strdeq	r2, [r3], -r8
   12f8c:	strdeq	r2, [r3], -ip
   12f90:	andeq	sl, r4, r4, ror #10
   12f94:	andeq	r2, r3, r0, lsl r9
   12f98:	andeq	r2, r3, r8, lsr #18
   12f9c:	andeq	r5, r3, r4, lsl r3
   12fa0:	andeq	r6, r1, r8, lsl r5
   12fa4:	strdeq	r8, [r4], -r0
   12fa8:	andeq	r2, r3, r4, lsr r3
   12fac:	andeq	r8, r4, r8, lsl #6
   12fb0:	ldrdeq	r2, [r3], -r4
   12fb4:	strdeq	sl, [r4], -r8
   12fb8:	andeq	r0, r0, r1, lsl #2
   12fbc:	andeq	r2, r3, r4, lsl #17
   12fc0:	andeq	r8, r4, r4, lsl #6
   12fc4:	andeq	r2, r3, r4, lsr #22
   12fc8:	andeq	sl, r4, r0, lsr r8
   12fcc:	ldrdeq	sl, [r4], -r4
   12fd0:	andeq	r2, r3, ip, lsr #12
   12fd4:	andeq	sl, r4, r8, lsl #15
   12fd8:	andeq	sl, r4, r0, lsr #15
   12fdc:	andeq	sl, r4, sl, ror #14
   12fe0:	andeq	r8, r4, r0, lsr r2
   12fe4:	andeq	sl, r4, r0, ror #13
   12fe8:	andeq	sl, r4, r5, ror #13
   12fec:	muleq	r3, r0, r0
   12ff0:	andeq	r2, r3, r0, lsl r8
   12ff4:	andeq	r2, r3, r4, lsl #16
   12ff8:	andeq	r2, r3, r0, asr #2
   12ffc:	andeq	r2, r3, r4, lsl #31
   13000:	andeq	r2, r3, ip, lsl r8
   13004:	andeq	r2, r3, r4, lsr r8
   13008:	andeq	r2, r3, r8, lsr #24
   1300c:	andeq	sl, r4, r8, ror #14
   13010:	andeq	r2, r3, r4, lsl sl
   13014:	andeq	r2, r3, r4, lsl #20
   13018:	andeq	r2, r3, ip, lsl #20
   1301c:	andeq	sl, r4, ip, lsl #15
   13020:	andeq	sl, r4, r4, ror #13
   13024:	andeq	r2, r3, r4, asr #19
   13028:	andeq	r2, r3, r4, ror #18
   1302c:	andeq	r2, r3, r8, ror #18
   13030:	andeq	sl, r4, ip, asr #13
   13034:	strdeq	r2, [r3], -r0
   13038:	andeq	sl, r4, ip, ror #14
   1303c:	andeq	r2, r3, r0, lsr #20
   13040:	strdeq	sl, [r4], -r9
   13044:			; <UNDEFINED> instruction: 0x0004a6b8
   13048:	muleq	r4, sp, r7
   1304c:	andeq	r2, r3, r4, ror #19
   13050:	andeq	sl, r4, ip, ror #13
   13054:	andeq	sl, r4, ip, ror r7
   13058:	andeq	r2, r3, ip, lsr #21
   1305c:	muleq	r3, ip, sl
   13060:	andeq	r2, r3, r4, lsr #21
   13064:	muleq	r4, ip, r7
   13068:	andeq	r2, r3, r0, asr #20
   1306c:	ldrdeq	sl, [r4], -r8
   13070:	andeq	r2, r3, r0, asr #16
   13074:	andeq	r2, r3, r4, asr #16
   13078:	andeq	r2, r3, r8, lsr ip
   1307c:	andeq	r2, r3, ip, asr #27
   13080:	andeq	r2, r3, r4, asr r8
   13084:	andeq	r2, r3, r8, asr #16
   13088:	andeq	r2, r3, ip, lsl #25
   1308c:			; <UNDEFINED> instruction: 0x0004a6bc
   13090:	andeq	r2, r3, r4, ror #27
   13094:	andeq	r2, r3, r0, lsl #28
   13098:	andeq	r4, r3, r8, asr r6
   1309c:	strdeq	sl, [r4], -r1
   130a0:	muleq	r3, r8, r8
   130a4:	muleq	r3, r0, r8
   130a8:	andeq	r2, r3, r8, ror r8
   130ac:	andeq	r2, r3, r4, lsr sp
   130b0:	andeq	r2, r3, r8, lsr sp
   130b4:	muleq	r3, ip, sp
   130b8:	andeq	r2, r3, ip, lsl #27
   130bc:	andeq	r2, r3, r4, ror #26
   130c0:	andeq	r2, r3, ip, asr #26
   130c4:	andeq	r2, r3, r4, ror sp
   130c8:	andeq	r2, r3, ip, lsl r6
   130cc:	andeq	r2, r3, r8, asr sp
   130d0:	andeq	r2, r3, r0, lsl #27
   130d4:	andeq	r2, r3, r0, lsr r6
   130d8:	andeq	r2, r3, r0, lsr #17
   130dc:	andeq	r2, r3, ip, lsl #12
   130e0:	andeq	r2, r3, ip, lsl #26
   130e4:	andeq	r2, r3, r8, lsl sp
   130e8:	andeq	r2, r3, ip, lsl sp
   130ec:	andeq	r2, r3, r0, lsr #26
   130f0:	andeq	r2, r3, r8, lsr #26
   130f4:	strdeq	r5, [r3], -r8
   130f8:	andeq	r2, r3, ip, lsr #26
   130fc:			; <UNDEFINED> instruction: 0x000001b6
   13100:	andeq	r8, r4, r0, asr #6
   13104:	andeq	r2, r3, r4, ror #21
   13108:	andeq	r2, r3, ip, ror #25
   1310c:	andeq	r2, r3, r8, lsl #17
   13110:	andeq	r2, r3, r0, lsl #17
   13114:	andeq	sl, r4, r0, lsl #14
   13118:	ldrdeq	sl, [r4], -ip
   1311c:	strdeq	sl, [r4], -r0
   13120:	andeq	sl, r4, r4, asr #13
   13124:	andeq	r2, r3, r0, asr #28
   13128:	andeq	sl, r4, r4, ror r7
   1312c:			; <UNDEFINED> instruction: 0x0004a6b0
   13130:	andeq	sl, r4, r8, lsr #15
   13134:	ldrdeq	sl, [r4], -r0
   13138:	muleq	r4, r0, r7
   1313c:	andeq	sl, r4, r0, lsl #15
   13140:	strd	r2, [sp, #24]
   13144:	bl	18448 <__assert_fail@plt+0x6460>
   13148:	ldrd	r2, [sp, #24]
   1314c:	subs	r6, r0, #0
   13150:	beq	14378 <__assert_fail@plt+0x2390>
   13154:	mov	r0, r4
   13158:	mov	r1, r5
   1315c:	strd	r2, [sp, #24]
   13160:	bl	17024 <__assert_fail@plt+0x503c>
   13164:	mov	r6, r0
   13168:	mov	r7, r1
   1316c:	orrs	r3, r6, r7
   13170:	ldrd	r2, [sp, #24]
   13174:	beq	144e4 <__assert_fail@plt+0x24fc>
   13178:	ldr	r8, [sp, #64]	; 0x40
   1317c:	ldr	r2, [pc, #-260]	; 13080 <__assert_fail@plt+0x1098>
   13180:	ldr	r3, [pc, #-260]	; 13084 <__assert_fail@plt+0x109c>
   13184:	ldrb	r1, [r8]
   13188:	ldr	r0, [pc, #-264]	; 13088 <__assert_fail@plt+0x10a0>
   1318c:	cmp	r1, #0
   13190:	moveq	r3, r2
   13194:	mov	r1, r3
   13198:	bl	20598 <__assert_fail@plt+0xe5b0>
   1319c:	ldr	r3, [sp, #28]
   131a0:	cmp	r0, #0
   131a4:	beq	14478 <__assert_fail@plt+0x2490>
   131a8:	ldr	r1, [pc, #-152]	; 13118 <__assert_fail@plt+0x1130>
   131ac:	ldrb	r3, [r8]
   131b0:	ldr	r2, [sp, #24]
   131b4:	ldrb	r1, [r1]
   131b8:	eor	r3, r3, #1
   131bc:	strb	r3, [r8]
   131c0:	cmp	r1, #0
   131c4:	str	r1, [sp, #24]
   131c8:	bne	1533c <__assert_fail@plt+0x3354>
   131cc:	str	r0, [sp, #28]
   131d0:	ldr	sl, [pc, #-156]	; 1313c <__assert_fail@plt+0x1154>
   131d4:	ldr	r3, [sl]
   131d8:	ldr	r2, [sl, #4]
   131dc:	adds	r3, r6, r3
   131e0:	str	r3, [sp, #84]	; 0x54
   131e4:	adc	r3, r7, r2
   131e8:	str	r3, [sp, #88]	; 0x58
   131ec:	ldrb	r3, [fp, #56]	; 0x38
   131f0:	cmp	r3, #0
   131f4:	bne	13c5c <__assert_fail@plt+0x1c74>
   131f8:	cmp	r7, #0
   131fc:	cmpeq	r6, #1
   13200:	beq	14044 <__assert_fail@plt+0x205c>
   13204:	orrs	r3, r6, r7
   13208:	beq	12ec0 <__assert_fail@plt+0xed8>
   1320c:	bl	18900 <__assert_fail@plt+0x6918>
   13210:	mov	r3, r1
   13214:	mov	r2, r0
   13218:	adds	r1, r0, #1
   1321c:	strd	r2, [sp, #96]	; 0x60
   13220:	adc	r3, r3, #0
   13224:	str	r3, [sp, #132]	; 0x84
   13228:	str	r1, [sp, #128]	; 0x80
   1322c:	bl	18930 <__assert_fail@plt+0x6948>
   13230:	subs	r3, r6, #1
   13234:	str	r3, [sp, #120]	; 0x78
   13238:	sbc	r3, r7, #0
   1323c:	str	r3, [sp, #124]	; 0x7c
   13240:	ldr	r7, [sp, #176]	; 0xb0
   13244:	ldr	r3, [fp, #44]	; 0x2c
   13248:	mov	r8, r7
   1324c:	str	r3, [sp, #152]	; 0x98
   13250:	ldrd	r6, [sp, #128]	; 0x80
   13254:	strd	r0, [sp, #104]	; 0x68
   13258:	b	13264 <__assert_fail@plt+0x127c>
   1325c:	adds	r6, r6, #1
   13260:	adc	r7, r7, #0
   13264:	mov	r0, r6
   13268:	mov	r1, r7
   1326c:	bl	18974 <__assert_fail@plt+0x698c>
   13270:	cmp	r0, #61	; 0x3d
   13274:	cmpne	r0, #10
   13278:	moveq	r0, #1
   1327c:	movne	r0, #0
   13280:	beq	1325c <__assert_fail@plt+0x1274>
   13284:	mov	r3, r7
   13288:	mov	r7, r8
   1328c:	mov	r8, r0
   13290:	ldrd	r0, [sp, #96]	; 0x60
   13294:	mov	r2, r6
   13298:	cmp	r0, #1
   1329c:	sbcs	r1, r1, #0
   132a0:	strd	r2, [sp, #128]	; 0x80
   132a4:	blt	14a24 <__assert_fail@plt+0x2a3c>
   132a8:	str	r8, [sp, #16]
   132ac:	strd	r4, [sp, #128]	; 0x80
   132b0:	str	fp, [sp, #144]	; 0x90
   132b4:	str	sl, [sp, #148]	; 0x94
   132b8:	ldr	r6, [pc, #-400]	; 13130 <__assert_fail@plt+0x1148>
   132bc:	mov	r8, #1
   132c0:	mov	r9, #0
   132c4:	ldr	r5, [sp, #152]	; 0x98
   132c8:	mov	sl, r2
   132cc:	mov	fp, r3
   132d0:	b	13348 <__assert_fail@plt+0x1360>
   132d4:	ldrd	r2, [sp, #104]	; 0x68
   132d8:	str	r0, [sp, #72]	; 0x48
   132dc:	cmp	r2, sl
   132e0:	sbcs	r3, r3, fp
   132e4:	blt	14678 <__assert_fail@plt+0x2690>
   132e8:	mov	r0, sl
   132ec:	mov	r1, fp
   132f0:	bl	18974 <__assert_fail@plt+0x698c>
   132f4:	ldr	r3, [sp, #72]	; 0x48
   132f8:	cmp	r0, #43	; 0x2b
   132fc:	beq	13bdc <__assert_fail@plt+0x1bf4>
   13300:	cmp	r3, r0
   13304:	bne	15588 <__assert_fail@plt+0x35a0>
   13308:	cmp	r3, #33	; 0x21
   1330c:	beq	13a5c <__assert_fail@plt+0x1a74>
   13310:	cmp	r3, #32
   13314:	bne	1559c <__assert_fail@plt+0x35b4>
   13318:	adds	r8, r8, #1
   1331c:	ldr	r3, [sp, #16]
   13320:	adc	r9, r9, #0
   13324:	adds	sl, sl, #1
   13328:	adc	fp, fp, #0
   1332c:	cmp	r5, #0
   13330:	cmpne	r3, #0
   13334:	bne	13c90 <__assert_fail@plt+0x1ca8>
   13338:	ldrd	r2, [sp, #96]	; 0x60
   1333c:	cmp	r2, r8
   13340:	sbcs	r3, r3, r9
   13344:	blt	13410 <__assert_fail@plt+0x1428>
   13348:	mov	r0, r8
   1334c:	mov	r1, r9
   13350:	bl	18974 <__assert_fail@plt+0x698c>
   13354:	cmp	r0, #45	; 0x2d
   13358:	bne	132d4 <__assert_fail@plt+0x12ec>
   1335c:	ldrb	r3, [sp, #180]	; 0xb4
   13360:	cmp	r3, #0
   13364:	beq	155b0 <__assert_fail@plt+0x35c8>
   13368:	ldr	r3, [sp, #120]	; 0x78
   1336c:	add	r0, sp, #176	; 0xb0
   13370:	adds	r2, r8, r3
   13374:	ldr	r3, [sp, #124]	; 0x7c
   13378:	adc	r3, r9, r3
   1337c:	subs	r2, r2, #1
   13380:	sbc	r3, r3, #0
   13384:	bl	16c90 <__assert_fail@plt+0x4ca8>
   13388:	cmp	r0, #0
   1338c:	beq	1468c <__assert_fail@plt+0x26a4>
   13390:	cmp	r5, #0
   13394:	beq	133e0 <__assert_fail@plt+0x13f8>
   13398:	ldr	r3, [sp, #16]
   1339c:	cmp	r3, #0
   133a0:	beq	13d80 <__assert_fail@plt+0x1d98>
   133a4:	ldr	r3, [sp, #16]
   133a8:	cmp	r3, #2
   133ac:	beq	143b4 <__assert_fail@plt+0x23cc>
   133b0:	mov	r0, r7
   133b4:	bl	11acc <ferror@plt>
   133b8:	subs	r3, r0, #0
   133bc:	bne	139b8 <__assert_fail@plt+0x19d0>
   133c0:	mov	r2, r7
   133c4:	mov	r0, r8
   133c8:	mov	r1, r9
   133cc:	str	r3, [sp, #72]	; 0x48
   133d0:	bl	1899c <__assert_fail@plt+0x69b4>
   133d4:	ldr	r3, [sp, #72]	; 0x48
   133d8:	strb	r3, [sp, #181]	; 0xb5
   133dc:	strb	r0, [sp, #180]	; 0xb4
   133e0:	ldr	r3, [r6]
   133e4:	ldr	r2, [r6, #4]
   133e8:	adds	r3, r3, #1
   133ec:	adc	r2, r2, #0
   133f0:	str	r3, [r6]
   133f4:	str	r2, [r6, #4]
   133f8:	ldrd	r2, [sp, #96]	; 0x60
   133fc:	adds	r8, r8, #1
   13400:	adc	r9, r9, #0
   13404:	cmp	r2, r8
   13408:	sbcs	r3, r3, r9
   1340c:	bge	13348 <__assert_fail@plt+0x1360>
   13410:	ldrd	r0, [sp, #104]	; 0x68
   13414:	mov	r2, sl
   13418:	mov	r3, fp
   1341c:	cmp	r0, r2
   13420:	sbcs	r1, r1, r3
   13424:	ldrd	r4, [sp, #128]	; 0x80
   13428:	ldr	fp, [sp, #144]	; 0x90
   1342c:	strd	r2, [sp, #128]	; 0x80
   13430:	ldr	sl, [sp, #148]	; 0x94
   13434:	blt	1344c <__assert_fail@plt+0x1464>
   13438:	mov	r0, r2
   1343c:	mov	r1, r3
   13440:	bl	18974 <__assert_fail@plt+0x698c>
   13444:	cmp	r0, #43	; 0x2b
   13448:	beq	14a54 <__assert_fail@plt+0x2a6c>
   1344c:	ldr	r3, [sp, #152]	; 0x98
   13450:	ldr	r2, [sp, #16]
   13454:	cmp	r3, #0
   13458:	cmpne	r2, #0
   1345c:	bne	147ac <__assert_fail@plt+0x27c4>
   13460:	bl	18920 <__assert_fail@plt+0x6938>
   13464:	mov	r6, r0
   13468:	mov	r7, r1
   1346c:	bl	18900 <__assert_fail@plt+0x6918>
   13470:	ldr	r3, [sl]
   13474:	ldr	ip, [sl, #4]
   13478:	ldrb	r2, [fp, #56]	; 0x38
   1347c:	subs	r0, r6, r0
   13480:	sbc	r1, r7, r1
   13484:	adds	r3, r3, r0
   13488:	adc	ip, ip, r1
   1348c:	cmp	r2, #0
   13490:	stm	sl, {r3, ip}
   13494:	bne	12df8 <__assert_fail@plt+0xe10>
   13498:	ldr	r3, [pc, #-1044]	; 1308c <__assert_fail@plt+0x10a4>
   1349c:	ldr	r3, [r3]
   134a0:	cmp	r3, #2
   134a4:	beq	145e0 <__assert_fail@plt+0x25f8>
   134a8:	cmp	r3, #1
   134ac:	beq	12df8 <__assert_fail@plt+0xe10>
   134b0:	orrs	r3, r4, r5
   134b4:	beq	1460c <__assert_fail@plt+0x2624>
   134b8:	add	r6, sp, #500	; 0x1f4
   134bc:	ldrd	r2, [sp, #84]	; 0x54
   134c0:	mov	r0, r6
   134c4:	bl	1f490 <__assert_fail@plt+0xd4a8>
   134c8:	ldr	r1, [sp, #12]
   134cc:	mov	r2, r0
   134d0:	ldr	r0, [pc, #-1096]	; 13090 <__assert_fail@plt+0x10a8>
   134d4:	bl	1fc1c <__assert_fail@plt+0xdc34>
   134d8:	mov	r2, r4
   134dc:	mov	r3, r5
   134e0:	mov	r0, r6
   134e4:	bl	1f490 <__assert_fail@plt+0xd4a8>
   134e8:	mov	r1, r0
   134ec:	ldr	r0, [pc, #-1120]	; 13094 <__assert_fail@plt+0x10ac>
   134f0:	bl	1fc1c <__assert_fail@plt+0xdc34>
   134f4:	ldr	r8, [pc, #-964]	; 13138 <__assert_fail@plt+0x1150>
   134f8:	ldrd	r2, [r8]
   134fc:	orrs	r1, r2, r3
   13500:	bne	14648 <__assert_fail@plt+0x2660>
   13504:	ldr	r0, [pc, #-1140]	; 13098 <__assert_fail@plt+0x10b0>
   13508:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1350c:	b	12df8 <__assert_fail@plt+0xe10>
   13510:	strd	r8, [sp, #16]
   13514:	ldr	sl, [pc, #-1152]	; 1309c <__assert_fail@plt+0x10b4>
   13518:	ldr	r9, [sp, #28]
   1351c:	mov	r4, #0
   13520:	mov	r5, #0
   13524:	mov	r0, r4
   13528:	mov	r1, r5
   1352c:	bl	17024 <__assert_fail@plt+0x503c>
   13530:	orrs	r3, r0, r1
   13534:	moveq	r2, #1
   13538:	movne	r2, #0
   1353c:	orrs	r3, r4, r5
   13540:	moveq	r3, r2
   13544:	movne	r3, #1
   13548:	cmp	r3, #0
   1354c:	mov	r6, r0
   13550:	mov	r7, r1
   13554:	bne	135b8 <__assert_fail@plt+0x15d0>
   13558:	ldr	r8, [pc, #-1064]	; 13138 <__assert_fail@plt+0x1150>
   1355c:	ldr	r3, [pc, #-1100]	; 13118 <__assert_fail@plt+0x1130>
   13560:	ldrd	r0, [r8]
   13564:	ldrb	r3, [r3]
   13568:	orrs	r2, r0, r1
   1356c:	ldr	r2, [sp, #80]	; 0x50
   13570:	movne	r9, r2
   13574:	cmp	r3, #0
   13578:	str	r9, [sp, #28]
   1357c:	beq	131d0 <__assert_fail@plt+0x11e8>
   13580:	ldr	r0, [sp, #176]	; 0xb0
   13584:	cmp	r0, #0
   13588:	beq	143a4 <__assert_fail@plt+0x23bc>
   1358c:	ldr	r3, [pc, #-1140]	; 13120 <__assert_fail@plt+0x1138>
   13590:	ldr	r8, [r3]
   13594:	cmp	r8, #0
   13598:	beq	13678 <__assert_fail@plt+0x1690>
   1359c:	ldr	r3, [pc, #-1164]	; 13118 <__assert_fail@plt+0x1130>
   135a0:	mov	r0, r6
   135a4:	mov	r1, r7
   135a8:	ldrb	r3, [r3]
   135ac:	orrs	r2, r6, r7
   135b0:	bne	12ea0 <__assert_fail@plt+0xeb8>
   135b4:	b	12e8c <__assert_fail@plt+0xea4>
   135b8:	ldr	r1, [sp, #12]
   135bc:	cmp	r1, #1
   135c0:	movne	r9, #0
   135c4:	andeq	r9, r2, #1
   135c8:	cmp	r9, #0
   135cc:	beq	155c4 <__assert_fail@plt+0x35dc>
   135d0:	ldrb	r2, [sl]
   135d4:	ldr	r1, [sp, #24]
   135d8:	orr	r2, r1, r2
   135dc:	ands	r2, r2, #255	; 0xff
   135e0:	bne	13638 <__assert_fail@plt+0x1650>
   135e4:	ldr	r1, [sp, #64]	; 0x40
   135e8:	ldrb	r0, [r1]
   135ec:	ldrb	r1, [fp, #57]	; 0x39
   135f0:	cmp	r0, r1
   135f4:	beq	13140 <__assert_fail@plt+0x1158>
   135f8:	ldr	r1, [pc, #-1256]	; 13118 <__assert_fail@plt+0x1130>
   135fc:	ldrb	r1, [r1]
   13600:	cmp	r1, #0
   13604:	str	r1, [sp, #24]
   13608:	bne	1469c <__assert_fail@plt+0x26b4>
   1360c:	adds	r4, r4, #1
   13610:	adc	r5, r5, #0
   13614:	ldrd	r0, [sp, #16]
   13618:	mov	r9, r3
   1361c:	cmp	r0, r4
   13620:	sbcs	r2, r1, r5
   13624:	bge	13524 <__assert_fail@plt+0x153c>
   13628:	str	r3, [sp, #28]
   1362c:	ldr	r3, [pc, #-1308]	; 13118 <__assert_fail@plt+0x1130>
   13630:	ldrb	r3, [r3]
   13634:	b	12e8c <__assert_fail@plt+0xea4>
   13638:	ldr	r2, [pc, #-1320]	; 13118 <__assert_fail@plt+0x1130>
   1363c:	ldrb	r2, [r2]
   13640:	cmp	r2, #0
   13644:	beq	1360c <__assert_fail@plt+0x1624>
   13648:	str	r9, [sp, #28]
   1364c:	ldr	r0, [sp, #176]	; 0xb0
   13650:	cmp	r0, #0
   13654:	ldreq	r3, [pc, #-1348]	; 13118 <__assert_fail@plt+0x1130>
   13658:	ldrbeq	r3, [r3]
   1365c:	beq	12e8c <__assert_fail@plt+0xea4>
   13660:	ldr	r3, [pc, #-1352]	; 13120 <__assert_fail@plt+0x1138>
   13664:	mov	r6, #0
   13668:	mov	r7, #0
   1366c:	ldr	r8, [r3]
   13670:	cmp	r8, #0
   13674:	bne	1359c <__assert_fail@plt+0x15b4>
   13678:	bl	11e5c <fclose@plt>
   1367c:	ldr	r3, [pc, #-1388]	; 13118 <__assert_fail@plt+0x1130>
   13680:	mvn	r2, #0
   13684:	mov	r0, r6
   13688:	ldrb	r3, [r3]
   1368c:	mov	r1, r7
   13690:	str	r2, [sp, #140]	; 0x8c
   13694:	str	r8, [sp, #176]	; 0xb0
   13698:	b	135ac <__assert_fail@plt+0x15c4>
   1369c:	ldr	r2, [pc, #-1540]	; 130a0 <__assert_fail@plt+0x10b8>
   136a0:	cmp	r3, #0
   136a4:	ldr	r4, [pc, #-1544]	; 130a4 <__assert_fail@plt+0x10bc>
   136a8:	movne	r4, r2
   136ac:	b	12f0c <__assert_fail@plt+0xf24>
   136b0:	ldrb	r3, [fp, #8]
   136b4:	ldr	r2, [sp, #64]	; 0x40
   136b8:	cmp	r3, #0
   136bc:	ldrb	r7, [r2]
   136c0:	beq	13fd0 <__assert_fail@plt+0x1fe8>
   136c4:	ldr	r3, [fp, #60]	; 0x3c
   136c8:	cmp	r3, #5
   136cc:	beq	13da8 <__assert_fail@plt+0x1dc0>
   136d0:	cmp	r3, #0
   136d4:	ldr	r3, [sp, #92]	; 0x5c
   136d8:	ldr	r5, [r3]
   136dc:	bne	136e8 <__assert_fail@plt+0x1700>
   136e0:	cmp	r5, #5
   136e4:	beq	13da8 <__assert_fail@plt+0x1dc0>
   136e8:	bl	18930 <__assert_fail@plt+0x6948>
   136ec:	mov	r8, r0
   136f0:	mov	r9, r1
   136f4:	bl	188f0 <__assert_fail@plt+0x6908>
   136f8:	ldm	sl, {r4, r6}
   136fc:	adds	r3, r0, r4
   13700:	str	r3, [sp, #32]
   13704:	adc	r3, r1, r6
   13708:	str	r3, [sp, #36]	; 0x24
   1370c:	bl	18910 <__assert_fail@plt+0x6928>
   13710:	adds	r3, r4, r0
   13714:	str	r3, [sp, #40]	; 0x28
   13718:	adc	r3, r6, r1
   1371c:	str	r3, [sp, #44]	; 0x2c
   13720:	bl	18900 <__assert_fail@plt+0x6918>
   13724:	ldrd	r2, [sp, #32]
   13728:	adds	r0, r2, r0
   1372c:	adc	r1, r3, r1
   13730:	subs	r3, r0, #1
   13734:	str	r3, [sp, #48]	; 0x30
   13738:	sbc	r3, r1, #0
   1373c:	str	r3, [sp, #52]	; 0x34
   13740:	bl	18920 <__assert_fail@plt+0x6938>
   13744:	ldrd	r2, [sp, #40]	; 0x28
   13748:	adds	r0, r2, r0
   1374c:	adc	r1, r3, r1
   13750:	subs	r3, r0, #1
   13754:	str	r3, [sp, #56]	; 0x38
   13758:	sbc	r3, r1, #0
   1375c:	str	r3, [sp, #60]	; 0x3c
   13760:	bl	1ce70 <__assert_fail@plt+0xae88>
   13764:	cmp	r5, #3
   13768:	mov	r4, r0
   1376c:	bgt	14024 <__assert_fail@plt+0x203c>
   13770:	ldr	sl, [pc, #-1744]	; 130a8 <__assert_fail@plt+0x10c0>
   13774:	ldr	r3, [pc, #-1672]	; 130f4 <__assert_fail@plt+0x110c>
   13778:	str	r3, [sp, #16]
   1377c:	ldr	r3, [sp, #68]	; 0x44
   13780:	ldr	r5, [fp, #68]	; 0x44
   13784:	cmp	r3, #0
   13788:	bne	137d4 <__assert_fail@plt+0x17ec>
   1378c:	mov	r0, #2
   13790:	bl	188a4 <__assert_fail@plt+0x68bc>
   13794:	subs	r3, r0, #0
   13798:	beq	137b0 <__assert_fail@plt+0x17c8>
   1379c:	mov	r0, r5
   137a0:	ldr	r2, [pc, #-1736]	; 130e0 <__assert_fail@plt+0x10f8>
   137a4:	mov	r1, #1
   137a8:	bl	11e38 <__fprintf_chk@plt>
   137ac:	ldr	r5, [fp, #68]	; 0x44
   137b0:	mov	r0, r5
   137b4:	mov	r2, r7
   137b8:	ldr	r1, [pc, #-1812]	; 130ac <__assert_fail@plt+0x10c4>
   137bc:	bl	16670 <__assert_fail@plt+0x4688>
   137c0:	eor	r2, r7, #1
   137c4:	ldr	r1, [pc, #-1768]	; 130e4 <__assert_fail@plt+0x10fc>
   137c8:	ldr	r0, [fp, #68]	; 0x44
   137cc:	bl	16670 <__assert_fail@plt+0x4688>
   137d0:	ldr	r5, [fp, #68]	; 0x44
   137d4:	cmp	r4, #0
   137d8:	ldr	r3, [pc, #-1772]	; 130f4 <__assert_fail@plt+0x110c>
   137dc:	mov	r0, r5
   137e0:	movne	r3, r4
   137e4:	ldr	r2, [pc, #-1852]	; 130b0 <__assert_fail@plt+0x10c8>
   137e8:	mov	r1, #1
   137ec:	bl	11e38 <__fprintf_chk@plt>
   137f0:	cmp	r8, #0
   137f4:	sbcs	r3, r9, #0
   137f8:	blt	12ecc <__assert_fail@plt+0xee4>
   137fc:	ldr	r7, [pc, #-1872]	; 130b4 <__assert_fail@plt+0x10cc>
   13800:	mov	r4, #0
   13804:	mov	r5, #0
   13808:	mov	r0, r4
   1380c:	mov	r1, r5
   13810:	bl	18974 <__assert_fail@plt+0x698c>
   13814:	sub	r2, r0, #10
   13818:	cmp	r2, #51	; 0x33
   1381c:	ldrls	pc, [pc, r2, lsl #2]
   13820:	b	1537c <__assert_fail@plt+0x3394>
   13824:	andeq	r3, r1, r8, lsl #18
   13828:	andeq	r5, r1, ip, ror r3
   1382c:	andeq	r5, r1, ip, ror r3
   13830:	andeq	r5, r1, ip, ror r3
   13834:	andeq	r5, r1, ip, ror r3
   13838:	andeq	r5, r1, ip, ror r3
   1383c:	andeq	r5, r1, ip, ror r3
   13840:	andeq	r5, r1, ip, ror r3
   13844:	andeq	r5, r1, ip, ror r3
   13848:	andeq	r5, r1, ip, ror r3
   1384c:	andeq	r5, r1, ip, ror r3
   13850:	andeq	r5, r1, ip, ror r3
   13854:	andeq	r5, r1, ip, ror r3
   13858:	andeq	r5, r1, ip, ror r3
   1385c:	andeq	r5, r1, ip, ror r3
   13860:	andeq	r5, r1, ip, ror r3
   13864:	andeq	r5, r1, ip, ror r3
   13868:	andeq	r5, r1, ip, ror r3
   1386c:	andeq	r5, r1, ip, ror r3
   13870:	andeq	r5, r1, ip, ror r3
   13874:	andeq	r5, r1, ip, ror r3
   13878:	andeq	r5, r1, ip, ror r3
   1387c:	strdeq	r3, [r1], -r4
   13880:	strdeq	r3, [r1], -r4
   13884:	andeq	r5, r1, ip, ror r3
   13888:	andeq	r5, r1, ip, ror r3
   1388c:	andeq	r5, r1, ip, ror r3
   13890:	andeq	r5, r1, ip, ror r3
   13894:	andeq	r5, r1, ip, ror r3
   13898:	andeq	r5, r1, ip, ror r3
   1389c:	andeq	r5, r1, ip, ror r3
   138a0:	andeq	r5, r1, ip, ror r3
   138a4:			; <UNDEFINED> instruction: 0x000139bc
   138a8:	strdeq	r3, [r1], -r4
   138ac:	andeq	r5, r1, ip, ror r3
   138b0:	strdeq	r3, [r1], -r4
   138b4:	andeq	r5, r1, ip, ror r3
   138b8:	andeq	r5, r1, ip, ror r3
   138bc:	andeq	r5, r1, ip, ror r3
   138c0:	andeq	r5, r1, ip, ror r3
   138c4:	andeq	r5, r1, ip, ror r3
   138c8:	andeq	r5, r1, ip, ror r3
   138cc:	andeq	r5, r1, ip, ror r3
   138d0:	andeq	r5, r1, ip, ror r3
   138d4:	andeq	r5, r1, ip, ror r3
   138d8:	andeq	r5, r1, ip, ror r3
   138dc:	andeq	r5, r1, ip, ror r3
   138e0:	andeq	r5, r1, ip, ror r3
   138e4:	andeq	r5, r1, ip, ror r3
   138e8:	andeq	r5, r1, ip, ror r3
   138ec:	andeq	r5, r1, ip, ror r3
   138f0:	andeq	r3, r1, r0, asr #18
   138f4:	mov	r3, r0
   138f8:	mov	r2, r7
   138fc:	mov	r1, #1
   13900:	ldr	r0, [fp, #68]	; 0x44
   13904:	bl	11e38 <__fprintf_chk@plt>
   13908:	ldr	r2, [fp, #68]	; 0x44
   1390c:	mov	r0, r4
   13910:	mov	r1, r5
   13914:	bl	1899c <__assert_fail@plt+0x69b4>
   13918:	ldr	r0, [fp, #68]	; 0x44
   1391c:	bl	11acc <ferror@plt>
   13920:	cmp	r0, #0
   13924:	bne	139b8 <__assert_fail@plt+0x19d0>
   13928:	adds	r4, r4, #1
   1392c:	adc	r5, r5, #0
   13930:	cmp	r8, r4
   13934:	sbcs	r3, r9, r5
   13938:	bge	13808 <__assert_fail@plt+0x1820>
   1393c:	b	12ecc <__assert_fail@plt+0xee4>
   13940:	ldrd	r2, [sp, #56]	; 0x38
   13944:	ldrd	r0, [sp, #40]	; 0x28
   13948:	ldr	r6, [fp, #68]	; 0x44
   1394c:	cmp	r2, r0
   13950:	sbcs	r3, r3, r1
   13954:	blt	13a44 <__assert_fail@plt+0x1a5c>
   13958:	ldrd	r2, [sp, #40]	; 0x28
   1395c:	ldrd	r0, [sp, #56]	; 0x38
   13960:	cmp	r3, r1
   13964:	cmpeq	r2, r0
   13968:	beq	13bb8 <__assert_fail@plt+0x1bd0>
   1396c:	ldrd	r2, [sp, #40]	; 0x28
   13970:	add	r0, sp, #524	; 0x20c
   13974:	bl	1f490 <__assert_fail@plt+0xd4a8>
   13978:	ldrd	r2, [sp, #56]	; 0x38
   1397c:	str	r0, [sp, #72]	; 0x48
   13980:	add	r0, sp, #548	; 0x224
   13984:	bl	1f490 <__assert_fail@plt+0xd4a8>
   13988:	ldr	r1, [sp, #72]	; 0x48
   1398c:	ldr	r2, [pc, #-2268]	; 130b8 <__assert_fail@plt+0x10d0>
   13990:	mov	r3, r1
   13994:	str	sl, [sp, #4]
   13998:	mov	r1, #1
   1399c:	str	r0, [sp]
   139a0:	mov	r0, r6
   139a4:	bl	11e38 <__fprintf_chk@plt>
   139a8:	ldr	r0, [fp, #68]	; 0x44
   139ac:	bl	11acc <ferror@plt>
   139b0:	cmp	r0, #0
   139b4:	beq	13928 <__assert_fail@plt+0x1940>
   139b8:	bl	1fadc <__assert_fail@plt+0xdaf4>
   139bc:	ldrd	r2, [sp, #48]	; 0x30
   139c0:	ldrd	r0, [sp, #32]
   139c4:	ldr	r6, [fp, #68]	; 0x44
   139c8:	cmp	r2, r0
   139cc:	sbcs	r3, r3, r1
   139d0:	blt	13a2c <__assert_fail@plt+0x1a44>
   139d4:	ldrd	r2, [sp, #32]
   139d8:	ldrd	r0, [sp, #48]	; 0x30
   139dc:	cmp	r3, r1
   139e0:	cmpeq	r2, r0
   139e4:	beq	13b90 <__assert_fail@plt+0x1ba8>
   139e8:	ldrd	r2, [sp, #32]
   139ec:	add	r0, sp, #524	; 0x20c
   139f0:	bl	1f490 <__assert_fail@plt+0xd4a8>
   139f4:	ldrd	r2, [sp, #48]	; 0x30
   139f8:	str	r0, [sp, #72]	; 0x48
   139fc:	add	r0, sp, #548	; 0x224
   13a00:	bl	1f490 <__assert_fail@plt+0xd4a8>
   13a04:	ldr	r1, [sp, #72]	; 0x48
   13a08:	ldr	r2, [sp, #16]
   13a0c:	mov	r3, r1
   13a10:	str	r2, [sp, #4]
   13a14:	mov	r1, #1
   13a18:	ldr	r2, [pc, #-2404]	; 130bc <__assert_fail@plt+0x10d4>
   13a1c:	str	r0, [sp]
   13a20:	mov	r0, r6
   13a24:	bl	11e38 <__fprintf_chk@plt>
   13a28:	b	13918 <__assert_fail@plt+0x1930>
   13a2c:	mov	r0, r6
   13a30:	ldr	r3, [sp, #16]
   13a34:	ldr	r2, [pc, #-2428]	; 130c0 <__assert_fail@plt+0x10d8>
   13a38:	mov	r1, #1
   13a3c:	bl	11e38 <__fprintf_chk@plt>
   13a40:	b	13918 <__assert_fail@plt+0x1930>
   13a44:	mov	r0, r6
   13a48:	mov	r3, sl
   13a4c:	ldr	r2, [pc, #-2448]	; 130c4 <__assert_fail@plt+0x10dc>
   13a50:	mov	r1, #1
   13a54:	bl	11e38 <__fprintf_chk@plt>
   13a58:	b	13918 <__assert_fail@plt+0x1930>
   13a5c:	ldrb	r3, [sp, #180]	; 0xb4
   13a60:	cmp	r3, #0
   13a64:	beq	1553c <__assert_fail@plt+0x3554>
   13a68:	ldr	r3, [sp, #120]	; 0x78
   13a6c:	add	r0, sp, #176	; 0xb0
   13a70:	adds	r2, r8, r3
   13a74:	ldr	r3, [sp, #124]	; 0x7c
   13a78:	adc	r3, r9, r3
   13a7c:	subs	r2, r2, #1
   13a80:	sbc	r3, r3, #0
   13a84:	bl	16c90 <__assert_fail@plt+0x4ca8>
   13a88:	cmp	r0, #0
   13a8c:	beq	1468c <__assert_fail@plt+0x26a4>
   13a90:	ldrb	r3, [sp, #180]	; 0xb4
   13a94:	cmp	r3, #0
   13a98:	beq	15550 <__assert_fail@plt+0x3568>
   13a9c:	cmp	r5, #0
   13aa0:	beq	13ad0 <__assert_fail@plt+0x1ae8>
   13aa4:	mov	r3, r5
   13aa8:	ldr	r2, [sp, #164]	; 0xa4
   13aac:	mov	r1, #1
   13ab0:	mov	r0, r7
   13ab4:	bl	11e38 <__fprintf_chk@plt>
   13ab8:	mov	r0, r7
   13abc:	bl	11acc <ferror@plt>
   13ac0:	cmp	r0, #0
   13ac4:	bne	139b8 <__assert_fail@plt+0x19d0>
   13ac8:	mov	r3, #1
   13acc:	str	r3, [sp, #16]
   13ad0:	cmp	r5, #0
   13ad4:	beq	13aec <__assert_fail@plt+0x1b04>
   13ad8:	mov	r2, r7
   13adc:	mov	r0, r8
   13ae0:	mov	r1, r9
   13ae4:	bl	1899c <__assert_fail@plt+0x69b4>
   13ae8:	strb	r0, [sp, #180]	; 0xb4
   13aec:	ldr	r3, [r6]
   13af0:	ldr	r2, [r6, #4]
   13af4:	adds	r3, r3, #1
   13af8:	adc	r2, r2, #0
   13afc:	adds	r8, r8, #1
   13b00:	adc	r9, r9, #0
   13b04:	mov	r0, r8
   13b08:	mov	r1, r9
   13b0c:	str	r3, [r6]
   13b10:	str	r2, [r6, #4]
   13b14:	bl	18974 <__assert_fail@plt+0x698c>
   13b18:	cmp	r0, #33	; 0x21
   13b1c:	beq	13ad0 <__assert_fail@plt+0x1ae8>
   13b20:	cmp	r5, #0
   13b24:	beq	13b54 <__assert_fail@plt+0x1b6c>
   13b28:	ldrb	r0, [sp, #180]	; 0xb4
   13b2c:	ldr	r3, [pc, #-2668]	; 130c8 <__assert_fail@plt+0x10e0>
   13b30:	mov	r1, r7
   13b34:	add	r0, r3, r0
   13b38:	bl	11f88 <fputs@plt>
   13b3c:	mov	r0, r7
   13b40:	bl	11acc <ferror@plt>
   13b44:	cmp	r0, #0
   13b48:	bne	139b8 <__assert_fail@plt+0x19d0>
   13b4c:	mov	r3, #3
   13b50:	str	r3, [sp, #16]
   13b54:	mov	r1, fp
   13b58:	mov	r2, r7
   13b5c:	mov	r0, sl
   13b60:	bl	1899c <__assert_fail@plt+0x69b4>
   13b64:	adds	sl, sl, #1
   13b68:	adc	fp, fp, #0
   13b6c:	mov	r1, fp
   13b70:	strb	r0, [sp, #180]	; 0xb4
   13b74:	mov	r0, sl
   13b78:	bl	18974 <__assert_fail@plt+0x698c>
   13b7c:	cmp	r0, #33	; 0x21
   13b80:	beq	13b54 <__assert_fail@plt+0x1b6c>
   13b84:	mov	r3, #0
   13b88:	strb	r3, [sp, #181]	; 0xb5
   13b8c:	b	13338 <__assert_fail@plt+0x1350>
   13b90:	add	r0, sp, #524	; 0x20c
   13b94:	bl	1f490 <__assert_fail@plt+0xd4a8>
   13b98:	ldr	r3, [sp, #16]
   13b9c:	ldr	r2, [pc, #-2776]	; 130cc <__assert_fail@plt+0x10e4>
   13ba0:	str	r3, [sp]
   13ba4:	mov	r1, #1
   13ba8:	mov	r3, r0
   13bac:	mov	r0, r6
   13bb0:	bl	11e38 <__fprintf_chk@plt>
   13bb4:	b	13918 <__assert_fail@plt+0x1930>
   13bb8:	add	r0, sp, #524	; 0x20c
   13bbc:	bl	1f490 <__assert_fail@plt+0xd4a8>
   13bc0:	str	sl, [sp]
   13bc4:	ldr	r2, [pc, #-2812]	; 130d0 <__assert_fail@plt+0x10e8>
   13bc8:	mov	r1, #1
   13bcc:	mov	r3, r0
   13bd0:	mov	r0, r6
   13bd4:	bl	11e38 <__fprintf_chk@plt>
   13bd8:	b	13918 <__assert_fail@plt+0x1930>
   13bdc:	ldr	r3, [sp, #120]	; 0x78
   13be0:	add	r0, sp, #176	; 0xb0
   13be4:	adds	r2, r8, r3
   13be8:	ldr	r3, [sp, #124]	; 0x7c
   13bec:	adc	r3, r9, r3
   13bf0:	subs	r2, r2, #1
   13bf4:	sbc	r3, r3, #0
   13bf8:	bl	16c90 <__assert_fail@plt+0x4ca8>
   13bfc:	cmp	r0, #0
   13c00:	beq	1468c <__assert_fail@plt+0x26a4>
   13c04:	cmp	r5, #0
   13c08:	beq	13c34 <__assert_fail@plt+0x1c4c>
   13c0c:	ldr	r3, [sp, #16]
   13c10:	cmp	r3, #1
   13c14:	beq	1459c <__assert_fail@plt+0x25b4>
   13c18:	ldr	r3, [sp, #16]
   13c1c:	cmp	r3, #0
   13c20:	beq	144bc <__assert_fail@plt+0x24d4>
   13c24:	mov	r0, r7
   13c28:	bl	11acc <ferror@plt>
   13c2c:	cmp	r0, #0
   13c30:	bne	139b8 <__assert_fail@plt+0x19d0>
   13c34:	mov	r0, sl
   13c38:	mov	r1, fp
   13c3c:	mov	r2, r7
   13c40:	bl	1899c <__assert_fail@plt+0x69b4>
   13c44:	mov	r3, #0
   13c48:	adds	sl, sl, #1
   13c4c:	adc	fp, fp, r3
   13c50:	strb	r3, [sp, #181]	; 0xb5
   13c54:	strb	r0, [sp, #180]	; 0xb4
   13c58:	b	13338 <__assert_fail@plt+0x1350>
   13c5c:	add	r3, sp, #171	; 0xab
   13c60:	str	r3, [sp]
   13c64:	mov	r2, r6
   13c68:	mov	r3, r7
   13c6c:	add	r1, sp, #176	; 0xb0
   13c70:	ldr	r0, [sp, #12]
   13c74:	bl	22f04 <__assert_fail@plt+0x10f1c>
   13c78:	cmp	r0, #0
   13c7c:	beq	12ec0 <__assert_fail@plt+0xed8>
   13c80:	ldrb	r3, [fp, #56]	; 0x38
   13c84:	cmp	r3, #0
   13c88:	bne	12df8 <__assert_fail@plt+0xe10>
   13c8c:	b	131f8 <__assert_fail@plt+0x1210>
   13c90:	ldrb	r0, [sp, #180]	; 0xb4
   13c94:	ldr	r3, [pc, #-3016]	; 130d4 <__assert_fail@plt+0x10ec>
   13c98:	mov	r1, r7
   13c9c:	add	r0, r3, r0
   13ca0:	bl	11f88 <fputs@plt>
   13ca4:	mov	r0, r7
   13ca8:	bl	11acc <ferror@plt>
   13cac:	cmp	r0, #0
   13cb0:	bne	139b8 <__assert_fail@plt+0x19d0>
   13cb4:	mov	r3, #1
   13cb8:	str	r0, [sp, #16]
   13cbc:	strb	r3, [sp, #180]	; 0xb4
   13cc0:	b	13338 <__assert_fail@plt+0x1350>
   13cc4:	mov	r1, #0
   13cc8:	mov	r0, #1
   13ccc:	bl	18988 <__assert_fail@plt+0x69a0>
   13cd0:	mov	r1, #0
   13cd4:	mov	r6, r0
   13cd8:	mov	r0, #1
   13cdc:	bl	18960 <__assert_fail@plt+0x6978>
   13ce0:	cmp	r0, #0
   13ce4:	str	r0, [sp, #392]	; 0x188
   13ce8:	beq	12f2c <__assert_fail@plt+0xf44>
   13cec:	cmp	r0, #1
   13cf0:	bls	13d10 <__assert_fail@plt+0x1d28>
   13cf4:	add	r0, r6, r0
   13cf8:	ldrb	r3, [r0, #-2]
   13cfc:	cmp	r3, #13
   13d00:	ldrbeq	r6, [r0, #-1]
   13d04:	subeq	r7, r6, #10
   13d08:	clzeq	r7, r7
   13d0c:	lsreq	r7, r7, #5
   13d10:	ldr	r3, [pc, #-3052]	; 1312c <__assert_fail@plt+0x1144>
   13d14:	ldrd	r2, [r3]
   13d18:	orrs	r1, r2, r3
   13d1c:	beq	12f2c <__assert_fail@plt+0xf44>
   13d20:	ldrd	r0, [sp, #84]	; 0x54
   13d24:	cmp	r2, r0
   13d28:	sbcs	ip, r3, r1
   13d2c:	movlt	r0, r2
   13d30:	movlt	r1, r3
   13d34:	mov	r2, #0
   13d38:	add	r3, sp, #392	; 0x188
   13d3c:	bl	16268 <__assert_fail@plt+0x4280>
   13d40:	ldr	r3, [sp, #392]	; 0x188
   13d44:	cmp	r3, #0
   13d48:	beq	12f2c <__assert_fail@plt+0xf44>
   13d4c:	cmp	r3, #1
   13d50:	bls	13d70 <__assert_fail@plt+0x1d88>
   13d54:	add	r3, r0, r3
   13d58:	ldrb	r2, [r3, #-2]
   13d5c:	cmp	r2, #13
   13d60:	bne	13d70 <__assert_fail@plt+0x1d88>
   13d64:	ldrb	r3, [r3, #-1]
   13d68:	cmp	r3, #10
   13d6c:	eoreq	r7, r7, #1
   13d70:	cmp	r7, #0
   13d74:	beq	12f2c <__assert_fail@plt+0xf44>
   13d78:	ldr	r3, [pc, #-3240]	; 130d8 <__assert_fail@plt+0x10f0>
   13d7c:	b	12f30 <__assert_fail@plt+0xf48>
   13d80:	ldrb	r2, [sp, #180]	; 0xb4
   13d84:	ldr	r0, [pc, #-3248]	; 130dc <__assert_fail@plt+0x10f4>
   13d88:	mov	r3, r5
   13d8c:	add	r2, r0, r2
   13d90:	mov	r1, #1
   13d94:	mov	r0, r7
   13d98:	bl	11e38 <__fprintf_chk@plt>
   13d9c:	mov	r3, #1
   13da0:	str	r3, [sp, #16]
   13da4:	b	133b0 <__assert_fail@plt+0x13c8>
   13da8:	bl	18900 <__assert_fail@plt+0x6918>
   13dac:	adds	r8, r0, #1
   13db0:	adc	r9, r1, #0
   13db4:	mov	r4, r0
   13db8:	mov	r5, r1
   13dbc:	bl	1ce70 <__assert_fail@plt+0xae88>
   13dc0:	ldr	r3, [sp, #68]	; 0x44
   13dc4:	ldr	r6, [fp, #68]	; 0x44
   13dc8:	cmp	r3, #0
   13dcc:	str	r0, [sp, #16]
   13dd0:	bne	13e1c <__assert_fail@plt+0x1e34>
   13dd4:	mov	r0, #2
   13dd8:	bl	188a4 <__assert_fail@plt+0x68bc>
   13ddc:	subs	r3, r0, #0
   13de0:	beq	13df8 <__assert_fail@plt+0x1e10>
   13de4:	mov	r0, r6
   13de8:	ldr	r2, [pc, #-3344]	; 130e0 <__assert_fail@plt+0x10f8>
   13dec:	mov	r1, #1
   13df0:	bl	11e38 <__fprintf_chk@plt>
   13df4:	ldr	r6, [fp, #68]	; 0x44
   13df8:	mov	r0, r6
   13dfc:	mov	r2, r7
   13e00:	ldr	r1, [pc, #-3364]	; 130e4 <__assert_fail@plt+0x10fc>
   13e04:	bl	16670 <__assert_fail@plt+0x4688>
   13e08:	eor	r2, r7, #1
   13e0c:	ldr	r1, [pc, #-3372]	; 130e8 <__assert_fail@plt+0x1100>
   13e10:	ldr	r0, [fp, #68]	; 0x44
   13e14:	bl	16670 <__assert_fail@plt+0x4688>
   13e18:	ldr	r6, [fp, #68]	; 0x44
   13e1c:	mov	r3, r6
   13e20:	mov	r2, #4
   13e24:	mov	r1, #1
   13e28:	ldr	r0, [pc, #-3396]	; 130ec <__assert_fail@plt+0x1104>
   13e2c:	bl	11c1c <fwrite@plt>
   13e30:	bl	188f0 <__assert_fail@plt+0x6908>
   13e34:	ldrd	r2, [sl]
   13e38:	ldr	ip, [fp, #68]	; 0x44
   13e3c:	strd	r4, [sp]
   13e40:	adds	r2, r0, r2
   13e44:	adc	r3, r1, r3
   13e48:	mov	r0, ip
   13e4c:	bl	166e0 <__assert_fail@plt+0x46f8>
   13e50:	ldr	r3, [fp, #68]	; 0x44
   13e54:	mov	r2, #2
   13e58:	mov	r1, #1
   13e5c:	ldr	r0, [pc, #-3444]	; 130f0 <__assert_fail@plt+0x1108>
   13e60:	bl	11c1c <fwrite@plt>
   13e64:	bl	18910 <__assert_fail@plt+0x6928>
   13e68:	ldm	sl, {r7, sl}
   13e6c:	ldr	r6, [fp, #68]	; 0x44
   13e70:	adds	r7, r0, r7
   13e74:	adc	sl, r1, sl
   13e78:	bl	18920 <__assert_fail@plt+0x6938>
   13e7c:	mov	r3, sl
   13e80:	mov	r2, r7
   13e84:	strd	r0, [sp]
   13e88:	mov	r0, r6
   13e8c:	bl	166e0 <__assert_fail@plt+0x46f8>
   13e90:	ldr	r1, [sp, #16]
   13e94:	ldr	r3, [pc, #-3496]	; 130f4 <__assert_fail@plt+0x110c>
   13e98:	cmp	r1, #0
   13e9c:	moveq	r1, r3
   13ea0:	mov	r3, r1
   13ea4:	ldr	r2, [pc, #-3508]	; 130f8 <__assert_fail@plt+0x1110>
   13ea8:	mov	r1, #1
   13eac:	ldr	r0, [fp, #68]	; 0x44
   13eb0:	bl	11e38 <__fprintf_chk@plt>
   13eb4:	b	13ec0 <__assert_fail@plt+0x1ed8>
   13eb8:	adds	r8, r8, #1
   13ebc:	adc	r9, r9, #0
   13ec0:	mov	r0, r8
   13ec4:	mov	r1, r9
   13ec8:	bl	18974 <__assert_fail@plt+0x698c>
   13ecc:	cmp	r0, #10
   13ed0:	cmpne	r0, #61	; 0x3d
   13ed4:	beq	13eb8 <__assert_fail@plt+0x1ed0>
   13ed8:	ldr	r3, [sp, #92]	; 0x5c
   13edc:	ldr	r3, [r3]
   13ee0:	cmp	r3, #5
   13ee4:	beq	13ef0 <__assert_fail@plt+0x1f08>
   13ee8:	mov	r0, #5
   13eec:	bl	1d2f8 <__assert_fail@plt+0xb310>
   13ef0:	mov	r6, #1
   13ef4:	mov	r7, #0
   13ef8:	mov	r0, r6
   13efc:	mov	r1, r7
   13f00:	bl	18974 <__assert_fail@plt+0x698c>
   13f04:	cmp	r0, #45	; 0x2d
   13f08:	bne	13f30 <__assert_fail@plt+0x1f48>
   13f0c:	b	13f98 <__assert_fail@plt+0x1fb0>
   13f10:	ldr	r1, [fp, #68]	; 0x44
   13f14:	bl	11ec8 <fputc@plt>
   13f18:	mov	r0, r8
   13f1c:	mov	r1, r9
   13f20:	ldr	r2, [fp, #68]	; 0x44
   13f24:	bl	1899c <__assert_fail@plt+0x69b4>
   13f28:	adds	r8, r8, #1
   13f2c:	adc	r9, r9, #0
   13f30:	mov	r0, r8
   13f34:	mov	r1, r9
   13f38:	bl	18974 <__assert_fail@plt+0x698c>
   13f3c:	cmp	r0, #43	; 0x2b
   13f40:	mov	sl, r0
   13f44:	beq	13f10 <__assert_fail@plt+0x1f28>
   13f48:	cmp	r4, r6
   13f4c:	sbcs	r3, r5, r7
   13f50:	blt	13fb4 <__assert_fail@plt+0x1fcc>
   13f54:	mov	r0, r6
   13f58:	mov	r1, r7
   13f5c:	bl	18974 <__assert_fail@plt+0x698c>
   13f60:	cmp	sl, r0
   13f64:	bne	13fbc <__assert_fail@plt+0x1fd4>
   13f68:	ldr	r1, [fp, #68]	; 0x44
   13f6c:	mov	r0, #32
   13f70:	bl	11ec8 <fputc@plt>
   13f74:	ldr	r2, [fp, #68]	; 0x44
   13f78:	mov	r0, r6
   13f7c:	mov	r1, r7
   13f80:	bl	1899c <__assert_fail@plt+0x69b4>
   13f84:	adds	r8, r8, #1
   13f88:	adc	r9, r9, #0
   13f8c:	adds	r6, r6, #1
   13f90:	adc	r7, r7, #0
   13f94:	b	13ef8 <__assert_fail@plt+0x1f10>
   13f98:	ldr	r1, [fp, #68]	; 0x44
   13f9c:	bl	11ec8 <fputc@plt>
   13fa0:	ldr	r2, [fp, #68]	; 0x44
   13fa4:	mov	r0, r6
   13fa8:	mov	r1, r7
   13fac:	bl	1899c <__assert_fail@plt+0x69b4>
   13fb0:	b	13f8c <__assert_fail@plt+0x1fa4>
   13fb4:	cmp	r0, #94	; 0x5e
   13fb8:	beq	12ecc <__assert_fail@plt+0xee4>
   13fbc:	mov	r2, r8
   13fc0:	mov	r3, r9
   13fc4:	mov	r0, r6
   13fc8:	mov	r1, r7
   13fcc:	bl	165c8 <__assert_fail@plt+0x45e0>
   13fd0:	ldr	r2, [pc, #-3804]	; 130fc <__assert_fail@plt+0x1114>
   13fd4:	mov	r3, #1
   13fd8:	str	r2, [sp]
   13fdc:	mov	r1, #114	; 0x72
   13fe0:	ldr	r2, [sp, #116]	; 0x74
   13fe4:	ldr	r0, [pc, #-3820]	; 13100 <__assert_fail@plt+0x1118>
   13fe8:	bl	20fec <__assert_fail@plt+0xf004>
   13fec:	cmn	r0, #1
   13ff0:	beq	15564 <__assert_fail@plt+0x357c>
   13ff4:	mov	r3, #1
   13ff8:	ldr	r1, [pc, #-3836]	; 13104 <__assert_fail@plt+0x111c>
   13ffc:	strb	r3, [fp, #8]
   14000:	bl	11a00 <fdopen@plt>
   14004:	cmp	r0, #0
   14008:	str	r0, [fp, #68]	; 0x44
   1400c:	bne	136c4 <__assert_fail@plt+0x16dc>
   14010:	ldr	r0, [fp, #12]
   14014:	bl	2e970 <__assert_fail@plt+0x1c988>
   14018:	mov	r1, r0
   1401c:	ldr	r0, [pc, #-3868]	; 13108 <__assert_fail@plt+0x1120>
   14020:	bl	1f774 <__assert_fail@plt+0xd78c>
   14024:	cmp	r5, #5
   14028:	bne	14034 <__assert_fail@plt+0x204c>
   1402c:	mov	r0, #4
   14030:	bl	1d2f8 <__assert_fail@plt+0xb310>
   14034:	ldr	r3, [pc, #-3888]	; 1310c <__assert_fail@plt+0x1124>
   14038:	ldr	sl, [pc, #-3888]	; 13110 <__assert_fail@plt+0x1128>
   1403c:	str	r3, [sp, #16]
   14040:	b	1377c <__assert_fail@plt+0x1794>
   14044:	ldr	r3, [sp, #64]	; 0x40
   14048:	ldrb	r0, [r3]
   1404c:	bl	18890 <__assert_fail@plt+0x68a8>
   14050:	cmp	r0, #2
   14054:	bne	1320c <__assert_fail@plt+0x1224>
   14058:	ldr	r3, [pc, #-3916]	; 13114 <__assert_fail@plt+0x112c>
   1405c:	ldrd	r2, [r3, #48]	; 0x30
   14060:	orrs	r3, r2, r3
   14064:	bne	12ec0 <__assert_fail@plt+0xed8>
   14068:	b	1320c <__assert_fail@plt+0x1224>
   1406c:	ldr	r3, [pc, #-3932]	; 13118 <__assert_fail@plt+0x1130>
   14070:	ldrb	r3, [r3]
   14074:	cmp	r3, #0
   14078:	bne	141e0 <__assert_fail@plt+0x21f8>
   1407c:	cmp	r0, #0
   14080:	beq	14158 <__assert_fail@plt+0x2170>
   14084:	ldr	r3, [pc, #-3952]	; 1311c <__assert_fail@plt+0x1134>
   14088:	ldrb	r3, [r3]
   1408c:	cmp	r3, #0
   14090:	beq	14158 <__assert_fail@plt+0x2170>
   14094:	ldr	r3, [pc, #-3964]	; 13120 <__assert_fail@plt+0x1138>
   14098:	ldr	r4, [r3]
   1409c:	cmp	r4, #0
   140a0:	bne	15570 <__assert_fail@plt+0x3588>
   140a4:	ldr	r0, [pc, #-3976]	; 13124 <__assert_fail@plt+0x113c>
   140a8:	bl	1fc1c <__assert_fail@plt+0xdc34>
   140ac:	ldr	r0, [sp, #176]	; 0xb0
   140b0:	cmp	r0, #0
   140b4:	beq	140c0 <__assert_fail@plt+0x20d8>
   140b8:	bl	11e5c <fclose@plt>
   140bc:	str	r4, [sp, #176]	; 0xb0
   140c0:	bl	18194 <__assert_fail@plt+0x61ac>
   140c4:	bl	157c0 <__assert_fail@plt+0x37d8>
   140c8:	ldr	r0, [pc, #-4008]	; 13128 <__assert_fail@plt+0x1140>
   140cc:	ldr	r1, [pc, #-4008]	; 1312c <__assert_fail@plt+0x1144>
   140d0:	ldr	r4, [pc, #-4008]	; 13130 <__assert_fail@plt+0x1148>
   140d4:	ldr	r0, [r0]
   140d8:	mov	r2, #0
   140dc:	mov	r3, #0
   140e0:	cmp	r0, #0
   140e4:	strd	r2, [r1]
   140e8:	strd	r2, [r4]
   140ec:	beq	140fc <__assert_fail@plt+0x2114>
   140f0:	ldrb	r4, [fp, #64]	; 0x40
   140f4:	cmp	r4, #0
   140f8:	beq	146a8 <__assert_fail@plt+0x26c0>
   140fc:	ldr	r4, [pc, #-4048]	; 13134 <__assert_fail@plt+0x114c>
   14100:	ldr	ip, [pc, #-4048]	; 13138 <__assert_fail@plt+0x1150>
   14104:	ldr	r1, [pc, #-4048]	; 1313c <__assert_fail@plt+0x1154>
   14108:	mov	r3, #0
   1410c:	mov	r2, #0
   14110:	ldr	r0, [r4]
   14114:	strd	r2, [ip]
   14118:	strd	r2, [r1]
   1411c:	ldr	r3, [sp, #92]	; 0x5c
   14120:	mov	r5, #0
   14124:	cmp	r0, #0
   14128:	str	r5, [r3]
   1412c:	beq	14138 <__assert_fail@plt+0x2150>
   14130:	bl	11ab4 <free@plt>
   14134:	str	r5, [r4]
   14138:	ldr	r1, [pc, #3972]	; 150c4 <__assert_fail@plt+0x30dc>
   1413c:	mov	r3, #0
   14140:	ldrb	r2, [fp, #57]	; 0x39
   14144:	strb	r3, [r1]
   14148:	mov	r4, r3
   1414c:	ldr	r3, [sp, #64]	; 0x40
   14150:	strb	r2, [r3]
   14154:	b	1263c <__assert_fail@plt+0x654>
   14158:	ldr	r3, [pc, #3944]	; 150c8 <__assert_fail@plt+0x30e0>
   1415c:	ldr	r5, [pc, #3944]	; 150cc <__assert_fail@plt+0x30e4>
   14160:	ldr	r4, [pc, #3944]	; 150d0 <__assert_fail@plt+0x30e8>
   14164:	ldr	r1, [r3]
   14168:	ldrd	r2, [r5]
   1416c:	tst	r1, #256	; 0x100
   14170:	bne	14b74 <__assert_fail@plt+0x2b8c>
   14174:	ldrd	r0, [r4]
   14178:	cmp	r0, r2
   1417c:	sbcs	r1, r1, r3
   14180:	blt	14b4c <__assert_fail@plt+0x2b64>
   14184:	ldr	r0, [sp, #176]	; 0xb0
   14188:	cmp	r0, #0
   1418c:	beq	141e0 <__assert_fail@plt+0x21f8>
   14190:	ldr	r3, [pc, #3900]	; 150d4 <__assert_fail@plt+0x30ec>
   14194:	ldr	r3, [r3]
   14198:	cmp	r3, #0
   1419c:	bne	141e0 <__assert_fail@plt+0x21f8>
   141a0:	bl	11a84 <fflush@plt>
   141a4:	cmp	r0, #0
   141a8:	bne	139b8 <__assert_fail@plt+0x19d0>
   141ac:	ldr	r0, [sp, #176]	; 0xb0
   141b0:	bl	11e2c <fileno@plt>
   141b4:	add	r2, sp, #184	; 0xb8
   141b8:	mov	r1, r0
   141bc:	mov	r0, #3
   141c0:	bl	11bec <__fxstat64@plt>
   141c4:	cmp	r0, #0
   141c8:	bne	139b8 <__assert_fail@plt+0x19d0>
   141cc:	ldr	r0, [sp, #176]	; 0xb0
   141d0:	bl	11e5c <fclose@plt>
   141d4:	cmp	r0, #0
   141d8:	bne	139b8 <__assert_fail@plt+0x19d0>
   141dc:	str	r0, [sp, #176]	; 0xb0
   141e0:	bl	20848 <__assert_fail@plt+0xe860>
   141e4:	ldr	r3, [pc, #3800]	; 150c4 <__assert_fail@plt+0x30dc>
   141e8:	ldrb	r3, [r3]
   141ec:	cmp	r3, #0
   141f0:	bne	14204 <__assert_fail@plt+0x221c>
   141f4:	ldr	r3, [pc, #3800]	; 150d4 <__assert_fail@plt+0x30ec>
   141f8:	ldr	r4, [r3]
   141fc:	cmp	r4, #0
   14200:	beq	14818 <__assert_fail@plt+0x2830>
   14204:	ldr	r3, [sp, #92]	; 0x5c
   14208:	ldr	r3, [r3]
   1420c:	cmp	r3, #3
   14210:	beq	14364 <__assert_fail@plt+0x237c>
   14214:	ldr	r3, [sp, #112]	; 0x70
   14218:	ldr	r5, [sp, #68]	; 0x44
   1421c:	eor	r7, r3, #1
   14220:	cmp	r5, #0
   14224:	moveq	r7, #0
   14228:	andne	r7, r7, #1
   1422c:	cmp	r7, #0
   14230:	beq	14364 <__assert_fail@plt+0x237c>
   14234:	ldr	r4, [fp, #68]	; 0x44
   14238:	add	r6, sp, #288	; 0x120
   1423c:	mov	r0, r4
   14240:	bl	11e2c <fileno@plt>
   14244:	mov	r2, r6
   14248:	mov	r1, r0
   1424c:	mov	r0, #3
   14250:	bl	11bec <__fxstat64@plt>
   14254:	cmp	r0, #0
   14258:	bne	139b8 <__assert_fail@plt+0x19d0>
   1425c:	mov	r0, r4
   14260:	bl	11e5c <fclose@plt>
   14264:	subs	ip, r0, #0
   14268:	bne	139b8 <__assert_fail@plt+0x19d0>
   1426c:	ldr	r3, [pc, #3664]	; 150c4 <__assert_fail@plt+0x30dc>
   14270:	ldr	r2, [pc, #3680]	; 150d8 <__assert_fail@plt+0x30f0>
   14274:	mov	r1, r5
   14278:	ldrb	r0, [r3]
   1427c:	ldr	r3, [pc, #3672]	; 150dc <__assert_fail@plt+0x30f4>
   14280:	mov	r5, #1
   14284:	cmp	r0, #0
   14288:	moveq	r2, r3
   1428c:	str	r2, [sp]
   14290:	ldr	r3, [pc, #3656]	; 150e0 <__assert_fail@plt+0x30f8>
   14294:	ldr	r2, [sp, #12]
   14298:	ldr	r0, [pc, #3652]	; 150e4 <__assert_fail@plt+0x30fc>
   1429c:	cmp	r2, #1
   142a0:	subne	r3, r3, #1
   142a4:	str	ip, [fp, #68]	; 0x44
   142a8:	strb	r5, [sp, #171]	; 0xab
   142ac:	bl	1fc1c <__assert_fail@plt+0xdc34>
   142b0:	ldr	r3, [sp, #116]	; 0x74
   142b4:	cmp	r3, #0
   142b8:	beq	14758 <__assert_fail@plt+0x2770>
   142bc:	ldr	r4, [fp, #36]	; 0x24
   142c0:	cmp	r4, #0
   142c4:	beq	14c1c <__assert_fail@plt+0x2c34>
   142c8:	ldr	r1, [pc, #3608]	; 150e8 <__assert_fail@plt+0x3100>
   142cc:	mov	r0, r4
   142d0:	bl	11a48 <strcmp@plt>
   142d4:	cmp	r0, #0
   142d8:	beq	14758 <__assert_fail@plt+0x2770>
   142dc:	ldr	r3, [pc, #3592]	; 150ec <__assert_fail@plt+0x3104>
   142e0:	ldrb	r3, [r3]
   142e4:	cmp	r3, #0
   142e8:	bne	14c10 <__assert_fail@plt+0x2c28>
   142ec:	mov	r0, r4
   142f0:	bl	2e970 <__assert_fail@plt+0x1c988>
   142f4:	mov	r1, r0
   142f8:	ldr	r0, [pc, #3568]	; 150f0 <__assert_fail@plt+0x3108>
   142fc:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14300:	ldr	r1, [fp, #36]	; 0x24
   14304:	cmp	r1, #0
   14308:	bne	14bb4 <__assert_fail@plt+0x2bcc>
   1430c:	add	r1, sp, #392	; 0x188
   14310:	mov	r0, r4
   14314:	bl	21150 <__assert_fail@plt+0xf168>
   14318:	bics	r3, r0, #2
   1431c:	bne	139b8 <__assert_fail@plt+0x19d0>
   14320:	cmp	r0, #0
   14324:	bne	14338 <__assert_fail@plt+0x2350>
   14328:	add	r0, sp, #392	; 0x188
   1432c:	bl	1ee54 <__assert_fail@plt+0xce6c>
   14330:	cmp	r0, #1
   14334:	beq	14da0 <__assert_fail@plt+0x2db8>
   14338:	ldr	r1, [pc, #3508]	; 150f4 <__assert_fail@plt+0x310c>
   1433c:	mov	r3, #0
   14340:	mov	r2, r6
   14344:	stm	sp, {r1, r3}
   14348:	mov	r3, r4
   1434c:	ldr	r1, [pc, #3492]	; 150f8 <__assert_fail@plt+0x3110>
   14350:	ldr	r0, [fp, #12]
   14354:	bl	21190 <__assert_fail@plt+0xf1a8>
   14358:	ldr	r3, [fp, #36]	; 0x24
   1435c:	cmp	r3, #0
   14360:	beq	14ca0 <__assert_fail@plt+0x2cb8>
   14364:	mov	r0, #1
   14368:	bl	2075c <__assert_fail@plt+0xe774>
   1436c:	ldr	r3, [pc, #3464]	; 150fc <__assert_fail@plt+0x3114>
   14370:	str	r3, [sp, #64]	; 0x40
   14374:	b	140c0 <__assert_fail@plt+0x20d8>
   14378:	ldr	r0, [pc, #3456]	; 15100 <__assert_fail@plt+0x3118>
   1437c:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14380:	ldr	r3, [pc, #3388]	; 150c4 <__assert_fail@plt+0x30dc>
   14384:	ldrb	r3, [r3]
   14388:	cmp	r3, #0
   1438c:	str	r3, [sp, #24]
   14390:	bne	15330 <__assert_fail@plt+0x3348>
   14394:	adds	r4, r4, #1
   14398:	adc	r5, r5, #0
   1439c:	ldr	r3, [sp, #28]
   143a0:	b	13614 <__assert_fail@plt+0x162c>
   143a4:	ldr	r3, [sp, #80]	; 0x50
   143a8:	mov	r0, r6
   143ac:	mov	r1, r7
   143b0:	b	135ac <__assert_fail@plt+0x15c4>
   143b4:	ldrb	r0, [sp, #180]	; 0xb4
   143b8:	mov	r3, #3
   143bc:	str	r3, [sp, #16]
   143c0:	ldr	r3, [pc, #3656]	; 15210 <__assert_fail@plt+0x3228>
   143c4:	mov	r1, r7
   143c8:	add	r0, r3, r0
   143cc:	bl	11f88 <fputs@plt>
   143d0:	b	133b0 <__assert_fail@plt+0x13c8>
   143d4:	mov	r0, r4
   143d8:	bl	2e970 <__assert_fail@plt+0x1c988>
   143dc:	ldr	r7, [pc, #3352]	; 150fc <__assert_fail@plt+0x3114>
   143e0:	ldrb	r4, [r7]
   143e4:	mov	r6, r0
   143e8:	mov	r0, r4
   143ec:	bl	1ceb8 <__assert_fail@plt+0xaed0>
   143f0:	mov	r7, r0
   143f4:	eor	r0, r4, #1
   143f8:	bl	1ceb8 <__assert_fail@plt+0xaed0>
   143fc:	and	r2, r7, #61440	; 0xf000
   14400:	mov	r1, r6
   14404:	and	r3, r0, #61440	; 0xf000
   14408:	ldr	r0, [pc, #3316]	; 15104 <__assert_fail@plt+0x311c>
   1440c:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14410:	ldr	r2, [pc, #3244]	; 150c4 <__assert_fail@plt+0x30dc>
   14414:	mov	r3, #1
   14418:	strb	r3, [sp, #171]	; 0xab
   1441c:	strb	r3, [r2]
   14420:	mov	r3, #0
   14424:	str	r3, [sp, #116]	; 0x74
   14428:	b	12794 <__assert_fail@plt+0x7ac>
   1442c:	ldr	r3, [sp, #140]	; 0x8c
   14430:	cmn	r3, #1
   14434:	bne	145bc <__assert_fail@plt+0x25d4>
   14438:	ldr	r3, [pc, #3272]	; 15108 <__assert_fail@plt+0x3120>
   1443c:	str	r3, [sp, #136]	; 0x88
   14440:	ldr	r0, [r3]
   14444:	ldr	r4, [pc, #3264]	; 1510c <__assert_fail@plt+0x3124>
   14448:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   1444c:	mov	r3, #0
   14450:	strb	r3, [r5]
   14454:	ldrb	r3, [r4]
   14458:	cmp	r3, #0
   1445c:	beq	12700 <__assert_fail@plt+0x718>
   14460:	ldr	r3, [pc, #3240]	; 15110 <__assert_fail@plt+0x3128>
   14464:	ldr	r0, [r3]
   14468:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   1446c:	mov	r3, #0
   14470:	strb	r3, [r4]
   14474:	b	12700 <__assert_fail@plt+0x718>
   14478:	str	r3, [sp, #28]
   1447c:	bl	18448 <__assert_fail@plt+0x6460>
   14480:	subs	r3, r0, #0
   14484:	str	r3, [sp, #24]
   14488:	ldr	r3, [sp, #28]
   1448c:	beq	144f8 <__assert_fail@plt+0x2510>
   14490:	ldr	r2, [pc, #3116]	; 150c4 <__assert_fail@plt+0x30dc>
   14494:	subs	r0, r4, #1
   14498:	sbc	r1, r5, #0
   1449c:	ldrb	r2, [r2]
   144a0:	cmp	r2, #0
   144a4:	beq	13614 <__assert_fail@plt+0x162c>
   144a8:	str	r9, [sp, #28]
   144ac:	mov	r4, r0
   144b0:	mov	r5, r1
   144b4:	str	r2, [sp, #24]
   144b8:	b	1364c <__assert_fail@plt+0x1664>
   144bc:	ldrb	r2, [sp, #180]	; 0xb4
   144c0:	ldr	r1, [pc, #3328]	; 151c8 <__assert_fail@plt+0x31e0>
   144c4:	mov	r3, r5
   144c8:	add	r2, r1, r2
   144cc:	mov	r0, r7
   144d0:	mov	r1, #1
   144d4:	bl	11e38 <__fprintf_chk@plt>
   144d8:	mov	r3, #2
   144dc:	str	r3, [sp, #16]
   144e0:	b	13c24 <__assert_fail@plt+0x1c3c>
   144e4:	strd	r2, [sp, #24]
   144e8:	bl	18448 <__assert_fail@plt+0x6460>
   144ec:	ldrd	r2, [sp, #24]
   144f0:	cmp	r0, #0
   144f4:	bne	135f8 <__assert_fail@plt+0x1610>
   144f8:	ldr	r0, [pc, #3092]	; 15114 <__assert_fail@plt+0x312c>
   144fc:	bl	1f558 <__assert_fail@plt+0xd570>
   14500:	bl	11dc0 <__errno_location@plt>
   14504:	ldr	r3, [r0]
   14508:	cmp	r3, #18
   1450c:	cmpne	r3, #40	; 0x28
   14510:	moveq	r3, #1
   14514:	movne	r3, #0
   14518:	str	r3, [sp, #112]	; 0x70
   1451c:	bne	15578 <__assert_fail@plt+0x3590>
   14520:	ldr	r3, [pc, #3056]	; 15118 <__assert_fail@plt+0x3130>
   14524:	ldr	r0, [sp, #116]	; 0x74
   14528:	mov	r4, r3
   1452c:	str	r3, [sp, #92]	; 0x5c
   14530:	bl	2e970 <__assert_fail@plt+0x1c988>
   14534:	mov	r1, r0
   14538:	ldr	r0, [pc, #3036]	; 1511c <__assert_fail@plt+0x3134>
   1453c:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14540:	ldr	r2, [r4]
   14544:	mov	r3, #1
   14548:	cmp	r2, #3
   1454c:	ldr	r2, [pc, #2928]	; 150c4 <__assert_fail@plt+0x30dc>
   14550:	strb	r3, [sp, #171]	; 0xab
   14554:	strb	r3, [r2]
   14558:	beq	146d8 <__assert_fail@plt+0x26f0>
   1455c:	ldrb	r3, [fp, #56]	; 0x38
   14560:	str	r3, [sp, #24]
   14564:	b	12de4 <__assert_fail@plt+0xdfc>
   14568:	ldr	r3, [pc, #3156]	; 151c4 <__assert_fail@plt+0x31dc>
   1456c:	ldr	r6, [sp, #172]	; 0xac
   14570:	ldr	r4, [r3]
   14574:	mov	r2, r6
   14578:	mov	r0, r4
   1457c:	ldr	r1, [sp, #116]	; 0x74
   14580:	bl	15f84 <__assert_fail@plt+0x3f9c>
   14584:	cmp	r0, #0
   14588:	moveq	r3, #1
   1458c:	ldreq	r2, [pc, #2864]	; 150c4 <__assert_fail@plt+0x30dc>
   14590:	strbeq	r3, [sp, #171]	; 0xab
   14594:	strbeq	r3, [r2]
   14598:	b	12794 <__assert_fail@plt+0x7ac>
   1459c:	ldrb	r0, [sp, #180]	; 0xb4
   145a0:	mov	r3, #3
   145a4:	str	r3, [sp, #16]
   145a8:	ldr	r3, [pc, #3168]	; 15210 <__assert_fail@plt+0x3228>
   145ac:	mov	r1, r7
   145b0:	add	r0, r3, r0
   145b4:	bl	11f88 <fputs@plt>
   145b8:	b	13c24 <__assert_fail@plt+0x1c3c>
   145bc:	mov	r0, r3
   145c0:	bl	11fb8 <close@plt>
   145c4:	ldrb	r3, [r5]
   145c8:	cmp	r3, #0
   145cc:	ldr	r3, [pc, #2868]	; 15108 <__assert_fail@plt+0x3120>
   145d0:	str	r3, [sp, #136]	; 0x88
   145d4:	beq	126f0 <__assert_fail@plt+0x708>
   145d8:	ldr	r0, [r3]
   145dc:	b	14444 <__assert_fail@plt+0x245c>
   145e0:	add	r6, sp, #500	; 0x1f4
   145e4:	ldrd	r2, [sp, #84]	; 0x54
   145e8:	mov	r0, r6
   145ec:	bl	1f490 <__assert_fail@plt+0xd4a8>
   145f0:	ldr	r1, [sp, #12]
   145f4:	mov	r2, r0
   145f8:	ldr	r0, [pc, #2848]	; 15120 <__assert_fail@plt+0x3138>
   145fc:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14600:	orrs	r3, r4, r5
   14604:	beq	134f4 <__assert_fail@plt+0x150c>
   14608:	b	134d8 <__assert_fail@plt+0x14f0>
   1460c:	ldr	r8, [pc, #2832]	; 15124 <__assert_fail@plt+0x313c>
   14610:	ldrd	r2, [r8]
   14614:	orrs	r3, r2, r3
   14618:	beq	12df8 <__assert_fail@plt+0xe10>
   1461c:	add	r6, sp, #500	; 0x1f4
   14620:	ldrd	r2, [sp, #84]	; 0x54
   14624:	mov	r0, r6
   14628:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1462c:	ldr	r1, [sp, #12]
   14630:	mov	r2, r0
   14634:	ldr	r0, [pc, #2788]	; 15120 <__assert_fail@plt+0x3138>
   14638:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1463c:	ldrd	r2, [r8]
   14640:	orrs	r1, r2, r3
   14644:	beq	13504 <__assert_fail@plt+0x151c>
   14648:	mov	r0, r6
   1464c:	bl	1f490 <__assert_fail@plt+0xd4a8>
   14650:	ldrd	r4, [r8]
   14654:	ldr	r3, [pc, #2692]	; 150e0 <__assert_fail@plt+0x30f8>
   14658:	cmp	r5, #0
   1465c:	cmpeq	r4, #1
   14660:	sub	r2, r3, #1
   14664:	moveq	r2, r3
   14668:	mov	r1, r0
   1466c:	ldr	r0, [pc, #2740]	; 15128 <__assert_fail@plt+0x3140>
   14670:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14674:	b	13504 <__assert_fail@plt+0x151c>
   14678:	ldrd	r4, [sp, #128]	; 0x80
   1467c:	strd	sl, [sp, #128]	; 0x80
   14680:	ldr	fp, [sp, #144]	; 0x90
   14684:	ldr	sl, [sp, #148]	; 0x94
   14688:	b	1344c <__assert_fail@plt+0x1464>
   1468c:	strd	sl, [sp, #128]	; 0x80
   14690:	ldr	fp, [sp, #144]	; 0x90
   14694:	ldr	sl, [sp, #148]	; 0x94
   14698:	b	12ec0 <__assert_fail@plt+0xed8>
   1469c:	str	r9, [sp, #28]
   146a0:	str	r2, [sp, #24]
   146a4:	b	1364c <__assert_fail@plt+0x1664>
   146a8:	bl	11ab4 <free@plt>
   146ac:	ldr	r3, [pc, #2832]	; 151c4 <__assert_fail@plt+0x31dc>
   146b0:	str	r4, [r3]
   146b4:	b	140fc <__assert_fail@plt+0x2114>
   146b8:	ldr	r9, [pc, #2808]	; 151b8 <__assert_fail@plt+0x31d0>
   146bc:	mov	r0, #0
   146c0:	bl	1681c <__assert_fail@plt+0x4834>
   146c4:	mvn	r3, #0
   146c8:	str	r3, [r9]
   146cc:	b	1269c <__assert_fail@plt+0x6b4>
   146d0:	mov	r3, #0
   146d4:	str	r3, [sp, #112]	; 0x70
   146d8:	ldr	r3, [pc, #2532]	; 150c4 <__assert_fail@plt+0x30dc>
   146dc:	ldrb	r0, [sp, #171]	; 0xab
   146e0:	ldr	r1, [sp, #136]	; 0x88
   146e4:	ldrb	r2, [r3]
   146e8:	mov	ip, #0
   146ec:	ldr	r3, [sp, #176]	; 0xb0
   146f0:	orr	r0, r0, r2
   146f4:	strb	r0, [sp, #171]	; 0xab
   146f8:	ldr	r0, [pc, #2756]	; 151c4 <__assert_fail@plt+0x31dc>
   146fc:	ldr	r2, [pc, #2744]	; 151bc <__assert_fail@plt+0x31d4>
   14700:	ldr	r1, [r1]
   14704:	ldr	r0, [r0]
   14708:	strb	ip, [sp, #181]	; 0xb5
   1470c:	bl	1cecc <__assert_fail@plt+0xaee4>
   14710:	ldr	r3, [pc, #2516]	; 150ec <__assert_fail@plt+0x3104>
   14714:	ldrb	r3, [r3]
   14718:	cmp	r3, #0
   1471c:	bne	14730 <__assert_fail@plt+0x2748>
   14720:	ldr	r3, [pc, #2476]	; 150d4 <__assert_fail@plt+0x30ec>
   14724:	ldr	r3, [r3]
   14728:	cmp	r3, #0
   1472c:	beq	14c60 <__assert_fail@plt+0x2c78>
   14730:	mov	r3, #0
   14734:	ldr	r0, [sp, #140]	; 0x8c
   14738:	mov	r4, r3
   1473c:	str	r3, [sp, #28]
   14740:	bl	11fb8 <close@plt>
   14744:	mvn	r3, #0
   14748:	str	r4, [sp, #68]	; 0x44
   1474c:	str	r4, [sp, #12]
   14750:	str	r3, [sp, #140]	; 0x8c
   14754:	b	141e0 <__assert_fail@plt+0x21f8>
   14758:	ldr	r0, [pc, #2508]	; 1512c <__assert_fail@plt+0x3144>
   1475c:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14760:	b	14364 <__assert_fail@plt+0x237c>
   14764:	bl	188c0 <__assert_fail@plt+0x68d8>
   14768:	cmp	r0, #0
   1476c:	bne	14780 <__assert_fail@plt+0x2798>
   14770:	bl	188d8 <__assert_fail@plt+0x68f0>
   14774:	cmp	r0, #0
   14778:	streq	r4, [sp, #116]	; 0x74
   1477c:	beq	12738 <__assert_fail@plt+0x750>
   14780:	ldr	r3, [pc, #2420]	; 150fc <__assert_fail@plt+0x3114>
   14784:	ldrb	r0, [r3]
   14788:	eor	r0, r0, #1
   1478c:	bl	188a4 <__assert_fail@plt+0x68bc>
   14790:	str	r0, [sp, #116]	; 0x74
   14794:	b	12738 <__assert_fail@plt+0x750>
   14798:	ldr	r0, [fp, #12]
   1479c:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   147a0:	mov	r3, #0
   147a4:	strb	r3, [fp, #8]
   147a8:	b	126d8 <__assert_fail@plt+0x6f0>
   147ac:	ldrb	r0, [sp, #180]	; 0xb4
   147b0:	ldr	r3, [pc, #2424]	; 15130 <__assert_fail@plt+0x3148>
   147b4:	mov	r1, r7
   147b8:	add	r0, r3, r0
   147bc:	bl	11f88 <fputs@plt>
   147c0:	mov	r0, r7
   147c4:	bl	11acc <ferror@plt>
   147c8:	cmp	r0, #0
   147cc:	bne	139b8 <__assert_fail@plt+0x19d0>
   147d0:	mov	r3, #1
   147d4:	strb	r3, [sp, #180]	; 0xb4
   147d8:	b	13460 <__assert_fail@plt+0x1478>
   147dc:	ldr	r2, [pc, #2384]	; 15134 <__assert_fail@plt+0x314c>
   147e0:	ldr	r1, [pc, #2540]	; 151d4 <__assert_fail@plt+0x31ec>
   147e4:	str	r3, [sp, #176]	; 0xb0
   147e8:	strh	r2, [sp, #180]	; 0xb4
   147ec:	bl	11a00 <fdopen@plt>
   147f0:	cmp	r0, #0
   147f4:	str	r0, [sp, #176]	; 0xb0
   147f8:	beq	15460 <__assert_fail@plt+0x3478>
   147fc:	ldr	r3, [pc, #2240]	; 150c4 <__assert_fail@plt+0x30dc>
   14800:	ldrb	r3, [r3]
   14804:	cmp	r3, #0
   14808:	mvn	r3, #0
   1480c:	str	r3, [sp, #140]	; 0x8c
   14810:	bne	12de4 <__assert_fail@plt+0xdfc>
   14814:	b	12880 <__assert_fail@plt+0x898>
   14818:	ldrb	r3, [fp, #40]	; 0x28
   1481c:	cmp	r3, #0
   14820:	movne	r5, #1
   14824:	bne	1484c <__assert_fail@plt+0x2864>
   14828:	ldrb	r3, [fp, #20]
   1482c:	cmp	r3, #0
   14830:	moveq	r5, r4
   14834:	beq	1484c <__assert_fail@plt+0x2864>
   14838:	ldr	r3, [sp, #28]
   1483c:	ldr	r2, [sp, #68]	; 0x44
   14840:	orrs	r3, r3, r2
   14844:	movne	r5, #1
   14848:	moveq	r5, #0
   1484c:	ldrb	r3, [sp, #181]	; 0xb5
   14850:	cmp	r3, #0
   14854:	bne	14cac <__assert_fail@plt+0x2cc4>
   14858:	ldr	r3, [pc, #2204]	; 150fc <__assert_fail@plt+0x3114>
   1485c:	str	r3, [sp, #64]	; 0x40
   14860:	ldrb	r0, [r3]
   14864:	eor	r0, r0, #1
   14868:	bl	18890 <__assert_fail@plt+0x68a8>
   1486c:	cmp	r0, #2
   14870:	beq	1506c <__assert_fail@plt+0x3084>
   14874:	ldr	r3, [pc, #2160]	; 150ec <__assert_fail@plt+0x3104>
   14878:	ldrb	r3, [r3]
   1487c:	cmp	r3, #0
   14880:	bne	14204 <__assert_fail@plt+0x221c>
   14884:	ldr	r3, [sp, #64]	; 0x40
   14888:	ldrb	sl, [r3]
   1488c:	mov	r0, sl
   14890:	bl	1ceb8 <__assert_fail@plt+0xaed0>
   14894:	eor	r6, sl, #1
   14898:	mov	r4, r0
   1489c:	mov	r0, r6
   148a0:	bl	1ceb8 <__assert_fail@plt+0xaed0>
   148a4:	ldr	r2, [sp, #12]
   148a8:	ldr	r1, [sp, #68]	; 0x44
   148ac:	ldr	r8, [sp, #172]	; 0xac
   148b0:	subs	r4, r4, r0
   148b4:	movne	r4, #1
   148b8:	cmp	r0, #0
   148bc:	movne	r7, r4
   148c0:	moveq	r7, #0
   148c4:	cmp	r2, r1
   148c8:	mov	r3, r0
   148cc:	ble	14f54 <__assert_fail@plt+0x2f6c>
   148d0:	ldr	r2, [pc, #2280]	; 151c0 <__assert_fail@plt+0x31d8>
   148d4:	add	r4, sp, #392	; 0x188
   148d8:	add	r6, r2, r6, lsl #3
   148dc:	cmp	r7, #0
   148e0:	ldm	r6, {r0, r1}
   148e4:	stm	r4, {r0, r1}
   148e8:	bne	152d4 <__assert_fail@plt+0x32ec>
   148ec:	ldr	r3, [pc, #2320]	; 15204 <__assert_fail@plt+0x321c>
   148f0:	ldr	r6, [r3, #16]
   148f4:	lsl	r6, r6, #23
   148f8:	lsr	r6, r6, #23
   148fc:	ldr	r3, [pc, #2100]	; 15138 <__assert_fail@plt+0x3150>
   14900:	ldr	r1, [pc, #2100]	; 1513c <__assert_fail@plt+0x3154>
   14904:	orr	r6, r6, r8
   14908:	ldrb	r3, [r3]
   1490c:	ldrb	r1, [r1]
   14910:	orrs	r3, r3, r1
   14914:	beq	15244 <__assert_fail@plt+0x325c>
   14918:	ldr	r3, [sp, #392]	; 0x188
   1491c:	cmn	r3, #1
   14920:	beq	15244 <__assert_fail@plt+0x325c>
   14924:	ldr	r3, [pc, #2068]	; 15140 <__assert_fail@plt+0x3158>
   14928:	ldr	r9, [pc, #2184]	; 151b8 <__assert_fail@plt+0x31d0>
   1492c:	ldrb	r3, [r3]
   14930:	cmp	r3, #0
   14934:	bne	15534 <__assert_fail@plt+0x354c>
   14938:	ldr	r8, [r9]
   1493c:	cmp	r8, #0
   14940:	bne	154d8 <__assert_fail@plt+0x34f0>
   14944:	add	r3, r2, sl, lsl #3
   14948:	mov	r0, sl
   1494c:	str	r3, [sp, #16]
   14950:	ldr	sl, [r2, sl, lsl #3]
   14954:	bl	18890 <__assert_fail@plt+0x68a8>
   14958:	cmp	r0, #2
   1495c:	cmnne	sl, #1
   14960:	bne	1549c <__assert_fail@plt+0x34b4>
   14964:	ldr	r3, [sp, #28]
   14968:	ldr	r2, [sp, #68]	; 0x44
   1496c:	orrs	r3, r3, r2
   14970:	moveq	r1, #1
   14974:	beq	152e0 <__assert_fail@plt+0x32f8>
   14978:	ldr	r0, [sp, #116]	; 0x74
   1497c:	bl	2e970 <__assert_fail@plt+0x1c988>
   14980:	mov	r1, r0
   14984:	ldr	r0, [pc, #1976]	; 15144 <__assert_fail@plt+0x315c>
   14988:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1498c:	mov	r1, #0
   14990:	b	1524c <__assert_fail@plt+0x3264>
   14994:	ldr	r3, [pc, #1964]	; 15148 <__assert_fail@plt+0x3160>
   14998:	mov	r2, #0
   1499c:	str	r2, [r3]
   149a0:	b	12990 <__assert_fail@plt+0x9a8>
   149a4:	bl	188c0 <__assert_fail@plt+0x68d8>
   149a8:	cmp	r0, #0
   149ac:	bne	15064 <__assert_fail@plt+0x307c>
   149b0:	bl	188d8 <__assert_fail@plt+0x68f0>
   149b4:	ldr	r3, [pc, #2080]	; 151dc <__assert_fail@plt+0x31f4>
   149b8:	ldr	r4, [pc, #2080]	; 151e0 <__assert_fail@plt+0x31f8>
   149bc:	cmp	r0, #0
   149c0:	movne	r4, r3
   149c4:	ldr	r3, [pc, #2040]	; 151c4 <__assert_fail@plt+0x31dc>
   149c8:	ldr	r1, [pc, #1916]	; 1514c <__assert_fail@plt+0x3164>
   149cc:	ldr	r3, [r3]
   149d0:	b	12974 <__assert_fail@plt+0x98c>
   149d4:	mov	r0, r4
   149d8:	ldr	r1, [pc, #2084]	; 15204 <__assert_fail@plt+0x321c>
   149dc:	bl	21150 <__assert_fail@plt+0xf168>
   149e0:	mov	r6, r0
   149e4:	str	r0, [r9]
   149e8:	b	12768 <__assert_fail@plt+0x780>
   149ec:	add	r4, sp, #392	; 0x188
   149f0:	mov	r1, r4
   149f4:	ldr	r0, [sp, #116]	; 0x74
   149f8:	bl	21150 <__assert_fail@plt+0xf168>
   149fc:	mov	r6, r0
   14a00:	b	1277c <__assert_fail@plt+0x794>
   14a04:	mov	r0, r4
   14a08:	bl	1ee68 <__assert_fail@plt+0xce80>
   14a0c:	cmp	r0, #0
   14a10:	bne	15038 <__assert_fail@plt+0x3050>
   14a14:	mov	r0, r4
   14a18:	mov	r1, #1
   14a1c:	bl	1f6c8 <__assert_fail@plt+0xd6e0>
   14a20:	b	12784 <__assert_fail@plt+0x79c>
   14a24:	ldrd	r2, [sp, #104]	; 0x68
   14a28:	ldrd	r0, [sp, #128]	; 0x80
   14a2c:	cmp	r2, r0
   14a30:	sbcs	r3, r3, r1
   14a34:	blt	13460 <__assert_fail@plt+0x1478>
   14a38:	ldrd	r0, [sp, #128]	; 0x80
   14a3c:	bl	18974 <__assert_fail@plt+0x698c>
   14a40:	cmp	r0, #43	; 0x2b
   14a44:	bne	13460 <__assert_fail@plt+0x1478>
   14a48:	str	r8, [sp, #16]
   14a4c:	mov	r9, #0
   14a50:	mov	r8, #1
   14a54:	ldr	r3, [sp, #120]	; 0x78
   14a58:	add	r0, sp, #176	; 0xb0
   14a5c:	adds	r2, r3, r8
   14a60:	ldr	r3, [sp, #124]	; 0x7c
   14a64:	adc	r3, r3, r9
   14a68:	subs	r2, r2, #1
   14a6c:	sbc	r3, r3, #0
   14a70:	bl	16c90 <__assert_fail@plt+0x4ca8>
   14a74:	cmp	r0, #0
   14a78:	beq	12ec0 <__assert_fail@plt+0xed8>
   14a7c:	ldr	r3, [sp, #152]	; 0x98
   14a80:	cmp	r3, #0
   14a84:	beq	14ab4 <__assert_fail@plt+0x2acc>
   14a88:	ldr	r3, [sp, #16]
   14a8c:	cmp	r3, #0
   14a90:	beq	15308 <__assert_fail@plt+0x3320>
   14a94:	ldr	r3, [sp, #16]
   14a98:	cmp	r3, #1
   14a9c:	beq	15500 <__assert_fail@plt+0x3518>
   14aa0:	mov	r0, r7
   14aa4:	bl	11acc <ferror@plt>
   14aa8:	cmp	r0, #0
   14aac:	bne	139b8 <__assert_fail@plt+0x19d0>
   14ab0:	strb	r0, [sp, #181]	; 0xb5
   14ab4:	ldrb	r8, [sp, #180]	; 0xb4
   14ab8:	strd	r4, [sp, #72]	; 0x48
   14abc:	mov	r6, #0
   14ac0:	mov	r5, sl
   14ac4:	mov	sl, r7
   14ac8:	mov	r7, r8
   14acc:	ldrd	r8, [sp, #128]	; 0x80
   14ad0:	b	14ae8 <__assert_fail@plt+0x2b00>
   14ad4:	mov	r0, r8
   14ad8:	mov	r1, r9
   14adc:	bl	18974 <__assert_fail@plt+0x698c>
   14ae0:	cmp	r0, #43	; 0x2b
   14ae4:	bne	14b38 <__assert_fail@plt+0x2b50>
   14ae8:	cmp	r7, #0
   14aec:	bne	14b04 <__assert_fail@plt+0x2b1c>
   14af0:	mov	r1, sl
   14af4:	mov	r0, #10
   14af8:	bl	11f04 <putc@plt>
   14afc:	cmn	r0, #1
   14b00:	beq	139b8 <__assert_fail@plt+0x19d0>
   14b04:	mov	r2, sl
   14b08:	mov	r0, r8
   14b0c:	mov	r1, r9
   14b10:	bl	1899c <__assert_fail@plt+0x69b4>
   14b14:	ldrd	r2, [sp, #104]	; 0x68
   14b18:	adds	r8, r8, #1
   14b1c:	adc	r9, r9, #0
   14b20:	cmp	r2, r8
   14b24:	sbcs	r3, r3, r9
   14b28:	strb	r6, [sp, #181]	; 0xb5
   14b2c:	mov	r7, r0
   14b30:	strb	r0, [sp, #180]	; 0xb4
   14b34:	bge	14ad4 <__assert_fail@plt+0x2aec>
   14b38:	mov	r7, sl
   14b3c:	strd	r8, [sp, #128]	; 0x80
   14b40:	mov	sl, r5
   14b44:	ldrd	r4, [sp, #72]	; 0x48
   14b48:	b	1344c <__assert_fail@plt+0x1464>
   14b4c:	add	r0, sp, #176	; 0xb0
   14b50:	bl	16c90 <__assert_fail@plt+0x4ca8>
   14b54:	cmp	r0, #0
   14b58:	bne	14184 <__assert_fail@plt+0x219c>
   14b5c:	ldr	r0, [pc, #1516]	; 15150 <__assert_fail@plt+0x3168>
   14b60:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14b64:	ldr	r2, [pc, #1368]	; 150c4 <__assert_fail@plt+0x30dc>
   14b68:	mov	r3, #1
   14b6c:	strb	r3, [r2]
   14b70:	b	141e0 <__assert_fail@plt+0x21f8>
   14b74:	add	r0, sp, #524	; 0x20c
   14b78:	bl	1f490 <__assert_fail@plt+0xd4a8>
   14b7c:	ldrd	r2, [r4]
   14b80:	mov	r6, r0
   14b84:	add	r0, sp, #548	; 0x224
   14b88:	bl	1f490 <__assert_fail@plt+0xd4a8>
   14b8c:	mov	r1, r6
   14b90:	mov	r2, r0
   14b94:	ldr	r0, [pc, #1464]	; 15154 <__assert_fail@plt+0x316c>
   14b98:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14b9c:	ldrd	r2, [r5]
   14ba0:	b	14174 <__assert_fail@plt+0x218c>
   14ba4:	ldr	r3, [pc, #1452]	; 15158 <__assert_fail@plt+0x3170>
   14ba8:	b	12114 <__assert_fail@plt+0x12c>
   14bac:	mov	r4, #0
   14bb0:	b	12618 <__assert_fail@plt+0x630>
   14bb4:	ldr	ip, [sp, #160]	; 0xa0
   14bb8:	ldr	r0, [fp, #12]
   14bbc:	cmp	ip, #0
   14bc0:	bne	14da8 <__assert_fail@plt+0x2dc0>
   14bc4:	ldr	r2, [pc, #1320]	; 150f4 <__assert_fail@plt+0x310c>
   14bc8:	mov	r3, #1
   14bcc:	strd	r2, [sp]
   14bd0:	mov	r3, ip
   14bd4:	mov	r2, ip
   14bd8:	bl	1fc70 <__assert_fail@plt+0xdc88>
   14bdc:	str	r7, [sp, #160]	; 0xa0
   14be0:	b	14358 <__assert_fail@plt+0x2370>
   14be4:	ldr	r0, [sp, #116]	; 0x74
   14be8:	bl	2e970 <__assert_fail@plt+0x1c988>
   14bec:	mov	r1, r0
   14bf0:	ldr	r0, [pc, #1380]	; 1515c <__assert_fail@plt+0x3174>
   14bf4:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14bf8:	mov	r3, #0
   14bfc:	str	r3, [sp, #112]	; 0x70
   14c00:	ldr	r3, [pc, #1212]	; 150c4 <__assert_fail@plt+0x30dc>
   14c04:	strb	r4, [sp, #171]	; 0xab
   14c08:	strb	r4, [r3]
   14c0c:	b	12de4 <__assert_fail@plt+0xdfc>
   14c10:	ldr	r0, [pc, #1300]	; 1512c <__assert_fail@plt+0x3144>
   14c14:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14c18:	b	14358 <__assert_fail@plt+0x2370>
   14c1c:	ldr	r2, [pc, #1340]	; 15160 <__assert_fail@plt+0x3178>
   14c20:	ldr	r3, [pc, #1340]	; 15164 <__assert_fail@plt+0x317c>
   14c24:	mov	r1, r5
   14c28:	ldr	r0, [sp, #116]	; 0x74
   14c2c:	ldr	r5, [r2]
   14c30:	str	r3, [r2]
   14c34:	bl	250c0 <__assert_fail@plt+0x130d8>
   14c38:	mov	r4, r0
   14c3c:	bl	11d78 <strlen@plt>
   14c40:	sub	r0, r0, #1
   14c44:	ldrb	r3, [r4, r0]
   14c48:	cmp	r3, #126	; 0x7e
   14c4c:	moveq	r3, #35	; 0x23
   14c50:	strbeq	r3, [r4, r0]
   14c54:	ldr	r3, [pc, #1284]	; 15160 <__assert_fail@plt+0x3178>
   14c58:	str	r5, [r3]
   14c5c:	b	142dc <__assert_fail@plt+0x22f4>
   14c60:	ldr	r3, [pc, #1116]	; 150c4 <__assert_fail@plt+0x30dc>
   14c64:	ldrb	r3, [r3]
   14c68:	cmp	r3, #0
   14c6c:	bne	14730 <__assert_fail@plt+0x2748>
   14c70:	add	r2, sp, #184	; 0xb8
   14c74:	ldr	r1, [sp, #140]	; 0x8c
   14c78:	mov	r0, #3
   14c7c:	bl	11bec <__fxstat64@plt>
   14c80:	cmp	r0, #0
   14c84:	bne	15460 <__assert_fail@plt+0x3478>
   14c88:	ldrd	r2, [sp, #232]	; 0xe8
   14c8c:	orrs	r3, r2, r3
   14c90:	moveq	r3, #1
   14c94:	movne	r3, #0
   14c98:	strb	r3, [sp, #181]	; 0xb5
   14c9c:	b	14730 <__assert_fail@plt+0x2748>
   14ca0:	mov	r0, r4
   14ca4:	bl	11ab4 <free@plt>
   14ca8:	b	14364 <__assert_fail@plt+0x237c>
   14cac:	ldrb	r3, [fp, #48]	; 0x30
   14cb0:	cmp	r3, #0
   14cb4:	bne	14ce4 <__assert_fail@plt+0x2cfc>
   14cb8:	ldr	r3, [pc, #1084]	; 150fc <__assert_fail@plt+0x3114>
   14cbc:	str	r3, [sp, #64]	; 0x40
   14cc0:	ldrb	r0, [r3]
   14cc4:	eor	r0, r0, #1
   14cc8:	bl	18890 <__assert_fail@plt+0x68a8>
   14ccc:	cmp	r0, #2
   14cd0:	beq	14f40 <__assert_fail@plt+0x2f58>
   14cd4:	ldr	r3, [sp, #172]	; 0xac
   14cd8:	and	r3, r3, #61440	; 0xf000
   14cdc:	cmp	r3, #40960	; 0xa000
   14ce0:	bne	14874 <__assert_fail@plt+0x288c>
   14ce4:	ldr	r3, [pc, #1024]	; 150ec <__assert_fail@plt+0x3104>
   14ce8:	ldrb	r3, [r3]
   14cec:	cmp	r3, #0
   14cf0:	bne	14204 <__assert_fail@plt+0x221c>
   14cf4:	ldr	r3, [pc, #1224]	; 151c4 <__assert_fail@plt+0x31dc>
   14cf8:	ldr	r0, [sp, #116]	; 0x74
   14cfc:	mov	r2, r5
   14d00:	ldr	r1, [r3]
   14d04:	ldr	r3, [pc, #1272]	; 15204 <__assert_fail@plt+0x321c>
   14d08:	cmp	r1, r0
   14d0c:	movne	r1, r4
   14d10:	moveq	r1, r3
   14d14:	bl	16abc <__assert_fail@plt+0x4ad4>
   14d18:	b	14204 <__assert_fail@plt+0x221c>
   14d1c:	ldr	r1, [pc, #1092]	; 15168 <__assert_fail@plt+0x3180>
   14d20:	mov	r0, r4
   14d24:	bl	11a48 <strcmp@plt>
   14d28:	cmp	r0, #0
   14d2c:	beq	14f30 <__assert_fail@plt+0x2f48>
   14d30:	mov	r0, r4
   14d34:	ldr	r1, [pc, #1072]	; 1516c <__assert_fail@plt+0x3184>
   14d38:	bl	11a48 <strcmp@plt>
   14d3c:	cmp	r0, #0
   14d40:	bne	15454 <__assert_fail@plt+0x346c>
   14d44:	ldr	r3, [pc, #1060]	; 15170 <__assert_fail@plt+0x3188>
   14d48:	mov	r2, #2
   14d4c:	str	r2, [r3, #8]
   14d50:	b	12990 <__assert_fail@plt+0x9a8>
   14d54:	ldr	r3, [pc, #1128]	; 151c4 <__assert_fail@plt+0x31dc>
   14d58:	ldr	r0, [r3]
   14d5c:	bl	2e970 <__assert_fail@plt+0x1c988>
   14d60:	mov	r1, r0
   14d64:	ldr	r0, [pc, #1032]	; 15174 <__assert_fail@plt+0x318c>
   14d68:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14d6c:	ldr	r3, [pc, #1020]	; 15170 <__assert_fail@plt+0x3188>
   14d70:	ldr	r3, [r3, #8]
   14d74:	cmp	r3, #1
   14d78:	beq	14f1c <__assert_fail@plt+0x2f34>
   14d7c:	ldr	r0, [pc, #1012]	; 15178 <__assert_fail@plt+0x3190>
   14d80:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14d84:	ldr	r3, [pc, #1144]	; 15204 <__assert_fail@plt+0x321c>
   14d88:	ldr	r1, [pc, #820]	; 150c4 <__assert_fail@plt+0x30dc>
   14d8c:	mov	r2, #1
   14d90:	ldr	r3, [r3, #16]
   14d94:	strb	r2, [r1]
   14d98:	strb	r2, [sp, #171]	; 0xab
   14d9c:	b	127e4 <__assert_fail@plt+0x7fc>
   14da0:	ldr	r0, [fp, #12]
   14da4:	mov	r1, r4
   14da8:	bl	1fb9c <__assert_fail@plt+0xdbb4>
   14dac:	b	14358 <__assert_fail@plt+0x2370>
   14db0:	ldr	r0, [sp, #176]	; 0xb0
   14db4:	cmp	r0, #0
   14db8:	beq	14dd8 <__assert_fail@plt+0x2df0>
   14dbc:	bl	11acc <ferror@plt>
   14dc0:	cmp	r0, #0
   14dc4:	bne	139b8 <__assert_fail@plt+0x19d0>
   14dc8:	ldr	r0, [sp, #176]	; 0xb0
   14dcc:	bl	11e5c <fclose@plt>
   14dd0:	cmp	r0, #0
   14dd4:	bne	139b8 <__assert_fail@plt+0x19d0>
   14dd8:	mov	r0, #0
   14ddc:	bl	1681c <__assert_fail@plt+0x4834>
   14de0:	bl	169c4 <__assert_fail@plt+0x49dc>
   14de4:	ldr	r3, [fp, #16]
   14de8:	add	r6, sp, #392	; 0x188
   14dec:	mov	r1, r3
   14df0:	ldr	r3, [r3]
   14df4:	mov	r0, r6
   14df8:	add	r5, sp, #288	; 0x120
   14dfc:	ldr	r3, [r3, #80]	; 0x50
   14e00:	blx	r3
   14e04:	mov	lr, r6
   14e08:	mov	ip, r5
   14e0c:	ldm	lr!, {r0, r1, r2, r3}
   14e10:	ldr	r8, [pc, #868]	; 1517c <__assert_fail@plt+0x3194>
   14e14:	ldr	r9, [pc, #868]	; 15180 <__assert_fail@plt+0x3198>
   14e18:	stmia	ip!, {r0, r1, r2, r3}
   14e1c:	ldm	lr, {r0, r1, r2}
   14e20:	ldr	r7, [pc, #860]	; 15184 <__assert_fail@plt+0x319c>
   14e24:	stm	ip, {r0, r1, r2}
   14e28:	b	14e40 <__assert_fail@plt+0x2e58>
   14e2c:	ldr	r4, [sp, #392]	; 0x188
   14e30:	add	r0, r4, #8
   14e34:	bl	1ee54 <__assert_fail@plt+0xce6c>
   14e38:	cmp	r0, #2
   14e3c:	beq	14eb4 <__assert_fail@plt+0x2ecc>
   14e40:	ldr	r3, [sp, #288]	; 0x120
   14e44:	mov	r2, #0
   14e48:	mov	r1, r6
   14e4c:	ldr	r3, [r3, #88]	; 0x58
   14e50:	mov	r0, r5
   14e54:	blx	r3
   14e58:	cmp	r0, #0
   14e5c:	bne	14e2c <__assert_fail@plt+0x2e44>
   14e60:	ldr	r3, [sp, #288]	; 0x120
   14e64:	mov	r0, r5
   14e68:	ldr	r3, [r3, #92]	; 0x5c
   14e6c:	blx	r3
   14e70:	ldrb	r0, [sp, #171]	; 0xab
   14e74:	cmp	r0, #0
   14e78:	bne	155ec <__assert_fail@plt+0x3604>
   14e7c:	ldr	r3, [pc, #772]	; 15188 <__assert_fail@plt+0x31a0>
   14e80:	ldr	r2, [sp, #572]	; 0x23c
   14e84:	ldr	r3, [r3]
   14e88:	cmp	r2, r3
   14e8c:	bne	155e8 <__assert_fail@plt+0x3600>
   14e90:	add	sp, sp, #580	; 0x244
   14e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e98:	ldr	r0, [pc, #748]	; 1518c <__assert_fail@plt+0x31a4>
   14e9c:	bl	11c94 <getenv@plt>
   14ea0:	cmp	r0, #0
   14ea4:	str	r0, [fp, #24]
   14ea8:	ldrne	r3, [pc, #736]	; 15190 <__assert_fail@plt+0x31a8>
   14eac:	strne	r3, [fp, #28]
   14eb0:	b	12138 <__assert_fail@plt+0x150>
   14eb4:	ldr	r3, [r8]
   14eb8:	ldr	fp, [r4, #24]
   14ebc:	cmp	r3, #2
   14ec0:	beq	153e0 <__assert_fail@plt+0x33f8>
   14ec4:	ldrb	r3, [r4, #112]	; 0x70
   14ec8:	mov	r2, #0
   14ecc:	str	fp, [sp]
   14ed0:	str	r3, [sp, #4]
   14ed4:	mov	r0, r2
   14ed8:	mov	r1, r2
   14edc:	ldr	r3, [r4]
   14ee0:	bl	21190 <__assert_fail@plt+0xf1a8>
   14ee4:	ldr	r0, [r4]
   14ee8:	bl	20a58 <__assert_fail@plt+0xea70>
   14eec:	b	14e40 <__assert_fail@plt+0x2e58>
   14ef0:	mov	r2, #1
   14ef4:	ldr	r1, [pc, #664]	; 15194 <__assert_fail@plt+0x31ac>
   14ef8:	ldr	r0, [pc, #664]	; 15198 <__assert_fail@plt+0x31b0>
   14efc:	bl	11d90 <setenv@plt>
   14f00:	b	12538 <__assert_fail@plt+0x550>
   14f04:	ldr	r1, [fp, #24]
   14f08:	ldr	r0, [fp, #28]
   14f0c:	bl	250d8 <__assert_fail@plt+0x130f0>
   14f10:	ldr	r3, [pc, #644]	; 1519c <__assert_fail@plt+0x31b4>
   14f14:	str	r0, [r3]
   14f18:	b	12548 <__assert_fail@plt+0x560>
   14f1c:	ldr	r0, [pc, #636]	; 151a0 <__assert_fail@plt+0x31b8>
   14f20:	bl	1fc1c <__assert_fail@plt+0xdc34>
   14f24:	ldr	r3, [pc, #728]	; 15204 <__assert_fail@plt+0x321c>
   14f28:	ldr	r3, [r3, #16]
   14f2c:	b	127e4 <__assert_fail@plt+0x7fc>
   14f30:	ldr	r3, [pc, #568]	; 15170 <__assert_fail@plt+0x3188>
   14f34:	mov	r2, #1
   14f38:	str	r2, [r3, #8]
   14f3c:	b	12990 <__assert_fail@plt+0x9a8>
   14f40:	ldr	r3, [pc, #716]	; 15214 <__assert_fail@plt+0x322c>
   14f44:	ldrb	r3, [r3]
   14f48:	cmp	r3, #0
   14f4c:	beq	14ce4 <__assert_fail@plt+0x2cfc>
   14f50:	b	14cd4 <__assert_fail@plt+0x2cec>
   14f54:	ldr	r2, [sp, #92]	; 0x5c
   14f58:	ldr	r2, [r2]
   14f5c:	cmp	r2, #3
   14f60:	beq	148d0 <__assert_fail@plt+0x28e8>
   14f64:	cmp	r7, #0
   14f68:	bne	152c0 <__assert_fail@plt+0x32d8>
   14f6c:	bl	188c0 <__assert_fail@plt+0x68d8>
   14f70:	cmp	r0, #0
   14f74:	bne	14f84 <__assert_fail@plt+0x2f9c>
   14f78:	bl	188d8 <__assert_fail@plt+0x68f0>
   14f7c:	subs	r3, r0, #0
   14f80:	beq	15480 <__assert_fail@plt+0x3498>
   14f84:	ldr	r2, [pc, #564]	; 151c0 <__assert_fail@plt+0x31d8>
   14f88:	add	r4, sp, #392	; 0x188
   14f8c:	add	r6, r2, r6, lsl #3
   14f90:	ldm	r6, {r0, r1}
   14f94:	stm	r4, {r0, r1}
   14f98:	b	148ec <__assert_fail@plt+0x2904>
   14f9c:	ldr	r0, [r7, r3, lsl #2]
   14fa0:	add	r3, r3, #1
   14fa4:	str	r3, [r6]
   14fa8:	bl	2f518 <renameat2@@Base+0x804>
   14fac:	ldr	ip, [pc, #496]	; 151a4 <__assert_fail@plt+0x31bc>
   14fb0:	ldr	r2, [pc, #524]	; 151c4 <__assert_fail@plt+0x31dc>
   14fb4:	ldr	r3, [r6]
   14fb8:	ldr	r1, [fp, #32]
   14fbc:	str	r4, [ip]
   14fc0:	cmp	r3, r1
   14fc4:	mov	r4, #1
   14fc8:	strb	r4, [fp, #64]	; 0x40
   14fcc:	str	r0, [r2]
   14fd0:	bge	12528 <__assert_fail@plt+0x540>
   14fd4:	ldr	r2, [fp]
   14fd8:	add	r1, r3, r4
   14fdc:	str	r1, [r6]
   14fe0:	ldr	r0, [r2, r3, lsl #2]
   14fe4:	bl	2f518 <renameat2@@Base+0x804>
   14fe8:	ldr	r3, [r6]
   14fec:	ldr	r2, [fp, #32]
   14ff0:	cmp	r3, r2
   14ff4:	str	r0, [fp, #52]	; 0x34
   14ff8:	bge	12528 <__assert_fail@plt+0x540>
   14ffc:	ldr	r1, [fp]
   15000:	ldr	r2, [pc, #416]	; 151a8 <__assert_fail@plt+0x31c0>
   15004:	ldr	r5, [r9]
   15008:	ldr	r0, [r1, r3, lsl #2]
   1500c:	ldr	r6, [r2]
   15010:	bl	2e970 <__assert_fail@plt+0x1c988>
   15014:	mov	r1, r4
   15018:	mov	r3, r6
   1501c:	ldr	r2, [pc, #392]	; 151ac <__assert_fail@plt+0x31c4>
   15020:	str	r0, [sp]
   15024:	mov	r0, r5
   15028:	bl	11e38 <__fprintf_chk@plt>
   1502c:	ldr	r0, [r9]
   15030:	mov	r1, #2
   15034:	bl	16534 <__assert_fail@plt+0x454c>
   15038:	mov	r0, r4
   1503c:	bl	1681c <__assert_fail@plt+0x4834>
   15040:	mov	r1, r4
   15044:	ldr	r0, [sp, #116]	; 0x74
   15048:	bl	21150 <__assert_fail@plt+0xf168>
   1504c:	ldr	r9, [pc, #356]	; 151b8 <__assert_fail@plt+0x31d0>
   15050:	mvn	r3, #0
   15054:	str	r3, [r9]
   15058:	cmp	r0, #0
   1505c:	bne	12784 <__assert_fail@plt+0x79c>
   15060:	b	14a14 <__assert_fail@plt+0x2a2c>
   15064:	ldr	r4, [pc, #324]	; 151b0 <__assert_fail@plt+0x31c8>
   15068:	b	149c4 <__assert_fail@plt+0x29dc>
   1506c:	ldrb	r3, [fp, #48]	; 0x30
   15070:	cmp	r3, #0
   15074:	beq	15520 <__assert_fail@plt+0x3538>
   15078:	ldrb	r3, [fp, #56]	; 0x38
   1507c:	cmp	r3, #0
   15080:	bne	15470 <__assert_fail@plt+0x3488>
   15084:	ldr	r3, [pc, #240]	; 1517c <__assert_fail@plt+0x3194>
   15088:	mov	r2, #1
   1508c:	strb	r2, [sp, #171]	; 0xab
   15090:	ldr	r3, [r3]
   15094:	cmp	r3, r2
   15098:	ldreq	r3, [sp, #80]	; 0x50
   1509c:	streq	r3, [sp, #28]
   150a0:	beq	14874 <__assert_fail@plt+0x288c>
   150a4:	ldr	r0, [sp, #116]	; 0x74
   150a8:	bl	2e970 <__assert_fail@plt+0x1c988>
   150ac:	ldr	r3, [sp, #80]	; 0x50
   150b0:	str	r3, [sp, #28]
   150b4:	mov	r1, r0
   150b8:	ldr	r0, [pc, #244]	; 151b4 <__assert_fail@plt+0x31cc>
   150bc:	bl	1fc1c <__assert_fail@plt+0xdc34>
   150c0:	b	14874 <__assert_fail@plt+0x288c>
   150c4:	ldrdeq	sl, [r4], -ip
   150c8:	ldrdeq	sl, [r4], -r8
   150cc:			; <UNDEFINED> instruction: 0x0004a6b0
   150d0:	andeq	sl, r4, r8, lsr #15
   150d4:	andeq	sl, r4, r4, asr #13
   150d8:	muleq	r3, r8, r8
   150dc:	muleq	r3, r0, r8
   150e0:	ldrdeq	r5, [r3], -r1
   150e4:	andeq	r2, r3, r4, lsr pc
   150e8:	andeq	r2, r3, r4, lsl #17
   150ec:	andeq	sl, r4, r5, ror #13
   150f0:	andeq	r2, r3, r4, asr pc
   150f4:			; <UNDEFINED> instruction: 0x000081b6
   150f8:	andeq	r8, r4, ip, lsr r3
   150fc:			; <UNDEFINED> instruction: 0x0004a6b8
   15100:	andeq	r2, r3, ip, asr #24
   15104:	andeq	r2, r3, r8, asr fp
   15108:	andeq	sl, r4, r0, lsr #15
   1510c:	andeq	sl, r4, sl, ror #14
   15110:	andeq	sl, r4, r8, asr #13
   15114:	andeq	r2, r3, r0, lsr #25
   15118:	andeq	sl, r4, r0, ror #13
   1511c:	ldrdeq	r2, [r3], -r0
   15120:	andeq	r2, r3, r4, ror #27
   15124:	muleq	r4, r0, r7
   15128:	andeq	r2, r3, r0, lsl lr
   1512c:	andeq	r2, r3, r4, ror lr
   15130:	andeq	r2, r3, r0, lsr r6
   15134:	andeq	r0, r0, r1, lsl #2
   15138:	strdeq	sl, [r4], -r9
   1513c:	strdeq	sl, [r4], -r8
   15140:	strdeq	sl, [r4], -r1
   15144:	andeq	r2, r3, r0, lsl #30
   15148:	andeq	sl, r4, ip, lsl #15
   1514c:	strdeq	r5, [r3], -r8
   15150:	andeq	r2, r3, r8, lsl #29
   15154:	andeq	r2, r3, r8, ror lr
   15158:	strdeq	r2, [r3], -ip
   1515c:	strdeq	r2, [r3], -r8
   15160:	andeq	sl, r4, r4, ror #10
   15164:	andeq	r2, r3, ip, asr #30
   15168:			; <UNDEFINED> instruction: 0x00032ab4
   1516c:			; <UNDEFINED> instruction: 0x00032abc
   15170:	andeq	r8, r4, r0, lsr r2
   15174:	andeq	r2, r3, ip, lsl #23
   15178:			; <UNDEFINED> instruction: 0x00032bbc
   1517c:			; <UNDEFINED> instruction: 0x0004a6bc
   15180:	muleq	r3, r0, r0
   15184:	andeq	r2, r3, r0, asr #2
   15188:	andeq	r7, r4, r8, lsl #30
   1518c:	andeq	r2, r3, r0, asr #18
   15190:	andeq	r2, r3, r0, asr r9
   15194:	ldrdeq	r2, [r3], -ip
   15198:	andeq	r2, r3, r0, ror #21
   1519c:	andeq	sl, r4, r8, lsr r8
   151a0:	andeq	r2, r3, r4, lsr #23
   151a4:	muleq	r4, r8, r7
   151a8:	andeq	sl, r4, r8, ror #10
   151ac:	andeq	r2, r3, r4, asr #21
   151b0:	andeq	r2, r3, ip, lsl r8
   151b4:	muleq	r3, ip, lr
   151b8:	ldrdeq	sl, [r4], -r4
   151bc:	andeq	sl, r4, r8, lsl #15
   151c0:			; <UNDEFINED> instruction: 0x0004a7b4
   151c4:	andeq	sl, r4, r4, ror r7
   151c8:	andeq	r2, r3, r4, lsr #12
   151cc:	andeq	sl, r4, r0, lsl #15
   151d0:	andeq	r2, r3, r0, lsr #27
   151d4:	andeq	r2, r3, r4, ror #21
   151d8:	andeq	r2, r3, r8, ror #21
   151dc:	andeq	r2, r3, ip, lsr #16
   151e0:	andeq	r2, r3, r4, lsr #16
   151e4:	andeq	r2, r3, r4, ror pc
   151e8:	andeq	r2, r3, r8, lsr #22
   151ec:	andeq	r2, r3, r0, lsl #22
   151f0:	andeq	r2, r3, r4, asr sl
   151f4:	andeq	r2, r3, ip, lsr #19
   151f8:	andeq	r2, r3, r4, ror sl
   151fc:	andeq	r2, r3, ip, lsl #21
   15200:	andeq	r3, r3, r0, lsl #26
   15204:	andeq	sl, r4, r0, lsl #14
   15208:	ldrdeq	r2, [r3], -r0
   1520c:	andeq	r8, r4, r4, lsl #6
   15210:	andeq	r2, r3, ip, lsl r6
   15214:	andeq	sl, r4, r9, ror #14
   15218:	andeq	r0, r0, r5, asr #11
   1521c:	andeq	r0, r0, r8, asr #11
   15220:	andeq	r2, r3, r4, lsr #28
   15224:	strdeq	r2, [r3], -r8
   15228:	andeq	r0, r0, sl, ror #11
   1522c:	ldrdeq	r2, [r3], -r4
   15230:	muleq	r0, r6, r5
   15234:	andeq	r2, r3, ip, ror #14
   15238:			; <UNDEFINED> instruction: 0x00032cbc
   1523c:	ldrdeq	sl, [r4], -ip
   15240:	andeq	r2, r3, r0, lsl #12
   15244:	ldr	r9, [pc, #-148]	; 151b8 <__assert_fail@plt+0x31d0>
   15248:	mov	r1, #0
   1524c:	ldr	r3, [r9]
   15250:	cmp	r3, #0
   15254:	beq	152e0 <__assert_fail@plt+0x32f8>
   15258:	ldr	r0, [sp, #136]	; 0x88
   1525c:	cmp	r7, #0
   15260:	mov	r3, #0
   15264:	str	r4, [sp, #4]
   15268:	str	r6, [sp]
   1526c:	orrne	r1, r1, #4
   15270:	mov	r2, r3
   15274:	ldr	r0, [r0]
   15278:	bl	1f80c <__assert_fail@plt+0xd824>
   1527c:	ldr	r3, [sp, #136]	; 0x88
   15280:	str	r5, [sp, #4]
   15284:	str	r6, [sp]
   15288:	add	r2, sp, #184	; 0xb8
   1528c:	ldr	r0, [r3]
   15290:	ldr	r1, [pc, #-220]	; 151bc <__assert_fail@plt+0x31d4>
   15294:	ldr	r3, [sp, #116]	; 0x74
   15298:	bl	16b94 <__assert_fail@plt+0x4bac>
   1529c:	bl	188d8 <__assert_fail@plt+0x68f0>
   152a0:	cmp	r0, #0
   152a4:	beq	14204 <__assert_fail@plt+0x221c>
   152a8:	ldr	r3, [pc, #-236]	; 151c4 <__assert_fail@plt+0x31dc>
   152ac:	mov	r2, r5
   152b0:	ldr	r1, [pc, #-180]	; 15204 <__assert_fail@plt+0x321c>
   152b4:	ldr	r0, [r3]
   152b8:	bl	16abc <__assert_fail@plt+0x4ad4>
   152bc:	b	14204 <__assert_fail@plt+0x221c>
   152c0:	ldr	r2, [pc, #-264]	; 151c0 <__assert_fail@plt+0x31d8>
   152c4:	add	r4, sp, #392	; 0x188
   152c8:	add	r6, r2, r6, lsl #3
   152cc:	ldm	r6, {r0, r1}
   152d0:	stm	r4, {r0, r1}
   152d4:	lsl	r6, r3, #23
   152d8:	lsr	r6, r6, #23
   152dc:	b	148fc <__assert_fail@plt+0x2914>
   152e0:	ldr	r0, [sp, #136]	; 0x88
   152e4:	ldr	r2, [pc, #-296]	; 151c4 <__assert_fail@plt+0x31dc>
   152e8:	str	r4, [sp, #4]
   152ec:	str	r6, [sp]
   152f0:	orr	r1, r1, #14
   152f4:	ldr	r3, [pc, #-248]	; 15204 <__assert_fail@plt+0x321c>
   152f8:	ldr	r2, [r2]
   152fc:	ldr	r0, [r0]
   15300:	bl	1f80c <__assert_fail@plt+0xd824>
   15304:	b	1527c <__assert_fail@plt+0x3294>
   15308:	ldrb	r2, [sp, #180]	; 0xb4
   1530c:	ldr	r1, [pc, #-332]	; 151c8 <__assert_fail@plt+0x31e0>
   15310:	ldr	r3, [sp, #152]	; 0x98
   15314:	add	r2, r1, r2
   15318:	mov	r0, r7
   1531c:	mov	r1, #1
   15320:	bl	11e38 <__fprintf_chk@plt>
   15324:	mov	r3, #2
   15328:	str	r3, [sp, #16]
   1532c:	b	14aa0 <__assert_fail@plt+0x2ab8>
   15330:	str	r9, [sp, #28]
   15334:	str	r6, [sp, #24]
   15338:	b	1364c <__assert_fail@plt+0x1664>
   1533c:	ldr	r0, [sp, #176]	; 0xb0
   15340:	cmp	r0, #0
   15344:	ldrne	r3, [sp, #24]
   15348:	strdne	r2, [sp, #24]
   1534c:	bne	1358c <__assert_fail@plt+0x15a4>
   15350:	ldr	sl, [pc, #-396]	; 151cc <__assert_fail@plt+0x31e4>
   15354:	ldr	r3, [sp, #24]
   15358:	str	r0, [sp, #24]
   1535c:	str	r3, [sp, #28]
   15360:	ldr	r3, [sl]
   15364:	ldr	r2, [sl, #4]
   15368:	adds	r3, r6, r3
   1536c:	str	r3, [sp, #84]	; 0x54
   15370:	adc	r3, r7, r2
   15374:	str	r3, [sp, #88]	; 0x58
   15378:	b	12ec0 <__assert_fail@plt+0xed8>
   1537c:	ldr	r0, [pc, #-436]	; 151d0 <__assert_fail@plt+0x31e8>
   15380:	bl	1f558 <__assert_fail@plt+0xd570>
   15384:	ldr	r2, [pc, #-392]	; 15204 <__assert_fail@plt+0x321c>
   15388:	mov	r3, #1
   1538c:	mov	r1, r3
   15390:	ldr	r2, [r2, #16]
   15394:	mov	r0, r4
   15398:	bl	1fa50 <__assert_fail@plt+0xda68>
   1539c:	ldr	r1, [pc, #-464]	; 151d4 <__assert_fail@plt+0x31ec>
   153a0:	bl	11a00 <fdopen@plt>
   153a4:	subs	r5, r0, #0
   153a8:	bne	125cc <__assert_fail@plt+0x5e4>
   153ac:	mov	r0, r4
   153b0:	bl	2e970 <__assert_fail@plt+0x1c988>
   153b4:	mov	r1, r0
   153b8:	ldr	r0, [pc, #-488]	; 151d8 <__assert_fail@plt+0x31f0>
   153bc:	bl	1f774 <__assert_fail@plt+0xd78c>
   153c0:	bl	188d8 <__assert_fail@plt+0x68f0>
   153c4:	ldr	r3, [pc, #-496]	; 151dc <__assert_fail@plt+0x31f4>
   153c8:	ldr	r4, [pc, #-496]	; 151e0 <__assert_fail@plt+0x31f8>
   153cc:	cmp	r0, #0
   153d0:	movne	r4, r3
   153d4:	b	12944 <__assert_fail@plt+0x95c>
   153d8:	str	r3, [sp, #112]	; 0x70
   153dc:	b	12de4 <__assert_fail@plt+0xdfc>
   153e0:	and	sl, fp, #61440	; 0xf000
   153e4:	cmp	sl, #40960	; 0xa000
   153e8:	ldr	r0, [r4]
   153ec:	moveq	sl, r9
   153f0:	movne	sl, r7
   153f4:	bl	2e970 <__assert_fail@plt+0x1c988>
   153f8:	mov	r1, sl
   153fc:	mov	r2, r0
   15400:	ldr	r0, [pc, #-548]	; 151e4 <__assert_fail@plt+0x31fc>
   15404:	bl	1fc1c <__assert_fail@plt+0xdc34>
   15408:	b	14ec4 <__assert_fail@plt+0x2edc>
   1540c:	ldr	r0, [pc, #-556]	; 151e8 <__assert_fail@plt+0x3200>
   15410:	bl	1f774 <__assert_fail@plt+0xd78c>
   15414:	ldr	r0, [pc, #-560]	; 151ec <__assert_fail@plt+0x3204>
   15418:	bl	1f774 <__assert_fail@plt+0xd78c>
   1541c:	ldrb	r3, [r2, #1]
   15420:	cmp	r3, #0
   15424:	bne	12990 <__assert_fail@plt+0x9a8>
   15428:	b	12af0 <__assert_fail@plt+0xb08>
   1542c:	ldr	r0, [pc, #-580]	; 151f0 <__assert_fail@plt+0x3208>
   15430:	bl	1f558 <__assert_fail@plt+0xd570>
   15434:	ldr	r0, [pc, #-584]	; 151f4 <__assert_fail@plt+0x320c>
   15438:	bl	1f558 <__assert_fail@plt+0xd570>
   1543c:	ldr	r0, [pc, #-588]	; 151f8 <__assert_fail@plt+0x3210>
   15440:	bl	1f558 <__assert_fail@plt+0xd570>
   15444:	mov	r2, r1
   15448:	ldr	r0, [pc, #-596]	; 151fc <__assert_fail@plt+0x3214>
   1544c:	mov	r1, r4
   15450:	bl	2491c <__assert_fail@plt+0x12934>
   15454:	ldr	r0, [r9]
   15458:	mov	r1, #2
   1545c:	bl	16534 <__assert_fail@plt+0x454c>
   15460:	ldr	r3, [sp, #136]	; 0x88
   15464:	ldr	r0, [pc, #-620]	; 15200 <__assert_fail@plt+0x3218>
   15468:	ldr	r1, [r3]
   1546c:	bl	1f774 <__assert_fail@plt+0xd78c>
   15470:	ldrb	r3, [sp, #171]	; 0xab
   15474:	cmp	r3, #0
   15478:	bne	14874 <__assert_fail@plt+0x288c>
   1547c:	b	15084 <__assert_fail@plt+0x309c>
   15480:	str	r5, [sp, #4]
   15484:	str	r8, [sp]
   15488:	mov	r1, r3
   1548c:	add	r2, sp, #184	; 0xb8
   15490:	ldr	r0, [sp, #116]	; 0x74
   15494:	bl	16b94 <__assert_fail@plt+0x4bac>
   15498:	b	14204 <__assert_fail@plt+0x221c>
   1549c:	ldr	r3, [sp, #16]
   154a0:	ldr	r1, [r3, #4]
   154a4:	ldr	r3, [pc, #-680]	; 15204 <__assert_fail@plt+0x321c>
   154a8:	ldr	r2, [r3, #84]	; 0x54
   154ac:	ldr	r3, [r3, #80]	; 0x50
   154b0:	cmp	r3, sl
   154b4:	cmpeq	r1, r2
   154b8:	beq	14964 <__assert_fail@plt+0x297c>
   154bc:	ldr	r0, [sp, #116]	; 0x74
   154c0:	bl	2e970 <__assert_fail@plt+0x1c988>
   154c4:	mov	r1, r0
   154c8:	ldr	r0, [pc, #-712]	; 15208 <__assert_fail@plt+0x3220>
   154cc:	bl	1fc1c <__assert_fail@plt+0xdc34>
   154d0:	mov	r1, r8
   154d4:	b	1524c <__assert_fail@plt+0x3264>
   154d8:	ldr	r3, [sp, #28]
   154dc:	ldr	r2, [sp, #68]	; 0x44
   154e0:	orrs	r3, r3, r2
   154e4:	moveq	r1, #1
   154e8:	beq	15258 <__assert_fail@plt+0x3270>
   154ec:	b	14978 <__assert_fail@plt+0x2990>
   154f0:	ldr	r3, [pc, #-748]	; 1520c <__assert_fail@plt+0x3224>
   154f4:	mov	r1, #0
   154f8:	ldr	r0, [r3]
   154fc:	bl	16534 <__assert_fail@plt+0x454c>
   15500:	ldrb	r3, [sp, #180]	; 0xb4
   15504:	ldr	r0, [pc, #-764]	; 15210 <__assert_fail@plt+0x3228>
   15508:	mov	r1, r7
   1550c:	add	r0, r0, r3
   15510:	bl	11f88 <fputs@plt>
   15514:	mov	r3, #3
   15518:	str	r3, [sp, #16]
   1551c:	b	14aa0 <__assert_fail@plt+0x2ab8>
   15520:	ldr	r3, [pc, #-788]	; 15214 <__assert_fail@plt+0x322c>
   15524:	ldrb	r3, [r3]
   15528:	cmp	r3, #0
   1552c:	bne	14874 <__assert_fail@plt+0x288c>
   15530:	b	15078 <__assert_fail@plt+0x3090>
   15534:	mov	r1, #1
   15538:	b	1524c <__assert_fail@plt+0x3264>
   1553c:	ldr	r3, [pc, #-772]	; 15240 <__assert_fail@plt+0x3258>
   15540:	ldr	r2, [pc, #-816]	; 15218 <__assert_fail@plt+0x3230>
   15544:	ldr	r1, [pc, #-792]	; 15234 <__assert_fail@plt+0x324c>
   15548:	ldr	r0, [pc, #-792]	; 15238 <__assert_fail@plt+0x3250>
   1554c:	bl	11fe8 <__assert_fail@plt>
   15550:	ldr	r3, [pc, #-792]	; 15240 <__assert_fail@plt+0x3258>
   15554:	ldr	r2, [pc, #-832]	; 1521c <__assert_fail@plt+0x3234>
   15558:	ldr	r1, [pc, #-812]	; 15234 <__assert_fail@plt+0x324c>
   1555c:	ldr	r0, [pc, #-812]	; 15238 <__assert_fail@plt+0x3250>
   15560:	bl	11fe8 <__assert_fail@plt>
   15564:	ldr	r1, [fp, #12]
   15568:	ldr	r0, [pc, #-844]	; 15224 <__assert_fail@plt+0x323c>
   1556c:	bl	1f774 <__assert_fail@plt+0xd78c>
   15570:	ldr	r0, [pc, #-856]	; 15220 <__assert_fail@plt+0x3238>
   15574:	bl	1f558 <__assert_fail@plt+0xd570>
   15578:	ldr	r3, [sp, #136]	; 0x88
   1557c:	ldr	r0, [pc, #-864]	; 15224 <__assert_fail@plt+0x323c>
   15580:	ldr	r1, [r3]
   15584:	bl	1f774 <__assert_fail@plt+0xd78c>
   15588:	mov	r2, sl
   1558c:	mov	r3, fp
   15590:	mov	r0, r8
   15594:	mov	r1, r9
   15598:	bl	165c8 <__assert_fail@plt+0x45e0>
   1559c:	ldr	r3, [pc, #-868]	; 15240 <__assert_fail@plt+0x3258>
   155a0:	ldr	r2, [pc, #-896]	; 15228 <__assert_fail@plt+0x3240>
   155a4:	ldr	r1, [pc, #-888]	; 15234 <__assert_fail@plt+0x324c>
   155a8:	ldr	r0, [pc, #-900]	; 1522c <__assert_fail@plt+0x3244>
   155ac:	bl	11fe8 <__assert_fail@plt>
   155b0:	ldr	r3, [pc, #-888]	; 15240 <__assert_fail@plt+0x3258>
   155b4:	ldr	r2, [pc, #-908]	; 15230 <__assert_fail@plt+0x3248>
   155b8:	ldr	r1, [pc, #-908]	; 15234 <__assert_fail@plt+0x324c>
   155bc:	ldr	r0, [pc, #-908]	; 15238 <__assert_fail@plt+0x3250>
   155c0:	bl	11fe8 <__assert_fail@plt>
   155c4:	ldr	r2, [pc, #-912]	; 1523c <__assert_fail@plt+0x3254>
   155c8:	ldrb	r9, [r2]
   155cc:	cmp	r9, #0
   155d0:	bne	155f4 <__assert_fail@plt+0x360c>
   155d4:	orrs	r2, r6, r7
   155d8:	beq	1360c <__assert_fail@plt+0x1624>
   155dc:	str	r3, [sp, #28]
   155e0:	b	131d0 <__assert_fail@plt+0x11e8>
   155e4:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   155e8:	bl	11b50 <__stack_chk_fail@plt>
   155ec:	mov	r0, #1
   155f0:	bl	11d60 <exit@plt>
   155f4:	str	r9, [sp, #28]
   155f8:	b	13580 <__assert_fail@plt+0x1598>
   155fc:	mov	fp, #0
   15600:	mov	lr, #0
   15604:	pop	{r1}		; (ldr r1, [sp], #4)
   15608:	mov	r2, sp
   1560c:	push	{r2}		; (str r2, [sp, #-4]!)
   15610:	push	{r0}		; (str r0, [sp, #-4]!)
   15614:	ldr	ip, [pc, #16]	; 1562c <__assert_fail@plt+0x3644>
   15618:	push	{ip}		; (str ip, [sp, #-4]!)
   1561c:	ldr	r0, [pc, #12]	; 15630 <__assert_fail@plt+0x3648>
   15620:	ldr	r3, [pc, #12]	; 15634 <__assert_fail@plt+0x364c>
   15624:	bl	11cc4 <__libc_start_main@plt>
   15628:	bl	11fa0 <abort@plt>
   1562c:	andeq	r1, r3, r0, asr pc
   15630:	strdeq	r1, [r1], -r8
   15634:	strdeq	r1, [r3], -r0
   15638:	ldr	r3, [pc, #20]	; 15654 <__assert_fail@plt+0x366c>
   1563c:	ldr	r2, [pc, #20]	; 15658 <__assert_fail@plt+0x3670>
   15640:	add	r3, pc, r3
   15644:	ldr	r2, [r3, r2]
   15648:	cmp	r2, #0
   1564c:	bxeq	lr
   15650:	b	11d24 <__gmon_start__@plt>
   15654:			; <UNDEFINED> instruction: 0x000329b8
   15658:	andeq	r0, r0, r8, lsl #4
   1565c:	ldr	r0, [pc, #24]	; 1567c <__assert_fail@plt+0x3694>
   15660:	ldr	r3, [pc, #24]	; 15680 <__assert_fail@plt+0x3698>
   15664:	cmp	r3, r0
   15668:	bxeq	lr
   1566c:	ldr	r3, [pc, #16]	; 15684 <__assert_fail@plt+0x369c>
   15670:	cmp	r3, #0
   15674:	bxeq	lr
   15678:	bx	r3
   1567c:	andeq	r8, r4, r4, ror #5
   15680:	andeq	r8, r4, r4, ror #5
   15684:	andeq	r0, r0, r0
   15688:	ldr	r0, [pc, #36]	; 156b4 <__assert_fail@plt+0x36cc>
   1568c:	ldr	r1, [pc, #36]	; 156b8 <__assert_fail@plt+0x36d0>
   15690:	sub	r1, r1, r0
   15694:	asr	r1, r1, #2
   15698:	add	r1, r1, r1, lsr #31
   1569c:	asrs	r1, r1, #1
   156a0:	bxeq	lr
   156a4:	ldr	r3, [pc, #16]	; 156bc <__assert_fail@plt+0x36d4>
   156a8:	cmp	r3, #0
   156ac:	bxeq	lr
   156b0:	bx	r3
   156b4:	andeq	r8, r4, r4, ror #5
   156b8:	andeq	r8, r4, r4, ror #5
   156bc:	andeq	r0, r0, r0
   156c0:	push	{r4, lr}
   156c4:	ldr	r4, [pc, #24]	; 156e4 <__assert_fail@plt+0x36fc>
   156c8:	ldrb	r3, [r4]
   156cc:	cmp	r3, #0
   156d0:	popne	{r4, pc}
   156d4:	bl	1565c <__assert_fail@plt+0x3674>
   156d8:	mov	r3, #1
   156dc:	strb	r3, [r4]
   156e0:	pop	{r4, pc}
   156e4:	andeq	r8, r4, ip, lsl #6
   156e8:	b	15688 <__assert_fail@plt+0x36a0>
   156ec:	ldr	r3, [pc, #164]	; 15798 <__assert_fail@plt+0x37b0>
   156f0:	push	{r4, lr}
   156f4:	mov	r4, r0
   156f8:	ldr	r0, [r3]
   156fc:	bl	2e970 <__assert_fail@plt+0x1c988>
   15700:	cmp	r4, #0
   15704:	beq	15728 <__assert_fail@plt+0x3740>
   15708:	ldr	r3, [pc, #140]	; 1579c <__assert_fail@plt+0x37b4>
   1570c:	ldr	r3, [r3]
   15710:	cmp	r3, #2
   15714:	popne	{r4, pc}
   15718:	mov	r1, r0
   1571c:	pop	{r4, lr}
   15720:	ldr	r0, [pc, #120]	; 157a0 <__assert_fail@plt+0x37b8>
   15724:	b	1fc1c <__assert_fail@plt+0xdc34>
   15728:	ldr	r3, [pc, #116]	; 157a4 <__assert_fail@plt+0x37bc>
   1572c:	ldrb	r3, [r3]
   15730:	cmp	r3, #0
   15734:	beq	15758 <__assert_fail@plt+0x3770>
   15738:	ldr	r3, [pc, #92]	; 1579c <__assert_fail@plt+0x37b4>
   1573c:	ldr	r3, [r3]
   15740:	cmp	r3, #1
   15744:	popeq	{r4, pc}
   15748:	mov	r1, r0
   1574c:	pop	{r4, lr}
   15750:	ldr	r0, [pc, #80]	; 157a8 <__assert_fail@plt+0x37c0>
   15754:	b	1fc1c <__assert_fail@plt+0xdc34>
   15758:	ldr	r3, [pc, #76]	; 157ac <__assert_fail@plt+0x37c4>
   1575c:	mov	r1, r0
   15760:	ldrb	r3, [r3]
   15764:	cmp	r3, #0
   15768:	bne	15790 <__assert_fail@plt+0x37a8>
   1576c:	ldr	r0, [pc, #60]	; 157b0 <__assert_fail@plt+0x37c8>
   15770:	bl	203bc <__assert_fail@plt+0xe3d4>
   15774:	ldr	r3, [pc, #56]	; 157b4 <__assert_fail@plt+0x37cc>
   15778:	ldr	r3, [r3]
   1577c:	ldrb	r3, [r3]
   15780:	cmp	r3, #121	; 0x79
   15784:	popeq	{r4, pc}
   15788:	ldr	r0, [pc, #40]	; 157b8 <__assert_fail@plt+0x37d0>
   1578c:	bl	1f558 <__assert_fail@plt+0xd570>
   15790:	ldr	r0, [pc, #36]	; 157bc <__assert_fail@plt+0x37d4>
   15794:	bl	1f558 <__assert_fail@plt+0xd570>
   15798:	ldrdeq	sl, [r4], -r0
   1579c:			; <UNDEFINED> instruction: 0x0004a6bc
   157a0:	andeq	r1, r3, ip, ror #30
   157a4:	strdeq	sl, [r4], -r1
   157a8:	muleq	r3, ip, pc	; <UNPREDICTABLE>
   157ac:	andeq	sl, r4, r8, ror #14
   157b0:	andeq	r2, r3, r4, lsr #32
   157b4:	andeq	sl, r4, r0, ror r7
   157b8:	andeq	r2, r3, r8, rrx
   157bc:	andeq	r1, r3, r8, ror #31
   157c0:	ldr	r3, [pc, #136]	; 15850 <__assert_fail@plt+0x3868>
   157c4:	push	{r4, r5, r6, lr}
   157c8:	ldrb	r3, [r3]
   157cc:	cmp	r3, #0
   157d0:	beq	157fc <__assert_fail@plt+0x3814>
   157d4:	ldr	r4, [pc, #120]	; 15854 <__assert_fail@plt+0x386c>
   157d8:	ldr	r0, [r4]
   157dc:	cmp	r0, #0
   157e0:	popeq	{r4, r5, r6, pc}
   157e4:	bl	11ab4 <free@plt>
   157e8:	mov	r3, #0
   157ec:	ldr	r0, [r4, #4]
   157f0:	str	r3, [r4]
   157f4:	pop	{r4, r5, r6, lr}
   157f8:	b	11ab4 <free@plt>
   157fc:	ldr	r4, [pc, #84]	; 15858 <__assert_fail@plt+0x3870>
   15800:	ldr	r0, [r4]
   15804:	cmp	r0, #0
   15808:	blt	15810 <__assert_fail@plt+0x3828>
   1580c:	bl	11fb8 <close@plt>
   15810:	ldr	r5, [pc, #60]	; 15854 <__assert_fail@plt+0x386c>
   15814:	mvn	r3, #0
   15818:	str	r3, [r4]
   1581c:	ldr	r0, [r5, #8]
   15820:	cmp	r0, #0
   15824:	beq	15834 <__assert_fail@plt+0x384c>
   15828:	bl	11ab4 <free@plt>
   1582c:	mov	r3, #0
   15830:	str	r3, [r5, #8]
   15834:	mvn	r2, #0
   15838:	mvn	r3, #0
   1583c:	mov	r1, #0
   15840:	strd	r2, [r4, #16]
   15844:	strd	r2, [r4, #8]
   15848:	str	r1, [r5, #16]
   1584c:	pop	{r4, r5, r6, pc}
   15850:	strdeq	sl, [r4], -r0
   15854:	andeq	r8, r4, r0, lsl r3
   15858:	andeq	r8, r4, r8, lsl r2
   1585c:	ldr	r3, [pc, #1736]	; 15f2c <__assert_fail@plt+0x3f44>
   15860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15864:	mov	r6, r1
   15868:	ldr	r1, [r3]
   1586c:	sub	sp, sp, #20
   15870:	ands	sl, r1, #16
   15874:	mov	r7, r0
   15878:	beq	158b0 <__assert_fail@plt+0x38c8>
   1587c:	ldr	r3, [pc, #1708]	; 15f30 <__assert_fail@plt+0x3f48>
   15880:	and	r6, r6, #61440	; 0xf000
   15884:	mov	r4, #0
   15888:	cmp	r6, #32768	; 0x8000
   1588c:	strb	r4, [r3]
   15890:	beq	1592c <__assert_fail@plt+0x3944>
   15894:	cmp	r6, #40960	; 0xa000
   15898:	beq	15aa4 <__assert_fail@plt+0x3abc>
   1589c:	ldr	r3, [pc, #1680]	; 15f34 <__assert_fail@plt+0x3f4c>
   158a0:	mov	r2, #89	; 0x59
   158a4:	ldr	r1, [pc, #1676]	; 15f38 <__assert_fail@plt+0x3f50>
   158a8:	ldr	r0, [pc, #1676]	; 15f3c <__assert_fail@plt+0x3f54>
   158ac:	bl	11fe8 <__assert_fail@plt>
   158b0:	ldr	fp, [pc, #1672]	; 15f40 <__assert_fail@plt+0x3f58>
   158b4:	ldrd	r4, [fp, #48]	; 0x30
   158b8:	cmp	r5, sl
   158bc:	cmpeq	r4, r4
   158c0:	bne	1587c <__assert_fail@plt+0x3894>
   158c4:	cmp	r4, #0
   158c8:	mov	r9, r4
   158cc:	beq	15c30 <__assert_fail@plt+0x3c48>
   158d0:	mov	r0, r4
   158d4:	bl	11cac <malloc@plt>
   158d8:	subs	r8, r0, #0
   158dc:	beq	1587c <__assert_fail@plt+0x3894>
   158e0:	ldr	r3, [fp, #16]
   158e4:	and	r3, r3, #61440	; 0xf000
   158e8:	cmp	r3, #32768	; 0x8000
   158ec:	beq	15e2c <__assert_fail@plt+0x3e44>
   158f0:	cmp	r3, #40960	; 0xa000
   158f4:	bne	15c8c <__assert_fail@plt+0x3ca4>
   158f8:	mov	r2, r4
   158fc:	mov	r1, r8
   15900:	mov	r0, r7
   15904:	bl	1e764 <__assert_fail@plt+0xc77c>
   15908:	subs	r9, r0, #0
   1590c:	addge	sl, r8, r9
   15910:	bge	15c44 <__assert_fail@plt+0x3c5c>
   15914:	mov	r0, r7
   15918:	bl	2e970 <__assert_fail@plt+0x1c988>
   1591c:	ldr	r1, [pc, #1568]	; 15f44 <__assert_fail@plt+0x3f5c>
   15920:	mov	r2, r0
   15924:	ldr	r0, [pc, #1564]	; 15f48 <__assert_fail@plt+0x3f60>
   15928:	bl	1f774 <__assert_fail@plt+0xd78c>
   1592c:	ldr	r1, [pc, #1548]	; 15f40 <__assert_fail@plt+0x3f58>
   15930:	ldr	r3, [pc, #1556]	; 15f4c <__assert_fail@plt+0x3f64>
   15934:	ldr	r2, [pc, #1556]	; 15f50 <__assert_fail@plt+0x3f68>
   15938:	ldrd	r0, [r1, #48]	; 0x30
   1593c:	ldrb	r3, [r3]
   15940:	orrs	r1, r0, r1
   15944:	moveq	r7, r2
   15948:	cmp	r3, #0
   1594c:	moveq	r1, #32768	; 0x8000
   15950:	movne	r1, #0
   15954:	mov	r0, r7
   15958:	mov	r2, r4
   1595c:	bl	1e284 <__assert_fail@plt+0xc29c>
   15960:	cmp	r0, #0
   15964:	blt	15f04 <__assert_fail@plt+0x3f1c>
   15968:	ldr	r1, [pc, #1508]	; 15f54 <__assert_fail@plt+0x3f6c>
   1596c:	bl	11a00 <fdopen@plt>
   15970:	subs	r5, r0, #0
   15974:	beq	15f04 <__assert_fail@plt+0x3f1c>
   15978:	ldr	r6, [pc, #1496]	; 15f58 <__assert_fail@plt+0x3f70>
   1597c:	ldrb	r2, [r6]
   15980:	cmp	r2, #0
   15984:	beq	15c94 <__assert_fail@plt+0x3cac>
   15988:	ldr	r1, [pc, #1484]	; 15f5c <__assert_fail@plt+0x3f74>
   1598c:	mov	r3, #1
   15990:	mov	r2, r4
   15994:	ldr	r0, [r1]
   15998:	mov	r1, #2
   1599c:	bl	1fa50 <__assert_fail@plt+0xda68>
   159a0:	ldr	r3, [pc, #1464]	; 15f60 <__assert_fail@plt+0x3f78>
   159a4:	str	r3, [sp, #12]
   159a8:	str	r0, [r3]
   159ac:	ldr	r3, [pc, #1456]	; 15f64 <__assert_fail@plt+0x3f7c>
   159b0:	ldr	r0, [r3]
   159b4:	cmp	r0, #0
   159b8:	str	r0, [sp, #8]
   159bc:	moveq	r6, #1
   159c0:	movne	r6, #0
   159c4:	beq	15ec4 <__assert_fail@plt+0x3edc>
   159c8:	bl	11d78 <strlen@plt>
   159cc:	mov	r8, r0
   159d0:	mov	sl, #0
   159d4:	mov	fp, sl
   159d8:	mov	r4, #1
   159dc:	mov	r0, r5
   159e0:	bl	11fac <getc@plt>
   159e4:	cmn	r0, #1
   159e8:	mov	r9, r0
   159ec:	beq	15abc <__assert_fail@plt+0x3ad4>
   159f0:	adds	fp, fp, #1
   159f4:	bmi	15ef0 <__assert_fail@plt+0x3f08>
   159f8:	cmp	r9, #10
   159fc:	bne	15a0c <__assert_fail@plt+0x3a24>
   15a00:	cmp	r4, fp
   15a04:	movcc	r4, fp
   15a08:	mov	fp, #0
   15a0c:	cmp	r6, #0
   15a10:	bne	159dc <__assert_fail@plt+0x39f4>
   15a14:	cmp	sl, r8
   15a18:	beq	15a5c <__assert_fail@plt+0x3a74>
   15a1c:	cmn	sl, #1
   15a20:	beq	15a34 <__assert_fail@plt+0x3a4c>
   15a24:	ldr	r3, [sp, #8]
   15a28:	ldrb	r0, [r3, sl]
   15a2c:	cmp	r9, r0
   15a30:	beq	15a80 <__assert_fail@plt+0x3a98>
   15a34:	bl	11d48 <__ctype_b_loc@plt>
   15a38:	uxtb	r1, r9
   15a3c:	lsl	r1, r1, #1
   15a40:	ldr	r3, [r0]
   15a44:	ldrh	r3, [r3, r1]
   15a48:	and	r3, r3, #8192	; 0x2000
   15a4c:	clz	r3, r3
   15a50:	lsr	r3, r3, #5
   15a54:	rsb	sl, r3, #0
   15a58:	b	159dc <__assert_fail@plt+0x39f4>
   15a5c:	bl	11d48 <__ctype_b_loc@plt>
   15a60:	uxtb	r1, r9
   15a64:	lsl	r1, r1, #1
   15a68:	ldr	r3, [r0]
   15a6c:	ldrh	r3, [r3, r1]
   15a70:	ands	r3, r3, #8192	; 0x2000
   15a74:	movne	r6, #1
   15a78:	moveq	r6, #0
   15a7c:	b	15a4c <__assert_fail@plt+0x3a64>
   15a80:	add	sl, sl, #1
   15a84:	cmn	sl, #1
   15a88:	bne	159dc <__assert_fail@plt+0x39f4>
   15a8c:	bl	11d48 <__ctype_b_loc@plt>
   15a90:	lsl	r1, r9, #1
   15a94:	ldr	r3, [r0]
   15a98:	ldrh	r3, [r3, r1]
   15a9c:	and	r3, r3, #8192	; 0x2000
   15aa0:	b	15a4c <__assert_fail@plt+0x3a64>
   15aa4:	mov	r0, r7
   15aa8:	bl	2e970 <__assert_fail@plt+0x1c988>
   15aac:	ldr	r1, [pc, #1168]	; 15f44 <__assert_fail@plt+0x3f5c>
   15ab0:	mov	r2, r0
   15ab4:	ldr	r0, [pc, #1196]	; 15f68 <__assert_fail@plt+0x3f80>
   15ab8:	bl	1f558 <__assert_fail@plt+0xd570>
   15abc:	ldr	r3, [pc, #1184]	; 15f64 <__assert_fail@plt+0x3f7c>
   15ac0:	ldr	r3, [r3]
   15ac4:	cmp	r3, #0
   15ac8:	beq	15ad4 <__assert_fail@plt+0x3aec>
   15acc:	mov	r0, r6
   15ad0:	bl	156ec <__assert_fail@plt+0x3704>
   15ad4:	mov	r2, #0
   15ad8:	ldr	r6, [pc, #1164]	; 15f6c <__assert_fail@plt+0x3f84>
   15adc:	mov	r0, r5
   15ae0:	mov	r1, r2
   15ae4:	bl	20fd0 <__assert_fail@plt+0xefe8>
   15ae8:	mov	r0, #8192	; 0x2000
   15aec:	cmp	r4, #8192	; 0x2000
   15af0:	str	r0, [r6, #20]
   15af4:	bls	15ecc <__assert_fail@plt+0x3ee4>
   15af8:	lsl	r0, r0, #1
   15afc:	cmp	r4, r0
   15b00:	bhi	15af8 <__assert_fail@plt+0x3b10>
   15b04:	lsl	r8, r0, #1
   15b08:	str	r0, [r6, #20]
   15b0c:	mov	r1, r4
   15b10:	bl	3185c <renameat2@@Base+0x2b48>
   15b14:	mov	r3, #0
   15b18:	str	r3, [r6, #28]
   15b1c:	mov	r9, r3
   15b20:	str	r4, [r6, #16]
   15b24:	mov	r7, #1
   15b28:	str	r0, [r6, #24]
   15b2c:	mov	r0, r8
   15b30:	bl	2f2ec <renameat2@@Base+0x5d8>
   15b34:	ldr	r3, [r6, #20]
   15b38:	mov	fp, r0
   15b3c:	add	r3, r0, r3
   15b40:	str	r0, [r6, #8]
   15b44:	str	r3, [r6, #12]
   15b48:	ldrd	r2, [r6, #24]
   15b4c:	mov	r0, r7
   15b50:	mov	r1, r9
   15b54:	bl	31ca8 <renameat2@@Base+0x2f94>
   15b58:	orrs	r1, r2, r3
   15b5c:	mla	r8, r4, r2, fp
   15b60:	bne	15b84 <__assert_fail@plt+0x3b9c>
   15b64:	ldr	r3, [sp, #12]
   15b68:	mov	r1, fp
   15b6c:	ldr	r2, [r6, #20]
   15b70:	ldr	r0, [r3]
   15b74:	bl	11e20 <write@plt>
   15b78:	ldr	r3, [r6, #20]
   15b7c:	cmp	r0, r3
   15b80:	bne	15ec0 <__assert_fail@plt+0x3ed8>
   15b84:	mov	r0, r5
   15b88:	bl	11fac <getc@plt>
   15b8c:	cmn	r0, #1
   15b90:	beq	15be0 <__assert_fail@plt+0x3bf8>
   15b94:	mov	fp, r8
   15b98:	b	15bac <__assert_fail@plt+0x3bc4>
   15b9c:	mov	r0, r5
   15ba0:	bl	11fac <getc@plt>
   15ba4:	cmn	r0, #1
   15ba8:	beq	15bd0 <__assert_fail@plt+0x3be8>
   15bac:	cmp	r0, #10
   15bb0:	strb	r0, [fp], #1
   15bb4:	bne	15b9c <__assert_fail@plt+0x3bb4>
   15bb8:	sub	r8, fp, r8
   15bbc:	adds	r7, r7, #1
   15bc0:	str	r8, [r6, #32]
   15bc4:	adc	r9, r9, #0
   15bc8:	ldr	fp, [r6, #8]
   15bcc:	b	15b48 <__assert_fail@plt+0x3b60>
   15bd0:	adds	r7, r7, #1
   15bd4:	adc	r9, r9, #0
   15bd8:	sub	r8, fp, r8
   15bdc:	str	r8, [r6, #32]
   15be0:	mov	r0, r5
   15be4:	bl	11acc <ferror@plt>
   15be8:	cmp	r0, #0
   15bec:	bne	15e9c <__assert_fail@plt+0x3eb4>
   15bf0:	mov	r0, r5
   15bf4:	bl	11e5c <fclose@plt>
   15bf8:	cmp	r0, #0
   15bfc:	bne	15e9c <__assert_fail@plt+0x3eb4>
   15c00:	ldrd	r2, [r6, #24]
   15c04:	mov	r0, r7
   15c08:	mov	r1, r9
   15c0c:	bl	31ca8 <renameat2@@Base+0x2f94>
   15c10:	orrs	r3, r2, r3
   15c14:	bne	15ea0 <__assert_fail@plt+0x3eb8>
   15c18:	subs	r7, r7, #1
   15c1c:	ldr	r3, [pc, #844]	; 15f70 <__assert_fail@plt+0x3f88>
   15c20:	sbc	r9, r9, #0
   15c24:	stm	r3, {r7, r9}
   15c28:	add	sp, sp, #20
   15c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c30:	mov	r0, #1
   15c34:	bl	11cac <malloc@plt>
   15c38:	subs	sl, r0, #0
   15c3c:	movne	r8, sl
   15c40:	beq	1587c <__assert_fail@plt+0x3894>
   15c44:	mov	r0, r8
   15c48:	mov	r4, #3
   15c4c:	mov	r5, #0
   15c50:	b	15c60 <__assert_fail@plt+0x3c78>
   15c54:	adds	r4, r4, #1
   15c58:	adc	r5, r5, #0
   15c5c:	add	r0, r0, #1
   15c60:	sub	r2, sl, r0
   15c64:	mov	r1, #10
   15c68:	bl	11e44 <memchr@plt>
   15c6c:	cmp	r0, #0
   15c70:	bne	15c54 <__assert_fail@plt+0x3c6c>
   15c74:	cmp	r5, r0
   15c78:	cmpeq	r4, r4
   15c7c:	bne	15c88 <__assert_fail@plt+0x3ca0>
   15c80:	tst	r4, #-1073741824	; 0xc0000000
   15c84:	beq	15cdc <__assert_fail@plt+0x3cf4>
   15c88:	mov	r0, r8
   15c8c:	bl	11ab4 <free@plt>
   15c90:	b	1587c <__assert_fail@plt+0x3894>
   15c94:	ldr	r4, [pc, #704]	; 15f5c <__assert_fail@plt+0x3f74>
   15c98:	ldr	ip, [pc, #704]	; 15f60 <__assert_fail@plt+0x3f78>
   15c9c:	mov	r3, #384	; 0x180
   15ca0:	str	r3, [sp]
   15ca4:	mov	r0, r4
   15ca8:	mov	r3, #2
   15cac:	mov	r1, #105	; 0x69
   15cb0:	mov	r8, ip
   15cb4:	str	ip, [sp, #12]
   15cb8:	bl	20fec <__assert_fail@plt+0xf004>
   15cbc:	cmn	r0, #1
   15cc0:	movne	r3, #1
   15cc4:	str	r0, [r8]
   15cc8:	strbne	r3, [r6]
   15ccc:	bne	159ac <__assert_fail@plt+0x39c4>
   15cd0:	ldr	r1, [r4]
   15cd4:	ldr	r0, [pc, #664]	; 15f74 <__assert_fail@plt+0x3f8c>
   15cd8:	bl	1f774 <__assert_fail@plt+0xd78c>
   15cdc:	lsl	r0, r4, #2
   15ce0:	bl	11cac <malloc@plt>
   15ce4:	subs	fp, r0, #0
   15ce8:	str	fp, [sp, #8]
   15cec:	beq	15c88 <__assert_fail@plt+0x3ca0>
   15cf0:	mov	r4, #0
   15cf4:	mov	r0, r8
   15cf8:	mov	r5, r4
   15cfc:	b	15d0c <__assert_fail@plt+0x3d24>
   15d00:	add	r0, r0, #1
   15d04:	mov	r4, r6
   15d08:	mov	r5, r7
   15d0c:	adds	r6, r4, #1
   15d10:	str	r0, [fp, #4]!
   15d14:	sub	r2, sl, r0
   15d18:	mov	r1, #10
   15d1c:	adc	r7, r5, #0
   15d20:	bl	11e44 <memchr@plt>
   15d24:	cmp	r0, #0
   15d28:	bne	15d00 <__assert_fail@plt+0x3d18>
   15d2c:	cmp	r9, #0
   15d30:	beq	15d50 <__assert_fail@plt+0x3d68>
   15d34:	ldrb	r3, [sl, #-1]
   15d38:	cmp	r3, #10
   15d3c:	addne	r3, r4, #2
   15d40:	ldrne	r2, [sp, #8]
   15d44:	movne	r5, r7
   15d48:	movne	r4, r6
   15d4c:	strne	sl, [r2, r3, lsl #2]
   15d50:	ldr	r2, [pc, #524]	; 15f64 <__assert_fail@plt+0x3f7c>
   15d54:	ldr	r3, [pc, #532]	; 15f70 <__assert_fail@plt+0x3f88>
   15d58:	ldr	r6, [r2]
   15d5c:	str	r4, [r3]
   15d60:	cmp	r6, #0
   15d64:	str	r5, [r3, #4]
   15d68:	beq	15e0c <__assert_fail@plt+0x3e24>
   15d6c:	mov	r0, r6
   15d70:	bl	11d78 <strlen@plt>
   15d74:	cmp	r9, r0
   15d78:	mov	r7, r0
   15d7c:	bcc	15ed4 <__assert_fail@plt+0x3eec>
   15d80:	ldrb	r9, [r6]
   15d84:	sub	sl, sl, r0
   15d88:	mov	r5, r8
   15d8c:	sub	r2, sl, r5
   15d90:	mov	r0, r5
   15d94:	mov	r1, r9
   15d98:	bl	11e44 <memchr@plt>
   15d9c:	subs	r4, r0, #0
   15da0:	beq	15ed4 <__assert_fail@plt+0x3eec>
   15da4:	mov	r2, r7
   15da8:	mov	r1, r6
   15dac:	bl	11b44 <memcmp@plt>
   15db0:	add	r5, r4, #1
   15db4:	cmp	r0, #0
   15db8:	bne	15d8c <__assert_fail@plt+0x3da4>
   15dbc:	cmp	r4, r8
   15dc0:	beq	15de0 <__assert_fail@plt+0x3df8>
   15dc4:	bl	11d48 <__ctype_b_loc@plt>
   15dc8:	ldrb	r3, [r4, #-1]
   15dcc:	lsl	r3, r3, #1
   15dd0:	ldr	r2, [r0]
   15dd4:	ldrh	r3, [r2, r3]
   15dd8:	tst	r3, #8192	; 0x2000
   15ddc:	beq	15d8c <__assert_fail@plt+0x3da4>
   15de0:	cmp	sl, r5
   15de4:	beq	15e04 <__assert_fail@plt+0x3e1c>
   15de8:	bl	11d48 <__ctype_b_loc@plt>
   15dec:	ldrb	r3, [r4, r7]
   15df0:	lsl	r3, r3, #1
   15df4:	ldr	r2, [r0]
   15df8:	ldrh	r3, [r2, r3]
   15dfc:	tst	r3, #8192	; 0x2000
   15e00:	beq	15d8c <__assert_fail@plt+0x3da4>
   15e04:	mov	r0, #1
   15e08:	bl	156ec <__assert_fail@plt+0x3704>
   15e0c:	ldr	r3, [pc, #344]	; 15f6c <__assert_fail@plt+0x3f84>
   15e10:	ldr	r2, [pc, #280]	; 15f30 <__assert_fail@plt+0x3f48>
   15e14:	ldr	r0, [sp, #8]
   15e18:	mov	r1, #1
   15e1c:	str	r8, [r3]
   15e20:	str	r0, [r3, #4]
   15e24:	strb	r1, [r2]
   15e28:	b	15c28 <__assert_fail@plt+0x3c40>
   15e2c:	ldr	r3, [pc, #280]	; 15f4c <__assert_fail@plt+0x3f64>
   15e30:	mov	r2, r5
   15e34:	mov	r0, r7
   15e38:	ldrb	r3, [r3]
   15e3c:	cmp	r3, #0
   15e40:	movne	r1, sl
   15e44:	moveq	r1, #32768	; 0x8000
   15e48:	bl	1e284 <__assert_fail@plt+0xc29c>
   15e4c:	subs	sl, r0, #0
   15e50:	movge	r4, r5
   15e54:	blt	15f18 <__assert_fail@plt+0x3f30>
   15e58:	sub	r2, r9, r4
   15e5c:	add	r1, r8, r4
   15e60:	mov	r0, sl
   15e64:	bl	11a6c <read@plt>
   15e68:	cmp	r0, #0
   15e6c:	beq	15e84 <__assert_fail@plt+0x3e9c>
   15e70:	cmn	r0, #1
   15e74:	beq	15edc <__assert_fail@plt+0x3ef4>
   15e78:	add	r4, r4, r0
   15e7c:	cmp	r9, r4
   15e80:	bne	15e58 <__assert_fail@plt+0x3e70>
   15e84:	mov	r0, sl
   15e88:	bl	11fb8 <close@plt>
   15e8c:	cmp	r0, #0
   15e90:	addeq	sl, r8, r4
   15e94:	moveq	r9, r4
   15e98:	beq	15c44 <__assert_fail@plt+0x3c5c>
   15e9c:	bl	1facc <__assert_fail@plt+0xdae4>
   15ea0:	ldr	r3, [sp, #12]
   15ea4:	ldr	r2, [r6, #20]
   15ea8:	ldr	r1, [r6, #8]
   15eac:	ldr	r0, [r3]
   15eb0:	bl	11e20 <write@plt>
   15eb4:	ldr	r3, [r6, #20]
   15eb8:	cmp	r0, r3
   15ebc:	beq	15c18 <__assert_fail@plt+0x3c30>
   15ec0:	bl	1fadc <__assert_fail@plt+0xdaf4>
   15ec4:	ldr	r8, [sp, #8]
   15ec8:	b	159d0 <__assert_fail@plt+0x39e8>
   15ecc:	mov	r8, #16384	; 0x4000
   15ed0:	b	15b0c <__assert_fail@plt+0x3b24>
   15ed4:	mov	r0, #0
   15ed8:	b	15e08 <__assert_fail@plt+0x3e20>
   15edc:	mov	r0, sl
   15ee0:	bl	11fb8 <close@plt>
   15ee4:	mov	r0, r8
   15ee8:	bl	11ab4 <free@plt>
   15eec:	b	1587c <__assert_fail@plt+0x3894>
   15ef0:	mov	r0, r7
   15ef4:	bl	2e970 <__assert_fail@plt+0x1c988>
   15ef8:	mov	r1, r0
   15efc:	ldr	r0, [pc, #116]	; 15f78 <__assert_fail@plt+0x3f90>
   15f00:	bl	1f558 <__assert_fail@plt+0xd570>
   15f04:	mov	r0, r7
   15f08:	bl	2e970 <__assert_fail@plt+0x1c988>
   15f0c:	mov	r1, r0
   15f10:	ldr	r0, [pc, #100]	; 15f7c <__assert_fail@plt+0x3f94>
   15f14:	bl	1f774 <__assert_fail@plt+0xd78c>
   15f18:	mov	r0, r7
   15f1c:	bl	2e970 <__assert_fail@plt+0x1c988>
   15f20:	mov	r1, r0
   15f24:	ldr	r0, [pc, #84]	; 15f80 <__assert_fail@plt+0x3f98>
   15f28:	bl	1f774 <__assert_fail@plt+0xd78c>
   15f2c:	ldrdeq	sl, [r4], -r8
   15f30:	strdeq	sl, [r4], -r0
   15f34:	andeq	r1, r3, r0, ror #30
   15f38:	strheq	r2, [r3], -r4
   15f3c:	strheq	r2, [r3], -ip
   15f40:	andeq	sl, r4, r0, lsl #14
   15f44:	muleq	r3, r0, r0
   15f48:	andeq	r2, r3, r0, lsr #1
   15f4c:	andeq	sl, r4, ip, ror r7
   15f50:	andeq	r2, r3, r0, ror r0
   15f54:	strdeq	r3, [r3], -r0
   15f58:			; <UNDEFINED> instruction: 0x0004a6b9
   15f5c:	andeq	sl, r4, r0, asr #13
   15f60:	andeq	r8, r4, r8, lsl r2
   15f64:	ldrdeq	sl, [r4], -r0
   15f68:	ldrdeq	r2, [r3], -r0
   15f6c:	andeq	r8, r4, r0, lsl r3
   15f70:			; <UNDEFINED> instruction: 0x0004a6b0
   15f74:	strdeq	r2, [r3], -r8
   15f78:	andeq	r2, r3, r8, lsl r1
   15f7c:	andeq	r2, r3, r4, ror #1
   15f80:	andeq	r2, r3, ip, ror r0
   15f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f88:	sub	sp, sp, #36	; 0x24
   15f8c:	ldr	r4, [pc, #668]	; 16230 <__assert_fail@plt+0x4248>
   15f90:	mov	r5, r2
   15f94:	mov	r8, r0
   15f98:	ldr	r3, [r4]
   15f9c:	ldr	r6, [pc, #656]	; 16234 <__assert_fail@plt+0x424c>
   15fa0:	str	r3, [sp, #28]
   15fa4:	bl	11a48 <strcmp@plt>
   15fa8:	mov	r9, r0
   15fac:	ldr	r0, [r6]
   15fb0:	cmn	r0, #1
   15fb4:	beq	16154 <__assert_fail@plt+0x416c>
   15fb8:	and	r3, r5, #61440	; 0xf000
   15fbc:	cmp	r3, #32768	; 0x8000
   15fc0:	beq	16024 <__assert_fail@plt+0x403c>
   15fc4:	cmp	r0, #0
   15fc8:	beq	16000 <__assert_fail@plt+0x4018>
   15fcc:	ldr	r7, [pc, #612]	; 16238 <__assert_fail@plt+0x4250>
   15fd0:	ldr	r1, [pc, #612]	; 1623c <__assert_fail@plt+0x4254>
   15fd4:	mov	r2, #0
   15fd8:	mov	r3, #0
   15fdc:	mov	r0, #1
   15fe0:	str	r1, [r7, #16]
   15fe4:	strd	r2, [r7, #48]	; 0x30
   15fe8:	ldr	r2, [sp, #28]
   15fec:	ldr	r3, [r4]
   15ff0:	cmp	r2, r3
   15ff4:	bne	16214 <__assert_fail@plt+0x422c>
   15ff8:	add	sp, sp, #36	; 0x24
   15ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16000:	cmp	r3, #40960	; 0xa000
   16004:	bne	16134 <__assert_fail@plt+0x414c>
   16008:	ldr	r3, [pc, #552]	; 16238 <__assert_fail@plt+0x4250>
   1600c:	ldr	r3, [r3, #16]
   16010:	eor	r5, r5, r3
   16014:	tst	r5, #61440	; 0xf000
   16018:	bne	16168 <__assert_fail@plt+0x4180>
   1601c:	mov	r0, #1
   16020:	b	15fe8 <__assert_fail@plt+0x4000>
   16024:	ldr	r3, [pc, #532]	; 16240 <__assert_fail@plt+0x4258>
   16028:	ldr	r3, [r3]
   1602c:	cmp	r3, #0
   16030:	beq	16118 <__assert_fail@plt+0x4130>
   16034:	ldr	sl, [pc, #520]	; 16244 <__assert_fail@plt+0x425c>
   16038:	ldr	r3, [sl]
   1603c:	cmp	r3, #0
   16040:	beq	16118 <__assert_fail@plt+0x4130>
   16044:	cmp	r0, #0
   16048:	ldr	r7, [pc, #488]	; 16238 <__assert_fail@plt+0x4250>
   1604c:	bne	1617c <__assert_fail@plt+0x4194>
   16050:	cmp	r9, #0
   16054:	ldr	r3, [r7, #16]
   16058:	bne	16128 <__assert_fail@plt+0x4140>
   1605c:	tst	r3, #146	; 0x92
   16060:	beq	16088 <__assert_fail@plt+0x40a0>
   16064:	tst	r3, #18
   16068:	bne	16128 <__assert_fail@plt+0x4140>
   1606c:	ldr	fp, [r7, #24]
   16070:	bl	11bb0 <geteuid@plt>
   16074:	cmp	fp, r0
   16078:	beq	16110 <__assert_fail@plt+0x4128>
   1607c:	ldr	r3, [r6]
   16080:	cmp	r3, #0
   16084:	bne	1617c <__assert_fail@plt+0x4194>
   16088:	ldr	r2, [pc, #424]	; 16238 <__assert_fail@plt+0x4250>
   1608c:	adds	fp, r9, #0
   16090:	movne	fp, #1
   16094:	add	r3, sp, #20
   16098:	str	r3, [sp]
   1609c:	mov	r1, fp
   160a0:	add	r3, sp, #24
   160a4:	mov	r0, r8
   160a8:	bl	1ee7c <__assert_fail@plt+0xce94>
   160ac:	subs	r3, r0, #0
   160b0:	str	r3, [sp, #12]
   160b4:	movne	r3, #1
   160b8:	moveq	r3, #0
   160bc:	str	r3, [sl]
   160c0:	beq	16110 <__assert_fail@plt+0x4128>
   160c4:	ldr	r2, [r6]
   160c8:	cmp	r2, #0
   160cc:	beq	16184 <__assert_fail@plt+0x419c>
   160d0:	ldr	r0, [sp, #24]
   160d4:	mov	r3, fp
   160d8:	str	r0, [sp]
   160dc:	clz	r2, r2
   160e0:	str	r7, [sp, #4]
   160e4:	lsr	r2, r2, #5
   160e8:	ldr	r1, [sp, #12]
   160ec:	mov	r0, r8
   160f0:	bl	20904 <__assert_fail@plt+0xe91c>
   160f4:	cmp	r0, #0
   160f8:	movne	r3, #0
   160fc:	strne	r3, [r6]
   16100:	ldr	r0, [sp, #24]
   16104:	bl	11ab4 <free@plt>
   16108:	ldr	r0, [sp, #20]
   1610c:	bl	11ab4 <free@plt>
   16110:	ldr	r0, [r6]
   16114:	b	1611c <__assert_fail@plt+0x4134>
   16118:	ldr	r7, [pc, #280]	; 16238 <__assert_fail@plt+0x4250>
   1611c:	cmp	r0, #0
   16120:	bne	15fd0 <__assert_fail@plt+0x3fe8>
   16124:	ldr	r3, [r7, #16]
   16128:	eor	r5, r5, r3
   1612c:	tst	r5, #61440	; 0xf000
   16130:	beq	1601c <__assert_fail@plt+0x4034>
   16134:	mov	r0, r8
   16138:	bl	2e970 <__assert_fail@plt+0x1c988>
   1613c:	ldr	r2, [pc, #260]	; 16248 <__assert_fail@plt+0x4260>
   16140:	mov	r1, r0
   16144:	ldr	r0, [pc, #256]	; 1624c <__assert_fail@plt+0x4264>
   16148:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1614c:	mov	r0, #0
   16150:	b	15fe8 <__assert_fail@plt+0x4000>
   16154:	ldr	r1, [pc, #220]	; 16238 <__assert_fail@plt+0x4250>
   16158:	mov	r0, r8
   1615c:	bl	21150 <__assert_fail@plt+0xf168>
   16160:	str	r0, [r6]
   16164:	b	15fb8 <__assert_fail@plt+0x3fd0>
   16168:	mov	r0, r8
   1616c:	bl	2e970 <__assert_fail@plt+0x1c988>
   16170:	ldr	r2, [pc, #216]	; 16250 <__assert_fail@plt+0x4268>
   16174:	mov	r1, r0
   16178:	b	16144 <__assert_fail@plt+0x415c>
   1617c:	mov	r2, #0
   16180:	b	1608c <__assert_fail@plt+0x40a4>
   16184:	cmp	r9, #0
   16188:	bne	16198 <__assert_fail@plt+0x41b0>
   1618c:	ldr	r3, [r7, #16]
   16190:	tst	r3, #146	; 0x92
   16194:	bne	16218 <__assert_fail@plt+0x4230>
   16198:	ldr	r0, [sp, #20]
   1619c:	cmp	r0, #0
   161a0:	beq	161c0 <__assert_fail@plt+0x41d8>
   161a4:	ldr	r3, [pc, #168]	; 16254 <__assert_fail@plt+0x426c>
   161a8:	ldr	r3, [r3]
   161ac:	cmp	r3, #2
   161b0:	beq	161f4 <__assert_fail@plt+0x420c>
   161b4:	bl	208b8 <__assert_fail@plt+0xe8d0>
   161b8:	cmp	r0, #0
   161bc:	bne	161d8 <__assert_fail@plt+0x41f0>
   161c0:	ldr	r3, [pc, #144]	; 16258 <__assert_fail@plt+0x4270>
   161c4:	ldrb	r3, [r3]
   161c8:	cmp	r3, #0
   161cc:	bne	16100 <__assert_fail@plt+0x4118>
   161d0:	ldr	r2, [r6]
   161d4:	b	160d0 <__assert_fail@plt+0x40e8>
   161d8:	mov	r0, r8
   161dc:	bl	2e970 <__assert_fail@plt+0x1c988>
   161e0:	ldr	r2, [sp, #12]
   161e4:	mov	r1, r0
   161e8:	ldr	r0, [pc, #108]	; 1625c <__assert_fail@plt+0x4274>
   161ec:	bl	1fc1c <__assert_fail@plt+0xdc34>
   161f0:	b	16100 <__assert_fail@plt+0x4118>
   161f4:	mov	r0, r8
   161f8:	bl	2e970 <__assert_fail@plt+0x1c988>
   161fc:	ldr	r2, [sp, #12]
   16200:	mov	r1, r0
   16204:	ldr	r0, [pc, #84]	; 16260 <__assert_fail@plt+0x4278>
   16208:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1620c:	ldr	r0, [sp, #20]
   16210:	b	161b4 <__assert_fail@plt+0x41cc>
   16214:	bl	11b50 <__stack_chk_fail@plt>
   16218:	mov	r0, r8
   1621c:	bl	2e970 <__assert_fail@plt+0x1c988>
   16220:	ldr	r2, [sp, #12]
   16224:	mov	r1, r0
   16228:	ldr	r0, [pc, #52]	; 16264 <__assert_fail@plt+0x427c>
   1622c:	bl	1f558 <__assert_fail@plt+0xd570>
   16230:	andeq	r7, r4, r8, lsl #30
   16234:	ldrdeq	sl, [r4], -r4
   16238:	andeq	sl, r4, r0, lsl #14
   1623c:			; <UNDEFINED> instruction: 0x000001b6
   16240:	strdeq	sl, [r4], -r4
   16244:	muleq	r4, r8, r7
   16248:	andeq	r2, r3, r8, lsr r1
   1624c:	strdeq	r2, [r3], -r0
   16250:	muleq	r3, r0, r0
   16254:			; <UNDEFINED> instruction: 0x0004a6bc
   16258:	andeq	sl, r4, r5, ror #13
   1625c:	andeq	r2, r3, ip, lsr #3
   16260:	andeq	r2, r3, r0, lsl #3
   16264:	andeq	r2, r3, r8, asr #2
   16268:	cmp	r0, #1
   1626c:	sbcs	ip, r1, #0
   16270:	blt	16404 <__assert_fail@plt+0x441c>
   16274:	ldr	ip, [pc, #436]	; 16430 <__assert_fail@plt+0x4448>
   16278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1627c:	mov	r4, r0
   16280:	ldrd	sl, [ip]
   16284:	sub	sp, sp, #44	; 0x2c
   16288:	mov	r5, r1
   1628c:	cmp	sl, r0
   16290:	sbcs	ip, fp, r1
   16294:	blt	163c4 <__assert_fail@plt+0x43dc>
   16298:	ldr	ip, [pc, #404]	; 16434 <__assert_fail@plt+0x444c>
   1629c:	ldrb	ip, [ip]
   162a0:	cmp	ip, #0
   162a4:	str	ip, [sp, #32]
   162a8:	bne	163e0 <__assert_fail@plt+0x43f8>
   162ac:	ldr	r7, [pc, #388]	; 16438 <__assert_fail@plt+0x4450>
   162b0:	str	r2, [sp, #36]	; 0x24
   162b4:	mov	r6, r3
   162b8:	ldrd	r8, [r7, #24]
   162bc:	strd	r4, [sp, #16]
   162c0:	mov	r2, r8
   162c4:	mov	r3, r9
   162c8:	strd	r8, [sp, #24]
   162cc:	bl	31ca8 <renameat2@@Base+0x2f94>
   162d0:	ldrd	r8, [sp, #16]
   162d4:	ldr	r1, [pc, #352]	; 1643c <__assert_fail@plt+0x4454>
   162d8:	mov	r4, r2
   162dc:	subs	r0, r8, r4
   162e0:	sbc	r3, r9, r3
   162e4:	str	r3, [sp, #12]
   162e8:	str	r0, [sp, #8]
   162ec:	ldrd	r2, [r1, #8]
   162f0:	ldrd	r8, [sp, #8]
   162f4:	cmp	r3, r9
   162f8:	cmpeq	r2, r8
   162fc:	beq	16424 <__assert_fail@plt+0x443c>
   16300:	ldrd	r2, [r1, #16]
   16304:	cmp	r3, r9
   16308:	cmpeq	r2, r8
   1630c:	beq	163d8 <__assert_fail@plt+0x43f0>
   16310:	ldr	r5, [sp, #36]	; 0x24
   16314:	ldrd	r2, [sp, #24]
   16318:	ldr	sl, [r1]
   1631c:	add	r0, r1, r5, lsl #3
   16320:	mov	r1, r9
   16324:	strd	r8, [r0, #8]
   16328:	mov	r0, r8
   1632c:	bl	31ca8 <renameat2@@Base+0x2f94>
   16330:	ldr	fp, [r7, #20]
   16334:	ldr	r3, [sp, #32]
   16338:	str	r3, [sp]
   1633c:	umull	r2, r3, r0, fp
   16340:	mov	r0, sl
   16344:	mla	r3, fp, r1, r3
   16348:	bl	11c28 <lseek64@plt>
   1634c:	mvn	r3, #0
   16350:	mvn	r2, #0
   16354:	cmp	r1, r3
   16358:	cmpeq	r0, r2
   1635c:	beq	1642c <__assert_fail@plt+0x4444>
   16360:	add	r3, r7, r5, lsl #2
   16364:	mov	r2, fp
   16368:	mov	r0, sl
   1636c:	ldr	r1, [r3, #8]
   16370:	bl	11a6c <read@plt>
   16374:	cmp	r0, #0
   16378:	blt	1642c <__assert_fail@plt+0x4444>
   1637c:	ldr	r3, [pc, #172]	; 16430 <__assert_fail@plt+0x4448>
   16380:	ldrd	sl, [r3]
   16384:	add	r5, r7, r5, lsl #2
   16388:	ldr	r3, [r7, #16]
   1638c:	ldrd	r8, [sp, #16]
   16390:	ldr	r0, [r5, #8]
   16394:	mla	r0, r3, r4, r0
   16398:	cmp	r9, fp
   1639c:	cmpeq	r8, sl
   163a0:	movne	r3, r0
   163a4:	beq	16414 <__assert_fail@plt+0x442c>
   163a8:	ldrb	r2, [r3], #1
   163ac:	cmp	r2, #10
   163b0:	bne	163a8 <__assert_fail@plt+0x43c0>
   163b4:	sub	r3, r3, r0
   163b8:	str	r3, [r6]
   163bc:	add	sp, sp, #44	; 0x2c
   163c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163c4:	mov	r2, #0
   163c8:	ldr	r0, [pc, #112]	; 16440 <__assert_fail@plt+0x4458>
   163cc:	str	r2, [r3]
   163d0:	add	sp, sp, #44	; 0x2c
   163d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163d8:	mov	r5, #1
   163dc:	b	16384 <__assert_fail@plt+0x439c>
   163e0:	ldr	r2, [pc, #80]	; 16438 <__assert_fail@plt+0x4450>
   163e4:	lsl	r4, r0, #2
   163e8:	ldr	r2, [r2, #4]
   163ec:	ldr	r0, [r2, r4]!
   163f0:	ldr	r2, [r2, #4]
   163f4:	sub	r2, r2, r0
   163f8:	str	r2, [r3]
   163fc:	add	sp, sp, #44	; 0x2c
   16400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16404:	mov	r2, #0
   16408:	str	r2, [r3]
   1640c:	ldr	r0, [pc, #44]	; 16440 <__assert_fail@plt+0x4458>
   16410:	bx	lr
   16414:	ldr	r3, [r7, #32]
   16418:	str	r3, [r6]
   1641c:	add	sp, sp, #44	; 0x2c
   16420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16424:	ldr	r5, [sp, #32]
   16428:	b	16384 <__assert_fail@plt+0x439c>
   1642c:	bl	1facc <__assert_fail@plt+0xdae4>
   16430:			; <UNDEFINED> instruction: 0x0004a6b0
   16434:	strdeq	sl, [r4], -r0
   16438:	andeq	r8, r4, r0, lsl r3
   1643c:	andeq	r8, r4, r8, lsl r2
   16440:	strdeq	r5, [r3], -r8
   16444:	push	{r4, r5, r6, lr}
   16448:	mov	r6, r0
   1644c:	ldrb	r3, [r0]
   16450:	mov	r0, #0
   16454:	mov	r5, r2
   16458:	cmp	r3, #45	; 0x2d
   1645c:	sub	r3, r3, #43	; 0x2b
   16460:	mvneq	r4, #0
   16464:	movne	r4, #1
   16468:	tst	r3, #253	; 0xfd
   1646c:	moveq	r3, #1
   16470:	movne	r3, r0
   16474:	add	lr, r6, r3
   16478:	ldrb	r2, [r6, r3]
   1647c:	sub	r2, r2, #48	; 0x30
   16480:	add	r3, r0, r0, lsl #2
   16484:	mul	ip, r2, r4
   16488:	lsl	r3, r3, #1
   1648c:	cmp	r2, #9
   16490:	add	r0, r3, ip
   16494:	bhi	164dc <__assert_fail@plt+0x44f4>
   16498:	cmp	r3, r0
   1649c:	movle	r2, #0
   164a0:	movgt	r2, #1
   164a4:	cmp	r2, ip, lsr #31
   164a8:	bne	164f4 <__assert_fail@plt+0x450c>
   164ac:	ldrb	r2, [lr, #1]!
   164b0:	cmp	r2, #0
   164b4:	bne	1647c <__assert_fail@plt+0x4494>
   164b8:	eor	r1, r1, #1
   164bc:	ands	r3, r1, r0, lsr #31
   164c0:	popeq	{r4, r5, r6, pc}
   164c4:	mov	r0, r6
   164c8:	bl	2e970 <__assert_fail@plt+0x1c988>
   164cc:	mov	r1, r5
   164d0:	mov	r2, r0
   164d4:	ldr	r0, [pc, #48]	; 1650c <__assert_fail@plt+0x4524>
   164d8:	bl	1f558 <__assert_fail@plt+0xd570>
   164dc:	mov	r0, r6
   164e0:	bl	2e970 <__assert_fail@plt+0x1c988>
   164e4:	mov	r1, r5
   164e8:	mov	r2, r0
   164ec:	ldr	r0, [pc, #28]	; 16510 <__assert_fail@plt+0x4528>
   164f0:	bl	1f558 <__assert_fail@plt+0xd570>
   164f4:	mov	r0, r6
   164f8:	bl	2e970 <__assert_fail@plt+0x1c988>
   164fc:	mov	r1, r5
   16500:	mov	r2, r0
   16504:	ldr	r0, [pc, #8]	; 16514 <__assert_fail@plt+0x452c>
   16508:	bl	1f558 <__assert_fail@plt+0xd570>
   1650c:	andeq	r2, r3, r8, ror #12
   16510:	andeq	r2, r3, ip, lsr r6
   16514:	andeq	r2, r3, r4, asr r6
   16518:	push	{r4, lr}
   1651c:	mov	r4, r0
   16520:	ldr	r0, [r0]
   16524:	bl	11ab4 <free@plt>
   16528:	ldr	r0, [r4, #112]	; 0x70
   1652c:	pop	{r4, lr}
   16530:	b	11ab4 <free@plt>
   16534:	ldr	r3, [pc, #112]	; 165ac <__assert_fail@plt+0x45c4>
   16538:	push	{r7, lr}
   1653c:	subs	r7, r1, #0
   16540:	ldr	r3, [r3]
   16544:	sub	sp, sp, #8
   16548:	ldr	r3, [r3]
   1654c:	beq	16570 <__assert_fail@plt+0x4588>
   16550:	ldr	r1, [pc, #88]	; 165b0 <__assert_fail@plt+0x45c8>
   16554:	str	r3, [sp]
   16558:	ldr	r2, [pc, #84]	; 165b4 <__assert_fail@plt+0x45cc>
   1655c:	ldr	r3, [r1]
   16560:	mov	r1, #1
   16564:	bl	11e38 <__fprintf_chk@plt>
   16568:	mov	r0, r7
   1656c:	bl	11d60 <exit@plt>
   16570:	ldr	r2, [pc, #64]	; 165b8 <__assert_fail@plt+0x45d0>
   16574:	mov	r1, #1
   16578:	mov	r5, r0
   1657c:	ldr	r4, [pc, #56]	; 165bc <__assert_fail@plt+0x45d4>
   16580:	bl	11e38 <__fprintf_chk@plt>
   16584:	ldr	r6, [pc, #52]	; 165c0 <__assert_fail@plt+0x45d8>
   16588:	ldr	r3, [pc, #52]	; 165c4 <__assert_fail@plt+0x45dc>
   1658c:	mov	r2, r6
   16590:	mov	r1, #1
   16594:	mov	r0, r5
   16598:	bl	11e38 <__fprintf_chk@plt>
   1659c:	ldr	r3, [r4, #4]!
   165a0:	cmp	r3, #0
   165a4:	bne	1658c <__assert_fail@plt+0x45a4>
   165a8:	b	16568 <__assert_fail@plt+0x4580>
   165ac:	andeq	r8, r4, r4, lsr r3
   165b0:	andeq	sl, r4, r8, ror #10
   165b4:	andeq	r2, r3, ip, lsl #13
   165b8:			; <UNDEFINED> instruction: 0x000326b8
   165bc:	andeq	r2, r3, ip, lsl r2
   165c0:	andeq	r4, r3, ip, lsl #23
   165c4:	andeq	r2, r3, ip, ror r6
   165c8:	ldr	ip, [pc, #144]	; 16660 <__assert_fail@plt+0x4678>
   165cc:	push	{r7, lr}
   165d0:	mov	r4, r2
   165d4:	ldr	lr, [pc, #136]	; 16664 <__assert_fail@plt+0x467c>
   165d8:	ldr	ip, [ip]
   165dc:	sub	sp, sp, #56	; 0x38
   165e0:	ldr	r2, [lr]
   165e4:	tst	ip, #1
   165e8:	mov	r6, r3
   165ec:	str	r2, [sp, #52]	; 0x34
   165f0:	mov	r5, r0
   165f4:	mov	r7, r1
   165f8:	bne	16638 <__assert_fail@plt+0x4650>
   165fc:	bl	1ce60 <__assert_fail@plt+0xae78>
   16600:	adds	r2, r0, r5
   16604:	adc	r3, r1, r7
   16608:	add	r0, sp, #4
   1660c:	bl	1f490 <__assert_fail@plt+0xd4a8>
   16610:	mov	r5, r0
   16614:	bl	1ce60 <__assert_fail@plt+0xae78>
   16618:	adds	r2, r0, r4
   1661c:	adc	r3, r1, r6
   16620:	add	r0, sp, #28
   16624:	bl	1f490 <__assert_fail@plt+0xd4a8>
   16628:	mov	r1, r5
   1662c:	mov	r2, r0
   16630:	ldr	r0, [pc, #48]	; 16668 <__assert_fail@plt+0x4680>
   16634:	bl	1f558 <__assert_fail@plt+0xd570>
   16638:	bl	18974 <__assert_fail@plt+0x698c>
   1663c:	mov	r1, r6
   16640:	mov	r8, r0
   16644:	mov	r0, r4
   16648:	bl	18974 <__assert_fail@plt+0x698c>
   1664c:	mov	r1, r8
   16650:	mov	r2, r0
   16654:	ldr	r0, [pc, #16]	; 1666c <__assert_fail@plt+0x4684>
   16658:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1665c:	b	165fc <__assert_fail@plt+0x4614>
   16660:	ldrdeq	sl, [r4], -r8
   16664:	andeq	r7, r4, r8, lsl #30
   16668:	andeq	r2, r3, r8, lsl #14
   1666c:	andeq	r2, r3, r8, ror #13
   16670:	push	{r4, r5, r6, r7, lr}
   16674:	mov	r6, r0
   16678:	sub	sp, sp, #12
   1667c:	mov	r0, r2
   16680:	mov	r5, r2
   16684:	mov	r7, r1
   16688:	bl	188a4 <__assert_fail@plt+0x68bc>
   1668c:	mov	r4, r0
   16690:	mov	r0, r5
   16694:	bl	1ce90 <__assert_fail@plt+0xaea8>
   16698:	ldr	r2, [pc, #52]	; 166d4 <__assert_fail@plt+0x46ec>
   1669c:	ldr	ip, [pc, #52]	; 166d8 <__assert_fail@plt+0x46f0>
   166a0:	cmp	r4, #0
   166a4:	moveq	r4, r2
   166a8:	mov	r3, r7
   166ac:	str	r4, [sp]
   166b0:	ldr	r2, [pc, #36]	; 166dc <__assert_fail@plt+0x46f4>
   166b4:	mov	r1, #1
   166b8:	cmp	r0, #0
   166bc:	moveq	r0, ip
   166c0:	str	r0, [sp, #4]
   166c4:	mov	r0, r6
   166c8:	bl	11e38 <__fprintf_chk@plt>
   166cc:	add	sp, sp, #12
   166d0:	pop	{r4, r5, r6, r7, pc}
   166d4:	andeq	r2, r3, r0, ror r0
   166d8:	strdeq	r5, [r3], -r8
   166dc:	andeq	r2, r3, r0, asr r7
   166e0:	push	{r4, r5, r6, r7, r8, lr}
   166e4:	sub	sp, sp, #64	; 0x40
   166e8:	ldr	r6, [pc, #172]	; 1679c <__assert_fail@plt+0x47b4>
   166ec:	ldrd	r4, [sp, #88]	; 0x58
   166f0:	mov	r7, r0
   166f4:	ldr	r1, [r6]
   166f8:	orrs	r0, r4, r5
   166fc:	str	r1, [sp, #60]	; 0x3c
   16700:	beq	1675c <__assert_fail@plt+0x4774>
   16704:	cmp	r5, #0
   16708:	cmpeq	r4, #1
   1670c:	beq	16784 <__assert_fail@plt+0x479c>
   16710:	add	r0, sp, #12
   16714:	bl	1f490 <__assert_fail@plt+0xd4a8>
   16718:	mov	r2, r4
   1671c:	mov	r3, r5
   16720:	mov	r8, r0
   16724:	add	r0, sp, #36	; 0x24
   16728:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1672c:	mov	r3, r8
   16730:	ldr	r2, [pc, #104]	; 167a0 <__assert_fail@plt+0x47b8>
   16734:	mov	r1, #1
   16738:	str	r0, [sp]
   1673c:	mov	r0, r7
   16740:	bl	11e38 <__fprintf_chk@plt>
   16744:	ldr	r2, [sp, #60]	; 0x3c
   16748:	ldr	r3, [r6]
   1674c:	cmp	r2, r3
   16750:	bne	16798 <__assert_fail@plt+0x47b0>
   16754:	add	sp, sp, #64	; 0x40
   16758:	pop	{r4, r5, r6, r7, r8, pc}
   1675c:	subs	r2, r2, #1
   16760:	sbc	r3, r3, #0
   16764:	add	r0, sp, #36	; 0x24
   16768:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1676c:	ldr	r2, [pc, #48]	; 167a4 <__assert_fail@plt+0x47bc>
   16770:	mov	r1, #1
   16774:	mov	r3, r0
   16778:	mov	r0, r7
   1677c:	bl	11e38 <__fprintf_chk@plt>
   16780:	b	16744 <__assert_fail@plt+0x475c>
   16784:	add	r0, sp, #36	; 0x24
   16788:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1678c:	mov	r1, r7
   16790:	bl	11f88 <fputs@plt>
   16794:	b	16744 <__assert_fail@plt+0x475c>
   16798:	bl	11b50 <__stack_chk_fail@plt>
   1679c:	andeq	r7, r4, r8, lsl #30
   167a0:	andeq	r2, r3, r4, ror #14
   167a4:	andeq	r2, r3, ip, asr r7
   167a8:	cmp	r3, #0
   167ac:	push	{r4, r5, r6, r7, r8, lr}
   167b0:	mov	lr, r2
   167b4:	ldrb	ip, [sp, #28]
   167b8:	beq	167e0 <__assert_fail@plt+0x47f8>
   167bc:	ldrd	r6, [r2, #48]	; 0x30
   167c0:	mvn	r5, #0
   167c4:	mvn	r4, #0
   167c8:	cmp	r7, r5
   167cc:	cmpeq	r6, r4
   167d0:	beq	167f8 <__assert_fail@plt+0x4810>
   167d4:	str	ip, [sp, #28]
   167d8:	pop	{r4, r5, r6, r7, r8, lr}
   167dc:	b	21190 <__assert_fail@plt+0xf1a8>
   167e0:	cmp	ip, #0
   167e4:	popeq	{r4, r5, r6, r7, r8, pc}
   167e8:	mov	r1, r2
   167ec:	pop	{r4, r5, r6, r7, r8, lr}
   167f0:	mov	r2, #1
   167f4:	b	1feb0 <__assert_fail@plt+0xdec8>
   167f8:	ldr	r3, [pc, #12]	; 1680c <__assert_fail@plt+0x4824>
   167fc:	ldr	r2, [pc, #12]	; 16810 <__assert_fail@plt+0x4828>
   16800:	ldr	r1, [pc, #12]	; 16814 <__assert_fail@plt+0x482c>
   16804:	ldr	r0, [pc, #12]	; 16818 <__assert_fail@plt+0x4830>
   16808:	bl	11fe8 <__assert_fail@plt>
   1680c:	andeq	r2, r3, r4, lsr #6
   16810:	andeq	r0, r0, r2, asr r7
   16814:	andeq	r2, r3, ip, ror #14
   16818:	andeq	r2, r3, r4, ror r7
   1681c:	push	{r4, r5, r6, r7, r8, lr}
   16820:	sub	sp, sp, #72	; 0x48
   16824:	ldr	r7, [pc, #400]	; 169bc <__assert_fail@plt+0x49d4>
   16828:	ldr	r8, [pc, #400]	; 169c0 <__assert_fail@plt+0x49d8>
   1682c:	mov	r5, r0
   16830:	ldr	r1, [r7, #4]
   16834:	ldr	r2, [r8]
   16838:	add	r0, sp, #40	; 0x28
   1683c:	ldr	r3, [r1]
   16840:	str	r2, [sp, #68]	; 0x44
   16844:	mov	r6, #1
   16848:	ldr	r3, [r3, #80]	; 0x50
   1684c:	blx	r3
   16850:	add	lr, sp, #40	; 0x28
   16854:	add	ip, sp, #12
   16858:	ldm	lr!, {r0, r1, r2, r3}
   1685c:	stmia	ip!, {r0, r1, r2, r3}
   16860:	ldm	lr, {r0, r1, r2}
   16864:	stm	ip, {r0, r1, r2}
   16868:	mov	r2, #0
   1686c:	ldr	r3, [sp, #12]
   16870:	add	r1, sp, #40	; 0x28
   16874:	add	r0, sp, #12
   16878:	ldr	r3, [r3, #88]	; 0x58
   1687c:	blx	r3
   16880:	cmp	r0, #0
   16884:	beq	16970 <__assert_fail@plt+0x4988>
   16888:	ldr	r4, [sp, #40]	; 0x28
   1688c:	add	r1, sp, #11
   16890:	mov	r2, r4
   16894:	ldrb	ip, [r4, #120]	; 0x78
   16898:	ldr	r0, [r2], #8
   1689c:	ldr	r3, [r4, #112]	; 0x70
   168a0:	str	ip, [sp, #4]
   168a4:	ldr	ip, [r4, #116]	; 0x74
   168a8:	strb	r6, [sp, #11]
   168ac:	str	ip, [sp]
   168b0:	bl	167a8 <__assert_fail@plt+0x47c0>
   168b4:	ldr	r3, [r4, #112]	; 0x70
   168b8:	cmp	r3, #0
   168bc:	beq	168cc <__assert_fail@plt+0x48e4>
   168c0:	ldrb	r3, [sp, #11]
   168c4:	cmp	r3, #0
   168c8:	bne	16964 <__assert_fail@plt+0x497c>
   168cc:	cmp	r5, #0
   168d0:	beq	16868 <__assert_fail@plt+0x4880>
   168d4:	ldrd	r0, [r5]
   168d8:	ldrd	r2, [r4, #8]
   168dc:	cmp	r1, r3
   168e0:	cmpeq	r0, r2
   168e4:	bne	16868 <__assert_fail@plt+0x4880>
   168e8:	ldrd	r2, [r5, #96]	; 0x60
   168ec:	ldrd	r0, [r4, #104]	; 0x68
   168f0:	cmp	r3, r1
   168f4:	cmpeq	r2, r0
   168f8:	bne	16868 <__assert_fail@plt+0x4880>
   168fc:	ldr	r3, [r7, #4]
   16900:	mov	r1, #0
   16904:	mov	r0, r3
   16908:	ldr	r3, [r3]
   1690c:	ldr	r3, [r3, #28]
   16910:	blx	r3
   16914:	ldr	r3, [r7, #4]
   16918:	mov	r1, #0
   1691c:	mov	r4, r0
   16920:	mov	r0, r3
   16924:	ldr	r3, [r3]
   16928:	ldr	r3, [r3, #68]	; 0x44
   1692c:	blx	r3
   16930:	ldr	r3, [sp, #40]	; 0x28
   16934:	cmp	r3, r4
   16938:	bne	168fc <__assert_fail@plt+0x4914>
   1693c:	ldr	r3, [sp, #12]
   16940:	add	r0, sp, #12
   16944:	ldr	r3, [r3, #92]	; 0x5c
   16948:	blx	r3
   1694c:	ldr	r2, [sp, #68]	; 0x44
   16950:	ldr	r3, [r8]
   16954:	cmp	r2, r3
   16958:	bne	169b8 <__assert_fail@plt+0x49d0>
   1695c:	add	sp, sp, #72	; 0x48
   16960:	pop	{r4, r5, r6, r7, r8, pc}
   16964:	ldr	r0, [r4]
   16968:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   1696c:	b	168cc <__assert_fail@plt+0x48e4>
   16970:	ldr	r3, [sp, #12]
   16974:	add	r0, sp, #12
   16978:	ldr	r3, [r3, #92]	; 0x5c
   1697c:	blx	r3
   16980:	ldr	r4, [r7, #4]
   16984:	b	1699c <__assert_fail@plt+0x49b4>
   16988:	ldr	r3, [r4]
   1698c:	mov	r1, #0
   16990:	mov	r0, r4
   16994:	ldr	r3, [r3, #68]	; 0x44
   16998:	blx	r3
   1699c:	ldr	r3, [r4]
   169a0:	mov	r0, r4
   169a4:	ldr	r3, [r3, #8]
   169a8:	blx	r3
   169ac:	cmp	r0, #0
   169b0:	bne	16988 <__assert_fail@plt+0x49a0>
   169b4:	b	1694c <__assert_fail@plt+0x4964>
   169b8:	bl	11b50 <__stack_chk_fail@plt>
   169bc:	andeq	r8, r4, r4, lsr r3
   169c0:	andeq	r7, r4, r8, lsl #30
   169c4:	push	{r4, lr}
   169c8:	ldr	r4, [pc, #200]	; 16a98 <__assert_fail@plt+0x4ab0>
   169cc:	ldrb	r3, [r4]
   169d0:	cmp	r3, #0
   169d4:	bne	16a24 <__assert_fail@plt+0x4a3c>
   169d8:	ldr	r4, [pc, #188]	; 16a9c <__assert_fail@plt+0x4ab4>
   169dc:	ldrb	r3, [r4]
   169e0:	cmp	r3, #0
   169e4:	bne	16a80 <__assert_fail@plt+0x4a98>
   169e8:	ldr	r4, [pc, #176]	; 16aa0 <__assert_fail@plt+0x4ab8>
   169ec:	ldrb	r3, [r4]
   169f0:	cmp	r3, #0
   169f4:	bne	16a68 <__assert_fail@plt+0x4a80>
   169f8:	ldr	r4, [pc, #164]	; 16aa4 <__assert_fail@plt+0x4abc>
   169fc:	ldrb	r3, [r4]
   16a00:	cmp	r3, #0
   16a04:	bne	16a50 <__assert_fail@plt+0x4a68>
   16a08:	ldr	r4, [pc, #152]	; 16aa8 <__assert_fail@plt+0x4ac0>
   16a0c:	ldrb	r3, [r4, #8]
   16a10:	cmp	r3, #0
   16a14:	bne	16a3c <__assert_fail@plt+0x4a54>
   16a18:	mov	r0, #0
   16a1c:	pop	{r4, lr}
   16a20:	b	1681c <__assert_fail@plt+0x4834>
   16a24:	ldr	r3, [pc, #128]	; 16aac <__assert_fail@plt+0x4ac4>
   16a28:	ldr	r0, [r3]
   16a2c:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   16a30:	mov	r3, #0
   16a34:	strb	r3, [r4]
   16a38:	b	169d8 <__assert_fail@plt+0x49f0>
   16a3c:	ldr	r0, [r4, #12]
   16a40:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   16a44:	mov	r3, #0
   16a48:	strb	r3, [r4, #8]
   16a4c:	b	16a18 <__assert_fail@plt+0x4a30>
   16a50:	ldr	r3, [pc, #88]	; 16ab0 <__assert_fail@plt+0x4ac8>
   16a54:	ldr	r0, [r3]
   16a58:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   16a5c:	mov	r3, #0
   16a60:	strb	r3, [r4]
   16a64:	b	16a08 <__assert_fail@plt+0x4a20>
   16a68:	ldr	r3, [pc, #68]	; 16ab4 <__assert_fail@plt+0x4acc>
   16a6c:	ldr	r0, [r3]
   16a70:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   16a74:	mov	r3, #0
   16a78:	strb	r3, [r4]
   16a7c:	b	169f8 <__assert_fail@plt+0x4a10>
   16a80:	ldr	r3, [pc, #48]	; 16ab8 <__assert_fail@plt+0x4ad0>
   16a84:	ldr	r0, [r3]
   16a88:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   16a8c:	mov	r3, #0
   16a90:	strb	r3, [r4]
   16a94:	b	169e8 <__assert_fail@plt+0x4a00>
   16a98:			; <UNDEFINED> instruction: 0x0004a6b9
   16a9c:	andeq	sl, r4, r8, lsl #15
   16aa0:			; <UNDEFINED> instruction: 0x0004a6ba
   16aa4:	andeq	sl, r4, sl, ror #14
   16aa8:	andeq	r8, r4, r4, lsr r3
   16aac:	andeq	sl, r4, r0, asr #13
   16ab0:	andeq	sl, r4, r8, asr #13
   16ab4:	andeq	sl, r4, r8, ror #13
   16ab8:	andeq	sl, r4, r0, lsr #15
   16abc:	push	{r4, r5, r6, r7, r8, lr}
   16ac0:	sub	sp, sp, #112	; 0x70
   16ac4:	ldr	r6, [pc, #184]	; 16b84 <__assert_fail@plt+0x4b9c>
   16ac8:	subs	r4, r1, #0
   16acc:	mov	r8, r2
   16ad0:	ldr	r3, [r6]
   16ad4:	mov	r7, r0
   16ad8:	str	r3, [sp, #108]	; 0x6c
   16adc:	beq	16b58 <__assert_fail@plt+0x4b70>
   16ae0:	mov	r0, #120	; 0x78
   16ae4:	bl	2f2ec <renameat2@@Base+0x5d8>
   16ae8:	mov	r5, r0
   16aec:	mov	r0, r7
   16af0:	bl	2f518 <renameat2@@Base+0x804>
   16af4:	mov	r3, r5
   16af8:	mov	r2, #104	; 0x68
   16afc:	mov	r1, r4
   16b00:	str	r0, [r3], #8
   16b04:	mov	r0, r3
   16b08:	bl	11afc <memcpy@plt>
   16b0c:	ldr	r3, [pc, #116]	; 16b88 <__assert_fail@plt+0x4ba0>
   16b10:	strb	r8, [r5, #112]	; 0x70
   16b14:	mov	r1, r5
   16b18:	ldr	r3, [r3, #16]
   16b1c:	mov	r0, r3
   16b20:	ldr	r3, [r3]
   16b24:	ldr	r3, [r3, #48]	; 0x30
   16b28:	blx	r3
   16b2c:	cmp	r0, #0
   16b30:	beq	16b80 <__assert_fail@plt+0x4b98>
   16b34:	mov	r0, r4
   16b38:	mov	r1, #2
   16b3c:	bl	1f6bc <__assert_fail@plt+0xd6d4>
   16b40:	ldr	r2, [sp, #108]	; 0x6c
   16b44:	ldr	r3, [r6]
   16b48:	cmp	r2, r3
   16b4c:	bne	16b7c <__assert_fail@plt+0x4b94>
   16b50:	add	sp, sp, #112	; 0x70
   16b54:	pop	{r4, r5, r6, r7, r8, pc}
   16b58:	mov	r1, sp
   16b5c:	bl	21150 <__assert_fail@plt+0xf168>
   16b60:	cmp	r0, #0
   16b64:	moveq	r4, sp
   16b68:	beq	16ae0 <__assert_fail@plt+0x4af8>
   16b6c:	mov	r2, r7
   16b70:	ldr	r1, [pc, #20]	; 16b8c <__assert_fail@plt+0x4ba4>
   16b74:	ldr	r0, [pc, #20]	; 16b90 <__assert_fail@plt+0x4ba8>
   16b78:	bl	1f774 <__assert_fail@plt+0xd78c>
   16b7c:	bl	11b50 <__stack_chk_fail@plt>
   16b80:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   16b84:	andeq	r7, r4, r8, lsl #30
   16b88:	andeq	r8, r4, r4, lsr r3
   16b8c:	andeq	r2, r3, r0, asr #2
   16b90:	andeq	r2, r3, ip, lsl #15
   16b94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b98:	subs	r6, r0, #0
   16b9c:	mov	r4, r3
   16ba0:	ldr	r9, [sp, #32]
   16ba4:	ldrb	r7, [sp, #36]	; 0x24
   16ba8:	beq	16c70 <__assert_fail@plt+0x4c88>
   16bac:	mov	r5, r1
   16bb0:	mov	r8, r2
   16bb4:	bl	1ce80 <__assert_fail@plt+0xae98>
   16bb8:	cmp	r0, #0
   16bbc:	beq	16bd4 <__assert_fail@plt+0x4bec>
   16bc0:	ldr	r3, [pc, #192]	; 16c88 <__assert_fail@plt+0x4ca0>
   16bc4:	ldrb	r0, [r3]
   16bc8:	bl	18890 <__assert_fail@plt+0x68a8>
   16bcc:	cmp	r0, #2
   16bd0:	bne	16bf4 <__assert_fail@plt+0x4c0c>
   16bd4:	str	r7, [sp, #36]	; 0x24
   16bd8:	str	r9, [sp, #32]
   16bdc:	mov	r3, r4
   16be0:	mov	r2, r8
   16be4:	mov	r1, r5
   16be8:	mov	r0, r6
   16bec:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16bf0:	b	167a8 <__assert_fail@plt+0x47c0>
   16bf4:	mov	r0, #128	; 0x80
   16bf8:	bl	2f2ec <renameat2@@Base+0x5d8>
   16bfc:	mov	sl, r0
   16c00:	mov	r0, r6
   16c04:	bl	2f518 <renameat2@@Base+0x804>
   16c08:	mov	r3, sl
   16c0c:	mov	r1, r8
   16c10:	mov	r2, #104	; 0x68
   16c14:	str	r0, [r3], #8
   16c18:	mov	r0, r3
   16c1c:	bl	11afc <memcpy@plt>
   16c20:	cmp	r4, #0
   16c24:	beq	16c34 <__assert_fail@plt+0x4c4c>
   16c28:	mov	r0, r4
   16c2c:	bl	2f518 <renameat2@@Base+0x804>
   16c30:	mov	r4, r0
   16c34:	ldr	r3, [pc, #80]	; 16c8c <__assert_fail@plt+0x4ca4>
   16c38:	str	r4, [sl, #112]	; 0x70
   16c3c:	str	r9, [sl, #116]	; 0x74
   16c40:	ldr	r0, [r3, #4]
   16c44:	strb	r7, [sl, #120]	; 0x78
   16c48:	mov	r1, sl
   16c4c:	ldr	r3, [r0]
   16c50:	ldr	r3, [r3, #48]	; 0x30
   16c54:	blx	r3
   16c58:	cmp	r0, #0
   16c5c:	beq	16c84 <__assert_fail@plt+0x4c9c>
   16c60:	cmp	r5, #0
   16c64:	movne	r3, #0
   16c68:	strbne	r3, [r5]
   16c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c70:	mov	r2, r7
   16c74:	mov	r1, r6
   16c78:	mov	r0, r3
   16c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c80:	b	16abc <__assert_fail@plt+0x4ad4>
   16c84:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   16c88:			; <UNDEFINED> instruction: 0x0004a6b8
   16c8c:	andeq	r8, r4, r4, lsr r3
   16c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c94:	mov	r9, r3
   16c98:	ldr	r3, [pc, #268]	; 16dac <__assert_fail@plt+0x4dc4>
   16c9c:	sub	sp, sp, #12
   16ca0:	mov	r8, r2
   16ca4:	ldrd	r4, [r3]
   16ca8:	ldr	r3, [pc, #256]	; 16db0 <__assert_fail@plt+0x4dc8>
   16cac:	cmp	r2, r4
   16cb0:	ldr	r3, [r3]
   16cb4:	sbcs	r2, r9, r5
   16cb8:	str	r3, [sp, #4]
   16cbc:	blt	16d94 <__assert_fail@plt+0x4dac>
   16cc0:	cmp	r4, r8
   16cc4:	sbcs	r3, r5, r9
   16cc8:	bge	16d6c <__assert_fail@plt+0x4d84>
   16ccc:	ldr	sl, [r0]
   16cd0:	mov	r7, r0
   16cd4:	mov	fp, #0
   16cd8:	adds	r4, r4, #1
   16cdc:	adc	r5, r5, #0
   16ce0:	mov	r2, #0
   16ce4:	mov	r0, r4
   16ce8:	mov	r1, r5
   16cec:	mov	r3, sp
   16cf0:	bl	16268 <__assert_fail@plt+0x4280>
   16cf4:	ldr	r2, [sp]
   16cf8:	cmp	r2, #0
   16cfc:	mov	r6, r0
   16d00:	beq	16d60 <__assert_fail@plt+0x4d78>
   16d04:	ldrb	r3, [r7, #4]
   16d08:	cmp	r3, #0
   16d0c:	bne	16d28 <__assert_fail@plt+0x4d40>
   16d10:	mov	r1, sl
   16d14:	mov	r0, #10
   16d18:	bl	11f04 <putc@plt>
   16d1c:	cmn	r0, #1
   16d20:	beq	16da4 <__assert_fail@plt+0x4dbc>
   16d24:	ldr	r2, [sp]
   16d28:	mov	r3, sl
   16d2c:	mov	r1, #1
   16d30:	mov	r0, r6
   16d34:	bl	11c1c <fwrite@plt>
   16d38:	cmp	r0, #0
   16d3c:	beq	16da4 <__assert_fail@plt+0x4dbc>
   16d40:	ldr	r3, [sp]
   16d44:	add	r6, r6, r3
   16d48:	ldrb	r3, [r6, #-1]
   16d4c:	strb	fp, [r7, #5]
   16d50:	sub	r3, r3, #10
   16d54:	clz	r3, r3
   16d58:	lsr	r3, r3, #5
   16d5c:	strb	r3, [r7, #4]
   16d60:	cmp	r9, r5
   16d64:	cmpeq	r8, r4
   16d68:	bne	16cd8 <__assert_fail@plt+0x4cf0>
   16d6c:	ldr	r3, [pc, #56]	; 16dac <__assert_fail@plt+0x4dc4>
   16d70:	mov	r0, #1
   16d74:	strd	r4, [r3]
   16d78:	ldr	r3, [pc, #48]	; 16db0 <__assert_fail@plt+0x4dc8>
   16d7c:	ldr	r2, [sp, #4]
   16d80:	ldr	r3, [r3]
   16d84:	cmp	r2, r3
   16d88:	bne	16da8 <__assert_fail@plt+0x4dc0>
   16d8c:	add	sp, sp, #12
   16d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d94:	ldr	r0, [pc, #24]	; 16db4 <__assert_fail@plt+0x4dcc>
   16d98:	bl	1fc1c <__assert_fail@plt+0xdc34>
   16d9c:	mov	r0, #0
   16da0:	b	16d78 <__assert_fail@plt+0x4d90>
   16da4:	bl	1fadc <__assert_fail@plt+0xdaf4>
   16da8:	bl	11b50 <__stack_chk_fail@plt>
   16dac:	andeq	sl, r4, r8, lsr #15
   16db0:	andeq	r7, r4, r8, lsl #30
   16db4:			; <UNDEFINED> instruction: 0x000327b0
   16db8:	cmp	r1, #0
   16dbc:	push	{r4, lr}
   16dc0:	beq	16dd4 <__assert_fail@plt+0x4dec>
   16dc4:	sub	ip, r1, #1
   16dc8:	ldrb	lr, [r0, ip]
   16dcc:	cmp	lr, #10
   16dd0:	moveq	r1, ip
   16dd4:	cmp	r3, #0
   16dd8:	beq	16dec <__assert_fail@plt+0x4e04>
   16ddc:	sub	ip, r3, #1
   16de0:	ldrb	lr, [r2, ip]
   16de4:	cmp	lr, #10
   16de8:	moveq	r3, ip
   16dec:	cmp	r3, #0
   16df0:	beq	16e34 <__assert_fail@plt+0x4e4c>
   16df4:	ldrb	ip, [r2]
   16df8:	cmp	ip, #9
   16dfc:	cmpne	ip, #32
   16e00:	moveq	r4, #1
   16e04:	movne	r4, #0
   16e08:	beq	16e50 <__assert_fail@plt+0x4e68>
   16e0c:	cmp	r1, #0
   16e10:	beq	16e48 <__assert_fail@plt+0x4e60>
   16e14:	ldrb	lr, [r0], #1
   16e18:	add	r2, r2, #1
   16e1c:	cmp	lr, ip
   16e20:	bne	16e48 <__assert_fail@plt+0x4e60>
   16e24:	sub	r3, r3, #1
   16e28:	cmp	r3, #0
   16e2c:	sub	r1, r1, #1
   16e30:	bne	16df4 <__assert_fail@plt+0x4e0c>
   16e34:	cmp	r1, #0
   16e38:	bne	16e78 <__assert_fail@plt+0x4e90>
   16e3c:	sub	r4, r1, r3
   16e40:	clz	r4, r4
   16e44:	lsr	r4, r4, #5
   16e48:	mov	r0, r4
   16e4c:	pop	{r4, pc}
   16e50:	add	ip, r2, #1
   16e54:	subs	r3, r3, #1
   16e58:	mov	r2, ip
   16e5c:	beq	16e34 <__assert_fail@plt+0x4e4c>
   16e60:	ldrb	lr, [ip], #1
   16e64:	cmp	lr, #9
   16e68:	cmpne	lr, #32
   16e6c:	beq	16e54 <__assert_fail@plt+0x4e6c>
   16e70:	cmp	r1, #0
   16e74:	beq	16e3c <__assert_fail@plt+0x4e54>
   16e78:	ldrb	ip, [r0]
   16e7c:	cmp	ip, #32
   16e80:	cmpne	ip, #9
   16e84:	bne	16eb8 <__assert_fail@plt+0x4ed0>
   16e88:	add	ip, r0, #1
   16e8c:	subs	r1, r1, #1
   16e90:	mov	r0, ip
   16e94:	beq	16e3c <__assert_fail@plt+0x4e54>
   16e98:	ldrb	lr, [ip]
   16e9c:	add	ip, ip, #1
   16ea0:	cmp	lr, #9
   16ea4:	cmpne	lr, #32
   16ea8:	beq	16e8c <__assert_fail@plt+0x4ea4>
   16eac:	cmp	r3, #0
   16eb0:	bne	16dec <__assert_fail@plt+0x4e04>
   16eb4:	b	16e3c <__assert_fail@plt+0x4e54>
   16eb8:	mov	r4, #0
   16ebc:	b	16e48 <__assert_fail@plt+0x4e60>
   16ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ec4:	sub	sp, sp, #28
   16ec8:	ldr	lr, [pc, #332]	; 1701c <__assert_fail@plt+0x5034>
   16ecc:	ldr	r6, [sp, #64]	; 0x40
   16ed0:	ldr	ip, [sp, #68]	; 0x44
   16ed4:	ldr	lr, [lr]
   16ed8:	adds	r4, r6, #1
   16edc:	mov	r7, r2
   16ee0:	mov	r9, r3
   16ee4:	adc	r5, ip, #0
   16ee8:	mov	r6, r0
   16eec:	mov	r8, r1
   16ef0:	str	lr, [sp, #20]
   16ef4:	bl	18900 <__assert_fail@plt+0x6918>
   16ef8:	ldr	r3, [sp, #72]	; 0x48
   16efc:	ldr	r2, [sp, #76]	; 0x4c
   16f00:	subs	r3, r0, r3
   16f04:	str	r3, [sp]
   16f08:	sbc	r3, r1, r2
   16f0c:	str	r3, [sp, #4]
   16f10:	ldrd	r2, [sp]
   16f14:	adds	r6, r6, r7
   16f18:	adc	r8, r8, r9
   16f1c:	cmp	r2, r4
   16f20:	sbcs	r3, r3, r5
   16f24:	blt	17010 <__assert_fail@plt+0x5028>
   16f28:	mvn	r9, r9
   16f2c:	subs	r6, r6, #1
   16f30:	lsr	r9, r9, #31
   16f34:	ldr	sl, [pc, #228]	; 17020 <__assert_fail@plt+0x5038>
   16f38:	sbc	r8, r8, #0
   16f3c:	b	16f8c <__assert_fail@plt+0x4fa4>
   16f40:	bl	18988 <__assert_fail@plt+0x69a0>
   16f44:	mov	r1, r5
   16f48:	ldr	fp, [sp, #16]
   16f4c:	str	r0, [sp, #12]
   16f50:	mov	r0, r4
   16f54:	bl	18960 <__assert_fail@plt+0x6978>
   16f58:	mov	r1, fp
   16f5c:	ldr	r2, [sp, #12]
   16f60:	mov	r3, r0
   16f64:	mov	r0, r7
   16f68:	bl	16db8 <__assert_fail@plt+0x4dd0>
   16f6c:	subs	fp, r0, #0
   16f70:	beq	16ff0 <__assert_fail@plt+0x5008>
   16f74:	ldrd	r2, [sp]
   16f78:	adds	r4, r4, #1
   16f7c:	adc	r5, r5, #0
   16f80:	cmp	r2, r4
   16f84:	sbcs	r3, r3, r5
   16f88:	blt	17010 <__assert_fail@plt+0x5028>
   16f8c:	adds	r0, r6, r4
   16f90:	adc	r1, r8, r5
   16f94:	add	r3, sp, #16
   16f98:	mov	r2, r9
   16f9c:	bl	16268 <__assert_fail@plt+0x4280>
   16fa0:	ldrb	fp, [sl]
   16fa4:	mov	r1, r5
   16fa8:	cmp	fp, #0
   16fac:	mov	r7, r0
   16fb0:	mov	r0, r4
   16fb4:	bne	16f40 <__assert_fail@plt+0x4f58>
   16fb8:	bl	18960 <__assert_fail@plt+0x6978>
   16fbc:	ldr	r3, [sp, #16]
   16fc0:	cmp	r0, r3
   16fc4:	str	r0, [sp, #12]
   16fc8:	bne	16ff0 <__assert_fail@plt+0x5008>
   16fcc:	mov	r1, r5
   16fd0:	mov	r0, r4
   16fd4:	bl	18988 <__assert_fail@plt+0x69a0>
   16fd8:	ldr	r2, [sp, #12]
   16fdc:	mov	r1, r0
   16fe0:	mov	r0, r7
   16fe4:	bl	11b44 <memcmp@plt>
   16fe8:	cmp	r0, #0
   16fec:	beq	16f74 <__assert_fail@plt+0x4f8c>
   16ff0:	ldr	r3, [pc, #36]	; 1701c <__assert_fail@plt+0x5034>
   16ff4:	ldr	r2, [sp, #20]
   16ff8:	mov	r0, fp
   16ffc:	ldr	r3, [r3]
   17000:	cmp	r2, r3
   17004:	bne	17018 <__assert_fail@plt+0x5030>
   17008:	add	sp, sp, #28
   1700c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17010:	mov	fp, #1
   17014:	b	16ff0 <__assert_fail@plt+0x5008>
   17018:	bl	11b50 <__stack_chk_fail@plt>
   1701c:	andeq	r7, r4, r8, lsl #30
   17020:	andeq	sl, r4, r4, ror #13
   17024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17028:	sub	sp, sp, #172	; 0xac
   1702c:	ldr	fp, [pc, #1276]	; 17530 <__assert_fail@plt+0x5548>
   17030:	mov	r6, r0
   17034:	mov	r7, r1
   17038:	ldr	r3, [fp]
   1703c:	ldr	sl, [pc, #1264]	; 17534 <__assert_fail@plt+0x554c>
   17040:	str	r3, [sp, #164]	; 0xa4
   17044:	bl	188f0 <__assert_fail@plt+0x6908>
   17048:	ldr	r3, [sl]
   1704c:	ldr	r2, [sl, #4]
   17050:	adds	r8, r0, r3
   17054:	adc	r9, r1, r2
   17058:	strd	r0, [sp, #80]	; 0x50
   1705c:	bl	18900 <__assert_fail@plt+0x6918>
   17060:	mov	r2, r0
   17064:	mov	r3, r1
   17068:	strd	r2, [sp, #64]	; 0x40
   1706c:	orrs	r3, r2, r3
   17070:	beq	17254 <__assert_fail@plt+0x526c>
   17074:	ldr	r3, [pc, #1212]	; 17538 <__assert_fail@plt+0x5550>
   17078:	ldrd	r0, [r3]
   1707c:	adds	r3, r0, #1
   17080:	adc	r2, r1, #0
   17084:	subs	r3, r8, r3
   17088:	str	r3, [sp, #48]	; 0x30
   1708c:	sbc	r3, r9, r2
   17090:	str	r3, [sp, #52]	; 0x34
   17094:	ldrd	r2, [sp, #48]	; 0x30
   17098:	strd	r0, [sp, #96]	; 0x60
   1709c:	cmp	r2, r8
   170a0:	sbcs	r3, r3, r9
   170a4:	bge	17274 <__assert_fail@plt+0x528c>
   170a8:	ldrd	r2, [sp, #48]	; 0x30
   170ac:	strd	r2, [sp, #16]
   170b0:	bl	18940 <__assert_fail@plt+0x6958>
   170b4:	mov	r4, r0
   170b8:	mov	r5, r1
   170bc:	strd	r4, [sp, #56]	; 0x38
   170c0:	bl	18950 <__assert_fail@plt+0x6968>
   170c4:	mov	lr, r5
   170c8:	ldr	r2, [pc, #1132]	; 1753c <__assert_fail@plt+0x5554>
   170cc:	cmp	r4, r0
   170d0:	sbcs	ip, r5, r1
   170d4:	mov	ip, r4
   170d8:	ldrd	r4, [sp, #56]	; 0x38
   170dc:	movlt	lr, r1
   170e0:	movlt	ip, r0
   170e4:	adds	r3, r4, r6
   170e8:	adc	r4, r5, r7
   170ec:	subs	r3, r3, ip
   170f0:	str	r3, [sp, #40]	; 0x28
   170f4:	sbc	r3, r4, lr
   170f8:	adds	r6, r0, r6
   170fc:	adc	r7, r1, r7
   17100:	subs	r1, r6, ip
   17104:	str	r1, [sp, #32]
   17108:	sbc	r1, r7, lr
   1710c:	str	r1, [sp, #36]	; 0x24
   17110:	ldrd	r6, [sp, #32]
   17114:	ldrd	r4, [sp, #64]	; 0x40
   17118:	str	r3, [sp, #44]	; 0x2c
   1711c:	ldrd	r2, [r2]
   17120:	subs	r1, r4, r6
   17124:	sbc	r0, r5, r7
   17128:	subs	r1, r2, r1
   1712c:	sbc	r0, r3, r0
   17130:	adds	r1, r1, #1
   17134:	str	r1, [sp, #72]	; 0x48
   17138:	adc	r1, r0, #0
   1713c:	str	r1, [sp, #76]	; 0x4c
   17140:	ldrd	r0, [sp, #40]	; 0x28
   17144:	mov	lr, r7
   17148:	cmp	r0, #0
   1714c:	sbcs	r1, r1, #0
   17150:	blt	17288 <__assert_fail@plt+0x52a0>
   17154:	ldrd	r0, [sp, #32]
   17158:	cmp	r0, #0
   1715c:	sbcs	r1, r1, #0
   17160:	blt	172b4 <__assert_fail@plt+0x52cc>
   17164:	ldrd	r2, [sp, #72]	; 0x48
   17168:	subs	r1, r2, r8
   1716c:	str	r1, [sp, #24]
   17170:	sbc	r1, r3, r9
   17174:	str	r1, [sp, #28]
   17178:	ldrd	r0, [sp, #24]
   1717c:	cmp	r0, #0
   17180:	sbcs	r1, r1, #0
   17184:	blt	172f8 <__assert_fail@plt+0x5310>
   17188:	ldrd	r2, [sp, #16]
   1718c:	cmp	r2, #0
   17190:	sbcs	r3, r3, #0
   17194:	blt	17478 <__assert_fail@plt+0x5490>
   17198:	ldrd	r2, [sp, #48]	; 0x30
   1719c:	ldrd	r6, [sp, #24]
   171a0:	cmp	r6, r2
   171a4:	sbcs	r1, r7, r3
   171a8:	movlt	r6, r2
   171ac:	movlt	r7, r3
   171b0:	mov	r2, #0
   171b4:	mov	r3, #0
   171b8:	mov	r4, r2
   171bc:	mov	r5, r3
   171c0:	b	171e8 <__assert_fail@plt+0x5200>
   171c4:	ldrd	r2, [sp, #16]
   171c8:	cmp	r2, r4
   171cc:	sbcs	r3, r3, r5
   171d0:	bge	17418 <__assert_fail@plt+0x5430>
   171d4:	adds	r4, r4, #1
   171d8:	adc	r5, r5, #0
   171dc:	cmp	r6, r4
   171e0:	sbcs	r3, r7, r5
   171e4:	blt	172ec <__assert_fail@plt+0x5304>
   171e8:	ldrd	r2, [sp, #24]
   171ec:	cmp	r2, r4
   171f0:	sbcs	r3, r3, r5
   171f4:	blt	171c4 <__assert_fail@plt+0x51dc>
   171f8:	ldrd	r2, [sp, #32]
   171fc:	mov	r0, r8
   17200:	mov	r1, r9
   17204:	strd	r2, [sp, #8]
   17208:	ldrd	r2, [sp, #40]	; 0x28
   1720c:	strd	r2, [sp]
   17210:	mov	r2, r4
   17214:	mov	r3, r5
   17218:	bl	16ec0 <__assert_fail@plt+0x4ed8>
   1721c:	cmp	r0, #0
   17220:	beq	171c4 <__assert_fail@plt+0x51dc>
   17224:	ldr	r1, [pc, #788]	; 17540 <__assert_fail@plt+0x5558>
   17228:	strd	r4, [sp, #88]	; 0x58
   1722c:	ldrd	r2, [sl]
   17230:	ldr	r1, [r1]
   17234:	tst	r1, #1
   17238:	bne	17484 <__assert_fail@plt+0x549c>
   1723c:	ldrd	r0, [sp, #88]	; 0x58
   17240:	adds	r2, r0, r2
   17244:	adc	r3, r1, r3
   17248:	adds	r8, r8, r0
   1724c:	adc	r9, r9, r1
   17250:	strd	r2, [sl]
   17254:	ldr	r2, [sp, #164]	; 0xa4
   17258:	ldr	r3, [fp]
   1725c:	mov	r0, r8
   17260:	cmp	r2, r3
   17264:	mov	r1, r9
   17268:	bne	1752c <__assert_fail@plt+0x5544>
   1726c:	add	sp, sp, #172	; 0xac
   17270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17274:	subs	r3, r8, #1
   17278:	str	r3, [sp, #16]
   1727c:	sbc	r3, r9, #0
   17280:	str	r3, [sp, #20]
   17284:	b	170b0 <__assert_fail@plt+0x50c8>
   17288:	ldrd	r0, [sp, #80]	; 0x50
   1728c:	cmp	r0, #2
   17290:	sbcs	r1, r1, #0
   17294:	blt	17334 <__assert_fail@plt+0x534c>
   17298:	mov	r0, #0
   1729c:	mov	r1, #0
   172a0:	strd	r0, [sp, #40]	; 0x28
   172a4:	ldrd	r0, [sp, #32]
   172a8:	cmp	r0, #0
   172ac:	sbcs	r1, r1, #0
   172b0:	bge	17164 <__assert_fail@plt+0x517c>
   172b4:	ldrd	r0, [sp, #64]	; 0x40
   172b8:	subs	r4, r2, r0
   172bc:	sbc	r5, r3, r1
   172c0:	adds	r4, r4, #1
   172c4:	adc	r5, r5, #0
   172c8:	subs	r3, r8, r4
   172cc:	str	r3, [sp, #104]	; 0x68
   172d0:	sbc	r3, r9, r5
   172d4:	str	r3, [sp, #108]	; 0x6c
   172d8:	ldrd	r6, [sp, #104]	; 0x68
   172dc:	ldrd	r2, [sp, #16]
   172e0:	cmp	r2, r6
   172e4:	sbcs	r3, r3, r7
   172e8:	bge	173c4 <__assert_fail@plt+0x53dc>
   172ec:	mov	r8, #0
   172f0:	mov	r9, #0
   172f4:	b	17254 <__assert_fail@plt+0x526c>
   172f8:	subs	r1, r8, r2
   172fc:	sbc	r3, r9, r3
   17300:	str	r1, [sp, #88]	; 0x58
   17304:	str	r3, [sp, #92]	; 0x5c
   17308:	ldrd	r6, [sp, #24]
   1730c:	ldrd	r2, [sp, #48]	; 0x30
   17310:	ldrd	r4, [sp, #88]	; 0x58
   17314:	cmp	r6, r2
   17318:	sbcs	r1, r7, r3
   1731c:	movlt	r6, r2
   17320:	movlt	r7, r3
   17324:	cmp	r6, r4
   17328:	sbcs	r3, r7, r5
   1732c:	bge	171e8 <__assert_fail@plt+0x5200>
   17330:	b	172ec <__assert_fail@plt+0x5304>
   17334:	cmp	r6, #0
   17338:	sbcs	r1, r7, #0
   1733c:	blt	174fc <__assert_fail@plt+0x5514>
   17340:	ldrd	r2, [sp, #56]	; 0x38
   17344:	ldrd	r0, [sp, #96]	; 0x60
   17348:	cmp	r2, r0
   1734c:	sbcs	r3, r3, r1
   17350:	blt	172ec <__assert_fail@plt+0x5304>
   17354:	ldrd	r2, [sp, #72]	; 0x48
   17358:	mov	r4, #1
   1735c:	subs	r4, r4, r8
   17360:	mov	r5, #0
   17364:	sbc	r5, r5, r9
   17368:	cmp	r2, #1
   1736c:	sbcs	r3, r3, #0
   17370:	blt	172ec <__assert_fail@plt+0x5304>
   17374:	ldrd	r0, [sp, #32]
   17378:	mov	r2, #0
   1737c:	mov	r3, #0
   17380:	strd	r0, [sp, #8]
   17384:	strd	r2, [sp]
   17388:	mov	r0, r8
   1738c:	mov	r1, r9
   17390:	mov	r2, r4
   17394:	mov	r3, r5
   17398:	bl	16ec0 <__assert_fail@plt+0x4ed8>
   1739c:	cmp	r0, #0
   173a0:	beq	172ec <__assert_fail@plt+0x5304>
   173a4:	ldr	r3, [sl]
   173a8:	ldr	r2, [sl, #4]
   173ac:	adds	r3, r3, r4
   173b0:	adc	r5, r2, r5
   173b4:	mov	r8, #1
   173b8:	stm	sl, {r3, r5}
   173bc:	mov	r9, #0
   173c0:	b	17254 <__assert_fail@plt+0x526c>
   173c4:	ldrd	r2, [sp, #40]	; 0x28
   173c8:	mov	r0, #0
   173cc:	mov	r1, #0
   173d0:	strd	r2, [sp]
   173d4:	subs	r2, r4, r8
   173d8:	strd	r0, [sp, #8]
   173dc:	sbc	r3, r5, r9
   173e0:	mov	r0, r8
   173e4:	mov	r1, r9
   173e8:	bl	16ec0 <__assert_fail@plt+0x4ed8>
   173ec:	cmp	r0, #0
   173f0:	beq	172ec <__assert_fail@plt+0x5304>
   173f4:	ldr	r3, [sl]
   173f8:	ldr	r2, [sl, #4]
   173fc:	subs	r3, r3, r6
   17400:	sbc	r2, r2, r7
   17404:	mov	r8, r4
   17408:	mov	r9, r5
   1740c:	str	r3, [sl]
   17410:	str	r2, [sl, #4]
   17414:	b	17254 <__assert_fail@plt+0x526c>
   17418:	ldrd	r2, [sp, #32]
   1741c:	mov	r0, r8
   17420:	mov	r1, r9
   17424:	strd	r2, [sp, #8]
   17428:	ldrd	r2, [sp, #40]	; 0x28
   1742c:	strd	r2, [sp]
   17430:	rsbs	r2, r4, #0
   17434:	rsc	r3, r5, #0
   17438:	bl	16ec0 <__assert_fail@plt+0x4ed8>
   1743c:	cmp	r0, #0
   17440:	beq	171d4 <__assert_fail@plt+0x51ec>
   17444:	ldr	r1, [pc, #244]	; 17540 <__assert_fail@plt+0x5558>
   17448:	strd	r4, [sp, #88]	; 0x58
   1744c:	ldrd	r2, [sl]
   17450:	ldr	r1, [r1]
   17454:	tst	r1, #1
   17458:	bne	174c0 <__assert_fail@plt+0x54d8>
   1745c:	ldrd	r0, [sp, #88]	; 0x58
   17460:	subs	r2, r2, r0
   17464:	sbc	r3, r3, r1
   17468:	subs	r8, r8, r0
   1746c:	strd	r2, [sl]
   17470:	sbc	r9, r9, r1
   17474:	b	17254 <__assert_fail@plt+0x526c>
   17478:	ldrd	r2, [sp, #48]	; 0x30
   1747c:	strd	r2, [sp, #88]	; 0x58
   17480:	b	17308 <__assert_fail@plt+0x5320>
   17484:	add	r0, sp, #116	; 0x74
   17488:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1748c:	ldrd	r2, [sl]
   17490:	mov	r6, r0
   17494:	ldrd	r0, [sp, #88]	; 0x58
   17498:	adds	r2, r0, r2
   1749c:	adc	r3, r1, r3
   174a0:	add	r0, sp, #140	; 0x8c
   174a4:	bl	1f490 <__assert_fail@plt+0xd4a8>
   174a8:	mov	r1, r6
   174ac:	mov	r2, r0
   174b0:	ldr	r0, [pc, #140]	; 17544 <__assert_fail@plt+0x555c>
   174b4:	bl	1fc1c <__assert_fail@plt+0xdc34>
   174b8:	ldrd	r2, [sl]
   174bc:	b	1723c <__assert_fail@plt+0x5254>
   174c0:	add	r0, sp, #116	; 0x74
   174c4:	bl	1f490 <__assert_fail@plt+0xd4a8>
   174c8:	ldrd	r2, [sl]
   174cc:	mov	r6, r0
   174d0:	ldrd	r0, [sp, #88]	; 0x58
   174d4:	subs	r2, r2, r0
   174d8:	sbc	r3, r3, r1
   174dc:	add	r0, sp, #140	; 0x8c
   174e0:	bl	1f490 <__assert_fail@plt+0xd4a8>
   174e4:	mov	r1, r6
   174e8:	mov	r2, r0
   174ec:	ldr	r0, [pc, #80]	; 17544 <__assert_fail@plt+0x555c>
   174f0:	bl	1fc1c <__assert_fail@plt+0xdc34>
   174f4:	ldrd	r2, [sl]
   174f8:	b	1745c <__assert_fail@plt+0x5474>
   174fc:	cmp	r3, r5
   17500:	cmpeq	r2, r4
   17504:	ldrd	r0, [sp, #56]	; 0x38
   17508:	ldrd	r4, [sp, #96]	; 0x60
   1750c:	movne	r3, #1
   17510:	moveq	r3, #0
   17514:	cmp	r0, r4
   17518:	sbcs	r2, r1, r5
   1751c:	orrlt	r3, r3, #1
   17520:	cmp	r3, #0
   17524:	bne	172ec <__assert_fail@plt+0x5304>
   17528:	b	17354 <__assert_fail@plt+0x536c>
   1752c:	bl	11b50 <__stack_chk_fail@plt>
   17530:	andeq	r7, r4, r8, lsl #30
   17534:	muleq	r4, r0, r7
   17538:	andeq	sl, r4, r8, lsr #15
   1753c:			; <UNDEFINED> instruction: 0x0004a6b0
   17540:	ldrdeq	sl, [r4], -r8
   17544:	ldrdeq	r2, [r3], -ip
   17548:	push	{r4, lr}
   1754c:	mov	r4, r0
   17550:	bl	169c4 <__assert_fail@plt+0x49dc>
   17554:	cmp	r4, #0
   17558:	beq	17564 <__assert_fail@plt+0x557c>
   1755c:	mov	r0, r4
   17560:	bl	20860 <__assert_fail@plt+0xe878>
   17564:	mov	r0, #2
   17568:	bl	11d60 <exit@plt>
   1756c:	ldr	r2, [pc, #48]	; 175a4 <__assert_fail@plt+0x55bc>
   17570:	ldr	r3, [pc, #48]	; 175a8 <__assert_fail@plt+0x55c0>
   17574:	push	{lr}		; (str lr, [sp, #-4]!)
   17578:	sub	sp, sp, #36	; 0x24
   1757c:	ldr	r1, [r2]
   17580:	add	r0, sp, #4
   17584:	ldrd	r2, [r3]
   17588:	str	r1, [sp, #28]
   1758c:	bl	1f490 <__assert_fail@plt+0xd4a8>
   17590:	ldr	r3, [pc, #20]	; 175ac <__assert_fail@plt+0x55c4>
   17594:	ldr	r2, [r3]
   17598:	mov	r1, r0
   1759c:	ldr	r0, [pc, #12]	; 175b0 <__assert_fail@plt+0x55c8>
   175a0:	bl	1f558 <__assert_fail@plt+0xd570>
   175a4:	andeq	r7, r4, r8, lsl #30
   175a8:	andeq	sl, r4, r0, lsl #7
   175ac:	andeq	sl, r4, r0, ror r7
   175b0:	andeq	r3, r3, r4, ror #25
   175b4:	push	{r4, lr}
   175b8:	mov	r4, r0
   175bc:	ldrb	r0, [r0]
   175c0:	sub	r3, r0, #48	; 0x30
   175c4:	cmp	r3, #9
   175c8:	bls	17630 <__assert_fail@plt+0x5648>
   175cc:	sub	r3, r0, #97	; 0x61
   175d0:	add	r2, r4, #1
   175d4:	cmp	r3, #18
   175d8:	ldrls	pc, [pc, r3, lsl #2]
   175dc:	b	1769c <__assert_fail@plt+0x56b4>
   175e0:	andeq	r7, r1, r4, asr #13
   175e4:	muleq	r1, ip, r6
   175e8:	andeq	r7, r1, r4, asr #13
   175ec:	andeq	r7, r1, r4, asr #13
   175f0:	muleq	r1, ip, r6
   175f4:	muleq	r1, ip, r6
   175f8:	muleq	r1, ip, r6
   175fc:	muleq	r1, ip, r6
   17600:	andeq	r7, r1, r4, asr #13
   17604:	muleq	r1, ip, r6
   17608:	muleq	r1, ip, r6
   1760c:	muleq	r1, ip, r6
   17610:	muleq	r1, ip, r6
   17614:	muleq	r1, ip, r6
   17618:	muleq	r1, ip, r6
   1761c:	muleq	r1, ip, r6
   17620:	muleq	r1, ip, r6
   17624:	muleq	r1, ip, r6
   17628:	andeq	r7, r1, r4, lsr #13
   1762c:	mov	r4, r2
   17630:	ldrb	r0, [r4, #1]
   17634:	add	r2, r4, #1
   17638:	sub	r3, r0, #48	; 0x30
   1763c:	cmp	r3, #9
   17640:	bls	1762c <__assert_fail@plt+0x5644>
   17644:	cmp	r0, #44	; 0x2c
   17648:	movne	r4, r2
   1764c:	bne	175cc <__assert_fail@plt+0x55e4>
   17650:	ldrb	r3, [r2, #1]
   17654:	sub	r3, r3, #48	; 0x30
   17658:	cmp	r3, #9
   1765c:	addls	r2, r4, #2
   17660:	bls	1766c <__assert_fail@plt+0x5684>
   17664:	b	1769c <__assert_fail@plt+0x56b4>
   17668:	mov	r2, r4
   1766c:	ldrb	r0, [r2, #1]
   17670:	add	r4, r2, #1
   17674:	sub	r3, r0, #48	; 0x30
   17678:	cmp	r3, #9
   1767c:	bls	17668 <__assert_fail@plt+0x5680>
   17680:	cmp	r0, #99	; 0x63
   17684:	add	r2, r2, #2
   17688:	bcc	1769c <__assert_fail@plt+0x56b4>
   1768c:	cmp	r0, #100	; 0x64
   17690:	bls	176c4 <__assert_fail@plt+0x56dc>
   17694:	cmp	r0, #115	; 0x73
   17698:	beq	176a4 <__assert_fail@plt+0x56bc>
   1769c:	mov	r0, #0
   176a0:	pop	{r4, pc}
   176a4:	mov	r0, r2
   176a8:	ldr	r1, [pc, #64]	; 176f0 <__assert_fail@plt+0x5708>
   176ac:	mov	r2, #4
   176b0:	bl	11f94 <strncmp@plt>
   176b4:	cmp	r0, #0
   176b8:	bne	1769c <__assert_fail@plt+0x56b4>
   176bc:	add	r2, r4, #5
   176c0:	mov	r0, #115	; 0x73
   176c4:	ldrb	r3, [r2]
   176c8:	cmp	r3, #9
   176cc:	cmpne	r3, #32
   176d0:	bne	176e4 <__assert_fail@plt+0x56fc>
   176d4:	ldrb	r3, [r2, #1]!
   176d8:	cmp	r3, #9
   176dc:	cmpne	r3, #32
   176e0:	beq	176d4 <__assert_fail@plt+0x56ec>
   176e4:	cmp	r3, #10
   176e8:	movne	r0, #0
   176ec:	pop	{r4, pc}
   176f0:	andeq	r3, r3, r4, lsl #26
   176f4:	push	{r4, lr}
   176f8:	mov	r4, r0
   176fc:	bl	11d48 <__ctype_b_loc@plt>
   17700:	mov	r1, r4
   17704:	ldr	ip, [r0]
   17708:	mov	r0, r1
   1770c:	ldrb	r2, [r1], #1
   17710:	lsl	r3, r2, #1
   17714:	ldrh	r3, [ip, r3]
   17718:	ands	r3, r3, #8192	; 0x2000
   1771c:	bne	17708 <__assert_fail@plt+0x5720>
   17720:	sub	r1, r2, #48	; 0x30
   17724:	cmp	r1, #7
   17728:	add	ip, r0, #6
   1772c:	movhi	ip, r0
   17730:	bls	17740 <__assert_fail@plt+0x5758>
   17734:	b	17758 <__assert_fail@plt+0x5770>
   17738:	cmp	r1, #7
   1773c:	bhi	17770 <__assert_fail@plt+0x5788>
   17740:	add	r3, r2, r3, lsl #3
   17744:	ldrb	r2, [r0, #1]!
   17748:	sub	r3, r3, #48	; 0x30
   1774c:	cmp	r0, ip
   17750:	sub	r1, r2, #48	; 0x30
   17754:	bne	17738 <__assert_fail@plt+0x5750>
   17758:	cmp	r2, #13
   1775c:	ldrbeq	r2, [ip, #1]
   17760:	cmp	r2, #10
   17764:	moveq	r0, r3
   17768:	movne	r0, #0
   1776c:	pop	{r4, pc}
   17770:	mov	ip, r0
   17774:	mov	r3, #0
   17778:	b	17758 <__assert_fail@plt+0x5770>
   1777c:	push	{r4, r5, r6, lr}
   17780:	ldr	r5, [pc, #80]	; 177d8 <__assert_fail@plt+0x57f0>
   17784:	ldr	r4, [r5, #8]
   17788:	mov	r0, r4
   1778c:	bl	11b38 <ftell@plt>
   17790:	mov	r6, r0
   17794:	mov	r0, r4
   17798:	bl	11fac <getc@plt>
   1779c:	cmp	r0, #92	; 0x5c
   177a0:	bne	177c0 <__assert_fail@plt+0x57d8>
   177a4:	mov	r0, r4
   177a8:	bl	11fac <getc@plt>
   177ac:	cmp	r0, #10
   177b0:	cmnne	r0, #1
   177b4:	bne	177a4 <__assert_fail@plt+0x57bc>
   177b8:	mov	r0, #1
   177bc:	pop	{r4, r5, r6, pc}
   177c0:	ldr	r0, [r5, #8]
   177c4:	mov	r1, r6
   177c8:	mov	r2, #0
   177cc:	bl	20fd0 <__assert_fail@plt+0xefe8>
   177d0:	mov	r0, #0
   177d4:	pop	{r4, r5, r6, pc}
   177d8:	andeq	sl, r4, r0, lsl #7
   177dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177e0:	mov	r7, r0
   177e4:	ldr	r9, [pc, #556]	; 17a18 <__assert_fail@plt+0x5a30>
   177e8:	ldr	sl, [pc, #556]	; 17a1c <__assert_fail@plt+0x5a34>
   177ec:	sub	sp, sp, #20
   177f0:	ldr	r4, [r9, #8]
   177f4:	mov	r5, r1
   177f8:	str	r2, [sp, #4]
   177fc:	str	r3, [sp]
   17800:	mov	r6, #0
   17804:	mov	r0, r4
   17808:	bl	11fac <getc@plt>
   1780c:	cmn	r0, #1
   17810:	beq	1784c <__assert_fail@plt+0x5864>
   17814:	cmp	r6, r7
   17818:	bcs	17868 <__assert_fail@plt+0x5880>
   1781c:	cmp	r0, #88	; 0x58
   17820:	cmpne	r0, #32
   17824:	addeq	r6, r6, #1
   17828:	beq	17804 <__assert_fail@plt+0x581c>
   1782c:	cmp	r0, #9
   17830:	bne	17868 <__assert_fail@plt+0x5880>
   17834:	mov	r0, r4
   17838:	bl	11fac <getc@plt>
   1783c:	add	r6, r6, #8
   17840:	bic	r6, r6, #7
   17844:	cmn	r0, #1
   17848:	bne	17814 <__assert_fail@plt+0x582c>
   1784c:	mov	r0, r4
   17850:	bl	11acc <ferror@plt>
   17854:	subs	fp, r0, #0
   17858:	bne	17a14 <__assert_fail@plt+0x5a2c>
   1785c:	mov	r0, fp
   17860:	add	sp, sp, #20
   17864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17868:	cmp	r0, #45	; 0x2d
   1786c:	mov	r8, r0
   17870:	ldr	r6, [sl]
   17874:	bne	178e4 <__assert_fail@plt+0x58fc>
   17878:	subs	r5, r5, #1
   1787c:	bpl	178ac <__assert_fail@plt+0x58c4>
   17880:	b	178e4 <__assert_fail@plt+0x58fc>
   17884:	cmp	r0, #32
   17888:	bne	179dc <__assert_fail@plt+0x59f4>
   1788c:	mov	r0, r4
   17890:	bl	11fac <getc@plt>
   17894:	cmn	r0, #1
   17898:	beq	178bc <__assert_fail@plt+0x58d4>
   1789c:	cmp	r0, #45	; 0x2d
   178a0:	bne	178e0 <__assert_fail@plt+0x58f8>
   178a4:	subs	r5, r5, #1
   178a8:	bcc	178e0 <__assert_fail@plt+0x58f8>
   178ac:	mov	r0, r4
   178b0:	bl	11fac <getc@plt>
   178b4:	cmn	r0, #1
   178b8:	bne	17884 <__assert_fail@plt+0x589c>
   178bc:	mov	r0, r4
   178c0:	bl	11acc <ferror@plt>
   178c4:	subs	fp, r0, #0
   178c8:	bne	17a14 <__assert_fail@plt+0x5a2c>
   178cc:	ldr	r0, [pc, #332]	; 17a20 <__assert_fail@plt+0x5a38>
   178d0:	bl	1fc1c <__assert_fail@plt+0xdc34>
   178d4:	mov	r0, fp
   178d8:	add	sp, sp, #20
   178dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178e0:	mov	r8, r0
   178e4:	mov	r2, #0
   178e8:	ldr	r3, [pc, #308]	; 17a24 <__assert_fail@plt+0x5a3c>
   178ec:	str	r5, [sp, #12]
   178f0:	mov	fp, r2
   178f4:	ldr	r3, [r3]
   178f8:	str	r7, [sp, #8]
   178fc:	mov	r5, r3
   17900:	b	17930 <__assert_fail@plt+0x5948>
   17904:	cmp	r8, #10
   17908:	strb	r8, [r6, fp]
   1790c:	add	r7, fp, #1
   17910:	add	r0, r6, fp
   17914:	beq	17964 <__assert_fail@plt+0x597c>
   17918:	mov	r0, r4
   1791c:	bl	11fac <getc@plt>
   17920:	cmn	r0, #1
   17924:	mov	r8, r0
   17928:	beq	178bc <__assert_fail@plt+0x58d4>
   1792c:	mov	fp, r7
   17930:	sub	r2, r5, #1
   17934:	cmp	r2, fp
   17938:	bne	17904 <__assert_fail@plt+0x591c>
   1793c:	lsl	r5, r5, #1
   17940:	mov	r0, r6
   17944:	mov	r1, r5
   17948:	bl	11b80 <realloc@plt>
   1794c:	subs	r6, r0, #0
   17950:	beq	179f0 <__assert_fail@plt+0x5a08>
   17954:	ldr	r3, [pc, #200]	; 17a24 <__assert_fail@plt+0x5a3c>
   17958:	str	r6, [sl]
   1795c:	str	r5, [r3]
   17960:	b	17904 <__assert_fail@plt+0x591c>
   17964:	ldr	r1, [r9]
   17968:	ldrb	ip, [r6]
   1796c:	ldr	lr, [r9, #4]
   17970:	ldr	r3, [sp]
   17974:	adds	r1, r1, #1
   17978:	str	r1, [r9]
   1797c:	adc	r1, lr, #0
   17980:	cmp	ip, #35	; 0x23
   17984:	orrne	r3, r3, #1
   17988:	cmp	r3, #0
   1798c:	mov	r2, fp
   17990:	ldr	r5, [sp, #12]
   17994:	mov	fp, r7
   17998:	str	r1, [r9, #4]
   1799c:	ldr	r7, [sp, #8]
   179a0:	beq	17800 <__assert_fail@plt+0x5818>
   179a4:	ldr	ip, [sp, #4]
   179a8:	cmp	fp, #1
   179ac:	movls	ip, #0
   179b0:	andhi	ip, ip, #1
   179b4:	cmp	ip, #0
   179b8:	beq	179cc <__assert_fail@plt+0x59e4>
   179bc:	sub	ip, r2, #1
   179c0:	ldrb	lr, [r6, ip]
   179c4:	cmp	lr, #13
   179c8:	beq	17a08 <__assert_fail@plt+0x5a20>
   179cc:	add	r0, r6, fp
   179d0:	mov	r3, #0
   179d4:	strb	r3, [r0]
   179d8:	b	1785c <__assert_fail@plt+0x5874>
   179dc:	mov	r3, #45	; 0x2d
   179e0:	mov	r8, r0
   179e4:	strb	r3, [r6]
   179e8:	mov	r2, #1
   179ec:	b	178e8 <__assert_fail@plt+0x5900>
   179f0:	ldr	r3, [pc, #48]	; 17a28 <__assert_fail@plt+0x5a40>
   179f4:	ldrb	r3, [r3]
   179f8:	cmp	r3, #0
   179fc:	mvnne	fp, #0
   17a00:	bne	1785c <__assert_fail@plt+0x5874>
   17a04:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   17a08:	mov	fp, r2
   17a0c:	strb	r8, [r6, ip]
   17a10:	b	179d0 <__assert_fail@plt+0x59e8>
   17a14:	bl	1facc <__assert_fail@plt+0xdae4>
   17a18:	andeq	sl, r4, r0, lsl #7
   17a1c:	andeq	sl, r4, r0, ror r7
   17a20:	andeq	r3, r3, ip, lsl #26
   17a24:	andeq	sl, r4, r4, lsr #15
   17a28:	strdeq	sl, [r4], -r0
   17a2c:	ldr	r0, [pc, #16]	; 17a44 <__assert_fail@plt+0x5a5c>
   17a30:	ldrb	r3, [r0, #12]
   17a34:	ldrb	r2, [r0, #13]
   17a38:	ldr	r1, [r0, #16]
   17a3c:	ldr	r0, [r0, #20]
   17a40:	b	177dc <__assert_fail@plt+0x57f4>
   17a44:	andeq	sl, r4, r0, lsl #7
   17a48:	push	{r4, r5, r6, lr}
   17a4c:	sub	r4, r2, r1
   17a50:	mov	r6, r0
   17a54:	add	r0, r4, #1
   17a58:	mov	r5, r1
   17a5c:	bl	2f2ec <renameat2@@Base+0x5d8>
   17a60:	mov	r2, r4
   17a64:	mov	r1, r5
   17a68:	str	r0, [r6]
   17a6c:	bl	11afc <memcpy@plt>
   17a70:	mov	r2, #0
   17a74:	strb	r2, [r0, r4]
   17a78:	pop	{r4, r5, r6, pc}
   17a7c:	push	{r4, r5, r6, r7, lr}
   17a80:	cmp	r2, #0
   17a84:	ldr	r4, [pc, #228]	; 17b70 <__assert_fail@plt+0x5b88>
   17a88:	ldr	ip, [pc, #228]	; 17b74 <__assert_fail@plt+0x5b8c>
   17a8c:	sub	sp, sp, #12
   17a90:	ldrb	lr, [r4]
   17a94:	eor	r5, r2, #1
   17a98:	eor	r3, lr, r2
   17a9c:	add	r3, ip, r3, lsl #2
   17aa0:	ldr	r3, [r3, #24]
   17aa4:	beq	17abc <__assert_fail@plt+0x5ad4>
   17aa8:	eor	r6, lr, r1
   17aac:	add	r7, ip, r6, lsl #2
   17ab0:	ldr	r7, [r7, #24]
   17ab4:	cmp	r7, #1
   17ab8:	beq	17afc <__assert_fail@plt+0x5b14>
   17abc:	cmp	r5, r3
   17ac0:	bge	17b10 <__assert_fail@plt+0x5b28>
   17ac4:	mov	r3, r1
   17ac8:	ldr	r1, [pc, #168]	; 17b78 <__assert_fail@plt+0x5b90>
   17acc:	cmp	lr, #0
   17ad0:	ldr	r5, [pc, #164]	; 17b7c <__assert_fail@plt+0x5b94>
   17ad4:	moveq	r5, r1
   17ad8:	cmp	r3, #0
   17adc:	bne	17b20 <__assert_fail@plt+0x5b38>
   17ae0:	cmp	r2, #0
   17ae4:	beq	17b5c <__assert_fail@plt+0x5b74>
   17ae8:	bl	2e970 <__assert_fail@plt+0x1c988>
   17aec:	ldr	r2, [pc, #140]	; 17b80 <__assert_fail@plt+0x5b98>
   17af0:	ldr	r1, [pc, #140]	; 17b84 <__assert_fail@plt+0x5b9c>
   17af4:	mov	r3, r0
   17af8:	b	17b30 <__assert_fail@plt+0x5b48>
   17afc:	eor	r6, r6, #1
   17b00:	add	ip, ip, r6, lsl #2
   17b04:	ldr	ip, [ip, #24]
   17b08:	cmp	ip, #2
   17b0c:	bne	17abc <__assert_fail@plt+0x5ad4>
   17b10:	mov	r3, #0
   17b14:	mov	r0, r3
   17b18:	add	sp, sp, #12
   17b1c:	pop	{r4, r5, r6, r7, pc}
   17b20:	bl	2e970 <__assert_fail@plt+0x1c988>
   17b24:	ldr	r2, [pc, #92]	; 17b88 <__assert_fail@plt+0x5ba0>
   17b28:	ldr	r1, [pc, #92]	; 17b8c <__assert_fail@plt+0x5ba4>
   17b2c:	mov	r3, r0
   17b30:	str	r1, [sp]
   17b34:	ldr	r0, [pc, #84]	; 17b90 <__assert_fail@plt+0x5ba8>
   17b38:	mov	r1, r5
   17b3c:	bl	20598 <__assert_fail@plt+0xe5b0>
   17b40:	ldrb	r2, [r4]
   17b44:	mov	r3, #1
   17b48:	eor	r0, r0, r2
   17b4c:	strb	r0, [r4]
   17b50:	mov	r0, r3
   17b54:	add	sp, sp, #12
   17b58:	pop	{r4, r5, r6, r7, pc}
   17b5c:	bl	2e970 <__assert_fail@plt+0x1c988>
   17b60:	ldr	r2, [pc, #44]	; 17b94 <__assert_fail@plt+0x5bac>
   17b64:	ldr	r1, [pc, #44]	; 17b98 <__assert_fail@plt+0x5bb0>
   17b68:	mov	r3, r0
   17b6c:	b	17b30 <__assert_fail@plt+0x5b48>
   17b70:			; <UNDEFINED> instruction: 0x0004a6b8
   17b74:	andeq	sl, r4, r0, lsl #7
   17b78:	strdeq	r5, [r3], -r8
   17b7c:	andeq	r3, r3, r8, lsr sp
   17b80:	andeq	r3, r3, ip, ror sp
   17b84:	andeq	r3, r3, r8, lsl #27
   17b88:	andeq	r3, r3, r4, ror #26
   17b8c:	andeq	r3, r3, ip, ror #26
   17b90:	muleq	r3, ip, sp
   17b94:	andeq	r3, r3, ip, asr #26
   17b98:	andeq	r3, r3, r4, asr sp
   17b9c:	ldr	r3, [pc, #188]	; 17c60 <__assert_fail@plt+0x5c78>
   17ba0:	push	{r4, r5, r6, r7, r8, lr}
   17ba4:	ldr	r5, [pc, #184]	; 17c64 <__assert_fail@plt+0x5c7c>
   17ba8:	ldm	r3, {r1, r2}
   17bac:	ldr	r0, [r5, #32]
   17bb0:	adds	r4, r1, r1
   17bb4:	adc	r2, r2, r2
   17bb8:	cmp	r0, #0
   17bbc:	str	r4, [r3]
   17bc0:	str	r2, [r3, #4]
   17bc4:	beq	17c48 <__assert_fail@plt+0x5c60>
   17bc8:	ldr	r6, [r5, #36]	; 0x24
   17bcc:	cmp	r6, #0
   17bd0:	beq	17c48 <__assert_fail@plt+0x5c60>
   17bd4:	ldr	r8, [r5, #40]	; 0x28
   17bd8:	cmp	r8, #0
   17bdc:	beq	17c48 <__assert_fail@plt+0x5c60>
   17be0:	lsl	r7, r4, #2
   17be4:	mov	r1, r7
   17be8:	bl	11b80 <realloc@plt>
   17bec:	cmp	r0, #0
   17bf0:	str	r0, [r5, #32]
   17bf4:	beq	17c30 <__assert_fail@plt+0x5c48>
   17bf8:	mov	r1, r7
   17bfc:	mov	r0, r6
   17c00:	bl	11b80 <realloc@plt>
   17c04:	cmp	r0, #0
   17c08:	str	r0, [r5, #36]	; 0x24
   17c0c:	beq	17c30 <__assert_fail@plt+0x5c48>
   17c10:	mov	r1, r4
   17c14:	mov	r0, r8
   17c18:	bl	11b80 <realloc@plt>
   17c1c:	cmp	r0, #0
   17c20:	str	r0, [r5, #40]	; 0x28
   17c24:	beq	17c30 <__assert_fail@plt+0x5c48>
   17c28:	mov	r0, #1
   17c2c:	pop	{r4, r5, r6, r7, r8, pc}
   17c30:	ldr	r3, [pc, #48]	; 17c68 <__assert_fail@plt+0x5c80>
   17c34:	ldrb	r3, [r3]
   17c38:	cmp	r3, #0
   17c3c:	beq	17c5c <__assert_fail@plt+0x5c74>
   17c40:	mov	r0, #0
   17c44:	pop	{r4, r5, r6, r7, r8, pc}
   17c48:	ldr	r3, [pc, #28]	; 17c6c <__assert_fail@plt+0x5c84>
   17c4c:	mov	r2, #187	; 0xbb
   17c50:	ldr	r1, [pc, #24]	; 17c70 <__assert_fail@plt+0x5c88>
   17c54:	ldr	r0, [pc, #24]	; 17c74 <__assert_fail@plt+0x5c8c>
   17c58:	bl	11fe8 <__assert_fail@plt>
   17c5c:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   17c60:	andeq	r8, r4, r0, asr #4
   17c64:	andeq	sl, r4, r0, lsl #7
   17c68:	strdeq	sl, [r4], -r0
   17c6c:	muleq	r3, ip, ip
   17c70:	ldrdeq	r3, [r3], -r0
   17c74:	ldrdeq	r3, [r3], -r8
   17c78:	ldrb	r3, [r0]
   17c7c:	cmp	r3, #0
   17c80:	beq	17ca4 <__assert_fail@plt+0x5cbc>
   17c84:	cmp	r3, #48	; 0x30
   17c88:	beq	17c98 <__assert_fail@plt+0x5cb0>
   17c8c:	b	17cb4 <__assert_fail@plt+0x5ccc>
   17c90:	cmp	r3, #48	; 0x30
   17c94:	bne	17cac <__assert_fail@plt+0x5cc4>
   17c98:	ldrb	r3, [r0, #1]!
   17c9c:	cmp	r3, #0
   17ca0:	bne	17c90 <__assert_fail@plt+0x5ca8>
   17ca4:	mov	r0, #2
   17ca8:	bx	lr
   17cac:	mov	r0, #0
   17cb0:	bx	lr
   17cb4:	cmp	r3, #101	; 0x65
   17cb8:	ldreq	r2, [pc, #36]	; 17ce4 <__assert_fail@plt+0x5cfc>
   17cbc:	beq	17cd0 <__assert_fail@plt+0x5ce8>
   17cc0:	b	17cac <__assert_fail@plt+0x5cc4>
   17cc4:	ldrb	r1, [r2, #1]!
   17cc8:	cmp	r1, r3
   17ccc:	bne	17cac <__assert_fail@plt+0x5cc4>
   17cd0:	ldrb	r3, [r0, #1]!
   17cd4:	cmp	r3, #0
   17cd8:	bne	17cc4 <__assert_fail@plt+0x5cdc>
   17cdc:	mov	r0, #1
   17ce0:	bx	lr
   17ce4:	strdeq	r3, [r3], -r4
   17ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cec:	sub	sp, sp, #52	; 0x34
   17cf0:	ldrb	ip, [r0]
   17cf4:	ldr	r3, [pc, #288]	; 17e1c <__assert_fail@plt+0x5e34>
   17cf8:	str	r0, [sp, #12]
   17cfc:	sub	ip, ip, #48	; 0x30
   17d00:	ldr	r3, [r3]
   17d04:	cmp	ip, #9
   17d08:	str	r1, [sp, #8]
   17d0c:	str	r3, [sp, #44]	; 0x2c
   17d10:	bhi	17dbc <__assert_fail@plt+0x5dd4>
   17d14:	mov	sl, r0
   17d18:	mov	fp, #0
   17d1c:	mov	r4, #0
   17d20:	mov	r5, #0
   17d24:	lsl	r2, r5, #2
   17d28:	lsl	r3, r4, #2
   17d2c:	adds	r3, r3, r4
   17d30:	orr	r2, r2, r4, lsr #30
   17d34:	adc	r2, r2, r5
   17d38:	adds	r6, r3, r3
   17d3c:	adc	r7, r2, r2
   17d40:	adds	r8, r6, ip
   17d44:	adc	r9, r7, ip, asr #31
   17d48:	mov	r0, r8
   17d4c:	mov	r1, r9
   17d50:	mov	r2, #10
   17d54:	mov	r3, #0
   17d58:	bl	31ca8 <renameat2@@Base+0x2f94>
   17d5c:	ldrb	ip, [sl, #1]!
   17d60:	sub	ip, ip, #48	; 0x30
   17d64:	cmp	r1, r5
   17d68:	cmpeq	r0, r4
   17d6c:	orrne	fp, fp, #1
   17d70:	cmp	ip, #9
   17d74:	mov	r4, r8
   17d78:	mov	r5, r9
   17d7c:	bls	17d24 <__assert_fail@plt+0x5d3c>
   17d80:	ldr	r3, [sp, #12]
   17d84:	cmp	r3, sl
   17d88:	beq	17dbc <__assert_fail@plt+0x5dd4>
   17d8c:	cmp	fp, #0
   17d90:	bne	17de4 <__assert_fail@plt+0x5dfc>
   17d94:	ldr	r3, [pc, #128]	; 17e1c <__assert_fail@plt+0x5e34>
   17d98:	ldr	r2, [sp, #44]	; 0x2c
   17d9c:	ldr	r1, [sp, #8]
   17da0:	ldr	r3, [r3]
   17da4:	mov	r0, sl
   17da8:	cmp	r2, r3
   17dac:	strd	r4, [r1]
   17db0:	bne	17de0 <__assert_fail@plt+0x5df8>
   17db4:	add	sp, sp, #52	; 0x34
   17db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dbc:	ldr	r3, [pc, #92]	; 17e20 <__assert_fail@plt+0x5e38>
   17dc0:	add	r0, sp, #20
   17dc4:	ldrd	r2, [r3]
   17dc8:	bl	1f490 <__assert_fail@plt+0xd4a8>
   17dcc:	ldr	r3, [pc, #80]	; 17e24 <__assert_fail@plt+0x5e3c>
   17dd0:	ldr	r2, [r3]
   17dd4:	mov	r1, r0
   17dd8:	ldr	r0, [pc, #72]	; 17e28 <__assert_fail@plt+0x5e40>
   17ddc:	bl	1f558 <__assert_fail@plt+0xd570>
   17de0:	bl	11b50 <__stack_chk_fail@plt>
   17de4:	ldr	r3, [pc, #52]	; 17e20 <__assert_fail@plt+0x5e38>
   17de8:	add	r0, sp, #20
   17dec:	ldr	r4, [sp, #12]
   17df0:	ldrd	r2, [r3]
   17df4:	bl	1f490 <__assert_fail@plt+0xd4a8>
   17df8:	ldr	r3, [pc, #36]	; 17e24 <__assert_fail@plt+0x5e3c>
   17dfc:	sub	sl, sl, r4
   17e00:	mov	r1, sl
   17e04:	ldr	r3, [r3]
   17e08:	mov	r2, r4
   17e0c:	str	r3, [sp]
   17e10:	mov	r3, r0
   17e14:	ldr	r0, [pc, #16]	; 17e2c <__assert_fail@plt+0x5e44>
   17e18:	bl	1f558 <__assert_fail@plt+0xd570>
   17e1c:	andeq	r7, r4, r8, lsl #30
   17e20:	andeq	sl, r4, r0, lsl #7
   17e24:	andeq	sl, r4, r0, ror r7
   17e28:	andeq	r3, r3, r0, lsr #28
   17e2c:	andeq	r3, r3, r4, asr #28
   17e30:	push	{r4, lr}
   17e34:	ldr	r4, [pc, #108]	; 17ea8 <__assert_fail@plt+0x5ec0>
   17e38:	ldr	r3, [r4, #32]
   17e3c:	cmp	r3, #0
   17e40:	beq	17e70 <__assert_fail@plt+0x5e88>
   17e44:	ldr	r3, [r4, #36]	; 0x24
   17e48:	cmp	r3, #0
   17e4c:	beq	17e90 <__assert_fail@plt+0x5ea8>
   17e50:	ldr	r3, [r4, #40]	; 0x28
   17e54:	cmp	r3, #0
   17e58:	popne	{r4, pc}
   17e5c:	ldr	r3, [pc, #72]	; 17eac <__assert_fail@plt+0x5ec4>
   17e60:	ldr	r0, [r3]
   17e64:	bl	2f2ec <renameat2@@Base+0x5d8>
   17e68:	str	r0, [r4, #40]	; 0x28
   17e6c:	pop	{r4, pc}
   17e70:	ldr	r3, [pc, #52]	; 17eac <__assert_fail@plt+0x5ec4>
   17e74:	ldr	r0, [r3]
   17e78:	lsl	r0, r0, #2
   17e7c:	bl	2f2ec <renameat2@@Base+0x5d8>
   17e80:	ldr	r3, [r4, #36]	; 0x24
   17e84:	cmp	r3, #0
   17e88:	str	r0, [r4, #32]
   17e8c:	bne	17e50 <__assert_fail@plt+0x5e68>
   17e90:	ldr	r3, [pc, #20]	; 17eac <__assert_fail@plt+0x5ec4>
   17e94:	ldr	r0, [r3]
   17e98:	lsl	r0, r0, #2
   17e9c:	bl	2f2ec <renameat2@@Base+0x5d8>
   17ea0:	str	r0, [r4, #36]	; 0x24
   17ea4:	b	17e50 <__assert_fail@plt+0x5e68>
   17ea8:	andeq	sl, r4, r0, lsl #7
   17eac:	andeq	r8, r4, r0, asr #4
   17eb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17eb4:	mov	r6, #0
   17eb8:	ldr	r7, [pc, #160]	; 17f60 <__assert_fail@plt+0x5f78>
   17ebc:	sub	sp, sp, #112	; 0x70
   17ec0:	mov	sl, r0
   17ec4:	ldr	r3, [r7]
   17ec8:	mov	r9, r1
   17ecc:	mov	r5, r0
   17ed0:	mov	r8, r6
   17ed4:	str	r3, [sp, #108]	; 0x6c
   17ed8:	ldrb	r4, [r5, #1]!
   17edc:	cmp	r4, #0
   17ee0:	beq	17f10 <__assert_fail@plt+0x5f28>
   17ee4:	cmp	r4, #47	; 0x2f
   17ee8:	bne	17ed8 <__assert_fail@plt+0x5ef0>
   17eec:	ldrb	r3, [r5, #-1]
   17ef0:	cmp	r3, #47	; 0x2f
   17ef4:	beq	17ed8 <__assert_fail@plt+0x5ef0>
   17ef8:	cmp	r9, #0
   17efc:	bne	17f2c <__assert_fail@plt+0x5f44>
   17f00:	ldrb	r4, [r5, #1]!
   17f04:	add	r6, r6, #1
   17f08:	cmp	r4, #0
   17f0c:	bne	17ee4 <__assert_fail@plt+0x5efc>
   17f10:	ldr	r2, [sp, #108]	; 0x6c
   17f14:	ldr	r3, [r7]
   17f18:	mov	r0, r6
   17f1c:	cmp	r2, r3
   17f20:	bne	17f5c <__assert_fail@plt+0x5f74>
   17f24:	add	sp, sp, #112	; 0x70
   17f28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f2c:	strb	r8, [r5]
   17f30:	mov	r1, sp
   17f34:	mov	r0, sl
   17f38:	bl	1e274 <__assert_fail@plt+0xc28c>
   17f3c:	strb	r4, [r5]
   17f40:	cmp	r0, #0
   17f44:	bne	17f10 <__assert_fail@plt+0x5f28>
   17f48:	ldr	r3, [sp, #16]
   17f4c:	and	r3, r3, #61440	; 0xf000
   17f50:	cmp	r3, #16384	; 0x4000
   17f54:	beq	17f00 <__assert_fail@plt+0x5f18>
   17f58:	b	17f10 <__assert_fail@plt+0x5f28>
   17f5c:	bl	11b50 <__stack_chk_fail@plt>
   17f60:	andeq	r7, r4, r8, lsl #30
   17f64:	push	{r4, r5, r6, r7, r8, lr}
   17f68:	mov	r5, r0
   17f6c:	ldr	r6, [pc, #184]	; 1802c <__assert_fail@plt+0x6044>
   17f70:	ldr	r0, [r6, #44]	; 0x2c
   17f74:	cmp	r0, #0
   17f78:	beq	18014 <__assert_fail@plt+0x602c>
   17f7c:	mov	r1, r5
   17f80:	bl	11a48 <strcmp@plt>
   17f84:	cmp	r0, #0
   17f88:	beq	17ff8 <__assert_fail@plt+0x6010>
   17f8c:	ldr	r0, [r6, #48]	; 0x30
   17f90:	cmp	r0, #0
   17f94:	beq	18020 <__assert_fail@plt+0x6038>
   17f98:	mov	r1, r5
   17f9c:	bl	11a48 <strcmp@plt>
   17fa0:	cmp	r0, #0
   17fa4:	beq	17ff8 <__assert_fail@plt+0x6010>
   17fa8:	mov	r4, #2
   17fac:	mov	r8, r4
   17fb0:	mov	r0, r5
   17fb4:	bl	21584 <__assert_fail@plt+0xf59c>
   17fb8:	cmp	r0, #0
   17fbc:	beq	17fcc <__assert_fail@plt+0x5fe4>
   17fc0:	mov	r7, #1
   17fc4:	mov	r0, r7
   17fc8:	pop	{r4, r5, r6, r7, r8, pc}
   17fcc:	mov	r0, r5
   17fd0:	bl	21610 <__assert_fail@plt+0xf628>
   17fd4:	subs	r7, r0, #0
   17fd8:	bne	17fc0 <__assert_fail@plt+0x5fd8>
   17fdc:	mov	r0, r5
   17fe0:	bl	2e970 <__assert_fail@plt+0x1c988>
   17fe4:	mov	r1, r0
   17fe8:	ldr	r0, [pc, #64]	; 18030 <__assert_fail@plt+0x6048>
   17fec:	bl	1fc1c <__assert_fail@plt+0xdc34>
   17ff0:	cmp	r8, #2
   17ff4:	bne	18004 <__assert_fail@plt+0x601c>
   17ff8:	mov	r7, #0
   17ffc:	mov	r0, r7
   18000:	pop	{r4, r5, r6, r7, r8, pc}
   18004:	add	r0, r6, r4, lsl #2
   18008:	str	r5, [r0, #44]	; 0x2c
   1800c:	mov	r0, r7
   18010:	pop	{r4, r5, r6, r7, r8, pc}
   18014:	mov	r4, r0
   18018:	mov	r8, r0
   1801c:	b	17fb0 <__assert_fail@plt+0x5fc8>
   18020:	mov	r4, #1
   18024:	mov	r8, r4
   18028:	b	17fb0 <__assert_fail@plt+0x5fc8>
   1802c:	andeq	sl, r4, r0, lsl #7
   18030:	andeq	r3, r3, r4, ror lr
   18034:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18038:	mov	fp, r0
   1803c:	ldr	r9, [pc, #328]	; 1818c <__assert_fail@plt+0x61a4>
   18040:	ldr	r6, [pc, #328]	; 18190 <__assert_fail@plt+0x61a8>
   18044:	sub	sp, sp, #52	; 0x34
   18048:	ldr	r2, [r9]
   1804c:	mov	r7, r6
   18050:	mvn	sl, #-2147483648	; 0x80000000
   18054:	mov	r4, #0
   18058:	mvn	r8, #0
   1805c:	str	r8, [sp]
   18060:	str	r2, [sp, #44]	; 0x2c
   18064:	ldr	r0, [r7], #4
   18068:	cmp	r0, #0
   1806c:	beq	180f4 <__assert_fail@plt+0x610c>
   18070:	ldr	r5, [fp, r4, lsl #2]
   18074:	cmp	r5, #0
   18078:	bne	180f4 <__assert_fail@plt+0x610c>
   1807c:	ldrb	r2, [r0]
   18080:	cmp	r2, #0
   18084:	beq	18094 <__assert_fail@plt+0x60ac>
   18088:	mov	r1, r5
   1808c:	bl	17eb0 <__assert_fail@plt+0x5ec8>
   18090:	mov	r5, r0
   18094:	add	r3, sp, #8
   18098:	cmp	r5, sl
   1809c:	str	r5, [r3, r4, lsl #2]
   180a0:	bgt	180f4 <__assert_fail@plt+0x610c>
   180a4:	ldr	r2, [r7, #-4]
   180a8:	mov	r0, r2
   180ac:	str	r2, [sp, #4]
   180b0:	bl	25348 <__assert_fail@plt+0x13360>
   180b4:	ldr	r3, [sp]
   180b8:	cmp	r0, r3
   180bc:	add	r3, sp, #20
   180c0:	mov	sl, r0
   180c4:	str	r0, [r3, r4, lsl #2]
   180c8:	movhi	sl, r5
   180cc:	bhi	180f4 <__assert_fail@plt+0x610c>
   180d0:	ldr	r2, [sp, #4]
   180d4:	mov	r0, r2
   180d8:	bl	11d78 <strlen@plt>
   180dc:	add	r3, sp, #32
   180e0:	str	sl, [sp]
   180e4:	mov	sl, r5
   180e8:	cmp	r8, r0
   180ec:	movcs	r8, r0
   180f0:	str	r0, [r3, r4, lsl #2]
   180f4:	add	r4, r4, #1
   180f8:	cmp	r4, #3
   180fc:	bne	18064 <__assert_fail@plt+0x607c>
   18100:	mov	r4, #0
   18104:	ldr	r0, [r6], #4
   18108:	cmp	r0, #0
   1810c:	beq	1811c <__assert_fail@plt+0x6134>
   18110:	ldr	r2, [fp, r4, lsl #2]
   18114:	cmp	r2, #0
   18118:	beq	18144 <__assert_fail@plt+0x615c>
   1811c:	add	r4, r4, #1
   18120:	cmp	r4, #3
   18124:	bne	18104 <__assert_fail@plt+0x611c>
   18128:	ldr	r2, [sp, #44]	; 0x2c
   1812c:	ldr	r3, [r9]
   18130:	mov	r0, r4
   18134:	cmp	r2, r3
   18138:	bne	18188 <__assert_fail@plt+0x61a0>
   1813c:	add	sp, sp, #52	; 0x34
   18140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18144:	bl	17f64 <__assert_fail@plt+0x5f7c>
   18148:	cmp	r0, #0
   1814c:	beq	1811c <__assert_fail@plt+0x6134>
   18150:	add	r3, sp, #8
   18154:	ldr	r2, [r3, r4, lsl #2]
   18158:	cmp	r2, sl
   1815c:	bne	1811c <__assert_fail@plt+0x6134>
   18160:	add	r3, sp, #20
   18164:	ldr	r2, [r3, r4, lsl #2]
   18168:	ldr	r3, [sp]
   1816c:	cmp	r2, r3
   18170:	bne	1811c <__assert_fail@plt+0x6134>
   18174:	add	r3, sp, #32
   18178:	ldr	r2, [r3, r4, lsl #2]
   1817c:	cmp	r2, r8
   18180:	bne	1811c <__assert_fail@plt+0x6134>
   18184:	b	18128 <__assert_fail@plt+0x6140>
   18188:	bl	11b50 <__stack_chk_fail@plt>
   1818c:	andeq	r7, r4, r8, lsl #30
   18190:			; <UNDEFINED> instruction: 0x0004a3b4
   18194:	ldr	r3, [pc, #64]	; 181dc <__assert_fail@plt+0x61f4>
   18198:	ldr	ip, [pc, #64]	; 181e0 <__assert_fail@plt+0x61f8>
   1819c:	push	{r4, r5}
   181a0:	mov	r0, #0
   181a4:	mov	r1, #0
   181a8:	mvn	r4, #0
   181ac:	mvn	r5, #0
   181b0:	mov	r2, #0
   181b4:	strd	r4, [ip, #8]
   181b8:	strd	r0, [r3, #64]	; 0x40
   181bc:	strd	r0, [r3, #72]	; 0x48
   181c0:	strd	r0, [r3, #80]	; 0x50
   181c4:	strd	r0, [r3, #88]	; 0x58
   181c8:	strd	r0, [r3, #96]	; 0x60
   181cc:	str	r2, [r3, #20]
   181d0:	strb	r2, [r3, #13]
   181d4:	pop	{r4, r5}
   181d8:	bx	lr
   181dc:	andeq	sl, r4, r0, lsl #7
   181e0:	andeq	r8, r4, r0, asr #4
   181e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181e8:	sub	sp, sp, #124	; 0x7c
   181ec:	ldr	r8, [pc, #536]	; 1840c <__assert_fail@plt+0x6424>
   181f0:	subs	r4, r0, #0
   181f4:	ldr	r3, [r8]
   181f8:	str	r3, [sp, #116]	; 0x74
   181fc:	beq	1820c <__assert_fail@plt+0x6224>
   18200:	ldrb	r3, [r4]
   18204:	cmp	r3, #0
   18208:	bne	18374 <__assert_fail@plt+0x638c>
   1820c:	ldr	r3, [pc, #508]	; 18410 <__assert_fail@plt+0x6428>
   18210:	ldr	r5, [pc, #508]	; 18414 <__assert_fail@plt+0x642c>
   18214:	ldr	r6, [r3]
   18218:	str	r6, [r5, #8]
   1821c:	mov	r0, r6
   18220:	bl	11e2c <fileno@plt>
   18224:	add	r2, sp, #8
   18228:	mov	r1, r0
   1822c:	mov	r0, #3
   18230:	bl	11bec <__fxstat64@plt>
   18234:	cmp	r0, #0
   18238:	bne	183e0 <__assert_fail@plt+0x63f8>
   1823c:	ldr	r3, [sp, #24]
   18240:	and	r3, r3, #61440	; 0xf000
   18244:	cmp	r3, #32768	; 0x8000
   18248:	beq	183b8 <__assert_fail@plt+0x63d0>
   1824c:	ldr	r4, [pc, #452]	; 18418 <__assert_fail@plt+0x6430>
   18250:	mov	r2, #0
   18254:	mov	r0, r4
   18258:	str	r2, [sp]
   1825c:	mov	r3, #2
   18260:	mov	r1, #112	; 0x70
   18264:	bl	20fec <__assert_fail@plt+0xf004>
   18268:	cmn	r0, #1
   1826c:	beq	183d4 <__assert_fail@plt+0x63ec>
   18270:	ldr	r3, [pc, #420]	; 1841c <__assert_fail@plt+0x6434>
   18274:	mov	r2, #1
   18278:	ldr	r1, [pc, #416]	; 18420 <__assert_fail@plt+0x6438>
   1827c:	strb	r2, [r3]
   18280:	bl	11a00 <fdopen@plt>
   18284:	cmp	r0, #0
   18288:	str	r0, [r5, #8]
   1828c:	beq	183e8 <__assert_fail@plt+0x6400>
   18290:	mov	r2, #0
   18294:	mov	r3, #0
   18298:	ldr	r7, [pc, #388]	; 18424 <__assert_fail@plt+0x643c>
   1829c:	strd	r2, [sp, #56]	; 0x38
   182a0:	ldr	r4, [pc, #384]	; 18428 <__assert_fail@plt+0x6440>
   182a4:	b	182d4 <__assert_fail@plt+0x62ec>
   182a8:	ldr	r3, [r5, #8]
   182ac:	mov	r2, r9
   182b0:	mov	r1, #1
   182b4:	ldr	r0, [r4]
   182b8:	bl	11c1c <fwrite@plt>
   182bc:	cmp	r0, r9
   182c0:	bne	183d0 <__assert_fail@plt+0x63e8>
   182c4:	ldrd	r2, [sp, #56]	; 0x38
   182c8:	adds	sl, r2, r0
   182cc:	adc	fp, r3, #0
   182d0:	strd	sl, [sp, #56]	; 0x38
   182d4:	mov	r3, r6
   182d8:	ldr	r2, [r7]
   182dc:	mov	r1, #1
   182e0:	ldr	r0, [r4]
   182e4:	bl	11c58 <fread@plt>
   182e8:	subs	r9, r0, #0
   182ec:	bne	182a8 <__assert_fail@plt+0x62c0>
   182f0:	mov	r0, r6
   182f4:	bl	11acc <ferror@plt>
   182f8:	cmp	r0, #0
   182fc:	bne	18404 <__assert_fail@plt+0x641c>
   18300:	mov	r0, r6
   18304:	bl	11e5c <fclose@plt>
   18308:	cmp	r0, #0
   1830c:	bne	18404 <__assert_fail@plt+0x641c>
   18310:	ldr	r0, [r5, #8]
   18314:	bl	11a84 <fflush@plt>
   18318:	subs	r2, r0, #0
   1831c:	bne	183d0 <__assert_fail@plt+0x63e8>
   18320:	mov	r1, r2
   18324:	ldr	r0, [r5, #8]
   18328:	bl	11f58 <fseek@plt>
   1832c:	cmp	r0, #0
   18330:	bne	183d0 <__assert_fail@plt+0x63e8>
   18334:	ldrd	r2, [sp, #56]	; 0x38
   18338:	asr	r7, r2, #31
   1833c:	cmp	r3, r7
   18340:	cmpeq	r2, r2
   18344:	strd	r2, [r5, #104]	; 0x68
   18348:	bne	183fc <__assert_fail@plt+0x6414>
   1834c:	ldr	ip, [sp, #116]	; 0x74
   18350:	ldr	r1, [r8]
   18354:	mov	r2, #1
   18358:	mov	r3, #0
   1835c:	cmp	ip, r1
   18360:	str	r0, [r5, #112]	; 0x70
   18364:	strd	r2, [r5, #120]	; 0x78
   18368:	bne	18408 <__assert_fail@plt+0x6420>
   1836c:	add	sp, sp, #124	; 0x7c
   18370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18374:	ldr	r1, [pc, #176]	; 1842c <__assert_fail@plt+0x6444>
   18378:	bl	11a48 <strcmp@plt>
   1837c:	cmp	r0, #0
   18380:	beq	1820c <__assert_fail@plt+0x6224>
   18384:	ldr	r1, [pc, #164]	; 18430 <__assert_fail@plt+0x6448>
   18388:	mov	r0, r4
   1838c:	bl	11f1c <fopen64@plt>
   18390:	ldr	r5, [pc, #124]	; 18414 <__assert_fail@plt+0x642c>
   18394:	cmp	r0, #0
   18398:	mov	r6, r0
   1839c:	str	r0, [r5, #8]
   183a0:	bne	1821c <__assert_fail@plt+0x6234>
   183a4:	mov	r0, r4
   183a8:	bl	2e970 <__assert_fail@plt+0x1c988>
   183ac:	mov	r1, r0
   183b0:	ldr	r0, [pc, #124]	; 18434 <__assert_fail@plt+0x644c>
   183b4:	bl	1f774 <__assert_fail@plt+0xd78c>
   183b8:	mov	r0, r6
   183bc:	bl	11b38 <ftell@plt>
   183c0:	cmn	r0, #1
   183c4:	bne	18334 <__assert_fail@plt+0x634c>
   183c8:	ldr	r6, [r5, #8]
   183cc:	b	1824c <__assert_fail@plt+0x6264>
   183d0:	bl	1fadc <__assert_fail@plt+0xdaf4>
   183d4:	ldr	r1, [r4]
   183d8:	ldr	r0, [pc, #88]	; 18438 <__assert_fail@plt+0x6450>
   183dc:	bl	1f774 <__assert_fail@plt+0xd78c>
   183e0:	ldr	r0, [pc, #84]	; 1843c <__assert_fail@plt+0x6454>
   183e4:	bl	1f774 <__assert_fail@plt+0xd78c>
   183e8:	ldr	r0, [r4]
   183ec:	bl	2e970 <__assert_fail@plt+0x1c988>
   183f0:	mov	r1, r0
   183f4:	ldr	r0, [pc, #68]	; 18440 <__assert_fail@plt+0x6458>
   183f8:	bl	1f774 <__assert_fail@plt+0xd78c>
   183fc:	ldr	r0, [pc, #64]	; 18444 <__assert_fail@plt+0x645c>
   18400:	bl	1f558 <__assert_fail@plt+0xd570>
   18404:	bl	1facc <__assert_fail@plt+0xdae4>
   18408:	bl	11b50 <__stack_chk_fail@plt>
   1840c:	andeq	r7, r4, r8, lsl #30
   18410:	andeq	r8, r4, r0, lsl #6
   18414:	andeq	sl, r4, r0, lsl #7
   18418:	andeq	sl, r4, r8, ror #13
   1841c:			; <UNDEFINED> instruction: 0x0004a6ba
   18420:	andeq	r3, r3, r8, asr #29
   18424:	andeq	sl, r4, r4, lsr #15
   18428:	andeq	sl, r4, r0, ror r7
   1842c:	andeq	r2, r3, r4, lsl #17
   18430:	strdeq	r3, [r3], -r0
   18434:	andeq	r3, r3, r4, lsr #29
   18438:	strdeq	r2, [r3], -r8
   1843c:	andeq	r3, r3, r0, asr #29
   18440:	andeq	r2, r3, ip, ror #25
   18444:	andeq	r3, r3, ip, asr #29
   18448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1844c:	sub	sp, sp, #60	; 0x3c
   18450:	ldr	r4, [pc, #1040]	; 18868 <__assert_fail@plt+0x6880>
   18454:	mov	r9, #0
   18458:	ldrd	r2, [r4, #72]	; 0x48
   1845c:	ldrd	r0, [r4, #64]	; 0x40
   18460:	ldr	r7, [r4, #32]
   18464:	strd	r2, [r4, #64]	; 0x40
   18468:	ldr	r3, [r4, #36]	; 0x24
   1846c:	strd	r0, [r4, #72]	; 0x48
   18470:	ldr	r6, [r4, #40]	; 0x28
   18474:	str	r3, [sp, #40]	; 0x28
   18478:	str	r9, [r4, #32]
   1847c:	str	r9, [r4, #36]	; 0x24
   18480:	str	r9, [r4, #40]	; 0x28
   18484:	bl	17e30 <__assert_fail@plt+0x5e48>
   18488:	ldr	r0, [r4, #32]
   1848c:	ldr	r8, [r4, #36]	; 0x24
   18490:	cmp	r0, r9
   18494:	ldr	r5, [r4, #40]	; 0x28
   18498:	beq	187c8 <__assert_fail@plt+0x67e0>
   1849c:	cmp	r8, #0
   184a0:	beq	187c8 <__assert_fail@plt+0x67e0>
   184a4:	cmp	r5, #0
   184a8:	beq	187c8 <__assert_fail@plt+0x67e0>
   184ac:	ldr	r3, [r4, #80]	; 0x50
   184b0:	ldr	r2, [r4, #84]	; 0x54
   184b4:	adds	r1, r3, #1
   184b8:	str	r1, [sp, #16]
   184bc:	adc	r1, r2, #0
   184c0:	str	r1, [sp, #20]
   184c4:	ldr	r1, [sp, #16]
   184c8:	add	r1, r6, r1
   184cc:	ldrb	r1, [r1]
   184d0:	cmp	r1, #10
   184d4:	strne	r9, [sp, #44]	; 0x2c
   184d8:	beq	187ac <__assert_fail@plt+0x67c4>
   184dc:	ldr	r1, [pc, #904]	; 1886c <__assert_fail@plt+0x6884>
   184e0:	ldrd	r2, [r1, #16]
   184e4:	ldrd	sl, [r1, #8]
   184e8:	cmp	r2, #0
   184ec:	sbcs	ip, r3, #0
   184f0:	strd	sl, [sp]
   184f4:	blt	18544 <__assert_fail@plt+0x655c>
   184f8:	ldrd	sl, [sp, #16]
   184fc:	cmp	sl, r2
   18500:	sbcs	ip, fp, r3
   18504:	bge	187f8 <__assert_fail@plt+0x6810>
   18508:	ldrd	sl, [sp, #16]
   1850c:	rsbs	sl, sl, #0
   18510:	rsc	fp, fp, #0
   18514:	strd	sl, [sp, #48]	; 0x30
   18518:	ldrd	sl, [sp, #48]	; 0x30
   1851c:	ldr	r9, [r1, #24]
   18520:	adds	ip, r2, sl
   18524:	ldr	r2, [r1, #28]
   18528:	adc	lr, r3, fp
   1852c:	adds	r3, r9, sl
   18530:	adc	r2, r2, fp
   18534:	str	lr, [r1, #20]
   18538:	str	ip, [r1, #16]
   1853c:	str	r3, [r1, #24]
   18540:	str	r2, [r1, #28]
   18544:	ldrd	sl, [sp]
   18548:	ldrd	r2, [sp, #16]
   1854c:	cmp	sl, r2
   18550:	sbcs	r1, fp, r3
   18554:	blt	1881c <__assert_fail@plt+0x6834>
   18558:	sub	r1, r2, #-1073741823	; 0xc0000001
   1855c:	ldr	r3, [sp, #40]	; 0x28
   18560:	lsl	r1, r1, #2
   18564:	sub	ip, r2, #1
   18568:	add	r2, r7, r1
   1856c:	add	r1, r3, r1
   18570:	ldr	r3, [sp]
   18574:	add	ip, r6, ip
   18578:	sub	sl, r0, #4
   1857c:	sub	r9, r5, #1
   18580:	sub	lr, r8, #4
   18584:	add	fp, r7, r3, lsl #2
   18588:	ldr	r3, [r2, #4]!
   1858c:	str	r3, [sl, #4]!
   18590:	ldrb	r3, [ip, #1]!
   18594:	cmp	r3, #43	; 0x2b
   18598:	moveq	r3, #45	; 0x2d
   1859c:	strb	r3, [r9, #1]!
   185a0:	ldr	r3, [r1, #4]!
   185a4:	cmp	r2, fp
   185a8:	str	r3, [lr, #4]!
   185ac:	bne	18588 <__assert_fail@plt+0x65a0>
   185b0:	ldrd	sl, [sp, #16]
   185b4:	ldr	r3, [sp]
   185b8:	ldr	r2, [sp, #4]
   185bc:	subs	r3, r3, sl
   185c0:	sbc	r2, r2, fp
   185c4:	adds	r3, r3, #1
   185c8:	str	r3, [sp, #8]
   185cc:	adc	r3, r2, #0
   185d0:	str	r3, [sp, #12]
   185d4:	ldr	r3, [sp, #44]	; 0x2c
   185d8:	cmp	r3, #0
   185dc:	bne	18764 <__assert_fail@plt+0x677c>
   185e0:	ldrb	r3, [r5]
   185e4:	cmp	r3, #61	; 0x3d
   185e8:	bne	18854 <__assert_fail@plt+0x686c>
   185ec:	mov	r1, #42	; 0x2a
   185f0:	strb	r1, [r5]
   185f4:	ldr	r2, [r0]
   185f8:	ldrb	r3, [r2]
   185fc:	cmp	r3, #0
   18600:	beq	18618 <__assert_fail@plt+0x6630>
   18604:	cmp	r3, #45	; 0x2d
   18608:	strbeq	r1, [r2]
   1860c:	ldrb	r3, [r2, #1]!
   18610:	cmp	r3, #0
   18614:	bne	18604 <__assert_fail@plt+0x661c>
   18618:	ldrb	r3, [r6]
   1861c:	cmp	r3, #42	; 0x2a
   18620:	bne	18840 <__assert_fail@plt+0x6858>
   18624:	mov	r3, #61	; 0x3d
   18628:	strb	r3, [r6]
   1862c:	ldr	r2, [r7]
   18630:	ldrb	r3, [r2]
   18634:	cmp	r3, #0
   18638:	beq	18654 <__assert_fail@plt+0x666c>
   1863c:	mov	r1, #45	; 0x2d
   18640:	cmp	r3, #42	; 0x2a
   18644:	strbeq	r1, [r2]
   18648:	ldrb	r3, [r2, #1]!
   1864c:	cmp	r3, #0
   18650:	bne	18640 <__assert_fail@plt+0x6658>
   18654:	ldrd	r2, [sp]
   18658:	ldrd	sl, [sp, #8]
   1865c:	cmp	r2, sl
   18660:	sbcs	r3, r3, fp
   18664:	movlt	r2, #0
   18668:	movlt	r3, #0
   1866c:	strdlt	r2, [sp, #32]
   18670:	blt	186f4 <__assert_fail@plt+0x670c>
   18674:	ldrd	sl, [sp, #8]
   18678:	ldr	r2, [sp]
   1867c:	sub	lr, r6, #1
   18680:	sub	r3, sl, #-1073741823	; 0xc0000001
   18684:	add	r9, r7, r2, lsl #2
   18688:	lsl	r3, r3, #2
   1868c:	add	r0, r0, r3
   18690:	add	r8, r8, r3
   18694:	ldr	r3, [sp, #40]	; 0x28
   18698:	sub	r1, sl, #1
   1869c:	add	r1, r5, r1
   186a0:	sub	r9, r9, sl, lsl #2
   186a4:	sub	r2, r7, #4
   186a8:	sub	ip, r3, #4
   186ac:	ldr	r3, [r2, #4]!
   186b0:	str	r3, [r0, #4]!
   186b4:	ldrb	r3, [lr, #1]!
   186b8:	cmp	r3, #45	; 0x2d
   186bc:	moveq	r3, #43	; 0x2b
   186c0:	strb	r3, [r1, #1]!
   186c4:	ldr	r3, [ip, #4]!
   186c8:	cmp	r2, r9
   186cc:	str	r3, [r8, #4]!
   186d0:	bne	186ac <__assert_fail@plt+0x66c4>
   186d4:	ldrd	r8, [sp]
   186d8:	ldrd	r0, [sp, #8]
   186dc:	subs	r3, r8, r0
   186e0:	sbc	r2, r9, r1
   186e4:	adds	r3, r3, #1
   186e8:	str	r3, [sp, #32]
   186ec:	adc	r3, r2, #0
   186f0:	str	r3, [sp, #36]	; 0x24
   186f4:	ldr	r3, [r4, #80]	; 0x50
   186f8:	ldr	r2, [r4, #84]	; 0x54
   186fc:	adds	r1, r3, #1
   18700:	str	r1, [sp, #24]
   18704:	adc	r1, r2, #0
   18708:	str	r1, [sp, #28]
   1870c:	ldrd	r0, [sp, #24]
   18710:	ldrd	r8, [sp, #32]
   18714:	cmp	r1, r9
   18718:	cmpeq	r0, r8
   1871c:	bne	1882c <__assert_fail@plt+0x6844>
   18720:	ldr	r1, [sp]
   18724:	ldrd	r8, [r4, #88]	; 0x58
   18728:	add	r5, r5, r1
   1872c:	mov	r1, #94	; 0x5e
   18730:	str	r3, [r4, #88]	; 0x58
   18734:	str	r2, [r4, #92]	; 0x5c
   18738:	mov	r0, r7
   1873c:	strd	r8, [r4, #80]	; 0x50
   18740:	strb	r1, [r5, #1]
   18744:	bl	11ab4 <free@plt>
   18748:	ldr	r0, [sp, #40]	; 0x28
   1874c:	bl	11ab4 <free@plt>
   18750:	mov	r0, r6
   18754:	bl	11ab4 <free@plt>
   18758:	mov	r0, #1
   1875c:	add	sp, sp, #60	; 0x3c
   18760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18764:	ldr	r3, [r4, #80]	; 0x50
   18768:	ldrd	sl, [sp, #8]
   1876c:	adds	r3, r3, #1
   18770:	lsl	r1, r3, #2
   18774:	lsl	r2, sl, #2
   18778:	ldr	lr, [r7, r1]
   1877c:	adds	r9, sl, #1
   18780:	str	lr, [r0, r2]
   18784:	ldrb	r3, [r6, r3]
   18788:	ldr	lr, [sp, #12]
   1878c:	str	r9, [sp, #8]
   18790:	strb	r3, [r5, sl]
   18794:	ldr	r3, [sp, #40]	; 0x28
   18798:	adc	lr, lr, #0
   1879c:	str	lr, [sp, #12]
   187a0:	ldr	r3, [r3, r1]
   187a4:	str	r3, [r8, r2]
   187a8:	b	185e0 <__assert_fail@plt+0x65f8>
   187ac:	adds	r3, r3, #2
   187b0:	str	r3, [sp, #16]
   187b4:	adc	r3, r2, #0
   187b8:	str	r3, [sp, #20]
   187bc:	mov	r3, #1
   187c0:	str	r3, [sp, #44]	; 0x2c
   187c4:	b	184dc <__assert_fail@plt+0x64f4>
   187c8:	bl	11ab4 <free@plt>
   187cc:	mov	r0, r8
   187d0:	str	r7, [r4, #32]
   187d4:	bl	11ab4 <free@plt>
   187d8:	ldr	r3, [sp, #40]	; 0x28
   187dc:	mov	r0, r5
   187e0:	str	r3, [r4, #36]	; 0x24
   187e4:	bl	11ab4 <free@plt>
   187e8:	mov	r0, #0
   187ec:	str	r6, [r4, #40]	; 0x28
   187f0:	add	sp, sp, #60	; 0x3c
   187f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187f8:	ldr	ip, [sp]
   187fc:	ldr	lr, [sp, #4]
   18800:	subs	ip, ip, sl
   18804:	sbc	lr, lr, fp
   18808:	adds	ip, ip, #1
   1880c:	str	ip, [sp, #48]	; 0x30
   18810:	adc	ip, lr, #0
   18814:	str	ip, [sp, #52]	; 0x34
   18818:	b	18518 <__assert_fail@plt+0x6530>
   1881c:	mov	r2, #0
   18820:	mov	r3, #0
   18824:	strd	r2, [sp, #8]
   18828:	b	185d4 <__assert_fail@plt+0x65ec>
   1882c:	ldr	r3, [pc, #60]	; 18870 <__assert_fail@plt+0x6888>
   18830:	ldr	r2, [pc, #60]	; 18874 <__assert_fail@plt+0x688c>
   18834:	ldr	r1, [pc, #60]	; 18878 <__assert_fail@plt+0x6890>
   18838:	ldr	r0, [pc, #60]	; 1887c <__assert_fail@plt+0x6894>
   1883c:	bl	11fe8 <__assert_fail@plt>
   18840:	ldr	r3, [pc, #40]	; 18870 <__assert_fail@plt+0x6888>
   18844:	ldr	r2, [pc, #52]	; 18880 <__assert_fail@plt+0x6898>
   18848:	ldr	r1, [pc, #40]	; 18878 <__assert_fail@plt+0x6890>
   1884c:	ldr	r0, [pc, #48]	; 18884 <__assert_fail@plt+0x689c>
   18850:	bl	11fe8 <__assert_fail@plt>
   18854:	ldr	r3, [pc, #20]	; 18870 <__assert_fail@plt+0x6888>
   18858:	ldr	r2, [pc, #40]	; 18888 <__assert_fail@plt+0x68a0>
   1885c:	ldr	r1, [pc, #20]	; 18878 <__assert_fail@plt+0x6890>
   18860:	ldr	r0, [pc, #36]	; 1888c <__assert_fail@plt+0x68a4>
   18864:	bl	11fe8 <__assert_fail@plt>
   18868:	andeq	sl, r4, r0, lsl #7
   1886c:	andeq	r8, r4, r0, asr #4
   18870:	andeq	r3, r3, ip, lsr #25
   18874:	andeq	r0, r0, lr, ror #16
   18878:	ldrdeq	r3, [r3], -r0
   1887c:	andeq	r3, r3, ip, lsl #30
   18880:	andeq	r0, r0, r2, ror #16
   18884:	strdeq	r3, [r3], -r8
   18888:	andeq	r0, r0, sl, asr r8
   1888c:	andeq	r3, r3, r4, ror #29
   18890:	ldr	r3, [pc, #8]	; 188a0 <__assert_fail@plt+0x68b8>
   18894:	add	r0, r3, r0, lsl #2
   18898:	ldr	r0, [r0, #24]
   1889c:	bx	lr
   188a0:	andeq	sl, r4, r0, lsl #7
   188a4:	cmp	r0, #3
   188a8:	ldrne	r3, [pc, #12]	; 188bc <__assert_fail@plt+0x68d4>
   188ac:	addne	r3, r3, r0, lsl #2
   188b0:	ldrne	r0, [r3, #52]	; 0x34
   188b4:	moveq	r0, #0
   188b8:	bx	lr
   188bc:	andeq	sl, r4, r0, lsl #7
   188c0:	ldr	r3, [pc, #12]	; 188d4 <__assert_fail@plt+0x68ec>
   188c4:	ldrb	r0, [r3]
   188c8:	cmp	r0, #0
   188cc:	ldrbne	r0, [r3, #1]
   188d0:	bx	lr
   188d4:			; <UNDEFINED> instruction: 0x0004a7b0
   188d8:	ldr	r3, [pc, #12]	; 188ec <__assert_fail@plt+0x6904>
   188dc:	ldrb	r0, [r3]
   188e0:	cmp	r0, #0
   188e4:	ldrbne	r0, [r3, #1]
   188e8:	bx	lr
   188ec:	andeq	sl, r4, r4, asr #15
   188f0:	ldr	r3, [pc, #4]	; 188fc <__assert_fail@plt+0x6914>
   188f4:	ldrd	r0, [r3, #64]	; 0x40
   188f8:	bx	lr
   188fc:	andeq	sl, r4, r0, lsl #7
   18900:	ldr	r3, [pc, #4]	; 1890c <__assert_fail@plt+0x6924>
   18904:	ldrd	r0, [r3, #80]	; 0x50
   18908:	bx	lr
   1890c:	andeq	sl, r4, r0, lsl #7
   18910:	ldr	r3, [pc, #4]	; 1891c <__assert_fail@plt+0x6934>
   18914:	ldrd	r0, [r3, #72]	; 0x48
   18918:	bx	lr
   1891c:	andeq	sl, r4, r0, lsl #7
   18920:	ldr	r3, [pc, #4]	; 1892c <__assert_fail@plt+0x6944>
   18924:	ldrd	r0, [r3, #88]	; 0x58
   18928:	bx	lr
   1892c:	andeq	sl, r4, r0, lsl #7
   18930:	ldr	r3, [pc, #4]	; 1893c <__assert_fail@plt+0x6954>
   18934:	ldrd	r0, [r3, #8]
   18938:	bx	lr
   1893c:	andeq	r8, r4, r0, asr #4
   18940:	ldr	r3, [pc, #4]	; 1894c <__assert_fail@plt+0x6964>
   18944:	ldrd	r0, [r3, #128]	; 0x80
   18948:	bx	lr
   1894c:	andeq	sl, r4, r0, lsl #7
   18950:	ldr	r3, [pc, #4]	; 1895c <__assert_fail@plt+0x6974>
   18954:	ldrd	r0, [r3, #136]	; 0x88
   18958:	bx	lr
   1895c:	andeq	sl, r4, r0, lsl #7
   18960:	ldr	r3, [pc, #8]	; 18970 <__assert_fail@plt+0x6988>
   18964:	ldr	r3, [r3, #36]	; 0x24
   18968:	ldr	r0, [r3, r0, lsl #2]
   1896c:	bx	lr
   18970:	andeq	sl, r4, r0, lsl #7
   18974:	ldr	r3, [pc, #8]	; 18984 <__assert_fail@plt+0x699c>
   18978:	ldr	r3, [r3, #40]	; 0x28
   1897c:	ldrb	r0, [r3, r0]
   18980:	bx	lr
   18984:	andeq	sl, r4, r0, lsl #7
   18988:	ldr	r3, [pc, #8]	; 18998 <__assert_fail@plt+0x69b0>
   1898c:	ldr	r3, [r3, #32]
   18990:	ldr	r0, [r3, r0, lsl #2]
   18994:	bx	lr
   18998:	andeq	sl, r4, r0, lsl #7
   1899c:	ldr	r1, [pc, #76]	; 189f0 <__assert_fail@plt+0x6a08>
   189a0:	mov	r3, r2
   189a4:	push	{r4, lr}
   189a8:	ldr	r2, [r1, #36]	; 0x24
   189ac:	ldr	r1, [r1, #32]
   189b0:	ldr	r2, [r2, r0, lsl #2]
   189b4:	ldr	r0, [r1, r0, lsl #2]
   189b8:	cmp	r2, #0
   189bc:	addne	r1, r0, r2
   189c0:	moveq	r4, r2
   189c4:	ldrbne	r4, [r1, #-1]
   189c8:	mov	r1, #1
   189cc:	subne	r4, r4, #10
   189d0:	clzne	r4, r4
   189d4:	lsrne	r4, r4, #5
   189d8:	bl	11c1c <fwrite@plt>
   189dc:	cmp	r0, #0
   189e0:	beq	189ec <__assert_fail@plt+0x6a04>
   189e4:	mov	r0, r4
   189e8:	pop	{r4, pc}
   189ec:	bl	1fadc <__assert_fail@plt+0xdaf4>
   189f0:	andeq	sl, r4, r0, lsl #7
   189f4:	ldr	r3, [pc, #3928]	; 19954 <__assert_fail@plt+0x796c>
   189f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189fc:	sub	sp, sp, #436	; 0x1b4
   18a00:	ldr	r4, [pc, #3920]	; 19958 <__assert_fail@plt+0x7970>
   18a04:	ldr	r3, [r3]
   18a08:	str	r0, [sp, #24]
   18a0c:	str	r3, [sp, #428]	; 0x1ac
   18a10:	str	r1, [sp, #52]	; 0x34
   18a14:	bl	17e30 <__assert_fail@plt+0x5e48>
   18a18:	ldrd	r6, [r4, #8]
   18a1c:	cmp	r6, #0
   18a20:	sbcs	r3, r7, #0
   18a24:	blt	18a78 <__assert_fail@plt+0x6a90>
   18a28:	ldr	r5, [pc, #3884]	; 1995c <__assert_fail@plt+0x7974>
   18a2c:	b	18a50 <__assert_fail@plt+0x6a68>
   18a30:	ldr	r3, [r4, #24]
   18a34:	ldr	r2, [r4, #28]
   18a38:	subs	r6, r3, #1
   18a3c:	sbc	r7, r2, #0
   18a40:	cmp	r6, #0
   18a44:	sbcs	r3, r7, #0
   18a48:	strd	r6, [r4, #8]
   18a4c:	blt	18a78 <__assert_fail@plt+0x6a90>
   18a50:	ldrd	r2, [r4, #16]
   18a54:	cmp	r3, r7
   18a58:	cmpeq	r2, r6
   18a5c:	beq	18a30 <__assert_fail@plt+0x6a48>
   18a60:	ldr	r3, [r5, #32]
   18a64:	ldr	r0, [r3, r6, lsl #2]
   18a68:	bl	11ab4 <free@plt>
   18a6c:	ldr	r3, [r4, #8]
   18a70:	ldr	r2, [r4, #12]
   18a74:	b	18a38 <__assert_fail@plt+0x6a50>
   18a78:	mvn	r3, #0
   18a7c:	mvn	r2, #0
   18a80:	cmp	r7, r3
   18a84:	cmpeq	r6, r2
   18a88:	bne	1b1a8 <__assert_fail@plt+0x91c0>
   18a8c:	ldr	r5, [pc, #3784]	; 1995c <__assert_fail@plt+0x7974>
   18a90:	strd	r6, [r4, #16]
   18a94:	ldr	r0, [r5, #144]	; 0x90
   18a98:	cmp	r0, #0
   18a9c:	beq	18aac <__assert_fail@plt+0x6ac4>
   18aa0:	bl	11ab4 <free@plt>
   18aa4:	mov	r3, #0
   18aa8:	str	r3, [r5, #144]	; 0x90
   18aac:	ldr	r0, [sp, #24]
   18ab0:	ldrd	r2, [r4]
   18ab4:	sub	r1, r0, #4
   18ab8:	clz	r1, r1
   18abc:	lsr	r1, r1, #5
   18ac0:	str	r1, [sp, #56]	; 0x38
   18ac4:	cmp	r0, #1
   18ac8:	orreq	r1, r1, #1
   18acc:	cmp	r1, #0
   18ad0:	str	r1, [sp, #48]	; 0x30
   18ad4:	strd	r2, [r5, #96]	; 0x60
   18ad8:	ldr	r0, [r5, #8]
   18adc:	bne	18bac <__assert_fail@plt+0x6bc4>
   18ae0:	ldr	r3, [sp, #24]
   18ae4:	cmp	r3, #5
   18ae8:	beq	18b5c <__assert_fail@plt+0x6b74>
   18aec:	bl	11b38 <ftell@plt>
   18af0:	mov	r3, #0
   18af4:	mov	r2, #0
   18af8:	strd	r2, [r5, #136]	; 0x88
   18afc:	strd	r2, [r5, #128]	; 0x80
   18b00:	mov	r8, r0
   18b04:	bl	17a2c <__assert_fail@plt+0x5a44>
   18b08:	sub	r3, r0, #1
   18b0c:	cmn	r3, #3
   18b10:	bhi	18e64 <__assert_fail@plt+0x6e7c>
   18b14:	ldr	r3, [pc, #3652]	; 19960 <__assert_fail@plt+0x7978>
   18b18:	str	r3, [sp, #16]
   18b1c:	ldr	r0, [r3]
   18b20:	ldrb	r3, [r0]
   18b24:	sub	r3, r3, #48	; 0x30
   18b28:	cmp	r3, #9
   18b2c:	bls	18e84 <__assert_fail@plt+0x6e9c>
   18b30:	ldrd	r2, [r5]
   18b34:	mov	r0, #0
   18b38:	str	r8, [r5, #112]	; 0x70
   18b3c:	strd	r2, [r5, #120]	; 0x78
   18b40:	ldr	r3, [pc, #3596]	; 19954 <__assert_fail@plt+0x796c>
   18b44:	ldr	r2, [sp, #428]	; 0x1ac
   18b48:	ldr	r3, [r3]
   18b4c:	cmp	r2, r3
   18b50:	bne	1b1a4 <__assert_fail@plt+0x91bc>
   18b54:	add	sp, sp, #436	; 0x1b4
   18b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b5c:	bl	11b38 <ftell@plt>
   18b60:	mov	r7, r0
   18b64:	bl	17a2c <__assert_fail@plt+0x5a44>
   18b68:	sub	r3, r0, #5
   18b6c:	cmn	r3, #7
   18b70:	bhi	19194 <__assert_fail@plt+0x71ac>
   18b74:	ldr	r3, [pc, #3556]	; 19960 <__assert_fail@plt+0x7978>
   18b78:	mov	r2, #4
   18b7c:	ldr	r1, [pc, #3552]	; 19964 <__assert_fail@plt+0x797c>
   18b80:	ldr	r6, [r3]
   18b84:	str	r3, [sp, #16]
   18b88:	mov	r0, r6
   18b8c:	bl	11f94 <strncmp@plt>
   18b90:	cmp	r0, #0
   18b94:	beq	19c50 <__assert_fail@plt+0x7c68>
   18b98:	ldrd	r2, [r5]
   18b9c:	str	r7, [r5, #112]	; 0x70
   18ba0:	ldr	r0, [sp, #48]	; 0x30
   18ba4:	strd	r2, [r5, #120]	; 0x78
   18ba8:	b	18b40 <__assert_fail@plt+0x6b58>
   18bac:	bl	11b38 <ftell@plt>
   18bb0:	mov	r8, r0
   18bb4:	bl	17a2c <__assert_fail@plt+0x5a44>
   18bb8:	sub	r3, r0, #9
   18bbc:	cmn	r3, #11
   18bc0:	bhi	18e64 <__assert_fail@plt+0x6e7c>
   18bc4:	ldr	r3, [pc, #3476]	; 19960 <__assert_fail@plt+0x7978>
   18bc8:	mov	r2, #8
   18bcc:	ldr	r1, [pc, #3476]	; 19968 <__assert_fail@plt+0x7980>
   18bd0:	ldr	r9, [r3]
   18bd4:	str	r3, [sp, #16]
   18bd8:	mov	r0, r9
   18bdc:	bl	11f94 <strncmp@plt>
   18be0:	subs	r3, r0, #0
   18be4:	str	r3, [sp, #160]	; 0xa0
   18be8:	bne	18b30 <__assert_fail@plt+0x6b48>
   18bec:	ldrb	r3, [r9]
   18bf0:	cmp	r3, #42	; 0x2a
   18bf4:	bne	18c04 <__assert_fail@plt+0x6c1c>
   18bf8:	ldrb	r3, [r9, #1]!
   18bfc:	cmp	r3, #42	; 0x2a
   18c00:	beq	18bf8 <__assert_fail@plt+0x6c10>
   18c04:	cmp	r3, #32
   18c08:	beq	1a70c <__assert_fail@plt+0x8724>
   18c0c:	ldr	r3, [r5]
   18c10:	ldr	r2, [r5, #4]
   18c14:	adds	r3, r3, #1
   18c18:	mov	r0, #0
   18c1c:	adc	r2, r2, #0
   18c20:	mov	r1, #0
   18c24:	str	r3, [r5, #152]	; 0x98
   18c28:	str	r2, [r5, #156]	; 0x9c
   18c2c:	mov	r3, r1
   18c30:	mov	r2, r0
   18c34:	mov	r9, r3
   18c38:	mov	fp, r3
   18c3c:	strd	r2, [sp, #120]	; 0x78
   18c40:	str	r3, [sp, #192]	; 0xc0
   18c44:	str	r3, [sp, #200]	; 0xc8
   18c48:	strd	r2, [sp, #8]
   18c4c:	strd	r2, [sp, #128]	; 0x80
   18c50:	strd	r2, [sp, #72]	; 0x48
   18c54:	ldrd	r2, [r4, #8]
   18c58:	strd	r6, [sp, #176]	; 0xb0
   18c5c:	strd	r6, [sp, #144]	; 0x90
   18c60:	strd	r2, [sp, #64]	; 0x40
   18c64:	ldrd	r2, [r5, #96]	; 0x60
   18c68:	strd	r6, [sp, #112]	; 0x70
   18c6c:	strd	r6, [sp, #240]	; 0xf0
   18c70:	ldr	r7, [sp, #16]
   18c74:	mov	r8, r0
   18c78:	mov	sl, r0
   18c7c:	strd	r2, [sp, #88]	; 0x58
   18c80:	ldr	r3, [sp, #48]	; 0x30
   18c84:	mov	ip, #0
   18c88:	strd	r0, [sp, #136]	; 0x88
   18c8c:	str	ip, [sp, #204]	; 0xcc
   18c90:	str	r0, [sp, #188]	; 0xbc
   18c94:	str	r0, [sp, #196]	; 0xc4
   18c98:	str	ip, [sp, #168]	; 0xa8
   18c9c:	str	ip, [sp, #184]	; 0xb8
   18ca0:	str	r3, [sp, #96]	; 0x60
   18ca4:	strd	sl, [sp, #80]	; 0x50
   18ca8:	strd	r8, [sp, #208]	; 0xd0
   18cac:	ldrd	r2, [sp, #64]	; 0x40
   18cb0:	ldrd	r0, [sp, #88]	; 0x58
   18cb4:	cmp	r2, r0
   18cb8:	sbcs	r3, r3, r1
   18cbc:	bge	1ad40 <__assert_fail@plt+0x8d58>
   18cc0:	bl	17a2c <__assert_fail@plt+0x5a44>
   18cc4:	cmn	r0, #1
   18cc8:	mov	r2, r0
   18ccc:	beq	19c34 <__assert_fail@plt+0x7c4c>
   18cd0:	cmp	r0, #0
   18cd4:	ldrd	r0, [r4, #8]
   18cd8:	strd	r0, [sp, #64]	; 0x40
   18cdc:	bne	18d38 <__assert_fail@plt+0x6d50>
   18ce0:	ldrd	r2, [sp, #80]	; 0x50
   18ce4:	mov	ip, r2
   18ce8:	orrs	r3, ip, r3
   18cec:	ldr	r3, [sp, #96]	; 0x60
   18cf0:	moveq	r3, #0
   18cf4:	cmp	r3, #0
   18cf8:	bne	1afc8 <__assert_fail@plt+0x8fe0>
   18cfc:	ldr	r3, [r5, #96]	; 0x60
   18d00:	ldr	r2, [r5, #100]	; 0x64
   18d04:	subs	r3, r3, r0
   18d08:	str	r3, [sp, #104]	; 0x68
   18d0c:	sbc	r3, r2, r1
   18d10:	str	r3, [sp, #108]	; 0x6c
   18d14:	ldrd	r2, [sp, #104]	; 0x68
   18d18:	cmp	r2, #4
   18d1c:	sbcs	r3, r3, #0
   18d20:	bge	1b100 <__assert_fail@plt+0x9118>
   18d24:	ldr	r2, [pc, #3136]	; 1996c <__assert_fail@plt+0x7984>
   18d28:	ldr	r3, [r7]
   18d2c:	ldr	r0, [r2]
   18d30:	mov	r2, #3
   18d34:	str	r0, [r3]
   18d38:	ldrd	r8, [sp, #64]	; 0x40
   18d3c:	ldrd	r0, [r4]
   18d40:	adds	r3, r8, #1
   18d44:	str	r3, [sp, #32]
   18d48:	adc	r3, r9, #0
   18d4c:	str	r3, [sp, #36]	; 0x24
   18d50:	ldrd	r8, [sp, #32]
   18d54:	cmp	r9, r1
   18d58:	cmpeq	r8, r0
   18d5c:	strd	r8, [r4, #8]
   18d60:	beq	1b22c <__assert_fail@plt+0x9244>
   18d64:	ldrd	r8, [sp, #32]
   18d68:	cmp	r8, r0
   18d6c:	sbcs	r3, r9, r1
   18d70:	bge	1b218 <__assert_fail@plt+0x9230>
   18d74:	ldr	r3, [r7]
   18d78:	ldrd	sl, [sp, #32]
   18d7c:	ldr	r6, [r5, #36]	; 0x24
   18d80:	ldrb	lr, [r3]
   18d84:	ldr	r9, [r5, #32]
   18d88:	ldr	r1, [r5, #40]	; 0x28
   18d8c:	lsl	r3, sl, #2
   18d90:	mov	ip, #0
   18d94:	strb	lr, [r1, sl]
   18d98:	str	ip, [r6, r3]
   18d9c:	str	ip, [r9, r3]
   18da0:	ldr	fp, [r7]
   18da4:	add	ip, r6, r3
   18da8:	mov	r8, r6
   18dac:	ldrb	lr, [fp]
   18db0:	mov	r6, ip
   18db4:	add	ip, r9, r3
   18db8:	mov	r0, sl
   18dbc:	mov	sl, ip
   18dc0:	sub	ip, lr, #9
   18dc4:	cmp	ip, #36	; 0x24
   18dc8:	ldrls	pc, [pc, ip, lsl #2]
   18dcc:	b	199b4 <__assert_fail@plt+0x79cc>
   18dd0:	andeq	r9, r1, ip, asr #13
   18dd4:	andeq	r9, r1, ip, asr #13
   18dd8:			; <UNDEFINED> instruction: 0x000199b4
   18ddc:			; <UNDEFINED> instruction: 0x000199b4
   18de0:			; <UNDEFINED> instruction: 0x000199b4
   18de4:			; <UNDEFINED> instruction: 0x000199b4
   18de8:			; <UNDEFINED> instruction: 0x000199b4
   18dec:			; <UNDEFINED> instruction: 0x000199b4
   18df0:			; <UNDEFINED> instruction: 0x000199b4
   18df4:			; <UNDEFINED> instruction: 0x000199b4
   18df8:			; <UNDEFINED> instruction: 0x000199b4
   18dfc:			; <UNDEFINED> instruction: 0x000199b4
   18e00:			; <UNDEFINED> instruction: 0x000199b4
   18e04:			; <UNDEFINED> instruction: 0x000199b4
   18e08:			; <UNDEFINED> instruction: 0x000199b4
   18e0c:			; <UNDEFINED> instruction: 0x000199b4
   18e10:			; <UNDEFINED> instruction: 0x000199b4
   18e14:			; <UNDEFINED> instruction: 0x000199b4
   18e18:			; <UNDEFINED> instruction: 0x000199b4
   18e1c:			; <UNDEFINED> instruction: 0x000199b4
   18e20:			; <UNDEFINED> instruction: 0x000199b4
   18e24:			; <UNDEFINED> instruction: 0x000199b4
   18e28:			; <UNDEFINED> instruction: 0x000199b4
   18e2c:	andeq	r9, r1, ip, ror #15
   18e30:	strdeq	r9, [r1], -r8
   18e34:			; <UNDEFINED> instruction: 0x000199b4
   18e38:			; <UNDEFINED> instruction: 0x000199b4
   18e3c:			; <UNDEFINED> instruction: 0x000199b4
   18e40:			; <UNDEFINED> instruction: 0x000199b4
   18e44:			; <UNDEFINED> instruction: 0x000199b4
   18e48:			; <UNDEFINED> instruction: 0x000199b4
   18e4c:			; <UNDEFINED> instruction: 0x000199b4
   18e50:			; <UNDEFINED> instruction: 0x000199b4
   18e54:	andeq	r9, r1, r4, lsl #9
   18e58:	strdeq	r9, [r1], -r8
   18e5c:			; <UNDEFINED> instruction: 0x000199b4
   18e60:			; <UNDEFINED> instruction: 0x000191b4
   18e64:	ldrd	r2, [r5]
   18e68:	cmn	r0, #1
   18e6c:	movne	r0, #0
   18e70:	moveq	r0, #1
   18e74:	rsb	r0, r0, #0
   18e78:	str	r8, [r5, #112]	; 0x70
   18e7c:	strd	r2, [r5, #120]	; 0x78
   18e80:	b	18b40 <__assert_fail@plt+0x6b58>
   18e84:	ldr	r1, [pc, #2800]	; 1997c <__assert_fail@plt+0x7994>
   18e88:	bl	17ce8 <__assert_fail@plt+0x5d00>
   18e8c:	ldrb	r3, [r0]
   18e90:	cmp	r3, #44	; 0x2c
   18e94:	beq	1a92c <__assert_fail@plt+0x8944>
   18e98:	ldrd	r8, [r5, #64]	; 0x40
   18e9c:	subs	r3, r3, #97	; 0x61
   18ea0:	ldr	r2, [sp, #48]	; 0x30
   18ea4:	movne	r3, #1
   18ea8:	str	r3, [r5, #80]	; 0x50
   18eac:	str	r2, [r5, #84]	; 0x54
   18eb0:	mvn	r1, #0
   18eb4:	subs	r3, r1, r3
   18eb8:	str	r3, [sp, #72]	; 0x48
   18ebc:	mvn	r3, #-2147483648	; 0x80000000
   18ec0:	sbc	r3, r3, r2
   18ec4:	str	r3, [sp, #76]	; 0x4c
   18ec8:	ldrd	r2, [sp, #72]	; 0x48
   18ecc:	cmp	r8, r2
   18ed0:	sbcs	r3, r9, r3
   18ed4:	bge	1a9b0 <__assert_fail@plt+0x89c8>
   18ed8:	ldrb	r3, [r0]
   18edc:	cmp	r3, #97	; 0x61
   18ee0:	str	r3, [sp, #32]
   18ee4:	bne	18ef8 <__assert_fail@plt+0x6f10>
   18ee8:	adds	r3, r8, #1
   18eec:	adc	r2, r9, #0
   18ef0:	str	r2, [r5, #68]	; 0x44
   18ef4:	str	r3, [r5, #64]	; 0x40
   18ef8:	add	r0, r0, #1
   18efc:	add	r1, sp, #312	; 0x138
   18f00:	bl	17ce8 <__assert_fail@plt+0x5d00>
   18f04:	ldrb	r3, [r0]
   18f08:	cmp	r3, #44	; 0x2c
   18f0c:	beq	1a968 <__assert_fail@plt+0x8980>
   18f10:	add	r3, sp, #312	; 0x138
   18f14:	ldrd	r0, [r3]
   18f18:	add	r3, sp, #320	; 0x140
   18f1c:	mov	r8, r0
   18f20:	mov	r9, r1
   18f24:	strd	r0, [r3]
   18f28:	ldr	r3, [sp, #32]
   18f2c:	cmp	r3, #100	; 0x64
   18f30:	strdne	r0, [sp, #96]	; 0x60
   18f34:	bne	18f54 <__assert_fail@plt+0x6f6c>
   18f38:	adds	r3, r0, #1
   18f3c:	str	r3, [sp, #96]	; 0x60
   18f40:	adc	r3, r1, #0
   18f44:	str	r3, [sp, #100]	; 0x64
   18f48:	ldrd	r2, [sp, #96]	; 0x60
   18f4c:	add	r1, sp, #312	; 0x138
   18f50:	strd	r2, [r1]
   18f54:	ldrd	r6, [sp, #96]	; 0x60
   18f58:	mvn	r1, #0
   18f5c:	subs	r2, r8, r6
   18f60:	sbc	r0, r9, r7
   18f64:	adds	r3, r2, #1
   18f68:	adc	r2, r0, #0
   18f6c:	subs	r1, r1, r3
   18f70:	mvn	r0, #-2147483648	; 0x80000000
   18f74:	str	r1, [sp, #80]	; 0x50
   18f78:	sbc	r1, r0, r2
   18f7c:	str	r1, [sp, #84]	; 0x54
   18f80:	ldrd	r0, [sp, #80]	; 0x50
   18f84:	strd	r6, [r5, #72]	; 0x48
   18f88:	str	r2, [r5, #92]	; 0x5c
   18f8c:	cmp	r6, r0
   18f90:	sbcs	r1, r7, r1
   18f94:	str	r3, [r5, #88]	; 0x58
   18f98:	bge	1a9b0 <__assert_fail@plt+0x89c8>
   18f9c:	mvn	ip, #1
   18fa0:	subs	ip, ip, r3
   18fa4:	str	ip, [sp, #88]	; 0x58
   18fa8:	mvn	ip, #-2147483648	; 0x80000000
   18fac:	sbc	ip, ip, r2
   18fb0:	str	ip, [sp, #92]	; 0x5c
   18fb4:	ldrd	r0, [r5, #80]	; 0x50
   18fb8:	ldrd	r6, [sp, #88]	; 0x58
   18fbc:	cmp	r0, r6
   18fc0:	sbcs	ip, r1, r7
   18fc4:	bge	1a9b0 <__assert_fail@plt+0x89c8>
   18fc8:	adds	r3, r3, r0
   18fcc:	adc	r2, r2, r1
   18fd0:	adds	r0, r3, #1
   18fd4:	adc	r1, r2, #0
   18fd8:	adds	r3, r3, #2
   18fdc:	str	r3, [sp, #8]
   18fe0:	adc	r3, r2, #0
   18fe4:	str	r3, [sp, #12]
   18fe8:	strd	r0, [r4, #8]
   18fec:	ldrd	r6, [sp, #8]
   18ff0:	b	19000 <__assert_fail@plt+0x7018>
   18ff4:	bl	17b9c <__assert_fail@plt+0x5bb4>
   18ff8:	cmp	r0, #0
   18ffc:	beq	19c3c <__assert_fail@plt+0x7c54>
   19000:	ldrd	r2, [r4]
   19004:	cmp	r6, r2
   19008:	sbcs	r3, r7, r3
   1900c:	bge	18ff4 <__assert_fail@plt+0x700c>
   19010:	ldr	r8, [sp, #16]
   19014:	add	r3, sp, #332	; 0x14c
   19018:	str	r3, [sp, #24]
   1901c:	mov	r0, r3
   19020:	ldrd	r2, [r5, #64]	; 0x40
   19024:	ldr	r6, [r8]
   19028:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1902c:	ldr	r1, [r5, #80]	; 0x50
   19030:	ldr	r2, [r5, #64]	; 0x40
   19034:	ldr	r3, [r5, #68]	; 0x44
   19038:	adds	r2, r2, r1
   1903c:	mov	r7, r0
   19040:	ldr	r0, [r5, #84]	; 0x54
   19044:	adc	r3, r3, r0
   19048:	subs	r2, r2, #1
   1904c:	sbc	r3, r3, #0
   19050:	add	r0, sp, #356	; 0x164
   19054:	bl	1f490 <__assert_fail@plt+0xd4a8>
   19058:	ldr	r3, [pc, #2320]	; 19970 <__assert_fail@plt+0x7988>
   1905c:	mvn	r2, #0
   19060:	mov	r1, #1
   19064:	str	r7, [sp]
   19068:	str	r0, [sp, #4]
   1906c:	mov	r0, r6
   19070:	bl	11dcc <__sprintf_chk@plt>
   19074:	ldr	r6, [r8]
   19078:	mov	r0, r6
   1907c:	bl	11d78 <strlen@plt>
   19080:	ldr	r3, [r5, #36]	; 0x24
   19084:	ldr	r7, [r5, #32]
   19088:	str	r0, [r3]
   1908c:	mov	r0, r6
   19090:	bl	1f758 <__assert_fail@plt+0xd770>
   19094:	cmp	r0, #0
   19098:	str	r0, [r7]
   1909c:	beq	19c3c <__assert_fail@plt+0x7c54>
   190a0:	ldr	r3, [r5, #40]	; 0x28
   190a4:	mov	r2, #42	; 0x2a
   190a8:	strb	r2, [r3]
   190ac:	ldrd	r2, [r5, #80]	; 0x50
   190b0:	cmp	r2, #1
   190b4:	sbcs	r3, r3, #0
   190b8:	blt	1aa6c <__assert_fail@plt+0x8a84>
   190bc:	mov	r8, #1
   190c0:	mov	r9, #0
   190c4:	mov	r7, #45	; 0x2d
   190c8:	b	19128 <__assert_fail@plt+0x7140>
   190cc:	ldr	r3, [r5, #36]	; 0x24
   190d0:	sub	r6, r6, r0
   190d4:	add	r0, r1, #2
   190d8:	str	r6, [r3, fp, lsl #2]
   190dc:	mov	r1, r6
   190e0:	ldr	sl, [r5, #32]
   190e4:	bl	1f700 <__assert_fail@plt+0xd718>
   190e8:	cmp	r6, #0
   190ec:	str	r0, [sl, fp, lsl #2]
   190f0:	beq	19104 <__assert_fail@plt+0x711c>
   190f4:	ldr	r3, [r5, #32]
   190f8:	ldr	r3, [r3, fp, lsl #2]
   190fc:	cmp	r3, #0
   19100:	beq	1ad0c <__assert_fail@plt+0x8d24>
   19104:	ldr	r3, [r5, #40]	; 0x28
   19108:	adds	r8, r8, #1
   1910c:	adc	r9, r9, #0
   19110:	strb	r7, [r3, fp]
   19114:	ldrd	r2, [r5, #80]	; 0x50
   19118:	add	fp, fp, #1
   1911c:	cmp	r2, r8
   19120:	sbcs	r3, r3, r9
   19124:	blt	1aa70 <__assert_fail@plt+0x8a88>
   19128:	bl	17a2c <__assert_fail@plt+0x5a44>
   1912c:	mov	fp, r8
   19130:	str	r8, [sp, #8]
   19134:	cmn	r0, #1
   19138:	mov	r6, r0
   1913c:	beq	1a900 <__assert_fail@plt+0x8918>
   19140:	cmp	r0, #0
   19144:	beq	1b080 <__assert_fail@plt+0x9098>
   19148:	ldr	r3, [sp, #16]
   1914c:	ldr	r1, [r3]
   19150:	ldrb	r3, [r1]
   19154:	cmp	r3, #60	; 0x3c
   19158:	bne	1b068 <__assert_fail@plt+0x9080>
   1915c:	ldrb	r3, [r1, #1]
   19160:	cmp	r3, #32
   19164:	cmpne	r3, #9
   19168:	bne	1b068 <__assert_fail@plt+0x9080>
   1916c:	ldrd	r2, [r5, #80]	; 0x50
   19170:	cmp	r9, r3
   19174:	cmpeq	r8, r2
   19178:	movne	r0, #2
   1917c:	bne	190cc <__assert_fail@plt+0x70e4>
   19180:	bl	1777c <__assert_fail@plt+0x5794>
   19184:	ldr	r3, [sp, #16]
   19188:	ldr	r1, [r3]
   1918c:	add	r0, r0, #2
   19190:	b	190cc <__assert_fail@plt+0x70e4>
   19194:	ldrd	r2, [r5]
   19198:	cmn	r0, #1
   1919c:	movne	r0, #0
   191a0:	moveq	r0, #1
   191a4:	rsb	r0, r0, #0
   191a8:	str	r7, [r5, #112]	; 0x70
   191ac:	strd	r2, [r5, #120]	; 0x78
   191b0:	b	18b40 <__assert_fail@plt+0x6b58>
   191b4:	ldrb	ip, [fp, #1]
   191b8:	cmp	ip, #45	; 0x2d
   191bc:	bne	19604 <__assert_fail@plt+0x761c>
   191c0:	ldrd	r8, [sp, #112]	; 0x70
   191c4:	mvn	r3, #0
   191c8:	mvn	r2, #0
   191cc:	cmp	r9, r3
   191d0:	cmpeq	r8, r2
   191d4:	ldrdeq	r2, [sp, #72]	; 0x48
   191d8:	strdeq	r2, [sp, #112]	; 0x70
   191dc:	ldrd	r2, [sp, #80]	; 0x50
   191e0:	orrs	r3, r2, r3
   191e4:	bne	19234 <__assert_fail@plt+0x724c>
   191e8:	ldr	r3, [r5, #80]	; 0x50
   191ec:	ldr	r2, [r5, #84]	; 0x54
   191f0:	adds	r3, r3, #1
   191f4:	add	r1, r1, r0
   191f8:	str	r3, [sp, #288]	; 0x120
   191fc:	adc	r3, r2, #0
   19200:	str	r3, [sp, #292]	; 0x124
   19204:	add	r3, sp, #288	; 0x120
   19208:	ldrb	r1, [r1, #-1]
   1920c:	ldrd	r2, [r3]
   19210:	sub	r1, r1, #10
   19214:	clz	r1, r1
   19218:	lsr	r1, r1, #5
   1921c:	adds	r2, r2, r1
   19220:	ldrd	r0, [sp, #32]
   19224:	adc	r3, r3, #0
   19228:	cmp	r1, r3
   1922c:	cmpeq	r0, r2
   19230:	beq	1aed0 <__assert_fail@plt+0x8ee8>
   19234:	ldrd	r2, [sp, #32]
   19238:	cmp	r3, #0
   1923c:	cmpeq	r2, #1
   19240:	bne	1b2d0 <__assert_fail@plt+0x92e8>
   19244:	ldrd	r2, [r5, #80]	; 0x50
   19248:	ldrd	r0, [sp, #240]	; 0xf0
   1924c:	strd	r2, [sp, #128]	; 0x80
   19250:	strd	r0, [sp, #144]	; 0x90
   19254:	strd	r0, [sp, #112]	; 0x70
   19258:	adds	r1, r2, #1
   1925c:	str	r1, [sp, #80]	; 0x50
   19260:	adc	r1, r3, #0
   19264:	str	r1, [sp, #84]	; 0x54
   19268:	adds	r1, r2, #2
   1926c:	adc	r3, r3, #0
   19270:	str	r1, [sp, #208]	; 0xd0
   19274:	ldrd	r0, [sp, #80]	; 0x50
   19278:	str	r3, [sp, #212]	; 0xd4
   1927c:	ldr	r3, [sp, #48]	; 0x30
   19280:	strd	r0, [r4, #8]
   19284:	str	r3, [sp, #204]	; 0xcc
   19288:	ldr	r0, [r5, #8]
   1928c:	bl	11b38 <ftell@plt>
   19290:	ldr	r3, [r7]
   19294:	ldr	fp, [r4, #8]
   19298:	str	r3, [sp, #8]
   1929c:	str	r0, [sp, #160]	; 0xa0
   192a0:	mov	r0, r3
   192a4:	bl	11d78 <strlen@plt>
   192a8:	ldr	r3, [r5]
   192ac:	ldr	r1, [r5, #36]	; 0x24
   192b0:	str	r3, [sp, #196]	; 0xc4
   192b4:	ldr	r3, [r5, #4]
   192b8:	ldr	r9, [r5, #32]
   192bc:	str	r3, [sp, #200]	; 0xc8
   192c0:	ldr	r3, [sp, #8]
   192c4:	str	r0, [r1, fp, lsl #2]
   192c8:	mov	r0, r3
   192cc:	bl	1f758 <__assert_fail@plt+0xd770>
   192d0:	cmp	r0, #0
   192d4:	str	r0, [r9, fp, lsl #2]
   192d8:	beq	19c1c <__assert_fail@plt+0x7c34>
   192dc:	ldr	r2, [r5, #40]	; 0x28
   192e0:	ldr	r3, [r4, #8]
   192e4:	mov	r1, #61	; 0x3d
   192e8:	strb	r1, [r2, r3]
   192ec:	ldr	r0, [r7]
   192f0:	ldrb	r3, [r0]
   192f4:	sub	r2, r3, #48	; 0x30
   192f8:	cmp	r3, #0
   192fc:	cmpne	r2, #9
   19300:	bls	19318 <__assert_fail@plt+0x7330>
   19304:	ldrb	r3, [r0, #1]!
   19308:	sub	r2, r3, #48	; 0x30
   1930c:	cmp	r3, #0
   19310:	cmpne	r2, #9
   19314:	bhi	19304 <__assert_fail@plt+0x731c>
   19318:	ldr	r1, [pc, #1632]	; 19980 <__assert_fail@plt+0x7998>
   1931c:	bl	17ce8 <__assert_fail@plt+0x5d00>
   19320:	ldrb	r3, [r0]
   19324:	cmp	r3, #44	; 0x2c
   19328:	beq	1a264 <__assert_fail@plt+0x827c>
   1932c:	ldrd	r2, [r5, #72]	; 0x48
   19330:	add	r1, sp, #256	; 0x100
   19334:	strd	r2, [r1]
   19338:	orrs	r1, r2, r3
   1933c:	beq	1ad24 <__assert_fail@plt+0x8d3c>
   19340:	mvn	r0, #1
   19344:	mvn	r1, #-2147483648	; 0x80000000
   19348:	add	ip, sp, #296	; 0x128
   1934c:	mov	r8, #1
   19350:	strd	r0, [ip]
   19354:	mov	r9, #0
   19358:	mov	r0, #1
   1935c:	mov	r1, #0
   19360:	add	ip, sp, #256	; 0x100
   19364:	strd	r8, [r5, #88]	; 0x58
   19368:	strd	r0, [ip]
   1936c:	add	r1, sp, #296	; 0x128
   19370:	ldrd	r0, [r1]
   19374:	cmp	r2, r0
   19378:	sbcs	r3, r3, r1
   1937c:	bge	1a9b0 <__assert_fail@plt+0x89c8>
   19380:	ldrd	r0, [r4, #8]
   19384:	mvn	r3, #0
   19388:	mvn	r2, #-2147483648	; 0x80000000
   1938c:	subs	r3, r3, r0
   19390:	str	r3, [sp, #280]	; 0x118
   19394:	sbc	r3, r2, r1
   19398:	str	r3, [sp, #284]	; 0x11c
   1939c:	add	ip, sp, #280	; 0x118
   193a0:	add	r3, sp, #256	; 0x100
   193a4:	ldrd	r8, [ip]
   193a8:	ldrd	r2, [r3]
   193ac:	strd	r0, [sp, #64]	; 0x40
   193b0:	cmp	r2, r8
   193b4:	sbcs	ip, r3, r9
   193b8:	bge	1a9b0 <__assert_fail@plt+0x89c8>
   193bc:	adds	ip, r0, r2
   193c0:	adc	r3, r1, r3
   193c4:	str	ip, [sp, #88]	; 0x58
   193c8:	str	r3, [sp, #92]	; 0x5c
   193cc:	mov	lr, r2
   193d0:	ldrd	r2, [sp, #88]	; 0x58
   193d4:	mov	r8, r7
   193d8:	adds	r1, r2, #1
   193dc:	str	r1, [sp, #272]	; 0x110
   193e0:	strd	r2, [r5, #96]	; 0x60
   193e4:	adc	r1, r3, #0
   193e8:	add	r3, sp, #272	; 0x110
   193ec:	str	r1, [sp, #276]	; 0x114
   193f0:	ldrd	r6, [r3]
   193f4:	b	19404 <__assert_fail@plt+0x741c>
   193f8:	bl	17b9c <__assert_fail@plt+0x5bb4>
   193fc:	cmp	r0, #0
   19400:	beq	19c34 <__assert_fail@plt+0x7c4c>
   19404:	ldrd	r2, [r4]
   19408:	cmp	r6, r2
   1940c:	sbcs	r3, r7, r3
   19410:	bge	193f8 <__assert_fail@plt+0x7410>
   19414:	ldrd	r0, [r5, #88]	; 0x58
   19418:	ldrd	r2, [sp, #120]	; 0x78
   1941c:	mov	r7, r8
   19420:	cmp	r1, r3
   19424:	cmpeq	r0, r2
   19428:	beq	1afa4 <__assert_fail@plt+0x8fbc>
   1942c:	ldrd	r2, [r5, #128]	; 0x80
   19430:	ldrd	r8, [sp, #72]	; 0x48
   19434:	orr	r3, r9, r3
   19438:	orr	r2, r8, r2
   1943c:	orrs	r3, r2, r3
   19440:	movne	r3, #1
   19444:	moveq	r3, #0
   19448:	cmp	r1, #0
   1944c:	cmpeq	r0, #1
   19450:	movne	r3, #1
   19454:	cmp	r3, #0
   19458:	beq	1b02c <__assert_fail@plt+0x9044>
   1945c:	ldrd	r2, [sp, #32]
   19460:	str	r8, [sp, #188]	; 0xbc
   19464:	str	r9, [sp, #192]	; 0xc0
   19468:	strd	r2, [sp, #8]
   1946c:	mov	r3, #0
   19470:	str	r3, [sp, #96]	; 0x60
   19474:	mov	r2, #0
   19478:	mov	r3, #0
   1947c:	strd	r2, [sp, #72]	; 0x48
   19480:	b	18cac <__assert_fail@plt+0x6cc4>
   19484:	mov	r2, #8
   19488:	ldr	r1, [pc, #1240]	; 19968 <__assert_fail@plt+0x7980>
   1948c:	mov	r0, fp
   19490:	str	r3, [sp, #72]	; 0x48
   19494:	bl	11f94 <strncmp@plt>
   19498:	ldr	r3, [sp, #72]	; 0x48
   1949c:	cmp	r0, #0
   194a0:	beq	1b0d0 <__assert_fail@plt+0x90e8>
   194a4:	ldrd	r0, [sp, #32]
   194a8:	orrs	r2, r0, r1
   194ac:	bne	1b098 <__assert_fail@plt+0x90b0>
   194b0:	mov	r0, fp
   194b4:	str	r3, [sp, #64]	; 0x40
   194b8:	bl	11d78 <strlen@plt>
   194bc:	ldr	r3, [sp, #64]	; 0x40
   194c0:	str	r0, [r8, r3]
   194c4:	mov	r0, fp
   194c8:	bl	1f758 <__assert_fail@plt+0xd770>
   194cc:	ldr	r3, [sp, #64]	; 0x40
   194d0:	cmp	r0, #0
   194d4:	str	r0, [r9, r3]
   194d8:	beq	19c1c <__assert_fail@plt+0x7c34>
   194dc:	ldr	r9, [r7]
   194e0:	ldrb	r3, [r9]
   194e4:	sub	r2, r3, #48	; 0x30
   194e8:	cmp	r3, #0
   194ec:	cmpne	r2, #9
   194f0:	bls	19508 <__assert_fail@plt+0x7520>
   194f4:	ldrb	r3, [r9, #1]!
   194f8:	sub	r2, r3, #48	; 0x30
   194fc:	cmp	r3, #0
   19500:	cmpne	r2, #9
   19504:	bhi	194f4 <__assert_fail@plt+0x750c>
   19508:	mov	r2, #3
   1950c:	ldr	r1, [pc, #1120]	; 19974 <__assert_fail@plt+0x798c>
   19510:	mov	r0, r9
   19514:	bl	11f94 <strncmp@plt>
   19518:	cmp	r0, #0
   1951c:	beq	1a384 <__assert_fail@plt+0x839c>
   19520:	mov	r0, r9
   19524:	ldr	r1, [pc, #1104]	; 1997c <__assert_fail@plt+0x7994>
   19528:	bl	17ce8 <__assert_fail@plt+0x5d00>
   1952c:	ldrb	r3, [r0]
   19530:	cmp	r3, #44	; 0x2c
   19534:	beq	198c0 <__assert_fail@plt+0x78d8>
   19538:	ldrd	r2, [r5, #64]	; 0x40
   1953c:	orrs	r1, r2, r3
   19540:	beq	1ac10 <__assert_fail@plt+0x8c28>
   19544:	mov	r0, #1
   19548:	mov	r1, #0
   1954c:	mvn	r8, #1
   19550:	mvn	r9, #-2147483648	; 0x80000000
   19554:	strd	r0, [r5, #80]	; 0x50
   19558:	add	r0, sp, #264	; 0x108
   1955c:	strd	r8, [r0]
   19560:	mov	r8, #1
   19564:	mov	r9, #0
   19568:	strd	r8, [sp, #248]	; 0xf8
   1956c:	add	r0, sp, #264	; 0x108
   19570:	ldrd	r8, [r0]
   19574:	cmp	r2, r8
   19578:	sbcs	r3, r3, r9
   1957c:	movlt	r3, r1
   19580:	orrge	r3, r1, #1
   19584:	cmp	r3, #0
   19588:	bne	1a9b0 <__assert_fail@plt+0x89c8>
   1958c:	ldrd	r0, [sp, #248]	; 0xf8
   19590:	adds	r2, r0, #6
   19594:	adc	r3, r1, #0
   19598:	adds	ip, r0, #7
   1959c:	adc	r1, r1, #0
   195a0:	str	ip, [sp, #232]	; 0xe8
   195a4:	str	r1, [sp, #236]	; 0xec
   195a8:	mov	r8, r7
   195ac:	strd	r2, [r5, #96]	; 0x60
   195b0:	ldrd	r6, [sp, #232]	; 0xe8
   195b4:	b	195c4 <__assert_fail@plt+0x75dc>
   195b8:	bl	17b9c <__assert_fail@plt+0x5bb4>
   195bc:	cmp	r0, #0
   195c0:	beq	19c34 <__assert_fail@plt+0x7c4c>
   195c4:	ldrd	r2, [r4]
   195c8:	cmp	r6, r2
   195cc:	sbcs	r1, r7, r3
   195d0:	bge	195b8 <__assert_fail@plt+0x75d0>
   195d4:	strd	r2, [sp, #88]	; 0x58
   195d8:	strd	r2, [r5, #96]	; 0x60
   195dc:	ldrd	r2, [r4, #8]
   195e0:	mov	r7, r8
   195e4:	strd	r2, [sp, #64]	; 0x40
   195e8:	mov	r2, #0
   195ec:	mov	r3, #0
   195f0:	strd	r2, [sp, #72]	; 0x48
   195f4:	b	18cac <__assert_fail@plt+0x6cc4>
   195f8:	ldrb	ip, [fp, #1]
   195fc:	mov	r3, #0
   19600:	str	r3, [sp, #96]	; 0x60
   19604:	cmp	ip, #10
   19608:	sub	r9, r2, #1
   1960c:	add	r3, fp, #1
   19610:	beq	1a7ec <__assert_fail@plt+0x8804>
   19614:	cmp	ip, #9
   19618:	cmpne	ip, #32
   1961c:	bne	1a2e8 <__assert_fail@plt+0x8300>
   19620:	add	r3, fp, #2
   19624:	sub	r9, r9, #1
   19628:	ldrd	r0, [sp, #80]	; 0x50
   1962c:	orrs	r2, r0, r1
   19630:	mvn	r0, #0
   19634:	mvn	r1, #0
   19638:	bne	1a74c <__assert_fail@plt+0x8764>
   1963c:	ldrd	sl, [sp, #112]	; 0x70
   19640:	cmp	fp, r1
   19644:	cmpeq	sl, r0
   19648:	ldrdeq	r0, [sp, #72]	; 0x48
   1964c:	strdeq	r0, [sp, #112]	; 0x70
   19650:	cmp	r9, #1
   19654:	bls	1a7b0 <__assert_fail@plt+0x87c8>
   19658:	ldrd	r0, [r5, #80]	; 0x50
   1965c:	ldrd	sl, [sp, #32]
   19660:	cmp	fp, r1
   19664:	cmpeq	sl, r0
   19668:	beq	1a798 <__assert_fail@plt+0x87b0>
   1966c:	ldr	r2, [r4, #8]
   19670:	ldr	ip, [r5, #36]	; 0x24
   19674:	mov	r1, r9
   19678:	mov	r0, r3
   1967c:	str	r9, [ip, r2, lsl #2]
   19680:	str	r2, [sp, #64]	; 0x40
   19684:	ldr	r9, [r5, #32]
   19688:	bl	1f700 <__assert_fail@plt+0xd718>
   1968c:	ldr	r2, [sp, #64]	; 0x40
   19690:	str	r0, [r9, r2, lsl #2]
   19694:	ldrd	r2, [r4, #8]
   19698:	mov	r1, r3
   1969c:	ldr	r3, [r5, #32]
   196a0:	mov	r0, r2
   196a4:	ldr	r3, [r3, r0, lsl #2]
   196a8:	strd	r0, [sp, #64]	; 0x40
   196ac:	cmp	r3, #0
   196b0:	beq	1b04c <__assert_fail@plt+0x9064>
   196b4:	ldrd	r2, [r5, #96]	; 0x60
   196b8:	strd	r2, [sp, #88]	; 0x58
   196bc:	mov	r2, #0
   196c0:	mov	r3, #0
   196c4:	strd	r2, [sp, #72]	; 0x48
   196c8:	b	18cac <__assert_fail@plt+0x6cc4>
   196cc:	ldrd	r0, [sp, #80]	; 0x50
   196d0:	cmp	lr, #9
   196d4:	subeq	r2, r2, #1
   196d8:	mov	r3, r0
   196dc:	orrs	r3, r3, r1
   196e0:	ldr	r1, [sp, #96]	; 0x60
   196e4:	movne	r3, #1
   196e8:	moveq	r3, #0
   196ec:	tst	r3, r1
   196f0:	bne	1a240 <__assert_fail@plt+0x8258>
   196f4:	cmp	r2, #1
   196f8:	bls	1a834 <__assert_fail@plt+0x884c>
   196fc:	ldrd	r0, [sp, #80]	; 0x50
   19700:	orrs	r1, r0, r1
   19704:	ldrdeq	r0, [r5, #80]	; 0x50
   19708:	bne	1a25c <__assert_fail@plt+0x8274>
   1970c:	ldrd	r8, [sp, #32]
   19710:	cmp	r9, r1
   19714:	cmpeq	r8, r0
   19718:	beq	1ae40 <__assert_fail@plt+0x8e58>
   1971c:	str	r2, [r6]
   19720:	mov	r1, r2
   19724:	mov	r0, fp
   19728:	str	r3, [sp, #64]	; 0x40
   1972c:	bl	1f700 <__assert_fail@plt+0xd718>
   19730:	ldr	r3, [sp, #64]	; 0x40
   19734:	str	r0, [sl]
   19738:	ldrd	r0, [r4, #8]
   1973c:	ldr	r2, [r5, #32]
   19740:	strd	r0, [sp, #64]	; 0x40
   19744:	ldr	r2, [r2, r0, lsl #2]
   19748:	cmp	r2, #0
   1974c:	beq	1b04c <__assert_fail@plt+0x9064>
   19750:	ldr	r2, [r5, #80]	; 0x50
   19754:	ldr	r1, [r5, #84]	; 0x54
   19758:	adds	r2, r2, #1
   1975c:	str	r2, [sp, #216]	; 0xd8
   19760:	adc	r2, r1, #0
   19764:	str	r2, [sp, #220]	; 0xdc
   19768:	ldrd	r0, [sp, #216]	; 0xd8
   1976c:	ldrd	r8, [sp, #64]	; 0x40
   19770:	cmp	r1, r9
   19774:	cmpeq	r0, r8
   19778:	ldrd	r0, [r5, #96]	; 0x60
   1977c:	strd	r0, [sp, #88]	; 0x58
   19780:	beq	18cac <__assert_fail@plt+0x6cc4>
   19784:	ldr	r2, [sp, #72]	; 0x48
   19788:	ldrd	r0, [sp, #80]	; 0x50
   1978c:	adds	r2, r2, #1
   19790:	str	r2, [sp, #72]	; 0x48
   19794:	ldr	r2, [sp, #76]	; 0x4c
   19798:	adc	r2, r2, #0
   1979c:	str	r2, [sp, #76]	; 0x4c
   197a0:	orrs	r2, r0, r1
   197a4:	ldr	r2, [sp, #184]	; 0xb8
   197a8:	orr	r3, r3, r2
   197ac:	str	r3, [sp, #184]	; 0xb8
   197b0:	beq	1abf4 <__assert_fail@plt+0x8c0c>
   197b4:	ldr	r3, [sp, #136]	; 0x88
   197b8:	adds	r3, r3, #1
   197bc:	str	r3, [sp, #136]	; 0x88
   197c0:	ldr	r3, [sp, #140]	; 0x8c
   197c4:	adc	r3, r3, #0
   197c8:	str	r3, [sp, #140]	; 0x8c
   197cc:	ldr	r1, [sp, #64]	; 0x40
   197d0:	ldr	r3, [r5, #40]	; 0x28
   197d4:	mov	r2, #32
   197d8:	add	r3, r3, r1
   197dc:	ldr	r1, [sp, #48]	; 0x30
   197e0:	strb	r2, [r3]
   197e4:	str	r1, [sp, #168]	; 0xa8
   197e8:	b	18cac <__assert_fail@plt+0x6cc4>
   197ec:	ldrb	r1, [fp, #1]
   197f0:	sub	r2, r2, #1
   197f4:	add	r3, fp, #1
   197f8:	cmp	r1, #10
   197fc:	beq	1a354 <__assert_fail@plt+0x836c>
   19800:	cmp	r1, #9
   19804:	cmpne	r1, #32
   19808:	bne	1a364 <__assert_fail@plt+0x837c>
   1980c:	add	r3, fp, #2
   19810:	sub	r2, r2, #1
   19814:	ldr	r1, [sp, #72]	; 0x48
   19818:	adds	r1, r1, #1
   1981c:	str	r1, [sp, #72]	; 0x48
   19820:	ldr	r1, [sp, #76]	; 0x4c
   19824:	adc	r1, r1, #0
   19828:	str	r1, [sp, #76]	; 0x4c
   1982c:	ldrd	r0, [sp, #80]	; 0x50
   19830:	orrs	r1, r0, r1
   19834:	beq	1a8d8 <__assert_fail@plt+0x88f0>
   19838:	ldr	r1, [sp, #136]	; 0x88
   1983c:	adds	r1, r1, #1
   19840:	str	r1, [sp, #136]	; 0x88
   19844:	ldr	r1, [sp, #140]	; 0x8c
   19848:	adc	r1, r1, #0
   1984c:	cmp	r2, #1
   19850:	str	r1, [sp, #140]	; 0x8c
   19854:	bls	1a88c <__assert_fail@plt+0x88a4>
   19858:	ldrd	r0, [r5, #96]	; 0x60
   1985c:	ldrd	r8, [sp, #32]
   19860:	cmp	r9, r1
   19864:	cmpeq	r8, r0
   19868:	beq	1a86c <__assert_fail@plt+0x8884>
   1986c:	ldr	r9, [r4, #8]
   19870:	ldr	ip, [r5, #36]	; 0x24
   19874:	mov	r0, r3
   19878:	mov	r1, r2
   1987c:	str	r2, [ip, r9, lsl #2]
   19880:	ldr	fp, [r5, #32]
   19884:	bl	1f700 <__assert_fail@plt+0xd718>
   19888:	str	r0, [fp, r9, lsl #2]
   1988c:	ldrd	r2, [r4, #8]
   19890:	mov	r1, r3
   19894:	ldr	r3, [r5, #32]
   19898:	mov	r0, r2
   1989c:	ldr	r3, [r3, r0, lsl #2]
   198a0:	strd	r0, [sp, #64]	; 0x40
   198a4:	cmp	r3, #0
   198a8:	beq	1b04c <__assert_fail@plt+0x9064>
   198ac:	ldrd	r2, [r5, #96]	; 0x60
   198b0:	strd	r2, [sp, #88]	; 0x58
   198b4:	ldr	r3, [sp, #48]	; 0x30
   198b8:	str	r3, [sp, #168]	; 0xa8
   198bc:	b	18cac <__assert_fail@plt+0x6cc4>
   198c0:	ldrb	r3, [r0, #1]!
   198c4:	sub	r2, r3, #48	; 0x30
   198c8:	cmp	r3, #0
   198cc:	cmpne	r2, #9
   198d0:	bhi	198c0 <__assert_fail@plt+0x78d8>
   198d4:	ldr	r1, [pc, #212]	; 199b0 <__assert_fail@plt+0x79c8>
   198d8:	bl	17ce8 <__assert_fail@plt+0x5d00>
   198dc:	ldrd	r2, [r5, #64]	; 0x40
   198e0:	ldr	r0, [r5, #80]	; 0x50
   198e4:	mov	r1, #1
   198e8:	ldr	ip, [r5, #84]	; 0x54
   198ec:	subs	r1, r1, r2
   198f0:	rsc	lr, r3, #0
   198f4:	adds	r1, r1, r0
   198f8:	str	r1, [sp, #248]	; 0xf8
   198fc:	adc	r1, lr, ip
   19900:	str	r1, [sp, #252]	; 0xfc
   19904:	ldrd	r0, [sp, #248]	; 0xf8
   19908:	cmp	r0, #0
   1990c:	sbcs	ip, r1, #0
   19910:	strd	r0, [r5, #80]	; 0x50
   19914:	blt	1a9b0 <__assert_fail@plt+0x89c8>
   19918:	ldrd	r8, [sp, #248]	; 0xf8
   1991c:	mvn	r1, #0
   19920:	mvn	ip, #-2147483648	; 0x80000000
   19924:	subs	r1, r1, r8
   19928:	mvn	r0, #7
   1992c:	sbc	ip, ip, r9
   19930:	str	r1, [sp, #264]	; 0x108
   19934:	cmp	r0, r8
   19938:	mvn	r1, #-2147483648	; 0x80000000
   1993c:	sbcs	r1, r1, r9
   19940:	mov	lr, r9
   19944:	str	ip, [sp, #268]	; 0x10c
   19948:	movlt	r1, #1
   1994c:	movge	r1, #0
   19950:	b	1956c <__assert_fail@plt+0x7584>
   19954:	andeq	r7, r4, r8, lsl #30
   19958:	andeq	r8, r4, r0, asr #4
   1995c:	andeq	sl, r4, r0, lsl #7
   19960:	andeq	sl, r4, r0, ror r7
   19964:	andeq	r2, r3, r0, lsr #26
   19968:	andeq	r3, r3, r4, asr #30
   1996c:	andeq	r3, r3, r0, asr pc
   19970:	andeq	r4, r3, ip, asr #4
   19974:	andeq	r4, r3, r8
   19978:	andeq	r4, r3, r8, asr #1
   1997c:	andeq	sl, r4, r0, asr #7
   19980:	andeq	sl, r4, r8, asr #7
   19984:	andeq	r4, r3, ip, lsr #4
   19988:	andeq	r4, r3, ip, lsr r2
   1998c:	ldrdeq	sl, [r4], -r8
   19990:	ldrdeq	sl, [r4], -r8
   19994:	andeq	r4, r3, r8, ror #6
   19998:	andeq	r4, r3, r8, ror r3
   1999c:	andeq	r4, r3, r0, ror r3
   199a0:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   199a4:	andeq	sl, r4, r4, ror #13
   199a8:	andeq	r4, r3, ip, ror r0
   199ac:	andeq	r4, r3, ip, lsr #6
   199b0:	ldrdeq	sl, [r4], -r0
   199b4:	ldrd	sl, [sp, #80]	; 0x50
   199b8:	orrs	r3, sl, fp
   199bc:	ldr	r3, [sp, #96]	; 0x60
   199c0:	moveq	r3, #0
   199c4:	cmp	r3, #0
   199c8:	beq	1a9b0 <__assert_fail@plt+0x89c8>
   199cc:	ldrd	r2, [sp, #64]	; 0x40
   199d0:	cmp	sl, r2
   199d4:	sbcs	r1, fp, r3
   199d8:	ldr	r1, [sp, #196]	; 0xc4
   199dc:	strd	r2, [r4, #8]
   199e0:	str	r1, [r5]
   199e4:	ldr	r1, [sp, #200]	; 0xc8
   199e8:	str	r1, [r5, #4]
   199ec:	bge	19a24 <__assert_fail@plt+0x7a3c>
   199f0:	ldrd	r8, [sp, #64]	; 0x40
   199f4:	ldr	r7, [r5, #32]
   199f8:	add	r3, r8, #1
   199fc:	add	r6, r7, #4
   19a00:	add	r6, r6, sl, lsl #2
   19a04:	add	r7, r7, r3, lsl #2
   19a08:	ldr	r0, [r7, #-4]!
   19a0c:	bl	11ab4 <free@plt>
   19a10:	subs	r8, r8, #1
   19a14:	sbc	r9, r9, #0
   19a18:	cmp	r6, r7
   19a1c:	strd	r8, [r4, #8]
   19a20:	bne	19a08 <__assert_fail@plt+0x7a20>
   19a24:	ldr	r1, [sp, #160]	; 0xa0
   19a28:	mov	r2, #0
   19a2c:	ldr	r0, [r5, #8]
   19a30:	bl	20fd0 <__assert_fail@plt+0xefe8>
   19a34:	adds	r1, sl, #1
   19a38:	ldrd	r2, [r5, #96]	; 0x60
   19a3c:	str	r1, [sp, #8]
   19a40:	ldr	r1, [sp, #188]	; 0xbc
   19a44:	strd	r2, [r4, #8]
   19a48:	str	r1, [sp, #72]	; 0x48
   19a4c:	ldrd	r2, [r5, #88]	; 0x58
   19a50:	adc	r1, fp, #0
   19a54:	str	r1, [sp, #12]
   19a58:	mov	r8, #1
   19a5c:	ldr	r1, [sp, #192]	; 0xc0
   19a60:	mov	r9, #0
   19a64:	str	r1, [sp, #76]	; 0x4c
   19a68:	strd	r2, [sp, #128]	; 0x80
   19a6c:	ldrd	r6, [sp, #144]	; 0x90
   19a70:	ldrd	r0, [sp, #72]	; 0x48
   19a74:	mov	r3, r6
   19a78:	and	r3, r3, r7
   19a7c:	adds	r3, r3, #1
   19a80:	movne	r3, #1
   19a84:	cmp	r6, r0
   19a88:	sbcs	r2, r7, r1
   19a8c:	ldrd	r6, [sp, #176]	; 0xb0
   19a90:	mvn	r1, #0
   19a94:	movge	r3, #0
   19a98:	andlt	r3, r3, #1
   19a9c:	mvn	r0, #0
   19aa0:	cmp	r7, r1
   19aa4:	cmpeq	r6, r0
   19aa8:	beq	1aa24 <__assert_fail@plt+0x8a3c>
   19aac:	ldrd	r0, [sp, #112]	; 0x70
   19ab0:	mov	r2, r0
   19ab4:	and	r2, r2, r1
   19ab8:	adds	r2, r2, #1
   19abc:	movne	r2, #1
   19ac0:	cmp	r0, r6
   19ac4:	sbcs	r1, r1, r7
   19ac8:	movge	r2, #0
   19acc:	andlt	r2, r2, #1
   19ad0:	cmp	r2, #0
   19ad4:	strdeq	r6, [sp, #112]	; 0x70
   19ad8:	cmp	r3, #0
   19adc:	ldrd	r2, [sp, #112]	; 0x70
   19ae0:	strd	r2, [r5, #128]	; 0x80
   19ae4:	beq	1aa5c <__assert_fail@plt+0x8a74>
   19ae8:	ldrd	r2, [sp, #144]	; 0x90
   19aec:	strd	r2, [r5, #136]	; 0x88
   19af0:	ldr	r3, [sp, #24]
   19af4:	cmp	r3, #1
   19af8:	beq	1a9b4 <__assert_fail@plt+0x89cc>
   19afc:	ldrd	r0, [sp, #128]	; 0x80
   19b00:	orrs	r3, r0, r1
   19b04:	beq	1a4e8 <__assert_fail@plt+0x8500>
   19b08:	ldrd	r6, [sp, #8]
   19b0c:	adds	r3, r0, r6
   19b10:	str	r3, [sp, #40]	; 0x28
   19b14:	adc	r3, r1, r7
   19b18:	str	r3, [sp, #44]	; 0x2c
   19b1c:	ldr	r3, [sp, #40]	; 0x28
   19b20:	strd	r6, [r4, #24]
   19b24:	subs	r2, r3, #1
   19b28:	ldr	r3, [sp, #44]	; 0x2c
   19b2c:	sbc	r3, r3, #0
   19b30:	cmp	r0, #1
   19b34:	sbcs	r1, r1, #0
   19b38:	strd	r2, [r4, #16]
   19b3c:	movlt	r2, r6
   19b40:	movlt	r3, r7
   19b44:	ldrd	r0, [r4, #8]
   19b48:	strdlt	r2, [sp, #56]	; 0x38
   19b4c:	blt	1a3fc <__assert_fail@plt+0x8414>
   19b50:	ldr	r3, [sp, #8]
   19b54:	ldr	r2, [r5, #40]	; 0x28
   19b58:	sub	r3, r3, #1
   19b5c:	add	r3, r2, r3
   19b60:	str	r2, [sp, #48]	; 0x30
   19b64:	str	r3, [sp, #32]
   19b68:	ldrd	r6, [r5, #32]
   19b6c:	ldrd	r2, [sp, #40]	; 0x28
   19b70:	strd	sl, [sp, #24]
   19b74:	strd	r0, [sp, #16]
   19b78:	strd	r2, [sp, #56]	; 0x38
   19b7c:	ldrd	r2, [sp, #16]
   19b80:	cmp	r2, r8
   19b84:	sbcs	r3, r3, r9
   19b88:	blt	19c04 <__assert_fail@plt+0x7c1c>
   19b8c:	ldrd	r2, [sp, #24]
   19b90:	cmp	r3, r9
   19b94:	cmpeq	r2, r8
   19b98:	beq	19c04 <__assert_fail@plt+0x7c1c>
   19b9c:	ldr	r3, [sp, #48]	; 0x30
   19ba0:	mov	lr, r8
   19ba4:	add	r2, r3, r8
   19ba8:	ldrb	r3, [r2]
   19bac:	cmp	r3, #32
   19bb0:	beq	1a39c <__assert_fail@plt+0x83b4>
   19bb4:	ldr	r2, [sp, #48]	; 0x30
   19bb8:	adds	r3, r8, #1
   19bbc:	add	r3, r2, r3
   19bc0:	ldrd	sl, [sp, #24]
   19bc4:	ldrd	r0, [sp, #16]
   19bc8:	b	19bf0 <__assert_fail@plt+0x7c08>
   19bcc:	cmp	fp, r9
   19bd0:	cmpeq	sl, r8
   19bd4:	beq	19c04 <__assert_fail@plt+0x7c1c>
   19bd8:	mov	r2, r3
   19bdc:	mov	lr, r8
   19be0:	ldrb	ip, [r2]
   19be4:	add	r3, r3, #1
   19be8:	cmp	ip, #32
   19bec:	beq	1a394 <__assert_fail@plt+0x83ac>
   19bf0:	adds	r8, r8, #1
   19bf4:	adc	r9, r9, #0
   19bf8:	cmp	r0, r8
   19bfc:	sbcs	r2, r1, r9
   19c00:	bge	19bcc <__assert_fail@plt+0x7be4>
   19c04:	ldrd	r2, [r5, #152]	; 0x98
   19c08:	add	r0, sp, #332	; 0x14c
   19c0c:	bl	1f490 <__assert_fail@plt+0xd4a8>
   19c10:	mov	r1, r0
   19c14:	ldr	r0, [pc, #-676]	; 19978 <__assert_fail@plt+0x7990>
   19c18:	bl	1f558 <__assert_fail@plt+0xd570>
   19c1c:	ldr	r3, [r4, #8]
   19c20:	ldr	r2, [r4, #12]
   19c24:	subs	r3, r3, #1
   19c28:	sbc	r2, r2, #0
   19c2c:	str	r3, [r4, #8]
   19c30:	str	r2, [r4, #12]
   19c34:	mvn	r0, #0
   19c38:	b	18b40 <__assert_fail@plt+0x6b58>
   19c3c:	mvn	r2, #0
   19c40:	mvn	r3, #0
   19c44:	mvn	r0, #0
   19c48:	strd	r2, [r4, #8]
   19c4c:	b	18b40 <__assert_fail@plt+0x6b58>
   19c50:	add	r0, r6, #4
   19c54:	ldr	r1, [pc, #-736]	; 1997c <__assert_fail@plt+0x7994>
   19c58:	bl	17ce8 <__assert_fail@plt+0x5d00>
   19c5c:	ldrb	r3, [r0]
   19c60:	cmp	r3, #44	; 0x2c
   19c64:	beq	1ac68 <__assert_fail@plt+0x8c80>
   19c68:	mov	r2, #1
   19c6c:	mov	r3, #0
   19c70:	mvn	r6, #1
   19c74:	mvn	r7, #-2147483648	; 0x80000000
   19c78:	strd	r2, [r5, #80]	; 0x50
   19c7c:	strd	r6, [sp, #136]	; 0x88
   19c80:	ldrd	r2, [r5, #64]	; 0x40
   19c84:	ldrd	r6, [sp, #136]	; 0x88
   19c88:	cmp	r2, r6
   19c8c:	sbcs	r3, r3, r7
   19c90:	bge	1a9b0 <__assert_fail@plt+0x89c8>
   19c94:	ldrb	r3, [r0]
   19c98:	cmp	r3, #32
   19c9c:	ldrbeq	r3, [r0, #1]
   19ca0:	addeq	r0, r0, #1
   19ca4:	cmp	r3, #43	; 0x2b
   19ca8:	bne	1a9b0 <__assert_fail@plt+0x89c8>
   19cac:	add	r0, r0, #1
   19cb0:	ldr	r1, [pc, #-824]	; 19980 <__assert_fail@plt+0x7998>
   19cb4:	bl	17ce8 <__assert_fail@plt+0x5d00>
   19cb8:	ldrb	r3, [r0]
   19cbc:	mov	ip, r0
   19cc0:	cmp	r3, #44	; 0x2c
   19cc4:	beq	1ac38 <__assert_fail@plt+0x8c50>
   19cc8:	mov	r2, #1
   19ccc:	mov	r3, #0
   19cd0:	mvn	r0, #1
   19cd4:	mvn	r1, #-2147483648	; 0x80000000
   19cd8:	mov	r6, r2
   19cdc:	mov	r7, r3
   19ce0:	strd	r0, [sp, #128]	; 0x80
   19ce4:	strd	r2, [r5, #88]	; 0x58
   19ce8:	ldrd	r2, [r5, #72]	; 0x48
   19cec:	ldrd	r0, [sp, #128]	; 0x80
   19cf0:	cmp	r2, r0
   19cf4:	sbcs	r3, r3, r1
   19cf8:	bge	1a9b0 <__assert_fail@plt+0x89c8>
   19cfc:	ldrb	r3, [ip]
   19d00:	cmp	r3, #32
   19d04:	ldrbeq	r3, [ip, #1]
   19d08:	addeq	ip, ip, #1
   19d0c:	cmp	r3, #64	; 0x40
   19d10:	bne	1a9b0 <__assert_fail@plt+0x89c8>
   19d14:	ldrb	r3, [ip, #1]
   19d18:	cmp	r3, #64	; 0x40
   19d1c:	beq	1a310 <__assert_fail@plt+0x8328>
   19d20:	ldrd	r2, [r5, #80]	; 0x50
   19d24:	strd	r2, [sp, #8]
   19d28:	orrs	r3, r2, r3
   19d2c:	bne	19d48 <__assert_fail@plt+0x7d60>
   19d30:	ldr	r1, [r5, #64]	; 0x40
   19d34:	ldr	r0, [r5, #68]	; 0x44
   19d38:	adds	r1, r1, #1
   19d3c:	adc	r0, r0, #0
   19d40:	str	r1, [r5, #64]	; 0x40
   19d44:	str	r0, [r5, #68]	; 0x44
   19d48:	orrs	r3, r6, r7
   19d4c:	beq	1a224 <__assert_fail@plt+0x823c>
   19d50:	mvn	r1, #1
   19d54:	subs	r3, r1, r6
   19d58:	mvn	r1, #-2147483648	; 0x80000000
   19d5c:	str	r3, [sp, #120]	; 0x78
   19d60:	sbc	r3, r1, r7
   19d64:	str	r3, [sp, #124]	; 0x7c
   19d68:	ldrd	r2, [sp, #120]	; 0x78
   19d6c:	ldrd	r0, [sp, #8]
   19d70:	cmp	r0, r2
   19d74:	sbcs	r3, r1, r3
   19d78:	bge	1a9b0 <__assert_fail@plt+0x89c8>
   19d7c:	adds	r2, r0, r6
   19d80:	adc	r3, r1, r7
   19d84:	adds	r0, r2, #1
   19d88:	adc	r1, r3, #0
   19d8c:	adds	r8, r2, #2
   19d90:	strd	r0, [r5, #96]	; 0x60
   19d94:	adc	r9, r3, #0
   19d98:	b	19da8 <__assert_fail@plt+0x7dc0>
   19d9c:	bl	17b9c <__assert_fail@plt+0x5bb4>
   19da0:	cmp	r0, #0
   19da4:	beq	19c34 <__assert_fail@plt+0x7c4c>
   19da8:	ldrd	r2, [r4]
   19dac:	cmp	r8, r2
   19db0:	sbcs	r3, r9, r3
   19db4:	bge	19d9c <__assert_fail@plt+0x7db4>
   19db8:	ldr	r3, [r5, #84]	; 0x54
   19dbc:	ldr	r9, [r5, #80]	; 0x50
   19dc0:	mov	r2, r3
   19dc4:	str	r3, [sp, #8]
   19dc8:	ldr	r3, [r5, #88]	; 0x58
   19dcc:	adds	r8, r9, #1
   19dd0:	ldr	r1, [r5, #92]	; 0x5c
   19dd4:	adc	r2, r2, #0
   19dd8:	adds	ip, r3, r8
   19ddc:	adc	r1, r1, r2
   19de0:	str	r1, [r4, #12]
   19de4:	ldr	r1, [sp, #16]
   19de8:	ldrd	r2, [r5, #64]	; 0x40
   19dec:	add	r0, sp, #332	; 0x14c
   19df0:	str	ip, [r4, #8]
   19df4:	ldr	r6, [r1]
   19df8:	str	r0, [sp, #24]
   19dfc:	bl	1f490 <__assert_fail@plt+0xd4a8>
   19e00:	ldr	r1, [r5, #80]	; 0x50
   19e04:	ldr	r2, [r5, #64]	; 0x40
   19e08:	ldr	r3, [r5, #68]	; 0x44
   19e0c:	adds	r2, r2, r1
   19e10:	mov	r7, r0
   19e14:	ldr	r0, [r5, #84]	; 0x54
   19e18:	adc	r3, r3, r0
   19e1c:	subs	r2, r2, #1
   19e20:	sbc	r3, r3, #0
   19e24:	add	r0, sp, #356	; 0x164
   19e28:	bl	1f490 <__assert_fail@plt+0xd4a8>
   19e2c:	ldr	r3, [pc, #-1200]	; 19984 <__assert_fail@plt+0x799c>
   19e30:	mvn	r2, #0
   19e34:	str	r7, [sp]
   19e38:	mov	r1, #1
   19e3c:	str	r0, [sp, #4]
   19e40:	mov	r0, r6
   19e44:	bl	11dcc <__sprintf_chk@plt>
   19e48:	ldr	r1, [sp, #16]
   19e4c:	ldr	r6, [r1]
   19e50:	mov	r0, r6
   19e54:	bl	11d78 <strlen@plt>
   19e58:	ldr	r3, [r5, #36]	; 0x24
   19e5c:	ldr	r7, [r5, #32]
   19e60:	str	r0, [r3]
   19e64:	mov	r0, r6
   19e68:	bl	1f758 <__assert_fail@plt+0xd770>
   19e6c:	cmp	r0, #0
   19e70:	str	r0, [r7]
   19e74:	beq	19c3c <__assert_fail@plt+0x7c54>
   19e78:	ldr	r3, [r5, #40]	; 0x28
   19e7c:	ldr	r1, [sp, #16]
   19e80:	mov	r2, #42	; 0x2a
   19e84:	strb	r2, [r3]
   19e88:	ldr	r0, [sp, #24]
   19e8c:	ldrd	r2, [r5, #72]	; 0x48
   19e90:	ldr	r7, [r1]
   19e94:	bl	1f490 <__assert_fail@plt+0xd4a8>
   19e98:	ldr	r1, [r5, #88]	; 0x58
   19e9c:	ldr	r2, [r5, #72]	; 0x48
   19ea0:	ldr	r3, [r5, #76]	; 0x4c
   19ea4:	adds	r2, r2, r1
   19ea8:	mov	r6, r0
   19eac:	ldr	r0, [r5, #92]	; 0x5c
   19eb0:	adc	r3, r3, r0
   19eb4:	subs	r2, r2, #1
   19eb8:	sbc	r3, r3, #0
   19ebc:	add	r0, sp, #356	; 0x164
   19ec0:	bl	1f490 <__assert_fail@plt+0xd4a8>
   19ec4:	ldr	r3, [pc, #-1348]	; 19988 <__assert_fail@plt+0x79a0>
   19ec8:	mvn	r2, #0
   19ecc:	str	r6, [sp]
   19ed0:	mov	r1, #1
   19ed4:	lsl	r6, r8, #2
   19ed8:	str	r0, [sp, #4]
   19edc:	mov	r0, r7
   19ee0:	bl	11dcc <__sprintf_chk@plt>
   19ee4:	ldr	r1, [sp, #16]
   19ee8:	ldr	r7, [r1]
   19eec:	mov	r0, r7
   19ef0:	bl	11d78 <strlen@plt>
   19ef4:	ldrd	r2, [r5, #32]
   19ef8:	str	r2, [sp, #24]
   19efc:	str	r0, [r3, r6]
   19f00:	mov	r0, r7
   19f04:	bl	1f758 <__assert_fail@plt+0xd770>
   19f08:	ldr	r2, [sp, #24]
   19f0c:	cmp	r0, #0
   19f10:	str	r0, [r2, r6]
   19f14:	beq	1af90 <__assert_fail@plt+0x8fa8>
   19f18:	ldr	r1, [sp, #8]
   19f1c:	ldr	r2, [r5]
   19f20:	adds	sl, r9, #2
   19f24:	ldr	r3, [r5, #4]
   19f28:	adc	fp, r1, #0
   19f2c:	adds	r2, r2, #1
   19f30:	adc	r3, r3, #0
   19f34:	ldr	r0, [r5, #40]	; 0x28
   19f38:	mov	r6, #1
   19f3c:	mov	r7, #0
   19f40:	mvn	ip, #0
   19f44:	mov	lr, #61	; 0x3d
   19f48:	strd	r2, [r5, #152]	; 0x98
   19f4c:	mov	r3, #0
   19f50:	str	ip, [sp, #40]	; 0x28
   19f54:	str	ip, [r5, #128]	; 0x80
   19f58:	str	ip, [sp, #44]	; 0x2c
   19f5c:	str	ip, [r5, #132]	; 0x84
   19f60:	strb	lr, [r0, r8]
   19f64:	str	r3, [sp, #8]
   19f68:	str	r3, [sp, #24]
   19f6c:	ldrd	r2, [r5, #80]	; 0x50
   19f70:	cmp	r2, r6
   19f74:	sbcs	r3, r3, r7
   19f78:	bge	19f8c <__assert_fail@plt+0x7fa4>
   19f7c:	ldrd	r2, [r4, #8]
   19f80:	cmp	r2, sl
   19f84:	sbcs	r3, r3, fp
   19f88:	blt	1aeec <__assert_fail@plt+0x8f04>
   19f8c:	bl	17a2c <__assert_fail@plt+0x5a44>
   19f90:	subs	r8, r0, #0
   19f94:	bne	1a61c <__assert_fail@plt+0x8634>
   19f98:	ldr	r3, [r5, #96]	; 0x60
   19f9c:	ldr	r2, [r5, #100]	; 0x64
   19fa0:	subs	r3, r3, sl
   19fa4:	str	r3, [sp, #64]	; 0x40
   19fa8:	sbc	r3, r2, fp
   19fac:	str	r3, [sp, #68]	; 0x44
   19fb0:	ldrd	r2, [sp, #64]	; 0x40
   19fb4:	cmp	r2, #3
   19fb8:	sbcs	r3, r3, #0
   19fbc:	bge	1b100 <__assert_fail@plt+0x9118>
   19fc0:	ldr	r3, [sp, #16]
   19fc4:	mov	r8, #2
   19fc8:	ldr	r1, [r3]
   19fcc:	ldr	r3, [pc, #-1580]	; 199a8 <__assert_fail@plt+0x79c0>
   19fd0:	ldrh	r2, [r3]
   19fd4:	ldrb	r3, [r3, #2]
   19fd8:	strh	r2, [r1]
   19fdc:	strb	r3, [r1, #2]
   19fe0:	ldr	r3, [sp, #16]
   19fe4:	ldr	r0, [r3]
   19fe8:	ldrb	r9, [r0]
   19fec:	sub	r3, r9, #9
   19ff0:	cmp	r3, #1
   19ff4:	bls	1a0ac <__assert_fail@plt+0x80c4>
   19ff8:	sub	r8, r8, #1
   19ffc:	mov	r1, r8
   1a000:	add	r0, r0, #1
   1a004:	bl	1f700 <__assert_fail@plt+0xd718>
   1a008:	cmp	r8, #0
   1a00c:	clz	r3, r0
   1a010:	lsr	r3, r3, #5
   1a014:	moveq	r3, #0
   1a018:	cmp	r3, #0
   1a01c:	mov	r1, r0
   1a020:	bne	1a624 <__assert_fail@plt+0x863c>
   1a024:	sub	r3, r9, #32
   1a028:	cmp	r3, #29
   1a02c:	ldrls	pc, [pc, r3, lsl #2]
   1a030:	b	1b19c <__assert_fail@plt+0x91b4>
   1a034:	strheq	sl, [r1], -ip
   1a038:	muleq	r1, ip, r1
   1a03c:	muleq	r1, ip, r1
   1a040:	muleq	r1, ip, r1
   1a044:	muleq	r1, ip, r1
   1a048:	muleq	r1, ip, r1
   1a04c:	muleq	r1, ip, r1
   1a050:	muleq	r1, ip, r1
   1a054:	muleq	r1, ip, r1
   1a058:	muleq	r1, ip, r1
   1a05c:	muleq	r1, ip, r1
   1a060:	andeq	sl, r1, r8, lsl r2
   1a064:	muleq	r1, ip, r1
   1a068:	ldrdeq	sl, [r1], -r0
   1a06c:	muleq	r1, ip, r1
   1a070:	muleq	r1, ip, r1
   1a074:	muleq	r1, ip, r1
   1a078:	muleq	r1, ip, r1
   1a07c:	muleq	r1, ip, r1
   1a080:	muleq	r1, ip, r1
   1a084:	muleq	r1, ip, r1
   1a088:	muleq	r1, ip, r1
   1a08c:	muleq	r1, ip, r1
   1a090:	muleq	r1, ip, r1
   1a094:	muleq	r1, ip, r1
   1a098:	muleq	r1, ip, r1
   1a09c:	muleq	r1, ip, r1
   1a0a0:	muleq	r1, ip, r1
   1a0a4:	muleq	r1, ip, r1
   1a0a8:	strheq	sl, [r1], -ip
   1a0ac:	mov	r1, r8
   1a0b0:	bl	1f700 <__assert_fail@plt+0xd718>
   1a0b4:	subs	r1, r0, #0
   1a0b8:	beq	1a624 <__assert_fail@plt+0x863c>
   1a0bc:	ldrd	r2, [r5, #80]	; 0x50
   1a0c0:	cmp	r2, r6
   1a0c4:	sbcs	r0, r3, r7
   1a0c8:	blt	1b260 <__assert_fail@plt+0x9278>
   1a0cc:	ldr	r0, [sp, #8]
   1a0d0:	adds	r0, r0, #1
   1a0d4:	str	r0, [sp, #8]
   1a0d8:	ldr	r0, [sp, #24]
   1a0dc:	adc	r0, r0, #0
   1a0e0:	cmp	r3, r7
   1a0e4:	cmpeq	r2, r6
   1a0e8:	str	r0, [sp, #24]
   1a0ec:	beq	1a770 <__assert_fail@plt+0x8788>
   1a0f0:	add	r0, r5, #32
   1a0f4:	lsl	r3, r6, #2
   1a0f8:	ldm	r0, {r0, ip, lr}
   1a0fc:	mov	r9, #32
   1a100:	strb	r9, [lr, r6]
   1a104:	str	r1, [r0, r3]
   1a108:	str	r8, [ip, r3]
   1a10c:	adds	r3, r6, #1
   1a110:	adc	r2, r7, #0
   1a114:	mov	r0, r1
   1a118:	mov	r1, r8
   1a11c:	str	r3, [sp, #48]	; 0x30
   1a120:	str	r2, [sp, #32]
   1a124:	bl	1f700 <__assert_fail@plt+0xd718>
   1a128:	cmp	r8, #0
   1a12c:	ldr	r2, [sp, #32]
   1a130:	ldr	r3, [sp, #48]	; 0x30
   1a134:	mov	r1, r0
   1a138:	clz	r0, r0
   1a13c:	lsr	r0, r0, #5
   1a140:	moveq	r0, #0
   1a144:	cmp	r0, #0
   1a148:	bne	1af30 <__assert_fail@plt+0x8f48>
   1a14c:	mov	r9, #32
   1a150:	ldrd	r6, [r4, #8]
   1a154:	cmp	r6, sl
   1a158:	sbcs	r0, r7, fp
   1a15c:	blt	1b108 <__assert_fail@plt+0x9120>
   1a160:	cmp	r7, fp
   1a164:	cmpeq	r6, sl
   1a168:	beq	1a6d0 <__assert_fail@plt+0x86e8>
   1a16c:	ldr	r6, [r5, #40]	; 0x28
   1a170:	ldr	lr, [r5, #32]
   1a174:	ldr	ip, [r5, #36]	; 0x24
   1a178:	strb	r9, [r6, sl]
   1a17c:	lsl	r0, sl, #2
   1a180:	adds	sl, sl, #1
   1a184:	adc	fp, fp, #0
   1a188:	cmp	r9, #32
   1a18c:	str	r1, [lr, r0]
   1a190:	mov	r6, r3
   1a194:	mov	r7, r2
   1a198:	str	r8, [ip, r0]
   1a19c:	beq	19f6c <__assert_fail@plt+0x7f84>
   1a1a0:	ldrd	r2, [r5, #128]	; 0x80
   1a1a4:	ldrd	r0, [sp, #40]	; 0x28
   1a1a8:	cmp	r3, r1
   1a1ac:	cmpeq	r2, r0
   1a1b0:	ldreq	r3, [sp, #8]
   1a1b4:	streq	r3, [r5, #128]	; 0x80
   1a1b8:	ldreq	r3, [sp, #24]
   1a1bc:	streq	r3, [r5, #132]	; 0x84
   1a1c0:	mov	r3, #0
   1a1c4:	str	r3, [sp, #8]
   1a1c8:	str	r3, [sp, #24]
   1a1cc:	b	19f6c <__assert_fail@plt+0x7f84>
   1a1d0:	ldrd	r2, [r5, #80]	; 0x50
   1a1d4:	cmp	r2, r6
   1a1d8:	sbcs	r0, r3, r7
   1a1dc:	blt	1b1d4 <__assert_fail@plt+0x91ec>
   1a1e0:	cmp	r3, r7
   1a1e4:	cmpeq	r2, r6
   1a1e8:	beq	1abe0 <__assert_fail@plt+0x8bf8>
   1a1ec:	ldr	ip, [r5, #40]	; 0x28
   1a1f0:	ldr	r2, [r5, #32]
   1a1f4:	ldr	r3, [r5, #36]	; 0x24
   1a1f8:	lsl	r0, r6, #2
   1a1fc:	mov	lr, #45	; 0x2d
   1a200:	strb	lr, [ip, r6]
   1a204:	adds	r6, r6, #1
   1a208:	str	r1, [r2, r0]
   1a20c:	adc	r7, r7, #0
   1a210:	str	r8, [r3, r0]
   1a214:	b	1a1a0 <__assert_fail@plt+0x81b8>
   1a218:	mov	r3, r6
   1a21c:	mov	r2, r7
   1a220:	b	1a150 <__assert_fail@plt+0x8168>
   1a224:	ldr	r1, [r5, #72]	; 0x48
   1a228:	ldr	r0, [r5, #76]	; 0x4c
   1a22c:	adds	r1, r1, #1
   1a230:	adc	r0, r0, #0
   1a234:	str	r1, [r5, #72]	; 0x48
   1a238:	str	r0, [r5, #76]	; 0x4c
   1a23c:	b	19d50 <__assert_fail@plt+0x7d68>
   1a240:	ldr	r1, [sp, #184]	; 0xb8
   1a244:	ldr	r0, [sp, #56]	; 0x38
   1a248:	eor	r1, r1, #1
   1a24c:	orrs	r1, r0, r1
   1a250:	bne	1a308 <__assert_fail@plt+0x8320>
   1a254:	cmp	r2, #1
   1a258:	bls	1a834 <__assert_fail@plt+0x884c>
   1a25c:	ldrd	r0, [r5, #96]	; 0x60
   1a260:	b	1970c <__assert_fail@plt+0x7724>
   1a264:	ldrb	r3, [r0, #1]!
   1a268:	cmp	r3, #0
   1a26c:	beq	1a9b0 <__assert_fail@plt+0x89c8>
   1a270:	sub	r3, r3, #48	; 0x30
   1a274:	cmp	r3, #9
   1a278:	bhi	1a264 <__assert_fail@plt+0x827c>
   1a27c:	ldr	r1, [pc, #-2296]	; 1998c <__assert_fail@plt+0x79a4>
   1a280:	bl	17ce8 <__assert_fail@plt+0x5d00>
   1a284:	ldrd	r2, [r5, #72]	; 0x48
   1a288:	ldr	r0, [r5, #88]	; 0x58
   1a28c:	mov	r1, #1
   1a290:	ldr	ip, [r5, #92]	; 0x5c
   1a294:	subs	r1, r1, r2
   1a298:	rsc	lr, r3, #0
   1a29c:	adds	r1, r1, r0
   1a2a0:	str	r1, [sp, #256]	; 0x100
   1a2a4:	adc	r1, lr, ip
   1a2a8:	str	r1, [sp, #260]	; 0x104
   1a2ac:	add	r1, sp, #256	; 0x100
   1a2b0:	ldrd	r0, [r1]
   1a2b4:	cmp	r0, #0
   1a2b8:	sbcs	ip, r1, #0
   1a2bc:	strd	r0, [r5, #88]	; 0x58
   1a2c0:	blt	1a9b0 <__assert_fail@plt+0x89c8>
   1a2c4:	add	r0, sp, #256	; 0x100
   1a2c8:	mvn	r1, #0
   1a2cc:	ldrd	r8, [r0]
   1a2d0:	subs	r1, r1, r8
   1a2d4:	str	r1, [sp, #296]	; 0x128
   1a2d8:	mvn	r1, #-2147483648	; 0x80000000
   1a2dc:	sbc	r1, r1, r9
   1a2e0:	str	r1, [sp, #300]	; 0x12c
   1a2e4:	b	1936c <__assert_fail@plt+0x7384>
   1a2e8:	ldrd	r0, [sp, #80]	; 0x50
   1a2ec:	mov	r2, r0
   1a2f0:	orrs	r2, r2, r1
   1a2f4:	ldr	r2, [sp, #96]	; 0x60
   1a2f8:	moveq	r1, #0
   1a2fc:	movne	r1, r2
   1a300:	cmp	r1, #0
   1a304:	beq	19628 <__assert_fail@plt+0x7640>
   1a308:	ldrd	sl, [sp, #80]	; 0x50
   1a30c:	b	199cc <__assert_fail@plt+0x79e4>
   1a310:	ldrb	r3, [ip, #2]
   1a314:	cmp	r3, #32
   1a318:	bne	19d20 <__assert_fail@plt+0x7d38>
   1a31c:	add	r0, ip, #2
   1a320:	mov	r3, r0
   1a324:	str	r0, [r5, #144]	; 0x90
   1a328:	ldrb	r2, [r3, #1]!
   1a32c:	cmp	r2, #10
   1a330:	bne	1a328 <__assert_fail@plt+0x8340>
   1a334:	mov	r2, #0
   1a338:	strb	r2, [r3]
   1a33c:	bl	1f758 <__assert_fail@plt+0xd770>
   1a340:	cmp	r0, #0
   1a344:	str	r0, [r5, #144]	; 0x90
   1a348:	beq	19c34 <__assert_fail@plt+0x7c4c>
   1a34c:	ldrd	r6, [r5, #88]	; 0x58
   1a350:	b	19d20 <__assert_fail@plt+0x7d38>
   1a354:	ldr	r1, [pc, #-2488]	; 199a4 <__assert_fail@plt+0x79bc>
   1a358:	ldrb	r1, [r1]
   1a35c:	cmp	r1, #0
   1a360:	bne	1af18 <__assert_fail@plt+0x8f30>
   1a364:	ldrd	r0, [sp, #80]	; 0x50
   1a368:	mov	ip, r0
   1a36c:	orrs	r1, ip, r1
   1a370:	ldr	r1, [sp, #96]	; 0x60
   1a374:	moveq	r1, #0
   1a378:	cmp	r1, #0
   1a37c:	beq	19814 <__assert_fail@plt+0x782c>
   1a380:	b	1a308 <__assert_fail@plt+0x8320>
   1a384:	mov	r1, #2
   1a388:	mov	r0, r9
   1a38c:	bl	1f474 <__assert_fail@plt+0xd48c>
   1a390:	b	19520 <__assert_fail@plt+0x7538>
   1a394:	strd	sl, [sp, #24]
   1a398:	strd	r0, [sp, #16]
   1a39c:	ldrd	r0, [sp, #8]
   1a3a0:	ldr	ip, [r6, lr, lsl #2]
   1a3a4:	adds	r8, r8, #1
   1a3a8:	adc	r9, r9, #0
   1a3ac:	adds	r1, r0, #1
   1a3b0:	str	ip, [r6, r0, lsl #2]
   1a3b4:	str	r1, [sp, #8]
   1a3b8:	ldrb	r2, [r2]
   1a3bc:	ldr	r1, [sp, #32]
   1a3c0:	mov	r3, r0
   1a3c4:	strb	r2, [r1, #1]!
   1a3c8:	ldr	r2, [sp, #12]
   1a3cc:	str	r1, [sp, #32]
   1a3d0:	adc	r2, r2, #0
   1a3d4:	str	r2, [sp, #12]
   1a3d8:	ldrd	sl, [sp, #8]
   1a3dc:	ldrd	r0, [sp, #40]	; 0x28
   1a3e0:	ldr	r2, [r7, lr, lsl #2]
   1a3e4:	cmp	fp, r1
   1a3e8:	cmpeq	sl, r0
   1a3ec:	str	r2, [r7, r3, lsl #2]
   1a3f0:	bne	19b7c <__assert_fail@plt+0x7b94>
   1a3f4:	ldrd	sl, [sp, #24]
   1a3f8:	ldrd	r0, [sp, #16]
   1a3fc:	cmp	r0, r8
   1a400:	sbcs	r3, r1, r9
   1a404:	movge	r3, #1
   1a408:	movlt	r3, #0
   1a40c:	cmp	fp, r9
   1a410:	cmpeq	sl, r8
   1a414:	moveq	r3, #0
   1a418:	cmp	r3, #0
   1a41c:	beq	1a474 <__assert_fail@plt+0x848c>
   1a420:	ldr	r2, [r5, #40]	; 0x28
   1a424:	add	r3, r2, r8
   1a428:	ldrb	r3, [r3]
   1a42c:	cmp	r3, #32
   1a430:	addne	r2, r2, r8
   1a434:	bne	1a448 <__assert_fail@plt+0x8460>
   1a438:	b	19c04 <__assert_fail@plt+0x7c1c>
   1a43c:	ldrb	r3, [r2, #1]!
   1a440:	cmp	r3, #32
   1a444:	beq	19c04 <__assert_fail@plt+0x7c1c>
   1a448:	adds	r8, r8, #1
   1a44c:	adc	r9, r9, #0
   1a450:	cmp	r0, r8
   1a454:	sbcs	r3, r1, r9
   1a458:	movge	r3, #1
   1a45c:	movlt	r3, #0
   1a460:	cmp	fp, r9
   1a464:	cmpeq	sl, r8
   1a468:	moveq	r3, #0
   1a46c:	cmp	r3, #0
   1a470:	bne	1a43c <__assert_fail@plt+0x8454>
   1a474:	ldr	r3, [pc, #-2796]	; 19990 <__assert_fail@plt+0x79a8>
   1a478:	ldr	r3, [r3]
   1a47c:	tst	r3, #64	; 0x40
   1a480:	bne	1ac98 <__assert_fail@plt+0x8cb0>
   1a484:	adds	r3, r0, #1
   1a488:	str	r3, [sp, #224]	; 0xe0
   1a48c:	adc	r3, r1, #0
   1a490:	str	r3, [sp, #228]	; 0xe4
   1a494:	ldrd	r0, [sp, #224]	; 0xe0
   1a498:	cmp	fp, r9
   1a49c:	cmpeq	sl, r8
   1a4a0:	moveq	r3, #1
   1a4a4:	movne	r3, #0
   1a4a8:	cmp	r1, r9
   1a4ac:	cmpeq	r0, r8
   1a4b0:	moveq	r3, #1
   1a4b4:	cmp	r3, #0
   1a4b8:	beq	1b204 <__assert_fail@plt+0x921c>
   1a4bc:	ldrd	r0, [sp, #56]	; 0x38
   1a4c0:	ldrd	r6, [sp, #224]	; 0xe0
   1a4c4:	cmp	r1, fp
   1a4c8:	cmpeq	r0, sl
   1a4cc:	moveq	r3, #1
   1a4d0:	movne	r3, #0
   1a4d4:	cmp	r7, r1
   1a4d8:	cmpeq	r6, r0
   1a4dc:	moveq	r3, #1
   1a4e0:	cmp	r3, #0
   1a4e4:	beq	1b1f0 <__assert_fail@plt+0x9208>
   1a4e8:	ldr	r3, [sp, #52]	; 0x34
   1a4ec:	cmp	r3, #0
   1a4f0:	bne	1a914 <__assert_fail@plt+0x892c>
   1a4f4:	ldr	r1, [r4, #8]
   1a4f8:	ldr	r0, [r4, #12]
   1a4fc:	adds	ip, r1, #1
   1a500:	adc	r0, r0, #0
   1a504:	str	ip, [sp, #152]	; 0x98
   1a508:	str	r0, [sp, #156]	; 0x9c
   1a50c:	ldrd	r2, [r4]
   1a510:	ldrd	r6, [sp, #152]	; 0x98
   1a514:	cmp	r6, r2
   1a518:	sbcs	r3, r7, r3
   1a51c:	bge	1b2a4 <__assert_fail@plt+0x92bc>
   1a520:	ldr	r3, [r5, #40]	; 0x28
   1a524:	ldr	r2, [pc, #-2972]	; 19990 <__assert_fail@plt+0x79a8>
   1a528:	add	r1, r3, r1
   1a52c:	mov	r3, #94	; 0x5e
   1a530:	strb	r3, [r1, #1]
   1a534:	ldr	r3, [r2]
   1a538:	tst	r3, #2
   1a53c:	moveq	r0, #1
   1a540:	beq	18b40 <__assert_fail@plt+0x6b58>
   1a544:	ldrd	r2, [sp, #152]	; 0x98
   1a548:	cmp	r2, #0
   1a54c:	sbcs	r3, r3, #0
   1a550:	blt	1a784 <__assert_fail@plt+0x879c>
   1a554:	add	r3, sp, #332	; 0x14c
   1a558:	mov	r6, #0
   1a55c:	mov	r7, #0
   1a560:	str	r3, [sp, #24]
   1a564:	ldr	r9, [pc, #-3020]	; 199a0 <__assert_fail@plt+0x79b8>
   1a568:	ldr	fp, [pc, #-3036]	; 19994 <__assert_fail@plt+0x79ac>
   1a56c:	b	1a5b4 <__assert_fail@plt+0x85cc>
   1a570:	mov	r2, #2
   1a574:	mov	r1, #1
   1a578:	mov	r3, r8
   1a57c:	ldr	r0, [pc, #-3052]	; 19998 <__assert_fail@plt+0x79b0>
   1a580:	bl	11c1c <fwrite@plt>
   1a584:	ldr	r2, [r9]
   1a588:	mov	r0, r6
   1a58c:	mov	r1, r7
   1a590:	bl	1899c <__assert_fail@plt+0x69b4>
   1a594:	ldrd	r2, [r4, #8]
   1a598:	adds	r0, r6, #1
   1a59c:	adc	r1, r7, #0
   1a5a0:	cmp	r2, r6
   1a5a4:	sbcs	r3, r3, r7
   1a5a8:	blt	1a788 <__assert_fail@plt+0x87a0>
   1a5ac:	mov	r6, r0
   1a5b0:	mov	r7, r1
   1a5b4:	mov	r2, r6
   1a5b8:	mov	r3, r7
   1a5bc:	ldr	r0, [sp, #24]
   1a5c0:	ldr	sl, [r9]
   1a5c4:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1a5c8:	ldr	r3, [r5, #40]	; 0x28
   1a5cc:	mov	r2, fp
   1a5d0:	mov	r1, #1
   1a5d4:	ldrb	r3, [r3, r6]
   1a5d8:	str	r3, [sp]
   1a5dc:	mov	r3, r0
   1a5e0:	mov	r0, sl
   1a5e4:	bl	11e38 <__fprintf_chk@plt>
   1a5e8:	ldr	r3, [r5, #40]	; 0x28
   1a5ec:	ldrb	r3, [r3, r6]
   1a5f0:	cmp	r3, #42	; 0x2a
   1a5f4:	beq	1a690 <__assert_fail@plt+0x86a8>
   1a5f8:	cmp	r3, #61	; 0x3d
   1a5fc:	ldr	r8, [r9]
   1a600:	beq	1a6f4 <__assert_fail@plt+0x870c>
   1a604:	cmp	r3, #94	; 0x5e
   1a608:	bne	1a570 <__assert_fail@plt+0x8588>
   1a60c:	mov	r1, r8
   1a610:	mov	r0, #10
   1a614:	bl	11ec8 <fputc@plt>
   1a618:	b	1a594 <__assert_fail@plt+0x85ac>
   1a61c:	cmn	r8, #1
   1a620:	bne	19fe0 <__assert_fail@plt+0x7ff8>
   1a624:	subs	r3, sl, #1
   1a628:	sbc	r1, fp, #0
   1a62c:	str	r3, [sp, #112]	; 0x70
   1a630:	str	r1, [sp, #116]	; 0x74
   1a634:	ldrd	r2, [r5, #80]	; 0x50
   1a638:	ldrd	r0, [sp, #112]	; 0x70
   1a63c:	cmp	r2, r0
   1a640:	sbcs	r3, r3, r1
   1a644:	bge	1a678 <__assert_fail@plt+0x8690>
   1a648:	ldrd	sl, [sp, #112]	; 0x70
   1a64c:	ldr	r3, [r5, #32]
   1a650:	add	r8, sl, #1
   1a654:	add	r8, r3, r8, lsl #2
   1a658:	ldr	r0, [r8, #-4]!
   1a65c:	bl	11ab4 <free@plt>
   1a660:	ldrd	r2, [r5, #80]	; 0x50
   1a664:	subs	sl, sl, #1
   1a668:	sbc	fp, fp, #0
   1a66c:	cmp	r2, sl
   1a670:	sbcs	r3, r3, fp
   1a674:	blt	1a658 <__assert_fail@plt+0x8670>
   1a678:	subs	r3, r6, #1
   1a67c:	sbc	r2, r7, #0
   1a680:	str	r2, [r4, #12]
   1a684:	str	r3, [r4, #8]
   1a688:	mvn	r0, #0
   1a68c:	b	18b40 <__assert_fail@plt+0x6b58>
   1a690:	ldrd	r2, [r5, #64]	; 0x40
   1a694:	ldr	r0, [sp, #24]
   1a698:	ldr	r8, [r9]
   1a69c:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1a6a0:	ldrd	r2, [r5, #80]	; 0x50
   1a6a4:	str	r0, [sp, #8]
   1a6a8:	add	r0, sp, #356	; 0x164
   1a6ac:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1a6b0:	ldr	r1, [sp, #8]
   1a6b4:	ldr	r2, [pc, #-3360]	; 1999c <__assert_fail@plt+0x79b4>
   1a6b8:	mov	r3, r1
   1a6bc:	mov	r1, #1
   1a6c0:	str	r0, [sp]
   1a6c4:	mov	r0, r8
   1a6c8:	bl	11e38 <__fprintf_chk@plt>
   1a6cc:	b	1a594 <__assert_fail@plt+0x85ac>
   1a6d0:	str	r2, [sp, #56]	; 0x38
   1a6d4:	str	r3, [sp, #48]	; 0x30
   1a6d8:	str	r1, [sp, #32]
   1a6dc:	bl	1777c <__assert_fail@plt+0x5794>
   1a6e0:	ldr	r2, [sp, #56]	; 0x38
   1a6e4:	ldr	r3, [sp, #48]	; 0x30
   1a6e8:	ldr	r1, [sp, #32]
   1a6ec:	sub	r8, r8, r0
   1a6f0:	b	1a16c <__assert_fail@plt+0x8184>
   1a6f4:	ldrd	r2, [r5, #72]	; 0x48
   1a6f8:	ldr	r0, [sp, #24]
   1a6fc:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1a700:	ldrd	r2, [r5, #88]	; 0x58
   1a704:	str	r0, [sp, #8]
   1a708:	b	1a6a8 <__assert_fail@plt+0x86c0>
   1a70c:	ldrb	r3, [r9]
   1a710:	str	r9, [r5, #144]	; 0x90
   1a714:	cmp	r3, #10
   1a718:	mov	r3, r9
   1a71c:	beq	1a72c <__assert_fail@plt+0x8744>
   1a720:	ldrb	r2, [r3, #1]!
   1a724:	cmp	r2, #10
   1a728:	bne	1a720 <__assert_fail@plt+0x8738>
   1a72c:	mov	r2, #0
   1a730:	mov	r0, r9
   1a734:	strb	r2, [r3]
   1a738:	bl	1f758 <__assert_fail@plt+0xd770>
   1a73c:	cmp	r0, #0
   1a740:	str	r0, [r5, #144]	; 0x90
   1a744:	bne	18c0c <__assert_fail@plt+0x6c24>
   1a748:	b	19c34 <__assert_fail@plt+0x7c4c>
   1a74c:	ldrd	sl, [sp, #176]	; 0xb0
   1a750:	cmp	fp, r1
   1a754:	cmpeq	sl, r0
   1a758:	ldrdeq	r0, [sp, #72]	; 0x48
   1a75c:	strdeq	r0, [sp, #176]	; 0xb0
   1a760:	cmp	r9, #1
   1a764:	bls	1a7b0 <__assert_fail@plt+0x87c8>
   1a768:	ldrd	r0, [r5, #96]	; 0x60
   1a76c:	b	1965c <__assert_fail@plt+0x7674>
   1a770:	str	r1, [sp, #32]
   1a774:	bl	1777c <__assert_fail@plt+0x5794>
   1a778:	ldr	r1, [sp, #32]
   1a77c:	sub	r8, r8, r0
   1a780:	b	1a0f0 <__assert_fail@plt+0x8108>
   1a784:	ldr	r9, [pc, #-3564]	; 199a0 <__assert_fail@plt+0x79b8>
   1a788:	ldr	r0, [r9]
   1a78c:	bl	11a84 <fflush@plt>
   1a790:	mov	r0, #1
   1a794:	b	18b40 <__assert_fail@plt+0x6b58>
   1a798:	str	r3, [sp, #64]	; 0x40
   1a79c:	bl	1777c <__assert_fail@plt+0x5794>
   1a7a0:	ldr	r3, [sp, #64]	; 0x40
   1a7a4:	cmp	r0, #0
   1a7a8:	beq	1966c <__assert_fail@plt+0x7684>
   1a7ac:	sub	r9, r9, #1
   1a7b0:	ldr	r2, [r4, #8]
   1a7b4:	ldr	ip, [r5, #36]	; 0x24
   1a7b8:	mov	r0, r3
   1a7bc:	mov	r1, r9
   1a7c0:	str	r9, [ip, r2, lsl #2]
   1a7c4:	str	r2, [sp, #64]	; 0x40
   1a7c8:	ldr	fp, [r5, #32]
   1a7cc:	bl	1f700 <__assert_fail@plt+0xd718>
   1a7d0:	ldr	r2, [sp, #64]	; 0x40
   1a7d4:	cmp	r9, #0
   1a7d8:	str	r0, [fp, r2, lsl #2]
   1a7dc:	bne	19694 <__assert_fail@plt+0x76ac>
   1a7e0:	ldrd	r2, [r4, #8]
   1a7e4:	strd	r2, [sp, #64]	; 0x40
   1a7e8:	b	196b4 <__assert_fail@plt+0x76cc>
   1a7ec:	ldr	r2, [pc, #-3664]	; 199a4 <__assert_fail@plt+0x79bc>
   1a7f0:	ldrb	r1, [r2]
   1a7f4:	cmp	r1, #0
   1a7f8:	beq	1a2e8 <__assert_fail@plt+0x8300>
   1a7fc:	ldr	r2, [pc, #-3676]	; 199a8 <__assert_fail@plt+0x79c0>
   1a800:	mov	r9, #2
   1a804:	ldrh	r0, [r2]
   1a808:	ldrb	r1, [r2, #2]
   1a80c:	strh	r0, [r3]
   1a810:	strb	r1, [r3, #2]
   1a814:	ldrb	ip, [fp, #1]
   1a818:	b	19614 <__assert_fail@plt+0x762c>
   1a81c:	add	ip, ip, r1
   1a820:	ldr	fp, [r7]
   1a824:	add	r1, r0, r1
   1a828:	sub	r2, r2, #1
   1a82c:	mov	r6, ip
   1a830:	mov	sl, r1
   1a834:	str	r2, [r6]
   1a838:	mov	r1, r2
   1a83c:	mov	r0, fp
   1a840:	str	r3, [sp, #88]	; 0x58
   1a844:	str	r2, [sp, #64]	; 0x40
   1a848:	bl	1f700 <__assert_fail@plt+0xd718>
   1a84c:	ldr	r2, [sp, #64]	; 0x40
   1a850:	ldr	r3, [sp, #88]	; 0x58
   1a854:	cmp	r2, #0
   1a858:	str	r0, [sl]
   1a85c:	bne	19738 <__assert_fail@plt+0x7750>
   1a860:	ldrd	r0, [r4, #8]
   1a864:	strd	r0, [sp, #64]	; 0x40
   1a868:	b	19750 <__assert_fail@plt+0x7768>
   1a86c:	str	r3, [sp, #88]	; 0x58
   1a870:	str	r2, [sp, #64]	; 0x40
   1a874:	bl	1777c <__assert_fail@plt+0x5794>
   1a878:	ldr	r2, [sp, #64]	; 0x40
   1a87c:	ldr	r3, [sp, #88]	; 0x58
   1a880:	cmp	r0, #0
   1a884:	beq	1986c <__assert_fail@plt+0x7884>
   1a888:	sub	r2, r2, #1
   1a88c:	ldr	fp, [r4, #8]
   1a890:	ldr	ip, [r5, #36]	; 0x24
   1a894:	mov	r1, r2
   1a898:	mov	r0, r3
   1a89c:	str	r2, [ip, fp, lsl #2]
   1a8a0:	str	r2, [sp, #64]	; 0x40
   1a8a4:	ldr	r9, [r5, #32]
   1a8a8:	bl	1f700 <__assert_fail@plt+0xd718>
   1a8ac:	ldr	r2, [sp, #64]	; 0x40
   1a8b0:	cmp	r2, #0
   1a8b4:	str	r0, [r9, fp, lsl #2]
   1a8b8:	bne	1988c <__assert_fail@plt+0x78a4>
   1a8bc:	ldrd	r2, [r4, #8]
   1a8c0:	strd	r2, [sp, #64]	; 0x40
   1a8c4:	ldrd	r2, [r5, #96]	; 0x60
   1a8c8:	strd	r2, [sp, #88]	; 0x58
   1a8cc:	ldr	r3, [sp, #48]	; 0x30
   1a8d0:	str	r3, [sp, #168]	; 0xa8
   1a8d4:	b	18cac <__assert_fail@plt+0x6cc4>
   1a8d8:	ldr	r1, [sp, #120]	; 0x78
   1a8dc:	adds	r1, r1, #1
   1a8e0:	str	r1, [sp, #120]	; 0x78
   1a8e4:	ldr	r1, [sp, #124]	; 0x7c
   1a8e8:	adc	r1, r1, #0
   1a8ec:	cmp	r2, #1
   1a8f0:	str	r1, [sp, #124]	; 0x7c
   1a8f4:	bls	1a88c <__assert_fail@plt+0x88a4>
   1a8f8:	ldrd	r0, [r5, #80]	; 0x50
   1a8fc:	b	1985c <__assert_fail@plt+0x7874>
   1a900:	sub	r2, fp, #1
   1a904:	mov	r0, r6
   1a908:	asr	r3, r2, #31
   1a90c:	strd	r2, [r4, #8]
   1a910:	b	18b40 <__assert_fail@plt+0x6b58>
   1a914:	bl	18448 <__assert_fail@plt+0x6460>
   1a918:	cmp	r0, #0
   1a91c:	bne	1a4f4 <__assert_fail@plt+0x850c>
   1a920:	ldr	r0, [pc, #-3964]	; 199ac <__assert_fail@plt+0x79c4>
   1a924:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1a928:	b	1a4f4 <__assert_fail@plt+0x850c>
   1a92c:	ldr	r1, [pc, #-3972]	; 199b0 <__assert_fail@plt+0x79c8>
   1a930:	add	r0, r0, #1
   1a934:	bl	17ce8 <__assert_fail@plt+0x5d00>
   1a938:	ldrd	r8, [r5, #64]	; 0x40
   1a93c:	ldr	r1, [r5, #80]	; 0x50
   1a940:	mov	r3, #1
   1a944:	subs	r3, r3, r8
   1a948:	ldr	ip, [r5, #84]	; 0x54
   1a94c:	mov	r2, #0
   1a950:	sbc	r2, r2, r9
   1a954:	adds	r3, r3, r1
   1a958:	adc	r2, r2, ip
   1a95c:	str	r3, [r5, #80]	; 0x50
   1a960:	str	r2, [r5, #84]	; 0x54
   1a964:	b	18eb0 <__assert_fail@plt+0x6ec8>
   1a968:	add	r1, sp, #320	; 0x140
   1a96c:	add	r0, r0, #1
   1a970:	bl	17ce8 <__assert_fail@plt+0x5d00>
   1a974:	add	r3, sp, #312	; 0x138
   1a978:	ldrd	r0, [r3]
   1a97c:	add	r3, sp, #320	; 0x140
   1a980:	ldrd	r8, [r3]
   1a984:	cmp	r8, r0
   1a988:	sbcs	r3, r9, r1
   1a98c:	blt	1a9b0 <__assert_fail@plt+0x89c8>
   1a990:	adds	r3, r8, #1
   1a994:	str	r3, [sp, #144]	; 0x90
   1a998:	adc	r3, r9, #-2147483648	; 0x80000000
   1a99c:	str	r3, [sp, #148]	; 0x94
   1a9a0:	ldrd	r2, [sp, #144]	; 0x90
   1a9a4:	cmp	r3, r1
   1a9a8:	cmpeq	r2, r0
   1a9ac:	bne	18f28 <__assert_fail@plt+0x6f40>
   1a9b0:	bl	1756c <__assert_fail@plt+0x5584>
   1a9b4:	ldrd	r2, [sp, #128]	; 0x80
   1a9b8:	orrs	r3, r2, r3
   1a9bc:	bne	1aa04 <__assert_fail@plt+0x8a1c>
   1a9c0:	ldrd	r2, [r5, #64]	; 0x40
   1a9c4:	cmp	r2, #2
   1a9c8:	sbcs	r3, r3, #0
   1a9cc:	blt	1a4e8 <__assert_fail@plt+0x8500>
   1a9d0:	ldrd	r2, [sp, #112]	; 0x70
   1a9d4:	ldrd	r0, [sp, #144]	; 0x90
   1a9d8:	mov	lr, r2
   1a9dc:	adds	ip, r0, r2
   1a9e0:	adc	r3, r1, r3
   1a9e4:	str	r3, [sp, #308]	; 0x134
   1a9e8:	add	r3, sp, #304	; 0x130
   1a9ec:	ldrd	r0, [sp, #120]	; 0x78
   1a9f0:	str	ip, [sp, #304]	; 0x130
   1a9f4:	ldrd	r2, [r3]
   1a9f8:	cmp	r2, r0
   1a9fc:	sbcs	r3, r3, r1
   1aa00:	bge	1a4e8 <__assert_fail@plt+0x8500>
   1aa04:	ldr	r3, [pc, #2404]	; 1b370 <__assert_fail@plt+0x9388>
   1aa08:	ldr	r3, [r3]
   1aa0c:	cmp	r3, #2
   1aa10:	beq	1b014 <__assert_fail@plt+0x902c>
   1aa14:	ldr	r3, [pc, #2392]	; 1b374 <__assert_fail@plt+0x938c>
   1aa18:	mov	r2, #4
   1aa1c:	str	r2, [r3]
   1aa20:	b	19afc <__assert_fail@plt+0x7b14>
   1aa24:	cmp	r3, #0
   1aa28:	ldrd	r2, [sp, #112]	; 0x70
   1aa2c:	strd	r2, [r5, #128]	; 0x80
   1aa30:	ldrdeq	r2, [sp, #72]	; 0x48
   1aa34:	strdeq	r2, [sp, #144]	; 0x90
   1aa38:	ldrd	r0, [sp, #112]	; 0x70
   1aa3c:	mvn	r3, #0
   1aa40:	mvn	r2, #0
   1aa44:	cmp	r1, r3
   1aa48:	cmpeq	r0, r2
   1aa4c:	ldrd	r2, [sp, #144]	; 0x90
   1aa50:	strd	r2, [r5, #136]	; 0x88
   1aa54:	bne	19af0 <__assert_fail@plt+0x7b08>
   1aa58:	b	19c04 <__assert_fail@plt+0x7c1c>
   1aa5c:	ldrd	r2, [sp, #72]	; 0x48
   1aa60:	strd	r2, [r5, #136]	; 0x88
   1aa64:	strd	r2, [sp, #144]	; 0x90
   1aa68:	b	19af0 <__assert_fail@plt+0x7b08>
   1aa6c:	mov	fp, #1
   1aa70:	ldr	r3, [sp, #32]
   1aa74:	cmp	r3, #99	; 0x63
   1aa78:	beq	1ae84 <__assert_fail@plt+0x8e9c>
   1aa7c:	ldr	r3, [sp, #16]
   1aa80:	ldr	r7, [r3]
   1aa84:	add	r3, sp, #312	; 0x138
   1aa88:	ldr	r0, [sp, #24]
   1aa8c:	ldrd	r2, [r3]
   1aa90:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1aa94:	add	r3, sp, #320	; 0x140
   1aa98:	ldrd	r2, [r3]
   1aa9c:	mov	r8, r0
   1aaa0:	add	r0, sp, #356	; 0x164
   1aaa4:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1aaa8:	mvn	r2, #0
   1aaac:	mov	r1, #1
   1aab0:	str	r8, [sp]
   1aab4:	ldr	r3, [pc, #2236]	; 1b378 <__assert_fail@plt+0x9390>
   1aab8:	str	r0, [sp, #4]
   1aabc:	mov	r0, r7
   1aac0:	bl	11dcc <__sprintf_chk@plt>
   1aac4:	ldr	r3, [sp, #16]
   1aac8:	ldr	r7, [r3]
   1aacc:	mov	r0, r7
   1aad0:	bl	11d78 <strlen@plt>
   1aad4:	ldr	r3, [r5, #36]	; 0x24
   1aad8:	ldr	r8, [r5, #32]
   1aadc:	str	r0, [r3, fp, lsl #2]
   1aae0:	mov	r0, r7
   1aae4:	bl	1f758 <__assert_fail@plt+0xd770>
   1aae8:	cmp	r0, #0
   1aaec:	str	r0, [r8, fp, lsl #2]
   1aaf0:	beq	1afe8 <__assert_fail@plt+0x9000>
   1aaf4:	ldrd	r2, [r4, #8]
   1aaf8:	add	r8, fp, #1
   1aafc:	ldr	r1, [r5, #40]	; 0x28
   1ab00:	asr	r9, r8, #31
   1ab04:	cmp	r2, r8
   1ab08:	sbcs	r3, r3, r9
   1ab0c:	mov	r3, #61	; 0x3d
   1ab10:	strb	r3, [r1, fp]
   1ab14:	blt	1a4e8 <__assert_fail@plt+0x8500>
   1ab18:	ldr	sl, [sp, #16]
   1ab1c:	b	1ab7c <__assert_fail@plt+0x8b94>
   1ab20:	ldr	r3, [r5, #36]	; 0x24
   1ab24:	sub	r6, r6, r0
   1ab28:	add	r0, r1, #2
   1ab2c:	str	r6, [r3, fp, lsl #2]
   1ab30:	mov	r1, r6
   1ab34:	ldr	r7, [r5, #32]
   1ab38:	bl	1f700 <__assert_fail@plt+0xd718>
   1ab3c:	cmp	r6, #0
   1ab40:	str	r0, [r7, fp, lsl #2]
   1ab44:	beq	1ab58 <__assert_fail@plt+0x8b70>
   1ab48:	ldr	r3, [r5, #32]
   1ab4c:	ldr	r3, [r3, fp, lsl #2]
   1ab50:	cmp	r3, #0
   1ab54:	beq	1affc <__assert_fail@plt+0x9014>
   1ab58:	ldrd	r2, [r4, #8]
   1ab5c:	adds	r8, r8, #1
   1ab60:	ldr	r1, [r5, #40]	; 0x28
   1ab64:	adc	r9, r9, #0
   1ab68:	cmp	r2, r8
   1ab6c:	sbcs	r3, r3, r9
   1ab70:	mov	r3, #43	; 0x2b
   1ab74:	strb	r3, [r1, fp]
   1ab78:	blt	1a4e8 <__assert_fail@plt+0x8500>
   1ab7c:	bl	17a2c <__assert_fail@plt+0x5a44>
   1ab80:	mov	fp, r8
   1ab84:	str	r8, [sp, #8]
   1ab88:	cmn	r0, #1
   1ab8c:	mov	r6, r0
   1ab90:	beq	1a900 <__assert_fail@plt+0x8918>
   1ab94:	cmp	r0, #0
   1ab98:	beq	1b080 <__assert_fail@plt+0x9098>
   1ab9c:	ldr	r1, [sl]
   1aba0:	ldrb	r3, [r1]
   1aba4:	cmp	r3, #62	; 0x3e
   1aba8:	bne	1b1bc <__assert_fail@plt+0x91d4>
   1abac:	ldrb	r3, [r1, #1]
   1abb0:	cmp	r3, #32
   1abb4:	cmpne	r3, #9
   1abb8:	bne	1b1bc <__assert_fail@plt+0x91d4>
   1abbc:	ldrd	r2, [r4, #8]
   1abc0:	cmp	r9, r3
   1abc4:	cmpeq	r8, r2
   1abc8:	movne	r0, #2
   1abcc:	bne	1ab20 <__assert_fail@plt+0x8b38>
   1abd0:	bl	1777c <__assert_fail@plt+0x5794>
   1abd4:	ldr	r1, [sl]
   1abd8:	add	r0, r0, #2
   1abdc:	b	1ab20 <__assert_fail@plt+0x8b38>
   1abe0:	str	r1, [sp, #32]
   1abe4:	bl	1777c <__assert_fail@plt+0x5794>
   1abe8:	ldr	r1, [sp, #32]
   1abec:	sub	r8, r8, r0
   1abf0:	b	1a1ec <__assert_fail@plt+0x8204>
   1abf4:	ldr	r3, [sp, #120]	; 0x78
   1abf8:	adds	r3, r3, #1
   1abfc:	str	r3, [sp, #120]	; 0x78
   1ac00:	ldr	r3, [sp, #124]	; 0x7c
   1ac04:	adc	r3, r3, #0
   1ac08:	str	r3, [sp, #124]	; 0x7c
   1ac0c:	b	197cc <__assert_fail@plt+0x77e4>
   1ac10:	strd	r2, [r5, #80]	; 0x50
   1ac14:	mov	sl, #1
   1ac18:	mov	r2, #7
   1ac1c:	mov	r3, #0
   1ac20:	mov	fp, #0
   1ac24:	strd	r2, [sp, #232]	; 0xe8
   1ac28:	strd	sl, [r5, #64]	; 0x40
   1ac2c:	mov	r2, #6
   1ac30:	mov	r3, #0
   1ac34:	b	195a8 <__assert_fail@plt+0x75c0>
   1ac38:	add	r0, r0, #1
   1ac3c:	ldr	r1, [pc, #1848]	; 1b37c <__assert_fail@plt+0x9394>
   1ac40:	bl	17ce8 <__assert_fail@plt+0x5d00>
   1ac44:	ldrd	r6, [r5, #88]	; 0x58
   1ac48:	mvn	r3, #0
   1ac4c:	mvn	r2, #-2147483648	; 0x80000000
   1ac50:	subs	r3, r3, r6
   1ac54:	str	r3, [sp, #128]	; 0x80
   1ac58:	sbc	r3, r2, r7
   1ac5c:	str	r3, [sp, #132]	; 0x84
   1ac60:	mov	ip, r0
   1ac64:	b	19ce8 <__assert_fail@plt+0x7d00>
   1ac68:	ldr	r1, [pc, #1808]	; 1b380 <__assert_fail@plt+0x9398>
   1ac6c:	add	r0, r0, #1
   1ac70:	bl	17ce8 <__assert_fail@plt+0x5d00>
   1ac74:	ldr	r3, [r5, #80]	; 0x50
   1ac78:	mvn	r2, #0
   1ac7c:	subs	r3, r2, r3
   1ac80:	ldr	r1, [r5, #84]	; 0x54
   1ac84:	str	r3, [sp, #136]	; 0x88
   1ac88:	mvn	r3, #-2147483648	; 0x80000000
   1ac8c:	sbc	r3, r3, r1
   1ac90:	str	r3, [sp, #140]	; 0x8c
   1ac94:	b	19c80 <__assert_fail@plt+0x7c98>
   1ac98:	mov	r2, r8
   1ac9c:	mov	r3, r9
   1aca0:	add	r0, sp, #332	; 0x14c
   1aca4:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1aca8:	ldrd	r2, [sp, #56]	; 0x38
   1acac:	str	r0, [sp, #8]
   1acb0:	add	r0, sp, #356	; 0x164
   1acb4:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1acb8:	mov	r2, sl
   1acbc:	mov	r3, fp
   1acc0:	mov	r7, r0
   1acc4:	add	r0, sp, #380	; 0x17c
   1acc8:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1accc:	ldrd	r2, [r4, #8]
   1acd0:	adds	r2, r2, #1
   1acd4:	adc	r3, r3, #0
   1acd8:	mov	r6, r0
   1acdc:	add	r0, sp, #404	; 0x194
   1ace0:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1ace4:	ldr	r1, [sp, #8]
   1ace8:	str	r6, [sp]
   1acec:	mov	r2, r1
   1acf0:	mov	r3, r7
   1acf4:	ldr	r1, [pc, #1672]	; 1b384 <__assert_fail@plt+0x939c>
   1acf8:	str	r0, [sp, #4]
   1acfc:	mov	r0, #1
   1ad00:	bl	11e14 <__printf_chk@plt>
   1ad04:	ldrd	r0, [r4, #8]
   1ad08:	b	1a484 <__assert_fail@plt+0x849c>
   1ad0c:	ldr	r3, [sp, #8]
   1ad10:	mvn	r0, #0
   1ad14:	sub	r2, r3, #1
   1ad18:	asr	r3, r2, #31
   1ad1c:	strd	r2, [r4, #8]
   1ad20:	b	18b40 <__assert_fail@plt+0x6b58>
   1ad24:	add	r3, sp, #256	; 0x100
   1ad28:	mov	r0, #1
   1ad2c:	ldrd	r2, [r3]
   1ad30:	mov	r1, #0
   1ad34:	strd	r2, [r5, #88]	; 0x58
   1ad38:	strd	r0, [r5, #72]	; 0x48
   1ad3c:	b	19380 <__assert_fail@plt+0x7398>
   1ad40:	ldrd	sl, [sp, #80]	; 0x50
   1ad44:	ldr	r2, [sp, #68]	; 0x44
   1ad48:	ldrd	r8, [sp, #208]	; 0xd0
   1ad4c:	orr	r3, sl, fp
   1ad50:	cmp	r2, #0
   1ad54:	cmpge	r3, #0
   1ad58:	beq	1b184 <__assert_fail@plt+0x919c>
   1ad5c:	ldrd	r2, [sp, #120]	; 0x78
   1ad60:	ldrd	r0, [sp, #136]	; 0x88
   1ad64:	cmp	r3, r1
   1ad68:	ldr	r3, [sp, #204]	; 0xcc
   1ad6c:	cmpeq	r2, r0
   1ad70:	eorne	r3, r3, #1
   1ad74:	moveq	r3, #0
   1ad78:	cmp	r3, #0
   1ad7c:	bne	1b2b8 <__assert_fail@plt+0x92d0>
   1ad80:	ldrd	r2, [sp, #128]	; 0x80
   1ad84:	cmp	r3, #0
   1ad88:	ldr	r3, [sp, #168]	; 0xa8
   1ad8c:	cmpeq	r2, #1
   1ad90:	eoreq	r3, r3, #1
   1ad94:	movne	r3, #0
   1ad98:	cmp	r3, #0
   1ad9c:	beq	19a6c <__assert_fail@plt+0x7a84>
   1ada0:	ldrd	r6, [sp, #8]
   1ada4:	ldrd	r2, [sp, #64]	; 0x40
   1ada8:	cmp	r6, r2
   1adac:	sbcs	r3, r7, r3
   1adb0:	bge	1ae00 <__assert_fail@plt+0x8e18>
   1adb4:	ldr	lr, [sp, #64]	; 0x40
   1adb8:	ldr	ip, [r5, #32]
   1adbc:	ldr	r1, [r5, #36]	; 0x24
   1adc0:	ldr	r0, [r5, #40]	; 0x28
   1adc4:	lsl	r2, r6, #2
   1adc8:	add	r3, ip, r2
   1adcc:	add	r1, r1, r2
   1add0:	add	ip, ip, lr, lsl #2
   1add4:	add	r2, r0, r6
   1add8:	ldr	r0, [r3, #4]
   1addc:	str	r0, [r3], #4
   1ade0:	ldrb	r0, [r2, #1]
   1ade4:	cmp	ip, r3
   1ade8:	strb	r0, [r2], #1
   1adec:	ldr	r0, [r1, #4]
   1adf0:	str	r0, [r1], #4
   1adf4:	bne	1add8 <__assert_fail@plt+0x8df0>
   1adf8:	ldrd	r2, [sp, #64]	; 0x40
   1adfc:	strd	r2, [sp, #8]
   1ae00:	ldrd	r6, [sp, #64]	; 0x40
   1ae04:	ldr	r2, [r5, #64]	; 0x40
   1ae08:	ldr	r3, [r5, #68]	; 0x44
   1ae0c:	subs	r1, r6, #1
   1ae10:	mov	ip, #0
   1ae14:	sbc	r0, r7, #0
   1ae18:	adds	r2, r2, #1
   1ae1c:	adc	r3, r3, ip
   1ae20:	str	ip, [sp, #128]	; 0x80
   1ae24:	str	r0, [r4, #12]
   1ae28:	str	ip, [sp, #132]	; 0x84
   1ae2c:	str	r1, [r4, #8]
   1ae30:	strd	r2, [r5, #64]	; 0x40
   1ae34:	str	ip, [r5, #80]	; 0x50
   1ae38:	str	ip, [r5, #84]	; 0x54
   1ae3c:	b	19a6c <__assert_fail@plt+0x7a84>
   1ae40:	str	r2, [sp, #88]	; 0x58
   1ae44:	str	r3, [sp, #64]	; 0x40
   1ae48:	bl	1777c <__assert_fail@plt+0x5794>
   1ae4c:	ldr	r1, [r4, #8]
   1ae50:	ldr	ip, [r5, #36]	; 0x24
   1ae54:	ldr	r3, [sp, #64]	; 0x40
   1ae58:	ldr	r2, [sp, #88]	; 0x58
   1ae5c:	lsl	r1, r1, #2
   1ae60:	cmp	r0, #0
   1ae64:	ldr	r0, [r5, #32]
   1ae68:	bne	1a81c <__assert_fail@plt+0x8834>
   1ae6c:	add	ip, ip, r1
   1ae70:	add	r1, r0, r1
   1ae74:	mov	r6, ip
   1ae78:	mov	sl, r1
   1ae7c:	ldr	fp, [r7]
   1ae80:	b	1971c <__assert_fail@plt+0x7734>
   1ae84:	bl	17a2c <__assert_fail@plt+0x5a44>
   1ae88:	cmn	r0, #1
   1ae8c:	subeq	r2, fp, #1
   1ae90:	asreq	r3, r2, #31
   1ae94:	strdeq	r2, [r4, #8]
   1ae98:	beq	18b40 <__assert_fail@plt+0x6b58>
   1ae9c:	cmp	r0, #0
   1aea0:	beq	1b080 <__assert_fail@plt+0x9098>
   1aea4:	ldr	r3, [sp, #16]
   1aea8:	ldr	r7, [r3]
   1aeac:	ldrb	r3, [r7]
   1aeb0:	cmp	r3, #45	; 0x2d
   1aeb4:	beq	1aa84 <__assert_fail@plt+0x8a9c>
   1aeb8:	ldr	r0, [sp, #24]
   1aebc:	ldrd	r2, [r5]
   1aec0:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1aec4:	mov	r1, r0
   1aec8:	ldr	r0, [pc, #1208]	; 1b388 <__assert_fail@plt+0x93a0>
   1aecc:	bl	1f558 <__assert_fail@plt+0xd570>
   1aed0:	ldrd	r2, [sp, #32]
   1aed4:	strd	r2, [sp, #80]	; 0x50
   1aed8:	ldrd	r2, [sp, #72]	; 0x48
   1aedc:	strd	r2, [sp, #144]	; 0x90
   1aee0:	ldrd	r2, [sp, #8]
   1aee4:	strd	r2, [sp, #32]
   1aee8:	b	19288 <__assert_fail@plt+0x72a0>
   1aeec:	ldrd	r2, [r5, #128]	; 0x80
   1aef0:	mvn	r1, #0
   1aef4:	mvn	r0, #0
   1aef8:	cmp	r3, r1
   1aefc:	cmpeq	r2, r0
   1af00:	beq	1a9b0 <__assert_fail@plt+0x89c8>
   1af04:	ldr	r3, [sp, #8]
   1af08:	str	r3, [r5, #136]	; 0x88
   1af0c:	ldr	r3, [sp, #24]
   1af10:	str	r3, [r5, #140]	; 0x8c
   1af14:	b	1a4e8 <__assert_fail@plt+0x8500>
   1af18:	ldr	r2, [pc, #1132]	; 1b38c <__assert_fail@plt+0x93a4>
   1af1c:	ldrh	r1, [r2]
   1af20:	mov	r2, #2
   1af24:	strh	r1, [r3]
   1af28:	ldrb	r1, [fp, #1]
   1af2c:	b	19800 <__assert_fail@plt+0x7818>
   1af30:	subs	r3, sl, #1
   1af34:	sbc	r1, fp, #0
   1af38:	str	r3, [sp, #168]	; 0xa8
   1af3c:	str	r1, [sp, #172]	; 0xac
   1af40:	ldrd	r2, [r5, #80]	; 0x50
   1af44:	ldrd	r0, [sp, #168]	; 0xa8
   1af48:	cmp	r2, r0
   1af4c:	sbcs	r3, r3, r1
   1af50:	bge	1af84 <__assert_fail@plt+0x8f9c>
   1af54:	ldrd	sl, [sp, #168]	; 0xa8
   1af58:	ldr	r8, [r5, #32]
   1af5c:	add	r3, sl, #1
   1af60:	add	r8, r8, r3, lsl #2
   1af64:	ldr	r0, [r8, #-4]!
   1af68:	bl	11ab4 <free@plt>
   1af6c:	ldrd	r2, [r5, #80]	; 0x50
   1af70:	subs	sl, sl, #1
   1af74:	sbc	fp, fp, #0
   1af78:	cmp	r2, sl
   1af7c:	sbcs	r3, r3, fp
   1af80:	blt	1af64 <__assert_fail@plt+0x8f7c>
   1af84:	strd	r6, [r4, #8]
   1af88:	mvn	r0, #0
   1af8c:	b	18b40 <__assert_fail@plt+0x6b58>
   1af90:	mov	r2, #0
   1af94:	mov	r3, #0
   1af98:	mvn	r0, #0
   1af9c:	strd	r2, [r4, #8]
   1afa0:	b	18b40 <__assert_fail@plt+0x6b58>
   1afa4:	ldrd	r2, [sp, #72]	; 0x48
   1afa8:	str	r2, [sp, #188]	; 0xbc
   1afac:	str	r3, [sp, #192]	; 0xc0
   1afb0:	ldrd	r2, [sp, #32]
   1afb4:	strd	r2, [sp, #8]
   1afb8:	mov	r2, #0
   1afbc:	mov	r3, #0
   1afc0:	strd	r2, [sp, #72]	; 0x48
   1afc4:	b	18cac <__assert_fail@plt+0x6cc4>
   1afc8:	ldr	r3, [sp, #64]	; 0x40
   1afcc:	ldrd	sl, [sp, #80]	; 0x50
   1afd0:	subs	r3, r3, #1
   1afd4:	str	r3, [sp, #64]	; 0x40
   1afd8:	ldr	r3, [sp, #68]	; 0x44
   1afdc:	sbc	r3, r3, #0
   1afe0:	str	r3, [sp, #68]	; 0x44
   1afe4:	b	199cc <__assert_fail@plt+0x79e4>
   1afe8:	sub	r2, fp, #1
   1afec:	mvn	r0, #0
   1aff0:	asr	r3, r2, #31
   1aff4:	strd	r2, [r4, #8]
   1aff8:	b	18b40 <__assert_fail@plt+0x6b58>
   1affc:	ldr	r7, [sp, #8]
   1b000:	mvn	r0, #0
   1b004:	sub	r2, r7, #1
   1b008:	asr	r3, r2, #31
   1b00c:	strd	r2, [r4, #8]
   1b010:	b	18b40 <__assert_fail@plt+0x6b58>
   1b014:	ldr	r3, [pc, #884]	; 1b390 <__assert_fail@plt+0x93a8>
   1b018:	ldr	r2, [pc, #884]	; 1b394 <__assert_fail@plt+0x93ac>
   1b01c:	ldr	r1, [pc, #884]	; 1b398 <__assert_fail@plt+0x93b0>
   1b020:	ldr	r0, [pc, #884]	; 1b39c <__assert_fail@plt+0x93b4>
   1b024:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1b028:	b	1aa14 <__assert_fail@plt+0x8a2c>
   1b02c:	mov	r2, #0
   1b030:	mov	r3, #0
   1b034:	str	r2, [sp, #188]	; 0xbc
   1b038:	strd	r2, [sp, #72]	; 0x48
   1b03c:	str	r3, [sp, #192]	; 0xc0
   1b040:	ldrd	r2, [sp, #32]
   1b044:	strd	r2, [sp, #8]
   1b048:	b	18cac <__assert_fail@plt+0x6cc4>
   1b04c:	ldrd	r0, [sp, #64]	; 0x40
   1b050:	subs	r3, r0, #1
   1b054:	sbc	r2, r1, #0
   1b058:	str	r2, [r4, #12]
   1b05c:	str	r3, [r4, #8]
   1b060:	mvn	r0, #0
   1b064:	b	18b40 <__assert_fail@plt+0x6b58>
   1b068:	ldr	r0, [sp, #24]
   1b06c:	ldrd	r2, [r5]
   1b070:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b074:	mov	r1, r0
   1b078:	ldr	r0, [pc, #800]	; 1b3a0 <__assert_fail@plt+0x93b8>
   1b07c:	bl	1f558 <__assert_fail@plt+0xd570>
   1b080:	ldr	r0, [sp, #24]
   1b084:	ldrd	r2, [r5]
   1b088:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b08c:	mov	r1, r0
   1b090:	ldr	r0, [pc, #780]	; 1b3a4 <__assert_fail@plt+0x93bc>
   1b094:	bl	1f558 <__assert_fail@plt+0xd570>
   1b098:	ldrd	sl, [sp, #80]	; 0x50
   1b09c:	orrs	r3, sl, fp
   1b0a0:	ldr	r3, [sp, #96]	; 0x60
   1b0a4:	moveq	r3, #0
   1b0a8:	cmp	r3, #0
   1b0ac:	bne	199cc <__assert_fail@plt+0x79e4>
   1b0b0:	ldrd	r2, [r5]
   1b0b4:	add	r0, sp, #332	; 0x14c
   1b0b8:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b0bc:	ldr	r3, [sp, #16]
   1b0c0:	ldr	r2, [r3]
   1b0c4:	mov	r1, r0
   1b0c8:	ldr	r0, [pc, #728]	; 1b3a8 <__assert_fail@plt+0x93c0>
   1b0cc:	bl	1f558 <__assert_fail@plt+0xd570>
   1b0d0:	ldrd	sl, [sp, #80]	; 0x50
   1b0d4:	orrs	r3, sl, fp
   1b0d8:	ldr	r3, [sp, #96]	; 0x60
   1b0dc:	moveq	r3, #0
   1b0e0:	cmp	r3, #0
   1b0e4:	bne	199cc <__assert_fail@plt+0x79e4>
   1b0e8:	ldrd	r2, [r5]
   1b0ec:	add	r0, sp, #332	; 0x14c
   1b0f0:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b0f4:	mov	r1, r0
   1b0f8:	ldr	r0, [pc, #684]	; 1b3ac <__assert_fail@plt+0x93c4>
   1b0fc:	bl	1f558 <__assert_fail@plt+0xd570>
   1b100:	ldr	r0, [pc, #680]	; 1b3b0 <__assert_fail@plt+0x93c8>
   1b104:	bl	1f558 <__assert_fail@plt+0xd570>
   1b108:	mov	r0, r1
   1b10c:	mov	r9, r3
   1b110:	str	r2, [sp, #8]
   1b114:	bl	11ab4 <free@plt>
   1b118:	subs	r3, sl, #1
   1b11c:	str	r3, [sp, #160]	; 0xa0
   1b120:	sbc	r3, fp, #0
   1b124:	str	r3, [sp, #164]	; 0xa4
   1b128:	ldrd	r0, [r5, #80]	; 0x50
   1b12c:	ldrd	r2, [sp, #160]	; 0xa0
   1b130:	cmp	r0, r2
   1b134:	sbcs	r3, r1, r3
   1b138:	ldr	r3, [sp, #8]
   1b13c:	ldrdlt	r6, [sp, #160]	; 0xa0
   1b140:	movlt	r8, r3
   1b144:	bge	1b170 <__assert_fail@plt+0x9188>
   1b148:	ldr	r2, [r5, #32]
   1b14c:	ldr	r0, [r2, r6, lsl #2]
   1b150:	bl	11ab4 <free@plt>
   1b154:	ldrd	r2, [r5, #80]	; 0x50
   1b158:	subs	r6, r6, #1
   1b15c:	sbc	r7, r7, #0
   1b160:	cmp	r2, r6
   1b164:	sbcs	r3, r3, r7
   1b168:	blt	1b148 <__assert_fail@plt+0x9160>
   1b16c:	mov	r3, r8
   1b170:	subs	fp, r9, #1
   1b174:	sbc	r3, r3, #0
   1b178:	str	r3, [r4, #12]
   1b17c:	str	fp, [r4, #8]
   1b180:	bl	1756c <__assert_fail@plt+0x5584>
   1b184:	ldrd	r2, [r5, #152]	; 0x98
   1b188:	add	r0, sp, #332	; 0x14c
   1b18c:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b190:	mov	r1, r0
   1b194:	ldr	r0, [pc, #536]	; 1b3b4 <__assert_fail@plt+0x93cc>
   1b198:	bl	1f558 <__assert_fail@plt+0xd570>
   1b19c:	strd	sl, [r4, #8]
   1b1a0:	bl	1756c <__assert_fail@plt+0x5584>
   1b1a4:	bl	11b50 <__stack_chk_fail@plt>
   1b1a8:	ldr	r3, [pc, #520]	; 1b3b8 <__assert_fail@plt+0x93d0>
   1b1ac:	ldr	r2, [pc, #520]	; 1b3bc <__assert_fail@plt+0x93d4>
   1b1b0:	ldr	r1, [pc, #520]	; 1b3c0 <__assert_fail@plt+0x93d8>
   1b1b4:	ldr	r0, [pc, #520]	; 1b3c4 <__assert_fail@plt+0x93dc>
   1b1b8:	bl	11fe8 <__assert_fail@plt>
   1b1bc:	ldr	r0, [sp, #24]
   1b1c0:	ldrd	r2, [r5]
   1b1c4:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b1c8:	mov	r1, r0
   1b1cc:	ldr	r0, [pc, #500]	; 1b3c8 <__assert_fail@plt+0x93e0>
   1b1d0:	bl	1f558 <__assert_fail@plt+0xd570>
   1b1d4:	mov	r0, r1
   1b1d8:	bl	11ab4 <free@plt>
   1b1dc:	subs	r3, sl, #1
   1b1e0:	sbc	r2, fp, #0
   1b1e4:	str	r2, [r4, #12]
   1b1e8:	str	r3, [r4, #8]
   1b1ec:	b	1a9b0 <__assert_fail@plt+0x89c8>
   1b1f0:	ldr	r3, [pc, #448]	; 1b3b8 <__assert_fail@plt+0x93d0>
   1b1f4:	ldr	r2, [pc, #464]	; 1b3cc <__assert_fail@plt+0x93e4>
   1b1f8:	ldr	r1, [pc, #448]	; 1b3c0 <__assert_fail@plt+0x93d8>
   1b1fc:	ldr	r0, [pc, #460]	; 1b3d0 <__assert_fail@plt+0x93e8>
   1b200:	bl	11fe8 <__assert_fail@plt>
   1b204:	ldr	r3, [pc, #428]	; 1b3b8 <__assert_fail@plt+0x93d0>
   1b208:	mov	r2, #1616	; 0x650
   1b20c:	ldr	r1, [pc, #428]	; 1b3c0 <__assert_fail@plt+0x93d8>
   1b210:	ldr	r0, [pc, #444]	; 1b3d4 <__assert_fail@plt+0x93ec>
   1b214:	bl	11fe8 <__assert_fail@plt>
   1b218:	ldr	r3, [pc, #408]	; 1b3b8 <__assert_fail@plt+0x93d0>
   1b21c:	ldr	r2, [pc, #436]	; 1b3d8 <__assert_fail@plt+0x93f0>
   1b220:	ldr	r1, [pc, #408]	; 1b3c0 <__assert_fail@plt+0x93d8>
   1b224:	ldr	r0, [pc, #432]	; 1b3dc <__assert_fail@plt+0x93f4>
   1b228:	bl	11fe8 <__assert_fail@plt>
   1b22c:	ldrd	r2, [r5, #152]	; 0x98
   1b230:	add	r0, sp, #332	; 0x14c
   1b234:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b238:	ldrd	r2, [r5]
   1b23c:	mov	r4, r0
   1b240:	add	r0, sp, #356	; 0x164
   1b244:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b248:	ldr	r3, [sp, #16]
   1b24c:	mov	r1, r4
   1b250:	ldr	r3, [r3]
   1b254:	mov	r2, r0
   1b258:	ldr	r0, [pc, #384]	; 1b3e0 <__assert_fail@plt+0x93f8>
   1b25c:	bl	1f558 <__assert_fail@plt+0xd570>
   1b260:	mov	r0, r1
   1b264:	bl	11ab4 <free@plt>
   1b268:	b	1b278 <__assert_fail@plt+0x9290>
   1b26c:	ldr	r3, [r5, #32]
   1b270:	ldr	r0, [r3, sl, lsl #2]
   1b274:	bl	11ab4 <free@plt>
   1b278:	ldrd	r2, [r5, #80]	; 0x50
   1b27c:	subs	sl, sl, #1
   1b280:	sbc	fp, fp, #0
   1b284:	cmp	r2, sl
   1b288:	sbcs	r3, r3, fp
   1b28c:	blt	1b26c <__assert_fail@plt+0x9284>
   1b290:	subs	r3, r6, #1
   1b294:	sbc	r2, r7, #0
   1b298:	str	r2, [r4, #12]
   1b29c:	str	r3, [r4, #8]
   1b2a0:	bl	1756c <__assert_fail@plt+0x5584>
   1b2a4:	ldr	r3, [pc, #268]	; 1b3b8 <__assert_fail@plt+0x93d0>
   1b2a8:	ldr	r2, [pc, #308]	; 1b3e4 <__assert_fail@plt+0x93fc>
   1b2ac:	ldr	r1, [pc, #268]	; 1b3c0 <__assert_fail@plt+0x93d8>
   1b2b0:	ldr	r0, [pc, #304]	; 1b3e8 <__assert_fail@plt+0x9400>
   1b2b4:	bl	11fe8 <__assert_fail@plt>
   1b2b8:	ldrd	r2, [r5, #152]	; 0x98
   1b2bc:	add	r0, sp, #332	; 0x14c
   1b2c0:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b2c4:	mov	r1, r0
   1b2c8:	ldr	r0, [pc, #284]	; 1b3ec <__assert_fail@plt+0x9404>
   1b2cc:	bl	1f558 <__assert_fail@plt+0xd570>
   1b2d0:	ldrd	sl, [sp, #80]	; 0x50
   1b2d4:	orrs	r3, sl, fp
   1b2d8:	beq	1b324 <__assert_fail@plt+0x933c>
   1b2dc:	ldr	r3, [sp, #96]	; 0x60
   1b2e0:	cmp	r3, #0
   1b2e4:	ldrdne	r2, [sp, #72]	; 0x48
   1b2e8:	strdne	r2, [sp, #144]	; 0x90
   1b2ec:	bne	199cc <__assert_fail@plt+0x79e4>
   1b2f0:	ldrd	r2, [r5]
   1b2f4:	add	r0, sp, #332	; 0x14c
   1b2f8:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b2fc:	ldrd	r2, [r5, #152]	; 0x98
   1b300:	adds	r2, sl, r2
   1b304:	adc	r3, fp, r3
   1b308:	mov	r4, r0
   1b30c:	add	r0, sp, #356	; 0x164
   1b310:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b314:	mov	r1, r4
   1b318:	mov	r2, r0
   1b31c:	ldr	r0, [pc, #204]	; 1b3f0 <__assert_fail@plt+0x9408>
   1b320:	bl	1f558 <__assert_fail@plt+0xd570>
   1b324:	ldrd	r2, [r5, #80]	; 0x50
   1b328:	ldrd	r6, [sp, #32]
   1b32c:	ldr	r1, [pc, #192]	; 1b3f4 <__assert_fail@plt+0x940c>
   1b330:	add	r0, sp, #332	; 0x14c
   1b334:	cmp	r2, r6
   1b338:	sbcs	r3, r3, r7
   1b33c:	ldrd	r2, [r5]
   1b340:	ldr	r4, [pc, #176]	; 1b3f8 <__assert_fail@plt+0x9410>
   1b344:	movlt	r4, r1
   1b348:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b34c:	ldrd	r2, [r5, #152]	; 0x98
   1b350:	mov	r6, r0
   1b354:	add	r0, sp, #356	; 0x164
   1b358:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1b35c:	mov	r2, r6
   1b360:	mov	r1, r4
   1b364:	mov	r3, r0
   1b368:	ldr	r0, [pc, #140]	; 1b3fc <__assert_fail@plt+0x9414>
   1b36c:	bl	1f558 <__assert_fail@plt+0xd570>
   1b370:			; <UNDEFINED> instruction: 0x0004a6bc
   1b374:	andeq	sl, r4, r0, ror #13
   1b378:	andeq	r4, r3, r4, ror #5
   1b37c:	ldrdeq	sl, [r4], -r8
   1b380:	ldrdeq	sl, [r4], -r0
   1b384:	andeq	r4, r3, ip, lsr #3
   1b388:	andeq	r4, r3, r0, asr #5
   1b38c:	andeq	r2, r3, r4, ror lr
   1b390:	andeq	r4, r3, r4, lsl #2
   1b394:	andeq	r4, r3, r8, lsl r1
   1b398:	andeq	r4, r3, ip, asr r1
   1b39c:	andeq	r4, r3, r0, lsr #3
   1b3a0:	andeq	r4, r3, r4, lsl #5
   1b3a4:	andeq	r4, r3, r8, asr r2
   1b3a8:	andeq	r3, r3, r8, ror #31
   1b3ac:	andeq	r3, r3, r4, asr #31
   1b3b0:	andeq	r3, r3, r4, asr pc
   1b3b4:	andeq	r4, r3, r0, lsl #1
   1b3b8:			; <UNDEFINED> instruction: 0x00033cb8
   1b3bc:	andeq	r0, r0, r5, lsr #9
   1b3c0:	ldrdeq	r3, [r3], -r0
   1b3c4:	andeq	r3, r3, r8, lsr pc
   1b3c8:	strdeq	r4, [r3], -r0
   1b3cc:	andeq	r0, r0, r1, asr r6
   1b3d0:	andeq	r4, r3, r0, lsl #4
   1b3d4:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1b3d8:	strdeq	r0, [r0], -r2
   1b3dc:			; <UNDEFINED> instruction: 0x00033fb4
   1b3e0:	andeq	r3, r3, r4, ror pc
   1b3e4:	andeq	r0, r0, r8, ror r7
   1b3e8:	andeq	r4, r3, r4, asr r3
   1b3ec:	andeq	r4, r3, r4, lsr #1
   1b3f0:	andeq	r4, r3, r0, asr #32
   1b3f4:	andeq	r3, r3, r0, lsr pc
   1b3f8:	andeq	r3, r3, r4, lsr #30
   1b3fc:	andeq	r4, r3, ip
   1b400:	ldr	r3, [pc, #3948]	; 1c374 <__assert_fail@plt+0xa38c>
   1b404:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b408:	mov	sl, r0
   1b40c:	sub	sp, sp, #484	; 0x1e4
   1b410:	ldr	r4, [pc, #3936]	; 1c378 <__assert_fail@plt+0xa390>
   1b414:	ldr	r3, [r3]
   1b418:	mov	r5, #0
   1b41c:	str	r4, [sp, #48]	; 0x30
   1b420:	str	r1, [sp, #52]	; 0x34
   1b424:	str	r3, [sp, #476]	; 0x1dc
   1b428:	ldr	r0, [r4], #4
   1b42c:	cmp	r0, #0
   1b430:	beq	1b43c <__assert_fail@plt+0x9454>
   1b434:	bl	11ab4 <free@plt>
   1b438:	str	r5, [r4, #-4]
   1b43c:	ldr	r3, [pc, #3896]	; 1c37c <__assert_fail@plt+0xa394>
   1b440:	cmp	r3, r4
   1b444:	bne	1b428 <__assert_fail@plt+0x9440>
   1b448:	sub	r6, r3, #64	; 0x40
   1b44c:	ldr	r0, [r6, #160]	; 0xa0
   1b450:	mov	r4, #0
   1b454:	cmp	r0, r4
   1b458:	str	r4, [r6, #44]	; 0x2c
   1b45c:	str	r4, [r6, #48]	; 0x30
   1b460:	beq	1b46c <__assert_fail@plt+0x9484>
   1b464:	bl	11ab4 <free@plt>
   1b468:	str	r4, [r6, #160]	; 0xa0
   1b46c:	ldr	r0, [r6, #164]	; 0xa4
   1b470:	cmp	r0, #0
   1b474:	beq	1b484 <__assert_fail@plt+0x949c>
   1b478:	bl	11ab4 <free@plt>
   1b47c:	mov	r3, #0
   1b480:	str	r3, [r6, #164]	; 0xa4
   1b484:	ldr	r0, [r6, #168]	; 0xa8
   1b488:	cmp	r0, #0
   1b48c:	beq	1b49c <__assert_fail@plt+0x94b4>
   1b490:	bl	11ab4 <free@plt>
   1b494:	mov	r3, #0
   1b498:	str	r3, [r6, #168]	; 0xa8
   1b49c:	ldr	r0, [r6, #172]	; 0xac
   1b4a0:	cmp	r0, #0
   1b4a4:	beq	1b4b4 <__assert_fail@plt+0x94cc>
   1b4a8:	bl	11ab4 <free@plt>
   1b4ac:	mov	r3, #0
   1b4b0:	str	r3, [r6, #172]	; 0xac
   1b4b4:	ldr	r3, [pc, #3780]	; 1c380 <__assert_fail@plt+0xa398>
   1b4b8:	mov	r5, #0
   1b4bc:	mvn	r4, #0
   1b4c0:	ldr	r3, [r3]
   1b4c4:	mov	r2, r5
   1b4c8:	sub	r3, r3, #2
   1b4cc:	cmp	r3, #1
   1b4d0:	ldr	r3, [pc, #3756]	; 1c384 <__assert_fail@plt+0xa39c>
   1b4d4:	ldr	r1, [r6, #112]	; 0x70
   1b4d8:	ldr	r0, [r6, #8]
   1b4dc:	strb	r5, [r3]
   1b4e0:	strb	r5, [r3, #1]
   1b4e4:	ldr	r3, [pc, #3904]	; 1c42c <__assert_fail@plt+0xa444>
   1b4e8:	movls	sl, r5
   1b4ec:	strb	r5, [r6, #176]	; 0xb0
   1b4f0:	strb	r5, [r3]
   1b4f4:	strb	r5, [r3, #1]
   1b4f8:	ldr	r3, [pc, #3888]	; 1c430 <__assert_fail@plt+0xa448>
   1b4fc:	str	r5, [r6, #180]	; 0xb4
   1b500:	str	r5, [r6, #184]	; 0xb8
   1b504:	str	r4, [r3, #8]
   1b508:	str	r4, [r3]
   1b50c:	str	r5, [r6, #16]
   1b510:	str	r5, [r6, #28]
   1b514:	str	r5, [r6, #24]
   1b518:	str	r4, [sp, #100]	; 0x64
   1b51c:	str	r4, [sp, #104]	; 0x68
   1b520:	str	r4, [sp, #108]	; 0x6c
   1b524:	bl	20fd0 <__assert_fail@plt+0xefe8>
   1b528:	ldr	r3, [r6, #120]	; 0x78
   1b52c:	ldr	r2, [r6, #124]	; 0x7c
   1b530:	adds	r3, r3, r4
   1b534:	adc	r2, r2, r4
   1b538:	str	r3, [r6]
   1b53c:	str	r2, [r6, #4]
   1b540:	mov	r3, #0
   1b544:	mov	r2, #0
   1b548:	mov	r8, r5
   1b54c:	mov	fp, r5
   1b550:	str	r5, [sp, #20]
   1b554:	str	r4, [sp, #12]
   1b558:	str	r5, [sp, #44]	; 0x2c
   1b55c:	str	r5, [sp, #40]	; 0x28
   1b560:	str	r5, [sp, #24]
   1b564:	strd	r2, [sp, #32]
   1b568:	ldr	r0, [r6, #8]
   1b56c:	bl	11b38 <ftell@plt>
   1b570:	mov	r3, #0
   1b574:	mov	r2, r3
   1b578:	mov	r1, r3
   1b57c:	str	r0, [sp, #8]
   1b580:	mov	r0, r3
   1b584:	bl	177dc <__assert_fail@plt+0x57f4>
   1b588:	cmn	r0, #1
   1b58c:	beq	1c8e8 <__assert_fail@plt+0xa900>
   1b590:	cmp	r0, #0
   1b594:	beq	1c0a4 <__assert_fail@plt+0xa0bc>
   1b598:	ldr	r3, [pc, #3560]	; 1c388 <__assert_fail@plt+0xa3a0>
   1b59c:	cmp	r0, #1
   1b5a0:	mov	r4, #0
   1b5a4:	ldr	r2, [r3]
   1b5a8:	moveq	r3, #0
   1b5ac:	addne	r0, r2, r0
   1b5b0:	ldrbne	r3, [r0, #-2]
   1b5b4:	subne	r3, r3, #13
   1b5b8:	clzne	r3, r3
   1b5bc:	lsrne	r3, r3, #5
   1b5c0:	str	r3, [sp, #16]
   1b5c4:	ldrb	r9, [r2]
   1b5c8:	mov	r5, r2
   1b5cc:	add	r2, r2, #1
   1b5d0:	cmp	r9, #9
   1b5d4:	cmpne	r9, #32
   1b5d8:	beq	1b5ec <__assert_fail@plt+0x9604>
   1b5dc:	cmp	r9, #88	; 0x58
   1b5e0:	bne	1b600 <__assert_fail@plt+0x9618>
   1b5e4:	add	r4, r4, #1
   1b5e8:	b	1b5c4 <__assert_fail@plt+0x95dc>
   1b5ec:	cmp	r9, #9
   1b5f0:	bne	1b5e4 <__assert_fail@plt+0x95fc>
   1b5f4:	add	r4, r4, #8
   1b5f8:	bic	r4, r4, #7
   1b5fc:	b	1b5c4 <__assert_fail@plt+0x95dc>
   1b600:	sub	r1, r9, #48	; 0x30
   1b604:	cmp	r1, #9
   1b608:	bls	1b840 <__assert_fail@plt+0x9858>
   1b60c:	mov	r7, fp
   1b610:	ldr	r3, [sp, #12]
   1b614:	eor	r2, sl, #1
   1b618:	ands	r3, r2, r3, lsr #31
   1b61c:	beq	1b65c <__assert_fail@plt+0x9674>
   1b620:	mov	r0, r5
   1b624:	bl	175b4 <__assert_fail@plt+0x55cc>
   1b628:	cmp	r0, #0
   1b62c:	moveq	r2, r7
   1b630:	orrne	r2, r7, #1
   1b634:	tst	r2, #255	; 0xff
   1b638:	beq	1b65c <__assert_fail@plt+0x9674>
   1b63c:	ldrd	r2, [r6]
   1b640:	str	r0, [sp, #40]	; 0x28
   1b644:	str	r4, [r6, #20]
   1b648:	strd	r2, [sp, #32]
   1b64c:	ldr	r3, [sp, #8]
   1b650:	str	r3, [sp, #12]
   1b654:	ldr	r3, [sp, #16]
   1b658:	strb	r3, [r6, #13]
   1b65c:	cmp	r8, #0
   1b660:	bne	1b67c <__assert_fail@plt+0x9694>
   1b664:	mov	r2, #4
   1b668:	ldr	r1, [pc, #3356]	; 1c38c <__assert_fail@plt+0xa3a4>
   1b66c:	mov	r0, r5
   1b670:	bl	11f94 <strncmp@plt>
   1b674:	cmp	r0, #0
   1b678:	beq	1ba30 <__assert_fail@plt+0x9a48>
   1b67c:	mov	r2, #4
   1b680:	ldr	r1, [pc, #3336]	; 1c390 <__assert_fail@plt+0xa3a8>
   1b684:	mov	r0, r5
   1b688:	bl	11f94 <strncmp@plt>
   1b68c:	cmp	r0, #0
   1b690:	beq	1b814 <__assert_fail@plt+0x982c>
   1b694:	mov	r2, #6
   1b698:	ldr	r1, [pc, #3316]	; 1c394 <__assert_fail@plt+0xa3ac>
   1b69c:	mov	r0, r5
   1b6a0:	bl	11f94 <strncmp@plt>
   1b6a4:	subs	r3, r0, #0
   1b6a8:	beq	1ba0c <__assert_fail@plt+0x9a24>
   1b6ac:	mov	r2, #7
   1b6b0:	ldr	r1, [pc, #3296]	; 1c398 <__assert_fail@plt+0xa3b0>
   1b6b4:	mov	r0, r5
   1b6b8:	bl	11f94 <strncmp@plt>
   1b6bc:	cmp	r0, #0
   1b6c0:	beq	1bb3c <__assert_fail@plt+0x9b54>
   1b6c4:	mov	r2, #11
   1b6c8:	ldr	r1, [pc, #3276]	; 1c39c <__assert_fail@plt+0xa3b4>
   1b6cc:	mov	r0, r5
   1b6d0:	bl	11f94 <strncmp@plt>
   1b6d4:	cmp	r0, #0
   1b6d8:	beq	1bbec <__assert_fail@plt+0x9c04>
   1b6dc:	ldrb	r3, [r6, #176]	; 0xb0
   1b6e0:	cmp	r3, #0
   1b6e4:	str	r3, [sp, #28]
   1b6e8:	beq	1ba9c <__assert_fail@plt+0x9ab4>
   1b6ec:	mov	r2, #6
   1b6f0:	ldr	r1, [pc, #3240]	; 1c3a0 <__assert_fail@plt+0xa3b8>
   1b6f4:	mov	r0, r5
   1b6f8:	bl	11f94 <strncmp@plt>
   1b6fc:	cmp	r0, #0
   1b700:	beq	1be4c <__assert_fail@plt+0x9e64>
   1b704:	mov	r2, #9
   1b708:	ldr	r1, [pc, #3220]	; 1c3a4 <__assert_fail@plt+0xa3bc>
   1b70c:	mov	r0, r5
   1b710:	bl	11f94 <strncmp@plt>
   1b714:	cmp	r0, #0
   1b718:	bne	1bcc8 <__assert_fail@plt+0x9ce0>
   1b71c:	add	r0, r5, #9
   1b720:	bl	176f4 <__assert_fail@plt+0x570c>
   1b724:	ldr	r3, [sp, #28]
   1b728:	str	r3, [sp, #44]	; 0x2c
   1b72c:	str	r0, [r6, #180]	; 0xb4
   1b730:	cmp	sl, #0
   1b734:	bne	1bbe4 <__assert_fail@plt+0x9bfc>
   1b738:	ldr	r3, [pc, #3136]	; 1c380 <__assert_fail@plt+0xa398>
   1b73c:	ldr	r1, [sp, #12]
   1b740:	ldr	r9, [r3]
   1b744:	clz	r3, r9
   1b748:	bics	r2, r9, #2
   1b74c:	lsr	r3, r3, #5
   1b750:	moveq	sl, #1
   1b754:	movne	sl, #0
   1b758:	cmp	r9, #3
   1b75c:	movne	r2, r3
   1b760:	orreq	r2, r3, #1
   1b764:	cmp	r1, #0
   1b768:	movlt	r2, #0
   1b76c:	andge	r2, r2, #1
   1b770:	cmp	r2, #0
   1b774:	bne	1b8dc <__assert_fail@plt+0x98f4>
   1b778:	cmp	r9, #5
   1b77c:	orreq	r3, r3, #1
   1b780:	cmp	r3, #0
   1b784:	beq	1b7a0 <__assert_fail@plt+0x97b8>
   1b788:	mov	r2, #4
   1b78c:	ldr	r1, [pc, #3092]	; 1c3a8 <__assert_fail@plt+0xa3c0>
   1b790:	mov	r0, r5
   1b794:	bl	11f94 <strncmp@plt>
   1b798:	cmp	r0, #0
   1b79c:	beq	1c444 <__assert_fail@plt+0xa45c>
   1b7a0:	mov	r2, #8
   1b7a4:	ldr	r1, [pc, #3072]	; 1c3ac <__assert_fail@plt+0xa3c4>
   1b7a8:	mov	r0, r5
   1b7ac:	bl	11f94 <strncmp@plt>
   1b7b0:	cmp	r9, #4
   1b7b4:	cmpne	r9, #1
   1b7b8:	clz	r9, r0
   1b7bc:	lsr	r9, r9, #5
   1b7c0:	bhi	1b7f4 <__assert_fail@plt+0x980c>
   1b7c4:	ldr	r3, [sp, #20]
   1b7c8:	cmp	r3, r4
   1b7cc:	movne	r3, #0
   1b7d0:	andeq	r3, r8, #1
   1b7d4:	cmp	r3, #0
   1b7d8:	beq	1b7f4 <__assert_fail@plt+0x980c>
   1b7dc:	mov	r2, #4
   1b7e0:	ldr	r1, [pc, #2980]	; 1c38c <__assert_fail@plt+0xa3a4>
   1b7e4:	mov	r0, r5
   1b7e8:	bl	11f94 <strncmp@plt>
   1b7ec:	cmp	r0, #0
   1b7f0:	beq	1c538 <__assert_fail@plt+0xa550>
   1b7f4:	ands	sl, fp, sl
   1b7f8:	bne	1b9d4 <__assert_fail@plt+0x99ec>
   1b7fc:	ldr	r3, [sp, #8]
   1b800:	str	r4, [sp, #20]
   1b804:	mov	r8, r9
   1b808:	mov	fp, r7
   1b80c:	str	r3, [sp, #24]
   1b810:	b	1b568 <__assert_fail@plt+0x9580>
   1b814:	ldr	r2, [pc, #2964]	; 1c3b0 <__assert_fail@plt+0xa3c8>
   1b818:	ldr	r3, [pc, #2964]	; 1c3b4 <__assert_fail@plt+0xa3cc>
   1b81c:	ldr	r1, [pc, #3084]	; 1c430 <__assert_fail@plt+0xa448>
   1b820:	add	r0, r5, #4
   1b824:	str	r1, [sp]
   1b828:	ldr	r1, [r2]
   1b82c:	sub	r2, r3, #108	; 0x6c
   1b830:	bl	20b58 <__assert_fail@plt+0xeb70>
   1b834:	ldr	r3, [sp, #16]
   1b838:	strb	r3, [r6, #13]
   1b83c:	b	1b738 <__assert_fail@plt+0x9750>
   1b840:	ldrb	r1, [r5, #1]
   1b844:	sub	r0, r1, #48	; 0x30
   1b848:	cmp	r1, #44	; 0x2c
   1b84c:	cmpne	r0, #9
   1b850:	bhi	1b868 <__assert_fail@plt+0x9880>
   1b854:	ldrb	r1, [r2, #1]!
   1b858:	sub	r3, r1, #48	; 0x30
   1b85c:	cmp	r1, #44	; 0x2c
   1b860:	cmpne	r3, #9
   1b864:	bls	1b854 <__assert_fail@plt+0x986c>
   1b868:	sub	r0, r1, #99	; 0x63
   1b86c:	cmp	r1, #97	; 0x61
   1b870:	cmpne	r0, #1
   1b874:	bhi	1b60c <__assert_fail@plt+0x9624>
   1b878:	ldrb	r1, [r2, #1]
   1b87c:	add	r2, r2, #1
   1b880:	sub	r0, r1, #48	; 0x30
   1b884:	cmp	r1, #44	; 0x2c
   1b888:	cmpne	r0, #9
   1b88c:	bhi	1b8b4 <__assert_fail@plt+0x98cc>
   1b890:	ldrb	r1, [r2, #1]!
   1b894:	sub	r3, r1, #48	; 0x30
   1b898:	cmp	r1, #44	; 0x2c
   1b89c:	cmpne	r3, #9
   1b8a0:	bls	1b890 <__assert_fail@plt+0x98a8>
   1b8a4:	cmp	r1, #9
   1b8a8:	cmpne	r1, #32
   1b8ac:	bne	1b8c0 <__assert_fail@plt+0x98d8>
   1b8b0:	ldrb	r1, [r2, #1]!
   1b8b4:	cmp	r1, #9
   1b8b8:	cmpne	r1, #32
   1b8bc:	beq	1b8b0 <__assert_fail@plt+0x98c8>
   1b8c0:	cmp	r1, #13
   1b8c4:	addeq	r2, r2, #1
   1b8c8:	ldrb	r7, [r2]
   1b8cc:	sub	r7, r7, #10
   1b8d0:	clz	r7, r7
   1b8d4:	lsr	r7, r7, #5
   1b8d8:	b	1b610 <__assert_fail@plt+0x9628>
   1b8dc:	ldr	r1, [pc, #2772]	; 1c3b8 <__assert_fail@plt+0xa3d0>
   1b8e0:	mov	r0, r5
   1b8e4:	str	r3, [sp, #28]
   1b8e8:	bl	11a48 <strcmp@plt>
   1b8ec:	ldr	r3, [sp, #28]
   1b8f0:	cmp	r0, #0
   1b8f4:	bne	1b778 <__assert_fail@plt+0x9790>
   1b8f8:	ldr	r3, [sp, #12]
   1b8fc:	mov	r4, #3
   1b900:	str	r3, [r6, #188]	; 0xbc
   1b904:	ldrd	r2, [sp, #32]
   1b908:	strd	r2, [r6, #192]	; 0xc0
   1b90c:	ldr	r3, [r6, #180]	; 0xb4
   1b910:	ldr	r2, [r6, #184]	; 0xb8
   1b914:	ands	r3, r3, #61440	; 0xf000
   1b918:	and	r2, r2, #61440	; 0xf000
   1b91c:	str	r2, [sp, #8]
   1b920:	beq	1c01c <__assert_fail@plt+0xa034>
   1b924:	cmp	r2, #0
   1b928:	cmpne	r3, r2
   1b92c:	movne	r3, #0
   1b930:	str	r3, [sp, #8]
   1b934:	ldr	r3, [sp, #52]	; 0x34
   1b938:	ldr	r2, [sp, #8]
   1b93c:	str	r2, [r3]
   1b940:	ldr	r3, [pc, #2676]	; 1c3bc <__assert_fail@plt+0xa3d4>
   1b944:	ldr	r3, [r3]
   1b948:	cmp	r3, #0
   1b94c:	beq	1c0d8 <__assert_fail@plt+0xa0f0>
   1b950:	mov	r5, #3
   1b954:	ldr	r2, [pc, #2768]	; 1c42c <__assert_fail@plt+0xa444>
   1b958:	ldrb	r3, [r2]
   1b95c:	cmp	r3, #0
   1b960:	beq	1b970 <__assert_fail@plt+0x9988>
   1b964:	ldrb	r2, [r2, #1]
   1b968:	cmp	r2, #0
   1b96c:	bne	1bfcc <__assert_fail@plt+0x9fe4>
   1b970:	ldr	r2, [pc, #2572]	; 1c384 <__assert_fail@plt+0xa39c>
   1b974:	ldrb	r2, [r2]
   1b978:	cmp	r2, #0
   1b97c:	beq	1b990 <__assert_fail@plt+0x99a8>
   1b980:	ldr	r2, [pc, #2556]	; 1c384 <__assert_fail@plt+0xa39c>
   1b984:	ldrb	r2, [r2, #1]
   1b988:	cmp	r2, #0
   1b98c:	bne	1bfcc <__assert_fail@plt+0x9fe4>
   1b990:	cmp	r5, #3
   1b994:	bne	1c04c <__assert_fail@plt+0xa064>
   1b998:	ldr	r3, [pc, #2588]	; 1c3bc <__assert_fail@plt+0xa3d4>
   1b99c:	ldr	r0, [r3]
   1b9a0:	cmp	r0, #0
   1b9a4:	bne	1bfe4 <__assert_fail@plt+0x9ffc>
   1b9a8:	ldr	r3, [pc, #2576]	; 1c3c0 <__assert_fail@plt+0xa3d8>
   1b9ac:	mvn	r2, #0
   1b9b0:	str	r2, [r3]
   1b9b4:	ldr	r3, [pc, #2488]	; 1c374 <__assert_fail@plt+0xa38c>
   1b9b8:	ldr	r2, [sp, #476]	; 0x1dc
   1b9bc:	mov	r0, r4
   1b9c0:	ldr	r3, [r3]
   1b9c4:	cmp	r2, r3
   1b9c8:	bne	1c8b0 <__assert_fail@plt+0xa8c8>
   1b9cc:	add	sp, sp, #484	; 0x1e4
   1b9d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9d4:	mov	r2, #2
   1b9d8:	ldr	r1, [pc, #2532]	; 1c3c4 <__assert_fail@plt+0xa3dc>
   1b9dc:	mov	r0, r5
   1b9e0:	bl	11f94 <strncmp@plt>
   1b9e4:	cmp	r0, #0
   1b9e8:	beq	1c308 <__assert_fail@plt+0xa320>
   1b9ec:	mov	r0, r5
   1b9f0:	mov	r2, #2
   1b9f4:	ldr	r1, [pc, #2508]	; 1c3c8 <__assert_fail@plt+0xa3e0>
   1b9f8:	bl	11f94 <strncmp@plt>
   1b9fc:	cmp	r0, #0
   1ba00:	beq	1c308 <__assert_fail@plt+0xa320>
   1ba04:	mov	sl, #0
   1ba08:	b	1b7fc <__assert_fail@plt+0x9814>
   1ba0c:	ldr	r2, [pc, #2460]	; 1c3b0 <__assert_fail@plt+0xa3c8>
   1ba10:	str	r3, [sp]
   1ba14:	add	r0, r5, #6
   1ba18:	ldr	r1, [r2]
   1ba1c:	ldr	r2, [pc, #2472]	; 1c3cc <__assert_fail@plt+0xa3e4>
   1ba20:	bl	20b58 <__assert_fail@plt+0xeb70>
   1ba24:	ldr	r3, [sp, #16]
   1ba28:	strb	r3, [r6, #13]
   1ba2c:	b	1b738 <__assert_fail@plt+0x9750>
   1ba30:	ldr	r2, [pc, #2424]	; 1c3b0 <__assert_fail@plt+0xa3c8>
   1ba34:	ldr	r3, [pc, #2424]	; 1c3b4 <__assert_fail@plt+0xa3cc>
   1ba38:	ldr	r1, [pc, #2544]	; 1c430 <__assert_fail@plt+0xa448>
   1ba3c:	add	r0, r5, #4
   1ba40:	str	r1, [sp]
   1ba44:	ldr	r1, [r2]
   1ba48:	sub	r2, r3, #108	; 0x6c
   1ba4c:	bl	20b58 <__assert_fail@plt+0xeb70>
   1ba50:	b	1b738 <__assert_fail@plt+0x9750>
   1ba54:	mov	r2, #10
   1ba58:	ldr	r1, [pc, #2416]	; 1c3d0 <__assert_fail@plt+0xa3e8>
   1ba5c:	mov	r0, r5
   1ba60:	bl	11f94 <strncmp@plt>
   1ba64:	cmp	r0, #0
   1ba68:	beq	1c2a0 <__assert_fail@plt+0xa2b8>
   1ba6c:	mov	r2, #8
   1ba70:	ldr	r1, [pc, #2396]	; 1c3d4 <__assert_fail@plt+0xa3ec>
   1ba74:	mov	r0, r5
   1ba78:	bl	11f94 <strncmp@plt>
   1ba7c:	cmp	r0, #0
   1ba80:	beq	1c2b8 <__assert_fail@plt+0xa2d0>
   1ba84:	mov	r2, #16
   1ba88:	ldr	r1, [pc, #2376]	; 1c3d8 <__assert_fail@plt+0xa3f0>
   1ba8c:	mov	r0, r5
   1ba90:	bl	11f94 <strncmp@plt>
   1ba94:	cmp	r0, #0
   1ba98:	beq	1c8d0 <__assert_fail@plt+0xa8e8>
   1ba9c:	cmp	r9, #45	; 0x2d
   1baa0:	bne	1c4e4 <__assert_fail@plt+0xa4fc>
   1baa4:	ldrb	r3, [r5, #1]
   1baa8:	mov	r9, r5
   1baac:	cmp	r3, #32
   1bab0:	bne	1bacc <__assert_fail@plt+0x9ae4>
   1bab4:	ldrb	r3, [r9, #2]!
   1bab8:	cmp	r3, #45	; 0x2d
   1babc:	bne	1bacc <__assert_fail@plt+0x9ae4>
   1bac0:	ldrb	r3, [r9, #1]
   1bac4:	cmp	r3, #32
   1bac8:	beq	1bab4 <__assert_fail@plt+0x9acc>
   1bacc:	mov	r2, #4
   1bad0:	ldr	r1, [pc, #2308]	; 1c3dc <__assert_fail@plt+0xa3f4>
   1bad4:	mov	r0, r9
   1bad8:	bl	11f94 <strncmp@plt>
   1badc:	cmp	r0, #0
   1bae0:	bne	1b730 <__assert_fail@plt+0x9748>
   1bae4:	ldr	r3, [pc, #2244]	; 1c3b0 <__assert_fail@plt+0xa3c8>
   1bae8:	add	sl, sp, #80	; 0x50
   1baec:	str	sl, [sp]
   1baf0:	ldr	r1, [r3]
   1baf4:	ldr	r3, [pc, #2276]	; 1c3e0 <__assert_fail@plt+0xa3f8>
   1baf8:	mvn	ip, #0
   1bafc:	sub	r2, r3, #108	; 0x6c
   1bb00:	add	r0, r9, #4
   1bb04:	str	ip, [sp, #80]	; 0x50
   1bb08:	bl	20b58 <__assert_fail@plt+0xeb70>
   1bb0c:	ldr	r3, [sp, #80]	; 0x50
   1bb10:	cmn	r3, #1
   1bb14:	beq	1bb30 <__assert_fail@plt+0x9b48>
   1bb18:	sub	r3, r9, r5
   1bb1c:	ldr	r2, [pc, #2304]	; 1c424 <__assert_fail@plt+0xa43c>
   1bb20:	ldm	sl, {r0, r1}
   1bb24:	asr	r3, r3, #1
   1bb28:	str	r3, [r6, #16]
   1bb2c:	stm	r2, {r0, r1}
   1bb30:	ldr	r3, [sp, #16]
   1bb34:	strb	r3, [r6, #13]
   1bb38:	b	1b738 <__assert_fail@plt+0x9750>
   1bb3c:	bl	11d48 <__ctype_b_loc@plt>
   1bb40:	add	r3, r5, #7
   1bb44:	ldr	r1, [r0]
   1bb48:	mov	r0, r3
   1bb4c:	ldrb	r2, [r3], #1
   1bb50:	lsl	r2, r2, #1
   1bb54:	ldrh	r2, [r1, r2]
   1bb58:	tst	r2, #8192	; 0x2000
   1bb5c:	bne	1bb48 <__assert_fail@plt+0x9b60>
   1bb60:	ldr	r3, [pc, #2172]	; 1c3e4 <__assert_fail@plt+0xa3fc>
   1bb64:	str	r0, [r3]
   1bb68:	ldrb	r3, [r0]
   1bb6c:	cmp	r3, #0
   1bb70:	beq	1bd84 <__assert_fail@plt+0x9d9c>
   1bb74:	lsl	r3, r3, #1
   1bb78:	mov	r9, r0
   1bb7c:	ldrh	r3, [r1, r3]
   1bb80:	tst	r3, #8192	; 0x2000
   1bb84:	beq	1bb9c <__assert_fail@plt+0x9bb4>
   1bb88:	b	1bd24 <__assert_fail@plt+0x9d3c>
   1bb8c:	lsl	r3, r3, #1
   1bb90:	ldrh	r3, [r1, r3]
   1bb94:	tst	r3, #8192	; 0x2000
   1bb98:	bne	1bd24 <__assert_fail@plt+0x9d3c>
   1bb9c:	ldrb	r3, [r9, #1]!
   1bba0:	cmp	r3, #0
   1bba4:	bne	1bb8c <__assert_fail@plt+0x9ba4>
   1bba8:	cmp	r9, r0
   1bbac:	beq	1bd84 <__assert_fail@plt+0x9d9c>
   1bbb0:	ldrb	r3, [r9]
   1bbb4:	mov	r2, #0
   1bbb8:	strb	r2, [r9]
   1bbbc:	str	r3, [sp, #28]
   1bbc0:	ldr	r3, [pc, #2076]	; 1c3e4 <__assert_fail@plt+0xa3fc>
   1bbc4:	ldr	r0, [r3]
   1bbc8:	bl	2f518 <renameat2@@Base+0x804>
   1bbcc:	ldr	r3, [pc, #2064]	; 1c3e4 <__assert_fail@plt+0xa3fc>
   1bbd0:	cmp	sl, #0
   1bbd4:	str	r0, [r3]
   1bbd8:	ldr	r3, [sp, #28]
   1bbdc:	strb	r3, [r9]
   1bbe0:	beq	1b738 <__assert_fail@plt+0x9750>
   1bbe4:	mov	r9, r8
   1bbe8:	b	1b7fc <__assert_fail@plt+0x9814>
   1bbec:	ldr	r3, [sp, #44]	; 0x2c
   1bbf0:	cmp	r3, #0
   1bbf4:	bne	1c6a8 <__assert_fail@plt+0xa6c0>
   1bbf8:	ldr	r0, [r6, #52]	; 0x34
   1bbfc:	ldr	r9, [pc, #1964]	; 1c3b0 <__assert_fail@plt+0xa3c8>
   1bc00:	bl	11ab4 <free@plt>
   1bc04:	ldr	sl, [sp, #44]	; 0x2c
   1bc08:	ldr	r0, [r6, #56]	; 0x38
   1bc0c:	str	sl, [r6, #52]	; 0x34
   1bc10:	bl	11ab4 <free@plt>
   1bc14:	ldr	r1, [r9]
   1bc18:	add	r2, sp, #80	; 0x50
   1bc1c:	add	r0, r5, #11
   1bc20:	str	sl, [r6, #56]	; 0x38
   1bc24:	bl	20f0c <__assert_fail@plt+0xef24>
   1bc28:	cmp	r0, #0
   1bc2c:	mov	r3, r0
   1bc30:	str	r0, [r6, #52]	; 0x34
   1bc34:	beq	1bcfc <__assert_fail@plt+0x9d14>
   1bc38:	str	r0, [sp, #28]
   1bc3c:	bl	11d48 <__ctype_b_loc@plt>
   1bc40:	ldr	r3, [sp, #28]
   1bc44:	mov	sl, r0
   1bc48:	ldr	r0, [sp, #80]	; 0x50
   1bc4c:	ldr	r1, [sl]
   1bc50:	ldrb	r2, [r0]
   1bc54:	lsl	r2, r2, #1
   1bc58:	ldrh	r2, [r1, r2]
   1bc5c:	tst	r2, #8192	; 0x2000
   1bc60:	beq	1bcfc <__assert_fail@plt+0x9d14>
   1bc64:	add	r2, sp, #80	; 0x50
   1bc68:	ldr	r1, [r9]
   1bc6c:	bl	20f0c <__assert_fail@plt+0xef24>
   1bc70:	cmp	r0, #0
   1bc74:	str	r0, [r6, #56]	; 0x38
   1bc78:	beq	1bcf8 <__assert_fail@plt+0x9d10>
   1bc7c:	ldr	r2, [sp, #80]	; 0x50
   1bc80:	ldr	r1, [sl]
   1bc84:	ldrb	r3, [r2]
   1bc88:	lsl	r3, r3, #1
   1bc8c:	ldrh	r3, [r1, r3]
   1bc90:	tst	r3, #8192	; 0x2000
   1bc94:	beq	1bcac <__assert_fail@plt+0x9cc4>
   1bc98:	ldrb	r3, [r2, #1]!
   1bc9c:	lsl	r3, r3, #1
   1bca0:	ldrh	r3, [r1, r3]
   1bca4:	tst	r3, #8192	; 0x2000
   1bca8:	bne	1bc98 <__assert_fail@plt+0x9cb0>
   1bcac:	str	r2, [sp, #80]	; 0x50
   1bcb0:	ldrb	r3, [r2]
   1bcb4:	cmp	r3, #0
   1bcb8:	bne	1bcf8 <__assert_fail@plt+0x9d10>
   1bcbc:	mov	r3, #1
   1bcc0:	strb	r3, [r6, #176]	; 0xb0
   1bcc4:	b	1b738 <__assert_fail@plt+0x9750>
   1bcc8:	mov	r2, #9
   1bccc:	ldr	r1, [pc, #1812]	; 1c3e8 <__assert_fail@plt+0xa400>
   1bcd0:	mov	r0, r5
   1bcd4:	bl	11f94 <strncmp@plt>
   1bcd8:	cmp	r0, #0
   1bcdc:	bne	1bd94 <__assert_fail@plt+0x9dac>
   1bce0:	add	r0, r5, #9
   1bce4:	bl	176f4 <__assert_fail@plt+0x570c>
   1bce8:	ldr	r3, [sp, #28]
   1bcec:	str	r3, [sp, #44]	; 0x2c
   1bcf0:	str	r0, [r6, #184]	; 0xb8
   1bcf4:	b	1b730 <__assert_fail@plt+0x9748>
   1bcf8:	ldr	r3, [r6, #52]	; 0x34
   1bcfc:	mov	r0, r3
   1bd00:	bl	11ab4 <free@plt>
   1bd04:	mov	r9, #0
   1bd08:	ldr	r0, [r6, #56]	; 0x38
   1bd0c:	str	r9, [r6, #52]	; 0x34
   1bd10:	bl	11ab4 <free@plt>
   1bd14:	mov	r3, #1
   1bd18:	str	r9, [r6, #56]	; 0x38
   1bd1c:	strb	r3, [r6, #176]	; 0xb0
   1bd20:	b	1b738 <__assert_fail@plt+0x9750>
   1bd24:	ldrb	r3, [r9, #1]
   1bd28:	add	r2, r9, #1
   1bd2c:	lsl	ip, r3, #1
   1bd30:	ldrh	ip, [r1, ip]
   1bd34:	tst	ip, #8192	; 0x2000
   1bd38:	beq	1bd50 <__assert_fail@plt+0x9d68>
   1bd3c:	ldrb	r3, [r2, #1]!
   1bd40:	lsl	ip, r3, #1
   1bd44:	ldrh	ip, [r1, ip]
   1bd48:	tst	ip, #8192	; 0x2000
   1bd4c:	bne	1bd3c <__assert_fail@plt+0x9d54>
   1bd50:	cmp	r3, #0
   1bd54:	beq	1bba8 <__assert_fail@plt+0x9bc0>
   1bd58:	ldr	r2, [sp, #8]
   1bd5c:	add	r0, sp, #452	; 0x1c4
   1bd60:	asr	r3, r2, #31
   1bd64:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1bd68:	mov	r1, r0
   1bd6c:	ldr	r0, [pc, #1656]	; 1c3ec <__assert_fail@plt+0xa404>
   1bd70:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1bd74:	ldr	r3, [pc, #1640]	; 1c3e4 <__assert_fail@plt+0xa3fc>
   1bd78:	ldr	r0, [r3]
   1bd7c:	cmp	r9, r0
   1bd80:	bne	1bbb0 <__assert_fail@plt+0x9bc8>
   1bd84:	ldr	r2, [pc, #1624]	; 1c3e4 <__assert_fail@plt+0xa3fc>
   1bd88:	mov	r3, #0
   1bd8c:	str	r3, [r2]
   1bd90:	b	1b730 <__assert_fail@plt+0x9748>
   1bd94:	mov	r2, #18
   1bd98:	ldr	r1, [pc, #1616]	; 1c3f0 <__assert_fail@plt+0xa408>
   1bd9c:	mov	r0, r5
   1bda0:	bl	11f94 <strncmp@plt>
   1bda4:	cmp	r0, #0
   1bda8:	bne	1bdcc <__assert_fail@plt+0x9de4>
   1bdac:	add	r0, r5, #18
   1bdb0:	bl	176f4 <__assert_fail@plt+0x570c>
   1bdb4:	ldr	r2, [sp, #28]
   1bdb8:	mov	r3, #2
   1bdbc:	str	r2, [sp, #44]	; 0x2c
   1bdc0:	str	r3, [r6, #28]
   1bdc4:	str	r0, [r6, #180]	; 0xb4
   1bdc8:	b	1b730 <__assert_fail@plt+0x9748>
   1bdcc:	mov	r2, #14
   1bdd0:	ldr	r1, [pc, #1564]	; 1c3f4 <__assert_fail@plt+0xa40c>
   1bdd4:	mov	r0, r5
   1bdd8:	bl	11f94 <strncmp@plt>
   1bddc:	cmp	r0, #0
   1bde0:	bne	1be04 <__assert_fail@plt+0x9e1c>
   1bde4:	add	r0, r5, #14
   1bde8:	bl	176f4 <__assert_fail@plt+0x570c>
   1bdec:	ldr	r2, [sp, #28]
   1bdf0:	mov	r3, #2
   1bdf4:	str	r2, [sp, #44]	; 0x2c
   1bdf8:	str	r3, [r6, #24]
   1bdfc:	str	r0, [r6, #184]	; 0xb8
   1be00:	b	1b730 <__assert_fail@plt+0x9748>
   1be04:	mov	r2, #12
   1be08:	ldr	r1, [pc, #1512]	; 1c3f8 <__assert_fail@plt+0xa410>
   1be0c:	mov	r0, r5
   1be10:	bl	11f94 <strncmp@plt>
   1be14:	cmp	r0, #0
   1be18:	beq	1bfb4 <__assert_fail@plt+0x9fcc>
   1be1c:	mov	r2, #10
   1be20:	ldr	r1, [pc, #1492]	; 1c3fc <__assert_fail@plt+0xa414>
   1be24:	mov	r0, r5
   1be28:	bl	11f94 <strncmp@plt>
   1be2c:	cmp	r0, #0
   1be30:	bne	1ba54 <__assert_fail@plt+0x9a6c>
   1be34:	ldr	r2, [sp, #28]
   1be38:	mov	r3, #1
   1be3c:	str	r2, [sp, #44]	; 0x2c
   1be40:	ldr	r2, [pc, #1508]	; 1c42c <__assert_fail@plt+0xa444>
   1be44:	strb	r3, [r2, #1]
   1be48:	b	1b730 <__assert_fail@plt+0x9748>
   1be4c:	ldrb	r3, [r5, #6]
   1be50:	add	r1, r5, #6
   1be54:	str	r1, [sp, #28]
   1be58:	sub	r2, r3, #97	; 0x61
   1be5c:	sub	r3, r3, #48	; 0x30
   1be60:	cmp	r3, #9
   1be64:	cmphi	r2, #5
   1be68:	bls	1be74 <__assert_fail@plt+0x9e8c>
   1be6c:	b	1b730 <__assert_fail@plt+0x9748>
   1be70:	mov	r1, r2
   1be74:	ldrb	r3, [r1, #1]
   1be78:	add	r2, r1, #1
   1be7c:	sub	ip, r3, #48	; 0x30
   1be80:	sub	r0, r3, #97	; 0x61
   1be84:	cmp	r0, #5
   1be88:	cmphi	ip, #9
   1be8c:	bls	1be70 <__assert_fail@plt+0x9e88>
   1be90:	ldr	r0, [sp, #28]
   1be94:	subs	r0, r0, r2
   1be98:	movne	r0, #1
   1be9c:	cmp	r3, #46	; 0x2e
   1bea0:	movne	r0, #0
   1bea4:	cmp	r0, #0
   1bea8:	beq	1b730 <__assert_fail@plt+0x9748>
   1beac:	ldrb	r3, [r2, #1]
   1beb0:	cmp	r3, #46	; 0x2e
   1beb4:	bne	1b730 <__assert_fail@plt+0x9748>
   1beb8:	ldrb	r0, [r2, #2]
   1bebc:	add	r9, r1, #3
   1bec0:	str	r9, [sp, #56]	; 0x38
   1bec4:	sub	ip, r0, #97	; 0x61
   1bec8:	sub	r1, r0, #48	; 0x30
   1becc:	cmp	r1, #9
   1bed0:	cmphi	ip, #5
   1bed4:	movls	r3, #1
   1bed8:	movhi	r3, #0
   1bedc:	str	r3, [sp, #60]	; 0x3c
   1bee0:	bhi	1b730 <__assert_fail@plt+0x9748>
   1bee4:	ldrb	r1, [r9, #1]!
   1bee8:	sub	r0, r1, #48	; 0x30
   1beec:	sub	r3, r1, #97	; 0x61
   1bef0:	cmp	r3, #5
   1bef4:	cmphi	r0, #9
   1bef8:	bls	1bee4 <__assert_fail@plt+0x9efc>
   1befc:	ldr	r3, [sp, #56]	; 0x38
   1bf00:	str	r2, [sp, #68]	; 0x44
   1bf04:	cmp	r3, r9
   1bf08:	str	r1, [sp, #64]	; 0x40
   1bf0c:	beq	1b730 <__assert_fail@plt+0x9748>
   1bf10:	bl	11d48 <__ctype_b_loc@plt>
   1bf14:	ldr	r1, [sp, #64]	; 0x40
   1bf18:	ldr	r2, [sp, #68]	; 0x44
   1bf1c:	cmp	r1, #0
   1bf20:	mov	r3, r0
   1bf24:	beq	1bf3c <__assert_fail@plt+0x9f54>
   1bf28:	ldr	r0, [r0]
   1bf2c:	lsl	r1, r1, #1
   1bf30:	ldrh	r1, [r0, r1]
   1bf34:	tst	r1, #8192	; 0x2000
   1bf38:	beq	1b730 <__assert_fail@plt+0x9748>
   1bf3c:	ldr	r1, [sp, #28]
   1bf40:	ldr	r0, [pc, #1208]	; 1c400 <__assert_fail@plt+0xa418>
   1bf44:	str	r3, [sp, #44]	; 0x2c
   1bf48:	bl	17a48 <__assert_fail@plt+0x5a60>
   1bf4c:	mov	r2, r9
   1bf50:	ldr	r1, [sp, #56]	; 0x38
   1bf54:	ldr	r0, [pc, #1192]	; 1c404 <__assert_fail@plt+0xa41c>
   1bf58:	bl	17a48 <__assert_fail@plt+0x5a60>
   1bf5c:	ldr	r0, [r6, #168]	; 0xa8
   1bf60:	bl	17c78 <__assert_fail@plt+0x5c90>
   1bf64:	str	r0, [r6, #24]
   1bf68:	ldr	r0, [r6, #172]	; 0xac
   1bf6c:	bl	17c78 <__assert_fail@plt+0x5c90>
   1bf70:	ldr	r3, [sp, #44]	; 0x2c
   1bf74:	ldr	r2, [r3]
   1bf78:	str	r0, [r6, #28]
   1bf7c:	mov	r0, r9
   1bf80:	ldrb	r3, [r9], #1
   1bf84:	lsl	r1, r3, #1
   1bf88:	ldrh	r1, [r2, r1]
   1bf8c:	tst	r1, #8192	; 0x2000
   1bf90:	bne	1bf7c <__assert_fail@plt+0x9f94>
   1bf94:	cmp	r3, #0
   1bf98:	beq	1c8ec <__assert_fail@plt+0xa904>
   1bf9c:	bl	176f4 <__assert_fail@plt+0x570c>
   1bfa0:	ldr	r3, [sp, #60]	; 0x3c
   1bfa4:	str	r3, [sp, #44]	; 0x2c
   1bfa8:	str	r0, [r6, #184]	; 0xb8
   1bfac:	str	r0, [r6, #180]	; 0xb4
   1bfb0:	b	1b730 <__assert_fail@plt+0x9748>
   1bfb4:	ldr	r2, [sp, #28]
   1bfb8:	mov	r3, #1
   1bfbc:	str	r2, [sp, #44]	; 0x2c
   1bfc0:	ldr	r2, [pc, #1124]	; 1c42c <__assert_fail@plt+0xa444>
   1bfc4:	strb	r3, [r2]
   1bfc8:	b	1b730 <__assert_fail@plt+0x9748>
   1bfcc:	ldr	r2, [pc, #1000]	; 1c3bc <__assert_fail@plt+0xa3d4>
   1bfd0:	ldr	r0, [r2]
   1bfd4:	cmp	r0, #0
   1bfd8:	beq	1c334 <__assert_fail@plt+0xa34c>
   1bfdc:	cmp	r5, #3
   1bfe0:	bne	1c04c <__assert_fail@plt+0xa064>
   1bfe4:	ldr	r5, [pc, #1052]	; 1c408 <__assert_fail@plt+0xa420>
   1bfe8:	mov	r1, r5
   1bfec:	bl	21150 <__assert_fail@plt+0xf168>
   1bff0:	ldr	r2, [pc, #968]	; 1c3c0 <__assert_fail@plt+0xa3d8>
   1bff4:	cmp	r0, #0
   1bff8:	mov	r3, r0
   1bffc:	str	r0, [r2]
   1c000:	beq	1c2d0 <__assert_fail@plt+0xa2e8>
   1c004:	ldr	r3, [pc, #944]	; 1c3bc <__assert_fail@plt+0xa3d4>
   1c008:	mov	r2, #1
   1c00c:	mov	r1, r2
   1c010:	ldr	r0, [r3]
   1c014:	bl	17a7c <__assert_fail@plt+0x5a94>
   1c018:	b	1b9b4 <__assert_fail@plt+0x99cc>
   1c01c:	ldr	r3, [sp, #8]
   1c020:	cmp	r3, #0
   1c024:	moveq	r3, #32768	; 0x8000
   1c028:	str	r3, [sp, #8]
   1c02c:	b	1b934 <__assert_fail@plt+0x994c>
   1c030:	ldrb	r3, [r7]
   1c034:	eor	r3, r3, #1
   1c038:	add	r3, r6, r3, lsl #2
   1c03c:	ldr	r0, [r3, #52]	; 0x34
   1c040:	bl	17f64 <__assert_fail@plt+0x5f7c>
   1c044:	cmp	r0, #0
   1c048:	beq	1c52c <__assert_fail@plt+0xa544>
   1c04c:	lsl	r7, r5, #2
   1c050:	add	r6, r6, r7
   1c054:	ldr	r0, [r6, #52]	; 0x34
   1c058:	bl	2f518 <renameat2@@Base+0x804>
   1c05c:	add	r1, r5, r5, lsl #1
   1c060:	add	r3, sp, #480	; 0x1e0
   1c064:	add	r1, r5, r1, lsl #2
   1c068:	add	r7, r3, r7
   1c06c:	add	r1, r3, r1, lsl #3
   1c070:	ldr	r3, [pc, #916]	; 1c40c <__assert_fail@plt+0xa424>
   1c074:	ldr	r2, [r7, #-380]	; 0xfffffe84
   1c078:	ldr	ip, [pc, #832]	; 1c3c0 <__assert_fail@plt+0xa3d8>
   1c07c:	str	r2, [r3]
   1c080:	ldr	r3, [pc, #820]	; 1c3bc <__assert_fail@plt+0xa3d4>
   1c084:	ldr	lr, [r7, #-392]	; 0xfffffe78
   1c088:	sub	r1, r1, #344	; 0x158
   1c08c:	mov	r2, #104	; 0x68
   1c090:	str	lr, [ip]
   1c094:	str	r0, [r3]
   1c098:	ldr	r0, [pc, #872]	; 1c408 <__assert_fail@plt+0xa420>
   1c09c:	bl	11afc <memcpy@plt>
   1c0a0:	b	1b9b4 <__assert_fail@plt+0x99cc>
   1c0a4:	ldr	r3, [sp, #40]	; 0x28
   1c0a8:	mov	r4, r0
   1c0ac:	cmp	r3, #0
   1c0b0:	bne	1b8f8 <__assert_fail@plt+0x9910>
   1c0b4:	ldr	r1, [sp, #44]	; 0x2c
   1c0b8:	ldrd	r2, [r6]
   1c0bc:	cmp	r1, #0
   1c0c0:	ldr	r1, [sp, #8]
   1c0c4:	strd	r2, [r6, #192]	; 0xc0
   1c0c8:	str	r1, [r6, #188]	; 0xbc
   1c0cc:	beq	1b9b4 <__assert_fail@plt+0x99cc>
   1c0d0:	mov	r4, #5
   1c0d4:	b	1b90c <__assert_fail@plt+0x9924>
   1c0d8:	ldr	r3, [pc, #816]	; 1c410 <__assert_fail@plt+0xa428>
   1c0dc:	ldr	r8, [r6, #52]	; 0x34
   1c0e0:	ldrb	r3, [r3]
   1c0e4:	cmp	r3, #0
   1c0e8:	beq	1c278 <__assert_fail@plt+0xa290>
   1c0ec:	ldr	r9, [pc, #800]	; 1c414 <__assert_fail@plt+0xa42c>
   1c0f0:	add	sl, sp, #136	; 0x88
   1c0f4:	mov	r7, #3
   1c0f8:	mov	r5, #0
   1c0fc:	b	1c154 <__assert_fail@plt+0xa16c>
   1c100:	add	r3, sp, #480	; 0x1e0
   1c104:	add	fp, r3, fp
   1c108:	add	r2, sp, #88	; 0x58
   1c10c:	ldr	r3, [fp, #-392]	; 0xfffffe78
   1c110:	cmp	r3, #0
   1c114:	str	r3, [r2, r5, lsl #2]
   1c118:	bne	1c19c <__assert_fail@plt+0xa1b4>
   1c11c:	add	r1, r7, r7, lsl #1
   1c120:	add	r3, sp, #480	; 0x1e0
   1c124:	add	r1, r7, r1, lsl #2
   1c128:	mov	r2, #104	; 0x68
   1c12c:	add	r1, r3, r1, lsl #3
   1c130:	mov	r0, sl
   1c134:	sub	r1, r1, #344	; 0x158
   1c138:	bl	11afc <memcpy@plt>
   1c13c:	mov	r7, r5
   1c140:	add	r5, r5, #1
   1c144:	cmp	r5, #3
   1c148:	add	sl, sl, #104	; 0x68
   1c14c:	beq	1c1b0 <__assert_fail@plt+0xa1c8>
   1c150:	ldr	r8, [r9], #4
   1c154:	cmp	r8, #0
   1c158:	beq	1c140 <__assert_fail@plt+0xa158>
   1c15c:	cmp	r7, #3
   1c160:	beq	1c180 <__assert_fail@plt+0xa198>
   1c164:	lsl	fp, r7, #2
   1c168:	add	r3, r6, fp
   1c16c:	mov	r1, r8
   1c170:	ldr	r0, [r3, #52]	; 0x34
   1c174:	bl	11a48 <strcmp@plt>
   1c178:	cmp	r0, #0
   1c17c:	beq	1c100 <__assert_fail@plt+0xa118>
   1c180:	mov	r0, r8
   1c184:	mov	r1, sl
   1c188:	bl	21150 <__assert_fail@plt+0xf168>
   1c18c:	add	r3, sp, #88	; 0x58
   1c190:	cmp	r0, #0
   1c194:	str	r0, [r3, r5, lsl #2]
   1c198:	beq	1c238 <__assert_fail@plt+0xa250>
   1c19c:	mov	r7, r5
   1c1a0:	add	r5, r5, #1
   1c1a4:	cmp	r5, #3
   1c1a8:	add	sl, sl, #104	; 0x68
   1c1ac:	bne	1c150 <__assert_fail@plt+0xa168>
   1c1b0:	ldr	r3, [pc, #600]	; 1c410 <__assert_fail@plt+0xa428>
   1c1b4:	ldrb	r8, [r3]
   1c1b8:	cmp	r8, #0
   1c1bc:	bne	1b954 <__assert_fail@plt+0x996c>
   1c1c0:	add	sl, sp, #88	; 0x58
   1c1c4:	mov	r0, sl
   1c1c8:	bl	18034 <__assert_fail@plt+0x604c>
   1c1cc:	cmp	r0, #3
   1c1d0:	mov	r5, r0
   1c1d4:	beq	1c6c0 <__assert_fail@plt+0xa6d8>
   1c1d8:	cmp	r7, #3
   1c1dc:	beq	1b954 <__assert_fail@plt+0x996c>
   1c1e0:	add	r3, r5, r5, lsl #1
   1c1e4:	add	r2, sp, #480	; 0x1e0
   1c1e8:	add	r3, r5, r3, lsl #2
   1c1ec:	ldr	r1, [sp, #8]
   1c1f0:	lsl	r3, r3, #3
   1c1f4:	add	r2, r2, r3
   1c1f8:	ldr	r2, [r2, #-328]	; 0xfffffeb8
   1c1fc:	and	r2, r2, #61440	; 0xf000
   1c200:	cmp	r2, r1
   1c204:	bne	1b954 <__assert_fail@plt+0x996c>
   1c208:	add	r2, sp, #144	; 0x90
   1c20c:	add	r3, r2, r3
   1c210:	add	r2, r6, r5, lsl #2
   1c214:	ldr	r1, [r3, #44]	; 0x2c
   1c218:	ldr	ip, [r3, #40]	; 0x28
   1c21c:	ldr	r0, [r2, #52]	; 0x34
   1c220:	orrs	r3, ip, r1
   1c224:	moveq	r2, #1
   1c228:	movne	r2, #0
   1c22c:	mov	r1, #0
   1c230:	bl	17a7c <__assert_fail@plt+0x5a94>
   1c234:	b	1b954 <__assert_fail@plt+0x996c>
   1c238:	mov	r0, sl
   1c23c:	bl	1ee54 <__assert_fail@plt+0xce6c>
   1c240:	cmp	r0, #2
   1c244:	addeq	r3, sp, #88	; 0x58
   1c248:	moveq	r7, r5
   1c24c:	streq	r0, [r3, r5, lsl #2]
   1c250:	beq	1c140 <__assert_fail@plt+0xa158>
   1c254:	ldr	r3, [pc, #436]	; 1c410 <__assert_fail@plt+0xa428>
   1c258:	ldrb	r3, [r3]
   1c25c:	cmp	r3, #0
   1c260:	beq	1c19c <__assert_fail@plt+0xa1b4>
   1c264:	ldr	r0, [r9, #-4]
   1c268:	bl	17f64 <__assert_fail@plt+0x5f7c>
   1c26c:	cmp	r0, #0
   1c270:	beq	1c19c <__assert_fail@plt+0xa1b4>
   1c274:	b	1c1b0 <__assert_fail@plt+0xa1c8>
   1c278:	cmp	r8, #0
   1c27c:	beq	1c698 <__assert_fail@plt+0xa6b0>
   1c280:	ldr	r0, [r6, #60]	; 0x3c
   1c284:	cmp	r0, #0
   1c288:	beq	1c0ec <__assert_fail@plt+0xa104>
   1c28c:	bl	11ab4 <free@plt>
   1c290:	mov	r3, #0
   1c294:	ldr	r8, [r6, #52]	; 0x34
   1c298:	str	r3, [r6, #60]	; 0x3c
   1c29c:	b	1c0ec <__assert_fail@plt+0xa104>
   1c2a0:	ldr	r2, [sp, #28]
   1c2a4:	mov	r3, #1
   1c2a8:	str	r2, [sp, #44]	; 0x2c
   1c2ac:	ldr	r2, [pc, #208]	; 1c384 <__assert_fail@plt+0xa39c>
   1c2b0:	strb	r3, [r2]
   1c2b4:	b	1b730 <__assert_fail@plt+0x9748>
   1c2b8:	ldr	r2, [sp, #28]
   1c2bc:	mov	r3, #1
   1c2c0:	str	r2, [sp, #44]	; 0x2c
   1c2c4:	ldr	r2, [pc, #184]	; 1c384 <__assert_fail@plt+0xa39c>
   1c2c8:	strb	r3, [r2, #1]
   1c2cc:	b	1b730 <__assert_fail@plt+0x9748>
   1c2d0:	ldr	r2, [r5, #16]
   1c2d4:	ldr	r1, [sp, #8]
   1c2d8:	and	r2, r2, #61440	; 0xf000
   1c2dc:	cmp	r2, r1
   1c2e0:	bne	1b9b4 <__assert_fail@plt+0x99cc>
   1c2e4:	ldr	r2, [r5, #52]	; 0x34
   1c2e8:	ldr	r1, [r5, #48]	; 0x30
   1c2ec:	ldr	r0, [pc, #200]	; 1c3bc <__assert_fail@plt+0xa3d4>
   1c2f0:	orrs	r2, r1, r2
   1c2f4:	moveq	r2, #1
   1c2f8:	ldr	r0, [r0]
   1c2fc:	mov	r1, r3
   1c300:	movne	r2, #0
   1c304:	b	1c014 <__assert_fail@plt+0xa02c>
   1c308:	ldr	r3, [r6]
   1c30c:	ldr	r2, [r6, #4]
   1c310:	subs	r3, r3, #1
   1c314:	ldr	r1, [sp, #24]
   1c318:	sbc	r2, r2, #0
   1c31c:	str	r4, [r6, #20]
   1c320:	str	r1, [r6, #188]	; 0xbc
   1c324:	str	r3, [r6, #192]	; 0xc0
   1c328:	str	r2, [r6, #196]	; 0xc4
   1c32c:	mov	r4, #2
   1c330:	b	1b90c <__assert_fail@plt+0x9924>
   1c334:	cmp	r5, #1
   1c338:	bls	1c4f4 <__assert_fail@plt+0xa50c>
   1c33c:	cmp	r3, #0
   1c340:	beq	1c4ec <__assert_fail@plt+0xa504>
   1c344:	ldr	r3, [pc, #224]	; 1c42c <__assert_fail@plt+0xa444>
   1c348:	ldr	r1, [pc, #216]	; 1c428 <__assert_fail@plt+0xa440>
   1c34c:	ldrb	r2, [r3, #1]
   1c350:	ldr	r3, [pc, #192]	; 1c418 <__assert_fail@plt+0xa430>
   1c354:	cmp	r2, #0
   1c358:	movne	r1, r3
   1c35c:	ldr	r0, [pc, #184]	; 1c41c <__assert_fail@plt+0xa434>
   1c360:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1c364:	ldr	r3, [pc, #180]	; 1c420 <__assert_fail@plt+0xa438>
   1c368:	mov	r2, #1
   1c36c:	strb	r2, [r3]
   1c370:	b	1b990 <__assert_fail@plt+0x99a8>
   1c374:	andeq	r7, r4, r8, lsl #30
   1c378:			; <UNDEFINED> instruction: 0x0004a3b4
   1c37c:	andeq	sl, r4, r0, asr #7
   1c380:	andeq	sl, r4, r0, ror #13
   1c384:			; <UNDEFINED> instruction: 0x0004a7b0
   1c388:	andeq	sl, r4, r0, ror r7
   1c38c:	andeq	r4, r3, ip, lsl #7
   1c390:	muleq	r3, r4, r3
   1c394:	muleq	r3, ip, r3
   1c398:	andeq	r4, r3, r4, lsr #7
   1c39c:	andeq	r4, r3, r0, ror #7
   1c3a0:	andeq	r4, r3, ip, ror #7
   1c3a4:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1c3a8:	andeq	r2, r3, r0, lsr #26
   1c3ac:	andeq	r3, r3, r4, asr #30
   1c3b0:	andeq	sl, r4, r8, ror r7
   1c3b4:	andeq	sl, r4, r0, lsr #8
   1c3b8:	andeq	r4, r3, r8, asr r6
   1c3bc:	andeq	sl, r4, r4, ror r7
   1c3c0:	ldrdeq	sl, [r4], -r4
   1c3c4:	andeq	r4, r3, r0, lsl #9
   1c3c8:	andeq	r4, r3, r4, lsl #9
   1c3cc:			; <UNDEFINED> instruction: 0x0004a3bc
   1c3d0:	andeq	r4, r3, ip, asr #8
   1c3d4:	andeq	r4, r3, r8, asr r4
   1c3d8:	andeq	r4, r3, r4, ror #8
   1c3dc:	andeq	r4, r3, r8, ror r4
   1c3e0:	andeq	sl, r4, r4, lsr #8
   1c3e4:	ldrdeq	sl, [r4], -r0
   1c3e8:	andeq	r4, r3, r0, lsl #8
   1c3ec:	andeq	r4, r3, ip, lsr #7
   1c3f0:	andeq	r4, r3, ip, lsl #8
   1c3f4:	andeq	r4, r3, r0, lsr #8
   1c3f8:	andeq	r4, r3, r0, lsr r4
   1c3fc:	andeq	r4, r3, r0, asr #8
   1c400:	andeq	sl, r4, r8, lsr #8
   1c404:	andeq	sl, r4, ip, lsr #8
   1c408:	andeq	sl, r4, r0, lsl #14
   1c40c:	muleq	r4, r8, r7
   1c410:	andeq	sl, r4, r9, ror #14
   1c414:			; <UNDEFINED> instruction: 0x0004a3b8
   1c418:	andeq	r4, r3, r4, lsl #7
   1c41c:	andeq	r4, r3, r8, lsl #9
   1c420:	ldrdeq	sl, [r4], -ip
   1c424:			; <UNDEFINED> instruction: 0x0004a7bc
   1c428:	andeq	r4, r3, ip, ror r3
   1c42c:	andeq	sl, r4, r4, asr #15
   1c430:			; <UNDEFINED> instruction: 0x0004a7b4
   1c434:	strdeq	sl, [r4], -r4
   1c438:	andeq	sl, r4, r4, asr #13
   1c43c:			; <UNDEFINED> instruction: 0x0004a6b8
   1c440:	andeq	sl, r4, r0, asr #7
   1c444:	ldr	r3, [pc, #-40]	; 1c424 <__assert_fail@plt+0xa43c>
   1c448:	ldr	r2, [r6, #52]	; 0x34
   1c44c:	sub	r7, r3, #8
   1c450:	ldmdb	r3, {ip, lr}
   1c454:	ldm	r3, {r0, r1}
   1c458:	ldr	r3, [r6, #164]	; 0xa4
   1c45c:	str	lr, [r7, #12]
   1c460:	stm	r7, {r0, r1}
   1c464:	ldr	lr, [r6, #160]	; 0xa0
   1c468:	ldr	r1, [r6, #56]	; 0x38
   1c46c:	str	ip, [r7, #8]
   1c470:	str	r2, [r6, #56]	; 0x38
   1c474:	str	r1, [r6, #52]	; 0x34
   1c478:	str	lr, [r6, #164]	; 0xa4
   1c47c:	str	r3, [r6, #160]	; 0xa0
   1c480:	ldrb	r3, [r5, #4]
   1c484:	add	r2, r5, #4
   1c488:	cmp	r3, #48	; 0x30
   1c48c:	beq	1c618 <__assert_fail@plt+0xa630>
   1c490:	cmp	r3, #10
   1c494:	cmpne	r3, #32
   1c498:	beq	1c4b8 <__assert_fail@plt+0xa4d0>
   1c49c:	ldrb	r3, [r2, #1]!
   1c4a0:	cmp	r3, #32
   1c4a4:	cmpne	r3, #10
   1c4a8:	bne	1c49c <__assert_fail@plt+0xa4b4>
   1c4ac:	cmp	r3, #32
   1c4b0:	bne	1c4c0 <__assert_fail@plt+0xa4d8>
   1c4b4:	ldrb	r3, [r2, #1]!
   1c4b8:	cmp	r3, #32
   1c4bc:	beq	1c4b4 <__assert_fail@plt+0xa4cc>
   1c4c0:	cmp	r3, #43	; 0x2b
   1c4c4:	beq	1c63c <__assert_fail@plt+0xa654>
   1c4c8:	ldrd	r2, [r6]
   1c4cc:	ldr	r1, [sp, #8]
   1c4d0:	str	r4, [r6, #20]
   1c4d4:	str	r1, [r6, #188]	; 0xbc
   1c4d8:	strd	r2, [r6, #192]	; 0xc0
   1c4dc:	mov	r4, #5
   1c4e0:	b	1b90c <__assert_fail@plt+0x9924>
   1c4e4:	mov	r9, r5
   1c4e8:	b	1bacc <__assert_fail@plt+0x9ae4>
   1c4ec:	ldr	r1, [pc, #-204]	; 1c428 <__assert_fail@plt+0xa440>
   1c4f0:	b	1c35c <__assert_fail@plt+0xa374>
   1c4f4:	ldr	r7, [pc, #-192]	; 1c43c <__assert_fail@plt+0xa454>
   1c4f8:	ldrb	r2, [r7]
   1c4fc:	add	r1, r6, r2, lsl #2
   1c500:	ldr	r0, [r1, #52]	; 0x34
   1c504:	cmp	r0, #0
   1c508:	beq	1c33c <__assert_fail@plt+0xa354>
   1c50c:	eor	r2, r2, #1
   1c510:	add	r2, r6, r2, lsl #2
   1c514:	ldr	r2, [r2, #52]	; 0x34
   1c518:	cmp	r2, #0
   1c51c:	beq	1c33c <__assert_fail@plt+0xa354>
   1c520:	bl	17f64 <__assert_fail@plt+0x5f7c>
   1c524:	cmp	r0, #0
   1c528:	bne	1c030 <__assert_fail@plt+0xa048>
   1c52c:	ldr	r3, [pc, #-264]	; 1c42c <__assert_fail@plt+0xa444>
   1c530:	ldrb	r3, [r3]
   1c534:	b	1c33c <__assert_fail@plt+0xa354>
   1c538:	ldrb	r2, [r5, #4]
   1c53c:	add	r3, r5, #4
   1c540:	cmp	r2, #48	; 0x30
   1c544:	beq	1c66c <__assert_fail@plt+0xa684>
   1c548:	cmp	r2, #10
   1c54c:	beq	1c55c <__assert_fail@plt+0xa574>
   1c550:	ldrb	r2, [r3, #1]!
   1c554:	cmp	r2, #10
   1c558:	bne	1c550 <__assert_fail@plt+0xa568>
   1c55c:	ldrb	r0, [r3, #-1]
   1c560:	ldrd	r2, [r6]
   1c564:	ldr	lr, [sp, #24]
   1c568:	str	r4, [r6, #20]
   1c56c:	subs	ip, r2, #1
   1c570:	ldr	r4, [sp, #16]
   1c574:	sbc	r3, r3, #0
   1c578:	mov	r1, lr
   1c57c:	cmp	r0, #42	; 0x2a
   1c580:	mov	r2, #0
   1c584:	ldr	r0, [r6, #8]
   1c588:	strb	r4, [r6, #13]
   1c58c:	str	lr, [r6, #188]	; 0xbc
   1c590:	moveq	r4, #4
   1c594:	movne	r4, #1
   1c598:	str	ip, [r6, #192]	; 0xc0
   1c59c:	str	r3, [r6, #196]	; 0xc4
   1c5a0:	ldr	r5, [r6, #112]	; 0x70
   1c5a4:	ldrd	r8, [r6, #120]	; 0x78
   1c5a8:	bl	20fd0 <__assert_fail@plt+0xefe8>
   1c5ac:	ldr	r3, [r6]
   1c5b0:	ldr	r2, [r6, #4]
   1c5b4:	subs	r3, r3, #2
   1c5b8:	sbc	r2, r2, #0
   1c5bc:	mov	r0, r4
   1c5c0:	mov	r1, #0
   1c5c4:	str	r3, [r6]
   1c5c8:	str	r2, [r6, #4]
   1c5cc:	bl	189f4 <__assert_fail@plt+0x6a0c>
   1c5d0:	cmp	r0, #0
   1c5d4:	beq	1c60c <__assert_fail@plt+0xa624>
   1c5d8:	ldrd	r2, [r6, #88]	; 0x58
   1c5dc:	orrs	r3, r2, r3
   1c5e0:	bne	1c60c <__assert_fail@plt+0xa624>
   1c5e4:	ldrd	r2, [r6, #72]	; 0x48
   1c5e8:	cmp	r3, #0
   1c5ec:	cmpeq	r2, #1
   1c5f0:	bne	1c60c <__assert_fail@plt+0xa624>
   1c5f4:	ldr	r3, [pc, #-460]	; 1c430 <__assert_fail@plt+0xa448>
   1c5f8:	ldr	r3, [r3, #8]
   1c5fc:	cmp	r3, #0
   1c600:	moveq	r3, #2
   1c604:	movne	r3, #1
   1c608:	str	r3, [r6, #28]
   1c60c:	str	r5, [r6, #112]	; 0x70
   1c610:	strd	r8, [r6, #120]	; 0x78
   1c614:	b	1b90c <__assert_fail@plt+0x9924>
   1c618:	ldrb	r3, [r5, #5]
   1c61c:	sub	r3, r3, #48	; 0x30
   1c620:	cmp	r3, #9
   1c624:	bls	1c49c <__assert_fail@plt+0xa4b4>
   1c628:	cmp	r0, #0
   1c62c:	moveq	r3, #2
   1c630:	movne	r3, #1
   1c634:	str	r3, [r6, #24]
   1c638:	b	1c49c <__assert_fail@plt+0xa4b4>
   1c63c:	ldrb	r3, [r2, #1]
   1c640:	cmp	r3, #48	; 0x30
   1c644:	bne	1c4c8 <__assert_fail@plt+0xa4e0>
   1c648:	ldrb	r3, [r2, #2]
   1c64c:	sub	r3, r3, #48	; 0x30
   1c650:	cmp	r3, #9
   1c654:	bls	1c4c8 <__assert_fail@plt+0xa4e0>
   1c658:	cmp	ip, #0
   1c65c:	movne	r3, #1
   1c660:	moveq	r3, #2
   1c664:	str	r3, [r6, #28]
   1c668:	b	1c4c8 <__assert_fail@plt+0xa4e0>
   1c66c:	ldrb	r2, [r5, #5]
   1c670:	sub	r2, r2, #48	; 0x30
   1c674:	cmp	r2, #9
   1c678:	bls	1c550 <__assert_fail@plt+0xa568>
   1c67c:	ldr	r2, [pc, #-596]	; 1c430 <__assert_fail@plt+0xa448>
   1c680:	ldr	r2, [r2]
   1c684:	cmp	r2, #0
   1c688:	moveq	r2, #2
   1c68c:	movne	r2, #1
   1c690:	str	r2, [r6, #24]
   1c694:	b	1c550 <__assert_fail@plt+0xa568>
   1c698:	ldr	r3, [r6, #56]	; 0x38
   1c69c:	cmp	r3, #0
   1c6a0:	bne	1c280 <__assert_fail@plt+0xa298>
   1c6a4:	b	1c0ec <__assert_fail@plt+0xa104>
   1c6a8:	ldrd	r2, [r6]
   1c6ac:	ldr	r1, [sp, #8]
   1c6b0:	mov	r4, #5
   1c6b4:	str	r1, [r6, #188]	; 0xbc
   1c6b8:	strd	r2, [r6, #192]	; 0xc0
   1c6bc:	b	1b90c <__assert_fail@plt+0x9924>
   1c6c0:	ldr	r3, [pc, #-660]	; 1c434 <__assert_fail@plt+0xa44c>
   1c6c4:	ldr	r3, [r3]
   1c6c8:	cmp	r3, #0
   1c6cc:	beq	1c7c8 <__assert_fail@plt+0xa7e0>
   1c6d0:	ldr	fp, [sp, #48]	; 0x30
   1c6d4:	str	r4, [sp, #12]
   1c6d8:	ldr	r4, [fp], #4
   1c6dc:	cmp	r4, #0
   1c6e0:	beq	1c7b8 <__assert_fail@plt+0xa7d0>
   1c6e4:	ldr	r3, [pc, #-692]	; 1c438 <__assert_fail@plt+0xa450>
   1c6e8:	ldr	r0, [r3]
   1c6ec:	cmp	r0, #0
   1c6f0:	moveq	r9, r0
   1c6f4:	beq	1c708 <__assert_fail@plt+0xa720>
   1c6f8:	mov	r1, r4
   1c6fc:	bl	11a48 <strcmp@plt>
   1c700:	adds	r9, r0, #0
   1c704:	movne	r9, #1
   1c708:	cmp	r5, #3
   1c70c:	beq	1c728 <__assert_fail@plt+0xa740>
   1c710:	add	r5, r6, r5, lsl #2
   1c714:	mov	r1, r4
   1c718:	ldr	r0, [r5, #52]	; 0x34
   1c71c:	bl	11a48 <strcmp@plt>
   1c720:	cmp	r0, #0
   1c724:	beq	1c7b4 <__assert_fail@plt+0xa7cc>
   1c728:	add	r3, sp, #80	; 0x50
   1c72c:	str	r3, [sp]
   1c730:	mov	r1, r9
   1c734:	add	r3, sp, #76	; 0x4c
   1c738:	mov	r0, r4
   1c73c:	mov	r2, #0
   1c740:	bl	1ee7c <__assert_fail@plt+0xce94>
   1c744:	add	r5, sp, #100	; 0x64
   1c748:	subs	r1, r0, #0
   1c74c:	movne	r3, #1
   1c750:	moveq	r3, #0
   1c754:	str	r3, [r5, r8, lsl #2]
   1c758:	beq	1c7b4 <__assert_fail@plt+0xa7cc>
   1c75c:	add	r2, r8, r8, lsl #1
   1c760:	ldr	ip, [sp, #76]	; 0x4c
   1c764:	add	r2, r8, r2, lsl #2
   1c768:	add	r0, sp, #136	; 0x88
   1c76c:	add	r2, r0, r2, lsl #3
   1c770:	str	ip, [sp]
   1c774:	str	r2, [sp, #4]
   1c778:	mov	r3, r9
   1c77c:	mov	r2, #0
   1c780:	ldr	r0, [fp, #-4]
   1c784:	bl	20904 <__assert_fail@plt+0xe91c>
   1c788:	cmp	r0, #0
   1c78c:	movne	r3, #0
   1c790:	strne	r3, [sl, r8, lsl #2]
   1c794:	streq	r0, [r5, r8, lsl #2]
   1c798:	ldr	r0, [sp, #76]	; 0x4c
   1c79c:	bl	11ab4 <free@plt>
   1c7a0:	ldr	r0, [sp, #80]	; 0x50
   1c7a4:	bl	11ab4 <free@plt>
   1c7a8:	ldr	r3, [sl, r8, lsl #2]
   1c7ac:	cmp	r3, #0
   1c7b0:	beq	1c8b4 <__assert_fail@plt+0xa8cc>
   1c7b4:	mov	r5, r8
   1c7b8:	add	r8, r8, #1
   1c7bc:	cmp	r8, #3
   1c7c0:	bne	1c6d8 <__assert_fail@plt+0xa6f0>
   1c7c4:	ldr	r4, [sp, #12]
   1c7c8:	cmp	r7, #3
   1c7cc:	beq	1c7ec <__assert_fail@plt+0xa804>
   1c7d0:	add	r3, r6, r7, lsl #2
   1c7d4:	mov	r2, #1
   1c7d8:	ldr	r0, [r3, #52]	; 0x34
   1c7dc:	mov	r1, r2
   1c7e0:	bl	17a7c <__assert_fail@plt+0x5a94>
   1c7e4:	cmp	r0, #0
   1c7e8:	bne	1c8c8 <__assert_fail@plt+0xa8e0>
   1c7ec:	ldr	r3, [pc, #-952]	; 1c43c <__assert_fail@plt+0xa454>
   1c7f0:	ldrb	r3, [r3]
   1c7f4:	add	r3, r6, r3, lsl #2
   1c7f8:	ldr	r3, [r3, #24]
   1c7fc:	cmp	r3, #0
   1c800:	beq	1b950 <__assert_fail@plt+0x9968>
   1c804:	add	r8, sp, #112	; 0x70
   1c808:	ldr	r9, [sp, #48]	; 0x30
   1c80c:	mov	sl, r8
   1c810:	mvn	r7, #-2147483648	; 0x80000000
   1c814:	ldr	r0, [r9], #4
   1c818:	cmp	r0, #0
   1c81c:	beq	1c860 <__assert_fail@plt+0xa878>
   1c820:	ldrb	r5, [r0]
   1c824:	cmp	r5, #0
   1c828:	beq	1c854 <__assert_fail@plt+0xa86c>
   1c82c:	mov	r1, #0
   1c830:	bl	17eb0 <__assert_fail@plt+0x5ec8>
   1c834:	mov	r5, r0
   1c838:	ldr	r0, [r9, #-4]
   1c83c:	ldrb	r3, [r0]
   1c840:	cmp	r3, #0
   1c844:	beq	1c854 <__assert_fail@plt+0xa86c>
   1c848:	mov	r1, #1
   1c84c:	bl	17eb0 <__assert_fail@plt+0x5ec8>
   1c850:	sub	r5, r5, r0
   1c854:	cmp	r7, r5
   1c858:	movge	r7, r5
   1c85c:	str	r5, [sl]
   1c860:	ldr	r3, [pc, #-1064]	; 1c440 <__assert_fail@plt+0xa458>
   1c864:	add	sl, sl, #4
   1c868:	cmp	r3, r9
   1c86c:	bne	1c814 <__assert_fail@plt+0xa82c>
   1c870:	ldr	r1, [sp, #48]	; 0x30
   1c874:	add	r3, sp, #124	; 0x7c
   1c878:	ldr	r2, [r1], #4
   1c87c:	add	r8, r8, #4
   1c880:	cmp	r2, #0
   1c884:	add	r3, r3, #4
   1c888:	ldrne	r2, [r8, #-4]
   1c88c:	subne	r2, r2, r7
   1c890:	strne	r2, [r3, #-4]
   1c894:	ldr	r2, [pc, #-1116]	; 1c440 <__assert_fail@plt+0xa458>
   1c898:	cmp	r2, r1
   1c89c:	bne	1c878 <__assert_fail@plt+0xa890>
   1c8a0:	add	r0, sp, #124	; 0x7c
   1c8a4:	bl	18034 <__assert_fail@plt+0x604c>
   1c8a8:	mov	r5, r0
   1c8ac:	b	1b954 <__assert_fail@plt+0x996c>
   1c8b0:	bl	11b50 <__stack_chk_fail@plt>
   1c8b4:	cmp	r7, #3
   1c8b8:	ldr	r4, [sp, #12]
   1c8bc:	mov	r5, r8
   1c8c0:	bne	1c1e0 <__assert_fail@plt+0xa1f8>
   1c8c4:	b	1b954 <__assert_fail@plt+0x996c>
   1c8c8:	mov	r5, r7
   1c8cc:	b	1b954 <__assert_fail@plt+0x996c>
   1c8d0:	ldrd	r2, [r6]
   1c8d4:	ldr	r1, [sp, #8]
   1c8d8:	mov	r4, #6
   1c8dc:	str	r1, [r6, #188]	; 0xbc
   1c8e0:	strd	r2, [r6, #192]	; 0xc0
   1c8e4:	b	1b90c <__assert_fail@plt+0x9924>
   1c8e8:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   1c8ec:	ldr	r3, [sp, #60]	; 0x3c
   1c8f0:	str	r3, [sp, #44]	; 0x2c
   1c8f4:	b	1b730 <__assert_fail@plt+0x9748>
   1c8f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8fc:	sub	sp, sp, #44	; 0x2c
   1c900:	ldr	r4, [pc, #1180]	; 1cda4 <__assert_fail@plt+0xadbc>
   1c904:	ldr	r3, [pc, #1180]	; 1cda8 <__assert_fail@plt+0xadc0>
   1c908:	ldr	r8, [pc, #1180]	; 1cdac <__assert_fail@plt+0xadc4>
   1c90c:	ldr	ip, [r4, #112]	; 0x70
   1c910:	ldr	r3, [r3]
   1c914:	cmp	ip, #0
   1c918:	mov	r5, r0
   1c91c:	mov	r6, r1
   1c920:	str	r3, [sp, #36]	; 0x24
   1c924:	ldr	lr, [r8]
   1c928:	beq	1c940 <__assert_fail@plt+0xa958>
   1c92c:	ldrd	r2, [r4, #104]	; 0x68
   1c930:	asr	r1, ip, #31
   1c934:	cmp	ip, r2
   1c938:	sbcs	r3, r1, r3
   1c93c:	bge	1cbdc <__assert_fail@plt+0xabf4>
   1c940:	cmp	lr, #2
   1c944:	beq	1cbfc <__assert_fail@plt+0xac14>
   1c948:	mov	r1, r6
   1c94c:	mov	r0, r5
   1c950:	bl	1b400 <__assert_fail@plt+0x9418>
   1c954:	ldr	r7, [pc, #1108]	; 1cdb0 <__assert_fail@plt+0xadc8>
   1c958:	cmp	r0, #0
   1c95c:	str	r0, [r7]
   1c960:	beq	1ca78 <__assert_fail@plt+0xaa90>
   1c964:	ldr	r3, [pc, #1096]	; 1cdb4 <__assert_fail@plt+0xadcc>
   1c968:	ldrb	r5, [r3]
   1c96c:	cmp	r5, #0
   1c970:	bne	1ccd0 <__assert_fail@plt+0xace8>
   1c974:	ldr	r3, [r8]
   1c978:	cmp	r3, #2
   1c97c:	beq	1cc7c <__assert_fail@plt+0xac94>
   1c980:	ldr	r2, [pc, #1072]	; 1cdb8 <__assert_fail@plt+0xadd0>
   1c984:	ldrb	r2, [r2]
   1c988:	cmp	r2, #0
   1c98c:	movne	r2, #0
   1c990:	strbne	r2, [r4, #13]
   1c994:	cmp	r3, #1
   1c998:	beq	1cad8 <__assert_fail@plt+0xaaf0>
   1c99c:	ldr	r3, [r4, #20]
   1c9a0:	cmp	r3, #0
   1c9a4:	beq	1c9c4 <__assert_fail@plt+0xa9dc>
   1c9a8:	ldr	r0, [pc, #1036]	; 1cdbc <__assert_fail@plt+0xadd4>
   1c9ac:	cmp	r3, #1
   1c9b0:	ldr	r2, [pc, #1032]	; 1cdc0 <__assert_fail@plt+0xadd8>
   1c9b4:	mov	r1, r3
   1c9b8:	moveq	r2, r0
   1c9bc:	ldr	r0, [pc, #1024]	; 1cdc4 <__assert_fail@plt+0xaddc>
   1c9c0:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1c9c4:	ldrb	r3, [r4, #13]
   1c9c8:	cmp	r3, #0
   1c9cc:	bne	1cbf0 <__assert_fail@plt+0xac08>
   1c9d0:	ldr	r6, [pc, #1008]	; 1cdc8 <__assert_fail@plt+0xade0>
   1c9d4:	ldr	r3, [r4, #196]	; 0xc4
   1c9d8:	ldr	fp, [r4, #192]	; 0xc0
   1c9dc:	str	r3, [sp, #4]
   1c9e0:	ldr	r3, [r6]
   1c9e4:	cmp	r3, #0
   1c9e8:	beq	1cd08 <__assert_fail@plt+0xad20>
   1c9ec:	ldr	sl, [r4, #188]	; 0xbc
   1c9f0:	ldr	r1, [r4, #112]	; 0x70
   1c9f4:	ldr	r3, [pc, #976]	; 1cdcc <__assert_fail@plt+0xade4>
   1c9f8:	cmp	sl, r1
   1c9fc:	ldr	r5, [r4, #8]
   1ca00:	ldr	r7, [r3]
   1ca04:	blt	1cd90 <__assert_fail@plt+0xada8>
   1ca08:	ldr	r3, [r8]
   1ca0c:	cmp	r3, #2
   1ca10:	bne	1cb04 <__assert_fail@plt+0xab1c>
   1ca14:	cmp	sl, r1
   1ca18:	ble	1cb10 <__assert_fail@plt+0xab28>
   1ca1c:	mov	r0, r5
   1ca20:	mov	r2, #0
   1ca24:	bl	20fd0 <__assert_fail@plt+0xefe8>
   1ca28:	ldr	r0, [pc, #928]	; 1cdd0 <__assert_fail@plt+0xade8>
   1ca2c:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1ca30:	mov	r0, r5
   1ca34:	bl	11b38 <ftell@plt>
   1ca38:	cmp	r0, sl
   1ca3c:	bge	1ccfc <__assert_fail@plt+0xad14>
   1ca40:	mov	r1, r7
   1ca44:	mov	r0, #124	; 0x7c
   1ca48:	bl	11f04 <putc@plt>
   1ca4c:	b	1ca60 <__assert_fail@plt+0xaa78>
   1ca50:	mov	r1, r7
   1ca54:	bl	11f04 <putc@plt>
   1ca58:	cmp	r9, #10
   1ca5c:	beq	1ca30 <__assert_fail@plt+0xaa48>
   1ca60:	mov	r0, r5
   1ca64:	bl	11fac <getc@plt>
   1ca68:	cmn	r0, #1
   1ca6c:	mov	r9, r0
   1ca70:	bne	1ca50 <__assert_fail@plt+0xaa68>
   1ca74:	bl	1facc <__assert_fail@plt+0xdae4>
   1ca78:	ldr	r2, [r8]
   1ca7c:	ldr	r3, [r4, #112]	; 0x70
   1ca80:	cmp	r2, #2
   1ca84:	bne	1caa0 <__assert_fail@plt+0xaab8>
   1ca88:	ldr	r2, [pc, #836]	; 1cdd4 <__assert_fail@plt+0xadec>
   1ca8c:	cmp	r3, #0
   1ca90:	ldr	r0, [pc, #832]	; 1cdd8 <__assert_fail@plt+0xadf0>
   1ca94:	movne	r0, r2
   1ca98:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1ca9c:	ldr	r3, [r4, #112]	; 0x70
   1caa0:	cmp	r3, #0
   1caa4:	bne	1cab4 <__assert_fail@plt+0xaacc>
   1caa8:	ldrd	r2, [r4, #104]	; 0x68
   1caac:	orrs	r3, r2, r3
   1cab0:	bne	1cd88 <__assert_fail@plt+0xada0>
   1cab4:	mov	r5, #0
   1cab8:	ldr	r3, [pc, #744]	; 1cda8 <__assert_fail@plt+0xadc0>
   1cabc:	ldr	r2, [sp, #36]	; 0x24
   1cac0:	mov	r0, r5
   1cac4:	ldr	r3, [r3]
   1cac8:	cmp	r2, r3
   1cacc:	bne	1cd84 <__assert_fail@plt+0xad9c>
   1cad0:	add	sp, sp, #44	; 0x2c
   1cad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cad8:	ldr	r3, [pc, #748]	; 1cdcc <__assert_fail@plt+0xade4>
   1cadc:	ldr	sl, [r4, #188]	; 0xbc
   1cae0:	ldr	r1, [r4, #112]	; 0x70
   1cae4:	ldr	r7, [r3]
   1cae8:	ldr	r3, [r4, #196]	; 0xc4
   1caec:	cmp	r1, sl
   1caf0:	ldr	fp, [r4, #192]	; 0xc0
   1caf4:	str	r3, [sp, #4]
   1caf8:	ldr	r5, [r4, #8]
   1cafc:	bgt	1cd90 <__assert_fail@plt+0xada8>
   1cb00:	ldr	r6, [pc, #704]	; 1cdc8 <__assert_fail@plt+0xade0>
   1cb04:	ldr	r3, [r6]
   1cb08:	cmp	r3, #0
   1cb0c:	beq	1ca14 <__assert_fail@plt+0xaa2c>
   1cb10:	mov	r1, sl
   1cb14:	mov	r0, r5
   1cb18:	mov	r2, #0
   1cb1c:	bl	20fd0 <__assert_fail@plt+0xefe8>
   1cb20:	ldr	r3, [sp, #4]
   1cb24:	subs	fp, fp, #1
   1cb28:	sbc	r3, r3, #0
   1cb2c:	str	fp, [r4]
   1cb30:	str	r3, [r4, #4]
   1cb34:	ldr	r7, [pc, #672]	; 1cddc <__assert_fail@plt+0xadf4>
   1cb38:	ldr	r4, [pc, #672]	; 1cde0 <__assert_fail@plt+0xadf8>
   1cb3c:	ldr	fp, [pc, #672]	; 1cde4 <__assert_fail@plt+0xadfc>
   1cb40:	ldr	sl, [pc, #672]	; 1cde8 <__assert_fail@plt+0xae00>
   1cb44:	ldr	r3, [r6]
   1cb48:	cmp	r3, #0
   1cb4c:	bne	1cb9c <__assert_fail@plt+0xabb4>
   1cb50:	ldrb	r5, [r7]
   1cb54:	ldrb	r3, [r4]
   1cb58:	orrs	r5, r5, r3
   1cb5c:	bne	1cc08 <__assert_fail@plt+0xac20>
   1cb60:	mov	r0, fp
   1cb64:	bl	203bc <__assert_fail@plt+0xe3d4>
   1cb68:	ldr	r9, [sl]
   1cb6c:	mov	r0, r9
   1cb70:	bl	11d78 <strlen@plt>
   1cb74:	add	r2, r9, #1
   1cb78:	add	r3, r9, r0
   1cb7c:	cmp	r3, r2
   1cb80:	bls	1cb90 <__assert_fail@plt+0xaba8>
   1cb84:	ldrb	r3, [r3, #-1]
   1cb88:	cmp	r3, #10
   1cb8c:	beq	1cba4 <__assert_fail@plt+0xabbc>
   1cb90:	ldr	r3, [r6]
   1cb94:	cmp	r3, #0
   1cb98:	beq	1cc40 <__assert_fail@plt+0xac58>
   1cb9c:	mov	r5, #1
   1cba0:	b	1cab8 <__assert_fail@plt+0xaad0>
   1cba4:	sub	r1, r0, #1
   1cba8:	mov	r0, r9
   1cbac:	bl	2fc1c <renameat2@@Base+0xf08>
   1cbb0:	ldr	r1, [pc, #564]	; 1cdec <__assert_fail@plt+0xae04>
   1cbb4:	str	r0, [r6]
   1cbb8:	bl	21150 <__assert_fail@plt+0xf168>
   1cbbc:	ldr	r3, [pc, #556]	; 1cdf0 <__assert_fail@plt+0xae08>
   1cbc0:	cmp	r0, #0
   1cbc4:	str	r0, [r3]
   1cbc8:	bne	1cc20 <__assert_fail@plt+0xac38>
   1cbcc:	ldr	r3, [pc, #544]	; 1cdf4 <__assert_fail@plt+0xae0c>
   1cbd0:	mvn	r2, #0
   1cbd4:	str	r2, [r3]
   1cbd8:	b	1cb90 <__assert_fail@plt+0xaba8>
   1cbdc:	cmp	lr, #2
   1cbe0:	bne	1cab4 <__assert_fail@plt+0xaacc>
   1cbe4:	ldr	r0, [pc, #524]	; 1cdf8 <__assert_fail@plt+0xae10>
   1cbe8:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1cbec:	b	1cab4 <__assert_fail@plt+0xaacc>
   1cbf0:	ldr	r0, [pc, #516]	; 1cdfc <__assert_fail@plt+0xae14>
   1cbf4:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1cbf8:	b	1c9d0 <__assert_fail@plt+0xa9e8>
   1cbfc:	ldr	r0, [pc, #508]	; 1ce00 <__assert_fail@plt+0xae18>
   1cc00:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1cc04:	b	1c948 <__assert_fail@plt+0xa960>
   1cc08:	ldr	r0, [pc, #500]	; 1ce04 <__assert_fail@plt+0xae1c>
   1cc0c:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1cc10:	ldr	r2, [pc, #412]	; 1cdb4 <__assert_fail@plt+0xadcc>
   1cc14:	mov	r3, #1
   1cc18:	strb	r3, [r2]
   1cc1c:	b	1cab8 <__assert_fail@plt+0xaad0>
   1cc20:	ldr	r0, [r6]
   1cc24:	bl	11bc8 <perror@plt>
   1cc28:	ldr	r3, [pc, #472]	; 1ce08 <__assert_fail@plt+0xae20>
   1cc2c:	ldr	r0, [r3]
   1cc30:	bl	11a84 <fflush@plt>
   1cc34:	ldr	r0, [r6]
   1cc38:	bl	11ab4 <free@plt>
   1cc3c:	str	r5, [r6]
   1cc40:	ldr	r0, [pc, #452]	; 1ce0c <__assert_fail@plt+0xae24>
   1cc44:	bl	203bc <__assert_fail@plt+0xe3d4>
   1cc48:	ldr	r3, [sl]
   1cc4c:	ldrb	r3, [r3]
   1cc50:	cmp	r3, #110	; 0x6e
   1cc54:	beq	1cb44 <__assert_fail@plt+0xab5c>
   1cc58:	ldr	r3, [r8]
   1cc5c:	cmp	r3, #1
   1cc60:	beq	1cc6c <__assert_fail@plt+0xac84>
   1cc64:	ldr	r0, [pc, #420]	; 1ce10 <__assert_fail@plt+0xae28>
   1cc68:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1cc6c:	ldr	r3, [pc, #320]	; 1cdb4 <__assert_fail@plt+0xadcc>
   1cc70:	mov	r5, #1
   1cc74:	strb	r5, [r3]
   1cc78:	b	1cab8 <__assert_fail@plt+0xaad0>
   1cc7c:	ldr	r2, [r4, #112]	; 0x70
   1cc80:	ldr	r3, [pc, #396]	; 1ce14 <__assert_fail@plt+0xae2c>
   1cc84:	cmp	r2, #0
   1cc88:	ldr	r1, [pc, #392]	; 1ce18 <__assert_fail@plt+0xae30>
   1cc8c:	movne	r1, r3
   1cc90:	cmp	r0, #5
   1cc94:	beq	1cd6c <__assert_fail@plt+0xad84>
   1cc98:	cmp	r0, #1
   1cc9c:	beq	1cd64 <__assert_fail@plt+0xad7c>
   1cca0:	cmp	r0, #4
   1cca4:	beq	1cd74 <__assert_fail@plt+0xad8c>
   1cca8:	cmp	r0, #2
   1ccac:	beq	1cd7c <__assert_fail@plt+0xad94>
   1ccb0:	ldr	r3, [pc, #356]	; 1ce1c <__assert_fail@plt+0xae34>
   1ccb4:	cmp	r0, #6
   1ccb8:	ldr	r2, [pc, #352]	; 1ce20 <__assert_fail@plt+0xae38>
   1ccbc:	movne	r2, r3
   1ccc0:	ldr	r0, [pc, #348]	; 1ce24 <__assert_fail@plt+0xae3c>
   1ccc4:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1ccc8:	ldr	r3, [r8]
   1cccc:	b	1c980 <__assert_fail@plt+0xa998>
   1ccd0:	mov	r2, #0
   1ccd4:	ldr	r1, [r4, #188]	; 0xbc
   1ccd8:	ldr	r0, [r4, #8]
   1ccdc:	bl	20fd0 <__assert_fail@plt+0xefe8>
   1cce0:	ldr	r3, [r4, #192]	; 0xc0
   1cce4:	ldr	r2, [r4, #196]	; 0xc4
   1cce8:	subs	r3, r3, #1
   1ccec:	sbc	r2, r2, #0
   1ccf0:	str	r3, [r4]
   1ccf4:	str	r2, [r4, #4]
   1ccf8:	b	1cab8 <__assert_fail@plt+0xaad0>
   1ccfc:	ldr	r0, [pc, #292]	; 1ce28 <__assert_fail@plt+0xae40>
   1cd00:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1cd04:	b	1cb20 <__assert_fail@plt+0xab38>
   1cd08:	ldr	r3, [sp, #4]
   1cd0c:	mov	r2, fp
   1cd10:	add	r0, sp, #12
   1cd14:	bl	1f490 <__assert_fail@plt+0xd4a8>
   1cd18:	mov	r1, r0
   1cd1c:	ldr	r0, [pc, #264]	; 1ce2c <__assert_fail@plt+0xae44>
   1cd20:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1cd24:	ldr	r3, [r7]
   1cd28:	sub	r3, r3, #2
   1cd2c:	cmp	r3, #1
   1cd30:	bls	1cd54 <__assert_fail@plt+0xad6c>
   1cd34:	ldr	r1, [pc, #244]	; 1ce30 <__assert_fail@plt+0xae48>
   1cd38:	ldr	r2, [pc, #244]	; 1ce34 <__assert_fail@plt+0xae4c>
   1cd3c:	ldr	r3, [pc, #244]	; 1ce38 <__assert_fail@plt+0xae50>
   1cd40:	ldr	r0, [r1]
   1cd44:	cmn	r0, #1
   1cd48:	moveq	r0, r2
   1cd4c:	movne	r0, r3
   1cd50:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1cd54:	ldr	r3, [r4, #196]	; 0xc4
   1cd58:	ldr	fp, [r4, #192]	; 0xc0
   1cd5c:	str	r3, [sp, #4]
   1cd60:	b	1c9ec <__assert_fail@plt+0xaa04>
   1cd64:	ldr	r2, [pc, #208]	; 1ce3c <__assert_fail@plt+0xae54>
   1cd68:	b	1ccc0 <__assert_fail@plt+0xacd8>
   1cd6c:	ldr	r2, [pc, #204]	; 1ce40 <__assert_fail@plt+0xae58>
   1cd70:	b	1ccc0 <__assert_fail@plt+0xacd8>
   1cd74:	ldr	r2, [pc, #200]	; 1ce44 <__assert_fail@plt+0xae5c>
   1cd78:	b	1ccc0 <__assert_fail@plt+0xacd8>
   1cd7c:	ldr	r2, [pc, #196]	; 1ce48 <__assert_fail@plt+0xae60>
   1cd80:	b	1ccc0 <__assert_fail@plt+0xacd8>
   1cd84:	bl	11b50 <__stack_chk_fail@plt>
   1cd88:	ldr	r0, [pc, #188]	; 1ce4c <__assert_fail@plt+0xae64>
   1cd8c:	bl	1f558 <__assert_fail@plt+0xd570>
   1cd90:	ldr	r3, [pc, #184]	; 1ce50 <__assert_fail@plt+0xae68>
   1cd94:	ldr	r2, [pc, #184]	; 1ce54 <__assert_fail@plt+0xae6c>
   1cd98:	ldr	r1, [pc, #184]	; 1ce58 <__assert_fail@plt+0xae70>
   1cd9c:	ldr	r0, [pc, #184]	; 1ce5c <__assert_fail@plt+0xae74>
   1cda0:	bl	11fe8 <__assert_fail@plt>
   1cda4:	andeq	sl, r4, r0, lsl #7
   1cda8:	andeq	r7, r4, r8, lsl #30
   1cdac:			; <UNDEFINED> instruction: 0x0004a6bc
   1cdb0:	andeq	sl, r4, r0, ror #13
   1cdb4:	ldrdeq	sl, [r4], -ip
   1cdb8:	muleq	r4, ip, r7
   1cdbc:	strdeq	r5, [r3], -r8
   1cdc0:	ldrdeq	r5, [r3], -r0
   1cdc4:	andeq	r4, r3, ip, asr r6
   1cdc8:	andeq	sl, r4, r4, ror r7
   1cdcc:	andeq	r8, r4, r4, lsl #6
   1cdd0:	andeq	r4, r3, r0, lsl #14
   1cdd4:	andeq	r4, r3, ip, ror #9
   1cdd8:			; <UNDEFINED> instruction: 0x000344b8
   1cddc:	strdeq	sl, [r4], -r1
   1cde0:	andeq	sl, r4, r8, ror #14
   1cde4:	andeq	r4, r3, r0, lsl #15
   1cde8:	andeq	sl, r4, r0, ror r7
   1cdec:	andeq	sl, r4, r0, lsl #14
   1cdf0:	ldrdeq	sl, [r4], -r4
   1cdf4:	muleq	r4, r8, r7
   1cdf8:	andeq	r4, r3, r4, lsl #12
   1cdfc:	andeq	r4, r3, r0, lsl #13
   1ce00:	andeq	r4, r3, ip, lsl #12
   1ce04:	andeq	r4, r3, ip, asr r7
   1ce08:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   1ce0c:	muleq	r3, r0, r7
   1ce10:	andeq	r2, r3, r8, lsl #29
   1ce14:	andeq	r4, r3, r4, lsl r5
   1ce18:	ldrdeq	r6, [r3], -ip
   1ce1c:	andeq	r4, r3, r8, lsl #11
   1ce20:	andeq	r4, r3, r4, ror #10
   1ce24:	andeq	r4, r3, r0, asr #12
   1ce28:	andeq	r4, r3, r0, asr #14
   1ce2c:	andeq	r4, r3, r0, asr #13
   1ce30:	andeq	sl, r4, r8, ror r7
   1ce34:	muleq	r3, r8, r5
   1ce38:	ldrdeq	r4, [r3], -r0
   1ce3c:	andeq	r4, r3, r8, ror r5
   1ce40:	andeq	r4, r3, r4, asr #10
   1ce44:	andeq	r4, r3, r8, lsr #10
   1ce48:	andeq	r4, r3, r4, asr r5
   1ce4c:	andeq	r4, r3, r4, lsl r6
   1ce50:	andeq	r3, r3, r8, asr #25
   1ce54:	andeq	r0, r0, pc, asr #8
   1ce58:	ldrdeq	r3, [r3], -r0
   1ce5c:	andeq	r4, r3, ip, ror #13
   1ce60:	ldr	r3, [pc, #4]	; 1ce6c <__assert_fail@plt+0xae84>
   1ce64:	ldrd	r0, [r3, #152]	; 0x98
   1ce68:	bx	lr
   1ce6c:	andeq	sl, r4, r0, lsl #7
   1ce70:	ldr	r3, [pc, #4]	; 1ce7c <__assert_fail@plt+0xae94>
   1ce74:	ldr	r0, [r3, #144]	; 0x90
   1ce78:	bx	lr
   1ce7c:	andeq	sl, r4, r0, lsl #7
   1ce80:	ldr	r3, [pc, #4]	; 1ce8c <__assert_fail@plt+0xaea4>
   1ce84:	ldrb	r0, [r3, #176]	; 0xb0
   1ce88:	bx	lr
   1ce8c:	andeq	sl, r4, r0, lsl #7
   1ce90:	ldr	r3, [pc, #8]	; 1cea0 <__assert_fail@plt+0xaeb8>
   1ce94:	add	r0, r3, r0, lsl #2
   1ce98:	ldr	r0, [r0, #160]	; 0xa0
   1ce9c:	bx	lr
   1cea0:	andeq	sl, r4, r0, lsl #7
   1cea4:	ldr	r3, [pc, #8]	; 1ceb4 <__assert_fail@plt+0xaecc>
   1cea8:	add	r0, r3, r0, lsl #2
   1ceac:	ldr	r0, [r0, #168]	; 0xa8
   1ceb0:	bx	lr
   1ceb4:	andeq	sl, r4, r0, lsl #7
   1ceb8:	ldr	r3, [pc, #8]	; 1cec8 <__assert_fail@plt+0xaee0>
   1cebc:	add	r0, r3, r0, lsl #2
   1cec0:	ldr	r0, [r0, #180]	; 0xb4
   1cec4:	bx	lr
   1cec8:	andeq	sl, r4, r0, lsl #7
   1cecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ced0:	sub	sp, sp, #36	; 0x24
   1ced4:	mov	sl, r3
   1ced8:	str	r0, [sp, #16]
   1cedc:	ldr	r0, [pc, #940]	; 1d290 <__assert_fail@plt+0xb2a8>
   1cee0:	str	r1, [sp, #8]
   1cee4:	str	r2, [sp, #12]
   1cee8:	ldrb	r5, [r0]
   1ceec:	ldr	r0, [pc, #928]	; 1d294 <__assert_fail@plt+0xb2ac>
   1cef0:	cmp	r5, #0
   1cef4:	ldr	r0, [r0]
   1cef8:	str	r0, [sp, #28]
   1cefc:	bne	1d19c <__assert_fail@plt+0xb1b4>
   1cf00:	ldr	r3, [pc, #912]	; 1d298 <__assert_fail@plt+0xb2b0>
   1cf04:	ldrb	r2, [r3]
   1cf08:	cmp	r2, #0
   1cf0c:	beq	1d1a4 <__assert_fail@plt+0xb1bc>
   1cf10:	ldr	r8, [pc, #900]	; 1d29c <__assert_fail@plt+0xb2b4>
   1cf14:	ldr	r7, [pc, #900]	; 1d2a0 <__assert_fail@plt+0xb2b8>
   1cf18:	b	1cf68 <__assert_fail@plt+0xaf80>
   1cf1c:	ldr	r6, [r7]
   1cf20:	mov	r0, r6
   1cf24:	bl	175b4 <__assert_fail@plt+0x55cc>
   1cf28:	subs	r4, r0, #0
   1cf2c:	beq	1cf80 <__assert_fail@plt+0xaf98>
   1cf30:	cmp	r5, #0
   1cf34:	beq	1cf54 <__assert_fail@plt+0xaf6c>
   1cf38:	mov	r2, fp
   1cf3c:	mov	r0, r6
   1cf40:	mov	r3, r5
   1cf44:	mov	r1, #1
   1cf48:	bl	11c1c <fwrite@plt>
   1cf4c:	cmp	r0, #0
   1cf50:	beq	1d238 <__assert_fail@plt+0xb250>
   1cf54:	cmp	r4, #100	; 0x64
   1cf58:	cmpne	r4, #115	; 0x73
   1cf5c:	movne	r3, #1
   1cf60:	strbne	r3, [r8, #12]
   1cf64:	bne	1d0a0 <__assert_fail@plt+0xb0b8>
   1cf68:	ldr	r0, [r8, #8]
   1cf6c:	bl	11b38 <ftell@plt>
   1cf70:	mov	r9, r0
   1cf74:	bl	17a2c <__assert_fail@plt+0x5a44>
   1cf78:	subs	fp, r0, #0
   1cf7c:	bne	1cf1c <__assert_fail@plt+0xaf34>
   1cf80:	ldrd	r2, [r8]
   1cf84:	cmp	r5, #0
   1cf88:	str	r9, [r8, #112]	; 0x70
   1cf8c:	strd	r2, [r8, #120]	; 0x78
   1cf90:	beq	1d180 <__assert_fail@plt+0xb198>
   1cf94:	mov	r3, r5
   1cf98:	mov	r2, #4
   1cf9c:	mov	r1, #1
   1cfa0:	ldr	r0, [pc, #764]	; 1d2a4 <__assert_fail@plt+0xb2bc>
   1cfa4:	bl	11c1c <fwrite@plt>
   1cfa8:	cmp	r0, #0
   1cfac:	beq	1d238 <__assert_fail@plt+0xb250>
   1cfb0:	mov	r0, r5
   1cfb4:	bl	11a84 <fflush@plt>
   1cfb8:	subs	r3, r0, #0
   1cfbc:	bne	1d238 <__assert_fail@plt+0xb250>
   1cfc0:	str	r3, [sp]
   1cfc4:	mov	r2, #0
   1cfc8:	mov	r3, #0
   1cfcc:	ldr	r0, [sp, #20]
   1cfd0:	bl	11c28 <lseek64@plt>
   1cfd4:	mvn	r3, #0
   1cfd8:	mvn	r2, #0
   1cfdc:	cmp	r1, r3
   1cfe0:	cmpeq	r0, r2
   1cfe4:	beq	1d260 <__assert_fail@plt+0xb278>
   1cfe8:	ldr	r3, [pc, #672]	; 1d290 <__assert_fail@plt+0xb2a8>
   1cfec:	ldrb	r3, [r3]
   1cff0:	cmp	r3, #0
   1cff4:	bne	1d118 <__assert_fail@plt+0xb130>
   1cff8:	ldr	r3, [pc, #664]	; 1d298 <__assert_fail@plt+0xb2b0>
   1cffc:	ldrb	r2, [r3]
   1d000:	cmp	r2, #0
   1d004:	bne	1d118 <__assert_fail@plt+0xb130>
   1d008:	ldr	ip, [sp, #12]
   1d00c:	ldr	r0, [pc, #660]	; 1d2a8 <__assert_fail@plt+0xb2c0>
   1d010:	mov	r1, #1
   1d014:	ldrb	r3, [ip]
   1d018:	ldr	r0, [r0]
   1d01c:	strb	r1, [ip]
   1d020:	cmp	r3, #0
   1d024:	movne	r3, r2
   1d028:	moveq	r3, #128	; 0x80
   1d02c:	cmp	r0, #2
   1d030:	bne	1d1f8 <__assert_fail@plt+0xb210>
   1d034:	ldr	r3, [pc, #624]	; 1d2ac <__assert_fail@plt+0xb2c4>
   1d038:	ldr	r0, [r3]
   1d03c:	bl	11a84 <fflush@plt>
   1d040:	bl	11e98 <fork@plt>
   1d044:	cmn	r0, #1
   1d048:	mov	r4, r0
   1d04c:	beq	1d284 <__assert_fail@plt+0xb29c>
   1d050:	cmp	r0, #0
   1d054:	bne	1d0f0 <__assert_fail@plt+0xb108>
   1d058:	ldr	r0, [sp, #20]
   1d05c:	mov	r1, r4
   1d060:	bl	11b68 <dup2@plt>
   1d064:	ldr	r3, [sp, #8]
   1d068:	ldrb	r3, [r3]
   1d06c:	cmp	r3, #33	; 0x21
   1d070:	cmpne	r3, #45	; 0x2d
   1d074:	bne	1d218 <__assert_fail@plt+0xb230>
   1d078:	ldr	r3, [pc, #560]	; 1d2b0 <__assert_fail@plt+0xb2c8>
   1d07c:	ldr	r2, [pc, #560]	; 1d2b4 <__assert_fail@plt+0xb2cc>
   1d080:	ldr	r1, [pc, #560]	; 1d2b8 <__assert_fail@plt+0xb2d0>
   1d084:	ldr	r0, [pc, #560]	; 1d2bc <__assert_fail@plt+0xb2d4>
   1d088:	bl	11fe8 <__assert_fail@plt>
   1d08c:	ldr	r1, [pc, #556]	; 1d2c0 <__assert_fail@plt+0xb2d8>
   1d090:	ldr	r0, [r7]
   1d094:	bl	11a48 <strcmp@plt>
   1d098:	cmp	r0, #0
   1d09c:	beq	1d0e4 <__assert_fail@plt+0xb0fc>
   1d0a0:	bl	17a2c <__assert_fail@plt+0x5a44>
   1d0a4:	subs	r4, r0, #0
   1d0a8:	beq	1d0e4 <__assert_fail@plt+0xb0fc>
   1d0ac:	cmp	r5, #0
   1d0b0:	beq	1d0d0 <__assert_fail@plt+0xb0e8>
   1d0b4:	mov	r3, r5
   1d0b8:	mov	r2, r4
   1d0bc:	mov	r1, #1
   1d0c0:	ldr	r0, [r7]
   1d0c4:	bl	11c1c <fwrite@plt>
   1d0c8:	cmp	r0, #0
   1d0cc:	beq	1d238 <__assert_fail@plt+0xb250>
   1d0d0:	cmp	r4, #2
   1d0d4:	beq	1d08c <__assert_fail@plt+0xb0a4>
   1d0d8:	bl	17a2c <__assert_fail@plt+0x5a44>
   1d0dc:	subs	r4, r0, #0
   1d0e0:	bne	1d0ac <__assert_fail@plt+0xb0c4>
   1d0e4:	mov	r3, #0
   1d0e8:	strb	r3, [r8, #12]
   1d0ec:	b	1cf68 <__assert_fail@plt+0xaf80>
   1d0f0:	mov	r2, #0
   1d0f4:	add	r1, sp, #24
   1d0f8:	bl	11c34 <waitpid@plt>
   1d0fc:	cmn	r0, #1
   1d100:	beq	1d23c <__assert_fail@plt+0xb254>
   1d104:	ldr	r3, [sp, #24]
   1d108:	and	r2, r3, #127	; 0x7f
   1d10c:	lsl	r3, r3, #16
   1d110:	orrs	r3, r2, r3, lsr #24
   1d114:	bne	1d23c <__assert_fail@plt+0xb254>
   1d118:	mov	r0, r5
   1d11c:	bl	11e5c <fclose@plt>
   1d120:	cmp	sl, #0
   1d124:	beq	1d180 <__assert_fail@plt+0xb198>
   1d128:	ldr	r1, [pc, #404]	; 1d2c4 <__assert_fail@plt+0xb2dc>
   1d12c:	ldr	r0, [sp, #8]
   1d130:	bl	11f1c <fopen64@plt>
   1d134:	subs	r4, r0, #0
   1d138:	bne	1d150 <__assert_fail@plt+0xb168>
   1d13c:	b	1d278 <__assert_fail@plt+0xb290>
   1d140:	mov	r1, sl
   1d144:	bl	11f04 <putc@plt>
   1d148:	cmn	r0, #1
   1d14c:	beq	1d238 <__assert_fail@plt+0xb250>
   1d150:	mov	r0, r4
   1d154:	bl	11fac <getc@plt>
   1d158:	cmn	r0, #1
   1d15c:	bne	1d140 <__assert_fail@plt+0xb158>
   1d160:	mov	r0, r4
   1d164:	bl	11acc <ferror@plt>
   1d168:	cmp	r0, #0
   1d16c:	bne	1d28c <__assert_fail@plt+0xb2a4>
   1d170:	mov	r0, r4
   1d174:	bl	11e5c <fclose@plt>
   1d178:	cmp	r0, #0
   1d17c:	bne	1d28c <__assert_fail@plt+0xb2a4>
   1d180:	ldr	r3, [pc, #268]	; 1d294 <__assert_fail@plt+0xb2ac>
   1d184:	ldr	r2, [sp, #28]
   1d188:	ldr	r3, [r3]
   1d18c:	cmp	r2, r3
   1d190:	bne	1d25c <__assert_fail@plt+0xb274>
   1d194:	add	sp, sp, #36	; 0x24
   1d198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d19c:	mov	r5, #0
   1d1a0:	b	1cf10 <__assert_fail@plt+0xaf28>
   1d1a4:	ldr	r4, [pc, #284]	; 1d2c8 <__assert_fail@plt+0xb2e0>
   1d1a8:	str	r2, [sp]
   1d1ac:	mov	r0, r4
   1d1b0:	mov	r3, #2
   1d1b4:	mov	r1, #101	; 0x65
   1d1b8:	bl	20fec <__assert_fail@plt+0xf004>
   1d1bc:	cmn	r0, #1
   1d1c0:	str	r0, [sp, #20]
   1d1c4:	beq	1d248 <__assert_fail@plt+0xb260>
   1d1c8:	ldr	r3, [pc, #252]	; 1d2cc <__assert_fail@plt+0xb2e4>
   1d1cc:	mov	r2, #1
   1d1d0:	ldr	r1, [pc, #248]	; 1d2d0 <__assert_fail@plt+0xb2e8>
   1d1d4:	strb	r2, [r3]
   1d1d8:	bl	11a00 <fdopen@plt>
   1d1dc:	subs	r5, r0, #0
   1d1e0:	bne	1cf10 <__assert_fail@plt+0xaf28>
   1d1e4:	ldr	r0, [r4]
   1d1e8:	bl	2e970 <__assert_fail@plt+0x1c988>
   1d1ec:	mov	r1, r0
   1d1f0:	ldr	r0, [pc, #220]	; 1d2d4 <__assert_fail@plt+0xb2ec>
   1d1f4:	bl	1f774 <__assert_fail@plt+0xd78c>
   1d1f8:	ldr	r0, [pc, #216]	; 1d2d8 <__assert_fail@plt+0xb2f0>
   1d1fc:	str	r1, [sp, #4]
   1d200:	ldr	r1, [r0, #16]
   1d204:	ldr	r0, [sp, #16]
   1d208:	str	r1, [sp]
   1d20c:	ldr	r1, [sp, #8]
   1d210:	bl	1fc70 <__assert_fail@plt+0xdc88>
   1d214:	b	1d034 <__assert_fail@plt+0xb04c>
   1d218:	ldr	r1, [pc, #188]	; 1d2dc <__assert_fail@plt+0xb2f4>
   1d21c:	str	r4, [sp]
   1d220:	ldr	r3, [sp, #8]
   1d224:	mov	r0, r1
   1d228:	ldr	r2, [pc, #176]	; 1d2e0 <__assert_fail@plt+0xb2f8>
   1d22c:	bl	11b08 <execlp@plt>
   1d230:	mov	r0, #2
   1d234:	bl	11af0 <_exit@plt>
   1d238:	bl	1fadc <__assert_fail@plt+0xdaf4>
   1d23c:	ldr	r1, [pc, #152]	; 1d2dc <__assert_fail@plt+0xb2f4>
   1d240:	ldr	r0, [pc, #156]	; 1d2e4 <__assert_fail@plt+0xb2fc>
   1d244:	bl	1f558 <__assert_fail@plt+0xd570>
   1d248:	ldr	r0, [r4]
   1d24c:	bl	2e970 <__assert_fail@plt+0x1c988>
   1d250:	mov	r1, r0
   1d254:	ldr	r0, [pc, #140]	; 1d2e8 <__assert_fail@plt+0xb300>
   1d258:	bl	1f774 <__assert_fail@plt+0xd78c>
   1d25c:	bl	11b50 <__stack_chk_fail@plt>
   1d260:	ldr	r3, [pc, #96]	; 1d2c8 <__assert_fail@plt+0xb2e0>
   1d264:	ldr	r0, [r3]
   1d268:	bl	2e970 <__assert_fail@plt+0x1c988>
   1d26c:	mov	r1, r0
   1d270:	ldr	r0, [pc, #116]	; 1d2ec <__assert_fail@plt+0xb304>
   1d274:	bl	1f774 <__assert_fail@plt+0xd78c>
   1d278:	ldr	r1, [sp, #8]
   1d27c:	ldr	r0, [pc, #108]	; 1d2f0 <__assert_fail@plt+0xb308>
   1d280:	bl	1f774 <__assert_fail@plt+0xd78c>
   1d284:	ldr	r0, [pc, #104]	; 1d2f4 <__assert_fail@plt+0xb30c>
   1d288:	bl	1f774 <__assert_fail@plt+0xd78c>
   1d28c:	bl	1facc <__assert_fail@plt+0xdae4>
   1d290:	andeq	sl, r4, r5, ror #13
   1d294:	andeq	r7, r4, r8, lsl #30
   1d298:	ldrdeq	sl, [r4], -ip
   1d29c:	andeq	sl, r4, r0, lsl #7
   1d2a0:	andeq	sl, r4, r0, ror r7
   1d2a4:	andeq	r4, r3, r8, lsr #15
   1d2a8:	ldrdeq	sl, [r4], -r4
   1d2ac:	andeq	r8, r4, r4, lsl #6
   1d2b0:	ldrdeq	r3, [r3], -r0
   1d2b4:	andeq	r0, r0, r6, lsr #19
   1d2b8:	ldrdeq	r3, [r3], -r0
   1d2bc:	andeq	r4, r3, r8, ror #15
   1d2c0:	andeq	r4, r3, r8, asr r6
   1d2c4:	strdeq	r3, [r3], -r0
   1d2c8:	andeq	sl, r4, r8, asr #13
   1d2cc:	andeq	sl, r4, sl, ror #14
   1d2d0:	andeq	r3, r3, r8, asr #29
   1d2d4:	andeq	r2, r3, ip, ror #25
   1d2d8:	andeq	sl, r4, r0, lsl #14
   1d2dc:	andeq	r3, r3, r0, ror #25
   1d2e0:	andeq	r2, r3, r4, lsl #17
   1d2e4:	andeq	r4, r3, r0, lsl r8
   1d2e8:	strdeq	r2, [r3], -r8
   1d2ec:			; <UNDEFINED> instruction: 0x000347b0
   1d2f0:	andeq	r4, r3, ip, lsl r8
   1d2f4:	ldrdeq	r4, [r3], -ip
   1d2f8:	ldr	ip, [pc, #512]	; 1d500 <__assert_fail@plt+0xb518>
   1d2fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d300:	ldrd	r6, [ip, #80]	; 0x50
   1d304:	ldr	lr, [ip, #40]	; 0x28
   1d308:	adds	r4, r6, #1
   1d30c:	add	r3, lr, r4
   1d310:	adc	r5, r7, #0
   1d314:	ldrb	r3, [r3]
   1d318:	cmp	r3, #10
   1d31c:	cmpne	r3, #61	; 0x3d
   1d320:	bne	1d340 <__assert_fail@plt+0xb358>
   1d324:	add	r2, lr, r4
   1d328:	ldrb	r3, [r2, #1]!
   1d32c:	adds	r4, r4, #1
   1d330:	adc	r5, r5, #0
   1d334:	cmp	r3, #10
   1d338:	cmpne	r3, #61	; 0x3d
   1d33c:	beq	1d328 <__assert_fail@plt+0xb340>
   1d340:	ldr	r3, [pc, #444]	; 1d504 <__assert_fail@plt+0xb51c>
   1d344:	cmp	r0, #5
   1d348:	movne	r2, #1
   1d34c:	ldrd	r8, [r3, #8]
   1d350:	movne	sl, #33	; 0x21
   1d354:	movne	r3, #0
   1d358:	beq	1d460 <__assert_fail@plt+0xb478>
   1d35c:	cmp	r6, r2
   1d360:	sbcs	r1, r7, r3
   1d364:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d368:	ldrb	r0, [lr, r2]
   1d36c:	cmp	r0, #45	; 0x2d
   1d370:	beq	1d3a4 <__assert_fail@plt+0xb3bc>
   1d374:	cmp	r8, r4
   1d378:	sbcs	r1, r9, r5
   1d37c:	blt	1d390 <__assert_fail@plt+0xb3a8>
   1d380:	add	r1, lr, r4
   1d384:	ldrb	r1, [r1]
   1d388:	cmp	r1, #43	; 0x2b
   1d38c:	beq	1d4d4 <__assert_fail@plt+0xb4ec>
   1d390:	adds	r2, r2, #1
   1d394:	adc	r3, r3, #0
   1d398:	adds	r4, r4, #1
   1d39c:	adc	r5, r5, #0
   1d3a0:	b	1d35c <__assert_fail@plt+0xb374>
   1d3a4:	cmp	r8, r4
   1d3a8:	sbcs	r0, r9, r5
   1d3ac:	blt	1d3c0 <__assert_fail@plt+0xb3d8>
   1d3b0:	ldrb	r0, [lr, r4]
   1d3b4:	mov	fp, r4
   1d3b8:	cmp	r0, #43	; 0x2b
   1d3bc:	beq	1d3ec <__assert_fail@plt+0xb404>
   1d3c0:	add	r1, lr, r2
   1d3c4:	b	1d3d4 <__assert_fail@plt+0xb3ec>
   1d3c8:	ldrb	r0, [r1, #1]!
   1d3cc:	cmp	r0, #45	; 0x2d
   1d3d0:	bne	1d35c <__assert_fail@plt+0xb374>
   1d3d4:	adds	r2, r2, #1
   1d3d8:	adc	r3, r3, #0
   1d3dc:	cmp	r6, r2
   1d3e0:	sbcs	r0, r7, r3
   1d3e4:	bge	1d3c8 <__assert_fail@plt+0xb3e0>
   1d3e8:	b	1d35c <__assert_fail@plt+0xb374>
   1d3ec:	sub	r1, r2, #1
   1d3f0:	add	r6, lr, r1
   1d3f4:	add	r7, lr, r2
   1d3f8:	b	1d408 <__assert_fail@plt+0xb420>
   1d3fc:	ldrb	r1, [r7, #1]!
   1d400:	cmp	r1, #45	; 0x2d
   1d404:	bne	1d424 <__assert_fail@plt+0xb43c>
   1d408:	strb	sl, [r6, #1]!
   1d40c:	ldrd	r0, [ip, #80]	; 0x50
   1d410:	adds	r2, r2, #1
   1d414:	adc	r3, r3, #0
   1d418:	cmp	r0, r2
   1d41c:	sbcs	r1, r1, r3
   1d420:	bge	1d3fc <__assert_fail@plt+0xb414>
   1d424:	sub	r1, fp, #1
   1d428:	add	r1, lr, r1
   1d42c:	add	r0, lr, r4
   1d430:	b	1d440 <__assert_fail@plt+0xb458>
   1d434:	ldrb	r6, [r0, #1]!
   1d438:	cmp	r6, #43	; 0x2b
   1d43c:	bne	1d458 <__assert_fail@plt+0xb470>
   1d440:	adds	r4, r4, #1
   1d444:	adc	r5, r5, #0
   1d448:	cmp	r8, r4
   1d44c:	sbcs	r6, r9, r5
   1d450:	strb	sl, [r1, #1]!
   1d454:	bge	1d434 <__assert_fail@plt+0xb44c>
   1d458:	ldrd	r6, [ip, #80]	; 0x50
   1d45c:	b	1d35c <__assert_fail@plt+0xb374>
   1d460:	cmp	r6, #1
   1d464:	sbcs	r3, r7, #0
   1d468:	movge	r6, lr
   1d46c:	movge	r0, #1
   1d470:	movge	r1, #0
   1d474:	movge	r7, #45	; 0x2d
   1d478:	blt	1d4a0 <__assert_fail@plt+0xb4b8>
   1d47c:	ldrb	r3, [r6, #1]!
   1d480:	cmp	r3, #33	; 0x21
   1d484:	strbeq	r7, [r6]
   1d488:	ldrd	r2, [ip, #80]	; 0x50
   1d48c:	adds	r0, r0, #1
   1d490:	adc	r1, r1, #0
   1d494:	cmp	r2, r0
   1d498:	sbcs	r3, r3, r1
   1d49c:	bge	1d47c <__assert_fail@plt+0xb494>
   1d4a0:	cmp	r8, r4
   1d4a4:	sbcs	r3, r9, r5
   1d4a8:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4ac:	sub	r4, r4, #1
   1d4b0:	add	r4, lr, r4
   1d4b4:	mov	r2, #43	; 0x2b
   1d4b8:	add	lr, lr, r8
   1d4bc:	ldrb	r3, [r4, #1]!
   1d4c0:	cmp	r3, #33	; 0x21
   1d4c4:	strbeq	r2, [r4]
   1d4c8:	cmp	lr, r4
   1d4cc:	bne	1d4bc <__assert_fail@plt+0xb4d4>
   1d4d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4d4:	add	r1, lr, r4
   1d4d8:	b	1d4e8 <__assert_fail@plt+0xb500>
   1d4dc:	ldrb	r0, [r1, #1]!
   1d4e0:	cmp	r0, #43	; 0x2b
   1d4e4:	bne	1d35c <__assert_fail@plt+0xb374>
   1d4e8:	adds	r4, r4, #1
   1d4ec:	adc	r5, r5, #0
   1d4f0:	cmp	r8, r4
   1d4f4:	sbcs	r0, r9, r5
   1d4f8:	bge	1d4dc <__assert_fail@plt+0xb4f4>
   1d4fc:	b	1d35c <__assert_fail@plt+0xb374>
   1d500:	andeq	sl, r4, r0, lsl #7
   1d504:	andeq	r8, r4, r0, asr #4
   1d508:	ldrb	r3, [r0]
   1d50c:	mov	r2, r0
   1d510:	cmp	r3, #47	; 0x2f
   1d514:	bne	1d524 <__assert_fail@plt+0xb53c>
   1d518:	ldrb	r3, [r2, #1]!
   1d51c:	cmp	r3, #47	; 0x2f
   1d520:	beq	1d518 <__assert_fail@plt+0xb530>
   1d524:	cmp	r3, #0
   1d528:	beq	1d578 <__assert_fail@plt+0xb590>
   1d52c:	ldrb	r3, [r2]
   1d530:	cmp	r3, #0
   1d534:	movne	r0, #0
   1d538:	beq	1d580 <__assert_fail@plt+0xb598>
   1d53c:	cmp	r3, #47	; 0x2f
   1d540:	beq	1d55c <__assert_fail@plt+0xb574>
   1d544:	ldrb	r3, [r2, #1]!
   1d548:	cmp	r3, #0
   1d54c:	cmpne	r3, #47	; 0x2f
   1d550:	bne	1d544 <__assert_fail@plt+0xb55c>
   1d554:	cmp	r3, #47	; 0x2f
   1d558:	bne	1d568 <__assert_fail@plt+0xb580>
   1d55c:	ldrb	r3, [r2, #1]!
   1d560:	cmp	r3, #47	; 0x2f
   1d564:	beq	1d55c <__assert_fail@plt+0xb574>
   1d568:	cmp	r3, #0
   1d56c:	add	r0, r0, #1
   1d570:	bne	1d53c <__assert_fail@plt+0xb554>
   1d574:	bx	lr
   1d578:	mov	r0, #1
   1d57c:	bx	lr
   1d580:	mov	r0, r3
   1d584:	bx	lr
   1d588:	ldrd	r2, [r0, #8]
   1d58c:	push	{r4, lr}
   1d590:	mov	r4, r0
   1d594:	ldr	r0, [r0, #28]
   1d598:	str	r3, [r2, #4]
   1d59c:	str	r2, [r3]
   1d5a0:	bl	11ab4 <free@plt>
   1d5a4:	mov	r0, r4
   1d5a8:	pop	{r4, lr}
   1d5ac:	b	11ab4 <free@plt>
   1d5b0:	push	{r4, r5, r6, r7, r8, lr}
   1d5b4:	mov	r5, r0
   1d5b8:	mov	r0, #36	; 0x24
   1d5bc:	mov	r7, r1
   1d5c0:	mov	r6, r2
   1d5c4:	bl	2f2ec <renameat2@@Base+0x5d8>
   1d5c8:	mov	r3, r5
   1d5cc:	ldr	ip, [r3, #16]!
   1d5d0:	mov	r4, r0
   1d5d4:	add	lr, r0, #8
   1d5d8:	str	r0, [r4]
   1d5dc:	str	r0, [r4, #4]
   1d5e0:	str	r3, [r4, #12]
   1d5e4:	str	ip, [r4, #8]
   1d5e8:	add	r3, r4, #16
   1d5ec:	str	lr, [r5, #16]
   1d5f0:	mov	r0, r7
   1d5f4:	str	lr, [ip, #4]
   1d5f8:	str	r5, [r4, #24]
   1d5fc:	str	r3, [r4, #16]
   1d600:	str	r3, [r4, #20]
   1d604:	bl	2f518 <renameat2@@Base+0x804>
   1d608:	str	r6, [r4, #32]
   1d60c:	str	r0, [r4, #28]
   1d610:	mov	r0, r4
   1d614:	pop	{r4, r5, r6, r7, r8, pc}
   1d618:	ldr	r2, [r0, #24]
   1d61c:	ldr	r3, [r1, #24]
   1d620:	ldr	r2, [r2, #32]
   1d624:	ldr	r3, [r3, #32]
   1d628:	cmp	r2, r3
   1d62c:	beq	1d638 <__assert_fail@plt+0xb650>
   1d630:	mov	r0, #0
   1d634:	bx	lr
   1d638:	push	{r4, lr}
   1d63c:	ldr	r1, [r1, #28]
   1d640:	ldr	r0, [r0, #28]
   1d644:	bl	11a48 <strcmp@plt>
   1d648:	clz	r0, r0
   1d64c:	lsr	r0, r0, #5
   1d650:	pop	{r4, pc}
   1d654:	push	{r4, r5, r6, lr}
   1d658:	mov	r4, r0
   1d65c:	ldr	r0, [r0, #28]
   1d660:	mov	r5, r1
   1d664:	bl	25d38 <__assert_fail@plt+0x13d50>
   1d668:	ldr	r3, [r4, #24]
   1d66c:	mov	r1, r5
   1d670:	ldr	r3, [r3, #32]
   1d674:	rsb	r0, r0, r0, lsl #5
   1d678:	add	r0, r0, r3
   1d67c:	bl	31a48 <renameat2@@Base+0x2d34>
   1d680:	mov	r0, r1
   1d684:	pop	{r4, r5, r6, pc}
   1d688:	ldr	r3, [r0, #16]
   1d68c:	push	{r4, r5, r6, lr}
   1d690:	add	r5, r0, #16
   1d694:	cmp	r5, r3
   1d698:	mov	r4, r0
   1d69c:	ldr	r6, [pc, #92]	; 1d700 <__assert_fail@plt+0xb718>
   1d6a0:	beq	1d6d4 <__assert_fail@plt+0xb6ec>
   1d6a4:	mov	r1, r3
   1d6a8:	ldr	r2, [r3, #4]
   1d6ac:	ldr	ip, [r1], #-8
   1d6b0:	ldr	r0, [r6]
   1d6b4:	str	r2, [ip, #4]
   1d6b8:	str	ip, [r2]
   1d6bc:	str	r3, [r3]
   1d6c0:	str	r3, [r3, #4]
   1d6c4:	bl	2642c <__assert_fail@plt+0x14444>
   1d6c8:	ldr	r3, [r4, #16]
   1d6cc:	cmp	r3, r5
   1d6d0:	bne	1d6a4 <__assert_fail@plt+0xb6bc>
   1d6d4:	ldrd	r2, [r4]
   1d6d8:	mov	r1, r4
   1d6dc:	ldr	r0, [r6]
   1d6e0:	str	r3, [r2, #4]
   1d6e4:	str	r2, [r3]
   1d6e8:	bl	2642c <__assert_fail@plt+0x14444>
   1d6ec:	ldr	r0, [r4, #32]
   1d6f0:	bl	11fb8 <close@plt>
   1d6f4:	mov	r0, r4
   1d6f8:	pop	{r4, r5, r6, lr}
   1d6fc:	b	1d588 <__assert_fail@plt+0xb5a0>
   1d700:	andeq	sl, r4, r8, asr #8
   1d704:	ldr	r3, [pc, #100]	; 1d770 <__assert_fail@plt+0xb788>
   1d708:	push	{r4, lr}
   1d70c:	mov	ip, r0
   1d710:	ldr	r4, [pc, #92]	; 1d774 <__assert_fail@plt+0xb78c>
   1d714:	ldr	r0, [r3]
   1d718:	sub	sp, sp, #80	; 0x50
   1d71c:	ldr	r3, [r4]
   1d720:	cmp	r0, #0
   1d724:	str	r3, [sp, #76]	; 0x4c
   1d728:	beq	1d754 <__assert_fail@plt+0xb76c>
   1d72c:	mov	r2, r1
   1d730:	add	r3, sp, #4
   1d734:	add	r1, sp, #40	; 0x28
   1d738:	str	ip, [sp, #36]	; 0x24
   1d73c:	str	r2, [sp, #68]	; 0x44
   1d740:	str	r3, [sp, #64]	; 0x40
   1d744:	bl	25af0 <__assert_fail@plt+0x13b08>
   1d748:	cmp	r0, #0
   1d74c:	beq	1d754 <__assert_fail@plt+0xb76c>
   1d750:	bl	1d688 <__assert_fail@plt+0xb6a0>
   1d754:	ldr	r2, [sp, #76]	; 0x4c
   1d758:	ldr	r3, [r4]
   1d75c:	cmp	r2, r3
   1d760:	bne	1d76c <__assert_fail@plt+0xb784>
   1d764:	add	sp, sp, #80	; 0x50
   1d768:	pop	{r4, pc}
   1d76c:	bl	11b50 <__stack_chk_fail@plt>
   1d770:	andeq	sl, r4, r8, asr #8
   1d774:	andeq	r7, r4, r8, lsl #30
   1d778:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d77c:	sub	sp, sp, #36	; 0x24
   1d780:	ldr	r6, [pc, #288]	; 1d8a8 <__assert_fail@plt+0xb8c0>
   1d784:	ldr	r9, [pc, #288]	; 1d8ac <__assert_fail@plt+0xb8c4>
   1d788:	mov	r8, r0
   1d78c:	ldr	r5, [r6]
   1d790:	ldr	r3, [r9]
   1d794:	cmp	r5, #0
   1d798:	mov	r7, r1
   1d79c:	str	r3, [sp, #28]
   1d7a0:	beq	1d828 <__assert_fail@plt+0xb840>
   1d7a4:	ldr	r4, [pc, #260]	; 1d8b0 <__assert_fail@plt+0xb8c8>
   1d7a8:	b	1d7d8 <__assert_fail@plt+0xb7f0>
   1d7ac:	ldr	r0, [r4, #4]
   1d7b0:	cmp	r0, r4
   1d7b4:	beq	1d7ec <__assert_fail@plt+0xb804>
   1d7b8:	ldr	r3, [r0, #32]
   1d7bc:	cmp	r3, r7
   1d7c0:	bne	1d7d0 <__assert_fail@plt+0xb7e8>
   1d7c4:	ldr	r0, [r0, #4]
   1d7c8:	cmp	r0, r4
   1d7cc:	beq	1d7ec <__assert_fail@plt+0xb804>
   1d7d0:	bl	1d688 <__assert_fail@plt+0xb6a0>
   1d7d4:	ldr	r5, [r6]
   1d7d8:	mov	r0, r5
   1d7dc:	bl	258a4 <__assert_fail@plt+0x138bc>
   1d7e0:	ldr	r3, [r6, #4]
   1d7e4:	cmp	r0, r3
   1d7e8:	bcs	1d7ac <__assert_fail@plt+0xb7c4>
   1d7ec:	ldr	r2, [r8, #8]
   1d7f0:	add	r3, r8, #8
   1d7f4:	cmp	r2, r3
   1d7f8:	beq	1d810 <__assert_fail@plt+0xb828>
   1d7fc:	mov	r0, r5
   1d800:	mov	r1, r8
   1d804:	bl	263d4 <__assert_fail@plt+0x143ec>
   1d808:	cmp	r8, r0
   1d80c:	bne	1d894 <__assert_fail@plt+0xb8ac>
   1d810:	ldr	r2, [sp, #28]
   1d814:	ldr	r3, [r9]
   1d818:	cmp	r2, r3
   1d81c:	bne	1d890 <__assert_fail@plt+0xb8a8>
   1d820:	add	sp, sp, #36	; 0x24
   1d824:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d828:	mov	r4, #8
   1d82c:	add	r1, sp, r4
   1d830:	mov	r0, #7
   1d834:	str	r4, [r6, #4]
   1d838:	bl	11b74 <getrlimit64@plt>
   1d83c:	cmp	r0, #0
   1d840:	movne	r0, r4
   1d844:	bne	1d868 <__assert_fail@plt+0xb880>
   1d848:	ldrd	r2, [sp, #8]
   1d84c:	lsr	r0, r2, #2
   1d850:	lsr	r1, r3, #2
   1d854:	orr	r0, r0, r3, lsl #30
   1d858:	cmp	r1, #0
   1d85c:	cmpeq	r0, #8
   1d860:	movcc	r0, #8
   1d864:	str	r0, [r6, #4]
   1d868:	mov	r1, #0
   1d86c:	str	r1, [sp]
   1d870:	ldr	r3, [pc, #60]	; 1d8b4 <__assert_fail@plt+0xb8cc>
   1d874:	ldr	r2, [pc, #60]	; 1d8b8 <__assert_fail@plt+0xb8d0>
   1d878:	bl	25da8 <__assert_fail@plt+0x13dc0>
   1d87c:	cmp	r0, #0
   1d880:	mov	r5, r0
   1d884:	str	r0, [r6]
   1d888:	bne	1d7a4 <__assert_fail@plt+0xb7bc>
   1d88c:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   1d890:	bl	11b50 <__stack_chk_fail@plt>
   1d894:	ldr	r3, [pc, #32]	; 1d8bc <__assert_fail@plt+0xb8d4>
   1d898:	mov	r2, #169	; 0xa9
   1d89c:	ldr	r1, [pc, #28]	; 1d8c0 <__assert_fail@plt+0xb8d8>
   1d8a0:	ldr	r0, [pc, #28]	; 1d8c4 <__assert_fail@plt+0xb8dc>
   1d8a4:	bl	11fe8 <__assert_fail@plt>
   1d8a8:	andeq	sl, r4, r8, asr #8
   1d8ac:	andeq	r7, r4, r8, lsl #30
   1d8b0:	andeq	r8, r4, r0, ror #4
   1d8b4:	andeq	sp, r1, r8, lsl r6
   1d8b8:	andeq	sp, r1, r4, asr r6
   1d8bc:	andeq	r4, r3, ip, lsr #16
   1d8c0:	andeq	r4, r3, r0, asr r8
   1d8c4:	andeq	r4, r3, r8, asr r8
   1d8c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8cc:	mov	r8, r1
   1d8d0:	add	fp, sp, #32
   1d8d4:	sub	sp, sp, #140	; 0x8c
   1d8d8:	ldr	r1, [r1]
   1d8dc:	ldr	r9, [pc, #1036]	; 1dcf0 <__assert_fail@plt+0xbd08>
   1d8e0:	mov	r7, r0
   1d8e4:	ldrb	r0, [r1]
   1d8e8:	ldr	ip, [r9]
   1d8ec:	str	r2, [fp, #-152]	; 0xffffff68
   1d8f0:	cmp	r0, #0
   1d8f4:	cmpne	r0, #47	; 0x2f
   1d8f8:	str	r3, [fp, #-156]	; 0xffffff64
   1d8fc:	mov	r4, r1
   1d900:	str	ip, [fp, #-40]	; 0xffffffd8
   1d904:	beq	1d918 <__assert_fail@plt+0xb930>
   1d908:	ldrb	r3, [r4, #1]!
   1d90c:	cmp	r3, #0
   1d910:	cmpne	r3, #47	; 0x2f
   1d914:	bne	1d908 <__assert_fail@plt+0xb920>
   1d918:	cmp	r0, #46	; 0x2e
   1d91c:	beq	1daec <__assert_fail@plt+0xbb04>
   1d920:	sub	sl, r4, r1
   1d924:	add	r2, sl, #8
   1d928:	bic	r2, r2, #7
   1d92c:	sub	sp, sp, r2
   1d930:	add	r5, sp, #15
   1d934:	mov	r2, sl
   1d938:	lsr	r5, r5, #3
   1d93c:	lsl	r6, r5, #3
   1d940:	mov	r0, r6
   1d944:	bl	11afc <memcpy@plt>
   1d948:	ldr	r2, [pc, #932]	; 1dcf4 <__assert_fail@plt+0xbd0c>
   1d94c:	mov	r1, #0
   1d950:	strb	r1, [sl, r5, lsl #3]
   1d954:	ldr	r0, [r2]
   1d958:	cmp	r0, r1
   1d95c:	beq	1d9b8 <__assert_fail@plt+0xb9d0>
   1d960:	sub	r1, fp, #148	; 0x94
   1d964:	str	r7, [fp, #-124]	; 0xffffff84
   1d968:	str	r6, [fp, #-120]	; 0xffffff88
   1d96c:	bl	25af0 <__assert_fail@plt+0x13b08>
   1d970:	subs	r5, r0, #0
   1d974:	beq	1d9b8 <__assert_fail@plt+0xb9d0>
   1d978:	ldrd	r2, [r5]
   1d97c:	str	r3, [r2, #4]
   1d980:	str	r2, [r3]
   1d984:	str	r5, [r5]
   1d988:	str	r5, [r5, #4]
   1d98c:	ldrb	r3, [r4]
   1d990:	cmp	r3, #47	; 0x2f
   1d994:	beq	1da0c <__assert_fail@plt+0xba24>
   1d998:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1d99c:	str	r4, [r8]
   1d9a0:	ldr	r3, [r9]
   1d9a4:	mov	r0, r5
   1d9a8:	cmp	r2, r3
   1d9ac:	bne	1dcd8 <__assert_fail@plt+0xbcf0>
   1d9b0:	sub	sp, fp, #32
   1d9b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9b8:	ldr	ip, [pc, #824]	; 1dcf8 <__assert_fail@plt+0xbd10>
   1d9bc:	mov	r2, #49152	; 0xc000
   1d9c0:	mov	r1, r6
   1d9c4:	ldr	r3, [ip]
   1d9c8:	ldr	r0, [r7, #32]
   1d9cc:	add	r3, r3, #1
   1d9d0:	str	r3, [ip]
   1d9d4:	bl	11d9c <openat64@plt>
   1d9d8:	subs	r2, r0, #0
   1d9dc:	blt	1da1c <__assert_fail@plt+0xba34>
   1d9e0:	mov	r1, r6
   1d9e4:	mov	r0, r7
   1d9e8:	bl	1d5b0 <__assert_fail@plt+0xb5c8>
   1d9ec:	ldr	r1, [fp, #-152]	; 0xffffff68
   1d9f0:	mov	r5, r0
   1d9f4:	bl	1d778 <__assert_fail@plt+0xb790>
   1d9f8:	cmp	r5, #0
   1d9fc:	beq	1da1c <__assert_fail@plt+0xba34>
   1da00:	ldrb	r3, [r4]
   1da04:	cmp	r3, #47	; 0x2f
   1da08:	bne	1d998 <__assert_fail@plt+0xb9b0>
   1da0c:	ldrb	r3, [r4, #1]!
   1da10:	cmp	r3, #47	; 0x2f
   1da14:	beq	1da0c <__assert_fail@plt+0xba24>
   1da18:	b	1d998 <__assert_fail@plt+0xb9b0>
   1da1c:	bl	11dc0 <__errno_location@plt>
   1da20:	ldr	r3, [r0]
   1da24:	str	r0, [fp, #-160]	; 0xffffff60
   1da28:	cmp	r3, #31
   1da2c:	cmpne	r3, #40	; 0x28
   1da30:	moveq	r5, #1
   1da34:	movne	r5, #0
   1da38:	cmp	r3, #0
   1da3c:	moveq	r5, #1
   1da40:	cmp	r3, #20
   1da44:	orreq	r5, r5, #1
   1da48:	cmp	r5, #0
   1da4c:	beq	1d998 <__assert_fail@plt+0xb9b0>
   1da50:	ldr	r5, [r7, #32]
   1da54:	mov	r2, #256	; 0x100
   1da58:	sub	r3, fp, #148	; 0x94
   1da5c:	str	r2, [sp]
   1da60:	mov	r1, r5
   1da64:	mov	r2, r6
   1da68:	mov	r0, #3
   1da6c:	bl	11bbc <__fxstatat64@plt>
   1da70:	subs	r3, r0, #0
   1da74:	str	r3, [fp, #-152]	; 0xffffff68
   1da78:	bne	1db60 <__assert_fail@plt+0xbb78>
   1da7c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1da80:	and	r3, r3, #61440	; 0xf000
   1da84:	cmp	r3, #40960	; 0xa000
   1da88:	bne	1db60 <__assert_fail@plt+0xbb78>
   1da8c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   1da90:	add	r0, r0, #9
   1da94:	bl	2f2ec <renameat2@@Base+0x5d8>
   1da98:	mov	r1, r6
   1da9c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1daa0:	add	r2, r0, #8
   1daa4:	mov	sl, r0
   1daa8:	mov	r0, r5
   1daac:	str	r2, [fp, #-164]	; 0xffffff5c
   1dab0:	mov	r5, r2
   1dab4:	bl	11cd0 <readlinkat@plt>
   1dab8:	subs	r6, r0, #0
   1dabc:	ble	1db58 <__assert_fail@plt+0xbb70>
   1dac0:	ldr	r3, [fp, #-152]	; 0xffffff68
   1dac4:	strb	r3, [r5, r6]
   1dac8:	ldrb	r3, [sl, #8]
   1dacc:	str	r5, [sl, #4]
   1dad0:	add	r5, r5, r6
   1dad4:	cmp	r3, #47	; 0x2f
   1dad8:	beq	1db88 <__assert_fail@plt+0xbba0>
   1dadc:	ldr	r3, [fp, #-156]	; 0xffffff64
   1dae0:	mov	r5, r7
   1dae4:	str	sl, [r3]
   1dae8:	b	1da00 <__assert_fail@plt+0xba18>
   1daec:	add	r3, r1, #1
   1daf0:	cmp	r4, r3
   1daf4:	beq	1db80 <__assert_fail@plt+0xbb98>
   1daf8:	ldrb	r3, [r1, #1]
   1dafc:	cmp	r3, #46	; 0x2e
   1db00:	bne	1d920 <__assert_fail@plt+0xb938>
   1db04:	add	r3, r1, #2
   1db08:	cmp	r4, r3
   1db0c:	bne	1d920 <__assert_fail@plt+0xb938>
   1db10:	ldr	r5, [r7, #24]
   1db14:	cmp	r5, #0
   1db18:	beq	1dcc8 <__assert_fail@plt+0xbce0>
   1db1c:	ldr	r3, [r7]
   1db20:	cmp	r7, r3
   1db24:	bne	1dcdc <__assert_fail@plt+0xbcf4>
   1db28:	ldr	r3, [pc, #460]	; 1dcfc <__assert_fail@plt+0xbd14>
   1db2c:	str	r3, [r7, #4]
   1db30:	ldr	r2, [r3]
   1db34:	str	r2, [r7]
   1db38:	str	r7, [r2, #4]
   1db3c:	str	r7, [r3]
   1db40:	b	1da00 <__assert_fail@plt+0xba18>
   1db44:	ldr	r2, [fp, #-160]	; 0xffffff60
   1db48:	ldr	r2, [r2]
   1db4c:	cmp	r2, #0
   1db50:	str	r2, [r3, #8]
   1db54:	beq	1db98 <__assert_fail@plt+0xbbb0>
   1db58:	mov	r0, sl
   1db5c:	bl	11ab4 <free@plt>
   1db60:	ldr	r2, [fp, #-156]	; 0xffffff64
   1db64:	mov	r3, #0
   1db68:	mov	r5, #0
   1db6c:	str	r3, [r2]
   1db70:	ldr	r2, [fp, #-160]	; 0xffffff60
   1db74:	mov	r3, #40	; 0x28
   1db78:	str	r3, [r2]
   1db7c:	b	1d998 <__assert_fail@plt+0xb9b0>
   1db80:	mov	r5, r7
   1db84:	b	1da00 <__assert_fail@plt+0xba18>
   1db88:	ldr	r3, [pc, #364]	; 1dcfc <__assert_fail@plt+0xbd14>
   1db8c:	ldr	r2, [r3, #8]
   1db90:	cmn	r2, #1
   1db94:	beq	1dca4 <__assert_fail@plt+0xbcbc>
   1db98:	ldr	r3, [fp, #-164]	; 0xffffff5c
   1db9c:	ldrb	r6, [r3, r6]
   1dba0:	mov	r3, #0
   1dba4:	strb	r3, [r5]
   1dba8:	sub	r2, fp, #148	; 0x94
   1dbac:	ldr	r1, [sl, #4]
   1dbb0:	mov	r0, #3
   1dbb4:	bl	11f64 <__xstat64@plt>
   1dbb8:	strb	r6, [r5]
   1dbbc:	cmp	r0, #0
   1dbc0:	bne	1dbdc <__assert_fail@plt+0xbbf4>
   1dbc4:	ldr	r3, [pc, #308]	; 1dd00 <__assert_fail@plt+0xbd18>
   1dbc8:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   1dbcc:	ldrd	r2, [r3]
   1dbd0:	cmp	r1, r3
   1dbd4:	cmpeq	r0, r2
   1dbd8:	beq	1dc64 <__assert_fail@plt+0xbc7c>
   1dbdc:	ldr	r2, [sl, #4]
   1dbe0:	sub	r3, r5, #1
   1dbe4:	cmp	r3, r2
   1dbe8:	beq	1db58 <__assert_fail@plt+0xbb70>
   1dbec:	add	r2, r2, #1
   1dbf0:	cmp	r2, r3
   1dbf4:	beq	1dc98 <__assert_fail@plt+0xbcb0>
   1dbf8:	ldrb	r1, [r5, #-1]
   1dbfc:	cmp	r1, #47	; 0x2f
   1dc00:	bne	1dc10 <__assert_fail@plt+0xbc28>
   1dc04:	b	1dc24 <__assert_fail@plt+0xbc3c>
   1dc08:	cmp	r6, #47	; 0x2f
   1dc0c:	beq	1dc24 <__assert_fail@plt+0xbc3c>
   1dc10:	ldrb	r6, [r3, #-1]!
   1dc14:	cmp	r2, r3
   1dc18:	bne	1dc08 <__assert_fail@plt+0xbc20>
   1dc1c:	mov	r5, r2
   1dc20:	b	1dba0 <__assert_fail@plt+0xbbb8>
   1dc24:	ldrb	r1, [r3, #-1]
   1dc28:	cmp	r1, #47	; 0x2f
   1dc2c:	movne	r5, r3
   1dc30:	ldrbne	r6, [r3]
   1dc34:	bne	1dba0 <__assert_fail@plt+0xbbb8>
   1dc38:	sub	r3, r3, #1
   1dc3c:	cmp	r2, r3
   1dc40:	mov	r5, r3
   1dc44:	add	r0, r3, #1
   1dc48:	beq	1dc5c <__assert_fail@plt+0xbc74>
   1dc4c:	ldrb	r1, [r3, #-1]
   1dc50:	sub	r3, r3, #1
   1dc54:	cmp	r1, #47	; 0x2f
   1dc58:	beq	1dc3c <__assert_fail@plt+0xbc54>
   1dc5c:	ldrb	r6, [r0, #-1]
   1dc60:	b	1dba0 <__assert_fail@plt+0xbbb8>
   1dc64:	ldr	r3, [pc, #148]	; 1dd00 <__assert_fail@plt+0xbd18>
   1dc68:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   1dc6c:	ldrd	r2, [r3, #96]	; 0x60
   1dc70:	cmp	r1, r3
   1dc74:	cmpeq	r0, r2
   1dc78:	bne	1dbdc <__assert_fail@plt+0xbbf4>
   1dc7c:	cmp	r6, #47	; 0x2f
   1dc80:	bne	1dc90 <__assert_fail@plt+0xbca8>
   1dc84:	ldrb	r3, [r5, #1]!
   1dc88:	cmp	r3, #47	; 0x2f
   1dc8c:	beq	1dc84 <__assert_fail@plt+0xbc9c>
   1dc90:	str	r5, [sl, #4]
   1dc94:	b	1dadc <__assert_fail@plt+0xbaf4>
   1dc98:	ldrb	r6, [r5, #-1]
   1dc9c:	mov	r5, r2
   1dca0:	b	1dba0 <__assert_fail@plt+0xbbb8>
   1dca4:	ldr	r2, [pc, #84]	; 1dd00 <__assert_fail@plt+0xbd18>
   1dca8:	ldr	r1, [pc, #84]	; 1dd04 <__assert_fail@plt+0xbd1c>
   1dcac:	mov	r0, #3
   1dcb0:	bl	11f64 <__xstat64@plt>
   1dcb4:	ldr	r3, [pc, #64]	; 1dcfc <__assert_fail@plt+0xbd14>
   1dcb8:	cmp	r0, #0
   1dcbc:	bne	1db44 <__assert_fail@plt+0xbb5c>
   1dcc0:	str	r0, [r3, #8]
   1dcc4:	b	1db98 <__assert_fail@plt+0xbbb0>
   1dcc8:	bl	11dc0 <__errno_location@plt>
   1dccc:	mov	r3, #18
   1dcd0:	str	r3, [r0]
   1dcd4:	b	1d998 <__assert_fail@plt+0xb9b0>
   1dcd8:	bl	11b50 <__stack_chk_fail@plt>
   1dcdc:	ldr	r3, [pc, #36]	; 1dd08 <__assert_fail@plt+0xbd20>
   1dce0:	ldr	r2, [pc, #36]	; 1dd0c <__assert_fail@plt+0xbd24>
   1dce4:	ldr	r1, [pc, #36]	; 1dd10 <__assert_fail@plt+0xbd28>
   1dce8:	ldr	r0, [pc, #36]	; 1dd14 <__assert_fail@plt+0xbd2c>
   1dcec:	bl	11fe8 <__assert_fail@plt>
   1dcf0:	andeq	r7, r4, r8, lsl #30
   1dcf4:	andeq	sl, r4, r8, asr #8
   1dcf8:	andeq	sl, r4, r4, lsr r8
   1dcfc:	andeq	r8, r4, r0, ror #4
   1dd00:	andeq	sl, r4, r8, asr #15
   1dd04:	andeq	r3, r3, r8, ror r6
   1dd08:	andeq	r4, r3, r0, asr #16
   1dd0c:	andeq	r0, r0, fp, ror r1
   1dd10:	andeq	r4, r3, r0, asr r8
   1dd14:	andeq	r4, r3, r4, lsl #17
   1dd18:	ldr	r3, [pc, #1176]	; 1e1b8 <__assert_fail@plt+0xc1d0>
   1dd1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd20:	add	fp, sp, #32
   1dd24:	sub	sp, sp, #36	; 0x24
   1dd28:	ldr	r6, [r0]
   1dd2c:	ldr	r3, [r3]
   1dd30:	str	r0, [fp, #-64]	; 0xffffffc0
   1dd34:	mov	r0, r6
   1dd38:	str	r3, [fp, #-40]	; 0xffffffd8
   1dd3c:	str	r1, [fp, #-56]	; 0xffffffc8
   1dd40:	str	r6, [fp, #-48]	; 0xffffffd0
   1dd44:	bl	1d508 <__assert_fail@plt+0xb520>
   1dd48:	ldr	r8, [pc, #1132]	; 1e1bc <__assert_fail@plt+0xc1d4>
   1dd4c:	add	r3, r8, #28
   1dd50:	str	r3, [r8, #28]
   1dd54:	str	r3, [r8, #32]
   1dd58:	ldr	r3, [pc, #1120]	; 1e1c0 <__assert_fail@plt+0xc1d8>
   1dd5c:	ldr	r3, [r3]
   1dd60:	str	r3, [fp, #-68]	; 0xffffffbc
   1dd64:	cmp	r0, #1024	; 0x400
   1dd68:	str	r0, [fp, #-60]	; 0xffffffc4
   1dd6c:	bhi	1e1a0 <__assert_fail@plt+0xc1b8>
   1dd70:	ldrb	r3, [r6]
   1dd74:	cmp	r3, #47	; 0x2f
   1dd78:	cmpne	r3, #0
   1dd7c:	beq	1dff8 <__assert_fail@plt+0xc010>
   1dd80:	mov	r0, r6
   1dd84:	bl	11d78 <strlen@plt>
   1dd88:	add	r0, r6, r0
   1dd8c:	sub	r9, r0, #1
   1dd90:	ldrb	r3, [r0, #-1]
   1dd94:	cmp	r3, #47	; 0x2f
   1dd98:	beq	1dfc8 <__assert_fail@plt+0xbfe0>
   1dd9c:	cmp	r6, r9
   1dda0:	beq	1dff8 <__assert_fail@plt+0xc010>
   1dda4:	ldrb	r3, [r9, #-1]
   1dda8:	cmp	r3, #47	; 0x2f
   1ddac:	subne	r3, r9, #1
   1ddb0:	beq	1ddcc <__assert_fail@plt+0xbde4>
   1ddb4:	cmp	r6, r3
   1ddb8:	mov	r9, r3
   1ddbc:	beq	1dff8 <__assert_fail@plt+0xc010>
   1ddc0:	ldrb	r2, [r3, #-1]!
   1ddc4:	cmp	r2, #47	; 0x2f
   1ddc8:	bne	1ddb4 <__assert_fail@plt+0xbdcc>
   1ddcc:	ldr	r3, [pc, #1008]	; 1e1c4 <__assert_fail@plt+0xc1dc>
   1ddd0:	ldr	r3, [r3]
   1ddd4:	tst	r3, #32
   1ddd8:	bne	1e01c <__assert_fail@plt+0xc034>
   1dddc:	mov	r5, #0
   1dde0:	ldr	r4, [pc, #992]	; 1e1c8 <__assert_fail@plt+0xc1e0>
   1dde4:	mov	sl, r5
   1dde8:	mov	r3, #0
   1ddec:	cmp	r5, #0
   1ddf0:	str	r3, [fp, #-44]	; 0xffffffd4
   1ddf4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ddf8:	sub	r3, fp, #44	; 0x2c
   1ddfc:	beq	1dee0 <__assert_fail@plt+0xbef8>
   1de00:	add	r1, r5, #4
   1de04:	mov	r0, r4
   1de08:	bl	1d8c8 <__assert_fail@plt+0xb8e0>
   1de0c:	subs	r7, r0, #0
   1de10:	beq	1e0dc <__assert_fail@plt+0xc0f4>
   1de14:	ldr	r3, [r5, #4]
   1de18:	ldrb	r3, [r3]
   1de1c:	cmp	r3, #0
   1de20:	beq	1df18 <__assert_fail@plt+0xbf30>
   1de24:	ldr	r4, [fp, #-44]	; 0xffffffd4
   1de28:	cmp	r4, #0
   1de2c:	beq	1de7c <__assert_fail@plt+0xbe94>
   1de30:	ldr	r0, [r4, #4]
   1de34:	ldrb	r3, [r0]
   1de38:	cmp	r3, #0
   1de3c:	beq	1de6c <__assert_fail@plt+0xbe84>
   1de40:	str	r5, [r4]
   1de44:	bl	1d508 <__assert_fail@plt+0xb520>
   1de48:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1de4c:	add	r3, r3, r0
   1de50:	cmp	r3, #1024	; 0x400
   1de54:	str	r3, [fp, #-60]	; 0xffffffc4
   1de58:	bhi	1e170 <__assert_fail@plt+0xc188>
   1de5c:	mov	r5, r4
   1de60:	ldr	r6, [fp, #-48]	; 0xffffffd0
   1de64:	mov	r4, r7
   1de68:	b	1dde8 <__assert_fail@plt+0xbe00>
   1de6c:	ldr	r3, [r4]
   1de70:	mov	r0, r4
   1de74:	str	r3, [fp, #-44]	; 0xffffffd4
   1de78:	bl	11ab4 <free@plt>
   1de7c:	cmp	sl, #0
   1de80:	beq	1df08 <__assert_fail@plt+0xbf20>
   1de84:	cmp	r5, #0
   1de88:	movne	r4, r5
   1de8c:	bne	1de5c <__assert_fail@plt+0xbe74>
   1de90:	ldr	r0, [r7, #32]
   1de94:	cmn	r0, #100	; 0x64
   1de98:	streq	r0, [sl, #32]
   1de9c:	beq	1df9c <__assert_fail@plt+0xbfb4>
   1dea0:	bl	11b8c <dup@plt>
   1dea4:	cmn	r0, #1
   1dea8:	str	r0, [sl, #32]
   1deac:	bne	1df9c <__assert_fail@plt+0xbfb4>
   1deb0:	mov	r0, sl
   1deb4:	bl	1d588 <__assert_fail@plt+0xb5a0>
   1deb8:	mov	r3, #0
   1debc:	mov	r4, r7
   1dec0:	mov	r5, r3
   1dec4:	ldr	r6, [fp, #-48]	; 0xffffffd0
   1dec8:	cmp	r6, r9
   1decc:	orrne	r3, r3, #1
   1ded0:	cmp	r3, #0
   1ded4:	beq	1e040 <__assert_fail@plt+0xc058>
   1ded8:	mov	sl, #0
   1dedc:	b	1dde8 <__assert_fail@plt+0xbe00>
   1dee0:	sub	r1, fp, #48	; 0x30
   1dee4:	mov	r0, r4
   1dee8:	bl	1d8c8 <__assert_fail@plt+0xb8e0>
   1deec:	subs	r7, r0, #0
   1def0:	beq	1e0dc <__assert_fail@plt+0xc0f4>
   1def4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1def8:	cmp	r3, #0
   1defc:	bne	1df28 <__assert_fail@plt+0xbf40>
   1df00:	cmp	sl, #0
   1df04:	bne	1de90 <__assert_fail@plt+0xbea8>
   1df08:	adds	r3, r5, #0
   1df0c:	mov	r4, r7
   1df10:	movne	r3, #1
   1df14:	b	1dec4 <__assert_fail@plt+0xbedc>
   1df18:	mov	r0, r5
   1df1c:	ldr	r5, [r5]
   1df20:	bl	11ab4 <free@plt>
   1df24:	b	1de24 <__assert_fail@plt+0xbe3c>
   1df28:	ldrb	r3, [r6]
   1df2c:	cmp	r3, #47	; 0x2f
   1df30:	cmpne	r3, #0
   1df34:	beq	1e164 <__assert_fail@plt+0xc17c>
   1df38:	mov	r4, r6
   1df3c:	ldrb	r3, [r4, #1]!
   1df40:	cmp	r3, #0
   1df44:	cmpne	r3, #47	; 0x2f
   1df48:	bne	1df3c <__assert_fail@plt+0xbf54>
   1df4c:	sub	r4, r4, r6
   1df50:	add	r3, r4, #1
   1df54:	add	r3, r3, #7
   1df58:	bic	r3, r3, #7
   1df5c:	sub	sp, sp, r3
   1df60:	mov	r3, sp
   1df64:	mov	r1, r6
   1df68:	lsr	r6, r3, #3
   1df6c:	mov	r2, r4
   1df70:	lsl	r3, r6, #3
   1df74:	mov	r0, r3
   1df78:	bl	11afc <memcpy@plt>
   1df7c:	mov	r3, #0
   1df80:	strb	r3, [r4, r6, lsl #3]
   1df84:	mvn	r2, #0
   1df88:	mov	r1, r0
   1df8c:	mov	r0, r7
   1df90:	bl	1d5b0 <__assert_fail@plt+0xb5c8>
   1df94:	mov	sl, r0
   1df98:	b	1de24 <__assert_fail@plt+0xbe3c>
   1df9c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1dfa0:	mov	r0, sl
   1dfa4:	bl	1d778 <__assert_fail@plt+0xb790>
   1dfa8:	ldr	r2, [r8]
   1dfac:	mov	r3, #0
   1dfb0:	mov	r4, r7
   1dfb4:	stm	sl, {r2, r8}
   1dfb8:	mov	r5, r3
   1dfbc:	str	sl, [r2, #4]
   1dfc0:	str	sl, [r8]
   1dfc4:	b	1dec4 <__assert_fail@plt+0xbedc>
   1dfc8:	cmp	r6, r9
   1dfcc:	beq	1dff8 <__assert_fail@plt+0xc010>
   1dfd0:	ldrb	r3, [r0, #-2]
   1dfd4:	sub	r9, r0, #2
   1dfd8:	cmp	r3, #47	; 0x2f
   1dfdc:	beq	1dff0 <__assert_fail@plt+0xc008>
   1dfe0:	b	1dd9c <__assert_fail@plt+0xbdb4>
   1dfe4:	ldrb	r3, [r9, #-1]!
   1dfe8:	cmp	r3, #47	; 0x2f
   1dfec:	bne	1dd9c <__assert_fail@plt+0xbdb4>
   1dff0:	cmp	r6, r9
   1dff4:	bne	1dfe4 <__assert_fail@plt+0xbffc>
   1dff8:	mvn	ip, #99	; 0x63
   1dffc:	ldr	r3, [pc, #436]	; 1e1b8 <__assert_fail@plt+0xc1d0>
   1e000:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1e004:	mov	r0, ip
   1e008:	ldr	r3, [r3]
   1e00c:	cmp	r2, r3
   1e010:	bne	1e1b4 <__assert_fail@plt+0xc1cc>
   1e014:	sub	sp, fp, #32
   1e018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e01c:	mov	r3, r6
   1e020:	sub	r2, r9, r6
   1e024:	ldr	r1, [pc, #416]	; 1e1cc <__assert_fail@plt+0xc1e4>
   1e028:	mov	r0, #1
   1e02c:	bl	11e14 <__printf_chk@plt>
   1e030:	ldr	r6, [fp, #-48]	; 0xffffffd0
   1e034:	cmp	r6, r9
   1e038:	bne	1dddc <__assert_fail@plt+0xbdf4>
   1e03c:	ldr	r4, [pc, #388]	; 1e1c8 <__assert_fail@plt+0xc1e0>
   1e040:	ldr	r3, [pc, #380]	; 1e1c4 <__assert_fail@plt+0xc1dc>
   1e044:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e048:	ldr	r3, [r3]
   1e04c:	str	r9, [r2]
   1e050:	tst	r3, #32
   1e054:	beq	1e09c <__assert_fail@plt+0xc0b4>
   1e058:	ldr	r3, [pc, #352]	; 1e1c0 <__assert_fail@plt+0xc1d8>
   1e05c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1e060:	ldr	r3, [r3]
   1e064:	subs	r3, r3, r2
   1e068:	beq	1e158 <__assert_fail@plt+0xc170>
   1e06c:	ldr	r0, [pc, #348]	; 1e1d0 <__assert_fail@plt+0xc1e8>
   1e070:	ldr	r1, [pc, #348]	; 1e1d4 <__assert_fail@plt+0xc1ec>
   1e074:	cmp	r3, #1
   1e078:	mov	r2, r3
   1e07c:	moveq	r3, r0
   1e080:	movne	r3, r1
   1e084:	mov	r0, #1
   1e088:	ldr	r1, [pc, #328]	; 1e1d8 <__assert_fail@plt+0xc1f0>
   1e08c:	bl	11e14 <__printf_chk@plt>
   1e090:	ldr	r3, [pc, #324]	; 1e1dc <__assert_fail@plt+0xc1f4>
   1e094:	ldr	r0, [r3]
   1e098:	bl	11a84 <fflush@plt>
   1e09c:	ldr	r3, [r4, #24]
   1e0a0:	ldr	ip, [r4, #32]
   1e0a4:	cmp	r3, #0
   1e0a8:	beq	1dffc <__assert_fail@plt+0xc014>
   1e0ac:	ldr	r2, [r8]
   1e0b0:	b	1e0b8 <__assert_fail@plt+0xc0d0>
   1e0b4:	mov	r3, r1
   1e0b8:	ldr	r1, [r3, #24]
   1e0bc:	stm	r4, {r2, r8}
   1e0c0:	cmp	r1, #0
   1e0c4:	str	r4, [r2, #4]
   1e0c8:	str	r4, [r8]
   1e0cc:	mov	r2, r4
   1e0d0:	mov	r4, r3
   1e0d4:	bne	1e0b4 <__assert_fail@plt+0xc0cc>
   1e0d8:	b	1dffc <__assert_fail@plt+0xc014>
   1e0dc:	ldr	r3, [pc, #224]	; 1e1c4 <__assert_fail@plt+0xc1dc>
   1e0e0:	ldr	r3, [r3]
   1e0e4:	tst	r3, #32
   1e0e8:	bne	1e188 <__assert_fail@plt+0xc1a0>
   1e0ec:	cmp	sl, #0
   1e0f0:	beq	1e0fc <__assert_fail@plt+0xc114>
   1e0f4:	mov	r0, sl
   1e0f8:	bl	1d588 <__assert_fail@plt+0xb5a0>
   1e0fc:	ldr	r3, [r4, #24]
   1e100:	cmp	r3, #0
   1e104:	ldrne	r2, [r8]
   1e108:	bne	1e114 <__assert_fail@plt+0xc12c>
   1e10c:	b	1e134 <__assert_fail@plt+0xc14c>
   1e110:	mov	r3, r1
   1e114:	ldr	r1, [r3, #24]
   1e118:	stm	r4, {r2, r8}
   1e11c:	cmp	r1, #0
   1e120:	str	r4, [r2, #4]
   1e124:	str	r4, [r8]
   1e128:	mov	r2, r4
   1e12c:	mov	r4, r3
   1e130:	bne	1e110 <__assert_fail@plt+0xc128>
   1e134:	cmp	r5, #0
   1e138:	movne	r0, r5
   1e13c:	beq	1e150 <__assert_fail@plt+0xc168>
   1e140:	ldr	r4, [r0]
   1e144:	bl	11ab4 <free@plt>
   1e148:	subs	r0, r4, #0
   1e14c:	bne	1e140 <__assert_fail@plt+0xc158>
   1e150:	mvn	ip, #0
   1e154:	b	1dffc <__assert_fail@plt+0xc014>
   1e158:	ldr	r0, [pc, #128]	; 1e1e0 <__assert_fail@plt+0xc1f8>
   1e15c:	bl	11ca0 <puts@plt>
   1e160:	b	1e090 <__assert_fail@plt+0xc0a8>
   1e164:	mov	r4, r5
   1e168:	mov	r3, #1
   1e16c:	b	1df54 <__assert_fail@plt+0xbf6c>
   1e170:	bl	11dc0 <__errno_location@plt>
   1e174:	mov	r3, #40	; 0x28
   1e178:	mov	r5, r4
   1e17c:	mov	r4, r7
   1e180:	str	r3, [r0]
   1e184:	b	1e0ec <__assert_fail@plt+0xc104>
   1e188:	ldr	r0, [pc, #84]	; 1e1e4 <__assert_fail@plt+0xc1fc>
   1e18c:	bl	11ca0 <puts@plt>
   1e190:	ldr	r3, [pc, #68]	; 1e1dc <__assert_fail@plt+0xc1f4>
   1e194:	ldr	r0, [r3]
   1e198:	bl	11a84 <fflush@plt>
   1e19c:	b	1e0ec <__assert_fail@plt+0xc104>
   1e1a0:	bl	11dc0 <__errno_location@plt>
   1e1a4:	mov	r3, #40	; 0x28
   1e1a8:	mvn	ip, #0
   1e1ac:	str	r3, [r0]
   1e1b0:	b	1dffc <__assert_fail@plt+0xc014>
   1e1b4:	bl	11b50 <__stack_chk_fail@plt>
   1e1b8:	andeq	r7, r4, r8, lsl #30
   1e1bc:	andeq	r8, r4, r0, ror #4
   1e1c0:	andeq	sl, r4, r4, lsr r8
   1e1c4:	ldrdeq	sl, [r4], -r8
   1e1c8:	andeq	r8, r4, ip, ror #4
   1e1cc:	andeq	r4, r3, r0, lsr #17
   1e1d0:	strdeq	r5, [r3], -r8
   1e1d4:	andeq	r3, r3, r0, asr #22
   1e1d8:	ldrdeq	r4, [r3], -r0
   1e1dc:	andeq	r8, r4, r4, lsl #6
   1e1e0:	andeq	r4, r3, r4, asr #17
   1e1e4:			; <UNDEFINED> instruction: 0x000348b8
   1e1e8:	ldr	ip, [pc, #128]	; 1e270 <__assert_fail@plt+0xc288>
   1e1ec:	push	{r4, r5, lr}
   1e1f0:	mov	r4, r1
   1e1f4:	ldrb	r1, [ip]
   1e1f8:	sub	sp, sp, #20
   1e1fc:	mov	r5, r2
   1e200:	cmp	r1, #0
   1e204:	str	r0, [sp, #12]
   1e208:	bne	1e250 <__assert_fail@plt+0xc268>
   1e20c:	mvn	r1, #0
   1e210:	add	r0, sp, #12
   1e214:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e218:	adds	r3, r0, #100	; 0x64
   1e21c:	movne	r3, #1
   1e220:	ands	r3, r3, r0, lsr #31
   1e224:	beq	1e230 <__assert_fail@plt+0xc248>
   1e228:	add	sp, sp, #20
   1e22c:	pop	{r4, r5, pc}
   1e230:	mov	r1, r0
   1e234:	str	r5, [sp]
   1e238:	mov	r3, r4
   1e23c:	ldr	r2, [sp, #12]
   1e240:	mov	r0, #3
   1e244:	bl	11bbc <__fxstatat64@plt>
   1e248:	add	sp, sp, #20
   1e24c:	pop	{r4, r5, pc}
   1e250:	mov	r2, r0
   1e254:	str	r5, [sp]
   1e258:	mov	r3, r4
   1e25c:	mvn	r1, #99	; 0x63
   1e260:	mov	r0, #3
   1e264:	bl	11bbc <__fxstatat64@plt>
   1e268:	add	sp, sp, #20
   1e26c:	pop	{r4, r5, pc}
   1e270:	andeq	sl, r4, r0, lsr r8
   1e274:	mov	r2, #0
   1e278:	b	1e1e8 <__assert_fail@plt+0xc200>
   1e27c:	mov	r2, #256	; 0x100
   1e280:	b	1e1e8 <__assert_fail@plt+0xc200>
   1e284:	ldr	r3, [pc, #112]	; 1e2fc <__assert_fail@plt+0xc314>
   1e288:	push	{r4, r5, lr}
   1e28c:	sub	sp, sp, #12
   1e290:	ldrb	ip, [r3]
   1e294:	str	r0, [sp, #4]
   1e298:	cmp	ip, #0
   1e29c:	beq	1e2b4 <__assert_fail@plt+0xc2cc>
   1e2a0:	bl	11c88 <open64@plt>
   1e2a4:	mov	r2, r0
   1e2a8:	mov	r0, r2
   1e2ac:	add	sp, sp, #12
   1e2b0:	pop	{r4, r5, pc}
   1e2b4:	mov	r4, r1
   1e2b8:	add	r0, sp, #4
   1e2bc:	mvn	r1, #0
   1e2c0:	mov	r5, r2
   1e2c4:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e2c8:	adds	r3, r0, #100	; 0x64
   1e2cc:	movne	r3, #1
   1e2d0:	ands	r3, r3, r0, lsr #31
   1e2d4:	mov	r2, r0
   1e2d8:	bne	1e2a8 <__assert_fail@plt+0xc2c0>
   1e2dc:	mov	r2, r4
   1e2e0:	mov	r3, r5
   1e2e4:	ldr	r1, [sp, #4]
   1e2e8:	bl	11d9c <openat64@plt>
   1e2ec:	mov	r2, r0
   1e2f0:	mov	r0, r2
   1e2f4:	add	sp, sp, #12
   1e2f8:	pop	{r4, r5, pc}
   1e2fc:	andeq	sl, r4, r0, lsr r8
   1e300:	ldr	r3, [pc, #188]	; 1e3c4 <__assert_fail@plt+0xc3dc>
   1e304:	push	{r4, r5, r6, lr}
   1e308:	sub	sp, sp, #8
   1e30c:	ldrb	r3, [r3]
   1e310:	str	r0, [sp, #4]
   1e314:	str	r1, [sp]
   1e318:	cmp	r3, #0
   1e31c:	bne	1e3b0 <__assert_fail@plt+0xc3c8>
   1e320:	mvn	r1, #0
   1e324:	add	r0, sp, #4
   1e328:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e32c:	adds	r3, r0, #100	; 0x64
   1e330:	movne	r3, #1
   1e334:	ands	r3, r3, r0, lsr #31
   1e338:	mov	r4, r0
   1e33c:	beq	1e34c <__assert_fail@plt+0xc364>
   1e340:	mov	r0, r4
   1e344:	add	sp, sp, #8
   1e348:	pop	{r4, r5, r6, pc}
   1e34c:	mov	r1, r0
   1e350:	mov	r0, sp
   1e354:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e358:	adds	r3, r0, #100	; 0x64
   1e35c:	movne	r3, #1
   1e360:	ands	r3, r3, r0, lsr #31
   1e364:	mov	r5, r0
   1e368:	movne	r4, r0
   1e36c:	bne	1e340 <__assert_fail@plt+0xc358>
   1e370:	mov	r2, r0
   1e374:	ldr	r3, [sp]
   1e378:	mov	r0, r4
   1e37c:	ldr	r1, [sp, #4]
   1e380:	bl	11f34 <renameat@plt>
   1e384:	subs	r6, r0, #0
   1e388:	movne	r4, r6
   1e38c:	bne	1e340 <__assert_fail@plt+0xc358>
   1e390:	mov	r0, r4
   1e394:	ldr	r1, [sp, #4]
   1e398:	bl	1d704 <__assert_fail@plt+0xb71c>
   1e39c:	mov	r0, r5
   1e3a0:	ldr	r1, [sp]
   1e3a4:	mov	r4, r6
   1e3a8:	bl	1d704 <__assert_fail@plt+0xb71c>
   1e3ac:	b	1e340 <__assert_fail@plt+0xc358>
   1e3b0:	bl	11d30 <rename@plt>
   1e3b4:	mov	r4, r0
   1e3b8:	mov	r0, r4
   1e3bc:	add	sp, sp, #8
   1e3c0:	pop	{r4, r5, r6, pc}
   1e3c4:	andeq	sl, r4, r0, lsr r8
   1e3c8:	ldr	r3, [pc, #116]	; 1e444 <__assert_fail@plt+0xc45c>
   1e3cc:	push	{r4, lr}
   1e3d0:	sub	sp, sp, #8
   1e3d4:	ldrb	r3, [r3]
   1e3d8:	str	r0, [sp, #4]
   1e3dc:	cmp	r3, #0
   1e3e0:	bne	1e430 <__assert_fail@plt+0xc448>
   1e3e4:	mov	r4, r1
   1e3e8:	add	r0, sp, #4
   1e3ec:	mvn	r1, #0
   1e3f0:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e3f4:	adds	r2, r0, #100	; 0x64
   1e3f8:	movne	r2, #1
   1e3fc:	ands	r2, r2, r0, lsr #31
   1e400:	mov	r3, r0
   1e404:	beq	1e414 <__assert_fail@plt+0xc42c>
   1e408:	mov	r0, r3
   1e40c:	add	sp, sp, #8
   1e410:	pop	{r4, pc}
   1e414:	mov	r2, r4
   1e418:	ldr	r1, [sp, #4]
   1e41c:	bl	11d00 <mkdirat@plt>
   1e420:	mov	r3, r0
   1e424:	mov	r0, r3
   1e428:	add	sp, sp, #8
   1e42c:	pop	{r4, pc}
   1e430:	bl	11de4 <mkdir@plt>
   1e434:	mov	r3, r0
   1e438:	mov	r0, r3
   1e43c:	add	sp, sp, #8
   1e440:	pop	{r4, pc}
   1e444:	andeq	sl, r4, r0, lsr r8
   1e448:	ldr	r3, [pc, #136]	; 1e4d8 <__assert_fail@plt+0xc4f0>
   1e44c:	push	{r4, lr}
   1e450:	sub	sp, sp, #8
   1e454:	ldrb	r3, [r3]
   1e458:	str	r0, [sp, #4]
   1e45c:	cmp	r3, #0
   1e460:	bne	1e4c4 <__assert_fail@plt+0xc4dc>
   1e464:	mvn	r1, #0
   1e468:	add	r0, sp, #4
   1e46c:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e470:	adds	r3, r0, #100	; 0x64
   1e474:	movne	r3, #1
   1e478:	ands	r3, r3, r0, lsr #31
   1e47c:	mov	r4, r0
   1e480:	beq	1e490 <__assert_fail@plt+0xc4a8>
   1e484:	mov	r0, r4
   1e488:	add	sp, sp, #8
   1e48c:	pop	{r4, pc}
   1e490:	mov	r2, #512	; 0x200
   1e494:	ldr	r1, [sp, #4]
   1e498:	bl	11a90 <unlinkat@plt>
   1e49c:	subs	r3, r0, #0
   1e4a0:	movne	r4, r3
   1e4a4:	bne	1e484 <__assert_fail@plt+0xc49c>
   1e4a8:	mov	r0, r4
   1e4ac:	ldr	r1, [sp, #4]
   1e4b0:	mov	r4, r3
   1e4b4:	bl	1d704 <__assert_fail@plt+0xb71c>
   1e4b8:	mov	r0, r4
   1e4bc:	add	sp, sp, #8
   1e4c0:	pop	{r4, pc}
   1e4c4:	bl	11b2c <rmdir@plt>
   1e4c8:	mov	r4, r0
   1e4cc:	mov	r0, r4
   1e4d0:	add	sp, sp, #8
   1e4d4:	pop	{r4, pc}
   1e4d8:	andeq	sl, r4, r0, lsr r8
   1e4dc:	ldr	r3, [pc, #108]	; 1e550 <__assert_fail@plt+0xc568>
   1e4e0:	push	{lr}		; (str lr, [sp, #-4]!)
   1e4e4:	sub	sp, sp, #12
   1e4e8:	ldrb	r3, [r3]
   1e4ec:	str	r0, [sp, #4]
   1e4f0:	cmp	r3, #0
   1e4f4:	bne	1e53c <__assert_fail@plt+0xc554>
   1e4f8:	mvn	r1, #0
   1e4fc:	add	r0, sp, #4
   1e500:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e504:	adds	r2, r0, #100	; 0x64
   1e508:	movne	r2, #1
   1e50c:	ands	r2, r2, r0, lsr #31
   1e510:	mov	r3, r0
   1e514:	beq	1e524 <__assert_fail@plt+0xc53c>
   1e518:	mov	r0, r3
   1e51c:	add	sp, sp, #12
   1e520:	pop	{pc}		; (ldr pc, [sp], #4)
   1e524:	ldr	r1, [sp, #4]
   1e528:	bl	11a90 <unlinkat@plt>
   1e52c:	mov	r3, r0
   1e530:	mov	r0, r3
   1e534:	add	sp, sp, #12
   1e538:	pop	{pc}		; (ldr pc, [sp], #4)
   1e53c:	bl	11b5c <unlink@plt>
   1e540:	mov	r3, r0
   1e544:	mov	r0, r3
   1e548:	add	sp, sp, #12
   1e54c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e550:	andeq	sl, r4, r0, lsr r8
   1e554:	ldr	r3, [pc, #96]	; 1e5bc <__assert_fail@plt+0xc5d4>
   1e558:	push	{r4, lr}
   1e55c:	sub	sp, sp, #8
   1e560:	ldrb	r3, [r3]
   1e564:	str	r1, [sp, #4]
   1e568:	cmp	r3, #0
   1e56c:	bne	1e5b0 <__assert_fail@plt+0xc5c8>
   1e570:	mov	r4, r0
   1e574:	mvn	r1, #0
   1e578:	add	r0, sp, #4
   1e57c:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e580:	adds	r3, r0, #100	; 0x64
   1e584:	movne	r3, #1
   1e588:	ands	r3, r3, r0, lsr #31
   1e58c:	beq	1e598 <__assert_fail@plt+0xc5b0>
   1e590:	add	sp, sp, #8
   1e594:	pop	{r4, pc}
   1e598:	mov	r1, r0
   1e59c:	ldr	r2, [sp, #4]
   1e5a0:	mov	r0, r4
   1e5a4:	bl	11f40 <symlinkat@plt>
   1e5a8:	add	sp, sp, #8
   1e5ac:	pop	{r4, pc}
   1e5b0:	bl	11ed4 <symlink@plt>
   1e5b4:	add	sp, sp, #8
   1e5b8:	pop	{r4, pc}
   1e5bc:	andeq	sl, r4, r0, lsr r8
   1e5c0:	ldr	r3, [pc, #116]	; 1e63c <__assert_fail@plt+0xc654>
   1e5c4:	push	{r4, lr}
   1e5c8:	sub	sp, sp, #8
   1e5cc:	ldrb	r3, [r3]
   1e5d0:	str	r0, [sp, #4]
   1e5d4:	cmp	r3, #0
   1e5d8:	bne	1e628 <__assert_fail@plt+0xc640>
   1e5dc:	mov	r4, r1
   1e5e0:	add	r0, sp, #4
   1e5e4:	mvn	r1, #0
   1e5e8:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e5ec:	adds	r3, r0, #100	; 0x64
   1e5f0:	movne	r3, #1
   1e5f4:	ands	r3, r3, r0, lsr #31
   1e5f8:	mov	r1, r0
   1e5fc:	beq	1e60c <__assert_fail@plt+0xc624>
   1e600:	mov	r0, r1
   1e604:	add	sp, sp, #8
   1e608:	pop	{r4, pc}
   1e60c:	ldr	r1, [sp, #4]
   1e610:	mov	r2, r4
   1e614:	bl	11db4 <fchmodat@plt>
   1e618:	mov	r1, r0
   1e61c:	mov	r0, r1
   1e620:	add	sp, sp, #8
   1e624:	pop	{r4, pc}
   1e628:	bl	11f4c <chmod@plt>
   1e62c:	mov	r1, r0
   1e630:	mov	r0, r1
   1e634:	add	sp, sp, #8
   1e638:	pop	{r4, pc}
   1e63c:	andeq	sl, r4, r0, lsr r8
   1e640:	ldr	r3, [pc, #132]	; 1e6cc <__assert_fail@plt+0xc6e4>
   1e644:	push	{r4, r5, lr}
   1e648:	sub	sp, sp, #20
   1e64c:	ldrb	ip, [r3]
   1e650:	str	r0, [sp, #12]
   1e654:	cmp	ip, #0
   1e658:	bne	1e6b8 <__assert_fail@plt+0xc6d0>
   1e65c:	mov	r4, r1
   1e660:	add	r0, sp, #12
   1e664:	mvn	r1, #0
   1e668:	mov	r5, r2
   1e66c:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e670:	adds	r3, r0, #100	; 0x64
   1e674:	movne	r3, #1
   1e678:	ands	r3, r3, r0, lsr #31
   1e67c:	mov	r2, r0
   1e680:	beq	1e690 <__assert_fail@plt+0xc6a8>
   1e684:	mov	r0, r2
   1e688:	add	sp, sp, #20
   1e68c:	pop	{r4, r5, pc}
   1e690:	mov	r1, #256	; 0x100
   1e694:	mov	r2, r4
   1e698:	str	r1, [sp]
   1e69c:	mov	r3, r5
   1e6a0:	ldr	r1, [sp, #12]
   1e6a4:	bl	11f28 <fchownat@plt>
   1e6a8:	mov	r2, r0
   1e6ac:	mov	r0, r2
   1e6b0:	add	sp, sp, #20
   1e6b4:	pop	{r4, r5, pc}
   1e6b8:	bl	11ebc <lchown@plt>
   1e6bc:	mov	r2, r0
   1e6c0:	mov	r0, r2
   1e6c4:	add	sp, sp, #20
   1e6c8:	pop	{r4, r5, pc}
   1e6cc:	andeq	sl, r4, r0, lsr r8
   1e6d0:	ldr	r3, [pc, #136]	; 1e760 <__assert_fail@plt+0xc778>
   1e6d4:	push	{r4, lr}
   1e6d8:	sub	sp, sp, #8
   1e6dc:	ldrb	r3, [r3]
   1e6e0:	str	r0, [sp, #4]
   1e6e4:	mov	r4, r1
   1e6e8:	cmp	r3, #0
   1e6ec:	bne	1e73c <__assert_fail@plt+0xc754>
   1e6f0:	mvn	r1, #0
   1e6f4:	add	r0, sp, #4
   1e6f8:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e6fc:	adds	r2, r0, #100	; 0x64
   1e700:	movne	r2, #1
   1e704:	ands	r2, r2, r0, lsr #31
   1e708:	mov	r3, r0
   1e70c:	beq	1e71c <__assert_fail@plt+0xc734>
   1e710:	mov	r0, r3
   1e714:	add	sp, sp, #8
   1e718:	pop	{r4, pc}
   1e71c:	mov	r2, r4
   1e720:	mov	r3, #256	; 0x100
   1e724:	ldr	r1, [sp, #4]
   1e728:	bl	11a30 <utimensat@plt>
   1e72c:	mov	r3, r0
   1e730:	mov	r0, r3
   1e734:	add	sp, sp, #8
   1e738:	pop	{r4, pc}
   1e73c:	mov	r1, r0
   1e740:	mov	r2, r4
   1e744:	mov	r3, #256	; 0x100
   1e748:	mvn	r0, #99	; 0x63
   1e74c:	bl	11a30 <utimensat@plt>
   1e750:	mov	r3, r0
   1e754:	mov	r0, r3
   1e758:	add	sp, sp, #8
   1e75c:	pop	{r4, pc}
   1e760:	andeq	sl, r4, r0, lsr r8
   1e764:	ldr	r3, [pc, #112]	; 1e7dc <__assert_fail@plt+0xc7f4>
   1e768:	push	{r4, r5, lr}
   1e76c:	sub	sp, sp, #12
   1e770:	ldrb	ip, [r3]
   1e774:	str	r0, [sp, #4]
   1e778:	cmp	ip, #0
   1e77c:	beq	1e794 <__assert_fail@plt+0xc7ac>
   1e780:	bl	11bf8 <readlink@plt>
   1e784:	mov	r2, r0
   1e788:	mov	r0, r2
   1e78c:	add	sp, sp, #12
   1e790:	pop	{r4, r5, pc}
   1e794:	mov	r4, r1
   1e798:	add	r0, sp, #4
   1e79c:	mvn	r1, #0
   1e7a0:	mov	r5, r2
   1e7a4:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e7a8:	adds	r3, r0, #100	; 0x64
   1e7ac:	movne	r3, #1
   1e7b0:	ands	r3, r3, r0, lsr #31
   1e7b4:	mov	r2, r0
   1e7b8:	bne	1e788 <__assert_fail@plt+0xc7a0>
   1e7bc:	mov	r2, r4
   1e7c0:	mov	r3, r5
   1e7c4:	ldr	r1, [sp, #4]
   1e7c8:	bl	11cd0 <readlinkat@plt>
   1e7cc:	mov	r2, r0
   1e7d0:	mov	r0, r2
   1e7d4:	add	sp, sp, #12
   1e7d8:	pop	{r4, r5, pc}
   1e7dc:	andeq	sl, r4, r0, lsr r8
   1e7e0:	ldr	r3, [pc, #116]	; 1e85c <__assert_fail@plt+0xc874>
   1e7e4:	push	{r4, lr}
   1e7e8:	sub	sp, sp, #8
   1e7ec:	ldrb	r3, [r3]
   1e7f0:	str	r0, [sp, #4]
   1e7f4:	cmp	r3, #0
   1e7f8:	bne	1e848 <__assert_fail@plt+0xc860>
   1e7fc:	mov	r4, r1
   1e800:	add	r0, sp, #4
   1e804:	mvn	r1, #0
   1e808:	bl	1dd18 <__assert_fail@plt+0xbd30>
   1e80c:	adds	r3, r0, #100	; 0x64
   1e810:	movne	r3, #1
   1e814:	ands	r3, r3, r0, lsr #31
   1e818:	mov	r1, r0
   1e81c:	beq	1e82c <__assert_fail@plt+0xc844>
   1e820:	mov	r0, r1
   1e824:	add	sp, sp, #8
   1e828:	pop	{r4, pc}
   1e82c:	ldr	r1, [sp, #4]
   1e830:	mov	r2, r4
   1e834:	bl	11ac0 <faccessat@plt>
   1e838:	mov	r1, r0
   1e83c:	mov	r0, r1
   1e840:	add	sp, sp, #8
   1e844:	pop	{r4, pc}
   1e848:	bl	11e50 <access@plt>
   1e84c:	mov	r1, r0
   1e850:	mov	r0, r1
   1e854:	add	sp, sp, #8
   1e858:	pop	{r4, pc}
   1e85c:	andeq	sl, r4, r0, lsr r8
   1e860:	ldr	r2, [r0, #8]
   1e864:	ldr	r0, [r0]
   1e868:	push	{r4, lr}
   1e86c:	add	r0, r2, r0
   1e870:	bl	31a48 <renameat2@@Base+0x2d34>
   1e874:	mov	r0, r1
   1e878:	pop	{r4, pc}
   1e87c:	ldrd	r2, [r1, #8]
   1e880:	push	{r4, r5}
   1e884:	ldrd	r4, [r0, #8]
   1e888:	cmp	r5, r3
   1e88c:	cmpeq	r4, r2
   1e890:	movne	r0, #0
   1e894:	bne	1e8b0 <__assert_fail@plt+0xc8c8>
   1e898:	ldrd	r4, [r0]
   1e89c:	ldrd	r2, [r1]
   1e8a0:	cmp	r5, r3
   1e8a4:	cmpeq	r4, r2
   1e8a8:	moveq	r0, #1
   1e8ac:	movne	r0, #0
   1e8b0:	pop	{r4, r5}
   1e8b4:	bx	lr
   1e8b8:	push	{r4, r5, r6, lr}
   1e8bc:	sub	sp, sp, #32
   1e8c0:	ldr	r6, [pc, #64]	; 1e908 <__assert_fail@plt+0xc920>
   1e8c4:	ldr	r1, [pc, #64]	; 1e90c <__assert_fail@plt+0xc924>
   1e8c8:	ldrd	r2, [r0, #96]	; 0x60
   1e8cc:	ldrd	r4, [r0]
   1e8d0:	ldr	ip, [r6]
   1e8d4:	ldr	r0, [r1]
   1e8d8:	mov	r1, sp
   1e8dc:	strd	r2, [sp, #8]
   1e8e0:	strd	r4, [sp]
   1e8e4:	str	ip, [sp, #28]
   1e8e8:	bl	25af0 <__assert_fail@plt+0x13b08>
   1e8ec:	ldr	r2, [sp, #28]
   1e8f0:	ldr	r3, [r6]
   1e8f4:	cmp	r2, r3
   1e8f8:	bne	1e904 <__assert_fail@plt+0xc91c>
   1e8fc:	add	sp, sp, #32
   1e900:	pop	{r4, r5, r6, pc}
   1e904:	bl	11b50 <__stack_chk_fail@plt>
   1e908:	andeq	r7, r4, r8, lsl #30
   1e90c:	andeq	sl, r4, r0, asr r4
   1e910:	push	{r4, r5, r6, r7, r8, lr}
   1e914:	bl	2f518 <renameat2@@Base+0x804>
   1e918:	ldrb	r3, [r0]
   1e91c:	mov	r6, r0
   1e920:	mov	r2, r0
   1e924:	cmp	r3, #47	; 0x2f
   1e928:	bne	1e938 <__assert_fail@plt+0xc950>
   1e92c:	ldrb	r3, [r2, #1]!
   1e930:	cmp	r3, #47	; 0x2f
   1e934:	beq	1e92c <__assert_fail@plt+0xc944>
   1e938:	cmp	r3, #0
   1e93c:	movne	r5, #0
   1e940:	movne	lr, r5
   1e944:	movne	ip, r2
   1e948:	bne	1e958 <__assert_fail@plt+0xc970>
   1e94c:	b	1ea0c <__assert_fail@plt+0xca24>
   1e950:	cmp	r3, #0
   1e954:	beq	1e9c0 <__assert_fail@plt+0xc9d8>
   1e958:	cmp	r3, #47	; 0x2f
   1e95c:	ldrb	r3, [r2, #1]
   1e960:	addne	r2, r2, #1
   1e964:	bne	1e950 <__assert_fail@plt+0xc968>
   1e968:	cmp	r3, #47	; 0x2f
   1e96c:	bne	1ea28 <__assert_fail@plt+0xca40>
   1e970:	add	r1, r2, #1
   1e974:	mov	r0, r1
   1e978:	ldrb	r3, [r1, #1]!
   1e97c:	cmp	r3, #47	; 0x2f
   1e980:	beq	1e974 <__assert_fail@plt+0xc98c>
   1e984:	cmp	r3, #0
   1e988:	beq	1e9c0 <__assert_fail@plt+0xc9d8>
   1e98c:	sub	r3, r2, ip
   1e990:	cmp	r3, #2
   1e994:	bgt	1e9a4 <__assert_fail@plt+0xc9bc>
   1e998:	ldrb	r3, [ip]
   1e99c:	cmp	r3, #46	; 0x2e
   1e9a0:	beq	1ea18 <__assert_fail@plt+0xca30>
   1e9a4:	mov	r5, r2
   1e9a8:	strb	lr, [r2]
   1e9ac:	ldrb	r3, [r0, #1]
   1e9b0:	add	r2, r0, #1
   1e9b4:	mov	ip, r2
   1e9b8:	cmp	r3, #0
   1e9bc:	bne	1e958 <__assert_fail@plt+0xc970>
   1e9c0:	cmp	r5, #0
   1e9c4:	beq	1ea0c <__assert_fail@plt+0xca24>
   1e9c8:	cmp	r6, r5
   1e9cc:	bhi	1ea0c <__assert_fail@plt+0xca24>
   1e9d0:	ldr	r8, [pc, #88]	; 1ea30 <__assert_fail@plt+0xca48>
   1e9d4:	sub	r4, r6, #1
   1e9d8:	mov	r7, #47	; 0x2f
   1e9dc:	b	1e9e8 <__assert_fail@plt+0xca00>
   1e9e0:	cmp	r5, r4
   1e9e4:	beq	1ea0c <__assert_fail@plt+0xca24>
   1e9e8:	ldrb	r3, [r4, #1]!
   1e9ec:	cmp	r3, #0
   1e9f0:	bne	1e9e0 <__assert_fail@plt+0xc9f8>
   1e9f4:	mov	r1, r8
   1e9f8:	mov	r0, r6
   1e9fc:	bl	1e3c8 <__assert_fail@plt+0xc3e0>
   1ea00:	cmp	r5, r4
   1ea04:	strb	r7, [r4]
   1ea08:	bne	1e9e8 <__assert_fail@plt+0xca00>
   1ea0c:	mov	r0, r6
   1ea10:	pop	{r4, r5, r6, r7, r8, lr}
   1ea14:	b	11ab4 <free@plt>
   1ea18:	ldrb	r3, [r2, #-1]
   1ea1c:	cmp	r3, #46	; 0x2e
   1ea20:	bne	1e9a4 <__assert_fail@plt+0xc9bc>
   1ea24:	b	1e9ac <__assert_fail@plt+0xc9c4>
   1ea28:	mov	r0, r2
   1ea2c:	b	1e984 <__assert_fail@plt+0xc99c>
   1ea30:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1ea34:	push	{r4, r5, r6, r7, r8, lr}
   1ea38:	mov	r5, r0
   1ea3c:	mov	r4, r1
   1ea40:	mov	r6, #2
   1ea44:	b	1ea64 <__assert_fail@plt+0xca7c>
   1ea48:	bl	11dc0 <__errno_location@plt>
   1ea4c:	ldr	r3, [r0]
   1ea50:	mov	r0, r5
   1ea54:	cmp	r3, r6
   1ea58:	bne	1ea7c <__assert_fail@plt+0xca94>
   1ea5c:	bl	1e910 <__assert_fail@plt+0xc928>
   1ea60:	mov	r6, #0
   1ea64:	ldm	r4, {r1, r2}
   1ea68:	mov	r0, r5
   1ea6c:	orr	r1, r1, #192	; 0xc0
   1ea70:	bl	1e284 <__assert_fail@plt+0xc29c>
   1ea74:	subs	r7, r0, #0
   1ea78:	blt	1ea48 <__assert_fail@plt+0xca60>
   1ea7c:	mov	r0, r7
   1ea80:	pop	{r4, r5, r6, r7, r8, pc}
   1ea84:	push	{r4, r5, r6, lr}
   1ea88:	mov	r5, r0
   1ea8c:	mov	r0, #1
   1ea90:	bl	2ea54 <__assert_fail@plt+0x1ca6c>
   1ea94:	mov	r6, r0
   1ea98:	bl	11d78 <strlen@plt>
   1ea9c:	cmp	r5, #0
   1eaa0:	mov	r4, r0
   1eaa4:	beq	1eab8 <__assert_fail@plt+0xcad0>
   1eaa8:	mov	r1, r6
   1eaac:	mov	r0, r5
   1eab0:	add	r2, r4, #1
   1eab4:	bl	11afc <memcpy@plt>
   1eab8:	mov	r0, r4
   1eabc:	pop	{r4, r5, r6, pc}
   1eac0:	push	{r4, lr}
   1eac4:	mov	r3, r1
   1eac8:	ldr	r4, [pc, #24]	; 1eae8 <__assert_fail@plt+0xcb00>
   1eacc:	mov	r2, r0
   1ead0:	mov	r1, #1
   1ead4:	ldr	r0, [r4]
   1ead8:	bl	11cf4 <__vfprintf_chk@plt>
   1eadc:	ldr	r0, [r4]
   1eae0:	pop	{r4, lr}
   1eae4:	b	11a84 <fflush@plt>
   1eae8:	andeq	r8, r4, r4, lsl #6
   1eaec:	push	{r4, r5, r6, r7, r8, lr}
   1eaf0:	ldrb	r3, [r0]
   1eaf4:	cmp	r3, #34	; 0x22
   1eaf8:	bne	1ed80 <__assert_fail@plt+0xcd98>
   1eafc:	add	r4, r0, #1
   1eb00:	mov	r0, r4
   1eb04:	mov	r6, r1
   1eb08:	bl	11d78 <strlen@plt>
   1eb0c:	bl	2f2ec <renameat2@@Base+0x5d8>
   1eb10:	mov	r5, r4
   1eb14:	ldrb	r3, [r5], #1
   1eb18:	cmp	r3, #34	; 0x22
   1eb1c:	mov	r7, r0
   1eb20:	mov	r1, r0
   1eb24:	beq	1eb54 <__assert_fail@plt+0xcb6c>
   1eb28:	cmp	r3, #92	; 0x5c
   1eb2c:	beq	1eb98 <__assert_fail@plt+0xcbb0>
   1eb30:	cmp	r3, #0
   1eb34:	beq	1eb80 <__assert_fail@plt+0xcb98>
   1eb38:	mov	r4, r5
   1eb3c:	mov	r5, r4
   1eb40:	strb	r3, [r1]
   1eb44:	ldrb	r3, [r5], #1
   1eb48:	add	r1, r1, #1
   1eb4c:	cmp	r3, #34	; 0x22
   1eb50:	bne	1eb28 <__assert_fail@plt+0xcb40>
   1eb54:	mov	r3, #0
   1eb58:	strb	r3, [r1], #1
   1eb5c:	mov	r0, r7
   1eb60:	sub	r1, r1, r7
   1eb64:	bl	11b80 <realloc@plt>
   1eb68:	cmp	r0, #0
   1eb6c:	moveq	r0, r7
   1eb70:	cmp	r6, #0
   1eb74:	strne	r5, [r6]
   1eb78:	pop	{r4, r5, r6, r7, r8, pc}
   1eb7c:	add	r5, r4, #3
   1eb80:	mov	r0, r7
   1eb84:	bl	11ab4 <free@plt>
   1eb88:	cmp	r6, #0
   1eb8c:	strne	r5, [r6]
   1eb90:	mov	r0, #0
   1eb94:	pop	{r4, r5, r6, r7, r8, pc}
   1eb98:	ldrb	r3, [r4, #1]
   1eb9c:	add	r5, r4, #2
   1eba0:	sub	r2, r3, #34	; 0x22
   1eba4:	cmp	r2, #84	; 0x54
   1eba8:	ldrls	pc, [pc, r2, lsl #2]
   1ebac:	b	1eb80 <__assert_fail@plt+0xcb98>
   1ebb0:	andeq	lr, r1, r8, lsr fp
   1ebb4:	andeq	lr, r1, r0, lsl #23
   1ebb8:	andeq	lr, r1, r0, lsl #23
   1ebbc:	andeq	lr, r1, r0, lsl #23
   1ebc0:	andeq	lr, r1, r0, lsl #23
   1ebc4:	andeq	lr, r1, r0, lsl #23
   1ebc8:	andeq	lr, r1, r0, lsl #23
   1ebcc:	andeq	lr, r1, r0, lsl #23
   1ebd0:	andeq	lr, r1, r0, lsl #23
   1ebd4:	andeq	lr, r1, r0, lsl #23
   1ebd8:	andeq	lr, r1, r0, lsl #23
   1ebdc:	andeq	lr, r1, r0, lsl #23
   1ebe0:	andeq	lr, r1, r0, lsl #23
   1ebe4:	andeq	lr, r1, r0, lsl #23
   1ebe8:	andeq	lr, r1, ip, lsl #26
   1ebec:	andeq	lr, r1, ip, lsl #26
   1ebf0:	andeq	lr, r1, ip, lsl #26
   1ebf4:	andeq	lr, r1, ip, lsl #26
   1ebf8:	andeq	lr, r1, r0, lsl #23
   1ebfc:	andeq	lr, r1, r0, lsl #23
   1ec00:	andeq	lr, r1, r0, lsl #23
   1ec04:	andeq	lr, r1, r0, lsl #23
   1ec08:	andeq	lr, r1, r0, lsl #23
   1ec0c:	andeq	lr, r1, r0, lsl #23
   1ec10:	andeq	lr, r1, r0, lsl #23
   1ec14:	andeq	lr, r1, r0, lsl #23
   1ec18:	andeq	lr, r1, r0, lsl #23
   1ec1c:	andeq	lr, r1, r0, lsl #23
   1ec20:	andeq	lr, r1, r0, lsl #23
   1ec24:	andeq	lr, r1, r0, lsl #23
   1ec28:	andeq	lr, r1, r0, lsl #23
   1ec2c:	andeq	lr, r1, r0, lsl #23
   1ec30:	andeq	lr, r1, r0, lsl #23
   1ec34:	andeq	lr, r1, r0, lsl #23
   1ec38:	andeq	lr, r1, r0, lsl #23
   1ec3c:	andeq	lr, r1, r0, lsl #23
   1ec40:	andeq	lr, r1, r0, lsl #23
   1ec44:	andeq	lr, r1, r0, lsl #23
   1ec48:	andeq	lr, r1, r0, lsl #23
   1ec4c:	andeq	lr, r1, r0, lsl #23
   1ec50:	andeq	lr, r1, r0, lsl #23
   1ec54:	andeq	lr, r1, r0, lsl #23
   1ec58:	andeq	lr, r1, r0, lsl #23
   1ec5c:	andeq	lr, r1, r0, lsl #23
   1ec60:	andeq	lr, r1, r0, lsl #23
   1ec64:	andeq	lr, r1, r0, lsl #23
   1ec68:	andeq	lr, r1, r0, lsl #23
   1ec6c:	andeq	lr, r1, r0, lsl #23
   1ec70:	andeq	lr, r1, r0, lsl #23
   1ec74:	andeq	lr, r1, r0, lsl #23
   1ec78:	andeq	lr, r1, r0, lsl #23
   1ec7c:	andeq	lr, r1, r0, lsl #23
   1ec80:	andeq	lr, r1, r0, lsl #23
   1ec84:	andeq	lr, r1, r0, lsl #23
   1ec88:	andeq	lr, r1, r0, lsl #23
   1ec8c:	andeq	lr, r1, r0, lsl #23
   1ec90:	andeq	lr, r1, r0, lsl #23
   1ec94:	andeq	lr, r1, r0, lsl #23
   1ec98:	andeq	lr, r1, r8, lsr fp
   1ec9c:	andeq	lr, r1, r0, lsl #23
   1eca0:	andeq	lr, r1, r0, lsl #23
   1eca4:	andeq	lr, r1, r0, lsl #23
   1eca8:	andeq	lr, r1, r0, lsl #23
   1ecac:	andeq	lr, r1, r0, asr sp
   1ecb0:	andeq	lr, r1, r8, asr sp
   1ecb4:	andeq	lr, r1, r0, lsl #23
   1ecb8:	andeq	lr, r1, r0, lsl #23
   1ecbc:	andeq	lr, r1, r0, lsl #23
   1ecc0:	andeq	lr, r1, r0, ror #26
   1ecc4:	andeq	lr, r1, r0, lsl #23
   1ecc8:	andeq	lr, r1, r0, lsl #23
   1eccc:	andeq	lr, r1, r0, lsl #23
   1ecd0:	andeq	lr, r1, r0, lsl #23
   1ecd4:	andeq	lr, r1, r0, lsl #23
   1ecd8:	andeq	lr, r1, r0, lsl #23
   1ecdc:	andeq	lr, r1, r0, lsl #23
   1ece0:	andeq	lr, r1, r8, ror #26
   1ece4:	andeq	lr, r1, r0, lsl #23
   1ece8:	andeq	lr, r1, r0, lsl #23
   1ecec:	andeq	lr, r1, r0, lsl #23
   1ecf0:	andeq	lr, r1, r0, ror sp
   1ecf4:	andeq	lr, r1, r0, lsl #23
   1ecf8:	andeq	lr, r1, r8, ror sp
   1ecfc:	andeq	lr, r1, r0, lsl #23
   1ed00:	andeq	lr, r1, r4, lsl #26
   1ed04:	mov	r3, #11
   1ed08:	b	1eb38 <__assert_fail@plt+0xcb50>
   1ed0c:	ldrb	r0, [r4, #2]
   1ed10:	sub	r3, r3, #48	; 0x30
   1ed14:	sub	r0, r0, #48	; 0x30
   1ed18:	lsl	r3, r3, #6
   1ed1c:	uxtb	r2, r0
   1ed20:	cmp	r2, #7
   1ed24:	bhi	1eb7c <__assert_fail@plt+0xcb94>
   1ed28:	ldrb	r2, [r4, #3]
   1ed2c:	orr	r3, r3, r0, lsl #3
   1ed30:	add	r5, r4, #4
   1ed34:	sub	r2, r2, #48	; 0x30
   1ed38:	uxtb	r0, r2
   1ed3c:	cmp	r0, #7
   1ed40:	bhi	1eb80 <__assert_fail@plt+0xcb98>
   1ed44:	orr	r3, r2, r3
   1ed48:	uxtb	r3, r3
   1ed4c:	b	1eb38 <__assert_fail@plt+0xcb50>
   1ed50:	mov	r3, #7
   1ed54:	b	1eb38 <__assert_fail@plt+0xcb50>
   1ed58:	mov	r3, #8
   1ed5c:	b	1eb38 <__assert_fail@plt+0xcb50>
   1ed60:	mov	r3, #12
   1ed64:	b	1eb38 <__assert_fail@plt+0xcb50>
   1ed68:	mov	r3, #10
   1ed6c:	b	1eb38 <__assert_fail@plt+0xcb50>
   1ed70:	mov	r3, #13
   1ed74:	b	1eb38 <__assert_fail@plt+0xcb50>
   1ed78:	mov	r3, #9
   1ed7c:	b	1eb38 <__assert_fail@plt+0xcb50>
   1ed80:	ldr	r3, [pc, #12]	; 1ed94 <__assert_fail@plt+0xcdac>
   1ed84:	ldr	r2, [pc, #12]	; 1ed98 <__assert_fail@plt+0xcdb0>
   1ed88:	ldr	r1, [pc, #12]	; 1ed9c <__assert_fail@plt+0xcdb4>
   1ed8c:	ldr	r0, [pc, #12]	; 1eda0 <__assert_fail@plt+0xcdb8>
   1ed90:	bl	11fe8 <__assert_fail@plt>
   1ed94:	andeq	r4, r3, r0, ror #17
   1ed98:	andeq	r0, r0, pc, asr #10
   1ed9c:	andeq	r4, r3, r8, asr r9
   1eda0:	andeq	r4, r3, r0, ror #18
   1eda4:	push	{r4, r5, r6, lr}
   1eda8:	ldrb	r3, [r0]
   1edac:	cmp	r3, #0
   1edb0:	beq	1ee00 <__assert_fail@plt+0xce18>
   1edb4:	mov	r5, r0
   1edb8:	mov	r2, r0
   1edbc:	mov	lr, r1
   1edc0:	b	1edcc <__assert_fail@plt+0xcde4>
   1edc4:	cmp	r3, #0
   1edc8:	beq	1ede0 <__assert_fail@plt+0xcdf8>
   1edcc:	cmp	r3, #47	; 0x2f
   1edd0:	ldrb	r3, [r2, #1]!
   1edd4:	beq	1ee10 <__assert_fail@plt+0xce28>
   1edd8:	cmp	r3, #0
   1eddc:	bne	1edcc <__assert_fail@plt+0xcde4>
   1ede0:	cmp	lr, #0
   1ede4:	movgt	lr, #0
   1ede8:	movle	lr, #1
   1edec:	orrs	r4, lr, r1, lsr #31
   1edf0:	beq	1ee04 <__assert_fail@plt+0xce1c>
   1edf4:	ldrb	r2, [r5]
   1edf8:	cmp	r2, #0
   1edfc:	bne	1ee30 <__assert_fail@plt+0xce48>
   1ee00:	mov	r4, r3
   1ee04:	mov	r0, r4
   1ee08:	pop	{r4, r5, r6, pc}
   1ee0c:	ldrb	r3, [r2, #1]!
   1ee10:	cmp	r3, #47	; 0x2f
   1ee14:	beq	1ee0c <__assert_fail@plt+0xce24>
   1ee18:	cmp	r1, #0
   1ee1c:	blt	1ee28 <__assert_fail@plt+0xce40>
   1ee20:	subs	lr, lr, #1
   1ee24:	bmi	1edc4 <__assert_fail@plt+0xcddc>
   1ee28:	mov	r5, r2
   1ee2c:	b	1edc4 <__assert_fail@plt+0xcddc>
   1ee30:	mov	r6, r0
   1ee34:	mov	r0, r5
   1ee38:	bl	11d78 <strlen@plt>
   1ee3c:	mov	r1, r5
   1ee40:	add	r2, r0, #1
   1ee44:	mov	r0, r6
   1ee48:	bl	11aa8 <memmove@plt>
   1ee4c:	mov	r0, r4
   1ee50:	pop	{r4, r5, r6, pc}
   1ee54:	push	{r4, lr}
   1ee58:	bl	1e8b8 <__assert_fail@plt+0xc8d0>
   1ee5c:	cmp	r0, #0
   1ee60:	ldrne	r0, [r0, #16]
   1ee64:	pop	{r4, pc}
   1ee68:	push	{r4, lr}
   1ee6c:	bl	1e8b8 <__assert_fail@plt+0xc8d0>
   1ee70:	cmp	r0, #0
   1ee74:	ldrbne	r0, [r0, #20]
   1ee78:	pop	{r4, pc}
   1ee7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee80:	sub	sp, sp, #148	; 0x94
   1ee84:	ldr	sl, [pc, #1408]	; 1f40c <__assert_fail@plt+0xd424>
   1ee88:	str	r1, [sp, #24]
   1ee8c:	mov	r8, r0
   1ee90:	ldr	r1, [sl]
   1ee94:	mov	r7, r2
   1ee98:	str	r3, [sp, #12]
   1ee9c:	str	r1, [sp, #140]	; 0x8c
   1eea0:	ldr	fp, [sp, #184]	; 0xb8
   1eea4:	bl	251d0 <__assert_fail@plt+0x131e8>
   1eea8:	mov	r6, r0
   1eeac:	mov	r0, r8
   1eeb0:	bl	251e4 <__assert_fail@plt+0x131fc>
   1eeb4:	ldrb	r1, [r8]
   1eeb8:	ldr	r3, [pc, #1360]	; 1f410 <__assert_fail@plt+0xd428>
   1eebc:	ldr	r2, [pc, #1360]	; 1f414 <__assert_fail@plt+0xd42c>
   1eec0:	cmp	r1, #45	; 0x2d
   1eec4:	movne	r2, r3
   1eec8:	str	r2, [sp, #20]
   1eecc:	mov	r4, r0
   1eed0:	mov	r0, r6
   1eed4:	bl	11d78 <strlen@plt>
   1eed8:	add	r9, r0, #1
   1eedc:	mov	r0, r4
   1eee0:	bl	11d78 <strlen@plt>
   1eee4:	mov	r1, r6
   1eee8:	add	r5, r0, #8
   1eeec:	mov	r0, #1
   1eef0:	bl	2ea54 <__assert_fail@plt+0x1ca6c>
   1eef4:	bl	11d78 <strlen@plt>
   1eef8:	mov	r1, r4
   1eefc:	add	r5, r5, r9
   1ef00:	str	r0, [sp, #16]
   1ef04:	mov	r0, #1
   1ef08:	bl	2ea54 <__assert_fail@plt+0x1ca6c>
   1ef0c:	bl	11d78 <strlen@plt>
   1ef10:	ldr	r3, [sp, #16]
   1ef14:	add	r3, r0, r3
   1ef18:	mov	r0, r5
   1ef1c:	lsl	r2, r3, #1
   1ef20:	add	r2, r2, #35	; 0x23
   1ef24:	add	r3, r3, #30
   1ef28:	str	r2, [sp, #28]
   1ef2c:	str	r3, [sp, #16]
   1ef30:	bl	2f2ec <renameat2@@Base+0x5d8>
   1ef34:	ldr	r3, [pc, #1244]	; 1f418 <__assert_fail@plt+0xd430>
   1ef38:	mvn	r2, #0
   1ef3c:	mov	r1, #1
   1ef40:	str	r6, [sp]
   1ef44:	mov	r5, r0
   1ef48:	add	r9, r0, r9
   1ef4c:	bl	11dcc <__sprintf_chk@plt>
   1ef50:	ldr	r3, [pc, #1220]	; 1f41c <__assert_fail@plt+0xd434>
   1ef54:	mvn	r2, #0
   1ef58:	str	r3, [sp, #4]
   1ef5c:	mov	r1, #1
   1ef60:	ldr	r3, [pc, #1208]	; 1f420 <__assert_fail@plt+0xd438>
   1ef64:	str	r4, [sp]
   1ef68:	mov	r0, r9
   1ef6c:	bl	11dcc <__sprintf_chk@plt>
   1ef70:	mov	r0, r5
   1ef74:	add	r1, sp, #32
   1ef78:	bl	1e274 <__assert_fail@plt+0xc28c>
   1ef7c:	cmp	r0, #0
   1ef80:	bne	1f0d8 <__assert_fail@plt+0xd0f0>
   1ef84:	cmp	r7, #0
   1ef88:	beq	1efa0 <__assert_fail@plt+0xcfb8>
   1ef8c:	ldrd	r0, [r7]
   1ef90:	ldrd	r2, [sp, #32]
   1ef94:	cmp	r1, r3
   1ef98:	cmpeq	r0, r2
   1ef9c:	beq	1f0b4 <__assert_fail@plt+0xd0cc>
   1efa0:	ldr	r9, [sp, #12]
   1efa4:	cmp	r9, #0
   1efa8:	beq	1f004 <__assert_fail@plt+0xd01c>
   1efac:	ldr	r0, [sp, #16]
   1efb0:	bl	2f2ec <renameat2@@Base+0x5d8>
   1efb4:	ldr	r3, [pc, #1128]	; 1f424 <__assert_fail@plt+0xd43c>
   1efb8:	ldr	r2, [sp, #20]
   1efbc:	ldr	r1, [sp, #24]
   1efc0:	str	r2, [sp]
   1efc4:	cmp	r1, #0
   1efc8:	add	r2, r3, #8
   1efcc:	moveq	r3, r2
   1efd0:	mov	r1, #1
   1efd4:	mvn	r2, #0
   1efd8:	mov	r7, r0
   1efdc:	str	r0, [r9]
   1efe0:	bl	11dcc <__sprintf_chk@plt>
   1efe4:	mov	r0, r7
   1efe8:	bl	11d78 <strlen@plt>
   1efec:	mov	r1, r8
   1eff0:	add	r7, r7, r0
   1eff4:	mov	r0, r7
   1eff8:	bl	1ea84 <__assert_fail@plt+0xca9c>
   1effc:	mov	r3, #0
   1f000:	strb	r3, [r7, r0]
   1f004:	cmp	fp, #0
   1f008:	beq	1f0ac <__assert_fail@plt+0xd0c4>
   1f00c:	ldr	r0, [sp, #28]
   1f010:	bl	2f2ec <renameat2@@Base+0x5d8>
   1f014:	ldr	r3, [sp, #20]
   1f018:	mov	r1, #1
   1f01c:	str	r3, [sp]
   1f020:	mvn	r2, #0
   1f024:	ldr	r3, [pc, #1020]	; 1f428 <__assert_fail@plt+0xd440>
   1f028:	ldr	r9, [pc, #1020]	; 1f42c <__assert_fail@plt+0xd444>
   1f02c:	mov	r7, r0
   1f030:	str	r0, [fp]
   1f034:	bl	11dcc <__sprintf_chk@plt>
   1f038:	mov	r0, r7
   1f03c:	bl	11d78 <strlen@plt>
   1f040:	mov	r1, r8
   1f044:	add	r7, r7, r0
   1f048:	mov	r0, r7
   1f04c:	bl	1ea84 <__assert_fail@plt+0xca9c>
   1f050:	ldr	r3, [pc, #984]	; 1f430 <__assert_fail@plt+0xd448>
   1f054:	mov	r8, #62	; 0x3e
   1f058:	add	ip, r7, r0
   1f05c:	mov	lr, r0
   1f060:	ldm	r3!, {r0, r1}
   1f064:	strb	r8, [r7, lr]
   1f068:	ldrh	r3, [r3]
   1f06c:	str	r0, [ip, #1]
   1f070:	str	r1, [ip, #5]
   1f074:	strh	r3, [ip, #9]
   1f078:	mov	r0, r5
   1f07c:	bl	11ab4 <free@plt>
   1f080:	mov	r0, r4
   1f084:	bl	11ab4 <free@plt>
   1f088:	mov	r0, r6
   1f08c:	bl	11ab4 <free@plt>
   1f090:	ldr	r2, [sp, #140]	; 0x8c
   1f094:	ldr	r3, [sl]
   1f098:	mov	r0, r9
   1f09c:	cmp	r2, r3
   1f0a0:	bne	1f400 <__assert_fail@plt+0xd418>
   1f0a4:	add	sp, sp, #148	; 0x94
   1f0a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0ac:	ldr	r9, [pc, #888]	; 1f42c <__assert_fail@plt+0xd444>
   1f0b0:	b	1f078 <__assert_fail@plt+0xd090>
   1f0b4:	ldrd	r0, [r7, #96]	; 0x60
   1f0b8:	ldrd	r2, [sp, #128]	; 0x80
   1f0bc:	cmp	r1, r3
   1f0c0:	cmpeq	r0, r2
   1f0c4:	beq	1f138 <__assert_fail@plt+0xd150>
   1f0c8:	ldr	r9, [sp, #12]
   1f0cc:	cmp	r9, #0
   1f0d0:	bne	1efac <__assert_fail@plt+0xcfc4>
   1f0d4:	b	1f004 <__assert_fail@plt+0xd01c>
   1f0d8:	ldr	r3, [pc, #852]	; 1f434 <__assert_fail@plt+0xd44c>
   1f0dc:	mvn	r2, #0
   1f0e0:	mov	r1, #1
   1f0e4:	str	r4, [sp]
   1f0e8:	mov	r0, r9
   1f0ec:	bl	11dcc <__sprintf_chk@plt>
   1f0f0:	add	r1, sp, #32
   1f0f4:	mov	r0, r5
   1f0f8:	bl	1e274 <__assert_fail@plt+0xc28c>
   1f0fc:	cmp	r0, #0
   1f100:	beq	1ef84 <__assert_fail@plt+0xcf9c>
   1f104:	ldr	r3, [pc, #784]	; 1f41c <__assert_fail@plt+0xd434>
   1f108:	mvn	r2, #0
   1f10c:	str	r3, [sp, #4]
   1f110:	mov	r1, #1
   1f114:	ldr	r3, [pc, #796]	; 1f438 <__assert_fail@plt+0xd450>
   1f118:	str	r4, [sp]
   1f11c:	mov	r0, r9
   1f120:	bl	11dcc <__sprintf_chk@plt>
   1f124:	add	r1, sp, #32
   1f128:	mov	r0, r5
   1f12c:	bl	1e274 <__assert_fail@plt+0xc28c>
   1f130:	cmp	r0, #0
   1f134:	beq	1ef84 <__assert_fail@plt+0xcf9c>
   1f138:	ldr	r3, [pc, #764]	; 1f43c <__assert_fail@plt+0xd454>
   1f13c:	mvn	r2, #0
   1f140:	str	r3, [sp]
   1f144:	mov	r1, #1
   1f148:	ldr	r3, [pc, #752]	; 1f440 <__assert_fail@plt+0xd458>
   1f14c:	str	r4, [sp, #4]
   1f150:	mov	r0, r9
   1f154:	bl	11dcc <__sprintf_chk@plt>
   1f158:	add	r1, sp, #32
   1f15c:	mov	r0, r5
   1f160:	bl	1e274 <__assert_fail@plt+0xc28c>
   1f164:	cmp	r0, #0
   1f168:	bne	1f240 <__assert_fail@plt+0xd258>
   1f16c:	ldr	r3, [sp, #12]
   1f170:	cmp	r3, #0
   1f174:	beq	1f1cc <__assert_fail@plt+0xd1e4>
   1f178:	ldr	r0, [sp, #16]
   1f17c:	bl	2f2ec <renameat2@@Base+0x5d8>
   1f180:	ldr	r2, [sp, #12]
   1f184:	ldr	r3, [pc, #696]	; 1f444 <__assert_fail@plt+0xd45c>
   1f188:	ldr	r1, [sp, #24]
   1f18c:	cmp	r1, #0
   1f190:	mov	r1, #1
   1f194:	str	r0, [r2]
   1f198:	add	r2, r3, #8
   1f19c:	moveq	r3, r2
   1f1a0:	mov	r7, r0
   1f1a4:	mvn	r2, #0
   1f1a8:	bl	11dcc <__sprintf_chk@plt>
   1f1ac:	mov	r0, r7
   1f1b0:	bl	11d78 <strlen@plt>
   1f1b4:	mov	r1, r5
   1f1b8:	add	r7, r7, r0
   1f1bc:	mov	r0, r7
   1f1c0:	bl	1ea84 <__assert_fail@plt+0xca9c>
   1f1c4:	mov	r3, #0
   1f1c8:	strb	r3, [r7, r0]
   1f1cc:	cmp	fp, #0
   1f1d0:	beq	1f238 <__assert_fail@plt+0xd250>
   1f1d4:	ldr	r0, [sp, #28]
   1f1d8:	bl	2f2ec <renameat2@@Base+0x5d8>
   1f1dc:	ldr	r2, [pc, #612]	; 1f448 <__assert_fail@plt+0xd460>
   1f1e0:	ldr	r9, [pc, #612]	; 1f44c <__assert_fail@plt+0xd464>
   1f1e4:	mov	r3, r0
   1f1e8:	add	r7, r0, #7
   1f1ec:	str	r0, [fp]
   1f1f0:	ldm	r2!, {r0, r1}
   1f1f4:	str	r0, [r3]
   1f1f8:	str	r1, [r3, #4]
   1f1fc:	mov	r0, r7
   1f200:	mov	r1, r5
   1f204:	bl	1ea84 <__assert_fail@plt+0xca9c>
   1f208:	ldr	r3, [sp, #20]
   1f20c:	mov	r1, #1
   1f210:	str	r3, [sp]
   1f214:	mvn	r2, #0
   1f218:	ldr	r3, [pc, #560]	; 1f450 <__assert_fail@plt+0xd468>
   1f21c:	add	r7, r7, r0
   1f220:	mov	r0, r7
   1f224:	bl	11dcc <__sprintf_chk@plt>
   1f228:	mov	r0, r7
   1f22c:	bl	11d78 <strlen@plt>
   1f230:	mov	r1, r8
   1f234:	b	1f044 <__assert_fail@plt+0xd05c>
   1f238:	ldr	r9, [pc, #524]	; 1f44c <__assert_fail@plt+0xd464>
   1f23c:	b	1f078 <__assert_fail@plt+0xd090>
   1f240:	ldr	r3, [pc, #500]	; 1f43c <__assert_fail@plt+0xd454>
   1f244:	mvn	r2, #0
   1f248:	str	r3, [sp]
   1f24c:	mov	r1, #1
   1f250:	ldr	r3, [pc, #480]	; 1f438 <__assert_fail@plt+0xd450>
   1f254:	str	r4, [sp, #4]
   1f258:	mov	r0, r9
   1f25c:	bl	11dcc <__sprintf_chk@plt>
   1f260:	add	r1, sp, #32
   1f264:	mov	r0, r5
   1f268:	bl	1e274 <__assert_fail@plt+0xc28c>
   1f26c:	cmp	r0, #0
   1f270:	beq	1f16c <__assert_fail@plt+0xd184>
   1f274:	ldr	r3, [sp, #24]
   1f278:	eor	r3, r3, #1
   1f27c:	cmp	r7, #0
   1f280:	moveq	r7, #0
   1f284:	andne	r7, r3, #1
   1f288:	cmp	r7, #0
   1f28c:	bne	1f298 <__assert_fail@plt+0xd2b0>
   1f290:	mov	r9, #0
   1f294:	b	1f078 <__assert_fail@plt+0xd090>
   1f298:	mov	r0, r9
   1f29c:	ldr	r3, [pc, #432]	; 1f454 <__assert_fail@plt+0xd46c>
   1f2a0:	mvn	r2, #0
   1f2a4:	mov	r1, #1
   1f2a8:	str	r4, [sp]
   1f2ac:	bl	11dcc <__sprintf_chk@plt>
   1f2b0:	add	r1, sp, #32
   1f2b4:	mov	r0, r5
   1f2b8:	bl	1e274 <__assert_fail@plt+0xc28c>
   1f2bc:	subs	r9, r0, #0
   1f2c0:	bne	1f2d4 <__assert_fail@plt+0xd2ec>
   1f2c4:	ldr	r3, [sp, #48]	; 0x30
   1f2c8:	and	r3, r3, #61440	; 0xf000
   1f2cc:	cmp	r3, #16384	; 0x4000
   1f2d0:	beq	1f374 <__assert_fail@plt+0xd38c>
   1f2d4:	ldr	r0, [pc, #380]	; 1f458 <__assert_fail@plt+0xd470>
   1f2d8:	bl	11c94 <getenv@plt>
   1f2dc:	cmp	r0, #0
   1f2e0:	beq	1f350 <__assert_fail@plt+0xd368>
   1f2e4:	ldr	r3, [sp, #12]
   1f2e8:	cmp	r3, #0
   1f2ec:	beq	1f334 <__assert_fail@plt+0xd34c>
   1f2f0:	ldr	r0, [sp, #16]
   1f2f4:	bl	2f2ec <renameat2@@Base+0x5d8>
   1f2f8:	ldr	r1, [sp, #12]
   1f2fc:	ldr	r3, [pc, #344]	; 1f45c <__assert_fail@plt+0xd474>
   1f300:	mov	r2, r0
   1f304:	mov	r7, r0
   1f308:	str	r0, [r1]
   1f30c:	ldm	r3!, {r0, r1}
   1f310:	ldrb	r3, [r3]
   1f314:	str	r0, [r2]
   1f318:	str	r1, [r2, #4]
   1f31c:	strb	r3, [r7, #8]!
   1f320:	mov	r1, r8
   1f324:	mov	r0, r7
   1f328:	bl	1ea84 <__assert_fail@plt+0xca9c>
   1f32c:	mov	r3, #0
   1f330:	strb	r3, [r7, r0]
   1f334:	cmp	fp, #0
   1f338:	movne	r3, #0
   1f33c:	strne	r3, [fp]
   1f340:	ldrne	r9, [pc, #280]	; 1f460 <__assert_fail@plt+0xd478>
   1f344:	bne	1f078 <__assert_fail@plt+0xd090>
   1f348:	ldr	r9, [pc, #272]	; 1f460 <__assert_fail@plt+0xd478>
   1f34c:	b	1f078 <__assert_fail@plt+0xd090>
   1f350:	ldr	r0, [pc, #268]	; 1f464 <__assert_fail@plt+0xd47c>
   1f354:	bl	11c94 <getenv@plt>
   1f358:	cmp	r0, #0
   1f35c:	bne	1f2e4 <__assert_fail@plt+0xd2fc>
   1f360:	ldr	r0, [pc, #256]	; 1f468 <__assert_fail@plt+0xd480>
   1f364:	bl	11c94 <getenv@plt>
   1f368:	cmp	r0, #0
   1f36c:	bne	1f2e4 <__assert_fail@plt+0xd2fc>
   1f370:	b	1f290 <__assert_fail@plt+0xd2a8>
   1f374:	ldr	r3, [sp, #12]
   1f378:	cmp	r3, #0
   1f37c:	beq	1f3e8 <__assert_fail@plt+0xd400>
   1f380:	ldr	r0, [sp, #16]
   1f384:	bl	2f2ec <renameat2@@Base+0x5d8>
   1f388:	ldr	r3, [sp, #12]
   1f38c:	ldr	ip, [pc, #216]	; 1f46c <__assert_fail@plt+0xd484>
   1f390:	mov	lr, r0
   1f394:	mov	r7, r0
   1f398:	str	r0, [r3]
   1f39c:	ldm	ip!, {r0, r1, r2, r3}
   1f3a0:	str	r0, [lr]
   1f3a4:	ldrh	r0, [ip, #4]
   1f3a8:	str	r1, [lr, #4]
   1f3ac:	str	r2, [lr, #8]
   1f3b0:	str	r0, [sp, #12]
   1f3b4:	ldrb	r0, [ip, #6]
   1f3b8:	str	r3, [lr, #12]
   1f3bc:	mov	r1, r8
   1f3c0:	str	r0, [sp, #16]
   1f3c4:	ldr	r0, [ip]
   1f3c8:	str	r0, [lr, #16]
   1f3cc:	ldr	r0, [sp, #12]
   1f3d0:	strh	r0, [lr, #20]
   1f3d4:	ldr	r0, [sp, #16]
   1f3d8:	strb	r0, [r7, #22]!
   1f3dc:	mov	r0, r7
   1f3e0:	bl	1ea84 <__assert_fail@plt+0xca9c>
   1f3e4:	strb	r9, [r7, r0]
   1f3e8:	cmp	fp, #0
   1f3ec:	beq	1f404 <__assert_fail@plt+0xd41c>
   1f3f0:	mov	r3, #0
   1f3f4:	str	r3, [fp]
   1f3f8:	ldr	r9, [pc, #112]	; 1f470 <__assert_fail@plt+0xd488>
   1f3fc:	b	1f078 <__assert_fail@plt+0xd090>
   1f400:	bl	11b50 <__stack_chk_fail@plt>
   1f404:	ldr	r9, [pc, #100]	; 1f470 <__assert_fail@plt+0xd488>
   1f408:	b	1f078 <__assert_fail@plt+0xd090>
   1f40c:	andeq	r7, r4, r8, lsl #30
   1f410:	strdeq	r5, [r3], -r8
   1f414:	andeq	r4, r3, ip, ror #18
   1f418:	muleq	r3, r4, r9
   1f41c:	andeq	r4, r3, r4, lsl r9
   1f420:	muleq	r3, r8, r9
   1f424:	strdeq	r4, [r3], -r0
   1f428:	andeq	r4, r3, r8, lsl r9
   1f42c:	andeq	r4, r3, r0, ror r9
   1f430:	andeq	r2, r3, r0, ror r0
   1f434:	andeq	r4, r3, r4, lsr #19
   1f438:	muleq	r3, ip, r9
   1f43c:	andeq	r4, r3, r4, lsr #18
   1f440:	andeq	r4, r3, ip, lsr #19
   1f444:	andeq	r4, r3, r4, lsl #18
   1f448:	ldrdeq	r4, [r3], -ip
   1f44c:	andeq	r4, r3, r4, ror r9
   1f450:	andeq	r4, r3, r8, lsr #18
   1f454:			; <UNDEFINED> instruction: 0x000349b8
   1f458:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1f45c:	andeq	r4, r3, r4, ror #19
   1f460:	andeq	r4, r3, r8, lsl #19
   1f464:	andeq	r4, r3, r0, asr #19
   1f468:	andeq	r4, r3, r8, asr #19
   1f46c:	strdeq	r4, [r3], -r0
   1f470:	andeq	r4, r3, ip, ror r9
   1f474:	add	r1, r0, r1
   1f478:	sub	r0, r0, #1
   1f47c:	ldrb	r3, [r1], #1
   1f480:	cmp	r3, #0
   1f484:	strb	r3, [r0, #1]!
   1f488:	bne	1f47c <__assert_fail@plt+0xd494>
   1f48c:	bx	lr
   1f490:	cmp	r2, #0
   1f494:	push	{r4, r5, r6, r7, r8, lr}
   1f498:	mov	r5, r3
   1f49c:	sbcs	r3, r3, #0
   1f4a0:	mov	r3, #0
   1f4a4:	mov	r4, r2
   1f4a8:	strb	r3, [r0, #22]
   1f4ac:	add	r6, r0, #22
   1f4b0:	blt	1f500 <__assert_fail@plt+0xd518>
   1f4b4:	mov	r0, r4
   1f4b8:	mov	r1, r5
   1f4bc:	mov	r2, #10
   1f4c0:	mov	r3, #0
   1f4c4:	bl	31ca8 <renameat2@@Base+0x2f94>
   1f4c8:	mov	r0, r4
   1f4cc:	mov	r1, r5
   1f4d0:	mov	r3, #0
   1f4d4:	add	r2, r2, #48	; 0x30
   1f4d8:	strb	r2, [r6, #-1]!
   1f4dc:	mov	r2, #10
   1f4e0:	bl	31ca8 <renameat2@@Base+0x2f94>
   1f4e4:	mov	r4, r0
   1f4e8:	mov	r5, r1
   1f4ec:	orrs	r3, r4, r5
   1f4f0:	bne	1f4b4 <__assert_fail@plt+0xd4cc>
   1f4f4:	mov	r0, r6
   1f4f8:	pop	{r4, r5, r6, r7, r8, pc}
   1f4fc:	mov	r6, r7
   1f500:	mov	r0, r4
   1f504:	mov	r1, r5
   1f508:	mov	r2, #10
   1f50c:	mov	r3, #0
   1f510:	bl	31ca8 <renameat2@@Base+0x2f94>
   1f514:	mov	r0, r4
   1f518:	mov	r1, r5
   1f51c:	mov	r3, #0
   1f520:	sub	r7, r6, #1
   1f524:	rsb	r2, r2, #48	; 0x30
   1f528:	strb	r2, [r6, #-1]
   1f52c:	mov	r2, #10
   1f530:	bl	31ca8 <renameat2@@Base+0x2f94>
   1f534:	mov	r4, r0
   1f538:	mov	r5, r1
   1f53c:	orrs	r3, r4, r5
   1f540:	bne	1f4fc <__assert_fail@plt+0xd514>
   1f544:	mov	r3, #45	; 0x2d
   1f548:	sub	r6, r6, #2
   1f54c:	strb	r3, [r7, #-1]
   1f550:	mov	r0, r6
   1f554:	pop	{r4, r5, r6, r7, r8, pc}
   1f558:	push	{r0, r1, r2, r3}
   1f55c:	mov	r1, #1
   1f560:	ldr	r2, [pc, #96]	; 1f5c8 <__assert_fail@plt+0xd5e0>
   1f564:	ldr	r4, [pc, #96]	; 1f5cc <__assert_fail@plt+0xd5e4>
   1f568:	ldr	r3, [pc, #96]	; 1f5d0 <__assert_fail@plt+0xd5e8>
   1f56c:	push	{lr}		; (str lr, [sp, #-4]!)
   1f570:	sub	sp, sp, #12
   1f574:	ldr	ip, [r2]
   1f578:	ldr	r3, [r3]
   1f57c:	ldr	r5, [sp, #16]
   1f580:	ldr	r2, [pc, #76]	; 1f5d4 <__assert_fail@plt+0xd5ec>
   1f584:	ldr	r0, [r4]
   1f588:	str	ip, [sp, #4]
   1f58c:	bl	11e38 <__fprintf_chk@plt>
   1f590:	add	ip, sp, #20
   1f594:	mov	r2, r5
   1f598:	mov	r3, ip
   1f59c:	mov	r1, #1
   1f5a0:	ldr	r0, [r4]
   1f5a4:	str	ip, [sp]
   1f5a8:	bl	11cf4 <__vfprintf_chk@plt>
   1f5ac:	ldr	r1, [r4]
   1f5b0:	mov	r0, #10
   1f5b4:	bl	11f04 <putc@plt>
   1f5b8:	ldr	r0, [r4]
   1f5bc:	bl	11a84 <fflush@plt>
   1f5c0:	mov	r0, #0
   1f5c4:	bl	17548 <__assert_fail@plt+0x5560>
   1f5c8:	andeq	r7, r4, r8, lsl #30
   1f5cc:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   1f5d0:	andeq	sl, r4, r8, ror #10
   1f5d4:	andeq	r4, r3, r8, lsl #20
   1f5d8:	push	{r4, lr}
   1f5dc:	ldr	r0, [pc]	; 1f5e4 <__assert_fail@plt+0xd5fc>
   1f5e0:	bl	1f558 <__assert_fail@plt+0xd570>
   1f5e4:	andeq	r4, r3, r4, lsl sl
   1f5e8:	push	{lr}		; (str lr, [sp, #-4]!)
   1f5ec:	sub	sp, sp, #12
   1f5f0:	ldr	r3, [pc, #48]	; 1f628 <__assert_fail@plt+0xd640>
   1f5f4:	mov	r1, #0
   1f5f8:	str	r3, [sp]
   1f5fc:	mov	r0, r1
   1f600:	ldr	r3, [pc, #36]	; 1f62c <__assert_fail@plt+0xd644>
   1f604:	ldr	r2, [pc, #36]	; 1f630 <__assert_fail@plt+0xd648>
   1f608:	bl	25da8 <__assert_fail@plt+0x13dc0>
   1f60c:	ldr	r3, [pc, #32]	; 1f634 <__assert_fail@plt+0xd64c>
   1f610:	cmp	r0, #0
   1f614:	str	r0, [r3]
   1f618:	beq	1f624 <__assert_fail@plt+0xd63c>
   1f61c:	add	sp, sp, #12
   1f620:	pop	{pc}		; (ldr pc, [sp], #4)
   1f624:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   1f628:			; <UNDEFINED> instruction: 0x00011ab4
   1f62c:	andeq	lr, r1, ip, ror r8
   1f630:	andeq	lr, r1, r0, ror #16
   1f634:	andeq	sl, r4, r0, asr r4
   1f638:	push	{r4, r5, r6, r7, r8, lr}
   1f63c:	mov	r5, r0
   1f640:	ldr	r4, [pc, #112]	; 1f6b8 <__assert_fail@plt+0xd6d0>
   1f644:	sub	sp, sp, #8
   1f648:	mov	r8, r2
   1f64c:	ldr	r0, [r4, #4]
   1f650:	cmp	r0, #0
   1f654:	beq	1f69c <__assert_fail@plt+0xd6b4>
   1f658:	ldrd	r6, [r5]
   1f65c:	mov	r5, #0
   1f660:	strd	r6, [r0]
   1f664:	ldrd	r6, [r1]
   1f668:	strb	r5, [r0, #20]
   1f66c:	mov	r1, r0
   1f670:	strd	r6, [r0, #8]
   1f674:	ldr	r0, [r4]
   1f678:	bl	263d4 <__assert_fail@plt+0x143ec>
   1f67c:	cmp	r0, #0
   1f680:	beq	1f6b4 <__assert_fail@plt+0xd6cc>
   1f684:	ldr	r3, [r4, #4]
   1f688:	str	r8, [r0, #16]
   1f68c:	cmp	r0, r3
   1f690:	streq	r5, [r4, #4]
   1f694:	add	sp, sp, #8
   1f698:	pop	{r4, r5, r6, r7, r8, pc}
   1f69c:	mov	r0, #24
   1f6a0:	str	r1, [sp, #4]
   1f6a4:	bl	2f2ec <renameat2@@Base+0x5d8>
   1f6a8:	ldr	r1, [sp, #4]
   1f6ac:	str	r0, [r4, #4]
   1f6b0:	b	1f658 <__assert_fail@plt+0xd670>
   1f6b4:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   1f6b8:	andeq	sl, r4, r0, asr r4
   1f6bc:	mov	r2, r1
   1f6c0:	add	r1, r0, #96	; 0x60
   1f6c4:	b	1f638 <__assert_fail@plt+0xd650>
   1f6c8:	push	{r4, r5, r6, lr}
   1f6cc:	mov	r4, r1
   1f6d0:	mov	r5, r0
   1f6d4:	bl	1e8b8 <__assert_fail@plt+0xc8d0>
   1f6d8:	cmp	r0, #0
   1f6dc:	beq	1f6e8 <__assert_fail@plt+0xd700>
   1f6e0:	strb	r4, [r0, #20]
   1f6e4:	pop	{r4, r5, r6, pc}
   1f6e8:	mov	r2, r0
   1f6ec:	add	r1, r5, #96	; 0x60
   1f6f0:	mov	r0, r5
   1f6f4:	bl	1f638 <__assert_fail@plt+0xd650>
   1f6f8:	strb	r4, [r0, #20]
   1f6fc:	pop	{r4, r5, r6, pc}
   1f700:	push	{r4, r5, r6, lr}
   1f704:	subs	r4, r1, #0
   1f708:	beq	1f744 <__assert_fail@plt+0xd75c>
   1f70c:	mov	r5, r0
   1f710:	mov	r0, r4
   1f714:	bl	11cac <malloc@plt>
   1f718:	subs	r6, r0, #0
   1f71c:	beq	1f734 <__assert_fail@plt+0xd74c>
   1f720:	mov	r2, r4
   1f724:	mov	r1, r5
   1f728:	bl	11afc <memcpy@plt>
   1f72c:	mov	r0, r6
   1f730:	pop	{r4, r5, r6, pc}
   1f734:	ldr	r3, [pc, #24]	; 1f754 <__assert_fail@plt+0xd76c>
   1f738:	ldrb	r3, [r3]
   1f73c:	cmp	r3, #0
   1f740:	beq	1f750 <__assert_fail@plt+0xd768>
   1f744:	mov	r6, #0
   1f748:	mov	r0, r6
   1f74c:	pop	{r4, r5, r6, pc}
   1f750:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   1f754:	strdeq	sl, [r4], -r0
   1f758:	push	{r4, lr}
   1f75c:	mov	r4, r0
   1f760:	bl	11d78 <strlen@plt>
   1f764:	add	r1, r0, #1
   1f768:	mov	r0, r4
   1f76c:	pop	{r4, lr}
   1f770:	b	1f700 <__assert_fail@plt+0xd718>
   1f774:	push	{r0, r1, r2, r3}
   1f778:	ldr	r3, [pc, #120]	; 1f7f8 <__assert_fail@plt+0xd810>
   1f77c:	push	{r7, lr}
   1f780:	sub	sp, sp, #8
   1f784:	ldr	r3, [r3]
   1f788:	ldr	r4, [pc, #108]	; 1f7fc <__assert_fail@plt+0xd814>
   1f78c:	str	r3, [sp, #4]
   1f790:	bl	11dc0 <__errno_location@plt>
   1f794:	ldr	r3, [pc, #100]	; 1f800 <__assert_fail@plt+0xd818>
   1f798:	ldr	r7, [sp, #16]
   1f79c:	ldr	r2, [pc, #96]	; 1f804 <__assert_fail@plt+0xd81c>
   1f7a0:	ldr	r3, [r3]
   1f7a4:	mov	r1, #1
   1f7a8:	mov	r5, r0
   1f7ac:	ldr	r0, [r4]
   1f7b0:	ldr	r6, [r5]
   1f7b4:	bl	11e38 <__fprintf_chk@plt>
   1f7b8:	add	ip, sp, #20
   1f7bc:	mov	r2, r7
   1f7c0:	mov	r3, ip
   1f7c4:	mov	r1, #1
   1f7c8:	ldr	r0, [r4]
   1f7cc:	str	ip, [sp]
   1f7d0:	bl	11cf4 <__vfprintf_chk@plt>
   1f7d4:	ldr	r0, [r4]
   1f7d8:	bl	11a84 <fflush@plt>
   1f7dc:	ldr	r0, [pc, #36]	; 1f808 <__assert_fail@plt+0xd820>
   1f7e0:	str	r6, [r5]
   1f7e4:	bl	11bc8 <perror@plt>
   1f7e8:	ldr	r0, [r4]
   1f7ec:	bl	11a84 <fflush@plt>
   1f7f0:	mov	r0, #0
   1f7f4:	bl	17548 <__assert_fail@plt+0x5560>
   1f7f8:	andeq	r7, r4, r8, lsl #30
   1f7fc:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   1f800:	andeq	sl, r4, r8, ror #10
   1f804:	andeq	r4, r3, r8, lsl #20
   1f808:	andeq	r4, r3, r0, lsl sl
   1f80c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f810:	sub	sp, sp, #28
   1f814:	ldr	r5, [pc, #528]	; 1fa2c <__assert_fail@plt+0xda44>
   1f818:	tst	r1, #1
   1f81c:	mov	r6, r3
   1f820:	ldr	r2, [r5]
   1f824:	mov	r4, r1
   1f828:	mov	r7, r0
   1f82c:	str	r2, [sp, #20]
   1f830:	ldr	r3, [sp, #60]	; 0x3c
   1f834:	beq	1f868 <__assert_fail@plt+0xd880>
   1f838:	cmp	r3, #0
   1f83c:	beq	1f990 <__assert_fail@plt+0xd9a8>
   1f840:	ldm	r3, {r0, r1}
   1f844:	add	r2, sp, #4
   1f848:	add	r3, sp, #12
   1f84c:	stm	r2, {r0, r1}
   1f850:	stm	r3, {r0, r1}
   1f854:	mov	r1, r2
   1f858:	mov	r0, r7
   1f85c:	bl	1e6d0 <__assert_fail@plt+0xc6e8>
   1f860:	cmp	r0, #0
   1f864:	bne	1f9d0 <__assert_fail@plt+0xd9e8>
   1f868:	tst	r4, #2
   1f86c:	beq	1f94c <__assert_fail@plt+0xd964>
   1f870:	ldr	r8, [pc, #440]	; 1fa30 <__assert_fail@plt+0xda48>
   1f874:	ldr	r9, [r8]
   1f878:	cmn	r9, #1
   1f87c:	beq	1f9b8 <__assert_fail@plt+0xd9d0>
   1f880:	ldr	r0, [r8, #4]
   1f884:	ldr	r8, [r6, #24]
   1f888:	ldr	r6, [r6, #28]
   1f88c:	cmp	r8, r9
   1f890:	beq	1f93c <__assert_fail@plt+0xd954>
   1f894:	cmp	r6, r0
   1f898:	andne	r3, r8, r6
   1f89c:	moveq	r3, r8
   1f8a0:	mvneq	r6, #0
   1f8a4:	cmn	r3, #1
   1f8a8:	beq	1f94c <__assert_fail@plt+0xd964>
   1f8ac:	mov	r2, r6
   1f8b0:	mov	r1, r8
   1f8b4:	mov	r0, r7
   1f8b8:	bl	1e640 <__assert_fail@plt+0xc658>
   1f8bc:	cmp	r0, #0
   1f8c0:	beq	1f94c <__assert_fail@plt+0xd964>
   1f8c4:	bl	11dc0 <__errno_location@plt>
   1f8c8:	ldr	r3, [r0]
   1f8cc:	mov	r9, r0
   1f8d0:	cmp	r3, #1
   1f8d4:	bne	1fa1c <__assert_fail@plt+0xda34>
   1f8d8:	cmn	r8, #1
   1f8dc:	beq	1f94c <__assert_fail@plt+0xd964>
   1f8e0:	mov	r2, r6
   1f8e4:	mvn	r1, #0
   1f8e8:	mov	r0, r7
   1f8ec:	bl	1e640 <__assert_fail@plt+0xc658>
   1f8f0:	cmp	r0, #0
   1f8f4:	beq	1f94c <__assert_fail@plt+0xd964>
   1f8f8:	ldr	r3, [r9]
   1f8fc:	cmp	r3, #1
   1f900:	beq	1f94c <__assert_fail@plt+0xd964>
   1f904:	ldr	r5, [pc, #296]	; 1fa34 <__assert_fail@plt+0xda4c>
   1f908:	ldr	r2, [sp, #56]	; 0x38
   1f90c:	ldr	r3, [pc, #292]	; 1fa38 <__assert_fail@plt+0xda50>
   1f910:	and	r2, r2, #61440	; 0xf000
   1f914:	cmp	r2, #40960	; 0xa000
   1f918:	mov	r0, r7
   1f91c:	ldr	r4, [pc, #280]	; 1fa3c <__assert_fail@plt+0xda54>
   1f920:	movne	r4, r3
   1f924:	bl	2e970 <__assert_fail@plt+0x1c988>
   1f928:	mov	r2, r4
   1f92c:	mov	r1, r5
   1f930:	mov	r3, r0
   1f934:	ldr	r0, [pc, #260]	; 1fa40 <__assert_fail@plt+0xda58>
   1f938:	bl	1f774 <__assert_fail@plt+0xd78c>
   1f93c:	cmp	r6, r0
   1f940:	movne	r3, r6
   1f944:	mvnne	r8, #0
   1f948:	bne	1f8a4 <__assert_fail@plt+0xd8bc>
   1f94c:	tst	r4, #4
   1f950:	beq	1f978 <__assert_fail@plt+0xd990>
   1f954:	ldr	r3, [sp, #56]	; 0x38
   1f958:	and	r3, r3, #61440	; 0xf000
   1f95c:	cmp	r3, #40960	; 0xa000
   1f960:	beq	1f978 <__assert_fail@plt+0xd990>
   1f964:	ldr	r1, [sp, #56]	; 0x38
   1f968:	mov	r0, r7
   1f96c:	bl	1e5c0 <__assert_fail@plt+0xc5d8>
   1f970:	cmp	r0, #0
   1f974:	bne	1fa00 <__assert_fail@plt+0xda18>
   1f978:	ldr	r2, [sp, #20]
   1f97c:	ldr	r3, [r5]
   1f980:	cmp	r2, r3
   1f984:	bne	1fa18 <__assert_fail@plt+0xda30>
   1f988:	add	sp, sp, #28
   1f98c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f990:	ldr	r2, [r6, #76]	; 0x4c
   1f994:	ldr	r3, [r6, #72]	; 0x48
   1f998:	str	r2, [sp, #8]
   1f99c:	str	r3, [sp, #4]
   1f9a0:	ldr	r2, [r6, #84]	; 0x54
   1f9a4:	ldr	r3, [r6, #80]	; 0x50
   1f9a8:	str	r2, [sp, #16]
   1f9ac:	str	r3, [sp, #12]
   1f9b0:	add	r2, sp, #4
   1f9b4:	b	1f854 <__assert_fail@plt+0xd86c>
   1f9b8:	bl	11bb0 <geteuid@plt>
   1f9bc:	mov	r9, r0
   1f9c0:	str	r0, [r8]
   1f9c4:	bl	11c04 <getegid@plt>
   1f9c8:	str	r0, [r8, #4]
   1f9cc:	b	1f884 <__assert_fail@plt+0xd89c>
   1f9d0:	ldr	r2, [sp, #56]	; 0x38
   1f9d4:	ldr	r3, [pc, #92]	; 1fa38 <__assert_fail@plt+0xda50>
   1f9d8:	and	r2, r2, #61440	; 0xf000
   1f9dc:	cmp	r2, #40960	; 0xa000
   1f9e0:	mov	r0, r7
   1f9e4:	ldr	r4, [pc, #80]	; 1fa3c <__assert_fail@plt+0xda54>
   1f9e8:	movne	r4, r3
   1f9ec:	bl	2e970 <__assert_fail@plt+0x1c988>
   1f9f0:	mov	r1, r4
   1f9f4:	mov	r2, r0
   1f9f8:	ldr	r0, [pc, #68]	; 1fa44 <__assert_fail@plt+0xda5c>
   1f9fc:	bl	1f774 <__assert_fail@plt+0xd78c>
   1fa00:	mov	r0, r7
   1fa04:	bl	2e970 <__assert_fail@plt+0x1c988>
   1fa08:	ldr	r1, [pc, #40]	; 1fa38 <__assert_fail@plt+0xda50>
   1fa0c:	mov	r2, r0
   1fa10:	ldr	r0, [pc, #48]	; 1fa48 <__assert_fail@plt+0xda60>
   1fa14:	bl	1f774 <__assert_fail@plt+0xd78c>
   1fa18:	bl	11b50 <__stack_chk_fail@plt>
   1fa1c:	cmn	r8, #1
   1fa20:	ldrne	r5, [pc, #36]	; 1fa4c <__assert_fail@plt+0xda64>
   1fa24:	bne	1f908 <__assert_fail@plt+0xd920>
   1fa28:	b	1f904 <__assert_fail@plt+0xd91c>
   1fa2c:	andeq	r7, r4, r8, lsl #30
   1fa30:	muleq	r4, r0, r2
   1fa34:	andeq	r4, r3, r4, lsr #20
   1fa38:	andeq	r2, r3, r0, asr #2
   1fa3c:	muleq	r3, r0, r0
   1fa40:	andeq	r4, r3, r4, ror #20
   1fa44:	andeq	r4, r3, ip, lsr sl
   1fa48:	andeq	r4, r3, r4, lsl #21
   1fa4c:	andeq	r4, r3, ip, lsr #20
   1fa50:	cmp	r3, #0
   1fa54:	bic	r2, r2, #73	; 0x49
   1fa58:	push	{r4, r5, r6, r7, r8, lr}
   1fa5c:	orr	r5, r2, #384	; 0x180
   1fa60:	mov	r4, r0
   1fa64:	orr	r6, r1, #576	; 0x240
   1fa68:	movne	r7, #0
   1fa6c:	moveq	r7, #2
   1fa70:	mov	r2, r5
   1fa74:	mov	r1, r6
   1fa78:	mov	r0, r4
   1fa7c:	bl	1e284 <__assert_fail@plt+0xc29c>
   1fa80:	cmp	r0, #0
   1fa84:	popge	{r4, r5, r6, r7, r8, pc}
   1fa88:	bl	11dc0 <__errno_location@plt>
   1fa8c:	ldr	r3, [r0]
   1fa90:	mov	r0, r4
   1fa94:	cmp	r7, r3
   1fa98:	bne	1fab8 <__assert_fail@plt+0xdad0>
   1fa9c:	bl	2f518 <renameat2@@Base+0x804>
   1faa0:	mov	r7, r0
   1faa4:	bl	1e910 <__assert_fail@plt+0xc928>
   1faa8:	mov	r0, r7
   1faac:	bl	11ab4 <free@plt>
   1fab0:	mov	r7, #0
   1fab4:	b	1fa70 <__assert_fail@plt+0xda88>
   1fab8:	bl	2e970 <__assert_fail@plt+0x1c988>
   1fabc:	mov	r1, r0
   1fac0:	ldr	r0, [pc]	; 1fac8 <__assert_fail@plt+0xdae0>
   1fac4:	bl	1f774 <__assert_fail@plt+0xd78c>
   1fac8:	andeq	r2, r3, r8, ror #21
   1facc:	push	{r4, lr}
   1fad0:	ldr	r0, [pc]	; 1fad8 <__assert_fail@plt+0xdaf0>
   1fad4:	bl	1f774 <__assert_fail@plt+0xd78c>
   1fad8:	andeq	r4, r3, ip, lsr #21
   1fadc:	push	{r4, lr}
   1fae0:	ldr	r0, [pc]	; 1fae8 <__assert_fail@plt+0xdb00>
   1fae4:	bl	1f774 <__assert_fail@plt+0xd78c>
   1fae8:			; <UNDEFINED> instruction: 0x00034ab8
   1faec:	ldr	r3, [pc, #152]	; 1fb8c <__assert_fail@plt+0xdba4>
   1faf0:	mov	r2, #0
   1faf4:	push	{r4, r5, r6, r7, r8, lr}
   1faf8:	mov	r8, r1
   1fafc:	ldrb	r3, [r3]
   1fb00:	mov	r4, r0
   1fb04:	cmp	r3, r2
   1fb08:	moveq	r1, #32768	; 0x8000
   1fb0c:	movne	r1, r2
   1fb10:	bl	1e284 <__assert_fail@plt+0xc29c>
   1fb14:	subs	r6, r0, #0
   1fb18:	blt	1fb78 <__assert_fail@plt+0xdb90>
   1fb1c:	ldr	r7, [pc, #108]	; 1fb90 <__assert_fail@plt+0xdba8>
   1fb20:	ldr	r5, [pc, #108]	; 1fb94 <__assert_fail@plt+0xdbac>
   1fb24:	b	1fb48 <__assert_fail@plt+0xdb60>
   1fb28:	cmn	r4, #1
   1fb2c:	beq	1fb70 <__assert_fail@plt+0xdb88>
   1fb30:	mov	r2, r4
   1fb34:	ldr	r1, [r5]
   1fb38:	mov	r0, r8
   1fb3c:	bl	25398 <__assert_fail@plt+0x133b0>
   1fb40:	cmp	r4, r0
   1fb44:	bne	1fb74 <__assert_fail@plt+0xdb8c>
   1fb48:	ldr	r2, [r7]
   1fb4c:	ldr	r1, [r5]
   1fb50:	mov	r0, r6
   1fb54:	bl	11a6c <read@plt>
   1fb58:	subs	r4, r0, #0
   1fb5c:	bne	1fb28 <__assert_fail@plt+0xdb40>
   1fb60:	mov	r0, r6
   1fb64:	bl	11fb8 <close@plt>
   1fb68:	cmp	r0, #0
   1fb6c:	popeq	{r4, r5, r6, r7, r8, pc}
   1fb70:	bl	1facc <__assert_fail@plt+0xdae4>
   1fb74:	bl	1fadc <__assert_fail@plt+0xdaf4>
   1fb78:	mov	r0, r4
   1fb7c:	bl	2e970 <__assert_fail@plt+0x1c988>
   1fb80:	mov	r1, r0
   1fb84:	ldr	r0, [pc, #12]	; 1fb98 <__assert_fail@plt+0xdbb0>
   1fb88:	bl	1f774 <__assert_fail@plt+0xd78c>
   1fb8c:	andeq	sl, r4, ip, ror r7
   1fb90:	andeq	sl, r4, r4, lsr #15
   1fb94:	andeq	sl, r4, r0, ror r7
   1fb98:	andeq	r4, r3, r4, asr #21
   1fb9c:	ldr	ip, [pc, #104]	; 1fc0c <__assert_fail@plt+0xdc24>
   1fba0:	ldr	r2, [pc, #104]	; 1fc10 <__assert_fail@plt+0xdc28>
   1fba4:	ldr	r3, [pc, #104]	; 1fc14 <__assert_fail@plt+0xdc2c>
   1fba8:	ldrb	ip, [ip]
   1fbac:	push	{r4, r5, r6, lr}
   1fbb0:	mov	r5, r1
   1fbb4:	cmp	ip, #0
   1fbb8:	movne	r1, r2
   1fbbc:	moveq	r1, r3
   1fbc0:	mov	r6, r0
   1fbc4:	mov	r2, #0
   1fbc8:	mov	r0, r5
   1fbcc:	bl	1e284 <__assert_fail@plt+0xc29c>
   1fbd0:	subs	r4, r0, #0
   1fbd4:	blt	1fbf8 <__assert_fail@plt+0xdc10>
   1fbd8:	mov	r0, r6
   1fbdc:	mov	r1, r4
   1fbe0:	bl	1faec <__assert_fail@plt+0xdb04>
   1fbe4:	mov	r0, r4
   1fbe8:	bl	11fb8 <close@plt>
   1fbec:	cmp	r0, #0
   1fbf0:	popeq	{r4, r5, r6, pc}
   1fbf4:	bl	1fadc <__assert_fail@plt+0xdaf4>
   1fbf8:	mov	r0, r5
   1fbfc:	bl	2e970 <__assert_fail@plt+0x1c988>
   1fc00:	mov	r1, r0
   1fc04:	ldr	r0, [pc, #12]	; 1fc18 <__assert_fail@plt+0xdc30>
   1fc08:	bl	1f774 <__assert_fail@plt+0xd78c>
   1fc0c:	andeq	sl, r4, ip, ror r7
   1fc10:	andeq	r0, r0, r1, lsl #8
   1fc14:	andeq	r8, r0, r1, lsl #8
   1fc18:	andeq	r4, r3, r4, asr #21
   1fc1c:	push	{r0, r1, r2, r3}
   1fc20:	push	{r4, lr}
   1fc24:	sub	sp, sp, #8
   1fc28:	ldr	r4, [pc, #60]	; 1fc6c <__assert_fail@plt+0xdc84>
   1fc2c:	add	r3, sp, #20
   1fc30:	mov	r1, r3
   1fc34:	ldr	r2, [r4]
   1fc38:	ldr	r0, [sp, #16]
   1fc3c:	str	r2, [sp, #4]
   1fc40:	str	r3, [sp]
   1fc44:	bl	1eac0 <__assert_fail@plt+0xcad8>
   1fc48:	ldr	r2, [sp, #4]
   1fc4c:	ldr	r3, [r4]
   1fc50:	cmp	r2, r3
   1fc54:	bne	1fc68 <__assert_fail@plt+0xdc80>
   1fc58:	add	sp, sp, #8
   1fc5c:	pop	{r4, lr}
   1fc60:	add	sp, sp, #16
   1fc64:	bx	lr
   1fc68:	bl	11b50 <__stack_chk_fail@plt>
   1fc6c:	andeq	r7, r4, r8, lsl #30
   1fc70:	ldr	ip, [pc, #428]	; 1fe24 <__assert_fail@plt+0xde3c>
   1fc74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc78:	sub	sp, sp, #12
   1fc7c:	mov	r9, r0
   1fc80:	ldr	r0, [ip]
   1fc84:	ldr	r5, [sp, #48]	; 0x30
   1fc88:	tst	r0, #4
   1fc8c:	mov	r7, r1
   1fc90:	mov	r6, r2
   1fc94:	mov	r8, r3
   1fc98:	and	r4, r5, #61440	; 0xf000
   1fc9c:	ldrb	fp, [sp, #52]	; 0x34
   1fca0:	beq	1fce4 <__assert_fail@plt+0xdcfc>
   1fca4:	ldr	r3, [pc, #380]	; 1fe28 <__assert_fail@plt+0xde40>
   1fca8:	cmp	r4, #40960	; 0xa000
   1fcac:	mov	r1, r9
   1fcb0:	mov	r0, #0
   1fcb4:	ldr	sl, [pc, #368]	; 1fe2c <__assert_fail@plt+0xde44>
   1fcb8:	movne	sl, r3
   1fcbc:	bl	2e954 <__assert_fail@plt+0x1c96c>
   1fcc0:	mov	r1, r7
   1fcc4:	str	r0, [sp, #4]
   1fcc8:	mov	r0, #1
   1fccc:	bl	2e954 <__assert_fail@plt+0x1c96c>
   1fcd0:	ldr	r2, [sp, #4]
   1fcd4:	mov	r1, sl
   1fcd8:	mov	r3, r0
   1fcdc:	ldr	r0, [pc, #332]	; 1fe30 <__assert_fail@plt+0xde48>
   1fce0:	bl	1fc1c <__assert_fail@plt+0xdc34>
   1fce4:	cmp	r4, #40960	; 0xa000
   1fce8:	beq	1fd60 <__assert_fail@plt+0xdd78>
   1fcec:	cmp	r4, #32768	; 0x8000
   1fcf0:	bne	1fde0 <__assert_fail@plt+0xddf8>
   1fcf4:	ldr	r3, [pc, #312]	; 1fe34 <__assert_fail@plt+0xde4c>
   1fcf8:	mov	r2, r5
   1fcfc:	mov	r0, r7
   1fd00:	ldrb	r3, [r3]
   1fd04:	cmp	r3, #0
   1fd08:	orreq	r8, r8, #32768	; 0x8000
   1fd0c:	mov	r3, fp
   1fd10:	orr	r1, r8, #1
   1fd14:	bl	1fa50 <__assert_fail@plt+0xda68>
   1fd18:	mov	r1, r0
   1fd1c:	mov	r4, r0
   1fd20:	mov	r0, r9
   1fd24:	bl	1faec <__assert_fail@plt+0xdb04>
   1fd28:	cmp	r6, #0
   1fd2c:	beq	1fd48 <__assert_fail@plt+0xdd60>
   1fd30:	mov	r2, r6
   1fd34:	mov	r1, r4
   1fd38:	mov	r0, #3
   1fd3c:	bl	11bec <__fxstat64@plt>
   1fd40:	cmp	r0, #0
   1fd44:	bne	1fdf4 <__assert_fail@plt+0xde0c>
   1fd48:	mov	r0, r4
   1fd4c:	bl	11fb8 <close@plt>
   1fd50:	cmp	r0, #0
   1fd54:	bne	1fddc <__assert_fail@plt+0xddf4>
   1fd58:	add	sp, sp, #12
   1fd5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd60:	ldr	r0, [pc, #208]	; 1fe38 <__assert_fail@plt+0xde50>
   1fd64:	bl	2f2ec <renameat2@@Base+0x5d8>
   1fd68:	mov	r2, #4096	; 0x1000
   1fd6c:	mov	r1, r0
   1fd70:	mov	r4, r0
   1fd74:	mov	r0, r9
   1fd78:	bl	1e764 <__assert_fail@plt+0xc77c>
   1fd7c:	cmp	r0, #0
   1fd80:	blt	1fe04 <__assert_fail@plt+0xde1c>
   1fd84:	mov	r3, #0
   1fd88:	strb	r3, [r4, r0]
   1fd8c:	mov	r1, r7
   1fd90:	mov	r0, r4
   1fd94:	bl	1e554 <__assert_fail@plt+0xc56c>
   1fd98:	cmp	r0, #0
   1fd9c:	bne	1fe14 <__assert_fail@plt+0xde2c>
   1fda0:	cmp	r6, #0
   1fda4:	beq	1fdbc <__assert_fail@plt+0xddd4>
   1fda8:	mov	r1, r6
   1fdac:	mov	r0, r7
   1fdb0:	bl	1e27c <__assert_fail@plt+0xc294>
   1fdb4:	cmp	r0, #0
   1fdb8:	bne	1fdcc <__assert_fail@plt+0xdde4>
   1fdbc:	mov	r0, r4
   1fdc0:	add	sp, sp, #12
   1fdc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fdc8:	b	11ab4 <free@plt>
   1fdcc:	mov	r2, r7
   1fdd0:	ldr	r1, [pc, #84]	; 1fe2c <__assert_fail@plt+0xde44>
   1fdd4:	ldr	r0, [pc, #96]	; 1fe3c <__assert_fail@plt+0xde54>
   1fdd8:	bl	1f774 <__assert_fail@plt+0xd78c>
   1fddc:	bl	1fadc <__assert_fail@plt+0xdaf4>
   1fde0:	ldr	r3, [pc, #88]	; 1fe40 <__assert_fail@plt+0xde58>
   1fde4:	ldr	r2, [pc, #88]	; 1fe44 <__assert_fail@plt+0xde5c>
   1fde8:	ldr	r1, [pc, #88]	; 1fe48 <__assert_fail@plt+0xde60>
   1fdec:	ldr	r0, [pc, #88]	; 1fe4c <__assert_fail@plt+0xde64>
   1fdf0:	bl	11fe8 <__assert_fail@plt>
   1fdf4:	mov	r2, r7
   1fdf8:	ldr	r1, [pc, #40]	; 1fe28 <__assert_fail@plt+0xde40>
   1fdfc:	ldr	r0, [pc, #56]	; 1fe3c <__assert_fail@plt+0xde54>
   1fe00:	bl	1f774 <__assert_fail@plt+0xd78c>
   1fe04:	mov	r2, r9
   1fe08:	ldr	r1, [pc, #28]	; 1fe2c <__assert_fail@plt+0xde44>
   1fe0c:	ldr	r0, [pc, #60]	; 1fe50 <__assert_fail@plt+0xde68>
   1fe10:	bl	1f774 <__assert_fail@plt+0xd78c>
   1fe14:	mov	r2, r7
   1fe18:	ldr	r1, [pc, #12]	; 1fe2c <__assert_fail@plt+0xde44>
   1fe1c:	ldr	r0, [pc, #48]	; 1fe54 <__assert_fail@plt+0xde6c>
   1fe20:	bl	1f774 <__assert_fail@plt+0xd78c>
   1fe24:	ldrdeq	sl, [r4], -r8
   1fe28:	andeq	r2, r3, r0, asr #2
   1fe2c:	muleq	r3, r0, r0
   1fe30:	ldrdeq	r4, [r3], -ip
   1fe34:	andeq	sl, r4, ip, ror r7
   1fe38:	andeq	r1, r0, r1
   1fe3c:	andeq	r2, r3, ip, lsl #15
   1fe40:	andeq	r4, r3, r4, lsr r9
   1fe44:	andeq	r0, r0, fp, ror r2
   1fe48:	andeq	r4, r3, r8, asr r9
   1fe4c:	andeq	r4, r3, ip, lsl fp
   1fe50:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1fe54:	andeq	r4, r3, r8, lsl #22
   1fe58:	push	{r4, r5, r6, lr}
   1fe5c:	sub	sp, sp, #8
   1fe60:	mov	r4, r2
   1fe64:	str	r3, [sp, #4]
   1fe68:	ldr	r2, [r2, #16]
   1fe6c:	mov	r3, #0
   1fe70:	str	r2, [sp]
   1fe74:	mov	r2, r3
   1fe78:	mov	r6, r0
   1fe7c:	mov	r5, r1
   1fe80:	bl	1fc70 <__assert_fail@plt+0xdc88>
   1fe84:	ldr	r3, [r4, #16]
   1fe88:	mov	r1, #0
   1fe8c:	str	r3, [sp]
   1fe90:	str	r1, [sp, #4]
   1fe94:	mov	r2, r6
   1fe98:	mov	r0, r5
   1fe9c:	mov	r3, r4
   1fea0:	mov	r1, #7
   1fea4:	bl	1f80c <__assert_fail@plt+0xd824>
   1fea8:	add	sp, sp, #8
   1feac:	pop	{r4, r5, r6, pc}
   1feb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1feb4:	sub	sp, sp, #36	; 0x24
   1feb8:	subs	sl, r1, #0
   1febc:	mov	r6, r0
   1fec0:	str	r2, [sp, #16]
   1fec4:	beq	1fef4 <__assert_fail@plt+0xdf0c>
   1fec8:	ldr	r3, [sl, #16]
   1fecc:	and	r3, r3, #53248	; 0xd000
   1fed0:	cmp	r3, #32768	; 0x8000
   1fed4:	bne	20340 <__assert_fail@plt+0xe358>
   1fed8:	mov	r0, sl
   1fedc:	bl	1e8b8 <__assert_fail@plt+0xc8d0>
   1fee0:	cmp	r0, #0
   1fee4:	beq	1fef4 <__assert_fail@plt+0xdf0c>
   1fee8:	ldr	r3, [r0, #16]
   1feec:	cmp	r3, #1
   1fef0:	beq	20234 <__assert_fail@plt+0xe24c>
   1fef4:	ldr	r2, [pc, #1152]	; 2037c <__assert_fail@plt+0xe394>
   1fef8:	ldr	r3, [pc, #1152]	; 20380 <__assert_fail@plt+0xe398>
   1fefc:	ldr	r9, [r2]
   1ff00:	ldr	r2, [pc, #1148]	; 20384 <__assert_fail@plt+0xe39c>
   1ff04:	ldr	r3, [r3]
   1ff08:	cmp	r9, #0
   1ff0c:	ldr	fp, [r2]
   1ff10:	str	r3, [sp]
   1ff14:	beq	201c4 <__assert_fail@plt+0xe1dc>
   1ff18:	mov	r0, r9
   1ff1c:	bl	11d78 <strlen@plt>
   1ff20:	cmp	fp, #0
   1ff24:	str	r0, [sp, #4]
   1ff28:	beq	20228 <__assert_fail@plt+0xe240>
   1ff2c:	mov	r0, fp
   1ff30:	bl	11d78 <strlen@plt>
   1ff34:	str	r0, [sp, #8]
   1ff38:	ldr	r3, [sp]
   1ff3c:	cmp	r3, #0
   1ff40:	beq	201ec <__assert_fail@plt+0xe204>
   1ff44:	ldr	r0, [sp]
   1ff48:	bl	11d78 <strlen@plt>
   1ff4c:	add	r3, r0, #1
   1ff50:	str	r3, [sp, #12]
   1ff54:	mov	r0, r6
   1ff58:	bl	11d78 <strlen@plt>
   1ff5c:	add	r7, r6, r0
   1ff60:	cmp	r6, r7
   1ff64:	mov	r8, r0
   1ff68:	bcs	202e8 <__assert_fail@plt+0xe300>
   1ff6c:	ldrb	r3, [r7, #-1]
   1ff70:	cmp	r3, #47	; 0x2f
   1ff74:	beq	202e8 <__assert_fail@plt+0xe300>
   1ff78:	sub	r3, r7, #1
   1ff7c:	b	1ff90 <__assert_fail@plt+0xdfa8>
   1ff80:	ldrb	r2, [r3, #-1]
   1ff84:	sub	r3, r3, #1
   1ff88:	cmp	r2, #47	; 0x2f
   1ff8c:	beq	2013c <__assert_fail@plt+0xe154>
   1ff90:	cmp	r6, r3
   1ff94:	mov	r4, r3
   1ff98:	bne	1ff80 <__assert_fail@plt+0xdf98>
   1ff9c:	sub	r7, r7, r6
   1ffa0:	sub	r8, r8, r7
   1ffa4:	ldr	r3, [sp, #4]
   1ffa8:	ldr	r2, [sp, #8]
   1ffac:	add	r3, r3, r8
   1ffb0:	add	r1, r3, r2
   1ffb4:	ldr	ip, [sp, #12]
   1ffb8:	add	r0, r1, r7
   1ffbc:	str	r0, [sp, #24]
   1ffc0:	add	r0, r0, ip
   1ffc4:	str	r3, [sp, #28]
   1ffc8:	str	r1, [sp, #20]
   1ffcc:	bl	2f2ec <renameat2@@Base+0x5d8>
   1ffd0:	ldr	r2, [sp, #4]
   1ffd4:	mov	r1, r9
   1ffd8:	mov	r5, r0
   1ffdc:	bl	11afc <memcpy@plt>
   1ffe0:	ldr	r3, [sp, #4]
   1ffe4:	mov	r2, r8
   1ffe8:	mov	r1, r6
   1ffec:	add	r0, r5, r3
   1fff0:	bl	11afc <memcpy@plt>
   1fff4:	ldr	r3, [sp, #28]
   1fff8:	ldr	r2, [sp, #8]
   1fffc:	mov	r1, fp
   20000:	add	r0, r5, r3
   20004:	bl	11afc <memcpy@plt>
   20008:	ldr	r3, [sp, #20]
   2000c:	mov	r2, r7
   20010:	add	r0, r5, r3
   20014:	mov	r1, r4
   20018:	bl	11afc <memcpy@plt>
   2001c:	ldr	r0, [sp, #24]
   20020:	ldr	r2, [sp, #12]
   20024:	ldr	r1, [sp]
   20028:	add	r0, r5, r0
   2002c:	bl	11afc <memcpy@plt>
   20030:	ldr	r3, [pc, #836]	; 2037c <__assert_fail@plt+0xe394>
   20034:	ldr	r2, [r3]
   20038:	cmp	r2, #0
   2003c:	beq	20100 <__assert_fail@plt+0xe118>
   20040:	ldrb	r3, [r2]
   20044:	cmp	r3, #0
   20048:	bne	2005c <__assert_fail@plt+0xe074>
   2004c:	b	200d0 <__assert_fail@plt+0xe0e8>
   20050:	ldrb	r3, [r2, #1]!
   20054:	cmp	r3, #0
   20058:	beq	200d0 <__assert_fail@plt+0xe0e8>
   2005c:	cmp	r3, #47	; 0x2f
   20060:	bne	20050 <__assert_fail@plt+0xe068>
   20064:	mov	r4, #2
   20068:	cmp	sl, #0
   2006c:	beq	20148 <__assert_fail@plt+0xe160>
   20070:	ldr	r3, [sp, #16]
   20074:	cmp	r3, #0
   20078:	bne	20200 <__assert_fail@plt+0xe218>
   2007c:	ldr	r3, [pc, #772]	; 20388 <__assert_fail@plt+0xe3a0>
   20080:	ldr	r3, [r3]
   20084:	tst	r3, #4
   20088:	beq	200ac <__assert_fail@plt+0xe0c4>
   2008c:	b	202b8 <__assert_fail@plt+0xe2d0>
   20090:	bl	11dc0 <__errno_location@plt>
   20094:	ldr	r3, [r0]
   20098:	cmp	r3, r4
   2009c:	bne	20280 <__assert_fail@plt+0xe298>
   200a0:	mov	r0, r5
   200a4:	bl	1e910 <__assert_fail@plt+0xc928>
   200a8:	mov	r4, #0
   200ac:	mov	r1, r5
   200b0:	mov	r0, r6
   200b4:	bl	1e300 <__assert_fail@plt+0xc318>
   200b8:	cmp	r0, #0
   200bc:	bne	20090 <__assert_fail@plt+0xe0a8>
   200c0:	mov	r0, r5
   200c4:	add	sp, sp, #36	; 0x24
   200c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200cc:	b	11ab4 <free@plt>
   200d0:	ldrb	r3, [r6]
   200d4:	cmp	r3, #0
   200d8:	beq	20100 <__assert_fail@plt+0xe118>
   200dc:	cmp	r3, #47	; 0x2f
   200e0:	beq	20064 <__assert_fail@plt+0xe07c>
   200e4:	mov	r2, r6
   200e8:	b	200f4 <__assert_fail@plt+0xe10c>
   200ec:	cmp	r3, #47	; 0x2f
   200f0:	beq	20064 <__assert_fail@plt+0xe07c>
   200f4:	ldrb	r3, [r2, #1]!
   200f8:	cmp	r3, #0
   200fc:	bne	200ec <__assert_fail@plt+0xe104>
   20100:	ldr	r3, [pc, #636]	; 20384 <__assert_fail@plt+0xe39c>
   20104:	ldr	r3, [r3]
   20108:	cmp	r3, #0
   2010c:	moveq	r4, r3
   20110:	beq	20068 <__assert_fail@plt+0xe080>
   20114:	ldrb	r4, [r3]
   20118:	cmp	r4, #0
   2011c:	bne	20130 <__assert_fail@plt+0xe148>
   20120:	b	20068 <__assert_fail@plt+0xe080>
   20124:	ldrb	r4, [r3, #1]!
   20128:	cmp	r4, #0
   2012c:	beq	20068 <__assert_fail@plt+0xe080>
   20130:	cmp	r4, #47	; 0x2f
   20134:	bne	20124 <__assert_fail@plt+0xe13c>
   20138:	b	20064 <__assert_fail@plt+0xe07c>
   2013c:	sub	r7, r7, r4
   20140:	sub	r8, r8, r7
   20144:	b	1ffa4 <__assert_fail@plt+0xdfbc>
   20148:	ldr	r3, [pc, #568]	; 20388 <__assert_fail@plt+0xe3a0>
   2014c:	ldr	r3, [r3]
   20150:	tst	r3, #4
   20154:	bne	2024c <__assert_fail@plt+0xe264>
   20158:	mov	r0, r5
   2015c:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   20160:	mov	r4, #2
   20164:	ldr	r7, [pc, #544]	; 2038c <__assert_fail@plt+0xe3a4>
   20168:	ldr	r6, [pc, #544]	; 20390 <__assert_fail@plt+0xe3a8>
   2016c:	b	2018c <__assert_fail@plt+0xe1a4>
   20170:	bl	11dc0 <__errno_location@plt>
   20174:	ldr	r3, [r0]
   20178:	mov	r0, r5
   2017c:	cmp	r3, r4
   20180:	bne	20330 <__assert_fail@plt+0xe348>
   20184:	bl	1e910 <__assert_fail@plt+0xc928>
   20188:	mov	r4, #0
   2018c:	mov	r2, r7
   20190:	mov	r1, r6
   20194:	mov	r0, r5
   20198:	bl	1e284 <__assert_fail@plt+0xc29c>
   2019c:	cmp	r0, #0
   201a0:	blt	20170 <__assert_fail@plt+0xe188>
   201a4:	bl	11fb8 <close@plt>
   201a8:	cmp	r0, #0
   201ac:	beq	200c0 <__assert_fail@plt+0xe0d8>
   201b0:	mov	r0, r5
   201b4:	bl	2e970 <__assert_fail@plt+0x1c988>
   201b8:	mov	r1, r0
   201bc:	ldr	r0, [pc, #464]	; 20394 <__assert_fail@plt+0xe3ac>
   201c0:	bl	1f774 <__assert_fail@plt+0xd78c>
   201c4:	cmp	fp, #0
   201c8:	beq	20264 <__assert_fail@plt+0xe27c>
   201cc:	mov	r0, fp
   201d0:	str	r9, [sp, #4]
   201d4:	bl	11d78 <strlen@plt>
   201d8:	ldr	r3, [sp]
   201dc:	ldr	r9, [pc, #436]	; 20398 <__assert_fail@plt+0xe3b0>
   201e0:	cmp	r3, #0
   201e4:	str	r0, [sp, #8]
   201e8:	bne	1ff44 <__assert_fail@plt+0xdf5c>
   201ec:	ldr	r3, [pc, #420]	; 20398 <__assert_fail@plt+0xe3b0>
   201f0:	str	r3, [sp]
   201f4:	mov	r3, #1
   201f8:	str	r3, [sp, #12]
   201fc:	b	1ff54 <__assert_fail@plt+0xdf6c>
   20200:	mov	r0, r6
   20204:	clz	r3, r4
   20208:	mov	r2, sl
   2020c:	lsr	r3, r3, #5
   20210:	mov	r1, r5
   20214:	bl	1fe58 <__assert_fail@plt+0xde70>
   20218:	mov	r0, r5
   2021c:	add	sp, sp, #36	; 0x24
   20220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20224:	b	11ab4 <free@plt>
   20228:	str	fp, [sp, #8]
   2022c:	ldr	fp, [pc, #356]	; 20398 <__assert_fail@plt+0xe3b0>
   20230:	b	1ff38 <__assert_fail@plt+0xdf50>
   20234:	ldr	r3, [pc, #332]	; 20388 <__assert_fail@plt+0xe3a0>
   20238:	ldr	r3, [r3]
   2023c:	tst	r3, #4
   20240:	bne	202f4 <__assert_fail@plt+0xe30c>
   20244:	add	sp, sp, #36	; 0x24
   20248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2024c:	mov	r0, r5
   20250:	bl	2e970 <__assert_fail@plt+0x1c988>
   20254:	mov	r1, r0
   20258:	ldr	r0, [pc, #316]	; 2039c <__assert_fail@plt+0xe3b4>
   2025c:	bl	1fc1c <__assert_fail@plt+0xdc34>
   20260:	b	20158 <__assert_fail@plt+0xe170>
   20264:	cmp	r3, #0
   20268:	beq	20310 <__assert_fail@plt+0xe328>
   2026c:	ldr	r9, [pc, #292]	; 20398 <__assert_fail@plt+0xe3b0>
   20270:	str	fp, [sp, #4]
   20274:	str	fp, [sp, #8]
   20278:	mov	fp, r9
   2027c:	b	1ff44 <__assert_fail@plt+0xdf5c>
   20280:	cmp	r3, #18
   20284:	bne	20350 <__assert_fail@plt+0xe368>
   20288:	mov	r2, sl
   2028c:	mov	r1, r5
   20290:	mov	r0, r6
   20294:	clz	r3, r4
   20298:	lsr	r3, r3, #5
   2029c:	bl	1fe58 <__assert_fail@plt+0xde70>
   202a0:	mov	r0, r6
   202a4:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   202a8:	mov	r0, r5
   202ac:	add	sp, sp, #36	; 0x24
   202b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202b4:	b	11ab4 <free@plt>
   202b8:	mov	r1, r6
   202bc:	ldr	r0, [sp, #16]
   202c0:	bl	2e954 <__assert_fail@plt+0x1c96c>
   202c4:	mov	r1, r5
   202c8:	mov	r7, r0
   202cc:	mov	r0, #1
   202d0:	bl	2e954 <__assert_fail@plt+0x1c96c>
   202d4:	mov	r1, r7
   202d8:	mov	r2, r0
   202dc:	ldr	r0, [pc, #188]	; 203a0 <__assert_fail@plt+0xe3b8>
   202e0:	bl	1fc1c <__assert_fail@plt+0xdc34>
   202e4:	b	200ac <__assert_fail@plt+0xe0c4>
   202e8:	mov	r4, r7
   202ec:	mov	r7, #0
   202f0:	b	1ffa4 <__assert_fail@plt+0xdfbc>
   202f4:	mov	r0, r6
   202f8:	bl	2e970 <__assert_fail@plt+0x1c988>
   202fc:	mov	r1, r0
   20300:	ldr	r0, [pc, #156]	; 203a4 <__assert_fail@plt+0xe3bc>
   20304:	add	sp, sp, #36	; 0x24
   20308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2030c:	b	1fc1c <__assert_fail@plt+0xdc34>
   20310:	ldr	r3, [pc, #144]	; 203a8 <__assert_fail@plt+0xe3c0>
   20314:	mov	r0, r6
   20318:	ldr	r1, [r3]
   2031c:	bl	250c0 <__assert_fail@plt+0x130d8>
   20320:	subs	r5, r0, #0
   20324:	ldrne	r4, [sp]
   20328:	bne	20068 <__assert_fail@plt+0xe080>
   2032c:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   20330:	bl	2e970 <__assert_fail@plt+0x1c988>
   20334:	mov	r1, r0
   20338:	ldr	r0, [pc, #108]	; 203ac <__assert_fail@plt+0xe3c4>
   2033c:	bl	1f774 <__assert_fail@plt+0xd78c>
   20340:	mov	r1, r0
   20344:	ldr	r2, [pc, #100]	; 203b0 <__assert_fail@plt+0xe3c8>
   20348:	ldr	r0, [pc, #100]	; 203b4 <__assert_fail@plt+0xe3cc>
   2034c:	bl	1f558 <__assert_fail@plt+0xd570>
   20350:	mov	r1, r6
   20354:	mov	r0, #0
   20358:	bl	2e954 <__assert_fail@plt+0x1c96c>
   2035c:	mov	r1, r5
   20360:	mov	r4, r0
   20364:	mov	r0, #1
   20368:	bl	2e954 <__assert_fail@plt+0x1c96c>
   2036c:	mov	r1, r4
   20370:	mov	r2, r0
   20374:	ldr	r0, [pc, #60]	; 203b8 <__assert_fail@plt+0xe3d0>
   20378:	bl	1f774 <__assert_fail@plt+0xd78c>
   2037c:	andeq	sl, r4, ip, ror #13
   20380:	andeq	sl, r4, ip, asr #13
   20384:	andeq	sl, r4, ip, ror #14
   20388:	ldrdeq	sl, [r4], -r8
   2038c:			; <UNDEFINED> instruction: 0x000001b6
   20390:	andeq	r0, r0, r1, asr #5
   20394:	muleq	r3, r0, fp
   20398:	strdeq	r5, [r3], -r8
   2039c:	andeq	r4, r3, r8, ror fp
   203a0:	andeq	r4, r3, r4, lsr #23
   203a4:	andeq	r4, r3, r0, ror #22
   203a8:	andeq	sl, r4, r8, lsr r8
   203ac:	andeq	r2, r3, r8, ror #21
   203b0:	andeq	r2, r3, r8, lsr r1
   203b4:	andeq	r4, r3, ip, lsr #22
   203b8:			; <UNDEFINED> instruction: 0x00034bbc
   203bc:	push	{r0, r1, r2, r3}
   203c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   203c4:	sub	sp, sp, #12
   203c8:	ldr	r7, [pc, #420]	; 20574 <__assert_fail@plt+0xe58c>
   203cc:	ldr	r4, [pc, #420]	; 20578 <__assert_fail@plt+0xe590>
   203d0:	add	r1, sp, #44	; 0x2c
   203d4:	ldr	r2, [r7]
   203d8:	ldr	r6, [pc, #412]	; 2057c <__assert_fail@plt+0xe594>
   203dc:	mov	r3, r1
   203e0:	str	r2, [sp, #4]
   203e4:	str	r1, [sp]
   203e8:	ldr	r2, [sp, #40]	; 0x28
   203ec:	mov	r1, #1
   203f0:	ldr	r0, [r4]
   203f4:	bl	11cf4 <__vfprintf_chk@plt>
   203f8:	ldr	r0, [r4]
   203fc:	bl	11a84 <fflush@plt>
   20400:	ldr	r0, [r6, #8]
   20404:	cmn	r0, #2
   20408:	beq	204d8 <__assert_fail@plt+0xe4f0>
   2040c:	cmp	r0, #0
   20410:	blt	20500 <__assert_fail@plt+0xe518>
   20414:	ldr	r5, [pc, #356]	; 20580 <__assert_fail@plt+0xe598>
   20418:	ldr	r8, [pc, #356]	; 20584 <__assert_fail@plt+0xe59c>
   2041c:	mov	r4, #0
   20420:	ldr	r1, [r5]
   20424:	b	20468 <__assert_fail@plt+0xe480>
   20428:	ldr	r2, [r5]
   2042c:	add	r3, r2, r1
   20430:	ldrb	r3, [r3, #-2]
   20434:	cmp	r3, #10
   20438:	beq	20490 <__assert_fail@plt+0xe4a8>
   2043c:	lsl	r3, r1, #1
   20440:	mov	r1, r3
   20444:	mov	r0, r2
   20448:	str	r3, [r8]
   2044c:	bl	11b80 <realloc@plt>
   20450:	cmp	r0, #0
   20454:	mov	r1, r0
   20458:	str	r0, [r5]
   2045c:	beq	2056c <__assert_fail@plt+0xe584>
   20460:	ldr	r0, [r6, #8]
   20464:	mov	r4, r9
   20468:	ldr	r2, [r8]
   2046c:	add	r1, r1, r4
   20470:	sub	r2, r2, #1
   20474:	sub	r2, r2, r4
   20478:	bl	11a6c <read@plt>
   2047c:	ldr	r1, [r8]
   20480:	sub	r9, r1, #1
   20484:	sub	r3, r9, r4
   20488:	cmp	r0, r3
   2048c:	beq	20428 <__assert_fail@plt+0xe440>
   20490:	cmp	r0, #0
   20494:	beq	204cc <__assert_fail@plt+0xe4e4>
   20498:	addge	r4, r4, r0
   2049c:	blt	20544 <__assert_fail@plt+0xe55c>
   204a0:	ldr	r3, [r5]
   204a4:	mov	r2, #0
   204a8:	strb	r2, [r3, r4]
   204ac:	ldr	r2, [sp, #4]
   204b0:	ldr	r3, [r7]
   204b4:	cmp	r2, r3
   204b8:	bne	20570 <__assert_fail@plt+0xe588>
   204bc:	add	sp, sp, #12
   204c0:	pop	{r4, r5, r6, r7, r8, r9, lr}
   204c4:	add	sp, sp, #16
   204c8:	bx	lr
   204cc:	ldr	r0, [pc, #180]	; 20588 <__assert_fail@plt+0xe5a0>
   204d0:	bl	11ca0 <puts@plt>
   204d4:	b	204a0 <__assert_fail@plt+0xe4b8>
   204d8:	ldr	r3, [pc, #172]	; 2058c <__assert_fail@plt+0xe5a4>
   204dc:	ldrb	r3, [r3]
   204e0:	cmp	r3, #0
   204e4:	beq	20528 <__assert_fail@plt+0xe540>
   204e8:	mov	r1, #0
   204ec:	ldr	r0, [pc, #156]	; 20590 <__assert_fail@plt+0xe5a8>
   204f0:	bl	11c88 <open64@plt>
   204f4:	cmp	r0, #0
   204f8:	str	r0, [r6, #8]
   204fc:	bge	20414 <__assert_fail@plt+0xe42c>
   20500:	mov	r0, #10
   20504:	bl	11dfc <putchar@plt>
   20508:	ldr	r3, [pc, #112]	; 20580 <__assert_fail@plt+0xe598>
   2050c:	mov	r0, #10
   20510:	mov	r2, #0
   20514:	ldr	r1, [r3]
   20518:	strb	r0, [r1]
   2051c:	ldr	r3, [r3]
   20520:	strb	r2, [r3, #1]
   20524:	b	204ac <__assert_fail@plt+0xe4c4>
   20528:	mov	r0, #1
   2052c:	bl	11f70 <isatty@plt>
   20530:	cmp	r0, #0
   20534:	mvneq	r3, #0
   20538:	streq	r3, [r6, #8]
   2053c:	beq	20500 <__assert_fail@plt+0xe518>
   20540:	b	204e8 <__assert_fail@plt+0xe500>
   20544:	bl	11dc0 <__errno_location@plt>
   20548:	ldr	r2, [pc, #68]	; 20594 <__assert_fail@plt+0xe5ac>
   2054c:	ldr	r1, [r0]
   20550:	mov	r0, #0
   20554:	bl	11c70 <error@plt>
   20558:	ldr	r0, [r6, #8]
   2055c:	bl	11fb8 <close@plt>
   20560:	mvn	r3, #0
   20564:	str	r3, [r6, #8]
   20568:	b	204a0 <__assert_fail@plt+0xe4b8>
   2056c:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   20570:	bl	11b50 <__stack_chk_fail@plt>
   20574:	andeq	r7, r4, r8, lsl #30
   20578:	andeq	r8, r4, r4, lsl #6
   2057c:	muleq	r4, r0, r2
   20580:	andeq	sl, r4, r0, ror r7
   20584:	andeq	sl, r4, r4, lsr #15
   20588:	andeq	r4, r3, r4, ror #23
   2058c:	andeq	sl, r4, r9, ror #14
   20590:	ldrdeq	r4, [r3], -r8
   20594:	andeq	r4, r3, r8, ror #23
   20598:	push	{r0, r1, r2, r3}
   2059c:	push	{r4, r5, r6, lr}
   205a0:	sub	sp, sp, #8
   205a4:	ldr	r5, [pc, #368]	; 2071c <__assert_fail@plt+0xe734>
   205a8:	ldr	r4, [pc, #368]	; 20720 <__assert_fail@plt+0xe738>
   205ac:	ldr	r0, [sp, #24]
   205b0:	ldrb	r2, [r5]
   205b4:	ldr	r3, [r4]
   205b8:	cmp	r2, #0
   205bc:	str	r3, [sp, #4]
   205c0:	bne	205d4 <__assert_fail@plt+0xe5ec>
   205c4:	ldr	r3, [pc, #344]	; 20724 <__assert_fail@plt+0xe73c>
   205c8:	ldrb	r3, [r3]
   205cc:	cmp	r3, #0
   205d0:	bne	206a0 <__assert_fail@plt+0xe6b8>
   205d4:	add	r3, sp, #28
   205d8:	mov	r1, r3
   205dc:	str	r3, [sp]
   205e0:	bl	1eac0 <__assert_fail@plt+0xcad8>
   205e4:	ldrb	r3, [r5]
   205e8:	cmp	r3, #0
   205ec:	bne	206d8 <__assert_fail@plt+0xe6f0>
   205f0:	ldr	r3, [pc, #300]	; 20724 <__assert_fail@plt+0xe73c>
   205f4:	ldrb	r3, [r3]
   205f8:	cmp	r3, #0
   205fc:	bne	206b4 <__assert_fail@plt+0xe6cc>
   20600:	ldr	r2, [pc, #288]	; 20728 <__assert_fail@plt+0xe740>
   20604:	ldr	r3, [pc, #288]	; 2072c <__assert_fail@plt+0xe744>
   20608:	ldrb	r5, [r2]
   2060c:	ldrb	r3, [r3]
   20610:	cmp	r5, #0
   20614:	bne	206f4 <__assert_fail@plt+0xe70c>
   20618:	ldr	r2, [pc, #272]	; 20730 <__assert_fail@plt+0xe748>
   2061c:	ldr	r6, [pc, #272]	; 20734 <__assert_fail@plt+0xe74c>
   20620:	cmp	r3, #0
   20624:	ldr	r0, [pc, #268]	; 20738 <__assert_fail@plt+0xe750>
   20628:	moveq	r0, r2
   2062c:	bl	203bc <__assert_fail@plt+0xe3d4>
   20630:	ldr	r3, [r6]
   20634:	ldrb	r3, [r3]
   20638:	cmp	r3, #121	; 0x79
   2063c:	moveq	r5, #1
   20640:	movne	r5, #0
   20644:	beq	2067c <__assert_fail@plt+0xe694>
   20648:	ldr	r0, [pc, #236]	; 2073c <__assert_fail@plt+0xe754>
   2064c:	bl	203bc <__assert_fail@plt+0xe3d4>
   20650:	ldr	r3, [r6]
   20654:	ldrb	r3, [r3]
   20658:	cmp	r3, #121	; 0x79
   2065c:	beq	2067c <__assert_fail@plt+0xe694>
   20660:	ldr	r3, [pc, #216]	; 20740 <__assert_fail@plt+0xe758>
   20664:	ldr	r3, [r3]
   20668:	cmp	r3, #1
   2066c:	bne	2070c <__assert_fail@plt+0xe724>
   20670:	ldr	r3, [pc, #204]	; 20744 <__assert_fail@plt+0xe75c>
   20674:	mov	r2, #1
   20678:	strb	r2, [r3]
   2067c:	ldr	r2, [sp, #4]
   20680:	ldr	r3, [r4]
   20684:	mov	r0, r5
   20688:	cmp	r2, r3
   2068c:	bne	20718 <__assert_fail@plt+0xe730>
   20690:	add	sp, sp, #8
   20694:	pop	{r4, r5, r6, lr}
   20698:	add	sp, sp, #16
   2069c:	bx	lr
   206a0:	ldr	r3, [pc, #152]	; 20740 <__assert_fail@plt+0xe758>
   206a4:	ldr	r2, [r3]
   206a8:	cmp	r2, #1
   206ac:	bne	205d4 <__assert_fail@plt+0xe5ec>
   206b0:	b	206b8 <__assert_fail@plt+0xe6d0>
   206b4:	ldr	r3, [pc, #132]	; 20740 <__assert_fail@plt+0xe758>
   206b8:	ldr	r3, [r3]
   206bc:	cmp	r3, #1
   206c0:	moveq	r5, #0
   206c4:	beq	2067c <__assert_fail@plt+0xe694>
   206c8:	ldr	r0, [pc, #120]	; 20748 <__assert_fail@plt+0xe760>
   206cc:	bl	1fc1c <__assert_fail@plt+0xdc34>
   206d0:	mov	r5, #0
   206d4:	b	2067c <__assert_fail@plt+0xe694>
   206d8:	ldr	r0, [pc, #108]	; 2074c <__assert_fail@plt+0xe764>
   206dc:	bl	1fc1c <__assert_fail@plt+0xdc34>
   206e0:	ldr	r3, [pc, #92]	; 20744 <__assert_fail@plt+0xe75c>
   206e4:	mov	r2, #1
   206e8:	mov	r5, #0
   206ec:	strb	r2, [r3]
   206f0:	b	2067c <__assert_fail@plt+0xe694>
   206f4:	ldr	r2, [pc, #84]	; 20750 <__assert_fail@plt+0xe768>
   206f8:	cmp	r3, #0
   206fc:	ldr	r0, [pc, #80]	; 20754 <__assert_fail@plt+0xe76c>
   20700:	moveq	r0, r2
   20704:	bl	1fc1c <__assert_fail@plt+0xdc34>
   20708:	b	2067c <__assert_fail@plt+0xe694>
   2070c:	ldr	r0, [pc, #68]	; 20758 <__assert_fail@plt+0xe770>
   20710:	bl	1fc1c <__assert_fail@plt+0xdc34>
   20714:	b	20670 <__assert_fail@plt+0xe688>
   20718:	bl	11b50 <__stack_chk_fail@plt>
   2071c:	muleq	r4, sp, r7
   20720:	andeq	r7, r4, r8, lsl #30
   20724:	strdeq	sl, [r4], -r1
   20728:	andeq	sl, r4, r8, ror #14
   2072c:			; <UNDEFINED> instruction: 0x0004a6b8
   20730:	andeq	r4, r3, ip, lsr #24
   20734:	andeq	sl, r4, r0, ror r7
   20738:	andeq	r4, r3, r8, lsl ip
   2073c:	andeq	r4, r3, ip, ror #24
   20740:			; <UNDEFINED> instruction: 0x0004a6bc
   20744:	ldrdeq	sl, [r4], -ip
   20748:	andeq	r4, r3, r4, asr ip
   2074c:	andeq	r4, r3, r0, asr #24
   20750:	andeq	r4, r3, r8, lsl #24
   20754:	strdeq	r4, [r3], -r8
   20758:	andeq	r2, r3, r8, lsl #29
   2075c:	push	{r4, r5, r6, r7, r8, r9, lr}
   20760:	sub	sp, sp, #292	; 0x124
   20764:	ldr	r8, [pc, #200]	; 20834 <__assert_fail@plt+0xe84c>
   20768:	ldr	r3, [pc, #200]	; 20838 <__assert_fail@plt+0xe850>
   2076c:	mov	r4, r0
   20770:	ldr	r2, [r8]
   20774:	add	r0, sp, #148	; 0x94
   20778:	str	r2, [sp, #284]	; 0x11c
   2077c:	str	r3, [sp, #144]	; 0x90
   20780:	bl	11e8c <sigemptyset@plt>
   20784:	mov	r2, #0
   20788:	cmp	r4, #0
   2078c:	str	r2, [sp, #276]	; 0x114
   20790:	bne	20820 <__assert_fail@plt+0xe838>
   20794:	mov	r1, r4
   20798:	mov	r0, #17
   2079c:	ldr	r4, [pc, #152]	; 2083c <__assert_fail@plt+0xe854>
   207a0:	bl	11b20 <signal@plt>
   207a4:	ldr	r0, [pc, #148]	; 20840 <__assert_fail@plt+0xe858>
   207a8:	bl	11e8c <sigemptyset@plt>
   207ac:	ldr	r9, [pc, #140]	; 20840 <__assert_fail@plt+0xe858>
   207b0:	add	r7, r4, #20
   207b4:	mov	r5, #1
   207b8:	b	207c0 <__assert_fail@plt+0xe7d8>
   207bc:	ldr	r5, [r4], #4
   207c0:	add	r2, sp, #4
   207c4:	mov	r1, #0
   207c8:	mov	r0, r5
   207cc:	bl	11c10 <sigaction@plt>
   207d0:	subs	r6, r0, #0
   207d4:	bne	20800 <__assert_fail@plt+0xe818>
   207d8:	ldr	r3, [sp, #4]
   207dc:	cmp	r3, #1
   207e0:	beq	20800 <__assert_fail@plt+0xe818>
   207e4:	mov	r1, r5
   207e8:	mov	r0, r9
   207ec:	bl	11cb8 <sigaddset@plt>
   207f0:	mov	r2, r6
   207f4:	add	r1, sp, #144	; 0x90
   207f8:	mov	r0, r5
   207fc:	bl	11c10 <sigaction@plt>
   20800:	cmp	r4, r7
   20804:	bne	207bc <__assert_fail@plt+0xe7d4>
   20808:	ldr	r2, [sp, #284]	; 0x11c
   2080c:	ldr	r3, [r8]
   20810:	cmp	r2, r3
   20814:	bne	20830 <__assert_fail@plt+0xe848>
   20818:	add	sp, sp, #292	; 0x124
   2081c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20820:	ldr	r1, [pc, #28]	; 20844 <__assert_fail@plt+0xe85c>
   20824:	mov	r0, #2
   20828:	bl	11a9c <sigprocmask@plt>
   2082c:	b	20808 <__assert_fail@plt+0xe820>
   20830:	bl	11b50 <__stack_chk_fail@plt>
   20834:	andeq	r7, r4, r8, lsl #30
   20838:	andeq	r7, r1, r8, asr #10
   2083c:	andeq	r4, r3, r4, asr #18
   20840:	andeq	sl, r4, r8, asr r4
   20844:	ldrdeq	sl, [r4], -r8
   20848:	ldr	r1, [pc, #12]	; 2085c <__assert_fail@plt+0xe874>
   2084c:	mov	r0, #0
   20850:	add	r2, r1, #136	; 0x88
   20854:	add	r1, r1, #8
   20858:	b	11a9c <sigprocmask@plt>
   2085c:	andeq	sl, r4, r0, asr r4
   20860:	ldr	r3, [pc, #76]	; 208b4 <__assert_fail@plt+0xe8cc>
   20864:	push	{lr}		; (str lr, [sp, #-4]!)
   20868:	sub	sp, sp, #140	; 0x8c
   2086c:	ldr	r3, [r3]
   20870:	mov	r1, #0
   20874:	str	r3, [sp, #132]	; 0x84
   20878:	mov	r4, r0
   2087c:	bl	11b20 <signal@plt>
   20880:	add	r0, sp, #4
   20884:	bl	11e8c <sigemptyset@plt>
   20888:	mov	r1, r4
   2088c:	add	r0, sp, #4
   20890:	bl	11cb8 <sigaddset@plt>
   20894:	add	r1, sp, #4
   20898:	mov	r2, #0
   2089c:	mov	r0, #1
   208a0:	bl	11a9c <sigprocmask@plt>
   208a4:	mov	r0, r4
   208a8:	bl	11a18 <raise@plt>
   208ac:	mov	r0, #2
   208b0:	bl	11d60 <exit@plt>
   208b4:	andeq	r7, r4, r8, lsl #30
   208b8:	ldr	r3, [pc, #56]	; 208f8 <__assert_fail@plt+0xe910>
   208bc:	push	{r4, lr}
   208c0:	mov	r4, r0
   208c4:	ldr	r3, [r3]
   208c8:	tst	r3, #8
   208cc:	bne	208e8 <__assert_fail@plt+0xe900>
   208d0:	ldr	r3, [pc, #36]	; 208fc <__assert_fail@plt+0xe914>
   208d4:	ldr	r0, [r3]
   208d8:	bl	11a84 <fflush@plt>
   208dc:	mov	r0, r4
   208e0:	pop	{r4, lr}
   208e4:	b	11cdc <system@plt>
   208e8:	mov	r1, r0
   208ec:	ldr	r0, [pc, #12]	; 20900 <__assert_fail@plt+0xe918>
   208f0:	bl	1fc1c <__assert_fail@plt+0xdc34>
   208f4:	b	208d0 <__assert_fail@plt+0xe8e8>
   208f8:	ldrdeq	sl, [r4], -r8
   208fc:	andeq	r8, r4, r4, lsl #6
   20900:	andeq	r4, r3, r0, lsl #25
   20904:	ldr	ip, [pc, #288]	; 20a2c <__assert_fail@plt+0xea44>
   20908:	push	{r4, r5, r6, r7, r8, lr}
   2090c:	mov	r5, r2
   20910:	ldr	r2, [ip]
   20914:	mov	r6, r1
   20918:	cmp	r2, #0
   2091c:	mov	r7, r3
   20920:	mov	r4, r0
   20924:	blt	20994 <__assert_fail@plt+0xe9ac>
   20928:	ldr	r3, [pc, #256]	; 20a30 <__assert_fail@plt+0xea48>
   2092c:	ldrb	r3, [r3]
   20930:	cmp	r3, #0
   20934:	bne	20974 <__assert_fail@plt+0xe98c>
   20938:	ldr	r3, [pc, #244]	; 20a34 <__assert_fail@plt+0xea4c>
   2093c:	ldr	r3, [r3]
   20940:	cmp	r3, #2
   20944:	beq	209d4 <__assert_fail@plt+0xe9ec>
   20948:	ldr	r0, [sp, #24]
   2094c:	bl	208b8 <__assert_fail@plt+0xe8d0>
   20950:	cmp	r0, #0
   20954:	bne	20a00 <__assert_fail@plt+0xea18>
   20958:	ldr	r1, [sp, #28]
   2095c:	mov	r0, r4
   20960:	bl	1e274 <__assert_fail@plt+0xc28c>
   20964:	cmp	r0, #0
   20968:	bne	20a18 <__assert_fail@plt+0xea30>
   2096c:	mov	r0, #1
   20970:	pop	{r4, r5, r6, r7, r8, pc}
   20974:	cmp	r5, #0
   20978:	bne	2096c <__assert_fail@plt+0xe984>
   2097c:	mov	r0, r4
   20980:	bl	2e970 <__assert_fail@plt+0x1c988>
   20984:	ldr	r2, [sp, #24]
   20988:	mov	r1, r0
   2098c:	ldr	r0, [pc, #164]	; 20a38 <__assert_fail@plt+0xea50>
   20990:	bl	1f558 <__assert_fail@plt+0xd570>
   20994:	bl	2e970 <__assert_fail@plt+0x1c988>
   20998:	ldr	r1, [pc, #156]	; 20a3c <__assert_fail@plt+0xea54>
   2099c:	cmp	r7, #0
   209a0:	ldr	r3, [pc, #152]	; 20a40 <__assert_fail@plt+0xea58>
   209a4:	mov	r2, r6
   209a8:	movne	r3, r1
   209ac:	mov	r1, r0
   209b0:	ldr	r0, [pc, #140]	; 20a44 <__assert_fail@plt+0xea5c>
   209b4:	bl	203bc <__assert_fail@plt+0xe3d4>
   209b8:	ldr	r3, [pc, #136]	; 20a48 <__assert_fail@plt+0xea60>
   209bc:	ldr	r3, [r3]
   209c0:	ldrb	r3, [r3]
   209c4:	cmp	r3, #110	; 0x6e
   209c8:	bne	20928 <__assert_fail@plt+0xe940>
   209cc:	mov	r0, #0
   209d0:	pop	{r4, r5, r6, r7, r8, pc}
   209d4:	mov	r0, r4
   209d8:	bl	2e970 <__assert_fail@plt+0x1c988>
   209dc:	ldr	r1, [pc, #88]	; 20a3c <__assert_fail@plt+0xea54>
   209e0:	cmp	r7, #0
   209e4:	ldr	r3, [pc, #84]	; 20a40 <__assert_fail@plt+0xea58>
   209e8:	mov	r2, r6
   209ec:	movne	r3, r1
   209f0:	mov	r1, r0
   209f4:	ldr	r0, [pc, #80]	; 20a4c <__assert_fail@plt+0xea64>
   209f8:	bl	1fc1c <__assert_fail@plt+0xdc34>
   209fc:	b	20948 <__assert_fail@plt+0xe960>
   20a00:	mov	r0, r4
   20a04:	bl	2e970 <__assert_fail@plt+0x1c988>
   20a08:	mov	r2, r6
   20a0c:	mov	r1, r0
   20a10:	ldr	r0, [pc, #56]	; 20a50 <__assert_fail@plt+0xea68>
   20a14:	bl	1f558 <__assert_fail@plt+0xd570>
   20a18:	mov	r0, r4
   20a1c:	bl	2e970 <__assert_fail@plt+0x1c988>
   20a20:	mov	r1, r0
   20a24:	ldr	r0, [pc, #40]	; 20a54 <__assert_fail@plt+0xea6c>
   20a28:	bl	1f774 <__assert_fail@plt+0xd78c>
   20a2c:	strdeq	sl, [r4], -r4
   20a30:	andeq	sl, r4, r5, ror #13
   20a34:			; <UNDEFINED> instruction: 0x0004a6bc
   20a38:			; <UNDEFINED> instruction: 0x00034cb0
   20a3c:	strdeq	r5, [r3], -r8
   20a40:	andeq	r4, r3, r8, lsl #25
   20a44:	muleq	r3, r4, ip
   20a48:	andeq	sl, r4, r0, ror r7
   20a4c:	andeq	r4, r3, r8, lsl #26
   20a50:	andeq	r4, r3, r8, lsr #26
   20a54:	andeq	r3, r3, r0, lsl #26
   20a58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20a5c:	bl	2f518 <renameat2@@Base+0x804>
   20a60:	mov	r9, r0
   20a64:	bl	11d78 <strlen@plt>
   20a68:	cmp	r0, #0
   20a6c:	beq	20b04 <__assert_fail@plt+0xeb1c>
   20a70:	add	r0, r9, r0
   20a74:	mvn	r5, r9
   20a78:	mov	r6, #0
   20a7c:	ldr	r7, [pc, #192]	; 20b44 <__assert_fail@plt+0xeb5c>
   20a80:	ldr	r8, [pc, #192]	; 20b48 <__assert_fail@plt+0xeb60>
   20a84:	b	20a8c <__assert_fail@plt+0xeaa4>
   20a88:	mov	r0, r4
   20a8c:	cmn	r5, r0
   20a90:	beq	20b04 <__assert_fail@plt+0xeb1c>
   20a94:	ldrb	r3, [r0, #-1]
   20a98:	sub	r4, r0, #1
   20a9c:	cmp	r3, #47	; 0x2f
   20aa0:	bne	20a88 <__assert_fail@plt+0xeaa0>
   20aa4:	ldrb	r3, [r4, #-1]
   20aa8:	cmp	r3, #47	; 0x2f
   20aac:	beq	20a88 <__assert_fail@plt+0xeaa0>
   20ab0:	cmp	r3, #46	; 0x2e
   20ab4:	bne	20ad8 <__assert_fail@plt+0xeaf0>
   20ab8:	sub	r3, r4, r9
   20abc:	cmp	r3, #1
   20ac0:	beq	20b04 <__assert_fail@plt+0xeb1c>
   20ac4:	ldrb	r2, [r4, #-2]
   20ac8:	cmp	r2, #47	; 0x2f
   20acc:	beq	20b24 <__assert_fail@plt+0xeb3c>
   20ad0:	cmp	r2, #46	; 0x2e
   20ad4:	beq	20b10 <__assert_fail@plt+0xeb28>
   20ad8:	strb	r6, [r4]
   20adc:	mov	r0, r9
   20ae0:	bl	1e448 <__assert_fail@plt+0xc460>
   20ae4:	cmp	r0, #0
   20ae8:	bne	20af8 <__assert_fail@plt+0xeb10>
   20aec:	ldr	r3, [r7]
   20af0:	cmp	r3, #2
   20af4:	beq	20b2c <__assert_fail@plt+0xeb44>
   20af8:	mov	r3, #47	; 0x2f
   20afc:	strb	r3, [r4]
   20b00:	b	20a88 <__assert_fail@plt+0xeaa0>
   20b04:	mov	r0, r9
   20b08:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   20b0c:	b	11ab4 <free@plt>
   20b10:	cmp	r3, #2
   20b14:	beq	20b24 <__assert_fail@plt+0xeb3c>
   20b18:	ldrb	r3, [r4, #-3]
   20b1c:	cmp	r3, #47	; 0x2f
   20b20:	bne	20ad8 <__assert_fail@plt+0xeaf0>
   20b24:	sub	r4, r0, #2
   20b28:	b	20a88 <__assert_fail@plt+0xeaa0>
   20b2c:	mov	r0, r9
   20b30:	bl	2e970 <__assert_fail@plt+0x1c988>
   20b34:	mov	r1, r0
   20b38:	mov	r0, r8
   20b3c:	bl	1fc1c <__assert_fail@plt+0xdc34>
   20b40:	b	20af8 <__assert_fail@plt+0xeb10>
   20b44:			; <UNDEFINED> instruction: 0x0004a6bc
   20b48:	andeq	r4, r3, r4, asr #26
   20b4c:	ldr	r0, [pc]	; 20b54 <__assert_fail@plt+0xeb6c>
   20b50:	b	25408 <__assert_fail@plt+0x13420>
   20b54:	andeq	sl, r4, r8, asr r5
   20b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b5c:	sub	sp, sp, #28
   20b60:	ldr	r7, [pc, #892]	; 20ee4 <__assert_fail@plt+0xeefc>
   20b64:	mvn	lr, #0
   20b68:	mov	ip, #0
   20b6c:	ldr	r5, [r7]
   20b70:	mov	r4, r0
   20b74:	stm	sp, {r1, r2}
   20b78:	str	r5, [sp, #20]
   20b7c:	mov	r8, r3
   20b80:	str	lr, [sp, #12]
   20b84:	str	ip, [sp, #16]
   20b88:	bl	11d48 <__ctype_b_loc@plt>
   20b8c:	ldr	r6, [sp, #64]	; 0x40
   20b90:	mov	r5, r0
   20b94:	ldr	r1, [r0]
   20b98:	mov	r0, r4
   20b9c:	ldrb	r4, [r0]
   20ba0:	mov	fp, r0
   20ba4:	add	r0, r0, #1
   20ba8:	lsl	r2, r4, #1
   20bac:	ldrh	r2, [r1, r2]
   20bb0:	tst	r2, #8192	; 0x2000
   20bb4:	bne	20b9c <__assert_fail@plt+0xebb4>
   20bb8:	ldr	r9, [pc, #808]	; 20ee8 <__assert_fail@plt+0xef00>
   20bbc:	ldr	r2, [r9]
   20bc0:	tst	r2, #128	; 0x80
   20bc4:	bne	20d7c <__assert_fail@plt+0xed94>
   20bc8:	cmp	r4, #34	; 0x22
   20bcc:	beq	20d98 <__assert_fail@plt+0xedb0>
   20bd0:	cmp	r4, #0
   20bd4:	str	fp, [sp, #8]
   20bd8:	beq	20ed0 <__assert_fail@plt+0xeee8>
   20bdc:	cmp	r6, #0
   20be0:	ldr	sl, [r5]
   20be4:	movne	r9, #9
   20be8:	moveq	r9, #10
   20bec:	mov	r5, fp
   20bf0:	b	20c04 <__assert_fail@plt+0xec1c>
   20bf4:	add	r5, r5, #1
   20bf8:	cmp	r4, #0
   20bfc:	str	r5, [sp, #8]
   20c00:	beq	20c64 <__assert_fail@plt+0xec7c>
   20c04:	lsl	r4, r4, #1
   20c08:	ldrh	r1, [sl, r4]
   20c0c:	tst	r1, #8192	; 0x2000
   20c10:	ldrbeq	r4, [r5, #1]
   20c14:	beq	20bf4 <__assert_fail@plt+0xec0c>
   20c18:	ldrb	r1, [r5]
   20c1c:	cmp	r1, #9
   20c20:	beq	20c64 <__assert_fail@plt+0xec7c>
   20c24:	ldrb	r4, [r5, #1]
   20c28:	lsl	r1, r4, #1
   20c2c:	ldrh	r1, [sl, r1]
   20c30:	tst	r1, #8192	; 0x2000
   20c34:	beq	20d60 <__assert_fail@plt+0xed78>
   20c38:	add	ip, r5, #1
   20c3c:	mov	r1, r4
   20c40:	b	20c58 <__assert_fail@plt+0xec70>
   20c44:	ldrb	r1, [ip, #1]!
   20c48:	lsl	lr, r1, #1
   20c4c:	ldrh	lr, [sl, lr]
   20c50:	tst	lr, #8192	; 0x2000
   20c54:	beq	20d64 <__assert_fail@plt+0xed7c>
   20c58:	cmp	r1, #9
   20c5c:	mov	r0, ip
   20c60:	bne	20c44 <__assert_fail@plt+0xec5c>
   20c64:	sub	r1, r5, fp
   20c68:	mov	r0, fp
   20c6c:	bl	2fc1c <renameat2@@Base+0xf08>
   20c70:	mov	r4, r0
   20c74:	ldr	r1, [pc, #624]	; 20eec <__assert_fail@plt+0xef04>
   20c78:	mov	r0, r4
   20c7c:	bl	11a48 <strcmp@plt>
   20c80:	subs	r5, r0, #0
   20c84:	beq	20dd0 <__assert_fail@plt+0xede8>
   20c88:	ldr	r1, [sp]
   20c8c:	mov	r0, r4
   20c90:	bl	1eda4 <__assert_fail@plt+0xcdbc>
   20c94:	cmp	r0, #0
   20c98:	beq	20e9c <__assert_fail@plt+0xeeb4>
   20c9c:	cmp	r8, #0
   20ca0:	ldr	r5, [sp, #8]
   20ca4:	beq	20e60 <__assert_fail@plt+0xee78>
   20ca8:	mov	r0, r5
   20cac:	bl	11d78 <strlen@plt>
   20cb0:	add	r1, r5, r0
   20cb4:	cmp	r1, r5
   20cb8:	beq	20cd0 <__assert_fail@plt+0xece8>
   20cbc:	ldrb	r3, [r1, #-1]
   20cc0:	cmp	r3, #10
   20cc4:	beq	20e84 <__assert_fail@plt+0xee9c>
   20cc8:	cmp	r3, #13
   20ccc:	subeq	r1, r1, #1
   20cd0:	sub	r1, r1, r5
   20cd4:	mov	r0, r5
   20cd8:	bl	2fc1c <renameat2@@Base+0xf08>
   20cdc:	ldr	r5, [sp, #8]
   20ce0:	ldrb	r3, [r5]
   20ce4:	cmp	r3, #10
   20ce8:	mov	sl, r0
   20cec:	beq	20ea8 <__assert_fail@plt+0xeec0>
   20cf0:	cmp	r6, #0
   20cf4:	beq	20ebc <__assert_fail@plt+0xeed4>
   20cf8:	ldr	r2, [pc, #496]	; 20ef0 <__assert_fail@plt+0xef08>
   20cfc:	ldr	r3, [pc, #496]	; 20ef4 <__assert_fail@plt+0xef0c>
   20d00:	add	r9, sp, #12
   20d04:	ldrb	r2, [r2]
   20d08:	ldrb	r3, [r3]
   20d0c:	mov	r1, r5
   20d10:	mov	r0, r9
   20d14:	orrs	r3, r2, r3
   20d18:	ldr	r2, [pc, #472]	; 20ef8 <__assert_fail@plt+0xef10>
   20d1c:	beq	20dfc <__assert_fail@plt+0xee14>
   20d20:	bl	2cac0 <__assert_fail@plt+0x1aad8>
   20d24:	ldr	r5, [sp, #4]
   20d28:	ldr	r0, [r5]
   20d2c:	bl	11ab4 <free@plt>
   20d30:	cmp	r8, #0
   20d34:	str	r4, [r5]
   20d38:	beq	20d54 <__assert_fail@plt+0xed6c>
   20d3c:	ldr	r0, [r8]
   20d40:	bl	11ab4 <free@plt>
   20d44:	str	sl, [r8]
   20d48:	cmp	r6, #0
   20d4c:	beq	20de4 <__assert_fail@plt+0xedfc>
   20d50:	add	r9, sp, #12
   20d54:	ldm	r9, {r0, r1}
   20d58:	stm	r6, {r0, r1}
   20d5c:	b	20de4 <__assert_fail@plt+0xedfc>
   20d60:	mov	r0, r5
   20d64:	add	r0, r0, #1
   20d68:	mov	r1, r9
   20d6c:	bl	11d84 <strchr@plt>
   20d70:	cmp	r0, #0
   20d74:	bne	20bf4 <__assert_fail@plt+0xec0c>
   20d78:	b	20c64 <__assert_fail@plt+0xec7c>
   20d7c:	ldr	r2, [sp]
   20d80:	mov	r1, fp
   20d84:	ldr	r0, [pc, #368]	; 20efc <__assert_fail@plt+0xef14>
   20d88:	bl	1fc1c <__assert_fail@plt+0xdc34>
   20d8c:	ldrb	r4, [fp]
   20d90:	cmp	r4, #34	; 0x22
   20d94:	bne	20bd0 <__assert_fail@plt+0xebe8>
   20d98:	add	r1, sp, #8
   20d9c:	mov	r0, fp
   20da0:	bl	1eaec <__assert_fail@plt+0xcb04>
   20da4:	subs	r4, r0, #0
   20da8:	bne	20c74 <__assert_fail@plt+0xec8c>
   20dac:	ldr	r2, [r9]
   20db0:	tst	r2, #128	; 0x80
   20db4:	beq	20de4 <__assert_fail@plt+0xedfc>
   20db8:	mov	r0, fp
   20dbc:	bl	2e970 <__assert_fail@plt+0x1c988>
   20dc0:	mov	r1, r0
   20dc4:	ldr	r0, [pc, #308]	; 20f00 <__assert_fail@plt+0xef18>
   20dc8:	bl	1fc1c <__assert_fail@plt+0xdc34>
   20dcc:	b	20de4 <__assert_fail@plt+0xedfc>
   20dd0:	mov	r0, r4
   20dd4:	bl	11ab4 <free@plt>
   20dd8:	cmp	r6, #0
   20ddc:	strne	r5, [r6]
   20de0:	strne	r5, [r6, #4]
   20de4:	ldr	r2, [sp, #20]
   20de8:	ldr	r3, [r7]
   20dec:	cmp	r2, r3
   20df0:	bne	20ee0 <__assert_fail@plt+0xeef8>
   20df4:	add	sp, sp, #28
   20df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20dfc:	bl	2cac0 <__assert_fail@plt+0x1aad8>
   20e00:	cmp	r0, #0
   20e04:	beq	20d24 <__assert_fail@plt+0xed3c>
   20e08:	ldr	r2, [sp, #12]
   20e0c:	ldr	r3, [pc, #240]	; 20f04 <__assert_fail@plt+0xef1c>
   20e10:	ldr	r1, [sp, #16]
   20e14:	cmp	r2, r3
   20e18:	blt	20d24 <__assert_fail@plt+0xed3c>
   20e1c:	movne	r3, #1
   20e20:	moveq	r3, #0
   20e24:	cmp	r1, #0
   20e28:	orrgt	r3, r3, #1
   20e2c:	cmp	r3, #0
   20e30:	beq	20d24 <__assert_fail@plt+0xed3c>
   20e34:	ldr	r3, [pc, #204]	; 20f08 <__assert_fail@plt+0xef20>
   20e38:	cmp	r2, r3
   20e3c:	ble	20e50 <__assert_fail@plt+0xee68>
   20e40:	add	r3, r3, #1
   20e44:	cmp	r2, r3
   20e48:	cmneq	r1, #1
   20e4c:	bne	20d24 <__assert_fail@plt+0xed3c>
   20e50:	mov	r3, #0
   20e54:	str	r3, [sp, #12]
   20e58:	str	r3, [sp, #16]
   20e5c:	b	20d24 <__assert_fail@plt+0xed3c>
   20e60:	ldrb	r3, [r5]
   20e64:	cmp	r3, #10
   20e68:	movne	sl, r8
   20e6c:	bne	20cf0 <__assert_fail@plt+0xed08>
   20e70:	ldr	r5, [sp, #4]
   20e74:	ldr	r0, [r5]
   20e78:	bl	11ab4 <free@plt>
   20e7c:	str	r4, [r5]
   20e80:	b	20d48 <__assert_fail@plt+0xed60>
   20e84:	sub	r2, r1, #1
   20e88:	cmp	r2, r5
   20e8c:	beq	20ed8 <__assert_fail@plt+0xeef0>
   20e90:	ldrb	r3, [r1, #-2]
   20e94:	mov	r1, r2
   20e98:	b	20cc8 <__assert_fail@plt+0xece0>
   20e9c:	mov	r0, r4
   20ea0:	bl	11ab4 <free@plt>
   20ea4:	b	20de4 <__assert_fail@plt+0xedfc>
   20ea8:	ldr	r5, [sp, #4]
   20eac:	ldr	r0, [r5]
   20eb0:	bl	11ab4 <free@plt>
   20eb4:	str	r4, [r5]
   20eb8:	b	20d3c <__assert_fail@plt+0xed54>
   20ebc:	mov	r0, r4
   20ec0:	bl	11ab4 <free@plt>
   20ec4:	mov	r0, sl
   20ec8:	bl	11ab4 <free@plt>
   20ecc:	b	20de4 <__assert_fail@plt+0xedfc>
   20ed0:	mov	r1, r4
   20ed4:	b	20c68 <__assert_fail@plt+0xec80>
   20ed8:	mov	r1, r5
   20edc:	b	20cd0 <__assert_fail@plt+0xece8>
   20ee0:	bl	11b50 <__stack_chk_fail@plt>
   20ee4:	andeq	r7, r4, r8, lsl #30
   20ee8:	ldrdeq	sl, [r4], -r8
   20eec:	andeq	r2, r3, r0, ror r0
   20ef0:	strdeq	sl, [r4], -r9
   20ef4:	strdeq	sl, [r4], -r8
   20ef8:	andeq	sl, r4, r8, asr r5
   20efc:	andeq	r4, r3, r0, ror #26
   20f00:	andeq	r4, r3, r4, ror sp
   20f04:			; <UNDEFINED> instruction: 0xfffea070
   20f08:	muleq	r1, pc, sp	; <UNPREDICTABLE>
   20f0c:	push	{r4, r5, r6, r7, r8, lr}
   20f10:	mov	r4, r0
   20f14:	mov	r6, r1
   20f18:	mov	r5, r2
   20f1c:	bl	11d48 <__ctype_b_loc@plt>
   20f20:	mov	r3, r4
   20f24:	ldr	ip, [r0]
   20f28:	ldrb	r1, [r3]
   20f2c:	mov	r0, r3
   20f30:	add	r3, r3, #1
   20f34:	lsl	r2, r1, #1
   20f38:	ldrh	r2, [ip, r2]
   20f3c:	tst	r2, #8192	; 0x2000
   20f40:	bne	20f28 <__assert_fail@plt+0xef40>
   20f44:	cmp	r1, #34	; 0x22
   20f48:	beq	20fa8 <__assert_fail@plt+0xefc0>
   20f4c:	cmp	r1, #0
   20f50:	mov	r4, r0
   20f54:	bne	20f68 <__assert_fail@plt+0xef80>
   20f58:	b	20f7c <__assert_fail@plt+0xef94>
   20f5c:	ldrh	r3, [ip, r3]
   20f60:	tst	r3, #8192	; 0x2000
   20f64:	bne	20f78 <__assert_fail@plt+0xef90>
   20f68:	ldrb	r3, [r4, #1]!
   20f6c:	cmp	r3, #0
   20f70:	lsl	r3, r3, #1
   20f74:	bne	20f5c <__assert_fail@plt+0xef74>
   20f78:	sub	r1, r4, r0
   20f7c:	bl	2fc1c <renameat2@@Base+0xf08>
   20f80:	cmp	r5, #0
   20f84:	strne	r4, [r5]
   20f88:	mov	r7, r0
   20f8c:	mov	r1, r6
   20f90:	mov	r0, r7
   20f94:	bl	1eda4 <__assert_fail@plt+0xcdbc>
   20f98:	subs	r4, r0, #0
   20f9c:	beq	20fbc <__assert_fail@plt+0xefd4>
   20fa0:	mov	r0, r7
   20fa4:	pop	{r4, r5, r6, r7, r8, pc}
   20fa8:	mov	r1, r5
   20fac:	bl	1eaec <__assert_fail@plt+0xcb04>
   20fb0:	subs	r7, r0, #0
   20fb4:	bne	20f8c <__assert_fail@plt+0xefa4>
   20fb8:	b	20fa0 <__assert_fail@plt+0xefb8>
   20fbc:	mov	r0, r7
   20fc0:	mov	r7, r4
   20fc4:	bl	11ab4 <free@plt>
   20fc8:	mov	r0, r7
   20fcc:	pop	{r4, r5, r6, r7, r8, pc}
   20fd0:	push	{r4, lr}
   20fd4:	bl	11f58 <fseek@plt>
   20fd8:	cmp	r0, #0
   20fdc:	popeq	{r4, pc}
   20fe0:	ldr	r0, [pc]	; 20fe8 <__assert_fail@plt+0xf000>
   20fe4:	bl	1f774 <__assert_fail@plt+0xd78c>
   20fe8:	muleq	r3, r4, sp
   20fec:	push	{r4, r5, r6, r7, r8, r9, lr}
   20ff0:	sub	sp, sp, #36	; 0x24
   20ff4:	ldr	r4, [pc, #304]	; 2112c <__assert_fail@plt+0xf144>
   20ff8:	ldr	ip, [sp, #64]	; 0x40
   20ffc:	str	r3, [sp, #20]
   21000:	ldr	r3, [r4]
   21004:	subs	r5, r2, #0
   21008:	mov	r7, r0
   2100c:	mov	r8, r1
   21010:	str	ip, [sp, #24]
   21014:	str	r3, [sp, #28]
   21018:	beq	2102c <__assert_fail@plt+0xf044>
   2101c:	ldr	r3, [pc, #268]	; 21130 <__assert_fail@plt+0xf148>
   21020:	ldrb	r3, [r3]
   21024:	cmp	r3, #0
   21028:	beq	21090 <__assert_fail@plt+0xf0a8>
   2102c:	ldr	r0, [pc, #256]	; 21134 <__assert_fail@plt+0xf14c>
   21030:	bl	11c94 <getenv@plt>
   21034:	subs	r6, r0, #0
   21038:	beq	210fc <__assert_fail@plt+0xf114>
   2103c:	bl	11d78 <strlen@plt>
   21040:	add	r0, r0, #10
   21044:	bl	2f2ec <renameat2@@Base+0x5d8>
   21048:	stm	sp, {r6, r8}
   2104c:	ldr	r3, [pc, #228]	; 21138 <__assert_fail@plt+0xf150>
   21050:	mvn	r2, #0
   21054:	mov	r1, #1
   21058:	mov	r5, r0
   2105c:	bl	11dcc <__sprintf_chk@plt>
   21060:	ldr	r3, [pc, #212]	; 2113c <__assert_fail@plt+0xf154>
   21064:	add	r2, sp, #20
   21068:	mov	r1, #0
   2106c:	mov	r0, r5
   21070:	bl	2f040 <renameat2@@Base+0x32c>
   21074:	ldr	r2, [sp, #28]
   21078:	str	r5, [r7]
   2107c:	ldr	r3, [r4]
   21080:	cmp	r2, r3
   21084:	bne	21128 <__assert_fail@plt+0xf140>
   21088:	add	sp, sp, #36	; 0x24
   2108c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21090:	mov	r0, r5
   21094:	bl	251d0 <__assert_fail@plt+0x131e8>
   21098:	mov	r9, r0
   2109c:	mov	r0, r5
   210a0:	bl	251e4 <__assert_fail@plt+0x131fc>
   210a4:	mov	r6, r0
   210a8:	mov	r0, r9
   210ac:	bl	11d78 <strlen@plt>
   210b0:	mov	r5, r0
   210b4:	mov	r0, r6
   210b8:	bl	11d78 <strlen@plt>
   210bc:	add	r0, r5, r0
   210c0:	add	r0, r0, #10
   210c4:	bl	2f2ec <renameat2@@Base+0x5d8>
   210c8:	ldr	r3, [pc, #112]	; 21140 <__assert_fail@plt+0xf158>
   210cc:	mvn	r2, #0
   210d0:	mov	r1, #1
   210d4:	str	r6, [sp, #4]
   210d8:	str	r9, [sp]
   210dc:	str	r8, [sp, #8]
   210e0:	mov	r5, r0
   210e4:	bl	11dcc <__sprintf_chk@plt>
   210e8:	mov	r0, r9
   210ec:	bl	11ab4 <free@plt>
   210f0:	mov	r0, r6
   210f4:	bl	11ab4 <free@plt>
   210f8:	b	21060 <__assert_fail@plt+0xf078>
   210fc:	ldr	r0, [pc, #64]	; 21144 <__assert_fail@plt+0xf15c>
   21100:	bl	11c94 <getenv@plt>
   21104:	subs	r6, r0, #0
   21108:	bne	2103c <__assert_fail@plt+0xf054>
   2110c:	ldr	r0, [pc, #52]	; 21148 <__assert_fail@plt+0xf160>
   21110:	bl	11c94 <getenv@plt>
   21114:	subs	r6, r0, #0
   21118:	moveq	r0, #14
   2111c:	ldreq	r6, [pc, #40]	; 2114c <__assert_fail@plt+0xf164>
   21120:	beq	21044 <__assert_fail@plt+0xf05c>
   21124:	b	2103c <__assert_fail@plt+0xf054>
   21128:	bl	11b50 <__stack_chk_fail@plt>
   2112c:	andeq	r7, r4, r8, lsl #30
   21130:	andeq	sl, r4, r5, ror #13
   21134:			; <UNDEFINED> instruction: 0x00034db4
   21138:	andeq	r4, r3, r8, asr #27
   2113c:	andeq	lr, r1, r4, lsr sl
   21140:	andeq	r4, r3, r4, lsr #27
   21144:			; <UNDEFINED> instruction: 0x00034dbc
   21148:	andeq	r4, r3, r0, asr #27
   2114c:	muleq	r3, ip, sp
   21150:	ldr	ip, [pc, #44]	; 21184 <__assert_fail@plt+0xf19c>
   21154:	ldr	r2, [pc, #44]	; 21188 <__assert_fail@plt+0xf1a0>
   21158:	push	{r4, lr}
   2115c:	ldrb	ip, [ip]
   21160:	ldr	r3, [pc, #36]	; 2118c <__assert_fail@plt+0xf1a4>
   21164:	cmp	ip, #0
   21168:	moveq	r3, r2
   2116c:	blx	r3
   21170:	cmp	r0, #0
   21174:	popeq	{r4, pc}
   21178:	bl	11dc0 <__errno_location@plt>
   2117c:	ldr	r0, [r0]
   21180:	pop	{r4, pc}
   21184:	andeq	sl, r4, ip, ror r7
   21188:	andeq	lr, r1, ip, ror r2
   2118c:	andeq	lr, r1, r4, ror r2
   21190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21194:	sub	sp, sp, #236	; 0xec
   21198:	ldr	r8, [pc, #956]	; 2155c <__assert_fail@plt+0xf574>
   2119c:	mov	r4, r3
   211a0:	add	r7, sp, #16
   211a4:	ldr	r3, [r8]
   211a8:	mov	r5, r0
   211ac:	mov	fp, r1
   211b0:	mov	r0, r4
   211b4:	mov	r1, r7
   211b8:	ldrb	r9, [sp, #276]	; 0x114
   211bc:	mov	sl, r2
   211c0:	str	r3, [sp, #228]	; 0xe4
   211c4:	bl	21150 <__assert_fail@plt+0xf168>
   211c8:	cmp	r9, #0
   211cc:	mov	r6, r0
   211d0:	beq	211ec <__assert_fail@plt+0xf204>
   211d4:	cmp	r0, #0
   211d8:	moveq	r1, r7
   211dc:	movne	r1, #0
   211e0:	mov	r2, #0
   211e4:	mov	r0, r4
   211e8:	bl	1feb0 <__assert_fail@plt+0xdec8>
   211ec:	cmp	r6, #0
   211f0:	beq	212c4 <__assert_fail@plt+0xf2dc>
   211f4:	cmp	r5, #0
   211f8:	beq	212dc <__assert_fail@plt+0xf2f4>
   211fc:	ldr	r3, [sp, #272]	; 0x110
   21200:	and	r3, r3, #61440	; 0xf000
   21204:	cmp	r3, #40960	; 0xa000
   21208:	beq	21388 <__assert_fail@plt+0xf3a0>
   2120c:	ldr	r3, [pc, #844]	; 21560 <__assert_fail@plt+0xf578>
   21210:	ldr	r3, [r3]
   21214:	tst	r3, #4
   21218:	bne	21350 <__assert_fail@plt+0xf368>
   2121c:	mov	r1, r4
   21220:	mov	r0, r5
   21224:	bl	1e300 <__assert_fail@plt+0xc318>
   21228:	cmp	r0, #0
   2122c:	beq	21328 <__assert_fail@plt+0xf340>
   21230:	bl	11dc0 <__errno_location@plt>
   21234:	ldr	r2, [r0]
   21238:	mov	r7, r0
   2123c:	cmp	r2, #2
   21240:	movne	r3, #0
   21244:	beq	21468 <__assert_fail@plt+0xf480>
   21248:	cmp	r2, #18
   2124c:	bne	2147c <__assert_fail@plt+0xf494>
   21250:	cmp	r9, #0
   21254:	bne	2127c <__assert_fail@plt+0xf294>
   21258:	mov	r0, r4
   2125c:	str	r3, [sp, #12]
   21260:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   21264:	cmp	r0, #0
   21268:	beq	21380 <__assert_fail@plt+0xf398>
   2126c:	ldr	r2, [r7]
   21270:	ldr	r3, [sp, #12]
   21274:	cmp	r2, #2
   21278:	bne	21314 <__assert_fail@plt+0xf32c>
   2127c:	str	r3, [sp, #4]
   21280:	ldr	r3, [sp, #272]	; 0x110
   21284:	mov	r1, r4
   21288:	str	r3, [sp]
   2128c:	mov	r0, r5
   21290:	add	r2, sp, #120	; 0x78
   21294:	mov	r3, #0
   21298:	bl	1fc70 <__assert_fail@plt+0xdc88>
   2129c:	add	r0, sp, #120	; 0x78
   212a0:	mov	r2, #1
   212a4:	add	r1, sp, #216	; 0xd8
   212a8:	bl	1f638 <__assert_fail@plt+0xd650>
   212ac:	ldr	r2, [sp, #228]	; 0xe4
   212b0:	ldr	r3, [r8]
   212b4:	cmp	r2, r3
   212b8:	bne	21520 <__assert_fail@plt+0xf538>
   212bc:	add	sp, sp, #236	; 0xec
   212c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212c4:	mov	r2, #3
   212c8:	add	r1, sp, #112	; 0x70
   212cc:	mov	r0, r7
   212d0:	bl	1f638 <__assert_fail@plt+0xd650>
   212d4:	cmp	r5, #0
   212d8:	bne	211fc <__assert_fail@plt+0xf214>
   212dc:	cmp	r9, #0
   212e0:	bne	212ac <__assert_fail@plt+0xf2c4>
   212e4:	ldr	r3, [pc, #628]	; 21560 <__assert_fail@plt+0xf578>
   212e8:	ldr	r3, [r3]
   212ec:	tst	r3, #4
   212f0:	bne	214bc <__assert_fail@plt+0xf4d4>
   212f4:	mov	r0, r4
   212f8:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   212fc:	cmp	r0, #0
   21300:	beq	212ac <__assert_fail@plt+0xf2c4>
   21304:	bl	11dc0 <__errno_location@plt>
   21308:	ldr	r3, [r0]
   2130c:	cmp	r3, #2
   21310:	beq	212ac <__assert_fail@plt+0xf2c4>
   21314:	mov	r0, r4
   21318:	bl	2e970 <__assert_fail@plt+0x1c988>
   2131c:	mov	r1, r0
   21320:	ldr	r0, [pc, #572]	; 21564 <__assert_fail@plt+0xf57c>
   21324:	bl	1f774 <__assert_fail@plt+0xd78c>
   21328:	mov	r2, #1
   2132c:	add	r1, sl, #96	; 0x60
   21330:	mov	r0, sl
   21334:	bl	1f638 <__assert_fail@plt+0xd650>
   21338:	cmp	r6, #0
   2133c:	ble	214a8 <__assert_fail@plt+0xf4c0>
   21340:	cmp	fp, #0
   21344:	movne	r3, #0
   21348:	strbne	r3, [fp]
   2134c:	b	212ac <__assert_fail@plt+0xf2c4>
   21350:	mov	r1, r5
   21354:	mov	r0, #0
   21358:	bl	2e954 <__assert_fail@plt+0x1c96c>
   2135c:	mov	r1, r4
   21360:	mov	r7, r0
   21364:	mov	r0, #1
   21368:	bl	2e954 <__assert_fail@plt+0x1c96c>
   2136c:	mov	r1, r7
   21370:	mov	r2, r0
   21374:	ldr	r0, [pc, #492]	; 21568 <__assert_fail@plt+0xf580>
   21378:	bl	1fc1c <__assert_fail@plt+0xdc34>
   2137c:	b	2121c <__assert_fail@plt+0xf234>
   21380:	mov	r3, #1
   21384:	b	2127c <__assert_fail@plt+0xf294>
   21388:	mov	r0, #4096	; 0x1000
   2138c:	bl	2f2ec <renameat2@@Base+0x5d8>
   21390:	mov	r2, #0
   21394:	mov	r1, r2
   21398:	mov	r6, r0
   2139c:	mov	r0, r5
   213a0:	bl	1e284 <__assert_fail@plt+0xc29c>
   213a4:	subs	sl, r0, #0
   213a8:	movge	r5, #0
   213ac:	bge	213b8 <__assert_fail@plt+0xf3d0>
   213b0:	b	21528 <__assert_fail@plt+0xf540>
   213b4:	add	r5, r5, r0
   213b8:	add	fp, r6, r5
   213bc:	mov	r1, fp
   213c0:	rsb	r2, r5, #4096	; 0x1000
   213c4:	mov	r0, sl
   213c8:	bl	11a6c <read@plt>
   213cc:	cmp	r0, #0
   213d0:	bgt	213b4 <__assert_fail@plt+0xf3cc>
   213d4:	bne	21524 <__assert_fail@plt+0xf53c>
   213d8:	mov	r0, sl
   213dc:	bl	11fb8 <close@plt>
   213e0:	subs	r5, r0, #0
   213e4:	bne	21524 <__assert_fail@plt+0xf53c>
   213e8:	cmp	r9, #0
   213ec:	strb	r5, [fp]
   213f0:	beq	214d4 <__assert_fail@plt+0xf4ec>
   213f4:	mov	r1, r4
   213f8:	mov	r0, r6
   213fc:	bl	1e554 <__assert_fail@plt+0xc56c>
   21400:	cmp	r0, #0
   21404:	beq	21438 <__assert_fail@plt+0xf450>
   21408:	bl	11dc0 <__errno_location@plt>
   2140c:	ldr	r0, [r0]
   21410:	cmp	r0, #2
   21414:	moveq	r0, r5
   21418:	orrne	r0, r5, #1
   2141c:	cmp	r0, #0
   21420:	beq	21514 <__assert_fail@plt+0xf52c>
   21424:	mov	r1, r4
   21428:	mov	r0, r6
   2142c:	bl	1e554 <__assert_fail@plt+0xc56c>
   21430:	cmp	r0, #0
   21434:	bne	2154c <__assert_fail@plt+0xf564>
   21438:	mov	r0, r6
   2143c:	bl	11ab4 <free@plt>
   21440:	mov	r1, r7
   21444:	mov	r0, r4
   21448:	bl	1e27c <__assert_fail@plt+0xc294>
   2144c:	cmp	r0, #0
   21450:	bne	2153c <__assert_fail@plt+0xf554>
   21454:	mov	r0, r7
   21458:	mov	r2, #1
   2145c:	add	r1, sp, #112	; 0x70
   21460:	bl	1f638 <__assert_fail@plt+0xd650>
   21464:	b	212ac <__assert_fail@plt+0xf2c4>
   21468:	cmn	r6, #1
   2146c:	cmpne	r6, #2
   21470:	moveq	r3, #1
   21474:	movne	r3, #0
   21478:	beq	214e8 <__assert_fail@plt+0xf500>
   2147c:	mov	r1, r5
   21480:	mov	r0, #0
   21484:	bl	2e954 <__assert_fail@plt+0x1c96c>
   21488:	mov	r1, r4
   2148c:	mov	r5, r0
   21490:	mov	r0, #1
   21494:	bl	2e954 <__assert_fail@plt+0x1c96c>
   21498:	mov	r1, r5
   2149c:	mov	r2, r0
   214a0:	ldr	r0, [pc, #196]	; 2156c <__assert_fail@plt+0xf584>
   214a4:	bl	1f774 <__assert_fail@plt+0xd78c>
   214a8:	bne	212ac <__assert_fail@plt+0xf2c4>
   214ac:	ldr	r3, [sp, #36]	; 0x24
   214b0:	cmp	r3, #1
   214b4:	bhi	212ac <__assert_fail@plt+0xf2c4>
   214b8:	b	21340 <__assert_fail@plt+0xf358>
   214bc:	mov	r0, r4
   214c0:	bl	2e970 <__assert_fail@plt+0x1c988>
   214c4:	mov	r1, r0
   214c8:	ldr	r0, [pc, #160]	; 21570 <__assert_fail@plt+0xf588>
   214cc:	bl	1fc1c <__assert_fail@plt+0xdc34>
   214d0:	b	212f4 <__assert_fail@plt+0xf30c>
   214d4:	mov	r0, r4
   214d8:	bl	1e4dc <__assert_fail@plt+0xc4f4>
   214dc:	clz	r5, r0
   214e0:	lsr	r5, r5, #5
   214e4:	b	213f4 <__assert_fail@plt+0xf40c>
   214e8:	mov	r0, r4
   214ec:	str	r3, [sp, #12]
   214f0:	bl	1e910 <__assert_fail@plt+0xc928>
   214f4:	mov	r1, r4
   214f8:	mov	r0, r5
   214fc:	bl	1e300 <__assert_fail@plt+0xc318>
   21500:	cmp	r0, #0
   21504:	beq	21328 <__assert_fail@plt+0xf340>
   21508:	ldr	r2, [r7]
   2150c:	ldr	r3, [sp, #12]
   21510:	b	21248 <__assert_fail@plt+0xf260>
   21514:	mov	r0, r4
   21518:	bl	1e910 <__assert_fail@plt+0xc928>
   2151c:	b	21424 <__assert_fail@plt+0xf43c>
   21520:	bl	11b50 <__stack_chk_fail@plt>
   21524:	bl	1facc <__assert_fail@plt+0xdae4>
   21528:	mov	r0, r5
   2152c:	bl	2e970 <__assert_fail@plt+0x1c988>
   21530:	mov	r1, r0
   21534:	ldr	r0, [pc, #56]	; 21574 <__assert_fail@plt+0xf58c>
   21538:	bl	1f774 <__assert_fail@plt+0xd78c>
   2153c:	mov	r2, r4
   21540:	ldr	r1, [pc, #48]	; 21578 <__assert_fail@plt+0xf590>
   21544:	ldr	r0, [pc, #48]	; 2157c <__assert_fail@plt+0xf594>
   21548:	bl	1f774 <__assert_fail@plt+0xd78c>
   2154c:	mov	r2, r4
   21550:	ldr	r1, [pc, #32]	; 21578 <__assert_fail@plt+0xf590>
   21554:	ldr	r0, [pc, #36]	; 21580 <__assert_fail@plt+0xf598>
   21558:	bl	1f774 <__assert_fail@plt+0xd78c>
   2155c:	andeq	r7, r4, r8, lsl #30
   21560:	ldrdeq	sl, [r4], -r8
   21564:	ldrdeq	r4, [r3], -r8
   21568:	andeq	r4, r3, r4, lsr #23
   2156c:			; <UNDEFINED> instruction: 0x00034bbc
   21570:	strdeq	r4, [r3], -r0
   21574:	andeq	r4, r3, r4, asr #21
   21578:	muleq	r3, r0, r0
   2157c:	andeq	r2, r3, ip, lsl #15
   21580:	andeq	r4, r3, r8, lsl #22
   21584:	ldrb	r3, [r0]
   21588:	cmp	r3, #47	; 0x2f
   2158c:	beq	21608 <__assert_fail@plt+0xf620>
   21590:	cmp	r3, #0
   21594:	beq	215cc <__assert_fail@plt+0xf5e4>
   21598:	cmp	r3, #46	; 0x2e
   2159c:	beq	215d4 <__assert_fail@plt+0xf5ec>
   215a0:	ldrb	r3, [r0, #1]!
   215a4:	cmp	r3, #0
   215a8:	cmpne	r3, #47	; 0x2f
   215ac:	bne	215a0 <__assert_fail@plt+0xf5b8>
   215b0:	cmp	r3, #47	; 0x2f
   215b4:	bne	21590 <__assert_fail@plt+0xf5a8>
   215b8:	ldrb	r3, [r0, #1]!
   215bc:	cmp	r3, #47	; 0x2f
   215c0:	beq	215b8 <__assert_fail@plt+0xf5d0>
   215c4:	cmp	r3, #0
   215c8:	bne	21598 <__assert_fail@plt+0xf5b0>
   215cc:	mov	r0, #1
   215d0:	bx	lr
   215d4:	ldrb	r3, [r0, #1]
   215d8:	cmp	r3, #46	; 0x2e
   215dc:	beq	215f4 <__assert_fail@plt+0xf60c>
   215e0:	cmp	r3, #0
   215e4:	cmpne	r3, #47	; 0x2f
   215e8:	add	r0, r0, #1
   215ec:	bne	215a0 <__assert_fail@plt+0xf5b8>
   215f0:	b	215bc <__assert_fail@plt+0xf5d4>
   215f4:	ldrb	r3, [r0, #2]
   215f8:	add	r0, r0, #2
   215fc:	cmp	r3, #0
   21600:	cmpne	r3, #47	; 0x2f
   21604:	bne	215a0 <__assert_fail@plt+0xf5b8>
   21608:	mov	r0, #0
   2160c:	bx	lr
   21610:	push	{r4, r6, r7, r8, r9, lr}
   21614:	sub	sp, sp, #112	; 0x70
   21618:	ldr	r4, [pc, #140]	; 216ac <__assert_fail@plt+0xf6c4>
   2161c:	mov	r3, #47	; 0x2f
   21620:	mov	r2, sp
   21624:	ldr	r0, [r4]
   21628:	add	r1, sp, #104	; 0x68
   2162c:	str	r0, [sp, #108]	; 0x6c
   21630:	mov	r0, #3
   21634:	strh	r3, [sp, #104]	; 0x68
   21638:	bl	11f64 <__xstat64@plt>
   2163c:	cmp	r0, #0
   21640:	beq	21660 <__assert_fail@plt+0xf678>
   21644:	mov	r0, #0
   21648:	ldr	r2, [sp, #108]	; 0x6c
   2164c:	ldr	r3, [r4]
   21650:	cmp	r2, r3
   21654:	bne	216a8 <__assert_fail@plt+0xf6c0>
   21658:	add	sp, sp, #112	; 0x70
   2165c:	pop	{r4, r6, r7, r8, r9, pc}
   21660:	mov	r2, sp
   21664:	ldr	r1, [pc, #68]	; 216b0 <__assert_fail@plt+0xf6c8>
   21668:	mov	r0, #3
   2166c:	ldrd	r6, [sp]
   21670:	ldrd	r8, [sp, #96]	; 0x60
   21674:	bl	11f64 <__xstat64@plt>
   21678:	cmp	r0, #0
   2167c:	bne	21644 <__assert_fail@plt+0xf65c>
   21680:	ldrd	r2, [sp]
   21684:	cmp	r3, r7
   21688:	cmpeq	r2, r6
   2168c:	bne	21648 <__assert_fail@plt+0xf660>
   21690:	ldrd	r2, [sp, #96]	; 0x60
   21694:	cmp	r3, r9
   21698:	cmpeq	r2, r8
   2169c:	moveq	r0, #1
   216a0:	movne	r0, #0
   216a4:	b	21648 <__assert_fail@plt+0xf660>
   216a8:	bl	11b50 <__stack_chk_fail@plt>
   216ac:	andeq	r7, r4, r8, lsl #30
   216b0:	andeq	r3, r3, r8, ror r6
   216b4:	ldr	r2, [pc, #48]	; 216ec <__assert_fail@plt+0xf704>
   216b8:	push	{lr}		; (str lr, [sp, #-4]!)
   216bc:	add	r0, r2, #40	; 0x28
   216c0:	sub	sp, sp, #20
   216c4:	add	r1, r2, #240	; 0xf0
   216c8:	stmib	sp, {r0, r2}
   216cc:	str	r1, [sp]
   216d0:	ldr	r3, [pc, #24]	; 216f0 <__assert_fail@plt+0xf708>
   216d4:	ldr	r2, [pc, #24]	; 216f4 <__assert_fail@plt+0xf70c>
   216d8:	ldr	r1, [pc, #24]	; 216f8 <__assert_fail@plt+0xf710>
   216dc:	mov	r0, #1
   216e0:	bl	11e14 <__printf_chk@plt>
   216e4:	add	sp, sp, #20
   216e8:	pop	{pc}		; (ldr pc, [sp], #4)
   216ec:	andeq	r4, r3, r4, lsl #28
   216f0:	andeq	r4, r3, r0, asr pc
   216f4:	andeq	r4, r3, r8, asr pc
   216f8:	andeq	r4, r3, r4, ror #30
   216fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21700:	sub	sp, sp, #8
   21704:	ldr	r6, [pc, #196]	; 217d0 <__assert_fail@plt+0xf7e8>
   21708:	mov	r8, r0
   2170c:	mov	r9, r1
   21710:	ldr	ip, [r6]
   21714:	mov	r0, r2
   21718:	mov	r1, r3
   2171c:	mov	r2, #0
   21720:	mov	r3, sp
   21724:	str	ip, [sp, #4]
   21728:	bl	16268 <__assert_fail@plt+0x4280>
   2172c:	ldr	r4, [sp]
   21730:	cmp	r4, #0
   21734:	moveq	r5, r4
   21738:	beq	21780 <__assert_fail@plt+0xf798>
   2173c:	ldr	r3, [pc, #144]	; 217d4 <__assert_fail@plt+0xf7ec>
   21740:	mov	r7, r0
   21744:	mov	r1, r9
   21748:	mov	r0, r8
   2174c:	ldrb	r5, [r3]
   21750:	bl	18960 <__assert_fail@plt+0x6978>
   21754:	cmp	r5, #0
   21758:	mov	sl, r0
   2175c:	beq	2179c <__assert_fail@plt+0xf7b4>
   21760:	mov	r1, r9
   21764:	mov	r0, r8
   21768:	bl	18988 <__assert_fail@plt+0x69a0>
   2176c:	mov	r3, r4
   21770:	mov	r2, r7
   21774:	mov	r1, sl
   21778:	bl	16db8 <__assert_fail@plt+0x4dd0>
   2177c:	mov	r5, r0
   21780:	ldr	r2, [sp, #4]
   21784:	ldr	r3, [r6]
   21788:	mov	r0, r5
   2178c:	cmp	r2, r3
   21790:	bne	217cc <__assert_fail@plt+0xf7e4>
   21794:	add	sp, sp, #8
   21798:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2179c:	cmp	r4, r0
   217a0:	bne	21780 <__assert_fail@plt+0xf798>
   217a4:	mov	r1, r9
   217a8:	mov	r0, r8
   217ac:	bl	18988 <__assert_fail@plt+0x69a0>
   217b0:	mov	r2, r4
   217b4:	mov	r1, r0
   217b8:	mov	r0, r7
   217bc:	bl	11b44 <memcmp@plt>
   217c0:	clz	r5, r0
   217c4:	lsr	r5, r5, #5
   217c8:	b	21780 <__assert_fail@plt+0xf798>
   217cc:	bl	11b50 <__stack_chk_fail@plt>
   217d0:	andeq	r7, r4, r8, lsl #30
   217d4:	andeq	sl, r4, r4, ror #13
   217d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217dc:	sub	sp, sp, #372	; 0x174
   217e0:	mov	r5, r3
   217e4:	add	ip, sp, #416	; 0x1a0
   217e8:	add	r3, sp, #408	; 0x198
   217ec:	mov	r4, r2
   217f0:	ldrd	r6, [ip]
   217f4:	ldrd	r2, [r3]
   217f8:	strd	r0, [sp, #80]	; 0x50
   217fc:	strd	r4, [sp, #56]	; 0x38
   21800:	cmp	r2, r6
   21804:	sbcs	r3, r3, r7
   21808:	movlt	r3, #1
   2180c:	movge	r3, #0
   21810:	cmp	r0, r4
   21814:	sbcs	r2, r1, r5
   21818:	movge	r3, #0
   2181c:	andlt	r3, r3, #1
   21820:	cmp	r3, #0
   21824:	ldrb	r3, [sp, #424]	; 0x1a8
   21828:	str	r3, [sp, #168]	; 0xa8
   2182c:	beq	21c7c <__assert_fail@plt+0xfc94>
   21830:	add	r3, sp, #408	; 0x198
   21834:	ldrd	r4, [sp, #80]	; 0x50
   21838:	ldrd	r6, [r3]
   2183c:	add	r3, sp, #416	; 0x1a0
   21840:	ldrd	r8, [r3]
   21844:	b	21884 <__assert_fail@plt+0xf89c>
   21848:	ldrd	r2, [sp, #56]	; 0x38
   2184c:	adds	r4, r4, #1
   21850:	adc	r5, r5, #0
   21854:	adds	r6, r6, #1
   21858:	adc	r7, r7, #0
   2185c:	cmp	r4, r2
   21860:	sbcs	r3, r5, r3
   21864:	movlt	r3, #1
   21868:	movge	r3, #0
   2186c:	cmp	r6, r8
   21870:	sbcs	r2, r7, r9
   21874:	movge	r3, #0
   21878:	andlt	r3, r3, #1
   2187c:	cmp	r3, #0
   21880:	beq	2203c <__assert_fail@plt+0x10054>
   21884:	mov	r2, r6
   21888:	mov	r3, r7
   2188c:	mov	r0, r4
   21890:	mov	r1, r5
   21894:	bl	216fc <__assert_fail@plt+0xf714>
   21898:	cmp	r0, #0
   2189c:	bne	21848 <__assert_fail@plt+0xf860>
   218a0:	add	r3, sp, #408	; 0x198
   218a4:	strd	r4, [sp, #80]	; 0x50
   218a8:	strd	r6, [r3]
   218ac:	ldrd	r4, [sp, #56]	; 0x38
   218b0:	b	218c4 <__assert_fail@plt+0xf8dc>
   218b4:	mov	r4, r6
   218b8:	mov	r5, r9
   218bc:	str	r7, [sp, #416]	; 0x1a0
   218c0:	str	r8, [sp, #420]	; 0x1a4
   218c4:	ldrd	r2, [sp, #80]	; 0x50
   218c8:	cmp	r2, r4
   218cc:	add	r2, sp, #408	; 0x198
   218d0:	sbcs	r3, r3, r5
   218d4:	ldrd	r0, [r2]
   218d8:	add	r2, sp, #416	; 0x1a0
   218dc:	movlt	r3, #1
   218e0:	ldrd	r6, [r2]
   218e4:	movge	r3, #0
   218e8:	cmp	r0, r6
   218ec:	sbcs	r2, r1, r7
   218f0:	movge	r3, #0
   218f4:	andlt	r3, r3, #1
   218f8:	cmp	r3, #0
   218fc:	beq	21c78 <__assert_fail@plt+0xfc90>
   21900:	ldr	r3, [sp, #416]	; 0x1a0
   21904:	subs	r6, r4, #1
   21908:	sbc	r9, r5, #0
   2190c:	subs	r7, r3, #1
   21910:	ldr	r3, [sp, #420]	; 0x1a4
   21914:	mov	r1, r9
   21918:	sbc	r8, r3, #0
   2191c:	mov	r3, r8
   21920:	mov	r2, r7
   21924:	mov	r0, r6
   21928:	bl	216fc <__assert_fail@plt+0xf714>
   2192c:	cmp	r0, #0
   21930:	bne	218b4 <__assert_fail@plt+0xf8cc>
   21934:	strd	r4, [sp, #56]	; 0x38
   21938:	ldrd	r0, [sp, #80]	; 0x50
   2193c:	ldr	r2, [sp, #416]	; 0x1a0
   21940:	ldrd	r4, [sp, #56]	; 0x38
   21944:	subs	r3, r0, r2
   21948:	ldr	r2, [sp, #420]	; 0x1a4
   2194c:	str	r3, [sp, #152]	; 0x98
   21950:	sbc	r3, r1, r2
   21954:	ldr	r2, [sp, #408]	; 0x198
   21958:	str	r3, [sp, #156]	; 0x9c
   2195c:	subs	r3, r4, r2
   21960:	ldr	r2, [sp, #412]	; 0x19c
   21964:	str	r3, [sp, #160]	; 0xa0
   21968:	sbc	r3, r5, r2
   2196c:	ldr	r2, [sp, #408]	; 0x198
   21970:	ldr	ip, [sp, #412]	; 0x19c
   21974:	ldr	lr, [sp, #416]	; 0x1a0
   21978:	ldr	r6, [sp, #420]	; 0x1a4
   2197c:	str	r3, [sp, #164]	; 0xa4
   21980:	subs	r3, r0, r2
   21984:	sbc	r2, r1, ip
   21988:	subs	ip, r4, lr
   2198c:	sbc	lr, r5, r6
   21990:	subs	r6, r3, ip
   21994:	subs	r7, r4, #19
   21998:	str	r7, [sp, #176]	; 0xb0
   2199c:	sbc	r7, r5, #0
   219a0:	str	r7, [sp, #180]	; 0xb4
   219a4:	ldr	r7, [sp, #416]	; 0x1a0
   219a8:	str	r3, [sp, #208]	; 0xd0
   219ac:	subs	r7, r7, #19
   219b0:	str	r7, [sp, #192]	; 0xc0
   219b4:	ldr	r7, [sp, #420]	; 0x1a4
   219b8:	str	r2, [sp, #212]	; 0xd4
   219bc:	sbc	r7, r7, #0
   219c0:	str	r7, [sp, #196]	; 0xc4
   219c4:	adds	r7, r0, #19
   219c8:	str	r7, [sp, #184]	; 0xb8
   219cc:	adc	r7, r1, #0
   219d0:	str	ip, [sp, #216]	; 0xd8
   219d4:	str	r6, [sp, #172]	; 0xac
   219d8:	str	r3, [sp, #104]	; 0x68
   219dc:	str	r3, [sp, #64]	; 0x40
   219e0:	str	lr, [sp, #220]	; 0xdc
   219e4:	str	ip, [sp, #112]	; 0x70
   219e8:	str	r7, [sp, #188]	; 0xbc
   219ec:	ldr	r7, [sp, #428]	; 0x1ac
   219f0:	str	r2, [sp, #108]	; 0x6c
   219f4:	str	r2, [sp, #68]	; 0x44
   219f8:	ldr	r8, [r7, #8]
   219fc:	ldr	r7, [sp, #408]	; 0x198
   21a00:	ldr	r2, [sp, #412]	; 0x19c
   21a04:	adds	r7, r7, #19
   21a08:	str	r7, [sp, #200]	; 0xc8
   21a0c:	ldr	r7, [sp, #428]	; 0x1ac
   21a10:	adc	r2, r2, #0
   21a14:	str	ip, [sp, #72]	; 0x48
   21a18:	ldr	r9, [r7, #12]
   21a1c:	str	r2, [sp, #204]	; 0xcc
   21a20:	mov	r7, #0
   21a24:	lsl	r2, r3, #3
   21a28:	lsl	r3, ip, #3
   21a2c:	and	ip, r6, #1
   21a30:	mov	r6, #1
   21a34:	strd	r0, [r8, r2]
   21a38:	str	r8, [sp, #140]	; 0x8c
   21a3c:	str	r9, [sp, #136]	; 0x88
   21a40:	str	lr, [sp, #116]	; 0x74
   21a44:	str	lr, [sp, #76]	; 0x4c
   21a48:	str	ip, [sp, #132]	; 0x84
   21a4c:	strd	r6, [sp, #144]	; 0x90
   21a50:	strd	r4, [r9, r3]
   21a54:	ldrd	r0, [sp, #152]	; 0x98
   21a58:	ldrd	r2, [sp, #64]	; 0x40
   21a5c:	cmp	r0, r2
   21a60:	sbcs	r1, r1, r3
   21a64:	bge	22068 <__assert_fail@plt+0x10080>
   21a68:	subs	r3, r2, #1
   21a6c:	str	r3, [sp, #64]	; 0x40
   21a70:	ldr	r3, [sp, #68]	; 0x44
   21a74:	ldr	r2, [sp, #64]	; 0x40
   21a78:	sbc	r3, r3, #0
   21a7c:	str	r3, [sp, #68]	; 0x44
   21a80:	ldr	r3, [sp, #140]	; 0x8c
   21a84:	mvn	r0, #0
   21a88:	mvn	r1, #0
   21a8c:	add	r3, r3, r2, lsl #3
   21a90:	strd	r0, [r3, #-8]
   21a94:	ldrd	r2, [sp, #104]	; 0x68
   21a98:	ldrd	r0, [sp, #160]	; 0xa0
   21a9c:	cmp	r2, r0
   21aa0:	sbcs	r1, r3, r1
   21aa4:	bge	2204c <__assert_fail@plt+0x10064>
   21aa8:	adds	r3, r2, #1
   21aac:	str	r3, [sp, #104]	; 0x68
   21ab0:	ldr	r3, [sp, #108]	; 0x6c
   21ab4:	ldr	r2, [sp, #104]	; 0x68
   21ab8:	adc	r3, r3, #0
   21abc:	str	r3, [sp, #108]	; 0x6c
   21ac0:	ldr	r3, [sp, #140]	; 0x8c
   21ac4:	mvn	r0, #0
   21ac8:	mvn	r1, #0
   21acc:	add	r3, r3, r2, lsl #3
   21ad0:	strd	r0, [r3, #8]
   21ad4:	ldrd	r2, [sp, #104]	; 0x68
   21ad8:	ldrd	r0, [sp, #64]	; 0x40
   21adc:	cmp	r2, r0
   21ae0:	sbcs	r1, r3, r1
   21ae4:	blt	21db0 <__assert_fail@plt+0xfdc8>
   21ae8:	ldr	r1, [sp, #140]	; 0x8c
   21aec:	mov	r5, r3
   21af0:	mov	r3, #0
   21af4:	add	r8, r1, r2, lsl #3
   21af8:	mov	r4, r2
   21afc:	str	r3, [sp, #32]
   21b00:	b	21b94 <__assert_fail@plt+0xfbac>
   21b04:	strd	r8, [sp, #24]
   21b08:	mov	r9, r7
   21b0c:	ldrd	r6, [sp, #88]	; 0x58
   21b10:	mov	r8, r5
   21b14:	ldrd	r4, [sp, #96]	; 0x60
   21b18:	subs	r3, sl, r6
   21b1c:	str	r3, [sp, #40]	; 0x28
   21b20:	sbc	r3, fp, r7
   21b24:	str	r3, [sp, #44]	; 0x2c
   21b28:	ldrd	r2, [sp, #40]	; 0x28
   21b2c:	cmp	r2, #21
   21b30:	sbcs	r3, r3, #0
   21b34:	ldr	r3, [sp, #32]
   21b38:	movge	r3, r9
   21b3c:	str	r3, [sp, #32]
   21b40:	ldrd	r2, [sp, #112]	; 0x70
   21b44:	strd	sl, [r8]
   21b48:	cmp	r2, r4
   21b4c:	sbcs	r3, r3, r5
   21b50:	ldrd	r2, [sp, #72]	; 0x48
   21b54:	movge	r6, #1
   21b58:	movlt	r6, #0
   21b5c:	cmp	r4, r2
   21b60:	sbcs	r3, r5, r3
   21b64:	ldr	r3, [sp, #132]	; 0x84
   21b68:	movlt	r6, #0
   21b6c:	andge	r6, r6, #1
   21b70:	ands	r6, r3, r6
   21b74:	bne	21d4c <__assert_fail@plt+0xfd64>
   21b78:	ldrd	r2, [sp, #64]	; 0x40
   21b7c:	subs	r4, r4, #2
   21b80:	sbc	r5, r5, #0
   21b84:	cmp	r4, r2
   21b88:	sbcs	r3, r5, r3
   21b8c:	sub	r8, r8, #16
   21b90:	blt	21db8 <__assert_fail@plt+0xfdd0>
   21b94:	ldrd	r2, [r8, #-8]
   21b98:	ldrd	r6, [r8, #8]
   21b9c:	cmp	r2, r6
   21ba0:	sbcs	r1, r3, r7
   21ba4:	blt	21bb0 <__assert_fail@plt+0xfbc8>
   21ba8:	adds	r6, r2, #1
   21bac:	adc	r7, r3, #0
   21bb0:	subs	r3, r6, r4
   21bb4:	str	r3, [sp, #24]
   21bb8:	add	r1, sp, #416	; 0x1a0
   21bbc:	sbc	r3, r7, r5
   21bc0:	str	r3, [sp, #28]
   21bc4:	ldrd	r2, [sp, #24]
   21bc8:	ldrd	r0, [r1]
   21bcc:	mov	sl, r6
   21bd0:	mov	fp, r7
   21bd4:	cmp	r2, r0
   21bd8:	sbcs	r3, r3, r1
   21bdc:	ldrd	r2, [sp, #56]	; 0x38
   21be0:	movlt	r9, #1
   21be4:	movge	r9, #0
   21be8:	cmp	r6, r2
   21bec:	sbcs	r3, r7, r3
   21bf0:	movge	r9, #0
   21bf4:	andlt	r9, r9, #1
   21bf8:	cmp	r9, #0
   21bfc:	beq	21b40 <__assert_fail@plt+0xfb58>
   21c00:	strd	r6, [sp, #88]	; 0x58
   21c04:	strd	r4, [sp, #96]	; 0x60
   21c08:	mov	r7, r9
   21c0c:	mov	r5, r8
   21c10:	ldrd	r8, [sp, #24]
   21c14:	mov	r2, r8
   21c18:	mov	r3, r9
   21c1c:	mov	r0, sl
   21c20:	mov	r1, fp
   21c24:	bl	216fc <__assert_fail@plt+0xf714>
   21c28:	cmp	r0, #0
   21c2c:	beq	21b04 <__assert_fail@plt+0xfb1c>
   21c30:	ldrd	r2, [sp, #56]	; 0x38
   21c34:	adds	sl, sl, #1
   21c38:	adc	fp, fp, #0
   21c3c:	adds	r8, r8, #1
   21c40:	adc	r9, r9, #0
   21c44:	cmp	sl, r2
   21c48:	add	r2, sp, #416	; 0x1a0
   21c4c:	sbcs	r3, fp, r3
   21c50:	ldrd	r0, [r2]
   21c54:	movlt	r3, #1
   21c58:	movge	r3, #0
   21c5c:	cmp	r8, r0
   21c60:	sbcs	r2, r9, r1
   21c64:	movge	r3, #0
   21c68:	andlt	r3, r3, #1
   21c6c:	cmp	r3, #0
   21c70:	bne	21c14 <__assert_fail@plt+0xfc2c>
   21c74:	b	21b04 <__assert_fail@plt+0xfb1c>
   21c78:	strd	r4, [sp, #56]	; 0x38
   21c7c:	ldrd	r2, [sp, #56]	; 0x38
   21c80:	ldrd	r0, [sp, #80]	; 0x50
   21c84:	cmp	r3, r1
   21c88:	cmpeq	r2, r0
   21c8c:	bne	21cf0 <__assert_fail@plt+0xfd08>
   21c90:	add	r3, sp, #408	; 0x198
   21c94:	add	r1, sp, #416	; 0x1a0
   21c98:	ldrd	r2, [r3]
   21c9c:	ldrd	r0, [r1]
   21ca0:	cmp	r2, r0
   21ca4:	sbcs	r3, r3, r1
   21ca8:	bge	21ce4 <__assert_fail@plt+0xfcfc>
   21cac:	add	r3, sp, #408	; 0x198
   21cb0:	ldr	ip, [sp, #428]	; 0x1ac
   21cb4:	ldrd	r0, [r3]
   21cb8:	add	r3, sp, #416	; 0x1a0
   21cbc:	mov	r2, #43	; 0x2b
   21cc0:	ldrd	r4, [r3]
   21cc4:	ldr	r3, [ip, #4]
   21cc8:	add	r3, r3, r0
   21ccc:	adds	r0, r0, #1
   21cd0:	adc	r1, r1, #0
   21cd4:	cmp	r1, r5
   21cd8:	cmpeq	r0, r4
   21cdc:	strb	r2, [r3]
   21ce0:	bne	21cc4 <__assert_fail@plt+0xfcdc>
   21ce4:	mov	r0, #0
   21ce8:	add	sp, sp, #372	; 0x174
   21cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21cf0:	add	r3, sp, #416	; 0x1a0
   21cf4:	add	r1, sp, #408	; 0x198
   21cf8:	ldrd	r2, [r3]
   21cfc:	ldrd	r0, [r1]
   21d00:	cmp	r3, r1
   21d04:	cmpeq	r2, r0
   21d08:	bne	21938 <__assert_fail@plt+0xf950>
   21d0c:	ldrd	r0, [sp, #80]	; 0x50
   21d10:	ldrd	r4, [sp, #56]	; 0x38
   21d14:	cmp	r0, r4
   21d18:	sbcs	r3, r1, r5
   21d1c:	bge	21ce4 <__assert_fail@plt+0xfcfc>
   21d20:	ldr	ip, [sp, #428]	; 0x1ac
   21d24:	mov	r2, #45	; 0x2d
   21d28:	ldr	r3, [ip]
   21d2c:	add	r3, r3, r0
   21d30:	adds	r0, r0, #1
   21d34:	adc	r1, r1, #0
   21d38:	cmp	r1, r5
   21d3c:	cmpeq	r0, r4
   21d40:	strb	r2, [r3]
   21d44:	bne	21d28 <__assert_fail@plt+0xfd40>
   21d48:	b	21ce4 <__assert_fail@plt+0xfcfc>
   21d4c:	ldr	r2, [sp, #136]	; 0x88
   21d50:	lsl	r3, r4, #3
   21d54:	add	r2, r2, r3
   21d58:	ldrd	r2, [r2]
   21d5c:	cmp	sl, r2
   21d60:	sbcs	r3, fp, r3
   21d64:	blt	21b78 <__assert_fail@plt+0xfb90>
   21d68:	mov	r4, #1
   21d6c:	ldr	r3, [sp, #428]	; 0x1ac
   21d70:	str	r6, [sp, #16]
   21d74:	ldrd	r6, [sp, #24]
   21d78:	str	r3, [sp, #20]
   21d7c:	add	r3, sp, #408	; 0x198
   21d80:	strd	r6, [sp, #8]
   21d84:	ldrd	r2, [r3]
   21d88:	ldrd	r0, [sp, #80]	; 0x50
   21d8c:	strd	r2, [sp]
   21d90:	mov	r2, sl
   21d94:	mov	r3, fp
   21d98:	bl	217d8 <__assert_fail@plt+0xf7f0>
   21d9c:	cmp	r0, #0
   21da0:	beq	220bc <__assert_fail@plt+0x100d4>
   21da4:	mov	r0, #1
   21da8:	add	sp, sp, #372	; 0x174
   21dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21db0:	mov	r3, #0
   21db4:	str	r3, [sp, #32]
   21db8:	ldrd	r0, [sp, #152]	; 0x98
   21dbc:	ldrd	r2, [sp, #72]	; 0x48
   21dc0:	cmp	r0, r2
   21dc4:	sbcs	r1, r1, r3
   21dc8:	bge	220a0 <__assert_fail@plt+0x100b8>
   21dcc:	subs	r3, r2, #1
   21dd0:	str	r3, [sp, #72]	; 0x48
   21dd4:	ldr	r3, [sp, #76]	; 0x4c
   21dd8:	ldr	r2, [sp, #72]	; 0x48
   21ddc:	sbc	r3, r3, #0
   21de0:	str	r3, [sp, #76]	; 0x4c
   21de4:	ldr	r3, [sp, #136]	; 0x88
   21de8:	mvn	r0, #0
   21dec:	mvn	r1, #-2147483648	; 0x80000000
   21df0:	add	r3, r3, r2, lsl #3
   21df4:	strd	r0, [r3, #-8]
   21df8:	ldrd	r2, [sp, #112]	; 0x70
   21dfc:	ldrd	r0, [sp, #160]	; 0xa0
   21e00:	cmp	r2, r0
   21e04:	sbcs	r1, r3, r1
   21e08:	bge	22084 <__assert_fail@plt+0x1009c>
   21e0c:	adds	r3, r2, #1
   21e10:	str	r3, [sp, #112]	; 0x70
   21e14:	ldr	r3, [sp, #116]	; 0x74
   21e18:	ldr	r2, [sp, #112]	; 0x70
   21e1c:	adc	r3, r3, #0
   21e20:	str	r3, [sp, #116]	; 0x74
   21e24:	ldr	r3, [sp, #136]	; 0x88
   21e28:	mvn	r0, #0
   21e2c:	mvn	r1, #-2147483648	; 0x80000000
   21e30:	add	r3, r3, r2, lsl #3
   21e34:	strd	r0, [r3, #8]
   21e38:	ldrd	r0, [sp, #112]	; 0x70
   21e3c:	ldrd	r2, [sp, #72]	; 0x48
   21e40:	cmp	r0, r2
   21e44:	sbcs	r3, r1, r3
   21e48:	blt	21fd4 <__assert_fail@plt+0xffec>
   21e4c:	ldr	r3, [sp, #172]	; 0xac
   21e50:	mov	r8, r0
   21e54:	mvn	r3, r3
   21e58:	and	r3, r3, #1
   21e5c:	str	r3, [sp, #120]	; 0x78
   21e60:	ldr	r3, [sp, #136]	; 0x88
   21e64:	mov	r9, r1
   21e68:	add	r7, r3, r0, lsl #3
   21e6c:	b	21ef8 <__assert_fail@plt+0xff10>
   21e70:	ldrd	r4, [sp, #88]	; 0x58
   21e74:	ldrd	r8, [sp, #96]	; 0x60
   21e78:	ldrd	r0, [sp, #64]	; 0x40
   21e7c:	subs	r3, r4, sl
   21e80:	str	r3, [sp, #48]	; 0x30
   21e84:	sbc	r3, r5, fp
   21e88:	str	r3, [sp, #52]	; 0x34
   21e8c:	ldrd	r2, [sp, #48]	; 0x30
   21e90:	ldr	r7, [sp, #128]	; 0x80
   21e94:	cmp	r2, #21
   21e98:	sbcs	r3, r3, #0
   21e9c:	ldr	r3, [sp, #32]
   21ea0:	movge	r3, #1
   21ea4:	str	r3, [sp, #32]
   21ea8:	ldrd	r2, [sp, #104]	; 0x68
   21eac:	strd	sl, [r7]
   21eb0:	cmp	r2, r8
   21eb4:	sbcs	r3, r3, r9
   21eb8:	movge	r3, #1
   21ebc:	movlt	r3, #0
   21ec0:	cmp	r8, r0
   21ec4:	sbcs	r2, r9, r1
   21ec8:	ldr	r2, [sp, #120]	; 0x78
   21ecc:	movlt	r3, #0
   21ed0:	andge	r3, r3, #1
   21ed4:	ands	r3, r2, r3
   21ed8:	bne	21fb4 <__assert_fail@plt+0xffcc>
   21edc:	ldrd	r2, [sp, #72]	; 0x48
   21ee0:	subs	r8, r8, #2
   21ee4:	sbc	r9, r9, #0
   21ee8:	cmp	r8, r2
   21eec:	sbcs	r3, r9, r3
   21ef0:	sub	r7, r7, #16
   21ef4:	blt	21fd4 <__assert_fail@plt+0xffec>
   21ef8:	ldrd	r4, [r7, #-8]
   21efc:	ldrd	r2, [r7, #8]
   21f00:	cmp	r4, r2
   21f04:	sbcs	r1, r5, r3
   21f08:	blt	21f14 <__assert_fail@plt+0xff2c>
   21f0c:	subs	r4, r2, #1
   21f10:	sbc	r5, r3, #0
   21f14:	subs	r3, r4, r8
   21f18:	mov	sl, r4
   21f1c:	mov	fp, r5
   21f20:	str	r3, [sp, #24]
   21f24:	sbc	r3, r5, r9
   21f28:	str	r3, [sp, #28]
   21f2c:	strd	r4, [sp, #88]	; 0x58
   21f30:	strd	r8, [sp, #96]	; 0x60
   21f34:	str	r7, [sp, #128]	; 0x80
   21f38:	ldrd	r2, [sp, #80]	; 0x50
   21f3c:	ldrd	r4, [sp, #24]
   21f40:	cmp	r2, sl
   21f44:	add	r2, sp, #408	; 0x198
   21f48:	sbcs	r3, r3, fp
   21f4c:	ldrd	r0, [r2]
   21f50:	movlt	r3, #1
   21f54:	movge	r3, #0
   21f58:	cmp	r0, r4
   21f5c:	sbcs	r2, r1, r5
   21f60:	movge	r3, #0
   21f64:	andlt	r3, r3, #1
   21f68:	cmp	r3, #0
   21f6c:	beq	21e70 <__assert_fail@plt+0xfe88>
   21f70:	ldrd	r2, [sp, #24]
   21f74:	subs	r6, sl, #1
   21f78:	sbc	r7, fp, #0
   21f7c:	subs	r9, r2, #1
   21f80:	sbc	r5, r3, #0
   21f84:	mov	r1, r7
   21f88:	mov	r3, r5
   21f8c:	mov	r2, r9
   21f90:	mov	r0, r6
   21f94:	bl	216fc <__assert_fail@plt+0xf714>
   21f98:	cmp	r0, #0
   21f9c:	beq	21e70 <__assert_fail@plt+0xfe88>
   21fa0:	str	r9, [sp, #24]
   21fa4:	mov	sl, r6
   21fa8:	str	r5, [sp, #28]
   21fac:	mov	fp, r7
   21fb0:	b	21f38 <__assert_fail@plt+0xff50>
   21fb4:	ldr	r1, [sp, #140]	; 0x8c
   21fb8:	lsl	r2, r8, #3
   21fbc:	ldrd	r0, [r1, r2]
   21fc0:	cmp	r0, sl
   21fc4:	sbcs	r2, r1, fp
   21fc8:	blt	21edc <__assert_fail@plt+0xfef4>
   21fcc:	mov	r6, r3
   21fd0:	b	21d68 <__assert_fail@plt+0xfd80>
   21fd4:	ldr	r3, [sp, #168]	; 0xa8
   21fd8:	cmp	r3, #0
   21fdc:	bne	22020 <__assert_fail@plt+0x10038>
   21fe0:	ldr	r3, [sp, #428]	; 0x1ac
   21fe4:	ldrb	r6, [r3, #16]
   21fe8:	ldrd	r2, [sp, #144]	; 0x90
   21fec:	cmp	r2, #201	; 0xc9
   21ff0:	sbcs	r3, r3, #0
   21ff4:	ldr	r3, [sp, #32]
   21ff8:	movlt	r6, #0
   21ffc:	andge	r6, r6, #1
   22000:	ands	r6, r3, r6
   22004:	bne	220f8 <__assert_fail@plt+0x10110>
   22008:	ldr	r3, [sp, #428]	; 0x1ac
   2200c:	ldrd	r0, [sp, #144]	; 0x90
   22010:	ldrd	r2, [r3, #24]
   22014:	cmp	r0, r2
   22018:	sbcs	r3, r1, r3
   2201c:	bge	225fc <__assert_fail@plt+0x10614>
   22020:	ldr	r3, [sp, #144]	; 0x90
   22024:	adds	r3, r3, #1
   22028:	str	r3, [sp, #144]	; 0x90
   2202c:	ldr	r3, [sp, #148]	; 0x94
   22030:	adc	r3, r3, #0
   22034:	str	r3, [sp, #148]	; 0x94
   22038:	b	21a54 <__assert_fail@plt+0xfa6c>
   2203c:	add	r3, sp, #408	; 0x198
   22040:	strd	r4, [sp, #80]	; 0x50
   22044:	strd	r6, [r3]
   22048:	b	21c7c <__assert_fail@plt+0xfc94>
   2204c:	ldr	r3, [sp, #104]	; 0x68
   22050:	subs	r3, r3, #1
   22054:	str	r3, [sp, #104]	; 0x68
   22058:	ldr	r3, [sp, #108]	; 0x6c
   2205c:	sbc	r3, r3, #0
   22060:	str	r3, [sp, #108]	; 0x6c
   22064:	b	21ad4 <__assert_fail@plt+0xfaec>
   22068:	ldr	r3, [sp, #64]	; 0x40
   2206c:	adds	r3, r3, #1
   22070:	str	r3, [sp, #64]	; 0x40
   22074:	ldr	r3, [sp, #68]	; 0x44
   22078:	adc	r3, r3, #0
   2207c:	str	r3, [sp, #68]	; 0x44
   22080:	b	21a94 <__assert_fail@plt+0xfaac>
   22084:	ldr	r3, [sp, #112]	; 0x70
   22088:	subs	r3, r3, #1
   2208c:	str	r3, [sp, #112]	; 0x70
   22090:	ldr	r3, [sp, #116]	; 0x74
   22094:	sbc	r3, r3, #0
   22098:	str	r3, [sp, #116]	; 0x74
   2209c:	b	21e38 <__assert_fail@plt+0xfe50>
   220a0:	ldr	r3, [sp, #72]	; 0x48
   220a4:	adds	r3, r3, #1
   220a8:	str	r3, [sp, #72]	; 0x48
   220ac:	ldr	r3, [sp, #76]	; 0x4c
   220b0:	adc	r3, r3, #0
   220b4:	str	r3, [sp, #76]	; 0x4c
   220b8:	b	21df8 <__assert_fail@plt+0xfe10>
   220bc:	ldr	r3, [sp, #428]	; 0x1ac
   220c0:	str	r4, [sp, #16]
   220c4:	str	r3, [sp, #20]
   220c8:	add	r3, sp, #416	; 0x1a0
   220cc:	mov	r0, sl
   220d0:	ldrd	r2, [r3]
   220d4:	mov	r1, fp
   220d8:	strd	r6, [sp]
   220dc:	strd	r2, [sp, #8]
   220e0:	ldrd	r2, [sp, #56]	; 0x38
   220e4:	bl	217d8 <__assert_fail@plt+0xf7f0>
   220e8:	cmp	r0, #0
   220ec:	bne	21da4 <__assert_fail@plt+0xfdbc>
   220f0:	add	sp, sp, #372	; 0x174
   220f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220f8:	ldrd	r2, [sp, #104]	; 0x68
   220fc:	ldrd	r0, [sp, #64]	; 0x40
   22100:	cmp	r2, r0
   22104:	sbcs	r1, r3, r1
   22108:	blt	22344 <__assert_fail@plt+0x1035c>
   2210c:	subs	r1, r2, #2
   22110:	sbc	r3, r3, #0
   22114:	str	r3, [sp, #236]	; 0xec
   22118:	ldr	r3, [sp, #208]	; 0xd0
   2211c:	mov	r7, #2
   22120:	subs	r7, r7, r3
   22124:	ldr	r3, [sp, #212]	; 0xd4
   22128:	mov	r8, #0
   2212c:	sbc	r8, r8, r3
   22130:	ldr	r3, [sp, #140]	; 0x8c
   22134:	mov	r2, #0
   22138:	add	r9, r3, #16
   2213c:	mov	r3, #0
   22140:	str	r1, [sp, #232]	; 0xe8
   22144:	strd	r2, [sp, #32]
   22148:	str	r6, [sp, #120]	; 0x78
   2214c:	str	r9, [sp, #96]	; 0x60
   22150:	ldrd	r4, [sp, #232]	; 0xe8
   22154:	str	r7, [sp, #88]	; 0x58
   22158:	str	r8, [sp, #128]	; 0x80
   2215c:	b	22178 <__assert_fail@plt+0x10190>
   22160:	ldrd	r2, [sp, #64]	; 0x40
   22164:	cmp	r4, r2
   22168:	sbcs	r3, r5, r3
   2216c:	blt	22520 <__assert_fail@plt+0x10538>
   22170:	subs	r4, r4, #2
   22174:	sbc	r5, r5, #0
   22178:	ldr	r2, [sp, #96]	; 0x60
   2217c:	lsl	r3, r4, #3
   22180:	adds	ip, r4, #2
   22184:	ldrd	sl, [r2, r3]
   22188:	ldr	r3, [sp, #88]	; 0x58
   2218c:	ldrd	r6, [sp, #80]	; 0x50
   22190:	adc	lr, r5, #0
   22194:	adds	r2, r3, r4
   22198:	ldr	r3, [sp, #128]	; 0x80
   2219c:	adc	r3, r3, r5
   221a0:	subs	r1, sl, r6
   221a4:	asr	r0, r3, #31
   221a8:	sbc	r6, fp, r7
   221ac:	adds	r1, r1, r1
   221b0:	adc	r6, r6, r6
   221b4:	subs	r8, r1, r2
   221b8:	eor	r2, r2, r0
   221bc:	sbc	r9, r6, r3
   221c0:	subs	r2, r2, r0
   221c4:	eor	r3, r3, r0
   221c8:	sbc	r3, r3, r0
   221cc:	ldrd	r0, [sp, #144]	; 0x90
   221d0:	adds	r2, r2, r0
   221d4:	adc	r3, r3, r1
   221d8:	adds	r6, r2, r2
   221dc:	adc	r1, r3, r3
   221e0:	adds	r6, r6, r2
   221e4:	adc	r1, r1, r3
   221e8:	lsl	r3, r6, #2
   221ec:	lsl	r1, r1, #2
   221f0:	orr	r1, r1, r6, lsr #30
   221f4:	mov	r2, r3
   221f8:	mov	r6, r3
   221fc:	mov	r3, r1
   22200:	ldrd	r0, [sp, #32]
   22204:	cmp	r6, r0
   22208:	sbcs	r6, r3, r1
   2220c:	movlt	r2, r0
   22210:	movlt	r3, r1
   22214:	cmp	r2, r8
   22218:	sbcs	r3, r3, r9
   2221c:	bge	22160 <__assert_fail@plt+0x10178>
   22220:	ldrd	r2, [sp, #184]	; 0xb8
   22224:	ldrd	r0, [sp, #56]	; 0x38
   22228:	cmp	r2, sl
   2222c:	sbcs	r3, r3, fp
   22230:	movlt	r3, #1
   22234:	movge	r3, #0
   22238:	cmp	sl, r0
   2223c:	sbcs	r2, fp, r1
   22240:	movge	r3, #0
   22244:	andlt	r3, r3, #1
   22248:	cmp	r3, #0
   2224c:	beq	22160 <__assert_fail@plt+0x10178>
   22250:	subs	r3, sl, ip
   22254:	str	r3, [sp, #24]
   22258:	sbc	r3, fp, lr
   2225c:	str	r3, [sp, #28]
   22260:	ldrd	r0, [sp, #24]
   22264:	ldrd	r2, [sp, #200]	; 0xc8
   22268:	cmp	r2, r0
   2226c:	add	r2, sp, #416	; 0x1a0
   22270:	sbcs	r3, r3, r1
   22274:	ldrd	r6, [r2]
   22278:	movlt	r3, #1
   2227c:	movge	r3, #0
   22280:	cmp	r0, r6
   22284:	sbcs	r2, r1, r7
   22288:	movge	r3, #0
   2228c:	andlt	r3, r3, #1
   22290:	cmp	r3, #0
   22294:	beq	22160 <__assert_fail@plt+0x10178>
   22298:	subs	r3, sl, #1
   2229c:	str	r3, [sp, #288]	; 0x120
   222a0:	sbc	r3, fp, #0
   222a4:	str	r3, [sp, #292]	; 0x124
   222a8:	add	r2, sp, #336	; 0x150
   222ac:	subs	r3, sl, #21
   222b0:	str	r3, [sp, #280]	; 0x118
   222b4:	sbc	r3, fp, #0
   222b8:	strd	r4, [r2]
   222bc:	subs	r6, r0, sl
   222c0:	str	r3, [sp, #284]	; 0x11c
   222c4:	add	r2, sp, #288	; 0x120
   222c8:	mov	r3, r1
   222cc:	sbc	r3, r3, fp
   222d0:	strd	r8, [sp, #232]	; 0xe8
   222d4:	strd	sl, [sp, #248]	; 0xf8
   222d8:	mov	r9, r6
   222dc:	ldr	r5, [sp, #88]	; 0x58
   222e0:	ldrd	r6, [r2]
   222e4:	mov	fp, r3
   222e8:	b	22308 <__assert_fail@plt+0x10320>
   222ec:	add	r3, sp, #280	; 0x118
   222f0:	subs	r6, r6, #1
   222f4:	ldrd	r2, [r3]
   222f8:	sbc	r7, r7, #0
   222fc:	cmp	r3, r7
   22300:	cmpeq	r2, r6
   22304:	beq	2283c <__assert_fail@plt+0x10854>
   22308:	adds	r2, r9, r6
   2230c:	adc	r3, fp, r7
   22310:	mov	r0, r6
   22314:	mov	r1, r7
   22318:	bl	216fc <__assert_fail@plt+0xf714>
   2231c:	cmp	r0, #0
   22320:	bne	222ec <__assert_fail@plt+0x10304>
   22324:	add	r3, sp, #288	; 0x120
   22328:	str	r5, [sp, #88]	; 0x58
   2232c:	strd	r6, [r3]
   22330:	add	r3, sp, #336	; 0x150
   22334:	ldrd	r8, [sp, #232]	; 0xe8
   22338:	ldrd	sl, [sp, #248]	; 0xf8
   2233c:	ldrd	r4, [r3]
   22340:	b	22160 <__assert_fail@plt+0x10178>
   22344:	ldrd	r2, [sp, #112]	; 0x70
   22348:	ldrd	r0, [sp, #72]	; 0x48
   2234c:	cmp	r2, r0
   22350:	sbcs	r3, r3, r1
   22354:	blt	22008 <__assert_fail@plt+0x10020>
   22358:	ldrd	r2, [sp, #112]	; 0x70
   2235c:	mov	r8, #2
   22360:	mov	r9, #0
   22364:	subs	r1, r2, #2
   22368:	sbc	r3, r3, #0
   2236c:	str	r3, [sp, #244]	; 0xf4
   22370:	ldr	r3, [sp, #216]	; 0xd8
   22374:	mov	r2, #0
   22378:	subs	r8, r8, r3
   2237c:	ldr	r3, [sp, #220]	; 0xdc
   22380:	str	r1, [sp, #240]	; 0xf0
   22384:	sbc	r9, r9, r3
   22388:	ldr	r3, [sp, #136]	; 0x88
   2238c:	ldrd	r4, [sp, #240]	; 0xf0
   22390:	add	r6, r3, #16
   22394:	mov	r3, #0
   22398:	str	r6, [sp, #88]	; 0x58
   2239c:	strd	r2, [sp, #120]	; 0x78
   223a0:	str	r8, [sp, #96]	; 0x60
   223a4:	str	r9, [sp, #128]	; 0x80
   223a8:	b	223b4 <__assert_fail@plt+0x103cc>
   223ac:	subs	r4, r4, #2
   223b0:	sbc	r5, r5, #0
   223b4:	ldr	r2, [sp, #88]	; 0x58
   223b8:	lsl	r3, r4, #3
   223bc:	adds	lr, r4, #2
   223c0:	ldrd	sl, [r2, r3]
   223c4:	adc	r3, r5, #0
   223c8:	str	r3, [sp, #32]
   223cc:	ldr	r3, [sp, #96]	; 0x60
   223d0:	ldr	r2, [sp, #128]	; 0x80
   223d4:	adds	r3, r3, r4
   223d8:	ldr	r1, [sp, #56]	; 0x38
   223dc:	adc	r2, r2, r5
   223e0:	ldr	r0, [sp, #60]	; 0x3c
   223e4:	subs	r1, r1, sl
   223e8:	sbc	ip, r0, fp
   223ec:	asr	r0, r2, #31
   223f0:	adds	r1, r1, r1
   223f4:	adc	ip, ip, ip
   223f8:	adds	r8, r1, r3
   223fc:	eor	r3, r3, r0
   22400:	adc	r9, ip, r2
   22404:	subs	r3, r3, r0
   22408:	eor	r2, r2, r0
   2240c:	sbc	r2, r2, r0
   22410:	ldrd	r0, [sp, #144]	; 0x90
   22414:	adds	r3, r3, r0
   22418:	adc	r2, r2, r1
   2241c:	adds	r1, r3, r3
   22420:	mov	ip, r0
   22424:	adc	r0, r2, r2
   22428:	adds	r6, r1, r3
   2242c:	adc	r7, r0, r2
   22430:	lsl	r2, r6, #2
   22434:	lsl	r3, r7, #2
   22438:	orr	r3, r3, r6, lsr #30
   2243c:	mov	r7, r3
   22440:	cmp	r2, r8
   22444:	sbcs	r3, r7, r9
   22448:	mov	r6, r2
   2244c:	bge	224cc <__assert_fail@plt+0x104e4>
   22450:	ldrd	r2, [sp, #120]	; 0x78
   22454:	ldrd	r0, [sp, #80]	; 0x50
   22458:	cmp	r2, r8
   2245c:	sbcs	r3, r3, r9
   22460:	movlt	r3, #1
   22464:	movge	r3, #0
   22468:	cmp	r0, sl
   2246c:	sbcs	r2, r1, fp
   22470:	movge	r3, #0
   22474:	andlt	r3, r3, #1
   22478:	cmp	r3, #0
   2247c:	beq	224cc <__assert_fail@plt+0x104e4>
   22480:	subs	r3, sl, lr
   22484:	str	r3, [sp, #24]
   22488:	ldr	r3, [sp, #32]
   2248c:	sbc	r3, fp, r3
   22490:	str	r3, [sp, #28]
   22494:	ldrd	r2, [sp, #176]	; 0xb0
   22498:	cmp	sl, r2
   2249c:	sbcs	r3, fp, r3
   224a0:	add	r3, sp, #408	; 0x198
   224a4:	movlt	ip, #1
   224a8:	ldrd	r0, [r3]
   224ac:	ldrd	r2, [sp, #24]
   224b0:	movge	ip, #0
   224b4:	cmp	r0, r2
   224b8:	sbcs	r3, r1, r3
   224bc:	movge	r3, #0
   224c0:	andlt	r3, ip, #1
   224c4:	cmp	r3, #0
   224c8:	bne	22558 <__assert_fail@plt+0x10570>
   224cc:	ldrd	r2, [sp, #72]	; 0x48
   224d0:	cmp	r4, r2
   224d4:	sbcs	r3, r5, r3
   224d8:	bge	223ac <__assert_fail@plt+0x103c4>
   224dc:	add	r3, sp, #256	; 0x100
   224e0:	strd	r4, [sp, #240]	; 0xf0
   224e4:	strd	r8, [r3]
   224e8:	add	r3, sp, #272	; 0x110
   224ec:	strd	r6, [r3]
   224f0:	ldrd	r2, [sp, #120]	; 0x78
   224f4:	orrs	r3, r2, r3
   224f8:	beq	22008 <__assert_fail@plt+0x10020>
   224fc:	ldr	r3, [sp, #304]	; 0x130
   22500:	ldr	sl, [sp, #296]	; 0x128
   22504:	ldr	fp, [sp, #300]	; 0x12c
   22508:	str	r3, [sp, #24]
   2250c:	ldr	r3, [sp, #308]	; 0x134
   22510:	str	r3, [sp, #28]
   22514:	mov	r6, #0
   22518:	mov	r4, #1
   2251c:	b	21d6c <__assert_fail@plt+0xfd84>
   22520:	ldrd	r2, [sp, #32]
   22524:	strd	r8, [sp, #248]	; 0xf8
   22528:	ldr	r6, [sp, #120]	; 0x78
   2252c:	orrs	r3, r2, r3
   22530:	strd	r4, [sp, #232]	; 0xe8
   22534:	beq	22344 <__assert_fail@plt+0x1035c>
   22538:	ldr	r3, [sp, #304]	; 0x130
   2253c:	ldr	sl, [sp, #296]	; 0x128
   22540:	ldr	fp, [sp, #300]	; 0x12c
   22544:	str	r3, [sp, #24]
   22548:	ldr	r3, [sp, #308]	; 0x134
   2254c:	str	r3, [sp, #28]
   22550:	mov	r4, #0
   22554:	b	21d6c <__assert_fail@plt+0xfd84>
   22558:	ldrd	r2, [sp, #24]
   2255c:	ldrd	r0, [sp, #192]	; 0xc0
   22560:	cmp	r2, r0
   22564:	sbcs	r3, r3, r1
   22568:	bge	224cc <__assert_fail@plt+0x104e4>
   2256c:	adds	r3, sl, #20
   22570:	str	r3, [sp, #264]	; 0x108
   22574:	adc	r3, fp, #0
   22578:	str	r3, [sp, #268]	; 0x10c
   2257c:	ldrd	r2, [sp, #24]
   22580:	strd	r4, [sp, #240]	; 0xf0
   22584:	strd	sl, [sp, #32]
   22588:	subs	r1, r2, sl
   2258c:	add	r2, sp, #256	; 0x100
   22590:	sbc	r3, r3, fp
   22594:	strd	r6, [r2]
   22598:	mov	r5, r1
   2259c:	mov	r7, r3
   225a0:	b	225d4 <__assert_fail@plt+0x105ec>
   225a4:	ldr	r3, [sp, #32]
   225a8:	adds	r3, r3, #1
   225ac:	str	r3, [sp, #32]
   225b0:	ldr	r3, [sp, #36]	; 0x24
   225b4:	adc	r3, r3, #0
   225b8:	str	r3, [sp, #36]	; 0x24
   225bc:	add	r3, sp, #264	; 0x108
   225c0:	ldrd	r0, [sp, #32]
   225c4:	ldrd	r2, [r3]
   225c8:	cmp	r3, r1
   225cc:	cmpeq	r2, r0
   225d0:	beq	2280c <__assert_fail@plt+0x10824>
   225d4:	ldrd	r0, [sp, #32]
   225d8:	adds	r2, r5, r0
   225dc:	adc	r3, r7, r1
   225e0:	bl	216fc <__assert_fail@plt+0xf714>
   225e4:	cmp	r0, #0
   225e8:	bne	225a4 <__assert_fail@plt+0x105bc>
   225ec:	add	r3, sp, #256	; 0x100
   225f0:	ldrd	r4, [sp, #240]	; 0xf0
   225f4:	ldrd	r6, [r3]
   225f8:	b	224cc <__assert_fail@plt+0x104e4>
   225fc:	ldrd	r0, [sp, #64]	; 0x40
   22600:	ldrd	r2, [sp, #104]	; 0x68
   22604:	cmp	r2, r0
   22608:	sbcs	r1, r3, r1
   2260c:	mvn	r0, #0
   22610:	mvn	r1, #0
   22614:	blt	226ac <__assert_fail@plt+0x106c4>
   22618:	ldr	lr, [sp, #140]	; 0x8c
   2261c:	strd	sl, [sp, #32]
   22620:	lsl	ip, r2, #3
   22624:	ldrd	sl, [sp, #56]	; 0x38
   22628:	ldrd	r4, [lr, ip]
   2262c:	cmp	sl, r4
   22630:	sbcs	ip, fp, r5
   22634:	add	ip, sp, #416	; 0x1a0
   22638:	movlt	r5, fp
   2263c:	movlt	r4, sl
   22640:	ldrd	sl, [ip]
   22644:	subs	r6, r4, r2
   22648:	sbc	r7, r5, r3
   2264c:	cmp	sl, r6
   22650:	sbcs	ip, fp, r7
   22654:	bge	22670 <__assert_fail@plt+0x10688>
   22658:	ldr	ip, [sp, #416]	; 0x1a0
   2265c:	mov	r6, sl
   22660:	adds	r4, r2, ip
   22664:	ldr	ip, [sp, #420]	; 0x1a4
   22668:	mov	r7, fp
   2266c:	adc	r5, r3, ip
   22670:	adds	r8, r4, r6
   22674:	adc	r9, r5, r7
   22678:	cmp	r0, r8
   2267c:	sbcs	ip, r1, r9
   22680:	strlt	r4, [sp, #312]	; 0x138
   22684:	strlt	r5, [sp, #316]	; 0x13c
   22688:	ldrd	r4, [sp, #64]	; 0x40
   2268c:	movlt	r0, r8
   22690:	movlt	r1, r9
   22694:	subs	r2, r2, #2
   22698:	sbc	r3, r3, #0
   2269c:	cmp	r2, r4
   226a0:	sbcs	ip, r3, r5
   226a4:	bge	22620 <__assert_fail@plt+0x10638>
   226a8:	ldrd	sl, [sp, #32]
   226ac:	ldrd	r4, [sp, #72]	; 0x48
   226b0:	ldrd	r2, [sp, #112]	; 0x70
   226b4:	cmp	r2, r4
   226b8:	sbcs	ip, r3, r5
   226bc:	mvn	r4, #0
   226c0:	mvn	r5, #-2147483648	; 0x80000000
   226c4:	blt	22764 <__assert_fail@plt+0x1077c>
   226c8:	ldr	lr, [sp, #136]	; 0x88
   226cc:	strd	r0, [sp, #32]
   226d0:	lsl	ip, r2, #3
   226d4:	ldrd	r0, [sp, #80]	; 0x50
   226d8:	ldrd	r6, [lr, ip]
   226dc:	cmp	r6, r0
   226e0:	sbcs	r1, r7, r1
   226e4:	add	r1, sp, #408	; 0x198
   226e8:	ldrdlt	r6, [sp, #80]	; 0x50
   226ec:	ldrd	r0, [r1]
   226f0:	subs	r8, r6, r2
   226f4:	sbc	r9, r7, r3
   226f8:	cmp	r8, r0
   226fc:	sbcs	r1, r9, r1
   22700:	bge	2271c <__assert_fail@plt+0x10734>
   22704:	ldr	r1, [sp, #408]	; 0x198
   22708:	adds	r6, r2, r1
   2270c:	ldr	r1, [sp, #412]	; 0x19c
   22710:	adc	r7, r3, r1
   22714:	add	r1, sp, #408	; 0x198
   22718:	ldrd	r8, [r1]
   2271c:	adds	r1, r6, r8
   22720:	str	r1, [sp, #224]	; 0xe0
   22724:	adc	r1, r7, r9
   22728:	str	r1, [sp, #228]	; 0xe4
   2272c:	ldrd	r0, [sp, #224]	; 0xe0
   22730:	cmp	r0, r4
   22734:	sbcs	ip, r1, r5
   22738:	movlt	r4, r0
   2273c:	movlt	r5, r1
   22740:	ldrd	r0, [sp, #72]	; 0x48
   22744:	movlt	sl, r6
   22748:	movlt	fp, r7
   2274c:	subs	r2, r2, #2
   22750:	sbc	r3, r3, #0
   22754:	cmp	r2, r0
   22758:	sbcs	r1, r3, r1
   2275c:	bge	226d0 <__assert_fail@plt+0x106e8>
   22760:	ldrd	r0, [sp, #32]
   22764:	ldrd	r6, [sp, #56]	; 0x38
   22768:	ldr	r2, [sp, #416]	; 0x1a0
   2276c:	ldr	ip, [sp, #420]	; 0x1a4
   22770:	adds	r3, r6, r2
   22774:	adc	r2, r7, ip
   22778:	subs	r3, r3, r4
   2277c:	ldrd	r6, [sp, #80]	; 0x50
   22780:	str	r3, [sp, #320]	; 0x140
   22784:	sbc	r3, r2, r5
   22788:	ldr	r2, [sp, #408]	; 0x198
   2278c:	ldr	ip, [sp, #412]	; 0x19c
   22790:	str	r3, [sp, #324]	; 0x144
   22794:	adds	r3, r6, r2
   22798:	adc	r2, r7, ip
   2279c:	subs	r3, r0, r3
   227a0:	str	r3, [sp, #328]	; 0x148
   227a4:	sbc	r3, r1, r2
   227a8:	str	r3, [sp, #332]	; 0x14c
   227ac:	add	ip, sp, #328	; 0x148
   227b0:	add	r3, sp, #320	; 0x140
   227b4:	ldrd	r6, [ip]
   227b8:	ldrd	r2, [r3]
   227bc:	cmp	r2, r6
   227c0:	sbcs	r3, r3, r7
   227c4:	bge	227f0 <__assert_fail@plt+0x10808>
   227c8:	ldr	r3, [sp, #312]	; 0x138
   227cc:	mov	r6, #1
   227d0:	subs	r2, r0, r3
   227d4:	mov	sl, r3
   227d8:	ldr	r3, [sp, #316]	; 0x13c
   227dc:	str	r2, [sp, #24]
   227e0:	sbc	r2, r1, r3
   227e4:	str	r2, [sp, #28]
   227e8:	mov	fp, r3
   227ec:	b	22550 <__assert_fail@plt+0x10568>
   227f0:	subs	r3, r4, sl
   227f4:	str	r3, [sp, #24]
   227f8:	sbc	r3, r5, fp
   227fc:	str	r3, [sp, #28]
   22800:	mov	r6, #0
   22804:	mov	r4, #1
   22808:	b	21d6c <__assert_fail@plt+0xfd84>
   2280c:	ldrd	r4, [sp, #240]	; 0xf0
   22810:	ldrd	r2, [sp, #72]	; 0x48
   22814:	cmp	r4, r2
   22818:	sbcs	r3, r5, r3
   2281c:	blt	22514 <__assert_fail@plt+0x1052c>
   22820:	ldrd	r2, [sp, #24]
   22824:	strd	r8, [sp, #120]	; 0x78
   22828:	str	sl, [sp, #296]	; 0x128
   2282c:	str	r2, [sp, #304]	; 0x130
   22830:	str	r3, [sp, #308]	; 0x134
   22834:	str	fp, [sp, #300]	; 0x12c
   22838:	b	223ac <__assert_fail@plt+0x103c4>
   2283c:	add	r3, sp, #288	; 0x120
   22840:	str	r5, [sp, #88]	; 0x58
   22844:	strd	r6, [r3]
   22848:	add	r3, sp, #336	; 0x150
   2284c:	ldrd	r8, [sp, #232]	; 0xe8
   22850:	ldrd	r4, [r3]
   22854:	ldrd	r2, [sp, #64]	; 0x40
   22858:	ldrd	sl, [sp, #248]	; 0xf8
   2285c:	cmp	r4, r2
   22860:	sbcs	r3, r5, r3
   22864:	blt	22884 <__assert_fail@plt+0x1089c>
   22868:	ldrd	r2, [sp, #24]
   2286c:	strd	r8, [sp, #32]
   22870:	str	sl, [sp, #296]	; 0x128
   22874:	str	r2, [sp, #304]	; 0x130
   22878:	str	r3, [sp, #308]	; 0x134
   2287c:	str	fp, [sp, #300]	; 0x12c
   22880:	b	22170 <__assert_fail@plt+0x10188>
   22884:	ldr	r6, [sp, #120]	; 0x78
   22888:	b	22550 <__assert_fail@plt+0x10568>
   2288c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22890:	mov	sl, r0
   22894:	ldr	r5, [pc, #308]	; 229d0 <__assert_fail@plt+0x109e8>
   22898:	ldrb	r0, [r0]
   2289c:	sub	sp, sp, #60	; 0x3c
   228a0:	ldr	r3, [r5]
   228a4:	cmp	r0, #0
   228a8:	str	r3, [sp, #52]	; 0x34
   228ac:	mov	r4, r2
   228b0:	ldrd	r6, [sp, #96]	; 0x60
   228b4:	ldrd	r8, [sp, #104]	; 0x68
   228b8:	beq	228e4 <__assert_fail@plt+0x108fc>
   228bc:	cmp	r2, #0
   228c0:	beq	22944 <__assert_fail@plt+0x1095c>
   228c4:	mov	r2, r1
   228c8:	mov	r3, r4
   228cc:	ldr	r1, [pc, #256]	; 229d4 <__assert_fail@plt+0x109ec>
   228d0:	mov	r0, #1
   228d4:	bl	11e14 <__printf_chk@plt>
   228d8:	ldr	r3, [pc, #248]	; 229d8 <__assert_fail@plt+0x109f0>
   228dc:	str	r4, [r3]
   228e0:	b	22908 <__assert_fail@plt+0x10920>
   228e4:	cmp	r2, #0
   228e8:	beq	229a0 <__assert_fail@plt+0x109b8>
   228ec:	ldr	r3, [pc, #228]	; 229d8 <__assert_fail@plt+0x109f0>
   228f0:	ldr	r3, [r3]
   228f4:	cmp	r3, r4
   228f8:	beq	2298c <__assert_fail@plt+0x109a4>
   228fc:	ldr	r1, [pc, #216]	; 229dc <__assert_fail@plt+0x109f4>
   22900:	mov	r0, #1
   22904:	bl	11e14 <__printf_chk@plt>
   22908:	ldr	r3, [pc, #208]	; 229e0 <__assert_fail@plt+0x109f8>
   2290c:	add	r0, sp, #4
   22910:	ldm	r3, {r4, fp}
   22914:	adds	r2, r4, r6
   22918:	adc	r3, fp, r7
   2291c:	cmp	r6, r8
   22920:	sbcs	r1, r7, r9
   22924:	blt	2295c <__assert_fail@plt+0x10974>
   22928:	bl	1f490 <__assert_fail@plt+0xd4a8>
   2292c:	ldr	r1, [pc, #176]	; 229e4 <__assert_fail@plt+0x109fc>
   22930:	mov	r2, r0
   22934:	mov	r0, #1
   22938:	bl	11e14 <__printf_chk@plt>
   2293c:	mov	r3, #0
   22940:	strb	r3, [sl]
   22944:	ldr	r2, [sp, #52]	; 0x34
   22948:	ldr	r3, [r5]
   2294c:	cmp	r2, r3
   22950:	bne	229cc <__assert_fail@plt+0x109e4>
   22954:	add	sp, sp, #60	; 0x3c
   22958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2295c:	bl	1f490 <__assert_fail@plt+0xd4a8>
   22960:	adds	r2, r4, r8
   22964:	adc	r3, fp, r9
   22968:	mov	r6, r0
   2296c:	add	r0, sp, #28
   22970:	bl	1f490 <__assert_fail@plt+0xd4a8>
   22974:	mov	r2, r6
   22978:	ldr	r1, [pc, #104]	; 229e8 <__assert_fail@plt+0x10a00>
   2297c:	mov	r3, r0
   22980:	mov	r0, #1
   22984:	bl	11e14 <__printf_chk@plt>
   22988:	b	2293c <__assert_fail@plt+0x10954>
   2298c:	ldr	r3, [pc, #88]	; 229ec <__assert_fail@plt+0x10a04>
   22990:	mov	r0, #44	; 0x2c
   22994:	ldr	r1, [r3]
   22998:	bl	11ec8 <fputc@plt>
   2299c:	b	22908 <__assert_fail@plt+0x10920>
   229a0:	ldr	r6, [pc, #68]	; 229ec <__assert_fail@plt+0x10a04>
   229a4:	mov	r2, #2
   229a8:	mov	r1, #1
   229ac:	ldr	r3, [r6]
   229b0:	ldr	r0, [pc, #56]	; 229f0 <__assert_fail@plt+0x10a08>
   229b4:	bl	11c1c <fwrite@plt>
   229b8:	ldr	r0, [r6]
   229bc:	bl	11a84 <fflush@plt>
   229c0:	ldr	r3, [pc, #16]	; 229d8 <__assert_fail@plt+0x109f0>
   229c4:	str	r4, [r3]
   229c8:	b	22944 <__assert_fail@plt+0x1095c>
   229cc:	bl	11b50 <__stack_chk_fail@plt>
   229d0:	andeq	r7, r4, r8, lsl #30
   229d4:	andeq	r4, r3, r4, lsl #31
   229d8:	andeq	sl, r4, r0, ror #10
   229dc:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   229e0:	andeq	sl, r4, r0, lsl #15
   229e4:	andeq	r3, r3, r0, lsl #26
   229e8:	andeq	r4, r3, r0, lsr #31
   229ec:	andeq	r8, r4, r4, lsl #6
   229f0:	andeq	r4, r3, r8, asr r6
   229f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229f8:	mov	r7, r3
   229fc:	sub	sp, sp, #92	; 0x5c
   22a00:	mov	r3, #1
   22a04:	subs	r3, r3, r2
   22a08:	str	r3, [sp, #32]
   22a0c:	mov	r3, #0
   22a10:	sbc	r3, r3, r7
   22a14:	str	r3, [sp, #36]	; 0x24
   22a18:	ldr	r3, [sp, #144]	; 0x90
   22a1c:	mov	r6, r2
   22a20:	adds	r3, r3, r3
   22a24:	adds	r3, r3, #3
   22a28:	mov	sl, r0
   22a2c:	lsl	r0, r3, #3
   22a30:	strd	r6, [sp]
   22a34:	mov	fp, r1
   22a38:	mov	r8, r2
   22a3c:	mov	r9, r7
   22a40:	ldrd	r6, [sp, #128]	; 0x80
   22a44:	bl	2f2ec <renameat2@@Base+0x5d8>
   22a48:	str	r0, [sp, #84]	; 0x54
   22a4c:	ldrd	r0, [sp, #136]	; 0x88
   22a50:	orrs	r3, r0, r1
   22a54:	beq	22a98 <__assert_fail@plt+0x10ab0>
   22a58:	ldr	r0, [sp, #136]	; 0x88
   22a5c:	ldr	r2, [sp, #140]	; 0x8c
   22a60:	adds	r4, r8, r0
   22a64:	adc	r5, r9, r2
   22a68:	cmp	r6, r4
   22a6c:	sbcs	r3, r7, r5
   22a70:	blt	22ee8 <__assert_fail@plt+0x10f00>
   22a74:	adds	r3, r0, r0
   22a78:	ldrd	r0, [sp, #32]
   22a7c:	adc	r2, r2, r2
   22a80:	strd	r4, [sp, #136]	; 0x88
   22a84:	adds	r3, r3, r0
   22a88:	str	r3, [sp, #48]	; 0x30
   22a8c:	adc	r3, r2, r1
   22a90:	str	r3, [sp, #52]	; 0x34
   22a94:	b	22aa0 <__assert_fail@plt+0x10ab8>
   22a98:	ldrd	r2, [sp, #136]	; 0x88
   22a9c:	strd	r2, [sp, #48]	; 0x30
   22aa0:	ldrd	r2, [sp]
   22aa4:	mov	r4, #1
   22aa8:	mov	r5, #0
   22aac:	cmp	r2, r6
   22ab0:	sbcs	r3, r3, r7
   22ab4:	movlt	r3, #1
   22ab8:	movge	r3, #0
   22abc:	cmp	sl, #2
   22ac0:	sbcs	r2, fp, #0
   22ac4:	movlt	r3, #0
   22ac8:	andge	r3, r3, #1
   22acc:	cmp	r3, #0
   22ad0:	ldrd	r2, [sp]
   22ad4:	ldrdne	r8, [sp, #8]
   22ad8:	strd	r2, [sp, #16]
   22adc:	bne	22b30 <__assert_fail@plt+0x10b48>
   22ae0:	b	22e84 <__assert_fail@plt+0x10e9c>
   22ae4:	ldr	r3, [sp, #16]
   22ae8:	adds	r4, r4, #1
   22aec:	adc	r5, r5, #0
   22af0:	adds	r3, r3, #1
   22af4:	str	r3, [sp, #16]
   22af8:	ldr	r3, [sp, #20]
   22afc:	adc	r3, r3, #0
   22b00:	str	r3, [sp, #20]
   22b04:	ldrd	r0, [sp, #16]
   22b08:	cmp	r4, sl
   22b0c:	sbcs	r3, r5, fp
   22b10:	movlt	r3, #1
   22b14:	movge	r3, #0
   22b18:	cmp	r0, r6
   22b1c:	sbcs	r2, r1, r7
   22b20:	movge	r3, #0
   22b24:	andlt	r3, r3, #1
   22b28:	cmp	r3, #0
   22b2c:	beq	22e80 <__assert_fail@plt+0x10e98>
   22b30:	ldrd	r2, [sp, #16]
   22b34:	mov	r0, r4
   22b38:	mov	r1, r5
   22b3c:	bl	216fc <__assert_fail@plt+0xf714>
   22b40:	cmp	r0, #0
   22b44:	bne	22ae4 <__assert_fail@plt+0x10afc>
   22b48:	strd	r8, [sp, #8]
   22b4c:	ldrd	r0, [sp, #32]
   22b50:	ldr	r3, [sp, #144]	; 0x90
   22b54:	ldr	ip, [sp, #84]	; 0x54
   22b58:	add	r3, r3, #1
   22b5c:	sub	r2, r3, r0
   22b60:	ldrd	r8, [sp, #144]	; 0x90
   22b64:	add	r2, ip, r2, lsl #3
   22b68:	lsl	r3, r0, #3
   22b6c:	str	r2, [sp, #80]	; 0x50
   22b70:	strd	r4, [r2, r3]
   22b74:	cmp	r8, #1
   22b78:	mov	r2, #1
   22b7c:	mov	r3, #0
   22b80:	sbcs	ip, r9, #0
   22b84:	strd	r2, [sp, #40]	; 0x28
   22b88:	blt	22d98 <__assert_fail@plt+0x10db0>
   22b8c:	subs	ip, r2, r6
   22b90:	sbc	r3, r3, r7
   22b94:	str	r3, [sp, #68]	; 0x44
   22b98:	ldrd	r2, [sp]
   22b9c:	str	ip, [sp, #64]	; 0x40
   22ba0:	strd	r0, [sp, #56]	; 0x38
   22ba4:	subs	ip, sl, r2
   22ba8:	sbc	r3, fp, r3
   22bac:	str	ip, [sp, #72]	; 0x48
   22bb0:	str	r3, [sp, #76]	; 0x4c
   22bb4:	ldrd	r0, [sp, #64]	; 0x40
   22bb8:	ldrd	r2, [sp, #32]
   22bbc:	cmp	r0, r2
   22bc0:	sbcs	r1, r1, r3
   22bc4:	bge	22e64 <__assert_fail@plt+0x10e7c>
   22bc8:	subs	r3, r2, #1
   22bcc:	str	r3, [sp, #32]
   22bd0:	ldr	r3, [sp, #36]	; 0x24
   22bd4:	ldr	r2, [sp, #32]
   22bd8:	sbc	r3, r3, #0
   22bdc:	str	r3, [sp, #36]	; 0x24
   22be0:	ldr	r3, [sp, #80]	; 0x50
   22be4:	mvn	r0, #0
   22be8:	add	r3, r3, r2, lsl #3
   22bec:	mvn	r1, #0
   22bf0:	strd	r0, [r3, #-8]
   22bf4:	ldrd	r2, [sp, #56]	; 0x38
   22bf8:	ldrd	r0, [sp, #72]	; 0x48
   22bfc:	cmp	r2, r0
   22c00:	sbcs	r1, r3, r1
   22c04:	bge	22e48 <__assert_fail@plt+0x10e60>
   22c08:	adds	r3, r2, #1
   22c0c:	str	r3, [sp, #56]	; 0x38
   22c10:	ldr	r3, [sp, #60]	; 0x3c
   22c14:	ldr	r2, [sp, #56]	; 0x38
   22c18:	adc	r3, r3, #0
   22c1c:	str	r3, [sp, #60]	; 0x3c
   22c20:	ldr	r3, [sp, #80]	; 0x50
   22c24:	mvn	r0, #0
   22c28:	add	r3, r3, r2, lsl #3
   22c2c:	mvn	r1, #0
   22c30:	strd	r0, [r3, #8]
   22c34:	ldrd	r2, [sp, #56]	; 0x38
   22c38:	ldrd	r0, [sp, #32]
   22c3c:	cmp	r2, r0
   22c40:	sbcs	r3, r3, r1
   22c44:	blt	22d6c <__assert_fail@plt+0x10d84>
   22c48:	ldrd	r2, [sp, #56]	; 0x38
   22c4c:	ldr	r1, [sp, #80]	; 0x50
   22c50:	strd	r2, [sp]
   22c54:	add	r1, r1, r2, lsl #3
   22c58:	mvn	r3, #0
   22c5c:	mvn	r2, #0
   22c60:	str	r1, [sp, #8]
   22c64:	strd	r2, [sp, #16]
   22c68:	ldr	r1, [sp, #8]
   22c6c:	ldrd	r2, [r1, #-8]
   22c70:	ldrd	r4, [r1, #8]
   22c74:	cmp	r2, r4
   22c78:	sbcs	r1, r3, r5
   22c7c:	blt	22c88 <__assert_fail@plt+0x10ca0>
   22c80:	adds	r4, r2, #1
   22c84:	adc	r5, r3, #0
   22c88:	ldrd	r2, [sp]
   22c8c:	subs	r8, r4, r2
   22c90:	sbc	r9, r5, r3
   22c94:	cmp	r8, r6
   22c98:	sbcs	r3, r9, r7
   22c9c:	movlt	r3, #1
   22ca0:	movge	r3, #0
   22ca4:	cmp	r4, sl
   22ca8:	sbcs	r2, r5, fp
   22cac:	movge	r3, #0
   22cb0:	andlt	r3, r3, #1
   22cb4:	cmp	r3, #0
   22cb8:	bne	22cf8 <__assert_fail@plt+0x10d10>
   22cbc:	b	22dc4 <__assert_fail@plt+0x10ddc>
   22cc0:	adds	r4, r4, #1
   22cc4:	adc	r5, r5, #0
   22cc8:	adds	r8, r8, #1
   22ccc:	adc	r9, r9, #0
   22cd0:	cmp	r4, sl
   22cd4:	sbcs	r3, r5, fp
   22cd8:	movlt	r3, #1
   22cdc:	movge	r3, #0
   22ce0:	cmp	r8, r6
   22ce4:	sbcs	r2, r9, r7
   22ce8:	movge	r3, #0
   22cec:	andlt	r3, r3, #1
   22cf0:	cmp	r3, #0
   22cf4:	beq	22dc4 <__assert_fail@plt+0x10ddc>
   22cf8:	mov	r2, r8
   22cfc:	mov	r3, r9
   22d00:	mov	r0, r4
   22d04:	mov	r1, r5
   22d08:	bl	216fc <__assert_fail@plt+0xf714>
   22d0c:	cmp	r0, #0
   22d10:	bne	22cc0 <__assert_fail@plt+0x10cd8>
   22d14:	ldr	r3, [sp, #8]
   22d18:	strd	r4, [r3]
   22d1c:	ldr	r3, [sp]
   22d20:	ldrd	r0, [sp, #32]
   22d24:	subs	r3, r3, #2
   22d28:	str	r3, [sp]
   22d2c:	ldr	r3, [sp, #4]
   22d30:	sbc	r3, r3, #0
   22d34:	str	r3, [sp, #4]
   22d38:	ldrd	r2, [sp]
   22d3c:	cmp	r2, r0
   22d40:	sbcs	r3, r3, r1
   22d44:	ldr	r3, [sp, #8]
   22d48:	sub	r3, r3, #16
   22d4c:	str	r3, [sp, #8]
   22d50:	bge	22c68 <__assert_fail@plt+0x10c80>
   22d54:	ldrd	r2, [sp, #16]
   22d58:	mvn	r1, #0
   22d5c:	mvn	r0, #0
   22d60:	cmp	r3, r1
   22d64:	cmpeq	r2, r0
   22d68:	bne	22da4 <__assert_fail@plt+0x10dbc>
   22d6c:	ldr	r3, [sp, #40]	; 0x28
   22d70:	adds	r3, r3, #1
   22d74:	str	r3, [sp, #40]	; 0x28
   22d78:	ldr	r3, [sp, #44]	; 0x2c
   22d7c:	adc	r3, r3, #0
   22d80:	str	r3, [sp, #44]	; 0x2c
   22d84:	ldrd	r0, [sp, #40]	; 0x28
   22d88:	ldrd	r2, [sp, #144]	; 0x90
   22d8c:	cmp	r2, r0
   22d90:	sbcs	r3, r3, r1
   22d94:	bge	22bb4 <__assert_fail@plt+0x10bcc>
   22d98:	mvn	r2, #0
   22d9c:	mvn	r3, #0
   22da0:	strd	r2, [sp, #16]
   22da4:	ldr	r1, [sp, #152]	; 0x98
   22da8:	ldrd	r2, [sp, #16]
   22dac:	strd	r2, [r1]
   22db0:	ldr	r0, [sp, #84]	; 0x54
   22db4:	bl	11ab4 <free@plt>
   22db8:	ldrd	r0, [sp, #40]	; 0x28
   22dbc:	add	sp, sp, #92	; 0x5c
   22dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22dc4:	ldrd	r0, [sp, #136]	; 0x88
   22dc8:	cmp	fp, r5
   22dcc:	cmpeq	sl, r4
   22dd0:	moveq	r3, #1
   22dd4:	movne	r3, #0
   22dd8:	cmp	r8, r0
   22ddc:	sbcs	r2, r9, r1
   22de0:	movlt	r3, #0
   22de4:	andge	r3, r3, #1
   22de8:	cmp	r3, #0
   22dec:	ldr	r3, [sp, #8]
   22df0:	strd	r4, [r3]
   22df4:	beq	22d1c <__assert_fail@plt+0x10d34>
   22df8:	ldrd	r0, [sp, #40]	; 0x28
   22dfc:	adds	r3, r4, r8
   22e00:	adc	r2, r5, r9
   22e04:	subs	r3, r3, r0
   22e08:	str	r3, [sp, #24]
   22e0c:	sbc	r3, r2, r1
   22e10:	str	r3, [sp, #28]
   22e14:	ldrd	r2, [sp, #24]
   22e18:	ldrd	r0, [sp, #48]	; 0x30
   22e1c:	cmp	r2, r0
   22e20:	sbcs	r3, r3, r1
   22e24:	blt	22d1c <__assert_fail@plt+0x10d34>
   22e28:	ldrd	r2, [sp, #16]
   22e2c:	cmp	r2, r8
   22e30:	sbcs	r3, r3, r9
   22e34:	strdlt	r8, [sp, #16]
   22e38:	cmp	r7, r9
   22e3c:	cmpeq	r6, r8
   22e40:	bne	22d1c <__assert_fail@plt+0x10d34>
   22e44:	b	22da4 <__assert_fail@plt+0x10dbc>
   22e48:	ldr	r3, [sp, #56]	; 0x38
   22e4c:	subs	r3, r3, #1
   22e50:	str	r3, [sp, #56]	; 0x38
   22e54:	ldr	r3, [sp, #60]	; 0x3c
   22e58:	sbc	r3, r3, #0
   22e5c:	str	r3, [sp, #60]	; 0x3c
   22e60:	b	22c34 <__assert_fail@plt+0x10c4c>
   22e64:	ldr	r3, [sp, #32]
   22e68:	adds	r3, r3, #1
   22e6c:	str	r3, [sp, #32]
   22e70:	ldr	r3, [sp, #36]	; 0x24
   22e74:	adc	r3, r3, #0
   22e78:	str	r3, [sp, #36]	; 0x24
   22e7c:	b	22bf4 <__assert_fail@plt+0x10c0c>
   22e80:	strd	r8, [sp, #8]
   22e84:	ldrd	r0, [sp, #16]
   22e88:	ldrd	r8, [sp, #136]	; 0x88
   22e8c:	cmp	fp, r5
   22e90:	cmpeq	sl, r4
   22e94:	moveq	r3, #1
   22e98:	movne	r3, #0
   22e9c:	cmp	r0, r8
   22ea0:	sbcs	r2, r1, r9
   22ea4:	movlt	r3, #0
   22ea8:	andge	r3, r3, #1
   22eac:	cmp	r3, #0
   22eb0:	beq	22b4c <__assert_fail@plt+0x10b64>
   22eb4:	adds	r3, r4, r0
   22eb8:	str	r3, [sp, #56]	; 0x38
   22ebc:	adc	r3, r5, r1
   22ec0:	str	r3, [sp, #60]	; 0x3c
   22ec4:	ldrd	r2, [sp, #56]	; 0x38
   22ec8:	ldrd	r0, [sp, #48]	; 0x30
   22ecc:	cmp	r2, r0
   22ed0:	sbcs	r3, r3, r1
   22ed4:	blt	22b4c <__assert_fail@plt+0x10b64>
   22ed8:	mov	r2, #0
   22edc:	mov	r3, #0
   22ee0:	strd	r2, [sp, #40]	; 0x28
   22ee4:	b	22da4 <__assert_fail@plt+0x10dbc>
   22ee8:	ldr	r3, [sp, #144]	; 0x90
   22eec:	adds	r3, r3, #1
   22ef0:	str	r3, [sp, #40]	; 0x28
   22ef4:	ldr	r3, [sp, #148]	; 0x94
   22ef8:	adc	r3, r3, #0
   22efc:	str	r3, [sp, #44]	; 0x2c
   22f00:	b	22db0 <__assert_fail@plt+0x10dc8>
   22f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f08:	sub	sp, sp, #372	; 0x174
   22f0c:	mov	ip, #1
   22f10:	str	r0, [sp, #212]	; 0xd4
   22f14:	ldr	r0, [pc, #3872]	; 23e3c <__assert_fail@plt+0x11e54>
   22f18:	strb	ip, [sp, #255]	; 0xff
   22f1c:	strd	r2, [sp, #64]	; 0x40
   22f20:	ldr	r0, [r0]
   22f24:	mov	r4, r1
   22f28:	str	r1, [sp, #112]	; 0x70
   22f2c:	str	r0, [sp, #364]	; 0x16c
   22f30:	bl	18900 <__assert_fail@plt+0x6918>
   22f34:	mov	r2, r0
   22f38:	mov	r3, r1
   22f3c:	adds	r1, r0, #1
   22f40:	strd	r2, [sp, #144]	; 0x90
   22f44:	adc	r3, r3, #0
   22f48:	str	r3, [sp, #124]	; 0x7c
   22f4c:	str	r1, [sp, #120]	; 0x78
   22f50:	bl	18930 <__assert_fail@plt+0x6948>
   22f54:	ldr	r3, [r4]
   22f58:	str	r3, [sp, #116]	; 0x74
   22f5c:	ldr	r3, [sp, #408]	; 0x198
   22f60:	str	r3, [sp, #228]	; 0xe4
   22f64:	mov	r6, r0
   22f68:	mov	r0, #5
   22f6c:	mov	r7, r1
   22f70:	bl	1d2f8 <__assert_fail@plt+0xb310>
   22f74:	adds	r0, r6, #1
   22f78:	adc	r1, r7, #0
   22f7c:	bl	18974 <__assert_fail@plt+0x698c>
   22f80:	cmp	r0, #94	; 0x5e
   22f84:	bne	2477c <__assert_fail@plt+0x12794>
   22f88:	ldrd	r2, [sp, #120]	; 0x78
   22f8c:	mov	r4, r2
   22f90:	mov	r5, r3
   22f94:	b	22fa0 <__assert_fail@plt+0x10fb8>
   22f98:	adds	r4, r4, #1
   22f9c:	adc	r5, r5, #0
   22fa0:	mov	r0, r4
   22fa4:	mov	r1, r5
   22fa8:	bl	18974 <__assert_fail@plt+0x698c>
   22fac:	cmp	r0, #61	; 0x3d
   22fb0:	cmpne	r0, #10
   22fb4:	moveq	r0, #1
   22fb8:	movne	r0, #0
   22fbc:	beq	22f98 <__assert_fail@plt+0x10fb0>
   22fc0:	strd	r4, [sp, #56]	; 0x38
   22fc4:	str	r0, [sp, #208]	; 0xd0
   22fc8:	bl	18900 <__assert_fail@plt+0x6918>
   22fcc:	ldrd	r2, [sp, #64]	; 0x40
   22fd0:	orrs	r3, r2, r3
   22fd4:	strd	r0, [sp, #72]	; 0x48
   22fd8:	beq	23ec0 <__assert_fail@plt+0x11ed8>
   22fdc:	mov	r3, #1
   22fe0:	str	r3, [sp, #136]	; 0x88
   22fe4:	ldr	r3, [pc, #3724]	; 23e78 <__assert_fail@plt+0x11e90>
   22fe8:	mov	r6, r0
   22fec:	str	r3, [sp, #224]	; 0xe0
   22ff0:	ldr	r3, [pc, #3740]	; 23e94 <__assert_fail@plt+0x11eac>
   22ff4:	str	r3, [sp, #196]	; 0xc4
   22ff8:	add	r3, sp, #256	; 0x100
   22ffc:	str	r3, [sp, #48]	; 0x30
   23000:	ldrd	r2, [sp, #144]	; 0x90
   23004:	adds	r1, r2, #2
   23008:	adc	r3, r3, #0
   2300c:	str	r3, [sp, #44]	; 0x2c
   23010:	str	r1, [sp, #40]	; 0x28
   23014:	ldrd	sl, [sp, #40]	; 0x28
   23018:	add	r6, r6, sl
   2301c:	add	r0, r6, #1
   23020:	bl	2f2ec <renameat2@@Base+0x5d8>
   23024:	mov	r2, r6
   23028:	mov	r1, #32
   2302c:	mov	r4, r0
   23030:	str	r0, [sp, #32]
   23034:	bl	11df0 <memset@plt>
   23038:	ldrd	r0, [sp, #64]	; 0x40
   2303c:	ldrd	r2, [sp, #72]	; 0x48
   23040:	str	r4, [sp, #256]	; 0x100
   23044:	mov	fp, r1
   23048:	adds	r7, r0, r2
   2304c:	adc	r8, r1, r3
   23050:	ldr	r3, [sp, #120]	; 0x78
   23054:	mov	r2, #42	; 0x2a
   23058:	adds	r5, r7, r3
   2305c:	add	r3, r4, sl
   23060:	strb	r2, [r4]
   23064:	mov	r2, #61	; 0x3d
   23068:	adds	r5, r5, #3
   2306c:	strb	r2, [r3, #-1]
   23070:	mov	r3, sl
   23074:	mov	r2, #94	; 0x5e
   23078:	sub	r3, r3, r0
   2307c:	add	r3, r4, r3
   23080:	strb	r2, [r4, r6]
   23084:	mov	sl, r0
   23088:	lsl	r0, r5, #4
   2308c:	str	r3, [sp, #260]	; 0x104
   23090:	bl	2f2ec <renameat2@@Base+0x5d8>
   23094:	add	r4, r7, #1
   23098:	ldr	ip, [sp, #48]	; 0x30
   2309c:	lsl	r3, r4, #3
   230a0:	add	r1, r3, r5, lsl #3
   230a4:	mov	r2, #0
   230a8:	str	ip, [sp, #20]
   230ac:	str	r2, [sp, #16]
   230b0:	mov	ip, #1
   230b4:	str	r8, [sp, #12]
   230b8:	str	r7, [sp, #8]
   230bc:	strd	sl, [sp]
   230c0:	strb	ip, [sp, #272]	; 0x110
   230c4:	rsb	r4, r4, r4, lsl #29
   230c8:	add	r1, r0, r1
   230cc:	add	r0, r0, r3
   230d0:	str	r1, [sp, #268]	; 0x10c
   230d4:	ldrd	r2, [sp, #120]	; 0x78
   230d8:	str	r0, [sp, #264]	; 0x108
   230dc:	mov	r1, #0
   230e0:	mov	r0, #1
   230e4:	bl	217d8 <__assert_fail@plt+0xf7f0>
   230e8:	ldr	r0, [sp, #264]	; 0x108
   230ec:	add	r0, r0, r4, lsl #3
   230f0:	bl	11ab4 <free@plt>
   230f4:	ldr	r3, [sp, #196]	; 0xc4
   230f8:	ldr	r3, [r3]
   230fc:	tst	r3, #2
   23100:	bne	23c74 <__assert_fail@plt+0x11c8c>
   23104:	ldrd	r0, [sp, #64]	; 0x40
   23108:	ldr	r3, [sp, #224]	; 0xe0
   2310c:	subs	ip, r0, #1
   23110:	sbc	r1, r1, #0
   23114:	str	ip, [sp, #168]	; 0xa8
   23118:	str	r1, [sp, #172]	; 0xac
   2311c:	ldrd	r2, [r3]
   23120:	ldrd	r0, [sp, #168]	; 0xa8
   23124:	cmp	r2, r0
   23128:	sbcs	r3, r3, r1
   2312c:	blt	23c5c <__assert_fail@plt+0x11c74>
   23130:	mov	r0, #1
   23134:	mov	r1, #0
   23138:	bl	18974 <__assert_fail@plt+0x698c>
   2313c:	mov	r2, #1
   23140:	mov	r3, #0
   23144:	strd	r2, [sp, #72]	; 0x48
   23148:	mov	sl, r0
   2314c:	cmp	sl, #45	; 0x2d
   23150:	beq	23288 <__assert_fail@plt+0x112a0>
   23154:	ldrd	r0, [sp, #56]	; 0x38
   23158:	bl	18974 <__assert_fail@plt+0x698c>
   2315c:	cmp	r0, #43	; 0x2b
   23160:	beq	232f4 <__assert_fail@plt+0x1130c>
   23164:	cmp	sl, #32
   23168:	bne	24578 <__assert_fail@plt+0x12590>
   2316c:	ldr	r3, [sp, #32]
   23170:	ldr	r2, [sp, #72]	; 0x48
   23174:	add	r3, r3, r2
   23178:	ldrb	r3, [r3]
   2317c:	cmp	r3, #45	; 0x2d
   23180:	beq	239a0 <__assert_fail@plt+0x119b8>
   23184:	ldr	r2, [sp, #40]	; 0x28
   23188:	ldr	r1, [sp, #32]
   2318c:	ldrb	r1, [r1, r2]
   23190:	cmp	r1, #43	; 0x2b
   23194:	beq	23a2c <__assert_fail@plt+0x11a44>
   23198:	cmp	r3, #32
   2319c:	bne	23154 <__assert_fail@plt+0x1116c>
   231a0:	ldrd	sl, [sp, #72]	; 0x48
   231a4:	ldr	r3, [sp, #32]
   231a8:	sub	r2, r2, #1
   231ac:	add	r5, r3, r2
   231b0:	add	r7, r3, sl
   231b4:	ldrd	r2, [sp, #40]	; 0x28
   231b8:	ldrd	r8, [sp, #56]	; 0x38
   231bc:	mov	r4, r2
   231c0:	mov	r6, r3
   231c4:	b	231d4 <__assert_fail@plt+0x111ec>
   231c8:	ldrb	r3, [r7, #1]!
   231cc:	cmp	r3, #32
   231d0:	bne	23220 <__assert_fail@plt+0x11238>
   231d4:	mov	r0, r8
   231d8:	mov	r1, r9
   231dc:	bl	18974 <__assert_fail@plt+0x698c>
   231e0:	cmp	r0, #32
   231e4:	bne	23220 <__assert_fail@plt+0x11238>
   231e8:	ldrb	r3, [r5, #1]!
   231ec:	cmp	r3, #32
   231f0:	bne	23220 <__assert_fail@plt+0x11238>
   231f4:	adds	sl, sl, #1
   231f8:	adc	fp, fp, #0
   231fc:	adds	r8, r8, #1
   23200:	adc	r9, r9, #0
   23204:	mov	r0, sl
   23208:	adds	r4, r4, #1
   2320c:	mov	r1, fp
   23210:	adc	r6, r6, #0
   23214:	bl	18974 <__assert_fail@plt+0x698c>
   23218:	cmp	r0, #32
   2321c:	beq	231c8 <__assert_fail@plt+0x111e0>
   23220:	strd	r8, [sp, #56]	; 0x38
   23224:	ldrd	r8, [sp, #40]	; 0x28
   23228:	ldr	r1, [sp, #64]	; 0x40
   2322c:	ldr	r0, [sp, #112]	; 0x70
   23230:	subs	r3, r4, r8
   23234:	sbc	r2, r6, r9
   23238:	adds	r3, r1, r3
   2323c:	str	r3, [sp, #64]	; 0x40
   23240:	ldr	r3, [sp, #68]	; 0x44
   23244:	strd	sl, [sp, #72]	; 0x48
   23248:	adc	r3, r3, r2
   2324c:	str	r3, [sp, #68]	; 0x44
   23250:	ldrd	r8, [sp, #64]	; 0x40
   23254:	subs	r2, r8, #1
   23258:	sbc	r3, r9, #0
   2325c:	bl	16c90 <__assert_fail@plt+0x4ca8>
   23260:	cmp	r0, #0
   23264:	bne	23aa8 <__assert_fail@plt+0x11ac0>
   23268:	ldr	r3, [pc, #3020]	; 23e3c <__assert_fail@plt+0x11e54>
   2326c:	ldr	r2, [sp, #364]	; 0x16c
   23270:	ldr	r0, [sp, #208]	; 0xd0
   23274:	ldr	r3, [r3]
   23278:	cmp	r2, r3
   2327c:	bne	24810 <__assert_fail@plt+0x12828>
   23280:	add	sp, sp, #372	; 0x174
   23284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23288:	ldrd	r4, [sp, #40]	; 0x28
   2328c:	ldrd	r8, [sp, #72]	; 0x48
   23290:	ldr	r6, [sp, #32]
   23294:	mov	r0, sl
   23298:	b	232b0 <__assert_fail@plt+0x112c8>
   2329c:	adds	r8, r8, #1
   232a0:	adc	r9, r9, #0
   232a4:	mov	r0, r8
   232a8:	mov	r1, r9
   232ac:	bl	18974 <__assert_fail@plt+0x698c>
   232b0:	add	r3, r6, r8
   232b4:	cmp	r0, #45	; 0x2d
   232b8:	ldrb	fp, [r3]
   232bc:	bne	2330c <__assert_fail@plt+0x11324>
   232c0:	cmp	fp, #45	; 0x2d
   232c4:	beq	23338 <__assert_fail@plt+0x11350>
   232c8:	add	r3, r6, r4
   232cc:	ldrb	r3, [r3]
   232d0:	cmp	r3, #43	; 0x2b
   232d4:	beq	23338 <__assert_fail@plt+0x11350>
   232d8:	cmp	fp, #32
   232dc:	bne	2329c <__assert_fail@plt+0x112b4>
   232e0:	cmp	r3, #32
   232e4:	bne	247a4 <__assert_fail@plt+0x127bc>
   232e8:	adds	r4, r4, #1
   232ec:	adc	r5, r5, #0
   232f0:	b	2329c <__assert_fail@plt+0x112b4>
   232f4:	ldrd	r2, [sp, #72]	; 0x48
   232f8:	ldr	r1, [sp, #32]
   232fc:	ldrd	r4, [sp, #40]	; 0x28
   23300:	mov	r9, r3
   23304:	mov	r8, r2
   23308:	add	r3, r1, r2
   2330c:	ldrb	fp, [r3]
   23310:	cmp	fp, #45	; 0x2d
   23314:	beq	2332c <__assert_fail@plt+0x11344>
   23318:	ldr	r3, [sp, #32]
   2331c:	add	r3, r3, r4
   23320:	ldrb	r3, [r3]
   23324:	cmp	r3, #43	; 0x2b
   23328:	bne	238b8 <__assert_fail@plt+0x118d0>
   2332c:	mov	r0, r8
   23330:	mov	r1, r9
   23334:	bl	18974 <__assert_fail@plt+0x698c>
   23338:	mov	r3, fp
   2333c:	ldrd	r6, [sp, #56]	; 0x38
   23340:	mov	fp, r0
   23344:	mov	sl, r3
   23348:	cmp	fp, #45	; 0x2d
   2334c:	beq	233a0 <__assert_fail@plt+0x113b8>
   23350:	mov	r0, r6
   23354:	mov	r1, r7
   23358:	bl	18974 <__assert_fail@plt+0x698c>
   2335c:	cmp	sl, #45	; 0x2d
   23360:	beq	2341c <__assert_fail@plt+0x11434>
   23364:	cmp	r0, #43	; 0x2b
   23368:	beq	233e8 <__assert_fail@plt+0x11400>
   2336c:	ldr	r1, [sp, #32]
   23370:	add	r2, r1, r4
   23374:	ldrb	r2, [r2]
   23378:	cmp	r2, #43	; 0x2b
   2337c:	bne	23468 <__assert_fail@plt+0x11480>
   23380:	add	r3, r1, r4
   23384:	ldrb	r2, [r3, #1]!
   23388:	adds	r4, r4, #1
   2338c:	adc	r5, r5, #0
   23390:	cmp	r2, #43	; 0x2b
   23394:	beq	23384 <__assert_fail@plt+0x1139c>
   23398:	cmp	fp, #45	; 0x2d
   2339c:	bne	23350 <__assert_fail@plt+0x11368>
   233a0:	ldr	r2, [sp, #32]
   233a4:	add	r3, r2, r4
   233a8:	ldrb	r3, [r3]
   233ac:	cmp	r3, #43	; 0x2b
   233b0:	bne	233cc <__assert_fail@plt+0x113e4>
   233b4:	add	r2, r2, r4
   233b8:	ldrb	r3, [r2, #1]!
   233bc:	adds	r4, r4, #1
   233c0:	adc	r5, r5, #0
   233c4:	cmp	r3, #43	; 0x2b
   233c8:	beq	233b8 <__assert_fail@plt+0x113d0>
   233cc:	cmp	sl, #32
   233d0:	bne	2342c <__assert_fail@plt+0x11444>
   233d4:	cmp	r3, #32
   233d8:	bne	24768 <__assert_fail@plt+0x12780>
   233dc:	adds	r4, r4, #1
   233e0:	adc	r5, r5, #0
   233e4:	b	2342c <__assert_fail@plt+0x11444>
   233e8:	adds	r6, r6, #1
   233ec:	adc	r7, r7, #0
   233f0:	mov	r0, r6
   233f4:	mov	r1, r7
   233f8:	bl	18974 <__assert_fail@plt+0x698c>
   233fc:	cmp	r0, #43	; 0x2b
   23400:	beq	233e8 <__assert_fail@plt+0x11400>
   23404:	b	23348 <__assert_fail@plt+0x11360>
   23408:	adds	r6, r6, #1
   2340c:	adc	r7, r7, #0
   23410:	mov	r0, r6
   23414:	mov	r1, r7
   23418:	bl	18974 <__assert_fail@plt+0x698c>
   2341c:	cmp	r0, #43	; 0x2b
   23420:	beq	23408 <__assert_fail@plt+0x11420>
   23424:	cmp	fp, #32
   23428:	beq	23454 <__assert_fail@plt+0x1146c>
   2342c:	adds	r8, r8, #1
   23430:	adc	r9, r9, #0
   23434:	mov	r0, r8
   23438:	mov	r1, r9
   2343c:	bl	18974 <__assert_fail@plt+0x698c>
   23440:	ldr	r3, [sp, #32]
   23444:	add	r3, r3, r8
   23448:	ldrb	sl, [r3]
   2344c:	mov	fp, r0
   23450:	b	23348 <__assert_fail@plt+0x11360>
   23454:	cmp	r0, #32
   23458:	bne	247bc <__assert_fail@plt+0x127d4>
   2345c:	adds	r6, r6, #1
   23460:	adc	r7, r7, #0
   23464:	b	2342c <__assert_fail@plt+0x11444>
   23468:	mov	r1, sl
   2346c:	mov	sl, fp
   23470:	cmp	sl, #32
   23474:	mov	fp, r1
   23478:	beq	23a20 <__assert_fail@plt+0x11a38>
   2347c:	cmp	r0, #94	; 0x5e
   23480:	cmpeq	sl, #61	; 0x3d
   23484:	bne	23498 <__assert_fail@plt+0x114b0>
   23488:	cmp	fp, #32
   2348c:	bne	234ac <__assert_fail@plt+0x114c4>
   23490:	cmp	r2, #32
   23494:	beq	234b8 <__assert_fail@plt+0x114d0>
   23498:	ldr	r3, [pc, #2580]	; 23eb4 <__assert_fail@plt+0x11ecc>
   2349c:	ldr	r2, [pc, #2460]	; 23e40 <__assert_fail@plt+0x11e58>
   234a0:	ldr	r1, [pc, #2576]	; 23eb8 <__assert_fail@plt+0x11ed0>
   234a4:	ldr	r0, [pc, #2456]	; 23e44 <__assert_fail@plt+0x11e5c>
   234a8:	bl	11fe8 <__assert_fail@plt>
   234ac:	cmp	r2, #94	; 0x5e
   234b0:	cmpeq	fp, #61	; 0x3d
   234b4:	bne	23498 <__assert_fail@plt+0x114b0>
   234b8:	ldrd	r2, [sp, #40]	; 0x28
   234bc:	ldrd	sl, [sp, #56]	; 0x38
   234c0:	cmp	r2, r4
   234c4:	sbcs	r3, r3, r5
   234c8:	movlt	r3, #1
   234cc:	movge	r3, #0
   234d0:	cmp	sl, r6
   234d4:	sbcs	r2, fp, r7
   234d8:	movge	r3, #0
   234dc:	andlt	r3, r3, #1
   234e0:	cmp	r3, #0
   234e4:	ldrd	r2, [sp, #64]	; 0x40
   234e8:	strd	r2, [sp, #48]	; 0x30
   234ec:	bne	23558 <__assert_fail@plt+0x11570>
   234f0:	b	237f4 <__assert_fail@plt+0x1180c>
   234f4:	ldr	r3, [sp, #40]	; 0x28
   234f8:	adds	r3, r3, #1
   234fc:	str	r3, [sp, #40]	; 0x28
   23500:	ldr	r3, [sp, #44]	; 0x2c
   23504:	adc	r3, r3, #0
   23508:	str	r3, [sp, #44]	; 0x2c
   2350c:	ldr	r3, [sp, #48]	; 0x30
   23510:	adds	sl, sl, #1
   23514:	adc	fp, fp, #0
   23518:	adds	r3, r3, #1
   2351c:	str	r3, [sp, #48]	; 0x30
   23520:	ldr	r3, [sp, #52]	; 0x34
   23524:	adc	r3, r3, #0
   23528:	str	r3, [sp, #52]	; 0x34
   2352c:	ldrd	r2, [sp, #40]	; 0x28
   23530:	cmp	r2, r4
   23534:	sbcs	r3, r3, r5
   23538:	movlt	r3, #1
   2353c:	movge	r3, #0
   23540:	cmp	sl, r6
   23544:	sbcs	r2, fp, r7
   23548:	movge	r3, #0
   2354c:	andlt	r3, r3, #1
   23550:	cmp	r3, #0
   23554:	beq	237f0 <__assert_fail@plt+0x11808>
   23558:	ldrd	r2, [sp, #48]	; 0x30
   2355c:	mov	r0, sl
   23560:	mov	r1, fp
   23564:	bl	216fc <__assert_fail@plt+0xf714>
   23568:	cmp	r0, #0
   2356c:	bne	234f4 <__assert_fail@plt+0x1150c>
   23570:	ldrd	r2, [sp, #40]	; 0x28
   23574:	ldr	r0, [pc, #2252]	; 23e48 <__assert_fail@plt+0x11e60>
   23578:	strd	sl, [sp, #56]	; 0x38
   2357c:	cmp	r5, r3
   23580:	cmpeq	r4, r2
   23584:	movne	r1, #0
   23588:	moveq	r1, #1
   2358c:	ldr	r3, [r0]
   23590:	cmp	r7, fp
   23594:	cmpeq	r6, sl
   23598:	movne	r1, #0
   2359c:	cmp	r3, #1
   235a0:	str	r0, [sp, #120]	; 0x78
   235a4:	beq	2426c <__assert_fail@plt+0x12284>
   235a8:	ldrd	r2, [sp, #64]	; 0x40
   235ac:	ldrd	sl, [sp, #48]	; 0x30
   235b0:	cmp	r3, fp
   235b4:	cmpeq	r2, sl
   235b8:	beq	235e0 <__assert_fail@plt+0x115f8>
   235bc:	str	r1, [sp, #64]	; 0x40
   235c0:	ldrd	r0, [sp, #48]	; 0x30
   235c4:	subs	r2, r0, #1
   235c8:	sbc	r3, r1, #0
   235cc:	ldr	r0, [sp, #112]	; 0x70
   235d0:	bl	16c90 <__assert_fail@plt+0x4ca8>
   235d4:	ldr	r1, [sp, #64]	; 0x40
   235d8:	cmp	r0, #0
   235dc:	beq	23268 <__assert_fail@plt+0x11280>
   235e0:	cmp	r1, #0
   235e4:	bne	23890 <__assert_fail@plt+0x118a8>
   235e8:	ldrd	r2, [sp, #48]	; 0x30
   235ec:	strd	r2, [sp, #64]	; 0x40
   235f0:	ldrd	r2, [sp, #40]	; 0x28
   235f4:	ldrd	sl, [sp, #40]	; 0x28
   235f8:	strd	r2, [sp, #152]	; 0x98
   235fc:	ldrd	r2, [sp, #56]	; 0x38
   23600:	subs	r1, r4, sl
   23604:	sbc	r0, r5, fp
   23608:	strd	r2, [sp, #88]	; 0x58
   2360c:	ldr	r3, [sp, #120]	; 0x78
   23610:	str	r1, [sp, #96]	; 0x60
   23614:	str	r0, [sp, #104]	; 0x68
   23618:	ldr	r2, [r3]
   2361c:	cmp	r2, #0
   23620:	beq	23ac4 <__assert_fail@plt+0x11adc>
   23624:	strd	r6, [sp, #56]	; 0x38
   23628:	mov	r6, #0
   2362c:	mov	r7, #0
   23630:	strd	r4, [sp, #40]	; 0x28
   23634:	ldr	r3, [sp, #96]	; 0x60
   23638:	ldrd	sl, [sp, #88]	; 0x58
   2363c:	adds	ip, r3, #3
   23640:	ldr	r1, [sp, #56]	; 0x38
   23644:	ldr	r3, [sp, #104]	; 0x68
   23648:	ldr	r0, [sp, #60]	; 0x3c
   2364c:	adc	r3, r3, #0
   23650:	subs	r1, r1, sl
   23654:	sbc	r0, r0, fp
   23658:	adds	r1, ip, r1
   2365c:	adc	r3, r3, r0
   23660:	cmp	r2, #1
   23664:	str	r1, [sp, #48]	; 0x30
   23668:	str	r3, [sp, #80]	; 0x50
   2366c:	beq	242f4 <__assert_fail@plt+0x1230c>
   23670:	ldrd	sl, [sp, #64]	; 0x40
   23674:	ldr	r3, [sp, #48]	; 0x30
   23678:	add	r0, sp, #255	; 0xff
   2367c:	adds	r2, r3, sl
   23680:	ldr	r3, [sp, #80]	; 0x50
   23684:	strd	sl, [sp]
   23688:	adc	r1, r3, fp
   2368c:	subs	r2, r2, #1
   23690:	sbc	r1, r1, #0
   23694:	str	r1, [sp, #12]
   23698:	str	r2, [sp, #8]
   2369c:	ldr	r1, [sp, #212]	; 0xd4
   236a0:	ldr	r2, [pc, #1956]	; 23e4c <__assert_fail@plt+0x11e64>
   236a4:	bl	2288c <__assert_fail@plt+0x108a4>
   236a8:	ldr	lr, [pc, #1952]	; 23e50 <__assert_fail@plt+0x11e68>
   236ac:	ldr	r3, [sp, #48]	; 0x30
   236b0:	ldr	r2, [sp, #96]	; 0x60
   236b4:	ldr	sl, [sp, #112]	; 0x70
   236b8:	ldr	r1, [lr]
   236bc:	subs	ip, r3, r2
   236c0:	ldr	fp, [sp, #80]	; 0x50
   236c4:	ldr	r3, [sp, #104]	; 0x68
   236c8:	ldr	r2, [lr, #4]
   236cc:	ldrb	r0, [sl, #4]
   236d0:	sbc	r3, fp, r3
   236d4:	adds	ip, r1, ip
   236d8:	adc	r2, r2, r3
   236dc:	ldr	r3, [pc, #1904]	; 23e54 <__assert_fail@plt+0x11e6c>
   236e0:	ldr	r1, [sp, #116]	; 0x74
   236e4:	add	r0, r3, r0
   236e8:	str	r2, [lr, #4]
   236ec:	str	ip, [lr]
   236f0:	bl	11f88 <fputs@plt>
   236f4:	ldrd	r2, [sp, #152]	; 0x98
   236f8:	mov	r0, #1
   236fc:	strb	r0, [sl, #4]
   23700:	cmp	r2, r4
   23704:	sbcs	r3, r3, r5
   23708:	blt	23c14 <__assert_fail@plt+0x11c2c>
   2370c:	ldr	r3, [sp, #120]	; 0x78
   23710:	ldr	sl, [r3]
   23714:	cmp	sl, #1
   23718:	beq	245f0 <__assert_fail@plt+0x12608>
   2371c:	ldr	r3, [pc, #1844]	; 23e58 <__assert_fail@plt+0x11e70>
   23720:	ldr	r1, [sp, #116]	; 0x74
   23724:	add	r0, r3, r0
   23728:	bl	11f88 <fputs@plt>
   2372c:	ldrd	r2, [sp, #56]	; 0x38
   23730:	ldrd	sl, [sp, #88]	; 0x58
   23734:	cmp	sl, r2
   23738:	ldr	r2, [sp, #112]	; 0x70
   2373c:	sbcs	r3, fp, r3
   23740:	mov	r3, #1
   23744:	strb	r3, [r2, #4]
   23748:	bge	245e8 <__assert_fail@plt+0x12600>
   2374c:	strd	r4, [sp, #72]	; 0x48
   23750:	ldr	r5, [sp, #116]	; 0x74
   23754:	strd	r6, [sp, #48]	; 0x30
   23758:	mov	r7, r2
   2375c:	mov	r2, r5
   23760:	mov	r0, sl
   23764:	mov	r1, fp
   23768:	bl	1899c <__assert_fail@plt+0x69b4>
   2376c:	ldrd	r2, [sp, #56]	; 0x38
   23770:	adds	sl, sl, #1
   23774:	adc	fp, fp, #0
   23778:	cmp	fp, r3
   2377c:	cmpeq	sl, r2
   23780:	strb	r0, [r7, #4]
   23784:	bne	2375c <__assert_fail@plt+0x11774>
   23788:	ldrd	r6, [sp, #48]	; 0x30
   2378c:	ldrd	r4, [sp, #72]	; 0x48
   23790:	strd	sl, [sp, #88]	; 0x58
   23794:	ldr	r3, [pc, #1728]	; 23e5c <__assert_fail@plt+0x11e74>
   23798:	ldr	sl, [sp, #116]	; 0x74
   2379c:	add	r0, r3, r0
   237a0:	mov	r1, sl
   237a4:	bl	11f88 <fputs@plt>
   237a8:	ldr	r2, [sp, #112]	; 0x70
   237ac:	mov	r3, #1
   237b0:	mov	r0, sl
   237b4:	strh	r3, [r2, #4]
   237b8:	bl	11acc <ferror@plt>
   237bc:	cmp	r0, #0
   237c0:	bne	247b8 <__assert_fail@plt+0x127d0>
   237c4:	orrs	r3, r6, r7
   237c8:	bne	24324 <__assert_fail@plt+0x1233c>
   237cc:	ldr	r2, [sp, #228]	; 0xe4
   237d0:	mov	r3, #1
   237d4:	mov	r0, r8
   237d8:	strb	r3, [r2]
   237dc:	mov	r1, r9
   237e0:	bl	18974 <__assert_fail@plt+0x698c>
   237e4:	strd	r8, [sp, #72]	; 0x48
   237e8:	mov	sl, r0
   237ec:	b	2314c <__assert_fail@plt+0x11164>
   237f0:	strd	sl, [sp, #56]	; 0x38
   237f4:	ldrd	r2, [sp, #40]	; 0x28
   237f8:	ldrd	r0, [sp, #56]	; 0x38
   237fc:	cmp	r5, r3
   23800:	cmpeq	r4, r2
   23804:	movne	r3, #0
   23808:	moveq	r3, #1
   2380c:	cmp	r7, r1
   23810:	cmpeq	r6, r0
   23814:	movne	r3, #0
   23818:	cmp	r3, #0
   2381c:	beq	23bcc <__assert_fail@plt+0x11be4>
   23820:	ldrd	r2, [sp, #48]	; 0x30
   23824:	ldrd	r0, [sp, #64]	; 0x40
   23828:	subs	ip, r2, #1
   2382c:	sbc	r3, r3, #0
   23830:	strd	r0, [sp]
   23834:	str	r3, [sp, #12]
   23838:	ldr	r2, [pc, #1568]	; 23e60 <__assert_fail@plt+0x11e78>
   2383c:	str	ip, [sp, #8]
   23840:	ldr	r1, [sp, #212]	; 0xd4
   23844:	add	r0, sp, #255	; 0xff
   23848:	str	r3, [sp, #56]	; 0x38
   2384c:	str	ip, [sp, #40]	; 0x28
   23850:	bl	2288c <__assert_fail@plt+0x108a4>
   23854:	ldr	r2, [pc, #1516]	; 23e48 <__assert_fail@plt+0x11e60>
   23858:	ldr	r3, [sp, #56]	; 0x38
   2385c:	ldr	r2, [r2]
   23860:	cmp	r2, #1
   23864:	beq	23980 <__assert_fail@plt+0x11998>
   23868:	ldrd	r0, [sp, #64]	; 0x40
   2386c:	ldrd	sl, [sp, #48]	; 0x30
   23870:	cmp	r1, fp
   23874:	cmpeq	r0, sl
   23878:	beq	23890 <__assert_fail@plt+0x118a8>
   2387c:	ldr	r2, [sp, #40]	; 0x28
   23880:	ldr	r0, [sp, #112]	; 0x70
   23884:	bl	16c90 <__assert_fail@plt+0x4ca8>
   23888:	cmp	r0, #0
   2388c:	beq	23268 <__assert_fail@plt+0x11280>
   23890:	ldrd	r2, [sp, #48]	; 0x30
   23894:	mov	r0, r8
   23898:	mov	r1, r9
   2389c:	strd	r4, [sp, #40]	; 0x28
   238a0:	strd	r6, [sp, #56]	; 0x38
   238a4:	strd	r2, [sp, #64]	; 0x40
   238a8:	bl	18974 <__assert_fail@plt+0x698c>
   238ac:	strd	r8, [sp, #72]	; 0x48
   238b0:	mov	sl, r0
   238b4:	b	2314c <__assert_fail@plt+0x11164>
   238b8:	ldrd	r6, [sp, #56]	; 0x38
   238bc:	b	238c8 <__assert_fail@plt+0x118e0>
   238c0:	adds	r6, r6, #1
   238c4:	adc	r7, r7, #0
   238c8:	mov	r0, r6
   238cc:	mov	r1, r7
   238d0:	bl	18974 <__assert_fail@plt+0x698c>
   238d4:	cmp	r0, #43	; 0x2b
   238d8:	beq	238c0 <__assert_fail@plt+0x118d8>
   238dc:	ldr	r3, [pc, #1408]	; 23e64 <__assert_fail@plt+0x11e7c>
   238e0:	ldrd	r0, [sp, #56]	; 0x38
   238e4:	ldr	r3, [r3]
   238e8:	subs	fp, r6, r0
   238ec:	sbc	sl, r7, r1
   238f0:	cmp	r3, #2
   238f4:	beq	244e4 <__assert_fail@plt+0x124fc>
   238f8:	ldr	r2, [sp, #136]	; 0x88
   238fc:	cmp	r3, #1
   23900:	orreq	r2, r2, #1
   23904:	cmp	r2, #0
   23908:	beq	244e4 <__assert_fail@plt+0x124fc>
   2390c:	ldr	ip, [sp, #224]	; 0xe0
   23910:	ldrd	r0, [sp, #72]	; 0x48
   23914:	ldr	lr, [sp, #64]	; 0x40
   23918:	ldr	r2, [ip]
   2391c:	subs	r3, r8, r0
   23920:	sbc	r0, r9, r1
   23924:	ldr	r1, [ip, #4]
   23928:	adds	r2, r2, r3
   2392c:	adc	r1, r1, r0
   23930:	adds	r3, lr, r3
   23934:	ldr	lr, [pc, #1300]	; 23e50 <__assert_fail@plt+0x11e68>
   23938:	str	r3, [sp, #64]	; 0x40
   2393c:	str	r2, [ip]
   23940:	ldr	r3, [lr]
   23944:	str	r1, [ip, #4]
   23948:	str	r3, [sp, #40]	; 0x28
   2394c:	ldr	r3, [sp, #68]	; 0x44
   23950:	adc	r0, r3, r0
   23954:	ldr	r3, [sp, #40]	; 0x28
   23958:	str	r0, [sp, #68]	; 0x44
   2395c:	ldr	r0, [lr, #4]
   23960:	adds	r3, r3, fp
   23964:	adc	r0, r0, sl
   23968:	ldrd	sl, [sp, #56]	; 0x38
   2396c:	str	r3, [lr]
   23970:	str	r0, [lr, #4]
   23974:	cmp	sl, r6
   23978:	sbcs	sl, fp, r7
   2397c:	blt	24474 <__assert_fail@plt+0x1248c>
   23980:	mov	r0, r8
   23984:	mov	r1, r9
   23988:	strd	r4, [sp, #40]	; 0x28
   2398c:	strd	r6, [sp, #56]	; 0x38
   23990:	bl	18974 <__assert_fail@plt+0x698c>
   23994:	strd	r8, [sp, #72]	; 0x48
   23998:	mov	sl, r0
   2399c:	b	2314c <__assert_fail@plt+0x11164>
   239a0:	ldrd	r8, [sp, #72]	; 0x48
   239a4:	ldr	r3, [sp, #32]
   239a8:	ldrd	r6, [sp, #56]	; 0x38
   239ac:	add	r4, r3, r8
   239b0:	b	239d4 <__assert_fail@plt+0x119ec>
   239b4:	ldrb	fp, [r4, #1]!
   239b8:	mov	r0, r6
   239bc:	mov	r1, r7
   239c0:	bl	18974 <__assert_fail@plt+0x698c>
   239c4:	cmp	fp, #45	; 0x2d
   239c8:	bne	243f8 <__assert_fail@plt+0x12410>
   239cc:	cmp	r0, #43	; 0x2b
   239d0:	beq	243d8 <__assert_fail@plt+0x123f0>
   239d4:	cmp	r0, #32
   239d8:	bne	24790 <__assert_fail@plt+0x127a8>
   239dc:	adds	r8, r8, #1
   239e0:	adc	r9, r9, #0
   239e4:	mov	r0, r8
   239e8:	adds	r6, r6, #1
   239ec:	mov	r1, r9
   239f0:	adc	r7, r7, #0
   239f4:	bl	18974 <__assert_fail@plt+0x698c>
   239f8:	cmp	r0, #32
   239fc:	beq	239b4 <__assert_fail@plt+0x119cc>
   23a00:	cmp	r0, #45	; 0x2d
   23a04:	mov	sl, r0
   23a08:	beq	2441c <__assert_fail@plt+0x12434>
   23a0c:	mov	r0, r6
   23a10:	mov	r1, r7
   23a14:	bl	18974 <__assert_fail@plt+0x698c>
   23a18:	mov	r5, r0
   23a1c:	b	2440c <__assert_fail@plt+0x12424>
   23a20:	cmp	r0, #32
   23a24:	bne	23498 <__assert_fail@plt+0x114b0>
   23a28:	b	23488 <__assert_fail@plt+0x114a0>
   23a2c:	ldrd	r0, [sp, #40]	; 0x28
   23a30:	ldr	r3, [sp, #32]
   23a34:	mov	r4, r0
   23a38:	add	r3, r3, r0
   23a3c:	mov	r5, r1
   23a40:	ldrb	r2, [r3, #1]!
   23a44:	adds	r4, r4, #1
   23a48:	adc	r5, r5, #0
   23a4c:	cmp	r2, #43	; 0x2b
   23a50:	beq	23a40 <__assert_fail@plt+0x11a58>
   23a54:	ldrd	r0, [sp, #40]	; 0x28
   23a58:	subs	r3, r4, r0
   23a5c:	sbc	r2, r5, r1
   23a60:	ldr	r1, [sp, #64]	; 0x40
   23a64:	adds	r3, r1, r3
   23a68:	str	r3, [sp, #64]	; 0x40
   23a6c:	ldr	r3, [sp, #68]	; 0x44
   23a70:	adc	r3, r3, r2
   23a74:	str	r3, [sp, #68]	; 0x44
   23a78:	ldrd	r0, [sp, #64]	; 0x40
   23a7c:	subs	r2, r0, #1
   23a80:	sbc	r3, r1, #0
   23a84:	ldr	r0, [sp, #112]	; 0x70
   23a88:	bl	16c90 <__assert_fail@plt+0x4ca8>
   23a8c:	cmp	r0, #0
   23a90:	beq	23268 <__assert_fail@plt+0x11280>
   23a94:	ldrd	r0, [sp, #72]	; 0x48
   23a98:	bl	18974 <__assert_fail@plt+0x698c>
   23a9c:	strd	r4, [sp, #40]	; 0x28
   23aa0:	mov	sl, r0
   23aa4:	b	2314c <__assert_fail@plt+0x11164>
   23aa8:	mov	r0, sl
   23aac:	mov	r1, fp
   23ab0:	bl	18974 <__assert_fail@plt+0x698c>
   23ab4:	str	r4, [sp, #40]	; 0x28
   23ab8:	str	r6, [sp, #44]	; 0x2c
   23abc:	mov	sl, r0
   23ac0:	b	2314c <__assert_fail@plt+0x11164>
   23ac4:	ldrd	r2, [sp, #64]	; 0x40
   23ac8:	adds	r1, r2, r1
   23acc:	adc	r3, r3, r0
   23ad0:	cmp	sl, r4
   23ad4:	sbcs	r2, fp, r5
   23ad8:	ldrd	sl, [sp, #56]	; 0x38
   23adc:	movlt	r2, #1
   23ae0:	movge	r2, #0
   23ae4:	cmp	sl, r6
   23ae8:	sbcs	r0, fp, r7
   23aec:	movge	r2, #0
   23af0:	andlt	r2, r2, #1
   23af4:	cmp	r2, #0
   23af8:	beq	247d0 <__assert_fail@plt+0x127e8>
   23afc:	subs	r2, r1, r6
   23b00:	sbc	fp, r3, r7
   23b04:	strd	r6, [sp, #48]	; 0x30
   23b08:	str	r2, [sp, #80]	; 0x50
   23b0c:	mov	r6, #0
   23b10:	mov	r7, #0
   23b14:	strd	r8, [sp, #104]	; 0x68
   23b18:	str	fp, [sp, #96]	; 0x60
   23b1c:	b	23b6c <__assert_fail@plt+0x11b84>
   23b20:	ldrd	r2, [sp, #40]	; 0x28
   23b24:	subs	r4, r4, #1
   23b28:	sbc	r5, r5, #0
   23b2c:	ldrd	r8, [sp, #88]	; 0x58
   23b30:	adds	r6, r6, #1
   23b34:	adc	r7, r7, #0
   23b38:	cmp	r2, r4
   23b3c:	sbcs	r3, r3, r5
   23b40:	movlt	r3, #1
   23b44:	movge	r3, #0
   23b48:	cmp	r8, sl
   23b4c:	sbcs	r2, r9, fp
   23b50:	mov	r0, sl
   23b54:	mov	r1, fp
   23b58:	movge	r3, #0
   23b5c:	andlt	r3, r3, #1
   23b60:	cmp	r3, #0
   23b64:	strd	r0, [sp, #48]	; 0x30
   23b68:	beq	24560 <__assert_fail@plt+0x12578>
   23b6c:	ldrd	r2, [sp, #48]	; 0x30
   23b70:	subs	sl, r2, #1
   23b74:	sbc	fp, r3, #0
   23b78:	ldr	r3, [sp, #80]	; 0x50
   23b7c:	mov	r0, sl
   23b80:	adds	r2, r3, sl
   23b84:	ldr	r3, [sp, #96]	; 0x60
   23b88:	mov	r1, fp
   23b8c:	adc	r3, r3, fp
   23b90:	bl	216fc <__assert_fail@plt+0xf714>
   23b94:	cmp	r0, #0
   23b98:	bne	23b20 <__assert_fail@plt+0x11b38>
   23b9c:	ldrd	r2, [sp, #40]	; 0x28
   23ba0:	ldrd	r8, [sp, #104]	; 0x68
   23ba4:	subs	r1, r4, r2
   23ba8:	str	r1, [sp, #96]	; 0x60
   23bac:	ldrd	r0, [sp, #48]	; 0x30
   23bb0:	strd	r0, [sp, #56]	; 0x38
   23bb4:	sbc	r3, r5, r3
   23bb8:	str	r3, [sp, #104]	; 0x68
   23bbc:	ldr	r3, [sp, #120]	; 0x78
   23bc0:	strd	r4, [sp, #40]	; 0x28
   23bc4:	ldr	r2, [r3]
   23bc8:	b	23634 <__assert_fail@plt+0x1164c>
   23bcc:	ldr	r3, [pc, #628]	; 23e48 <__assert_fail@plt+0x11e60>
   23bd0:	str	r3, [sp, #120]	; 0x78
   23bd4:	ldr	r3, [r3]
   23bd8:	cmp	r3, #1
   23bdc:	beq	24274 <__assert_fail@plt+0x1228c>
   23be0:	ldrd	r2, [sp, #64]	; 0x40
   23be4:	ldrd	r0, [sp, #48]	; 0x30
   23be8:	cmp	r3, r1
   23bec:	cmpeq	r2, r0
   23bf0:	beq	235f0 <__assert_fail@plt+0x11608>
   23bf4:	ldrd	r0, [sp, #48]	; 0x30
   23bf8:	subs	r2, r0, #1
   23bfc:	sbc	r3, r1, #0
   23c00:	ldr	r0, [sp, #112]	; 0x70
   23c04:	bl	16c90 <__assert_fail@plt+0x4ca8>
   23c08:	cmp	r0, #0
   23c0c:	bne	235e8 <__assert_fail@plt+0x11600>
   23c10:	b	23268 <__assert_fail@plt+0x11280>
   23c14:	ldr	r3, [sp, #64]	; 0x40
   23c18:	ldr	r2, [sp, #96]	; 0x60
   23c1c:	ldr	sl, [sp, #112]	; 0x70
   23c20:	adds	r3, r3, r2
   23c24:	str	r3, [sp, #64]	; 0x40
   23c28:	ldr	r2, [sp, #104]	; 0x68
   23c2c:	ldr	r3, [sp, #68]	; 0x44
   23c30:	adc	r3, r3, r2
   23c34:	str	r3, [sp, #68]	; 0x44
   23c38:	ldrd	r0, [sp, #64]	; 0x40
   23c3c:	subs	r2, r0, #1
   23c40:	sbc	r3, r1, #0
   23c44:	mov	r0, sl
   23c48:	bl	16c90 <__assert_fail@plt+0x4ca8>
   23c4c:	cmp	r0, #0
   23c50:	beq	23268 <__assert_fail@plt+0x11280>
   23c54:	ldrb	r0, [sl, #4]
   23c58:	b	2370c <__assert_fail@plt+0x11724>
   23c5c:	ldrd	r2, [sp, #168]	; 0xa8
   23c60:	ldr	r0, [sp, #112]	; 0x70
   23c64:	bl	16c90 <__assert_fail@plt+0x4ca8>
   23c68:	cmp	r0, #0
   23c6c:	bne	23130 <__assert_fail@plt+0x11148>
   23c70:	b	23268 <__assert_fail@plt+0x11280>
   23c74:	ldr	r8, [pc, #492]	; 23e68 <__assert_fail@plt+0x11e80>
   23c78:	mov	r0, #10
   23c7c:	ldr	r1, [r8]
   23c80:	bl	11ec8 <fputc@plt>
   23c84:	ldrd	r2, [sp, #72]	; 0x48
   23c88:	ldrd	r0, [sp, #40]	; 0x28
   23c8c:	adds	ip, r0, r2
   23c90:	adc	r3, r1, r3
   23c94:	str	ip, [sp, #200]	; 0xc8
   23c98:	str	r3, [sp, #204]	; 0xcc
   23c9c:	ldrd	r2, [sp, #200]	; 0xc8
   23ca0:	cmp	r2, #0
   23ca4:	sbcs	r3, r3, #0
   23ca8:	blt	23e30 <__assert_fail@plt+0x11e48>
   23cac:	ldrd	r2, [sp, #200]	; 0xc8
   23cb0:	ldrd	r4, [sp, #64]	; 0x40
   23cb4:	ldr	sl, [pc, #432]	; 23e6c <__assert_fail@plt+0x11e84>
   23cb8:	adds	r1, r2, #1
   23cbc:	str	r1, [sp, #160]	; 0xa0
   23cc0:	ldrd	r0, [sp, #144]	; 0x90
   23cc4:	adc	r3, r3, #0
   23cc8:	str	r3, [sp, #164]	; 0xa4
   23ccc:	subs	r3, r4, r0
   23cd0:	sbc	r2, r5, r1
   23cd4:	subs	r3, r3, #2
   23cd8:	str	r3, [sp, #80]	; 0x50
   23cdc:	sbc	r3, r2, #0
   23ce0:	str	r3, [sp, #96]	; 0x60
   23ce4:	ldr	r3, [sp, #32]
   23ce8:	ldr	fp, [pc, #384]	; 23e70 <__assert_fail@plt+0x11e88>
   23cec:	sub	r9, r3, #1
   23cf0:	mov	r6, #0
   23cf4:	mov	r7, #0
   23cf8:	b	23d70 <__assert_fail@plt+0x11d88>
   23cfc:	ldrd	r2, [sp, #144]	; 0x90
   23d00:	cmp	r2, r6
   23d04:	sbcs	r3, r3, r7
   23d08:	bge	23df4 <__assert_fail@plt+0x11e0c>
   23d0c:	ldrd	r2, [sp, #120]	; 0x78
   23d10:	cmp	r3, r7
   23d14:	cmpeq	r2, r6
   23d18:	beq	24384 <__assert_fail@plt+0x1239c>
   23d1c:	ldrd	r2, [sp, #40]	; 0x28
   23d20:	ldrd	r0, [sp, #200]	; 0xc8
   23d24:	cmp	r6, r2
   23d28:	sbcs	r3, r7, r3
   23d2c:	movge	r3, #1
   23d30:	movlt	r3, #0
   23d34:	cmp	r6, r0
   23d38:	sbcs	r2, r7, r1
   23d3c:	movge	r3, #0
   23d40:	andlt	r3, r3, #1
   23d44:	cmp	r3, #0
   23d48:	bne	243a0 <__assert_fail@plt+0x123b8>
   23d4c:	ldr	r1, [r8]
   23d50:	mov	r0, #10
   23d54:	bl	11ec8 <fputc@plt>
   23d58:	ldrd	r2, [sp, #160]	; 0xa0
   23d5c:	adds	r6, r6, #1
   23d60:	adc	r7, r7, #0
   23d64:	cmp	r7, r3
   23d68:	cmpeq	r6, r2
   23d6c:	beq	23e30 <__assert_fail@plt+0x11e48>
   23d70:	mov	r2, r6
   23d74:	mov	r3, r7
   23d78:	add	r0, sp, #316	; 0x13c
   23d7c:	ldr	r4, [r8]
   23d80:	bl	1f490 <__assert_fail@plt+0xd4a8>
   23d84:	ldrb	r3, [r9, #1]!
   23d88:	mov	r2, sl
   23d8c:	mov	r1, #1
   23d90:	str	r3, [sp]
   23d94:	mov	r3, r0
   23d98:	mov	r0, r4
   23d9c:	bl	11e38 <__fprintf_chk@plt>
   23da0:	orrs	r3, r6, r7
   23da4:	bne	23cfc <__assert_fail@plt+0x11d14>
   23da8:	bl	188f0 <__assert_fail@plt+0x6908>
   23dac:	ldr	r4, [r8]
   23db0:	mov	r2, r0
   23db4:	mov	r3, r1
   23db8:	add	r0, sp, #316	; 0x13c
   23dbc:	bl	1f490 <__assert_fail@plt+0xd4a8>
   23dc0:	mov	r5, r0
   23dc4:	bl	18900 <__assert_fail@plt+0x6918>
   23dc8:	mov	r2, r0
   23dcc:	mov	r3, r1
   23dd0:	add	r0, sp, #340	; 0x154
   23dd4:	bl	1f490 <__assert_fail@plt+0xd4a8>
   23dd8:	mov	r3, r5
   23ddc:	mov	r2, fp
   23de0:	mov	r1, #1
   23de4:	str	r0, [sp]
   23de8:	mov	r0, r4
   23dec:	bl	11e38 <__fprintf_chk@plt>
   23df0:	b	23d58 <__assert_fail@plt+0x11d70>
   23df4:	mov	r1, r7
   23df8:	mov	r0, r6
   23dfc:	bl	18960 <__assert_fail@plt+0x6978>
   23e00:	mov	r1, r7
   23e04:	mov	r4, r0
   23e08:	mov	r0, r6
   23e0c:	bl	18988 <__assert_fail@plt+0x69a0>
   23e10:	ldr	ip, [r8]
   23e14:	mov	r3, r4
   23e18:	ldr	r2, [pc, #96]	; 23e80 <__assert_fail@plt+0x11e98>
   23e1c:	mov	r1, #1
   23e20:	str	r0, [sp]
   23e24:	mov	r0, ip
   23e28:	bl	11e38 <__fprintf_chk@plt>
   23e2c:	b	23d58 <__assert_fail@plt+0x11d70>
   23e30:	ldr	r0, [r8]
   23e34:	bl	11a84 <fflush@plt>
   23e38:	b	23104 <__assert_fail@plt+0x1111c>
   23e3c:	andeq	r7, r4, r8, lsl #30
   23e40:	andeq	r0, r0, r5, lsr #3
   23e44:	andeq	r5, r3, ip, ror r0
   23e48:	andeq	sl, r4, ip, lsl #15
   23e4c:	andeq	r5, r3, ip, asr #2
   23e50:	andeq	sl, r4, r0, lsl #15
   23e54:	andeq	r5, r3, r8, asr r1
   23e58:	andeq	r5, r3, r0, ror r1
   23e5c:	andeq	r5, r3, ip, ror r1
   23e60:	andeq	r5, r3, ip, lsr r1
   23e64:			; <UNDEFINED> instruction: 0x0004a6bc
   23e68:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   23e6c:	andeq	r4, r3, r8, ror #6
   23e70:	andeq	r4, r3, r0, ror r3
   23e74:	muleq	r4, r0, r7
   23e78:	andeq	sl, r4, r8, lsr #15
   23e7c:			; <UNDEFINED> instruction: 0x0004a6b0
   23e80:	andeq	r5, r3, r0, lsl r0
   23e84:	ldrdeq	r4, [r3], -r0
   23e88:	andeq	r5, r3, ip, lsr #32
   23e8c:	andeq	r5, r3, r4, ror #2
   23e90:	strdeq	r4, [r3], -r0
   23e94:	ldrdeq	sl, [r4], -r8
   23e98:	andeq	r0, r0, r6, lsl #4
   23e9c:	andeq	r5, r3, r8, lsl #3
   23ea0:	andeq	r0, r0, r9, ror r1
   23ea4:	andeq	r5, r3, ip, asr #32
   23ea8:	andeq	r0, r0, r9, lsl #3
   23eac:			; <UNDEFINED> instruction: 0x00034fb0
   23eb0:	andeq	r5, r3, r8, lsl r0
   23eb4:	andeq	r4, r3, r8, ror pc
   23eb8:	andeq	r4, r3, r8, lsr #31
   23ebc:	andeq	r5, r3, r4, lsr r0
   23ec0:	bl	188f0 <__assert_fail@plt+0x6908>
   23ec4:	ldr	r3, [pc, #-88]	; 23e74 <__assert_fail@plt+0x11e8c>
   23ec8:	ldr	ip, [pc, #-88]	; 23e78 <__assert_fail@plt+0x11e90>
   23ecc:	ldm	r3, {r2, lr}
   23ed0:	str	ip, [sp, #224]	; 0xe0
   23ed4:	ldm	ip, {r3, ip}
   23ed8:	adds	r8, r0, r2
   23edc:	adc	r9, r1, lr
   23ee0:	adds	r3, r3, #1
   23ee4:	str	r3, [sp, #216]	; 0xd8
   23ee8:	adc	r3, ip, #0
   23eec:	str	r3, [sp, #220]	; 0xdc
   23ef0:	ldrd	r2, [sp, #72]	; 0x48
   23ef4:	cmp	r2, #1
   23ef8:	sbcs	r1, r3, #0
   23efc:	blt	246cc <__assert_fail@plt+0x126e4>
   23f00:	ldrd	r6, [sp, #64]	; 0x40
   23f04:	adds	r1, r2, #1
   23f08:	mov	r4, #1
   23f0c:	mov	r5, #0
   23f10:	adc	r3, r3, #0
   23f14:	str	r1, [sp, #32]
   23f18:	str	r3, [sp, #36]	; 0x24
   23f1c:	mov	r0, r4
   23f20:	mov	r1, r5
   23f24:	bl	18974 <__assert_fail@plt+0x698c>
   23f28:	cmp	r0, #32
   23f2c:	bne	23f38 <__assert_fail@plt+0x11f50>
   23f30:	adds	r6, r6, #1
   23f34:	adc	r7, r7, #0
   23f38:	ldrd	r2, [sp, #32]
   23f3c:	adds	r4, r4, #1
   23f40:	adc	r5, r5, #0
   23f44:	cmp	r5, r3
   23f48:	cmpeq	r4, r2
   23f4c:	bne	23f1c <__assert_fail@plt+0x11f34>
   23f50:	orrs	r3, r6, r7
   23f54:	ldr	r3, [pc, #-200]	; 23e94 <__assert_fail@plt+0x11eac>
   23f58:	str	r3, [sp, #196]	; 0xc4
   23f5c:	beq	2465c <__assert_fail@plt+0x12674>
   23f60:	ldrd	r0, [sp, #72]	; 0x48
   23f64:	adds	sl, r6, r6
   23f68:	ldr	r3, [r3]
   23f6c:	adc	fp, r7, r7
   23f70:	subs	r2, r0, r6
   23f74:	str	r2, [sp, #140]	; 0x8c
   23f78:	sbc	r2, r1, r7
   23f7c:	tst	r3, #1
   23f80:	ldr	r3, [pc, #-268]	; 23e7c <__assert_fail@plt+0x11e94>
   23f84:	str	r2, [sp, #192]	; 0xc0
   23f88:	ldrd	r4, [r3]
   23f8c:	bne	2443c <__assert_fail@plt+0x12454>
   23f90:	ldrd	r0, [sp, #72]	; 0x48
   23f94:	subs	r3, r4, r0
   23f98:	sbc	r5, r5, r1
   23f9c:	adds	r3, r3, r6
   23fa0:	adc	r7, r5, r7
   23fa4:	adds	r3, r3, #1
   23fa8:	adc	r7, r7, #0
   23fac:	subs	r6, r3, r8
   23fb0:	sbc	r7, r7, r9
   23fb4:	bl	18950 <__assert_fail@plt+0x6968>
   23fb8:	mov	r4, r0
   23fbc:	mov	r5, r1
   23fc0:	bl	18940 <__assert_fail@plt+0x6958>
   23fc4:	subs	r3, r4, r0
   23fc8:	str	r3, [sp, #96]	; 0x60
   23fcc:	sbc	r3, r5, r1
   23fd0:	str	r3, [sp, #100]	; 0x64
   23fd4:	ldrd	r2, [sp, #96]	; 0x60
   23fd8:	cmp	r2, #1
   23fdc:	sbcs	r3, r3, #0
   23fe0:	blt	23ff4 <__assert_fail@plt+0x1200c>
   23fe4:	bl	188f0 <__assert_fail@plt+0x6908>
   23fe8:	cmp	r0, #2
   23fec:	sbcs	r3, r1, #0
   23ff0:	blt	246bc <__assert_fail@plt+0x126d4>
   23ff4:	strd	r6, [sp, #32]
   23ff8:	ldrd	r2, [sp, #216]	; 0xd8
   23ffc:	subs	r1, r8, r2
   24000:	sbc	r3, r9, r3
   24004:	str	r1, [sp, #48]	; 0x30
   24008:	str	r3, [sp, #52]	; 0x34
   2400c:	ldrd	r2, [sp, #48]	; 0x30
   24010:	cmp	r2, r8
   24014:	sbcs	r3, r3, r9
   24018:	blt	24650 <__assert_fail@plt+0x12668>
   2401c:	subs	r3, r8, #1
   24020:	str	r3, [sp, #104]	; 0x68
   24024:	sbc	r3, r9, #0
   24028:	str	r3, [sp, #108]	; 0x6c
   2402c:	strd	r6, [sp, #80]	; 0x50
   24030:	ldrd	r2, [sp, #48]	; 0x30
   24034:	ldrd	r0, [sp, #80]	; 0x50
   24038:	cmp	r0, r2
   2403c:	sbcs	r1, r1, r3
   24040:	strdlt	r2, [sp, #80]	; 0x50
   24044:	ldrd	r2, [sp, #80]	; 0x50
   24048:	cmp	r2, #0
   2404c:	sbcs	r3, r3, #0
   24050:	blt	2474c <__assert_fail@plt+0x12764>
   24054:	ldrd	r2, [sp, #72]	; 0x48
   24058:	strd	r8, [sp, #232]	; 0xe8
   2405c:	mov	r4, #0
   24060:	adds	r1, r2, #1
   24064:	adc	r3, r3, #0
   24068:	str	r3, [sp, #136]	; 0x88
   2406c:	add	r3, sp, #256	; 0x100
   24070:	str	r1, [sp, #72]	; 0x48
   24074:	mov	r5, #0
   24078:	str	r3, [sp, #48]	; 0x30
   2407c:	strd	r8, [sp, #128]	; 0x80
   24080:	b	24218 <__assert_fail@plt+0x12230>
   24084:	ldr	r3, [sp, #140]	; 0x8c
   24088:	ldr	r2, [sp, #192]	; 0xc0
   2408c:	ldr	ip, [sp, #48]	; 0x30
   24090:	strd	r0, [sp]
   24094:	str	r3, [sp, #8]
   24098:	str	r2, [sp, #12]
   2409c:	mov	r3, r7
   240a0:	str	ip, [sp, #24]
   240a4:	strd	sl, [sp, #16]
   240a8:	mov	r2, r6
   240ac:	ldr	r0, [sp, #72]	; 0x48
   240b0:	ldr	r1, [sp, #136]	; 0x88
   240b4:	bl	229f4 <__assert_fail@plt+0x10a0c>
   240b8:	cmp	sl, r0
   240bc:	sbcs	r3, fp, r1
   240c0:	blt	24114 <__assert_fail@plt+0x1212c>
   240c4:	ldr	r3, [sp, #256]	; 0x100
   240c8:	ldr	r2, [sp, #260]	; 0x104
   240cc:	subs	r3, r3, r6
   240d0:	str	r3, [sp, #176]	; 0xb0
   240d4:	sbc	r3, r2, r7
   240d8:	str	r3, [sp, #180]	; 0xb4
   240dc:	ldrd	r8, [sp, #64]	; 0x40
   240e0:	ldrd	r2, [sp, #176]	; 0xb0
   240e4:	cmp	r8, r2
   240e8:	sbcs	ip, r9, r3
   240ec:	bge	24114 <__assert_fail@plt+0x1212c>
   240f0:	orrs	ip, r0, r1
   240f4:	beq	24734 <__assert_fail@plt+0x1274c>
   240f8:	subs	sl, r0, #1
   240fc:	sbc	fp, r1, #0
   24100:	str	r2, [sp, #140]	; 0x8c
   24104:	str	r3, [sp, #192]	; 0xc0
   24108:	str	r2, [sp, #64]	; 0x40
   2410c:	strd	r6, [sp, #232]	; 0xe8
   24110:	str	r3, [sp, #68]	; 0x44
   24114:	ldrd	r0, [sp, #104]	; 0x68
   24118:	cmp	r4, #1
   2411c:	sbcs	r3, r5, #0
   24120:	movge	r3, #1
   24124:	movlt	r3, #0
   24128:	cmp	r0, r4
   2412c:	sbcs	r2, r1, r5
   24130:	movlt	r3, #0
   24134:	andge	r3, r3, #1
   24138:	cmp	r3, #0
   2413c:	beq	24200 <__assert_fail@plt+0x12218>
   24140:	ldr	r2, [pc, #-716]	; 23e7c <__assert_fail@plt+0x11e94>
   24144:	ldrd	r0, [sp, #128]	; 0x80
   24148:	ldrd	r8, [sp, #96]	; 0x60
   2414c:	ldr	r3, [r2]
   24150:	subs	r6, r0, r4
   24154:	ldr	r2, [r2, #4]
   24158:	sbc	r7, r1, r5
   2415c:	adds	r0, r3, #1
   24160:	adc	r1, r2, #0
   24164:	cmp	r8, #0
   24168:	sbcs	ip, r9, #0
   2416c:	blt	244d0 <__assert_fail@plt+0x124e8>
   24170:	ldr	r3, [sp, #140]	; 0x8c
   24174:	ldr	r2, [sp, #192]	; 0xc0
   24178:	ldr	ip, [sp, #48]	; 0x30
   2417c:	strd	r0, [sp]
   24180:	str	r3, [sp, #8]
   24184:	str	r2, [sp, #12]
   24188:	mov	r3, r7
   2418c:	str	ip, [sp, #24]
   24190:	strd	sl, [sp, #16]
   24194:	mov	r2, r6
   24198:	ldr	r0, [sp, #72]	; 0x48
   2419c:	ldr	r1, [sp, #136]	; 0x88
   241a0:	bl	229f4 <__assert_fail@plt+0x10a0c>
   241a4:	cmp	sl, r0
   241a8:	sbcs	r3, fp, r1
   241ac:	blt	24200 <__assert_fail@plt+0x12218>
   241b0:	ldr	r3, [sp, #256]	; 0x100
   241b4:	ldr	r2, [sp, #260]	; 0x104
   241b8:	subs	r3, r3, r6
   241bc:	str	r3, [sp, #184]	; 0xb8
   241c0:	sbc	r3, r2, r7
   241c4:	str	r3, [sp, #188]	; 0xbc
   241c8:	ldrd	r8, [sp, #64]	; 0x40
   241cc:	ldrd	r2, [sp, #184]	; 0xb8
   241d0:	cmp	r8, r2
   241d4:	sbcs	ip, r9, r3
   241d8:	bge	24200 <__assert_fail@plt+0x12218>
   241dc:	orrs	ip, r0, r1
   241e0:	beq	2471c <__assert_fail@plt+0x12734>
   241e4:	subs	sl, r0, #1
   241e8:	sbc	fp, r1, #0
   241ec:	str	r2, [sp, #140]	; 0x8c
   241f0:	str	r3, [sp, #192]	; 0xc0
   241f4:	str	r2, [sp, #64]	; 0x40
   241f8:	strd	r6, [sp, #232]	; 0xe8
   241fc:	str	r3, [sp, #68]	; 0x44
   24200:	ldrd	r2, [sp, #80]	; 0x50
   24204:	adds	r4, r4, #1
   24208:	adc	r5, r5, #0
   2420c:	cmp	r2, r4
   24210:	sbcs	r3, r3, r5
   24214:	blt	24518 <__assert_fail@plt+0x12530>
   24218:	ldrd	r2, [sp, #32]
   2421c:	cmp	r2, r4
   24220:	sbcs	r3, r3, r5
   24224:	blt	24114 <__assert_fail@plt+0x1212c>
   24228:	ldr	r2, [pc, #-948]	; 23e7c <__assert_fail@plt+0x11e94>
   2422c:	ldrd	r0, [sp, #128]	; 0x80
   24230:	ldrd	r8, [sp, #96]	; 0x60
   24234:	ldr	r3, [r2]
   24238:	adds	r6, r4, r0
   2423c:	ldr	r2, [r2, #4]
   24240:	adc	r7, r5, r1
   24244:	adds	r0, r3, #1
   24248:	adc	r1, r2, #0
   2424c:	cmp	r8, #0
   24250:	sbcs	ip, r9, #0
   24254:	bge	24084 <__assert_fail@plt+0x1209c>
   24258:	subs	r3, r3, r6
   2425c:	sbc	r2, r2, r7
   24260:	adds	r3, r3, #1
   24264:	adc	r2, r2, #0
   24268:	b	2408c <__assert_fail@plt+0x120a4>
   2426c:	cmp	r1, #0
   24270:	bne	23980 <__assert_fail@plt+0x11998>
   24274:	ldrd	sl, [sp, #48]	; 0x30
   24278:	ldrd	r0, [sp, #64]	; 0x40
   2427c:	subs	r3, sl, r0
   24280:	sbc	r2, fp, r1
   24284:	ldrd	r0, [sp, #40]	; 0x28
   24288:	strd	r4, [sp, #40]	; 0x28
   2428c:	subs	ip, r0, r3
   24290:	sbc	r1, r1, r2
   24294:	str	r1, [sp, #156]	; 0x9c
   24298:	ldrd	r0, [sp, #56]	; 0x38
   2429c:	str	ip, [sp, #152]	; 0x98
   242a0:	strd	r6, [sp, #56]	; 0x38
   242a4:	subs	r3, r0, r3
   242a8:	str	r3, [sp, #88]	; 0x58
   242ac:	sbc	r3, r1, r2
   242b0:	str	r3, [sp, #92]	; 0x5c
   242b4:	ldrd	r2, [sp, #152]	; 0x98
   242b8:	subs	r1, r4, r2
   242bc:	sbc	ip, r5, r3
   242c0:	ldrd	r2, [sp, #88]	; 0x58
   242c4:	str	r1, [sp, #96]	; 0x60
   242c8:	str	ip, [sp, #104]	; 0x68
   242cc:	subs	r0, r6, r2
   242d0:	sbc	r3, r7, r3
   242d4:	adds	r2, r1, #3
   242d8:	adc	r1, ip, #0
   242dc:	mov	r6, #0
   242e0:	adds	r2, r0, r2
   242e4:	mov	r7, #0
   242e8:	adc	r3, r3, r1
   242ec:	str	r2, [sp, #48]	; 0x30
   242f0:	str	r3, [sp, #80]	; 0x50
   242f4:	ldrd	r0, [sp, #72]	; 0x48
   242f8:	ldr	r3, [sp, #48]	; 0x30
   242fc:	subs	r2, r8, r0
   24300:	sbc	r1, r9, r1
   24304:	adds	r2, r2, #1
   24308:	adc	r1, r1, #0
   2430c:	adds	r3, r3, r2
   24310:	str	r3, [sp, #48]	; 0x30
   24314:	ldr	r3, [sp, #80]	; 0x50
   24318:	adc	r3, r3, r1
   2431c:	str	r3, [sp, #80]	; 0x50
   24320:	b	23670 <__assert_fail@plt+0x11688>
   24324:	ldr	r3, [sp, #64]	; 0x40
   24328:	adds	r3, r3, r6
   2432c:	str	r3, [sp, #64]	; 0x40
   24330:	ldr	r3, [sp, #68]	; 0x44
   24334:	adc	r3, r3, r7
   24338:	str	r3, [sp, #68]	; 0x44
   2433c:	ldrd	r0, [sp, #64]	; 0x40
   24340:	subs	r2, r0, #1
   24344:	sbc	r3, r1, #0
   24348:	ldr	r0, [sp, #112]	; 0x70
   2434c:	bl	16c90 <__assert_fail@plt+0x4ca8>
   24350:	cmp	r0, #0
   24354:	beq	23268 <__assert_fail@plt+0x11280>
   24358:	adds	r3, r4, r6
   2435c:	str	r3, [sp, #40]	; 0x28
   24360:	adc	r3, r5, r7
   24364:	str	r3, [sp, #44]	; 0x2c
   24368:	ldr	r3, [sp, #56]	; 0x38
   2436c:	adds	r3, r3, r6
   24370:	str	r3, [sp, #56]	; 0x38
   24374:	ldr	r3, [sp, #60]	; 0x3c
   24378:	adc	r3, r3, r7
   2437c:	str	r3, [sp, #60]	; 0x3c
   24380:	b	237cc <__assert_fail@plt+0x117e4>
   24384:	ldrd	r2, [sp, #64]	; 0x40
   24388:	add	r0, sp, #316	; 0x13c
   2438c:	ldr	r4, [r8]
   24390:	bl	1f490 <__assert_fail@plt+0xd4a8>
   24394:	ldrd	r2, [sp, #72]	; 0x48
   24398:	mov	r5, r0
   2439c:	b	23dd0 <__assert_fail@plt+0x11de8>
   243a0:	ldr	r3, [sp, #80]	; 0x50
   243a4:	mov	r2, #0
   243a8:	adds	r0, r3, r6
   243ac:	ldr	r3, [sp, #96]	; 0x60
   243b0:	adc	r1, r3, r7
   243b4:	ldr	r3, [sp, #48]	; 0x30
   243b8:	bl	16268 <__assert_fail@plt+0x4280>
   243bc:	ldr	r3, [sp, #256]	; 0x100
   243c0:	ldr	r2, [pc, #-1352]	; 23e80 <__assert_fail@plt+0x11e98>
   243c4:	mov	r1, #1
   243c8:	str	r0, [sp]
   243cc:	ldr	r0, [r8]
   243d0:	bl	11e38 <__fprintf_chk@plt>
   243d4:	b	23d58 <__assert_fail@plt+0x11d70>
   243d8:	mov	r0, r8
   243dc:	mov	r1, r9
   243e0:	bl	18974 <__assert_fail@plt+0x698c>
   243e4:	mov	r3, fp
   243e8:	ldrd	r4, [sp, #40]	; 0x28
   243ec:	mov	sl, r3
   243f0:	mov	fp, r0
   243f4:	b	23348 <__assert_fail@plt+0x11360>
   243f8:	mov	r5, r0
   243fc:	mov	r1, r9
   24400:	mov	r0, r8
   24404:	bl	18974 <__assert_fail@plt+0x698c>
   24408:	mov	sl, r0
   2440c:	cmp	r5, #43	; 0x2b
   24410:	strdne	r6, [sp, #56]	; 0x38
   24414:	strdne	r8, [sp, #72]	; 0x48
   24418:	bne	2314c <__assert_fail@plt+0x11164>
   2441c:	ldr	r3, [sp, #32]
   24420:	ldrd	r4, [sp, #40]	; 0x28
   24424:	add	r3, r3, r8
   24428:	ldrb	fp, [r3]
   2442c:	mov	r3, fp
   24430:	mov	fp, sl
   24434:	mov	sl, r3
   24438:	b	23348 <__assert_fail@plt+0x11360>
   2443c:	ldr	r2, [sp, #140]	; 0x8c
   24440:	ldr	r3, [sp, #192]	; 0xc0
   24444:	add	r0, sp, #316	; 0x13c
   24448:	bl	1f490 <__assert_fail@plt+0xd4a8>
   2444c:	mov	r2, sl
   24450:	mov	r3, fp
   24454:	str	r0, [sp, #32]
   24458:	add	r0, sp, #340	; 0x154
   2445c:	bl	1f490 <__assert_fail@plt+0xd4a8>
   24460:	ldr	r1, [sp, #32]
   24464:	mov	r2, r0
   24468:	ldr	r0, [pc, #-1516]	; 23e84 <__assert_fail@plt+0x11e9c>
   2446c:	bl	1fc1c <__assert_fail@plt+0xdc34>
   24470:	b	23f90 <__assert_fail@plt+0x11fa8>
   24474:	ldrd	sl, [sp, #56]	; 0x38
   24478:	mov	r0, sl
   2447c:	mov	r1, fp
   24480:	ldr	r2, [sp, #116]	; 0x74
   24484:	bl	1899c <__assert_fail@plt+0x69b4>
   24488:	adds	sl, sl, #1
   2448c:	adc	fp, fp, #0
   24490:	ldr	r3, [sp, #112]	; 0x70
   24494:	cmp	r7, fp
   24498:	cmpeq	r6, sl
   2449c:	strb	r0, [r3, #4]
   244a0:	bne	24478 <__assert_fail@plt+0x12490>
   244a4:	ldr	r2, [sp, #112]	; 0x70
   244a8:	mov	r3, #0
   244ac:	mov	r0, r8
   244b0:	strb	r3, [r2, #5]
   244b4:	mov	r1, r9
   244b8:	strd	sl, [sp, #56]	; 0x38
   244bc:	strd	r4, [sp, #40]	; 0x28
   244c0:	bl	18974 <__assert_fail@plt+0x698c>
   244c4:	strd	r8, [sp, #72]	; 0x48
   244c8:	mov	sl, r0
   244cc:	b	2314c <__assert_fail@plt+0x11164>
   244d0:	subs	r3, r3, r6
   244d4:	sbc	r2, r2, r7
   244d8:	adds	r3, r3, #1
   244dc:	adc	r2, r2, #0
   244e0:	b	24178 <__assert_fail@plt+0x12190>
   244e4:	ldrd	r0, [sp, #64]	; 0x40
   244e8:	adds	r3, r0, fp
   244ec:	adc	r2, r1, sl
   244f0:	subs	r3, r3, #1
   244f4:	sbc	r2, r2, #0
   244f8:	strd	r0, [sp]
   244fc:	str	r2, [sp, #12]
   24500:	str	r3, [sp, #8]
   24504:	ldr	r2, [pc, #-1668]	; 23e88 <__assert_fail@plt+0x11ea0>
   24508:	ldr	r1, [sp, #212]	; 0xd4
   2450c:	add	r0, sp, #255	; 0xff
   24510:	bl	2288c <__assert_fail@plt+0x108a4>
   24514:	b	2390c <__assert_fail@plt+0x11924>
   24518:	ldrd	r2, [sp, #64]	; 0x40
   2451c:	ldrd	r8, [sp, #232]	; 0xe8
   24520:	mov	r6, r2
   24524:	strd	r2, [sp, #72]	; 0x48
   24528:	ldr	r3, [sp, #196]	; 0xc4
   2452c:	ldr	r3, [r3]
   24530:	tst	r3, #1
   24534:	bne	24670 <__assert_fail@plt+0x12688>
   24538:	ldrd	r0, [sp, #216]	; 0xd8
   2453c:	mov	r3, r9
   24540:	mov	r2, r8
   24544:	cmp	r8, r0
   24548:	strd	r2, [sp, #64]	; 0x40
   2454c:	sbcs	r3, r3, r1
   24550:	mov	r3, #0
   24554:	strdlt	r0, [sp, #64]	; 0x40
   24558:	str	r3, [sp, #136]	; 0x88
   2455c:	b	23000 <__assert_fail@plt+0x11018>
   24560:	ldrd	r2, [sp, #40]	; 0x28
   24564:	strd	sl, [sp, #56]	; 0x38
   24568:	ldrd	r8, [sp, #104]	; 0x68
   2456c:	subs	r1, r4, r2
   24570:	str	r1, [sp, #96]	; 0x60
   24574:	b	23bb4 <__assert_fail@plt+0x11bcc>
   24578:	cmp	r0, #94	; 0x5e
   2457c:	cmpeq	sl, #61	; 0x3d
   24580:	moveq	r3, #1
   24584:	movne	r3, #0
   24588:	str	r3, [sp, #208]	; 0xd0
   2458c:	bne	24708 <__assert_fail@plt+0x12720>
   24590:	mov	r0, #0
   24594:	mov	r1, #0
   24598:	mov	r2, #0
   2459c:	strd	r0, [sp, #8]
   245a0:	strd	r0, [sp]
   245a4:	mov	r1, r2
   245a8:	add	r0, sp, #255	; 0xff
   245ac:	bl	2288c <__assert_fail@plt+0x108a4>
   245b0:	ldrd	r0, [sp, #64]	; 0x40
   245b4:	ldr	r3, [sp, #224]	; 0xe0
   245b8:	subs	ip, r0, #1
   245bc:	sbc	r1, r1, #0
   245c0:	str	ip, [sp, #240]	; 0xf0
   245c4:	str	r1, [sp, #244]	; 0xf4
   245c8:	ldrd	r2, [r3]
   245cc:	ldrd	r0, [sp, #240]	; 0xf0
   245d0:	cmp	r1, r3
   245d4:	cmpeq	r0, r2
   245d8:	bne	246f4 <__assert_fail@plt+0x1270c>
   245dc:	ldr	r0, [sp, #32]
   245e0:	bl	11ab4 <free@plt>
   245e4:	b	23268 <__assert_fail@plt+0x11280>
   245e8:	mov	r0, r3
   245ec:	b	23794 <__assert_fail@plt+0x117ac>
   245f0:	ldr	r3, [pc, #-1900]	; 23e8c <__assert_fail@plt+0x11ea4>
   245f4:	ldr	r1, [sp, #116]	; 0x74
   245f8:	add	r0, r3, r0
   245fc:	bl	11f88 <fputs@plt>
   24600:	ldrd	r2, [sp, #72]	; 0x48
   24604:	cmp	r2, r8
   24608:	sbcs	r1, r3, r9
   2460c:	ldr	r1, [sp, #112]	; 0x70
   24610:	strb	sl, [r1, #4]
   24614:	bge	246ec <__assert_fail@plt+0x12704>
   24618:	mov	sl, r2
   2461c:	mov	fp, r3
   24620:	mov	r0, sl
   24624:	mov	r1, fp
   24628:	ldr	r2, [sp, #116]	; 0x74
   2462c:	bl	1899c <__assert_fail@plt+0x69b4>
   24630:	adds	sl, sl, #1
   24634:	adc	fp, fp, #0
   24638:	ldr	r3, [sp, #112]	; 0x70
   2463c:	cmp	r9, fp
   24640:	cmpeq	r8, sl
   24644:	strb	r0, [r3, #4]
   24648:	bne	24620 <__assert_fail@plt+0x12638>
   2464c:	b	2371c <__assert_fail@plt+0x11734>
   24650:	ldrd	r2, [sp, #48]	; 0x30
   24654:	strd	r2, [sp, #104]	; 0x68
   24658:	b	2402c <__assert_fail@plt+0x12044>
   2465c:	add	r3, sp, #256	; 0x100
   24660:	strd	r6, [sp, #72]	; 0x48
   24664:	str	r3, [sp, #48]	; 0x30
   24668:	mov	r6, #0
   2466c:	b	24538 <__assert_fail@plt+0x12550>
   24670:	mov	r2, r8
   24674:	mov	r3, r9
   24678:	add	r0, sp, #292	; 0x124
   2467c:	bl	1f490 <__assert_fail@plt+0xd4a8>
   24680:	ldrd	r2, [sp, #72]	; 0x48
   24684:	mov	r4, r0
   24688:	add	r0, sp, #316	; 0x13c
   2468c:	bl	1f490 <__assert_fail@plt+0xd4a8>
   24690:	adds	r2, sl, #1
   24694:	adc	r3, fp, #0
   24698:	mov	r5, r0
   2469c:	add	r0, sp, #340	; 0x154
   246a0:	bl	1f490 <__assert_fail@plt+0xd4a8>
   246a4:	mov	r2, r5
   246a8:	mov	r1, r4
   246ac:	mov	r3, r0
   246b0:	ldr	r0, [pc, #-2088]	; 23e90 <__assert_fail@plt+0x11ea8>
   246b4:	bl	1fc1c <__assert_fail@plt+0xdc34>
   246b8:	b	24538 <__assert_fail@plt+0x12550>
   246bc:	mov	r2, #0
   246c0:	mov	r3, #0
   246c4:	strd	r2, [sp, #32]
   246c8:	b	23ff8 <__assert_fail@plt+0x12010>
   246cc:	ldrd	r2, [sp, #64]	; 0x40
   246d0:	ldr	r6, [sp, #208]	; 0xd0
   246d4:	strd	r2, [sp, #72]	; 0x48
   246d8:	ldr	r3, [pc, #-2124]	; 23e94 <__assert_fail@plt+0x11eac>
   246dc:	str	r3, [sp, #196]	; 0xc4
   246e0:	add	r3, sp, #256	; 0x100
   246e4:	str	r3, [sp, #48]	; 0x30
   246e8:	b	24538 <__assert_fail@plt+0x12550>
   246ec:	mov	r0, sl
   246f0:	b	2371c <__assert_fail@plt+0x11734>
   246f4:	ldr	r3, [pc, #-2120]	; 23eb4 <__assert_fail@plt+0x11ecc>
   246f8:	ldr	r2, [pc, #-2152]	; 23e98 <__assert_fail@plt+0x11eb0>
   246fc:	ldr	r1, [pc, #-2124]	; 23eb8 <__assert_fail@plt+0x11ed0>
   24700:	ldr	r0, [pc, #-2156]	; 23e9c <__assert_fail@plt+0x11eb4>
   24704:	bl	11fe8 <__assert_fail@plt>
   24708:	ldr	r3, [pc, #-2140]	; 23eb4 <__assert_fail@plt+0x11ecc>
   2470c:	ldr	r2, [pc, #-2164]	; 23ea0 <__assert_fail@plt+0x11eb8>
   24710:	ldr	r1, [pc, #-2144]	; 23eb8 <__assert_fail@plt+0x11ed0>
   24714:	ldr	r0, [pc, #-2168]	; 23ea4 <__assert_fail@plt+0x11ebc>
   24718:	bl	11fe8 <__assert_fail@plt>
   2471c:	ldrd	r2, [sp, #184]	; 0xb8
   24720:	mov	r8, r6
   24724:	mov	r9, r7
   24728:	mov	r6, r2
   2472c:	strd	r2, [sp, #72]	; 0x48
   24730:	b	24528 <__assert_fail@plt+0x12540>
   24734:	ldrd	r2, [sp, #176]	; 0xb0
   24738:	mov	r8, r6
   2473c:	mov	r9, r7
   24740:	mov	r6, r2
   24744:	strd	r2, [sp, #72]	; 0x48
   24748:	b	24528 <__assert_fail@plt+0x12540>
   2474c:	mov	r3, #0
   24750:	mov	r2, #0
   24754:	mov	r6, #0
   24758:	strd	r2, [sp, #72]	; 0x48
   2475c:	add	r3, sp, #256	; 0x100
   24760:	str	r3, [sp, #48]	; 0x30
   24764:	b	24528 <__assert_fail@plt+0x12540>
   24768:	ldr	r3, [pc, #-2236]	; 23eb4 <__assert_fail@plt+0x11ecc>
   2476c:	ldr	r2, [pc, #-2252]	; 23ea8 <__assert_fail@plt+0x11ec0>
   24770:	ldr	r1, [pc, #-2240]	; 23eb8 <__assert_fail@plt+0x11ed0>
   24774:	ldr	r0, [pc, #-2252]	; 23eb0 <__assert_fail@plt+0x11ec8>
   24778:	bl	11fe8 <__assert_fail@plt>
   2477c:	ldr	r3, [pc, #-2256]	; 23eb4 <__assert_fail@plt+0x11ecc>
   24780:	mov	r2, #218	; 0xda
   24784:	ldr	r1, [pc, #-2260]	; 23eb8 <__assert_fail@plt+0x11ed0>
   24788:	ldr	r0, [pc, #-2276]	; 23eac <__assert_fail@plt+0x11ec4>
   2478c:	bl	11fe8 <__assert_fail@plt>
   24790:	ldr	r3, [pc, #-2276]	; 23eb4 <__assert_fail@plt+0x11ecc>
   24794:	mov	r2, #340	; 0x154
   24798:	ldr	r1, [pc, #-2280]	; 23eb8 <__assert_fail@plt+0x11ed0>
   2479c:	ldr	r0, [pc, #-2280]	; 23ebc <__assert_fail@plt+0x11ed4>
   247a0:	bl	11fe8 <__assert_fail@plt>
   247a4:	ldr	r3, [pc, #-2296]	; 23eb4 <__assert_fail@plt+0x11ecc>
   247a8:	mov	r2, #300	; 0x12c
   247ac:	ldr	r1, [pc, #-2300]	; 23eb8 <__assert_fail@plt+0x11ed0>
   247b0:	ldr	r0, [pc, #-2312]	; 23eb0 <__assert_fail@plt+0x11ec8>
   247b4:	bl	11fe8 <__assert_fail@plt>
   247b8:	bl	1fadc <__assert_fail@plt+0xdaf4>
   247bc:	ldr	r3, [pc, #-2320]	; 23eb4 <__assert_fail@plt+0x11ecc>
   247c0:	mov	r2, #404	; 0x194
   247c4:	ldr	r1, [pc, #-2324]	; 23eb8 <__assert_fail@plt+0x11ed0>
   247c8:	ldr	r0, [pc, #-2324]	; 23ebc <__assert_fail@plt+0x11ed4>
   247cc:	bl	11fe8 <__assert_fail@plt>
   247d0:	ldr	r3, [sp, #96]	; 0x60
   247d4:	ldrd	sl, [sp, #56]	; 0x38
   247d8:	adds	r0, r3, #3
   247dc:	ldr	r3, [sp, #104]	; 0x68
   247e0:	strd	r6, [sp, #56]	; 0x38
   247e4:	adc	r3, r3, #0
   247e8:	subs	r2, r6, sl
   247ec:	sbc	r1, r7, fp
   247f0:	adds	r2, r0, r2
   247f4:	adc	r3, r3, r1
   247f8:	str	r2, [sp, #48]	; 0x30
   247fc:	str	r3, [sp, #80]	; 0x50
   24800:	strd	r4, [sp, #40]	; 0x28
   24804:	mov	r6, #0
   24808:	mov	r7, #0
   2480c:	b	23670 <__assert_fail@plt+0x11688>
   24810:	bl	11b50 <__stack_chk_fail@plt>
   24814:	ldr	r3, [pc, #8]	; 24824 <__assert_fail@plt+0x1283c>
   24818:	push	{r4, lr}
   2481c:	ldr	r0, [r3]
   24820:	bl	11d60 <exit@plt>
   24824:	andeq	r8, r4, r0, lsr #5
   24828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2482c:	mov	r5, r1
   24830:	sub	sp, sp, #12
   24834:	mov	r4, r2
   24838:	str	r2, [sp]
   2483c:	mov	r7, r3
   24840:	mov	sl, r0
   24844:	bl	11d78 <strlen@plt>
   24848:	ldr	fp, [r5]
   2484c:	cmp	fp, #0
   24850:	beq	24914 <__assert_fail@plt+0x1292c>
   24854:	mov	r6, #0
   24858:	mov	r8, r0
   2485c:	str	r6, [sp, #4]
   24860:	mvn	r9, #0
   24864:	b	24890 <__assert_fail@plt+0x128a8>
   24868:	bl	11b44 <memcmp@plt>
   2486c:	ldr	r3, [sp, #4]
   24870:	cmp	r0, #0
   24874:	movne	r3, #1
   24878:	str	r3, [sp, #4]
   2487c:	ldr	fp, [r5, #4]!
   24880:	add	r6, r6, #1
   24884:	cmp	fp, #0
   24888:	add	r4, r4, r7
   2488c:	beq	248ec <__assert_fail@plt+0x12904>
   24890:	mov	r2, r8
   24894:	mov	r1, sl
   24898:	mov	r0, fp
   2489c:	bl	11f94 <strncmp@plt>
   248a0:	cmp	r0, #0
   248a4:	mov	r0, fp
   248a8:	bne	2487c <__assert_fail@plt+0x12894>
   248ac:	bl	11d78 <strlen@plt>
   248b0:	ldr	r3, [sp]
   248b4:	mov	r2, r7
   248b8:	mov	r1, r4
   248bc:	cmp	r0, r8
   248c0:	mla	r0, r7, r9, r3
   248c4:	beq	24904 <__assert_fail@plt+0x1291c>
   248c8:	cmn	r9, #1
   248cc:	moveq	r9, r6
   248d0:	beq	2487c <__assert_fail@plt+0x12894>
   248d4:	ldr	r3, [sp]
   248d8:	cmp	r3, #0
   248dc:	bne	24868 <__assert_fail@plt+0x12880>
   248e0:	mov	r3, #1
   248e4:	str	r3, [sp, #4]
   248e8:	b	2487c <__assert_fail@plt+0x12894>
   248ec:	ldr	r3, [sp, #4]
   248f0:	cmp	r3, #0
   248f4:	mvnne	r9, #1
   248f8:	mov	r0, r9
   248fc:	add	sp, sp, #12
   24900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24904:	mov	r9, r6
   24908:	mov	r0, r9
   2490c:	add	sp, sp, #12
   24910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24914:	mvn	r9, #0
   24918:	b	248f8 <__assert_fail@plt+0x12910>
   2491c:	ldr	r3, [pc, #84]	; 24978 <__assert_fail@plt+0x12990>
   24920:	push	{r4, r5, r6, lr}
   24924:	cmn	r2, #1
   24928:	sub	sp, sp, #8
   2492c:	mov	r2, r1
   24930:	mov	r6, r0
   24934:	mov	r1, #8
   24938:	mov	r0, #0
   2493c:	ldr	r4, [pc, #56]	; 2497c <__assert_fail@plt+0x12994>
   24940:	movne	r4, r3
   24944:	bl	2e9a0 <__assert_fail@plt+0x1c9b8>
   24948:	mov	r1, r6
   2494c:	mov	r5, r0
   24950:	mov	r0, #1
   24954:	bl	2ecec <__assert_fail@plt+0x1cd04>
   24958:	mov	r1, #0
   2495c:	mov	r2, r4
   24960:	mov	r3, r5
   24964:	str	r0, [sp]
   24968:	mov	r0, r1
   2496c:	bl	11c70 <error@plt>
   24970:	add	sp, sp, #8
   24974:	pop	{r4, r5, r6, pc}
   24978:	andeq	r5, r3, r4, asr #3
   2497c:	andeq	r5, r3, r8, lsr #3
   24980:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24984:	mov	r6, r0
   24988:	ldr	sl, [pc, #184]	; 24a48 <__assert_fail@plt+0x12a60>
   2498c:	mov	r4, r1
   24990:	mov	r7, r2
   24994:	ldr	r3, [sl]
   24998:	mov	r2, #20
   2499c:	mov	r1, #1
   249a0:	ldr	r0, [pc, #164]	; 24a4c <__assert_fail@plt+0x12a64>
   249a4:	bl	11c1c <fwrite@plt>
   249a8:	ldr	fp, [r6]
   249ac:	cmp	fp, #0
   249b0:	movne	r9, #0
   249b4:	movne	r5, r9
   249b8:	bne	249f4 <__assert_fail@plt+0x12a0c>
   249bc:	b	24a38 <__assert_fail@plt+0x12a50>
   249c0:	mov	r0, fp
   249c4:	bl	2ecfc <__assert_fail@plt+0x1cd14>
   249c8:	ldr	r2, [pc, #128]	; 24a50 <__assert_fail@plt+0x12a68>
   249cc:	mov	r1, #1
   249d0:	mov	r9, r4
   249d4:	mov	r3, r0
   249d8:	mov	r0, r8
   249dc:	bl	11e38 <__fprintf_chk@plt>
   249e0:	ldr	fp, [r6, #4]!
   249e4:	add	r5, r5, #1
   249e8:	cmp	fp, #0
   249ec:	add	r4, r4, r7
   249f0:	beq	24a38 <__assert_fail@plt+0x12a50>
   249f4:	cmp	r5, #0
   249f8:	mov	r1, r4
   249fc:	mov	r2, r7
   24a00:	mov	r0, r9
   24a04:	ldr	r8, [sl]
   24a08:	beq	249c0 <__assert_fail@plt+0x129d8>
   24a0c:	bl	11b44 <memcmp@plt>
   24a10:	cmp	r0, #0
   24a14:	bne	249c0 <__assert_fail@plt+0x129d8>
   24a18:	mov	r0, fp
   24a1c:	bl	2ecfc <__assert_fail@plt+0x1cd14>
   24a20:	ldr	r2, [pc, #44]	; 24a54 <__assert_fail@plt+0x12a6c>
   24a24:	mov	r1, #1
   24a28:	mov	r3, r0
   24a2c:	mov	r0, r8
   24a30:	bl	11e38 <__fprintf_chk@plt>
   24a34:	b	249e0 <__assert_fail@plt+0x129f8>
   24a38:	ldr	r1, [sl]
   24a3c:	mov	r0, #10
   24a40:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a44:	b	11f04 <putc@plt>
   24a48:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   24a4c:	andeq	r5, r3, r4, ror #3
   24a50:	strdeq	r5, [r3], -ip
   24a54:	andeq	r5, r3, r4, lsl #4
   24a58:	push	{r4, r5, r6, r7, r8, lr}
   24a5c:	mov	r6, r1
   24a60:	mov	r4, r2
   24a64:	mov	r5, r3
   24a68:	mov	r7, r0
   24a6c:	ldr	r3, [sp, #24]
   24a70:	mov	r2, r5
   24a74:	mov	r1, r4
   24a78:	mov	r0, r6
   24a7c:	bl	24828 <__assert_fail@plt+0x12840>
   24a80:	cmp	r0, #0
   24a84:	popge	{r4, r5, r6, r7, r8, pc}
   24a88:	mov	r2, r0
   24a8c:	mov	r1, r6
   24a90:	mov	r0, r7
   24a94:	bl	2491c <__assert_fail@plt+0x12934>
   24a98:	mov	r0, r4
   24a9c:	ldr	r2, [sp, #24]
   24aa0:	mov	r1, r5
   24aa4:	bl	24980 <__assert_fail@plt+0x12998>
   24aa8:	ldr	r3, [sp, #28]
   24aac:	blx	r3
   24ab0:	mvn	r0, #0
   24ab4:	pop	{r4, r5, r6, r7, r8, pc}
   24ab8:	push	{r4, r5, r6, r7, r8, lr}
   24abc:	ldr	r7, [r1]
   24ac0:	cmp	r7, #0
   24ac4:	beq	24b04 <__assert_fail@plt+0x12b1c>
   24ac8:	mov	r6, r3
   24acc:	mov	r8, r0
   24ad0:	mov	r4, r2
   24ad4:	mov	r5, r1
   24ad8:	b	24ae8 <__assert_fail@plt+0x12b00>
   24adc:	ldr	r7, [r5, #4]!
   24ae0:	cmp	r7, #0
   24ae4:	beq	24b04 <__assert_fail@plt+0x12b1c>
   24ae8:	mov	r1, r4
   24aec:	mov	r2, r6
   24af0:	mov	r0, r8
   24af4:	bl	11b44 <memcmp@plt>
   24af8:	add	r4, r4, r6
   24afc:	cmp	r0, #0
   24b00:	bne	24adc <__assert_fail@plt+0x12af4>
   24b04:	mov	r0, r7
   24b08:	pop	{r4, r5, r6, r7, r8, pc}
   24b0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24b10:	mov	r7, r1
   24b14:	mov	r4, r0
   24b18:	bl	252f8 <__assert_fail@plt+0x13310>
   24b1c:	mov	r5, r0
   24b20:	bl	25348 <__assert_fail@plt+0x13360>
   24b24:	cmp	r0, #14
   24b28:	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   24b2c:	ldr	r3, [pc, #120]	; 24bac <__assert_fail@plt+0x12bc4>
   24b30:	ldrh	r8, [r5]
   24b34:	mov	r6, r0
   24b38:	ldrh	r3, [r3]
   24b3c:	strh	r3, [r5]
   24b40:	bl	11dc0 <__errno_location@plt>
   24b44:	mov	r3, #0
   24b48:	mov	r1, #3
   24b4c:	str	r3, [r0]
   24b50:	mov	r9, r0
   24b54:	mov	r0, r4
   24b58:	bl	11a54 <pathconf@plt>
   24b5c:	cmp	r0, #0
   24b60:	blt	24b9c <__assert_fail@plt+0x12bb4>
   24b64:	cmp	r6, r0
   24b68:	strh	r8, [r5]
   24b6c:	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   24b70:	add	r4, r4, r7
   24b74:	sub	r3, r4, r5
   24b78:	cmp	r3, r0
   24b7c:	subcs	r4, r0, #1
   24b80:	addcc	r0, r3, #1
   24b84:	addcs	r4, r5, r4
   24b88:	mov	r2, #126	; 0x7e
   24b8c:	mov	r3, #0
   24b90:	strb	r2, [r4]
   24b94:	strb	r3, [r5, r0]
   24b98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24b9c:	ldr	r3, [r9]
   24ba0:	cmp	r3, #0
   24ba4:	movne	r0, #255	; 0xff
   24ba8:	b	24b64 <__assert_fail@plt+0x12b7c>
   24bac:	andeq	r3, r3, r8, ror r6
   24bb0:	push	{r4, lr}
   24bb4:	subs	r4, r0, #0
   24bb8:	beq	24bec <__assert_fail@plt+0x12c04>
   24bbc:	ldrb	r3, [r4]
   24bc0:	cmp	r3, #0
   24bc4:	bne	24bd8 <__assert_fail@plt+0x12bf0>
   24bc8:	ldr	r4, [pc, #48]	; 24c00 <__assert_fail@plt+0x12c18>
   24bcc:	ldr	r3, [pc, #48]	; 24c04 <__assert_fail@plt+0x12c1c>
   24bd0:	str	r4, [r3]
   24bd4:	pop	{r4, pc}
   24bd8:	mov	r0, r4
   24bdc:	bl	252f8 <__assert_fail@plt+0x13310>
   24be0:	cmp	r4, r0
   24be4:	bne	24bc8 <__assert_fail@plt+0x12be0>
   24be8:	b	24bcc <__assert_fail@plt+0x12be4>
   24bec:	ldr	r0, [pc, #20]	; 24c08 <__assert_fail@plt+0x12c20>
   24bf0:	bl	11c94 <getenv@plt>
   24bf4:	subs	r4, r0, #0
   24bf8:	beq	24bc8 <__assert_fail@plt+0x12be0>
   24bfc:	b	24bbc <__assert_fail@plt+0x12bd4>
   24c00:	andeq	r5, r3, ip, lsl #4
   24c04:	andeq	sl, r4, r4, ror #10
   24c08:	strdeq	r2, [r3], -r8
   24c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c10:	sub	sp, sp, #60	; 0x3c
   24c14:	mov	r4, r0
   24c18:	str	r2, [sp, #36]	; 0x24
   24c1c:	str	r1, [sp, #12]
   24c20:	str	r0, [sp, #16]
   24c24:	bl	252f8 <__assert_fail@plt+0x13310>
   24c28:	sub	r9, r0, r4
   24c2c:	bl	11d78 <strlen@plt>
   24c30:	ldr	r3, [pc, #1084]	; 25074 <__assert_fail@plt+0x1308c>
   24c34:	ldr	r3, [r3]
   24c38:	cmp	r3, #0
   24c3c:	add	r2, r9, r0
   24c40:	str	r2, [sp, #8]
   24c44:	beq	25060 <__assert_fail@plt+0x13078>
   24c48:	mov	r0, r3
   24c4c:	bl	11d78 <strlen@plt>
   24c50:	ldr	r3, [sp, #8]
   24c54:	add	r3, r3, #1
   24c58:	str	r3, [sp, #32]
   24c5c:	add	r2, r0, #1
   24c60:	cmp	r2, #9
   24c64:	addcs	r3, r3, r2
   24c68:	addcc	r3, r3, #9
   24c6c:	mov	r0, r3
   24c70:	str	r2, [sp, #52]	; 0x34
   24c74:	str	r3, [sp, #44]	; 0x2c
   24c78:	bl	11cac <malloc@plt>
   24c7c:	subs	sl, r0, #0
   24c80:	beq	24f34 <__assert_fail@plt+0x12f4c>
   24c84:	mov	fp, #0
   24c88:	ldr	r2, [sp, #32]
   24c8c:	ldr	r1, [sp, #16]
   24c90:	mov	r0, sl
   24c94:	bl	11afc <memcpy@plt>
   24c98:	ldr	r3, [sp, #12]
   24c9c:	cmp	r3, #1
   24ca0:	beq	24f50 <__assert_fail@plt+0x12f68>
   24ca4:	add	r5, sl, r9
   24ca8:	mov	r0, r5
   24cac:	bl	25348 <__assert_fail@plt+0x13360>
   24cb0:	cmp	fp, #0
   24cb4:	mov	r6, r0
   24cb8:	beq	24fb0 <__assert_fail@plt+0x12fc8>
   24cbc:	mov	r0, fp
   24cc0:	bl	11a60 <rewinddir@plt>
   24cc4:	ldr	r3, [sp, #44]	; 0x2c
   24cc8:	mov	r8, #2
   24ccc:	str	r3, [sp, #24]
   24cd0:	mov	r3, #1
   24cd4:	str	r3, [sp, #20]
   24cd8:	add	r3, r6, #4
   24cdc:	str	r3, [sp, #28]
   24ce0:	ldr	r3, [sp, #8]
   24ce4:	add	r6, r6, r8
   24ce8:	add	r3, r3, #4
   24cec:	str	r3, [sp, #40]	; 0x28
   24cf0:	mov	r0, fp
   24cf4:	bl	11ee0 <readdir64@plt>
   24cf8:	subs	r4, r0, #0
   24cfc:	beq	24e9c <__assert_fail@plt+0x12eb4>
   24d00:	add	r4, r4, #19
   24d04:	mov	r0, r4
   24d08:	bl	11d78 <strlen@plt>
   24d0c:	ldr	r3, [sp, #28]
   24d10:	cmp	r0, r3
   24d14:	bcc	24cf0 <__assert_fail@plt+0x12d08>
   24d18:	mov	r2, r6
   24d1c:	mov	r1, r4
   24d20:	add	r0, sl, r9
   24d24:	bl	11b44 <memcmp@plt>
   24d28:	cmp	r0, #0
   24d2c:	bne	24cf0 <__assert_fail@plt+0x12d08>
   24d30:	ldrb	r5, [r4, r6]
   24d34:	add	r4, r4, r6
   24d38:	sub	r3, r5, #49	; 0x31
   24d3c:	cmp	r3, #8
   24d40:	bhi	24cf0 <__assert_fail@plt+0x12d08>
   24d44:	ldrb	r3, [r4, #1]
   24d48:	sub	r5, r5, #57	; 0x39
   24d4c:	clz	r5, r5
   24d50:	sub	r2, r3, #48	; 0x30
   24d54:	cmp	r2, #9
   24d58:	lsr	r5, r5, #5
   24d5c:	bhi	24fa8 <__assert_fail@plt+0x12fc0>
   24d60:	add	r2, r4, #1
   24d64:	rsb	r1, r4, #1
   24d68:	cmp	r3, #57	; 0x39
   24d6c:	movne	r5, #0
   24d70:	andeq	r5, r5, #1
   24d74:	add	r7, r1, r2
   24d78:	ldrb	r3, [r2, #1]!
   24d7c:	sub	r0, r3, #48	; 0x30
   24d80:	cmp	r0, #9
   24d84:	bls	24d68 <__assert_fail@plt+0x12d80>
   24d88:	cmp	r3, #126	; 0x7e
   24d8c:	bne	24cf0 <__assert_fail@plt+0x12d08>
   24d90:	add	r3, r4, r7
   24d94:	ldrb	r3, [r3, #1]
   24d98:	cmp	r3, #0
   24d9c:	bne	24cf0 <__assert_fail@plt+0x12d08>
   24da0:	ldr	r2, [sp, #20]
   24da4:	cmp	r2, r7
   24da8:	bcc	24dcc <__assert_fail@plt+0x12de4>
   24dac:	bne	24cf0 <__assert_fail@plt+0x12d08>
   24db0:	ldr	r3, [sp, #8]
   24db4:	mov	r1, r4
   24db8:	add	r0, r3, #2
   24dbc:	add	r0, sl, r0
   24dc0:	bl	11b44 <memcmp@plt>
   24dc4:	cmp	r0, #0
   24dc8:	bgt	24cf0 <__assert_fail@plt+0x12d08>
   24dcc:	ldr	r2, [sp, #40]	; 0x28
   24dd0:	add	r3, r5, r7
   24dd4:	str	r3, [sp, #20]
   24dd8:	add	r3, r2, r3
   24ddc:	ldr	r2, [sp, #24]
   24de0:	mov	r8, r5
   24de4:	cmp	r3, r2
   24de8:	bls	25014 <__assert_fail@plt+0x1302c>
   24dec:	lsls	r1, r3, #1
   24df0:	lsr	r2, r3, #31
   24df4:	bmi	24e04 <__assert_fail@plt+0x12e1c>
   24df8:	cmp	r2, #0
   24dfc:	streq	r1, [sp, #24]
   24e00:	beq	24e08 <__assert_fail@plt+0x12e20>
   24e04:	str	r3, [sp, #24]
   24e08:	ldr	r1, [sp, #24]
   24e0c:	mov	r0, sl
   24e10:	bl	11b80 <realloc@plt>
   24e14:	subs	r3, r0, #0
   24e18:	beq	24ff0 <__assert_fail@plt+0x13008>
   24e1c:	ldr	lr, [sp, #8]
   24e20:	mov	ip, #46	; 0x2e
   24e24:	add	r2, r3, lr
   24e28:	add	r1, r2, #2
   24e2c:	add	r5, r1, r5
   24e30:	mov	r0, #126	; 0x7e
   24e34:	strb	ip, [r3, lr]
   24e38:	mov	sl, #48	; 0x30
   24e3c:	strb	r0, [r2, #1]
   24e40:	mov	r0, r5
   24e44:	add	r5, r5, r7
   24e48:	mov	r1, r4
   24e4c:	strb	sl, [r2, #2]
   24e50:	add	r2, r7, #2
   24e54:	str	r3, [sp, #48]	; 0x30
   24e58:	bl	11afc <memcpy@plt>
   24e5c:	ldrb	r2, [r5, #-1]
   24e60:	sub	r1, r5, #1
   24e64:	ldr	r3, [sp, #48]	; 0x30
   24e68:	cmp	r2, #57	; 0x39
   24e6c:	bne	24e80 <__assert_fail@plt+0x12e98>
   24e70:	strb	sl, [r1]
   24e74:	ldrb	r2, [r1, #-1]!
   24e78:	cmp	r2, #57	; 0x39
   24e7c:	beq	24e70 <__assert_fail@plt+0x12e88>
   24e80:	add	r2, r2, #1
   24e84:	strb	r2, [r1]
   24e88:	mov	r0, fp
   24e8c:	mov	sl, r3
   24e90:	bl	11ee0 <readdir64@plt>
   24e94:	subs	r4, r0, #0
   24e98:	bne	24d00 <__assert_fail@plt+0x12d18>
   24e9c:	cmp	r8, #2
   24ea0:	beq	24f6c <__assert_fail@plt+0x12f84>
   24ea4:	cmp	r8, #3
   24ea8:	beq	24ff0 <__assert_fail@plt+0x13008>
   24eac:	cmp	r8, #1
   24eb0:	beq	24f98 <__assert_fail@plt+0x12fb0>
   24eb4:	ldr	r3, [sp, #36]	; 0x24
   24eb8:	cmp	r3, #0
   24ebc:	beq	2504c <__assert_fail@plt+0x13064>
   24ec0:	cmp	fp, #0
   24ec4:	beq	24f40 <__assert_fail@plt+0x12f58>
   24ec8:	mov	r0, fp
   24ecc:	bl	11f10 <dirfd@plt>
   24ed0:	subs	r2, r0, #0
   24ed4:	addge	r3, sl, r9
   24ed8:	blt	24f40 <__assert_fail@plt+0x12f58>
   24edc:	ldr	r1, [sp, #12]
   24ee0:	mvn	r0, #99	; 0x63
   24ee4:	subs	r1, r1, #1
   24ee8:	movne	r1, #1
   24eec:	str	r1, [sp]
   24ef0:	ldr	r1, [sp, #16]
   24ef4:	bl	2ed14 <renameat2@@Base>
   24ef8:	cmp	r0, #0
   24efc:	beq	2504c <__assert_fail@plt+0x13064>
   24f00:	bl	11dc0 <__errno_location@plt>
   24f04:	ldr	r5, [r0]
   24f08:	cmp	r5, #17
   24f0c:	beq	24c88 <__assert_fail@plt+0x12ca0>
   24f10:	cmp	fp, #0
   24f14:	mov	r4, r0
   24f18:	beq	24f24 <__assert_fail@plt+0x12f3c>
   24f1c:	mov	r0, fp
   24f20:	bl	11fd0 <closedir@plt>
   24f24:	mov	r0, sl
   24f28:	mov	sl, #0
   24f2c:	bl	11ab4 <free@plt>
   24f30:	str	r5, [r4]
   24f34:	mov	r0, sl
   24f38:	add	sp, sp, #60	; 0x3c
   24f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f40:	mov	r3, sl
   24f44:	mvn	r2, #99	; 0x63
   24f48:	mov	r9, #0
   24f4c:	b	24edc <__assert_fail@plt+0x12ef4>
   24f50:	ldr	r3, [pc, #284]	; 25074 <__assert_fail@plt+0x1308c>
   24f54:	ldr	r2, [sp, #52]	; 0x34
   24f58:	ldr	r1, [r3]
   24f5c:	ldr	r3, [sp, #8]
   24f60:	add	r0, sl, r3
   24f64:	bl	11afc <memcpy@plt>
   24f68:	b	24eb4 <__assert_fail@plt+0x12ecc>
   24f6c:	ldr	r3, [sp, #12]
   24f70:	cmp	r3, #2
   24f74:	bne	24f98 <__assert_fail@plt+0x12fb0>
   24f78:	ldr	r3, [pc, #244]	; 25074 <__assert_fail@plt+0x1308c>
   24f7c:	ldr	r2, [sp, #52]	; 0x34
   24f80:	ldr	r1, [r3]
   24f84:	ldr	r3, [sp, #8]
   24f88:	add	r0, sl, r3
   24f8c:	bl	11afc <memcpy@plt>
   24f90:	mov	r3, #1
   24f94:	str	r3, [sp, #12]
   24f98:	ldr	r1, [sp, #8]
   24f9c:	mov	r0, sl
   24fa0:	bl	24b0c <__assert_fail@plt+0x12b24>
   24fa4:	b	24eb4 <__assert_fail@plt+0x12ecc>
   24fa8:	mov	r7, #1
   24fac:	b	24d88 <__assert_fail@plt+0x12da0>
   24fb0:	ldr	r3, [pc, #192]	; 25078 <__assert_fail@plt+0x13090>
   24fb4:	mov	r7, r5
   24fb8:	mov	r0, sl
   24fbc:	ldrh	r3, [r3]
   24fc0:	ldrh	r4, [r7], r6
   24fc4:	strh	r3, [sl, r9]
   24fc8:	bl	25148 <__assert_fail@plt+0x13160>
   24fcc:	subs	fp, r0, #0
   24fd0:	beq	2501c <__assert_fail@plt+0x13034>
   24fd4:	ldr	r2, [pc, #160]	; 2507c <__assert_fail@plt+0x13094>
   24fd8:	strh	r4, [r5]
   24fdc:	ldrb	r3, [r2, #4]
   24fe0:	ldr	r0, [r2]
   24fe4:	str	r0, [r5, r6]
   24fe8:	strb	r3, [r7, #4]
   24fec:	b	24cc4 <__assert_fail@plt+0x12cdc>
   24ff0:	mov	r0, sl
   24ff4:	bl	11ab4 <free@plt>
   24ff8:	bl	11dc0 <__errno_location@plt>
   24ffc:	mov	sl, #0
   25000:	mov	r3, #12
   25004:	str	r3, [r0]
   25008:	mov	r0, sl
   2500c:	add	sp, sp, #60	; 0x3c
   25010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25014:	mov	r3, sl
   25018:	b	24e1c <__assert_fail@plt+0x12e34>
   2501c:	bl	11dc0 <__errno_location@plt>
   25020:	ldr	r1, [pc, #84]	; 2507c <__assert_fail@plt+0x13094>
   25024:	strh	r4, [r5]
   25028:	ldrb	r3, [r1, #4]
   2502c:	ldr	r2, [r0]
   25030:	ldr	r0, [r1]
   25034:	cmp	r2, #12
   25038:	str	r0, [r5, r6]
   2503c:	movne	r8, #2
   25040:	moveq	r8, #3
   25044:	strb	r3, [r7, #4]
   25048:	b	24e9c <__assert_fail@plt+0x12eb4>
   2504c:	cmp	fp, #0
   25050:	beq	24f34 <__assert_fail@plt+0x12f4c>
   25054:	mov	r0, fp
   25058:	bl	11fd0 <closedir@plt>
   2505c:	b	24f34 <__assert_fail@plt+0x12f4c>
   25060:	mov	r0, r3
   25064:	bl	24bb0 <__assert_fail@plt+0x12bc8>
   25068:	ldr	r3, [pc, #4]	; 25074 <__assert_fail@plt+0x1308c>
   2506c:	ldr	r3, [r3]
   25070:	b	24c48 <__assert_fail@plt+0x12c60>
   25074:	andeq	sl, r4, r4, ror #10
   25078:	andeq	r3, r3, r8, ror r6
   2507c:	andeq	r5, r3, r0, lsl r2
   25080:	ldr	r3, [pc, #48]	; 250b8 <__assert_fail@plt+0x130d0>
   25084:	push	{r4, lr}
   25088:	sub	sp, sp, #8
   2508c:	ldr	r2, [r3]
   25090:	ldr	r4, [pc, #36]	; 250bc <__assert_fail@plt+0x130d4>
   25094:	mov	ip, #4
   25098:	str	r2, [sp, #4]
   2509c:	mov	r3, r4
   250a0:	add	r2, r4, #32
   250a4:	str	ip, [sp]
   250a8:	bl	24a58 <__assert_fail@plt+0x12a70>
   250ac:	ldr	r0, [r4, r0, lsl #2]
   250b0:	add	sp, sp, #8
   250b4:	pop	{r4, pc}
   250b8:	muleq	r4, ip, r2
   250bc:	andeq	r5, r3, r8, lsl r2
   250c0:	push	{r4, lr}
   250c4:	mov	r2, #0
   250c8:	bl	24c0c <__assert_fail@plt+0x12c24>
   250cc:	cmp	r0, #0
   250d0:	popne	{r4, pc}
   250d4:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   250d8:	subs	r3, r1, #0
   250dc:	beq	250ec <__assert_fail@plt+0x13104>
   250e0:	ldrb	r3, [r3]
   250e4:	cmp	r3, #0
   250e8:	bne	250f4 <__assert_fail@plt+0x1310c>
   250ec:	mov	r0, #2
   250f0:	bx	lr
   250f4:	b	25080 <__assert_fail@plt+0x13098>
   250f8:	subs	r3, r1, #0
   250fc:	beq	2510c <__assert_fail@plt+0x13124>
   25100:	ldrb	r3, [r3]
   25104:	cmp	r3, #0
   25108:	bne	2513c <__assert_fail@plt+0x13154>
   2510c:	push	{r4, lr}
   25110:	ldr	r0, [pc, #40]	; 25140 <__assert_fail@plt+0x13158>
   25114:	bl	11c94 <getenv@plt>
   25118:	subs	r1, r0, #0
   2511c:	beq	2512c <__assert_fail@plt+0x13144>
   25120:	ldrb	r3, [r1]
   25124:	cmp	r3, #0
   25128:	bne	25134 <__assert_fail@plt+0x1314c>
   2512c:	mov	r0, #2
   25130:	pop	{r4, pc}
   25134:	pop	{r4, lr}
   25138:	ldr	r0, [pc, #4]	; 25144 <__assert_fail@plt+0x1315c>
   2513c:	b	25080 <__assert_fail@plt+0x13098>
   25140:	andeq	r2, r3, r0, asr #18
   25144:	andeq	r2, r3, r0, asr r9
   25148:	push	{r4, r5, r6, r7, r8, lr}
   2514c:	bl	11c7c <opendir@plt>
   25150:	subs	r4, r0, #0
   25154:	beq	25164 <__assert_fail@plt+0x1317c>
   25158:	bl	11f10 <dirfd@plt>
   2515c:	cmp	r0, #2
   25160:	bls	2516c <__assert_fail@plt+0x13184>
   25164:	mov	r0, r4
   25168:	pop	{r4, r5, r6, r7, r8, pc}
   2516c:	mov	r2, #3
   25170:	ldr	r1, [pc, #84]	; 251cc <__assert_fail@plt+0x131e4>
   25174:	bl	2f548 <renameat2@@Base+0x834>
   25178:	mov	r6, r0
   2517c:	bl	11dc0 <__errno_location@plt>
   25180:	cmp	r6, #0
   25184:	mov	r5, r0
   25188:	bge	251ac <__assert_fail@plt+0x131c4>
   2518c:	ldr	r7, [r0]
   25190:	mov	r8, #0
   25194:	mov	r0, r4
   25198:	mov	r4, r8
   2519c:	bl	11fd0 <closedir@plt>
   251a0:	str	r7, [r5]
   251a4:	mov	r0, r4
   251a8:	pop	{r4, r5, r6, r7, r8, pc}
   251ac:	mov	r0, r6
   251b0:	bl	11eec <fdopendir@plt>
   251b4:	ldr	r7, [r5]
   251b8:	subs	r8, r0, #0
   251bc:	bne	25194 <__assert_fail@plt+0x131ac>
   251c0:	mov	r0, r6
   251c4:	bl	11fb8 <close@plt>
   251c8:	b	25194 <__assert_fail@plt+0x131ac>
   251cc:	andeq	r0, r0, r6, lsl #8
   251d0:	push	{r4, lr}
   251d4:	bl	252a0 <__assert_fail@plt+0x132b8>
   251d8:	cmp	r0, #0
   251dc:	popne	{r4, pc}
   251e0:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   251e4:	push	{r4, r5, r6, lr}
   251e8:	mov	r5, r0
   251ec:	bl	252f8 <__assert_fail@plt+0x13310>
   251f0:	ldrb	r3, [r0]
   251f4:	cmp	r3, #0
   251f8:	beq	25220 <__assert_fail@plt+0x13238>
   251fc:	mov	r4, r0
   25200:	bl	25348 <__assert_fail@plt+0x13360>
   25204:	ldrb	r3, [r4, r0]
   25208:	mov	r1, r0
   2520c:	cmp	r3, #47	; 0x2f
   25210:	addeq	r1, r0, #1
   25214:	mov	r0, r4
   25218:	pop	{r4, r5, r6, lr}
   2521c:	b	2f534 <renameat2@@Base+0x820>
   25220:	mov	r0, r5
   25224:	bl	25348 <__assert_fail@plt+0x13360>
   25228:	mov	r1, r0
   2522c:	mov	r0, r5
   25230:	pop	{r4, r5, r6, lr}
   25234:	b	2f534 <renameat2@@Base+0x820>
   25238:	push	{r4, r5, r6, lr}
   2523c:	mov	r4, r0
   25240:	ldrb	ip, [r0]
   25244:	sub	r5, ip, #47	; 0x2f
   25248:	bl	252f8 <__assert_fail@plt+0x13310>
   2524c:	clz	r5, r5
   25250:	lsr	r5, r5, #5
   25254:	sub	r0, r0, r4
   25258:	cmp	r0, r5
   2525c:	popls	{r4, r5, r6, pc}
   25260:	add	r3, r4, r0
   25264:	ldrb	r3, [r3, #-1]
   25268:	cmp	r3, #47	; 0x2f
   2526c:	popne	{r4, r5, r6, pc}
   25270:	sub	r0, r0, #2
   25274:	sub	ip, r4, #1
   25278:	add	r3, r4, r0
   2527c:	add	ip, ip, r5
   25280:	rsb	r2, r4, #1
   25284:	cmp	r3, ip
   25288:	add	r0, r2, r3
   2528c:	popeq	{r4, r5, r6, pc}
   25290:	ldrb	r1, [r3], #-1
   25294:	cmp	r1, #47	; 0x2f
   25298:	beq	25284 <__assert_fail@plt+0x1329c>
   2529c:	pop	{r4, r5, r6, pc}
   252a0:	push	{r4, r5, r6, lr}
   252a4:	mov	r6, r0
   252a8:	bl	25238 <__assert_fail@plt+0x13250>
   252ac:	add	r3, r0, #1
   252b0:	mov	r4, r0
   252b4:	cmp	r0, #0
   252b8:	movne	r0, r3
   252bc:	addeq	r0, r3, #1
   252c0:	bl	11cac <malloc@plt>
   252c4:	subs	r5, r0, #0
   252c8:	beq	252f0 <__assert_fail@plt+0x13308>
   252cc:	mov	r2, r4
   252d0:	mov	r1, r6
   252d4:	bl	11afc <memcpy@plt>
   252d8:	cmp	r4, #0
   252dc:	moveq	r3, #46	; 0x2e
   252e0:	moveq	r4, #1
   252e4:	strbeq	r3, [r5]
   252e8:	mov	r3, #0
   252ec:	strb	r3, [r5, r4]
   252f0:	mov	r0, r5
   252f4:	pop	{r4, r5, r6, pc}
   252f8:	ldrb	r3, [r0]
   252fc:	cmp	r3, #47	; 0x2f
   25300:	bne	25310 <__assert_fail@plt+0x13328>
   25304:	ldrb	r3, [r0, #1]!
   25308:	cmp	r3, #47	; 0x2f
   2530c:	beq	25304 <__assert_fail@plt+0x1331c>
   25310:	cmp	r3, #0
   25314:	bxeq	lr
   25318:	mov	r2, r0
   2531c:	mov	r1, #0
   25320:	cmp	r3, #47	; 0x2f
   25324:	moveq	r1, #1
   25328:	beq	25338 <__assert_fail@plt+0x13350>
   2532c:	cmp	r1, #0
   25330:	movne	r0, r2
   25334:	movne	r1, #0
   25338:	ldrb	r3, [r2, #1]!
   2533c:	cmp	r3, #0
   25340:	bne	25320 <__assert_fail@plt+0x13338>
   25344:	bx	lr
   25348:	push	{r4, lr}
   2534c:	mov	r4, r0
   25350:	bl	11d78 <strlen@plt>
   25354:	cmp	r0, #1
   25358:	popls	{r4, pc}
   2535c:	add	r2, r4, r0
   25360:	mov	r3, r0
   25364:	ldrb	r2, [r2, #-1]
   25368:	cmp	r2, #47	; 0x2f
   2536c:	subeq	r3, r0, #2
   25370:	addeq	r3, r4, r3
   25374:	rsbeq	r1, r4, #1
   25378:	popne	{r4, pc}
   2537c:	cmp	r3, r4
   25380:	add	r0, r1, r3
   25384:	popeq	{r4, pc}
   25388:	ldrb	r2, [r3], #-1
   2538c:	cmp	r2, #47	; 0x2f
   25390:	popne	{r4, pc}
   25394:	b	2537c <__assert_fail@plt+0x13394>
   25398:	push	{r4, r5, r6, r7, r8, lr}
   2539c:	subs	r4, r2, #0
   253a0:	beq	25400 <__assert_fail@plt+0x13418>
   253a4:	mov	r7, r0
   253a8:	mov	r5, r1
   253ac:	mov	r6, #0
   253b0:	b	253cc <__assert_fail@plt+0x133e4>
   253b4:	cmp	r0, #0
   253b8:	beq	253ec <__assert_fail@plt+0x13404>
   253bc:	subs	r4, r4, r0
   253c0:	add	r6, r6, r0
   253c4:	add	r5, r5, r0
   253c8:	beq	253e4 <__assert_fail@plt+0x133fc>
   253cc:	mov	r2, r4
   253d0:	mov	r1, r5
   253d4:	mov	r0, r7
   253d8:	bl	2ef3c <renameat2@@Base+0x228>
   253dc:	cmn	r0, #1
   253e0:	bne	253b4 <__assert_fail@plt+0x133cc>
   253e4:	mov	r0, r6
   253e8:	pop	{r4, r5, r6, r7, r8, pc}
   253ec:	bl	11dc0 <__errno_location@plt>
   253f0:	mov	r3, #28
   253f4:	str	r3, [r0]
   253f8:	mov	r0, r6
   253fc:	pop	{r4, r5, r6, r7, r8, pc}
   25400:	mov	r6, r4
   25404:	b	253e4 <__assert_fail@plt+0x133fc>
   25408:	push	{r4, r5, lr}
   2540c:	sub	sp, sp, #20
   25410:	ldr	r4, [pc, #92]	; 25474 <__assert_fail@plt+0x1348c>
   25414:	mov	r1, r0
   25418:	mov	r5, r0
   2541c:	ldr	r3, [r4]
   25420:	mov	r0, #0
   25424:	str	r3, [sp, #12]
   25428:	bl	11ae4 <clock_gettime@plt>
   2542c:	cmp	r0, #0
   25430:	beq	25458 <__assert_fail@plt+0x13470>
   25434:	mov	r1, #0
   25438:	add	r0, sp, #4
   2543c:	bl	11c4c <gettimeofday@plt>
   25440:	ldmib	sp, {r1, r3}
   25444:	rsb	r2, r3, r3, lsl #5
   25448:	str	r1, [r5]
   2544c:	add	r3, r3, r2, lsl #2
   25450:	lsl	r3, r3, #3
   25454:	str	r3, [r5, #4]
   25458:	ldr	r2, [sp, #12]
   2545c:	ldr	r3, [r4]
   25460:	cmp	r2, r3
   25464:	bne	25470 <__assert_fail@plt+0x13488>
   25468:	add	sp, sp, #20
   2546c:	pop	{r4, r5, pc}
   25470:	bl	11b50 <__stack_chk_fail@plt>
   25474:	andeq	r7, r4, r8, lsl #30
   25478:	cmp	r0, #10
   2547c:	movcc	r0, #10
   25480:	push	{r4, r5, r6, r7, r8, lr}
   25484:	orr	r7, r0, #1
   25488:	cmn	r7, #1
   2548c:	beq	25504 <__assert_fail@plt+0x1351c>
   25490:	ldr	r8, [pc, #116]	; 2550c <__assert_fail@plt+0x13524>
   25494:	umull	r2, r3, r8, r7
   25498:	cmp	r7, #9
   2549c:	lsr	r3, r3, #1
   254a0:	add	r3, r3, r3, lsl #1
   254a4:	sub	r3, r7, r3
   254a8:	bls	254f0 <__assert_fail@plt+0x13508>
   254ac:	cmp	r3, #0
   254b0:	beq	254f8 <__assert_fail@plt+0x13510>
   254b4:	mov	r6, #16
   254b8:	mov	r5, #9
   254bc:	mov	r4, #3
   254c0:	b	254d0 <__assert_fail@plt+0x134e8>
   254c4:	cmp	r1, #0
   254c8:	add	r6, r6, #8
   254cc:	beq	254f8 <__assert_fail@plt+0x13510>
   254d0:	add	r4, r4, #2
   254d4:	mov	r1, r4
   254d8:	mov	r0, r7
   254dc:	bl	31a48 <renameat2@@Base+0x2d34>
   254e0:	add	r5, r5, r6
   254e4:	cmp	r5, r7
   254e8:	mov	r3, r1
   254ec:	bcc	254c4 <__assert_fail@plt+0x134dc>
   254f0:	cmp	r3, #0
   254f4:	bne	25504 <__assert_fail@plt+0x1351c>
   254f8:	add	r7, r7, #2
   254fc:	cmn	r7, #1
   25500:	bne	25494 <__assert_fail@plt+0x134ac>
   25504:	mov	r0, r7
   25508:	pop	{r4, r5, r6, r7, r8, pc}
   2550c:	bge	feacffc0 <optarg@@GLIBC_2.4+0xfea87cb8>
   25510:	push	{r4, lr}
   25514:	ror	r0, r0, #3
   25518:	bl	31a48 <renameat2@@Base+0x2d34>
   2551c:	mov	r0, r1
   25520:	pop	{r4, pc}
   25524:	sub	r0, r1, r0
   25528:	clz	r0, r0
   2552c:	lsr	r0, r0, #5
   25530:	bx	lr
   25534:	push	{r4, lr}
   25538:	mov	r4, r0
   2553c:	mov	r0, r1
   25540:	ldr	r3, [r4, #24]
   25544:	ldr	r1, [r4, #8]
   25548:	blx	r3
   2554c:	ldr	r3, [r4, #8]
   25550:	cmp	r3, r0
   25554:	bls	25564 <__assert_fail@plt+0x1357c>
   25558:	ldr	r3, [r4]
   2555c:	add	r0, r3, r0, lsl #3
   25560:	pop	{r4, pc}
   25564:	bl	11fa0 <abort@plt>
   25568:	push	{r4, r5, r6, r7, r8, lr}
   2556c:	mov	r8, r2
   25570:	mov	r5, r1
   25574:	mov	r7, r3
   25578:	mov	r6, r0
   2557c:	bl	25534 <__assert_fail@plt+0x1354c>
   25580:	str	r0, [r8]
   25584:	ldr	r1, [r0]
   25588:	cmp	r1, #0
   2558c:	beq	25674 <__assert_fail@plt+0x1368c>
   25590:	cmp	r1, r5
   25594:	mov	r4, r0
   25598:	beq	25638 <__assert_fail@plt+0x13650>
   2559c:	ldr	r3, [r6, #28]
   255a0:	mov	r0, r5
   255a4:	blx	r3
   255a8:	cmp	r0, #0
   255ac:	ldrne	r3, [r4]
   255b0:	bne	2563c <__assert_fail@plt+0x13654>
   255b4:	ldr	r2, [r4, #4]
   255b8:	cmp	r2, #0
   255bc:	beq	25674 <__assert_fail@plt+0x1368c>
   255c0:	ldr	r3, [r2]
   255c4:	cmp	r5, r3
   255c8:	bne	255ec <__assert_fail@plt+0x13604>
   255cc:	b	2560c <__assert_fail@plt+0x13624>
   255d0:	ldr	r4, [r4, #4]
   255d4:	ldr	r2, [r4, #4]
   255d8:	cmp	r2, #0
   255dc:	beq	25674 <__assert_fail@plt+0x1368c>
   255e0:	ldr	r3, [r2]
   255e4:	cmp	r3, r5
   255e8:	beq	2560c <__assert_fail@plt+0x13624>
   255ec:	mov	r1, r3
   255f0:	mov	r0, r5
   255f4:	ldr	r3, [r6, #28]
   255f8:	blx	r3
   255fc:	cmp	r0, #0
   25600:	beq	255d0 <__assert_fail@plt+0x135e8>
   25604:	ldr	r2, [r4, #4]
   25608:	ldr	r3, [r2]
   2560c:	cmp	r7, #0
   25610:	beq	2566c <__assert_fail@plt+0x13684>
   25614:	ldr	r0, [r2, #4]
   25618:	mov	r1, #0
   2561c:	str	r0, [r4, #4]
   25620:	str	r1, [r2]
   25624:	ldr	r1, [r6, #36]	; 0x24
   25628:	mov	r0, r3
   2562c:	str	r1, [r2, #4]
   25630:	str	r2, [r6, #36]	; 0x24
   25634:	pop	{r4, r5, r6, r7, r8, pc}
   25638:	mov	r3, r1
   2563c:	cmp	r7, #0
   25640:	beq	2566c <__assert_fail@plt+0x13684>
   25644:	ldr	r2, [r4, #4]
   25648:	cmp	r2, #0
   2564c:	movne	ip, #0
   25650:	ldmne	r2, {r0, r1}
   25654:	streq	r2, [r4]
   25658:	stmne	r4, {r0, r1}
   2565c:	strne	ip, [r2]
   25660:	ldrne	r1, [r6, #36]	; 0x24
   25664:	strne	r1, [r2, #4]
   25668:	strne	r2, [r6, #36]	; 0x24
   2566c:	mov	r0, r3
   25670:	pop	{r4, r5, r6, r7, r8, pc}
   25674:	mov	r3, #0
   25678:	mov	r0, r3
   2567c:	pop	{r4, r5, r6, r7, r8, pc}
   25680:	ldr	r2, [pc, #164]	; 2572c <__assert_fail@plt+0x13744>
   25684:	ldr	r3, [r0]
   25688:	cmp	r3, r2
   2568c:	beq	25714 <__assert_fail@plt+0x1372c>
   25690:	vldr	s15, [r3, #8]
   25694:	vldr	s14, [pc, #128]	; 2571c <__assert_fail@plt+0x13734>
   25698:	vcmpe.f32	s15, s14
   2569c:	vmrs	APSR_nzcv, fpscr
   256a0:	ble	25708 <__assert_fail@plt+0x13720>
   256a4:	vldr	s13, [pc, #116]	; 25720 <__assert_fail@plt+0x13738>
   256a8:	vcmpe.f32	s15, s13
   256ac:	vmrs	APSR_nzcv, fpscr
   256b0:	bpl	25708 <__assert_fail@plt+0x13720>
   256b4:	vldr	s13, [pc, #104]	; 25724 <__assert_fail@plt+0x1373c>
   256b8:	vldr	s12, [r3, #12]
   256bc:	vcmpe.f32	s12, s13
   256c0:	vmrs	APSR_nzcv, fpscr
   256c4:	ble	25708 <__assert_fail@plt+0x13720>
   256c8:	vldr	s13, [r3]
   256cc:	vcmpe.f32	s13, #0.0
   256d0:	vmrs	APSR_nzcv, fpscr
   256d4:	blt	25708 <__assert_fail@plt+0x13720>
   256d8:	vadd.f32	s14, s13, s14
   256dc:	vldr	s13, [r3, #4]
   256e0:	vcmpe.f32	s14, s13
   256e4:	vmrs	APSR_nzcv, fpscr
   256e8:	bpl	25708 <__assert_fail@plt+0x13720>
   256ec:	vldr	s12, [pc, #52]	; 25728 <__assert_fail@plt+0x13740>
   256f0:	vcmpe.f32	s13, s12
   256f4:	vmrs	APSR_nzcv, fpscr
   256f8:	bhi	25708 <__assert_fail@plt+0x13720>
   256fc:	vcmpe.f32	s15, s14
   25700:	vmrs	APSR_nzcv, fpscr
   25704:	bgt	25714 <__assert_fail@plt+0x1372c>
   25708:	str	r2, [r0]
   2570c:	mov	r0, #0
   25710:	bx	lr
   25714:	mov	r0, #1
   25718:	bx	lr
   2571c:	stclcc	12, cr12, [ip, #820]	; 0x334
   25720:	svccc	0x00666666
   25724:	svccc	0x008ccccd
   25728:	svccc	0x00800000
   2572c:	muleq	r3, r4, r2
   25730:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25734:	ldr	r3, [r1, #4]
   25738:	ldr	r6, [r1]
   2573c:	cmp	r6, r3
   25740:	bcs	25808 <__assert_fail@plt+0x13820>
   25744:	mov	r8, r2
   25748:	mov	r5, r0
   2574c:	mov	r7, r1
   25750:	add	r6, r6, #8
   25754:	mov	r9, #0
   25758:	b	25768 <__assert_fail@plt+0x13780>
   2575c:	cmp	r3, r6
   25760:	add	r6, r6, #8
   25764:	bls	25808 <__assert_fail@plt+0x13820>
   25768:	ldr	sl, [r6, #-8]
   2576c:	cmp	sl, #0
   25770:	beq	2575c <__assert_fail@plt+0x13774>
   25774:	ldr	r4, [r6, #-4]
   25778:	cmp	r4, #0
   2577c:	bne	2579c <__assert_fail@plt+0x137b4>
   25780:	b	257ec <__assert_fail@plt+0x13804>
   25784:	ldr	r2, [r0, #4]
   25788:	cmp	r3, #0
   2578c:	str	r2, [r4, #4]
   25790:	str	r4, [r0, #4]
   25794:	mov	r4, r3
   25798:	beq	257e8 <__assert_fail@plt+0x13800>
   2579c:	ldr	sl, [r4]
   257a0:	mov	r0, r5
   257a4:	mov	r1, sl
   257a8:	bl	25534 <__assert_fail@plt+0x1354c>
   257ac:	ldr	r3, [r4, #4]
   257b0:	ldr	r2, [r0]
   257b4:	cmp	r2, #0
   257b8:	bne	25784 <__assert_fail@plt+0x1379c>
   257bc:	ldr	r1, [r5, #12]
   257c0:	str	sl, [r0]
   257c4:	add	r1, r1, #1
   257c8:	str	r1, [r5, #12]
   257cc:	str	r2, [r4]
   257d0:	ldr	r2, [r5, #36]	; 0x24
   257d4:	cmp	r3, #0
   257d8:	str	r2, [r4, #4]
   257dc:	str	r4, [r5, #36]	; 0x24
   257e0:	mov	r4, r3
   257e4:	bne	2579c <__assert_fail@plt+0x137b4>
   257e8:	ldr	sl, [r6, #-8]
   257ec:	cmp	r8, #0
   257f0:	str	r9, [r6, #-4]
   257f4:	beq	25810 <__assert_fail@plt+0x13828>
   257f8:	ldr	r3, [r7, #4]
   257fc:	cmp	r3, r6
   25800:	add	r6, r6, #8
   25804:	bhi	25768 <__assert_fail@plt+0x13780>
   25808:	mov	r0, #1
   2580c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25810:	mov	r1, sl
   25814:	mov	r0, r5
   25818:	bl	25534 <__assert_fail@plt+0x1354c>
   2581c:	ldr	r3, [r0]
   25820:	mov	r4, r0
   25824:	cmp	r3, #0
   25828:	beq	25868 <__assert_fail@plt+0x13880>
   2582c:	ldr	r0, [r5, #36]	; 0x24
   25830:	cmp	r0, #0
   25834:	beq	2587c <__assert_fail@plt+0x13894>
   25838:	ldr	r3, [r0, #4]
   2583c:	str	r3, [r5, #36]	; 0x24
   25840:	ldr	r3, [r4, #4]
   25844:	str	sl, [r0]
   25848:	str	r3, [r0, #4]
   2584c:	str	r0, [r4, #4]
   25850:	ldr	r2, [r7, #12]
   25854:	str	r9, [r6, #-8]
   25858:	sub	r2, r2, #1
   2585c:	ldr	r3, [r7, #4]
   25860:	str	r2, [r7, #12]
   25864:	b	2575c <__assert_fail@plt+0x13774>
   25868:	ldr	r3, [r5, #12]
   2586c:	str	sl, [r0]
   25870:	add	r3, r3, #1
   25874:	str	r3, [r5, #12]
   25878:	b	25850 <__assert_fail@plt+0x13868>
   2587c:	mov	r0, #8
   25880:	bl	11cac <malloc@plt>
   25884:	cmp	r0, #0
   25888:	bne	25840 <__assert_fail@plt+0x13858>
   2588c:	mov	r0, r8
   25890:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25894:	ldr	r0, [r0, #8]
   25898:	bx	lr
   2589c:	ldr	r0, [r0, #12]
   258a0:	bx	lr
   258a4:	ldr	r0, [r0, #16]
   258a8:	bx	lr
   258ac:	ldm	r0, {r1, r3}
   258b0:	cmp	r1, r3
   258b4:	bcs	2591c <__assert_fail@plt+0x13934>
   258b8:	sub	ip, r3, #1
   258bc:	sub	ip, ip, r1
   258c0:	add	r3, r1, #16
   258c4:	bic	ip, ip, #7
   258c8:	add	ip, ip, r3
   258cc:	add	r1, r1, #8
   258d0:	mov	r0, #0
   258d4:	b	258e4 <__assert_fail@plt+0x138fc>
   258d8:	add	r1, r1, #8
   258dc:	cmp	r1, ip
   258e0:	bxeq	lr
   258e4:	ldr	r3, [r1, #-8]
   258e8:	cmp	r3, #0
   258ec:	beq	258d8 <__assert_fail@plt+0x138f0>
   258f0:	ldr	r3, [r1, #-4]
   258f4:	mov	r2, #1
   258f8:	cmp	r3, #0
   258fc:	beq	25910 <__assert_fail@plt+0x13928>
   25900:	ldr	r3, [r3, #4]
   25904:	add	r2, r2, #1
   25908:	cmp	r3, #0
   2590c:	bne	25900 <__assert_fail@plt+0x13918>
   25910:	cmp	r0, r2
   25914:	movcc	r0, r2
   25918:	b	258d8 <__assert_fail@plt+0x138f0>
   2591c:	mov	r0, #0
   25920:	bx	lr
   25924:	ldm	r0, {r1, r3}
   25928:	push	{lr}		; (str lr, [sp, #-4]!)
   2592c:	cmp	r1, r3
   25930:	bcs	259c0 <__assert_fail@plt+0x139d8>
   25934:	sub	ip, r3, #1
   25938:	sub	ip, ip, r1
   2593c:	add	r3, r1, #16
   25940:	bic	ip, ip, #7
   25944:	mov	r2, #0
   25948:	add	ip, ip, r3
   2594c:	add	r1, r1, #8
   25950:	mov	lr, r2
   25954:	b	25964 <__assert_fail@plt+0x1397c>
   25958:	add	r1, r1, #8
   2595c:	cmp	r1, ip
   25960:	beq	259a0 <__assert_fail@plt+0x139b8>
   25964:	ldr	r3, [r1, #-8]
   25968:	cmp	r3, #0
   2596c:	beq	25958 <__assert_fail@plt+0x13970>
   25970:	ldr	r3, [r1, #-4]
   25974:	add	lr, lr, #1
   25978:	cmp	r3, #0
   2597c:	add	r2, r2, #1
   25980:	beq	25958 <__assert_fail@plt+0x13970>
   25984:	ldr	r3, [r3, #4]
   25988:	add	r2, r2, #1
   2598c:	cmp	r3, #0
   25990:	bne	25984 <__assert_fail@plt+0x1399c>
   25994:	add	r1, r1, #8
   25998:	cmp	r1, ip
   2599c:	bne	25964 <__assert_fail@plt+0x1397c>
   259a0:	ldr	r3, [r0, #12]
   259a4:	cmp	r3, lr
   259a8:	ldreq	r0, [r0, #16]
   259ac:	subeq	r0, r0, r2
   259b0:	clzeq	r0, r0
   259b4:	lsreq	r0, r0, #5
   259b8:	movne	r0, #0
   259bc:	pop	{pc}		; (ldr pc, [sp], #4)
   259c0:	mov	r2, #0
   259c4:	mov	lr, r2
   259c8:	b	259a0 <__assert_fail@plt+0x139b8>
   259cc:	push	{r4, r5, r6, r7, lr}
   259d0:	mov	r4, r1
   259d4:	ldr	r2, [r0]
   259d8:	ldr	r1, [r0, #4]
   259dc:	sub	sp, sp, #12
   259e0:	cmp	r2, r1
   259e4:	ldr	r3, [r0, #16]
   259e8:	ldrd	r6, [r0, #8]
   259ec:	bcs	25ad0 <__assert_fail@plt+0x13ae8>
   259f0:	sub	ip, r1, #1
   259f4:	sub	ip, ip, r2
   259f8:	bic	ip, ip, #7
   259fc:	add	r1, r2, #16
   25a00:	add	ip, ip, r1
   25a04:	add	r0, r2, #8
   25a08:	mov	r5, #0
   25a0c:	b	25a1c <__assert_fail@plt+0x13a34>
   25a10:	add	r0, r0, #8
   25a14:	cmp	r0, ip
   25a18:	beq	25a5c <__assert_fail@plt+0x13a74>
   25a1c:	ldr	r2, [r0, #-8]
   25a20:	cmp	r2, #0
   25a24:	beq	25a10 <__assert_fail@plt+0x13a28>
   25a28:	ldr	r2, [r0, #-4]
   25a2c:	mov	r1, #1
   25a30:	cmp	r2, #0
   25a34:	beq	25a48 <__assert_fail@plt+0x13a60>
   25a38:	ldr	r2, [r2, #4]
   25a3c:	add	r1, r1, #1
   25a40:	cmp	r2, #0
   25a44:	bne	25a38 <__assert_fail@plt+0x13a50>
   25a48:	cmp	r5, r1
   25a4c:	add	r0, r0, #8
   25a50:	movcc	r5, r1
   25a54:	cmp	r0, ip
   25a58:	bne	25a1c <__assert_fail@plt+0x13a34>
   25a5c:	ldr	r2, [pc, #124]	; 25ae0 <__assert_fail@plt+0x13af8>
   25a60:	mov	r1, #1
   25a64:	mov	r0, r4
   25a68:	bl	11e38 <__fprintf_chk@plt>
   25a6c:	mov	r3, r6
   25a70:	ldr	r2, [pc, #108]	; 25ae4 <__assert_fail@plt+0x13afc>
   25a74:	mov	r1, #1
   25a78:	mov	r0, r4
   25a7c:	bl	11e38 <__fprintf_chk@plt>
   25a80:	vmov	s15, r7
   25a84:	vldr	d5, [pc, #76]	; 25ad8 <__assert_fail@plt+0x13af0>
   25a88:	mov	r3, r7
   25a8c:	ldr	r2, [pc, #84]	; 25ae8 <__assert_fail@plt+0x13b00>
   25a90:	vcvt.f64.u32	d6, s15
   25a94:	vmov	s15, r6
   25a98:	mov	r1, #1
   25a9c:	mov	r0, r4
   25aa0:	vcvt.f64.u32	d7, s15
   25aa4:	vmul.f64	d6, d6, d5
   25aa8:	vdiv.f64	d5, d6, d7
   25aac:	vstr	d5, [sp]
   25ab0:	bl	11e38 <__fprintf_chk@plt>
   25ab4:	mov	r3, r5
   25ab8:	mov	r0, r4
   25abc:	ldr	r2, [pc, #40]	; 25aec <__assert_fail@plt+0x13b04>
   25ac0:	mov	r1, #1
   25ac4:	add	sp, sp, #12
   25ac8:	pop	{r4, r5, r6, r7, lr}
   25acc:	b	11e38 <__fprintf_chk@plt>
   25ad0:	mov	r5, #0
   25ad4:	b	25a5c <__assert_fail@plt+0x13a74>
   25ad8:	andeq	r0, r0, r0
   25adc:	subsmi	r0, r9, r0
   25ae0:	andeq	r5, r3, r8, lsr #5
   25ae4:	andeq	r5, r3, r0, asr #5
   25ae8:	ldrdeq	r5, [r3], -r8
   25aec:	strdeq	r5, [r3], -ip
   25af0:	push	{r4, r5, r6, lr}
   25af4:	mov	r6, r0
   25af8:	mov	r5, r1
   25afc:	bl	25534 <__assert_fail@plt+0x1354c>
   25b00:	ldr	r3, [r0]
   25b04:	cmp	r3, #0
   25b08:	beq	25b44 <__assert_fail@plt+0x13b5c>
   25b0c:	mov	r4, r0
   25b10:	b	25b18 <__assert_fail@plt+0x13b30>
   25b14:	ldr	r3, [r4]
   25b18:	cmp	r3, r5
   25b1c:	mov	r1, r3
   25b20:	mov	r0, r5
   25b24:	beq	25b50 <__assert_fail@plt+0x13b68>
   25b28:	ldr	r3, [r6, #28]
   25b2c:	blx	r3
   25b30:	cmp	r0, #0
   25b34:	bne	25b4c <__assert_fail@plt+0x13b64>
   25b38:	ldr	r4, [r4, #4]
   25b3c:	cmp	r4, #0
   25b40:	bne	25b14 <__assert_fail@plt+0x13b2c>
   25b44:	mov	r0, #0
   25b48:	pop	{r4, r5, r6, pc}
   25b4c:	ldr	r5, [r4]
   25b50:	mov	r0, r5
   25b54:	pop	{r4, r5, r6, pc}
   25b58:	ldr	r3, [r0, #16]
   25b5c:	cmp	r3, #0
   25b60:	beq	25bb0 <__assert_fail@plt+0x13bc8>
   25b64:	ldr	r3, [r0]
   25b68:	ldr	r2, [r0, #4]
   25b6c:	cmp	r3, r2
   25b70:	bcs	25ba8 <__assert_fail@plt+0x13bc0>
   25b74:	ldr	r0, [r3]
   25b78:	cmp	r0, #0
   25b7c:	bxne	lr
   25b80:	sub	r2, r2, #1
   25b84:	sub	r2, r2, r3
   25b88:	bic	r2, r2, #7
   25b8c:	add	r2, r3, r2
   25b90:	b	25ba0 <__assert_fail@plt+0x13bb8>
   25b94:	ldr	r0, [r3, #8]!
   25b98:	cmp	r0, #0
   25b9c:	bxne	lr
   25ba0:	cmp	r3, r2
   25ba4:	bne	25b94 <__assert_fail@plt+0x13bac>
   25ba8:	push	{r4, lr}
   25bac:	bl	11fa0 <abort@plt>
   25bb0:	mov	r0, r3
   25bb4:	bx	lr
   25bb8:	push	{r4, r5, r6, lr}
   25bbc:	mov	r5, r0
   25bc0:	mov	r4, r1
   25bc4:	bl	25534 <__assert_fail@plt+0x1354c>
   25bc8:	mov	r2, r0
   25bcc:	mov	r3, r0
   25bd0:	b	25bdc <__assert_fail@plt+0x13bf4>
   25bd4:	cmp	r3, #0
   25bd8:	beq	25bf0 <__assert_fail@plt+0x13c08>
   25bdc:	ldm	r3, {r1, r3}
   25be0:	cmp	r1, r4
   25be4:	bne	25bd4 <__assert_fail@plt+0x13bec>
   25be8:	cmp	r3, #0
   25bec:	bne	25c18 <__assert_fail@plt+0x13c30>
   25bf0:	ldr	r3, [r5, #4]
   25bf4:	b	25c04 <__assert_fail@plt+0x13c1c>
   25bf8:	ldr	r0, [r2]
   25bfc:	cmp	r0, #0
   25c00:	popne	{r4, r5, r6, pc}
   25c04:	add	r2, r2, #8
   25c08:	cmp	r3, r2
   25c0c:	bhi	25bf8 <__assert_fail@plt+0x13c10>
   25c10:	mov	r0, #0
   25c14:	pop	{r4, r5, r6, pc}
   25c18:	ldr	r0, [r3]
   25c1c:	pop	{r4, r5, r6, pc}
   25c20:	push	{r4, r5, lr}
   25c24:	ldm	r0, {r5, lr}
   25c28:	cmp	lr, r5
   25c2c:	bls	25cb0 <__assert_fail@plt+0x13cc8>
   25c30:	mov	ip, #0
   25c34:	ldr	r3, [r5]
   25c38:	cmp	r3, #0
   25c3c:	bne	25c58 <__assert_fail@plt+0x13c70>
   25c40:	add	r5, r5, #8
   25c44:	cmp	lr, r5
   25c48:	bhi	25c34 <__assert_fail@plt+0x13c4c>
   25c4c:	mov	r2, ip
   25c50:	mov	r0, r2
   25c54:	pop	{r4, r5, pc}
   25c58:	cmp	r2, ip
   25c5c:	bls	25c4c <__assert_fail@plt+0x13c64>
   25c60:	str	r3, [r1, ip, lsl #2]
   25c64:	ldr	r3, [r5, #4]
   25c68:	add	r4, ip, #1
   25c6c:	cmp	r3, #0
   25c70:	add	lr, r1, ip, lsl #2
   25c74:	beq	25ca4 <__assert_fail@plt+0x13cbc>
   25c78:	mov	ip, r4
   25c7c:	cmp	r2, ip
   25c80:	beq	25c50 <__assert_fail@plt+0x13c68>
   25c84:	ldr	r4, [r3]
   25c88:	add	ip, ip, #1
   25c8c:	str	r4, [lr, #4]!
   25c90:	ldr	r3, [r3, #4]
   25c94:	cmp	r3, #0
   25c98:	bne	25c7c <__assert_fail@plt+0x13c94>
   25c9c:	ldr	lr, [r0, #4]
   25ca0:	b	25c40 <__assert_fail@plt+0x13c58>
   25ca4:	ldr	lr, [r0, #4]
   25ca8:	mov	ip, r4
   25cac:	b	25c40 <__assert_fail@plt+0x13c58>
   25cb0:	mov	r2, #0
   25cb4:	b	25c50 <__assert_fail@plt+0x13c68>
   25cb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25cbc:	ldr	r3, [r0, #4]
   25cc0:	ldr	r8, [r0]
   25cc4:	cmp	r3, r8
   25cc8:	bls	25d30 <__assert_fail@plt+0x13d48>
   25ccc:	mov	r7, r2
   25cd0:	mov	r6, r1
   25cd4:	mov	r9, r0
   25cd8:	mov	r5, #0
   25cdc:	ldr	r0, [r8]
   25ce0:	cmp	r0, #0
   25ce4:	bne	25cfc <__assert_fail@plt+0x13d14>
   25ce8:	add	r8, r8, #8
   25cec:	cmp	r3, r8
   25cf0:	bhi	25cdc <__assert_fail@plt+0x13cf4>
   25cf4:	mov	r0, r5
   25cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25cfc:	mov	r4, r8
   25d00:	b	25d08 <__assert_fail@plt+0x13d20>
   25d04:	ldr	r0, [r4]
   25d08:	mov	r1, r7
   25d0c:	blx	r6
   25d10:	cmp	r0, #0
   25d14:	beq	25cf4 <__assert_fail@plt+0x13d0c>
   25d18:	ldr	r4, [r4, #4]
   25d1c:	add	r5, r5, #1
   25d20:	cmp	r4, #0
   25d24:	bne	25d04 <__assert_fail@plt+0x13d1c>
   25d28:	ldr	r3, [r9, #4]
   25d2c:	b	25ce8 <__assert_fail@plt+0x13d00>
   25d30:	mov	r5, #0
   25d34:	b	25cf4 <__assert_fail@plt+0x13d0c>
   25d38:	push	{r4, r5, r6, lr}
   25d3c:	mov	r4, r0
   25d40:	ldrb	r0, [r0]
   25d44:	cmp	r0, #0
   25d48:	beq	25d78 <__assert_fail@plt+0x13d90>
   25d4c:	mov	r5, r1
   25d50:	mov	r1, #0
   25d54:	rsb	r1, r1, r1, lsl #5
   25d58:	add	r0, r1, r0
   25d5c:	mov	r1, r5
   25d60:	bl	31a48 <renameat2@@Base+0x2d34>
   25d64:	ldrb	r0, [r4, #1]!
   25d68:	cmp	r0, #0
   25d6c:	bne	25d54 <__assert_fail@plt+0x13d6c>
   25d70:	mov	r0, r1
   25d74:	pop	{r4, r5, r6, pc}
   25d78:	mov	r1, r0
   25d7c:	mov	r0, r1
   25d80:	pop	{r4, r5, r6, pc}
   25d84:	push	{lr}		; (str lr, [sp, #-4]!)
   25d88:	mov	ip, r0
   25d8c:	ldr	lr, [pc, #16]	; 25da4 <__assert_fail@plt+0x13dbc>
   25d90:	ldm	lr!, {r0, r1, r2, r3}
   25d94:	ldr	lr, [lr]
   25d98:	stmia	ip!, {r0, r1, r2, r3}
   25d9c:	str	lr, [ip]
   25da0:	pop	{pc}		; (ldr pc, [sp], #4)
   25da4:	muleq	r3, r4, r2
   25da8:	push	{r4, r5, r6, r7, r8, lr}
   25dac:	sub	sp, sp, #8
   25db0:	cmp	r2, #0
   25db4:	ldr	ip, [pc, #300]	; 25ee8 <__assert_fail@plt+0x13f00>
   25db8:	str	r0, [sp, #4]
   25dbc:	ldr	r5, [pc, #296]	; 25eec <__assert_fail@plt+0x13f04>
   25dc0:	mov	r0, #40	; 0x28
   25dc4:	movne	r5, r2
   25dc8:	cmp	r3, #0
   25dcc:	movne	r8, r3
   25dd0:	moveq	r8, ip
   25dd4:	mov	r6, r1
   25dd8:	bl	11cac <malloc@plt>
   25ddc:	subs	r4, r0, #0
   25de0:	beq	25eac <__assert_fail@plt+0x13ec4>
   25de4:	cmp	r6, #0
   25de8:	add	r0, r4, #20
   25dec:	beq	25e88 <__assert_fail@plt+0x13ea0>
   25df0:	str	r6, [r4, #20]
   25df4:	bl	25680 <__assert_fail@plt+0x13698>
   25df8:	cmp	r0, #0
   25dfc:	beq	25ea0 <__assert_fail@plt+0x13eb8>
   25e00:	ldrb	r3, [r6, #16]
   25e04:	cmp	r3, #0
   25e08:	vldreq	s13, [r6, #8]
   25e0c:	beq	25eb8 <__assert_fail@plt+0x13ed0>
   25e10:	ldr	r0, [sp, #4]
   25e14:	bl	25478 <__assert_fail@plt+0x13490>
   25e18:	lsrs	r3, r0, #30
   25e1c:	movne	r7, #1
   25e20:	moveq	r7, #0
   25e24:	tst	r0, #536870912	; 0x20000000
   25e28:	mov	r6, r0
   25e2c:	bne	25ea0 <__assert_fail@plt+0x13eb8>
   25e30:	cmp	r7, #0
   25e34:	bne	25ea0 <__assert_fail@plt+0x13eb8>
   25e38:	cmp	r0, #0
   25e3c:	str	r0, [r4, #8]
   25e40:	beq	25ea0 <__assert_fail@plt+0x13eb8>
   25e44:	mov	r1, #8
   25e48:	bl	11a0c <calloc@plt>
   25e4c:	cmp	r0, #0
   25e50:	str	r0, [r4]
   25e54:	beq	25ea0 <__assert_fail@plt+0x13eb8>
   25e58:	ldr	r3, [sp, #32]
   25e5c:	add	r0, r0, r6, lsl #3
   25e60:	str	r0, [r4, #4]
   25e64:	str	r7, [r4, #12]
   25e68:	mov	r0, r4
   25e6c:	str	r7, [r4, #16]
   25e70:	str	r5, [r4, #24]
   25e74:	str	r8, [r4, #28]
   25e78:	str	r3, [r4, #32]
   25e7c:	str	r7, [r4, #36]	; 0x24
   25e80:	add	sp, sp, #8
   25e84:	pop	{r4, r5, r6, r7, r8, pc}
   25e88:	ldr	r3, [pc, #96]	; 25ef0 <__assert_fail@plt+0x13f08>
   25e8c:	str	r3, [r4, #20]
   25e90:	bl	25680 <__assert_fail@plt+0x13698>
   25e94:	cmp	r0, #0
   25e98:	vldrne	s13, [pc, #64]	; 25ee0 <__assert_fail@plt+0x13ef8>
   25e9c:	bne	25eb8 <__assert_fail@plt+0x13ed0>
   25ea0:	mov	r0, r4
   25ea4:	bl	11ab4 <free@plt>
   25ea8:	mov	r4, #0
   25eac:	mov	r0, r4
   25eb0:	add	sp, sp, #8
   25eb4:	pop	{r4, r5, r6, r7, r8, pc}
   25eb8:	vldr	s15, [sp, #4]
   25ebc:	vldr	s14, [pc, #32]	; 25ee4 <__assert_fail@plt+0x13efc>
   25ec0:	vcvt.f32.u32	s12, s15
   25ec4:	vdiv.f32	s15, s12, s13
   25ec8:	vcmpe.f32	s15, s14
   25ecc:	vmrs	APSR_nzcv, fpscr
   25ed0:	bge	25ea0 <__assert_fail@plt+0x13eb8>
   25ed4:	vcvt.u32.f32	s15, s15
   25ed8:	vstr	s15, [sp, #4]
   25edc:	b	25e10 <__assert_fail@plt+0x13e28>
   25ee0:	svccc	0x004ccccd
   25ee4:	svcmi	0x00800000
   25ee8:	andeq	r5, r2, r4, lsr #10
   25eec:	andeq	r5, r2, r0, lsl r5
   25ef0:	muleq	r3, r4, r2
   25ef4:	push	{r4, r5, r6, r7, r8, lr}
   25ef8:	mov	r5, r0
   25efc:	ldr	r6, [r0]
   25f00:	ldr	r2, [r0, #4]
   25f04:	cmp	r6, r2
   25f08:	addcc	r6, r6, #8
   25f0c:	movcc	r7, #0
   25f10:	bcc	25f24 <__assert_fail@plt+0x13f3c>
   25f14:	b	25f98 <__assert_fail@plt+0x13fb0>
   25f18:	cmp	r2, r6
   25f1c:	add	r6, r6, #8
   25f20:	bls	25f98 <__assert_fail@plt+0x13fb0>
   25f24:	ldr	r3, [r6, #-8]
   25f28:	cmp	r3, #0
   25f2c:	beq	25f18 <__assert_fail@plt+0x13f30>
   25f30:	ldr	r4, [r6, #-4]
   25f34:	ldr	r2, [r5, #32]
   25f38:	cmp	r4, #0
   25f3c:	beq	25f70 <__assert_fail@plt+0x13f88>
   25f40:	cmp	r2, #0
   25f44:	beq	25f54 <__assert_fail@plt+0x13f6c>
   25f48:	ldr	r0, [r4]
   25f4c:	blx	r2
   25f50:	ldr	r2, [r5, #32]
   25f54:	ldr	r3, [r4, #4]
   25f58:	ldr	r1, [r5, #36]	; 0x24
   25f5c:	str	r7, [r4]
   25f60:	str	r1, [r4, #4]
   25f64:	str	r4, [r5, #36]	; 0x24
   25f68:	subs	r4, r3, #0
   25f6c:	bne	25f40 <__assert_fail@plt+0x13f58>
   25f70:	cmp	r2, #0
   25f74:	beq	25f80 <__assert_fail@plt+0x13f98>
   25f78:	ldr	r0, [r6, #-8]
   25f7c:	blx	r2
   25f80:	str	r7, [r6, #-8]
   25f84:	str	r7, [r6, #-4]
   25f88:	ldr	r2, [r5, #4]
   25f8c:	cmp	r2, r6
   25f90:	add	r6, r6, #8
   25f94:	bhi	25f24 <__assert_fail@plt+0x13f3c>
   25f98:	mov	r3, #0
   25f9c:	str	r3, [r5, #12]
   25fa0:	str	r3, [r5, #16]
   25fa4:	pop	{r4, r5, r6, r7, r8, pc}
   25fa8:	ldr	r3, [r0, #32]
   25fac:	push	{r4, r5, r6, lr}
   25fb0:	cmp	r3, #0
   25fb4:	mov	r6, r0
   25fb8:	ldr	r5, [r0]
   25fbc:	ldr	r3, [r0, #4]
   25fc0:	beq	26028 <__assert_fail@plt+0x14040>
   25fc4:	ldr	r2, [r0, #16]
   25fc8:	cmp	r2, #0
   25fcc:	beq	26028 <__assert_fail@plt+0x14040>
   25fd0:	cmp	r5, r3
   25fd4:	bcc	25fe8 <__assert_fail@plt+0x14000>
   25fd8:	b	2605c <__assert_fail@plt+0x14074>
   25fdc:	add	r5, r5, #8
   25fe0:	cmp	r3, r5
   25fe4:	bls	26024 <__assert_fail@plt+0x1403c>
   25fe8:	ldr	r0, [r5]
   25fec:	cmp	r0, #0
   25ff0:	beq	25fdc <__assert_fail@plt+0x13ff4>
   25ff4:	mov	r4, r5
   25ff8:	b	26000 <__assert_fail@plt+0x14018>
   25ffc:	ldr	r0, [r4]
   26000:	ldr	r3, [r6, #32]
   26004:	blx	r3
   26008:	ldr	r4, [r4, #4]
   2600c:	cmp	r4, #0
   26010:	bne	25ffc <__assert_fail@plt+0x14014>
   26014:	ldr	r3, [r6, #4]
   26018:	add	r5, r5, #8
   2601c:	cmp	r3, r5
   26020:	bhi	25fe8 <__assert_fail@plt+0x14000>
   26024:	ldr	r5, [r6]
   26028:	cmp	r5, r3
   2602c:	bcs	2605c <__assert_fail@plt+0x14074>
   26030:	ldr	r0, [r5, #4]
   26034:	cmp	r0, #0
   26038:	beq	26050 <__assert_fail@plt+0x14068>
   2603c:	ldr	r4, [r0, #4]
   26040:	bl	11ab4 <free@plt>
   26044:	subs	r0, r4, #0
   26048:	bne	2603c <__assert_fail@plt+0x14054>
   2604c:	ldr	r3, [r6, #4]
   26050:	add	r5, r5, #8
   26054:	cmp	r3, r5
   26058:	bhi	26030 <__assert_fail@plt+0x14048>
   2605c:	ldr	r0, [r6, #36]	; 0x24
   26060:	cmp	r0, #0
   26064:	beq	26078 <__assert_fail@plt+0x14090>
   26068:	ldr	r4, [r0, #4]
   2606c:	bl	11ab4 <free@plt>
   26070:	subs	r0, r4, #0
   26074:	bne	26068 <__assert_fail@plt+0x14080>
   26078:	ldr	r0, [r6]
   2607c:	bl	11ab4 <free@plt>
   26080:	mov	r0, r6
   26084:	pop	{r4, r5, r6, lr}
   26088:	b	11ab4 <free@plt>
   2608c:	push	{r4, r5, r6, r7, r8, lr}
   26090:	sub	sp, sp, #56	; 0x38
   26094:	ldr	r8, [r0, #20]
   26098:	ldr	r7, [pc, #392]	; 26228 <__assert_fail@plt+0x14240>
   2609c:	mov	r6, r0
   260a0:	ldrb	r3, [r8, #16]
   260a4:	ldr	r2, [r7]
   260a8:	str	r1, [sp, #4]
   260ac:	cmp	r3, #0
   260b0:	str	r2, [sp, #52]	; 0x34
   260b4:	bne	260e0 <__assert_fail@plt+0x140f8>
   260b8:	vmov	s15, r1
   260bc:	vldr	s13, [r8, #8]
   260c0:	vldr	s14, [pc, #348]	; 26224 <__assert_fail@plt+0x1423c>
   260c4:	vcvt.f32.u32	s12, s15
   260c8:	vdiv.f32	s15, s12, s13
   260cc:	vcmpe.f32	s15, s14
   260d0:	vmrs	APSR_nzcv, fpscr
   260d4:	vcvtlt.u32.f32	s15, s15
   260d8:	vstrlt	s15, [sp, #4]
   260dc:	bge	26110 <__assert_fail@plt+0x14128>
   260e0:	ldr	r0, [sp, #4]
   260e4:	bl	25478 <__assert_fail@plt+0x13490>
   260e8:	lsrs	r3, r0, #30
   260ec:	movne	r4, #1
   260f0:	moveq	r4, #0
   260f4:	tst	r0, #536870912	; 0x20000000
   260f8:	movne	r4, #1
   260fc:	cmp	r0, #0
   26100:	moveq	r4, #1
   26104:	cmp	r4, #0
   26108:	mov	r5, r0
   2610c:	beq	26130 <__assert_fail@plt+0x14148>
   26110:	mov	r4, #0
   26114:	ldr	r2, [sp, #52]	; 0x34
   26118:	ldr	r3, [r7]
   2611c:	mov	r0, r4
   26120:	cmp	r2, r3
   26124:	bne	2621c <__assert_fail@plt+0x14234>
   26128:	add	sp, sp, #56	; 0x38
   2612c:	pop	{r4, r5, r6, r7, r8, pc}
   26130:	ldr	r3, [r6, #8]
   26134:	cmp	r3, r0
   26138:	beq	261e4 <__assert_fail@plt+0x141fc>
   2613c:	mov	r1, #8
   26140:	bl	11a0c <calloc@plt>
   26144:	cmp	r0, #0
   26148:	str	r0, [sp, #12]
   2614c:	beq	26110 <__assert_fail@plt+0x14128>
   26150:	add	r0, r0, r5, lsl #3
   26154:	ldr	r1, [r6, #32]
   26158:	str	r0, [sp, #16]
   2615c:	ldr	r0, [r6, #28]
   26160:	ldr	ip, [r6, #24]
   26164:	ldr	r3, [r6, #36]	; 0x24
   26168:	mov	r2, r4
   2616c:	str	r0, [sp, #40]	; 0x28
   26170:	str	r1, [sp, #44]	; 0x2c
   26174:	add	r0, sp, #12
   26178:	mov	r1, r6
   2617c:	str	r4, [sp, #24]
   26180:	str	r4, [sp, #28]
   26184:	str	r5, [sp, #20]
   26188:	str	r8, [sp, #32]
   2618c:	str	ip, [sp, #36]	; 0x24
   26190:	str	r3, [sp, #48]	; 0x30
   26194:	bl	25730 <__assert_fail@plt+0x13748>
   26198:	subs	r4, r0, #0
   2619c:	bne	261ec <__assert_fail@plt+0x14204>
   261a0:	ldr	r3, [sp, #48]	; 0x30
   261a4:	mov	r2, #1
   261a8:	str	r3, [r6, #36]	; 0x24
   261ac:	add	r1, sp, #12
   261b0:	mov	r0, r6
   261b4:	bl	25730 <__assert_fail@plt+0x13748>
   261b8:	cmp	r0, #0
   261bc:	beq	26220 <__assert_fail@plt+0x14238>
   261c0:	add	r1, sp, #12
   261c4:	mov	r0, r6
   261c8:	mov	r2, r4
   261cc:	bl	25730 <__assert_fail@plt+0x13748>
   261d0:	cmp	r0, #0
   261d4:	beq	26220 <__assert_fail@plt+0x14238>
   261d8:	ldr	r0, [sp, #12]
   261dc:	bl	11ab4 <free@plt>
   261e0:	b	26114 <__assert_fail@plt+0x1412c>
   261e4:	mov	r4, #1
   261e8:	b	26114 <__assert_fail@plt+0x1412c>
   261ec:	ldr	r0, [r6]
   261f0:	bl	11ab4 <free@plt>
   261f4:	ldrd	r2, [sp, #12]
   261f8:	ldr	r1, [sp, #20]
   261fc:	str	r2, [r6]
   26200:	str	r3, [r6, #4]
   26204:	ldr	r2, [sp, #24]
   26208:	ldr	r3, [sp, #48]	; 0x30
   2620c:	str	r1, [r6, #8]
   26210:	str	r2, [r6, #12]
   26214:	str	r3, [r6, #36]	; 0x24
   26218:	b	26114 <__assert_fail@plt+0x1412c>
   2621c:	bl	11b50 <__stack_chk_fail@plt>
   26220:	bl	11fa0 <abort@plt>
   26224:	svcmi	0x00800000
   26228:	andeq	r7, r4, r8, lsl #30
   2622c:	push	{r4, r5, r6, r7, lr}
   26230:	sub	sp, sp, #12
   26234:	ldr	r6, [pc, #404]	; 263d0 <__assert_fail@plt+0x143e8>
   26238:	subs	r7, r1, #0
   2623c:	ldr	r3, [r6]
   26240:	str	r3, [sp, #4]
   26244:	beq	263c4 <__assert_fail@plt+0x143dc>
   26248:	mov	r5, r2
   2624c:	mov	r3, #0
   26250:	mov	r2, sp
   26254:	mov	r4, r0
   26258:	bl	25568 <__assert_fail@plt+0x13580>
   2625c:	cmp	r0, #0
   26260:	beq	2628c <__assert_fail@plt+0x142a4>
   26264:	cmp	r5, #0
   26268:	moveq	r0, r5
   2626c:	strne	r0, [r5]
   26270:	movne	r0, #0
   26274:	ldr	r2, [sp, #4]
   26278:	ldr	r3, [r6]
   2627c:	cmp	r2, r3
   26280:	bne	263c8 <__assert_fail@plt+0x143e0>
   26284:	add	sp, sp, #12
   26288:	pop	{r4, r5, r6, r7, pc}
   2628c:	vldr	s15, [r4, #8]
   26290:	ldr	r3, [r4, #20]
   26294:	vldr	s14, [r4, #12]
   26298:	vcvt.f32.u32	s15, s15
   2629c:	vldr	s13, [r3, #8]
   262a0:	vcvt.f32.u32	s14, s14
   262a4:	vmul.f32	s15, s15, s13
   262a8:	vcmpe.f32	s14, s15
   262ac:	vmrs	APSR_nzcv, fpscr
   262b0:	bgt	262fc <__assert_fail@plt+0x14314>
   262b4:	ldr	r5, [sp]
   262b8:	ldr	r3, [r5]
   262bc:	cmp	r3, #0
   262c0:	beq	26358 <__assert_fail@plt+0x14370>
   262c4:	ldr	r0, [r4, #36]	; 0x24
   262c8:	cmp	r0, #0
   262cc:	beq	2637c <__assert_fail@plt+0x14394>
   262d0:	ldr	r3, [r0, #4]
   262d4:	str	r3, [r4, #36]	; 0x24
   262d8:	ldr	r3, [r4, #16]
   262dc:	ldr	r2, [r5, #4]
   262e0:	add	r3, r3, #1
   262e4:	str	r7, [r0]
   262e8:	str	r2, [r0, #4]
   262ec:	str	r0, [r5, #4]
   262f0:	mov	r0, #1
   262f4:	str	r3, [r4, #16]
   262f8:	b	26274 <__assert_fail@plt+0x1428c>
   262fc:	add	r0, r4, #20
   26300:	bl	25680 <__assert_fail@plt+0x13698>
   26304:	vldr	s15, [r4, #8]
   26308:	ldr	r3, [r4, #20]
   2630c:	vldr	s14, [r4, #12]
   26310:	vcvt.f32.u32	s15, s15
   26314:	vldr	s13, [r3, #8]
   26318:	vcvt.f32.u32	s14, s14
   2631c:	vmul.f32	s12, s13, s15
   26320:	vcmpe.f32	s14, s12
   26324:	vmrs	APSR_nzcv, fpscr
   26328:	ble	262b4 <__assert_fail@plt+0x142cc>
   2632c:	vldr	s14, [r3, #12]
   26330:	ldrb	r3, [r3, #16]
   26334:	vmul.f32	s15, s15, s14
   26338:	cmp	r3, #0
   2633c:	vldr	s14, [pc, #136]	; 263cc <__assert_fail@plt+0x143e4>
   26340:	vmuleq.f32	s15, s15, s13
   26344:	vcmpe.f32	s15, s14
   26348:	vmrs	APSR_nzcv, fpscr
   2634c:	blt	26390 <__assert_fail@plt+0x143a8>
   26350:	mvn	r0, #0
   26354:	b	26274 <__assert_fail@plt+0x1428c>
   26358:	ldr	r2, [r4, #16]
   2635c:	ldr	r3, [r4, #12]
   26360:	add	r2, r2, #1
   26364:	add	r3, r3, #1
   26368:	str	r7, [r5]
   2636c:	mov	r0, #1
   26370:	str	r2, [r4, #16]
   26374:	str	r3, [r4, #12]
   26378:	b	26274 <__assert_fail@plt+0x1428c>
   2637c:	mov	r0, #8
   26380:	bl	11cac <malloc@plt>
   26384:	cmp	r0, #0
   26388:	beq	26350 <__assert_fail@plt+0x14368>
   2638c:	b	262d8 <__assert_fail@plt+0x142f0>
   26390:	vcvt.u32.f32	s15, s15
   26394:	mov	r0, r4
   26398:	vmov	r1, s15
   2639c:	bl	2608c <__assert_fail@plt+0x140a4>
   263a0:	cmp	r0, #0
   263a4:	beq	26350 <__assert_fail@plt+0x14368>
   263a8:	mov	r2, sp
   263ac:	mov	r3, #0
   263b0:	mov	r1, r7
   263b4:	mov	r0, r4
   263b8:	bl	25568 <__assert_fail@plt+0x13580>
   263bc:	cmp	r0, #0
   263c0:	beq	262b4 <__assert_fail@plt+0x142cc>
   263c4:	bl	11fa0 <abort@plt>
   263c8:	bl	11b50 <__stack_chk_fail@plt>
   263cc:	svcmi	0x00800000
   263d0:	andeq	r7, r4, r8, lsl #30
   263d4:	push	{r4, r5, lr}
   263d8:	sub	sp, sp, #12
   263dc:	ldr	r5, [pc, #68]	; 26428 <__assert_fail@plt+0x14440>
   263e0:	mov	r2, sp
   263e4:	mov	r4, r1
   263e8:	ldr	r3, [r5]
   263ec:	str	r3, [sp, #4]
   263f0:	bl	2622c <__assert_fail@plt+0x14244>
   263f4:	cmn	r0, #1
   263f8:	moveq	r0, #0
   263fc:	beq	2640c <__assert_fail@plt+0x14424>
   26400:	cmp	r0, #0
   26404:	movne	r0, r4
   26408:	ldreq	r0, [sp]
   2640c:	ldr	r2, [sp, #4]
   26410:	ldr	r3, [r5]
   26414:	cmp	r2, r3
   26418:	bne	26424 <__assert_fail@plt+0x1443c>
   2641c:	add	sp, sp, #12
   26420:	pop	{r4, r5, pc}
   26424:	bl	11b50 <__stack_chk_fail@plt>
   26428:	andeq	r7, r4, r8, lsl #30
   2642c:	push	{r4, r5, r6, r7, lr}
   26430:	sub	sp, sp, #12
   26434:	ldr	r5, [pc, #276]	; 26550 <__assert_fail@plt+0x14568>
   26438:	mov	r3, #1
   2643c:	mov	r2, sp
   26440:	ldr	ip, [r5]
   26444:	mov	r4, r0
   26448:	str	ip, [sp, #4]
   2644c:	bl	25568 <__assert_fail@plt+0x13580>
   26450:	subs	r6, r0, #0
   26454:	beq	26474 <__assert_fail@plt+0x1448c>
   26458:	ldr	r2, [sp]
   2645c:	ldr	r3, [r4, #16]
   26460:	ldr	r2, [r2]
   26464:	sub	r3, r3, #1
   26468:	cmp	r2, #0
   2646c:	str	r3, [r4, #16]
   26470:	beq	26490 <__assert_fail@plt+0x144a8>
   26474:	ldr	r2, [sp, #4]
   26478:	ldr	r3, [r5]
   2647c:	mov	r0, r6
   26480:	cmp	r2, r3
   26484:	bne	2654c <__assert_fail@plt+0x14564>
   26488:	add	sp, sp, #12
   2648c:	pop	{r4, r5, r6, r7, pc}
   26490:	vldr	s15, [r4, #8]
   26494:	ldr	r3, [r4, #12]
   26498:	ldr	r2, [r4, #20]
   2649c:	sub	r3, r3, #1
   264a0:	vcvt.f32.u32	s14, s15
   264a4:	vldr	s13, [r2]
   264a8:	vmov	s15, r3
   264ac:	str	r3, [r4, #12]
   264b0:	vcvt.f32.u32	s15, s15
   264b4:	vmul.f32	s14, s14, s13
   264b8:	vcmpe.f32	s15, s14
   264bc:	vmrs	APSR_nzcv, fpscr
   264c0:	bpl	26474 <__assert_fail@plt+0x1448c>
   264c4:	add	r0, r4, #20
   264c8:	bl	25680 <__assert_fail@plt+0x13698>
   264cc:	vldr	s15, [r4, #8]
   264d0:	ldr	r3, [r4, #20]
   264d4:	vldr	s13, [r4, #12]
   264d8:	vcvt.f32.u32	s15, s15
   264dc:	vldr	s14, [r3]
   264e0:	vcvt.f32.u32	s13, s13
   264e4:	vmul.f32	s14, s15, s14
   264e8:	vcmpe.f32	s13, s14
   264ec:	vmrs	APSR_nzcv, fpscr
   264f0:	bpl	26474 <__assert_fail@plt+0x1448c>
   264f4:	vldr	s14, [r3, #4]
   264f8:	ldrb	r2, [r3, #16]
   264fc:	mov	r0, r4
   26500:	vmul.f32	s15, s15, s14
   26504:	cmp	r2, #0
   26508:	vldreq	s14, [r3, #8]
   2650c:	vmuleq.f32	s15, s15, s14
   26510:	vcvt.u32.f32	s15, s15
   26514:	vmov	r1, s15
   26518:	bl	2608c <__assert_fail@plt+0x140a4>
   2651c:	cmp	r0, #0
   26520:	bne	26474 <__assert_fail@plt+0x1448c>
   26524:	ldr	r0, [r4, #36]	; 0x24
   26528:	cmp	r0, #0
   2652c:	beq	26540 <__assert_fail@plt+0x14558>
   26530:	ldr	r7, [r0, #4]
   26534:	bl	11ab4 <free@plt>
   26538:	subs	r0, r7, #0
   2653c:	bne	26530 <__assert_fail@plt+0x14548>
   26540:	mov	r3, #0
   26544:	str	r3, [r4, #36]	; 0x24
   26548:	b	26474 <__assert_fail@plt+0x1448c>
   2654c:	bl	11b50 <__stack_chk_fail@plt>
   26550:	andeq	r7, r4, r8, lsl #30
   26554:	ldr	r0, [r0, #32]
   26558:	bx	lr
   2655c:	ldr	r0, [r1, #8]
   26560:	bx	lr
   26564:	str	r2, [r1, #8]
   26568:	mov	r0, #0
   2656c:	bx	lr
   26570:	ldr	r3, [r1]
   26574:	add	r0, r0, #20
   26578:	cmp	r3, r0
   2657c:	movne	r0, r3
   26580:	moveq	r0, #0
   26584:	bx	lr
   26588:	ldr	r3, [r1, #4]
   2658c:	add	r0, r0, #20
   26590:	cmp	r3, r0
   26594:	movne	r0, r3
   26598:	moveq	r0, #0
   2659c:	bx	lr
   265a0:	push	{lr}		; (str lr, [sp, #-4]!)
   265a4:	add	r2, r1, #20
   265a8:	ldr	lr, [r1, #20]
   265ac:	ldr	ip, [r1]
   265b0:	str	lr, [r0, #12]
   265b4:	str	r1, [r0, #4]
   265b8:	str	ip, [r0]
   265bc:	str	r2, [r0, #16]
   265c0:	pop	{pc}		; (ldr pc, [sp], #4)
   265c4:	ldr	r3, [r0, #12]
   265c8:	ldr	ip, [r0, #16]
   265cc:	cmp	r3, ip
   265d0:	moveq	r3, #0
   265d4:	beq	265f4 <__assert_fail@plt+0x1460c>
   265d8:	ldr	ip, [r3, #8]
   265dc:	cmp	r2, #0
   265e0:	str	ip, [r1]
   265e4:	strne	r3, [r2]
   265e8:	ldr	r2, [r3]
   265ec:	mov	r3, #1
   265f0:	str	r2, [r0, #12]
   265f4:	mov	r0, r3
   265f8:	bx	lr
   265fc:	bx	lr
   26600:	push	{r4, r5, r6, r7, r8, lr}
   26604:	mov	r5, r0
   26608:	ldr	r4, [r5, #20]!
   2660c:	cmp	r4, r5
   26610:	beq	26644 <__assert_fail@plt+0x1465c>
   26614:	mov	r7, r1
   26618:	mov	r6, r2
   2661c:	b	26630 <__assert_fail@plt+0x14648>
   26620:	beq	26648 <__assert_fail@plt+0x14660>
   26624:	ldr	r4, [r4]
   26628:	cmp	r4, r5
   2662c:	beq	26644 <__assert_fail@plt+0x1465c>
   26630:	mov	r1, r6
   26634:	ldr	r0, [r4, #8]
   26638:	blx	r7
   2663c:	cmp	r0, #0
   26640:	ble	26620 <__assert_fail@plt+0x14638>
   26644:	mov	r4, #0
   26648:	mov	r0, r4
   2664c:	pop	{r4, r5, r6, r7, r8, pc}
   26650:	push	{r4, r5, r6, r7, r8, lr}
   26654:	mov	r6, r0
   26658:	ldr	r4, [r6, #20]!
   2665c:	cmp	r4, r6
   26660:	beq	2669c <__assert_fail@plt+0x146b4>
   26664:	mov	r7, r1
   26668:	mov	r8, r2
   2666c:	mov	r5, #0
   26670:	b	26688 <__assert_fail@plt+0x146a0>
   26674:	beq	266a0 <__assert_fail@plt+0x146b8>
   26678:	ldr	r4, [r4]
   2667c:	add	r5, r5, #1
   26680:	cmp	r4, r6
   26684:	beq	2669c <__assert_fail@plt+0x146b4>
   26688:	mov	r1, r8
   2668c:	ldr	r0, [r4, #8]
   26690:	blx	r7
   26694:	cmp	r0, #0
   26698:	ble	26674 <__assert_fail@plt+0x1468c>
   2669c:	mvn	r5, #0
   266a0:	mov	r0, r5
   266a4:	pop	{r4, r5, r6, r7, r8, pc}
   266a8:	ldr	ip, [r0, #32]
   266ac:	push	{r4, r5, r6, r7, r8, lr}
   266b0:	cmp	ip, r3
   266b4:	mov	r5, r2
   266b8:	movcs	r2, #0
   266bc:	movcc	r2, #1
   266c0:	cmp	r5, r3
   266c4:	orrhi	r2, r2, #1
   266c8:	cmp	r2, #0
   266cc:	bne	26764 <__assert_fail@plt+0x1477c>
   266d0:	subs	r3, r3, r5
   266d4:	beq	26734 <__assert_fail@plt+0x1474c>
   266d8:	sub	r2, ip, #1
   266dc:	mov	r7, r1
   266e0:	cmp	r5, r2, lsr #1
   266e4:	bhi	2673c <__assert_fail@plt+0x14754>
   266e8:	cmp	r5, #0
   266ec:	ldr	r4, [r0, #20]
   266f0:	beq	26704 <__assert_fail@plt+0x1471c>
   266f4:	mov	r2, r5
   266f8:	subs	r2, r2, #1
   266fc:	ldr	r4, [r4]
   26700:	bne	266f8 <__assert_fail@plt+0x14710>
   26704:	add	r6, r3, r5
   26708:	b	26720 <__assert_fail@plt+0x14738>
   2670c:	beq	2675c <__assert_fail@plt+0x14774>
   26710:	add	r5, r5, #1
   26714:	cmp	r6, r5
   26718:	ldr	r4, [r4]
   2671c:	beq	26734 <__assert_fail@plt+0x1474c>
   26720:	ldr	r1, [sp, #24]
   26724:	ldr	r0, [r4, #8]
   26728:	blx	r7
   2672c:	cmp	r0, #0
   26730:	ble	2670c <__assert_fail@plt+0x14724>
   26734:	mvn	r0, #0
   26738:	pop	{r4, r5, r6, r7, r8, pc}
   2673c:	mvn	r2, r5
   26740:	adds	r2, r2, ip
   26744:	ldr	r4, [r0, #24]
   26748:	beq	26704 <__assert_fail@plt+0x1471c>
   2674c:	subs	r2, r2, #1
   26750:	ldr	r4, [r4, #4]
   26754:	bne	2674c <__assert_fail@plt+0x14764>
   26758:	b	26704 <__assert_fail@plt+0x1471c>
   2675c:	mov	r0, r5
   26760:	pop	{r4, r5, r6, r7, r8, pc}
   26764:	bl	11fa0 <abort@plt>
   26768:	cmp	r2, r3
   2676c:	push	{r4, r5, r6, lr}
   26770:	movls	ip, #0
   26774:	ldr	lr, [r0, #32]
   26778:	movhi	ip, #1
   2677c:	cmp	lr, r3
   26780:	orrcc	ip, ip, #1
   26784:	cmp	ip, #0
   26788:	bne	26810 <__assert_fail@plt+0x14828>
   2678c:	subs	r5, r3, r2
   26790:	beq	267e4 <__assert_fail@plt+0x147fc>
   26794:	sub	r3, lr, #1
   26798:	mov	r6, r1
   2679c:	cmp	r2, r3, lsr #1
   267a0:	bhi	267f0 <__assert_fail@plt+0x14808>
   267a4:	cmp	r2, #0
   267a8:	ldr	r4, [r0, #20]
   267ac:	beq	267d0 <__assert_fail@plt+0x147e8>
   267b0:	subs	r2, r2, #1
   267b4:	ldr	r4, [r4]
   267b8:	bne	267b0 <__assert_fail@plt+0x147c8>
   267bc:	b	267d0 <__assert_fail@plt+0x147e8>
   267c0:	beq	267e8 <__assert_fail@plt+0x14800>
   267c4:	subs	r5, r5, #1
   267c8:	ldr	r4, [r4]
   267cc:	beq	267e4 <__assert_fail@plt+0x147fc>
   267d0:	ldr	r1, [sp, #16]
   267d4:	ldr	r0, [r4, #8]
   267d8:	blx	r6
   267dc:	cmp	r0, #0
   267e0:	ble	267c0 <__assert_fail@plt+0x147d8>
   267e4:	mov	r4, #0
   267e8:	mov	r0, r4
   267ec:	pop	{r4, r5, r6, pc}
   267f0:	mvn	r2, r2
   267f4:	adds	r2, r2, lr
   267f8:	ldr	r4, [r0, #24]
   267fc:	beq	267d0 <__assert_fail@plt+0x147e8>
   26800:	subs	r2, r2, #1
   26804:	ldr	r4, [r4, #4]
   26808:	bne	26800 <__assert_fail@plt+0x14818>
   2680c:	b	267d0 <__assert_fail@plt+0x147e8>
   26810:	bl	11fa0 <abort@plt>
   26814:	cmp	r2, r3
   26818:	push	{r4, lr}
   2681c:	bhi	268fc <__assert_fail@plt+0x14914>
   26820:	ldr	ip, [r1, #32]
   26824:	cmp	ip, r3
   26828:	bcc	268fc <__assert_fail@plt+0x14914>
   2682c:	sub	ip, ip, r3
   26830:	sub	r3, r3, r2
   26834:	cmp	r3, ip
   26838:	movcs	lr, r3
   2683c:	movcc	lr, ip
   26840:	cmp	r2, lr
   26844:	ldr	r4, [r1]
   26848:	bhi	26898 <__assert_fail@plt+0x148b0>
   2684c:	cmp	r3, ip
   26850:	ldr	lr, [r1, #20]
   26854:	bls	268cc <__assert_fail@plt+0x148e4>
   26858:	cmp	r2, #0
   2685c:	beq	2686c <__assert_fail@plt+0x14884>
   26860:	subs	r2, r2, #1
   26864:	ldr	lr, [lr]
   26868:	bne	26860 <__assert_fail@plt+0x14878>
   2686c:	cmp	ip, #0
   26870:	add	r2, r1, #20
   26874:	beq	26884 <__assert_fail@plt+0x1489c>
   26878:	subs	ip, ip, #1
   2687c:	ldr	r2, [r2, #4]
   26880:	bne	26878 <__assert_fail@plt+0x14890>
   26884:	str	r4, [r0]
   26888:	str	r1, [r0, #4]
   2688c:	str	lr, [r0, #12]
   26890:	str	r2, [r0, #16]
   26894:	pop	{r4, pc}
   26898:	cmp	ip, #0
   2689c:	add	r2, r1, #20
   268a0:	beq	268b0 <__assert_fail@plt+0x148c8>
   268a4:	subs	ip, ip, #1
   268a8:	ldr	r2, [r2, #4]
   268ac:	bne	268a4 <__assert_fail@plt+0x148bc>
   268b0:	cmp	r3, #0
   268b4:	mov	lr, r2
   268b8:	beq	26884 <__assert_fail@plt+0x1489c>
   268bc:	subs	r3, r3, #1
   268c0:	ldr	lr, [lr, #4]
   268c4:	bne	268bc <__assert_fail@plt+0x148d4>
   268c8:	b	26884 <__assert_fail@plt+0x1489c>
   268cc:	cmp	r2, #0
   268d0:	beq	268e0 <__assert_fail@plt+0x148f8>
   268d4:	subs	r2, r2, #1
   268d8:	ldr	lr, [lr]
   268dc:	bne	268d4 <__assert_fail@plt+0x148ec>
   268e0:	cmp	r3, #0
   268e4:	mov	r2, lr
   268e8:	beq	26884 <__assert_fail@plt+0x1489c>
   268ec:	subs	r3, r3, #1
   268f0:	ldr	r2, [r2]
   268f4:	bne	268ec <__assert_fail@plt+0x14904>
   268f8:	b	26884 <__assert_fail@plt+0x1489c>
   268fc:	bl	11fa0 <abort@plt>
   26900:	push	{r4, r5, r6, r7, r8, lr}
   26904:	mov	r5, r1
   26908:	cmp	r5, r2
   2690c:	ldr	r1, [r0, #32]
   26910:	mov	r6, r2
   26914:	movls	r2, #0
   26918:	movhi	r2, #1
   2691c:	cmp	r1, r6
   26920:	orrcc	r2, r2, #1
   26924:	cmp	r2, #0
   26928:	bne	269cc <__assert_fail@plt+0x149e4>
   2692c:	cmp	r5, #0
   26930:	mov	r7, r3
   26934:	ldr	r8, [r0, #4]
   26938:	ldr	r4, [r0, #20]
   2693c:	beq	26950 <__assert_fail@plt+0x14968>
   26940:	mov	r3, r5
   26944:	subs	r3, r3, #1
   26948:	ldr	r4, [r4]
   2694c:	bne	26944 <__assert_fail@plt+0x1495c>
   26950:	cmp	r8, #0
   26954:	beq	26990 <__assert_fail@plt+0x149a8>
   26958:	cmp	r5, r6
   2695c:	bcc	26974 <__assert_fail@plt+0x1498c>
   26960:	b	269c4 <__assert_fail@plt+0x149dc>
   26964:	add	r5, r5, #1
   26968:	cmp	r6, r5
   2696c:	ldr	r4, [r4]
   26970:	beq	269c4 <__assert_fail@plt+0x149dc>
   26974:	ldr	r1, [r4, #8]
   26978:	mov	r0, r7
   2697c:	blx	r8
   26980:	cmp	r0, #0
   26984:	beq	26964 <__assert_fail@plt+0x1497c>
   26988:	mov	r0, r5
   2698c:	pop	{r4, r5, r6, r7, r8, pc}
   26990:	cmp	r5, r6
   26994:	bcs	269c4 <__assert_fail@plt+0x149dc>
   26998:	ldr	r3, [r4, #8]
   2699c:	cmp	r7, r3
   269a0:	bne	269b4 <__assert_fail@plt+0x149cc>
   269a4:	b	26988 <__assert_fail@plt+0x149a0>
   269a8:	ldr	r3, [r4, #8]
   269ac:	cmp	r3, r7
   269b0:	beq	26988 <__assert_fail@plt+0x149a0>
   269b4:	add	r5, r5, #1
   269b8:	cmp	r6, r5
   269bc:	ldr	r4, [r4]
   269c0:	bne	269a8 <__assert_fail@plt+0x149c0>
   269c4:	mvn	r0, #0
   269c8:	pop	{r4, r5, r6, r7, r8, pc}
   269cc:	bl	11fa0 <abort@plt>
   269d0:	cmp	r1, r2
   269d4:	push	{r4, r5, r6, r7, r8, lr}
   269d8:	movls	ip, #0
   269dc:	ldr	lr, [r0, #32]
   269e0:	movhi	ip, #1
   269e4:	cmp	lr, r2
   269e8:	orrcc	ip, ip, #1
   269ec:	cmp	ip, #0
   269f0:	bne	26a90 <__assert_fail@plt+0x14aa8>
   269f4:	cmp	r1, #0
   269f8:	mov	r6, r3
   269fc:	sub	r5, r2, r1
   26a00:	ldr	r7, [r0, #4]
   26a04:	ldr	r4, [r0, #20]
   26a08:	beq	26a18 <__assert_fail@plt+0x14a30>
   26a0c:	subs	r1, r1, #1
   26a10:	ldr	r4, [r4]
   26a14:	bne	26a0c <__assert_fail@plt+0x14a24>
   26a18:	cmp	r7, #0
   26a1c:	beq	26a54 <__assert_fail@plt+0x14a6c>
   26a20:	cmp	r5, #0
   26a24:	bne	26a38 <__assert_fail@plt+0x14a50>
   26a28:	b	26a84 <__assert_fail@plt+0x14a9c>
   26a2c:	subs	r5, r5, #1
   26a30:	ldr	r4, [r4]
   26a34:	beq	26a84 <__assert_fail@plt+0x14a9c>
   26a38:	ldr	r1, [r4, #8]
   26a3c:	mov	r0, r6
   26a40:	blx	r7
   26a44:	cmp	r0, #0
   26a48:	beq	26a2c <__assert_fail@plt+0x14a44>
   26a4c:	mov	r0, r4
   26a50:	pop	{r4, r5, r6, r7, r8, pc}
   26a54:	cmp	r5, #0
   26a58:	beq	26a84 <__assert_fail@plt+0x14a9c>
   26a5c:	ldr	r3, [r4, #8]
   26a60:	cmp	r6, r3
   26a64:	bne	26a78 <__assert_fail@plt+0x14a90>
   26a68:	b	26a4c <__assert_fail@plt+0x14a64>
   26a6c:	ldr	r3, [r4, #8]
   26a70:	cmp	r3, r6
   26a74:	beq	26a4c <__assert_fail@plt+0x14a64>
   26a78:	subs	r5, r5, #1
   26a7c:	ldr	r4, [r4]
   26a80:	bne	26a6c <__assert_fail@plt+0x14a84>
   26a84:	mov	r4, #0
   26a88:	mov	r0, r4
   26a8c:	pop	{r4, r5, r6, r7, r8, pc}
   26a90:	bl	11fa0 <abort@plt>
   26a94:	ldr	r3, [r0, #32]
   26a98:	cmp	r3, r1
   26a9c:	bls	26af0 <__assert_fail@plt+0x14b08>
   26aa0:	sub	ip, r3, #1
   26aa4:	cmp	r1, ip, lsr #1
   26aa8:	bhi	26acc <__assert_fail@plt+0x14ae4>
   26aac:	cmp	r1, #0
   26ab0:	ldr	r0, [r0, #20]
   26ab4:	beq	26ac4 <__assert_fail@plt+0x14adc>
   26ab8:	subs	r1, r1, #1
   26abc:	ldr	r0, [r0]
   26ac0:	bne	26ab8 <__assert_fail@plt+0x14ad0>
   26ac4:	str	r2, [r0, #8]
   26ac8:	bx	lr
   26acc:	mvn	r1, r1
   26ad0:	adds	r1, r1, r3
   26ad4:	ldr	r0, [r0, #24]
   26ad8:	beq	26ac4 <__assert_fail@plt+0x14adc>
   26adc:	subs	r1, r1, #1
   26ae0:	ldr	r0, [r0, #4]
   26ae4:	bne	26adc <__assert_fail@plt+0x14af4>
   26ae8:	str	r2, [r0, #8]
   26aec:	bx	lr
   26af0:	push	{r4, lr}
   26af4:	bl	11fa0 <abort@plt>
   26af8:	ldr	r3, [r0, #32]
   26afc:	cmp	r3, r1
   26b00:	bls	26b54 <__assert_fail@plt+0x14b6c>
   26b04:	sub	r2, r3, #1
   26b08:	cmp	r1, r2, lsr #1
   26b0c:	bhi	26b30 <__assert_fail@plt+0x14b48>
   26b10:	cmp	r1, #0
   26b14:	ldr	r3, [r0, #20]
   26b18:	beq	26b28 <__assert_fail@plt+0x14b40>
   26b1c:	subs	r1, r1, #1
   26b20:	ldr	r3, [r3]
   26b24:	bne	26b1c <__assert_fail@plt+0x14b34>
   26b28:	ldr	r0, [r3, #8]
   26b2c:	bx	lr
   26b30:	mvn	r1, r1
   26b34:	adds	r1, r1, r3
   26b38:	ldr	r3, [r0, #24]
   26b3c:	beq	26b28 <__assert_fail@plt+0x14b40>
   26b40:	subs	r1, r1, #1
   26b44:	ldr	r3, [r3, #4]
   26b48:	bne	26b40 <__assert_fail@plt+0x14b58>
   26b4c:	ldr	r0, [r3, #8]
   26b50:	bx	lr
   26b54:	push	{r4, lr}
   26b58:	bl	11fa0 <abort@plt>
   26b5c:	push	{r4, r5, r6, r7, r8, lr}
   26b60:	mov	r7, r0
   26b64:	mov	r8, r0
   26b68:	ldr	r4, [r7, #20]!
   26b6c:	ldr	r6, [r0, #12]
   26b70:	cmp	r4, r7
   26b74:	beq	26ba0 <__assert_fail@plt+0x14bb8>
   26b78:	cmp	r6, #0
   26b7c:	ldr	r5, [r4]
   26b80:	beq	26b8c <__assert_fail@plt+0x14ba4>
   26b84:	ldr	r0, [r4, #8]
   26b88:	blx	r6
   26b8c:	mov	r0, r4
   26b90:	bl	11ab4 <free@plt>
   26b94:	cmp	r5, r7
   26b98:	mov	r4, r5
   26b9c:	bne	26b78 <__assert_fail@plt+0x14b90>
   26ba0:	mov	r0, r8
   26ba4:	pop	{r4, r5, r6, r7, r8, lr}
   26ba8:	b	11ab4 <free@plt>
   26bac:	ldr	r2, [r0, #32]
   26bb0:	push	{r4, lr}
   26bb4:	cmp	r2, r1
   26bb8:	bls	26c44 <__assert_fail@plt+0x14c5c>
   26bbc:	sub	ip, r2, #1
   26bc0:	add	r3, r0, #20
   26bc4:	cmp	r1, ip, lsr #1
   26bc8:	bhi	26c18 <__assert_fail@plt+0x14c30>
   26bcc:	cmp	r1, #0
   26bd0:	beq	26be0 <__assert_fail@plt+0x14bf8>
   26bd4:	subs	r1, r1, #1
   26bd8:	ldr	r3, [r3]
   26bdc:	bne	26bd4 <__assert_fail@plt+0x14bec>
   26be0:	ldr	r4, [r3]
   26be4:	ldr	r2, [r4]
   26be8:	str	r2, [r3]
   26bec:	str	r3, [r2, #4]
   26bf0:	ldr	r3, [r0, #12]
   26bf4:	str	ip, [r0, #32]
   26bf8:	cmp	r3, #0
   26bfc:	beq	26c08 <__assert_fail@plt+0x14c20>
   26c00:	ldr	r0, [r4, #8]
   26c04:	blx	r3
   26c08:	mov	r0, r4
   26c0c:	bl	11ab4 <free@plt>
   26c10:	mov	r0, #1
   26c14:	pop	{r4, pc}
   26c18:	mvn	r1, r1
   26c1c:	adds	r1, r1, r2
   26c20:	beq	26c30 <__assert_fail@plt+0x14c48>
   26c24:	subs	r1, r1, #1
   26c28:	ldr	r3, [r3, #4]
   26c2c:	bne	26c24 <__assert_fail@plt+0x14c3c>
   26c30:	ldr	r4, [r3, #4]
   26c34:	ldr	r2, [r4, #4]
   26c38:	str	r2, [r3, #4]
   26c3c:	str	r3, [r2]
   26c40:	b	26bf0 <__assert_fail@plt+0x14c08>
   26c44:	bl	11fa0 <abort@plt>
   26c48:	push	{r4, r5, r6, lr}
   26c4c:	mov	r4, r1
   26c50:	ldr	r3, [r0, #32]
   26c54:	ldr	r1, [r1, #4]
   26c58:	ldr	r2, [r4]
   26c5c:	ldr	r5, [r0, #12]
   26c60:	sub	r3, r3, #1
   26c64:	cmp	r5, #0
   26c68:	str	r2, [r1]
   26c6c:	str	r1, [r2, #4]
   26c70:	str	r3, [r0, #32]
   26c74:	beq	26c80 <__assert_fail@plt+0x14c98>
   26c78:	ldr	r0, [r4, #8]
   26c7c:	blx	r5
   26c80:	mov	r0, r4
   26c84:	bl	11ab4 <free@plt>
   26c88:	mov	r0, #1
   26c8c:	pop	{r4, r5, r6, pc}
   26c90:	push	{r4, r5, r6, r7, r8, lr}
   26c94:	mov	r5, r0
   26c98:	ldr	r4, [r5, #20]!
   26c9c:	cmp	r4, r5
   26ca0:	beq	26cd8 <__assert_fail@plt+0x14cf0>
   26ca4:	mov	r8, r0
   26ca8:	mov	r7, r1
   26cac:	mov	r6, r2
   26cb0:	b	26cc4 <__assert_fail@plt+0x14cdc>
   26cb4:	beq	26ce0 <__assert_fail@plt+0x14cf8>
   26cb8:	ldr	r4, [r4]
   26cbc:	cmp	r4, r5
   26cc0:	beq	26cd8 <__assert_fail@plt+0x14cf0>
   26cc4:	mov	r1, r6
   26cc8:	ldr	r0, [r4, #8]
   26ccc:	blx	r7
   26cd0:	cmp	r0, #0
   26cd4:	ble	26cb4 <__assert_fail@plt+0x14ccc>
   26cd8:	mov	r0, #0
   26cdc:	pop	{r4, r5, r6, r7, r8, pc}
   26ce0:	mov	r1, r4
   26ce4:	mov	r0, r8
   26ce8:	pop	{r4, r5, r6, r7, r8, lr}
   26cec:	b	26c48 <__assert_fail@plt+0x14c60>
   26cf0:	push	{r4, lr}
   26cf4:	mov	r3, r1
   26cf8:	ldr	r2, [r0, #32]
   26cfc:	mov	r1, #0
   26d00:	mov	r4, r0
   26d04:	bl	269d0 <__assert_fail@plt+0x149e8>
   26d08:	subs	r1, r0, #0
   26d0c:	popeq	{r4, pc}
   26d10:	mov	r0, r4
   26d14:	pop	{r4, lr}
   26d18:	b	26c48 <__assert_fail@plt+0x14c60>
   26d1c:	push	{r4, r5, r6, r7, r8, lr}
   26d20:	ldr	r5, [r0, #32]
   26d24:	cmp	r5, r1
   26d28:	bcc	26db4 <__assert_fail@plt+0x14dcc>
   26d2c:	mov	r6, r0
   26d30:	mov	r0, #12
   26d34:	mov	r4, r1
   26d38:	mov	r7, r2
   26d3c:	bl	11cac <malloc@plt>
   26d40:	cmp	r0, #0
   26d44:	popeq	{r4, r5, r6, r7, r8, pc}
   26d48:	cmp	r4, r5, lsr #1
   26d4c:	str	r7, [r0, #8]
   26d50:	add	r3, r6, #20
   26d54:	bhi	26d88 <__assert_fail@plt+0x14da0>
   26d58:	cmp	r4, #0
   26d5c:	beq	26d6c <__assert_fail@plt+0x14d84>
   26d60:	subs	r4, r4, #1
   26d64:	ldr	r3, [r3]
   26d68:	bne	26d60 <__assert_fail@plt+0x14d78>
   26d6c:	ldr	r2, [r3]
   26d70:	strd	r2, [r0]
   26d74:	str	r0, [r2, #4]
   26d78:	str	r0, [r3]
   26d7c:	add	r5, r5, #1
   26d80:	str	r5, [r6, #32]
   26d84:	pop	{r4, r5, r6, r7, r8, pc}
   26d88:	subs	r4, r5, r4
   26d8c:	beq	26d9c <__assert_fail@plt+0x14db4>
   26d90:	subs	r4, r4, #1
   26d94:	ldr	r3, [r3, #4]
   26d98:	bne	26d90 <__assert_fail@plt+0x14da8>
   26d9c:	ldr	r2, [r3, #4]
   26da0:	str	r3, [r0]
   26da4:	str	r2, [r0, #4]
   26da8:	str	r0, [r2]
   26dac:	str	r0, [r3, #4]
   26db0:	b	26d7c <__assert_fail@plt+0x14d94>
   26db4:	bl	11fa0 <abort@plt>
   26db8:	push	{r4, r5, r6, lr}
   26dbc:	mov	r5, r0
   26dc0:	mov	r0, #12
   26dc4:	mov	r4, r1
   26dc8:	mov	r6, r2
   26dcc:	bl	11cac <malloc@plt>
   26dd0:	cmp	r0, #0
   26dd4:	popeq	{r4, r5, r6, pc}
   26dd8:	ldr	r1, [r4]
   26ddc:	ldr	r3, [r5, #32]
   26de0:	str	r6, [r0, #8]
   26de4:	add	r3, r3, #1
   26de8:	stm	r0, {r1, r4}
   26dec:	str	r0, [r1, #4]
   26df0:	str	r0, [r4]
   26df4:	str	r3, [r5, #32]
   26df8:	pop	{r4, r5, r6, pc}
   26dfc:	push	{r4, r5, r6, lr}
   26e00:	mov	r5, r0
   26e04:	mov	r0, #12
   26e08:	mov	r4, r1
   26e0c:	mov	r6, r2
   26e10:	bl	11cac <malloc@plt>
   26e14:	cmp	r0, #0
   26e18:	popeq	{r4, r5, r6, pc}
   26e1c:	ldr	r1, [r4, #4]
   26e20:	ldr	r3, [r5, #32]
   26e24:	str	r6, [r0, #8]
   26e28:	add	r3, r3, #1
   26e2c:	str	r4, [r0]
   26e30:	str	r1, [r0, #4]
   26e34:	str	r0, [r1]
   26e38:	str	r0, [r4, #4]
   26e3c:	str	r3, [r5, #32]
   26e40:	pop	{r4, r5, r6, pc}
   26e44:	push	{r4, r5, r6, lr}
   26e48:	mov	r4, r0
   26e4c:	mov	r0, #12
   26e50:	mov	r5, r1
   26e54:	bl	11cac <malloc@plt>
   26e58:	cmp	r0, #0
   26e5c:	popeq	{r4, r5, r6, pc}
   26e60:	ldr	r2, [r4, #24]
   26e64:	ldr	r3, [r4, #32]
   26e68:	add	r1, r4, #20
   26e6c:	add	r3, r3, #1
   26e70:	stm	r0, {r1, r2, r5}
   26e74:	str	r0, [r2]
   26e78:	str	r0, [r4, #24]
   26e7c:	str	r3, [r4, #32]
   26e80:	pop	{r4, r5, r6, pc}
   26e84:	push	{r4, r5, r6, r7, r8, lr}
   26e88:	mov	r5, r0
   26e8c:	mov	r8, r0
   26e90:	ldr	r4, [r5, #20]!
   26e94:	mov	r6, r2
   26e98:	cmp	r4, r5
   26e9c:	beq	26f00 <__assert_fail@plt+0x14f18>
   26ea0:	mov	r7, r1
   26ea4:	b	26eb4 <__assert_fail@plt+0x14ecc>
   26ea8:	ldr	r4, [r4]
   26eac:	cmp	r4, r5
   26eb0:	beq	26f00 <__assert_fail@plt+0x14f18>
   26eb4:	mov	r1, r6
   26eb8:	ldr	r0, [r4, #8]
   26ebc:	blx	r7
   26ec0:	cmp	r0, #0
   26ec4:	blt	26ea8 <__assert_fail@plt+0x14ec0>
   26ec8:	mov	r0, #12
   26ecc:	bl	11cac <malloc@plt>
   26ed0:	cmp	r0, #0
   26ed4:	popeq	{r4, r5, r6, r7, r8, pc}
   26ed8:	ldr	r2, [r4, #4]
   26edc:	ldr	r3, [r8, #32]
   26ee0:	str	r6, [r0, #8]
   26ee4:	add	r3, r3, #1
   26ee8:	str	r4, [r0]
   26eec:	str	r2, [r0, #4]
   26ef0:	str	r0, [r2]
   26ef4:	str	r0, [r4, #4]
   26ef8:	str	r3, [r8, #32]
   26efc:	pop	{r4, r5, r6, r7, r8, pc}
   26f00:	mov	r1, r6
   26f04:	mov	r0, r8
   26f08:	pop	{r4, r5, r6, r7, r8, lr}
   26f0c:	b	26e44 <__assert_fail@plt+0x14e5c>
   26f10:	push	{r4, r5, r6, lr}
   26f14:	mov	r4, r0
   26f18:	mov	r0, #12
   26f1c:	mov	r5, r1
   26f20:	bl	11cac <malloc@plt>
   26f24:	cmp	r0, #0
   26f28:	popeq	{r4, r5, r6, pc}
   26f2c:	ldr	r2, [r4, #20]
   26f30:	ldr	r3, [r4, #32]
   26f34:	add	r1, r4, #20
   26f38:	add	r3, r3, #1
   26f3c:	str	r5, [r0, #8]
   26f40:	str	r2, [r0]
   26f44:	str	r1, [r0, #4]
   26f48:	str	r0, [r2, #4]
   26f4c:	str	r0, [r4, #20]
   26f50:	str	r3, [r4, #32]
   26f54:	pop	{r4, r5, r6, pc}
   26f58:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f5c:	mov	fp, r0
   26f60:	mov	r0, #36	; 0x24
   26f64:	mov	sl, r1
   26f68:	mov	r9, r2
   26f6c:	mov	r8, r3
   26f70:	ldrb	r4, [sp, #40]	; 0x28
   26f74:	ldr	r5, [sp, #44]	; 0x2c
   26f78:	ldr	r6, [sp, #48]	; 0x30
   26f7c:	bl	11cac <malloc@plt>
   26f80:	subs	r7, r0, #0
   26f84:	beq	27008 <__assert_fail@plt+0x15020>
   26f88:	cmp	r5, #0
   26f8c:	str	r8, [r7, #12]
   26f90:	str	fp, [r7]
   26f94:	str	sl, [r7, #4]
   26f98:	str	r9, [r7, #8]
   26f9c:	strb	r4, [r7, #16]
   26fa0:	str	r5, [r7, #32]
   26fa4:	add	r8, r7, #20
   26fa8:	beq	27010 <__assert_fail@plt+0x15028>
   26fac:	mov	r4, r8
   26fb0:	b	26fd0 <__assert_fail@plt+0x14fe8>
   26fb4:	ldr	r3, [r6], #4
   26fb8:	subs	r5, r5, #1
   26fbc:	str	r4, [r0, #4]
   26fc0:	str	r3, [r0, #8]
   26fc4:	str	r0, [r4]
   26fc8:	mov	r4, r0
   26fcc:	beq	27014 <__assert_fail@plt+0x1502c>
   26fd0:	mov	r0, #12
   26fd4:	bl	11cac <malloc@plt>
   26fd8:	cmp	r0, #0
   26fdc:	bne	26fb4 <__assert_fail@plt+0x14fcc>
   26fe0:	b	26ff4 <__assert_fail@plt+0x1500c>
   26fe4:	ldr	r3, [r4, #4]
   26fe8:	mov	r0, r4
   26fec:	mov	r4, r3
   26ff0:	bl	11ab4 <free@plt>
   26ff4:	cmp	r8, r4
   26ff8:	bne	26fe4 <__assert_fail@plt+0x14ffc>
   26ffc:	mov	r0, r7
   27000:	bl	11ab4 <free@plt>
   27004:	mov	r7, #0
   27008:	mov	r0, r7
   2700c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27010:	mov	r0, r8
   27014:	str	r8, [r0]
   27018:	str	r0, [r7, #24]
   2701c:	mov	r0, r7
   27020:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27024:	push	{r4, r5, r6, r7, r8, lr}
   27028:	mov	r8, r0
   2702c:	mov	r0, #36	; 0x24
   27030:	mov	r7, r1
   27034:	mov	r6, r2
   27038:	mov	r5, r3
   2703c:	ldrb	r4, [sp, #24]
   27040:	bl	11cac <malloc@plt>
   27044:	cmp	r0, #0
   27048:	popeq	{r4, r5, r6, r7, r8, pc}
   2704c:	add	ip, r0, #20
   27050:	mov	r3, #0
   27054:	str	r8, [r0]
   27058:	str	r7, [r0, #4]
   2705c:	str	r6, [r0, #8]
   27060:	str	r5, [r0, #12]
   27064:	strb	r4, [r0, #16]
   27068:	str	ip, [r0, #20]
   2706c:	str	ip, [r0, #24]
   27070:	str	r3, [r0, #32]
   27074:	pop	{r4, r5, r6, r7, r8, pc}
   27078:	sub	sp, sp, #8
   2707c:	push	{r4, r5, r6, r7, r8, lr}
   27080:	mov	r4, r0
   27084:	ldr	r0, [r0, #156]	; 0x9c
   27088:	add	r1, sp, #24
   2708c:	cmp	r0, #0
   27090:	stm	r1, {r2, r3}
   27094:	ldrd	r6, [sp, #32]
   27098:	ldr	r5, [sp, #40]	; 0x28
   2709c:	beq	270ec <__assert_fail@plt+0x15104>
   270a0:	ldr	r3, [r4, #48]	; 0x30
   270a4:	cmp	r3, #0
   270a8:	bne	270ec <__assert_fail@plt+0x15104>
   270ac:	ldrb	r3, [r4, #153]	; 0x99
   270b0:	cmp	r3, #0
   270b4:	bne	270ec <__assert_fail@plt+0x15104>
   270b8:	ldr	r3, [r4, #172]	; 0xac
   270bc:	cmp	r5, #2
   270c0:	cmple	r3, #0
   270c4:	beq	271c8 <__assert_fail@plt+0x151e0>
   270c8:	mov	ip, r1
   270cc:	add	lr, r4, #32
   270d0:	ldm	ip!, {r0, r1, r2, r3}
   270d4:	mov	r5, #1
   270d8:	strb	r5, [r4, #180]	; 0xb4
   270dc:	stmia	lr!, {r0, r1, r2, r3}
   270e0:	ldm	ip, {r0, r1}
   270e4:	stm	lr, {r0, r1}
   270e8:	b	27158 <__assert_fail@plt+0x15170>
   270ec:	cmp	r5, #4
   270f0:	ble	27164 <__assert_fail@plt+0x1517c>
   270f4:	add	r0, r0, #1
   270f8:	str	r0, [r4, #156]	; 0x9c
   270fc:	mov	r2, #100	; 0x64
   27100:	mov	r3, #0
   27104:	mov	r0, r6
   27108:	mov	r1, r7
   2710c:	bl	31ca8 <renameat2@@Base+0x2f94>
   27110:	mov	r0, r6
   27114:	mov	r1, r7
   27118:	sub	r5, r5, #4
   2711c:	strd	r2, [r4, #64]	; 0x40
   27120:	mov	r2, #100	; 0x64
   27124:	mov	r3, #0
   27128:	bl	31ca8 <renameat2@@Base+0x2f94>
   2712c:	mov	r2, #100	; 0x64
   27130:	mov	r3, #0
   27134:	bl	31ca8 <renameat2@@Base+0x2f94>
   27138:	mov	r0, r6
   2713c:	mov	r1, r7
   27140:	strd	r2, [r4, #56]	; 0x38
   27144:	ldr	r2, [pc, #152]	; 271e4 <__assert_fail@plt+0x151fc>
   27148:	mov	r3, #0
   2714c:	bl	31ca8 <renameat2@@Base+0x2f94>
   27150:	str	r5, [r4, #48]	; 0x30
   27154:	strd	r0, [r4, #40]	; 0x28
   27158:	pop	{r4, r5, r6, r7, r8, lr}
   2715c:	add	sp, sp, #8
   27160:	bx	lr
   27164:	ldr	r3, [r4, #172]	; 0xac
   27168:	cmp	r5, #2
   2716c:	add	r3, r3, #1
   27170:	str	r3, [r4, #172]	; 0xac
   27174:	ble	271d0 <__assert_fail@plt+0x151e8>
   27178:	mov	r2, #100	; 0x64
   2717c:	mov	r3, #0
   27180:	mov	r0, r6
   27184:	mov	r1, r7
   27188:	bl	31ca8 <renameat2@@Base+0x2f94>
   2718c:	mov	r2, #100	; 0x64
   27190:	mov	r3, #0
   27194:	strd	r0, [r4, #72]	; 0x48
   27198:	mov	r0, r6
   2719c:	mov	r1, r7
   271a0:	bl	31ca8 <renameat2@@Base+0x2f94>
   271a4:	strd	r2, [r4, #80]	; 0x50
   271a8:	mov	r3, #0
   271ac:	mov	r2, #2
   271b0:	str	r3, [r4, #88]	; 0x58
   271b4:	str	r3, [r4, #92]	; 0x5c
   271b8:	str	r2, [r4, #28]
   271bc:	pop	{r4, r5, r6, r7, r8, lr}
   271c0:	add	sp, sp, #8
   271c4:	bx	lr
   271c8:	mov	r3, #1
   271cc:	str	r3, [r4, #172]	; 0xac
   271d0:	mov	r2, #0
   271d4:	mov	r3, #0
   271d8:	strd	r6, [r4, #72]	; 0x48
   271dc:	strd	r2, [r4, #80]	; 0x50
   271e0:	b	271a8 <__assert_fail@plt+0x151c0>
   271e4:	andeq	r2, r0, r0, lsl r7
   271e8:	push	{r4, r5, r6, lr}
   271ec:	subs	r5, r0, #0
   271f0:	ldr	r4, [pc, #248]	; 272f0 <__assert_fail@plt+0x15308>
   271f4:	mov	r6, r1
   271f8:	sub	sp, sp, #8
   271fc:	smull	r3, r4, r4, r5
   27200:	ldr	r3, [pc, #236]	; 272f4 <__assert_fail@plt+0x1530c>
   27204:	add	r2, r4, r5
   27208:	asr	r4, r5, #31
   2720c:	rsb	r4, r4, r2, asr #11
   27210:	movlt	r1, #45	; 0x2d
   27214:	eor	r2, r4, r4, asr #31
   27218:	sub	r2, r2, r4, asr #31
   2721c:	rsb	r4, r4, r4, lsl #4
   27220:	movge	r1, #43	; 0x2b
   27224:	rsb	r4, r4, r4, lsl #4
   27228:	stm	sp, {r1, r2}
   2722c:	mov	r0, r6
   27230:	mvn	r2, #0
   27234:	mov	r1, #1
   27238:	bl	11dcc <__sprintf_chk@plt>
   2723c:	subs	r4, r5, r4, lsl #4
   27240:	beq	272b0 <__assert_fail@plt+0x152c8>
   27244:	cmp	r4, #0
   27248:	ldr	r3, [pc, #168]	; 272f8 <__assert_fail@plt+0x15310>
   2724c:	rsblt	r4, r4, #0
   27250:	ldr	lr, [pc, #164]	; 272fc <__assert_fail@plt+0x15314>
   27254:	umull	r2, r3, r3, r4
   27258:	ldr	r1, [pc, #160]	; 27300 <__assert_fail@plt+0x15318>
   2725c:	add	r5, r6, r0
   27260:	lsr	r3, r3, #5
   27264:	mov	r2, r3
   27268:	umull	r3, r1, r1, r4
   2726c:	umull	r3, ip, lr, r2
   27270:	rsb	r3, r2, r2, lsl #4
   27274:	lsr	ip, ip, #3
   27278:	lsr	r1, r1, #6
   2727c:	add	ip, ip, ip, lsl #2
   27280:	subs	r3, r4, r3, lsl #2
   27284:	sub	r2, r2, ip, lsl #1
   27288:	add	r2, r2, #48	; 0x30
   2728c:	add	r1, r1, #48	; 0x30
   27290:	mov	ip, #58	; 0x3a
   27294:	strb	ip, [r6, r0]
   27298:	strb	r2, [r5, #2]
   2729c:	strb	r1, [r5, #1]
   272a0:	addeq	r2, r5, #3
   272a4:	bne	272bc <__assert_fail@plt+0x152d4>
   272a8:	mov	r3, #0
   272ac:	strb	r3, [r2]
   272b0:	mov	r0, r6
   272b4:	add	sp, sp, #8
   272b8:	pop	{r4, r5, r6, pc}
   272bc:	umull	r2, lr, lr, r3
   272c0:	strb	ip, [r5, #3]
   272c4:	add	r2, r5, #6
   272c8:	lsr	lr, lr, #3
   272cc:	add	r1, lr, lr, lsl #2
   272d0:	add	lr, lr, #48	; 0x30
   272d4:	sub	r3, r3, r1, lsl #1
   272d8:	add	r3, r3, #48	; 0x30
   272dc:	strb	r3, [r5, #5]
   272e0:	mov	r3, #0
   272e4:	strb	lr, [r5, #4]
   272e8:	strb	r3, [r2]
   272ec:	b	272b0 <__assert_fail@plt+0x152c8>
   272f0:			; <UNDEFINED> instruction: 0x91a2b3c5
   272f4:	andeq	r5, r3, ip, lsr #29
   272f8:	stmhi	r8, {r0, r3, r7, fp, pc}
   272fc:	stclgt	12, cr12, [ip], {205}	; 0xcd
   27300:	blne	13c79dc <optarg@@GLIBC_2.4+0x137f6d4>
   27304:	ldr	r2, [pc, #104]	; 27374 <__assert_fail@plt+0x1538c>
   27308:	push	{r4, lr}
   2730c:	mov	r4, r1
   27310:	smull	r2, ip, r2, r0
   27314:	ldr	lr, [pc, #92]	; 27378 <__assert_fail@plt+0x15390>
   27318:	asr	r2, r0, #31
   2731c:	rsb	r2, r2, ip, asr #5
   27320:	add	ip, r2, #19
   27324:	add	r2, r2, r2, lsl #2
   27328:	eor	r1, ip, ip, asr #31
   2732c:	add	r2, r2, r2, lsl #2
   27330:	sub	sp, sp, #8
   27334:	sub	r2, r0, r2, lsl #2
   27338:	cmp	r2, #0
   2733c:	rsblt	r2, r2, #0
   27340:	sub	r1, r1, ip, asr #31
   27344:	ldr	r3, [pc, #48]	; 2737c <__assert_fail@plt+0x15394>
   27348:	stm	sp, {r1, r2}
   2734c:	cmp	r0, r3
   27350:	movlt	r3, lr
   27354:	addge	r3, lr, #1
   27358:	mvn	r2, #0
   2735c:	mov	r0, r4
   27360:	mov	r1, #1
   27364:	bl	11dcc <__sprintf_chk@plt>
   27368:	mov	r0, r4
   2736c:	add	sp, sp, #8
   27370:	pop	{r4, pc}
   27374:	mvnpl	r8, pc, lsl r5
   27378:			; <UNDEFINED> instruction: 0x00035eb4
   2737c:			; <UNDEFINED> instruction: 0xfffff894
   27380:	push	{r0, r1, r2, r3}
   27384:	mov	r2, #6
   27388:	push	{r4, r5, r6, lr}
   2738c:	sub	sp, sp, #8
   27390:	ldr	r4, [pc, #92]	; 273f4 <__assert_fail@plt+0x1540c>
   27394:	ldr	r5, [pc, #92]	; 273f8 <__assert_fail@plt+0x15410>
   27398:	ldr	r6, [sp, #24]
   2739c:	ldr	ip, [r4]
   273a0:	ldr	r3, [r5]
   273a4:	mov	r1, #1
   273a8:	ldr	r0, [pc, #76]	; 273fc <__assert_fail@plt+0x15414>
   273ac:	str	ip, [sp, #4]
   273b0:	bl	11c1c <fwrite@plt>
   273b4:	add	ip, sp, #28
   273b8:	mov	r2, r6
   273bc:	mov	r3, ip
   273c0:	ldr	r0, [r5]
   273c4:	mov	r1, #1
   273c8:	str	ip, [sp]
   273cc:	bl	11cf4 <__vfprintf_chk@plt>
   273d0:	ldr	r2, [sp, #4]
   273d4:	ldr	r3, [r4]
   273d8:	cmp	r2, r3
   273dc:	bne	273f0 <__assert_fail@plt+0x15408>
   273e0:	add	sp, sp, #8
   273e4:	pop	{r4, r5, r6, lr}
   273e8:	add	sp, sp, #16
   273ec:	bx	lr
   273f0:	bl	11b50 <__stack_chk_fail@plt>
   273f4:	andeq	r7, r4, r8, lsl #30
   273f8:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   273fc:	andeq	r5, r3, r0, asr #29
   27400:	push	{r4, r5, lr}
   27404:	mov	r5, r1
   27408:	ldr	r4, [pc, #176]	; 274c0 <__assert_fail@plt+0x154d8>
   2740c:	sub	sp, sp, #60	; 0x3c
   27410:	cmn	r3, #1
   27414:	ldr	r1, [r4]
   27418:	str	r3, [sp, #4]
   2741c:	str	r1, [sp, #52]	; 0x34
   27420:	beq	274a0 <__assert_fail@plt+0x154b8>
   27424:	ldr	r1, [r2]
   27428:	ldr	r3, [r5]
   2742c:	ldr	ip, [r2, #4]
   27430:	ldr	lr, [r2, #8]
   27434:	eor	r3, r3, r1
   27438:	ldr	r0, [r5, #4]
   2743c:	ldr	r1, [r5, #8]
   27440:	eor	r0, r0, ip
   27444:	eor	r1, r1, lr
   27448:	ldr	ip, [r5, #12]
   2744c:	ldr	lr, [r2, #12]
   27450:	orr	r3, r3, r0
   27454:	eor	ip, ip, lr
   27458:	ldr	r0, [r5, #16]
   2745c:	ldr	lr, [r2, #16]
   27460:	orr	r3, r3, r1
   27464:	ldr	r2, [r2, #20]
   27468:	ldr	r1, [r5, #20]
   2746c:	eor	r0, r0, lr
   27470:	orr	r3, r3, ip
   27474:	orr	r3, r3, r0
   27478:	eor	r1, r1, r2
   2747c:	orrs	r3, r3, r1
   27480:	moveq	r0, #1
   27484:	movne	r0, #0
   27488:	ldr	r2, [sp, #52]	; 0x34
   2748c:	ldr	r3, [r4]
   27490:	cmp	r2, r3
   27494:	bne	274bc <__assert_fail@plt+0x154d4>
   27498:	add	sp, sp, #60	; 0x3c
   2749c:	pop	{r4, r5, pc}
   274a0:	add	r2, sp, #8
   274a4:	add	r1, sp, #4
   274a8:	bl	2fa34 <renameat2@@Base+0xd20>
   274ac:	subs	r2, r0, #0
   274b0:	moveq	r0, r2
   274b4:	bne	27424 <__assert_fail@plt+0x1543c>
   274b8:	b	27488 <__assert_fail@plt+0x154a0>
   274bc:	bl	11b50 <__stack_chk_fail@plt>
   274c0:	andeq	r7, r4, r8, lsl #30
   274c4:	push	{r4, lr}
   274c8:	sub	sp, sp, #16
   274cc:	ldr	r4, [pc, #44]	; 27500 <__assert_fail@plt+0x15518>
   274d0:	ldr	r1, [sp, #24]
   274d4:	ldr	lr, [pc, #40]	; 27504 <__assert_fail@plt+0x1551c>
   274d8:	eor	ip, r0, #1
   274dc:	strd	r2, [sp]
   274e0:	str	r1, [sp, #8]
   274e4:	ldr	r0, [r4]
   274e8:	add	r2, lr, ip
   274ec:	mov	r1, #1
   274f0:	bl	11e38 <__fprintf_chk@plt>
   274f4:	mov	r0, #1
   274f8:	add	sp, sp, #16
   274fc:	pop	{r4, pc}
   27500:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   27504:	andeq	r5, r3, r8, asr #29
   27508:	push	{r4, r5, r6, r7, r8, lr}
   2750c:	mov	r7, r0
   27510:	ldr	r5, [pc, #172]	; 275c4 <__assert_fail@plt+0x155dc>
   27514:	ldr	r3, [pc, #172]	; 275c8 <__assert_fail@plt+0x155e0>
   27518:	mov	r6, r1
   2751c:	b	2752c <__assert_fail@plt+0x15544>
   27520:	ldr	r3, [r5, #12]!
   27524:	cmp	r3, #0
   27528:	beq	2754c <__assert_fail@plt+0x15564>
   2752c:	mov	r1, r3
   27530:	mov	r0, r6
   27534:	bl	11a48 <strcmp@plt>
   27538:	mov	r4, r5
   2753c:	cmp	r0, #0
   27540:	bne	27520 <__assert_fail@plt+0x15538>
   27544:	mov	r0, r4
   27548:	pop	{r4, r5, r6, r7, r8, pc}
   2754c:	ldr	r1, [r7, #192]	; 0xc0
   27550:	cmp	r1, #0
   27554:	beq	27584 <__assert_fail@plt+0x1559c>
   27558:	add	r7, r7, #192	; 0xc0
   2755c:	b	2756c <__assert_fail@plt+0x15584>
   27560:	ldr	r1, [r7, #12]!
   27564:	cmp	r1, #0
   27568:	beq	27584 <__assert_fail@plt+0x1559c>
   2756c:	mov	r0, r6
   27570:	bl	11a48 <strcmp@plt>
   27574:	mov	r4, r7
   27578:	cmp	r0, #0
   2757c:	bne	27560 <__assert_fail@plt+0x15578>
   27580:	b	27544 <__assert_fail@plt+0x1555c>
   27584:	ldr	r3, [pc, #64]	; 275cc <__assert_fail@plt+0x155e4>
   27588:	ldr	r1, [pc, #64]	; 275d0 <__assert_fail@plt+0x155e8>
   2758c:	b	2759c <__assert_fail@plt+0x155b4>
   27590:	ldr	r1, [r4, #12]
   27594:	cmp	r1, #0
   27598:	beq	275b8 <__assert_fail@plt+0x155d0>
   2759c:	mov	r0, r6
   275a0:	mov	r4, r3
   275a4:	bl	11a48 <strcmp@plt>
   275a8:	add	r3, r4, #12
   275ac:	cmp	r0, #0
   275b0:	bne	27590 <__assert_fail@plt+0x155a8>
   275b4:	b	27544 <__assert_fail@plt+0x1555c>
   275b8:	mov	r4, r1
   275bc:	mov	r0, r4
   275c0:	pop	{r4, r5, r6, r7, r8, pc}
   275c4:	andeq	r5, r3, ip, lsl #7
   275c8:	ldrdeq	r5, [r3], -r4
   275cc:			; <UNDEFINED> instruction: 0x000353bc
   275d0:	ldrdeq	r5, [r3], -r8
   275d4:	push	{r4, lr}
   275d8:	mov	r4, r1
   275dc:	sub	sp, sp, #8
   275e0:	mov	r1, r0
   275e4:	ldr	r0, [pc, #328]	; 27734 <__assert_fail@plt+0x1574c>
   275e8:	bl	27380 <__assert_fail@plt+0x15398>
   275ec:	ldrd	r2, [r4, #96]	; 0x60
   275f0:	orrs	r1, r2, r3
   275f4:	bne	27704 <__assert_fail@plt+0x1571c>
   275f8:	ldrd	r2, [r4, #104]	; 0x68
   275fc:	orrs	r1, r2, r3
   27600:	beq	276a8 <__assert_fail@plt+0x156c0>
   27604:	mov	r0, #0
   27608:	ldr	r1, [pc, #296]	; 27738 <__assert_fail@plt+0x15750>
   2760c:	str	r1, [sp]
   27610:	bl	274c4 <__assert_fail@plt+0x154dc>
   27614:	ldrd	r2, [r4, #112]	; 0x70
   27618:	orrs	r1, r2, r3
   2761c:	beq	2762c <__assert_fail@plt+0x15644>
   27620:	ldr	r1, [pc, #276]	; 2773c <__assert_fail@plt+0x15754>
   27624:	str	r1, [sp]
   27628:	bl	274c4 <__assert_fail@plt+0x154dc>
   2762c:	ldrd	r2, [r4, #120]	; 0x78
   27630:	orrs	r1, r2, r3
   27634:	beq	27644 <__assert_fail@plt+0x1565c>
   27638:	ldr	r1, [pc, #256]	; 27740 <__assert_fail@plt+0x15758>
   2763c:	str	r1, [sp]
   27640:	bl	274c4 <__assert_fail@plt+0x154dc>
   27644:	ldrd	r2, [r4, #128]	; 0x80
   27648:	orrs	r1, r2, r3
   2764c:	beq	2765c <__assert_fail@plt+0x15674>
   27650:	ldr	r1, [pc, #236]	; 27744 <__assert_fail@plt+0x1575c>
   27654:	str	r1, [sp]
   27658:	bl	274c4 <__assert_fail@plt+0x154dc>
   2765c:	ldrd	r2, [r4, #136]	; 0x88
   27660:	orrs	r1, r2, r3
   27664:	beq	27674 <__assert_fail@plt+0x1568c>
   27668:	ldr	r1, [pc, #216]	; 27748 <__assert_fail@plt+0x15760>
   2766c:	str	r1, [sp]
   27670:	bl	274c4 <__assert_fail@plt+0x154dc>
   27674:	ldr	r2, [r4, #144]	; 0x90
   27678:	asr	r3, r2, #31
   2767c:	orrs	r1, r2, r3
   27680:	beq	27690 <__assert_fail@plt+0x156a8>
   27684:	ldr	r1, [pc, #192]	; 2774c <__assert_fail@plt+0x15764>
   27688:	str	r1, [sp]
   2768c:	bl	274c4 <__assert_fail@plt+0x154dc>
   27690:	ldr	r3, [pc, #184]	; 27750 <__assert_fail@plt+0x15768>
   27694:	mov	r0, #10
   27698:	ldr	r1, [r3]
   2769c:	add	sp, sp, #8
   276a0:	pop	{r4, lr}
   276a4:	b	11ec8 <fputc@plt>
   276a8:	ldrd	r2, [r4, #112]	; 0x70
   276ac:	orrs	r1, r2, r3
   276b0:	bne	27724 <__assert_fail@plt+0x1573c>
   276b4:	ldrd	r2, [r4, #120]	; 0x78
   276b8:	orrs	r1, r2, r3
   276bc:	bne	2772c <__assert_fail@plt+0x15744>
   276c0:	ldrd	r0, [r4, #128]	; 0x80
   276c4:	orrs	r1, r0, r1
   276c8:	bne	2772c <__assert_fail@plt+0x15744>
   276cc:	ldrd	r0, [r4, #136]	; 0x88
   276d0:	orrs	r1, r0, r1
   276d4:	bne	2772c <__assert_fail@plt+0x15744>
   276d8:	ldr	r1, [r4, #144]	; 0x90
   276dc:	cmp	r1, #0
   276e0:	bne	2772c <__assert_fail@plt+0x15744>
   276e4:	ldr	r3, [pc, #100]	; 27750 <__assert_fail@plt+0x15768>
   276e8:	mov	r2, #15
   276ec:	mov	r1, #1
   276f0:	ldr	r3, [r3]
   276f4:	ldr	r0, [pc, #88]	; 27754 <__assert_fail@plt+0x1576c>
   276f8:	add	sp, sp, #8
   276fc:	pop	{r4, lr}
   27700:	b	11c1c <fwrite@plt>
   27704:	ldr	r1, [pc, #76]	; 27758 <__assert_fail@plt+0x15770>
   27708:	mov	r0, #0
   2770c:	str	r1, [sp]
   27710:	bl	274c4 <__assert_fail@plt+0x154dc>
   27714:	ldrd	r2, [r4, #104]	; 0x68
   27718:	orrs	r1, r2, r3
   2771c:	beq	27614 <__assert_fail@plt+0x1562c>
   27720:	b	27608 <__assert_fail@plt+0x15620>
   27724:	mov	r0, #0
   27728:	b	27620 <__assert_fail@plt+0x15638>
   2772c:	mov	r0, #0
   27730:	b	27630 <__assert_fail@plt+0x15648>
   27734:	ldrdeq	r5, [r3], -ip
   27738:	andeq	r5, r3, r8, lsl #30
   2773c:	andeq	r5, r3, r4, lsl pc
   27740:	andeq	r5, r3, ip, lsl pc
   27744:	andeq	r5, r3, r4, lsr #30
   27748:	andeq	r5, r3, r0, lsr pc
   2774c:	andeq	r5, r3, ip, lsr #30
   27750:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   27754:	strdeq	r5, [r3], -r0
   27758:	andeq	r5, r3, r0, lsl #30
   2775c:	push	{r4, r5, r6, r7, lr}
   27760:	sub	sp, sp, #44	; 0x2c
   27764:	ldr	r5, [pc, #172]	; 27818 <__assert_fail@plt+0x15830>
   27768:	mov	r4, r2
   2776c:	mov	r2, #0
   27770:	ldr	ip, [r5]
   27774:	mov	r3, r0
   27778:	mov	r6, r1
   2777c:	str	r2, [sp, #4]
   27780:	str	r2, [sp]
   27784:	mov	r0, r4
   27788:	ldr	r2, [pc, #140]	; 2781c <__assert_fail@plt+0x15834>
   2778c:	mov	r1, #100	; 0x64
   27790:	str	ip, [sp, #36]	; 0x24
   27794:	bl	31800 <renameat2@@Base+0x2aec>
   27798:	cmp	r0, #99	; 0x63
   2779c:	movgt	r3, #0
   277a0:	movle	r3, #1
   277a4:	cmp	r6, #0
   277a8:	moveq	r3, #0
   277ac:	cmp	r3, #0
   277b0:	beq	277c0 <__assert_fail@plt+0x157d8>
   277b4:	ldr	r3, [r6, #176]	; 0xb0
   277b8:	cmp	r3, #0
   277bc:	bne	277dc <__assert_fail@plt+0x157f4>
   277c0:	ldr	r2, [sp, #36]	; 0x24
   277c4:	ldr	r3, [r5]
   277c8:	mov	r0, r4
   277cc:	cmp	r2, r3
   277d0:	bne	27814 <__assert_fail@plt+0x1582c>
   277d4:	add	sp, sp, #44	; 0x2c
   277d8:	pop	{r4, r5, r6, r7, pc}
   277dc:	mov	r7, r0
   277e0:	add	r1, sp, #8
   277e4:	ldr	r0, [r6, #24]
   277e8:	bl	271e8 <__assert_fail@plt+0x15200>
   277ec:	ldr	r3, [pc, #44]	; 27820 <__assert_fail@plt+0x15838>
   277f0:	add	ip, r4, r7
   277f4:	str	r3, [sp]
   277f8:	rsb	r1, r7, #100	; 0x64
   277fc:	mvn	r3, #0
   27800:	mov	r2, #1
   27804:	str	r0, [sp, #4]
   27808:	mov	r0, ip
   2780c:	bl	11fdc <__snprintf_chk@plt>
   27810:	b	277c0 <__assert_fail@plt+0x157d8>
   27814:	bl	11b50 <__stack_chk_fail@plt>
   27818:	andeq	r7, r4, r8, lsl #30
   2781c:	andeq	r5, r3, r8, lsr pc
   27820:	andeq	r5, r3, r4, asr pc
   27824:	push	{r4, r5, r6, r7, lr}
   27828:	mov	r5, r1
   2782c:	ldrb	r1, [r0, #188]	; 0xbc
   27830:	sub	sp, sp, #20
   27834:	mov	r4, r0
   27838:	cmp	r1, #0
   2783c:	beq	278e0 <__assert_fail@plt+0x158f8>
   27840:	ldr	r1, [r0, #8]
   27844:	ldr	r0, [r0, #12]
   27848:	adds	r6, r1, #1
   2784c:	adc	r7, r0, #0
   27850:	cmp	r7, #0
   27854:	cmpeq	r6, #13
   27858:	bhi	278a4 <__assert_fail@plt+0x158bc>
   2785c:	add	r1, r6, r6, lsl #2
   27860:	ldr	r3, [pc, #196]	; 2792c <__assert_fail@plt+0x15944>
   27864:	add	r2, r6, r1, lsl #1
   27868:	add	r3, r3, r2
   2786c:	mov	r1, #100	; 0x64
   27870:	ldr	r2, [pc, #184]	; 27930 <__assert_fail@plt+0x15948>
   27874:	mov	r0, r5
   27878:	bl	11dd8 <snprintf@plt>
   2787c:	ldr	r3, [r4, #16]
   27880:	cmp	r3, #6
   27884:	bhi	278d4 <__assert_fail@plt+0x158ec>
   27888:	cmp	r0, #99	; 0x63
   2788c:	bhi	278d4 <__assert_fail@plt+0x158ec>
   27890:	clz	r2, r0
   27894:	add	lr, r5, r0
   27898:	lsr	r2, r2, #5
   2789c:	rsb	r1, r0, #100	; 0x64
   278a0:	b	278fc <__assert_fail@plt+0x15914>
   278a4:	ldr	r3, [pc, #136]	; 27934 <__assert_fail@plt+0x1594c>
   278a8:	str	r1, [sp, #8]
   278ac:	str	r0, [sp, #12]
   278b0:	str	r3, [sp]
   278b4:	mov	r2, #1
   278b8:	mvn	r3, #0
   278bc:	mov	r1, #100	; 0x64
   278c0:	mov	r0, r5
   278c4:	bl	11fdc <__snprintf_chk@plt>
   278c8:	ldr	r3, [r4, #16]
   278cc:	cmp	r3, #6
   278d0:	bls	27890 <__assert_fail@plt+0x158a8>
   278d4:	mov	r0, r5
   278d8:	add	sp, sp, #20
   278dc:	pop	{r4, r5, r6, r7, pc}
   278e0:	strb	r1, [r5]
   278e4:	ldr	r3, [r0, #16]
   278e8:	cmp	r3, #6
   278ec:	bhi	278d4 <__assert_fail@plt+0x158ec>
   278f0:	mov	lr, r5
   278f4:	mov	r1, #100	; 0x64
   278f8:	mov	r2, #1
   278fc:	ldr	ip, [pc, #52]	; 27938 <__assert_fail@plt+0x15950>
   27900:	ldr	r0, [pc, #52]	; 2793c <__assert_fail@plt+0x15954>
   27904:	add	r3, ip, r3, lsl #2
   27908:	add	r2, r2, r0
   2790c:	mov	r0, lr
   27910:	strd	r2, [sp]
   27914:	mvn	r3, #0
   27918:	mov	r2, #1
   2791c:	bl	11fdc <__snprintf_chk@plt>
   27920:	mov	r0, r5
   27924:	add	sp, sp, #20
   27928:	pop	{r4, r5, r6, r7, pc}
   2792c:	strdeq	r5, [r3], -ip
   27930:	andeq	r3, r3, r0, lsl #26
   27934:	andeq	r5, r3, ip, asr pc
   27938:	muleq	r3, r8, r6
   2793c:	andeq	r5, r3, r0, lsl #4
   27940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27944:	mov	r4, r1
   27948:	ldr	r6, [pc, #896]	; 27cd0 <__assert_fail@plt+0x15ce8>
   2794c:	sub	sp, sp, #132	; 0x84
   27950:	mov	r1, r0
   27954:	ldr	r3, [r6]
   27958:	ldr	r0, [pc, #884]	; 27cd4 <__assert_fail@plt+0x15cec>
   2795c:	str	r3, [sp, #124]	; 0x7c
   27960:	bl	27380 <__assert_fail@plt+0x15398>
   27964:	ldr	r3, [r4, #156]	; 0x9c
   27968:	cmp	r3, #0
   2796c:	bne	27b20 <__assert_fail@plt+0x15b38>
   27970:	ldrb	r1, [r4, #180]	; 0xb4
   27974:	ldrb	r2, [r4, #187]	; 0xbb
   27978:	ldr	r5, [pc, #856]	; 27cd8 <__assert_fail@plt+0x15cf0>
   2797c:	cmp	r1, r2
   27980:	ldr	r7, [r5]
   27984:	beq	279b0 <__assert_fail@plt+0x159c8>
   27988:	ldrd	r8, [r4, #40]	; 0x28
   2798c:	mov	r0, r7
   27990:	ldr	r2, [pc, #836]	; 27cdc <__assert_fail@plt+0x15cf4>
   27994:	strd	r8, [sp]
   27998:	mov	r1, #1
   2799c:	bl	11e38 <__fprintf_chk@plt>
   279a0:	ldrb	r2, [r4, #180]	; 0xb4
   279a4:	ldr	r7, [r5]
   279a8:	mov	r3, #1
   279ac:	strb	r2, [r4, #187]	; 0xbb
   279b0:	ldr	r2, [r4, #172]	; 0xac
   279b4:	cmp	r2, #0
   279b8:	beq	279c8 <__assert_fail@plt+0x159e0>
   279bc:	ldrb	r2, [r4, #185]	; 0xb9
   279c0:	cmp	r2, #0
   279c4:	beq	27b4c <__assert_fail@plt+0x15b64>
   279c8:	ldr	r2, [r4, #160]	; 0xa0
   279cc:	cmp	r2, #0
   279d0:	beq	27a24 <__assert_fail@plt+0x15a3c>
   279d4:	ldrb	r2, [r4, #183]	; 0xb7
   279d8:	cmp	r2, #0
   279dc:	bne	27a24 <__assert_fail@plt+0x15a3c>
   279e0:	cmp	r3, #0
   279e4:	bne	27bbc <__assert_fail@plt+0x15bd4>
   279e8:	add	r1, sp, #24
   279ec:	mov	r0, r4
   279f0:	bl	27824 <__assert_fail@plt+0x1583c>
   279f4:	ldrd	r2, [r4, #8]
   279f8:	ldr	r1, [r4, #16]
   279fc:	strd	r2, [sp]
   27a00:	str	r1, [sp, #8]
   27a04:	ldr	r2, [pc, #724]	; 27ce0 <__assert_fail@plt+0x15cf8>
   27a08:	mov	r1, #1
   27a0c:	mov	r3, r0
   27a10:	mov	r0, r7
   27a14:	bl	11e38 <__fprintf_chk@plt>
   27a18:	ldr	r7, [r5]
   27a1c:	mov	r3, #1
   27a20:	strb	r3, [r4, #183]	; 0xb7
   27a24:	ldr	r2, [r4, #164]	; 0xa4
   27a28:	cmp	r2, #0
   27a2c:	beq	27ab0 <__assert_fail@plt+0x15ac8>
   27a30:	ldrb	r2, [r4, #184]	; 0xb8
   27a34:	cmp	r2, #0
   27a38:	bne	27ab0 <__assert_fail@plt+0x15ac8>
   27a3c:	ldr	ip, [r4, #168]	; 0xa8
   27a40:	ldr	r0, [pc, #668]	; 27ce4 <__assert_fail@plt+0x15cfc>
   27a44:	ldr	r1, [pc, #668]	; 27ce8 <__assert_fail@plt+0x15d00>
   27a48:	cmp	ip, #0
   27a4c:	ldr	r2, [pc, #664]	; 27cec <__assert_fail@plt+0x15d04>
   27a50:	moveq	r1, r0
   27a54:	eor	r3, r3, #1
   27a58:	add	r2, r2, r3
   27a5c:	str	r1, [sp]
   27a60:	mov	r0, r7
   27a64:	ldr	r3, [r4, #20]
   27a68:	mov	r1, #1
   27a6c:	bl	11e38 <__fprintf_chk@plt>
   27a70:	ldr	r2, [r4, #176]	; 0xb0
   27a74:	mov	r3, #1
   27a78:	cmp	r2, #0
   27a7c:	strb	r3, [r4, #184]	; 0xb8
   27a80:	bne	27bd0 <__assert_fail@plt+0x15be8>
   27a84:	ldrb	r3, [r4, #152]	; 0x98
   27a88:	ldr	r7, [r5]
   27a8c:	cmp	r3, #0
   27a90:	beq	27afc <__assert_fail@plt+0x15b14>
   27a94:	ldr	r8, [r4, #88]	; 0x58
   27a98:	asr	r9, r8, #31
   27a9c:	mov	r1, r7
   27aa0:	mov	r0, #32
   27aa4:	bl	11ec8 <fputc@plt>
   27aa8:	ldr	r7, [r5]
   27aac:	b	27ae4 <__assert_fail@plt+0x15afc>
   27ab0:	ldr	r2, [r4, #176]	; 0xb0
   27ab4:	cmp	r2, #0
   27ab8:	beq	27ac8 <__assert_fail@plt+0x15ae0>
   27abc:	ldrb	r2, [r4, #186]	; 0xba
   27ac0:	cmp	r2, #0
   27ac4:	beq	27bf0 <__assert_fail@plt+0x15c08>
   27ac8:	ldrb	r2, [r4, #152]	; 0x98
   27acc:	cmp	r2, #0
   27ad0:	beq	27afc <__assert_fail@plt+0x15b14>
   27ad4:	ldr	r8, [r4, #88]	; 0x58
   27ad8:	cmp	r3, #0
   27adc:	asr	r9, r8, #31
   27ae0:	bne	27a9c <__assert_fail@plt+0x15ab4>
   27ae4:	strd	r8, [sp]
   27ae8:	mov	r0, r7
   27aec:	ldr	r2, [pc, #508]	; 27cf0 <__assert_fail@plt+0x15d08>
   27af0:	mov	r1, #1
   27af4:	bl	11e38 <__fprintf_chk@plt>
   27af8:	ldr	r7, [r5]
   27afc:	mov	r1, r7
   27b00:	mov	r0, #10
   27b04:	bl	11ec8 <fputc@plt>
   27b08:	ldr	r2, [sp, #124]	; 0x7c
   27b0c:	ldr	r3, [r6]
   27b10:	cmp	r2, r3
   27b14:	bne	27ccc <__assert_fail@plt+0x15ce4>
   27b18:	add	sp, sp, #132	; 0x84
   27b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b20:	ldrb	r3, [r4, #182]	; 0xb6
   27b24:	ldr	r5, [pc, #428]	; 27cd8 <__assert_fail@plt+0x15cf0>
   27b28:	cmp	r3, #0
   27b2c:	ldr	r7, [r5]
   27b30:	beq	27c40 <__assert_fail@plt+0x15c58>
   27b34:	ldrb	r3, [r4, #187]	; 0xbb
   27b38:	ldrb	r2, [r4, #180]	; 0xb4
   27b3c:	cmp	r2, r3
   27b40:	moveq	r3, #0
   27b44:	bne	27988 <__assert_fail@plt+0x159a0>
   27b48:	b	279b0 <__assert_fail@plt+0x159c8>
   27b4c:	ldrd	r8, [r4, #80]	; 0x50
   27b50:	ldr	sl, [r4, #88]	; 0x58
   27b54:	ldr	r2, [pc, #408]	; 27cf4 <__assert_fail@plt+0x15d0c>
   27b58:	strd	r8, [sp, #8]
   27b5c:	ldrd	r8, [r4, #72]	; 0x48
   27b60:	asr	fp, sl, #31
   27b64:	eor	r3, r3, #1
   27b68:	add	r2, r2, r3
   27b6c:	mov	r0, r7
   27b70:	strd	sl, [sp, #16]
   27b74:	mov	r1, #1
   27b78:	strd	r8, [sp]
   27b7c:	bl	11e38 <__fprintf_chk@plt>
   27b80:	ldr	r3, [r4, #92]	; 0x5c
   27b84:	cmp	r3, #0
   27b88:	bne	27c98 <__assert_fail@plt+0x15cb0>
   27b8c:	ldr	r1, [r4, #28]
   27b90:	ldr	r7, [r5]
   27b94:	cmp	r1, #1
   27b98:	beq	27cb4 <__assert_fail@plt+0x15ccc>
   27b9c:	ldr	r2, [r4, #160]	; 0xa0
   27ba0:	mov	r3, #1
   27ba4:	cmp	r2, #0
   27ba8:	strb	r3, [r4, #185]	; 0xb9
   27bac:	beq	27a24 <__assert_fail@plt+0x15a3c>
   27bb0:	ldrb	r3, [r4, #183]	; 0xb7
   27bb4:	cmp	r3, #0
   27bb8:	bne	27a24 <__assert_fail@plt+0x15a3c>
   27bbc:	mov	r1, r7
   27bc0:	mov	r0, #32
   27bc4:	bl	11ec8 <fputc@plt>
   27bc8:	ldr	r7, [r5]
   27bcc:	b	279e8 <__assert_fail@plt+0x15a00>
   27bd0:	ldrb	r3, [r4, #186]	; 0xba
   27bd4:	ldr	r7, [r5]
   27bd8:	cmp	r3, #0
   27bdc:	beq	27cac <__assert_fail@plt+0x15cc4>
   27be0:	ldrb	r3, [r4, #152]	; 0x98
   27be4:	cmp	r3, #0
   27be8:	beq	27afc <__assert_fail@plt+0x15b14>
   27bec:	b	27a94 <__assert_fail@plt+0x15aac>
   27bf0:	ldr	r8, [pc, #256]	; 27cf8 <__assert_fail@plt+0x15d10>
   27bf4:	eor	r3, r3, #1
   27bf8:	add	r8, r3, r8
   27bfc:	add	r1, sp, #24
   27c00:	ldr	r0, [r4, #24]
   27c04:	bl	271e8 <__assert_fail@plt+0x15200>
   27c08:	mov	r2, r8
   27c0c:	mov	r1, #1
   27c10:	mov	r3, r0
   27c14:	mov	r0, r7
   27c18:	bl	11e38 <__fprintf_chk@plt>
   27c1c:	ldrb	r3, [r4, #152]	; 0x98
   27c20:	mov	r2, #1
   27c24:	strb	r2, [r4, #186]	; 0xba
   27c28:	cmp	r3, #0
   27c2c:	beq	27af8 <__assert_fail@plt+0x15b10>
   27c30:	ldr	r8, [r4, #88]	; 0x58
   27c34:	ldr	r7, [r5]
   27c38:	asr	r9, r8, #31
   27c3c:	b	27a9c <__assert_fail@plt+0x15ab4>
   27c40:	ldrd	r2, [r4, #64]	; 0x40
   27c44:	ldrd	r8, [r4, #56]	; 0x38
   27c48:	mov	r0, r7
   27c4c:	strd	r2, [sp, #16]
   27c50:	ldrd	sl, [r4, #40]	; 0x28
   27c54:	ldr	r2, [pc, #160]	; 27cfc <__assert_fail@plt+0x15d14>
   27c58:	mov	r1, #1
   27c5c:	strd	r8, [sp, #8]
   27c60:	strd	sl, [sp]
   27c64:	bl	11e38 <__fprintf_chk@plt>
   27c68:	ldrb	r1, [r4, #180]	; 0xb4
   27c6c:	ldrb	r2, [r4, #187]	; 0xbb
   27c70:	mov	r3, #1
   27c74:	strb	r3, [r4, #182]	; 0xb6
   27c78:	cmp	r1, r2
   27c7c:	ldreq	r7, [r5]
   27c80:	beq	279b0 <__assert_fail@plt+0x159c8>
   27c84:	ldr	r1, [r5]
   27c88:	mov	r0, #32
   27c8c:	bl	11ec8 <fputc@plt>
   27c90:	ldr	r7, [r5]
   27c94:	b	27988 <__assert_fail@plt+0x159a0>
   27c98:	ldr	r2, [pc, #96]	; 27d00 <__assert_fail@plt+0x15d18>
   27c9c:	mov	r1, #1
   27ca0:	ldr	r0, [r5]
   27ca4:	bl	11e38 <__fprintf_chk@plt>
   27ca8:	b	27b8c <__assert_fail@plt+0x15ba4>
   27cac:	ldr	r8, [pc, #68]	; 27cf8 <__assert_fail@plt+0x15d10>
   27cb0:	b	27bfc <__assert_fail@plt+0x15c14>
   27cb4:	mov	r3, r7
   27cb8:	mov	r2, #2
   27cbc:	ldr	r0, [pc, #64]	; 27d04 <__assert_fail@plt+0x15d1c>
   27cc0:	bl	11c1c <fwrite@plt>
   27cc4:	ldr	r7, [r5]
   27cc8:	b	27b9c <__assert_fail@plt+0x15bb4>
   27ccc:	bl	11b50 <__stack_chk_fail@plt>
   27cd0:	andeq	r7, r4, r8, lsl #30
   27cd4:	ldrdeq	r5, [r3], -ip
   27cd8:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   27cdc:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   27ce0:	andeq	r5, r3, r8, asr #31
   27ce4:	strdeq	r5, [r3], -r8
   27ce8:	andeq	r5, r3, r4, ror #30
   27cec:	andeq	r5, r3, r8, ror #31
   27cf0:	strdeq	r5, [r3], -r4
   27cf4:	andeq	r5, r3, r4, lsr #31
   27cf8:	andeq	r5, r3, ip, ror #30
   27cfc:	andeq	r5, r3, r4, ror pc
   27d00:			; <UNDEFINED> instruction: 0x00035fbc
   27d04:	andeq	r5, r3, r4, asr #31
   27d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d0c:	sub	sp, sp, #1536	; 0x600
   27d10:	ldr	r2, [pc, #4012]	; 28cc4 <__assert_fail@plt+0x16cdc>
   27d14:	sub	sp, sp, #12
   27d18:	add	r6, sp, #360	; 0x168
   27d1c:	mov	r8, #38	; 0x26
   27d20:	mov	r3, #0
   27d24:	mov	r5, r8
   27d28:	ldr	r2, [r2]
   27d2c:	mov	r7, r3
   27d30:	str	r3, [sp, #96]	; 0x60
   27d34:	strh	r3, [r6]
   27d38:	cmn	r5, #93	; 0x5d
   27d3c:	mvn	r3, #1
   27d40:	str	r0, [sp, #40]	; 0x28
   27d44:	str	r2, [sp, #1540]	; 0x604
   27d48:	mov	sl, r6
   27d4c:	add	r9, sp, #400	; 0x190
   27d50:	str	r3, [sp, #16]
   27d54:	ldr	fp, [pc, #3948]	; 28cc8 <__assert_fail@plt+0x16ce0>
   27d58:	mov	r4, r5
   27d5c:	beq	27e4c <__assert_fail@plt+0x15e64>
   27d60:	ldr	r3, [sp, #16]
   27d64:	cmn	r3, #2
   27d68:	beq	2810c <__assert_fail@plt+0x16124>
   27d6c:	ldr	r2, [sp, #16]
   27d70:	cmp	r2, #0
   27d74:	ble	280f4 <__assert_fail@plt+0x1610c>
   27d78:	ldr	r3, [pc, #3916]	; 28ccc <__assert_fail@plt+0x16ce4>
   27d7c:	cmp	r2, r3
   27d80:	ble	28380 <__assert_fail@plt+0x16398>
   27d84:	add	r4, r5, #2
   27d88:	mov	r3, #2
   27d8c:	cmp	r4, #112	; 0x70
   27d90:	bhi	27e4c <__assert_fail@plt+0x15e64>
   27d94:	add	r4, fp, r4
   27d98:	add	r2, r4, #2256	; 0x8d0
   27d9c:	ldrsb	r2, [r2, #4]
   27da0:	cmp	r2, r3
   27da4:	bne	27e4c <__assert_fail@plt+0x15e64>
   27da8:	ldrb	r7, [r4, #2376]	; 0x948
   27dac:	cmp	r7, #0
   27db0:	beq	28530 <__assert_fail@plt+0x16548>
   27db4:	ldr	r3, [sp, #96]	; 0x60
   27db8:	add	lr, sp, #248	; 0xf8
   27dbc:	cmp	r3, #0
   27dc0:	subne	r3, r3, #1
   27dc4:	strne	r3, [sp, #96]	; 0x60
   27dc8:	ldr	r3, [sp, #100]	; 0x64
   27dcc:	add	r9, r9, #56	; 0x38
   27dd0:	str	r3, [sp, #264]	; 0x108
   27dd4:	ldr	r3, [sp, #104]	; 0x68
   27dd8:	mov	ip, r9
   27ddc:	str	r3, [sp, #256]	; 0x100
   27de0:	ldr	r3, [sp, #108]	; 0x6c
   27de4:	mvn	r4, #1
   27de8:	str	r3, [sp, #260]	; 0x104
   27dec:	ldm	lr!, {r0, r1, r2, r3}
   27df0:	str	sl, [sp, #24]
   27df4:	str	r4, [sp, #16]
   27df8:	stmia	ip!, {r0, r1, r2, r3}
   27dfc:	ldm	lr!, {r0, r1, r2, r3}
   27e00:	stmia	ip!, {r0, r1, r2, r3}
   27e04:	ldm	lr!, {r0, r1, r2, r3}
   27e08:	stmia	ip!, {r0, r1, r2, r3}
   27e0c:	ldm	lr, {r0, r1}
   27e10:	stm	ip, {r0, r1}
   27e14:	ldr	r2, [sp, #24]
   27e18:	add	r3, r6, #38	; 0x26
   27e1c:	add	sl, r2, #2
   27e20:	cmp	sl, r3
   27e24:	strh	r7, [r2, #2]
   27e28:	bcs	2a3c0 <__assert_fail@plt+0x183d8>
   27e2c:	cmp	r7, #12
   27e30:	beq	2a3c8 <__assert_fail@plt+0x183e0>
   27e34:	add	r3, fp, r7
   27e38:	add	r3, r3, #808	; 0x328
   27e3c:	ldrsb	r5, [r3]
   27e40:	cmn	r5, #93	; 0x5d
   27e44:	mov	r4, r5
   27e48:	bne	27d60 <__assert_fail@plt+0x15d78>
   27e4c:	add	r3, fp, r7
   27e50:	ldrb	r5, [r3, #2492]	; 0x9bc
   27e54:	cmp	r5, #0
   27e58:	bne	27eec <__assert_fail@plt+0x15f04>
   27e5c:	ldr	r3, [sp, #96]	; 0x60
   27e60:	cmp	r3, #3
   27e64:	bne	27eb8 <__assert_fail@plt+0x15ed0>
   27e68:	ldr	r3, [sp, #16]
   27e6c:	cmp	r3, #0
   27e70:	bgt	28100 <__assert_fail@plt+0x16118>
   27e74:	bne	27eb8 <__assert_fail@plt+0x15ed0>
   27e78:	mov	r0, #1
   27e7c:	ldr	r3, [pc, #3648]	; 28cc4 <__assert_fail@plt+0x16cdc>
   27e80:	ldr	r2, [sp, #1540]	; 0x604
   27e84:	ldr	r3, [r3]
   27e88:	cmp	r2, r3
   27e8c:	bne	2ac24 <__assert_fail@plt+0x18c3c>
   27e90:	add	sp, sp, #1536	; 0x600
   27e94:	add	sp, sp, #12
   27e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e9c:	ldrb	r7, [r3, #2376]	; 0x948
   27ea0:	cmp	r7, #0
   27ea4:	bne	283d0 <__assert_fail@plt+0x163e8>
   27ea8:	cmp	sl, r6
   27eac:	beq	27e78 <__assert_fail@plt+0x15e90>
   27eb0:	ldrsh	r7, [sl, #-2]!
   27eb4:	sub	r9, r9, #56	; 0x38
   27eb8:	add	r7, fp, r7
   27ebc:	add	r7, r7, #808	; 0x328
   27ec0:	ldrsb	r3, [r7]
   27ec4:	cmn	r3, #93	; 0x5d
   27ec8:	beq	27ea8 <__assert_fail@plt+0x15ec0>
   27ecc:	add	r3, r3, #1
   27ed0:	cmp	r3, #112	; 0x70
   27ed4:	bhi	27ea8 <__assert_fail@plt+0x15ec0>
   27ed8:	add	r3, fp, r3
   27edc:	ldrb	r2, [r3, #2260]	; 0x8d4
   27ee0:	cmp	r2, #1
   27ee4:	bne	27ea8 <__assert_fail@plt+0x15ec0>
   27ee8:	b	27e9c <__assert_fail@plt+0x15eb4>
   27eec:	add	r3, fp, r5
   27ef0:	add	r8, sp, #312	; 0x138
   27ef4:	ldrb	r3, [r3, #2608]	; 0xa30
   27ef8:	sub	r2, r8, #8
   27efc:	str	r2, [sp, #84]	; 0x54
   27f00:	rsb	r4, r3, #1
   27f04:	str	r3, [sp, #24]
   27f08:	rsb	r4, r4, r4, lsl #3
   27f0c:	mov	ip, r2
   27f10:	add	r4, r9, r4, lsl #3
   27f14:	mov	lr, r4
   27f18:	ldr	r3, [r4, #8]
   27f1c:	ldr	r7, [r4, #16]
   27f20:	str	r3, [sp, #56]	; 0x38
   27f24:	ldm	lr!, {r0, r1, r2, r3}
   27f28:	str	r7, [sp, #60]	; 0x3c
   27f2c:	sub	r7, r5, #4
   27f30:	stmia	ip!, {r0, r1, r2, r3}
   27f34:	str	r3, [sp, #48]	; 0x30
   27f38:	ldm	lr!, {r0, r1, r2, r3}
   27f3c:	stmia	ip!, {r0, r1, r2, r3}
   27f40:	ldm	lr!, {r0, r1, r2, r3}
   27f44:	stmia	ip!, {r0, r1, r2, r3}
   27f48:	ldm	lr, {r0, r1}
   27f4c:	ldr	r3, [r4, #20]
   27f50:	str	r3, [sp, #64]	; 0x40
   27f54:	ldr	r3, [r4, #24]
   27f58:	stm	ip, {r0, r1}
   27f5c:	str	r3, [sp, #76]	; 0x4c
   27f60:	ldr	r3, [r4, #28]
   27f64:	str	r3, [sp, #80]	; 0x50
   27f68:	ldr	r3, [r4, #32]
   27f6c:	str	r3, [sp, #68]	; 0x44
   27f70:	ldr	r3, [r4, #36]	; 0x24
   27f74:	str	r3, [sp, #72]	; 0x48
   27f78:	ldrd	r2, [r4, #40]	; 0x28
   27f7c:	strd	r2, [sp, #32]
   27f80:	ldr	r3, [r4, #48]	; 0x30
   27f84:	str	r3, [sp, #44]	; 0x2c
   27f88:	cmp	r7, #87	; 0x57
   27f8c:	ldrls	pc, [pc, r7, lsl #2]
   27f90:	b	2acec <__assert_fail@plt+0x18d04>
   27f94:	andeq	r8, r2, r8, lsl fp
   27f98:	andeq	sl, r2, ip, ror #25
   27f9c:	andeq	sl, r2, ip, ror #25
   27fa0:	ldrdeq	r9, [r2], -r0
   27fa4:	muleq	r2, r0, sp
   27fa8:	ldrdeq	r9, [r2], -r0
   27fac:	muleq	r2, r0, r3
   27fb0:	andeq	r9, r2, r0, asr r3
   27fb4:	andeq	r9, r2, r0, lsl r3
   27fb8:	ldrdeq	r9, [r2], -ip
   27fbc:	andeq	r9, r2, r8, lsr #5
   27fc0:	andeq	r9, r2, r4, ror r2
   27fc4:	andeq	sl, r2, ip, ror #25
   27fc8:	andeq	sl, r2, ip, ror #25
   27fcc:	andeq	r9, r2, ip, lsr #4
   27fd0:	strdeq	r9, [r2], -r0
   27fd4:	andeq	r9, r2, r4, lsr #9
   27fd8:	andeq	sl, r2, ip, ror #25
   27fdc:	muleq	r2, ip, r1
   27fe0:	andeq	r9, r2, r8, asr r1
   27fe4:	andeq	r9, r2, r4, lsl r1
   27fe8:	andeq	sl, r2, ip, ror #25
   27fec:	andeq	sl, r2, ip, ror #25
   27ff0:	andeq	r9, r2, r4, asr #32
   27ff4:	andeq	r9, r2, r0, lsr #32
   27ff8:	andeq	r8, r2, ip, ror #31
   27ffc:	andeq	r8, r2, r8, asr #31
   28000:	andeq	r8, r2, r0, lsr #31
   28004:	muleq	r2, ip, r6
   28008:	andeq	r9, r2, ip, lsr r5
   2800c:	andeq	r9, r2, r0, lsr #25
   28010:	ldrdeq	r9, [r2], -ip
   28014:			; <UNDEFINED> instruction: 0x00029bb0
   28018:	andeq	r9, r2, ip, ror fp
   2801c:	andeq	r9, r2, r8, asr #22
   28020:	andeq	r9, r2, r4, ror #24
   28024:	andeq	sl, r2, r8, ror r2
   28028:	andeq	sl, r2, r8, asr #4
   2802c:	ldrdeq	sl, [r2], -r8
   28030:	andeq	sl, r2, r8, lsr #3
   28034:	andeq	sl, r2, r4, lsr r1
   28038:	andeq	sl, r2, r4, lsl #2
   2803c:	ldrdeq	sl, [r2], -r0
   28040:	andeq	sl, r2, r0, lsr #1
   28044:	andeq	sl, r2, r8, asr r0
   28048:	andeq	sl, r2, ip, ror #25
   2804c:	ldrdeq	r9, [r2], -ip
   28050:	andeq	r9, r2, r0, asr #28
   28054:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28058:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2805c:	andeq	r9, r2, r4, lsr r5
   28060:	andeq	r9, r2, r0, ror r4
   28064:	andeq	r9, r2, r0, lsl r4
   28068:	andeq	r8, r2, ip, asr #21
   2806c:	andeq	r8, r2, ip, ror sl
   28070:	andeq	r8, r2, r4, lsl #27
   28074:	andeq	r8, r2, r8, lsl #26
   28078:	andeq	r8, r2, r0, lsl r9
   2807c:			; <UNDEFINED> instruction: 0x000288b0
   28080:	andeq	r8, r2, r0, asr pc
   28084:	andeq	r8, r2, r0, lsl #30
   28088:	andeq	r8, r2, r8, lsl sl
   2808c:			; <UNDEFINED> instruction: 0x000289b0
   28090:	andeq	r8, r2, r0, asr lr
   28094:	andeq	r8, r2, ip, ror #27
   28098:	andeq	r8, r2, r0, lsr #29
   2809c:	andeq	r9, r2, r4, ror #3
   280a0:	andeq	r8, r2, r0, lsl r8
   280a4:	andeq	r8, r2, r0, lsl r8
   280a8:	andeq	r9, r2, r4, lsl #24
   280ac:	andeq	sl, r2, ip, ror #25
   280b0:	andeq	r9, r2, ip, ror #21
   280b4:	muleq	r2, ip, sl
   280b8:	strdeq	r9, [r2], -ip
   280bc:	andeq	r9, r2, ip, lsr #19
   280c0:	andeq	r9, r2, r4, asr #18
   280c4:	andeq	r9, r2, r8, ror #17
   280c8:	andeq	r9, r2, r8, lsl #17
   280cc:	andeq	sl, r2, ip, ror #25
   280d0:	andeq	sl, r2, ip, ror #25
   280d4:	andeq	sl, r2, ip, ror #25
   280d8:	andeq	r9, r2, r0, lsr r8
   280dc:	andeq	sl, r2, ip, ror #25
   280e0:	ldrdeq	r9, [r2], -r8
   280e4:	andeq	r9, r2, r4, lsr #15
   280e8:	andeq	r8, r2, ip, ror #22
   280ec:	andeq	r9, r2, r0, lsr #28
   280f0:	andeq	sl, r2, r4, lsl #5
   280f4:	mov	r3, #0
   280f8:	str	r3, [sp, #16]
   280fc:	b	27d8c <__assert_fail@plt+0x15da4>
   28100:	mvn	r3, #1
   28104:	str	r3, [sp, #16]
   28108:	b	27eb8 <__assert_fail@plt+0x15ed0>
   2810c:	ldr	r0, [sp, #40]	; 0x28
   28110:	ldr	r2, [r0]
   28114:	ldrb	r3, [r2]
   28118:	cmp	r3, #9
   2811c:	bcc	28144 <__assert_fail@plt+0x1615c>
   28120:	cmp	r3, #13
   28124:	bls	28130 <__assert_fail@plt+0x16148>
   28128:	cmp	r3, #32
   2812c:	bne	28144 <__assert_fail@plt+0x1615c>
   28130:	add	r2, r2, #1
   28134:	str	r2, [r0]
   28138:	ldrb	r3, [r2]
   2813c:	cmp	r3, #9
   28140:	bcs	28120 <__assert_fail@plt+0x16138>
   28144:	sub	ip, r3, #48	; 0x30
   28148:	sub	r1, r3, #43	; 0x2b
   2814c:	cmp	ip, #9
   28150:	and	r1, r1, #253	; 0xfd
   28154:	bls	281cc <__assert_fail@plt+0x161e4>
   28158:	cmp	r1, #0
   2815c:	beq	283c0 <__assert_fail@plt+0x163d8>
   28160:	cmp	r3, #65	; 0x41
   28164:	bcc	2817c <__assert_fail@plt+0x16194>
   28168:	cmp	r3, #90	; 0x5a
   2816c:	bls	28458 <__assert_fail@plt+0x16470>
   28170:	sub	r1, r3, #97	; 0x61
   28174:	cmp	r1, #25
   28178:	bls	28458 <__assert_fail@plt+0x16470>
   2817c:	cmp	r3, #40	; 0x28
   28180:	bne	2a9e0 <__assert_fail@plt+0x189f8>
   28184:	mov	ip, #0
   28188:	b	28190 <__assert_fail@plt+0x161a8>
   2818c:	mov	r2, r1
   28190:	add	r1, r2, #1
   28194:	str	r1, [r0]
   28198:	ldrb	r3, [r1, #-1]
   2819c:	cmp	r3, #0
   281a0:	beq	280f8 <__assert_fail@plt+0x16110>
   281a4:	cmp	r3, #40	; 0x28
   281a8:	addeq	ip, ip, #1
   281ac:	beq	281b8 <__assert_fail@plt+0x161d0>
   281b0:	cmp	r3, #41	; 0x29
   281b4:	subeq	ip, ip, #1
   281b8:	cmp	ip, #0
   281bc:	bne	2818c <__assert_fail@plt+0x161a4>
   281c0:	ldrb	r3, [r2, #1]
   281c4:	mov	r2, r1
   281c8:	b	28118 <__assert_fail@plt+0x16130>
   281cc:	cmp	r1, #0
   281d0:	sub	lr, r3, #45	; 0x2d
   281d4:	clz	lr, lr
   281d8:	lsr	lr, lr, #5
   281dc:	bne	2a428 <__assert_fail@plt+0x18440>
   281e0:	cmp	lr, #0
   281e4:	moveq	r8, #1
   281e8:	mvnne	r8, #0
   281ec:	add	r2, r2, #1
   281f0:	str	r2, [r0]
   281f4:	ldrb	r3, [r2]
   281f8:	cmp	r3, #9
   281fc:	bcc	28210 <__assert_fail@plt+0x16228>
   28200:	cmp	r3, #13
   28204:	bls	281ec <__assert_fail@plt+0x16204>
   28208:	cmp	r3, #32
   2820c:	beq	281ec <__assert_fail@plt+0x16204>
   28210:	sub	ip, r3, #48	; 0x30
   28214:	cmp	ip, #9
   28218:	bhi	28118 <__assert_fail@plt+0x16130>
   2821c:	mov	r0, #0
   28220:	mov	r1, #0
   28224:	mov	r4, r2
   28228:	strd	r0, [sp, #16]
   2822c:	str	sl, [sp, #44]	; 0x2c
   28230:	str	r2, [sp, #32]
   28234:	str	fp, [sp, #56]	; 0x38
   28238:	cmn	r8, #1
   2823c:	rsbeq	ip, r3, #48	; 0x30
   28240:	ldrd	r2, [sp, #16]
   28244:	asr	r1, ip, #31
   28248:	adds	sl, r2, ip
   2824c:	adcs	fp, r3, r1
   28250:	movvs	lr, #1
   28254:	movvc	lr, #0
   28258:	bvs	2a3a8 <__assert_fail@plt+0x183c0>
   2825c:	ldrb	r3, [r4, #1]
   28260:	add	r1, r4, #1
   28264:	str	r1, [sp, #24]
   28268:	sub	ip, r3, #48	; 0x30
   2826c:	cmp	ip, #9
   28270:	bls	28394 <__assert_fail@plt+0x163ac>
   28274:	and	r3, r3, #253	; 0xfd
   28278:	cmp	r3, #44	; 0x2c
   2827c:	ldr	r2, [sp, #32]
   28280:	strd	sl, [sp, #32]
   28284:	ldr	sl, [sp, #44]	; 0x2c
   28288:	ldr	fp, [sp, #56]	; 0x38
   2828c:	bne	28410 <__assert_fail@plt+0x16428>
   28290:	ldrb	r3, [r4, #2]
   28294:	sub	ip, r3, #48	; 0x30
   28298:	cmp	ip, #9
   2829c:	bhi	28410 <__assert_fail@plt+0x16428>
   282a0:	ldrd	r2, [sp, #32]
   282a4:	adds	r1, r2, #-2147483648	; 0x80000000
   282a8:	adc	r3, r3, #0
   282ac:	str	r3, [sp, #116]	; 0x74
   282b0:	str	r1, [sp, #112]	; 0x70
   282b4:	ldrd	r0, [sp, #112]	; 0x70
   282b8:	mov	r3, #0
   282bc:	mvn	r2, #0
   282c0:	cmp	r1, r3
   282c4:	cmpeq	r0, r2
   282c8:	bhi	2a358 <__assert_fail@plt+0x18370>
   282cc:	ldrb	r0, [r4, #3]
   282d0:	mov	r3, ip
   282d4:	add	r4, r4, #3
   282d8:	sub	r2, r0, #48	; 0x30
   282dc:	mov	r1, #8
   282e0:	cmp	r2, #9
   282e4:	add	r3, r3, r3, lsl #2
   282e8:	ldrbls	r0, [r4, #1]
   282ec:	lsl	r3, r3, #1
   282f0:	mov	ip, r2
   282f4:	addls	r3, r3, r2
   282f8:	subls	r2, r0, #48	; 0x30
   282fc:	addls	r4, r4, #1
   28300:	movls	ip, r2
   28304:	subs	r1, r1, #1
   28308:	bne	282e0 <__assert_fail@plt+0x162f8>
   2830c:	cmn	r8, #1
   28310:	beq	28878 <__assert_fail@plt+0x16890>
   28314:	cmp	ip, #9
   28318:	bhi	2832c <__assert_fail@plt+0x16344>
   2831c:	ldrb	r2, [r4, #1]!
   28320:	sub	r2, r2, #48	; 0x30
   28324:	cmp	r2, #9
   28328:	bls	2831c <__assert_fail@plt+0x16334>
   2832c:	adds	r2, r3, #0
   28330:	movne	r2, #1
   28334:	ands	r2, r2, r8, lsr #31
   28338:	bne	2a370 <__assert_fail@plt+0x18388>
   2833c:	str	r3, [sp, #252]	; 0xfc
   28340:	ldr	r3, [sp, #40]	; 0x28
   28344:	cmp	r8, #0
   28348:	ldr	r2, [pc, #2428]	; 28ccc <__assert_fail@plt+0x16ce4>
   2834c:	ldr	r1, [sp, #32]
   28350:	movne	r2, #276	; 0x114
   28354:	str	r4, [r3]
   28358:	str	r1, [sp, #248]	; 0xf8
   2835c:	moveq	r3, #22
   28360:	movne	r3, #21
   28364:	str	r2, [sp, #16]
   28368:	b	2838c <__assert_fail@plt+0x163a4>
   2836c:	ldr	r3, [pc, #2396]	; 28cd0 <__assert_fail@plt+0x16ce8>
   28370:	mov	r2, #0
   28374:	str	r3, [sp, #16]
   28378:	mov	r3, #0
   2837c:	strd	r2, [sp, #248]	; 0xf8
   28380:	ldr	r3, [sp, #16]
   28384:	add	r3, fp, r3
   28388:	ldrb	r3, [r3, #1980]	; 0x7bc
   2838c:	add	r4, r5, r3
   28390:	b	27d8c <__assert_fail@plt+0x15da4>
   28394:	cmp	fp, sl, asr #31
   28398:	bne	28678 <__assert_fail@plt+0x16690>
   2839c:	mov	r2, #10
   283a0:	smull	sl, fp, sl, r2
   283a4:	mov	r0, sl
   283a8:	mov	r1, fp
   283ac:	cmp	lr, #0
   283b0:	strd	r0, [sp, #16]
   283b4:	bne	2a3a8 <__assert_fail@plt+0x183c0>
   283b8:	ldr	r4, [sp, #24]
   283bc:	b	28238 <__assert_fail@plt+0x16250>
   283c0:	sub	lr, r3, #45	; 0x2d
   283c4:	clz	lr, lr
   283c8:	lsr	lr, lr, #5
   283cc:	b	281e0 <__assert_fail@plt+0x161f8>
   283d0:	ldr	r3, [sp, #100]	; 0x64
   283d4:	add	lr, sp, #248	; 0xf8
   283d8:	str	r3, [sp, #264]	; 0x108
   283dc:	ldr	r3, [sp, #104]	; 0x68
   283e0:	add	r9, r9, #56	; 0x38
   283e4:	str	r3, [sp, #256]	; 0x100
   283e8:	ldr	r3, [sp, #108]	; 0x6c
   283ec:	mov	ip, r9
   283f0:	str	r3, [sp, #260]	; 0x104
   283f4:	ldm	lr!, {r0, r1, r2, r3}
   283f8:	mov	r4, #3
   283fc:	str	sl, [sp, #24]
   28400:	str	r4, [sp, #96]	; 0x60
   28404:	stmia	ip!, {r0, r1, r2, r3}
   28408:	ldm	lr!, {r0, r1, r2, r3}
   2840c:	b	27e00 <__assert_fail@plt+0x15e18>
   28410:	lsr	r0, r8, #31
   28414:	strb	r0, [sp, #248]	; 0xf8
   28418:	ldr	r0, [sp, #24]
   2841c:	ldr	r1, [pc, #2224]	; 28cd4 <__assert_fail@plt+0x16cec>
   28420:	sub	r2, r0, r2
   28424:	str	r2, [sp, #100]	; 0x64
   28428:	ldr	r2, [sp, #40]	; 0x28
   2842c:	cmp	r8, #0
   28430:	ldr	r3, [pc, #2208]	; 28cd8 <__assert_fail@plt+0x16cf0>
   28434:	str	r0, [r2]
   28438:	movne	r3, r1
   2843c:	ldrd	r0, [sp, #32]
   28440:	str	r3, [sp, #16]
   28444:	movne	r3, #19
   28448:	moveq	r3, #20
   2844c:	str	r0, [sp, #104]	; 0x68
   28450:	str	r1, [sp, #108]	; 0x6c
   28454:	b	2838c <__assert_fail@plt+0x163a4>
   28458:	add	ip, sp, #1536	; 0x600
   2845c:	add	ip, ip, #3
   28460:	add	r1, sp, #1520	; 0x5f0
   28464:	str	r1, [sp, #16]
   28468:	cmp	r1, ip
   2846c:	strbcc	r3, [r1], #1
   28470:	ldr	r3, [sp, #40]	; 0x28
   28474:	add	r2, r2, #1
   28478:	str	r2, [r3]
   2847c:	ldrb	r3, [r2]
   28480:	cmp	r3, #65	; 0x41
   28484:	bcc	2849c <__assert_fail@plt+0x164b4>
   28488:	cmp	r3, #90	; 0x5a
   2848c:	bls	28468 <__assert_fail@plt+0x16480>
   28490:	sub	r0, r3, #97	; 0x61
   28494:	cmp	r0, #25
   28498:	bls	28468 <__assert_fail@plt+0x16480>
   2849c:	cmp	r3, #46	; 0x2e
   284a0:	beq	28468 <__assert_fail@plt+0x16480>
   284a4:	mov	r3, #0
   284a8:	strb	r3, [r1]
   284ac:	ldrb	r3, [sp, #1520]	; 0x5f0
   284b0:	cmp	r3, #0
   284b4:	ldrne	r2, [sp, #16]
   284b8:	beq	284dc <__assert_fail@plt+0x164f4>
   284bc:	sub	r1, r3, #97	; 0x61
   284c0:	cmp	r1, #25
   284c4:	subls	r3, r3, #32
   284c8:	uxtbls	r3, r3
   284cc:	strb	r3, [r2]
   284d0:	ldrb	r3, [r2, #1]!
   284d4:	cmp	r3, #0
   284d8:	bne	284bc <__assert_fail@plt+0x164d4>
   284dc:	ldr	r8, [pc, #2040]	; 28cdc <__assert_fail@plt+0x16cf4>
   284e0:	str	r4, [sp, #24]
   284e4:	ldr	r1, [pc, #2036]	; 28ce0 <__assert_fail@plt+0x16cf8>
   284e8:	mov	r4, r8
   284ec:	ldr	r8, [sp, #16]
   284f0:	b	28500 <__assert_fail@plt+0x16518>
   284f4:	ldr	r1, [r4, #12]!
   284f8:	cmp	r1, #0
   284fc:	beq	2a2b4 <__assert_fail@plt+0x182cc>
   28500:	mov	r0, r8
   28504:	bl	11a48 <strcmp@plt>
   28508:	cmp	r0, #0
   2850c:	bne	284f4 <__assert_fail@plt+0x1650c>
   28510:	mov	r8, r4
   28514:	ldr	r4, [sp, #24]
   28518:	ldr	r2, [r8, #8]
   2851c:	ldr	r3, [r8, #4]
   28520:	str	r3, [sp, #16]
   28524:	asr	r3, r2, #31
   28528:	strd	r2, [sp, #248]	; 0xf8
   2852c:	b	27d6c <__assert_fail@plt+0x15d84>
   28530:	add	lr, r9, #56	; 0x38
   28534:	add	r8, sp, #312	; 0x138
   28538:	ldm	lr!, {r0, r1, r2, r3}
   2853c:	sub	ip, r8, #8
   28540:	ldr	r4, [r9, #64]	; 0x40
   28544:	str	ip, [sp, #84]	; 0x54
   28548:	stmia	ip!, {r0, r1, r2, r3}
   2854c:	ldm	lr!, {r0, r1, r2, r3}
   28550:	str	r4, [sp, #56]	; 0x38
   28554:	ldr	r4, [r9, #68]	; 0x44
   28558:	stmia	ip!, {r0, r1, r2, r3}
   2855c:	str	r4, [sp, #48]	; 0x30
   28560:	ldm	lr!, {r0, r1, r2, r3}
   28564:	ldr	r4, [r9, #72]	; 0x48
   28568:	str	sl, [sp, #24]
   2856c:	str	r4, [sp, #60]	; 0x3c
   28570:	ldr	r4, [r9, #76]	; 0x4c
   28574:	str	r9, [sp, #88]	; 0x58
   28578:	str	r4, [sp, #64]	; 0x40
   2857c:	stmia	ip!, {r0, r1, r2, r3}
   28580:	mvn	sl, #27
   28584:	ldr	r3, [r9, #80]	; 0x50
   28588:	ldm	lr, {r0, r1}
   2858c:	str	r3, [sp, #76]	; 0x4c
   28590:	ldr	r3, [r9, #84]	; 0x54
   28594:	stm	ip, {r0, r1}
   28598:	str	r3, [sp, #80]	; 0x50
   2859c:	ldr	r3, [r9, #88]	; 0x58
   285a0:	str	r3, [sp, #68]	; 0x44
   285a4:	ldr	r3, [r9, #92]	; 0x5c
   285a8:	str	r3, [sp, #72]	; 0x48
   285ac:	ldrd	r2, [r9, #96]	; 0x60
   285b0:	strd	r2, [sp, #32]
   285b4:	ldr	r3, [r9, #104]	; 0x68
   285b8:	str	r3, [sp, #44]	; 0x2c
   285bc:	ldr	r3, [sp, #56]	; 0x38
   285c0:	ldr	ip, [sp, #84]	; 0x54
   285c4:	str	r3, [r8]
   285c8:	ldr	r3, [sp, #48]	; 0x30
   285cc:	ldr	lr, [sp, #88]	; 0x58
   285d0:	str	r3, [r8, #4]
   285d4:	ldr	r3, [sp, #60]	; 0x3c
   285d8:	add	r9, lr, #56	; 0x38
   285dc:	str	r3, [r8, #8]
   285e0:	ldr	r3, [sp, #64]	; 0x40
   285e4:	mov	lr, r9
   285e8:	str	r3, [r8, #12]
   285ec:	ldr	r3, [sp, #76]	; 0x4c
   285f0:	str	r3, [r8, #16]
   285f4:	ldr	r3, [sp, #80]	; 0x50
   285f8:	str	r3, [r8, #20]
   285fc:	ldr	r3, [sp, #68]	; 0x44
   28600:	str	r3, [r8, #24]
   28604:	ldr	r3, [sp, #72]	; 0x48
   28608:	str	r3, [r8, #28]
   2860c:	ldrd	r2, [sp, #32]
   28610:	strd	r2, [r8, #32]
   28614:	ldr	r3, [sp, #44]	; 0x2c
   28618:	str	r3, [sp, #352]	; 0x160
   2861c:	ldm	ip!, {r0, r1, r2, r3}
   28620:	stmia	lr!, {r0, r1, r2, r3}
   28624:	ldm	ip!, {r0, r1, r2, r3}
   28628:	stmia	lr!, {r0, r1, r2, r3}
   2862c:	ldm	ip!, {r0, r1, r2, r3}
   28630:	stmia	lr!, {r0, r1, r2, r3}
   28634:	ldr	r3, [sp, #24]
   28638:	ldm	ip, {r0, r1}
   2863c:	ldrsh	r3, [r3]
   28640:	stm	lr, {r0, r1}
   28644:	add	r7, r3, r7
   28648:	cmp	r7, #112	; 0x70
   2864c:	bhi	28668 <__assert_fail@plt+0x16680>
   28650:	add	r7, fp, r7
   28654:	add	r2, r7, #2256	; 0x8d0
   28658:	ldrsb	r2, [r2, #4]
   2865c:	cmp	r2, r3
   28660:	ldrbeq	r7, [r7, #2376]	; 0x948
   28664:	beq	27e14 <__assert_fail@plt+0x15e2c>
   28668:	add	sl, fp, sl
   2866c:	add	sl, sl, #2816	; 0xb00
   28670:	ldrsb	r7, [sl, #4]
   28674:	b	27e14 <__assert_fail@plt+0x15e2c>
   28678:	mov	r2, #10
   2867c:	cmp	fp, #0
   28680:	umull	r0, r1, sl, r2
   28684:	strd	r0, [sp, #48]	; 0x30
   28688:	umull	r0, r1, r2, fp
   2868c:	strd	r0, [sp, #16]
   28690:	bge	286b0 <__assert_fail@plt+0x166c8>
   28694:	ldr	r2, [sp, #16]
   28698:	mov	r1, #10
   2869c:	subs	r2, r2, lr
   286a0:	str	r2, [sp, #16]
   286a4:	ldr	r2, [sp, #20]
   286a8:	sbc	r2, r2, r1
   286ac:	str	r2, [sp, #20]
   286b0:	ldr	r2, [sp, #16]
   286b4:	ldr	r1, [sp, #52]	; 0x34
   286b8:	mov	r0, #0
   286bc:	adds	r1, r2, r1
   286c0:	ldr	r2, [sp, #20]
   286c4:	adc	r0, r2, r0
   286c8:	cmp	r0, r1, asr #31
   286cc:	bne	2ade4 <__assert_fail@plt+0x18dfc>
   286d0:	ldr	r0, [sp, #48]	; 0x30
   286d4:	b	283ac <__assert_fail@plt+0x163c4>
   286d8:	ldr	lr, [sp, #40]	; 0x28
   286dc:	ldrd	r4, [r9, #40]	; 0x28
   286e0:	ldr	r1, [r9, #48]	; 0x30
   286e4:	ldrd	r2, [lr, #136]	; 0x88
   286e8:	ldr	r0, [lr, #144]	; 0x90
   286ec:	mov	ip, lr
   286f0:	strd	r2, [sp, #24]
   286f4:	ldrd	r2, [lr, #128]	; 0x80
   286f8:	adds	r1, r0, r1
   286fc:	movvs	ip, #1
   28700:	strd	r2, [sp, #88]	; 0x58
   28704:	ldrd	r2, [lr, #120]	; 0x78
   28708:	movvc	ip, #0
   2870c:	str	r1, [lr, #144]	; 0x90
   28710:	strd	r2, [sp, #144]	; 0x90
   28714:	ldrd	r2, [sp, #24]
   28718:	adds	r0, r2, r4
   2871c:	adcs	r1, r3, r5
   28720:	ldrd	r4, [sp, #88]	; 0x58
   28724:	strd	r0, [lr, #136]	; 0x88
   28728:	ldrd	r0, [r9, #32]
   2872c:	movvs	r7, #1
   28730:	movvc	r7, #0
   28734:	adds	r2, r4, r0
   28738:	adcs	r3, r5, r1
   2873c:	ldrd	r0, [lr, #112]	; 0x70
   28740:	ldrd	r4, [sp, #144]	; 0x90
   28744:	orr	r7, ip, r7
   28748:	strd	r0, [sp, #24]
   2874c:	ldrd	r0, [r9, #24]
   28750:	mov	ip, lr
   28754:	strd	r2, [lr, #128]	; 0x80
   28758:	movvs	lr, #1
   2875c:	movvc	lr, #0
   28760:	adds	r2, r4, r0
   28764:	adcs	r3, r5, r1
   28768:	ldrd	r4, [ip, #104]	; 0x68
   2876c:	ldrd	r0, [sp, #24]
   28770:	orr	lr, r7, lr
   28774:	strd	r4, [sp, #88]	; 0x58
   28778:	ldrd	r4, [r9, #16]
   2877c:	movvs	r7, #1
   28780:	movvc	r7, #0
   28784:	strd	r2, [ip, #120]	; 0x78
   28788:	adds	r2, r0, r4
   2878c:	adcs	r3, r1, r5
   28790:	ldrd	r4, [sp, #88]	; 0x58
   28794:	ldrd	r0, [r9, #8]
   28798:	orr	lr, lr, r7
   2879c:	strd	r2, [ip, #112]	; 0x70
   287a0:	movvs	r7, #1
   287a4:	movvc	r7, #0
   287a8:	adds	r2, r4, r0
   287ac:	adcs	r3, r5, r1
   287b0:	ldrd	r0, [r9]
   287b4:	ldrd	r4, [ip, #96]	; 0x60
   287b8:	orr	lr, lr, r7
   287bc:	strd	r2, [sp, #24]
   287c0:	movvs	r7, #1
   287c4:	movvc	r7, #0
   287c8:	adds	r4, r4, r0
   287cc:	adcs	r5, r5, r1
   287d0:	ldrd	r2, [sp, #24]
   287d4:	orrvc	r1, lr, r7
   287d8:	movvs	r1, #1
   287dc:	cmp	r1, #0
   287e0:	strd	r2, [ip, #104]	; 0x68
   287e4:	strd	r4, [ip, #96]	; 0x60
   287e8:	bne	27e78 <__assert_fail@plt+0x15e90>
   287ec:	sub	r2, r9, #56	; 0x38
   287f0:	mov	r3, #1
   287f4:	str	r2, [sp, #88]	; 0x58
   287f8:	sub	r2, sl, #2
   287fc:	str	r2, [sp, #24]
   28800:	strb	r3, [ip, #153]	; 0x99
   28804:	mvn	r7, #92	; 0x5c
   28808:	mov	sl, #16
   2880c:	b	285bc <__assert_fail@plt+0x165d4>
   28810:	mov	r2, #56	; 0x38
   28814:	mov	r1, #0
   28818:	ldr	r0, [sp, #84]	; 0x54
   2881c:	bl	11df0 <memset@plt>
   28820:	ldr	r3, [r9, #-56]	; 0xffffffc8
   28824:	sub	r1, sl, #4
   28828:	mov	r0, r3
   2882c:	str	r1, [sp, #24]
   28830:	asr	r1, r3, #31
   28834:	ldr	r3, [r9, #-52]	; 0xffffffcc
   28838:	mov	r2, #0
   2883c:	str	r3, [sp, #44]	; 0x2c
   28840:	sub	r3, r9, #112	; 0x70
   28844:	str	r2, [sp, #68]	; 0x44
   28848:	str	r2, [sp, #72]	; 0x48
   2884c:	strd	r0, [sp, #32]
   28850:	str	r2, [sp, #76]	; 0x4c
   28854:	str	r2, [sp, #60]	; 0x3c
   28858:	str	r2, [sp, #56]	; 0x38
   2885c:	str	r2, [sp, #80]	; 0x50
   28860:	str	r2, [sp, #64]	; 0x40
   28864:	str	r2, [sp, #48]	; 0x30
   28868:	str	r3, [sp, #88]	; 0x58
   2886c:	mvn	r7, #92	; 0x5c
   28870:	mov	sl, #17
   28874:	b	285bc <__assert_fail@plt+0x165d4>
   28878:	cmp	r2, #9
   2887c:	bhi	2a368 <__assert_fail@plt+0x18380>
   28880:	cmp	r0, #48	; 0x30
   28884:	bne	288a0 <__assert_fail@plt+0x168b8>
   28888:	ldrb	r2, [r4, #1]!
   2888c:	sub	r1, r2, #48	; 0x30
   28890:	cmp	r1, #9
   28894:	bhi	2a368 <__assert_fail@plt+0x18380>
   28898:	cmp	r2, #48	; 0x30
   2889c:	beq	28888 <__assert_fail@plt+0x168a0>
   288a0:	ldrb	ip, [r4]
   288a4:	add	r3, r3, #1
   288a8:	sub	ip, ip, #48	; 0x30
   288ac:	b	28314 <__assert_fail@plt+0x1632c>
   288b0:	mov	r2, #56	; 0x38
   288b4:	mov	r1, #0
   288b8:	ldr	r0, [sp, #84]	; 0x54
   288bc:	bl	11df0 <memset@plt>
   288c0:	mov	r1, r9
   288c4:	mov	r0, #0
   288c8:	ldrd	r2, [r1], #-56	; 0xffffffc8
   288cc:	sub	ip, sl, #2
   288d0:	str	ip, [sp, #24]
   288d4:	str	r1, [sp, #88]	; 0x58
   288d8:	mov	r1, #0
   288dc:	strd	r2, [sp, #60]	; 0x3c
   288e0:	mov	r3, #0
   288e4:	strd	r0, [sp, #32]
   288e8:	str	r0, [sp, #68]	; 0x44
   288ec:	str	r1, [sp, #72]	; 0x48
   288f0:	str	r0, [sp, #76]	; 0x4c
   288f4:	str	r1, [sp, #80]	; 0x50
   288f8:	str	r0, [sp, #56]	; 0x38
   288fc:	str	r1, [sp, #48]	; 0x30
   28900:	mvn	r7, #92	; 0x5c
   28904:	mov	sl, #17
   28908:	str	r3, [sp, #44]	; 0x2c
   2890c:	b	285bc <__assert_fail@plt+0x165d4>
   28910:	mov	r2, #56	; 0x38
   28914:	mov	r1, #0
   28918:	ldr	r0, [sp, #84]	; 0x54
   2891c:	bl	11df0 <memset@plt>
   28920:	ldr	r0, [r9, #-48]	; 0xffffffd0
   28924:	ldr	r2, [r9, #-44]	; 0xffffffd4
   28928:	ldr	r3, [r9]
   2892c:	mov	r1, #0
   28930:	cmp	r2, r0, asr #31
   28934:	str	r1, [sp, #32]
   28938:	ldr	ip, [r9, #4]
   2893c:	asr	r1, r3, #31
   28940:	bne	2a9a0 <__assert_fail@plt+0x189b8>
   28944:	cmp	r1, ip
   28948:	bne	2a930 <__assert_fail@plt+0x18948>
   2894c:	smull	r2, r3, r0, r3
   28950:	strd	r2, [sp, #128]	; 0x80
   28954:	ldrd	r0, [sp, #128]	; 0x80
   28958:	ldr	r3, [sp, #32]
   2895c:	cmp	r3, #0
   28960:	str	r0, [sp, #60]	; 0x3c
   28964:	str	r1, [sp, #64]	; 0x40
   28968:	bne	27e78 <__assert_fail@plt+0x15e90>
   2896c:	sub	r2, r9, #112	; 0x70
   28970:	mov	r0, #0
   28974:	mov	r1, #0
   28978:	str	r2, [sp, #88]	; 0x58
   2897c:	sub	r2, sl, #4
   28980:	strd	r0, [sp, #32]
   28984:	str	r2, [sp, #24]
   28988:	str	r3, [sp, #44]	; 0x2c
   2898c:	str	r0, [sp, #68]	; 0x44
   28990:	str	r1, [sp, #72]	; 0x48
   28994:	str	r0, [sp, #76]	; 0x4c
   28998:	str	r1, [sp, #80]	; 0x50
   2899c:	str	r0, [sp, #56]	; 0x38
   289a0:	str	r1, [sp, #48]	; 0x30
   289a4:	mvn	r7, #92	; 0x5c
   289a8:	mov	sl, #17
   289ac:	b	285bc <__assert_fail@plt+0x165d4>
   289b0:	mov	r4, #0
   289b4:	mov	r5, #0
   289b8:	sub	r3, sl, #4
   289bc:	mov	r2, #56	; 0x38
   289c0:	mov	r1, #0
   289c4:	ldr	r0, [sp, #84]	; 0x54
   289c8:	str	r3, [sp, #24]
   289cc:	strd	r4, [sp, #32]
   289d0:	bl	11df0 <memset@plt>
   289d4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   289d8:	str	r4, [sp, #76]	; 0x4c
   289dc:	str	r3, [sp, #68]	; 0x44
   289e0:	ldr	r3, [r9, #-52]	; 0xffffffcc
   289e4:	str	r5, [sp, #80]	; 0x50
   289e8:	str	r4, [sp, #60]	; 0x3c
   289ec:	str	r5, [sp, #64]	; 0x40
   289f0:	str	r4, [sp, #56]	; 0x38
   289f4:	str	r5, [sp, #48]	; 0x30
   289f8:	str	r3, [sp, #72]	; 0x48
   289fc:	sub	r3, r9, #112	; 0x70
   28a00:	str	r3, [sp, #88]	; 0x58
   28a04:	mov	r3, #0
   28a08:	mvn	r7, #92	; 0x5c
   28a0c:	mov	sl, #17
   28a10:	str	r3, [sp, #44]	; 0x2c
   28a14:	b	285bc <__assert_fail@plt+0x165d4>
   28a18:	mov	r4, #0
   28a1c:	mov	r5, #0
   28a20:	sub	r3, r9, #56	; 0x38
   28a24:	str	r3, [sp, #88]	; 0x58
   28a28:	mov	r2, #56	; 0x38
   28a2c:	sub	r3, sl, #2
   28a30:	mov	r1, #0
   28a34:	ldr	r0, [sp, #84]	; 0x54
   28a38:	strd	r4, [sp, #32]
   28a3c:	str	r3, [sp, #24]
   28a40:	bl	11df0 <memset@plt>
   28a44:	str	r4, [sp, #68]	; 0x44
   28a48:	str	r5, [sp, #72]	; 0x48
   28a4c:	str	r4, [sp, #60]	; 0x3c
   28a50:	str	r5, [sp, #64]	; 0x40
   28a54:	str	r4, [sp, #56]	; 0x38
   28a58:	str	r5, [sp, #48]	; 0x30
   28a5c:	mov	r4, #1
   28a60:	mov	r5, #0
   28a64:	mov	r3, #0
   28a68:	mvn	r7, #92	; 0x5c
   28a6c:	mov	sl, #17
   28a70:	str	r3, [sp, #44]	; 0x2c
   28a74:	strd	r4, [sp, #76]	; 0x4c
   28a78:	b	285bc <__assert_fail@plt+0x165d4>
   28a7c:	mov	r4, #0
   28a80:	mov	r5, #0
   28a84:	sub	r3, sl, #4
   28a88:	mov	r2, #56	; 0x38
   28a8c:	mov	r1, #0
   28a90:	ldr	r0, [sp, #84]	; 0x54
   28a94:	str	r3, [sp, #24]
   28a98:	strd	r4, [sp, #32]
   28a9c:	bl	11df0 <memset@plt>
   28aa0:	ldr	r3, [r9, #-48]	; 0xffffffd0
   28aa4:	str	r4, [sp, #68]	; 0x44
   28aa8:	str	r3, [sp, #56]	; 0x38
   28aac:	ldr	r3, [r9, #-44]	; 0xffffffd4
   28ab0:	str	r5, [sp, #72]	; 0x48
   28ab4:	str	r4, [sp, #76]	; 0x4c
   28ab8:	str	r5, [sp, #80]	; 0x50
   28abc:	str	r4, [sp, #60]	; 0x3c
   28ac0:	str	r5, [sp, #64]	; 0x40
   28ac4:	str	r3, [sp, #48]	; 0x30
   28ac8:	b	289fc <__assert_fail@plt+0x16a14>
   28acc:	mov	r4, #0
   28ad0:	mov	r5, #0
   28ad4:	sub	r3, sl, #4
   28ad8:	mov	r2, #56	; 0x38
   28adc:	mov	r1, #0
   28ae0:	ldr	r0, [sp, #84]	; 0x54
   28ae4:	str	r3, [sp, #24]
   28ae8:	strd	r4, [sp, #32]
   28aec:	bl	11df0 <memset@plt>
   28af0:	ldr	r3, [r9, #-56]	; 0xffffffc8
   28af4:	str	r4, [sp, #68]	; 0x44
   28af8:	str	r3, [sp, #56]	; 0x38
   28afc:	str	r5, [sp, #72]	; 0x48
   28b00:	str	r4, [sp, #76]	; 0x4c
   28b04:	str	r5, [sp, #80]	; 0x50
   28b08:	str	r4, [sp, #60]	; 0x3c
   28b0c:	str	r5, [sp, #64]	; 0x40
   28b10:	ldr	r3, [r9, #-52]	; 0xffffffcc
   28b14:	b	28ac4 <__assert_fail@plt+0x16adc>
   28b18:	ldr	ip, [sp, #40]	; 0x28
   28b1c:	ldm	r9, {r0, r1}
   28b20:	sub	lr, sl, #4
   28b24:	ldrb	r2, [ip, #181]	; 0xb5
   28b28:	add	r3, ip, #88	; 0x58
   28b2c:	str	lr, [sp, #24]
   28b30:	cmp	r2, #0
   28b34:	sub	lr, r9, #112	; 0x70
   28b38:	mov	r2, #1
   28b3c:	stm	r3, {r0, r1}
   28b40:	str	lr, [sp, #88]	; 0x58
   28b44:	strb	r2, [ip, #152]	; 0x98
   28b48:	mvneq	r7, #92	; 0x5c
   28b4c:	moveq	sl, #2
   28b50:	beq	285bc <__assert_fail@plt+0x165d4>
   28b54:	mov	r1, ip
   28b58:	ldr	r0, [pc, #388]	; 28ce4 <__assert_fail@plt+0x16cfc>
   28b5c:	bl	27940 <__assert_fail@plt+0x15958>
   28b60:	mvn	r7, #92	; 0x5c
   28b64:	mov	sl, #2
   28b68:	b	285bc <__assert_fail@plt+0x165d4>
   28b6c:	sub	r3, r9, #48	; 0x30
   28b70:	ldr	r4, [sp, #40]	; 0x28
   28b74:	ldm	r3, {r0, r1, r2, r3}
   28b78:	sub	ip, r9, #56	; 0x38
   28b7c:	stm	sp, {r0, r1, r2, r3}
   28b80:	mov	r0, r4
   28b84:	ldm	ip, {r2, r3}
   28b88:	bl	27078 <__assert_fail@plt+0x15090>
   28b8c:	mov	lr, r4
   28b90:	ldr	r0, [r4, #144]	; 0x90
   28b94:	ldrd	r2, [lr, #136]	; 0x88
   28b98:	mov	ip, r4
   28b9c:	ldr	r1, [r9, #48]	; 0x30
   28ba0:	strd	r2, [sp, #24]
   28ba4:	ldrd	r2, [lr, #128]	; 0x80
   28ba8:	ldrd	r4, [r9, #40]	; 0x28
   28bac:	adds	r1, r0, r1
   28bb0:	strd	r2, [sp, #88]	; 0x58
   28bb4:	ldrd	r2, [lr, #120]	; 0x78
   28bb8:	movvs	ip, #1
   28bbc:	movvc	ip, #0
   28bc0:	strd	r2, [sp, #144]	; 0x90
   28bc4:	ldrd	r2, [sp, #24]
   28bc8:	str	r1, [lr, #144]	; 0x90
   28bcc:	adds	r0, r2, r4
   28bd0:	adcs	r1, r3, r5
   28bd4:	ldrd	r4, [sp, #88]	; 0x58
   28bd8:	strd	r0, [lr, #136]	; 0x88
   28bdc:	ldrd	r0, [r9, #32]
   28be0:	movvs	r7, #1
   28be4:	movvc	r7, #0
   28be8:	adds	r2, r4, r0
   28bec:	adcs	r3, r5, r1
   28bf0:	ldrd	r0, [lr, #112]	; 0x70
   28bf4:	ldrd	r4, [sp, #144]	; 0x90
   28bf8:	orr	r7, ip, r7
   28bfc:	strd	r0, [sp, #24]
   28c00:	ldrd	r0, [r9, #24]
   28c04:	mov	ip, lr
   28c08:	strd	r2, [lr, #128]	; 0x80
   28c0c:	movvs	lr, #1
   28c10:	movvc	lr, #0
   28c14:	adds	r2, r4, r0
   28c18:	adcs	r3, r5, r1
   28c1c:	ldrd	r4, [ip, #104]	; 0x68
   28c20:	ldrd	r0, [sp, #24]
   28c24:	orr	lr, r7, lr
   28c28:	strd	r4, [sp, #88]	; 0x58
   28c2c:	ldrd	r4, [r9, #16]
   28c30:	movvs	r7, #1
   28c34:	movvc	r7, #0
   28c38:	strd	r2, [ip, #120]	; 0x78
   28c3c:	adds	r2, r0, r4
   28c40:	adcs	r3, r1, r5
   28c44:	ldrd	r4, [sp, #88]	; 0x58
   28c48:	ldrd	r0, [r9, #8]
   28c4c:	orr	lr, lr, r7
   28c50:	strd	r2, [ip, #112]	; 0x70
   28c54:	movvs	r7, #1
   28c58:	movvc	r7, #0
   28c5c:	adds	r2, r4, r0
   28c60:	adcs	r3, r5, r1
   28c64:	ldrd	r0, [r9]
   28c68:	ldrd	r4, [ip, #96]	; 0x60
   28c6c:	orr	lr, lr, r7
   28c70:	strd	r2, [sp, #24]
   28c74:	movvs	r7, #1
   28c78:	movvc	r7, #0
   28c7c:	adds	r4, r4, r0
   28c80:	adcs	r5, r5, r1
   28c84:	ldrd	r2, [sp, #24]
   28c88:	orrvc	r1, lr, r7
   28c8c:	movvs	r1, #1
   28c90:	cmp	r1, #0
   28c94:	strd	r2, [ip, #104]	; 0x68
   28c98:	strd	r4, [ip, #96]	; 0x60
   28c9c:	bne	27e78 <__assert_fail@plt+0x15e90>
   28ca0:	sub	r2, r9, #112	; 0x70
   28ca4:	mov	r3, #1
   28ca8:	str	r2, [sp, #88]	; 0x58
   28cac:	sub	r2, sl, #4
   28cb0:	str	r2, [sp, #24]
   28cb4:	strb	r3, [ip, #153]	; 0x99
   28cb8:	mvn	r7, #92	; 0x5c
   28cbc:	mov	sl, #24
   28cc0:	b	285bc <__assert_fail@plt+0x165d4>
   28cc4:	andeq	r7, r4, r8, lsl #30
   28cc8:	andeq	r5, r3, ip, lsl #7
   28ccc:	andeq	r0, r0, r5, lsl r1
   28cd0:	andeq	r0, r0, r3, lsl #2
   28cd4:	andeq	r0, r0, r2, lsl r1
   28cd8:	andeq	r0, r0, r3, lsl r1
   28cdc:	andeq	r5, r3, r8, lsr #14
   28ce0:	andeq	r6, r3, ip
   28ce4:	andeq	r6, r3, ip, asr #32
   28ce8:	muleq	r3, r8, r0
   28cec:	muleq	r3, r0, r0
   28cf0:	andeq	r6, r3, r0, lsl #1
   28cf4:	andeq	r6, r3, r8, ror r0
   28cf8:	andeq	r6, r3, ip, ror #3
   28cfc:	andeq	r6, r3, ip, rrx
   28d00:	andeq	r6, r0, r0, ror r2
   28d04:	andeq	r6, r3, r4, lsl #1
   28d08:	mov	r2, #56	; 0x38
   28d0c:	mov	r1, #0
   28d10:	ldr	r0, [sp, #84]	; 0x54
   28d14:	bl	11df0 <memset@plt>
   28d18:	ldr	r4, [r9, #-56]	; 0xffffffc8
   28d1c:	ldr	r7, [r9, #-52]	; 0xffffffcc
   28d20:	ldr	r3, [r9]
   28d24:	mov	r2, #0
   28d28:	cmp	r7, r4, asr #31
   28d2c:	str	r2, [sp, #44]	; 0x2c
   28d30:	ldr	ip, [r9, #4]
   28d34:	asr	r2, r3, #31
   28d38:	bne	2a9c0 <__assert_fail@plt+0x189d8>
   28d3c:	cmp	r2, ip
   28d40:	bne	2a824 <__assert_fail@plt+0x1883c>
   28d44:	smull	r2, r3, r4, r3
   28d48:	strd	r2, [sp, #120]	; 0x78
   28d4c:	ldrd	r0, [sp, #120]	; 0x78
   28d50:	ldr	r3, [sp, #44]	; 0x2c
   28d54:	cmp	r3, #0
   28d58:	str	r0, [sp, #60]	; 0x3c
   28d5c:	str	r1, [sp, #64]	; 0x40
   28d60:	bne	27e78 <__assert_fail@plt+0x15e90>
   28d64:	sub	r2, r9, #112	; 0x70
   28d68:	mov	r0, #0
   28d6c:	mov	r1, #0
   28d70:	str	r2, [sp, #88]	; 0x58
   28d74:	sub	r2, sl, #4
   28d78:	strd	r0, [sp, #32]
   28d7c:	str	r2, [sp, #24]
   28d80:	b	2898c <__assert_fail@plt+0x169a4>
   28d84:	mov	r4, #0
   28d88:	mov	r5, #0
   28d8c:	sub	r3, r9, #56	; 0x38
   28d90:	str	r3, [sp, #88]	; 0x58
   28d94:	mov	r2, #56	; 0x38
   28d98:	sub	r3, sl, #2
   28d9c:	mov	r1, #0
   28da0:	ldr	r0, [sp, #84]	; 0x54
   28da4:	str	r3, [sp, #24]
   28da8:	strd	r4, [sp, #32]
   28dac:	bl	11df0 <memset@plt>
   28db0:	mov	r3, #0
   28db4:	str	r3, [sp, #44]	; 0x2c
   28db8:	mov	r3, #1
   28dbc:	str	r3, [sp, #56]	; 0x38
   28dc0:	mov	r3, #0
   28dc4:	str	r4, [sp, #68]	; 0x44
   28dc8:	str	r5, [sp, #72]	; 0x48
   28dcc:	str	r4, [sp, #76]	; 0x4c
   28dd0:	str	r5, [sp, #80]	; 0x50
   28dd4:	str	r4, [sp, #60]	; 0x3c
   28dd8:	str	r5, [sp, #64]	; 0x40
   28ddc:	mvn	r7, #92	; 0x5c
   28de0:	mov	sl, #17
   28de4:	str	r3, [sp, #48]	; 0x30
   28de8:	b	285bc <__assert_fail@plt+0x165d4>
   28dec:	mov	r4, #0
   28df0:	mov	r5, #0
   28df4:	sub	r3, r9, #56	; 0x38
   28df8:	str	r3, [sp, #88]	; 0x58
   28dfc:	mov	r2, #56	; 0x38
   28e00:	sub	r3, sl, #2
   28e04:	mov	r1, #0
   28e08:	ldr	r0, [sp, #84]	; 0x54
   28e0c:	strd	r4, [sp, #32]
   28e10:	str	r3, [sp, #24]
   28e14:	bl	11df0 <memset@plt>
   28e18:	str	r4, [sp, #76]	; 0x4c
   28e1c:	str	r5, [sp, #80]	; 0x50
   28e20:	str	r4, [sp, #60]	; 0x3c
   28e24:	str	r5, [sp, #64]	; 0x40
   28e28:	str	r4, [sp, #56]	; 0x38
   28e2c:	str	r5, [sp, #48]	; 0x30
   28e30:	mov	r4, #1
   28e34:	mov	r5, #0
   28e38:	mov	r3, #0
   28e3c:	mvn	r7, #92	; 0x5c
   28e40:	mov	sl, #17
   28e44:	str	r3, [sp, #44]	; 0x2c
   28e48:	strd	r4, [sp, #68]	; 0x44
   28e4c:	b	285bc <__assert_fail@plt+0x165d4>
   28e50:	mov	r4, #0
   28e54:	mov	r5, #0
   28e58:	sub	r3, sl, #4
   28e5c:	mov	r2, #56	; 0x38
   28e60:	mov	r1, #0
   28e64:	ldr	r0, [sp, #84]	; 0x54
   28e68:	str	r3, [sp, #24]
   28e6c:	strd	r4, [sp, #32]
   28e70:	bl	11df0 <memset@plt>
   28e74:	ldr	r3, [r9, #-48]	; 0xffffffd0
   28e78:	str	r4, [sp, #76]	; 0x4c
   28e7c:	str	r3, [sp, #68]	; 0x44
   28e80:	ldr	r3, [r9, #-44]	; 0xffffffd4
   28e84:	str	r5, [sp, #80]	; 0x50
   28e88:	str	r4, [sp, #60]	; 0x3c
   28e8c:	str	r5, [sp, #64]	; 0x40
   28e90:	str	r4, [sp, #56]	; 0x38
   28e94:	str	r5, [sp, #48]	; 0x30
   28e98:	str	r3, [sp, #72]	; 0x48
   28e9c:	b	289fc <__assert_fail@plt+0x16a14>
   28ea0:	mov	r1, #0
   28ea4:	sub	r3, sl, #4
   28ea8:	mov	r2, #56	; 0x38
   28eac:	ldr	r0, [sp, #84]	; 0x54
   28eb0:	mov	r4, r1
   28eb4:	str	r3, [sp, #24]
   28eb8:	str	r1, [sp, #68]	; 0x44
   28ebc:	mov	r5, r1
   28ec0:	str	r1, [sp, #72]	; 0x48
   28ec4:	bl	11df0 <memset@plt>
   28ec8:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   28ecc:	str	r4, [sp, #76]	; 0x4c
   28ed0:	str	r4, [sp, #60]	; 0x3c
   28ed4:	str	r4, [sp, #56]	; 0x38
   28ed8:	str	r4, [sp, #80]	; 0x50
   28edc:	str	r4, [sp, #64]	; 0x40
   28ee0:	str	r4, [sp, #48]	; 0x30
   28ee4:	strd	r2, [sp, #32]
   28ee8:	sub	r3, r9, #112	; 0x70
   28eec:	str	r3, [sp, #88]	; 0x58
   28ef0:	mvn	r7, #92	; 0x5c
   28ef4:	mov	sl, #17
   28ef8:	str	r5, [sp, #44]	; 0x2c
   28efc:	b	285bc <__assert_fail@plt+0x165d4>
   28f00:	mov	r4, #0
   28f04:	mov	r5, #0
   28f08:	sub	r3, sl, #4
   28f0c:	mov	r2, #56	; 0x38
   28f10:	mov	r1, #0
   28f14:	ldr	r0, [sp, #84]	; 0x54
   28f18:	str	r3, [sp, #24]
   28f1c:	strd	r4, [sp, #32]
   28f20:	bl	11df0 <memset@plt>
   28f24:	ldr	r3, [r9, #-48]	; 0xffffffd0
   28f28:	str	r4, [sp, #68]	; 0x44
   28f2c:	str	r3, [sp, #76]	; 0x4c
   28f30:	ldr	r3, [r9, #-44]	; 0xffffffd4
   28f34:	str	r5, [sp, #72]	; 0x48
   28f38:	str	r4, [sp, #60]	; 0x3c
   28f3c:	str	r5, [sp, #64]	; 0x40
   28f40:	str	r4, [sp, #56]	; 0x38
   28f44:	str	r5, [sp, #48]	; 0x30
   28f48:	str	r3, [sp, #80]	; 0x50
   28f4c:	b	289fc <__assert_fail@plt+0x16a14>
   28f50:	mov	r4, #0
   28f54:	mov	r5, #0
   28f58:	sub	r3, sl, #4
   28f5c:	mov	r2, #56	; 0x38
   28f60:	mov	r1, #0
   28f64:	ldr	r0, [sp, #84]	; 0x54
   28f68:	str	r3, [sp, #24]
   28f6c:	strd	r4, [sp, #32]
   28f70:	bl	11df0 <memset@plt>
   28f74:	ldr	r3, [r9, #-56]	; 0xffffffc8
   28f78:	str	r4, [sp, #68]	; 0x44
   28f7c:	str	r3, [sp, #76]	; 0x4c
   28f80:	ldr	r3, [r9, #-52]	; 0xffffffcc
   28f84:	str	r5, [sp, #72]	; 0x48
   28f88:	str	r4, [sp, #60]	; 0x3c
   28f8c:	str	r5, [sp, #64]	; 0x40
   28f90:	str	r4, [sp, #56]	; 0x38
   28f94:	str	r5, [sp, #48]	; 0x30
   28f98:	str	r3, [sp, #80]	; 0x50
   28f9c:	b	289fc <__assert_fail@plt+0x16a14>
   28fa0:	sub	r2, r9, #56	; 0x38
   28fa4:	str	r2, [sp, #88]	; 0x58
   28fa8:	sub	r2, sl, #2
   28fac:	str	r2, [sp, #24]
   28fb0:	ldr	r2, [sp, #40]	; 0x28
   28fb4:	ldr	r3, [pc, #-700]	; 28d00 <__assert_fail@plt+0x16d18>
   28fb8:	mvn	r7, #92	; 0x5c
   28fbc:	str	r3, [r2, #24]
   28fc0:	mov	sl, #12
   28fc4:	b	285bc <__assert_fail@plt+0x165d4>
   28fc8:	sub	r3, sl, #2
   28fcc:	ldr	r2, [sp, #40]	; 0x28
   28fd0:	str	r3, [sp, #24]
   28fd4:	ldr	r3, [r9], #-56	; 0xffffffc8
   28fd8:	mvn	r7, #92	; 0x5c
   28fdc:	str	r9, [sp, #88]	; 0x58
   28fe0:	str	r3, [r2, #24]
   28fe4:	mov	sl, #12
   28fe8:	b	285bc <__assert_fail@plt+0x165d4>
   28fec:	ldr	r1, [sp, #40]	; 0x28
   28ff0:	mov	r2, #1
   28ff4:	sub	r0, r9, #112	; 0x70
   28ff8:	ldr	r3, [r1, #168]	; 0xa8
   28ffc:	str	r0, [sp, #88]	; 0x58
   29000:	add	r3, r3, r2
   29004:	sub	r0, sl, #4
   29008:	str	r0, [sp, #24]
   2900c:	str	r3, [r1, #168]	; 0xa8
   29010:	str	r2, [r1, #20]
   29014:	mvn	r7, #92	; 0x5c
   29018:	mov	sl, #11
   2901c:	b	285bc <__assert_fail@plt+0x165d4>
   29020:	sub	r3, sl, #2
   29024:	ldr	r2, [sp, #40]	; 0x28
   29028:	str	r3, [sp, #24]
   2902c:	ldr	r3, [r9], #-56	; 0xffffffc8
   29030:	mvn	r7, #92	; 0x5c
   29034:	str	r9, [sp, #88]	; 0x58
   29038:	str	r3, [r2, #20]
   2903c:	mov	sl, #11
   29040:	b	285bc <__assert_fail@plt+0x165d4>
   29044:	ldr	r1, [sp, #40]	; 0x28
   29048:	ldr	r2, [r9, #-40]	; 0xffffffd8
   2904c:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   29050:	ldr	r3, [r1, #176]	; 0xb0
   29054:	cmp	r2, #2
   29058:	add	r3, r3, #1
   2905c:	str	r3, [r1, #176]	; 0xb0
   29060:	ldrd	r2, [r9]
   29064:	strd	r2, [sp, #88]	; 0x58
   29068:	bgt	2a490 <__assert_fail@plt+0x184a8>
   2906c:	cmp	r2, #0
   29070:	sbcs	r3, r3, #0
   29074:	blt	2a770 <__assert_fail@plt+0x18788>
   29078:	cmp	r5, r4, asr #31
   2907c:	mov	lr, #0
   29080:	bne	2ab48 <__assert_fail@plt+0x18b60>
   29084:	mov	r3, #60	; 0x3c
   29088:	smull	r4, r5, r4, r3
   2908c:	mov	r2, r4
   29090:	mov	r3, r5
   29094:	ldrb	ip, [r9, #-56]	; 0xffffffc8
   29098:	mov	r1, r3
   2909c:	ldrd	r4, [sp, #88]	; 0x58
   290a0:	cmp	ip, #0
   290a4:	beq	2a73c <__assert_fail@plt+0x18754>
   290a8:	subs	r2, r2, r4
   290ac:	sbcs	r3, r3, r5
   290b0:	mov	r1, #0
   290b4:	mov	r0, r2
   290b8:	movvs	r1, #1
   290bc:	mov	r5, r3
   290c0:	orrs	r3, lr, r1
   290c4:	bne	27e78 <__assert_fail@plt+0x15e90>
   290c8:	adds	r3, r0, #1440	; 0x5a0
   290cc:	str	r3, [sp, #216]	; 0xd8
   290d0:	adc	r3, r5, #0
   290d4:	str	r3, [sp, #220]	; 0xdc
   290d8:	ldrd	r2, [sp, #216]	; 0xd8
   290dc:	cmp	r3, #0
   290e0:	cmpeq	r2, #2880	; 0xb40
   290e4:	bhi	27e78 <__assert_fail@plt+0x15e90>
   290e8:	rsb	r2, r0, r0, lsl #4
   290ec:	sub	r3, r9, #112	; 0x70
   290f0:	str	r3, [sp, #88]	; 0x58
   290f4:	lsl	r3, r2, #2
   290f8:	ldr	r2, [sp, #40]	; 0x28
   290fc:	mvn	r7, #26
   29100:	str	r3, [r2, #24]
   29104:	sub	r3, sl, #4
   29108:	str	r3, [sp, #24]
   2910c:	mov	sl, #10
   29110:	b	285bc <__assert_fail@plt+0x165d4>
   29114:	sub	ip, sl, #12
   29118:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   2911c:	str	ip, [sp, #24]
   29120:	ldr	ip, [sp, #40]	; 0x28
   29124:	sub	r3, r9, #272	; 0x110
   29128:	mov	r7, #20
   2912c:	ldrd	r2, [r3]
   29130:	strd	r0, [ip, #88]	; 0x58
   29134:	ldrd	r0, [r9, #-160]	; 0xffffff60
   29138:	strd	r2, [ip, #72]	; 0x48
   2913c:	mov	r3, #2
   29140:	strd	r0, [ip, #80]	; 0x50
   29144:	sub	r1, r9, #336	; 0x150
   29148:	str	r1, [sp, #88]	; 0x58
   2914c:	str	r3, [ip, #28]
   29150:	mov	sl, #8
   29154:	b	285bc <__assert_fail@plt+0x165d4>
   29158:	sub	ip, sl, #8
   2915c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   29160:	ldrd	r0, [r9, #-160]	; 0xffffff60
   29164:	str	ip, [sp, #24]
   29168:	ldr	ip, [sp, #40]	; 0x28
   2916c:	mov	r7, #20
   29170:	mov	sl, #8
   29174:	strd	r2, [ip, #80]	; 0x50
   29178:	strd	r0, [ip, #72]	; 0x48
   2917c:	mov	r3, #0
   29180:	mov	r2, #2
   29184:	sub	r1, r9, #224	; 0xe0
   29188:	str	r1, [sp, #88]	; 0x58
   2918c:	str	r3, [ip, #88]	; 0x58
   29190:	str	r3, [ip, #92]	; 0x5c
   29194:	str	r2, [ip, #28]
   29198:	b	285bc <__assert_fail@plt+0x165d4>
   2919c:	ldr	r0, [sp, #40]	; 0x28
   291a0:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   291a4:	mov	r4, #0
   291a8:	mov	r5, #0
   291ac:	mov	r1, #0
   291b0:	sub	ip, sl, #4
   291b4:	strd	r2, [r0, #72]	; 0x48
   291b8:	mov	r3, #2
   291bc:	sub	r2, r9, #112	; 0x70
   291c0:	strd	r4, [r0, #80]	; 0x50
   291c4:	str	ip, [sp, #24]
   291c8:	str	r2, [sp, #88]	; 0x58
   291cc:	str	r1, [r0, #88]	; 0x58
   291d0:	str	r1, [r0, #92]	; 0x5c
   291d4:	str	r3, [r0, #28]
   291d8:	mov	r7, #20
   291dc:	mov	sl, #8
   291e0:	b	285bc <__assert_fail@plt+0x165d4>
   291e4:	mov	r1, #0
   291e8:	mov	r4, r1
   291ec:	sub	r3, sl, #4
   291f0:	mov	r2, #56	; 0x38
   291f4:	ldr	r0, [sp, #84]	; 0x54
   291f8:	str	r3, [sp, #24]
   291fc:	str	r1, [sp, #68]	; 0x44
   29200:	mov	r5, r1
   29204:	str	r1, [sp, #72]	; 0x48
   29208:	bl	11df0 <memset@plt>
   2920c:	str	r4, [sp, #76]	; 0x4c
   29210:	str	r4, [sp, #60]	; 0x3c
   29214:	str	r4, [sp, #56]	; 0x38
   29218:	str	r4, [sp, #80]	; 0x50
   2921c:	str	r4, [sp, #64]	; 0x40
   29220:	str	r4, [sp, #48]	; 0x30
   29224:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   29228:	b	28ee4 <__assert_fail@plt+0x16efc>
   2922c:	mov	r3, r9
   29230:	ldr	r0, [sp, #40]	; 0x28
   29234:	ldr	r1, [r3], #-112	; 0xffffff90
   29238:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   2923c:	str	r3, [sp, #88]	; 0x58
   29240:	mov	r2, #0
   29244:	mov	r3, #0
   29248:	str	r1, [r0, #28]
   2924c:	strd	r2, [r0, #80]	; 0x50
   29250:	mov	r1, #0
   29254:	sub	r3, sl, #4
   29258:	str	r3, [sp, #24]
   2925c:	strd	r4, [r0, #72]	; 0x48
   29260:	str	r1, [r0, #88]	; 0x58
   29264:	str	r1, [r0, #92]	; 0x5c
   29268:	mvn	r7, #92	; 0x5c
   2926c:	mov	sl, #7
   29270:	b	285bc <__assert_fail@plt+0x165d4>
   29274:	ldr	r1, [sp, #40]	; 0x28
   29278:	sub	r2, r9, #56	; 0x38
   2927c:	str	r2, [sp, #88]	; 0x58
   29280:	ldrb	r3, [r1, #181]	; 0xb5
   29284:	sub	r2, sl, #2
   29288:	str	r2, [sp, #24]
   2928c:	cmp	r3, #0
   29290:	beq	2a2a8 <__assert_fail@plt+0x182c0>
   29294:	ldr	r0, [pc, #-1460]	; 28ce8 <__assert_fail@plt+0x16d00>
   29298:	bl	275d4 <__assert_fail@plt+0x155ec>
   2929c:	mvn	r7, #92	; 0x5c
   292a0:	mov	sl, #4
   292a4:	b	285bc <__assert_fail@plt+0x165d4>
   292a8:	ldr	r1, [sp, #40]	; 0x28
   292ac:	sub	r2, r9, #56	; 0x38
   292b0:	str	r2, [sp, #88]	; 0x58
   292b4:	ldrb	r3, [r1, #181]	; 0xb5
   292b8:	sub	r2, sl, #2
   292bc:	str	r2, [sp, #24]
   292c0:	cmp	r3, #0
   292c4:	beq	2a2a8 <__assert_fail@plt+0x182c0>
   292c8:	ldr	r0, [pc, #-1508]	; 28cec <__assert_fail@plt+0x16d04>
   292cc:	bl	27940 <__assert_fail@plt+0x15958>
   292d0:	mvn	r7, #92	; 0x5c
   292d4:	mov	sl, #4
   292d8:	b	285bc <__assert_fail@plt+0x165d4>
   292dc:	ldr	r1, [sp, #40]	; 0x28
   292e0:	sub	r2, r9, #56	; 0x38
   292e4:	str	r2, [sp, #88]	; 0x58
   292e8:	ldrb	r3, [r1, #181]	; 0xb5
   292ec:	sub	r2, sl, #2
   292f0:	str	r2, [sp, #24]
   292f4:	cmp	r3, #0
   292f8:	beq	2a2a8 <__assert_fail@plt+0x182c0>
   292fc:	ldr	r0, [pc, #-1536]	; 28d04 <__assert_fail@plt+0x16d1c>
   29300:	bl	275d4 <__assert_fail@plt+0x155ec>
   29304:	mvn	r7, #92	; 0x5c
   29308:	mov	sl, #4
   2930c:	b	285bc <__assert_fail@plt+0x165d4>
   29310:	ldr	r1, [sp, #40]	; 0x28
   29314:	sub	r0, r9, #56	; 0x38
   29318:	str	r0, [sp, #88]	; 0x58
   2931c:	ldrb	r2, [r1, #181]	; 0xb5
   29320:	ldr	r3, [r1, #160]	; 0xa0
   29324:	cmp	r2, #0
   29328:	add	r3, r3, #1
   2932c:	sub	r2, sl, #2
   29330:	str	r2, [sp, #24]
   29334:	str	r3, [r1, #160]	; 0xa0
   29338:	beq	2a2a8 <__assert_fail@plt+0x182c0>
   2933c:	ldr	r0, [pc, #-1620]	; 28cf0 <__assert_fail@plt+0x16d08>
   29340:	bl	27940 <__assert_fail@plt+0x15958>
   29344:	mvn	r7, #92	; 0x5c
   29348:	mov	sl, #4
   2934c:	b	285bc <__assert_fail@plt+0x165d4>
   29350:	ldr	r1, [sp, #40]	; 0x28
   29354:	sub	r0, r9, #56	; 0x38
   29358:	str	r0, [sp, #88]	; 0x58
   2935c:	ldrb	r2, [r1, #181]	; 0xb5
   29360:	ldr	r3, [r1, #156]	; 0x9c
   29364:	cmp	r2, #0
   29368:	add	r3, r3, #1
   2936c:	sub	r2, sl, #2
   29370:	str	r2, [sp, #24]
   29374:	str	r3, [r1, #156]	; 0x9c
   29378:	beq	2a2a8 <__assert_fail@plt+0x182c0>
   2937c:	ldr	r0, [pc, #-1680]	; 28cf4 <__assert_fail@plt+0x16d0c>
   29380:	bl	27940 <__assert_fail@plt+0x15958>
   29384:	mvn	r7, #92	; 0x5c
   29388:	mov	sl, #4
   2938c:	b	285bc <__assert_fail@plt+0x165d4>
   29390:	ldr	r1, [sp, #40]	; 0x28
   29394:	sub	r0, r9, #56	; 0x38
   29398:	str	r0, [sp, #88]	; 0x58
   2939c:	ldrb	r2, [r1, #181]	; 0xb5
   293a0:	ldr	r3, [r1, #176]	; 0xb0
   293a4:	cmp	r2, #0
   293a8:	add	r3, r3, #1
   293ac:	sub	r2, sl, #2
   293b0:	str	r2, [sp, #24]
   293b4:	str	r3, [r1, #176]	; 0xb0
   293b8:	beq	2a2a8 <__assert_fail@plt+0x182c0>
   293bc:	ldr	r0, [pc, #-1740]	; 28cf8 <__assert_fail@plt+0x16d10>
   293c0:	bl	27940 <__assert_fail@plt+0x15958>
   293c4:	mvn	r7, #92	; 0x5c
   293c8:	mov	sl, #4
   293cc:	b	285bc <__assert_fail@plt+0x165d4>
   293d0:	ldr	r1, [sp, #40]	; 0x28
   293d4:	sub	r0, r9, #56	; 0x38
   293d8:	str	r0, [sp, #88]	; 0x58
   293dc:	ldrb	r2, [r1, #181]	; 0xb5
   293e0:	ldr	r3, [r1, #164]	; 0xa4
   293e4:	cmp	r2, #0
   293e8:	add	r3, r3, #1
   293ec:	sub	r2, sl, #2
   293f0:	str	r2, [sp, #24]
   293f4:	str	r3, [r1, #164]	; 0xa4
   293f8:	beq	2a2a8 <__assert_fail@plt+0x182c0>
   293fc:	ldr	r0, [pc, #-1800]	; 28cfc <__assert_fail@plt+0x16d14>
   29400:	bl	27940 <__assert_fail@plt+0x15958>
   29404:	mvn	r7, #92	; 0x5c
   29408:	mov	sl, #4
   2940c:	b	285bc <__assert_fail@plt+0x165d4>
   29410:	sub	r2, r9, #56	; 0x38
   29414:	mov	r0, #1
   29418:	mov	r1, #0
   2941c:	mov	r4, #0
   29420:	mov	r5, #0
   29424:	mov	r3, #0
   29428:	str	r2, [sp, #88]	; 0x58
   2942c:	sub	r2, sl, #2
   29430:	strd	r4, [sp, #32]
   29434:	str	r2, [sp, #24]
   29438:	strd	r0, [r8, #-8]
   2943c:	str	r3, [sp, #356]	; 0x164
   29440:	str	r3, [sp, #44]	; 0x2c
   29444:	str	r4, [sp, #68]	; 0x44
   29448:	str	r5, [sp, #72]	; 0x48
   2944c:	str	r4, [sp, #76]	; 0x4c
   29450:	str	r5, [sp, #80]	; 0x50
   29454:	str	r4, [sp, #60]	; 0x3c
   29458:	str	r5, [sp, #64]	; 0x40
   2945c:	str	r4, [sp, #56]	; 0x38
   29460:	str	r5, [sp, #48]	; 0x30
   29464:	mvn	r7, #92	; 0x5c
   29468:	mov	sl, #17
   2946c:	b	285bc <__assert_fail@plt+0x165d4>
   29470:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   29474:	mov	r4, #0
   29478:	mov	r5, #0
   2947c:	mov	r1, #0
   29480:	sub	r0, sl, #4
   29484:	strd	r2, [r8, #-8]
   29488:	sub	r3, r9, #112	; 0x70
   2948c:	strd	r4, [sp, #32]
   29490:	str	r0, [sp, #24]
   29494:	str	r3, [sp, #88]	; 0x58
   29498:	str	r1, [sp, #356]	; 0x164
   2949c:	str	r1, [sp, #44]	; 0x2c
   294a0:	b	29444 <__assert_fail@plt+0x1745c>
   294a4:	sub	r3, r9, #272	; 0x110
   294a8:	mov	lr, r9
   294ac:	ldrd	r4, [r3]
   294b0:	ldrd	r2, [r9, #-160]	; 0xffffff60
   294b4:	ldr	ip, [sp, #40]	; 0x28
   294b8:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   294bc:	strd	r2, [sp, #144]	; 0x90
   294c0:	sub	r3, sl, #12
   294c4:	str	r3, [sp, #24]
   294c8:	ldr	r3, [lr], #-336	; 0xfffffeb0
   294cc:	strd	r4, [ip, #72]	; 0x48
   294d0:	str	r3, [ip, #28]
   294d4:	ldrd	r2, [sp, #144]	; 0x90
   294d8:	str	lr, [sp, #88]	; 0x58
   294dc:	strd	r0, [ip, #88]	; 0x58
   294e0:	strd	r2, [ip, #80]	; 0x50
   294e4:	mvn	r7, #92	; 0x5c
   294e8:	mov	sl, #7
   294ec:	b	285bc <__assert_fail@plt+0x165d4>
   294f0:	mov	r1, r9
   294f4:	sub	lr, sl, #8
   294f8:	ldr	ip, [r1], #-224	; 0xffffff20
   294fc:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   29500:	str	lr, [sp, #24]
   29504:	ldr	lr, [sp, #40]	; 0x28
   29508:	str	r1, [sp, #88]	; 0x58
   2950c:	ldrd	r0, [r9, #-160]	; 0xffffff60
   29510:	strd	r2, [lr, #80]	; 0x50
   29514:	mov	r3, #0
   29518:	str	ip, [lr, #28]
   2951c:	strd	r0, [lr, #72]	; 0x48
   29520:	str	r3, [lr, #88]	; 0x58
   29524:	str	r3, [lr, #92]	; 0x5c
   29528:	mvn	r7, #92	; 0x5c
   2952c:	mov	sl, #7
   29530:	b	285bc <__assert_fail@plt+0x165d4>
   29534:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   29538:	b	29474 <__assert_fail@plt+0x1748c>
   2953c:	ldr	lr, [sp, #40]	; 0x28
   29540:	ldrd	r4, [r9, #40]	; 0x28
   29544:	ldr	r1, [r9, #48]	; 0x30
   29548:	ldrd	r2, [lr, #136]	; 0x88
   2954c:	ldr	r0, [lr, #144]	; 0x90
   29550:	mov	ip, lr
   29554:	strd	r2, [sp, #24]
   29558:	ldrd	r2, [lr, #128]	; 0x80
   2955c:	adds	r1, r0, r1
   29560:	movvs	ip, #1
   29564:	strd	r2, [sp, #88]	; 0x58
   29568:	ldrd	r2, [lr, #120]	; 0x78
   2956c:	movvc	ip, #0
   29570:	str	r1, [lr, #144]	; 0x90
   29574:	strd	r2, [sp, #144]	; 0x90
   29578:	ldrd	r2, [sp, #24]
   2957c:	adds	r0, r2, r4
   29580:	adcs	r1, r3, r5
   29584:	ldrd	r4, [sp, #88]	; 0x58
   29588:	strd	r0, [lr, #136]	; 0x88
   2958c:	ldrd	r0, [r9, #32]
   29590:	movvs	r7, #1
   29594:	movvc	r7, #0
   29598:	adds	r2, r4, r0
   2959c:	adcs	r3, r5, r1
   295a0:	ldrd	r0, [lr, #112]	; 0x70
   295a4:	ldrd	r4, [sp, #144]	; 0x90
   295a8:	orr	r7, ip, r7
   295ac:	strd	r0, [sp, #24]
   295b0:	ldrd	r0, [r9, #24]
   295b4:	mov	ip, lr
   295b8:	strd	r2, [lr, #128]	; 0x80
   295bc:	movvs	lr, #1
   295c0:	movvc	lr, #0
   295c4:	adds	r2, r4, r0
   295c8:	adcs	r3, r5, r1
   295cc:	ldrd	r4, [ip, #104]	; 0x68
   295d0:	ldrd	r0, [sp, #24]
   295d4:	orr	lr, r7, lr
   295d8:	strd	r4, [sp, #88]	; 0x58
   295dc:	ldrd	r4, [r9, #16]
   295e0:	movvs	r7, #1
   295e4:	movvc	r7, #0
   295e8:	strd	r2, [ip, #120]	; 0x78
   295ec:	adds	r2, r0, r4
   295f0:	adcs	r3, r1, r5
   295f4:	ldrd	r4, [sp, #88]	; 0x58
   295f8:	ldrd	r0, [r9, #8]
   295fc:	orr	lr, lr, r7
   29600:	strd	r2, [ip, #112]	; 0x70
   29604:	movvs	r7, #1
   29608:	movvc	r7, #0
   2960c:	adds	r2, r4, r0
   29610:	adcs	r3, r5, r1
   29614:	ldrd	r0, [r9]
   29618:	ldrd	r4, [ip, #96]	; 0x60
   2961c:	orr	lr, lr, r7
   29620:	movvs	r7, #1
   29624:	movvc	r7, #0
   29628:	adds	r4, r4, r0
   2962c:	adcs	r5, r5, r1
   29630:	ldr	r0, [pc, #-2360]	; 28d00 <__assert_fail@plt+0x16d18>
   29634:	orrvc	r1, lr, r7
   29638:	movvs	r1, #1
   2963c:	strd	r2, [sp, #24]
   29640:	ldrd	r2, [sp, #24]
   29644:	cmp	r1, #0
   29648:	strd	r4, [ip, #96]	; 0x60
   2964c:	strd	r2, [ip, #104]	; 0x68
   29650:	str	r0, [ip, #24]
   29654:	bne	27e78 <__assert_fail@plt+0x15e90>
   29658:	ldrb	r2, [ip, #181]	; 0xb5
   2965c:	sub	r1, sl, #4
   29660:	mov	r3, #1
   29664:	cmp	r2, #0
   29668:	sub	r2, r9, #112	; 0x70
   2966c:	str	r1, [sp, #24]
   29670:	str	r2, [sp, #88]	; 0x58
   29674:	strb	r3, [ip, #153]	; 0x99
   29678:	mvneq	r7, #92	; 0x5c
   2967c:	moveq	sl, #12
   29680:	beq	285bc <__assert_fail@plt+0x165d4>
   29684:	mov	r1, ip
   29688:	ldr	r0, [pc, #-2444]	; 28d04 <__assert_fail@plt+0x16d1c>
   2968c:	bl	275d4 <__assert_fail@plt+0x155ec>
   29690:	mvn	r7, #92	; 0x5c
   29694:	mov	sl, #12
   29698:	b	285bc <__assert_fail@plt+0x165d4>
   2969c:	ldr	lr, [sp, #40]	; 0x28
   296a0:	ldrd	r4, [r9, #40]	; 0x28
   296a4:	ldr	r1, [r9, #48]	; 0x30
   296a8:	ldrd	r2, [lr, #136]	; 0x88
   296ac:	ldr	r0, [lr, #144]	; 0x90
   296b0:	mov	ip, lr
   296b4:	strd	r2, [sp, #24]
   296b8:	ldrd	r2, [lr, #128]	; 0x80
   296bc:	adds	r1, r0, r1
   296c0:	movvs	ip, #1
   296c4:	strd	r2, [sp, #88]	; 0x58
   296c8:	ldrd	r2, [lr, #120]	; 0x78
   296cc:	movvc	ip, #0
   296d0:	str	r1, [lr, #144]	; 0x90
   296d4:	strd	r2, [sp, #144]	; 0x90
   296d8:	ldrd	r2, [sp, #24]
   296dc:	adds	r0, r2, r4
   296e0:	adcs	r1, r3, r5
   296e4:	ldrd	r4, [sp, #88]	; 0x58
   296e8:	strd	r0, [lr, #136]	; 0x88
   296ec:	ldrd	r0, [r9, #32]
   296f0:	movvs	r7, #1
   296f4:	movvc	r7, #0
   296f8:	adds	r2, r4, r0
   296fc:	adcs	r3, r5, r1
   29700:	ldrd	r0, [lr, #112]	; 0x70
   29704:	ldrd	r4, [sp, #144]	; 0x90
   29708:	orr	r7, ip, r7
   2970c:	strd	r0, [sp, #24]
   29710:	ldrd	r0, [r9, #24]
   29714:	mov	ip, lr
   29718:	strd	r2, [lr, #128]	; 0x80
   2971c:	movvs	lr, #1
   29720:	movvc	lr, #0
   29724:	adds	r2, r4, r0
   29728:	adcs	r3, r5, r1
   2972c:	ldrd	r4, [ip, #104]	; 0x68
   29730:	ldrd	r0, [sp, #24]
   29734:	orr	lr, r7, lr
   29738:	strd	r4, [sp, #88]	; 0x58
   2973c:	ldrd	r4, [r9, #16]
   29740:	movvs	r7, #1
   29744:	movvc	r7, #0
   29748:	strd	r2, [ip, #120]	; 0x78
   2974c:	adds	r2, r0, r4
   29750:	adcs	r3, r1, r5
   29754:	ldrd	r4, [sp, #88]	; 0x58
   29758:	ldrd	r0, [r9, #8]
   2975c:	orr	lr, lr, r7
   29760:	strd	r2, [ip, #112]	; 0x70
   29764:	movvs	r7, #1
   29768:	movvc	r7, #0
   2976c:	adds	r2, r4, r0
   29770:	adcs	r3, r5, r1
   29774:	ldrd	r0, [r9]
   29778:	ldrd	r4, [ip, #96]	; 0x60
   2977c:	orr	lr, lr, r7
   29780:	movvs	r7, #1
   29784:	movvc	r7, #0
   29788:	adds	r4, r4, r0
   2978c:	adcs	r5, r5, r1
   29790:	strd	r2, [sp, #24]
   29794:	orrvc	r1, lr, r7
   29798:	movvs	r1, #1
   2979c:	ldr	r0, [r9, #-56]	; 0xffffffc8
   297a0:	b	29640 <__assert_fail@plt+0x17658>
   297a4:	add	r3, r9, #8
   297a8:	sub	r2, sl, #2
   297ac:	str	r2, [sp, #24]
   297b0:	ldm	r3, {r0, r1, r2, r3}
   297b4:	sub	ip, r9, #56	; 0x38
   297b8:	str	ip, [sp, #88]	; 0x58
   297bc:	mvn	r7, #92	; 0x5c
   297c0:	stm	sp, {r0, r1, r2, r3}
   297c4:	mov	sl, #23
   297c8:	ldr	r0, [sp, #40]	; 0x28
   297cc:	ldm	r9, {r2, r3}
   297d0:	bl	27078 <__assert_fail@plt+0x15090>
   297d4:	b	285bc <__assert_fail@plt+0x165d4>
   297d8:	ldr	r3, [r9, #8]
   297dc:	ldr	r2, [r9, #12]
   297e0:	adds	r1, r3, #-2147483648	; 0x80000000
   297e4:	adc	r2, r2, #0
   297e8:	str	r1, [sp, #240]	; 0xf0
   297ec:	str	r2, [sp, #244]	; 0xf4
   297f0:	ldrd	r4, [sp, #240]	; 0xf0
   297f4:	mov	r1, #0
   297f8:	mvn	r0, #0
   297fc:	cmp	r5, r1
   29800:	cmpeq	r4, r0
   29804:	bhi	27e78 <__assert_fail@plt+0x15e90>
   29808:	str	r3, [sp, #304]	; 0x130
   2980c:	sub	r3, r9, #56	; 0x38
   29810:	mov	r2, #0
   29814:	str	r3, [sp, #88]	; 0x58
   29818:	sub	r3, sl, #2
   2981c:	str	r3, [sp, #24]
   29820:	str	r2, [sp, #308]	; 0x134
   29824:	mvn	r7, #91	; 0x5b
   29828:	mov	sl, #22
   2982c:	b	285bc <__assert_fail@plt+0x165d4>
   29830:	ldr	r3, [r9, #8]
   29834:	ldr	r2, [r9, #12]
   29838:	adds	r1, r3, #-2147483648	; 0x80000000
   2983c:	adc	r2, r2, #0
   29840:	str	r1, [sp, #232]	; 0xe8
   29844:	str	r2, [sp, #236]	; 0xec
   29848:	ldrd	r4, [sp, #232]	; 0xe8
   2984c:	mov	r1, #0
   29850:	mvn	r0, #0
   29854:	cmp	r5, r1
   29858:	cmpeq	r4, r0
   2985c:	bhi	27e78 <__assert_fail@plt+0x15e90>
   29860:	str	r3, [sp, #304]	; 0x130
   29864:	sub	r3, r9, #56	; 0x38
   29868:	mov	r2, #0
   2986c:	str	r3, [sp, #88]	; 0x58
   29870:	sub	r3, sl, #2
   29874:	str	r3, [sp, #24]
   29878:	str	r2, [sp, #308]	; 0x134
   2987c:	mvn	r7, #92	; 0x5c
   29880:	mov	sl, #21
   29884:	b	285bc <__assert_fail@plt+0x165d4>
   29888:	mov	r2, #56	; 0x38
   2988c:	mov	r1, #0
   29890:	ldr	r0, [sp, #84]	; 0x54
   29894:	bl	11df0 <memset@plt>
   29898:	mov	r1, r9
   2989c:	mov	r0, #0
   298a0:	ldrd	r2, [r1], #-56	; 0xffffffc8
   298a4:	sub	ip, sl, #2
   298a8:	str	ip, [sp, #24]
   298ac:	str	r1, [sp, #88]	; 0x58
   298b0:	mov	r1, #0
   298b4:	strd	r2, [sp, #60]	; 0x3c
   298b8:	mov	r3, #0
   298bc:	strd	r0, [sp, #32]
   298c0:	str	r0, [sp, #68]	; 0x44
   298c4:	str	r1, [sp, #72]	; 0x48
   298c8:	str	r0, [sp, #76]	; 0x4c
   298cc:	str	r1, [sp, #80]	; 0x50
   298d0:	str	r0, [sp, #56]	; 0x38
   298d4:	str	r1, [sp, #48]	; 0x30
   298d8:	mvn	r7, #92	; 0x5c
   298dc:	mov	sl, #19
   298e0:	str	r3, [sp, #44]	; 0x2c
   298e4:	b	285bc <__assert_fail@plt+0x165d4>
   298e8:	mov	r1, #0
   298ec:	sub	r3, sl, #4
   298f0:	mov	r2, #56	; 0x38
   298f4:	ldr	r0, [sp, #84]	; 0x54
   298f8:	mov	r4, r1
   298fc:	str	r3, [sp, #24]
   29900:	str	r1, [sp, #68]	; 0x44
   29904:	str	r1, [sp, #72]	; 0x48
   29908:	bl	11df0 <memset@plt>
   2990c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   29910:	str	r4, [sp, #76]	; 0x4c
   29914:	str	r4, [sp, #60]	; 0x3c
   29918:	strd	r2, [sp, #32]
   2991c:	sub	r3, r9, #112	; 0x70
   29920:	str	r4, [sp, #56]	; 0x38
   29924:	str	r4, [sp, #80]	; 0x50
   29928:	str	r4, [sp, #64]	; 0x40
   2992c:	str	r4, [sp, #48]	; 0x30
   29930:	str	r3, [sp, #88]	; 0x58
   29934:	mov	r7, #60	; 0x3c
   29938:	mov	sl, #18
   2993c:	str	r4, [sp, #44]	; 0x2c
   29940:	b	285bc <__assert_fail@plt+0x165d4>
   29944:	mov	r4, #0
   29948:	mov	r5, #0
   2994c:	sub	r3, sl, #4
   29950:	mov	r2, #56	; 0x38
   29954:	mov	r1, #0
   29958:	ldr	r0, [sp, #84]	; 0x54
   2995c:	str	r3, [sp, #24]
   29960:	strd	r4, [sp, #32]
   29964:	bl	11df0 <memset@plt>
   29968:	ldr	r3, [r9, #-48]	; 0xffffffd0
   2996c:	str	r4, [sp, #76]	; 0x4c
   29970:	str	r3, [sp, #68]	; 0x44
   29974:	ldr	r3, [r9, #-44]	; 0xffffffd4
   29978:	str	r5, [sp, #80]	; 0x50
   2997c:	str	r4, [sp, #60]	; 0x3c
   29980:	str	r5, [sp, #64]	; 0x40
   29984:	str	r4, [sp, #56]	; 0x38
   29988:	str	r5, [sp, #48]	; 0x30
   2998c:	str	r3, [sp, #72]	; 0x48
   29990:	sub	r3, r9, #112	; 0x70
   29994:	str	r3, [sp, #88]	; 0x58
   29998:	mov	r3, #0
   2999c:	mov	r7, #60	; 0x3c
   299a0:	mov	sl, #18
   299a4:	str	r3, [sp, #44]	; 0x2c
   299a8:	b	285bc <__assert_fail@plt+0x165d4>
   299ac:	mov	r4, #0
   299b0:	mov	r5, #0
   299b4:	sub	r3, sl, #4
   299b8:	mov	r2, #56	; 0x38
   299bc:	mov	r1, #0
   299c0:	ldr	r0, [sp, #84]	; 0x54
   299c4:	str	r3, [sp, #24]
   299c8:	strd	r4, [sp, #32]
   299cc:	bl	11df0 <memset@plt>
   299d0:	ldr	r3, [r9, #-48]	; 0xffffffd0
   299d4:	str	r4, [sp, #68]	; 0x44
   299d8:	str	r3, [sp, #76]	; 0x4c
   299dc:	ldr	r3, [r9, #-44]	; 0xffffffd4
   299e0:	str	r5, [sp, #72]	; 0x48
   299e4:	str	r4, [sp, #60]	; 0x3c
   299e8:	str	r5, [sp, #64]	; 0x40
   299ec:	str	r4, [sp, #56]	; 0x38
   299f0:	str	r5, [sp, #48]	; 0x30
   299f4:	str	r3, [sp, #80]	; 0x50
   299f8:	b	29990 <__assert_fail@plt+0x179a8>
   299fc:	mov	r2, #56	; 0x38
   29a00:	mov	r1, #0
   29a04:	ldr	r0, [sp, #84]	; 0x54
   29a08:	bl	11df0 <memset@plt>
   29a0c:	ldr	r0, [r9, #-48]	; 0xffffffd0
   29a10:	ldr	r2, [r9, #-44]	; 0xffffffd4
   29a14:	ldr	r3, [r9]
   29a18:	mov	r1, #0
   29a1c:	cmp	r2, r0, asr #31
   29a20:	str	r1, [sp, #32]
   29a24:	ldr	ip, [r9, #4]
   29a28:	asr	r1, r3, #31
   29a2c:	bne	2a804 <__assert_fail@plt+0x1881c>
   29a30:	cmp	r1, ip
   29a34:	bne	2a794 <__assert_fail@plt+0x187ac>
   29a38:	smull	r2, r3, r0, r3
   29a3c:	strd	r2, [sp, #136]	; 0x88
   29a40:	ldrd	r0, [sp, #136]	; 0x88
   29a44:	ldr	r3, [sp, #32]
   29a48:	cmp	r3, #0
   29a4c:	str	r0, [sp, #60]	; 0x3c
   29a50:	str	r1, [sp, #64]	; 0x40
   29a54:	bne	27e78 <__assert_fail@plt+0x15e90>
   29a58:	mov	r0, #0
   29a5c:	mov	r1, #0
   29a60:	sub	r2, r9, #112	; 0x70
   29a64:	str	r2, [sp, #88]	; 0x58
   29a68:	sub	r2, sl, #4
   29a6c:	strd	r0, [sp, #32]
   29a70:	str	r2, [sp, #24]
   29a74:	str	r3, [sp, #44]	; 0x2c
   29a78:	str	r0, [sp, #68]	; 0x44
   29a7c:	str	r1, [sp, #72]	; 0x48
   29a80:	str	r0, [sp, #76]	; 0x4c
   29a84:	str	r1, [sp, #80]	; 0x50
   29a88:	str	r0, [sp, #56]	; 0x38
   29a8c:	str	r1, [sp, #48]	; 0x30
   29a90:	mov	r7, #60	; 0x3c
   29a94:	mov	sl, #18
   29a98:	b	285bc <__assert_fail@plt+0x165d4>
   29a9c:	mov	r4, #0
   29aa0:	mov	r5, #0
   29aa4:	sub	r3, sl, #4
   29aa8:	mov	r2, #56	; 0x38
   29aac:	mov	r1, #0
   29ab0:	ldr	r0, [sp, #84]	; 0x54
   29ab4:	str	r3, [sp, #24]
   29ab8:	strd	r4, [sp, #32]
   29abc:	bl	11df0 <memset@plt>
   29ac0:	ldr	r3, [r9, #-48]	; 0xffffffd0
   29ac4:	str	r4, [sp, #68]	; 0x44
   29ac8:	str	r3, [sp, #56]	; 0x38
   29acc:	ldr	r3, [r9, #-44]	; 0xffffffd4
   29ad0:	str	r5, [sp, #72]	; 0x48
   29ad4:	str	r4, [sp, #76]	; 0x4c
   29ad8:	str	r5, [sp, #80]	; 0x50
   29adc:	str	r4, [sp, #60]	; 0x3c
   29ae0:	str	r5, [sp, #64]	; 0x40
   29ae4:	str	r3, [sp, #48]	; 0x30
   29ae8:	b	29990 <__assert_fail@plt+0x179a8>
   29aec:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   29af0:	mov	r4, #0
   29af4:	mov	r5, #0
   29af8:	mov	r1, #0
   29afc:	sub	r0, sl, #4
   29b00:	strd	r2, [r8, #-8]
   29b04:	sub	r3, r9, #112	; 0x70
   29b08:	strd	r4, [sp, #32]
   29b0c:	str	r0, [sp, #24]
   29b10:	str	r3, [sp, #88]	; 0x58
   29b14:	str	r1, [sp, #356]	; 0x164
   29b18:	str	r1, [sp, #44]	; 0x2c
   29b1c:	str	r4, [sp, #68]	; 0x44
   29b20:	str	r5, [sp, #72]	; 0x48
   29b24:	str	r4, [sp, #76]	; 0x4c
   29b28:	str	r5, [sp, #80]	; 0x50
   29b2c:	str	r4, [sp, #60]	; 0x3c
   29b30:	str	r5, [sp, #64]	; 0x40
   29b34:	str	r4, [sp, #56]	; 0x38
   29b38:	str	r5, [sp, #48]	; 0x30
   29b3c:	mov	r7, #60	; 0x3c
   29b40:	mov	sl, #18
   29b44:	b	285bc <__assert_fail@plt+0x165d4>
   29b48:	ldr	r2, [sp, #40]	; 0x28
   29b4c:	ldr	r3, [r9, #-56]	; 0xffffffc8
   29b50:	mov	r1, #0
   29b54:	mov	r0, #0
   29b58:	str	r3, [r2, #16]
   29b5c:	strd	r0, [r2, #8]
   29b60:	sub	r3, r9, #112	; 0x70
   29b64:	sub	r1, sl, #4
   29b68:	str	r1, [sp, #24]
   29b6c:	str	r3, [sp, #88]	; 0x58
   29b70:	mvn	r7, #92	; 0x5c
   29b74:	mov	sl, #13
   29b78:	b	285bc <__assert_fail@plt+0x165d4>
   29b7c:	ldr	r1, [sp, #40]	; 0x28
   29b80:	mov	r2, #0
   29b84:	mov	r3, #0
   29b88:	mvn	r7, #92	; 0x5c
   29b8c:	strd	r2, [r1, #8]
   29b90:	mov	r2, r9
   29b94:	ldr	r3, [r2], #-56	; 0xffffffc8
   29b98:	str	r2, [sp, #88]	; 0x58
   29b9c:	sub	r2, sl, #2
   29ba0:	str	r2, [sp, #24]
   29ba4:	str	r3, [r1, #16]
   29ba8:	mov	sl, #13
   29bac:	b	285bc <__assert_fail@plt+0x165d4>
   29bb0:	sub	r2, sl, #4
   29bb4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   29bb8:	str	r2, [sp, #24]
   29bbc:	ldr	r2, [sp, #40]	; 0x28
   29bc0:	add	r3, r3, #3600	; 0xe10
   29bc4:	mvn	r7, #92	; 0x5c
   29bc8:	str	r3, [r2, #24]
   29bcc:	sub	r3, r9, #112	; 0x70
   29bd0:	str	r3, [sp, #88]	; 0x58
   29bd4:	mov	sl, #12
   29bd8:	b	285bc <__assert_fail@plt+0x165d4>
   29bdc:	sub	r3, sl, #2
   29be0:	str	r3, [sp, #24]
   29be4:	ldr	r2, [sp, #40]	; 0x28
   29be8:	ldr	r3, [r9], #-56	; 0xffffffc8
   29bec:	mvn	r7, #92	; 0x5c
   29bf0:	add	r3, r3, #3600	; 0xe10
   29bf4:	str	r9, [sp, #88]	; 0x58
   29bf8:	str	r3, [r2, #24]
   29bfc:	mov	sl, #12
   29c00:	b	285bc <__assert_fail@plt+0x165d4>
   29c04:	sub	r3, r9, #56	; 0x38
   29c08:	mov	r1, #0
   29c0c:	mov	r2, #56	; 0x38
   29c10:	str	r3, [sp, #88]	; 0x58
   29c14:	ldr	r0, [sp, #84]	; 0x54
   29c18:	sub	r3, sl, #2
   29c1c:	mov	r4, r1
   29c20:	str	r3, [sp, #24]
   29c24:	str	r1, [sp, #68]	; 0x44
   29c28:	str	r1, [sp, #72]	; 0x48
   29c2c:	bl	11df0 <memset@plt>
   29c30:	mov	r2, #1
   29c34:	mov	r3, #0
   29c38:	str	r4, [sp, #76]	; 0x4c
   29c3c:	str	r4, [sp, #60]	; 0x3c
   29c40:	str	r4, [sp, #56]	; 0x38
   29c44:	str	r4, [sp, #80]	; 0x50
   29c48:	str	r4, [sp, #64]	; 0x40
   29c4c:	str	r4, [sp, #48]	; 0x30
   29c50:	mvn	r7, #92	; 0x5c
   29c54:	mov	sl, #17
   29c58:	str	r4, [sp, #44]	; 0x2c
   29c5c:	strd	r2, [sp, #32]
   29c60:	b	285bc <__assert_fail@plt+0x165d4>
   29c64:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   29c68:	mov	r1, r9
   29c6c:	mov	r0, r1
   29c70:	mvn	r7, #92	; 0x5c
   29c74:	ldr	r1, [r0], #-112	; 0xffffff90
   29c78:	str	r0, [sp, #88]	; 0x58
   29c7c:	sub	r0, sl, #4
   29c80:	str	r0, [sp, #24]
   29c84:	ldr	r0, [sp, #40]	; 0x28
   29c88:	mov	sl, #13
   29c8c:	str	r1, [r0, #16]
   29c90:	mov	r1, #1
   29c94:	strd	r2, [r0, #8]
   29c98:	strb	r1, [r0, #188]	; 0xbc
   29c9c:	b	285bc <__assert_fail@plt+0x165d4>
   29ca0:	ldr	r3, [r9, #-40]	; 0xffffffd8
   29ca4:	ldrd	r0, [r9]
   29ca8:	cmp	r3, #2
   29cac:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   29cb0:	strd	r0, [sp, #88]	; 0x58
   29cb4:	bgt	2a564 <__assert_fail@plt+0x1857c>
   29cb8:	cmp	r0, #0
   29cbc:	sbcs	r3, r1, #0
   29cc0:	blt	2a758 <__assert_fail@plt+0x18770>
   29cc4:	cmp	r5, r4, asr #31
   29cc8:	mov	lr, #0
   29ccc:	bne	2aaec <__assert_fail@plt+0x18b04>
   29cd0:	mov	r3, #60	; 0x3c
   29cd4:	smull	r4, r5, r4, r3
   29cd8:	mov	r2, r4
   29cdc:	mov	r3, r5
   29ce0:	ldrb	ip, [r9, #-56]	; 0xffffffc8
   29ce4:	mov	r1, r3
   29ce8:	ldrd	r4, [sp, #88]	; 0x58
   29cec:	cmp	ip, #0
   29cf0:	beq	2a720 <__assert_fail@plt+0x18738>
   29cf4:	subs	r2, r2, r4
   29cf8:	sbcs	r3, r3, r5
   29cfc:	mov	r1, #0
   29d00:	mov	r0, r2
   29d04:	movvs	r1, #1
   29d08:	mov	r5, r3
   29d0c:	orrs	r3, lr, r1
   29d10:	bne	27e78 <__assert_fail@plt+0x15e90>
   29d14:	adds	r3, r0, #1440	; 0x5a0
   29d18:	str	r3, [sp, #224]	; 0xe0
   29d1c:	adc	r3, r5, #0
   29d20:	str	r3, [sp, #228]	; 0xe4
   29d24:	ldrd	r2, [sp, #224]	; 0xe0
   29d28:	cmp	r3, #0
   29d2c:	cmpeq	r2, #2880	; 0xb40
   29d30:	bhi	27e78 <__assert_fail@plt+0x15e90>
   29d34:	rsb	r2, r0, r0, lsl #4
   29d38:	ldrd	r4, [r9, #-112]	; 0xffffff90
   29d3c:	lsl	r2, r2, #2
   29d40:	adds	r0, r2, r4
   29d44:	asr	r3, r2, #31
   29d48:	adcs	r1, r3, r5
   29d4c:	asr	r3, r0, #31
   29d50:	movvs	ip, #1
   29d54:	movvc	ip, #0
   29d58:	cmp	r1, r3
   29d5c:	cmpeq	r0, r0
   29d60:	ldr	r3, [sp, #40]	; 0x28
   29d64:	movne	ip, #1
   29d68:	cmp	ip, #0
   29d6c:	str	r0, [r3, #24]
   29d70:	bne	27e78 <__assert_fail@plt+0x15e90>
   29d74:	sub	r3, r9, #168	; 0xa8
   29d78:	str	r3, [sp, #88]	; 0x58
   29d7c:	sub	r3, sl, #6
   29d80:	str	r3, [sp, #24]
   29d84:	mvn	r7, #92	; 0x5c
   29d88:	mov	sl, #12
   29d8c:	b	285bc <__assert_fail@plt+0x165d4>
   29d90:	ldr	r1, [sp, #40]	; 0x28
   29d94:	sub	r0, r9, #56	; 0x38
   29d98:	str	r0, [sp, #88]	; 0x58
   29d9c:	ldrb	r2, [r1, #181]	; 0xb5
   29da0:	ldr	r3, [r1, #172]	; 0xac
   29da4:	cmp	r2, #0
   29da8:	add	r3, r3, #1
   29dac:	sub	r2, sl, #2
   29db0:	str	r2, [sp, #24]
   29db4:	str	r3, [r1, #172]	; 0xac
   29db8:	beq	2a2a8 <__assert_fail@plt+0x182c0>
   29dbc:	ldr	r0, [pc, #4064]	; 2ada4 <__assert_fail@plt+0x18dbc>
   29dc0:	bl	27940 <__assert_fail@plt+0x15958>
   29dc4:	mvn	r7, #92	; 0x5c
   29dc8:	mov	sl, #4
   29dcc:	b	285bc <__assert_fail@plt+0x165d4>
   29dd0:	ldr	r0, [sp, #40]	; 0x28
   29dd4:	ldrb	r1, [r0, #181]	; 0xb5
   29dd8:	ldr	r2, [r0, #172]	; 0xac
   29ddc:	ldr	r3, [r0, #156]	; 0x9c
   29de0:	cmp	r1, #0
   29de4:	sub	r1, r9, #56	; 0x38
   29de8:	add	r2, r2, #1
   29dec:	add	r3, r3, #1
   29df0:	str	r1, [sp, #88]	; 0x58
   29df4:	sub	r1, sl, #2
   29df8:	str	r1, [sp, #24]
   29dfc:	str	r2, [r0, #172]	; 0xac
   29e00:	str	r3, [r0, #156]	; 0x9c
   29e04:	beq	2a2a8 <__assert_fail@plt+0x182c0>
   29e08:	mov	r1, r0
   29e0c:	ldr	r0, [pc, #3988]	; 2ada8 <__assert_fail@plt+0x18dc0>
   29e10:	bl	27940 <__assert_fail@plt+0x15958>
   29e14:	mvn	r7, #92	; 0x5c
   29e18:	mov	sl, #4
   29e1c:	b	285bc <__assert_fail@plt+0x165d4>
   29e20:	mvn	r2, #0
   29e24:	mvn	r3, #0
   29e28:	str	sl, [sp, #24]
   29e2c:	str	r9, [sp, #88]	; 0x58
   29e30:	strd	r2, [r8, #-8]
   29e34:	mov	r7, #43	; 0x2b
   29e38:	mov	sl, #25
   29e3c:	b	285bc <__assert_fail@plt+0x165d4>
   29e40:	ldr	ip, [sp, #40]	; 0x28
   29e44:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   29e48:	ldr	r3, [r9]
   29e4c:	ldrd	r4, [r9, #-16]
   29e50:	strd	r0, [sp, #24]
   29e54:	ldrd	r0, [ip, #136]	; 0x88
   29e58:	cmp	r3, #0
   29e5c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   29e60:	strd	r0, [sp, #168]	; 0xa8
   29e64:	ldrd	r0, [ip, #128]	; 0x80
   29e68:	strd	r2, [sp, #88]	; 0x58
   29e6c:	ldrd	r2, [r9, #-40]	; 0xffffffd8
   29e70:	strd	r0, [sp, #176]	; 0xb0
   29e74:	ldrd	r0, [ip, #120]	; 0x78
   29e78:	strd	r2, [sp, #144]	; 0x90
   29e7c:	ldrd	r2, [r9, #-32]	; 0xffffffe0
   29e80:	strd	r0, [sp, #184]	; 0xb8
   29e84:	ldrd	r0, [ip, #112]	; 0x70
   29e88:	strd	r2, [sp, #152]	; 0x98
   29e8c:	ldrd	r2, [r9, #-24]	; 0xffffffe8
   29e90:	strd	r0, [sp, #192]	; 0xc0
   29e94:	ldrd	r0, [ip, #104]	; 0x68
   29e98:	strd	r2, [sp, #160]	; 0xa0
   29e9c:	ldr	r2, [r9, #-8]
   29ea0:	strd	r0, [sp, #200]	; 0xc8
   29ea4:	ldrd	r0, [ip, #96]	; 0x60
   29ea8:	ldr	r3, [ip, #144]	; 0x90
   29eac:	strd	r0, [sp, #208]	; 0xd0
   29eb0:	blt	2a5d8 <__assert_fail@plt+0x185f0>
   29eb4:	adds	ip, r3, r2
   29eb8:	ldrd	r2, [sp, #168]	; 0xa8
   29ebc:	movvs	lr, #1
   29ec0:	movvc	lr, #0
   29ec4:	adds	r0, r2, r4
   29ec8:	adcs	r1, r3, r5
   29ecc:	ldrd	r4, [sp, #176]	; 0xb0
   29ed0:	strd	r0, [sp, #168]	; 0xa8
   29ed4:	ldrd	r0, [sp, #160]	; 0xa0
   29ed8:	movvs	r7, #1
   29edc:	movvc	r7, #0
   29ee0:	adds	r2, r4, r0
   29ee4:	adcs	r3, r5, r1
   29ee8:	ldrd	r0, [sp, #184]	; 0xb8
   29eec:	strd	r2, [sp, #160]	; 0xa0
   29ef0:	ldrd	r2, [sp, #152]	; 0x98
   29ef4:	orr	lr, lr, r7
   29ef8:	movvs	r7, #1
   29efc:	movvc	r7, #0
   29f00:	adds	r4, r0, r2
   29f04:	adcs	r5, r1, r3
   29f08:	ldrd	r2, [sp, #144]	; 0x90
   29f0c:	strd	r4, [sp, #152]	; 0x98
   29f10:	ldrd	r4, [sp, #192]	; 0xc0
   29f14:	orr	lr, lr, r7
   29f18:	movvs	r7, #1
   29f1c:	movvc	r7, #0
   29f20:	adds	r0, r4, r2
   29f24:	adcs	r1, r5, r3
   29f28:	ldrd	r2, [sp, #88]	; 0x58
   29f2c:	strd	r0, [sp, #144]	; 0x90
   29f30:	ldrd	r0, [sp, #200]	; 0xc8
   29f34:	orr	lr, lr, r7
   29f38:	movvs	r7, #1
   29f3c:	movvc	r7, #0
   29f40:	adds	r4, r0, r2
   29f44:	adcs	r5, r1, r3
   29f48:	ldrd	r2, [sp, #24]
   29f4c:	strd	r4, [sp, #88]	; 0x58
   29f50:	ldrd	r4, [sp, #208]	; 0xd0
   29f54:	orr	lr, lr, r7
   29f58:	movvs	r7, #1
   29f5c:	movvc	r7, #0
   29f60:	adds	r0, r4, r2
   29f64:	adcs	r1, r5, r3
   29f68:	ldr	r3, [sp, #40]	; 0x28
   29f6c:	strd	r0, [sp, #24]
   29f70:	ldrd	r0, [sp, #168]	; 0xa8
   29f74:	ldrd	r4, [sp, #88]	; 0x58
   29f78:	orrvc	r2, lr, r7
   29f7c:	movvs	r2, #1
   29f80:	strd	r0, [r3, #136]	; 0x88
   29f84:	ldrd	r0, [sp, #160]	; 0xa0
   29f88:	str	ip, [r3, #144]	; 0x90
   29f8c:	strd	r4, [r3, #104]	; 0x68
   29f90:	strd	r0, [r3, #128]	; 0x80
   29f94:	ldrd	r0, [sp, #152]	; 0x98
   29f98:	strd	r0, [r3, #120]	; 0x78
   29f9c:	ldrd	r0, [sp, #144]	; 0x90
   29fa0:	strd	r0, [r3, #112]	; 0x70
   29fa4:	ldrd	r0, [sp, #24]
   29fa8:	strd	r0, [r3, #96]	; 0x60
   29fac:	cmp	r2, #0
   29fb0:	bne	27e78 <__assert_fail@plt+0x15e90>
   29fb4:	sub	r2, r9, #112	; 0x70
   29fb8:	str	r2, [sp, #88]	; 0x58
   29fbc:	sub	r2, sl, #4
   29fc0:	str	r2, [sp, #24]
   29fc4:	ldr	r2, [sp, #40]	; 0x28
   29fc8:	mov	r3, #1
   29fcc:	mvn	r7, #92	; 0x5c
   29fd0:	strb	r3, [r2, #153]	; 0x99
   29fd4:	mov	sl, #16
   29fd8:	b	285bc <__assert_fail@plt+0x165d4>
   29fdc:	ldr	r3, [sp, #40]	; 0x28
   29fe0:	sub	r7, r9, #112	; 0x70
   29fe4:	add	lr, r3, #32
   29fe8:	ldm	r7!, {r0, r1, r2, r3}
   29fec:	mov	ip, #0
   29ff0:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   29ff4:	stmia	lr!, {r0, r1, r2, r3}
   29ff8:	rsbs	r4, r4, #0
   29ffc:	ldm	r7, {r0, r1}
   2a000:	rscs	r5, r5, #0
   2a004:	ldr	r3, [sp, #40]	; 0x28
   2a008:	movvs	ip, #1
   2a00c:	stm	lr, {r0, r1}
   2a010:	subs	r1, ip, #0
   2a014:	strd	r4, [r3, #56]	; 0x38
   2a018:	bne	27e78 <__assert_fail@plt+0x15e90>
   2a01c:	ldrd	r2, [r9, #8]
   2a020:	rsbs	r2, r2, #0
   2a024:	rscs	r3, r3, #0
   2a028:	movvs	r1, #1
   2a02c:	cmp	r1, #0
   2a030:	ldr	r1, [sp, #40]	; 0x28
   2a034:	strd	r2, [r1, #64]	; 0x40
   2a038:	bne	27e78 <__assert_fail@plt+0x15e90>
   2a03c:	sub	r3, r9, #168	; 0xa8
   2a040:	str	r3, [sp, #88]	; 0x58
   2a044:	sub	r3, sl, #6
   2a048:	str	r3, [sp, #24]
   2a04c:	mvn	r7, #92	; 0x5c
   2a050:	mov	sl, #15
   2a054:	b	285bc <__assert_fail@plt+0x165d4>
   2a058:	ldrd	r4, [r9, #-104]	; 0xffffff98
   2a05c:	ldr	r7, [sp, #40]	; 0x28
   2a060:	mov	lr, r9
   2a064:	add	ip, r7, #32
   2a068:	ldm	lr!, {r0, r1, r2, r3}
   2a06c:	sub	sl, sl, #6
   2a070:	strd	r4, [r7, #64]	; 0x40
   2a074:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   2a078:	sub	r9, r9, #168	; 0xa8
   2a07c:	str	sl, [sp, #24]
   2a080:	str	r9, [sp, #88]	; 0x58
   2a084:	strd	r4, [r7, #56]	; 0x38
   2a088:	stmia	ip!, {r0, r1, r2, r3}
   2a08c:	mvn	r7, #92	; 0x5c
   2a090:	ldm	lr, {r0, r1}
   2a094:	mov	sl, #14
   2a098:	stm	ip, {r0, r1}
   2a09c:	b	285bc <__assert_fail@plt+0x165d4>
   2a0a0:	mov	ip, r9
   2a0a4:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2a0a8:	ldrd	r0, [ip], #-112	; 0xffffff90
   2a0ac:	mvn	r7, #92	; 0x5c
   2a0b0:	str	ip, [sp, #88]	; 0x58
   2a0b4:	sub	ip, sl, #4
   2a0b8:	str	ip, [sp, #24]
   2a0bc:	ldr	ip, [sp, #40]	; 0x28
   2a0c0:	mov	sl, #14
   2a0c4:	strd	r2, [ip, #64]	; 0x40
   2a0c8:	strd	r0, [ip, #56]	; 0x38
   2a0cc:	b	285bc <__assert_fail@plt+0x165d4>
   2a0d0:	ldrd	r4, [r9, #-168]	; 0xffffff58
   2a0d4:	ldr	r7, [sp, #40]	; 0x28
   2a0d8:	mov	lr, r9
   2a0dc:	sub	sl, sl, #8
   2a0e0:	strd	r4, [r7, #56]	; 0x38
   2a0e4:	ldrd	r4, [r9, #-104]	; 0xffffff98
   2a0e8:	sub	r9, r9, #224	; 0xe0
   2a0ec:	ldm	lr!, {r0, r1, r2, r3}
   2a0f0:	add	ip, r7, #32
   2a0f4:	str	sl, [sp, #24]
   2a0f8:	str	r9, [sp, #88]	; 0x58
   2a0fc:	strd	r4, [r7, #64]	; 0x40
   2a100:	b	2a088 <__assert_fail@plt+0x180a0>
   2a104:	sub	ip, sl, #4
   2a108:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   2a10c:	str	ip, [sp, #24]
   2a110:	ldr	ip, [sp, #40]	; 0x28
   2a114:	ldrd	r0, [r9, #8]
   2a118:	mvn	r7, #92	; 0x5c
   2a11c:	strd	r2, [ip, #56]	; 0x38
   2a120:	sub	r3, r9, #112	; 0x70
   2a124:	strd	r0, [ip, #64]	; 0x40
   2a128:	str	r3, [sp, #88]	; 0x58
   2a12c:	mov	sl, #14
   2a130:	b	285bc <__assert_fail@plt+0x165d4>
   2a134:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2a138:	ldr	r0, [sp, #40]	; 0x28
   2a13c:	ldrd	r4, [r9, #-112]	; 0xffffff90
   2a140:	rsbs	r2, r2, #0
   2a144:	rscs	r3, r3, #0
   2a148:	strd	r4, [r0, #56]	; 0x38
   2a14c:	ldr	r0, [sp, #40]	; 0x28
   2a150:	mov	r1, #0
   2a154:	movvs	r1, #1
   2a158:	cmp	r1, #0
   2a15c:	strd	r2, [r0, #64]	; 0x40
   2a160:	bne	27e78 <__assert_fail@plt+0x15e90>
   2a164:	ldrd	r2, [r9, #8]
   2a168:	rsbs	r2, r2, #0
   2a16c:	rscs	r3, r3, #0
   2a170:	bvs	2a1d0 <__assert_fail@plt+0x181e8>
   2a174:	cmp	r1, #0
   2a178:	ldr	r1, [sp, #40]	; 0x28
   2a17c:	strd	r2, [r1, #40]	; 0x28
   2a180:	bne	27e78 <__assert_fail@plt+0x15e90>
   2a184:	ldr	r3, [r9, #16]
   2a188:	sub	r2, sl, #6
   2a18c:	str	r3, [r1, #48]	; 0x30
   2a190:	sub	r3, r9, #168	; 0xa8
   2a194:	str	r2, [sp, #24]
   2a198:	str	r3, [sp, #88]	; 0x58
   2a19c:	mvn	r7, #92	; 0x5c
   2a1a0:	mov	sl, #14
   2a1a4:	b	285bc <__assert_fail@plt+0x165d4>
   2a1a8:	ldrd	r2, [r9, #8]
   2a1ac:	ldrd	r0, [r9, #-104]	; 0xffffff98
   2a1b0:	ldr	ip, [sp, #40]	; 0x28
   2a1b4:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   2a1b8:	rsbs	r2, r2, #0
   2a1bc:	rscs	r3, r3, #0
   2a1c0:	strd	r0, [ip, #64]	; 0x40
   2a1c4:	strd	r4, [ip, #56]	; 0x38
   2a1c8:	mov	r1, #0
   2a1cc:	bvc	2a174 <__assert_fail@plt+0x1818c>
   2a1d0:	mov	r1, #1
   2a1d4:	b	2a174 <__assert_fail@plt+0x1818c>
   2a1d8:	ldr	r4, [r9, #-208]	; 0xffffff30
   2a1dc:	ldr	r3, [sp, #40]	; 0x28
   2a1e0:	cmp	r4, #3
   2a1e4:	ldrb	r3, [r3, #181]	; 0xb5
   2a1e8:	ble	2a504 <__assert_fail@plt+0x1851c>
   2a1ec:	cmp	r3, #0
   2a1f0:	bne	2a77c <__assert_fail@plt+0x18794>
   2a1f4:	sub	lr, r9, #224	; 0xe0
   2a1f8:	ldr	ip, [sp, #40]	; 0x28
   2a1fc:	ldm	lr!, {r0, r1, r2, r3}
   2a200:	add	ip, ip, #32
   2a204:	sub	r4, sl, #10
   2a208:	str	r4, [sp, #24]
   2a20c:	stmia	ip!, {r0, r1, r2, r3}
   2a210:	sub	r3, r9, #280	; 0x118
   2a214:	ldm	lr, {r0, r1}
   2a218:	ldrd	r4, [r9, #-104]	; 0xffffff98
   2a21c:	str	r3, [sp, #88]	; 0x58
   2a220:	stm	ip, {r0, r1}
   2a224:	ldrd	r2, [r9, #8]
   2a228:	ldr	ip, [sp, #40]	; 0x28
   2a22c:	mov	r0, r4
   2a230:	mov	r1, r5
   2a234:	mvn	r7, #92	; 0x5c
   2a238:	strd	r0, [ip, #56]	; 0x38
   2a23c:	strd	r2, [ip, #64]	; 0x40
   2a240:	mov	sl, #14
   2a244:	b	285bc <__assert_fail@plt+0x165d4>
   2a248:	sub	ip, sl, #6
   2a24c:	ldrd	r2, [r9, #-104]	; 0xffffff98
   2a250:	str	ip, [sp, #24]
   2a254:	ldr	ip, [sp, #40]	; 0x28
   2a258:	ldrd	r0, [r9, #8]
   2a25c:	mvn	r7, #92	; 0x5c
   2a260:	strd	r2, [ip, #56]	; 0x38
   2a264:	sub	r3, r9, #168	; 0xa8
   2a268:	strd	r0, [ip, #64]	; 0x40
   2a26c:	str	r3, [sp, #88]	; 0x58
   2a270:	mov	sl, #14
   2a274:	b	285bc <__assert_fail@plt+0x165d4>
   2a278:	mov	r1, r9
   2a27c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2a280:	b	29c6c <__assert_fail@plt+0x17c84>
   2a284:	ldrd	r2, [r9, #8]
   2a288:	sub	r1, sl, #4
   2a28c:	str	r1, [sp, #24]
   2a290:	sub	r1, r9, #112	; 0x70
   2a294:	str	r1, [sp, #88]	; 0x58
   2a298:	strd	r2, [r8, #-8]
   2a29c:	mov	r7, #43	; 0x2b
   2a2a0:	mov	sl, #25
   2a2a4:	b	285bc <__assert_fail@plt+0x165d4>
   2a2a8:	mvn	r7, #92	; 0x5c
   2a2ac:	mov	sl, #4
   2a2b0:	b	285bc <__assert_fail@plt+0x165d4>
   2a2b4:	ldr	r0, [sp, #16]
   2a2b8:	str	r1, [sp, #32]
   2a2bc:	bl	11d78 <strlen@plt>
   2a2c0:	ldr	r4, [sp, #24]
   2a2c4:	cmp	r0, #3
   2a2c8:	mov	r3, r0
   2a2cc:	str	r0, [sp, #24]
   2a2d0:	moveq	r3, #1
   2a2d4:	beq	2a2f4 <__assert_fail@plt+0x1830c>
   2a2d8:	cmp	r3, #4
   2a2dc:	ldr	r1, [sp, #32]
   2a2e0:	ldrbeq	r3, [sp, #1523]	; 0x5f3
   2a2e4:	movne	r3, r1
   2a2e8:	subeq	r3, r3, #46	; 0x2e
   2a2ec:	clzeq	r3, r3
   2a2f0:	lsreq	r3, r3, #5
   2a2f4:	ldr	r8, [pc, #2736]	; 2adac <__assert_fail@plt+0x18dc4>
   2a2f8:	str	r7, [sp, #32]
   2a2fc:	str	r4, [sp, #44]	; 0x2c
   2a300:	ldr	r1, [pc, #2728]	; 2adb0 <__assert_fail@plt+0x18dc8>
   2a304:	mov	r4, r8
   2a308:	mov	r7, r3
   2a30c:	ldr	r8, [sp, #16]
   2a310:	b	2a33c <__assert_fail@plt+0x18354>
   2a314:	mov	r2, #3
   2a318:	mov	r0, r8
   2a31c:	bl	11f94 <strncmp@plt>
   2a320:	clz	r0, r0
   2a324:	lsr	r0, r0, #5
   2a328:	cmp	r0, #0
   2a32c:	bne	2a408 <__assert_fail@plt+0x18420>
   2a330:	ldr	r1, [r4, #12]!
   2a334:	cmp	r1, #0
   2a338:	beq	2a3d0 <__assert_fail@plt+0x183e8>
   2a33c:	cmp	r7, #0
   2a340:	bne	2a314 <__assert_fail@plt+0x1832c>
   2a344:	mov	r0, r8
   2a348:	bl	11a48 <strcmp@plt>
   2a34c:	clz	r0, r0
   2a350:	lsr	r0, r0, #5
   2a354:	b	2a328 <__assert_fail@plt+0x18340>
   2a358:	mov	r2, #63	; 0x3f
   2a35c:	mov	r3, #2
   2a360:	str	r2, [sp, #16]
   2a364:	b	2838c <__assert_fail@plt+0x163a4>
   2a368:	cmp	r3, #0
   2a36c:	beq	2accc <__assert_fail@plt+0x18ce4>
   2a370:	ldrd	r0, [sp, #32]
   2a374:	cmp	r0, #-2147483648	; 0x80000000
   2a378:	beq	2a358 <__assert_fail@plt+0x18370>
   2a37c:	ldr	r2, [pc, #2608]	; 2adb4 <__assert_fail@plt+0x18dcc>
   2a380:	sub	r1, r0, #1
   2a384:	sub	r2, r2, r3
   2a388:	ldr	r3, [sp, #40]	; 0x28
   2a38c:	str	r2, [sp, #252]	; 0xfc
   2a390:	mov	r2, #276	; 0x114
   2a394:	str	r4, [r3]
   2a398:	str	r1, [sp, #248]	; 0xf8
   2a39c:	mov	r3, #21
   2a3a0:	str	r2, [sp, #16]
   2a3a4:	b	2838c <__assert_fail@plt+0x163a4>
   2a3a8:	mov	r2, #63	; 0x3f
   2a3ac:	ldr	sl, [sp, #44]	; 0x2c
   2a3b0:	ldr	fp, [sp, #56]	; 0x38
   2a3b4:	mov	r3, #2
   2a3b8:	str	r2, [sp, #16]
   2a3bc:	b	2838c <__assert_fail@plt+0x163a4>
   2a3c0:	mov	r0, #2
   2a3c4:	b	27e7c <__assert_fail@plt+0x15e94>
   2a3c8:	mov	r0, #0
   2a3cc:	b	27e7c <__assert_fail@plt+0x15e94>
   2a3d0:	ldr	r7, [sp, #32]
   2a3d4:	ldr	r1, [sp, #16]
   2a3d8:	str	r0, [sp, #32]
   2a3dc:	ldr	r0, [sp, #40]	; 0x28
   2a3e0:	bl	27508 <__assert_fail@plt+0x15520>
   2a3e4:	ldr	r4, [sp, #44]	; 0x2c
   2a3e8:	ldr	r3, [sp, #32]
   2a3ec:	cmp	r0, #0
   2a3f0:	beq	2a430 <__assert_fail@plt+0x18448>
   2a3f4:	ldr	r2, [r0, #8]
   2a3f8:	ldr	r3, [r0, #4]
   2a3fc:	str	r3, [sp, #16]
   2a400:	asr	r3, r2, #31
   2a404:	b	28528 <__assert_fail@plt+0x16540>
   2a408:	ldr	r7, [sp, #32]
   2a40c:	mov	r8, r4
   2a410:	ldr	r4, [sp, #44]	; 0x2c
   2a414:	ldr	r2, [r8, #8]
   2a418:	ldr	r3, [r8, #4]
   2a41c:	str	r3, [sp, #16]
   2a420:	asr	r3, r2, #31
   2a424:	b	28528 <__assert_fail@plt+0x16540>
   2a428:	mov	r8, #0
   2a42c:	b	2821c <__assert_fail@plt+0x16234>
   2a430:	ldr	r1, [pc, #2432]	; 2adb8 <__assert_fail@plt+0x18dd0>
   2a434:	ldr	r0, [sp, #16]
   2a438:	str	r3, [sp, #32]
   2a43c:	bl	11a48 <strcmp@plt>
   2a440:	ldr	r3, [sp, #32]
   2a444:	cmp	r0, #0
   2a448:	beq	2836c <__assert_fail@plt+0x16384>
   2a44c:	ldr	r2, [pc, #2408]	; 2adbc <__assert_fail@plt+0x18dd4>
   2a450:	str	r4, [sp, #44]	; 0x2c
   2a454:	mov	r8, r5
   2a458:	str	r2, [sp, #32]
   2a45c:	ldr	r1, [pc, #2396]	; 2adc0 <__assert_fail@plt+0x18dd8>
   2a460:	mov	r4, r2
   2a464:	mov	r5, r3
   2a468:	b	2a478 <__assert_fail@plt+0x18490>
   2a46c:	ldr	r1, [r4, #12]!
   2a470:	cmp	r1, #0
   2a474:	beq	2a8c0 <__assert_fail@plt+0x188d8>
   2a478:	ldr	r0, [sp, #16]
   2a47c:	bl	11a48 <strcmp@plt>
   2a480:	cmp	r0, #0
   2a484:	bne	2a46c <__assert_fail@plt+0x18484>
   2a488:	mov	r5, r8
   2a48c:	b	2a40c <__assert_fail@plt+0x18424>
   2a490:	ldrd	r2, [sp, #88]	; 0x58
   2a494:	cmp	r2, #0
   2a498:	sbcs	r3, r3, #0
   2a49c:	bge	29078 <__assert_fail@plt+0x17090>
   2a4a0:	mov	r2, #100	; 0x64
   2a4a4:	mov	r3, #0
   2a4a8:	mov	r0, r4
   2a4ac:	mov	r1, r5
   2a4b0:	bl	31ca8 <renameat2@@Base+0x2f94>
   2a4b4:	mov	r2, #100	; 0x64
   2a4b8:	mov	r3, #0
   2a4bc:	mov	lr, r0
   2a4c0:	mov	ip, r1
   2a4c4:	mov	r0, r4
   2a4c8:	mov	r1, r5
   2a4cc:	mov	r4, lr
   2a4d0:	mov	r5, ip
   2a4d4:	bl	31ca8 <renameat2@@Base+0x2f94>
   2a4d8:	lsl	r1, r5, #4
   2a4dc:	lsl	r0, r4, #4
   2a4e0:	orr	r1, r1, r4, lsr #28
   2a4e4:	subs	r4, r0, r4
   2a4e8:	sbc	r5, r1, r5
   2a4ec:	lsl	r1, r4, #2
   2a4f0:	lsl	r5, r5, #2
   2a4f4:	orr	r5, r5, r4, lsr #30
   2a4f8:	adds	r0, r1, r2
   2a4fc:	adc	r5, r5, r3
   2a500:	b	290c8 <__assert_fail@plt+0x170e0>
   2a504:	cmp	r3, #0
   2a508:	ldrd	r2, [r9, #-216]	; 0xffffff28
   2a50c:	mov	r4, r2
   2a510:	mov	r5, r3
   2a514:	bne	2a764 <__assert_fail@plt+0x1877c>
   2a518:	sub	ip, sl, #10
   2a51c:	str	ip, [sp, #24]
   2a520:	ldr	ip, [sp, #40]	; 0x28
   2a524:	mov	lr, r9
   2a528:	mov	sl, #14
   2a52c:	strd	r4, [ip, #56]	; 0x38
   2a530:	ldm	lr!, {r0, r1, r2, r3}
   2a534:	mov	r4, ip
   2a538:	mov	r7, r4
   2a53c:	ldrd	r4, [r9, #-104]	; 0xffffff98
   2a540:	add	ip, ip, #32
   2a544:	strd	r4, [r7, #64]	; 0x40
   2a548:	stmia	ip!, {r0, r1, r2, r3}
   2a54c:	sub	r3, r9, #280	; 0x118
   2a550:	ldm	lr, {r0, r1}
   2a554:	str	r3, [sp, #88]	; 0x58
   2a558:	mvn	r7, #92	; 0x5c
   2a55c:	stm	ip, {r0, r1}
   2a560:	b	285bc <__assert_fail@plt+0x165d4>
   2a564:	ldrd	r2, [sp, #88]	; 0x58
   2a568:	cmp	r2, #0
   2a56c:	sbcs	r3, r3, #0
   2a570:	bge	29cc4 <__assert_fail@plt+0x17cdc>
   2a574:	mov	r2, #100	; 0x64
   2a578:	mov	r3, #0
   2a57c:	mov	r0, r4
   2a580:	mov	r1, r5
   2a584:	bl	31ca8 <renameat2@@Base+0x2f94>
   2a588:	mov	r2, #100	; 0x64
   2a58c:	mov	r3, #0
   2a590:	mov	lr, r0
   2a594:	mov	ip, r1
   2a598:	mov	r0, r4
   2a59c:	mov	r1, r5
   2a5a0:	mov	r4, lr
   2a5a4:	mov	r5, ip
   2a5a8:	bl	31ca8 <renameat2@@Base+0x2f94>
   2a5ac:	lsl	r1, r5, #4
   2a5b0:	lsl	r0, r4, #4
   2a5b4:	orr	r1, r1, r4, lsr #28
   2a5b8:	subs	r4, r0, r4
   2a5bc:	sbc	r5, r1, r5
   2a5c0:	lsl	r1, r4, #2
   2a5c4:	lsl	r5, r5, #2
   2a5c8:	orr	r5, r5, r4, lsr #30
   2a5cc:	adds	r0, r1, r2
   2a5d0:	adc	r5, r5, r3
   2a5d4:	b	29d14 <__assert_fail@plt+0x17d2c>
   2a5d8:	subs	ip, r3, r2
   2a5dc:	ldrd	r2, [sp, #168]	; 0xa8
   2a5e0:	mov	r7, #0
   2a5e4:	movvs	r7, #1
   2a5e8:	subs	r0, r2, r4
   2a5ec:	sbcs	r1, r3, r5
   2a5f0:	ldr	r3, [sp, #40]	; 0x28
   2a5f4:	ldrd	r4, [sp, #176]	; 0xb0
   2a5f8:	strd	r0, [sp, #168]	; 0xa8
   2a5fc:	str	ip, [r3, #144]	; 0x90
   2a600:	ldrd	r2, [sp, #160]	; 0xa0
   2a604:	mov	lr, #0
   2a608:	movvs	lr, #1
   2a60c:	subs	r0, r4, r2
   2a610:	sbcs	r1, r5, r3
   2a614:	ldrd	r2, [sp, #168]	; 0xa8
   2a618:	strd	r0, [sp, #160]	; 0xa0
   2a61c:	ldr	r1, [sp, #40]	; 0x28
   2a620:	mov	ip, #0
   2a624:	movvs	ip, #1
   2a628:	strd	r2, [r1, #136]	; 0x88
   2a62c:	ldrd	r0, [sp, #152]	; 0x98
   2a630:	ldrd	r2, [sp, #184]	; 0xb8
   2a634:	subs	r4, r2, r0
   2a638:	sbcs	r5, r3, r1
   2a63c:	ldrd	r0, [sp, #160]	; 0xa0
   2a640:	ldr	r3, [sp, #40]	; 0x28
   2a644:	strd	r4, [sp, #168]	; 0xa8
   2a648:	ldrd	r4, [sp, #192]	; 0xc0
   2a64c:	strd	r0, [r3, #128]	; 0x80
   2a650:	ldrd	r0, [sp, #144]	; 0x90
   2a654:	mov	r3, #0
   2a658:	str	r3, [sp, #152]	; 0x98
   2a65c:	movvs	r3, #1
   2a660:	strvs	r3, [sp, #152]	; 0x98
   2a664:	subs	r2, r4, r0
   2a668:	sbcs	r3, r5, r1
   2a66c:	ldrd	r0, [sp, #168]	; 0xa8
   2a670:	strd	r2, [sp, #160]	; 0xa0
   2a674:	ldr	r3, [sp, #40]	; 0x28
   2a678:	ldrd	r4, [sp, #88]	; 0x58
   2a67c:	strd	r0, [r3, #120]	; 0x78
   2a680:	ldrd	r0, [sp, #200]	; 0xc8
   2a684:	mov	r3, #0
   2a688:	str	r3, [sp, #144]	; 0x90
   2a68c:	movvs	r3, #1
   2a690:	strvs	r3, [sp, #144]	; 0x90
   2a694:	subs	r2, r0, r4
   2a698:	sbcs	r3, r1, r5
   2a69c:	ldr	r1, [sp, #40]	; 0x28
   2a6a0:	strd	r2, [sp, #168]	; 0xa8
   2a6a4:	ldrd	r2, [sp, #160]	; 0xa0
   2a6a8:	strd	r2, [r1, #112]	; 0x70
   2a6ac:	mov	r3, #0
   2a6b0:	str	r3, [sp, #88]	; 0x58
   2a6b4:	ldrd	r4, [sp, #208]	; 0xd0
   2a6b8:	ldrd	r0, [sp, #24]
   2a6bc:	movvs	r3, #1
   2a6c0:	strvs	r3, [sp, #88]	; 0x58
   2a6c4:	subs	r2, r4, r0
   2a6c8:	sbcs	r3, r5, r1
   2a6cc:	mov	r4, r2
   2a6d0:	mov	r5, r3
   2a6d4:	ldr	r1, [sp, #40]	; 0x28
   2a6d8:	ldrd	r2, [sp, #168]	; 0xa8
   2a6dc:	mov	r0, r4
   2a6e0:	strd	r2, [r1, #104]	; 0x68
   2a6e4:	orr	r3, r7, lr
   2a6e8:	orr	ip, r3, ip
   2a6ec:	ldr	r3, [sp, #152]	; 0x98
   2a6f0:	ldr	r1, [sp, #144]	; 0x90
   2a6f4:	orr	r3, ip, r3
   2a6f8:	orr	r3, r3, r1
   2a6fc:	ldr	r1, [sp, #88]	; 0x58
   2a700:	mov	r2, #0
   2a704:	orr	r3, r3, r1
   2a708:	movvs	r2, #1
   2a70c:	orr	r2, r3, r2
   2a710:	ldr	r3, [sp, #40]	; 0x28
   2a714:	mov	r1, r5
   2a718:	strd	r0, [r3, #96]	; 0x60
   2a71c:	b	29fac <__assert_fail@plt+0x17fc4>
   2a720:	adds	r2, r2, r4
   2a724:	adcs	r3, r3, r5
   2a728:	mov	r0, r2
   2a72c:	mov	r5, r3
   2a730:	movvs	r1, #1
   2a734:	movvc	r1, #0
   2a738:	b	29d0c <__assert_fail@plt+0x17d24>
   2a73c:	adds	r2, r2, r4
   2a740:	adcs	r3, r3, r5
   2a744:	mov	r0, r2
   2a748:	mov	r5, r3
   2a74c:	movvs	r1, #1
   2a750:	movvc	r1, #0
   2a754:	b	290c0 <__assert_fail@plt+0x170d8>
   2a758:	mov	r2, #0
   2a75c:	mov	r3, r2
   2a760:	b	2a5ac <__assert_fail@plt+0x185c4>
   2a764:	ldr	r0, [pc, #1624]	; 2adc4 <__assert_fail@plt+0x18ddc>
   2a768:	bl	27380 <__assert_fail@plt+0x15398>
   2a76c:	b	2a518 <__assert_fail@plt+0x18530>
   2a770:	mov	r2, #0
   2a774:	mov	r3, r2
   2a778:	b	2a4d8 <__assert_fail@plt+0x184f0>
   2a77c:	asr	r5, r4, #31
   2a780:	ldrd	r2, [r9, #-216]	; 0xffffff28
   2a784:	ldr	r0, [pc, #1596]	; 2adc8 <__assert_fail@plt+0x18de0>
   2a788:	strd	r4, [sp]
   2a78c:	bl	27380 <__assert_fail@plt+0x15398>
   2a790:	b	2a1f4 <__assert_fail@plt+0x1820c>
   2a794:	ldr	r1, [r9, #4]
   2a798:	ldr	r7, [r9]
   2a79c:	str	r1, [sp, #44]	; 0x2c
   2a7a0:	mov	lr, ip
   2a7a4:	mov	r1, r0
   2a7a8:	umull	r4, r5, r0, r3
   2a7ac:	cmp	lr, #0
   2a7b0:	strd	r4, [sp, #24]
   2a7b4:	umull	r4, r5, r1, lr
   2a7b8:	bge	2a7c8 <__assert_fail@plt+0x187e0>
   2a7bc:	mov	lr, #0
   2a7c0:	subs	r4, r4, lr
   2a7c4:	sbc	r5, r5, r1
   2a7c8:	cmp	r1, #0
   2a7cc:	bge	2a7dc <__assert_fail@plt+0x187f4>
   2a7d0:	ldr	r1, [sp, #44]	; 0x2c
   2a7d4:	subs	r4, r4, r7
   2a7d8:	sbc	r5, r5, r1
   2a7dc:	ldr	r1, [sp, #28]
   2a7e0:	mov	lr, #0
   2a7e4:	adds	r1, r4, r1
   2a7e8:	adc	lr, r5, lr
   2a7ec:	cmp	lr, r1, asr #31
   2a7f0:	bne	2ae0c <__assert_fail@plt+0x18e24>
   2a7f4:	ldr	r3, [sp, #24]
   2a7f8:	str	r1, [sp, #140]	; 0x8c
   2a7fc:	str	r3, [sp, #136]	; 0x88
   2a800:	b	29a40 <__assert_fail@plt+0x17a58>
   2a804:	cmp	r1, ip
   2a808:	bne	2ac6c <__assert_fail@plt+0x18c84>
   2a80c:	ldr	r1, [r9, #-44]	; 0xffffffd4
   2a810:	ldr	r7, [r9, #-48]	; 0xffffffd0
   2a814:	str	r1, [sp, #44]	; 0x2c
   2a818:	mov	lr, r2
   2a81c:	mov	r1, r3
   2a820:	b	2a7a8 <__assert_fail@plt+0x187c0>
   2a824:	ldr	r2, [r9, #4]
   2a828:	ldr	r5, [r9]
   2a82c:	str	r2, [sp, #56]	; 0x38
   2a830:	mov	lr, ip
   2a834:	mov	r2, r4
   2a838:	umull	r0, r1, r4, r3
   2a83c:	cmp	lr, #0
   2a840:	strd	r0, [sp, #32]
   2a844:	umull	r0, r1, r2, lr
   2a848:	strd	r0, [sp, #24]
   2a84c:	bge	2a86c <__assert_fail@plt+0x18884>
   2a850:	mov	lr, #0
   2a854:	subs	r1, r0, lr
   2a858:	str	r1, [sp, #24]
   2a85c:	ldr	r1, [sp, #28]
   2a860:	mov	lr, r2
   2a864:	sbc	r1, r1, r2
   2a868:	str	r1, [sp, #28]
   2a86c:	cmp	r2, #0
   2a870:	bge	2a890 <__assert_fail@plt+0x188a8>
   2a874:	ldr	r2, [sp, #24]
   2a878:	ldr	r1, [sp, #28]
   2a87c:	subs	r2, r2, r5
   2a880:	str	r2, [sp, #24]
   2a884:	ldr	r2, [sp, #56]	; 0x38
   2a888:	sbc	r2, r1, r2
   2a88c:	str	r2, [sp, #28]
   2a890:	ldr	r1, [sp, #24]
   2a894:	ldr	r2, [sp, #36]	; 0x24
   2a898:	mov	r0, #0
   2a89c:	adds	r2, r1, r2
   2a8a0:	ldr	r1, [sp, #28]
   2a8a4:	adc	r0, r1, r0
   2a8a8:	cmp	r0, r2, asr #31
   2a8ac:	bne	2ac04 <__assert_fail@plt+0x18c1c>
   2a8b0:	ldr	r3, [sp, #32]
   2a8b4:	str	r2, [sp, #124]	; 0x7c
   2a8b8:	str	r3, [sp, #120]	; 0x78
   2a8bc:	b	28d4c <__assert_fail@plt+0x16d64>
   2a8c0:	ldr	r2, [sp, #24]
   2a8c4:	ldr	r0, [sp, #16]
   2a8c8:	sub	r2, r2, #1
   2a8cc:	mov	r3, r5
   2a8d0:	mov	r5, r8
   2a8d4:	add	r8, r0, r2
   2a8d8:	ldrb	r0, [r0, r2]
   2a8dc:	ldr	r4, [sp, #44]	; 0x2c
   2a8e0:	cmp	r0, #83	; 0x53
   2a8e4:	beq	2aa04 <__assert_fail@plt+0x18a1c>
   2a8e8:	str	r5, [sp, #32]
   2a8ec:	ldr	r8, [pc, #1240]	; 2adcc <__assert_fail@plt+0x18de4>
   2a8f0:	ldr	r1, [pc, #1240]	; 2add0 <__assert_fail@plt+0x18de8>
   2a8f4:	mov	r5, r3
   2a8f8:	b	2a908 <__assert_fail@plt+0x18920>
   2a8fc:	ldr	r1, [r8, #12]!
   2a900:	cmp	r1, #0
   2a904:	beq	2aa60 <__assert_fail@plt+0x18a78>
   2a908:	ldr	r0, [sp, #16]
   2a90c:	bl	11a48 <strcmp@plt>
   2a910:	cmp	r0, #0
   2a914:	bne	2a8fc <__assert_fail@plt+0x18914>
   2a918:	ldr	r2, [r8, #8]
   2a91c:	ldr	r3, [r8, #4]
   2a920:	ldr	r5, [sp, #32]
   2a924:	str	r3, [sp, #16]
   2a928:	asr	r3, r2, #31
   2a92c:	b	28528 <__assert_fail@plt+0x16540>
   2a930:	ldr	r1, [r9, #4]
   2a934:	ldr	r7, [r9]
   2a938:	str	r1, [sp, #44]	; 0x2c
   2a93c:	mov	lr, ip
   2a940:	mov	r1, r0
   2a944:	umull	r4, r5, r0, r3
   2a948:	cmp	lr, #0
   2a94c:	strd	r4, [sp, #24]
   2a950:	umull	r4, r5, r1, lr
   2a954:	bge	2a964 <__assert_fail@plt+0x1897c>
   2a958:	mov	lr, #0
   2a95c:	subs	r4, r4, lr
   2a960:	sbc	r5, r5, r1
   2a964:	cmp	r1, #0
   2a968:	bge	2a978 <__assert_fail@plt+0x18990>
   2a96c:	ldr	r1, [sp, #44]	; 0x2c
   2a970:	subs	r4, r4, r7
   2a974:	sbc	r5, r5, r1
   2a978:	ldr	r1, [sp, #28]
   2a97c:	mov	lr, #0
   2a980:	adds	r1, r4, r1
   2a984:	adc	lr, r5, lr
   2a988:	cmp	lr, r1, asr #31
   2a98c:	bne	2abe4 <__assert_fail@plt+0x18bfc>
   2a990:	ldr	r3, [sp, #24]
   2a994:	str	r1, [sp, #132]	; 0x84
   2a998:	str	r3, [sp, #128]	; 0x80
   2a99c:	b	28954 <__assert_fail@plt+0x1696c>
   2a9a0:	cmp	r1, ip
   2a9a4:	bne	2ae24 <__assert_fail@plt+0x18e3c>
   2a9a8:	ldr	r1, [r9, #-44]	; 0xffffffd4
   2a9ac:	ldr	r7, [r9, #-48]	; 0xffffffd0
   2a9b0:	str	r1, [sp, #44]	; 0x2c
   2a9b4:	mov	lr, r2
   2a9b8:	mov	r1, r3
   2a9bc:	b	2a944 <__assert_fail@plt+0x1895c>
   2a9c0:	cmp	r2, ip
   2a9c4:	bne	2ac28 <__assert_fail@plt+0x18c40>
   2a9c8:	ldr	r2, [r9, #-52]	; 0xffffffcc
   2a9cc:	ldr	r5, [r9, #-56]	; 0xffffffc8
   2a9d0:	str	r2, [sp, #56]	; 0x38
   2a9d4:	mov	lr, r7
   2a9d8:	mov	r2, r3
   2a9dc:	b	2a838 <__assert_fail@plt+0x18850>
   2a9e0:	ldr	r1, [sp, #40]	; 0x28
   2a9e4:	add	r3, r2, #1
   2a9e8:	str	r3, [r1]
   2a9ec:	ldrb	r3, [r2]
   2a9f0:	cmp	r3, #0
   2a9f4:	str	r3, [sp, #16]
   2a9f8:	ldreq	r3, [sp, #16]
   2a9fc:	bne	28384 <__assert_fail@plt+0x1639c>
   2aa00:	b	27d8c <__assert_fail@plt+0x15da4>
   2aa04:	ldr	ip, [sp, #16]
   2aa08:	ldr	r0, [pc, #944]	; 2adc0 <__assert_fail@plt+0x18dd8>
   2aa0c:	str	r5, [sp, #44]	; 0x2c
   2aa10:	strb	r1, [ip, r2]
   2aa14:	mov	r5, r3
   2aa18:	mov	r1, r0
   2aa1c:	b	2aa34 <__assert_fail@plt+0x18a4c>
   2aa20:	ldr	r3, [sp, #32]
   2aa24:	ldr	r1, [r3, #12]!
   2aa28:	cmp	r1, #0
   2aa2c:	str	r3, [sp, #32]
   2aa30:	beq	2aba4 <__assert_fail@plt+0x18bbc>
   2aa34:	ldr	r0, [sp, #16]
   2aa38:	bl	11a48 <strcmp@plt>
   2aa3c:	cmp	r0, #0
   2aa40:	bne	2aa20 <__assert_fail@plt+0x18a38>
   2aa44:	ldr	r3, [sp, #32]
   2aa48:	ldr	r5, [sp, #44]	; 0x2c
   2aa4c:	ldr	r2, [r3, #8]
   2aa50:	ldr	r3, [r3, #4]
   2aa54:	str	r3, [sp, #16]
   2aa58:	asr	r3, r2, #31
   2aa5c:	b	28528 <__assert_fail@plt+0x16540>
   2aa60:	ldr	r2, [sp, #24]
   2aa64:	mov	r3, r5
   2aa68:	cmp	r2, #1
   2aa6c:	ldr	r5, [sp, #32]
   2aa70:	ldrb	r2, [sp, #1520]	; 0x5f0
   2aa74:	beq	2ad20 <__assert_fail@plt+0x18d38>
   2aa78:	cmp	r2, #0
   2aa7c:	ldrne	r1, [sp, #16]
   2aa80:	movne	r0, r1
   2aa84:	beq	2aac0 <__assert_fail@plt+0x18ad8>
   2aa88:	cmp	r2, #46	; 0x2e
   2aa8c:	ldrb	r2, [r0, #1]!
   2aa90:	addne	r1, r1, #1
   2aa94:	moveq	r3, #1
   2aa98:	cmp	r2, #0
   2aa9c:	strb	r2, [r1]
   2aaa0:	bne	2aa88 <__assert_fail@plt+0x18aa0>
   2aaa4:	cmp	r3, #0
   2aaa8:	beq	2aac0 <__assert_fail@plt+0x18ad8>
   2aaac:	ldr	r1, [sp, #16]
   2aab0:	ldr	r0, [sp, #40]	; 0x28
   2aab4:	bl	27508 <__assert_fail@plt+0x15520>
   2aab8:	cmp	r0, #0
   2aabc:	bne	2a3f4 <__assert_fail@plt+0x1840c>
   2aac0:	ldr	r3, [sp, #40]	; 0x28
   2aac4:	ldrb	r3, [r3, #181]	; 0xb5
   2aac8:	cmp	r3, #0
   2aacc:	beq	2a358 <__assert_fail@plt+0x18370>
   2aad0:	ldr	r1, [sp, #16]
   2aad4:	ldr	r0, [pc, #760]	; 2add4 <__assert_fail@plt+0x18dec>
   2aad8:	bl	27380 <__assert_fail@plt+0x15398>
   2aadc:	mov	r3, #63	; 0x3f
   2aae0:	str	r3, [sp, #16]
   2aae4:	mov	r3, #2
   2aae8:	b	2838c <__assert_fail@plt+0x163a4>
   2aaec:	mov	r1, #60	; 0x3c
   2aaf0:	cmp	r5, #0
   2aaf4:	umull	r2, r3, r4, r1
   2aaf8:	strd	r2, [sp, #144]	; 0x90
   2aafc:	umull	r2, r3, r1, r5
   2ab00:	strd	r2, [sp, #24]
   2ab04:	bge	2ab1c <__assert_fail@plt+0x18b34>
   2ab08:	subs	r3, r2, lr
   2ab0c:	str	r3, [sp, #24]
   2ab10:	ldr	r3, [sp, #28]
   2ab14:	sbc	r3, r3, r1
   2ab18:	str	r3, [sp, #28]
   2ab1c:	ldr	r3, [sp, #24]
   2ab20:	ldr	r1, [sp, #148]	; 0x94
   2ab24:	mov	r2, #0
   2ab28:	adds	r1, r3, r1
   2ab2c:	ldr	r3, [sp, #28]
   2ab30:	adc	r3, r3, r2
   2ab34:	cmp	r3, r1, asr #31
   2ab38:	bne	2ad60 <__assert_fail@plt+0x18d78>
   2ab3c:	ldr	r2, [sp, #144]	; 0x90
   2ab40:	mov	r3, r1
   2ab44:	b	29ce0 <__assert_fail@plt+0x17cf8>
   2ab48:	mov	r1, #60	; 0x3c
   2ab4c:	cmp	r5, #0
   2ab50:	umull	r2, r3, r4, r1
   2ab54:	strd	r2, [sp, #144]	; 0x90
   2ab58:	umull	r2, r3, r1, r5
   2ab5c:	strd	r2, [sp, #24]
   2ab60:	bge	2ab78 <__assert_fail@plt+0x18b90>
   2ab64:	subs	r3, r2, lr
   2ab68:	str	r3, [sp, #24]
   2ab6c:	ldr	r3, [sp, #28]
   2ab70:	sbc	r3, r3, r1
   2ab74:	str	r3, [sp, #28]
   2ab78:	ldr	r3, [sp, #24]
   2ab7c:	ldr	r1, [sp, #148]	; 0x94
   2ab80:	mov	r2, #0
   2ab84:	adds	r1, r3, r1
   2ab88:	ldr	r3, [sp, #28]
   2ab8c:	adc	r3, r3, r2
   2ab90:	cmp	r3, r1, asr #31
   2ab94:	bne	2abb8 <__assert_fail@plt+0x18bd0>
   2ab98:	ldr	r2, [sp, #144]	; 0x90
   2ab9c:	mov	r3, r1
   2aba0:	b	29094 <__assert_fail@plt+0x170ac>
   2aba4:	mov	r2, #83	; 0x53
   2aba8:	mov	r3, r5
   2abac:	strb	r2, [r8]
   2abb0:	ldr	r5, [sp, #44]	; 0x2c
   2abb4:	b	2a8e8 <__assert_fail@plt+0x18900>
   2abb8:	lsl	r3, r5, #4
   2abbc:	lsl	r2, r4, #4
   2abc0:	subs	r2, r2, r4
   2abc4:	orr	r3, r3, r4, lsr #28
   2abc8:	sbc	r3, r3, r5
   2abcc:	lsl	r1, r2, #2
   2abd0:	lsl	r3, r3, #2
   2abd4:	orr	r3, r3, r2, lsr #30
   2abd8:	mov	lr, #1
   2abdc:	mov	r2, r1
   2abe0:	b	29094 <__assert_fail@plt+0x170ac>
   2abe4:	mul	ip, r0, ip
   2abe8:	umull	r0, r1, r0, r3
   2abec:	mla	r3, r3, r2, ip
   2abf0:	add	r1, r3, r1
   2abf4:	strd	r0, [sp, #128]	; 0x80
   2abf8:	mov	r3, #1
   2abfc:	str	r3, [sp, #32]
   2ac00:	b	28954 <__assert_fail@plt+0x1696c>
   2ac04:	mul	ip, r4, ip
   2ac08:	umull	r4, r5, r4, r3
   2ac0c:	mla	r3, r3, r7, ip
   2ac10:	add	r5, r3, r5
   2ac14:	strd	r4, [sp, #120]	; 0x78
   2ac18:	mov	r3, #1
   2ac1c:	str	r3, [sp, #44]	; 0x2c
   2ac20:	b	28d4c <__assert_fail@plt+0x16d64>
   2ac24:	bl	11b50 <__stack_chk_fail@plt>
   2ac28:	mul	r2, r4, ip
   2ac2c:	umull	r4, r5, r4, r3
   2ac30:	mla	r2, r3, r7, r2
   2ac34:	add	r3, r7, #1
   2ac38:	add	r5, r2, r5
   2ac3c:	cmp	r3, #1
   2ac40:	strd	r4, [sp, #120]	; 0x78
   2ac44:	bhi	2ac18 <__assert_fail@plt+0x18c30>
   2ac48:	add	r3, ip, #1
   2ac4c:	cmp	r3, #1
   2ac50:	bhi	2ac18 <__assert_fail@plt+0x18c30>
   2ac54:	cmp	r7, ip
   2ac58:	bne	2ae68 <__assert_fail@plt+0x18e80>
   2ac5c:	cmp	r4, #1
   2ac60:	sbcs	r3, r5, #0
   2ac64:	bge	28d4c <__assert_fail@plt+0x16d64>
   2ac68:	b	2ac18 <__assert_fail@plt+0x18c30>
   2ac6c:	mul	r1, r0, ip
   2ac70:	umull	r4, r5, r0, r3
   2ac74:	mla	r1, r3, r2, r1
   2ac78:	add	r3, r2, #1
   2ac7c:	add	r5, r1, r5
   2ac80:	cmp	r3, #1
   2ac84:	strd	r4, [sp, #136]	; 0x88
   2ac88:	bhi	2acac <__assert_fail@plt+0x18cc4>
   2ac8c:	add	r3, ip, #1
   2ac90:	cmp	r3, #1
   2ac94:	bhi	2acac <__assert_fail@plt+0x18cc4>
   2ac98:	cmp	r2, ip
   2ac9c:	bne	2acb8 <__assert_fail@plt+0x18cd0>
   2aca0:	cmp	r4, #1
   2aca4:	sbcs	r3, r5, #0
   2aca8:	bge	29a40 <__assert_fail@plt+0x17a58>
   2acac:	mov	r3, #1
   2acb0:	str	r3, [sp, #32]
   2acb4:	b	29a40 <__assert_fail@plt+0x17a58>
   2acb8:	ldrd	r2, [sp, #136]	; 0x88
   2acbc:	cmp	r2, #0
   2acc0:	sbcs	r3, r3, #0
   2acc4:	blt	29a40 <__assert_fail@plt+0x17a58>
   2acc8:	b	2acac <__assert_fail@plt+0x18cc4>
   2accc:	ldr	r2, [sp, #32]
   2acd0:	strd	r2, [sp, #248]	; 0xf8
   2acd4:	ldr	r3, [sp, #40]	; 0x28
   2acd8:	mov	r2, #276	; 0x114
   2acdc:	str	r2, [sp, #16]
   2ace0:	str	r4, [r3]
   2ace4:	mov	r3, #21
   2ace8:	b	2838c <__assert_fail@plt+0x163a4>
   2acec:	add	r5, fp, r5
   2acf0:	ldrsh	r2, [sp, #24]
   2acf4:	ldrb	r3, [r5, #2700]	; 0xa8c
   2acf8:	sub	r1, sl, r2, lsl #1
   2acfc:	sub	sl, r3, #28
   2ad00:	rsb	r2, r2, r2, lsl #3
   2ad04:	add	r3, fp, sl
   2ad08:	add	r3, r3, #2784	; 0xae0
   2ad0c:	sub	r2, r9, r2, lsl #3
   2ad10:	str	r1, [sp, #24]
   2ad14:	str	r2, [sp, #88]	; 0x58
   2ad18:	ldrsb	r7, [r3, #8]
   2ad1c:	b	285bc <__assert_fail@plt+0x165d4>
   2ad20:	cmp	r2, #65	; 0x41
   2ad24:	ldrne	r1, [pc, #172]	; 2add8 <__assert_fail@plt+0x18df0>
   2ad28:	beq	2ad8c <__assert_fail@plt+0x18da4>
   2ad2c:	ldr	ip, [r1, #12]
   2ad30:	mov	r0, r1
   2ad34:	cmp	ip, #0
   2ad38:	beq	2aa78 <__assert_fail@plt+0x18a90>
   2ad3c:	ldrb	ip, [ip]
   2ad40:	add	r1, r1, #12
   2ad44:	cmp	ip, r2
   2ad48:	bne	2ad2c <__assert_fail@plt+0x18d44>
   2ad4c:	ldr	r2, [r0, #20]
   2ad50:	ldr	r3, [r0, #16]
   2ad54:	str	r3, [sp, #16]
   2ad58:	asr	r3, r2, #31
   2ad5c:	b	28528 <__assert_fail@plt+0x16540>
   2ad60:	lsl	r3, r5, #4
   2ad64:	lsl	r2, r4, #4
   2ad68:	subs	r2, r2, r4
   2ad6c:	orr	r3, r3, r4, lsr #28
   2ad70:	sbc	r3, r3, r5
   2ad74:	lsl	r1, r2, #2
   2ad78:	lsl	r3, r3, #2
   2ad7c:	orr	r3, r3, r2, lsr #30
   2ad80:	mov	lr, #1
   2ad84:	mov	r2, r1
   2ad88:	b	29ce0 <__assert_fail@plt+0x17cf8>
   2ad8c:	ldr	r2, [pc, #72]	; 2addc <__assert_fail@plt+0x18df4>
   2ad90:	mvn	r3, #0
   2ad94:	ldr	r1, [pc, #68]	; 2ade0 <__assert_fail@plt+0x18df8>
   2ad98:	strd	r2, [sp, #248]	; 0xf8
   2ad9c:	str	r1, [sp, #16]
   2ada0:	b	28380 <__assert_fail@plt+0x16398>
   2ada4:	andeq	r3, r3, r4, asr #23
   2ada8:	andeq	r6, r3, r0, rrx
   2adac:	andeq	r5, r3, r4, ror #14
   2adb0:	andeq	r6, r3, r0, lsl r0
   2adb4:	blcc	fe6dd5bc <optarg@@GLIBC_2.4+0xfe6952b4>
   2adb8:	andeq	r6, r3, ip, lsr #32
   2adbc:	muleq	r3, r0, r8
   2adc0:	andeq	r6, r3, r8, lsl r0
   2adc4:	ldrdeq	r6, [r3], -ip
   2adc8:	andeq	r6, r3, r0, lsr #1
   2adcc:	andeq	r5, r3, r4, lsl r9
   2add0:	andeq	r6, r3, r0, lsr #32
   2add4:	andeq	r6, r3, r0, lsr r0
   2add8:	andeq	r5, r3, r0, lsl sl
   2addc:			; <UNDEFINED> instruction: 0xfffff1f0
   2ade0:	andeq	r0, r0, r1, lsl r1
   2ade4:	lsl	r1, sl, #2
   2ade8:	lsl	lr, fp, #2
   2adec:	adds	r0, r1, sl
   2adf0:	orr	lr, lr, sl, lsr #30
   2adf4:	adc	lr, lr, fp
   2adf8:	adds	r0, r0, r0
   2adfc:	adc	lr, lr, lr
   2ae00:	mov	r1, lr
   2ae04:	mov	lr, #1
   2ae08:	b	283ac <__assert_fail@plt+0x163c4>
   2ae0c:	mul	ip, r0, ip
   2ae10:	umull	r0, r1, r0, r3
   2ae14:	mla	ip, r3, r2, ip
   2ae18:	add	r1, ip, r1
   2ae1c:	strd	r0, [sp, #136]	; 0x88
   2ae20:	b	2acac <__assert_fail@plt+0x18cc4>
   2ae24:	mul	r1, r0, ip
   2ae28:	umull	r4, r5, r0, r3
   2ae2c:	mla	r1, r3, r2, r1
   2ae30:	add	r3, r2, #1
   2ae34:	add	r5, r1, r5
   2ae38:	cmp	r3, #1
   2ae3c:	strd	r4, [sp, #128]	; 0x80
   2ae40:	bhi	2abf8 <__assert_fail@plt+0x18c10>
   2ae44:	add	r3, ip, #1
   2ae48:	cmp	r3, #1
   2ae4c:	bhi	2abf8 <__assert_fail@plt+0x18c10>
   2ae50:	cmp	r2, ip
   2ae54:	bne	2ae7c <__assert_fail@plt+0x18e94>
   2ae58:	cmp	r4, #1
   2ae5c:	sbcs	r3, r5, #0
   2ae60:	bge	28954 <__assert_fail@plt+0x1696c>
   2ae64:	b	2abf8 <__assert_fail@plt+0x18c10>
   2ae68:	ldrd	r2, [sp, #120]	; 0x78
   2ae6c:	cmp	r2, #0
   2ae70:	sbcs	r3, r3, #0
   2ae74:	blt	28d4c <__assert_fail@plt+0x16d64>
   2ae78:	b	2ac18 <__assert_fail@plt+0x18c30>
   2ae7c:	ldrd	r2, [sp, #128]	; 0x80
   2ae80:	cmp	r2, #0
   2ae84:	sbcs	r3, r3, #0
   2ae88:	blt	28954 <__assert_fail@plt+0x1696c>
   2ae8c:	b	2abf8 <__assert_fail@plt+0x18c10>
   2ae90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae94:	sub	sp, sp, #940	; 0x3ac
   2ae98:	mov	ip, r1
   2ae9c:	str	r1, [sp, #32]
   2aea0:	ldr	r1, [pc, #1392]	; 2b418 <__assert_fail@plt+0x19430>
   2aea4:	str	r0, [sp, #60]	; 0x3c
   2aea8:	mov	r0, ip
   2aeac:	ldr	r1, [r1]
   2aeb0:	mov	r6, r2
   2aeb4:	mov	r7, r3
   2aeb8:	str	r1, [sp, #932]	; 0x3a4
   2aebc:	bl	11d78 <strlen@plt>
   2aec0:	ldr	r3, [sp, #976]	; 0x3d0
   2aec4:	cmp	r6, #0
   2aec8:	str	r3, [sp, #40]	; 0x28
   2aecc:	ldr	r3, [sp, #980]	; 0x3d4
   2aed0:	str	r3, [sp, #56]	; 0x38
   2aed4:	str	r0, [sp, #64]	; 0x40
   2aed8:	beq	2b8d8 <__assert_fail@plt+0x198f0>
   2aedc:	ldr	r4, [r6, #4]
   2aee0:	ldr	r2, [sp, #32]
   2aee4:	ldr	r3, [r6]
   2aee8:	str	r3, [sp, #48]	; 0x30
   2aeec:	mov	r5, r2
   2aef0:	ldrb	r3, [r2], #1
   2aef4:	cmp	r3, #9
   2aef8:	bcc	2af0c <__assert_fail@plt+0x18f24>
   2aefc:	cmp	r3, #13
   2af00:	bls	2aeec <__assert_fail@plt+0x18f04>
   2af04:	cmp	r3, #32
   2af08:	beq	2aeec <__assert_fail@plt+0x18f04>
   2af0c:	mov	r2, #4
   2af10:	ldr	r1, [pc, #1284]	; 2b41c <__assert_fail@plt+0x19434>
   2af14:	mov	r0, r5
   2af18:	bl	11f94 <strncmp@plt>
   2af1c:	cmp	r0, #0
   2af20:	bne	2af7c <__assert_fail@plt+0x18f94>
   2af24:	ldrb	sl, [r5, #4]
   2af28:	add	r8, r5, #4
   2af2c:	cmp	sl, #0
   2af30:	beq	2af7c <__assert_fail@plt+0x18f94>
   2af34:	mov	r3, r8
   2af38:	mov	r2, sl
   2af3c:	mov	r0, #1
   2af40:	b	2af60 <__assert_fail@plt+0x18f78>
   2af44:	cmp	r2, #34	; 0x22
   2af48:	beq	2b364 <__assert_fail@plt+0x1937c>
   2af4c:	ldrb	r2, [r3, #1]
   2af50:	add	r0, r0, #1
   2af54:	add	r3, r3, #1
   2af58:	cmp	r2, #0
   2af5c:	beq	2af7c <__assert_fail@plt+0x18f94>
   2af60:	cmp	r2, #92	; 0x5c
   2af64:	bne	2af44 <__assert_fail@plt+0x18f5c>
   2af68:	ldrb	r2, [r3, #1]
   2af6c:	add	r3, r3, #1
   2af70:	cmp	r2, #92	; 0x5c
   2af74:	cmpne	r2, #34	; 0x22
   2af78:	beq	2af4c <__assert_fail@plt+0x18f64>
   2af7c:	ldr	r9, [sp, #40]	; 0x28
   2af80:	mov	r1, r6
   2af84:	add	r2, sp, #220	; 0xdc
   2af88:	mov	r0, r9
   2af8c:	bl	2fa34 <renameat2@@Base+0xd20>
   2af90:	cmp	r0, #0
   2af94:	beq	2b8e8 <__assert_fail@plt+0x19900>
   2af98:	mov	r3, #0
   2af9c:	str	r3, [sp, #44]	; 0x2c
   2afa0:	ldr	r3, [sp, #240]	; 0xf0
   2afa4:	ldr	r6, [sp, #236]	; 0xec
   2afa8:	ldr	sl, [pc, #1272]	; 2b4a8 <__assert_fail@plt+0x194c0>
   2afac:	ldrb	r8, [r5]
   2afb0:	adds	r0, sl, r3
   2afb4:	add	r6, r6, #1
   2afb8:	ldr	ip, [sp, #228]	; 0xe4
   2afbc:	ldr	lr, [sp, #224]	; 0xe0
   2afc0:	mov	sl, r0
   2afc4:	mov	fp, #0
   2afc8:	ldr	r0, [sp, #232]	; 0xe8
   2afcc:	adc	r1, fp, r3, asr #31
   2afd0:	ldr	r2, [pc, #1096]	; 2b420 <__assert_fail@plt+0x19438>
   2afd4:	cmp	r8, #0
   2afd8:	and	r3, r7, #1
   2afdc:	add	r8, sp, #360	; 0x168
   2afe0:	asr	r7, r6, #31
   2afe4:	mov	fp, r1
   2afe8:	moveq	r5, r2
   2afec:	asr	r1, r0, #31
   2aff0:	mov	r2, ip
   2aff4:	strd	r6, [r8, #48]	; 0x30
   2aff8:	strb	r3, [sp, #533]	; 0x215
   2affc:	mov	r6, lr
   2b000:	asr	r3, ip, #31
   2b004:	asr	r7, lr, #31
   2b008:	strd	sl, [r8, #32]
   2b00c:	str	r4, [sp, #444]	; 0x1bc
   2b010:	ldr	sl, [sp, #252]	; 0xfc
   2b014:	mov	r4, #0
   2b018:	ldr	lr, [sp, #220]	; 0xdc
   2b01c:	strd	r0, [r8, #56]	; 0x38
   2b020:	strd	r2, [r8, #64]	; 0x40
   2b024:	mov	r1, r4
   2b028:	mov	ip, #2
   2b02c:	mov	r2, #56	; 0x38
   2b030:	strd	r6, [r8, #72]	; 0x48
   2b034:	add	r0, sp, #448	; 0x1c0
   2b038:	add	r7, pc, #976	; 0x3d0
   2b03c:	ldrd	r6, [r7]
   2b040:	str	r5, [sp, #352]	; 0x160
   2b044:	str	r4, [sp, #400]	; 0x190
   2b048:	str	lr, [sp, #440]	; 0x1b8
   2b04c:	str	sl, [sp, #164]	; 0xa4
   2b050:	str	ip, [sp, #380]	; 0x17c
   2b054:	bl	11df0 <memset@plt>
   2b058:	ldr	r3, [sp, #48]	; 0x30
   2b05c:	ldr	r2, [sp, #260]	; 0x104
   2b060:	adds	r0, r6, r3
   2b064:	adc	r1, r7, r3, asr #31
   2b068:	mov	r7, r1
   2b06c:	add	r1, sp, #504	; 0x1f8
   2b070:	add	r5, r3, #7733248	; 0x760000
   2b074:	add	fp, r3, #30932992	; 0x1d80000
   2b078:	strh	r4, [r1]
   2b07c:	add	r1, sp, #532	; 0x214
   2b080:	ldr	r3, [pc, #1076]	; 2b4bc <__assert_fail@plt+0x194d4>
   2b084:	add	r1, r1, #2
   2b088:	mov	r6, r0
   2b08c:	add	r5, r5, #42752	; 0xa700
   2b090:	add	fp, fp, #171008	; 0x29c00
   2b094:	str	r4, [sp, #508]	; 0x1fc
   2b098:	str	r4, [sp, #512]	; 0x200
   2b09c:	str	r4, [sp, #524]	; 0x20c
   2b0a0:	str	r4, [sp, #516]	; 0x204
   2b0a4:	str	r4, [sp, #520]	; 0x208
   2b0a8:	str	r4, [sp, #528]	; 0x210
   2b0ac:	strb	r4, [sp, #532]	; 0x214
   2b0b0:	str	r4, [sp, #536]	; 0x218
   2b0b4:	strb	r4, [sp, #540]	; 0x21c
   2b0b8:	str	sl, [sp, #552]	; 0x228
   2b0bc:	str	r4, [sp, #556]	; 0x22c
   2b0c0:	strh	r4, [r1]
   2b0c4:	str	r2, [sp, #544]	; 0x220
   2b0c8:	str	r3, [sp, #548]	; 0x224
   2b0cc:	mov	r3, #0
   2b0d0:	mvn	r2, #0
   2b0d4:	cmp	r7, r3
   2b0d8:	cmpeq	r6, r2
   2b0dc:	bhi	2b134 <__assert_fail@plt+0x1914c>
   2b0e0:	add	r2, sp, #308	; 0x134
   2b0e4:	add	r1, sp, #264	; 0x108
   2b0e8:	mov	r0, r9
   2b0ec:	str	r5, [sp, #264]	; 0x108
   2b0f0:	bl	2fa34 <renameat2@@Base+0xd20>
   2b0f4:	cmp	r0, #0
   2b0f8:	beq	2b118 <__assert_fail@plt+0x19130>
   2b0fc:	ldr	r3, [sp, #348]	; 0x15c
   2b100:	cmp	r3, #0
   2b104:	beq	2b118 <__assert_fail@plt+0x19130>
   2b108:	ldr	r2, [sp, #340]	; 0x154
   2b10c:	ldr	r1, [sp, #552]	; 0x228
   2b110:	cmp	r2, r1
   2b114:	bne	2bae0 <__assert_fail@plt+0x19af8>
   2b118:	ldr	r3, [pc, #772]	; 2b424 <__assert_fail@plt+0x1943c>
   2b11c:	add	r5, r5, #7733248	; 0x760000
   2b120:	adds	r6, r6, r3
   2b124:	add	r5, r5, #42752	; 0xa700
   2b128:	adc	r7, r7, r4
   2b12c:	cmp	fp, r5
   2b130:	bne	2b0cc <__assert_fail@plt+0x190e4>
   2b134:	ldr	r0, [sp, #544]	; 0x220
   2b138:	cmp	r0, #0
   2b13c:	beq	2b160 <__assert_fail@plt+0x19178>
   2b140:	ldr	r1, [sp, #556]	; 0x22c
   2b144:	cmp	r1, #0
   2b148:	beq	2b160 <__assert_fail@plt+0x19178>
   2b14c:	bl	11a48 <strcmp@plt>
   2b150:	cmp	r0, #0
   2b154:	mvneq	r3, #0
   2b158:	streq	r0, [sp, #556]	; 0x22c
   2b15c:	streq	r3, [sp, #552]	; 0x228
   2b160:	add	r0, sp, #352	; 0x160
   2b164:	bl	27d08 <__assert_fail@plt+0x15d20>
   2b168:	cmp	r0, #0
   2b16c:	bne	2b328 <__assert_fail@plt+0x19340>
   2b170:	ldrb	r4, [sp, #533]	; 0x215
   2b174:	cmp	r4, #0
   2b178:	bne	2b4cc <__assert_fail@plt+0x194e4>
   2b17c:	ldrb	r6, [sp, #504]	; 0x1f8
   2b180:	cmp	r6, #0
   2b184:	beq	2b2a4 <__assert_fail@plt+0x192bc>
   2b188:	add	r3, sp, #440	; 0x1b8
   2b18c:	ldm	r3, {r0, r1}
   2b190:	ldr	r3, [sp, #60]	; 0x3c
   2b194:	stm	r3, {r0, r1}
   2b198:	cmp	r4, #0
   2b19c:	moveq	r6, #1
   2b1a0:	beq	2b268 <__assert_fail@plt+0x19280>
   2b1a4:	ldr	r3, [sp, #56]	; 0x38
   2b1a8:	cmp	r3, #0
   2b1ac:	beq	2bafc <__assert_fail@plt+0x19b14>
   2b1b0:	ldr	r1, [pc, #744]	; 2b4a0 <__assert_fail@plt+0x194b8>
   2b1b4:	ldr	r0, [sp, #56]	; 0x38
   2b1b8:	bl	11a48 <strcmp@plt>
   2b1bc:	cmp	r0, #0
   2b1c0:	bne	2b99c <__assert_fail@plt+0x199b4>
   2b1c4:	ldr	r0, [pc, #604]	; 2b428 <__assert_fail@plt+0x19440>
   2b1c8:	bl	27380 <__assert_fail@plt+0x15398>
   2b1cc:	ldr	r5, [sp, #60]	; 0x3c
   2b1d0:	ldr	r0, [pc, #596]	; 2b42c <__assert_fail@plt+0x19444>
   2b1d4:	ldr	r2, [r5]
   2b1d8:	ldr	r1, [r5, #4]
   2b1dc:	asr	r3, r2, #31
   2b1e0:	str	r1, [sp]
   2b1e4:	bl	27380 <__assert_fail@plt+0x15398>
   2b1e8:	add	r1, sp, #264	; 0x108
   2b1ec:	mov	r0, r5
   2b1f0:	bl	11a24 <gmtime_r@plt>
   2b1f4:	cmp	r0, #0
   2b1f8:	beq	2b218 <__assert_fail@plt+0x19230>
   2b1fc:	mov	r1, #0
   2b200:	add	r0, sp, #264	; 0x108
   2b204:	add	r2, sp, #632	; 0x278
   2b208:	bl	2775c <__assert_fail@plt+0x15774>
   2b20c:	mov	r1, r0
   2b210:	ldr	r0, [pc, #536]	; 2b430 <__assert_fail@plt+0x19448>
   2b214:	bl	27380 <__assert_fail@plt+0x15398>
   2b218:	ldr	r1, [sp, #60]	; 0x3c
   2b21c:	add	r2, sp, #308	; 0x134
   2b220:	mov	r0, r9
   2b224:	bl	2fa34 <renameat2@@Base+0xd20>
   2b228:	cmp	r0, #0
   2b22c:	beq	2b264 <__assert_fail@plt+0x1927c>
   2b230:	add	r2, sp, #632	; 0x278
   2b234:	mov	r1, #0
   2b238:	add	r0, sp, #308	; 0x134
   2b23c:	ldr	r6, [sp, #344]	; 0x158
   2b240:	bl	2775c <__assert_fail@plt+0x15774>
   2b244:	add	r1, sp, #604	; 0x25c
   2b248:	mov	r5, r0
   2b24c:	mov	r0, r6
   2b250:	bl	271e8 <__assert_fail@plt+0x15200>
   2b254:	mov	r1, r5
   2b258:	mov	r2, r0
   2b25c:	ldr	r0, [pc, #464]	; 2b434 <__assert_fail@plt+0x1944c>
   2b260:	bl	27380 <__assert_fail@plt+0x15398>
   2b264:	mov	r6, r4
   2b268:	ldr	r3, [sp, #40]	; 0x28
   2b26c:	cmp	r9, r3
   2b270:	beq	2b27c <__assert_fail@plt+0x19294>
   2b274:	mov	r0, r9
   2b278:	bl	2fa28 <renameat2@@Base+0xd14>
   2b27c:	ldr	r0, [sp, #44]	; 0x2c
   2b280:	bl	11ab4 <free@plt>
   2b284:	ldr	r3, [pc, #396]	; 2b418 <__assert_fail@plt+0x19430>
   2b288:	ldr	r2, [sp, #932]	; 0x3a4
   2b28c:	mov	r0, r6
   2b290:	ldr	r3, [r3]
   2b294:	cmp	r2, r3
   2b298:	bne	2c9fc <__assert_fail@plt+0x1aa14>
   2b29c:	add	sp, sp, #940	; 0x3ac
   2b2a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b2a4:	ldr	r0, [sp, #524]	; 0x20c
   2b2a8:	ldr	r1, [sp, #508]	; 0x1fc
   2b2ac:	ldr	ip, [sp, #512]	; 0x200
   2b2b0:	orr	r3, r0, r1
   2b2b4:	orr	r3, r3, ip
   2b2b8:	ldr	lr, [sp, #520]	; 0x208
   2b2bc:	ldr	r2, [sp, #516]	; 0x204
   2b2c0:	ldr	ip, [sp, #528]	; 0x210
   2b2c4:	orr	r3, r3, lr
   2b2c8:	add	r2, r2, ip
   2b2cc:	orr	r3, r3, r2
   2b2d0:	cmp	r3, #1
   2b2d4:	ble	2b520 <__assert_fail@plt+0x19538>
   2b2d8:	cmp	r4, #0
   2b2dc:	beq	2b268 <__assert_fail@plt+0x19280>
   2b2e0:	cmp	r0, #1
   2b2e4:	bgt	2b9ac <__assert_fail@plt+0x199c4>
   2b2e8:	cmp	r1, #1
   2b2ec:	bgt	2b9d4 <__assert_fail@plt+0x199ec>
   2b2f0:	ldr	r3, [sp, #512]	; 0x200
   2b2f4:	cmp	r3, #1
   2b2f8:	bgt	2b9c8 <__assert_fail@plt+0x199e0>
   2b2fc:	ldr	r3, [sp, #520]	; 0x208
   2b300:	cmp	r3, #1
   2b304:	bgt	2b9bc <__assert_fail@plt+0x199d4>
   2b308:	ldr	r3, [sp, #516]	; 0x204
   2b30c:	ldr	r2, [sp, #528]	; 0x210
   2b310:	add	r3, r3, r2
   2b314:	cmp	r3, #1
   2b318:	ble	2b268 <__assert_fail@plt+0x19280>
   2b31c:	ldr	r0, [pc, #276]	; 2b438 <__assert_fail@plt+0x19450>
   2b320:	bl	27380 <__assert_fail@plt+0x15398>
   2b324:	b	2b268 <__assert_fail@plt+0x19280>
   2b328:	ldrb	r6, [sp, #533]	; 0x215
   2b32c:	cmp	r6, #0
   2b330:	beq	2b268 <__assert_fail@plt+0x19280>
   2b334:	ldr	r0, [sp, #32]
   2b338:	ldr	ip, [sp, #64]	; 0x40
   2b33c:	ldr	r1, [sp, #352]	; 0x160
   2b340:	add	r0, r0, ip
   2b344:	ldr	r2, [pc, #240]	; 2b43c <__assert_fail@plt+0x19454>
   2b348:	ldr	r3, [pc, #240]	; 2b440 <__assert_fail@plt+0x19458>
   2b34c:	cmp	r1, r0
   2b350:	movcs	r0, r2
   2b354:	movcc	r0, r3
   2b358:	bl	27380 <__assert_fail@plt+0x15398>
   2b35c:	mov	r6, #0
   2b360:	b	2b268 <__assert_fail@plt+0x19280>
   2b364:	cmp	r0, #100	; 0x64
   2b368:	bgt	2b8bc <__assert_fail@plt+0x198d4>
   2b36c:	add	r3, sp, #732	; 0x2dc
   2b370:	str	r3, [sp, #56]	; 0x38
   2b374:	mov	r3, #0
   2b378:	str	r3, [sp, #44]	; 0x2c
   2b37c:	cmp	sl, #34	; 0x22
   2b380:	ldr	r2, [sp, #56]	; 0x38
   2b384:	beq	2b3b0 <__assert_fail@plt+0x193c8>
   2b388:	sub	sl, sl, #92	; 0x5c
   2b38c:	clz	sl, sl
   2b390:	lsr	sl, sl, #5
   2b394:	add	r3, r8, sl
   2b398:	ldrb	r1, [r8, sl]
   2b39c:	ldrb	sl, [r3, #1]
   2b3a0:	add	r8, r3, #1
   2b3a4:	strb	r1, [r2], #1
   2b3a8:	cmp	sl, #34	; 0x22
   2b3ac:	bne	2b388 <__assert_fail@plt+0x193a0>
   2b3b0:	mov	r3, #0
   2b3b4:	strb	r3, [r2]
   2b3b8:	ldr	r0, [sp, #56]	; 0x38
   2b3bc:	bl	2f7a8 <renameat2@@Base+0xa94>
   2b3c0:	subs	r9, r0, #0
   2b3c4:	moveq	r6, r9
   2b3c8:	beq	2b27c <__assert_fail@plt+0x19294>
   2b3cc:	add	r8, r8, #1
   2b3d0:	mov	r5, r8
   2b3d4:	ldrb	r3, [r8], #1
   2b3d8:	cmp	r3, #9
   2b3dc:	bcc	2b3f0 <__assert_fail@plt+0x19408>
   2b3e0:	cmp	r3, #13
   2b3e4:	bls	2b3d0 <__assert_fail@plt+0x193e8>
   2b3e8:	cmp	r3, #32
   2b3ec:	beq	2b3d0 <__assert_fail@plt+0x193e8>
   2b3f0:	mov	r1, r6
   2b3f4:	add	r2, sp, #220	; 0xdc
   2b3f8:	mov	r0, r9
   2b3fc:	bl	2fa34 <renameat2@@Base+0xd20>
   2b400:	subs	r6, r0, #0
   2b404:	bne	2afa0 <__assert_fail@plt+0x18fb8>
   2b408:	b	2b268 <__assert_fail@plt+0x19280>
   2b40c:	nop			; (mov r0, r0)
   2b410:	rsbshi	sl, r6, r0, lsl #14
   2b414:	andeq	r0, r0, r0
   2b418:	andeq	r7, r4, r8, lsl #30
   2b41c:	strdeq	r6, [r3], -r4
   2b420:	andeq	r6, r3, r0, lsr #2
   2b424:	rsbseq	sl, r6, r0, lsl #14
   2b428:	andeq	r6, r3, ip, lsr sl
   2b42c:	andeq	r6, r3, r0, lsl #21
   2b430:	andeq	r6, r3, r4, lsr #21
   2b434:			; <UNDEFINED> instruction: 0x00036ab8
   2b438:	andeq	r6, r3, ip, asr r3
   2b43c:	andeq	r6, r3, r4, lsr #2
   2b440:	andeq	r6, r3, ip, lsr r1
   2b444:	strdeq	r6, [r3], -ip
   2b448:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   2b44c:	andeq	r6, r3, r4, asr #4
   2b450:	andeq	r6, r3, r8, ror r4
   2b454:	muleq	r3, ip, r4
   2b458:			; <UNDEFINED> instruction: 0x000364bc
   2b45c:	strdeq	r5, [r3], -r8
   2b460:	andeq	r2, r3, ip, ror r8
   2b464:	ldrdeq	r6, [r3], -ip
   2b468:	andeq	r4, r3, ip, lsl #23
   2b46c:	andeq	r6, r3, r8, lsl r5
   2b470:	andeq	r6, r3, ip, lsl #11
   2b474:	andeq	r6, r3, r0, ror #3
   2b478:	andeq	r6, r3, ip, asr #3
   2b47c:			; <UNDEFINED> instruction: 0x000365b0
   2b480:	andeq	r6, r3, r0, lsl r2
   2b484:			; <UNDEFINED> instruction: 0x000362b4
   2b488:			; <UNDEFINED> instruction: 0x000362bc
   2b48c:	andeq	r6, r3, r8, asr sl
   2b490:	andeq	r6, r3, r4, asr #5
   2b494:	andeq	r6, r3, r0, lsr r3
   2b498:	andeq	r6, r3, ip, lsl #6
   2b49c:	andeq	r6, r3, r8, ror #5
   2b4a0:	andeq	r6, r3, ip, asr r2
   2b4a4:	andeq	r6, r3, r4, ror #4
   2b4a8:	andeq	r0, r0, ip, ror #14
   2b4ac:	andeq	r6, r3, r4, lsl #7
   2b4b0:	ldrdeq	r6, [r3], -r0
   2b4b4:			; <UNDEFINED> instruction: 0xfffff894
   2b4b8:	andeq	r6, r3, ip, lsr #4
   2b4bc:	andeq	r0, r0, sp, lsl #2
   2b4c0:	andeq	r6, r3, r0, lsr #20
   2b4c4:	andeq	r5, r0, r8, asr r8
   2b4c8:	subls	r2, r9, #-1828716544	; 0x93000000
   2b4cc:	ldr	r0, [pc, #-144]	; 2b444 <__assert_fail@plt+0x1945c>
   2b4d0:	bl	27380 <__assert_fail@plt+0x15398>
   2b4d4:	ldrb	r3, [sp, #504]	; 0x1f8
   2b4d8:	ldr	r4, [pc, #-152]	; 2b448 <__assert_fail@plt+0x19460>
   2b4dc:	cmp	r3, #0
   2b4e0:	bne	2b8f8 <__assert_fail@plt+0x19910>
   2b4e4:	ldr	r3, [sp, #528]	; 0x210
   2b4e8:	ldr	r5, [r4]
   2b4ec:	cmp	r3, #0
   2b4f0:	bne	2bac8 <__assert_fail@plt+0x19ae0>
   2b4f4:	ldr	r3, [sp, #56]	; 0x38
   2b4f8:	cmp	r3, #0
   2b4fc:	beq	2c090 <__assert_fail@plt+0x1a0a8>
   2b500:	ldr	r2, [sp, #40]	; 0x28
   2b504:	cmp	r2, r9
   2b508:	beq	2b9f4 <__assert_fail@plt+0x19a0c>
   2b50c:	mov	r0, r5
   2b510:	ldr	r2, [pc, #-204]	; 2b44c <__assert_fail@plt+0x19464>
   2b514:	mov	r1, #1
   2b518:	bl	11e38 <__fprintf_chk@plt>
   2b51c:	b	2b90c <__assert_fail@plt+0x19924>
   2b520:	ldrd	r2, [r8, #32]
   2b524:	cmp	r2, #0
   2b528:	mov	fp, r3
   2b52c:	sbcs	r3, r3, #0
   2b530:	mov	sl, r2
   2b534:	blt	2ba94 <__assert_fail@plt+0x19aac>
   2b538:	ldr	r3, [sp, #400]	; 0x190
   2b53c:	cmp	r3, #2
   2b540:	beq	2ba20 <__assert_fail@plt+0x19a38>
   2b544:	ldr	r3, [pc, #-152]	; 2b4b4 <__assert_fail@plt+0x194cc>
   2b548:	ldr	r2, [pc, #-168]	; 2b4a8 <__assert_fail@plt+0x194c0>
   2b54c:	adds	r3, sl, r3
   2b550:	str	r3, [sp, #72]	; 0x48
   2b554:	mvn	ip, #0
   2b558:	mov	r3, #0
   2b55c:	adc	r1, fp, ip
   2b560:	cmp	fp, r3
   2b564:	str	r1, [sp, #76]	; 0x4c
   2b568:	cmpeq	sl, r2
   2b56c:	mov	r7, #0
   2b570:	ldrd	r2, [sp, #72]	; 0x48
   2b574:	bcs	2b9e0 <__assert_fail@plt+0x199f8>
   2b578:	cmp	r2, #0
   2b57c:	sbcs	r3, r3, #0
   2b580:	bge	2b9ec <__assert_fail@plt+0x19a04>
   2b584:	ldrd	r0, [sp, #72]	; 0x48
   2b588:	asr	r3, r0, #31
   2b58c:	cmp	r1, r3
   2b590:	cmpeq	r0, r0
   2b594:	movne	r7, #1
   2b598:	and	r7, r7, #1
   2b59c:	str	r0, [sp, #152]	; 0x98
   2b5a0:	cmp	r7, #0
   2b5a4:	bne	2ba74 <__assert_fail@plt+0x19a8c>
   2b5a8:	ldrd	r2, [r8, #48]	; 0x30
   2b5ac:	mvn	r4, #0
   2b5b0:	mvn	r5, #0
   2b5b4:	adds	r0, r2, r4
   2b5b8:	adcs	r1, r3, r5
   2b5bc:	asr	r3, r0, #31
   2b5c0:	movvs	lr, #1
   2b5c4:	movvc	lr, #0
   2b5c8:	cmp	r1, r3
   2b5cc:	cmpeq	r0, r0
   2b5d0:	movne	lr, #1
   2b5d4:	cmp	lr, #0
   2b5d8:	ldrb	ip, [sp, #533]	; 0x215
   2b5dc:	str	r0, [sp, #148]	; 0x94
   2b5e0:	mov	lr, r0
   2b5e4:	bne	2ba80 <__assert_fail@plt+0x19a98>
   2b5e8:	ldrd	r2, [r8, #56]	; 0x38
   2b5ec:	asr	r1, r2, #31
   2b5f0:	cmp	r3, r1
   2b5f4:	cmpeq	r2, r2
   2b5f8:	movne	r3, #1
   2b5fc:	moveq	r3, #0
   2b600:	str	r2, [sp, #144]	; 0x90
   2b604:	mov	r5, r2
   2b608:	str	r3, [sp, #32]
   2b60c:	bne	2ba80 <__assert_fail@plt+0x19a98>
   2b610:	ldr	r4, [sp, #524]	; 0x20c
   2b614:	cmp	r4, #0
   2b618:	bne	2c014 <__assert_fail@plt+0x1a02c>
   2b61c:	ldrb	r3, [sp, #505]	; 0x1f9
   2b620:	cmp	r3, #0
   2b624:	beq	2c214 <__assert_fail@plt+0x1a22c>
   2b628:	ldr	r3, [sp, #508]	; 0x1fc
   2b62c:	cmp	r3, #0
   2b630:	bne	2c214 <__assert_fail@plt+0x1a22c>
   2b634:	ldr	r2, [sp, #512]	; 0x200
   2b638:	cmp	r2, #0
   2b63c:	beq	2c014 <__assert_fail@plt+0x1a02c>
   2b640:	cmp	ip, #0
   2b644:	str	r7, [sp, #132]	; 0x84
   2b648:	str	r7, [sp, #136]	; 0x88
   2b64c:	str	r7, [sp, #140]	; 0x8c
   2b650:	str	r7, [sp, #444]	; 0x1bc
   2b654:	bne	2c238 <__assert_fail@plt+0x1a250>
   2b658:	mov	ip, r7
   2b65c:	mov	fp, r7
   2b660:	mvn	r2, #0
   2b664:	str	r2, [sp, #164]	; 0xa4
   2b668:	ldr	r2, [sp, #516]	; 0x204
   2b66c:	ldr	r4, [sp, #152]	; 0x98
   2b670:	cmp	r2, #0
   2b674:	add	r1, sp, #132	; 0x84
   2b678:	ldrne	r2, [sp, #372]	; 0x174
   2b67c:	ldreq	r2, [sp, #164]	; 0xa4
   2b680:	mov	r0, r9
   2b684:	strne	r2, [sp, #164]	; 0xa4
   2b688:	str	r3, [sp, #176]	; 0xb0
   2b68c:	str	ip, [sp, #184]	; 0xb8
   2b690:	str	lr, [sp, #192]	; 0xc0
   2b694:	str	r2, [sp, #208]	; 0xd0
   2b698:	str	r4, [sp, #196]	; 0xc4
   2b69c:	str	fp, [sp, #180]	; 0xb4
   2b6a0:	str	r5, [sp, #188]	; 0xbc
   2b6a4:	bl	2fad0 <renameat2@@Base+0xdbc>
   2b6a8:	add	r2, sp, #132	; 0x84
   2b6ac:	add	r1, sp, #176	; 0xb0
   2b6b0:	mov	r3, r0
   2b6b4:	mov	r4, r0
   2b6b8:	mov	r0, r9
   2b6bc:	bl	27400 <__assert_fail@plt+0x15418>
   2b6c0:	cmp	r0, #0
   2b6c4:	bne	2bba4 <__assert_fail@plt+0x19bbc>
   2b6c8:	ldr	r3, [sp, #528]	; 0x210
   2b6cc:	cmp	r3, #0
   2b6d0:	str	r3, [sp, #64]	; 0x40
   2b6d4:	bne	2bb08 <__assert_fail@plt+0x19b20>
   2b6d8:	ldr	r3, [sp, #176]	; 0xb0
   2b6dc:	ldr	r2, [sp, #132]	; 0x84
   2b6e0:	ldr	r1, [sp, #180]	; 0xb4
   2b6e4:	ldr	r0, [sp, #136]	; 0x88
   2b6e8:	str	r3, [sp, #60]	; 0x3c
   2b6ec:	cmp	r3, r2
   2b6f0:	cmpeq	r1, r0
   2b6f4:	str	r2, [sp, #72]	; 0x48
   2b6f8:	ldr	r3, [sp, #140]	; 0x8c
   2b6fc:	ldr	r2, [sp, #152]	; 0x98
   2b700:	ldr	ip, [sp, #184]	; 0xb8
   2b704:	str	r3, [sp, #48]	; 0x30
   2b708:	mov	sl, r2
   2b70c:	str	r1, [sp, #80]	; 0x50
   2b710:	str	r0, [sp, #88]	; 0x58
   2b714:	str	ip, [sp, #56]	; 0x38
   2b718:	ldr	fp, [sp, #188]	; 0xbc
   2b71c:	ldr	r8, [sp, #144]	; 0x90
   2b720:	ldr	r7, [sp, #192]	; 0xc0
   2b724:	ldr	r5, [sp, #148]	; 0x94
   2b728:	ldr	r3, [sp, #196]	; 0xc4
   2b72c:	ldrb	r2, [sp, #533]	; 0x215
   2b730:	bne	2c698 <__assert_fail@plt+0x1a6b0>
   2b734:	ldr	r0, [sp, #56]	; 0x38
   2b738:	ldr	ip, [sp, #48]	; 0x30
   2b73c:	sub	r1, fp, r8
   2b740:	cmp	r0, ip
   2b744:	clz	r1, r1
   2b748:	lsr	r1, r1, #5
   2b74c:	moveq	r1, #0
   2b750:	cmp	r1, #0
   2b754:	beq	2c698 <__assert_fail@plt+0x1a6b0>
   2b758:	cmp	r7, r5
   2b75c:	cmpeq	r3, sl
   2b760:	bne	2c698 <__assert_fail@plt+0x1a6b0>
   2b764:	cmp	r2, #0
   2b768:	beq	2b268 <__assert_fail@plt+0x19280>
   2b76c:	ldr	r0, [pc, #-804]	; 2b450 <__assert_fail@plt+0x19468>
   2b770:	add	r4, sp, #832	; 0x340
   2b774:	bl	27380 <__assert_fail@plt+0x15398>
   2b778:	mov	r2, r4
   2b77c:	add	r1, sp, #352	; 0x160
   2b780:	add	r0, sp, #176	; 0xb0
   2b784:	bl	2775c <__assert_fail@plt+0x15774>
   2b788:	mov	r1, r0
   2b78c:	ldr	r0, [pc, #-832]	; 2b454 <__assert_fail@plt+0x1946c>
   2b790:	bl	27380 <__assert_fail@plt+0x15398>
   2b794:	mov	r2, r4
   2b798:	add	r1, sp, #352	; 0x160
   2b79c:	add	r0, sp, #132	; 0x84
   2b7a0:	bl	2775c <__assert_fail@plt+0x15774>
   2b7a4:	mov	r1, r0
   2b7a8:	ldr	r0, [pc, #-856]	; 2b458 <__assert_fail@plt+0x19470>
   2b7ac:	bl	27380 <__assert_fail@plt+0x15398>
   2b7b0:	ldr	r1, [pc, #-860]	; 2b45c <__assert_fail@plt+0x19474>
   2b7b4:	ldr	r0, [pc, #-860]	; 2b460 <__assert_fail@plt+0x19478>
   2b7b8:	mov	sl, r1
   2b7bc:	mov	r2, r1
   2b7c0:	mov	r3, #1
   2b7c4:	str	r3, [sp, #32]
   2b7c8:	ldr	ip, [sp, #88]	; 0x58
   2b7cc:	str	r0, [sp, #16]
   2b7d0:	ldr	r0, [sp, #80]	; 0x50
   2b7d4:	ldr	lr, [pc, #-896]	; 2b45c <__assert_fail@plt+0x19474>
   2b7d8:	ldr	r3, [pc, #-896]	; 2b460 <__assert_fail@plt+0x19478>
   2b7dc:	cmp	r0, ip
   2b7e0:	moveq	r0, lr
   2b7e4:	movne	r0, r3
   2b7e8:	str	r0, [sp, #20]
   2b7ec:	ldr	ip, [sp, #72]	; 0x48
   2b7f0:	ldr	r0, [sp, #60]	; 0x3c
   2b7f4:	str	r2, [sp, #12]
   2b7f8:	cmp	r0, ip
   2b7fc:	ldr	r2, [pc, #-928]	; 2b464 <__assert_fail@plt+0x1947c>
   2b800:	movne	lr, r3
   2b804:	mov	r3, #100	; 0x64
   2b808:	str	r1, [sp, #8]
   2b80c:	str	r2, [sp]
   2b810:	mov	r1, r3
   2b814:	str	sl, [sp, #4]
   2b818:	str	lr, [sp, #24]
   2b81c:	mov	r2, #1
   2b820:	mov	r0, r4
   2b824:	bl	11fdc <__snprintf_chk@plt>
   2b828:	ldrb	r3, [sp, #883]	; 0x373
   2b82c:	cmp	r3, #32
   2b830:	bne	2c990 <__assert_fail@plt+0x1a9a8>
   2b834:	add	r2, sp, #880	; 0x370
   2b838:	add	r2, r2, #3
   2b83c:	mov	r3, #51	; 0x33
   2b840:	ldrb	r0, [r2, #-1]!
   2b844:	sub	r1, r3, #1
   2b848:	cmp	r0, #32
   2b84c:	bne	2b858 <__assert_fail@plt+0x19870>
   2b850:	subs	r3, r1, #0
   2b854:	bne	2b840 <__assert_fail@plt+0x19858>
   2b858:	add	r2, sp, #936	; 0x3a8
   2b85c:	add	r3, r2, r3
   2b860:	mov	r1, r4
   2b864:	mov	r2, #0
   2b868:	ldr	r0, [pc, #-1032]	; 2b468 <__assert_fail@plt+0x19480>
   2b86c:	strb	r2, [r3, #-104]	; 0xffffff98
   2b870:	bl	27380 <__assert_fail@plt+0x15398>
   2b874:	ldr	r0, [pc, #-1040]	; 2b46c <__assert_fail@plt+0x19484>
   2b878:	bl	27380 <__assert_fail@plt+0x15398>
   2b87c:	ldr	r3, [sp, #32]
   2b880:	cmp	r3, #0
   2b884:	bne	2c9cc <__assert_fail@plt+0x1a9e4>
   2b888:	cmp	fp, r8
   2b88c:	cmpne	r7, r5
   2b890:	bne	2c9c0 <__assert_fail@plt+0x1a9d8>
   2b894:	ldr	r0, [pc, #-1068]	; 2b470 <__assert_fail@plt+0x19488>
   2b898:	bl	27380 <__assert_fail@plt+0x15398>
   2b89c:	ldr	r2, [sp, #64]	; 0x40
   2b8a0:	ldr	r3, [pc, #-1076]	; 2b474 <__assert_fail@plt+0x1948c>
   2b8a4:	cmp	r2, #0
   2b8a8:	ldr	r1, [pc, #-1080]	; 2b478 <__assert_fail@plt+0x19490>
   2b8ac:	ldr	r0, [pc, #-1080]	; 2b47c <__assert_fail@plt+0x19494>
   2b8b0:	moveq	r1, r3
   2b8b4:	bl	27380 <__assert_fail@plt+0x15398>
   2b8b8:	b	2b268 <__assert_fail@plt+0x19280>
   2b8bc:	bl	11cac <malloc@plt>
   2b8c0:	subs	r3, r0, #0
   2b8c4:	str	r3, [sp, #44]	; 0x2c
   2b8c8:	beq	2b8e8 <__assert_fail@plt+0x19900>
   2b8cc:	ldr	r3, [sp, #44]	; 0x2c
   2b8d0:	str	r3, [sp, #56]	; 0x38
   2b8d4:	b	2b37c <__assert_fail@plt+0x19394>
   2b8d8:	add	r0, sp, #124	; 0x7c
   2b8dc:	bl	25408 <__assert_fail@plt+0x13420>
   2b8e0:	add	r6, sp, #124	; 0x7c
   2b8e4:	b	2aedc <__assert_fail@plt+0x18ef4>
   2b8e8:	mov	r3, #0
   2b8ec:	str	r3, [sp, #44]	; 0x2c
   2b8f0:	mov	r6, r3
   2b8f4:	b	2b27c <__assert_fail@plt+0x19294>
   2b8f8:	mov	r2, #24
   2b8fc:	mov	r1, #1
   2b900:	ldr	r3, [r4]
   2b904:	ldr	r0, [pc, #-1164]	; 2b480 <__assert_fail@plt+0x19498>
   2b908:	bl	11c1c <fwrite@plt>
   2b90c:	ldr	r2, [sp, #516]	; 0x204
   2b910:	ldr	r3, [sp, #528]	; 0x210
   2b914:	cmp	r2, #0
   2b918:	ldr	r5, [r4]
   2b91c:	beq	2b950 <__assert_fail@plt+0x19968>
   2b920:	cmp	r3, #0
   2b924:	bne	2b958 <__assert_fail@plt+0x19970>
   2b928:	ldr	r3, [sp, #372]	; 0x174
   2b92c:	cmp	r3, #0
   2b930:	ble	2b97c <__assert_fail@plt+0x19994>
   2b934:	mov	r3, r5
   2b938:	mov	r2, #5
   2b93c:	mov	r1, #1
   2b940:	ldr	r0, [pc, #-1220]	; 2b484 <__assert_fail@plt+0x1949c>
   2b944:	bl	11c1c <fwrite@plt>
   2b948:	ldr	r3, [sp, #528]	; 0x210
   2b94c:	ldr	r5, [r4]
   2b950:	cmp	r3, #0
   2b954:	beq	2b97c <__assert_fail@plt+0x19994>
   2b958:	add	r1, sp, #604	; 0x25c
   2b95c:	ldr	r0, [sp, #376]	; 0x178
   2b960:	bl	271e8 <__assert_fail@plt+0x15200>
   2b964:	ldr	r2, [pc, #-1252]	; 2b488 <__assert_fail@plt+0x194a0>
   2b968:	mov	r1, #1
   2b96c:	mov	r3, r0
   2b970:	mov	r0, r5
   2b974:	bl	11e38 <__fprintf_chk@plt>
   2b978:	ldr	r5, [r4]
   2b97c:	mov	r1, r5
   2b980:	mov	r0, #10
   2b984:	bl	11ec8 <fputc@plt>
   2b988:	ldrb	r6, [sp, #504]	; 0x1f8
   2b98c:	ldrb	r4, [sp, #533]	; 0x215
   2b990:	cmp	r6, #0
   2b994:	beq	2b2a4 <__assert_fail@plt+0x192bc>
   2b998:	b	2b188 <__assert_fail@plt+0x191a0>
   2b99c:	ldr	r1, [sp, #56]	; 0x38
   2b9a0:	ldr	r0, [pc, #-1308]	; 2b48c <__assert_fail@plt+0x194a4>
   2b9a4:	bl	27380 <__assert_fail@plt+0x15398>
   2b9a8:	b	2b1cc <__assert_fail@plt+0x191e4>
   2b9ac:	ldr	r0, [pc, #-1316]	; 2b490 <__assert_fail@plt+0x194a8>
   2b9b0:	bl	27380 <__assert_fail@plt+0x15398>
   2b9b4:	ldr	r1, [sp, #508]	; 0x1fc
   2b9b8:	b	2b2e8 <__assert_fail@plt+0x19300>
   2b9bc:	ldr	r0, [pc, #-1328]	; 2b494 <__assert_fail@plt+0x194ac>
   2b9c0:	bl	27380 <__assert_fail@plt+0x15398>
   2b9c4:	b	2b308 <__assert_fail@plt+0x19320>
   2b9c8:	ldr	r0, [pc, #-1336]	; 2b498 <__assert_fail@plt+0x194b0>
   2b9cc:	bl	27380 <__assert_fail@plt+0x15398>
   2b9d0:	b	2b2fc <__assert_fail@plt+0x19314>
   2b9d4:	ldr	r0, [pc, #-1344]	; 2b49c <__assert_fail@plt+0x194b4>
   2b9d8:	bl	27380 <__assert_fail@plt+0x15398>
   2b9dc:	b	2b2f0 <__assert_fail@plt+0x19308>
   2b9e0:	cmp	r2, #0
   2b9e4:	sbcs	r3, r3, #0
   2b9e8:	bge	2b584 <__assert_fail@plt+0x1959c>
   2b9ec:	mov	r7, #1
   2b9f0:	b	2b584 <__assert_fail@plt+0x1959c>
   2b9f4:	ldr	r1, [pc, #-1372]	; 2b4a0 <__assert_fail@plt+0x194b8>
   2b9f8:	ldr	r0, [sp, #56]	; 0x38
   2b9fc:	bl	11a48 <strcmp@plt>
   2ba00:	cmp	r0, #0
   2ba04:	bne	2c078 <__assert_fail@plt+0x1a090>
   2ba08:	mov	r3, r5
   2ba0c:	mov	r2, #33	; 0x21
   2ba10:	mov	r1, #1
   2ba14:	ldr	r0, [pc, #-1400]	; 2b4a4 <__assert_fail@plt+0x194bc>
   2ba18:	bl	11c1c <fwrite@plt>
   2ba1c:	b	2b90c <__assert_fail@plt+0x19924>
   2ba20:	mov	r3, fp
   2ba24:	cmp	sl, #69	; 0x45
   2ba28:	sbcs	r3, r3, #0
   2ba2c:	movlt	r7, #2000	; 0x7d0
   2ba30:	ldrge	r7, [pc, #-1424]	; 2b4a8 <__assert_fail@plt+0x194c0>
   2ba34:	mov	r5, #0
   2ba38:	adds	r7, sl, r7
   2ba3c:	adc	r5, fp, r5
   2ba40:	cmp	r4, #0
   2ba44:	moveq	sl, r7
   2ba48:	moveq	fp, r5
   2ba4c:	beq	2b544 <__assert_fail@plt+0x1955c>
   2ba50:	mov	r2, sl
   2ba54:	mov	r3, fp
   2ba58:	str	r7, [sp]
   2ba5c:	str	r5, [sp, #4]
   2ba60:	ldr	r0, [pc, #-1468]	; 2b4ac <__assert_fail@plt+0x194c4>
   2ba64:	bl	27380 <__assert_fail@plt+0x15398>
   2ba68:	mov	sl, r7
   2ba6c:	mov	fp, r5
   2ba70:	b	2b544 <__assert_fail@plt+0x1955c>
   2ba74:	cmp	r4, #0
   2ba78:	bne	2c0a8 <__assert_fail@plt+0x1a0c0>
   2ba7c:	ldrb	ip, [sp, #533]	; 0x215
   2ba80:	cmp	ip, #0
   2ba84:	beq	2b268 <__assert_fail@plt+0x19280>
   2ba88:	ldr	r0, [pc, #-1504]	; 2b4b0 <__assert_fail@plt+0x194c8>
   2ba8c:	bl	27380 <__assert_fail@plt+0x15398>
   2ba90:	b	2b268 <__assert_fail@plt+0x19280>
   2ba94:	ldr	r0, [pc, #-1512]	; 2b4b4 <__assert_fail@plt+0x194cc>
   2ba98:	mvn	r1, #0
   2ba9c:	subs	r2, r0, sl
   2baa0:	sbcs	r3, r1, fp
   2baa4:	asr	r1, r2, #31
   2baa8:	mov	r7, r6
   2baac:	movvs	r7, #1
   2bab0:	cmp	r3, r1
   2bab4:	cmpeq	r2, r2
   2bab8:	movne	r7, #1
   2babc:	str	r2, [sp, #152]	; 0x98
   2bac0:	and	r7, r7, #1
   2bac4:	b	2b5a0 <__assert_fail@plt+0x195b8>
   2bac8:	mov	r3, r5
   2bacc:	mov	r2, #23
   2bad0:	mov	r1, #1
   2bad4:	ldr	r0, [pc, #-1572]	; 2b4b8 <__assert_fail@plt+0x194d0>
   2bad8:	bl	11c1c <fwrite@plt>
   2badc:	b	2b90c <__assert_fail@plt+0x19924>
   2bae0:	ldr	r1, [pc, #-1580]	; 2b4bc <__assert_fail@plt+0x194d4>
   2bae4:	str	r3, [sp, #556]	; 0x22c
   2bae8:	mov	r3, #0
   2baec:	str	r2, [sp, #564]	; 0x234
   2baf0:	str	r1, [sp, #560]	; 0x230
   2baf4:	str	r3, [sp, #568]	; 0x238
   2baf8:	b	2b134 <__assert_fail@plt+0x1914c>
   2bafc:	ldr	r0, [pc, #-1604]	; 2b4c0 <__assert_fail@plt+0x194d8>
   2bb00:	bl	27380 <__assert_fail@plt+0x15398>
   2bb04:	b	2b1cc <__assert_fail@plt+0x191e4>
   2bb08:	ldr	r2, [pc, #-1612]	; 2b4c4 <__assert_fail@plt+0x194dc>
   2bb0c:	add	r0, sp, #832	; 0x340
   2bb10:	add	r1, sp, #832	; 0x340
   2bb14:	strh	r2, [r0]
   2bb18:	mov	r3, #88	; 0x58
   2bb1c:	add	r1, r1, #3
   2bb20:	ldr	r0, [sp, #376]	; 0x178
   2bb24:	strb	r3, [sp, #834]	; 0x342
   2bb28:	bl	271e8 <__assert_fail@plt+0x15200>
   2bb2c:	add	r0, sp, #832	; 0x340
   2bb30:	bl	2f7a8 <renameat2@@Base+0xa94>
   2bb34:	subs	r5, r0, #0
   2bb38:	beq	2c814 <__assert_fail@plt+0x1a82c>
   2bb3c:	ldrd	r2, [sp, #176]	; 0xb0
   2bb40:	ldr	r1, [sp, #184]	; 0xb8
   2bb44:	ldr	lr, [sp, #188]	; 0xbc
   2bb48:	ldr	ip, [sp, #192]	; 0xc0
   2bb4c:	str	r2, [sp, #132]	; 0x84
   2bb50:	str	r3, [sp, #136]	; 0x88
   2bb54:	ldr	r2, [sp, #196]	; 0xc4
   2bb58:	ldr	r3, [sp, #208]	; 0xd0
   2bb5c:	str	r1, [sp, #140]	; 0x8c
   2bb60:	add	r1, sp, #132	; 0x84
   2bb64:	str	lr, [sp, #144]	; 0x90
   2bb68:	str	ip, [sp, #148]	; 0x94
   2bb6c:	str	r2, [sp, #152]	; 0x98
   2bb70:	str	r3, [sp, #164]	; 0xa4
   2bb74:	bl	2fad0 <renameat2@@Base+0xdbc>
   2bb78:	add	r2, sp, #132	; 0x84
   2bb7c:	add	r1, sp, #176	; 0xb0
   2bb80:	mov	r3, r0
   2bb84:	mov	r4, r0
   2bb88:	mov	r0, r5
   2bb8c:	bl	27400 <__assert_fail@plt+0x15418>
   2bb90:	mov	fp, r0
   2bb94:	mov	r0, r5
   2bb98:	bl	2fa28 <renameat2@@Base+0xd14>
   2bb9c:	cmp	fp, #0
   2bba0:	beq	2b6d8 <__assert_fail@plt+0x196f0>
   2bba4:	ldr	r3, [sp, #512]	; 0x200
   2bba8:	cmp	r3, #0
   2bbac:	beq	2c0ec <__assert_fail@plt+0x1a104>
   2bbb0:	ldr	r3, [sp, #508]	; 0x1fc
   2bbb4:	cmp	r3, #0
   2bbb8:	bne	2c578 <__assert_fail@plt+0x1a590>
   2bbbc:	ldrd	r4, [r8]
   2bbc0:	cmp	r4, #1
   2bbc4:	sbcs	r3, r5, #0
   2bbc8:	strd	r4, [sp, #32]
   2bbcc:	blt	2bbf4 <__assert_fail@plt+0x19c0c>
   2bbd0:	ldr	r0, [sp, #156]	; 0x9c
   2bbd4:	ldr	r1, [sp, #368]	; 0x170
   2bbd8:	cmp	r0, r1
   2bbdc:	beq	2bbf4 <__assert_fail@plt+0x19c0c>
   2bbe0:	subs	r3, r4, #1
   2bbe4:	str	r3, [sp, #32]
   2bbe8:	ldr	r3, [sp, #36]	; 0x24
   2bbec:	sbc	r3, r3, #0
   2bbf0:	str	r3, [sp, #36]	; 0x24
   2bbf4:	ldrd	r0, [sp, #32]
   2bbf8:	mov	r4, #0
   2bbfc:	cmp	r1, r0, asr #31
   2bc00:	bne	2c7c8 <__assert_fail@plt+0x1a7e0>
   2bc04:	mov	r3, #7
   2bc08:	smull	r2, r3, r0, r3
   2bc0c:	mov	r1, r2
   2bc10:	mov	r0, r3
   2bc14:	cmp	r4, #0
   2bc18:	mov	r2, r1
   2bc1c:	mov	r3, r0
   2bc20:	bne	2c5a8 <__assert_fail@plt+0x1a5c0>
   2bc24:	ldr	ip, [sp, #156]	; 0x9c
   2bc28:	ldr	r0, [sp, #368]	; 0x170
   2bc2c:	ldr	r1, [pc, #-1900]	; 2b4c8 <__assert_fail@plt+0x194e0>
   2bc30:	sub	r0, r0, ip
   2bc34:	add	r0, r0, #7
   2bc38:	smull	ip, r1, r1, r0
   2bc3c:	add	ip, r1, r0
   2bc40:	asr	r1, r0, #31
   2bc44:	rsb	r1, r1, ip, asr #2
   2bc48:	rsb	r1, r1, r1, lsl #3
   2bc4c:	sub	r0, r0, r1
   2bc50:	adds	r4, r0, r2
   2bc54:	asr	r1, r0, #31
   2bc58:	adcs	r5, r1, r3
   2bc5c:	bvs	2c5a8 <__assert_fail@plt+0x1a5c0>
   2bc60:	ldr	r2, [sp, #144]	; 0x90
   2bc64:	adds	r0, r4, r2
   2bc68:	asr	r3, r2, #31
   2bc6c:	adcs	r1, r5, r3
   2bc70:	asr	r3, r0, #31
   2bc74:	movvs	ip, #1
   2bc78:	movvc	ip, #0
   2bc7c:	cmp	r1, r3
   2bc80:	cmpeq	r0, r0
   2bc84:	movne	ip, #1
   2bc88:	cmp	ip, #0
   2bc8c:	str	r0, [sp, #144]	; 0x90
   2bc90:	bne	2c5a8 <__assert_fail@plt+0x1a5c0>
   2bc94:	mvn	r3, #0
   2bc98:	add	r1, sp, #132	; 0x84
   2bc9c:	mov	r0, r9
   2bca0:	str	r3, [sp, #164]	; 0xa4
   2bca4:	bl	2fad0 <renameat2@@Base+0xdbc>
   2bca8:	cmn	r0, #1
   2bcac:	mov	r4, r0
   2bcb0:	beq	2c5a8 <__assert_fail@plt+0x1a5c0>
   2bcb4:	ldrb	r3, [sp, #533]	; 0x215
   2bcb8:	cmp	r3, #0
   2bcbc:	str	r3, [sp, #32]
   2bcc0:	bne	2c0bc <__assert_fail@plt+0x1a0d4>
   2bcc4:	ldrd	r2, [r8, #88]	; 0x58
   2bcc8:	ldrd	sl, [r8, #96]	; 0x60
   2bccc:	ldr	lr, [r8, #104]	; 0x68
   2bcd0:	ldr	ip, [r8, #108]	; 0x6c
   2bcd4:	orr	r0, sl, r2
   2bcd8:	orr	r1, r0, lr
   2bcdc:	str	r1, [sp, #48]	; 0x30
   2bce0:	orr	r1, fp, r3
   2bce4:	strd	r2, [sp, #80]	; 0x50
   2bce8:	orr	r3, r1, ip
   2bcec:	str	r3, [sp, #52]	; 0x34
   2bcf0:	ldrd	r2, [sp, #48]	; 0x30
   2bcf4:	strd	sl, [sp, #64]	; 0x40
   2bcf8:	orrs	r3, r2, r3
   2bcfc:	beq	2c3fc <__assert_fail@plt+0x1a414>
   2bd00:	ldrd	r2, [sp, #80]	; 0x50
   2bd04:	ldr	r0, [sp, #152]	; 0x98
   2bd08:	adds	r4, r0, r2
   2bd0c:	asr	r1, r0, #31
   2bd10:	adcs	r5, r1, r3
   2bd14:	asr	r1, r4, #31
   2bd18:	movvs	ip, #1
   2bd1c:	movvc	ip, #0
   2bd20:	cmp	r5, r1
   2bd24:	cmpeq	r4, r4
   2bd28:	bne	2b268 <__assert_fail@plt+0x19280>
   2bd2c:	cmp	ip, #0
   2bd30:	moveq	fp, r4
   2bd34:	bne	2b268 <__assert_fail@plt+0x19280>
   2bd38:	ldrd	r4, [sp, #64]	; 0x40
   2bd3c:	ldr	r0, [sp, #148]	; 0x94
   2bd40:	adds	r2, r0, r4
   2bd44:	asr	r1, r0, #31
   2bd48:	adcs	r3, r1, r5
   2bd4c:	mov	r5, r3
   2bd50:	asr	r1, r2, #31
   2bd54:	mov	r4, r2
   2bd58:	movvs	r3, #1
   2bd5c:	movvc	r3, #0
   2bd60:	cmp	r5, r1
   2bd64:	cmpeq	r2, r2
   2bd68:	strd	r4, [sp, #48]	; 0x30
   2bd6c:	bne	2c558 <__assert_fail@plt+0x1a570>
   2bd70:	cmp	r3, #0
   2bd74:	bne	2c558 <__assert_fail@plt+0x1a570>
   2bd78:	ldrd	r2, [r8, #104]	; 0x68
   2bd7c:	ldr	r0, [sp, #144]	; 0x90
   2bd80:	adds	r4, r0, r2
   2bd84:	asr	r1, r0, #31
   2bd88:	adcs	r5, r1, r3
   2bd8c:	asr	r1, r4, #31
   2bd90:	movvs	r3, #1
   2bd94:	movvc	r3, #0
   2bd98:	cmp	r5, r1
   2bd9c:	cmpeq	r4, r4
   2bda0:	strd	r4, [sp, #64]	; 0x40
   2bda4:	bne	2c558 <__assert_fail@plt+0x1a570>
   2bda8:	cmp	r3, #0
   2bdac:	bne	2c558 <__assert_fail@plt+0x1a570>
   2bdb0:	ldr	r0, [sp, #48]	; 0x30
   2bdb4:	ldr	r3, [sp, #184]	; 0xb8
   2bdb8:	ldr	r1, [sp, #180]	; 0xb4
   2bdbc:	str	r0, [sp, #148]	; 0x94
   2bdc0:	ldr	r0, [sp, #64]	; 0x40
   2bdc4:	ldr	r2, [sp, #176]	; 0xb0
   2bdc8:	str	r3, [sp, #140]	; 0x8c
   2bdcc:	ldr	r3, [sp, #208]	; 0xd0
   2bdd0:	str	r0, [sp, #144]	; 0x90
   2bdd4:	str	r1, [sp, #136]	; 0x88
   2bdd8:	mov	r0, r9
   2bddc:	add	r1, sp, #132	; 0x84
   2bde0:	str	r3, [sp, #164]	; 0xa4
   2bde4:	str	fp, [sp, #152]	; 0x98
   2bde8:	str	r2, [sp, #132]	; 0x84
   2bdec:	bl	2fad0 <renameat2@@Base+0xdbc>
   2bdf0:	ldrb	r3, [sp, #533]	; 0x215
   2bdf4:	cmn	r0, #1
   2bdf8:	mov	r4, r0
   2bdfc:	beq	2c998 <__assert_fail@plt+0x1a9b0>
   2be00:	cmp	r3, #0
   2be04:	str	r3, [sp, #32]
   2be08:	mov	r7, r3
   2be0c:	bne	2c310 <__assert_fail@plt+0x1a328>
   2be10:	ldr	r3, [sp, #528]	; 0x210
   2be14:	cmp	r3, #0
   2be18:	beq	2be6c <__assert_fail@plt+0x19e84>
   2be1c:	ldr	r2, [sp, #376]	; 0x178
   2be20:	ldr	r1, [sp, #168]	; 0xa8
   2be24:	asr	fp, r2, #31
   2be28:	subs	r2, r1, r2
   2be2c:	rsc	r3, fp, r1, asr #31
   2be30:	adds	r0, r2, r0
   2be34:	adc	r1, r3, r4, asr #31
   2be38:	adds	r3, r0, #-2147483648	; 0x80000000
   2be3c:	str	r3, [sp, #112]	; 0x70
   2be40:	adc	r3, r1, #0
   2be44:	str	r3, [sp, #116]	; 0x74
   2be48:	ldrd	r2, [sp, #112]	; 0x70
   2be4c:	mov	r1, #0
   2be50:	mov	r4, r0
   2be54:	cmp	r3, r1
   2be58:	mvn	r0, #0
   2be5c:	cmpeq	r2, r0
   2be60:	bhi	2b268 <__assert_fail@plt+0x19280>
   2be64:	cmp	r7, #0
   2be68:	bne	2c5fc <__assert_fail@plt+0x1a614>
   2be6c:	ldr	r7, [r8, #112]	; 0x70
   2be70:	ldr	fp, [r8, #116]	; 0x74
   2be74:	mov	ip, #0
   2be78:	cmp	fp, r7, asr #31
   2be7c:	bne	2c934 <__assert_fail@plt+0x1a94c>
   2be80:	mov	r2, #3600	; 0xe10
   2be84:	smull	r2, r3, r7, r2
   2be88:	mov	sl, r2
   2be8c:	cmp	ip, #0
   2be90:	bne	2b268 <__assert_fail@plt+0x19280>
   2be94:	adds	r2, r4, sl
   2be98:	asr	r5, r4, #31
   2be9c:	adcs	r3, r5, r3
   2bea0:	strd	r2, [sp, #80]	; 0x50
   2bea4:	movvs	r3, #1
   2bea8:	movvc	r3, #0
   2beac:	str	r3, [sp, #72]	; 0x48
   2beb0:	bvs	2b268 <__assert_fail@plt+0x19280>
   2beb4:	ldr	sl, [r8, #120]	; 0x78
   2beb8:	ldr	r3, [r8, #124]	; 0x7c
   2bebc:	mov	ip, #0
   2bec0:	cmp	r3, sl, asr #31
   2bec4:	str	r3, [sp, #64]	; 0x40
   2bec8:	bne	2c8b8 <__assert_fail@plt+0x1a8d0>
   2becc:	mov	r2, #60	; 0x3c
   2bed0:	smull	r2, r3, sl, r2
   2bed4:	mov	r4, r2
   2bed8:	mov	r1, r3
   2bedc:	cmp	ip, #0
   2bee0:	mov	r2, r4
   2bee4:	bne	2c674 <__assert_fail@plt+0x1a68c>
   2bee8:	ldrd	r4, [sp, #80]	; 0x50
   2beec:	adds	r0, r4, r2
   2bef0:	adcs	r1, r5, r1
   2bef4:	bvs	2c674 <__assert_fail@plt+0x1a68c>
   2bef8:	ldrd	r2, [r8, #128]	; 0x80
   2befc:	adds	r4, r0, r2
   2bf00:	adcs	r5, r1, r3
   2bf04:	strd	r2, [sp, #48]	; 0x30
   2bf08:	strd	r4, [sp, #96]	; 0x60
   2bf0c:	bvs	2c674 <__assert_fail@plt+0x1a68c>
   2bf10:	ldr	r8, [sp, #496]	; 0x1f0
   2bf14:	ldr	r3, [sp, #444]	; 0x1bc
   2bf18:	mov	r4, r8
   2bf1c:	asr	r5, r8, #31
   2bf20:	strd	r4, [sp, #80]	; 0x50
   2bf24:	adds	r4, r8, r3
   2bf28:	adc	r5, r5, r3, asr #31
   2bf2c:	mov	r0, r4
   2bf30:	mov	r1, r5
   2bf34:	add	r3, pc, #796	; 0x31c
   2bf38:	ldrd	r2, [r3]
   2bf3c:	strd	r4, [sp, #88]	; 0x58
   2bf40:	bl	31ca8 <renameat2@@Base+0x2f94>
   2bf44:	ldr	r4, [pc, #788]	; 2c260 <__assert_fail@plt+0x1a278>
   2bf48:	mov	r5, #0
   2bf4c:	adds	r0, r2, r4
   2bf50:	adc	r1, r3, r5
   2bf54:	mov	r2, r4
   2bf58:	mov	r3, r5
   2bf5c:	bl	31ca8 <renameat2@@Base+0x2f94>
   2bf60:	mov	r0, r2
   2bf64:	str	r2, [sp, #112]	; 0x70
   2bf68:	mov	r1, r3
   2bf6c:	mov	r2, r4
   2bf70:	mov	r3, r5
   2bf74:	ldrd	r4, [sp, #88]	; 0x58
   2bf78:	subs	r0, r4, r0
   2bf7c:	sbc	r1, r5, r1
   2bf80:	bl	31ca8 <renameat2@@Base+0x2f94>
   2bf84:	ldrd	r2, [sp, #96]	; 0x60
   2bf88:	asr	r1, r0, #31
   2bf8c:	adds	r4, r2, r0
   2bf90:	adcs	r5, r3, r1
   2bf94:	bvs	2c674 <__assert_fail@plt+0x1a68c>
   2bf98:	adds	r3, r4, #-2147483648	; 0x80000000
   2bf9c:	str	r3, [sp, #104]	; 0x68
   2bfa0:	adc	r3, r5, #0
   2bfa4:	str	r3, [sp, #108]	; 0x6c
   2bfa8:	ldrd	r0, [sp, #104]	; 0x68
   2bfac:	mov	r3, #0
   2bfb0:	mvn	r2, #0
   2bfb4:	cmp	r1, r3
   2bfb8:	cmpeq	r0, r2
   2bfbc:	bhi	2c674 <__assert_fail@plt+0x1a68c>
   2bfc0:	ldr	r3, [sp, #72]	; 0x48
   2bfc4:	ldr	r2, [sp, #112]	; 0x70
   2bfc8:	cmp	r3, #0
   2bfcc:	ldr	r3, [sp, #60]	; 0x3c
   2bfd0:	str	r4, [r3]
   2bfd4:	str	r2, [r3, #4]
   2bfd8:	beq	2c00c <__assert_fail@plt+0x1a024>
   2bfdc:	ldr	r3, [sp, #48]	; 0x30
   2bfe0:	orr	r0, sl, r7
   2bfe4:	orr	r0, r0, r3
   2bfe8:	ldr	r1, [sp, #64]	; 0x40
   2bfec:	orr	r2, r0, r8
   2bff0:	ldr	r0, [sp, #52]	; 0x34
   2bff4:	orr	r1, r1, fp
   2bff8:	orr	r1, r1, r0
   2bffc:	ldr	r0, [sp, #84]	; 0x54
   2c000:	orr	r3, r1, r0
   2c004:	orrs	r3, r2, r3
   2c008:	bne	2ca00 <__assert_fail@plt+0x1aa18>
   2c00c:	ldr	r4, [sp, #32]
   2c010:	b	2b198 <__assert_fail@plt+0x191b0>
   2c014:	ldr	r1, [sp, #380]	; 0x17c
   2c018:	ldrd	r2, [r8, #64]	; 0x40
   2c01c:	cmp	r1, #0
   2c020:	mov	sl, r1
   2c024:	beq	2c508 <__assert_fail@plt+0x1a520>
   2c028:	cmp	r1, #1
   2c02c:	beq	2c4b8 <__assert_fail@plt+0x1a4d0>
   2c030:	cmp	r3, #0
   2c034:	cmpeq	r2, #23
   2c038:	bhi	2c7a0 <__assert_fail@plt+0x1a7b8>
   2c03c:	mov	sl, r2
   2c040:	str	sl, [sp, #140]	; 0x8c
   2c044:	ldr	fp, [r8, #72]	; 0x48
   2c048:	ldr	r3, [sp, #440]	; 0x1b8
   2c04c:	cmp	ip, #0
   2c050:	str	fp, [sp, #136]	; 0x88
   2c054:	str	r3, [sp, #132]	; 0x84
   2c058:	bne	2c468 <__assert_fail@plt+0x1a480>
   2c05c:	ldr	ip, [sp, #140]	; 0x8c
   2c060:	ldr	r2, [sp, #508]	; 0x1fc
   2c064:	ldr	r1, [sp, #512]	; 0x200
   2c068:	orr	r2, r2, r1
   2c06c:	orrs	r2, r2, r4
   2c070:	beq	2b668 <__assert_fail@plt+0x19680>
   2c074:	b	2b660 <__assert_fail@plt+0x19678>
   2c078:	mov	r0, r5
   2c07c:	ldr	r3, [sp, #56]	; 0x38
   2c080:	ldr	r2, [pc, #476]	; 2c264 <__assert_fail@plt+0x1a27c>
   2c084:	mov	r1, #1
   2c088:	bl	11e38 <__fprintf_chk@plt>
   2c08c:	b	2b90c <__assert_fail@plt+0x19924>
   2c090:	mov	r3, r5
   2c094:	mov	r2, #14
   2c098:	mov	r1, #1
   2c09c:	ldr	r0, [pc, #452]	; 2c268 <__assert_fail@plt+0x1a280>
   2c0a0:	bl	11c1c <fwrite@plt>
   2c0a4:	b	2b90c <__assert_fail@plt+0x19924>
   2c0a8:	mov	r2, sl
   2c0ac:	mov	r3, fp
   2c0b0:	ldr	r0, [pc, #436]	; 2c26c <__assert_fail@plt+0x1a284>
   2c0b4:	bl	27380 <__assert_fail@plt+0x15398>
   2c0b8:	b	2ba7c <__assert_fail@plt+0x19a94>
   2c0bc:	add	r1, sp, #832	; 0x340
   2c0c0:	add	r0, sp, #352	; 0x160
   2c0c4:	bl	27824 <__assert_fail@plt+0x1583c>
   2c0c8:	add	r2, sp, #632	; 0x278
   2c0cc:	add	r1, sp, #352	; 0x160
   2c0d0:	mov	r5, r0
   2c0d4:	add	r0, sp, #132	; 0x84
   2c0d8:	bl	2775c <__assert_fail@plt+0x15774>
   2c0dc:	mov	r1, r5
   2c0e0:	mov	r2, r0
   2c0e4:	ldr	r0, [pc, #388]	; 2c270 <__assert_fail@plt+0x1a288>
   2c0e8:	bl	27380 <__assert_fail@plt+0x15398>
   2c0ec:	ldrb	r3, [sp, #533]	; 0x215
   2c0f0:	cmp	r3, #0
   2c0f4:	str	r3, [sp, #32]
   2c0f8:	beq	2bcc4 <__assert_fail@plt+0x19cdc>
   2c0fc:	ldr	r2, [sp, #508]	; 0x1fc
   2c100:	ldr	r3, [sp, #512]	; 0x200
   2c104:	cmp	r2, #0
   2c108:	bne	2c68c <__assert_fail@plt+0x1a6a4>
   2c10c:	cmp	r3, #0
   2c110:	beq	2c734 <__assert_fail@plt+0x1a74c>
   2c114:	add	r5, sp, #632	; 0x278
   2c118:	mov	r2, r5
   2c11c:	add	r1, sp, #352	; 0x160
   2c120:	add	r0, sp, #132	; 0x84
   2c124:	bl	2775c <__assert_fail@plt+0x15774>
   2c128:	mov	r1, r0
   2c12c:	ldr	r0, [pc, #320]	; 2c274 <__assert_fail@plt+0x1a28c>
   2c130:	bl	27380 <__assert_fail@plt+0x15398>
   2c134:	ldrd	r2, [r8, #88]	; 0x58
   2c138:	ldrd	r0, [r8, #104]	; 0x68
   2c13c:	ldrd	sl, [r8, #96]	; 0x60
   2c140:	strd	r2, [sp, #80]	; 0x50
   2c144:	strd	r0, [sp, #48]	; 0x30
   2c148:	mov	r1, r3
   2c14c:	mov	r3, r2
   2c150:	orr	r3, r3, sl
   2c154:	str	r3, [sp, #32]
   2c158:	orr	r3, r1, fp
   2c15c:	str	r3, [sp, #36]	; 0x24
   2c160:	strd	sl, [sp, #64]	; 0x40
   2c164:	ldrd	sl, [sp, #32]
   2c168:	ldr	r3, [sp, #48]	; 0x30
   2c16c:	ldrb	r1, [sp, #533]	; 0x215
   2c170:	orr	r3, sl, r3
   2c174:	str	r3, [sp, #72]	; 0x48
   2c178:	ldr	r3, [sp, #52]	; 0x34
   2c17c:	str	r1, [sp, #32]
   2c180:	orr	r3, fp, r3
   2c184:	str	r3, [sp, #76]	; 0x4c
   2c188:	ldrd	r2, [sp, #72]	; 0x48
   2c18c:	mov	r7, r1
   2c190:	orrs	r3, r2, r3
   2c194:	beq	2c3fc <__assert_fail@plt+0x1a414>
   2c198:	cmp	r1, #0
   2c19c:	beq	2bd00 <__assert_fail@plt+0x19d18>
   2c1a0:	orrs	r3, sl, fp
   2c1a4:	beq	2c7b0 <__assert_fail@plt+0x1a7c8>
   2c1a8:	ldr	r3, [sp, #144]	; 0x90
   2c1ac:	cmp	r3, #15
   2c1b0:	beq	2c1c4 <__assert_fail@plt+0x1a1dc>
   2c1b4:	ldr	r0, [pc, #188]	; 2c278 <__assert_fail@plt+0x1a290>
   2c1b8:	bl	27380 <__assert_fail@plt+0x15398>
   2c1bc:	ldrd	r2, [r8, #104]	; 0x68
   2c1c0:	strd	r2, [sp, #48]	; 0x30
   2c1c4:	ldrd	r2, [sp, #48]	; 0x30
   2c1c8:	orrs	r3, r2, r3
   2c1cc:	bne	2c7b0 <__assert_fail@plt+0x1a7c8>
   2c1d0:	ldrd	r4, [r8, #88]	; 0x58
   2c1d4:	ldr	r2, [sp, #152]	; 0x98
   2c1d8:	adds	r0, r2, r4
   2c1dc:	asr	r3, r2, #31
   2c1e0:	adcs	r1, r3, r5
   2c1e4:	asr	r3, r0, #31
   2c1e8:	movvs	ip, #1
   2c1ec:	movvc	ip, #0
   2c1f0:	cmp	r1, r3
   2c1f4:	cmpeq	r0, r0
   2c1f8:	bne	2c558 <__assert_fail@plt+0x1a570>
   2c1fc:	cmp	ip, #0
   2c200:	bne	2c558 <__assert_fail@plt+0x1a570>
   2c204:	ldrd	r2, [r8, #96]	; 0x60
   2c208:	mov	fp, r0
   2c20c:	strd	r2, [sp, #64]	; 0x40
   2c210:	b	2bd38 <__assert_fail@plt+0x19d50>
   2c214:	mov	r3, #0
   2c218:	cmp	ip, #0
   2c21c:	str	r3, [sp, #132]	; 0x84
   2c220:	str	r3, [sp, #136]	; 0x88
   2c224:	str	r3, [sp, #140]	; 0x8c
   2c228:	str	r3, [sp, #444]	; 0x1bc
   2c22c:	moveq	fp, ip
   2c230:	moveq	r3, ip
   2c234:	beq	2c060 <__assert_fail@plt+0x1a078>
   2c238:	ldr	r0, [pc, #60]	; 2c27c <__assert_fail@plt+0x1a294>
   2c23c:	bl	27380 <__assert_fail@plt+0x15398>
   2c240:	add	r3, sp, #132	; 0x84
   2c244:	ldr	r4, [sp, #524]	; 0x20c
   2c248:	ldm	r3, {r3, fp, ip}
   2c24c:	ldr	r5, [sp, #144]	; 0x90
   2c250:	ldr	lr, [sp, #148]	; 0x94
   2c254:	b	2c060 <__assert_fail@plt+0x1a078>
   2c258:	blcc	fe6dea60 <optarg@@GLIBC_2.4+0xfe696758>
   2c25c:	andeq	r0, r0, r0
   2c260:	blcc	fe6dea68 <optarg@@GLIBC_2.4+0xfe696760>
   2c264:	andeq	r6, r3, r8, lsl #5
   2c268:	andeq	r6, r3, r4, lsr #5
   2c26c:			; <UNDEFINED> instruction: 0x000363b0
   2c270:	andeq	r6, r3, ip, lsl #12
   2c274:	andeq	r6, r3, ip, lsr #13
   2c278:	andeq	r6, r3, r8, asr #13
   2c27c:	andeq	r6, r3, r4, lsr #8
   2c280:	ldrdeq	r6, [r3], -r8
   2c284:	andeq	r6, r3, r8, lsl r8
   2c288:	andeq	r6, r3, r4, lsr r8
   2c28c:	andeq	r6, r3, r4, ror r8
   2c290:			; <UNDEFINED> instruction: 0x000368b0
   2c294:	ldrdeq	r6, [r3], -r4
   2c298:	strdeq	r6, [r3], -r8
   2c29c:	andeq	r6, r3, r8, ror #2
   2c2a0:	muleq	r3, r4, r1
   2c2a4:	andeq	r6, r3, r4, lsl r4
   2c2a8:	andeq	r5, r3, r4, asr #31
   2c2ac:	andeq	r6, r3, r4, ror #2
   2c2b0:	strdeq	r6, [r3], -r8
   2c2b4:	andeq	r0, r0, r7, ror r8
   2c2b8:	andeq	r6, r3, r4, ror r7
   2c2bc:	andeq	r6, r3, r8, lsl #15
   2c2c0:	andeq	r6, r3, r0, ror r6
   2c2c4:			; <UNDEFINED> instruction: 0x000365bc
   2c2c8:	andeq	r6, r3, r4, lsr #18
   2c2cc:	andeq	r6, r3, r0, asr #18
   2c2d0:	andeq	r6, r3, r8, ror r4
   2c2d4:	muleq	r3, ip, r4
   2c2d8:			; <UNDEFINED> instruction: 0x000364bc
   2c2dc:	andeq	r6, r3, r4, asr #3
   2c2e0:	andeq	r2, r3, ip, ror r8
   2c2e4:	andeq	r6, r3, ip, lsr #12
   2c2e8:	andeq	r6, r3, r4, asr #12
   2c2ec:	strdeq	r5, [r3], -r8
   2c2f0:	andeq	r6, r3, ip, lsr #14
   2c2f4:	andeq	r6, r3, r8, asr r4
   2c2f8:	muleq	r3, r8, r7
   2c2fc:	andeq	r6, r3, r4, ror #10
   2c300:	andeq	r6, r3, r0, lsr r5
   2c304:	andeq	r6, r3, r0, ror r9
   2c308:			; <UNDEFINED> instruction: 0x000369bc
   2c30c:	andeq	r6, r3, r0, ror #19
   2c310:	ldrd	r0, [r8, #96]	; 0x60
   2c314:	ldrd	r2, [r8, #104]	; 0x68
   2c318:	strd	r0, [sp]
   2c31c:	strd	r2, [sp, #8]
   2c320:	ldr	r0, [pc, #-168]	; 2c280 <__assert_fail@plt+0x1a298>
   2c324:	ldrd	r2, [r8, #88]	; 0x58
   2c328:	bl	27380 <__assert_fail@plt+0x15398>
   2c32c:	add	r2, sp, #632	; 0x278
   2c330:	add	r1, sp, #352	; 0x160
   2c334:	add	r0, sp, #132	; 0x84
   2c338:	bl	2775c <__assert_fail@plt+0x15774>
   2c33c:	mov	r1, r0
   2c340:	ldr	r0, [pc, #-196]	; 2c284 <__assert_fail@plt+0x1a29c>
   2c344:	bl	27380 <__assert_fail@plt+0x15398>
   2c348:	ldr	r3, [sp, #208]	; 0xd0
   2c34c:	cmn	r3, #1
   2c350:	beq	2c368 <__assert_fail@plt+0x1a380>
   2c354:	ldr	r2, [sp, #164]	; 0xa4
   2c358:	cmp	r3, r2
   2c35c:	beq	2c368 <__assert_fail@plt+0x1a380>
   2c360:	ldr	r0, [pc, #-224]	; 2c288 <__assert_fail@plt+0x1a2a0>
   2c364:	bl	27380 <__assert_fail@plt+0x15398>
   2c368:	ldrd	r2, [r8, #104]	; 0x68
   2c36c:	orrs	r3, r2, r3
   2c370:	bne	2c3f0 <__assert_fail@plt+0x1a408>
   2c374:	ldr	r3, [sp, #144]	; 0x90
   2c378:	ldr	r2, [sp, #64]	; 0x40
   2c37c:	cmp	r2, r3
   2c380:	bne	2c3a0 <__assert_fail@plt+0x1a3b8>
   2c384:	ldrd	r2, [r8, #96]	; 0x60
   2c388:	orrs	r3, r2, r3
   2c38c:	bne	2c3f0 <__assert_fail@plt+0x1a408>
   2c390:	ldr	r3, [sp, #148]	; 0x94
   2c394:	ldr	r2, [sp, #48]	; 0x30
   2c398:	cmp	r2, r3
   2c39c:	beq	2c3f0 <__assert_fail@plt+0x1a408>
   2c3a0:	ldr	r0, [pc, #-284]	; 2c28c <__assert_fail@plt+0x1a2a4>
   2c3a4:	bl	27380 <__assert_fail@plt+0x15398>
   2c3a8:	add	r1, sp, #588	; 0x24c
   2c3ac:	mov	r0, fp
   2c3b0:	bl	27304 <__assert_fail@plt+0x1531c>
   2c3b4:	ldr	r2, [sp, #48]	; 0x30
   2c3b8:	ldr	r3, [sp, #64]	; 0x40
   2c3bc:	add	r2, r2, #1
   2c3c0:	mov	r1, r0
   2c3c4:	ldr	r0, [pc, #-316]	; 2c290 <__assert_fail@plt+0x1a2a8>
   2c3c8:	bl	27380 <__assert_fail@plt+0x15398>
   2c3cc:	add	r1, sp, #588	; 0x24c
   2c3d0:	ldr	r0, [sp, #152]	; 0x98
   2c3d4:	bl	27304 <__assert_fail@plt+0x1531c>
   2c3d8:	ldr	r2, [sp, #148]	; 0x94
   2c3dc:	ldr	r3, [sp, #144]	; 0x90
   2c3e0:	add	r2, r2, #1
   2c3e4:	mov	r1, r0
   2c3e8:	ldr	r0, [pc, #-348]	; 2c294 <__assert_fail@plt+0x1a2ac>
   2c3ec:	bl	27380 <__assert_fail@plt+0x15398>
   2c3f0:	ldrb	r3, [sp, #533]	; 0x215
   2c3f4:	mov	r7, r3
   2c3f8:	str	r3, [sp, #32]
   2c3fc:	ldr	r3, [sp, #528]	; 0x210
   2c400:	cmp	r3, #0
   2c404:	beq	2be64 <__assert_fail@plt+0x19e7c>
   2c408:	ldr	ip, [sp, #376]	; 0x178
   2c40c:	ldr	r1, [sp, #168]	; 0xa8
   2c410:	asr	r3, ip, #31
   2c414:	subs	r2, r1, ip
   2c418:	rsc	r3, r3, r1, asr #31
   2c41c:	adds	r0, r2, r4
   2c420:	adc	r1, r3, r4, asr #31
   2c424:	adds	r3, r0, #-2147483648	; 0x80000000
   2c428:	str	r3, [sp, #96]	; 0x60
   2c42c:	adc	r3, r1, #0
   2c430:	str	r3, [sp, #100]	; 0x64
   2c434:	ldrd	r2, [sp, #96]	; 0x60
   2c438:	mov	r1, #0
   2c43c:	mov	r4, r0
   2c440:	cmp	r3, r1
   2c444:	mvn	r0, #0
   2c448:	cmpeq	r2, r0
   2c44c:	bls	2be64 <__assert_fail@plt+0x19e7c>
   2c450:	cmp	r7, #0
   2c454:	beq	2b268 <__assert_fail@plt+0x19280>
   2c458:	mov	r1, ip
   2c45c:	ldr	r0, [pc, #-460]	; 2c298 <__assert_fail@plt+0x1a2b0>
   2c460:	bl	27380 <__assert_fail@plt+0x15398>
   2c464:	b	2b268 <__assert_fail@plt+0x19280>
   2c468:	ldr	ip, [pc, #-468]	; 2c29c <__assert_fail@plt+0x1a2b4>
   2c46c:	ldr	r0, [pc, #-468]	; 2c2a0 <__assert_fail@plt+0x1a2b8>
   2c470:	ldr	r2, [pc, #-468]	; 2c2a4 <__assert_fail@plt+0x1a2bc>
   2c474:	cmp	r4, #0
   2c478:	str	r3, [sp, #12]
   2c47c:	add	r5, sp, #632	; 0x278
   2c480:	mov	r3, #100	; 0x64
   2c484:	movne	r4, r0
   2c488:	moveq	r4, ip
   2c48c:	str	r2, [sp]
   2c490:	mov	r1, r3
   2c494:	str	fp, [sp, #8]
   2c498:	str	sl, [sp, #4]
   2c49c:	mov	r0, r5
   2c4a0:	mov	r2, #1
   2c4a4:	bl	11fdc <__snprintf_chk@plt>
   2c4a8:	mov	r1, r5
   2c4ac:	mov	r0, r4
   2c4b0:	bl	27380 <__assert_fail@plt+0x15398>
   2c4b4:	b	2c240 <__assert_fail@plt+0x1a258>
   2c4b8:	subs	r1, r2, #1
   2c4bc:	str	r1, [sp, #88]	; 0x58
   2c4c0:	sbc	r1, r3, #0
   2c4c4:	str	r1, [sp, #92]	; 0x5c
   2c4c8:	ldrd	r0, [sp, #88]	; 0x58
   2c4cc:	cmp	r1, #0
   2c4d0:	cmpeq	r0, #10
   2c4d4:	addls	r3, r2, #12
   2c4d8:	movls	sl, r3
   2c4dc:	bls	2c040 <__assert_fail@plt+0x1a058>
   2c4e0:	cmp	r3, #0
   2c4e4:	cmpeq	r2, #12
   2c4e8:	mvnne	r1, #0
   2c4ec:	strne	r1, [sp, #140]	; 0x8c
   2c4f0:	ldrne	r1, [pc, #-592]	; 2c2a8 <__assert_fail@plt+0x1a2c0>
   2c4f4:	bne	2c540 <__assert_fail@plt+0x1a558>
   2c4f8:	mov	r1, #12
   2c4fc:	str	r1, [sp, #140]	; 0x8c
   2c500:	mov	sl, r1
   2c504:	b	2c044 <__assert_fail@plt+0x1a05c>
   2c508:	subs	r1, r2, #1
   2c50c:	str	r1, [sp, #80]	; 0x50
   2c510:	sbc	r1, r3, #0
   2c514:	str	r1, [sp, #84]	; 0x54
   2c518:	ldrd	r0, [sp, #80]	; 0x50
   2c51c:	cmp	r1, #0
   2c520:	cmpeq	r0, #10
   2c524:	bls	2c03c <__assert_fail@plt+0x1a054>
   2c528:	cmp	r3, #0
   2c52c:	cmpeq	r2, #12
   2c530:	beq	2c040 <__assert_fail@plt+0x1a058>
   2c534:	mvn	r1, #0
   2c538:	str	r1, [sp, #140]	; 0x8c
   2c53c:	ldr	r1, [pc, #-664]	; 2c2ac <__assert_fail@plt+0x1a2c4>
   2c540:	cmp	ip, #0
   2c544:	beq	2b268 <__assert_fail@plt+0x19280>
   2c548:	str	r1, [sp]
   2c54c:	ldr	r0, [pc, #-676]	; 2c2b0 <__assert_fail@plt+0x1a2c8>
   2c550:	bl	27380 <__assert_fail@plt+0x15398>
   2c554:	b	2b268 <__assert_fail@plt+0x19280>
   2c558:	ldrb	r3, [sp, #533]	; 0x215
   2c55c:	cmp	r3, #0
   2c560:	beq	2b268 <__assert_fail@plt+0x19280>
   2c564:	ldr	r2, [pc, #-696]	; 2c2b4 <__assert_fail@plt+0x1a2cc>
   2c568:	ldr	r1, [pc, #-696]	; 2c2b8 <__assert_fail@plt+0x1a2d0>
   2c56c:	ldr	r0, [pc, #-696]	; 2c2bc <__assert_fail@plt+0x1a2d4>
   2c570:	bl	27380 <__assert_fail@plt+0x15398>
   2c574:	b	2b268 <__assert_fail@plt+0x19280>
   2c578:	ldrb	r3, [sp, #533]	; 0x215
   2c57c:	cmp	r3, #0
   2c580:	str	r3, [sp, #32]
   2c584:	beq	2bcc4 <__assert_fail@plt+0x19cdc>
   2c588:	add	r5, sp, #632	; 0x278
   2c58c:	add	r1, sp, #832	; 0x340
   2c590:	add	r0, sp, #352	; 0x160
   2c594:	bl	27824 <__assert_fail@plt+0x1583c>
   2c598:	mov	r1, r0
   2c59c:	ldr	r0, [pc, #-740]	; 2c2c0 <__assert_fail@plt+0x1a2d8>
   2c5a0:	bl	27380 <__assert_fail@plt+0x15398>
   2c5a4:	b	2c118 <__assert_fail@plt+0x1a130>
   2c5a8:	ldrb	r3, [sp, #533]	; 0x215
   2c5ac:	cmp	r3, #0
   2c5b0:	beq	2b268 <__assert_fail@plt+0x19280>
   2c5b4:	add	r1, sp, #832	; 0x340
   2c5b8:	add	r0, sp, #352	; 0x160
   2c5bc:	bl	27824 <__assert_fail@plt+0x1583c>
   2c5c0:	add	r1, sp, #352	; 0x160
   2c5c4:	add	r2, sp, #632	; 0x278
   2c5c8:	ldrd	r4, [r8]
   2c5cc:	ldr	r8, [sp, #368]	; 0x170
   2c5d0:	mov	r7, r0
   2c5d4:	add	r0, sp, #132	; 0x84
   2c5d8:	bl	2775c <__assert_fail@plt+0x15774>
   2c5dc:	str	r8, [sp]
   2c5e0:	mov	r2, r4
   2c5e4:	mov	r3, r5
   2c5e8:	mov	r1, r7
   2c5ec:	str	r0, [sp, #4]
   2c5f0:	ldr	r0, [pc, #-820]	; 2c2c4 <__assert_fail@plt+0x1a2dc>
   2c5f4:	bl	27380 <__assert_fail@plt+0x15398>
   2c5f8:	b	2b268 <__assert_fail@plt+0x19280>
   2c5fc:	add	r1, sp, #352	; 0x160
   2c600:	add	r2, sp, #632	; 0x278
   2c604:	add	r0, sp, #132	; 0x84
   2c608:	bl	2775c <__assert_fail@plt+0x15774>
   2c60c:	asr	r3, r4, #31
   2c610:	mov	r2, r4
   2c614:	strd	r2, [sp, #64]	; 0x40
   2c618:	mov	r1, r0
   2c61c:	ldr	r0, [pc, #-860]	; 2c2c8 <__assert_fail@plt+0x1a2e0>
   2c620:	bl	27380 <__assert_fail@plt+0x15398>
   2c624:	ldr	r7, [r8, #112]	; 0x70
   2c628:	ldrb	r3, [sp, #533]	; 0x215
   2c62c:	ldr	fp, [r8, #116]	; 0x74
   2c630:	mov	ip, #0
   2c634:	cmp	fp, r7, asr #31
   2c638:	str	r3, [sp, #32]
   2c63c:	str	r3, [sp, #72]	; 0x48
   2c640:	bne	2c830 <__assert_fail@plt+0x1a848>
   2c644:	mov	r2, #3600	; 0xe10
   2c648:	smull	r2, r3, r7, r2
   2c64c:	mov	r4, r2
   2c650:	mov	r1, r3
   2c654:	cmp	ip, #0
   2c658:	mov	r2, r4
   2c65c:	bne	2c674 <__assert_fail@plt+0x1a68c>
   2c660:	ldrd	r4, [sp, #64]	; 0x40
   2c664:	adds	r0, r4, r2
   2c668:	adcs	r1, r5, r1
   2c66c:	strd	r0, [sp, #80]	; 0x50
   2c670:	bvc	2beb4 <__assert_fail@plt+0x19ecc>
   2c674:	ldr	r3, [sp, #72]	; 0x48
   2c678:	cmp	r3, #0
   2c67c:	beq	2b268 <__assert_fail@plt+0x19280>
   2c680:	ldr	r0, [pc, #-956]	; 2c2cc <__assert_fail@plt+0x1a2e4>
   2c684:	bl	27380 <__assert_fail@plt+0x15398>
   2c688:	b	2b268 <__assert_fail@plt+0x19280>
   2c68c:	cmp	r3, #0
   2c690:	beq	2c114 <__assert_fail@plt+0x1a12c>
   2c694:	b	2c588 <__assert_fail@plt+0x1a5a0>
   2c698:	cmp	r2, #0
   2c69c:	str	r3, [sp, #96]	; 0x60
   2c6a0:	beq	2b268 <__assert_fail@plt+0x19280>
   2c6a4:	ldr	r0, [pc, #-988]	; 2c2d0 <__assert_fail@plt+0x1a2e8>
   2c6a8:	add	r4, sp, #832	; 0x340
   2c6ac:	bl	27380 <__assert_fail@plt+0x15398>
   2c6b0:	mov	r2, r4
   2c6b4:	add	r1, sp, #352	; 0x160
   2c6b8:	add	r0, sp, #176	; 0xb0
   2c6bc:	bl	2775c <__assert_fail@plt+0x15774>
   2c6c0:	mov	r1, r0
   2c6c4:	ldr	r0, [pc, #-1016]	; 2c2d4 <__assert_fail@plt+0x1a2ec>
   2c6c8:	bl	27380 <__assert_fail@plt+0x15398>
   2c6cc:	mov	r2, r4
   2c6d0:	add	r1, sp, #352	; 0x160
   2c6d4:	add	r0, sp, #132	; 0x84
   2c6d8:	bl	2775c <__assert_fail@plt+0x15774>
   2c6dc:	mov	r1, r0
   2c6e0:	ldr	r0, [pc, #-1040]	; 2c2d8 <__assert_fail@plt+0x1a2f0>
   2c6e4:	bl	27380 <__assert_fail@plt+0x15398>
   2c6e8:	ldr	r3, [sp, #96]	; 0x60
   2c6ec:	ldr	r1, [pc, #-1048]	; 2c2dc <__assert_fail@plt+0x1a2f4>
   2c6f0:	cmp	r3, sl
   2c6f4:	ldr	r2, [pc, #-1040]	; 2c2ec <__assert_fail@plt+0x1a304>
   2c6f8:	mov	r0, sl
   2c6fc:	ldr	r3, [sp, #56]	; 0x38
   2c700:	movne	sl, r1
   2c704:	ldr	r1, [sp, #48]	; 0x30
   2c708:	ldr	ip, [pc, #-1072]	; 2c2e0 <__assert_fail@plt+0x1a2f8>
   2c70c:	moveq	sl, r2
   2c710:	cmp	r3, r1
   2c714:	moveq	r0, r2
   2c718:	movne	r0, ip
   2c71c:	cmp	r7, r5
   2c720:	moveq	r1, r2
   2c724:	movne	r1, ip
   2c728:	cmp	fp, r8
   2c72c:	movne	r2, ip
   2c730:	b	2b7c8 <__assert_fail@plt+0x197e0>
   2c734:	add	r1, sp, #588	; 0x24c
   2c738:	ldr	r0, [sp, #152]	; 0x98
   2c73c:	bl	27304 <__assert_fail@plt+0x1531c>
   2c740:	ldr	r2, [sp, #148]	; 0x94
   2c744:	ldr	ip, [sp, #144]	; 0x90
   2c748:	ldr	r1, [pc, #-1132]	; 2c2e4 <__assert_fail@plt+0x1a2fc>
   2c74c:	mov	r3, #100	; 0x64
   2c750:	add	r2, r2, #1
   2c754:	add	r5, sp, #632	; 0x278
   2c758:	str	r2, [sp, #8]
   2c75c:	str	ip, [sp, #12]
   2c760:	str	r1, [sp]
   2c764:	mov	r2, #1
   2c768:	mov	r1, r3
   2c76c:	str	r0, [sp, #4]
   2c770:	mov	r0, r5
   2c774:	bl	11fdc <__snprintf_chk@plt>
   2c778:	mov	r1, r5
   2c77c:	ldr	r0, [pc, #-1180]	; 2c2e8 <__assert_fail@plt+0x1a300>
   2c780:	bl	27380 <__assert_fail@plt+0x15398>
   2c784:	ldr	r3, [sp, #512]	; 0x200
   2c788:	cmp	r3, #0
   2c78c:	beq	2c118 <__assert_fail@plt+0x1a130>
   2c790:	ldr	r3, [sp, #508]	; 0x1fc
   2c794:	cmp	r3, #0
   2c798:	bne	2c58c <__assert_fail@plt+0x1a5a4>
   2c79c:	b	2c118 <__assert_fail@plt+0x1a130>
   2c7a0:	mvn	r0, #0
   2c7a4:	ldr	r1, [pc, #-1216]	; 2c2ec <__assert_fail@plt+0x1a304>
   2c7a8:	str	r0, [sp, #140]	; 0x8c
   2c7ac:	b	2c540 <__assert_fail@plt+0x1a558>
   2c7b0:	ldr	r3, [sp, #140]	; 0x8c
   2c7b4:	cmp	r3, #12
   2c7b8:	beq	2c1d0 <__assert_fail@plt+0x1a1e8>
   2c7bc:	ldr	r0, [pc, #-1236]	; 2c2f0 <__assert_fail@plt+0x1a308>
   2c7c0:	bl	27380 <__assert_fail@plt+0x15398>
   2c7c4:	b	2c1d0 <__assert_fail@plt+0x1a1e8>
   2c7c8:	ldrd	r0, [sp, #32]
   2c7cc:	mov	ip, #7
   2c7d0:	cmp	r1, #0
   2c7d4:	umull	r2, r3, r0, ip
   2c7d8:	umull	r0, r1, ip, r1
   2c7dc:	mov	sl, r0
   2c7e0:	mov	fp, r1
   2c7e4:	bge	2c7f8 <__assert_fail@plt+0x1a810>
   2c7e8:	subs	r1, r0, r4
   2c7ec:	mov	sl, r1
   2c7f0:	sbc	r1, fp, ip
   2c7f4:	mov	fp, r1
   2c7f8:	adds	r0, sl, r3
   2c7fc:	mov	ip, #0
   2c800:	adc	r1, fp, ip
   2c804:	cmp	r1, r0, asr #31
   2c808:	bne	2c9d8 <__assert_fail@plt+0x1a9f0>
   2c80c:	mov	r1, r2
   2c810:	b	2bc14 <__assert_fail@plt+0x19c2c>
   2c814:	ldrb	r3, [sp, #533]	; 0x215
   2c818:	cmp	r3, #0
   2c81c:	beq	2b268 <__assert_fail@plt+0x19280>
   2c820:	add	r1, sp, #832	; 0x340
   2c824:	ldr	r0, [pc, #-1336]	; 2c2f4 <__assert_fail@plt+0x1a30c>
   2c828:	bl	27380 <__assert_fail@plt+0x15398>
   2c82c:	b	2b268 <__assert_fail@plt+0x19280>
   2c830:	mov	r1, #3600	; 0xe10
   2c834:	cmp	fp, #0
   2c838:	umull	r2, r3, r1, fp
   2c83c:	umull	r4, r5, r7, r1
   2c840:	strd	r2, [sp, #48]	; 0x30
   2c844:	bge	2c85c <__assert_fail@plt+0x1a874>
   2c848:	subs	r3, r2, ip
   2c84c:	str	r3, [sp, #48]	; 0x30
   2c850:	ldr	r3, [sp, #52]	; 0x34
   2c854:	sbc	r3, r3, r1
   2c858:	str	r3, [sp, #52]	; 0x34
   2c85c:	ldr	r3, [sp, #48]	; 0x30
   2c860:	mov	r2, #0
   2c864:	adds	r1, r3, r5
   2c868:	ldr	r3, [sp, #52]	; 0x34
   2c86c:	adc	r3, r3, r2
   2c870:	cmp	r3, r1, asr #31
   2c874:	beq	2c654 <__assert_fail@plt+0x1a66c>
   2c878:	lsl	r3, fp, #3
   2c87c:	lsl	r2, r7, #3
   2c880:	subs	r2, r2, r7
   2c884:	orr	r3, r3, r7, lsr #29
   2c888:	sbc	r3, r3, fp
   2c88c:	lsl	r1, r2, #5
   2c890:	lsl	r3, r3, #5
   2c894:	orr	r3, r3, r2, lsr #27
   2c898:	adds	r2, r1, r7
   2c89c:	adc	r1, r3, fp
   2c8a0:	lsl	r3, r2, #4
   2c8a4:	lsl	r1, r1, #4
   2c8a8:	orr	r1, r1, r2, lsr #28
   2c8ac:	mov	r4, r3
   2c8b0:	mov	ip, #1
   2c8b4:	b	2c654 <__assert_fail@plt+0x1a66c>
   2c8b8:	ldr	r3, [sp, #64]	; 0x40
   2c8bc:	mov	r1, #60	; 0x3c
   2c8c0:	cmp	r3, #0
   2c8c4:	umull	r2, r3, r1, r3
   2c8c8:	umull	r4, r5, sl, r1
   2c8cc:	strd	r2, [sp, #48]	; 0x30
   2c8d0:	bge	2c8e8 <__assert_fail@plt+0x1a900>
   2c8d4:	subs	r3, r2, ip
   2c8d8:	str	r3, [sp, #48]	; 0x30
   2c8dc:	ldr	r3, [sp, #52]	; 0x34
   2c8e0:	sbc	r3, r3, r1
   2c8e4:	str	r3, [sp, #52]	; 0x34
   2c8e8:	ldr	r3, [sp, #48]	; 0x30
   2c8ec:	mov	r2, #0
   2c8f0:	adds	r1, r3, r5
   2c8f4:	ldr	r3, [sp, #52]	; 0x34
   2c8f8:	adc	r3, r3, r2
   2c8fc:	cmp	r3, r1, asr #31
   2c900:	beq	2bedc <__assert_fail@plt+0x19ef4>
   2c904:	ldr	r3, [sp, #64]	; 0x40
   2c908:	lsl	r4, sl, #4
   2c90c:	subs	r4, r4, sl
   2c910:	lsl	r1, r3, #4
   2c914:	orr	r1, r1, sl, lsr #28
   2c918:	sbc	r1, r1, r3
   2c91c:	lsl	r3, r4, #2
   2c920:	lsl	r1, r1, #2
   2c924:	orr	r1, r1, r4, lsr #30
   2c928:	mov	ip, #1
   2c92c:	mov	r4, r3
   2c930:	b	2bedc <__assert_fail@plt+0x19ef4>
   2c934:	mov	r1, #3600	; 0xe10
   2c938:	cmp	fp, #0
   2c93c:	umull	r2, r3, r7, r1
   2c940:	strd	r2, [sp, #64]	; 0x40
   2c944:	umull	r2, r3, r1, fp
   2c948:	strd	r2, [sp, #48]	; 0x30
   2c94c:	bge	2c964 <__assert_fail@plt+0x1a97c>
   2c950:	subs	r3, r2, ip
   2c954:	str	r3, [sp, #48]	; 0x30
   2c958:	ldr	r3, [sp, #52]	; 0x34
   2c95c:	sbc	r3, r3, r1
   2c960:	str	r3, [sp, #52]	; 0x34
   2c964:	ldr	r1, [sp, #68]	; 0x44
   2c968:	ldr	r3, [sp, #48]	; 0x30
   2c96c:	adds	r2, r3, r1
   2c970:	ldr	r3, [sp, #52]	; 0x34
   2c974:	mov	r1, #0
   2c978:	adc	r3, r3, r1
   2c97c:	cmp	r3, r2, asr #31
   2c980:	bne	2ca80 <__assert_fail@plt+0x1aa98>
   2c984:	ldr	sl, [sp, #64]	; 0x40
   2c988:	mov	r3, r2
   2c98c:	b	2be8c <__assert_fail@plt+0x19ea4>
   2c990:	mov	r3, #52	; 0x34
   2c994:	b	2b858 <__assert_fail@plt+0x19870>
   2c998:	cmp	r3, #0
   2c99c:	beq	2b268 <__assert_fail@plt+0x19280>
   2c9a0:	add	r1, sp, #352	; 0x160
   2c9a4:	add	r0, sp, #132	; 0x84
   2c9a8:	add	r2, sp, #632	; 0x278
   2c9ac:	bl	2775c <__assert_fail@plt+0x15774>
   2c9b0:	mov	r1, r0
   2c9b4:	ldr	r0, [pc, #-1732]	; 2c2f8 <__assert_fail@plt+0x1a310>
   2c9b8:	bl	27380 <__assert_fail@plt+0x15398>
   2c9bc:	b	2b268 <__assert_fail@plt+0x19280>
   2c9c0:	ldr	r0, [pc, #-1740]	; 2c2fc <__assert_fail@plt+0x1a314>
   2c9c4:	bl	27380 <__assert_fail@plt+0x15398>
   2c9c8:	b	2b894 <__assert_fail@plt+0x198ac>
   2c9cc:	ldr	r0, [pc, #-1748]	; 2c300 <__assert_fail@plt+0x1a318>
   2c9d0:	bl	27380 <__assert_fail@plt+0x15398>
   2c9d4:	b	2b888 <__assert_fail@plt+0x198a0>
   2c9d8:	ldrd	r4, [sp, #32]
   2c9dc:	lsl	r1, r4, #3
   2c9e0:	lsl	r0, r5, #3
   2c9e4:	subs	r2, r1, r4
   2c9e8:	orr	r0, r0, r4, lsr #29
   2c9ec:	sbc	r0, r0, r5
   2c9f0:	mov	r1, r2
   2c9f4:	mov	r4, #1
   2c9f8:	b	2bc14 <__assert_fail@plt+0x19c2c>
   2c9fc:	bl	11b50 <__stack_chk_fail@plt>
   2ca00:	ldrd	r2, [sp, #48]	; 0x30
   2ca04:	ldr	r0, [pc, #-1800]	; 2c304 <__assert_fail@plt+0x1a31c>
   2ca08:	str	r8, [sp, #16]
   2ca0c:	strd	r2, [sp, #8]
   2ca10:	ldr	r3, [sp, #64]	; 0x40
   2ca14:	mov	r2, r7
   2ca18:	str	r3, [sp, #4]
   2ca1c:	str	sl, [sp]
   2ca20:	mov	r3, fp
   2ca24:	bl	27380 <__assert_fail@plt+0x15398>
   2ca28:	mov	r3, r5
   2ca2c:	mov	r2, r4
   2ca30:	ldr	r0, [pc, #-1840]	; 2c308 <__assert_fail@plt+0x1a320>
   2ca34:	bl	27380 <__assert_fail@plt+0x15398>
   2ca38:	ldr	r3, [sp, #164]	; 0xa4
   2ca3c:	cmn	r3, #1
   2ca40:	beq	2ca74 <__assert_fail@plt+0x1aa8c>
   2ca44:	add	r2, sp, #308	; 0x134
   2ca48:	ldr	r1, [sp, #60]	; 0x3c
   2ca4c:	mov	r0, r9
   2ca50:	bl	2fa34 <renameat2@@Base+0xd20>
   2ca54:	cmp	r0, #0
   2ca58:	beq	2ca74 <__assert_fail@plt+0x1aa8c>
   2ca5c:	ldr	r2, [sp, #164]	; 0xa4
   2ca60:	ldr	r3, [sp, #340]	; 0x154
   2ca64:	cmp	r2, r3
   2ca68:	beq	2ca74 <__assert_fail@plt+0x1aa8c>
   2ca6c:	ldr	r0, [pc, #-1896]	; 2c30c <__assert_fail@plt+0x1a324>
   2ca70:	bl	27380 <__assert_fail@plt+0x15398>
   2ca74:	ldrb	r3, [sp, #533]	; 0x215
   2ca78:	str	r3, [sp, #32]
   2ca7c:	b	2c00c <__assert_fail@plt+0x1a024>
   2ca80:	lsl	r3, fp, #3
   2ca84:	lsl	r2, r7, #3
   2ca88:	subs	r2, r2, r7
   2ca8c:	orr	r3, r3, r7, lsr #29
   2ca90:	sbc	r3, r3, fp
   2ca94:	lsl	r1, r2, #5
   2ca98:	lsl	r3, r3, #5
   2ca9c:	orr	r3, r3, r2, lsr #27
   2caa0:	adds	r2, r1, r7
   2caa4:	adc	r3, r3, fp
   2caa8:	lsl	r1, r2, #4
   2caac:	lsl	r3, r3, #4
   2cab0:	orr	r3, r3, r2, lsr #28
   2cab4:	mov	sl, r1
   2cab8:	mov	ip, #1
   2cabc:	b	2be8c <__assert_fail@plt+0x19ea4>
   2cac0:	push	{r4, r5, r6, r7, r8, lr}
   2cac4:	mov	r5, r0
   2cac8:	sub	sp, sp, #8
   2cacc:	ldr	r0, [pc, #76]	; 2cb20 <__assert_fail@plt+0x1ab38>
   2cad0:	mov	r6, r1
   2cad4:	mov	r7, r2
   2cad8:	bl	11c94 <getenv@plt>
   2cadc:	mov	r8, r0
   2cae0:	bl	2f7a8 <renameat2@@Base+0xa94>
   2cae4:	subs	r4, r0, #0
   2cae8:	moveq	r5, r4
   2caec:	beq	2cb14 <__assert_fail@plt+0x1ab2c>
   2caf0:	mov	r0, r5
   2caf4:	stm	sp, {r4, r8}
   2caf8:	mov	r2, r7
   2cafc:	mov	r1, r6
   2cb00:	mov	r3, #0
   2cb04:	bl	2ae90 <__assert_fail@plt+0x18ea8>
   2cb08:	mov	r5, r0
   2cb0c:	mov	r0, r4
   2cb10:	bl	2fa28 <renameat2@@Base+0xd14>
   2cb14:	mov	r0, r5
   2cb18:	add	sp, sp, #8
   2cb1c:	pop	{r4, r5, r6, r7, r8, pc}
   2cb20:	andeq	r2, r3, r0, ror #21
   2cb24:	push	{r4, r5, r6, lr}
   2cb28:	subs	r4, r0, #0
   2cb2c:	beq	2cba0 <__assert_fail@plt+0x1abb8>
   2cb30:	mov	r1, #47	; 0x2f
   2cb34:	bl	11ea4 <strrchr@plt>
   2cb38:	subs	r5, r0, #0
   2cb3c:	beq	2cb8c <__assert_fail@plt+0x1aba4>
   2cb40:	add	r6, r5, #1
   2cb44:	sub	r3, r6, r4
   2cb48:	cmp	r3, #6
   2cb4c:	ble	2cb8c <__assert_fail@plt+0x1aba4>
   2cb50:	mov	r2, #7
   2cb54:	ldr	r1, [pc, #96]	; 2cbbc <__assert_fail@plt+0x1abd4>
   2cb58:	sub	r0, r5, #6
   2cb5c:	bl	11f94 <strncmp@plt>
   2cb60:	cmp	r0, #0
   2cb64:	bne	2cb8c <__assert_fail@plt+0x1aba4>
   2cb68:	mov	r2, #3
   2cb6c:	ldr	r1, [pc, #76]	; 2cbc0 <__assert_fail@plt+0x1abd8>
   2cb70:	mov	r0, r6
   2cb74:	bl	11f94 <strncmp@plt>
   2cb78:	cmp	r0, #0
   2cb7c:	movne	r4, r6
   2cb80:	ldreq	r3, [pc, #60]	; 2cbc4 <__assert_fail@plt+0x1abdc>
   2cb84:	addeq	r4, r5, #4
   2cb88:	streq	r4, [r3]
   2cb8c:	ldr	r2, [pc, #52]	; 2cbc8 <__assert_fail@plt+0x1abe0>
   2cb90:	ldr	r3, [pc, #52]	; 2cbcc <__assert_fail@plt+0x1abe4>
   2cb94:	str	r4, [r2]
   2cb98:	str	r4, [r3]
   2cb9c:	pop	{r4, r5, r6, pc}
   2cba0:	ldr	r3, [pc, #40]	; 2cbd0 <__assert_fail@plt+0x1abe8>
   2cba4:	mov	r2, #55	; 0x37
   2cba8:	mov	r1, #1
   2cbac:	ldr	r3, [r3]
   2cbb0:	ldr	r0, [pc, #28]	; 2cbd4 <__assert_fail@plt+0x1abec>
   2cbb4:	bl	11c1c <fwrite@plt>
   2cbb8:	bl	11fa0 <abort@plt>
   2cbbc:	andeq	r6, r3, r0, ror #27
   2cbc0:	andeq	r6, r3, r8, ror #27
   2cbc4:	andeq	r8, r4, r8, ror #5
   2cbc8:	andeq	sl, r4, r8, ror #10
   2cbcc:	andeq	r8, r4, ip, ror #5
   2cbd0:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   2cbd4:	andeq	r6, r3, r8, lsr #27
   2cbd8:	push	{r4, lr}
   2cbdc:	mov	r2, #48	; 0x30
   2cbe0:	mov	r4, r1
   2cbe4:	mov	r1, #0
   2cbe8:	bl	11df0 <memset@plt>
   2cbec:	cmp	r4, #10
   2cbf0:	beq	2cbfc <__assert_fail@plt+0x1ac14>
   2cbf4:	str	r4, [r0]
   2cbf8:	pop	{r4, pc}
   2cbfc:	bl	11fa0 <abort@plt>
   2cc00:	push	{r4, r5, r6, lr}
   2cc04:	mov	r5, r0
   2cc08:	mov	r4, r1
   2cc0c:	bl	2fc94 <renameat2@@Base+0xf80>
   2cc10:	ldrb	r3, [r0]
   2cc14:	bic	r3, r3, #32
   2cc18:	cmp	r3, #85	; 0x55
   2cc1c:	bne	2cc7c <__assert_fail@plt+0x1ac94>
   2cc20:	ldrb	r3, [r0, #1]
   2cc24:	bic	r3, r3, #32
   2cc28:	cmp	r3, #84	; 0x54
   2cc2c:	bne	2ccd0 <__assert_fail@plt+0x1ace8>
   2cc30:	ldrb	r3, [r0, #2]
   2cc34:	bic	r3, r3, #32
   2cc38:	cmp	r3, #70	; 0x46
   2cc3c:	bne	2ccd0 <__assert_fail@plt+0x1ace8>
   2cc40:	ldrb	r3, [r0, #3]
   2cc44:	cmp	r3, #45	; 0x2d
   2cc48:	bne	2ccd0 <__assert_fail@plt+0x1ace8>
   2cc4c:	ldrb	r3, [r0, #4]
   2cc50:	cmp	r3, #56	; 0x38
   2cc54:	bne	2ccd0 <__assert_fail@plt+0x1ace8>
   2cc58:	ldrb	r3, [r0, #5]
   2cc5c:	cmp	r3, #0
   2cc60:	bne	2ccd0 <__assert_fail@plt+0x1ace8>
   2cc64:	ldrb	r3, [r5]
   2cc68:	ldr	r1, [pc, #152]	; 2cd08 <__assert_fail@plt+0x1ad20>
   2cc6c:	ldr	r0, [pc, #152]	; 2cd0c <__assert_fail@plt+0x1ad24>
   2cc70:	cmp	r3, #96	; 0x60
   2cc74:	movne	r0, r1
   2cc78:	pop	{r4, r5, r6, pc}
   2cc7c:	cmp	r3, #71	; 0x47
   2cc80:	bne	2ccd0 <__assert_fail@plt+0x1ace8>
   2cc84:	ldrb	r3, [r0, #1]
   2cc88:	bic	r3, r3, #32
   2cc8c:	cmp	r3, #66	; 0x42
   2cc90:	bne	2ccd0 <__assert_fail@plt+0x1ace8>
   2cc94:	ldrb	r3, [r0, #2]
   2cc98:	cmp	r3, #49	; 0x31
   2cc9c:	bne	2ccd0 <__assert_fail@plt+0x1ace8>
   2cca0:	ldrb	r3, [r0, #3]
   2cca4:	cmp	r3, #56	; 0x38
   2cca8:	bne	2ccd0 <__assert_fail@plt+0x1ace8>
   2ccac:	ldrb	r3, [r0, #4]
   2ccb0:	cmp	r3, #48	; 0x30
   2ccb4:	bne	2ccd0 <__assert_fail@plt+0x1ace8>
   2ccb8:	ldrb	r3, [r0, #5]
   2ccbc:	cmp	r3, #51	; 0x33
   2ccc0:	bne	2ccd0 <__assert_fail@plt+0x1ace8>
   2ccc4:	ldrb	r3, [r0, #6]
   2ccc8:	cmp	r3, #48	; 0x30
   2cccc:	beq	2cce4 <__assert_fail@plt+0x1acfc>
   2ccd0:	ldr	r1, [pc, #56]	; 2cd10 <__assert_fail@plt+0x1ad28>
   2ccd4:	cmp	r4, #9
   2ccd8:	ldr	r0, [pc, #52]	; 2cd14 <__assert_fail@plt+0x1ad2c>
   2ccdc:	movne	r0, r1
   2cce0:	pop	{r4, r5, r6, pc}
   2cce4:	ldrb	r3, [r0, #7]
   2cce8:	cmp	r3, #0
   2ccec:	bne	2ccd0 <__assert_fail@plt+0x1ace8>
   2ccf0:	ldrb	r3, [r5]
   2ccf4:	ldr	r1, [pc, #28]	; 2cd18 <__assert_fail@plt+0x1ad30>
   2ccf8:	ldr	r0, [pc, #28]	; 2cd1c <__assert_fail@plt+0x1ad34>
   2ccfc:	cmp	r3, #96	; 0x60
   2cd00:	movne	r0, r1
   2cd04:	pop	{r4, r5, r6, pc}
   2cd08:	andeq	r6, r3, r4, asr #28
   2cd0c:	andeq	r6, r3, ip, asr #28
   2cd10:	andeq	r5, r3, r8, asr #32
   2cd14:			; <UNDEFINED> instruction: 0x000348b4
   2cd18:	andeq	r6, r3, r0, asr #28
   2cd1c:	andeq	r6, r3, r8, asr #28
   2cd20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cd24:	sub	sp, sp, #124	; 0x7c
   2cd28:	ldr	ip, [pc, #4080]	; 2dd20 <__assert_fail@plt+0x1bd38>
   2cd2c:	str	r3, [sp, #24]
   2cd30:	ldr	r3, [sp, #168]	; 0xa8
   2cd34:	ldr	ip, [ip]
   2cd38:	str	r3, [sp, #56]	; 0x38
   2cd3c:	ldr	r3, [sp, #172]	; 0xac
   2cd40:	ldr	r8, [sp, #160]	; 0xa0
   2cd44:	str	r3, [sp, #80]	; 0x50
   2cd48:	ldr	r3, [sp, #176]	; 0xb0
   2cd4c:	mov	fp, r0
   2cd50:	str	r3, [sp, #76]	; 0x4c
   2cd54:	mov	sl, r1
   2cd58:	str	r2, [sp, #28]
   2cd5c:	str	ip, [sp, #116]	; 0x74
   2cd60:	bl	11c40 <__ctype_get_mb_cur_max@plt>
   2cd64:	ldr	r3, [sp, #164]	; 0xa4
   2cd68:	ands	r4, r3, #2
   2cd6c:	movne	r3, #1
   2cd70:	moveq	r3, #0
   2cd74:	str	r3, [sp, #36]	; 0x24
   2cd78:	str	r0, [sp, #64]	; 0x40
   2cd7c:	cmp	r8, #10
   2cd80:	ldrls	pc, [pc, r8, lsl #2]
   2cd84:	b	2e4d0 <__assert_fail@plt+0x1c4e8>
   2cd88:	andeq	sp, r2, ip, ror r1
   2cd8c:	andeq	sp, r2, r4, lsl r2
   2cd90:	andeq	sp, r2, ip, ror #15
   2cd94:	andeq	sp, r2, r4, lsr r2
   2cd98:	andeq	sp, r2, r8, ror #1
   2cd9c:	andeq	sp, r2, r0, lsr r1
   2cda0:	andeq	sp, r2, ip, lsr #3
   2cda4:	andeq	sp, r2, r4, ror #3
   2cda8:			; <UNDEFINED> instruction: 0x0002cdb4
   2cdac:			; <UNDEFINED> instruction: 0x0002cdb4
   2cdb0:			; <UNDEFINED> instruction: 0x0002cdb4
   2cdb4:	cmp	r8, #10
   2cdb8:	beq	2cddc <__assert_fail@plt+0x1adf4>
   2cdbc:	mov	r1, r8
   2cdc0:	ldr	r0, [pc, #3932]	; 2dd24 <__assert_fail@plt+0x1bd3c>
   2cdc4:	bl	2cc00 <__assert_fail@plt+0x1ac18>
   2cdc8:	mov	r1, r8
   2cdcc:	str	r0, [sp, #80]	; 0x50
   2cdd0:	ldr	r0, [pc, #3924]	; 2dd2c <__assert_fail@plt+0x1bd44>
   2cdd4:	bl	2cc00 <__assert_fail@plt+0x1ac18>
   2cdd8:	str	r0, [sp, #76]	; 0x4c
   2cddc:	cmp	r4, #0
   2cde0:	movne	r4, #0
   2cde4:	beq	2e1ac <__assert_fail@plt+0x1c1c4>
   2cde8:	ldr	r7, [sp, #76]	; 0x4c
   2cdec:	mov	r5, #0
   2cdf0:	mov	r6, #1
   2cdf4:	mov	r0, r7
   2cdf8:	str	r6, [sp, #32]
   2cdfc:	str	r5, [sp, #68]	; 0x44
   2ce00:	bl	11d78 <strlen@plt>
   2ce04:	str	r6, [sp, #40]	; 0x28
   2ce08:	str	r5, [sp, #44]	; 0x2c
   2ce0c:	str	r5, [sp, #72]	; 0x48
   2ce10:	str	r7, [sp, #60]	; 0x3c
   2ce14:	str	r0, [sp, #52]	; 0x34
   2ce18:	str	r8, [sp, #160]	; 0xa0
   2ce1c:	mov	r8, fp
   2ce20:	ldr	fp, [sp, #160]	; 0xa0
   2ce24:	mov	r9, #0
   2ce28:	ldr	r3, [sp, #24]
   2ce2c:	cmn	r3, #1
   2ce30:	beq	2d380 <__assert_fail@plt+0x1b398>
   2ce34:	ldr	r3, [sp, #24]
   2ce38:	subs	r6, r3, r9
   2ce3c:	movne	r6, #1
   2ce40:	cmp	r6, #0
   2ce44:	beq	2d398 <__assert_fail@plt+0x1b3b0>
   2ce48:	ldr	r7, [sp, #40]	; 0x28
   2ce4c:	ldr	r0, [sp, #28]
   2ce50:	cmp	fp, #2
   2ce54:	moveq	r7, #0
   2ce58:	andne	r7, r7, #1
   2ce5c:	add	r3, r0, r9
   2ce60:	cmp	r7, #0
   2ce64:	str	r3, [sp, #48]	; 0x30
   2ce68:	beq	2d82c <__assert_fail@plt+0x1b844>
   2ce6c:	ldr	r2, [sp, #52]	; 0x34
   2ce70:	cmp	r2, #0
   2ce74:	beq	2dac8 <__assert_fail@plt+0x1bae0>
   2ce78:	ldr	r1, [sp, #24]
   2ce7c:	cmp	r2, #1
   2ce80:	mov	r3, r2
   2ce84:	movls	r3, #0
   2ce88:	movhi	r3, #1
   2ce8c:	cmn	r1, #1
   2ce90:	movne	r3, #0
   2ce94:	cmp	r3, #0
   2ce98:	add	r5, r9, r2
   2ce9c:	beq	2cea8 <__assert_fail@plt+0x1aec0>
   2cea0:	bl	11d78 <strlen@plt>
   2cea4:	str	r0, [sp, #24]
   2cea8:	ldr	r3, [sp, #24]
   2ceac:	cmp	r5, r3
   2ceb0:	bhi	2dac8 <__assert_fail@plt+0x1bae0>
   2ceb4:	ldr	r2, [sp, #52]	; 0x34
   2ceb8:	ldr	r1, [sp, #60]	; 0x3c
   2cebc:	ldr	r0, [sp, #48]	; 0x30
   2cec0:	bl	11b44 <memcmp@plt>
   2cec4:	cmp	r0, #0
   2cec8:	bne	2dac8 <__assert_fail@plt+0x1bae0>
   2cecc:	ldr	r3, [sp, #36]	; 0x24
   2ced0:	cmp	r3, #0
   2ced4:	bne	2e398 <__assert_fail@plt+0x1c3b0>
   2ced8:	ldr	r3, [sp, #48]	; 0x30
   2cedc:	ldrb	r5, [r3]
   2cee0:	cmp	r5, #126	; 0x7e
   2cee4:	ldrls	pc, [pc, r5, lsl #2]
   2cee8:	b	2d790 <__assert_fail@plt+0x1b7a8>
   2ceec:	muleq	r2, r4, r6
   2cef0:	muleq	r2, r0, r7
   2cef4:	muleq	r2, r0, r7
   2cef8:	muleq	r2, r0, r7
   2cefc:	muleq	r2, r0, r7
   2cf00:	muleq	r2, r0, r7
   2cf04:	muleq	r2, r0, r7
   2cf08:	andeq	sp, r2, r8, ror #12
   2cf0c:	andeq	sp, r2, r0, ror #12
   2cf10:	andeq	sp, r2, r0, lsr #11
   2cf14:	andeq	sp, r2, r4, asr r6
   2cf18:	muleq	r2, r8, r5
   2cf1c:	andeq	sp, r2, r0, lsr r6
   2cf20:	andeq	sp, r2, ip, ror r6
   2cf24:	muleq	r2, r0, r7
   2cf28:	muleq	r2, r0, r7
   2cf2c:	muleq	r2, r0, r7
   2cf30:	muleq	r2, r0, r7
   2cf34:	muleq	r2, r0, r7
   2cf38:	muleq	r2, r0, r7
   2cf3c:	muleq	r2, r0, r7
   2cf40:	muleq	r2, r0, r7
   2cf44:	muleq	r2, r0, r7
   2cf48:	muleq	r2, r0, r7
   2cf4c:	muleq	r2, r0, r7
   2cf50:	muleq	r2, r0, r7
   2cf54:	muleq	r2, r0, r7
   2cf58:	muleq	r2, r0, r7
   2cf5c:	muleq	r2, r0, r7
   2cf60:	muleq	r2, r0, r7
   2cf64:	muleq	r2, r0, r7
   2cf68:	muleq	r2, r0, r7
   2cf6c:	andeq	sp, r2, ip, ror #14
   2cf70:	andeq	sp, r2, r4, ror r6
   2cf74:	andeq	sp, r2, r4, ror r6
   2cf78:	andeq	sp, r2, r0, asr r7
   2cf7c:	andeq	sp, r2, r4, ror r6
   2cf80:	andeq	sp, r2, r4, lsl #15
   2cf84:	andeq	sp, r2, r4, ror r6
   2cf88:	andeq	sp, r2, ip, asr #9
   2cf8c:	andeq	sp, r2, r4, ror r6
   2cf90:	andeq	sp, r2, r4, ror r6
   2cf94:	andeq	sp, r2, r4, ror r6
   2cf98:	andeq	sp, r2, r4, lsl #15
   2cf9c:	andeq	sp, r2, r4, lsl #15
   2cfa0:	andeq	sp, r2, r4, lsl #15
   2cfa4:	andeq	sp, r2, r4, lsl #15
   2cfa8:	andeq	sp, r2, r4, lsl #15
   2cfac:	andeq	sp, r2, r4, lsl #15
   2cfb0:	andeq	sp, r2, r4, lsl #15
   2cfb4:	andeq	sp, r2, r4, lsl #15
   2cfb8:	andeq	sp, r2, r4, lsl #15
   2cfbc:	andeq	sp, r2, r4, lsl #15
   2cfc0:	andeq	sp, r2, r4, lsl #15
   2cfc4:	andeq	sp, r2, r4, lsl #15
   2cfc8:	andeq	sp, r2, r4, lsl #15
   2cfcc:	andeq	sp, r2, r4, lsl #15
   2cfd0:	andeq	sp, r2, r4, lsl #15
   2cfd4:	andeq	sp, r2, r4, lsl #15
   2cfd8:	andeq	sp, r2, r4, ror r6
   2cfdc:	andeq	sp, r2, r4, ror r6
   2cfe0:	andeq	sp, r2, r4, ror r6
   2cfe4:	andeq	sp, r2, r4, ror r6
   2cfe8:	andeq	sp, r2, r0, lsr #9
   2cfec:	muleq	r2, r0, r7
   2cff0:	andeq	sp, r2, r4, lsl #15
   2cff4:	andeq	sp, r2, r4, lsl #15
   2cff8:	andeq	sp, r2, r4, lsl #15
   2cffc:	andeq	sp, r2, r4, lsl #15
   2d000:	andeq	sp, r2, r4, lsl #15
   2d004:	andeq	sp, r2, r4, lsl #15
   2d008:	andeq	sp, r2, r4, lsl #15
   2d00c:	andeq	sp, r2, r4, lsl #15
   2d010:	andeq	sp, r2, r4, lsl #15
   2d014:	andeq	sp, r2, r4, lsl #15
   2d018:	andeq	sp, r2, r4, lsl #15
   2d01c:	andeq	sp, r2, r4, lsl #15
   2d020:	andeq	sp, r2, r4, lsl #15
   2d024:	andeq	sp, r2, r4, lsl #15
   2d028:	andeq	sp, r2, r4, lsl #15
   2d02c:	andeq	sp, r2, r4, lsl #15
   2d030:	andeq	sp, r2, r4, lsl #15
   2d034:	andeq	sp, r2, r4, lsl #15
   2d038:	andeq	sp, r2, r4, lsl #15
   2d03c:	andeq	sp, r2, r4, lsl #15
   2d040:	andeq	sp, r2, r4, lsl #15
   2d044:	andeq	sp, r2, r4, lsl #15
   2d048:	andeq	sp, r2, r4, lsl #15
   2d04c:	andeq	sp, r2, r4, lsl #15
   2d050:	andeq	sp, r2, r4, lsl #15
   2d054:	andeq	sp, r2, r4, lsl #15
   2d058:	andeq	sp, r2, r4, ror r6
   2d05c:	andeq	sp, r2, r8, asr #8
   2d060:	andeq	sp, r2, r4, lsl #15
   2d064:	andeq	sp, r2, r4, ror r6
   2d068:	andeq	sp, r2, r4, lsl #15
   2d06c:	andeq	sp, r2, r4, ror r6
   2d070:	andeq	sp, r2, r4, lsl #15
   2d074:	andeq	sp, r2, r4, lsl #15
   2d078:	andeq	sp, r2, r4, lsl #15
   2d07c:	andeq	sp, r2, r4, lsl #15
   2d080:	andeq	sp, r2, r4, lsl #15
   2d084:	andeq	sp, r2, r4, lsl #15
   2d088:	andeq	sp, r2, r4, lsl #15
   2d08c:	andeq	sp, r2, r4, lsl #15
   2d090:	andeq	sp, r2, r4, lsl #15
   2d094:	andeq	sp, r2, r4, lsl #15
   2d098:	andeq	sp, r2, r4, lsl #15
   2d09c:	andeq	sp, r2, r4, lsl #15
   2d0a0:	andeq	sp, r2, r4, lsl #15
   2d0a4:	andeq	sp, r2, r4, lsl #15
   2d0a8:	andeq	sp, r2, r4, lsl #15
   2d0ac:	andeq	sp, r2, r4, lsl #15
   2d0b0:	andeq	sp, r2, r4, lsl #15
   2d0b4:	andeq	sp, r2, r4, lsl #15
   2d0b8:	andeq	sp, r2, r4, lsl #15
   2d0bc:	andeq	sp, r2, r4, lsl #15
   2d0c0:	andeq	sp, r2, r4, lsl #15
   2d0c4:	andeq	sp, r2, r4, lsl #15
   2d0c8:	andeq	sp, r2, r4, lsl #15
   2d0cc:	andeq	sp, r2, r4, lsl #15
   2d0d0:	andeq	sp, r2, r4, lsl #15
   2d0d4:	andeq	sp, r2, r4, lsl #15
   2d0d8:	andeq	sp, r2, r0, ror r2
   2d0dc:	andeq	sp, r2, r4, ror r6
   2d0e0:	andeq	sp, r2, r0, ror r2
   2d0e4:	andeq	sp, r2, r0, asr r7
   2d0e8:	cmp	r4, #0
   2d0ec:	moveq	r3, #1
   2d0f0:	streq	r3, [sp, #40]	; 0x28
   2d0f4:	beq	2d7f8 <__assert_fail@plt+0x1b810>
   2d0f8:	mov	r3, #0
   2d0fc:	mov	r4, r3
   2d100:	mov	r2, #1
   2d104:	str	r2, [sp, #32]
   2d108:	str	r3, [sp, #68]	; 0x44
   2d10c:	str	r2, [sp, #36]	; 0x24
   2d110:	str	r2, [sp, #52]	; 0x34
   2d114:	ldr	r3, [pc, #3088]	; 2dd2c <__assert_fail@plt+0x1bd44>
   2d118:	str	r4, [sp, #44]	; 0x2c
   2d11c:	str	r4, [sp, #72]	; 0x48
   2d120:	str	r4, [sp, #40]	; 0x28
   2d124:	str	r3, [sp, #60]	; 0x3c
   2d128:	mov	r8, #2
   2d12c:	b	2ce18 <__assert_fail@plt+0x1ae30>
   2d130:	cmp	r4, #0
   2d134:	bne	2e364 <__assert_fail@plt+0x1c37c>
   2d138:	cmp	sl, #0
   2d13c:	beq	2e130 <__assert_fail@plt+0x1c148>
   2d140:	mov	r3, #34	; 0x22
   2d144:	strb	r3, [fp]
   2d148:	ldr	r3, [pc, #3032]	; 2dd28 <__assert_fail@plt+0x1bd40>
   2d14c:	mov	r1, r4
   2d150:	mov	r2, #1
   2d154:	str	r4, [sp, #68]	; 0x44
   2d158:	str	r2, [sp, #32]
   2d15c:	mov	r4, r2
   2d160:	str	r1, [sp, #44]	; 0x2c
   2d164:	str	r1, [sp, #72]	; 0x48
   2d168:	str	r1, [sp, #36]	; 0x24
   2d16c:	str	r2, [sp, #40]	; 0x28
   2d170:	str	r2, [sp, #52]	; 0x34
   2d174:	str	r3, [sp, #60]	; 0x3c
   2d178:	b	2ce18 <__assert_fail@plt+0x1ae30>
   2d17c:	mov	r3, #0
   2d180:	str	r3, [sp, #68]	; 0x44
   2d184:	str	r3, [sp, #44]	; 0x2c
   2d188:	str	r3, [sp, #36]	; 0x24
   2d18c:	str	r3, [sp, #40]	; 0x28
   2d190:	str	r3, [sp, #60]	; 0x3c
   2d194:	mov	r3, #1
   2d198:	str	r8, [sp, #72]	; 0x48
   2d19c:	str	r8, [sp, #52]	; 0x34
   2d1a0:	mov	r4, r8
   2d1a4:	str	r3, [sp, #32]
   2d1a8:	b	2ce18 <__assert_fail@plt+0x1ae30>
   2d1ac:	mov	r3, #1
   2d1b0:	str	r3, [sp, #32]
   2d1b4:	str	r3, [sp, #36]	; 0x24
   2d1b8:	str	r3, [sp, #40]	; 0x28
   2d1bc:	str	r3, [sp, #52]	; 0x34
   2d1c0:	ldr	r3, [pc, #2912]	; 2dd28 <__assert_fail@plt+0x1bd40>
   2d1c4:	mov	r2, #0
   2d1c8:	mov	r4, r2
   2d1cc:	str	r2, [sp, #68]	; 0x44
   2d1d0:	str	r2, [sp, #44]	; 0x2c
   2d1d4:	str	r2, [sp, #72]	; 0x48
   2d1d8:	str	r3, [sp, #60]	; 0x3c
   2d1dc:	mov	r8, #5
   2d1e0:	b	2ce18 <__assert_fail@plt+0x1ae30>
   2d1e4:	mov	r3, #0
   2d1e8:	mov	r2, #1
   2d1ec:	str	r2, [sp, #32]
   2d1f0:	mov	r4, r3
   2d1f4:	str	r3, [sp, #68]	; 0x44
   2d1f8:	str	r2, [sp, #40]	; 0x28
   2d1fc:	str	r3, [sp, #44]	; 0x2c
   2d200:	str	r3, [sp, #72]	; 0x48
   2d204:	str	r3, [sp, #36]	; 0x24
   2d208:	str	r3, [sp, #52]	; 0x34
   2d20c:	str	r3, [sp, #60]	; 0x3c
   2d210:	b	2ce18 <__assert_fail@plt+0x1ae30>
   2d214:	mov	r2, #1
   2d218:	mov	r3, #0
   2d21c:	str	r2, [sp, #32]
   2d220:	mov	r4, r3
   2d224:	str	r3, [sp, #68]	; 0x44
   2d228:	str	r8, [sp, #52]	; 0x34
   2d22c:	str	r2, [sp, #36]	; 0x24
   2d230:	b	2d114 <__assert_fail@plt+0x1b12c>
   2d234:	mov	r3, #1
   2d238:	str	r3, [sp, #32]
   2d23c:	str	r3, [sp, #36]	; 0x24
   2d240:	str	r3, [sp, #40]	; 0x28
   2d244:	str	r3, [sp, #52]	; 0x34
   2d248:	ldr	r3, [pc, #2780]	; 2dd2c <__assert_fail@plt+0x1bd44>
   2d24c:	mov	r2, #0
   2d250:	mov	r4, r2
   2d254:	str	r2, [sp, #68]	; 0x44
   2d258:	str	r2, [sp, #44]	; 0x2c
   2d25c:	str	r2, [sp, #72]	; 0x48
   2d260:	str	r3, [sp, #60]	; 0x3c
   2d264:	mov	r8, #2
   2d268:	b	2ce18 <__assert_fail@plt+0x1ae30>
   2d26c:	mov	r7, #0
   2d270:	ldr	r3, [sp, #24]
   2d274:	cmn	r3, #1
   2d278:	beq	2dd58 <__assert_fail@plt+0x1bd70>
   2d27c:	ldr	r3, [sp, #24]
   2d280:	subs	r2, r3, #1
   2d284:	movne	r2, #1
   2d288:	cmp	r2, #0
   2d28c:	sub	r3, fp, #2
   2d290:	clz	r3, r3
   2d294:	lsr	r3, r3, #5
   2d298:	bne	2d2a4 <__assert_fail@plt+0x1b2bc>
   2d29c:	cmp	r9, #0
   2d2a0:	beq	2daa8 <__assert_fail@plt+0x1bac0>
   2d2a4:	mov	r6, #0
   2d2a8:	ldr	r2, [sp, #40]	; 0x28
   2d2ac:	eor	r2, r2, #1
   2d2b0:	orrs	r3, r3, r2
   2d2b4:	bne	2d488 <__assert_fail@plt+0x1b4a0>
   2d2b8:	ldr	r1, [sp, #56]	; 0x38
   2d2bc:	cmp	r1, #0
   2d2c0:	beq	2d2e0 <__assert_fail@plt+0x1b2f8>
   2d2c4:	lsr	r2, r5, #5
   2d2c8:	and	r0, r5, #31
   2d2cc:	uxtb	r2, r2
   2d2d0:	ldr	r1, [r1, r2, lsl #2]
   2d2d4:	lsr	r2, r1, r0
   2d2d8:	tst	r2, #1
   2d2dc:	bne	2d2e8 <__assert_fail@plt+0x1b300>
   2d2e0:	cmp	r7, #0
   2d2e4:	beq	2d550 <__assert_fail@plt+0x1b568>
   2d2e8:	ldr	r2, [sp, #36]	; 0x24
   2d2ec:	sub	r3, fp, #2
   2d2f0:	cmp	r2, #0
   2d2f4:	clz	r3, r3
   2d2f8:	lsr	r3, r3, #5
   2d2fc:	bne	2e0a0 <__assert_fail@plt+0x1c0b8>
   2d300:	ldr	r2, [sp, #44]	; 0x2c
   2d304:	eor	r2, r2, #1
   2d308:	ands	r3, r3, r2
   2d30c:	beq	2d344 <__assert_fail@plt+0x1b35c>
   2d310:	cmp	sl, r4
   2d314:	movhi	r2, #39	; 0x27
   2d318:	strbhi	r2, [r8, r4]
   2d31c:	add	r2, r4, #1
   2d320:	cmp	sl, r2
   2d324:	movhi	r1, #36	; 0x24
   2d328:	strbhi	r1, [r8, r2]
   2d32c:	add	r2, r4, #2
   2d330:	cmp	sl, r2
   2d334:	add	r4, r4, #3
   2d338:	movhi	r1, #39	; 0x27
   2d33c:	strbhi	r1, [r8, r2]
   2d340:	str	r3, [sp, #44]	; 0x2c
   2d344:	cmp	r4, sl
   2d348:	movcc	r3, #92	; 0x5c
   2d34c:	strbcc	r3, [r8, r4]
   2d350:	add	r9, r9, #1
   2d354:	add	r4, r4, #1
   2d358:	cmp	r4, sl
   2d35c:	ldr	r3, [sp, #32]
   2d360:	strbcc	r5, [r8, r4]
   2d364:	cmp	r6, #0
   2d368:	moveq	r3, #0
   2d36c:	str	r3, [sp, #32]
   2d370:	ldr	r3, [sp, #24]
   2d374:	add	r4, r4, #1
   2d378:	cmn	r3, #1
   2d37c:	bne	2ce34 <__assert_fail@plt+0x1ae4c>
   2d380:	ldr	r3, [sp, #28]
   2d384:	ldrb	r6, [r3, r9]
   2d388:	adds	r6, r6, #0
   2d38c:	movne	r6, #1
   2d390:	cmp	r6, #0
   2d394:	bne	2ce48 <__assert_fail@plt+0x1ae60>
   2d398:	str	fp, [sp, #160]	; 0xa0
   2d39c:	mov	fp, r8
   2d3a0:	ldr	r8, [sp, #160]	; 0xa0
   2d3a4:	ldr	r1, [sp, #36]	; 0x24
   2d3a8:	cmp	r4, #0
   2d3ac:	sub	r2, r8, #2
   2d3b0:	clz	r2, r2
   2d3b4:	lsr	r2, r2, #5
   2d3b8:	andeq	r3, r2, r1
   2d3bc:	movne	r3, #0
   2d3c0:	cmp	r3, #0
   2d3c4:	bne	2e46c <__assert_fail@plt+0x1c484>
   2d3c8:	eor	r3, r1, #1
   2d3cc:	ands	r2, r2, r3
   2d3d0:	beq	2e3a8 <__assert_fail@plt+0x1c3c0>
   2d3d4:	ldr	r3, [sp, #68]	; 0x44
   2d3d8:	cmp	r3, #0
   2d3dc:	beq	2e3ac <__assert_fail@plt+0x1c3c4>
   2d3e0:	ldr	r3, [sp, #32]
   2d3e4:	cmp	r3, #0
   2d3e8:	bne	2e428 <__assert_fail@plt+0x1c440>
   2d3ec:	ldr	r3, [sp, #72]	; 0x48
   2d3f0:	adds	r3, r3, #0
   2d3f4:	movne	r3, #1
   2d3f8:	cmp	sl, #0
   2d3fc:	movne	r3, #0
   2d400:	cmp	r3, #0
   2d404:	ldreq	r2, [sp, #68]	; 0x44
   2d408:	beq	2e3ac <__assert_fail@plt+0x1c3c4>
   2d40c:	ldr	r2, [sp, #72]	; 0x48
   2d410:	str	r3, [sp, #68]	; 0x44
   2d414:	ldr	r3, [pc, #2320]	; 2dd2c <__assert_fail@plt+0x1bd44>
   2d418:	mov	r1, #39	; 0x27
   2d41c:	mov	r4, #1
   2d420:	str	r3, [sp, #60]	; 0x3c
   2d424:	mov	r3, #0
   2d428:	ldr	sl, [sp, #72]	; 0x48
   2d42c:	strb	r1, [fp]
   2d430:	str	r2, [sp, #72]	; 0x48
   2d434:	str	r4, [sp, #52]	; 0x34
   2d438:	mov	r8, #2
   2d43c:	str	r3, [sp, #36]	; 0x24
   2d440:	b	2ce18 <__assert_fail@plt+0x1ae30>
   2d444:	mov	r7, #0
   2d448:	cmp	fp, #2
   2d44c:	beq	2dd38 <__assert_fail@plt+0x1bd50>
   2d450:	ldr	r3, [sp, #52]	; 0x34
   2d454:	ldr	r2, [sp, #40]	; 0x28
   2d458:	ldr	r1, [sp, #36]	; 0x24
   2d45c:	cmp	r3, #0
   2d460:	moveq	r3, #0
   2d464:	andne	r3, r2, r1
   2d468:	cmp	r3, #0
   2d46c:	moveq	r5, #92	; 0x5c
   2d470:	moveq	r3, r5
   2d474:	bne	2dd44 <__assert_fail@plt+0x1bd5c>
   2d478:	ldr	r2, [sp, #40]	; 0x28
   2d47c:	cmp	r2, #0
   2d480:	bne	2e16c <__assert_fail@plt+0x1c184>
   2d484:	mov	r6, #0
   2d488:	ldr	r3, [sp, #36]	; 0x24
   2d48c:	cmp	r3, #0
   2d490:	beq	2dd30 <__assert_fail@plt+0x1bd48>
   2d494:	mov	r3, #0
   2d498:	b	2d2b8 <__assert_fail@plt+0x1b2d0>
   2d49c:	mov	r7, #0
   2d4a0:	cmp	fp, #2
   2d4a4:	beq	2dda0 <__assert_fail@plt+0x1bdb8>
   2d4a8:	cmp	fp, #5
   2d4ac:	beq	2dd6c <__assert_fail@plt+0x1bd84>
   2d4b0:	sub	r3, fp, #2
   2d4b4:	clz	r3, r3
   2d4b8:	lsr	r3, r3, #5
   2d4bc:	mov	r6, #0
   2d4c0:	mov	r5, #63	; 0x3f
   2d4c4:	b	2d2a8 <__assert_fail@plt+0x1b2c0>
   2d4c8:	mov	r7, #0
   2d4cc:	cmp	fp, #2
   2d4d0:	strne	r6, [sp, #68]	; 0x44
   2d4d4:	movne	r3, #0
   2d4d8:	movne	r5, #39	; 0x27
   2d4dc:	bne	2d2a8 <__assert_fail@plt+0x1b2c0>
   2d4e0:	ldr	r3, [sp, #36]	; 0x24
   2d4e4:	cmp	r3, #0
   2d4e8:	bne	2e19c <__assert_fail@plt+0x1c1b4>
   2d4ec:	cmp	sl, #0
   2d4f0:	ldr	r3, [sp, #72]	; 0x48
   2d4f4:	clz	r3, r3
   2d4f8:	lsr	r3, r3, #5
   2d4fc:	moveq	r3, #0
   2d500:	cmp	r3, #0
   2d504:	bne	2e0d0 <__assert_fail@plt+0x1c0e8>
   2d508:	cmp	sl, r4
   2d50c:	movhi	r3, #39	; 0x27
   2d510:	strbhi	r3, [r8, r4]
   2d514:	add	r3, r4, #1
   2d518:	cmp	sl, r3
   2d51c:	movhi	r2, #92	; 0x5c
   2d520:	strbhi	r2, [r8, r3]
   2d524:	add	r3, r4, #2
   2d528:	cmp	sl, r3
   2d52c:	movhi	r2, #39	; 0x27
   2d530:	strbhi	r2, [r8, r3]
   2d534:	mov	r3, #0
   2d538:	cmp	r7, #0
   2d53c:	add	r4, r4, #3
   2d540:	str	r3, [sp, #44]	; 0x2c
   2d544:	str	r6, [sp, #68]	; 0x44
   2d548:	mov	r5, #39	; 0x27
   2d54c:	bne	2d2e8 <__assert_fail@plt+0x1b300>
   2d550:	ldr	r2, [sp, #44]	; 0x2c
   2d554:	eor	r3, r3, #1
   2d558:	and	r3, r3, r2
   2d55c:	add	r9, r9, #1
   2d560:	uxtb	r3, r3
   2d564:	cmp	r3, #0
   2d568:	beq	2d358 <__assert_fail@plt+0x1b370>
   2d56c:	cmp	sl, r4
   2d570:	movhi	r3, #39	; 0x27
   2d574:	strbhi	r3, [r8, r4]
   2d578:	add	r3, r4, #1
   2d57c:	cmp	sl, r3
   2d580:	movhi	r2, #39	; 0x27
   2d584:	strbhi	r2, [r8, r3]
   2d588:	mov	r3, #0
   2d58c:	add	r4, r4, #2
   2d590:	str	r3, [sp, #44]	; 0x2c
   2d594:	b	2d358 <__assert_fail@plt+0x1b370>
   2d598:	mov	r3, #118	; 0x76
   2d59c:	b	2d478 <__assert_fail@plt+0x1b490>
   2d5a0:	mov	r3, #116	; 0x74
   2d5a4:	ldr	r2, [sp, #36]	; 0x24
   2d5a8:	cmp	fp, #2
   2d5ac:	movne	r2, #0
   2d5b0:	andeq	r2, r2, #1
   2d5b4:	cmp	r2, #0
   2d5b8:	beq	2d478 <__assert_fail@plt+0x1b490>
   2d5bc:	mov	fp, r8
   2d5c0:	mov	r8, #2
   2d5c4:	ldr	r3, [sp, #40]	; 0x28
   2d5c8:	cmp	r3, #0
   2d5cc:	movne	r8, #4
   2d5d0:	ldr	r3, [sp, #164]	; 0xa4
   2d5d4:	mov	ip, #0
   2d5d8:	bic	r3, r3, #2
   2d5dc:	str	r3, [sp, #4]
   2d5e0:	ldr	r3, [sp, #76]	; 0x4c
   2d5e4:	str	r8, [sp]
   2d5e8:	str	r3, [sp, #16]
   2d5ec:	ldr	r3, [sp, #80]	; 0x50
   2d5f0:	ldr	r2, [sp, #28]
   2d5f4:	str	r3, [sp, #12]
   2d5f8:	mov	r1, sl
   2d5fc:	ldr	r3, [sp, #24]
   2d600:	mov	r0, fp
   2d604:	str	ip, [sp, #8]
   2d608:	bl	2cd20 <__assert_fail@plt+0x1ad38>
   2d60c:	mov	r4, r0
   2d610:	ldr	r3, [pc, #1800]	; 2dd20 <__assert_fail@plt+0x1bd38>
   2d614:	ldr	r2, [sp, #116]	; 0x74
   2d618:	mov	r0, r4
   2d61c:	ldr	r3, [r3]
   2d620:	cmp	r2, r3
   2d624:	bne	2e4cc <__assert_fail@plt+0x1c4e4>
   2d628:	add	sp, sp, #124	; 0x7c
   2d62c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d630:	mov	r5, #102	; 0x66
   2d634:	ldr	r2, [sp, #36]	; 0x24
   2d638:	sub	r3, fp, #2
   2d63c:	cmp	r2, #0
   2d640:	clz	r3, r3
   2d644:	lsr	r3, r3, #5
   2d648:	bne	2e0a0 <__assert_fail@plt+0x1c0b8>
   2d64c:	mov	r6, r2
   2d650:	b	2d344 <__assert_fail@plt+0x1b35c>
   2d654:	mov	r5, #110	; 0x6e
   2d658:	mov	r6, #0
   2d65c:	b	2d2e8 <__assert_fail@plt+0x1b300>
   2d660:	mov	r5, #98	; 0x62
   2d664:	b	2d634 <__assert_fail@plt+0x1b64c>
   2d668:	mov	r5, #97	; 0x61
   2d66c:	b	2d634 <__assert_fail@plt+0x1b64c>
   2d670:	mov	r7, #0
   2d674:	mov	r6, #0
   2d678:	b	2d494 <__assert_fail@plt+0x1b4ac>
   2d67c:	mov	r5, #114	; 0x72
   2d680:	b	2d658 <__assert_fail@plt+0x1b670>
   2d684:	ldr	r3, [sp, #36]	; 0x24
   2d688:	cmp	r3, #0
   2d68c:	bne	2e408 <__assert_fail@plt+0x1c420>
   2d690:	mov	r7, r3
   2d694:	ldr	r3, [sp, #44]	; 0x2c
   2d698:	sub	r2, fp, #2
   2d69c:	eor	r3, r3, #1
   2d6a0:	clz	r2, r2
   2d6a4:	lsr	r2, r2, #5
   2d6a8:	ands	r3, r2, r3
   2d6ac:	beq	2e0bc <__assert_fail@plt+0x1c0d4>
   2d6b0:	cmp	sl, r4
   2d6b4:	movhi	r1, #39	; 0x27
   2d6b8:	strbhi	r1, [r8, r4]
   2d6bc:	add	r1, r4, #1
   2d6c0:	cmp	sl, r1
   2d6c4:	movhi	r0, #36	; 0x24
   2d6c8:	strbhi	r0, [r8, r1]
   2d6cc:	add	r1, r4, #2
   2d6d0:	cmp	sl, r1
   2d6d4:	movhi	r0, #39	; 0x27
   2d6d8:	strbhi	r0, [r8, r1]
   2d6dc:	add	r1, r4, #3
   2d6e0:	cmp	sl, r1
   2d6e4:	bls	2e114 <__assert_fail@plt+0x1c12c>
   2d6e8:	mov	r4, r1
   2d6ec:	mov	r1, #92	; 0x5c
   2d6f0:	strb	r1, [r8, r4]
   2d6f4:	mov	r1, r4
   2d6f8:	str	r3, [sp, #44]	; 0x2c
   2d6fc:	cmp	fp, #2
   2d700:	add	r4, r4, #1
   2d704:	beq	2e15c <__assert_fail@plt+0x1c174>
   2d708:	ldr	r0, [sp, #24]
   2d70c:	add	r3, r9, #1
   2d710:	cmp	r3, r0
   2d714:	bcs	2d72c <__assert_fail@plt+0x1b744>
   2d718:	ldr	r0, [sp, #28]
   2d71c:	ldrb	r3, [r0, r3]
   2d720:	sub	r3, r3, #48	; 0x30
   2d724:	cmp	r3, #9
   2d728:	bls	2e174 <__assert_fail@plt+0x1c18c>
   2d72c:	mov	r5, #48	; 0x30
   2d730:	ldr	r3, [sp, #40]	; 0x28
   2d734:	eor	r3, r3, #1
   2d738:	orrs	r2, r2, r3
   2d73c:	mov	r3, r6
   2d740:	moveq	r6, r2
   2d744:	beq	2d2b8 <__assert_fail@plt+0x1b2d0>
   2d748:	mov	r6, #0
   2d74c:	b	2d2e0 <__assert_fail@plt+0x1b2f8>
   2d750:	cmp	r9, #0
   2d754:	mov	r2, r7
   2d758:	bne	2dcf0 <__assert_fail@plt+0x1bd08>
   2d75c:	mov	r6, r7
   2d760:	mov	r3, r9
   2d764:	mov	r7, r2
   2d768:	b	2d2a8 <__assert_fail@plt+0x1b2c0>
   2d76c:	mov	r2, r7
   2d770:	mov	r6, r7
   2d774:	mov	r3, #0
   2d778:	mov	r7, r2
   2d77c:	mov	r5, #32
   2d780:	b	2d2a8 <__assert_fail@plt+0x1b2c0>
   2d784:	mov	r6, r7
   2d788:	b	2d494 <__assert_fail@plt+0x1b4ac>
   2d78c:	mov	r7, #0
   2d790:	ldr	r3, [sp, #64]	; 0x40
   2d794:	cmp	r3, #1
   2d798:	bne	2ddb8 <__assert_fail@plt+0x1bdd0>
   2d79c:	bl	11d48 <__ctype_b_loc@plt>
   2d7a0:	ldr	r2, [sp, #64]	; 0x40
   2d7a4:	sxth	r3, r5
   2d7a8:	mov	ip, r2
   2d7ac:	lsl	r3, r3, #1
   2d7b0:	ldr	r2, [r0]
   2d7b4:	ldrh	r3, [r2, r3]
   2d7b8:	and	r3, r3, #16384	; 0x4000
   2d7bc:	cmp	r3, #0
   2d7c0:	ldr	r3, [sp, #40]	; 0x28
   2d7c4:	movne	r6, #1
   2d7c8:	moveq	r6, #0
   2d7cc:	movne	r2, #0
   2d7d0:	andeq	r2, r3, #1
   2d7d4:	cmp	r2, #0
   2d7d8:	bne	2e0fc <__assert_fail@plt+0x1c114>
   2d7dc:	sub	r3, fp, #2
   2d7e0:	clz	r3, r3
   2d7e4:	lsr	r3, r3, #5
   2d7e8:	b	2d2a8 <__assert_fail@plt+0x1b2c0>
   2d7ec:	cmp	r4, #0
   2d7f0:	bne	2e47c <__assert_fail@plt+0x1c494>
   2d7f4:	str	r4, [sp, #40]	; 0x28
   2d7f8:	cmp	sl, #0
   2d7fc:	bne	2e4b0 <__assert_fail@plt+0x1c4c8>
   2d800:	ldr	r3, [pc, #1316]	; 2dd2c <__assert_fail@plt+0x1bd44>
   2d804:	mov	r4, #1
   2d808:	str	r4, [sp, #32]
   2d80c:	str	r3, [sp, #60]	; 0x3c
   2d810:	str	r4, [sp, #52]	; 0x34
   2d814:	str	sl, [sp, #72]	; 0x48
   2d818:	str	sl, [sp, #68]	; 0x44
   2d81c:	str	sl, [sp, #44]	; 0x2c
   2d820:	str	sl, [sp, #36]	; 0x24
   2d824:	mov	r8, #2
   2d828:	b	2ce18 <__assert_fail@plt+0x1ae30>
   2d82c:	ldr	r3, [sp, #28]
   2d830:	ldrb	r5, [r3, r9]
   2d834:	cmp	r5, #126	; 0x7e
   2d838:	ldrls	pc, [pc, r5, lsl #2]
   2d83c:	b	2d790 <__assert_fail@plt+0x1b7a8>
   2d840:	andeq	sp, r2, r4, ror #20
   2d844:	muleq	r2, r0, r7
   2d848:	muleq	r2, r0, r7
   2d84c:	muleq	r2, r0, r7
   2d850:	muleq	r2, r0, r7
   2d854:	muleq	r2, r0, r7
   2d858:	muleq	r2, r0, r7
   2d85c:	andeq	sp, r2, ip, asr sl
   2d860:	andeq	sp, r2, r4, asr sl
   2d864:	andeq	sp, r2, r0, lsr #11
   2d868:	andeq	sp, r2, ip, asr #20
   2d86c:	muleq	r2, r8, r5
   2d870:	andeq	sp, r2, r4, asr #20
   2d874:	andeq	sp, r2, ip, lsr sl
   2d878:	muleq	r2, r0, r7
   2d87c:	muleq	r2, r0, r7
   2d880:	muleq	r2, r0, r7
   2d884:	muleq	r2, r0, r7
   2d888:	muleq	r2, r0, r7
   2d88c:	muleq	r2, r0, r7
   2d890:	muleq	r2, r0, r7
   2d894:	muleq	r2, r0, r7
   2d898:	muleq	r2, r0, r7
   2d89c:	muleq	r2, r0, r7
   2d8a0:	muleq	r2, r0, r7
   2d8a4:	muleq	r2, r0, r7
   2d8a8:	muleq	r2, r0, r7
   2d8ac:	muleq	r2, r0, r7
   2d8b0:	muleq	r2, r0, r7
   2d8b4:	muleq	r2, r0, r7
   2d8b8:	muleq	r2, r0, r7
   2d8bc:	muleq	r2, r0, r7
   2d8c0:			; <UNDEFINED> instruction: 0x0002dab8
   2d8c4:	muleq	r2, r8, sl
   2d8c8:	muleq	r2, r8, sl
   2d8cc:	andeq	sp, r2, r8, lsl #21
   2d8d0:	muleq	r2, r8, sl
   2d8d4:	ldrdeq	sp, [r2], -ip
   2d8d8:	muleq	r2, r8, sl
   2d8dc:	andeq	sp, r2, ip, asr #9
   2d8e0:	muleq	r2, r8, sl
   2d8e4:	muleq	r2, r8, sl
   2d8e8:	muleq	r2, r8, sl
   2d8ec:	ldrdeq	sp, [r2], -ip
   2d8f0:	ldrdeq	sp, [r2], -ip
   2d8f4:	ldrdeq	sp, [r2], -ip
   2d8f8:	ldrdeq	sp, [r2], -ip
   2d8fc:	ldrdeq	sp, [r2], -ip
   2d900:	ldrdeq	sp, [r2], -ip
   2d904:	ldrdeq	sp, [r2], -ip
   2d908:	ldrdeq	sp, [r2], -ip
   2d90c:	ldrdeq	sp, [r2], -ip
   2d910:	ldrdeq	sp, [r2], -ip
   2d914:	ldrdeq	sp, [r2], -ip
   2d918:	ldrdeq	sp, [r2], -ip
   2d91c:	ldrdeq	sp, [r2], -ip
   2d920:	ldrdeq	sp, [r2], -ip
   2d924:	ldrdeq	sp, [r2], -ip
   2d928:	ldrdeq	sp, [r2], -ip
   2d92c:	muleq	r2, r8, sl
   2d930:	muleq	r2, r8, sl
   2d934:	muleq	r2, r8, sl
   2d938:	muleq	r2, r8, sl
   2d93c:	andeq	sp, r2, r0, lsr #9
   2d940:	muleq	r2, r0, r7
   2d944:	ldrdeq	sp, [r2], -ip
   2d948:	ldrdeq	sp, [r2], -ip
   2d94c:	ldrdeq	sp, [r2], -ip
   2d950:	ldrdeq	sp, [r2], -ip
   2d954:	ldrdeq	sp, [r2], -ip
   2d958:	ldrdeq	sp, [r2], -ip
   2d95c:	ldrdeq	sp, [r2], -ip
   2d960:	ldrdeq	sp, [r2], -ip
   2d964:	ldrdeq	sp, [r2], -ip
   2d968:	ldrdeq	sp, [r2], -ip
   2d96c:	ldrdeq	sp, [r2], -ip
   2d970:	ldrdeq	sp, [r2], -ip
   2d974:	ldrdeq	sp, [r2], -ip
   2d978:	ldrdeq	sp, [r2], -ip
   2d97c:	ldrdeq	sp, [r2], -ip
   2d980:	ldrdeq	sp, [r2], -ip
   2d984:	ldrdeq	sp, [r2], -ip
   2d988:	ldrdeq	sp, [r2], -ip
   2d98c:	ldrdeq	sp, [r2], -ip
   2d990:	ldrdeq	sp, [r2], -ip
   2d994:	ldrdeq	sp, [r2], -ip
   2d998:	ldrdeq	sp, [r2], -ip
   2d99c:	ldrdeq	sp, [r2], -ip
   2d9a0:	ldrdeq	sp, [r2], -ip
   2d9a4:	ldrdeq	sp, [r2], -ip
   2d9a8:	ldrdeq	sp, [r2], -ip
   2d9ac:	muleq	r2, r8, sl
   2d9b0:	andeq	sp, r2, r8, asr #8
   2d9b4:	ldrdeq	sp, [r2], -ip
   2d9b8:	muleq	r2, r8, sl
   2d9bc:	ldrdeq	sp, [r2], -ip
   2d9c0:	muleq	r2, r8, sl
   2d9c4:	ldrdeq	sp, [r2], -ip
   2d9c8:	ldrdeq	sp, [r2], -ip
   2d9cc:	ldrdeq	sp, [r2], -ip
   2d9d0:	ldrdeq	sp, [r2], -ip
   2d9d4:	ldrdeq	sp, [r2], -ip
   2d9d8:	ldrdeq	sp, [r2], -ip
   2d9dc:	ldrdeq	sp, [r2], -ip
   2d9e0:	ldrdeq	sp, [r2], -ip
   2d9e4:	ldrdeq	sp, [r2], -ip
   2d9e8:	ldrdeq	sp, [r2], -ip
   2d9ec:	ldrdeq	sp, [r2], -ip
   2d9f0:	ldrdeq	sp, [r2], -ip
   2d9f4:	ldrdeq	sp, [r2], -ip
   2d9f8:	ldrdeq	sp, [r2], -ip
   2d9fc:	ldrdeq	sp, [r2], -ip
   2da00:	ldrdeq	sp, [r2], -ip
   2da04:	ldrdeq	sp, [r2], -ip
   2da08:	ldrdeq	sp, [r2], -ip
   2da0c:	ldrdeq	sp, [r2], -ip
   2da10:	ldrdeq	sp, [r2], -ip
   2da14:	ldrdeq	sp, [r2], -ip
   2da18:	ldrdeq	sp, [r2], -ip
   2da1c:	ldrdeq	sp, [r2], -ip
   2da20:	ldrdeq	sp, [r2], -ip
   2da24:	ldrdeq	sp, [r2], -ip
   2da28:	ldrdeq	sp, [r2], -ip
   2da2c:	andeq	sp, r2, r0, ror r2
   2da30:	muleq	r2, r8, sl
   2da34:	andeq	sp, r2, r0, ror r2
   2da38:	andeq	sp, r2, r8, lsl #21
   2da3c:	mov	r3, #114	; 0x72
   2da40:	b	2d5a4 <__assert_fail@plt+0x1b5bc>
   2da44:	mov	r3, #102	; 0x66
   2da48:	b	2d478 <__assert_fail@plt+0x1b490>
   2da4c:	mov	r3, #110	; 0x6e
   2da50:	b	2d5a4 <__assert_fail@plt+0x1b5bc>
   2da54:	mov	r3, #98	; 0x62
   2da58:	b	2d478 <__assert_fail@plt+0x1b490>
   2da5c:	mov	r3, #97	; 0x61
   2da60:	b	2d478 <__assert_fail@plt+0x1b490>
   2da64:	ldr	r3, [sp, #40]	; 0x28
   2da68:	cmp	r3, #0
   2da6c:	bne	2d684 <__assert_fail@plt+0x1b69c>
   2da70:	ldr	r3, [sp, #164]	; 0xa4
   2da74:	tst	r3, #1
   2da78:	addne	r9, r9, #1
   2da7c:	bne	2ce28 <__assert_fail@plt+0x1ae40>
   2da80:	ldr	r7, [sp, #40]	; 0x28
   2da84:	b	2d484 <__assert_fail@plt+0x1b49c>
   2da88:	sub	r3, fp, #2
   2da8c:	clz	r3, r3
   2da90:	lsr	r3, r3, #5
   2da94:	b	2d29c <__assert_fail@plt+0x1b2b4>
   2da98:	sub	r3, fp, #2
   2da9c:	mov	r6, #0
   2daa0:	clz	r3, r3
   2daa4:	lsr	r3, r3, #5
   2daa8:	ldr	r2, [sp, #36]	; 0x24
   2daac:	tst	r2, r3
   2dab0:	beq	2d2a8 <__assert_fail@plt+0x1b2c0>
   2dab4:	b	2d5bc <__assert_fail@plt+0x1b5d4>
   2dab8:	sub	r3, fp, #2
   2dabc:	clz	r3, r3
   2dac0:	lsr	r3, r3, #5
   2dac4:	b	2daa8 <__assert_fail@plt+0x1bac0>
   2dac8:	ldr	r3, [sp, #48]	; 0x30
   2dacc:	ldrb	r5, [r3]
   2dad0:	cmp	r5, #126	; 0x7e
   2dad4:	ldrls	pc, [pc, r5, lsl #2]
   2dad8:	b	2d78c <__assert_fail@plt+0x1b7a4>
   2dadc:	andeq	sp, r2, r4, lsl #13
   2dae0:	andeq	sp, r2, ip, lsl #15
   2dae4:	andeq	sp, r2, ip, lsl #15
   2dae8:	andeq	sp, r2, ip, lsl #15
   2daec:	andeq	sp, r2, ip, lsl #15
   2daf0:	andeq	sp, r2, ip, lsl #15
   2daf4:	andeq	sp, r2, ip, lsl #15
   2daf8:	andeq	sp, r2, r8, ror #12
   2dafc:	andeq	sp, r2, r0, ror #12
   2db00:	andeq	sp, r2, r4, lsl sp
   2db04:	andeq	sp, r2, r4, asr r6
   2db08:	andeq	sp, r2, r8, lsl #26
   2db0c:	andeq	sp, r2, r0, lsr r6
   2db10:	andeq	sp, r2, ip, ror r6
   2db14:	andeq	sp, r2, ip, lsl #15
   2db18:	andeq	sp, r2, ip, lsl #15
   2db1c:	andeq	sp, r2, ip, lsl #15
   2db20:	andeq	sp, r2, ip, lsl #15
   2db24:	andeq	sp, r2, ip, lsl #15
   2db28:	andeq	sp, r2, ip, lsl #15
   2db2c:	andeq	sp, r2, ip, lsl #15
   2db30:	andeq	sp, r2, ip, lsl #15
   2db34:	andeq	sp, r2, ip, lsl #15
   2db38:	andeq	sp, r2, ip, lsl #15
   2db3c:	andeq	sp, r2, ip, lsl #15
   2db40:	andeq	sp, r2, ip, lsl #15
   2db44:	andeq	sp, r2, ip, lsl #15
   2db48:	andeq	sp, r2, ip, lsl #15
   2db4c:	andeq	sp, r2, ip, lsl #15
   2db50:	andeq	sp, r2, ip, lsl #15
   2db54:	andeq	sp, r2, ip, lsl #15
   2db58:	andeq	sp, r2, ip, lsl #15
   2db5c:	andeq	sp, r2, r0, lsl #26
   2db60:	andeq	sp, r2, r0, ror r6
   2db64:	andeq	sp, r2, r0, ror r6
   2db68:	andeq	sp, r2, r4, ror #25
   2db6c:	andeq	sp, r2, r0, ror r6
   2db70:	ldrdeq	sp, [r2], -r8
   2db74:	andeq	sp, r2, r0, ror r6
   2db78:	andeq	sp, r2, r8, asr #9
   2db7c:	andeq	sp, r2, r0, ror r6
   2db80:	andeq	sp, r2, r0, ror r6
   2db84:	andeq	sp, r2, r0, ror r6
   2db88:	ldrdeq	sp, [r2], -r8
   2db8c:	ldrdeq	sp, [r2], -r8
   2db90:	ldrdeq	sp, [r2], -r8
   2db94:	ldrdeq	sp, [r2], -r8
   2db98:	ldrdeq	sp, [r2], -r8
   2db9c:	ldrdeq	sp, [r2], -r8
   2dba0:	ldrdeq	sp, [r2], -r8
   2dba4:	ldrdeq	sp, [r2], -r8
   2dba8:	ldrdeq	sp, [r2], -r8
   2dbac:	ldrdeq	sp, [r2], -r8
   2dbb0:	ldrdeq	sp, [r2], -r8
   2dbb4:	ldrdeq	sp, [r2], -r8
   2dbb8:	ldrdeq	sp, [r2], -r8
   2dbbc:	ldrdeq	sp, [r2], -r8
   2dbc0:	ldrdeq	sp, [r2], -r8
   2dbc4:	ldrdeq	sp, [r2], -r8
   2dbc8:	andeq	sp, r2, r0, ror r6
   2dbcc:	andeq	sp, r2, r0, ror r6
   2dbd0:	andeq	sp, r2, r0, ror r6
   2dbd4:	andeq	sp, r2, r0, ror r6
   2dbd8:	muleq	r2, ip, r4
   2dbdc:	andeq	sp, r2, ip, lsl #15
   2dbe0:	ldrdeq	sp, [r2], -r8
   2dbe4:	ldrdeq	sp, [r2], -r8
   2dbe8:	ldrdeq	sp, [r2], -r8
   2dbec:	ldrdeq	sp, [r2], -r8
   2dbf0:	ldrdeq	sp, [r2], -r8
   2dbf4:	ldrdeq	sp, [r2], -r8
   2dbf8:	ldrdeq	sp, [r2], -r8
   2dbfc:	ldrdeq	sp, [r2], -r8
   2dc00:	ldrdeq	sp, [r2], -r8
   2dc04:	ldrdeq	sp, [r2], -r8
   2dc08:	ldrdeq	sp, [r2], -r8
   2dc0c:	ldrdeq	sp, [r2], -r8
   2dc10:	ldrdeq	sp, [r2], -r8
   2dc14:	ldrdeq	sp, [r2], -r8
   2dc18:	ldrdeq	sp, [r2], -r8
   2dc1c:	ldrdeq	sp, [r2], -r8
   2dc20:	ldrdeq	sp, [r2], -r8
   2dc24:	ldrdeq	sp, [r2], -r8
   2dc28:	ldrdeq	sp, [r2], -r8
   2dc2c:	ldrdeq	sp, [r2], -r8
   2dc30:	ldrdeq	sp, [r2], -r8
   2dc34:	ldrdeq	sp, [r2], -r8
   2dc38:	ldrdeq	sp, [r2], -r8
   2dc3c:	ldrdeq	sp, [r2], -r8
   2dc40:	ldrdeq	sp, [r2], -r8
   2dc44:	ldrdeq	sp, [r2], -r8
   2dc48:	andeq	sp, r2, r0, ror r6
   2dc4c:	andeq	sp, r2, r4, asr #8
   2dc50:	ldrdeq	sp, [r2], -r8
   2dc54:	andeq	sp, r2, r0, ror r6
   2dc58:	ldrdeq	sp, [r2], -r8
   2dc5c:	andeq	sp, r2, r0, ror r6
   2dc60:	ldrdeq	sp, [r2], -r8
   2dc64:	ldrdeq	sp, [r2], -r8
   2dc68:	ldrdeq	sp, [r2], -r8
   2dc6c:	ldrdeq	sp, [r2], -r8
   2dc70:	ldrdeq	sp, [r2], -r8
   2dc74:	ldrdeq	sp, [r2], -r8
   2dc78:	ldrdeq	sp, [r2], -r8
   2dc7c:	ldrdeq	sp, [r2], -r8
   2dc80:	ldrdeq	sp, [r2], -r8
   2dc84:	ldrdeq	sp, [r2], -r8
   2dc88:	ldrdeq	sp, [r2], -r8
   2dc8c:	ldrdeq	sp, [r2], -r8
   2dc90:	ldrdeq	sp, [r2], -r8
   2dc94:	ldrdeq	sp, [r2], -r8
   2dc98:	ldrdeq	sp, [r2], -r8
   2dc9c:	ldrdeq	sp, [r2], -r8
   2dca0:	ldrdeq	sp, [r2], -r8
   2dca4:	ldrdeq	sp, [r2], -r8
   2dca8:	ldrdeq	sp, [r2], -r8
   2dcac:	ldrdeq	sp, [r2], -r8
   2dcb0:	ldrdeq	sp, [r2], -r8
   2dcb4:	ldrdeq	sp, [r2], -r8
   2dcb8:	ldrdeq	sp, [r2], -r8
   2dcbc:	ldrdeq	sp, [r2], -r8
   2dcc0:	ldrdeq	sp, [r2], -r8
   2dcc4:	ldrdeq	sp, [r2], -r8
   2dcc8:	andeq	sp, r2, ip, ror #4
   2dccc:	andeq	sp, r2, r0, ror r6
   2dcd0:	andeq	sp, r2, ip, ror #4
   2dcd4:	andeq	sp, r2, r4, ror #25
   2dcd8:	mov	r6, r7
   2dcdc:	mov	r7, #0
   2dce0:	b	2d494 <__assert_fail@plt+0x1b4ac>
   2dce4:	cmp	r9, #0
   2dce8:	mov	r2, #0
   2dcec:	beq	2d75c <__assert_fail@plt+0x1b774>
   2dcf0:	mov	r6, #0
   2dcf4:	mov	r7, r2
   2dcf8:	mov	r3, r6
   2dcfc:	b	2d2b8 <__assert_fail@plt+0x1b2d0>
   2dd00:	mov	r2, #0
   2dd04:	b	2d770 <__assert_fail@plt+0x1b788>
   2dd08:	mov	r7, #0
   2dd0c:	mov	r3, #118	; 0x76
   2dd10:	b	2d478 <__assert_fail@plt+0x1b490>
   2dd14:	mov	r7, #0
   2dd18:	mov	r3, #116	; 0x74
   2dd1c:	b	2d5a4 <__assert_fail@plt+0x1b5bc>
   2dd20:	andeq	r7, r4, r8, lsl #30
   2dd24:	andeq	r6, r3, r0, asr lr
   2dd28:			; <UNDEFINED> instruction: 0x000348b4
   2dd2c:	andeq	r5, r3, r8, asr #32
   2dd30:	ldr	r3, [sp, #36]	; 0x24
   2dd34:	b	2d2e0 <__assert_fail@plt+0x1b2f8>
   2dd38:	ldr	r3, [sp, #36]	; 0x24
   2dd3c:	cmp	r3, #0
   2dd40:	bne	2e19c <__assert_fail@plt+0x1c1b4>
   2dd44:	add	r9, r9, #1
   2dd48:	ldr	r3, [sp, #44]	; 0x2c
   2dd4c:	mov	r6, #0
   2dd50:	mov	r5, #92	; 0x5c
   2dd54:	b	2d564 <__assert_fail@plt+0x1b57c>
   2dd58:	ldr	r3, [sp, #28]
   2dd5c:	ldrb	r2, [r3, #1]
   2dd60:	adds	r2, r2, #0
   2dd64:	movne	r2, #1
   2dd68:	b	2d288 <__assert_fail@plt+0x1b2a0>
   2dd6c:	ldr	r3, [sp, #164]	; 0xa4
   2dd70:	ands	r3, r3, #4
   2dd74:	beq	2d4bc <__assert_fail@plt+0x1b4d4>
   2dd78:	ldr	r2, [sp, #24]
   2dd7c:	add	r3, r9, #2
   2dd80:	cmp	r3, r2
   2dd84:	bcs	2dd98 <__assert_fail@plt+0x1bdb0>
   2dd88:	ldr	r2, [sp, #48]	; 0x30
   2dd8c:	ldrb	r5, [r2, #1]
   2dd90:	cmp	r5, #63	; 0x3f
   2dd94:	beq	2e1fc <__assert_fail@plt+0x1c214>
   2dd98:	mov	r3, #0
   2dd9c:	b	2d4bc <__assert_fail@plt+0x1b4d4>
   2dda0:	ldr	r3, [sp, #36]	; 0x24
   2dda4:	cmp	r3, #0
   2dda8:	bne	2e19c <__assert_fail@plt+0x1c1b4>
   2ddac:	mov	r6, r3
   2ddb0:	mov	r5, #63	; 0x3f
   2ddb4:	b	2d2e0 <__assert_fail@plt+0x1b2f8>
   2ddb8:	ldr	r3, [sp, #24]
   2ddbc:	cmn	r3, #1
   2ddc0:	mov	r3, #0
   2ddc4:	str	r3, [sp, #108]	; 0x6c
   2ddc8:	str	r3, [sp, #112]	; 0x70
   2ddcc:	bne	2dddc <__assert_fail@plt+0x1bdf4>
   2ddd0:	ldr	r0, [sp, #28]
   2ddd4:	bl	11d78 <strlen@plt>
   2ddd8:	str	r0, [sp, #24]
   2dddc:	mov	r3, #0
   2dde0:	str	sl, [sp, #88]	; 0x58
   2dde4:	ldr	sl, [sp, #28]
   2dde8:	str	r5, [sp, #92]	; 0x5c
   2ddec:	mov	r5, r3
   2ddf0:	str	r7, [sp, #96]	; 0x60
   2ddf4:	str	r4, [sp, #100]	; 0x64
   2ddf8:	str	r8, [sp, #84]	; 0x54
   2ddfc:	ldr	r3, [sp, #24]
   2de00:	add	r4, r9, r5
   2de04:	add	r7, sl, r4
   2de08:	sub	r2, r3, r4
   2de0c:	mov	r1, r7
   2de10:	add	r3, sp, #108	; 0x6c
   2de14:	add	r0, sp, #104	; 0x68
   2de18:	bl	2f694 <renameat2@@Base+0x980>
   2de1c:	subs	r8, r0, #0
   2de20:	beq	2de70 <__assert_fail@plt+0x1be88>
   2de24:	cmn	r8, #1
   2de28:	beq	2e1d8 <__assert_fail@plt+0x1c1f0>
   2de2c:	cmn	r8, #2
   2de30:	beq	2e2f8 <__assert_fail@plt+0x1c310>
   2de34:	ldr	r3, [sp, #36]	; 0x24
   2de38:	cmp	fp, #2
   2de3c:	movne	r3, #0
   2de40:	andeq	r3, r3, #1
   2de44:	cmp	r3, #0
   2de48:	bne	2dfd0 <__assert_fail@plt+0x1bfe8>
   2de4c:	ldr	r0, [sp, #104]	; 0x68
   2de50:	bl	11bd4 <iswprint@plt>
   2de54:	add	r5, r5, r8
   2de58:	cmp	r0, #0
   2de5c:	add	r0, sp, #108	; 0x6c
   2de60:	moveq	r6, #0
   2de64:	bl	11b14 <mbsinit@plt>
   2de68:	cmp	r0, #0
   2de6c:	beq	2ddfc <__assert_fail@plt+0x1be14>
   2de70:	ldr	r3, [sp, #40]	; 0x28
   2de74:	mov	ip, r5
   2de78:	eor	r2, r6, #1
   2de7c:	ldr	r5, [sp, #92]	; 0x5c
   2de80:	ldr	r7, [sp, #96]	; 0x60
   2de84:	ldr	r4, [sp, #100]	; 0x64
   2de88:	ldr	r8, [sp, #84]	; 0x54
   2de8c:	ldr	sl, [sp, #88]	; 0x58
   2de90:	and	r2, r2, r3
   2de94:	cmp	ip, #1
   2de98:	bls	2d7d4 <__assert_fail@plt+0x1b7ec>
   2de9c:	add	r1, ip, r9
   2dea0:	ldr	lr, [sp, #48]	; 0x30
   2dea4:	mov	r0, #0
   2dea8:	str	r6, [sp, #48]	; 0x30
   2deac:	mov	ip, #39	; 0x27
   2deb0:	ldr	r6, [sp, #44]	; 0x2c
   2deb4:	b	2df6c <__assert_fail@plt+0x1bf84>
   2deb8:	ldr	r0, [sp, #36]	; 0x24
   2debc:	sub	r3, fp, #2
   2dec0:	cmp	r0, #0
   2dec4:	clz	r3, r3
   2dec8:	lsr	r3, r3, #5
   2decc:	bne	2e0dc <__assert_fail@plt+0x1c0f4>
   2ded0:	eor	r0, r6, #1
   2ded4:	ands	r3, r3, r0
   2ded8:	beq	2df08 <__assert_fail@plt+0x1bf20>
   2dedc:	add	r0, r4, #1
   2dee0:	cmp	sl, r4
   2dee4:	strbhi	ip, [r8, r4]
   2dee8:	cmp	sl, r0
   2deec:	movhi	r6, #36	; 0x24
   2def0:	strbhi	r6, [r8, r0]
   2def4:	add	r0, r4, #2
   2def8:	mov	r6, r3
   2defc:	add	r4, r4, #3
   2df00:	cmp	sl, r0
   2df04:	strbhi	ip, [r8, r0]
   2df08:	cmp	sl, r4
   2df0c:	movhi	r3, #92	; 0x5c
   2df10:	strbhi	r3, [r8, r4]
   2df14:	add	r3, r4, #1
   2df18:	cmp	sl, r3
   2df1c:	lsrhi	r0, r5, #6
   2df20:	addhi	r0, r0, #48	; 0x30
   2df24:	strbhi	r0, [r8, r3]
   2df28:	add	r0, r4, #2
   2df2c:	cmp	sl, r0
   2df30:	lsrhi	r3, r5, #3
   2df34:	andhi	r3, r3, #7
   2df38:	addhi	r3, r3, #48	; 0x30
   2df3c:	add	r9, r9, #1
   2df40:	strbhi	r3, [r8, r0]
   2df44:	and	r5, r5, #7
   2df48:	cmp	r9, r1
   2df4c:	add	r5, r5, #48	; 0x30
   2df50:	add	r4, r4, #3
   2df54:	bcs	2e108 <__assert_fail@plt+0x1c120>
   2df58:	mov	r0, r2
   2df5c:	cmp	sl, r4
   2df60:	strbhi	r5, [r8, r4]
   2df64:	ldrb	r5, [lr, #1]!
   2df68:	add	r4, r4, #1
   2df6c:	cmp	r2, #0
   2df70:	bne	2deb8 <__assert_fail@plt+0x1bed0>
   2df74:	eor	r3, r0, #1
   2df78:	and	r3, r3, r6
   2df7c:	cmp	r7, #0
   2df80:	uxtb	r3, r3
   2df84:	beq	2df98 <__assert_fail@plt+0x1bfb0>
   2df88:	cmp	sl, r4
   2df8c:	movhi	r7, #92	; 0x5c
   2df90:	strbhi	r7, [r8, r4]
   2df94:	add	r4, r4, #1
   2df98:	add	r9, r9, #1
   2df9c:	cmp	r9, r1
   2dfa0:	bcs	2e0f0 <__assert_fail@plt+0x1c108>
   2dfa4:	cmp	r3, #0
   2dfa8:	beq	2e128 <__assert_fail@plt+0x1c140>
   2dfac:	cmp	sl, r4
   2dfb0:	add	r3, r4, #1
   2dfb4:	strbhi	ip, [r8, r4]
   2dfb8:	mov	r7, #0
   2dfbc:	cmp	sl, r3
   2dfc0:	strbhi	ip, [r8, r3]
   2dfc4:	add	r4, r4, #2
   2dfc8:	mov	r6, r7
   2dfcc:	b	2df5c <__assert_fail@plt+0x1bf74>
   2dfd0:	cmp	r8, #1
   2dfd4:	beq	2de4c <__assert_fail@plt+0x1be64>
   2dfd8:	add	r1, r4, #1
   2dfdc:	add	r3, sl, r8
   2dfe0:	add	r1, sl, r1
   2dfe4:	add	r4, r3, r4
   2dfe8:	ldrb	r3, [r1], #1
   2dfec:	sub	r3, r3, #91	; 0x5b
   2dff0:	cmp	r3, #33	; 0x21
   2dff4:	ldrls	pc, [pc, r3, lsl #2]
   2dff8:	b	2e084 <__assert_fail@plt+0x1c09c>
   2dffc:	muleq	r2, r0, r0
   2e000:	muleq	r2, r0, r0
   2e004:	andeq	lr, r2, r4, lsl #1
   2e008:	muleq	r2, r0, r0
   2e00c:	andeq	lr, r2, r4, lsl #1
   2e010:	muleq	r2, r0, r0
   2e014:	andeq	lr, r2, r4, lsl #1
   2e018:	andeq	lr, r2, r4, lsl #1
   2e01c:	andeq	lr, r2, r4, lsl #1
   2e020:	andeq	lr, r2, r4, lsl #1
   2e024:	andeq	lr, r2, r4, lsl #1
   2e028:	andeq	lr, r2, r4, lsl #1
   2e02c:	andeq	lr, r2, r4, lsl #1
   2e030:	andeq	lr, r2, r4, lsl #1
   2e034:	andeq	lr, r2, r4, lsl #1
   2e038:	andeq	lr, r2, r4, lsl #1
   2e03c:	andeq	lr, r2, r4, lsl #1
   2e040:	andeq	lr, r2, r4, lsl #1
   2e044:	andeq	lr, r2, r4, lsl #1
   2e048:	andeq	lr, r2, r4, lsl #1
   2e04c:	andeq	lr, r2, r4, lsl #1
   2e050:	andeq	lr, r2, r4, lsl #1
   2e054:	andeq	lr, r2, r4, lsl #1
   2e058:	andeq	lr, r2, r4, lsl #1
   2e05c:	andeq	lr, r2, r4, lsl #1
   2e060:	andeq	lr, r2, r4, lsl #1
   2e064:	andeq	lr, r2, r4, lsl #1
   2e068:	andeq	lr, r2, r4, lsl #1
   2e06c:	andeq	lr, r2, r4, lsl #1
   2e070:	andeq	lr, r2, r4, lsl #1
   2e074:	andeq	lr, r2, r4, lsl #1
   2e078:	andeq	lr, r2, r4, lsl #1
   2e07c:	andeq	lr, r2, r4, lsl #1
   2e080:	muleq	r2, r0, r0
   2e084:	cmp	r4, r1
   2e088:	bne	2dfe8 <__assert_fail@plt+0x1c000>
   2e08c:	b	2de4c <__assert_fail@plt+0x1be64>
   2e090:	ldr	fp, [sp, #84]	; 0x54
   2e094:	ldr	sl, [sp, #88]	; 0x58
   2e098:	mov	r8, #2
   2e09c:	b	2d5c4 <__assert_fail@plt+0x1b5dc>
   2e0a0:	ldr	r2, [sp, #40]	; 0x28
   2e0a4:	str	fp, [sp, #160]	; 0xa0
   2e0a8:	and	r2, r2, r3
   2e0ac:	mov	fp, r8
   2e0b0:	str	r2, [sp, #40]	; 0x28
   2e0b4:	ldr	r8, [sp, #160]	; 0xa0
   2e0b8:	b	2d5c4 <__assert_fail@plt+0x1b5dc>
   2e0bc:	cmp	sl, r4
   2e0c0:	movls	r1, r4
   2e0c4:	bls	2d6fc <__assert_fail@plt+0x1b714>
   2e0c8:	ldr	r3, [sp, #44]	; 0x2c
   2e0cc:	b	2d6ec <__assert_fail@plt+0x1b704>
   2e0d0:	str	sl, [sp, #72]	; 0x48
   2e0d4:	ldr	sl, [sp, #36]	; 0x24
   2e0d8:	b	2d534 <__assert_fail@plt+0x1b54c>
   2e0dc:	str	fp, [sp, #160]	; 0xa0
   2e0e0:	str	r3, [sp, #40]	; 0x28
   2e0e4:	mov	fp, r8
   2e0e8:	ldr	r8, [sp, #160]	; 0xa0
   2e0ec:	b	2d5c4 <__assert_fail@plt+0x1b5dc>
   2e0f0:	str	r6, [sp, #44]	; 0x2c
   2e0f4:	ldr	r6, [sp, #48]	; 0x30
   2e0f8:	b	2d564 <__assert_fail@plt+0x1b57c>
   2e0fc:	ldr	r2, [sp, #40]	; 0x28
   2e100:	mov	r6, #0
   2e104:	b	2de9c <__assert_fail@plt+0x1beb4>
   2e108:	str	r6, [sp, #44]	; 0x2c
   2e10c:	ldr	r6, [sp, #48]	; 0x30
   2e110:	b	2d358 <__assert_fail@plt+0x1b370>
   2e114:	add	r4, r4, #4
   2e118:	str	r3, [sp, #44]	; 0x2c
   2e11c:	mov	r6, #0
   2e120:	mov	r5, #48	; 0x30
   2e124:	b	2d2e0 <__assert_fail@plt+0x1b2f8>
   2e128:	mov	r7, r3
   2e12c:	b	2df5c <__assert_fail@plt+0x1bf74>
   2e130:	ldr	r3, [pc, #-1040]	; 2dd28 <__assert_fail@plt+0x1bd40>
   2e134:	mov	r4, #1
   2e138:	str	r4, [sp, #32]
   2e13c:	str	r4, [sp, #40]	; 0x28
   2e140:	str	r4, [sp, #52]	; 0x34
   2e144:	str	sl, [sp, #72]	; 0x48
   2e148:	str	sl, [sp, #68]	; 0x44
   2e14c:	str	sl, [sp, #44]	; 0x2c
   2e150:	str	sl, [sp, #36]	; 0x24
   2e154:	str	r3, [sp, #60]	; 0x3c
   2e158:	b	2ce18 <__assert_fail@plt+0x1ae30>
   2e15c:	mov	r3, r6
   2e160:	mov	r5, #48	; 0x30
   2e164:	mov	r6, #0
   2e168:	b	2d2e0 <__assert_fail@plt+0x1b2f8>
   2e16c:	mov	r5, r3
   2e170:	b	2d658 <__assert_fail@plt+0x1b670>
   2e174:	cmp	sl, r4
   2e178:	movhi	r3, #48	; 0x30
   2e17c:	strbhi	r3, [r8, r4]
   2e180:	add	r3, r1, #2
   2e184:	cmp	sl, r3
   2e188:	movhi	r0, #48	; 0x30
   2e18c:	strbhi	r0, [r8, r3]
   2e190:	add	r4, r1, #3
   2e194:	mov	r5, #48	; 0x30
   2e198:	b	2d730 <__assert_fail@plt+0x1b748>
   2e19c:	str	fp, [sp, #160]	; 0xa0
   2e1a0:	mov	fp, r8
   2e1a4:	ldr	r8, [sp, #160]	; 0xa0
   2e1a8:	b	2d5c4 <__assert_fail@plt+0x1b5dc>
   2e1ac:	ldr	r2, [sp, #80]	; 0x50
   2e1b0:	ldrb	r3, [r2]
   2e1b4:	cmp	r3, #0
   2e1b8:	beq	2cde8 <__assert_fail@plt+0x1ae00>
   2e1bc:	cmp	sl, r4
   2e1c0:	strbhi	r3, [fp, r4]
   2e1c4:	ldrb	r3, [r2, #1]!
   2e1c8:	add	r4, r4, #1
   2e1cc:	cmp	r3, #0
   2e1d0:	bne	2e1bc <__assert_fail@plt+0x1c1d4>
   2e1d4:	b	2cde8 <__assert_fail@plt+0x1ae00>
   2e1d8:	mov	ip, r5
   2e1dc:	ldr	r7, [sp, #96]	; 0x60
   2e1e0:	ldr	r5, [sp, #92]	; 0x5c
   2e1e4:	ldr	r4, [sp, #100]	; 0x64
   2e1e8:	ldr	r8, [sp, #84]	; 0x54
   2e1ec:	ldr	sl, [sp, #88]	; 0x58
   2e1f0:	ldr	r2, [sp, #40]	; 0x28
   2e1f4:	mov	r6, #0
   2e1f8:	b	2de94 <__assert_fail@plt+0x1beac>
   2e1fc:	ldr	r2, [sp, #28]
   2e200:	ldrb	r1, [r2, r3]
   2e204:	sub	r2, r1, #33	; 0x21
   2e208:	cmp	r2, #29
   2e20c:	ldrls	pc, [pc, r2, lsl #2]
   2e210:	b	2e2ec <__assert_fail@plt+0x1c304>
   2e214:	andeq	lr, r2, ip, lsl #5
   2e218:	andeq	lr, r2, ip, ror #5
   2e21c:	andeq	lr, r2, ip, ror #5
   2e220:	andeq	lr, r2, ip, ror #5
   2e224:	andeq	lr, r2, ip, ror #5
   2e228:	andeq	lr, r2, ip, ror #5
   2e22c:	andeq	lr, r2, ip, lsl #5
   2e230:	andeq	lr, r2, ip, lsl #5
   2e234:	andeq	lr, r2, ip, lsl #5
   2e238:	andeq	lr, r2, ip, ror #5
   2e23c:	andeq	lr, r2, ip, ror #5
   2e240:	andeq	lr, r2, ip, ror #5
   2e244:	andeq	lr, r2, ip, lsl #5
   2e248:	andeq	lr, r2, ip, ror #5
   2e24c:	andeq	lr, r2, ip, lsl #5
   2e250:	andeq	lr, r2, ip, ror #5
   2e254:	andeq	lr, r2, ip, ror #5
   2e258:	andeq	lr, r2, ip, ror #5
   2e25c:	andeq	lr, r2, ip, ror #5
   2e260:	andeq	lr, r2, ip, ror #5
   2e264:	andeq	lr, r2, ip, ror #5
   2e268:	andeq	lr, r2, ip, ror #5
   2e26c:	andeq	lr, r2, ip, ror #5
   2e270:	andeq	lr, r2, ip, ror #5
   2e274:	andeq	lr, r2, ip, ror #5
   2e278:	andeq	lr, r2, ip, ror #5
   2e27c:	andeq	lr, r2, ip, ror #5
   2e280:	andeq	lr, r2, ip, lsl #5
   2e284:	andeq	lr, r2, ip, lsl #5
   2e288:	andeq	lr, r2, ip, lsl #5
   2e28c:	ldr	r2, [sp, #36]	; 0x24
   2e290:	cmp	r2, #0
   2e294:	bne	2e398 <__assert_fail@plt+0x1c3b0>
   2e298:	cmp	sl, r4
   2e29c:	movhi	r2, #63	; 0x3f
   2e2a0:	strbhi	r2, [r8, r4]
   2e2a4:	add	r2, r4, #1
   2e2a8:	cmp	sl, r2
   2e2ac:	movhi	r0, #34	; 0x22
   2e2b0:	strbhi	r0, [r8, r2]
   2e2b4:	add	r2, r4, #2
   2e2b8:	cmp	sl, r2
   2e2bc:	movhi	r0, #34	; 0x22
   2e2c0:	strbhi	r0, [r8, r2]
   2e2c4:	add	r2, r4, #3
   2e2c8:	cmp	sl, r2
   2e2cc:	movhi	r0, #63	; 0x3f
   2e2d0:	strbhi	r0, [r8, r2]
   2e2d4:	mov	r2, #0
   2e2d8:	add	r4, r4, #4
   2e2dc:	mov	r5, r1
   2e2e0:	mov	r9, r3
   2e2e4:	mov	r6, r2
   2e2e8:	b	2d730 <__assert_fail@plt+0x1b748>
   2e2ec:	mov	r3, #0
   2e2f0:	mov	r6, r3
   2e2f4:	b	2d2a8 <__assert_fail@plt+0x1b2c0>
   2e2f8:	ldr	r0, [sp, #24]
   2e2fc:	mov	r1, r4
   2e300:	cmp	r1, r0
   2e304:	mov	r2, r7
   2e308:	mov	r3, r5
   2e30c:	mov	ip, r5
   2e310:	ldr	r7, [sp, #96]	; 0x60
   2e314:	ldr	r5, [sp, #92]	; 0x5c
   2e318:	ldr	r4, [sp, #100]	; 0x64
   2e31c:	ldr	r8, [sp, #84]	; 0x54
   2e320:	ldr	sl, [sp, #88]	; 0x58
   2e324:	bcs	2e358 <__assert_fail@plt+0x1c370>
   2e328:	ldrb	r6, [r2]
   2e32c:	cmp	r6, #0
   2e330:	bne	2e344 <__assert_fail@plt+0x1c35c>
   2e334:	b	2e474 <__assert_fail@plt+0x1c48c>
   2e338:	ldrb	r6, [r2, #1]!
   2e33c:	cmp	r6, #0
   2e340:	beq	2e3fc <__assert_fail@plt+0x1c414>
   2e344:	add	r3, r3, #1
   2e348:	add	r1, r9, r3
   2e34c:	cmp	r1, r0
   2e350:	bcc	2e338 <__assert_fail@plt+0x1c350>
   2e354:	mov	ip, r3
   2e358:	ldr	r2, [sp, #40]	; 0x28
   2e35c:	mov	r6, #0
   2e360:	b	2de94 <__assert_fail@plt+0x1beac>
   2e364:	mov	r3, #1
   2e368:	str	r3, [sp, #32]
   2e36c:	str	r3, [sp, #36]	; 0x24
   2e370:	str	r3, [sp, #40]	; 0x28
   2e374:	str	r3, [sp, #52]	; 0x34
   2e378:	ldr	r3, [pc, #-1624]	; 2dd28 <__assert_fail@plt+0x1bd40>
   2e37c:	mov	r2, #0
   2e380:	str	r2, [sp, #68]	; 0x44
   2e384:	str	r2, [sp, #44]	; 0x2c
   2e388:	str	r2, [sp, #72]	; 0x48
   2e38c:	mov	r4, r2
   2e390:	str	r3, [sp, #60]	; 0x3c
   2e394:	b	2ce18 <__assert_fail@plt+0x1ae30>
   2e398:	str	fp, [sp, #160]	; 0xa0
   2e39c:	mov	fp, r8
   2e3a0:	ldr	r8, [sp, #160]	; 0xa0
   2e3a4:	b	2d5d0 <__assert_fail@plt+0x1b5e8>
   2e3a8:	mov	r2, r3
   2e3ac:	ldr	r3, [sp, #60]	; 0x3c
   2e3b0:	cmp	r3, #0
   2e3b4:	moveq	r2, #0
   2e3b8:	andne	r2, r2, #1
   2e3bc:	cmp	r2, #0
   2e3c0:	beq	2e3ec <__assert_fail@plt+0x1c404>
   2e3c4:	mov	r2, r3
   2e3c8:	ldrb	r3, [r3]
   2e3cc:	cmp	r3, #0
   2e3d0:	beq	2e3ec <__assert_fail@plt+0x1c404>
   2e3d4:	cmp	sl, r4
   2e3d8:	strbhi	r3, [fp, r4]
   2e3dc:	ldrb	r3, [r2, #1]!
   2e3e0:	add	r4, r4, #1
   2e3e4:	cmp	r3, #0
   2e3e8:	bne	2e3d4 <__assert_fail@plt+0x1c3ec>
   2e3ec:	cmp	sl, r4
   2e3f0:	movhi	r3, #0
   2e3f4:	strbhi	r3, [fp, r4]
   2e3f8:	b	2d610 <__assert_fail@plt+0x1b628>
   2e3fc:	mov	ip, r3
   2e400:	ldr	r2, [sp, #40]	; 0x28
   2e404:	b	2de94 <__assert_fail@plt+0x1beac>
   2e408:	str	fp, [sp, #160]	; 0xa0
   2e40c:	mov	fp, r8
   2e410:	ldr	r8, [sp, #160]	; 0xa0
   2e414:	sub	r3, r8, #2
   2e418:	clz	r3, r3
   2e41c:	lsr	r3, r3, #5
   2e420:	str	r3, [sp, #40]	; 0x28
   2e424:	b	2d5c4 <__assert_fail@plt+0x1b5dc>
   2e428:	ldr	r3, [sp, #76]	; 0x4c
   2e42c:	mov	ip, #5
   2e430:	str	r3, [sp, #16]
   2e434:	ldr	r3, [sp, #80]	; 0x50
   2e438:	ldr	r2, [sp, #28]
   2e43c:	str	r3, [sp, #12]
   2e440:	ldr	r3, [sp, #56]	; 0x38
   2e444:	ldr	r1, [sp, #72]	; 0x48
   2e448:	str	r3, [sp, #8]
   2e44c:	ldr	r3, [sp, #164]	; 0xa4
   2e450:	mov	r0, fp
   2e454:	str	r3, [sp, #4]
   2e458:	str	ip, [sp]
   2e45c:	ldr	r3, [sp, #24]
   2e460:	bl	2cd20 <__assert_fail@plt+0x1ad38>
   2e464:	mov	r4, r0
   2e468:	b	2d610 <__assert_fail@plt+0x1b628>
   2e46c:	mov	r8, #2
   2e470:	b	2d5c4 <__assert_fail@plt+0x1b5dc>
   2e474:	ldr	r2, [sp, #40]	; 0x28
   2e478:	b	2de94 <__assert_fail@plt+0x1beac>
   2e47c:	mov	r3, #0
   2e480:	str	r3, [sp, #68]	; 0x44
   2e484:	str	r3, [sp, #44]	; 0x2c
   2e488:	str	r3, [sp, #72]	; 0x48
   2e48c:	str	r3, [sp, #40]	; 0x28
   2e490:	mov	r4, r3
   2e494:	ldr	r3, [pc, #-1904]	; 2dd2c <__assert_fail@plt+0x1bd44>
   2e498:	mov	r2, #1
   2e49c:	str	r2, [sp, #32]
   2e4a0:	str	r2, [sp, #36]	; 0x24
   2e4a4:	str	r2, [sp, #52]	; 0x34
   2e4a8:	str	r3, [sp, #60]	; 0x3c
   2e4ac:	b	2ce18 <__assert_fail@plt+0x1ae30>
   2e4b0:	mov	r3, #0
   2e4b4:	mov	r1, #1
   2e4b8:	mov	r2, r3
   2e4bc:	str	r3, [sp, #44]	; 0x2c
   2e4c0:	str	sl, [sp, #72]	; 0x48
   2e4c4:	str	r1, [sp, #32]
   2e4c8:	b	2d410 <__assert_fail@plt+0x1b428>
   2e4cc:	bl	11b50 <__stack_chk_fail@plt>
   2e4d0:	bl	11fa0 <abort@plt>
   2e4d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e4d8:	sub	sp, sp, #44	; 0x2c
   2e4dc:	mov	r6, r0
   2e4e0:	mov	r4, r3
   2e4e4:	mov	sl, r1
   2e4e8:	mov	fp, r2
   2e4ec:	bl	11dc0 <__errno_location@plt>
   2e4f0:	ldr	r7, [pc, #364]	; 2e664 <__assert_fail@plt+0x1c67c>
   2e4f4:	cmp	r6, #0
   2e4f8:	ldr	r5, [r7]
   2e4fc:	ldr	r3, [r0]
   2e500:	str	r3, [sp, #24]
   2e504:	blt	2e660 <__assert_fail@plt+0x1c678>
   2e508:	ldr	r3, [r7, #4]
   2e50c:	mov	r8, r0
   2e510:	cmp	r3, r6
   2e514:	bgt	2e560 <__assert_fail@plt+0x1c578>
   2e518:	cmn	r6, #-268435454	; 0xf0000002
   2e51c:	bgt	2e65c <__assert_fail@plt+0x1c674>
   2e520:	add	r9, r6, #1
   2e524:	add	r3, r7, #8
   2e528:	cmp	r5, r3
   2e52c:	lsl	r1, r9, #3
   2e530:	beq	2e63c <__assert_fail@plt+0x1c654>
   2e534:	mov	r0, r5
   2e538:	bl	2f348 <renameat2@@Base+0x634>
   2e53c:	mov	r5, r0
   2e540:	str	r0, [r7]
   2e544:	ldr	r0, [r7, #4]
   2e548:	mov	r1, #0
   2e54c:	sub	r2, r9, r0
   2e550:	add	r0, r5, r0, lsl #3
   2e554:	lsl	r2, r2, #3
   2e558:	bl	11df0 <memset@plt>
   2e55c:	str	r9, [r7, #4]
   2e560:	add	r3, r5, r6, lsl #3
   2e564:	ldr	r1, [r4, #4]
   2e568:	ldr	r7, [r3, #4]
   2e56c:	ldr	r9, [r5, r6, lsl #3]
   2e570:	ldr	r2, [r4, #40]	; 0x28
   2e574:	ldr	ip, [r4, #44]	; 0x2c
   2e578:	str	r3, [sp, #28]
   2e57c:	ldr	r3, [r4]
   2e580:	orr	r1, r1, #1
   2e584:	add	lr, r4, #8
   2e588:	str	r1, [sp, #36]	; 0x24
   2e58c:	str	r1, [sp, #4]
   2e590:	str	r2, [sp, #12]
   2e594:	str	r3, [sp]
   2e598:	mov	r0, r7
   2e59c:	mov	r1, r9
   2e5a0:	str	ip, [sp, #16]
   2e5a4:	str	lr, [sp, #8]
   2e5a8:	mov	r3, fp
   2e5ac:	mov	r2, sl
   2e5b0:	str	lr, [sp, #32]
   2e5b4:	bl	2cd20 <__assert_fail@plt+0x1ad38>
   2e5b8:	cmp	r9, r0
   2e5bc:	bhi	2e628 <__assert_fail@plt+0x1c640>
   2e5c0:	ldr	r3, [pc, #160]	; 2e668 <__assert_fail@plt+0x1c680>
   2e5c4:	add	r9, r0, #1
   2e5c8:	cmp	r7, r3
   2e5cc:	str	r9, [r5, r6, lsl #3]
   2e5d0:	beq	2e5dc <__assert_fail@plt+0x1c5f4>
   2e5d4:	mov	r0, r7
   2e5d8:	bl	11ab4 <free@plt>
   2e5dc:	mov	r0, r9
   2e5e0:	bl	2f2ec <renameat2@@Base+0x5d8>
   2e5e4:	ldr	lr, [sp, #28]
   2e5e8:	ldr	ip, [r4, #44]	; 0x2c
   2e5ec:	ldr	r5, [r4, #40]	; 0x28
   2e5f0:	mov	r3, fp
   2e5f4:	mov	r2, sl
   2e5f8:	mov	r1, r9
   2e5fc:	str	r0, [lr, #4]
   2e600:	ldr	lr, [r4]
   2e604:	ldr	r4, [sp, #32]
   2e608:	str	ip, [sp, #16]
   2e60c:	str	r4, [sp, #8]
   2e610:	ldr	r4, [sp, #36]	; 0x24
   2e614:	str	r5, [sp, #12]
   2e618:	str	r4, [sp, #4]
   2e61c:	str	lr, [sp]
   2e620:	mov	r7, r0
   2e624:	bl	2cd20 <__assert_fail@plt+0x1ad38>
   2e628:	ldr	r3, [sp, #24]
   2e62c:	mov	r0, r7
   2e630:	str	r3, [r8]
   2e634:	add	sp, sp, #44	; 0x2c
   2e638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e63c:	mov	r0, #0
   2e640:	bl	2f348 <renameat2@@Base+0x634>
   2e644:	ldr	r3, [pc, #32]	; 2e66c <__assert_fail@plt+0x1c684>
   2e648:	mov	r5, r0
   2e64c:	ldm	r3, {r0, r1}
   2e650:	str	r5, [r7]
   2e654:	stm	r5, {r0, r1}
   2e658:	b	2e544 <__assert_fail@plt+0x1c55c>
   2e65c:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   2e660:	bl	11fa0 <abort@plt>
   2e664:	andeq	r8, r4, r4, lsr #5
   2e668:	andeq	sl, r4, ip, ror #10
   2e66c:	andeq	r8, r4, ip, lsr #5
   2e670:	push	{r4, r5, r6, lr}
   2e674:	mov	r5, r0
   2e678:	bl	11dc0 <__errno_location@plt>
   2e67c:	cmp	r5, #0
   2e680:	mov	r1, #48	; 0x30
   2e684:	mov	r4, r0
   2e688:	ldr	r0, [pc, #16]	; 2e6a0 <__assert_fail@plt+0x1c6b8>
   2e68c:	ldr	r6, [r4]
   2e690:	movne	r0, r5
   2e694:	bl	2f4f4 <renameat2@@Base+0x7e0>
   2e698:	str	r6, [r4]
   2e69c:	pop	{r4, r5, r6, pc}
   2e6a0:	andeq	sl, r4, ip, ror #12
   2e6a4:	ldr	r3, [pc, #12]	; 2e6b8 <__assert_fail@plt+0x1c6d0>
   2e6a8:	cmp	r0, #0
   2e6ac:	moveq	r0, r3
   2e6b0:	ldr	r0, [r0]
   2e6b4:	bx	lr
   2e6b8:	andeq	sl, r4, ip, ror #12
   2e6bc:	ldr	r3, [pc, #12]	; 2e6d0 <__assert_fail@plt+0x1c6e8>
   2e6c0:	cmp	r0, #0
   2e6c4:	moveq	r0, r3
   2e6c8:	str	r1, [r0]
   2e6cc:	bx	lr
   2e6d0:	andeq	sl, r4, ip, ror #12
   2e6d4:	ldr	r3, [pc, #52]	; 2e710 <__assert_fail@plt+0x1c728>
   2e6d8:	cmp	r0, #0
   2e6dc:	moveq	r0, r3
   2e6e0:	add	r3, r0, #8
   2e6e4:	push	{lr}		; (str lr, [sp, #-4]!)
   2e6e8:	lsr	lr, r1, #5
   2e6ec:	and	r1, r1, #31
   2e6f0:	ldr	ip, [r3, lr, lsl #2]
   2e6f4:	lsr	r0, ip, r1
   2e6f8:	eor	r2, r2, r0
   2e6fc:	and	r2, r2, #1
   2e700:	and	r0, r0, #1
   2e704:	eor	r1, ip, r2, lsl r1
   2e708:	str	r1, [r3, lr, lsl #2]
   2e70c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e710:	andeq	sl, r4, ip, ror #12
   2e714:	ldr	r3, [pc, #16]	; 2e72c <__assert_fail@plt+0x1c744>
   2e718:	cmp	r0, #0
   2e71c:	movne	r3, r0
   2e720:	ldr	r0, [r3, #4]
   2e724:	str	r1, [r3, #4]
   2e728:	bx	lr
   2e72c:	andeq	sl, r4, ip, ror #12
   2e730:	ldr	r3, [pc, #44]	; 2e764 <__assert_fail@plt+0x1c77c>
   2e734:	cmp	r0, #0
   2e738:	moveq	r0, r3
   2e73c:	mov	ip, #10
   2e740:	cmp	r2, #0
   2e744:	cmpne	r1, #0
   2e748:	str	ip, [r0]
   2e74c:	beq	2e75c <__assert_fail@plt+0x1c774>
   2e750:	str	r1, [r0, #40]	; 0x28
   2e754:	str	r2, [r0, #44]	; 0x2c
   2e758:	bx	lr
   2e75c:	push	{r4, lr}
   2e760:	bl	11fa0 <abort@plt>
   2e764:	andeq	sl, r4, ip, ror #12
   2e768:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e76c:	sub	sp, sp, #24
   2e770:	ldr	ip, [pc, #108]	; 2e7e4 <__assert_fail@plt+0x1c7fc>
   2e774:	ldr	r4, [sp, #56]	; 0x38
   2e778:	mov	r9, r2
   2e77c:	cmp	r4, #0
   2e780:	moveq	r4, ip
   2e784:	mov	sl, r3
   2e788:	mov	r7, r0
   2e78c:	mov	r8, r1
   2e790:	bl	11dc0 <__errno_location@plt>
   2e794:	ldr	r3, [r4, #44]	; 0x2c
   2e798:	mov	r1, r8
   2e79c:	ldr	r6, [r0]
   2e7a0:	str	r3, [sp, #16]
   2e7a4:	ldr	r2, [r4, #40]	; 0x28
   2e7a8:	add	r3, r4, #8
   2e7ac:	str	r3, [sp, #8]
   2e7b0:	str	r2, [sp, #12]
   2e7b4:	ldr	r2, [r4, #4]
   2e7b8:	mov	r5, r0
   2e7bc:	str	r2, [sp, #4]
   2e7c0:	ldr	ip, [r4]
   2e7c4:	mov	r3, sl
   2e7c8:	mov	r2, r9
   2e7cc:	mov	r0, r7
   2e7d0:	str	ip, [sp]
   2e7d4:	bl	2cd20 <__assert_fail@plt+0x1ad38>
   2e7d8:	str	r6, [r5]
   2e7dc:	add	sp, sp, #24
   2e7e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e7e4:	andeq	sl, r4, ip, ror #12
   2e7e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e7ec:	cmp	r3, #0
   2e7f0:	sub	sp, sp, #44	; 0x2c
   2e7f4:	ldr	r4, [pc, #192]	; 2e8bc <__assert_fail@plt+0x1c8d4>
   2e7f8:	mov	r6, r2
   2e7fc:	movne	r4, r3
   2e800:	mov	r9, r1
   2e804:	mov	r8, r0
   2e808:	bl	11dc0 <__errno_location@plt>
   2e80c:	ldr	r3, [r4, #44]	; 0x2c
   2e810:	ldr	r5, [r4, #4]
   2e814:	add	sl, r4, #8
   2e818:	cmp	r6, #0
   2e81c:	orreq	r5, r5, #1
   2e820:	mov	r1, #0
   2e824:	ldr	r2, [r0]
   2e828:	str	r3, [sp, #16]
   2e82c:	ldr	r3, [r4, #40]	; 0x28
   2e830:	stmib	sp, {r5, sl}
   2e834:	str	r3, [sp, #12]
   2e838:	ldr	r3, [r4]
   2e83c:	mov	r7, r0
   2e840:	str	r2, [sp, #28]
   2e844:	str	r3, [sp]
   2e848:	mov	r2, r8
   2e84c:	mov	r3, r9
   2e850:	mov	r0, r1
   2e854:	bl	2cd20 <__assert_fail@plt+0x1ad38>
   2e858:	add	r1, r0, #1
   2e85c:	mov	fp, r0
   2e860:	mov	r0, r1
   2e864:	str	r1, [sp, #36]	; 0x24
   2e868:	bl	2f2ec <renameat2@@Base+0x5d8>
   2e86c:	ldr	r3, [r4, #44]	; 0x2c
   2e870:	mov	r2, r8
   2e874:	str	r3, [sp, #16]
   2e878:	ldr	r3, [r4, #40]	; 0x28
   2e87c:	str	r5, [sp, #4]
   2e880:	str	r3, [sp, #12]
   2e884:	str	sl, [sp, #8]
   2e888:	ldr	ip, [r4]
   2e88c:	ldr	r1, [sp, #36]	; 0x24
   2e890:	mov	r3, r9
   2e894:	str	ip, [sp]
   2e898:	str	r0, [sp, #32]
   2e89c:	bl	2cd20 <__assert_fail@plt+0x1ad38>
   2e8a0:	ldr	r2, [sp, #28]
   2e8a4:	cmp	r6, #0
   2e8a8:	str	r2, [r7]
   2e8ac:	ldr	r0, [sp, #32]
   2e8b0:	strne	fp, [r6]
   2e8b4:	add	sp, sp, #44	; 0x2c
   2e8b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e8bc:	andeq	sl, r4, ip, ror #12
   2e8c0:	mov	r3, r2
   2e8c4:	mov	r2, #0
   2e8c8:	b	2e7e8 <__assert_fail@plt+0x1c800>
   2e8cc:	push	{r4, r5, r6, r7, r8, lr}
   2e8d0:	ldr	r6, [pc, #112]	; 2e948 <__assert_fail@plt+0x1c960>
   2e8d4:	ldr	r3, [r6, #4]
   2e8d8:	ldr	r7, [r6]
   2e8dc:	cmp	r3, #1
   2e8e0:	ble	2e904 <__assert_fail@plt+0x1c91c>
   2e8e4:	sub	r5, r7, #8
   2e8e8:	add	r5, r5, r3, lsl #3
   2e8ec:	mov	r4, r7
   2e8f0:	ldr	r0, [r4, #12]
   2e8f4:	add	r4, r4, #8
   2e8f8:	bl	11ab4 <free@plt>
   2e8fc:	cmp	r4, r5
   2e900:	bne	2e8f0 <__assert_fail@plt+0x1c908>
   2e904:	ldr	r0, [r7, #4]
   2e908:	ldr	r4, [pc, #60]	; 2e94c <__assert_fail@plt+0x1c964>
   2e90c:	cmp	r0, r4
   2e910:	beq	2e924 <__assert_fail@plt+0x1c93c>
   2e914:	bl	11ab4 <free@plt>
   2e918:	mov	r3, #256	; 0x100
   2e91c:	str	r4, [r6, #12]
   2e920:	str	r3, [r6, #8]
   2e924:	ldr	r4, [pc, #36]	; 2e950 <__assert_fail@plt+0x1c968>
   2e928:	cmp	r7, r4
   2e92c:	beq	2e93c <__assert_fail@plt+0x1c954>
   2e930:	mov	r0, r7
   2e934:	bl	11ab4 <free@plt>
   2e938:	str	r4, [r6]
   2e93c:	mov	r3, #1
   2e940:	str	r3, [r6, #4]
   2e944:	pop	{r4, r5, r6, r7, r8, pc}
   2e948:	andeq	r8, r4, r4, lsr #5
   2e94c:	andeq	sl, r4, ip, ror #10
   2e950:	andeq	r8, r4, ip, lsr #5
   2e954:	ldr	r3, [pc, #4]	; 2e960 <__assert_fail@plt+0x1c978>
   2e958:	mvn	r2, #0
   2e95c:	b	2e4d4 <__assert_fail@plt+0x1c4ec>
   2e960:	andeq	sl, r4, ip, ror #12
   2e964:	ldr	r3, [pc]	; 2e96c <__assert_fail@plt+0x1c984>
   2e968:	b	2e4d4 <__assert_fail@plt+0x1c4ec>
   2e96c:	andeq	sl, r4, ip, ror #12
   2e970:	mov	r1, r0
   2e974:	ldr	r3, [pc, #8]	; 2e984 <__assert_fail@plt+0x1c99c>
   2e978:	mvn	r2, #0
   2e97c:	mov	r0, #0
   2e980:	b	2e4d4 <__assert_fail@plt+0x1c4ec>
   2e984:	andeq	sl, r4, ip, ror #12
   2e988:	mov	r2, r1
   2e98c:	ldr	r3, [pc, #8]	; 2e99c <__assert_fail@plt+0x1c9b4>
   2e990:	mov	r1, r0
   2e994:	mov	r0, #0
   2e998:	b	2e4d4 <__assert_fail@plt+0x1c4ec>
   2e99c:	andeq	sl, r4, ip, ror #12
   2e9a0:	push	{r4, r5, r6, lr}
   2e9a4:	sub	sp, sp, #56	; 0x38
   2e9a8:	ldr	r4, [pc, #68]	; 2e9f4 <__assert_fail@plt+0x1ca0c>
   2e9ac:	mov	r6, r2
   2e9b0:	mov	r5, r0
   2e9b4:	ldr	r3, [r4]
   2e9b8:	add	r0, sp, #4
   2e9bc:	str	r3, [sp, #52]	; 0x34
   2e9c0:	bl	2cbd8 <__assert_fail@plt+0x1abf0>
   2e9c4:	add	r3, sp, #4
   2e9c8:	mvn	r2, #0
   2e9cc:	mov	r1, r6
   2e9d0:	mov	r0, r5
   2e9d4:	bl	2e4d4 <__assert_fail@plt+0x1c4ec>
   2e9d8:	ldr	r2, [sp, #52]	; 0x34
   2e9dc:	ldr	r3, [r4]
   2e9e0:	cmp	r2, r3
   2e9e4:	bne	2e9f0 <__assert_fail@plt+0x1ca08>
   2e9e8:	add	sp, sp, #56	; 0x38
   2e9ec:	pop	{r4, r5, r6, pc}
   2e9f0:	bl	11b50 <__stack_chk_fail@plt>
   2e9f4:	andeq	r7, r4, r8, lsl #30
   2e9f8:	push	{r4, r5, r6, r7, lr}
   2e9fc:	sub	sp, sp, #60	; 0x3c
   2ea00:	ldr	r4, [pc, #72]	; 2ea50 <__assert_fail@plt+0x1ca68>
   2ea04:	mov	r6, r2
   2ea08:	mov	r7, r3
   2ea0c:	ldr	ip, [r4]
   2ea10:	mov	r5, r0
   2ea14:	add	r0, sp, #4
   2ea18:	str	ip, [sp, #52]	; 0x34
   2ea1c:	bl	2cbd8 <__assert_fail@plt+0x1abf0>
   2ea20:	add	r3, sp, #4
   2ea24:	mov	r2, r7
   2ea28:	mov	r1, r6
   2ea2c:	mov	r0, r5
   2ea30:	bl	2e4d4 <__assert_fail@plt+0x1c4ec>
   2ea34:	ldr	r2, [sp, #52]	; 0x34
   2ea38:	ldr	r3, [r4]
   2ea3c:	cmp	r2, r3
   2ea40:	bne	2ea4c <__assert_fail@plt+0x1ca64>
   2ea44:	add	sp, sp, #60	; 0x3c
   2ea48:	pop	{r4, r5, r6, r7, pc}
   2ea4c:	bl	11b50 <__stack_chk_fail@plt>
   2ea50:	andeq	r7, r4, r8, lsl #30
   2ea54:	mov	r2, r1
   2ea58:	mov	r1, r0
   2ea5c:	mov	r0, #0
   2ea60:	b	2e9a0 <__assert_fail@plt+0x1c9b8>
   2ea64:	mov	r3, r2
   2ea68:	mov	r2, r1
   2ea6c:	mov	r1, r0
   2ea70:	mov	r0, #0
   2ea74:	b	2e9f8 <__assert_fail@plt+0x1ca10>
   2ea78:	push	{r4, r5, r6, r7, r8, r9, lr}
   2ea7c:	mov	r4, r2
   2ea80:	ldr	lr, [pc, #128]	; 2eb08 <__assert_fail@plt+0x1cb20>
   2ea84:	mov	r8, r0
   2ea88:	mov	r9, r1
   2ea8c:	ldm	lr!, {r0, r1, r2, r3}
   2ea90:	sub	sp, sp, #60	; 0x3c
   2ea94:	add	ip, sp, #4
   2ea98:	lsr	r6, r4, #5
   2ea9c:	stmia	ip!, {r0, r1, r2, r3}
   2eaa0:	add	r7, sp, #12
   2eaa4:	ldm	lr!, {r0, r1, r2, r3}
   2eaa8:	and	r4, r4, #31
   2eaac:	ldr	r5, [pc, #88]	; 2eb0c <__assert_fail@plt+0x1cb24>
   2eab0:	stmia	ip!, {r0, r1, r2, r3}
   2eab4:	ldm	lr, {r0, r1, r2, r3}
   2eab8:	stm	ip, {r0, r1, r2, r3}
   2eabc:	mov	r2, r9
   2eac0:	ldr	r3, [r7, r6, lsl #2]
   2eac4:	ldr	ip, [r5]
   2eac8:	mov	r1, r8
   2eacc:	mvn	r0, r3, lsr r4
   2ead0:	and	r0, r0, #1
   2ead4:	str	ip, [sp, #52]	; 0x34
   2ead8:	eor	r4, r3, r0, lsl r4
   2eadc:	add	r3, sp, #4
   2eae0:	mov	r0, #0
   2eae4:	str	r4, [r7, r6, lsl #2]
   2eae8:	bl	2e4d4 <__assert_fail@plt+0x1c4ec>
   2eaec:	ldr	r2, [sp, #52]	; 0x34
   2eaf0:	ldr	r3, [r5]
   2eaf4:	cmp	r2, r3
   2eaf8:	bne	2eb04 <__assert_fail@plt+0x1cb1c>
   2eafc:	add	sp, sp, #60	; 0x3c
   2eb00:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2eb04:	bl	11b50 <__stack_chk_fail@plt>
   2eb08:	andeq	sl, r4, ip, ror #12
   2eb0c:	andeq	r7, r4, r8, lsl #30
   2eb10:	mov	r2, r1
   2eb14:	mvn	r1, #0
   2eb18:	b	2ea78 <__assert_fail@plt+0x1ca90>
   2eb1c:	mov	r2, #58	; 0x3a
   2eb20:	mvn	r1, #0
   2eb24:	b	2ea78 <__assert_fail@plt+0x1ca90>
   2eb28:	mov	r2, #58	; 0x3a
   2eb2c:	b	2ea78 <__assert_fail@plt+0x1ca90>
   2eb30:	push	{r4, r5, r6, r7, r8, lr}
   2eb34:	sub	sp, sp, #104	; 0x68
   2eb38:	ldr	r5, [pc, #120]	; 2ebb8 <__assert_fail@plt+0x1cbd0>
   2eb3c:	mov	r6, r0
   2eb40:	mov	r0, sp
   2eb44:	ldr	r3, [r5]
   2eb48:	mov	r7, r2
   2eb4c:	str	r3, [sp, #100]	; 0x64
   2eb50:	bl	2cbd8 <__assert_fail@plt+0x1abf0>
   2eb54:	mov	ip, sp
   2eb58:	add	lr, sp, #52	; 0x34
   2eb5c:	ldm	ip!, {r0, r1, r2, r3}
   2eb60:	stmia	lr!, {r0, r1, r2, r3}
   2eb64:	ldm	ip!, {r0, r1, r2, r3}
   2eb68:	ldr	r8, [sp, #64]	; 0x40
   2eb6c:	stmia	lr!, {r0, r1, r2, r3}
   2eb70:	mvn	r4, r8
   2eb74:	ldm	ip, {r0, r1, r2, r3}
   2eb78:	and	ip, r4, #67108864	; 0x4000000
   2eb7c:	eor	ip, ip, r8
   2eb80:	str	ip, [sp, #64]	; 0x40
   2eb84:	stm	lr, {r0, r1, r2, r3}
   2eb88:	add	r3, sp, #52	; 0x34
   2eb8c:	mvn	r2, #0
   2eb90:	mov	r1, r7
   2eb94:	mov	r0, r6
   2eb98:	bl	2e4d4 <__assert_fail@plt+0x1c4ec>
   2eb9c:	ldr	r2, [sp, #100]	; 0x64
   2eba0:	ldr	r3, [r5]
   2eba4:	cmp	r2, r3
   2eba8:	bne	2ebb4 <__assert_fail@plt+0x1cbcc>
   2ebac:	add	sp, sp, #104	; 0x68
   2ebb0:	pop	{r4, r5, r6, r7, r8, pc}
   2ebb4:	bl	11b50 <__stack_chk_fail@plt>
   2ebb8:	andeq	r7, r4, r8, lsl #30
   2ebbc:	push	{r4, r5, r6, r7, r8, r9, lr}
   2ebc0:	mov	r6, r1
   2ebc4:	ldr	lr, [pc, #132]	; 2ec50 <__assert_fail@plt+0x1cc68>
   2ebc8:	mov	r5, r2
   2ebcc:	mov	r8, r0
   2ebd0:	mov	r9, r3
   2ebd4:	ldm	lr!, {r0, r1, r2, r3}
   2ebd8:	sub	sp, sp, #60	; 0x3c
   2ebdc:	add	ip, sp, #4
   2ebe0:	ldr	r4, [pc, #108]	; 2ec54 <__assert_fail@plt+0x1cc6c>
   2ebe4:	stmia	ip!, {r0, r1, r2, r3}
   2ebe8:	mov	r7, #10
   2ebec:	ldm	lr!, {r0, r1, r2, r3}
   2ebf0:	cmp	r5, #0
   2ebf4:	cmpne	r6, #0
   2ebf8:	str	r7, [sp, #4]
   2ebfc:	stmia	ip!, {r0, r1, r2, r3}
   2ec00:	ldm	lr, {r0, r1, r2, r3}
   2ec04:	ldr	lr, [r4]
   2ec08:	stm	ip, {r0, r1, r2, r3}
   2ec0c:	str	lr, [sp, #52]	; 0x34
   2ec10:	beq	2ec4c <__assert_fail@plt+0x1cc64>
   2ec14:	add	r3, sp, #4
   2ec18:	ldr	r2, [sp, #88]	; 0x58
   2ec1c:	mov	r1, r9
   2ec20:	mov	r0, r8
   2ec24:	str	r6, [sp, #44]	; 0x2c
   2ec28:	str	r5, [sp, #48]	; 0x30
   2ec2c:	bl	2e4d4 <__assert_fail@plt+0x1c4ec>
   2ec30:	ldr	r2, [sp, #52]	; 0x34
   2ec34:	ldr	r3, [r4]
   2ec38:	cmp	r2, r3
   2ec3c:	bne	2ec48 <__assert_fail@plt+0x1cc60>
   2ec40:	add	sp, sp, #60	; 0x3c
   2ec44:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ec48:	bl	11b50 <__stack_chk_fail@plt>
   2ec4c:	bl	11fa0 <abort@plt>
   2ec50:	andeq	sl, r4, ip, ror #12
   2ec54:	andeq	r7, r4, r8, lsl #30
   2ec58:	push	{lr}		; (str lr, [sp, #-4]!)
   2ec5c:	sub	sp, sp, #12
   2ec60:	mvn	ip, #0
   2ec64:	str	ip, [sp]
   2ec68:	bl	2ebbc <__assert_fail@plt+0x1cbd4>
   2ec6c:	add	sp, sp, #12
   2ec70:	pop	{pc}		; (ldr pc, [sp], #4)
   2ec74:	push	{lr}		; (str lr, [sp, #-4]!)
   2ec78:	sub	sp, sp, #12
   2ec7c:	mvn	ip, #0
   2ec80:	mov	r3, r2
   2ec84:	str	ip, [sp]
   2ec88:	mov	r2, r1
   2ec8c:	mov	r1, r0
   2ec90:	mov	r0, #0
   2ec94:	bl	2ebbc <__assert_fail@plt+0x1cbd4>
   2ec98:	add	sp, sp, #12
   2ec9c:	pop	{pc}		; (ldr pc, [sp], #4)
   2eca0:	push	{lr}		; (str lr, [sp, #-4]!)
   2eca4:	sub	sp, sp, #12
   2eca8:	str	r3, [sp]
   2ecac:	mov	r3, r2
   2ecb0:	mov	r2, r1
   2ecb4:	mov	r1, r0
   2ecb8:	mov	r0, #0
   2ecbc:	bl	2ebbc <__assert_fail@plt+0x1cbd4>
   2ecc0:	add	sp, sp, #12
   2ecc4:	pop	{pc}		; (ldr pc, [sp], #4)
   2ecc8:	ldr	r3, [pc]	; 2ecd0 <__assert_fail@plt+0x1cce8>
   2eccc:	b	2e4d4 <__assert_fail@plt+0x1c4ec>
   2ecd0:			; <UNDEFINED> instruction: 0x000482b4
   2ecd4:	mov	r2, r1
   2ecd8:	ldr	r3, [pc, #8]	; 2ece8 <__assert_fail@plt+0x1cd00>
   2ecdc:	mov	r1, r0
   2ece0:	mov	r0, #0
   2ece4:	b	2e4d4 <__assert_fail@plt+0x1c4ec>
   2ece8:			; <UNDEFINED> instruction: 0x000482b4
   2ecec:	ldr	r3, [pc, #4]	; 2ecf8 <__assert_fail@plt+0x1cd10>
   2ecf0:	mvn	r2, #0
   2ecf4:	b	2e4d4 <__assert_fail@plt+0x1c4ec>
   2ecf8:			; <UNDEFINED> instruction: 0x000482b4
   2ecfc:	mov	r1, r0
   2ed00:	ldr	r3, [pc, #8]	; 2ed10 <__assert_fail@plt+0x1cd28>
   2ed04:	mvn	r2, #0
   2ed08:	mov	r0, #0
   2ed0c:	b	2e4d4 <__assert_fail@plt+0x1c4ec>
   2ed10:			; <UNDEFINED> instruction: 0x000482b4

0002ed14 <renameat2@@Base>:
   2ed14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ed18:	sub	sp, sp, #228	; 0xe4
   2ed1c:	ldr	r4, [pc, #528]	; 2ef34 <renameat2@@Base+0x220>
   2ed20:	str	r3, [sp]
   2ed24:	mov	sl, r0
   2ed28:	mov	r7, r1
   2ed2c:	mov	r9, r2
   2ed30:	mov	r6, r3
   2ed34:	mov	r3, r2
   2ed38:	mov	r2, r1
   2ed3c:	mov	r1, r0
   2ed40:	ldr	r0, [sp, #264]	; 0x108
   2ed44:	ldr	ip, [r4]
   2ed48:	str	r0, [sp, #4]
   2ed4c:	ldr	r0, [pc, #484]	; 2ef38 <renameat2@@Base+0x224>
   2ed50:	str	ip, [sp, #220]	; 0xdc
   2ed54:	bl	11d6c <syscall@plt>
   2ed58:	subs	r8, r0, #0
   2ed5c:	bge	2eda8 <renameat2@@Base+0x94>
   2ed60:	bl	11dc0 <__errno_location@plt>
   2ed64:	ldr	r5, [r0]
   2ed68:	mov	fp, r0
   2ed6c:	sub	r3, r5, #22
   2ed70:	bic	r3, r3, #16
   2ed74:	cmp	r5, #95	; 0x5f
   2ed78:	cmpne	r3, #0
   2ed7c:	movne	r5, #1
   2ed80:	moveq	r5, #0
   2ed84:	bne	2eda8 <renameat2@@Base+0x94>
   2ed88:	ldr	r3, [sp, #264]	; 0x108
   2ed8c:	cmp	r3, #0
   2ed90:	beq	2ee00 <renameat2@@Base+0xec>
   2ed94:	bics	r3, r3, #1
   2ed98:	beq	2edc4 <renameat2@@Base+0xb0>
   2ed9c:	mvn	r8, #0
   2eda0:	mov	r3, #95	; 0x5f
   2eda4:	str	r3, [r0]
   2eda8:	ldr	r1, [sp, #220]	; 0xdc
   2edac:	ldr	r3, [r4]
   2edb0:	mov	r0, r8
   2edb4:	cmp	r1, r3
   2edb8:	bne	2ef30 <renameat2@@Base+0x21c>
   2edbc:	add	sp, sp, #228	; 0xe4
   2edc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2edc4:	mov	r3, #256	; 0x100
   2edc8:	str	r3, [sp]
   2edcc:	mov	r2, r6
   2edd0:	add	r3, sp, #112	; 0x70
   2edd4:	mov	r1, r9
   2edd8:	mov	r0, #3
   2eddc:	bl	11bbc <__fxstatat64@plt>
   2ede0:	cmp	r0, #0
   2ede4:	beq	2ef00 <renameat2@@Base+0x1ec>
   2ede8:	ldr	r3, [fp]
   2edec:	cmp	r3, #75	; 0x4b
   2edf0:	beq	2ef00 <renameat2@@Base+0x1ec>
   2edf4:	cmp	r3, #2
   2edf8:	bne	2eef8 <renameat2@@Base+0x1e4>
   2edfc:	mov	r5, #1
   2ee00:	mov	r0, r7
   2ee04:	bl	11d78 <strlen@plt>
   2ee08:	mov	r8, r0
   2ee0c:	mov	r0, r6
   2ee10:	bl	11d78 <strlen@plt>
   2ee14:	cmp	r0, #0
   2ee18:	cmpne	r8, #0
   2ee1c:	beq	2eec4 <renameat2@@Base+0x1b0>
   2ee20:	add	r8, r7, r8
   2ee24:	add	r0, r6, r0
   2ee28:	ldrb	r2, [r8, #-1]
   2ee2c:	ldrb	r3, [r0, #-1]
   2ee30:	cmp	r2, #47	; 0x2f
   2ee34:	cmpne	r3, #47	; 0x2f
   2ee38:	bne	2eec4 <renameat2@@Base+0x1b0>
   2ee3c:	mov	r8, #256	; 0x100
   2ee40:	str	r8, [sp]
   2ee44:	add	r3, sp, #8
   2ee48:	mov	r2, r7
   2ee4c:	mov	r1, sl
   2ee50:	mov	r0, #3
   2ee54:	bl	11bbc <__fxstatat64@plt>
   2ee58:	cmp	r0, #0
   2ee5c:	bne	2eef8 <renameat2@@Base+0x1e4>
   2ee60:	cmp	r5, #0
   2ee64:	beq	2ee88 <renameat2@@Base+0x174>
   2ee68:	ldr	r3, [sp, #24]
   2ee6c:	and	r3, r3, #61440	; 0xf000
   2ee70:	cmp	r3, #16384	; 0x4000
   2ee74:	beq	2eec4 <renameat2@@Base+0x1b0>
   2ee78:	mov	r3, #2
   2ee7c:	str	r3, [fp]
   2ee80:	mvn	r8, #0
   2ee84:	b	2eda8 <renameat2@@Base+0x94>
   2ee88:	str	r8, [sp]
   2ee8c:	add	r3, sp, #112	; 0x70
   2ee90:	mov	r2, r6
   2ee94:	mov	r1, r9
   2ee98:	mov	r0, #3
   2ee9c:	bl	11bbc <__fxstatat64@plt>
   2eea0:	cmp	r0, #0
   2eea4:	beq	2eee0 <renameat2@@Base+0x1cc>
   2eea8:	ldr	r3, [fp]
   2eeac:	cmp	r3, #2
   2eeb0:	bne	2eef8 <renameat2@@Base+0x1e4>
   2eeb4:	ldr	r3, [sp, #24]
   2eeb8:	and	r3, r3, #61440	; 0xf000
   2eebc:	cmp	r3, #16384	; 0x4000
   2eec0:	bne	2eef8 <renameat2@@Base+0x1e4>
   2eec4:	mov	r3, r6
   2eec8:	mov	r2, r9
   2eecc:	mov	r1, r7
   2eed0:	mov	r0, sl
   2eed4:	bl	11f34 <renameat@plt>
   2eed8:	mov	r8, r0
   2eedc:	b	2eda8 <renameat2@@Base+0x94>
   2eee0:	ldr	r3, [sp, #128]	; 0x80
   2eee4:	and	r3, r3, #61440	; 0xf000
   2eee8:	cmp	r3, #16384	; 0x4000
   2eeec:	beq	2ef10 <renameat2@@Base+0x1fc>
   2eef0:	mov	r3, #20
   2eef4:	str	r3, [fp]
   2eef8:	mvn	r8, #0
   2eefc:	b	2eda8 <renameat2@@Base+0x94>
   2ef00:	mov	r3, #17
   2ef04:	str	r3, [fp]
   2ef08:	mvn	r8, #0
   2ef0c:	b	2eda8 <renameat2@@Base+0x94>
   2ef10:	ldr	r3, [sp, #24]
   2ef14:	and	r3, r3, #61440	; 0xf000
   2ef18:	cmp	r3, #16384	; 0x4000
   2ef1c:	beq	2eec4 <renameat2@@Base+0x1b0>
   2ef20:	mov	r3, #21
   2ef24:	str	r3, [fp]
   2ef28:	mvn	r8, #0
   2ef2c:	b	2eda8 <renameat2@@Base+0x94>
   2ef30:	bl	11b50 <__stack_chk_fail@plt>
   2ef34:	andeq	r7, r4, r8, lsl #30
   2ef38:	andeq	r0, r0, lr, ror r1
   2ef3c:	push	{r4, r5, r6, r7, r8, lr}
   2ef40:	mov	r8, r0
   2ef44:	ldr	r5, [pc, #84]	; 2efa0 <renameat2@@Base+0x28c>
   2ef48:	mov	r7, r1
   2ef4c:	mov	r4, r2
   2ef50:	mov	r2, r4
   2ef54:	mov	r1, r7
   2ef58:	mov	r0, r8
   2ef5c:	bl	11e20 <write@plt>
   2ef60:	subs	r6, r0, #0
   2ef64:	bge	2ef98 <renameat2@@Base+0x284>
   2ef68:	bl	11dc0 <__errno_location@plt>
   2ef6c:	ldr	r2, [r0]
   2ef70:	cmp	r2, #4
   2ef74:	beq	2ef50 <renameat2@@Base+0x23c>
   2ef78:	cmp	r4, r5
   2ef7c:	sub	r3, r2, #22
   2ef80:	clz	r3, r3
   2ef84:	lsr	r3, r3, #5
   2ef88:	movls	r3, #0
   2ef8c:	cmp	r3, #0
   2ef90:	mov	r4, r5
   2ef94:	bne	2ef50 <renameat2@@Base+0x23c>
   2ef98:	mov	r0, r6
   2ef9c:	pop	{r4, r5, r6, r7, r8, pc}
   2efa0:	svcvc	0x00ffe000
   2efa4:	andeq	r0, r0, r0
   2efa8:	push	{r4, r5, lr}
   2efac:	sub	sp, sp, #116	; 0x74
   2efb0:	ldr	r4, [pc, #104]	; 2f020 <renameat2@@Base+0x30c>
   2efb4:	mov	r1, r0
   2efb8:	mov	r2, sp
   2efbc:	ldr	r3, [r4]
   2efc0:	mov	r0, #3
   2efc4:	str	r3, [sp, #108]	; 0x6c
   2efc8:	bl	11fc4 <__lxstat64@plt>
   2efcc:	mov	r5, r0
   2efd0:	bl	11dc0 <__errno_location@plt>
   2efd4:	cmp	r5, #0
   2efd8:	beq	2eff4 <renameat2@@Base+0x2e0>
   2efdc:	ldr	r3, [r0]
   2efe0:	cmp	r3, #75	; 0x4b
   2efe4:	beq	2eff4 <renameat2@@Base+0x2e0>
   2efe8:	subs	r3, r3, #2
   2efec:	mvnne	r3, #0
   2eff0:	b	2f000 <renameat2@@Base+0x2ec>
   2eff4:	mvn	r3, #0
   2eff8:	mov	r2, #17
   2effc:	str	r2, [r0]
   2f000:	ldr	r1, [sp, #108]	; 0x6c
   2f004:	ldr	r2, [r4]
   2f008:	mov	r0, r3
   2f00c:	cmp	r1, r2
   2f010:	bne	2f01c <renameat2@@Base+0x308>
   2f014:	add	sp, sp, #116	; 0x74
   2f018:	pop	{r4, r5, pc}
   2f01c:	bl	11b50 <__stack_chk_fail@plt>
   2f020:	andeq	r7, r4, r8, lsl #30
   2f024:	mov	r1, #448	; 0x1c0
   2f028:	b	11de4 <mkdir@plt>
   2f02c:	ldr	r1, [r1]
   2f030:	mov	r2, #384	; 0x180
   2f034:	bic	r1, r1, #195	; 0xc3
   2f038:	orr	r1, r1, #194	; 0xc2
   2f03c:	b	11c88 <open64@plt>
   2f040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f044:	mov	r6, r1
   2f048:	ldr	r1, [pc, #552]	; 2f278 <renameat2@@Base+0x564>
   2f04c:	sub	sp, sp, #36	; 0x24
   2f050:	mov	sl, r0
   2f054:	ldr	r1, [r1]
   2f058:	strd	r2, [sp, #4]
   2f05c:	str	r1, [sp, #28]
   2f060:	bl	11dc0 <__errno_location@plt>
   2f064:	mov	fp, r0
   2f068:	mov	r0, sl
   2f06c:	bl	11d78 <strlen@plt>
   2f070:	add	r3, r6, #5
   2f074:	cmp	r3, r0
   2f078:	ldr	r3, [fp]
   2f07c:	str	r3, [sp, #12]
   2f080:	bge	2f254 <renameat2@@Base+0x540>
   2f084:	sub	r0, r0, #6
   2f088:	sub	r0, r0, r6
   2f08c:	add	r6, sl, r0
   2f090:	ldr	r1, [pc, #484]	; 2f27c <renameat2@@Base+0x568>
   2f094:	mov	r0, r6
   2f098:	mov	r2, #6
   2f09c:	bl	11b44 <memcmp@plt>
   2f0a0:	subs	r1, r0, #0
   2f0a4:	bne	2f254 <renameat2@@Base+0x540>
   2f0a8:	add	r0, sp, #20
   2f0ac:	bl	11c4c <gettimeofday@plt>
   2f0b0:	ldr	r3, [sp, #24]
   2f0b4:	ldr	r4, [sp, #20]
   2f0b8:	ldr	r8, [pc, #448]	; 2f280 <renameat2@@Base+0x56c>
   2f0bc:	asr	r1, r3, #31
   2f0c0:	ldr	r9, [pc, #444]	; 2f284 <renameat2@@Base+0x570>
   2f0c4:	lsl	r5, r1, #16
   2f0c8:	orr	r5, r5, r3, lsr #16
   2f0cc:	asr	r1, r4, #31
   2f0d0:	eor	r5, r5, r1
   2f0d4:	eor	r4, r4, r3, lsl #16
   2f0d8:	bl	11d54 <getpid@plt>
   2f0dc:	ldr	r3, [r8]
   2f0e0:	ldr	r2, [r8, #4]
   2f0e4:	ldr	r7, [pc, #412]	; 2f288 <renameat2@@Base+0x574>
   2f0e8:	eor	r4, r4, r0
   2f0ec:	asr	r1, r0, #31
   2f0f0:	adds	r4, r4, r3
   2f0f4:	eor	r5, r5, r1
   2f0f8:	adc	r5, r5, r2
   2f0fc:	strd	r4, [r8]
   2f100:	b	2f12c <renameat2@@Base+0x418>
   2f104:	ldr	r3, [fp]
   2f108:	cmp	r3, #17
   2f10c:	bne	2f234 <renameat2@@Base+0x520>
   2f110:	ldrd	r4, [r8]
   2f114:	ldr	r3, [pc, #368]	; 2f28c <renameat2@@Base+0x578>
   2f118:	adds	r4, r4, r3
   2f11c:	adc	r5, r5, #0
   2f120:	subs	r9, r9, #1
   2f124:	strd	r4, [r8]
   2f128:	beq	2f234 <renameat2@@Base+0x520>
   2f12c:	mov	r2, #62	; 0x3e
   2f130:	mov	r3, #0
   2f134:	mov	r0, r4
   2f138:	mov	r1, r5
   2f13c:	bl	31d7c <renameat2@@Base+0x3068>
   2f140:	mov	r3, #0
   2f144:	mov	r0, r4
   2f148:	mov	r1, r5
   2f14c:	ldrb	ip, [r7, r2]
   2f150:	mov	r2, #62	; 0x3e
   2f154:	strb	ip, [r6]
   2f158:	bl	31d7c <renameat2@@Base+0x3068>
   2f15c:	mov	r2, #62	; 0x3e
   2f160:	mov	r3, #0
   2f164:	bl	31d7c <renameat2@@Base+0x3068>
   2f168:	mov	r3, #0
   2f16c:	mov	r0, r4
   2f170:	mov	r1, r5
   2f174:	ldrb	ip, [r7, r2]
   2f178:	ldr	r2, [pc, #272]	; 2f290 <renameat2@@Base+0x57c>
   2f17c:	strb	ip, [r6, #1]
   2f180:	bl	31d7c <renameat2@@Base+0x3068>
   2f184:	mov	r2, #62	; 0x3e
   2f188:	mov	r3, #0
   2f18c:	bl	31d7c <renameat2@@Base+0x3068>
   2f190:	mov	r3, #0
   2f194:	mov	r0, r4
   2f198:	mov	r1, r5
   2f19c:	ldrb	ip, [r7, r2]
   2f1a0:	ldr	r2, [pc, #220]	; 2f284 <renameat2@@Base+0x570>
   2f1a4:	strb	ip, [r6, #2]
   2f1a8:	bl	31d7c <renameat2@@Base+0x3068>
   2f1ac:	mov	r2, #62	; 0x3e
   2f1b0:	mov	r3, #0
   2f1b4:	bl	31d7c <renameat2@@Base+0x3068>
   2f1b8:	mov	r0, r4
   2f1bc:	mov	r1, r5
   2f1c0:	ldrb	ip, [r7, r2]
   2f1c4:	add	r3, pc, #156	; 0x9c
   2f1c8:	ldrd	r2, [r3]
   2f1cc:	strb	ip, [r6, #3]
   2f1d0:	bl	31d7c <renameat2@@Base+0x3068>
   2f1d4:	mov	r2, #62	; 0x3e
   2f1d8:	mov	r3, #0
   2f1dc:	bl	31d7c <renameat2@@Base+0x3068>
   2f1e0:	mov	r0, r4
   2f1e4:	mov	r1, r5
   2f1e8:	ldrb	ip, [r7, r2]
   2f1ec:	add	r3, pc, #124	; 0x7c
   2f1f0:	ldrd	r2, [r3]
   2f1f4:	strb	ip, [r6, #4]
   2f1f8:	bl	31d7c <renameat2@@Base+0x3068>
   2f1fc:	mov	r2, #62	; 0x3e
   2f200:	mov	r3, #0
   2f204:	bl	31d7c <renameat2@@Base+0x3068>
   2f208:	ldr	r1, [sp, #4]
   2f20c:	mov	r0, sl
   2f210:	ldrb	r3, [r7, r2]
   2f214:	strb	r3, [r6, #5]
   2f218:	ldr	r3, [sp, #8]
   2f21c:	blx	r3
   2f220:	cmp	r0, #0
   2f224:	blt	2f104 <renameat2@@Base+0x3f0>
   2f228:	ldr	r3, [sp, #12]
   2f22c:	str	r3, [fp]
   2f230:	b	2f238 <renameat2@@Base+0x524>
   2f234:	mvn	r0, #0
   2f238:	ldr	r3, [pc, #56]	; 2f278 <renameat2@@Base+0x564>
   2f23c:	ldr	r2, [sp, #28]
   2f240:	ldr	r3, [r3]
   2f244:	cmp	r2, r3
   2f248:	bne	2f264 <renameat2@@Base+0x550>
   2f24c:	add	sp, sp, #36	; 0x24
   2f250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f254:	mov	r3, #22
   2f258:	str	r3, [fp]
   2f25c:	mvn	r0, #0
   2f260:	b	2f238 <renameat2@@Base+0x524>
   2f264:	bl	11b50 <__stack_chk_fail@plt>
   2f268:	rsceq	r7, r1, r0, lsl r8
   2f26c:	andeq	r0, r0, r0
   2f270:	ldrcc	r1, [fp], r0, ror #7
   2f274:	andeq	r0, r0, r0
   2f278:	andeq	r7, r4, r8, lsl #30
   2f27c:	andeq	r4, r3, ip, lsr #27
   2f280:	andeq	sl, r4, r0, lsr #13
   2f284:	strdeq	sl, [r3], -r8
   2f288:			; <UNDEFINED> instruction: 0x00036eb8
   2f28c:	andeq	r1, r0, r1, ror #28
   2f290:	andeq	r0, r0, r4, lsl #30
   2f294:	push	{lr}		; (str lr, [sp, #-4]!)
   2f298:	sub	sp, sp, #12
   2f29c:	cmp	r3, #2
   2f2a0:	str	r2, [sp, #4]
   2f2a4:	bhi	2f2c4 <renameat2@@Base+0x5b0>
   2f2a8:	ldr	ip, [pc, #40]	; 2f2d8 <renameat2@@Base+0x5c4>
   2f2ac:	add	r2, sp, #4
   2f2b0:	add	ip, ip, r3, lsl #2
   2f2b4:	ldr	r3, [ip, #64]	; 0x40
   2f2b8:	bl	2f040 <renameat2@@Base+0x32c>
   2f2bc:	add	sp, sp, #12
   2f2c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2f2c4:	ldr	r3, [pc, #16]	; 2f2dc <renameat2@@Base+0x5c8>
   2f2c8:	ldr	r2, [pc, #16]	; 2f2e0 <renameat2@@Base+0x5cc>
   2f2cc:	ldr	r1, [pc, #16]	; 2f2e4 <renameat2@@Base+0x5d0>
   2f2d0:	ldr	r0, [pc, #16]	; 2f2e8 <renameat2@@Base+0x5d4>
   2f2d4:	bl	11fe8 <__assert_fail@plt>
   2f2d8:			; <UNDEFINED> instruction: 0x00036eb8
   2f2dc:	andeq	r6, r3, r4, lsl #30
   2f2e0:	andeq	r0, r0, pc, lsr r1
   2f2e4:	andeq	r6, r3, r4, lsl pc
   2f2e8:	andeq	r6, r3, r0, lsr #30
   2f2ec:	push	{r4, lr}
   2f2f0:	mov	r4, r0
   2f2f4:	bl	11cac <malloc@plt>
   2f2f8:	adds	r4, r4, #0
   2f2fc:	movne	r4, #1
   2f300:	cmp	r0, #0
   2f304:	movne	r4, #0
   2f308:	cmp	r4, #0
   2f30c:	popeq	{r4, pc}
   2f310:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   2f314:	push	{r4, r5, r6, lr}
   2f318:	umull	r4, r5, r0, r1
   2f31c:	adds	r3, r5, #0
   2f320:	movne	r3, #1
   2f324:	cmp	r4, #0
   2f328:	blt	2f340 <renameat2@@Base+0x62c>
   2f32c:	cmp	r3, #0
   2f330:	bne	2f340 <renameat2@@Base+0x62c>
   2f334:	mul	r0, r1, r0
   2f338:	pop	{r4, r5, r6, lr}
   2f33c:	b	2f2ec <renameat2@@Base+0x5d8>
   2f340:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   2f344:	b	2f2ec <renameat2@@Base+0x5d8>
   2f348:	adds	r3, r0, #0
   2f34c:	movne	r3, #1
   2f350:	cmp	r1, #0
   2f354:	movne	r3, #0
   2f358:	cmp	r3, #0
   2f35c:	push	{r4, lr}
   2f360:	bne	2f388 <renameat2@@Base+0x674>
   2f364:	mov	r4, r1
   2f368:	bl	11b80 <realloc@plt>
   2f36c:	adds	r4, r4, #0
   2f370:	movne	r4, #1
   2f374:	cmp	r0, #0
   2f378:	movne	r4, #0
   2f37c:	cmp	r4, #0
   2f380:	popeq	{r4, pc}
   2f384:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   2f388:	bl	11ab4 <free@plt>
   2f38c:	mov	r0, #0
   2f390:	pop	{r4, pc}
   2f394:	push	{r4, r5, r6, lr}
   2f398:	umull	r4, r5, r1, r2
   2f39c:	adds	r3, r5, #0
   2f3a0:	movne	r3, #1
   2f3a4:	cmp	r4, #0
   2f3a8:	blt	2f3c0 <renameat2@@Base+0x6ac>
   2f3ac:	cmp	r3, #0
   2f3b0:	bne	2f3c0 <renameat2@@Base+0x6ac>
   2f3b4:	mul	r1, r2, r1
   2f3b8:	pop	{r4, r5, r6, lr}
   2f3bc:	b	2f348 <renameat2@@Base+0x634>
   2f3c0:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   2f3c4:	push	{r4, r5, r6, r7, r8, lr}
   2f3c8:	subs	r7, r0, #0
   2f3cc:	mov	r6, r1
   2f3d0:	mov	r5, r2
   2f3d4:	ldr	r4, [r1]
   2f3d8:	beq	2f40c <renameat2@@Base+0x6f8>
   2f3dc:	mov	r1, r2
   2f3e0:	ldr	r0, [pc, #104]	; 2f450 <renameat2@@Base+0x73c>
   2f3e4:	bl	3185c <renameat2@@Base+0x2b48>
   2f3e8:	cmp	r0, r4
   2f3ec:	bls	2f430 <renameat2@@Base+0x71c>
   2f3f0:	add	r3, r4, #1
   2f3f4:	add	r4, r3, r4, lsr #1
   2f3f8:	str	r4, [r6]
   2f3fc:	mul	r1, r5, r4
   2f400:	mov	r0, r7
   2f404:	pop	{r4, r5, r6, r7, r8, lr}
   2f408:	b	2f348 <renameat2@@Base+0x634>
   2f40c:	cmp	r4, #0
   2f410:	beq	2f434 <renameat2@@Base+0x720>
   2f414:	umull	r0, r1, r4, r5
   2f418:	adds	r3, r1, #0
   2f41c:	movne	r3, #1
   2f420:	cmp	r0, #0
   2f424:	blt	2f430 <renameat2@@Base+0x71c>
   2f428:	cmp	r3, #0
   2f42c:	beq	2f3f8 <renameat2@@Base+0x6e4>
   2f430:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   2f434:	mov	r1, r2
   2f438:	mov	r0, #64	; 0x40
   2f43c:	bl	3185c <renameat2@@Base+0x2b48>
   2f440:	cmp	r5, #64	; 0x40
   2f444:	movls	r4, r0
   2f448:	addhi	r4, r0, #1
   2f44c:	b	2f414 <renameat2@@Base+0x700>
   2f450:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   2f454:	cmp	r0, #0
   2f458:	ldr	r3, [r1]
   2f45c:	beq	2f480 <renameat2@@Base+0x76c>
   2f460:	ldr	r2, [pc, #60]	; 2f4a4 <renameat2@@Base+0x790>
   2f464:	cmp	r3, r2
   2f468:	bhi	2f49c <renameat2@@Base+0x788>
   2f46c:	add	r2, r3, #1
   2f470:	add	r3, r2, r3, lsr #1
   2f474:	str	r3, [r1]
   2f478:	mov	r1, r3
   2f47c:	b	2f348 <renameat2@@Base+0x634>
   2f480:	cmp	r3, #0
   2f484:	bne	2f498 <renameat2@@Base+0x784>
   2f488:	mov	r3, #64	; 0x40
   2f48c:	str	r3, [r1]
   2f490:	mov	r1, r3
   2f494:	b	2f348 <renameat2@@Base+0x634>
   2f498:	bge	2f474 <renameat2@@Base+0x760>
   2f49c:	push	{r4, lr}
   2f4a0:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   2f4a4:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   2f4a8:	push	{r4, lr}
   2f4ac:	mov	r4, r0
   2f4b0:	bl	2f2ec <renameat2@@Base+0x5d8>
   2f4b4:	mov	r2, r4
   2f4b8:	mov	r1, #0
   2f4bc:	pop	{r4, lr}
   2f4c0:	b	11df0 <memset@plt>
   2f4c4:	push	{r4, r5, r6, lr}
   2f4c8:	umull	r4, r5, r0, r1
   2f4cc:	adds	r3, r5, #0
   2f4d0:	movne	r3, #1
   2f4d4:	cmp	r4, #0
   2f4d8:	blt	2f4f0 <renameat2@@Base+0x7dc>
   2f4dc:	cmp	r3, #0
   2f4e0:	bne	2f4f0 <renameat2@@Base+0x7dc>
   2f4e4:	bl	11a0c <calloc@plt>
   2f4e8:	cmp	r0, #0
   2f4ec:	popne	{r4, r5, r6, pc}
   2f4f0:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   2f4f4:	push	{r4, r5, r6, lr}
   2f4f8:	mov	r4, r1
   2f4fc:	mov	r5, r0
   2f500:	mov	r0, r1
   2f504:	bl	2f2ec <renameat2@@Base+0x5d8>
   2f508:	mov	r2, r4
   2f50c:	mov	r1, r5
   2f510:	pop	{r4, r5, r6, lr}
   2f514:	b	11afc <memcpy@plt>
   2f518:	push	{r4, lr}
   2f51c:	mov	r4, r0
   2f520:	bl	11d78 <strlen@plt>
   2f524:	add	r1, r0, #1
   2f528:	mov	r0, r4
   2f52c:	pop	{r4, lr}
   2f530:	b	2f4f4 <renameat2@@Base+0x7e0>
   2f534:	push	{r4, lr}
   2f538:	bl	11ad8 <strndup@plt>
   2f53c:	cmp	r0, #0
   2f540:	popne	{r4, pc}
   2f544:	bl	1f5d8 <__assert_fail@plt+0xd5f0>
   2f548:	push	{r1, r2, r3}
   2f54c:	push	{r4, r5, r6, r7, r8, lr}
   2f550:	sub	sp, sp, #12
   2f554:	ldr	r4, [pc, #300]	; 2f688 <renameat2@@Base+0x974>
   2f558:	ldr	r3, [pc, #300]	; 2f68c <renameat2@@Base+0x978>
   2f55c:	ldr	r1, [sp, #36]	; 0x24
   2f560:	ldr	r2, [r4]
   2f564:	cmp	r1, r3
   2f568:	add	r3, sp, #40	; 0x28
   2f56c:	str	r2, [sp, #4]
   2f570:	str	r3, [sp]
   2f574:	bne	2f640 <renameat2@@Base+0x92c>
   2f578:	ldr	r6, [pc, #272]	; 2f690 <renameat2@@Base+0x97c>
   2f57c:	add	r3, sp, #44	; 0x2c
   2f580:	str	r3, [sp]
   2f584:	ldr	r3, [r6]
   2f588:	ldr	r7, [sp, #40]	; 0x28
   2f58c:	cmp	r3, #0
   2f590:	blt	2f5d4 <renameat2@@Base+0x8c0>
   2f594:	mov	r2, r7
   2f598:	mov	r8, r0
   2f59c:	bl	11e68 <fcntl64@plt>
   2f5a0:	subs	r5, r0, #0
   2f5a4:	blt	2f650 <renameat2@@Base+0x93c>
   2f5a8:	mov	r3, #1
   2f5ac:	str	r3, [r6]
   2f5b0:	ldr	r2, [sp, #4]
   2f5b4:	ldr	r3, [r4]
   2f5b8:	mov	r0, r5
   2f5bc:	cmp	r2, r3
   2f5c0:	bne	2f684 <renameat2@@Base+0x970>
   2f5c4:	add	sp, sp, #12
   2f5c8:	pop	{r4, r5, r6, r7, r8, lr}
   2f5cc:	add	sp, sp, #12
   2f5d0:	bx	lr
   2f5d4:	mov	r2, r7
   2f5d8:	mov	r1, #0
   2f5dc:	bl	2f548 <renameat2@@Base+0x834>
   2f5e0:	subs	r5, r0, #0
   2f5e4:	blt	2f5b0 <renameat2@@Base+0x89c>
   2f5e8:	ldr	r3, [r6]
   2f5ec:	cmn	r3, #1
   2f5f0:	bne	2f5b0 <renameat2@@Base+0x89c>
   2f5f4:	mov	r1, #1
   2f5f8:	mov	r0, r5
   2f5fc:	bl	11e68 <fcntl64@plt>
   2f600:	subs	r2, r0, #0
   2f604:	blt	2f620 <renameat2@@Base+0x90c>
   2f608:	orr	r2, r2, #1
   2f60c:	mov	r1, #2
   2f610:	mov	r0, r5
   2f614:	bl	11e68 <fcntl64@plt>
   2f618:	cmn	r0, #1
   2f61c:	bne	2f5b0 <renameat2@@Base+0x89c>
   2f620:	bl	11dc0 <__errno_location@plt>
   2f624:	mov	r6, r0
   2f628:	mov	r0, r5
   2f62c:	ldr	r7, [r6]
   2f630:	mvn	r5, #0
   2f634:	bl	11fb8 <close@plt>
   2f638:	str	r7, [r6]
   2f63c:	b	2f5b0 <renameat2@@Base+0x89c>
   2f640:	ldr	r2, [sp, #40]	; 0x28
   2f644:	bl	11e68 <fcntl64@plt>
   2f648:	mov	r5, r0
   2f64c:	b	2f5b0 <renameat2@@Base+0x89c>
   2f650:	bl	11dc0 <__errno_location@plt>
   2f654:	ldr	r3, [r0]
   2f658:	cmp	r3, #22
   2f65c:	bne	2f5a8 <renameat2@@Base+0x894>
   2f660:	mov	r2, r7
   2f664:	mov	r0, r8
   2f668:	mov	r1, #0
   2f66c:	bl	2f548 <renameat2@@Base+0x834>
   2f670:	subs	r5, r0, #0
   2f674:	mvnge	r3, #0
   2f678:	strge	r3, [r6]
   2f67c:	bge	2f5f4 <renameat2@@Base+0x8e0>
   2f680:	b	2f5b0 <renameat2@@Base+0x89c>
   2f684:	bl	11b50 <__stack_chk_fail@plt>
   2f688:	andeq	r7, r4, r8, lsl #30
   2f68c:	andeq	r0, r0, r6, lsl #8
   2f690:	andeq	sl, r4, r8, lsr #13
   2f694:	push	{r4, r5, r6, r7, r8, lr}
   2f698:	subs	r7, r0, #0
   2f69c:	ldr	r5, [pc, #108]	; 2f710 <renameat2@@Base+0x9fc>
   2f6a0:	sub	sp, sp, #8
   2f6a4:	mov	r8, r1
   2f6a8:	ldr	r1, [r5]
   2f6ac:	moveq	r7, sp
   2f6b0:	str	r1, [sp, #4]
   2f6b4:	mov	r0, r7
   2f6b8:	mov	r1, r8
   2f6bc:	mov	r6, r2
   2f6c0:	bl	11c64 <mbrtowc@plt>
   2f6c4:	cmp	r6, #0
   2f6c8:	cmnne	r0, #3
   2f6cc:	mov	r4, r0
   2f6d0:	bhi	2f6f0 <renameat2@@Base+0x9dc>
   2f6d4:	ldr	r2, [sp, #4]
   2f6d8:	ldr	r3, [r5]
   2f6dc:	mov	r0, r4
   2f6e0:	cmp	r2, r3
   2f6e4:	bne	2f70c <renameat2@@Base+0x9f8>
   2f6e8:	add	sp, sp, #8
   2f6ec:	pop	{r4, r5, r6, r7, r8, pc}
   2f6f0:	mov	r0, #0
   2f6f4:	bl	2fc48 <renameat2@@Base+0xf34>
   2f6f8:	cmp	r0, #0
   2f6fc:	moveq	r4, #1
   2f700:	ldrbeq	r3, [r8]
   2f704:	streq	r3, [r7]
   2f708:	b	2f6d4 <renameat2@@Base+0x9c0>
   2f70c:	bl	11b50 <__stack_chk_fail@plt>
   2f710:	andeq	r7, r4, r8, lsl #30
   2f714:	subs	r1, r0, #0
   2f718:	beq	2f728 <renameat2@@Base+0xa14>
   2f71c:	mov	r2, #1
   2f720:	ldr	r0, [pc, #8]	; 2f730 <renameat2@@Base+0xa1c>
   2f724:	b	11d90 <setenv@plt>
   2f728:	ldr	r0, [pc]	; 2f730 <renameat2@@Base+0xa1c>
   2f72c:	b	11f7c <unsetenv@plt>
   2f730:	andeq	r2, r3, r0, ror #21
   2f734:	cmp	r0, #0
   2f738:	bxeq	lr
   2f73c:	push	{r4, lr}
   2f740:	ldr	r4, [r0]
   2f744:	bl	11ab4 <free@plt>
   2f748:	subs	r0, r4, #0
   2f74c:	bne	2f740 <renameat2@@Base+0xa2c>
   2f750:	pop	{r4, pc}
   2f754:	push	{r4, r5, r6, r7, r8, lr}
   2f758:	mov	r5, r0
   2f75c:	bl	11dc0 <__errno_location@plt>
   2f760:	mov	r4, r0
   2f764:	ldrb	r0, [r5, #4]
   2f768:	ldr	r6, [r4]
   2f76c:	cmp	r0, #0
   2f770:	addne	r0, r5, #5
   2f774:	bl	2f714 <renameat2@@Base+0xa00>
   2f778:	cmp	r0, #0
   2f77c:	beq	2f79c <renameat2@@Base+0xa88>
   2f780:	ldr	r6, [r4]
   2f784:	mov	r7, #0
   2f788:	mov	r0, r5
   2f78c:	bl	2f734 <renameat2@@Base+0xa20>
   2f790:	str	r6, [r4]
   2f794:	mov	r0, r7
   2f798:	pop	{r4, r5, r6, r7, r8, pc}
   2f79c:	bl	11be0 <tzset@plt>
   2f7a0:	mov	r7, #1
   2f7a4:	b	2f788 <renameat2@@Base+0xa74>
   2f7a8:	push	{r4, r5, r6, r7, r8, lr}
   2f7ac:	subs	r6, r0, #0
   2f7b0:	beq	2f80c <renameat2@@Base+0xaf8>
   2f7b4:	bl	11d78 <strlen@plt>
   2f7b8:	add	r5, r0, #1
   2f7bc:	cmp	r5, #58	; 0x3a
   2f7c0:	movcs	r0, r5
   2f7c4:	movcc	r0, #58	; 0x3a
   2f7c8:	add	r0, r0, #9
   2f7cc:	bic	r0, r0, #3
   2f7d0:	bl	11cac <malloc@plt>
   2f7d4:	subs	r4, r0, #0
   2f7d8:	beq	2f804 <renameat2@@Base+0xaf0>
   2f7dc:	mov	r7, #0
   2f7e0:	mov	r2, #1
   2f7e4:	add	r3, r4, #5
   2f7e8:	strh	r2, [r4, #4]
   2f7ec:	mov	r1, r6
   2f7f0:	str	r7, [r4]
   2f7f4:	mov	r0, r3
   2f7f8:	mov	r2, r5
   2f7fc:	bl	11afc <memcpy@plt>
   2f800:	strb	r7, [r0, r5]
   2f804:	mov	r0, r4
   2f808:	pop	{r4, r5, r6, r7, r8, pc}
   2f80c:	mov	r0, #64	; 0x40
   2f810:	bl	11cac <malloc@plt>
   2f814:	subs	r4, r0, #0
   2f818:	mov	r0, r4
   2f81c:	strne	r6, [r4]
   2f820:	strhne	r6, [r4, #4]
   2f824:	pop	{r4, r5, r6, r7, r8, pc}
   2f828:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f82c:	ldr	r7, [r1, #40]	; 0x28
   2f830:	cmp	r7, #0
   2f834:	beq	2f910 <renameat2@@Base+0xbfc>
   2f838:	cmp	r1, r7
   2f83c:	mov	r8, r1
   2f840:	mov	r6, r0
   2f844:	bhi	2f854 <renameat2@@Base+0xb40>
   2f848:	add	r3, r1, #44	; 0x2c
   2f84c:	cmp	r7, r3
   2f850:	bcc	2f910 <renameat2@@Base+0xbfc>
   2f854:	ldrb	r3, [r7]
   2f858:	cmp	r3, #0
   2f85c:	addne	r4, r6, #5
   2f860:	beq	2f908 <renameat2@@Base+0xbf4>
   2f864:	mov	r1, r7
   2f868:	mov	r0, r4
   2f86c:	bl	11a48 <strcmp@plt>
   2f870:	add	r5, r6, #5
   2f874:	cmp	r0, #0
   2f878:	mov	r0, r4
   2f87c:	beq	2f8f8 <renameat2@@Base+0xbe4>
   2f880:	ldrb	r9, [r4]
   2f884:	cmp	r9, #0
   2f888:	bne	2f8a0 <renameat2@@Base+0xb8c>
   2f88c:	cmp	r5, r4
   2f890:	bne	2f91c <renameat2@@Base+0xc08>
   2f894:	ldrb	r5, [r6, #4]
   2f898:	cmp	r5, #0
   2f89c:	beq	2f8c8 <renameat2@@Base+0xbb4>
   2f8a0:	bl	11d78 <strlen@plt>
   2f8a4:	add	r0, r0, #1
   2f8a8:	ldrb	r3, [r4, r0]!
   2f8ac:	cmp	r3, #0
   2f8b0:	bne	2f864 <renameat2@@Base+0xb50>
   2f8b4:	ldr	r3, [r6]
   2f8b8:	cmp	r3, #0
   2f8bc:	addne	r4, r3, #5
   2f8c0:	movne	r6, r3
   2f8c4:	b	2f864 <renameat2@@Base+0xb50>
   2f8c8:	mov	r0, r7
   2f8cc:	bl	11d78 <strlen@plt>
   2f8d0:	add	sl, r0, #1
   2f8d4:	add	r5, sl, r5
   2f8d8:	cmp	r5, #58	; 0x3a
   2f8dc:	bhi	2f948 <renameat2@@Base+0xc34>
   2f8e0:	mov	r1, r7
   2f8e4:	mov	r2, sl
   2f8e8:	mov	r0, r4
   2f8ec:	bl	11afc <memcpy@plt>
   2f8f0:	mov	r3, #0
   2f8f4:	strb	r3, [r4, sl]
   2f8f8:	mov	r9, #1
   2f8fc:	str	r4, [r8, #40]	; 0x28
   2f900:	mov	r0, r9
   2f904:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f908:	ldr	r4, [pc, #96]	; 2f970 <renameat2@@Base+0xc5c>
   2f90c:	b	2f8f8 <renameat2@@Base+0xbe4>
   2f910:	mov	r9, #1
   2f914:	mov	r0, r9
   2f918:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f91c:	mov	r0, r7
   2f920:	bl	11d78 <strlen@plt>
   2f924:	sub	r5, r4, r5
   2f928:	mvn	r3, r5
   2f92c:	add	sl, r0, #1
   2f930:	cmp	r3, sl
   2f934:	bcs	2f8d4 <renameat2@@Base+0xbc0>
   2f938:	bl	11dc0 <__errno_location@plt>
   2f93c:	mov	r3, #12
   2f940:	str	r3, [r0]
   2f944:	b	2f900 <renameat2@@Base+0xbec>
   2f948:	mov	r0, r7
   2f94c:	bl	2f7a8 <renameat2@@Base+0xa94>
   2f950:	cmp	r0, #0
   2f954:	str	r0, [r6]
   2f958:	moveq	r9, r0
   2f95c:	beq	2f900 <renameat2@@Base+0xbec>
   2f960:	mov	r3, #0
   2f964:	strb	r3, [r0, #4]
   2f968:	add	r4, r0, #5
   2f96c:	b	2f8f8 <renameat2@@Base+0xbe4>
   2f970:	strdeq	r5, [r3], -r8
   2f974:	push	{r4, r5, r6, lr}
   2f978:	mov	r4, r0
   2f97c:	ldr	r0, [pc, #160]	; 2fa24 <renameat2@@Base+0xd10>
   2f980:	bl	11c94 <getenv@plt>
   2f984:	ldrb	r3, [r4, #4]
   2f988:	subs	r5, r0, #0
   2f98c:	beq	2fa0c <renameat2@@Base+0xcf8>
   2f990:	cmp	r3, #0
   2f994:	bne	2f9ec <renameat2@@Base+0xcd8>
   2f998:	mov	r0, r5
   2f99c:	bl	2f7a8 <renameat2@@Base+0xa94>
   2f9a0:	subs	r5, r0, #0
   2f9a4:	beq	2fa04 <renameat2@@Base+0xcf0>
   2f9a8:	ldrb	r0, [r4, #4]
   2f9ac:	cmp	r0, #0
   2f9b0:	addne	r0, r4, #5
   2f9b4:	bl	2f714 <renameat2@@Base+0xa00>
   2f9b8:	cmp	r0, #0
   2f9bc:	beq	2fa18 <renameat2@@Base+0xd04>
   2f9c0:	bl	11dc0 <__errno_location@plt>
   2f9c4:	cmp	r5, #1
   2f9c8:	mov	r4, r0
   2f9cc:	ldr	r6, [r0]
   2f9d0:	beq	2f9dc <renameat2@@Base+0xcc8>
   2f9d4:	mov	r0, r5
   2f9d8:	bl	2f734 <renameat2@@Base+0xa20>
   2f9dc:	mov	r5, #0
   2f9e0:	str	r6, [r4]
   2f9e4:	mov	r0, r5
   2f9e8:	pop	{r4, r5, r6, pc}
   2f9ec:	mov	r1, r5
   2f9f0:	add	r0, r4, #5
   2f9f4:	bl	11a48 <strcmp@plt>
   2f9f8:	cmp	r0, #0
   2f9fc:	bne	2f998 <renameat2@@Base+0xc84>
   2fa00:	mov	r5, #1
   2fa04:	mov	r0, r5
   2fa08:	pop	{r4, r5, r6, pc}
   2fa0c:	cmp	r3, #0
   2fa10:	beq	2fa00 <renameat2@@Base+0xcec>
   2fa14:	b	2f998 <renameat2@@Base+0xc84>
   2fa18:	bl	11be0 <tzset@plt>
   2fa1c:	mov	r0, r5
   2fa20:	pop	{r4, r5, r6, pc}
   2fa24:	andeq	r2, r3, r0, ror #21
   2fa28:	cmp	r0, #1
   2fa2c:	bxeq	lr
   2fa30:	b	2f734 <renameat2@@Base+0xa20>
   2fa34:	subs	ip, r0, #0
   2fa38:	push	{r4, r5, r6, r7, r8, lr}
   2fa3c:	mov	r5, r1
   2fa40:	beq	2fac0 <renameat2@@Base+0xdac>
   2fa44:	mov	r4, r2
   2fa48:	mov	r6, ip
   2fa4c:	bl	2f974 <renameat2@@Base+0xc60>
   2fa50:	subs	r7, r0, #0
   2fa54:	beq	2faa0 <renameat2@@Base+0xd8c>
   2fa58:	mov	r0, r5
   2fa5c:	mov	r1, r4
   2fa60:	bl	11b98 <localtime_r@plt>
   2fa64:	cmp	r0, #0
   2fa68:	beq	2fa90 <renameat2@@Base+0xd7c>
   2fa6c:	mov	r0, r6
   2fa70:	mov	r1, r4
   2fa74:	bl	2f828 <renameat2@@Base+0xb14>
   2fa78:	cmp	r0, #0
   2fa7c:	beq	2fa90 <renameat2@@Base+0xd7c>
   2fa80:	cmp	r7, #1
   2fa84:	bne	2faa8 <renameat2@@Base+0xd94>
   2fa88:	mov	r0, r4
   2fa8c:	pop	{r4, r5, r6, r7, r8, pc}
   2fa90:	cmp	r7, #1
   2fa94:	beq	2faa0 <renameat2@@Base+0xd8c>
   2fa98:	mov	r0, r7
   2fa9c:	bl	2f754 <renameat2@@Base+0xa40>
   2faa0:	mov	r0, #0
   2faa4:	pop	{r4, r5, r6, r7, r8, pc}
   2faa8:	mov	r0, r7
   2faac:	bl	2f754 <renameat2@@Base+0xa40>
   2fab0:	cmp	r0, #0
   2fab4:	beq	2faa0 <renameat2@@Base+0xd8c>
   2fab8:	mov	r0, r4
   2fabc:	pop	{r4, r5, r6, r7, r8, pc}
   2fac0:	mov	r0, r5
   2fac4:	mov	r1, r2
   2fac8:	pop	{r4, r5, r6, r7, r8, lr}
   2facc:	b	11a24 <gmtime_r@plt>
   2fad0:	push	{r4, r5, r6, r7, lr}
   2fad4:	sub	sp, sp, #60	; 0x3c
   2fad8:	ldr	r5, [pc, #312]	; 2fc18 <renameat2@@Base+0xf04>
   2fadc:	subs	r7, r0, #0
   2fae0:	mov	r4, r1
   2fae4:	ldr	r3, [r5]
   2fae8:	str	r3, [sp, #52]	; 0x34
   2faec:	beq	2fc00 <renameat2@@Base+0xeec>
   2faf0:	bl	2f974 <renameat2@@Base+0xc60>
   2faf4:	subs	r6, r0, #0
   2faf8:	beq	2fc0c <renameat2@@Base+0xef8>
   2fafc:	mov	r0, r4
   2fb00:	bl	11a78 <mktime@plt>
   2fb04:	cmn	r0, #1
   2fb08:	str	r0, [sp, #4]
   2fb0c:	beq	2fb5c <renameat2@@Base+0xe48>
   2fb10:	mov	r1, r4
   2fb14:	mov	r0, r7
   2fb18:	bl	2f828 <renameat2@@Base+0xb14>
   2fb1c:	cmp	r0, #0
   2fb20:	mvneq	r3, #0
   2fb24:	streq	r3, [sp, #4]
   2fb28:	cmp	r6, #1
   2fb2c:	beq	2fb40 <renameat2@@Base+0xe2c>
   2fb30:	mov	r0, r6
   2fb34:	bl	2f754 <renameat2@@Base+0xa40>
   2fb38:	cmp	r0, #0
   2fb3c:	beq	2fc0c <renameat2@@Base+0xef8>
   2fb40:	ldr	r0, [sp, #4]
   2fb44:	ldr	r2, [sp, #52]	; 0x34
   2fb48:	ldr	r3, [r5]
   2fb4c:	cmp	r2, r3
   2fb50:	bne	2fc14 <renameat2@@Base+0xf00>
   2fb54:	add	sp, sp, #60	; 0x3c
   2fb58:	pop	{r4, r5, r6, r7, pc}
   2fb5c:	add	r1, sp, #8
   2fb60:	add	r0, sp, #4
   2fb64:	bl	11b98 <localtime_r@plt>
   2fb68:	cmp	r0, #0
   2fb6c:	beq	2fb28 <renameat2@@Base+0xe14>
   2fb70:	ldr	r0, [r4, #32]
   2fb74:	ldr	r1, [sp, #40]	; 0x28
   2fb78:	clz	r2, r0
   2fb7c:	clz	r3, r1
   2fb80:	lsr	r2, r2, #5
   2fb84:	lsr	r3, r3, #5
   2fb88:	cmp	r2, r3
   2fb8c:	beq	2fb9c <renameat2@@Base+0xe88>
   2fb90:	cmp	r0, #0
   2fb94:	cmpge	r1, #0
   2fb98:	bge	2fb28 <renameat2@@Base+0xe14>
   2fb9c:	ldr	r1, [sp, #24]
   2fba0:	ldr	r0, [sp, #28]
   2fba4:	ldr	r3, [r4, #16]
   2fba8:	ldr	r2, [r4, #20]
   2fbac:	eor	r3, r3, r1
   2fbb0:	eor	r2, r2, r0
   2fbb4:	ldr	r1, [r4, #12]
   2fbb8:	ldr	r0, [sp, #20]
   2fbbc:	orr	r3, r3, r2
   2fbc0:	eor	r1, r1, r0
   2fbc4:	ldr	r2, [r4, #8]
   2fbc8:	ldr	r0, [sp, #16]
   2fbcc:	orr	r3, r3, r1
   2fbd0:	eor	r2, r2, r0
   2fbd4:	ldr	r1, [r4, #4]
   2fbd8:	ldr	r0, [sp, #12]
   2fbdc:	orr	r3, r3, r2
   2fbe0:	eor	r1, r1, r0
   2fbe4:	ldr	r2, [r4]
   2fbe8:	ldr	r0, [sp, #8]
   2fbec:	orr	r3, r3, r1
   2fbf0:	eor	r2, r2, r0
   2fbf4:	orrs	r3, r3, r2
   2fbf8:	beq	2fb10 <renameat2@@Base+0xdfc>
   2fbfc:	b	2fb28 <renameat2@@Base+0xe14>
   2fc00:	mov	r0, r1
   2fc04:	bl	11ef8 <timegm@plt>
   2fc08:	b	2fb44 <renameat2@@Base+0xe30>
   2fc0c:	mvn	r0, #0
   2fc10:	b	2fb44 <renameat2@@Base+0xe30>
   2fc14:	bl	11b50 <__stack_chk_fail@plt>
   2fc18:	andeq	r7, r4, r8, lsl #30
   2fc1c:	push	{r4, r5, r6, lr}
   2fc20:	mov	r4, r1
   2fc24:	mov	r5, r0
   2fc28:	add	r0, r1, #1
   2fc2c:	bl	2f2ec <renameat2@@Base+0x5d8>
   2fc30:	mov	r2, r4
   2fc34:	mov	r1, r5
   2fc38:	bl	11afc <memcpy@plt>
   2fc3c:	mov	r2, #0
   2fc40:	strb	r2, [r0, r4]
   2fc44:	pop	{r4, r5, r6, pc}
   2fc48:	push	{r4, lr}
   2fc4c:	mov	r1, #0
   2fc50:	bl	11e80 <setlocale@plt>
   2fc54:	subs	r4, r0, #0
   2fc58:	beq	2fc84 <renameat2@@Base+0xf70>
   2fc5c:	ldr	r1, [pc, #40]	; 2fc8c <renameat2@@Base+0xf78>
   2fc60:	bl	11a48 <strcmp@plt>
   2fc64:	cmp	r0, #0
   2fc68:	popeq	{r4, pc}
   2fc6c:	mov	r0, r4
   2fc70:	ldr	r1, [pc, #24]	; 2fc90 <renameat2@@Base+0xf7c>
   2fc74:	bl	11a48 <strcmp@plt>
   2fc78:	adds	r0, r0, #0
   2fc7c:	movne	r0, #1
   2fc80:	pop	{r4, pc}
   2fc84:	mov	r0, #1
   2fc88:	pop	{r4, pc}
   2fc8c:	andeq	r6, r3, ip, asr #21
   2fc90:	andeq	r6, r3, r4, asr #30
   2fc94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fc98:	sub	sp, sp, #124	; 0x7c
   2fc9c:	ldr	r6, [pc, #912]	; 30034 <renameat2@@Base+0x1320>
   2fca0:	mov	r0, #14
   2fca4:	ldr	r7, [pc, #908]	; 30038 <renameat2@@Base+0x1324>
   2fca8:	ldr	r3, [r6]
   2fcac:	ldr	r5, [pc, #904]	; 3003c <renameat2@@Base+0x1328>
   2fcb0:	str	r3, [sp, #116]	; 0x74
   2fcb4:	bl	11eb0 <nl_langinfo@plt>
   2fcb8:	ldr	r4, [r7]
   2fcbc:	cmp	r0, #0
   2fcc0:	movne	r5, r0
   2fcc4:	cmp	r4, #0
   2fcc8:	beq	2fd6c <renameat2@@Base+0x1058>
   2fccc:	ldrb	r7, [r4]
   2fcd0:	cmp	r7, #0
   2fcd4:	bne	2fd08 <renameat2@@Base+0xff4>
   2fcd8:	b	2fd40 <renameat2@@Base+0x102c>
   2fcdc:	mov	r0, r4
   2fce0:	bl	11d78 <strlen@plt>
   2fce4:	add	r0, r0, #1
   2fce8:	add	r7, r4, r0
   2fcec:	mov	r0, r7
   2fcf0:	bl	11d78 <strlen@plt>
   2fcf4:	add	r0, r0, #1
   2fcf8:	add	r4, r7, r0
   2fcfc:	ldrb	r7, [r7, r0]
   2fd00:	cmp	r7, #0
   2fd04:	beq	2fd40 <renameat2@@Base+0x102c>
   2fd08:	mov	r1, r4
   2fd0c:	mov	r0, r5
   2fd10:	bl	11a48 <strcmp@plt>
   2fd14:	cmp	r0, #0
   2fd18:	beq	2fd30 <renameat2@@Base+0x101c>
   2fd1c:	cmp	r7, #42	; 0x2a
   2fd20:	bne	2fcdc <renameat2@@Base+0xfc8>
   2fd24:	ldrb	r3, [r4, #1]
   2fd28:	cmp	r3, #0
   2fd2c:	bne	2fcdc <renameat2@@Base+0xfc8>
   2fd30:	mov	r0, r4
   2fd34:	bl	11d78 <strlen@plt>
   2fd38:	add	r0, r0, #1
   2fd3c:	add	r5, r4, r0
   2fd40:	ldrb	r0, [r5]
   2fd44:	ldr	r2, [sp, #116]	; 0x74
   2fd48:	ldr	r1, [pc, #752]	; 30040 <renameat2@@Base+0x132c>
   2fd4c:	ldr	r3, [r6]
   2fd50:	cmp	r0, #0
   2fd54:	movne	r0, r5
   2fd58:	moveq	r0, r1
   2fd5c:	cmp	r2, r3
   2fd60:	bne	30030 <renameat2@@Base+0x131c>
   2fd64:	add	sp, sp, #124	; 0x7c
   2fd68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd6c:	ldr	r0, [pc, #720]	; 30044 <renameat2@@Base+0x1330>
   2fd70:	bl	11c94 <getenv@plt>
   2fd74:	subs	r8, r0, #0
   2fd78:	beq	2fde4 <renameat2@@Base+0x10d0>
   2fd7c:	ldrb	r3, [r8]
   2fd80:	cmp	r3, #0
   2fd84:	bne	2fdbc <renameat2@@Base+0x10a8>
   2fd88:	ldr	r8, [pc, #696]	; 30048 <renameat2@@Base+0x1334>
   2fd8c:	mov	r0, #43	; 0x2b
   2fd90:	mov	sl, #29
   2fd94:	mov	fp, #28
   2fd98:	bl	11cac <malloc@plt>
   2fd9c:	subs	r9, r0, #0
   2fda0:	beq	2fdd8 <renameat2@@Base+0x10c4>
   2fda4:	mov	r1, r8
   2fda8:	mov	r2, fp
   2fdac:	bl	11afc <memcpy@plt>
   2fdb0:	mov	r3, #47	; 0x2f
   2fdb4:	strb	r3, [r9, fp]
   2fdb8:	b	2fe04 <renameat2@@Base+0x10f0>
   2fdbc:	bl	11d78 <strlen@plt>
   2fdc0:	subs	sl, r0, #0
   2fdc4:	moveq	r0, #14
   2fdc8:	bne	2ffe0 <renameat2@@Base+0x12cc>
   2fdcc:	bl	11cac <malloc@plt>
   2fdd0:	subs	r9, r0, #0
   2fdd4:	bne	2fdf8 <renameat2@@Base+0x10e4>
   2fdd8:	ldr	r4, [pc, #604]	; 3003c <renameat2@@Base+0x1328>
   2fddc:	str	r4, [r7]
   2fde0:	b	2fccc <renameat2@@Base+0xfb8>
   2fde4:	mov	r0, #43	; 0x2b
   2fde8:	mov	sl, #29
   2fdec:	mov	fp, #28
   2fdf0:	ldr	r8, [pc, #592]	; 30048 <renameat2@@Base+0x1334>
   2fdf4:	b	2fd98 <renameat2@@Base+0x1084>
   2fdf8:	mov	r1, r8
   2fdfc:	mov	r2, sl
   2fe00:	bl	11afc <memcpy@plt>
   2fe04:	ldr	r3, [pc, #576]	; 3004c <renameat2@@Base+0x1338>
   2fe08:	add	ip, r9, sl
   2fe0c:	ldm	r3!, {r0, r1, r2}
   2fe10:	ldrh	r3, [r3]
   2fe14:	str	r0, [r9, sl]
   2fe18:	str	r1, [ip, #4]
   2fe1c:	strh	r3, [ip, #12]
   2fe20:	str	r2, [ip, #8]
   2fe24:	mov	r1, #32768	; 0x8000
   2fe28:	mov	r0, r9
   2fe2c:	bl	11c88 <open64@plt>
   2fe30:	subs	sl, r0, #0
   2fe34:	bge	2fe48 <renameat2@@Base+0x1134>
   2fe38:	ldr	r4, [pc, #508]	; 3003c <renameat2@@Base+0x1328>
   2fe3c:	mov	r0, r9
   2fe40:	bl	11ab4 <free@plt>
   2fe44:	b	2fddc <renameat2@@Base+0x10c8>
   2fe48:	ldr	r1, [pc, #512]	; 30050 <renameat2@@Base+0x133c>
   2fe4c:	bl	11a00 <fdopen@plt>
   2fe50:	subs	r8, r0, #0
   2fe54:	movne	fp, #0
   2fe58:	strne	r9, [sp]
   2fe5c:	strne	r5, [sp, #4]
   2fe60:	beq	30004 <renameat2@@Base+0x12f0>
   2fe64:	ldr	r3, [r8, #4]
   2fe68:	ldr	r2, [r8, #8]
   2fe6c:	cmp	r3, r2
   2fe70:	bcs	2ff3c <renameat2@@Base+0x1228>
   2fe74:	add	r2, r3, #1
   2fe78:	str	r2, [r8, #4]
   2fe7c:	ldrb	r0, [r3]
   2fe80:	sub	r3, r0, #9
   2fe84:	cmp	r0, #32
   2fe88:	cmpne	r3, #1
   2fe8c:	bls	2fe64 <renameat2@@Base+0x1150>
   2fe90:	cmp	r0, #35	; 0x23
   2fe94:	beq	2ff50 <renameat2@@Base+0x123c>
   2fe98:	mov	r1, r8
   2fe9c:	bl	11da8 <ungetc@plt>
   2fea0:	add	r3, sp, #64	; 0x40
   2fea4:	add	r2, sp, #12
   2fea8:	ldr	r1, [pc, #420]	; 30054 <renameat2@@Base+0x1340>
   2feac:	mov	r0, r8
   2feb0:	bl	11e08 <fscanf@plt>
   2feb4:	cmp	r0, #1
   2feb8:	ble	2ff8c <renameat2@@Base+0x1278>
   2febc:	add	r0, sp, #12
   2fec0:	bl	11d78 <strlen@plt>
   2fec4:	mov	sl, r0
   2fec8:	add	r0, sp, #64	; 0x40
   2fecc:	bl	11d78 <strlen@plt>
   2fed0:	cmp	fp, #0
   2fed4:	mov	r9, r0
   2fed8:	add	r3, sl, r0
   2fedc:	bne	2ffb0 <renameat2@@Base+0x129c>
   2fee0:	add	r0, r3, #3
   2fee4:	add	fp, r3, #2
   2fee8:	bl	11cac <malloc@plt>
   2feec:	mov	r5, r0
   2fef0:	cmp	r5, #0
   2fef4:	beq	30010 <renameat2@@Base+0x12fc>
   2fef8:	sub	r4, fp, r9
   2fefc:	sub	r0, r4, sl
   2ff00:	sub	r0, r0, #2
   2ff04:	add	r1, sp, #12
   2ff08:	add	r2, sl, #1
   2ff0c:	add	r0, r5, r0
   2ff10:	bl	11afc <memcpy@plt>
   2ff14:	sub	r0, r4, #1
   2ff18:	add	r2, r9, #1
   2ff1c:	add	r0, r5, r0
   2ff20:	add	r1, sp, #64	; 0x40
   2ff24:	bl	11afc <memcpy@plt>
   2ff28:	ldr	r3, [r8, #4]
   2ff2c:	ldr	r2, [r8, #8]
   2ff30:	mov	r4, r5
   2ff34:	cmp	r3, r2
   2ff38:	bcc	2fe74 <renameat2@@Base+0x1160>
   2ff3c:	mov	r0, r8
   2ff40:	bl	11e74 <__uflow@plt>
   2ff44:	cmn	r0, #1
   2ff48:	bne	2fe80 <renameat2@@Base+0x116c>
   2ff4c:	b	2ff8c <renameat2@@Base+0x1278>
   2ff50:	ldr	r3, [r8, #4]
   2ff54:	ldr	r2, [r8, #8]
   2ff58:	cmp	r3, r2
   2ff5c:	bcs	2ffcc <renameat2@@Base+0x12b8>
   2ff60:	add	r2, r3, #1
   2ff64:	str	r2, [r8, #4]
   2ff68:	ldrb	r0, [r3]
   2ff6c:	mov	r3, #1
   2ff70:	cmp	r0, #10
   2ff74:	moveq	r3, #0
   2ff78:	andne	r3, r3, #1
   2ff7c:	cmp	r3, #0
   2ff80:	bne	2ff50 <renameat2@@Base+0x123c>
   2ff84:	cmn	r0, #1
   2ff88:	bne	2fe64 <renameat2@@Base+0x1150>
   2ff8c:	mov	r0, r8
   2ff90:	ldr	r9, [sp]
   2ff94:	ldr	r5, [sp, #4]
   2ff98:	bl	11e5c <fclose@plt>
   2ff9c:	cmp	fp, #0
   2ffa0:	beq	2fe38 <renameat2@@Base+0x1124>
   2ffa4:	mov	r3, #0
   2ffa8:	strb	r3, [r4, fp]
   2ffac:	b	2fe3c <renameat2@@Base+0x1128>
   2ffb0:	add	fp, fp, r3
   2ffb4:	add	r1, fp, #3
   2ffb8:	mov	r0, r4
   2ffbc:	bl	11b80 <realloc@plt>
   2ffc0:	add	fp, fp, #2
   2ffc4:	mov	r5, r0
   2ffc8:	b	2fef0 <renameat2@@Base+0x11dc>
   2ffcc:	mov	r0, r8
   2ffd0:	bl	11e74 <__uflow@plt>
   2ffd4:	adds	r3, r0, #1
   2ffd8:	movne	r3, #1
   2ffdc:	b	2ff70 <renameat2@@Base+0x125c>
   2ffe0:	add	r3, r8, sl
   2ffe4:	ldrb	r3, [r3, #-1]
   2ffe8:	cmp	r3, #47	; 0x2f
   2ffec:	addne	r0, sl, #15
   2fff0:	movne	fp, sl
   2fff4:	addne	sl, sl, #1
   2fff8:	bne	2fd98 <renameat2@@Base+0x1084>
   2fffc:	add	r0, sl, #14
   30000:	b	2fdcc <renameat2@@Base+0x10b8>
   30004:	mov	r0, sl
   30008:	bl	11fb8 <close@plt>
   3000c:	b	2fe38 <renameat2@@Base+0x1124>
   30010:	mov	r0, r4
   30014:	ldr	r9, [sp]
   30018:	ldr	r5, [sp, #4]
   3001c:	bl	11ab4 <free@plt>
   30020:	mov	r0, r8
   30024:	bl	11e5c <fclose@plt>
   30028:	ldr	r4, [pc, #12]	; 3003c <renameat2@@Base+0x1328>
   3002c:	b	2fe3c <renameat2@@Base+0x1128>
   30030:	bl	11b50 <__stack_chk_fail@plt>
   30034:	andeq	r7, r4, r8, lsl #30
   30038:	andeq	sl, r4, ip, lsr #13
   3003c:	strdeq	r5, [r3], -r8
   30040:	andeq	r6, r3, ip, asr #30
   30044:	andeq	r6, r3, r4, ror pc
   30048:	andeq	r6, r3, r4, asr pc
   3004c:	andeq	r6, r3, r4, lsl #31
   30050:	strdeq	r3, [r3], -r0
   30054:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   30058:	push	{r4, r5, r6, lr}
   3005c:	subs	r4, r2, #0
   30060:	mov	r6, r0
   30064:	beq	30090 <renameat2@@Base+0x137c>
   30068:	mov	r5, r1
   3006c:	bl	11d0c <__ctype_tolower_loc@plt>
   30070:	add	r3, r5, r4
   30074:	add	r2, r6, r4
   30078:	ldrb	lr, [r3, #-1]!
   3007c:	ldr	ip, [r0]
   30080:	cmp	r5, r3
   30084:	ldr	ip, [ip, lr, lsl #2]
   30088:	strb	ip, [r2, #-1]!
   3008c:	bne	30078 <renameat2@@Base+0x1364>
   30090:	mov	r0, r6
   30094:	pop	{r4, r5, r6, pc}
   30098:	push	{r4, r5, r6, lr}
   3009c:	subs	r4, r2, #0
   300a0:	mov	r6, r0
   300a4:	beq	300d0 <renameat2@@Base+0x13bc>
   300a8:	mov	r5, r1
   300ac:	bl	11d18 <__ctype_toupper_loc@plt>
   300b0:	add	r3, r5, r4
   300b4:	add	r2, r6, r4
   300b8:	ldrb	lr, [r3, #-1]!
   300bc:	ldr	ip, [r0]
   300c0:	cmp	r5, r3
   300c4:	ldr	ip, [ip, lr, lsl #2]
   300c8:	strb	ip, [r2, #-1]!
   300cc:	bne	300b8 <renameat2@@Base+0x13a4>
   300d0:	mov	r0, r6
   300d4:	pop	{r4, r5, r6, pc}
   300d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   300dc:	sub	sp, sp, #1136	; 0x470
   300e0:	sub	sp, sp, #12
   300e4:	ldr	r7, [r3, #40]	; 0x28
   300e8:	ldr	r8, [r3, #8]
   300ec:	str	r3, [sp, #28]
   300f0:	ldr	r3, [pc, #4012]	; 310a4 <renameat2@@Base+0x2390>
   300f4:	ldr	ip, [pc, #4012]	; 310a8 <renameat2@@Base+0x2394>
   300f8:	cmp	r7, #0
   300fc:	ldr	r3, [r3]
   30100:	moveq	r7, ip
   30104:	str	r3, [sp, #1140]	; 0x474
   30108:	ldrb	r3, [sp, #1184]	; 0x4a0
   3010c:	cmp	r8, #12
   30110:	mov	r9, r0
   30114:	str	r3, [sp, #24]
   30118:	ldr	r3, [sp, #1188]	; 0x4a4
   3011c:	str	r1, [sp, #16]
   30120:	str	r3, [sp, #36]	; 0x24
   30124:	ldr	r3, [sp, #1192]	; 0x4a8
   30128:	mov	r5, r2
   3012c:	str	r3, [sp, #32]
   30130:	subgt	r8, r8, #12
   30134:	bgt	30140 <renameat2@@Base+0x142c>
   30138:	cmp	r8, #0
   3013c:	moveq	r8, #12
   30140:	ldrb	r3, [r5]
   30144:	cmp	r3, #0
   30148:	beq	31444 <renameat2@@Base+0x2730>
   3014c:	mov	fp, #0
   30150:	str	r8, [sp, #44]	; 0x2c
   30154:	str	r7, [sp, #40]	; 0x28
   30158:	cmp	r3, #37	; 0x25
   3015c:	beq	301dc <renameat2@@Base+0x14c8>
   30160:	ldr	r2, [sp, #16]
   30164:	sub	r2, r2, fp
   30168:	cmp	r2, #1
   3016c:	bls	301b4 <renameat2@@Base+0x14a0>
   30170:	add	fp, fp, #1
   30174:	cmp	r9, #0
   30178:	strbne	r3, [r9], #1
   3017c:	ldrb	r3, [r5, #1]
   30180:	add	r5, r5, #1
   30184:	cmp	r3, #0
   30188:	bne	30158 <renameat2@@Base+0x1444>
   3018c:	ldr	r3, [sp, #16]
   30190:	cmp	r9, #0
   30194:	cmpne	r3, #0
   30198:	movne	r3, #0
   3019c:	strbne	r3, [r9]
   301a0:	b	301b8 <renameat2@@Base+0x14a4>
   301a4:	cmp	sl, #95	; 0x5f
   301a8:	beq	314d0 <renameat2@@Base+0x27bc>
   301ac:	cmp	r3, r2
   301b0:	bcc	30cf8 <renameat2@@Base+0x1fe4>
   301b4:	mov	fp, #0
   301b8:	ldr	r3, [pc, #3812]	; 310a4 <renameat2@@Base+0x2390>
   301bc:	ldr	r2, [sp, #1140]	; 0x474
   301c0:	mov	r0, fp
   301c4:	ldr	r3, [r3]
   301c8:	cmp	r2, r3
   301cc:	bne	317dc <renameat2@@Base+0x2ac8>
   301d0:	add	sp, sp, #1136	; 0x470
   301d4:	add	sp, sp, #12
   301d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   301dc:	mov	r8, #0
   301e0:	ldr	r3, [sp, #24]
   301e4:	mov	sl, r8
   301e8:	str	r3, [sp, #20]
   301ec:	ldrb	r4, [r5, #1]!
   301f0:	cmp	r4, #48	; 0x30
   301f4:	mov	r7, r4
   301f8:	beq	30448 <renameat2@@Base+0x1734>
   301fc:	bhi	30430 <renameat2@@Base+0x171c>
   30200:	cmp	r4, #35	; 0x23
   30204:	moveq	r8, #1
   30208:	beq	301ec <renameat2@@Base+0x14d8>
   3020c:	cmp	r4, #45	; 0x2d
   30210:	beq	30448 <renameat2@@Base+0x1734>
   30214:	sub	r3, r4, #48	; 0x30
   30218:	cmp	r3, #9
   3021c:	mvnhi	r6, #0
   30220:	bls	3045c <renameat2@@Base+0x1748>
   30224:	cmp	r4, #69	; 0x45
   30228:	beq	30450 <renameat2@@Base+0x173c>
   3022c:	cmp	r4, #79	; 0x4f
   30230:	movne	r7, #0
   30234:	beq	30450 <renameat2@@Base+0x173c>
   30238:	cmp	r4, #122	; 0x7a
   3023c:	ldrls	pc, [pc, r4, lsl #2]
   30240:	b	30818 <renameat2@@Base+0x1b04>
   30244:	andeq	r1, r3, r8, lsl r0
   30248:	andeq	r0, r3, r8, lsl r8
   3024c:	andeq	r0, r3, r8, lsl r8
   30250:	andeq	r0, r3, r8, lsl r8
   30254:	andeq	r0, r3, r8, lsl r8
   30258:	andeq	r0, r3, r8, lsl r8
   3025c:	andeq	r0, r3, r8, lsl r8
   30260:	andeq	r0, r3, r8, lsl r8
   30264:	andeq	r0, r3, r8, lsl r8
   30268:	andeq	r0, r3, r8, lsl r8
   3026c:	andeq	r0, r3, r8, lsl r8
   30270:	andeq	r0, r3, r8, lsl r8
   30274:	andeq	r0, r3, r8, lsl r8
   30278:	andeq	r0, r3, r8, lsl r8
   3027c:	andeq	r0, r3, r8, lsl r8
   30280:	andeq	r0, r3, r8, lsl r8
   30284:	andeq	r0, r3, r8, lsl r8
   30288:	andeq	r0, r3, r8, lsl r8
   3028c:	andeq	r0, r3, r8, lsl r8
   30290:	andeq	r0, r3, r8, lsl r8
   30294:	andeq	r0, r3, r8, lsl r8
   30298:	andeq	r0, r3, r8, lsl r8
   3029c:	andeq	r0, r3, r8, lsl r8
   302a0:	andeq	r0, r3, r8, lsl r8
   302a4:	andeq	r0, r3, r8, lsl r8
   302a8:	andeq	r0, r3, r8, lsl r8
   302ac:	andeq	r0, r3, r8, lsl r8
   302b0:	andeq	r0, r3, r8, lsl r8
   302b4:	andeq	r0, r3, r8, lsl r8
   302b8:	andeq	r0, r3, r8, lsl r8
   302bc:	andeq	r0, r3, r8, lsl r8
   302c0:	andeq	r0, r3, r8, lsl r8
   302c4:	andeq	r0, r3, r8, lsl r8
   302c8:	andeq	r0, r3, r8, lsl r8
   302cc:	andeq	r0, r3, r8, lsl r8
   302d0:	andeq	r0, r3, r8, lsl r8
   302d4:	andeq	r0, r3, r8, lsl r8
   302d8:	andeq	r1, r3, ip, asr #4
   302dc:	andeq	r0, r3, r8, lsl r8
   302e0:	andeq	r0, r3, r8, lsl r8
   302e4:	andeq	r0, r3, r8, lsl r8
   302e8:	andeq	r0, r3, r8, lsl r8
   302ec:	andeq	r0, r3, r8, lsl r8
   302f0:	andeq	r0, r3, r8, lsl r8
   302f4:	andeq	r0, r3, r8, lsl r8
   302f8:	andeq	r0, r3, r8, lsl r8
   302fc:	andeq	r0, r3, r8, lsl r8
   30300:	andeq	r0, r3, r8, lsl r8
   30304:	andeq	r0, r3, r8, lsl r8
   30308:	andeq	r0, r3, r8, lsl r8
   3030c:	andeq	r0, r3, r8, lsl r8
   30310:	andeq	r0, r3, r8, lsl r8
   30314:	andeq	r0, r3, r8, lsl r8
   30318:	andeq	r0, r3, r8, lsl r8
   3031c:	andeq	r0, r3, r8, lsl r8
   30320:	andeq	r0, r3, r8, lsl r8
   30324:	andeq	r0, r3, r8, lsl r8
   30328:	andeq	r0, r3, r8, lsl r8
   3032c:			; <UNDEFINED> instruction: 0x000312b0
   30330:	andeq	r0, r3, r8, lsl r8
   30334:	andeq	r0, r3, r8, lsl r8
   30338:	andeq	r0, r3, r8, lsl r8
   3033c:	andeq	r0, r3, r8, lsl r8
   30340:	andeq	r0, r3, r8, lsl r8
   30344:	andeq	r0, r3, r8, lsl r8
   30348:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3034c:	andeq	r1, r3, r0, ror r1
   30350:	muleq	r3, r4, r1
   30354:	andeq	r0, r3, r0, lsr lr
   30358:	andeq	r0, r3, r8, lsl r8
   3035c:	andeq	r0, r3, r4, asr #28
   30360:	andeq	r0, r3, r8, asr lr
   30364:	andeq	r0, r3, r0, asr #31
   30368:	andeq	r1, r3, ip, asr #32
   3036c:	andeq	r0, r3, r8, lsl r8
   30370:	andeq	r0, r3, r8, lsl r8
   30374:	andeq	r0, r3, r8, lsl r8
   30378:	ldrdeq	r0, [r3], -ip
   3037c:	strdeq	r0, [r3], -r8
   30380:	andeq	r0, r3, r8, lsl r8
   30384:	ldrdeq	r1, [r3], -r8
   30388:	andeq	r0, r3, r8, lsl r8
   3038c:	andeq	r0, r3, ip, asr #20
   30390:	andeq	r0, r3, ip, lsl fp
   30394:	andeq	r1, r3, r4, ror #5
   30398:	andeq	r0, r3, r8, lsr fp
   3039c:	andeq	r0, r3, r8, asr lr
   303a0:	ldrdeq	r0, [r3], -ip
   303a4:	andeq	r0, r3, ip, asr #9
   303a8:	andeq	r0, r3, r0, ror fp
   303ac:	andeq	r0, r3, ip, lsr sp
   303b0:	andeq	r0, r3, r8, lsl r8
   303b4:	andeq	r0, r3, r8, lsl r8
   303b8:	andeq	r0, r3, r8, lsl r8
   303bc:	andeq	r0, r3, r8, lsl r8
   303c0:	andeq	r0, r3, r8, lsl r8
   303c4:	andeq	r0, r3, r8, lsl r8
   303c8:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   303cc:	andeq	r0, r3, r0, lsl #16
   303d0:	andeq	r0, r3, ip, asr #9
   303d4:			; <UNDEFINED> instruction: 0x000309b0
   303d8:	andeq	r0, r3, ip, asr #19
   303dc:	andeq	r0, r3, r8, lsl r8
   303e0:	andeq	r0, r3, r8, asr lr
   303e4:	andeq	r0, r3, r0, lsl #16
   303e8:	andeq	r0, r3, r8, lsl r8
   303ec:	strdeq	r0, [r3], -r4
   303f0:	andeq	r0, r3, r8, lsr #20
   303f4:	andeq	r0, r3, ip, lsr sl
   303f8:	andeq	r1, r3, r8, lsl r2
   303fc:	andeq	r0, r3, r0, asr r9
   30400:	andeq	r0, r3, r8, lsl r8
   30404:	andeq	r1, r3, r4, asr #2
   30408:	andeq	r1, r3, r4, rrx
   3040c:	ldrdeq	r0, [r3], -r4
   30410:	andeq	r0, r3, r0, lsl #13
   30414:	andeq	r1, r3, r8, ror #1
   30418:	andeq	r0, r3, r4, lsl #12
   3041c:	andeq	r0, r3, r8, lsl r8
   30420:	strdeq	r1, [r3], -ip
   30424:	andeq	r0, r3, ip, asr #9
   30428:	andeq	r0, r3, r4, asr #15
   3042c:	andeq	r0, r3, ip, lsr #17
   30430:	cmp	r4, #94	; 0x5e
   30434:	moveq	r3, #1
   30438:	streq	r3, [sp, #20]
   3043c:	beq	301ec <renameat2@@Base+0x14d8>
   30440:	cmp	r4, #95	; 0x5f
   30444:	bne	30214 <renameat2@@Base+0x1500>
   30448:	mov	sl, r4
   3044c:	b	301ec <renameat2@@Base+0x14d8>
   30450:	ldrb	r4, [r5, #1]
   30454:	add	r5, r5, #1
   30458:	b	30238 <renameat2@@Base+0x1524>
   3045c:	ldr	r0, [pc, #3144]	; 310ac <renameat2@@Base+0x2398>
   30460:	mov	r6, #0
   30464:	mov	r3, r5
   30468:	cmp	r6, r0
   3046c:	ldrb	r4, [r3, #1]!
   30470:	sub	r2, r4, #48	; 0x30
   30474:	bgt	304a8 <renameat2@@Base+0x1794>
   30478:	ldrb	r1, [r5]
   3047c:	beq	304a0 <renameat2@@Base+0x178c>
   30480:	add	r6, r6, r6, lsl #2
   30484:	sub	r1, r1, #48	; 0x30
   30488:	add	r6, r1, r6, lsl #1
   3048c:	mov	r5, r3
   30490:	cmp	r2, #9
   30494:	bls	30464 <renameat2@@Base+0x1750>
   30498:	mov	r7, r4
   3049c:	b	30224 <renameat2@@Base+0x1510>
   304a0:	cmp	r1, #55	; 0x37
   304a4:	bls	30480 <renameat2@@Base+0x176c>
   304a8:	cmp	r2, #9
   304ac:	ldrbls	r4, [r5, #2]!
   304b0:	mvnls	r6, #-2147483648	; 0x80000000
   304b4:	subls	r2, r4, #48	; 0x30
   304b8:	bls	30490 <renameat2@@Base+0x177c>
   304bc:	mov	r5, r3
   304c0:	mov	r7, r4
   304c4:	mvn	r6, #-2147483648	; 0x80000000
   304c8:	b	30224 <renameat2@@Base+0x1510>
   304cc:	cmp	r7, #79	; 0x4f
   304d0:	beq	30818 <renameat2@@Base+0x1b04>
   304d4:	mov	r3, #0
   304d8:	str	r3, [sp, #52]	; 0x34
   304dc:	add	r8, sp, #120	; 0x78
   304e0:	ldr	r3, [pc, #3016]	; 310b0 <renameat2@@Base+0x239c>
   304e4:	cmp	r7, #0
   304e8:	strh	r3, [r8, #-12]
   304ec:	subeq	r0, r8, #10
   304f0:	bne	317e0 <renameat2@@Base+0x2acc>
   304f4:	mov	ip, #0
   304f8:	strb	r4, [r0]
   304fc:	strb	ip, [r0, #1]
   30500:	ldr	r3, [sp, #28]
   30504:	sub	r2, r8, #12
   30508:	mov	r1, #1024	; 0x400
   3050c:	sub	r0, r8, #4
   30510:	bl	11ce8 <strftime@plt>
   30514:	cmp	r0, #0
   30518:	beq	3017c <renameat2@@Base+0x1468>
   3051c:	bic	r2, r6, r6, asr #31
   30520:	sub	r4, r0, #1
   30524:	ldr	r1, [sp, #16]
   30528:	cmp	r4, r2
   3052c:	movcs	r3, r4
   30530:	movcc	r3, r2
   30534:	sub	r1, r1, fp
   30538:	cmp	r1, r3
   3053c:	bls	301b4 <renameat2@@Base+0x14a0>
   30540:	cmp	r9, #0
   30544:	beq	305c8 <renameat2@@Base+0x18b4>
   30548:	cmp	r4, r2
   3054c:	movcs	r2, #0
   30550:	movcc	r2, #1
   30554:	cmp	r7, #0
   30558:	moveq	r7, r2
   3055c:	movne	r7, #0
   30560:	cmp	r7, #0
   30564:	beq	30594 <renameat2@@Base+0x1880>
   30568:	cmp	sl, #48	; 0x30
   3056c:	sub	r2, r6, r4
   30570:	moveq	r0, r9
   30574:	movne	r0, r9
   30578:	moveq	r1, sl
   3057c:	movne	r1, #32
   30580:	str	r3, [sp, #48]	; 0x30
   30584:	add	r7, r9, r2
   30588:	bl	11df0 <memset@plt>
   3058c:	ldr	r3, [sp, #48]	; 0x30
   30590:	mov	r9, r7
   30594:	ldr	r2, [sp, #52]	; 0x34
   30598:	cmp	r2, #0
   3059c:	bne	31428 <renameat2@@Base+0x2714>
   305a0:	ldr	r2, [sp, #20]
   305a4:	sub	r1, r8, #3
   305a8:	cmp	r2, #0
   305ac:	str	r3, [sp, #20]
   305b0:	mov	r2, r4
   305b4:	mov	r0, r9
   305b8:	beq	3141c <renameat2@@Base+0x2708>
   305bc:	bl	30098 <renameat2@@Base+0x1384>
   305c0:	ldr	r3, [sp, #20]
   305c4:	add	r9, r9, r4
   305c8:	add	fp, fp, r3
   305cc:	b	3017c <renameat2@@Base+0x1468>
   305d0:	cmp	r7, #0
   305d4:	bne	30818 <renameat2@@Base+0x1b04>
   305d8:	cmp	r8, #0
   305dc:	ldr	r3, [sp, #20]
   305e0:	movne	r3, r8
   305e4:	str	r3, [sp, #20]
   305e8:	add	r8, sp, #120	; 0x78
   305ec:	ldr	r3, [pc, #2748]	; 310b0 <renameat2@@Base+0x239c>
   305f0:	mov	r7, #0
   305f4:	str	r7, [sp, #52]	; 0x34
   305f8:	strh	r3, [r8, #-12]
   305fc:	sub	r0, r8, #10
   30600:	b	304f4 <renameat2@@Base+0x17e0>
   30604:	ldr	r3, [sp, #28]
   30608:	mov	r2, #1
   3060c:	str	r2, [sp, #48]	; 0x30
   30610:	ldr	r3, [r3, #24]
   30614:	ldr	r2, [pc, #2756]	; 310e0 <renameat2@@Base+0x23cc>
   30618:	add	r3, r3, #6
   3061c:	smull	r1, r2, r2, r3
   30620:	add	r1, r2, r3
   30624:	asr	r2, r3, #31
   30628:	rsb	r2, r2, r1, asr #2
   3062c:	rsb	r2, r2, r2, lsl #3
   30630:	sub	r3, r3, r2
   30634:	add	r3, r3, #1
   30638:	lsr	lr, r3, #31
   3063c:	mov	r0, #0
   30640:	str	r0, [sp, #52]	; 0x34
   30644:	eor	r2, lr, #1
   30648:	cmp	r7, #79	; 0x4f
   3064c:	movne	r2, #0
   30650:	andeq	r2, r2, #1
   30654:	cmp	r2, #0
   30658:	beq	30bb0 <renameat2@@Base+0x1e9c>
   3065c:	add	r8, sp, #120	; 0x78
   30660:	ldr	r3, [pc, #2632]	; 310b0 <renameat2@@Base+0x239c>
   30664:	mov	r2, #0
   30668:	str	r2, [sp, #52]	; 0x34
   3066c:	strh	r3, [r8, #-12]
   30670:	strb	r7, [sp, #110]	; 0x6e
   30674:	sub	r0, r8, #9
   30678:	ldr	r7, [sp, #48]	; 0x30
   3067c:	b	304f4 <renameat2@@Base+0x17e0>
   30680:	ldr	lr, [sp, #28]
   30684:	add	ip, sp, #64	; 0x40
   30688:	add	r8, sp, #120	; 0x78
   3068c:	ldm	lr!, {r0, r1, r2, r3}
   30690:	add	r4, r8, #10
   30694:	stmia	ip!, {r0, r1, r2, r3}
   30698:	ldm	lr!, {r0, r1, r2, r3}
   3069c:	stmia	ip!, {r0, r1, r2, r3}
   306a0:	ldm	lr, {r0, r1, r2}
   306a4:	stm	ip, {r0, r1, r2}
   306a8:	add	r1, sp, #64	; 0x40
   306ac:	ldr	r0, [sp, #32]
   306b0:	bl	2fad0 <renameat2@@Base+0xdbc>
   306b4:	mov	r1, r0
   306b8:	ldr	r3, [pc, #2588]	; 310dc <renameat2@@Base+0x23c8>
   306bc:	cmp	r0, #0
   306c0:	smull	r2, r3, r3, r1
   306c4:	asr	r2, r1, #31
   306c8:	rsb	r2, r2, r3, asr #2
   306cc:	add	r3, r2, r2, lsl #2
   306d0:	sub	r3, r1, r3, lsl #1
   306d4:	mov	r1, r2
   306d8:	uxtb	r3, r3
   306dc:	rsblt	r3, r3, #48	; 0x30
   306e0:	addge	r3, r3, #48	; 0x30
   306e4:	cmp	r2, #0
   306e8:	uxtb	r3, r3
   306ec:	strb	r3, [r4, #-1]!
   306f0:	bne	306b8 <renameat2@@Base+0x19a4>
   306f4:	cmp	r6, #1
   306f8:	movge	r3, r6
   306fc:	movlt	r3, #1
   30700:	cmp	r0, #0
   30704:	blt	31394 <renameat2@@Base+0x2680>
   30708:	ldr	r2, [sp, #16]
   3070c:	add	r7, r8, #10
   30710:	cmp	sl, #45	; 0x2d
   30714:	sub	r7, r7, r4
   30718:	sub	r2, r2, fp
   3071c:	beq	30730 <renameat2@@Base+0x1a1c>
   30720:	sub	r1, r3, r7
   30724:	cmp	r1, #0
   30728:	str	r1, [sp, #48]	; 0x30
   3072c:	bgt	301a4 <renameat2@@Base+0x1490>
   30730:	bic	r1, r6, r6, asr #31
   30734:	str	r1, [sp, #48]	; 0x30
   30738:	ldr	r1, [sp, #48]	; 0x30
   3073c:	cmp	r7, r1
   30740:	movcs	r8, r7
   30744:	movcc	r8, r1
   30748:	cmp	r8, r2
   3074c:	bcs	301b4 <renameat2@@Base+0x14a0>
   30750:	cmp	r9, #0
   30754:	beq	307bc <renameat2@@Base+0x1aa8>
   30758:	cmp	r7, r1
   3075c:	movcs	r2, #0
   30760:	movcc	r2, #1
   30764:	cmp	r3, #0
   30768:	moveq	r3, r2
   3076c:	movne	r3, #0
   30770:	cmp	r3, #0
   30774:	beq	3079c <renameat2@@Base+0x1a88>
   30778:	cmp	sl, #48	; 0x30
   3077c:	sub	r2, r6, r7
   30780:	moveq	r0, r9
   30784:	movne	r0, r9
   30788:	moveq	r1, sl
   3078c:	movne	r1, #32
   30790:	add	r6, r9, r2
   30794:	bl	11df0 <memset@plt>
   30798:	mov	r9, r6
   3079c:	ldr	r3, [sp, #20]
   307a0:	mov	r1, r4
   307a4:	cmp	r3, #0
   307a8:	mov	r2, r7
   307ac:	mov	r0, r9
   307b0:	beq	3140c <renameat2@@Base+0x26f8>
   307b4:	bl	30098 <renameat2@@Base+0x1384>
   307b8:	add	r9, r9, r7
   307bc:	add	fp, fp, r8
   307c0:	b	3017c <renameat2@@Base+0x1468>
   307c4:	cmp	r7, #69	; 0x45
   307c8:	beq	31544 <renameat2@@Base+0x2830>
   307cc:	ldr	r3, [sp, #28]
   307d0:	ldr	r2, [r3, #20]
   307d4:	ldr	r3, [pc, #2292]	; 310d0 <renameat2@@Base+0x23bc>
   307d8:	smull	r3, r1, r3, r2
   307dc:	asr	r3, r2, #31
   307e0:	rsb	r3, r3, r1, asr #5
   307e4:	add	r3, r3, r3, lsl #2
   307e8:	add	r3, r3, r3, lsl #2
   307ec:	subs	r3, r2, r3, lsl #2
   307f0:	bmi	31704 <renameat2@@Base+0x29f0>
   307f4:	mov	r2, #2
   307f8:	str	r2, [sp, #48]	; 0x30
   307fc:	b	30638 <renameat2@@Base+0x1924>
   30800:	cmp	r8, #0
   30804:	ldr	r3, [sp, #20]
   30808:	movne	r3, r8
   3080c:	cmp	r7, #69	; 0x45
   30810:	str	r3, [sp, #20]
   30814:	bne	304d4 <renameat2@@Base+0x17c0>
   30818:	sub	r3, r5, #1
   3081c:	add	r1, r5, #1
   30820:	mov	r7, r3
   30824:	sub	r4, r1, r3
   30828:	ldrb	r2, [r3], #-1
   3082c:	cmp	r2, #37	; 0x25
   30830:	bne	30820 <renameat2@@Base+0x1b0c>
   30834:	bic	r3, r6, r6, asr #31
   30838:	ldr	r2, [sp, #16]
   3083c:	cmp	r3, r4
   30840:	movcs	r8, r3
   30844:	movcc	r8, r4
   30848:	sub	r2, r2, fp
   3084c:	cmp	r8, r2
   30850:	bcs	301b4 <renameat2@@Base+0x14a0>
   30854:	cmp	r9, #0
   30858:	beq	307bc <renameat2@@Base+0x1aa8>
   3085c:	cmp	r3, r4
   30860:	bls	30888 <renameat2@@Base+0x1b74>
   30864:	cmp	sl, #48	; 0x30
   30868:	sub	r2, r6, r4
   3086c:	moveq	r0, r9
   30870:	movne	r0, r9
   30874:	moveq	r1, sl
   30878:	movne	r1, #32
   3087c:	add	r6, r9, r2
   30880:	bl	11df0 <memset@plt>
   30884:	mov	r9, r6
   30888:	ldr	r3, [sp, #20]
   3088c:	mov	r1, r7
   30890:	cmp	r3, #0
   30894:	mov	r2, r4
   30898:	mov	r0, r9
   3089c:	beq	31414 <renameat2@@Base+0x2700>
   308a0:	bl	30098 <renameat2@@Base+0x1384>
   308a4:	add	r9, r9, r4
   308a8:	b	307bc <renameat2@@Base+0x1aa8>
   308ac:	mov	r3, #0
   308b0:	str	r3, [sp, #48]	; 0x30
   308b4:	ldr	r2, [sp, #28]
   308b8:	ldr	r3, [r2, #32]
   308bc:	cmp	r3, #0
   308c0:	blt	3017c <renameat2@@Base+0x1468>
   308c4:	ldr	r1, [r2, #36]	; 0x24
   308c8:	cmp	r1, #0
   308cc:	movlt	lr, #1
   308d0:	blt	308ec <renameat2@@Base+0x1bd8>
   308d4:	ldreq	r3, [sp, #40]	; 0x28
   308d8:	movne	lr, #0
   308dc:	ldrbeq	lr, [r3]
   308e0:	subeq	lr, lr, #45	; 0x2d
   308e4:	clzeq	lr, lr
   308e8:	lsreq	lr, lr, #5
   308ec:	ldr	r0, [pc, #1984]	; 310b4 <renameat2@@Base+0x23a0>
   308f0:	smull	r3, r2, r0, r1
   308f4:	ldr	r3, [pc, #1980]	; 310b8 <renameat2@@Base+0x23a4>
   308f8:	add	r2, r2, r1
   308fc:	smull	r3, ip, r3, r1
   30900:	asr	r3, r1, #31
   30904:	rsb	r2, r3, r2, asr #5
   30908:	add	ip, ip, r1
   3090c:	smull	r8, r0, r0, r2
   30910:	add	r0, r0, r2
   30914:	asr	r8, r2, #31
   30918:	rsb	r0, r8, r0, asr #5
   3091c:	rsb	r8, r2, r2, lsl #4
   30920:	rsb	r0, r0, r0, lsl #4
   30924:	rsb	r3, r3, ip, asr #11
   30928:	sub	r0, r2, r0, lsl #2
   3092c:	ldr	r2, [sp, #48]	; 0x30
   30930:	sub	r1, r1, r8, lsl #2
   30934:	cmp	r2, #3
   30938:	ldrls	pc, [pc, r2, lsl #2]
   3093c:	b	317f4 <renameat2@@Base+0x2ae0>
   30940:	andeq	r1, r3, ip, asr #6
   30944:	andeq	r1, r3, r8, lsr #6
   30948:	strdeq	r1, [r3], -r0
   3094c:	andeq	r1, r3, r0, ror r3
   30950:	bic	r7, r6, r6, asr #31
   30954:	ldr	r3, [sp, #16]
   30958:	cmp	r7, #1
   3095c:	movcc	r7, #1
   30960:	sub	r3, r3, fp
   30964:	cmp	r3, r7
   30968:	bls	301b4 <renameat2@@Base+0x14a0>
   3096c:	cmp	r9, #0
   30970:	beq	309a8 <renameat2@@Base+0x1c94>
   30974:	cmp	r6, #1
   30978:	ble	309a0 <renameat2@@Base+0x1c8c>
   3097c:	cmp	sl, #48	; 0x30
   30980:	sub	r2, r6, #1
   30984:	moveq	r0, r9
   30988:	movne	r0, r9
   3098c:	moveq	r1, sl
   30990:	movne	r1, #32
   30994:	add	r4, r9, r2
   30998:	bl	11df0 <memset@plt>
   3099c:	mov	r9, r4
   309a0:	mov	r3, #10
   309a4:	strb	r3, [r9], #1
   309a8:	add	fp, fp, r7
   309ac:	b	3017c <renameat2@@Base+0x1468>
   309b0:	cmp	r7, #69	; 0x45
   309b4:	beq	30818 <renameat2@@Base+0x1b04>
   309b8:	ldr	r3, [sp, #28]
   309bc:	mov	r2, #2
   309c0:	str	r2, [sp, #48]	; 0x30
   309c4:	ldr	r3, [r3, #12]
   309c8:	b	30638 <renameat2@@Base+0x1924>
   309cc:	cmp	r7, #69	; 0x45
   309d0:	beq	30818 <renameat2@@Base+0x1b04>
   309d4:	ldr	r3, [sp, #28]
   309d8:	ldr	r3, [r3, #12]
   309dc:	cmp	sl, #48	; 0x30
   309e0:	cmpne	sl, #45	; 0x2d
   309e4:	mov	r2, #2
   309e8:	movne	sl, #95	; 0x5f
   309ec:	str	r2, [sp, #48]	; 0x30
   309f0:	b	30638 <renameat2@@Base+0x1924>
   309f4:	cmp	r7, #69	; 0x45
   309f8:	beq	30818 <renameat2@@Base+0x1b04>
   309fc:	ldr	r3, [sp, #28]
   30a00:	mov	r0, #0
   30a04:	mov	r2, #3
   30a08:	ldr	r3, [r3, #28]
   30a0c:	str	r0, [sp, #52]	; 0x34
   30a10:	cmn	r3, #1
   30a14:	movge	lr, #0
   30a18:	movlt	lr, #1
   30a1c:	add	r3, r3, #1
   30a20:	str	r2, [sp, #48]	; 0x30
   30a24:	b	30644 <renameat2@@Base+0x1930>
   30a28:	cmp	r7, #69	; 0x45
   30a2c:	beq	30818 <renameat2@@Base+0x1b04>
   30a30:	ldr	r3, [sp, #28]
   30a34:	ldr	r3, [r3, #8]
   30a38:	b	309dc <renameat2@@Base+0x1cc8>
   30a3c:	cmp	r7, #69	; 0x45
   30a40:	beq	30818 <renameat2@@Base+0x1b04>
   30a44:	ldr	r3, [sp, #44]	; 0x2c
   30a48:	b	309dc <renameat2@@Base+0x1cc8>
   30a4c:	ldr	r3, [pc, #1640]	; 310bc <renameat2@@Base+0x23a8>
   30a50:	str	r3, [sp, #48]	; 0x30
   30a54:	ldr	r3, [sp, #1196]	; 0x4ac
   30a58:	ldr	r2, [sp, #48]	; 0x30
   30a5c:	str	r3, [sp, #12]
   30a60:	ldr	r3, [sp, #32]
   30a64:	mvn	r1, #0
   30a68:	str	r3, [sp, #8]
   30a6c:	ldr	r3, [sp, #36]	; 0x24
   30a70:	mov	r0, #0
   30a74:	str	r3, [sp, #4]
   30a78:	ldr	r3, [sp, #20]
   30a7c:	str	r3, [sp]
   30a80:	ldr	r3, [sp, #28]
   30a84:	bl	300d8 <renameat2@@Base+0x13c4>
   30a88:	bic	r3, r6, r6, asr #31
   30a8c:	ldr	r2, [sp, #16]
   30a90:	sub	r8, r2, fp
   30a94:	cmp	r0, r3
   30a98:	movcs	r7, r0
   30a9c:	movcc	r7, r3
   30aa0:	cmp	r8, r7
   30aa4:	mov	r4, r0
   30aa8:	bls	301b4 <renameat2@@Base+0x14a0>
   30aac:	cmp	r9, #0
   30ab0:	beq	309a8 <renameat2@@Base+0x1c94>
   30ab4:	cmp	r0, r3
   30ab8:	bcs	30ae0 <renameat2@@Base+0x1dcc>
   30abc:	cmp	sl, #48	; 0x30
   30ac0:	sub	r2, r6, r0
   30ac4:	moveq	r1, sl
   30ac8:	moveq	r0, r9
   30acc:	movne	r0, r9
   30ad0:	movne	r1, #32
   30ad4:	add	r6, r9, r2
   30ad8:	bl	11df0 <memset@plt>
   30adc:	mov	r9, r6
   30ae0:	ldr	r3, [sp, #1196]	; 0x4ac
   30ae4:	mov	r0, r9
   30ae8:	str	r3, [sp, #12]
   30aec:	ldr	r3, [sp, #32]
   30af0:	ldr	r2, [sp, #48]	; 0x30
   30af4:	str	r3, [sp, #8]
   30af8:	ldr	r3, [sp, #36]	; 0x24
   30afc:	mov	r1, r8
   30b00:	str	r3, [sp, #4]
   30b04:	ldr	r3, [sp, #20]
   30b08:	add	r9, r9, r4
   30b0c:	str	r3, [sp]
   30b10:	ldr	r3, [sp, #28]
   30b14:	bl	300d8 <renameat2@@Base+0x13c4>
   30b18:	b	309a8 <renameat2@@Base+0x1c94>
   30b1c:	cmp	r7, #69	; 0x45
   30b20:	beq	30818 <renameat2@@Base+0x1b04>
   30b24:	ldr	r3, [sp, #28]
   30b28:	mov	r2, #2
   30b2c:	str	r2, [sp, #48]	; 0x30
   30b30:	ldr	r3, [r3]
   30b34:	b	30638 <renameat2@@Base+0x1924>
   30b38:	cmp	r7, #69	; 0x45
   30b3c:	beq	30818 <renameat2@@Base+0x1b04>
   30b40:	ldr	r2, [sp, #28]
   30b44:	mov	r1, #2
   30b48:	str	r1, [sp, #48]	; 0x30
   30b4c:	ldrd	r2, [r2, #24]
   30b50:	sub	r3, r3, r2
   30b54:	ldr	r2, [pc, #1412]	; 310e0 <renameat2@@Base+0x23cc>
   30b58:	add	r3, r3, #7
   30b5c:	smull	r1, r2, r2, r3
   30b60:	add	r2, r2, r3
   30b64:	asr	r3, r3, #31
   30b68:	rsb	r3, r3, r2, asr #2
   30b6c:	b	30638 <renameat2@@Base+0x1924>
   30b70:	cmp	r7, #69	; 0x45
   30b74:	beq	31544 <renameat2@@Base+0x2830>
   30b78:	cmp	r7, #79	; 0x4f
   30b7c:	beq	30818 <renameat2@@Base+0x1b04>
   30b80:	ldr	r3, [sp, #28]
   30b84:	ldr	r2, [pc, #1368]	; 310e4 <renameat2@@Base+0x23d0>
   30b88:	mov	r0, #0
   30b8c:	ldr	lr, [r3, #20]
   30b90:	str	r0, [sp, #52]	; 0x34
   30b94:	add	r3, lr, #1888	; 0x760
   30b98:	cmp	lr, r2
   30b9c:	add	r3, r3, #12
   30ba0:	movge	lr, #0
   30ba4:	movlt	lr, #1
   30ba8:	mov	r2, #4
   30bac:	str	r2, [sp, #48]	; 0x30
   30bb0:	cmp	lr, #0
   30bb4:	rsbne	r3, r3, #0
   30bb8:	add	r8, sp, #120	; 0x78
   30bbc:	add	ip, r8, #10
   30bc0:	mov	r7, r3
   30bc4:	b	30bcc <renameat2@@Base+0x1eb8>
   30bc8:	mov	r7, r2
   30bcc:	tst	r0, #1
   30bd0:	subne	r3, ip, #2
   30bd4:	sub	r4, ip, #1
   30bd8:	movne	r2, #58	; 0x3a
   30bdc:	strbne	r2, [ip, #-1]
   30be0:	movne	ip, r4
   30be4:	movne	r4, r3
   30be8:	ldr	r3, [pc, #1232]	; 310c0 <renameat2@@Base+0x23ac>
   30bec:	asrs	r0, r0, #1
   30bf0:	movne	r1, #1
   30bf4:	umull	r3, r2, r3, r7
   30bf8:	moveq	r1, #0
   30bfc:	lsr	r2, r2, #3
   30c00:	cmp	r7, #9
   30c04:	orrhi	r1, r1, #1
   30c08:	add	r3, r2, r2, lsl #2
   30c0c:	cmp	r1, #0
   30c10:	sub	r3, r7, r3, lsl #1
   30c14:	add	r3, r3, #48	; 0x30
   30c18:	strb	r3, [ip, #-1]
   30c1c:	mov	ip, r4
   30c20:	bne	30bc8 <renameat2@@Base+0x1eb4>
   30c24:	ldr	r3, [sp, #48]	; 0x30
   30c28:	cmp	r3, r6
   30c2c:	movlt	r3, r6
   30c30:	cmp	lr, #0
   30c34:	bne	31394 <renameat2@@Base+0x2680>
   30c38:	ldr	r2, [sp, #52]	; 0x34
   30c3c:	cmp	r2, #0
   30c40:	beq	30708 <renameat2@@Base+0x19f4>
   30c44:	cmp	sl, #45	; 0x2d
   30c48:	beq	31550 <renameat2@@Base+0x283c>
   30c4c:	mov	r2, #43	; 0x2b
   30c50:	str	r2, [sp, #52]	; 0x34
   30c54:	add	r7, r8, #10
   30c58:	sub	r7, r7, r4
   30c5c:	sub	r2, r3, r7
   30c60:	sub	r2, r2, #1
   30c64:	str	r2, [sp, #48]	; 0x30
   30c68:	cmp	r2, #0
   30c6c:	ldr	r2, [sp, #16]
   30c70:	sub	r2, r2, fp
   30c74:	ble	3144c <renameat2@@Base+0x2738>
   30c78:	cmp	sl, #95	; 0x5f
   30c7c:	beq	314d8 <renameat2@@Base+0x27c4>
   30c80:	cmp	r3, r2
   30c84:	bcs	301b4 <renameat2@@Base+0x14a0>
   30c88:	bic	r0, r6, r6, asr #31
   30c8c:	cmp	r0, #1
   30c90:	movcs	r1, r0
   30c94:	movcc	r1, #1
   30c98:	cmp	r1, r2
   30c9c:	bcs	301b4 <renameat2@@Base+0x14a0>
   30ca0:	cmp	r9, #0
   30ca4:	add	fp, fp, r1
   30ca8:	beq	30d20 <renameat2@@Base+0x200c>
   30cac:	cmp	r0, #1
   30cb0:	movls	r2, #0
   30cb4:	movhi	r2, #1
   30cb8:	cmp	r3, #0
   30cbc:	movne	r2, #0
   30cc0:	cmp	r2, #0
   30cc4:	beq	30cf0 <renameat2@@Base+0x1fdc>
   30cc8:	sub	r2, r6, #1
   30ccc:	cmp	sl, #48	; 0x30
   30cd0:	str	r3, [sp, #56]	; 0x38
   30cd4:	mov	r0, r9
   30cd8:	add	r8, r9, r2
   30cdc:	beq	317bc <renameat2@@Base+0x2aa8>
   30ce0:	mov	r1, #32
   30ce4:	bl	11df0 <memset@plt>
   30ce8:	ldr	r3, [sp, #56]	; 0x38
   30cec:	mov	r9, r8
   30cf0:	ldr	r2, [sp, #52]	; 0x34
   30cf4:	strb	r2, [r9], #1
   30cf8:	cmp	r9, #0
   30cfc:	beq	30d20 <renameat2@@Base+0x200c>
   30d00:	ldr	r6, [sp, #48]	; 0x30
   30d04:	mov	r0, r9
   30d08:	mov	r2, r6
   30d0c:	mov	r1, #48	; 0x30
   30d10:	str	r3, [sp, #52]	; 0x34
   30d14:	bl	11df0 <memset@plt>
   30d18:	ldr	r3, [sp, #52]	; 0x34
   30d1c:	add	r9, r9, r6
   30d20:	ldr	r2, [sp, #48]	; 0x30
   30d24:	mov	r6, #0
   30d28:	add	fp, fp, r2
   30d2c:	ldr	r2, [sp, #16]
   30d30:	str	r6, [sp, #48]	; 0x30
   30d34:	sub	r2, r2, fp
   30d38:	b	30738 <renameat2@@Base+0x1a24>
   30d3c:	ldr	r3, [sp, #20]
   30d40:	cmp	r8, #0
   30d44:	movne	r3, #0
   30d48:	ldr	r0, [sp, #40]	; 0x28
   30d4c:	str	r3, [sp, #20]
   30d50:	bl	11d78 <strlen@plt>
   30d54:	bic	r3, r6, r6, asr #31
   30d58:	ldr	r2, [sp, #16]
   30d5c:	sub	r2, r2, fp
   30d60:	cmp	r0, r3
   30d64:	movcs	r4, r0
   30d68:	movcc	r4, r3
   30d6c:	cmp	r2, r4
   30d70:	mov	r7, r0
   30d74:	bls	301b4 <renameat2@@Base+0x14a0>
   30d78:	cmp	r9, #0
   30d7c:	beq	30dd4 <renameat2@@Base+0x20c0>
   30d80:	cmp	r0, r3
   30d84:	bcs	30dac <renameat2@@Base+0x2098>
   30d88:	cmp	sl, #48	; 0x30
   30d8c:	sub	r2, r6, r0
   30d90:	moveq	r1, sl
   30d94:	moveq	r0, r9
   30d98:	movne	r0, r9
   30d9c:	movne	r1, #32
   30da0:	add	r6, r9, r2
   30da4:	bl	11df0 <memset@plt>
   30da8:	mov	r9, r6
   30dac:	cmp	r8, #0
   30db0:	bne	31728 <renameat2@@Base+0x2a14>
   30db4:	ldr	r3, [sp, #20]
   30db8:	mov	r2, r7
   30dbc:	cmp	r3, #0
   30dc0:	ldr	r1, [sp, #40]	; 0x28
   30dc4:	mov	r0, r9
   30dc8:	beq	31720 <renameat2@@Base+0x2a0c>
   30dcc:	bl	30098 <renameat2@@Base+0x1384>
   30dd0:	add	r9, r9, r7
   30dd4:	add	fp, fp, r4
   30dd8:	b	3017c <renameat2@@Base+0x1468>
   30ddc:	cmp	r7, #69	; 0x45
   30de0:	beq	30818 <renameat2@@Base+0x1b04>
   30de4:	ldr	r3, [sp, #28]
   30de8:	ldr	ip, [pc, #752]	; 310e0 <renameat2@@Base+0x23cc>
   30dec:	ldrd	r2, [r3, #24]
   30df0:	add	r2, r2, #6
   30df4:	smull	r0, r1, ip, r2
   30df8:	add	r0, r1, r2
   30dfc:	asr	r1, r2, #31
   30e00:	rsb	r1, r1, r0, asr #2
   30e04:	mov	r0, #2
   30e08:	rsb	r1, r1, r1, lsl #3
   30e0c:	sub	r2, r2, r1
   30e10:	sub	r3, r3, r2
   30e14:	add	r3, r3, #7
   30e18:	str	r0, [sp, #48]	; 0x30
   30e1c:	smull	r1, r2, ip, r3
   30e20:	add	r2, r2, r3
   30e24:	asr	r3, r3, #31
   30e28:	rsb	r3, r3, r2, asr r0
   30e2c:	b	30638 <renameat2@@Base+0x1924>
   30e30:	cmp	r7, #0
   30e34:	bne	30818 <renameat2@@Base+0x1b04>
   30e38:	ldr	r3, [pc, #644]	; 310c4 <renameat2@@Base+0x23b0>
   30e3c:	str	r3, [sp, #48]	; 0x30
   30e40:	b	30a54 <renameat2@@Base+0x1d40>
   30e44:	cmp	r7, #0
   30e48:	bne	30818 <renameat2@@Base+0x1b04>
   30e4c:	ldr	r3, [pc, #628]	; 310c8 <renameat2@@Base+0x23b4>
   30e50:	str	r3, [sp, #48]	; 0x30
   30e54:	b	30a54 <renameat2@@Base+0x1d40>
   30e58:	cmp	r7, #69	; 0x45
   30e5c:	beq	30818 <renameat2@@Base+0x1b04>
   30e60:	ldr	r3, [sp, #28]
   30e64:	ldr	r0, [r3, #28]
   30e68:	ldr	r2, [r3, #24]
   30e6c:	ldr	r8, [r3, #20]
   30e70:	sub	r3, r0, r2
   30e74:	str	r2, [sp, #52]	; 0x34
   30e78:	add	r3, r3, #380	; 0x17c
   30e7c:	ldr	r2, [pc, #604]	; 310e0 <renameat2@@Base+0x23cc>
   30e80:	add	r3, r3, #2
   30e84:	cmp	r8, #0
   30e88:	smull	r1, r2, r2, r3
   30e8c:	str	r0, [sp, #48]	; 0x30
   30e90:	add	r1, r2, r3
   30e94:	asr	r2, r3, #31
   30e98:	rsb	r2, r2, r1, asr #2
   30e9c:	movlt	r1, #300	; 0x12c
   30ea0:	rsb	r2, r2, r2, lsl #3
   30ea4:	sub	r3, r3, r2
   30ea8:	sub	r3, r0, r3
   30eac:	mvnge	r1, #99	; 0x63
   30eb0:	adds	r3, r3, #3
   30eb4:	add	r1, r8, r1
   30eb8:	bmi	315b8 <renameat2@@Base+0x28a4>
   30ebc:	tst	r1, #3
   30ec0:	ldrne	r2, [pc, #524]	; 310d4 <renameat2@@Base+0x23c0>
   30ec4:	bne	30f08 <renameat2@@Base+0x21f4>
   30ec8:	ldr	r2, [pc, #512]	; 310d0 <renameat2@@Base+0x23bc>
   30ecc:	smull	r2, ip, r2, r1
   30ed0:	asr	r2, r1, #31
   30ed4:	rsb	r0, r2, ip, asr #5
   30ed8:	add	r0, r0, r0, lsl #2
   30edc:	add	r0, r0, r0, lsl #2
   30ee0:	cmp	r1, r0, lsl #2
   30ee4:	ldrne	r2, [pc, #492]	; 310d8 <renameat2@@Base+0x23c4>
   30ee8:	bne	30f08 <renameat2@@Base+0x21f4>
   30eec:	rsb	r0, r2, ip, asr #7
   30ef0:	ldr	ip, [pc, #480]	; 310d8 <renameat2@@Base+0x23c4>
   30ef4:	add	r0, r0, r0, lsl #2
   30ef8:	ldr	r2, [pc, #468]	; 310d4 <renameat2@@Base+0x23c0>
   30efc:	add	r0, r0, r0, lsl #2
   30f00:	cmp	r1, r0, lsl #4
   30f04:	moveq	r2, ip
   30f08:	ldr	r1, [sp, #48]	; 0x30
   30f0c:	sub	ip, r1, r2
   30f10:	ldr	r2, [sp, #52]	; 0x34
   30f14:	ldr	r1, [pc, #452]	; 310e0 <renameat2@@Base+0x23cc>
   30f18:	sub	r2, ip, r2
   30f1c:	add	r2, r2, #380	; 0x17c
   30f20:	add	r2, r2, #2
   30f24:	smull	r0, r1, r1, r2
   30f28:	add	r0, r1, r2
   30f2c:	asr	r1, r2, #31
   30f30:	rsb	r1, r1, r0, asr #2
   30f34:	rsb	r1, r1, r1, lsl #3
   30f38:	sub	r2, r2, r1
   30f3c:	sub	r2, ip, r2
   30f40:	add	r2, r2, #3
   30f44:	cmp	r2, #0
   30f48:	movge	r3, r2
   30f4c:	movlt	r2, #0
   30f50:	movge	r2, #1
   30f54:	cmp	r4, #71	; 0x47
   30f58:	beq	316d0 <renameat2@@Base+0x29bc>
   30f5c:	cmp	r4, #103	; 0x67
   30f60:	bne	316ac <renameat2@@Base+0x2998>
   30f64:	ldr	r0, [pc, #356]	; 310d0 <renameat2@@Base+0x23bc>
   30f68:	smull	r3, r1, r0, r8
   30f6c:	asr	r3, r8, #31
   30f70:	rsb	r3, r3, r1, asr #5
   30f74:	add	r3, r3, r3, lsl #2
   30f78:	add	r3, r3, r3, lsl #2
   30f7c:	sub	r1, r8, r3, lsl #2
   30f80:	add	r1, r1, r2
   30f84:	smull	r3, r0, r0, r1
   30f88:	asr	r3, r1, #31
   30f8c:	rsb	r3, r3, r0, asr #5
   30f90:	add	r3, r3, r3, lsl #2
   30f94:	add	r3, r3, r3, lsl #2
   30f98:	subs	r3, r1, r3, lsl #2
   30f9c:	bpl	307f4 <renameat2@@Base+0x1ae0>
   30fa0:	ldr	r1, [pc, #316]	; 310e4 <renameat2@@Base+0x23d0>
   30fa4:	sub	r1, r1, r2
   30fa8:	cmp	r1, r8
   30fac:	ble	31710 <renameat2@@Base+0x29fc>
   30fb0:	mov	r2, #2
   30fb4:	rsb	r3, r3, #0
   30fb8:	str	r2, [sp, #48]	; 0x30
   30fbc:	b	30638 <renameat2@@Base+0x1924>
   30fc0:	cmp	r7, #69	; 0x45
   30fc4:	beq	30818 <renameat2@@Base+0x1b04>
   30fc8:	ldr	r3, [sp, #28]
   30fcc:	mov	r2, #2
   30fd0:	str	r2, [sp, #48]	; 0x30
   30fd4:	ldr	r3, [r3, #8]
   30fd8:	b	30638 <renameat2@@Base+0x1924>
   30fdc:	cmp	r7, #69	; 0x45
   30fe0:	beq	30818 <renameat2@@Base+0x1b04>
   30fe4:	ldr	r3, [sp, #28]
   30fe8:	mov	r2, #2
   30fec:	str	r2, [sp, #48]	; 0x30
   30ff0:	ldr	r3, [r3, #4]
   30ff4:	b	30638 <renameat2@@Base+0x1924>
   30ff8:	cmp	r7, #69	; 0x45
   30ffc:	beq	30818 <renameat2@@Base+0x1b04>
   31000:	cmn	r6, #1
   31004:	bne	3164c <renameat2@@Base+0x2938>
   31008:	mov	r6, #9
   3100c:	str	r6, [sp, #48]	; 0x30
   31010:	ldr	r3, [sp, #1196]	; 0x4ac
   31014:	b	30638 <renameat2@@Base+0x1924>
   31018:	ldrb	r3, [r5, #-1]
   3101c:	sub	r7, r5, #1
   31020:	cmp	r3, #37	; 0x25
   31024:	ldr	r3, [sp, #16]
   31028:	sub	r2, r3, fp
   3102c:	bic	r3, r6, r6, asr #31
   31030:	bne	317ec <renameat2@@Base+0x2ad8>
   31034:	cmp	r3, #1
   31038:	movcs	r8, r3
   3103c:	movcc	r8, #1
   31040:	mov	r5, r7
   31044:	mov	r4, #1
   31048:	b	3084c <renameat2@@Base+0x1b38>
   3104c:	cmp	r7, #69	; 0x45
   31050:	beq	30818 <renameat2@@Base+0x1b04>
   31054:	mov	r2, #2
   31058:	ldr	r3, [sp, #44]	; 0x2c
   3105c:	str	r2, [sp, #48]	; 0x30
   31060:	b	30638 <renameat2@@Base+0x1924>
   31064:	ldr	r3, [sp, #28]
   31068:	cmp	r7, #79	; 0x4f
   3106c:	ldr	r3, [r3, #16]
   31070:	moveq	r3, #1
   31074:	streq	r3, [sp, #48]	; 0x30
   31078:	beq	3065c <renameat2@@Base+0x1948>
   3107c:	add	r2, r3, r3, lsl #2
   31080:	mov	r0, #0
   31084:	add	r3, r3, r2, lsl #1
   31088:	mov	r2, #1
   3108c:	asr	r3, r3, #5
   31090:	str	r0, [sp, #52]	; 0x34
   31094:	mov	lr, r0
   31098:	add	r3, r3, #1
   3109c:	str	r2, [sp, #48]	; 0x30
   310a0:	b	30bb8 <renameat2@@Base+0x1ea4>
   310a4:	andeq	r7, r4, r8, lsl #30
   310a8:	strdeq	r5, [r3], -r8
   310ac:	stcleq	12, cr12, [ip], {204}	; 0xcc
   310b0:	andeq	r2, r0, r0, lsr #10
   310b4:	stmhi	r8, {r0, r3, r7, fp, pc}
   310b8:			; <UNDEFINED> instruction: 0x91a2b3c5
   310bc:			; <UNDEFINED> instruction: 0x00036fb8
   310c0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   310c4:	andeq	r6, r3, ip, lsr #31
   310c8:	andeq	r6, r3, r0, asr #31
   310cc:	andeq	r6, r3, r0, lsr #31
   310d0:	mvnpl	r8, pc, lsl r5
   310d4:	andeq	r0, r0, sp, ror #2
   310d8:	andeq	r0, r0, lr, ror #2
   310dc:	strbtvs	r6, [r6], -r7, ror #12
   310e0:	subls	r2, r9, #-1828716544	; 0x93000000
   310e4:			; <UNDEFINED> instruction: 0xfffff894
   310e8:	bic	r7, r6, r6, asr #31
   310ec:	ldr	r3, [sp, #16]
   310f0:	cmp	r7, #1
   310f4:	movcc	r7, #1
   310f8:	sub	r3, r3, fp
   310fc:	cmp	r3, r7
   31100:	bls	301b4 <renameat2@@Base+0x14a0>
   31104:	cmp	r9, #0
   31108:	beq	309a8 <renameat2@@Base+0x1c94>
   3110c:	cmp	r6, #1
   31110:	ble	31138 <renameat2@@Base+0x2424>
   31114:	cmp	sl, #48	; 0x30
   31118:	sub	r2, r6, #1
   3111c:	moveq	r0, r9
   31120:	movne	r0, r9
   31124:	moveq	r1, sl
   31128:	movne	r1, #32
   3112c:	add	r4, r9, r2
   31130:	bl	11df0 <memset@plt>
   31134:	mov	r9, r4
   31138:	mov	r3, #9
   3113c:	strb	r3, [r9], #1
   31140:	b	309a8 <renameat2@@Base+0x1c94>
   31144:	mov	r3, #0
   31148:	str	r3, [sp, #52]	; 0x34
   3114c:	ldr	r3, [sp, #52]	; 0x34
   31150:	cmp	r8, #0
   31154:	movne	r3, r8
   31158:	str	r3, [sp, #52]	; 0x34
   3115c:	ldr	r3, [sp, #20]
   31160:	movne	r3, #0
   31164:	str	r3, [sp, #20]
   31168:	mov	r4, #112	; 0x70
   3116c:	b	304dc <renameat2@@Base+0x17c8>
   31170:	cmp	r7, #69	; 0x45
   31174:	beq	30818 <renameat2@@Base+0x1b04>
   31178:	ldr	r3, [sp, #20]
   3117c:	cmp	r8, #0
   31180:	movne	r3, r8
   31184:	str	r3, [sp, #20]
   31188:	mov	r3, #0
   3118c:	str	r3, [sp, #52]	; 0x34
   31190:	b	304dc <renameat2@@Base+0x17c8>
   31194:	cmp	r7, #69	; 0x45
   31198:	beq	31544 <renameat2@@Base+0x2830>
   3119c:	ldr	r3, [sp, #28]
   311a0:	mov	r0, #0
   311a4:	ldr	lr, [pc, #-200]	; 310e4 <renameat2@@Base+0x23d0>
   311a8:	ldr	ip, [r3, #20]
   311ac:	ldr	r3, [pc, #-228]	; 310d0 <renameat2@@Base+0x23bc>
   311b0:	str	r0, [sp, #52]	; 0x34
   311b4:	smull	r2, r3, r3, ip
   311b8:	asr	r2, ip, #31
   311bc:	rsb	r2, r2, r3, asr #5
   311c0:	add	r3, r2, #19
   311c4:	add	r2, r2, r2, lsl #2
   311c8:	cmp	r3, r0
   311cc:	add	r2, r2, r2, lsl #2
   311d0:	movle	r1, #0
   311d4:	sub	r2, ip, r2, lsl #2
   311d8:	movgt	r1, #1
   311dc:	and	r2, r1, r2, lsr #31
   311e0:	cmp	ip, lr
   311e4:	sub	r3, r3, r2
   311e8:	mov	r2, #2
   311ec:	movge	lr, #0
   311f0:	movlt	lr, #1
   311f4:	str	r2, [sp, #48]	; 0x30
   311f8:	b	30644 <renameat2@@Base+0x1930>
   311fc:	cmp	r7, #69	; 0x45
   31200:	beq	30818 <renameat2@@Base+0x1b04>
   31204:	ldr	r3, [sp, #28]
   31208:	mov	r2, #1
   3120c:	str	r2, [sp, #48]	; 0x30
   31210:	ldr	r3, [r3, #24]
   31214:	b	30638 <renameat2@@Base+0x1924>
   31218:	cmp	r7, #69	; 0x45
   3121c:	beq	30818 <renameat2@@Base+0x1b04>
   31220:	ldr	r3, [sp, #28]
   31224:	mov	r0, #0
   31228:	mov	r2, #2
   3122c:	ldr	r3, [r3, #16]
   31230:	str	r0, [sp, #52]	; 0x34
   31234:	cmn	r3, #1
   31238:	movge	lr, #0
   3123c:	movlt	lr, #1
   31240:	add	r3, r3, #1
   31244:	str	r2, [sp, #48]	; 0x30
   31248:	b	30644 <renameat2@@Base+0x1930>
   3124c:	bic	r3, r6, r6, asr #31
   31250:	ldr	r2, [sp, #16]
   31254:	cmp	r3, #1
   31258:	movcs	r8, r3
   3125c:	movcc	r8, #1
   31260:	cmp	r7, #0
   31264:	sub	r2, r2, fp
   31268:	bne	31760 <renameat2@@Base+0x2a4c>
   3126c:	cmp	r8, r2
   31270:	bcs	301b4 <renameat2@@Base+0x14a0>
   31274:	cmp	r9, #0
   31278:	beq	307bc <renameat2@@Base+0x1aa8>
   3127c:	cmp	r6, #1
   31280:	ble	312a8 <renameat2@@Base+0x2594>
   31284:	sub	r2, r6, #1
   31288:	cmp	sl, #48	; 0x30
   3128c:	add	r7, r9, r2
   31290:	beq	31780 <renameat2@@Base+0x2a6c>
   31294:	mov	r0, r9
   31298:	mov	r1, #32
   3129c:	bl	11df0 <memset@plt>
   312a0:	ldrb	r4, [r5]
   312a4:	mov	r9, r7
   312a8:	strb	r4, [r9], #1
   312ac:	b	307bc <renameat2@@Base+0x1aa8>
   312b0:	ldrb	r3, [r5, #1]
   312b4:	add	r2, r5, #1
   312b8:	cmp	r3, #58	; 0x3a
   312bc:	beq	3173c <renameat2@@Base+0x2a28>
   312c0:	mov	r1, #1
   312c4:	str	r1, [sp, #48]	; 0x30
   312c8:	cmp	r3, #122	; 0x7a
   312cc:	moveq	r5, r2
   312d0:	beq	308b4 <renameat2@@Base+0x1ba0>
   312d4:	b	30818 <renameat2@@Base+0x1b04>
   312d8:	mov	r3, #1
   312dc:	str	r3, [sp, #52]	; 0x34
   312e0:	b	3114c <renameat2@@Base+0x2438>
   312e4:	ldr	r3, [pc, #-544]	; 310cc <renameat2@@Base+0x23b8>
   312e8:	str	r3, [sp, #48]	; 0x30
   312ec:	b	30a54 <renameat2@@Base+0x1d40>
   312f0:	rsb	r2, r3, r3, lsl #5
   312f4:	add	r0, r0, r0, lsl #2
   312f8:	add	r3, r3, r2, lsl #2
   312fc:	add	r0, r0, r0, lsl #2
   31300:	add	ip, r3, r3, lsl #2
   31304:	mov	r2, #1
   31308:	lsl	r3, r0, #2
   3130c:	add	r3, r3, ip, lsl #4
   31310:	str	r2, [sp, #52]	; 0x34
   31314:	mov	r2, #9
   31318:	add	r3, r3, r1
   3131c:	mov	r0, #20
   31320:	str	r2, [sp, #48]	; 0x30
   31324:	b	30644 <renameat2@@Base+0x1930>
   31328:	add	r3, r3, r3, lsl #2
   3132c:	mov	r2, #1
   31330:	add	r3, r3, r3, lsl #2
   31334:	str	r2, [sp, #52]	; 0x34
   31338:	mov	r2, #6
   3133c:	add	r3, r0, r3, lsl #2
   31340:	str	r2, [sp, #48]	; 0x30
   31344:	mov	r0, #4
   31348:	b	30644 <renameat2@@Base+0x1930>
   3134c:	add	r3, r3, r3, lsl #2
   31350:	mov	r2, #1
   31354:	add	r3, r3, r3, lsl #2
   31358:	str	r2, [sp, #52]	; 0x34
   3135c:	mov	r2, #5
   31360:	add	r3, r0, r3, lsl #2
   31364:	str	r2, [sp, #48]	; 0x30
   31368:	mov	r0, #0
   3136c:	b	30644 <renameat2@@Base+0x1930>
   31370:	cmp	r1, #0
   31374:	bne	312f0 <renameat2@@Base+0x25dc>
   31378:	cmp	r0, #0
   3137c:	bne	31328 <renameat2@@Base+0x2614>
   31380:	mov	r2, #1
   31384:	str	r2, [sp, #52]	; 0x34
   31388:	mov	r2, #3
   3138c:	str	r2, [sp, #48]	; 0x30
   31390:	b	30644 <renameat2@@Base+0x1930>
   31394:	cmp	sl, #45	; 0x2d
   31398:	movne	r2, #45	; 0x2d
   3139c:	strne	r2, [sp, #52]	; 0x34
   313a0:	bne	30c54 <renameat2@@Base+0x1f40>
   313a4:	bic	r1, r6, r6, asr #31
   313a8:	ldr	r2, [sp, #16]
   313ac:	cmp	r1, #1
   313b0:	movcs	r7, r1
   313b4:	movcc	r7, #1
   313b8:	sub	r2, r2, fp
   313bc:	cmp	r2, r7
   313c0:	str	r1, [sp, #48]	; 0x30
   313c4:	bls	301b4 <renameat2@@Base+0x14a0>
   313c8:	cmp	r9, #0
   313cc:	beq	313f0 <renameat2@@Base+0x26dc>
   313d0:	cmp	r1, #1
   313d4:	movls	r2, #0
   313d8:	movhi	r2, #1
   313dc:	cmp	r3, #0
   313e0:	movne	r2, #0
   313e4:	cmp	r2, #0
   313e8:	bne	31680 <renameat2@@Base+0x296c>
   313ec:	strb	sl, [r9], #1
   313f0:	ldr	r2, [sp, #16]
   313f4:	add	fp, fp, r7
   313f8:	add	r7, r8, #10
   313fc:	sub	r7, r7, r4
   31400:	sub	r2, r2, fp
   31404:	mov	sl, #45	; 0x2d
   31408:	b	30738 <renameat2@@Base+0x1a24>
   3140c:	bl	11afc <memcpy@plt>
   31410:	b	307b8 <renameat2@@Base+0x1aa4>
   31414:	bl	11afc <memcpy@plt>
   31418:	b	308a4 <renameat2@@Base+0x1b90>
   3141c:	bl	11afc <memcpy@plt>
   31420:	ldr	r3, [sp, #20]
   31424:	b	305c4 <renameat2@@Base+0x18b0>
   31428:	sub	r1, r8, #3
   3142c:	mov	r2, r4
   31430:	mov	r0, r9
   31434:	str	r3, [sp, #20]
   31438:	bl	30058 <renameat2@@Base+0x1344>
   3143c:	ldr	r3, [sp, #20]
   31440:	b	305c4 <renameat2@@Base+0x18b0>
   31444:	mov	fp, r3
   31448:	b	3018c <renameat2@@Base+0x1478>
   3144c:	bic	r1, r6, r6, asr #31
   31450:	cmp	r1, #1
   31454:	movcs	r8, r1
   31458:	movcc	r8, #1
   3145c:	cmp	r8, r2
   31460:	str	r1, [sp, #48]	; 0x30
   31464:	bcs	301b4 <renameat2@@Base+0x14a0>
   31468:	cmp	r9, #0
   3146c:	beq	314c0 <renameat2@@Base+0x27ac>
   31470:	cmp	r1, #1
   31474:	movls	r2, #0
   31478:	movhi	r2, #1
   3147c:	cmp	r3, #0
   31480:	movne	r2, #0
   31484:	cmp	r2, #0
   31488:	beq	314b8 <renameat2@@Base+0x27a4>
   3148c:	sub	r2, r6, #1
   31490:	add	r1, r9, r2
   31494:	cmp	sl, #48	; 0x30
   31498:	str	r1, [sp, #56]	; 0x38
   3149c:	str	r3, [sp, #60]	; 0x3c
   314a0:	mov	r0, r9
   314a4:	beq	3176c <renameat2@@Base+0x2a58>
   314a8:	mov	r1, #32
   314ac:	bl	11df0 <memset@plt>
   314b0:	ldr	r9, [sp, #56]	; 0x38
   314b4:	ldr	r3, [sp, #60]	; 0x3c
   314b8:	ldr	r2, [sp, #52]	; 0x34
   314bc:	strb	r2, [r9], #1
   314c0:	ldr	r2, [sp, #16]
   314c4:	add	fp, fp, r8
   314c8:	sub	r2, r2, fp
   314cc:	b	30738 <renameat2@@Base+0x1a24>
   314d0:	mov	r1, #0
   314d4:	str	r1, [sp, #52]	; 0x34
   314d8:	ldr	r7, [sp, #48]	; 0x30
   314dc:	cmp	r7, r2
   314e0:	bcs	301b4 <renameat2@@Base+0x14a0>
   314e4:	cmp	r9, #0
   314e8:	beq	31508 <renameat2@@Base+0x27f4>
   314ec:	mov	r0, r9
   314f0:	mov	r2, r7
   314f4:	mov	r1, #32
   314f8:	str	r3, [sp, #56]	; 0x38
   314fc:	bl	11df0 <memset@plt>
   31500:	ldr	r3, [sp, #56]	; 0x38
   31504:	add	r9, r9, r7
   31508:	ldr	r2, [sp, #48]	; 0x30
   3150c:	cmp	r6, r2
   31510:	add	fp, fp, r2
   31514:	subgt	r6, r6, r2
   31518:	ldr	r2, [sp, #52]	; 0x34
   3151c:	movle	r6, #0
   31520:	cmp	r2, #0
   31524:	ldr	r2, [sp, #16]
   31528:	sub	r2, r2, fp
   3152c:	bne	31558 <renameat2@@Base+0x2844>
   31530:	add	r7, r8, #10
   31534:	sub	r7, r7, r4
   31538:	str	r6, [sp, #48]	; 0x30
   3153c:	mov	sl, #95	; 0x5f
   31540:	b	30738 <renameat2@@Base+0x1a24>
   31544:	mov	r3, #0
   31548:	str	r3, [sp, #48]	; 0x30
   3154c:	b	3065c <renameat2@@Base+0x1948>
   31550:	mov	sl, #43	; 0x2b
   31554:	b	313a4 <renameat2@@Base+0x2690>
   31558:	cmp	r6, #1
   3155c:	movcs	sl, r6
   31560:	movcc	sl, #1
   31564:	cmp	sl, r2
   31568:	bcs	301b4 <renameat2@@Base+0x14a0>
   3156c:	cmp	r9, #0
   31570:	beq	31598 <renameat2@@Base+0x2884>
   31574:	cmp	r6, #1
   31578:	movls	r2, #0
   3157c:	movhi	r2, #1
   31580:	cmp	r3, #0
   31584:	movne	r2, #0
   31588:	cmp	r2, #0
   3158c:	bne	31798 <renameat2@@Base+0x2a84>
   31590:	ldr	r2, [sp, #52]	; 0x34
   31594:	strb	r2, [r9], #1
   31598:	ldr	r2, [sp, #16]
   3159c:	add	fp, fp, sl
   315a0:	add	r7, r8, #10
   315a4:	sub	r7, r7, r4
   315a8:	sub	r2, r2, fp
   315ac:	str	r6, [sp, #48]	; 0x30
   315b0:	mov	sl, #95	; 0x5f
   315b4:	b	30738 <renameat2@@Base+0x1a24>
   315b8:	sub	r0, r1, #1
   315bc:	tst	r0, #3
   315c0:	ldrne	r1, [pc, #-1268]	; 310d4 <renameat2@@Base+0x23c0>
   315c4:	bne	31608 <renameat2@@Base+0x28f4>
   315c8:	ldr	r3, [pc, #-1280]	; 310d0 <renameat2@@Base+0x23bc>
   315cc:	smull	r3, r2, r3, r0
   315d0:	asr	r3, r0, #31
   315d4:	rsb	r3, r3, r2, asr #5
   315d8:	add	r3, r3, r3, lsl #2
   315dc:	add	r3, r3, r3, lsl #2
   315e0:	cmp	r0, r3, lsl #2
   315e4:	ldrne	r1, [pc, #-1300]	; 310d8 <renameat2@@Base+0x23c4>
   315e8:	bne	31608 <renameat2@@Base+0x28f4>
   315ec:	mov	r1, #400	; 0x190
   315f0:	bl	31c88 <renameat2@@Base+0x2f74>
   315f4:	ldr	r3, [pc, #-1320]	; 310d4 <renameat2@@Base+0x23c0>
   315f8:	ldr	r2, [pc, #-1320]	; 310d8 <renameat2@@Base+0x23c4>
   315fc:	cmp	r1, #0
   31600:	movne	r1, r3
   31604:	moveq	r1, r2
   31608:	ldr	r3, [sp, #48]	; 0x30
   3160c:	mvn	r2, #0
   31610:	add	ip, r3, r1
   31614:	ldr	r3, [sp, #52]	; 0x34
   31618:	ldr	r1, [pc, #-1344]	; 310e0 <renameat2@@Base+0x23cc>
   3161c:	sub	r3, ip, r3
   31620:	add	r3, r3, #380	; 0x17c
   31624:	add	r3, r3, #2
   31628:	smull	r0, r1, r1, r3
   3162c:	add	r0, r1, r3
   31630:	asr	r1, r3, #31
   31634:	rsb	r1, r1, r0, asr #2
   31638:	rsb	r1, r1, r1, lsl #3
   3163c:	sub	r3, r3, r1
   31640:	sub	r3, ip, r3
   31644:	add	r3, r3, #3
   31648:	b	30f54 <renameat2@@Base+0x2240>
   3164c:	cmp	r6, #8
   31650:	bgt	317d0 <renameat2@@Base+0x2abc>
   31654:	ldr	r3, [sp, #1196]	; 0x4ac
   31658:	mov	r2, r6
   3165c:	ldr	r1, [pc, #-1416]	; 310dc <renameat2@@Base+0x23c8>
   31660:	add	r2, r2, #1
   31664:	cmp	r2, #9
   31668:	smull	r0, r1, r1, r3
   3166c:	asr	r3, r3, #31
   31670:	rsb	r3, r3, r1, asr #2
   31674:	bne	3165c <renameat2@@Base+0x2948>
   31678:	str	r6, [sp, #48]	; 0x30
   3167c:	b	30638 <renameat2@@Base+0x1924>
   31680:	str	r3, [sp, #56]	; 0x38
   31684:	sub	r3, r6, #1
   31688:	mov	r2, r3
   3168c:	mov	r0, r9
   31690:	mov	r1, #32
   31694:	str	r3, [sp, #52]	; 0x34
   31698:	bl	11df0 <memset@plt>
   3169c:	ldr	r3, [sp, #52]	; 0x34
   316a0:	add	r9, r9, r3
   316a4:	ldr	r3, [sp, #56]	; 0x38
   316a8:	b	313ec <renameat2@@Base+0x26d8>
   316ac:	ldr	r2, [pc, #-1492]	; 310e0 <renameat2@@Base+0x23cc>
   316b0:	smull	r1, r2, r2, r3
   316b4:	add	r2, r2, r3
   316b8:	asr	r3, r3, #31
   316bc:	rsb	r3, r3, r2, asr #2
   316c0:	mov	r2, #2
   316c4:	add	r3, r3, #1
   316c8:	str	r2, [sp, #48]	; 0x30
   316cc:	b	30638 <renameat2@@Base+0x1924>
   316d0:	ldr	lr, [pc, #-1524]	; 310e4 <renameat2@@Base+0x23d0>
   316d4:	add	r3, r8, #1888	; 0x760
   316d8:	sub	lr, lr, r2
   316dc:	add	r3, r3, #12
   316e0:	cmp	r8, lr
   316e4:	mov	r0, #0
   316e8:	add	r3, r3, r2
   316ec:	mov	r2, #4
   316f0:	movge	lr, #0
   316f4:	movlt	lr, #1
   316f8:	str	r0, [sp, #52]	; 0x34
   316fc:	str	r2, [sp, #48]	; 0x30
   31700:	b	30644 <renameat2@@Base+0x1930>
   31704:	ldr	r1, [pc, #-1576]	; 310e4 <renameat2@@Base+0x23d0>
   31708:	cmp	r2, r1
   3170c:	blt	30fb0 <renameat2@@Base+0x229c>
   31710:	mov	r2, #2
   31714:	add	r3, r3, #100	; 0x64
   31718:	str	r2, [sp, #48]	; 0x30
   3171c:	b	30638 <renameat2@@Base+0x1924>
   31720:	bl	11afc <memcpy@plt>
   31724:	b	30dd0 <renameat2@@Base+0x20bc>
   31728:	mov	r2, r7
   3172c:	ldr	r1, [sp, #40]	; 0x28
   31730:	mov	r0, r9
   31734:	bl	30058 <renameat2@@Base+0x1344>
   31738:	b	30dd0 <renameat2@@Base+0x20bc>
   3173c:	add	r1, r5, #2
   31740:	mov	r0, #1
   31744:	mov	r2, r1
   31748:	ldrb	r3, [r1], #1
   3174c:	add	r0, r0, #1
   31750:	cmp	r3, #58	; 0x3a
   31754:	beq	31744 <renameat2@@Base+0x2a30>
   31758:	str	r0, [sp, #48]	; 0x30
   3175c:	b	312c8 <renameat2@@Base+0x25b4>
   31760:	mov	r7, r5
   31764:	mov	r4, #1
   31768:	b	3084c <renameat2@@Base+0x1b38>
   3176c:	mov	r1, sl
   31770:	ldr	r9, [sp, #56]	; 0x38
   31774:	bl	11df0 <memset@plt>
   31778:	ldr	r3, [sp, #60]	; 0x3c
   3177c:	b	314b8 <renameat2@@Base+0x27a4>
   31780:	mov	r0, r9
   31784:	mov	r1, sl
   31788:	bl	11df0 <memset@plt>
   3178c:	mov	r9, r7
   31790:	ldrb	r4, [r5]
   31794:	b	312a8 <renameat2@@Base+0x2594>
   31798:	sub	r7, r6, #1
   3179c:	mov	r0, r9
   317a0:	mov	r2, r7
   317a4:	mov	r1, #32
   317a8:	str	r3, [sp, #48]	; 0x30
   317ac:	add	r9, r9, r7
   317b0:	bl	11df0 <memset@plt>
   317b4:	ldr	r3, [sp, #48]	; 0x30
   317b8:	b	31590 <renameat2@@Base+0x287c>
   317bc:	mov	r1, sl
   317c0:	bl	11df0 <memset@plt>
   317c4:	mov	r9, r8
   317c8:	ldr	r3, [sp, #56]	; 0x38
   317cc:	b	30cf0 <renameat2@@Base+0x1fdc>
   317d0:	ldr	r3, [sp, #1196]	; 0x4ac
   317d4:	str	r6, [sp, #48]	; 0x30
   317d8:	b	30638 <renameat2@@Base+0x1924>
   317dc:	bl	11b50 <__stack_chk_fail@plt>
   317e0:	mov	r3, #0
   317e4:	str	r3, [sp, #48]	; 0x30
   317e8:	b	30670 <renameat2@@Base+0x195c>
   317ec:	mov	r5, r7
   317f0:	b	30818 <renameat2@@Base+0x1b04>
   317f4:	ldrb	r3, [r5]
   317f8:	mov	r7, r5
   317fc:	b	31020 <renameat2@@Base+0x230c>
   31800:	push	{r4, r5, lr}
   31804:	sub	sp, sp, #28
   31808:	ldr	r4, [pc, #72]	; 31858 <renameat2@@Base+0x2b44>
   3180c:	ldr	ip, [sp, #44]	; 0x2c
   31810:	ldr	r5, [sp, #40]	; 0x28
   31814:	ldr	lr, [r4]
   31818:	str	ip, [sp, #12]
   3181c:	str	lr, [sp, #20]
   31820:	mov	ip, #0
   31824:	add	lr, sp, #19
   31828:	str	r5, [sp, #8]
   3182c:	str	ip, [sp]
   31830:	str	lr, [sp, #4]
   31834:	strb	ip, [sp, #19]
   31838:	bl	300d8 <renameat2@@Base+0x13c4>
   3183c:	ldr	r2, [sp, #20]
   31840:	ldr	r3, [r4]
   31844:	cmp	r2, r3
   31848:	bne	31854 <renameat2@@Base+0x2b40>
   3184c:	add	sp, sp, #28
   31850:	pop	{r4, r5, pc}
   31854:	bl	11b50 <__stack_chk_fail@plt>
   31858:	andeq	r7, r4, r8, lsl #30
   3185c:	subs	r2, r1, #1
   31860:	bxeq	lr
   31864:	bcc	31a3c <renameat2@@Base+0x2d28>
   31868:	cmp	r0, r1
   3186c:	bls	31a20 <renameat2@@Base+0x2d0c>
   31870:	tst	r1, r2
   31874:	beq	31a2c <renameat2@@Base+0x2d18>
   31878:	clz	r3, r0
   3187c:	clz	r2, r1
   31880:	sub	r3, r2, r3
   31884:	rsbs	r3, r3, #31
   31888:	addne	r3, r3, r3, lsl #1
   3188c:	mov	r2, #0
   31890:	addne	pc, pc, r3, lsl #2
   31894:	nop			; (mov r0, r0)
   31898:	cmp	r0, r1, lsl #31
   3189c:	adc	r2, r2, r2
   318a0:	subcs	r0, r0, r1, lsl #31
   318a4:	cmp	r0, r1, lsl #30
   318a8:	adc	r2, r2, r2
   318ac:	subcs	r0, r0, r1, lsl #30
   318b0:	cmp	r0, r1, lsl #29
   318b4:	adc	r2, r2, r2
   318b8:	subcs	r0, r0, r1, lsl #29
   318bc:	cmp	r0, r1, lsl #28
   318c0:	adc	r2, r2, r2
   318c4:	subcs	r0, r0, r1, lsl #28
   318c8:	cmp	r0, r1, lsl #27
   318cc:	adc	r2, r2, r2
   318d0:	subcs	r0, r0, r1, lsl #27
   318d4:	cmp	r0, r1, lsl #26
   318d8:	adc	r2, r2, r2
   318dc:	subcs	r0, r0, r1, lsl #26
   318e0:	cmp	r0, r1, lsl #25
   318e4:	adc	r2, r2, r2
   318e8:	subcs	r0, r0, r1, lsl #25
   318ec:	cmp	r0, r1, lsl #24
   318f0:	adc	r2, r2, r2
   318f4:	subcs	r0, r0, r1, lsl #24
   318f8:	cmp	r0, r1, lsl #23
   318fc:	adc	r2, r2, r2
   31900:	subcs	r0, r0, r1, lsl #23
   31904:	cmp	r0, r1, lsl #22
   31908:	adc	r2, r2, r2
   3190c:	subcs	r0, r0, r1, lsl #22
   31910:	cmp	r0, r1, lsl #21
   31914:	adc	r2, r2, r2
   31918:	subcs	r0, r0, r1, lsl #21
   3191c:	cmp	r0, r1, lsl #20
   31920:	adc	r2, r2, r2
   31924:	subcs	r0, r0, r1, lsl #20
   31928:	cmp	r0, r1, lsl #19
   3192c:	adc	r2, r2, r2
   31930:	subcs	r0, r0, r1, lsl #19
   31934:	cmp	r0, r1, lsl #18
   31938:	adc	r2, r2, r2
   3193c:	subcs	r0, r0, r1, lsl #18
   31940:	cmp	r0, r1, lsl #17
   31944:	adc	r2, r2, r2
   31948:	subcs	r0, r0, r1, lsl #17
   3194c:	cmp	r0, r1, lsl #16
   31950:	adc	r2, r2, r2
   31954:	subcs	r0, r0, r1, lsl #16
   31958:	cmp	r0, r1, lsl #15
   3195c:	adc	r2, r2, r2
   31960:	subcs	r0, r0, r1, lsl #15
   31964:	cmp	r0, r1, lsl #14
   31968:	adc	r2, r2, r2
   3196c:	subcs	r0, r0, r1, lsl #14
   31970:	cmp	r0, r1, lsl #13
   31974:	adc	r2, r2, r2
   31978:	subcs	r0, r0, r1, lsl #13
   3197c:	cmp	r0, r1, lsl #12
   31980:	adc	r2, r2, r2
   31984:	subcs	r0, r0, r1, lsl #12
   31988:	cmp	r0, r1, lsl #11
   3198c:	adc	r2, r2, r2
   31990:	subcs	r0, r0, r1, lsl #11
   31994:	cmp	r0, r1, lsl #10
   31998:	adc	r2, r2, r2
   3199c:	subcs	r0, r0, r1, lsl #10
   319a0:	cmp	r0, r1, lsl #9
   319a4:	adc	r2, r2, r2
   319a8:	subcs	r0, r0, r1, lsl #9
   319ac:	cmp	r0, r1, lsl #8
   319b0:	adc	r2, r2, r2
   319b4:	subcs	r0, r0, r1, lsl #8
   319b8:	cmp	r0, r1, lsl #7
   319bc:	adc	r2, r2, r2
   319c0:	subcs	r0, r0, r1, lsl #7
   319c4:	cmp	r0, r1, lsl #6
   319c8:	adc	r2, r2, r2
   319cc:	subcs	r0, r0, r1, lsl #6
   319d0:	cmp	r0, r1, lsl #5
   319d4:	adc	r2, r2, r2
   319d8:	subcs	r0, r0, r1, lsl #5
   319dc:	cmp	r0, r1, lsl #4
   319e0:	adc	r2, r2, r2
   319e4:	subcs	r0, r0, r1, lsl #4
   319e8:	cmp	r0, r1, lsl #3
   319ec:	adc	r2, r2, r2
   319f0:	subcs	r0, r0, r1, lsl #3
   319f4:	cmp	r0, r1, lsl #2
   319f8:	adc	r2, r2, r2
   319fc:	subcs	r0, r0, r1, lsl #2
   31a00:	cmp	r0, r1, lsl #1
   31a04:	adc	r2, r2, r2
   31a08:	subcs	r0, r0, r1, lsl #1
   31a0c:	cmp	r0, r1
   31a10:	adc	r2, r2, r2
   31a14:	subcs	r0, r0, r1
   31a18:	mov	r0, r2
   31a1c:	bx	lr
   31a20:	moveq	r0, #1
   31a24:	movne	r0, #0
   31a28:	bx	lr
   31a2c:	clz	r2, r1
   31a30:	rsb	r2, r2, #31
   31a34:	lsr	r0, r0, r2
   31a38:	bx	lr
   31a3c:	cmp	r0, #0
   31a40:	mvnne	r0, #0
   31a44:	b	31db8 <renameat2@@Base+0x30a4>
   31a48:	cmp	r1, #0
   31a4c:	beq	31a3c <renameat2@@Base+0x2d28>
   31a50:	push	{r0, r1, lr}
   31a54:	bl	3185c <renameat2@@Base+0x2b48>
   31a58:	pop	{r1, r2, lr}
   31a5c:	mul	r3, r2, r0
   31a60:	sub	r1, r1, r3
   31a64:	bx	lr
   31a68:	cmp	r1, #0
   31a6c:	beq	31c78 <renameat2@@Base+0x2f64>
   31a70:	eor	ip, r0, r1
   31a74:	rsbmi	r1, r1, #0
   31a78:	subs	r2, r1, #1
   31a7c:	beq	31c44 <renameat2@@Base+0x2f30>
   31a80:	movs	r3, r0
   31a84:	rsbmi	r3, r0, #0
   31a88:	cmp	r3, r1
   31a8c:	bls	31c50 <renameat2@@Base+0x2f3c>
   31a90:	tst	r1, r2
   31a94:	beq	31c60 <renameat2@@Base+0x2f4c>
   31a98:	clz	r2, r3
   31a9c:	clz	r0, r1
   31aa0:	sub	r2, r0, r2
   31aa4:	rsbs	r2, r2, #31
   31aa8:	addne	r2, r2, r2, lsl #1
   31aac:	mov	r0, #0
   31ab0:	addne	pc, pc, r2, lsl #2
   31ab4:	nop			; (mov r0, r0)
   31ab8:	cmp	r3, r1, lsl #31
   31abc:	adc	r0, r0, r0
   31ac0:	subcs	r3, r3, r1, lsl #31
   31ac4:	cmp	r3, r1, lsl #30
   31ac8:	adc	r0, r0, r0
   31acc:	subcs	r3, r3, r1, lsl #30
   31ad0:	cmp	r3, r1, lsl #29
   31ad4:	adc	r0, r0, r0
   31ad8:	subcs	r3, r3, r1, lsl #29
   31adc:	cmp	r3, r1, lsl #28
   31ae0:	adc	r0, r0, r0
   31ae4:	subcs	r3, r3, r1, lsl #28
   31ae8:	cmp	r3, r1, lsl #27
   31aec:	adc	r0, r0, r0
   31af0:	subcs	r3, r3, r1, lsl #27
   31af4:	cmp	r3, r1, lsl #26
   31af8:	adc	r0, r0, r0
   31afc:	subcs	r3, r3, r1, lsl #26
   31b00:	cmp	r3, r1, lsl #25
   31b04:	adc	r0, r0, r0
   31b08:	subcs	r3, r3, r1, lsl #25
   31b0c:	cmp	r3, r1, lsl #24
   31b10:	adc	r0, r0, r0
   31b14:	subcs	r3, r3, r1, lsl #24
   31b18:	cmp	r3, r1, lsl #23
   31b1c:	adc	r0, r0, r0
   31b20:	subcs	r3, r3, r1, lsl #23
   31b24:	cmp	r3, r1, lsl #22
   31b28:	adc	r0, r0, r0
   31b2c:	subcs	r3, r3, r1, lsl #22
   31b30:	cmp	r3, r1, lsl #21
   31b34:	adc	r0, r0, r0
   31b38:	subcs	r3, r3, r1, lsl #21
   31b3c:	cmp	r3, r1, lsl #20
   31b40:	adc	r0, r0, r0
   31b44:	subcs	r3, r3, r1, lsl #20
   31b48:	cmp	r3, r1, lsl #19
   31b4c:	adc	r0, r0, r0
   31b50:	subcs	r3, r3, r1, lsl #19
   31b54:	cmp	r3, r1, lsl #18
   31b58:	adc	r0, r0, r0
   31b5c:	subcs	r3, r3, r1, lsl #18
   31b60:	cmp	r3, r1, lsl #17
   31b64:	adc	r0, r0, r0
   31b68:	subcs	r3, r3, r1, lsl #17
   31b6c:	cmp	r3, r1, lsl #16
   31b70:	adc	r0, r0, r0
   31b74:	subcs	r3, r3, r1, lsl #16
   31b78:	cmp	r3, r1, lsl #15
   31b7c:	adc	r0, r0, r0
   31b80:	subcs	r3, r3, r1, lsl #15
   31b84:	cmp	r3, r1, lsl #14
   31b88:	adc	r0, r0, r0
   31b8c:	subcs	r3, r3, r1, lsl #14
   31b90:	cmp	r3, r1, lsl #13
   31b94:	adc	r0, r0, r0
   31b98:	subcs	r3, r3, r1, lsl #13
   31b9c:	cmp	r3, r1, lsl #12
   31ba0:	adc	r0, r0, r0
   31ba4:	subcs	r3, r3, r1, lsl #12
   31ba8:	cmp	r3, r1, lsl #11
   31bac:	adc	r0, r0, r0
   31bb0:	subcs	r3, r3, r1, lsl #11
   31bb4:	cmp	r3, r1, lsl #10
   31bb8:	adc	r0, r0, r0
   31bbc:	subcs	r3, r3, r1, lsl #10
   31bc0:	cmp	r3, r1, lsl #9
   31bc4:	adc	r0, r0, r0
   31bc8:	subcs	r3, r3, r1, lsl #9
   31bcc:	cmp	r3, r1, lsl #8
   31bd0:	adc	r0, r0, r0
   31bd4:	subcs	r3, r3, r1, lsl #8
   31bd8:	cmp	r3, r1, lsl #7
   31bdc:	adc	r0, r0, r0
   31be0:	subcs	r3, r3, r1, lsl #7
   31be4:	cmp	r3, r1, lsl #6
   31be8:	adc	r0, r0, r0
   31bec:	subcs	r3, r3, r1, lsl #6
   31bf0:	cmp	r3, r1, lsl #5
   31bf4:	adc	r0, r0, r0
   31bf8:	subcs	r3, r3, r1, lsl #5
   31bfc:	cmp	r3, r1, lsl #4
   31c00:	adc	r0, r0, r0
   31c04:	subcs	r3, r3, r1, lsl #4
   31c08:	cmp	r3, r1, lsl #3
   31c0c:	adc	r0, r0, r0
   31c10:	subcs	r3, r3, r1, lsl #3
   31c14:	cmp	r3, r1, lsl #2
   31c18:	adc	r0, r0, r0
   31c1c:	subcs	r3, r3, r1, lsl #2
   31c20:	cmp	r3, r1, lsl #1
   31c24:	adc	r0, r0, r0
   31c28:	subcs	r3, r3, r1, lsl #1
   31c2c:	cmp	r3, r1
   31c30:	adc	r0, r0, r0
   31c34:	subcs	r3, r3, r1
   31c38:	cmp	ip, #0
   31c3c:	rsbmi	r0, r0, #0
   31c40:	bx	lr
   31c44:	teq	ip, r0
   31c48:	rsbmi	r0, r0, #0
   31c4c:	bx	lr
   31c50:	movcc	r0, #0
   31c54:	asreq	r0, ip, #31
   31c58:	orreq	r0, r0, #1
   31c5c:	bx	lr
   31c60:	clz	r2, r1
   31c64:	rsb	r2, r2, #31
   31c68:	cmp	ip, #0
   31c6c:	lsr	r0, r3, r2
   31c70:	rsbmi	r0, r0, #0
   31c74:	bx	lr
   31c78:	cmp	r0, #0
   31c7c:	mvngt	r0, #-2147483648	; 0x80000000
   31c80:	movlt	r0, #-2147483648	; 0x80000000
   31c84:	b	31db8 <renameat2@@Base+0x30a4>
   31c88:	cmp	r1, #0
   31c8c:	beq	31c78 <renameat2@@Base+0x2f64>
   31c90:	push	{r0, r1, lr}
   31c94:	bl	31a70 <renameat2@@Base+0x2d5c>
   31c98:	pop	{r1, r2, lr}
   31c9c:	mul	r3, r2, r0
   31ca0:	sub	r1, r1, r3
   31ca4:	bx	lr
   31ca8:	cmp	r3, #0
   31cac:	cmpeq	r2, #0
   31cb0:	bne	31cd4 <renameat2@@Base+0x2fc0>
   31cb4:	cmp	r1, #0
   31cb8:	movlt	r1, #-2147483648	; 0x80000000
   31cbc:	movlt	r0, #0
   31cc0:	blt	31cd0 <renameat2@@Base+0x2fbc>
   31cc4:	cmpeq	r0, #0
   31cc8:	mvnne	r1, #-2147483648	; 0x80000000
   31ccc:	mvnne	r0, #0
   31cd0:	b	31db8 <renameat2@@Base+0x30a4>
   31cd4:	sub	sp, sp, #8
   31cd8:	push	{sp, lr}
   31cdc:	cmp	r1, #0
   31ce0:	blt	31d00 <renameat2@@Base+0x2fec>
   31ce4:	cmp	r3, #0
   31ce8:	blt	31d34 <renameat2@@Base+0x3020>
   31cec:	bl	31dc8 <renameat2@@Base+0x30b4>
   31cf0:	ldr	lr, [sp, #4]
   31cf4:	add	sp, sp, #8
   31cf8:	pop	{r2, r3}
   31cfc:	bx	lr
   31d00:	rsbs	r0, r0, #0
   31d04:	sbc	r1, r1, r1, lsl #1
   31d08:	cmp	r3, #0
   31d0c:	blt	31d58 <renameat2@@Base+0x3044>
   31d10:	bl	31dc8 <renameat2@@Base+0x30b4>
   31d14:	ldr	lr, [sp, #4]
   31d18:	add	sp, sp, #8
   31d1c:	pop	{r2, r3}
   31d20:	rsbs	r0, r0, #0
   31d24:	sbc	r1, r1, r1, lsl #1
   31d28:	rsbs	r2, r2, #0
   31d2c:	sbc	r3, r3, r3, lsl #1
   31d30:	bx	lr
   31d34:	rsbs	r2, r2, #0
   31d38:	sbc	r3, r3, r3, lsl #1
   31d3c:	bl	31dc8 <renameat2@@Base+0x30b4>
   31d40:	ldr	lr, [sp, #4]
   31d44:	add	sp, sp, #8
   31d48:	pop	{r2, r3}
   31d4c:	rsbs	r0, r0, #0
   31d50:	sbc	r1, r1, r1, lsl #1
   31d54:	bx	lr
   31d58:	rsbs	r2, r2, #0
   31d5c:	sbc	r3, r3, r3, lsl #1
   31d60:	bl	31dc8 <renameat2@@Base+0x30b4>
   31d64:	ldr	lr, [sp, #4]
   31d68:	add	sp, sp, #8
   31d6c:	pop	{r2, r3}
   31d70:	rsbs	r2, r2, #0
   31d74:	sbc	r3, r3, r3, lsl #1
   31d78:	bx	lr
   31d7c:	cmp	r3, #0
   31d80:	cmpeq	r2, #0
   31d84:	bne	31d9c <renameat2@@Base+0x3088>
   31d88:	cmp	r1, #0
   31d8c:	cmpeq	r0, #0
   31d90:	mvnne	r1, #0
   31d94:	mvnne	r0, #0
   31d98:	b	31db8 <renameat2@@Base+0x30a4>
   31d9c:	sub	sp, sp, #8
   31da0:	push	{sp, lr}
   31da4:	bl	31dc8 <renameat2@@Base+0x30b4>
   31da8:	ldr	lr, [sp, #4]
   31dac:	add	sp, sp, #8
   31db0:	pop	{r2, r3}
   31db4:	bx	lr
   31db8:	push	{r1, lr}
   31dbc:	mov	r0, #8
   31dc0:	bl	11a18 <raise@plt>
   31dc4:	pop	{r1, pc}
   31dc8:	cmp	r1, r3
   31dcc:	cmpeq	r0, r2
   31dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31dd4:	mov	r4, r0
   31dd8:	movcc	r0, #0
   31ddc:	mov	r5, r1
   31de0:	ldr	lr, [sp, #36]	; 0x24
   31de4:	movcc	r1, r0
   31de8:	bcc	31ee4 <renameat2@@Base+0x31d0>
   31dec:	cmp	r3, #0
   31df0:	clzeq	ip, r2
   31df4:	clzne	ip, r3
   31df8:	addeq	ip, ip, #32
   31dfc:	cmp	r5, #0
   31e00:	clzeq	r1, r4
   31e04:	addeq	r1, r1, #32
   31e08:	clzne	r1, r5
   31e0c:	sub	ip, ip, r1
   31e10:	sub	sl, ip, #32
   31e14:	lsl	r9, r3, ip
   31e18:	rsb	fp, ip, #32
   31e1c:	orr	r9, r9, r2, lsl sl
   31e20:	orr	r9, r9, r2, lsr fp
   31e24:	lsl	r8, r2, ip
   31e28:	cmp	r5, r9
   31e2c:	cmpeq	r4, r8
   31e30:	movcc	r0, #0
   31e34:	movcc	r1, r0
   31e38:	bcc	31e54 <renameat2@@Base+0x3140>
   31e3c:	mov	r0, #1
   31e40:	subs	r4, r4, r8
   31e44:	lsl	r1, r0, sl
   31e48:	orr	r1, r1, r0, lsr fp
   31e4c:	lsl	r0, r0, ip
   31e50:	sbc	r5, r5, r9
   31e54:	cmp	ip, #0
   31e58:	beq	31ee4 <renameat2@@Base+0x31d0>
   31e5c:	lsr	r6, r8, #1
   31e60:	orr	r6, r6, r9, lsl #31
   31e64:	lsr	r7, r9, #1
   31e68:	mov	r2, ip
   31e6c:	b	31e90 <renameat2@@Base+0x317c>
   31e70:	subs	r3, r4, r6
   31e74:	sbc	r8, r5, r7
   31e78:	adds	r3, r3, r3
   31e7c:	adc	r8, r8, r8
   31e80:	adds	r4, r3, #1
   31e84:	adc	r5, r8, #0
   31e88:	subs	r2, r2, #1
   31e8c:	beq	31eac <renameat2@@Base+0x3198>
   31e90:	cmp	r5, r7
   31e94:	cmpeq	r4, r6
   31e98:	bcs	31e70 <renameat2@@Base+0x315c>
   31e9c:	adds	r4, r4, r4
   31ea0:	adc	r5, r5, r5
   31ea4:	subs	r2, r2, #1
   31ea8:	bne	31e90 <renameat2@@Base+0x317c>
   31eac:	lsr	r3, r4, ip
   31eb0:	orr	r3, r3, r5, lsl fp
   31eb4:	lsr	r2, r5, ip
   31eb8:	orr	r3, r3, r5, lsr sl
   31ebc:	adds	r0, r0, r4
   31ec0:	mov	r4, r3
   31ec4:	lsl	r3, r2, ip
   31ec8:	orr	r3, r3, r4, lsl sl
   31ecc:	lsl	ip, r4, ip
   31ed0:	orr	r3, r3, r4, lsr fp
   31ed4:	adc	r1, r1, r5
   31ed8:	subs	r0, r0, ip
   31edc:	mov	r5, r2
   31ee0:	sbc	r1, r1, r3
   31ee4:	cmp	lr, #0
   31ee8:	strdne	r4, [lr]
   31eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31ef0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31ef4:	mov	r7, r0
   31ef8:	ldr	r6, [pc, #72]	; 31f48 <renameat2@@Base+0x3234>
   31efc:	ldr	r5, [pc, #72]	; 31f4c <renameat2@@Base+0x3238>
   31f00:	add	r6, pc, r6
   31f04:	add	r5, pc, r5
   31f08:	sub	r6, r6, r5
   31f0c:	mov	r8, r1
   31f10:	mov	r9, r2
   31f14:	bl	119e0 <fdopen@plt-0x20>
   31f18:	asrs	r6, r6, #2
   31f1c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   31f20:	mov	r4, #0
   31f24:	add	r4, r4, #1
   31f28:	ldr	r3, [r5], #4
   31f2c:	mov	r2, r9
   31f30:	mov	r1, r8
   31f34:	mov	r0, r7
   31f38:	blx	r3
   31f3c:	cmp	r6, r4
   31f40:	bne	31f24 <renameat2@@Base+0x3210>
   31f44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31f48:	strdeq	r5, [r1], -ip
   31f4c:	strdeq	r5, [r1], -r4
   31f50:	bx	lr

Disassembly of section .fini:

00031f54 <.fini>:
   31f54:	push	{r3, lr}
   31f58:	pop	{r3, pc}
