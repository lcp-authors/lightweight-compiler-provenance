
raspbian-preinstalled/update-alternatives:     file format elf32-littlearm


Disassembly of section .init:

00010e10 <.init>:
   10e10:	push	{r3, lr}
   10e14:	bl	129a4 <__assert_fail@plt+0x18bc>
   10e18:	pop	{r3, pc}

Disassembly of section .plt:

00010e1c <fsync@plt-0x14>:
   10e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e20:	ldr	lr, [pc, #4]	; 10e2c <fsync@plt-0x4>
   10e24:	add	lr, pc, lr
   10e28:	ldr	pc, [lr, #8]!
   10e2c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>

00010e30 <fsync@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #216]!	; 0xd8

00010e3c <strcmp@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #208]!	; 0xd0

00010e48 <strtol@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #200]!	; 0xc8

00010e54 <alphasort64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #192]!	; 0xc0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #184]!	; 0xb8

00010e6c <_setjmp@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #176]!	; 0xb0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #168]!	; 0xa8

00010e84 <fgets@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #160]!	; 0xa0

00010e90 <execvp@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #152]!	; 0x98

00010e9c <time@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #144]!	; 0x90

00010ea8 <dcgettext@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #136]!	; 0x88

00010eb4 <strdup@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #128]!	; 0x80

00010ec0 <__stack_chk_fail@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #120]!	; 0x78

00010ecc <unlink@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #112]!	; 0x70

00010ed8 <realloc@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #104]!	; 0x68

00010ee4 <textdomain@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #96]!	; 0x60

00010ef0 <__fxstat64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #88]!	; 0x58

00010efc <readlink@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #80]!	; 0x50

00010f08 <fwrite@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #72]!	; 0x48

00010f14 <waitpid@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #64]!	; 0x40

00010f20 <strcpy@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #56]!	; 0x38

00010f2c <getenv@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #48]!	; 0x30

00010f38 <malloc@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #40]!	; 0x28

00010f44 <__libc_start_main@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #32]!

00010f50 <strerror@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #24]!

00010f5c <strftime@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #16]!

00010f68 <__vfprintf_chk@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #8]!

00010f74 <localtime@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #0]!

00010f80 <__gmon_start__@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #4088]!	; 0xff8

00010f8c <rename@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #4080]!	; 0xff0

00010f98 <__ctype_b_loc@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #4072]!	; 0xfe8

00010fa4 <exit@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #4064]!	; 0xfe0

00010fb0 <feof@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #4056]!	; 0xfd8

00010fbc <strlen@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #4048]!	; 0xfd0

00010fc8 <strchr@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #4040]!	; 0xfc8

00010fd4 <__errno_location@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #4032]!	; 0xfc0

00010fe0 <__vasprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #4024]!	; 0xfb8

00010fec <setvbuf@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #4016]!	; 0xfb0

00010ff8 <putchar@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #4008]!	; 0xfa8

00011004 <__printf_chk@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011010 <fileno@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #3992]!	; 0xf98

0001101c <__fprintf_chk@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #3984]!	; 0xf90

00011028 <fclose@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #3976]!	; 0xf88

00011034 <__longjmp_chk@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #3968]!	; 0xf80

00011040 <setlocale@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #3960]!	; 0xf78

0001104c <fork@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #3952]!	; 0xf70

00011058 <fputc@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #3944]!	; 0xf68

00011064 <symlink@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #3936]!	; 0xf60

00011070 <fopen64@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #3928]!	; 0xf58

0001107c <qsort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #3920]!	; 0xf50

00011088 <strpbrk@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #3912]!	; 0xf48

00011094 <bindtextdomain@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #3904]!	; 0xf40

000110a0 <scandir64@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #3896]!	; 0xf38

000110ac <__xstat64@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #3888]!	; 0xf30

000110b8 <strncmp@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #3880]!	; 0xf28

000110c4 <abort@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #3872]!	; 0xf20

000110d0 <__lxstat64@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #3864]!	; 0xf18

000110dc <dcngettext@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #3856]!	; 0xf10

000110e8 <__assert_fail@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #3848]!	; 0xf08

Disassembly of section .text:

000110f4 <.text>:
   110f4:	ldr	r3, [pc, #3928]	; 12054 <__assert_fail@plt+0xf6c>
   110f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110fc:	sub	sp, sp, #60	; 0x3c
   11100:	ldr	r3, [r3]
   11104:	str	r0, [sp, #20]
   11108:	mov	r4, r0
   1110c:	mov	r5, r1
   11110:	mov	r0, #6
   11114:	ldr	r1, [pc, #3900]	; 12058 <__assert_fail@plt+0xf70>
   11118:	str	r3, [sp, #52]	; 0x34
   1111c:	bl	11040 <setlocale@plt>
   11120:	ldr	r1, [pc, #3892]	; 1205c <__assert_fail@plt+0xf74>
   11124:	ldr	r0, [pc, #3892]	; 12060 <__assert_fail@plt+0xf78>
   11128:	bl	11094 <bindtextdomain@plt>
   1112c:	ldr	r0, [pc, #3884]	; 12060 <__assert_fail@plt+0xf78>
   11130:	bl	10ee4 <textdomain@plt>
   11134:	ldr	r0, [pc, #3880]	; 12064 <__assert_fail@plt+0xf7c>
   11138:	bl	10f2c <getenv@plt>
   1113c:	ldr	r1, [pc, #3876]	; 12068 <__assert_fail@plt+0xf80>
   11140:	ldr	r2, [pc, #3876]	; 1206c <__assert_fail@plt+0xf84>
   11144:	cmp	r0, #0
   11148:	movne	r1, r0
   1114c:	ldr	r0, [pc, #3868]	; 12070 <__assert_fail@plt+0xf88>
   11150:	bl	135f4 <__assert_fail@plt+0x250c>
   11154:	ldr	ip, [pc, #3864]	; 12074 <__assert_fail@plt+0xf8c>
   11158:	ldr	lr, [pc, #3864]	; 12078 <__assert_fail@plt+0xf90>
   1115c:	mov	r3, #0
   11160:	mov	r1, r3
   11164:	mov	r2, #2
   11168:	str	r0, [lr, #16]
   1116c:	ldr	r0, [ip]
   11170:	bl	10fec <setvbuf@plt>
   11174:	subs	r3, r0, #0
   11178:	str	r3, [sp, #24]
   1117c:	bne	128c0 <__assert_fail@plt+0x17d8>
   11180:	cmp	r4, #1
   11184:	strle	r3, [sp, #36]	; 0x24
   11188:	strle	r3, [sp, #16]
   1118c:	strle	r3, [sp, #12]
   11190:	strle	r3, [sp, #8]
   11194:	ble	11264 <__assert_fail@plt+0x17c>
   11198:	ldr	r3, [sp, #24]
   1119c:	ldr	r7, [pc, #3800]	; 1207c <__assert_fail@plt+0xf94>
   111a0:	ldr	fp, [pc, #3800]	; 12080 <__assert_fail@plt+0xf98>
   111a4:	mov	r4, #1
   111a8:	str	r3, [sp, #36]	; 0x24
   111ac:	str	r3, [sp, #16]
   111b0:	str	r3, [sp, #12]
   111b4:	str	r3, [sp, #8]
   111b8:	ldr	r9, [sp, #20]
   111bc:	b	111d8 <__assert_fail@plt+0xf0>
   111c0:	ldr	r2, [pc, #3760]	; 12078 <__assert_fail@plt+0xf90>
   111c4:	mvn	r3, #0
   111c8:	str	r3, [r2]
   111cc:	add	r4, r4, #1
   111d0:	cmp	r9, r4
   111d4:	ble	11264 <__assert_fail@plt+0x17c>
   111d8:	ldr	r8, [r5, r4, lsl #2]
   111dc:	mov	r2, #2
   111e0:	mov	r0, r8
   111e4:	mov	r1, r7
   111e8:	bl	110b8 <strncmp@plt>
   111ec:	lsl	r6, r4, #2
   111f0:	add	sl, r5, r6
   111f4:	cmp	r0, #0
   111f8:	bne	1227c <__assert_fail@plt+0x1194>
   111fc:	mov	r1, r8
   11200:	mov	r0, fp
   11204:	bl	10e3c <strcmp@plt>
   11208:	subs	r3, r0, #0
   1120c:	beq	115a8 <__assert_fail@plt+0x4c0>
   11210:	mov	r1, r8
   11214:	ldr	r0, [pc, #3688]	; 12084 <__assert_fail@plt+0xf9c>
   11218:	bl	10e3c <strcmp@plt>
   1121c:	subs	r3, r0, #0
   11220:	beq	1162c <__assert_fail@plt+0x544>
   11224:	mov	r1, r8
   11228:	ldr	r0, [pc, #3672]	; 12088 <__assert_fail@plt+0xfa0>
   1122c:	bl	10e3c <strcmp@plt>
   11230:	cmp	r0, #0
   11234:	beq	111c0 <__assert_fail@plt+0xd8>
   11238:	mov	r1, r8
   1123c:	ldr	r0, [pc, #3656]	; 1208c <__assert_fail@plt+0xfa4>
   11240:	bl	10e3c <strcmp@plt>
   11244:	cmp	r0, #0
   11248:	bne	11398 <__assert_fail@plt+0x2b0>
   1124c:	ldr	r2, [pc, #3620]	; 12078 <__assert_fail@plt+0xf90>
   11250:	add	r4, r4, #1
   11254:	mov	r3, #1
   11258:	cmp	r9, r4
   1125c:	str	r3, [r2]
   11260:	bgt	111d8 <__assert_fail@plt+0xf0>
   11264:	ldr	r3, [pc, #3596]	; 12078 <__assert_fail@plt+0xf90>
   11268:	ldr	r0, [r3, #8]
   1126c:	cmp	r0, #0
   11270:	beq	12888 <__assert_fail@plt+0x17a0>
   11274:	bic	r4, r0, #4
   11278:	sub	r3, r0, #8
   1127c:	sub	r2, r4, #1
   11280:	cmp	r3, #1
   11284:	cmphi	r2, #1
   11288:	movls	r3, #1
   1128c:	movhi	r3, #0
   11290:	str	r3, [sp, #40]	; 0x28
   11294:	bhi	11d8c <__assert_fail@plt+0xca4>
   11298:	cmp	r0, #1
   1129c:	beq	117c8 <__assert_fail@plt+0x6e0>
   112a0:	ldr	r3, [pc, #3536]	; 12078 <__assert_fail@plt+0xf90>
   112a4:	ldr	r0, [r3, #8]
   112a8:	sub	r6, r0, #5
   112ac:	sub	r3, r0, #9
   112b0:	cmp	r3, #3
   112b4:	cmphi	r6, #1
   112b8:	movls	r6, #1
   112bc:	movhi	r6, #0
   112c0:	cmp	r0, #2
   112c4:	orreq	r6, r6, #1
   112c8:	cmp	r6, #0
   112cc:	movne	r4, r6
   112d0:	beq	11c28 <__assert_fail@plt+0xb40>
   112d4:	mov	r1, #2
   112d8:	ldr	r0, [sp, #8]
   112dc:	bl	159d4 <__assert_fail@plt+0x48ec>
   112e0:	cmp	r0, #0
   112e4:	beq	128a8 <__assert_fail@plt+0x17c0>
   112e8:	cmp	r4, #0
   112ec:	bne	11734 <__assert_fail@plt+0x64c>
   112f0:	cmp	r6, #0
   112f4:	moveq	fp, r6
   112f8:	beq	11328 <__assert_fail@plt+0x240>
   112fc:	ldr	r2, [sp, #8]
   11300:	ldrb	r3, [r2, #33]	; 0x21
   11304:	cmp	r3, #0
   11308:	ldrne	fp, [r2, #8]
   1130c:	bne	1131c <__assert_fail@plt+0x234>
   11310:	ldr	r0, [sp, #8]
   11314:	bl	13938 <__assert_fail@plt+0x2850>
   11318:	mov	fp, r0
   1131c:	mov	r1, fp
   11320:	ldr	r0, [sp, #8]
   11324:	bl	14664 <__assert_fail@plt+0x357c>
   11328:	ldr	r3, [pc, #3400]	; 12078 <__assert_fail@plt+0xf90>
   1132c:	ldr	r3, [r3, #8]
   11330:	cmp	r3, #7
   11334:	beq	11b58 <__assert_fail@plt+0xa70>
   11338:	cmp	r3, #4
   1133c:	beq	11c50 <__assert_fail@plt+0xb68>
   11340:	cmp	r3, #3
   11344:	beq	11d34 <__assert_fail@plt+0xc4c>
   11348:	cmp	r3, #12
   1134c:	beq	11dc8 <__assert_fail@plt+0xce0>
   11350:	cmp	r3, #11
   11354:	beq	11e08 <__assert_fail@plt+0xd20>
   11358:	cmp	r3, #10
   1135c:	beq	11d60 <__assert_fail@plt+0xc78>
   11360:	cmp	r3, #2
   11364:	beq	11fb4 <__assert_fail@plt+0xecc>
   11368:	cmp	r3, #5
   1136c:	beq	11d24 <__assert_fail@plt+0xc3c>
   11370:	cmp	r3, #6
   11374:	beq	12040 <__assert_fail@plt+0xf58>
   11378:	cmp	r3, #8
   1137c:	beq	121d8 <__assert_fail@plt+0x10f0>
   11380:	cmp	r3, #9
   11384:	beq	11ffc <__assert_fail@plt+0xf14>
   11388:	cmp	r3, #1
   1138c:	beq	12294 <__assert_fail@plt+0x11ac>
   11390:	mov	r4, #0
   11394:	b	11bec <__assert_fail@plt+0xb04>
   11398:	mov	r1, r8
   1139c:	ldr	r0, [pc, #3308]	; 12090 <__assert_fail@plt+0xfa8>
   113a0:	bl	10e3c <strcmp@plt>
   113a4:	cmp	r0, #0
   113a8:	ldreq	r2, [pc, #3272]	; 12078 <__assert_fail@plt+0xf90>
   113ac:	moveq	r3, #2
   113b0:	streq	r3, [r2]
   113b4:	beq	111cc <__assert_fail@plt+0xe4>
   113b8:	mov	r1, r8
   113bc:	ldr	r0, [pc, #3280]	; 12094 <__assert_fail@plt+0xfac>
   113c0:	bl	10e3c <strcmp@plt>
   113c4:	cmp	r0, #0
   113c8:	bne	114d4 <__assert_fail@plt+0x3ec>
   113cc:	ldr	r3, [pc, #3236]	; 12078 <__assert_fail@plt+0xf90>
   113d0:	ldr	r3, [r3, #8]
   113d4:	cmp	r3, #0
   113d8:	bne	128c8 <__assert_fail@plt+0x17e0>
   113dc:	ldr	r2, [pc, #3220]	; 12078 <__assert_fail@plt+0xf90>
   113e0:	add	r4, r4, #4
   113e4:	mov	r3, #1
   113e8:	cmp	r4, r9
   113ec:	str	r3, [r2, #8]
   113f0:	bge	12898 <__assert_fail@plt+0x17b0>
   113f4:	add	r3, r6, #4
   113f8:	add	r2, r6, #12
   113fc:	ldr	r0, [r5, r3]
   11400:	ldr	r1, [r5, r2]
   11404:	str	r3, [sp, #16]
   11408:	str	r2, [sp, #28]
   1140c:	bl	10e3c <strcmp@plt>
   11410:	ldr	r8, [sl, #16]
   11414:	cmp	r0, #0
   11418:	beq	1286c <__assert_fail@plt+0x1784>
   1141c:	bl	10fd4 <__errno_location@plt>
   11420:	mov	r3, #0
   11424:	mov	r2, #10
   11428:	add	r1, sp, #48	; 0x30
   1142c:	str	r3, [r0]
   11430:	mov	sl, r0
   11434:	mov	r0, r8
   11438:	bl	10e48 <strtol@plt>
   1143c:	ldr	r2, [sp, #48]	; 0x30
   11440:	cmp	r2, r8
   11444:	beq	12858 <__assert_fail@plt+0x1770>
   11448:	ldrb	r8, [r2]
   1144c:	cmp	r8, #0
   11450:	bne	12858 <__assert_fail@plt+0x1770>
   11454:	ldr	r2, [sl]
   11458:	cmp	r2, #34	; 0x22
   1145c:	beq	12844 <__assert_fail@plt+0x175c>
   11460:	add	r6, r6, #8
   11464:	str	r0, [sp, #32]
   11468:	ldr	r0, [r5, r6]
   1146c:	bl	13d24 <__assert_fail@plt+0x2c3c>
   11470:	str	r0, [sp, #8]
   11474:	ldr	r0, [r5, r6]
   11478:	bl	13d24 <__assert_fail@plt+0x2c3c>
   1147c:	mov	r1, #1
   11480:	mov	r6, r0
   11484:	str	r0, [sp, #12]
   11488:	bl	133e8 <__assert_fail@plt+0x2300>
   1148c:	ldr	r3, [sp, #16]
   11490:	add	r1, r6, #32
   11494:	add	r0, r6, #4
   11498:	ldr	r2, [r5, r3]
   1149c:	bl	141f4 <__assert_fail@plt+0x310c>
   114a0:	ldr	r3, [sp, #28]
   114a4:	mov	r0, #16
   114a8:	ldr	r6, [r5, r3]
   114ac:	bl	130c8 <__assert_fail@plt+0x1fe0>
   114b0:	mov	r2, r0
   114b4:	str	r0, [sp, #16]
   114b8:	str	r8, [r2]
   114bc:	mov	r0, r6
   114c0:	mov	r6, r2
   114c4:	bl	13d00 <__assert_fail@plt+0x2c18>
   114c8:	ldr	r3, [sp, #32]
   114cc:	stmib	r6, {r0, r3, r8}
   114d0:	b	111cc <__assert_fail@plt+0xe4>
   114d4:	mov	r1, r8
   114d8:	ldr	r0, [pc, #3000]	; 12098 <__assert_fail@plt+0xfb0>
   114dc:	bl	10e3c <strcmp@plt>
   114e0:	cmp	r0, #0
   114e4:	beq	114fc <__assert_fail@plt+0x414>
   114e8:	mov	r1, r8
   114ec:	ldr	r0, [pc, #2984]	; 1209c <__assert_fail@plt+0xfb4>
   114f0:	bl	10e3c <strcmp@plt>
   114f4:	cmp	r0, #0
   114f8:	bne	11554 <__assert_fail@plt+0x46c>
   114fc:	add	r0, r8, #2
   11500:	add	r4, r4, #2
   11504:	bl	14494 <__assert_fail@plt+0x33ac>
   11508:	cmp	r4, r9
   1150c:	bge	12828 <__assert_fail@plt+0x1740>
   11510:	ldr	r0, [sl, #4]
   11514:	bl	13d24 <__assert_fail@plt+0x2c3c>
   11518:	mov	r8, r0
   1151c:	str	r0, [sp, #8]
   11520:	ldr	r0, [sl, #8]
   11524:	bl	13d00 <__assert_fail@plt+0x2c18>
   11528:	mov	r6, r0
   1152c:	str	r0, [sp, #36]	; 0x24
   11530:	ldr	r0, [r8]
   11534:	bl	1445c <__assert_fail@plt+0x3374>
   11538:	cmp	r6, #0
   1153c:	beq	1154c <__assert_fail@plt+0x464>
   11540:	ldrb	r3, [r6]
   11544:	cmp	r3, #47	; 0x2f
   11548:	beq	111cc <__assert_fail@plt+0xe4>
   1154c:	ldr	r0, [sp, #36]	; 0x24
   11550:	bl	136a0 <__assert_fail@plt+0x25b8>
   11554:	mov	r1, r8
   11558:	ldr	r0, [pc, #2880]	; 120a0 <__assert_fail@plt+0xfb8>
   1155c:	bl	10e3c <strcmp@plt>
   11560:	cmp	r0, #0
   11564:	beq	1157c <__assert_fail@plt+0x494>
   11568:	mov	r1, r8
   1156c:	ldr	r0, [pc, #2864]	; 120a4 <__assert_fail@plt+0xfbc>
   11570:	bl	10e3c <strcmp@plt>
   11574:	cmp	r0, #0
   11578:	bne	11664 <__assert_fail@plt+0x57c>
   1157c:	add	r0, r8, #2
   11580:	add	r4, r4, #1
   11584:	bl	14494 <__assert_fail@plt+0x33ac>
   11588:	cmp	r4, r9
   1158c:	bge	1287c <__assert_fail@plt+0x1794>
   11590:	ldr	r0, [sl, #4]
   11594:	bl	13d24 <__assert_fail@plt+0x2c3c>
   11598:	str	r0, [sp, #8]
   1159c:	ldr	r0, [r0]
   115a0:	bl	1445c <__assert_fail@plt+0x3374>
   115a4:	b	111cc <__assert_fail@plt+0xe4>
   115a8:	mov	r2, #5
   115ac:	ldr	r1, [pc, #2804]	; 120a8 <__assert_fail@plt+0xfc0>
   115b0:	mov	r9, r3
   115b4:	bl	10ea8 <dcgettext@plt>
   115b8:	ldr	r2, [pc, #2956]	; 1214c <__assert_fail@plt+0x1064>
   115bc:	mov	r1, r0
   115c0:	mov	r0, #1
   115c4:	bl	11004 <__printf_chk@plt>
   115c8:	mov	r2, #5
   115cc:	ldr	r1, [pc, #2776]	; 120ac <__assert_fail@plt+0xfc4>
   115d0:	mov	r0, r9
   115d4:	bl	10ea8 <dcgettext@plt>
   115d8:	mov	r1, r0
   115dc:	mov	r0, #1
   115e0:	bl	11004 <__printf_chk@plt>
   115e4:	mov	r2, #5
   115e8:	ldr	r1, [pc, #2752]	; 120b0 <__assert_fail@plt+0xfc8>
   115ec:	mov	r0, r9
   115f0:	bl	10ea8 <dcgettext@plt>
   115f4:	ldr	r3, [pc, #2940]	; 12178 <__assert_fail@plt+0x1090>
   115f8:	ldr	r2, [r3, #108]	; 0x6c
   115fc:	mov	r1, r0
   11600:	mov	r0, #1
   11604:	bl	11004 <__printf_chk@plt>
   11608:	ldr	r1, [pc, #2724]	; 120b4 <__assert_fail@plt+0xfcc>
   1160c:	mov	r2, #5
   11610:	mov	r0, r9
   11614:	bl	10ea8 <dcgettext@plt>
   11618:	mov	r1, r0
   1161c:	mov	r0, #1
   11620:	bl	11004 <__printf_chk@plt>
   11624:	mov	r0, r9
   11628:	bl	10fa4 <exit@plt>
   1162c:	mov	r2, #5
   11630:	ldr	r1, [pc, #2688]	; 120b8 <__assert_fail@plt+0xfd0>
   11634:	mov	r9, r3
   11638:	bl	10ea8 <dcgettext@plt>
   1163c:	ldr	r2, [pc, #2824]	; 1214c <__assert_fail@plt+0x1064>
   11640:	ldr	r3, [pc, #2676]	; 120bc <__assert_fail@plt+0xfd4>
   11644:	mov	r1, r0
   11648:	mov	r0, #1
   1164c:	bl	11004 <__printf_chk@plt>
   11650:	mov	r0, #10
   11654:	bl	10ff8 <putchar@plt>
   11658:	mov	r2, #5
   1165c:	ldr	r1, [pc, #2652]	; 120c0 <__assert_fail@plt+0xfd8>
   11660:	b	11610 <__assert_fail@plt+0x528>
   11664:	mov	r1, r8
   11668:	ldr	r0, [pc, #2644]	; 120c4 <__assert_fail@plt+0xfdc>
   1166c:	bl	10e3c <strcmp@plt>
   11670:	cmp	r0, #0
   11674:	beq	1157c <__assert_fail@plt+0x494>
   11678:	mov	r1, r8
   1167c:	ldr	r0, [pc, #2628]	; 120c8 <__assert_fail@plt+0xfe0>
   11680:	bl	10e3c <strcmp@plt>
   11684:	cmp	r0, #0
   11688:	beq	1157c <__assert_fail@plt+0x494>
   1168c:	mov	r1, r8
   11690:	ldr	r0, [pc, #2612]	; 120cc <__assert_fail@plt+0xfe4>
   11694:	bl	10e3c <strcmp@plt>
   11698:	cmp	r0, #0
   1169c:	beq	1157c <__assert_fail@plt+0x494>
   116a0:	mov	r1, r8
   116a4:	ldr	r0, [pc, #2596]	; 120d0 <__assert_fail@plt+0xfe8>
   116a8:	bl	10e3c <strcmp@plt>
   116ac:	cmp	r0, #0
   116b0:	beq	1157c <__assert_fail@plt+0x494>
   116b4:	mov	r1, r8
   116b8:	ldr	r0, [pc, #2580]	; 120d4 <__assert_fail@plt+0xfec>
   116bc:	bl	10e3c <strcmp@plt>
   116c0:	cmp	r0, #0
   116c4:	beq	12424 <__assert_fail@plt+0x133c>
   116c8:	mov	r1, r8
   116cc:	ldr	r0, [pc, #2564]	; 120d8 <__assert_fail@plt+0xff0>
   116d0:	bl	10e3c <strcmp@plt>
   116d4:	cmp	r0, #0
   116d8:	beq	12424 <__assert_fail@plt+0x133c>
   116dc:	mov	r1, r8
   116e0:	ldr	r0, [pc, #2548]	; 120dc <__assert_fail@plt+0xff4>
   116e4:	bl	10e3c <strcmp@plt>
   116e8:	cmp	r0, #0
   116ec:	beq	12424 <__assert_fail@plt+0x133c>
   116f0:	mov	r1, r8
   116f4:	ldr	r0, [pc, #2532]	; 120e0 <__assert_fail@plt+0xff8>
   116f8:	bl	10e3c <strcmp@plt>
   116fc:	cmp	r0, #0
   11700:	beq	1262c <__assert_fail@plt+0x1544>
   11704:	mov	r1, r8
   11708:	ldr	r0, [pc, #2516]	; 120e4 <__assert_fail@plt+0xffc>
   1170c:	bl	10e3c <strcmp@plt>
   11710:	cmp	r0, #0
   11714:	bne	12750 <__assert_fail@plt+0x1668>
   11718:	add	r4, r4, #1
   1171c:	cmp	r4, r9
   11720:	bge	1273c <__assert_fail@plt+0x1654>
   11724:	ldr	r3, [pc, #2636]	; 12178 <__assert_fail@plt+0x1090>
   11728:	ldr	r2, [sl, #4]
   1172c:	str	r2, [r3]
   11730:	b	111cc <__assert_fail@plt+0xe4>
   11734:	ldr	r3, [sp, #20]
   11738:	mov	r9, #0
   1173c:	cmp	r3, #1
   11740:	ldr	r3, [pc, #2352]	; 12078 <__assert_fail@plt+0xf90>
   11744:	strb	r9, [r3, #24]
   11748:	ble	117b8 <__assert_fail@plt+0x6d0>
   1174c:	ldr	r4, [pc, #2452]	; 120e8 <__assert_fail@plt+0x1000>
   11750:	ldr	r7, [pc, #2452]	; 120ec <__assert_fail@plt+0x1004>
   11754:	mov	r8, #1
   11758:	str	r6, [sp, #28]
   1175c:	ldr	fp, [sp, #20]
   11760:	b	11798 <__assert_fail@plt+0x6b0>
   11764:	cmp	r9, #0
   11768:	add	r8, r8, #1
   1176c:	ldrhne	r3, [r7]
   11770:	strhne	r3, [r4, r9]
   11774:	ldrne	r6, [r5]
   11778:	addne	r9, r9, #1
   1177c:	addne	sl, r9, r0
   11780:	mov	r1, r6
   11784:	add	r0, r4, r9
   11788:	bl	10f20 <strcpy@plt>
   1178c:	cmp	fp, r8
   11790:	mov	r9, sl
   11794:	beq	117b4 <__assert_fail@plt+0x6cc>
   11798:	ldr	r6, [r5, #4]!
   1179c:	mov	r0, r6
   117a0:	bl	10fbc <strlen@plt>
   117a4:	add	sl, r9, r0
   117a8:	add	r3, sl, #2
   117ac:	cmp	r3, #2048	; 0x800
   117b0:	bls	11764 <__assert_fail@plt+0x67c>
   117b4:	ldr	r6, [sp, #28]
   117b8:	ldr	r1, [pc, #2344]	; 120e8 <__assert_fail@plt+0x1000>
   117bc:	ldr	r0, [pc, #2348]	; 120f0 <__assert_fail@plt+0x1008>
   117c0:	bl	132c8 <__assert_fail@plt+0x21e0>
   117c4:	b	112f0 <__assert_fail@plt+0x208>
   117c8:	ldr	r4, [sp, #12]
   117cc:	ldr	r0, [r4]
   117d0:	bl	1445c <__assert_fail@plt+0x3374>
   117d4:	ldr	r0, [r4, #4]
   117d8:	ldrb	r3, [r0]
   117dc:	cmp	r3, #47	; 0x2f
   117e0:	bne	11b54 <__assert_fail@plt+0xa6c>
   117e4:	ldr	r3, [sp, #16]
   117e8:	ldr	r0, [r3, #4]
   117ec:	cmp	r0, #0
   117f0:	beq	12514 <__assert_fail@plt+0x142c>
   117f4:	ldrb	r3, [r0]
   117f8:	cmp	r3, #47	; 0x2f
   117fc:	bne	12514 <__assert_fail@plt+0x142c>
   11800:	mov	r0, #12
   11804:	bl	130c8 <__assert_fail@plt+0x1fe0>
   11808:	mov	r6, #0
   1180c:	mov	sl, r0
   11810:	mov	r0, #12
   11814:	str	r6, [sl]
   11818:	str	r6, [sl, #4]
   1181c:	str	r6, [sl, #8]
   11820:	bl	130c8 <__assert_fail@plt+0x1fe0>
   11824:	mov	r9, r0
   11828:	add	r0, sp, #48	; 0x30
   1182c:	str	r6, [r9]
   11830:	str	r6, [r9, #4]
   11834:	str	r6, [r9, #8]
   11838:	bl	14618 <__assert_fail@plt+0x3530>
   1183c:	mov	r8, r0
   11840:	b	11864 <__assert_fail@plt+0x77c>
   11844:	ldr	r3, [r4, #28]
   11848:	sub	r3, r3, #1
   1184c:	cmp	r3, #0
   11850:	str	r3, [r4, #28]
   11854:	bne	11860 <__assert_fail@plt+0x778>
   11858:	mov	r0, r4
   1185c:	bl	15054 <__assert_fail@plt+0x3f6c>
   11860:	add	r6, r6, #1
   11864:	cmp	r8, r6
   11868:	ldr	r0, [sp, #48]	; 0x30
   1186c:	ble	11960 <__assert_fail@plt+0x878>
   11870:	ldr	r0, [r0, r6, lsl #2]
   11874:	add	r0, r0, #19
   11878:	bl	13d24 <__assert_fail@plt+0x2c3c>
   1187c:	mov	r1, #1
   11880:	mov	r4, r0
   11884:	bl	159d4 <__assert_fail@plt+0x48ec>
   11888:	cmp	r0, #0
   1188c:	beq	11844 <__assert_fail@plt+0x75c>
   11890:	ldr	r3, [sl, #4]
   11894:	ldr	r1, [r4, #4]
   11898:	cmp	r3, #0
   1189c:	beq	11958 <__assert_fail@plt+0x870>
   118a0:	mov	r2, r4
   118a4:	mov	r0, sl
   118a8:	bl	138f4 <__assert_fail@plt+0x280c>
   118ac:	ldr	r3, [r4, #28]
   118b0:	ldr	r2, [r9, #4]
   118b4:	add	r3, r3, #1
   118b8:	cmp	r2, #0
   118bc:	str	r3, [r4, #28]
   118c0:	ldr	r1, [r4]
   118c4:	beq	11950 <__assert_fail@plt+0x868>
   118c8:	mov	r2, r4
   118cc:	mov	r0, r9
   118d0:	bl	138f4 <__assert_fail@plt+0x280c>
   118d4:	ldr	r7, [r4, #16]
   118d8:	cmp	r7, #0
   118dc:	bne	11924 <__assert_fail@plt+0x83c>
   118e0:	b	11860 <__assert_fail@plt+0x778>
   118e4:	mov	r2, r4
   118e8:	mov	r0, sl
   118ec:	bl	138f4 <__assert_fail@plt+0x280c>
   118f0:	ldr	r3, [r4, #28]
   118f4:	ldr	r2, [r9, #4]
   118f8:	add	r3, r3, #1
   118fc:	cmp	r2, #0
   11900:	str	r3, [r4, #28]
   11904:	ldr	r1, [r7, #4]
   11908:	beq	11948 <__assert_fail@plt+0x860>
   1190c:	mov	r2, r4
   11910:	mov	r0, r9
   11914:	bl	138f4 <__assert_fail@plt+0x280c>
   11918:	ldr	r7, [r7]
   1191c:	cmp	r7, #0
   11920:	beq	11860 <__assert_fail@plt+0x778>
   11924:	ldr	r3, [r4, #28]
   11928:	ldr	r2, [sl, #4]
   1192c:	add	r3, r3, #1
   11930:	cmp	r2, #0
   11934:	str	r3, [r4, #28]
   11938:	ldr	r1, [r7, #8]
   1193c:	bne	118e4 <__assert_fail@plt+0x7fc>
   11940:	stmib	sl, {r1, r4}
   11944:	b	118f4 <__assert_fail@plt+0x80c>
   11948:	stmib	r9, {r1, r4}
   1194c:	b	11918 <__assert_fail@plt+0x830>
   11950:	stmib	r9, {r1, r4}
   11954:	b	118d4 <__assert_fail@plt+0x7ec>
   11958:	stmib	sl, {r1, r4}
   1195c:	b	118ac <__assert_fail@plt+0x7c4>
   11960:	mov	r1, r8
   11964:	bl	1304c <__assert_fail@plt+0x1f64>
   11968:	ldr	r3, [sp, #12]
   1196c:	mov	r0, r9
   11970:	ldr	r4, [r3]
   11974:	mov	r1, r4
   11978:	bl	12abc <__assert_fail@plt+0x19d4>
   1197c:	subs	r6, r0, #0
   11980:	beq	11998 <__assert_fail@plt+0x8b0>
   11984:	mov	r1, r4
   11988:	ldr	r0, [r6]
   1198c:	bl	10e3c <strcmp@plt>
   11990:	cmp	r0, #0
   11994:	bne	12550 <__assert_fail@plt+0x1468>
   11998:	ldr	r3, [sp, #12]
   1199c:	mov	r0, sl
   119a0:	ldr	r1, [r3, #4]
   119a4:	bl	12abc <__assert_fail@plt+0x19d4>
   119a8:	cmp	r0, #0
   119ac:	beq	119c8 <__assert_fail@plt+0x8e0>
   119b0:	ldr	r6, [r0]
   119b4:	mov	r1, r4
   119b8:	mov	r0, r6
   119bc:	bl	10e3c <strcmp@plt>
   119c0:	cmp	r0, #0
   119c4:	bne	125ac <__assert_fail@plt+0x14c4>
   119c8:	ldr	r3, [sp, #16]
   119cc:	ldr	r0, [r3, #4]
   119d0:	bl	1370c <__assert_fail@plt+0x2624>
   119d4:	cmp	r0, #0
   119d8:	bne	12590 <__assert_fail@plt+0x14a8>
   119dc:	ldr	fp, [sp, #12]
   119e0:	ldr	r8, [fp, #16]
   119e4:	cmp	r8, #0
   119e8:	beq	11b20 <__assert_fail@plt+0xa38>
   119ec:	ldr	r3, [sp, #16]
   119f0:	str	r5, [sp, #44]	; 0x2c
   119f4:	str	sl, [sp, #32]
   119f8:	ldr	r3, [r3, #12]
   119fc:	str	r9, [sp, #28]
   11a00:	mov	r5, r3
   11a04:	cmp	r5, #0
   11a08:	ldr	r6, [r8, #4]
   11a0c:	beq	11b34 <__assert_fail@plt+0xa4c>
   11a10:	mov	r9, r5
   11a14:	b	11a24 <__assert_fail@plt+0x93c>
   11a18:	ldr	r9, [r9]
   11a1c:	cmp	r9, #0
   11a20:	beq	11b34 <__assert_fail@plt+0xa4c>
   11a24:	mov	r1, r6
   11a28:	ldr	r0, [r9, #4]
   11a2c:	bl	10e3c <strcmp@plt>
   11a30:	cmp	r0, #0
   11a34:	bne	11a18 <__assert_fail@plt+0x930>
   11a38:	mov	r4, r0
   11a3c:	mov	r0, r6
   11a40:	bl	1445c <__assert_fail@plt+0x3374>
   11a44:	ldr	r7, [r8, #8]
   11a48:	ldr	r0, [r9, #8]
   11a4c:	ldrb	r3, [r7]
   11a50:	cmp	r3, #47	; 0x2f
   11a54:	bne	11b50 <__assert_fail@plt+0xa68>
   11a58:	cmp	r0, #0
   11a5c:	beq	12514 <__assert_fail@plt+0x142c>
   11a60:	ldrb	r3, [r0]
   11a64:	cmp	r3, #47	; 0x2f
   11a68:	bne	12514 <__assert_fail@plt+0x142c>
   11a6c:	mov	r1, r6
   11a70:	ldr	r0, [sp, #28]
   11a74:	bl	12abc <__assert_fail@plt+0x19d4>
   11a78:	subs	sl, r0, #0
   11a7c:	beq	11a98 <__assert_fail@plt+0x9b0>
   11a80:	ldr	r9, [sl]
   11a84:	ldr	r1, [fp]
   11a88:	mov	r0, r9
   11a8c:	bl	10e3c <strcmp@plt>
   11a90:	cmp	r0, #0
   11a94:	bne	11dd8 <__assert_fail@plt+0xcf0>
   11a98:	mov	r1, r7
   11a9c:	ldr	r0, [sp, #32]
   11aa0:	bl	12abc <__assert_fail@plt+0x19d4>
   11aa4:	subs	r4, r0, #0
   11aa8:	beq	11b08 <__assert_fail@plt+0xa20>
   11aac:	ldr	r1, [fp]
   11ab0:	ldr	r0, [r4]
   11ab4:	bl	10e3c <strcmp@plt>
   11ab8:	cmp	r0, #0
   11abc:	bne	12570 <__assert_fail@plt+0x1488>
   11ac0:	ldr	sl, [r4, #16]
   11ac4:	cmp	sl, #0
   11ac8:	bne	11adc <__assert_fail@plt+0x9f4>
   11acc:	b	11b08 <__assert_fail@plt+0xa20>
   11ad0:	ldr	sl, [sl]
   11ad4:	cmp	sl, #0
   11ad8:	beq	11b08 <__assert_fail@plt+0xa20>
   11adc:	mov	r1, r7
   11ae0:	ldr	r0, [sl, #8]
   11ae4:	bl	10e3c <strcmp@plt>
   11ae8:	cmp	r0, #0
   11aec:	bne	11ad0 <__assert_fail@plt+0x9e8>
   11af0:	mov	r7, r0
   11af4:	mov	r1, r6
   11af8:	ldr	r0, [sl, #4]
   11afc:	bl	10e3c <strcmp@plt>
   11b00:	cmp	r0, #0
   11b04:	bne	125dc <__assert_fail@plt+0x14f4>
   11b08:	ldr	r8, [r8]
   11b0c:	cmp	r8, #0
   11b10:	bne	11a04 <__assert_fail@plt+0x91c>
   11b14:	ldr	sl, [sp, #32]
   11b18:	ldr	r9, [sp, #28]
   11b1c:	ldr	r5, [sp, #44]	; 0x2c
   11b20:	mov	r0, sl
   11b24:	bl	15074 <__assert_fail@plt+0x3f8c>
   11b28:	mov	r0, r9
   11b2c:	bl	15074 <__assert_fail@plt+0x3f8c>
   11b30:	b	112a0 <__assert_fail@plt+0x1b8>
   11b34:	mov	r0, r6
   11b38:	bl	1445c <__assert_fail@plt+0x3374>
   11b3c:	ldr	r7, [r8, #8]
   11b40:	ldrb	r3, [r7]
   11b44:	cmp	r3, #47	; 0x2f
   11b48:	moveq	r0, #0
   11b4c:	beq	12514 <__assert_fail@plt+0x142c>
   11b50:	mov	r0, r7
   11b54:	bl	136c4 <__assert_fail@plt+0x25dc>
   11b58:	mov	r0, #12
   11b5c:	bl	130c8 <__assert_fail@plt+0x1fe0>
   11b60:	mov	r3, #0
   11b64:	str	r3, [r0]
   11b68:	str	r3, [r0, #4]
   11b6c:	str	r3, [r0, #8]
   11b70:	mov	r7, r0
   11b74:	mov	r4, r0
   11b78:	bl	160ac <__assert_fail@plt+0x4fc4>
   11b7c:	ldr	r0, [r4, #8]
   11b80:	cmp	r0, #0
   11b84:	beq	11be0 <__assert_fail@plt+0xaf8>
   11b88:	ldrb	r3, [r0, #33]	; 0x21
   11b8c:	cmp	r3, #0
   11b90:	ldrne	r5, [r0, #8]
   11b94:	bne	11ba0 <__assert_fail@plt+0xab8>
   11b98:	bl	13938 <__assert_fail@plt+0x2850>
   11b9c:	mov	r5, r0
   11ba0:	ldr	r0, [r4, #8]
   11ba4:	mov	r1, r5
   11ba8:	bl	14664 <__assert_fail@plt+0x357c>
   11bac:	mov	r1, r5
   11bb0:	ldr	r0, [r4, #8]
   11bb4:	bl	1410c <__assert_fail@plt+0x3024>
   11bb8:	mov	r1, r5
   11bbc:	mov	r2, r0
   11bc0:	mov	r8, r0
   11bc4:	ldr	r0, [r4, #8]
   11bc8:	bl	15470 <__assert_fail@plt+0x4388>
   11bcc:	mov	r0, r8
   11bd0:	bl	10e78 <free@plt>
   11bd4:	ldr	r4, [r4]
   11bd8:	cmp	r4, #0
   11bdc:	bne	11b7c <__assert_fail@plt+0xa94>
   11be0:	mov	r0, r7
   11be4:	bl	15074 <__assert_fail@plt+0x3f8c>
   11be8:	mov	r4, #0
   11bec:	cmp	r6, #0
   11bf0:	bne	11c14 <__assert_fail@plt+0xb2c>
   11bf4:	ldr	r3, [pc, #1112]	; 12054 <__assert_fail@plt+0xf6c>
   11bf8:	ldr	r2, [sp, #52]	; 0x34
   11bfc:	mov	r0, #0
   11c00:	ldr	r3, [r3]
   11c04:	cmp	r2, r3
   11c08:	bne	1258c <__assert_fail@plt+0x14a4>
   11c0c:	add	sp, sp, #60	; 0x3c
   11c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c14:	mov	r2, r4
   11c18:	mov	r1, fp
   11c1c:	ldr	r0, [sp, #8]
   11c20:	bl	15470 <__assert_fail@plt+0x4388>
   11c24:	b	11bf4 <__assert_fail@plt+0xb0c>
   11c28:	cmp	r0, #8
   11c2c:	ldrne	r4, [sp, #40]	; 0x28
   11c30:	movne	r6, r4
   11c34:	beq	11cf0 <__assert_fail@plt+0xc08>
   11c38:	cmp	r0, #1
   11c3c:	bne	112e8 <__assert_fail@plt+0x200>
   11c40:	mov	r1, #2
   11c44:	ldr	r0, [sp, #8]
   11c48:	bl	159d4 <__assert_fail@plt+0x48ec>
   11c4c:	b	112e8 <__assert_fail@plt+0x200>
   11c50:	mov	r0, #12
   11c54:	bl	130c8 <__assert_fail@plt+0x1fe0>
   11c58:	mov	r3, #0
   11c5c:	ldr	r8, [pc, #1168]	; 120f4 <__assert_fail@plt+0x100c>
   11c60:	ldr	r7, [pc, #1168]	; 120f8 <__assert_fail@plt+0x1010>
   11c64:	ldr	r5, [pc, #1004]	; 12058 <__assert_fail@plt+0xf70>
   11c68:	str	r3, [r0]
   11c6c:	str	r3, [r0, #4]
   11c70:	str	r3, [r0, #8]
   11c74:	mov	r9, r0
   11c78:	mov	r4, r0
   11c7c:	bl	160ac <__assert_fail@plt+0x4fc4>
   11c80:	ldr	r3, [r4, #8]
   11c84:	cmp	r3, #0
   11c88:	beq	11ce0 <__assert_fail@plt+0xbf8>
   11c8c:	ldrb	r2, [r3, #33]	; 0x21
   11c90:	cmp	r2, #0
   11c94:	ldrne	r0, [r3, #8]
   11c98:	bne	11ca8 <__assert_fail@plt+0xbc0>
   11c9c:	mov	r0, r3
   11ca0:	bl	13938 <__assert_fail@plt+0x2850>
   11ca4:	ldr	r3, [r4, #8]
   11ca8:	ldr	r3, [r3, #12]
   11cac:	cmp	r0, #0
   11cb0:	moveq	r0, r5
   11cb4:	cmp	r3, #1
   11cb8:	ldr	r2, [r4, #4]
   11cbc:	moveq	r3, r8
   11cc0:	movne	r3, r7
   11cc4:	str	r0, [sp]
   11cc8:	ldr	r1, [pc, #1068]	; 120fc <__assert_fail@plt+0x1014>
   11ccc:	mov	r0, #1
   11cd0:	bl	11004 <__printf_chk@plt>
   11cd4:	ldr	r4, [r4]
   11cd8:	cmp	r4, #0
   11cdc:	bne	11c80 <__assert_fail@plt+0xb98>
   11ce0:	mov	r0, r9
   11ce4:	bl	15074 <__assert_fail@plt+0x3f8c>
   11ce8:	mov	r4, #0
   11cec:	b	11bec <__assert_fail@plt+0xb04>
   11cf0:	mov	r1, #2
   11cf4:	ldr	r0, [sp, #8]
   11cf8:	bl	159d4 <__assert_fail@plt+0x48ec>
   11cfc:	subs	r6, r0, #0
   11d00:	bne	11734 <__assert_fail@plt+0x64c>
   11d04:	mov	r2, #5
   11d08:	ldr	r1, [pc, #1188]	; 121b4 <__assert_fail@plt+0x10cc>
   11d0c:	bl	10ea8 <dcgettext@plt>
   11d10:	ldr	r3, [sp, #8]
   11d14:	ldr	r1, [r3]
   11d18:	bl	12fb0 <__assert_fail@plt+0x1ec8>
   11d1c:	mov	r0, r6
   11d20:	bl	10fa4 <exit@plt>
   11d24:	ldr	r0, [sp, #8]
   11d28:	bl	14778 <__assert_fail@plt+0x3690>
   11d2c:	mov	r4, r0
   11d30:	b	11bec <__assert_fail@plt+0xb04>
   11d34:	ldr	r3, [pc, #964]	; 12100 <__assert_fail@plt+0x1018>
   11d38:	mov	r2, #5
   11d3c:	ldr	r1, [pc, #960]	; 12104 <__assert_fail@plt+0x101c>
   11d40:	mov	r0, #0
   11d44:	ldr	r4, [r3]
   11d48:	bl	10ea8 <dcgettext@plt>
   11d4c:	mov	r1, r0
   11d50:	mov	r0, r4
   11d54:	bl	16184 <__assert_fail@plt+0x509c>
   11d58:	mov	r4, #0
   11d5c:	b	11bec <__assert_fail@plt+0xb04>
   11d60:	ldr	r3, [sp, #8]
   11d64:	ldr	r5, [pc, #924]	; 12108 <__assert_fail@plt+0x1020>
   11d68:	ldr	r4, [r3, #20]
   11d6c:	b	11d80 <__assert_fail@plt+0xc98>
   11d70:	ldr	r1, [r4, #4]
   11d74:	mov	r0, r5
   11d78:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   11d7c:	ldr	r4, [r4]
   11d80:	cmp	r4, #0
   11d84:	bne	11d70 <__assert_fail@plt+0xc88>
   11d88:	b	11bec <__assert_fail@plt+0xb04>
   11d8c:	sub	r6, r0, #5
   11d90:	sub	r3, r0, #9
   11d94:	cmp	r3, #3
   11d98:	cmphi	r6, #1
   11d9c:	movls	r6, #1
   11da0:	movhi	r6, #0
   11da4:	cmp	r0, #2
   11da8:	orreq	r6, r6, #1
   11dac:	cmp	r6, #0
   11db0:	sub	r4, r4, #3
   11db4:	ldrne	r6, [sp, #40]	; 0x28
   11db8:	clz	r4, r4
   11dbc:	lsr	r4, r4, #5
   11dc0:	bne	112d4 <__assert_fail@plt+0x1ec>
   11dc4:	b	11c38 <__assert_fail@plt+0xb50>
   11dc8:	ldr	r0, [sp, #8]
   11dcc:	bl	13a48 <__assert_fail@plt+0x2960>
   11dd0:	mov	r4, #0
   11dd4:	b	11bec <__assert_fail@plt+0xb04>
   11dd8:	mov	r1, r6
   11ddc:	mov	r0, r9
   11de0:	bl	10e3c <strcmp@plt>
   11de4:	cmp	r0, #0
   11de8:	bne	11f90 <__assert_fail@plt+0xea8>
   11dec:	mov	r2, #5
   11df0:	ldr	r1, [pc, #788]	; 1210c <__assert_fail@plt+0x1024>
   11df4:	bl	10ea8 <dcgettext@plt>
   11df8:	ldr	r3, [sp, #12]
   11dfc:	ldr	r1, [r8, #4]
   11e00:	ldr	r2, [r3]
   11e04:	bl	12c0c <__assert_fail@plt+0x1b24>
   11e08:	ldr	r4, [sp, #8]
   11e0c:	ldr	r0, [pc, #764]	; 12110 <__assert_fail@plt+0x1028>
   11e10:	ldr	r1, [r4]
   11e14:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   11e18:	ldr	r1, [r4, #4]
   11e1c:	ldr	r0, [pc, #752]	; 12114 <__assert_fail@plt+0x102c>
   11e20:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   11e24:	ldr	r3, [r4, #16]
   11e28:	ldr	r2, [sp, #24]
   11e2c:	b	11e38 <__assert_fail@plt+0xd50>
   11e30:	ldr	r3, [r3]
   11e34:	add	r2, r2, #1
   11e38:	cmp	r3, #0
   11e3c:	bne	11e30 <__assert_fail@plt+0xd48>
   11e40:	cmp	r2, #0
   11e44:	bne	11fc8 <__assert_fail@plt+0xee0>
   11e48:	ldr	r4, [sp, #8]
   11e4c:	ldr	r2, [pc, #672]	; 120f4 <__assert_fail@plt+0x100c>
   11e50:	ldr	r3, [pc, #672]	; 120f8 <__assert_fail@plt+0x1010>
   11e54:	ldr	r1, [r4, #12]
   11e58:	ldr	r0, [pc, #696]	; 12118 <__assert_fail@plt+0x1030>
   11e5c:	cmp	r1, #1
   11e60:	moveq	r1, r2
   11e64:	movne	r1, r3
   11e68:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   11e6c:	mov	r0, r4
   11e70:	bl	139b4 <__assert_fail@plt+0x28cc>
   11e74:	cmp	r0, #0
   11e78:	beq	11e88 <__assert_fail@plt+0xda0>
   11e7c:	ldr	r1, [r0, #4]
   11e80:	ldr	r0, [pc, #660]	; 1211c <__assert_fail@plt+0x1034>
   11e84:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   11e88:	ldr	r2, [sp, #8]
   11e8c:	ldrb	r3, [r2, #33]	; 0x21
   11e90:	cmp	r3, #0
   11e94:	ldrne	r1, [r2, #8]
   11e98:	bne	11ea8 <__assert_fail@plt+0xdc0>
   11e9c:	ldr	r0, [sp, #8]
   11ea0:	bl	13938 <__assert_fail@plt+0x2850>
   11ea4:	mov	r1, r0
   11ea8:	ldr	r3, [pc, #624]	; 12120 <__assert_fail@plt+0x1038>
   11eac:	cmp	r1, #0
   11eb0:	ldr	r0, [pc, #620]	; 12124 <__assert_fail@plt+0x103c>
   11eb4:	moveq	r1, r3
   11eb8:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   11ebc:	ldr	r8, [sp, #8]
   11ec0:	ldr	sl, [pc, #608]	; 12128 <__assert_fail@plt+0x1040>
   11ec4:	str	r6, [sp, #12]
   11ec8:	ldr	r4, [r8, #20]
   11ecc:	cmp	r4, #0
   11ed0:	beq	11f88 <__assert_fail@plt+0xea0>
   11ed4:	mov	r0, #10
   11ed8:	bl	10ff8 <putchar@plt>
   11edc:	ldr	r1, [r4, #4]
   11ee0:	mov	r0, sl
   11ee4:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   11ee8:	ldr	r1, [r4, #8]
   11eec:	ldr	r0, [pc, #568]	; 1212c <__assert_fail@plt+0x1044>
   11ef0:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   11ef4:	ldr	r3, [r8, #16]
   11ef8:	cmp	r3, #0
   11efc:	beq	11f80 <__assert_fail@plt+0xe98>
   11f00:	ldr	r0, [pc, #552]	; 12130 <__assert_fail@plt+0x1048>
   11f04:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   11f08:	ldr	r9, [pc, #548]	; 12134 <__assert_fail@plt+0x104c>
   11f0c:	ldr	r7, [r8, #16]
   11f10:	b	11f18 <__assert_fail@plt+0xe30>
   11f14:	ldr	r7, [r7]
   11f18:	cmp	r7, #0
   11f1c:	beq	11f80 <__assert_fail@plt+0xe98>
   11f20:	ldr	r6, [r7, #4]
   11f24:	mov	r0, r4
   11f28:	mov	r1, r6
   11f2c:	bl	12a58 <__assert_fail@plt+0x1970>
   11f30:	cmp	r0, #0
   11f34:	beq	11f14 <__assert_fail@plt+0xe2c>
   11f38:	ldr	r5, [r4, #12]
   11f3c:	cmp	r5, #0
   11f40:	bne	11f54 <__assert_fail@plt+0xe6c>
   11f44:	b	11f6c <__assert_fail@plt+0xe84>
   11f48:	ldr	r5, [r5]
   11f4c:	cmp	r5, #0
   11f50:	beq	11f6c <__assert_fail@plt+0xe84>
   11f54:	mov	r1, r6
   11f58:	ldr	r0, [r5, #4]
   11f5c:	bl	10e3c <strcmp@plt>
   11f60:	cmp	r0, #0
   11f64:	bne	11f48 <__assert_fail@plt+0xe60>
   11f68:	ldr	r5, [r5, #8]
   11f6c:	mov	r2, r5
   11f70:	mov	r1, r6
   11f74:	mov	r0, r9
   11f78:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   11f7c:	b	11f14 <__assert_fail@plt+0xe2c>
   11f80:	ldr	r4, [r4]
   11f84:	b	11ecc <__assert_fail@plt+0xde4>
   11f88:	ldr	r6, [sp, #12]
   11f8c:	b	11bec <__assert_fail@plt+0xb04>
   11f90:	mov	r2, #5
   11f94:	ldr	r1, [pc, #412]	; 12138 <__assert_fail@plt+0x1050>
   11f98:	mov	r0, r4
   11f9c:	bl	10ea8 <dcgettext@plt>
   11fa0:	ldr	r2, [sp, #12]
   11fa4:	ldr	r3, [sl]
   11fa8:	ldr	r1, [r8, #4]
   11fac:	ldr	r2, [r2]
   11fb0:	bl	12c0c <__assert_fail@plt+0x1b24>
   11fb4:	ldr	r1, [sp, #36]	; 0x24
   11fb8:	ldr	r0, [sp, #8]
   11fbc:	bl	14730 <__assert_fail@plt+0x3648>
   11fc0:	mov	r4, r0
   11fc4:	b	11bec <__assert_fail@plt+0xb04>
   11fc8:	ldr	r0, [pc, #352]	; 12130 <__assert_fail@plt+0x1048>
   11fcc:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   11fd0:	ldr	r3, [sp, #8]
   11fd4:	ldr	r5, [pc, #344]	; 12134 <__assert_fail@plt+0x104c>
   11fd8:	ldr	r4, [r3, #16]
   11fdc:	b	11ff0 <__assert_fail@plt+0xf08>
   11fe0:	ldmib	r4, {r1, r2}
   11fe4:	mov	r0, r5
   11fe8:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   11fec:	ldr	r4, [r4]
   11ff0:	cmp	r4, #0
   11ff4:	bne	11fe0 <__assert_fail@plt+0xef8>
   11ff8:	b	11e48 <__assert_fail@plt+0xd60>
   11ffc:	ldr	r2, [sp, #8]
   12000:	ldr	r0, [r2, #20]
   12004:	cmp	r0, #0
   12008:	mov	r4, r0
   1200c:	beq	11bec <__assert_fail@plt+0xb04>
   12010:	mov	r3, #1
   12014:	strb	r3, [r2, #32]
   12018:	mov	r5, r2
   1201c:	b	12030 <__assert_fail@plt+0xf48>
   12020:	ldr	r3, [r0]
   12024:	str	r3, [r5, #20]
   12028:	bl	1307c <__assert_fail@plt+0x1f94>
   1202c:	ldr	r0, [r5, #20]
   12030:	cmp	r0, #0
   12034:	mov	r4, r0
   12038:	bne	12020 <__assert_fail@plt+0xf38>
   1203c:	b	11bec <__assert_fail@plt+0xb04>
   12040:	mov	r1, fp
   12044:	ldr	r0, [sp, #8]
   12048:	bl	1410c <__assert_fail@plt+0x3024>
   1204c:	mov	r4, r0
   12050:	b	11bec <__assert_fail@plt+0xb04>
   12054:	andeq	r8, r2, r0, lsl #28
   12058:	muleq	r1, r0, r4
   1205c:	andeq	r7, r1, ip, lsl #8
   12060:	andeq	r7, r1, r0, lsr #8
   12064:	andeq	r7, r1, r8, lsr #8
   12068:	strdeq	r7, [r1], -r4
   1206c:	andeq	r7, r1, r4, ror #4
   12070:	andeq	r6, r1, r4, asr r8
   12074:	andeq	r9, r2, r4, lsl #1
   12078:	andeq	r9, r2, ip, lsl #1
   1207c:	andeq	r7, r1, r8, asr #8
   12080:	andeq	r7, r1, r4, ror #8
   12084:	andeq	r7, r1, r8, ror ip
   12088:	andeq	r7, r1, r0, lsr #26
   1208c:	andeq	r7, r1, r8, lsr #26
   12090:	andeq	r7, r1, r4, lsr sp
   12094:	andeq	r7, r1, ip, lsr sp
   12098:	ldrdeq	r7, [r1], -r4
   1209c:	andeq	r7, r1, r0, ror #27
   120a0:	andeq	r7, r1, r4, lsl #28
   120a4:	andeq	r7, r1, r0, lsl lr
   120a8:	andeq	r7, r1, ip, ror #8
   120ac:	muleq	r1, r4, r4
   120b0:	muleq	r1, r0, r8
   120b4:	andeq	r7, r1, ip, asr #19
   120b8:	andeq	r7, r1, r4, lsl #25
   120bc:	muleq	r1, ip, ip
   120c0:	andeq	r7, r1, r4, lsr #25
   120c4:	andeq	r7, r1, r8, lsl lr
   120c8:	andeq	r7, r1, r0, lsr #28
   120cc:	andeq	r7, r1, ip, lsr #28
   120d0:	andeq	r7, r1, r4, lsr lr
   120d4:	andeq	r7, r1, r8, asr lr
   120d8:	andeq	r7, r1, r0, ror #28
   120dc:	andeq	r7, r1, r0, asr #6
   120e0:	andeq	r7, r1, r4, ror lr
   120e4:	andeq	r7, r1, ip, lsl #30
   120e8:	andeq	r9, r2, r4, lsr #1
   120ec:	andeq	r8, r1, ip, lsl #3
   120f0:	andeq	r8, r1, r0, lsl #3
   120f4:	andeq	r8, r1, r0, lsr #32
   120f8:	andeq	r6, r1, r0, asr r7
   120fc:	muleq	r1, r0, r1
   12100:	andeq	r9, r2, r0, lsl #1
   12104:	andeq	r8, r1, r0, lsr #3
   12108:			; <UNDEFINED> instruction: 0x000172b4
   1210c:	strheq	r8, [r1], -r0
   12110:			; <UNDEFINED> instruction: 0x000181b4
   12114:	andeq	r8, r1, r0, asr #3
   12118:	ldrdeq	r8, [r1], -ip
   1211c:	andeq	r8, r1, r8, ror #3
   12120:	andeq	r7, r1, r4, lsl #8
   12124:	strdeq	r8, [r1], -r4
   12128:	andeq	r8, r1, r0, lsl #4
   1212c:	andeq	r8, r1, r0, lsl r2
   12130:	andeq	r8, r1, ip, asr #3
   12134:	ldrdeq	r8, [r1], -r4
   12138:	strdeq	r8, [r1], -r0
   1213c:	andeq	r7, r1, ip, asr #8
   12140:	andeq	r6, r1, r4, asr r8
   12144:	andeq	r8, r1, r0, ror #5
   12148:	andeq	r8, r1, ip, lsl r3
   1214c:	andeq	r6, r1, ip, ror #11
   12150:	andeq	r8, r1, r0, lsr #4
   12154:	muleq	r1, r8, r2
   12158:	andeq	r8, r1, r8, lsr #32
   1215c:	andeq	r8, r1, ip, lsl #1
   12160:	andeq	r8, r1, ip, asr r0
   12164:	andeq	r8, r1, ip, lsr #2
   12168:			; <UNDEFINED> instruction: 0x000182b8
   1216c:	muleq	r1, r0, r4
   12170:	andeq	r7, r1, r4, lsl pc
   12174:	andeq	r7, r1, r8, lsr pc
   12178:	andeq	r9, r2, r8
   1217c:	andeq	r7, r1, ip, asr #5
   12180:	andeq	r7, r1, r4, asr #30
   12184:	andeq	r7, r1, r4, lsr pc
   12188:	andeq	r7, r1, r8, ror #30
   1218c:	andeq	r7, r1, r8, ror #3
   12190:	andeq	r7, r1, r4, ror pc
   12194:	andeq	r7, r1, r8, ror #29
   12198:	andeq	r7, r1, r8, ror #27
   1219c:			; <UNDEFINED> instruction: 0x00017db8
   121a0:	muleq	r1, ip, sp
   121a4:	andeq	r7, r1, r8, ror sp
   121a8:	andeq	r7, r1, r4, asr #28
   121ac:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   121b0:	andeq	r7, r1, r8, asr #26
   121b4:	andeq	r8, r1, r8, ror #2
   121b8:	andeq	r7, r1, r8, lsr r4
   121bc:	andeq	r8, r1, r4, asr r2
   121c0:	andeq	r7, r1, r0, lsr #29
   121c4:	andeq	r7, r1, ip, ror lr
   121c8:	andeq	r7, r1, r4, asr #29
   121cc:	andeq	r7, r1, r0, lsl #31
   121d0:	andeq	r9, r2, ip, lsl #1
   121d4:	andeq	r7, r1, r8, lsl #31
   121d8:	ldr	r4, [sp, #8]
   121dc:	ldr	r1, [sp, #36]	; 0x24
   121e0:	mov	r0, r4
   121e4:	bl	12b08 <__assert_fail@plt+0x1a20>
   121e8:	cmp	r0, #0
   121ec:	beq	124d0 <__assert_fail@plt+0x13e8>
   121f0:	ldr	r4, [r4, #20]
   121f4:	mov	r5, #0
   121f8:	cmp	r4, #0
   121fc:	beq	1223c <__assert_fail@plt+0x1154>
   12200:	ldr	r1, [sp, #36]	; 0x24
   12204:	ldr	r0, [r4, #4]
   12208:	bl	10e3c <strcmp@plt>
   1220c:	ldr	r3, [r4]
   12210:	cmp	r0, #0
   12214:	bne	124f0 <__assert_fail@plt+0x1408>
   12218:	cmp	r5, #0
   1221c:	strne	r3, [r5]
   12220:	ldreq	r2, [sp, #8]
   12224:	mov	r0, r4
   12228:	streq	r3, [r2, #20]
   1222c:	bl	1307c <__assert_fail@plt+0x1f94>
   12230:	ldr	r2, [sp, #8]
   12234:	mov	r3, #1
   12238:	strb	r3, [r2, #32]
   1223c:	cmp	fp, #0
   12240:	beq	11390 <__assert_fail@plt+0x2a8>
   12244:	ldr	r1, [sp, #36]	; 0x24
   12248:	mov	r0, fp
   1224c:	bl	10e3c <strcmp@plt>
   12250:	cmp	r0, #0
   12254:	bne	11390 <__assert_fail@plt+0x2a8>
   12258:	ldr	r3, [sp, #8]
   1225c:	ldr	r3, [r3, #12]
   12260:	cmp	r3, #2
   12264:	beq	128d0 <__assert_fail@plt+0x17e8>
   12268:	ldr	r0, [sp, #8]
   1226c:	bl	139b4 <__assert_fail@plt+0x28cc>
   12270:	subs	r4, r0, #0
   12274:	ldrne	r4, [r4, #4]
   12278:	b	11bec <__assert_fail@plt+0xb04>
   1227c:	ldr	r1, [pc, #-328]	; 1213c <__assert_fail@plt+0x1054>
   12280:	mov	r2, #5
   12284:	mov	r0, #0
   12288:	bl	10ea8 <dcgettext@plt>
   1228c:	ldr	r1, [sl]
   12290:	bl	12c0c <__assert_fail@plt+0x1b24>
   12294:	ldr	r5, [sp, #8]
   12298:	ldr	r0, [r5, #4]
   1229c:	cmp	r0, #0
   122a0:	beq	124ac <__assert_fail@plt+0x13c4>
   122a4:	bl	137d4 <__assert_fail@plt+0x26ec>
   122a8:	subs	r4, r0, #0
   122ac:	bne	122c8 <__assert_fail@plt+0x11e0>
   122b0:	ldr	r3, [sp, #12]
   122b4:	ldr	r0, [r5, #4]
   122b8:	ldr	r1, [r3, #4]
   122bc:	bl	10e3c <strcmp@plt>
   122c0:	cmp	r0, #0
   122c4:	bne	12518 <__assert_fail@plt+0x1430>
   122c8:	ldr	r4, [sp, #12]
   122cc:	ldr	r3, [sp, #8]
   122d0:	ldr	sl, [pc, #-352]	; 12178 <__assert_fail@plt+0x1090>
   122d4:	ldr	r2, [r4, #4]
   122d8:	add	r1, r3, #32
   122dc:	add	r0, r3, #4
   122e0:	bl	141f4 <__assert_fail@plt+0x310c>
   122e4:	ldr	r5, [r4, #16]
   122e8:	cmp	r5, #0
   122ec:	beq	12438 <__assert_fail@plt+0x1350>
   122f0:	ldr	r3, [sp, #8]
   122f4:	ldr	r4, [r5, #4]
   122f8:	ldr	r7, [r3, #16]
   122fc:	b	12318 <__assert_fail@plt+0x1230>
   12300:	mov	r1, r4
   12304:	ldr	r0, [r7, #4]
   12308:	bl	10e3c <strcmp@plt>
   1230c:	cmp	r0, #0
   12310:	beq	12348 <__assert_fail@plt+0x1260>
   12314:	ldr	r7, [r7]
   12318:	cmp	r7, #0
   1231c:	bne	12300 <__assert_fail@plt+0x1218>
   12320:	mov	r3, #1
   12324:	strb	r3, [r5, #12]
   12328:	ldr	r3, [sp, #8]
   1232c:	ldmib	r5, {r1, r2}
   12330:	add	r0, r3, #16
   12334:	bl	14244 <__assert_fail@plt+0x315c>
   12338:	ldrb	r3, [r5, #12]
   1233c:	ldr	r5, [r5]
   12340:	strb	r3, [r0, #12]
   12344:	b	122e8 <__assert_fail@plt+0x1200>
   12348:	cmp	fp, #0
   1234c:	ldr	r7, [r7, #8]
   12350:	ldr	r8, [r5, #8]
   12354:	beq	12374 <__assert_fail@plt+0x128c>
   12358:	ldr	r9, [sp, #16]
   1235c:	mov	r0, fp
   12360:	ldr	r1, [r9, #4]
   12364:	bl	10e3c <strcmp@plt>
   12368:	cmp	r0, #0
   1236c:	ldreq	r9, [r9, #12]
   12370:	beq	123d0 <__assert_fail@plt+0x12e8>
   12374:	mov	r2, r4
   12378:	ldr	r1, [sl, #108]	; 0x6c
   1237c:	ldr	r0, [pc, #-580]	; 12140 <__assert_fail@plt+0x1058>
   12380:	bl	135f4 <__assert_fail@plt+0x250c>
   12384:	mov	r9, r0
   12388:	bl	13460 <__assert_fail@plt+0x2378>
   1238c:	mov	r4, r0
   12390:	mov	r0, r9
   12394:	bl	10e78 <free@plt>
   12398:	mov	r1, r8
   1239c:	mov	r0, r7
   123a0:	bl	10e3c <strcmp@plt>
   123a4:	cmp	r0, #0
   123a8:	bne	123e8 <__assert_fail@plt+0x1300>
   123ac:	mov	r0, r4
   123b0:	bl	10e78 <free@plt>
   123b4:	b	12328 <__assert_fail@plt+0x1240>
   123b8:	mov	r1, r4
   123bc:	ldr	r0, [r9, #4]
   123c0:	bl	10e3c <strcmp@plt>
   123c4:	cmp	r0, #0
   123c8:	beq	12430 <__assert_fail@plt+0x1348>
   123cc:	ldr	r9, [r9]
   123d0:	cmp	r9, #0
   123d4:	bne	123b8 <__assert_fail@plt+0x12d0>
   123d8:	mov	r0, r9
   123dc:	bl	13d00 <__assert_fail@plt+0x2c18>
   123e0:	mov	r4, r0
   123e4:	b	12398 <__assert_fail@plt+0x12b0>
   123e8:	mov	r0, r7
   123ec:	bl	137d4 <__assert_fail@plt+0x26ec>
   123f0:	cmp	r0, #0
   123f4:	bne	123ac <__assert_fail@plt+0x12c4>
   123f8:	cmp	r4, #0
   123fc:	beq	12410 <__assert_fail@plt+0x1328>
   12400:	mov	r0, r4
   12404:	bl	1370c <__assert_fail@plt+0x2624>
   12408:	cmp	r0, #0
   1240c:	beq	12600 <__assert_fail@plt+0x1518>
   12410:	mov	r0, r7
   12414:	bl	147cc <__assert_fail@plt+0x36e4>
   12418:	mov	r3, #1
   1241c:	strb	r3, [r5, #12]
   12420:	b	123ac <__assert_fail@plt+0x12c4>
   12424:	add	r0, r8, #2
   12428:	bl	14494 <__assert_fail@plt+0x33ac>
   1242c:	b	111cc <__assert_fail@plt+0xe4>
   12430:	ldr	r9, [r9, #8]
   12434:	b	123d8 <__assert_fail@plt+0x12f0>
   12438:	ldr	r3, [sp, #8]
   1243c:	str	r3, [sp, #12]
   12440:	ldr	r4, [sp, #12]
   12444:	ldr	r2, [sp, #16]
   12448:	add	r1, r4, #32
   1244c:	add	r0, r4, #20
   12450:	bl	13860 <__assert_fail@plt+0x2778>
   12454:	ldr	r3, [r4, #12]
   12458:	cmp	r3, #1
   1245c:	beq	124fc <__assert_fail@plt+0x1414>
   12460:	mov	r2, #5
   12464:	ldr	r1, [pc, #-808]	; 12144 <__assert_fail@plt+0x105c>
   12468:	mov	r0, #0
   1246c:	bl	10ea8 <dcgettext@plt>
   12470:	ldr	r4, [sp, #12]
   12474:	ldr	r3, [pc, #-772]	; 12178 <__assert_fail@plt+0x1090>
   12478:	str	r4, [sp, #8]
   1247c:	ldr	r2, [r4]
   12480:	ldr	r1, [r3, #108]	; 0x6c
   12484:	bl	12fb0 <__assert_fail@plt+0x1ec8>
   12488:	mov	r2, #5
   1248c:	ldr	r1, [pc, #-844]	; 12148 <__assert_fail@plt+0x1060>
   12490:	mov	r0, #0
   12494:	bl	10ea8 <dcgettext@plt>
   12498:	ldr	r2, [r4]
   1249c:	ldr	r1, [pc, #-856]	; 1214c <__assert_fail@plt+0x1064>
   124a0:	bl	12fb0 <__assert_fail@plt+0x1ec8>
   124a4:	mov	r4, #0
   124a8:	b	11bec <__assert_fail@plt+0xb04>
   124ac:	ldr	r2, [sp, #8]
   124b0:	ldr	r3, [r2, #28]
   124b4:	sub	r3, r3, #1
   124b8:	cmp	r3, #0
   124bc:	str	r3, [r2, #28]
   124c0:	bne	12440 <__assert_fail@plt+0x1358>
   124c4:	mov	r0, r2
   124c8:	bl	15054 <__assert_fail@plt+0x3f6c>
   124cc:	b	12440 <__assert_fail@plt+0x1358>
   124d0:	mov	r2, #5
   124d4:	ldr	r1, [pc, #-908]	; 12150 <__assert_fail@plt+0x1068>
   124d8:	bl	10ea8 <dcgettext@plt>
   124dc:	ldr	r3, [sp, #8]
   124e0:	ldr	r1, [sp, #36]	; 0x24
   124e4:	ldr	r2, [r3]
   124e8:	bl	12fb0 <__assert_fail@plt+0x1ec8>
   124ec:	b	1223c <__assert_fail@plt+0x1154>
   124f0:	mov	r5, r4
   124f4:	mov	r4, r3
   124f8:	b	121f8 <__assert_fail@plt+0x1110>
   124fc:	ldr	r4, [sp, #12]
   12500:	mov	r0, r4
   12504:	bl	139b4 <__assert_fail@plt+0x28cc>
   12508:	str	r4, [sp, #8]
   1250c:	ldr	r4, [r0, #4]
   12510:	b	11bec <__assert_fail@plt+0xb04>
   12514:	bl	136a0 <__assert_fail@plt+0x25b8>
   12518:	mov	r0, r4
   1251c:	mov	r2, #5
   12520:	ldr	r1, [pc, #-980]	; 12154 <__assert_fail@plt+0x106c>
   12524:	bl	10ea8 <dcgettext@plt>
   12528:	ldr	r4, [sp, #12]
   1252c:	ldr	r5, [sp, #8]
   12530:	ldr	r1, [r4]
   12534:	ldr	r3, [r4, #4]
   12538:	ldr	r2, [r5, #4]
   1253c:	bl	12f14 <__assert_fail@plt+0x1e2c>
   12540:	ldr	r1, [r4, #4]
   12544:	ldr	r0, [r5, #4]
   12548:	bl	1491c <__assert_fail@plt+0x3834>
   1254c:	b	122c8 <__assert_fail@plt+0x11e0>
   12550:	mov	r2, #5
   12554:	ldr	r1, [pc, #-1028]	; 12158 <__assert_fail@plt+0x1070>
   12558:	mov	r0, #0
   1255c:	bl	10ea8 <dcgettext@plt>
   12560:	ldr	r3, [sp, #12]
   12564:	ldr	r2, [r6]
   12568:	ldr	r1, [r3]
   1256c:	bl	12c0c <__assert_fail@plt+0x1b24>
   12570:	mov	r2, #5
   12574:	ldr	r1, [pc, #-1052]	; 12160 <__assert_fail@plt+0x1078>
   12578:	mov	r0, #0
   1257c:	bl	10ea8 <dcgettext@plt>
   12580:	ldr	r2, [r4]
   12584:	ldr	r1, [r8, #8]
   12588:	bl	12c0c <__assert_fail@plt+0x1b24>
   1258c:	bl	10ec0 <__stack_chk_fail@plt>
   12590:	ldr	r1, [pc, #-1084]	; 1215c <__assert_fail@plt+0x1074>
   12594:	mov	r2, #5
   12598:	mov	r0, #0
   1259c:	bl	10ea8 <dcgettext@plt>
   125a0:	ldr	r3, [sp, #16]
   125a4:	ldr	r1, [r3, #4]
   125a8:	bl	12c0c <__assert_fail@plt+0x1b24>
   125ac:	mov	r1, r6
   125b0:	mov	r0, r9
   125b4:	bl	12abc <__assert_fail@plt+0x19d4>
   125b8:	mov	r2, #5
   125bc:	ldr	r1, [pc, #-1124]	; 12160 <__assert_fail@plt+0x1078>
   125c0:	mov	r4, r0
   125c4:	mov	r0, #0
   125c8:	bl	10ea8 <dcgettext@plt>
   125cc:	ldr	r3, [sp, #12]
   125d0:	ldr	r2, [r4]
   125d4:	ldr	r1, [r3, #4]
   125d8:	bl	12c0c <__assert_fail@plt+0x1b24>
   125dc:	mov	fp, r4
   125e0:	mov	r2, #5
   125e4:	ldr	r1, [pc, #-1160]	; 12164 <__assert_fail@plt+0x107c>
   125e8:	mov	r0, r7
   125ec:	bl	10ea8 <dcgettext@plt>
   125f0:	ldr	r3, [fp]
   125f4:	ldr	r2, [sl, #4]
   125f8:	ldr	r1, [r8, #8]
   125fc:	bl	12c0c <__assert_fail@plt+0x1b24>
   12600:	mov	r2, #5
   12604:	ldr	r1, [pc, #-1188]	; 12168 <__assert_fail@plt+0x1080>
   12608:	bl	10ea8 <dcgettext@plt>
   1260c:	ldr	r1, [r5, #4]
   12610:	mov	r3, r8
   12614:	mov	r2, r7
   12618:	bl	12f14 <__assert_fail@plt+0x1e2c>
   1261c:	mov	r1, r8
   12620:	mov	r0, r7
   12624:	bl	1491c <__assert_fail@plt+0x3834>
   12628:	b	12418 <__assert_fail@plt+0x1330>
   1262c:	ldr	r3, [pc, #-1124]	; 121d0 <__assert_fail@plt+0x10e8>
   12630:	ldr	r3, [r3, #8]
   12634:	cmp	r3, #1
   12638:	bne	1290c <__assert_fail@plt+0x1824>
   1263c:	add	r4, r4, #3
   12640:	cmp	r4, r9
   12644:	bge	128f8 <__assert_fail@plt+0x1810>
   12648:	ldr	r3, [sl, #12]
   1264c:	ldr	r6, [sl, #4]
   12650:	mov	r1, r3
   12654:	mov	r0, r6
   12658:	str	r3, [sp, #28]
   1265c:	bl	10e3c <strcmp@plt>
   12660:	ldr	r8, [sl, #8]
   12664:	cmp	r0, #0
   12668:	beq	1286c <__assert_fail@plt+0x1784>
   1266c:	ldr	r3, [sp, #12]
   12670:	mov	r1, r8
   12674:	ldr	r0, [r3]
   12678:	bl	10e3c <strcmp@plt>
   1267c:	cmp	r0, #0
   12680:	beq	1291c <__assert_fail@plt+0x1834>
   12684:	ldr	r3, [sp, #12]
   12688:	mov	r0, r6
   1268c:	ldr	r1, [r3, #4]
   12690:	bl	10e3c <strcmp@plt>
   12694:	cmp	r0, #0
   12698:	beq	12814 <__assert_fail@plt+0x172c>
   1269c:	ldr	r3, [sp, #12]
   126a0:	str	r5, [sp, #32]
   126a4:	mov	r5, r4
   126a8:	ldr	sl, [r3, #16]
   126ac:	mov	r4, sl
   126b0:	b	126cc <__assert_fail@plt+0x15e4>
   126b4:	mov	r1, r8
   126b8:	ldr	r0, [r4, #4]
   126bc:	bl	10e3c <strcmp@plt>
   126c0:	cmp	r0, #0
   126c4:	beq	12780 <__assert_fail@plt+0x1698>
   126c8:	ldr	r4, [r4]
   126cc:	cmp	r4, #0
   126d0:	bne	126b4 <__assert_fail@plt+0x15cc>
   126d4:	mov	r4, r5
   126d8:	ldr	r3, [pc, #-1396]	; 1216c <__assert_fail@plt+0x1084>
   126dc:	ldr	r5, [sp, #32]
   126e0:	b	12708 <__assert_fail@plt+0x1620>
   126e4:	ldr	r0, [sl, #8]
   126e8:	mov	r1, r6
   126ec:	cmp	r0, #0
   126f0:	moveq	r0, r3
   126f4:	bl	10e3c <strcmp@plt>
   126f8:	ldr	r3, [pc, #-1428]	; 1216c <__assert_fail@plt+0x1084>
   126fc:	cmp	r0, #0
   12700:	beq	127dc <__assert_fail@plt+0x16f4>
   12704:	ldr	sl, [sl]
   12708:	cmp	sl, #0
   1270c:	bne	126e4 <__assert_fail@plt+0x15fc>
   12710:	ldr	r3, [sp, #12]
   12714:	mov	r2, r6
   12718:	mov	r1, r8
   1271c:	add	r0, r3, #16
   12720:	bl	14244 <__assert_fail@plt+0x315c>
   12724:	ldr	r3, [sp, #16]
   12728:	ldr	r2, [sp, #28]
   1272c:	mov	r1, r8
   12730:	add	r0, r3, #12
   12734:	bl	14318 <__assert_fail@plt+0x3230>
   12738:	b	111cc <__assert_fail@plt+0xe4>
   1273c:	ldr	r1, [pc, #-1492]	; 12170 <__assert_fail@plt+0x1088>
   12740:	mov	r2, #5
   12744:	bl	10ea8 <dcgettext@plt>
   12748:	ldr	r1, [pc, #-1484]	; 12184 <__assert_fail@plt+0x109c>
   1274c:	bl	12b50 <__assert_fail@plt+0x1a68>
   12750:	mov	r1, r8
   12754:	ldr	r0, [pc, #-1512]	; 12174 <__assert_fail@plt+0x108c>
   12758:	bl	10e3c <strcmp@plt>
   1275c:	cmp	r0, #0
   12760:	bne	127ac <__assert_fail@plt+0x16c4>
   12764:	add	r4, r4, #1
   12768:	cmp	r4, r9
   1276c:	bge	12794 <__assert_fail@plt+0x16ac>
   12770:	ldr	r3, [pc, #-1536]	; 12178 <__assert_fail@plt+0x1090>
   12774:	ldr	r2, [sl, #4]
   12778:	str	r2, [r3, #108]	; 0x6c
   1277c:	b	111cc <__assert_fail@plt+0xe4>
   12780:	ldr	r1, [pc, #-1548]	; 1217c <__assert_fail@plt+0x1094>
   12784:	mov	r2, #5
   12788:	bl	10ea8 <dcgettext@plt>
   1278c:	mov	r1, r8
   12790:	bl	12b50 <__assert_fail@plt+0x1a68>
   12794:	ldr	r1, [pc, #-1564]	; 12180 <__assert_fail@plt+0x1098>
   12798:	mov	r2, #5
   1279c:	mov	r0, #0
   127a0:	bl	10ea8 <dcgettext@plt>
   127a4:	ldr	r1, [pc, #-1576]	; 12184 <__assert_fail@plt+0x109c>
   127a8:	bl	12b50 <__assert_fail@plt+0x1a68>
   127ac:	mov	r1, r8
   127b0:	ldr	r0, [pc, #-1584]	; 12188 <__assert_fail@plt+0x10a0>
   127b4:	bl	10e3c <strcmp@plt>
   127b8:	cmp	r0, #0
   127bc:	bne	127f0 <__assert_fail@plt+0x1708>
   127c0:	add	r4, r4, #1
   127c4:	cmp	r4, r9
   127c8:	bge	12794 <__assert_fail@plt+0x16ac>
   127cc:	ldr	r2, [pc, #-1540]	; 121d0 <__assert_fail@plt+0x10e8>
   127d0:	ldr	r3, [sl, #4]
   127d4:	str	r3, [r2, #16]
   127d8:	b	111cc <__assert_fail@plt+0xe4>
   127dc:	ldr	r1, [pc, #-1624]	; 1218c <__assert_fail@plt+0x10a4>
   127e0:	mov	r2, #5
   127e4:	bl	10ea8 <dcgettext@plt>
   127e8:	mov	r1, r6
   127ec:	bl	12b50 <__assert_fail@plt+0x1a68>
   127f0:	mov	r1, r8
   127f4:	ldr	r0, [pc, #-1644]	; 12190 <__assert_fail@plt+0x10a8>
   127f8:	bl	10e3c <strcmp@plt>
   127fc:	cmp	r0, #0
   12800:	bne	12930 <__assert_fail@plt+0x1848>
   12804:	ldr	r2, [pc, #-1596]	; 121d0 <__assert_fail@plt+0x10e8>
   12808:	mov	r3, #1
   1280c:	str	r3, [r2, #12]
   12810:	b	111cc <__assert_fail@plt+0xe4>
   12814:	ldr	r1, [pc, #-1672]	; 12194 <__assert_fail@plt+0x10ac>
   12818:	mov	r2, #5
   1281c:	bl	10ea8 <dcgettext@plt>
   12820:	mov	r1, r6
   12824:	bl	12b50 <__assert_fail@plt+0x1a68>
   12828:	ldr	r1, [pc, #-1688]	; 12198 <__assert_fail@plt+0x10b0>
   1282c:	mov	r2, #5
   12830:	mov	r0, #0
   12834:	bl	10ea8 <dcgettext@plt>
   12838:	ldr	r1, [sl]
   1283c:	add	r1, r1, #2
   12840:	bl	12b50 <__assert_fail@plt+0x1a68>
   12844:	mov	r2, #5
   12848:	ldr	r1, [pc, #-1716]	; 1219c <__assert_fail@plt+0x10b4>
   1284c:	mov	r0, r8
   12850:	bl	10ea8 <dcgettext@plt>
   12854:	bl	12b50 <__assert_fail@plt+0x1a68>
   12858:	mov	r2, #5
   1285c:	ldr	r1, [pc, #-1732]	; 121a0 <__assert_fail@plt+0x10b8>
   12860:	mov	r0, #0
   12864:	bl	10ea8 <dcgettext@plt>
   12868:	bl	12b50 <__assert_fail@plt+0x1a68>
   1286c:	mov	r2, #5
   12870:	ldr	r1, [pc, #-1748]	; 121a4 <__assert_fail@plt+0x10bc>
   12874:	bl	10ea8 <dcgettext@plt>
   12878:	bl	12b50 <__assert_fail@plt+0x1a68>
   1287c:	mov	r2, #5
   12880:	ldr	r1, [pc, #-1760]	; 121a8 <__assert_fail@plt+0x10c0>
   12884:	b	12830 <__assert_fail@plt+0x1748>
   12888:	mov	r2, #5
   1288c:	ldr	r1, [pc, #-1768]	; 121ac <__assert_fail@plt+0x10c4>
   12890:	bl	10ea8 <dcgettext@plt>
   12894:	bl	12b50 <__assert_fail@plt+0x1a68>
   12898:	mov	r2, #5
   1289c:	ldr	r1, [pc, #-1780]	; 121b0 <__assert_fail@plt+0x10c8>
   128a0:	bl	10ea8 <dcgettext@plt>
   128a4:	bl	12b50 <__assert_fail@plt+0x1a68>
   128a8:	ldr	r1, [pc, #-1788]	; 121b4 <__assert_fail@plt+0x10cc>
   128ac:	mov	r2, #5
   128b0:	bl	10ea8 <dcgettext@plt>
   128b4:	ldr	r3, [sp, #8]
   128b8:	ldr	r1, [r3]
   128bc:	bl	12c0c <__assert_fail@plt+0x1b24>
   128c0:	ldr	r0, [pc, #-1808]	; 121b8 <__assert_fail@plt+0x10d0>
   128c4:	bl	12dfc <__assert_fail@plt+0x1d14>
   128c8:	mov	r0, #1
   128cc:	bl	13544 <__assert_fail@plt+0x245c>
   128d0:	mov	r2, #5
   128d4:	ldr	r1, [pc, #-1824]	; 121bc <__assert_fail@plt+0x10d4>
   128d8:	bl	10ea8 <dcgettext@plt>
   128dc:	ldr	r4, [sp, #8]
   128e0:	ldr	r1, [r4]
   128e4:	bl	12f14 <__assert_fail@plt+0x1e2c>
   128e8:	mov	r1, #1
   128ec:	mov	r0, r4
   128f0:	bl	133e8 <__assert_fail@plt+0x2300>
   128f4:	b	12268 <__assert_fail@plt+0x1180>
   128f8:	mov	r2, #5
   128fc:	ldr	r1, [pc, #-1860]	; 121c0 <__assert_fail@plt+0x10d8>
   12900:	mov	r0, #0
   12904:	bl	10ea8 <dcgettext@plt>
   12908:	bl	12b50 <__assert_fail@plt+0x1a68>
   1290c:	mov	r2, #5
   12910:	ldr	r1, [pc, #-1876]	; 121c4 <__assert_fail@plt+0x10dc>
   12914:	bl	10ea8 <dcgettext@plt>
   12918:	bl	12b50 <__assert_fail@plt+0x1a68>
   1291c:	ldr	r1, [pc, #-1884]	; 121c8 <__assert_fail@plt+0x10e0>
   12920:	mov	r2, #5
   12924:	bl	10ea8 <dcgettext@plt>
   12928:	mov	r1, r8
   1292c:	bl	12b50 <__assert_fail@plt+0x1a68>
   12930:	mov	r1, r8
   12934:	ldr	r0, [pc, #-1904]	; 121cc <__assert_fail@plt+0x10e4>
   12938:	bl	10e3c <strcmp@plt>
   1293c:	cmp	r0, #0
   12940:	ldreq	r2, [pc, #-1912]	; 121d0 <__assert_fail@plt+0x10e8>
   12944:	moveq	r3, #1
   12948:	streq	r3, [r2, #20]
   1294c:	beq	111cc <__assert_fail@plt+0xe4>
   12950:	ldr	r1, [pc, #-1924]	; 121d4 <__assert_fail@plt+0x10ec>
   12954:	mov	r2, #5
   12958:	mov	r0, #0
   1295c:	bl	10ea8 <dcgettext@plt>
   12960:	ldr	r1, [sl]
   12964:	bl	12b50 <__assert_fail@plt+0x1a68>
   12968:	mov	fp, #0
   1296c:	mov	lr, #0
   12970:	pop	{r1}		; (ldr r1, [sp], #4)
   12974:	mov	r2, sp
   12978:	push	{r2}		; (str r2, [sp, #-4]!)
   1297c:	push	{r0}		; (str r0, [sp, #-4]!)
   12980:	ldr	ip, [pc, #16]	; 12998 <__assert_fail@plt+0x18b0>
   12984:	push	{ip}		; (str ip, [sp, #-4]!)
   12988:	ldr	r0, [pc, #12]	; 1299c <__assert_fail@plt+0x18b4>
   1298c:	ldr	r3, [pc, #12]	; 129a0 <__assert_fail@plt+0x18b8>
   12990:	bl	10f44 <__libc_start_main@plt>
   12994:	bl	110c4 <abort@plt>
   12998:	andeq	r6, r1, r8, ror #10
   1299c:	strdeq	r1, [r1], -r4
   129a0:	andeq	r6, r1, r8, lsl #10
   129a4:	ldr	r3, [pc, #20]	; 129c0 <__assert_fail@plt+0x18d8>
   129a8:	ldr	r2, [pc, #20]	; 129c4 <__assert_fail@plt+0x18dc>
   129ac:	add	r3, pc, r3
   129b0:	ldr	r2, [r3, r2]
   129b4:	cmp	r2, #0
   129b8:	bxeq	lr
   129bc:	b	10f80 <__gmon_start__@plt>
   129c0:	andeq	r6, r1, r0, asr r5
   129c4:	strdeq	r0, [r0], -r8
   129c8:	ldr	r0, [pc, #24]	; 129e8 <__assert_fail@plt+0x1900>
   129cc:	ldr	r3, [pc, #24]	; 129ec <__assert_fail@plt+0x1904>
   129d0:	cmp	r3, r0
   129d4:	bxeq	lr
   129d8:	ldr	r3, [pc, #16]	; 129f0 <__assert_fail@plt+0x1908>
   129dc:	cmp	r3, #0
   129e0:	bxeq	lr
   129e4:	bx	r3
   129e8:	andeq	r9, r2, r8, ror r0
   129ec:	andeq	r9, r2, r8, ror r0
   129f0:	andeq	r0, r0, r0
   129f4:	ldr	r0, [pc, #36]	; 12a20 <__assert_fail@plt+0x1938>
   129f8:	ldr	r1, [pc, #36]	; 12a24 <__assert_fail@plt+0x193c>
   129fc:	sub	r1, r1, r0
   12a00:	asr	r1, r1, #2
   12a04:	add	r1, r1, r1, lsr #31
   12a08:	asrs	r1, r1, #1
   12a0c:	bxeq	lr
   12a10:	ldr	r3, [pc, #16]	; 12a28 <__assert_fail@plt+0x1940>
   12a14:	cmp	r3, #0
   12a18:	bxeq	lr
   12a1c:	bx	r3
   12a20:	andeq	r9, r2, r8, ror r0
   12a24:	andeq	r9, r2, r8, ror r0
   12a28:	andeq	r0, r0, r0
   12a2c:	push	{r4, lr}
   12a30:	ldr	r4, [pc, #24]	; 12a50 <__assert_fail@plt+0x1968>
   12a34:	ldrb	r3, [r4]
   12a38:	cmp	r3, #0
   12a3c:	popne	{r4, pc}
   12a40:	bl	129c8 <__assert_fail@plt+0x18e0>
   12a44:	mov	r3, #1
   12a48:	strb	r3, [r4]
   12a4c:	pop	{r4, pc}
   12a50:	andeq	r9, r2, r8, lsl #1
   12a54:	b	129f4 <__assert_fail@plt+0x190c>
   12a58:	push	{r4, r5, r6, lr}
   12a5c:	ldr	r4, [r0, #12]
   12a60:	cmp	r4, #0
   12a64:	beq	12aac <__assert_fail@plt+0x19c4>
   12a68:	mov	r5, r1
   12a6c:	b	12a7c <__assert_fail@plt+0x1994>
   12a70:	ldr	r4, [r4]
   12a74:	cmp	r4, #0
   12a78:	beq	12aac <__assert_fail@plt+0x19c4>
   12a7c:	mov	r1, r5
   12a80:	ldr	r0, [r4, #4]
   12a84:	bl	10e3c <strcmp@plt>
   12a88:	cmp	r0, #0
   12a8c:	bne	12a70 <__assert_fail@plt+0x1988>
   12a90:	ldr	r3, [r4, #8]
   12a94:	cmp	r3, #0
   12a98:	beq	12ab4 <__assert_fail@plt+0x19cc>
   12a9c:	ldrb	r4, [r3]
   12aa0:	adds	r0, r4, #0
   12aa4:	movne	r0, #1
   12aa8:	pop	{r4, r5, r6, pc}
   12aac:	mov	r0, r4
   12ab0:	pop	{r4, r5, r6, pc}
   12ab4:	mov	r0, r3
   12ab8:	pop	{r4, r5, r6, pc}
   12abc:	push	{r4, r5, r6, lr}
   12ac0:	subs	r4, r0, #0
   12ac4:	beq	12af4 <__assert_fail@plt+0x1a0c>
   12ac8:	mov	r5, r1
   12acc:	ldr	r3, [r4, #4]
   12ad0:	mov	r1, r5
   12ad4:	subs	r0, r3, #0
   12ad8:	beq	12ae8 <__assert_fail@plt+0x1a00>
   12adc:	bl	10e3c <strcmp@plt>
   12ae0:	cmp	r0, #0
   12ae4:	beq	12afc <__assert_fail@plt+0x1a14>
   12ae8:	ldr	r4, [r4]
   12aec:	cmp	r4, #0
   12af0:	bne	12acc <__assert_fail@plt+0x19e4>
   12af4:	mov	r0, r4
   12af8:	pop	{r4, r5, r6, pc}
   12afc:	ldr	r4, [r4, #8]
   12b00:	mov	r0, r4
   12b04:	pop	{r4, r5, r6, pc}
   12b08:	push	{r4, r5, r6, lr}
   12b0c:	ldr	r4, [r0, #20]
   12b10:	cmp	r4, #0
   12b14:	beq	12b48 <__assert_fail@plt+0x1a60>
   12b18:	mov	r5, r1
   12b1c:	b	12b2c <__assert_fail@plt+0x1a44>
   12b20:	ldr	r4, [r4]
   12b24:	cmp	r4, #0
   12b28:	beq	12b48 <__assert_fail@plt+0x1a60>
   12b2c:	mov	r1, r5
   12b30:	ldr	r0, [r4, #4]
   12b34:	bl	10e3c <strcmp@plt>
   12b38:	cmp	r0, #0
   12b3c:	bne	12b20 <__assert_fail@plt+0x1a38>
   12b40:	mov	r0, #1
   12b44:	pop	{r4, r5, r6, pc}
   12b48:	mov	r0, r4
   12b4c:	pop	{r4, r5, r6, pc}
   12b50:	push	{r0, r1, r2, r3}
   12b54:	mov	r1, #1
   12b58:	ldr	r3, [pc, #148]	; 12bf4 <__assert_fail@plt+0x1b0c>
   12b5c:	ldr	r4, [pc, #148]	; 12bf8 <__assert_fail@plt+0x1b10>
   12b60:	push	{lr}		; (str lr, [sp, #-4]!)
   12b64:	sub	sp, sp, #12
   12b68:	ldr	r5, [pc, #140]	; 12bfc <__assert_fail@plt+0x1b14>
   12b6c:	ldr	ip, [r3]
   12b70:	ldr	r6, [sp, #16]
   12b74:	mov	r3, r5
   12b78:	ldr	r2, [pc, #128]	; 12c00 <__assert_fail@plt+0x1b18>
   12b7c:	ldr	r0, [r4]
   12b80:	str	ip, [sp, #4]
   12b84:	bl	1101c <__fprintf_chk@plt>
   12b88:	add	ip, sp, #20
   12b8c:	mov	r3, ip
   12b90:	mov	r2, r6
   12b94:	mov	r1, #1
   12b98:	ldr	r0, [r4]
   12b9c:	str	ip, [sp]
   12ba0:	bl	10f68 <__vfprintf_chk@plt>
   12ba4:	ldr	r3, [r4]
   12ba8:	mov	r2, #2
   12bac:	mov	r1, #1
   12bb0:	ldr	r0, [pc, #76]	; 12c04 <__assert_fail@plt+0x1b1c>
   12bb4:	bl	10f08 <fwrite@plt>
   12bb8:	mov	r2, #5
   12bbc:	ldr	r1, [pc, #68]	; 12c08 <__assert_fail@plt+0x1b20>
   12bc0:	mov	r0, #0
   12bc4:	ldr	r6, [r4]
   12bc8:	bl	10ea8 <dcgettext@plt>
   12bcc:	mov	r3, r5
   12bd0:	mov	r1, #1
   12bd4:	mov	r2, r0
   12bd8:	mov	r0, r6
   12bdc:	bl	1101c <__fprintf_chk@plt>
   12be0:	ldr	r1, [r4]
   12be4:	mov	r0, #10
   12be8:	bl	11058 <fputc@plt>
   12bec:	mov	r0, #2
   12bf0:	bl	10fa4 <exit@plt>
   12bf4:	andeq	r8, r2, r0, lsl #28
   12bf8:	andeq	r9, r2, r8, ror r0
   12bfc:	andeq	r6, r1, ip, ror #11
   12c00:	andeq	r6, r1, ip, lsr r6
   12c04:	andeq	r7, r1, r8, asr #19
   12c08:	andeq	r6, r1, r0, lsl #12
   12c0c:	push	{r0, r1, r2, r3}
   12c10:	mov	r2, #5
   12c14:	ldr	r3, [pc, #108]	; 12c88 <__assert_fail@plt+0x1ba0>
   12c18:	ldr	r4, [pc, #108]	; 12c8c <__assert_fail@plt+0x1ba4>
   12c1c:	push	{lr}		; (str lr, [sp, #-4]!)
   12c20:	sub	sp, sp, #20
   12c24:	ldr	r3, [r3]
   12c28:	ldr	r1, [pc, #96]	; 12c90 <__assert_fail@plt+0x1ba8>
   12c2c:	mov	r0, #0
   12c30:	str	r3, [sp, #12]
   12c34:	ldr	r6, [r4]
   12c38:	ldr	r5, [sp, #24]
   12c3c:	bl	10ea8 <dcgettext@plt>
   12c40:	ldr	r3, [pc, #76]	; 12c94 <__assert_fail@plt+0x1bac>
   12c44:	ldr	r2, [pc, #76]	; 12c98 <__assert_fail@plt+0x1bb0>
   12c48:	mov	r1, #1
   12c4c:	str	r0, [sp]
   12c50:	mov	r0, r6
   12c54:	bl	1101c <__fprintf_chk@plt>
   12c58:	add	ip, sp, #28
   12c5c:	mov	r2, r5
   12c60:	mov	r3, ip
   12c64:	mov	r1, #1
   12c68:	ldr	r0, [r4]
   12c6c:	str	ip, [sp, #8]
   12c70:	bl	10f68 <__vfprintf_chk@plt>
   12c74:	ldr	r1, [r4]
   12c78:	mov	r0, #10
   12c7c:	bl	11058 <fputc@plt>
   12c80:	mov	r0, #2
   12c84:	bl	10fa4 <exit@plt>
   12c88:	andeq	r8, r2, r0, lsl #28
   12c8c:	andeq	r9, r2, r8, ror r0
   12c90:	andeq	r6, r1, r0, lsr r6
   12c94:	andeq	r6, r1, ip, ror #11
   12c98:	andeq	r6, r1, r8, lsr r6
   12c9c:	push	{r0, r1, r2, r3}
   12ca0:	ldr	r3, [pc, #156]	; 12d44 <__assert_fail@plt+0x1c5c>
   12ca4:	push	{r4, r5, r6, r7, lr}
   12ca8:	sub	sp, sp, #20
   12cac:	ldr	r4, [pc, #148]	; 12d48 <__assert_fail@plt+0x1c60>
   12cb0:	ldr	r2, [r3]
   12cb4:	ldr	r6, [sp, #40]	; 0x28
   12cb8:	ldr	r3, [r4]
   12cbc:	cmp	r2, #0
   12cc0:	str	r3, [sp, #12]
   12cc4:	blt	12d20 <__assert_fail@plt+0x1c38>
   12cc8:	ldr	r5, [pc, #124]	; 12d4c <__assert_fail@plt+0x1c64>
   12ccc:	mov	r2, #5
   12cd0:	ldr	r1, [pc, #120]	; 12d50 <__assert_fail@plt+0x1c68>
   12cd4:	mov	r0, #0
   12cd8:	ldr	r7, [r5]
   12cdc:	bl	10ea8 <dcgettext@plt>
   12ce0:	ldr	r3, [pc, #108]	; 12d54 <__assert_fail@plt+0x1c6c>
   12ce4:	ldr	r2, [pc, #108]	; 12d58 <__assert_fail@plt+0x1c70>
   12ce8:	mov	r1, #1
   12cec:	str	r0, [sp]
   12cf0:	mov	r0, r7
   12cf4:	bl	1101c <__fprintf_chk@plt>
   12cf8:	add	ip, sp, #44	; 0x2c
   12cfc:	mov	r1, #1
   12d00:	mov	r2, r6
   12d04:	ldr	r0, [r5]
   12d08:	mov	r3, ip
   12d0c:	str	ip, [sp, #8]
   12d10:	bl	10f68 <__vfprintf_chk@plt>
   12d14:	ldr	r1, [r5]
   12d18:	mov	r0, #10
   12d1c:	bl	11058 <fputc@plt>
   12d20:	ldr	r2, [sp, #12]
   12d24:	ldr	r3, [r4]
   12d28:	cmp	r2, r3
   12d2c:	bne	12d40 <__assert_fail@plt+0x1c58>
   12d30:	add	sp, sp, #20
   12d34:	pop	{r4, r5, r6, r7, lr}
   12d38:	add	sp, sp, #16
   12d3c:	bx	lr
   12d40:	bl	10ec0 <__stack_chk_fail@plt>
   12d44:	andeq	r9, r2, ip, lsl #1
   12d48:	andeq	r8, r2, r0, lsl #28
   12d4c:	andeq	r9, r2, r8, ror r0
   12d50:	andeq	r6, r1, r4, asr #12
   12d54:	andeq	r6, r1, ip, ror #11
   12d58:	andeq	r6, r1, r8, lsr r6
   12d5c:	push	{r0, r1, r2, r3}
   12d60:	ldr	r3, [pc, #132]	; 12dec <__assert_fail@plt+0x1d04>
   12d64:	push	{r4, r5, r6, lr}
   12d68:	sub	sp, sp, #8
   12d6c:	ldr	r4, [pc, #124]	; 12df0 <__assert_fail@plt+0x1d08>
   12d70:	ldr	r2, [r3]
   12d74:	ldr	r6, [sp, #24]
   12d78:	ldr	r3, [r4]
   12d7c:	cmp	r2, #1
   12d80:	str	r3, [sp, #4]
   12d84:	ble	12dc8 <__assert_fail@plt+0x1ce0>
   12d88:	ldr	r5, [pc, #100]	; 12df4 <__assert_fail@plt+0x1d0c>
   12d8c:	mov	r2, #7
   12d90:	mov	r1, #1
   12d94:	ldr	r3, [r5]
   12d98:	ldr	r0, [pc, #88]	; 12df8 <__assert_fail@plt+0x1d10>
   12d9c:	bl	10f08 <fwrite@plt>
   12da0:	add	ip, sp, #28
   12da4:	mov	r1, #1
   12da8:	mov	r2, r6
   12dac:	ldr	r0, [r5]
   12db0:	mov	r3, ip
   12db4:	str	ip, [sp]
   12db8:	bl	10f68 <__vfprintf_chk@plt>
   12dbc:	ldr	r1, [r5]
   12dc0:	mov	r0, #10
   12dc4:	bl	11058 <fputc@plt>
   12dc8:	ldr	r2, [sp, #4]
   12dcc:	ldr	r3, [r4]
   12dd0:	cmp	r2, r3
   12dd4:	bne	12de8 <__assert_fail@plt+0x1d00>
   12dd8:	add	sp, sp, #8
   12ddc:	pop	{r4, r5, r6, lr}
   12de0:	add	sp, sp, #16
   12de4:	bx	lr
   12de8:	bl	10ec0 <__stack_chk_fail@plt>
   12dec:	andeq	r9, r2, ip, lsl #1
   12df0:	andeq	r8, r2, r0, lsl #28
   12df4:	andeq	r9, r2, r8, ror r0
   12df8:	andeq	r6, r1, ip, asr #12
   12dfc:	push	{r0, r1, r2, r3}
   12e00:	mov	r2, #5
   12e04:	ldr	r3, [pc, #132]	; 12e90 <__assert_fail@plt+0x1da8>
   12e08:	ldr	r4, [pc, #132]	; 12e94 <__assert_fail@plt+0x1dac>
   12e0c:	push	{lr}		; (str lr, [sp, #-4]!)
   12e10:	sub	sp, sp, #20
   12e14:	ldr	r3, [r3]
   12e18:	ldr	r1, [pc, #120]	; 12e98 <__assert_fail@plt+0x1db0>
   12e1c:	mov	r0, #0
   12e20:	ldr	r6, [r4]
   12e24:	str	r3, [sp, #12]
   12e28:	ldr	r5, [sp, #24]
   12e2c:	bl	10ea8 <dcgettext@plt>
   12e30:	ldr	r3, [pc, #100]	; 12e9c <__assert_fail@plt+0x1db4>
   12e34:	ldr	r2, [pc, #100]	; 12ea0 <__assert_fail@plt+0x1db8>
   12e38:	mov	r1, #1
   12e3c:	str	r0, [sp]
   12e40:	mov	r0, r6
   12e44:	bl	1101c <__fprintf_chk@plt>
   12e48:	add	ip, sp, #28
   12e4c:	mov	r3, ip
   12e50:	mov	r2, r5
   12e54:	mov	r1, #1
   12e58:	ldr	r0, [r4]
   12e5c:	str	ip, [sp, #8]
   12e60:	bl	10f68 <__vfprintf_chk@plt>
   12e64:	bl	10fd4 <__errno_location@plt>
   12e68:	ldr	r4, [r4]
   12e6c:	ldr	r0, [r0]
   12e70:	bl	10f50 <strerror@plt>
   12e74:	ldr	r2, [pc, #40]	; 12ea4 <__assert_fail@plt+0x1dbc>
   12e78:	mov	r1, #1
   12e7c:	mov	r3, r0
   12e80:	mov	r0, r4
   12e84:	bl	1101c <__fprintf_chk@plt>
   12e88:	mov	r0, #2
   12e8c:	bl	10fa4 <exit@plt>
   12e90:	andeq	r8, r2, r0, lsl #28
   12e94:	andeq	r9, r2, r8, ror r0
   12e98:	andeq	r6, r1, r0, lsr r6
   12e9c:	andeq	r6, r1, ip, ror #11
   12ea0:	andeq	r6, r1, r8, lsr r6
   12ea4:	andeq	r6, r1, r4, asr r6
   12ea8:	push	{r0, r1, r2, r3}
   12eac:	push	{r4, lr}
   12eb0:	sub	sp, sp, #8
   12eb4:	ldr	r4, [pc, #80]	; 12f0c <__assert_fail@plt+0x1e24>
   12eb8:	ldr	r3, [pc, #80]	; 12f10 <__assert_fail@plt+0x1e28>
   12ebc:	add	ip, sp, #20
   12ec0:	ldr	r1, [r4]
   12ec4:	ldr	r2, [sp, #16]
   12ec8:	ldr	r0, [r3]
   12ecc:	str	r1, [sp, #4]
   12ed0:	mov	r3, ip
   12ed4:	mov	r1, #1
   12ed8:	str	ip, [sp]
   12edc:	bl	10f68 <__vfprintf_chk@plt>
   12ee0:	mov	r0, #10
   12ee4:	bl	10ff8 <putchar@plt>
   12ee8:	ldr	r2, [sp, #4]
   12eec:	ldr	r3, [r4]
   12ef0:	cmp	r2, r3
   12ef4:	bne	12f08 <__assert_fail@plt+0x1e20>
   12ef8:	add	sp, sp, #8
   12efc:	pop	{r4, lr}
   12f00:	add	sp, sp, #16
   12f04:	bx	lr
   12f08:	bl	10ec0 <__stack_chk_fail@plt>
   12f0c:	andeq	r8, r2, r0, lsl #28
   12f10:	andeq	r9, r2, r4, lsl #1
   12f14:	push	{r0, r1, r2, r3}
   12f18:	ldr	r3, [pc, #124]	; 12f9c <__assert_fail@plt+0x1eb4>
   12f1c:	push	{r4, r5, lr}
   12f20:	sub	sp, sp, #12
   12f24:	ldr	r4, [pc, #116]	; 12fa0 <__assert_fail@plt+0x1eb8>
   12f28:	ldr	r2, [r3]
   12f2c:	ldr	r5, [sp, #24]
   12f30:	ldr	r3, [r4]
   12f34:	cmp	r2, #0
   12f38:	str	r3, [sp, #4]
   12f3c:	blt	12f78 <__assert_fail@plt+0x1e90>
   12f40:	ldr	r2, [pc, #92]	; 12fa4 <__assert_fail@plt+0x1ebc>
   12f44:	ldr	r1, [pc, #92]	; 12fa8 <__assert_fail@plt+0x1ec0>
   12f48:	mov	r0, #1
   12f4c:	bl	11004 <__printf_chk@plt>
   12f50:	ldr	r3, [pc, #84]	; 12fac <__assert_fail@plt+0x1ec4>
   12f54:	add	ip, sp, #28
   12f58:	mov	r2, r5
   12f5c:	ldr	r0, [r3]
   12f60:	mov	r1, #1
   12f64:	mov	r3, ip
   12f68:	str	ip, [sp]
   12f6c:	bl	10f68 <__vfprintf_chk@plt>
   12f70:	mov	r0, #10
   12f74:	bl	10ff8 <putchar@plt>
   12f78:	ldr	r2, [sp, #4]
   12f7c:	ldr	r3, [r4]
   12f80:	cmp	r2, r3
   12f84:	bne	12f98 <__assert_fail@plt+0x1eb0>
   12f88:	add	sp, sp, #12
   12f8c:	pop	{r4, r5, lr}
   12f90:	add	sp, sp, #16
   12f94:	bx	lr
   12f98:	bl	10ec0 <__stack_chk_fail@plt>
   12f9c:	andeq	r9, r2, ip, lsl #1
   12fa0:	andeq	r8, r2, r0, lsl #28
   12fa4:	andeq	r6, r1, ip, ror #11
   12fa8:	andeq	r6, r1, ip, lsr r6
   12fac:	andeq	r9, r2, r4, lsl #1
   12fb0:	push	{r0, r1, r2, r3}
   12fb4:	ldr	r3, [pc, #124]	; 13038 <__assert_fail@plt+0x1f50>
   12fb8:	push	{r4, r5, lr}
   12fbc:	sub	sp, sp, #12
   12fc0:	ldr	r4, [pc, #116]	; 1303c <__assert_fail@plt+0x1f54>
   12fc4:	ldr	r2, [r3]
   12fc8:	ldr	r5, [sp, #24]
   12fcc:	ldr	r3, [r4]
   12fd0:	cmp	r2, #0
   12fd4:	str	r3, [sp, #4]
   12fd8:	ble	13014 <__assert_fail@plt+0x1f2c>
   12fdc:	ldr	r2, [pc, #92]	; 13040 <__assert_fail@plt+0x1f58>
   12fe0:	ldr	r1, [pc, #92]	; 13044 <__assert_fail@plt+0x1f5c>
   12fe4:	mov	r0, #1
   12fe8:	bl	11004 <__printf_chk@plt>
   12fec:	ldr	r3, [pc, #84]	; 13048 <__assert_fail@plt+0x1f60>
   12ff0:	add	ip, sp, #28
   12ff4:	mov	r2, r5
   12ff8:	ldr	r0, [r3]
   12ffc:	mov	r1, #1
   13000:	mov	r3, ip
   13004:	str	ip, [sp]
   13008:	bl	10f68 <__vfprintf_chk@plt>
   1300c:	mov	r0, #10
   13010:	bl	10ff8 <putchar@plt>
   13014:	ldr	r2, [sp, #4]
   13018:	ldr	r3, [r4]
   1301c:	cmp	r2, r3
   13020:	bne	13034 <__assert_fail@plt+0x1f4c>
   13024:	add	sp, sp, #12
   13028:	pop	{r4, r5, lr}
   1302c:	add	sp, sp, #16
   13030:	bx	lr
   13034:	bl	10ec0 <__stack_chk_fail@plt>
   13038:	andeq	r9, r2, ip, lsl #1
   1303c:	andeq	r8, r2, r0, lsl #28
   13040:	andeq	r6, r1, ip, ror #11
   13044:	andeq	r6, r1, ip, lsr r6
   13048:	andeq	r9, r2, r4, lsl #1
   1304c:	cmp	r1, #0
   13050:	push	{r4, r5, r6, lr}
   13054:	mov	r5, r0
   13058:	beq	13070 <__assert_fail@plt+0x1f88>
   1305c:	add	r4, r0, r1, lsl #2
   13060:	ldr	r0, [r4, #-4]!
   13064:	bl	10e78 <free@plt>
   13068:	cmp	r4, r5
   1306c:	bne	13060 <__assert_fail@plt+0x1f78>
   13070:	mov	r0, r5
   13074:	pop	{r4, r5, r6, lr}
   13078:	b	10e78 <free@plt>
   1307c:	push	{r4, r5, r6, lr}
   13080:	mov	r6, r0
   13084:	ldr	r0, [r0, #4]
   13088:	bl	10e78 <free@plt>
   1308c:	ldr	r4, [r6, #12]
   13090:	cmp	r4, #0
   13094:	beq	130bc <__assert_fail@plt+0x1fd4>
   13098:	ldr	r0, [r4, #4]
   1309c:	ldr	r5, [r4]
   130a0:	bl	10e78 <free@plt>
   130a4:	ldr	r0, [r4, #8]
   130a8:	bl	10e78 <free@plt>
   130ac:	mov	r0, r4
   130b0:	bl	10e78 <free@plt>
   130b4:	subs	r4, r5, #0
   130b8:	bne	13098 <__assert_fail@plt+0x1fb0>
   130bc:	mov	r0, r6
   130c0:	pop	{r4, r5, r6, lr}
   130c4:	b	10e78 <free@plt>
   130c8:	push	{r4, lr}
   130cc:	mov	r4, r0
   130d0:	bl	10f38 <malloc@plt>
   130d4:	cmp	r0, #0
   130d8:	popne	{r4, pc}
   130dc:	ldr	r1, [pc, #12]	; 130f0 <__assert_fail@plt+0x2008>
   130e0:	mov	r2, #5
   130e4:	bl	10ea8 <dcgettext@plt>
   130e8:	mov	r1, r4
   130ec:	bl	12c0c <__assert_fail@plt+0x1b24>
   130f0:	andeq	r6, r1, ip, asr r6
   130f4:	push	{r4, lr}
   130f8:	add	r4, r0, #19
   130fc:	mov	r0, r4
   13100:	ldr	r1, [pc, #80]	; 13158 <__assert_fail@plt+0x2070>
   13104:	bl	10e3c <strcmp@plt>
   13108:	cmp	r0, #0
   1310c:	popeq	{r4, pc}
   13110:	ldr	r1, [pc, #68]	; 1315c <__assert_fail@plt+0x2074>
   13114:	mov	r0, r4
   13118:	bl	10e3c <strcmp@plt>
   1311c:	cmp	r0, #0
   13120:	popeq	{r4, pc}
   13124:	mov	r0, r4
   13128:	bl	10fbc <strlen@plt>
   1312c:	cmp	r0, #9
   13130:	bls	13150 <__assert_fail@plt+0x2068>
   13134:	sub	r0, r0, #9
   13138:	add	r0, r4, r0
   1313c:	ldr	r1, [pc, #28]	; 13160 <__assert_fail@plt+0x2078>
   13140:	bl	10e3c <strcmp@plt>
   13144:	adds	r0, r0, #0
   13148:	movne	r0, #1
   1314c:	pop	{r4, pc}
   13150:	mov	r0, #1
   13154:	pop	{r4, pc}
   13158:	ldrdeq	r6, [r1], -ip
   1315c:	andeq	r6, r1, r8, ror r6
   13160:	andeq	r6, r1, ip, ror r6
   13164:	push	{r1, r2, r3}
   13168:	add	r0, r0, #24
   1316c:	push	{lr}		; (str lr, [sp, #-4]!)
   13170:	mov	r1, #1
   13174:	bl	11034 <__longjmp_chk@plt>
   13178:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1317c:	mov	r8, r0
   13180:	mov	r0, #1024	; 0x400
   13184:	mov	fp, r1
   13188:	bl	130c8 <__assert_fail@plt+0x1fe0>
   1318c:	mov	r6, #0
   13190:	mov	sl, r6
   13194:	mov	r4, #1024	; 0x400
   13198:	mov	r5, r0
   1319c:	bl	10fd4 <__errno_location@plt>
   131a0:	mov	r9, r0
   131a4:	b	131f0 <__assert_fail@plt+0x2108>
   131a8:	mov	r0, r5
   131ac:	bl	10fbc <strlen@plt>
   131b0:	sub	r3, r4, #1
   131b4:	cmp	r0, r3
   131b8:	bcc	13240 <__assert_fail@plt+0x2158>
   131bc:	add	r3, r5, r4
   131c0:	ldrb	r3, [r3, #-2]
   131c4:	cmp	r3, #10
   131c8:	beq	13240 <__assert_fail@plt+0x2158>
   131cc:	lsl	r4, r4, #1
   131d0:	mov	r0, r5
   131d4:	mov	r1, r4
   131d8:	bl	10ed8 <realloc@plt>
   131dc:	subs	r5, r0, #0
   131e0:	beq	13298 <__assert_fail@plt+0x21b0>
   131e4:	mov	r0, r7
   131e8:	bl	10fbc <strlen@plt>
   131ec:	add	r6, r6, r0
   131f0:	str	sl, [r9]
   131f4:	ldr	r2, [r8]
   131f8:	sub	r1, r4, r6
   131fc:	add	r0, r5, r6
   13200:	bl	10e84 <fgets@plt>
   13204:	subs	r7, r0, #0
   13208:	bne	131a8 <__assert_fail@plt+0x20c0>
   1320c:	ldr	r0, [r8]
   13210:	bl	10fb0 <feof@plt>
   13214:	cmp	r0, #0
   13218:	beq	13268 <__assert_fail@plt+0x2180>
   1321c:	ldr	r1, [pc, #148]	; 132b8 <__assert_fail@plt+0x21d0>
   13220:	mov	r0, r7
   13224:	mov	r2, #5
   13228:	ldr	r4, [r8, #16]
   1322c:	bl	10ea8 <dcgettext@plt>
   13230:	mov	r2, fp
   13234:	mov	r1, r0
   13238:	mov	r0, r8
   1323c:	blx	r4
   13240:	cmp	r0, #0
   13244:	beq	132a8 <__assert_fail@plt+0x21c0>
   13248:	sub	r3, r0, #1
   1324c:	ldrb	r2, [r5, r3]
   13250:	cmp	r2, #10
   13254:	bne	132a8 <__assert_fail@plt+0x21c0>
   13258:	mov	r2, #0
   1325c:	mov	r0, r5
   13260:	strb	r2, [r7, r3]
   13264:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13268:	mov	r2, #5
   1326c:	ldr	r1, [pc, #72]	; 132bc <__assert_fail@plt+0x21d4>
   13270:	ldr	r4, [r8, #16]
   13274:	bl	10ea8 <dcgettext@plt>
   13278:	mov	r5, r0
   1327c:	ldr	r0, [r9]
   13280:	bl	10f50 <strerror@plt>
   13284:	mov	r2, fp
   13288:	mov	r1, r5
   1328c:	mov	r3, r0
   13290:	mov	r0, r8
   13294:	blx	r4
   13298:	mov	r2, #5
   1329c:	ldr	r1, [pc, #28]	; 132c0 <__assert_fail@plt+0x21d8>
   132a0:	bl	10ea8 <dcgettext@plt>
   132a4:	bl	12c0c <__assert_fail@plt+0x1b24>
   132a8:	mov	r2, #5
   132ac:	ldr	r1, [pc, #16]	; 132c4 <__assert_fail@plt+0x21dc>
   132b0:	mov	r0, #0
   132b4:	b	13228 <__assert_fail@plt+0x2140>
   132b8:	andeq	r6, r1, r4, lsr #13
   132bc:	ldrdeq	r6, [r1], -r4
   132c0:	andeq	r6, r1, r8, lsl #13
   132c4:	andeq	r6, r1, ip, ror #13
   132c8:	push	{r0, r1, r2, r3}
   132cc:	push	{r4, r5, r6, r7, r8, lr}
   132d0:	sub	sp, sp, #88	; 0x58
   132d4:	ldr	r4, [pc, #236]	; 133c8 <__assert_fail@plt+0x22e0>
   132d8:	ldr	r6, [pc, #236]	; 133cc <__assert_fail@plt+0x22e4>
   132dc:	ldr	r8, [sp, #112]	; 0x70
   132e0:	ldr	r5, [r4, #4]
   132e4:	ldr	r3, [r6]
   132e8:	cmp	r5, #0
   132ec:	str	r3, [sp, #84]	; 0x54
   132f0:	beq	1337c <__assert_fail@plt+0x2294>
   132f4:	add	r0, sp, #16
   132f8:	bl	10e9c <time@plt>
   132fc:	add	r0, sp, #16
   13300:	bl	10f74 <localtime@plt>
   13304:	add	r7, sp, #20
   13308:	ldr	r2, [pc, #192]	; 133d0 <__assert_fail@plt+0x22e8>
   1330c:	mov	r1, #64	; 0x40
   13310:	mov	r3, r0
   13314:	mov	r0, r7
   13318:	bl	10f5c <strftime@plt>
   1331c:	ldr	r3, [pc, #176]	; 133d4 <__assert_fail@plt+0x22ec>
   13320:	ldr	r2, [pc, #176]	; 133d8 <__assert_fail@plt+0x22f0>
   13324:	mov	r1, #1
   13328:	str	r7, [sp]
   1332c:	mov	r0, r5
   13330:	bl	1101c <__fprintf_chk@plt>
   13334:	add	ip, sp, #116	; 0x74
   13338:	mov	r1, #1
   1333c:	mov	r2, r8
   13340:	mov	r3, ip
   13344:	ldr	r0, [r4, #4]
   13348:	str	ip, [sp, #12]
   1334c:	bl	10f68 <__vfprintf_chk@plt>
   13350:	ldr	r1, [r4, #4]
   13354:	mov	r0, #10
   13358:	bl	11058 <fputc@plt>
   1335c:	ldr	r2, [sp, #84]	; 0x54
   13360:	ldr	r3, [r6]
   13364:	cmp	r2, r3
   13368:	bne	133c4 <__assert_fail@plt+0x22dc>
   1336c:	add	sp, sp, #88	; 0x58
   13370:	pop	{r4, r5, r6, r7, r8, lr}
   13374:	add	sp, sp, #16
   13378:	bx	lr
   1337c:	ldr	r7, [pc, #88]	; 133dc <__assert_fail@plt+0x22f4>
   13380:	ldr	r1, [pc, #88]	; 133e0 <__assert_fail@plt+0x22f8>
   13384:	ldr	r0, [r7]
   13388:	bl	11070 <fopen64@plt>
   1338c:	cmp	r0, #0
   13390:	mov	r5, r0
   13394:	str	r0, [r4, #4]
   13398:	bne	132f4 <__assert_fail@plt+0x220c>
   1339c:	bl	10fd4 <__errno_location@plt>
   133a0:	ldr	r3, [r0]
   133a4:	cmp	r3, #13
   133a8:	beq	1335c <__assert_fail@plt+0x2274>
   133ac:	ldr	r1, [pc, #48]	; 133e4 <__assert_fail@plt+0x22fc>
   133b0:	mov	r0, r5
   133b4:	mov	r2, #5
   133b8:	bl	10ea8 <dcgettext@plt>
   133bc:	ldr	r1, [r7]
   133c0:	bl	12dfc <__assert_fail@plt+0x1d14>
   133c4:	bl	10ec0 <__stack_chk_fail@plt>
   133c8:	andeq	r9, r2, ip, lsl #1
   133cc:	andeq	r8, r2, r0, lsl #28
   133d0:	andeq	r6, r1, r4, lsr r7
   133d4:	andeq	r6, r1, ip, ror #11
   133d8:	andeq	r6, r1, r8, asr #14
   133dc:	andeq	r9, r2, r8
   133e0:	andeq	r6, r1, r8, lsl r7
   133e4:	andeq	r6, r1, ip, lsl r7
   133e8:	ldr	r3, [r0, #12]
   133ec:	push	{r4, r5, r6, lr}
   133f0:	subs	r2, r3, r1
   133f4:	movne	r2, #1
   133f8:	cmp	r3, #0
   133fc:	moveq	r2, #1
   13400:	cmp	r2, #0
   13404:	mov	r4, r0
   13408:	mov	r5, r1
   1340c:	beq	13420 <__assert_fail@plt+0x2338>
   13410:	mov	r2, #1
   13414:	cmp	r3, #0
   13418:	strb	r2, [r0, #32]
   1341c:	bne	13428 <__assert_fail@plt+0x2340>
   13420:	str	r5, [r4, #12]
   13424:	pop	{r4, r5, r6, pc}
   13428:	cmp	r3, r1
   1342c:	beq	13420 <__assert_fail@plt+0x2338>
   13430:	ldr	r3, [pc, #28]	; 13454 <__assert_fail@plt+0x236c>
   13434:	cmp	r5, #1
   13438:	ldr	r2, [pc, #24]	; 13458 <__assert_fail@plt+0x2370>
   1343c:	ldr	r1, [r0, #4]
   13440:	movne	r2, r3
   13444:	ldr	r0, [pc, #16]	; 1345c <__assert_fail@plt+0x2374>
   13448:	bl	132c8 <__assert_fail@plt+0x21e0>
   1344c:	str	r5, [r4, #12]
   13450:	pop	{r4, r5, r6, pc}
   13454:	andeq	r6, r1, r0, asr r7
   13458:	andeq	r8, r1, r0, lsr #32
   1345c:	andeq	r6, r1, r8, asr r7
   13460:	push	{r4, r5, r6, r7, lr}
   13464:	sub	sp, sp, #116	; 0x74
   13468:	ldr	r4, [pc, #164]	; 13514 <__assert_fail@plt+0x242c>
   1346c:	mov	r1, r0
   13470:	mov	r6, r0
   13474:	ldr	r3, [r4]
   13478:	mov	r2, sp
   1347c:	mov	r0, #3
   13480:	str	r3, [sp, #108]	; 0x6c
   13484:	bl	110d0 <__lxstat64@plt>
   13488:	subs	r7, r0, #0
   1348c:	movne	r5, #0
   13490:	bne	134d0 <__assert_fail@plt+0x23e8>
   13494:	ldr	r3, [sp, #16]
   13498:	and	r3, r3, #61440	; 0xf000
   1349c:	cmp	r3, #40960	; 0xa000
   134a0:	bne	134ec <__assert_fail@plt+0x2404>
   134a4:	ldr	r0, [sp, #48]	; 0x30
   134a8:	add	r0, r0, #1
   134ac:	bl	130c8 <__assert_fail@plt+0x1fe0>
   134b0:	ldr	r2, [sp, #48]	; 0x30
   134b4:	mov	r5, r0
   134b8:	mov	r1, r0
   134bc:	mov	r0, r6
   134c0:	bl	10efc <readlink@plt>
   134c4:	cmn	r0, #1
   134c8:	strbne	r7, [r5, r0]
   134cc:	beq	13500 <__assert_fail@plt+0x2418>
   134d0:	ldr	r2, [sp, #108]	; 0x6c
   134d4:	ldr	r3, [r4]
   134d8:	mov	r0, r5
   134dc:	cmp	r2, r3
   134e0:	bne	13510 <__assert_fail@plt+0x2428>
   134e4:	add	sp, sp, #116	; 0x74
   134e8:	pop	{r4, r5, r6, r7, pc}
   134ec:	bl	10fd4 <__errno_location@plt>
   134f0:	mov	r3, #22
   134f4:	mov	r5, r7
   134f8:	str	r3, [r0]
   134fc:	b	134d0 <__assert_fail@plt+0x23e8>
   13500:	mov	r0, r5
   13504:	bl	10e78 <free@plt>
   13508:	mov	r5, r7
   1350c:	b	134d0 <__assert_fail@plt+0x23e8>
   13510:	bl	10ec0 <__stack_chk_fail@plt>
   13514:	andeq	r8, r2, r0, lsl #28
   13518:	cmp	r0, #1
   1351c:	mov	r2, #5
   13520:	beq	13530 <__assert_fail@plt+0x2448>
   13524:	ldr	r1, [pc, #16]	; 1353c <__assert_fail@plt+0x2454>
   13528:	mov	r0, #0
   1352c:	b	10ea8 <dcgettext@plt>
   13530:	ldr	r1, [pc, #8]	; 13540 <__assert_fail@plt+0x2458>
   13534:	mov	r0, #0
   13538:	b	10ea8 <dcgettext@plt>
   1353c:	andeq	r6, r1, r8, lsl #15
   13540:	andeq	r6, r1, ip, ror r7
   13544:	push	{r4, lr}
   13548:	mov	r2, #5
   1354c:	mov	r4, r0
   13550:	ldr	r1, [pc, #36]	; 1357c <__assert_fail@plt+0x2494>
   13554:	mov	r0, #0
   13558:	bl	10ea8 <dcgettext@plt>
   1355c:	ldr	r2, [pc, #28]	; 13580 <__assert_fail@plt+0x2498>
   13560:	ldr	r3, [pc, #28]	; 13584 <__assert_fail@plt+0x249c>
   13564:	ldr	r2, [r2, #8]
   13568:	add	r4, r3, r4, lsl #3
   1356c:	add	r3, r3, r2, lsl #3
   13570:	ldr	r2, [r4, #8]
   13574:	ldr	r1, [r3, #8]
   13578:	bl	12b50 <__assert_fail@plt+0x1a68>
   1357c:	muleq	r1, r4, r7
   13580:	andeq	r9, r2, ip, lsl #1
   13584:	andeq	r9, r2, r8
   13588:	push	{r4, lr}
   1358c:	sub	sp, sp, #8
   13590:	ldr	r4, [pc, #84]	; 135ec <__assert_fail@plt+0x2504>
   13594:	mov	r3, r1
   13598:	mov	r2, r0
   1359c:	ldr	ip, [r4]
   135a0:	mov	r1, #1
   135a4:	mov	r0, sp
   135a8:	str	ip, [sp, #4]
   135ac:	bl	10fe0 <__vasprintf_chk@plt>
   135b0:	cmp	r0, #0
   135b4:	blt	135d4 <__assert_fail@plt+0x24ec>
   135b8:	ldr	r2, [sp, #4]
   135bc:	ldr	r3, [r4]
   135c0:	ldr	r0, [sp]
   135c4:	cmp	r2, r3
   135c8:	bne	135e8 <__assert_fail@plt+0x2500>
   135cc:	add	sp, sp, #8
   135d0:	pop	{r4, pc}
   135d4:	mov	r2, #5
   135d8:	ldr	r1, [pc, #16]	; 135f0 <__assert_fail@plt+0x2508>
   135dc:	mov	r0, #0
   135e0:	bl	10ea8 <dcgettext@plt>
   135e4:	bl	12c0c <__assert_fail@plt+0x1b24>
   135e8:	bl	10ec0 <__stack_chk_fail@plt>
   135ec:	andeq	r8, r2, r0, lsl #28
   135f0:	andeq	r6, r1, r8, lsl #13
   135f4:	push	{r0, r1, r2, r3}
   135f8:	push	{r4, lr}
   135fc:	sub	sp, sp, #8
   13600:	ldr	r4, [pc, #60]	; 13644 <__assert_fail@plt+0x255c>
   13604:	add	r3, sp, #20
   13608:	mov	r1, r3
   1360c:	ldr	r2, [r4]
   13610:	ldr	r0, [sp, #16]
   13614:	str	r2, [sp, #4]
   13618:	str	r3, [sp]
   1361c:	bl	13588 <__assert_fail@plt+0x24a0>
   13620:	ldr	r2, [sp, #4]
   13624:	ldr	r3, [r4]
   13628:	cmp	r2, r3
   1362c:	bne	13640 <__assert_fail@plt+0x2558>
   13630:	add	sp, sp, #8
   13634:	pop	{r4, lr}
   13638:	add	sp, sp, #16
   1363c:	bx	lr
   13640:	bl	10ec0 <__stack_chk_fail@plt>
   13644:	andeq	r8, r2, r0, lsl #28
   13648:	push	{r1, r2, r3}
   1364c:	mov	r4, r0
   13650:	ldr	r2, [pc, #64]	; 13698 <__assert_fail@plt+0x25b0>
   13654:	push	{lr}		; (str lr, [sp, #-4]!)
   13658:	sub	sp, sp, #8
   1365c:	add	r3, sp, #16
   13660:	ldr	r2, [r2]
   13664:	mov	r1, r3
   13668:	ldr	r0, [sp, #12]
   1366c:	str	r2, [sp, #4]
   13670:	str	r3, [sp]
   13674:	bl	13588 <__assert_fail@plt+0x24a0>
   13678:	mov	r2, #5
   1367c:	ldr	r1, [pc, #24]	; 1369c <__assert_fail@plt+0x25b4>
   13680:	mov	r5, r0
   13684:	mov	r0, #0
   13688:	bl	10ea8 <dcgettext@plt>
   1368c:	mov	r2, r5
   13690:	ldr	r1, [r4, #4]
   13694:	bl	12c0c <__assert_fail@plt+0x1b24>
   13698:	andeq	r8, r2, r0, lsl #28
   1369c:			; <UNDEFINED> instruction: 0x000167bc
   136a0:	push	{r4, lr}
   136a4:	mov	r2, #5
   136a8:	mov	r4, r0
   136ac:	ldr	r1, [pc, #12]	; 136c0 <__assert_fail@plt+0x25d8>
   136b0:	mov	r0, #0
   136b4:	bl	10ea8 <dcgettext@plt>
   136b8:	mov	r1, r4
   136bc:	bl	12c0c <__assert_fail@plt+0x1b24>
   136c0:	andeq	r6, r1, ip, asr #15
   136c4:	push	{r4, lr}
   136c8:	mov	r2, #5
   136cc:	mov	r4, r0
   136d0:	ldr	r1, [pc, #12]	; 136e4 <__assert_fail@plt+0x25fc>
   136d4:	mov	r0, #0
   136d8:	bl	10ea8 <dcgettext@plt>
   136dc:	mov	r1, r4
   136e0:	bl	12c0c <__assert_fail@plt+0x1b24>
   136e4:	andeq	r6, r1, r4, lsl #16
   136e8:	push	{r4, lr}
   136ec:	mov	r2, #5
   136f0:	mov	r4, r0
   136f4:	ldr	r1, [pc, #12]	; 13708 <__assert_fail@plt+0x2620>
   136f8:	mov	r0, #0
   136fc:	bl	10ea8 <dcgettext@plt>
   13700:	mov	r1, r4
   13704:	bl	12dfc <__assert_fail@plt+0x1d14>
   13708:	andeq	r6, r1, ip, lsr r8
   1370c:	push	{r4, r5, r6, lr}
   13710:	sub	sp, sp, #112	; 0x70
   13714:	ldr	r4, [pc, #100]	; 13780 <__assert_fail@plt+0x2698>
   13718:	mov	r6, r0
   1371c:	ldr	r3, [r4]
   13720:	str	r3, [sp, #108]	; 0x6c
   13724:	bl	10fd4 <__errno_location@plt>
   13728:	mov	r3, #0
   1372c:	mov	r1, r6
   13730:	mov	r2, sp
   13734:	str	r3, [r0]
   13738:	mov	r5, r0
   1373c:	mov	r0, #3
   13740:	bl	110ac <__xstat64@plt>
   13744:	cmp	r0, #0
   13748:	beq	1375c <__assert_fail@plt+0x2674>
   1374c:	ldr	r3, [r5]
   13750:	cmp	r3, #2
   13754:	moveq	r0, #1
   13758:	bne	13778 <__assert_fail@plt+0x2690>
   1375c:	ldr	r2, [sp, #108]	; 0x6c
   13760:	ldr	r3, [r4]
   13764:	cmp	r2, r3
   13768:	bne	13774 <__assert_fail@plt+0x268c>
   1376c:	add	sp, sp, #112	; 0x70
   13770:	pop	{r4, r5, r6, pc}
   13774:	bl	10ec0 <__stack_chk_fail@plt>
   13778:	mov	r0, r6
   1377c:	bl	136e8 <__assert_fail@plt+0x2600>
   13780:	andeq	r8, r2, r0, lsl #28
   13784:	push	{r4, r5, r6, lr}
   13788:	ldr	r4, [r0, #12]
   1378c:	cmp	r4, #0
   13790:	beq	137c0 <__assert_fail@plt+0x26d8>
   13794:	mov	r5, r1
   13798:	b	137a8 <__assert_fail@plt+0x26c0>
   1379c:	ldr	r4, [r4]
   137a0:	cmp	r4, #0
   137a4:	beq	137c0 <__assert_fail@plt+0x26d8>
   137a8:	mov	r1, r5
   137ac:	ldr	r0, [r4, #4]
   137b0:	bl	10e3c <strcmp@plt>
   137b4:	cmp	r0, #0
   137b8:	bne	1379c <__assert_fail@plt+0x26b4>
   137bc:	ldr	r4, [r4, #8]
   137c0:	mov	r0, r4
   137c4:	bl	1370c <__assert_fail@plt+0x2624>
   137c8:	eor	r0, r0, #1
   137cc:	uxtb	r0, r0
   137d0:	pop	{r4, r5, r6, pc}
   137d4:	push	{r4, r5, r6, lr}
   137d8:	sub	sp, sp, #112	; 0x70
   137dc:	ldr	r4, [pc, #120]	; 1385c <__assert_fail@plt+0x2774>
   137e0:	mov	r6, r0
   137e4:	ldr	r3, [r4]
   137e8:	str	r3, [sp, #108]	; 0x6c
   137ec:	bl	10fd4 <__errno_location@plt>
   137f0:	mov	r3, #0
   137f4:	mov	r1, r6
   137f8:	mov	r2, sp
   137fc:	str	r3, [r0]
   13800:	mov	r5, r0
   13804:	mov	r0, #3
   13808:	bl	110d0 <__lxstat64@plt>
   1380c:	cmn	r0, #1
   13810:	beq	13840 <__assert_fail@plt+0x2758>
   13814:	ldr	r3, [sp, #16]
   13818:	and	r3, r3, #61440	; 0xf000
   1381c:	cmp	r3, #40960	; 0xa000
   13820:	moveq	r0, #0
   13824:	movne	r0, #2
   13828:	ldr	r2, [sp, #108]	; 0x6c
   1382c:	ldr	r3, [r4]
   13830:	cmp	r2, r3
   13834:	bne	13858 <__assert_fail@plt+0x2770>
   13838:	add	sp, sp, #112	; 0x70
   1383c:	pop	{r4, r5, r6, pc}
   13840:	ldr	r3, [r5]
   13844:	cmp	r3, #2
   13848:	moveq	r0, #1
   1384c:	beq	13828 <__assert_fail@plt+0x2740>
   13850:	mov	r0, r6
   13854:	bl	136e8 <__assert_fail@plt+0x2600>
   13858:	bl	10ec0 <__stack_chk_fail@plt>
   1385c:	andeq	r8, r2, r0, lsl #28
   13860:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13864:	mov	r8, r0
   13868:	ldr	r4, [r0]
   1386c:	mov	r9, r1
   13870:	cmp	r4, #0
   13874:	mov	r7, r2
   13878:	beq	138ec <__assert_fail@plt+0x2804>
   1387c:	ldr	r6, [r2, #4]
   13880:	mov	r5, #0
   13884:	b	13898 <__assert_fail@plt+0x27b0>
   13888:	cmp	r3, #0
   1388c:	mov	r5, r4
   13890:	beq	138d4 <__assert_fail@plt+0x27ec>
   13894:	mov	r4, r3
   13898:	mov	r1, r6
   1389c:	ldr	r0, [r4, #4]
   138a0:	bl	10e3c <strcmp@plt>
   138a4:	ldr	r3, [r4]
   138a8:	cmp	r0, #0
   138ac:	bne	13888 <__assert_fail@plt+0x27a0>
   138b0:	str	r3, [r7]
   138b4:	mov	r0, r4
   138b8:	bl	1307c <__assert_fail@plt+0x1f94>
   138bc:	cmp	r5, #0
   138c0:	mov	r3, #1
   138c4:	strne	r7, [r5]
   138c8:	streq	r7, [r8]
   138cc:	strb	r3, [r9]
   138d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   138d4:	str	r7, [r4]
   138d8:	mov	r2, #0
   138dc:	mov	r3, #1
   138e0:	str	r2, [r7]
   138e4:	strb	r3, [r9]
   138e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   138ec:	str	r2, [r8]
   138f0:	b	138d8 <__assert_fail@plt+0x27f0>
   138f4:	push	{r4, r5, r6, lr}
   138f8:	mov	r4, r0
   138fc:	mov	r0, #12
   13900:	mov	r6, r1
   13904:	mov	r5, r2
   13908:	bl	130c8 <__assert_fail@plt+0x1fe0>
   1390c:	mov	r3, #0
   13910:	str	r6, [r0, #4]
   13914:	str	r5, [r0, #8]
   13918:	str	r3, [r0]
   1391c:	b	13924 <__assert_fail@plt+0x283c>
   13920:	mov	r4, r3
   13924:	ldr	r3, [r4]
   13928:	cmp	r3, #0
   1392c:	bne	13920 <__assert_fail@plt+0x2838>
   13930:	str	r0, [r4]
   13934:	pop	{r4, r5, r6, pc}
   13938:	ldr	r3, [pc, #104]	; 139a8 <__assert_fail@plt+0x28c0>
   1393c:	push	{r4, r5, r6, lr}
   13940:	mov	r4, r0
   13944:	ldr	r1, [r3, #108]	; 0x6c
   13948:	ldr	r2, [r4]
   1394c:	ldr	r0, [pc, #88]	; 139ac <__assert_fail@plt+0x28c4>
   13950:	bl	135f4 <__assert_fail@plt+0x250c>
   13954:	mov	r6, r0
   13958:	bl	13460 <__assert_fail@plt+0x2378>
   1395c:	subs	r5, r0, #0
   13960:	beq	13980 <__assert_fail@plt+0x2898>
   13964:	mov	r0, r6
   13968:	bl	10e78 <free@plt>
   1396c:	mov	r3, #1
   13970:	str	r5, [r4, #8]
   13974:	mov	r0, r5
   13978:	strb	r3, [r4, #33]	; 0x21
   1397c:	pop	{r4, r5, r6, pc}
   13980:	bl	10fd4 <__errno_location@plt>
   13984:	ldr	r3, [r0]
   13988:	cmp	r3, #2
   1398c:	beq	13964 <__assert_fail@plt+0x287c>
   13990:	ldr	r1, [pc, #24]	; 139b0 <__assert_fail@plt+0x28c8>
   13994:	mov	r0, r5
   13998:	mov	r2, #5
   1399c:	bl	10ea8 <dcgettext@plt>
   139a0:	mov	r1, r6
   139a4:	bl	12dfc <__assert_fail@plt+0x1d14>
   139a8:	andeq	r9, r2, r8
   139ac:	andeq	r6, r1, r4, asr r8
   139b0:	andeq	r6, r1, ip, lsr r8
   139b4:	ldrb	r3, [r0, #33]	; 0x21
   139b8:	push	{r4, r5, r6, lr}
   139bc:	mov	r4, r0
   139c0:	cmp	r3, #0
   139c4:	beq	13a3c <__assert_fail@plt+0x2954>
   139c8:	ldr	r6, [r0, #8]
   139cc:	cmp	r6, #0
   139d0:	ldr	r5, [r4, #20]
   139d4:	beq	13a28 <__assert_fail@plt+0x2940>
   139d8:	subs	r4, r5, #0
   139dc:	bne	139f0 <__assert_fail@plt+0x2908>
   139e0:	b	13a20 <__assert_fail@plt+0x2938>
   139e4:	ldr	r4, [r4]
   139e8:	cmp	r4, #0
   139ec:	beq	13a34 <__assert_fail@plt+0x294c>
   139f0:	mov	r1, r6
   139f4:	ldr	r0, [r4, #4]
   139f8:	bl	10e3c <strcmp@plt>
   139fc:	cmp	r0, #0
   13a00:	bne	139e4 <__assert_fail@plt+0x28fc>
   13a04:	ldr	r2, [r5, #8]
   13a08:	ldr	r3, [r4, #8]
   13a0c:	cmp	r2, r3
   13a10:	movgt	r4, r5
   13a14:	ldr	r5, [r5]
   13a18:	cmp	r5, #0
   13a1c:	bne	13a04 <__assert_fail@plt+0x291c>
   13a20:	mov	r0, r4
   13a24:	pop	{r4, r5, r6, pc}
   13a28:	cmp	r5, #0
   13a2c:	moveq	r4, r6
   13a30:	beq	13a20 <__assert_fail@plt+0x2938>
   13a34:	mov	r4, r5
   13a38:	b	13a04 <__assert_fail@plt+0x291c>
   13a3c:	bl	13938 <__assert_fail@plt+0x2850>
   13a40:	mov	r6, r0
   13a44:	b	139cc <__assert_fail@plt+0x28e4>
   13a48:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a4c:	mov	r9, r0
   13a50:	ldr	r4, [r0]
   13a54:	ldr	r0, [r0, #12]
   13a58:	bl	13518 <__assert_fail@plt+0x2430>
   13a5c:	mov	r1, r4
   13a60:	mov	r2, r0
   13a64:	ldr	r0, [pc, #436]	; 13c20 <__assert_fail@plt+0x2b38>
   13a68:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13a6c:	mov	r0, r9
   13a70:	bl	139b4 <__assert_fail@plt+0x28cc>
   13a74:	mov	r2, #5
   13a78:	subs	r4, r0, #0
   13a7c:	beq	13c10 <__assert_fail@plt+0x2b28>
   13a80:	ldr	r1, [pc, #412]	; 13c24 <__assert_fail@plt+0x2b3c>
   13a84:	mov	r0, #0
   13a88:	bl	10ea8 <dcgettext@plt>
   13a8c:	ldr	r1, [r4, #4]
   13a90:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13a94:	ldrb	r3, [r9, #33]	; 0x21
   13a98:	cmp	r3, #0
   13a9c:	beq	13be4 <__assert_fail@plt+0x2afc>
   13aa0:	ldr	r4, [r9, #8]
   13aa4:	cmp	r4, #0
   13aa8:	beq	13bf8 <__assert_fail@plt+0x2b10>
   13aac:	ldr	r1, [pc, #372]	; 13c28 <__assert_fail@plt+0x2b40>
   13ab0:	mov	r2, #5
   13ab4:	mov	r0, #0
   13ab8:	bl	10ea8 <dcgettext@plt>
   13abc:	mov	r1, r4
   13ac0:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13ac4:	mov	r2, #5
   13ac8:	ldr	r1, [pc, #348]	; 13c2c <__assert_fail@plt+0x2b44>
   13acc:	mov	r0, #0
   13ad0:	bl	10ea8 <dcgettext@plt>
   13ad4:	ldm	r9, {r1, r2}
   13ad8:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13adc:	ldr	r4, [r9, #16]
   13ae0:	cmp	r4, #0
   13ae4:	beq	13b10 <__assert_fail@plt+0x2a28>
   13ae8:	ldr	r5, [pc, #320]	; 13c30 <__assert_fail@plt+0x2b48>
   13aec:	mov	r2, #5
   13af0:	mov	r1, r5
   13af4:	mov	r0, #0
   13af8:	bl	10ea8 <dcgettext@plt>
   13afc:	ldmib	r4, {r1, r2}
   13b00:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13b04:	ldr	r4, [r4]
   13b08:	cmp	r4, #0
   13b0c:	bne	13aec <__assert_fail@plt+0x2a04>
   13b10:	ldr	r6, [r9, #20]
   13b14:	cmp	r6, #0
   13b18:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b1c:	ldr	fp, [pc, #272]	; 13c34 <__assert_fail@plt+0x2b4c>
   13b20:	ldr	sl, [pc, #272]	; 13c38 <__assert_fail@plt+0x2b50>
   13b24:	mov	r2, #5
   13b28:	mov	r1, fp
   13b2c:	mov	r0, #0
   13b30:	bl	10ea8 <dcgettext@plt>
   13b34:	ldmib	r6, {r1, r2}
   13b38:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13b3c:	ldr	r5, [r9, #16]
   13b40:	cmp	r5, #0
   13b44:	bne	13b58 <__assert_fail@plt+0x2a70>
   13b48:	b	13bd4 <__assert_fail@plt+0x2aec>
   13b4c:	ldr	r5, [r5]
   13b50:	cmp	r5, #0
   13b54:	beq	13bd4 <__assert_fail@plt+0x2aec>
   13b58:	ldr	r1, [r5, #4]
   13b5c:	mov	r0, r6
   13b60:	bl	12a58 <__assert_fail@plt+0x1970>
   13b64:	cmp	r0, #0
   13b68:	beq	13b4c <__assert_fail@plt+0x2a64>
   13b6c:	mov	r2, #5
   13b70:	mov	r1, sl
   13b74:	mov	r0, #0
   13b78:	bl	10ea8 <dcgettext@plt>
   13b7c:	ldr	r4, [r6, #12]
   13b80:	ldr	r7, [r5, #4]
   13b84:	cmp	r4, #0
   13b88:	mov	r8, r0
   13b8c:	bne	13ba0 <__assert_fail@plt+0x2ab8>
   13b90:	b	13bb8 <__assert_fail@plt+0x2ad0>
   13b94:	ldr	r4, [r4]
   13b98:	cmp	r4, #0
   13b9c:	beq	13bb8 <__assert_fail@plt+0x2ad0>
   13ba0:	mov	r1, r7
   13ba4:	ldr	r0, [r4, #4]
   13ba8:	bl	10e3c <strcmp@plt>
   13bac:	cmp	r0, #0
   13bb0:	bne	13b94 <__assert_fail@plt+0x2aac>
   13bb4:	ldr	r4, [r4, #8]
   13bb8:	mov	r2, r4
   13bbc:	mov	r1, r7
   13bc0:	mov	r0, r8
   13bc4:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13bc8:	ldr	r5, [r5]
   13bcc:	cmp	r5, #0
   13bd0:	bne	13b58 <__assert_fail@plt+0x2a70>
   13bd4:	ldr	r6, [r6]
   13bd8:	cmp	r6, #0
   13bdc:	bne	13b24 <__assert_fail@plt+0x2a3c>
   13be0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13be4:	mov	r0, r9
   13be8:	bl	13938 <__assert_fail@plt+0x2850>
   13bec:	mov	r4, r0
   13bf0:	cmp	r4, #0
   13bf4:	bne	13aac <__assert_fail@plt+0x29c4>
   13bf8:	mov	r2, #5
   13bfc:	ldr	r1, [pc, #56]	; 13c3c <__assert_fail@plt+0x2b54>
   13c00:	mov	r0, r4
   13c04:	bl	10ea8 <dcgettext@plt>
   13c08:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13c0c:	b	13ac4 <__assert_fail@plt+0x29dc>
   13c10:	ldr	r1, [pc, #40]	; 13c40 <__assert_fail@plt+0x2b58>
   13c14:	bl	10ea8 <dcgettext@plt>
   13c18:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13c1c:	b	13a94 <__assert_fail@plt+0x29ac>
   13c20:	andeq	r6, r1, ip, asr r8
   13c24:	andeq	r6, r1, r4, ror #16
   13c28:	andeq	r6, r1, r4, lsr #17
   13c2c:	ldrdeq	r6, [r1], -ip
   13c30:	andeq	r6, r1, ip, ror #17
   13c34:	andeq	r6, r1, r0, lsl #18
   13c38:	andeq	r6, r1, r4, lsl r9
   13c3c:	andeq	r6, r1, r4, asr #17
   13c40:	andeq	r6, r1, r0, lsl #17
   13c44:	push	{r4, r5, r6, r7, lr}
   13c48:	mov	r5, r1
   13c4c:	ldrb	r1, [r0, #33]	; 0x21
   13c50:	sub	sp, sp, #20
   13c54:	mov	r4, r0
   13c58:	cmp	r1, #0
   13c5c:	mov	r6, r2
   13c60:	mov	r7, r3
   13c64:	beq	13cc0 <__assert_fail@plt+0x2bd8>
   13c68:	ldr	r0, [r0, #8]
   13c6c:	ldr	r3, [r4, #12]
   13c70:	cmp	r0, #0
   13c74:	sub	r1, r3, r5
   13c78:	clz	r1, r1
   13c7c:	lsr	r1, r1, #5
   13c80:	moveq	r1, #0
   13c84:	cmp	r1, #0
   13c88:	ldr	r4, [r6]
   13c8c:	moveq	r6, #32
   13c90:	bne	13cc8 <__assert_fail@plt+0x2be0>
   13c94:	mov	r0, r5
   13c98:	ldr	r5, [r7]
   13c9c:	bl	13518 <__assert_fail@plt+0x2430>
   13ca0:	mov	r1, r6
   13ca4:	strd	r4, [sp]
   13ca8:	ldrd	r2, [sp, #40]	; 0x28
   13cac:	str	r0, [sp, #8]
   13cb0:	ldr	r0, [pc, #40]	; 13ce0 <__assert_fail@plt+0x2bf8>
   13cb4:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13cb8:	add	sp, sp, #20
   13cbc:	pop	{r4, r5, r6, r7, pc}
   13cc0:	bl	13938 <__assert_fail@plt+0x2850>
   13cc4:	b	13c6c <__assert_fail@plt+0x2b84>
   13cc8:	mov	r1, r4
   13ccc:	bl	10e3c <strcmp@plt>
   13cd0:	cmp	r0, #0
   13cd4:	movne	r6, #32
   13cd8:	moveq	r6, #42	; 0x2a
   13cdc:	b	13c94 <__assert_fail@plt+0x2bac>
   13ce0:	andeq	r6, r1, r4, lsr #18
   13ce4:	push	{r4, lr}
   13ce8:	mov	r2, #5
   13cec:	ldr	r1, [pc, #8]	; 13cfc <__assert_fail@plt+0x2c14>
   13cf0:	mov	r0, #0
   13cf4:	bl	10ea8 <dcgettext@plt>
   13cf8:	bl	12c0c <__assert_fail@plt+0x1b24>
   13cfc:	andeq	r6, r1, r8, lsl #13
   13d00:	subs	r3, r0, #0
   13d04:	beq	13d1c <__assert_fail@plt+0x2c34>
   13d08:	push	{r4, lr}
   13d0c:	bl	10eb4 <strdup@plt>
   13d10:	cmp	r0, #0
   13d14:	popne	{r4, pc}
   13d18:	bl	13ce4 <__assert_fail@plt+0x2bfc>
   13d1c:	mov	r0, r3
   13d20:	bx	lr
   13d24:	push	{r4, r5, r6, lr}
   13d28:	mov	r5, r0
   13d2c:	mov	r0, #36	; 0x24
   13d30:	bl	130c8 <__assert_fail@plt+0x1fe0>
   13d34:	mov	r4, r0
   13d38:	mov	r0, r5
   13d3c:	bl	13d00 <__assert_fail@plt+0x2c18>
   13d40:	mov	r3, #0
   13d44:	mov	r2, #1
   13d48:	str	r2, [r4, #28]
   13d4c:	str	r3, [r4, #4]
   13d50:	str	r3, [r4, #8]
   13d54:	str	r3, [r4, #12]
   13d58:	str	r3, [r4, #16]
   13d5c:	str	r3, [r4, #20]
   13d60:	str	r3, [r4, #24]
   13d64:	strh	r3, [r4, #32]
   13d68:	str	r0, [r4]
   13d6c:	mov	r0, r4
   13d70:	pop	{r4, r5, r6, pc}
   13d74:	ldr	r2, [pc, #856]	; 140d4 <__assert_fail@plt+0x2fec>
   13d78:	ldr	r3, [r0, #20]
   13d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d80:	sub	sp, sp, #300	; 0x12c
   13d84:	ldr	r2, [r2]
   13d88:	cmp	r3, #0
   13d8c:	mov	r4, r0
   13d90:	str	r2, [sp, #292]	; 0x124
   13d94:	beq	14098 <__assert_fail@plt+0x2fb0>
   13d98:	mov	r7, #0
   13d9c:	ldr	r3, [r3]
   13da0:	add	r7, r7, #1
   13da4:	cmp	r3, #0
   13da8:	bne	13d9c <__assert_fail@plt+0x2cb4>
   13dac:	ldrb	r3, [r4, #33]	; 0x21
   13db0:	cmp	r3, #0
   13db4:	beq	1407c <__assert_fail@plt+0x2f94>
   13db8:	ldr	r3, [r4, #8]
   13dbc:	str	r3, [sp, #28]
   13dc0:	mov	r0, r4
   13dc4:	bl	139b4 <__assert_fail@plt+0x28cc>
   13dc8:	subs	r3, r0, #0
   13dcc:	str	r3, [sp, #24]
   13dd0:	beq	140c0 <__assert_fail@plt+0x2fd8>
   13dd4:	ldr	r6, [r4, #20]
   13dd8:	mov	r5, #15
   13ddc:	cmp	r6, #0
   13de0:	beq	13e04 <__assert_fail@plt+0x2d1c>
   13de4:	ldr	r0, [r6, #4]
   13de8:	bl	10fbc <strlen@plt>
   13dec:	ldr	r6, [r6]
   13df0:	add	r0, r0, #1
   13df4:	cmp	r5, r0
   13df8:	movlt	r5, r0
   13dfc:	cmp	r6, #0
   13e00:	bne	13de4 <__assert_fail@plt+0x2cfc>
   13e04:	ldr	r3, [sp, #24]
   13e08:	mov	r8, #0
   13e0c:	add	r2, r3, #4
   13e10:	add	r3, r3, #8
   13e14:	str	r2, [sp, #16]
   13e18:	str	r3, [sp, #20]
   13e1c:	mov	r6, #5
   13e20:	str	r6, [sp]
   13e24:	mov	r3, r7
   13e28:	ldr	r2, [pc, #680]	; 140d8 <__assert_fail@plt+0x2ff0>
   13e2c:	ldr	r1, [pc, #680]	; 140dc <__assert_fail@plt+0x2ff4>
   13e30:	mov	r0, #0
   13e34:	bl	110dc <dcngettext@plt>
   13e38:	ldrd	r2, [r4]
   13e3c:	mov	r1, r7
   13e40:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13e44:	mov	r0, #10
   13e48:	bl	10ff8 <putchar@plt>
   13e4c:	mov	r2, r6
   13e50:	ldr	r1, [pc, #648]	; 140e0 <__assert_fail@plt+0x2ff8>
   13e54:	mov	r0, #0
   13e58:	bl	10ea8 <dcgettext@plt>
   13e5c:	mov	r2, r6
   13e60:	ldr	r1, [pc, #636]	; 140e4 <__assert_fail@plt+0x2ffc>
   13e64:	mov	r9, r0
   13e68:	mov	r0, #0
   13e6c:	bl	10ea8 <dcgettext@plt>
   13e70:	mov	r2, r6
   13e74:	ldr	r1, [pc, #620]	; 140e8 <__assert_fail@plt+0x3000>
   13e78:	mov	sl, r0
   13e7c:	mov	r0, #0
   13e80:	bl	10ea8 <dcgettext@plt>
   13e84:	mov	r2, r6
   13e88:	ldr	r1, [pc, #604]	; 140ec <__assert_fail@plt+0x3004>
   13e8c:	mov	fp, r0
   13e90:	mov	r0, #0
   13e94:	bl	10ea8 <dcgettext@plt>
   13e98:	mov	r1, r9
   13e9c:	mov	r3, r5
   13ea0:	mov	r2, r5
   13ea4:	strd	sl, [sp]
   13ea8:	str	r0, [sp, #8]
   13eac:	ldr	r0, [pc, #572]	; 140f0 <__assert_fail@plt+0x3008>
   13eb0:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13eb4:	ldr	r0, [pc, #568]	; 140f4 <__assert_fail@plt+0x300c>
   13eb8:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   13ebc:	str	r5, [sp, #4]
   13ec0:	str	r8, [sp]
   13ec4:	ldrd	r2, [sp, #16]
   13ec8:	mov	r1, #1
   13ecc:	mov	r0, r4
   13ed0:	bl	13c44 <__assert_fail@plt+0x2b5c>
   13ed4:	ldr	r6, [r4, #20]
   13ed8:	cmp	r6, #0
   13edc:	movne	r9, #1
   13ee0:	beq	13f10 <__assert_fail@plt+0x2e28>
   13ee4:	str	r9, [sp]
   13ee8:	add	r3, r6, #8
   13eec:	add	r2, r6, #4
   13ef0:	str	r5, [sp, #4]
   13ef4:	mov	r1, #2
   13ef8:	mov	r0, r4
   13efc:	bl	13c44 <__assert_fail@plt+0x2b5c>
   13f00:	ldr	r6, [r6]
   13f04:	add	r9, r9, #1
   13f08:	cmp	r6, #0
   13f0c:	bne	13ee4 <__assert_fail@plt+0x2dfc>
   13f10:	mov	r0, #10
   13f14:	bl	10ff8 <putchar@plt>
   13f18:	mov	r2, #5
   13f1c:	ldr	r1, [pc, #468]	; 140f8 <__assert_fail@plt+0x3010>
   13f20:	mov	r0, #0
   13f24:	bl	10ea8 <dcgettext@plt>
   13f28:	mov	r1, r0
   13f2c:	mov	r0, #1
   13f30:	bl	11004 <__printf_chk@plt>
   13f34:	ldr	r3, [pc, #448]	; 140fc <__assert_fail@plt+0x3014>
   13f38:	mov	r1, #256	; 0x100
   13f3c:	add	r0, sp, #36	; 0x24
   13f40:	ldr	r2, [r3]
   13f44:	bl	10e84 <fgets@plt>
   13f48:	cmp	r0, #0
   13f4c:	str	r0, [sp, #32]
   13f50:	beq	14010 <__assert_fail@plt+0x2f28>
   13f54:	ldrb	r0, [sp, #36]	; 0x24
   13f58:	cmp	r0, #0
   13f5c:	beq	14010 <__assert_fail@plt+0x2f28>
   13f60:	add	r0, sp, #36	; 0x24
   13f64:	bl	10fbc <strlen@plt>
   13f68:	add	r3, sp, #296	; 0x128
   13f6c:	add	r0, r3, r0
   13f70:	strb	r8, [r0, #-261]	; 0xfffffefb
   13f74:	ldrb	r3, [sp, #36]	; 0x24
   13f78:	cmp	r3, #0
   13f7c:	beq	1408c <__assert_fail@plt+0x2fa4>
   13f80:	bl	10fd4 <__errno_location@plt>
   13f84:	mov	r2, #10
   13f88:	add	r1, sp, #32
   13f8c:	str	r8, [r0]
   13f90:	mov	r6, r0
   13f94:	add	r0, sp, #36	; 0x24
   13f98:	bl	10e48 <strtol@plt>
   13f9c:	cmp	r0, #0
   13fa0:	blt	1402c <__assert_fail@plt+0x2f44>
   13fa4:	ldr	r3, [r6]
   13fa8:	cmp	r3, #0
   13fac:	bne	1402c <__assert_fail@plt+0x2f44>
   13fb0:	ldr	r3, [sp, #32]
   13fb4:	ldrb	r3, [r3]
   13fb8:	cmp	r3, #0
   13fbc:	bne	1402c <__assert_fail@plt+0x2f44>
   13fc0:	cmp	r0, #0
   13fc4:	beq	140a0 <__assert_fail@plt+0x2fb8>
   13fc8:	subs	r0, r0, #1
   13fcc:	ldr	r6, [r4, #20]
   13fd0:	b	13fdc <__assert_fail@plt+0x2ef4>
   13fd4:	ldr	r6, [r6]
   13fd8:	subs	r0, r0, #1
   13fdc:	movne	r3, #1
   13fe0:	moveq	r3, #0
   13fe4:	cmp	r6, #0
   13fe8:	moveq	r3, #0
   13fec:	cmp	r3, #0
   13ff0:	bne	13fd4 <__assert_fail@plt+0x2eec>
   13ff4:	cmp	r6, #0
   13ff8:	beq	13e1c <__assert_fail@plt+0x2d34>
   13ffc:	mov	r0, r4
   14000:	mov	r1, #2
   14004:	bl	133e8 <__assert_fail@plt+0x2300>
   14008:	ldr	r0, [r6, #4]
   1400c:	bl	13d00 <__assert_fail@plt+0x2c18>
   14010:	ldr	r3, [pc, #188]	; 140d4 <__assert_fail@plt+0x2fec>
   14014:	ldr	r2, [sp, #292]	; 0x124
   14018:	ldr	r3, [r3]
   1401c:	cmp	r2, r3
   14020:	bne	140bc <__assert_fail@plt+0x2fd4>
   14024:	add	sp, sp, #300	; 0x12c
   14028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1402c:	ldr	r6, [r4, #20]
   14030:	cmp	r6, #0
   14034:	bne	14048 <__assert_fail@plt+0x2f60>
   14038:	b	13e1c <__assert_fail@plt+0x2d34>
   1403c:	ldr	r6, [r6]
   14040:	cmp	r6, #0
   14044:	beq	13e1c <__assert_fail@plt+0x2d34>
   14048:	add	r1, sp, #36	; 0x24
   1404c:	ldr	r0, [r6, #4]
   14050:	bl	10e3c <strcmp@plt>
   14054:	cmp	r0, #0
   14058:	bne	1403c <__assert_fail@plt+0x2f54>
   1405c:	mov	r0, r4
   14060:	mov	r1, #2
   14064:	bl	133e8 <__assert_fail@plt+0x2300>
   14068:	add	r0, sp, #36	; 0x24
   1406c:	bl	10eb4 <strdup@plt>
   14070:	cmp	r0, #0
   14074:	bne	14010 <__assert_fail@plt+0x2f28>
   14078:	bl	13ce4 <__assert_fail@plt+0x2bfc>
   1407c:	mov	r0, r4
   14080:	bl	13938 <__assert_fail@plt+0x2850>
   14084:	str	r0, [sp, #28]
   14088:	b	13dc0 <__assert_fail@plt+0x2cd8>
   1408c:	ldr	r0, [sp, #28]
   14090:	bl	13d00 <__assert_fail@plt+0x2c18>
   14094:	b	14010 <__assert_fail@plt+0x2f28>
   14098:	mov	r7, r3
   1409c:	b	13dac <__assert_fail@plt+0x2cc4>
   140a0:	mov	r0, r4
   140a4:	mov	r1, #1
   140a8:	bl	133e8 <__assert_fail@plt+0x2300>
   140ac:	ldr	r3, [sp, #24]
   140b0:	ldr	r0, [r3, #4]
   140b4:	bl	13d00 <__assert_fail@plt+0x2c18>
   140b8:	b	14010 <__assert_fail@plt+0x2f28>
   140bc:	bl	10ec0 <__stack_chk_fail@plt>
   140c0:	ldr	r3, [pc, #56]	; 14100 <__assert_fail@plt+0x3018>
   140c4:	mov	r2, #1616	; 0x650
   140c8:	ldr	r1, [pc, #52]	; 14104 <__assert_fail@plt+0x301c>
   140cc:	ldr	r0, [pc, #52]	; 14108 <__assert_fail@plt+0x3020>
   140d0:	bl	110e8 <__assert_fail@plt>
   140d4:	andeq	r8, r2, r0, lsl #28
   140d8:	andeq	r6, r1, r8, ror #18
   140dc:	andeq	r6, r1, r4, lsr #19
   140e0:	andeq	r6, r1, r0, ror #19
   140e4:	andeq	r6, r1, ip, ror #19
   140e8:	strdeq	r6, [r1], -r4
   140ec:	andeq	r6, r1, r0, lsl #20
   140f0:	andeq	r6, r1, r8, lsl #20
   140f4:	andeq	r6, r1, r8, lsr #20
   140f8:	andeq	r6, r1, r8, ror #20
   140fc:	andeq	r9, r2, r0, lsl #1
   14100:	andeq	r6, r1, r8, ror r5
   14104:	andeq	r6, r1, ip, lsr r9
   14108:	andeq	r6, r1, r0, ror #18
   1410c:	push	{r4, r5, r6, lr}
   14110:	mov	r5, r0
   14114:	ldr	r4, [r0, #20]
   14118:	cmp	r4, #0
   1411c:	beq	14188 <__assert_fail@plt+0x30a0>
   14120:	ldr	r2, [pc, #188]	; 141e4 <__assert_fail@plt+0x30fc>
   14124:	mov	r6, r1
   14128:	ldr	r2, [r2, #12]
   1412c:	cmp	r2, #0
   14130:	beq	14144 <__assert_fail@plt+0x305c>
   14134:	ldr	r3, [r0, #12]
   14138:	cmp	r3, #1
   1413c:	movne	r2, #0
   14140:	beq	141dc <__assert_fail@plt+0x30f4>
   14144:	ldr	r4, [r4]
   14148:	add	r2, r2, #1
   1414c:	cmp	r4, #0
   14150:	bne	14144 <__assert_fail@plt+0x305c>
   14154:	cmp	r2, #1
   14158:	bne	1417c <__assert_fail@plt+0x3094>
   1415c:	ldr	r3, [r5, #12]
   14160:	cmp	r6, #0
   14164:	sub	r2, r3, #1
   14168:	clz	r2, r2
   1416c:	lsr	r2, r2, #5
   14170:	moveq	r2, #0
   14174:	cmp	r2, #0
   14178:	bne	141bc <__assert_fail@plt+0x30d4>
   1417c:	mov	r0, r5
   14180:	pop	{r4, r5, r6, lr}
   14184:	b	13d74 <__assert_fail@plt+0x2c8c>
   14188:	ldr	r1, [pc, #88]	; 141e8 <__assert_fail@plt+0x3100>
   1418c:	mov	r2, #5
   14190:	mov	r0, r4
   14194:	bl	10ea8 <dcgettext@plt>
   14198:	ldr	r1, [r5]
   1419c:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   141a0:	mov	r2, #5
   141a4:	ldr	r1, [pc, #64]	; 141ec <__assert_fail@plt+0x3104>
   141a8:	mov	r0, r4
   141ac:	bl	10ea8 <dcgettext@plt>
   141b0:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   141b4:	mov	r0, #0
   141b8:	pop	{r4, r5, r6, pc}
   141bc:	mov	r2, #5
   141c0:	ldr	r1, [pc, #40]	; 141f0 <__assert_fail@plt+0x3108>
   141c4:	mov	r0, r4
   141c8:	bl	10ea8 <dcgettext@plt>
   141cc:	mov	r3, r6
   141d0:	ldm	r5, {r1, r2}
   141d4:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   141d8:	b	141a0 <__assert_fail@plt+0x30b8>
   141dc:	bl	13a48 <__assert_fail@plt+0x2960>
   141e0:	b	141b4 <__assert_fail@plt+0x30cc>
   141e4:	andeq	r9, r2, ip, lsl #1
   141e8:			; <UNDEFINED> instruction: 0x00016ab0
   141ec:	ldrdeq	r6, [r1], -r8
   141f0:	strdeq	r6, [r1], -r0
   141f4:	push	{r4, r5, r6, r7, r8, lr}
   141f8:	mov	r5, r0
   141fc:	ldr	r4, [r0]
   14200:	mov	r7, r1
   14204:	cmp	r4, #0
   14208:	mov	r6, r2
   1420c:	beq	14224 <__assert_fail@plt+0x313c>
   14210:	mov	r1, r4
   14214:	mov	r0, r2
   14218:	bl	10e3c <strcmp@plt>
   1421c:	cmp	r0, #0
   14220:	beq	1422c <__assert_fail@plt+0x3144>
   14224:	mov	r3, #1
   14228:	strb	r3, [r7]
   1422c:	mov	r0, r4
   14230:	bl	10e78 <free@plt>
   14234:	mov	r0, r6
   14238:	bl	13d00 <__assert_fail@plt+0x2c18>
   1423c:	str	r0, [r5]
   14240:	pop	{r4, r5, r6, r7, r8, pc}
   14244:	push	{r4, r5, r6, r7, r8, lr}
   14248:	mov	r6, r1
   1424c:	ldr	r4, [r0]
   14250:	mov	r8, r2
   14254:	cmp	r4, #0
   14258:	bne	14270 <__assert_fail@plt+0x3188>
   1425c:	b	142dc <__assert_fail@plt+0x31f4>
   14260:	ldr	r5, [r4]
   14264:	cmp	r5, #0
   14268:	beq	142a4 <__assert_fail@plt+0x31bc>
   1426c:	mov	r4, r5
   14270:	mov	r1, r6
   14274:	ldr	r0, [r4, #4]
   14278:	bl	10e3c <strcmp@plt>
   1427c:	cmp	r0, #0
   14280:	bne	14260 <__assert_fail@plt+0x3178>
   14284:	ldr	r0, [r4, #8]
   14288:	bl	10e78 <free@plt>
   1428c:	mov	r0, r8
   14290:	bl	13d00 <__assert_fail@plt+0x2c18>
   14294:	mov	r7, r4
   14298:	str	r0, [r4, #8]
   1429c:	mov	r0, r7
   142a0:	pop	{r4, r5, r6, r7, r8, pc}
   142a4:	mov	r0, #16
   142a8:	bl	130c8 <__assert_fail@plt+0x1fe0>
   142ac:	mov	r7, r0
   142b0:	mov	r0, r6
   142b4:	bl	13d00 <__assert_fail@plt+0x2c18>
   142b8:	str	r0, [r7, #4]
   142bc:	mov	r0, r8
   142c0:	bl	13d00 <__assert_fail@plt+0x2c18>
   142c4:	strb	r5, [r7, #12]
   142c8:	str	r5, [r7]
   142cc:	str	r0, [r7, #8]
   142d0:	str	r7, [r4]
   142d4:	mov	r0, r7
   142d8:	pop	{r4, r5, r6, r7, r8, pc}
   142dc:	mov	r5, r0
   142e0:	mov	r0, #16
   142e4:	bl	130c8 <__assert_fail@plt+0x1fe0>
   142e8:	mov	r7, r0
   142ec:	mov	r0, r6
   142f0:	bl	13d00 <__assert_fail@plt+0x2c18>
   142f4:	str	r0, [r7, #4]
   142f8:	mov	r0, r8
   142fc:	bl	13d00 <__assert_fail@plt+0x2c18>
   14300:	strb	r4, [r7, #12]
   14304:	str	r4, [r7]
   14308:	str	r7, [r5]
   1430c:	str	r0, [r7, #8]
   14310:	mov	r0, r7
   14314:	pop	{r4, r5, r6, r7, r8, pc}
   14318:	push	{r4, r5, r6, r7, r8, lr}
   1431c:	mov	r6, r1
   14320:	ldr	r4, [r0]
   14324:	mov	r8, r2
   14328:	cmp	r4, #0
   1432c:	bne	14344 <__assert_fail@plt+0x325c>
   14330:	b	143a0 <__assert_fail@plt+0x32b8>
   14334:	ldr	r5, [r4]
   14338:	cmp	r5, #0
   1433c:	beq	14370 <__assert_fail@plt+0x3288>
   14340:	mov	r4, r5
   14344:	mov	r1, r6
   14348:	ldr	r0, [r4, #4]
   1434c:	bl	10e3c <strcmp@plt>
   14350:	cmp	r0, #0
   14354:	bne	14334 <__assert_fail@plt+0x324c>
   14358:	ldr	r0, [r4, #8]
   1435c:	bl	10e78 <free@plt>
   14360:	mov	r0, r8
   14364:	bl	13d00 <__assert_fail@plt+0x2c18>
   14368:	str	r0, [r4, #8]
   1436c:	pop	{r4, r5, r6, r7, r8, pc}
   14370:	mov	r0, #12
   14374:	bl	130c8 <__assert_fail@plt+0x1fe0>
   14378:	mov	r7, r0
   1437c:	mov	r0, r6
   14380:	str	r5, [r7]
   14384:	bl	13d00 <__assert_fail@plt+0x2c18>
   14388:	str	r0, [r7, #4]
   1438c:	mov	r0, r8
   14390:	bl	13d00 <__assert_fail@plt+0x2c18>
   14394:	str	r0, [r7, #8]
   14398:	str	r7, [r4]
   1439c:	pop	{r4, r5, r6, r7, r8, pc}
   143a0:	mov	r5, r0
   143a4:	mov	r0, #12
   143a8:	bl	130c8 <__assert_fail@plt+0x1fe0>
   143ac:	mov	r7, r0
   143b0:	mov	r0, r6
   143b4:	str	r4, [r7]
   143b8:	bl	13d00 <__assert_fail@plt+0x2c18>
   143bc:	str	r0, [r7, #4]
   143c0:	mov	r0, r8
   143c4:	bl	13d00 <__assert_fail@plt+0x2c18>
   143c8:	str	r7, [r5]
   143cc:	str	r0, [r7, #8]
   143d0:	pop	{r4, r5, r6, r7, r8, pc}
   143d4:	push	{r4, r5, r6, r7, r8, lr}
   143d8:	mov	r5, r0
   143dc:	mov	r0, #16
   143e0:	mov	r8, r2
   143e4:	mov	r6, r3
   143e8:	mov	r7, r1
   143ec:	bl	130c8 <__assert_fail@plt+0x1fe0>
   143f0:	mov	r4, r0
   143f4:	mov	r0, r8
   143f8:	str	r7, [r4, #4]
   143fc:	bl	13d00 <__assert_fail@plt+0x2c18>
   14400:	str	r0, [r4, #8]
   14404:	mov	r0, r6
   14408:	bl	13d00 <__assert_fail@plt+0x2c18>
   1440c:	ldr	r3, [r5]
   14410:	mov	r2, #0
   14414:	cmp	r3, r2
   14418:	str	r2, [r4]
   1441c:	str	r0, [r4, #12]
   14420:	beq	1444c <__assert_fail@plt+0x3364>
   14424:	ldr	r2, [r3]
   14428:	cmp	r2, #0
   1442c:	bne	14438 <__assert_fail@plt+0x3350>
   14430:	b	14454 <__assert_fail@plt+0x336c>
   14434:	mov	r2, r3
   14438:	ldr	r3, [r2]
   1443c:	cmp	r3, #0
   14440:	bne	14434 <__assert_fail@plt+0x334c>
   14444:	str	r4, [r2]
   14448:	pop	{r4, r5, r6, r7, r8, pc}
   1444c:	str	r4, [r5]
   14450:	pop	{r4, r5, r6, r7, r8, pc}
   14454:	mov	r2, r3
   14458:	b	14444 <__assert_fail@plt+0x335c>
   1445c:	push	{r4, lr}
   14460:	mov	r4, r0
   14464:	ldr	r1, [pc, #32]	; 1448c <__assert_fail@plt+0x33a4>
   14468:	bl	11088 <strpbrk@plt>
   1446c:	cmp	r0, #0
   14470:	popeq	{r4, pc}
   14474:	ldr	r1, [pc, #20]	; 14490 <__assert_fail@plt+0x33a8>
   14478:	mov	r2, #5
   1447c:	mov	r0, #0
   14480:	bl	10ea8 <dcgettext@plt>
   14484:	mov	r1, r4
   14488:	bl	12c0c <__assert_fail@plt+0x1b24>
   1448c:	andeq	r6, r1, r4, lsr fp
   14490:	andeq	r6, r1, r8, lsr fp
   14494:	push	{r4, r5, r6, r7, r8, lr}
   14498:	mov	r7, r0
   1449c:	ldr	r8, [pc, #100]	; 14508 <__assert_fail@plt+0x3420>
   144a0:	mov	r4, #0
   144a4:	add	r6, r8, #4
   144a8:	lsl	r5, r4, #3
   144ac:	add	r3, r6, r5
   144b0:	mov	r0, r7
   144b4:	ldr	r1, [r3, #4]
   144b8:	bl	10e3c <strcmp@plt>
   144bc:	cmp	r0, #0
   144c0:	beq	144e4 <__assert_fail@plt+0x33fc>
   144c4:	add	r4, r4, #1
   144c8:	cmp	r4, #13
   144cc:	bne	144a8 <__assert_fail@plt+0x33c0>
   144d0:	ldr	r3, [pc, #52]	; 1450c <__assert_fail@plt+0x3424>
   144d4:	ldr	r2, [pc, #52]	; 14510 <__assert_fail@plt+0x3428>
   144d8:	ldr	r1, [pc, #52]	; 14514 <__assert_fail@plt+0x342c>
   144dc:	ldr	r0, [pc, #52]	; 14518 <__assert_fail@plt+0x3430>
   144e0:	bl	110e8 <__assert_fail@plt>
   144e4:	ldr	r3, [pc, #48]	; 1451c <__assert_fail@plt+0x3434>
   144e8:	add	r5, r8, r5
   144ec:	ldr	r2, [r3, #8]
   144f0:	ldr	r0, [r5, #4]
   144f4:	cmp	r2, #0
   144f8:	bne	14504 <__assert_fail@plt+0x341c>
   144fc:	str	r0, [r3, #8]
   14500:	pop	{r4, r5, r6, r7, r8, pc}
   14504:	bl	13544 <__assert_fail@plt+0x245c>
   14508:	andeq	r9, r2, r8
   1450c:	muleq	r1, r4, r5
   14510:	andeq	r0, r0, r5, lsr #3
   14514:	andeq	r6, r1, ip, lsr r9
   14518:	andeq	r6, r1, r0, ror fp
   1451c:	andeq	r9, r2, ip, lsl #1
   14520:	ldr	r3, [r0]
   14524:	push	{r4, lr}
   14528:	cmp	r3, #0
   1452c:	ldr	r2, [r1]
   14530:	beq	1455c <__assert_fail@plt+0x3474>
   14534:	ldr	r0, [r3, #4]
   14538:	cmp	r0, #0
   1453c:	beq	1455c <__assert_fail@plt+0x3474>
   14540:	cmp	r2, #0
   14544:	beq	14570 <__assert_fail@plt+0x3488>
   14548:	ldr	r1, [r2, #4]
   1454c:	cmp	r1, #0
   14550:	beq	14570 <__assert_fail@plt+0x3488>
   14554:	pop	{r4, lr}
   14558:	b	10e3c <strcmp@plt>
   1455c:	ldr	r3, [pc, #32]	; 14584 <__assert_fail@plt+0x349c>
   14560:	ldr	r2, [pc, #32]	; 14588 <__assert_fail@plt+0x34a0>
   14564:	ldr	r1, [pc, #32]	; 1458c <__assert_fail@plt+0x34a4>
   14568:	ldr	r0, [pc, #32]	; 14590 <__assert_fail@plt+0x34a8>
   1456c:	bl	110e8 <__assert_fail@plt>
   14570:	ldr	r3, [pc, #12]	; 14584 <__assert_fail@plt+0x349c>
   14574:	ldr	r2, [pc, #24]	; 14594 <__assert_fail@plt+0x34ac>
   14578:	ldr	r1, [pc, #12]	; 1458c <__assert_fail@plt+0x34a4>
   1457c:	ldr	r0, [pc, #20]	; 14598 <__assert_fail@plt+0x34b0>
   14580:	bl	110e8 <__assert_fail@plt>
   14584:	andeq	r6, r1, ip, lsr #11
   14588:	andeq	r0, r0, r1, asr r3
   1458c:	andeq	r6, r1, ip, lsr r9
   14590:	andeq	r6, r1, r8, lsl #23
   14594:	andeq	r0, r0, r2, asr r3
   14598:	muleq	r1, r8, fp
   1459c:	ldr	r3, [r0]
   145a0:	push	{r4, lr}
   145a4:	cmp	r3, #0
   145a8:	ldr	r2, [r1]
   145ac:	beq	145d8 <__assert_fail@plt+0x34f0>
   145b0:	ldr	r0, [r3, #4]
   145b4:	cmp	r0, #0
   145b8:	beq	145d8 <__assert_fail@plt+0x34f0>
   145bc:	cmp	r2, #0
   145c0:	beq	145ec <__assert_fail@plt+0x3504>
   145c4:	ldr	r1, [r2, #4]
   145c8:	cmp	r1, #0
   145cc:	beq	145ec <__assert_fail@plt+0x3504>
   145d0:	pop	{r4, lr}
   145d4:	b	10e3c <strcmp@plt>
   145d8:	ldr	r3, [pc, #32]	; 14600 <__assert_fail@plt+0x3518>
   145dc:	ldr	r2, [pc, #32]	; 14604 <__assert_fail@plt+0x351c>
   145e0:	ldr	r1, [pc, #32]	; 14608 <__assert_fail@plt+0x3520>
   145e4:	ldr	r0, [pc, #32]	; 1460c <__assert_fail@plt+0x3524>
   145e8:	bl	110e8 <__assert_fail@plt>
   145ec:	ldr	r3, [pc, #12]	; 14600 <__assert_fail@plt+0x3518>
   145f0:	ldr	r2, [pc, #24]	; 14610 <__assert_fail@plt+0x3528>
   145f4:	ldr	r1, [pc, #12]	; 14608 <__assert_fail@plt+0x3520>
   145f8:	ldr	r0, [pc, #20]	; 14614 <__assert_fail@plt+0x352c>
   145fc:	bl	110e8 <__assert_fail@plt>
   14600:	andeq	r6, r1, r0, asr #11
   14604:	andeq	r0, r0, r5, asr #6
   14608:	andeq	r6, r1, ip, lsr r9
   1460c:	andeq	r6, r1, r8, lsr #23
   14610:	andeq	r0, r0, r6, asr #6
   14614:			; <UNDEFINED> instruction: 0x00016bbc
   14618:	push	{r4, lr}
   1461c:	mov	r1, r0
   14620:	ldr	r4, [pc, #44]	; 14654 <__assert_fail@plt+0x356c>
   14624:	ldr	r3, [pc, #44]	; 14658 <__assert_fail@plt+0x3570>
   14628:	ldr	r2, [pc, #44]	; 1465c <__assert_fail@plt+0x3574>
   1462c:	ldr	r0, [r4, #16]
   14630:	bl	110a0 <scandir64@plt>
   14634:	cmp	r0, #0
   14638:	popge	{r4, pc}
   1463c:	ldr	r1, [pc, #28]	; 14660 <__assert_fail@plt+0x3578>
   14640:	mov	r2, #5
   14644:	mov	r0, #0
   14648:	bl	10ea8 <dcgettext@plt>
   1464c:	ldr	r1, [r4, #16]
   14650:	bl	12dfc <__assert_fail@plt+0x1d14>
   14654:	andeq	r9, r2, ip, lsl #1
   14658:	andeq	r0, r1, r4, asr lr
   1465c:	strdeq	r3, [r1], -r4
   14660:	ldrdeq	r6, [r1], -r0
   14664:	push	{r4, r5, r6, lr}
   14668:	subs	r5, r1, #0
   1466c:	mov	r4, r0
   14670:	beq	146c8 <__assert_fail@plt+0x35e0>
   14674:	bl	12b08 <__assert_fail@plt+0x1a20>
   14678:	subs	r6, r0, #0
   1467c:	popne	{r4, r5, r6, pc}
   14680:	mov	r0, r5
   14684:	bl	1370c <__assert_fail@plt+0x2624>
   14688:	cmp	r0, #0
   1468c:	bne	146f0 <__assert_fail@plt+0x3608>
   14690:	ldr	r3, [r4, #12]
   14694:	cmp	r3, #2
   14698:	popeq	{r4, r5, r6, pc}
   1469c:	mov	r2, #5
   146a0:	ldr	r1, [pc, #120]	; 14720 <__assert_fail@plt+0x3638>
   146a4:	bl	10ea8 <dcgettext@plt>
   146a8:	ldr	r3, [pc, #116]	; 14724 <__assert_fail@plt+0x363c>
   146ac:	ldr	r2, [r4]
   146b0:	ldr	r1, [r3, #108]	; 0x6c
   146b4:	bl	12c9c <__assert_fail@plt+0x1bb4>
   146b8:	mov	r0, r4
   146bc:	mov	r1, #2
   146c0:	pop	{r4, r5, r6, lr}
   146c4:	b	133e8 <__assert_fail@plt+0x2300>
   146c8:	mov	r0, r5
   146cc:	mov	r2, #5
   146d0:	ldr	r1, [pc, #80]	; 14728 <__assert_fail@plt+0x3640>
   146d4:	bl	10ea8 <dcgettext@plt>
   146d8:	ldr	r1, [r4]
   146dc:	bl	12fb0 <__assert_fail@plt+0x1ec8>
   146e0:	mov	r0, r4
   146e4:	mov	r1, #1
   146e8:	pop	{r4, r5, r6, lr}
   146ec:	b	133e8 <__assert_fail@plt+0x2300>
   146f0:	mov	r0, r6
   146f4:	mov	r2, #5
   146f8:	ldr	r1, [pc, #44]	; 1472c <__assert_fail@plt+0x3644>
   146fc:	bl	10ea8 <dcgettext@plt>
   14700:	ldr	r3, [pc, #28]	; 14724 <__assert_fail@plt+0x363c>
   14704:	ldr	r2, [r4]
   14708:	ldr	r1, [r3, #108]	; 0x6c
   1470c:	bl	12c9c <__assert_fail@plt+0x1bb4>
   14710:	mov	r0, r4
   14714:	mov	r1, #1
   14718:	pop	{r4, r5, r6, lr}
   1471c:	b	133e8 <__assert_fail@plt+0x2300>
   14720:	andeq	r6, r1, r8, lsr #24
   14724:	andeq	r9, r2, r8
   14728:	andeq	r6, r1, ip, ror ip
   1472c:	strdeq	r6, [r1], -r0
   14730:	push	{r4, r5, r6, lr}
   14734:	mov	r5, r0
   14738:	mov	r4, r1
   1473c:	bl	12b08 <__assert_fail@plt+0x1a20>
   14740:	cmp	r0, #0
   14744:	beq	1475c <__assert_fail@plt+0x3674>
   14748:	mov	r0, r5
   1474c:	mov	r1, #2
   14750:	bl	133e8 <__assert_fail@plt+0x2300>
   14754:	mov	r0, r4
   14758:	pop	{r4, r5, r6, pc}
   1475c:	mov	r2, #5
   14760:	ldr	r1, [pc, #12]	; 14774 <__assert_fail@plt+0x368c>
   14764:	bl	10ea8 <dcgettext@plt>
   14768:	ldr	r2, [r5]
   1476c:	mov	r1, r4
   14770:	bl	12c0c <__assert_fail@plt+0x1b24>
   14774:	andeq	r6, r1, r4, lsr #25
   14778:	push	{r4, r5, r6, lr}
   1477c:	mov	r5, r0
   14780:	mov	r1, #1
   14784:	bl	133e8 <__assert_fail@plt+0x2300>
   14788:	ldr	r4, [r5, #20]
   1478c:	cmp	r4, #0
   14790:	beq	147a8 <__assert_fail@plt+0x36c0>
   14794:	mov	r0, r5
   14798:	bl	139b4 <__assert_fail@plt+0x28cc>
   1479c:	ldr	r4, [r0, #4]
   147a0:	mov	r0, r4
   147a4:	pop	{r4, r5, r6, pc}
   147a8:	mov	r2, #5
   147ac:	ldr	r1, [pc, #20]	; 147c8 <__assert_fail@plt+0x36e0>
   147b0:	mov	r0, r4
   147b4:	bl	10ea8 <dcgettext@plt>
   147b8:	ldr	r1, [r5]
   147bc:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   147c0:	mov	r0, r4
   147c4:	pop	{r4, r5, r6, pc}
   147c8:			; <UNDEFINED> instruction: 0x00016ab0
   147cc:	push	{r4, lr}
   147d0:	mov	r4, r0
   147d4:	bl	10ecc <unlink@plt>
   147d8:	cmp	r0, #0
   147dc:	popeq	{r4, pc}
   147e0:	bl	10fd4 <__errno_location@plt>
   147e4:	ldr	r3, [r0]
   147e8:	cmp	r3, #2
   147ec:	popeq	{r4, pc}
   147f0:	ldr	r1, [pc, #16]	; 14808 <__assert_fail@plt+0x3720>
   147f4:	mov	r2, #5
   147f8:	mov	r0, #0
   147fc:	bl	10ea8 <dcgettext@plt>
   14800:	mov	r1, r4
   14804:	bl	12dfc <__assert_fail@plt+0x1d14>
   14808:	ldrdeq	r6, [r1], -r8
   1480c:	push	{r0, r1, r2, r3}
   14810:	push	{r4, r5, lr}
   14814:	sub	sp, sp, #12
   14818:	ldr	r4, [pc, #76]	; 1486c <__assert_fail@plt+0x3784>
   1481c:	add	r3, sp, #28
   14820:	mov	r1, r3
   14824:	ldr	r2, [r4]
   14828:	ldr	r0, [sp, #24]
   1482c:	str	r2, [sp, #4]
   14830:	str	r3, [sp]
   14834:	bl	13588 <__assert_fail@plt+0x24a0>
   14838:	mov	r5, r0
   1483c:	bl	147cc <__assert_fail@plt+0x36e4>
   14840:	mov	r0, r5
   14844:	bl	10e78 <free@plt>
   14848:	ldr	r2, [sp, #4]
   1484c:	ldr	r3, [r4]
   14850:	cmp	r2, r3
   14854:	bne	14868 <__assert_fail@plt+0x3780>
   14858:	add	sp, sp, #12
   1485c:	pop	{r4, r5, lr}
   14860:	add	sp, sp, #16
   14864:	bx	lr
   14868:	bl	10ec0 <__stack_chk_fail@plt>
   1486c:	andeq	r8, r2, r0, lsl #28
   14870:	push	{r4, lr}
   14874:	mov	r2, #5
   14878:	mov	r4, r0
   1487c:	ldr	r1, [pc, #12]	; 14890 <__assert_fail@plt+0x37a8>
   14880:	mov	r0, #0
   14884:	bl	10ea8 <dcgettext@plt>
   14888:	mov	r1, r4
   1488c:	bl	12dfc <__assert_fail@plt+0x1d14>
   14890:	strdeq	r6, [r1], -r0
   14894:	push	{r4, r5, r6, r7, r8, lr}
   14898:	mov	r5, r0
   1489c:	mov	r7, r1
   148a0:	mov	r0, r2
   148a4:	mov	r1, #10
   148a8:	mov	r4, r2
   148ac:	bl	10fc8 <strchr@plt>
   148b0:	subs	r8, r0, #0
   148b4:	bne	148f8 <__assert_fail@plt+0x3810>
   148b8:	mov	r0, r4
   148bc:	bl	10fbc <strlen@plt>
   148c0:	mov	r3, r4
   148c4:	ldr	r2, [pc, #68]	; 14910 <__assert_fail@plt+0x3828>
   148c8:	mov	r1, #1
   148cc:	mov	r6, r0
   148d0:	ldr	r0, [r5]
   148d4:	bl	1101c <__fprintf_chk@plt>
   148d8:	cmp	r6, r0
   148dc:	poplt	{r4, r5, r6, r7, r8, pc}
   148e0:	ldr	r1, [pc, #44]	; 14914 <__assert_fail@plt+0x382c>
   148e4:	mov	r0, r8
   148e8:	mov	r2, #5
   148ec:	bl	10ea8 <dcgettext@plt>
   148f0:	ldr	r1, [r7]
   148f4:	bl	12dfc <__assert_fail@plt+0x1d14>
   148f8:	ldr	r1, [pc, #24]	; 14918 <__assert_fail@plt+0x3830>
   148fc:	mov	r2, #5
   14900:	mov	r0, #0
   14904:	bl	10ea8 <dcgettext@plt>
   14908:	mov	r1, r4
   1490c:	bl	12c0c <__assert_fail@plt+0x1b24>
   14910:	andeq	r6, r1, r0, asr sp
   14914:	andeq	r6, r1, r4, asr sp
   14918:	andeq	r6, r1, r8, lsl sp
   1491c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14920:	sub	sp, sp, #24
   14924:	ldr	r4, [pc, #296]	; 14a54 <__assert_fail@plt+0x396c>
   14928:	ldr	r9, [pc, #296]	; 14a58 <__assert_fail@plt+0x3970>
   1492c:	mov	sl, #0
   14930:	ldr	r3, [r4]
   14934:	mov	r6, r0
   14938:	mov	r7, r1
   1493c:	str	r3, [sp, #20]
   14940:	str	r9, [sp, #4]
   14944:	strd	r0, [sp, #8]
   14948:	str	sl, [sp, #16]
   1494c:	bl	10f8c <rename@plt>
   14950:	cmp	r0, sl
   14954:	beq	149e4 <__assert_fail@plt+0x38fc>
   14958:	bl	10fd4 <__errno_location@plt>
   1495c:	ldr	r3, [r0]
   14960:	mov	r8, r0
   14964:	cmp	r3, #2
   14968:	beq	149c8 <__assert_fail@plt+0x38e0>
   1496c:	bl	1104c <fork@plt>
   14970:	cmn	r0, #1
   14974:	mov	r5, r0
   14978:	beq	14a00 <__assert_fail@plt+0x3918>
   1497c:	cmp	r0, #0
   14980:	bne	14994 <__assert_fail@plt+0x38ac>
   14984:	b	14a14 <__assert_fail@plt+0x392c>
   14988:	ldr	r3, [r8]
   1498c:	cmp	r3, #4
   14990:	bne	14a3c <__assert_fail@plt+0x3954>
   14994:	mov	r2, #0
   14998:	mov	r1, sp
   1499c:	mov	r0, r5
   149a0:	bl	10f14 <waitpid@plt>
   149a4:	cmn	r0, #1
   149a8:	beq	14988 <__assert_fail@plt+0x38a0>
   149ac:	cmp	r5, r0
   149b0:	bne	14a3c <__assert_fail@plt+0x3954>
   149b4:	ldr	r3, [sp]
   149b8:	and	r2, r3, #127	; 0x7f
   149bc:	lsl	r3, r3, #16
   149c0:	orrs	r3, r2, r3, lsr #24
   149c4:	beq	149e4 <__assert_fail@plt+0x38fc>
   149c8:	mov	r2, #5
   149cc:	ldr	r1, [pc, #136]	; 14a5c <__assert_fail@plt+0x3974>
   149d0:	mov	r0, #0
   149d4:	bl	10ea8 <dcgettext@plt>
   149d8:	mov	r2, r7
   149dc:	mov	r1, r6
   149e0:	bl	12dfc <__assert_fail@plt+0x1d14>
   149e4:	ldr	r2, [sp, #20]
   149e8:	ldr	r3, [r4]
   149ec:	cmp	r2, r3
   149f0:	bne	149fc <__assert_fail@plt+0x3914>
   149f4:	add	sp, sp, #24
   149f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149fc:	bl	10ec0 <__stack_chk_fail@plt>
   14a00:	mov	r2, #5
   14a04:	ldr	r1, [pc, #84]	; 14a60 <__assert_fail@plt+0x3978>
   14a08:	mov	r0, sl
   14a0c:	bl	10ea8 <dcgettext@plt>
   14a10:	bl	12c0c <__assert_fail@plt+0x1b24>
   14a14:	add	r1, sp, #4
   14a18:	mov	r0, r9
   14a1c:	bl	10e90 <execvp@plt>
   14a20:	mov	r2, #5
   14a24:	ldr	r1, [pc, #56]	; 14a64 <__assert_fail@plt+0x397c>
   14a28:	mov	r0, r5
   14a2c:	bl	10ea8 <dcgettext@plt>
   14a30:	mov	r2, r9
   14a34:	mov	r1, r9
   14a38:	bl	12dfc <__assert_fail@plt+0x1d14>
   14a3c:	ldr	r1, [pc, #36]	; 14a68 <__assert_fail@plt+0x3980>
   14a40:	mov	r2, #5
   14a44:	mov	r0, #0
   14a48:	bl	10ea8 <dcgettext@plt>
   14a4c:	ldr	r1, [pc, #4]	; 14a58 <__assert_fail@plt+0x3970>
   14a50:	bl	12c0c <__assert_fail@plt+0x1b24>
   14a54:	andeq	r8, r2, r0, lsl #28
   14a58:	andeq	r6, r1, r0, ror sp
   14a5c:			; <UNDEFINED> instruction: 0x00016dbc
   14a60:	andeq	r6, r1, r4, ror sp
   14a64:	andeq	r6, r1, r0, lsl #27
   14a68:	muleq	r1, ip, sp
   14a6c:	ldr	r3, [pc, #1224]	; 14f3c <__assert_fail@plt+0x3e54>
   14a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a74:	sub	sp, sp, #436	; 0x1b4
   14a78:	ldr	r6, [r0, #16]
   14a7c:	ldr	r3, [r3]
   14a80:	cmp	r6, #0
   14a84:	mov	r8, r0
   14a88:	str	r3, [sp, #428]	; 0x1ac
   14a8c:	beq	14b84 <__assert_fail@plt+0x3a9c>
   14a90:	ldr	r9, [pc, #1192]	; 14f40 <__assert_fail@plt+0x3e58>
   14a94:	mov	r7, #0
   14a98:	ldr	r4, [r8, #20]
   14a9c:	cmp	r4, #0
   14aa0:	beq	14e70 <__assert_fail@plt+0x3d88>
   14aa4:	ldr	r5, [r6, #4]
   14aa8:	b	14ab8 <__assert_fail@plt+0x39d0>
   14aac:	ldr	r4, [r4]
   14ab0:	cmp	r4, #0
   14ab4:	beq	14e70 <__assert_fail@plt+0x3d88>
   14ab8:	mov	r1, r5
   14abc:	mov	r0, r4
   14ac0:	bl	12a58 <__assert_fail@plt+0x1970>
   14ac4:	cmp	r0, #0
   14ac8:	beq	14aac <__assert_fail@plt+0x39c4>
   14acc:	mov	r7, r6
   14ad0:	ldr	r6, [r6]
   14ad4:	cmp	r6, #0
   14ad8:	bne	14a98 <__assert_fail@plt+0x39b0>
   14adc:	ldr	r3, [r8, #16]
   14ae0:	cmp	r3, #0
   14ae4:	bne	14af0 <__assert_fail@plt+0x3a08>
   14ae8:	b	14b84 <__assert_fail@plt+0x3a9c>
   14aec:	mov	r6, r4
   14af0:	ldr	r3, [r3]
   14af4:	add	r4, r6, #1
   14af8:	cmp	r3, #0
   14afc:	bne	14aec <__assert_fail@plt+0x3a04>
   14b00:	cmp	r4, #1
   14b04:	beq	14b84 <__assert_fail@plt+0x3a9c>
   14b08:	lsl	r0, r4, #2
   14b0c:	bl	130c8 <__assert_fail@plt+0x1fe0>
   14b10:	ldr	r3, [r8, #16]
   14b14:	cmp	r3, #0
   14b18:	mov	r5, r0
   14b1c:	subne	r2, r0, #4
   14b20:	beq	14b34 <__assert_fail@plt+0x3a4c>
   14b24:	str	r3, [r2, #4]!
   14b28:	ldr	r3, [r3]
   14b2c:	cmp	r3, #0
   14b30:	bne	14b24 <__assert_fail@plt+0x3a3c>
   14b34:	mov	r1, r4
   14b38:	ldr	r3, [pc, #1028]	; 14f44 <__assert_fail@plt+0x3e5c>
   14b3c:	mov	r2, #4
   14b40:	mov	r0, r5
   14b44:	bl	1107c <qsort@plt>
   14b48:	ldr	r0, [r5, r6, lsl #2]
   14b4c:	ldr	r1, [r5]
   14b50:	mov	r2, #0
   14b54:	str	r1, [r8, #16]
   14b58:	mov	r3, r2
   14b5c:	str	r2, [r0]
   14b60:	mov	r0, r5
   14b64:	ldr	r2, [r0, #4]!
   14b68:	add	r3, r3, #1
   14b6c:	cmp	r3, r6
   14b70:	str	r2, [r1]
   14b74:	mov	r1, r2
   14b78:	blt	14b64 <__assert_fail@plt+0x3a7c>
   14b7c:	mov	r0, r5
   14b80:	bl	10e78 <free@plt>
   14b84:	ldr	r3, [r8, #20]
   14b88:	cmp	r3, #0
   14b8c:	beq	14c4c <__assert_fail@plt+0x3b64>
   14b90:	mov	r4, #0
   14b94:	b	14b9c <__assert_fail@plt+0x3ab4>
   14b98:	mov	r4, r5
   14b9c:	ldr	r3, [r3]
   14ba0:	add	r5, r4, #1
   14ba4:	cmp	r3, #0
   14ba8:	bne	14b98 <__assert_fail@plt+0x3ab0>
   14bac:	cmp	r5, #1
   14bb0:	beq	14c4c <__assert_fail@plt+0x3b64>
   14bb4:	lsl	r0, r5, #2
   14bb8:	bl	130c8 <__assert_fail@plt+0x1fe0>
   14bbc:	ldr	r3, [r8, #20]
   14bc0:	cmp	r3, #0
   14bc4:	mov	r6, r0
   14bc8:	beq	14bfc <__assert_fail@plt+0x3b14>
   14bcc:	ldr	r2, [r3, #4]
   14bd0:	cmp	r2, #0
   14bd4:	beq	14ec8 <__assert_fail@plt+0x3de0>
   14bd8:	sub	r2, r0, #4
   14bdc:	b	14bec <__assert_fail@plt+0x3b04>
   14be0:	ldr	r0, [r3, #4]
   14be4:	cmp	r0, #0
   14be8:	beq	14ec8 <__assert_fail@plt+0x3de0>
   14bec:	str	r3, [r2, #4]!
   14bf0:	ldr	r3, [r3]
   14bf4:	cmp	r3, #0
   14bf8:	bne	14be0 <__assert_fail@plt+0x3af8>
   14bfc:	mov	r1, r5
   14c00:	ldr	r3, [pc, #832]	; 14f48 <__assert_fail@plt+0x3e60>
   14c04:	mov	r2, #4
   14c08:	mov	r0, r6
   14c0c:	bl	1107c <qsort@plt>
   14c10:	ldr	r0, [r6, r4, lsl #2]
   14c14:	ldr	r1, [r6]
   14c18:	mov	r2, #0
   14c1c:	str	r1, [r8, #20]
   14c20:	mov	r3, r2
   14c24:	str	r2, [r0]
   14c28:	mov	r0, r6
   14c2c:	ldr	r2, [r0, #4]!
   14c30:	add	r3, r3, #1
   14c34:	cmp	r4, r3
   14c38:	str	r2, [r1]
   14c3c:	mov	r1, r2
   14c40:	bgt	14c2c <__assert_fail@plt+0x3b44>
   14c44:	mov	r0, r6
   14c48:	bl	10e78 <free@plt>
   14c4c:	ldr	r3, [pc, #760]	; 14f4c <__assert_fail@plt+0x3e64>
   14c50:	ldr	r2, [r8]
   14c54:	ldr	r0, [pc, #756]	; 14f50 <__assert_fail@plt+0x3e68>
   14c58:	ldr	r1, [r3, #16]
   14c5c:	bl	135f4 <__assert_fail@plt+0x250c>
   14c60:	mov	r1, r0
   14c64:	str	r0, [sp, #4]
   14c68:	ldr	r0, [pc, #740]	; 14f54 <__assert_fail@plt+0x3e6c>
   14c6c:	bl	135f4 <__assert_fail@plt+0x250c>
   14c70:	ldr	r1, [pc, #736]	; 14f58 <__assert_fail@plt+0x3e70>
   14c74:	mov	fp, r0
   14c78:	str	r0, [sp, #12]
   14c7c:	bl	11070 <fopen64@plt>
   14c80:	cmp	r0, #0
   14c84:	str	r0, [sp, #8]
   14c88:	beq	14f28 <__assert_fail@plt+0x3e40>
   14c8c:	ldr	r1, [r8, #12]
   14c90:	ldr	r3, [pc, #708]	; 14f5c <__assert_fail@plt+0x3e74>
   14c94:	cmp	r1, #1
   14c98:	ldr	r2, [pc, #704]	; 14f60 <__assert_fail@plt+0x3e78>
   14c9c:	add	r0, sp, #8
   14ca0:	movne	r2, r3
   14ca4:	add	r1, sp, #12
   14ca8:	bl	14894 <__assert_fail@plt+0x37ac>
   14cac:	add	r1, sp, #12
   14cb0:	add	r0, sp, #8
   14cb4:	ldr	r2, [r8, #4]
   14cb8:	bl	14894 <__assert_fail@plt+0x37ac>
   14cbc:	ldr	r4, [r8, #16]
   14cc0:	cmp	r4, #0
   14cc4:	beq	14cf4 <__assert_fail@plt+0x3c0c>
   14cc8:	ldr	r2, [r4, #4]
   14ccc:	add	r1, sp, #12
   14cd0:	add	r0, sp, #8
   14cd4:	bl	14894 <__assert_fail@plt+0x37ac>
   14cd8:	ldr	r2, [r4, #8]
   14cdc:	add	r1, sp, #12
   14ce0:	add	r0, sp, #8
   14ce4:	bl	14894 <__assert_fail@plt+0x37ac>
   14ce8:	ldr	r4, [r4]
   14cec:	cmp	r4, #0
   14cf0:	bne	14cc8 <__assert_fail@plt+0x3be0>
   14cf4:	ldr	r2, [pc, #616]	; 14f64 <__assert_fail@plt+0x3e7c>
   14cf8:	add	r1, sp, #12
   14cfc:	add	r0, sp, #8
   14d00:	bl	14894 <__assert_fail@plt+0x37ac>
   14d04:	ldr	r6, [r8, #20]
   14d08:	cmp	r6, #0
   14d0c:	beq	14df0 <__assert_fail@plt+0x3d08>
   14d10:	ldr	r9, [pc, #592]	; 14f68 <__assert_fail@plt+0x3e80>
   14d14:	ldr	r7, [pc, #584]	; 14f64 <__assert_fail@plt+0x3e7c>
   14d18:	ldr	r2, [r6, #4]
   14d1c:	add	r1, sp, #12
   14d20:	add	r0, sp, #8
   14d24:	bl	14894 <__assert_fail@plt+0x37ac>
   14d28:	ldr	r1, [r6, #8]
   14d2c:	mov	r0, r9
   14d30:	bl	135f4 <__assert_fail@plt+0x250c>
   14d34:	add	r1, sp, #12
   14d38:	mov	r2, r0
   14d3c:	mov	r4, r0
   14d40:	add	r0, sp, #8
   14d44:	bl	14894 <__assert_fail@plt+0x37ac>
   14d48:	mov	r0, r4
   14d4c:	bl	10e78 <free@plt>
   14d50:	ldr	r5, [r8, #16]
   14d54:	cmp	r5, #0
   14d58:	bne	14d7c <__assert_fail@plt+0x3c94>
   14d5c:	b	14de4 <__assert_fail@plt+0x3cfc>
   14d60:	mov	r2, r7
   14d64:	add	r1, sp, #12
   14d68:	add	r0, sp, #8
   14d6c:	bl	14894 <__assert_fail@plt+0x37ac>
   14d70:	ldr	r5, [r5]
   14d74:	cmp	r5, #0
   14d78:	beq	14de4 <__assert_fail@plt+0x3cfc>
   14d7c:	ldr	r4, [r5, #4]
   14d80:	mov	r0, r6
   14d84:	mov	r1, r4
   14d88:	bl	12a58 <__assert_fail@plt+0x1970>
   14d8c:	cmp	r0, #0
   14d90:	beq	14d60 <__assert_fail@plt+0x3c78>
   14d94:	ldr	sl, [r6, #12]
   14d98:	cmp	sl, #0
   14d9c:	bne	14db0 <__assert_fail@plt+0x3cc8>
   14da0:	b	14dc8 <__assert_fail@plt+0x3ce0>
   14da4:	ldr	sl, [sl]
   14da8:	cmp	sl, #0
   14dac:	beq	14dc8 <__assert_fail@plt+0x3ce0>
   14db0:	mov	r1, r4
   14db4:	ldr	r0, [sl, #4]
   14db8:	bl	10e3c <strcmp@plt>
   14dbc:	cmp	r0, #0
   14dc0:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14dc4:	ldr	sl, [sl, #8]
   14dc8:	mov	r2, sl
   14dcc:	add	r1, sp, #12
   14dd0:	add	r0, sp, #8
   14dd4:	bl	14894 <__assert_fail@plt+0x37ac>
   14dd8:	ldr	r5, [r5]
   14ddc:	cmp	r5, #0
   14de0:	bne	14d7c <__assert_fail@plt+0x3c94>
   14de4:	ldr	r6, [r6]
   14de8:	cmp	r6, #0
   14dec:	bne	14d18 <__assert_fail@plt+0x3c30>
   14df0:	add	r1, sp, #12
   14df4:	add	r0, sp, #8
   14df8:	ldr	r2, [pc, #356]	; 14f64 <__assert_fail@plt+0x3e7c>
   14dfc:	bl	14894 <__assert_fail@plt+0x37ac>
   14e00:	ldr	r0, [sp, #8]
   14e04:	bl	10e60 <fflush@plt>
   14e08:	subs	r5, r0, #0
   14e0c:	bne	14f10 <__assert_fail@plt+0x3e28>
   14e10:	ldr	r0, [sp, #8]
   14e14:	bl	11010 <fileno@plt>
   14e18:	bl	10e30 <fsync@plt>
   14e1c:	subs	r4, r0, #0
   14e20:	bne	14ef8 <__assert_fail@plt+0x3e10>
   14e24:	ldr	r0, [sp, #8]
   14e28:	bl	11028 <fclose@plt>
   14e2c:	cmp	r0, #0
   14e30:	bne	14ee0 <__assert_fail@plt+0x3df8>
   14e34:	ldr	r4, [sp, #4]
   14e38:	mov	r0, fp
   14e3c:	mov	r1, r4
   14e40:	bl	1491c <__assert_fail@plt+0x3834>
   14e44:	mov	r0, fp
   14e48:	bl	10e78 <free@plt>
   14e4c:	mov	r0, r4
   14e50:	bl	10e78 <free@plt>
   14e54:	ldr	r3, [pc, #224]	; 14f3c <__assert_fail@plt+0x3e54>
   14e58:	ldr	r2, [sp, #428]	; 0x1ac
   14e5c:	ldr	r3, [r3]
   14e60:	cmp	r2, r3
   14e64:	bne	14edc <__assert_fail@plt+0x3df4>
   14e68:	add	sp, sp, #436	; 0x1b4
   14e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e70:	mov	r2, #5
   14e74:	mov	r1, r9
   14e78:	mov	r0, #0
   14e7c:	bl	10ea8 <dcgettext@plt>
   14e80:	ldmib	r6, {r1, r2}
   14e84:	bl	12fb0 <__assert_fail@plt+0x1ec8>
   14e88:	cmp	r7, #0
   14e8c:	beq	14ebc <__assert_fail@plt+0x3dd4>
   14e90:	ldr	r3, [r6]
   14e94:	str	r3, [r7]
   14e98:	ldr	r4, [r6]
   14e9c:	ldr	r0, [r6, #4]
   14ea0:	bl	10e78 <free@plt>
   14ea4:	ldr	r0, [r6, #8]
   14ea8:	bl	10e78 <free@plt>
   14eac:	mov	r0, r6
   14eb0:	bl	10e78 <free@plt>
   14eb4:	mov	r6, r4
   14eb8:	b	14ad4 <__assert_fail@plt+0x39ec>
   14ebc:	ldr	r4, [r6]
   14ec0:	str	r4, [r8, #16]
   14ec4:	b	14e9c <__assert_fail@plt+0x3db4>
   14ec8:	ldr	r3, [pc, #156]	; 14f6c <__assert_fail@plt+0x3e84>
   14ecc:	mov	r2, #868	; 0x364
   14ed0:	ldr	r1, [pc, #152]	; 14f70 <__assert_fail@plt+0x3e88>
   14ed4:	ldr	r0, [pc, #152]	; 14f74 <__assert_fail@plt+0x3e8c>
   14ed8:	bl	110e8 <__assert_fail@plt>
   14edc:	bl	10ec0 <__stack_chk_fail@plt>
   14ee0:	ldr	r1, [pc, #144]	; 14f78 <__assert_fail@plt+0x3e90>
   14ee4:	mov	r0, r4
   14ee8:	mov	r2, #5
   14eec:	bl	10ea8 <dcgettext@plt>
   14ef0:	ldr	r1, [sp, #12]
   14ef4:	bl	12dfc <__assert_fail@plt+0x1d14>
   14ef8:	ldr	r1, [pc, #124]	; 14f7c <__assert_fail@plt+0x3e94>
   14efc:	mov	r0, r5
   14f00:	mov	r2, #5
   14f04:	bl	10ea8 <dcgettext@plt>
   14f08:	ldr	r1, [sp, #12]
   14f0c:	bl	12dfc <__assert_fail@plt+0x1d14>
   14f10:	ldr	r1, [pc, #104]	; 14f80 <__assert_fail@plt+0x3e98>
   14f14:	mov	r2, #5
   14f18:	mov	r0, #0
   14f1c:	bl	10ea8 <dcgettext@plt>
   14f20:	ldr	r1, [sp, #12]
   14f24:	bl	12dfc <__assert_fail@plt+0x1d14>
   14f28:	ldr	r1, [pc, #84]	; 14f84 <__assert_fail@plt+0x3e9c>
   14f2c:	mov	r2, #5
   14f30:	bl	10ea8 <dcgettext@plt>
   14f34:	ldr	r1, [sp, #12]
   14f38:	bl	12dfc <__assert_fail@plt+0x1d14>
   14f3c:	andeq	r8, r2, r0, lsl #28
   14f40:	andeq	r6, r1, r8, ror lr
   14f44:	andeq	r4, r1, r0, lsr #10
   14f48:	muleq	r1, ip, r5
   14f4c:	andeq	r9, r2, ip, lsl #1
   14f50:	andeq	r6, r1, r4, asr r8
   14f54:	strdeq	r6, [r1], -r4
   14f58:	andeq	r6, r1, r0, lsl #28
   14f5c:	andeq	r6, r1, r0, asr r7
   14f60:	andeq	r8, r1, r0, lsr #32
   14f64:	muleq	r1, r0, r4
   14f68:	andeq	r6, r1, r0, lsr #28
   14f6c:	ldrdeq	r6, [r1], -r0
   14f70:	andeq	r6, r1, ip, lsr r9
   14f74:	andeq	r6, r1, r4, ror #27
   14f78:	andeq	r6, r1, ip, asr lr
   14f7c:	andeq	r6, r1, r0, asr #28
   14f80:	andeq	r6, r1, r4, lsr #28
   14f84:	andeq	r6, r1, r4, lsl #28
   14f88:	push	{r4, r5, r6, lr}
   14f8c:	mov	r4, r0
   14f90:	mov	r6, #0
   14f94:	ldr	r0, [r0, #8]
   14f98:	bl	10e78 <free@plt>
   14f9c:	str	r6, [r4, #8]
   14fa0:	ldr	r0, [r4, #4]
   14fa4:	bl	10e78 <free@plt>
   14fa8:	ldr	r5, [r4, #16]
   14fac:	str	r6, [r4, #4]
   14fb0:	cmp	r5, r6
   14fb4:	beq	14fe4 <__assert_fail@plt+0x3efc>
   14fb8:	ldr	r3, [r5]
   14fbc:	ldr	r0, [r5, #4]
   14fc0:	str	r3, [r4, #16]
   14fc4:	bl	10e78 <free@plt>
   14fc8:	ldr	r0, [r5, #8]
   14fcc:	bl	10e78 <free@plt>
   14fd0:	mov	r0, r5
   14fd4:	bl	10e78 <free@plt>
   14fd8:	ldr	r5, [r4, #16]
   14fdc:	cmp	r5, #0
   14fe0:	bne	14fb8 <__assert_fail@plt+0x3ed0>
   14fe4:	ldr	r0, [r4, #20]
   14fe8:	cmp	r0, #0
   14fec:	beq	1503c <__assert_fail@plt+0x3f54>
   14ff0:	mov	r3, #1
   14ff4:	strb	r3, [r4, #32]
   14ff8:	ldr	r3, [r0]
   14ffc:	str	r3, [r4, #20]
   15000:	bl	1307c <__assert_fail@plt+0x1f94>
   15004:	ldr	r0, [r4, #20]
   15008:	cmp	r0, #0
   1500c:	bne	14ff8 <__assert_fail@plt+0x3f10>
   15010:	ldr	r5, [r4, #24]
   15014:	cmp	r5, #0
   15018:	beq	15048 <__assert_fail@plt+0x3f60>
   1501c:	ldr	r3, [r5]
   15020:	ldr	r0, [r5, #8]
   15024:	str	r3, [r4, #24]
   15028:	bl	10e78 <free@plt>
   1502c:	ldr	r0, [r5, #12]
   15030:	bl	10e78 <free@plt>
   15034:	mov	r0, r5
   15038:	bl	10e78 <free@plt>
   1503c:	ldr	r5, [r4, #24]
   15040:	cmp	r5, #0
   15044:	bne	1501c <__assert_fail@plt+0x3f34>
   15048:	mov	r3, #0
   1504c:	strh	r3, [r4, #32]
   15050:	pop	{r4, r5, r6, pc}
   15054:	push	{r4, lr}
   15058:	mov	r4, r0
   1505c:	bl	14f88 <__assert_fail@plt+0x3ea0>
   15060:	ldr	r0, [r4]
   15064:	bl	10e78 <free@plt>
   15068:	mov	r0, r4
   1506c:	pop	{r4, lr}
   15070:	b	10e78 <free@plt>
   15074:	push	{r4, r5, r6, lr}
   15078:	subs	r4, r0, #0
   1507c:	popeq	{r4, r5, r6, pc}
   15080:	ldr	r3, [r4, #8]
   15084:	ldr	r5, [r4]
   15088:	cmp	r3, #0
   1508c:	beq	150ac <__assert_fail@plt+0x3fc4>
   15090:	ldr	r2, [r3, #28]
   15094:	mov	r0, r3
   15098:	sub	r2, r2, #1
   1509c:	cmp	r2, #0
   150a0:	str	r2, [r3, #28]
   150a4:	bne	150ac <__assert_fail@plt+0x3fc4>
   150a8:	bl	15054 <__assert_fail@plt+0x3f6c>
   150ac:	mov	r0, r4
   150b0:	bl	10e78 <free@plt>
   150b4:	subs	r4, r5, #0
   150b8:	bne	15080 <__assert_fail@plt+0x3f98>
   150bc:	pop	{r4, r5, r6, pc}
   150c0:	ldr	ip, [pc, #348]	; 15224 <__assert_fail@plt+0x413c>
   150c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   150c8:	mov	r7, r1
   150cc:	ldr	r6, [ip, #108]	; 0x6c
   150d0:	mov	r5, r0
   150d4:	mov	r1, r6
   150d8:	mov	r9, r2
   150dc:	ldr	r0, [pc, #324]	; 15228 <__assert_fail@plt+0x4140>
   150e0:	mov	r2, r7
   150e4:	mov	r8, r3
   150e8:	bl	135f4 <__assert_fail@plt+0x250c>
   150ec:	mov	r1, r6
   150f0:	mov	r2, r7
   150f4:	mov	r4, r0
   150f8:	ldr	r0, [pc, #300]	; 1522c <__assert_fail@plt+0x4144>
   150fc:	bl	135f4 <__assert_fail@plt+0x250c>
   15100:	mov	r6, r0
   15104:	mov	r0, r4
   15108:	bl	147cc <__assert_fail@plt+0x36e4>
   1510c:	mov	r1, r4
   15110:	mov	r0, r8
   15114:	bl	11064 <symlink@plt>
   15118:	cmp	r0, #0
   1511c:	bne	15208 <__assert_fail@plt+0x4120>
   15120:	add	r5, r5, #24
   15124:	mov	r3, r6
   15128:	mov	r2, r4
   1512c:	mov	r0, r5
   15130:	mov	r1, #2
   15134:	bl	143d4 <__assert_fail@plt+0x32ec>
   15138:	mov	r0, r4
   1513c:	bl	10e78 <free@plt>
   15140:	ldr	r3, [pc, #232]	; 15230 <__assert_fail@plt+0x4148>
   15144:	ldr	r4, [r3, #20]
   15148:	cmp	r4, #0
   1514c:	beq	151a0 <__assert_fail@plt+0x40b8>
   15150:	mov	r1, r9
   15154:	ldr	r0, [pc, #216]	; 15234 <__assert_fail@plt+0x414c>
   15158:	bl	135f4 <__assert_fail@plt+0x250c>
   1515c:	mov	r4, r0
   15160:	bl	147cc <__assert_fail@plt+0x36e4>
   15164:	mov	r1, r4
   15168:	mov	r0, r6
   1516c:	bl	11064 <symlink@plt>
   15170:	cmp	r0, #0
   15174:	bne	15208 <__assert_fail@plt+0x4120>
   15178:	mov	r0, r5
   1517c:	mov	r3, r9
   15180:	mov	r2, r4
   15184:	mov	r1, #2
   15188:	bl	143d4 <__assert_fail@plt+0x32ec>
   1518c:	mov	r0, r4
   15190:	bl	10e78 <free@plt>
   15194:	mov	r0, r6
   15198:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1519c:	b	10e78 <free@plt>
   151a0:	mov	r0, r9
   151a4:	bl	137d4 <__assert_fail@plt+0x26ec>
   151a8:	cmp	r0, #0
   151ac:	beq	151dc <__assert_fail@plt+0x40f4>
   151b0:	cmp	r0, #2
   151b4:	bne	15150 <__assert_fail@plt+0x4068>
   151b8:	mov	r0, r4
   151bc:	mov	r2, #5
   151c0:	ldr	r1, [pc, #112]	; 15238 <__assert_fail@plt+0x4150>
   151c4:	bl	10ea8 <dcgettext@plt>
   151c8:	mov	r1, r9
   151cc:	bl	12c9c <__assert_fail@plt+0x1bb4>
   151d0:	mov	r0, r6
   151d4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   151d8:	b	10e78 <free@plt>
   151dc:	mov	r0, r9
   151e0:	bl	13460 <__assert_fail@plt+0x2378>
   151e4:	subs	r4, r0, #0
   151e8:	beq	15210 <__assert_fail@plt+0x4128>
   151ec:	mov	r1, r6
   151f0:	bl	10e3c <strcmp@plt>
   151f4:	cmp	r0, #0
   151f8:	mov	r0, r4
   151fc:	beq	15190 <__assert_fail@plt+0x40a8>
   15200:	bl	10e78 <free@plt>
   15204:	b	15150 <__assert_fail@plt+0x4068>
   15208:	mov	r0, r4
   1520c:	bl	14870 <__assert_fail@plt+0x3788>
   15210:	ldr	r1, [pc, #36]	; 1523c <__assert_fail@plt+0x4154>
   15214:	mov	r2, #5
   15218:	bl	10ea8 <dcgettext@plt>
   1521c:	mov	r1, r9
   15220:	bl	12dfc <__assert_fail@plt+0x1d14>
   15224:	andeq	r9, r2, r8
   15228:	andeq	r6, r1, r0, lsr #29
   1522c:	andeq	r6, r1, r4, asr r8
   15230:	andeq	r9, r2, ip, lsl #1
   15234:	strdeq	r6, [r1], -r4
   15238:	ldrdeq	r6, [r1], -r0
   1523c:			; <UNDEFINED> instruction: 0x00016eb0
   15240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15244:	mov	r5, r1
   15248:	ldr	r4, [r0, #20]
   1524c:	sub	sp, sp, #12
   15250:	cmp	r4, #0
   15254:	beq	15440 <__assert_fail@plt+0x4358>
   15258:	mov	r7, r0
   1525c:	b	1526c <__assert_fail@plt+0x4184>
   15260:	ldr	r4, [r4]
   15264:	cmp	r4, #0
   15268:	beq	15440 <__assert_fail@plt+0x4358>
   1526c:	mov	r1, r5
   15270:	ldr	r0, [r4, #4]
   15274:	bl	10e3c <strcmp@plt>
   15278:	cmp	r0, #0
   1527c:	bne	15260 <__assert_fail@plt+0x4178>
   15280:	mov	r3, r5
   15284:	ldm	r7, {r1, r2}
   15288:	mov	r0, r7
   1528c:	bl	150c0 <__assert_fail@plt+0x3fd8>
   15290:	ldr	r5, [r7, #16]
   15294:	cmp	r5, #0
   15298:	beq	1532c <__assert_fail@plt+0x4244>
   1529c:	ldr	r9, [pc, #436]	; 15458 <__assert_fail@plt+0x4370>
   152a0:	add	r6, r7, #24
   152a4:	ldr	r8, [r5, #4]
   152a8:	mov	r0, r4
   152ac:	mov	r1, r8
   152b0:	bl	12a58 <__assert_fail@plt+0x1970>
   152b4:	cmp	r0, #0
   152b8:	beq	15338 <__assert_fail@plt+0x4250>
   152bc:	mov	r1, r8
   152c0:	mov	r0, r4
   152c4:	bl	13784 <__assert_fail@plt+0x269c>
   152c8:	cmp	r0, #0
   152cc:	beq	15334 <__assert_fail@plt+0x424c>
   152d0:	ldr	r8, [r4, #12]
   152d4:	ldr	sl, [r5, #4]
   152d8:	cmp	r8, #0
   152dc:	ldr	fp, [r5, #8]
   152e0:	bne	152f4 <__assert_fail@plt+0x420c>
   152e4:	b	1530c <__assert_fail@plt+0x4224>
   152e8:	ldr	r8, [r8]
   152ec:	cmp	r8, #0
   152f0:	beq	1530c <__assert_fail@plt+0x4224>
   152f4:	mov	r1, sl
   152f8:	ldr	r0, [r8, #4]
   152fc:	bl	10e3c <strcmp@plt>
   15300:	cmp	r0, #0
   15304:	bne	152e8 <__assert_fail@plt+0x4200>
   15308:	ldr	r8, [r8, #8]
   1530c:	mov	r3, r8
   15310:	mov	r2, fp
   15314:	mov	r1, sl
   15318:	mov	r0, r7
   1531c:	bl	150c0 <__assert_fail@plt+0x3fd8>
   15320:	ldr	r5, [r5]
   15324:	cmp	r5, #0
   15328:	bne	152a4 <__assert_fail@plt+0x41bc>
   1532c:	add	sp, sp, #12
   15330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15334:	ldr	r8, [r5, #4]
   15338:	mov	r1, r8
   1533c:	mov	r0, r4
   15340:	bl	12a58 <__assert_fail@plt+0x1970>
   15344:	cmp	r0, #0
   15348:	bne	153d4 <__assert_fail@plt+0x42ec>
   1534c:	mov	r2, r8
   15350:	ldr	r1, [r9, #108]	; 0x6c
   15354:	ldr	r0, [pc, #256]	; 1545c <__assert_fail@plt+0x4374>
   15358:	bl	135f4 <__assert_fail@plt+0x250c>
   1535c:	ldr	r3, [pc, #252]	; 15460 <__assert_fail@plt+0x4378>
   15360:	ldr	r2, [r5, #8]
   15364:	ldr	sl, [r3, #20]
   15368:	cmp	sl, #0
   1536c:	mov	r8, r0
   15370:	bne	15388 <__assert_fail@plt+0x42a0>
   15374:	mov	r0, r2
   15378:	bl	137d4 <__assert_fail@plt+0x26ec>
   1537c:	cmp	r0, #2
   15380:	beq	153b8 <__assert_fail@plt+0x42d0>
   15384:	ldr	r2, [r5, #8]
   15388:	mov	r3, #0
   1538c:	mov	r1, #1
   15390:	mov	r0, r6
   15394:	bl	143d4 <__assert_fail@plt+0x32ec>
   15398:	mov	r0, r6
   1539c:	mov	r3, #0
   153a0:	mov	r2, r8
   153a4:	mov	r1, #1
   153a8:	bl	143d4 <__assert_fail@plt+0x32ec>
   153ac:	mov	r0, r8
   153b0:	bl	10e78 <free@plt>
   153b4:	b	15320 <__assert_fail@plt+0x4238>
   153b8:	mov	r0, sl
   153bc:	mov	r2, #5
   153c0:	ldr	r1, [pc, #156]	; 15464 <__assert_fail@plt+0x437c>
   153c4:	bl	10ea8 <dcgettext@plt>
   153c8:	ldr	r1, [r5, #8]
   153cc:	bl	12c9c <__assert_fail@plt+0x1bb4>
   153d0:	b	15398 <__assert_fail@plt+0x42b0>
   153d4:	mov	r2, #5
   153d8:	ldr	r1, [pc, #136]	; 15468 <__assert_fail@plt+0x4380>
   153dc:	mov	r0, #0
   153e0:	bl	10ea8 <dcgettext@plt>
   153e4:	ldr	sl, [r4, #12]
   153e8:	ldr	fp, [r5, #8]
   153ec:	cmp	sl, #0
   153f0:	ldr	r8, [r5, #4]
   153f4:	str	r0, [sp, #4]
   153f8:	bne	1540c <__assert_fail@plt+0x4324>
   153fc:	b	15424 <__assert_fail@plt+0x433c>
   15400:	ldr	sl, [sl]
   15404:	cmp	sl, #0
   15408:	beq	15424 <__assert_fail@plt+0x433c>
   1540c:	mov	r1, r8
   15410:	ldr	r0, [sl, #4]
   15414:	bl	10e3c <strcmp@plt>
   15418:	cmp	r0, #0
   1541c:	bne	15400 <__assert_fail@plt+0x4318>
   15420:	ldr	sl, [sl, #8]
   15424:	mov	r2, sl
   15428:	mov	r1, fp
   1542c:	ldr	r0, [sp, #4]
   15430:	ldr	r3, [r7]
   15434:	bl	12c9c <__assert_fail@plt+0x1bb4>
   15438:	ldr	r8, [r5, #4]
   1543c:	b	1534c <__assert_fail@plt+0x4264>
   15440:	ldr	r1, [pc, #36]	; 1546c <__assert_fail@plt+0x4384>
   15444:	mov	r2, #5
   15448:	mov	r0, #0
   1544c:	bl	10ea8 <dcgettext@plt>
   15450:	mov	r1, r5
   15454:	bl	12c0c <__assert_fail@plt+0x1b24>
   15458:	andeq	r9, r2, r8
   1545c:	andeq	r6, r1, r4, asr r8
   15460:	andeq	r9, r2, ip, lsl #1
   15464:	andeq	r6, r1, r0, asr #30
   15468:	strdeq	r6, [r1], -r0
   1546c:	andeq	r6, r1, ip, ror #30
   15470:	ldr	r3, [r0, #20]
   15474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15478:	cmp	r3, #0
   1547c:	sub	sp, sp, #12
   15480:	mov	r4, r0
   15484:	beq	157a8 <__assert_fail@plt+0x46c0>
   15488:	cmp	r2, #0
   1548c:	mov	r5, r2
   15490:	mov	r9, r1
   15494:	beq	1559c <__assert_fail@plt+0x44b4>
   15498:	cmp	r1, #0
   1549c:	beq	154b0 <__assert_fail@plt+0x43c8>
   154a0:	mov	r0, r2
   154a4:	bl	10e3c <strcmp@plt>
   154a8:	cmp	r0, #0
   154ac:	beq	1559c <__assert_fail@plt+0x44b4>
   154b0:	ldr	r1, [r4]
   154b4:	mov	r2, r5
   154b8:	ldr	r0, [pc, #1236]	; 15994 <__assert_fail@plt+0x48ac>
   154bc:	bl	132c8 <__assert_fail@plt+0x21e0>
   154c0:	ldr	r3, [r4, #12]
   154c4:	mov	r2, #5
   154c8:	cmp	r3, #1
   154cc:	mov	r0, #0
   154d0:	ldreq	r1, [pc, #1216]	; 15998 <__assert_fail@plt+0x48b0>
   154d4:	ldrne	r1, [pc, #1216]	; 1599c <__assert_fail@plt+0x48b4>
   154d8:	bl	10ea8 <dcgettext@plt>
   154dc:	ldr	r3, [r4]
   154e0:	ldr	r2, [r4, #4]
   154e4:	mov	r1, r5
   154e8:	bl	12f14 <__assert_fail@plt+0x1e2c>
   154ec:	mov	r1, r5
   154f0:	ldr	r0, [pc, #1192]	; 159a0 <__assert_fail@plt+0x48b8>
   154f4:	bl	12d5c <__assert_fail@plt+0x1c74>
   154f8:	mov	r1, r5
   154fc:	mov	r0, r4
   15500:	bl	15240 <__assert_fail@plt+0x4158>
   15504:	ldrb	r3, [r4, #32]
   15508:	cmp	r3, #0
   1550c:	bne	15790 <__assert_fail@plt+0x46a8>
   15510:	ldr	r5, [r4, #24]
   15514:	cmp	r5, #0
   15518:	bne	1553c <__assert_fail@plt+0x4454>
   1551c:	b	15594 <__assert_fail@plt+0x44ac>
   15520:	cmp	r3, #2
   15524:	bne	15530 <__assert_fail@plt+0x4448>
   15528:	ldrd	r0, [r5, #8]
   1552c:	bl	1491c <__assert_fail@plt+0x3834>
   15530:	ldr	r5, [r5]
   15534:	cmp	r5, #0
   15538:	beq	1555c <__assert_fail@plt+0x4474>
   1553c:	ldr	r3, [r5, #4]
   15540:	cmp	r3, #1
   15544:	bne	15520 <__assert_fail@plt+0x4438>
   15548:	ldr	r0, [r5, #8]
   1554c:	bl	147cc <__assert_fail@plt+0x36e4>
   15550:	ldr	r5, [r5]
   15554:	cmp	r5, #0
   15558:	bne	1553c <__assert_fail@plt+0x4454>
   1555c:	ldr	r5, [r4, #24]
   15560:	cmp	r5, #0
   15564:	beq	15594 <__assert_fail@plt+0x44ac>
   15568:	ldr	r3, [r5]
   1556c:	ldr	r0, [r5, #8]
   15570:	str	r3, [r4, #24]
   15574:	bl	10e78 <free@plt>
   15578:	ldr	r0, [r5, #12]
   1557c:	bl	10e78 <free@plt>
   15580:	mov	r0, r5
   15584:	bl	10e78 <free@plt>
   15588:	ldr	r5, [r4, #24]
   1558c:	cmp	r5, #0
   15590:	bne	15568 <__assert_fail@plt+0x4480>
   15594:	add	sp, sp, #12
   15598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1559c:	ldr	r0, [r4, #4]
   155a0:	bl	13460 <__assert_fail@plt+0x2378>
   155a4:	subs	r5, r0, #0
   155a8:	beq	15920 <__assert_fail@plt+0x4838>
   155ac:	ldr	fp, [pc, #1008]	; 159a4 <__assert_fail@plt+0x48bc>
   155b0:	ldr	r2, [r4]
   155b4:	ldr	r0, [pc, #1004]	; 159a8 <__assert_fail@plt+0x48c0>
   155b8:	ldr	r1, [fp, #108]	; 0x6c
   155bc:	bl	135f4 <__assert_fail@plt+0x250c>
   155c0:	mov	r6, r0
   155c4:	mov	r1, r0
   155c8:	mov	r0, r5
   155cc:	bl	10e3c <strcmp@plt>
   155d0:	cmp	r0, #0
   155d4:	mov	r0, r6
   155d8:	bne	15914 <__assert_fail@plt+0x482c>
   155dc:	bl	10e78 <free@plt>
   155e0:	mov	r0, r5
   155e4:	bl	10e78 <free@plt>
   155e8:	ldrb	r3, [r4, #33]	; 0x21
   155ec:	cmp	r3, #0
   155f0:	beq	15888 <__assert_fail@plt+0x47a0>
   155f4:	ldr	r5, [r4, #8]
   155f8:	cmp	r5, #0
   155fc:	beq	15920 <__assert_fail@plt+0x4838>
   15600:	ldr	r6, [r4, #20]
   15604:	cmp	r6, #0
   15608:	bne	1561c <__assert_fail@plt+0x4534>
   1560c:	b	15504 <__assert_fail@plt+0x441c>
   15610:	ldr	r6, [r6]
   15614:	cmp	r6, #0
   15618:	beq	15504 <__assert_fail@plt+0x441c>
   1561c:	mov	r1, r5
   15620:	ldr	r0, [r6, #4]
   15624:	bl	10e3c <strcmp@plt>
   15628:	cmp	r0, #0
   1562c:	bne	15610 <__assert_fail@plt+0x4528>
   15630:	ldr	r5, [r4, #16]
   15634:	cmp	r5, #0
   15638:	strne	r0, [sp, #4]
   1563c:	beq	15504 <__assert_fail@plt+0x441c>
   15640:	ldr	r7, [r5, #4]
   15644:	mov	r0, r6
   15648:	mov	r1, r7
   1564c:	bl	12a58 <__assert_fail@plt+0x1970>
   15650:	cmp	r0, #0
   15654:	beq	158ac <__assert_fail@plt+0x47c4>
   15658:	mov	r1, r7
   1565c:	mov	r0, r6
   15660:	bl	13784 <__assert_fail@plt+0x269c>
   15664:	cmp	r0, #0
   15668:	beq	158ac <__assert_fail@plt+0x47c4>
   1566c:	ldr	r0, [r5, #8]
   15670:	bl	13460 <__assert_fail@plt+0x2378>
   15674:	subs	sl, r0, #0
   15678:	beq	158bc <__assert_fail@plt+0x47d4>
   1567c:	ldr	r2, [r5, #4]
   15680:	ldr	r1, [fp, #108]	; 0x6c
   15684:	ldr	r0, [pc, #796]	; 159a8 <__assert_fail@plt+0x48c0>
   15688:	bl	135f4 <__assert_fail@plt+0x250c>
   1568c:	mov	r1, r0
   15690:	mov	r7, r0
   15694:	mov	r0, sl
   15698:	bl	10e3c <strcmp@plt>
   1569c:	cmp	r0, #0
   156a0:	bne	15900 <__assert_fail@plt+0x4818>
   156a4:	mov	r0, sl
   156a8:	bl	10e78 <free@plt>
   156ac:	mov	r0, r7
   156b0:	bl	13460 <__assert_fail@plt+0x2378>
   156b4:	mov	sl, r0
   156b8:	mov	r0, r7
   156bc:	bl	10e78 <free@plt>
   156c0:	cmp	sl, #0
   156c4:	beq	158bc <__assert_fail@plt+0x47d4>
   156c8:	ldr	r8, [r6, #12]
   156cc:	ldr	r7, [r5, #4]
   156d0:	cmp	r8, #0
   156d4:	bne	156e8 <__assert_fail@plt+0x4600>
   156d8:	b	15700 <__assert_fail@plt+0x4618>
   156dc:	ldr	r8, [r8]
   156e0:	cmp	r8, #0
   156e4:	beq	15700 <__assert_fail@plt+0x4618>
   156e8:	mov	r1, r7
   156ec:	ldr	r0, [r8, #4]
   156f0:	bl	10e3c <strcmp@plt>
   156f4:	cmp	r0, #0
   156f8:	bne	156dc <__assert_fail@plt+0x45f4>
   156fc:	ldr	r8, [r8, #8]
   15700:	mov	r1, r8
   15704:	mov	r0, sl
   15708:	bl	10e3c <strcmp@plt>
   1570c:	cmp	r0, #0
   15710:	mov	r0, sl
   15714:	bne	158f8 <__assert_fail@plt+0x4810>
   15718:	bl	10e78 <free@plt>
   1571c:	ldr	r5, [r5]
   15720:	cmp	r5, #0
   15724:	bne	15640 <__assert_fail@plt+0x4558>
   15728:	ldr	r3, [sp, #4]
   1572c:	cmp	r3, #0
   15730:	beq	15504 <__assert_fail@plt+0x441c>
   15734:	ldr	r1, [r4]
   15738:	ldr	r0, [pc, #620]	; 159ac <__assert_fail@plt+0x48c4>
   1573c:	bl	132c8 <__assert_fail@plt+0x21e0>
   15740:	mov	r2, #5
   15744:	ldr	r1, [pc, #612]	; 159b0 <__assert_fail@plt+0x48c8>
   15748:	mov	r0, r5
   1574c:	bl	10ea8 <dcgettext@plt>
   15750:	ldr	r2, [r4]
   15754:	mov	r1, r9
   15758:	bl	12f14 <__assert_fail@plt+0x1e2c>
   1575c:	cmp	r9, #0
   15760:	beq	15504 <__assert_fail@plt+0x441c>
   15764:	mov	r1, r9
   15768:	mov	r0, r4
   1576c:	bl	12b08 <__assert_fail@plt+0x1a20>
   15770:	subs	r5, r0, #0
   15774:	beq	1594c <__assert_fail@plt+0x4864>
   15778:	mov	r1, r9
   1577c:	mov	r0, r4
   15780:	bl	15240 <__assert_fail@plt+0x4158>
   15784:	ldrb	r3, [r4, #32]
   15788:	cmp	r3, #0
   1578c:	beq	15510 <__assert_fail@plt+0x4428>
   15790:	ldr	r1, [r4]
   15794:	ldr	r0, [pc, #536]	; 159b4 <__assert_fail@plt+0x48cc>
   15798:	bl	12d5c <__assert_fail@plt+0x1c74>
   1579c:	mov	r0, r4
   157a0:	bl	14a6c <__assert_fail@plt+0x3984>
   157a4:	b	15510 <__assert_fail@plt+0x4428>
   157a8:	ldr	fp, [pc, #520]	; 159b8 <__assert_fail@plt+0x48d0>
   157ac:	ldr	r1, [r0]
   157b0:	ldr	r0, [pc, #516]	; 159bc <__assert_fail@plt+0x48d4>
   157b4:	bl	132c8 <__assert_fail@plt+0x21e0>
   157b8:	ldr	r0, [pc, #512]	; 159c0 <__assert_fail@plt+0x48d8>
   157bc:	ldr	r1, [r4, #4]
   157c0:	bl	1480c <__assert_fail@plt+0x3724>
   157c4:	ldr	r7, [fp, #20]
   157c8:	ldr	r0, [r4, #4]
   157cc:	cmp	r7, #0
   157d0:	beq	15898 <__assert_fail@plt+0x47b0>
   157d4:	bl	147cc <__assert_fail@plt+0x36e4>
   157d8:	ldr	r3, [pc, #452]	; 159a4 <__assert_fail@plt+0x48bc>
   157dc:	ldr	r2, [r4]
   157e0:	ldr	r0, [pc, #476]	; 159c4 <__assert_fail@plt+0x48dc>
   157e4:	ldr	r6, [r3, #108]	; 0x6c
   157e8:	mov	r1, r6
   157ec:	bl	1480c <__assert_fail@plt+0x3724>
   157f0:	mov	r1, r6
   157f4:	ldr	r2, [r4]
   157f8:	ldr	r0, [pc, #424]	; 159a8 <__assert_fail@plt+0x48c0>
   157fc:	bl	1480c <__assert_fail@plt+0x3724>
   15800:	ldr	r5, [r4, #16]
   15804:	cmp	r5, #0
   15808:	beq	15870 <__assert_fail@plt+0x4788>
   1580c:	ldr	sl, [pc, #428]	; 159c0 <__assert_fail@plt+0x48d8>
   15810:	ldr	r9, [pc, #428]	; 159c4 <__assert_fail@plt+0x48dc>
   15814:	ldr	r8, [pc, #396]	; 159a8 <__assert_fail@plt+0x48c0>
   15818:	mov	r0, sl
   1581c:	ldr	r1, [r5, #8]
   15820:	bl	1480c <__assert_fail@plt+0x3724>
   15824:	cmp	r7, #0
   15828:	ldr	r0, [r5, #8]
   1582c:	bne	15840 <__assert_fail@plt+0x4758>
   15830:	bl	137d4 <__assert_fail@plt+0x26ec>
   15834:	cmp	r0, #2
   15838:	beq	15844 <__assert_fail@plt+0x475c>
   1583c:	ldr	r0, [r5, #8]
   15840:	bl	147cc <__assert_fail@plt+0x36e4>
   15844:	ldr	r2, [r5, #4]
   15848:	mov	r1, r6
   1584c:	mov	r0, r9
   15850:	bl	1480c <__assert_fail@plt+0x3724>
   15854:	ldr	r2, [r5, #4]
   15858:	mov	r1, r6
   1585c:	mov	r0, r8
   15860:	bl	1480c <__assert_fail@plt+0x3724>
   15864:	ldr	r5, [r5]
   15868:	cmp	r5, #0
   1586c:	bne	15818 <__assert_fail@plt+0x4730>
   15870:	ldr	r2, [r4]
   15874:	ldr	r1, [fp, #16]
   15878:	ldr	r0, [pc, #296]	; 159a8 <__assert_fail@plt+0x48c0>
   1587c:	add	sp, sp, #12
   15880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15884:	b	1480c <__assert_fail@plt+0x3724>
   15888:	mov	r0, r4
   1588c:	bl	13938 <__assert_fail@plt+0x2850>
   15890:	mov	r5, r0
   15894:	b	155f8 <__assert_fail@plt+0x4510>
   15898:	bl	137d4 <__assert_fail@plt+0x26ec>
   1589c:	cmp	r0, #2
   158a0:	beq	157d8 <__assert_fail@plt+0x46f0>
   158a4:	ldr	r0, [r4, #4]
   158a8:	b	157d4 <__assert_fail@plt+0x46ec>
   158ac:	ldr	r0, [r5, #8]
   158b0:	bl	137d4 <__assert_fail@plt+0x26ec>
   158b4:	cmp	r0, #1
   158b8:	beq	158d4 <__assert_fail@plt+0x47ec>
   158bc:	ldrb	r3, [r5, #12]
   158c0:	cmp	r3, #0
   158c4:	beq	15920 <__assert_fail@plt+0x4838>
   158c8:	mov	r3, #1
   158cc:	str	r3, [sp, #4]
   158d0:	b	1571c <__assert_fail@plt+0x4634>
   158d4:	ldr	r2, [r5, #4]
   158d8:	ldr	r1, [fp, #108]	; 0x6c
   158dc:	ldr	r0, [pc, #196]	; 159a8 <__assert_fail@plt+0x48c0>
   158e0:	bl	135f4 <__assert_fail@plt+0x250c>
   158e4:	mov	r7, r0
   158e8:	bl	137d4 <__assert_fail@plt+0x26ec>
   158ec:	cmp	r0, #1
   158f0:	mov	r0, r7
   158f4:	beq	15718 <__assert_fail@plt+0x4630>
   158f8:	bl	10e78 <free@plt>
   158fc:	b	158bc <__assert_fail@plt+0x47d4>
   15900:	mov	r0, r7
   15904:	bl	10e78 <free@plt>
   15908:	mov	r0, sl
   1590c:	bl	10e78 <free@plt>
   15910:	b	158bc <__assert_fail@plt+0x47d4>
   15914:	bl	10e78 <free@plt>
   15918:	mov	r0, r5
   1591c:	bl	10e78 <free@plt>
   15920:	ldr	r1, [r4]
   15924:	ldr	r0, [pc, #156]	; 159c8 <__assert_fail@plt+0x48e0>
   15928:	bl	132c8 <__assert_fail@plt+0x21e0>
   1592c:	mov	r2, #5
   15930:	ldr	r1, [pc, #148]	; 159cc <__assert_fail@plt+0x48e4>
   15934:	mov	r0, #0
   15938:	bl	10ea8 <dcgettext@plt>
   1593c:	ldr	r2, [r4]
   15940:	mov	r1, r9
   15944:	bl	12c9c <__assert_fail@plt+0x1bb4>
   15948:	b	1575c <__assert_fail@plt+0x4674>
   1594c:	mov	r0, r4
   15950:	bl	139b4 <__assert_fail@plt+0x28cc>
   15954:	mov	r2, #5
   15958:	ldr	r1, [pc, #112]	; 159d0 <__assert_fail@plt+0x48e8>
   1595c:	mov	r6, r0
   15960:	mov	r0, r5
   15964:	bl	10ea8 <dcgettext@plt>
   15968:	mov	r1, r9
   1596c:	ldr	r2, [r6, #4]
   15970:	ldr	r3, [r4]
   15974:	bl	12c9c <__assert_fail@plt+0x1bb4>
   15978:	ldr	r9, [r6, #4]
   1597c:	mov	r1, #1
   15980:	mov	r0, r4
   15984:	bl	133e8 <__assert_fail@plt+0x2300>
   15988:	cmp	r9, #0
   1598c:	bne	15778 <__assert_fail@plt+0x4690>
   15990:	b	15504 <__assert_fail@plt+0x441c>
   15994:	andeq	r6, r1, r8, lsr #31
   15998:	ldrdeq	r6, [r1], -r0
   1599c:	strdeq	r6, [r1], -ip
   159a0:	andeq	r7, r1, r8, lsr #32
   159a4:	andeq	r9, r2, r8
   159a8:	andeq	r6, r1, r4, asr r8
   159ac:	andeq	r7, r1, r0, lsl r1
   159b0:	andeq	r7, r1, ip, lsr r1
   159b4:	andeq	r7, r1, ip, ror #1
   159b8:	andeq	r9, r2, ip, lsl #1
   159bc:	andeq	r6, r1, ip, lsl #31
   159c0:	strdeq	r6, [r1], -r4
   159c4:	andeq	r6, r1, r0, lsr #29
   159c8:	andeq	r7, r1, ip, lsr r0
   159cc:	andeq	r7, r1, r8, asr r0
   159d0:	andeq	r7, r1, r4, lsr #1
   159d4:	ldr	r3, [pc, #1640]	; 16044 <__assert_fail@plt+0x4f5c>
   159d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159dc:	sub	sp, sp, #572	; 0x23c
   159e0:	ldr	r3, [r3]
   159e4:	str	r0, [sp, #4]
   159e8:	add	r0, sp, #168	; 0xa8
   159ec:	str	r1, [sp, #8]
   159f0:	str	r3, [sp, #564]	; 0x234
   159f4:	bl	10e6c <_setjmp@plt>
   159f8:	subs	r4, r0, #0
   159fc:	beq	15a40 <__assert_fail@plt+0x4958>
   15a00:	ldr	r0, [sp, #144]	; 0x90
   15a04:	cmp	r0, #0
   15a08:	beq	15a10 <__assert_fail@plt+0x4928>
   15a0c:	bl	11028 <fclose@plt>
   15a10:	ldr	r0, [sp, #148]	; 0x94
   15a14:	bl	10e78 <free@plt>
   15a18:	ldr	r0, [sp, #4]
   15a1c:	bl	14f88 <__assert_fail@plt+0x3ea0>
   15a20:	mov	r0, #0
   15a24:	ldr	r3, [pc, #1560]	; 16044 <__assert_fail@plt+0x4f5c>
   15a28:	ldr	r2, [sp, #564]	; 0x234
   15a2c:	ldr	r3, [r3]
   15a30:	cmp	r2, r3
   15a34:	bne	15fc8 <__assert_fail@plt+0x4ee0>
   15a38:	add	sp, sp, #572	; 0x23c
   15a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a40:	ldr	r0, [sp, #8]
   15a44:	ldr	r2, [pc, #1532]	; 16048 <__assert_fail@plt+0x4f60>
   15a48:	cmp	r0, #1
   15a4c:	ldr	r3, [pc, #1528]	; 1604c <__assert_fail@plt+0x4f64>
   15a50:	ldr	r1, [pc, #1528]	; 16050 <__assert_fail@plt+0x4f68>
   15a54:	movne	r3, r2
   15a58:	ldr	r2, [sp, #4]
   15a5c:	ldr	r1, [r1, #16]
   15a60:	str	r0, [sp, #152]	; 0x98
   15a64:	ldr	r2, [r2]
   15a68:	ldr	r0, [pc, #1508]	; 16054 <__assert_fail@plt+0x4f6c>
   15a6c:	str	r3, [sp, #160]	; 0xa0
   15a70:	strb	r4, [sp, #156]	; 0x9c
   15a74:	bl	135f4 <__assert_fail@plt+0x250c>
   15a78:	ldr	r1, [pc, #1496]	; 16058 <__assert_fail@plt+0x4f70>
   15a7c:	str	r0, [sp, #148]	; 0x94
   15a80:	bl	11070 <fopen64@plt>
   15a84:	cmp	r0, #0
   15a88:	mov	r5, r0
   15a8c:	str	r0, [sp, #144]	; 0x90
   15a90:	beq	15bf8 <__assert_fail@plt+0x4b10>
   15a94:	bl	11010 <fileno@plt>
   15a98:	add	r2, sp, #40	; 0x28
   15a9c:	mov	r1, r0
   15aa0:	mov	r0, #3
   15aa4:	bl	10ef0 <__fxstat64@plt>
   15aa8:	cmn	r0, #1
   15aac:	beq	15ff4 <__assert_fail@plt+0x4f0c>
   15ab0:	ldrd	r2, [sp, #88]	; 0x58
   15ab4:	orrs	r3, r2, r3
   15ab8:	beq	15a20 <__assert_fail@plt+0x4938>
   15abc:	ldr	r0, [sp, #4]
   15ac0:	bl	14f88 <__assert_fail@plt+0x3ea0>
   15ac4:	mov	r2, #5
   15ac8:	ldr	r1, [pc, #1420]	; 1605c <__assert_fail@plt+0x4f74>
   15acc:	mov	r0, r4
   15ad0:	bl	10ea8 <dcgettext@plt>
   15ad4:	mov	r1, r0
   15ad8:	add	r0, sp, #144	; 0x90
   15adc:	bl	13178 <__assert_fail@plt+0x2090>
   15ae0:	ldr	r1, [pc, #1400]	; 16060 <__assert_fail@plt+0x4f78>
   15ae4:	mov	r5, r0
   15ae8:	bl	10e3c <strcmp@plt>
   15aec:	cmp	r0, #0
   15af0:	beq	15f20 <__assert_fail@plt+0x4e38>
   15af4:	ldr	r1, [pc, #1384]	; 16064 <__assert_fail@plt+0x4f7c>
   15af8:	mov	r0, r5
   15afc:	bl	10e3c <strcmp@plt>
   15b00:	cmp	r0, #0
   15b04:	moveq	r1, #2
   15b08:	bne	1600c <__assert_fail@plt+0x4f24>
   15b0c:	ldr	fp, [sp, #4]
   15b10:	ldr	r8, [pc, #1360]	; 16068 <__assert_fail@plt+0x4f80>
   15b14:	mov	r0, fp
   15b18:	bl	133e8 <__assert_fail@plt+0x2300>
   15b1c:	mov	r0, r5
   15b20:	bl	10e78 <free@plt>
   15b24:	mov	r2, #5
   15b28:	ldr	r1, [pc, #1340]	; 1606c <__assert_fail@plt+0x4f84>
   15b2c:	mov	r0, #0
   15b30:	bl	10ea8 <dcgettext@plt>
   15b34:	ldr	r9, [pc, #1332]	; 16070 <__assert_fail@plt+0x4f88>
   15b38:	mov	r7, #5
   15b3c:	mov	r1, r0
   15b40:	add	r0, sp, #144	; 0x90
   15b44:	bl	13178 <__assert_fail@plt+0x2090>
   15b48:	add	r2, fp, #32
   15b4c:	mov	r1, r2
   15b50:	str	r2, [sp, #28]
   15b54:	mov	r4, r0
   15b58:	mov	r2, r0
   15b5c:	add	r0, fp, #4
   15b60:	bl	141f4 <__assert_fail@plt+0x310c>
   15b64:	mov	r0, r4
   15b68:	bl	10e78 <free@plt>
   15b6c:	mov	r2, r7
   15b70:	mov	r1, r8
   15b74:	mov	r0, #0
   15b78:	bl	10ea8 <dcgettext@plt>
   15b7c:	mov	r1, r0
   15b80:	add	r0, sp, #144	; 0x90
   15b84:	bl	13178 <__assert_fail@plt+0x2090>
   15b88:	ldrb	r4, [r0]
   15b8c:	mov	r5, r0
   15b90:	cmp	r4, #0
   15b94:	beq	15ca0 <__assert_fail@plt+0x4bb8>
   15b98:	ldr	r4, [fp, #16]
   15b9c:	cmp	r4, #0
   15ba0:	bne	15bb4 <__assert_fail@plt+0x4acc>
   15ba4:	b	15c20 <__assert_fail@plt+0x4b38>
   15ba8:	ldr	r4, [r4]
   15bac:	cmp	r4, #0
   15bb0:	beq	15c20 <__assert_fail@plt+0x4b38>
   15bb4:	mov	r1, r5
   15bb8:	ldr	r0, [r4, #4]
   15bbc:	bl	10e3c <strcmp@plt>
   15bc0:	cmp	r0, #0
   15bc4:	bne	15ba8 <__assert_fail@plt+0x4ac0>
   15bc8:	mov	r6, r0
   15bcc:	mov	r0, r5
   15bd0:	bl	10e78 <free@plt>
   15bd4:	mov	r2, #5
   15bd8:	ldr	r1, [pc, #1172]	; 16074 <__assert_fail@plt+0x4f8c>
   15bdc:	mov	r0, r6
   15be0:	ldr	r5, [sp, #160]	; 0xa0
   15be4:	bl	10ea8 <dcgettext@plt>
   15be8:	ldr	r2, [r4, #4]
   15bec:	mov	r1, r0
   15bf0:	add	r0, sp, #144	; 0x90
   15bf4:	blx	r5
   15bf8:	bl	10fd4 <__errno_location@plt>
   15bfc:	ldr	r3, [r0]
   15c00:	cmp	r3, #2
   15c04:	beq	15a20 <__assert_fail@plt+0x4938>
   15c08:	ldr	r1, [pc, #1128]	; 16078 <__assert_fail@plt+0x4f90>
   15c0c:	mov	r0, r5
   15c10:	mov	r2, #5
   15c14:	bl	10ea8 <dcgettext@plt>
   15c18:	ldr	r1, [sp, #148]	; 0x94
   15c1c:	bl	12dfc <__assert_fail@plt+0x1d14>
   15c20:	mov	r2, r7
   15c24:	mov	r1, r9
   15c28:	mov	r0, #0
   15c2c:	bl	10ea8 <dcgettext@plt>
   15c30:	mov	r1, r0
   15c34:	add	r0, sp, #144	; 0x90
   15c38:	bl	13178 <__assert_fail@plt+0x2090>
   15c3c:	ldr	r1, [fp, #4]
   15c40:	mov	r6, r0
   15c44:	bl	10e3c <strcmp@plt>
   15c48:	cmp	r0, #0
   15c4c:	beq	15f60 <__assert_fail@plt+0x4e78>
   15c50:	ldr	r4, [fp, #16]
   15c54:	cmp	r4, #0
   15c58:	beq	15c7c <__assert_fail@plt+0x4b94>
   15c5c:	ldr	r1, [r4, #8]
   15c60:	mov	r0, r6
   15c64:	bl	10e3c <strcmp@plt>
   15c68:	cmp	r0, #0
   15c6c:	beq	15f28 <__assert_fail@plt+0x4e40>
   15c70:	ldr	r4, [r4]
   15c74:	cmp	r4, #0
   15c78:	bne	15c5c <__assert_fail@plt+0x4b74>
   15c7c:	mov	r2, r6
   15c80:	mov	r1, r5
   15c84:	add	r0, fp, #16
   15c88:	bl	14244 <__assert_fail@plt+0x315c>
   15c8c:	mov	r0, r6
   15c90:	bl	10e78 <free@plt>
   15c94:	mov	r0, r5
   15c98:	bl	10e78 <free@plt>
   15c9c:	b	15b6c <__assert_fail@plt+0x4a84>
   15ca0:	bl	10e78 <free@plt>
   15ca4:	ldr	sl, [pc, #976]	; 1607c <__assert_fail@plt+0x4f94>
   15ca8:	ldr	r9, [pc, #976]	; 16080 <__assert_fail@plt+0x4f98>
   15cac:	mov	r7, #5
   15cb0:	mov	r2, r7
   15cb4:	mov	r1, sl
   15cb8:	mov	r0, r4
   15cbc:	bl	10ea8 <dcgettext@plt>
   15cc0:	mov	r1, r0
   15cc4:	add	r0, sp, #144	; 0x90
   15cc8:	bl	13178 <__assert_fail@plt+0x2090>
   15ccc:	ldrb	r6, [r0]
   15cd0:	mov	r5, r0
   15cd4:	cmp	r6, #0
   15cd8:	beq	15ecc <__assert_fail@plt+0x4de4>
   15cdc:	ldr	r3, [sp, #4]
   15ce0:	ldr	r6, [r3, #20]
   15ce4:	cmp	r6, #0
   15ce8:	bne	15cfc <__assert_fail@plt+0x4c14>
   15cec:	b	15d30 <__assert_fail@plt+0x4c48>
   15cf0:	ldr	r6, [r6]
   15cf4:	cmp	r6, #0
   15cf8:	beq	15d30 <__assert_fail@plt+0x4c48>
   15cfc:	mov	r1, r5
   15d00:	ldr	r0, [r6, #4]
   15d04:	bl	10e3c <strcmp@plt>
   15d08:	cmp	r0, #0
   15d0c:	bne	15cf0 <__assert_fail@plt+0x4c08>
   15d10:	mov	r2, #5
   15d14:	ldr	r1, [pc, #872]	; 16084 <__assert_fail@plt+0x4f9c>
   15d18:	ldr	r4, [sp, #160]	; 0xa0
   15d1c:	bl	10ea8 <dcgettext@plt>
   15d20:	mov	r2, r5
   15d24:	mov	r1, r0
   15d28:	add	r0, sp, #144	; 0x90
   15d2c:	blx	r4
   15d30:	mov	r0, r5
   15d34:	bl	1370c <__assert_fail@plt+0x2624>
   15d38:	subs	r6, r0, #0
   15d3c:	beq	15dbc <__assert_fail@plt+0x4cd4>
   15d40:	ldr	r3, [sp, #152]	; 0x98
   15d44:	tst	r3, #2
   15d48:	bne	15efc <__assert_fail@plt+0x4e14>
   15d4c:	mov	r2, r7
   15d50:	ldr	r1, [pc, #816]	; 16088 <__assert_fail@plt+0x4fa0>
   15d54:	mov	r0, r4
   15d58:	bl	10ea8 <dcgettext@plt>
   15d5c:	mov	r1, r0
   15d60:	add	r0, sp, #144	; 0x90
   15d64:	bl	13178 <__assert_fail@plt+0x2090>
   15d68:	bl	10e78 <free@plt>
   15d6c:	ldr	r3, [sp, #4]
   15d70:	ldr	r6, [r3, #16]
   15d74:	cmp	r6, #0
   15d78:	beq	15da8 <__assert_fail@plt+0x4cc0>
   15d7c:	mov	r2, r7
   15d80:	mov	r1, r9
   15d84:	mov	r0, r4
   15d88:	bl	10ea8 <dcgettext@plt>
   15d8c:	mov	r1, r0
   15d90:	add	r0, sp, #144	; 0x90
   15d94:	bl	13178 <__assert_fail@plt+0x2090>
   15d98:	bl	10e78 <free@plt>
   15d9c:	ldr	r6, [r6]
   15da0:	cmp	r6, #0
   15da4:	bne	15d7c <__assert_fail@plt+0x4c94>
   15da8:	mov	r3, #1
   15dac:	strb	r3, [sp, #156]	; 0x9c
   15db0:	mov	r0, r5
   15db4:	bl	10e78 <free@plt>
   15db8:	b	15cb0 <__assert_fail@plt+0x4bc8>
   15dbc:	mov	r2, r7
   15dc0:	ldr	r1, [pc, #704]	; 16088 <__assert_fail@plt+0x4fa0>
   15dc4:	bl	10ea8 <dcgettext@plt>
   15dc8:	mov	r1, r0
   15dcc:	add	r0, sp, #144	; 0x90
   15dd0:	bl	13178 <__assert_fail@plt+0x2090>
   15dd4:	mov	r8, r0
   15dd8:	bl	10fd4 <__errno_location@plt>
   15ddc:	mov	r2, #10
   15de0:	add	r1, sp, #36	; 0x24
   15de4:	str	r6, [r0]
   15de8:	str	r0, [sp, #12]
   15dec:	mov	r0, r8
   15df0:	bl	10e48 <strtol@plt>
   15df4:	ldr	r6, [sp, #36]	; 0x24
   15df8:	cmp	r8, r6
   15dfc:	beq	15fa0 <__assert_fail@plt+0x4eb8>
   15e00:	ldrb	r2, [r6]
   15e04:	ldr	r3, [sp, #12]
   15e08:	cmp	r2, #0
   15e0c:	bne	15f9c <__assert_fail@plt+0x4eb4>
   15e10:	ldr	r3, [r3]
   15e14:	cmp	r3, #34	; 0x22
   15e18:	beq	15fcc <__assert_fail@plt+0x4ee4>
   15e1c:	str	r0, [sp, #20]
   15e20:	mov	r0, r8
   15e24:	str	r2, [sp, #24]
   15e28:	bl	10e78 <free@plt>
   15e2c:	mov	r0, #16
   15e30:	bl	130c8 <__assert_fail@plt+0x1fe0>
   15e34:	ldr	r2, [sp, #24]
   15e38:	str	r2, [sp, #16]
   15e3c:	mov	r8, r0
   15e40:	mov	r0, r5
   15e44:	str	r2, [r8]
   15e48:	bl	13d00 <__assert_fail@plt+0x2c18>
   15e4c:	ldr	r3, [sp, #4]
   15e50:	ldr	r1, [sp, #20]
   15e54:	ldr	r2, [sp, #16]
   15e58:	ldr	r6, [r3, #16]
   15e5c:	str	r1, [r8, #8]
   15e60:	cmp	r6, #0
   15e64:	str	r2, [r8, #12]
   15e68:	str	r0, [r8, #4]
   15e6c:	beq	15eb4 <__assert_fail@plt+0x4dcc>
   15e70:	mov	r2, r7
   15e74:	mov	r1, r9
   15e78:	mov	r0, r4
   15e7c:	bl	10ea8 <dcgettext@plt>
   15e80:	mov	r1, r0
   15e84:	add	r0, sp, #144	; 0x90
   15e88:	bl	13178 <__assert_fail@plt+0x2090>
   15e8c:	ldr	r1, [r6, #4]
   15e90:	mov	r2, r0
   15e94:	mov	fp, r0
   15e98:	add	r0, r8, #12
   15e9c:	bl	14318 <__assert_fail@plt+0x3230>
   15ea0:	mov	r0, fp
   15ea4:	bl	10e78 <free@plt>
   15ea8:	ldr	r6, [r6]
   15eac:	cmp	r6, #0
   15eb0:	bne	15e70 <__assert_fail@plt+0x4d88>
   15eb4:	ldr	r3, [sp, #4]
   15eb8:	mov	r2, r8
   15ebc:	ldr	r1, [sp, #28]
   15ec0:	add	r0, r3, #20
   15ec4:	bl	13860 <__assert_fail@plt+0x2778>
   15ec8:	b	15db0 <__assert_fail@plt+0x4cc8>
   15ecc:	bl	10e78 <free@plt>
   15ed0:	ldr	r0, [sp, #144]	; 0x90
   15ed4:	bl	11028 <fclose@plt>
   15ed8:	cmp	r0, #0
   15edc:	bne	1602c <__assert_fail@plt+0x4f44>
   15ee0:	ldr	r0, [sp, #148]	; 0x94
   15ee4:	bl	10e78 <free@plt>
   15ee8:	ldrb	r3, [sp, #156]	; 0x9c
   15eec:	ldr	r2, [sp, #4]
   15ef0:	mov	r0, #1
   15ef4:	strb	r3, [r2, #32]
   15ef8:	b	15a24 <__assert_fail@plt+0x493c>
   15efc:	mov	r2, r7
   15f00:	ldr	r1, [pc, #388]	; 1608c <__assert_fail@plt+0x4fa4>
   15f04:	mov	r0, r4
   15f08:	bl	10ea8 <dcgettext@plt>
   15f0c:	ldr	r3, [sp, #4]
   15f10:	mov	r1, r5
   15f14:	ldr	r2, [r3]
   15f18:	bl	12c9c <__assert_fail@plt+0x1bb4>
   15f1c:	b	15d4c <__assert_fail@plt+0x4c64>
   15f20:	mov	r1, #1
   15f24:	b	15b0c <__assert_fail@plt+0x4a24>
   15f28:	mov	sl, r0
   15f2c:	mov	r0, r6
   15f30:	bl	10e78 <free@plt>
   15f34:	mov	r0, r5
   15f38:	bl	10e78 <free@plt>
   15f3c:	mov	r2, #5
   15f40:	ldr	r1, [pc, #328]	; 16090 <__assert_fail@plt+0x4fa8>
   15f44:	mov	r0, sl
   15f48:	ldr	r5, [sp, #160]	; 0xa0
   15f4c:	bl	10ea8 <dcgettext@plt>
   15f50:	ldr	r2, [r4, #8]
   15f54:	mov	r1, r0
   15f58:	add	r0, sp, #144	; 0x90
   15f5c:	blx	r5
   15f60:	mov	r4, r0
   15f64:	mov	r0, r6
   15f68:	bl	10e78 <free@plt>
   15f6c:	mov	r0, r5
   15f70:	bl	10e78 <free@plt>
   15f74:	mov	r0, r4
   15f78:	mov	r2, #5
   15f7c:	ldr	r1, [pc, #272]	; 16094 <__assert_fail@plt+0x4fac>
   15f80:	ldr	r4, [sp, #160]	; 0xa0
   15f84:	bl	10ea8 <dcgettext@plt>
   15f88:	ldr	r3, [sp, #4]
   15f8c:	ldr	r2, [r3, #4]
   15f90:	mov	r1, r0
   15f94:	add	r0, sp, #144	; 0x90
   15f98:	blx	r4
   15f9c:	mov	r6, r8
   15fa0:	mov	r2, #5
   15fa4:	ldr	r1, [pc, #236]	; 16098 <__assert_fail@plt+0x4fb0>
   15fa8:	mov	r0, #0
   15fac:	ldr	r4, [sp, #160]	; 0xa0
   15fb0:	bl	10ea8 <dcgettext@plt>
   15fb4:	mov	r3, r6
   15fb8:	mov	r2, r5
   15fbc:	mov	r1, r0
   15fc0:	add	r0, sp, #144	; 0x90
   15fc4:	blx	r4
   15fc8:	bl	10ec0 <__stack_chk_fail@plt>
   15fcc:	mov	r0, r2
   15fd0:	ldr	r1, [pc, #196]	; 1609c <__assert_fail@plt+0x4fb4>
   15fd4:	mov	r2, #5
   15fd8:	ldr	r4, [sp, #160]	; 0xa0
   15fdc:	bl	10ea8 <dcgettext@plt>
   15fe0:	mov	r3, r8
   15fe4:	mov	r2, r5
   15fe8:	mov	r1, r0
   15fec:	add	r0, sp, #144	; 0x90
   15ff0:	blx	r4
   15ff4:	ldr	r1, [pc, #164]	; 160a0 <__assert_fail@plt+0x4fb8>
   15ff8:	mov	r0, r4
   15ffc:	mov	r2, #5
   16000:	bl	10ea8 <dcgettext@plt>
   16004:	ldr	r1, [sp, #148]	; 0x94
   16008:	bl	12dfc <__assert_fail@plt+0x1d14>
   1600c:	mov	r0, r4
   16010:	ldr	r1, [pc, #140]	; 160a4 <__assert_fail@plt+0x4fbc>
   16014:	mov	r2, #5
   16018:	ldr	r4, [sp, #160]	; 0xa0
   1601c:	bl	10ea8 <dcgettext@plt>
   16020:	mov	r1, r0
   16024:	add	r0, sp, #144	; 0x90
   16028:	blx	r4
   1602c:	ldr	r1, [pc, #116]	; 160a8 <__assert_fail@plt+0x4fc0>
   16030:	mov	r0, r6
   16034:	mov	r2, #5
   16038:	bl	10ea8 <dcgettext@plt>
   1603c:	ldr	r1, [sp, #148]	; 0x94
   16040:	bl	12dfc <__assert_fail@plt+0x1d14>
   16044:	andeq	r8, r2, r0, lsl #28
   16048:	andeq	r3, r1, r8, asr #12
   1604c:	andeq	r3, r1, r4, ror #2
   16050:	andeq	r9, r2, ip, lsl #1
   16054:	andeq	r6, r1, r4, asr r8
   16058:	andeq	r6, r1, r4, lsr r6
   1605c:	andeq	r7, r1, r8, lsr #3
   16060:	andeq	r8, r1, r0, lsr #32
   16064:	andeq	r6, r1, r0, asr r7
   16068:			; <UNDEFINED> instruction: 0x000171bc
   1606c:			; <UNDEFINED> instruction: 0x000171b0
   16070:	andeq	r7, r1, r4, ror #5
   16074:	andeq	r7, r1, ip, asr #5
   16078:	andeq	r7, r1, r4, lsl #3
   1607c:	andeq	r7, r1, r0, lsl #4
   16080:	andeq	r7, r1, r4, ror r2
   16084:			; <UNDEFINED> instruction: 0x000172b8
   16088:	andeq	r7, r1, ip, lsl #4
   1608c:	andeq	r7, r1, r8, lsl r2
   16090:	andeq	r7, r1, r8, ror #3
   16094:	andeq	r7, r1, r8, asr #3
   16098:	andeq	r7, r1, r0, lsl #5
   1609c:	muleq	r1, r4, r2
   160a0:	andeq	r6, r1, ip, lsr r8
   160a4:	andeq	r7, r1, r0, lsr #3
   160a8:	andeq	r6, r1, ip, asr lr
   160ac:	push	{r4, r5, r6, r7, r8, lr}
   160b0:	sub	sp, sp, #8
   160b4:	ldr	r8, [pc, #196]	; 16180 <__assert_fail@plt+0x5098>
   160b8:	mov	r6, r0
   160bc:	mov	r0, sp
   160c0:	ldr	r3, [r8]
   160c4:	str	r3, [sp, #4]
   160c8:	bl	14618 <__assert_fail@plt+0x3530>
   160cc:	subs	r7, r0, #0
   160d0:	ble	16150 <__assert_fail@plt+0x5068>
   160d4:	mov	r4, #0
   160d8:	b	16104 <__assert_fail@plt+0x501c>
   160dc:	ldr	r3, [r6, #4]
   160e0:	ldr	r1, [r5]
   160e4:	cmp	r3, #0
   160e8:	beq	16174 <__assert_fail@plt+0x508c>
   160ec:	mov	r2, r5
   160f0:	mov	r0, r6
   160f4:	bl	138f4 <__assert_fail@plt+0x280c>
   160f8:	add	r4, r4, #1
   160fc:	cmp	r7, r4
   16100:	beq	16150 <__assert_fail@plt+0x5068>
   16104:	ldr	r3, [sp]
   16108:	ldr	r0, [r3, r4, lsl #2]
   1610c:	add	r0, r0, #19
   16110:	bl	13d24 <__assert_fail@plt+0x2c3c>
   16114:	mov	r1, #1
   16118:	mov	r5, r0
   1611c:	bl	159d4 <__assert_fail@plt+0x48ec>
   16120:	cmp	r0, #0
   16124:	bne	160dc <__assert_fail@plt+0x4ff4>
   16128:	ldr	r3, [r5, #28]
   1612c:	sub	r3, r3, #1
   16130:	cmp	r3, #0
   16134:	str	r3, [r5, #28]
   16138:	bne	160f8 <__assert_fail@plt+0x5010>
   1613c:	mov	r0, r5
   16140:	add	r4, r4, #1
   16144:	bl	15054 <__assert_fail@plt+0x3f6c>
   16148:	cmp	r7, r4
   1614c:	bne	16104 <__assert_fail@plt+0x501c>
   16150:	mov	r1, r7
   16154:	ldr	r0, [sp]
   16158:	bl	1304c <__assert_fail@plt+0x1f64>
   1615c:	ldr	r2, [sp, #4]
   16160:	ldr	r3, [r8]
   16164:	cmp	r2, r3
   16168:	bne	1617c <__assert_fail@plt+0x5094>
   1616c:	add	sp, sp, #8
   16170:	pop	{r4, r5, r6, r7, r8, pc}
   16174:	stmib	r6, {r1, r5}
   16178:	b	160f8 <__assert_fail@plt+0x5010>
   1617c:	bl	10ec0 <__stack_chk_fail@plt>
   16180:	andeq	r8, r2, r0, lsl #28
   16184:	ldr	r3, [pc, #848]	; 164dc <__assert_fail@plt+0x53f4>
   16188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1618c:	sub	sp, sp, #1040	; 0x410
   16190:	sub	sp, sp, #4
   16194:	ldr	r3, [r3]
   16198:	mov	r7, r0
   1619c:	mov	r0, #12
   161a0:	str	r1, [sp, #4]
   161a4:	str	r3, [sp, #1036]	; 0x40c
   161a8:	bl	130c8 <__assert_fail@plt+0x1fe0>
   161ac:	mov	r3, #0
   161b0:	ldr	sl, [pc, #808]	; 164e0 <__assert_fail@plt+0x53f8>
   161b4:	ldr	r9, [pc, #808]	; 164e4 <__assert_fail@plt+0x53fc>
   161b8:	ldr	r8, [pc, #808]	; 164e8 <__assert_fail@plt+0x5400>
   161bc:	str	r3, [r0]
   161c0:	str	r3, [r0, #4]
   161c4:	str	r3, [r0, #8]
   161c8:	str	r0, [sp]
   161cc:	bl	160ac <__assert_fail@plt+0x4fc4>
   161d0:	bl	10fd4 <__errno_location@plt>
   161d4:	mov	r6, r0
   161d8:	mov	r5, #0
   161dc:	str	r5, [r6]
   161e0:	mov	r2, r7
   161e4:	mov	r1, #1024	; 0x400
   161e8:	add	r0, sp, #12
   161ec:	bl	10e84 <fgets@plt>
   161f0:	cmp	r0, r5
   161f4:	beq	1640c <__assert_fail@plt+0x5324>
   161f8:	add	r0, sp, #12
   161fc:	bl	10fbc <strlen@plt>
   16200:	cmp	r0, #0
   16204:	beq	164ac <__assert_fail@plt+0x53c4>
   16208:	sub	r4, r0, #1
   1620c:	add	r3, sp, #1040	; 0x410
   16210:	add	r3, r3, r4
   16214:	ldrb	r2, [r3, #-1028]	; 0xfffffbfc
   16218:	cmp	r2, #10
   1621c:	bne	164ac <__assert_fail@plt+0x53c4>
   16220:	cmp	r4, #0
   16224:	strb	r5, [r3, #-1028]	; 0xfffffbfc
   16228:	beq	163dc <__assert_fail@plt+0x52f4>
   1622c:	bl	10f98 <__ctype_b_loc@plt>
   16230:	mov	r1, r5
   16234:	add	ip, sp, #11
   16238:	ldr	r0, [r0]
   1623c:	b	1624c <__assert_fail@plt+0x5164>
   16240:	cmp	r4, r2
   16244:	mov	r1, r2
   16248:	beq	163dc <__assert_fail@plt+0x52f4>
   1624c:	ldrb	r3, [ip, #1]!
   16250:	add	r2, r1, #1
   16254:	lsl	r3, r3, #1
   16258:	ldrh	r3, [r0, r3]
   1625c:	tst	r3, #1
   16260:	beq	16240 <__assert_fail@plt+0x5158>
   16264:	add	r3, sp, #1040	; 0x410
   16268:	add	r1, r3, r1
   1626c:	cmp	r4, r2
   16270:	mov	r3, #0
   16274:	strb	r3, [r1, #-1028]	; 0xfffffbfc
   16278:	bls	163dc <__assert_fail@plt+0x52f4>
   1627c:	add	r3, sp, #12
   16280:	add	r1, r3, r2
   16284:	b	16294 <__assert_fail@plt+0x51ac>
   16288:	add	r2, r2, #1
   1628c:	cmp	r4, r2
   16290:	beq	163dc <__assert_fail@plt+0x52f4>
   16294:	ldrb	r3, [r1], #1
   16298:	lsl	r3, r3, #1
   1629c:	ldrh	r3, [r0, r3]
   162a0:	ands	r3, r3, #1
   162a4:	bne	16288 <__assert_fail@plt+0x51a0>
   162a8:	cmp	r4, r2
   162ac:	bls	163dc <__assert_fail@plt+0x52f4>
   162b0:	add	r1, sp, #12
   162b4:	add	ip, r1, r2
   162b8:	mov	r1, r2
   162bc:	b	162dc <__assert_fail@plt+0x51f4>
   162c0:	add	r1, r1, #1
   162c4:	cmp	r4, r1
   162c8:	beq	163dc <__assert_fail@plt+0x52f4>
   162cc:	ldrb	r3, [ip, #1]!
   162d0:	lsl	r3, r3, #1
   162d4:	ldrh	r3, [r0, r3]
   162d8:	and	r3, r3, #1
   162dc:	cmp	r3, #0
   162e0:	beq	162c0 <__assert_fail@plt+0x51d8>
   162e4:	cmp	r4, r1
   162e8:	bls	163dc <__assert_fail@plt+0x52f4>
   162ec:	add	r3, sp, #1040	; 0x410
   162f0:	add	ip, r1, #1
   162f4:	add	r3, r3, r1
   162f8:	mov	lr, #0
   162fc:	cmp	r4, ip
   16300:	strb	lr, [r3, #-1028]	; 0xfffffbfc
   16304:	bls	163dc <__assert_fail@plt+0x52f4>
   16308:	add	r3, sp, #12
   1630c:	add	r1, r3, r1
   16310:	b	16320 <__assert_fail@plt+0x5238>
   16314:	add	ip, ip, #1
   16318:	cmp	r4, ip
   1631c:	beq	163dc <__assert_fail@plt+0x52f4>
   16320:	ldrb	r3, [r1, #1]!
   16324:	lsl	r3, r3, #1
   16328:	ldrh	r3, [r0, r3]
   1632c:	tst	r3, #1
   16330:	bne	16314 <__assert_fail@plt+0x522c>
   16334:	cmp	r4, ip
   16338:	bls	163dc <__assert_fail@plt+0x52f4>
   1633c:	add	r3, sp, #12
   16340:	add	r4, r3, ip
   16344:	add	r5, r3, r2
   16348:	mov	r1, r8
   1634c:	mov	r3, sl
   16350:	mov	r2, r9
   16354:	mov	r0, #1
   16358:	bl	11004 <__printf_chk@plt>
   1635c:	mov	r3, r4
   16360:	mov	r2, r5
   16364:	add	r1, sp, #12
   16368:	ldr	r0, [pc, #380]	; 164ec <__assert_fail@plt+0x5404>
   1636c:	bl	12d5c <__assert_fail@plt+0x1c74>
   16370:	add	r1, sp, #12
   16374:	ldr	r0, [sp]
   16378:	bl	12abc <__assert_fail@plt+0x19d4>
   1637c:	subs	fp, r0, #0
   16380:	beq	16494 <__assert_fail@plt+0x53ac>
   16384:	mov	r0, r5
   16388:	ldr	r1, [pc, #352]	; 164f0 <__assert_fail@plt+0x5408>
   1638c:	bl	10e3c <strcmp@plt>
   16390:	cmp	r0, #0
   16394:	bne	16440 <__assert_fail@plt+0x5358>
   16398:	mov	r0, fp
   1639c:	bl	14778 <__assert_fail@plt+0x3690>
   163a0:	mov	r4, r0
   163a4:	cmp	r4, #0
   163a8:	beq	161d8 <__assert_fail@plt+0x50f0>
   163ac:	ldrb	r3, [fp, #33]	; 0x21
   163b0:	cmp	r3, #0
   163b4:	beq	16468 <__assert_fail@plt+0x5380>
   163b8:	ldr	r5, [fp, #8]
   163bc:	mov	r1, r5
   163c0:	mov	r0, fp
   163c4:	bl	14664 <__assert_fail@plt+0x357c>
   163c8:	mov	r2, r4
   163cc:	mov	r1, r5
   163d0:	mov	r0, fp
   163d4:	bl	15470 <__assert_fail@plt+0x4388>
   163d8:	b	161d8 <__assert_fail@plt+0x50f0>
   163dc:	mov	r3, sl
   163e0:	mov	r2, r9
   163e4:	mov	r1, r8
   163e8:	mov	r0, #1
   163ec:	bl	11004 <__printf_chk@plt>
   163f0:	mov	r2, #5
   163f4:	ldr	r1, [pc, #248]	; 164f4 <__assert_fail@plt+0x540c>
   163f8:	mov	r0, #0
   163fc:	bl	10ea8 <dcgettext@plt>
   16400:	add	r1, sp, #12
   16404:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   16408:	b	161d8 <__assert_fail@plt+0x50f0>
   1640c:	ldr	r3, [r6]
   16410:	cmp	r3, r5
   16414:	bne	164c8 <__assert_fail@plt+0x53e0>
   16418:	ldr	r0, [sp]
   1641c:	bl	15074 <__assert_fail@plt+0x3f8c>
   16420:	ldr	r3, [pc, #180]	; 164dc <__assert_fail@plt+0x53f4>
   16424:	ldr	r2, [sp, #1036]	; 0x40c
   16428:	ldr	r3, [r3]
   1642c:	cmp	r2, r3
   16430:	bne	164c4 <__assert_fail@plt+0x53dc>
   16434:	add	sp, sp, #1040	; 0x410
   16438:	add	sp, sp, #4
   1643c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16440:	mov	r1, r4
   16444:	mov	r0, fp
   16448:	bl	12b08 <__assert_fail@plt+0x1a20>
   1644c:	cmp	r0, #0
   16450:	beq	16478 <__assert_fail@plt+0x5390>
   16454:	mov	r1, r4
   16458:	mov	r0, fp
   1645c:	bl	14730 <__assert_fail@plt+0x3648>
   16460:	mov	r4, r0
   16464:	b	163a4 <__assert_fail@plt+0x52bc>
   16468:	mov	r0, fp
   1646c:	bl	13938 <__assert_fail@plt+0x2850>
   16470:	mov	r5, r0
   16474:	b	163bc <__assert_fail@plt+0x52d4>
   16478:	mov	r2, #5
   1647c:	ldr	r1, [pc, #116]	; 164f8 <__assert_fail@plt+0x5410>
   16480:	bl	10ea8 <dcgettext@plt>
   16484:	mov	r2, r4
   16488:	add	r1, sp, #12
   1648c:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   16490:	b	161d8 <__assert_fail@plt+0x50f0>
   16494:	mov	r2, #5
   16498:	ldr	r1, [pc, #92]	; 164fc <__assert_fail@plt+0x5414>
   1649c:	bl	10ea8 <dcgettext@plt>
   164a0:	add	r1, sp, #12
   164a4:	bl	12ea8 <__assert_fail@plt+0x1dc0>
   164a8:	b	161d8 <__assert_fail@plt+0x50f0>
   164ac:	ldr	r1, [pc, #76]	; 16500 <__assert_fail@plt+0x5418>
   164b0:	mov	r2, #5
   164b4:	mov	r0, #0
   164b8:	bl	10ea8 <dcgettext@plt>
   164bc:	ldr	r1, [sp, #4]
   164c0:	bl	12c0c <__assert_fail@plt+0x1b24>
   164c4:	bl	10ec0 <__stack_chk_fail@plt>
   164c8:	ldr	r1, [pc, #52]	; 16504 <__assert_fail@plt+0x541c>
   164cc:	mov	r2, #5
   164d0:	bl	10ea8 <dcgettext@plt>
   164d4:	ldr	r1, [sp, #4]
   164d8:	bl	12dfc <__assert_fail@plt+0x1d14>
   164dc:	andeq	r8, r2, r0, lsl #28
   164e0:	andeq	r7, r1, r0, asr #6
   164e4:	andeq	r6, r1, ip, ror #11
   164e8:	andeq	r7, r1, r4, asr r3
   164ec:	andeq	r7, r1, r8, ror r3
   164f0:	andeq	r8, r1, r0, lsr #32
   164f4:	andeq	r7, r1, r0, ror #6
   164f8:	muleq	r1, r4, r3
   164fc:	ldrdeq	r7, [r1], -r4
   16500:	andeq	r7, r1, r8, lsl #6
   16504:	strdeq	r7, [r1], -r0
   16508:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1650c:	mov	r7, r0
   16510:	ldr	r6, [pc, #72]	; 16560 <__assert_fail@plt+0x5478>
   16514:	ldr	r5, [pc, #72]	; 16564 <__assert_fail@plt+0x547c>
   16518:	add	r6, pc, r6
   1651c:	add	r5, pc, r5
   16520:	sub	r6, r6, r5
   16524:	mov	r8, r1
   16528:	mov	r9, r2
   1652c:	bl	10e10 <fsync@plt-0x20>
   16530:	asrs	r6, r6, #2
   16534:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16538:	mov	r4, #0
   1653c:	add	r4, r4, #1
   16540:	ldr	r3, [r5], #4
   16544:	mov	r2, r9
   16548:	mov	r1, r8
   1654c:	mov	r0, r7
   16550:	blx	r3
   16554:	cmp	r6, r4
   16558:	bne	1653c <__assert_fail@plt+0x5454>
   1655c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16560:	ldrdeq	r2, [r1], -ip
   16564:	ldrdeq	r2, [r1], -r4
   16568:	bx	lr

Disassembly of section .fini:

0001656c <.fini>:
   1656c:	push	{r3, lr}
   16570:	pop	{r3, pc}
