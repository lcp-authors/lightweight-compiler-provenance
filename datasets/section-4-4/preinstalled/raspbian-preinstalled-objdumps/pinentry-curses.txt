
raspbian-preinstalled/pinentry-curses:     file format elf32-littlearm


Disassembly of section .init:

000118b4 <.init>:
   118b4:	push	{r3, lr}
   118b8:	bl	11e9c <__assert_fail@plt+0x7c>
   118bc:	pop	{r3, pc}

Disassembly of section .plt:

000118c0 <start_color@plt-0x14>:
   118c0:	push	{lr}		; (str lr, [sp, #-4]!)
   118c4:	ldr	lr, [pc, #4]	; 118d0 <start_color@plt-0x4>
   118c8:	add	lr, pc, lr
   118cc:	ldr	pc, [lr, #8]!
   118d0:	andeq	r9, r1, r4, asr r5

000118d4 <start_color@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #102400	; 0x19000
   118dc:	ldr	pc, [ip, #1364]!	; 0x554

000118e0 <use_default_colors@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #102400	; 0x19000
   118e8:	ldr	pc, [ip, #1356]!	; 0x54c

000118ec <calloc@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #102400	; 0x19000
   118f4:	ldr	pc, [ip, #1348]!	; 0x544

000118f8 <noecho@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #102400	; 0x19000
   11900:	ldr	pc, [ip, #1340]!	; 0x53c

00011904 <strstr@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #102400	; 0x19000
   1190c:	ldr	pc, [ip, #1332]!	; 0x534

00011910 <wmove@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #102400	; 0x19000
   11918:	ldr	pc, [ip, #1324]!	; 0x52c

0001191c <iconv_close@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #102400	; 0x19000
   11924:	ldr	pc, [ip, #1316]!	; 0x524

00011928 <iconv@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #102400	; 0x19000
   11930:	ldr	pc, [ip, #1308]!	; 0x51c

00011934 <mbsrtowcs@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #102400	; 0x19000
   1193c:	ldr	pc, [ip, #1300]!	; 0x514

00011940 <strcmp@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #102400	; 0x19000
   11948:	ldr	pc, [ip, #1292]!	; 0x50c

0001194c <strtol@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #102400	; 0x19000
   11954:	ldr	pc, [ip, #1284]!	; 0x504

00011958 <strcspn@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #102400	; 0x19000
   11960:	ldr	pc, [ip, #1276]!	; 0x4fc

00011964 <wattr_on@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #102400	; 0x19000
   1196c:	ldr	pc, [ip, #1268]!	; 0x4f4

00011970 <fopen@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #102400	; 0x19000
   11978:	ldr	pc, [ip, #1260]!	; 0x4ec

0001197c <curs_set@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #102400	; 0x19000
   11984:	ldr	pc, [ip, #1252]!	; 0x4e4

00011988 <fflush@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #102400	; 0x19000
   11990:	ldr	pc, [ip, #1244]!	; 0x4dc

00011994 <wcwidth@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #102400	; 0x19000
   1199c:	ldr	pc, [ip, #1236]!	; 0x4d4

000119a0 <getuid@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #102400	; 0x19000
   119a8:	ldr	pc, [ip, #1228]!	; 0x4cc

000119ac <has_colors@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #102400	; 0x19000
   119b4:	ldr	pc, [ip, #1220]!	; 0x4c4

000119b8 <free@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #102400	; 0x19000
   119c0:	ldr	pc, [ip, #1212]!	; 0x4bc

000119c4 <waddnstr@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #102400	; 0x19000
   119cc:	ldr	pc, [ip, #1204]!	; 0x4b4

000119d0 <ferror@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #102400	; 0x19000
   119d8:	ldr	pc, [ip, #1196]!	; 0x4ac

000119dc <memcpy@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #102400	; 0x19000
   119e4:	ldr	pc, [ip, #1188]!	; 0x4a4

000119e8 <newterm@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #102400	; 0x19000
   119f0:	ldr	pc, [ip, #1180]!	; 0x49c

000119f4 <time@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #102400	; 0x19000
   119fc:	ldr	pc, [ip, #1172]!	; 0x494

00011a00 <assuan_write_status@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #102400	; 0x19000
   11a08:	ldr	pc, [ip, #1164]!	; 0x48c

00011a0c <sleep@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #102400	; 0x19000
   11a14:	ldr	pc, [ip, #1156]!	; 0x484

00011a18 <assuan_process@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #102400	; 0x19000
   11a20:	ldr	pc, [ip, #1148]!	; 0x47c

00011a24 <uname@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #102400	; 0x19000
   11a2c:	ldr	pc, [ip, #1140]!	; 0x474

00011a30 <assuan_register_reset_notify@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #102400	; 0x19000
   11a38:	ldr	pc, [ip, #1132]!	; 0x46c

00011a3c <strdup@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #102400	; 0x19000
   11a44:	ldr	pc, [ip, #1124]!	; 0x464

00011a48 <__stack_chk_fail@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #102400	; 0x19000
   11a50:	ldr	pc, [ip, #1116]!	; 0x45c

00011a54 <alarm@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #102400	; 0x19000
   11a5c:	ldr	pc, [ip, #1108]!	; 0x454

00011a60 <assuan_write_line@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #102400	; 0x19000
   11a68:	ldr	pc, [ip, #1100]!	; 0x44c

00011a6c <realloc@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #102400	; 0x19000
   11a74:	ldr	pc, [ip, #1092]!	; 0x444

00011a78 <waddnwstr@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #102400	; 0x19000
   11a80:	ldr	pc, [ip, #1084]!	; 0x43c

00011a84 <geteuid@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #102400	; 0x19000
   11a8c:	ldr	pc, [ip, #1076]!	; 0x434

00011a90 <perror@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #102400	; 0x19000
   11a98:	ldr	pc, [ip, #1068]!	; 0x42c

00011a9c <__xstat@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #102400	; 0x19000
   11aa4:	ldr	pc, [ip, #1060]!	; 0x424

00011aa8 <wgetch@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #102400	; 0x19000
   11ab0:	ldr	pc, [ip, #1052]!	; 0x41c

00011ab4 <sigaction@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #102400	; 0x19000
   11abc:	ldr	pc, [ip, #1044]!	; 0x414

00011ac0 <__memcpy_chk@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #102400	; 0x19000
   11ac8:	ldr	pc, [ip, #1036]!	; 0x40c

00011acc <fwrite@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #102400	; 0x19000
   11ad4:	ldr	pc, [ip, #1028]!	; 0x404

00011ad8 <strcpy@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #102400	; 0x19000
   11ae0:	ldr	pc, [ip, #1020]!	; 0x3fc

00011ae4 <keypad@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #102400	; 0x19000
   11aec:	ldr	pc, [ip, #1012]!	; 0x3f4

00011af0 <fread@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #102400	; 0x19000
   11af8:	ldr	pc, [ip, #1004]!	; 0x3ec

00011afc <wrefresh@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #102400	; 0x19000
   11b04:	ldr	pc, [ip, #996]!	; 0x3e4

00011b08 <wbkgd@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #102400	; 0x19000
   11b10:	ldr	pc, [ip, #988]!	; 0x3dc

00011b14 <getenv@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #102400	; 0x19000
   11b1c:	ldr	pc, [ip, #980]!	; 0x3d4

00011b20 <beep@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #102400	; 0x19000
   11b28:	ldr	pc, [ip, #972]!	; 0x3cc

00011b2c <malloc@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #102400	; 0x19000
   11b34:	ldr	pc, [ip, #964]!	; 0x3c4

00011b38 <iconv_open@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #102400	; 0x19000
   11b40:	ldr	pc, [ip, #956]!	; 0x3bc

00011b44 <__libc_start_main@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #102400	; 0x19000
   11b4c:	ldr	pc, [ip, #948]!	; 0x3b4

00011b50 <strerror@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #102400	; 0x19000
   11b58:	ldr	pc, [ip, #940]!	; 0x3ac

00011b5c <__vfprintf_chk@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #102400	; 0x19000
   11b64:	ldr	pc, [ip, #932]!	; 0x3a4

00011b68 <assuan_fdopen@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #102400	; 0x19000
   11b70:	ldr	pc, [ip, #924]!	; 0x39c

00011b74 <wvline@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #102400	; 0x19000
   11b7c:	ldr	pc, [ip, #916]!	; 0x394

00011b80 <__gmon_start__@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #102400	; 0x19000
   11b88:	ldr	pc, [ip, #908]!	; 0x38c

00011b8c <__ctype_b_loc@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #102400	; 0x19000
   11b94:	ldr	pc, [ip, #900]!	; 0x384

00011b98 <getpid@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #102400	; 0x19000
   11ba0:	ldr	pc, [ip, #892]!	; 0x37c

00011ba4 <exit@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #102400	; 0x19000
   11bac:	ldr	pc, [ip, #884]!	; 0x374

00011bb0 <assuan_register_command@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #102400	; 0x19000
   11bb8:	ldr	pc, [ip, #876]!	; 0x36c

00011bbc <wtimeout@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #102400	; 0x19000
   11bc4:	ldr	pc, [ip, #868]!	; 0x364

00011bc8 <flash@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #102400	; 0x19000
   11bd0:	ldr	pc, [ip, #860]!	; 0x35c

00011bd4 <assuan_new@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #102400	; 0x19000
   11bdc:	ldr	pc, [ip, #852]!	; 0x354

00011be0 <strtoul@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #102400	; 0x19000
   11be8:	ldr	pc, [ip, #844]!	; 0x34c

00011bec <strlen@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #102400	; 0x19000
   11bf4:	ldr	pc, [ip, #836]!	; 0x344

00011bf8 <mmap@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #102400	; 0x19000
   11c00:	ldr	pc, [ip, #828]!	; 0x33c

00011c04 <strchr@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #102400	; 0x19000
   11c0c:	ldr	pc, [ip, #820]!	; 0x334

00011c10 <gpg_err_code_from_syserror@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #102400	; 0x19000
   11c18:	ldr	pc, [ip, #812]!	; 0x32c

00011c1c <assuan_init_pipe_server@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #102400	; 0x19000
   11c24:	ldr	pc, [ip, #804]!	; 0x324

00011c28 <cbreak@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #102400	; 0x19000
   11c30:	ldr	pc, [ip, #796]!	; 0x31c

00011c34 <assuan_send_data@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #102400	; 0x19000
   11c3c:	ldr	pc, [ip, #788]!	; 0x314

00011c40 <__errno_location@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #102400	; 0x19000
   11c48:	ldr	pc, [ip, #780]!	; 0x30c

00011c4c <strncasecmp@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #102400	; 0x19000
   11c54:	ldr	pc, [ip, #772]!	; 0x304

00011c58 <__cxa_atexit@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #102400	; 0x19000
   11c60:	ldr	pc, [ip, #764]!	; 0x2fc

00011c64 <assuan_register_option_handler@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #102400	; 0x19000
   11c6c:	ldr	pc, [ip, #756]!	; 0x2f4

00011c70 <memset@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #102400	; 0x19000
   11c78:	ldr	pc, [ip, #748]!	; 0x2ec

00011c7c <init_pair@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #102400	; 0x19000
   11c84:	ldr	pc, [ip, #740]!	; 0x2e4

00011c88 <write@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #102400	; 0x19000
   11c90:	ldr	pc, [ip, #732]!	; 0x2dc

00011c94 <assuan_accept@plt>:
   11c94:	add	ip, pc, #0, 12
   11c98:	add	ip, ip, #102400	; 0x19000
   11c9c:	ldr	pc, [ip, #724]!	; 0x2d4

00011ca0 <fileno@plt>:
   11ca0:	add	ip, pc, #0, 12
   11ca4:	add	ip, ip, #102400	; 0x19000
   11ca8:	ldr	pc, [ip, #716]!	; 0x2cc

00011cac <mlock@plt>:
   11cac:	add	ip, pc, #0, 12
   11cb0:	add	ip, ip, #102400	; 0x19000
   11cb4:	ldr	pc, [ip, #708]!	; 0x2c4

00011cb8 <delscreen@plt>:
   11cb8:	add	ip, pc, #0, 12
   11cbc:	add	ip, ip, #102400	; 0x19000
   11cc0:	ldr	pc, [ip, #700]!	; 0x2bc

00011cc4 <__fprintf_chk@plt>:
   11cc4:	add	ip, pc, #0, 12
   11cc8:	add	ip, ip, #102400	; 0x19000
   11ccc:	ldr	pc, [ip, #692]!	; 0x2b4

00011cd0 <initscr@plt>:
   11cd0:	add	ip, pc, #0, 12
   11cd4:	add	ip, ip, #102400	; 0x19000
   11cd8:	ldr	pc, [ip, #684]!	; 0x2ac

00011cdc <fclose@plt>:
   11cdc:	add	ip, pc, #0, 12
   11ce0:	add	ip, ip, #102400	; 0x19000
   11ce4:	ldr	pc, [ip, #676]!	; 0x2a4

00011ce8 <munmap@plt>:
   11ce8:	add	ip, pc, #0, 12
   11cec:	add	ip, ip, #102400	; 0x19000
   11cf0:	ldr	pc, [ip, #668]!	; 0x29c

00011cf4 <assuan_read_line@plt>:
   11cf4:	add	ip, pc, #0, 12
   11cf8:	add	ip, ip, #102400	; 0x19000
   11cfc:	ldr	pc, [ip, #660]!	; 0x294

00011d00 <setlocale@plt>:
   11d00:	add	ip, pc, #0, 12
   11d04:	add	ip, ip, #102400	; 0x19000
   11d08:	ldr	pc, [ip, #652]!	; 0x28c

00011d0c <assuan_release@plt>:
   11d0c:	add	ip, pc, #0, 12
   11d10:	add	ip, ip, #102400	; 0x19000
   11d14:	ldr	pc, [ip, #644]!	; 0x284

00011d18 <wcslen@plt>:
   11d18:	add	ip, pc, #0, 12
   11d1c:	add	ip, ip, #102400	; 0x19000
   11d20:	ldr	pc, [ip, #636]!	; 0x27c

00011d24 <utime@plt>:
   11d24:	add	ip, pc, #0, 12
   11d28:	add	ip, ip, #102400	; 0x19000
   11d2c:	ldr	pc, [ip, #628]!	; 0x274

00011d30 <nl_langinfo@plt>:
   11d30:	add	ip, pc, #0, 12
   11d34:	add	ip, ip, #102400	; 0x19000
   11d38:	ldr	pc, [ip, #620]!	; 0x26c

00011d3c <wattr_off@plt>:
   11d3c:	add	ip, pc, #0, 12
   11d40:	add	ip, ip, #102400	; 0x19000
   11d44:	ldr	pc, [ip, #612]!	; 0x264

00011d48 <setuid@plt>:
   11d48:	add	ip, pc, #0, 12
   11d4c:	add	ip, ip, #102400	; 0x19000
   11d50:	ldr	pc, [ip, #604]!	; 0x25c

00011d54 <whline@plt>:
   11d54:	add	ip, pc, #0, 12
   11d58:	add	ip, ip, #102400	; 0x19000
   11d5c:	ldr	pc, [ip, #596]!	; 0x254

00011d60 <gpg_strerror@plt>:
   11d60:	add	ip, pc, #0, 12
   11d64:	add	ip, ip, #102400	; 0x19000
   11d68:	ldr	pc, [ip, #588]!	; 0x24c

00011d6c <assuan_set_malloc_hooks@plt>:
   11d6c:	add	ip, pc, #0, 12
   11d70:	add	ip, ip, #102400	; 0x19000
   11d74:	ldr	pc, [ip, #580]!	; 0x244

00011d78 <nonl@plt>:
   11d78:	add	ip, pc, #0, 12
   11d7c:	add	ip, ip, #102400	; 0x19000
   11d80:	ldr	pc, [ip, #572]!	; 0x23c

00011d84 <strpbrk@plt>:
   11d84:	add	ip, pc, #0, 12
   11d88:	add	ip, ip, #102400	; 0x19000
   11d8c:	ldr	pc, [ip, #564]!	; 0x234

00011d90 <waddch@plt>:
   11d90:	add	ip, pc, #0, 12
   11d94:	add	ip, ip, #102400	; 0x19000
   11d98:	ldr	pc, [ip, #556]!	; 0x22c

00011d9c <gpgrt_check_version@plt>:
   11d9c:	add	ip, pc, #0, 12
   11da0:	add	ip, ip, #102400	; 0x19000
   11da4:	ldr	pc, [ip, #548]!	; 0x224

00011da8 <isatty@plt>:
   11da8:	add	ip, pc, #0, 12
   11dac:	add	ip, ip, #102400	; 0x19000
   11db0:	ldr	pc, [ip, #540]!	; 0x21c

00011db4 <wclear@plt>:
   11db4:	add	ip, pc, #0, 12
   11db8:	add	ip, ip, #102400	; 0x19000
   11dbc:	ldr	pc, [ip, #532]!	; 0x214

00011dc0 <set_term@plt>:
   11dc0:	add	ip, pc, #0, 12
   11dc4:	add	ip, ip, #102400	; 0x19000
   11dc8:	ldr	pc, [ip, #524]!	; 0x20c

00011dcc <fputs@plt>:
   11dcc:	add	ip, pc, #0, 12
   11dd0:	add	ip, ip, #102400	; 0x19000
   11dd4:	ldr	pc, [ip, #516]!	; 0x204

00011dd8 <strncmp@plt>:
   11dd8:	add	ip, pc, #0, 12
   11ddc:	add	ip, ip, #102400	; 0x19000
   11de0:	ldr	pc, [ip, #508]!	; 0x1fc

00011de4 <endwin@plt>:
   11de4:	add	ip, pc, #0, 12
   11de8:	add	ip, ip, #102400	; 0x19000
   11dec:	ldr	pc, [ip, #500]!	; 0x1f4

00011df0 <abort@plt>:
   11df0:	add	ip, pc, #0, 12
   11df4:	add	ip, ip, #102400	; 0x19000
   11df8:	ldr	pc, [ip, #492]!	; 0x1ec

00011dfc <getc@plt>:
   11dfc:	add	ip, pc, #0, 12
   11e00:	add	ip, ip, #102400	; 0x19000
   11e04:	ldr	pc, [ip, #484]!	; 0x1e4

00011e08 <__snprintf_chk@plt>:
   11e08:	add	ip, pc, #0, 12
   11e0c:	add	ip, ip, #102400	; 0x19000
   11e10:	ldr	pc, [ip, #476]!	; 0x1dc

00011e14 <wattrset@plt>:
   11e14:	add	ip, pc, #0, 12
   11e18:	add	ip, ip, #102400	; 0x19000
   11e1c:	ldr	pc, [ip, #468]!	; 0x1d4

00011e20 <__assert_fail@plt>:
   11e20:	add	ip, pc, #0, 12
   11e24:	add	ip, ip, #102400	; 0x19000
   11e28:	ldr	pc, [ip, #460]!	; 0x1cc

Disassembly of section .text:

00011e2c <.text>:
   11e2c:	push	{r4, r5, r6, lr}
   11e30:	mov	r4, r0
   11e34:	mov	r5, r1
   11e38:	ldr	r0, [pc, #28]	; 11e5c <__assert_fail@plt+0x3c>
   11e3c:	bl	143c8 <__assert_fail@plt+0x25a8>
   11e40:	mov	r1, r5
   11e44:	mov	r0, r4
   11e48:	bl	14664 <__assert_fail@plt+0x2844>
   11e4c:	bl	14b48 <__assert_fail@plt+0x2d28>
   11e50:	adds	r0, r0, #0
   11e54:	movne	r0, #1
   11e58:	pop	{r4, r5, r6, pc}
   11e5c:			; <UNDEFINED> instruction: 0x000194b4
   11e60:	mov	fp, #0
   11e64:	mov	lr, #0
   11e68:	pop	{r1}		; (ldr r1, [sp], #4)
   11e6c:	mov	r2, sp
   11e70:	push	{r2}		; (str r2, [sp, #-4]!)
   11e74:	push	{r0}		; (str r0, [sp, #-4]!)
   11e78:	ldr	ip, [pc, #16]	; 11e90 <__assert_fail@plt+0x70>
   11e7c:	push	{ip}		; (str ip, [sp, #-4]!)
   11e80:	ldr	r0, [pc, #12]	; 11e94 <__assert_fail@plt+0x74>
   11e84:	ldr	r3, [pc, #12]	; 11e98 <__assert_fail@plt+0x78>
   11e88:	bl	11b44 <__libc_start_main@plt>
   11e8c:	bl	11df0 <abort@plt>
   11e90:	andeq	r9, r1, ip, lsl #9
   11e94:	andeq	r1, r1, ip, lsr #28
   11e98:	andeq	r9, r1, ip, lsr #8
   11e9c:	ldr	r3, [pc, #20]	; 11eb8 <__assert_fail@plt+0x98>
   11ea0:	ldr	r2, [pc, #20]	; 11ebc <__assert_fail@plt+0x9c>
   11ea4:	add	r3, pc, r3
   11ea8:	ldr	r2, [r3, r2]
   11eac:	cmp	r2, #0
   11eb0:	bxeq	lr
   11eb4:	b	11b80 <__gmon_start__@plt>
   11eb8:	andeq	r8, r1, r8, ror pc
   11ebc:	ldrdeq	r0, [r0], -r4
   11ec0:	ldr	r0, [pc, #24]	; 11ee0 <__assert_fail@plt+0xc0>
   11ec4:	ldr	r3, [pc, #24]	; 11ee4 <__assert_fail@plt+0xc4>
   11ec8:	cmp	r3, r0
   11ecc:	bxeq	lr
   11ed0:	ldr	r3, [pc, #16]	; 11ee8 <__assert_fail@plt+0xc8>
   11ed4:	cmp	r3, #0
   11ed8:	bxeq	lr
   11edc:	bx	r3
   11ee0:	ldrdeq	fp, [r2], -ip
   11ee4:	ldrdeq	fp, [r2], -ip
   11ee8:	andeq	r0, r0, r0
   11eec:	ldr	r0, [pc, #36]	; 11f18 <__assert_fail@plt+0xf8>
   11ef0:	ldr	r1, [pc, #36]	; 11f1c <__assert_fail@plt+0xfc>
   11ef4:	sub	r1, r1, r0
   11ef8:	asr	r1, r1, #2
   11efc:	add	r1, r1, r1, lsr #31
   11f00:	asrs	r1, r1, #1
   11f04:	bxeq	lr
   11f08:	ldr	r3, [pc, #16]	; 11f20 <__assert_fail@plt+0x100>
   11f0c:	cmp	r3, #0
   11f10:	bxeq	lr
   11f14:	bx	r3
   11f18:	ldrdeq	fp, [r2], -ip
   11f1c:	ldrdeq	fp, [r2], -ip
   11f20:	andeq	r0, r0, r0
   11f24:	push	{r4, lr}
   11f28:	ldr	r4, [pc, #24]	; 11f48 <__assert_fail@plt+0x128>
   11f2c:	ldrb	r3, [r4]
   11f30:	cmp	r3, #0
   11f34:	popne	{r4, pc}
   11f38:	bl	11ec0 <__assert_fail@plt+0xa0>
   11f3c:	mov	r3, #1
   11f40:	strb	r3, [r4]
   11f44:	pop	{r4, pc}
   11f48:	strdeq	fp, [r2], -r8
   11f4c:	b	11eec <__assert_fail@plt+0xcc>
   11f50:	b	11f60 <__assert_fail@plt+0x140>
   11f54:	add	r1, r1, #1
   11f58:	strb	r3, [r0]
   11f5c:	add	r0, r0, #1
   11f60:	ldrb	r3, [r1]
   11f64:	cmp	r3, #0
   11f68:	beq	11fcc <__assert_fail@plt+0x1ac>
   11f6c:	cmp	r3, #37	; 0x25
   11f70:	bne	11f54 <__assert_fail@plt+0x134>
   11f74:	ldrb	r2, [r1, #1]
   11f78:	cmp	r2, #0
   11f7c:	beq	11f54 <__assert_fail@plt+0x134>
   11f80:	ldrb	ip, [r1, #2]
   11f84:	cmp	ip, #0
   11f88:	beq	11f54 <__assert_fail@plt+0x134>
   11f8c:	cmp	r2, #57	; 0x39
   11f90:	addhi	r2, r2, #9
   11f94:	cmp	ip, #57	; 0x39
   11f98:	lsl	r2, r2, #4
   11f9c:	subls	ip, ip, #48	; 0x30
   11fa0:	uxtb	r2, r2
   11fa4:	uxtbls	ip, ip
   11fa8:	bls	11fbc <__assert_fail@plt+0x19c>
   11fac:	cmp	ip, #70	; 0x46
   11fb0:	subls	ip, ip, #55	; 0x37
   11fb4:	subhi	ip, ip, #87	; 0x57
   11fb8:	uxtb	ip, ip
   11fbc:	add	r2, r2, ip
   11fc0:	strb	r2, [r0]
   11fc4:	add	r1, r1, #3
   11fc8:	b	11f5c <__assert_fail@plt+0x13c>
   11fcc:	strb	r3, [r0]
   11fd0:	bx	lr
   11fd4:	push	{r4, r5, r6, r7, lr}
   11fd8:	sub	sp, sp, #124	; 0x7c
   11fdc:	ldr	r5, [pc, #412]	; 12180 <__assert_fail@plt+0x360>
   11fe0:	mov	r4, r1
   11fe4:	mov	r6, r0
   11fe8:	ldr	r3, [r5]
   11fec:	mov	r0, r1
   11ff0:	ldr	r1, [pc, #396]	; 12184 <__assert_fail@plt+0x364>
   11ff4:	str	r3, [sp, #116]	; 0x74
   11ff8:	bl	11940 <strcmp@plt>
   11ffc:	cmp	r0, #0
   12000:	beq	120f8 <__assert_fail@plt+0x2d8>
   12004:	ldr	r1, [pc, #380]	; 12188 <__assert_fail@plt+0x368>
   12008:	mov	r0, r4
   1200c:	bl	11940 <strcmp@plt>
   12010:	subs	r7, r0, #0
   12014:	beq	120a0 <__assert_fail@plt+0x280>
   12018:	ldr	r1, [pc, #364]	; 1218c <__assert_fail@plt+0x36c>
   1201c:	mov	r0, r4
   12020:	bl	11940 <strcmp@plt>
   12024:	cmp	r0, #0
   12028:	bne	1210c <__assert_fail@plt+0x2ec>
   1202c:	ldr	r4, [pc, #348]	; 12190 <__assert_fail@plt+0x370>
   12030:	mov	r2, #9
   12034:	mov	r0, r4
   12038:	ldr	r1, [pc, #340]	; 12194 <__assert_fail@plt+0x374>
   1203c:	bl	11dd8 <strncmp@plt>
   12040:	mov	r2, r4
   12044:	cmp	r0, #0
   12048:	bne	12058 <__assert_fail@plt+0x238>
   1204c:	ldrb	r3, [r2, #9]!
   12050:	cmp	r3, #0
   12054:	moveq	r2, r4
   12058:	ldr	r1, [r4, #52]	; 0x34
   1205c:	ldr	ip, [pc, #308]	; 12198 <__assert_fail@plt+0x378>
   12060:	cmp	r1, #0
   12064:	mov	r3, #100	; 0x64
   12068:	ldreq	r0, [pc, #300]	; 1219c <__assert_fail@plt+0x37c>
   1206c:	ldrne	r0, [pc, #300]	; 121a0 <__assert_fail@plt+0x380>
   12070:	moveq	r1, r0
   12074:	str	r2, [sp, #4]
   12078:	strd	r0, [sp, #8]
   1207c:	str	ip, [sp]
   12080:	mov	r1, r3
   12084:	add	r0, sp, #16
   12088:	mov	r2, #1
   1208c:	bl	11e08 <__snprintf_chk@plt>
   12090:	mov	r3, #0
   12094:	add	r0, sp, #16
   12098:	strb	r3, [sp, #115]	; 0x73
   1209c:	b	120cc <__assert_fail@plt+0x2ac>
   120a0:	bl	11b98 <getpid@plt>
   120a4:	ldr	r2, [pc, #248]	; 121a4 <__assert_fail@plt+0x384>
   120a8:	mov	r3, #100	; 0x64
   120ac:	str	r2, [sp]
   120b0:	mov	r1, r3
   120b4:	mov	r2, #1
   120b8:	str	r0, [sp, #4]
   120bc:	add	r0, sp, #16
   120c0:	bl	11e08 <__snprintf_chk@plt>
   120c4:	add	r0, sp, #16
   120c8:	strb	r7, [sp, #115]	; 0x73
   120cc:	bl	11bec <strlen@plt>
   120d0:	add	r1, sp, #16
   120d4:	mov	r2, r0
   120d8:	mov	r0, r6
   120dc:	bl	11c34 <assuan_send_data@plt>
   120e0:	ldr	r2, [sp, #116]	; 0x74
   120e4:	ldr	r3, [r5]
   120e8:	cmp	r2, r3
   120ec:	bne	1217c <__assert_fail@plt+0x35c>
   120f0:	add	sp, sp, #124	; 0x7c
   120f4:	pop	{r4, r5, r6, r7, pc}
   120f8:	mov	r0, r6
   120fc:	mov	r2, #5
   12100:	ldr	r1, [pc, #160]	; 121a8 <__assert_fail@plt+0x388>
   12104:	bl	11c34 <assuan_send_data@plt>
   12108:	b	120e0 <__assert_fail@plt+0x2c0>
   1210c:	mov	r0, r4
   12110:	ldr	r1, [pc, #148]	; 121ac <__assert_fail@plt+0x38c>
   12114:	bl	11940 <strcmp@plt>
   12118:	subs	r4, r0, #0
   1211c:	ldrne	r0, [pc, #140]	; 121b0 <__assert_fail@plt+0x390>
   12120:	bne	120e0 <__assert_fail@plt+0x2c0>
   12124:	ldr	r2, [pc, #136]	; 121b4 <__assert_fail@plt+0x394>
   12128:	ldr	r3, [pc, #136]	; 121b8 <__assert_fail@plt+0x398>
   1212c:	ldr	ip, [pc, #136]	; 121bc <__assert_fail@plt+0x39c>
   12130:	ldrd	r0, [r2, #44]	; 0x2c
   12134:	ldr	r2, [r2, #40]	; 0x28
   12138:	str	ip, [sp]
   1213c:	cmp	r0, #0
   12140:	moveq	r0, r3
   12144:	cmp	r1, #0
   12148:	moveq	r1, r3
   1214c:	cmp	r2, #0
   12150:	moveq	r2, r3
   12154:	mov	r3, #100	; 0x64
   12158:	strd	r0, [sp, #4]
   1215c:	str	r2, [sp, #12]
   12160:	add	r0, sp, #16
   12164:	mov	r1, r3
   12168:	mov	r2, #1
   1216c:	bl	11e08 <__snprintf_chk@plt>
   12170:	add	r0, sp, #16
   12174:	strb	r4, [sp, #115]	; 0x73
   12178:	b	120cc <__assert_fail@plt+0x2ac>
   1217c:	bl	11a48 <__stack_chk_fail@plt>
   12180:	andeq	sl, r2, r0, lsl #26
   12184:	andeq	r9, r1, ip, lsl #12
   12188:	andeq	r9, r1, ip, lsl r6
   1218c:	andeq	r9, r1, r4, lsr #12
   12190:	strdeq	fp, [r2], -ip
   12194:	andeq	r9, r1, ip, lsr #12
   12198:	andeq	r9, r1, r8, lsr r6
   1219c:	andeq	sl, r1, r8, ror #12
   121a0:	andeq	r9, r1, r8, lsl #12
   121a4:	andeq	r9, r1, r0, lsr #12
   121a8:	andeq	r9, r1, r4, lsl r6
   121ac:	andeq	r9, r1, r0, asr #12
   121b0:	streq	r0, [r0, #-280]	; 0xfffffee8
   121b4:	muleq	r2, r8, r3
   121b8:	andeq	r9, r1, r0, lsl #30
   121bc:	andeq	r9, r1, r8, asr #12
   121c0:	subs	r0, r1, #0
   121c4:	beq	121d4 <__assert_fail@plt+0x3b4>
   121c8:	ldrb	r3, [r0]
   121cc:	cmp	r3, #0
   121d0:	bne	121dc <__assert_fail@plt+0x3bc>
   121d4:	mov	r0, #0
   121d8:	bx	lr
   121dc:	push	{r4, lr}
   121e0:	mov	r2, #10
   121e4:	mov	r1, #0
   121e8:	bl	1194c <strtol@plt>
   121ec:	ldr	r3, [pc, #8]	; 121fc <__assert_fail@plt+0x3dc>
   121f0:	str	r0, [r3, #68]	; 0x44
   121f4:	mov	r0, #0
   121f8:	pop	{r4, pc}
   121fc:	muleq	r2, r8, r3
   12200:	sub	r0, r0, #1
   12204:	cmp	r0, #41	; 0x29
   12208:	ldrls	pc, [pc, r0, lsl #2]
   1220c:	b	12330 <__assert_fail@plt+0x510>
   12210:	andeq	r2, r1, ip, lsl #6
   12214:	andeq	r2, r1, r0, lsr r3
   12218:	andeq	r2, r1, r0, lsr r3
   1221c:	andeq	r2, r1, r0, lsr r3
   12220:	andeq	r2, r1, r0, lsr r3
   12224:	andeq	r2, r1, r0, lsr r3
   12228:	andeq	r2, r1, r0, lsr r3
   1222c:	andeq	r2, r1, r0, lsr r3
   12230:	andeq	r2, r1, r0, lsr r3
   12234:	andeq	r2, r1, r0, lsr r3
   12238:			; <UNDEFINED> instruction: 0x000122b8
   1223c:	andeq	r2, r1, r4, asr #5
   12240:	ldrdeq	r2, [r1], -r0
   12244:	ldrdeq	r2, [r1], -ip
   12248:	andeq	r2, r1, r0, lsr r3
   1224c:	andeq	r2, r1, r0, lsr r3
   12250:	andeq	r2, r1, r0, lsr r3
   12254:	andeq	r2, r1, r0, lsr r3
   12258:	andeq	r2, r1, r8, ror #5
   1225c:	andeq	r2, r1, r0, lsr r3
   12260:	andeq	r2, r1, r0, lsr r3
   12264:	andeq	r2, r1, r0, lsr r3
   12268:	andeq	r2, r1, r0, lsr r3
   1226c:	andeq	r2, r1, r0, lsr r3
   12270:	andeq	r2, r1, r0, lsr r3
   12274:	andeq	r2, r1, r0, lsr r3
   12278:	andeq	r2, r1, r0, lsr r3
   1227c:	andeq	r2, r1, r0, lsr r3
   12280:	andeq	r2, r1, r0, lsr r3
   12284:	andeq	r2, r1, r0, lsr r3
   12288:	andeq	r2, r1, r0, lsr r3
   1228c:	andeq	r2, r1, r0, lsr r3
   12290:	andeq	r2, r1, r0, lsr r3
   12294:	andeq	r2, r1, r0, lsr r3
   12298:	andeq	r2, r1, r0, lsr r3
   1229c:	andeq	r2, r1, r0, lsr r3
   122a0:	andeq	r2, r1, r0, lsr r3
   122a4:	andeq	r2, r1, r0, lsr r3
   122a8:	andeq	r2, r1, r0, lsr r3
   122ac:	andeq	r2, r1, ip, lsl #6
   122b0:	strdeq	r2, [r1], -r4
   122b4:	andeq	r2, r1, r0, lsl #6
   122b8:	ldr	r3, [pc, #212]	; 12394 <__assert_fail@plt+0x574>
   122bc:	mov	r0, r3
   122c0:	bx	lr
   122c4:	ldr	r3, [pc, #204]	; 12398 <__assert_fail@plt+0x578>
   122c8:	mov	r0, r3
   122cc:	bx	lr
   122d0:	ldr	r3, [pc, #196]	; 1239c <__assert_fail@plt+0x57c>
   122d4:	mov	r0, r3
   122d8:	bx	lr
   122dc:	ldr	r3, [pc, #188]	; 123a0 <__assert_fail@plt+0x580>
   122e0:	mov	r0, r3
   122e4:	bx	lr
   122e8:	ldr	r3, [pc, #180]	; 123a4 <__assert_fail@plt+0x584>
   122ec:	mov	r0, r3
   122f0:	bx	lr
   122f4:	ldr	r3, [pc, #172]	; 123a8 <__assert_fail@plt+0x588>
   122f8:	mov	r0, r3
   122fc:	bx	lr
   12300:	ldr	r3, [pc, #164]	; 123ac <__assert_fail@plt+0x58c>
   12304:	mov	r0, r3
   12308:	bx	lr
   1230c:	push	{r4, r5, r6, lr}
   12310:	sub	sp, sp, #8
   12314:	ldr	r4, [pc, #120]	; 12394 <__assert_fail@plt+0x574>
   12318:	ldr	r3, [r4, #56]	; 0x38
   1231c:	cmp	r3, #0
   12320:	beq	1233c <__assert_fail@plt+0x51c>
   12324:	mov	r0, r3
   12328:	add	sp, sp, #8
   1232c:	pop	{r4, r5, r6, pc}
   12330:	mov	r3, #0
   12334:	mov	r0, r3
   12338:	bx	lr
   1233c:	mov	r0, r4
   12340:	bl	11bec <strlen@plt>
   12344:	add	r6, r0, #50	; 0x32
   12348:	mov	r5, r0
   1234c:	mov	r0, r6
   12350:	bl	11b2c <malloc@plt>
   12354:	cmp	r0, #0
   12358:	mov	r3, r0
   1235c:	str	r0, [r4, #56]	; 0x38
   12360:	beq	12324 <__assert_fail@plt+0x504>
   12364:	ldr	r3, [pc, #68]	; 123b0 <__assert_fail@plt+0x590>
   12368:	mov	r2, #1
   1236c:	str	r3, [sp]
   12370:	str	r4, [sp, #4]
   12374:	mvn	r3, #0
   12378:	mov	r1, r6
   1237c:	bl	11e08 <__snprintf_chk@plt>
   12380:	ldr	r3, [r4, #56]	; 0x38
   12384:	mov	r2, #0
   12388:	add	r5, r3, r5
   1238c:	strb	r2, [r5, #49]	; 0x31
   12390:	b	12324 <__assert_fail@plt+0x504>
   12394:	strdeq	fp, [r2], -ip
   12398:	andeq	r9, r1, r4, ror #13
   1239c:	andeq	r9, r1, r4, lsl r6
   123a0:	andeq	r9, r1, r4, asr r6
   123a4:	andeq	r9, r1, r8, ror r6
   123a8:	andeq	r9, r1, ip, lsr #13
   123ac:	andeq	r9, r1, r0, ror #13
   123b0:	strdeq	r9, [r1], -r0
   123b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123b8:	sub	sp, sp, #92	; 0x5c
   123bc:	ldr	r7, [pc, #716]	; 12690 <__assert_fail@plt+0x870>
   123c0:	subs	r5, r0, #0
   123c4:	ldr	r3, [r7, #52]	; 0x34
   123c8:	ldr	fp, [r7, #72]	; 0x48
   123cc:	str	r3, [sp]
   123d0:	ldr	r3, [r7, #56]	; 0x38
   123d4:	ldr	r6, [r7, #44]	; 0x2c
   123d8:	str	r3, [sp, #4]
   123dc:	ldr	r3, [r7, #60]	; 0x3c
   123e0:	ldr	sl, [r7, #48]	; 0x30
   123e4:	str	r3, [sp, #8]
   123e8:	ldr	r3, [r7, #196]	; 0xc4
   123ec:	str	r3, [sp, #12]
   123f0:	ldr	r3, [r7, #168]	; 0xa8
   123f4:	str	r3, [sp, #16]
   123f8:	ldr	r3, [r7, #172]	; 0xac
   123fc:	str	r3, [sp, #20]
   12400:	ldr	r3, [r7, #176]	; 0xb0
   12404:	str	r3, [sp, #24]
   12408:	ldr	r3, [r7, #180]	; 0xb4
   1240c:	str	r3, [sp, #28]
   12410:	ldr	r3, [r7, #184]	; 0xb8
   12414:	str	r3, [sp, #32]
   12418:	ldr	r3, [r7, #188]	; 0xbc
   1241c:	str	r3, [sp, #36]	; 0x24
   12420:	ldr	r3, [r7, #192]	; 0xc0
   12424:	str	r3, [sp, #40]	; 0x28
   12428:	ldr	r3, [r7, #92]	; 0x5c
   1242c:	str	r3, [sp, #44]	; 0x2c
   12430:	ldr	r3, [r7, #76]	; 0x4c
   12434:	str	r3, [sp, #48]	; 0x30
   12438:	ldr	r3, [r7, #80]	; 0x50
   1243c:	str	r3, [sp, #52]	; 0x34
   12440:	ldr	r3, [r7, #84]	; 0x54
   12444:	ldr	r9, [r7, #160]	; 0xa0
   12448:	str	r3, [sp, #56]	; 0x38
   1244c:	ldr	r3, [r7, #64]	; 0x40
   12450:	ldr	r8, [r7, #164]	; 0xa4
   12454:	str	r3, [sp, #60]	; 0x3c
   12458:	ldr	r3, [r7, #40]	; 0x28
   1245c:	ldr	r4, [r7, #216]	; 0xd8
   12460:	str	r3, [sp, #64]	; 0x40
   12464:	ldr	r3, [r7, #88]	; 0x58
   12468:	str	r3, [sp, #68]	; 0x44
   1246c:	ldr	r3, [r7, #148]	; 0x94
   12470:	str	r3, [sp, #72]	; 0x48
   12474:	ldr	r3, [r7, #152]	; 0x98
   12478:	str	r3, [sp, #76]	; 0x4c
   1247c:	ldr	r3, [r7, #156]	; 0x9c
   12480:	str	r3, [sp, #80]	; 0x50
   12484:	ldr	r3, [r7, #68]	; 0x44
   12488:	str	r3, [sp, #84]	; 0x54
   1248c:	bne	12614 <__assert_fail@plt+0x7f4>
   12490:	ldr	r0, [r7]
   12494:	bl	119b8 <free@plt>
   12498:	ldr	r0, [r7, #4]
   1249c:	bl	119b8 <free@plt>
   124a0:	ldr	r0, [r7, #8]
   124a4:	bl	119b8 <free@plt>
   124a8:	ldr	r0, [r7, #12]
   124ac:	bl	119b8 <free@plt>
   124b0:	ldr	r0, [r7, #16]
   124b4:	bl	119b8 <free@plt>
   124b8:	ldr	r0, [r7, #20]
   124bc:	bl	119b8 <free@plt>
   124c0:	ldr	r0, [r7, #24]
   124c4:	bl	119b8 <free@plt>
   124c8:	ldr	r0, [r7, #28]
   124cc:	bl	190e0 <__assert_fail@plt+0x72c0>
   124d0:	ldr	r0, [r7, #128]	; 0x80
   124d4:	bl	119b8 <free@plt>
   124d8:	ldr	r0, [r7, #132]	; 0x84
   124dc:	bl	119b8 <free@plt>
   124e0:	ldr	r0, [r7, #140]	; 0x8c
   124e4:	bl	119b8 <free@plt>
   124e8:	ldr	r0, [r7, #144]	; 0x90
   124ec:	bl	119b8 <free@plt>
   124f0:	ldr	r0, [r7, #204]	; 0xcc
   124f4:	bl	119b8 <free@plt>
   124f8:	ldr	r0, [r7, #116]	; 0x74
   124fc:	bl	119b8 <free@plt>
   12500:	mov	r2, #216	; 0xd8
   12504:	mov	r1, #0
   12508:	ldr	r0, [pc, #384]	; 12690 <__assert_fail@plt+0x870>
   1250c:	bl	11c70 <memset@plt>
   12510:	cmp	r5, #0
   12514:	str	r4, [r7, #216]	; 0xd8
   12518:	beq	12548 <__assert_fail@plt+0x728>
   1251c:	mov	r2, #1
   12520:	mov	r0, #60	; 0x3c
   12524:	mvn	r1, #0
   12528:	str	r0, [r7, #68]	; 0x44
   1252c:	str	r2, [r7, #72]	; 0x48
   12530:	str	r2, [r7, #148]	; 0x94
   12534:	str	r2, [r7, #156]	; 0x9c
   12538:	str	r2, [r7, #160]	; 0xa0
   1253c:	str	r1, [r7, #80]	; 0x50
   12540:	add	sp, sp, #92	; 0x5c
   12544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12548:	ldr	r3, [sp]
   1254c:	str	fp, [r7, #72]	; 0x48
   12550:	str	r3, [r7, #52]	; 0x34
   12554:	ldr	r3, [sp, #4]
   12558:	str	r6, [r7, #44]	; 0x2c
   1255c:	str	r3, [r7, #56]	; 0x38
   12560:	ldr	r3, [sp, #8]
   12564:	str	sl, [r7, #48]	; 0x30
   12568:	str	r3, [r7, #60]	; 0x3c
   1256c:	ldr	r3, [sp, #12]
   12570:	str	r3, [r7, #196]	; 0xc4
   12574:	ldr	r3, [sp, #16]
   12578:	str	r3, [r7, #168]	; 0xa8
   1257c:	ldr	r3, [sp, #20]
   12580:	str	r3, [r7, #172]	; 0xac
   12584:	ldr	r3, [sp, #24]
   12588:	str	r3, [r7, #176]	; 0xb0
   1258c:	ldr	r3, [sp, #28]
   12590:	str	r3, [r7, #180]	; 0xb4
   12594:	ldr	r3, [sp, #32]
   12598:	str	r3, [r7, #184]	; 0xb8
   1259c:	ldr	r3, [sp, #36]	; 0x24
   125a0:	str	r3, [r7, #188]	; 0xbc
   125a4:	ldr	r3, [sp, #40]	; 0x28
   125a8:	str	r3, [r7, #192]	; 0xc0
   125ac:	ldr	r3, [sp, #44]	; 0x2c
   125b0:	str	r3, [r7, #92]	; 0x5c
   125b4:	ldr	r3, [sp, #48]	; 0x30
   125b8:	str	r3, [r7, #76]	; 0x4c
   125bc:	ldr	r3, [sp, #52]	; 0x34
   125c0:	str	r3, [r7, #80]	; 0x50
   125c4:	ldr	r3, [sp, #56]	; 0x38
   125c8:	str	r3, [r7, #84]	; 0x54
   125cc:	ldr	r3, [sp, #60]	; 0x3c
   125d0:	str	r9, [r7, #160]	; 0xa0
   125d4:	str	r3, [r7, #64]	; 0x40
   125d8:	ldr	r3, [sp, #64]	; 0x40
   125dc:	str	r8, [r7, #164]	; 0xa4
   125e0:	str	r3, [r7, #40]	; 0x28
   125e4:	ldr	r3, [sp, #68]	; 0x44
   125e8:	str	r3, [r7, #88]	; 0x58
   125ec:	ldr	r3, [sp, #72]	; 0x48
   125f0:	str	r3, [r7, #148]	; 0x94
   125f4:	ldr	r3, [sp, #76]	; 0x4c
   125f8:	str	r3, [r7, #152]	; 0x98
   125fc:	ldr	r3, [sp, #80]	; 0x50
   12600:	str	r3, [r7, #156]	; 0x9c
   12604:	ldr	r3, [sp, #84]	; 0x54
   12608:	str	r3, [r7, #68]	; 0x44
   1260c:	add	sp, sp, #92	; 0x5c
   12610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12614:	mov	r0, r6
   12618:	bl	119b8 <free@plt>
   1261c:	ldr	r0, [r7, #48]	; 0x30
   12620:	bl	119b8 <free@plt>
   12624:	ldr	r0, [r7, #52]	; 0x34
   12628:	bl	119b8 <free@plt>
   1262c:	ldr	r0, [r7, #56]	; 0x38
   12630:	bl	119b8 <free@plt>
   12634:	ldr	r0, [r7, #60]	; 0x3c
   12638:	bl	119b8 <free@plt>
   1263c:	ldr	r0, [r7, #168]	; 0xa8
   12640:	bl	119b8 <free@plt>
   12644:	ldr	r0, [r7, #172]	; 0xac
   12648:	bl	119b8 <free@plt>
   1264c:	ldr	r0, [r7, #176]	; 0xb0
   12650:	bl	119b8 <free@plt>
   12654:	ldr	r0, [r7, #180]	; 0xb4
   12658:	bl	119b8 <free@plt>
   1265c:	ldr	r0, [r7, #184]	; 0xb8
   12660:	bl	119b8 <free@plt>
   12664:	ldr	r0, [r7, #188]	; 0xbc
   12668:	bl	119b8 <free@plt>
   1266c:	ldr	r0, [r7, #192]	; 0xc0
   12670:	bl	119b8 <free@plt>
   12674:	ldr	r0, [r7, #92]	; 0x5c
   12678:	bl	119b8 <free@plt>
   1267c:	ldr	r0, [r7, #84]	; 0x54
   12680:	bl	119b8 <free@plt>
   12684:	ldr	r0, [r7, #40]	; 0x28
   12688:	bl	119b8 <free@plt>
   1268c:	b	12490 <__assert_fail@plt+0x670>
   12690:	muleq	r2, r8, r3
   12694:	push	{r4, lr}
   12698:	mov	r0, #0
   1269c:	bl	123b4 <__assert_fail@plt+0x594>
   126a0:	mov	r0, #0
   126a4:	pop	{r4, pc}
   126a8:	push	{r4, r5, r6, lr}
   126ac:	mov	r5, r1
   126b0:	ldr	r4, [pc, #80]	; 12708 <__assert_fail@plt+0x8e8>
   126b4:	ldr	r0, [r4, #204]	; 0xcc
   126b8:	cmp	r0, #0
   126bc:	beq	126c4 <__assert_fail@plt+0x8a4>
   126c0:	bl	119b8 <free@plt>
   126c4:	ldrb	r3, [r5]
   126c8:	cmp	r3, #0
   126cc:	beq	126e4 <__assert_fail@plt+0x8c4>
   126d0:	ldr	r1, [pc, #52]	; 1270c <__assert_fail@plt+0x8ec>
   126d4:	mov	r0, r5
   126d8:	bl	11940 <strcmp@plt>
   126dc:	cmp	r0, #0
   126e0:	bne	126f4 <__assert_fail@plt+0x8d4>
   126e4:	mov	r3, #0
   126e8:	str	r3, [r4, #204]	; 0xcc
   126ec:	mov	r0, #0
   126f0:	pop	{r4, r5, r6, pc}
   126f4:	mov	r0, r5
   126f8:	bl	11a3c <strdup@plt>
   126fc:	str	r0, [r4, #204]	; 0xcc
   12700:	mov	r0, #0
   12704:	pop	{r4, r5, r6, pc}
   12708:	muleq	r2, r8, r3
   1270c:	andeq	r9, r1, r4, lsl r7
   12710:	push	{r4, r5, r6, lr}
   12714:	mov	r5, r0
   12718:	ldr	r0, [r0]
   1271c:	ldr	r3, [r1]
   12720:	cmp	r0, #0
   12724:	beq	12748 <__assert_fail@plt+0x928>
   12728:	cmp	r3, #0
   1272c:	ble	12764 <__assert_fail@plt+0x944>
   12730:	mov	r4, r1
   12734:	bl	190e0 <__assert_fail@plt+0x72c0>
   12738:	mov	r3, #0
   1273c:	str	r3, [r5]
   12740:	str	r3, [r4]
   12744:	pop	{r4, r5, r6, pc}
   12748:	cmp	r3, #0
   1274c:	popeq	{r4, r5, r6, pc}
   12750:	ldr	r3, [pc, #32]	; 12778 <__assert_fail@plt+0x958>
   12754:	mov	r2, #668	; 0x29c
   12758:	ldr	r1, [pc, #28]	; 1277c <__assert_fail@plt+0x95c>
   1275c:	ldr	r0, [pc, #28]	; 12780 <__assert_fail@plt+0x960>
   12760:	bl	11e20 <__assert_fail@plt>
   12764:	ldr	r3, [pc, #12]	; 12778 <__assert_fail@plt+0x958>
   12768:	mov	r2, #672	; 0x2a0
   1276c:	ldr	r1, [pc, #8]	; 1277c <__assert_fail@plt+0x95c>
   12770:	ldr	r0, [pc, #12]	; 12784 <__assert_fail@plt+0x964>
   12774:	bl	11e20 <__assert_fail@plt>
   12778:	andeq	r9, r1, r4, asr #9
   1277c:	andeq	r9, r1, ip, lsl r7
   12780:	andeq	r9, r1, r8, lsr r7
   12784:	andeq	r9, r1, ip, asr #14
   12788:	push	{r4, r5, r6, r7, r8, lr}
   1278c:	sub	sp, sp, #16
   12790:	ldr	r5, [pc, #1576]	; 12dc0 <__assert_fail@plt+0xfa0>
   12794:	mov	r0, r1
   12798:	mov	r4, r1
   1279c:	ldr	r3, [r5]
   127a0:	ldr	r1, [pc, #1564]	; 12dc4 <__assert_fail@plt+0xfa4>
   127a4:	mov	r7, r2
   127a8:	str	r3, [sp, #12]
   127ac:	bl	11940 <strcmp@plt>
   127b0:	cmp	r0, #0
   127b4:	bne	127ec <__assert_fail@plt+0x9cc>
   127b8:	ldrb	r2, [r7]
   127bc:	cmp	r2, #0
   127c0:	bne	12800 <__assert_fail@plt+0x9e0>
   127c4:	ldr	r1, [pc, #1532]	; 12dc8 <__assert_fail@plt+0xfa8>
   127c8:	mov	r3, r2
   127cc:	str	r2, [r1, #72]	; 0x48
   127d0:	ldr	r1, [sp, #12]
   127d4:	ldr	r2, [r5]
   127d8:	mov	r0, r3
   127dc:	cmp	r1, r2
   127e0:	bne	12c70 <__assert_fail@plt+0xe50>
   127e4:	add	sp, sp, #16
   127e8:	pop	{r4, r5, r6, r7, r8, pc}
   127ec:	ldr	r1, [pc, #1496]	; 12dcc <__assert_fail@plt+0xfac>
   127f0:	mov	r0, r4
   127f4:	bl	11940 <strcmp@plt>
   127f8:	cmp	r0, #0
   127fc:	beq	1286c <__assert_fail@plt+0xa4c>
   12800:	ldr	r1, [pc, #1480]	; 12dd0 <__assert_fail@plt+0xfb0>
   12804:	mov	r0, r4
   12808:	bl	11940 <strcmp@plt>
   1280c:	subs	r6, r0, #0
   12810:	beq	128b4 <__assert_fail@plt+0xa94>
   12814:	ldr	r1, [pc, #1464]	; 12dd4 <__assert_fail@plt+0xfb4>
   12818:	mov	r0, r4
   1281c:	bl	11940 <strcmp@plt>
   12820:	cmp	r0, #0
   12824:	beq	12888 <__assert_fail@plt+0xa68>
   12828:	ldr	r1, [pc, #1448]	; 12dd8 <__assert_fail@plt+0xfb8>
   1282c:	mov	r0, r4
   12830:	bl	11940 <strcmp@plt>
   12834:	cmp	r0, #0
   12838:	bne	12908 <__assert_fail@plt+0xae8>
   1283c:	ldr	r4, [pc, #1412]	; 12dc8 <__assert_fail@plt+0xfa8>
   12840:	ldr	r0, [r4, #44]	; 0x2c
   12844:	cmp	r0, #0
   12848:	beq	12850 <__assert_fail@plt+0xa30>
   1284c:	bl	119b8 <free@plt>
   12850:	mov	r0, r7
   12854:	bl	11a3c <strdup@plt>
   12858:	cmp	r0, #0
   1285c:	str	r0, [r4, #44]	; 0x2c
   12860:	beq	12958 <__assert_fail@plt+0xb38>
   12864:	mov	r3, #0
   12868:	b	127d0 <__assert_fail@plt+0x9b0>
   1286c:	ldrb	r3, [r7]
   12870:	cmp	r3, #0
   12874:	bne	12800 <__assert_fail@plt+0x9e0>
   12878:	ldr	r2, [pc, #1352]	; 12dc8 <__assert_fail@plt+0xfa8>
   1287c:	mov	r1, #1
   12880:	str	r1, [r2, #72]	; 0x48
   12884:	b	127d0 <__assert_fail@plt+0x9b0>
   12888:	ldr	r4, [pc, #1336]	; 12dc8 <__assert_fail@plt+0xfa8>
   1288c:	ldr	r0, [r4, #40]	; 0x28
   12890:	cmp	r0, #0
   12894:	beq	1289c <__assert_fail@plt+0xa7c>
   12898:	bl	119b8 <free@plt>
   1289c:	mov	r0, r7
   128a0:	bl	11a3c <strdup@plt>
   128a4:	cmp	r0, #0
   128a8:	str	r0, [r4, #40]	; 0x28
   128ac:	bne	12864 <__assert_fail@plt+0xa44>
   128b0:	b	12958 <__assert_fail@plt+0xb38>
   128b4:	ldr	r4, [pc, #1312]	; 12ddc <__assert_fail@plt+0xfbc>
   128b8:	ldr	r8, [r4]
   128bc:	bl	11b98 <getpid@plt>
   128c0:	ldr	r3, [pc, #1304]	; 12de0 <__assert_fail@plt+0xfc0>
   128c4:	ldr	r2, [pc, #1304]	; 12de4 <__assert_fail@plt+0xfc4>
   128c8:	mov	r1, #1
   128cc:	str	r0, [sp]
   128d0:	mov	r0, r8
   128d4:	bl	11cc4 <__fprintf_chk@plt>
   128d8:	ldrb	r3, [r7]
   128dc:	cmp	r3, #0
   128e0:	moveq	r0, #5
   128e4:	bne	12970 <__assert_fail@plt+0xb50>
   128e8:	bl	11a0c <sleep@plt>
   128ec:	ldr	r3, [pc, #1260]	; 12de0 <__assert_fail@plt+0xfc0>
   128f0:	ldr	r0, [r4]
   128f4:	ldr	r2, [pc, #1260]	; 12de8 <__assert_fail@plt+0xfc8>
   128f8:	mov	r1, #1
   128fc:	bl	11cc4 <__fprintf_chk@plt>
   12900:	mov	r3, #0
   12904:	b	127d0 <__assert_fail@plt+0x9b0>
   12908:	ldr	r1, [pc, #1244]	; 12dec <__assert_fail@plt+0xfcc>
   1290c:	mov	r0, r4
   12910:	bl	11940 <strcmp@plt>
   12914:	cmp	r0, #0
   12918:	beq	12984 <__assert_fail@plt+0xb64>
   1291c:	ldr	r1, [pc, #1228]	; 12df0 <__assert_fail@plt+0xfd0>
   12920:	mov	r0, r4
   12924:	bl	11940 <strcmp@plt>
   12928:	cmp	r0, #0
   1292c:	bne	129b0 <__assert_fail@plt+0xb90>
   12930:	ldr	r4, [pc, #1168]	; 12dc8 <__assert_fail@plt+0xfa8>
   12934:	ldr	r0, [r4, #52]	; 0x34
   12938:	cmp	r0, #0
   1293c:	beq	12944 <__assert_fail@plt+0xb24>
   12940:	bl	119b8 <free@plt>
   12944:	mov	r0, r7
   12948:	bl	11a3c <strdup@plt>
   1294c:	cmp	r0, #0
   12950:	str	r0, [r4, #52]	; 0x34
   12954:	bne	12864 <__assert_fail@plt+0xa44>
   12958:	bl	11c10 <gpg_err_code_from_syserror@plt>
   1295c:	cmp	r0, #0
   12960:	uxthne	r3, r0
   12964:	orrne	r3, r3, #83886080	; 0x5000000
   12968:	bne	127d0 <__assert_fail@plt+0x9b0>
   1296c:	b	12864 <__assert_fail@plt+0xa44>
   12970:	mov	r1, r6
   12974:	mov	r0, r7
   12978:	mov	r2, #10
   1297c:	bl	1194c <strtol@plt>
   12980:	b	128e8 <__assert_fail@plt+0xac8>
   12984:	ldr	r4, [pc, #1084]	; 12dc8 <__assert_fail@plt+0xfa8>
   12988:	ldr	r0, [r4, #48]	; 0x30
   1298c:	cmp	r0, #0
   12990:	beq	12998 <__assert_fail@plt+0xb78>
   12994:	bl	119b8 <free@plt>
   12998:	mov	r0, r7
   1299c:	bl	11a3c <strdup@plt>
   129a0:	cmp	r0, #0
   129a4:	str	r0, [r4, #48]	; 0x30
   129a8:	bne	12864 <__assert_fail@plt+0xa44>
   129ac:	b	12958 <__assert_fail@plt+0xb38>
   129b0:	ldr	r1, [pc, #1084]	; 12df4 <__assert_fail@plt+0xfd4>
   129b4:	mov	r0, r4
   129b8:	bl	11940 <strcmp@plt>
   129bc:	cmp	r0, #0
   129c0:	bne	12a04 <__assert_fail@plt+0xbe4>
   129c4:	ldr	r4, [pc, #1020]	; 12dc8 <__assert_fail@plt+0xfa8>
   129c8:	ldr	r0, [r4, #56]	; 0x38
   129cc:	cmp	r0, #0
   129d0:	beq	129d8 <__assert_fail@plt+0xbb8>
   129d4:	bl	119b8 <free@plt>
   129d8:	mov	r0, r7
   129dc:	bl	11a3c <strdup@plt>
   129e0:	cmp	r0, #0
   129e4:	str	r0, [r4, #56]	; 0x38
   129e8:	bne	12864 <__assert_fail@plt+0xa44>
   129ec:	bl	11c10 <gpg_err_code_from_syserror@plt>
   129f0:	subs	r3, r0, #0
   129f4:	uxthne	r3, r3
   129f8:	orrne	r3, r3, #83886080	; 0x5000000
   129fc:	bne	127d0 <__assert_fail@plt+0x9b0>
   12a00:	b	12864 <__assert_fail@plt+0xa44>
   12a04:	ldr	r1, [pc, #1004]	; 12df8 <__assert_fail@plt+0xfd8>
   12a08:	mov	r0, r4
   12a0c:	bl	11940 <strcmp@plt>
   12a10:	cmp	r0, #0
   12a14:	bne	12a44 <__assert_fail@plt+0xc24>
   12a18:	ldr	r4, [pc, #936]	; 12dc8 <__assert_fail@plt+0xfa8>
   12a1c:	ldr	r0, [r4, #60]	; 0x3c
   12a20:	cmp	r0, #0
   12a24:	beq	12a2c <__assert_fail@plt+0xc0c>
   12a28:	bl	119b8 <free@plt>
   12a2c:	mov	r0, r7
   12a30:	bl	11a3c <strdup@plt>
   12a34:	cmp	r0, #0
   12a38:	str	r0, [r4, #60]	; 0x3c
   12a3c:	bne	12864 <__assert_fail@plt+0xa44>
   12a40:	b	129ec <__assert_fail@plt+0xbcc>
   12a44:	ldr	r1, [pc, #944]	; 12dfc <__assert_fail@plt+0xfdc>
   12a48:	mov	r0, r4
   12a4c:	bl	11940 <strcmp@plt>
   12a50:	subs	r6, r0, #0
   12a54:	beq	12aac <__assert_fail@plt+0xc8c>
   12a58:	ldr	r1, [pc, #928]	; 12e00 <__assert_fail@plt+0xfe0>
   12a5c:	mov	r0, r4
   12a60:	bl	11940 <strcmp@plt>
   12a64:	subs	r6, r0, #0
   12a68:	beq	12c34 <__assert_fail@plt+0xe14>
   12a6c:	ldr	r1, [pc, #912]	; 12e04 <__assert_fail@plt+0xfe4>
   12a70:	mov	r0, r4
   12a74:	bl	11940 <strcmp@plt>
   12a78:	cmp	r0, #0
   12a7c:	bne	12b70 <__assert_fail@plt+0xd50>
   12a80:	ldr	r4, [pc, #832]	; 12dc8 <__assert_fail@plt+0xfa8>
   12a84:	ldr	r0, [r4, #92]	; 0x5c
   12a88:	cmp	r0, #0
   12a8c:	beq	12a94 <__assert_fail@plt+0xc74>
   12a90:	bl	119b8 <free@plt>
   12a94:	mov	r0, r7
   12a98:	bl	11a3c <strdup@plt>
   12a9c:	cmp	r0, #0
   12aa0:	str	r0, [r4, #92]	; 0x5c
   12aa4:	bne	12864 <__assert_fail@plt+0xa44>
   12aa8:	b	129ec <__assert_fail@plt+0xbcc>
   12aac:	ldr	r4, [pc, #788]	; 12dc8 <__assert_fail@plt+0xfa8>
   12ab0:	ldr	r0, [r4, #84]	; 0x54
   12ab4:	bl	119b8 <free@plt>
   12ab8:	mvn	r3, #0
   12abc:	str	r3, [r4, #80]	; 0x50
   12ac0:	str	r6, [r4, #84]	; 0x54
   12ac4:	str	r6, [r4, #76]	; 0x4c
   12ac8:	bl	11c40 <__errno_location@plt>
   12acc:	add	r1, sp, #8
   12ad0:	mov	r2, #10
   12ad4:	str	r6, [r0]
   12ad8:	mov	r8, r0
   12adc:	mov	r0, r7
   12ae0:	bl	1194c <strtol@plt>
   12ae4:	subs	r3, r0, #0
   12ae8:	beq	12864 <__assert_fail@plt+0xa44>
   12aec:	ldr	r2, [r8]
   12af0:	cmp	r2, #0
   12af4:	bne	12864 <__assert_fail@plt+0xa44>
   12af8:	ldr	r0, [sp, #8]
   12afc:	str	r3, [r4, #76]	; 0x4c
   12b00:	ldrb	r3, [r0]
   12b04:	cmp	r3, #0
   12b08:	beq	12864 <__assert_fail@plt+0xa44>
   12b0c:	mov	r3, #0
   12b10:	str	r3, [r8]
   12b14:	ldrb	r3, [r0]
   12b18:	cmp	r3, #47	; 0x2f
   12b1c:	bne	12b2c <__assert_fail@plt+0xd0c>
   12b20:	b	12d00 <__assert_fail@plt+0xee0>
   12b24:	add	r0, r0, #1
   12b28:	str	r0, [sp, #8]
   12b2c:	ldrb	r3, [r0]
   12b30:	cmp	r3, #32
   12b34:	beq	12b24 <__assert_fail@plt+0xd04>
   12b38:	cmp	r3, #0
   12b3c:	beq	12864 <__assert_fail@plt+0xa44>
   12b40:	bl	11a3c <strdup@plt>
   12b44:	str	r0, [r4, #84]	; 0x54
   12b48:	str	r0, [sp, #8]
   12b4c:	b	12b58 <__assert_fail@plt+0xd38>
   12b50:	add	r3, r3, #1
   12b54:	str	r3, [sp, #8]
   12b58:	ldr	r3, [sp, #8]
   12b5c:	ldrb	r2, [r3]
   12b60:	ands	r2, r2, #223	; 0xdf
   12b64:	bne	12b50 <__assert_fail@plt+0xd30>
   12b68:	strb	r2, [r3]
   12b6c:	b	12864 <__assert_fail@plt+0xa44>
   12b70:	ldr	r1, [pc, #656]	; 12e08 <__assert_fail@plt+0xfe8>
   12b74:	mov	r0, r4
   12b78:	bl	11940 <strcmp@plt>
   12b7c:	cmp	r0, #0
   12b80:	beq	12c54 <__assert_fail@plt+0xe34>
   12b84:	ldr	r1, [pc, #640]	; 12e0c <__assert_fail@plt+0xfec>
   12b88:	mov	r0, r4
   12b8c:	bl	11940 <strcmp@plt>
   12b90:	cmp	r0, #0
   12b94:	beq	12c74 <__assert_fail@plt+0xe54>
   12b98:	ldr	r1, [pc, #624]	; 12e10 <__assert_fail@plt+0xff0>
   12b9c:	mov	r0, r4
   12ba0:	bl	11940 <strcmp@plt>
   12ba4:	cmp	r0, #0
   12ba8:	beq	12c90 <__assert_fail@plt+0xe70>
   12bac:	ldr	r1, [pc, #608]	; 12e14 <__assert_fail@plt+0xff4>
   12bb0:	mov	r0, r4
   12bb4:	bl	11940 <strcmp@plt>
   12bb8:	cmp	r0, #0
   12bbc:	beq	12cac <__assert_fail@plt+0xe8c>
   12bc0:	ldr	r1, [pc, #592]	; 12e18 <__assert_fail@plt+0xff8>
   12bc4:	mov	r0, r4
   12bc8:	bl	11940 <strcmp@plt>
   12bcc:	cmp	r0, #0
   12bd0:	beq	12ce4 <__assert_fail@plt+0xec4>
   12bd4:	ldr	r1, [pc, #576]	; 12e1c <__assert_fail@plt+0xffc>
   12bd8:	mov	r0, r4
   12bdc:	bl	11940 <strcmp@plt>
   12be0:	cmp	r0, #0
   12be4:	beq	12cc8 <__assert_fail@plt+0xea8>
   12be8:	ldr	r1, [pc, #560]	; 12e20 <__assert_fail@plt+0x1000>
   12bec:	mov	r0, r4
   12bf0:	bl	11940 <strcmp@plt>
   12bf4:	cmp	r0, #0
   12bf8:	beq	12da4 <__assert_fail@plt+0xf84>
   12bfc:	ldr	r1, [pc, #544]	; 12e24 <__assert_fail@plt+0x1004>
   12c00:	mov	r0, r4
   12c04:	bl	11940 <strcmp@plt>
   12c08:	cmp	r0, #0
   12c0c:	bne	12d3c <__assert_fail@plt+0xf1c>
   12c10:	ldrb	r2, [r7]
   12c14:	cmp	r2, #0
   12c18:	bne	12d5c <__assert_fail@plt+0xf3c>
   12c1c:	ldr	r1, [pc, #420]	; 12dc8 <__assert_fail@plt+0xfa8>
   12c20:	mov	r0, #1
   12c24:	mov	r3, r2
   12c28:	str	r2, [r1, #200]	; 0xc8
   12c2c:	str	r0, [r1, #196]	; 0xc4
   12c30:	b	127d0 <__assert_fail@plt+0x9b0>
   12c34:	mov	r2, #10
   12c38:	mov	r0, r7
   12c3c:	mov	r1, r6
   12c40:	bl	1194c <strtol@plt>
   12c44:	ldr	r2, [pc, #380]	; 12dc8 <__assert_fail@plt+0xfa8>
   12c48:	mov	r3, r6
   12c4c:	str	r0, [r2, #88]	; 0x58
   12c50:	b	127d0 <__assert_fail@plt+0x9b0>
   12c54:	mov	r0, r7
   12c58:	bl	11a3c <strdup@plt>
   12c5c:	ldr	r3, [pc, #356]	; 12dc8 <__assert_fail@plt+0xfa8>
   12c60:	cmp	r0, #0
   12c64:	str	r0, [r3, #168]	; 0xa8
   12c68:	bne	12864 <__assert_fail@plt+0xa44>
   12c6c:	b	129ec <__assert_fail@plt+0xbcc>
   12c70:	bl	11a48 <__stack_chk_fail@plt>
   12c74:	mov	r0, r7
   12c78:	bl	11a3c <strdup@plt>
   12c7c:	ldr	r3, [pc, #324]	; 12dc8 <__assert_fail@plt+0xfa8>
   12c80:	cmp	r0, #0
   12c84:	str	r0, [r3, #172]	; 0xac
   12c88:	bne	12864 <__assert_fail@plt+0xa44>
   12c8c:	b	129ec <__assert_fail@plt+0xbcc>
   12c90:	mov	r0, r7
   12c94:	bl	11a3c <strdup@plt>
   12c98:	ldr	r3, [pc, #296]	; 12dc8 <__assert_fail@plt+0xfa8>
   12c9c:	cmp	r0, #0
   12ca0:	str	r0, [r3, #176]	; 0xb0
   12ca4:	bne	12864 <__assert_fail@plt+0xa44>
   12ca8:	b	129ec <__assert_fail@plt+0xbcc>
   12cac:	mov	r0, r7
   12cb0:	bl	11a3c <strdup@plt>
   12cb4:	ldr	r3, [pc, #268]	; 12dc8 <__assert_fail@plt+0xfa8>
   12cb8:	cmp	r0, #0
   12cbc:	str	r0, [r3, #180]	; 0xb4
   12cc0:	bne	12864 <__assert_fail@plt+0xa44>
   12cc4:	b	129ec <__assert_fail@plt+0xbcc>
   12cc8:	mov	r0, r7
   12ccc:	bl	11a3c <strdup@plt>
   12cd0:	ldr	r3, [pc, #240]	; 12dc8 <__assert_fail@plt+0xfa8>
   12cd4:	cmp	r0, #0
   12cd8:	str	r0, [r3, #188]	; 0xbc
   12cdc:	bne	12864 <__assert_fail@plt+0xa44>
   12ce0:	b	129ec <__assert_fail@plt+0xbcc>
   12ce4:	mov	r0, r7
   12ce8:	bl	11a3c <strdup@plt>
   12cec:	ldr	r3, [pc, #212]	; 12dc8 <__assert_fail@plt+0xfa8>
   12cf0:	cmp	r0, #0
   12cf4:	str	r0, [r3, #184]	; 0xb8
   12cf8:	bne	12864 <__assert_fail@plt+0xa44>
   12cfc:	b	129ec <__assert_fail@plt+0xbcc>
   12d00:	add	r3, r0, #1
   12d04:	mov	r0, r3
   12d08:	add	r1, sp, #8
   12d0c:	mov	r2, #10
   12d10:	str	r3, [sp, #8]
   12d14:	bl	1194c <strtol@plt>
   12d18:	cmp	r0, #0
   12d1c:	blt	12d2c <__assert_fail@plt+0xf0c>
   12d20:	ldr	r3, [r8]
   12d24:	cmp	r3, #0
   12d28:	streq	r0, [r4, #80]	; 0x50
   12d2c:	ldr	r0, [sp, #8]
   12d30:	cmp	r0, #0
   12d34:	beq	12864 <__assert_fail@plt+0xa44>
   12d38:	b	12b2c <__assert_fail@plt+0xd0c>
   12d3c:	ldr	r1, [pc, #228]	; 12e28 <__assert_fail@plt+0x1008>
   12d40:	mov	r0, r4
   12d44:	bl	11940 <strcmp@plt>
   12d48:	cmp	r0, #0
   12d4c:	bne	12d5c <__assert_fail@plt+0xf3c>
   12d50:	ldrb	r3, [r7]
   12d54:	cmp	r3, #0
   12d58:	beq	12864 <__assert_fail@plt+0xa44>
   12d5c:	mov	r0, r4
   12d60:	ldr	r1, [pc, #196]	; 12e2c <__assert_fail@plt+0x100c>
   12d64:	bl	11940 <strcmp@plt>
   12d68:	cmp	r0, #0
   12d6c:	bne	12d9c <__assert_fail@plt+0xf7c>
   12d70:	ldr	r4, [pc, #80]	; 12dc8 <__assert_fail@plt+0xfa8>
   12d74:	ldr	r0, [r4, #216]	; 0xd8
   12d78:	cmp	r0, #0
   12d7c:	beq	12d84 <__assert_fail@plt+0xf64>
   12d80:	bl	119b8 <free@plt>
   12d84:	mov	r0, r7
   12d88:	bl	11a3c <strdup@plt>
   12d8c:	cmp	r0, #0
   12d90:	str	r0, [r4, #216]	; 0xd8
   12d94:	bne	12864 <__assert_fail@plt+0xa44>
   12d98:	b	129ec <__assert_fail@plt+0xbcc>
   12d9c:	ldr	r3, [pc, #140]	; 12e30 <__assert_fail@plt+0x1010>
   12da0:	b	127d0 <__assert_fail@plt+0x9b0>
   12da4:	mov	r0, r7
   12da8:	bl	11a3c <strdup@plt>
   12dac:	ldr	r3, [pc, #20]	; 12dc8 <__assert_fail@plt+0xfa8>
   12db0:	cmp	r0, #0
   12db4:	str	r0, [r3, #192]	; 0xc0
   12db8:	bne	12864 <__assert_fail@plt+0xa44>
   12dbc:	b	129ec <__assert_fail@plt+0xbcc>
   12dc0:	andeq	sl, r2, r0, lsl #26
   12dc4:	andeq	r9, r1, r0, ror #14
   12dc8:	muleq	r2, r8, r3
   12dcc:	andeq	r9, r1, r8, ror #14
   12dd0:	andeq	r9, r1, r0, ror r7
   12dd4:			; <UNDEFINED> instruction: 0x000197bc
   12dd8:	andeq	r9, r1, r4, asr #15
   12ddc:	andeq	fp, r2, r8, ror #5
   12de0:	strdeq	fp, [r2], -ip
   12de4:	andeq	r9, r1, ip, ror r7
   12de8:	andeq	r9, r1, ip, lsr #15
   12dec:	andeq	r9, r1, ip, asr #15
   12df0:	ldrdeq	r9, [r1], -r4
   12df4:	andeq	r9, r1, r0, ror #15
   12df8:	andeq	r9, r1, ip, ror #15
   12dfc:	strdeq	r9, [r1], -r8
   12e00:	andeq	r9, r1, r0, lsl #16
   12e04:	andeq	r9, r1, ip, lsl #16
   12e08:	andeq	r9, r1, r8, lsl r8
   12e0c:	andeq	r9, r1, r4, lsr #16
   12e10:	andeq	r9, r1, r4, lsr r8
   12e14:	andeq	r9, r1, r4, asr #16
   12e18:	andeq	r9, r1, r4, asr r8
   12e1c:	andeq	r9, r1, r4, ror #16
   12e20:	andeq	r9, r1, r4, ror r8
   12e24:	andeq	r9, r1, r4, lsl #17
   12e28:	andeq	r9, r1, r4, lsr #17
   12e2c:			; <UNDEFINED> instruction: 0x000198b8
   12e30:	streq	r0, [r0, #-174]	; 0xffffff52
   12e34:	push	{r4, lr}
   12e38:	bl	11c10 <gpg_err_code_from_syserror@plt>
   12e3c:	cmp	r0, #0
   12e40:	uxthne	r0, r0
   12e44:	orrne	r0, r0, #83886080	; 0x5000000
   12e48:	pop	{r4, pc}
   12e4c:	push	{r4, r5, r6, lr}
   12e50:	mov	r0, r1
   12e54:	mov	r4, r1
   12e58:	bl	11bec <strlen@plt>
   12e5c:	add	r0, r0, #1
   12e60:	bl	11b2c <malloc@plt>
   12e64:	subs	r6, r0, #0
   12e68:	beq	12e94 <__assert_fail@plt+0x1074>
   12e6c:	ldr	r5, [pc, #40]	; 12e9c <__assert_fail@plt+0x107c>
   12e70:	mov	r1, r4
   12e74:	bl	11f50 <__assert_fail@plt+0x130>
   12e78:	ldr	r0, [r5]
   12e7c:	cmp	r0, #0
   12e80:	beq	12e88 <__assert_fail@plt+0x1068>
   12e84:	bl	119b8 <free@plt>
   12e88:	str	r6, [r5]
   12e8c:	mov	r0, #0
   12e90:	pop	{r4, r5, r6, pc}
   12e94:	pop	{r4, r5, r6, lr}
   12e98:	b	12e34 <__assert_fail@plt+0x1014>
   12e9c:	muleq	r2, r8, r3
   12ea0:	push	{r4, r5, r6, lr}
   12ea4:	ldrb	r3, [r1]
   12ea8:	cmp	r3, #0
   12eac:	moveq	r4, r3
   12eb0:	bne	12ed4 <__assert_fail@plt+0x10b4>
   12eb4:	ldr	r5, [pc, #72]	; 12f04 <__assert_fail@plt+0x10e4>
   12eb8:	ldr	r0, [r5, #144]	; 0x90
   12ebc:	cmp	r0, #0
   12ec0:	beq	12ec8 <__assert_fail@plt+0x10a8>
   12ec4:	bl	119b8 <free@plt>
   12ec8:	str	r4, [r5, #144]	; 0x90
   12ecc:	mov	r0, #0
   12ed0:	pop	{r4, r5, r6, pc}
   12ed4:	mov	r0, r1
   12ed8:	mov	r5, r1
   12edc:	bl	11bec <strlen@plt>
   12ee0:	add	r0, r0, #1
   12ee4:	bl	11b2c <malloc@plt>
   12ee8:	subs	r4, r0, #0
   12eec:	beq	12efc <__assert_fail@plt+0x10dc>
   12ef0:	mov	r1, r5
   12ef4:	bl	11f50 <__assert_fail@plt+0x130>
   12ef8:	b	12eb4 <__assert_fail@plt+0x1094>
   12efc:	pop	{r4, r5, r6, lr}
   12f00:	b	12e34 <__assert_fail@plt+0x1014>
   12f04:	muleq	r2, r8, r3
   12f08:	push	{r4, r5, r6, lr}
   12f0c:	ldrb	r3, [r1]
   12f10:	cmp	r3, #0
   12f14:	beq	12f5c <__assert_fail@plt+0x113c>
   12f18:	mov	r0, r1
   12f1c:	mov	r4, r1
   12f20:	bl	11bec <strlen@plt>
   12f24:	add	r0, r0, #1
   12f28:	bl	11b2c <malloc@plt>
   12f2c:	subs	r6, r0, #0
   12f30:	beq	12f70 <__assert_fail@plt+0x1150>
   12f34:	ldr	r5, [pc, #60]	; 12f78 <__assert_fail@plt+0x1158>
   12f38:	mov	r1, r4
   12f3c:	bl	11f50 <__assert_fail@plt+0x130>
   12f40:	ldr	r0, [r5, #140]	; 0x8c
   12f44:	cmp	r0, #0
   12f48:	beq	12f50 <__assert_fail@plt+0x1130>
   12f4c:	bl	119b8 <free@plt>
   12f50:	str	r6, [r5, #140]	; 0x8c
   12f54:	mov	r0, #0
   12f58:	pop	{r4, r5, r6, pc}
   12f5c:	mov	r0, #9
   12f60:	bl	11b2c <malloc@plt>
   12f64:	ldr	r4, [pc, #16]	; 12f7c <__assert_fail@plt+0x115c>
   12f68:	subs	r6, r0, #0
   12f6c:	bne	12f34 <__assert_fail@plt+0x1114>
   12f70:	pop	{r4, r5, r6, lr}
   12f74:	b	12e34 <__assert_fail@plt+0x1014>
   12f78:	muleq	r2, r8, r3
   12f7c:	andeq	r9, r1, r8, asr #17
   12f80:	push	{r4, r5, r6, lr}
   12f84:	mov	r0, r1
   12f88:	mov	r4, r1
   12f8c:	bl	11bec <strlen@plt>
   12f90:	add	r0, r0, #1
   12f94:	bl	11b2c <malloc@plt>
   12f98:	subs	r6, r0, #0
   12f9c:	beq	12fc8 <__assert_fail@plt+0x11a8>
   12fa0:	ldr	r5, [pc, #40]	; 12fd0 <__assert_fail@plt+0x11b0>
   12fa4:	mov	r1, r4
   12fa8:	bl	11f50 <__assert_fail@plt+0x130>
   12fac:	ldr	r0, [r5, #24]
   12fb0:	cmp	r0, #0
   12fb4:	beq	12fbc <__assert_fail@plt+0x119c>
   12fb8:	bl	119b8 <free@plt>
   12fbc:	str	r6, [r5, #24]
   12fc0:	mov	r0, #0
   12fc4:	pop	{r4, r5, r6, pc}
   12fc8:	pop	{r4, r5, r6, lr}
   12fcc:	b	12e34 <__assert_fail@plt+0x1014>
   12fd0:	muleq	r2, r8, r3
   12fd4:	push	{r4, r5, r6, lr}
   12fd8:	mov	r0, r1
   12fdc:	mov	r4, r1
   12fe0:	bl	11bec <strlen@plt>
   12fe4:	add	r0, r0, #1
   12fe8:	bl	11b2c <malloc@plt>
   12fec:	subs	r6, r0, #0
   12ff0:	beq	1301c <__assert_fail@plt+0x11fc>
   12ff4:	ldr	r5, [pc, #40]	; 13024 <__assert_fail@plt+0x1204>
   12ff8:	mov	r1, r4
   12ffc:	bl	11f50 <__assert_fail@plt+0x130>
   13000:	ldr	r0, [r5, #20]
   13004:	cmp	r0, #0
   13008:	beq	13010 <__assert_fail@plt+0x11f0>
   1300c:	bl	119b8 <free@plt>
   13010:	str	r6, [r5, #20]
   13014:	mov	r0, #0
   13018:	pop	{r4, r5, r6, pc}
   1301c:	pop	{r4, r5, r6, lr}
   13020:	b	12e34 <__assert_fail@plt+0x1014>
   13024:	muleq	r2, r8, r3
   13028:	push	{r4, r5, r6, lr}
   1302c:	mov	r0, r1
   13030:	mov	r4, r1
   13034:	bl	11bec <strlen@plt>
   13038:	add	r0, r0, #1
   1303c:	bl	11b2c <malloc@plt>
   13040:	subs	r6, r0, #0
   13044:	beq	13070 <__assert_fail@plt+0x1250>
   13048:	ldr	r5, [pc, #40]	; 13078 <__assert_fail@plt+0x1258>
   1304c:	mov	r1, r4
   13050:	bl	11f50 <__assert_fail@plt+0x130>
   13054:	ldr	r0, [r5, #16]
   13058:	cmp	r0, #0
   1305c:	beq	13064 <__assert_fail@plt+0x1244>
   13060:	bl	119b8 <free@plt>
   13064:	str	r6, [r5, #16]
   13068:	mov	r0, #0
   1306c:	pop	{r4, r5, r6, pc}
   13070:	pop	{r4, r5, r6, lr}
   13074:	b	12e34 <__assert_fail@plt+0x1014>
   13078:	muleq	r2, r8, r3
   1307c:	push	{r4, r5, r6, lr}
   13080:	mov	r0, r1
   13084:	mov	r4, r1
   13088:	bl	11bec <strlen@plt>
   1308c:	add	r0, r0, #1
   13090:	bl	11b2c <malloc@plt>
   13094:	subs	r6, r0, #0
   13098:	beq	130c4 <__assert_fail@plt+0x12a4>
   1309c:	ldr	r5, [pc, #40]	; 130cc <__assert_fail@plt+0x12ac>
   130a0:	mov	r1, r4
   130a4:	bl	11f50 <__assert_fail@plt+0x130>
   130a8:	ldr	r0, [r5, #8]
   130ac:	cmp	r0, #0
   130b0:	beq	130b8 <__assert_fail@plt+0x1298>
   130b4:	bl	119b8 <free@plt>
   130b8:	str	r6, [r5, #8]
   130bc:	mov	r0, #0
   130c0:	pop	{r4, r5, r6, pc}
   130c4:	pop	{r4, r5, r6, lr}
   130c8:	b	12e34 <__assert_fail@plt+0x1014>
   130cc:	muleq	r2, r8, r3
   130d0:	push	{r4, r5, r6, lr}
   130d4:	mov	r0, r1
   130d8:	mov	r4, r1
   130dc:	bl	11bec <strlen@plt>
   130e0:	add	r0, r0, #1
   130e4:	bl	11b2c <malloc@plt>
   130e8:	subs	r6, r0, #0
   130ec:	beq	13110 <__assert_fail@plt+0x12f0>
   130f0:	ldr	r5, [pc, #32]	; 13118 <__assert_fail@plt+0x12f8>
   130f4:	mov	r1, r4
   130f8:	bl	11f50 <__assert_fail@plt+0x130>
   130fc:	ldr	r0, [r5, #132]	; 0x84
   13100:	bl	119b8 <free@plt>
   13104:	str	r6, [r5, #132]	; 0x84
   13108:	mov	r0, #0
   1310c:	pop	{r4, r5, r6, pc}
   13110:	pop	{r4, r5, r6, lr}
   13114:	b	12e34 <__assert_fail@plt+0x1014>
   13118:	muleq	r2, r8, r3
   1311c:	push	{r4, r5, r6, lr}
   13120:	mov	r0, r1
   13124:	mov	r4, r1
   13128:	bl	11bec <strlen@plt>
   1312c:	add	r0, r0, #1
   13130:	bl	11b2c <malloc@plt>
   13134:	subs	r6, r0, #0
   13138:	beq	1315c <__assert_fail@plt+0x133c>
   1313c:	ldr	r5, [pc, #32]	; 13164 <__assert_fail@plt+0x1344>
   13140:	mov	r1, r4
   13144:	bl	11f50 <__assert_fail@plt+0x130>
   13148:	ldr	r0, [r5, #128]	; 0x80
   1314c:	bl	119b8 <free@plt>
   13150:	str	r6, [r5, #128]	; 0x80
   13154:	mov	r0, #0
   13158:	pop	{r4, r5, r6, pc}
   1315c:	pop	{r4, r5, r6, lr}
   13160:	b	12e34 <__assert_fail@plt+0x1014>
   13164:	muleq	r2, r8, r3
   13168:	push	{r4, r5, r6, lr}
   1316c:	mov	r0, r1
   13170:	mov	r4, r1
   13174:	bl	11bec <strlen@plt>
   13178:	add	r0, r0, #1
   1317c:	bl	11b2c <malloc@plt>
   13180:	subs	r6, r0, #0
   13184:	beq	131b0 <__assert_fail@plt+0x1390>
   13188:	ldr	r5, [pc, #40]	; 131b8 <__assert_fail@plt+0x1398>
   1318c:	mov	r1, r4
   13190:	bl	11f50 <__assert_fail@plt+0x130>
   13194:	ldr	r0, [r5, #12]
   13198:	cmp	r0, #0
   1319c:	beq	131a4 <__assert_fail@plt+0x1384>
   131a0:	bl	119b8 <free@plt>
   131a4:	str	r6, [r5, #12]
   131a8:	mov	r0, #0
   131ac:	pop	{r4, r5, r6, pc}
   131b0:	pop	{r4, r5, r6, lr}
   131b4:	b	12e34 <__assert_fail@plt+0x1014>
   131b8:	muleq	r2, r8, r3
   131bc:	push	{r4, r5, r6, lr}
   131c0:	mov	r0, r1
   131c4:	mov	r4, r1
   131c8:	bl	11bec <strlen@plt>
   131cc:	add	r0, r0, #1
   131d0:	bl	11b2c <malloc@plt>
   131d4:	subs	r6, r0, #0
   131d8:	beq	13204 <__assert_fail@plt+0x13e4>
   131dc:	ldr	r5, [pc, #40]	; 1320c <__assert_fail@plt+0x13ec>
   131e0:	mov	r1, r4
   131e4:	bl	11f50 <__assert_fail@plt+0x130>
   131e8:	ldr	r0, [r5, #4]
   131ec:	cmp	r0, #0
   131f0:	beq	131f8 <__assert_fail@plt+0x13d8>
   131f4:	bl	119b8 <free@plt>
   131f8:	str	r6, [r5, #4]
   131fc:	mov	r0, #0
   13200:	pop	{r4, r5, r6, pc}
   13204:	pop	{r4, r5, r6, lr}
   13208:	b	12e34 <__assert_fail@plt+0x1014>
   1320c:	muleq	r2, r8, r3
   13210:	push	{r4, r5, r6, lr}
   13214:	subs	r4, r1, #0
   13218:	beq	13278 <__assert_fail@plt+0x1458>
   1321c:	ldrb	r3, [r4]
   13220:	cmp	r3, #32
   13224:	bne	13234 <__assert_fail@plt+0x1414>
   13228:	ldrb	r3, [r4, #1]!
   1322c:	cmp	r3, #32
   13230:	beq	13228 <__assert_fail@plt+0x1408>
   13234:	mov	r5, #0
   13238:	b	13240 <__assert_fail@plt+0x1420>
   1323c:	strb	r5, [r4, r0]
   13240:	mov	r0, r4
   13244:	bl	11bec <strlen@plt>
   13248:	sub	r0, r0, #1
   1324c:	ldrb	r3, [r4, r0]
   13250:	cmp	r3, #32
   13254:	beq	1323c <__assert_fail@plt+0x141c>
   13258:	mov	r0, r4
   1325c:	bl	16e78 <__assert_fail@plt+0x5058>
   13260:	subs	r3, r0, #0
   13264:	beq	13278 <__assert_fail@plt+0x1458>
   13268:	cmp	r3, #1
   1326c:	ldr	r0, [pc, #12]	; 13280 <__assert_fail@plt+0x1460>
   13270:	moveq	r0, #0
   13274:	pop	{r4, r5, r6, pc}
   13278:	ldr	r0, [pc, #4]	; 13284 <__assert_fail@plt+0x1464>
   1327c:	pop	{r4, r5, r6, pc}
   13280:	streq	r0, [r0, #-257]	; 0xfffffeff
   13284:	streq	r0, [r0, #-261]	; 0xfffffefb
   13288:	push	{r4, r5, r6, lr}
   1328c:	sub	sp, sp, #528	; 0x210
   13290:	ldr	r4, [pc, #188]	; 13354 <__assert_fail@plt+0x1534>
   13294:	mov	r5, r0
   13298:	mov	r1, #45	; 0x2d
   1329c:	ldr	r3, [r4]
   132a0:	ldr	r0, [pc, #176]	; 13358 <__assert_fail@plt+0x1538>
   132a4:	str	r3, [sp, #524]	; 0x20c
   132a8:	bl	11c04 <strchr@plt>
   132ac:	cmp	r0, #0
   132b0:	beq	13348 <__assert_fail@plt+0x1528>
   132b4:	ldrb	r3, [r0, #1]
   132b8:	cmp	r3, #0
   132bc:	addne	r0, r0, #1
   132c0:	beq	13348 <__assert_fail@plt+0x1528>
   132c4:	ldr	r3, [pc, #144]	; 1335c <__assert_fail@plt+0x153c>
   132c8:	ldr	ip, [pc, #144]	; 13360 <__assert_fail@plt+0x1540>
   132cc:	ldr	r6, [pc, #144]	; 13364 <__assert_fail@plt+0x1544>
   132d0:	ldr	r1, [r3, #112]	; 0x70
   132d4:	ldr	r2, [r3, #116]	; 0x74
   132d8:	cmp	r1, #0
   132dc:	ldr	lr, [r3, #108]	; 0x6c
   132e0:	moveq	r1, ip
   132e4:	cmp	r2, #0
   132e8:	ldr	ip, [pc, #120]	; 13368 <__assert_fail@plt+0x1548>
   132ec:	moveq	r2, r6
   132f0:	mov	r3, #500	; 0x1f4
   132f4:	str	r0, [sp, #4]
   132f8:	str	r1, [sp, #8]
   132fc:	str	lr, [sp, #12]
   13300:	mov	r1, r3
   13304:	str	r2, [sp, #16]
   13308:	str	ip, [sp]
   1330c:	mov	r2, #1
   13310:	add	r0, sp, #24
   13314:	bl	11e08 <__snprintf_chk@plt>
   13318:	mov	r3, #0
   1331c:	add	r2, sp, #24
   13320:	mov	r0, r5
   13324:	ldr	r1, [pc, #64]	; 1336c <__assert_fail@plt+0x154c>
   13328:	strb	r3, [sp, #523]	; 0x20b
   1332c:	bl	11a00 <assuan_write_status@plt>
   13330:	ldr	r2, [sp, #524]	; 0x20c
   13334:	ldr	r3, [r4]
   13338:	cmp	r2, r3
   1333c:	bne	13350 <__assert_fail@plt+0x1530>
   13340:	add	sp, sp, #528	; 0x210
   13344:	pop	{r4, r5, r6, pc}
   13348:	ldr	r0, [pc, #8]	; 13358 <__assert_fail@plt+0x1538>
   1334c:	b	132c4 <__assert_fail@plt+0x14a4>
   13350:	bl	11a48 <__stack_chk_fail@plt>
   13354:	andeq	sl, r2, r0, lsl #26
   13358:	strdeq	fp, [r2], -ip
   1335c:	muleq	r2, r8, r3
   13360:	ldrdeq	r9, [r1], -r4
   13364:	andeq	sl, r1, r8, ror #12
   13368:	ldrdeq	r9, [r1], -r8
   1336c:	andeq	r9, r1, r4, ror #17
   13370:	mov	r3, r1
   13374:	push	{r4, r5, r6, r7, r8, lr}
   13378:	mov	r7, r0
   1337c:	ldr	r1, [pc, #244]	; 13478 <__assert_fail@plt+0x1658>
   13380:	mov	r0, r3
   13384:	bl	11904 <strstr@plt>
   13388:	ldr	r4, [pc, #236]	; 1347c <__assert_fail@plt+0x165c>
   1338c:	mov	r5, #0
   13390:	str	r5, [r4, #140]	; 0x8c
   13394:	str	r5, [r4, #120]	; 0x78
   13398:	str	r5, [r4, #104]	; 0x68
   1339c:	str	r5, [r4, #108]	; 0x6c
   133a0:	str	r5, [r4, #112]	; 0x70
   133a4:	subs	r3, r0, r5
   133a8:	movne	r3, #1
   133ac:	ldr	r0, [r4, #116]	; 0x74
   133b0:	str	r3, [r4, #124]	; 0x7c
   133b4:	bl	119b8 <free@plt>
   133b8:	add	r1, r4, #32
   133bc:	add	r0, r4, #28
   133c0:	str	r5, [r4, #116]	; 0x74
   133c4:	str	r5, [r4, #100]	; 0x64
   133c8:	bl	12710 <__assert_fail@plt+0x8f0>
   133cc:	ldr	r3, [pc, #172]	; 13480 <__assert_fail@plt+0x1660>
   133d0:	mov	r0, r4
   133d4:	ldr	r3, [r3]
   133d8:	blx	r3
   133dc:	mov	r6, r0
   133e0:	ldr	r0, [r4, #8]
   133e4:	cmp	r0, r5
   133e8:	beq	133f4 <__assert_fail@plt+0x15d4>
   133ec:	bl	119b8 <free@plt>
   133f0:	str	r5, [r4, #8]
   133f4:	ldr	r3, [r4, #120]	; 0x78
   133f8:	cmp	r3, #0
   133fc:	bne	1344c <__assert_fail@plt+0x162c>
   13400:	cmp	r6, #0
   13404:	bgt	13444 <__assert_fail@plt+0x1624>
   13408:	ldr	r3, [r4, #108]	; 0x6c
   1340c:	cmp	r3, #0
   13410:	bne	13460 <__assert_fail@plt+0x1640>
   13414:	ldr	r0, [r4, #104]	; 0x68
   13418:	cmp	r0, #0
   1341c:	bne	13470 <__assert_fail@plt+0x1650>
   13420:	ldr	r3, [r4, #124]	; 0x7c
   13424:	cmp	r3, #0
   13428:	popne	{r4, r5, r6, r7, r8, pc}
   1342c:	ldr	r2, [r4, #100]	; 0x64
   13430:	ldr	r3, [pc, #76]	; 13484 <__assert_fail@plt+0x1664>
   13434:	cmp	r2, #0
   13438:	ldr	r0, [pc, #72]	; 13488 <__assert_fail@plt+0x1668>
   1343c:	movne	r0, r3
   13440:	pop	{r4, r5, r6, r7, r8, pc}
   13444:	mov	r0, #0
   13448:	pop	{r4, r5, r6, r7, r8, pc}
   1344c:	ldr	r2, [pc, #56]	; 1348c <__assert_fail@plt+0x166c>
   13450:	ldr	r1, [pc, #56]	; 13490 <__assert_fail@plt+0x1670>
   13454:	mov	r0, r7
   13458:	bl	11a00 <assuan_write_status@plt>
   1345c:	b	13400 <__assert_fail@plt+0x15e0>
   13460:	mov	r0, r7
   13464:	bl	13288 <__assert_fail@plt+0x1468>
   13468:	ldr	r0, [r4, #108]	; 0x6c
   1346c:	pop	{r4, r5, r6, r7, r8, pc}
   13470:	ldr	r0, [pc, #28]	; 13494 <__assert_fail@plt+0x1674>
   13474:	pop	{r4, r5, r6, r7, r8, pc}
   13478:	andeq	r9, r1, ip, ror #17
   1347c:	muleq	r2, r8, r3
   13480:	andeq	fp, r2, r8
   13484:	streq	r0, [r0, #-99]	; 0xffffff9d
   13488:	streq	r0, [r0, #-114]	; 0xffffff8e
   1348c:	strdeq	r9, [r1], -ip
   13490:	andeq	r9, r1, r4, lsl #18
   13494:	streq	r0, [r0, #-166]	; 0xffffff5a
   13498:	ldr	r1, [pc]	; 134a0 <__assert_fail@plt+0x1680>
   1349c:	b	13370 <__assert_fail@plt+0x1550>
   134a0:	andeq	r9, r1, ip, ror #17
   134a4:	push	{r4, r5, r6, r7, r8, lr}
   134a8:	sub	sp, sp, #32
   134ac:	ldr	r5, [pc, #448]	; 13674 <__assert_fail@plt+0x1854>
   134b0:	mov	r6, r0
   134b4:	mov	r0, r1
   134b8:	ldr	r3, [r5]
   134bc:	mov	r4, r1
   134c0:	str	r1, [sp, #12]
   134c4:	str	r3, [sp, #28]
   134c8:	bl	11bec <strlen@plt>
   134cc:	cmp	r6, #0
   134d0:	add	r0, r0, #1
   134d4:	str	r0, [sp, #16]
   134d8:	beq	135f8 <__assert_fail@plt+0x17d8>
   134dc:	mov	r1, #0
   134e0:	mov	r0, r1
   134e4:	bl	11d00 <setlocale@plt>
   134e8:	bl	11a3c <strdup@plt>
   134ec:	subs	r4, r0, #0
   134f0:	beq	135f0 <__assert_fail@plt+0x17d0>
   134f4:	mov	r1, r6
   134f8:	mov	r0, #0
   134fc:	bl	11d00 <setlocale@plt>
   13500:	mov	r0, #14
   13504:	bl	11d30 <nl_langinfo@plt>
   13508:	ldr	r6, [pc, #360]	; 13678 <__assert_fail@plt+0x1858>
   1350c:	mov	r1, r4
   13510:	cmp	r0, #0
   13514:	movne	r6, r0
   13518:	mov	r0, #0
   1351c:	bl	11d00 <setlocale@plt>
   13520:	mov	r0, r4
   13524:	bl	119b8 <free@plt>
   13528:	ldr	r3, [sp, #16]
   1352c:	lsl	r3, r3, #4
   13530:	mov	r0, r3
   13534:	str	r3, [sp, #24]
   13538:	bl	11b2c <malloc@plt>
   1353c:	cmp	r0, #0
   13540:	mov	r4, r0
   13544:	str	r0, [sp, #20]
   13548:	beq	135f0 <__assert_fail@plt+0x17d0>
   1354c:	ldr	r1, [pc, #296]	; 1367c <__assert_fail@plt+0x185c>
   13550:	mov	r0, r6
   13554:	bl	11b38 <iconv_open@plt>
   13558:	cmn	r0, #1
   1355c:	mov	r7, r0
   13560:	beq	1364c <__assert_fail@plt+0x182c>
   13564:	add	r3, sp, #24
   13568:	str	r3, [sp]
   1356c:	add	r2, sp, #16
   13570:	add	r3, sp, #20
   13574:	add	r1, sp, #12
   13578:	bl	11928 <iconv@plt>
   1357c:	mov	r8, r0
   13580:	mov	r0, r7
   13584:	bl	1191c <iconv_close@plt>
   13588:	cmn	r8, #1
   1358c:	beq	135b8 <__assert_fail@plt+0x1798>
   13590:	ldr	r3, [sp, #16]
   13594:	cmp	r3, #0
   13598:	bne	135b8 <__assert_fail@plt+0x1798>
   1359c:	ldr	r2, [sp, #28]
   135a0:	ldr	r3, [r5]
   135a4:	mov	r0, r4
   135a8:	cmp	r2, r3
   135ac:	bne	13670 <__assert_fail@plt+0x1850>
   135b0:	add	sp, sp, #32
   135b4:	pop	{r4, r5, r6, r7, r8, pc}
   135b8:	ldr	r3, [pc, #192]	; 13680 <__assert_fail@plt+0x1860>
   135bc:	ldr	r7, [r3]
   135c0:	bl	11c40 <__errno_location@plt>
   135c4:	ldr	r0, [r0]
   135c8:	bl	11b50 <strerror@plt>
   135cc:	ldr	r3, [pc, #176]	; 13684 <__assert_fail@plt+0x1864>
   135d0:	ldr	r2, [pc, #176]	; 13688 <__assert_fail@plt+0x1868>
   135d4:	str	r6, [sp]
   135d8:	str	r0, [sp, #4]
   135dc:	mov	r1, #1
   135e0:	mov	r0, r7
   135e4:	bl	11cc4 <__fprintf_chk@plt>
   135e8:	mov	r0, r4
   135ec:	bl	119b8 <free@plt>
   135f0:	mov	r4, #0
   135f4:	b	1359c <__assert_fail@plt+0x177c>
   135f8:	ldr	r6, [pc, #132]	; 13684 <__assert_fail@plt+0x1864>
   135fc:	ldr	r3, [r6, #60]	; 0x3c
   13600:	cmp	r3, #0
   13604:	beq	13628 <__assert_fail@plt+0x1808>
   13608:	ldr	r2, [sp, #28]
   1360c:	ldr	r3, [r5]
   13610:	cmp	r2, r3
   13614:	bne	13670 <__assert_fail@plt+0x1850>
   13618:	mov	r0, r4
   1361c:	add	sp, sp, #32
   13620:	pop	{r4, r5, r6, r7, r8, lr}
   13624:	b	11a3c <strdup@plt>
   13628:	ldr	r1, [pc, #80]	; 13680 <__assert_fail@plt+0x1860>
   1362c:	mov	r3, r6
   13630:	ldr	r2, [pc, #84]	; 1368c <__assert_fail@plt+0x186c>
   13634:	ldr	r0, [r1]
   13638:	mov	r1, #1
   1363c:	bl	11cc4 <__fprintf_chk@plt>
   13640:	mov	r3, #1
   13644:	str	r3, [r6, #60]	; 0x3c
   13648:	b	13608 <__assert_fail@plt+0x17e8>
   1364c:	ldr	r3, [pc, #44]	; 13680 <__assert_fail@plt+0x1860>
   13650:	ldr	r7, [r3]
   13654:	bl	11c40 <__errno_location@plt>
   13658:	ldr	r0, [r0]
   1365c:	bl	11b50 <strerror@plt>
   13660:	str	r6, [sp]
   13664:	ldr	r3, [pc, #24]	; 13684 <__assert_fail@plt+0x1864>
   13668:	ldr	r2, [pc, #32]	; 13690 <__assert_fail@plt+0x1870>
   1366c:	b	135d8 <__assert_fail@plt+0x17b8>
   13670:	bl	11a48 <__stack_chk_fail@plt>
   13674:	andeq	sl, r2, r0, lsl #26
   13678:	ldrdeq	r9, [r1], -r4
   1367c:	andeq	r9, r1, r8, lsr r9
   13680:	andeq	fp, r2, r8, ror #5
   13684:	strdeq	fp, [r2], -ip
   13688:	andeq	r9, r1, r8, ror #18
   1368c:	andeq	r9, r1, r0, lsl r9
   13690:	andeq	r9, r1, r0, asr #18
   13694:	push	{r4, r5, r6, r7, r8, r9, lr}
   13698:	sub	sp, sp, #36	; 0x24
   1369c:	ldr	r5, [pc, #524]	; 138b0 <__assert_fail@plt+0x1a90>
   136a0:	mov	r4, r0
   136a4:	mov	r0, r1
   136a8:	ldr	r3, [r5]
   136ac:	str	r1, [sp, #12]
   136b0:	mov	r6, r2
   136b4:	str	r3, [sp, #28]
   136b8:	bl	11bec <strlen@plt>
   136bc:	cmp	r4, #0
   136c0:	add	r0, r0, #1
   136c4:	str	r0, [sp, #16]
   136c8:	beq	137b0 <__assert_fail@plt+0x1990>
   136cc:	mov	r1, #0
   136d0:	mov	r0, r1
   136d4:	bl	11d00 <setlocale@plt>
   136d8:	bl	11a3c <strdup@plt>
   136dc:	subs	r7, r0, #0
   136e0:	beq	13834 <__assert_fail@plt+0x1a14>
   136e4:	mov	r1, r4
   136e8:	mov	r0, #0
   136ec:	bl	11d00 <setlocale@plt>
   136f0:	mov	r0, #14
   136f4:	bl	11d30 <nl_langinfo@plt>
   136f8:	mov	r1, r7
   136fc:	mov	r8, r0
   13700:	mov	r0, #0
   13704:	bl	11d00 <setlocale@plt>
   13708:	mov	r0, r7
   1370c:	bl	119b8 <free@plt>
   13710:	ldr	r0, [sp, #16]
   13714:	cmp	r6, #0
   13718:	lsl	r0, r0, #4
   1371c:	str	r0, [sp, #24]
   13720:	bne	137a4 <__assert_fail@plt+0x1984>
   13724:	bl	11b2c <malloc@plt>
   13728:	mov	r4, r0
   1372c:	cmp	r4, #0
   13730:	str	r4, [sp, #20]
   13734:	beq	13834 <__assert_fail@plt+0x1a14>
   13738:	mov	r1, r8
   1373c:	ldr	r0, [pc, #368]	; 138b4 <__assert_fail@plt+0x1a94>
   13740:	bl	11b38 <iconv_open@plt>
   13744:	cmn	r0, #1
   13748:	mov	r7, r0
   1374c:	beq	1387c <__assert_fail@plt+0x1a5c>
   13750:	add	r3, sp, #24
   13754:	str	r3, [sp]
   13758:	add	r2, sp, #16
   1375c:	add	r3, sp, #20
   13760:	add	r1, sp, #12
   13764:	bl	11928 <iconv@plt>
   13768:	mov	r9, r0
   1376c:	mov	r0, r7
   13770:	bl	1191c <iconv_close@plt>
   13774:	cmn	r9, #1
   13778:	beq	137e8 <__assert_fail@plt+0x19c8>
   1377c:	ldr	r3, [sp, #16]
   13780:	cmp	r3, #0
   13784:	bne	137e8 <__assert_fail@plt+0x19c8>
   13788:	ldr	r2, [sp, #28]
   1378c:	ldr	r3, [r5]
   13790:	mov	r0, r4
   13794:	cmp	r2, r3
   13798:	bne	138ac <__assert_fail@plt+0x1a8c>
   1379c:	add	sp, sp, #36	; 0x24
   137a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   137a4:	bl	18f74 <__assert_fail@plt+0x7154>
   137a8:	mov	r4, r0
   137ac:	b	1372c <__assert_fail@plt+0x190c>
   137b0:	ldr	r4, [pc, #256]	; 138b8 <__assert_fail@plt+0x1a98>
   137b4:	ldr	r3, [r4, #60]	; 0x3c
   137b8:	cmp	r3, #0
   137bc:	beq	13848 <__assert_fail@plt+0x1a28>
   137c0:	cmp	r6, #0
   137c4:	bne	1383c <__assert_fail@plt+0x1a1c>
   137c8:	bl	11b2c <malloc@plt>
   137cc:	mov	r4, r0
   137d0:	cmp	r4, #0
   137d4:	beq	13788 <__assert_fail@plt+0x1968>
   137d8:	ldr	r1, [sp, #12]
   137dc:	mov	r0, r4
   137e0:	bl	11ad8 <strcpy@plt>
   137e4:	b	13788 <__assert_fail@plt+0x1968>
   137e8:	ldr	r2, [pc, #204]	; 138bc <__assert_fail@plt+0x1a9c>
   137ec:	ldr	r3, [pc, #204]	; 138c0 <__assert_fail@plt+0x1aa0>
   137f0:	cmp	r8, #0
   137f4:	moveq	r8, r3
   137f8:	ldr	r7, [r2]
   137fc:	bl	11c40 <__errno_location@plt>
   13800:	ldr	r0, [r0]
   13804:	bl	11b50 <strerror@plt>
   13808:	ldr	r3, [pc, #168]	; 138b8 <__assert_fail@plt+0x1a98>
   1380c:	ldr	r2, [pc, #176]	; 138c4 <__assert_fail@plt+0x1aa4>
   13810:	str	r8, [sp]
   13814:	str	r0, [sp, #4]
   13818:	mov	r1, #1
   1381c:	mov	r0, r7
   13820:	bl	11cc4 <__fprintf_chk@plt>
   13824:	cmp	r6, #0
   13828:	mov	r0, r4
   1382c:	beq	13870 <__assert_fail@plt+0x1a50>
   13830:	bl	190e0 <__assert_fail@plt+0x72c0>
   13834:	mov	r4, #0
   13838:	b	13788 <__assert_fail@plt+0x1968>
   1383c:	bl	18f74 <__assert_fail@plt+0x7154>
   13840:	mov	r4, r0
   13844:	b	137d0 <__assert_fail@plt+0x19b0>
   13848:	ldr	r1, [pc, #108]	; 138bc <__assert_fail@plt+0x1a9c>
   1384c:	mov	r3, r4
   13850:	ldr	r2, [pc, #112]	; 138c8 <__assert_fail@plt+0x1aa8>
   13854:	ldr	r0, [r1]
   13858:	mov	r1, #1
   1385c:	bl	11cc4 <__fprintf_chk@plt>
   13860:	mov	r3, #1
   13864:	ldr	r0, [sp, #16]
   13868:	str	r3, [r4, #60]	; 0x3c
   1386c:	b	137c0 <__assert_fail@plt+0x19a0>
   13870:	bl	119b8 <free@plt>
   13874:	mov	r4, r6
   13878:	b	13788 <__assert_fail@plt+0x1968>
   1387c:	ldr	r2, [pc, #56]	; 138bc <__assert_fail@plt+0x1a9c>
   13880:	ldr	r3, [pc, #56]	; 138c0 <__assert_fail@plt+0x1aa0>
   13884:	cmp	r8, #0
   13888:	moveq	r8, r3
   1388c:	ldr	r7, [r2]
   13890:	bl	11c40 <__errno_location@plt>
   13894:	ldr	r0, [r0]
   13898:	bl	11b50 <strerror@plt>
   1389c:	str	r8, [sp]
   138a0:	ldr	r3, [pc, #16]	; 138b8 <__assert_fail@plt+0x1a98>
   138a4:	ldr	r2, [pc, #32]	; 138cc <__assert_fail@plt+0x1aac>
   138a8:	b	13814 <__assert_fail@plt+0x19f4>
   138ac:	bl	11a48 <__stack_chk_fail@plt>
   138b0:	andeq	sl, r2, r0, lsl #26
   138b4:	andeq	r9, r1, r8, lsr r9
   138b8:	strdeq	fp, [r2], -ip
   138bc:	andeq	fp, r2, r8, ror #5
   138c0:	ldrdeq	r9, [r1], -r4
   138c4:			; <UNDEFINED> instruction: 0x000199bc
   138c8:	andeq	r9, r1, r0, lsl r9
   138cc:	muleq	r1, r4, r9
   138d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   138d4:	sub	sp, sp, #816	; 0x330
   138d8:	ldr	r6, [pc, #936]	; 13c88 <__assert_fail@plt+0x1e68>
   138dc:	ldr	r5, [r0]
   138e0:	ldr	r3, [r6]
   138e4:	cmp	r5, #0
   138e8:	str	r3, [sp, #812]	; 0x32c
   138ec:	beq	13910 <__assert_fail@plt+0x1af0>
   138f0:	mov	r0, r5
   138f4:	bl	11a3c <strdup@plt>
   138f8:	ldr	r2, [sp, #812]	; 0x32c
   138fc:	ldr	r3, [r6]
   13900:	cmp	r2, r3
   13904:	bne	13c84 <__assert_fail@plt+0x1e64>
   13908:	add	sp, sp, #816	; 0x330
   1390c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13910:	ldr	r2, [r0, #76]	; 0x4c
   13914:	mov	r4, r0
   13918:	cmp	r2, #0
   1391c:	beq	139a4 <__assert_fail@plt+0x1b84>
   13920:	ldr	r7, [r0, #84]	; 0x54
   13924:	cmp	r7, #0
   13928:	beq	13998 <__assert_fail@plt+0x1b78>
   1392c:	add	r0, sp, #20
   13930:	bl	11a24 <uname@plt>
   13934:	cmp	r0, #0
   13938:	beq	139c4 <__assert_fail@plt+0x1ba4>
   1393c:	ldr	r2, [r4, #76]	; 0x4c
   13940:	add	r8, sp, #412	; 0x19c
   13944:	ldr	r7, [r4, #84]	; 0x54
   13948:	cmp	r7, #0
   1394c:	moveq	r9, r7
   13950:	bne	139e4 <__assert_fail@plt+0x1bc4>
   13954:	ldr	r1, [pc, #816]	; 13c8c <__assert_fail@plt+0x1e6c>
   13958:	mov	r3, #200	; 0xc8
   1395c:	mov	r0, r8
   13960:	stm	sp, {r1, r2}
   13964:	mov	r1, r3
   13968:	mov	r2, #1
   1396c:	bl	11e08 <__snprintf_chk@plt>
   13970:	mov	r5, r7
   13974:	mov	r3, #0
   13978:	mov	r0, r5
   1397c:	strb	r3, [sp, #611]	; 0x263
   13980:	bl	119b8 <free@plt>
   13984:	mov	r0, r9
   13988:	bl	119b8 <free@plt>
   1398c:	mov	r0, r8
   13990:	bl	11a3c <strdup@plt>
   13994:	b	138f8 <__assert_fail@plt+0x1ad8>
   13998:	mov	r9, r7
   1399c:	add	r8, sp, #412	; 0x19c
   139a0:	b	13954 <__assert_fail@plt+0x1b34>
   139a4:	ldr	r2, [sp, #812]	; 0x32c
   139a8:	ldr	r3, [r6]
   139ac:	cmp	r2, r3
   139b0:	bne	13c84 <__assert_fail@plt+0x1e64>
   139b4:	ldr	r0, [pc, #724]	; 13c90 <__assert_fail@plt+0x1e70>
   139b8:	add	sp, sp, #816	; 0x330
   139bc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   139c0:	b	11a3c <strdup@plt>
   139c4:	ldr	r7, [r4, #84]	; 0x54
   139c8:	add	r0, sp, #85	; 0x55
   139cc:	mov	r1, r7
   139d0:	bl	11940 <strcmp@plt>
   139d4:	ldr	r2, [r4, #76]	; 0x4c
   139d8:	cmp	r0, #0
   139dc:	addne	r8, sp, #412	; 0x19c
   139e0:	beq	13a08 <__assert_fail@plt+0x1be8>
   139e4:	ldr	r1, [pc, #680]	; 13c94 <__assert_fail@plt+0x1e74>
   139e8:	mov	r3, #200	; 0xc8
   139ec:	mov	r0, r8
   139f0:	stm	sp, {r1, r2, r7}
   139f4:	mov	r1, r3
   139f8:	mov	r2, #1
   139fc:	bl	11e08 <__snprintf_chk@plt>
   13a00:	mov	r9, #0
   13a04:	b	13974 <__assert_fail@plt+0x1b54>
   13a08:	ldr	r1, [pc, #648]	; 13c98 <__assert_fail@plt+0x1e78>
   13a0c:	mov	r3, #400	; 0x190
   13a10:	add	r8, sp, #412	; 0x19c
   13a14:	stm	sp, {r1, r2}
   13a18:	mov	r0, r8
   13a1c:	mov	r1, r3
   13a20:	mov	r2, #1
   13a24:	ldr	r9, [r4, #80]	; 0x50
   13a28:	bl	11e08 <__snprintf_chk@plt>
   13a2c:	mov	r0, r8
   13a30:	ldr	r1, [pc, #612]	; 13c9c <__assert_fail@plt+0x1e7c>
   13a34:	strb	r5, [sp, #811]	; 0x32b
   13a38:	bl	11970 <fopen@plt>
   13a3c:	subs	r7, r0, #0
   13a40:	beq	13c04 <__assert_fail@plt+0x1de4>
   13a44:	mov	r3, r7
   13a48:	ldr	r2, [pc, #592]	; 13ca0 <__assert_fail@plt+0x1e80>
   13a4c:	mov	r1, #1
   13a50:	mov	r0, r8
   13a54:	bl	11af0 <fread@plt>
   13a58:	ldr	r3, [pc, #580]	; 13ca4 <__assert_fail@plt+0x1e84>
   13a5c:	mov	sl, r0
   13a60:	cmp	sl, r3
   13a64:	mov	r0, r7
   13a68:	bhi	13c0c <__assert_fail@plt+0x1dec>
   13a6c:	bl	119d0 <ferror@plt>
   13a70:	cmp	r0, #0
   13a74:	mov	r0, r7
   13a78:	bne	13c50 <__assert_fail@plt+0x1e30>
   13a7c:	bl	11cdc <fclose@plt>
   13a80:	cmp	sl, #0
   13a84:	beq	13c04 <__assert_fail@plt+0x1de4>
   13a88:	mov	r2, #6
   13a8c:	ldr	r1, [pc, #532]	; 13ca8 <__assert_fail@plt+0x1e88>
   13a90:	mov	r0, r8
   13a94:	bl	11dd8 <strncmp@plt>
   13a98:	subs	sl, r0, #0
   13a9c:	bne	13c04 <__assert_fail@plt+0x1de4>
   13aa0:	add	r7, r8, #6
   13aa4:	ldr	r1, [pc, #512]	; 13cac <__assert_fail@plt+0x1e8c>
   13aa8:	mov	r0, r7
   13aac:	bl	11958 <strcspn@plt>
   13ab0:	add	r3, sp, #816	; 0x330
   13ab4:	ldr	r1, [pc, #500]	; 13cb0 <__assert_fail@plt+0x1e90>
   13ab8:	add	r3, r3, r0
   13abc:	add	r0, r0, #7
   13ac0:	add	r0, r8, r0
   13ac4:	strb	sl, [r3, #-398]	; 0xfffffe72
   13ac8:	bl	11904 <strstr@plt>
   13acc:	cmp	r0, #0
   13ad0:	beq	13c04 <__assert_fail@plt+0x1de4>
   13ad4:	add	r0, r0, #6
   13ad8:	mov	r2, #10
   13adc:	mov	r1, sl
   13ae0:	bl	1194c <strtol@plt>
   13ae4:	cmp	r9, r0
   13ae8:	bne	13c04 <__assert_fail@plt+0x1de4>
   13aec:	mov	r0, r7
   13af0:	bl	11a3c <strdup@plt>
   13af4:	ldr	r2, [r4, #76]	; 0x4c
   13af8:	subs	r7, r0, #0
   13afc:	beq	13944 <__assert_fail@plt+0x1b24>
   13b00:	ldr	r1, [pc, #428]	; 13cb4 <__assert_fail@plt+0x1e94>
   13b04:	mov	r3, #200	; 0xc8
   13b08:	mov	r0, r8
   13b0c:	stm	sp, {r1, r2}
   13b10:	mov	r1, r3
   13b14:	mov	r2, #1
   13b18:	bl	11e08 <__snprintf_chk@plt>
   13b1c:	ldr	r1, [pc, #376]	; 13c9c <__assert_fail@plt+0x1e7c>
   13b20:	mov	r0, r8
   13b24:	strb	sl, [sp, #611]	; 0x263
   13b28:	bl	11970 <fopen@plt>
   13b2c:	subs	r9, r0, #0
   13b30:	beq	13c1c <__assert_fail@plt+0x1dfc>
   13b34:	mov	r3, r9
   13b38:	mov	r2, #199	; 0xc7
   13b3c:	mov	r1, #1
   13b40:	mov	r0, r8
   13b44:	bl	11af0 <fread@plt>
   13b48:	mov	r5, r0
   13b4c:	cmp	r5, #198	; 0xc6
   13b50:	mov	r0, r9
   13b54:	bhi	13c14 <__assert_fail@plt+0x1df4>
   13b58:	bl	119d0 <ferror@plt>
   13b5c:	cmp	r0, #0
   13b60:	mov	r0, r9
   13b64:	bne	13c5c <__assert_fail@plt+0x1e3c>
   13b68:	bl	11cdc <fclose@plt>
   13b6c:	cmp	r5, #0
   13b70:	beq	13c34 <__assert_fail@plt+0x1e14>
   13b74:	sub	r2, r8, #1
   13b78:	mov	r3, #0
   13b7c:	sub	r0, r5, #1
   13b80:	mov	ip, #32
   13b84:	ldrb	r1, [r2, #1]!
   13b88:	cmp	r1, #0
   13b8c:	bne	13b98 <__assert_fail@plt+0x1d78>
   13b90:	cmp	r0, r3
   13b94:	strbhi	ip, [r2]
   13b98:	add	r3, r3, #1
   13b9c:	cmp	r5, r3
   13ba0:	bhi	13b84 <__assert_fail@plt+0x1d64>
   13ba4:	add	r2, sp, #816	; 0x330
   13ba8:	add	r3, r2, r3
   13bac:	mov	r0, r8
   13bb0:	mov	r2, #0
   13bb4:	strb	r2, [r3, #-404]	; 0xfffffe6c
   13bb8:	bl	11a3c <strdup@plt>
   13bbc:	ldr	ip, [r4, #84]	; 0x54
   13bc0:	ldr	r2, [r4, #76]	; 0x4c
   13bc4:	cmp	ip, #0
   13bc8:	mov	r9, r0
   13bcc:	beq	13954 <__assert_fail@plt+0x1b34>
   13bd0:	cmp	r0, #0
   13bd4:	movne	r1, r0
   13bd8:	moveq	r1, r7
   13bdc:	ldr	r0, [pc, #212]	; 13cb8 <__assert_fail@plt+0x1e98>
   13be0:	mov	r3, #200	; 0xc8
   13be4:	str	r1, [sp, #12]
   13be8:	stm	sp, {r0, r2, ip}
   13bec:	mov	r1, r3
   13bf0:	mov	r2, #1
   13bf4:	mov	r0, r8
   13bf8:	mov	r5, r7
   13bfc:	bl	11e08 <__snprintf_chk@plt>
   13c00:	b	13974 <__assert_fail@plt+0x1b54>
   13c04:	ldr	r2, [r4, #76]	; 0x4c
   13c08:	b	13944 <__assert_fail@plt+0x1b24>
   13c0c:	bl	11cdc <fclose@plt>
   13c10:	b	13a88 <__assert_fail@plt+0x1c68>
   13c14:	bl	11cdc <fclose@plt>
   13c18:	b	13b74 <__assert_fail@plt+0x1d54>
   13c1c:	ldr	ip, [r4, #84]	; 0x54
   13c20:	ldr	r2, [r4, #76]	; 0x4c
   13c24:	cmp	ip, #0
   13c28:	beq	13954 <__assert_fail@plt+0x1b34>
   13c2c:	mov	r1, r7
   13c30:	b	13bdc <__assert_fail@plt+0x1dbc>
   13c34:	ldr	ip, [r4, #84]	; 0x54
   13c38:	ldr	r2, [r4, #76]	; 0x4c
   13c3c:	cmp	ip, #0
   13c40:	moveq	r9, ip
   13c44:	beq	13954 <__assert_fail@plt+0x1b34>
   13c48:	mov	r9, r5
   13c4c:	b	13c2c <__assert_fail@plt+0x1e0c>
   13c50:	bl	11cdc <fclose@plt>
   13c54:	ldr	r2, [r4, #76]	; 0x4c
   13c58:	b	13944 <__assert_fail@plt+0x1b24>
   13c5c:	bl	11cdc <fclose@plt>
   13c60:	ldr	r9, [r4, #84]	; 0x54
   13c64:	cmp	r9, #0
   13c68:	ldreq	r2, [r4, #76]	; 0x4c
   13c6c:	beq	13954 <__assert_fail@plt+0x1b34>
   13c70:	mov	ip, r9
   13c74:	ldr	r2, [r4, #76]	; 0x4c
   13c78:	mov	r9, sl
   13c7c:	mov	r1, r7
   13c80:	b	13bdc <__assert_fail@plt+0x1dbc>
   13c84:	bl	11a48 <__stack_chk_fail@plt>
   13c88:	andeq	sl, r2, r0, lsl #26
   13c8c:	andeq	r9, r1, r4, lsr sl
   13c90:	strdeq	fp, [r2], -ip
   13c94:	andeq	r9, r1, ip, asr #20
   13c98:	andeq	r9, r1, r8, ror #19
   13c9c:	strdeq	r9, [r1], -ip
   13ca0:	andeq	r0, r0, pc, lsl #3
   13ca4:	andeq	r0, r0, lr, lsl #3
   13ca8:	andeq	r9, r1, r0, lsl #20
   13cac:	andeq	sl, r1, r4, asr #8
   13cb0:	andeq	r9, r1, r8, lsl #20
   13cb4:	andeq	r9, r1, r0, lsl sl
   13cb8:	andeq	r9, r1, r4, lsr #20
   13cbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cc0:	mov	r9, r1
   13cc4:	ldr	lr, [pc, #620]	; 13f38 <__assert_fail@plt+0x2118>
   13cc8:	ldr	r5, [r0, #212]	; 0xd4
   13ccc:	mov	r4, r2
   13cd0:	ldm	lr!, {r0, r1, r2, r3}
   13cd4:	sub	sp, sp, #44	; 0x2c
   13cd8:	ldr	fp, [pc, #604]	; 13f3c <__assert_fail@plt+0x211c>
   13cdc:	add	ip, sp, #16
   13ce0:	ldr	lr, [lr]
   13ce4:	stmia	ip!, {r0, r1, r2, r3}
   13ce8:	cmp	r5, #0
   13cec:	ldr	r3, [fp]
   13cf0:	strb	lr, [ip]
   13cf4:	str	r3, [sp, #36]	; 0x24
   13cf8:	beq	13e78 <__assert_fail@plt+0x2058>
   13cfc:	cmp	r4, #300	; 0x12c
   13d00:	movcc	r8, r4
   13d04:	movcs	r8, #300	; 0x12c
   13d08:	add	r0, r8, r8, lsl #1
   13d0c:	add	r0, r0, #17
   13d10:	bl	18f74 <__assert_fail@plt+0x7154>
   13d14:	subs	sl, r0, #0
   13d18:	beq	13e78 <__assert_fail@plt+0x2058>
   13d1c:	add	ip, sp, #16
   13d20:	mov	r6, sl
   13d24:	ldm	ip!, {r0, r1, r2, r3}
   13d28:	cmp	r4, #0
   13d2c:	subne	r4, r9, #1
   13d30:	ldrb	ip, [ip]
   13d34:	str	r0, [sl]
   13d38:	str	r1, [sl, #4]
   13d3c:	str	r2, [sl, #8]
   13d40:	str	r3, [sl, #12]
   13d44:	strb	ip, [r6, #16]!
   13d48:	bne	13d78 <__assert_fail@plt+0x1f58>
   13d4c:	b	13db4 <__assert_fail@plt+0x1f94>
   13d50:	cmp	r3, #32
   13d54:	add	r2, r6, #1
   13d58:	moveq	r3, #43	; 0x2b
   13d5c:	strb	r3, [r6]
   13d60:	mov	r6, r2
   13d64:	add	r4, r4, #2
   13d68:	sub	r4, r4, r9
   13d6c:	cmp	r8, r4
   13d70:	mov	r4, r7
   13d74:	bls	13db4 <__assert_fail@plt+0x1f94>
   13d78:	ldrb	r3, [r4, #1]
   13d7c:	add	r7, r4, #1
   13d80:	cmp	r3, #43	; 0x2b
   13d84:	cmpne	r3, #31
   13d88:	bhi	13d50 <__assert_fail@plt+0x1f30>
   13d8c:	str	r3, [sp, #4]
   13d90:	ldr	r3, [pc, #424]	; 13f40 <__assert_fail@plt+0x2120>
   13d94:	mov	r0, r6
   13d98:	str	r3, [sp]
   13d9c:	mov	r2, #1
   13da0:	mvn	r3, #0
   13da4:	mov	r1, #4
   13da8:	bl	11e08 <__snprintf_chk@plt>
   13dac:	add	r6, r6, #3
   13db0:	b	13d64 <__assert_fail@plt+0x1f44>
   13db4:	mov	r1, sl
   13db8:	mov	r0, r5
   13dbc:	bl	11a60 <assuan_write_line@plt>
   13dc0:	mov	r4, r0
   13dc4:	mov	r0, sl
   13dc8:	bl	190e0 <__assert_fail@plt+0x72c0>
   13dcc:	cmp	r4, #0
   13dd0:	bne	13e60 <__assert_fail@plt+0x2040>
   13dd4:	mov	r7, r4
   13dd8:	mov	r6, r4
   13ddc:	add	r2, sp, #12
   13de0:	add	r1, sp, #8
   13de4:	mov	r0, r5
   13de8:	bl	11cf4 <assuan_read_line@plt>
   13dec:	cmp	r0, #0
   13df0:	bne	13f18 <__assert_fail@plt+0x20f8>
   13df4:	ldr	r0, [sp, #8]
   13df8:	ldrb	r3, [r0]
   13dfc:	cmp	r3, #35	; 0x23
   13e00:	beq	13ddc <__assert_fail@plt+0x1fbc>
   13e04:	ldr	r2, [sp, #12]
   13e08:	cmp	r2, #0
   13e0c:	beq	13ddc <__assert_fail@plt+0x1fbc>
   13e10:	cmp	r3, #69	; 0x45
   13e14:	beq	13ee4 <__assert_fail@plt+0x20c4>
   13e18:	cmp	r3, #67	; 0x43
   13e1c:	bne	13e98 <__assert_fail@plt+0x2078>
   13e20:	ldrb	r3, [r0, #1]
   13e24:	cmp	r3, #65	; 0x41
   13e28:	bne	13ddc <__assert_fail@plt+0x1fbc>
   13e2c:	ldrb	r3, [r0, #2]
   13e30:	cmp	r3, #78	; 0x4e
   13e34:	bne	13ddc <__assert_fail@plt+0x1fbc>
   13e38:	ldrb	r3, [r0, #3]
   13e3c:	tst	r3, #223	; 0xdf
   13e40:	bne	13ddc <__assert_fail@plt+0x1fbc>
   13e44:	cmp	r7, #100	; 0x64
   13e48:	movlt	r4, r7
   13e4c:	mvn	r3, #99	; 0x63
   13e50:	movge	r4, #100	; 0x64
   13e54:	cmp	r4, r3
   13e58:	movlt	r4, r3
   13e5c:	b	13e7c <__assert_fail@plt+0x205c>
   13e60:	ldr	r1, [pc, #220]	; 13f44 <__assert_fail@plt+0x2124>
   13e64:	mov	r3, r4
   13e68:	ldr	r2, [pc, #216]	; 13f48 <__assert_fail@plt+0x2128>
   13e6c:	ldr	r0, [r1]
   13e70:	mov	r1, #1
   13e74:	bl	11cc4 <__fprintf_chk@plt>
   13e78:	mov	r4, #0
   13e7c:	ldr	r2, [sp, #36]	; 0x24
   13e80:	ldr	r3, [fp]
   13e84:	mov	r0, r4
   13e88:	cmp	r2, r3
   13e8c:	bne	13f34 <__assert_fail@plt+0x2114>
   13e90:	add	sp, sp, #44	; 0x2c
   13e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e98:	cmp	r3, #68	; 0x44
   13e9c:	bne	13ddc <__assert_fail@plt+0x1fbc>
   13ea0:	ldrb	r3, [r0, #1]
   13ea4:	cmp	r2, #2
   13ea8:	movhi	r2, #0
   13eac:	movls	r2, #1
   13eb0:	cmp	r3, #32
   13eb4:	orrne	r2, r2, #1
   13eb8:	cmp	r2, #0
   13ebc:	bne	13ddc <__assert_fail@plt+0x1fbc>
   13ec0:	cmp	r6, #0
   13ec4:	bne	13ddc <__assert_fail@plt+0x1fbc>
   13ec8:	mov	r1, r6
   13ecc:	add	r0, r0, #2
   13ed0:	mov	r2, #10
   13ed4:	bl	1194c <strtol@plt>
   13ed8:	mov	r6, #1
   13edc:	mov	r7, r0
   13ee0:	b	13ddc <__assert_fail@plt+0x1fbc>
   13ee4:	ldrb	r3, [r0, #1]
   13ee8:	cmp	r3, #78	; 0x4e
   13eec:	beq	13f08 <__assert_fail@plt+0x20e8>
   13ef0:	cmp	r3, #82	; 0x52
   13ef4:	bne	13ddc <__assert_fail@plt+0x1fbc>
   13ef8:	ldrb	r3, [r0, #2]
   13efc:	cmp	r3, #82	; 0x52
   13f00:	bne	13ddc <__assert_fail@plt+0x1fbc>
   13f04:	b	13e38 <__assert_fail@plt+0x2018>
   13f08:	ldrb	r3, [r0, #2]
   13f0c:	cmp	r3, #68	; 0x44
   13f10:	bne	13ddc <__assert_fail@plt+0x1fbc>
   13f14:	b	13e38 <__assert_fail@plt+0x2018>
   13f18:	ldr	r1, [pc, #36]	; 13f44 <__assert_fail@plt+0x2124>
   13f1c:	mov	r3, r0
   13f20:	ldr	r2, [pc, #36]	; 13f4c <__assert_fail@plt+0x212c>
   13f24:	ldr	r0, [r1]
   13f28:	mov	r1, #1
   13f2c:	bl	11cc4 <__fprintf_chk@plt>
   13f30:	b	13e7c <__assert_fail@plt+0x205c>
   13f34:	bl	11a48 <__stack_chk_fail@plt>
   13f38:	andeq	r9, r1, r4, lsr #21
   13f3c:	andeq	sl, r2, r0, lsl #26
   13f40:	andeq	r9, r1, r8, asr sl
   13f44:	andeq	fp, r2, r8, ror #5
   13f48:	andeq	r9, r1, r0, ror #20
   13f4c:	andeq	r9, r1, r4, lsl #21
   13f50:	ldr	r3, [r0, #32]
   13f54:	push	{r4, r5, r6, lr}
   13f58:	cmp	r3, #0
   13f5c:	mov	r6, r0
   13f60:	ldr	r5, [r0, #28]
   13f64:	beq	13f8c <__assert_fail@plt+0x216c>
   13f68:	cmp	r5, #0
   13f6c:	beq	13fd8 <__assert_fail@plt+0x21b8>
   13f70:	cmp	r1, #2048	; 0x800
   13f74:	movge	r4, r1
   13f78:	movlt	r4, #2048	; 0x800
   13f7c:	cmp	r3, r4
   13f80:	blt	13fa0 <__assert_fail@plt+0x2180>
   13f84:	mov	r0, r5
   13f88:	pop	{r4, r5, r6, pc}
   13f8c:	cmp	r5, #0
   13f90:	bne	13fec <__assert_fail@plt+0x21cc>
   13f94:	cmp	r1, #2048	; 0x800
   13f98:	movge	r4, r1
   13f9c:	movlt	r4, #2048	; 0x800
   13fa0:	mov	r0, r5
   13fa4:	mov	r1, r4
   13fa8:	bl	19188 <__assert_fail@plt+0x7368>
   13fac:	subs	r5, r0, #0
   13fb0:	beq	13fc4 <__assert_fail@plt+0x21a4>
   13fb4:	str	r5, [r6, #28]
   13fb8:	str	r4, [r6, #32]
   13fbc:	mov	r0, r5
   13fc0:	pop	{r4, r5, r6, pc}
   13fc4:	ldr	r0, [r6, #28]
   13fc8:	bl	190e0 <__assert_fail@plt+0x72c0>
   13fcc:	str	r5, [r6, #28]
   13fd0:	str	r5, [r6, #32]
   13fd4:	b	13f84 <__assert_fail@plt+0x2164>
   13fd8:	ldr	r3, [pc, #32]	; 14000 <__assert_fail@plt+0x21e0>
   13fdc:	ldr	r2, [pc, #32]	; 14004 <__assert_fail@plt+0x21e4>
   13fe0:	ldr	r1, [pc, #32]	; 14008 <__assert_fail@plt+0x21e8>
   13fe4:	ldr	r0, [pc, #32]	; 1400c <__assert_fail@plt+0x21ec>
   13fe8:	bl	11e20 <__assert_fail@plt>
   13fec:	ldr	r3, [pc, #12]	; 14000 <__assert_fail@plt+0x21e0>
   13ff0:	mov	r2, #640	; 0x280
   13ff4:	ldr	r1, [pc, #12]	; 14008 <__assert_fail@plt+0x21e8>
   13ff8:	ldr	r0, [pc, #16]	; 14010 <__assert_fail@plt+0x21f0>
   13ffc:	bl	11e20 <__assert_fail@plt>
   14000:	andeq	r9, r1, r0, ror #9
   14004:	andeq	r0, r0, lr, ror r2
   14008:	andeq	r9, r1, ip, lsl r7
   1400c:			; <UNDEFINED> instruction: 0x00019ab8
   14010:	andeq	r9, r1, r4, asr #21
   14014:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14018:	sub	sp, sp, #8
   1401c:	ldr	r8, [pc, #756]	; 14318 <__assert_fail@plt+0x24f8>
   14020:	ldr	r1, [pc, #756]	; 1431c <__assert_fail@plt+0x24fc>
   14024:	mov	r9, r0
   14028:	ldr	r3, [r8]
   1402c:	sub	r4, r1, #32
   14030:	sub	r0, r1, #4
   14034:	str	r3, [sp, #4]
   14038:	bl	12710 <__assert_fail@plt+0x8f0>
   1403c:	mov	r0, r4
   14040:	mov	r1, #0
   14044:	bl	13f50 <__assert_fail@plt+0x2130>
   14048:	ldr	r3, [r4, #28]
   1404c:	cmp	r3, #0
   14050:	beq	1430c <__assert_fail@plt+0x24ec>
   14054:	ldr	r3, [r4, #128]	; 0x80
   14058:	cmp	r3, #0
   1405c:	beq	141cc <__assert_fail@plt+0x23ac>
   14060:	ldr	r2, [r4, #12]
   14064:	mov	r3, #0
   14068:	cmp	r2, r3
   1406c:	str	r3, [r4, #36]	; 0x24
   14070:	movne	r7, r3
   14074:	beq	14284 <__assert_fail@plt+0x2464>
   14078:	mov	r5, #0
   1407c:	ldr	r0, [r4, #116]	; 0x74
   14080:	str	r5, [r4, #104]	; 0x68
   14084:	str	r5, [r4, #108]	; 0x6c
   14088:	str	r5, [r4, #112]	; 0x70
   1408c:	bl	119b8 <free@plt>
   14090:	ldr	r3, [pc, #648]	; 14320 <__assert_fail@plt+0x2500>
   14094:	str	r5, [r4, #116]	; 0x74
   14098:	str	r5, [r4, #120]	; 0x78
   1409c:	str	r5, [r4, #136]	; 0x88
   140a0:	str	r5, [r4, #124]	; 0x7c
   140a4:	str	r9, [r4, #212]	; 0xd4
   140a8:	ldr	r3, [r3]
   140ac:	ldr	r0, [pc, #624]	; 14324 <__assert_fail@plt+0x2504>
   140b0:	blx	r3
   140b4:	str	r5, [r4, #212]	; 0xd4
   140b8:	mov	r6, r0
   140bc:	ldr	r0, [r4, #8]
   140c0:	cmp	r0, r5
   140c4:	beq	140d0 <__assert_fail@plt+0x22b0>
   140c8:	bl	119b8 <free@plt>
   140cc:	str	r5, [r4, #8]
   140d0:	ldr	r0, [r4, #128]	; 0x80
   140d4:	cmp	r0, #0
   140d8:	beq	140e8 <__assert_fail@plt+0x22c8>
   140dc:	bl	119b8 <free@plt>
   140e0:	mov	r3, #0
   140e4:	str	r3, [r4, #128]	; 0x80
   140e8:	cmp	r7, #0
   140ec:	movne	r3, #0
   140f0:	ldr	r2, [r4, #120]	; 0x78
   140f4:	strne	r3, [r4, #12]
   140f8:	mov	r3, #0
   140fc:	cmp	r2, r3
   14100:	str	r3, [r4, #140]	; 0x8c
   14104:	bne	14180 <__assert_fail@plt+0x2360>
   14108:	cmp	r6, #0
   1410c:	movge	r5, #0
   14110:	blt	1419c <__assert_fail@plt+0x237c>
   14114:	cmp	r6, #0
   14118:	beq	14158 <__assert_fail@plt+0x2338>
   1411c:	ldr	r3, [r4, #136]	; 0x88
   14120:	cmp	r3, #0
   14124:	bne	142e0 <__assert_fail@plt+0x24c0>
   14128:	ldr	r6, [r4, #28]
   1412c:	mov	r0, r6
   14130:	bl	11bec <strlen@plt>
   14134:	mov	r1, r6
   14138:	mov	r2, r0
   1413c:	mov	r0, r9
   14140:	bl	11c34 <assuan_send_data@plt>
   14144:	subs	r6, r0, #0
   14148:	beq	142f4 <__assert_fail@plt+0x24d4>
   1414c:	ldr	r3, [r4, #196]	; 0xc4
   14150:	cmp	r3, #0
   14154:	bne	142a0 <__assert_fail@plt+0x2480>
   14158:	ldr	r1, [pc, #444]	; 1431c <__assert_fail@plt+0x24fc>
   1415c:	sub	r0, r1, #4
   14160:	bl	12710 <__assert_fail@plt+0x8f0>
   14164:	ldr	r2, [sp, #4]
   14168:	ldr	r3, [r8]
   1416c:	mov	r0, r6
   14170:	cmp	r2, r3
   14174:	bne	14314 <__assert_fail@plt+0x24f4>
   14178:	add	sp, sp, #8
   1417c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14180:	ldr	r2, [pc, #416]	; 14328 <__assert_fail@plt+0x2508>
   14184:	ldr	r1, [pc, #416]	; 1432c <__assert_fail@plt+0x250c>
   14188:	mov	r0, r9
   1418c:	bl	11a00 <assuan_write_status@plt>
   14190:	cmp	r6, #0
   14194:	movge	r5, #0
   14198:	bge	14114 <__assert_fail@plt+0x22f4>
   1419c:	ldr	r1, [pc, #376]	; 1431c <__assert_fail@plt+0x24fc>
   141a0:	sub	r0, r1, #4
   141a4:	bl	12710 <__assert_fail@plt+0x8f0>
   141a8:	ldr	r3, [r4, #108]	; 0x6c
   141ac:	cmp	r3, #0
   141b0:	bne	142d0 <__assert_fail@plt+0x24b0>
   141b4:	ldr	r3, [r4, #104]	; 0x68
   141b8:	ldr	r2, [pc, #368]	; 14330 <__assert_fail@plt+0x2510>
   141bc:	cmp	r3, #0
   141c0:	ldr	r6, [pc, #364]	; 14334 <__assert_fail@plt+0x2514>
   141c4:	moveq	r6, r2
   141c8:	b	14164 <__assert_fail@plt+0x2344>
   141cc:	ldr	r3, [r4, #196]	; 0xc4
   141d0:	cmp	r3, #0
   141d4:	beq	14060 <__assert_fail@plt+0x2240>
   141d8:	ldr	r0, [r4, #204]	; 0xcc
   141dc:	cmp	r0, #0
   141e0:	beq	14060 <__assert_fail@plt+0x2240>
   141e4:	ldr	r3, [r4, #200]	; 0xc8
   141e8:	cmp	r3, #0
   141ec:	bne	14060 <__assert_fail@plt+0x2240>
   141f0:	ldr	r5, [r4, #8]
   141f4:	cmp	r5, #0
   141f8:	bne	14060 <__assert_fail@plt+0x2240>
   141fc:	mov	r3, #1
   14200:	mov	r1, sp
   14204:	str	r3, [r4, #200]	; 0xc8
   14208:	str	r5, [sp]
   1420c:	bl	16e70 <__assert_fail@plt+0x5050>
   14210:	ldr	r3, [sp]
   14214:	cmp	r3, #0
   14218:	strne	r5, [r4, #196]	; 0xc4
   1421c:	cmp	r0, #0
   14220:	mov	r7, r0
   14224:	beq	14060 <__assert_fail@plt+0x2240>
   14228:	bl	11bec <strlen@plt>
   1422c:	mov	sl, #1
   14230:	ldr	r3, [r4, #32]
   14234:	mov	r1, r7
   14238:	mov	r5, sl
   1423c:	add	r6, r0, sl
   14240:	cmp	r6, r3
   14244:	movge	r6, r3
   14248:	mov	r2, r6
   1424c:	ldr	r0, [r4, #28]
   14250:	bl	119dc <memcpy@plt>
   14254:	ldr	r3, [r4, #28]
   14258:	mov	r2, #0
   1425c:	mov	r0, r7
   14260:	strb	r2, [r3, r6]
   14264:	bl	190e0 <__assert_fail@plt+0x72c0>
   14268:	ldr	r2, [pc, #200]	; 14338 <__assert_fail@plt+0x2518>
   1426c:	ldr	r1, [pc, #200]	; 1433c <__assert_fail@plt+0x251c>
   14270:	mov	r0, r9
   14274:	sub	r6, r6, #1
   14278:	str	sl, [r4, #36]	; 0x24
   1427c:	bl	11a00 <assuan_write_status@plt>
   14280:	b	14114 <__assert_fail@plt+0x22f4>
   14284:	ldr	r3, [r4, #176]	; 0xb0
   14288:	ldr	r2, [pc, #176]	; 14340 <__assert_fail@plt+0x2520>
   1428c:	cmp	r3, #0
   14290:	moveq	r3, r2
   14294:	mov	r7, #1
   14298:	str	r3, [r4, #12]
   1429c:	b	14078 <__assert_fail@plt+0x2258>
   142a0:	ldr	r0, [r4, #204]	; 0xcc
   142a4:	cmp	r0, #0
   142a8:	eorne	r5, r5, #1
   142ac:	moveq	r5, #0
   142b0:	cmp	r5, #0
   142b4:	beq	14158 <__assert_fail@plt+0x2338>
   142b8:	ldr	r3, [r4, #208]	; 0xd0
   142bc:	cmp	r3, #0
   142c0:	beq	14158 <__assert_fail@plt+0x2338>
   142c4:	ldr	r1, [r4, #28]
   142c8:	bl	16e6c <__assert_fail@plt+0x504c>
   142cc:	b	14158 <__assert_fail@plt+0x2338>
   142d0:	mov	r0, r9
   142d4:	bl	13288 <__assert_fail@plt+0x1468>
   142d8:	ldr	r6, [r4, #108]	; 0x6c
   142dc:	b	14164 <__assert_fail@plt+0x2344>
   142e0:	ldr	r2, [pc, #80]	; 14338 <__assert_fail@plt+0x2518>
   142e4:	ldr	r1, [pc, #88]	; 14344 <__assert_fail@plt+0x2524>
   142e8:	mov	r0, r9
   142ec:	bl	11a00 <assuan_write_status@plt>
   142f0:	b	14128 <__assert_fail@plt+0x2308>
   142f4:	mov	r2, r6
   142f8:	mov	r1, r6
   142fc:	mov	r0, r9
   14300:	bl	11c34 <assuan_send_data@plt>
   14304:	mov	r6, r0
   14308:	b	1414c <__assert_fail@plt+0x232c>
   1430c:	ldr	r6, [pc, #52]	; 14348 <__assert_fail@plt+0x2528>
   14310:	b	14164 <__assert_fail@plt+0x2344>
   14314:	bl	11a48 <__stack_chk_fail@plt>
   14318:	andeq	sl, r2, r0, lsl #26
   1431c:			; <UNDEFINED> instruction: 0x0002b3b8
   14320:	andeq	fp, r2, r8
   14324:	muleq	r2, r8, r3
   14328:	strdeq	r9, [r1], -ip
   1432c:	andeq	r9, r1, r4, lsl #18
   14330:	streq	r0, [r0, #-99]	; 0xffffff9d
   14334:	streq	r0, [r0, #-166]	; 0xffffff5a
   14338:	andeq	sl, r1, r8, ror #12
   1433c:	ldrdeq	r9, [r1], -r8
   14340:	ldrdeq	r9, [r1], -r0
   14344:	andeq	r9, r1, ip, ror #21
   14348:	streq	r8, [r0, #-86]	; 0xffffffaa
   1434c:	push	{r4, r5, r6, lr}
   14350:	subs	r6, r1, #0
   14354:	mov	r4, r0
   14358:	mov	r5, r2
   1435c:	beq	14390 <__assert_fail@plt+0x2570>
   14360:	cmp	r2, #0
   14364:	bne	14374 <__assert_fail@plt+0x2554>
   14368:	mov	r0, r6
   1436c:	bl	11bec <strlen@plt>
   14370:	add	r5, r0, #1
   14374:	ldr	r0, [r4, #28]
   14378:	cmp	r0, #0
   1437c:	beq	14384 <__assert_fail@plt+0x2564>
   14380:	bl	190e0 <__assert_fail@plt+0x72c0>
   14384:	str	r6, [r4, #28]
   14388:	str	r5, [r4, #32]
   1438c:	pop	{r4, r5, r6, pc}
   14390:	cmp	r2, #0
   14394:	bne	143a8 <__assert_fail@plt+0x2588>
   14398:	add	r1, r0, #32
   1439c:	pop	{r4, r5, r6, lr}
   143a0:	add	r0, r0, #28
   143a4:	b	12710 <__assert_fail@plt+0x8f0>
   143a8:	ldr	r3, [pc, #12]	; 143bc <__assert_fail@plt+0x259c>
   143ac:	mov	r2, #692	; 0x2b4
   143b0:	ldr	r1, [pc, #8]	; 143c0 <__assert_fail@plt+0x25a0>
   143b4:	ldr	r0, [pc, #8]	; 143c4 <__assert_fail@plt+0x25a4>
   143b8:	bl	11e20 <__assert_fail@plt>
   143bc:	strdeq	r9, [r1], -r8
   143c0:	andeq	r9, r1, ip, lsl r7
   143c4:	strdeq	r9, [r1], -ip
   143c8:	push	{r4, lr}
   143cc:	mov	r4, r0
   143d0:	bl	11bec <strlen@plt>
   143d4:	cmp	r0, #48	; 0x30
   143d8:	bhi	14420 <__assert_fail@plt+0x2600>
   143dc:	add	r2, r0, #1
   143e0:	mov	r1, r4
   143e4:	mov	r3, #50	; 0x32
   143e8:	ldr	r0, [pc, #52]	; 14424 <__assert_fail@plt+0x2604>
   143ec:	bl	11ac0 <__memcpy_chk@plt>
   143f0:	mov	r0, #0
   143f4:	bl	11d9c <gpgrt_check_version@plt>
   143f8:	mov	r0, #1
   143fc:	bl	18d10 <__assert_fail@plt+0x6ef0>
   14400:	mov	r0, #0
   14404:	bl	18c90 <__assert_fail@plt+0x6e70>
   14408:	bl	193b0 <__assert_fail@plt+0x7590>
   1440c:	ldr	r0, [pc, #20]	; 14428 <__assert_fail@plt+0x2608>
   14410:	bl	19490 <__assert_fail@plt+0x7670>
   14414:	ldr	r0, [pc, #16]	; 1442c <__assert_fail@plt+0x260c>
   14418:	pop	{r4, lr}
   1441c:	b	11d6c <assuan_set_malloc_hooks@plt>
   14420:	bl	11df0 <abort@plt>
   14424:	strdeq	fp, [r2], -ip
   14428:	andeq	r9, r1, r8, lsr #4
   1442c:	andeq	fp, r2, ip
   14430:	push	{r4, r5, r6, r7, r8, r9, lr}
   14434:	subs	r5, r0, #0
   14438:	sub	sp, sp, #12
   1443c:	beq	144ac <__assert_fail@plt+0x268c>
   14440:	ldr	r7, [pc, #228]	; 1452c <__assert_fail@plt+0x270c>
   14444:	ldr	r8, [pc, #228]	; 14530 <__assert_fail@plt+0x2710>
   14448:	mov	r4, r1
   1444c:	b	14470 <__assert_fail@plt+0x2650>
   14450:	mov	r2, #10
   14454:	mov	r1, r8
   14458:	mov	r0, r6
   1445c:	bl	11dd8 <strncmp@plt>
   14460:	cmp	r0, #0
   14464:	beq	144d4 <__assert_fail@plt+0x26b4>
   14468:	subs	r5, r5, #1
   1446c:	beq	144ac <__assert_fail@plt+0x268c>
   14470:	mov	r9, r4
   14474:	ldr	r6, [r4], #4
   14478:	mov	r1, r7
   1447c:	mov	r0, r6
   14480:	bl	11940 <strcmp@plt>
   14484:	cmp	r0, #0
   14488:	bne	14450 <__assert_fail@plt+0x2630>
   1448c:	ldr	r0, [r9, #4]
   14490:	cmp	r0, #0
   14494:	beq	144a8 <__assert_fail@plt+0x2688>
   14498:	ldr	r4, [pc, #148]	; 14534 <__assert_fail@plt+0x2714>
   1449c:	ldr	r3, [r4, #64]	; 0x40
   144a0:	cmp	r3, #0
   144a4:	beq	144e8 <__assert_fail@plt+0x26c8>
   144a8:	mov	r5, #1
   144ac:	ldr	r0, [pc, #132]	; 14538 <__assert_fail@plt+0x2718>
   144b0:	bl	11b14 <getenv@plt>
   144b4:	cmp	r0, #0
   144b8:	beq	144c8 <__assert_fail@plt+0x26a8>
   144bc:	ldrb	r3, [r0]
   144c0:	cmp	r3, #0
   144c4:	movne	r5, #1
   144c8:	mov	r0, r5
   144cc:	add	sp, sp, #12
   144d0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   144d4:	ldr	r4, [pc, #88]	; 14534 <__assert_fail@plt+0x2714>
   144d8:	ldr	r3, [r4, #64]	; 0x40
   144dc:	cmp	r3, #0
   144e0:	bne	144a8 <__assert_fail@plt+0x2688>
   144e4:	add	r0, r6, #10
   144e8:	bl	11a3c <strdup@plt>
   144ec:	cmp	r0, #0
   144f0:	str	r0, [r4, #64]	; 0x40
   144f4:	bne	144a8 <__assert_fail@plt+0x2688>
   144f8:	ldr	r3, [pc, #60]	; 1453c <__assert_fail@plt+0x271c>
   144fc:	ldr	r5, [r3]
   14500:	bl	11c40 <__errno_location@plt>
   14504:	ldr	r0, [r0]
   14508:	bl	11b50 <strerror@plt>
   1450c:	mov	r3, r4
   14510:	ldr	r2, [pc, #40]	; 14540 <__assert_fail@plt+0x2720>
   14514:	mov	r1, #1
   14518:	str	r0, [sp]
   1451c:	mov	r0, r5
   14520:	bl	11cc4 <__fprintf_chk@plt>
   14524:	mov	r0, #1
   14528:	bl	11ba4 <exit@plt>
   1452c:	andeq	r9, r1, r8, lsl #22
   14530:	andeq	r9, r1, r4, lsl fp
   14534:	strdeq	fp, [r2], -ip
   14538:	andeq	r9, r1, r0, lsr #22
   1453c:	andeq	fp, r2, r8, ror #5
   14540:	andeq	r9, r1, r0, ror #18
   14544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14548:	sub	sp, sp, #36	; 0x24
   1454c:	ldr	sl, [pc, #256]	; 14654 <__assert_fail@plt+0x2834>
   14550:	subs	r4, r0, #0
   14554:	str	r1, [sp, #4]
   14558:	ldr	r3, [sl]
   1455c:	str	r3, [sp, #28]
   14560:	beq	14648 <__assert_fail@plt+0x2828>
   14564:	mov	r1, #44	; 0x2c
   14568:	mov	r7, r2
   1456c:	bl	11c04 <strchr@plt>
   14570:	subs	r8, r0, #0
   14574:	addne	r8, r8, #1
   14578:	cmp	r7, #0
   1457c:	beq	145e0 <__assert_fail@plt+0x27c0>
   14580:	ldr	r3, [pc, #208]	; 14658 <__assert_fail@plt+0x2838>
   14584:	add	ip, sp, #12
   14588:	mov	r6, ip
   1458c:	ldm	r3, {r0, r1, r2, r3}
   14590:	add	r9, sp, #28
   14594:	mov	fp, #1
   14598:	stm	ip, {r0, r1, r2, r3}
   1459c:	mov	r3, #0
   145a0:	str	r3, [r7]
   145a4:	ldr	r5, [r6], #4
   145a8:	mov	r0, r5
   145ac:	bl	11bec <strlen@plt>
   145b0:	mov	r1, r5
   145b4:	mov	r2, r0
   145b8:	mov	r0, r4
   145bc:	bl	11c4c <strncasecmp@plt>
   145c0:	cmp	r0, #0
   145c4:	bne	145d8 <__assert_fail@plt+0x27b8>
   145c8:	str	fp, [r7]
   145cc:	mov	r0, r5
   145d0:	bl	11bec <strlen@plt>
   145d4:	add	r4, r4, r0
   145d8:	cmp	r6, r9
   145dc:	bne	145a4 <__assert_fail@plt+0x2784>
   145e0:	ldr	r5, [pc, #116]	; 1465c <__assert_fail@plt+0x283c>
   145e4:	ldr	r6, [pc, #116]	; 14660 <__assert_fail@plt+0x2840>
   145e8:	add	r7, r5, #72	; 0x48
   145ec:	mov	r2, #4
   145f0:	mov	r9, #1
   145f4:	b	14608 <__assert_fail@plt+0x27e8>
   145f8:	ldr	r6, [r5, #8]!
   145fc:	mov	r0, r6
   14600:	bl	11bec <strlen@plt>
   14604:	mov	r2, r0
   14608:	mov	r1, r6
   1460c:	mov	r0, r4
   14610:	bl	11c4c <strncasecmp@plt>
   14614:	cmp	r0, #0
   14618:	ldreq	r9, [r5, #4]
   1461c:	cmp	r5, r7
   14620:	bne	145f8 <__assert_fail@plt+0x27d8>
   14624:	ldr	r3, [sp, #4]
   14628:	str	r9, [r3]
   1462c:	ldr	r2, [sp, #28]
   14630:	ldr	r3, [sl]
   14634:	mov	r0, r8
   14638:	cmp	r2, r3
   1463c:	bne	14650 <__assert_fail@plt+0x2830>
   14640:	add	sp, sp, #36	; 0x24
   14644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14648:	mov	r8, r4
   1464c:	b	1462c <__assert_fail@plt+0x280c>
   14650:	bl	11a48 <__stack_chk_fail@plt>
   14654:	andeq	sl, r2, r0, lsl #26
   14658:	andeq	r9, r1, r0, lsl r5
   1465c:	andeq	r9, r1, r0, lsr #10
   14660:	andeq	r9, r1, r8, lsr #22
   14664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14668:	sub	sp, sp, #84	; 0x54
   1466c:	ldr	fp, [pc, #652]	; 14900 <__assert_fail@plt+0x2ae0>
   14670:	str	r0, [sp, #12]
   14674:	str	r1, [sp, #8]
   14678:	ldr	r3, [fp]
   1467c:	mov	r1, #0
   14680:	mov	r2, #48	; 0x30
   14684:	add	r0, sp, #28
   14688:	str	r3, [sp, #76]	; 0x4c
   1468c:	bl	11c70 <memset@plt>
   14690:	add	r2, sp, #12
   14694:	add	r3, sp, #8
   14698:	ldr	r0, [pc, #612]	; 14904 <__assert_fail@plt+0x2ae4>
   1469c:	strd	r2, [sp, #20]
   146a0:	bl	16e5c <__assert_fail@plt+0x503c>
   146a4:	mov	r0, #1
   146a8:	bl	123b4 <__assert_fail@plt+0x594>
   146ac:	ldr	r5, [pc, #596]	; 14908 <__assert_fail@plt+0x2ae8>
   146b0:	ldr	r4, [pc, #596]	; 1490c <__assert_fail@plt+0x2aec>
   146b4:	add	sl, r5, #152	; 0x98
   146b8:	add	r9, r5, #156	; 0x9c
   146bc:	add	r8, r5, #164	; 0xa4
   146c0:	mov	r6, #1
   146c4:	mov	r7, #0
   146c8:	mov	r1, r4
   146cc:	add	r0, sp, #20
   146d0:	bl	15d38 <__assert_fail@plt+0x3f18>
   146d4:	cmp	r0, #0
   146d8:	beq	148c0 <__assert_fail@plt+0x2aa0>
   146dc:	ldr	r3, [sp, #36]	; 0x24
   146e0:	sub	r3, r3, #67	; 0x43
   146e4:	cmp	r3, #44	; 0x2c
   146e8:	ldrls	pc, [pc, r3, lsl #2]
   146ec:	b	148b8 <__assert_fail@plt+0x2a98>
   146f0:	andeq	r4, r1, r0, lsr #17
   146f4:	andeq	r4, r1, r8, lsl #17
   146f8:			; <UNDEFINED> instruction: 0x000148b8
   146fc:			; <UNDEFINED> instruction: 0x000148b8
   14700:			; <UNDEFINED> instruction: 0x000148b8
   14704:			; <UNDEFINED> instruction: 0x000148b8
   14708:			; <UNDEFINED> instruction: 0x000148b8
   1470c:			; <UNDEFINED> instruction: 0x000148b8
   14710:			; <UNDEFINED> instruction: 0x000148b8
   14714:			; <UNDEFINED> instruction: 0x000148b8
   14718:	andeq	r4, r1, r0, ror r8
   1471c:	andeq	r4, r1, r8, asr r8
   14720:			; <UNDEFINED> instruction: 0x000148b8
   14724:			; <UNDEFINED> instruction: 0x000148b8
   14728:			; <UNDEFINED> instruction: 0x000148b8
   1472c:			; <UNDEFINED> instruction: 0x000148b8
   14730:			; <UNDEFINED> instruction: 0x000148b8
   14734:	andeq	r4, r1, r0, asr #16
   14738:			; <UNDEFINED> instruction: 0x000148b8
   1473c:			; <UNDEFINED> instruction: 0x000148b8
   14740:	andeq	r4, r1, r4, lsr r8
   14744:			; <UNDEFINED> instruction: 0x000148b8
   14748:			; <UNDEFINED> instruction: 0x000148b8
   1474c:			; <UNDEFINED> instruction: 0x000148b8
   14750:			; <UNDEFINED> instruction: 0x000148b8
   14754:			; <UNDEFINED> instruction: 0x000148b8
   14758:			; <UNDEFINED> instruction: 0x000148b8
   1475c:			; <UNDEFINED> instruction: 0x000148b8
   14760:			; <UNDEFINED> instruction: 0x000148b8
   14764:			; <UNDEFINED> instruction: 0x000148b8
   14768:	andeq	r4, r1, ip, ror #15
   1476c:			; <UNDEFINED> instruction: 0x000148b8
   14770:	andeq	r4, r1, r0, asr #15
   14774:			; <UNDEFINED> instruction: 0x000147b8
   14778:			; <UNDEFINED> instruction: 0x000148b8
   1477c:			; <UNDEFINED> instruction: 0x000148b8
   14780:			; <UNDEFINED> instruction: 0x000147b0
   14784:			; <UNDEFINED> instruction: 0x000148b8
   14788:			; <UNDEFINED> instruction: 0x000148b8
   1478c:			; <UNDEFINED> instruction: 0x000148b8
   14790:			; <UNDEFINED> instruction: 0x000148b8
   14794:			; <UNDEFINED> instruction: 0x000148b8
   14798:			; <UNDEFINED> instruction: 0x000148b8
   1479c:			; <UNDEFINED> instruction: 0x000148b8
   147a0:	andeq	r4, r1, r4, lsr #15
   147a4:	ldr	r3, [sp, #44]	; 0x2c
   147a8:	str	r3, [r5, #68]	; 0x44
   147ac:	b	146c8 <__assert_fail@plt+0x28a8>
   147b0:	str	r7, [r5, #72]	; 0x48
   147b4:	b	146c8 <__assert_fail@plt+0x28a8>
   147b8:	str	r6, [r5, #64]	; 0x40
   147bc:	b	146c8 <__assert_fail@plt+0x28a8>
   147c0:	mov	r2, sl
   147c4:	ldr	r1, [pc, #324]	; 14910 <__assert_fail@plt+0x2af0>
   147c8:	ldr	r0, [sp, #44]	; 0x2c
   147cc:	bl	14544 <__assert_fail@plt+0x2724>
   147d0:	mov	r1, r9
   147d4:	mov	r2, #0
   147d8:	bl	14544 <__assert_fail@plt+0x2724>
   147dc:	mov	r2, r8
   147e0:	ldr	r1, [pc, #300]	; 14914 <__assert_fail@plt+0x2af4>
   147e4:	bl	14544 <__assert_fail@plt+0x2724>
   147e8:	b	146c8 <__assert_fail@plt+0x28a8>
   147ec:	ldr	r0, [sp, #44]	; 0x2c
   147f0:	bl	11a3c <strdup@plt>
   147f4:	cmp	r0, #0
   147f8:	str	r0, [r5, #52]	; 0x34
   147fc:	bne	146c8 <__assert_fail@plt+0x28a8>
   14800:	ldr	r3, [pc, #272]	; 14918 <__assert_fail@plt+0x2af8>
   14804:	ldr	r4, [r3]
   14808:	bl	11c40 <__errno_location@plt>
   1480c:	ldr	r0, [r0]
   14810:	bl	11b50 <strerror@plt>
   14814:	ldr	r3, [pc, #256]	; 1491c <__assert_fail@plt+0x2afc>
   14818:	ldr	r2, [pc, #256]	; 14920 <__assert_fail@plt+0x2b00>
   1481c:	mov	r1, #1
   14820:	str	r0, [sp]
   14824:	mov	r0, r4
   14828:	bl	11cc4 <__fprintf_chk@plt>
   1482c:	mov	r0, #1
   14830:	bl	11ba4 <exit@plt>
   14834:	ldr	r3, [sp, #44]	; 0x2c
   14838:	str	r3, [r5, #88]	; 0x58
   1483c:	b	146c8 <__assert_fail@plt+0x28a8>
   14840:	ldr	r0, [sp, #44]	; 0x2c
   14844:	bl	11a3c <strdup@plt>
   14848:	cmp	r0, #0
   1484c:	str	r0, [r5, #44]	; 0x2c
   14850:	bne	146c8 <__assert_fail@plt+0x28a8>
   14854:	b	14800 <__assert_fail@plt+0x29e0>
   14858:	ldr	r0, [sp, #44]	; 0x2c
   1485c:	bl	11a3c <strdup@plt>
   14860:	cmp	r0, #0
   14864:	str	r0, [r5, #48]	; 0x30
   14868:	bne	146c8 <__assert_fail@plt+0x28a8>
   1486c:	b	14800 <__assert_fail@plt+0x29e0>
   14870:	ldr	r0, [sp, #44]	; 0x2c
   14874:	bl	11a3c <strdup@plt>
   14878:	cmp	r0, #0
   1487c:	str	r0, [r5, #60]	; 0x3c
   14880:	bne	146c8 <__assert_fail@plt+0x28a8>
   14884:	b	14800 <__assert_fail@plt+0x29e0>
   14888:	ldr	r0, [sp, #44]	; 0x2c
   1488c:	bl	11a3c <strdup@plt>
   14890:	cmp	r0, #0
   14894:	str	r0, [r5, #40]	; 0x28
   14898:	bne	146c8 <__assert_fail@plt+0x28a8>
   1489c:	b	14800 <__assert_fail@plt+0x29e0>
   148a0:	ldr	r0, [sp, #44]	; 0x2c
   148a4:	bl	11a3c <strdup@plt>
   148a8:	cmp	r0, #0
   148ac:	str	r0, [r5, #56]	; 0x38
   148b0:	bne	146c8 <__assert_fail@plt+0x28a8>
   148b4:	b	14800 <__assert_fail@plt+0x29e0>
   148b8:	str	r6, [sp, #32]
   148bc:	b	146c8 <__assert_fail@plt+0x28a8>
   148c0:	ldr	r3, [r5, #40]	; 0x28
   148c4:	cmp	r3, #0
   148c8:	beq	148e4 <__assert_fail@plt+0x2ac4>
   148cc:	ldr	r2, [sp, #76]	; 0x4c
   148d0:	ldr	r3, [fp]
   148d4:	cmp	r2, r3
   148d8:	bne	148fc <__assert_fail@plt+0x2adc>
   148dc:	add	sp, sp, #84	; 0x54
   148e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148e4:	ldr	r2, [pc, #48]	; 1491c <__assert_fail@plt+0x2afc>
   148e8:	ldr	r1, [r2, #64]	; 0x40
   148ec:	cmp	r1, #0
   148f0:	strne	r1, [r5, #40]	; 0x28
   148f4:	strne	r3, [r2, #64]	; 0x40
   148f8:	b	148cc <__assert_fail@plt+0x2aac>
   148fc:	bl	11a48 <__stack_chk_fail@plt>
   14900:	andeq	sl, r2, r0, lsl #26
   14904:	andeq	r2, r1, r0, lsl #4
   14908:	muleq	r2, r8, r3
   1490c:	andeq	fp, r2, r8, lsl r0
   14910:	andeq	fp, r2, ip, lsr #8
   14914:	andeq	fp, r2, r8, lsr r4
   14918:	andeq	fp, r2, r8, ror #5
   1491c:	strdeq	fp, [r2], -ip
   14920:	andeq	r9, r1, r0, ror #18
   14924:	ldr	r3, [pc, #4]	; 14930 <__assert_fail@plt+0x2b10>
   14928:	str	r0, [r3, #52]	; 0x34
   1492c:	bx	lr
   14930:	strdeq	fp, [r2], -ip
   14934:	push	{r4, r5, r6, r7, r8, lr}
   14938:	sub	sp, sp, #24
   1493c:	ldr	r6, [pc, #464]	; 14b14 <__assert_fail@plt+0x2cf4>
   14940:	mov	r5, r1
   14944:	mov	r7, r0
   14948:	ldr	r3, [r6]
   1494c:	str	r3, [sp, #20]
   14950:	bl	119a0 <getuid@plt>
   14954:	mov	r4, r0
   14958:	bl	11a84 <geteuid@plt>
   1495c:	cmp	r4, r0
   14960:	bne	14b10 <__assert_fail@plt+0x2cf0>
   14964:	add	r0, sp, #8
   14968:	bl	11bd4 <assuan_new@plt>
   1496c:	cmp	r0, #0
   14970:	bne	14ae4 <__assert_fail@plt+0x2cc4>
   14974:	mov	r0, r7
   14978:	bl	11b68 <assuan_fdopen@plt>
   1497c:	str	r0, [sp, #12]
   14980:	mov	r0, r5
   14984:	bl	11b68 <assuan_fdopen@plt>
   14988:	add	r1, sp, #12
   1498c:	str	r0, [sp, #16]
   14990:	ldr	r0, [sp, #8]
   14994:	bl	11c1c <assuan_init_pipe_server@plt>
   14998:	cmp	r0, #0
   1499c:	bne	14acc <__assert_fail@plt+0x2cac>
   149a0:	ldr	r5, [sp, #8]
   149a4:	ldr	r4, [pc, #364]	; 14b18 <__assert_fail@plt+0x2cf8>
   149a8:	ldr	r2, [pc, #364]	; 14b1c <__assert_fail@plt+0x2cfc>
   149ac:	ldr	r1, [pc, #364]	; 14b20 <__assert_fail@plt+0x2d00>
   149b0:	b	149c4 <__assert_fail@plt+0x2ba4>
   149b4:	ldr	r1, [r4, #8]!
   149b8:	cmp	r1, #0
   149bc:	beq	14a04 <__assert_fail@plt+0x2be4>
   149c0:	ldr	r2, [r4, #4]
   149c4:	mov	r3, #0
   149c8:	mov	r0, r5
   149cc:	bl	11bb0 <assuan_register_command@plt>
   149d0:	cmp	r0, #0
   149d4:	beq	149b4 <__assert_fail@plt+0x2b94>
   149d8:	ldr	r3, [pc, #324]	; 14b24 <__assert_fail@plt+0x2d04>
   149dc:	ldr	r4, [r3]
   149e0:	bl	11d60 <gpg_strerror@plt>
   149e4:	ldr	r3, [pc, #316]	; 14b28 <__assert_fail@plt+0x2d08>
   149e8:	ldr	r2, [pc, #316]	; 14b2c <__assert_fail@plt+0x2d0c>
   149ec:	str	r0, [sp]
   149f0:	mov	r1, #1
   149f4:	mov	r0, r4
   149f8:	bl	11cc4 <__fprintf_chk@plt>
   149fc:	mvn	r0, #0
   14a00:	b	14a8c <__assert_fail@plt+0x2c6c>
   14a04:	ldr	r1, [pc, #292]	; 14b30 <__assert_fail@plt+0x2d10>
   14a08:	ldr	r0, [sp, #8]
   14a0c:	bl	11c64 <assuan_register_option_handler@plt>
   14a10:	ldr	r1, [pc, #284]	; 14b34 <__assert_fail@plt+0x2d14>
   14a14:	ldr	r0, [sp, #8]
   14a18:	bl	11a30 <assuan_register_reset_notify@plt>
   14a1c:	ldr	r8, [pc, #256]	; 14b24 <__assert_fail@plt+0x2d04>
   14a20:	ldr	r7, [pc, #256]	; 14b28 <__assert_fail@plt+0x2d08>
   14a24:	ldr	r5, [pc, #268]	; 14b38 <__assert_fail@plt+0x2d18>
   14a28:	ldr	r0, [sp, #8]
   14a2c:	bl	11c94 <assuan_accept@plt>
   14a30:	cmn	r0, #1
   14a34:	beq	14a80 <__assert_fail@plt+0x2c60>
   14a38:	cmp	r0, #0
   14a3c:	bne	14aa4 <__assert_fail@plt+0x2c84>
   14a40:	ldr	r0, [sp, #8]
   14a44:	bl	11a18 <assuan_process@plt>
   14a48:	cmp	r0, #0
   14a4c:	beq	14a28 <__assert_fail@plt+0x2c08>
   14a50:	ldr	r4, [r8]
   14a54:	bl	11d60 <gpg_strerror@plt>
   14a58:	mov	r3, r7
   14a5c:	mov	r2, r5
   14a60:	mov	r1, #1
   14a64:	str	r0, [sp]
   14a68:	mov	r0, r4
   14a6c:	bl	11cc4 <__fprintf_chk@plt>
   14a70:	ldr	r0, [sp, #8]
   14a74:	bl	11c94 <assuan_accept@plt>
   14a78:	cmn	r0, #1
   14a7c:	bne	14a38 <__assert_fail@plt+0x2c18>
   14a80:	ldr	r0, [sp, #8]
   14a84:	bl	11d0c <assuan_release@plt>
   14a88:	mov	r0, #0
   14a8c:	ldr	r2, [sp, #20]
   14a90:	ldr	r3, [r6]
   14a94:	cmp	r2, r3
   14a98:	bne	14b0c <__assert_fail@plt+0x2cec>
   14a9c:	add	sp, sp, #24
   14aa0:	pop	{r4, r5, r6, r7, r8, pc}
   14aa4:	ldr	r3, [pc, #120]	; 14b24 <__assert_fail@plt+0x2d04>
   14aa8:	ldr	r4, [r3]
   14aac:	bl	11d60 <gpg_strerror@plt>
   14ab0:	ldr	r3, [pc, #112]	; 14b28 <__assert_fail@plt+0x2d08>
   14ab4:	ldr	r2, [pc, #128]	; 14b3c <__assert_fail@plt+0x2d1c>
   14ab8:	mov	r1, #1
   14abc:	str	r0, [sp]
   14ac0:	mov	r0, r4
   14ac4:	bl	11cc4 <__fprintf_chk@plt>
   14ac8:	b	14a80 <__assert_fail@plt+0x2c60>
   14acc:	ldr	r3, [pc, #80]	; 14b24 <__assert_fail@plt+0x2d04>
   14ad0:	ldr	r4, [r3]
   14ad4:	bl	11d60 <gpg_strerror@plt>
   14ad8:	ldr	r3, [pc, #72]	; 14b28 <__assert_fail@plt+0x2d08>
   14adc:	ldr	r2, [pc, #92]	; 14b40 <__assert_fail@plt+0x2d20>
   14ae0:	b	149ec <__assert_fail@plt+0x2bcc>
   14ae4:	ldr	r3, [pc, #56]	; 14b24 <__assert_fail@plt+0x2d04>
   14ae8:	ldr	r4, [r3]
   14aec:	bl	11d60 <gpg_strerror@plt>
   14af0:	ldr	r2, [pc, #76]	; 14b44 <__assert_fail@plt+0x2d24>
   14af4:	mov	r1, #1
   14af8:	mov	r3, r0
   14afc:	mov	r0, r4
   14b00:	bl	11cc4 <__fprintf_chk@plt>
   14b04:	mvn	r0, #0
   14b08:	b	14a8c <__assert_fail@plt+0x2c6c>
   14b0c:	bl	11a48 <__stack_chk_fail@plt>
   14b10:	bl	11df0 <abort@plt>
   14b14:	andeq	sl, r2, r0, lsl #26
   14b18:	andeq	r9, r1, r0, ror r5
   14b1c:			; <UNDEFINED> instruction: 0x000131bc
   14b20:	andeq	r9, r1, r0, lsr fp
   14b24:	andeq	fp, r2, r8, ror #5
   14b28:	strdeq	fp, [r2], -ip
   14b2c:	andeq	r9, r1, ip, asr #23
   14b30:	andeq	r2, r1, r8, lsl #15
   14b34:	muleq	r1, r4, r6
   14b38:	andeq	r9, r1, r8, lsr #23
   14b3c:	andeq	r9, r1, r8, lsl #23
   14b40:	andeq	r9, r1, ip, asr fp
   14b44:	andeq	r9, r1, r8, lsr fp
   14b48:	mov	r1, #1
   14b4c:	mov	r0, #0
   14b50:	b	14934 <__assert_fail@plt+0x2b14>
   14b54:	push	{r4, r5, r6, lr}
   14b58:	mov	r5, r0
   14b5c:	ldrb	r4, [r0]
   14b60:	cmp	r4, #0
   14b64:	beq	14be0 <__assert_fail@plt+0x2dc0>
   14b68:	bl	11b8c <__ctype_b_loc@plt>
   14b6c:	mov	r1, r5
   14b70:	ldr	r2, [r0]
   14b74:	b	14b84 <__assert_fail@plt+0x2d64>
   14b78:	ldrb	r4, [r1, #1]!
   14b7c:	cmp	r4, #0
   14b80:	beq	14be8 <__assert_fail@plt+0x2dc8>
   14b84:	lsl	r4, r4, #1
   14b88:	ldrh	r3, [r2, r4]
   14b8c:	ands	r3, r3, #8192	; 0x2000
   14b90:	bne	14b78 <__assert_fail@plt+0x2d58>
   14b94:	ldrb	r2, [r1]
   14b98:	cmp	r2, #0
   14b9c:	strb	r2, [r5]
   14ba0:	movne	ip, r5
   14ba4:	beq	14be0 <__assert_fail@plt+0x2dc0>
   14ba8:	ldr	lr, [r0]
   14bac:	lsl	r2, r2, #1
   14bb0:	ldrh	r2, [lr, r2]
   14bb4:	ands	r2, r2, #8192	; 0x2000
   14bb8:	moveq	r3, r2
   14bbc:	beq	14bc8 <__assert_fail@plt+0x2da8>
   14bc0:	cmp	r3, #0
   14bc4:	moveq	r3, ip
   14bc8:	ldrb	r2, [r1, #1]!
   14bcc:	cmp	r2, #0
   14bd0:	strb	r2, [ip, #1]!
   14bd4:	bne	14ba8 <__assert_fail@plt+0x2d88>
   14bd8:	cmp	r3, #0
   14bdc:	strbne	r2, [r3]
   14be0:	mov	r0, r5
   14be4:	pop	{r4, r5, r6, pc}
   14be8:	strb	r4, [r5]
   14bec:	mov	r0, r5
   14bf0:	pop	{r4, r5, r6, pc}
   14bf4:	push	{r0, r1, r2, r3}
   14bf8:	ldr	r3, [pc, #144]	; 14c90 <__assert_fail@plt+0x2e70>
   14bfc:	push	{r4, r5, r6, r7, lr}
   14c00:	sub	sp, sp, #12
   14c04:	ldr	r4, [pc, #136]	; 14c94 <__assert_fail@plt+0x2e74>
   14c08:	ldr	r5, [pc, #136]	; 14c98 <__assert_fail@plt+0x2e78>
   14c0c:	ldr	r3, [r3]
   14c10:	ldr	r1, [r4]
   14c14:	add	r2, sp, #36	; 0x24
   14c18:	cmp	r3, #0
   14c1c:	str	r1, [sp, #4]
   14c20:	ldr	r7, [r5]
   14c24:	str	r2, [sp]
   14c28:	ldr	r6, [sp, #32]
   14c2c:	beq	14c84 <__assert_fail@plt+0x2e64>
   14c30:	mov	r0, #11
   14c34:	blx	r3
   14c38:	subs	r3, r0, #0
   14c3c:	beq	14c84 <__assert_fail@plt+0x2e64>
   14c40:	ldr	r2, [pc, #84]	; 14c9c <__assert_fail@plt+0x2e7c>
   14c44:	mov	r1, #1
   14c48:	mov	r0, r7
   14c4c:	bl	11cc4 <__fprintf_chk@plt>
   14c50:	mov	r2, r6
   14c54:	ldr	r3, [sp]
   14c58:	ldr	r0, [r5]
   14c5c:	mov	r1, #1
   14c60:	bl	11b5c <__vfprintf_chk@plt>
   14c64:	ldr	r2, [sp, #4]
   14c68:	ldr	r3, [r4]
   14c6c:	cmp	r2, r3
   14c70:	bne	14c8c <__assert_fail@plt+0x2e6c>
   14c74:	add	sp, sp, #12
   14c78:	pop	{r4, r5, r6, r7, lr}
   14c7c:	add	sp, sp, #16
   14c80:	bx	lr
   14c84:	ldr	r3, [pc, #20]	; 14ca0 <__assert_fail@plt+0x2e80>
   14c88:	b	14c40 <__assert_fail@plt+0x2e20>
   14c8c:	bl	11a48 <__stack_chk_fail@plt>
   14c90:	andeq	fp, r2, r0, asr #6
   14c94:	andeq	sl, r2, r0, lsl #26
   14c98:	andeq	fp, r2, r8, ror #5
   14c9c:	andeq	r9, r1, r0, lsl pc
   14ca0:	andeq	r9, r1, ip, lsl #30
   14ca4:	tst	r1, #16
   14ca8:	and	r1, r1, #7
   14cac:	push	{r4, r5, r6, r7, r8, lr}
   14cb0:	movne	r7, #0
   14cb4:	moveq	r7, #10
   14cb8:	cmp	r1, #3
   14cbc:	mov	r6, r0
   14cc0:	str	r1, [r0, #20]
   14cc4:	mov	r5, r2
   14cc8:	beq	14ce8 <__assert_fail@plt+0x2ec8>
   14ccc:	cmp	r1, #4
   14cd0:	beq	14d28 <__assert_fail@plt+0x2f08>
   14cd4:	cmp	r1, #1
   14cd8:	beq	14ce8 <__assert_fail@plt+0x2ec8>
   14cdc:	str	r2, [r6, #24]
   14ce0:	mov	r0, #1
   14ce4:	pop	{r4, r5, r6, r7, r8, pc}
   14ce8:	bl	11c40 <__errno_location@plt>
   14cec:	mov	r1, #0
   14cf0:	mov	r2, r7
   14cf4:	mov	r4, r0
   14cf8:	mov	r0, r5
   14cfc:	str	r1, [r4]
   14d00:	bl	1194c <strtol@plt>
   14d04:	sub	r3, r0, #-2147483647	; 0x80000001
   14d08:	cmn	r3, #3
   14d0c:	bls	14d1c <__assert_fail@plt+0x2efc>
   14d10:	ldr	r3, [r4]
   14d14:	cmp	r3, #34	; 0x22
   14d18:	beq	14da4 <__assert_fail@plt+0x2f84>
   14d1c:	str	r0, [r6, #24]
   14d20:	mov	r0, #0
   14d24:	pop	{r4, r5, r6, r7, r8, pc}
   14d28:	ldrb	r4, [r2]
   14d2c:	tst	r4, #128	; 0x80
   14d30:	bne	14d5c <__assert_fail@plt+0x2f3c>
   14d34:	bl	11b8c <__ctype_b_loc@plt>
   14d38:	ldr	r2, [r0]
   14d3c:	b	14d4c <__assert_fail@plt+0x2f2c>
   14d40:	ldrb	r4, [r5, #1]!
   14d44:	tst	r4, #128	; 0x80
   14d48:	bne	14d5c <__assert_fail@plt+0x2f3c>
   14d4c:	lsl	r3, r4, #1
   14d50:	ldrh	r3, [r2, r3]
   14d54:	tst	r3, #8192	; 0x2000
   14d58:	bne	14d40 <__assert_fail@plt+0x2f20>
   14d5c:	cmp	r4, #45	; 0x2d
   14d60:	beq	14db4 <__assert_fail@plt+0x2f94>
   14d64:	bl	11c40 <__errno_location@plt>
   14d68:	mov	r4, #0
   14d6c:	mov	r2, r7
   14d70:	mov	r1, r4
   14d74:	mov	r8, r0
   14d78:	mov	r0, r5
   14d7c:	str	r4, [r8]
   14d80:	bl	11be0 <strtoul@plt>
   14d84:	cmn	r0, #1
   14d88:	str	r0, [r6, #24]
   14d8c:	beq	14d98 <__assert_fail@plt+0x2f78>
   14d90:	mov	r0, r4
   14d94:	pop	{r4, r5, r6, r7, r8, pc}
   14d98:	ldr	r3, [r8]
   14d9c:	cmp	r3, #34	; 0x22
   14da0:	bne	14d90 <__assert_fail@plt+0x2f70>
   14da4:	mvn	r3, #11
   14da8:	str	r3, [r6, #16]
   14dac:	mvn	r0, #0
   14db0:	pop	{r4, r5, r6, r7, r8, pc}
   14db4:	mov	r2, #0
   14db8:	mvn	r3, #11
   14dbc:	str	r2, [r6, #24]
   14dc0:	str	r3, [r6, #16]
   14dc4:	mvn	r0, #0
   14dc8:	pop	{r4, r5, r6, r7, r8, pc}
   14dcc:	push	{r1, r2, r3}
   14dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dd4:	sub	sp, sp, #8
   14dd8:	ldr	r8, [pc, #188]	; 14e9c <__assert_fail@plt+0x307c>
   14ddc:	ldr	r4, [sp, #44]	; 0x2c
   14de0:	ldr	r3, [r8]
   14de4:	cmp	r4, #0
   14de8:	str	r3, [sp, #4]
   14dec:	moveq	r5, r4
   14df0:	beq	14e74 <__assert_fail@plt+0x3054>
   14df4:	cmp	r0, #0
   14df8:	add	r2, sp, #48	; 0x30
   14dfc:	mov	r9, r0
   14e00:	ldr	r6, [pc, #152]	; 14ea0 <__assert_fail@plt+0x3080>
   14e04:	ldr	fp, [pc, #152]	; 14ea4 <__assert_fail@plt+0x3084>
   14e08:	movne	r7, #2
   14e0c:	moveq	r7, #1
   14e10:	mov	sl, r2
   14e14:	mov	r5, #0
   14e18:	str	r2, [sp]
   14e1c:	b	14e4c <__assert_fail@plt+0x302c>
   14e20:	mov	r1, r4
   14e24:	mov	r0, r7
   14e28:	blx	r2
   14e2c:	mov	r0, r4
   14e30:	bl	11bec <strlen@plt>
   14e34:	add	sl, sl, #4
   14e38:	ldr	r4, [sl, #-4]
   14e3c:	str	sl, [sp]
   14e40:	cmp	r4, #0
   14e44:	add	r5, r5, r0
   14e48:	beq	14e74 <__assert_fail@plt+0x3054>
   14e4c:	ldr	r2, [r6, #4]
   14e50:	cmp	r2, #0
   14e54:	bne	14e20 <__assert_fail@plt+0x3000>
   14e58:	cmp	r9, #0
   14e5c:	mov	r0, r4
   14e60:	ldrne	r3, [pc, #64]	; 14ea8 <__assert_fail@plt+0x3088>
   14e64:	ldreq	r1, [fp]
   14e68:	ldrne	r1, [r3]
   14e6c:	bl	11dcc <fputs@plt>
   14e70:	b	14e2c <__assert_fail@plt+0x300c>
   14e74:	ldr	r2, [sp, #4]
   14e78:	ldr	r3, [r8]
   14e7c:	mov	r0, r5
   14e80:	cmp	r2, r3
   14e84:	bne	14e98 <__assert_fail@plt+0x3078>
   14e88:	add	sp, sp, #8
   14e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e90:	add	sp, sp, #12
   14e94:	bx	lr
   14e98:	bl	11a48 <__stack_chk_fail@plt>
   14e9c:	andeq	sl, r2, r0, lsl #26
   14ea0:	andeq	fp, r2, r0, asr #6
   14ea4:	strdeq	fp, [r2], -r4
   14ea8:	andeq	fp, r2, r8, ror #5
   14eac:	ldr	r3, [pc, #48]	; 14ee4 <__assert_fail@plt+0x30c4>
   14eb0:	ldr	r3, [r3, #4]
   14eb4:	cmp	r3, #0
   14eb8:	beq	14ed0 <__assert_fail@plt+0x30b0>
   14ebc:	cmp	r0, #0
   14ec0:	movne	r0, #2
   14ec4:	moveq	r0, #1
   14ec8:	mov	r1, #0
   14ecc:	bx	r3
   14ed0:	cmp	r0, #0
   14ed4:	ldrne	r3, [pc, #12]	; 14ee8 <__assert_fail@plt+0x30c8>
   14ed8:	ldreq	r3, [pc, #12]	; 14eec <__assert_fail@plt+0x30cc>
   14edc:	ldr	r0, [r3]
   14ee0:	b	11988 <fflush@plt>
   14ee4:	andeq	fp, r2, r0, asr #6
   14ee8:	andeq	fp, r2, r8, ror #5
   14eec:	strdeq	fp, [r2], -r4
   14ef0:	push	{r0, r1, r2, r3}
   14ef4:	ldr	r3, [pc, #108]	; 14f68 <__assert_fail@plt+0x3148>
   14ef8:	ldr	r2, [pc, #108]	; 14f6c <__assert_fail@plt+0x314c>
   14efc:	ldr	r4, [pc, #108]	; 14f70 <__assert_fail@plt+0x3150>
   14f00:	ldr	r3, [r3]
   14f04:	push	{lr}		; (str lr, [sp, #-4]!)
   14f08:	sub	sp, sp, #12
   14f0c:	ldr	r1, [r2]
   14f10:	cmp	r3, #0
   14f14:	add	r2, sp, #20
   14f18:	str	r1, [sp, #4]
   14f1c:	ldr	r5, [r4]
   14f20:	str	r2, [sp]
   14f24:	beq	14f60 <__assert_fail@plt+0x3140>
   14f28:	mov	r0, #11
   14f2c:	blx	r3
   14f30:	subs	r3, r0, #0
   14f34:	beq	14f60 <__assert_fail@plt+0x3140>
   14f38:	ldr	r2, [pc, #52]	; 14f74 <__assert_fail@plt+0x3154>
   14f3c:	mov	r1, #1
   14f40:	mov	r0, r5
   14f44:	bl	11cc4 <__fprintf_chk@plt>
   14f48:	ldr	r3, [r4]
   14f4c:	mov	r2, #31
   14f50:	mov	r1, #1
   14f54:	ldr	r0, [pc, #28]	; 14f78 <__assert_fail@plt+0x3158>
   14f58:	bl	11acc <fwrite@plt>
   14f5c:	bl	11df0 <abort@plt>
   14f60:	ldr	r3, [pc, #20]	; 14f7c <__assert_fail@plt+0x315c>
   14f64:	b	14f38 <__assert_fail@plt+0x3118>
   14f68:	andeq	fp, r2, r0, asr #6
   14f6c:	andeq	sl, r2, r0, lsl #26
   14f70:	andeq	fp, r2, r8, ror #5
   14f74:	andeq	r9, r1, r8, lsl pc
   14f78:	andeq	r9, r1, ip, lsr #30
   14f7c:	andeq	r9, r1, ip, lsl #30
   14f80:	push	{r4, lr}
   14f84:	mov	r4, r0
   14f88:	ldr	r0, [r0, #8]
   14f8c:	ands	r3, r0, #32768	; 0x8000
   14f90:	bne	14fd8 <__assert_fail@plt+0x31b8>
   14f94:	ldr	r2, [r4]
   14f98:	orr	r0, r0, #32768	; 0x8000
   14f9c:	str	r0, [r4, #8]
   14fa0:	str	r3, [r4, #28]
   14fa4:	str	r3, [r4, #32]
   14fa8:	str	r3, [r4, #36]	; 0x24
   14fac:	str	r3, [r4, #12]
   14fb0:	ldr	r2, [r2]
   14fb4:	str	r3, [r4, #40]	; 0x28
   14fb8:	cmp	r2, #0
   14fbc:	str	r3, [r4, #44]	; 0x2c
   14fc0:	str	r3, [r4, #48]	; 0x30
   14fc4:	str	r3, [r4, #52]	; 0x34
   14fc8:	blt	150e8 <__assert_fail@plt+0x32c8>
   14fcc:	mov	r3, #0
   14fd0:	str	r3, [r4, #24]
   14fd4:	pop	{r4, pc}
   14fd8:	ldr	r3, [r4, #12]
   14fdc:	cmp	r3, #0
   14fe0:	beq	14fcc <__assert_fail@plt+0x31ac>
   14fe4:	cmp	r1, #0
   14fe8:	ldr	r3, [r4, #16]
   14fec:	beq	1506c <__assert_fail@plt+0x324c>
   14ff0:	cmn	r3, #6
   14ff4:	beq	150c4 <__assert_fail@plt+0x32a4>
   14ff8:	cmn	r3, #5
   14ffc:	beq	15040 <__assert_fail@plt+0x3220>
   15000:	cmn	r3, #4
   15004:	beq	150cc <__assert_fail@plt+0x32ac>
   15008:	cmn	r3, #3
   1500c:	beq	150f0 <__assert_fail@plt+0x32d0>
   15010:	cmn	r3, #12
   15014:	beq	150d4 <__assert_fail@plt+0x32b4>
   15018:	cmn	r3, #7
   1501c:	beq	15128 <__assert_fail@plt+0x3308>
   15020:	cmn	r3, #10
   15024:	beq	1513c <__assert_fail@plt+0x331c>
   15028:	ldr	r0, [pc, #276]	; 15144 <__assert_fail@plt+0x3324>
   1502c:	ldr	ip, [pc, #276]	; 15148 <__assert_fail@plt+0x3328>
   15030:	cmn	r3, #11
   15034:	moveq	r3, r0
   15038:	movne	r3, ip
   1503c:	b	15044 <__assert_fail@plt+0x3224>
   15040:	ldr	r3, [pc, #260]	; 1514c <__assert_fail@plt+0x332c>
   15044:	ldr	r2, [r2]
   15048:	ldr	r0, [pc, #256]	; 15150 <__assert_fail@plt+0x3330>
   1504c:	bl	14bf4 <__assert_fail@plt+0x2dd4>
   15050:	ldr	r3, [r4, #12]
   15054:	cmp	r3, #1
   15058:	moveq	r3, #0
   1505c:	streq	r3, [r4, #12]
   15060:	beq	14fcc <__assert_fail@plt+0x31ac>
   15064:	mov	r0, #2
   15068:	bl	11ba4 <exit@plt>
   1506c:	ldr	r1, [r4, #40]	; 0x28
   15070:	ldr	r2, [pc, #220]	; 15154 <__assert_fail@plt+0x3334>
   15074:	cmp	r1, #0
   15078:	moveq	r1, r2
   1507c:	cmn	r3, #3
   15080:	beq	150f8 <__assert_fail@plt+0x32d8>
   15084:	cmn	r3, #12
   15088:	beq	15104 <__assert_fail@plt+0x32e4>
   1508c:	cmn	r3, #6
   15090:	beq	15110 <__assert_fail@plt+0x32f0>
   15094:	cmn	r3, #7
   15098:	beq	1511c <__assert_fail@plt+0x32fc>
   1509c:	cmn	r3, #8
   150a0:	beq	150dc <__assert_fail@plt+0x32bc>
   150a4:	cmn	r3, #9
   150a8:	beq	15130 <__assert_fail@plt+0x3310>
   150ac:	cmn	r3, #11
   150b0:	ldreq	r1, [pc, #160]	; 15158 <__assert_fail@plt+0x3338>
   150b4:	ldreq	r0, [pc, #160]	; 1515c <__assert_fail@plt+0x333c>
   150b8:	ldrne	r0, [pc, #160]	; 15160 <__assert_fail@plt+0x3340>
   150bc:	bl	14bf4 <__assert_fail@plt+0x2dd4>
   150c0:	b	15050 <__assert_fail@plt+0x3230>
   150c4:	ldr	r3, [pc, #152]	; 15164 <__assert_fail@plt+0x3344>
   150c8:	b	15044 <__assert_fail@plt+0x3224>
   150cc:	ldr	r3, [pc, #148]	; 15168 <__assert_fail@plt+0x3348>
   150d0:	b	15044 <__assert_fail@plt+0x3224>
   150d4:	ldr	r3, [pc, #144]	; 1516c <__assert_fail@plt+0x334c>
   150d8:	b	15044 <__assert_fail@plt+0x3224>
   150dc:	ldr	r0, [pc, #140]	; 15170 <__assert_fail@plt+0x3350>
   150e0:	bl	14bf4 <__assert_fail@plt+0x2dd4>
   150e4:	b	15050 <__assert_fail@plt+0x3230>
   150e8:	ldr	r0, [pc, #132]	; 15174 <__assert_fail@plt+0x3354>
   150ec:	bl	14ef0 <__assert_fail@plt+0x30d0>
   150f0:	ldr	r3, [pc, #128]	; 15178 <__assert_fail@plt+0x3358>
   150f4:	b	15044 <__assert_fail@plt+0x3224>
   150f8:	ldr	r0, [pc, #124]	; 1517c <__assert_fail@plt+0x335c>
   150fc:	bl	14bf4 <__assert_fail@plt+0x2dd4>
   15100:	b	15050 <__assert_fail@plt+0x3230>
   15104:	ldr	r0, [pc, #116]	; 15180 <__assert_fail@plt+0x3360>
   15108:	bl	14bf4 <__assert_fail@plt+0x2dd4>
   1510c:	b	15050 <__assert_fail@plt+0x3230>
   15110:	ldr	r0, [pc, #108]	; 15184 <__assert_fail@plt+0x3364>
   15114:	bl	14bf4 <__assert_fail@plt+0x2dd4>
   15118:	b	15050 <__assert_fail@plt+0x3230>
   1511c:	ldr	r0, [pc, #100]	; 15188 <__assert_fail@plt+0x3368>
   15120:	bl	14bf4 <__assert_fail@plt+0x2dd4>
   15124:	b	15050 <__assert_fail@plt+0x3230>
   15128:	ldr	r3, [pc, #92]	; 1518c <__assert_fail@plt+0x336c>
   1512c:	b	15044 <__assert_fail@plt+0x3224>
   15130:	ldr	r0, [pc, #88]	; 15190 <__assert_fail@plt+0x3370>
   15134:	bl	14bf4 <__assert_fail@plt+0x2dd4>
   15138:	b	15050 <__assert_fail@plt+0x3230>
   1513c:	ldr	r3, [pc, #80]	; 15194 <__assert_fail@plt+0x3374>
   15140:	b	15044 <__assert_fail@plt+0x3224>
   15144:	andeq	r9, r1, ip, lsl #31
   15148:	andeq	r9, r1, r4, ror #31
   1514c:			; <UNDEFINED> instruction: 0x00019fb0
   15150:	strdeq	r9, [r1], -ip
   15154:	strdeq	r9, [r1], -r4
   15158:	andeq	sl, r1, r0, ror #1
   1515c:			; <UNDEFINED> instruction: 0x000199b8
   15160:	strdeq	sl, [r1], -r0
   15164:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15168:			; <UNDEFINED> instruction: 0x00019fbc
   1516c:	andeq	r9, r1, ip, asr #30
   15170:	andeq	sl, r1, r0, lsr #1
   15174:	andeq	r9, r1, ip, lsr #30
   15178:	ldrdeq	r9, [r1], -r0
   1517c:	andeq	sl, r1, r8
   15180:	andeq	sl, r1, r0, lsr r0
   15184:	andeq	sl, r1, r8, asr r0
   15188:	andeq	sl, r1, r4, lsl #1
   1518c:	andeq	r9, r1, r0, ror #30
   15190:	andeq	sl, r1, r0, asr #1
   15194:	andeq	r9, r1, r0, ror pc
   15198:	ldr	r3, [pc, #4]	; 151a4 <__assert_fail@plt+0x3384>
   1519c:	str	r0, [r3, #4]
   151a0:	bx	lr
   151a4:	andeq	fp, r2, r0, asr #6
   151a8:	push	{r4, r5, lr}
   151ac:	subs	r4, r0, #0
   151b0:	sub	sp, sp, #20
   151b4:	bne	1525c <__assert_fail@plt+0x343c>
   151b8:	ldr	r4, [pc, #512]	; 153c0 <__assert_fail@plt+0x35a0>
   151bc:	ldr	r3, [r4]
   151c0:	cmp	r3, #0
   151c4:	beq	15274 <__assert_fail@plt+0x3454>
   151c8:	mov	r0, #11
   151cc:	blx	r3
   151d0:	ldr	r3, [r4]
   151d4:	ldr	r5, [pc, #488]	; 153c4 <__assert_fail@plt+0x35a4>
   151d8:	cmp	r0, #0
   151dc:	movne	r5, r0
   151e0:	cmp	r3, #0
   151e4:	beq	15278 <__assert_fail@plt+0x3458>
   151e8:	mov	r0, #13
   151ec:	blx	r3
   151f0:	ldr	r3, [r4]
   151f4:	ldr	r4, [pc, #460]	; 153c8 <__assert_fail@plt+0x35a8>
   151f8:	cmp	r0, #0
   151fc:	movne	r4, r0
   15200:	cmp	r3, #0
   15204:	beq	153b8 <__assert_fail@plt+0x3598>
   15208:	mov	r0, #14
   1520c:	blx	r3
   15210:	ldr	r2, [pc, #436]	; 153cc <__assert_fail@plt+0x35ac>
   15214:	cmp	r0, #0
   15218:	moveq	r0, r2
   1521c:	ldr	lr, [pc, #428]	; 153d0 <__assert_fail@plt+0x35b0>
   15220:	ldr	ip, [pc, #428]	; 153d4 <__assert_fail@plt+0x35b4>
   15224:	mov	r2, #0
   15228:	str	r0, [sp, #4]
   1522c:	str	r2, [sp, #12]
   15230:	mov	r3, r4
   15234:	mov	r1, r5
   15238:	str	lr, [sp, #8]
   1523c:	str	ip, [sp]
   15240:	ldr	r2, [pc, #400]	; 153d8 <__assert_fail@plt+0x35b8>
   15244:	mov	r0, #1
   15248:	bl	14dcc <__assert_fail@plt+0x2fac>
   1524c:	mov	r0, #1
   15250:	add	sp, sp, #20
   15254:	pop	{r4, r5, lr}
   15258:	b	14eac <__assert_fail@plt+0x308c>
   1525c:	cmp	r4, #1
   15260:	beq	15350 <__assert_fail@plt+0x3530>
   15264:	cmp	r4, #2
   15268:	beq	15284 <__assert_fail@plt+0x3464>
   1526c:	add	sp, sp, #20
   15270:	pop	{r4, r5, pc}
   15274:	ldr	r5, [pc, #328]	; 153c4 <__assert_fail@plt+0x35a4>
   15278:	ldr	r4, [pc, #328]	; 153c8 <__assert_fail@plt+0x35a8>
   1527c:	ldr	r0, [pc, #328]	; 153cc <__assert_fail@plt+0x35ac>
   15280:	b	1521c <__assert_fail@plt+0x33fc>
   15284:	ldr	r4, [pc, #308]	; 153c0 <__assert_fail@plt+0x35a0>
   15288:	ldr	r3, [r4]
   1528c:	cmp	r3, #0
   15290:	beq	152e4 <__assert_fail@plt+0x34c4>
   15294:	mov	r0, #42	; 0x2a
   15298:	blx	r3
   1529c:	cmp	r0, #0
   152a0:	beq	15330 <__assert_fail@plt+0x3510>
   152a4:	ldrb	r2, [r0]
   152a8:	ldr	r3, [r4]
   152ac:	cmp	r2, #49	; 0x31
   152b0:	beq	152ec <__assert_fail@plt+0x34cc>
   152b4:	cmp	r3, #0
   152b8:	beq	152e4 <__assert_fail@plt+0x34c4>
   152bc:	mov	r0, #41	; 0x29
   152c0:	blx	r3
   152c4:	subs	r1, r0, #0
   152c8:	beq	152e4 <__assert_fail@plt+0x34c4>
   152cc:	mov	r3, #0
   152d0:	mov	r0, r3
   152d4:	ldr	r2, [pc, #244]	; 153d0 <__assert_fail@plt+0x35b0>
   152d8:	bl	14dcc <__assert_fail@plt+0x2fac>
   152dc:	mov	r0, #0
   152e0:	bl	11ba4 <exit@plt>
   152e4:	ldr	r1, [pc, #240]	; 153dc <__assert_fail@plt+0x35bc>
   152e8:	b	152cc <__assert_fail@plt+0x34ac>
   152ec:	cmp	r3, #0
   152f0:	beq	15338 <__assert_fail@plt+0x3518>
   152f4:	mov	r0, #40	; 0x28
   152f8:	blx	r3
   152fc:	subs	r5, r0, #0
   15300:	beq	15338 <__assert_fail@plt+0x3518>
   15304:	mov	r2, #0
   15308:	mov	r1, r5
   1530c:	mov	r0, #1
   15310:	bl	14dcc <__assert_fail@plt+0x2fac>
   15314:	ldrb	r3, [r5]
   15318:	cmp	r3, #0
   1531c:	beq	15330 <__assert_fail@plt+0x3510>
   15320:	mov	r2, #0
   15324:	ldr	r1, [pc, #164]	; 153d0 <__assert_fail@plt+0x35b0>
   15328:	mov	r0, #1
   1532c:	bl	14dcc <__assert_fail@plt+0x2fac>
   15330:	ldr	r3, [r4]
   15334:	b	152b4 <__assert_fail@plt+0x3494>
   15338:	mov	r2, #0
   1533c:	ldr	r1, [pc, #152]	; 153dc <__assert_fail@plt+0x35bc>
   15340:	mov	r0, #1
   15344:	bl	14dcc <__assert_fail@plt+0x2fac>
   15348:	ldr	r3, [r4]
   1534c:	b	152b4 <__assert_fail@plt+0x3494>
   15350:	ldr	r3, [pc, #104]	; 153c0 <__assert_fail@plt+0x35a0>
   15354:	ldr	r3, [r3]
   15358:	cmp	r3, #0
   1535c:	beq	153a4 <__assert_fail@plt+0x3584>
   15360:	mov	r0, #40	; 0x28
   15364:	blx	r3
   15368:	subs	r5, r0, #0
   1536c:	beq	153a4 <__assert_fail@plt+0x3584>
   15370:	mov	r2, #0
   15374:	mov	r1, r5
   15378:	mov	r0, r4
   1537c:	bl	14dcc <__assert_fail@plt+0x2fac>
   15380:	ldrb	r3, [r5]
   15384:	cmp	r3, #0
   15388:	beq	1539c <__assert_fail@plt+0x357c>
   1538c:	mov	r0, r4
   15390:	mov	r2, #0
   15394:	ldr	r1, [pc, #52]	; 153d0 <__assert_fail@plt+0x35b0>
   15398:	bl	14dcc <__assert_fail@plt+0x2fac>
   1539c:	mov	r0, #2
   153a0:	bl	11ba4 <exit@plt>
   153a4:	mov	r2, #0
   153a8:	ldr	r1, [pc, #44]	; 153dc <__assert_fail@plt+0x35bc>
   153ac:	mov	r0, #1
   153b0:	bl	14dcc <__assert_fail@plt+0x2fac>
   153b4:	b	1539c <__assert_fail@plt+0x357c>
   153b8:	ldr	r0, [pc, #12]	; 153cc <__assert_fail@plt+0x35ac>
   153bc:	b	1521c <__assert_fail@plt+0x33fc>
   153c0:	andeq	fp, r2, r0, asr #6
   153c4:	andeq	r9, r1, ip, lsl #30
   153c8:	andeq	sl, r1, r8, lsl #2
   153cc:	andeq	sl, r1, ip, lsl #2
   153d0:	andeq	sl, r1, r4, asr #8
   153d4:	andeq	sl, r1, r4, lsr #2
   153d8:	andeq	r9, r1, r8, lsr #30
   153dc:	andeq	sl, r1, r8, ror #12
   153e0:	ldr	r3, [pc, #236]	; 154d4 <__assert_fail@plt+0x36b4>
   153e4:	push	{r4, lr}
   153e8:	mov	r4, r0
   153ec:	ldr	r3, [r3]
   153f0:	cmp	r3, #0
   153f4:	beq	15404 <__assert_fail@plt+0x35e4>
   153f8:	blx	r3
   153fc:	cmp	r0, #0
   15400:	popne	{r4, pc}
   15404:	sub	r0, r4, #10
   15408:	cmp	r0, #31
   1540c:	ldrls	pc, [pc, r0, lsl #2]
   15410:	b	154cc <__assert_fail@plt+0x36ac>
   15414:	muleq	r1, ip, r4
   15418:	andeq	r5, r1, r4, lsr #9
   1541c:	andeq	r5, r1, ip, asr #9
   15420:	andeq	r5, r1, ip, lsr #9
   15424:			; <UNDEFINED> instruction: 0x000154b4
   15428:			; <UNDEFINED> instruction: 0x000154bc
   1542c:	andeq	r5, r1, r4, asr #9
   15430:	andeq	r5, r1, ip, asr #9
   15434:	andeq	r5, r1, ip, asr #9
   15438:	andeq	r5, r1, ip, asr #9
   1543c:	andeq	r5, r1, ip, asr #9
   15440:	andeq	r5, r1, ip, asr #9
   15444:	andeq	r5, r1, ip, asr #9
   15448:	andeq	r5, r1, ip, asr #9
   1544c:	andeq	r5, r1, ip, asr #9
   15450:	andeq	r5, r1, ip, asr #9
   15454:	andeq	r5, r1, ip, asr #9
   15458:	andeq	r5, r1, ip, asr #9
   1545c:	andeq	r5, r1, ip, asr #9
   15460:	andeq	r5, r1, ip, asr #9
   15464:	andeq	r5, r1, ip, asr #9
   15468:	andeq	r5, r1, ip, asr #9
   1546c:	andeq	r5, r1, ip, asr #9
   15470:	andeq	r5, r1, ip, asr #9
   15474:	andeq	r5, r1, ip, asr #9
   15478:	andeq	r5, r1, ip, asr #9
   1547c:	andeq	r5, r1, ip, asr #9
   15480:	andeq	r5, r1, ip, asr #9
   15484:	andeq	r5, r1, ip, asr #9
   15488:	andeq	r5, r1, ip, asr #9
   1548c:	muleq	r1, r4, r4
   15490:	muleq	r1, r4, r4
   15494:	ldr	r0, [pc, #60]	; 154d8 <__assert_fail@plt+0x36b8>
   15498:	pop	{r4, pc}
   1549c:	ldr	r0, [pc, #56]	; 154dc <__assert_fail@plt+0x36bc>
   154a0:	pop	{r4, pc}
   154a4:	ldr	r0, [pc, #52]	; 154e0 <__assert_fail@plt+0x36c0>
   154a8:	pop	{r4, pc}
   154ac:	ldr	r0, [pc, #48]	; 154e4 <__assert_fail@plt+0x36c4>
   154b0:	pop	{r4, pc}
   154b4:	ldr	r0, [pc, #44]	; 154e8 <__assert_fail@plt+0x36c8>
   154b8:	pop	{r4, pc}
   154bc:	ldr	r0, [pc, #40]	; 154ec <__assert_fail@plt+0x36cc>
   154c0:	pop	{r4, pc}
   154c4:	ldr	r0, [pc, #36]	; 154f0 <__assert_fail@plt+0x36d0>
   154c8:	pop	{r4, pc}
   154cc:	mov	r0, #0
   154d0:	pop	{r4, pc}
   154d4:	andeq	fp, r2, r0, asr #6
   154d8:	andeq	sl, r1, r8, ror #12
   154dc:	andeq	sl, r1, r8, lsr #2
   154e0:	andeq	r9, r1, ip, lsl #30
   154e4:	andeq	sl, r1, r8, lsl #2
   154e8:	andeq	sl, r1, ip, lsl #2
   154ec:	andeq	sl, r1, ip, asr #7
   154f0:	andeq	sl, r1, r4, ror r1
   154f4:	push	{r4, r5, r6, lr}
   154f8:	sub	sp, sp, #8
   154fc:	ldr	r6, [pc, #448]	; 156c4 <__assert_fail@plt+0x38a4>
   15500:	ldr	r3, [r6]
   15504:	cmp	r3, #0
   15508:	beq	156b4 <__assert_fail@plt+0x3894>
   1550c:	mov	r0, #11
   15510:	blx	r3
   15514:	subs	r1, r0, #0
   15518:	beq	156b4 <__assert_fail@plt+0x3894>
   1551c:	mov	r2, #0
   15520:	mov	r0, r2
   15524:	bl	14dcc <__assert_fail@plt+0x2fac>
   15528:	ldr	r3, [r6]
   1552c:	cmp	r3, #0
   15530:	beq	156bc <__assert_fail@plt+0x389c>
   15534:	mov	r0, #12
   15538:	blx	r3
   1553c:	subs	r2, r0, #0
   15540:	beq	15558 <__assert_fail@plt+0x3738>
   15544:	mov	r0, #0
   15548:	str	r0, [sp]
   1554c:	ldr	r3, [pc, #372]	; 156c8 <__assert_fail@plt+0x38a8>
   15550:	ldr	r1, [pc, #372]	; 156cc <__assert_fail@plt+0x38ac>
   15554:	bl	14dcc <__assert_fail@plt+0x2fac>
   15558:	ldr	r3, [r6]
   1555c:	cmp	r3, #0
   15560:	beq	156bc <__assert_fail@plt+0x389c>
   15564:	mov	r0, #13
   15568:	blx	r3
   1556c:	subs	r2, r0, #0
   15570:	beq	156bc <__assert_fail@plt+0x389c>
   15574:	mov	r0, #0
   15578:	str	r0, [sp]
   1557c:	ldr	r3, [pc, #332]	; 156d0 <__assert_fail@plt+0x38b0>
   15580:	ldr	r1, [pc, #332]	; 156d4 <__assert_fail@plt+0x38b4>
   15584:	bl	14dcc <__assert_fail@plt+0x2fac>
   15588:	ldr	r5, [pc, #320]	; 156d0 <__assert_fail@plt+0x38b0>
   1558c:	mov	r4, #20
   15590:	mov	r0, r4
   15594:	bl	153e0 <__assert_fail@plt+0x35c0>
   15598:	mov	r3, #0
   1559c:	mov	r2, r5
   155a0:	add	r4, r4, #1
   155a4:	subs	r1, r0, #0
   155a8:	mov	r0, r3
   155ac:	beq	155b4 <__assert_fail@plt+0x3794>
   155b0:	bl	14dcc <__assert_fail@plt+0x2fac>
   155b4:	cmp	r4, #30
   155b8:	bne	15590 <__assert_fail@plt+0x3770>
   155bc:	ldr	r3, [r6]
   155c0:	cmp	r3, #0
   155c4:	beq	156ac <__assert_fail@plt+0x388c>
   155c8:	mov	r0, #14
   155cc:	blx	r3
   155d0:	subs	r1, r0, #0
   155d4:	beq	156ac <__assert_fail@plt+0x388c>
   155d8:	mov	r3, #0
   155dc:	mov	r0, r3
   155e0:	ldr	r2, [pc, #232]	; 156d0 <__assert_fail@plt+0x38b0>
   155e4:	bl	14dcc <__assert_fail@plt+0x2fac>
   155e8:	ldr	r3, [r6]
   155ec:	cmp	r3, #0
   155f0:	beq	156a4 <__assert_fail@plt+0x3884>
   155f4:	mov	r0, #10
   155f8:	blx	r3
   155fc:	subs	r1, r0, #0
   15600:	beq	156a4 <__assert_fail@plt+0x3884>
   15604:	mov	r3, #0
   15608:	mov	r0, r3
   1560c:	ldr	r2, [pc, #188]	; 156d0 <__assert_fail@plt+0x38b0>
   15610:	bl	14dcc <__assert_fail@plt+0x2fac>
   15614:	ldr	r3, [r6]
   15618:	cmp	r3, #0
   1561c:	beq	1569c <__assert_fail@plt+0x387c>
   15620:	mov	r0, #15
   15624:	blx	r3
   15628:	subs	r1, r0, #0
   1562c:	beq	1569c <__assert_fail@plt+0x387c>
   15630:	mov	r2, #0
   15634:	mov	r0, r2
   15638:	bl	14dcc <__assert_fail@plt+0x2fac>
   1563c:	ldr	r3, [r6]
   15640:	cmp	r3, #0
   15644:	beq	15664 <__assert_fail@plt+0x3844>
   15648:	mov	r0, #18
   1564c:	blx	r3
   15650:	subs	r1, r0, #0
   15654:	beq	15664 <__assert_fail@plt+0x3844>
   15658:	mov	r2, #0
   1565c:	mov	r0, r2
   15660:	bl	14dcc <__assert_fail@plt+0x2fac>
   15664:	mov	r0, r4
   15668:	bl	153e0 <__assert_fail@plt+0x35c0>
   1566c:	mov	r2, #0
   15670:	add	r4, r4, #1
   15674:	subs	r1, r0, #0
   15678:	mov	r0, r2
   1567c:	beq	15684 <__assert_fail@plt+0x3864>
   15680:	bl	14dcc <__assert_fail@plt+0x2fac>
   15684:	cmp	r4, #40	; 0x28
   15688:	bne	15664 <__assert_fail@plt+0x3844>
   1568c:	mov	r0, #0
   15690:	add	sp, sp, #8
   15694:	pop	{r4, r5, r6, lr}
   15698:	b	14eac <__assert_fail@plt+0x308c>
   1569c:	ldr	r1, [pc, #52]	; 156d8 <__assert_fail@plt+0x38b8>
   156a0:	b	15630 <__assert_fail@plt+0x3810>
   156a4:	ldr	r1, [pc, #48]	; 156dc <__assert_fail@plt+0x38bc>
   156a8:	b	15604 <__assert_fail@plt+0x37e4>
   156ac:	ldr	r1, [pc, #44]	; 156e0 <__assert_fail@plt+0x38c0>
   156b0:	b	155d8 <__assert_fail@plt+0x37b8>
   156b4:	ldr	r1, [pc, #40]	; 156e4 <__assert_fail@plt+0x38c4>
   156b8:	b	1551c <__assert_fail@plt+0x36fc>
   156bc:	ldr	r2, [pc, #36]	; 156e8 <__assert_fail@plt+0x38c8>
   156c0:	b	15574 <__assert_fail@plt+0x3754>
   156c4:	andeq	fp, r2, r0, asr #6
   156c8:	andeq	r9, r1, r0, lsl r7
   156cc:	andeq	sl, r1, r8, asr #8
   156d0:	andeq	sl, r1, r4, asr #8
   156d4:	andeq	r9, r1, r8, lsr #30
   156d8:	andeq	sl, r1, ip, asr #7
   156dc:	andeq	sl, r1, r8, lsr #2
   156e0:	andeq	sl, r1, ip, lsl #2
   156e4:	andeq	r9, r1, ip, lsl #30
   156e8:	andeq	sl, r1, r8, lsl #2
   156ec:	ldr	r3, [pc, #1564]	; 15d10 <__assert_fail@plt+0x3ef0>
   156f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156f4:	sub	sp, sp, #36	; 0x24
   156f8:	ldr	r3, [r3]
   156fc:	mov	r5, r0
   15700:	str	r3, [sp, #28]
   15704:	str	r1, [sp, #16]
   15708:	bl	154f4 <__assert_fail@plt+0x36d4>
   1570c:	mov	r2, #0
   15710:	mov	r0, r2
   15714:	ldr	r1, [pc, #1528]	; 15d14 <__assert_fail@plt+0x3ef4>
   15718:	bl	14dcc <__assert_fail@plt+0x2fac>
   1571c:	ldr	r3, [pc, #1524]	; 15d18 <__assert_fail@plt+0x3ef8>
   15720:	ldr	r3, [r3]
   15724:	cmp	r3, #0
   15728:	beq	15800 <__assert_fail@plt+0x39e0>
   1572c:	mov	r0, #42	; 0x2a
   15730:	blx	r3
   15734:	cmp	r0, #0
   15738:	beq	15748 <__assert_fail@plt+0x3928>
   1573c:	ldrb	r3, [r0]
   15740:	cmp	r3, #49	; 0x31
   15744:	beq	15bd4 <__assert_fail@plt+0x3db4>
   15748:	ldr	r3, [pc, #1480]	; 15d18 <__assert_fail@plt+0x3ef8>
   1574c:	ldr	r3, [r3]
   15750:	cmp	r3, #0
   15754:	beq	15800 <__assert_fail@plt+0x39e0>
   15758:	mov	r0, #41	; 0x29
   1575c:	blx	r3
   15760:	subs	r1, r0, #0
   15764:	beq	15800 <__assert_fail@plt+0x39e0>
   15768:	mov	r3, #0
   1576c:	mov	r0, r3
   15770:	ldr	r2, [pc, #1436]	; 15d14 <__assert_fail@plt+0x3ef4>
   15774:	bl	14dcc <__assert_fail@plt+0x2fac>
   15778:	ldr	r8, [r5, #12]
   1577c:	cmp	r8, #0
   15780:	beq	15830 <__assert_fail@plt+0x3a10>
   15784:	ldr	r6, [r5]
   15788:	cmp	r6, #0
   1578c:	mov	r7, r6
   15790:	beq	15808 <__assert_fail@plt+0x39e8>
   15794:	mov	r4, r5
   15798:	mov	r6, #0
   1579c:	b	157e0 <__assert_fail@plt+0x39c0>
   157a0:	ldrb	sl, [r9]
   157a4:	cmp	sl, #64	; 0x40
   157a8:	beq	157d4 <__assert_fail@plt+0x39b4>
   157ac:	bl	11bec <strlen@plt>
   157b0:	cmp	sl, #124	; 0x7c
   157b4:	beq	15880 <__assert_fail@plt+0x3a60>
   157b8:	cmp	r0, #34	; 0x22
   157bc:	movle	r3, #1
   157c0:	movgt	r3, #0
   157c4:	cmp	r0, r6
   157c8:	movle	r3, #0
   157cc:	cmp	r3, #0
   157d0:	movne	r6, r0
   157d4:	ldr	r3, [r4, #16]!
   157d8:	cmp	r3, #0
   157dc:	beq	158bc <__assert_fail@plt+0x3a9c>
   157e0:	ldr	r0, [r4, #4]
   157e4:	cmp	r0, #0
   157e8:	beq	157d4 <__assert_fail@plt+0x39b4>
   157ec:	ldr	r9, [r4, #12]
   157f0:	cmp	r9, #0
   157f4:	bne	157a0 <__assert_fail@plt+0x3980>
   157f8:	bl	11bec <strlen@plt>
   157fc:	b	157b8 <__assert_fail@plt+0x3998>
   15800:	ldr	r1, [pc, #1300]	; 15d1c <__assert_fail@plt+0x3efc>
   15804:	b	15768 <__assert_fail@plt+0x3948>
   15808:	ldrb	r3, [r8]
   1580c:	cmp	r3, #64	; 0x40
   15810:	bne	15b48 <__assert_fail@plt+0x3d28>
   15814:	ldr	r3, [sp, #16]
   15818:	tst	r3, #32
   1581c:	beq	15830 <__assert_fail@plt+0x3a10>
   15820:	mov	r2, #0
   15824:	mov	r0, r2
   15828:	ldr	r1, [pc, #1264]	; 15d20 <__assert_fail@plt+0x3f00>
   1582c:	bl	14dcc <__assert_fail@plt+0x2fac>
   15830:	ldr	r3, [pc, #1248]	; 15d18 <__assert_fail@plt+0x3ef8>
   15834:	ldr	r3, [r3]
   15838:	cmp	r3, #0
   1583c:	beq	15870 <__assert_fail@plt+0x3a50>
   15840:	mov	r0, #19
   15844:	blx	r3
   15848:	subs	r4, r0, #0
   1584c:	beq	15870 <__assert_fail@plt+0x3a50>
   15850:	mov	r2, #0
   15854:	mov	r0, r2
   15858:	ldr	r1, [pc, #1204]	; 15d14 <__assert_fail@plt+0x3ef4>
   1585c:	bl	14dcc <__assert_fail@plt+0x2fac>
   15860:	mov	r2, #0
   15864:	mov	r1, r4
   15868:	mov	r0, r2
   1586c:	bl	14dcc <__assert_fail@plt+0x2fac>
   15870:	mov	r0, #0
   15874:	bl	14eac <__assert_fail@plt+0x308c>
   15878:	mov	r0, #0
   1587c:	bl	11ba4 <exit@plt>
   15880:	ldrb	r2, [r9, #1]
   15884:	add	r3, r9, #1
   15888:	cmp	r2, #61	; 0x3d
   1588c:	beq	158a0 <__assert_fail@plt+0x3a80>
   15890:	cmp	r2, #124	; 0x7c
   15894:	cmpne	r2, #0
   15898:	add	r0, r0, #1
   1589c:	beq	157b8 <__assert_fail@plt+0x3998>
   158a0:	sub	r9, r0, r9
   158a4:	add	r0, r3, r9
   158a8:	ldrb	r2, [r3, #1]!
   158ac:	cmp	r2, #0
   158b0:	cmpne	r2, #124	; 0x7c
   158b4:	bne	158a4 <__assert_fail@plt+0x3a84>
   158b8:	b	157b8 <__assert_fail@plt+0x3998>
   158bc:	ldrb	r3, [r8]
   158c0:	add	r2, r6, #10
   158c4:	str	r2, [sp, #12]
   158c8:	cmp	r3, #64	; 0x40
   158cc:	moveq	r1, r7
   158d0:	bne	15b50 <__assert_fail@plt+0x3d30>
   158d4:	ldr	sl, [pc, #1096]	; 15d24 <__assert_fail@plt+0x3f04>
   158d8:	ldr	r4, [r5, #12]
   158dc:	cmp	r4, #0
   158e0:	beq	158f0 <__assert_fail@plt+0x3ad0>
   158e4:	ldrb	r3, [r4]
   158e8:	cmp	r3, #64	; 0x40
   158ec:	beq	15ab8 <__assert_fail@plt+0x3c98>
   158f0:	cmp	r1, #255	; 0xff
   158f4:	bgt	159e0 <__assert_fail@plt+0x3bc0>
   158f8:	mov	ip, #0
   158fc:	add	r8, sp, #24
   15900:	mov	r3, ip
   15904:	strb	r1, [sp, #24]
   15908:	mov	r0, ip
   1590c:	mov	r2, r8
   15910:	ldr	r1, [pc, #1040]	; 15d28 <__assert_fail@plt+0x3f08>
   15914:	strb	ip, [sp, #25]
   15918:	bl	14dcc <__assert_fail@plt+0x2fac>
   1591c:	ldr	r3, [r5, #4]
   15920:	cmp	r3, #0
   15924:	movne	r7, #3
   15928:	beq	15b2c <__assert_fail@plt+0x3d0c>
   1592c:	ldr	r2, [r5]
   15930:	mov	r9, #0
   15934:	cmp	r2, #256	; 0x100
   15938:	movlt	ip, #44	; 0x2c
   1593c:	movge	ip, #32
   15940:	str	r9, [sp]
   15944:	mov	r0, r9
   15948:	ldr	r2, [pc, #988]	; 15d2c <__assert_fail@plt+0x3f0c>
   1594c:	mov	r1, r8
   15950:	strb	ip, [sp, #24]
   15954:	strb	r9, [sp, #25]
   15958:	bl	14dcc <__assert_fail@plt+0x2fac>
   1595c:	cmp	r4, r9
   15960:	add	r7, r0, r7
   15964:	beq	15974 <__assert_fail@plt+0x3b54>
   15968:	ldrb	r3, [r4]
   1596c:	cmp	r3, #124	; 0x7c
   15970:	beq	15b74 <__assert_fail@plt+0x3d54>
   15974:	mov	r2, #0
   15978:	mov	r0, r2
   1597c:	mov	r1, sl
   15980:	add	r7, r7, #3
   15984:	bl	14dcc <__assert_fail@plt+0x2fac>
   15988:	ldr	r3, [sp, #12]
   1598c:	cmp	r7, r3
   15990:	bge	159b8 <__assert_fail@plt+0x3b98>
   15994:	ldr	r9, [pc, #916]	; 15d30 <__assert_fail@plt+0x3f10>
   15998:	add	r8, r6, #10
   1599c:	mov	r2, #0
   159a0:	add	r7, r7, #1
   159a4:	mov	r0, r2
   159a8:	mov	r1, r9
   159ac:	bl	14dcc <__assert_fail@plt+0x2fac>
   159b0:	cmp	r7, r8
   159b4:	bne	1599c <__assert_fail@plt+0x3b7c>
   159b8:	cmp	r4, #0
   159bc:	bne	15a08 <__assert_fail@plt+0x3be8>
   159c0:	mov	r2, #0
   159c4:	mov	r0, r2
   159c8:	ldr	r1, [pc, #836]	; 15d14 <__assert_fail@plt+0x3ef4>
   159cc:	bl	14dcc <__assert_fail@plt+0x2fac>
   159d0:	ldr	r1, [r5, #16]!
   159d4:	cmp	r1, #0
   159d8:	bne	158d8 <__assert_fail@plt+0x3ab8>
   159dc:	b	15814 <__assert_fail@plt+0x39f4>
   159e0:	mov	r2, #0
   159e4:	mov	r0, r2
   159e8:	mov	r1, sl
   159ec:	bl	14dcc <__assert_fail@plt+0x2fac>
   159f0:	ldr	r3, [r5, #4]
   159f4:	mov	r7, #3
   159f8:	cmp	r3, #0
   159fc:	addne	r8, sp, #24
   15a00:	bne	1592c <__assert_fail@plt+0x3b0c>
   15a04:	b	15994 <__assert_fail@plt+0x3b74>
   15a08:	ldrb	r3, [r4]
   15a0c:	ldr	r2, [sp, #12]
   15a10:	cmp	r3, #0
   15a14:	cmpne	r7, r2
   15a18:	bgt	15c50 <__assert_fail@plt+0x3e30>
   15a1c:	cmp	r3, #0
   15a20:	beq	159c0 <__assert_fail@plt+0x3ba0>
   15a24:	cmp	r3, #10
   15a28:	mov	r9, #0
   15a2c:	ldr	r7, [pc, #764]	; 15d30 <__assert_fail@plt+0x3f10>
   15a30:	bne	15a8c <__assert_fail@plt+0x3c6c>
   15a34:	ldrb	r3, [r4, #1]
   15a38:	cmp	r3, #0
   15a3c:	beq	159c0 <__assert_fail@plt+0x3ba0>
   15a40:	mov	r2, #0
   15a44:	mov	r0, r2
   15a48:	ldr	r1, [pc, #708]	; 15d14 <__assert_fail@plt+0x3ef4>
   15a4c:	bl	14dcc <__assert_fail@plt+0x2fac>
   15a50:	add	fp, r6, #10
   15a54:	mov	r8, #0
   15a58:	mov	r2, #0
   15a5c:	add	r8, r8, #1
   15a60:	mov	r0, r2
   15a64:	mov	r1, r7
   15a68:	bl	14dcc <__assert_fail@plt+0x2fac>
   15a6c:	cmp	r8, fp
   15a70:	bne	15a58 <__assert_fail@plt+0x3c38>
   15a74:	ldrb	r3, [r4, #1]
   15a78:	add	r4, r4, #1
   15a7c:	cmp	r3, #0
   15a80:	beq	159c0 <__assert_fail@plt+0x3ba0>
   15a84:	cmp	r3, #10
   15a88:	beq	15a34 <__assert_fail@plt+0x3c14>
   15a8c:	mov	r2, #0
   15a90:	mov	r0, r2
   15a94:	add	r1, sp, #24
   15a98:	strb	r3, [sp, #24]
   15a9c:	strb	r9, [sp, #25]
   15aa0:	bl	14dcc <__assert_fail@plt+0x2fac>
   15aa4:	ldrb	r3, [r4, #1]
   15aa8:	add	r4, r4, #1
   15aac:	cmp	r3, #0
   15ab0:	bne	15a84 <__assert_fail@plt+0x3c64>
   15ab4:	b	159c0 <__assert_fail@plt+0x3ba0>
   15ab8:	ldrb	r3, [r4, #1]
   15abc:	cmp	r3, #0
   15ac0:	beq	159d0 <__assert_fail@plt+0x3bb0>
   15ac4:	cmp	r3, #10
   15ac8:	add	r4, r4, #1
   15acc:	mov	r7, #0
   15ad0:	ldr	r8, [pc, #572]	; 15d14 <__assert_fail@plt+0x3ef4>
   15ad4:	bne	15b0c <__assert_fail@plt+0x3cec>
   15ad8:	ldrb	r3, [r4, #1]
   15adc:	cmp	r3, #0
   15ae0:	beq	159c0 <__assert_fail@plt+0x3ba0>
   15ae4:	mov	r2, #0
   15ae8:	mov	r0, r2
   15aec:	mov	r1, r8
   15af0:	bl	14dcc <__assert_fail@plt+0x2fac>
   15af4:	ldrb	r3, [r4, #1]
   15af8:	cmp	r3, #0
   15afc:	add	r4, r4, #1
   15b00:	beq	159c0 <__assert_fail@plt+0x3ba0>
   15b04:	cmp	r3, #10
   15b08:	beq	15ad8 <__assert_fail@plt+0x3cb8>
   15b0c:	mov	r2, #0
   15b10:	mov	r0, r2
   15b14:	add	r1, sp, #24
   15b18:	strb	r3, [sp, #24]
   15b1c:	strb	r7, [sp, #25]
   15b20:	bl	14dcc <__assert_fail@plt+0x2fac>
   15b24:	ldrb	r3, [r4, #1]
   15b28:	b	15af8 <__assert_fail@plt+0x3cd8>
   15b2c:	cmp	r4, #0
   15b30:	beq	15b40 <__assert_fail@plt+0x3d20>
   15b34:	ldrb	r2, [r4]
   15b38:	cmp	r2, #124	; 0x7c
   15b3c:	beq	15ca4 <__assert_fail@plt+0x3e84>
   15b40:	mov	r7, #3
   15b44:	b	15994 <__assert_fail@plt+0x3b74>
   15b48:	mov	r3, #10
   15b4c:	str	r3, [sp, #12]
   15b50:	mov	r3, #0
   15b54:	ldr	r1, [pc, #472]	; 15d34 <__assert_fail@plt+0x3f14>
   15b58:	mov	r0, r3
   15b5c:	ldr	r2, [pc, #432]	; 15d14 <__assert_fail@plt+0x3ef4>
   15b60:	bl	14dcc <__assert_fail@plt+0x2fac>
   15b64:	ldr	r1, [r5]
   15b68:	cmp	r1, #0
   15b6c:	bne	158d4 <__assert_fail@plt+0x3ab4>
   15b70:	b	15814 <__assert_fail@plt+0x39f4>
   15b74:	ldrb	r3, [r4, #1]
   15b78:	add	fp, r4, #1
   15b7c:	cmp	r3, #61	; 0x3d
   15b80:	bne	15c24 <__assert_fail@plt+0x3e04>
   15b84:	mvn	r9, r4
   15b88:	add	r9, r9, r7
   15b8c:	add	r4, r4, #2
   15b90:	mov	fp, #0
   15b94:	mov	r2, #0
   15b98:	mov	r0, r2
   15b9c:	mov	r1, r8
   15ba0:	strb	r3, [sp, #24]
   15ba4:	strb	fp, [sp, #25]
   15ba8:	add	r7, r9, r4
   15bac:	bl	14dcc <__assert_fail@plt+0x2fac>
   15bb0:	mov	r2, r4
   15bb4:	ldrb	r3, [r4], #1
   15bb8:	cmp	r3, #0
   15bbc:	cmpne	r3, #124	; 0x7c
   15bc0:	bne	15b94 <__assert_fail@plt+0x3d74>
   15bc4:	mov	r4, r2
   15bc8:	cmp	r3, #0
   15bcc:	addne	r4, r4, #1
   15bd0:	b	15974 <__assert_fail@plt+0x3b54>
   15bd4:	ldr	r3, [pc, #316]	; 15d18 <__assert_fail@plt+0x3ef8>
   15bd8:	ldr	r3, [r3]
   15bdc:	cmp	r3, #0
   15be0:	beq	15c90 <__assert_fail@plt+0x3e70>
   15be4:	mov	r0, #40	; 0x28
   15be8:	blx	r3
   15bec:	subs	r4, r0, #0
   15bf0:	beq	15c90 <__assert_fail@plt+0x3e70>
   15bf4:	mov	r2, #0
   15bf8:	mov	r1, r4
   15bfc:	mov	r0, #1
   15c00:	bl	14dcc <__assert_fail@plt+0x2fac>
   15c04:	ldrb	r3, [r4]
   15c08:	cmp	r3, #0
   15c0c:	beq	15748 <__assert_fail@plt+0x3928>
   15c10:	mov	r2, #0
   15c14:	ldr	r1, [pc, #248]	; 15d14 <__assert_fail@plt+0x3ef4>
   15c18:	mov	r0, #1
   15c1c:	bl	14dcc <__assert_fail@plt+0x2fac>
   15c20:	b	15748 <__assert_fail@plt+0x3928>
   15c24:	mov	r2, r9
   15c28:	mov	r0, r9
   15c2c:	ldr	r1, [pc, #252]	; 15d30 <__assert_fail@plt+0x3f10>
   15c30:	bl	14dcc <__assert_fail@plt+0x2fac>
   15c34:	ldrb	r3, [r4, #1]
   15c38:	add	r7, r7, #1
   15c3c:	cmp	r3, #124	; 0x7c
   15c40:	cmpne	r3, r9
   15c44:	moveq	r4, fp
   15c48:	bne	15b84 <__assert_fail@plt+0x3d64>
   15c4c:	b	15bc8 <__assert_fail@plt+0x3da8>
   15c50:	mov	r2, #0
   15c54:	mov	r0, r2
   15c58:	ldr	r1, [pc, #180]	; 15d14 <__assert_fail@plt+0x3ef4>
   15c5c:	bl	14dcc <__assert_fail@plt+0x2fac>
   15c60:	ldr	r8, [pc, #200]	; 15d30 <__assert_fail@plt+0x3f10>
   15c64:	add	r9, r6, #10
   15c68:	mov	r7, #0
   15c6c:	mov	r2, #0
   15c70:	add	r7, r7, #1
   15c74:	mov	r0, r2
   15c78:	mov	r1, r8
   15c7c:	bl	14dcc <__assert_fail@plt+0x2fac>
   15c80:	cmp	r7, r9
   15c84:	bne	15c6c <__assert_fail@plt+0x3e4c>
   15c88:	ldrb	r3, [r4]
   15c8c:	b	15a1c <__assert_fail@plt+0x3bfc>
   15c90:	mov	r2, #0
   15c94:	ldr	r1, [pc, #128]	; 15d1c <__assert_fail@plt+0x3efc>
   15c98:	mov	r0, #1
   15c9c:	bl	14dcc <__assert_fail@plt+0x2fac>
   15ca0:	b	15748 <__assert_fail@plt+0x3928>
   15ca4:	mov	r2, r3
   15ca8:	ldr	r1, [pc, #128]	; 15d30 <__assert_fail@plt+0x3f10>
   15cac:	mov	r0, r3
   15cb0:	str	r3, [sp, #20]
   15cb4:	add	r9, r4, #1
   15cb8:	bl	14dcc <__assert_fail@plt+0x2fac>
   15cbc:	rsb	fp, r4, #3
   15cc0:	b	15ce0 <__assert_fail@plt+0x3ec0>
   15cc4:	mov	r2, #0
   15cc8:	ldr	r3, [sp, #20]
   15ccc:	mov	r0, r2
   15cd0:	mov	r1, r8
   15cd4:	strb	ip, [sp, #24]
   15cd8:	strb	r3, [sp, #25]
   15cdc:	bl	14dcc <__assert_fail@plt+0x2fac>
   15ce0:	add	r7, fp, r9
   15ce4:	mov	r4, r9
   15ce8:	ldrb	ip, [r9], #1
   15cec:	cmp	ip, #0
   15cf0:	cmpne	ip, #124	; 0x7c
   15cf4:	bne	15cc4 <__assert_fail@plt+0x3ea4>
   15cf8:	ldr	r3, [r5, #4]
   15cfc:	cmp	ip, #0
   15d00:	movne	r4, r9
   15d04:	cmp	r3, #0
   15d08:	bne	1592c <__assert_fail@plt+0x3b0c>
   15d0c:	b	15988 <__assert_fail@plt+0x3b68>
   15d10:	andeq	sl, r2, r0, lsl #26
   15d14:	andeq	sl, r1, r4, asr #8
   15d18:	andeq	fp, r2, r0, asr #6
   15d1c:	andeq	sl, r1, r8, ror #12
   15d20:	andeq	sl, r1, r4, ror #8
   15d24:	andeq	sl, r1, ip, asr r4
   15d28:	andeq	sl, r1, r8, asr r4
   15d2c:	andeq	sl, r1, r0, ror #8
   15d30:	andeq	r9, r1, r8, lsr #30
   15d34:	andeq	sl, r1, ip, asr #8
   15d38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d3c:	sub	sp, sp, #36	; 0x24
   15d40:	mov	r4, r0
   15d44:	mov	r2, #0
   15d48:	str	r1, [sp, #8]
   15d4c:	mov	r1, r2
   15d50:	bl	14f80 <__assert_fail@plt+0x3160>
   15d54:	ldr	r3, [r4]
   15d58:	ldr	r9, [r4, #28]
   15d5c:	ldr	fp, [r4, #4]
   15d60:	ldr	r8, [r3]
   15d64:	mov	r1, r3
   15d68:	adds	r2, r8, #0
   15d6c:	movne	r2, #1
   15d70:	cmp	r9, #0
   15d74:	movne	r2, #0
   15d78:	cmp	r2, #0
   15d7c:	ldr	r7, [fp]
   15d80:	mov	r2, fp
   15d84:	beq	15da0 <__assert_fail@plt+0x3f80>
   15d88:	ldr	r0, [r4, #8]
   15d8c:	tst	r0, #16
   15d90:	bne	15f38 <__assert_fail@plt+0x4118>
   15d94:	sub	r8, r8, #1
   15d98:	add	r7, r7, #4
   15d9c:	mov	r9, #1
   15da0:	cmp	r8, #0
   15da4:	beq	15f2c <__assert_fail@plt+0x410c>
   15da8:	ldr	sl, [r4, #36]	; 0x24
   15dac:	ldr	r5, [r7]
   15db0:	cmp	sl, #0
   15db4:	str	r5, [r4, #40]	; 0x28
   15db8:	moveq	r1, #1
   15dbc:	moveq	r0, sl
   15dc0:	bne	15e00 <__assert_fail@plt+0x3fe0>
   15dc4:	ldrb	r2, [r5]
   15dc8:	cmp	r2, #45	; 0x2d
   15dcc:	beq	15e30 <__assert_fail@plt+0x4010>
   15dd0:	ldr	r6, [r4, #32]
   15dd4:	cmp	r6, #0
   15dd8:	bne	15f6c <__assert_fail@plt+0x414c>
   15ddc:	ldr	r2, [r4, #8]
   15de0:	tst	r2, #4
   15de4:	bne	15f40 <__assert_fail@plt+0x4120>
   15de8:	str	r1, [r4, #36]	; 0x24
   15dec:	ldr	r2, [r4, #36]	; 0x24
   15df0:	ldr	r5, [r7]
   15df4:	cmp	r2, #0
   15df8:	str	r5, [r4, #40]	; 0x28
   15dfc:	beq	15dc4 <__assert_fail@plt+0x3fa4>
   15e00:	ldr	r2, [r4, #8]
   15e04:	ands	r2, r2, #2
   15e08:	streq	r2, [r4, #16]
   15e0c:	moveq	r1, r3
   15e10:	moveq	r2, fp
   15e14:	bne	15f40 <__assert_fail@plt+0x4120>
   15e18:	str	r8, [r1]
   15e1c:	str	r7, [r2]
   15e20:	ldr	r0, [r4, #16]
   15e24:	str	r9, [r4, #28]
   15e28:	add	sp, sp, #36	; 0x24
   15e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e30:	ldrb	r2, [r5, #1]
   15e34:	cmp	r2, #45	; 0x2d
   15e38:	beq	15eec <__assert_fail@plt+0x40cc>
   15e3c:	cmp	r2, #0
   15e40:	beq	15dd0 <__assert_fail@plt+0x3fb0>
   15e44:	ldr	r2, [sp, #8]
   15e48:	ldr	r6, [r4, #32]
   15e4c:	ldr	r2, [r2]
   15e50:	cmp	r6, #0
   15e54:	str	r2, [sp, #16]
   15e58:	bne	15f78 <__assert_fail@plt+0x4158>
   15e5c:	ldr	r1, [r4, #8]
   15e60:	mov	r2, #1
   15e64:	tst	r1, #32
   15e68:	add	r1, r5, r2
   15e6c:	str	r2, [r4, #32]
   15e70:	str	r1, [sp, #12]
   15e74:	beq	160c8 <__assert_fail@plt+0x42a8>
   15e78:	ldr	r0, [sp, #16]
   15e7c:	cmp	r0, #0
   15e80:	beq	1645c <__assert_fail@plt+0x463c>
   15e84:	ldr	r2, [sp, #8]
   15e88:	str	sl, [sp, #24]
   15e8c:	str	r5, [sp, #28]
   15e90:	str	r4, [sp, #20]
   15e94:	mov	r5, r6
   15e98:	mov	sl, r1
   15e9c:	mov	r4, r2
   15ea0:	mov	r6, r3
   15ea4:	ldr	r0, [r4, #4]
   15ea8:	cmp	r0, #0
   15eac:	beq	15ec0 <__assert_fail@plt+0x40a0>
   15eb0:	mov	r1, sl
   15eb4:	bl	11940 <strcmp@plt>
   15eb8:	cmp	r0, #0
   15ebc:	beq	16038 <__assert_fail@plt+0x4218>
   15ec0:	ldr	r1, [r4, #16]!
   15ec4:	add	r5, r5, #1
   15ec8:	cmp	r1, #0
   15ecc:	bne	15ea4 <__assert_fail@plt+0x4084>
   15ed0:	ldr	r5, [sp, #28]
   15ed4:	mov	r3, r6
   15ed8:	ldr	sl, [sp, #24]
   15edc:	ldr	r4, [sp, #20]
   15ee0:	ldrb	r0, [r5, #1]
   15ee4:	mov	r6, #1
   15ee8:	b	15f94 <__assert_fail@plt+0x4174>
   15eec:	str	r0, [r4, #32]
   15ef0:	ldrb	r2, [r5, #2]
   15ef4:	cmp	r2, #0
   15ef8:	bne	16334 <__assert_fail@plt+0x4514>
   15efc:	ldr	r2, [r4, #8]
   15f00:	tst	r2, #8
   15f04:	bne	1612c <__assert_fail@plt+0x430c>
   15f08:	orr	r2, r2, #256	; 0x100
   15f0c:	subs	r8, r8, #1
   15f10:	str	r2, [r4, #8]
   15f14:	str	r1, [r4, #36]	; 0x24
   15f18:	add	r7, r7, #4
   15f1c:	add	r9, r9, #1
   15f20:	bne	15dec <__assert_fail@plt+0x3fcc>
   15f24:	mov	r1, r3
   15f28:	mov	r2, fp
   15f2c:	mov	r8, #0
   15f30:	str	r8, [r4, #16]
   15f34:	b	15e18 <__assert_fail@plt+0x3ff8>
   15f38:	mov	r9, #0
   15f3c:	b	15da8 <__assert_fail@plt+0x3f88>
   15f40:	mvn	ip, #0
   15f44:	mov	r0, #2
   15f48:	str	r5, [r4, #24]
   15f4c:	add	r8, r8, ip
   15f50:	add	r7, r7, #4
   15f54:	add	r9, r9, #1
   15f58:	mov	r1, r3
   15f5c:	mov	r2, fp
   15f60:	str	ip, [r4, #16]
   15f64:	str	r0, [r4, #20]
   15f68:	b	15e18 <__assert_fail@plt+0x3ff8>
   15f6c:	ldr	r2, [sp, #8]
   15f70:	ldr	r2, [r2]
   15f74:	str	r2, [sp, #16]
   15f78:	add	r2, r5, r6
   15f7c:	str	r2, [sp, #12]
   15f80:	ldr	r2, [sp, #16]
   15f84:	cmp	r2, #0
   15f88:	ldr	r2, [sp, #12]
   15f8c:	ldrb	r0, [r2]
   15f90:	beq	16464 <__assert_fail@plt+0x4644>
   15f94:	ldr	r2, [sp, #16]
   15f98:	mov	lr, r0
   15f9c:	cmp	r0, r2
   15fa0:	beq	1646c <__assert_fail@plt+0x464c>
   15fa4:	ldr	r2, [sp, #8]
   15fa8:	add	r2, r2, #16
   15fac:	b	15fbc <__assert_fail@plt+0x419c>
   15fb0:	cmp	r1, r0
   15fb4:	add	r2, r2, #16
   15fb8:	beq	16054 <__assert_fail@plt+0x4234>
   15fbc:	ldr	r1, [r2]
   15fc0:	mov	ip, r2
   15fc4:	cmp	r1, #0
   15fc8:	bne	15fb0 <__assert_fail@plt+0x4190>
   15fcc:	cmp	r0, #63	; 0x3f
   15fd0:	cmpne	r0, #104	; 0x68
   15fd4:	beq	1651c <__assert_fail@plt+0x46fc>
   15fd8:	ldr	r2, [ip, #8]
   15fdc:	ldr	r1, [sp, #12]
   15fe0:	tst	r2, #128	; 0x80
   15fe4:	add	r6, r6, #1
   15fe8:	mvnne	r2, #6
   15fec:	mvneq	r2, #1
   15ff0:	str	r6, [r4, #32]
   15ff4:	str	r1, [r4, #24]
   15ff8:	str	r2, [r4, #16]
   15ffc:	ldr	r2, [sp, #12]
   16000:	mov	r1, r3
   16004:	ldrb	r0, [r2, #1]
   16008:	mov	r2, fp
   1600c:	cmp	r0, #0
   16010:	andne	sl, sl, #1
   16014:	moveq	sl, #1
   16018:	cmp	sl, #0
   1601c:	beq	15e18 <__assert_fail@plt+0x3ff8>
   16020:	mov	r3, #0
   16024:	sub	r8, r8, #1
   16028:	add	r7, r7, #4
   1602c:	add	r9, r9, #1
   16030:	str	r3, [r4, #32]
   16034:	b	15e18 <__assert_fail@plt+0x3ff8>
   16038:	ldr	r2, [sp, #8]
   1603c:	mov	r3, r6
   16040:	ldr	r4, [sp, #20]
   16044:	mov	r6, #1
   16048:	ldr	lr, [r2, r5, lsl #4]
   1604c:	add	ip, r2, r5, lsl #4
   16050:	mov	sl, r6
   16054:	cmp	lr, #0
   16058:	beq	160e0 <__assert_fail@plt+0x42c0>
   1605c:	ldr	r1, [ip, #8]
   16060:	str	lr, [r4, #16]
   16064:	ands	r2, r1, #7
   16068:	beq	160d0 <__assert_fail@plt+0x42b0>
   1606c:	ldr	r2, [sp, #12]
   16070:	eor	sl, sl, #1
   16074:	ldrb	r0, [r2, #1]
   16078:	cmp	r0, #0
   1607c:	andne	r0, sl, #1
   16080:	moveq	r0, #0
   16084:	cmp	r0, #0
   16088:	bne	16448 <__assert_fail@plt+0x4628>
   1608c:	ldr	r2, [r7, #4]
   16090:	cmp	r2, #0
   16094:	beq	160ec <__assert_fail@plt+0x42cc>
   16098:	ldrb	ip, [r2]
   1609c:	cmp	ip, #45	; 0x2d
   160a0:	bne	16110 <__assert_fail@plt+0x42f0>
   160a4:	ldrb	ip, [r2, #1]
   160a8:	cmp	ip, #0
   160ac:	beq	16110 <__assert_fail@plt+0x42f0>
   160b0:	tst	r1, #8
   160b4:	beq	16110 <__assert_fail@plt+0x42f0>
   160b8:	str	r0, [r4, #20]
   160bc:	mov	r1, r3
   160c0:	mov	r2, fp
   160c4:	b	16020 <__assert_fail@plt+0x4200>
   160c8:	mov	r6, r2
   160cc:	b	15f80 <__assert_fail@plt+0x4160>
   160d0:	add	r6, r6, #1
   160d4:	str	r6, [r4, #32]
   160d8:	str	r2, [r4, #20]
   160dc:	b	15ffc <__assert_fail@plt+0x41dc>
   160e0:	ldr	r2, [sp, #12]
   160e4:	ldrb	r0, [r2]
   160e8:	b	15fcc <__assert_fail@plt+0x41ac>
   160ec:	tst	r1, #8
   160f0:	mvneq	r0, #2
   160f4:	strne	r2, [r4, #20]
   160f8:	movne	r1, r3
   160fc:	movne	r2, fp
   16100:	moveq	r1, r3
   16104:	moveq	r2, fp
   16108:	streq	r0, [r4, #16]
   1610c:	b	16020 <__assert_fail@plt+0x4200>
   16110:	mov	r0, r4
   16114:	bl	14ca4 <__assert_fail@plt+0x2e84>
   16118:	sub	r8, r8, #1
   1611c:	add	r7, r7, #4
   16120:	add	r9, r9, #1
   16124:	ldm	r4, {r1, r2}
   16128:	b	16020 <__assert_fail@plt+0x4200>
   1612c:	add	r6, r5, #2
   16130:	mov	r0, r6
   16134:	mov	r1, #61	; 0x3d
   16138:	bl	11c04 <strchr@plt>
   1613c:	subs	r3, r0, #0
   16140:	str	r3, [sp, #12]
   16144:	beq	16360 <__assert_fail@plt+0x4540>
   16148:	ldr	r2, [sp, #12]
   1614c:	mov	r3, #0
   16150:	strb	r3, [r2]
   16154:	ldrb	r3, [r5, #2]
   16158:	cmp	r3, #0
   1615c:	moveq	r3, #61	; 0x3d
   16160:	strbeq	r3, [r2]
   16164:	mvneq	r5, #0
   16168:	beq	16214 <__assert_fail@plt+0x43f4>
   1616c:	ldr	r3, [sp, #8]
   16170:	ldr	r3, [r3]
   16174:	cmp	r3, #0
   16178:	beq	16500 <__assert_fail@plt+0x46e0>
   1617c:	ldr	fp, [sp, #8]
   16180:	add	r5, fp, #4
   16184:	ldr	r0, [r5, sl, lsl #4]
   16188:	cmp	r0, #0
   1618c:	beq	161a0 <__assert_fail@plt+0x4380>
   16190:	mov	r1, r6
   16194:	bl	11940 <strcmp@plt>
   16198:	cmp	r0, #0
   1619c:	beq	162d8 <__assert_fail@plt+0x44b8>
   161a0:	add	sl, sl, #1
   161a4:	ldr	r3, [fp, sl, lsl #4]
   161a8:	cmp	r3, #0
   161ac:	bne	16184 <__assert_fail@plt+0x4364>
   161b0:	mov	r0, r6
   161b4:	mov	fp, r3
   161b8:	bl	11bec <strlen@plt>
   161bc:	ldr	r5, [sp, #8]
   161c0:	mov	sl, r0
   161c4:	str	r0, [sp, #16]
   161c8:	ldr	r0, [r5, #4]
   161cc:	cmp	r0, #0
   161d0:	beq	161e8 <__assert_fail@plt+0x43c8>
   161d4:	mov	r2, sl
   161d8:	mov	r1, r6
   161dc:	bl	11dd8 <strncmp@plt>
   161e0:	cmp	r0, #0
   161e4:	beq	16270 <__assert_fail@plt+0x4450>
   161e8:	ldr	r3, [r5, #16]!
   161ec:	add	fp, fp, #1
   161f0:	cmp	r3, #0
   161f4:	bne	161c8 <__assert_fail@plt+0x43a8>
   161f8:	mvn	r5, #0
   161fc:	ldr	r3, [sp, #12]
   16200:	cmp	r3, #0
   16204:	beq	16214 <__assert_fail@plt+0x43f4>
   16208:	ldr	r2, [sp, #12]
   1620c:	mov	r3, #61	; 0x3d
   16210:	strb	r3, [r2]
   16214:	mov	r1, r6
   16218:	ldr	r0, [pc, #776]	; 16528 <__assert_fail@plt+0x4708>
   1621c:	bl	11940 <strcmp@plt>
   16220:	cmp	r0, #0
   16224:	beq	1651c <__assert_fail@plt+0x46fc>
   16228:	mov	r1, r6
   1622c:	ldr	r0, [pc, #760]	; 1652c <__assert_fail@plt+0x470c>
   16230:	bl	11940 <strcmp@plt>
   16234:	cmp	r0, #0
   16238:	bne	16368 <__assert_fail@plt+0x4548>
   1623c:	ldr	r3, [r4, #8]
   16240:	ands	sl, r3, #64	; 0x40
   16244:	beq	164c4 <__assert_fail@plt+0x46a4>
   16248:	cmn	r5, #2
   1624c:	mvneq	r3, #7
   16250:	mvnne	r3, #1
   16254:	strne	r6, [r4, #24]
   16258:	str	r3, [r4, #16]
   1625c:	sub	r8, r8, #1
   16260:	add	r7, r7, #4
   16264:	add	r9, r9, #1
   16268:	ldm	r4, {r1, r2}
   1626c:	b	15e18 <__assert_fail@plt+0x3ff8>
   16270:	ldr	r1, [sp, #8]
   16274:	add	r3, fp, #1
   16278:	ldr	r2, [r1, r3, lsl #4]
   1627c:	lsl	r3, r3, #4
   16280:	cmp	r2, #0
   16284:	add	sl, r1, r3
   16288:	beq	16508 <__assert_fail@plt+0x46e8>
   1628c:	sub	r3, r3, #16
   16290:	str	r4, [sp, #20]
   16294:	ldr	r4, [sp, #16]
   16298:	add	r5, r1, r3
   1629c:	ldr	r0, [sl, #4]
   162a0:	cmp	r0, #0
   162a4:	beq	162bc <__assert_fail@plt+0x449c>
   162a8:	mov	r2, r4
   162ac:	mov	r1, r6
   162b0:	bl	11dd8 <strncmp@plt>
   162b4:	cmp	r0, #0
   162b8:	beq	16498 <__assert_fail@plt+0x4678>
   162bc:	ldr	r2, [r5, #32]
   162c0:	add	sl, sl, #16
   162c4:	cmp	r2, #0
   162c8:	add	r5, r5, #16
   162cc:	bne	1629c <__assert_fail@plt+0x447c>
   162d0:	ldr	r4, [sp, #20]
   162d4:	mov	sl, fp
   162d8:	ldr	r3, [sp, #12]
   162dc:	cmp	r3, #0
   162e0:	beq	163b4 <__assert_fail@plt+0x4594>
   162e4:	ldr	r0, [sp, #8]
   162e8:	ldr	r1, [sp, #12]
   162ec:	add	r3, r0, sl, lsl #4
   162f0:	mov	r2, #61	; 0x3d
   162f4:	strb	r2, [r1]
   162f8:	ldr	r1, [r3, #8]
   162fc:	ldr	r3, [r0, sl, lsl #4]
   16300:	tst	r1, #7
   16304:	str	r3, [r4, #16]
   16308:	beq	16474 <__assert_fail@plt+0x4654>
   1630c:	ldr	r3, [sp, #12]
   16310:	ldrb	r3, [r3, #1]
   16314:	cmp	r3, #0
   16318:	beq	164a4 <__assert_fail@plt+0x4684>
   1631c:	ldr	r3, [sp, #12]
   16320:	adds	r2, r3, #1
   16324:	beq	164a4 <__assert_fail@plt+0x4684>
   16328:	mov	r0, r4
   1632c:	bl	14ca4 <__assert_fail@plt+0x2e84>
   16330:	b	1625c <__assert_fail@plt+0x443c>
   16334:	add	r6, r5, #2
   16338:	mov	r0, r6
   1633c:	mov	r1, #61	; 0x3d
   16340:	bl	11c04 <strchr@plt>
   16344:	subs	r3, r0, #0
   16348:	str	r3, [sp, #12]
   1634c:	bne	16148 <__assert_fail@plt+0x4328>
   16350:	ldr	r3, [sp, #8]
   16354:	ldr	r3, [r3]
   16358:	cmp	r3, #0
   1635c:	bne	1617c <__assert_fail@plt+0x435c>
   16360:	mvn	r5, #0
   16364:	b	16214 <__assert_fail@plt+0x43f4>
   16368:	mov	r1, r6
   1636c:	ldr	r0, [pc, #444]	; 16530 <__assert_fail@plt+0x4710>
   16370:	bl	11940 <strcmp@plt>
   16374:	cmp	r0, #0
   16378:	bne	163dc <__assert_fail@plt+0x45bc>
   1637c:	ldr	r3, [pc, #432]	; 16534 <__assert_fail@plt+0x4714>
   16380:	ldr	r3, [r3]
   16384:	cmp	r3, #0
   16388:	beq	164bc <__assert_fail@plt+0x469c>
   1638c:	mov	r0, #16
   16390:	blx	r3
   16394:	subs	r1, r0, #0
   16398:	beq	164bc <__assert_fail@plt+0x469c>
   1639c:	mov	r3, #0
   163a0:	mov	r0, r3
   163a4:	ldr	r2, [pc, #396]	; 16538 <__assert_fail@plt+0x4718>
   163a8:	bl	14dcc <__assert_fail@plt+0x2fac>
   163ac:	mov	r0, #0
   163b0:	bl	11ba4 <exit@plt>
   163b4:	ldr	r3, [sp, #8]
   163b8:	add	r2, r3, sl, lsl #4
   163bc:	ldr	r3, [r3, sl, lsl #4]
   163c0:	ldr	r1, [r2, #8]
   163c4:	str	r3, [r4, #16]
   163c8:	tst	r1, #7
   163cc:	bne	164d0 <__assert_fail@plt+0x46b0>
   163d0:	ldr	r3, [sp, #12]
   163d4:	str	r3, [r4, #20]
   163d8:	b	1625c <__assert_fail@plt+0x443c>
   163dc:	mov	r1, r6
   163e0:	ldr	r0, [pc, #340]	; 1653c <__assert_fail@plt+0x471c>
   163e4:	bl	11940 <strcmp@plt>
   163e8:	cmp	r0, #0
   163ec:	bne	16248 <__assert_fail@plt+0x4428>
   163f0:	ldr	r3, [sp, #8]
   163f4:	ldr	r3, [r3]
   163f8:	cmp	r3, #0
   163fc:	beq	16480 <__assert_fail@plt+0x4660>
   16400:	ldr	r6, [pc, #304]	; 16538 <__assert_fail@plt+0x4718>
   16404:	ldr	r5, [pc, #308]	; 16540 <__assert_fail@plt+0x4720>
   16408:	ldr	r4, [sp, #8]
   1640c:	b	1641c <__assert_fail@plt+0x45fc>
   16410:	ldr	r3, [r4, #16]!
   16414:	cmp	r3, #0
   16418:	beq	16480 <__assert_fail@plt+0x4660>
   1641c:	ldr	r2, [r4, #4]
   16420:	cmp	r2, #0
   16424:	beq	16410 <__assert_fail@plt+0x45f0>
   16428:	ldr	r3, [r4, #8]
   1642c:	ands	r0, r3, #64	; 0x40
   16430:	bne	16410 <__assert_fail@plt+0x45f0>
   16434:	str	r0, [sp]
   16438:	mov	r3, r6
   1643c:	mov	r1, r5
   16440:	bl	14dcc <__assert_fail@plt+0x2fac>
   16444:	b	16410 <__assert_fail@plt+0x45f0>
   16448:	add	r2, r2, #1
   1644c:	mov	r0, r4
   16450:	bl	14ca4 <__assert_fail@plt+0x2e84>
   16454:	ldm	r4, {r1, r2}
   16458:	b	16020 <__assert_fail@plt+0x4200>
   1645c:	ldrb	r0, [r5, #1]
   16460:	mov	r6, r2
   16464:	ldr	ip, [sp, #8]
   16468:	b	15fcc <__assert_fail@plt+0x41ac>
   1646c:	ldr	ip, [sp, #8]
   16470:	b	1605c <__assert_fail@plt+0x423c>
   16474:	mvn	r3, #5
   16478:	str	r3, [r4, #20]
   1647c:	b	1625c <__assert_fail@plt+0x443c>
   16480:	mov	r2, #0
   16484:	mov	r0, r2
   16488:	ldr	r1, [pc, #180]	; 16544 <__assert_fail@plt+0x4724>
   1648c:	bl	14dcc <__assert_fail@plt+0x2fac>
   16490:	mov	r0, #0
   16494:	bl	11ba4 <exit@plt>
   16498:	ldr	r4, [sp, #20]
   1649c:	mvn	r5, #1
   164a0:	b	161fc <__assert_fail@plt+0x43dc>
   164a4:	tst	r1, #8
   164a8:	movne	r3, #0
   164ac:	mvneq	r3, #2
   164b0:	strne	r3, [r4, #20]
   164b4:	streq	r3, [r4, #16]
   164b8:	b	1625c <__assert_fail@plt+0x443c>
   164bc:	ldr	r1, [pc, #132]	; 16548 <__assert_fail@plt+0x4728>
   164c0:	b	1639c <__assert_fail@plt+0x457c>
   164c4:	bl	154f4 <__assert_fail@plt+0x36d4>
   164c8:	mov	r0, sl
   164cc:	bl	11ba4 <exit@plt>
   164d0:	ldr	r2, [r7, #4]
   164d4:	cmp	r2, #0
   164d8:	beq	164a4 <__assert_fail@plt+0x4684>
   164dc:	ldrb	r3, [r2]
   164e0:	cmp	r3, #45	; 0x2d
   164e4:	beq	16510 <__assert_fail@plt+0x46f0>
   164e8:	mov	r0, r4
   164ec:	sub	r8, r8, #1
   164f0:	add	r7, r7, #4
   164f4:	add	r9, r9, #1
   164f8:	bl	14ca4 <__assert_fail@plt+0x2e84>
   164fc:	b	1625c <__assert_fail@plt+0x443c>
   16500:	mvn	r5, #0
   16504:	b	16208 <__assert_fail@plt+0x43e8>
   16508:	mov	sl, fp
   1650c:	b	162d8 <__assert_fail@plt+0x44b8>
   16510:	tst	r1, #8
   16514:	beq	164e8 <__assert_fail@plt+0x46c8>
   16518:	b	163d0 <__assert_fail@plt+0x45b0>
   1651c:	ldr	r1, [r4, #8]
   16520:	ldr	r0, [sp, #8]
   16524:	bl	156ec <__assert_fail@plt+0x38cc>
   16528:	andeq	sl, r1, r0, lsr #9
   1652c:	andeq	r9, r1, ip, lsl #12
   16530:	andeq	sl, r1, r8, lsr #9
   16534:	andeq	fp, r2, r0, asr #6
   16538:	andeq	sl, r1, r4, asr #8
   1653c:			; <UNDEFINED> instruction: 0x0001a4b4
   16540:	strdeq	sl, [r1], -r0
   16544:	andeq	sl, r1, r4, asr #9
   16548:	andeq	sl, r1, r4, ror r1
   1654c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16550:	mov	r8, r3
   16554:	ldr	r3, [pc, #2288]	; 16e4c <__assert_fail@plt+0x502c>
   16558:	sub	sp, sp, #244	; 0xf4
   1655c:	subs	sl, r0, #0
   16560:	ldr	r3, [r3]
   16564:	str	r3, [sp, #236]	; 0xec
   16568:	ldr	r3, [sp, #280]	; 0x118
   1656c:	str	r3, [sp]
   16570:	beq	168e0 <__assert_fail@plt+0x4ac0>
   16574:	mov	r3, #0
   16578:	mov	r4, r3
   1657c:	mov	fp, r4
   16580:	mov	r7, r4
   16584:	mov	r0, r8
   16588:	mov	r9, r2
   1658c:	str	r3, [sp, #12]
   16590:	bl	14f80 <__assert_fail@plt+0x3160>
   16594:	str	r4, [sp, #8]
   16598:	str	r4, [sp, #4]
   1659c:	mov	r0, sl
   165a0:	bl	11dfc <getc@plt>
   165a4:	cmn	r0, #1
   165a8:	cmpne	r0, #10
   165ac:	mov	r6, r0
   165b0:	bne	165f8 <__assert_fail@plt+0x47d8>
   165b4:	cmn	r0, #1
   165b8:	ldrne	r3, [r9]
   165bc:	addne	r3, r3, #1
   165c0:	strne	r3, [r9]
   165c4:	cmn	r4, #1
   165c8:	beq	168a8 <__assert_fail@plt+0x4a88>
   165cc:	cmp	r4, #2
   165d0:	beq	16690 <__assert_fail@plt+0x4870>
   165d4:	cmp	r4, #3
   165d8:	beq	16908 <__assert_fail@plt+0x4ae8>
   165dc:	cmp	r4, #4
   165e0:	beq	16938 <__assert_fail@plt+0x4b18>
   165e4:	cmn	r0, #1
   165e8:	beq	169c8 <__assert_fail@plt+0x4ba8>
   165ec:	mov	r7, #0
   165f0:	mov	r4, r7
   165f4:	b	1659c <__assert_fail@plt+0x477c>
   165f8:	cmn	r4, #1
   165fc:	beq	1659c <__assert_fail@plt+0x477c>
   16600:	cmp	r4, #0
   16604:	beq	16638 <__assert_fail@plt+0x4818>
   16608:	cmp	r4, #1
   1660c:	beq	1659c <__assert_fail@plt+0x477c>
   16610:	cmp	r4, #2
   16614:	beq	16718 <__assert_fail@plt+0x48f8>
   16618:	cmp	r4, #3
   1661c:	bne	16848 <__assert_fail@plt+0x4a28>
   16620:	bics	r3, r0, #127	; 0x7f
   16624:	beq	16824 <__assert_fail@plt+0x4a04>
   16628:	strb	r6, [sp, #36]	; 0x24
   1662c:	mov	r7, #1
   16630:	mov	r4, #4
   16634:	b	1659c <__assert_fail@plt+0x477c>
   16638:	bics	r4, r0, #127	; 0x7f
   1663c:	beq	16668 <__assert_fail@plt+0x4848>
   16640:	cmp	r7, #98	; 0x62
   16644:	addle	r3, sp, #240	; 0xf0
   16648:	addle	r3, r3, r7
   1664c:	mvngt	r3, #3
   16650:	strgt	r3, [r8, #16]
   16654:	mvngt	r4, #0
   16658:	strble	r6, [r3, #-204]	; 0xffffff34
   1665c:	addle	r7, r7, #1
   16660:	movle	r4, #2
   16664:	b	1659c <__assert_fail@plt+0x477c>
   16668:	bl	11b8c <__ctype_b_loc@plt>
   1666c:	lsl	r3, r6, #1
   16670:	ldr	r2, [r0]
   16674:	ldrh	r3, [r2, r3]
   16678:	tst	r3, #8192	; 0x2000
   1667c:	bne	1659c <__assert_fail@plt+0x477c>
   16680:	cmp	r6, #35	; 0x23
   16684:	bne	16640 <__assert_fail@plt+0x4820>
   16688:	mov	r4, #1
   1668c:	b	1659c <__assert_fail@plt+0x477c>
   16690:	ldr	r5, [sp]
   16694:	add	r3, sp, #240	; 0xf0
   16698:	mov	fp, #0
   1669c:	ldr	r6, [r5]
   166a0:	add	r7, r3, r7
   166a4:	cmp	r6, fp
   166a8:	strb	fp, [r7, #-204]	; 0xffffff34
   166ac:	beq	16a28 <__assert_fail@plt+0x4c08>
   166b0:	ldr	r0, [r5, #4]
   166b4:	cmp	r0, #0
   166b8:	beq	166cc <__assert_fail@plt+0x48ac>
   166bc:	add	r1, sp, #36	; 0x24
   166c0:	bl	11940 <strcmp@plt>
   166c4:	cmp	r0, #0
   166c8:	beq	167b0 <__assert_fail@plt+0x4990>
   166cc:	add	r5, r5, #16
   166d0:	ldr	r6, [r5]
   166d4:	add	fp, fp, #1
   166d8:	cmp	r6, #0
   166dc:	mov	r3, r5
   166e0:	bne	166b0 <__assert_fail@plt+0x4890>
   166e4:	ldr	r5, [r3, #8]
   166e8:	mov	r7, #0
   166ec:	tst	r5, #64	; 0x40
   166f0:	str	r7, [r8, #16]
   166f4:	bne	16e00 <__assert_fail@plt+0x4fe0>
   166f8:	add	r7, sp, #36	; 0x24
   166fc:	mov	r0, r7
   16700:	ldr	r1, [pc, #1864]	; 16e50 <__assert_fail@plt+0x5030>
   16704:	bl	11940 <strcmp@plt>
   16708:	subs	r4, r0, #0
   1670c:	bne	167e8 <__assert_fail@plt+0x49c8>
   16710:	mov	r7, r4
   16714:	b	1659c <__assert_fail@plt+0x477c>
   16718:	bics	r4, r0, #127	; 0x7f
   1671c:	bne	16640 <__assert_fail@plt+0x4820>
   16720:	bl	11b8c <__ctype_b_loc@plt>
   16724:	lsl	r3, r6, #1
   16728:	ldr	r2, [r0]
   1672c:	mov	r5, r0
   16730:	ldrh	r3, [r2, r3]
   16734:	tst	r3, #8192	; 0x2000
   16738:	beq	16640 <__assert_fail@plt+0x4820>
   1673c:	ldr	r3, [sp]
   16740:	add	r2, sp, #240	; 0xf0
   16744:	add	r7, r2, r7
   16748:	ldr	r6, [r3]
   1674c:	strb	r4, [r7, #-204]	; 0xffffff34
   16750:	cmp	r6, #0
   16754:	beq	16da0 <__assert_fail@plt+0x4f80>
   16758:	mov	fp, r4
   1675c:	mov	r4, r3
   16760:	ldr	r0, [r4, #4]
   16764:	cmp	r0, #0
   16768:	beq	1677c <__assert_fail@plt+0x495c>
   1676c:	add	r1, sp, #36	; 0x24
   16770:	bl	11940 <strcmp@plt>
   16774:	cmp	r0, #0
   16778:	beq	16ad8 <__assert_fail@plt+0x4cb8>
   1677c:	add	r4, r4, #16
   16780:	ldr	r6, [r4]
   16784:	add	fp, fp, #1
   16788:	cmp	r6, #0
   1678c:	mov	r3, r4
   16790:	bne	16760 <__assert_fail@plt+0x4940>
   16794:	ldr	r6, [r3, #8]
   16798:	mov	r3, #0
   1679c:	tst	r6, #64	; 0x40
   167a0:	str	r3, [r8, #16]
   167a4:	beq	16af4 <__assert_fail@plt+0x4cd4>
   167a8:	mov	r7, fp
   167ac:	b	16688 <__assert_fail@plt+0x4868>
   167b0:	ldr	r3, [r5, #8]
   167b4:	mov	r4, r0
   167b8:	ands	r2, r3, #64	; 0x40
   167bc:	str	r6, [r8, #16]
   167c0:	bne	16710 <__assert_fail@plt+0x48f0>
   167c4:	ands	r1, r3, #7
   167c8:	streq	r1, [r8, #20]
   167cc:	beq	168ac <__assert_fail@plt+0x4a8c>
   167d0:	tst	r3, #8
   167d4:	strne	r2, [r8, #20]
   167d8:	bne	168ac <__assert_fail@plt+0x4a8c>
   167dc:	mvn	r6, #2
   167e0:	str	r6, [r8, #16]
   167e4:	b	168ac <__assert_fail@plt+0x4a8c>
   167e8:	ldr	r6, [r8, #52]	; 0x34
   167ec:	cmp	r6, #0
   167f0:	bne	16804 <__assert_fail@plt+0x49e4>
   167f4:	b	168cc <__assert_fail@plt+0x4aac>
   167f8:	ldr	r6, [r6]
   167fc:	cmp	r6, #0
   16800:	beq	168cc <__assert_fail@plt+0x4aac>
   16804:	mov	r1, r7
   16808:	add	r0, r6, #4
   1680c:	bl	11940 <strcmp@plt>
   16810:	cmp	r0, #0
   16814:	bne	167f8 <__assert_fail@plt+0x49d8>
   16818:	mov	r4, r0
   1681c:	mov	r7, r4
   16820:	b	1659c <__assert_fail@plt+0x477c>
   16824:	bl	11b8c <__ctype_b_loc@plt>
   16828:	lsl	r3, r6, #1
   1682c:	ldr	r2, [r0]
   16830:	ldrh	r3, [r2, r3]
   16834:	tst	r3, #8192	; 0x2000
   16838:	strbeq	r6, [sp, #36]	; 0x24
   1683c:	moveq	r7, #1
   16840:	moveq	r4, #4
   16844:	b	1659c <__assert_fail@plt+0x477c>
   16848:	cmp	r4, #4
   1684c:	bne	16640 <__assert_fail@plt+0x4820>
   16850:	ldr	r2, [sp, #4]
   16854:	mov	r5, r7
   16858:	cmp	r2, #0
   1685c:	beq	16a0c <__assert_fail@plt+0x4bec>
   16860:	ldr	r3, [sp, #8]
   16864:	sub	r3, r3, #1
   16868:	cmp	r3, r7
   1686c:	addhi	r7, r7, #1
   16870:	strbhi	r0, [r2, r5]
   16874:	bhi	1659c <__assert_fail@plt+0x477c>
   16878:	ldr	r3, [sp, #8]
   1687c:	ldr	r0, [sp, #4]
   16880:	add	r3, r3, #50	; 0x32
   16884:	mov	r1, r3
   16888:	str	r3, [sp, #8]
   1688c:	bl	11a6c <realloc@plt>
   16890:	cmp	r0, #0
   16894:	beq	16df0 <__assert_fail@plt+0x4fd0>
   16898:	add	r7, r7, #1
   1689c:	strb	r6, [r0, r5]
   168a0:	str	r0, [sp, #4]
   168a4:	b	1659c <__assert_fail@plt+0x477c>
   168a8:	ldr	r6, [r8, #16]
   168ac:	ldr	r3, [pc, #1432]	; 16e4c <__assert_fail@plt+0x502c>
   168b0:	ldr	r2, [sp, #236]	; 0xec
   168b4:	mov	r0, r6
   168b8:	ldr	r3, [r3]
   168bc:	cmp	r2, r3
   168c0:	bne	16dfc <__assert_fail@plt+0x4fdc>
   168c4:	add	sp, sp, #244	; 0xf4
   168c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168cc:	tst	r5, #128	; 0x80
   168d0:	mvnne	r6, #6
   168d4:	mvneq	r6, #1
   168d8:	str	r6, [r8, #16]
   168dc:	b	168ac <__assert_fail@plt+0x4a8c>
   168e0:	ldr	r3, [pc, #1380]	; 16e4c <__assert_fail@plt+0x502c>
   168e4:	ldr	r2, [sp, #236]	; 0xec
   168e8:	ldr	r3, [r3]
   168ec:	cmp	r2, r3
   168f0:	bne	16dfc <__assert_fail@plt+0x4fdc>
   168f4:	ldr	r1, [sp]
   168f8:	mov	r0, r8
   168fc:	add	sp, sp, #244	; 0xf4
   16900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16904:	b	15d38 <__assert_fail@plt+0x3f18>
   16908:	ldr	r3, [sp, #12]
   1690c:	cmp	r3, #0
   16910:	bne	167dc <__assert_fail@plt+0x49bc>
   16914:	ldr	r3, [sp]
   16918:	add	r3, r3, fp, lsl #4
   1691c:	ldr	r3, [r3, #8]
   16920:	tst	r3, #7
   16924:	bne	16a34 <__assert_fail@plt+0x4c14>
   16928:	mov	r3, #0
   1692c:	str	r3, [r8, #20]
   16930:	ldr	r6, [r8, #16]
   16934:	b	168ac <__assert_fail@plt+0x4a8c>
   16938:	ldr	r3, [sp, #12]
   1693c:	cmp	r3, #0
   16940:	beq	169a8 <__assert_fail@plt+0x4b88>
   16944:	ldr	r3, [sp, #4]
   16948:	cmp	r3, #0
   1694c:	beq	169bc <__assert_fail@plt+0x4b9c>
   16950:	ldr	r3, [sp, #4]
   16954:	mov	r6, #0
   16958:	ldr	r1, [pc, #1268]	; 16e54 <__assert_fail@plt+0x5034>
   1695c:	strb	r6, [r3, r7]
   16960:	mov	r0, r3
   16964:	bl	11d84 <strpbrk@plt>
   16968:	subs	r5, r0, #0
   1696c:	beq	16994 <__assert_fail@plt+0x4b74>
   16970:	mov	r4, r5
   16974:	strb	r6, [r4], #1
   16978:	mov	r0, r4
   1697c:	bl	14b54 <__assert_fail@plt+0x2d34>
   16980:	cmp	r4, r6
   16984:	beq	16994 <__assert_fail@plt+0x4b74>
   16988:	ldrb	r3, [r5, #1]
   1698c:	cmp	r3, r6
   16990:	bne	168a8 <__assert_fail@plt+0x4a88>
   16994:	ldr	r0, [sp, #4]
   16998:	mvn	r6, #9
   1699c:	bl	119b8 <free@plt>
   169a0:	str	r6, [r8, #16]
   169a4:	b	168ac <__assert_fail@plt+0x4a8c>
   169a8:	ldr	r3, [sp]
   169ac:	add	r4, r3, fp, lsl #4
   169b0:	ldr	r3, [r4, #8]
   169b4:	tst	r3, #7
   169b8:	bne	16a40 <__assert_fail@plt+0x4c20>
   169bc:	mvn	r6, #5
   169c0:	str	r6, [r8, #16]
   169c4:	b	168ac <__assert_fail@plt+0x4a8c>
   169c8:	ldr	r0, [r8, #52]	; 0x34
   169cc:	cmp	r0, #0
   169d0:	beq	169e4 <__assert_fail@plt+0x4bc4>
   169d4:	ldr	r4, [r0]
   169d8:	bl	119b8 <free@plt>
   169dc:	subs	r0, r4, #0
   169e0:	bne	169d4 <__assert_fail@plt+0x4bb4>
   169e4:	mov	r3, #0
   169e8:	mov	r0, sl
   169ec:	str	r3, [r8, #52]	; 0x34
   169f0:	bl	119d0 <ferror@plt>
   169f4:	subs	r6, r0, #0
   169f8:	mvnne	r6, #4
   169fc:	strne	r6, [r8, #16]
   16a00:	bne	168ac <__assert_fail@plt+0x4a8c>
   16a04:	str	r6, [r8, #16]
   16a08:	b	168ac <__assert_fail@plt+0x4a8c>
   16a0c:	cmp	r7, #98	; 0x62
   16a10:	bgt	16a98 <__assert_fail@plt+0x4c78>
   16a14:	add	r3, sp, #240	; 0xf0
   16a18:	add	r3, r3, r7
   16a1c:	add	r7, r7, #1
   16a20:	strb	r0, [r3, #-204]	; 0xffffff34
   16a24:	b	1659c <__assert_fail@plt+0x477c>
   16a28:	mov	fp, r6
   16a2c:	ldr	r3, [sp]
   16a30:	b	166e4 <__assert_fail@plt+0x48c4>
   16a34:	tst	r3, #8
   16a38:	bne	16928 <__assert_fail@plt+0x4b08>
   16a3c:	b	167dc <__assert_fail@plt+0x49bc>
   16a40:	ldr	r3, [sp, #4]
   16a44:	cmp	r3, #0
   16a48:	beq	16d2c <__assert_fail@plt+0x4f0c>
   16a4c:	ldr	r3, [sp, #4]
   16a50:	ldr	r2, [sp, #12]
   16a54:	strb	r2, [r3, r7]
   16a58:	ldr	r5, [sp, #4]
   16a5c:	mov	r0, r5
   16a60:	bl	14b54 <__assert_fail@plt+0x2d34>
   16a64:	ldrb	r3, [r5]
   16a68:	cmp	r3, #34	; 0x22
   16a6c:	beq	16cf8 <__assert_fail@plt+0x4ed8>
   16a70:	mov	r2, r5
   16a74:	ldr	r1, [r4, #8]
   16a78:	mov	r0, r8
   16a7c:	bl	14ca4 <__assert_fail@plt+0x2e84>
   16a80:	cmp	r0, #0
   16a84:	bne	168a8 <__assert_fail@plt+0x4a88>
   16a88:	ldr	r0, [sp, #4]
   16a8c:	bl	119b8 <free@plt>
   16a90:	ldr	r6, [r8, #16]
   16a94:	b	168ac <__assert_fail@plt+0x4a8c>
   16a98:	mov	r0, #150	; 0x96
   16a9c:	bl	11b2c <malloc@plt>
   16aa0:	subs	r3, r0, #0
   16aa4:	mov	r0, r3
   16aa8:	str	r3, [sp, #4]
   16aac:	beq	16d50 <__assert_fail@plt+0x4f30>
   16ab0:	mov	r2, r7
   16ab4:	mov	r3, #150	; 0x96
   16ab8:	add	r1, sp, #36	; 0x24
   16abc:	bl	11ac0 <__memcpy_chk@plt>
   16ac0:	ldr	r3, [sp, #4]
   16ac4:	mov	r2, #150	; 0x96
   16ac8:	add	r7, r7, #1
   16acc:	str	r2, [sp, #8]
   16ad0:	strb	r6, [r3, r5]
   16ad4:	b	1659c <__assert_fail@plt+0x477c>
   16ad8:	ldr	r3, [r4, #8]
   16adc:	mov	r7, fp
   16ae0:	tst	r3, #64	; 0x40
   16ae4:	str	r6, [r8, #16]
   16ae8:	moveq	r4, #3
   16aec:	movne	r4, #1
   16af0:	b	1659c <__assert_fail@plt+0x477c>
   16af4:	add	r7, sp, #36	; 0x24
   16af8:	mov	r0, r7
   16afc:	ldr	r1, [pc, #852]	; 16e58 <__assert_fail@plt+0x5038>
   16b00:	bl	11940 <strcmp@plt>
   16b04:	cmp	r0, #0
   16b08:	beq	16ce4 <__assert_fail@plt+0x4ec4>
   16b0c:	ldr	r1, [pc, #828]	; 16e50 <__assert_fail@plt+0x5030>
   16b10:	mov	r0, r7
   16b14:	bl	11940 <strcmp@plt>
   16b18:	subs	r4, r0, #0
   16b1c:	bne	16d58 <__assert_fail@plt+0x4f38>
   16b20:	mov	r0, sl
   16b24:	bl	11dfc <getc@plt>
   16b28:	str	r4, [sp, #24]
   16b2c:	str	r9, [sp, #28]
   16b30:	cmn	r0, #1
   16b34:	cmpne	r0, #10
   16b38:	moveq	r3, #1
   16b3c:	movne	r3, #0
   16b40:	cmp	r3, #0
   16b44:	movne	r3, #1
   16b48:	moveq	r3, #0
   16b4c:	mov	r7, r0
   16b50:	str	r3, [sp, #16]
   16b54:	movne	r7, #10
   16b58:	ldr	r3, [r5]
   16b5c:	str	r3, [sp, #20]
   16b60:	ldr	r1, [sp, #20]
   16b64:	lsl	r3, r7, #1
   16b68:	bics	r2, r7, #127	; 0x7f
   16b6c:	ldrh	r3, [r1, r3]
   16b70:	and	r3, r3, #8192	; 0x2000
   16b74:	bne	16c58 <__assert_fail@plt+0x4e38>
   16b78:	cmp	r3, #0
   16b7c:	bne	16c20 <__assert_fail@plt+0x4e00>
   16b80:	ldr	r4, [sp, #16]
   16b84:	mov	r6, #1
   16b88:	mov	r0, r7
   16b8c:	add	r3, sp, #240	; 0xf0
   16b90:	add	r2, r3, r2
   16b94:	cmp	r4, #0
   16b98:	strb	r0, [r2, #-104]	; 0xffffff98
   16b9c:	bne	16e30 <__assert_fail@plt+0x5010>
   16ba0:	mov	r0, sl
   16ba4:	bl	11dfc <getc@plt>
   16ba8:	cmn	r0, #1
   16bac:	cmpne	r0, #10
   16bb0:	bne	16e28 <__assert_fail@plt+0x5008>
   16bb4:	mov	r3, #20
   16bb8:	mov	r4, #1
   16bbc:	mov	r0, #10
   16bc0:	ldr	r2, [r5]
   16bc4:	ldrh	r3, [r2, r3]
   16bc8:	tst	r3, #8192	; 0x2000
   16bcc:	bne	16e14 <__assert_fail@plt+0x4ff4>
   16bd0:	cmp	r6, #99	; 0x63
   16bd4:	bne	16e08 <__assert_fail@plt+0x4fe8>
   16bd8:	cmp	r4, #0
   16bdc:	bne	16e30 <__assert_fail@plt+0x5010>
   16be0:	mov	r0, sl
   16be4:	bl	11dfc <getc@plt>
   16be8:	cmn	r0, #1
   16bec:	cmpne	r0, #10
   16bf0:	bne	16ddc <__assert_fail@plt+0x4fbc>
   16bf4:	mov	r3, #20
   16bf8:	mov	r7, #10
   16bfc:	mov	r2, #1
   16c00:	str	r2, [sp, #16]
   16c04:	ldr	r2, [r5]
   16c08:	ldrh	r3, [r2, r3]
   16c0c:	tst	r3, #8192	; 0x2000
   16c10:	beq	16dac <__assert_fail@plt+0x4f8c>
   16c14:	bics	r3, r7, #127	; 0x7f
   16c18:	str	r2, [sp, #20]
   16c1c:	bne	16c74 <__assert_fail@plt+0x4e54>
   16c20:	ldr	r3, [sp, #16]
   16c24:	cmp	r3, #0
   16c28:	bne	16e30 <__assert_fail@plt+0x5010>
   16c2c:	mov	r0, sl
   16c30:	bl	11dfc <getc@plt>
   16c34:	ldr	r3, [r5]
   16c38:	str	r3, [sp, #20]
   16c3c:	cmn	r0, #1
   16c40:	cmpne	r0, #10
   16c44:	mov	r7, r0
   16c48:	moveq	r3, #1
   16c4c:	streq	r3, [sp, #16]
   16c50:	moveq	r7, #10
   16c54:	b	16b60 <__assert_fail@plt+0x4d40>
   16c58:	cmp	r3, #0
   16c5c:	moveq	r2, r3
   16c60:	moveq	r6, #1
   16c64:	ldreq	r4, [sp, #16]
   16c68:	moveq	r0, r7
   16c6c:	beq	16b8c <__assert_fail@plt+0x4d6c>
   16c70:	mov	r4, #0
   16c74:	ldr	r6, [r8, #52]	; 0x34
   16c78:	add	r3, sp, #240	; 0xf0
   16c7c:	add	r3, r3, r4
   16c80:	mov	r2, #0
   16c84:	cmp	r6, #0
   16c88:	strb	r2, [r3, #-104]	; 0xffffff98
   16c8c:	beq	16cb4 <__assert_fail@plt+0x4e94>
   16c90:	mov	r9, r6
   16c94:	add	r1, sp, #136	; 0x88
   16c98:	add	r0, r9, #4
   16c9c:	bl	11940 <strcmp@plt>
   16ca0:	cmp	r0, #0
   16ca4:	beq	16b60 <__assert_fail@plt+0x4d40>
   16ca8:	ldr	r9, [r9]
   16cac:	cmp	r9, #0
   16cb0:	bne	16c94 <__assert_fail@plt+0x4e74>
   16cb4:	add	r0, r4, #8
   16cb8:	bl	11b2c <malloc@plt>
   16cbc:	subs	r4, r0, #0
   16cc0:	beq	16d50 <__assert_fail@plt+0x4f30>
   16cc4:	add	r1, sp, #136	; 0x88
   16cc8:	add	r0, r4, #4
   16ccc:	bl	11ad8 <strcpy@plt>
   16cd0:	str	r4, [r8, #52]	; 0x34
   16cd4:	ldr	r3, [r5]
   16cd8:	str	r6, [r4]
   16cdc:	str	r3, [sp, #20]
   16ce0:	b	16b60 <__assert_fail@plt+0x4d40>
   16ce4:	mov	r3, #1
   16ce8:	mov	r7, fp
   16cec:	str	r3, [sp, #12]
   16cf0:	mov	r4, #3
   16cf4:	b	1659c <__assert_fail@plt+0x477c>
   16cf8:	ldr	r6, [sp, #4]
   16cfc:	add	r5, r6, #1
   16d00:	ldrb	r3, [r6, #1]
   16d04:	cmp	r3, #0
   16d08:	beq	16a70 <__assert_fail@plt+0x4c50>
   16d0c:	mov	r0, r5
   16d10:	bl	11bec <strlen@plt>
   16d14:	ldrb	r3, [r6, r0]
   16d18:	cmp	r3, #34	; 0x22
   16d1c:	moveq	r3, #0
   16d20:	ldreq	r2, [sp, #4]
   16d24:	strbeq	r3, [r2, r0]
   16d28:	b	16a70 <__assert_fail@plt+0x4c50>
   16d2c:	add	r3, sp, #240	; 0xf0
   16d30:	add	r7, r3, r7
   16d34:	ldr	r3, [sp, #4]
   16d38:	add	r0, sp, #36	; 0x24
   16d3c:	strb	r3, [r7, #-204]	; 0xffffff34
   16d40:	bl	11a3c <strdup@plt>
   16d44:	subs	r3, r0, #0
   16d48:	str	r3, [sp, #4]
   16d4c:	bne	16a58 <__assert_fail@plt+0x4c38>
   16d50:	mvn	r6, #10
   16d54:	b	16a04 <__assert_fail@plt+0x4be4>
   16d58:	ldr	r4, [r8, #52]	; 0x34
   16d5c:	cmp	r4, #0
   16d60:	beq	16d84 <__assert_fail@plt+0x4f64>
   16d64:	mov	r1, r7
   16d68:	add	r0, r4, #4
   16d6c:	bl	11940 <strcmp@plt>
   16d70:	cmp	r0, #0
   16d74:	beq	167a8 <__assert_fail@plt+0x4988>
   16d78:	ldr	r4, [r4]
   16d7c:	cmp	r4, #0
   16d80:	bne	16d64 <__assert_fail@plt+0x4f44>
   16d84:	tst	r6, #128	; 0x80
   16d88:	mvnne	r3, #6
   16d8c:	mvneq	r3, #1
   16d90:	str	r3, [r8, #16]
   16d94:	mov	r7, fp
   16d98:	mvn	r4, #0
   16d9c:	b	1659c <__assert_fail@plt+0x477c>
   16da0:	mov	fp, r6
   16da4:	ldr	r3, [sp]
   16da8:	b	16794 <__assert_fail@plt+0x4974>
   16dac:	ldr	r3, [sp, #16]
   16db0:	cmp	r3, #0
   16db4:	bne	16e30 <__assert_fail@plt+0x5010>
   16db8:	mov	r0, sl
   16dbc:	bl	11dfc <getc@plt>
   16dc0:	mov	r3, #1
   16dc4:	str	r3, [sp, #16]
   16dc8:	mov	r7, #10
   16dcc:	mov	r3, #20
   16dd0:	cmn	r0, #1
   16dd4:	cmpne	r0, #10
   16dd8:	beq	16c04 <__assert_fail@plt+0x4de4>
   16ddc:	mov	r2, #0
   16de0:	lsl	r3, r0, #1
   16de4:	mov	r7, r0
   16de8:	str	r2, [sp, #16]
   16dec:	b	16c04 <__assert_fail@plt+0x4de4>
   16df0:	ldr	r0, [sp, #4]
   16df4:	bl	119b8 <free@plt>
   16df8:	b	16d50 <__assert_fail@plt+0x4f30>
   16dfc:	bl	11a48 <__stack_chk_fail@plt>
   16e00:	mov	r4, r7
   16e04:	b	1659c <__assert_fail@plt+0x477c>
   16e08:	mov	r2, r6
   16e0c:	add	r6, r6, #1
   16e10:	b	16b8c <__assert_fail@plt+0x4d6c>
   16e14:	str	r4, [sp, #16]
   16e18:	mov	r7, r0
   16e1c:	str	r2, [sp, #20]
   16e20:	mov	r4, r6
   16e24:	b	16c74 <__assert_fail@plt+0x4e54>
   16e28:	lsl	r3, r0, #1
   16e2c:	b	16bc0 <__assert_fail@plt+0x4da0>
   16e30:	ldr	r9, [sp, #28]
   16e34:	ldr	r4, [sp, #24]
   16e38:	mov	r7, #0
   16e3c:	ldr	r3, [r9]
   16e40:	add	r3, r3, #1
   16e44:	str	r3, [r9]
   16e48:	b	1659c <__assert_fail@plt+0x477c>
   16e4c:	andeq	sl, r2, r0, lsl #26
   16e50:	strdeq	sl, [r1], -r4
   16e54:	andeq	sl, r1, ip, lsl #10
   16e58:	andeq	sl, r1, r0, lsl r5
   16e5c:	ldr	r3, [pc, #4]	; 16e68 <__assert_fail@plt+0x5048>
   16e60:	str	r0, [r3]
   16e64:	bx	lr
   16e68:	andeq	fp, r2, r0, asr #6
   16e6c:	bx	lr
   16e70:	mov	r0, #0
   16e74:	bx	lr
   16e78:	mvn	r0, #0
   16e7c:	bx	lr
   16e80:	cmp	r0, #14
   16e84:	moveq	r2, #1
   16e88:	ldreq	r3, [pc, #4]	; 16e94 <__assert_fail@plt+0x5074>
   16e8c:	streq	r2, [r3]
   16e90:	bx	lr
   16e94:	andeq	fp, r2, r8, asr #6
   16e98:	push	{r4, r5, r6, r7, r8, r9, lr}
   16e9c:	sub	sp, sp, #20
   16ea0:	ldr	r6, [pc, #256]	; 16fa8 <__assert_fail@plt+0x5188>
   16ea4:	mov	r4, r0
   16ea8:	mov	r7, r1
   16eac:	ldr	r3, [r6]
   16eb0:	str	r3, [sp, #12]
   16eb4:	bl	134a4 <__assert_fail@plt+0x1684>
   16eb8:	subs	r5, r0, #0
   16ebc:	moveq	r9, r5
   16ec0:	beq	16f78 <__assert_fail@plt+0x5158>
   16ec4:	mov	r1, #0
   16ec8:	mov	r0, r1
   16ecc:	bl	11d00 <setlocale@plt>
   16ed0:	bl	11a3c <strdup@plt>
   16ed4:	ldr	r1, [pc, #208]	; 16fac <__assert_fail@plt+0x518c>
   16ed8:	mov	r8, r0
   16edc:	mov	r0, #0
   16ee0:	cmp	r4, r0
   16ee4:	movne	r1, r4
   16ee8:	bl	11d00 <setlocale@plt>
   16eec:	mov	r4, #0
   16ef0:	mov	r0, r7
   16ef4:	str	r5, [sp]
   16ef8:	str	r4, [sp, #8]
   16efc:	str	r4, [sp, #4]
   16f00:	bl	11bec <strlen@plt>
   16f04:	add	r3, sp, #4
   16f08:	mov	r1, sp
   16f0c:	mov	r2, r0
   16f10:	mov	r0, r4
   16f14:	bl	11934 <mbsrtowcs@plt>
   16f18:	cmn	r0, #1
   16f1c:	mov	r7, r0
   16f20:	beq	16f94 <__assert_fail@plt+0x5174>
   16f24:	mov	r1, #4
   16f28:	add	r0, r0, #1
   16f2c:	bl	118ec <calloc@plt>
   16f30:	subs	r9, r0, #0
   16f34:	beq	16f54 <__assert_fail@plt+0x5134>
   16f38:	mov	r2, r7
   16f3c:	mov	r1, sp
   16f40:	add	r3, sp, #4
   16f44:	str	r5, [sp]
   16f48:	str	r4, [sp, #4]
   16f4c:	str	r4, [sp, #8]
   16f50:	bl	11934 <mbsrtowcs@plt>
   16f54:	mov	r0, r5
   16f58:	bl	119b8 <free@plt>
   16f5c:	cmp	r8, #0
   16f60:	beq	16f78 <__assert_fail@plt+0x5158>
   16f64:	mov	r1, r8
   16f68:	mov	r0, #0
   16f6c:	bl	11d00 <setlocale@plt>
   16f70:	mov	r0, r8
   16f74:	bl	119b8 <free@plt>
   16f78:	ldr	r2, [sp, #12]
   16f7c:	ldr	r3, [r6]
   16f80:	mov	r0, r9
   16f84:	cmp	r2, r3
   16f88:	bne	16fa4 <__assert_fail@plt+0x5184>
   16f8c:	add	sp, sp, #20
   16f90:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16f94:	mov	r0, r5
   16f98:	bl	119b8 <free@plt>
   16f9c:	mov	r9, r4
   16fa0:	b	16f5c <__assert_fail@plt+0x513c>
   16fa4:	bl	11a48 <__stack_chk_fail@plt>
   16fa8:	andeq	sl, r2, r0, lsl #26
   16fac:	andeq	sl, r1, r8, ror #12
   16fb0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fb4:	mov	r8, r1
   16fb8:	ldr	r4, [r1]
   16fbc:	mov	r9, r2
   16fc0:	ldr	r3, [r4]
   16fc4:	cmp	r3, #32
   16fc8:	bne	16fdc <__assert_fail@plt+0x51bc>
   16fcc:	ldr	r3, [r4, #4]!
   16fd0:	cmp	r3, #32
   16fd4:	beq	16fcc <__assert_fail@plt+0x51ac>
   16fd8:	str	r4, [r8]
   16fdc:	sub	r7, r0, #1
   16fe0:	cmp	r7, #0
   16fe4:	ble	17088 <__assert_fail@plt+0x5268>
   16fe8:	ldr	r3, [r4]
   16fec:	cmp	r3, #10
   16ff0:	cmpne	r3, #0
   16ff4:	beq	17088 <__assert_fail@plt+0x5268>
   16ff8:	mov	sl, #0
   16ffc:	mov	r5, sl
   17000:	mov	fp, sl
   17004:	b	1700c <__assert_fail@plt+0x51ec>
   17008:	mov	fp, r6
   1700c:	ldr	r3, [r4, #4]!
   17010:	add	r6, fp, #1
   17014:	cmp	r3, #32
   17018:	mov	r0, r3
   1701c:	moveq	sl, r6
   17020:	bl	11994 <wcwidth@plt>
   17024:	add	r5, r5, r0
   17028:	cmp	r5, r7
   1702c:	bge	1704c <__assert_fail@plt+0x522c>
   17030:	ldr	r3, [r4]
   17034:	cmp	r3, #10
   17038:	cmpne	r3, #0
   1703c:	bne	17008 <__assert_fail@plt+0x51e8>
   17040:	add	fp, fp, #2
   17044:	str	fp, [r9]
   17048:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1704c:	ldr	r2, [r4]
   17050:	subs	r3, r2, #10
   17054:	movne	r3, #1
   17058:	cmp	r2, #0
   1705c:	moveq	r3, #0
   17060:	cmp	sl, #0
   17064:	moveq	r3, #0
   17068:	cmp	r3, #0
   1706c:	beq	17040 <__assert_fail@plt+0x5220>
   17070:	ldr	r3, [r8]
   17074:	add	fp, sl, #1
   17078:	mov	r2, #10
   1707c:	str	r2, [r3, sl, lsl #2]
   17080:	str	fp, [r9]
   17084:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17088:	mov	fp, #1
   1708c:	str	fp, [r9]
   17090:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17094:	push	{r4, r5, r6, lr}
   17098:	mov	r4, r0
   1709c:	ldr	r5, [pc, #96]	; 17104 <__assert_fail@plt+0x52e4>
   170a0:	ldr	r3, [r5]
   170a4:	cmp	r3, #0
   170a8:	blt	170d4 <__assert_fail@plt+0x52b4>
   170ac:	ldr	r5, [pc, #84]	; 17108 <__assert_fail@plt+0x52e8>
   170b0:	ldr	r2, [r5, #4]
   170b4:	cmp	r2, r0
   170b8:	popeq	{r4, r5, r6, pc}
   170bc:	cmp	r0, #0
   170c0:	moveq	r3, #0
   170c4:	mov	r0, r3
   170c8:	bl	1197c <curs_set@plt>
   170cc:	str	r4, [r5, #4]
   170d0:	pop	{r4, r5, r6, pc}
   170d4:	cmp	r0, #0
   170d8:	beq	170f0 <__assert_fail@plt+0x52d0>
   170dc:	ldr	r5, [pc, #36]	; 17108 <__assert_fail@plt+0x52e8>
   170e0:	ldr	r2, [r5, #4]
   170e4:	cmp	r2, #1
   170e8:	bne	170c4 <__assert_fail@plt+0x52a4>
   170ec:	pop	{r4, r5, r6, pc}
   170f0:	bl	1197c <curs_set@plt>
   170f4:	ldr	r3, [pc, #12]	; 17108 <__assert_fail@plt+0x52e8>
   170f8:	str	r4, [r3, #4]
   170fc:	str	r0, [r5]
   17100:	pop	{r4, r5, r6, pc}
   17104:	ldrdeq	fp, [r2], -r8
   17108:	andeq	fp, r2, r8, asr #6
   1710c:	ldr	r3, [r0]
   17110:	cmp	r3, r1
   17114:	beq	171d0 <__assert_fail@plt+0x53b0>
   17118:	cmp	r3, #3
   1711c:	push	{r4, r5, r6, lr}
   17120:	mov	r5, r1
   17124:	mov	r4, r0
   17128:	beq	17230 <__assert_fail@plt+0x5410>
   1712c:	cmp	r3, #4
   17130:	beq	171fc <__assert_fail@plt+0x53dc>
   17134:	cmp	r3, #2
   17138:	ldr	r6, [pc, #520]	; 17348 <__assert_fail@plt+0x5528>
   1713c:	beq	171d8 <__assert_fail@plt+0x53b8>
   17140:	str	r5, [r4]
   17144:	cmp	r5, #4
   17148:	ldrls	pc, [pc, r5, lsl #2]
   1714c:	b	171c0 <__assert_fail@plt+0x53a0>
   17150:	andeq	r7, r1, r4, ror #4
   17154:	andeq	r7, r1, r0, ror r2
   17158:	muleq	r1, r4, r2
   1715c:	andeq	r7, r1, r4, ror #2
   17160:	andeq	r7, r1, r8, ror #5
   17164:	ldr	r3, [r4, #60]	; 0x3c
   17168:	cmp	r3, #0
   1716c:	beq	171c0 <__assert_fail@plt+0x53a0>
   17170:	mov	r0, #0
   17174:	bl	17094 <__assert_fail@plt+0x5274>
   17178:	ldr	r2, [r4, #56]	; 0x38
   1717c:	ldr	r1, [r4, #52]	; 0x34
   17180:	ldr	r0, [r6]
   17184:	bl	11910 <wmove@plt>
   17188:	mov	r1, #65536	; 0x10000
   1718c:	ldr	r0, [r6]
   17190:	bl	11e14 <wattrset@plt>
   17194:	mvn	r2, #0
   17198:	ldr	r1, [r4, #60]	; 0x3c
   1719c:	ldr	r0, [r6]
   171a0:	bl	119c4 <waddnstr@plt>
   171a4:	mov	r1, #0
   171a8:	ldr	r0, [r6]
   171ac:	bl	11e14 <wattrset@plt>
   171b0:	ldr	r2, [r4, #56]	; 0x38
   171b4:	ldr	r1, [r4, #52]	; 0x34
   171b8:	ldr	r0, [r6]
   171bc:	bl	11910 <wmove@plt>
   171c0:	ldr	r0, [r6]
   171c4:	bl	11afc <wrefresh@plt>
   171c8:	mov	r0, #0
   171cc:	pop	{r4, r5, r6, pc}
   171d0:	mov	r0, #0
   171d4:	bx	lr
   171d8:	ldr	r2, [r0, #32]
   171dc:	ldr	r1, [r0, #28]
   171e0:	ldr	r0, [r6]
   171e4:	bl	11910 <wmove@plt>
   171e8:	ldr	r0, [r6]
   171ec:	mvn	r2, #0
   171f0:	ldr	r1, [r4, #36]	; 0x24
   171f4:	bl	119c4 <waddnstr@plt>
   171f8:	b	17140 <__assert_fail@plt+0x5320>
   171fc:	ldr	r3, [r0, #48]	; 0x30
   17200:	ldr	r6, [pc, #320]	; 17348 <__assert_fail@plt+0x5528>
   17204:	cmp	r3, #0
   17208:	beq	17140 <__assert_fail@plt+0x5320>
   1720c:	ldr	r2, [r0, #44]	; 0x2c
   17210:	ldr	r1, [r0, #40]	; 0x28
   17214:	ldr	r0, [r6]
   17218:	bl	11910 <wmove@plt>
   1721c:	ldr	r0, [r6]
   17220:	mvn	r2, #0
   17224:	ldr	r1, [r4, #48]	; 0x30
   17228:	bl	119c4 <waddnstr@plt>
   1722c:	b	17140 <__assert_fail@plt+0x5320>
   17230:	ldr	r3, [r0, #60]	; 0x3c
   17234:	ldr	r6, [pc, #268]	; 17348 <__assert_fail@plt+0x5528>
   17238:	cmp	r3, #0
   1723c:	beq	17140 <__assert_fail@plt+0x5320>
   17240:	ldr	r2, [r0, #56]	; 0x38
   17244:	ldr	r1, [r0, #52]	; 0x34
   17248:	ldr	r0, [r6]
   1724c:	bl	11910 <wmove@plt>
   17250:	ldr	r0, [r6]
   17254:	mvn	r2, #0
   17258:	ldr	r1, [r4, #60]	; 0x3c
   1725c:	bl	119c4 <waddnstr@plt>
   17260:	b	17140 <__assert_fail@plt+0x5320>
   17264:	mov	r0, #0
   17268:	bl	17094 <__assert_fail@plt+0x5274>
   1726c:	b	171c0 <__assert_fail@plt+0x53a0>
   17270:	ldr	r2, [r4, #8]
   17274:	ldr	r3, [r4, #16]
   17278:	ldr	r1, [r4, #4]
   1727c:	add	r2, r2, r3
   17280:	ldr	r0, [r6]
   17284:	bl	11910 <wmove@plt>
   17288:	mov	r0, #1
   1728c:	bl	17094 <__assert_fail@plt+0x5274>
   17290:	b	171c0 <__assert_fail@plt+0x53a0>
   17294:	mov	r0, #0
   17298:	bl	17094 <__assert_fail@plt+0x5274>
   1729c:	ldr	r2, [r4, #32]
   172a0:	ldr	r1, [r4, #28]
   172a4:	ldr	r0, [r6]
   172a8:	bl	11910 <wmove@plt>
   172ac:	mov	r1, #65536	; 0x10000
   172b0:	ldr	r0, [r6]
   172b4:	bl	11e14 <wattrset@plt>
   172b8:	mvn	r2, #0
   172bc:	ldr	r1, [r4, #36]	; 0x24
   172c0:	ldr	r0, [r6]
   172c4:	bl	119c4 <waddnstr@plt>
   172c8:	mov	r1, #0
   172cc:	ldr	r0, [r6]
   172d0:	bl	11e14 <wattrset@plt>
   172d4:	ldr	r2, [r4, #32]
   172d8:	ldr	r1, [r4, #28]
   172dc:	ldr	r0, [r6]
   172e0:	bl	11910 <wmove@plt>
   172e4:	b	171c0 <__assert_fail@plt+0x53a0>
   172e8:	ldr	r3, [r4, #48]	; 0x30
   172ec:	cmp	r3, #0
   172f0:	beq	171c0 <__assert_fail@plt+0x53a0>
   172f4:	mov	r0, #0
   172f8:	bl	17094 <__assert_fail@plt+0x5274>
   172fc:	ldr	r2, [r4, #44]	; 0x2c
   17300:	ldr	r1, [r4, #40]	; 0x28
   17304:	ldr	r0, [r6]
   17308:	bl	11910 <wmove@plt>
   1730c:	mov	r1, #65536	; 0x10000
   17310:	ldr	r0, [r6]
   17314:	bl	11e14 <wattrset@plt>
   17318:	mvn	r2, #0
   1731c:	ldr	r1, [r4, #48]	; 0x30
   17320:	ldr	r0, [r6]
   17324:	bl	119c4 <waddnstr@plt>
   17328:	mov	r1, #0
   1732c:	ldr	r0, [r6]
   17330:	bl	11e14 <wattrset@plt>
   17334:	ldr	r2, [r4, #44]	; 0x2c
   17338:	ldr	r1, [r4, #40]	; 0x28
   1733c:	ldr	r0, [r6]
   17340:	bl	11910 <wmove@plt>
   17344:	b	171c0 <__assert_fail@plt+0x53a0>
   17348:	andeq	fp, r2, ip, ror #5
   1734c:	ldr	r3, [pc, #4008]	; 182fc <__assert_fail@plt+0x64dc>
   17350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17354:	sub	sp, sp, #300	; 0x12c
   17358:	ldr	r3, [r3]
   1735c:	ldr	r2, [r0, #68]	; 0x44
   17360:	str	r3, [sp, #292]	; 0x124
   17364:	ldr	r3, [pc, #3988]	; 18300 <__assert_fail@plt+0x64e0>
   17368:	mov	r5, #0
   1736c:	cmp	r2, #0
   17370:	mov	r4, r0
   17374:	str	r5, [r3]
   17378:	bne	175d8 <__assert_fail@plt+0x57b8>
   1737c:	ldr	r3, [r4, #56]	; 0x38
   17380:	ldr	r2, [r4, #44]	; 0x2c
   17384:	str	r3, [sp, #12]
   17388:	cmp	r3, #0
   1738c:	ldr	r3, [r4, #28]
   17390:	str	r2, [sp, #4]
   17394:	ldr	r5, [r4, #48]	; 0x30
   17398:	str	r3, [sp, #8]
   1739c:	beq	1760c <__assert_fail@plt+0x57ec>
   173a0:	mov	r1, #0
   173a4:	mov	r0, r1
   173a8:	bl	11d00 <setlocale@plt>
   173ac:	bl	11a3c <strdup@plt>
   173b0:	ldr	r1, [r4, #56]	; 0x38
   173b4:	str	r0, [sp, #12]
   173b8:	mov	r0, #0
   173bc:	bl	11d00 <setlocale@plt>
   173c0:	ldr	r3, [sp, #4]
   173c4:	cmp	r3, #0
   173c8:	beq	17574 <__assert_fail@plt+0x5754>
   173cc:	mov	r0, r3
   173d0:	ldr	r1, [pc, #3884]	; 18304 <__assert_fail@plt+0x64e4>
   173d4:	bl	11970 <fopen@plt>
   173d8:	subs	r3, r0, #0
   173dc:	str	r3, [sp, #16]
   173e0:	beq	17ab4 <__assert_fail@plt+0x5c94>
   173e4:	ldr	r0, [sp, #4]
   173e8:	ldr	r1, [pc, #3864]	; 18308 <__assert_fail@plt+0x64e8>
   173ec:	bl	11970 <fopen@plt>
   173f0:	subs	r3, r0, #0
   173f4:	str	r3, [sp, #4]
   173f8:	beq	18774 <__assert_fail@plt+0x6954>
   173fc:	mov	r0, r5
   17400:	ldr	r2, [sp, #16]
   17404:	ldr	r1, [sp, #4]
   17408:	bl	119e8 <newterm@plt>
   1740c:	ldr	r5, [pc, #3832]	; 1830c <__assert_fail@plt+0x64ec>
   17410:	str	r0, [sp, #24]
   17414:	bl	11dc0 <set_term@plt>
   17418:	mov	r1, #1
   1741c:	ldr	r0, [r5]
   17420:	bl	11ae4 <keypad@plt>
   17424:	bl	11d78 <nonl@plt>
   17428:	bl	11c28 <cbreak@plt>
   1742c:	bl	118f8 <noecho@plt>
   17430:	ldr	r6, [r4, #52]	; 0x34
   17434:	cmp	r6, #0
   17438:	beq	17464 <__assert_fail@plt+0x5644>
   1743c:	ldr	r1, [pc, #3788]	; 18310 <__assert_fail@plt+0x64f0>
   17440:	mov	r0, r6
   17444:	bl	11940 <strcmp@plt>
   17448:	cmp	r0, #0
   1744c:	beq	17f20 <__assert_fail@plt+0x6100>
   17450:	mov	r0, r6
   17454:	ldr	r1, [pc, #3768]	; 18314 <__assert_fail@plt+0x64f4>
   17458:	bl	11940 <strcmp@plt>
   1745c:	cmp	r0, #0
   17460:	beq	18050 <__assert_fail@plt+0x6230>
   17464:	bl	119ac <has_colors@plt>
   17468:	cmp	r0, #0
   1746c:	bne	176f8 <__assert_fail@plt+0x58d8>
   17470:	ldr	r0, [r5]
   17474:	bl	11afc <wrefresh@plt>
   17478:	ldr	fp, [r4, #4]
   1747c:	str	r4, [sp, #128]	; 0x80
   17480:	cmp	fp, #0
   17484:	beq	1749c <__assert_fail@plt+0x567c>
   17488:	mov	r1, fp
   1748c:	ldr	r0, [r4, #56]	; 0x38
   17490:	bl	16e98 <__assert_fail@plt+0x5078>
   17494:	subs	fp, r0, #0
   17498:	beq	18868 <__assert_fail@plt+0x6a48>
   1749c:	ldr	sl, [r4, #8]
   174a0:	cmp	sl, #0
   174a4:	beq	174bc <__assert_fail@plt+0x569c>
   174a8:	mov	r1, sl
   174ac:	ldr	r0, [r4, #56]	; 0x38
   174b0:	bl	16e98 <__assert_fail@plt+0x5078>
   174b4:	subs	sl, r0, #0
   174b8:	beq	188e0 <__assert_fail@plt+0x6ac0>
   174bc:	ldr	r3, [r4, #12]
   174c0:	cmp	r3, #0
   174c4:	str	r3, [sp, #20]
   174c8:	beq	174e4 <__assert_fail@plt+0x56c4>
   174cc:	mov	r1, r3
   174d0:	ldr	r0, [r4, #56]	; 0x38
   174d4:	bl	16e98 <__assert_fail@plt+0x5078>
   174d8:	subs	r3, r0, #0
   174dc:	str	r3, [sp, #20]
   174e0:	beq	18944 <__assert_fail@plt+0x6b24>
   174e4:	ldr	r3, [r4, #168]	; 0xa8
   174e8:	ldr	r6, [r4, #16]
   174ec:	cmp	r3, #0
   174f0:	beq	17f28 <__assert_fail@plt+0x6108>
   174f4:	cmp	r6, #0
   174f8:	moveq	r6, r3
   174fc:	mov	r0, r6
   17500:	bl	11bec <strlen@plt>
   17504:	mov	r7, r0
   17508:	add	r0, r0, #3
   1750c:	bl	11b2c <malloc@plt>
   17510:	subs	r1, r0, #0
   17514:	beq	18a04 <__assert_fail@plt+0x6be4>
   17518:	mov	r3, #60	; 0x3c
   1751c:	cmp	r7, #0
   17520:	strb	r3, [r1]
   17524:	beq	18aa8 <__assert_fail@plt+0x6c88>
   17528:	mov	r0, r1
   1752c:	mov	lr, #1
   17530:	mov	ip, #0
   17534:	b	17550 <__assert_fail@plt+0x5730>
   17538:	cmp	r7, r3
   1753c:	mov	ip, r3
   17540:	strb	r2, [r0, #1]!
   17544:	add	r3, lr, #1
   17548:	ble	1761c <__assert_fail@plt+0x57fc>
   1754c:	mov	lr, r3
   17550:	ldrb	r2, [r6, ip]
   17554:	add	r3, ip, #1
   17558:	cmp	r2, #95	; 0x5f
   1755c:	bne	17538 <__assert_fail@plt+0x5718>
   17560:	ldrb	r2, [r6, r3]
   17564:	cmp	r2, #0
   17568:	beq	180b0 <__assert_fail@plt+0x6290>
   1756c:	add	r3, ip, #2
   17570:	b	17538 <__assert_fail@plt+0x5718>
   17574:	ldr	r3, [pc, #3460]	; 18300 <__assert_fail@plt+0x64e0>
   17578:	ldr	r5, [r3, #8]
   1757c:	cmp	r5, #0
   17580:	bne	176dc <__assert_fail@plt+0x58bc>
   17584:	ldr	r3, [pc, #3468]	; 18318 <__assert_fail@plt+0x64f8>
   17588:	ldr	r0, [r3]
   1758c:	bl	11ca0 <fileno@plt>
   17590:	bl	11da8 <isatty@plt>
   17594:	cmp	r0, #0
   17598:	beq	17b58 <__assert_fail@plt+0x5d38>
   1759c:	ldr	r3, [pc, #3448]	; 1831c <__assert_fail@plt+0x64fc>
   175a0:	ldr	r0, [r3]
   175a4:	bl	11ca0 <fileno@plt>
   175a8:	bl	11da8 <isatty@plt>
   175ac:	cmp	r0, #0
   175b0:	beq	17b58 <__assert_fail@plt+0x5d38>
   175b4:	ldr	r2, [pc, #3396]	; 18300 <__assert_fail@plt+0x64e0>
   175b8:	ldr	r5, [sp, #4]
   175bc:	mov	r3, #1
   175c0:	str	r5, [sp, #24]
   175c4:	str	r3, [r2, #8]
   175c8:	bl	11cd0 <initscr@plt>
   175cc:	str	r5, [sp, #16]
   175d0:	ldr	r5, [pc, #3380]	; 1830c <__assert_fail@plt+0x64ec>
   175d4:	b	17418 <__assert_fail@plt+0x55f8>
   175d8:	mov	r1, r5
   175dc:	mov	r2, #136	; 0x88
   175e0:	add	r0, sp, #156	; 0x9c
   175e4:	bl	11c70 <memset@plt>
   175e8:	ldr	r3, [pc, #3376]	; 18320 <__assert_fail@plt+0x6500>
   175ec:	mov	r2, r5
   175f0:	add	r1, sp, #152	; 0x98
   175f4:	mov	r0, #14
   175f8:	str	r3, [sp, #152]	; 0x98
   175fc:	bl	11ab4 <sigaction@plt>
   17600:	ldr	r0, [r4, #68]	; 0x44
   17604:	bl	11a54 <alarm@plt>
   17608:	b	1737c <__assert_fail@plt+0x555c>
   1760c:	ldr	r1, [pc, #3344]	; 18324 <__assert_fail@plt+0x6504>
   17610:	ldr	r0, [sp, #12]
   17614:	bl	11d00 <setlocale@plt>
   17618:	b	173c0 <__assert_fail@plt+0x55a0>
   1761c:	add	lr, lr, #2
   17620:	ldr	r0, [r4, #56]	; 0x38
   17624:	mov	r2, #62	; 0x3e
   17628:	strb	r2, [r1, r3]
   1762c:	mov	r3, #0
   17630:	strb	r3, [r1, lr]
   17634:	bl	134a4 <__assert_fail@plt+0x1684>
   17638:	cmp	r0, #0
   1763c:	str	r0, [sp, #100]	; 0x64
   17640:	beq	17f7c <__assert_fail@plt+0x615c>
   17644:	ldr	r6, [r4, #124]	; 0x7c
   17648:	cmp	r6, #0
   1764c:	bne	1778c <__assert_fail@plt+0x596c>
   17650:	ldr	r3, [r4, #172]	; 0xac
   17654:	ldr	r7, [r4, #24]
   17658:	cmp	r3, #0
   1765c:	beq	18930 <__assert_fail@plt+0x6b10>
   17660:	cmp	r7, #0
   17664:	moveq	r7, r3
   17668:	mov	r0, r7
   1766c:	bl	11bec <strlen@plt>
   17670:	mov	r8, r0
   17674:	add	r0, r0, #3
   17678:	bl	11b2c <malloc@plt>
   1767c:	subs	r1, r0, #0
   17680:	beq	18a84 <__assert_fail@plt+0x6c64>
   17684:	mov	r3, #60	; 0x3c
   17688:	cmp	r8, #0
   1768c:	strb	r3, [r1]
   17690:	beq	18b18 <__assert_fail@plt+0x6cf8>
   17694:	mov	lr, r1
   17698:	mov	ip, #1
   1769c:	b	176b8 <__assert_fail@plt+0x5898>
   176a0:	cmp	r8, r2
   176a4:	strb	r3, [lr, #1]!
   176a8:	mov	r6, r2
   176ac:	add	r3, ip, #1
   176b0:	ble	17f9c <__assert_fail@plt+0x617c>
   176b4:	mov	ip, r3
   176b8:	ldrb	r3, [r7, r6]
   176bc:	add	r2, r6, #1
   176c0:	cmp	r3, #95	; 0x5f
   176c4:	bne	176a0 <__assert_fail@plt+0x5880>
   176c8:	ldrb	r3, [r7, r2]
   176cc:	cmp	r3, #0
   176d0:	beq	18a28 <__assert_fail@plt+0x6c08>
   176d4:	add	r2, r6, #2
   176d8:	b	176a0 <__assert_fail@plt+0x5880>
   176dc:	ldr	r5, [pc, #3112]	; 1830c <__assert_fail@plt+0x64ec>
   176e0:	ldr	r3, [sp, #4]
   176e4:	ldr	r0, [r5]
   176e8:	str	r3, [sp, #24]
   176ec:	str	r3, [sp, #16]
   176f0:	bl	11db4 <wclear@plt>
   176f4:	b	17418 <__assert_fail@plt+0x55f8>
   176f8:	bl	118d4 <start_color@plt>
   176fc:	bl	118e0 <use_default_colors@plt>
   17700:	ldr	r3, [r4, #160]	; 0xa0
   17704:	cmp	r3, #1
   17708:	moveq	r2, #3
   1770c:	strdeq	r2, [r4, #160]	; 0xa0
   17710:	ldr	r3, [pc, #3140]	; 1835c <__assert_fail@plt+0x653c>
   17714:	ldr	r3, [r3]
   17718:	cmp	r3, #1
   1771c:	ble	17470 <__assert_fail@plt+0x5650>
   17720:	ldr	r2, [r4, #156]	; 0x9c
   17724:	ldr	r3, [r4, #148]	; 0x94
   17728:	ldr	r6, [pc, #3064]	; 18328 <__assert_fail@plt+0x6508>
   1772c:	lsl	r2, r2, #1
   17730:	lsl	r3, r3, #1
   17734:	ldrsh	r2, [r6, r2]
   17738:	ldrsh	r1, [r6, r3]
   1773c:	mov	r0, #1
   17740:	bl	11c7c <init_pair@plt>
   17744:	ldrd	r2, [r4, #156]	; 0x9c
   17748:	mov	r0, #2
   1774c:	lsl	r3, r3, #1
   17750:	lsl	r2, r2, #1
   17754:	ldrsh	r1, [r6, r3]
   17758:	ldrsh	r2, [r6, r2]
   1775c:	bl	11c7c <init_pair@plt>
   17760:	mov	r1, #256	; 0x100
   17764:	ldr	r0, [r5]
   17768:	bl	11b08 <wbkgd@plt>
   1776c:	ldr	r3, [r4, #152]	; 0x98
   17770:	ldr	r1, [pc, #3052]	; 18364 <__assert_fail@plt+0x6544>
   17774:	cmp	r3, #0
   17778:	moveq	r1, #256	; 0x100
   1777c:	mov	r2, #0
   17780:	ldr	r0, [r5]
   17784:	bl	11964 <wattr_on@plt>
   17788:	b	17470 <__assert_fail@plt+0x5650>
   1778c:	mov	r3, #0
   17790:	str	r3, [sp, #112]	; 0x70
   17794:	mov	r3, #0
   17798:	str	r3, [sp, #124]	; 0x7c
   1779c:	ldr	r3, [r5]
   177a0:	cmp	r3, #0
   177a4:	mvneq	r9, #0
   177a8:	ldrshne	r9, [r3, #4]
   177ac:	ldrshne	r3, [r3, #6]
   177b0:	streq	r9, [sp, #28]
   177b4:	addne	r9, r9, #1
   177b8:	addne	r3, r3, #1
   177bc:	strne	r3, [sp, #28]
   177c0:	cmp	fp, #0
   177c4:	beq	18768 <__assert_fail@plt+0x6948>
   177c8:	mov	r2, #0
   177cc:	mov	r3, r2
   177d0:	str	r2, [sp, #60]	; 0x3c
   177d4:	mov	r6, r2
   177d8:	ldr	r2, [sp, #28]
   177dc:	mov	r7, #1
   177e0:	add	r0, sp, #60	; 0x3c
   177e4:	add	ip, sp, #56	; 0x38
   177e8:	sub	r8, r2, #4
   177ec:	str	r4, [sp, #32]
   177f0:	str	r5, [sp, #36]	; 0x24
   177f4:	mov	r2, fp
   177f8:	mov	r5, r7
   177fc:	mov	r1, r3
   17800:	mov	r4, r0
   17804:	mov	r7, ip
   17808:	b	17810 <__assert_fail@plt+0x59f0>
   1780c:	mov	r5, r0
   17810:	add	ip, r2, r1, lsl #2
   17814:	mov	r0, r8
   17818:	mov	r2, r4
   1781c:	mov	r1, r7
   17820:	str	ip, [sp, #56]	; 0x38
   17824:	bl	16fb0 <__assert_fail@plt+0x5190>
   17828:	ldr	r1, [sp, #60]	; 0x3c
   1782c:	ldr	r2, [sp, #56]	; 0x38
   17830:	sub	r0, r1, #-1073741823	; 0xc0000001
   17834:	cmp	r6, r1
   17838:	ldr	r0, [r2, r0, lsl #2]
   1783c:	movlt	r6, r1
   17840:	cmp	r0, #0
   17844:	add	r0, r5, #1
   17848:	bne	1780c <__assert_fail@plt+0x59ec>
   1784c:	mov	r7, r5
   17850:	ldrd	r4, [sp, #32]
   17854:	add	r7, r7, #2
   17858:	ldr	r0, [r4, #28]
   1785c:	cmp	r0, #0
   17860:	moveq	r3, r0
   17864:	beq	178c4 <__assert_fail@plt+0x5aa4>
   17868:	cmp	sl, #0
   1786c:	moveq	r3, sl
   17870:	beq	178c0 <__assert_fail@plt+0x5aa0>
   17874:	mov	r3, #0
   17878:	mov	r1, r3
   1787c:	sub	ip, sl, #4
   17880:	ldr	r2, [ip, #4]!
   17884:	cmp	r2, #0
   17888:	beq	178b4 <__assert_fail@plt+0x5a94>
   1788c:	cmp	r2, #10
   17890:	addne	r3, r3, #1
   17894:	bne	17880 <__assert_fail@plt+0x5a60>
   17898:	ldr	r2, [ip, #4]!
   1789c:	cmp	r1, r3
   178a0:	movlt	r1, r3
   178a4:	cmp	r2, #0
   178a8:	add	r7, r7, #1
   178ac:	mov	r3, #0
   178b0:	bne	1788c <__assert_fail@plt+0x5a6c>
   178b4:	cmp	r1, r3
   178b8:	movge	r3, r1
   178bc:	add	r7, r7, #2
   178c0:	add	r7, r7, #2
   178c4:	add	r2, r7, #2
   178c8:	cmp	r2, r9
   178cc:	str	r2, [sp, #36]	; 0x24
   178d0:	bgt	18058 <__assert_fail@plt+0x6238>
   178d4:	cmp	fp, #0
   178d8:	moveq	r6, fp
   178dc:	beq	178f4 <__assert_fail@plt+0x5ad4>
   178e0:	ldr	r1, [sp, #28]
   178e4:	sub	r2, r1, #3
   178e8:	cmp	r2, r6
   178ec:	suble	r6, r1, #4
   178f0:	bic	r6, r6, r6, asr #31
   178f4:	cmp	r0, #0
   178f8:	beq	17948 <__assert_fail@plt+0x5b28>
   178fc:	ldr	r2, [sp, #28]
   17900:	cmp	sl, #0
   17904:	sub	r8, r2, #3
   17908:	beq	1791c <__assert_fail@plt+0x5afc>
   1790c:	cmp	r3, r8
   17910:	subge	r3, r2, #4
   17914:	cmp	r6, r3
   17918:	movlt	r6, r3
   1791c:	ldr	r0, [sp, #20]
   17920:	cmp	r0, #0
   17924:	moveq	r0, #40	; 0x28
   17928:	beq	17934 <__assert_fail@plt+0x5b14>
   1792c:	bl	11d18 <wcslen@plt>
   17930:	add	r0, r0, #41	; 0x29
   17934:	cmp	r0, r8
   17938:	ldrge	r3, [sp, #28]
   1793c:	subge	r0, r3, #4
   17940:	cmp	r6, r0
   17944:	movlt	r6, r0
   17948:	ldr	r0, [sp, #100]	; 0x64
   1794c:	bl	11bec <strlen@plt>
   17950:	ldr	r3, [sp, #112]	; 0x70
   17954:	add	r0, r0, r0, lsl #1
   17958:	cmp	r6, r0
   1795c:	movcc	r6, r0
   17960:	cmp	r3, #0
   17964:	beq	1797c <__assert_fail@plt+0x5b5c>
   17968:	mov	r0, r3
   1796c:	bl	11bec <strlen@plt>
   17970:	add	r0, r0, r0, lsl #1
   17974:	cmp	r6, r0
   17978:	movcc	r6, r0
   1797c:	ldr	r0, [sp, #124]	; 0x7c
   17980:	cmp	r0, #0
   17984:	beq	17998 <__assert_fail@plt+0x5b78>
   17988:	bl	11bec <strlen@plt>
   1798c:	add	r0, r0, r0, lsl #1
   17990:	cmp	r6, r0
   17994:	movcc	r6, r0
   17998:	ldr	r0, [sp, #28]
   1799c:	add	r3, r6, #4
   179a0:	cmp	r0, r3
   179a4:	str	r3, [sp, #44]	; 0x2c
   179a8:	bge	180bc <__assert_fail@plt+0x629c>
   179ac:	ldr	r1, [pc, #2424]	; 1832c <__assert_fail@plt+0x650c>
   179b0:	ldr	r3, [pc, #2424]	; 18330 <__assert_fail@plt+0x6510>
   179b4:	ldr	r2, [pc, #2424]	; 18334 <__assert_fail@plt+0x6514>
   179b8:	cmp	r0, #0
   179bc:	mov	r6, #1
   179c0:	movge	r3, r1
   179c4:	str	r3, [r4, #108]	; 0x6c
   179c8:	str	r2, [r4, #112]	; 0x70
   179cc:	cmp	fp, #0
   179d0:	beq	179dc <__assert_fail@plt+0x5bbc>
   179d4:	mov	r0, fp
   179d8:	bl	119b8 <free@plt>
   179dc:	cmp	sl, #0
   179e0:	beq	179ec <__assert_fail@plt+0x5bcc>
   179e4:	mov	r0, sl
   179e8:	bl	119b8 <free@plt>
   179ec:	ldr	r3, [sp, #20]
   179f0:	cmp	r3, #0
   179f4:	beq	17a00 <__assert_fail@plt+0x5be0>
   179f8:	mov	r0, r3
   179fc:	bl	119b8 <free@plt>
   17a00:	cmp	r6, #0
   17a04:	bne	18874 <__assert_fail@plt+0x6a54>
   17a08:	ldr	r3, [sp, #8]
   17a0c:	add	r0, sp, #64	; 0x40
   17a10:	cmp	r3, #0
   17a14:	moveq	r1, #2
   17a18:	movne	r1, #1
   17a1c:	bl	1710c <__assert_fail@plt+0x52ec>
   17a20:	mov	r1, #70	; 0x46
   17a24:	ldr	r0, [r5]
   17a28:	bl	11bbc <wtimeout@plt>
   17a2c:	ldr	r9, [pc, #2308]	; 18338 <__assert_fail@plt+0x6518>
   17a30:	ldr	r8, [pc, #2308]	; 1833c <__assert_fail@plt+0x651c>
   17a34:	ldr	r7, [pc, #2284]	; 18328 <__assert_fail@plt+0x6508>
   17a38:	mov	sl, #1
   17a3c:	ldr	r0, [r5]
   17a40:	bl	11aa8 <wgetch@plt>
   17a44:	ldr	r3, [pc, #2228]	; 18300 <__assert_fail@plt+0x64e0>
   17a48:	ldr	r2, [r3]
   17a4c:	cmp	r2, #0
   17a50:	movne	r2, sl
   17a54:	moveq	r2, #0
   17a58:	cmp	r2, #0
   17a5c:	mov	fp, r0
   17a60:	bne	17f10 <__assert_fail@plt+0x60f0>
   17a64:	cmp	r0, #27
   17a68:	beq	17e84 <__assert_fail@plt+0x6064>
   17a6c:	bgt	17b94 <__assert_fail@plt+0x5d74>
   17a70:	cmp	r0, #5
   17a74:	beq	17cdc <__assert_fail@plt+0x5ebc>
   17a78:	ble	17bd8 <__assert_fail@plt+0x5db8>
   17a7c:	cmp	r0, #9
   17a80:	beq	17e8c <__assert_fail@plt+0x606c>
   17a84:	cmp	r0, #13
   17a88:	bne	17be0 <__assert_fail@plt+0x5dc0>
   17a8c:	ldr	r3, [sp, #64]	; 0x40
   17a90:	sub	r3, r3, #1
   17a94:	cmp	r3, #3
   17a98:	bhi	17bcc <__assert_fail@plt+0x5dac>
   17a9c:	add	r3, r7, r3, lsl #2
   17aa0:	ldr	r6, [r3, #20]
   17aa4:	cmp	r6, #0
   17aa8:	bne	17ce0 <__assert_fail@plt+0x5ec0>
   17aac:	mov	sl, r6
   17ab0:	b	17a3c <__assert_fail@plt+0x5c1c>
   17ab4:	bl	11c10 <gpg_err_code_from_syserror@plt>
   17ab8:	ldr	r2, [sp, #8]
   17abc:	ldr	r3, [pc, #2172]	; 18340 <__assert_fail@plt+0x6520>
   17ac0:	str	r3, [r4, #112]	; 0x70
   17ac4:	cmp	r0, #0
   17ac8:	uxthne	r0, r0
   17acc:	orrne	r0, r0, #83886080	; 0x5000000
   17ad0:	adds	r6, r2, #0
   17ad4:	movne	r6, #1
   17ad8:	rsb	r6, r6, #0
   17adc:	str	r0, [r4, #108]	; 0x6c
   17ae0:	ldr	r1, [r4, #92]	; 0x5c
   17ae4:	cmp	r1, #0
   17ae8:	beq	17b38 <__assert_fail@plt+0x5d18>
   17aec:	ldrb	r3, [r1]
   17af0:	cmp	r3, #0
   17af4:	beq	17b38 <__assert_fail@plt+0x5d18>
   17af8:	add	r2, sp, #64	; 0x40
   17afc:	mov	r0, #3
   17b00:	bl	11a9c <__xstat@plt>
   17b04:	cmp	r0, #0
   17b08:	beq	17b18 <__assert_fail@plt+0x5cf8>
   17b0c:	b	17b38 <__assert_fail@plt+0x5d18>
   17b10:	mov	r0, #1
   17b14:	bl	11a0c <sleep@plt>
   17b18:	mov	r0, #0
   17b1c:	bl	119f4 <time@plt>
   17b20:	ldr	r3, [sp, #128]	; 0x80
   17b24:	cmp	r0, r3
   17b28:	beq	17b10 <__assert_fail@plt+0x5cf0>
   17b2c:	ldr	r0, [r4, #92]	; 0x5c
   17b30:	mov	r1, #0
   17b34:	bl	11d24 <utime@plt>
   17b38:	ldr	r3, [pc, #1980]	; 182fc <__assert_fail@plt+0x64dc>
   17b3c:	ldr	r2, [sp, #292]	; 0x124
   17b40:	mov	r0, r6
   17b44:	ldr	r3, [r3]
   17b48:	cmp	r2, r3
   17b4c:	bne	18bb8 <__assert_fail@plt+0x6d98>
   17b50:	add	sp, sp, #300	; 0x12c
   17b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b58:	bl	11c40 <__errno_location@plt>
   17b5c:	mov	r3, #25
   17b60:	str	r3, [r0]
   17b64:	bl	11c10 <gpg_err_code_from_syserror@plt>
   17b68:	ldr	r2, [sp, #8]
   17b6c:	ldr	r3, [pc, #2000]	; 18344 <__assert_fail@plt+0x6524>
   17b70:	str	r3, [r4, #112]	; 0x70
   17b74:	cmp	r0, #0
   17b78:	uxthne	r0, r0
   17b7c:	orrne	r5, r0, #83886080	; 0x5000000
   17b80:	adds	r6, r2, #0
   17b84:	movne	r6, #1
   17b88:	rsb	r6, r6, #0
   17b8c:	str	r5, [r4, #108]	; 0x6c
   17b90:	b	17ae0 <__assert_fail@plt+0x5cc0>
   17b94:	cmp	r0, #260	; 0x104
   17b98:	bgt	17e0c <__assert_fail@plt+0x5fec>
   17b9c:	cmp	r0, r8
   17ba0:	bge	17e44 <__assert_fail@plt+0x6024>
   17ba4:	ldr	r3, [pc, #1948]	; 18348 <__assert_fail@plt+0x6528>
   17ba8:	cmp	r0, r3
   17bac:	bne	17be0 <__assert_fail@plt+0x5dc0>
   17bb0:	ldr	r3, [sp, #64]	; 0x40
   17bb4:	cmp	r3, #2
   17bb8:	beq	17e20 <__assert_fail@plt+0x6000>
   17bbc:	cmp	r3, #3
   17bc0:	beq	17ed4 <__assert_fail@plt+0x60b4>
   17bc4:	cmp	r3, #1
   17bc8:	beq	17ebc <__assert_fail@plt+0x609c>
   17bcc:	mov	r6, #0
   17bd0:	mov	sl, r6
   17bd4:	b	17a3c <__assert_fail@plt+0x5c1c>
   17bd8:	cmn	r0, #1
   17bdc:	beq	17a3c <__assert_fail@plt+0x5c1c>
   17be0:	ldr	r3, [sp, #64]	; 0x40
   17be4:	cmp	r3, #1
   17be8:	bne	17bcc <__assert_fail@plt+0x5dac>
   17bec:	ldr	r0, [sp, #128]	; 0x80
   17bf0:	ldr	sl, [sp, #80]	; 0x50
   17bf4:	ldr	ip, [r0, #28]
   17bf8:	cmp	ip, #0
   17bfc:	beq	18bbc <__assert_fail@plt+0x6d9c>
   17c00:	ldr	r3, [pc, #1860]	; 1834c <__assert_fail@plt+0x652c>
   17c04:	cmp	fp, r3
   17c08:	movne	r6, #0
   17c0c:	andeq	r6, r6, #1
   17c10:	cmp	r6, #0
   17c14:	bne	17c3c <__assert_fail@plt+0x5e1c>
   17c18:	cmp	fp, #21
   17c1c:	beq	18ae4 <__assert_fail@plt+0x6cc4>
   17c20:	ble	18080 <__assert_fail@plt+0x6260>
   17c24:	cmp	fp, #127	; 0x7f
   17c28:	beq	187c0 <__assert_fail@plt+0x69a0>
   17c2c:	cmp	fp, r3
   17c30:	beq	187c0 <__assert_fail@plt+0x69a0>
   17c34:	cmp	fp, #23
   17c38:	bne	18ab4 <__assert_fail@plt+0x6c94>
   17c3c:	ldr	r0, [sp, #76]	; 0x4c
   17c40:	ldr	r3, [sp, #88]	; 0x58
   17c44:	mov	r6, sl
   17c48:	add	r2, ip, r3
   17c4c:	b	17c74 <__assert_fail@plt+0x5e54>
   17c50:	ldrb	r1, [r2, #-1]!
   17c54:	cmp	r1, #32
   17c58:	bne	17c7c <__assert_fail@plt+0x5e5c>
   17c5c:	sub	r6, r6, #1
   17c60:	sub	r3, r3, #1
   17c64:	cmp	r6, #0
   17c68:	str	r6, [sp, #80]	; 0x50
   17c6c:	str	r3, [sp, #88]	; 0x58
   17c70:	blt	18918 <__assert_fail@plt+0x6af8>
   17c74:	cmp	r3, #0
   17c78:	bgt	17c50 <__assert_fail@plt+0x5e30>
   17c7c:	add	r2, ip, r3
   17c80:	b	17ca8 <__assert_fail@plt+0x5e88>
   17c84:	ldrb	r1, [r2, #-1]!
   17c88:	cmp	r1, #32
   17c8c:	beq	17cb0 <__assert_fail@plt+0x5e90>
   17c90:	sub	r6, r6, #1
   17c94:	sub	r3, r3, #1
   17c98:	cmp	r6, #0
   17c9c:	str	r6, [sp, #80]	; 0x50
   17ca0:	str	r3, [sp, #88]	; 0x58
   17ca4:	blt	18900 <__assert_fail@plt+0x6ae0>
   17ca8:	cmp	r3, #0
   17cac:	bgt	17c84 <__assert_fail@plt+0x5e64>
   17cb0:	ldr	r0, [r5]
   17cb4:	ldr	r1, [sp, #68]	; 0x44
   17cb8:	ldr	r2, [sp, #72]	; 0x48
   17cbc:	cmp	sl, r6
   17cc0:	blt	18824 <__assert_fail@plt+0x6a04>
   17cc4:	add	r2, r6, r2
   17cc8:	bgt	189d4 <__assert_fail@plt+0x6bb4>
   17ccc:	mov	r6, #0
   17cd0:	bl	11910 <wmove@plt>
   17cd4:	mov	sl, r6
   17cd8:	b	17a3c <__assert_fail@plt+0x5c1c>
   17cdc:	mvn	r6, #1
   17ce0:	ldr	r3, [sp, #8]
   17ce4:	mov	r0, #1
   17ce8:	cmp	r3, #0
   17cec:	movne	r1, #0
   17cf0:	ldrne	r2, [sp, #128]	; 0x80
   17cf4:	ldrne	r3, [sp, #88]	; 0x58
   17cf8:	ldrne	r2, [r2, #28]
   17cfc:	strbne	r1, [r2, r3]
   17d00:	bl	17094 <__assert_fail@plt+0x5274>
   17d04:	bl	11de4 <endwin@plt>
   17d08:	ldr	r3, [sp, #24]
   17d0c:	cmp	r3, #0
   17d10:	beq	17d1c <__assert_fail@plt+0x5efc>
   17d14:	mov	r0, r3
   17d18:	bl	11cb8 <delscreen@plt>
   17d1c:	ldr	r5, [sp, #12]
   17d20:	cmp	r5, #0
   17d24:	beq	17d3c <__assert_fail@plt+0x5f1c>
   17d28:	mov	r1, r5
   17d2c:	mov	r0, #0
   17d30:	bl	11d00 <setlocale@plt>
   17d34:	mov	r0, r5
   17d38:	bl	119b8 <free@plt>
   17d3c:	ldr	r3, [sp, #16]
   17d40:	cmp	r3, #0
   17d44:	beq	17d50 <__assert_fail@plt+0x5f30>
   17d48:	mov	r0, r3
   17d4c:	bl	11cdc <fclose@plt>
   17d50:	ldr	r3, [sp, #4]
   17d54:	cmp	r3, #0
   17d58:	beq	17d64 <__assert_fail@plt+0x5f44>
   17d5c:	mov	r0, r3
   17d60:	bl	11cdc <fclose@plt>
   17d64:	ldr	r0, [sp, #100]	; 0x64
   17d68:	bl	119b8 <free@plt>
   17d6c:	ldr	r0, [sp, #112]	; 0x70
   17d70:	cmp	r0, #0
   17d74:	beq	17d7c <__assert_fail@plt+0x5f5c>
   17d78:	bl	119b8 <free@plt>
   17d7c:	ldr	r0, [sp, #124]	; 0x7c
   17d80:	cmp	r0, #0
   17d84:	beq	17d8c <__assert_fail@plt+0x5f6c>
   17d88:	bl	119b8 <free@plt>
   17d8c:	ldr	r3, [sp, #8]
   17d90:	cmp	r3, #0
   17d94:	beq	17ef8 <__assert_fail@plt+0x60d8>
   17d98:	mov	r2, #1
   17d9c:	str	r2, [r4, #104]	; 0x68
   17da0:	ldr	r1, [r4, #28]
   17da4:	ldr	r0, [r4, #56]	; 0x38
   17da8:	bl	13694 <__assert_fail@plt+0x1874>
   17dac:	subs	r5, r0, #0
   17db0:	beq	17de8 <__assert_fail@plt+0x5fc8>
   17db4:	bl	11bec <strlen@plt>
   17db8:	add	r1, r0, #1
   17dbc:	mov	r0, r4
   17dc0:	bl	13f50 <__assert_fail@plt+0x2130>
   17dc4:	ldr	r0, [r4, #28]
   17dc8:	cmp	r0, #0
   17dcc:	beq	17dd8 <__assert_fail@plt+0x5fb8>
   17dd0:	mov	r1, r5
   17dd4:	bl	11ad8 <strcpy@plt>
   17dd8:	mov	r0, r5
   17ddc:	bl	190e0 <__assert_fail@plt+0x72c0>
   17de0:	mov	r3, #0
   17de4:	str	r3, [r4, #104]	; 0x68
   17de8:	cmn	r6, #2
   17dec:	moveq	r3, #1
   17df0:	streq	r3, [r4, #100]	; 0x64
   17df4:	beq	17e04 <__assert_fail@plt+0x5fe4>
   17df8:	cmp	r6, #0
   17dfc:	ldrge	r6, [sp, #88]	; 0x58
   17e00:	bge	17ae0 <__assert_fail@plt+0x5cc0>
   17e04:	mvn	r6, #0
   17e08:	b	17ae0 <__assert_fail@plt+0x5cc0>
   17e0c:	cmp	r0, r9
   17e10:	bne	17be0 <__assert_fail@plt+0x5dc0>
   17e14:	ldr	r3, [sp, #64]	; 0x40
   17e18:	cmp	r3, #2
   17e1c:	bne	17bbc <__assert_fail@plt+0x5d9c>
   17e20:	ldr	r6, [sp, #124]	; 0x7c
   17e24:	cmp	r6, #0
   17e28:	beq	17f3c <__assert_fail@plt+0x611c>
   17e2c:	mov	r1, #3
   17e30:	add	r0, sp, #64	; 0x40
   17e34:	mov	r6, #0
   17e38:	bl	1710c <__assert_fail@plt+0x52ec>
   17e3c:	mov	sl, r6
   17e40:	b	17a3c <__assert_fail@plt+0x5c1c>
   17e44:	ldr	r3, [sp, #64]	; 0x40
   17e48:	cmp	r3, #3
   17e4c:	beq	17ebc <__assert_fail@plt+0x609c>
   17e50:	cmp	r3, #4
   17e54:	beq	17eb0 <__assert_fail@plt+0x6090>
   17e58:	cmp	r3, #2
   17e5c:	bne	17bcc <__assert_fail@plt+0x5dac>
   17e60:	ldr	r3, [sp, #8]
   17e64:	cmp	r3, #0
   17e68:	beq	17f90 <__assert_fail@plt+0x6170>
   17e6c:	mov	r1, #1
   17e70:	add	r0, sp, #64	; 0x40
   17e74:	mov	r6, #0
   17e78:	bl	1710c <__assert_fail@plt+0x52ec>
   17e7c:	mov	sl, r6
   17e80:	b	17a3c <__assert_fail@plt+0x5c1c>
   17e84:	mov	r6, #1
   17e88:	b	17a3c <__assert_fail@plt+0x5c1c>
   17e8c:	ldr	r3, [sp, #64]	; 0x40
   17e90:	sub	r3, r3, #1
   17e94:	cmp	r3, #3
   17e98:	ldrls	pc, [pc, r3, lsl #2]
   17e9c:	b	17bcc <__assert_fail@plt+0x5dac>
   17ea0:			; <UNDEFINED> instruction: 0x00017ebc
   17ea4:	andeq	r7, r1, r0, lsr #28
   17ea8:	ldrdeq	r7, [r1], -r4
   17eac:	andeq	r7, r1, r8, ror #29
   17eb0:	ldr	r3, [sp, #124]	; 0x7c
   17eb4:	cmp	r3, #0
   17eb8:	bne	17e2c <__assert_fail@plt+0x600c>
   17ebc:	mov	r1, #2
   17ec0:	add	r0, sp, #64	; 0x40
   17ec4:	mov	r6, #0
   17ec8:	bl	1710c <__assert_fail@plt+0x52ec>
   17ecc:	mov	sl, r6
   17ed0:	b	17a3c <__assert_fail@plt+0x5c1c>
   17ed4:	mov	r1, #4
   17ed8:	add	r0, sp, #64	; 0x40
   17edc:	mov	r6, #0
   17ee0:	bl	1710c <__assert_fail@plt+0x52ec>
   17ee4:	b	17aac <__assert_fail@plt+0x5c8c>
   17ee8:	ldr	r3, [sp, #8]
   17eec:	cmp	r3, #0
   17ef0:	bne	17e6c <__assert_fail@plt+0x604c>
   17ef4:	b	17ebc <__assert_fail@plt+0x609c>
   17ef8:	cmn	r6, #2
   17efc:	mvn	r6, r6
   17f00:	moveq	r3, #1
   17f04:	streq	r3, [r4, #100]	; 0x64
   17f08:	lsr	r6, r6, #31
   17f0c:	b	17ae0 <__assert_fail@plt+0x5cc0>
   17f10:	ldr	r3, [pc, #1080]	; 18350 <__assert_fail@plt+0x6530>
   17f14:	mvn	r6, #1
   17f18:	str	r3, [r4, #108]	; 0x6c
   17f1c:	b	17ce0 <__assert_fail@plt+0x5ec0>
   17f20:	bl	11b20 <beep@plt>
   17f24:	b	17464 <__assert_fail@plt+0x5644>
   17f28:	cmp	r6, #0
   17f2c:	bne	174fc <__assert_fail@plt+0x56dc>
   17f30:	ldr	r0, [r4, #56]	; 0x38
   17f34:	ldr	r1, [pc, #1048]	; 18354 <__assert_fail@plt+0x6534>
   17f38:	b	17634 <__assert_fail@plt+0x5814>
   17f3c:	mov	r1, #4
   17f40:	add	r0, sp, #64	; 0x40
   17f44:	mov	sl, r6
   17f48:	bl	1710c <__assert_fail@plt+0x52ec>
   17f4c:	b	17a3c <__assert_fail@plt+0x5c1c>
   17f50:	add	r2, r1, #2
   17f54:	mov	r1, #62	; 0x3e
   17f58:	mov	ip, #0
   17f5c:	strb	r1, [r0, r3]
   17f60:	mov	r1, r0
   17f64:	strb	ip, [r0, r2]
   17f68:	ldr	r0, [r4, #56]	; 0x38
   17f6c:	bl	134a4 <__assert_fail@plt+0x1684>
   17f70:	cmp	r0, #0
   17f74:	str	r0, [sp, #124]	; 0x7c
   17f78:	bne	1779c <__assert_fail@plt+0x597c>
   17f7c:	ldr	r2, [pc, #1012]	; 18378 <__assert_fail@plt+0x6558>
   17f80:	ldr	r3, [pc, #976]	; 18358 <__assert_fail@plt+0x6538>
   17f84:	mov	r6, #1
   17f88:	strd	r2, [r4, #108]	; 0x6c
   17f8c:	b	179cc <__assert_fail@plt+0x5bac>
   17f90:	ldr	sl, [sp, #8]
   17f94:	mov	r6, sl
   17f98:	b	17a3c <__assert_fail@plt+0x5c1c>
   17f9c:	add	ip, ip, #2
   17fa0:	ldr	r0, [r4, #56]	; 0x38
   17fa4:	mov	r2, #62	; 0x3e
   17fa8:	strb	r2, [r1, r3]
   17fac:	mov	r3, #0
   17fb0:	strb	r3, [r1, ip]
   17fb4:	bl	134a4 <__assert_fail@plt+0x1684>
   17fb8:	cmp	r0, #0
   17fbc:	str	r0, [sp, #112]	; 0x70
   17fc0:	beq	17f7c <__assert_fail@plt+0x615c>
   17fc4:	ldr	r6, [r4, #124]	; 0x7c
   17fc8:	cmp	r6, #0
   17fcc:	bne	17794 <__assert_fail@plt+0x5974>
   17fd0:	ldr	r7, [r4, #20]
   17fd4:	cmp	r7, #0
   17fd8:	beq	17794 <__assert_fail@plt+0x5974>
   17fdc:	mov	r0, r7
   17fe0:	bl	11bec <strlen@plt>
   17fe4:	mov	r8, r0
   17fe8:	add	r0, r0, #3
   17fec:	bl	11b2c <malloc@plt>
   17ff0:	cmp	r0, #0
   17ff4:	beq	18a84 <__assert_fail@plt+0x6c64>
   17ff8:	mov	r3, #60	; 0x3c
   17ffc:	cmp	r8, #0
   18000:	strb	r3, [r0]
   18004:	beq	18b30 <__assert_fail@plt+0x6d10>
   18008:	mov	ip, r0
   1800c:	mov	r1, #1
   18010:	b	1802c <__assert_fail@plt+0x620c>
   18014:	cmp	r8, r2
   18018:	strb	r3, [ip, #1]!
   1801c:	mov	r6, r2
   18020:	add	r3, r1, #1
   18024:	ble	17f50 <__assert_fail@plt+0x6130>
   18028:	mov	r1, r3
   1802c:	ldrb	r3, [r7, r6]
   18030:	add	r2, r6, #1
   18034:	cmp	r3, #95	; 0x5f
   18038:	bne	18014 <__assert_fail@plt+0x61f4>
   1803c:	ldrb	r3, [r7, r2]
   18040:	cmp	r3, #0
   18044:	beq	18b0c <__assert_fail@plt+0x6cec>
   18048:	add	r2, r6, #2
   1804c:	b	18014 <__assert_fail@plt+0x61f4>
   18050:	bl	11bc8 <flash@plt>
   18054:	b	17464 <__assert_fail@plt+0x5644>
   18058:	ldr	r3, [pc, #720]	; 18330 <__assert_fail@plt+0x6510>
   1805c:	ldr	r1, [pc, #712]	; 1832c <__assert_fail@plt+0x650c>
   18060:	cmp	r9, #0
   18064:	ldr	r2, [pc, #712]	; 18334 <__assert_fail@plt+0x6514>
   18068:	movlt	r9, r3
   1806c:	movge	r9, r1
   18070:	str	r9, [r4, #108]	; 0x6c
   18074:	str	r2, [r4, #112]	; 0x70
   18078:	mov	r6, #1
   1807c:	b	179cc <__assert_fail@plt+0x5bac>
   18080:	cmp	fp, #8
   18084:	beq	187c0 <__assert_fail@plt+0x69a0>
   18088:	cmp	fp, #12
   1808c:	bne	18ab4 <__assert_fail@plt+0x6c94>
   18090:	bl	11de4 <endwin@plt>
   18094:	ldr	r0, [r5]
   18098:	bl	11afc <wrefresh@plt>
   1809c:	ldr	r6, [sp, #80]	; 0x50
   180a0:	ldr	r0, [r5]
   180a4:	ldr	r1, [sp, #68]	; 0x44
   180a8:	ldr	r2, [sp, #72]	; 0x48
   180ac:	b	17cbc <__assert_fail@plt+0x5e9c>
   180b0:	mov	r3, lr
   180b4:	add	lr, lr, #1
   180b8:	b	17620 <__assert_fail@plt+0x5800>
   180bc:	ldr	r3, [sp, #36]	; 0x24
   180c0:	ldr	r2, [sp, #28]
   180c4:	ldr	lr, [sp, #44]	; 0x2c
   180c8:	sub	r9, r9, r3
   180cc:	sub	r3, r2, lr
   180d0:	add	r9, r9, r9, lsr #31
   180d4:	add	r3, r3, r3, lsr #31
   180d8:	asr	r9, r9, #1
   180dc:	asr	ip, r3, #1
   180e0:	ldr	r3, [r4, #32]
   180e4:	add	lr, lr, ip
   180e8:	mov	r2, ip
   180ec:	mov	r1, r9
   180f0:	str	r3, [sp, #84]	; 0x54
   180f4:	ldr	r0, [r5]
   180f8:	mov	r3, #0
   180fc:	str	ip, [sp, #32]
   18100:	str	r3, [sp, #64]	; 0x40
   18104:	str	r3, [sp, #80]	; 0x50
   18108:	str	r3, [sp, #88]	; 0x58
   1810c:	str	lr, [sp, #48]	; 0x30
   18110:	bl	11910 <wmove@plt>
   18114:	ldr	r3, [pc, #588]	; 18368 <__assert_fail@plt+0x6548>
   18118:	ldr	lr, [sp, #48]	; 0x30
   1811c:	add	r8, r6, #2
   18120:	sub	r2, lr, #1
   18124:	ldr	r1, [r3, #432]	; 0x1b0
   18128:	ldr	r0, [r5]
   1812c:	str	r2, [sp, #40]	; 0x28
   18130:	bl	11d90 <waddch@plt>
   18134:	mov	r2, r8
   18138:	mov	r1, #0
   1813c:	ldr	r0, [r5]
   18140:	str	r8, [sp, #52]	; 0x34
   18144:	bl	11d54 <whline@plt>
   18148:	ldr	r2, [sp, #40]	; 0x28
   1814c:	mov	r1, r9
   18150:	ldr	r0, [r5]
   18154:	bl	11910 <wmove@plt>
   18158:	ldr	r3, [pc, #520]	; 18368 <__assert_fail@plt+0x6548>
   1815c:	add	r8, r9, #1
   18160:	ldr	r0, [r5]
   18164:	ldr	r1, [r3, #428]	; 0x1ac
   18168:	bl	11d90 <waddch@plt>
   1816c:	ldr	r2, [sp, #40]	; 0x28
   18170:	mov	r1, r8
   18174:	ldr	r0, [r5]
   18178:	bl	11910 <wmove@plt>
   1817c:	mov	r2, r7
   18180:	mov	r1, #0
   18184:	ldr	r0, [r5]
   18188:	bl	11b74 <wvline@plt>
   1818c:	ldr	r1, [sp, #36]	; 0x24
   18190:	ldr	r7, [pc, #464]	; 18368 <__assert_fail@plt+0x6548>
   18194:	add	r9, r1, r9
   18198:	sub	r9, r9, #1
   1819c:	ldr	r2, [sp, #32]
   181a0:	mov	r1, r9
   181a4:	ldr	r0, [r5]
   181a8:	bl	11910 <wmove@plt>
   181ac:	ldr	r1, [r7, #436]	; 0x1b4
   181b0:	ldr	r0, [r5]
   181b4:	bl	11d90 <waddch@plt>
   181b8:	ldr	r3, [sp, #52]	; 0x34
   181bc:	mov	r1, #0
   181c0:	mov	r2, r3
   181c4:	ldr	r0, [r5]
   181c8:	bl	11d54 <whline@plt>
   181cc:	ldr	r2, [sp, #40]	; 0x28
   181d0:	mov	r1, r9
   181d4:	ldr	r0, [r5]
   181d8:	bl	11910 <wmove@plt>
   181dc:	ldr	r1, [r7, #424]	; 0x1a8
   181e0:	ldr	r0, [r5]
   181e4:	bl	11d90 <waddch@plt>
   181e8:	cmp	fp, #0
   181ec:	beq	183c4 <__assert_fail@plt+0x65a4>
   181f0:	ldr	r2, [sp, #28]
   181f4:	mov	r3, #0
   181f8:	str	r3, [sp, #60]	; 0x3c
   181fc:	sub	r7, r2, #4
   18200:	add	r3, sp, #60	; 0x3c
   18204:	add	r2, sp, #56	; 0x38
   18208:	ldr	r0, [r5]
   1820c:	ldr	r9, [sp, #32]
   18210:	str	fp, [sp, #56]	; 0x38
   18214:	str	fp, [sp, #28]
   18218:	str	sl, [sp, #36]	; 0x24
   1821c:	mov	fp, r3
   18220:	mov	sl, r2
   18224:	str	r4, [sp, #40]	; 0x28
   18228:	mov	r2, r9
   1822c:	mov	r1, r8
   18230:	bl	11910 <wmove@plt>
   18234:	ldr	r3, [pc, #300]	; 18368 <__assert_fail@plt+0x6548>
   18238:	ldr	r0, [r5]
   1823c:	ldr	r1, [r3, #480]	; 0x1e0
   18240:	bl	11d90 <waddch@plt>
   18244:	mov	r1, #32
   18248:	ldr	r0, [r5]
   1824c:	bl	11d90 <waddch@plt>
   18250:	ldr	r1, [sp, #60]	; 0x3c
   18254:	ldr	r3, [sp, #56]	; 0x38
   18258:	mov	r2, fp
   1825c:	add	r3, r3, r1, lsl #2
   18260:	mov	r0, r7
   18264:	mov	r1, sl
   18268:	str	r3, [sp, #56]	; 0x38
   1826c:	bl	16fb0 <__assert_fail@plt+0x5190>
   18270:	ldr	r2, [sp, #60]	; 0x3c
   18274:	cmp	r2, #1
   18278:	ble	182a8 <__assert_fail@plt+0x6488>
   1827c:	mov	r4, #0
   18280:	ldr	r1, [sp, #56]	; 0x38
   18284:	mov	r2, #1
   18288:	add	r1, r1, r4, lsl #2
   1828c:	ldr	r0, [r5]
   18290:	bl	11a78 <waddnwstr@plt>
   18294:	ldr	r2, [sp, #60]	; 0x3c
   18298:	add	r4, r4, #1
   1829c:	sub	r3, r2, #1
   182a0:	cmp	r4, r3
   182a4:	blt	18280 <__assert_fail@plt+0x6460>
   182a8:	ldr	r3, [sp, #56]	; 0x38
   182ac:	sub	r1, r2, #-1073741823	; 0xc0000001
   182b0:	ldr	r0, [r5]
   182b4:	ldr	ip, [r3, r1, lsl #2]
   182b8:	add	r1, r3, r1, lsl #2
   182bc:	cmp	ip, #0
   182c0:	cmpne	ip, #10
   182c4:	bne	182e4 <__assert_fail@plt+0x64c4>
   182c8:	sub	r2, r2, #-1073741823	; 0xc0000001
   182cc:	add	r1, r8, #1
   182d0:	ldr	r3, [r3, r2, lsl #2]
   182d4:	cmp	r3, #0
   182d8:	beq	1839c <__assert_fail@plt+0x657c>
   182dc:	mov	r8, r1
   182e0:	b	18228 <__assert_fail@plt+0x6408>
   182e4:	mov	r2, #1
   182e8:	bl	11a78 <waddnwstr@plt>
   182ec:	ldr	r3, [sp, #56]	; 0x38
   182f0:	ldr	r0, [r5]
   182f4:	ldr	r2, [sp, #60]	; 0x3c
   182f8:	b	182c8 <__assert_fail@plt+0x64a8>
   182fc:	andeq	sl, r2, r0, lsl #26
   18300:	andeq	fp, r2, r8, asr #6
   18304:	strdeq	r9, [r1], -ip
   18308:	andeq	sl, r1, r4, ror r5
   1830c:	andeq	fp, r2, ip, ror #5
   18310:	muleq	r1, r4, r5
   18314:	muleq	r1, ip, r5
   18318:	strdeq	fp, [r2], -r0
   1831c:	strdeq	fp, [r2], -r4
   18320:	andeq	r6, r1, r0, lsl #29
   18324:	andeq	sl, r1, r8, ror #12
   18328:	andeq	sl, r1, r8, lsl r5
   1832c:	streq	r0, [r0, #-301]	; 0xfffffed3
   18330:	streq	r0, [r0, #-303]	; 0xfffffed1
   18334:	andeq	sl, r1, r8, ror #11
   18338:	andeq	r0, r0, r5, lsl #2
   1833c:	andeq	r0, r0, r3, lsl #2
   18340:	andeq	sl, r1, r0, ror #10
   18344:	andeq	sl, r1, ip, lsl #11
   18348:	andeq	r0, r0, r2, lsl #2
   1834c:	andeq	r0, r0, r7, lsl #2
   18350:	streq	r0, [r0, #-62]	; 0xffffffc2
   18354:	andeq	sl, r1, ip, asr #10
   18358:	ldrdeq	sl, [r1], -r0
   1835c:	andeq	fp, r2, r0, ror #1
   18360:	eoreq	r0, r0, r0, lsl #4
   18364:	eoreq	r0, r0, r0, lsl #2
   18368:	andeq	fp, r2, r4, ror #1
   1836c:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   18370:	andeq	sl, r1, r8, ror r5
   18374:	andeq	sl, r1, r4, asr r5
   18378:	streq	r0, [r0, #-166]	; 0xffffff5a
   1837c:	andeq	sl, r1, r4, lsr #11
   18380:			; <UNDEFINED> instruction: 0x0001a5b8
   18384:	andeq	r0, r0, r3, asr #5
   18388:	andeq	sl, r1, ip, lsl r6
   1838c:	andeq	r0, r0, r3, lsl r3
   18390:	andeq	sl, r1, r0, lsr r6
   18394:	strdeq	sl, [r1], -r8
   18398:	andeq	sl, r1, ip, lsr r5
   1839c:	ldr	r2, [sp, #32]
   183a0:	ldr	fp, [sp, #28]
   183a4:	ldr	sl, [sp, #36]	; 0x24
   183a8:	ldr	r4, [sp, #40]	; 0x28
   183ac:	bl	11910 <wmove@plt>
   183b0:	ldr	r3, [pc, #-80]	; 18368 <__assert_fail@plt+0x6548>
   183b4:	ldr	r0, [r5]
   183b8:	add	r8, r8, #2
   183bc:	ldr	r1, [r3, #480]	; 0x1e0
   183c0:	bl	11d90 <waddch@plt>
   183c4:	ldr	r3, [r4, #28]
   183c8:	cmp	r3, #0
   183cc:	beq	1868c <__assert_fail@plt+0x686c>
   183d0:	cmp	sl, #0
   183d4:	beq	18584 <__assert_fail@plt+0x6764>
   183d8:	ldr	r3, [sl]
   183dc:	cmp	r3, #0
   183e0:	beq	18560 <__assert_fail@plt+0x6740>
   183e4:	ldr	r9, [sp, #32]
   183e8:	mov	r7, sl
   183ec:	str	sl, [sp, #28]
   183f0:	mov	r2, r9
   183f4:	mov	r1, r8
   183f8:	ldr	r0, [r5]
   183fc:	bl	11910 <wmove@plt>
   18400:	ldr	r3, [pc, #-160]	; 18368 <__assert_fail@plt+0x6548>
   18404:	ldr	r0, [r5]
   18408:	ldr	r1, [r3, #480]	; 0x1e0
   1840c:	bl	11d90 <waddch@plt>
   18410:	mov	r1, #32
   18414:	ldr	r0, [r5]
   18418:	bl	11d90 <waddch@plt>
   1841c:	bl	119ac <has_colors@plt>
   18420:	cmp	r0, #0
   18424:	beq	18968 <__assert_fail@plt+0x6b48>
   18428:	ldr	r3, [pc, #-212]	; 1835c <__assert_fail@plt+0x653c>
   1842c:	ldr	r0, [r5]
   18430:	ldr	r3, [r3]
   18434:	cmp	r3, #1
   18438:	ble	1896c <__assert_fail@plt+0x6b4c>
   1843c:	ldr	r3, [r4, #160]	; 0xa0
   18440:	cmp	r3, #0
   18444:	beq	1896c <__assert_fail@plt+0x6b4c>
   18448:	ldr	r3, [r4, #152]	; 0x98
   1844c:	mov	r2, #0
   18450:	cmp	r3, #0
   18454:	ldr	r3, [pc, #-248]	; 18364 <__assert_fail@plt+0x6544>
   18458:	moveq	r1, #256	; 0x100
   1845c:	movne	r1, r3
   18460:	bl	11d3c <wattr_off@plt>
   18464:	ldr	r3, [r4, #164]	; 0xa4
   18468:	mov	r2, #0
   1846c:	cmp	r3, r2
   18470:	ldr	r3, [pc, #-280]	; 18360 <__assert_fail@plt+0x6540>
   18474:	moveq	r1, #512	; 0x200
   18478:	movne	r1, r3
   1847c:	ldr	r0, [r5]
   18480:	bl	11964 <wattr_on@plt>
   18484:	ldr	r3, [r7]
   18488:	cmp	r3, #10
   1848c:	cmpne	r3, #0
   18490:	movne	sl, #0
   18494:	bne	184ac <__assert_fail@plt+0x668c>
   18498:	b	184d8 <__assert_fail@plt+0x66b8>
   1849c:	ldr	r3, [r7, #4]!
   184a0:	cmp	r3, #0
   184a4:	cmpne	r3, #10
   184a8:	beq	184d8 <__assert_fail@plt+0x66b8>
   184ac:	cmp	r6, sl
   184b0:	ble	1849c <__assert_fail@plt+0x667c>
   184b4:	mov	r2, #1
   184b8:	mov	r1, r7
   184bc:	ldr	r0, [r5]
   184c0:	add	sl, sl, r2
   184c4:	bl	11a78 <waddnwstr@plt>
   184c8:	ldr	r3, [r7, #4]!
   184cc:	cmp	r3, #0
   184d0:	cmpne	r3, #10
   184d4:	bne	184ac <__assert_fail@plt+0x668c>
   184d8:	bl	119ac <has_colors@plt>
   184dc:	cmp	r0, #0
   184e0:	beq	18958 <__assert_fail@plt+0x6b38>
   184e4:	ldr	r3, [pc, #-400]	; 1835c <__assert_fail@plt+0x653c>
   184e8:	ldr	r0, [r5]
   184ec:	ldr	r3, [r3]
   184f0:	cmp	r3, #1
   184f4:	ble	1895c <__assert_fail@plt+0x6b3c>
   184f8:	ldr	r3, [r4, #160]	; 0xa0
   184fc:	cmp	r3, #0
   18500:	beq	1895c <__assert_fail@plt+0x6b3c>
   18504:	ldr	r3, [r4, #164]	; 0xa4
   18508:	mov	r2, #0
   1850c:	cmp	r3, #0
   18510:	ldr	r3, [pc, #-440]	; 18360 <__assert_fail@plt+0x6540>
   18514:	moveq	r1, #512	; 0x200
   18518:	movne	r1, r3
   1851c:	bl	11d3c <wattr_off@plt>
   18520:	ldr	r3, [r4, #152]	; 0x98
   18524:	mov	r2, #0
   18528:	cmp	r3, r2
   1852c:	ldr	r3, [pc, #-464]	; 18364 <__assert_fail@plt+0x6544>
   18530:	moveq	r1, #256	; 0x100
   18534:	movne	r1, r3
   18538:	ldr	r0, [r5]
   1853c:	bl	11964 <wattr_on@plt>
   18540:	ldr	r3, [r7]
   18544:	add	r8, r8, #1
   18548:	cmp	r3, #10
   1854c:	ldreq	r3, [r7, #4]
   18550:	addeq	r7, r7, #4
   18554:	cmp	r3, #0
   18558:	bne	183f0 <__assert_fail@plt+0x65d0>
   1855c:	ldr	sl, [sp, #28]
   18560:	mov	r1, r8
   18564:	ldr	r2, [sp, #32]
   18568:	ldr	r0, [r5]
   1856c:	bl	11910 <wmove@plt>
   18570:	ldr	r3, [pc, #-528]	; 18368 <__assert_fail@plt+0x6548>
   18574:	ldr	r0, [r5]
   18578:	add	r8, r8, #1
   1857c:	ldr	r1, [r3, #480]	; 0x1e0
   18580:	bl	11d90 <waddch@plt>
   18584:	ldr	r7, [sp, #32]
   18588:	mov	r1, r8
   1858c:	mov	r2, r7
   18590:	ldr	r0, [r5]
   18594:	bl	11910 <wmove@plt>
   18598:	ldr	r3, [pc, #-568]	; 18368 <__assert_fail@plt+0x6548>
   1859c:	ldr	r0, [r5]
   185a0:	ldr	r1, [r3, #480]	; 0x1e0
   185a4:	bl	11d90 <waddch@plt>
   185a8:	mov	r1, #32
   185ac:	ldr	r0, [r5]
   185b0:	bl	11d90 <waddch@plt>
   185b4:	ldr	r0, [sp, #20]
   185b8:	mov	r3, r7
   185bc:	cmp	r0, #0
   185c0:	add	r7, r7, #2
   185c4:	str	r8, [sp, #68]	; 0x44
   185c8:	str	r6, [sp, #76]	; 0x4c
   185cc:	str	r7, [sp, #72]	; 0x48
   185d0:	moveq	r3, r6
   185d4:	beq	18640 <__assert_fail@plt+0x6820>
   185d8:	bl	11d18 <wcslen@plt>
   185dc:	sub	r3, r6, #39	; 0x27
   185e0:	cmp	r0, r3
   185e4:	addlt	r3, r0, #1
   185e8:	subge	r0, r6, #40	; 0x28
   185ec:	sublt	r2, r6, r3
   185f0:	movge	r2, #39	; 0x27
   185f4:	cmp	r0, #0
   185f8:	add	r7, r7, r3
   185fc:	str	r7, [sp, #72]	; 0x48
   18600:	str	r2, [sp, #76]	; 0x4c
   18604:	sub	r9, r0, #1
   18608:	ldrgt	r7, [sp, #20]
   1860c:	ble	18630 <__assert_fail@plt+0x6810>
   18610:	mov	r1, r7
   18614:	sub	r9, r9, #1
   18618:	mov	r2, #1
   1861c:	ldr	r0, [r5]
   18620:	bl	11a78 <waddnwstr@plt>
   18624:	cmn	r9, #1
   18628:	add	r7, r7, #4
   1862c:	bne	18610 <__assert_fail@plt+0x67f0>
   18630:	mov	r1, #32
   18634:	ldr	r0, [r5]
   18638:	bl	11d90 <waddch@plt>
   1863c:	ldr	r3, [sp, #76]	; 0x4c
   18640:	cmp	r3, #0
   18644:	movgt	r7, #0
   18648:	ble	18668 <__assert_fail@plt+0x6848>
   1864c:	mov	r1, #95	; 0x5f
   18650:	ldr	r0, [r5]
   18654:	bl	11d90 <waddch@plt>
   18658:	ldr	r3, [sp, #76]	; 0x4c
   1865c:	add	r7, r7, #1
   18660:	cmp	r7, r3
   18664:	blt	1864c <__assert_fail@plt+0x682c>
   18668:	add	r1, r8, #1
   1866c:	ldr	r2, [sp, #32]
   18670:	ldr	r0, [r5]
   18674:	bl	11910 <wmove@plt>
   18678:	ldr	r3, [pc, #-792]	; 18368 <__assert_fail@plt+0x6548>
   1867c:	ldr	r0, [r5]
   18680:	add	r8, r8, #2
   18684:	ldr	r1, [r3, #480]	; 0x1e0
   18688:	bl	11d90 <waddch@plt>
   1868c:	ldr	r2, [sp, #32]
   18690:	mov	r1, r8
   18694:	ldr	r0, [r5]
   18698:	bl	11910 <wmove@plt>
   1869c:	ldr	r3, [pc, #-828]	; 18368 <__assert_fail@plt+0x6548>
   186a0:	ldr	r0, [r5]
   186a4:	ldr	r1, [r3, #480]	; 0x1e0
   186a8:	bl	11d90 <waddch@plt>
   186ac:	ldr	r3, [sp, #112]	; 0x70
   186b0:	cmp	r3, #0
   186b4:	beq	18978 <__assert_fail@plt+0x6b58>
   186b8:	ldr	r0, [sp, #100]	; 0x64
   186bc:	ldr	r9, [r5]
   186c0:	str	r8, [sp, #92]	; 0x5c
   186c4:	bl	11bec <strlen@plt>
   186c8:	ldr	r7, [pc, #-868]	; 1836c <__assert_fail@plt+0x654c>
   186cc:	mov	r1, r8
   186d0:	smull	r3, r7, r7, r6
   186d4:	ldr	r3, [sp, #32]
   186d8:	sub	r7, r7, r6, asr #31
   186dc:	add	r3, r3, #2
   186e0:	sub	r2, r7, r0
   186e4:	mov	r0, r9
   186e8:	add	r3, r3, r2, lsr #1
   186ec:	mov	r2, r3
   186f0:	str	r3, [sp, #96]	; 0x60
   186f4:	bl	11910 <wmove@plt>
   186f8:	mvn	r2, #0
   186fc:	ldr	r1, [sp, #100]	; 0x64
   18700:	ldr	r0, [r5]
   18704:	bl	119c4 <waddnstr@plt>
   18708:	ldr	r3, [r4, #28]
   1870c:	cmp	r3, #0
   18710:	beq	18a34 <__assert_fail@plt+0x6c14>
   18714:	ldr	r0, [sp, #112]	; 0x70
   18718:	cmp	r0, #0
   1871c:	moveq	r6, r0
   18720:	beq	179cc <__assert_fail@plt+0x5bac>
   18724:	str	r8, [sp, #104]	; 0x68
   18728:	bl	11bec <strlen@plt>
   1872c:	ldr	r3, [sp, #48]	; 0x30
   18730:	mov	r1, r8
   18734:	sub	r3, r3, #2
   18738:	mov	r6, #0
   1873c:	add	r7, r7, r0
   18740:	ldr	r0, [r5]
   18744:	sub	r7, r3, r7, lsr #1
   18748:	mov	r2, r7
   1874c:	str	r7, [sp, #108]	; 0x6c
   18750:	bl	11910 <wmove@plt>
   18754:	mvn	r2, #0
   18758:	ldr	r1, [sp, #112]	; 0x70
   1875c:	ldr	r0, [r5]
   18760:	bl	119c4 <waddnstr@plt>
   18764:	b	179cc <__assert_fail@plt+0x5bac>
   18768:	mov	r6, fp
   1876c:	mov	r7, #1
   18770:	b	17858 <__assert_fail@plt+0x5a38>
   18774:	bl	11c40 <__errno_location@plt>
   18778:	mov	r5, r0
   1877c:	ldr	r0, [sp, #16]
   18780:	ldr	r6, [r5]
   18784:	bl	11cdc <fclose@plt>
   18788:	str	r6, [r5]
   1878c:	bl	11c10 <gpg_err_code_from_syserror@plt>
   18790:	ldr	r1, [sp, #8]
   18794:	ldr	r2, [pc, #-1068]	; 18370 <__assert_fail@plt+0x6550>
   18798:	str	r2, [r4, #112]	; 0x70
   1879c:	cmp	r0, #0
   187a0:	uxthne	r3, r0
   187a4:	orrne	r3, r3, #83886080	; 0x5000000
   187a8:	ldreq	r3, [sp, #4]
   187ac:	adds	r6, r1, #0
   187b0:	movne	r6, #1
   187b4:	rsb	r6, r6, #0
   187b8:	str	r3, [r4, #108]	; 0x6c
   187bc:	b	17ae0 <__assert_fail@plt+0x5cc0>
   187c0:	ldr	r3, [sp, #88]	; 0x58
   187c4:	ldr	r0, [r5]
   187c8:	cmp	r3, #0
   187cc:	ble	18b24 <__assert_fail@plt+0x6d04>
   187d0:	sub	r3, r3, #1
   187d4:	cmp	r3, #0
   187d8:	sub	r6, sl, #1
   187dc:	clz	r2, r6
   187e0:	lsr	r2, r2, #5
   187e4:	moveq	r2, #0
   187e8:	cmp	r2, #0
   187ec:	str	r3, [sp, #88]	; 0x58
   187f0:	str	r6, [sp, #80]	; 0x50
   187f4:	beq	17cb4 <__assert_fail@plt+0x5e94>
   187f8:	ldr	r6, [sp, #76]	; 0x4c
   187fc:	sub	r6, r6, #5
   18800:	cmp	r3, r6
   18804:	str	r6, [sp, #80]	; 0x50
   18808:	bge	17cb4 <__assert_fail@plt+0x5e94>
   1880c:	ldr	r2, [sp, #72]	; 0x48
   18810:	cmp	r3, #1
   18814:	str	r3, [sp, #80]	; 0x50
   18818:	ldr	r1, [sp, #68]	; 0x44
   1881c:	addeq	r2, r2, #1
   18820:	beq	17ccc <__assert_fail@plt+0x5eac>
   18824:	add	r2, sl, r2
   18828:	bl	11910 <wmove@plt>
   1882c:	ldr	r2, [sp, #80]	; 0x50
   18830:	cmp	sl, r2
   18834:	bge	18854 <__assert_fail@plt+0x6a34>
   18838:	mov	r1, #42	; 0x2a
   1883c:	ldr	r0, [r5]
   18840:	bl	11d90 <waddch@plt>
   18844:	ldr	r2, [sp, #80]	; 0x50
   18848:	add	sl, sl, #1
   1884c:	cmp	r2, sl
   18850:	bgt	18838 <__assert_fail@plt+0x6a18>
   18854:	ldr	r6, [sp, #72]	; 0x48
   18858:	ldr	r0, [r5]
   1885c:	add	r2, r2, r6
   18860:	ldr	r1, [sp, #68]	; 0x44
   18864:	b	17ccc <__assert_fail@plt+0x5eac>
   18868:	ldr	r2, [pc, #-1272]	; 18378 <__assert_fail@plt+0x6558>
   1886c:	ldr	r3, [pc, #-1272]	; 1837c <__assert_fail@plt+0x655c>
   18870:	strd	r2, [r4, #108]	; 0x6c
   18874:	bl	11de4 <endwin@plt>
   18878:	ldr	r3, [sp, #24]
   1887c:	cmp	r3, #0
   18880:	beq	1888c <__assert_fail@plt+0x6a6c>
   18884:	mov	r0, r3
   18888:	bl	11cb8 <delscreen@plt>
   1888c:	ldr	r5, [sp, #12]
   18890:	cmp	r5, #0
   18894:	beq	188ac <__assert_fail@plt+0x6a8c>
   18898:	mov	r1, r5
   1889c:	mov	r0, #0
   188a0:	bl	11d00 <setlocale@plt>
   188a4:	mov	r0, r5
   188a8:	bl	119b8 <free@plt>
   188ac:	ldr	r3, [sp, #16]
   188b0:	cmp	r3, #0
   188b4:	beq	188c0 <__assert_fail@plt+0x6aa0>
   188b8:	mov	r0, r3
   188bc:	bl	11cdc <fclose@plt>
   188c0:	ldr	r3, [sp, #4]
   188c4:	cmp	r3, #0
   188c8:	mvneq	r6, #1
   188cc:	beq	17ae0 <__assert_fail@plt+0x5cc0>
   188d0:	mov	r0, r3
   188d4:	bl	11cdc <fclose@plt>
   188d8:	mvn	r6, #1
   188dc:	b	17ae0 <__assert_fail@plt+0x5cc0>
   188e0:	ldr	r2, [pc, #-1392]	; 18378 <__assert_fail@plt+0x6558>
   188e4:	ldr	r3, [pc, #-1392]	; 1837c <__assert_fail@plt+0x655c>
   188e8:	cmp	fp, #0
   188ec:	strd	r2, [r4, #108]	; 0x6c
   188f0:	beq	18874 <__assert_fail@plt+0x6a54>
   188f4:	mov	r0, fp
   188f8:	bl	119b8 <free@plt>
   188fc:	b	18874 <__assert_fail@plt+0x6a54>
   18900:	add	r6, r6, r0
   18904:	cmp	r3, r6
   18908:	str	r6, [sp, #80]	; 0x50
   1890c:	movlt	r6, r3
   18910:	strlt	r3, [sp, #80]	; 0x50
   18914:	b	17c7c <__assert_fail@plt+0x5e5c>
   18918:	add	r6, r6, r0
   1891c:	cmp	r3, r6
   18920:	str	r6, [sp, #80]	; 0x50
   18924:	strlt	r3, [sp, #80]	; 0x50
   18928:	movlt	r6, r3
   1892c:	b	17c48 <__assert_fail@plt+0x5e28>
   18930:	cmp	r7, #0
   18934:	bne	17668 <__assert_fail@plt+0x5848>
   18938:	ldr	r0, [r4, #56]	; 0x38
   1893c:	ldr	r1, [pc, #-1488]	; 18374 <__assert_fail@plt+0x6554>
   18940:	b	17fb4 <__assert_fail@plt+0x6194>
   18944:	ldr	r2, [pc, #-1492]	; 18378 <__assert_fail@plt+0x6558>
   18948:	ldr	r3, [pc, #-1492]	; 1837c <__assert_fail@plt+0x655c>
   1894c:	mov	r6, #1
   18950:	strd	r2, [r4, #108]	; 0x6c
   18954:	b	179cc <__assert_fail@plt+0x5bac>
   18958:	ldr	r0, [r5]
   1895c:	mov	r1, #0
   18960:	bl	11e14 <wattrset@plt>
   18964:	b	18540 <__assert_fail@plt+0x6720>
   18968:	ldr	r0, [r5]
   1896c:	mov	r1, #65536	; 0x10000
   18970:	bl	11e14 <wattrset@plt>
   18974:	b	18484 <__assert_fail@plt+0x6664>
   18978:	ldr	r7, [sp, #124]	; 0x7c
   1897c:	ldr	r0, [sp, #100]	; 0x64
   18980:	cmp	r7, #0
   18984:	ldr	r9, [r5]
   18988:	bne	186c0 <__assert_fail@plt+0x68a0>
   1898c:	str	r8, [sp, #92]	; 0x5c
   18990:	bl	11bec <strlen@plt>
   18994:	ldr	r3, [sp, #44]	; 0x2c
   18998:	ldr	r2, [sp, #32]
   1899c:	mov	r1, r8
   189a0:	add	r3, r3, r3, lsr #31
   189a4:	mov	r6, r7
   189a8:	add	r3, r2, r3, asr #1
   189ac:	sub	r3, r3, r0, lsr #1
   189b0:	mov	r2, r3
   189b4:	mov	r0, r9
   189b8:	str	r3, [sp, #96]	; 0x60
   189bc:	bl	11910 <wmove@plt>
   189c0:	mvn	r2, #0
   189c4:	ldr	r1, [sp, #100]	; 0x64
   189c8:	ldr	r0, [r5]
   189cc:	bl	119c4 <waddnstr@plt>
   189d0:	b	179cc <__assert_fail@plt+0x5bac>
   189d4:	bl	11910 <wmove@plt>
   189d8:	ldr	r2, [sp, #80]	; 0x50
   189dc:	cmp	sl, r2
   189e0:	ble	18854 <__assert_fail@plt+0x6a34>
   189e4:	mov	r1, #95	; 0x5f
   189e8:	ldr	r0, [r5]
   189ec:	bl	11d90 <waddch@plt>
   189f0:	ldr	r2, [sp, #80]	; 0x50
   189f4:	sub	sl, sl, #1
   189f8:	cmp	r2, sl
   189fc:	blt	189e4 <__assert_fail@plt+0x6bc4>
   18a00:	b	18854 <__assert_fail@plt+0x6a34>
   18a04:	bl	11c10 <gpg_err_code_from_syserror@plt>
   18a08:	ldr	r3, [pc, #-1680]	; 18380 <__assert_fail@plt+0x6560>
   18a0c:	mov	r6, #1
   18a10:	str	r3, [r4, #112]	; 0x70
   18a14:	cmp	r0, #0
   18a18:	uxthne	r0, r0
   18a1c:	orrne	r0, r0, #83886080	; 0x5000000
   18a20:	str	r0, [r4, #108]	; 0x6c
   18a24:	b	179cc <__assert_fail@plt+0x5bac>
   18a28:	mov	r3, ip
   18a2c:	add	ip, ip, #1
   18a30:	b	17fa0 <__assert_fail@plt+0x6180>
   18a34:	ldr	r0, [sp, #124]	; 0x7c
   18a38:	cmp	r0, #0
   18a3c:	beq	18714 <__assert_fail@plt+0x68f4>
   18a40:	str	r8, [sp, #116]	; 0x74
   18a44:	bl	11bec <strlen@plt>
   18a48:	ldr	r3, [sp, #44]	; 0x2c
   18a4c:	ldr	r2, [sp, #32]
   18a50:	mov	r1, r8
   18a54:	add	r3, r3, r3, lsr #31
   18a58:	add	r3, r2, r3, asr #1
   18a5c:	sub	r3, r3, r0, lsr #1
   18a60:	mov	r2, r3
   18a64:	ldr	r0, [r5]
   18a68:	str	r3, [sp, #120]	; 0x78
   18a6c:	bl	11910 <wmove@plt>
   18a70:	mvn	r2, #0
   18a74:	ldr	r1, [sp, #124]	; 0x7c
   18a78:	ldr	r0, [r5]
   18a7c:	bl	119c4 <waddnstr@plt>
   18a80:	b	18714 <__assert_fail@plt+0x68f4>
   18a84:	bl	11c10 <gpg_err_code_from_syserror@plt>
   18a88:	ldr	r3, [pc, #-1808]	; 18380 <__assert_fail@plt+0x6560>
   18a8c:	str	r3, [r4, #112]	; 0x70
   18a90:	cmp	r0, #0
   18a94:	uxthne	r0, r0
   18a98:	orrne	r6, r0, #83886080	; 0x5000000
   18a9c:	str	r6, [r4, #108]	; 0x6c
   18aa0:	mov	r6, #1
   18aa4:	b	179cc <__assert_fail@plt+0x5bac>
   18aa8:	mov	lr, #2
   18aac:	mov	r3, #1
   18ab0:	b	17620 <__assert_fail@plt+0x5800>
   18ab4:	sub	r3, fp, #1
   18ab8:	cmp	r3, #254	; 0xfe
   18abc:	bhi	18ad0 <__assert_fail@plt+0x6cb0>
   18ac0:	ldr	r1, [sp, #88]	; 0x58
   18ac4:	ldr	r3, [sp, #84]	; 0x54
   18ac8:	cmp	r1, r3
   18acc:	blt	18b3c <__assert_fail@plt+0x6d1c>
   18ad0:	ldr	r2, [sp, #72]	; 0x48
   18ad4:	ldr	r0, [r5]
   18ad8:	add	r2, sl, r2
   18adc:	ldr	r1, [sp, #68]	; 0x44
   18ae0:	b	17ccc <__assert_fail@plt+0x5eac>
   18ae4:	ldr	r3, [sp, #88]	; 0x58
   18ae8:	ldr	r0, [r5]
   18aec:	cmp	r3, #0
   18af0:	ldr	r1, [sp, #68]	; 0x44
   18af4:	ldr	r2, [sp, #72]	; 0x48
   18af8:	strgt	r6, [sp, #88]	; 0x58
   18afc:	strgt	r6, [sp, #80]	; 0x50
   18b00:	bgt	17cbc <__assert_fail@plt+0x5e9c>
   18b04:	add	r2, sl, r2
   18b08:	b	17ccc <__assert_fail@plt+0x5eac>
   18b0c:	mov	r3, r1
   18b10:	add	r2, r1, #1
   18b14:	b	17f54 <__assert_fail@plt+0x6134>
   18b18:	mov	ip, #2
   18b1c:	mov	r3, #1
   18b20:	b	17fa0 <__assert_fail@plt+0x6180>
   18b24:	ldr	r2, [sp, #72]	; 0x48
   18b28:	ldr	r1, [sp, #68]	; 0x44
   18b2c:	b	18b04 <__assert_fail@plt+0x6ce4>
   18b30:	mov	r2, #2
   18b34:	mov	r3, #1
   18b38:	b	17f54 <__assert_fail@plt+0x6134>
   18b3c:	add	r1, r1, #2
   18b40:	bl	13f50 <__assert_fail@plt+0x2130>
   18b44:	cmp	r0, #0
   18b48:	beq	18bd0 <__assert_fail@plt+0x6db0>
   18b4c:	ldr	r2, [sp, #128]	; 0x80
   18b50:	ldr	r3, [sp, #88]	; 0x58
   18b54:	ldr	r2, [r2, #28]
   18b58:	strb	fp, [r2, r3]
   18b5c:	ldr	r6, [sp, #80]	; 0x50
   18b60:	ldr	r2, [sp, #76]	; 0x4c
   18b64:	ldr	r3, [sp, #88]	; 0x58
   18b68:	add	r6, r6, #1
   18b6c:	cmp	r6, r2
   18b70:	add	r2, r3, #1
   18b74:	str	r6, [sp, #80]	; 0x50
   18b78:	str	r2, [sp, #88]	; 0x58
   18b7c:	bne	17cb0 <__assert_fail@plt+0x5e90>
   18b80:	ldr	r1, [sp, #84]	; 0x54
   18b84:	cmp	r2, r1
   18b88:	bge	17cb0 <__assert_fail@plt+0x5e90>
   18b8c:	sub	r3, r1, r3
   18b90:	sub	r6, r6, r3
   18b94:	cmp	r6, #5
   18b98:	mov	r3, #5
   18b9c:	str	r3, [sp, #80]	; 0x50
   18ba0:	ldr	r0, [r5]
   18ba4:	ldr	r1, [sp, #68]	; 0x44
   18ba8:	ldr	r2, [sp, #72]	; 0x48
   18bac:	strgt	r6, [sp, #80]	; 0x50
   18bb0:	movle	r6, r3
   18bb4:	b	17cbc <__assert_fail@plt+0x5e9c>
   18bb8:	bl	11a48 <__stack_chk_fail@plt>
   18bbc:	ldr	r3, [pc, #-2092]	; 18398 <__assert_fail@plt+0x6578>
   18bc0:	ldr	r2, [pc, #-2116]	; 18384 <__assert_fail@plt+0x6564>
   18bc4:	ldr	r1, [pc, #-2104]	; 18394 <__assert_fail@plt+0x6574>
   18bc8:	ldr	r0, [pc, #-2120]	; 18388 <__assert_fail@plt+0x6568>
   18bcc:	bl	11e20 <__assert_fail@plt>
   18bd0:	ldr	r3, [pc, #-2112]	; 18398 <__assert_fail@plt+0x6578>
   18bd4:	ldr	r2, [pc, #-2128]	; 1838c <__assert_fail@plt+0x656c>
   18bd8:	ldr	r1, [pc, #-2124]	; 18394 <__assert_fail@plt+0x6574>
   18bdc:	ldr	r0, [pc, #-2132]	; 18390 <__assert_fail@plt+0x6570>
   18be0:	bl	11e20 <__assert_fail@plt>
   18be4:	push	{r0, r1, r2, r3}
   18be8:	push	{r4, lr}
   18bec:	sub	sp, sp, #8
   18bf0:	ldr	r4, [pc, #72]	; 18c40 <__assert_fail@plt+0x6e20>
   18bf4:	ldr	r3, [pc, #72]	; 18c44 <__assert_fail@plt+0x6e24>
   18bf8:	add	ip, sp, #20
   18bfc:	ldr	r1, [r4]
   18c00:	ldr	r0, [r3]
   18c04:	ldr	r2, [sp, #16]
   18c08:	mov	r3, ip
   18c0c:	str	r1, [sp, #4]
   18c10:	mov	r1, #1
   18c14:	str	ip, [sp]
   18c18:	bl	11b5c <__vfprintf_chk@plt>
   18c1c:	ldr	r2, [sp, #4]
   18c20:	ldr	r3, [r4]
   18c24:	cmp	r2, r3
   18c28:	bne	18c3c <__assert_fail@plt+0x6e1c>
   18c2c:	add	sp, sp, #8
   18c30:	pop	{r4, lr}
   18c34:	add	sp, sp, #16
   18c38:	bx	lr
   18c3c:	bl	11a48 <__stack_chk_fail@plt>
   18c40:	andeq	sl, r2, r0, lsl #26
   18c44:	andeq	fp, r2, r8, ror #5
   18c48:	push	{r0, r1, r2, r3}
   18c4c:	mov	r1, #1
   18c50:	ldr	r2, [pc, #48]	; 18c88 <__assert_fail@plt+0x6e68>
   18c54:	ldr	r3, [pc, #48]	; 18c8c <__assert_fail@plt+0x6e6c>
   18c58:	push	{lr}		; (str lr, [sp, #-4]!)
   18c5c:	sub	sp, sp, #12
   18c60:	add	ip, sp, #20
   18c64:	ldr	lr, [r2]
   18c68:	ldr	r0, [r3]
   18c6c:	ldr	r2, [sp, #16]
   18c70:	mov	r3, ip
   18c74:	str	lr, [sp, #4]
   18c78:	str	ip, [sp]
   18c7c:	bl	11b5c <__vfprintf_chk@plt>
   18c80:	mov	r0, #1
   18c84:	bl	11ba4 <exit@plt>
   18c88:	andeq	sl, r2, r0, lsl #26
   18c8c:	andeq	fp, r2, r8, ror #5
   18c90:	ldr	r2, [pc, #76]	; 18ce4 <__assert_fail@plt+0x6ec4>
   18c94:	and	r1, r0, #2
   18c98:	and	r0, r0, #1
   18c9c:	ldr	r3, [r2]
   18ca0:	str	r0, [r2, #4]
   18ca4:	adds	r3, r3, #0
   18ca8:	movne	r3, #1
   18cac:	cmp	r1, #0
   18cb0:	movne	r3, #0
   18cb4:	cmp	r3, #0
   18cb8:	str	r1, [r2]
   18cbc:	bxeq	lr
   18cc0:	ldr	r3, [r2, #8]
   18cc4:	cmp	r3, #0
   18cc8:	bxeq	lr
   18ccc:	cmp	r0, #0
   18cd0:	mov	r3, #0
   18cd4:	str	r3, [r2, #8]
   18cd8:	bxne	lr
   18cdc:	ldr	r0, [pc, #4]	; 18ce8 <__assert_fail@plt+0x6ec8>
   18ce0:	b	18be4 <__assert_fail@plt+0x6dc4>
   18ce4:	andeq	fp, r2, r4, asr r3
   18ce8:	andeq	sl, r1, r8, asr #12
   18cec:	ldr	r3, [pc, #24]	; 18d0c <__assert_fail@plt+0x6eec>
   18cf0:	ldr	r0, [r3, #4]
   18cf4:	ldr	r3, [r3]
   18cf8:	adds	r0, r0, #0
   18cfc:	movne	r0, #1
   18d00:	cmp	r3, #0
   18d04:	orrne	r0, r0, #2
   18d08:	bx	lr
   18d0c:	andeq	fp, r2, r4, asr r3
   18d10:	push	{r4, r5, r6, r7, lr}
   18d14:	subs	r4, r0, #0
   18d18:	sub	sp, sp, #12
   18d1c:	beq	18e0c <__assert_fail@plt+0x6fec>
   18d20:	ldr	r5, [pc, #556]	; 18f54 <__assert_fail@plt+0x7134>
   18d24:	ldr	r3, [r5, #16]
   18d28:	cmp	r3, #0
   18d2c:	bne	18dfc <__assert_fail@plt+0x6fdc>
   18d30:	ldr	r0, [r5, #12]
   18d34:	cmp	r4, #16384	; 0x4000
   18d38:	movcc	r4, #16384	; 0x4000
   18d3c:	cmp	r0, #0
   18d40:	str	r4, [r5, #20]
   18d44:	bne	18f2c <__assert_fail@plt+0x710c>
   18d48:	add	r4, r4, #4080	; 0xff0
   18d4c:	add	r4, r4, #15
   18d50:	bic	r4, r4, #4080	; 0xff0
   18d54:	bic	r4, r4, #15
   18d58:	mvn	r3, #0
   18d5c:	str	r3, [sp]
   18d60:	str	r0, [sp, #4]
   18d64:	mov	r3, #34	; 0x22
   18d68:	mov	r1, r4
   18d6c:	mov	r2, #3
   18d70:	str	r4, [r5, #20]
   18d74:	bl	11bf8 <mmap@plt>
   18d78:	cmn	r0, #1
   18d7c:	movne	r3, #1
   18d80:	str	r0, [r5, #24]
   18d84:	strne	r3, [r5, #28]
   18d88:	strne	r3, [r5, #16]
   18d8c:	beq	18ef4 <__assert_fail@plt+0x70d4>
   18d90:	ldr	r3, [r5, #16]
   18d94:	cmp	r3, #0
   18d98:	beq	18e58 <__assert_fail@plt+0x7038>
   18d9c:	ldr	r6, [r5, #24]
   18da0:	bl	119a0 <getuid@plt>
   18da4:	mov	r1, r4
   18da8:	mov	r7, r0
   18dac:	mov	r0, r6
   18db0:	bl	11cac <mlock@plt>
   18db4:	subs	r4, r0, #0
   18db8:	beq	18e84 <__assert_fail@plt+0x7064>
   18dbc:	bl	11c40 <__errno_location@plt>
   18dc0:	ldr	r3, [r0]
   18dc4:	cmp	r3, #0
   18dc8:	beq	18ed4 <__assert_fail@plt+0x70b4>
   18dcc:	cmp	r7, #0
   18dd0:	moveq	r2, r3
   18dd4:	bne	18f18 <__assert_fail@plt+0x70f8>
   18dd8:	cmp	r2, #1
   18ddc:	cmpne	r2, #11
   18de0:	bne	18f4c <__assert_fail@plt+0x712c>
   18de4:	mov	r3, #1
   18de8:	str	r3, [r5, #8]
   18dec:	mov	r3, #0
   18df0:	str	r3, [r5, #32]
   18df4:	add	sp, sp, #12
   18df8:	pop	{r4, r5, r6, r7, pc}
   18dfc:	ldr	r0, [pc, #340]	; 18f58 <__assert_fail@plt+0x7138>
   18e00:	add	sp, sp, #12
   18e04:	pop	{r4, r5, r6, r7, lr}
   18e08:	b	18be4 <__assert_fail@plt+0x6dc4>
   18e0c:	ldr	r3, [pc, #320]	; 18f54 <__assert_fail@plt+0x7134>
   18e10:	mov	r2, #1
   18e14:	str	r2, [r3, #12]
   18e18:	bl	119a0 <getuid@plt>
   18e1c:	mov	r4, r0
   18e20:	bl	11a84 <geteuid@plt>
   18e24:	cmp	r0, r4
   18e28:	beq	18df4 <__assert_fail@plt+0x6fd4>
   18e2c:	mov	r0, r4
   18e30:	bl	11d48 <setuid@plt>
   18e34:	cmp	r0, #0
   18e38:	bne	18e50 <__assert_fail@plt+0x7030>
   18e3c:	bl	119a0 <getuid@plt>
   18e40:	mov	r4, r0
   18e44:	bl	11a84 <geteuid@plt>
   18e48:	cmp	r4, r0
   18e4c:	beq	18df4 <__assert_fail@plt+0x6fd4>
   18e50:	ldr	r0, [pc, #260]	; 18f5c <__assert_fail@plt+0x713c>
   18e54:	bl	18c48 <__assert_fail@plt+0x6e28>
   18e58:	mov	r0, r4
   18e5c:	bl	11b2c <malloc@plt>
   18e60:	cmp	r0, #0
   18e64:	movne	r3, #1
   18e68:	mov	r6, r0
   18e6c:	str	r0, [r5, #24]
   18e70:	strne	r3, [r5, #16]
   18e74:	bne	18da0 <__assert_fail@plt+0x6f80>
   18e78:	mov	r1, r4
   18e7c:	ldr	r0, [pc, #220]	; 18f60 <__assert_fail@plt+0x7140>
   18e80:	bl	18c48 <__assert_fail@plt+0x6e28>
   18e84:	cmp	r7, #0
   18e88:	beq	18dec <__assert_fail@plt+0x6fcc>
   18e8c:	bl	11a84 <geteuid@plt>
   18e90:	cmp	r0, #0
   18e94:	bne	18dec <__assert_fail@plt+0x6fcc>
   18e98:	mov	r0, r7
   18e9c:	bl	11d48 <setuid@plt>
   18ea0:	cmp	r0, #0
   18ea4:	bne	18f34 <__assert_fail@plt+0x7114>
   18ea8:	bl	119a0 <getuid@plt>
   18eac:	mov	r6, r0
   18eb0:	bl	11a84 <geteuid@plt>
   18eb4:	cmp	r6, r0
   18eb8:	bne	18f34 <__assert_fail@plt+0x7114>
   18ebc:	cmp	r4, #0
   18ec0:	beq	18dec <__assert_fail@plt+0x6fcc>
   18ec4:	bl	11c40 <__errno_location@plt>
   18ec8:	mov	r3, r4
   18ecc:	ldr	r2, [r0]
   18ed0:	b	18dd8 <__assert_fail@plt+0x6fb8>
   18ed4:	cmp	r7, #0
   18ed8:	bne	18f1c <__assert_fail@plt+0x70fc>
   18edc:	mov	r0, r4
   18ee0:	bl	11b50 <strerror@plt>
   18ee4:	mov	r1, r0
   18ee8:	ldr	r0, [pc, #116]	; 18f64 <__assert_fail@plt+0x7144>
   18eec:	bl	18be4 <__assert_fail@plt+0x6dc4>
   18ef0:	b	18de4 <__assert_fail@plt+0x6fc4>
   18ef4:	bl	11c40 <__errno_location@plt>
   18ef8:	ldr	r0, [r0]
   18efc:	bl	11b50 <strerror@plt>
   18f00:	mov	r1, r4
   18f04:	mov	r2, r0
   18f08:	ldr	r0, [pc, #88]	; 18f68 <__assert_fail@plt+0x7148>
   18f0c:	bl	18be4 <__assert_fail@plt+0x6dc4>
   18f10:	ldr	r4, [r5, #20]
   18f14:	b	18d90 <__assert_fail@plt+0x6f70>
   18f18:	mov	r4, r3
   18f1c:	bl	11a84 <geteuid@plt>
   18f20:	cmp	r0, #0
   18f24:	bne	18ec4 <__assert_fail@plt+0x70a4>
   18f28:	b	18e98 <__assert_fail@plt+0x7078>
   18f2c:	ldr	r0, [pc, #56]	; 18f6c <__assert_fail@plt+0x714c>
   18f30:	bl	18c48 <__assert_fail@plt+0x6e28>
   18f34:	bl	11c40 <__errno_location@plt>
   18f38:	ldr	r0, [r0]
   18f3c:	bl	11b50 <strerror@plt>
   18f40:	mov	r1, r0
   18f44:	ldr	r0, [pc, #36]	; 18f70 <__assert_fail@plt+0x7150>
   18f48:	bl	18c48 <__assert_fail@plt+0x6e28>
   18f4c:	mov	r4, r3
   18f50:	b	18edc <__assert_fail@plt+0x70bc>
   18f54:	andeq	fp, r2, r4, asr r3
   18f58:	andeq	sl, r1, ip, lsr #14
   18f5c:	andeq	sl, r1, ip, ror #12
   18f60:	ldrdeq	sl, [r1], -r0
   18f64:	andeq	sl, r1, r4, lsl r7
   18f68:	andeq	sl, r1, r0, lsr #13
   18f6c:	andeq	sl, r1, r4, lsl #13
   18f70:	strdeq	sl, [r1], -r8
   18f74:	push	{r4, r5, r6, r7, r8, lr}
   18f78:	ldr	r5, [pc, #336]	; 190d0 <__assert_fail@plt+0x72b0>
   18f7c:	ldr	r3, [r5, #16]
   18f80:	cmp	r3, #0
   18f84:	beq	190b8 <__assert_fail@plt+0x7298>
   18f88:	ldr	r3, [r5, #8]
   18f8c:	mov	r4, r0
   18f90:	cmp	r3, #0
   18f94:	bne	19008 <__assert_fail@plt+0x71e8>
   18f98:	add	r2, r4, #47	; 0x2f
   18f9c:	ldr	lr, [r5, #32]
   18fa0:	bic	r2, r2, #31
   18fa4:	ldr	ip, [r5, #36]	; 0x24
   18fa8:	ldr	r7, [r5, #20]
   18fac:	add	r6, lr, r2
   18fb0:	mov	r4, #2
   18fb4:	cmp	ip, #0
   18fb8:	beq	18fec <__assert_fail@plt+0x71cc>
   18fbc:	ldr	r3, [ip]
   18fc0:	cmp	r2, r3
   18fc4:	bls	19090 <__assert_fail@plt+0x7270>
   18fc8:	mov	r1, ip
   18fcc:	b	18fe0 <__assert_fail@plt+0x71c0>
   18fd0:	ldr	r3, [r0]
   18fd4:	cmp	r3, r2
   18fd8:	bcs	19038 <__assert_fail@plt+0x7218>
   18fdc:	mov	r1, r0
   18fe0:	ldr	r0, [r1, #8]
   18fe4:	cmp	r0, #0
   18fe8:	bne	18fd0 <__assert_fail@plt+0x71b0>
   18fec:	cmp	r6, r7
   18ff0:	bls	190a0 <__assert_fail@plt+0x7280>
   18ff4:	cmp	r4, #1
   18ff8:	bne	19030 <__assert_fail@plt+0x7210>
   18ffc:	mov	r3, #0
   19000:	mov	r0, r3
   19004:	pop	{r4, r5, r6, r7, r8, pc}
   19008:	ldr	r3, [r5]
   1900c:	cmp	r3, #0
   19010:	bne	18f98 <__assert_fail@plt+0x7178>
   19014:	ldr	r2, [r5, #4]
   19018:	str	r3, [r5, #8]
   1901c:	cmp	r2, #0
   19020:	bne	18f98 <__assert_fail@plt+0x7178>
   19024:	ldr	r0, [pc, #168]	; 190d4 <__assert_fail@plt+0x72b4>
   19028:	bl	18be4 <__assert_fail@plt+0x6dc4>
   1902c:	b	18f98 <__assert_fail@plt+0x7178>
   19030:	mov	r4, #1
   19034:	b	18fb4 <__assert_fail@plt+0x7194>
   19038:	ldr	ip, [r0, #8]
   1903c:	str	ip, [r1, #8]
   19040:	ldr	r1, [r5, #40]	; 0x28
   19044:	ldr	ip, [r5, #48]	; 0x30
   19048:	add	r3, r3, r1
   1904c:	cmp	r3, ip
   19050:	ldr	r1, [r5, #44]	; 0x2c
   19054:	strhi	r3, [r5, #48]	; 0x30
   19058:	str	r3, [r5, #40]	; 0x28
   1905c:	ldr	r3, [r5, #52]	; 0x34
   19060:	add	r1, r1, #1
   19064:	cmp	r1, r3
   19068:	add	r3, r0, #8
   1906c:	str	r1, [r5, #44]	; 0x2c
   19070:	strhi	r1, [r5, #52]	; 0x34
   19074:	sub	r2, r2, #8
   19078:	mov	r0, r3
   1907c:	mov	r1, #0
   19080:	bl	11c70 <memset@plt>
   19084:	mov	r3, r0
   19088:	mov	r0, r3
   1908c:	pop	{r4, r5, r6, r7, r8, pc}
   19090:	ldr	r1, [ip, #8]
   19094:	mov	r0, ip
   19098:	str	r1, [r5, #36]	; 0x24
   1909c:	b	19040 <__assert_fail@plt+0x7220>
   190a0:	ldr	r3, [r5, #24]
   190a4:	str	r6, [r5, #32]
   190a8:	add	r0, r3, lr
   190ac:	str	r2, [r3, lr]
   190b0:	mov	r3, r2
   190b4:	b	19040 <__assert_fail@plt+0x7220>
   190b8:	ldr	r0, [pc, #24]	; 190d8 <__assert_fail@plt+0x72b8>
   190bc:	bl	18be4 <__assert_fail@plt+0x6dc4>
   190c0:	ldr	r0, [pc, #20]	; 190dc <__assert_fail@plt+0x72bc>
   190c4:	bl	18be4 <__assert_fail@plt+0x6dc4>
   190c8:	mov	r0, #2
   190cc:	bl	11ba4 <exit@plt>
   190d0:	andeq	fp, r2, r4, asr r3
   190d4:	andeq	sl, r1, r8, asr #12
   190d8:	andeq	sl, r1, ip, asr r7
   190dc:	muleq	r1, ip, r7
   190e0:	cmp	r0, #0
   190e4:	bxeq	lr
   190e8:	push	{r4, lr}
   190ec:	sub	ip, r0, #8
   190f0:	ldr	lr, [r0, #-8]
   190f4:	cmp	lr, #0
   190f8:	beq	19154 <__assert_fail@plt+0x7334>
   190fc:	sub	r3, lr, #8
   19100:	add	r3, r0, r3
   19104:	mov	r2, ip
   19108:	mvn	r1, #0
   1910c:	strb	r1, [r2], #1
   19110:	cmp	r2, r3
   19114:	bne	1910c <__assert_fail@plt+0x72ec>
   19118:	mov	r2, ip
   1911c:	mvn	r1, #85	; 0x55
   19120:	strb	r1, [r2], #1
   19124:	cmp	r2, r3
   19128:	bne	19120 <__assert_fail@plt+0x7300>
   1912c:	mov	r2, ip
   19130:	mov	r1, #85	; 0x55
   19134:	strb	r1, [r2], #1
   19138:	cmp	r2, r3
   1913c:	bne	19134 <__assert_fail@plt+0x7314>
   19140:	mov	r2, ip
   19144:	mov	r1, #0
   19148:	strb	r1, [r2], #1
   1914c:	cmp	r2, r3
   19150:	bne	19148 <__assert_fail@plt+0x7328>
   19154:	ldr	r3, [pc, #40]	; 19184 <__assert_fail@plt+0x7364>
   19158:	str	lr, [r0, #-8]
   1915c:	ldr	r1, [r3, #44]	; 0x2c
   19160:	ldr	r2, [r3, #40]	; 0x28
   19164:	ldr	r4, [r3, #36]	; 0x24
   19168:	sub	r1, r1, #1
   1916c:	sub	lr, r2, lr
   19170:	str	ip, [r3, #36]	; 0x24
   19174:	str	r4, [r0]
   19178:	str	r1, [r3, #44]	; 0x2c
   1917c:	str	lr, [r3, #40]	; 0x28
   19180:	pop	{r4, pc}
   19184:	andeq	fp, r2, r4, asr r3
   19188:	push	{r4, r5, r6, r7, r8, lr}
   1918c:	subs	r4, r0, #0
   19190:	beq	191e8 <__assert_fail@plt+0x73c8>
   19194:	ldr	r6, [r4, #-8]
   19198:	cmp	r1, r6
   1919c:	bcs	191a8 <__assert_fail@plt+0x7388>
   191a0:	mov	r0, r4
   191a4:	pop	{r4, r5, r6, r7, r8, pc}
   191a8:	mov	r0, r1
   191ac:	mov	r5, r1
   191b0:	bl	18f74 <__assert_fail@plt+0x7154>
   191b4:	mov	r7, r4
   191b8:	mov	r2, r6
   191bc:	mov	r1, r7
   191c0:	mov	r4, r0
   191c4:	bl	119dc <memcpy@plt>
   191c8:	sub	r2, r5, r6
   191cc:	mov	r1, #0
   191d0:	add	r0, r4, r6
   191d4:	bl	11c70 <memset@plt>
   191d8:	mov	r0, r7
   191dc:	bl	190e0 <__assert_fail@plt+0x72c0>
   191e0:	mov	r0, r4
   191e4:	pop	{r4, r5, r6, r7, r8, pc}
   191e8:	mov	r0, r1
   191ec:	pop	{r4, r5, r6, r7, r8, lr}
   191f0:	b	18f74 <__assert_fail@plt+0x7154>
   191f4:	ldr	r2, [pc, #40]	; 19224 <__assert_fail@plt+0x7404>
   191f8:	ldr	r3, [r2, #24]
   191fc:	cmp	r3, r0
   19200:	bhi	1921c <__assert_fail@plt+0x73fc>
   19204:	ldr	r2, [r2, #20]
   19208:	add	r3, r3, r2
   1920c:	cmp	r0, r3
   19210:	movcs	r0, #0
   19214:	movcc	r0, #1
   19218:	bx	lr
   1921c:	mov	r0, #0
   19220:	bx	lr
   19224:	andeq	fp, r2, r4, asr r3
   19228:	push	{r4, lr}
   1922c:	ldr	r4, [pc, #156]	; 192d0 <__assert_fail@plt+0x74b0>
   19230:	ldr	r3, [r4, #16]
   19234:	cmp	r3, #0
   19238:	popeq	{r4, pc}
   1923c:	ldr	r1, [r4, #20]
   19240:	ldr	r0, [r4, #24]
   19244:	cmp	r1, #0
   19248:	beq	192a0 <__assert_fail@plt+0x7480>
   1924c:	add	r3, r0, r1
   19250:	mov	r2, r0
   19254:	mvn	ip, #0
   19258:	strb	ip, [r2], #1
   1925c:	cmp	r2, r3
   19260:	bne	19258 <__assert_fail@plt+0x7438>
   19264:	mov	r2, r0
   19268:	mvn	ip, #85	; 0x55
   1926c:	strb	ip, [r2], #1
   19270:	cmp	r2, r3
   19274:	bne	1926c <__assert_fail@plt+0x744c>
   19278:	mov	r2, r0
   1927c:	mov	ip, #85	; 0x55
   19280:	strb	ip, [r2], #1
   19284:	cmp	r2, r3
   19288:	bne	19280 <__assert_fail@plt+0x7460>
   1928c:	mov	r2, r0
   19290:	mov	ip, #0
   19294:	strb	ip, [r2], #1
   19298:	cmp	r2, r3
   1929c:	bne	19294 <__assert_fail@plt+0x7474>
   192a0:	ldr	r3, [r4, #28]
   192a4:	cmp	r3, #0
   192a8:	bne	192c8 <__assert_fail@plt+0x74a8>
   192ac:	mov	r3, #0
   192b0:	str	r3, [r4, #24]
   192b4:	str	r3, [r4, #16]
   192b8:	str	r3, [r4, #20]
   192bc:	str	r3, [r4, #32]
   192c0:	str	r3, [r4, #36]	; 0x24
   192c4:	pop	{r4, pc}
   192c8:	bl	11ce8 <munmap@plt>
   192cc:	b	192ac <__assert_fail@plt+0x748c>
   192d0:	andeq	fp, r2, r4, asr r3
   192d4:	ldr	r3, [pc, #80]	; 1932c <__assert_fail@plt+0x750c>
   192d8:	ldr	r2, [r3, #12]
   192dc:	cmp	r2, #0
   192e0:	bxne	lr
   192e4:	ldr	r0, [pc, #68]	; 19330 <__assert_fail@plt+0x7510>
   192e8:	push	{lr}		; (str lr, [sp, #-4]!)
   192ec:	sub	sp, sp, #28
   192f0:	ldr	r2, [r3, #20]
   192f4:	ldr	lr, [r3, #32]
   192f8:	ldr	ip, [r3, #52]	; 0x34
   192fc:	ldr	r1, [r3, #44]	; 0x2c
   19300:	ldr	r0, [r0]
   19304:	str	r2, [sp, #16]
   19308:	ldr	r2, [r3, #48]	; 0x30
   1930c:	stmib	sp, {r1, ip, lr}
   19310:	mov	r1, #1
   19314:	str	r2, [sp]
   19318:	ldr	r2, [pc, #20]	; 19334 <__assert_fail@plt+0x7514>
   1931c:	ldr	r3, [r3, #40]	; 0x28
   19320:	bl	11cc4 <__fprintf_chk@plt>
   19324:	add	sp, sp, #28
   19328:	pop	{pc}		; (ldr pc, [sp], #4)
   1932c:	andeq	fp, r2, r4, asr r3
   19330:	andeq	fp, r2, r8, ror #5
   19334:	ldrdeq	sl, [r1], -r4
   19338:	ldr	r3, [pc, #4]	; 19344 <__assert_fail@plt+0x7524>
   1933c:	ldr	r0, [r3, #20]
   19340:	bx	lr
   19344:	andeq	fp, r2, r4, asr r3
   19348:	push	{r4, r5, r6, r7, r8, lr}
   1934c:	subs	r5, r2, #0
   19350:	mov	r7, r0
   19354:	mov	r6, r1
   19358:	bne	19370 <__assert_fail@plt+0x7550>
   1935c:	b	193a8 <__assert_fail@plt+0x7588>
   19360:	bl	11c40 <__errno_location@plt>
   19364:	ldr	r3, [r0]
   19368:	cmp	r3, #4
   1936c:	bne	193a0 <__assert_fail@plt+0x7580>
   19370:	mov	r2, r5
   19374:	mov	r1, r6
   19378:	mov	r0, r7
   1937c:	bl	11c88 <write@plt>
   19380:	cmn	r0, #1
   19384:	mov	r4, r0
   19388:	beq	19360 <__assert_fail@plt+0x7540>
   1938c:	cmp	r0, #0
   19390:	blt	193a0 <__assert_fail@plt+0x7580>
   19394:	subs	r5, r5, r0
   19398:	add	r6, r6, r0
   1939c:	bne	19370 <__assert_fail@plt+0x7550>
   193a0:	mov	r0, r4
   193a4:	pop	{r4, r5, r6, r7, r8, pc}
   193a8:	mov	r4, r5
   193ac:	b	193a0 <__assert_fail@plt+0x7580>
   193b0:	push	{r4, r5, r6, lr}
   193b4:	ldr	r4, [pc, #104]	; 19424 <__assert_fail@plt+0x7604>
   193b8:	ldr	r3, [r4]
   193bc:	cmp	r3, #0
   193c0:	beq	193ec <__assert_fail@plt+0x75cc>
   193c4:	ldr	r5, [r4, #4]
   193c8:	ldr	r0, [r4, #8]
   193cc:	cmp	r5, r0
   193d0:	popeq	{r4, r5, r6, pc}
   193d4:	mov	r0, r5
   193d8:	bl	11d48 <setuid@plt>
   193dc:	cmp	r0, #0
   193e0:	blt	19414 <__assert_fail@plt+0x75f4>
   193e4:	str	r5, [r4, #8]
   193e8:	pop	{r4, r5, r6, pc}
   193ec:	bl	119a0 <getuid@plt>
   193f0:	mov	r5, r0
   193f4:	str	r0, [r4, #4]
   193f8:	bl	11a84 <geteuid@plt>
   193fc:	mov	r3, #1
   19400:	str	r3, [r4]
   19404:	cmp	r5, r0
   19408:	str	r0, [r4, #8]
   1940c:	popeq	{r4, r5, r6, pc}
   19410:	b	193d4 <__assert_fail@plt+0x75b4>
   19414:	ldr	r0, [pc, #12]	; 19428 <__assert_fail@plt+0x7608>
   19418:	bl	11a90 <perror@plt>
   1941c:	mov	r0, #1
   19420:	bl	11ba4 <exit@plt>
   19424:	andeq	fp, r2, ip, lsl #7
   19428:	andeq	sl, r1, r0, lsl r8
   1942c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19430:	mov	r7, r0
   19434:	ldr	r6, [pc, #72]	; 19484 <__assert_fail@plt+0x7664>
   19438:	ldr	r5, [pc, #72]	; 19488 <__assert_fail@plt+0x7668>
   1943c:	add	r6, pc, r6
   19440:	add	r5, pc, r5
   19444:	sub	r6, r6, r5
   19448:	mov	r8, r1
   1944c:	mov	r9, r2
   19450:	bl	118b4 <start_color@plt-0x20>
   19454:	asrs	r6, r6, #2
   19458:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1945c:	mov	r4, #0
   19460:	add	r4, r4, #1
   19464:	ldr	r3, [r5], #4
   19468:	mov	r2, r9
   1946c:	mov	r1, r8
   19470:	mov	r0, r7
   19474:	blx	r3
   19478:	cmp	r6, r4
   1947c:	bne	19460 <__assert_fail@plt+0x7640>
   19480:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19484:			; <UNDEFINED> instruction: 0x000118b8
   19488:			; <UNDEFINED> instruction: 0x000118b0
   1948c:	bx	lr
   19490:	ldr	r3, [pc, #12]	; 194a4 <__assert_fail@plt+0x7684>
   19494:	mov	r1, #0
   19498:	add	r3, pc, r3
   1949c:	ldr	r2, [r3]
   194a0:	b	11c58 <__cxa_atexit@plt>
   194a4:	andeq	r1, r1, r4, ror #22

Disassembly of section .fini:

000194a8 <.fini>:
   194a8:	push	{r3, lr}
   194ac:	pop	{r3, pc}
