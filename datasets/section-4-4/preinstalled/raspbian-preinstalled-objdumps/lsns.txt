
raspbian-preinstalled/lsns:     file format elf32-littlearm


Disassembly of section .init:

00011820 <.init>:
   11820:	push	{r3, lr}
   11824:	bl	13070 <__assert_fail@plt+0x1338>
   11828:	pop	{r3, pc}

Disassembly of section .plt:

0001182c <fdopen@plt-0x14>:
   1182c:	push	{lr}		; (str lr, [sp, #-4]!)
   11830:	ldr	lr, [pc, #4]	; 1183c <fdopen@plt-0x4>
   11834:	add	lr, pc, lr
   11838:	ldr	pc, [lr, #8]!
   1183c:	andeq	r6, r1, r0, lsl #12

00011840 <fdopen@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #90112	; 0x16000
   11848:	ldr	pc, [ip, #1536]!	; 0x600

0001184c <scols_column_set_json_type@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #90112	; 0x16000
   11854:	ldr	pc, [ip, #1528]!	; 0x5f8

00011858 <calloc@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #90112	; 0x16000
   11860:	ldr	pc, [ip, #1520]!	; 0x5f0

00011864 <strstr@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #90112	; 0x16000
   1186c:	ldr	pc, [ip, #1512]!	; 0x5e8

00011870 <raise@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #90112	; 0x16000
   11878:	ldr	pc, [ip, #1504]!	; 0x5e0

0001187c <__getdelim@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #90112	; 0x16000
   11884:	ldr	pc, [ip, #1496]!	; 0x5d8

00011888 <scols_line_refer_data@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #90112	; 0x16000
   11890:	ldr	pc, [ip, #1488]!	; 0x5d0

00011894 <strcmp@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #90112	; 0x16000
   1189c:	ldr	pc, [ip, #1480]!	; 0x5c8

000118a0 <mnt_new_table_from_file@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #90112	; 0x16000
   118a8:	ldr	pc, [ip, #1472]!	; 0x5c0

000118ac <strtol@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #90112	; 0x16000
   118b4:	ldr	pc, [ip, #1464]!	; 0x5b8

000118b8 <getpwuid@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #90112	; 0x16000
   118c0:	ldr	pc, [ip, #1456]!	; 0x5b0

000118c4 <strcspn@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #90112	; 0x16000
   118cc:	ldr	pc, [ip, #1448]!	; 0x5a8

000118d0 <scols_table_set_name@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #90112	; 0x16000
   118d8:	ldr	pc, [ip, #1440]!	; 0x5a0

000118dc <scols_table_enable_noheadings@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #90112	; 0x16000
   118e4:	ldr	pc, [ip, #1432]!	; 0x598

000118e8 <read@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #90112	; 0x16000
   118f0:	ldr	pc, [ip, #1424]!	; 0x590

000118f4 <scols_table_new_column@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #90112	; 0x16000
   118fc:	ldr	pc, [ip, #1416]!	; 0x588

00011900 <getuid@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #90112	; 0x16000
   11908:	ldr	pc, [ip, #1408]!	; 0x580

0001190c <free@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #90112	; 0x16000
   11914:	ldr	pc, [ip, #1400]!	; 0x578

00011918 <fgets@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #90112	; 0x16000
   11920:	ldr	pc, [ip, #1392]!	; 0x570

00011924 <nanosleep@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #90112	; 0x16000
   1192c:	ldr	pc, [ip, #1384]!	; 0x568

00011930 <scols_table_enable_raw@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #90112	; 0x16000
   11938:	ldr	pc, [ip, #1376]!	; 0x560

0001193c <ferror@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #90112	; 0x16000
   11944:	ldr	pc, [ip, #1368]!	; 0x558

00011948 <strndup@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #90112	; 0x16000
   11950:	ldr	pc, [ip, #1360]!	; 0x550

00011954 <_exit@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #90112	; 0x16000
   1195c:	ldr	pc, [ip, #1352]!	; 0x548

00011960 <memcpy@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #90112	; 0x16000
   11968:	ldr	pc, [ip, #1344]!	; 0x540

0001196c <mnt_new_iter@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #90112	; 0x16000
   11974:	ldr	pc, [ip, #1336]!	; 0x538

00011978 <__strtoull_internal@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #90112	; 0x16000
   11980:	ldr	pc, [ip, #1328]!	; 0x530

00011984 <dcgettext@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #90112	; 0x16000
   1198c:	ldr	pc, [ip, #1320]!	; 0x528

00011990 <strdup@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #90112	; 0x16000
   11998:	ldr	pc, [ip, #1312]!	; 0x520

0001199c <scols_wrapnl_chunksize@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #90112	; 0x16000
   119a4:	ldr	pc, [ip, #1304]!	; 0x518

000119a8 <__stack_chk_fail@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #90112	; 0x16000
   119b0:	ldr	pc, [ip, #1296]!	; 0x510

000119b4 <textdomain@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #90112	; 0x16000
   119bc:	ldr	pc, [ip, #1288]!	; 0x508

000119c0 <err@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #90112	; 0x16000
   119c8:	ldr	pc, [ip, #1280]!	; 0x500

000119cc <geteuid@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #90112	; 0x16000
   119d4:	ldr	pc, [ip, #1272]!	; 0x4f8

000119d8 <__fxstatat64@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #90112	; 0x16000
   119e0:	ldr	pc, [ip, #1264]!	; 0x4f0

000119e4 <__fxstat64@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #90112	; 0x16000
   119ec:	ldr	pc, [ip, #1256]!	; 0x4e8

000119f0 <getegid@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #90112	; 0x16000
   119f8:	ldr	pc, [ip, #1248]!	; 0x4e0

000119fc <scols_new_table@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #90112	; 0x16000
   11a04:	ldr	pc, [ip, #1240]!	; 0x4d8

00011a08 <scols_wrapnl_nextchunk@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #90112	; 0x16000
   11a10:	ldr	pc, [ip, #1232]!	; 0x4d0

00011a14 <__fpending@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #90112	; 0x16000
   11a1c:	ldr	pc, [ip, #1224]!	; 0x4c8

00011a20 <opendir@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #90112	; 0x16000
   11a28:	ldr	pc, [ip, #1216]!	; 0x4c0

00011a2c <mnt_fs_get_target@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #90112	; 0x16000
   11a34:	ldr	pc, [ip, #1208]!	; 0x4b8

00011a38 <open64@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #90112	; 0x16000
   11a40:	ldr	pc, [ip, #1200]!	; 0x4b0

00011a44 <mnt_fs_get_root@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #90112	; 0x16000
   11a4c:	ldr	pc, [ip, #1192]!	; 0x4a8

00011a50 <__asprintf_chk@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #90112	; 0x16000
   11a58:	ldr	pc, [ip, #1184]!	; 0x4a0

00011a5c <getenv@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #90112	; 0x16000
   11a64:	ldr	pc, [ip, #1176]!	; 0x498

00011a68 <malloc@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #90112	; 0x16000
   11a70:	ldr	pc, [ip, #1168]!	; 0x490

00011a74 <__libc_start_main@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #90112	; 0x16000
   11a7c:	ldr	pc, [ip, #1160]!	; 0x488

00011a80 <scols_table_new_line@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #90112	; 0x16000
   11a88:	ldr	pc, [ip, #1152]!	; 0x480

00011a8c <scols_unref_table@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #90112	; 0x16000
   11a94:	ldr	pc, [ip, #1144]!	; 0x478

00011a98 <__vfprintf_chk@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #90112	; 0x16000
   11aa0:	ldr	pc, [ip, #1136]!	; 0x470

00011aa4 <__gmon_start__@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #90112	; 0x16000
   11aac:	ldr	pc, [ip, #1128]!	; 0x468

00011ab0 <getopt_long@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #90112	; 0x16000
   11ab8:	ldr	pc, [ip, #1120]!	; 0x460

00011abc <__ctype_b_loc@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #90112	; 0x16000
   11ac4:	ldr	pc, [ip, #1112]!	; 0x458

00011ac8 <getpid@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #90112	; 0x16000
   11ad0:	ldr	pc, [ip, #1104]!	; 0x450

00011ad4 <exit@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #90112	; 0x16000
   11adc:	ldr	pc, [ip, #1096]!	; 0x448

00011ae0 <strtoul@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #90112	; 0x16000
   11ae8:	ldr	pc, [ip, #1088]!	; 0x440

00011aec <strlen@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #90112	; 0x16000
   11af4:	ldr	pc, [ip, #1080]!	; 0x438

00011af8 <strchr@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #90112	; 0x16000
   11b00:	ldr	pc, [ip, #1072]!	; 0x430

00011b04 <openat64@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #90112	; 0x16000
   11b0c:	ldr	pc, [ip, #1064]!	; 0x428

00011b10 <warnx@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #90112	; 0x16000
   11b18:	ldr	pc, [ip, #1056]!	; 0x420

00011b1c <__errno_location@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #90112	; 0x16000
   11b24:	ldr	pc, [ip, #1048]!	; 0x418

00011b28 <strncasecmp@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #90112	; 0x16000
   11b30:	ldr	pc, [ip, #1040]!	; 0x410

00011b34 <__sprintf_chk@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #90112	; 0x16000
   11b3c:	ldr	pc, [ip, #1032]!	; 0x408

00011b40 <__cxa_atexit@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #90112	; 0x16000
   11b48:	ldr	pc, [ip, #1024]!	; 0x400

00011b4c <__vasprintf_chk@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #90112	; 0x16000
   11b54:	ldr	pc, [ip, #1016]!	; 0x3f8

00011b58 <getgid@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #90112	; 0x16000
   11b60:	ldr	pc, [ip, #1008]!	; 0x3f0

00011b64 <memset@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #90112	; 0x16000
   11b6c:	ldr	pc, [ip, #1000]!	; 0x3e8

00011b70 <mnt_free_iter@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #90112	; 0x16000
   11b78:	ldr	pc, [ip, #992]!	; 0x3e0

00011b7c <mnt_table_find_next_fs@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #90112	; 0x16000
   11b84:	ldr	pc, [ip, #984]!	; 0x3d8

00011b88 <fgetc@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #90112	; 0x16000
   11b90:	ldr	pc, [ip, #976]!	; 0x3d0

00011b94 <__printf_chk@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #90112	; 0x16000
   11b9c:	ldr	pc, [ip, #968]!	; 0x3c8

00011ba0 <strtod@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #90112	; 0x16000
   11ba8:	ldr	pc, [ip, #960]!	; 0x3c0

00011bac <scols_table_enable_json@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #90112	; 0x16000
   11bb4:	ldr	pc, [ip, #952]!	; 0x3b8

00011bb8 <__fprintf_chk@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #90112	; 0x16000
   11bc0:	ldr	pc, [ip, #944]!	; 0x3b0

00011bc4 <fclose@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #90112	; 0x16000
   11bcc:	ldr	pc, [ip, #936]!	; 0x3a8

00011bd0 <mnt_fs_match_fstype@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #90112	; 0x16000
   11bd8:	ldr	pc, [ip, #928]!	; 0x3a0

00011bdc <setlocale@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #90112	; 0x16000
   11be4:	ldr	pc, [ip, #920]!	; 0x398

00011be8 <errx@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #90112	; 0x16000
   11bf0:	ldr	pc, [ip, #912]!	; 0x390

00011bf4 <wcswidth@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #90112	; 0x16000
   11bfc:	ldr	pc, [ip, #904]!	; 0x388

00011c00 <strrchr@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #90112	; 0x16000
   11c08:	ldr	pc, [ip, #896]!	; 0x380

00011c0c <warn@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #90112	; 0x16000
   11c14:	ldr	pc, [ip, #888]!	; 0x378

00011c18 <scols_print_table@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #90112	; 0x16000
   11c20:	ldr	pc, [ip, #880]!	; 0x370

00011c24 <fputc@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #90112	; 0x16000
   11c2c:	ldr	pc, [ip, #872]!	; 0x368

00011c30 <sscanf@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #90112	; 0x16000
   11c38:	ldr	pc, [ip, #864]!	; 0x360

00011c3c <localeconv@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #90112	; 0x16000
   11c44:	ldr	pc, [ip, #856]!	; 0x358

00011c48 <mbstowcs@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #90112	; 0x16000
   11c50:	ldr	pc, [ip, #848]!	; 0x350

00011c54 <scols_column_set_wrapfunc@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #90112	; 0x16000
   11c5c:	ldr	pc, [ip, #840]!	; 0x348

00011c60 <readdir64@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #90112	; 0x16000
   11c68:	ldr	pc, [ip, #832]!	; 0x340

00011c6c <dirfd@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #90112	; 0x16000
   11c74:	ldr	pc, [ip, #824]!	; 0x338

00011c78 <__strtoll_internal@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #90112	; 0x16000
   11c80:	ldr	pc, [ip, #816]!	; 0x330

00011c84 <scols_column_set_safechars@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #90112	; 0x16000
   11c8c:	ldr	pc, [ip, #808]!	; 0x328

00011c90 <socket@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #90112	; 0x16000
   11c98:	ldr	pc, [ip, #800]!	; 0x320

00011c9c <bindtextdomain@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #90112	; 0x16000
   11ca4:	ldr	pc, [ip, #792]!	; 0x318

00011ca8 <mnt_free_table@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #90112	; 0x16000
   11cb0:	ldr	pc, [ip, #784]!	; 0x310

00011cb4 <fputs@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #90112	; 0x16000
   11cbc:	ldr	pc, [ip, #776]!	; 0x308

00011cc0 <strncmp@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #90112	; 0x16000
   11cc8:	ldr	pc, [ip, #768]!	; 0x300

00011ccc <abort@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #90112	; 0x16000
   11cd4:	ldr	pc, [ip, #760]!	; 0x2f8

00011cd8 <recv@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #90112	; 0x16000
   11ce0:	ldr	pc, [ip, #752]!	; 0x2f0

00011ce4 <close@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #90112	; 0x16000
   11cec:	ldr	pc, [ip, #744]!	; 0x2e8

00011cf0 <send@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #90112	; 0x16000
   11cf8:	ldr	pc, [ip, #736]!	; 0x2e0

00011cfc <closedir@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #90112	; 0x16000
   11d04:	ldr	pc, [ip, #728]!	; 0x2d8

00011d08 <getgrgid@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #90112	; 0x16000
   11d10:	ldr	pc, [ip, #720]!	; 0x2d0

00011d14 <__snprintf_chk@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #90112	; 0x16000
   11d1c:	ldr	pc, [ip, #712]!	; 0x2c8

00011d20 <scols_init_debug@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #90112	; 0x16000
   11d28:	ldr	pc, [ip, #704]!	; 0x2c0

00011d2c <strspn@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #90112	; 0x16000
   11d34:	ldr	pc, [ip, #696]!	; 0x2b8

00011d38 <__assert_fail@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #90112	; 0x16000
   11d40:	ldr	pc, [ip, #688]!	; 0x2b0

Disassembly of section .text:

00011d48 <.text>:
   11d48:	ldr	r3, [pc, #4060]	; 12d2c <__assert_fail@plt+0xff4>
   11d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d50:	sub	sp, sp, #212	; 0xd4
   11d54:	ldr	r2, [r3]
   11d58:	mov	r4, r0
   11d5c:	mov	r3, #0
   11d60:	mov	r5, r1
   11d64:	mov	r0, #6
   11d68:	ldr	r1, [pc, #4032]	; 12d30 <__assert_fail@plt+0xff8>
   11d6c:	str	r2, [sp, #204]	; 0xcc
   11d70:	str	r3, [sp, #44]	; 0x2c
   11d74:	str	r3, [sp, #40]	; 0x28
   11d78:	bl	11bdc <setlocale@plt>
   11d7c:	ldr	r1, [pc, #4016]	; 12d34 <__assert_fail@plt+0xffc>
   11d80:	ldr	r0, [pc, #4016]	; 12d38 <__assert_fail@plt+0x1000>
   11d84:	bl	11c9c <bindtextdomain@plt>
   11d88:	ldr	r6, [pc, #4012]	; 12d3c <__assert_fail@plt+0x1004>
   11d8c:	ldr	r0, [pc, #4004]	; 12d38 <__assert_fail@plt+0x1000>
   11d90:	bl	119b4 <textdomain@plt>
   11d94:	ldr	r0, [pc, #4004]	; 12d40 <__assert_fail@plt+0x1008>
   11d98:	bl	16d70 <__assert_fail@plt+0x5038>
   11d9c:	ldr	r0, [pc, #4000]	; 12d44 <__assert_fail@plt+0x100c>
   11da0:	bl	11a5c <getenv@plt>
   11da4:	ldr	r2, [r6]
   11da8:	ands	r2, r2, #2
   11dac:	bne	11dec <__assert_fail@plt+0xb4>
   11db0:	cmp	r0, #0
   11db4:	streq	r0, [r6]
   11db8:	beq	11df8 <__assert_fail@plt+0xc0>
   11dbc:	add	r1, sp, #32
   11dc0:	bl	11ae0 <strtoul@plt>
   11dc4:	mov	r7, r0
   11dc8:	ldr	r0, [sp, #32]
   11dcc:	cmp	r0, #0
   11dd0:	beq	11de8 <__assert_fail@plt+0xb0>
   11dd4:	ldr	r1, [pc, #3948]	; 12d48 <__assert_fail@plt+0x1010>
   11dd8:	bl	11894 <strcmp@plt>
   11ddc:	ldr	r3, [pc, #3944]	; 12d4c <__assert_fail@plt+0x1014>
   11de0:	cmp	r0, #0
   11de4:	moveq	r7, r3
   11de8:	str	r7, [r6]
   11dec:	ldr	r7, [r6]
   11df0:	cmp	r7, #0
   11df4:	bne	12190 <__assert_fail@plt+0x458>
   11df8:	ldr	r3, [r6]
   11dfc:	mov	r2, #56	; 0x38
   11e00:	orr	r3, r3, #2
   11e04:	mov	r1, #0
   11e08:	add	r0, sp, #64	; 0x40
   11e0c:	str	r3, [r6]
   11e10:	bl	11b64 <memset@plt>
   11e14:	ldr	r3, [pc, #3892]	; 12d50 <__assert_fail@plt+0x1018>
   11e18:	mov	r2, #0
   11e1c:	str	r3, [r6, #8]
   11e20:	str	r3, [r6, #12]
   11e24:	ldr	r7, [pc, #3880]	; 12d54 <__assert_fail@plt+0x101c>
   11e28:	ldr	r3, [pc, #3880]	; 12d58 <__assert_fail@plt+0x1020>
   11e2c:	mov	r8, r2
   11e30:	add	fp, sp, #48	; 0x30
   11e34:	add	r9, r3, #436	; 0x1b4
   11e38:	add	r3, sp, #56	; 0x38
   11e3c:	str	r2, [sp, #16]
   11e40:	str	fp, [sp, #48]	; 0x30
   11e44:	str	fp, [sp, #52]	; 0x34
   11e48:	str	r3, [sp, #56]	; 0x38
   11e4c:	str	r3, [sp, #60]	; 0x3c
   11e50:	str	r2, [sp, #20]
   11e54:	str	r8, [sp]
   11e58:	mov	r3, r9
   11e5c:	mov	r2, r7
   11e60:	mov	r1, r5
   11e64:	mov	r0, r4
   11e68:	bl	11ab0 <getopt_long@plt>
   11e6c:	cmn	r0, #1
   11e70:	beq	121d8 <__assert_fail@plt+0x4a0>
   11e74:	cmp	r0, #73	; 0x49
   11e78:	ble	11efc <__assert_fail@plt+0x1c4>
   11e7c:	ldr	sl, [pc, #3800]	; 12d5c <__assert_fail@plt+0x1024>
   11e80:	add	r2, sp, #40	; 0x28
   11e84:	mov	r3, #74	; 0x4a
   11e88:	cmp	r0, r3
   11e8c:	blt	11ed8 <__assert_fail@plt+0x1a0>
   11e90:	beq	11ec0 <__assert_fail@plt+0x188>
   11e94:	mov	ip, sl
   11e98:	ldr	r1, [ip, #4]!
   11e9c:	cmp	r0, r1
   11ea0:	movlt	r3, #0
   11ea4:	movge	r3, #1
   11ea8:	cmp	r1, #0
   11eac:	moveq	r3, #0
   11eb0:	cmp	r3, #0
   11eb4:	beq	11ed8 <__assert_fail@plt+0x1a0>
   11eb8:	cmp	r0, r1
   11ebc:	bne	11e98 <__assert_fail@plt+0x160>
   11ec0:	ldr	r3, [r2]
   11ec4:	cmp	r3, #0
   11ec8:	streq	r0, [r2]
   11ecc:	beq	11ed8 <__assert_fail@plt+0x1a0>
   11ed0:	cmp	r0, r3
   11ed4:	bne	12a50 <__assert_fail@plt+0xd18>
   11ed8:	ldr	r3, [sl, #64]!	; 0x40
   11edc:	add	r2, r2, #4
   11ee0:	cmp	r0, r3
   11ee4:	movlt	r1, #0
   11ee8:	movge	r1, #1
   11eec:	cmp	r3, #0
   11ef0:	moveq	r1, #0
   11ef4:	cmp	r1, #0
   11ef8:	bne	11e88 <__assert_fail@plt+0x150>
   11efc:	sub	r0, r0, #74	; 0x4a
   11f00:	cmp	r0, #54	; 0x36
   11f04:	ldrls	pc, [pc, r0, lsl #2]
   11f08:	b	1295c <__assert_fail@plt+0xc24>
   11f0c:	andeq	r2, r1, ip, asr #2
   11f10:	andeq	r2, r1, ip, asr r9
   11f14:	andeq	r2, r1, ip, asr r9
   11f18:	andeq	r2, r1, ip, asr r9
   11f1c:	andeq	r2, r1, ip, asr r9
   11f20:	andeq	r2, r1, ip, asr r9
   11f24:	andeq	r2, r1, ip, asr r9
   11f28:	andeq	r2, r1, ip, asr r9
   11f2c:	andeq	r2, r1, ip, asr r9
   11f30:	andeq	r2, r1, ip, asr r9
   11f34:	andeq	r2, r1, ip, asr r9
   11f38:	andeq	r2, r1, ip, asr r9
   11f3c:	andeq	r2, r1, r4, lsl #2
   11f40:	strdeq	r2, [r1], -r4
   11f44:	andeq	r2, r1, ip, asr r9
   11f48:	andeq	r2, r1, ip, asr r9
   11f4c:	andeq	r2, r1, ip, asr r9
   11f50:	andeq	r2, r1, ip, asr r9
   11f54:	andeq	r2, r1, ip, asr r9
   11f58:	andeq	r2, r1, ip, asr r9
   11f5c:	andeq	r2, r1, ip, asr r9
   11f60:	andeq	r2, r1, ip, asr r9
   11f64:	andeq	r2, r1, ip, asr r9
   11f68:	andeq	r2, r1, ip, asr r9
   11f6c:	andeq	r2, r1, ip, asr r9
   11f70:	andeq	r2, r1, ip, asr r9
   11f74:	andeq	r2, r1, ip, asr r9
   11f78:	andeq	r2, r1, ip, asr r9
   11f7c:	andeq	r2, r1, ip, asr r9
   11f80:	andeq	r2, r1, ip, asr r9
   11f84:	andeq	r2, r1, r0, lsl r7
   11f88:	andeq	r2, r1, ip, asr r9
   11f8c:	andeq	r2, r1, ip, asr r9
   11f90:	andeq	r2, r1, ip, asr r9
   11f94:	andeq	r2, r1, r4, ror #1
   11f98:	andeq	r2, r1, ip, asr r9
   11f9c:	ldrdeq	r2, [r1], -r4
   11fa0:	andeq	r2, r1, r4, asr #1
   11fa4:	muleq	r1, r8, r0
   11fa8:	andeq	r2, r1, ip, asr r9
   11fac:	andeq	r2, r1, r4, lsl #1
   11fb0:	andeq	r2, r1, ip, asr r9
   11fb4:	andeq	r2, r1, r8, lsl r0
   11fb8:	andeq	r2, r1, r8
   11fbc:	andeq	r2, r1, ip, asr r9
   11fc0:	andeq	r2, r1, ip, asr r9
   11fc4:	andeq	r2, r1, ip, asr r9
   11fc8:	andeq	r2, r1, ip, asr r9
   11fcc:	andeq	r2, r1, ip, asr r9
   11fd0:	andeq	r2, r1, ip, asr r9
   11fd4:	andeq	r2, r1, ip, asr r9
   11fd8:	andeq	r2, r1, ip, asr r9
   11fdc:	andeq	r2, r1, ip, asr r9
   11fe0:	andeq	r2, r1, ip, asr r9
   11fe4:	andeq	r1, r1, r8, ror #31
   11fe8:	ldr	r2, [pc, #3440]	; 12d60 <__assert_fail@plt+0x1028>
   11fec:	mov	r3, #0
   11ff0:	str	r3, [r2, #4]!
   11ff4:	add	r3, r3, #1
   11ff8:	cmp	r3, #11
   11ffc:	bne	11ff0 <__assert_fail@plt+0x2b8>
   12000:	str	r3, [r6, #16]
   12004:	b	11e54 <__assert_fail@plt+0x11c>
   12008:	ldrb	r3, [sp, #112]	; 0x70
   1200c:	orr	r3, r3, #16
   12010:	strb	r3, [sp, #112]	; 0x70
   12014:	b	11e54 <__assert_fail@plt+0x11c>
   12018:	ldr	r3, [pc, #3396]	; 12d64 <__assert_fail@plt+0x102c>
   1201c:	ldr	r2, [pc, #3396]	; 12d68 <__assert_fail@plt+0x1030>
   12020:	str	r4, [sp, #24]
   12024:	ldr	r3, [r3]
   12028:	str	r5, [sp, #28]
   1202c:	ldr	r0, [pc, #3384]	; 12d6c <__assert_fail@plt+0x1034>
   12030:	mov	sl, #0
   12034:	mov	r4, r2
   12038:	mov	r5, r3
   1203c:	b	12044 <__assert_fail@plt+0x30c>
   12040:	ldr	r0, [r4], #4
   12044:	mov	r1, r5
   12048:	bl	11894 <strcmp@plt>
   1204c:	cmp	r0, #0
   12050:	beq	1215c <__assert_fail@plt+0x424>
   12054:	add	sl, sl, #1
   12058:	cmp	sl, #7
   1205c:	bne	12040 <__assert_fail@plt+0x308>
   12060:	mov	r2, #5
   12064:	ldr	r1, [pc, #3332]	; 12d70 <__assert_fail@plt+0x1038>
   12068:	mov	r0, #0
   1206c:	bl	11984 <dcgettext@plt>
   12070:	ldr	r3, [pc, #3308]	; 12d64 <__assert_fail@plt+0x102c>
   12074:	ldr	r2, [r3]
   12078:	mov	r1, r0
   1207c:	mov	r0, #1
   12080:	bl	11be8 <errx@plt>
   12084:	ldrb	r3, [sp, #112]	; 0x70
   12088:	bic	r3, r3, #65	; 0x41
   1208c:	orr	r3, r3, #65	; 0x41
   12090:	strb	r3, [sp, #112]	; 0x70
   12094:	b	11e54 <__assert_fail@plt+0x11c>
   12098:	ldr	r3, [pc, #3268]	; 12d64 <__assert_fail@plt+0x102c>
   1209c:	mov	r2, #5
   120a0:	ldr	r1, [pc, #3276]	; 12d74 <__assert_fail@plt+0x103c>
   120a4:	mov	r0, #0
   120a8:	ldr	sl, [r3]
   120ac:	bl	11984 <dcgettext@plt>
   120b0:	mov	r1, r0
   120b4:	mov	r0, sl
   120b8:	bl	15248 <__assert_fail@plt+0x3510>
   120bc:	str	r0, [sp, #64]	; 0x40
   120c0:	b	11e54 <__assert_fail@plt+0x11c>
   120c4:	ldr	r3, [pc, #3224]	; 12d64 <__assert_fail@plt+0x102c>
   120c8:	ldr	r3, [r3]
   120cc:	str	r3, [sp, #20]
   120d0:	b	11e54 <__assert_fail@plt+0x11c>
   120d4:	ldrb	r3, [sp, #112]	; 0x70
   120d8:	orr	r3, r3, #32
   120dc:	strb	r3, [sp, #112]	; 0x70
   120e0:	b	11e54 <__assert_fail@plt+0x11c>
   120e4:	ldrb	r3, [sp, #112]	; 0x70
   120e8:	orr	r3, r3, #8
   120ec:	strb	r3, [sp, #112]	; 0x70
   120f0:	b	11e54 <__assert_fail@plt+0x11c>
   120f4:	ldrb	r3, [sp, #112]	; 0x70
   120f8:	orr	r3, r3, #64	; 0x40
   120fc:	strb	r3, [sp, #112]	; 0x70
   12100:	b	11e54 <__assert_fail@plt+0x11c>
   12104:	mov	r2, #5
   12108:	ldr	r1, [pc, #3176]	; 12d78 <__assert_fail@plt+0x1040>
   1210c:	mov	r0, #0
   12110:	bl	11984 <dcgettext@plt>
   12114:	ldr	r2, [pc, #3168]	; 12d7c <__assert_fail@plt+0x1044>
   12118:	ldr	r3, [pc, #3168]	; 12d80 <__assert_fail@plt+0x1048>
   1211c:	ldr	r2, [r2]
   12120:	mov	r1, r0
   12124:	mov	r0, #1
   12128:	bl	11b94 <__printf_chk@plt>
   1212c:	mov	r0, #0
   12130:	ldr	r3, [pc, #3060]	; 12d2c <__assert_fail@plt+0xff4>
   12134:	ldr	r2, [sp, #204]	; 0xcc
   12138:	ldr	r3, [r3]
   1213c:	cmp	r2, r3
   12140:	bne	13014 <__assert_fail@plt+0x12dc>
   12144:	add	sp, sp, #212	; 0xd4
   12148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1214c:	ldrb	r3, [sp, #112]	; 0x70
   12150:	orr	r3, r3, #2
   12154:	strb	r3, [sp, #112]	; 0x70
   12158:	b	11e54 <__assert_fail@plt+0x11c>
   1215c:	ldr	r2, [sp, #108]	; 0x6c
   12160:	mov	r0, #1
   12164:	add	r3, sp, #208	; 0xd0
   12168:	add	r1, r3, sl, lsl #2
   1216c:	cmp	sl, #1
   12170:	add	r3, r2, r0
   12174:	ldr	r2, [sp, #16]
   12178:	moveq	r2, r0
   1217c:	ldrd	r4, [sp, #24]
   12180:	str	r2, [sp, #16]
   12184:	str	r0, [r1, #-128]	; 0xffffff80
   12188:	str	r3, [sp, #108]	; 0x6c
   1218c:	b	11e54 <__assert_fail@plt+0x11c>
   12190:	bl	11900 <getuid@plt>
   12194:	mov	r8, r0
   12198:	bl	119cc <geteuid@plt>
   1219c:	cmp	r8, r0
   121a0:	beq	124c0 <__assert_fail@plt+0x788>
   121a4:	ldr	r3, [pc, #3032]	; 12d84 <__assert_fail@plt+0x104c>
   121a8:	orr	r7, r7, #16777216	; 0x1000000
   121ac:	str	r7, [r6]
   121b0:	ldr	r7, [r3]
   121b4:	bl	11ac8 <getpid@plt>
   121b8:	ldr	r3, [pc, #3016]	; 12d88 <__assert_fail@plt+0x1050>
   121bc:	ldr	r2, [pc, #3016]	; 12d8c <__assert_fail@plt+0x1054>
   121c0:	str	r3, [sp]
   121c4:	mov	r1, #1
   121c8:	mov	r3, r0
   121cc:	mov	r0, r7
   121d0:	bl	11bb8 <__fprintf_chk@plt>
   121d4:	b	11df8 <__assert_fail@plt+0xc0>
   121d8:	ldr	r3, [sp, #108]	; 0x6c
   121dc:	cmp	r3, #0
   121e0:	bne	12204 <__assert_fail@plt+0x4cc>
   121e4:	mov	r3, #1
   121e8:	str	r3, [sp, #80]	; 0x50
   121ec:	str	r3, [sp, #84]	; 0x54
   121f0:	str	r3, [sp, #88]	; 0x58
   121f4:	str	r3, [sp, #92]	; 0x5c
   121f8:	str	r3, [sp, #96]	; 0x60
   121fc:	str	r3, [sp, #100]	; 0x64
   12200:	str	r3, [sp, #104]	; 0x68
   12204:	ldr	r3, [pc, #2948]	; 12d90 <__assert_fail@plt+0x1058>
   12208:	ldr	r3, [r3]
   1220c:	cmp	r3, r4
   12210:	bge	124d8 <__assert_fail@plt+0x7a0>
   12214:	ldr	r0, [sp, #64]	; 0x40
   12218:	cmp	r0, #0
   1221c:	bne	13018 <__assert_fail@plt+0x12e0>
   12220:	mov	r2, #5
   12224:	ldr	r1, [pc, #2920]	; 12d94 <__assert_fail@plt+0x105c>
   12228:	ldr	r4, [r5, r3, lsl #2]
   1222c:	bl	11984 <dcgettext@plt>
   12230:	mov	r1, r0
   12234:	mov	r0, r4
   12238:	bl	15300 <__assert_fail@plt+0x35c8>
   1223c:	ldrb	r3, [sp, #112]	; 0x70
   12240:	ldr	ip, [r6, #16]
   12244:	bic	r2, r3, #4
   12248:	lsr	r3, r3, #3
   1224c:	eor	r3, r3, #1
   12250:	and	r3, r3, #1
   12254:	cmp	ip, #0
   12258:	orr	r3, r2, r3, lsl #2
   1225c:	strb	r3, [sp, #112]	; 0x70
   12260:	strd	r0, [sp, #72]	; 0x48
   12264:	beq	126a0 <__assert_fail@plt+0x968>
   12268:	ldr	r3, [sp, #20]
   1226c:	cmp	r3, #0
   12270:	beq	12298 <__assert_fail@plt+0x560>
   12274:	ldr	r2, [pc, #2844]	; 12d98 <__assert_fail@plt+0x1060>
   12278:	ldr	r3, [pc, #2784]	; 12d60 <__assert_fail@plt+0x1028>
   1227c:	str	r2, [sp]
   12280:	ldr	r0, [sp, #20]
   12284:	add	r1, r3, #4
   12288:	mov	r2, #22
   1228c:	bl	15ca4 <__assert_fail@plt+0x3f6c>
   12290:	cmp	r0, #0
   12294:	blt	12a2c <__assert_fail@plt+0xcf4>
   12298:	mov	r0, #0
   1229c:	bl	11d20 <scols_init_debug@plt>
   122a0:	bl	14450 <__assert_fail@plt+0x2718>
   122a4:	cmp	r0, #0
   122a8:	str	r0, [r6, #4]
   122ac:	beq	12ffc <__assert_fail@plt+0x12c4>
   122b0:	ldr	r2, [r6, #16]
   122b4:	cmp	r2, #0
   122b8:	beq	1231c <__assert_fail@plt+0x5e4>
   122bc:	ldr	r3, [r6, #20]
   122c0:	cmp	r3, #9
   122c4:	beq	125d8 <__assert_fail@plt+0x8a0>
   122c8:	ldr	r1, [pc, #2764]	; 12d9c <__assert_fail@plt+0x1064>
   122cc:	mov	r3, #0
   122d0:	b	122e0 <__assert_fail@plt+0x5a8>
   122d4:	ldr	r0, [r1], #4
   122d8:	cmp	r0, #9
   122dc:	beq	125d8 <__assert_fail@plt+0x8a0>
   122e0:	add	r3, r3, #1
   122e4:	cmp	r3, r2
   122e8:	bne	122d4 <__assert_fail@plt+0x59c>
   122ec:	ldr	r3, [r6, #20]
   122f0:	cmp	r3, #10
   122f4:	beq	125a8 <__assert_fail@plt+0x870>
   122f8:	ldr	r1, [pc, #2716]	; 12d9c <__assert_fail@plt+0x1064>
   122fc:	mov	r3, #0
   12300:	b	12310 <__assert_fail@plt+0x5d8>
   12304:	ldr	r0, [r1], #4
   12308:	cmp	r0, #10
   1230c:	beq	125a8 <__assert_fail@plt+0x870>
   12310:	add	r3, r3, #1
   12314:	cmp	r3, r2
   12318:	bcc	12304 <__assert_fail@plt+0x5cc>
   1231c:	ldr	r3, [r6]
   12320:	tst	r3, #4
   12324:	bne	12664 <__assert_fail@plt+0x92c>
   12328:	bl	16880 <__assert_fail@plt+0x4b48>
   1232c:	subs	r5, r0, #0
   12330:	bne	12358 <__assert_fail@plt+0x620>
   12334:	b	12a34 <__assert_fail@plt+0xcfc>
   12338:	ldr	r1, [sp, #32]
   1233c:	mov	r0, fp
   12340:	bl	133ac <__assert_fail@plt+0x1674>
   12344:	add	r3, r0, #2
   12348:	bic	r3, r3, #2
   1234c:	cmn	r0, #13
   12350:	cmpne	r3, #0
   12354:	bne	12994 <__assert_fail@plt+0xc5c>
   12358:	add	r1, sp, #32
   1235c:	mov	r0, r5
   12360:	bl	16928 <__assert_fail@plt+0x4bf0>
   12364:	cmp	r0, #0
   12368:	beq	12338 <__assert_fail@plt+0x600>
   1236c:	ldr	r3, [r6]
   12370:	tst	r3, #4
   12374:	bne	129dc <__assert_fail@plt+0xca4>
   12378:	mov	r0, r5
   1237c:	bl	168d0 <__assert_fail@plt+0x4b98>
   12380:	ldr	r3, [r6]
   12384:	tst	r3, #8
   12388:	bne	126d4 <__assert_fail@plt+0x99c>
   1238c:	ldr	sl, [sp, #48]	; 0x30
   12390:	cmp	sl, fp
   12394:	beq	12b70 <__assert_fail@plt+0xe38>
   12398:	sub	r7, sl, #112	; 0x70
   1239c:	mov	r5, #0
   123a0:	sub	r3, sl, #136	; 0x88
   123a4:	str	r3, [sp, #16]
   123a8:	ldrd	r8, [r7], #8
   123ac:	orrs	r3, r8, r9
   123b0:	bne	123c8 <__assert_fail@plt+0x690>
   123b4:	add	r5, r5, #1
   123b8:	cmp	r5, #7
   123bc:	bne	123a8 <__assert_fail@plt+0x670>
   123c0:	ldr	sl, [sl]
   123c4:	b	12390 <__assert_fail@plt+0x658>
   123c8:	ldr	r4, [sp, #56]	; 0x38
   123cc:	add	r3, sp, #56	; 0x38
   123d0:	cmp	r4, r3
   123d4:	bne	123ec <__assert_fail@plt+0x6b4>
   123d8:	b	12550 <__assert_fail@plt+0x818>
   123dc:	ldr	r4, [r4]
   123e0:	add	r3, sp, #56	; 0x38
   123e4:	cmp	r4, r3
   123e8:	beq	12550 <__assert_fail@plt+0x818>
   123ec:	ldrd	r2, [r4, #-24]	; 0xffffffe8
   123f0:	cmp	r9, r3
   123f4:	cmpeq	r8, r2
   123f8:	bne	123dc <__assert_fail@plt+0x6a4>
   123fc:	sub	r4, r4, #24
   12400:	cmp	r4, #0
   12404:	beq	12550 <__assert_fail@plt+0x818>
   12408:	add	r3, r4, #32
   1240c:	str	r3, [sp, #20]
   12410:	ldr	r3, [r6]
   12414:	tst	r3, #8
   12418:	bne	12600 <__assert_fail@plt+0x8c8>
   1241c:	ldr	r3, [sp, #48]	; 0x30
   12420:	cmp	r3, fp
   12424:	ldrne	r0, [sl, #-132]	; 0xffffff7c
   12428:	ldrne	ip, [sp, #16]
   1242c:	beq	12460 <__assert_fail@plt+0x728>
   12430:	ldr	r2, [r3, #-136]	; 0xffffff78
   12434:	cmp	r2, r0
   12438:	subeq	r2, r3, #136	; 0x88
   1243c:	streq	r2, [sl, #12]
   12440:	beq	12454 <__assert_fail@plt+0x71c>
   12444:	ldr	r2, [sl, #-136]	; 0xffffff78
   12448:	ldr	r1, [r3, #-132]	; 0xffffff7c
   1244c:	cmp	r1, r2
   12450:	streq	ip, [r3, #12]
   12454:	ldr	r3, [r3]
   12458:	cmp	r3, fp
   1245c:	bne	12430 <__assert_fail@plt+0x6f8>
   12460:	ldr	r3, [r4, #8]
   12464:	ldr	lr, [sp, #16]
   12468:	add	r2, r3, #10
   1246c:	ldr	r1, [r4, #12]
   12470:	ldr	r0, [r4, #36]	; 0x24
   12474:	ldr	ip, [r4, #20]
   12478:	add	r2, lr, r2, lsl #3
   1247c:	add	r3, sl, r3, lsl #3
   12480:	ldr	lr, [sp, #20]
   12484:	add	r1, r1, #1
   12488:	cmp	ip, #0
   1248c:	str	r2, [r4, #36]	; 0x24
   12490:	str	lr, [r3, #-56]	; 0xffffffc8
   12494:	str	r0, [r3, #-52]	; 0xffffffcc
   12498:	str	r2, [r0]
   1249c:	str	r1, [r4, #12]
   124a0:	beq	124b4 <__assert_fail@plt+0x77c>
   124a4:	ldr	r2, [ip]
   124a8:	ldr	r3, [sl, #-136]	; 0xffffff78
   124ac:	cmp	r2, r3
   124b0:	ble	123b4 <__assert_fail@plt+0x67c>
   124b4:	ldr	r3, [sp, #16]
   124b8:	str	r3, [r4, #20]
   124bc:	b	123b4 <__assert_fail@plt+0x67c>
   124c0:	bl	11b58 <getgid@plt>
   124c4:	mov	r8, r0
   124c8:	bl	119f0 <getegid@plt>
   124cc:	cmp	r8, r0
   124d0:	bne	121a4 <__assert_fail@plt+0x46c>
   124d4:	b	11df8 <__assert_fail@plt+0xc0>
   124d8:	ldr	r3, [r6, #16]
   124dc:	cmp	r3, #0
   124e0:	bne	12268 <__assert_fail@plt+0x530>
   124e4:	ldr	r2, [sp, #16]
   124e8:	mov	r0, #3
   124ec:	cmp	r2, #0
   124f0:	mov	r2, #1
   124f4:	str	r3, [r6, #20]
   124f8:	mov	r1, #4
   124fc:	str	r2, [r6, #24]
   12500:	mov	r3, #8
   12504:	mov	r2, #5
   12508:	str	r0, [r6, #28]
   1250c:	str	r1, [r6, #32]
   12510:	str	r2, [r6, #16]
   12514:	str	r3, [r6, #36]	; 0x24
   12518:	beq	12534 <__assert_fail@plt+0x7fc>
   1251c:	mov	r3, #9
   12520:	mov	r2, #7
   12524:	str	r3, [r6, #40]	; 0x28
   12528:	mov	r3, #10
   1252c:	str	r2, [r6, #16]
   12530:	str	r3, [r6, #44]	; 0x2c
   12534:	ldr	r3, [r6, #16]
   12538:	mov	r2, #6
   1253c:	add	r1, r3, #1
   12540:	add	r3, r6, r3, lsl #2
   12544:	str	r1, [r6, #16]
   12548:	str	r2, [r3, #20]
   1254c:	b	12268 <__assert_fail@plt+0x530>
   12550:	mov	r1, #40	; 0x28
   12554:	mov	r0, #1
   12558:	bl	11858 <calloc@plt>
   1255c:	subs	r4, r0, #0
   12560:	beq	126c4 <__assert_fail@plt+0x98c>
   12564:	ldr	r3, [r6]
   12568:	tst	r3, #8
   1256c:	bne	12b20 <__assert_fail@plt+0xde8>
   12570:	ldr	r2, [sp, #60]	; 0x3c
   12574:	add	r1, r4, #32
   12578:	add	r3, r4, #24
   1257c:	add	r0, sp, #56	; 0x38
   12580:	str	r5, [r4, #8]
   12584:	strd	r8, [r4]
   12588:	str	r0, [r4, #24]
   1258c:	str	r2, [r4, #28]
   12590:	str	r1, [r4, #32]
   12594:	str	r1, [r4, #36]	; 0x24
   12598:	str	r3, [sp, #60]	; 0x3c
   1259c:	str	r1, [sp, #20]
   125a0:	str	r3, [r2]
   125a4:	b	12410 <__assert_fail@plt+0x6d8>
   125a8:	ldr	r0, [pc, #2032]	; 12da0 <__assert_fail@plt+0x1068>
   125ac:	bl	118a0 <mnt_new_table_from_file@plt>
   125b0:	cmp	r0, #0
   125b4:	str	r0, [sp, #116]	; 0x74
   125b8:	bne	1231c <__assert_fail@plt+0x5e4>
   125bc:	mov	r2, #5
   125c0:	ldr	r1, [pc, #2012]	; 12da4 <__assert_fail@plt+0x106c>
   125c4:	bl	11984 <dcgettext@plt>
   125c8:	ldr	r2, [pc, #2000]	; 12da0 <__assert_fail@plt+0x1068>
   125cc:	mov	r1, r0
   125d0:	mov	r0, #32
   125d4:	bl	119c0 <err@plt>
   125d8:	mov	r2, #0
   125dc:	mov	r1, #3
   125e0:	mov	r0, #16
   125e4:	bl	11c90 <socket@plt>
   125e8:	ldr	r3, [pc, #1976]	; 12da8 <__assert_fail@plt+0x1070>
   125ec:	ldr	r2, [r6, #16]
   125f0:	cmp	r2, #0
   125f4:	str	r0, [r3]
   125f8:	bne	122ec <__assert_fail@plt+0x5b4>
   125fc:	b	1231c <__assert_fail@plt+0x5e4>
   12600:	ldr	r3, [pc, #1916]	; 12d84 <__assert_fail@plt+0x104c>
   12604:	ldr	r8, [r3]
   12608:	bl	11ac8 <getpid@plt>
   1260c:	ldr	r3, [pc, #1944]	; 12dac <__assert_fail@plt+0x1074>
   12610:	ldr	r2, [pc, #1944]	; 12db0 <__assert_fail@plt+0x1078>
   12614:	str	r3, [sp, #4]
   12618:	ldr	r3, [pc, #1896]	; 12d88 <__assert_fail@plt+0x1050>
   1261c:	mov	r1, #1
   12620:	str	r3, [sp]
   12624:	mov	r3, r0
   12628:	mov	r0, r8
   1262c:	bl	11bb8 <__fprintf_chk@plt>
   12630:	ldrd	r8, [r4]
   12634:	ldr	ip, [pc, #1820]	; 12d58 <__assert_fail@plt+0x1020>
   12638:	ldr	r2, [sp, #16]
   1263c:	strd	r8, [sp, #8]
   12640:	ldr	r3, [r4, #8]
   12644:	ldr	r1, [pc, #1896]	; 12db4 <__assert_fail@plt+0x107c>
   12648:	mov	r0, r4
   1264c:	add	r3, ip, r3, lsl #2
   12650:	ldr	r3, [r3, #376]	; 0x178
   12654:	str	r3, [sp]
   12658:	ldr	r3, [sl, #-136]	; 0xffffff78
   1265c:	bl	13124 <__assert_fail@plt+0x13ec>
   12660:	b	1241c <__assert_fail@plt+0x6e4>
   12664:	ldr	r3, [pc, #1816]	; 12d84 <__assert_fail@plt+0x104c>
   12668:	ldr	r4, [r3]
   1266c:	bl	11ac8 <getpid@plt>
   12670:	ldr	r2, [pc, #1856]	; 12db8 <__assert_fail@plt+0x1080>
   12674:	ldr	r3, [pc, #1804]	; 12d88 <__assert_fail@plt+0x1050>
   12678:	str	r2, [sp, #4]
   1267c:	str	r3, [sp]
   12680:	ldr	r2, [pc, #1832]	; 12db0 <__assert_fail@plt+0x1078>
   12684:	mov	r1, #1
   12688:	mov	r3, r0
   1268c:	mov	r0, r4
   12690:	bl	11bb8 <__fprintf_chk@plt>
   12694:	ldr	r0, [pc, #1824]	; 12dbc <__assert_fail@plt+0x1084>
   12698:	bl	131d0 <__assert_fail@plt+0x1498>
   1269c:	b	12328 <__assert_fail@plt+0x5f0>
   126a0:	mov	r3, #4
   126a4:	str	r3, [r6, #20]
   126a8:	str	r3, [r6, #16]
   126ac:	mov	r2, #8
   126b0:	mov	r3, #6
   126b4:	mov	r1, #5
   126b8:	str	r1, [r6, #24]
   126bc:	strd	r2, [r6, #28]
   126c0:	b	12268 <__assert_fail@plt+0x530>
   126c4:	mov	r2, #40	; 0x28
   126c8:	ldr	r1, [pc, #1776]	; 12dc0 <__assert_fail@plt+0x1088>
   126cc:	mov	r0, #1
   126d0:	bl	119c0 <err@plt>
   126d4:	ldr	r3, [pc, #1704]	; 12d84 <__assert_fail@plt+0x104c>
   126d8:	ldr	r4, [r3]
   126dc:	bl	11ac8 <getpid@plt>
   126e0:	ldr	r2, [pc, #1732]	; 12dac <__assert_fail@plt+0x1074>
   126e4:	ldr	r3, [pc, #1692]	; 12d88 <__assert_fail@plt+0x1050>
   126e8:	str	r2, [sp, #4]
   126ec:	str	r3, [sp]
   126f0:	ldr	r2, [pc, #1720]	; 12db0 <__assert_fail@plt+0x1078>
   126f4:	mov	r1, #1
   126f8:	mov	r3, r0
   126fc:	mov	r0, r4
   12700:	bl	11bb8 <__fprintf_chk@plt>
   12704:	ldr	r0, [pc, #1720]	; 12dc4 <__assert_fail@plt+0x108c>
   12708:	bl	131d0 <__assert_fail@plt+0x1498>
   1270c:	b	1238c <__assert_fail@plt+0x654>
   12710:	ldr	r3, [pc, #1712]	; 12dc8 <__assert_fail@plt+0x1090>
   12714:	mov	r2, #5
   12718:	ldr	r1, [pc, #1708]	; 12dcc <__assert_fail@plt+0x1094>
   1271c:	ldr	r4, [r3]
   12720:	mov	r0, #0
   12724:	bl	11984 <dcgettext@plt>
   12728:	mov	r1, r4
   1272c:	bl	11cb4 <fputs@plt>
   12730:	mov	r2, #5
   12734:	ldr	r1, [pc, #1684]	; 12dd0 <__assert_fail@plt+0x1098>
   12738:	mov	r0, #0
   1273c:	bl	11984 <dcgettext@plt>
   12740:	ldr	r3, [pc, #1588]	; 12d7c <__assert_fail@plt+0x1044>
   12744:	mov	r1, #1
   12748:	mov	r6, #0
   1274c:	ldr	r3, [r3]
   12750:	ldr	r5, [pc, #1660]	; 12dd4 <__assert_fail@plt+0x109c>
   12754:	ldr	r8, [pc, #1660]	; 12dd8 <__assert_fail@plt+0x10a0>
   12758:	mov	r2, r0
   1275c:	mov	r0, r4
   12760:	bl	11bb8 <__fprintf_chk@plt>
   12764:	mov	r1, r4
   12768:	mov	r0, #10
   1276c:	bl	11c24 <fputc@plt>
   12770:	mov	r2, #5
   12774:	ldr	r1, [pc, #1632]	; 12ddc <__assert_fail@plt+0x10a4>
   12778:	mov	r0, r6
   1277c:	bl	11984 <dcgettext@plt>
   12780:	mov	r1, r4
   12784:	bl	11cb4 <fputs@plt>
   12788:	mov	r2, #5
   1278c:	ldr	r1, [pc, #1612]	; 12de0 <__assert_fail@plt+0x10a8>
   12790:	mov	r0, r6
   12794:	bl	11984 <dcgettext@plt>
   12798:	mov	r1, r4
   1279c:	bl	11cb4 <fputs@plt>
   127a0:	mov	r2, #5
   127a4:	ldr	r1, [pc, #1592]	; 12de4 <__assert_fail@plt+0x10ac>
   127a8:	mov	r0, r6
   127ac:	bl	11984 <dcgettext@plt>
   127b0:	mov	r1, r4
   127b4:	bl	11cb4 <fputs@plt>
   127b8:	mov	r2, #5
   127bc:	ldr	r1, [pc, #1572]	; 12de8 <__assert_fail@plt+0x10b0>
   127c0:	mov	r0, r6
   127c4:	bl	11984 <dcgettext@plt>
   127c8:	mov	r1, r4
   127cc:	bl	11cb4 <fputs@plt>
   127d0:	mov	r2, #5
   127d4:	ldr	r1, [pc, #1552]	; 12dec <__assert_fail@plt+0x10b4>
   127d8:	mov	r0, r6
   127dc:	bl	11984 <dcgettext@plt>
   127e0:	mov	r1, r4
   127e4:	bl	11cb4 <fputs@plt>
   127e8:	mov	r2, #5
   127ec:	ldr	r1, [pc, #1532]	; 12df0 <__assert_fail@plt+0x10b8>
   127f0:	mov	r0, r6
   127f4:	bl	11984 <dcgettext@plt>
   127f8:	mov	r1, r4
   127fc:	bl	11cb4 <fputs@plt>
   12800:	mov	r2, #5
   12804:	ldr	r1, [pc, #1512]	; 12df4 <__assert_fail@plt+0x10bc>
   12808:	mov	r0, r6
   1280c:	bl	11984 <dcgettext@plt>
   12810:	mov	r1, r4
   12814:	bl	11cb4 <fputs@plt>
   12818:	mov	r2, #5
   1281c:	ldr	r1, [pc, #1492]	; 12df8 <__assert_fail@plt+0x10c0>
   12820:	mov	r0, r6
   12824:	bl	11984 <dcgettext@plt>
   12828:	mov	r1, r4
   1282c:	bl	11cb4 <fputs@plt>
   12830:	mov	r2, #5
   12834:	ldr	r1, [pc, #1472]	; 12dfc <__assert_fail@plt+0x10c4>
   12838:	mov	r0, r6
   1283c:	bl	11984 <dcgettext@plt>
   12840:	mov	r1, r4
   12844:	bl	11cb4 <fputs@plt>
   12848:	mov	r2, #5
   1284c:	ldr	r1, [pc, #1452]	; 12e00 <__assert_fail@plt+0x10c8>
   12850:	mov	r0, r6
   12854:	bl	11984 <dcgettext@plt>
   12858:	mov	r1, r4
   1285c:	bl	11cb4 <fputs@plt>
   12860:	mov	r2, #5
   12864:	ldr	r1, [pc, #1432]	; 12e04 <__assert_fail@plt+0x10cc>
   12868:	mov	r0, r6
   1286c:	bl	11984 <dcgettext@plt>
   12870:	mov	r1, r4
   12874:	bl	11cb4 <fputs@plt>
   12878:	mov	r2, #5
   1287c:	ldr	r1, [pc, #1412]	; 12e08 <__assert_fail@plt+0x10d0>
   12880:	mov	r0, r6
   12884:	bl	11984 <dcgettext@plt>
   12888:	mov	r1, r4
   1288c:	bl	11cb4 <fputs@plt>
   12890:	mov	r1, r4
   12894:	mov	r0, #10
   12898:	bl	11c24 <fputc@plt>
   1289c:	mov	r2, #5
   128a0:	ldr	r1, [pc, #1380]	; 12e0c <__assert_fail@plt+0x10d4>
   128a4:	mov	r0, r6
   128a8:	bl	11984 <dcgettext@plt>
   128ac:	mov	r2, #5
   128b0:	ldr	r1, [pc, #1368]	; 12e10 <__assert_fail@plt+0x10d8>
   128b4:	mov	r7, r0
   128b8:	mov	r0, r6
   128bc:	bl	11984 <dcgettext@plt>
   128c0:	ldr	r2, [pc, #1356]	; 12e14 <__assert_fail@plt+0x10dc>
   128c4:	mov	r3, r7
   128c8:	str	r2, [sp]
   128cc:	ldr	r1, [pc, #1348]	; 12e18 <__assert_fail@plt+0x10e0>
   128d0:	ldr	r2, [pc, #1348]	; 12e1c <__assert_fail@plt+0x10e4>
   128d4:	str	r0, [sp, #4]
   128d8:	mov	r0, #1
   128dc:	bl	11b94 <__printf_chk@plt>
   128e0:	ldr	r1, [pc, #1336]	; 12e20 <__assert_fail@plt+0x10e8>
   128e4:	mov	r2, #5
   128e8:	mov	r0, r6
   128ec:	bl	11984 <dcgettext@plt>
   128f0:	mov	r1, r4
   128f4:	bl	11cb4 <fputs@plt>
   128f8:	ldr	r1, [r5, #20]
   128fc:	mov	r2, #5
   12900:	mov	r0, #0
   12904:	ldr	r7, [r5]
   12908:	bl	11984 <dcgettext@plt>
   1290c:	add	r6, r6, #1
   12910:	mov	r3, r7
   12914:	mov	r2, r8
   12918:	mov	r1, #1
   1291c:	add	r5, r5, #32
   12920:	str	r0, [sp]
   12924:	mov	r0, r4
   12928:	bl	11bb8 <__fprintf_chk@plt>
   1292c:	cmp	r6, #11
   12930:	bne	128f8 <__assert_fail@plt+0xbc0>
   12934:	mov	r2, #5
   12938:	ldr	r1, [pc, #1252]	; 12e24 <__assert_fail@plt+0x10ec>
   1293c:	mov	r0, #0
   12940:	bl	11984 <dcgettext@plt>
   12944:	ldr	r2, [pc, #1244]	; 12e28 <__assert_fail@plt+0x10f0>
   12948:	mov	r1, r0
   1294c:	mov	r0, #1
   12950:	bl	11b94 <__printf_chk@plt>
   12954:	mov	r0, #0
   12958:	bl	11ad4 <exit@plt>
   1295c:	ldr	r3, [pc, #1056]	; 12d84 <__assert_fail@plt+0x104c>
   12960:	mov	r2, #5
   12964:	ldr	r1, [pc, #1216]	; 12e2c <__assert_fail@plt+0x10f4>
   12968:	mov	r0, #0
   1296c:	ldr	r4, [r3]
   12970:	bl	11984 <dcgettext@plt>
   12974:	ldr	r3, [pc, #1024]	; 12d7c <__assert_fail@plt+0x1044>
   12978:	mov	r1, #1
   1297c:	ldr	r3, [r3]
   12980:	mov	r2, r0
   12984:	mov	r0, r4
   12988:	bl	11bb8 <__fprintf_chk@plt>
   1298c:	mov	r0, #1
   12990:	bl	11ad4 <exit@plt>
   12994:	ldr	r3, [r6]
   12998:	mov	r4, r0
   1299c:	tst	r3, #4
   129a0:	bne	129e0 <__assert_fail@plt+0xca8>
   129a4:	mov	r0, r5
   129a8:	bl	168d0 <__assert_fail@plt+0x4b98>
   129ac:	ldr	r0, [sp, #116]	; 0x74
   129b0:	bl	11ca8 <mnt_free_table@plt>
   129b4:	ldr	r3, [pc, #1004]	; 12da8 <__assert_fail@plt+0x1070>
   129b8:	ldr	r0, [r3]
   129bc:	cmp	r0, #0
   129c0:	blt	129c8 <__assert_fail@plt+0xc90>
   129c4:	bl	11ce4 <close@plt>
   129c8:	ldr	r0, [r6, #4]
   129cc:	bl	1445c <__assert_fail@plt+0x2724>
   129d0:	adds	r0, r4, #0
   129d4:	movne	r0, #1
   129d8:	b	12130 <__assert_fail@plt+0x3f8>
   129dc:	mov	r4, #0
   129e0:	ldr	r3, [pc, #924]	; 12d84 <__assert_fail@plt+0x104c>
   129e4:	ldr	r7, [r3]
   129e8:	bl	11ac8 <getpid@plt>
   129ec:	ldr	r2, [pc, #964]	; 12db8 <__assert_fail@plt+0x1080>
   129f0:	ldr	r3, [pc, #912]	; 12d88 <__assert_fail@plt+0x1050>
   129f4:	str	r2, [sp, #4]
   129f8:	str	r3, [sp]
   129fc:	ldr	r2, [pc, #940]	; 12db0 <__assert_fail@plt+0x1078>
   12a00:	mov	r1, #1
   12a04:	mov	r3, r0
   12a08:	mov	r0, r7
   12a0c:	bl	11bb8 <__fprintf_chk@plt>
   12a10:	ldr	r0, [pc, #1048]	; 12e30 <__assert_fail@plt+0x10f8>
   12a14:	bl	131d0 <__assert_fail@plt+0x1498>
   12a18:	mov	r0, r5
   12a1c:	bl	168d0 <__assert_fail@plt+0x4b98>
   12a20:	cmp	r4, #0
   12a24:	bne	129ac <__assert_fail@plt+0xc74>
   12a28:	b	12380 <__assert_fail@plt+0x648>
   12a2c:	mov	r0, #1
   12a30:	b	12130 <__assert_fail@plt+0x3f8>
   12a34:	bl	11b1c <__errno_location@plt>
   12a38:	ldr	r3, [r6]
   12a3c:	tst	r3, #4
   12a40:	ldr	r4, [r0]
   12a44:	rsb	r4, r4, #0
   12a48:	beq	12a18 <__assert_fail@plt+0xce0>
   12a4c:	b	129e0 <__assert_fail@plt+0xca8>
   12a50:	ldr	r5, [pc, #812]	; 12d84 <__assert_fail@plt+0x104c>
   12a54:	mov	r2, #5
   12a58:	ldr	r1, [pc, #980]	; 12e34 <__assert_fail@plt+0x10fc>
   12a5c:	mov	r0, #0
   12a60:	ldr	r9, [r5]
   12a64:	bl	11984 <dcgettext@plt>
   12a68:	ldr	r3, [pc, #780]	; 12d7c <__assert_fail@plt+0x1044>
   12a6c:	mov	r1, #1
   12a70:	sub	r4, sl, #4
   12a74:	ldr	r3, [r3]
   12a78:	add	sl, sl, #56	; 0x38
   12a7c:	ldr	r6, [pc, #948]	; 12e38 <__assert_fail@plt+0x1100>
   12a80:	ldr	r8, [pc, #948]	; 12e3c <__assert_fail@plt+0x1104>
   12a84:	ldr	r7, [pc, #948]	; 12e40 <__assert_fail@plt+0x1108>
   12a88:	mov	r2, r0
   12a8c:	mov	r0, r9
   12a90:	bl	11bb8 <__fprintf_chk@plt>
   12a94:	ldr	r0, [r4, #4]!
   12a98:	cmp	r0, #0
   12a9c:	beq	12af4 <__assert_fail@plt+0xdbc>
   12aa0:	cmp	r0, #74	; 0x4a
   12aa4:	beq	12b08 <__assert_fail@plt+0xdd0>
   12aa8:	ldr	r2, [pc, #916]	; 12e44 <__assert_fail@plt+0x110c>
   12aac:	b	12ac0 <__assert_fail@plt+0xd88>
   12ab0:	add	r2, r2, #16
   12ab4:	ldr	r1, [r2, #12]
   12ab8:	cmp	r0, r1
   12abc:	beq	12b0c <__assert_fail@plt+0xdd4>
   12ac0:	ldr	r3, [r2, #16]
   12ac4:	cmp	r3, #0
   12ac8:	bne	12ab0 <__assert_fail@plt+0xd78>
   12acc:	sub	r3, r0, #33	; 0x21
   12ad0:	cmp	r3, #93	; 0x5d
   12ad4:	bhi	12aec <__assert_fail@plt+0xdb4>
   12ad8:	mov	r3, r0
   12adc:	mov	r2, r7
   12ae0:	mov	r1, #1
   12ae4:	ldr	r0, [r5]
   12ae8:	bl	11bb8 <__fprintf_chk@plt>
   12aec:	cmp	sl, r4
   12af0:	bne	12a94 <__assert_fail@plt+0xd5c>
   12af4:	ldr	r1, [r5]
   12af8:	mov	r0, #10
   12afc:	bl	11c24 <fputc@plt>
   12b00:	mov	r0, #1
   12b04:	bl	11ad4 <exit@plt>
   12b08:	mov	r3, r8
   12b0c:	mov	r2, r6
   12b10:	mov	r1, #1
   12b14:	ldr	r0, [r5]
   12b18:	bl	11bb8 <__fprintf_chk@plt>
   12b1c:	b	12aec <__assert_fail@plt+0xdb4>
   12b20:	ldr	r3, [pc, #604]	; 12d84 <__assert_fail@plt+0x104c>
   12b24:	ldr	r3, [r3]
   12b28:	str	r3, [sp, #20]
   12b2c:	bl	11ac8 <getpid@plt>
   12b30:	ldr	r2, [pc, #628]	; 12dac <__assert_fail@plt+0x1074>
   12b34:	mov	r1, #1
   12b38:	str	r2, [sp, #4]
   12b3c:	ldr	r2, [pc, #580]	; 12d88 <__assert_fail@plt+0x1050>
   12b40:	str	r2, [sp]
   12b44:	ldr	r2, [pc, #612]	; 12db0 <__assert_fail@plt+0x1078>
   12b48:	mov	r3, r0
   12b4c:	ldr	r0, [sp, #20]
   12b50:	bl	11bb8 <__fprintf_chk@plt>
   12b54:	ldr	r3, [pc, #748]	; 12e48 <__assert_fail@plt+0x1110>
   12b58:	strd	r8, [sp]
   12b5c:	ldr	r1, [pc, #744]	; 12e4c <__assert_fail@plt+0x1114>
   12b60:	ldr	r2, [r3, r5, lsl #2]
   12b64:	mov	r0, r4
   12b68:	bl	13124 <__assert_fail@plt+0x13ec>
   12b6c:	b	12570 <__assert_fail@plt+0x838>
   12b70:	ldr	r3, [sp, #56]	; 0x38
   12b74:	add	r2, sp, #56	; 0x38
   12b78:	cmp	r3, r2
   12b7c:	beq	12cb4 <__assert_fail@plt+0xf7c>
   12b80:	mov	r2, #84	; 0x54
   12b84:	add	r0, sp, #120	; 0x78
   12b88:	mov	r1, #0
   12b8c:	bl	11b64 <memset@plt>
   12b90:	ldr	r2, [sp, #60]	; 0x3c
   12b94:	mov	r3, #0
   12b98:	mov	r7, r3
   12b9c:	str	r3, [r2]
   12ba0:	ldr	lr, [sp, #56]	; 0x38
   12ba4:	mov	sl, r3
   12ba8:	mov	r3, lr
   12bac:	cmp	r3, #0
   12bb0:	beq	12f84 <__assert_fail@plt+0x124c>
   12bb4:	add	r8, sp, #120	; 0x78
   12bb8:	mov	r9, #0
   12bbc:	ldr	lr, [r3]
   12bc0:	str	sl, [r3]
   12bc4:	ldr	ip, [r8], #4
   12bc8:	cmp	ip, #0
   12bcc:	beq	12eac <__assert_fail@plt+0x1174>
   12bd0:	cmp	r3, #0
   12bd4:	addeq	r5, sp, #32
   12bd8:	beq	12c24 <__assert_fail@plt+0xeec>
   12bdc:	mov	r4, ip
   12be0:	add	r5, sp, #32
   12be4:	mov	ip, r3
   12be8:	ldrd	r0, [r4, #-24]	; 0xffffffe8
   12bec:	ldrd	r2, [ip, #-24]	; 0xffffffe8
   12bf0:	cmp	r1, r3
   12bf4:	cmpeq	r0, r2
   12bf8:	strhi	ip, [r5]
   12bfc:	strls	r4, [r5]
   12c00:	movhi	r5, ip
   12c04:	movls	r5, r4
   12c08:	ldrhi	ip, [ip]
   12c0c:	ldrls	r4, [r4]
   12c10:	cmp	r4, #0
   12c14:	cmpne	ip, #0
   12c18:	bne	12be8 <__assert_fail@plt+0xeb0>
   12c1c:	cmp	r4, #0
   12c20:	movne	ip, r4
   12c24:	str	ip, [r5]
   12c28:	ldr	r3, [sp, #32]
   12c2c:	add	r9, r9, #1
   12c30:	str	sl, [r8, #-4]
   12c34:	b	12bc4 <__assert_fail@plt+0xe8c>
   12c38:	add	r3, sp, #208	; 0xd0
   12c3c:	add	r7, r3, r7, lsl #2
   12c40:	add	ip, sp, #56	; 0x38
   12c44:	ldr	r4, [r7, #-88]	; 0xffffffa8
   12c48:	b	12c78 <__assert_fail@plt+0xf40>
   12c4c:	ldrd	r0, [r4, #-24]	; 0xffffffe8
   12c50:	ldrd	r2, [lr, #-24]	; 0xffffffe8
   12c54:	cmp	r1, r3
   12c58:	cmpeq	r0, r2
   12c5c:	strhi	lr, [ip]
   12c60:	strls	r4, [ip]
   12c64:	strhi	ip, [lr, #4]
   12c68:	strls	ip, [r4, #4]
   12c6c:	ldrhi	lr, [lr]
   12c70:	ldrls	r4, [r4]
   12c74:	ldr	ip, [ip]
   12c78:	cmp	r4, #0
   12c7c:	cmpne	lr, #0
   12c80:	bne	12c4c <__assert_fail@plt+0xf14>
   12c84:	cmp	r4, #0
   12c88:	movne	lr, r4
   12c8c:	str	lr, [ip]
   12c90:	ldr	r3, [ip]
   12c94:	ldr	r2, [r3]
   12c98:	str	ip, [r3, #4]
   12c9c:	cmp	r2, #0
   12ca0:	mov	ip, r3
   12ca4:	bne	12c90 <__assert_fail@plt+0xf58>
   12ca8:	add	r3, sp, #56	; 0x38
   12cac:	str	r3, [ip]
   12cb0:	str	ip, [sp, #60]	; 0x3c
   12cb4:	ldrd	r0, [sp, #72]	; 0x48
   12cb8:	orrs	r3, r0, r1
   12cbc:	ldrne	r4, [sp, #56]	; 0x38
   12cc0:	bne	12cdc <__assert_fail@plt+0xfa4>
   12cc4:	b	12ed8 <__assert_fail@plt+0x11a0>
   12cc8:	ldrd	r2, [r4, #-24]	; 0xffffffe8
   12ccc:	cmp	r1, r3
   12cd0:	cmpeq	r0, r2
   12cd4:	beq	12d08 <__assert_fail@plt+0xfd0>
   12cd8:	ldr	r4, [r4]
   12cdc:	add	r3, sp, #56	; 0x38
   12ce0:	cmp	r4, r3
   12ce4:	bne	12cc8 <__assert_fail@plt+0xf90>
   12ce8:	mov	r2, #5
   12cec:	ldr	r1, [pc, #348]	; 12e50 <__assert_fail@plt+0x1118>
   12cf0:	mov	r0, #0
   12cf4:	bl	11984 <dcgettext@plt>
   12cf8:	ldrd	r2, [sp, #72]	; 0x48
   12cfc:	mov	r1, r0
   12d00:	mov	r0, #1
   12d04:	bl	11be8 <errx@plt>
   12d08:	subs	r9, r4, #24
   12d0c:	beq	12ce8 <__assert_fail@plt+0xfb0>
   12d10:	mov	r0, fp
   12d14:	bl	13990 <__assert_fail@plt+0x1c58>
   12d18:	subs	r8, r0, #0
   12d1c:	movne	r7, r4
   12d20:	ldrne	r5, [r7, #8]!
   12d24:	bne	12e60 <__assert_fail@plt+0x1128>
   12d28:	b	12ff4 <__assert_fail@plt+0x12bc>
   12d2c:	andeq	r7, r2, r8, lsr #26
   12d30:	andeq	r7, r1, r4, lsr #6
   12d34:			; <UNDEFINED> instruction: 0x000172bc
   12d38:	ldrdeq	r7, [r1], -r0
   12d3c:	andeq	r8, r2, r0, lsr r0
   12d40:	andeq	r3, r1, r0, asr #23
   12d44:	ldrdeq	r7, [r1], -ip
   12d48:	andeq	r7, r1, r8, ror #5
   12d4c:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   12d50:	andeq	r8, r2, r8, lsr r0
   12d54:	ldrdeq	r7, [r1], -r0
   12d58:	muleq	r1, r8, sp
   12d5c:	andeq	r7, r1, ip, lsl r0
   12d60:	andeq	r8, r2, r0, asr #32
   12d64:	andeq	r8, r2, r8, lsr #32
   12d68:	andeq	r6, r1, r4, lsl pc
   12d6c:			; <UNDEFINED> instruction: 0x000172b0
   12d70:	andeq	r7, r1, r0, lsl #16
   12d74:	andeq	r7, r1, r4, ror r3
   12d78:	andeq	r7, r1, r4, asr r3
   12d7c:	andeq	r8, r2, r0, lsl r0
   12d80:	andeq	r7, r1, r0, ror #6
   12d84:	andeq	r8, r2, r0, lsr #32
   12d88:	andeq	r7, r1, r0, lsl r1
   12d8c:	andeq	r7, r1, ip, ror #5
   12d90:	andeq	r8, r2, r8, lsl r0
   12d94:	andeq	r7, r1, r0, lsl r7
   12d98:			; <UNDEFINED> instruction: 0x000132b0
   12d9c:	andeq	r8, r2, r8, asr #32
   12da0:	andeq	r7, r1, r0, ror #14
   12da4:	andeq	r7, r1, ip, asr #14
   12da8:	andeq	r8, r2, r8
   12dac:	strheq	r7, [r1], -ip
   12db0:	strdeq	r7, [r1], -r8
   12db4:			; <UNDEFINED> instruction: 0x000177b8
   12db8:	andeq	r7, r1, r8, lsl #2
   12dbc:	andeq	r7, r1, r8, ror r7
   12dc0:	andeq	r7, r1, r0, lsr r1
   12dc4:	muleq	r1, r8, r7
   12dc8:	andeq	r8, r2, r4, lsr #32
   12dcc:	andeq	r7, r1, ip, lsl #7
   12dd0:	muleq	r1, r8, r3
   12dd4:			; <UNDEFINED> instruction: 0x00016db0
   12dd8:	andeq	r7, r1, r8, ror r6
   12ddc:			; <UNDEFINED> instruction: 0x000173b8
   12de0:	ldrdeq	r7, [r1], -r4
   12de4:	andeq	r7, r1, r0, ror #7
   12de8:	andeq	r7, r1, r0, lsl r4
   12dec:	andeq	r7, r1, r0, asr #8
   12df0:	andeq	r7, r1, r0, ror r4
   12df4:	andeq	r7, r1, ip, lsr #9
   12df8:	ldrdeq	r7, [r1], -r8
   12dfc:	andeq	r7, r1, ip, lsl #10
   12e00:	andeq	r7, r1, r0, asr #10
   12e04:	andeq	r7, r1, r8, ror r5
   12e08:			; <UNDEFINED> instruction: 0x000175b8
   12e0c:	andeq	r7, r1, r8, lsl #12
   12e10:	andeq	r7, r1, ip, lsl r6
   12e14:	andeq	r7, r1, ip, asr #12
   12e18:	andeq	r7, r1, r8, lsr r6
   12e1c:	andeq	r7, r1, ip, lsr #12
   12e20:	andeq	r7, r1, ip, asr r6
   12e24:	andeq	r7, r1, r4, lsl #13
   12e28:	andeq	r7, r1, r0, lsr #13
   12e2c:	andeq	r7, r1, r8, lsr #13
   12e30:	andeq	r7, r1, r8, lsl #15
   12e34:	andeq	r7, r1, r8, lsr #6
   12e38:	strdeq	r7, [r1], -r8
   12e3c:			; <UNDEFINED> instruction: 0x000172b4
   12e40:	andeq	r7, r1, ip, asr #6
   12e44:	andeq	r6, r1, ip, asr #30
   12e48:	andeq	r6, r1, r0, lsl pc
   12e4c:	andeq	r7, r1, ip, lsr #15
   12e50:	ldrdeq	r7, [r1], -ip
   12e54:	andeq	r7, r1, ip, lsr #14
   12e58:	andeq	r7, r1, r0, ror #13
   12e5c:	ldr	r5, [r5]
   12e60:	cmp	r5, r7
   12e64:	beq	12e94 <__assert_fail@plt+0x115c>
   12e68:	ldr	r2, [r4, #-16]
   12e6c:	add	r2, r2, #10
   12e70:	sub	r2, r5, r2, lsl #3
   12e74:	ldr	r3, [r2, #144]	; 0x90
   12e78:	cmp	r3, #0
   12e7c:	bne	12e5c <__assert_fail@plt+0x1124>
   12e80:	mov	r3, r9
   12e84:	mov	r1, r8
   12e88:	mov	r0, fp
   12e8c:	bl	141f4 <__assert_fail@plt+0x24bc>
   12e90:	b	12e5c <__assert_fail@plt+0x1124>
   12e94:	mov	r0, r8
   12e98:	bl	11c18 <scols_print_table@plt>
   12e9c:	mov	r0, r8
   12ea0:	bl	11a8c <scols_unref_table@plt>
   12ea4:	mov	r4, #0
   12ea8:	b	129ac <__assert_fail@plt+0xc74>
   12eac:	cmp	r9, r7
   12eb0:	bls	12ec4 <__assert_fail@plt+0x118c>
   12eb4:	cmp	r9, #20
   12eb8:	moveq	r7, #19
   12ebc:	moveq	r9, r7
   12ec0:	movne	r7, r9
   12ec4:	add	r2, sp, #208	; 0xd0
   12ec8:	add	r9, r2, r9, lsl #2
   12ecc:	str	r3, [r9, #-88]	; 0xffffffa8
   12ed0:	mov	r3, lr
   12ed4:	b	12bac <__assert_fail@plt+0xe74>
   12ed8:	mov	r0, fp
   12edc:	bl	13990 <__assert_fail@plt+0x1c58>
   12ee0:	subs	r5, r0, #0
   12ee4:	beq	12ff4 <__assert_fail@plt+0x12bc>
   12ee8:	ldr	r4, [sp, #56]	; 0x38
   12eec:	b	12f04 <__assert_fail@plt+0x11cc>
   12ef0:	ldr	r3, [r4, #-4]
   12ef4:	mov	r1, r5
   12ef8:	mov	r0, fp
   12efc:	bl	13cf8 <__assert_fail@plt+0x1fc0>
   12f00:	ldr	r4, [r4]
   12f04:	add	r3, sp, #56	; 0x38
   12f08:	cmp	r4, r3
   12f0c:	beq	12f6c <__assert_fail@plt+0x1234>
   12f10:	ldr	ip, [sp, #64]	; 0x40
   12f14:	sub	r2, r4, #24
   12f18:	cmp	ip, #0
   12f1c:	beq	12ef0 <__assert_fail@plt+0x11b8>
   12f20:	mov	lr, r4
   12f24:	ldr	r3, [lr, #8]!
   12f28:	cmp	lr, r3
   12f2c:	beq	12f00 <__assert_fail@plt+0x11c8>
   12f30:	ldr	r0, [r4, #-16]
   12f34:	add	r0, r0, #10
   12f38:	lsl	r0, r0, #3
   12f3c:	rsb	r0, r0, #0
   12f40:	ldr	r1, [r3, r0]
   12f44:	cmp	r1, ip
   12f48:	bne	12f5c <__assert_fail@plt+0x1224>
   12f4c:	b	12ef0 <__assert_fail@plt+0x11b8>
   12f50:	ldr	r1, [r3, r0]
   12f54:	cmp	ip, r1
   12f58:	beq	12ef0 <__assert_fail@plt+0x11b8>
   12f5c:	ldr	r3, [r3]
   12f60:	cmp	lr, r3
   12f64:	bne	12f50 <__assert_fail@plt+0x1218>
   12f68:	b	12f00 <__assert_fail@plt+0x11c8>
   12f6c:	mov	r0, r5
   12f70:	bl	11c18 <scols_print_table@plt>
   12f74:	mov	r0, r5
   12f78:	bl	11a8c <scols_unref_table@plt>
   12f7c:	mov	r4, #0
   12f80:	b	129ac <__assert_fail@plt+0xc74>
   12f84:	mov	lr, r3
   12f88:	mov	r5, r3
   12f8c:	cmp	r7, r5
   12f90:	beq	12c38 <__assert_fail@plt+0xf00>
   12f94:	add	r3, sp, #120	; 0x78
   12f98:	ldr	ip, [r3, r5, lsl #2]
   12f9c:	cmp	ip, #0
   12fa0:	addne	r4, sp, #32
   12fa4:	bne	12fd0 <__assert_fail@plt+0x1298>
   12fa8:	b	12fec <__assert_fail@plt+0x12b4>
   12fac:	ldrd	r0, [ip, #-24]	; 0xffffffe8
   12fb0:	ldrd	r2, [lr, #-24]	; 0xffffffe8
   12fb4:	cmp	r1, r3
   12fb8:	cmpeq	r0, r2
   12fbc:	strhi	lr, [r4]
   12fc0:	strls	ip, [r4]
   12fc4:	ldrhi	lr, [lr]
   12fc8:	ldrls	ip, [ip]
   12fcc:	ldr	r4, [r4]
   12fd0:	cmp	ip, #0
   12fd4:	cmpne	lr, #0
   12fd8:	bne	12fac <__assert_fail@plt+0x1274>
   12fdc:	cmp	ip, #0
   12fe0:	movne	lr, ip
   12fe4:	str	lr, [r4]
   12fe8:	ldr	lr, [sp, #32]
   12fec:	add	r5, r5, #1
   12ff0:	b	12f8c <__assert_fail@plt+0x1254>
   12ff4:	mvn	r4, #11
   12ff8:	b	129ac <__assert_fail@plt+0xc74>
   12ffc:	ldr	r1, [pc, #-432]	; 12e54 <__assert_fail@plt+0x111c>
   13000:	mov	r2, #5
   13004:	bl	11984 <dcgettext@plt>
   13008:	mov	r1, r0
   1300c:	mov	r0, #1
   13010:	bl	119c0 <err@plt>
   13014:	bl	119a8 <__stack_chk_fail@plt>
   13018:	ldr	r1, [pc, #-456]	; 12e58 <__assert_fail@plt+0x1120>
   1301c:	mov	r2, #5
   13020:	mov	r0, #0
   13024:	bl	11984 <dcgettext@plt>
   13028:	mov	r1, r0
   1302c:	mov	r0, #1
   13030:	bl	11be8 <errx@plt>
   13034:	mov	fp, #0
   13038:	mov	lr, #0
   1303c:	pop	{r1}		; (ldr r1, [sp], #4)
   13040:	mov	r2, sp
   13044:	push	{r2}		; (str r2, [sp, #-4]!)
   13048:	push	{r0}		; (str r0, [sp, #-4]!)
   1304c:	ldr	ip, [pc, #16]	; 13064 <__assert_fail@plt+0x132c>
   13050:	push	{ip}		; (str ip, [sp, #-4]!)
   13054:	ldr	r0, [pc, #12]	; 13068 <__assert_fail@plt+0x1330>
   13058:	ldr	r3, [pc, #12]	; 1306c <__assert_fail@plt+0x1334>
   1305c:	bl	11a74 <__libc_start_main@plt>
   13060:	bl	11ccc <abort@plt>
   13064:	andeq	r6, r1, ip, ror #26
   13068:	andeq	r1, r1, r8, asr #26
   1306c:	andeq	r6, r1, ip, lsl #26
   13070:	ldr	r3, [pc, #20]	; 1308c <__assert_fail@plt+0x1354>
   13074:	ldr	r2, [pc, #20]	; 13090 <__assert_fail@plt+0x1358>
   13078:	add	r3, pc, r3
   1307c:	ldr	r2, [r3, r2]
   13080:	cmp	r2, #0
   13084:	bxeq	lr
   13088:	b	11aa4 <__gmon_start__@plt>
   1308c:			; <UNDEFINED> instruction: 0x00014dbc
   13090:			; <UNDEFINED> instruction: 0x000001bc
   13094:	ldr	r0, [pc, #24]	; 130b4 <__assert_fail@plt+0x137c>
   13098:	ldr	r3, [pc, #24]	; 130b8 <__assert_fail@plt+0x1380>
   1309c:	cmp	r3, r0
   130a0:	bxeq	lr
   130a4:	ldr	r3, [pc, #16]	; 130bc <__assert_fail@plt+0x1384>
   130a8:	cmp	r3, #0
   130ac:	bxeq	lr
   130b0:	bx	r3
   130b4:	andeq	r8, r2, r0, lsl r0
   130b8:	andeq	r8, r2, r0, lsl r0
   130bc:	andeq	r0, r0, r0
   130c0:	ldr	r0, [pc, #36]	; 130ec <__assert_fail@plt+0x13b4>
   130c4:	ldr	r1, [pc, #36]	; 130f0 <__assert_fail@plt+0x13b8>
   130c8:	sub	r1, r1, r0
   130cc:	asr	r1, r1, #2
   130d0:	add	r1, r1, r1, lsr #31
   130d4:	asrs	r1, r1, #1
   130d8:	bxeq	lr
   130dc:	ldr	r3, [pc, #16]	; 130f4 <__assert_fail@plt+0x13bc>
   130e0:	cmp	r3, #0
   130e4:	bxeq	lr
   130e8:	bx	r3
   130ec:	andeq	r8, r2, r0, lsl r0
   130f0:	andeq	r8, r2, r0, lsl r0
   130f4:	andeq	r0, r0, r0
   130f8:	push	{r4, lr}
   130fc:	ldr	r4, [pc, #24]	; 1311c <__assert_fail@plt+0x13e4>
   13100:	ldrb	r3, [r4]
   13104:	cmp	r3, #0
   13108:	popne	{r4, pc}
   1310c:	bl	13094 <__assert_fail@plt+0x135c>
   13110:	mov	r3, #1
   13114:	strb	r3, [r4]
   13118:	pop	{r4, pc}
   1311c:	andeq	r8, r2, ip, lsr #32
   13120:	b	130c0 <__assert_fail@plt+0x1388>
   13124:	push	{r1, r2, r3}
   13128:	subs	r3, r0, #0
   1312c:	push	{r4, r5, r6, lr}
   13130:	sub	sp, sp, #12
   13134:	ldr	r5, [pc, #132]	; 131c0 <__assert_fail@plt+0x1488>
   13138:	ldr	r6, [sp, #28]
   1313c:	ldreq	r4, [pc, #128]	; 131c4 <__assert_fail@plt+0x148c>
   13140:	ldr	r2, [r5]
   13144:	str	r2, [sp, #4]
   13148:	beq	13160 <__assert_fail@plt+0x1428>
   1314c:	ldr	r2, [pc, #116]	; 131c8 <__assert_fail@plt+0x1490>
   13150:	ldr	r4, [pc, #108]	; 131c4 <__assert_fail@plt+0x148c>
   13154:	ldr	r2, [r2]
   13158:	tst	r2, #16777216	; 0x1000000
   1315c:	beq	131a8 <__assert_fail@plt+0x1470>
   13160:	add	ip, sp, #32
   13164:	mov	r2, r6
   13168:	mov	r3, ip
   1316c:	mov	r1, #1
   13170:	ldr	r0, [r4]
   13174:	str	ip, [sp]
   13178:	bl	11a98 <__vfprintf_chk@plt>
   1317c:	ldr	r1, [r4]
   13180:	mov	r0, #10
   13184:	bl	11c24 <fputc@plt>
   13188:	ldr	r2, [sp, #4]
   1318c:	ldr	r3, [r5]
   13190:	cmp	r2, r3
   13194:	bne	131bc <__assert_fail@plt+0x1484>
   13198:	add	sp, sp, #12
   1319c:	pop	{r4, r5, r6, lr}
   131a0:	add	sp, sp, #12
   131a4:	bx	lr
   131a8:	ldr	r2, [pc, #28]	; 131cc <__assert_fail@plt+0x1494>
   131ac:	ldr	r0, [r4]
   131b0:	mov	r1, #1
   131b4:	bl	11bb8 <__fprintf_chk@plt>
   131b8:	b	13160 <__assert_fail@plt+0x1428>
   131bc:	bl	119a8 <__stack_chk_fail@plt>
   131c0:	andeq	r7, r2, r8, lsr #26
   131c4:	andeq	r8, r2, r0, lsr #32
   131c8:	andeq	r8, r2, r0, lsr r0
   131cc:	muleq	r1, ip, r0
   131d0:	push	{r0, r1, r2, r3}
   131d4:	push	{r4, r5, lr}
   131d8:	sub	sp, sp, #12
   131dc:	ldr	r4, [pc, #84]	; 13238 <__assert_fail@plt+0x1500>
   131e0:	ldr	r5, [pc, #84]	; 1323c <__assert_fail@plt+0x1504>
   131e4:	add	ip, sp, #28
   131e8:	ldr	r1, [r4]
   131ec:	mov	r3, ip
   131f0:	ldr	r2, [sp, #24]
   131f4:	str	r1, [sp, #4]
   131f8:	ldr	r0, [r5]
   131fc:	mov	r1, #1
   13200:	str	ip, [sp]
   13204:	bl	11a98 <__vfprintf_chk@plt>
   13208:	ldr	r1, [r5]
   1320c:	mov	r0, #10
   13210:	bl	11c24 <fputc@plt>
   13214:	ldr	r2, [sp, #4]
   13218:	ldr	r3, [r4]
   1321c:	cmp	r2, r3
   13220:	bne	13234 <__assert_fail@plt+0x14fc>
   13224:	add	sp, sp, #12
   13228:	pop	{r4, r5, lr}
   1322c:	add	sp, sp, #16
   13230:	bx	lr
   13234:	bl	119a8 <__stack_chk_fail@plt>
   13238:	andeq	r7, r2, r8, lsr #26
   1323c:	andeq	r8, r2, r0, lsr #32
   13240:	push	{r1, r2, r3}
   13244:	push	{r4, lr}
   13248:	sub	sp, sp, #12
   1324c:	ldr	r4, [pc, #84]	; 132a8 <__assert_fail@plt+0x1570>
   13250:	add	ip, sp, #24
   13254:	mov	r3, ip
   13258:	ldr	r1, [r4]
   1325c:	ldr	r2, [sp, #20]
   13260:	str	r1, [sp, #4]
   13264:	mov	r1, #1
   13268:	str	ip, [sp]
   1326c:	bl	11b4c <__vasprintf_chk@plt>
   13270:	cmp	r0, #0
   13274:	blt	13298 <__assert_fail@plt+0x1560>
   13278:	ldr	r2, [sp, #4]
   1327c:	ldr	r3, [r4]
   13280:	cmp	r2, r3
   13284:	bne	132a4 <__assert_fail@plt+0x156c>
   13288:	add	sp, sp, #12
   1328c:	pop	{r4, lr}
   13290:	add	sp, sp, #12
   13294:	bx	lr
   13298:	ldr	r1, [pc, #12]	; 132ac <__assert_fail@plt+0x1574>
   1329c:	mov	r0, #1
   132a0:	bl	119c0 <err@plt>
   132a4:	bl	119a8 <__stack_chk_fail@plt>
   132a8:	andeq	r7, r2, r8, lsr #26
   132ac:	andeq	r7, r1, r4, lsr #1
   132b0:	push	{r4, r5, r6, r7, r8, lr}
   132b4:	subs	r7, r0, #0
   132b8:	beq	1332c <__assert_fail@plt+0x15f4>
   132bc:	mov	r6, r1
   132c0:	ldr	r5, [pc, #120]	; 13340 <__assert_fail@plt+0x1608>
   132c4:	ldr	r8, [pc, #120]	; 13344 <__assert_fail@plt+0x160c>
   132c8:	mov	r4, #0
   132cc:	b	132d4 <__assert_fail@plt+0x159c>
   132d0:	ldr	r5, [r8, r4, lsl #5]
   132d4:	mov	r2, r6
   132d8:	mov	r1, r5
   132dc:	mov	r0, r7
   132e0:	bl	11b28 <strncasecmp@plt>
   132e4:	cmp	r0, #0
   132e8:	bne	132f8 <__assert_fail@plt+0x15c0>
   132ec:	ldrsb	r3, [r5, r6]
   132f0:	cmp	r3, #0
   132f4:	beq	13324 <__assert_fail@plt+0x15ec>
   132f8:	add	r4, r4, #1
   132fc:	cmp	r4, #11
   13300:	bne	132d0 <__assert_fail@plt+0x1598>
   13304:	mov	r2, #5
   13308:	ldr	r1, [pc, #56]	; 13348 <__assert_fail@plt+0x1610>
   1330c:	mov	r0, #0
   13310:	bl	11984 <dcgettext@plt>
   13314:	mov	r1, r7
   13318:	bl	11b10 <warnx@plt>
   1331c:	mvn	r0, #0
   13320:	pop	{r4, r5, r6, r7, r8, pc}
   13324:	mov	r0, r4
   13328:	pop	{r4, r5, r6, r7, r8, pc}
   1332c:	ldr	r3, [pc, #24]	; 1334c <__assert_fail@plt+0x1614>
   13330:	mov	r2, #215	; 0xd7
   13334:	ldr	r1, [pc, #20]	; 13350 <__assert_fail@plt+0x1618>
   13338:	ldr	r0, [pc, #20]	; 13354 <__assert_fail@plt+0x161c>
   1333c:	bl	11d38 <__assert_fail@plt>
   13340:	strheq	r7, [r1], -ip
   13344:			; <UNDEFINED> instruction: 0x00016db0
   13348:	ldrdeq	r7, [r1], -ip
   1334c:	muleq	r1, r8, sp
   13350:	andeq	r7, r1, r0, asr #1
   13354:	ldrdeq	r7, [r1], -r4
   13358:	push	{r4, r5, r6, lr}
   1335c:	mov	r5, r1
   13360:	ldr	r1, [pc, #64]	; 133a8 <__assert_fail@plt+0x1670>
   13364:	mov	r4, r0
   13368:	bl	11bd0 <mnt_fs_match_fstype@plt>
   1336c:	cmp	r0, #0
   13370:	bne	1337c <__assert_fail@plt+0x1644>
   13374:	mov	r0, #0
   13378:	pop	{r4, r5, r6, pc}
   1337c:	mov	r0, r4
   13380:	bl	11a44 <mnt_fs_get_root@plt>
   13384:	cmp	r0, #0
   13388:	beq	13374 <__assert_fail@plt+0x163c>
   1338c:	mov	r0, r4
   13390:	bl	11a44 <mnt_fs_get_root@plt>
   13394:	mov	r1, r5
   13398:	bl	11894 <strcmp@plt>
   1339c:	clz	r0, r0
   133a0:	lsr	r0, r0, #5
   133a4:	pop	{r4, r5, r6, pc}
   133a8:	strdeq	r7, [r1], -r0
   133ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133b0:	sub	sp, sp, #8448	; 0x2100
   133b4:	ldr	r7, [pc, #1408]	; 1393c <__assert_fail@plt+0x1c04>
   133b8:	ldr	r5, [pc, #1408]	; 13940 <__assert_fail@plt+0x1c08>
   133bc:	sub	sp, sp, #44	; 0x2c
   133c0:	ldr	r2, [r7]
   133c4:	ldr	r3, [r5]
   133c8:	tst	r2, #4
   133cc:	add	r2, sp, #8448	; 0x2100
   133d0:	add	r2, r2, #36	; 0x24
   133d4:	mov	r9, r0
   133d8:	mov	r4, r1
   133dc:	str	r3, [r2]
   133e0:	bne	13620 <__assert_fail@plt+0x18e8>
   133e4:	ldr	r2, [pc, #1368]	; 13944 <__assert_fail@plt+0x1c0c>
   133e8:	mov	r3, #8192	; 0x2000
   133ec:	str	r2, [sp]
   133f0:	mov	r1, r3
   133f4:	mov	r2, #1
   133f8:	str	r4, [sp, #4]
   133fc:	add	r0, sp, #292	; 0x124
   13400:	bl	11d14 <__snprintf_chk@plt>
   13404:	add	r0, sp, #292	; 0x124
   13408:	bl	11a20 <opendir@plt>
   1340c:	subs	r6, r0, #0
   13410:	beq	13660 <__assert_fail@plt+0x1928>
   13414:	mov	r1, #160	; 0xa0
   13418:	mov	r0, #1
   1341c:	bl	11858 <calloc@plt>
   13420:	subs	fp, r0, #0
   13424:	beq	135c4 <__assert_fail@plt+0x188c>
   13428:	mvn	r3, #1
   1342c:	str	r3, [fp, #152]	; 0x98
   13430:	mov	r0, r6
   13434:	bl	11c6c <dirfd@plt>
   13438:	add	r2, sp, #40	; 0x28
   1343c:	mov	r1, r0
   13440:	mov	r0, #3
   13444:	bl	119e4 <__fxstat64@plt>
   13448:	cmp	r0, #0
   1344c:	beq	13670 <__assert_fail@plt+0x1938>
   13450:	mov	r0, r6
   13454:	bl	11c6c <dirfd@plt>
   13458:	mov	r2, #0
   1345c:	ldr	r1, [pc, #1252]	; 13948 <__assert_fail@plt+0x1c10>
   13460:	bl	11b04 <openat64@plt>
   13464:	cmp	r0, #0
   13468:	blt	135d4 <__assert_fail@plt+0x189c>
   1346c:	ldr	r1, [pc, #1240]	; 1394c <__assert_fail@plt+0x1c14>
   13470:	bl	11840 <fdopen@plt>
   13474:	subs	r3, r0, #0
   13478:	str	r3, [sp, #12]
   1347c:	beq	135d4 <__assert_fail@plt+0x189c>
   13480:	mov	ip, #0
   13484:	add	r0, sp, #36	; 0x24
   13488:	add	r1, sp, #144	; 0x90
   1348c:	ldr	r3, [sp, #12]
   13490:	mov	r2, #10
   13494:	str	ip, [sp, #36]	; 0x24
   13498:	str	ip, [sp, #144]	; 0x90
   1349c:	bl	1187c <__getdelim@plt>
   134a0:	cmp	r0, #0
   134a4:	blt	136cc <__assert_fail@plt+0x1994>
   134a8:	ldr	r4, [sp, #36]	; 0x24
   134ac:	mov	r1, #41	; 0x29
   134b0:	mov	r0, r4
   134b4:	bl	11c00 <strrchr@plt>
   134b8:	subs	r8, r0, #0
   134bc:	mov	r0, r4
   134c0:	beq	1390c <__assert_fail@plt+0x1bd4>
   134c4:	mov	r2, fp
   134c8:	ldr	r1, [pc, #1152]	; 13950 <__assert_fail@plt+0x1c18>
   134cc:	bl	11c30 <sscanf@plt>
   134d0:	cmp	r0, #1
   134d4:	bne	13908 <__assert_fail@plt+0x1bd0>
   134d8:	mov	r0, r8
   134dc:	add	r3, fp, #4
   134e0:	add	r2, fp, #12
   134e4:	ldr	r1, [pc, #1128]	; 13954 <__assert_fail@plt+0x1c1c>
   134e8:	bl	11c30 <sscanf@plt>
   134ec:	cmp	r0, #2
   134f0:	ldr	r0, [sp, #36]	; 0x24
   134f4:	bne	1390c <__assert_fail@plt+0x1bd4>
   134f8:	bl	1190c <free@plt>
   134fc:	add	r4, fp, #80	; 0x50
   13500:	add	r8, r9, #32
   13504:	mov	sl, #1
   13508:	str	r9, [sp, #24]
   1350c:	b	13530 <__assert_fail@plt+0x17f8>
   13510:	ldrd	r2, [sp, #240]	; 0xf0
   13514:	strd	r2, [r4, #-56]	; 0xffffffc8
   13518:	cmp	sl, #2
   1351c:	beq	136ec <__assert_fail@plt+0x19b4>
   13520:	cmp	sl, #7
   13524:	beq	13684 <__assert_fail@plt+0x194c>
   13528:	add	r4, r4, #8
   1352c:	add	sl, sl, #1
   13530:	ldr	r3, [r8], #4
   13534:	str	r4, [r4]
   13538:	cmp	r3, #0
   1353c:	str	r4, [r4, #4]
   13540:	beq	13520 <__assert_fail@plt+0x17e8>
   13544:	mov	r0, r6
   13548:	bl	11c6c <dirfd@plt>
   1354c:	ldr	r3, [pc, #1028]	; 13958 <__assert_fail@plt+0x1c20>
   13550:	ldr	r1, [pc, #1028]	; 1395c <__assert_fail@plt+0x1c24>
   13554:	add	r3, r3, sl, lsl #2
   13558:	ldr	r2, [r3, #-4]
   1355c:	mov	r3, #16
   13560:	stm	sp, {r1, r2}
   13564:	mov	r1, r3
   13568:	mov	r2, #1
   1356c:	mov	r9, r0
   13570:	add	r0, sp, #248	; 0xf8
   13574:	bl	11d14 <__snprintf_chk@plt>
   13578:	mov	r3, #0
   1357c:	str	r3, [sp]
   13580:	mov	r1, r9
   13584:	add	r2, sp, #248	; 0xf8
   13588:	add	r3, sp, #144	; 0x90
   1358c:	mov	r0, #3
   13590:	bl	119d8 <__fxstatat64@plt>
   13594:	cmp	r0, #0
   13598:	beq	13510 <__assert_fail@plt+0x17d8>
   1359c:	bl	11b1c <__errno_location@plt>
   135a0:	ldr	r3, [r0]
   135a4:	bic	r2, r3, #2
   135a8:	cmp	r3, #13
   135ac:	cmpne	r2, #0
   135b0:	beq	13518 <__assert_fail@plt+0x17e0>
   135b4:	rsb	r4, r3, #0
   135b8:	ldr	r0, [sp, #12]
   135bc:	bl	11bc4 <fclose@plt>
   135c0:	b	135e0 <__assert_fail@plt+0x18a8>
   135c4:	mov	r2, #160	; 0xa0
   135c8:	ldr	r1, [pc, #912]	; 13960 <__assert_fail@plt+0x1c28>
   135cc:	mov	r0, #1
   135d0:	bl	119c0 <err@plt>
   135d4:	bl	11b1c <__errno_location@plt>
   135d8:	ldr	r4, [r0]
   135dc:	rsb	r4, r4, #0
   135e0:	mov	r0, r6
   135e4:	bl	11cfc <closedir@plt>
   135e8:	cmp	r4, #0
   135ec:	beq	135f8 <__assert_fail@plt+0x18c0>
   135f0:	mov	r0, fp
   135f4:	bl	1190c <free@plt>
   135f8:	add	r3, sp, #8448	; 0x2100
   135fc:	add	r3, r3, #36	; 0x24
   13600:	ldr	r2, [r3]
   13604:	ldr	r3, [r5]
   13608:	mov	r0, r4
   1360c:	cmp	r2, r3
   13610:	bne	13938 <__assert_fail@plt+0x1c00>
   13614:	add	sp, sp, #8448	; 0x2100
   13618:	add	sp, sp, #44	; 0x2c
   1361c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13620:	ldr	r3, [pc, #828]	; 13964 <__assert_fail@plt+0x1c2c>
   13624:	ldr	r6, [r3]
   13628:	bl	11ac8 <getpid@plt>
   1362c:	ldr	r2, [pc, #820]	; 13968 <__assert_fail@plt+0x1c30>
   13630:	ldr	r3, [pc, #820]	; 1396c <__assert_fail@plt+0x1c34>
   13634:	str	r2, [sp, #4]
   13638:	str	r3, [sp]
   1363c:	ldr	r2, [pc, #812]	; 13970 <__assert_fail@plt+0x1c38>
   13640:	mov	r1, #1
   13644:	mov	r3, r0
   13648:	mov	r0, r6
   1364c:	bl	11bb8 <__fprintf_chk@plt>
   13650:	mov	r1, r4
   13654:	ldr	r0, [pc, #792]	; 13974 <__assert_fail@plt+0x1c3c>
   13658:	bl	131d0 <__assert_fail@plt+0x1498>
   1365c:	b	133e4 <__assert_fail@plt+0x16ac>
   13660:	bl	11b1c <__errno_location@plt>
   13664:	ldr	r4, [r0]
   13668:	rsb	r4, r4, #0
   1366c:	b	135f8 <__assert_fail@plt+0x18c0>
   13670:	ldr	r1, [sp, #64]	; 0x40
   13674:	ldr	r0, [r7, #4]
   13678:	str	r1, [fp, #16]
   1367c:	bl	14494 <__assert_fail@plt+0x275c>
   13680:	b	13450 <__assert_fail@plt+0x1718>
   13684:	ldr	r3, [r7]
   13688:	add	r4, fp, #136	; 0x88
   1368c:	tst	r3, #4
   13690:	ldr	r9, [sp, #24]
   13694:	str	r4, [fp, #136]	; 0x88
   13698:	str	r4, [fp, #140]	; 0x8c
   1369c:	bne	13884 <__assert_fail@plt+0x1b4c>
   136a0:	ldr	r3, [r9, #4]
   136a4:	str	r9, [fp, #136]	; 0x88
   136a8:	str	r3, [fp, #140]	; 0x8c
   136ac:	str	r4, [r9, #4]
   136b0:	ldr	r0, [sp, #12]
   136b4:	str	r4, [r3]
   136b8:	bl	11bc4 <fclose@plt>
   136bc:	mov	r0, r6
   136c0:	bl	11cfc <closedir@plt>
   136c4:	mov	r4, #0
   136c8:	b	135f8 <__assert_fail@plt+0x18c0>
   136cc:	bl	11b1c <__errno_location@plt>
   136d0:	ldr	r4, [r0]
   136d4:	ldr	r0, [sp, #36]	; 0x24
   136d8:	bl	1190c <free@plt>
   136dc:	cmp	r4, #0
   136e0:	rsbgt	r4, r4, #0
   136e4:	bgt	135b8 <__assert_fail@plt+0x1880>
   136e8:	b	134fc <__assert_fail@plt+0x17c4>
   136ec:	mov	r0, r6
   136f0:	bl	11c6c <dirfd@plt>
   136f4:	ldrd	r2, [fp, #32]
   136f8:	ldr	lr, [r7, #8]
   136fc:	mov	r1, r3
   13700:	ldr	r3, [pc, #624]	; 13978 <__assert_fail@plt+0x1c40>
   13704:	cmp	lr, r3
   13708:	mov	r9, r0
   1370c:	mov	r0, r2
   13710:	strd	r0, [sp, #16]
   13714:	beq	13764 <__assert_fail@plt+0x1a2c>
   13718:	ldrd	r2, [lr, #-12]
   1371c:	cmp	r1, r3
   13720:	cmpeq	r0, r2
   13724:	beq	138d0 <__assert_fail@plt+0x1b98>
   13728:	mov	r0, r9
   1372c:	mov	ip, r8
   13730:	mov	r1, lr
   13734:	ldrd	r8, [sp, #16]
   13738:	b	1374c <__assert_fail@plt+0x1a14>
   1373c:	ldrd	r2, [r1, #-12]
   13740:	cmp	r9, r3
   13744:	cmpeq	r8, r2
   13748:	beq	138c8 <__assert_fail@plt+0x1b90>
   1374c:	ldr	r1, [r1]
   13750:	ldr	r3, [pc, #544]	; 13978 <__assert_fail@plt+0x1c40>
   13754:	cmp	r1, r3
   13758:	bne	1373c <__assert_fail@plt+0x1a04>
   1375c:	mov	r9, r0
   13760:	mov	r8, ip
   13764:	ldr	r3, [pc, #528]	; 1397c <__assert_fail@plt+0x1c44>
   13768:	ldr	r3, [r3]
   1376c:	cmp	r3, #0
   13770:	blt	13930 <__assert_fail@plt+0x1bf8>
   13774:	mov	r0, r9
   13778:	mov	r2, #0
   1377c:	ldr	r1, [pc, #508]	; 13980 <__assert_fail@plt+0x1c48>
   13780:	bl	11b04 <openat64@plt>
   13784:	subs	lr, r0, #0
   13788:	str	lr, [sp, #28]
   1378c:	blt	13930 <__assert_fail@plt+0x1bf8>
   13790:	mov	r0, #28
   13794:	mov	r2, r0
   13798:	ldr	ip, [pc, #484]	; 13984 <__assert_fail@plt+0x1c4c>
   1379c:	str	r0, [sp, #248]	; 0xf8
   137a0:	ldr	r0, [pc, #468]	; 1397c <__assert_fail@plt+0x1c44>
   137a4:	mov	r9, #0
   137a8:	str	ip, [sp, #252]	; 0xfc
   137ac:	ldr	ip, [pc, #468]	; 13988 <__assert_fail@plt+0x1c50>
   137b0:	mov	r3, r9
   137b4:	add	r1, sp, #248	; 0xf8
   137b8:	ldr	r0, [r0]
   137bc:	str	lr, [sp, #272]	; 0x110
   137c0:	strb	r9, [sp, #264]	; 0x108
   137c4:	str	ip, [sp, #268]	; 0x10c
   137c8:	bl	11cf0 <send@plt>
   137cc:	cmp	r0, r9
   137d0:	blt	13928 <__assert_fail@plt+0x1bf0>
   137d4:	ldr	r0, [pc, #416]	; 1397c <__assert_fail@plt+0x1c44>
   137d8:	mov	r3, r9
   137dc:	add	r1, sp, #248	; 0xf8
   137e0:	mov	r2, #44	; 0x2c
   137e4:	ldr	r0, [r0]
   137e8:	bl	11cd8 <recv@plt>
   137ec:	cmp	r0, #0
   137f0:	blt	13928 <__assert_fail@plt+0x1bf0>
   137f4:	cmp	r0, #15
   137f8:	ble	13928 <__assert_fail@plt+0x1bf0>
   137fc:	ldr	r3, [sp, #248]	; 0xf8
   13800:	cmp	r3, #15
   13804:	bls	13928 <__assert_fail@plt+0x1bf0>
   13808:	cmp	r0, r3
   1380c:	bcc	13928 <__assert_fail@plt+0x1bf0>
   13810:	ldrh	r2, [sp, #252]	; 0xfc
   13814:	cmp	r2, #88	; 0x58
   13818:	bne	13928 <__assert_fail@plt+0x1bf0>
   1381c:	sub	r3, r3, #20
   13820:	cmp	r3, #3
   13824:	ble	13928 <__assert_fail@plt+0x1bf0>
   13828:	add	r2, sp, #268	; 0x10c
   1382c:	ldrh	r2, [r2]
   13830:	cmp	r2, #3
   13834:	bls	13928 <__assert_fail@plt+0x1bf0>
   13838:	cmp	r3, r2
   1383c:	blt	13928 <__assert_fail@plt+0x1bf0>
   13840:	add	r3, sp, #268	; 0x10c
   13844:	add	r3, r3, #2
   13848:	ldrh	r3, [r3]
   1384c:	cmp	r3, #1
   13850:	bne	13928 <__assert_fail@plt+0x1bf0>
   13854:	ldr	r9, [sp, #272]	; 0x110
   13858:	ldr	r0, [sp, #28]
   1385c:	bl	11ce4 <close@plt>
   13860:	mov	r1, #24
   13864:	mov	r0, #1
   13868:	bl	11858 <calloc@plt>
   1386c:	cmp	r0, #0
   13870:	bne	138dc <__assert_fail@plt+0x1ba4>
   13874:	mov	r2, #24
   13878:	ldr	r1, [pc, #224]	; 13960 <__assert_fail@plt+0x1c28>
   1387c:	mov	r0, #1
   13880:	bl	119c0 <err@plt>
   13884:	ldr	r3, [pc, #216]	; 13964 <__assert_fail@plt+0x1c2c>
   13888:	ldr	r7, [r3]
   1388c:	bl	11ac8 <getpid@plt>
   13890:	ldr	r2, [pc, #208]	; 13968 <__assert_fail@plt+0x1c30>
   13894:	ldr	r3, [pc, #208]	; 1396c <__assert_fail@plt+0x1c34>
   13898:	str	r2, [sp, #4]
   1389c:	str	r3, [sp]
   138a0:	ldr	r2, [pc, #200]	; 13970 <__assert_fail@plt+0x1c38>
   138a4:	mov	r1, #1
   138a8:	mov	r3, r0
   138ac:	mov	r0, r7
   138b0:	bl	11bb8 <__fprintf_chk@plt>
   138b4:	ldr	r2, [fp]
   138b8:	ldr	r1, [pc, #204]	; 1398c <__assert_fail@plt+0x1c54>
   138bc:	mov	r0, fp
   138c0:	bl	13124 <__assert_fail@plt+0x13ec>
   138c4:	b	136a0 <__assert_fail@plt+0x1968>
   138c8:	mov	r8, ip
   138cc:	mov	lr, r1
   138d0:	ldr	r9, [lr, #-4]
   138d4:	str	r9, [fp, #152]	; 0x98
   138d8:	b	13528 <__assert_fail@plt+0x17f0>
   138dc:	ldrd	r2, [sp, #16]
   138e0:	ldr	r1, [r7, #8]
   138e4:	str	r9, [r0, #8]
   138e8:	strd	r2, [r0]
   138ec:	ldr	r3, [pc, #132]	; 13978 <__assert_fail@plt+0x1c40>
   138f0:	add	r2, r0, #12
   138f4:	str	r2, [r1, #4]
   138f8:	str	r2, [r7, #8]
   138fc:	str	r1, [r0, #12]
   13900:	str	r3, [r0, #16]
   13904:	b	138d4 <__assert_fail@plt+0x1b9c>
   13908:	ldr	r0, [sp, #36]	; 0x24
   1390c:	bl	1190c <free@plt>
   13910:	ldr	r0, [sp, #12]
   13914:	bl	11bc4 <fclose@plt>
   13918:	mov	r0, r6
   1391c:	bl	11cfc <closedir@plt>
   13920:	mvn	r4, #21
   13924:	b	135f0 <__assert_fail@plt+0x18b8>
   13928:	mvn	r9, #1
   1392c:	b	13858 <__assert_fail@plt+0x1b20>
   13930:	mvn	r9, #1
   13934:	b	13860 <__assert_fail@plt+0x1b28>
   13938:	bl	119a8 <__stack_chk_fail@plt>
   1393c:	andeq	r8, r2, r0, lsr r0
   13940:	andeq	r7, r2, r8, lsr #26
   13944:	andeq	r7, r1, r4, lsr #2
   13948:	andeq	r7, r1, ip, asr #2
   1394c:	andeq	r7, r1, r4, asr r1
   13950:	andeq	r7, r1, r8, asr r1
   13954:	andeq	r7, r1, r0, ror #2
   13958:	andeq	r6, r1, r0, lsl pc
   1395c:	andeq	r7, r1, r0, ror r1
   13960:	andeq	r7, r1, r0, lsr r1
   13964:	andeq	r8, r2, r0, lsr #32
   13968:	andeq	r7, r1, r8, lsl #2
   1396c:	andeq	r7, r1, r0, lsl r1
   13970:	strdeq	r7, [r1], -r8
   13974:	andeq	r7, r1, r8, lsl r1
   13978:	andeq	r8, r2, r8, lsr r0
   1397c:	andeq	r8, r2, r8
   13980:	andeq	r7, r1, r8, ror r1
   13984:	andeq	r0, r1, sl, asr r0
   13988:	andeq	r0, r3, r8
   1398c:	andeq	r7, r1, r0, lsl #3
   13990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13994:	sub	sp, sp, #12
   13998:	mov	r5, r0
   1399c:	bl	119fc <scols_new_table@plt>
   139a0:	subs	sl, r0, #0
   139a4:	beq	13b04 <__assert_fail@plt+0x1dcc>
   139a8:	ldrb	r1, [r5, #64]	; 0x40
   139ac:	and	r1, r1, #1
   139b0:	bl	11930 <scols_table_enable_raw@plt>
   139b4:	ldrb	r1, [r5, #64]	; 0x40
   139b8:	mov	r0, sl
   139bc:	lsr	r1, r1, #1
   139c0:	and	r1, r1, #1
   139c4:	bl	11bac <scols_table_enable_json@plt>
   139c8:	ldrb	r1, [r5, #64]	; 0x40
   139cc:	mov	r0, sl
   139d0:	lsr	r1, r1, #5
   139d4:	and	r1, r1, #1
   139d8:	bl	118dc <scols_table_enable_noheadings@plt>
   139dc:	ldrb	r3, [r5, #64]	; 0x40
   139e0:	tst	r3, #2
   139e4:	bne	13b40 <__assert_fail@plt+0x1e08>
   139e8:	ldr	r9, [pc, #412]	; 13b8c <__assert_fail@plt+0x1e54>
   139ec:	ldr	r3, [r9, #16]
   139f0:	cmp	r3, #0
   139f4:	beq	13b14 <__assert_fail@plt+0x1ddc>
   139f8:	ldr	r1, [r9, #20]
   139fc:	cmp	r1, #10
   13a00:	bgt	13b50 <__assert_fail@plt+0x1e18>
   13a04:	mov	r7, #0
   13a08:	ldr	r6, [pc, #384]	; 13b90 <__assert_fail@plt+0x1e58>
   13a0c:	mov	r4, r7
   13a10:	add	r8, r9, #24
   13a14:	b	13a48 <__assert_fail@plt+0x1d10>
   13a18:	ands	r3, r2, #64	; 0x40
   13a1c:	ldr	r2, [r9, #16]
   13a20:	beq	13ac0 <__assert_fail@plt+0x1d88>
   13a24:	add	r4, r4, #1
   13a28:	cmp	r4, r2
   13a2c:	bcs	13b14 <__assert_fail@plt+0x1ddc>
   13a30:	cmp	r4, #0
   13a34:	mov	r7, r4
   13a38:	blt	13b64 <__assert_fail@plt+0x1e2c>
   13a3c:	ldr	r1, [r8], #4
   13a40:	cmp	r1, #10
   13a44:	bgt	13b50 <__assert_fail@plt+0x1e18>
   13a48:	lsl	r3, r1, #5
   13a4c:	ldrb	r0, [r5, #64]	; 0x40
   13a50:	add	r2, r6, r3
   13a54:	sub	r1, r1, #6
   13a58:	ldr	r2, [r2, #40]	; 0x28
   13a5c:	tst	r0, #16
   13a60:	clz	r1, r1
   13a64:	lsr	r1, r1, #5
   13a68:	bicne	r2, r2, #1
   13a6c:	add	fp, r6, r3
   13a70:	ands	r1, r1, r0, lsr #2
   13a74:	orrne	r2, r2, #2
   13a78:	tst	r0, #64	; 0x40
   13a7c:	bicne	r2, r2, #64	; 0x40
   13a80:	vldr	d0, [fp, #32]
   13a84:	ldr	r1, [fp, #24]
   13a88:	mov	r0, sl
   13a8c:	bl	118f4 <scols_table_new_column@plt>
   13a90:	subs	r3, r0, #0
   13a94:	str	r3, [sp, #4]
   13a98:	beq	13b20 <__assert_fail@plt+0x1de8>
   13a9c:	ldrb	r2, [r5, #64]	; 0x40
   13aa0:	tst	r2, #2
   13aa4:	beq	13a18 <__assert_fail@plt+0x1ce0>
   13aa8:	ldr	r1, [fp, #48]	; 0x30
   13aac:	bl	1184c <scols_column_set_json_type@plt>
   13ab0:	ldrb	r2, [r5, #64]	; 0x40
   13ab4:	ands	r3, r2, #64	; 0x40
   13ab8:	ldr	r2, [r9, #16]
   13abc:	bne	13a24 <__assert_fail@plt+0x1cec>
   13ac0:	cmp	r4, r2
   13ac4:	bcs	13b78 <__assert_fail@plt+0x1e40>
   13ac8:	add	r7, r9, r7, lsl #2
   13acc:	ldr	r1, [r7, #20]
   13ad0:	cmp	r1, #10
   13ad4:	bgt	13b50 <__assert_fail@plt+0x1e18>
   13ad8:	bne	13a24 <__assert_fail@plt+0x1cec>
   13adc:	ldr	r7, [sp, #4]
   13ae0:	ldr	r2, [pc, #172]	; 13b94 <__assert_fail@plt+0x1e5c>
   13ae4:	ldr	r1, [pc, #172]	; 13b98 <__assert_fail@plt+0x1e60>
   13ae8:	mov	r0, r7
   13aec:	bl	11c54 <scols_column_set_wrapfunc@plt>
   13af0:	ldr	r1, [pc, #164]	; 13b9c <__assert_fail@plt+0x1e64>
   13af4:	mov	r0, r7
   13af8:	bl	11c84 <scols_column_set_safechars@plt>
   13afc:	ldr	r2, [r9, #16]
   13b00:	b	13a24 <__assert_fail@plt+0x1cec>
   13b04:	mov	r2, #5
   13b08:	ldr	r1, [pc, #144]	; 13ba0 <__assert_fail@plt+0x1e68>
   13b0c:	bl	11984 <dcgettext@plt>
   13b10:	bl	11c0c <warn@plt>
   13b14:	mov	r0, sl
   13b18:	add	sp, sp, #12
   13b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b20:	mov	r2, #5
   13b24:	ldr	r1, [pc, #120]	; 13ba4 <__assert_fail@plt+0x1e6c>
   13b28:	bl	11984 <dcgettext@plt>
   13b2c:	bl	11b10 <warnx@plt>
   13b30:	mov	r0, sl
   13b34:	bl	11a8c <scols_unref_table@plt>
   13b38:	ldr	sl, [sp, #4]
   13b3c:	b	13b14 <__assert_fail@plt+0x1ddc>
   13b40:	ldr	r1, [pc, #96]	; 13ba8 <__assert_fail@plt+0x1e70>
   13b44:	mov	r0, sl
   13b48:	bl	118d0 <scols_table_set_name@plt>
   13b4c:	b	139e8 <__assert_fail@plt+0x1cb0>
   13b50:	ldr	r3, [pc, #84]	; 13bac <__assert_fail@plt+0x1e74>
   13b54:	mov	r2, #242	; 0xf2
   13b58:	ldr	r1, [pc, #80]	; 13bb0 <__assert_fail@plt+0x1e78>
   13b5c:	ldr	r0, [pc, #80]	; 13bb4 <__assert_fail@plt+0x1e7c>
   13b60:	bl	11d38 <__assert_fail@plt>
   13b64:	ldr	r3, [pc, #64]	; 13bac <__assert_fail@plt+0x1e74>
   13b68:	mov	r2, #240	; 0xf0
   13b6c:	ldr	r1, [pc, #60]	; 13bb0 <__assert_fail@plt+0x1e78>
   13b70:	ldr	r0, [pc, #64]	; 13bb8 <__assert_fail@plt+0x1e80>
   13b74:	bl	11d38 <__assert_fail@plt>
   13b78:	ldr	r3, [pc, #44]	; 13bac <__assert_fail@plt+0x1e74>
   13b7c:	mov	r2, #241	; 0xf1
   13b80:	ldr	r1, [pc, #40]	; 13bb0 <__assert_fail@plt+0x1e78>
   13b84:	ldr	r0, [pc, #48]	; 13bbc <__assert_fail@plt+0x1e84>
   13b88:	bl	11d38 <__assert_fail@plt>
   13b8c:	andeq	r8, r2, r0, lsr r0
   13b90:	muleq	r1, r8, sp
   13b94:	andeq	r1, r1, r8, lsl #20
   13b98:	muleq	r1, ip, r9
   13b9c:	andeq	r7, r1, r8, lsl #10
   13ba0:	andeq	r7, r1, ip, lsl #3
   13ba4:	strdeq	r7, [r1], -r0
   13ba8:			; <UNDEFINED> instruction: 0x000171b0
   13bac:	andeq	r6, r1, ip, lsr #30
   13bb0:	andeq	r7, r1, r0, asr #1
   13bb4:	andeq	r7, r1, r8, asr #3
   13bb8:			; <UNDEFINED> instruction: 0x000171bc
   13bbc:	andeq	r7, r1, r4, lsl r2
   13bc0:	ldr	r3, [pc, #292]	; 13cec <__assert_fail@plt+0x1fb4>
   13bc4:	push	{r4, r5, r6, lr}
   13bc8:	ldr	r4, [r3]
   13bcc:	mov	r0, r4
   13bd0:	bl	11a14 <__fpending@plt>
   13bd4:	mov	r6, r0
   13bd8:	mov	r0, r4
   13bdc:	bl	1193c <ferror@plt>
   13be0:	mov	r5, r0
   13be4:	mov	r0, r4
   13be8:	bl	11bc4 <fclose@plt>
   13bec:	cmp	r5, #0
   13bf0:	mov	r4, r0
   13bf4:	bne	13c9c <__assert_fail@plt+0x1f64>
   13bf8:	cmp	r0, #0
   13bfc:	beq	13c18 <__assert_fail@plt+0x1ee0>
   13c00:	bl	11b1c <__errno_location@plt>
   13c04:	cmp	r6, #0
   13c08:	ldr	r3, [r0]
   13c0c:	bne	13c74 <__assert_fail@plt+0x1f3c>
   13c10:	cmp	r3, #9
   13c14:	bne	13c74 <__assert_fail@plt+0x1f3c>
   13c18:	ldr	r3, [pc, #208]	; 13cf0 <__assert_fail@plt+0x1fb8>
   13c1c:	ldr	r4, [r3]
   13c20:	mov	r0, r4
   13c24:	bl	11a14 <__fpending@plt>
   13c28:	mov	r6, r0
   13c2c:	mov	r0, r4
   13c30:	bl	1193c <ferror@plt>
   13c34:	mov	r5, r0
   13c38:	mov	r0, r4
   13c3c:	bl	11bc4 <fclose@plt>
   13c40:	cmp	r5, #0
   13c44:	mov	r4, r0
   13c48:	bne	13cd0 <__assert_fail@plt+0x1f98>
   13c4c:	cmp	r0, #0
   13c50:	popeq	{r4, r5, r6, pc}
   13c54:	cmp	r6, #0
   13c58:	bne	13c6c <__assert_fail@plt+0x1f34>
   13c5c:	bl	11b1c <__errno_location@plt>
   13c60:	ldr	r3, [r0]
   13c64:	cmp	r3, #9
   13c68:	popeq	{r4, r5, r6, pc}
   13c6c:	mov	r0, #1
   13c70:	bl	11954 <_exit@plt>
   13c74:	cmp	r3, #32
   13c78:	beq	13c18 <__assert_fail@plt+0x1ee0>
   13c7c:	cmp	r3, #0
   13c80:	beq	13cb8 <__assert_fail@plt+0x1f80>
   13c84:	mov	r2, #5
   13c88:	ldr	r1, [pc, #100]	; 13cf4 <__assert_fail@plt+0x1fbc>
   13c8c:	mov	r0, #0
   13c90:	bl	11984 <dcgettext@plt>
   13c94:	bl	11c0c <warn@plt>
   13c98:	b	13c6c <__assert_fail@plt+0x1f34>
   13c9c:	bl	11b1c <__errno_location@plt>
   13ca0:	cmp	r4, #0
   13ca4:	ldr	r3, [r0]
   13ca8:	bne	13c74 <__assert_fail@plt+0x1f3c>
   13cac:	cmp	r3, #32
   13cb0:	strne	r4, [r0]
   13cb4:	beq	13c18 <__assert_fail@plt+0x1ee0>
   13cb8:	mov	r2, #5
   13cbc:	ldr	r1, [pc, #48]	; 13cf4 <__assert_fail@plt+0x1fbc>
   13cc0:	mov	r0, #0
   13cc4:	bl	11984 <dcgettext@plt>
   13cc8:	bl	11b10 <warnx@plt>
   13ccc:	b	13c6c <__assert_fail@plt+0x1f34>
   13cd0:	cmp	r0, #0
   13cd4:	bne	13c6c <__assert_fail@plt+0x1f34>
   13cd8:	bl	11b1c <__errno_location@plt>
   13cdc:	ldr	r3, [r0]
   13ce0:	cmp	r3, #32
   13ce4:	strne	r4, [r0]
   13ce8:	b	13c6c <__assert_fail@plt+0x1f34>
   13cec:	andeq	r8, r2, r4, lsr #32
   13cf0:	andeq	r8, r2, r0, lsr #32
   13cf4:	andeq	r7, r1, ip, lsr #4
   13cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cfc:	subs	sl, r2, #0
   13d00:	ldr	r2, [pc, #1172]	; 1419c <__assert_fail@plt+0x2464>
   13d04:	sub	sp, sp, #60	; 0x3c
   13d08:	ldr	r2, [r2]
   13d0c:	str	r0, [sp, #28]
   13d10:	str	r3, [sp, #16]
   13d14:	str	r2, [sp, #52]	; 0x34
   13d18:	beq	14184 <__assert_fail@plt+0x244c>
   13d1c:	cmp	r1, #0
   13d20:	mov	r0, r1
   13d24:	beq	14170 <__assert_fail@plt+0x2438>
   13d28:	ldr	r3, [sp, #28]
   13d2c:	ldrb	r3, [r3, #64]	; 0x40
   13d30:	ands	r1, r3, #4
   13d34:	bne	140dc <__assert_fail@plt+0x23a4>
   13d38:	bl	11a80 <scols_table_new_line@plt>
   13d3c:	subs	r3, r0, #0
   13d40:	str	r3, [sp, #20]
   13d44:	beq	14134 <__assert_fail@plt+0x23fc>
   13d48:	ldr	r7, [pc, #1104]	; 141a0 <__assert_fail@plt+0x2468>
   13d4c:	ldr	r3, [r7, #16]
   13d50:	cmp	r3, #0
   13d54:	beq	140b4 <__assert_fail@plt+0x237c>
   13d58:	ldr	r3, [r7, #20]
   13d5c:	mov	r4, #0
   13d60:	cmp	r3, #10
   13d64:	str	r4, [sp, #36]	; 0x24
   13d68:	bgt	13f04 <__assert_fail@plt+0x21cc>
   13d6c:	add	r6, r7, #24
   13d70:	cmp	r3, #10
   13d74:	ldrls	pc, [pc, r3, lsl #2]
   13d78:	b	13eb8 <__assert_fail@plt+0x2180>
   13d7c:	andeq	r3, r1, r4, ror pc
   13d80:	andeq	r3, r1, r0, asr pc
   13d84:	andeq	r3, r1, r4, lsr #31
   13d88:	andeq	r3, r1, ip, lsl #31
   13d8c:	andeq	r3, r1, r4, lsr pc
   13d90:	andeq	r3, r1, r8, lsl pc
   13d94:	andeq	r3, r1, ip, ror #31
   13d98:	ldrdeq	r3, [r1], -r0
   13d9c:	andeq	r4, r1, r0, lsr #32
   13da0:	andeq	r3, r1, ip, lsr #29
   13da4:	andeq	r3, r1, r8, lsr #27
   13da8:	ldr	r2, [sp, #28]
   13dac:	mov	r0, #0
   13db0:	mov	r5, #0
   13db4:	ldrb	r3, [r2, #64]	; 0x40
   13db8:	ldr	r2, [r2, #68]	; 0x44
   13dbc:	tst	r3, #64	; 0x40
   13dc0:	movne	r3, #44	; 0x2c
   13dc4:	moveq	r3, #10
   13dc8:	str	r2, [sp, #12]
   13dcc:	str	r3, [sp, #8]
   13dd0:	bl	1196c <mnt_new_iter@plt>
   13dd4:	ldr	r1, [sl, #8]
   13dd8:	ldrd	r2, [sl]
   13ddc:	str	r5, [sp, #44]	; 0x2c
   13de0:	strd	r2, [sp]
   13de4:	mov	r8, r0
   13de8:	ldr	r0, [pc, #948]	; 141a4 <__assert_fail@plt+0x246c>
   13dec:	add	r1, r0, r1, lsl #2
   13df0:	add	r0, sp, #40	; 0x28
   13df4:	ldr	r2, [r1, #376]	; 0x178
   13df8:	ldr	r1, [pc, #936]	; 141a8 <__assert_fail@plt+0x2470>
   13dfc:	bl	13240 <__assert_fail@plt+0x1508>
   13e00:	str	r5, [sp, #36]	; 0x24
   13e04:	add	r3, sp, #44	; 0x2c
   13e08:	str	r3, [sp]
   13e0c:	ldr	r2, [pc, #920]	; 141ac <__assert_fail@plt+0x2474>
   13e10:	ldr	r3, [sp, #40]	; 0x28
   13e14:	mov	r1, r8
   13e18:	ldr	r0, [sp, #12]
   13e1c:	bl	11b7c <mnt_table_find_next_fs@plt>
   13e20:	cmp	r0, #0
   13e24:	bne	140a0 <__assert_fail@plt+0x2368>
   13e28:	ldr	r0, [sp, #44]	; 0x2c
   13e2c:	bl	11a2c <mnt_fs_get_target@plt>
   13e30:	ldr	fp, [sp, #36]	; 0x24
   13e34:	cmp	fp, #0
   13e38:	mov	r5, r0
   13e3c:	beq	1408c <__assert_fail@plt+0x2354>
   13e40:	mov	r1, r0
   13e44:	mov	r0, fp
   13e48:	bl	11864 <strstr@plt>
   13e4c:	subs	r9, r0, #0
   13e50:	beq	13e78 <__assert_fail@plt+0x2140>
   13e54:	mov	r0, r5
   13e58:	bl	11aec <strlen@plt>
   13e5c:	cmp	fp, r9
   13e60:	mov	r1, r0
   13e64:	beq	14060 <__assert_fail@plt+0x2328>
   13e68:	ldrsb	r0, [r9, #-1]
   13e6c:	ldr	r3, [sp, #8]
   13e70:	cmp	r0, r3
   13e74:	beq	14048 <__assert_fail@plt+0x2310>
   13e78:	mov	ip, #0
   13e7c:	ldr	r3, [sp, #8]
   13e80:	mov	r2, fp
   13e84:	ldr	r1, [pc, #804]	; 141b0 <__assert_fail@plt+0x2478>
   13e88:	str	r5, [sp]
   13e8c:	add	r0, sp, #48	; 0x30
   13e90:	str	ip, [sp, #48]	; 0x30
   13e94:	bl	13240 <__assert_fail@plt+0x1508>
   13e98:	ldr	r0, [sp, #36]	; 0x24
   13e9c:	bl	1190c <free@plt>
   13ea0:	ldr	r3, [sp, #48]	; 0x30
   13ea4:	str	r3, [sp, #36]	; 0x24
   13ea8:	b	13e04 <__assert_fail@plt+0x20cc>
   13eac:	ldr	r3, [sl, #8]
   13eb0:	cmp	r3, #1
   13eb4:	beq	140f0 <__assert_fail@plt+0x23b8>
   13eb8:	ldr	r2, [sp, #36]	; 0x24
   13ebc:	cmp	r2, #0
   13ec0:	beq	13ed8 <__assert_fail@plt+0x21a0>
   13ec4:	mov	r1, r4
   13ec8:	ldr	r0, [sp, #20]
   13ecc:	bl	11888 <scols_line_refer_data@plt>
   13ed0:	cmp	r0, #0
   13ed4:	bne	1415c <__assert_fail@plt+0x2424>
   13ed8:	ldr	r3, [r7, #16]
   13edc:	add	r4, r4, #1
   13ee0:	cmp	r3, r4
   13ee4:	bls	140b4 <__assert_fail@plt+0x237c>
   13ee8:	mov	r3, #0
   13eec:	cmp	r4, #0
   13ef0:	str	r3, [sp, #36]	; 0x24
   13ef4:	blt	14148 <__assert_fail@plt+0x2410>
   13ef8:	ldr	r3, [r6], #4
   13efc:	cmp	r3, #10
   13f00:	ble	13d70 <__assert_fail@plt+0x2038>
   13f04:	ldr	r3, [pc, #680]	; 141b4 <__assert_fail@plt+0x247c>
   13f08:	mov	r2, #242	; 0xf2
   13f0c:	ldr	r1, [pc, #676]	; 141b8 <__assert_fail@plt+0x2480>
   13f10:	ldr	r0, [pc, #676]	; 141bc <__assert_fail@plt+0x2484>
   13f14:	bl	11d38 <__assert_fail@plt>
   13f18:	ldr	r3, [sp, #16]
   13f1c:	ldr	r1, [pc, #668]	; 141c0 <__assert_fail@plt+0x2488>
   13f20:	add	r0, sp, #36	; 0x24
   13f24:	ldr	r2, [r3, #4]
   13f28:	bl	13240 <__assert_fail@plt+0x1508>
   13f2c:	ldr	r2, [sp, #36]	; 0x24
   13f30:	b	13ebc <__assert_fail@plt+0x2184>
   13f34:	ldr	r3, [sp, #16]
   13f38:	ldr	r1, [pc, #640]	; 141c0 <__assert_fail@plt+0x2488>
   13f3c:	add	r0, sp, #36	; 0x24
   13f40:	ldr	r2, [r3]
   13f44:	bl	13240 <__assert_fail@plt+0x1508>
   13f48:	ldr	r2, [sp, #36]	; 0x24
   13f4c:	b	13ebc <__assert_fail@plt+0x2184>
   13f50:	ldr	r3, [sl, #8]
   13f54:	ldr	r2, [pc, #584]	; 141a4 <__assert_fail@plt+0x246c>
   13f58:	ldr	r1, [pc, #612]	; 141c4 <__assert_fail@plt+0x248c>
   13f5c:	add	r3, r2, r3, lsl #2
   13f60:	add	r0, sp, #36	; 0x24
   13f64:	ldr	r2, [r3, #376]	; 0x178
   13f68:	bl	13240 <__assert_fail@plt+0x1508>
   13f6c:	ldr	r2, [sp, #36]	; 0x24
   13f70:	b	13ebc <__assert_fail@plt+0x2184>
   13f74:	ldrd	r2, [sl]
   13f78:	ldr	r1, [pc, #584]	; 141c8 <__assert_fail@plt+0x2490>
   13f7c:	add	r0, sp, #36	; 0x24
   13f80:	bl	13240 <__assert_fail@plt+0x1508>
   13f84:	ldr	r2, [sp, #36]	; 0x24
   13f88:	b	13ebc <__assert_fail@plt+0x2184>
   13f8c:	ldr	r2, [sl, #12]
   13f90:	ldr	r1, [pc, #552]	; 141c0 <__assert_fail@plt+0x2488>
   13f94:	add	r0, sp, #36	; 0x24
   13f98:	bl	13240 <__assert_fail@plt+0x1508>
   13f9c:	ldr	r2, [sp, #36]	; 0x24
   13fa0:	b	13ebc <__assert_fail@plt+0x2184>
   13fa4:	ldr	r3, [sl, #8]
   13fa8:	ldr	r0, [pc, #500]	; 141a4 <__assert_fail@plt+0x246c>
   13fac:	ldr	r2, [sp, #16]
   13fb0:	add	r3, r0, r3, lsl #2
   13fb4:	ldr	r1, [pc, #528]	; 141cc <__assert_fail@plt+0x2494>
   13fb8:	ldr	r2, [r2]
   13fbc:	add	r0, sp, #36	; 0x24
   13fc0:	ldr	r3, [r3, #376]	; 0x178
   13fc4:	bl	13240 <__assert_fail@plt+0x1508>
   13fc8:	ldr	r2, [sp, #36]	; 0x24
   13fcc:	b	13ebc <__assert_fail@plt+0x2184>
   13fd0:	ldr	r3, [sp, #16]
   13fd4:	ldr	r1, [pc, #484]	; 141c0 <__assert_fail@plt+0x2488>
   13fd8:	add	r0, sp, #36	; 0x24
   13fdc:	ldr	r2, [r3, #16]
   13fe0:	bl	13240 <__assert_fail@plt+0x1508>
   13fe4:	ldr	r2, [sp, #36]	; 0x24
   13fe8:	b	13ebc <__assert_fail@plt+0x2184>
   13fec:	ldr	r3, [sp, #16]
   13ff0:	ldr	r0, [r3]
   13ff4:	bl	16860 <__assert_fail@plt+0x4b28>
   13ff8:	cmp	r0, #0
   13ffc:	mov	r2, r0
   14000:	str	r0, [sp, #36]	; 0x24
   14004:	bne	13ec4 <__assert_fail@plt+0x218c>
   14008:	ldr	r3, [sp, #16]
   1400c:	ldr	r0, [r3]
   14010:	bl	16870 <__assert_fail@plt+0x4b38>
   14014:	mov	r2, r0
   14018:	str	r0, [sp, #36]	; 0x24
   1401c:	b	13ebc <__assert_fail@plt+0x2184>
   14020:	ldr	r3, [sp, #16]
   14024:	ldr	r0, [r7, #4]
   14028:	ldr	r1, [r3, #16]
   1402c:	bl	14414 <__assert_fail@plt+0x26dc>
   14030:	ldr	r1, [pc, #396]	; 141c4 <__assert_fail@plt+0x248c>
   14034:	ldr	r2, [r0, #4]
   14038:	add	r0, sp, #36	; 0x24
   1403c:	bl	13240 <__assert_fail@plt+0x1508>
   14040:	ldr	r2, [sp, #36]	; 0x24
   14044:	b	13ebc <__assert_fail@plt+0x2184>
   14048:	ldrsb	r3, [r9, r1]
   1404c:	ldr	r2, [sp, #8]
   14050:	cmp	r2, r3
   14054:	cmpne	r3, #0
   14058:	bne	13e78 <__assert_fail@plt+0x2140>
   1405c:	b	13e04 <__assert_fail@plt+0x20cc>
   14060:	str	r0, [sp, #24]
   14064:	mov	r0, fp
   14068:	bl	11aec <strlen@plt>
   1406c:	ldr	r1, [sp, #24]
   14070:	cmp	r1, r0
   14074:	beq	13e04 <__assert_fail@plt+0x20cc>
   14078:	ldrsb	r0, [fp, r1]
   1407c:	ldr	r3, [sp, #8]
   14080:	cmp	r0, r3
   14084:	bne	13e68 <__assert_fail@plt+0x2130>
   14088:	b	13e04 <__assert_fail@plt+0x20cc>
   1408c:	mov	r2, r0
   14090:	ldr	r1, [pc, #300]	; 141c4 <__assert_fail@plt+0x248c>
   14094:	add	r0, sp, #36	; 0x24
   14098:	bl	13240 <__assert_fail@plt+0x1508>
   1409c:	b	13e04 <__assert_fail@plt+0x20cc>
   140a0:	ldr	r0, [sp, #40]	; 0x28
   140a4:	bl	1190c <free@plt>
   140a8:	mov	r0, r8
   140ac:	bl	11b70 <mnt_free_iter@plt>
   140b0:	b	13eb8 <__assert_fail@plt+0x2180>
   140b4:	ldr	r3, [sp, #16]
   140b8:	ldr	r2, [sp, #20]
   140bc:	str	r2, [r3, #144]	; 0x90
   140c0:	ldr	r3, [pc, #212]	; 1419c <__assert_fail@plt+0x2464>
   140c4:	ldr	r2, [sp, #52]	; 0x34
   140c8:	ldr	r3, [r3]
   140cc:	cmp	r2, r3
   140d0:	bne	14198 <__assert_fail@plt+0x2460>
   140d4:	add	sp, sp, #60	; 0x3c
   140d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140dc:	ldr	r3, [sp, #16]
   140e0:	ldr	r1, [r3, #148]	; 0x94
   140e4:	cmp	r1, #0
   140e8:	ldrne	r1, [r1, #144]	; 0x90
   140ec:	b	13d38 <__assert_fail@plt+0x2000>
   140f0:	ldr	r3, [sp, #16]
   140f4:	ldr	r2, [r3, #152]	; 0x98
   140f8:	cmp	r2, #0
   140fc:	bge	14120 <__assert_fail@plt+0x23e8>
   14100:	cmn	r2, #1
   14104:	bne	13eb8 <__assert_fail@plt+0x2180>
   14108:	ldr	r2, [pc, #192]	; 141d0 <__assert_fail@plt+0x2498>
   1410c:	ldr	r1, [pc, #176]	; 141c4 <__assert_fail@plt+0x248c>
   14110:	add	r0, sp, #36	; 0x24
   14114:	bl	13240 <__assert_fail@plt+0x1508>
   14118:	ldr	r2, [sp, #36]	; 0x24
   1411c:	b	13ebc <__assert_fail@plt+0x2184>
   14120:	ldr	r1, [pc, #152]	; 141c0 <__assert_fail@plt+0x2488>
   14124:	add	r0, sp, #36	; 0x24
   14128:	bl	13240 <__assert_fail@plt+0x1508>
   1412c:	ldr	r2, [sp, #36]	; 0x24
   14130:	b	13ebc <__assert_fail@plt+0x2184>
   14134:	mov	r2, #5
   14138:	ldr	r1, [pc, #148]	; 141d4 <__assert_fail@plt+0x249c>
   1413c:	bl	11984 <dcgettext@plt>
   14140:	bl	11c0c <warn@plt>
   14144:	b	140c0 <__assert_fail@plt+0x2388>
   14148:	ldr	r3, [pc, #100]	; 141b4 <__assert_fail@plt+0x247c>
   1414c:	mov	r2, #240	; 0xf0
   14150:	ldr	r1, [pc, #96]	; 141b8 <__assert_fail@plt+0x2480>
   14154:	ldr	r0, [pc, #124]	; 141d8 <__assert_fail@plt+0x24a0>
   14158:	bl	11d38 <__assert_fail@plt>
   1415c:	mov	r3, #768	; 0x300
   14160:	ldr	r2, [pc, #80]	; 141b8 <__assert_fail@plt+0x2480>
   14164:	ldr	r1, [pc, #112]	; 141dc <__assert_fail@plt+0x24a4>
   14168:	mov	r0, #1
   1416c:	bl	119c0 <err@plt>
   14170:	ldr	r3, [pc, #104]	; 141e0 <__assert_fail@plt+0x24a8>
   14174:	ldr	r2, [pc, #104]	; 141e4 <__assert_fail@plt+0x24ac>
   14178:	ldr	r1, [pc, #56]	; 141b8 <__assert_fail@plt+0x2480>
   1417c:	ldr	r0, [pc, #100]	; 141e8 <__assert_fail@plt+0x24b0>
   14180:	bl	11d38 <__assert_fail@plt>
   14184:	ldr	r3, [pc, #84]	; 141e0 <__assert_fail@plt+0x24a8>
   14188:	ldr	r2, [pc, #92]	; 141ec <__assert_fail@plt+0x24b4>
   1418c:	ldr	r1, [pc, #36]	; 141b8 <__assert_fail@plt+0x2480>
   14190:	ldr	r0, [pc, #88]	; 141f0 <__assert_fail@plt+0x24b8>
   14194:	bl	11d38 <__assert_fail@plt>
   14198:	bl	119a8 <__stack_chk_fail@plt>
   1419c:	andeq	r7, r2, r8, lsr #26
   141a0:	andeq	r8, r2, r0, lsr r0
   141a4:	muleq	r1, r8, sp
   141a8:	andeq	r7, r1, ip, ror r2
   141ac:	andeq	r3, r1, r8, asr r3
   141b0:	andeq	r7, r1, r8, lsl #5
   141b4:	andeq	r6, r1, ip, lsr #30
   141b8:	andeq	r7, r1, r0, asr #1
   141bc:	andeq	r7, r1, r8, asr #3
   141c0:	andeq	r7, r1, r0, lsr #2
   141c4:	andeq	r7, r1, r8, lsl r8
   141c8:	andeq	r7, r1, ip, asr r2
   141cc:	andeq	r7, r1, r0, ror #4
   141d0:	andeq	r7, r1, r0, ror r2
   141d4:	andeq	r7, r1, ip, lsr r2
   141d8:			; <UNDEFINED> instruction: 0x000171bc
   141dc:	muleq	r1, r0, r2
   141e0:	andeq	r6, r1, ip, lsr pc
   141e4:	andeq	r0, r0, sl, asr #5
   141e8:	andeq	r7, r1, r8, lsr #3
   141ec:	andeq	r0, r0, r9, asr #5
   141f0:	andeq	r7, r1, r8, lsr r2
   141f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141f8:	mov	r5, r2
   141fc:	ldrb	r2, [r0, #64]	; 0x40
   14200:	sub	sp, sp, #4
   14204:	mov	r4, r0
   14208:	tst	r2, #4
   1420c:	mov	fp, r1
   14210:	mov	sl, r3
   14214:	beq	14230 <__assert_fail@plt+0x24f8>
   14218:	ldr	r2, [r5, #148]	; 0x94
   1421c:	cmp	r2, #0
   14220:	beq	14230 <__assert_fail@plt+0x24f8>
   14224:	ldr	ip, [r2, #144]	; 0x90
   14228:	cmp	ip, #0
   1422c:	beq	1424c <__assert_fail@plt+0x2514>
   14230:	mov	r3, r5
   14234:	mov	r2, sl
   14238:	mov	r1, fp
   1423c:	mov	r0, r4
   14240:	add	sp, sp, #4
   14244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14248:	b	13cf8 <__assert_fail@plt+0x1fc0>
   1424c:	ldr	ip, [r3, #8]
   14250:	add	ip, ip, #3
   14254:	lsl	ip, ip, #3
   14258:	ldrd	r8, [r2, ip]
   1425c:	ldrd	r6, [r5, ip]
   14260:	cmp	r9, r7
   14264:	cmpeq	r8, r6
   14268:	bne	14230 <__assert_fail@plt+0x24f8>
   1426c:	bl	141f4 <__assert_fail@plt+0x24bc>
   14270:	b	14230 <__assert_fail@plt+0x24f8>
   14274:	ldr	ip, [pc, #396]	; 14408 <__assert_fail@plt+0x26d0>
   14278:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1427c:	add	ip, pc, ip
   14280:	ldr	lr, [pc, #388]	; 1440c <__assert_fail@plt+0x26d4>
   14284:	sub	sp, sp, #1024	; 0x400
   14288:	sub	sp, sp, #8
   1428c:	ldr	r8, [ip, lr]
   14290:	mov	sl, r3
   14294:	mov	r7, r0
   14298:	ldr	r3, [r8]
   1429c:	mov	r5, r1
   142a0:	mov	r0, #1
   142a4:	mov	r1, #12
   142a8:	mov	r9, r2
   142ac:	str	r3, [sp, #1028]	; 0x404
   142b0:	bl	11858 <calloc@plt>
   142b4:	subs	r6, r0, #0
   142b8:	beq	14360 <__assert_fail@plt+0x2628>
   142bc:	cmp	r9, #0
   142c0:	str	sl, [r6]
   142c4:	beq	14398 <__assert_fail@plt+0x2660>
   142c8:	mov	r4, sp
   142cc:	mov	r0, r4
   142d0:	mov	r2, #256	; 0x100
   142d4:	mov	r1, r9
   142d8:	bl	11c48 <mbstowcs@plt>
   142dc:	cmp	r0, #0
   142e0:	bne	143e0 <__assert_fail@plt+0x26a8>
   142e4:	mov	r0, r9
   142e8:	bl	11aec <strlen@plt>
   142ec:	mov	r4, r0
   142f0:	cmp	r4, #0
   142f4:	bgt	143a0 <__assert_fail@plt+0x2668>
   142f8:	ldr	r2, [pc, #272]	; 14410 <__assert_fail@plt+0x26d8>
   142fc:	mov	r3, sl
   14300:	add	r2, pc, r2
   14304:	mov	r1, #1
   14308:	add	r0, r6, #4
   1430c:	bl	11a50 <__asprintf_chk@plt>
   14310:	cmp	r0, #0
   14314:	blt	143b4 <__assert_fail@plt+0x267c>
   14318:	ldr	r3, [r7]
   1431c:	cmp	r3, #0
   14320:	beq	143d8 <__assert_fail@plt+0x26a0>
   14324:	ldr	r2, [r3, #8]
   14328:	cmp	r2, #0
   1432c:	bne	14338 <__assert_fail@plt+0x2600>
   14330:	b	143fc <__assert_fail@plt+0x26c4>
   14334:	mov	r2, r3
   14338:	ldr	r3, [r2, #8]
   1433c:	cmp	r3, #0
   14340:	bne	14334 <__assert_fail@plt+0x25fc>
   14344:	str	r6, [r2, #8]
   14348:	cmp	r4, #0
   1434c:	ble	1437c <__assert_fail@plt+0x2644>
   14350:	ldr	r0, [r5]
   14354:	cmp	r0, r4
   14358:	movlt	r0, r4
   1435c:	str	r0, [r5]
   14360:	ldr	r2, [sp, #1028]	; 0x404
   14364:	ldr	r3, [r8]
   14368:	cmp	r2, r3
   1436c:	bne	14404 <__assert_fail@plt+0x26cc>
   14370:	add	sp, sp, #1024	; 0x400
   14374:	add	sp, sp, #8
   14378:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1437c:	ldr	r0, [r6, #4]
   14380:	cmp	r0, #0
   14384:	moveq	r4, r0
   14388:	beq	14350 <__assert_fail@plt+0x2618>
   1438c:	bl	11aec <strlen@plt>
   14390:	mov	r4, r0
   14394:	b	14350 <__assert_fail@plt+0x2618>
   14398:	mov	r4, r9
   1439c:	b	142f8 <__assert_fail@plt+0x25c0>
   143a0:	mov	r0, r9
   143a4:	bl	11990 <strdup@plt>
   143a8:	cmp	r0, #0
   143ac:	str	r0, [r6, #4]
   143b0:	bne	14318 <__assert_fail@plt+0x25e0>
   143b4:	ldr	r2, [sp, #1028]	; 0x404
   143b8:	ldr	r3, [r8]
   143bc:	cmp	r2, r3
   143c0:	bne	14404 <__assert_fail@plt+0x26cc>
   143c4:	mov	r0, r6
   143c8:	add	sp, sp, #1024	; 0x400
   143cc:	add	sp, sp, #8
   143d0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   143d4:	b	1190c <free@plt>
   143d8:	str	r6, [r7]
   143dc:	b	14348 <__assert_fail@plt+0x2610>
   143e0:	mov	r0, r4
   143e4:	mov	r3, #0
   143e8:	mov	r1, #256	; 0x100
   143ec:	str	r3, [sp, #1024]	; 0x400
   143f0:	bl	11bf4 <wcswidth@plt>
   143f4:	mov	r4, r0
   143f8:	b	142f0 <__assert_fail@plt+0x25b8>
   143fc:	mov	r2, r3
   14400:	b	14344 <__assert_fail@plt+0x260c>
   14404:	bl	119a8 <__stack_chk_fail@plt>
   14408:			; <UNDEFINED> instruction: 0x00013bb8
   1440c:			; <UNDEFINED> instruction: 0x000001b8
   14410:	andeq	r3, r0, r0, lsl r7
   14414:	cmp	r0, #0
   14418:	bxeq	lr
   1441c:	ldr	r0, [r0]
   14420:	cmp	r0, #0
   14424:	bxeq	lr
   14428:	ldr	r3, [r0]
   1442c:	cmp	r1, r3
   14430:	bxeq	lr
   14434:	ldr	r0, [r0, #8]
   14438:	cmp	r0, #0
   1443c:	bxeq	lr
   14440:	ldr	r3, [r0]
   14444:	cmp	r3, r1
   14448:	bne	14434 <__assert_fail@plt+0x26fc>
   1444c:	bx	lr
   14450:	mov	r1, #8
   14454:	mov	r0, #1
   14458:	b	11858 <calloc@plt>
   1445c:	push	{r4, r5, r6, lr}
   14460:	mov	r6, r0
   14464:	ldr	r4, [r0]
   14468:	cmp	r4, #0
   1446c:	beq	14488 <__assert_fail@plt+0x2750>
   14470:	ldmib	r4, {r0, r5}
   14474:	bl	1190c <free@plt>
   14478:	mov	r0, r4
   1447c:	bl	1190c <free@plt>
   14480:	subs	r4, r5, #0
   14484:	bne	14470 <__assert_fail@plt+0x2738>
   14488:	mov	r0, r6
   1448c:	pop	{r4, r5, r6, lr}
   14490:	b	1190c <free@plt>
   14494:	push	{r4, r5, r6, lr}
   14498:	mov	r4, r0
   1449c:	mov	r5, r1
   144a0:	bl	14414 <__assert_fail@plt+0x26dc>
   144a4:	cmp	r0, #0
   144a8:	popne	{r4, r5, r6, pc}
   144ac:	mov	r0, r5
   144b0:	bl	118b8 <getpwuid@plt>
   144b4:	mov	r3, r5
   144b8:	add	r1, r4, #4
   144bc:	subs	r2, r0, #0
   144c0:	mov	r0, r4
   144c4:	ldrne	r2, [r2]
   144c8:	pop	{r4, r5, r6, lr}
   144cc:	b	14274 <__assert_fail@plt+0x253c>
   144d0:	push	{r4, r5, r6, lr}
   144d4:	mov	r4, r0
   144d8:	mov	r5, r1
   144dc:	bl	14414 <__assert_fail@plt+0x26dc>
   144e0:	cmp	r0, #0
   144e4:	popne	{r4, r5, r6, pc}
   144e8:	mov	r0, r5
   144ec:	bl	11d08 <getgrgid@plt>
   144f0:	mov	r3, r5
   144f4:	add	r1, r4, #4
   144f8:	subs	r2, r0, #0
   144fc:	mov	r0, r4
   14500:	ldrne	r2, [r2]
   14504:	pop	{r4, r5, r6, lr}
   14508:	b	14274 <__assert_fail@plt+0x253c>
   1450c:	andeq	r0, r0, r0
   14510:	cmp	r0, #0
   14514:	mov	r3, #0
   14518:	str	r3, [r1]
   1451c:	bxeq	lr
   14520:	ldrsb	r2, [r0]
   14524:	cmp	r2, #47	; 0x2f
   14528:	bne	14564 <__assert_fail@plt+0x282c>
   1452c:	ldrsb	r3, [r0, #1]
   14530:	cmp	r3, #47	; 0x2f
   14534:	bne	1456c <__assert_fail@plt+0x2834>
   14538:	add	r3, r0, #1
   1453c:	b	1454c <__assert_fail@plt+0x2814>
   14540:	ldrsb	r2, [r3]
   14544:	cmp	r2, #47	; 0x2f
   14548:	bne	1456c <__assert_fail@plt+0x2834>
   1454c:	cmp	r3, #0
   14550:	mov	r0, r3
   14554:	bxeq	lr
   14558:	ldrsb	r2, [r3], #1
   1455c:	cmp	r2, #47	; 0x2f
   14560:	beq	14540 <__assert_fail@plt+0x2808>
   14564:	cmp	r2, #0
   14568:	beq	145a8 <__assert_fail@plt+0x2870>
   1456c:	mov	r3, #1
   14570:	str	r3, [r1]
   14574:	ldrsb	r3, [r0, #1]
   14578:	add	r2, r0, #1
   1457c:	cmp	r3, #47	; 0x2f
   14580:	cmpne	r3, #0
   14584:	bxeq	lr
   14588:	rsb	r3, r0, #1
   1458c:	add	ip, r2, r3
   14590:	str	ip, [r1]
   14594:	ldrsb	ip, [r2, #1]!
   14598:	cmp	ip, #0
   1459c:	cmpne	ip, #47	; 0x2f
   145a0:	bne	1458c <__assert_fail@plt+0x2854>
   145a4:	bx	lr
   145a8:	mov	r0, r2
   145ac:	bx	lr
   145b0:	push	{r4, r5, r6, r7, r8, lr}
   145b4:	mov	r7, r1
   145b8:	ldrsb	r1, [r0]
   145bc:	cmp	r1, #0
   145c0:	movne	r5, r0
   145c4:	movne	r4, #0
   145c8:	beq	14634 <__assert_fail@plt+0x28fc>
   145cc:	cmp	r1, #92	; 0x5c
   145d0:	addne	r6, r5, r4
   145d4:	beq	14604 <__assert_fail@plt+0x28cc>
   145d8:	mov	r0, r7
   145dc:	bl	11af8 <strchr@plt>
   145e0:	cmp	r0, #0
   145e4:	bne	1462c <__assert_fail@plt+0x28f4>
   145e8:	ldrsb	r1, [r6, #1]!
   145ec:	add	r4, r4, #1
   145f0:	mov	r0, r4
   145f4:	cmp	r1, #0
   145f8:	popeq	{r4, r5, r6, r7, r8, pc}
   145fc:	cmp	r1, #92	; 0x5c
   14600:	bne	145d8 <__assert_fail@plt+0x28a0>
   14604:	add	r3, r5, r4
   14608:	ldrsb	r3, [r3, #1]
   1460c:	cmp	r3, #0
   14610:	beq	1462c <__assert_fail@plt+0x28f4>
   14614:	add	r4, r4, #2
   14618:	mov	r0, r4
   1461c:	ldrsb	r1, [r5, r4]
   14620:	cmp	r1, #0
   14624:	bne	145cc <__assert_fail@plt+0x2894>
   14628:	pop	{r4, r5, r6, r7, r8, pc}
   1462c:	mov	r0, r4
   14630:	pop	{r4, r5, r6, r7, r8, pc}
   14634:	mov	r0, r1
   14638:	pop	{r4, r5, r6, r7, r8, pc}
   1463c:	ldr	ip, [pc, #244]	; 14738 <__assert_fail@plt+0x2a00>
   14640:	push	{r4, r5, r6, r7, r8, r9, lr}
   14644:	add	ip, pc, ip
   14648:	ldr	lr, [pc, #236]	; 1473c <__assert_fail@plt+0x2a04>
   1464c:	sub	sp, sp, #12
   14650:	mov	r5, #0
   14654:	ldr	r7, [ip, lr]
   14658:	mov	r4, r0
   1465c:	mov	r8, r1
   14660:	ldr	r3, [r7]
   14664:	mov	r0, ip
   14668:	mov	r9, r2
   1466c:	str	r5, [sp]
   14670:	str	r3, [sp, #4]
   14674:	bl	11b1c <__errno_location@plt>
   14678:	cmp	r4, r5
   1467c:	str	r5, [r0]
   14680:	beq	14690 <__assert_fail@plt+0x2958>
   14684:	ldrsb	r3, [r4]
   14688:	cmp	r3, r5
   1468c:	bne	146b0 <__assert_fail@plt+0x2978>
   14690:	ldr	r1, [pc, #168]	; 14740 <__assert_fail@plt+0x2a08>
   14694:	mov	r3, r4
   14698:	add	r1, pc, r1
   1469c:	mov	r2, r8
   146a0:	ldr	r0, [r1]
   146a4:	ldr	r1, [pc, #152]	; 14744 <__assert_fail@plt+0x2a0c>
   146a8:	add	r1, pc, r1
   146ac:	bl	11be8 <errx@plt>
   146b0:	mov	r6, r0
   146b4:	mov	r2, r9
   146b8:	mov	r3, r5
   146bc:	mov	r1, sp
   146c0:	mov	r0, r4
   146c4:	bl	11978 <__strtoull_internal@plt>
   146c8:	ldr	r2, [r6]
   146cc:	cmp	r2, r5
   146d0:	bne	1470c <__assert_fail@plt+0x29d4>
   146d4:	ldr	r3, [sp]
   146d8:	cmp	r3, r4
   146dc:	beq	14690 <__assert_fail@plt+0x2958>
   146e0:	cmp	r3, r5
   146e4:	beq	146f4 <__assert_fail@plt+0x29bc>
   146e8:	ldrsb	r3, [r3]
   146ec:	cmp	r3, r5
   146f0:	bne	14690 <__assert_fail@plt+0x2958>
   146f4:	ldr	r2, [sp, #4]
   146f8:	ldr	r3, [r7]
   146fc:	cmp	r2, r3
   14700:	bne	14734 <__assert_fail@plt+0x29fc>
   14704:	add	sp, sp, #12
   14708:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1470c:	ldr	r3, [pc, #52]	; 14748 <__assert_fail@plt+0x2a10>
   14710:	cmp	r2, #34	; 0x22
   14714:	add	r3, pc, r3
   14718:	ldr	r0, [r3]
   1471c:	bne	14690 <__assert_fail@plt+0x2958>
   14720:	ldr	r1, [pc, #36]	; 1474c <__assert_fail@plt+0x2a14>
   14724:	mov	r3, r4
   14728:	mov	r2, r8
   1472c:	add	r1, pc, r1
   14730:	bl	119c0 <err@plt>
   14734:	bl	119a8 <__stack_chk_fail@plt>
   14738:	strdeq	r3, [r1], -r0
   1473c:			; <UNDEFINED> instruction: 0x000001b8
   14740:	andeq	r3, r1, ip, ror #18
   14744:	andeq	r3, r0, ip, ror #6
   14748:	strdeq	r3, [r1], -r0
   1474c:	andeq	r3, r0, r8, ror #5
   14750:	push	{r4, lr}
   14754:	mov	r5, r0
   14758:	mov	r4, r1
   1475c:	bl	11b1c <__errno_location@plt>
   14760:	ldr	ip, [pc, #32]	; 14788 <__assert_fail@plt+0x2a50>
   14764:	ldr	r1, [pc, #32]	; 1478c <__assert_fail@plt+0x2a54>
   14768:	add	ip, pc, ip
   1476c:	mov	lr, #34	; 0x22
   14770:	mov	r3, r5
   14774:	mov	r2, r4
   14778:	add	r1, pc, r1
   1477c:	str	lr, [r0]
   14780:	ldr	r0, [ip]
   14784:	bl	119c0 <err@plt>
   14788:	muleq	r1, ip, r8
   1478c:	muleq	r0, ip, r2
   14790:	push	{r4, r5, r6, lr}
   14794:	mov	r4, r0
   14798:	mov	r5, r1
   1479c:	bl	1463c <__assert_fail@plt+0x2904>
   147a0:	mov	r3, #0
   147a4:	mvn	r2, #0
   147a8:	cmp	r1, r3
   147ac:	cmpeq	r0, r2
   147b0:	popls	{r4, r5, r6, pc}
   147b4:	mov	r1, r5
   147b8:	mov	r0, r4
   147bc:	bl	14750 <__assert_fail@plt+0x2a18>
   147c0:	ldr	r3, [pc, #8]	; 147d0 <__assert_fail@plt+0x2a98>
   147c4:	add	r3, pc, r3
   147c8:	str	r0, [r3]
   147cc:	bx	lr
   147d0:	andeq	r3, r1, r0, asr #16
   147d4:	ldr	r3, [pc, #1648]	; 14e4c <__assert_fail@plt+0x3114>
   147d8:	ldr	ip, [pc, #1648]	; 14e50 <__assert_fail@plt+0x3118>
   147dc:	add	r3, pc, r3
   147e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147e4:	mov	r5, r1
   147e8:	ldr	r1, [r3, ip]
   147ec:	sub	sp, sp, #52	; 0x34
   147f0:	mov	ip, r1
   147f4:	mov	r8, r0
   147f8:	str	r1, [sp, #24]
   147fc:	mov	r0, #0
   14800:	mov	r1, #0
   14804:	ldr	r3, [ip]
   14808:	strd	r0, [r5]
   1480c:	mov	r9, r2
   14810:	str	r3, [sp, #44]	; 0x2c
   14814:	bl	11b1c <__errno_location@plt>
   14818:	cmp	r8, #0
   1481c:	mov	r4, r0
   14820:	beq	14a00 <__assert_fail@plt+0x2cc8>
   14824:	ldrsb	fp, [r8]
   14828:	cmp	fp, #0
   1482c:	beq	14a00 <__assert_fail@plt+0x2cc8>
   14830:	bl	11abc <__ctype_b_loc@plt>
   14834:	mov	r2, r8
   14838:	ldr	r1, [r0]
   1483c:	b	14844 <__assert_fail@plt+0x2b0c>
   14840:	ldrsb	fp, [r2, #1]!
   14844:	uxtb	r3, fp
   14848:	lsl	r3, r3, #1
   1484c:	ldrh	ip, [r1, r3]
   14850:	ands	ip, ip, #8192	; 0x2000
   14854:	bne	14840 <__assert_fail@plt+0x2b08>
   14858:	cmp	fp, #45	; 0x2d
   1485c:	beq	14a00 <__assert_fail@plt+0x2cc8>
   14860:	add	fp, sp, #40	; 0x28
   14864:	mov	r3, ip
   14868:	mov	r2, ip
   1486c:	str	ip, [r4]
   14870:	mov	r1, fp
   14874:	mov	r0, r8
   14878:	str	ip, [sp, #40]	; 0x28
   1487c:	bl	11978 <__strtoull_internal@plt>
   14880:	ldr	sl, [sp, #40]	; 0x28
   14884:	cmp	sl, r8
   14888:	mov	r2, r0
   1488c:	mov	r3, r1
   14890:	ldr	r0, [r4]
   14894:	strd	r2, [sp, #16]
   14898:	beq	14b80 <__assert_fail@plt+0x2e48>
   1489c:	cmp	r0, #0
   148a0:	bne	14a28 <__assert_fail@plt+0x2cf0>
   148a4:	cmp	sl, #0
   148a8:	beq	14bb4 <__assert_fail@plt+0x2e7c>
   148ac:	ldrsb	r0, [sl]
   148b0:	cmp	r0, #0
   148b4:	beq	14ba8 <__assert_fail@plt+0x2e70>
   148b8:	mov	r8, #0
   148bc:	mov	r2, #0
   148c0:	mov	r3, #0
   148c4:	str	r9, [sp, #32]
   148c8:	mov	r6, fp
   148cc:	mov	r9, sl
   148d0:	mov	r7, r8
   148d4:	mov	sl, r2
   148d8:	mov	fp, r3
   148dc:	str	r5, [sp, #28]
   148e0:	ldrsb	r2, [r9, #1]
   148e4:	cmp	r2, #105	; 0x69
   148e8:	beq	14a6c <__assert_fail@plt+0x2d34>
   148ec:	bic	r1, r2, #32
   148f0:	cmp	r1, #66	; 0x42
   148f4:	bne	14b8c <__assert_fail@plt+0x2e54>
   148f8:	ldrsb	r2, [r9, #2]
   148fc:	cmp	r2, #0
   14900:	beq	14d70 <__assert_fail@plt+0x3038>
   14904:	bl	11c3c <localeconv@plt>
   14908:	cmp	r0, #0
   1490c:	beq	14a00 <__assert_fail@plt+0x2cc8>
   14910:	ldr	r2, [r0]
   14914:	cmp	r2, #0
   14918:	beq	14a00 <__assert_fail@plt+0x2cc8>
   1491c:	mov	r0, r2
   14920:	str	r2, [sp]
   14924:	bl	11aec <strlen@plt>
   14928:	orrs	r3, sl, fp
   1492c:	mov	r5, r0
   14930:	bne	14a00 <__assert_fail@plt+0x2cc8>
   14934:	ldrsb	r1, [r9]
   14938:	cmp	r1, #0
   1493c:	beq	14a00 <__assert_fail@plt+0x2cc8>
   14940:	ldr	r2, [sp]
   14944:	mov	r1, r9
   14948:	mov	r0, r2
   1494c:	mov	r2, r5
   14950:	bl	11cc0 <strncmp@plt>
   14954:	cmp	r0, #0
   14958:	bne	14a00 <__assert_fail@plt+0x2cc8>
   1495c:	ldrsb	r2, [r9, r5]
   14960:	add	r5, r9, r5
   14964:	cmp	r2, #48	; 0x30
   14968:	bne	14988 <__assert_fail@plt+0x2c50>
   1496c:	add	r8, r8, #1
   14970:	sub	r1, r8, r5
   14974:	mov	r3, r5
   14978:	add	r8, r3, r1
   1497c:	ldrsb	r2, [r3, #1]!
   14980:	cmp	r2, #48	; 0x30
   14984:	beq	14978 <__assert_fail@plt+0x2c40>
   14988:	mov	r3, #0
   1498c:	str	r7, [r4]
   14990:	mov	r2, r3
   14994:	mov	r1, r6
   14998:	mov	r0, r5
   1499c:	str	r7, [sp, #40]	; 0x28
   149a0:	bl	11978 <__strtoull_internal@plt>
   149a4:	ldr	r9, [sp, #40]	; 0x28
   149a8:	cmp	r9, r5
   149ac:	mov	sl, r0
   149b0:	mov	fp, r1
   149b4:	beq	14b7c <__assert_fail@plt+0x2e44>
   149b8:	ldr	ip, [r4]
   149bc:	cmp	ip, #0
   149c0:	beq	14a58 <__assert_fail@plt+0x2d20>
   149c4:	subs	r3, r0, #1
   149c8:	str	r3, [sp, #8]
   149cc:	sbc	r3, r1, #0
   149d0:	str	r3, [sp, #12]
   149d4:	ldrd	r2, [sp, #8]
   149d8:	mvn	r1, #0
   149dc:	mvn	r0, #2
   149e0:	cmp	r3, r1
   149e4:	cmpeq	r2, r0
   149e8:	bhi	14dac <__assert_fail@plt+0x3074>
   149ec:	cmp	r9, #0
   149f0:	beq	14a00 <__assert_fail@plt+0x2cc8>
   149f4:	ldrsb	r2, [r9]
   149f8:	cmp	r2, #0
   149fc:	bne	148e0 <__assert_fail@plt+0x2ba8>
   14a00:	mov	r3, #22
   14a04:	mvn	r0, #21
   14a08:	str	r3, [r4]
   14a0c:	ldr	r3, [sp, #24]
   14a10:	ldr	r2, [sp, #44]	; 0x2c
   14a14:	ldr	r3, [r3]
   14a18:	cmp	r2, r3
   14a1c:	bne	14e48 <__assert_fail@plt+0x3110>
   14a20:	add	sp, sp, #52	; 0x34
   14a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a28:	subs	r6, r2, #1
   14a2c:	sbc	r7, r3, #0
   14a30:	mvn	r3, #0
   14a34:	mvn	r2, #2
   14a38:	cmp	r7, r3
   14a3c:	cmpeq	r6, r2
   14a40:	bls	148a4 <__assert_fail@plt+0x2b6c>
   14a44:	rsb	r0, r0, #0
   14a48:	cmp	r0, #0
   14a4c:	bge	14a0c <__assert_fail@plt+0x2cd4>
   14a50:	rsb	r3, r0, #0
   14a54:	b	14a08 <__assert_fail@plt+0x2cd0>
   14a58:	orrs	r3, sl, fp
   14a5c:	bne	149ec <__assert_fail@plt+0x2cb4>
   14a60:	ldrsb	r2, [r9, #1]
   14a64:	cmp	r2, #105	; 0x69
   14a68:	bne	148ec <__assert_fail@plt+0x2bb4>
   14a6c:	ldrsb	r2, [r9, #2]
   14a70:	bic	r2, r2, #32
   14a74:	cmp	r2, #66	; 0x42
   14a78:	bne	14904 <__assert_fail@plt+0x2bcc>
   14a7c:	ldrsb	r2, [r9, #3]
   14a80:	cmp	r2, #0
   14a84:	bne	14904 <__assert_fail@plt+0x2bcc>
   14a88:	strd	sl, [sp]
   14a8c:	mov	sl, r9
   14a90:	ldr	r9, [sp, #32]
   14a94:	mov	r3, #1024	; 0x400
   14a98:	ldr	r5, [sp, #28]
   14a9c:	str	r3, [sp, #28]
   14aa0:	ldrsb	r7, [sl]
   14aa4:	ldr	r6, [pc, #936]	; 14e54 <__assert_fail@plt+0x311c>
   14aa8:	add	r6, pc, r6
   14aac:	mov	r1, r7
   14ab0:	mov	r0, r6
   14ab4:	bl	11af8 <strchr@plt>
   14ab8:	cmp	r0, #0
   14abc:	beq	14d8c <__assert_fail@plt+0x3054>
   14ac0:	sub	ip, r0, r6
   14ac4:	add	fp, ip, #1
   14ac8:	cmp	fp, #0
   14acc:	beq	14b98 <__assert_fail@plt+0x2e60>
   14ad0:	ldr	r3, [sp, #20]
   14ad4:	ldr	r6, [sp, #28]
   14ad8:	cmp	r3, #0
   14adc:	mov	r0, #0
   14ae0:	asr	r7, r6, #31
   14ae4:	mov	r1, #0
   14ae8:	bne	14de8 <__assert_fail@plt+0x30b0>
   14aec:	orrs	r3, r0, r1
   14af0:	bne	14bdc <__assert_fail@plt+0x2ea4>
   14af4:	str	fp, [sp, #32]
   14af8:	sub	ip, ip, #1
   14afc:	str	r8, [sp, #36]	; 0x24
   14b00:	mov	fp, r4
   14b04:	ldrd	r0, [sp, #16]
   14b08:	mov	lr, r5
   14b0c:	mov	sl, r9
   14b10:	b	14b20 <__assert_fail@plt+0x2de8>
   14b14:	orrs	r3, r4, r5
   14b18:	sub	ip, ip, #1
   14b1c:	bne	14bc4 <__assert_fail@plt+0x2e8c>
   14b20:	mul	r2, r0, r7
   14b24:	cmn	ip, #1
   14b28:	mla	r2, r6, r1, r2
   14b2c:	umull	r0, r1, r0, r6
   14b30:	add	r2, r2, r1
   14b34:	mov	r1, r2
   14b38:	beq	14d50 <__assert_fail@plt+0x3018>
   14b3c:	cmp	r2, #0
   14b40:	mov	r4, #0
   14b44:	mov	r5, #0
   14b48:	beq	14b14 <__assert_fail@plt+0x2ddc>
   14b4c:	umull	r2, r3, r6, r2
   14b50:	umull	r8, r9, r0, r6
   14b54:	strd	r2, [sp, #8]
   14b58:	mov	r8, r9
   14b5c:	ldr	r3, [sp, #12]
   14b60:	adds	r8, r2, r8
   14b64:	mov	r2, #0
   14b68:	adc	r3, r3, r2
   14b6c:	cmp	r3, r2
   14b70:	movne	r4, #1
   14b74:	movne	r5, #0
   14b78:	b	14b14 <__assert_fail@plt+0x2ddc>
   14b7c:	ldr	r0, [r4]
   14b80:	cmp	r0, #0
   14b84:	beq	14a00 <__assert_fail@plt+0x2cc8>
   14b88:	b	14a44 <__assert_fail@plt+0x2d0c>
   14b8c:	cmp	r2, #0
   14b90:	bne	14904 <__assert_fail@plt+0x2bcc>
   14b94:	b	14a88 <__assert_fail@plt+0x2d50>
   14b98:	cmp	r9, #0
   14b9c:	movne	r0, fp
   14ba0:	bne	14be8 <__assert_fail@plt+0x2eb0>
   14ba4:	mov	r0, r9
   14ba8:	ldrd	r2, [sp, #16]
   14bac:	strd	r2, [r5]
   14bb0:	b	14a0c <__assert_fail@plt+0x2cd4>
   14bb4:	ldrd	r2, [sp, #16]
   14bb8:	mov	r0, sl
   14bbc:	strd	r2, [r5]
   14bc0:	b	14a0c <__assert_fail@plt+0x2cd4>
   14bc4:	mov	r4, fp
   14bc8:	ldr	r8, [sp, #36]	; 0x24
   14bcc:	ldr	fp, [sp, #32]
   14bd0:	mov	r5, lr
   14bd4:	mov	r9, sl
   14bd8:	strd	r0, [sp, #16]
   14bdc:	mvn	r0, #33	; 0x21
   14be0:	cmp	r9, #0
   14be4:	beq	14bec <__assert_fail@plt+0x2eb4>
   14be8:	str	fp, [r9]
   14bec:	ldrd	r2, [sp]
   14bf0:	mov	r1, r2
   14bf4:	orrs	r3, r1, r3
   14bf8:	movne	r3, #1
   14bfc:	moveq	r3, #0
   14c00:	cmp	fp, #0
   14c04:	moveq	r3, #0
   14c08:	cmp	r3, #0
   14c0c:	beq	14d44 <__assert_fail@plt+0x300c>
   14c10:	ldr	r3, [pc, #576]	; 14e58 <__assert_fail@plt+0x3120>
   14c14:	ldr	r1, [pc, #576]	; 14e5c <__assert_fail@plt+0x3124>
   14c18:	umull	ip, r3, r3, r8
   14c1c:	smull	ip, r1, r1, r8
   14c20:	lsr	r3, r3, #1
   14c24:	rsb	r1, r1, r8, asr #31
   14c28:	add	r3, r3, r3, lsl #1
   14c2c:	add	r1, r1, fp
   14c30:	subs	r3, r8, r3
   14c34:	sub	r6, r1, #1
   14c38:	bne	14db4 <__assert_fail@plt+0x307c>
   14c3c:	ldrd	r8, [sp]
   14c40:	adds	r3, r8, r8
   14c44:	adc	r2, r9, r9
   14c48:	adds	r3, r3, r8
   14c4c:	adc	r2, r2, r9
   14c50:	lsl	ip, r3, #5
   14c54:	lsl	lr, r2, #5
   14c58:	orr	lr, lr, r3, lsr #27
   14c5c:	adds	r3, r3, ip
   14c60:	adc	r2, r2, lr
   14c64:	adds	r3, r8, r3
   14c68:	str	r3, [sp]
   14c6c:	ldr	r3, [sp, #4]
   14c70:	adc	r3, r3, r2
   14c74:	str	r3, [sp, #4]
   14c78:	cmp	r6, #0
   14c7c:	blt	14a00 <__assert_fail@plt+0x2cc8>
   14c80:	beq	14d28 <__assert_fail@plt+0x2ff0>
   14c84:	ldr	r3, [sp, #4]
   14c88:	ldr	r8, [sp, #28]
   14c8c:	cmp	r3, #0
   14c90:	mov	r6, #0
   14c94:	asr	r9, r8, #31
   14c98:	mov	r7, #0
   14c9c:	bne	14e1c <__assert_fail@plt+0x30e4>
   14ca0:	orrs	r3, r6, r7
   14ca4:	bne	14d28 <__assert_fail@plt+0x2ff0>
   14ca8:	sub	r1, r1, #3
   14cac:	ldrd	r2, [sp]
   14cb0:	mov	lr, r4
   14cb4:	str	r5, [sp, #8]
   14cb8:	b	14cc8 <__assert_fail@plt+0x2f90>
   14cbc:	orrs	ip, r6, r7
   14cc0:	sub	r1, r1, #1
   14cc4:	bne	14d1c <__assert_fail@plt+0x2fe4>
   14cc8:	mul	ip, r2, r9
   14ccc:	cmn	r1, #1
   14cd0:	mla	ip, r8, r3, ip
   14cd4:	umull	r2, r3, r2, r8
   14cd8:	add	ip, ip, r3
   14cdc:	mov	r3, ip
   14ce0:	beq	14d1c <__assert_fail@plt+0x2fe4>
   14ce4:	cmp	ip, #0
   14ce8:	mov	r6, #0
   14cec:	mov	r7, #0
   14cf0:	beq	14cbc <__assert_fail@plt+0x2f84>
   14cf4:	umull	sl, fp, r2, r8
   14cf8:	umull	r4, r5, r8, ip
   14cfc:	mov	ip, fp
   14d00:	adds	ip, r4, ip
   14d04:	mov	ip, #0
   14d08:	adc	ip, r5, ip
   14d0c:	cmp	ip, #0
   14d10:	movne	r6, #1
   14d14:	movne	r7, #0
   14d18:	b	14cbc <__assert_fail@plt+0x2f84>
   14d1c:	ldr	r5, [sp, #8]
   14d20:	mov	r4, lr
   14d24:	strd	r2, [sp]
   14d28:	ldrd	r2, [sp]
   14d2c:	ldr	r1, [sp, #16]
   14d30:	adds	r1, r1, r2
   14d34:	str	r1, [sp, #16]
   14d38:	ldr	r1, [sp, #20]
   14d3c:	adc	r3, r1, r3
   14d40:	str	r3, [sp, #20]
   14d44:	ldrd	r2, [sp, #16]
   14d48:	strd	r2, [r5]
   14d4c:	b	14a48 <__assert_fail@plt+0x2d10>
   14d50:	mov	r4, fp
   14d54:	strd	r0, [sp, #16]
   14d58:	ldr	r8, [sp, #36]	; 0x24
   14d5c:	ldr	fp, [sp, #32]
   14d60:	mov	r5, lr
   14d64:	mov	r9, sl
   14d68:	mov	r0, #0
   14d6c:	b	14be0 <__assert_fail@plt+0x2ea8>
   14d70:	mov	r3, #1000	; 0x3e8
   14d74:	strd	sl, [sp]
   14d78:	ldr	r5, [sp, #28]
   14d7c:	mov	sl, r9
   14d80:	str	r3, [sp, #28]
   14d84:	ldr	r9, [sp, #32]
   14d88:	b	14aa0 <__assert_fail@plt+0x2d68>
   14d8c:	ldr	r6, [pc, #204]	; 14e60 <__assert_fail@plt+0x3128>
   14d90:	mov	r1, r7
   14d94:	add	r6, pc, r6
   14d98:	mov	r0, r6
   14d9c:	bl	11af8 <strchr@plt>
   14da0:	cmp	r0, #0
   14da4:	bne	14ac0 <__assert_fail@plt+0x2d88>
   14da8:	b	14a00 <__assert_fail@plt+0x2cc8>
   14dac:	mov	r0, ip
   14db0:	b	14a44 <__assert_fail@plt+0x2d0c>
   14db4:	cmp	r3, #1
   14db8:	bne	14c78 <__assert_fail@plt+0x2f40>
   14dbc:	ldrd	r8, [sp]
   14dc0:	lsl	r2, r9, #2
   14dc4:	lsl	r3, r8, #2
   14dc8:	adds	r3, r3, r8
   14dcc:	orr	r2, r2, r8, lsr #30
   14dd0:	adc	r2, r2, r9
   14dd4:	adds	r3, r3, r3
   14dd8:	str	r3, [sp]
   14ddc:	adc	r3, r2, r2
   14de0:	str	r3, [sp, #4]
   14de4:	b	14c78 <__assert_fail@plt+0x2f40>
   14de8:	ldr	lr, [sp, #28]
   14dec:	ldr	r3, [sp, #16]
   14df0:	ldr	sl, [sp, #20]
   14df4:	umull	r2, r3, r3, lr
   14df8:	str	r3, [sp, #8]
   14dfc:	mov	r3, #0
   14e00:	str	r3, [sp, #12]
   14e04:	ldrd	r2, [sp, #8]
   14e08:	umlal	r2, r3, sl, lr
   14e0c:	cmp	r3, #0
   14e10:	movne	r0, #1
   14e14:	movne	r1, #0
   14e18:	b	14aec <__assert_fail@plt+0x2db4>
   14e1c:	ldr	r3, [sp]
   14e20:	ldr	ip, [sp, #28]
   14e24:	ldr	lr, [sp, #4]
   14e28:	umull	sl, fp, r3, ip
   14e2c:	mov	r3, #0
   14e30:	mov	r2, fp
   14e34:	umlal	r2, r3, lr, ip
   14e38:	cmp	r3, #0
   14e3c:	movne	r6, #1
   14e40:	movne	r7, #0
   14e44:	b	14ca0 <__assert_fail@plt+0x2f68>
   14e48:	bl	119a8 <__stack_chk_fail@plt>
   14e4c:	andeq	r3, r1, r8, asr r6
   14e50:			; <UNDEFINED> instruction: 0x000001b8
   14e54:	andeq	r2, r0, r8, ror pc
   14e58:	bge	feabf90c <optarg@@GLIBC_2.4+0xfea978e4>
   14e5c:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   14e60:	muleq	r0, r8, ip
   14e64:	mov	r2, #0
   14e68:	b	147d4 <__assert_fail@plt+0x2a9c>
   14e6c:	push	{r4, r5, r6, lr}
   14e70:	subs	r5, r0, #0
   14e74:	mov	r6, r1
   14e78:	beq	14ee4 <__assert_fail@plt+0x31ac>
   14e7c:	ldrsb	r4, [r5]
   14e80:	cmp	r4, #0
   14e84:	beq	14ef8 <__assert_fail@plt+0x31c0>
   14e88:	bl	11abc <__ctype_b_loc@plt>
   14e8c:	mov	r3, r5
   14e90:	ldr	r0, [r0]
   14e94:	b	14eac <__assert_fail@plt+0x3174>
   14e98:	adds	r3, r3, #1
   14e9c:	beq	14ee4 <__assert_fail@plt+0x31ac>
   14ea0:	ldrsb	r4, [r3]
   14ea4:	cmp	r4, #0
   14ea8:	beq	14ec0 <__assert_fail@plt+0x3188>
   14eac:	uxtb	r4, r4
   14eb0:	lsl	r4, r4, #1
   14eb4:	ldrh	r2, [r0, r4]
   14eb8:	tst	r2, #2048	; 0x800
   14ebc:	bne	14e98 <__assert_fail@plt+0x3160>
   14ec0:	cmp	r6, #0
   14ec4:	strne	r3, [r6]
   14ec8:	cmp	r5, r3
   14ecc:	bcs	14ef0 <__assert_fail@plt+0x31b8>
   14ed0:	ldrsb	r3, [r3]
   14ed4:	cmp	r3, #0
   14ed8:	bne	14ef0 <__assert_fail@plt+0x31b8>
   14edc:	mov	r0, #1
   14ee0:	pop	{r4, r5, r6, pc}
   14ee4:	cmp	r6, #0
   14ee8:	movne	r3, #0
   14eec:	strne	r3, [r6]
   14ef0:	mov	r0, #0
   14ef4:	pop	{r4, r5, r6, pc}
   14ef8:	cmp	r1, #0
   14efc:	strne	r5, [r1]
   14f00:	b	14ef0 <__assert_fail@plt+0x31b8>
   14f04:	push	{r4, r5, r6, lr}
   14f08:	subs	r5, r0, #0
   14f0c:	mov	r6, r1
   14f10:	beq	14f7c <__assert_fail@plt+0x3244>
   14f14:	ldrsb	r4, [r5]
   14f18:	cmp	r4, #0
   14f1c:	beq	14f90 <__assert_fail@plt+0x3258>
   14f20:	bl	11abc <__ctype_b_loc@plt>
   14f24:	mov	r3, r5
   14f28:	ldr	r0, [r0]
   14f2c:	b	14f44 <__assert_fail@plt+0x320c>
   14f30:	adds	r3, r3, #1
   14f34:	beq	14f7c <__assert_fail@plt+0x3244>
   14f38:	ldrsb	r4, [r3]
   14f3c:	cmp	r4, #0
   14f40:	beq	14f58 <__assert_fail@plt+0x3220>
   14f44:	uxtb	r4, r4
   14f48:	lsl	r4, r4, #1
   14f4c:	ldrh	r2, [r0, r4]
   14f50:	tst	r2, #4096	; 0x1000
   14f54:	bne	14f30 <__assert_fail@plt+0x31f8>
   14f58:	cmp	r6, #0
   14f5c:	strne	r3, [r6]
   14f60:	cmp	r5, r3
   14f64:	bcs	14f88 <__assert_fail@plt+0x3250>
   14f68:	ldrsb	r3, [r3]
   14f6c:	cmp	r3, #0
   14f70:	bne	14f88 <__assert_fail@plt+0x3250>
   14f74:	mov	r0, #1
   14f78:	pop	{r4, r5, r6, pc}
   14f7c:	cmp	r6, #0
   14f80:	movne	r3, #0
   14f84:	strne	r3, [r6]
   14f88:	mov	r0, #0
   14f8c:	pop	{r4, r5, r6, pc}
   14f90:	cmp	r1, #0
   14f94:	strne	r5, [r1]
   14f98:	b	14f88 <__assert_fail@plt+0x3250>
   14f9c:	push	{r1, r2, r3}
   14fa0:	ldr	r3, [pc, #188]	; 15064 <__assert_fail@plt+0x332c>
   14fa4:	ldr	r2, [pc, #188]	; 15068 <__assert_fail@plt+0x3330>
   14fa8:	add	r3, pc, r3
   14fac:	push	{r4, r5, r6, r7, r8, lr}
   14fb0:	sub	sp, sp, #12
   14fb4:	ldr	r7, [r3, r2]
   14fb8:	ldr	r8, [sp, #36]	; 0x24
   14fbc:	mov	r6, r0
   14fc0:	ldr	r3, [r7]
   14fc4:	add	r4, sp, #48	; 0x30
   14fc8:	str	r3, [sp, #4]
   14fcc:	b	14fe8 <__assert_fail@plt+0x32b0>
   14fd0:	mov	r1, r5
   14fd4:	mov	r0, r6
   14fd8:	bl	11894 <strcmp@plt>
   14fdc:	add	r4, r4, #8
   14fe0:	cmp	r0, #0
   14fe4:	beq	15020 <__assert_fail@plt+0x32e8>
   14fe8:	ldr	r1, [r4, #-8]
   14fec:	sub	r3, r4, #4
   14ff0:	cmp	r1, #0
   14ff4:	str	r3, [sp]
   14ff8:	beq	15040 <__assert_fail@plt+0x3308>
   14ffc:	ldr	r5, [r4, #-4]
   15000:	str	r4, [sp]
   15004:	cmp	r5, #0
   15008:	beq	15040 <__assert_fail@plt+0x3308>
   1500c:	mov	r0, r6
   15010:	bl	11894 <strcmp@plt>
   15014:	cmp	r0, #0
   15018:	bne	14fd0 <__assert_fail@plt+0x3298>
   1501c:	mov	r0, #1
   15020:	ldr	r2, [sp, #4]
   15024:	ldr	r3, [r7]
   15028:	cmp	r2, r3
   1502c:	bne	15060 <__assert_fail@plt+0x3328>
   15030:	add	sp, sp, #12
   15034:	pop	{r4, r5, r6, r7, r8, lr}
   15038:	add	sp, sp, #12
   1503c:	bx	lr
   15040:	ldr	r1, [pc, #36]	; 1506c <__assert_fail@plt+0x3334>
   15044:	mov	r3, r6
   15048:	add	r1, pc, r1
   1504c:	mov	r2, r8
   15050:	ldr	r0, [r1]
   15054:	ldr	r1, [pc, #20]	; 15070 <__assert_fail@plt+0x3338>
   15058:	add	r1, pc, r1
   1505c:	bl	11be8 <errx@plt>
   15060:	bl	119a8 <__stack_chk_fail@plt>
   15064:	andeq	r2, r1, ip, lsl #29
   15068:			; <UNDEFINED> instruction: 0x000001b8
   1506c:			; <UNDEFINED> instruction: 0x00012fbc
   15070:			; <UNDEFINED> instruction: 0x000029bc
   15074:	cmp	r1, #0
   15078:	beq	150c4 <__assert_fail@plt+0x338c>
   1507c:	ldrsb	r3, [r0]
   15080:	cmp	r3, #0
   15084:	beq	150c4 <__assert_fail@plt+0x338c>
   15088:	sxtb	r2, r2
   1508c:	cmp	r3, r2
   15090:	bxeq	lr
   15094:	add	r1, r0, r1
   15098:	add	r3, r0, #1
   1509c:	b	150b8 <__assert_fail@plt+0x3380>
   150a0:	ldrsb	ip, [r3]
   150a4:	add	r3, r3, #1
   150a8:	cmp	ip, #0
   150ac:	beq	150c4 <__assert_fail@plt+0x338c>
   150b0:	cmp	ip, r2
   150b4:	bxeq	lr
   150b8:	cmp	r3, r1
   150bc:	mov	r0, r3
   150c0:	bne	150a0 <__assert_fail@plt+0x3368>
   150c4:	mov	r0, #0
   150c8:	bx	lr
   150cc:	push	{r4, r5, r6, lr}
   150d0:	mov	r2, #10
   150d4:	mov	r4, r0
   150d8:	mov	r5, r1
   150dc:	bl	14790 <__assert_fail@plt+0x2a58>
   150e0:	cmp	r0, #65536	; 0x10000
   150e4:	bcs	150f0 <__assert_fail@plt+0x33b8>
   150e8:	uxth	r0, r0
   150ec:	pop	{r4, r5, r6, pc}
   150f0:	mov	r1, r5
   150f4:	mov	r0, r4
   150f8:	bl	14750 <__assert_fail@plt+0x2a18>
   150fc:	push	{r4, r5, r6, lr}
   15100:	mov	r2, #16
   15104:	mov	r4, r0
   15108:	mov	r5, r1
   1510c:	bl	14790 <__assert_fail@plt+0x2a58>
   15110:	cmp	r0, #65536	; 0x10000
   15114:	bcs	15120 <__assert_fail@plt+0x33e8>
   15118:	uxth	r0, r0
   1511c:	pop	{r4, r5, r6, pc}
   15120:	mov	r1, r5
   15124:	mov	r0, r4
   15128:	bl	14750 <__assert_fail@plt+0x2a18>
   1512c:	mov	r2, #10
   15130:	b	14790 <__assert_fail@plt+0x2a58>
   15134:	mov	r2, #16
   15138:	b	14790 <__assert_fail@plt+0x2a58>
   1513c:	ldr	r2, [pc, #236]	; 15230 <__assert_fail@plt+0x34f8>
   15140:	ldr	ip, [pc, #236]	; 15234 <__assert_fail@plt+0x34fc>
   15144:	add	r2, pc, r2
   15148:	push	{r4, r5, r6, r7, r8, lr}
   1514c:	sub	sp, sp, #8
   15150:	ldr	r7, [r2, ip]
   15154:	mov	r5, #0
   15158:	mov	r4, r0
   1515c:	ldr	r3, [r7]
   15160:	mov	r8, r1
   15164:	str	r5, [sp]
   15168:	str	r3, [sp, #4]
   1516c:	bl	11b1c <__errno_location@plt>
   15170:	cmp	r4, r5
   15174:	str	r5, [r0]
   15178:	beq	15188 <__assert_fail@plt+0x3450>
   1517c:	ldrsb	r3, [r4]
   15180:	cmp	r3, r5
   15184:	bne	151a8 <__assert_fail@plt+0x3470>
   15188:	ldr	r1, [pc, #168]	; 15238 <__assert_fail@plt+0x3500>
   1518c:	mov	r3, r4
   15190:	add	r1, pc, r1
   15194:	mov	r2, r8
   15198:	ldr	r0, [r1]
   1519c:	ldr	r1, [pc, #152]	; 1523c <__assert_fail@plt+0x3504>
   151a0:	add	r1, pc, r1
   151a4:	bl	11be8 <errx@plt>
   151a8:	mov	r6, r0
   151ac:	mov	r2, #10
   151b0:	mov	r3, r5
   151b4:	mov	r1, sp
   151b8:	mov	r0, r4
   151bc:	bl	11c78 <__strtoll_internal@plt>
   151c0:	ldr	r2, [r6]
   151c4:	cmp	r2, r5
   151c8:	bne	15204 <__assert_fail@plt+0x34cc>
   151cc:	ldr	r3, [sp]
   151d0:	cmp	r3, r4
   151d4:	beq	15188 <__assert_fail@plt+0x3450>
   151d8:	cmp	r3, r5
   151dc:	beq	151ec <__assert_fail@plt+0x34b4>
   151e0:	ldrsb	r3, [r3]
   151e4:	cmp	r3, r5
   151e8:	bne	15188 <__assert_fail@plt+0x3450>
   151ec:	ldr	r2, [sp, #4]
   151f0:	ldr	r3, [r7]
   151f4:	cmp	r2, r3
   151f8:	bne	1522c <__assert_fail@plt+0x34f4>
   151fc:	add	sp, sp, #8
   15200:	pop	{r4, r5, r6, r7, r8, pc}
   15204:	ldr	r3, [pc, #52]	; 15240 <__assert_fail@plt+0x3508>
   15208:	cmp	r2, #34	; 0x22
   1520c:	add	r3, pc, r3
   15210:	ldr	r0, [r3]
   15214:	bne	15188 <__assert_fail@plt+0x3450>
   15218:	ldr	r1, [pc, #36]	; 15244 <__assert_fail@plt+0x350c>
   1521c:	mov	r3, r4
   15220:	mov	r2, r8
   15224:	add	r1, pc, r1
   15228:	bl	119c0 <err@plt>
   1522c:	bl	119a8 <__stack_chk_fail@plt>
   15230:	strdeq	r2, [r1], -r0
   15234:			; <UNDEFINED> instruction: 0x000001b8
   15238:	andeq	r2, r1, r4, ror lr
   1523c:	andeq	r2, r0, r4, ror r8
   15240:	strdeq	r2, [r1], -r8
   15244:	strdeq	r2, [r0], -r0
   15248:	push	{r4, r5, r6, r7, r8, lr}
   1524c:	mov	r7, r0
   15250:	mov	r6, r1
   15254:	bl	1513c <__assert_fail@plt+0x3404>
   15258:	mov	r3, #0
   1525c:	mvn	r2, #0
   15260:	adds	r4, r0, #-2147483648	; 0x80000000
   15264:	adc	r5, r1, #0
   15268:	cmp	r5, r3
   1526c:	cmpeq	r4, r2
   15270:	popls	{r4, r5, r6, r7, r8, pc}
   15274:	bl	11b1c <__errno_location@plt>
   15278:	ldr	ip, [pc, #32]	; 152a0 <__assert_fail@plt+0x3568>
   1527c:	ldr	r1, [pc, #32]	; 152a4 <__assert_fail@plt+0x356c>
   15280:	add	ip, pc, ip
   15284:	mov	lr, #34	; 0x22
   15288:	mov	r3, r7
   1528c:	mov	r2, r6
   15290:	add	r1, pc, r1
   15294:	str	lr, [r0]
   15298:	ldr	r0, [ip]
   1529c:	bl	119c0 <err@plt>
   152a0:	andeq	r2, r1, r4, lsl #27
   152a4:	andeq	r2, r0, r4, lsl #15
   152a8:	push	{r4, r5, r6, lr}
   152ac:	mov	r5, r0
   152b0:	mov	r4, r1
   152b4:	bl	15248 <__assert_fail@plt+0x3510>
   152b8:	add	r3, r0, #32768	; 0x8000
   152bc:	cmp	r3, #65536	; 0x10000
   152c0:	bcs	152cc <__assert_fail@plt+0x3594>
   152c4:	sxth	r0, r0
   152c8:	pop	{r4, r5, r6, pc}
   152cc:	bl	11b1c <__errno_location@plt>
   152d0:	ldr	ip, [pc, #32]	; 152f8 <__assert_fail@plt+0x35c0>
   152d4:	ldr	r1, [pc, #32]	; 152fc <__assert_fail@plt+0x35c4>
   152d8:	add	ip, pc, ip
   152dc:	mov	lr, #34	; 0x22
   152e0:	mov	r3, r5
   152e4:	mov	r2, r4
   152e8:	add	r1, pc, r1
   152ec:	str	lr, [r0]
   152f0:	ldr	r0, [ip]
   152f4:	bl	119c0 <err@plt>
   152f8:	andeq	r2, r1, ip, lsr #26
   152fc:	andeq	r2, r0, ip, lsr #14
   15300:	mov	r2, #10
   15304:	b	1463c <__assert_fail@plt+0x2904>
   15308:	mov	r2, #16
   1530c:	b	1463c <__assert_fail@plt+0x2904>
   15310:	ldr	r2, [pc, #228]	; 153fc <__assert_fail@plt+0x36c4>
   15314:	ldr	r3, [pc, #228]	; 15400 <__assert_fail@plt+0x36c8>
   15318:	add	r2, pc, r2
   1531c:	push	{r4, r5, r6, r7, r8, lr}
   15320:	sub	sp, sp, #8
   15324:	ldr	r7, [r2, r3]
   15328:	mov	r5, #0
   1532c:	mov	r4, r0
   15330:	ldr	r3, [r7]
   15334:	mov	r8, r1
   15338:	str	r5, [sp]
   1533c:	str	r3, [sp, #4]
   15340:	bl	11b1c <__errno_location@plt>
   15344:	cmp	r4, r5
   15348:	str	r5, [r0]
   1534c:	beq	1535c <__assert_fail@plt+0x3624>
   15350:	ldrsb	r3, [r4]
   15354:	cmp	r3, r5
   15358:	bne	1537c <__assert_fail@plt+0x3644>
   1535c:	ldr	r1, [pc, #160]	; 15404 <__assert_fail@plt+0x36cc>
   15360:	mov	r3, r4
   15364:	add	r1, pc, r1
   15368:	mov	r2, r8
   1536c:	ldr	r0, [r1]
   15370:	ldr	r1, [pc, #144]	; 15408 <__assert_fail@plt+0x36d0>
   15374:	add	r1, pc, r1
   15378:	bl	11be8 <errx@plt>
   1537c:	mov	r6, r0
   15380:	mov	r1, sp
   15384:	mov	r0, r4
   15388:	bl	11ba0 <strtod@plt>
   1538c:	ldr	r2, [r6]
   15390:	cmp	r2, r5
   15394:	bne	153d0 <__assert_fail@plt+0x3698>
   15398:	ldr	r3, [sp]
   1539c:	cmp	r3, r4
   153a0:	beq	1535c <__assert_fail@plt+0x3624>
   153a4:	cmp	r3, r5
   153a8:	beq	153b8 <__assert_fail@plt+0x3680>
   153ac:	ldrsb	r3, [r3]
   153b0:	cmp	r3, r5
   153b4:	bne	1535c <__assert_fail@plt+0x3624>
   153b8:	ldr	r2, [sp, #4]
   153bc:	ldr	r3, [r7]
   153c0:	cmp	r2, r3
   153c4:	bne	153f8 <__assert_fail@plt+0x36c0>
   153c8:	add	sp, sp, #8
   153cc:	pop	{r4, r5, r6, r7, r8, pc}
   153d0:	ldr	r3, [pc, #52]	; 1540c <__assert_fail@plt+0x36d4>
   153d4:	cmp	r2, #34	; 0x22
   153d8:	add	r3, pc, r3
   153dc:	ldr	r0, [r3]
   153e0:	bne	1535c <__assert_fail@plt+0x3624>
   153e4:	ldr	r1, [pc, #36]	; 15410 <__assert_fail@plt+0x36d8>
   153e8:	mov	r3, r4
   153ec:	mov	r2, r8
   153f0:	add	r1, pc, r1
   153f4:	bl	119c0 <err@plt>
   153f8:	bl	119a8 <__stack_chk_fail@plt>
   153fc:	andeq	r2, r1, ip, lsl fp
   15400:			; <UNDEFINED> instruction: 0x000001b8
   15404:	andeq	r2, r1, r0, lsr #25
   15408:	andeq	r2, r0, r0, lsr #13
   1540c:	andeq	r2, r1, ip, lsr #24
   15410:	andeq	r2, r0, r4, lsr #12
   15414:	ldr	r2, [pc, #232]	; 15504 <__assert_fail@plt+0x37cc>
   15418:	ldr	r3, [pc, #232]	; 15508 <__assert_fail@plt+0x37d0>
   1541c:	add	r2, pc, r2
   15420:	push	{r4, r5, r6, r7, r8, lr}
   15424:	sub	sp, sp, #8
   15428:	ldr	r7, [r2, r3]
   1542c:	mov	r5, #0
   15430:	mov	r4, r0
   15434:	ldr	r3, [r7]
   15438:	mov	r8, r1
   1543c:	str	r5, [sp]
   15440:	str	r3, [sp, #4]
   15444:	bl	11b1c <__errno_location@plt>
   15448:	cmp	r4, r5
   1544c:	str	r5, [r0]
   15450:	beq	15460 <__assert_fail@plt+0x3728>
   15454:	ldrsb	r3, [r4]
   15458:	cmp	r3, r5
   1545c:	bne	15480 <__assert_fail@plt+0x3748>
   15460:	ldr	r1, [pc, #164]	; 1550c <__assert_fail@plt+0x37d4>
   15464:	mov	r3, r4
   15468:	add	r1, pc, r1
   1546c:	mov	r2, r8
   15470:	ldr	r0, [r1]
   15474:	ldr	r1, [pc, #148]	; 15510 <__assert_fail@plt+0x37d8>
   15478:	add	r1, pc, r1
   1547c:	bl	11be8 <errx@plt>
   15480:	mov	r6, r0
   15484:	mov	r2, #10
   15488:	mov	r1, sp
   1548c:	mov	r0, r4
   15490:	bl	118ac <strtol@plt>
   15494:	ldr	r2, [r6]
   15498:	cmp	r2, r5
   1549c:	bne	154d8 <__assert_fail@plt+0x37a0>
   154a0:	ldr	r3, [sp]
   154a4:	cmp	r3, r4
   154a8:	beq	15460 <__assert_fail@plt+0x3728>
   154ac:	cmp	r3, r5
   154b0:	beq	154c0 <__assert_fail@plt+0x3788>
   154b4:	ldrsb	r3, [r3]
   154b8:	cmp	r3, r5
   154bc:	bne	15460 <__assert_fail@plt+0x3728>
   154c0:	ldr	r2, [sp, #4]
   154c4:	ldr	r3, [r7]
   154c8:	cmp	r2, r3
   154cc:	bne	15500 <__assert_fail@plt+0x37c8>
   154d0:	add	sp, sp, #8
   154d4:	pop	{r4, r5, r6, r7, r8, pc}
   154d8:	ldr	r3, [pc, #52]	; 15514 <__assert_fail@plt+0x37dc>
   154dc:	cmp	r2, #34	; 0x22
   154e0:	add	r3, pc, r3
   154e4:	ldr	r0, [r3]
   154e8:	bne	15460 <__assert_fail@plt+0x3728>
   154ec:	ldr	r1, [pc, #36]	; 15518 <__assert_fail@plt+0x37e0>
   154f0:	mov	r3, r4
   154f4:	mov	r2, r8
   154f8:	add	r1, pc, r1
   154fc:	bl	119c0 <err@plt>
   15500:	bl	119a8 <__stack_chk_fail@plt>
   15504:	andeq	r2, r1, r8, lsl sl
   15508:			; <UNDEFINED> instruction: 0x000001b8
   1550c:	muleq	r1, ip, fp
   15510:	muleq	r0, ip, r5
   15514:	andeq	r2, r1, r4, lsr #22
   15518:	andeq	r2, r0, ip, lsl r5
   1551c:	ldr	r2, [pc, #232]	; 1560c <__assert_fail@plt+0x38d4>
   15520:	ldr	r3, [pc, #232]	; 15610 <__assert_fail@plt+0x38d8>
   15524:	add	r2, pc, r2
   15528:	push	{r4, r5, r6, r7, r8, lr}
   1552c:	sub	sp, sp, #8
   15530:	ldr	r7, [r2, r3]
   15534:	mov	r5, #0
   15538:	mov	r4, r0
   1553c:	ldr	r3, [r7]
   15540:	mov	r8, r1
   15544:	str	r5, [sp]
   15548:	str	r3, [sp, #4]
   1554c:	bl	11b1c <__errno_location@plt>
   15550:	cmp	r4, r5
   15554:	str	r5, [r0]
   15558:	beq	15568 <__assert_fail@plt+0x3830>
   1555c:	ldrsb	r3, [r4]
   15560:	cmp	r3, r5
   15564:	bne	15588 <__assert_fail@plt+0x3850>
   15568:	ldr	r1, [pc, #164]	; 15614 <__assert_fail@plt+0x38dc>
   1556c:	mov	r3, r4
   15570:	add	r1, pc, r1
   15574:	mov	r2, r8
   15578:	ldr	r0, [r1]
   1557c:	ldr	r1, [pc, #148]	; 15618 <__assert_fail@plt+0x38e0>
   15580:	add	r1, pc, r1
   15584:	bl	11be8 <errx@plt>
   15588:	mov	r6, r0
   1558c:	mov	r2, #10
   15590:	mov	r1, sp
   15594:	mov	r0, r4
   15598:	bl	11ae0 <strtoul@plt>
   1559c:	ldr	r2, [r6]
   155a0:	cmp	r2, r5
   155a4:	bne	155e0 <__assert_fail@plt+0x38a8>
   155a8:	ldr	r3, [sp]
   155ac:	cmp	r3, r4
   155b0:	beq	15568 <__assert_fail@plt+0x3830>
   155b4:	cmp	r3, r5
   155b8:	beq	155c8 <__assert_fail@plt+0x3890>
   155bc:	ldrsb	r3, [r3]
   155c0:	cmp	r3, r5
   155c4:	bne	15568 <__assert_fail@plt+0x3830>
   155c8:	ldr	r2, [sp, #4]
   155cc:	ldr	r3, [r7]
   155d0:	cmp	r2, r3
   155d4:	bne	15608 <__assert_fail@plt+0x38d0>
   155d8:	add	sp, sp, #8
   155dc:	pop	{r4, r5, r6, r7, r8, pc}
   155e0:	ldr	r3, [pc, #52]	; 1561c <__assert_fail@plt+0x38e4>
   155e4:	cmp	r2, #34	; 0x22
   155e8:	add	r3, pc, r3
   155ec:	ldr	r0, [r3]
   155f0:	bne	15568 <__assert_fail@plt+0x3830>
   155f4:	ldr	r1, [pc, #36]	; 15620 <__assert_fail@plt+0x38e8>
   155f8:	mov	r3, r4
   155fc:	mov	r2, r8
   15600:	add	r1, pc, r1
   15604:	bl	119c0 <err@plt>
   15608:	bl	119a8 <__stack_chk_fail@plt>
   1560c:	andeq	r2, r1, r0, lsl r9
   15610:			; <UNDEFINED> instruction: 0x000001b8
   15614:	muleq	r1, r4, sl
   15618:	muleq	r0, r4, r4
   1561c:	andeq	r2, r1, ip, lsl sl
   15620:	andeq	r2, r0, r4, lsl r4
   15624:	ldr	r3, [pc, #140]	; 156b8 <__assert_fail@plt+0x3980>
   15628:	ldr	r2, [pc, #140]	; 156bc <__assert_fail@plt+0x3984>
   1562c:	add	r3, pc, r3
   15630:	push	{r4, r5, r6, lr}
   15634:	sub	sp, sp, #16
   15638:	ldr	r4, [r3, r2]
   1563c:	mov	r5, r1
   15640:	mov	r1, sp
   15644:	ldr	r3, [r4]
   15648:	mov	r6, r0
   1564c:	str	r3, [sp, #12]
   15650:	bl	14e64 <__assert_fail@plt+0x312c>
   15654:	cmp	r0, #0
   15658:	beq	15698 <__assert_fail@plt+0x3960>
   1565c:	bl	11b1c <__errno_location@plt>
   15660:	ldr	r3, [pc, #88]	; 156c0 <__assert_fail@plt+0x3988>
   15664:	mov	r2, r5
   15668:	ldr	r1, [pc, r3]
   1566c:	ldr	r3, [r0]
   15670:	mov	r0, r1
   15674:	cmp	r3, #0
   15678:	mov	r3, r6
   1567c:	beq	1568c <__assert_fail@plt+0x3954>
   15680:	ldr	r1, [pc, #60]	; 156c4 <__assert_fail@plt+0x398c>
   15684:	add	r1, pc, r1
   15688:	bl	119c0 <err@plt>
   1568c:	ldr	r1, [pc, #52]	; 156c8 <__assert_fail@plt+0x3990>
   15690:	add	r1, pc, r1
   15694:	bl	11be8 <errx@plt>
   15698:	ldr	r2, [sp, #12]
   1569c:	ldr	r3, [r4]
   156a0:	ldrd	r0, [sp]
   156a4:	cmp	r2, r3
   156a8:	bne	156b4 <__assert_fail@plt+0x397c>
   156ac:	add	sp, sp, #16
   156b0:	pop	{r4, r5, r6, pc}
   156b4:	bl	119a8 <__stack_chk_fail@plt>
   156b8:	andeq	r2, r1, r8, lsl #16
   156bc:			; <UNDEFINED> instruction: 0x000001b8
   156c0:	muleq	r1, ip, r9
   156c4:	muleq	r0, r0, r3
   156c8:	andeq	r2, r0, r4, lsl #7
   156cc:	push	{r4, lr}
   156d0:	mov	r4, r1
   156d4:	mov	r1, r2
   156d8:	bl	15310 <__assert_fail@plt+0x35d8>
   156dc:	vldr	d6, [pc, #28]	; 15700 <__assert_fail@plt+0x39c8>
   156e0:	vcvt.s32.f64	s15, d0
   156e4:	vcvt.f64.s32	d5, s15
   156e8:	vstr	s15, [r4]
   156ec:	vsub.f64	d0, d0, d5
   156f0:	vmul.f64	d0, d0, d6
   156f4:	vcvt.s32.f64	s0, d0
   156f8:	vstr	s0, [r4, #4]
   156fc:	pop	{r4, pc}
   15700:	andeq	r0, r0, r0
   15704:	smlawbmi	lr, r0, r4, r8
   15708:	and	r2, r0, #61440	; 0xf000
   1570c:	cmp	r2, #16384	; 0x4000
   15710:	moveq	r2, r1
   15714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15718:	moveq	sl, #100	; 0x64
   1571c:	mov	r3, r0
   15720:	add	r9, r1, #1
   15724:	add	r8, r1, #2
   15728:	add	r7, r1, #3
   1572c:	add	r6, r1, #4
   15730:	add	r5, r1, #5
   15734:	add	r4, r1, #6
   15738:	add	lr, r1, #7
   1573c:	add	ip, r1, #8
   15740:	add	r0, r1, #9
   15744:	strbeq	sl, [r2], #10
   15748:	beq	157ec <__assert_fail@plt+0x3ab4>
   1574c:	cmp	r2, #40960	; 0xa000
   15750:	moveq	r2, r1
   15754:	moveq	sl, #108	; 0x6c
   15758:	strbeq	sl, [r2], #10
   1575c:	beq	157ec <__assert_fail@plt+0x3ab4>
   15760:	cmp	r2, #8192	; 0x2000
   15764:	moveq	r2, r1
   15768:	moveq	sl, #99	; 0x63
   1576c:	strbeq	sl, [r2], #10
   15770:	beq	157ec <__assert_fail@plt+0x3ab4>
   15774:	cmp	r2, #24576	; 0x6000
   15778:	moveq	r2, r1
   1577c:	moveq	sl, #98	; 0x62
   15780:	strbeq	sl, [r2], #10
   15784:	beq	157ec <__assert_fail@plt+0x3ab4>
   15788:	cmp	r2, #49152	; 0xc000
   1578c:	moveq	r2, r1
   15790:	moveq	sl, #115	; 0x73
   15794:	strbeq	sl, [r2], #10
   15798:	beq	157ec <__assert_fail@plt+0x3ab4>
   1579c:	cmp	r2, #4096	; 0x1000
   157a0:	moveq	r2, r1
   157a4:	moveq	sl, #112	; 0x70
   157a8:	strbeq	sl, [r2], #10
   157ac:	beq	157ec <__assert_fail@plt+0x3ab4>
   157b0:	cmp	r2, #32768	; 0x8000
   157b4:	moveq	r2, r1
   157b8:	moveq	sl, #45	; 0x2d
   157bc:	strbeq	sl, [r2], #10
   157c0:	beq	157ec <__assert_fail@plt+0x3ab4>
   157c4:	mov	r2, r0
   157c8:	mov	r0, ip
   157cc:	mov	ip, lr
   157d0:	mov	lr, r4
   157d4:	mov	r4, r5
   157d8:	mov	r5, r6
   157dc:	mov	r6, r7
   157e0:	mov	r7, r8
   157e4:	mov	r8, r9
   157e8:	mov	r9, r1
   157ec:	tst	r3, #256	; 0x100
   157f0:	movne	fp, #114	; 0x72
   157f4:	moveq	fp, #45	; 0x2d
   157f8:	tst	r3, #128	; 0x80
   157fc:	movne	sl, #119	; 0x77
   15800:	moveq	sl, #45	; 0x2d
   15804:	tst	r3, #2048	; 0x800
   15808:	strb	fp, [r9]
   1580c:	and	r9, r3, #64	; 0x40
   15810:	strb	sl, [r8]
   15814:	beq	158b0 <__assert_fail@plt+0x3b78>
   15818:	cmp	r9, #0
   1581c:	movne	r9, #115	; 0x73
   15820:	moveq	r9, #83	; 0x53
   15824:	tst	r3, #32
   15828:	movne	r8, #114	; 0x72
   1582c:	moveq	r8, #45	; 0x2d
   15830:	tst	r3, #16
   15834:	strb	r9, [r7]
   15838:	movne	r7, #119	; 0x77
   1583c:	moveq	r7, #45	; 0x2d
   15840:	tst	r3, #1024	; 0x400
   15844:	strb	r8, [r6]
   15848:	and	r6, r3, #8
   1584c:	strb	r7, [r5]
   15850:	beq	158c0 <__assert_fail@plt+0x3b88>
   15854:	cmp	r6, #0
   15858:	movne	r6, #115	; 0x73
   1585c:	moveq	r6, #83	; 0x53
   15860:	tst	r3, #4
   15864:	movne	r5, #114	; 0x72
   15868:	moveq	r5, #45	; 0x2d
   1586c:	tst	r3, #2
   15870:	strb	r6, [r4]
   15874:	movne	r4, #119	; 0x77
   15878:	moveq	r4, #45	; 0x2d
   1587c:	tst	r3, #512	; 0x200
   15880:	strb	r5, [lr]
   15884:	and	r3, r3, #1
   15888:	strb	r4, [ip]
   1588c:	beq	158d0 <__assert_fail@plt+0x3b98>
   15890:	cmp	r3, #0
   15894:	movne	ip, #116	; 0x74
   15898:	moveq	ip, #84	; 0x54
   1589c:	mov	r3, #0
   158a0:	strb	ip, [r0]
   158a4:	mov	r0, r1
   158a8:	strb	r3, [r2]
   158ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158b0:	cmp	r9, #0
   158b4:	movne	r9, #120	; 0x78
   158b8:	moveq	r9, #45	; 0x2d
   158bc:	b	15824 <__assert_fail@plt+0x3aec>
   158c0:	cmp	r6, #0
   158c4:	movne	r6, #120	; 0x78
   158c8:	moveq	r6, #45	; 0x2d
   158cc:	b	15860 <__assert_fail@plt+0x3b28>
   158d0:	cmp	r3, #0
   158d4:	movne	ip, #120	; 0x78
   158d8:	moveq	ip, #45	; 0x2d
   158dc:	b	1589c <__assert_fail@plt+0x3b64>
   158e0:	ldr	r1, [pc, #680]	; 15b90 <__assert_fail@plt+0x3e58>
   158e4:	ldr	ip, [pc, #680]	; 15b94 <__assert_fail@plt+0x3e5c>
   158e8:	add	r1, pc, r1
   158ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158f0:	sub	sp, sp, #108	; 0x6c
   158f4:	ldr	r8, [r1, ip]
   158f8:	tst	r0, #2
   158fc:	strd	r2, [sp, #32]
   15900:	ldr	r1, [r8]
   15904:	addeq	r9, sp, #60	; 0x3c
   15908:	str	r1, [sp, #100]	; 0x64
   1590c:	ldrd	r2, [sp, #32]
   15910:	movne	r1, #32
   15914:	strbne	r1, [sp, #60]	; 0x3c
   15918:	addne	ip, sp, #61	; 0x3d
   1591c:	addne	r9, sp, #60	; 0x3c
   15920:	moveq	ip, r9
   15924:	mov	r1, #10
   15928:	mov	sl, #1
   1592c:	sub	lr, r1, #32
   15930:	lsl	r4, sl, r1
   15934:	lsl	r5, sl, lr
   15938:	rsb	lr, r1, #32
   1593c:	orr	r5, r5, sl, lsr lr
   15940:	cmp	r3, r5
   15944:	cmpeq	r2, r4
   15948:	bcc	15b04 <__assert_fail@plt+0x3dcc>
   1594c:	add	r1, r1, #10
   15950:	cmp	r1, #70	; 0x46
   15954:	bne	1592c <__assert_fail@plt+0x3bf4>
   15958:	mov	lr, ip
   1595c:	strd	r2, [sp, #32]
   15960:	mov	r4, r2
   15964:	tst	r0, #1
   15968:	mov	r2, #69	; 0x45
   1596c:	bic	r5, r3, #-268435456	; 0xf0000000
   15970:	lsr	sl, r3, #28
   15974:	strb	r2, [lr], #1
   15978:	bne	15aec <__assert_fail@plt+0x3db4>
   1597c:	orrs	r3, r4, r5
   15980:	mov	r3, #0
   15984:	strb	r3, [lr]
   15988:	beq	15b2c <__assert_fail@plt+0x3df4>
   1598c:	sub	r2, r1, #20
   15990:	rsb	r0, r2, #32
   15994:	lsr	r3, r4, r2
   15998:	sub	r1, r1, #52	; 0x34
   1599c:	orr	r3, r3, r5, lsl r0
   159a0:	orr	r3, r3, r5, lsr r1
   159a4:	lsr	r2, r5, r2
   159a8:	adds	r6, r3, #50	; 0x32
   159ac:	adc	r7, r2, #0
   159b0:	mov	r3, #0
   159b4:	mov	r2, #100	; 0x64
   159b8:	mov	r0, r6
   159bc:	mov	r1, r7
   159c0:	bl	16b98 <__assert_fail@plt+0x4e60>
   159c4:	cmp	r1, #0
   159c8:	cmpeq	r0, #10
   159cc:	mov	r2, r0
   159d0:	mov	r3, r1
   159d4:	addeq	sl, sl, #1
   159d8:	beq	15b2c <__assert_fail@plt+0x3df4>
   159dc:	cmp	r7, #0
   159e0:	cmpeq	r6, #99	; 0x63
   159e4:	strd	r2, [sp, #32]
   159e8:	bls	15b2c <__assert_fail@plt+0x3df4>
   159ec:	bl	11c3c <localeconv@plt>
   159f0:	ldrd	r2, [sp, #32]
   159f4:	cmp	r0, #0
   159f8:	beq	15b74 <__assert_fail@plt+0x3e3c>
   159fc:	ldr	r0, [r0]
   15a00:	cmp	r0, #0
   15a04:	beq	15b80 <__assert_fail@plt+0x3e48>
   15a08:	ldrsb	r1, [r0]
   15a0c:	cmp	r1, #0
   15a10:	ldreq	r0, [pc, #384]	; 15b98 <__assert_fail@plt+0x3e60>
   15a14:	addeq	r0, pc, r0
   15a18:	ldr	r1, [pc, #380]	; 15b9c <__assert_fail@plt+0x3e64>
   15a1c:	strd	r2, [sp, #16]
   15a20:	add	r1, pc, r1
   15a24:	add	r4, sp, #68	; 0x44
   15a28:	mov	r3, #32
   15a2c:	str	r0, [sp, #8]
   15a30:	str	r1, [sp]
   15a34:	str	r9, [sp, #24]
   15a38:	str	sl, [sp, #4]
   15a3c:	mov	r0, r4
   15a40:	mov	r1, r3
   15a44:	mov	r2, #1
   15a48:	bl	11d14 <__snprintf_chk@plt>
   15a4c:	b	15b54 <__assert_fail@plt+0x3e1c>
   15a50:	ldr	r4, [pc, #328]	; 15ba0 <__assert_fail@plt+0x3e68>
   15a54:	mvn	sl, #0
   15a58:	ldr	fp, [pc, #324]	; 15ba4 <__assert_fail@plt+0x3e6c>
   15a5c:	umull	r2, r3, lr, r4
   15a60:	sub	r4, r1, #42	; 0x2a
   15a64:	strd	r2, [sp, #40]	; 0x28
   15a68:	ldr	r3, [sp, #44]	; 0x2c
   15a6c:	lsl	r2, sl, lr
   15a70:	lsr	r3, r3, #3
   15a74:	str	r3, [sp, #52]	; 0x34
   15a78:	ldr	r3, [sp, #32]
   15a7c:	str	r4, [sp, #48]	; 0x30
   15a80:	orr	r4, r2, sl, lsl r4
   15a84:	lsr	r2, r3, lr
   15a88:	mov	r3, r2
   15a8c:	ldr	r2, [sp, #52]	; 0x34
   15a90:	add	fp, pc, fp
   15a94:	str	r4, [sp, #40]	; 0x28
   15a98:	ldrsb	fp, [fp, r2]
   15a9c:	mov	r2, r3
   15aa0:	ldr	r3, [sp, #36]	; 0x24
   15aa4:	rsb	r5, lr, #32
   15aa8:	ldr	r4, [sp, #40]	; 0x28
   15aac:	orr	r2, r2, r3, lsl r5
   15ab0:	orr	r4, r4, sl, lsr r5
   15ab4:	ldr	r3, [sp, #32]
   15ab8:	str	r4, [sp, #40]	; 0x28
   15abc:	cmp	r0, #0
   15ac0:	bic	r4, r3, sl, lsl lr
   15ac4:	ldr	r0, [sp, #36]	; 0x24
   15ac8:	ldr	r3, [sp, #48]	; 0x30
   15acc:	mov	lr, ip
   15ad0:	orr	sl, r2, r0, lsr r3
   15ad4:	ldr	r3, [sp, #40]	; 0x28
   15ad8:	strb	fp, [lr], #1
   15adc:	bic	r5, r0, r3
   15ae0:	beq	1597c <__assert_fail@plt+0x3c44>
   15ae4:	cmp	fp, #66	; 0x42
   15ae8:	beq	1597c <__assert_fail@plt+0x3c44>
   15aec:	mov	r3, #105	; 0x69
   15af0:	strb	r3, [ip, #1]
   15af4:	mov	r3, #66	; 0x42
   15af8:	add	lr, ip, #3
   15afc:	strb	r3, [ip, #2]
   15b00:	b	1597c <__assert_fail@plt+0x3c44>
   15b04:	subs	lr, r1, #10
   15b08:	strd	r2, [sp, #32]
   15b0c:	and	r0, r0, #1
   15b10:	bne	15a50 <__assert_fail@plt+0x3d18>
   15b14:	ldr	sl, [sp, #32]
   15b18:	cmp	r0, #0
   15b1c:	movne	r0, lr
   15b20:	mov	r3, #66	; 0x42
   15b24:	strb	r0, [ip, #1]
   15b28:	strb	r3, [ip]
   15b2c:	ldr	r2, [pc, #116]	; 15ba8 <__assert_fail@plt+0x3e70>
   15b30:	add	r4, sp, #68	; 0x44
   15b34:	add	r2, pc, r2
   15b38:	mov	r3, #32
   15b3c:	stm	sp, {r2, sl}
   15b40:	str	r9, [sp, #8]
   15b44:	mov	r0, r4
   15b48:	mov	r1, r3
   15b4c:	mov	r2, #1
   15b50:	bl	11d14 <__snprintf_chk@plt>
   15b54:	mov	r0, r4
   15b58:	bl	11990 <strdup@plt>
   15b5c:	ldr	r2, [sp, #100]	; 0x64
   15b60:	ldr	r3, [r8]
   15b64:	cmp	r2, r3
   15b68:	bne	15b8c <__assert_fail@plt+0x3e54>
   15b6c:	add	sp, sp, #108	; 0x6c
   15b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b74:	ldr	r0, [pc, #48]	; 15bac <__assert_fail@plt+0x3e74>
   15b78:	add	r0, pc, r0
   15b7c:	b	15a18 <__assert_fail@plt+0x3ce0>
   15b80:	ldr	r0, [pc, #40]	; 15bb0 <__assert_fail@plt+0x3e78>
   15b84:	add	r0, pc, r0
   15b88:	b	15a18 <__assert_fail@plt+0x3ce0>
   15b8c:	bl	119a8 <__stack_chk_fail@plt>
   15b90:	andeq	r2, r1, ip, asr #10
   15b94:			; <UNDEFINED> instruction: 0x000001b8
   15b98:	andeq	r2, r0, r4, lsr #32
   15b9c:	andeq	r2, r0, r4, lsr #32
   15ba0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   15ba4:	andeq	r1, r0, ip, lsr #31
   15ba8:	andeq	r1, r0, ip, lsl pc
   15bac:	andeq	r1, r0, r0, asr #29
   15bb0:			; <UNDEFINED> instruction: 0x00001eb4
   15bb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15bb8:	subs	r4, r0, #0
   15bbc:	beq	15c8c <__assert_fail@plt+0x3f54>
   15bc0:	ldrsb	lr, [r4]
   15bc4:	cmp	lr, #0
   15bc8:	beq	15c8c <__assert_fail@plt+0x3f54>
   15bcc:	cmp	r1, #0
   15bd0:	clz	ip, r2
   15bd4:	lsr	ip, ip, #5
   15bd8:	moveq	r0, #1
   15bdc:	movne	r0, ip
   15be0:	cmp	r3, #0
   15be4:	moveq	r0, #1
   15be8:	cmp	r0, #0
   15bec:	bne	15c8c <__assert_fail@plt+0x3f54>
   15bf0:	mov	r8, r3
   15bf4:	mov	r7, r2
   15bf8:	mov	r9, r1
   15bfc:	mov	r5, r0
   15c00:	b	15c5c <__assert_fail@plt+0x3f24>
   15c04:	cmp	r3, #0
   15c08:	bne	15c48 <__assert_fail@plt+0x3f10>
   15c0c:	cmn	r4, #1
   15c10:	add	r6, r4, #1
   15c14:	beq	15c94 <__assert_fail@plt+0x3f5c>
   15c18:	cmp	r0, r6
   15c1c:	bcs	15c8c <__assert_fail@plt+0x3f54>
   15c20:	sub	r1, r6, r0
   15c24:	blx	r8
   15c28:	cmn	r0, #1
   15c2c:	beq	15c8c <__assert_fail@plt+0x3f54>
   15c30:	str	r0, [r9, r5, lsl #2]
   15c34:	ldrsb	r3, [r6]
   15c38:	add	r5, r5, #1
   15c3c:	cmp	r3, #0
   15c40:	beq	15c94 <__assert_fail@plt+0x3f5c>
   15c44:	mov	r0, #0
   15c48:	cmn	r4, #1
   15c4c:	beq	15c94 <__assert_fail@plt+0x3f5c>
   15c50:	ldrsb	lr, [r4, #1]!
   15c54:	cmp	lr, #0
   15c58:	beq	15c94 <__assert_fail@plt+0x3f5c>
   15c5c:	cmp	r7, r5
   15c60:	mov	r6, r4
   15c64:	bls	15c9c <__assert_fail@plt+0x3f64>
   15c68:	cmp	r0, #0
   15c6c:	moveq	r0, r4
   15c70:	cmp	lr, #44	; 0x2c
   15c74:	ldrsb	r3, [r4, #1]
   15c78:	bne	15c04 <__assert_fail@plt+0x3ecc>
   15c7c:	cmp	r3, #0
   15c80:	beq	15c0c <__assert_fail@plt+0x3ed4>
   15c84:	cmp	r0, r6
   15c88:	bcc	15c20 <__assert_fail@plt+0x3ee8>
   15c8c:	mvn	r0, #0
   15c90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c94:	mov	r0, r5
   15c98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c9c:	mvn	r0, #1
   15ca0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ca4:	cmp	r0, #0
   15ca8:	beq	15d14 <__assert_fail@plt+0x3fdc>
   15cac:	push	{r4, lr}
   15cb0:	mov	r4, r3
   15cb4:	cmp	r4, #0
   15cb8:	ldrsb	ip, [r0]
   15cbc:	clz	r3, ip
   15cc0:	lsr	r3, r3, #5
   15cc4:	moveq	r3, #1
   15cc8:	cmp	r3, #0
   15ccc:	bne	15d0c <__assert_fail@plt+0x3fd4>
   15cd0:	ldr	lr, [r4]
   15cd4:	cmp	lr, r2
   15cd8:	bhi	15d0c <__assert_fail@plt+0x3fd4>
   15cdc:	cmp	ip, #43	; 0x2b
   15ce0:	strne	r3, [r4]
   15ce4:	addeq	r0, r0, #1
   15ce8:	ldr	r3, [sp, #8]
   15cec:	addeq	r1, r1, lr, lsl #2
   15cf0:	subeq	r2, r2, lr
   15cf4:	bl	15bb4 <__assert_fail@plt+0x3e7c>
   15cf8:	cmp	r0, #0
   15cfc:	ldrgt	r3, [r4]
   15d00:	addgt	r3, r3, r0
   15d04:	strgt	r3, [r4]
   15d08:	pop	{r4, pc}
   15d0c:	mvn	r0, #0
   15d10:	pop	{r4, pc}
   15d14:	mvn	r0, #0
   15d18:	bx	lr
   15d1c:	cmp	r2, #0
   15d20:	clz	r3, r1
   15d24:	lsr	r3, r3, #5
   15d28:	moveq	r3, #1
   15d2c:	cmp	r0, #0
   15d30:	moveq	r3, #1
   15d34:	cmp	r3, #0
   15d38:	bne	15e04 <__assert_fail@plt+0x40cc>
   15d3c:	push	{r4, r5, r6, r7, r8, lr}
   15d40:	mov	r6, r2
   15d44:	mov	r2, r3
   15d48:	ldrsb	r3, [r0]
   15d4c:	mov	r8, r1
   15d50:	mov	r4, r0
   15d54:	mov	r7, #1
   15d58:	cmp	r3, #0
   15d5c:	beq	15dcc <__assert_fail@plt+0x4094>
   15d60:	cmp	r2, #0
   15d64:	moveq	r2, r4
   15d68:	cmp	r3, #44	; 0x2c
   15d6c:	mov	r5, r4
   15d70:	ldrsb	r3, [r4, #1]!
   15d74:	beq	15dd4 <__assert_fail@plt+0x409c>
   15d78:	cmp	r3, #0
   15d7c:	bne	15df4 <__assert_fail@plt+0x40bc>
   15d80:	mov	r5, r4
   15d84:	cmp	r2, r5
   15d88:	sub	r1, r5, r2
   15d8c:	mov	r0, r2
   15d90:	bcs	15dec <__assert_fail@plt+0x40b4>
   15d94:	blx	r6
   15d98:	mov	r2, r4
   15d9c:	cmp	r0, #0
   15da0:	and	r1, r0, #7
   15da4:	poplt	{r4, r5, r6, r7, r8, pc}
   15da8:	ldrb	r3, [r8, r0, asr #3]
   15dac:	orr	r3, r3, r7, lsl r1
   15db0:	strb	r3, [r8, r0, asr #3]
   15db4:	ldrsb	r3, [r5]
   15db8:	cmp	r3, #0
   15dbc:	beq	15dcc <__assert_fail@plt+0x4094>
   15dc0:	ldrsb	r3, [r4]
   15dc4:	cmp	r3, #0
   15dc8:	bne	15d68 <__assert_fail@plt+0x4030>
   15dcc:	mov	r0, #0
   15dd0:	pop	{r4, r5, r6, r7, r8, pc}
   15dd4:	cmp	r3, #0
   15dd8:	moveq	r5, r4
   15ddc:	cmp	r2, r5
   15de0:	sub	r1, r5, r2
   15de4:	mov	r0, r2
   15de8:	bcc	15d94 <__assert_fail@plt+0x405c>
   15dec:	mvn	r0, #0
   15df0:	pop	{r4, r5, r6, r7, r8, pc}
   15df4:	adds	r4, r5, #1
   15df8:	bne	15d58 <__assert_fail@plt+0x4020>
   15dfc:	mov	r0, #0
   15e00:	pop	{r4, r5, r6, r7, r8, pc}
   15e04:	mvn	r0, #21
   15e08:	bx	lr
   15e0c:	cmp	r2, #0
   15e10:	clz	r3, r1
   15e14:	lsr	r3, r3, #5
   15e18:	moveq	r3, #1
   15e1c:	cmp	r0, #0
   15e20:	moveq	r3, #1
   15e24:	cmp	r3, #0
   15e28:	bne	15eec <__assert_fail@plt+0x41b4>
   15e2c:	push	{r4, r5, r6, r7, r8, lr}
   15e30:	mov	r6, r2
   15e34:	mov	r2, r3
   15e38:	ldrsb	r3, [r0]
   15e3c:	mov	r7, r1
   15e40:	mov	r4, r0
   15e44:	cmp	r3, #0
   15e48:	beq	15eb4 <__assert_fail@plt+0x417c>
   15e4c:	cmp	r2, #0
   15e50:	moveq	r2, r4
   15e54:	cmp	r3, #44	; 0x2c
   15e58:	mov	r5, r4
   15e5c:	ldrsb	r3, [r4, #1]!
   15e60:	beq	15ebc <__assert_fail@plt+0x4184>
   15e64:	cmp	r3, #0
   15e68:	bne	15edc <__assert_fail@plt+0x41a4>
   15e6c:	mov	r5, r4
   15e70:	cmp	r2, r5
   15e74:	sub	r1, r5, r2
   15e78:	mov	r0, r2
   15e7c:	bcs	15ed4 <__assert_fail@plt+0x419c>
   15e80:	blx	r6
   15e84:	mov	r2, r4
   15e88:	cmp	r0, #0
   15e8c:	poplt	{r4, r5, r6, r7, r8, pc}
   15e90:	ldr	r3, [r7]
   15e94:	orr	r3, r3, r0
   15e98:	str	r3, [r7]
   15e9c:	ldrsb	r3, [r5]
   15ea0:	cmp	r3, #0
   15ea4:	beq	15eb4 <__assert_fail@plt+0x417c>
   15ea8:	ldrsb	r3, [r4]
   15eac:	cmp	r3, #0
   15eb0:	bne	15e54 <__assert_fail@plt+0x411c>
   15eb4:	mov	r0, #0
   15eb8:	pop	{r4, r5, r6, r7, r8, pc}
   15ebc:	cmp	r3, #0
   15ec0:	moveq	r5, r4
   15ec4:	cmp	r2, r5
   15ec8:	sub	r1, r5, r2
   15ecc:	mov	r0, r2
   15ed0:	bcc	15e80 <__assert_fail@plt+0x4148>
   15ed4:	mvn	r0, #0
   15ed8:	pop	{r4, r5, r6, r7, r8, pc}
   15edc:	adds	r4, r5, #1
   15ee0:	bne	15e44 <__assert_fail@plt+0x410c>
   15ee4:	mov	r0, #0
   15ee8:	pop	{r4, r5, r6, r7, r8, pc}
   15eec:	mvn	r0, #21
   15ef0:	bx	lr
   15ef4:	ldr	ip, [pc, #396]	; 16088 <__assert_fail@plt+0x4350>
   15ef8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15efc:	add	ip, pc, ip
   15f00:	ldr	lr, [pc, #388]	; 1608c <__assert_fail@plt+0x4354>
   15f04:	sub	sp, sp, #8
   15f08:	mov	r9, r3
   15f0c:	ldr	r5, [ip, lr]
   15f10:	mov	sl, #0
   15f14:	subs	r4, r0, #0
   15f18:	ldr	r3, [r5]
   15f1c:	mov	r7, r1
   15f20:	str	sl, [sp]
   15f24:	mov	r1, ip
   15f28:	str	r3, [sp, #4]
   15f2c:	beq	15fa0 <__assert_fail@plt+0x4268>
   15f30:	str	r9, [r7]
   15f34:	str	r9, [r2]
   15f38:	mov	r6, r2
   15f3c:	bl	11b1c <__errno_location@plt>
   15f40:	str	sl, [r0]
   15f44:	ldrsb	r3, [r4]
   15f48:	mov	r8, r0
   15f4c:	cmp	r3, #58	; 0x3a
   15f50:	beq	15fbc <__assert_fail@plt+0x4284>
   15f54:	mov	sl, sp
   15f58:	mov	r1, sl
   15f5c:	mov	r2, #10
   15f60:	mov	r0, r4
   15f64:	bl	118ac <strtol@plt>
   15f68:	str	r0, [r7]
   15f6c:	str	r0, [r6]
   15f70:	ldr	r0, [r8]
   15f74:	cmp	r0, #0
   15f78:	bne	1600c <__assert_fail@plt+0x42d4>
   15f7c:	ldr	r2, [sp]
   15f80:	cmp	r2, #0
   15f84:	cmpne	r2, r4
   15f88:	beq	1600c <__assert_fail@plt+0x42d4>
   15f8c:	ldrsb	r3, [r2]
   15f90:	cmp	r3, #58	; 0x3a
   15f94:	beq	16014 <__assert_fail@plt+0x42dc>
   15f98:	cmp	r3, #45	; 0x2d
   15f9c:	beq	16024 <__assert_fail@plt+0x42ec>
   15fa0:	mov	r0, #0
   15fa4:	ldr	r2, [sp, #4]
   15fa8:	ldr	r3, [r5]
   15fac:	cmp	r2, r3
   15fb0:	bne	16084 <__assert_fail@plt+0x434c>
   15fb4:	add	sp, sp, #8
   15fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15fbc:	add	r4, r4, #1
   15fc0:	mov	r0, r4
   15fc4:	mov	r2, #10
   15fc8:	mov	r1, sp
   15fcc:	bl	118ac <strtol@plt>
   15fd0:	str	r0, [r6]
   15fd4:	ldr	r3, [r8]
   15fd8:	cmp	r3, #0
   15fdc:	bne	1600c <__assert_fail@plt+0x42d4>
   15fe0:	ldr	r3, [sp]
   15fe4:	cmp	r3, #0
   15fe8:	beq	1600c <__assert_fail@plt+0x42d4>
   15fec:	ldrsb	r2, [r3]
   15ff0:	sub	r3, r3, r4
   15ff4:	clz	r3, r3
   15ff8:	cmp	r2, #0
   15ffc:	lsr	r3, r3, #5
   16000:	movne	r3, #1
   16004:	cmp	r3, #0
   16008:	beq	15fa0 <__assert_fail@plt+0x4268>
   1600c:	mvn	r0, #0
   16010:	b	15fa4 <__assert_fail@plt+0x426c>
   16014:	ldrsb	r3, [r2, #1]
   16018:	cmp	r3, #0
   1601c:	streq	r9, [r6]
   16020:	beq	15fa4 <__assert_fail@plt+0x426c>
   16024:	mov	r3, #0
   16028:	add	r4, r2, #1
   1602c:	str	r3, [r8]
   16030:	mov	r1, sl
   16034:	mov	r0, r4
   16038:	mov	r2, #10
   1603c:	str	r3, [sp]
   16040:	bl	118ac <strtol@plt>
   16044:	str	r0, [r6]
   16048:	ldr	r3, [r8]
   1604c:	cmp	r3, #0
   16050:	bne	1600c <__assert_fail@plt+0x42d4>
   16054:	ldr	r2, [sp]
   16058:	cmp	r2, #0
   1605c:	beq	1600c <__assert_fail@plt+0x42d4>
   16060:	ldrsb	r3, [r2]
   16064:	sub	r2, r2, r4
   16068:	clz	r2, r2
   1606c:	cmp	r3, #0
   16070:	lsr	r2, r2, #5
   16074:	movne	r2, #1
   16078:	cmp	r2, #0
   1607c:	beq	15fa0 <__assert_fail@plt+0x4268>
   16080:	b	1600c <__assert_fail@plt+0x42d4>
   16084:	bl	119a8 <__stack_chk_fail@plt>
   16088:	andeq	r1, r1, r8, lsr pc
   1608c:			; <UNDEFINED> instruction: 0x000001b8
   16090:	ldr	r3, [pc, #244]	; 1618c <__assert_fail@plt+0x4454>
   16094:	ldr	r2, [pc, #244]	; 16190 <__assert_fail@plt+0x4458>
   16098:	add	r3, pc, r3
   1609c:	push	{r4, r5, r6, r7, r8, r9, lr}
   160a0:	sub	sp, sp, #20
   160a4:	ldr	r9, [r3, r2]
   160a8:	cmp	r0, #0
   160ac:	cmpne	r1, #0
   160b0:	ldr	r3, [r9]
   160b4:	str	r3, [sp, #12]
   160b8:	beq	16180 <__assert_fail@plt+0x4448>
   160bc:	mov	r4, r1
   160c0:	add	r8, sp, #4
   160c4:	add	r7, sp, #8
   160c8:	b	16108 <__assert_fail@plt+0x43d0>
   160cc:	cmp	r4, r3
   160d0:	bne	16180 <__assert_fail@plt+0x4448>
   160d4:	mov	r2, r4
   160d8:	mov	r1, r6
   160dc:	mov	r0, r5
   160e0:	bl	11cc0 <strncmp@plt>
   160e4:	cmp	r0, #0
   160e8:	bne	16180 <__assert_fail@plt+0x4448>
   160ec:	adds	r0, r5, r4
   160f0:	moveq	r3, #0
   160f4:	movne	r3, #1
   160f8:	adds	r4, r6, r4
   160fc:	moveq	r3, #0
   16100:	cmp	r3, #0
   16104:	beq	16180 <__assert_fail@plt+0x4448>
   16108:	mov	r1, r8
   1610c:	bl	14510 <__assert_fail@plt+0x27d8>
   16110:	mov	r1, r7
   16114:	mov	r5, r0
   16118:	mov	r0, r4
   1611c:	bl	14510 <__assert_fail@plt+0x27d8>
   16120:	ldr	r4, [sp, #4]
   16124:	ldr	r3, [sp, #8]
   16128:	mov	r6, r0
   1612c:	adds	r0, r4, r3
   16130:	beq	16164 <__assert_fail@plt+0x442c>
   16134:	cmp	r0, #1
   16138:	bne	160cc <__assert_fail@plt+0x4394>
   1613c:	cmp	r5, #0
   16140:	beq	16150 <__assert_fail@plt+0x4418>
   16144:	ldrsb	r2, [r5]
   16148:	cmp	r2, #47	; 0x2f
   1614c:	beq	16168 <__assert_fail@plt+0x4430>
   16150:	cmp	r6, #0
   16154:	beq	160cc <__assert_fail@plt+0x4394>
   16158:	ldrsb	r2, [r6]
   1615c:	cmp	r2, #47	; 0x2f
   16160:	bne	160cc <__assert_fail@plt+0x4394>
   16164:	mov	r0, #1
   16168:	ldr	r2, [sp, #12]
   1616c:	ldr	r3, [r9]
   16170:	cmp	r2, r3
   16174:	bne	16188 <__assert_fail@plt+0x4450>
   16178:	add	sp, sp, #20
   1617c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16180:	mov	r0, #0
   16184:	b	16168 <__assert_fail@plt+0x4430>
   16188:	bl	119a8 <__stack_chk_fail@plt>
   1618c:	muleq	r1, ip, sp
   16190:			; <UNDEFINED> instruction: 0x000001b8
   16194:	orrs	r3, r0, r1
   16198:	beq	16214 <__assert_fail@plt+0x44dc>
   1619c:	cmp	r0, #0
   161a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   161a4:	mov	r4, r1
   161a8:	mov	r5, r0
   161ac:	beq	16220 <__assert_fail@plt+0x44e8>
   161b0:	cmp	r1, #0
   161b4:	beq	16230 <__assert_fail@plt+0x44f8>
   161b8:	mov	r6, r2
   161bc:	bl	11aec <strlen@plt>
   161c0:	mvn	r3, r0
   161c4:	cmp	r6, r3
   161c8:	mov	r7, r0
   161cc:	movhi	r8, #0
   161d0:	bhi	1620c <__assert_fail@plt+0x44d4>
   161d4:	add	r9, r6, r0
   161d8:	add	r0, r9, #1
   161dc:	bl	11a68 <malloc@plt>
   161e0:	subs	r8, r0, #0
   161e4:	beq	1620c <__assert_fail@plt+0x44d4>
   161e8:	mov	r1, r5
   161ec:	mov	r2, r7
   161f0:	bl	11960 <memcpy@plt>
   161f4:	mov	r2, r6
   161f8:	mov	r1, r4
   161fc:	add	r0, r8, r7
   16200:	bl	11960 <memcpy@plt>
   16204:	mov	r3, #0
   16208:	strb	r3, [r8, r9]
   1620c:	mov	r0, r8
   16210:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16214:	ldr	r0, [pc, #28]	; 16238 <__assert_fail@plt+0x4500>
   16218:	add	r0, pc, r0
   1621c:	b	11990 <strdup@plt>
   16220:	mov	r0, r4
   16224:	mov	r1, r2
   16228:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1622c:	b	11948 <strndup@plt>
   16230:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16234:	b	11990 <strdup@plt>
   16238:	andeq	r1, r0, r4, lsl #2
   1623c:	push	{r4, r5, r6, lr}
   16240:	subs	r4, r1, #0
   16244:	mov	r5, r0
   16248:	moveq	r2, r4
   1624c:	beq	1625c <__assert_fail@plt+0x4524>
   16250:	mov	r0, r4
   16254:	bl	11aec <strlen@plt>
   16258:	mov	r2, r0
   1625c:	mov	r1, r4
   16260:	mov	r0, r5
   16264:	pop	{r4, r5, r6, lr}
   16268:	b	16194 <__assert_fail@plt+0x445c>
   1626c:	push	{r1, r2, r3}
   16270:	ldr	r1, [pc, #132]	; 162fc <__assert_fail@plt+0x45c4>
   16274:	ldr	r3, [pc, #132]	; 16300 <__assert_fail@plt+0x45c8>
   16278:	add	r1, pc, r1
   1627c:	push	{r4, r5, lr}
   16280:	mov	r5, r0
   16284:	ldr	r4, [r1, r3]
   16288:	sub	sp, sp, #16
   1628c:	add	ip, sp, #32
   16290:	ldr	r0, [r4]
   16294:	ldr	r2, [sp, #28]
   16298:	str	r0, [sp, #12]
   1629c:	mov	r3, ip
   162a0:	add	r0, sp, #8
   162a4:	mov	r1, #1
   162a8:	str	ip, [sp, #4]
   162ac:	bl	11b4c <__vasprintf_chk@plt>
   162b0:	subs	r2, r0, #0
   162b4:	movlt	r5, #0
   162b8:	blt	162d4 <__assert_fail@plt+0x459c>
   162bc:	mov	r0, r5
   162c0:	ldr	r1, [sp, #8]
   162c4:	bl	16194 <__assert_fail@plt+0x445c>
   162c8:	mov	r5, r0
   162cc:	ldr	r0, [sp, #8]
   162d0:	bl	1190c <free@plt>
   162d4:	ldr	r2, [sp, #12]
   162d8:	ldr	r3, [r4]
   162dc:	mov	r0, r5
   162e0:	cmp	r2, r3
   162e4:	bne	162f8 <__assert_fail@plt+0x45c0>
   162e8:	add	sp, sp, #16
   162ec:	pop	{r4, r5, lr}
   162f0:	add	sp, sp, #12
   162f4:	bx	lr
   162f8:	bl	119a8 <__stack_chk_fail@plt>
   162fc:			; <UNDEFINED> instruction: 0x00011bbc
   16300:			; <UNDEFINED> instruction: 0x000001b8
   16304:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16308:	mov	r6, r0
   1630c:	ldr	r0, [pc, #348]	; 16470 <__assert_fail@plt+0x4738>
   16310:	ldr	ip, [pc, #348]	; 16474 <__assert_fail@plt+0x473c>
   16314:	add	r0, pc, r0
   16318:	ldr	r5, [r6]
   1631c:	ldr	r8, [r0, ip]
   16320:	sub	sp, sp, #8
   16324:	ldrsb	r4, [r5]
   16328:	mov	r9, r2
   1632c:	ldr	r2, [r8]
   16330:	cmp	r4, #0
   16334:	mov	r7, r1
   16338:	str	r2, [sp, #4]
   1633c:	mov	r1, r0
   16340:	beq	163f0 <__assert_fail@plt+0x46b8>
   16344:	mov	r0, r5
   16348:	mov	r1, r9
   1634c:	mov	sl, r3
   16350:	bl	11d2c <strspn@plt>
   16354:	add	r4, r5, r0
   16358:	ldrsb	r5, [r5, r0]
   1635c:	cmp	r5, #0
   16360:	beq	16458 <__assert_fail@plt+0x4720>
   16364:	cmp	sl, #0
   16368:	beq	1640c <__assert_fail@plt+0x46d4>
   1636c:	ldr	r0, [pc, #260]	; 16478 <__assert_fail@plt+0x4740>
   16370:	mov	r1, r5
   16374:	add	r0, pc, r0
   16378:	bl	11af8 <strchr@plt>
   1637c:	cmp	r0, #0
   16380:	beq	16428 <__assert_fail@plt+0x46f0>
   16384:	add	sl, r4, #1
   16388:	mov	r3, #0
   1638c:	mov	r0, sl
   16390:	mov	r1, sp
   16394:	strb	r5, [sp]
   16398:	strb	r3, [sp, #1]
   1639c:	bl	145b0 <__assert_fail@plt+0x2878>
   163a0:	add	r3, r4, r0
   163a4:	str	r0, [r7]
   163a8:	ldrsb	r3, [r3, #1]
   163ac:	subs	r5, r5, r3
   163b0:	movne	r5, #1
   163b4:	cmp	r3, #0
   163b8:	moveq	r5, #1
   163bc:	cmp	r5, #0
   163c0:	bne	16458 <__assert_fail@plt+0x4720>
   163c4:	add	r0, r0, #2
   163c8:	add	r5, r4, r0
   163cc:	ldrsb	r1, [r4, r0]
   163d0:	cmp	r1, #0
   163d4:	beq	163e8 <__assert_fail@plt+0x46b0>
   163d8:	mov	r0, r9
   163dc:	bl	11af8 <strchr@plt>
   163e0:	cmp	r0, #0
   163e4:	beq	16458 <__assert_fail@plt+0x4720>
   163e8:	mov	r4, sl
   163ec:	str	r5, [r6]
   163f0:	ldr	r2, [sp, #4]
   163f4:	ldr	r3, [r8]
   163f8:	mov	r0, r4
   163fc:	cmp	r2, r3
   16400:	bne	1646c <__assert_fail@plt+0x4734>
   16404:	add	sp, sp, #8
   16408:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1640c:	mov	r1, r9
   16410:	mov	r0, r4
   16414:	bl	118c4 <strcspn@plt>
   16418:	add	r3, r4, r0
   1641c:	str	r0, [r7]
   16420:	str	r3, [r6]
   16424:	b	163f0 <__assert_fail@plt+0x46b8>
   16428:	mov	r1, r9
   1642c:	mov	r0, r4
   16430:	bl	145b0 <__assert_fail@plt+0x2878>
   16434:	str	r0, [r7]
   16438:	ldrsb	r1, [r4, r0]
   1643c:	add	r5, r4, r0
   16440:	cmp	r1, #0
   16444:	beq	16464 <__assert_fail@plt+0x472c>
   16448:	mov	r0, r9
   1644c:	bl	11af8 <strchr@plt>
   16450:	cmp	r0, #0
   16454:	bne	16464 <__assert_fail@plt+0x472c>
   16458:	str	r4, [r6]
   1645c:	mov	r4, #0
   16460:	b	163f0 <__assert_fail@plt+0x46b8>
   16464:	str	r5, [r6]
   16468:	b	163f0 <__assert_fail@plt+0x46b8>
   1646c:	bl	119a8 <__stack_chk_fail@plt>
   16470:	andeq	r1, r1, r0, lsr #22
   16474:			; <UNDEFINED> instruction: 0x000001b8
   16478:	andeq	r1, r0, r4, ror #13
   1647c:	push	{r4, lr}
   16480:	mov	r4, r0
   16484:	b	16490 <__assert_fail@plt+0x4758>
   16488:	cmp	r0, #10
   1648c:	beq	164a8 <__assert_fail@plt+0x4770>
   16490:	mov	r0, r4
   16494:	bl	11b88 <fgetc@plt>
   16498:	cmn	r0, #1
   1649c:	bne	16488 <__assert_fail@plt+0x4750>
   164a0:	mov	r0, #1
   164a4:	pop	{r4, pc}
   164a8:	mov	r0, #0
   164ac:	pop	{r4, pc}
   164b0:	ldr	r2, [pc, #400]	; 16648 <__assert_fail@plt+0x4910>
   164b4:	ldr	r3, [pc, #400]	; 1664c <__assert_fail@plt+0x4914>
   164b8:	add	r2, pc, r2
   164bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164c0:	sub	sp, sp, #8192	; 0x2000
   164c4:	ldr	r3, [r2, r3]
   164c8:	ldr	ip, [pc, #384]	; 16650 <__assert_fail@plt+0x4918>
   164cc:	sub	sp, sp, #44	; 0x2c
   164d0:	mov	lr, r3
   164d4:	add	ip, pc, ip
   164d8:	str	r1, [sp, #8]
   164dc:	ldr	lr, [lr]
   164e0:	str	ip, [sp]
   164e4:	add	ip, sp, #8192	; 0x2000
   164e8:	add	ip, ip, #36	; 0x24
   164ec:	add	r7, sp, #40	; 0x28
   164f0:	sub	r6, r7, #4
   164f4:	str	r3, [sp, #16]
   164f8:	mov	r3, #8192	; 0x2000
   164fc:	str	r0, [sp, #4]
   16500:	mov	r1, r3
   16504:	str	lr, [ip]
   16508:	mov	r0, r6
   1650c:	mov	r2, #1
   16510:	bl	11d14 <__snprintf_chk@plt>
   16514:	mov	r0, r6
   16518:	mov	r1, #0
   1651c:	bl	11a38 <open64@plt>
   16520:	subs	r8, r0, #0
   16524:	movlt	r7, #0
   16528:	blt	165f8 <__assert_fail@plt+0x48c0>
   1652c:	mov	r1, #0
   16530:	mov	sl, r1
   16534:	mov	r2, #8192	; 0x2000
   16538:	mov	r0, r6
   1653c:	mov	r9, sl
   16540:	mov	fp, sl
   16544:	mov	r4, #8192	; 0x2000
   16548:	mov	r5, r6
   1654c:	bl	11b64 <memset@plt>
   16550:	sub	r3, r7, #12
   16554:	str	r3, [sp, #20]
   16558:	mov	r2, r4
   1655c:	mov	r1, r5
   16560:	mov	r0, r8
   16564:	bl	118e8 <read@plt>
   16568:	cmp	r0, #0
   1656c:	ble	16588 <__assert_fail@plt+0x4850>
   16570:	subs	r4, r4, r0
   16574:	add	r5, r5, r0
   16578:	add	sl, sl, r0
   1657c:	beq	165b4 <__assert_fail@plt+0x487c>
   16580:	mov	r9, #0
   16584:	b	16558 <__assert_fail@plt+0x4820>
   16588:	beq	165a8 <__assert_fail@plt+0x4870>
   1658c:	bl	11b1c <__errno_location@plt>
   16590:	ldr	r3, [r0]
   16594:	cmp	r3, #4
   16598:	cmpne	r3, #11
   1659c:	bne	165a8 <__assert_fail@plt+0x4870>
   165a0:	cmp	r9, #4
   165a4:	ble	16624 <__assert_fail@plt+0x48ec>
   165a8:	cmp	sl, #0
   165ac:	moveq	r7, sl
   165b0:	beq	165f0 <__assert_fail@plt+0x48b8>
   165b4:	mov	r1, r6
   165b8:	mov	r2, #0
   165bc:	mov	ip, #32
   165c0:	ldrsb	r3, [r1], #1
   165c4:	add	r2, r2, #1
   165c8:	cmp	r3, #0
   165cc:	strbeq	ip, [r1, #-1]
   165d0:	cmp	r2, sl
   165d4:	bcc	165c0 <__assert_fail@plt+0x4888>
   165d8:	add	r7, r7, sl
   165dc:	mov	r3, #0
   165e0:	mov	r0, r6
   165e4:	strb	r3, [r7, #-5]
   165e8:	bl	11990 <strdup@plt>
   165ec:	mov	r7, r0
   165f0:	mov	r0, r8
   165f4:	bl	11ce4 <close@plt>
   165f8:	add	r3, sp, #8192	; 0x2000
   165fc:	add	r3, r3, #36	; 0x24
   16600:	ldr	r2, [r3]
   16604:	ldr	r3, [sp, #16]
   16608:	mov	r0, r7
   1660c:	ldr	r3, [r3]
   16610:	cmp	r2, r3
   16614:	bne	16644 <__assert_fail@plt+0x490c>
   16618:	add	sp, sp, #8192	; 0x2000
   1661c:	add	sp, sp, #44	; 0x2c
   16620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16624:	ldr	r3, [pc, #40]	; 16654 <__assert_fail@plt+0x491c>
   16628:	mov	r1, #0
   1662c:	ldr	r0, [sp, #20]
   16630:	add	r9, r9, #1
   16634:	str	fp, [r7, #-12]
   16638:	str	r3, [r7, #-8]
   1663c:	bl	11924 <nanosleep@plt>
   16640:	b	16558 <__assert_fail@plt+0x4820>
   16644:	bl	119a8 <__stack_chk_fail@plt>
   16648:	andeq	r1, r1, ip, ror r9
   1664c:			; <UNDEFINED> instruction: 0x000001b8
   16650:	andeq	r1, r0, r8, lsl #11
   16654:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   16658:	ldr	r1, [pc, #164]	; 16704 <__assert_fail@plt+0x49cc>
   1665c:	ldr	r2, [pc, #164]	; 16708 <__assert_fail@plt+0x49d0>
   16660:	add	r1, pc, r1
   16664:	push	{r4, r5, r6, lr}
   16668:	sub	sp, sp, #4096	; 0x1000
   1666c:	ldr	r5, [r1, r2]
   16670:	sub	sp, sp, #16
   16674:	add	lr, sp, #4096	; 0x1000
   16678:	str	r0, [sp]
   1667c:	add	lr, lr, #12
   16680:	ldr	ip, [r5]
   16684:	ldr	r3, [pc, #128]	; 1670c <__assert_fail@plt+0x49d4>
   16688:	add	r6, sp, #12
   1668c:	add	r3, pc, r3
   16690:	mov	r2, #4096	; 0x1000
   16694:	str	ip, [lr]
   16698:	mov	r0, r6
   1669c:	mov	r1, #1
   166a0:	bl	11b34 <__sprintf_chk@plt>
   166a4:	mov	r0, #4
   166a8:	bl	11a68 <malloc@plt>
   166ac:	subs	r4, r0, #0
   166b0:	beq	166f0 <__assert_fail@plt+0x49b8>
   166b4:	mov	r0, r6
   166b8:	bl	11a20 <opendir@plt>
   166bc:	cmp	r0, #0
   166c0:	str	r0, [r4]
   166c4:	beq	166f0 <__assert_fail@plt+0x49b8>
   166c8:	add	r3, sp, #4096	; 0x1000
   166cc:	add	r3, r3, #12
   166d0:	ldr	r2, [r3]
   166d4:	ldr	r3, [r5]
   166d8:	mov	r0, r4
   166dc:	cmp	r2, r3
   166e0:	bne	16700 <__assert_fail@plt+0x49c8>
   166e4:	add	sp, sp, #4096	; 0x1000
   166e8:	add	sp, sp, #16
   166ec:	pop	{r4, r5, r6, pc}
   166f0:	mov	r0, r4
   166f4:	bl	1190c <free@plt>
   166f8:	mov	r4, #0
   166fc:	b	166c8 <__assert_fail@plt+0x4990>
   16700:	bl	119a8 <__stack_chk_fail@plt>
   16704:	ldrdeq	r1, [r1], -r4
   16708:			; <UNDEFINED> instruction: 0x000001b8
   1670c:	ldrdeq	r1, [r0], -ip
   16710:	push	{r4, lr}
   16714:	subs	r4, r0, #0
   16718:	beq	1672c <__assert_fail@plt+0x49f4>
   1671c:	ldr	r0, [r4]
   16720:	cmp	r0, #0
   16724:	beq	1672c <__assert_fail@plt+0x49f4>
   16728:	bl	11cfc <closedir@plt>
   1672c:	mov	r0, r4
   16730:	pop	{r4, lr}
   16734:	b	1190c <free@plt>
   16738:	ldr	r3, [pc, #280]	; 16858 <__assert_fail@plt+0x4b20>
   1673c:	ldr	r2, [pc, #280]	; 1685c <__assert_fail@plt+0x4b24>
   16740:	add	r3, pc, r3
   16744:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16748:	cmp	r0, #0
   1674c:	ldr	r9, [r3, r2]
   16750:	sub	sp, sp, #8
   16754:	clz	sl, r1
   16758:	ldr	r2, [r9]
   1675c:	lsr	sl, sl, #5
   16760:	moveq	sl, #1
   16764:	cmp	sl, #0
   16768:	str	r2, [sp, #4]
   1676c:	bne	1684c <__assert_fail@plt+0x4b14>
   16770:	str	sl, [r1]
   16774:	mov	r6, r0
   16778:	mov	r5, r1
   1677c:	bl	11b1c <__errno_location@plt>
   16780:	mov	r8, sl
   16784:	mov	r7, sp
   16788:	mov	r4, r0
   1678c:	str	sl, [r0]
   16790:	b	167a0 <__assert_fail@plt+0x4a68>
   16794:	ldr	r0, [r5]
   16798:	cmp	r0, #0
   1679c:	bne	16844 <__assert_fail@plt+0x4b0c>
   167a0:	ldr	r0, [r6]
   167a4:	bl	11c60 <readdir64@plt>
   167a8:	subs	sl, r0, #0
   167ac:	beq	16830 <__assert_fail@plt+0x4af8>
   167b0:	bl	11abc <__ctype_b_loc@plt>
   167b4:	ldrb	r3, [sl, #19]
   167b8:	lsl	r3, r3, #1
   167bc:	ldr	r2, [r0]
   167c0:	ldrh	r3, [r2, r3]
   167c4:	tst	r3, #2048	; 0x800
   167c8:	beq	16794 <__assert_fail@plt+0x4a5c>
   167cc:	add	sl, sl, #19
   167d0:	str	r8, [r4]
   167d4:	mov	r0, sl
   167d8:	mov	r2, #10
   167dc:	mov	r1, r7
   167e0:	bl	118ac <strtol@plt>
   167e4:	str	r0, [r5]
   167e8:	ldr	r3, [r4]
   167ec:	cmp	r3, #0
   167f0:	bne	16814 <__assert_fail@plt+0x4adc>
   167f4:	ldr	r3, [sp]
   167f8:	cmp	sl, r3
   167fc:	beq	16814 <__assert_fail@plt+0x4adc>
   16800:	cmp	r3, #0
   16804:	beq	16798 <__assert_fail@plt+0x4a60>
   16808:	ldrsb	r3, [r3]
   1680c:	cmp	r3, #0
   16810:	beq	16798 <__assert_fail@plt+0x4a60>
   16814:	mvn	r0, #0
   16818:	ldr	r2, [sp, #4]
   1681c:	ldr	r3, [r9]
   16820:	cmp	r2, r3
   16824:	bne	16854 <__assert_fail@plt+0x4b1c>
   16828:	add	sp, sp, #8
   1682c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16830:	ldr	r3, [r4]
   16834:	cmp	r3, #0
   16838:	moveq	r0, #1
   1683c:	beq	16818 <__assert_fail@plt+0x4ae0>
   16840:	b	16814 <__assert_fail@plt+0x4adc>
   16844:	mov	r0, #0
   16848:	b	16818 <__assert_fail@plt+0x4ae0>
   1684c:	mvn	r0, #21
   16850:	b	16818 <__assert_fail@plt+0x4ae0>
   16854:	bl	119a8 <__stack_chk_fail@plt>
   16858:	strdeq	r1, [r1], -r4
   1685c:			; <UNDEFINED> instruction: 0x000001b8
   16860:	ldr	r1, [pc, #4]	; 1686c <__assert_fail@plt+0x4b34>
   16864:	add	r1, pc, r1
   16868:	b	164b0 <__assert_fail@plt+0x4778>
   1686c:	andeq	r1, r0, r4, lsl r2
   16870:	ldr	r1, [pc, #4]	; 1687c <__assert_fail@plt+0x4b44>
   16874:	add	r1, pc, r1
   16878:	b	164b0 <__assert_fail@plt+0x4778>
   1687c:	andeq	r1, r0, ip, lsl #4
   16880:	push	{r4, lr}
   16884:	mov	r1, #16
   16888:	mov	r0, #1
   1688c:	bl	11858 <calloc@plt>
   16890:	subs	r4, r0, #0
   16894:	beq	168b8 <__assert_fail@plt+0x4b80>
   16898:	ldr	r0, [pc, #44]	; 168cc <__assert_fail@plt+0x4b94>
   1689c:	add	r0, pc, r0
   168a0:	bl	11a20 <opendir@plt>
   168a4:	cmp	r0, #0
   168a8:	str	r0, [r4]
   168ac:	beq	168b8 <__assert_fail@plt+0x4b80>
   168b0:	mov	r0, r4
   168b4:	pop	{r4, pc}
   168b8:	mov	r0, r4
   168bc:	mov	r4, #0
   168c0:	bl	1190c <free@plt>
   168c4:	mov	r0, r4
   168c8:	pop	{r4, pc}
   168cc:	ldrdeq	r0, [r0], -ip
   168d0:	push	{r4, lr}
   168d4:	subs	r4, r0, #0
   168d8:	beq	168ec <__assert_fail@plt+0x4bb4>
   168dc:	ldr	r0, [r4]
   168e0:	cmp	r0, #0
   168e4:	beq	168ec <__assert_fail@plt+0x4bb4>
   168e8:	bl	11cfc <closedir@plt>
   168ec:	mov	r0, r4
   168f0:	pop	{r4, lr}
   168f4:	b	1190c <free@plt>
   168f8:	ldrb	r3, [r0, #12]
   168fc:	str	r1, [r0, #4]
   16900:	bic	r3, r3, #1
   16904:	cmp	r1, #0
   16908:	orrne	r3, r3, #1
   1690c:	strb	r3, [r0, #12]
   16910:	bx	lr
   16914:	ldrb	r3, [r0, #12]
   16918:	str	r1, [r0, #8]
   1691c:	orr	r3, r3, #2
   16920:	strb	r3, [r0, #12]
   16924:	bx	lr
   16928:	ldr	r2, [pc, #596]	; 16b84 <__assert_fail@plt+0x4e4c>
   1692c:	ldr	ip, [pc, #596]	; 16b88 <__assert_fail@plt+0x4e50>
   16930:	add	r2, pc, r2
   16934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16938:	sub	sp, sp, #8576	; 0x2180
   1693c:	ldr	ip, [r2, ip]
   16940:	sub	sp, sp, #12
   16944:	cmp	r0, #0
   16948:	add	r2, sp, #8576	; 0x2180
   1694c:	clz	r3, r1
   16950:	str	ip, [sp, #16]
   16954:	lsr	r3, r3, #5
   16958:	ldr	ip, [ip]
   1695c:	moveq	r3, #1
   16960:	add	r2, r2, #4
   16964:	cmp	r3, #0
   16968:	str	ip, [r2]
   1696c:	bne	16b78 <__assert_fail@plt+0x4e40>
   16970:	str	r3, [r1]
   16974:	ldr	r3, [pc, #528]	; 16b8c <__assert_fail@plt+0x4e54>
   16978:	mov	r5, r0
   1697c:	add	r3, pc, r3
   16980:	mov	sl, r1
   16984:	str	r3, [sp, #12]
   16988:	bl	11b1c <__errno_location@plt>
   1698c:	ldr	r9, [pc, #508]	; 16b90 <__assert_fail@plt+0x4e58>
   16990:	ldr	fp, [pc, #508]	; 16b94 <__assert_fail@plt+0x4e5c>
   16994:	add	r9, pc, r9
   16998:	add	fp, pc, fp
   1699c:	mov	r8, r0
   169a0:	mov	r6, #0
   169a4:	str	r6, [r8]
   169a8:	ldr	r0, [r5]
   169ac:	bl	11c60 <readdir64@plt>
   169b0:	subs	r4, r0, #0
   169b4:	beq	16b60 <__assert_fail@plt+0x4e28>
   169b8:	bl	11abc <__ctype_b_loc@plt>
   169bc:	ldrb	r3, [r4, #19]
   169c0:	lsl	r3, r3, #1
   169c4:	ldr	r2, [r0]
   169c8:	ldrh	r3, [r2, r3]
   169cc:	tst	r3, #2048	; 0x800
   169d0:	beq	169a0 <__assert_fail@plt+0x4c68>
   169d4:	ldrb	r3, [r5, #12]
   169d8:	add	r4, r4, #19
   169dc:	tst	r3, #2
   169e0:	addeq	r7, sp, #392	; 0x188
   169e4:	bne	16b1c <__assert_fail@plt+0x4de4>
   169e8:	tst	r3, #1
   169ec:	beq	16aa4 <__assert_fail@plt+0x4d6c>
   169f0:	mov	r3, #8192	; 0x2000
   169f4:	sub	r6, r7, #4
   169f8:	mov	r1, r3
   169fc:	mov	r2, #1
   16a00:	str	r4, [sp, #4]
   16a04:	str	r9, [sp]
   16a08:	mov	r0, r6
   16a0c:	bl	11d14 <__snprintf_chk@plt>
   16a10:	ldr	r0, [r5]
   16a14:	bl	11c6c <dirfd@plt>
   16a18:	mov	r1, r6
   16a1c:	mov	r2, #524288	; 0x80000
   16a20:	bl	11b04 <openat64@plt>
   16a24:	cmp	r0, #0
   16a28:	blt	169a0 <__assert_fail@plt+0x4c68>
   16a2c:	mov	r1, fp
   16a30:	bl	11840 <fdopen@plt>
   16a34:	subs	r3, r0, #0
   16a38:	beq	169a0 <__assert_fail@plt+0x4c68>
   16a3c:	mov	r2, r3
   16a40:	mov	r1, #8192	; 0x2000
   16a44:	mov	r0, r6
   16a48:	str	r3, [sp, #20]
   16a4c:	bl	11918 <fgets@plt>
   16a50:	ldr	r3, [sp, #20]
   16a54:	str	r0, [r7, #-368]	; 0xfffffe90
   16a58:	mov	r0, r3
   16a5c:	bl	11bc4 <fclose@plt>
   16a60:	ldr	r3, [r7, #-368]	; 0xfffffe90
   16a64:	cmp	r3, #0
   16a68:	beq	169a0 <__assert_fail@plt+0x4c68>
   16a6c:	add	r3, sp, #132	; 0x84
   16a70:	mov	r0, r6
   16a74:	mov	r2, r3
   16a78:	ldr	r1, [sp, #12]
   16a7c:	str	r3, [sp, #20]
   16a80:	bl	11c30 <sscanf@plt>
   16a84:	cmp	r0, #1
   16a88:	bne	169a0 <__assert_fail@plt+0x4c68>
   16a8c:	ldr	r3, [sp, #20]
   16a90:	ldr	r1, [r5, #4]
   16a94:	mov	r0, r3
   16a98:	bl	11894 <strcmp@plt>
   16a9c:	cmp	r0, #0
   16aa0:	bne	169a0 <__assert_fail@plt+0x4c68>
   16aa4:	mov	r3, #0
   16aa8:	str	r3, [r8]
   16aac:	mov	r2, #10
   16ab0:	add	r1, sp, #24
   16ab4:	mov	r0, r4
   16ab8:	str	r3, [r7, #-368]	; 0xfffffe90
   16abc:	bl	118ac <strtol@plt>
   16ac0:	str	r0, [sl]
   16ac4:	ldr	r0, [r8]
   16ac8:	cmp	r0, #0
   16acc:	rsbne	r0, r0, #0
   16ad0:	bne	16af4 <__assert_fail@plt+0x4dbc>
   16ad4:	ldr	r3, [r7, #-368]	; 0xfffffe90
   16ad8:	cmp	r3, r4
   16adc:	beq	16b70 <__assert_fail@plt+0x4e38>
   16ae0:	cmp	r3, #0
   16ae4:	beq	16af4 <__assert_fail@plt+0x4dbc>
   16ae8:	ldrsb	r3, [r3]
   16aec:	cmp	r3, #0
   16af0:	bne	16b70 <__assert_fail@plt+0x4e38>
   16af4:	add	r3, sp, #8576	; 0x2180
   16af8:	add	r3, r3, #4
   16afc:	ldr	r2, [r3]
   16b00:	ldr	r3, [sp, #16]
   16b04:	ldr	r3, [r3]
   16b08:	cmp	r2, r3
   16b0c:	bne	16b80 <__assert_fail@plt+0x4e48>
   16b10:	add	sp, sp, #8576	; 0x2180
   16b14:	add	sp, sp, #12
   16b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b1c:	ldr	r0, [r5]
   16b20:	bl	11c6c <dirfd@plt>
   16b24:	str	r6, [sp]
   16b28:	add	r3, sp, #24
   16b2c:	mov	r2, r4
   16b30:	mov	r1, r0
   16b34:	mov	r0, #3
   16b38:	bl	119d8 <__fxstatat64@plt>
   16b3c:	cmp	r0, #0
   16b40:	bne	169a0 <__assert_fail@plt+0x4c68>
   16b44:	add	r7, sp, #392	; 0x188
   16b48:	ldr	r2, [r5, #8]
   16b4c:	ldr	r3, [r7, #-344]	; 0xfffffea8
   16b50:	cmp	r2, r3
   16b54:	bne	169a0 <__assert_fail@plt+0x4c68>
   16b58:	ldrb	r3, [r5, #12]
   16b5c:	b	169e8 <__assert_fail@plt+0x4cb0>
   16b60:	ldr	r3, [r8]
   16b64:	cmp	r3, r6
   16b68:	moveq	r0, #1
   16b6c:	beq	16af4 <__assert_fail@plt+0x4dbc>
   16b70:	mvn	r0, #0
   16b74:	b	16af4 <__assert_fail@plt+0x4dbc>
   16b78:	mvn	r0, #21
   16b7c:	b	16af4 <__assert_fail@plt+0x4dbc>
   16b80:	bl	119a8 <__stack_chk_fail@plt>
   16b84:	andeq	r1, r1, r4, lsl #10
   16b88:			; <UNDEFINED> instruction: 0x000001b8
   16b8c:	andeq	r1, r0, r4, lsl r1
   16b90:	strdeq	r1, [r0], -r4
   16b94:			; <UNDEFINED> instruction: 0x000007b4
   16b98:	cmp	r3, #0
   16b9c:	cmpeq	r2, #0
   16ba0:	bne	16bb8 <__assert_fail@plt+0x4e80>
   16ba4:	cmp	r1, #0
   16ba8:	cmpeq	r0, #0
   16bac:	mvnne	r1, #0
   16bb0:	mvnne	r0, #0
   16bb4:	b	16bd4 <__assert_fail@plt+0x4e9c>
   16bb8:	sub	sp, sp, #8
   16bbc:	push	{sp, lr}
   16bc0:	bl	16be4 <__assert_fail@plt+0x4eac>
   16bc4:	ldr	lr, [sp, #4]
   16bc8:	add	sp, sp, #8
   16bcc:	pop	{r2, r3}
   16bd0:	bx	lr
   16bd4:	push	{r1, lr}
   16bd8:	mov	r0, #8
   16bdc:	bl	11870 <raise@plt>
   16be0:	pop	{r1, pc}
   16be4:	cmp	r1, r3
   16be8:	cmpeq	r0, r2
   16bec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bf0:	mov	r4, r0
   16bf4:	movcc	r0, #0
   16bf8:	mov	r5, r1
   16bfc:	ldr	lr, [sp, #36]	; 0x24
   16c00:	movcc	r1, r0
   16c04:	bcc	16d00 <__assert_fail@plt+0x4fc8>
   16c08:	cmp	r3, #0
   16c0c:	clzeq	ip, r2
   16c10:	clzne	ip, r3
   16c14:	addeq	ip, ip, #32
   16c18:	cmp	r5, #0
   16c1c:	clzeq	r1, r4
   16c20:	addeq	r1, r1, #32
   16c24:	clzne	r1, r5
   16c28:	sub	ip, ip, r1
   16c2c:	sub	sl, ip, #32
   16c30:	lsl	r9, r3, ip
   16c34:	rsb	fp, ip, #32
   16c38:	orr	r9, r9, r2, lsl sl
   16c3c:	orr	r9, r9, r2, lsr fp
   16c40:	lsl	r8, r2, ip
   16c44:	cmp	r5, r9
   16c48:	cmpeq	r4, r8
   16c4c:	movcc	r0, #0
   16c50:	movcc	r1, r0
   16c54:	bcc	16c70 <__assert_fail@plt+0x4f38>
   16c58:	mov	r0, #1
   16c5c:	subs	r4, r4, r8
   16c60:	lsl	r1, r0, sl
   16c64:	orr	r1, r1, r0, lsr fp
   16c68:	lsl	r0, r0, ip
   16c6c:	sbc	r5, r5, r9
   16c70:	cmp	ip, #0
   16c74:	beq	16d00 <__assert_fail@plt+0x4fc8>
   16c78:	lsr	r6, r8, #1
   16c7c:	orr	r6, r6, r9, lsl #31
   16c80:	lsr	r7, r9, #1
   16c84:	mov	r2, ip
   16c88:	b	16cac <__assert_fail@plt+0x4f74>
   16c8c:	subs	r3, r4, r6
   16c90:	sbc	r8, r5, r7
   16c94:	adds	r3, r3, r3
   16c98:	adc	r8, r8, r8
   16c9c:	adds	r4, r3, #1
   16ca0:	adc	r5, r8, #0
   16ca4:	subs	r2, r2, #1
   16ca8:	beq	16cc8 <__assert_fail@plt+0x4f90>
   16cac:	cmp	r5, r7
   16cb0:	cmpeq	r4, r6
   16cb4:	bcs	16c8c <__assert_fail@plt+0x4f54>
   16cb8:	adds	r4, r4, r4
   16cbc:	adc	r5, r5, r5
   16cc0:	subs	r2, r2, #1
   16cc4:	bne	16cac <__assert_fail@plt+0x4f74>
   16cc8:	lsr	r3, r4, ip
   16ccc:	orr	r3, r3, r5, lsl fp
   16cd0:	lsr	r2, r5, ip
   16cd4:	orr	r3, r3, r5, lsr sl
   16cd8:	adds	r0, r0, r4
   16cdc:	mov	r4, r3
   16ce0:	lsl	r3, r2, ip
   16ce4:	orr	r3, r3, r4, lsl sl
   16ce8:	lsl	ip, r4, ip
   16cec:	orr	r3, r3, r4, lsr fp
   16cf0:	adc	r1, r1, r5
   16cf4:	subs	r0, r0, ip
   16cf8:	mov	r5, r2
   16cfc:	sbc	r1, r1, r3
   16d00:	cmp	lr, #0
   16d04:	strdne	r4, [lr]
   16d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d10:	mov	r7, r0
   16d14:	ldr	r6, [pc, #72]	; 16d64 <__assert_fail@plt+0x502c>
   16d18:	ldr	r5, [pc, #72]	; 16d68 <__assert_fail@plt+0x5030>
   16d1c:	add	r6, pc, r6
   16d20:	add	r5, pc, r5
   16d24:	sub	r6, r6, r5
   16d28:	mov	r8, r1
   16d2c:	mov	r9, r2
   16d30:	bl	11820 <fdopen@plt-0x20>
   16d34:	asrs	r6, r6, #2
   16d38:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d3c:	mov	r4, #0
   16d40:	add	r4, r4, #1
   16d44:	ldr	r3, [r5], #4
   16d48:	mov	r2, r9
   16d4c:	mov	r1, r8
   16d50:	mov	r0, r7
   16d54:	blx	r3
   16d58:	cmp	r6, r4
   16d5c:	bne	16d40 <__assert_fail@plt+0x5008>
   16d60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d64:	andeq	r1, r1, r0
   16d68:	strdeq	r0, [r1], -r8
   16d6c:	bx	lr
   16d70:	ldr	r3, [pc, #12]	; 16d84 <__assert_fail@plt+0x504c>
   16d74:	mov	r1, #0
   16d78:	add	r3, pc, r3
   16d7c:	ldr	r2, [r3]
   16d80:	b	11b40 <__cxa_atexit@plt>
   16d84:	andeq	r1, r1, r4, lsl #5

Disassembly of section .fini:

00016d88 <.fini>:
   16d88:	push	{r3, lr}
   16d8c:	pop	{r3, pc}
