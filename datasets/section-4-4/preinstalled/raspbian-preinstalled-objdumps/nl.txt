
raspbian-preinstalled/nl:     file format elf32-littlearm


Disassembly of section .init:

00010db4 <.init>:
   10db4:	push	{r3, lr}
   10db8:	bl	11838 <__assert_fail@plt+0x7d0>
   10dbc:	pop	{r3, pc}

Disassembly of section .plt:

00010dc0 <calloc@plt-0x14>:
   10dc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10dc4:	ldr	lr, [pc, #4]	; 10dd0 <calloc@plt-0x4>
   10dc8:	add	lr, pc, lr
   10dcc:	ldr	pc, [lr, #8]!
   10dd0:	andeq	r7, r1, r0, lsr r2

00010dd4 <calloc@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #560]!	; 0x230

00010de0 <fputs_unlocked@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #94208	; 0x17000
   10de8:	ldr	pc, [ip, #552]!	; 0x228

00010dec <raise@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #94208	; 0x17000
   10df4:	ldr	pc, [ip, #544]!	; 0x220

00010df8 <strcmp@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #94208	; 0x17000
   10e00:	ldr	pc, [ip, #536]!	; 0x218

00010e04 <posix_fadvise64@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #94208	; 0x17000
   10e0c:	ldr	pc, [ip, #528]!	; 0x210

00010e10 <fflush@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #94208	; 0x17000
   10e18:	ldr	pc, [ip, #520]!	; 0x208

00010e1c <free@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #94208	; 0x17000
   10e24:	ldr	pc, [ip, #512]!	; 0x200

00010e28 <_exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #94208	; 0x17000
   10e30:	ldr	pc, [ip, #504]!	; 0x1f8

00010e34 <memcpy@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #94208	; 0x17000
   10e3c:	ldr	pc, [ip, #496]!	; 0x1f0

00010e40 <mbsinit@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #488]!	; 0x1e8

00010e4c <fwrite_unlocked@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #480]!	; 0x1e0

00010e58 <memcmp@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #472]!	; 0x1d8

00010e64 <stpcpy@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e70 <dcgettext@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #456]!	; 0x1c8

00010e7c <__stack_chk_fail@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #448]!	; 0x1c0

00010e88 <realloc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #440]!	; 0x1b8

00010e94 <textdomain@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #432]!	; 0x1b0

00010ea0 <iswprint@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #424]!	; 0x1a8

00010eac <fwrite@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #416]!	; 0x1a0

00010eb8 <lseek64@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #408]!	; 0x198

00010ec4 <__ctype_get_mb_cur_max@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #400]!	; 0x190

00010ed0 <strcpy@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #392]!	; 0x188

00010edc <__fpending@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #384]!	; 0x180

00010ee8 <mbrtowc@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #376]!	; 0x178

00010ef4 <error@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #368]!	; 0x170

00010f00 <malloc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #360]!	; 0x168

00010f0c <__libc_start_main@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #352]!	; 0x160

00010f18 <__freading@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #344]!	; 0x158

00010f24 <__gmon_start__@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #336]!	; 0x150

00010f30 <getopt_long@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #328]!	; 0x148

00010f3c <__ctype_b_loc@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #320]!	; 0x140

00010f48 <exit@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #312]!	; 0x138

00010f54 <strlen@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #304]!	; 0x130

00010f60 <strchr@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #296]!	; 0x128

00010f6c <re_search@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #288]!	; 0x120

00010f78 <__errno_location@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #280]!	; 0x118

00010f84 <__cxa_atexit@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #272]!	; 0x110

00010f90 <memset@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #264]!	; 0x108

00010f9c <__printf_chk@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #256]!	; 0x100

00010fa8 <fileno@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #248]!	; 0xf8

00010fb4 <__fprintf_chk@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #240]!	; 0xf0

00010fc0 <fclose@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #232]!	; 0xe8

00010fcc <fseeko64@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #224]!	; 0xe0

00010fd8 <__uflow@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #216]!	; 0xd8

00010fe4 <__overflow@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #208]!	; 0xd0

00010ff0 <setlocale@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #200]!	; 0xc8

00010ffc <strrchr@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #192]!	; 0xc0

00011008 <nl_langinfo@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #184]!	; 0xb8

00011014 <clearerr_unlocked@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #176]!	; 0xb0

00011020 <__strtoll_internal@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #168]!	; 0xa8

0001102c <fopen64@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #160]!	; 0xa0

00011038 <bindtextdomain@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #152]!	; 0x98

00011044 <re_compile_pattern@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #144]!	; 0x90

00011050 <strncmp@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #136]!	; 0x88

0001105c <abort@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #128]!	; 0x80

00011068 <__assert_fail@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #120]!	; 0x78

Disassembly of section .text:

00011074 <.text>:
   11074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11078:	mov	r6, r0
   1107c:	sub	sp, sp, #36	; 0x24
   11080:	ldr	r0, [r1]
   11084:	mov	r5, r1
   11088:	bl	124a8 <__assert_fail@plt+0x1440>
   1108c:	ldr	r1, [pc, #1744]	; 11764 <__assert_fail@plt+0x6fc>
   11090:	mov	r0, #6
   11094:	bl	10ff0 <setlocale@plt>
   11098:	ldr	r1, [pc, #1736]	; 11768 <__assert_fail@plt+0x700>
   1109c:	ldr	r0, [pc, #1736]	; 1176c <__assert_fail@plt+0x704>
   110a0:	bl	11038 <bindtextdomain@plt>
   110a4:	ldr	r0, [pc, #1728]	; 1176c <__assert_fail@plt+0x704>
   110a8:	bl	10e94 <textdomain@plt>
   110ac:	ldr	r0, [pc, #1724]	; 11770 <__assert_fail@plt+0x708>
   110b0:	bl	16340 <__assert_fail@plt+0x52d8>
   110b4:	ldr	r8, [pc, #1720]	; 11774 <__assert_fail@plt+0x70c>
   110b8:	ldr	r2, [pc, #1720]	; 11778 <__assert_fail@plt+0x710>
   110bc:	ldr	r7, [pc, #1720]	; 1177c <__assert_fail@plt+0x714>
   110c0:	ldr	fp, [pc, #1720]	; 11780 <__assert_fail@plt+0x718>
   110c4:	ldr	sl, [pc, #1720]	; 11784 <__assert_fail@plt+0x71c>
   110c8:	mov	r9, #1
   110cc:	mov	r3, #0
   110d0:	strb	r3, [r2, #8]
   110d4:	mov	r4, #0
   110d8:	str	r4, [sp]
   110dc:	mov	r3, r8
   110e0:	mov	r2, r7
   110e4:	mov	r1, r5
   110e8:	mov	r0, r6
   110ec:	bl	10f30 <getopt_long@plt>
   110f0:	cmn	r0, #1
   110f4:	beq	11578 <__assert_fail@plt+0x510>
   110f8:	add	r0, r0, #3
   110fc:	cmp	r0, #122	; 0x7a
   11100:	ldrls	pc, [pc, r0, lsl #2]
   11104:	b	1153c <__assert_fail@plt+0x4d4>
   11108:	strdeq	r1, [r1], -r4
   1110c:	andeq	r1, r1, r4, asr r7
   11110:	andeq	r1, r1, ip, lsr r5
   11114:	andeq	r1, r1, ip, lsr r5
   11118:	andeq	r1, r1, ip, lsr r5
   1111c:	andeq	r1, r1, ip, lsr r5
   11120:	andeq	r1, r1, ip, lsr r5
   11124:	andeq	r1, r1, ip, lsr r5
   11128:	andeq	r1, r1, ip, lsr r5
   1112c:	andeq	r1, r1, ip, lsr r5
   11130:	andeq	r1, r1, ip, lsr r5
   11134:	andeq	r1, r1, ip, lsr r5
   11138:	andeq	r1, r1, ip, lsr r5
   1113c:	andeq	r1, r1, ip, lsr r5
   11140:	andeq	r1, r1, ip, lsr r5
   11144:	andeq	r1, r1, ip, lsr r5
   11148:	andeq	r1, r1, ip, lsr r5
   1114c:	andeq	r1, r1, ip, lsr r5
   11150:	andeq	r1, r1, ip, lsr r5
   11154:	andeq	r1, r1, ip, lsr r5
   11158:	andeq	r1, r1, ip, lsr r5
   1115c:	andeq	r1, r1, ip, lsr r5
   11160:	andeq	r1, r1, ip, lsr r5
   11164:	andeq	r1, r1, ip, lsr r5
   11168:	andeq	r1, r1, ip, lsr r5
   1116c:	andeq	r1, r1, ip, lsr r5
   11170:	andeq	r1, r1, ip, lsr r5
   11174:	andeq	r1, r1, ip, lsr r5
   11178:	andeq	r1, r1, ip, lsr r5
   1117c:	andeq	r1, r1, ip, lsr r5
   11180:	andeq	r1, r1, ip, lsr r5
   11184:	andeq	r1, r1, ip, lsr r5
   11188:	andeq	r1, r1, ip, lsr r5
   1118c:	andeq	r1, r1, ip, lsr r5
   11190:	andeq	r1, r1, ip, lsr r5
   11194:	andeq	r1, r1, ip, lsr r5
   11198:	andeq	r1, r1, ip, lsr r5
   1119c:	andeq	r1, r1, ip, lsr r5
   111a0:	andeq	r1, r1, ip, lsr r5
   111a4:	andeq	r1, r1, ip, lsr r5
   111a8:	andeq	r1, r1, ip, lsr r5
   111ac:	andeq	r1, r1, ip, lsr r5
   111b0:	andeq	r1, r1, ip, lsr r5
   111b4:	andeq	r1, r1, ip, lsr r5
   111b8:	andeq	r1, r1, ip, lsr r5
   111bc:	andeq	r1, r1, ip, lsr r5
   111c0:	andeq	r1, r1, ip, lsr r5
   111c4:	andeq	r1, r1, ip, lsr r5
   111c8:	andeq	r1, r1, ip, lsr r5
   111cc:	andeq	r1, r1, ip, lsr r5
   111d0:	andeq	r1, r1, ip, lsr r5
   111d4:	andeq	r1, r1, ip, lsr r5
   111d8:	andeq	r1, r1, ip, lsr r5
   111dc:	andeq	r1, r1, ip, lsr r5
   111e0:	andeq	r1, r1, ip, lsr r5
   111e4:	andeq	r1, r1, ip, lsr r5
   111e8:	andeq	r1, r1, ip, lsr r5
   111ec:	andeq	r1, r1, ip, lsr r5
   111f0:	andeq	r1, r1, ip, lsr r5
   111f4:	andeq	r1, r1, ip, lsr r5
   111f8:	andeq	r1, r1, ip, lsr r5
   111fc:	andeq	r1, r1, ip, lsr r5
   11200:	andeq	r1, r1, ip, lsr r5
   11204:	andeq	r1, r1, ip, lsr r5
   11208:	andeq	r1, r1, ip, lsr r5
   1120c:	andeq	r1, r1, ip, lsr r5
   11210:	andeq	r1, r1, ip, lsr r5
   11214:	andeq	r1, r1, ip, lsr r5
   11218:	andeq	r1, r1, ip, lsr r5
   1121c:	andeq	r1, r1, ip, lsr r5
   11220:	andeq	r1, r1, ip, lsr r5
   11224:	andeq	r1, r1, ip, lsr r5
   11228:	andeq	r1, r1, ip, lsr r5
   1122c:	andeq	r1, r1, ip, lsr r5
   11230:	andeq	r1, r1, ip, lsr r5
   11234:	andeq	r1, r1, ip, lsr r5
   11238:	andeq	r1, r1, ip, lsr r5
   1123c:	andeq	r1, r1, ip, lsr r5
   11240:	andeq	r1, r1, ip, lsr r5
   11244:	andeq	r1, r1, ip, lsr r5
   11248:	andeq	r1, r1, ip, lsr r5
   1124c:	andeq	r1, r1, ip, lsr r5
   11250:	andeq	r1, r1, ip, lsr r5
   11254:	andeq	r1, r1, ip, lsr r5
   11258:	andeq	r1, r1, ip, lsr r5
   1125c:	andeq	r1, r1, ip, lsr r5
   11260:	andeq	r1, r1, ip, lsr r5
   11264:	andeq	r1, r1, ip, lsr r5
   11268:	andeq	r1, r1, ip, lsr r5
   1126c:	andeq	r1, r1, ip, lsr r5
   11270:	andeq	r1, r1, ip, lsr r5
   11274:	andeq	r1, r1, ip, lsr r5
   11278:	andeq	r1, r1, ip, lsr r5
   1127c:	andeq	r1, r1, ip, lsr r5
   11280:	andeq	r1, r1, ip, lsr r5
   11284:	andeq	r1, r1, ip, lsr r5
   11288:	andeq	r1, r1, ip, lsr r5
   1128c:	andeq	r1, r1, ip, lsr r5
   11290:	andeq	r1, r1, ip, lsr r5
   11294:	andeq	r1, r1, ip, lsr r5
   11298:	andeq	r1, r1, ip, lsr r5
   1129c:	ldrdeq	r1, [r1], -r0
   112a0:	andeq	r1, r1, ip, lsr r5
   112a4:	andeq	r1, r1, r0, lsr r5
   112a8:	andeq	r1, r1, ip, lsr r5
   112ac:	andeq	r1, r1, ip, lsr #9
   112b0:	andeq	r1, r1, ip, lsr r5
   112b4:	andeq	r1, r1, r0, ror #8
   112b8:	andeq	r1, r1, r4, lsl r4
   112bc:	andeq	r1, r1, ip, lsr r5
   112c0:	andeq	r1, r1, ip, lsr r5
   112c4:	andeq	r1, r1, r8, asr #7
   112c8:	andeq	r1, r1, ip, lsr r5
   112cc:	andeq	r1, r1, r4, lsr #7
   112d0:	andeq	r1, r1, ip, lsr r5
   112d4:	muleq	r1, r8, r3
   112d8:	andeq	r1, r1, ip, lsr r5
   112dc:	andeq	r1, r1, ip, lsr r5
   112e0:	andeq	r1, r1, ip, lsl #7
   112e4:	andeq	r1, r1, ip, lsr r5
   112e8:	andeq	r1, r1, ip, lsr r5
   112ec:	andeq	r1, r1, r0, asr #6
   112f0:	strdeq	r1, [r1], -r4
   112f4:	mov	r2, #5
   112f8:	ldr	r1, [pc, #1160]	; 11788 <__assert_fail@plt+0x720>
   112fc:	mov	r0, #0
   11300:	ldr	r4, [sl]
   11304:	bl	10e70 <dcgettext@plt>
   11308:	ldr	r1, [pc, #1108]	; 11764 <__assert_fail@plt+0x6fc>
   1130c:	mvn	r2, #-2147483648	; 0x80000000
   11310:	mov	r3, #0
   11314:	str	r1, [sp, #8]
   11318:	mov	r1, #0
   1131c:	strd	r2, [sp]
   11320:	str	r1, [sp, #16]
   11324:	mov	r2, #1
   11328:	mov	r3, #0
   1132c:	str	r0, [sp, #12]
   11330:	mov	r0, r4
   11334:	bl	15078 <__assert_fail@plt+0x4010>
   11338:	str	r0, [fp]
   1133c:	b	110d4 <__assert_fail@plt+0x6c>
   11340:	mov	r2, #5
   11344:	ldr	r1, [pc, #1088]	; 1178c <__assert_fail@plt+0x724>
   11348:	mov	r0, #0
   1134c:	ldr	r4, [sl]
   11350:	bl	10e70 <dcgettext@plt>
   11354:	ldr	r1, [pc, #1032]	; 11764 <__assert_fail@plt+0x6fc>
   11358:	mvn	r2, #0
   1135c:	mvn	r3, #-2147483648	; 0x80000000
   11360:	str	r1, [sp, #8]
   11364:	mov	r1, #0
   11368:	strd	r2, [sp]
   1136c:	str	r1, [sp, #16]
   11370:	mov	r2, #0
   11374:	mov	r3, #-2147483648	; 0x80000000
   11378:	str	r0, [sp, #12]
   1137c:	mov	r0, r4
   11380:	bl	15078 <__assert_fail@plt+0x4010>
   11384:	strd	r0, [fp, #48]	; 0x30
   11388:	b	110d4 <__assert_fail@plt+0x6c>
   1138c:	ldr	r3, [sl]
   11390:	str	r3, [fp, #8]
   11394:	b	110d4 <__assert_fail@plt+0x6c>
   11398:	mov	r3, #0
   1139c:	strb	r3, [fp, #32]
   113a0:	b	110d4 <__assert_fail@plt+0x6c>
   113a4:	ldr	r4, [sl]
   113a8:	ldr	r1, [pc, #992]	; 11790 <__assert_fail@plt+0x728>
   113ac:	mov	r0, r4
   113b0:	bl	10df8 <strcmp@plt>
   113b4:	cmp	r0, #0
   113b8:	bne	11544 <__assert_fail@plt+0x4dc>
   113bc:	ldr	r3, [pc, #976]	; 11794 <__assert_fail@plt+0x72c>
   113c0:	str	r3, [fp, #4]
   113c4:	b	110d4 <__assert_fail@plt+0x6c>
   113c8:	mov	r2, #5
   113cc:	ldr	r1, [pc, #964]	; 11798 <__assert_fail@plt+0x730>
   113d0:	mov	r0, #0
   113d4:	ldr	r4, [sl]
   113d8:	bl	10e70 <dcgettext@plt>
   113dc:	ldr	r1, [pc, #896]	; 11764 <__assert_fail@plt+0x6fc>
   113e0:	mvn	r2, #0
   113e4:	mvn	r3, #-2147483648	; 0x80000000
   113e8:	str	r1, [sp, #8]
   113ec:	mov	r1, #0
   113f0:	strd	r2, [sp]
   113f4:	str	r1, [sp, #16]
   113f8:	mov	r2, #1
   113fc:	mov	r3, #0
   11400:	str	r0, [sp, #12]
   11404:	mov	r0, r4
   11408:	bl	15078 <__assert_fail@plt+0x4010>
   1140c:	strd	r0, [fp, #56]	; 0x38
   11410:	b	110d4 <__assert_fail@plt+0x6c>
   11414:	mov	r2, #5
   11418:	ldr	r1, [pc, #892]	; 1179c <__assert_fail@plt+0x734>
   1141c:	mov	r0, #0
   11420:	ldr	r4, [sl]
   11424:	bl	10e70 <dcgettext@plt>
   11428:	ldr	r1, [pc, #820]	; 11764 <__assert_fail@plt+0x6fc>
   1142c:	mvn	r2, #0
   11430:	mvn	r3, #-2147483648	; 0x80000000
   11434:	str	r1, [sp, #8]
   11438:	mov	r1, #0
   1143c:	strd	r2, [sp]
   11440:	str	r1, [sp, #16]
   11444:	mov	r2, #1
   11448:	mov	r3, #0
   1144c:	str	r0, [sp, #12]
   11450:	mov	r0, r4
   11454:	bl	15078 <__assert_fail@plt+0x4010>
   11458:	strd	r0, [fp, #16]
   1145c:	b	110d4 <__assert_fail@plt+0x6c>
   11460:	ldr	r2, [pc, #824]	; 117a0 <__assert_fail@plt+0x738>
   11464:	ldr	r0, [pc, #824]	; 117a4 <__assert_fail@plt+0x73c>
   11468:	sub	r1, r2, #44	; 0x2c
   1146c:	bl	118ec <__assert_fail@plt+0x884>
   11470:	subs	r4, r0, #0
   11474:	moveq	r2, #5
   11478:	ldreq	r1, [pc, #808]	; 117a8 <__assert_fail@plt+0x740>
   1147c:	bne	110d4 <__assert_fail@plt+0x6c>
   11480:	bl	10e70 <dcgettext@plt>
   11484:	mov	r9, r0
   11488:	ldr	r0, [sl]
   1148c:	bl	1470c <__assert_fail@plt+0x36a4>
   11490:	mov	r2, r9
   11494:	mov	r1, r4
   11498:	mov	r9, r4
   1149c:	mov	r3, r0
   114a0:	mov	r0, r4
   114a4:	bl	10ef4 <error@plt>
   114a8:	b	110d4 <__assert_fail@plt+0x6c>
   114ac:	ldr	r2, [pc, #760]	; 117ac <__assert_fail@plt+0x744>
   114b0:	ldr	r0, [pc, #760]	; 117b0 <__assert_fail@plt+0x748>
   114b4:	sub	r1, r2, #620	; 0x26c
   114b8:	bl	118ec <__assert_fail@plt+0x884>
   114bc:	subs	r4, r0, #0
   114c0:	moveq	r2, #5
   114c4:	ldreq	r1, [pc, #744]	; 117b4 <__assert_fail@plt+0x74c>
   114c8:	bne	110d4 <__assert_fail@plt+0x6c>
   114cc:	b	11480 <__assert_fail@plt+0x418>
   114d0:	ldr	r2, [pc, #736]	; 117b8 <__assert_fail@plt+0x750>
   114d4:	ldr	r0, [pc, #736]	; 117bc <__assert_fail@plt+0x754>
   114d8:	sub	r1, r2, #332	; 0x14c
   114dc:	bl	118ec <__assert_fail@plt+0x884>
   114e0:	subs	r4, r0, #0
   114e4:	bne	110d4 <__assert_fail@plt+0x6c>
   114e8:	mov	r2, #5
   114ec:	ldr	r1, [pc, #716]	; 117c0 <__assert_fail@plt+0x758>
   114f0:	b	11480 <__assert_fail@plt+0x418>
   114f4:	ldr	r3, [pc, #712]	; 117c4 <__assert_fail@plt+0x75c>
   114f8:	ldr	r0, [pc, #712]	; 117c8 <__assert_fail@plt+0x760>
   114fc:	ldr	r1, [pc, #712]	; 117cc <__assert_fail@plt+0x764>
   11500:	ldr	r2, [pc, #712]	; 117d0 <__assert_fail@plt+0x768>
   11504:	mov	r4, #0
   11508:	ldr	r0, [r0]
   1150c:	ldr	r3, [r3]
   11510:	str	r1, [sp, #4]
   11514:	str	r2, [sp]
   11518:	str	r4, [sp, #8]
   1151c:	ldr	r2, [pc, #688]	; 117d4 <__assert_fail@plt+0x76c>
   11520:	ldr	r1, [pc, #688]	; 117d8 <__assert_fail@plt+0x770>
   11524:	bl	14b78 <__assert_fail@plt+0x3b10>
   11528:	mov	r0, r4
   1152c:	bl	10f48 <exit@plt>
   11530:	ldr	r3, [sl]
   11534:	str	r3, [fp, #24]
   11538:	b	110d4 <__assert_fail@plt+0x6c>
   1153c:	mov	r9, #0
   11540:	b	110d8 <__assert_fail@plt+0x70>
   11544:	ldr	r1, [pc, #656]	; 117dc <__assert_fail@plt+0x774>
   11548:	mov	r0, r4
   1154c:	bl	10df8 <strcmp@plt>
   11550:	cmp	r0, #0
   11554:	beq	116d8 <__assert_fail@plt+0x670>
   11558:	mov	r0, r4
   1155c:	ldr	r1, [pc, #636]	; 117e0 <__assert_fail@plt+0x778>
   11560:	bl	10df8 <strcmp@plt>
   11564:	cmp	r0, #0
   11568:	bne	1170c <__assert_fail@plt+0x6a4>
   1156c:	ldr	r3, [pc, #624]	; 117e4 <__assert_fail@plt+0x77c>
   11570:	str	r3, [fp, #4]
   11574:	b	110d4 <__assert_fail@plt+0x6c>
   11578:	cmp	r9, #0
   1157c:	beq	1175c <__assert_fail@plt+0x6f4>
   11580:	ldr	r8, [pc, #504]	; 11780 <__assert_fail@plt+0x718>
   11584:	ldr	r7, [pc, #604]	; 117e8 <__assert_fail@plt+0x780>
   11588:	ldr	r0, [r8, #24]
   1158c:	bl	10f54 <strlen@plt>
   11590:	ldr	r2, [pc, #480]	; 11778 <__assert_fail@plt+0x710>
   11594:	lsl	fp, r0, #1
   11598:	add	r3, fp, r0
   1159c:	mov	sl, r0
   115a0:	add	r0, r3, #1
   115a4:	str	r3, [r2, #24]
   115a8:	bl	14c7c <__assert_fail@plt+0x3c14>
   115ac:	ldr	r2, [pc, #452]	; 11778 <__assert_fail@plt+0x710>
   115b0:	ldr	r3, [r8, #24]
   115b4:	mov	r1, r3
   115b8:	str	r3, [sp, #28]
   115bc:	str	r0, [r2, #28]
   115c0:	bl	10e64 <stpcpy@plt>
   115c4:	ldr	r3, [sp, #28]
   115c8:	mov	r1, r3
   115cc:	bl	10e64 <stpcpy@plt>
   115d0:	ldr	r3, [sp, #28]
   115d4:	mov	r1, r3
   115d8:	bl	10ed0 <strcpy@plt>
   115dc:	ldr	r2, [pc, #404]	; 11778 <__assert_fail@plt+0x710>
   115e0:	add	r0, fp, #1
   115e4:	str	fp, [r2, #32]
   115e8:	bl	14c7c <__assert_fail@plt+0x3c14>
   115ec:	ldr	fp, [r8, #24]
   115f0:	ldr	r2, [pc, #384]	; 11778 <__assert_fail@plt+0x710>
   115f4:	mov	r1, fp
   115f8:	str	r0, [r2, #36]	; 0x24
   115fc:	bl	10e64 <stpcpy@plt>
   11600:	mov	r1, fp
   11604:	bl	10ed0 <strcpy@plt>
   11608:	ldr	r2, [pc, #360]	; 11778 <__assert_fail@plt+0x710>
   1160c:	add	r0, sl, #1
   11610:	mov	fp, r2
   11614:	str	sl, [r2, #40]	; 0x28
   11618:	bl	14c7c <__assert_fail@plt+0x3c14>
   1161c:	ldr	r1, [r8, #24]
   11620:	str	r0, [fp, #44]	; 0x2c
   11624:	bl	10ed0 <strcpy@plt>
   11628:	add	r0, fp, #12
   1162c:	bl	12390 <__assert_fail@plt+0x1328>
   11630:	ldr	r0, [r8, #8]
   11634:	bl	10f54 <strlen@plt>
   11638:	mov	sl, r0
   1163c:	ldr	r0, [r8]
   11640:	add	r0, r0, #1
   11644:	add	r0, r0, sl
   11648:	bl	14c7c <__assert_fail@plt+0x3c14>
   1164c:	ldr	r2, [r8]
   11650:	mov	r1, #32
   11654:	add	sl, sl, r2
   11658:	mov	r2, sl
   1165c:	str	r0, [fp, #160]	; 0xa0
   11660:	bl	10f90 <memset@plt>
   11664:	ldr	r2, [r7]
   11668:	ldr	ip, [r8, #36]	; 0x24
   1166c:	cmp	r2, r6
   11670:	str	ip, [fp, #48]	; 0x30
   11674:	mov	r3, r0
   11678:	ldrd	r0, [r8, #48]	; 0x30
   1167c:	strb	r4, [r3, sl]
   11680:	add	r3, fp, #88	; 0x58
   11684:	strd	r0, [fp]
   11688:	str	r3, [fp, #52]	; 0x34
   1168c:	beq	11744 <__assert_fail@plt+0x6dc>
   11690:	bge	116b8 <__assert_fail@plt+0x650>
   11694:	ldr	r0, [r5, r2, lsl #2]
   11698:	bl	11a78 <__assert_fail@plt+0xa10>
   1169c:	ldr	r2, [r7]
   116a0:	add	r2, r2, #1
   116a4:	cmp	r2, r6
   116a8:	str	r2, [r7]
   116ac:	and	r9, r9, r0
   116b0:	uxtb	r9, r9
   116b4:	blt	11694 <__assert_fail@plt+0x62c>
   116b8:	ldr	r3, [pc, #184]	; 11778 <__assert_fail@plt+0x710>
   116bc:	ldrb	r3, [r3, #8]
   116c0:	cmp	r3, #0
   116c4:	bne	116e4 <__assert_fail@plt+0x67c>
   116c8:	eor	r0, r9, #1
   116cc:	uxtb	r0, r0
   116d0:	add	sp, sp, #36	; 0x24
   116d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116d8:	ldr	r3, [pc, #268]	; 117ec <__assert_fail@plt+0x784>
   116dc:	str	r3, [fp, #4]
   116e0:	b	110d4 <__assert_fail@plt+0x6c>
   116e4:	ldr	r3, [pc, #260]	; 117f0 <__assert_fail@plt+0x788>
   116e8:	ldr	r0, [r3]
   116ec:	bl	15b74 <__assert_fail@plt+0x4b0c>
   116f0:	cmn	r0, #1
   116f4:	bne	116c8 <__assert_fail@plt+0x660>
   116f8:	bl	10f78 <__errno_location@plt>
   116fc:	ldr	r2, [pc, #240]	; 117f4 <__assert_fail@plt+0x78c>
   11700:	ldr	r1, [r0]
   11704:	mov	r0, #1
   11708:	bl	10ef4 <error@plt>
   1170c:	mov	r2, #5
   11710:	ldr	r1, [pc, #224]	; 117f8 <__assert_fail@plt+0x790>
   11714:	mov	r0, #0
   11718:	bl	10e70 <dcgettext@plt>
   1171c:	mov	r9, #0
   11720:	mov	r4, r0
   11724:	ldr	r0, [sl]
   11728:	bl	1470c <__assert_fail@plt+0x36a4>
   1172c:	mov	r1, #0
   11730:	mov	r2, r4
   11734:	mov	r3, r0
   11738:	mov	r0, r1
   1173c:	bl	10ef4 <error@plt>
   11740:	b	110d4 <__assert_fail@plt+0x6c>
   11744:	ldr	r0, [pc, #168]	; 117f4 <__assert_fail@plt+0x78c>
   11748:	bl	11a78 <__assert_fail@plt+0xa10>
   1174c:	mov	r9, r0
   11750:	b	116b8 <__assert_fail@plt+0x650>
   11754:	mov	r0, #0
   11758:	bl	11ea0 <__assert_fail@plt+0xe38>
   1175c:	mov	r0, #1
   11760:	bl	11ea0 <__assert_fail@plt+0xe38>
   11764:	andeq	r6, r1, r8, lsr sl
   11768:	andeq	r6, r1, ip, lsl #25
   1176c:	andeq	r6, r1, r0, ror #23
   11770:	andeq	r2, r1, r0, lsl #5
   11774:			; <UNDEFINED> instruction: 0x000163bc
   11778:	andeq	r8, r2, r8, lsr #3
   1177c:	andeq	r6, r1, r0, ror #27
   11780:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   11784:	andeq	r8, r2, r0, lsr #3
   11788:	andeq	r6, r1, r0, ror sp
   1178c:	andeq	r6, r1, ip, lsl #26
   11790:	muleq	r1, r0, sp
   11794:	muleq	r1, ip, r3
   11798:	andeq	r6, r1, ip, asr #26
   1179c:	andeq	r6, r1, ip, lsr #26
   117a0:	andeq	r8, r2, ip, asr #4
   117a4:	andeq	r8, r2, r0, lsr #2
   117a8:	andeq	r6, r1, r0, lsr #25
   117ac:	andeq	r8, r2, ip, asr #8
   117b0:	andeq	r8, r2, r4, lsl r1
   117b4:	andeq	r6, r1, r8, ror #25
   117b8:	andeq	r8, r2, ip, asr #6
   117bc:	andeq	r8, r2, ip, lsl r1
   117c0:	andeq	r6, r1, r4, asr #25
   117c4:	andeq	r8, r2, r8, lsr r1
   117c8:	muleq	r2, ip, r1
   117cc:	andeq	r6, r1, r0, asr #27
   117d0:	ldrdeq	r6, [r1], -r0
   117d4:	ldrdeq	r6, [r1], -ip
   117d8:	andeq	r6, r1, r0, ror #9
   117dc:	muleq	r1, r4, sp
   117e0:	muleq	r1, r8, sp
   117e4:			; <UNDEFINED> instruction: 0x000163b0
   117e8:	andeq	r8, r2, r8, lsl #3
   117ec:	andeq	r6, r1, r8, lsr #7
   117f0:	muleq	r2, r8, r1
   117f4:			; <UNDEFINED> instruction: 0x000164b8
   117f8:	muleq	r1, ip, sp
   117fc:	mov	fp, #0
   11800:	mov	lr, #0
   11804:	pop	{r1}		; (ldr r1, [sp], #4)
   11808:	mov	r2, sp
   1180c:	push	{r2}		; (str r2, [sp, #-4]!)
   11810:	push	{r0}		; (str r0, [sp, #-4]!)
   11814:	ldr	ip, [pc, #16]	; 1182c <__assert_fail@plt+0x7c4>
   11818:	push	{ip}		; (str ip, [sp, #-4]!)
   1181c:	ldr	r0, [pc, #12]	; 11830 <__assert_fail@plt+0x7c8>
   11820:	ldr	r3, [pc, #12]	; 11834 <__assert_fail@plt+0x7cc>
   11824:	bl	10f0c <__libc_start_main@plt>
   11828:	bl	1105c <abort@plt>
   1182c:	andeq	r6, r1, ip, lsr r3
   11830:	andeq	r1, r1, r4, ror r0
   11834:	ldrdeq	r6, [r1], -ip
   11838:	ldr	r3, [pc, #20]	; 11854 <__assert_fail@plt+0x7ec>
   1183c:	ldr	r2, [pc, #20]	; 11858 <__assert_fail@plt+0x7f0>
   11840:	add	r3, pc, r3
   11844:	ldr	r2, [r3, r2]
   11848:	cmp	r2, #0
   1184c:	bxeq	lr
   11850:	b	10f24 <__gmon_start__@plt>
   11854:			; <UNDEFINED> instruction: 0x000167b8
   11858:	andeq	r0, r0, ip, ror #1
   1185c:	ldr	r0, [pc, #24]	; 1187c <__assert_fail@plt+0x814>
   11860:	ldr	r3, [pc, #24]	; 11880 <__assert_fail@plt+0x818>
   11864:	cmp	r3, r0
   11868:	bxeq	lr
   1186c:	ldr	r3, [pc, #16]	; 11884 <__assert_fail@plt+0x81c>
   11870:	cmp	r3, #0
   11874:	bxeq	lr
   11878:	bx	r3
   1187c:	andeq	r8, r2, r0, lsl #3
   11880:	andeq	r8, r2, r0, lsl #3
   11884:	andeq	r0, r0, r0
   11888:	ldr	r0, [pc, #36]	; 118b4 <__assert_fail@plt+0x84c>
   1188c:	ldr	r1, [pc, #36]	; 118b8 <__assert_fail@plt+0x850>
   11890:	sub	r1, r1, r0
   11894:	asr	r1, r1, #2
   11898:	add	r1, r1, r1, lsr #31
   1189c:	asrs	r1, r1, #1
   118a0:	bxeq	lr
   118a4:	ldr	r3, [pc, #16]	; 118bc <__assert_fail@plt+0x854>
   118a8:	cmp	r3, #0
   118ac:	bxeq	lr
   118b0:	bx	r3
   118b4:	andeq	r8, r2, r0, lsl #3
   118b8:	andeq	r8, r2, r0, lsl #3
   118bc:	andeq	r0, r0, r0
   118c0:	push	{r4, lr}
   118c4:	ldr	r4, [pc, #24]	; 118e4 <__assert_fail@plt+0x87c>
   118c8:	ldrb	r3, [r4]
   118cc:	cmp	r3, #0
   118d0:	popne	{r4, pc}
   118d4:	bl	1185c <__assert_fail@plt+0x7f4>
   118d8:	mov	r3, #1
   118dc:	strb	r3, [r4]
   118e0:	pop	{r4, pc}
   118e4:	andeq	r8, r2, r4, lsr #3
   118e8:	b	11888 <__assert_fail@plt+0x820>
   118ec:	push	{r4, r5, r6, lr}
   118f0:	ldr	lr, [pc, #232]	; 119e0 <__assert_fail@plt+0x978>
   118f4:	ldr	ip, [lr]
   118f8:	ldrb	r3, [ip]
   118fc:	sub	r3, r3, #97	; 0x61
   11900:	cmp	r3, #19
   11904:	ldrls	pc, [pc, r3, lsl #2]
   11908:	b	119c4 <__assert_fail@plt+0x95c>
   1190c:			; <UNDEFINED> instruction: 0x000119b8
   11910:	andeq	r1, r1, r4, asr #19
   11914:	andeq	r1, r1, r4, asr #19
   11918:	andeq	r1, r1, r4, asr #19
   1191c:	andeq	r1, r1, r4, asr #19
   11920:	andeq	r1, r1, r4, asr #19
   11924:	andeq	r1, r1, r4, asr #19
   11928:	andeq	r1, r1, r4, asr #19
   1192c:	andeq	r1, r1, r4, asr #19
   11930:	andeq	r1, r1, r4, asr #19
   11934:	andeq	r1, r1, r4, asr #19
   11938:	andeq	r1, r1, r4, asr #19
   1193c:	andeq	r1, r1, r4, asr #19
   11940:			; <UNDEFINED> instruction: 0x000119b8
   11944:	andeq	r1, r1, r4, asr #19
   11948:	andeq	r1, r1, ip, asr r9
   1194c:	andeq	r1, r1, r4, asr #19
   11950:	andeq	r1, r1, r4, asr #19
   11954:	andeq	r1, r1, r4, asr #19
   11958:			; <UNDEFINED> instruction: 0x000119b8
   1195c:	add	r3, ip, #1
   11960:	mov	r4, r1
   11964:	str	r3, [lr]
   11968:	str	ip, [r0]
   1196c:	ldr	r3, [pc, #112]	; 119e4 <__assert_fail@plt+0x97c>
   11970:	ldr	r6, [lr]
   11974:	mov	r5, #0
   11978:	ldr	r1, [pc, #104]	; 119e8 <__assert_fail@plt+0x980>
   1197c:	str	r2, [r4, #16]
   11980:	str	r5, [r4]
   11984:	mov	r0, r6
   11988:	str	r5, [r4, #4]
   1198c:	str	r5, [r4, #20]
   11990:	str	r1, [r3]
   11994:	bl	10f54 <strlen@plt>
   11998:	mov	r2, r4
   1199c:	mov	r1, r0
   119a0:	mov	r0, r6
   119a4:	bl	11044 <re_compile_pattern@plt>
   119a8:	cmp	r0, #0
   119ac:	bne	119cc <__assert_fail@plt+0x964>
   119b0:	mov	r0, #1
   119b4:	pop	{r4, r5, r6, pc}
   119b8:	str	ip, [r0]
   119bc:	mov	r0, #1
   119c0:	pop	{r4, r5, r6, pc}
   119c4:	mov	r0, #0
   119c8:	pop	{r4, r5, r6, pc}
   119cc:	mov	r3, r0
   119d0:	mov	r1, r5
   119d4:	ldr	r2, [pc, #16]	; 119ec <__assert_fail@plt+0x984>
   119d8:	mov	r0, #1
   119dc:	bl	10ef4 <error@plt>
   119e0:	andeq	r8, r2, r0, lsr #3
   119e4:	muleq	r2, r4, r1
   119e8:	andeq	r0, r0, r6, asr #5
   119ec:	andeq	r6, r1, r0, asr #25
   119f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   119f4:	sub	sp, sp, #20
   119f8:	ldr	r9, [pc, #108]	; 11a6c <__assert_fail@plt+0xa04>
   119fc:	ldr	r8, [pc, #108]	; 11a70 <__assert_fail@plt+0xa08>
   11a00:	mov	r0, #1
   11a04:	ldrd	r6, [r9]
   11a08:	ldr	r3, [r8, #8]
   11a0c:	ldr	r2, [r8]
   11a10:	str	r3, [sp, #8]
   11a14:	ldr	r1, [r8, #4]
   11a18:	strd	r6, [sp]
   11a1c:	bl	10f9c <__printf_chk@plt>
   11a20:	ldrd	r2, [r9]
   11a24:	ldr	r1, [r8, #16]
   11a28:	ldr	r0, [r8, #20]
   11a2c:	adds	r4, r2, r1
   11a30:	adc	r5, r3, r0
   11a34:	cmp	r4, r2
   11a38:	sbcs	r3, r5, r3
   11a3c:	blt	11a4c <__assert_fail@plt+0x9e4>
   11a40:	strd	r4, [r9]
   11a44:	add	sp, sp, #20
   11a48:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11a4c:	mov	r2, #5
   11a50:	ldr	r1, [pc, #28]	; 11a74 <__assert_fail@plt+0xa0c>
   11a54:	mov	r0, #0
   11a58:	bl	10e70 <dcgettext@plt>
   11a5c:	mov	r1, #0
   11a60:	mov	r2, r0
   11a64:	mov	r0, #1
   11a68:	bl	10ef4 <error@plt>
   11a6c:	andeq	r8, r2, r8, lsr #3
   11a70:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   11a74:	andeq	r6, r1, r0, lsr #9
   11a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a7c:	sub	sp, sp, #28
   11a80:	ldr	r1, [pc, #1000]	; 11e70 <__assert_fail@plt+0xe08>
   11a84:	str	r0, [sp, #12]
   11a88:	bl	10df8 <strcmp@plt>
   11a8c:	cmp	r0, #0
   11a90:	bne	11d8c <__assert_fail@plt+0xd24>
   11a94:	ldr	r3, [pc, #984]	; 11e74 <__assert_fail@plt+0xe0c>
   11a98:	ldr	r4, [pc, #984]	; 11e78 <__assert_fail@plt+0xe10>
   11a9c:	mov	r2, #1
   11aa0:	ldr	sl, [r3]
   11aa4:	strb	r2, [r4, #8]
   11aa8:	mov	r1, #2
   11aac:	mov	r0, sl
   11ab0:	bl	1235c <__assert_fail@plt+0x12f4>
   11ab4:	ldr	r9, [pc, #960]	; 11e7c <__assert_fail@plt+0xe14>
   11ab8:	ldr	r8, [pc, #960]	; 11e80 <__assert_fail@plt+0xe18>
   11abc:	ldr	r5, [pc, #960]	; 11e84 <__assert_fail@plt+0xe1c>
   11ac0:	mov	r1, sl
   11ac4:	mov	r0, r9
   11ac8:	bl	12498 <__assert_fail@plt+0x1430>
   11acc:	cmp	r0, #0
   11ad0:	beq	11d3c <__assert_fail@plt+0xcd4>
   11ad4:	ldr	r6, [r4, #16]
   11ad8:	sub	r7, r6, #1
   11adc:	cmp	r7, #1
   11ae0:	bls	11afc <__assert_fail@plt+0xa94>
   11ae4:	ldr	fp, [r4, #20]
   11ae8:	ldr	r3, [r5, #24]
   11aec:	ldrb	r1, [fp]
   11af0:	ldrb	r2, [r3]
   11af4:	cmp	r1, r2
   11af8:	beq	11c2c <__assert_fail@plt+0xbc4>
   11afc:	ldr	r3, [r4, #48]	; 0x30
   11b00:	ldrb	r3, [r3]
   11b04:	sub	r3, r3, #97	; 0x61
   11b08:	cmp	r3, #19
   11b0c:	ldrls	pc, [pc, r3, lsl #2]
   11b10:	b	11b74 <__assert_fail@plt+0xb0c>
   11b14:	andeq	r1, r1, ip, lsl #23
   11b18:	andeq	r1, r1, r4, ror fp
   11b1c:	andeq	r1, r1, r4, ror fp
   11b20:	andeq	r1, r1, r4, ror fp
   11b24:	andeq	r1, r1, r4, ror fp
   11b28:	andeq	r1, r1, r4, ror fp
   11b2c:	andeq	r1, r1, r4, ror fp
   11b30:	andeq	r1, r1, r4, ror fp
   11b34:	andeq	r1, r1, r4, ror fp
   11b38:	andeq	r1, r1, r4, ror fp
   11b3c:	andeq	r1, r1, r4, ror fp
   11b40:	andeq	r1, r1, r4, ror fp
   11b44:	andeq	r1, r1, r4, ror fp
   11b48:	andeq	r1, r1, r8, lsl ip
   11b4c:	andeq	r1, r1, r4, ror fp
   11b50:	andeq	r1, r1, r8, ror #23
   11b54:	andeq	r1, r1, r4, ror fp
   11b58:	andeq	r1, r1, r4, ror fp
   11b5c:	andeq	r1, r1, r4, ror fp
   11b60:	andeq	r1, r1, r4, ror #22
   11b64:	cmp	r6, #1
   11b68:	bls	11c18 <__assert_fail@plt+0xbb0>
   11b6c:	bl	119f0 <__assert_fail@plt+0x988>
   11b70:	ldr	r6, [r4, #16]
   11b74:	mov	r2, r6
   11b78:	ldr	r3, [r8]
   11b7c:	mov	r1, #1
   11b80:	ldr	r0, [r4, #20]
   11b84:	bl	10e4c <fwrite_unlocked@plt>
   11b88:	b	11ac0 <__assert_fail@plt+0xa58>
   11b8c:	ldrd	r0, [r5, #56]	; 0x38
   11b90:	cmp	r0, #2
   11b94:	sbcs	r3, r1, #0
   11b98:	blt	11b6c <__assert_fail@plt+0xb04>
   11b9c:	cmp	r6, #1
   11ba0:	bhi	11bd0 <__assert_fail@plt+0xb68>
   11ba4:	ldr	r3, [r4, #152]	; 0x98
   11ba8:	ldr	r2, [r4, #156]	; 0x9c
   11bac:	adds	r3, r3, #1
   11bb0:	str	r3, [sp, #16]
   11bb4:	adc	r3, r2, #0
   11bb8:	str	r3, [sp, #20]
   11bbc:	ldrd	r2, [sp, #16]
   11bc0:	cmp	r1, r3
   11bc4:	cmpeq	r0, r2
   11bc8:	strd	r2, [r4, #152]	; 0x98
   11bcc:	bne	11c18 <__assert_fail@plt+0xbb0>
   11bd0:	bl	119f0 <__assert_fail@plt+0x988>
   11bd4:	mov	r2, #0
   11bd8:	mov	r3, #0
   11bdc:	ldr	r6, [r4, #16]
   11be0:	strd	r2, [r4, #152]	; 0x98
   11be4:	b	11b74 <__assert_fail@plt+0xb0c>
   11be8:	mov	r6, #0
   11bec:	str	r7, [sp]
   11bf0:	str	r6, [sp, #4]
   11bf4:	mov	r2, r7
   11bf8:	mov	r3, r6
   11bfc:	ldr	r1, [r4, #20]
   11c00:	ldr	r0, [r4, #52]	; 0x34
   11c04:	bl	10f6c <re_search@plt>
   11c08:	cmn	r0, #2
   11c0c:	beq	11e48 <__assert_fail@plt+0xde0>
   11c10:	cmn	r0, #1
   11c14:	bne	11b6c <__assert_fail@plt+0xb04>
   11c18:	ldr	r1, [r8]
   11c1c:	ldr	r0, [r4, #160]	; 0xa0
   11c20:	bl	10de0 <fputs_unlocked@plt>
   11c24:	ldr	r6, [r4, #16]
   11c28:	b	11b74 <__assert_fail@plt+0xb0c>
   11c2c:	ldrb	r3, [r3, #1]
   11c30:	ldrb	r2, [fp, #1]
   11c34:	cmp	r2, r3
   11c38:	bne	11afc <__assert_fail@plt+0xa94>
   11c3c:	ldr	r3, [r4, #24]
   11c40:	cmp	r7, r3
   11c44:	beq	11d04 <__assert_fail@plt+0xc9c>
   11c48:	ldr	r3, [r4, #32]
   11c4c:	cmp	r7, r3
   11c50:	beq	11ccc <__assert_fail@plt+0xc64>
   11c54:	ldr	r3, [r4, #40]	; 0x28
   11c58:	cmp	r7, r3
   11c5c:	bne	11afc <__assert_fail@plt+0xa94>
   11c60:	mov	r0, fp
   11c64:	mov	r2, r7
   11c68:	ldr	r1, [r4, #44]	; 0x2c
   11c6c:	bl	10e58 <memcmp@plt>
   11c70:	cmp	r0, #0
   11c74:	bne	11afc <__assert_fail@plt+0xa94>
   11c78:	ldrb	r2, [r5, #32]
   11c7c:	ldr	r3, [r5, #28]
   11c80:	ldr	r1, [pc, #512]	; 11e88 <__assert_fail@plt+0xe20>
   11c84:	cmp	r2, #0
   11c88:	str	r1, [r4, #52]	; 0x34
   11c8c:	str	r3, [r4, #48]	; 0x30
   11c90:	beq	11c9c <__assert_fail@plt+0xc34>
   11c94:	ldrd	r2, [r5, #48]	; 0x30
   11c98:	strd	r2, [r4]
   11c9c:	ldr	r0, [r8]
   11ca0:	ldr	r3, [r0, #20]
   11ca4:	ldr	r2, [r0, #24]
   11ca8:	cmp	r3, r2
   11cac:	addcc	r1, r3, #1
   11cb0:	movcc	r2, #10
   11cb4:	strcc	r1, [r0, #20]
   11cb8:	strbcc	r2, [r3]
   11cbc:	bcc	11ac0 <__assert_fail@plt+0xa58>
   11cc0:	mov	r1, #10
   11cc4:	bl	10fe4 <__overflow@plt>
   11cc8:	b	11ac0 <__assert_fail@plt+0xa58>
   11ccc:	mov	r2, r7
   11cd0:	ldr	r1, [r4, #36]	; 0x24
   11cd4:	mov	r0, fp
   11cd8:	bl	10e58 <memcmp@plt>
   11cdc:	cmp	r0, #0
   11ce0:	bne	11c54 <__assert_fail@plt+0xbec>
   11ce4:	ldrb	r2, [r5, #32]
   11ce8:	ldr	r3, [r5, #36]	; 0x24
   11cec:	ldr	r1, [pc, #408]	; 11e8c <__assert_fail@plt+0xe24>
   11cf0:	cmp	r2, #0
   11cf4:	str	r1, [r4, #52]	; 0x34
   11cf8:	str	r3, [r4, #48]	; 0x30
   11cfc:	bne	11c94 <__assert_fail@plt+0xc2c>
   11d00:	b	11c9c <__assert_fail@plt+0xc34>
   11d04:	mov	r2, r7
   11d08:	ldr	r1, [r4, #28]
   11d0c:	mov	r0, fp
   11d10:	bl	10e58 <memcmp@plt>
   11d14:	cmp	r0, #0
   11d18:	bne	11c48 <__assert_fail@plt+0xbe0>
   11d1c:	ldrb	r2, [r5, #32]
   11d20:	ldr	r3, [r5, #40]	; 0x28
   11d24:	ldr	r1, [pc, #356]	; 11e90 <__assert_fail@plt+0xe28>
   11d28:	cmp	r2, #0
   11d2c:	str	r1, [r4, #52]	; 0x34
   11d30:	str	r3, [r4, #48]	; 0x30
   11d34:	beq	11c9c <__assert_fail@plt+0xc34>
   11d38:	b	11c94 <__assert_fail@plt+0xc2c>
   11d3c:	mov	r6, r0
   11d40:	ldr	r0, [sl]
   11d44:	ands	r4, r0, #32
   11d48:	bne	11da8 <__assert_fail@plt+0xd40>
   11d4c:	ldr	r1, [pc, #284]	; 11e70 <__assert_fail@plt+0xe08>
   11d50:	ldr	r0, [sp, #12]
   11d54:	bl	10df8 <strcmp@plt>
   11d58:	cmp	r0, #0
   11d5c:	mov	r0, sl
   11d60:	beq	11d7c <__assert_fail@plt+0xd14>
   11d64:	bl	15b74 <__assert_fail@plt+0x4b0c>
   11d68:	cmn	r0, #1
   11d6c:	movne	r0, #1
   11d70:	beq	11de0 <__assert_fail@plt+0xd78>
   11d74:	add	sp, sp, #28
   11d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d7c:	bl	11014 <clearerr_unlocked@plt>
   11d80:	mov	r0, #1
   11d84:	add	sp, sp, #28
   11d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d8c:	ldr	r1, [pc, #256]	; 11e94 <__assert_fail@plt+0xe2c>
   11d90:	ldr	r0, [sp, #12]
   11d94:	bl	1102c <fopen64@plt>
   11d98:	subs	sl, r0, #0
   11d9c:	beq	11e14 <__assert_fail@plt+0xdac>
   11da0:	ldr	r4, [pc, #208]	; 11e78 <__assert_fail@plt+0xe10>
   11da4:	b	11aa8 <__assert_fail@plt+0xa40>
   11da8:	bl	10f78 <__errno_location@plt>
   11dac:	ldr	r2, [sp, #12]
   11db0:	mov	r1, #3
   11db4:	ldr	r4, [r0]
   11db8:	mov	r0, r6
   11dbc:	bl	14540 <__assert_fail@plt+0x34d8>
   11dc0:	mov	r1, r4
   11dc4:	ldr	r2, [pc, #204]	; 11e98 <__assert_fail@plt+0xe30>
   11dc8:	mov	r3, r0
   11dcc:	mov	r0, r6
   11dd0:	bl	10ef4 <error@plt>
   11dd4:	mov	r0, r6
   11dd8:	add	sp, sp, #28
   11ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11de0:	bl	10f78 <__errno_location@plt>
   11de4:	ldr	r2, [sp, #12]
   11de8:	mov	r1, #3
   11dec:	ldr	r5, [r0]
   11df0:	mov	r0, r4
   11df4:	bl	14540 <__assert_fail@plt+0x34d8>
   11df8:	mov	r1, r5
   11dfc:	ldr	r2, [pc, #148]	; 11e98 <__assert_fail@plt+0xe30>
   11e00:	mov	r3, r0
   11e04:	mov	r0, r4
   11e08:	bl	10ef4 <error@plt>
   11e0c:	mov	r0, r4
   11e10:	b	11d74 <__assert_fail@plt+0xd0c>
   11e14:	bl	10f78 <__errno_location@plt>
   11e18:	ldr	r2, [sp, #12]
   11e1c:	mov	r1, #3
   11e20:	ldr	r4, [r0]
   11e24:	mov	r0, sl
   11e28:	bl	14540 <__assert_fail@plt+0x34d8>
   11e2c:	mov	r1, r4
   11e30:	ldr	r2, [pc, #96]	; 11e98 <__assert_fail@plt+0xe30>
   11e34:	mov	r3, r0
   11e38:	mov	r0, sl
   11e3c:	bl	10ef4 <error@plt>
   11e40:	mov	r0, sl
   11e44:	b	11d74 <__assert_fail@plt+0xd0c>
   11e48:	bl	10f78 <__errno_location@plt>
   11e4c:	mov	r2, #5
   11e50:	ldr	r1, [pc, #68]	; 11e9c <__assert_fail@plt+0xe34>
   11e54:	ldr	r4, [r0]
   11e58:	mov	r0, r6
   11e5c:	bl	10e70 <dcgettext@plt>
   11e60:	mov	r1, r4
   11e64:	mov	r2, r0
   11e68:	mov	r0, #1
   11e6c:	bl	10ef4 <error@plt>
   11e70:			; <UNDEFINED> instruction: 0x000164b8
   11e74:	muleq	r2, r8, r1
   11e78:	andeq	r8, r2, r8, lsr #3
   11e7c:			; <UNDEFINED> instruction: 0x000281b4
   11e80:	muleq	r2, ip, r1
   11e84:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   11e88:	andeq	r8, r2, r0, ror #3
   11e8c:	andeq	r8, r2, r0, lsl #4
   11e90:	andeq	r8, r2, r0, lsr #4
   11e94:	andeq	r6, r1, r8, lsr #30
   11e98:	andeq	r6, r1, r0, asr #25
   11e9c:			; <UNDEFINED> instruction: 0x000164bc
   11ea0:	ldr	r3, [pc, #840]	; 121f0 <__assert_fail@plt+0x1188>
   11ea4:	push	{r7, lr}
   11ea8:	sub	sp, sp, #64	; 0x40
   11eac:	ldr	r3, [r3]
   11eb0:	subs	r4, r0, #0
   11eb4:	str	r3, [sp, #60]	; 0x3c
   11eb8:	beq	11ef4 <__assert_fail@plt+0xe8c>
   11ebc:	ldr	r3, [pc, #816]	; 121f4 <__assert_fail@plt+0x118c>
   11ec0:	mov	r2, #5
   11ec4:	ldr	r1, [pc, #812]	; 121f8 <__assert_fail@plt+0x1190>
   11ec8:	mov	r0, #0
   11ecc:	ldr	r5, [r3]
   11ed0:	bl	10e70 <dcgettext@plt>
   11ed4:	ldr	r3, [pc, #800]	; 121fc <__assert_fail@plt+0x1194>
   11ed8:	mov	r1, #1
   11edc:	ldr	r3, [r3]
   11ee0:	mov	r2, r0
   11ee4:	mov	r0, r5
   11ee8:	bl	10fb4 <__fprintf_chk@plt>
   11eec:	mov	r0, r4
   11ef0:	bl	10f48 <exit@plt>
   11ef4:	mov	r2, #5
   11ef8:	ldr	r1, [pc, #768]	; 12200 <__assert_fail@plt+0x1198>
   11efc:	bl	10e70 <dcgettext@plt>
   11f00:	ldr	r3, [pc, #756]	; 121fc <__assert_fail@plt+0x1194>
   11f04:	ldr	r5, [pc, #760]	; 12204 <__assert_fail@plt+0x119c>
   11f08:	ldr	r2, [r3]
   11f0c:	mov	r1, r0
   11f10:	mov	r0, #1
   11f14:	bl	10f9c <__printf_chk@plt>
   11f18:	mov	r2, #5
   11f1c:	ldr	r1, [pc, #740]	; 12208 <__assert_fail@plt+0x11a0>
   11f20:	mov	r0, r4
   11f24:	bl	10e70 <dcgettext@plt>
   11f28:	ldr	r1, [r5]
   11f2c:	bl	10de0 <fputs_unlocked@plt>
   11f30:	mov	r2, #5
   11f34:	ldr	r1, [pc, #720]	; 1220c <__assert_fail@plt+0x11a4>
   11f38:	mov	r0, r4
   11f3c:	bl	10e70 <dcgettext@plt>
   11f40:	ldr	r1, [r5]
   11f44:	bl	10de0 <fputs_unlocked@plt>
   11f48:	mov	r2, #5
   11f4c:	ldr	r1, [pc, #700]	; 12210 <__assert_fail@plt+0x11a8>
   11f50:	mov	r0, r4
   11f54:	bl	10e70 <dcgettext@plt>
   11f58:	ldr	r1, [r5]
   11f5c:	bl	10de0 <fputs_unlocked@plt>
   11f60:	mov	r2, #5
   11f64:	ldr	r1, [pc, #680]	; 12214 <__assert_fail@plt+0x11ac>
   11f68:	mov	r0, r4
   11f6c:	bl	10e70 <dcgettext@plt>
   11f70:	ldr	r1, [r5]
   11f74:	bl	10de0 <fputs_unlocked@plt>
   11f78:	mov	r2, #5
   11f7c:	ldr	r1, [pc, #660]	; 12218 <__assert_fail@plt+0x11b0>
   11f80:	mov	r0, r4
   11f84:	bl	10e70 <dcgettext@plt>
   11f88:	ldr	r1, [r5]
   11f8c:	bl	10de0 <fputs_unlocked@plt>
   11f90:	mov	r2, #5
   11f94:	ldr	r1, [pc, #640]	; 1221c <__assert_fail@plt+0x11b4>
   11f98:	mov	r0, r4
   11f9c:	bl	10e70 <dcgettext@plt>
   11fa0:	ldr	r1, [r5]
   11fa4:	bl	10de0 <fputs_unlocked@plt>
   11fa8:	mov	r2, #5
   11fac:	ldr	r1, [pc, #620]	; 12220 <__assert_fail@plt+0x11b8>
   11fb0:	mov	r0, r4
   11fb4:	bl	10e70 <dcgettext@plt>
   11fb8:	ldr	r1, [r5]
   11fbc:	bl	10de0 <fputs_unlocked@plt>
   11fc0:	mov	r2, #5
   11fc4:	ldr	r1, [pc, #600]	; 12224 <__assert_fail@plt+0x11bc>
   11fc8:	mov	r0, r4
   11fcc:	bl	10e70 <dcgettext@plt>
   11fd0:	ldr	r1, [r5]
   11fd4:	bl	10de0 <fputs_unlocked@plt>
   11fd8:	mov	r2, #5
   11fdc:	ldr	r1, [pc, #580]	; 12228 <__assert_fail@plt+0x11c0>
   11fe0:	mov	r0, r4
   11fe4:	bl	10e70 <dcgettext@plt>
   11fe8:	ldr	r1, [r5]
   11fec:	bl	10de0 <fputs_unlocked@plt>
   11ff0:	mov	r2, #5
   11ff4:	ldr	r1, [pc, #560]	; 1222c <__assert_fail@plt+0x11c4>
   11ff8:	mov	r0, r4
   11ffc:	bl	10e70 <dcgettext@plt>
   12000:	ldr	r1, [r5]
   12004:	bl	10de0 <fputs_unlocked@plt>
   12008:	mov	r2, #5
   1200c:	ldr	r1, [pc, #540]	; 12230 <__assert_fail@plt+0x11c8>
   12010:	mov	r0, r4
   12014:	bl	10e70 <dcgettext@plt>
   12018:	ldr	r1, [r5]
   1201c:	bl	10de0 <fputs_unlocked@plt>
   12020:	ldr	lr, [pc, #524]	; 12234 <__assert_fail@plt+0x11cc>
   12024:	add	ip, sp, #4
   12028:	ldm	lr!, {r0, r1, r2, r3}
   1202c:	stmia	ip!, {r0, r1, r2, r3}
   12030:	ldm	lr!, {r0, r1, r2, r3}
   12034:	ldr	r6, [sp, #4]
   12038:	stmia	ip!, {r0, r1, r2, r3}
   1203c:	cmp	r6, #0
   12040:	ldm	lr!, {r0, r1, r2, r3}
   12044:	addeq	r5, sp, #4
   12048:	stmia	ip!, {r0, r1, r2, r3}
   1204c:	ldm	lr, {r0, r1}
   12050:	stm	ip, {r0, r1}
   12054:	beq	12084 <__assert_fail@plt+0x101c>
   12058:	ldr	r7, [pc, #472]	; 12238 <__assert_fail@plt+0x11d0>
   1205c:	add	r5, sp, #4
   12060:	b	12070 <__assert_fail@plt+0x1008>
   12064:	ldr	r6, [r5, #8]!
   12068:	cmp	r6, #0
   1206c:	beq	12084 <__assert_fail@plt+0x101c>
   12070:	mov	r1, r6
   12074:	mov	r0, r7
   12078:	bl	10df8 <strcmp@plt>
   1207c:	cmp	r0, #0
   12080:	bne	12064 <__assert_fail@plt+0xffc>
   12084:	ldr	r5, [r5, #4]
   12088:	mov	r2, #5
   1208c:	cmp	r5, #0
   12090:	ldr	r1, [pc, #420]	; 1223c <__assert_fail@plt+0x11d4>
   12094:	beq	1213c <__assert_fail@plt+0x10d4>
   12098:	mov	r0, #0
   1209c:	bl	10e70 <dcgettext@plt>
   120a0:	ldr	r3, [pc, #408]	; 12240 <__assert_fail@plt+0x11d8>
   120a4:	ldr	r2, [pc, #408]	; 12244 <__assert_fail@plt+0x11dc>
   120a8:	mov	r1, r0
   120ac:	mov	r0, #1
   120b0:	bl	10f9c <__printf_chk@plt>
   120b4:	mov	r1, #0
   120b8:	mov	r0, #5
   120bc:	bl	10ff0 <setlocale@plt>
   120c0:	cmp	r0, #0
   120c4:	ldreq	r6, [pc, #364]	; 12238 <__assert_fail@plt+0x11d0>
   120c8:	beq	120e4 <__assert_fail@plt+0x107c>
   120cc:	mov	r2, #3
   120d0:	ldr	r1, [pc, #368]	; 12248 <__assert_fail@plt+0x11e0>
   120d4:	bl	11050 <strncmp@plt>
   120d8:	ldr	r6, [pc, #344]	; 12238 <__assert_fail@plt+0x11d0>
   120dc:	cmp	r0, #0
   120e0:	bne	121cc <__assert_fail@plt+0x1164>
   120e4:	mov	r2, #5
   120e8:	ldr	r1, [pc, #348]	; 1224c <__assert_fail@plt+0x11e4>
   120ec:	mov	r0, #0
   120f0:	bl	10e70 <dcgettext@plt>
   120f4:	ldr	r3, [pc, #316]	; 12238 <__assert_fail@plt+0x11d0>
   120f8:	ldr	r2, [pc, #320]	; 12240 <__assert_fail@plt+0x11d8>
   120fc:	mov	r1, r0
   12100:	mov	r0, #1
   12104:	bl	10f9c <__printf_chk@plt>
   12108:	mov	r2, #5
   1210c:	ldr	r1, [pc, #316]	; 12250 <__assert_fail@plt+0x11e8>
   12110:	mov	r0, #0
   12114:	bl	10e70 <dcgettext@plt>
   12118:	ldr	r2, [pc, #308]	; 12254 <__assert_fail@plt+0x11ec>
   1211c:	cmp	r5, r6
   12120:	ldr	r3, [pc, #304]	; 12258 <__assert_fail@plt+0x11f0>
   12124:	movne	r3, r2
   12128:	mov	r1, r0
   1212c:	mov	r2, r5
   12130:	mov	r0, #1
   12134:	bl	10f9c <__printf_chk@plt>
   12138:	b	11eec <__assert_fail@plt+0xe84>
   1213c:	mov	r0, r5
   12140:	bl	10e70 <dcgettext@plt>
   12144:	ldr	r3, [pc, #244]	; 12240 <__assert_fail@plt+0x11d8>
   12148:	ldr	r2, [pc, #244]	; 12244 <__assert_fail@plt+0x11dc>
   1214c:	mov	r1, r0
   12150:	mov	r0, #1
   12154:	bl	10f9c <__printf_chk@plt>
   12158:	mov	r1, r5
   1215c:	mov	r0, #5
   12160:	bl	10ff0 <setlocale@plt>
   12164:	cmp	r0, #0
   12168:	beq	12180 <__assert_fail@plt+0x1118>
   1216c:	mov	r2, #3
   12170:	ldr	r1, [pc, #208]	; 12248 <__assert_fail@plt+0x11e0>
   12174:	bl	11050 <strncmp@plt>
   12178:	cmp	r0, #0
   1217c:	bne	121c4 <__assert_fail@plt+0x115c>
   12180:	mov	r2, #5
   12184:	ldr	r1, [pc, #192]	; 1224c <__assert_fail@plt+0x11e4>
   12188:	mov	r0, #0
   1218c:	bl	10e70 <dcgettext@plt>
   12190:	ldr	r3, [pc, #160]	; 12238 <__assert_fail@plt+0x11d0>
   12194:	ldr	r2, [pc, #164]	; 12240 <__assert_fail@plt+0x11d8>
   12198:	mov	r5, r3
   1219c:	mov	r1, r0
   121a0:	mov	r0, #1
   121a4:	bl	10f9c <__printf_chk@plt>
   121a8:	ldr	r1, [pc, #160]	; 12250 <__assert_fail@plt+0x11e8>
   121ac:	mov	r2, #5
   121b0:	mov	r0, #0
   121b4:	bl	10e70 <dcgettext@plt>
   121b8:	ldr	r3, [pc, #152]	; 12258 <__assert_fail@plt+0x11f0>
   121bc:	mov	r1, r0
   121c0:	b	1212c <__assert_fail@plt+0x10c4>
   121c4:	ldr	r6, [pc, #108]	; 12238 <__assert_fail@plt+0x11d0>
   121c8:	mov	r5, r6
   121cc:	mov	r2, #5
   121d0:	ldr	r1, [pc, #132]	; 1225c <__assert_fail@plt+0x11f4>
   121d4:	mov	r0, #0
   121d8:	bl	10e70 <dcgettext@plt>
   121dc:	ldr	r2, [pc, #84]	; 12238 <__assert_fail@plt+0x11d0>
   121e0:	mov	r1, r0
   121e4:	mov	r0, #1
   121e8:	bl	10f9c <__printf_chk@plt>
   121ec:	b	120e4 <__assert_fail@plt+0x107c>
   121f0:	andeq	r7, r2, r8, lsl #30
   121f4:	muleq	r2, r0, r1
   121f8:	andeq	r6, r1, r4, ror #9
   121fc:	andeq	r8, r2, r4, asr r5
   12200:	andeq	r6, r1, ip, lsl #10
   12204:	muleq	r2, ip, r1
   12208:	andeq	r6, r1, r0, lsr r5
   1220c:	andeq	r6, r1, r0, ror r5
   12210:	andeq	r6, r1, r8, lsr #11
   12214:	strdeq	r6, [r1], -r4
   12218:	andeq	r6, r1, r8, asr #13
   1221c:	andeq	r6, r1, r4, lsl #17
   12220:	andeq	r6, r1, r4, lsl r9
   12224:	andeq	r6, r1, r4, asr #18
   12228:	andeq	r6, r1, ip, ror r9
   1222c:	andeq	r6, r1, ip, lsr sl
   12230:	andeq	r6, r1, r8, lsl #22
   12234:	andeq	r6, r1, r4, ror #6
   12238:	andeq	r6, r1, r0, ror #9
   1223c:	muleq	r1, ip, fp
   12240:			; <UNDEFINED> instruction: 0x00016bb4
   12244:	ldrdeq	r6, [r1], -ip
   12248:	andeq	r6, r1, ip, ror #23
   1224c:	andeq	r6, r1, r8, lsr ip
   12250:	andeq	r6, r1, r8, asr ip
   12254:	andeq	r6, r1, r8, lsr sl
   12258:	andeq	r6, r1, r0, lsl #28
   1225c:	strdeq	r6, [r1], -r0
   12260:	ldr	r3, [pc, #4]	; 1226c <__assert_fail@plt+0x1204>
   12264:	str	r0, [r3]
   12268:	bx	lr
   1226c:	andeq	r8, r2, ip, asr #10
   12270:	ldr	r3, [pc, #4]	; 1227c <__assert_fail@plt+0x1214>
   12274:	strb	r0, [r3, #4]
   12278:	bx	lr
   1227c:	andeq	r8, r2, ip, asr #10
   12280:	ldr	r3, [pc, #180]	; 1233c <__assert_fail@plt+0x12d4>
   12284:	push	{r4, r5, r6, lr}
   12288:	sub	sp, sp, #8
   1228c:	ldr	r0, [r3]
   12290:	bl	15d94 <__assert_fail@plt+0x4d2c>
   12294:	cmp	r0, #0
   12298:	beq	122c0 <__assert_fail@plt+0x1258>
   1229c:	bl	10f78 <__errno_location@plt>
   122a0:	ldr	r5, [pc, #152]	; 12340 <__assert_fail@plt+0x12d8>
   122a4:	ldrb	r3, [r5, #4]
   122a8:	cmp	r3, #0
   122ac:	mov	r4, r0
   122b0:	beq	122dc <__assert_fail@plt+0x1274>
   122b4:	ldr	r3, [r0]
   122b8:	cmp	r3, #32
   122bc:	bne	122dc <__assert_fail@plt+0x1274>
   122c0:	ldr	r3, [pc, #124]	; 12344 <__assert_fail@plt+0x12dc>
   122c4:	ldr	r0, [r3]
   122c8:	bl	15d94 <__assert_fail@plt+0x4d2c>
   122cc:	cmp	r0, #0
   122d0:	bne	1231c <__assert_fail@plt+0x12b4>
   122d4:	add	sp, sp, #8
   122d8:	pop	{r4, r5, r6, pc}
   122dc:	mov	r2, #5
   122e0:	ldr	r1, [pc, #96]	; 12348 <__assert_fail@plt+0x12e0>
   122e4:	mov	r0, #0
   122e8:	bl	10e70 <dcgettext@plt>
   122ec:	mov	r6, r0
   122f0:	ldr	r0, [r5]
   122f4:	cmp	r0, #0
   122f8:	beq	12328 <__assert_fail@plt+0x12c0>
   122fc:	ldr	r4, [r4]
   12300:	bl	1452c <__assert_fail@plt+0x34c4>
   12304:	mov	r1, r4
   12308:	str	r6, [sp]
   1230c:	ldr	r2, [pc, #56]	; 1234c <__assert_fail@plt+0x12e4>
   12310:	mov	r3, r0
   12314:	mov	r0, #0
   12318:	bl	10ef4 <error@plt>
   1231c:	ldr	r3, [pc, #44]	; 12350 <__assert_fail@plt+0x12e8>
   12320:	ldr	r0, [r3]
   12324:	bl	10e28 <_exit@plt>
   12328:	mov	r3, r6
   1232c:	ldr	r1, [r4]
   12330:	ldr	r2, [pc, #28]	; 12354 <__assert_fail@plt+0x12ec>
   12334:	bl	10ef4 <error@plt>
   12338:	b	1231c <__assert_fail@plt+0x12b4>
   1233c:	muleq	r2, ip, r1
   12340:	andeq	r8, r2, ip, asr #10
   12344:	muleq	r2, r0, r1
   12348:	andeq	r6, r1, r8, asr #30
   1234c:	andeq	r6, r1, r4, asr pc
   12350:	andeq	r8, r2, ip, lsr r1
   12354:	andeq	r6, r1, r0, asr #25
   12358:	b	10e04 <posix_fadvise64@plt>
   1235c:	cmp	r0, #0
   12360:	bxeq	lr
   12364:	push	{r4, lr}
   12368:	sub	sp, sp, #16
   1236c:	mov	r4, r1
   12370:	bl	10fa8 <fileno@plt>
   12374:	mov	r2, #0
   12378:	mov	r3, #0
   1237c:	str	r4, [sp, #8]
   12380:	strd	r2, [sp]
   12384:	bl	10e04 <posix_fadvise64@plt>
   12388:	add	sp, sp, #16
   1238c:	pop	{r4, pc}
   12390:	mov	r3, #0
   12394:	str	r3, [r0]
   12398:	str	r3, [r0, #4]
   1239c:	str	r3, [r0, #8]
   123a0:	bx	lr
   123a4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123a8:	ldr	r3, [r1]
   123ac:	ldr	r9, [r0, #8]
   123b0:	ldr	fp, [r0]
   123b4:	tst	r3, #16
   123b8:	add	fp, r9, fp
   123bc:	bne	12488 <__assert_fail@plt+0x1420>
   123c0:	mov	r8, r2
   123c4:	mov	r7, r0
   123c8:	mov	sl, r1
   123cc:	mov	r4, r9
   123d0:	b	123f8 <__assert_fail@plt+0x1390>
   123d4:	add	r2, r3, #1
   123d8:	str	r2, [sl, #4]
   123dc:	ldrb	r5, [r3]
   123e0:	mov	r6, r5
   123e4:	cmp	r4, fp
   123e8:	beq	1244c <__assert_fail@plt+0x13e4>
   123ec:	cmp	r6, r8
   123f0:	strb	r5, [r4], #1
   123f4:	beq	12478 <__assert_fail@plt+0x1410>
   123f8:	ldr	r3, [sl, #4]
   123fc:	ldr	r2, [sl, #8]
   12400:	cmp	r3, r2
   12404:	bcc	123d4 <__assert_fail@plt+0x136c>
   12408:	mov	r0, sl
   1240c:	bl	10fd8 <__uflow@plt>
   12410:	cmn	r0, #1
   12414:	mov	r6, r0
   12418:	bne	12490 <__assert_fail@plt+0x1428>
   1241c:	cmp	r9, r4
   12420:	beq	12488 <__assert_fail@plt+0x1420>
   12424:	ldr	r3, [sl]
   12428:	tst	r3, #32
   1242c:	bne	12488 <__assert_fail@plt+0x1420>
   12430:	ldrb	r3, [r4, #-1]
   12434:	cmp	r3, r8
   12438:	beq	12478 <__assert_fail@plt+0x1410>
   1243c:	cmp	r4, fp
   12440:	mov	r6, r8
   12444:	bne	12474 <__assert_fail@plt+0x140c>
   12448:	mov	r5, r8
   1244c:	mov	r0, r9
   12450:	mov	r1, r7
   12454:	ldr	r4, [r7]
   12458:	bl	14de4 <__assert_fail@plt+0x3d7c>
   1245c:	ldr	fp, [r7]
   12460:	mov	r9, r0
   12464:	add	r4, r0, r4
   12468:	str	r0, [r7, #8]
   1246c:	add	fp, r0, fp
   12470:	b	123ec <__assert_fail@plt+0x1384>
   12474:	strb	r8, [r4], #1
   12478:	sub	r4, r4, r9
   1247c:	str	r4, [r7, #4]
   12480:	mov	r0, r7
   12484:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12488:	mov	r0, #0
   1248c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12490:	uxtb	r5, r0
   12494:	b	123e4 <__assert_fail@plt+0x137c>
   12498:	mov	r2, #10
   1249c:	b	123a4 <__assert_fail@plt+0x133c>
   124a0:	ldr	r0, [r0, #8]
   124a4:	b	10e1c <free@plt>
   124a8:	push	{r4, r5, r6, lr}
   124ac:	subs	r4, r0, #0
   124b0:	beq	12524 <__assert_fail@plt+0x14bc>
   124b4:	mov	r1, #47	; 0x2f
   124b8:	bl	10ffc <strrchr@plt>
   124bc:	subs	r5, r0, #0
   124c0:	beq	12510 <__assert_fail@plt+0x14a8>
   124c4:	add	r6, r5, #1
   124c8:	sub	r3, r6, r4
   124cc:	cmp	r3, #6
   124d0:	ble	12510 <__assert_fail@plt+0x14a8>
   124d4:	mov	r2, #7
   124d8:	ldr	r1, [pc, #96]	; 12540 <__assert_fail@plt+0x14d8>
   124dc:	sub	r0, r5, #6
   124e0:	bl	11050 <strncmp@plt>
   124e4:	cmp	r0, #0
   124e8:	bne	12510 <__assert_fail@plt+0x14a8>
   124ec:	mov	r2, #3
   124f0:	ldr	r1, [pc, #76]	; 12544 <__assert_fail@plt+0x14dc>
   124f4:	mov	r0, r6
   124f8:	bl	11050 <strncmp@plt>
   124fc:	cmp	r0, #0
   12500:	movne	r4, r6
   12504:	ldreq	r3, [pc, #60]	; 12548 <__assert_fail@plt+0x14e0>
   12508:	addeq	r4, r5, #4
   1250c:	streq	r4, [r3]
   12510:	ldr	r2, [pc, #52]	; 1254c <__assert_fail@plt+0x14e4>
   12514:	ldr	r3, [pc, #52]	; 12550 <__assert_fail@plt+0x14e8>
   12518:	str	r4, [r2]
   1251c:	str	r4, [r3]
   12520:	pop	{r4, r5, r6, pc}
   12524:	ldr	r3, [pc, #40]	; 12554 <__assert_fail@plt+0x14ec>
   12528:	mov	r2, #55	; 0x37
   1252c:	mov	r1, #1
   12530:	ldr	r3, [r3]
   12534:	ldr	r0, [pc, #28]	; 12558 <__assert_fail@plt+0x14f0>
   12538:	bl	10eac <fwrite@plt>
   1253c:	bl	1105c <abort@plt>
   12540:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12544:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12548:	andeq	r8, r2, r0, lsl #3
   1254c:	andeq	r8, r2, r4, asr r5
   12550:	andeq	r8, r2, r4, lsl #3
   12554:	muleq	r2, r0, r1
   12558:	andeq	r6, r1, ip, asr pc
   1255c:	push	{r4, lr}
   12560:	mov	r2, #48	; 0x30
   12564:	mov	r4, r1
   12568:	mov	r1, #0
   1256c:	bl	10f90 <memset@plt>
   12570:	cmp	r4, #10
   12574:	beq	12580 <__assert_fail@plt+0x1518>
   12578:	str	r4, [r0]
   1257c:	pop	{r4, pc}
   12580:	bl	1105c <abort@plt>
   12584:	push	{r4, r5, r6, lr}
   12588:	mov	r2, #5
   1258c:	mov	r5, r0
   12590:	mov	r6, r1
   12594:	mov	r1, r0
   12598:	mov	r0, #0
   1259c:	bl	10e70 <dcgettext@plt>
   125a0:	cmp	r5, r0
   125a4:	mov	r4, r0
   125a8:	beq	125b4 <__assert_fail@plt+0x154c>
   125ac:	mov	r0, r4
   125b0:	pop	{r4, r5, r6, pc}
   125b4:	bl	15e54 <__assert_fail@plt+0x4dec>
   125b8:	ldrb	r3, [r0]
   125bc:	bic	r3, r3, #32
   125c0:	cmp	r3, #85	; 0x55
   125c4:	bne	12624 <__assert_fail@plt+0x15bc>
   125c8:	ldrb	r3, [r0, #1]
   125cc:	bic	r3, r3, #32
   125d0:	cmp	r3, #84	; 0x54
   125d4:	bne	1269c <__assert_fail@plt+0x1634>
   125d8:	ldrb	r3, [r0, #2]
   125dc:	bic	r3, r3, #32
   125e0:	cmp	r3, #70	; 0x46
   125e4:	bne	1269c <__assert_fail@plt+0x1634>
   125e8:	ldrb	r3, [r0, #3]
   125ec:	cmp	r3, #45	; 0x2d
   125f0:	bne	1269c <__assert_fail@plt+0x1634>
   125f4:	ldrb	r3, [r0, #4]
   125f8:	cmp	r3, #56	; 0x38
   125fc:	bne	1269c <__assert_fail@plt+0x1634>
   12600:	ldrb	r3, [r0, #5]
   12604:	cmp	r3, #0
   12608:	bne	1269c <__assert_fail@plt+0x1634>
   1260c:	ldrb	r2, [r4]
   12610:	ldr	r3, [pc, #156]	; 126b4 <__assert_fail@plt+0x164c>
   12614:	ldr	r4, [pc, #156]	; 126b8 <__assert_fail@plt+0x1650>
   12618:	cmp	r2, #96	; 0x60
   1261c:	movne	r4, r3
   12620:	b	125ac <__assert_fail@plt+0x1544>
   12624:	cmp	r3, #71	; 0x47
   12628:	bne	1269c <__assert_fail@plt+0x1634>
   1262c:	ldrb	r3, [r0, #1]
   12630:	bic	r3, r3, #32
   12634:	cmp	r3, #66	; 0x42
   12638:	bne	1269c <__assert_fail@plt+0x1634>
   1263c:	ldrb	r3, [r0, #2]
   12640:	cmp	r3, #49	; 0x31
   12644:	bne	1269c <__assert_fail@plt+0x1634>
   12648:	ldrb	r3, [r0, #3]
   1264c:	cmp	r3, #56	; 0x38
   12650:	bne	1269c <__assert_fail@plt+0x1634>
   12654:	ldrb	r3, [r0, #4]
   12658:	cmp	r3, #48	; 0x30
   1265c:	bne	1269c <__assert_fail@plt+0x1634>
   12660:	ldrb	r3, [r0, #5]
   12664:	cmp	r3, #51	; 0x33
   12668:	bne	1269c <__assert_fail@plt+0x1634>
   1266c:	ldrb	r3, [r0, #6]
   12670:	cmp	r3, #48	; 0x30
   12674:	bne	1269c <__assert_fail@plt+0x1634>
   12678:	ldrb	r3, [r0, #7]
   1267c:	cmp	r3, #0
   12680:	bne	1269c <__assert_fail@plt+0x1634>
   12684:	ldrb	r2, [r4]
   12688:	ldr	r3, [pc, #44]	; 126bc <__assert_fail@plt+0x1654>
   1268c:	ldr	r4, [pc, #44]	; 126c0 <__assert_fail@plt+0x1658>
   12690:	cmp	r2, #96	; 0x60
   12694:	movne	r4, r3
   12698:	b	125ac <__assert_fail@plt+0x1544>
   1269c:	ldr	r3, [pc, #32]	; 126c4 <__assert_fail@plt+0x165c>
   126a0:	ldr	r4, [pc, #32]	; 126c8 <__assert_fail@plt+0x1660>
   126a4:	cmp	r6, #9
   126a8:	movne	r4, r3
   126ac:	mov	r0, r4
   126b0:	pop	{r4, r5, r6, pc}
   126b4:	strdeq	r6, [r1], -r8
   126b8:	andeq	r7, r1, r4
   126bc:	strdeq	r6, [r1], -ip
   126c0:	andeq	r7, r1, r0
   126c4:	andeq	r7, r1, r8
   126c8:	strdeq	r6, [r1], -r4
   126cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126d0:	sub	sp, sp, #124	; 0x7c
   126d4:	ldr	ip, [pc, #3576]	; 134d4 <__assert_fail@plt+0x246c>
   126d8:	str	r3, [sp, #24]
   126dc:	ldr	r3, [sp, #168]	; 0xa8
   126e0:	ldr	ip, [ip]
   126e4:	str	r3, [sp, #56]	; 0x38
   126e8:	ldr	r3, [sp, #172]	; 0xac
   126ec:	ldr	r8, [sp, #160]	; 0xa0
   126f0:	str	r3, [sp, #80]	; 0x50
   126f4:	ldr	r3, [sp, #176]	; 0xb0
   126f8:	mov	fp, r0
   126fc:	str	r3, [sp, #76]	; 0x4c
   12700:	mov	sl, r1
   12704:	str	r2, [sp, #36]	; 0x24
   12708:	str	ip, [sp, #116]	; 0x74
   1270c:	bl	10ec4 <__ctype_get_mb_cur_max@plt>
   12710:	ldr	r3, [sp, #164]	; 0xa4
   12714:	ands	r4, r3, #2
   12718:	movne	r3, #1
   1271c:	moveq	r3, #0
   12720:	str	r3, [sp, #32]
   12724:	str	r0, [sp, #64]	; 0x40
   12728:	cmp	r8, #10
   1272c:	ldrls	pc, [pc, r8, lsl #2]
   12730:	b	13ee0 <__assert_fail@plt+0x2e78>
   12734:	andeq	r2, r1, r8, lsr #22
   12738:	andeq	r2, r1, r0, asr #23
   1273c:	andeq	r3, r1, r0, asr #3
   12740:	andeq	r2, r1, r0, ror #23
   12744:	muleq	r1, r4, sl
   12748:	ldrdeq	r2, [r1], -ip
   1274c:	andeq	r2, r1, r8, asr fp
   12750:	muleq	r1, r0, fp
   12754:	andeq	r2, r1, r0, ror #14
   12758:	andeq	r2, r1, r0, ror #14
   1275c:	andeq	r2, r1, r0, ror #14
   12760:	cmp	r8, #10
   12764:	beq	12788 <__assert_fail@plt+0x1720>
   12768:	mov	r1, r8
   1276c:	ldr	r0, [pc, #3428]	; 134d8 <__assert_fail@plt+0x2470>
   12770:	bl	12584 <__assert_fail@plt+0x151c>
   12774:	mov	r1, r8
   12778:	str	r0, [sp, #80]	; 0x50
   1277c:	ldr	r0, [pc, #3420]	; 134e0 <__assert_fail@plt+0x2478>
   12780:	bl	12584 <__assert_fail@plt+0x151c>
   12784:	str	r0, [sp, #76]	; 0x4c
   12788:	cmp	r4, #0
   1278c:	movne	r4, #0
   12790:	beq	13ba0 <__assert_fail@plt+0x2b38>
   12794:	ldr	r7, [sp, #76]	; 0x4c
   12798:	mov	r5, #0
   1279c:	mov	r6, #1
   127a0:	mov	r0, r7
   127a4:	str	r6, [sp, #40]	; 0x28
   127a8:	str	r5, [sp, #68]	; 0x44
   127ac:	bl	10f54 <strlen@plt>
   127b0:	str	r6, [sp, #28]
   127b4:	str	r5, [sp, #44]	; 0x2c
   127b8:	str	r5, [sp, #72]	; 0x48
   127bc:	str	r7, [sp, #60]	; 0x3c
   127c0:	str	r0, [sp, #52]	; 0x34
   127c4:	str	r8, [sp, #160]	; 0xa0
   127c8:	mov	r8, fp
   127cc:	ldr	fp, [sp, #160]	; 0xa0
   127d0:	mov	r9, #0
   127d4:	ldr	r3, [sp, #24]
   127d8:	cmn	r3, #1
   127dc:	beq	12d44 <__assert_fail@plt+0x1cdc>
   127e0:	ldr	r3, [sp, #24]
   127e4:	subs	r6, r3, r9
   127e8:	movne	r6, #1
   127ec:	cmp	r6, #0
   127f0:	beq	12d5c <__assert_fail@plt+0x1cf4>
   127f4:	ldr	r7, [sp, #28]
   127f8:	ldr	r0, [sp, #36]	; 0x24
   127fc:	cmp	fp, #2
   12800:	moveq	r7, #0
   12804:	andne	r7, r7, #1
   12808:	add	r3, r0, r9
   1280c:	cmp	r7, #0
   12810:	str	r3, [sp, #48]	; 0x30
   12814:	beq	13200 <__assert_fail@plt+0x2198>
   12818:	ldr	r2, [sp, #52]	; 0x34
   1281c:	cmp	r2, #0
   12820:	beq	134e4 <__assert_fail@plt+0x247c>
   12824:	ldr	r1, [sp, #24]
   12828:	cmp	r2, #1
   1282c:	mov	r3, r2
   12830:	movls	r3, #0
   12834:	movhi	r3, #1
   12838:	cmn	r1, #1
   1283c:	movne	r3, #0
   12840:	cmp	r3, #0
   12844:	add	r5, r9, r2
   12848:	beq	12854 <__assert_fail@plt+0x17ec>
   1284c:	bl	10f54 <strlen@plt>
   12850:	str	r0, [sp, #24]
   12854:	ldr	r3, [sp, #24]
   12858:	cmp	r5, r3
   1285c:	bhi	134e4 <__assert_fail@plt+0x247c>
   12860:	ldr	r2, [sp, #52]	; 0x34
   12864:	ldr	r1, [sp, #60]	; 0x3c
   12868:	ldr	r0, [sp, #48]	; 0x30
   1286c:	bl	10e58 <memcmp@plt>
   12870:	cmp	r0, #0
   12874:	bne	134e4 <__assert_fail@plt+0x247c>
   12878:	ldr	r3, [sp, #32]
   1287c:	cmp	r3, #0
   12880:	bne	13da0 <__assert_fail@plt+0x2d38>
   12884:	ldr	r3, [sp, #48]	; 0x30
   12888:	ldrb	r5, [r3]
   1288c:	cmp	r5, #126	; 0x7e
   12890:	ldrls	pc, [pc, r5, lsl #2]
   12894:	b	13164 <__assert_fail@plt+0x20fc>
   12898:	andeq	r3, r1, r0, asr r0
   1289c:	andeq	r3, r1, r4, ror #2
   128a0:	andeq	r3, r1, r4, ror #2
   128a4:	andeq	r3, r1, r4, ror #2
   128a8:	andeq	r3, r1, r4, ror #2
   128ac:	andeq	r3, r1, r4, ror #2
   128b0:	andeq	r3, r1, r4, ror #2
   128b4:	andeq	r3, r1, ip, lsl r1
   128b8:	andeq	r3, r1, ip, lsl #2
   128bc:	andeq	r3, r1, ip
   128c0:	ldrdeq	r2, [r1], -r4
   128c4:	andeq	r3, r1, ip, lsr #32
   128c8:	andeq	r3, r1, r4, lsl r0
   128cc:	andeq	r2, r1, r4, asr #30
   128d0:	andeq	r3, r1, r4, ror #2
   128d4:	andeq	r3, r1, r4, ror #2
   128d8:	andeq	r3, r1, r4, ror #2
   128dc:	andeq	r3, r1, r4, ror #2
   128e0:	andeq	r3, r1, r4, ror #2
   128e4:	andeq	r3, r1, r4, ror #2
   128e8:	andeq	r3, r1, r4, ror #2
   128ec:	andeq	r3, r1, r4, ror #2
   128f0:	andeq	r3, r1, r4, ror #2
   128f4:	andeq	r3, r1, r4, ror #2
   128f8:	andeq	r3, r1, r4, ror #2
   128fc:	andeq	r3, r1, r4, ror #2
   12900:	andeq	r3, r1, r4, ror #2
   12904:	andeq	r3, r1, r4, ror #2
   12908:	andeq	r3, r1, r4, ror #2
   1290c:	andeq	r3, r1, r4, ror #2
   12910:	andeq	r3, r1, r4, ror #2
   12914:	andeq	r3, r1, r4, ror #2
   12918:	andeq	r3, r1, r4, lsr #2
   1291c:	andeq	r3, r1, r8, lsr r0
   12920:	andeq	r3, r1, r8, lsr r0
   12924:	andeq	r3, r1, ip, lsr r1
   12928:	andeq	r3, r1, r8, lsr r0
   1292c:	andeq	r3, r1, r8, asr r1
   12930:	andeq	r3, r1, r8, lsr r0
   12934:	andeq	r2, r1, r8, ror lr
   12938:	andeq	r3, r1, r8, lsr r0
   1293c:	andeq	r3, r1, r8, lsr r0
   12940:	andeq	r3, r1, r8, lsr r0
   12944:	andeq	r3, r1, r8, asr r1
   12948:	andeq	r3, r1, r8, asr r1
   1294c:	andeq	r3, r1, r8, asr r1
   12950:	andeq	r3, r1, r8, asr r1
   12954:	andeq	r3, r1, r8, asr r1
   12958:	andeq	r3, r1, r8, asr r1
   1295c:	andeq	r3, r1, r8, asr r1
   12960:	andeq	r3, r1, r8, asr r1
   12964:	andeq	r3, r1, r8, asr r1
   12968:	andeq	r3, r1, r8, asr r1
   1296c:	andeq	r3, r1, r8, asr r1
   12970:	andeq	r3, r1, r8, asr r1
   12974:	andeq	r3, r1, r8, asr r1
   12978:	andeq	r3, r1, r8, asr r1
   1297c:	andeq	r3, r1, r8, asr r1
   12980:	andeq	r3, r1, r8, asr r1
   12984:	andeq	r3, r1, r8, lsr r0
   12988:	andeq	r3, r1, r8, lsr r0
   1298c:	andeq	r3, r1, r8, lsr r0
   12990:	andeq	r3, r1, r8, lsr r0
   12994:	andeq	r2, r1, ip, asr #28
   12998:	andeq	r3, r1, r4, ror #2
   1299c:	andeq	r3, r1, r8, asr r1
   129a0:	andeq	r3, r1, r8, asr r1
   129a4:	andeq	r3, r1, r8, asr r1
   129a8:	andeq	r3, r1, r8, asr r1
   129ac:	andeq	r3, r1, r8, asr r1
   129b0:	andeq	r3, r1, r8, asr r1
   129b4:	andeq	r3, r1, r8, asr r1
   129b8:	andeq	r3, r1, r8, asr r1
   129bc:	andeq	r3, r1, r8, asr r1
   129c0:	andeq	r3, r1, r8, asr r1
   129c4:	andeq	r3, r1, r8, asr r1
   129c8:	andeq	r3, r1, r8, asr r1
   129cc:	andeq	r3, r1, r8, asr r1
   129d0:	andeq	r3, r1, r8, asr r1
   129d4:	andeq	r3, r1, r8, asr r1
   129d8:	andeq	r3, r1, r8, asr r1
   129dc:	andeq	r3, r1, r8, asr r1
   129e0:	andeq	r3, r1, r8, asr r1
   129e4:	andeq	r3, r1, r8, asr r1
   129e8:	andeq	r3, r1, r8, asr r1
   129ec:	andeq	r3, r1, r8, asr r1
   129f0:	andeq	r3, r1, r8, asr r1
   129f4:	andeq	r3, r1, r8, asr r1
   129f8:	andeq	r3, r1, r8, asr r1
   129fc:	andeq	r3, r1, r8, asr r1
   12a00:	andeq	r3, r1, r8, asr r1
   12a04:	andeq	r3, r1, r8, lsr r0
   12a08:	andeq	r2, r1, r4, lsl #28
   12a0c:	andeq	r3, r1, r8, asr r1
   12a10:	andeq	r3, r1, r8, lsr r0
   12a14:	andeq	r3, r1, r8, asr r1
   12a18:	andeq	r3, r1, r8, lsr r0
   12a1c:	andeq	r3, r1, r8, asr r1
   12a20:	andeq	r3, r1, r8, asr r1
   12a24:	andeq	r3, r1, r8, asr r1
   12a28:	andeq	r3, r1, r8, asr r1
   12a2c:	andeq	r3, r1, r8, asr r1
   12a30:	andeq	r3, r1, r8, asr r1
   12a34:	andeq	r3, r1, r8, asr r1
   12a38:	andeq	r3, r1, r8, asr r1
   12a3c:	andeq	r3, r1, r8, asr r1
   12a40:	andeq	r3, r1, r8, asr r1
   12a44:	andeq	r3, r1, r8, asr r1
   12a48:	andeq	r3, r1, r8, asr r1
   12a4c:	andeq	r3, r1, r8, asr r1
   12a50:	andeq	r3, r1, r8, asr r1
   12a54:	andeq	r3, r1, r8, asr r1
   12a58:	andeq	r3, r1, r8, asr r1
   12a5c:	andeq	r3, r1, r8, asr r1
   12a60:	andeq	r3, r1, r8, asr r1
   12a64:	andeq	r3, r1, r8, asr r1
   12a68:	andeq	r3, r1, r8, asr r1
   12a6c:	andeq	r3, r1, r8, asr r1
   12a70:	andeq	r3, r1, r8, asr r1
   12a74:	andeq	r3, r1, r8, asr r1
   12a78:	andeq	r3, r1, r8, asr r1
   12a7c:	andeq	r3, r1, r8, asr r1
   12a80:	andeq	r3, r1, r8, asr r1
   12a84:	andeq	r2, r1, ip, lsl ip
   12a88:	andeq	r3, r1, r8, lsr r0
   12a8c:	andeq	r2, r1, ip, lsl ip
   12a90:	andeq	r3, r1, ip, lsr r1
   12a94:	cmp	r4, #0
   12a98:	moveq	r3, #1
   12a9c:	streq	r3, [sp, #28]
   12aa0:	beq	131cc <__assert_fail@plt+0x2164>
   12aa4:	mov	r3, #0
   12aa8:	mov	r4, r3
   12aac:	mov	r2, #1
   12ab0:	str	r2, [sp, #40]	; 0x28
   12ab4:	str	r3, [sp, #68]	; 0x44
   12ab8:	str	r2, [sp, #32]
   12abc:	str	r2, [sp, #52]	; 0x34
   12ac0:	ldr	r3, [pc, #2584]	; 134e0 <__assert_fail@plt+0x2478>
   12ac4:	str	r4, [sp, #44]	; 0x2c
   12ac8:	str	r4, [sp, #72]	; 0x48
   12acc:	str	r4, [sp, #28]
   12ad0:	str	r3, [sp, #60]	; 0x3c
   12ad4:	mov	r8, #2
   12ad8:	b	127c4 <__assert_fail@plt+0x175c>
   12adc:	cmp	r4, #0
   12ae0:	bne	13d6c <__assert_fail@plt+0x2d04>
   12ae4:	cmp	sl, #0
   12ae8:	beq	13b2c <__assert_fail@plt+0x2ac4>
   12aec:	mov	r3, #34	; 0x22
   12af0:	strb	r3, [fp]
   12af4:	ldr	r3, [pc, #2528]	; 134dc <__assert_fail@plt+0x2474>
   12af8:	mov	r1, r4
   12afc:	mov	r2, #1
   12b00:	str	r4, [sp, #68]	; 0x44
   12b04:	str	r2, [sp, #40]	; 0x28
   12b08:	mov	r4, r2
   12b0c:	str	r1, [sp, #44]	; 0x2c
   12b10:	str	r1, [sp, #72]	; 0x48
   12b14:	str	r1, [sp, #32]
   12b18:	str	r2, [sp, #28]
   12b1c:	str	r2, [sp, #52]	; 0x34
   12b20:	str	r3, [sp, #60]	; 0x3c
   12b24:	b	127c4 <__assert_fail@plt+0x175c>
   12b28:	mov	r3, #0
   12b2c:	str	r3, [sp, #68]	; 0x44
   12b30:	str	r3, [sp, #44]	; 0x2c
   12b34:	str	r3, [sp, #32]
   12b38:	str	r3, [sp, #28]
   12b3c:	str	r3, [sp, #60]	; 0x3c
   12b40:	mov	r3, #1
   12b44:	str	r8, [sp, #72]	; 0x48
   12b48:	str	r8, [sp, #52]	; 0x34
   12b4c:	mov	r4, r8
   12b50:	str	r3, [sp, #40]	; 0x28
   12b54:	b	127c4 <__assert_fail@plt+0x175c>
   12b58:	mov	r3, #1
   12b5c:	str	r3, [sp, #40]	; 0x28
   12b60:	str	r3, [sp, #32]
   12b64:	str	r3, [sp, #28]
   12b68:	str	r3, [sp, #52]	; 0x34
   12b6c:	ldr	r3, [pc, #2408]	; 134dc <__assert_fail@plt+0x2474>
   12b70:	mov	r2, #0
   12b74:	mov	r4, r2
   12b78:	str	r2, [sp, #68]	; 0x44
   12b7c:	str	r2, [sp, #44]	; 0x2c
   12b80:	str	r2, [sp, #72]	; 0x48
   12b84:	str	r3, [sp, #60]	; 0x3c
   12b88:	mov	r8, #5
   12b8c:	b	127c4 <__assert_fail@plt+0x175c>
   12b90:	mov	r3, #0
   12b94:	mov	r2, #1
   12b98:	str	r2, [sp, #40]	; 0x28
   12b9c:	mov	r4, r3
   12ba0:	str	r3, [sp, #68]	; 0x44
   12ba4:	str	r2, [sp, #28]
   12ba8:	str	r3, [sp, #44]	; 0x2c
   12bac:	str	r3, [sp, #72]	; 0x48
   12bb0:	str	r3, [sp, #32]
   12bb4:	str	r3, [sp, #52]	; 0x34
   12bb8:	str	r3, [sp, #60]	; 0x3c
   12bbc:	b	127c4 <__assert_fail@plt+0x175c>
   12bc0:	mov	r2, #1
   12bc4:	mov	r3, #0
   12bc8:	str	r2, [sp, #40]	; 0x28
   12bcc:	mov	r4, r3
   12bd0:	str	r3, [sp, #68]	; 0x44
   12bd4:	str	r8, [sp, #52]	; 0x34
   12bd8:	str	r2, [sp, #32]
   12bdc:	b	12ac0 <__assert_fail@plt+0x1a58>
   12be0:	mov	r3, #1
   12be4:	str	r3, [sp, #40]	; 0x28
   12be8:	str	r3, [sp, #32]
   12bec:	str	r3, [sp, #28]
   12bf0:	str	r3, [sp, #52]	; 0x34
   12bf4:	ldr	r3, [pc, #2276]	; 134e0 <__assert_fail@plt+0x2478>
   12bf8:	mov	r2, #0
   12bfc:	mov	r4, r2
   12c00:	str	r2, [sp, #68]	; 0x44
   12c04:	str	r2, [sp, #44]	; 0x2c
   12c08:	str	r2, [sp, #72]	; 0x48
   12c0c:	str	r3, [sp, #60]	; 0x3c
   12c10:	mov	r8, #2
   12c14:	b	127c4 <__assert_fail@plt+0x175c>
   12c18:	mov	r7, #0
   12c1c:	ldr	r3, [sp, #24]
   12c20:	cmn	r3, #1
   12c24:	beq	13760 <__assert_fail@plt+0x26f8>
   12c28:	ldr	r3, [sp, #24]
   12c2c:	subs	r3, r3, #1
   12c30:	movne	r3, #1
   12c34:	cmp	r3, #0
   12c38:	sub	r2, fp, #2
   12c3c:	clz	r2, r2
   12c40:	lsr	r2, r2, #5
   12c44:	bne	12e40 <__assert_fail@plt+0x1dd8>
   12c48:	cmp	r9, #0
   12c4c:	bne	12e40 <__assert_fail@plt+0x1dd8>
   12c50:	ldr	r3, [sp, #32]
   12c54:	tst	r3, r2
   12c58:	bne	12f60 <__assert_fail@plt+0x1ef8>
   12c5c:	ldr	r3, [sp, #28]
   12c60:	eor	r3, r3, #1
   12c64:	orr	r3, r2, r3
   12c68:	ldr	r2, [sp, #32]
   12c6c:	eor	r3, r3, #1
   12c70:	orrs	r3, r2, r3
   12c74:	beq	12ca4 <__assert_fail@plt+0x1c3c>
   12c78:	mov	r3, #0
   12c7c:	ldr	r1, [sp, #56]	; 0x38
   12c80:	cmp	r1, #0
   12c84:	beq	12ca4 <__assert_fail@plt+0x1c3c>
   12c88:	lsr	r2, r5, #5
   12c8c:	and	r0, r5, #31
   12c90:	uxtb	r2, r2
   12c94:	ldr	r1, [r1, r2, lsl #2]
   12c98:	lsr	r2, r1, r0
   12c9c:	tst	r2, #1
   12ca0:	bne	12cac <__assert_fail@plt+0x1c44>
   12ca4:	cmp	r7, #0
   12ca8:	beq	12efc <__assert_fail@plt+0x1e94>
   12cac:	sub	r2, fp, #2
   12cb0:	clz	r2, r2
   12cb4:	lsr	r2, r2, #5
   12cb8:	ldr	r3, [sp, #32]
   12cbc:	cmp	r3, #0
   12cc0:	bne	12fec <__assert_fail@plt+0x1f84>
   12cc4:	ldr	r3, [sp, #44]	; 0x2c
   12cc8:	eor	r3, r3, #1
   12ccc:	ands	r3, r2, r3
   12cd0:	beq	12d08 <__assert_fail@plt+0x1ca0>
   12cd4:	cmp	sl, r4
   12cd8:	movhi	r2, #39	; 0x27
   12cdc:	strbhi	r2, [r8, r4]
   12ce0:	add	r2, r4, #1
   12ce4:	cmp	r2, sl
   12ce8:	movcc	r1, #36	; 0x24
   12cec:	strbcc	r1, [r8, r2]
   12cf0:	add	r2, r4, #2
   12cf4:	cmp	r2, sl
   12cf8:	add	r4, r4, #3
   12cfc:	movcc	r1, #39	; 0x27
   12d00:	strbcc	r1, [r8, r2]
   12d04:	str	r3, [sp, #44]	; 0x2c
   12d08:	cmp	r4, sl
   12d0c:	movcc	r3, #92	; 0x5c
   12d10:	strbcc	r3, [r8, r4]
   12d14:	add	r9, r9, #1
   12d18:	add	r4, r4, #1
   12d1c:	cmp	r4, sl
   12d20:	ldr	r3, [sp, #40]	; 0x28
   12d24:	strbcc	r5, [r8, r4]
   12d28:	cmp	r6, #0
   12d2c:	moveq	r3, #0
   12d30:	str	r3, [sp, #40]	; 0x28
   12d34:	ldr	r3, [sp, #24]
   12d38:	add	r4, r4, #1
   12d3c:	cmn	r3, #1
   12d40:	bne	127e0 <__assert_fail@plt+0x1778>
   12d44:	ldr	r3, [sp, #36]	; 0x24
   12d48:	ldrb	r6, [r3, r9]
   12d4c:	adds	r6, r6, #0
   12d50:	movne	r6, #1
   12d54:	cmp	r6, #0
   12d58:	bne	127f4 <__assert_fail@plt+0x178c>
   12d5c:	str	fp, [sp, #160]	; 0xa0
   12d60:	mov	fp, r8
   12d64:	ldr	r8, [sp, #160]	; 0xa0
   12d68:	ldr	r1, [sp, #32]
   12d6c:	cmp	r4, #0
   12d70:	sub	r2, r8, #2
   12d74:	clz	r2, r2
   12d78:	lsr	r2, r2, #5
   12d7c:	andeq	r3, r2, r1
   12d80:	movne	r3, #0
   12d84:	cmp	r3, #0
   12d88:	bne	13e74 <__assert_fail@plt+0x2e0c>
   12d8c:	eor	r3, r1, #1
   12d90:	ands	r2, r2, r3
   12d94:	beq	13db0 <__assert_fail@plt+0x2d48>
   12d98:	ldr	r3, [sp, #68]	; 0x44
   12d9c:	cmp	r3, #0
   12da0:	beq	13db4 <__assert_fail@plt+0x2d4c>
   12da4:	ldr	r3, [sp, #40]	; 0x28
   12da8:	cmp	r3, #0
   12dac:	bne	13e30 <__assert_fail@plt+0x2dc8>
   12db0:	ldr	r3, [sp, #72]	; 0x48
   12db4:	adds	r3, r3, #0
   12db8:	movne	r3, #1
   12dbc:	cmp	sl, #0
   12dc0:	movne	r3, #0
   12dc4:	cmp	r3, #0
   12dc8:	ldreq	r2, [sp, #68]	; 0x44
   12dcc:	beq	13db4 <__assert_fail@plt+0x2d4c>
   12dd0:	ldr	sl, [sp, #72]	; 0x48
   12dd4:	str	r3, [sp, #68]	; 0x44
   12dd8:	ldr	r3, [pc, #1792]	; 134e0 <__assert_fail@plt+0x2478>
   12ddc:	mov	r2, #39	; 0x27
   12de0:	mov	r4, #1
   12de4:	str	r3, [sp, #60]	; 0x3c
   12de8:	mov	r3, #0
   12dec:	strb	r2, [fp]
   12df0:	str	r4, [sp, #52]	; 0x34
   12df4:	mov	r8, #2
   12df8:	str	r3, [sp, #32]
   12dfc:	b	127c4 <__assert_fail@plt+0x175c>
   12e00:	mov	r7, #0
   12e04:	cmp	fp, #2
   12e08:	beq	13740 <__assert_fail@plt+0x26d8>
   12e0c:	ldr	r3, [sp, #52]	; 0x34
   12e10:	ldr	r2, [sp, #28]
   12e14:	ldr	r1, [sp, #32]
   12e18:	cmp	r3, #0
   12e1c:	andne	r2, r2, r1
   12e20:	moveq	r2, #0
   12e24:	cmp	r2, #0
   12e28:	moveq	r5, #92	; 0x5c
   12e2c:	moveq	r3, r5
   12e30:	bne	1374c <__assert_fail@plt+0x26e4>
   12e34:	ldr	r1, [sp, #28]
   12e38:	cmp	r1, #0
   12e3c:	bne	13ebc <__assert_fail@plt+0x2e54>
   12e40:	mov	r6, #0
   12e44:	b	12c5c <__assert_fail@plt+0x1bf4>
   12e48:	mov	r7, #0
   12e4c:	cmp	fp, #2
   12e50:	beq	137b0 <__assert_fail@plt+0x2748>
   12e54:	cmp	fp, #5
   12e58:	beq	13774 <__assert_fail@plt+0x270c>
   12e5c:	sub	r2, fp, #2
   12e60:	mov	r6, #0
   12e64:	clz	r2, r2
   12e68:	mov	r5, #63	; 0x3f
   12e6c:	lsr	r2, r2, #5
   12e70:	b	12c5c <__assert_fail@plt+0x1bf4>
   12e74:	mov	r7, #0
   12e78:	cmp	fp, #2
   12e7c:	strne	r6, [sp, #68]	; 0x44
   12e80:	movne	r2, #0
   12e84:	movne	r5, #39	; 0x27
   12e88:	bne	12c5c <__assert_fail@plt+0x1bf4>
   12e8c:	ldr	r3, [sp, #32]
   12e90:	cmp	r3, #0
   12e94:	bne	13b90 <__assert_fail@plt+0x2b28>
   12e98:	cmp	sl, #0
   12e9c:	ldr	r3, [sp, #72]	; 0x48
   12ea0:	clz	r3, r3
   12ea4:	lsr	r3, r3, #5
   12ea8:	moveq	r3, #0
   12eac:	cmp	r3, #0
   12eb0:	bne	13ac4 <__assert_fail@plt+0x2a5c>
   12eb4:	cmp	sl, r4
   12eb8:	movhi	r3, #39	; 0x27
   12ebc:	strbhi	r3, [r8, r4]
   12ec0:	add	r3, r4, #1
   12ec4:	cmp	sl, r3
   12ec8:	movhi	r2, #92	; 0x5c
   12ecc:	strbhi	r2, [r8, r3]
   12ed0:	add	r3, r4, #2
   12ed4:	cmp	sl, r3
   12ed8:	movhi	r2, #39	; 0x27
   12edc:	strbhi	r2, [r8, r3]
   12ee0:	mov	r3, #0
   12ee4:	cmp	r7, #0
   12ee8:	add	r4, r4, #3
   12eec:	str	r3, [sp, #44]	; 0x2c
   12ef0:	str	r6, [sp, #68]	; 0x44
   12ef4:	mov	r5, #39	; 0x27
   12ef8:	bne	12cac <__assert_fail@plt+0x1c44>
   12efc:	ldr	r2, [sp, #44]	; 0x2c
   12f00:	eor	r3, r3, #1
   12f04:	and	r3, r3, r2
   12f08:	add	r9, r9, #1
   12f0c:	uxtb	r3, r3
   12f10:	cmp	r3, #0
   12f14:	beq	12d1c <__assert_fail@plt+0x1cb4>
   12f18:	cmp	sl, r4
   12f1c:	movhi	r3, #39	; 0x27
   12f20:	strbhi	r3, [r8, r4]
   12f24:	add	r3, r4, #1
   12f28:	cmp	sl, r3
   12f2c:	movhi	r2, #39	; 0x27
   12f30:	strbhi	r2, [r8, r3]
   12f34:	mov	r3, #0
   12f38:	add	r4, r4, #2
   12f3c:	str	r3, [sp, #44]	; 0x2c
   12f40:	b	12d1c <__assert_fail@plt+0x1cb4>
   12f44:	mov	r3, #114	; 0x72
   12f48:	ldr	r1, [sp, #32]
   12f4c:	sub	r2, fp, #2
   12f50:	clz	r2, r2
   12f54:	lsr	r2, r2, #5
   12f58:	tst	r2, r1
   12f5c:	beq	12e34 <__assert_fail@plt+0x1dcc>
   12f60:	mov	fp, r8
   12f64:	mov	r8, #2
   12f68:	ldr	r3, [sp, #28]
   12f6c:	cmp	r3, #0
   12f70:	movne	r8, #4
   12f74:	ldr	r3, [sp, #164]	; 0xa4
   12f78:	mov	ip, #0
   12f7c:	bic	r3, r3, #2
   12f80:	str	r3, [sp, #4]
   12f84:	ldr	r3, [sp, #76]	; 0x4c
   12f88:	str	r8, [sp]
   12f8c:	str	r3, [sp, #16]
   12f90:	ldr	r3, [sp, #80]	; 0x50
   12f94:	ldr	r2, [sp, #36]	; 0x24
   12f98:	str	r3, [sp, #12]
   12f9c:	mov	r1, sl
   12fa0:	ldr	r3, [sp, #24]
   12fa4:	mov	r0, fp
   12fa8:	str	ip, [sp, #8]
   12fac:	bl	126cc <__assert_fail@plt+0x1664>
   12fb0:	mov	r4, r0
   12fb4:	ldr	r3, [pc, #1304]	; 134d4 <__assert_fail@plt+0x246c>
   12fb8:	ldr	r2, [sp, #116]	; 0x74
   12fbc:	mov	r0, r4
   12fc0:	ldr	r3, [r3]
   12fc4:	cmp	r2, r3
   12fc8:	bne	13eb8 <__assert_fail@plt+0x2e50>
   12fcc:	add	sp, sp, #124	; 0x7c
   12fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fd4:	mov	r5, #110	; 0x6e
   12fd8:	ldr	r3, [sp, #32]
   12fdc:	mov	r2, #0
   12fe0:	cmp	r3, #0
   12fe4:	mov	r6, r2
   12fe8:	beq	12cc4 <__assert_fail@plt+0x1c5c>
   12fec:	str	fp, [sp, #160]	; 0xa0
   12ff0:	mov	fp, r8
   12ff4:	ldr	r8, [sp, #160]	; 0xa0
   12ff8:	mov	r3, r2
   12ffc:	ldr	r2, [sp, #28]
   13000:	and	r2, r2, r3
   13004:	str	r2, [sp, #28]
   13008:	b	12f68 <__assert_fail@plt+0x1f00>
   1300c:	mov	r5, #116	; 0x74
   13010:	b	12fd8 <__assert_fail@plt+0x1f70>
   13014:	mov	r5, #102	; 0x66
   13018:	ldr	r3, [sp, #32]
   1301c:	cmp	r3, #0
   13020:	bne	13bcc <__assert_fail@plt+0x2b64>
   13024:	mov	r6, #0
   13028:	b	12d08 <__assert_fail@plt+0x1ca0>
   1302c:	mov	r5, #118	; 0x76
   13030:	b	13018 <__assert_fail@plt+0x1fb0>
   13034:	mov	r7, #0
   13038:	mov	r6, #0
   1303c:	b	12c78 <__assert_fail@plt+0x1c10>
   13040:	ldr	r3, [sp, #32]
   13044:	cmp	r3, #0
   13048:	bne	13e10 <__assert_fail@plt+0x2da8>
   1304c:	mov	r7, r3
   13050:	ldr	r3, [sp, #44]	; 0x2c
   13054:	sub	r2, fp, #2
   13058:	eor	r3, r3, #1
   1305c:	clz	r2, r2
   13060:	lsr	r2, r2, #5
   13064:	ands	r3, r2, r3
   13068:	beq	13ab0 <__assert_fail@plt+0x2a48>
   1306c:	cmp	sl, r4
   13070:	movhi	r1, #39	; 0x27
   13074:	strbhi	r1, [r8, r4]
   13078:	add	r1, r4, #1
   1307c:	cmp	sl, r1
   13080:	movhi	r0, #36	; 0x24
   13084:	strbhi	r0, [r8, r1]
   13088:	add	r1, r4, #2
   1308c:	cmp	sl, r1
   13090:	movhi	r0, #39	; 0x27
   13094:	strbhi	r0, [r8, r1]
   13098:	add	r1, r4, #3
   1309c:	cmp	sl, r1
   130a0:	bls	13b10 <__assert_fail@plt+0x2aa8>
   130a4:	mov	r4, r1
   130a8:	mov	r1, #92	; 0x5c
   130ac:	strb	r1, [r8, r4]
   130b0:	mov	r1, r4
   130b4:	str	r3, [sp, #44]	; 0x2c
   130b8:	cmp	fp, #2
   130bc:	add	r4, r4, #1
   130c0:	beq	13b58 <__assert_fail@plt+0x2af0>
   130c4:	ldr	r0, [sp, #24]
   130c8:	add	r3, r9, #1
   130cc:	cmp	r3, r0
   130d0:	bcs	130e8 <__assert_fail@plt+0x2080>
   130d4:	ldr	r0, [sp, #36]	; 0x24
   130d8:	ldrb	r3, [r0, r3]
   130dc:	sub	r3, r3, #48	; 0x30
   130e0:	cmp	r3, #9
   130e4:	bls	13b68 <__assert_fail@plt+0x2b00>
   130e8:	mov	r5, #48	; 0x30
   130ec:	ldr	r3, [sp, #28]
   130f0:	eor	r3, r3, #1
   130f4:	orrs	r2, r2, r3
   130f8:	mov	r3, r6
   130fc:	moveq	r6, r2
   13100:	beq	12c7c <__assert_fail@plt+0x1c14>
   13104:	mov	r6, #0
   13108:	b	12ca4 <__assert_fail@plt+0x1c3c>
   1310c:	mov	r2, #0
   13110:	mov	r6, r2
   13114:	mov	r5, #98	; 0x62
   13118:	b	12cc4 <__assert_fail@plt+0x1c5c>
   1311c:	mov	r5, #97	; 0x61
   13120:	b	13024 <__assert_fail@plt+0x1fbc>
   13124:	mov	r3, r7
   13128:	mov	r6, r7
   1312c:	mov	r2, #0
   13130:	mov	r7, r3
   13134:	mov	r5, #32
   13138:	b	12c5c <__assert_fail@plt+0x1bf4>
   1313c:	cmp	r9, #0
   13140:	mov	r3, r7
   13144:	bne	1370c <__assert_fail@plt+0x26a4>
   13148:	mov	r6, r7
   1314c:	mov	r2, r9
   13150:	mov	r7, r3
   13154:	b	12c5c <__assert_fail@plt+0x1bf4>
   13158:	mov	r6, r7
   1315c:	b	12c78 <__assert_fail@plt+0x1c10>
   13160:	mov	r7, #0
   13164:	ldr	r3, [sp, #64]	; 0x40
   13168:	cmp	r3, #1
   1316c:	bne	137c8 <__assert_fail@plt+0x2760>
   13170:	bl	10f3c <__ctype_b_loc@plt>
   13174:	ldr	r2, [sp, #64]	; 0x40
   13178:	sxth	r3, r5
   1317c:	mov	ip, r2
   13180:	lsl	r3, r3, #1
   13184:	ldr	r2, [r0]
   13188:	ldrh	r3, [r2, r3]
   1318c:	and	r3, r3, #16384	; 0x4000
   13190:	cmp	r3, #0
   13194:	ldr	r3, [sp, #28]
   13198:	movne	r6, #1
   1319c:	moveq	r6, #0
   131a0:	movne	r2, #0
   131a4:	andeq	r2, r3, #1
   131a8:	cmp	r2, #0
   131ac:	bne	13ad8 <__assert_fail@plt+0x2a70>
   131b0:	sub	r2, fp, #2
   131b4:	clz	r2, r2
   131b8:	lsr	r2, r2, #5
   131bc:	b	12c5c <__assert_fail@plt+0x1bf4>
   131c0:	cmp	r4, #0
   131c4:	bne	13e84 <__assert_fail@plt+0x2e1c>
   131c8:	str	r4, [sp, #28]
   131cc:	cmp	sl, #0
   131d0:	bne	13ec8 <__assert_fail@plt+0x2e60>
   131d4:	ldr	r3, [pc, #772]	; 134e0 <__assert_fail@plt+0x2478>
   131d8:	mov	r4, #1
   131dc:	str	r4, [sp, #40]	; 0x28
   131e0:	str	r3, [sp, #60]	; 0x3c
   131e4:	str	r4, [sp, #52]	; 0x34
   131e8:	str	sl, [sp, #72]	; 0x48
   131ec:	str	sl, [sp, #68]	; 0x44
   131f0:	str	sl, [sp, #44]	; 0x2c
   131f4:	str	sl, [sp, #32]
   131f8:	mov	r8, #2
   131fc:	b	127c4 <__assert_fail@plt+0x175c>
   13200:	ldr	r3, [sp, #36]	; 0x24
   13204:	ldrb	r5, [r3, r9]
   13208:	cmp	r5, #126	; 0x7e
   1320c:	ldrls	pc, [pc, r5, lsl #2]
   13210:	b	13164 <__assert_fail@plt+0x20fc>
   13214:	andeq	r3, r1, r8, asr #8
   13218:	andeq	r3, r1, r4, ror #2
   1321c:	andeq	r3, r1, r4, ror #2
   13220:	andeq	r3, r1, r4, ror #2
   13224:	andeq	r3, r1, r4, ror #2
   13228:	andeq	r3, r1, r4, ror #2
   1322c:	andeq	r3, r1, r4, ror #2
   13230:	andeq	r3, r1, r4, lsr r4
   13234:	andeq	r3, r1, r0, lsr #8
   13238:	andeq	r3, r1, r8, lsl r4
   1323c:	andeq	r3, r1, r0, lsl r4
   13240:	andeq	r3, r1, r0, asr #9
   13244:	andeq	r3, r1, ip, lsr #9
   13248:	andeq	r2, r1, r4, asr #30
   1324c:	andeq	r3, r1, r4, ror #2
   13250:	andeq	r3, r1, r4, ror #2
   13254:	andeq	r3, r1, r4, ror #2
   13258:	andeq	r3, r1, r4, ror #2
   1325c:	andeq	r3, r1, r4, ror #2
   13260:	andeq	r3, r1, r4, ror #2
   13264:	andeq	r3, r1, r4, ror #2
   13268:	andeq	r3, r1, r4, ror #2
   1326c:	andeq	r3, r1, r4, ror #2
   13270:	andeq	r3, r1, r4, ror #2
   13274:	andeq	r3, r1, r4, ror #2
   13278:	andeq	r3, r1, r4, ror #2
   1327c:	andeq	r3, r1, r4, ror #2
   13280:	andeq	r3, r1, r4, ror #2
   13284:	andeq	r3, r1, r4, ror #2
   13288:	andeq	r3, r1, r4, ror #2
   1328c:	andeq	r3, r1, r4, ror #2
   13290:	andeq	r3, r1, r4, ror #2
   13294:	muleq	r1, ip, r4
   13298:	andeq	r3, r1, r8, lsl #9
   1329c:	andeq	r3, r1, r8, lsl #9
   132a0:	andeq	r3, r1, r8, ror r4
   132a4:	andeq	r3, r1, r8, lsl #9
   132a8:			; <UNDEFINED> instruction: 0x000131b0
   132ac:	andeq	r3, r1, r8, lsl #9
   132b0:	andeq	r2, r1, r8, ror lr
   132b4:	andeq	r3, r1, r8, lsl #9
   132b8:	andeq	r3, r1, r8, lsl #9
   132bc:	andeq	r3, r1, r8, lsl #9
   132c0:			; <UNDEFINED> instruction: 0x000131b0
   132c4:			; <UNDEFINED> instruction: 0x000131b0
   132c8:			; <UNDEFINED> instruction: 0x000131b0
   132cc:			; <UNDEFINED> instruction: 0x000131b0
   132d0:			; <UNDEFINED> instruction: 0x000131b0
   132d4:			; <UNDEFINED> instruction: 0x000131b0
   132d8:			; <UNDEFINED> instruction: 0x000131b0
   132dc:			; <UNDEFINED> instruction: 0x000131b0
   132e0:			; <UNDEFINED> instruction: 0x000131b0
   132e4:			; <UNDEFINED> instruction: 0x000131b0
   132e8:			; <UNDEFINED> instruction: 0x000131b0
   132ec:			; <UNDEFINED> instruction: 0x000131b0
   132f0:			; <UNDEFINED> instruction: 0x000131b0
   132f4:			; <UNDEFINED> instruction: 0x000131b0
   132f8:			; <UNDEFINED> instruction: 0x000131b0
   132fc:			; <UNDEFINED> instruction: 0x000131b0
   13300:	andeq	r3, r1, r8, lsl #9
   13304:	andeq	r3, r1, r8, lsl #9
   13308:	andeq	r3, r1, r8, lsl #9
   1330c:	andeq	r3, r1, r8, lsl #9
   13310:	andeq	r2, r1, ip, asr #28
   13314:	andeq	r3, r1, r4, ror #2
   13318:			; <UNDEFINED> instruction: 0x000131b0
   1331c:			; <UNDEFINED> instruction: 0x000131b0
   13320:			; <UNDEFINED> instruction: 0x000131b0
   13324:			; <UNDEFINED> instruction: 0x000131b0
   13328:			; <UNDEFINED> instruction: 0x000131b0
   1332c:			; <UNDEFINED> instruction: 0x000131b0
   13330:			; <UNDEFINED> instruction: 0x000131b0
   13334:			; <UNDEFINED> instruction: 0x000131b0
   13338:			; <UNDEFINED> instruction: 0x000131b0
   1333c:			; <UNDEFINED> instruction: 0x000131b0
   13340:			; <UNDEFINED> instruction: 0x000131b0
   13344:			; <UNDEFINED> instruction: 0x000131b0
   13348:			; <UNDEFINED> instruction: 0x000131b0
   1334c:			; <UNDEFINED> instruction: 0x000131b0
   13350:			; <UNDEFINED> instruction: 0x000131b0
   13354:			; <UNDEFINED> instruction: 0x000131b0
   13358:			; <UNDEFINED> instruction: 0x000131b0
   1335c:			; <UNDEFINED> instruction: 0x000131b0
   13360:			; <UNDEFINED> instruction: 0x000131b0
   13364:			; <UNDEFINED> instruction: 0x000131b0
   13368:			; <UNDEFINED> instruction: 0x000131b0
   1336c:			; <UNDEFINED> instruction: 0x000131b0
   13370:			; <UNDEFINED> instruction: 0x000131b0
   13374:			; <UNDEFINED> instruction: 0x000131b0
   13378:			; <UNDEFINED> instruction: 0x000131b0
   1337c:			; <UNDEFINED> instruction: 0x000131b0
   13380:	andeq	r3, r1, r8, lsl #9
   13384:	andeq	r2, r1, r4, lsl #28
   13388:			; <UNDEFINED> instruction: 0x000131b0
   1338c:	andeq	r3, r1, r8, lsl #9
   13390:			; <UNDEFINED> instruction: 0x000131b0
   13394:	andeq	r3, r1, r8, lsl #9
   13398:			; <UNDEFINED> instruction: 0x000131b0
   1339c:			; <UNDEFINED> instruction: 0x000131b0
   133a0:			; <UNDEFINED> instruction: 0x000131b0
   133a4:			; <UNDEFINED> instruction: 0x000131b0
   133a8:			; <UNDEFINED> instruction: 0x000131b0
   133ac:			; <UNDEFINED> instruction: 0x000131b0
   133b0:			; <UNDEFINED> instruction: 0x000131b0
   133b4:			; <UNDEFINED> instruction: 0x000131b0
   133b8:			; <UNDEFINED> instruction: 0x000131b0
   133bc:			; <UNDEFINED> instruction: 0x000131b0
   133c0:			; <UNDEFINED> instruction: 0x000131b0
   133c4:			; <UNDEFINED> instruction: 0x000131b0
   133c8:			; <UNDEFINED> instruction: 0x000131b0
   133cc:			; <UNDEFINED> instruction: 0x000131b0
   133d0:			; <UNDEFINED> instruction: 0x000131b0
   133d4:			; <UNDEFINED> instruction: 0x000131b0
   133d8:			; <UNDEFINED> instruction: 0x000131b0
   133dc:			; <UNDEFINED> instruction: 0x000131b0
   133e0:			; <UNDEFINED> instruction: 0x000131b0
   133e4:			; <UNDEFINED> instruction: 0x000131b0
   133e8:			; <UNDEFINED> instruction: 0x000131b0
   133ec:			; <UNDEFINED> instruction: 0x000131b0
   133f0:			; <UNDEFINED> instruction: 0x000131b0
   133f4:			; <UNDEFINED> instruction: 0x000131b0
   133f8:			; <UNDEFINED> instruction: 0x000131b0
   133fc:			; <UNDEFINED> instruction: 0x000131b0
   13400:	andeq	r2, r1, ip, lsl ip
   13404:	andeq	r3, r1, r8, lsl #9
   13408:	andeq	r2, r1, ip, lsl ip
   1340c:	andeq	r3, r1, r8, ror r4
   13410:	mov	r3, #110	; 0x6e
   13414:	b	12f48 <__assert_fail@plt+0x1ee0>
   13418:	mov	r3, #116	; 0x74
   1341c:	b	12f48 <__assert_fail@plt+0x1ee0>
   13420:	sub	r2, fp, #2
   13424:	mov	r3, #98	; 0x62
   13428:	clz	r2, r2
   1342c:	lsr	r2, r2, #5
   13430:	b	12e34 <__assert_fail@plt+0x1dcc>
   13434:	sub	r2, fp, #2
   13438:	mov	r3, #97	; 0x61
   1343c:	clz	r2, r2
   13440:	lsr	r2, r2, #5
   13444:	b	12e34 <__assert_fail@plt+0x1dcc>
   13448:	ldr	r3, [sp, #28]
   1344c:	cmp	r3, #0
   13450:	bne	13040 <__assert_fail@plt+0x1fd8>
   13454:	ldr	r3, [sp, #164]	; 0xa4
   13458:	tst	r3, #1
   1345c:	bne	13ad0 <__assert_fail@plt+0x2a68>
   13460:	ldr	r6, [sp, #28]
   13464:	sub	r2, fp, #2
   13468:	mov	r7, r6
   1346c:	clz	r2, r2
   13470:	lsr	r2, r2, #5
   13474:	b	12c5c <__assert_fail@plt+0x1bf4>
   13478:	sub	r2, fp, #2
   1347c:	clz	r2, r2
   13480:	lsr	r2, r2, #5
   13484:	b	12c48 <__assert_fail@plt+0x1be0>
   13488:	sub	r2, fp, #2
   1348c:	mov	r6, #0
   13490:	clz	r2, r2
   13494:	lsr	r2, r2, #5
   13498:	b	12c50 <__assert_fail@plt+0x1be8>
   1349c:	sub	r2, fp, #2
   134a0:	clz	r2, r2
   134a4:	lsr	r2, r2, #5
   134a8:	b	12c50 <__assert_fail@plt+0x1be8>
   134ac:	sub	r2, fp, #2
   134b0:	mov	r3, #102	; 0x66
   134b4:	clz	r2, r2
   134b8:	lsr	r2, r2, #5
   134bc:	b	12e34 <__assert_fail@plt+0x1dcc>
   134c0:	sub	r2, fp, #2
   134c4:	mov	r3, #118	; 0x76
   134c8:	clz	r2, r2
   134cc:	lsr	r2, r2, #5
   134d0:	b	12e34 <__assert_fail@plt+0x1dcc>
   134d4:	andeq	r7, r2, r8, lsl #30
   134d8:	andeq	r7, r1, ip
   134dc:	strdeq	r6, [r1], -r4
   134e0:	andeq	r7, r1, r8
   134e4:	ldr	r3, [sp, #48]	; 0x30
   134e8:	ldrb	r5, [r3]
   134ec:	cmp	r5, #126	; 0x7e
   134f0:	ldrls	pc, [pc, r5, lsl #2]
   134f4:	b	13160 <__assert_fail@plt+0x20f8>
   134f8:	andeq	r3, r1, r0, asr #32
   134fc:	andeq	r3, r1, r0, ror #2
   13500:	andeq	r3, r1, r0, ror #2
   13504:	andeq	r3, r1, r0, ror #2
   13508:	andeq	r3, r1, r0, ror #2
   1350c:	andeq	r3, r1, r0, ror #2
   13510:	andeq	r3, r1, r0, ror #2
   13514:	andeq	r3, r1, r8, lsr r7
   13518:	andeq	r3, r1, r0, lsr r7
   1351c:	andeq	r3, r1, ip
   13520:	ldrdeq	r2, [r1], -r4
   13524:	andeq	r3, r1, ip, lsr #32
   13528:	andeq	r3, r1, r4, lsl r0
   1352c:	andeq	r3, r1, r4, lsr #14
   13530:	andeq	r3, r1, r0, ror #2
   13534:	andeq	r3, r1, r0, ror #2
   13538:	andeq	r3, r1, r0, ror #2
   1353c:	andeq	r3, r1, r0, ror #2
   13540:	andeq	r3, r1, r0, ror #2
   13544:	andeq	r3, r1, r0, ror #2
   13548:	andeq	r3, r1, r0, ror #2
   1354c:	andeq	r3, r1, r0, ror #2
   13550:	andeq	r3, r1, r0, ror #2
   13554:	andeq	r3, r1, r0, ror #2
   13558:	andeq	r3, r1, r0, ror #2
   1355c:	andeq	r3, r1, r0, ror #2
   13560:	andeq	r3, r1, r0, ror #2
   13564:	andeq	r3, r1, r0, ror #2
   13568:	andeq	r3, r1, r0, ror #2
   1356c:	andeq	r3, r1, r0, ror #2
   13570:	andeq	r3, r1, r0, ror #2
   13574:	andeq	r3, r1, r0, ror #2
   13578:	andeq	r3, r1, ip, lsl r7
   1357c:	andeq	r3, r1, r4, lsr r0
   13580:	andeq	r3, r1, r4, lsr r0
   13584:	andeq	r3, r1, r0, lsl #14
   13588:	andeq	r3, r1, r4, lsr r0
   1358c:	strdeq	r3, [r1], -r4
   13590:	andeq	r3, r1, r4, lsr r0
   13594:	andeq	r2, r1, r4, ror lr
   13598:	andeq	r3, r1, r4, lsr r0
   1359c:	andeq	r3, r1, r4, lsr r0
   135a0:	andeq	r3, r1, r4, lsr r0
   135a4:	strdeq	r3, [r1], -r4
   135a8:	strdeq	r3, [r1], -r4
   135ac:	strdeq	r3, [r1], -r4
   135b0:	strdeq	r3, [r1], -r4
   135b4:	strdeq	r3, [r1], -r4
   135b8:	strdeq	r3, [r1], -r4
   135bc:	strdeq	r3, [r1], -r4
   135c0:	strdeq	r3, [r1], -r4
   135c4:	strdeq	r3, [r1], -r4
   135c8:	strdeq	r3, [r1], -r4
   135cc:	strdeq	r3, [r1], -r4
   135d0:	strdeq	r3, [r1], -r4
   135d4:	strdeq	r3, [r1], -r4
   135d8:	strdeq	r3, [r1], -r4
   135dc:	strdeq	r3, [r1], -r4
   135e0:	strdeq	r3, [r1], -r4
   135e4:	andeq	r3, r1, r4, lsr r0
   135e8:	andeq	r3, r1, r4, lsr r0
   135ec:	andeq	r3, r1, r4, lsr r0
   135f0:	andeq	r3, r1, r4, lsr r0
   135f4:	andeq	r2, r1, r8, asr #28
   135f8:	andeq	r3, r1, r0, ror #2
   135fc:	strdeq	r3, [r1], -r4
   13600:	strdeq	r3, [r1], -r4
   13604:	strdeq	r3, [r1], -r4
   13608:	strdeq	r3, [r1], -r4
   1360c:	strdeq	r3, [r1], -r4
   13610:	strdeq	r3, [r1], -r4
   13614:	strdeq	r3, [r1], -r4
   13618:	strdeq	r3, [r1], -r4
   1361c:	strdeq	r3, [r1], -r4
   13620:	strdeq	r3, [r1], -r4
   13624:	strdeq	r3, [r1], -r4
   13628:	strdeq	r3, [r1], -r4
   1362c:	strdeq	r3, [r1], -r4
   13630:	strdeq	r3, [r1], -r4
   13634:	strdeq	r3, [r1], -r4
   13638:	strdeq	r3, [r1], -r4
   1363c:	strdeq	r3, [r1], -r4
   13640:	strdeq	r3, [r1], -r4
   13644:	strdeq	r3, [r1], -r4
   13648:	strdeq	r3, [r1], -r4
   1364c:	strdeq	r3, [r1], -r4
   13650:	strdeq	r3, [r1], -r4
   13654:	strdeq	r3, [r1], -r4
   13658:	strdeq	r3, [r1], -r4
   1365c:	strdeq	r3, [r1], -r4
   13660:	strdeq	r3, [r1], -r4
   13664:	andeq	r3, r1, r4, lsr r0
   13668:	andeq	r2, r1, r0, lsl #28
   1366c:	strdeq	r3, [r1], -r4
   13670:	andeq	r3, r1, r4, lsr r0
   13674:	strdeq	r3, [r1], -r4
   13678:	andeq	r3, r1, r4, lsr r0
   1367c:	strdeq	r3, [r1], -r4
   13680:	strdeq	r3, [r1], -r4
   13684:	strdeq	r3, [r1], -r4
   13688:	strdeq	r3, [r1], -r4
   1368c:	strdeq	r3, [r1], -r4
   13690:	strdeq	r3, [r1], -r4
   13694:	strdeq	r3, [r1], -r4
   13698:	strdeq	r3, [r1], -r4
   1369c:	strdeq	r3, [r1], -r4
   136a0:	strdeq	r3, [r1], -r4
   136a4:	strdeq	r3, [r1], -r4
   136a8:	strdeq	r3, [r1], -r4
   136ac:	strdeq	r3, [r1], -r4
   136b0:	strdeq	r3, [r1], -r4
   136b4:	strdeq	r3, [r1], -r4
   136b8:	strdeq	r3, [r1], -r4
   136bc:	strdeq	r3, [r1], -r4
   136c0:	strdeq	r3, [r1], -r4
   136c4:	strdeq	r3, [r1], -r4
   136c8:	strdeq	r3, [r1], -r4
   136cc:	strdeq	r3, [r1], -r4
   136d0:	strdeq	r3, [r1], -r4
   136d4:	strdeq	r3, [r1], -r4
   136d8:	strdeq	r3, [r1], -r4
   136dc:	strdeq	r3, [r1], -r4
   136e0:	strdeq	r3, [r1], -r4
   136e4:	andeq	r2, r1, r8, lsl ip
   136e8:	andeq	r3, r1, r4, lsr r0
   136ec:	andeq	r2, r1, r8, lsl ip
   136f0:	andeq	r3, r1, r0, lsl #14
   136f4:	mov	r6, r7
   136f8:	mov	r7, #0
   136fc:	b	12c78 <__assert_fail@plt+0x1c10>
   13700:	cmp	r9, #0
   13704:	mov	r3, #0
   13708:	beq	13148 <__assert_fail@plt+0x20e0>
   1370c:	mov	r6, #0
   13710:	mov	r7, r3
   13714:	mov	r3, r6
   13718:	b	12c7c <__assert_fail@plt+0x1c14>
   1371c:	mov	r3, #0
   13720:	b	13128 <__assert_fail@plt+0x20c0>
   13724:	mov	r7, #0
   13728:	mov	r3, #114	; 0x72
   1372c:	b	12f48 <__assert_fail@plt+0x1ee0>
   13730:	mov	r5, #98	; 0x62
   13734:	b	12fd8 <__assert_fail@plt+0x1f70>
   13738:	mov	r5, #97	; 0x61
   1373c:	b	13018 <__assert_fail@plt+0x1fb0>
   13740:	ldr	r3, [sp, #32]
   13744:	cmp	r3, #0
   13748:	bne	13b90 <__assert_fail@plt+0x2b28>
   1374c:	add	r9, r9, #1
   13750:	ldr	r3, [sp, #44]	; 0x2c
   13754:	mov	r6, #0
   13758:	mov	r5, #92	; 0x5c
   1375c:	b	12f10 <__assert_fail@plt+0x1ea8>
   13760:	ldr	r3, [sp, #36]	; 0x24
   13764:	ldrb	r3, [r3, #1]
   13768:	adds	r3, r3, #0
   1376c:	movne	r3, #1
   13770:	b	12c34 <__assert_fail@plt+0x1bcc>
   13774:	ldr	r3, [sp, #164]	; 0xa4
   13778:	ands	r3, r3, #4
   1377c:	beq	137a0 <__assert_fail@plt+0x2738>
   13780:	ldr	r2, [sp, #24]
   13784:	add	r3, r9, #2
   13788:	cmp	r3, r2
   1378c:	bcs	137a0 <__assert_fail@plt+0x2738>
   13790:	ldr	r2, [sp, #48]	; 0x30
   13794:	ldrb	r5, [r2, #1]
   13798:	cmp	r5, #63	; 0x3f
   1379c:	beq	13c04 <__assert_fail@plt+0x2b9c>
   137a0:	mov	r2, #0
   137a4:	mov	r6, r2
   137a8:	mov	r5, #63	; 0x3f
   137ac:	b	12c5c <__assert_fail@plt+0x1bf4>
   137b0:	ldr	r3, [sp, #32]
   137b4:	cmp	r3, #0
   137b8:	bne	13b90 <__assert_fail@plt+0x2b28>
   137bc:	mov	r6, r3
   137c0:	mov	r5, #63	; 0x3f
   137c4:	b	12ca4 <__assert_fail@plt+0x1c3c>
   137c8:	ldr	r3, [sp, #24]
   137cc:	cmn	r3, #1
   137d0:	mov	r3, #0
   137d4:	str	r3, [sp, #108]	; 0x6c
   137d8:	str	r3, [sp, #112]	; 0x70
   137dc:	bne	137ec <__assert_fail@plt+0x2784>
   137e0:	ldr	r0, [sp, #36]	; 0x24
   137e4:	bl	10f54 <strlen@plt>
   137e8:	str	r0, [sp, #24]
   137ec:	mov	r3, #0
   137f0:	str	sl, [sp, #88]	; 0x58
   137f4:	ldr	sl, [sp, #36]	; 0x24
   137f8:	str	r5, [sp, #92]	; 0x5c
   137fc:	mov	r5, r3
   13800:	str	r7, [sp, #96]	; 0x60
   13804:	str	r4, [sp, #100]	; 0x64
   13808:	str	r8, [sp, #84]	; 0x54
   1380c:	ldr	r3, [sp, #24]
   13810:	add	r4, r9, r5
   13814:	add	r7, sl, r4
   13818:	sub	r2, r3, r4
   1381c:	mov	r1, r7
   13820:	add	r3, sp, #108	; 0x6c
   13824:	add	r0, sp, #104	; 0x68
   13828:	bl	15d14 <__assert_fail@plt+0x4cac>
   1382c:	subs	r8, r0, #0
   13830:	beq	13880 <__assert_fail@plt+0x2818>
   13834:	cmn	r8, #1
   13838:	beq	13be0 <__assert_fail@plt+0x2b78>
   1383c:	cmn	r8, #2
   13840:	beq	13d00 <__assert_fail@plt+0x2c98>
   13844:	ldr	r3, [sp, #32]
   13848:	cmp	fp, #2
   1384c:	movne	r3, #0
   13850:	andeq	r3, r3, #1
   13854:	cmp	r3, #0
   13858:	bne	139e0 <__assert_fail@plt+0x2978>
   1385c:	ldr	r0, [sp, #104]	; 0x68
   13860:	bl	10ea0 <iswprint@plt>
   13864:	add	r5, r5, r8
   13868:	cmp	r0, #0
   1386c:	add	r0, sp, #108	; 0x6c
   13870:	moveq	r6, #0
   13874:	bl	10e40 <mbsinit@plt>
   13878:	cmp	r0, #0
   1387c:	beq	1380c <__assert_fail@plt+0x27a4>
   13880:	ldr	r3, [sp, #28]
   13884:	mov	ip, r5
   13888:	eor	r2, r6, #1
   1388c:	ldr	r5, [sp, #92]	; 0x5c
   13890:	ldr	r7, [sp, #96]	; 0x60
   13894:	ldr	r4, [sp, #100]	; 0x64
   13898:	ldr	r8, [sp, #84]	; 0x54
   1389c:	ldr	sl, [sp, #88]	; 0x58
   138a0:	and	r2, r2, r3
   138a4:	cmp	ip, #1
   138a8:	bls	131a8 <__assert_fail@plt+0x2140>
   138ac:	add	r1, ip, r9
   138b0:	ldr	lr, [sp, #48]	; 0x30
   138b4:	mov	r0, #0
   138b8:	str	r6, [sp, #48]	; 0x30
   138bc:	mov	ip, #39	; 0x27
   138c0:	ldr	r6, [sp, #44]	; 0x2c
   138c4:	b	1397c <__assert_fail@plt+0x2914>
   138c8:	ldr	r0, [sp, #32]
   138cc:	sub	r3, fp, #2
   138d0:	cmp	r0, #0
   138d4:	clz	r3, r3
   138d8:	lsr	r3, r3, #5
   138dc:	bne	13ae4 <__assert_fail@plt+0x2a7c>
   138e0:	eor	r0, r6, #1
   138e4:	ands	r3, r3, r0
   138e8:	beq	13918 <__assert_fail@plt+0x28b0>
   138ec:	add	r0, r4, #1
   138f0:	cmp	sl, r4
   138f4:	strbhi	ip, [r8, r4]
   138f8:	cmp	sl, r0
   138fc:	movhi	r6, #36	; 0x24
   13900:	strbhi	r6, [r8, r0]
   13904:	add	r0, r4, #2
   13908:	mov	r6, r3
   1390c:	add	r4, r4, #3
   13910:	cmp	sl, r0
   13914:	strbhi	ip, [r8, r0]
   13918:	cmp	sl, r4
   1391c:	movhi	r3, #92	; 0x5c
   13920:	strbhi	r3, [r8, r4]
   13924:	add	r3, r4, #1
   13928:	cmp	sl, r3
   1392c:	lsrhi	r0, r5, #6
   13930:	addhi	r0, r0, #48	; 0x30
   13934:	strbhi	r0, [r8, r3]
   13938:	add	r0, r4, #2
   1393c:	cmp	sl, r0
   13940:	lsrhi	r3, r5, #3
   13944:	andhi	r3, r3, #7
   13948:	addhi	r3, r3, #48	; 0x30
   1394c:	add	r9, r9, #1
   13950:	strbhi	r3, [r8, r0]
   13954:	and	r5, r5, #7
   13958:	cmp	r9, r1
   1395c:	add	r5, r5, #48	; 0x30
   13960:	add	r4, r4, #3
   13964:	bcs	13b04 <__assert_fail@plt+0x2a9c>
   13968:	mov	r0, r2
   1396c:	cmp	sl, r4
   13970:	strbhi	r5, [r8, r4]
   13974:	ldrb	r5, [lr, #1]!
   13978:	add	r4, r4, #1
   1397c:	cmp	r2, #0
   13980:	bne	138c8 <__assert_fail@plt+0x2860>
   13984:	eor	r3, r0, #1
   13988:	and	r3, r3, r6
   1398c:	cmp	r7, #0
   13990:	uxtb	r3, r3
   13994:	beq	139a8 <__assert_fail@plt+0x2940>
   13998:	cmp	sl, r4
   1399c:	movhi	r7, #92	; 0x5c
   139a0:	strbhi	r7, [r8, r4]
   139a4:	add	r4, r4, #1
   139a8:	add	r9, r9, #1
   139ac:	cmp	r9, r1
   139b0:	bcs	13af8 <__assert_fail@plt+0x2a90>
   139b4:	cmp	r3, #0
   139b8:	beq	13b24 <__assert_fail@plt+0x2abc>
   139bc:	cmp	sl, r4
   139c0:	add	r3, r4, #1
   139c4:	strbhi	ip, [r8, r4]
   139c8:	mov	r7, #0
   139cc:	cmp	sl, r3
   139d0:	strbhi	ip, [r8, r3]
   139d4:	add	r4, r4, #2
   139d8:	mov	r6, r7
   139dc:	b	1396c <__assert_fail@plt+0x2904>
   139e0:	cmp	r8, #1
   139e4:	beq	1385c <__assert_fail@plt+0x27f4>
   139e8:	add	r1, r4, #1
   139ec:	add	r3, sl, r8
   139f0:	add	r1, sl, r1
   139f4:	add	r4, r3, r4
   139f8:	ldrb	r3, [r1], #1
   139fc:	sub	r3, r3, #91	; 0x5b
   13a00:	cmp	r3, #33	; 0x21
   13a04:	ldrls	pc, [pc, r3, lsl #2]
   13a08:	b	13a94 <__assert_fail@plt+0x2a2c>
   13a0c:	andeq	r3, r1, r0, lsr #21
   13a10:	andeq	r3, r1, r0, lsr #21
   13a14:	muleq	r1, r4, sl
   13a18:	andeq	r3, r1, r0, lsr #21
   13a1c:	muleq	r1, r4, sl
   13a20:	andeq	r3, r1, r0, lsr #21
   13a24:	muleq	r1, r4, sl
   13a28:	muleq	r1, r4, sl
   13a2c:	muleq	r1, r4, sl
   13a30:	muleq	r1, r4, sl
   13a34:	muleq	r1, r4, sl
   13a38:	muleq	r1, r4, sl
   13a3c:	muleq	r1, r4, sl
   13a40:	muleq	r1, r4, sl
   13a44:	muleq	r1, r4, sl
   13a48:	muleq	r1, r4, sl
   13a4c:	muleq	r1, r4, sl
   13a50:	muleq	r1, r4, sl
   13a54:	muleq	r1, r4, sl
   13a58:	muleq	r1, r4, sl
   13a5c:	muleq	r1, r4, sl
   13a60:	muleq	r1, r4, sl
   13a64:	muleq	r1, r4, sl
   13a68:	muleq	r1, r4, sl
   13a6c:	muleq	r1, r4, sl
   13a70:	muleq	r1, r4, sl
   13a74:	muleq	r1, r4, sl
   13a78:	muleq	r1, r4, sl
   13a7c:	muleq	r1, r4, sl
   13a80:	muleq	r1, r4, sl
   13a84:	muleq	r1, r4, sl
   13a88:	muleq	r1, r4, sl
   13a8c:	muleq	r1, r4, sl
   13a90:	andeq	r3, r1, r0, lsr #21
   13a94:	cmp	r4, r1
   13a98:	bne	139f8 <__assert_fail@plt+0x2990>
   13a9c:	b	1385c <__assert_fail@plt+0x27f4>
   13aa0:	ldr	fp, [sp, #84]	; 0x54
   13aa4:	ldr	sl, [sp, #88]	; 0x58
   13aa8:	mov	r8, #2
   13aac:	b	12f68 <__assert_fail@plt+0x1f00>
   13ab0:	cmp	sl, r4
   13ab4:	movls	r1, r4
   13ab8:	bls	130b8 <__assert_fail@plt+0x2050>
   13abc:	ldr	r3, [sp, #44]	; 0x2c
   13ac0:	b	130a8 <__assert_fail@plt+0x2040>
   13ac4:	str	sl, [sp, #72]	; 0x48
   13ac8:	ldr	sl, [sp, #32]
   13acc:	b	12ee0 <__assert_fail@plt+0x1e78>
   13ad0:	add	r9, r9, #1
   13ad4:	b	127d4 <__assert_fail@plt+0x176c>
   13ad8:	ldr	r2, [sp, #28]
   13adc:	mov	r6, #0
   13ae0:	b	138ac <__assert_fail@plt+0x2844>
   13ae4:	str	fp, [sp, #160]	; 0xa0
   13ae8:	str	r3, [sp, #28]
   13aec:	mov	fp, r8
   13af0:	ldr	r8, [sp, #160]	; 0xa0
   13af4:	b	12f68 <__assert_fail@plt+0x1f00>
   13af8:	str	r6, [sp, #44]	; 0x2c
   13afc:	ldr	r6, [sp, #48]	; 0x30
   13b00:	b	12f10 <__assert_fail@plt+0x1ea8>
   13b04:	str	r6, [sp, #44]	; 0x2c
   13b08:	ldr	r6, [sp, #48]	; 0x30
   13b0c:	b	12d1c <__assert_fail@plt+0x1cb4>
   13b10:	add	r4, r4, #4
   13b14:	str	r3, [sp, #44]	; 0x2c
   13b18:	mov	r6, #0
   13b1c:	mov	r5, #48	; 0x30
   13b20:	b	12ca4 <__assert_fail@plt+0x1c3c>
   13b24:	mov	r7, r3
   13b28:	b	1396c <__assert_fail@plt+0x2904>
   13b2c:	ldr	r3, [pc, #-1624]	; 134dc <__assert_fail@plt+0x2474>
   13b30:	mov	r4, #1
   13b34:	str	r4, [sp, #40]	; 0x28
   13b38:	str	r4, [sp, #28]
   13b3c:	str	r4, [sp, #52]	; 0x34
   13b40:	str	sl, [sp, #72]	; 0x48
   13b44:	str	sl, [sp, #68]	; 0x44
   13b48:	str	sl, [sp, #44]	; 0x2c
   13b4c:	str	sl, [sp, #32]
   13b50:	str	r3, [sp, #60]	; 0x3c
   13b54:	b	127c4 <__assert_fail@plt+0x175c>
   13b58:	mov	r3, r6
   13b5c:	mov	r5, #48	; 0x30
   13b60:	mov	r6, #0
   13b64:	b	12ca4 <__assert_fail@plt+0x1c3c>
   13b68:	cmp	sl, r4
   13b6c:	movhi	r3, #48	; 0x30
   13b70:	strbhi	r3, [r8, r4]
   13b74:	add	r3, r1, #2
   13b78:	cmp	sl, r3
   13b7c:	movhi	r0, #48	; 0x30
   13b80:	strbhi	r0, [r8, r3]
   13b84:	add	r4, r1, #3
   13b88:	mov	r5, #48	; 0x30
   13b8c:	b	130ec <__assert_fail@plt+0x2084>
   13b90:	str	fp, [sp, #160]	; 0xa0
   13b94:	mov	fp, r8
   13b98:	ldr	r8, [sp, #160]	; 0xa0
   13b9c:	b	12f68 <__assert_fail@plt+0x1f00>
   13ba0:	ldr	r2, [sp, #80]	; 0x50
   13ba4:	ldrb	r3, [r2]
   13ba8:	cmp	r3, #0
   13bac:	beq	12794 <__assert_fail@plt+0x172c>
   13bb0:	cmp	sl, r4
   13bb4:	strbhi	r3, [fp, r4]
   13bb8:	ldrb	r3, [r2, #1]!
   13bbc:	add	r4, r4, #1
   13bc0:	cmp	r3, #0
   13bc4:	bne	13bb0 <__assert_fail@plt+0x2b48>
   13bc8:	b	12794 <__assert_fail@plt+0x172c>
   13bcc:	str	fp, [sp, #160]	; 0xa0
   13bd0:	mov	r3, #0
   13bd4:	mov	fp, r8
   13bd8:	ldr	r8, [sp, #160]	; 0xa0
   13bdc:	b	12ffc <__assert_fail@plt+0x1f94>
   13be0:	mov	ip, r5
   13be4:	ldr	r7, [sp, #96]	; 0x60
   13be8:	ldr	r5, [sp, #92]	; 0x5c
   13bec:	ldr	r4, [sp, #100]	; 0x64
   13bf0:	ldr	r8, [sp, #84]	; 0x54
   13bf4:	ldr	sl, [sp, #88]	; 0x58
   13bf8:	ldr	r2, [sp, #28]
   13bfc:	mov	r6, #0
   13c00:	b	138a4 <__assert_fail@plt+0x283c>
   13c04:	ldr	r2, [sp, #36]	; 0x24
   13c08:	ldrb	r1, [r2, r3]
   13c0c:	sub	r2, r1, #33	; 0x21
   13c10:	cmp	r2, #29
   13c14:	ldrls	pc, [pc, r2, lsl #2]
   13c18:	b	13cf4 <__assert_fail@plt+0x2c8c>
   13c1c:	muleq	r1, r4, ip
   13c20:	strdeq	r3, [r1], -r4
   13c24:	strdeq	r3, [r1], -r4
   13c28:	strdeq	r3, [r1], -r4
   13c2c:	strdeq	r3, [r1], -r4
   13c30:	strdeq	r3, [r1], -r4
   13c34:	muleq	r1, r4, ip
   13c38:	muleq	r1, r4, ip
   13c3c:	muleq	r1, r4, ip
   13c40:	strdeq	r3, [r1], -r4
   13c44:	strdeq	r3, [r1], -r4
   13c48:	strdeq	r3, [r1], -r4
   13c4c:	muleq	r1, r4, ip
   13c50:	strdeq	r3, [r1], -r4
   13c54:	muleq	r1, r4, ip
   13c58:	strdeq	r3, [r1], -r4
   13c5c:	strdeq	r3, [r1], -r4
   13c60:	strdeq	r3, [r1], -r4
   13c64:	strdeq	r3, [r1], -r4
   13c68:	strdeq	r3, [r1], -r4
   13c6c:	strdeq	r3, [r1], -r4
   13c70:	strdeq	r3, [r1], -r4
   13c74:	strdeq	r3, [r1], -r4
   13c78:	strdeq	r3, [r1], -r4
   13c7c:	strdeq	r3, [r1], -r4
   13c80:	strdeq	r3, [r1], -r4
   13c84:	strdeq	r3, [r1], -r4
   13c88:	muleq	r1, r4, ip
   13c8c:	muleq	r1, r4, ip
   13c90:	muleq	r1, r4, ip
   13c94:	ldr	r2, [sp, #32]
   13c98:	cmp	r2, #0
   13c9c:	bne	13da0 <__assert_fail@plt+0x2d38>
   13ca0:	cmp	sl, r4
   13ca4:	movhi	r2, #63	; 0x3f
   13ca8:	strbhi	r2, [r8, r4]
   13cac:	add	r2, r4, #1
   13cb0:	cmp	sl, r2
   13cb4:	movhi	r0, #34	; 0x22
   13cb8:	strbhi	r0, [r8, r2]
   13cbc:	add	r2, r4, #2
   13cc0:	cmp	sl, r2
   13cc4:	movhi	r0, #34	; 0x22
   13cc8:	strbhi	r0, [r8, r2]
   13ccc:	add	r2, r4, #3
   13cd0:	cmp	sl, r2
   13cd4:	movhi	r0, #63	; 0x3f
   13cd8:	strbhi	r0, [r8, r2]
   13cdc:	mov	r2, #0
   13ce0:	add	r4, r4, #4
   13ce4:	mov	r5, r1
   13ce8:	mov	r9, r3
   13cec:	mov	r6, r2
   13cf0:	b	130ec <__assert_fail@plt+0x2084>
   13cf4:	mov	r2, #0
   13cf8:	mov	r6, r2
   13cfc:	b	12c5c <__assert_fail@plt+0x1bf4>
   13d00:	ldr	r0, [sp, #24]
   13d04:	mov	r1, r4
   13d08:	cmp	r1, r0
   13d0c:	mov	r2, r7
   13d10:	mov	r3, r5
   13d14:	mov	ip, r5
   13d18:	ldr	r7, [sp, #96]	; 0x60
   13d1c:	ldr	r5, [sp, #92]	; 0x5c
   13d20:	ldr	r4, [sp, #100]	; 0x64
   13d24:	ldr	r8, [sp, #84]	; 0x54
   13d28:	ldr	sl, [sp, #88]	; 0x58
   13d2c:	bcs	13d60 <__assert_fail@plt+0x2cf8>
   13d30:	ldrb	r6, [r2]
   13d34:	cmp	r6, #0
   13d38:	bne	13d4c <__assert_fail@plt+0x2ce4>
   13d3c:	b	13e7c <__assert_fail@plt+0x2e14>
   13d40:	ldrb	r6, [r2, #1]!
   13d44:	cmp	r6, #0
   13d48:	beq	13e04 <__assert_fail@plt+0x2d9c>
   13d4c:	add	r3, r3, #1
   13d50:	add	r1, r9, r3
   13d54:	cmp	r1, r0
   13d58:	bcc	13d40 <__assert_fail@plt+0x2cd8>
   13d5c:	mov	ip, r3
   13d60:	ldr	r2, [sp, #28]
   13d64:	mov	r6, #0
   13d68:	b	138a4 <__assert_fail@plt+0x283c>
   13d6c:	mov	r3, #1
   13d70:	str	r3, [sp, #40]	; 0x28
   13d74:	str	r3, [sp, #32]
   13d78:	str	r3, [sp, #28]
   13d7c:	str	r3, [sp, #52]	; 0x34
   13d80:	ldr	r3, [pc, #-2220]	; 134dc <__assert_fail@plt+0x2474>
   13d84:	mov	r2, #0
   13d88:	str	r2, [sp, #68]	; 0x44
   13d8c:	str	r2, [sp, #44]	; 0x2c
   13d90:	str	r2, [sp, #72]	; 0x48
   13d94:	mov	r4, r2
   13d98:	str	r3, [sp, #60]	; 0x3c
   13d9c:	b	127c4 <__assert_fail@plt+0x175c>
   13da0:	str	fp, [sp, #160]	; 0xa0
   13da4:	mov	fp, r8
   13da8:	ldr	r8, [sp, #160]	; 0xa0
   13dac:	b	12f74 <__assert_fail@plt+0x1f0c>
   13db0:	mov	r2, r3
   13db4:	ldr	r3, [sp, #60]	; 0x3c
   13db8:	cmp	r3, #0
   13dbc:	moveq	r2, #0
   13dc0:	andne	r2, r2, #1
   13dc4:	cmp	r2, #0
   13dc8:	beq	13df4 <__assert_fail@plt+0x2d8c>
   13dcc:	mov	r2, r3
   13dd0:	ldrb	r3, [r3]
   13dd4:	cmp	r3, #0
   13dd8:	beq	13df4 <__assert_fail@plt+0x2d8c>
   13ddc:	cmp	sl, r4
   13de0:	strbhi	r3, [fp, r4]
   13de4:	ldrb	r3, [r2, #1]!
   13de8:	add	r4, r4, #1
   13dec:	cmp	r3, #0
   13df0:	bne	13ddc <__assert_fail@plt+0x2d74>
   13df4:	cmp	sl, r4
   13df8:	movhi	r3, #0
   13dfc:	strbhi	r3, [fp, r4]
   13e00:	b	12fb4 <__assert_fail@plt+0x1f4c>
   13e04:	mov	ip, r3
   13e08:	ldr	r2, [sp, #28]
   13e0c:	b	138a4 <__assert_fail@plt+0x283c>
   13e10:	str	fp, [sp, #160]	; 0xa0
   13e14:	mov	fp, r8
   13e18:	ldr	r8, [sp, #160]	; 0xa0
   13e1c:	sub	r3, r8, #2
   13e20:	clz	r3, r3
   13e24:	lsr	r3, r3, #5
   13e28:	str	r3, [sp, #28]
   13e2c:	b	12f68 <__assert_fail@plt+0x1f00>
   13e30:	ldr	r3, [sp, #76]	; 0x4c
   13e34:	mov	ip, #5
   13e38:	str	r3, [sp, #16]
   13e3c:	ldr	r3, [sp, #80]	; 0x50
   13e40:	ldr	r2, [sp, #36]	; 0x24
   13e44:	str	r3, [sp, #12]
   13e48:	ldr	r3, [sp, #56]	; 0x38
   13e4c:	ldr	r1, [sp, #72]	; 0x48
   13e50:	str	r3, [sp, #8]
   13e54:	ldr	r3, [sp, #164]	; 0xa4
   13e58:	mov	r0, fp
   13e5c:	str	r3, [sp, #4]
   13e60:	str	ip, [sp]
   13e64:	ldr	r3, [sp, #24]
   13e68:	bl	126cc <__assert_fail@plt+0x1664>
   13e6c:	mov	r4, r0
   13e70:	b	12fb4 <__assert_fail@plt+0x1f4c>
   13e74:	mov	r8, #2
   13e78:	b	12f68 <__assert_fail@plt+0x1f00>
   13e7c:	ldr	r2, [sp, #28]
   13e80:	b	138a4 <__assert_fail@plt+0x283c>
   13e84:	mov	r3, #0
   13e88:	str	r3, [sp, #68]	; 0x44
   13e8c:	str	r3, [sp, #44]	; 0x2c
   13e90:	str	r3, [sp, #72]	; 0x48
   13e94:	str	r3, [sp, #28]
   13e98:	mov	r4, r3
   13e9c:	ldr	r3, [pc, #-2500]	; 134e0 <__assert_fail@plt+0x2478>
   13ea0:	mov	r2, #1
   13ea4:	str	r2, [sp, #40]	; 0x28
   13ea8:	str	r2, [sp, #32]
   13eac:	str	r2, [sp, #52]	; 0x34
   13eb0:	str	r3, [sp, #60]	; 0x3c
   13eb4:	b	127c4 <__assert_fail@plt+0x175c>
   13eb8:	bl	10e7c <__stack_chk_fail@plt>
   13ebc:	mov	r5, r3
   13ec0:	mov	r6, #0
   13ec4:	b	12cb8 <__assert_fail@plt+0x1c50>
   13ec8:	mov	r3, #0
   13ecc:	mov	r2, #1
   13ed0:	str	r3, [sp, #44]	; 0x2c
   13ed4:	str	r3, [sp, #72]	; 0x48
   13ed8:	str	r2, [sp, #40]	; 0x28
   13edc:	b	12dd4 <__assert_fail@plt+0x1d6c>
   13ee0:	bl	1105c <abort@plt>
   13ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ee8:	sub	sp, sp, #44	; 0x2c
   13eec:	mov	r6, r0
   13ef0:	mov	r4, r3
   13ef4:	mov	sl, r1
   13ef8:	mov	fp, r2
   13efc:	bl	10f78 <__errno_location@plt>
   13f00:	ldr	r7, [pc, #364]	; 14074 <__assert_fail@plt+0x300c>
   13f04:	cmp	r6, #0
   13f08:	ldr	r5, [r7]
   13f0c:	ldr	r3, [r0]
   13f10:	str	r3, [sp, #24]
   13f14:	blt	14070 <__assert_fail@plt+0x3008>
   13f18:	ldr	r3, [r7, #4]
   13f1c:	mov	r8, r0
   13f20:	cmp	r3, r6
   13f24:	bgt	13f70 <__assert_fail@plt+0x2f08>
   13f28:	cmn	r6, #-268435454	; 0xf0000002
   13f2c:	bgt	1406c <__assert_fail@plt+0x3004>
   13f30:	add	r9, r6, #1
   13f34:	add	r3, r7, #8
   13f38:	cmp	r5, r3
   13f3c:	lsl	r1, r9, #3
   13f40:	beq	1404c <__assert_fail@plt+0x2fe4>
   13f44:	mov	r0, r5
   13f48:	bl	14cd8 <__assert_fail@plt+0x3c70>
   13f4c:	mov	r5, r0
   13f50:	str	r0, [r7]
   13f54:	ldr	r0, [r7, #4]
   13f58:	mov	r1, #0
   13f5c:	sub	r2, r9, r0
   13f60:	add	r0, r5, r0, lsl #3
   13f64:	lsl	r2, r2, #3
   13f68:	bl	10f90 <memset@plt>
   13f6c:	str	r9, [r7, #4]
   13f70:	add	r3, r5, r6, lsl #3
   13f74:	ldr	r1, [r4, #4]
   13f78:	ldr	r7, [r3, #4]
   13f7c:	ldr	r9, [r5, r6, lsl #3]
   13f80:	ldr	r2, [r4, #40]	; 0x28
   13f84:	ldr	ip, [r4, #44]	; 0x2c
   13f88:	str	r3, [sp, #28]
   13f8c:	ldr	r3, [r4]
   13f90:	orr	r1, r1, #1
   13f94:	add	lr, r4, #8
   13f98:	str	r1, [sp, #36]	; 0x24
   13f9c:	str	r1, [sp, #4]
   13fa0:	str	r2, [sp, #12]
   13fa4:	str	r3, [sp]
   13fa8:	mov	r0, r7
   13fac:	mov	r1, r9
   13fb0:	str	ip, [sp, #16]
   13fb4:	str	lr, [sp, #8]
   13fb8:	mov	r3, fp
   13fbc:	mov	r2, sl
   13fc0:	str	lr, [sp, #32]
   13fc4:	bl	126cc <__assert_fail@plt+0x1664>
   13fc8:	cmp	r9, r0
   13fcc:	bhi	14038 <__assert_fail@plt+0x2fd0>
   13fd0:	ldr	r3, [pc, #160]	; 14078 <__assert_fail@plt+0x3010>
   13fd4:	add	r9, r0, #1
   13fd8:	cmp	r7, r3
   13fdc:	str	r9, [r5, r6, lsl #3]
   13fe0:	beq	13fec <__assert_fail@plt+0x2f84>
   13fe4:	mov	r0, r7
   13fe8:	bl	10e1c <free@plt>
   13fec:	mov	r0, r9
   13ff0:	bl	14c7c <__assert_fail@plt+0x3c14>
   13ff4:	ldr	lr, [sp, #28]
   13ff8:	ldr	ip, [r4, #44]	; 0x2c
   13ffc:	ldr	r5, [r4, #40]	; 0x28
   14000:	mov	r3, fp
   14004:	mov	r2, sl
   14008:	mov	r1, r9
   1400c:	str	r0, [lr, #4]
   14010:	ldr	lr, [r4]
   14014:	ldr	r4, [sp, #32]
   14018:	str	ip, [sp, #16]
   1401c:	str	r4, [sp, #8]
   14020:	ldr	r4, [sp, #36]	; 0x24
   14024:	str	r5, [sp, #12]
   14028:	str	r4, [sp, #4]
   1402c:	str	lr, [sp]
   14030:	mov	r7, r0
   14034:	bl	126cc <__assert_fail@plt+0x1664>
   14038:	ldr	r3, [sp, #24]
   1403c:	mov	r0, r7
   14040:	str	r3, [r8]
   14044:	add	sp, sp, #44	; 0x2c
   14048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1404c:	mov	r0, #0
   14050:	bl	14cd8 <__assert_fail@plt+0x3c70>
   14054:	ldr	r3, [pc, #32]	; 1407c <__assert_fail@plt+0x3014>
   14058:	mov	r5, r0
   1405c:	ldm	r3, {r0, r1}
   14060:	str	r5, [r7]
   14064:	stm	r5, {r0, r1}
   14068:	b	13f54 <__assert_fail@plt+0x2eec>
   1406c:	bl	14ec4 <__assert_fail@plt+0x3e5c>
   14070:	bl	1105c <abort@plt>
   14074:	andeq	r8, r2, r0, asr #2
   14078:	andeq	r8, r2, r8, asr r5
   1407c:	andeq	r8, r2, r8, asr #2
   14080:	push	{r4, r5, r6, lr}
   14084:	mov	r5, r0
   14088:	bl	10f78 <__errno_location@plt>
   1408c:	cmp	r5, #0
   14090:	mov	r1, #48	; 0x30
   14094:	mov	r4, r0
   14098:	ldr	r0, [pc, #16]	; 140b0 <__assert_fail@plt+0x3048>
   1409c:	ldr	r6, [r4]
   140a0:	movne	r0, r5
   140a4:	bl	14e84 <__assert_fail@plt+0x3e1c>
   140a8:	str	r6, [r4]
   140ac:	pop	{r4, r5, r6, pc}
   140b0:	andeq	r8, r2, r8, asr r6
   140b4:	ldr	r3, [pc, #12]	; 140c8 <__assert_fail@plt+0x3060>
   140b8:	cmp	r0, #0
   140bc:	moveq	r0, r3
   140c0:	ldr	r0, [r0]
   140c4:	bx	lr
   140c8:	andeq	r8, r2, r8, asr r6
   140cc:	ldr	r3, [pc, #12]	; 140e0 <__assert_fail@plt+0x3078>
   140d0:	cmp	r0, #0
   140d4:	moveq	r0, r3
   140d8:	str	r1, [r0]
   140dc:	bx	lr
   140e0:	andeq	r8, r2, r8, asr r6
   140e4:	ldr	r3, [pc, #52]	; 14120 <__assert_fail@plt+0x30b8>
   140e8:	cmp	r0, #0
   140ec:	moveq	r0, r3
   140f0:	add	r3, r0, #8
   140f4:	push	{lr}		; (str lr, [sp, #-4]!)
   140f8:	lsr	lr, r1, #5
   140fc:	and	r1, r1, #31
   14100:	ldr	ip, [r3, lr, lsl #2]
   14104:	lsr	r0, ip, r1
   14108:	eor	r2, r2, r0
   1410c:	and	r2, r2, #1
   14110:	and	r0, r0, #1
   14114:	eor	r1, ip, r2, lsl r1
   14118:	str	r1, [r3, lr, lsl #2]
   1411c:	pop	{pc}		; (ldr pc, [sp], #4)
   14120:	andeq	r8, r2, r8, asr r6
   14124:	ldr	r3, [pc, #16]	; 1413c <__assert_fail@plt+0x30d4>
   14128:	cmp	r0, #0
   1412c:	movne	r3, r0
   14130:	ldr	r0, [r3, #4]
   14134:	str	r1, [r3, #4]
   14138:	bx	lr
   1413c:	andeq	r8, r2, r8, asr r6
   14140:	ldr	r3, [pc, #44]	; 14174 <__assert_fail@plt+0x310c>
   14144:	cmp	r0, #0
   14148:	moveq	r0, r3
   1414c:	mov	ip, #10
   14150:	cmp	r2, #0
   14154:	cmpne	r1, #0
   14158:	str	ip, [r0]
   1415c:	beq	1416c <__assert_fail@plt+0x3104>
   14160:	str	r1, [r0, #40]	; 0x28
   14164:	str	r2, [r0, #44]	; 0x2c
   14168:	bx	lr
   1416c:	push	{r4, lr}
   14170:	bl	1105c <abort@plt>
   14174:	andeq	r8, r2, r8, asr r6
   14178:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1417c:	sub	sp, sp, #24
   14180:	ldr	ip, [pc, #108]	; 141f4 <__assert_fail@plt+0x318c>
   14184:	ldr	r4, [sp, #56]	; 0x38
   14188:	mov	r9, r2
   1418c:	cmp	r4, #0
   14190:	moveq	r4, ip
   14194:	mov	sl, r3
   14198:	mov	r7, r0
   1419c:	mov	r8, r1
   141a0:	bl	10f78 <__errno_location@plt>
   141a4:	ldr	r3, [r4, #44]	; 0x2c
   141a8:	mov	r1, r8
   141ac:	ldr	r6, [r0]
   141b0:	str	r3, [sp, #16]
   141b4:	ldr	r2, [r4, #40]	; 0x28
   141b8:	add	r3, r4, #8
   141bc:	str	r3, [sp, #8]
   141c0:	str	r2, [sp, #12]
   141c4:	ldr	r2, [r4, #4]
   141c8:	mov	r5, r0
   141cc:	str	r2, [sp, #4]
   141d0:	ldr	ip, [r4]
   141d4:	mov	r3, sl
   141d8:	mov	r2, r9
   141dc:	mov	r0, r7
   141e0:	str	ip, [sp]
   141e4:	bl	126cc <__assert_fail@plt+0x1664>
   141e8:	str	r6, [r5]
   141ec:	add	sp, sp, #24
   141f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   141f4:	andeq	r8, r2, r8, asr r6
   141f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141fc:	cmp	r3, #0
   14200:	sub	sp, sp, #44	; 0x2c
   14204:	ldr	r4, [pc, #192]	; 142cc <__assert_fail@plt+0x3264>
   14208:	mov	r6, r2
   1420c:	movne	r4, r3
   14210:	mov	r9, r1
   14214:	mov	r8, r0
   14218:	bl	10f78 <__errno_location@plt>
   1421c:	ldr	r3, [r4, #44]	; 0x2c
   14220:	ldr	r5, [r4, #4]
   14224:	add	sl, r4, #8
   14228:	cmp	r6, #0
   1422c:	orreq	r5, r5, #1
   14230:	mov	r1, #0
   14234:	ldr	r2, [r0]
   14238:	str	r3, [sp, #16]
   1423c:	ldr	r3, [r4, #40]	; 0x28
   14240:	stmib	sp, {r5, sl}
   14244:	str	r3, [sp, #12]
   14248:	ldr	r3, [r4]
   1424c:	mov	r7, r0
   14250:	str	r2, [sp, #28]
   14254:	str	r3, [sp]
   14258:	mov	r2, r8
   1425c:	mov	r3, r9
   14260:	mov	r0, r1
   14264:	bl	126cc <__assert_fail@plt+0x1664>
   14268:	add	r1, r0, #1
   1426c:	mov	fp, r0
   14270:	mov	r0, r1
   14274:	str	r1, [sp, #36]	; 0x24
   14278:	bl	14c7c <__assert_fail@plt+0x3c14>
   1427c:	ldr	r3, [r4, #44]	; 0x2c
   14280:	mov	r2, r8
   14284:	str	r3, [sp, #16]
   14288:	ldr	r3, [r4, #40]	; 0x28
   1428c:	str	r5, [sp, #4]
   14290:	str	r3, [sp, #12]
   14294:	str	sl, [sp, #8]
   14298:	ldr	ip, [r4]
   1429c:	ldr	r1, [sp, #36]	; 0x24
   142a0:	mov	r3, r9
   142a4:	str	ip, [sp]
   142a8:	str	r0, [sp, #32]
   142ac:	bl	126cc <__assert_fail@plt+0x1664>
   142b0:	ldr	r2, [sp, #28]
   142b4:	cmp	r6, #0
   142b8:	str	r2, [r7]
   142bc:	ldr	r0, [sp, #32]
   142c0:	strne	fp, [r6]
   142c4:	add	sp, sp, #44	; 0x2c
   142c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142cc:	andeq	r8, r2, r8, asr r6
   142d0:	mov	r3, r2
   142d4:	mov	r2, #0
   142d8:	b	141f8 <__assert_fail@plt+0x3190>
   142dc:	push	{r4, r5, r6, r7, r8, lr}
   142e0:	ldr	r6, [pc, #112]	; 14358 <__assert_fail@plt+0x32f0>
   142e4:	ldr	r3, [r6, #4]
   142e8:	ldr	r7, [r6]
   142ec:	cmp	r3, #1
   142f0:	ble	14314 <__assert_fail@plt+0x32ac>
   142f4:	sub	r5, r7, #8
   142f8:	add	r5, r5, r3, lsl #3
   142fc:	mov	r4, r7
   14300:	ldr	r0, [r4, #12]
   14304:	add	r4, r4, #8
   14308:	bl	10e1c <free@plt>
   1430c:	cmp	r4, r5
   14310:	bne	14300 <__assert_fail@plt+0x3298>
   14314:	ldr	r0, [r7, #4]
   14318:	ldr	r4, [pc, #60]	; 1435c <__assert_fail@plt+0x32f4>
   1431c:	cmp	r0, r4
   14320:	beq	14334 <__assert_fail@plt+0x32cc>
   14324:	bl	10e1c <free@plt>
   14328:	mov	r3, #256	; 0x100
   1432c:	str	r4, [r6, #12]
   14330:	str	r3, [r6, #8]
   14334:	ldr	r4, [pc, #36]	; 14360 <__assert_fail@plt+0x32f8>
   14338:	cmp	r7, r4
   1433c:	beq	1434c <__assert_fail@plt+0x32e4>
   14340:	mov	r0, r7
   14344:	bl	10e1c <free@plt>
   14348:	str	r4, [r6]
   1434c:	mov	r3, #1
   14350:	str	r3, [r6, #4]
   14354:	pop	{r4, r5, r6, r7, r8, pc}
   14358:	andeq	r8, r2, r0, asr #2
   1435c:	andeq	r8, r2, r8, asr r5
   14360:	andeq	r8, r2, r8, asr #2
   14364:	ldr	r3, [pc, #4]	; 14370 <__assert_fail@plt+0x3308>
   14368:	mvn	r2, #0
   1436c:	b	13ee4 <__assert_fail@plt+0x2e7c>
   14370:	andeq	r8, r2, r8, asr r6
   14374:	ldr	r3, [pc]	; 1437c <__assert_fail@plt+0x3314>
   14378:	b	13ee4 <__assert_fail@plt+0x2e7c>
   1437c:	andeq	r8, r2, r8, asr r6
   14380:	mov	r1, r0
   14384:	ldr	r3, [pc, #8]	; 14394 <__assert_fail@plt+0x332c>
   14388:	mvn	r2, #0
   1438c:	mov	r0, #0
   14390:	b	13ee4 <__assert_fail@plt+0x2e7c>
   14394:	andeq	r8, r2, r8, asr r6
   14398:	mov	r2, r1
   1439c:	ldr	r3, [pc, #8]	; 143ac <__assert_fail@plt+0x3344>
   143a0:	mov	r1, r0
   143a4:	mov	r0, #0
   143a8:	b	13ee4 <__assert_fail@plt+0x2e7c>
   143ac:	andeq	r8, r2, r8, asr r6
   143b0:	push	{r4, r5, r6, lr}
   143b4:	sub	sp, sp, #56	; 0x38
   143b8:	ldr	r4, [pc, #68]	; 14404 <__assert_fail@plt+0x339c>
   143bc:	mov	r6, r2
   143c0:	mov	r5, r0
   143c4:	ldr	r3, [r4]
   143c8:	add	r0, sp, #4
   143cc:	str	r3, [sp, #52]	; 0x34
   143d0:	bl	1255c <__assert_fail@plt+0x14f4>
   143d4:	add	r3, sp, #4
   143d8:	mvn	r2, #0
   143dc:	mov	r1, r6
   143e0:	mov	r0, r5
   143e4:	bl	13ee4 <__assert_fail@plt+0x2e7c>
   143e8:	ldr	r2, [sp, #52]	; 0x34
   143ec:	ldr	r3, [r4]
   143f0:	cmp	r2, r3
   143f4:	bne	14400 <__assert_fail@plt+0x3398>
   143f8:	add	sp, sp, #56	; 0x38
   143fc:	pop	{r4, r5, r6, pc}
   14400:	bl	10e7c <__stack_chk_fail@plt>
   14404:	andeq	r7, r2, r8, lsl #30
   14408:	push	{r4, r5, r6, r7, lr}
   1440c:	sub	sp, sp, #60	; 0x3c
   14410:	ldr	r4, [pc, #72]	; 14460 <__assert_fail@plt+0x33f8>
   14414:	mov	r6, r2
   14418:	mov	r7, r3
   1441c:	ldr	ip, [r4]
   14420:	mov	r5, r0
   14424:	add	r0, sp, #4
   14428:	str	ip, [sp, #52]	; 0x34
   1442c:	bl	1255c <__assert_fail@plt+0x14f4>
   14430:	add	r3, sp, #4
   14434:	mov	r2, r7
   14438:	mov	r1, r6
   1443c:	mov	r0, r5
   14440:	bl	13ee4 <__assert_fail@plt+0x2e7c>
   14444:	ldr	r2, [sp, #52]	; 0x34
   14448:	ldr	r3, [r4]
   1444c:	cmp	r2, r3
   14450:	bne	1445c <__assert_fail@plt+0x33f4>
   14454:	add	sp, sp, #60	; 0x3c
   14458:	pop	{r4, r5, r6, r7, pc}
   1445c:	bl	10e7c <__stack_chk_fail@plt>
   14460:	andeq	r7, r2, r8, lsl #30
   14464:	mov	r2, r1
   14468:	mov	r1, r0
   1446c:	mov	r0, #0
   14470:	b	143b0 <__assert_fail@plt+0x3348>
   14474:	mov	r3, r2
   14478:	mov	r2, r1
   1447c:	mov	r1, r0
   14480:	mov	r0, #0
   14484:	b	14408 <__assert_fail@plt+0x33a0>
   14488:	push	{r4, r5, r6, r7, r8, r9, lr}
   1448c:	mov	r4, r2
   14490:	ldr	lr, [pc, #128]	; 14518 <__assert_fail@plt+0x34b0>
   14494:	mov	r8, r0
   14498:	mov	r9, r1
   1449c:	ldm	lr!, {r0, r1, r2, r3}
   144a0:	sub	sp, sp, #60	; 0x3c
   144a4:	add	ip, sp, #4
   144a8:	lsr	r6, r4, #5
   144ac:	stmia	ip!, {r0, r1, r2, r3}
   144b0:	add	r7, sp, #12
   144b4:	ldm	lr!, {r0, r1, r2, r3}
   144b8:	and	r4, r4, #31
   144bc:	ldr	r5, [pc, #88]	; 1451c <__assert_fail@plt+0x34b4>
   144c0:	stmia	ip!, {r0, r1, r2, r3}
   144c4:	ldm	lr, {r0, r1, r2, r3}
   144c8:	stm	ip, {r0, r1, r2, r3}
   144cc:	mov	r2, r9
   144d0:	ldr	r3, [r7, r6, lsl #2]
   144d4:	ldr	ip, [r5]
   144d8:	mov	r1, r8
   144dc:	mvn	r0, r3, lsr r4
   144e0:	and	r0, r0, #1
   144e4:	str	ip, [sp, #52]	; 0x34
   144e8:	eor	r4, r3, r0, lsl r4
   144ec:	add	r3, sp, #4
   144f0:	mov	r0, #0
   144f4:	str	r4, [r7, r6, lsl #2]
   144f8:	bl	13ee4 <__assert_fail@plt+0x2e7c>
   144fc:	ldr	r2, [sp, #52]	; 0x34
   14500:	ldr	r3, [r5]
   14504:	cmp	r2, r3
   14508:	bne	14514 <__assert_fail@plt+0x34ac>
   1450c:	add	sp, sp, #60	; 0x3c
   14510:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14514:	bl	10e7c <__stack_chk_fail@plt>
   14518:	andeq	r8, r2, r8, asr r6
   1451c:	andeq	r7, r2, r8, lsl #30
   14520:	mov	r2, r1
   14524:	mvn	r1, #0
   14528:	b	14488 <__assert_fail@plt+0x3420>
   1452c:	mov	r2, #58	; 0x3a
   14530:	mvn	r1, #0
   14534:	b	14488 <__assert_fail@plt+0x3420>
   14538:	mov	r2, #58	; 0x3a
   1453c:	b	14488 <__assert_fail@plt+0x3420>
   14540:	push	{r4, r5, r6, r7, r8, lr}
   14544:	sub	sp, sp, #104	; 0x68
   14548:	ldr	r5, [pc, #120]	; 145c8 <__assert_fail@plt+0x3560>
   1454c:	mov	r6, r0
   14550:	mov	r0, sp
   14554:	ldr	r3, [r5]
   14558:	mov	r7, r2
   1455c:	str	r3, [sp, #100]	; 0x64
   14560:	bl	1255c <__assert_fail@plt+0x14f4>
   14564:	mov	ip, sp
   14568:	add	lr, sp, #52	; 0x34
   1456c:	ldm	ip!, {r0, r1, r2, r3}
   14570:	stmia	lr!, {r0, r1, r2, r3}
   14574:	ldm	ip!, {r0, r1, r2, r3}
   14578:	ldr	r8, [sp, #64]	; 0x40
   1457c:	stmia	lr!, {r0, r1, r2, r3}
   14580:	mvn	r4, r8
   14584:	ldm	ip, {r0, r1, r2, r3}
   14588:	and	ip, r4, #67108864	; 0x4000000
   1458c:	eor	ip, ip, r8
   14590:	str	ip, [sp, #64]	; 0x40
   14594:	stm	lr, {r0, r1, r2, r3}
   14598:	add	r3, sp, #52	; 0x34
   1459c:	mvn	r2, #0
   145a0:	mov	r1, r7
   145a4:	mov	r0, r6
   145a8:	bl	13ee4 <__assert_fail@plt+0x2e7c>
   145ac:	ldr	r2, [sp, #100]	; 0x64
   145b0:	ldr	r3, [r5]
   145b4:	cmp	r2, r3
   145b8:	bne	145c4 <__assert_fail@plt+0x355c>
   145bc:	add	sp, sp, #104	; 0x68
   145c0:	pop	{r4, r5, r6, r7, r8, pc}
   145c4:	bl	10e7c <__stack_chk_fail@plt>
   145c8:	andeq	r7, r2, r8, lsl #30
   145cc:	push	{r4, r5, r6, r7, r8, r9, lr}
   145d0:	mov	r6, r1
   145d4:	ldr	lr, [pc, #132]	; 14660 <__assert_fail@plt+0x35f8>
   145d8:	mov	r5, r2
   145dc:	mov	r8, r0
   145e0:	mov	r9, r3
   145e4:	ldm	lr!, {r0, r1, r2, r3}
   145e8:	sub	sp, sp, #60	; 0x3c
   145ec:	add	ip, sp, #4
   145f0:	ldr	r4, [pc, #108]	; 14664 <__assert_fail@plt+0x35fc>
   145f4:	stmia	ip!, {r0, r1, r2, r3}
   145f8:	mov	r7, #10
   145fc:	ldm	lr!, {r0, r1, r2, r3}
   14600:	cmp	r5, #0
   14604:	cmpne	r6, #0
   14608:	str	r7, [sp, #4]
   1460c:	stmia	ip!, {r0, r1, r2, r3}
   14610:	ldm	lr, {r0, r1, r2, r3}
   14614:	ldr	lr, [r4]
   14618:	stm	ip, {r0, r1, r2, r3}
   1461c:	str	lr, [sp, #52]	; 0x34
   14620:	beq	1465c <__assert_fail@plt+0x35f4>
   14624:	add	r3, sp, #4
   14628:	ldr	r2, [sp, #88]	; 0x58
   1462c:	mov	r1, r9
   14630:	mov	r0, r8
   14634:	str	r6, [sp, #44]	; 0x2c
   14638:	str	r5, [sp, #48]	; 0x30
   1463c:	bl	13ee4 <__assert_fail@plt+0x2e7c>
   14640:	ldr	r2, [sp, #52]	; 0x34
   14644:	ldr	r3, [r4]
   14648:	cmp	r2, r3
   1464c:	bne	14658 <__assert_fail@plt+0x35f0>
   14650:	add	sp, sp, #60	; 0x3c
   14654:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14658:	bl	10e7c <__stack_chk_fail@plt>
   1465c:	bl	1105c <abort@plt>
   14660:	andeq	r8, r2, r8, asr r6
   14664:	andeq	r7, r2, r8, lsl #30
   14668:	push	{lr}		; (str lr, [sp, #-4]!)
   1466c:	sub	sp, sp, #12
   14670:	mvn	ip, #0
   14674:	str	ip, [sp]
   14678:	bl	145cc <__assert_fail@plt+0x3564>
   1467c:	add	sp, sp, #12
   14680:	pop	{pc}		; (ldr pc, [sp], #4)
   14684:	push	{lr}		; (str lr, [sp, #-4]!)
   14688:	sub	sp, sp, #12
   1468c:	mvn	ip, #0
   14690:	mov	r3, r2
   14694:	str	ip, [sp]
   14698:	mov	r2, r1
   1469c:	mov	r1, r0
   146a0:	mov	r0, #0
   146a4:	bl	145cc <__assert_fail@plt+0x3564>
   146a8:	add	sp, sp, #12
   146ac:	pop	{pc}		; (ldr pc, [sp], #4)
   146b0:	push	{lr}		; (str lr, [sp, #-4]!)
   146b4:	sub	sp, sp, #12
   146b8:	str	r3, [sp]
   146bc:	mov	r3, r2
   146c0:	mov	r2, r1
   146c4:	mov	r1, r0
   146c8:	mov	r0, #0
   146cc:	bl	145cc <__assert_fail@plt+0x3564>
   146d0:	add	sp, sp, #12
   146d4:	pop	{pc}		; (ldr pc, [sp], #4)
   146d8:	ldr	r3, [pc]	; 146e0 <__assert_fail@plt+0x3678>
   146dc:	b	13ee4 <__assert_fail@plt+0x2e7c>
   146e0:	andeq	r8, r2, r0, asr r1
   146e4:	mov	r2, r1
   146e8:	ldr	r3, [pc, #8]	; 146f8 <__assert_fail@plt+0x3690>
   146ec:	mov	r1, r0
   146f0:	mov	r0, #0
   146f4:	b	13ee4 <__assert_fail@plt+0x2e7c>
   146f8:	andeq	r8, r2, r0, asr r1
   146fc:	ldr	r3, [pc, #4]	; 14708 <__assert_fail@plt+0x36a0>
   14700:	mvn	r2, #0
   14704:	b	13ee4 <__assert_fail@plt+0x2e7c>
   14708:	andeq	r8, r2, r0, asr r1
   1470c:	mov	r1, r0
   14710:	ldr	r3, [pc, #8]	; 14720 <__assert_fail@plt+0x36b8>
   14714:	mvn	r2, #0
   14718:	mov	r0, #0
   1471c:	b	13ee4 <__assert_fail@plt+0x2e7c>
   14720:	andeq	r8, r2, r0, asr r1
   14724:	push	{r4, r5, r6, lr}
   14728:	sub	sp, sp, #32
   1472c:	cmp	r1, #0
   14730:	mov	r5, r0
   14734:	ldr	r4, [sp, #48]	; 0x30
   14738:	ldr	r6, [sp, #52]	; 0x34
   1473c:	beq	147cc <__assert_fail@plt+0x3764>
   14740:	strd	r2, [sp]
   14744:	mov	r3, r1
   14748:	ldr	r2, [pc, #828]	; 14a8c <__assert_fail@plt+0x3a24>
   1474c:	mov	r1, #1
   14750:	bl	10fb4 <__fprintf_chk@plt>
   14754:	mov	r2, #5
   14758:	ldr	r1, [pc, #816]	; 14a90 <__assert_fail@plt+0x3a28>
   1475c:	mov	r0, #0
   14760:	bl	10e70 <dcgettext@plt>
   14764:	ldr	r3, [pc, #808]	; 14a94 <__assert_fail@plt+0x3a2c>
   14768:	ldr	r2, [pc, #808]	; 14a98 <__assert_fail@plt+0x3a30>
   1476c:	str	r3, [sp]
   14770:	mov	r1, #1
   14774:	mov	r3, r0
   14778:	mov	r0, r5
   1477c:	bl	10fb4 <__fprintf_chk@plt>
   14780:	ldr	r1, [pc, #788]	; 14a9c <__assert_fail@plt+0x3a34>
   14784:	mov	r2, #5
   14788:	mov	r0, #0
   1478c:	bl	10e70 <dcgettext@plt>
   14790:	mov	r1, r5
   14794:	bl	10de0 <fputs_unlocked@plt>
   14798:	cmp	r6, #9
   1479c:	ldrls	pc, [pc, r6, lsl #2]
   147a0:	b	14a7c <__assert_fail@plt+0x3a14>
   147a4:	andeq	r4, r1, r8, lsl #21
   147a8:	andeq	r4, r1, r0, asr r8
   147ac:	andeq	r4, r1, ip, ror r8
   147b0:			; <UNDEFINED> instruction: 0x000148b0
   147b4:	andeq	r4, r1, ip, ror #17
   147b8:	andeq	r4, r1, ip, lsr #18
   147bc:	andeq	r4, r1, r4, ror r9
   147c0:	andeq	r4, r1, r4, asr #19
   147c4:	andeq	r4, r1, ip, lsl sl
   147c8:	andeq	r4, r1, r4, ror #15
   147cc:	str	r3, [sp]
   147d0:	mov	r1, #1
   147d4:	mov	r3, r2
   147d8:	ldr	r2, [pc, #704]	; 14aa0 <__assert_fail@plt+0x3a38>
   147dc:	bl	10fb4 <__fprintf_chk@plt>
   147e0:	b	14754 <__assert_fail@plt+0x36ec>
   147e4:	ldr	r1, [pc, #696]	; 14aa4 <__assert_fail@plt+0x3a3c>
   147e8:	mov	r2, #5
   147ec:	mov	r0, #0
   147f0:	bl	10e70 <dcgettext@plt>
   147f4:	ldr	r2, [r4, #32]
   147f8:	ldr	r3, [r4, #28]
   147fc:	ldr	r1, [r4, #24]
   14800:	str	r2, [sp, #28]
   14804:	ldr	r2, [r4, #20]
   14808:	str	r3, [sp, #24]
   1480c:	ldr	r3, [r4, #16]
   14810:	str	r1, [sp, #20]
   14814:	ldr	r1, [r4, #12]
   14818:	str	r2, [sp, #16]
   1481c:	ldr	r2, [r4, #8]
   14820:	str	r3, [sp, #12]
   14824:	ldr	r3, [r4, #4]
   14828:	str	r1, [sp, #8]
   1482c:	str	r2, [sp, #4]
   14830:	str	r3, [sp]
   14834:	mov	r1, #1
   14838:	ldr	r3, [r4]
   1483c:	mov	r2, r0
   14840:	mov	r0, r5
   14844:	bl	10fb4 <__fprintf_chk@plt>
   14848:	add	sp, sp, #32
   1484c:	pop	{r4, r5, r6, pc}
   14850:	mov	r2, #5
   14854:	ldr	r1, [pc, #588]	; 14aa8 <__assert_fail@plt+0x3a40>
   14858:	mov	r0, #0
   1485c:	bl	10e70 <dcgettext@plt>
   14860:	ldr	r3, [r4]
   14864:	mov	r1, #1
   14868:	mov	r2, r0
   1486c:	mov	r0, r5
   14870:	add	sp, sp, #32
   14874:	pop	{r4, r5, r6, lr}
   14878:	b	10fb4 <__fprintf_chk@plt>
   1487c:	mov	r2, #5
   14880:	ldr	r1, [pc, #548]	; 14aac <__assert_fail@plt+0x3a44>
   14884:	mov	r0, #0
   14888:	bl	10e70 <dcgettext@plt>
   1488c:	ldr	r2, [r4, #4]
   14890:	ldr	r3, [r4]
   14894:	mov	r1, #1
   14898:	str	r2, [sp, #48]	; 0x30
   1489c:	mov	r2, r0
   148a0:	mov	r0, r5
   148a4:	add	sp, sp, #32
   148a8:	pop	{r4, r5, r6, lr}
   148ac:	b	10fb4 <__fprintf_chk@plt>
   148b0:	mov	r2, #5
   148b4:	ldr	r1, [pc, #500]	; 14ab0 <__assert_fail@plt+0x3a48>
   148b8:	mov	r0, #0
   148bc:	bl	10e70 <dcgettext@plt>
   148c0:	ldr	r2, [r4, #8]
   148c4:	ldr	r3, [r4, #4]
   148c8:	mov	r1, #1
   148cc:	str	r2, [sp, #52]	; 0x34
   148d0:	str	r3, [sp, #48]	; 0x30
   148d4:	ldr	r3, [r4]
   148d8:	mov	r2, r0
   148dc:	mov	r0, r5
   148e0:	add	sp, sp, #32
   148e4:	pop	{r4, r5, r6, lr}
   148e8:	b	10fb4 <__fprintf_chk@plt>
   148ec:	mov	r2, #5
   148f0:	ldr	r1, [pc, #444]	; 14ab4 <__assert_fail@plt+0x3a4c>
   148f4:	mov	r0, #0
   148f8:	bl	10e70 <dcgettext@plt>
   148fc:	ldr	r1, [r4, #12]
   14900:	ldr	r2, [r4, #8]
   14904:	ldr	r3, [r4, #4]
   14908:	str	r1, [sp, #8]
   1490c:	str	r2, [sp, #4]
   14910:	str	r3, [sp]
   14914:	mov	r1, #1
   14918:	ldr	r3, [r4]
   1491c:	mov	r2, r0
   14920:	mov	r0, r5
   14924:	bl	10fb4 <__fprintf_chk@plt>
   14928:	b	14848 <__assert_fail@plt+0x37e0>
   1492c:	mov	r2, #5
   14930:	ldr	r1, [pc, #384]	; 14ab8 <__assert_fail@plt+0x3a50>
   14934:	mov	r0, #0
   14938:	bl	10e70 <dcgettext@plt>
   1493c:	ldr	r3, [r4, #16]
   14940:	ldr	r1, [r4, #12]
   14944:	ldr	r2, [r4, #8]
   14948:	str	r3, [sp, #12]
   1494c:	ldr	r3, [r4, #4]
   14950:	str	r1, [sp, #8]
   14954:	str	r2, [sp, #4]
   14958:	str	r3, [sp]
   1495c:	mov	r1, #1
   14960:	ldr	r3, [r4]
   14964:	mov	r2, r0
   14968:	mov	r0, r5
   1496c:	bl	10fb4 <__fprintf_chk@plt>
   14970:	b	14848 <__assert_fail@plt+0x37e0>
   14974:	mov	r2, #5
   14978:	ldr	r1, [pc, #316]	; 14abc <__assert_fail@plt+0x3a54>
   1497c:	mov	r0, #0
   14980:	bl	10e70 <dcgettext@plt>
   14984:	ldr	r2, [r4, #20]
   14988:	ldr	r3, [r4, #16]
   1498c:	ldr	r1, [r4, #12]
   14990:	str	r2, [sp, #16]
   14994:	ldr	r2, [r4, #8]
   14998:	str	r3, [sp, #12]
   1499c:	ldr	r3, [r4, #4]
   149a0:	str	r1, [sp, #8]
   149a4:	str	r2, [sp, #4]
   149a8:	str	r3, [sp]
   149ac:	mov	r1, #1
   149b0:	ldr	r3, [r4]
   149b4:	mov	r2, r0
   149b8:	mov	r0, r5
   149bc:	bl	10fb4 <__fprintf_chk@plt>
   149c0:	b	14848 <__assert_fail@plt+0x37e0>
   149c4:	mov	r2, #5
   149c8:	ldr	r1, [pc, #240]	; 14ac0 <__assert_fail@plt+0x3a58>
   149cc:	mov	r0, #0
   149d0:	bl	10e70 <dcgettext@plt>
   149d4:	ldr	r1, [r4, #24]
   149d8:	ldr	r2, [r4, #20]
   149dc:	ldr	r3, [r4, #16]
   149e0:	str	r1, [sp, #20]
   149e4:	ldr	r1, [r4, #12]
   149e8:	str	r2, [sp, #16]
   149ec:	ldr	r2, [r4, #8]
   149f0:	str	r3, [sp, #12]
   149f4:	ldr	r3, [r4, #4]
   149f8:	str	r1, [sp, #8]
   149fc:	str	r2, [sp, #4]
   14a00:	str	r3, [sp]
   14a04:	mov	r1, #1
   14a08:	ldr	r3, [r4]
   14a0c:	mov	r2, r0
   14a10:	mov	r0, r5
   14a14:	bl	10fb4 <__fprintf_chk@plt>
   14a18:	b	14848 <__assert_fail@plt+0x37e0>
   14a1c:	mov	r2, #5
   14a20:	ldr	r1, [pc, #156]	; 14ac4 <__assert_fail@plt+0x3a5c>
   14a24:	mov	r0, #0
   14a28:	bl	10e70 <dcgettext@plt>
   14a2c:	ldr	r3, [r4, #28]
   14a30:	ldr	r1, [r4, #24]
   14a34:	ldr	r2, [r4, #20]
   14a38:	str	r3, [sp, #24]
   14a3c:	ldr	r3, [r4, #16]
   14a40:	str	r1, [sp, #20]
   14a44:	ldr	r1, [r4, #12]
   14a48:	str	r2, [sp, #16]
   14a4c:	ldr	r2, [r4, #8]
   14a50:	str	r3, [sp, #12]
   14a54:	ldr	r3, [r4, #4]
   14a58:	str	r1, [sp, #8]
   14a5c:	str	r2, [sp, #4]
   14a60:	str	r3, [sp]
   14a64:	mov	r1, #1
   14a68:	ldr	r3, [r4]
   14a6c:	mov	r2, r0
   14a70:	mov	r0, r5
   14a74:	bl	10fb4 <__fprintf_chk@plt>
   14a78:	b	14848 <__assert_fail@plt+0x37e0>
   14a7c:	mov	r2, #5
   14a80:	ldr	r1, [pc, #64]	; 14ac8 <__assert_fail@plt+0x3a60>
   14a84:	b	147ec <__assert_fail@plt+0x3784>
   14a88:	bl	1105c <abort@plt>
   14a8c:	andeq	r7, r1, r4, ror r0
   14a90:	andeq	r7, r1, r8, lsl #1
   14a94:	andeq	r0, r0, r2, ror #15
   14a98:	andeq	r7, r1, ip, asr r3
   14a9c:	andeq	r7, r1, ip, lsl #1
   14aa0:	andeq	r7, r1, r0, lsl #1
   14aa4:	andeq	r7, r1, r4, ror #4
   14aa8:	andeq	r7, r1, r8, asr r1
   14aac:	andeq	r7, r1, r8, ror #2
   14ab0:	andeq	r7, r1, r0, lsl #3
   14ab4:	muleq	r1, ip, r1
   14ab8:			; <UNDEFINED> instruction: 0x000171bc
   14abc:	andeq	r7, r1, r0, ror #3
   14ac0:	andeq	r7, r1, r8, lsl #4
   14ac4:	andeq	r7, r1, r4, lsr r2
   14ac8:	muleq	r1, r8, r2
   14acc:	push	{r4, r5, lr}
   14ad0:	sub	sp, sp, #12
   14ad4:	ldr	r5, [sp, #24]
   14ad8:	ldr	ip, [r5]
   14adc:	cmp	ip, #0
   14ae0:	beq	14afc <__assert_fail@plt+0x3a94>
   14ae4:	mov	lr, r5
   14ae8:	mov	ip, #0
   14aec:	ldr	r4, [lr, #4]!
   14af0:	add	ip, ip, #1
   14af4:	cmp	r4, #0
   14af8:	bne	14aec <__assert_fail@plt+0x3a84>
   14afc:	stm	sp, {r5, ip}
   14b00:	bl	14724 <__assert_fail@plt+0x36bc>
   14b04:	add	sp, sp, #12
   14b08:	pop	{r4, r5, pc}
   14b0c:	push	{r4, r5, r6, lr}
   14b10:	sub	sp, sp, #56	; 0x38
   14b14:	ldr	r6, [pc, #88]	; 14b74 <__assert_fail@plt+0x3b0c>
   14b18:	ldr	r5, [sp, #72]	; 0x48
   14b1c:	add	r4, sp, #8
   14b20:	ldr	ip, [r6]
   14b24:	str	ip, [sp, #52]	; 0x34
   14b28:	mov	ip, #0
   14b2c:	ldr	lr, [r5], #4
   14b30:	cmp	lr, #0
   14b34:	str	lr, [r4, #4]!
   14b38:	beq	14b48 <__assert_fail@plt+0x3ae0>
   14b3c:	add	ip, ip, #1
   14b40:	cmp	ip, #10
   14b44:	bne	14b2c <__assert_fail@plt+0x3ac4>
   14b48:	add	lr, sp, #12
   14b4c:	str	ip, [sp, #4]
   14b50:	str	lr, [sp]
   14b54:	bl	14724 <__assert_fail@plt+0x36bc>
   14b58:	ldr	r2, [sp, #52]	; 0x34
   14b5c:	ldr	r3, [r6]
   14b60:	cmp	r2, r3
   14b64:	bne	14b70 <__assert_fail@plt+0x3b08>
   14b68:	add	sp, sp, #56	; 0x38
   14b6c:	pop	{r4, r5, r6, pc}
   14b70:	bl	10e7c <__stack_chk_fail@plt>
   14b74:	andeq	r7, r2, r8, lsl #30
   14b78:	push	{r3}		; (str r3, [sp, #-4]!)
   14b7c:	mov	ip, #0
   14b80:	push	{r4, r5, r6, lr}
   14b84:	sub	sp, sp, #60	; 0x3c
   14b88:	ldr	r6, [pc, #100]	; 14bf4 <__assert_fail@plt+0x3b8c>
   14b8c:	add	r5, sp, #8
   14b90:	add	r4, sp, #80	; 0x50
   14b94:	ldr	r3, [r6]
   14b98:	str	r4, [sp, #8]
   14b9c:	str	r3, [sp, #52]	; 0x34
   14ba0:	ldr	r3, [sp, #76]	; 0x4c
   14ba4:	ldr	lr, [r4], #4
   14ba8:	cmp	lr, #0
   14bac:	str	lr, [r5, #4]!
   14bb0:	beq	14bc0 <__assert_fail@plt+0x3b58>
   14bb4:	add	ip, ip, #1
   14bb8:	cmp	ip, #10
   14bbc:	bne	14ba4 <__assert_fail@plt+0x3b3c>
   14bc0:	add	lr, sp, #12
   14bc4:	str	ip, [sp, #4]
   14bc8:	str	lr, [sp]
   14bcc:	bl	14724 <__assert_fail@plt+0x36bc>
   14bd0:	ldr	r2, [sp, #52]	; 0x34
   14bd4:	ldr	r3, [r6]
   14bd8:	cmp	r2, r3
   14bdc:	bne	14bf0 <__assert_fail@plt+0x3b88>
   14be0:	add	sp, sp, #60	; 0x3c
   14be4:	pop	{r4, r5, r6, lr}
   14be8:	add	sp, sp, #4
   14bec:	bx	lr
   14bf0:	bl	10e7c <__stack_chk_fail@plt>
   14bf4:	andeq	r7, r2, r8, lsl #30
   14bf8:	push	{r4, lr}
   14bfc:	mov	r2, #5
   14c00:	ldr	r1, [pc, #88]	; 14c60 <__assert_fail@plt+0x3bf8>
   14c04:	mov	r0, #0
   14c08:	bl	10e70 <dcgettext@plt>
   14c0c:	ldr	r2, [pc, #80]	; 14c64 <__assert_fail@plt+0x3bfc>
   14c10:	mov	r1, r0
   14c14:	mov	r0, #1
   14c18:	bl	10f9c <__printf_chk@plt>
   14c1c:	mov	r2, #5
   14c20:	ldr	r1, [pc, #64]	; 14c68 <__assert_fail@plt+0x3c00>
   14c24:	mov	r0, #0
   14c28:	bl	10e70 <dcgettext@plt>
   14c2c:	ldr	r3, [pc, #56]	; 14c6c <__assert_fail@plt+0x3c04>
   14c30:	ldr	r2, [pc, #56]	; 14c70 <__assert_fail@plt+0x3c08>
   14c34:	mov	r1, r0
   14c38:	mov	r0, #1
   14c3c:	bl	10f9c <__printf_chk@plt>
   14c40:	ldr	r1, [pc, #44]	; 14c74 <__assert_fail@plt+0x3c0c>
   14c44:	mov	r2, #5
   14c48:	mov	r0, #0
   14c4c:	bl	10e70 <dcgettext@plt>
   14c50:	ldr	r3, [pc, #32]	; 14c78 <__assert_fail@plt+0x3c10>
   14c54:	pop	{r4, lr}
   14c58:	ldr	r1, [r3]
   14c5c:	b	10de0 <fputs_unlocked@plt>
   14c60:	ldrdeq	r7, [r1], -r4
   14c64:	andeq	r7, r1, ip, ror #5
   14c68:	andeq	r7, r1, r4, lsl #6
   14c6c:			; <UNDEFINED> instruction: 0x00016bb4
   14c70:	ldrdeq	r6, [r1], -ip
   14c74:	andeq	r7, r1, r8, lsl r3
   14c78:	muleq	r2, ip, r1
   14c7c:	push	{r4, lr}
   14c80:	mov	r4, r0
   14c84:	bl	10f00 <malloc@plt>
   14c88:	adds	r4, r4, #0
   14c8c:	movne	r4, #1
   14c90:	cmp	r0, #0
   14c94:	movne	r4, #0
   14c98:	cmp	r4, #0
   14c9c:	popeq	{r4, pc}
   14ca0:	bl	14ec4 <__assert_fail@plt+0x3e5c>
   14ca4:	push	{r4, r5, r6, lr}
   14ca8:	umull	r4, r5, r0, r1
   14cac:	adds	r3, r5, #0
   14cb0:	movne	r3, #1
   14cb4:	cmp	r4, #0
   14cb8:	blt	14cd0 <__assert_fail@plt+0x3c68>
   14cbc:	cmp	r3, #0
   14cc0:	bne	14cd0 <__assert_fail@plt+0x3c68>
   14cc4:	mul	r0, r1, r0
   14cc8:	pop	{r4, r5, r6, lr}
   14ccc:	b	14c7c <__assert_fail@plt+0x3c14>
   14cd0:	bl	14ec4 <__assert_fail@plt+0x3e5c>
   14cd4:	b	14c7c <__assert_fail@plt+0x3c14>
   14cd8:	adds	r3, r0, #0
   14cdc:	movne	r3, #1
   14ce0:	cmp	r1, #0
   14ce4:	movne	r3, #0
   14ce8:	cmp	r3, #0
   14cec:	push	{r4, lr}
   14cf0:	bne	14d18 <__assert_fail@plt+0x3cb0>
   14cf4:	mov	r4, r1
   14cf8:	bl	10e88 <realloc@plt>
   14cfc:	adds	r4, r4, #0
   14d00:	movne	r4, #1
   14d04:	cmp	r0, #0
   14d08:	movne	r4, #0
   14d0c:	cmp	r4, #0
   14d10:	popeq	{r4, pc}
   14d14:	bl	14ec4 <__assert_fail@plt+0x3e5c>
   14d18:	bl	10e1c <free@plt>
   14d1c:	mov	r0, #0
   14d20:	pop	{r4, pc}
   14d24:	push	{r4, r5, r6, lr}
   14d28:	umull	r4, r5, r1, r2
   14d2c:	adds	r3, r5, #0
   14d30:	movne	r3, #1
   14d34:	cmp	r4, #0
   14d38:	blt	14d50 <__assert_fail@plt+0x3ce8>
   14d3c:	cmp	r3, #0
   14d40:	bne	14d50 <__assert_fail@plt+0x3ce8>
   14d44:	mul	r1, r2, r1
   14d48:	pop	{r4, r5, r6, lr}
   14d4c:	b	14cd8 <__assert_fail@plt+0x3c70>
   14d50:	bl	14ec4 <__assert_fail@plt+0x3e5c>
   14d54:	push	{r4, r5, r6, r7, r8, lr}
   14d58:	subs	r7, r0, #0
   14d5c:	mov	r6, r1
   14d60:	mov	r5, r2
   14d64:	ldr	r4, [r1]
   14d68:	beq	14d9c <__assert_fail@plt+0x3d34>
   14d6c:	mov	r1, r2
   14d70:	ldr	r0, [pc, #104]	; 14de0 <__assert_fail@plt+0x3d78>
   14d74:	bl	15e88 <__assert_fail@plt+0x4e20>
   14d78:	cmp	r0, r4
   14d7c:	bls	14dc0 <__assert_fail@plt+0x3d58>
   14d80:	add	r3, r4, #1
   14d84:	add	r4, r3, r4, lsr #1
   14d88:	str	r4, [r6]
   14d8c:	mul	r1, r5, r4
   14d90:	mov	r0, r7
   14d94:	pop	{r4, r5, r6, r7, r8, lr}
   14d98:	b	14cd8 <__assert_fail@plt+0x3c70>
   14d9c:	cmp	r4, #0
   14da0:	beq	14dc4 <__assert_fail@plt+0x3d5c>
   14da4:	umull	r0, r1, r4, r5
   14da8:	adds	r3, r1, #0
   14dac:	movne	r3, #1
   14db0:	cmp	r0, #0
   14db4:	blt	14dc0 <__assert_fail@plt+0x3d58>
   14db8:	cmp	r3, #0
   14dbc:	beq	14d88 <__assert_fail@plt+0x3d20>
   14dc0:	bl	14ec4 <__assert_fail@plt+0x3e5c>
   14dc4:	mov	r1, r2
   14dc8:	mov	r0, #64	; 0x40
   14dcc:	bl	15e88 <__assert_fail@plt+0x4e20>
   14dd0:	cmp	r5, #64	; 0x40
   14dd4:	movls	r4, r0
   14dd8:	addhi	r4, r0, #1
   14ddc:	b	14da4 <__assert_fail@plt+0x3d3c>
   14de0:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   14de4:	cmp	r0, #0
   14de8:	ldr	r3, [r1]
   14dec:	beq	14e10 <__assert_fail@plt+0x3da8>
   14df0:	ldr	r2, [pc, #60]	; 14e34 <__assert_fail@plt+0x3dcc>
   14df4:	cmp	r3, r2
   14df8:	bhi	14e2c <__assert_fail@plt+0x3dc4>
   14dfc:	add	r2, r3, #1
   14e00:	add	r3, r2, r3, lsr #1
   14e04:	str	r3, [r1]
   14e08:	mov	r1, r3
   14e0c:	b	14cd8 <__assert_fail@plt+0x3c70>
   14e10:	cmp	r3, #0
   14e14:	bne	14e28 <__assert_fail@plt+0x3dc0>
   14e18:	mov	r3, #64	; 0x40
   14e1c:	str	r3, [r1]
   14e20:	mov	r1, r3
   14e24:	b	14cd8 <__assert_fail@plt+0x3c70>
   14e28:	bge	14e04 <__assert_fail@plt+0x3d9c>
   14e2c:	push	{r4, lr}
   14e30:	bl	14ec4 <__assert_fail@plt+0x3e5c>
   14e34:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   14e38:	push	{r4, lr}
   14e3c:	mov	r4, r0
   14e40:	bl	14c7c <__assert_fail@plt+0x3c14>
   14e44:	mov	r2, r4
   14e48:	mov	r1, #0
   14e4c:	pop	{r4, lr}
   14e50:	b	10f90 <memset@plt>
   14e54:	push	{r4, r5, r6, lr}
   14e58:	umull	r4, r5, r0, r1
   14e5c:	adds	r3, r5, #0
   14e60:	movne	r3, #1
   14e64:	cmp	r4, #0
   14e68:	blt	14e80 <__assert_fail@plt+0x3e18>
   14e6c:	cmp	r3, #0
   14e70:	bne	14e80 <__assert_fail@plt+0x3e18>
   14e74:	bl	10dd4 <calloc@plt>
   14e78:	cmp	r0, #0
   14e7c:	popne	{r4, r5, r6, pc}
   14e80:	bl	14ec4 <__assert_fail@plt+0x3e5c>
   14e84:	push	{r4, r5, r6, lr}
   14e88:	mov	r4, r1
   14e8c:	mov	r5, r0
   14e90:	mov	r0, r1
   14e94:	bl	14c7c <__assert_fail@plt+0x3c14>
   14e98:	mov	r2, r4
   14e9c:	mov	r1, r5
   14ea0:	pop	{r4, r5, r6, lr}
   14ea4:	b	10e34 <memcpy@plt>
   14ea8:	push	{r4, lr}
   14eac:	mov	r4, r0
   14eb0:	bl	10f54 <strlen@plt>
   14eb4:	add	r1, r0, #1
   14eb8:	mov	r0, r4
   14ebc:	pop	{r4, lr}
   14ec0:	b	14e84 <__assert_fail@plt+0x3e1c>
   14ec4:	ldr	r3, [pc, #44]	; 14ef8 <__assert_fail@plt+0x3e90>
   14ec8:	push	{r4, lr}
   14ecc:	mov	r2, #5
   14ed0:	ldr	r1, [pc, #36]	; 14efc <__assert_fail@plt+0x3e94>
   14ed4:	mov	r0, #0
   14ed8:	ldr	r4, [r3]
   14edc:	bl	10e70 <dcgettext@plt>
   14ee0:	ldr	r2, [pc, #24]	; 14f00 <__assert_fail@plt+0x3e98>
   14ee4:	mov	r1, #0
   14ee8:	mov	r3, r0
   14eec:	mov	r0, r4
   14ef0:	bl	10ef4 <error@plt>
   14ef4:	bl	1105c <abort@plt>
   14ef8:	andeq	r8, r2, ip, lsr r1
   14efc:	andeq	r7, r1, ip, lsl #7
   14f00:	andeq	r6, r1, r0, asr #25
   14f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f08:	sub	sp, sp, #36	; 0x24
   14f0c:	ldr	r6, [pc, #348]	; 15070 <__assert_fail@plt+0x4008>
   14f10:	ldr	lr, [sp, #80]	; 0x50
   14f14:	mov	r8, r2
   14f18:	ldr	ip, [r6]
   14f1c:	mov	r2, r1
   14f20:	mov	r9, r3
   14f24:	str	lr, [sp]
   14f28:	add	r3, sp, #16
   14f2c:	mov	r1, #0
   14f30:	str	ip, [sp, #28]
   14f34:	mov	r7, r0
   14f38:	ldr	sl, [sp, #84]	; 0x54
   14f3c:	ldr	r5, [sp, #88]	; 0x58
   14f40:	bl	15080 <__assert_fail@plt+0x4018>
   14f44:	subs	fp, r0, #0
   14f48:	bne	15010 <__assert_fail@plt+0x3fa8>
   14f4c:	ldrd	r2, [sp, #16]
   14f50:	cmp	r2, r8
   14f54:	sbcs	r1, r3, r9
   14f58:	ldrd	r8, [sp, #72]	; 0x48
   14f5c:	movlt	r1, #1
   14f60:	movge	r1, #0
   14f64:	cmp	r8, r2
   14f68:	sbcs	r0, r9, r3
   14f6c:	orrlt	r1, r1, #1
   14f70:	cmp	r1, #0
   14f74:	beq	14fd8 <__assert_fail@plt+0x3f70>
   14f78:	strd	r2, [sp, #8]
   14f7c:	bl	10f78 <__errno_location@plt>
   14f80:	ldrd	r2, [sp, #8]
   14f84:	cmp	r2, #1073741824	; 0x40000000
   14f88:	sbcs	r1, r3, #0
   14f8c:	bge	14ff8 <__assert_fail@plt+0x3f90>
   14f90:	mov	r8, #-1073741824	; 0xc0000000
   14f94:	mvn	r9, #0
   14f98:	cmp	r2, r8
   14f9c:	sbcs	r3, r3, r9
   14fa0:	blt	14ff8 <__assert_fail@plt+0x3f90>
   14fa4:	mov	r4, #34	; 0x22
   14fa8:	cmp	r5, #0
   14fac:	str	r4, [r0]
   14fb0:	beq	15050 <__assert_fail@plt+0x3fe8>
   14fb4:	mov	r0, r7
   14fb8:	bl	1470c <__assert_fail@plt+0x36a4>
   14fbc:	mov	r3, sl
   14fc0:	ldr	r2, [pc, #172]	; 15074 <__assert_fail@plt+0x400c>
   14fc4:	mov	r1, r4
   14fc8:	str	r0, [sp]
   14fcc:	mov	r0, r5
   14fd0:	bl	10ef4 <error@plt>
   14fd4:	ldrd	r2, [sp, #16]
   14fd8:	ldr	lr, [sp, #28]
   14fdc:	ldr	ip, [r6]
   14fe0:	mov	r0, r2
   14fe4:	cmp	lr, ip
   14fe8:	mov	r1, r3
   14fec:	bne	1506c <__assert_fail@plt+0x4004>
   14ff0:	add	sp, sp, #36	; 0x24
   14ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ff8:	mov	r4, #75	; 0x4b
   14ffc:	cmp	r5, #0
   15000:	str	r4, [r0]
   15004:	moveq	r5, #1
   15008:	moveq	r4, #75	; 0x4b
   1500c:	b	14fb4 <__assert_fail@plt+0x3f4c>
   15010:	bl	10f78 <__errno_location@plt>
   15014:	cmp	fp, #1
   15018:	beq	15058 <__assert_fail@plt+0x3ff0>
   1501c:	cmp	fp, #3
   15020:	beq	1503c <__assert_fail@plt+0x3fd4>
   15024:	ldr	r4, [r0]
   15028:	cmp	r5, #0
   1502c:	moveq	r5, #1
   15030:	cmp	r4, #22
   15034:	moveq	r4, #0
   15038:	b	14fb4 <__assert_fail@plt+0x3f4c>
   1503c:	mov	r4, #0
   15040:	cmp	r5, #0
   15044:	str	r4, [r0]
   15048:	bne	14fb4 <__assert_fail@plt+0x3f4c>
   1504c:	mov	r4, r5
   15050:	mov	r5, #1
   15054:	b	14fb4 <__assert_fail@plt+0x3f4c>
   15058:	mov	r4, #75	; 0x4b
   1505c:	cmp	r5, #0
   15060:	str	r4, [r0]
   15064:	bne	14fb4 <__assert_fail@plt+0x3f4c>
   15068:	b	15050 <__assert_fail@plt+0x3fe8>
   1506c:	bl	10e7c <__stack_chk_fail@plt>
   15070:	andeq	r7, r2, r8, lsl #30
   15074:	andeq	r6, r1, r4, asr pc
   15078:	mov	r1, #10
   1507c:	b	14f04 <__assert_fail@plt+0x3e9c>
   15080:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15084:	cmp	r2, #36	; 0x24
   15088:	mov	r6, r2
   1508c:	ldr	r2, [pc, #2760]	; 15b5c <__assert_fail@plt+0x4af4>
   15090:	sub	sp, sp, #36	; 0x24
   15094:	ldr	r2, [r2]
   15098:	ldr	r9, [sp, #72]	; 0x48
   1509c:	str	r2, [sp, #28]
   150a0:	bhi	15b44 <__assert_fail@plt+0x4adc>
   150a4:	cmp	r1, #0
   150a8:	mov	r5, r1
   150ac:	mov	r8, r0
   150b0:	addeq	r5, sp, #24
   150b4:	mov	sl, r3
   150b8:	bl	10f78 <__errno_location@plt>
   150bc:	mov	r4, #0
   150c0:	mov	r2, r6
   150c4:	mov	r3, r4
   150c8:	mov	r1, r5
   150cc:	str	r4, [r0]
   150d0:	mov	fp, r0
   150d4:	mov	r0, r8
   150d8:	bl	11020 <__strtoll_internal@plt>
   150dc:	ldr	r3, [r5]
   150e0:	cmp	r3, r8
   150e4:	str	r3, [sp, #8]
   150e8:	mov	r6, r0
   150ec:	mov	r7, r1
   150f0:	beq	15148 <__assert_fail@plt+0x40e0>
   150f4:	ldr	r4, [fp]
   150f8:	cmp	r4, #0
   150fc:	beq	1510c <__assert_fail@plt+0x40a4>
   15100:	cmp	r4, #34	; 0x22
   15104:	bne	15248 <__assert_fail@plt+0x41e0>
   15108:	mov	r4, #1
   1510c:	cmp	r9, #0
   15110:	beq	15124 <__assert_fail@plt+0x40bc>
   15114:	ldr	r3, [sp, #8]
   15118:	ldrb	r8, [r3]
   1511c:	cmp	r8, #0
   15120:	bne	15350 <__assert_fail@plt+0x42e8>
   15124:	strd	r6, [sl]
   15128:	ldr	r3, [pc, #2604]	; 15b5c <__assert_fail@plt+0x4af4>
   1512c:	ldr	r2, [sp, #28]
   15130:	mov	r0, r4
   15134:	ldr	r3, [r3]
   15138:	cmp	r2, r3
   1513c:	bne	15b58 <__assert_fail@plt+0x4af0>
   15140:	add	sp, sp, #36	; 0x24
   15144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15148:	cmp	r9, r4
   1514c:	beq	15248 <__assert_fail@plt+0x41e0>
   15150:	ldrb	r8, [r8]
   15154:	cmp	r8, r4
   15158:	beq	15248 <__assert_fail@plt+0x41e0>
   1515c:	mov	r1, r8
   15160:	mov	r0, r9
   15164:	bl	10f60 <strchr@plt>
   15168:	cmp	r0, r4
   1516c:	movne	r6, #1
   15170:	movne	r7, #0
   15174:	beq	15248 <__assert_fail@plt+0x41e0>
   15178:	sub	fp, r8, #69	; 0x45
   1517c:	cmp	fp, #47	; 0x2f
   15180:	ldrls	pc, [pc, fp, lsl #2]
   15184:	b	15370 <__assert_fail@plt+0x4308>
   15188:	andeq	r5, r1, r0, asr r2
   1518c:	andeq	r5, r1, r0, ror r3
   15190:	andeq	r5, r1, r0, asr r2
   15194:	andeq	r5, r1, r0, ror r3
   15198:	andeq	r5, r1, r0, ror r3
   1519c:	andeq	r5, r1, r0, ror r3
   151a0:	andeq	r5, r1, r0, asr r2
   151a4:	andeq	r5, r1, r0, ror r3
   151a8:	andeq	r5, r1, r0, asr r2
   151ac:	andeq	r5, r1, r0, ror r3
   151b0:	andeq	r5, r1, r0, ror r3
   151b4:	andeq	r5, r1, r0, asr r2
   151b8:	andeq	r5, r1, r0, ror r3
   151bc:	andeq	r5, r1, r0, ror r3
   151c0:	andeq	r5, r1, r0, ror r3
   151c4:	andeq	r5, r1, r0, asr r2
   151c8:	andeq	r5, r1, r0, ror r3
   151cc:	andeq	r5, r1, r0, ror r3
   151d0:	andeq	r5, r1, r0, ror r3
   151d4:	andeq	r5, r1, r0, ror r3
   151d8:	andeq	r5, r1, r0, asr r2
   151dc:	andeq	r5, r1, r0, asr r2
   151e0:	andeq	r5, r1, r0, ror r3
   151e4:	andeq	r5, r1, r0, ror r3
   151e8:	andeq	r5, r1, r0, ror r3
   151ec:	andeq	r5, r1, r0, ror r3
   151f0:	andeq	r5, r1, r0, ror r3
   151f4:	andeq	r5, r1, r0, ror r3
   151f8:	andeq	r5, r1, r0, ror r3
   151fc:	andeq	r5, r1, r0, ror r3
   15200:	andeq	r5, r1, r0, ror r3
   15204:	andeq	r5, r1, r0, ror r3
   15208:	andeq	r5, r1, r0, ror r3
   1520c:	andeq	r5, r1, r0, ror r3
   15210:	andeq	r5, r1, r0, asr r2
   15214:	andeq	r5, r1, r0, ror r3
   15218:	andeq	r5, r1, r0, ror r3
   1521c:	andeq	r5, r1, r0, ror r3
   15220:	andeq	r5, r1, r0, asr r2
   15224:	andeq	r5, r1, r0, ror r3
   15228:	andeq	r5, r1, r0, asr r2
   1522c:	andeq	r5, r1, r0, ror r3
   15230:	andeq	r5, r1, r0, ror r3
   15234:	andeq	r5, r1, r0, ror r3
   15238:	andeq	r5, r1, r0, ror r3
   1523c:	andeq	r5, r1, r0, ror r3
   15240:	andeq	r5, r1, r0, ror r3
   15244:	andeq	r5, r1, r0, asr r2
   15248:	mov	r4, #4
   1524c:	b	15128 <__assert_fail@plt+0x40c0>
   15250:	mov	r0, r9
   15254:	mov	r1, #48	; 0x30
   15258:	bl	10f60 <strchr@plt>
   1525c:	cmp	r0, #0
   15260:	beq	15370 <__assert_fail@plt+0x4308>
   15264:	ldr	r3, [sp, #8]
   15268:	ldrb	r3, [r3, #1]
   1526c:	cmp	r3, #68	; 0x44
   15270:	beq	15b1c <__assert_fail@plt+0x4ab4>
   15274:	cmp	r3, #105	; 0x69
   15278:	beq	15b28 <__assert_fail@plt+0x4ac0>
   1527c:	cmp	r3, #66	; 0x42
   15280:	beq	15b1c <__assert_fail@plt+0x4ab4>
   15284:	cmp	fp, #47	; 0x2f
   15288:	ldrls	pc, [pc, fp, lsl #2]
   1528c:	b	15364 <__assert_fail@plt+0x42fc>
   15290:	andeq	r5, r1, ip, asr sl
   15294:	andeq	r5, r1, r4, ror #6
   15298:	andeq	r5, r1, r8, lsr sl
   1529c:	andeq	r5, r1, r4, ror #6
   152a0:	andeq	r5, r1, r4, ror #6
   152a4:	andeq	r5, r1, r4, ror #6
   152a8:	andeq	r5, r1, r0, lsr #20
   152ac:	andeq	r5, r1, r4, ror #6
   152b0:	andeq	r5, r1, r4, lsl #20
   152b4:	andeq	r5, r1, r4, ror #6
   152b8:	andeq	r5, r1, r4, ror #6
   152bc:	andeq	r5, r1, r0, ror #19
   152c0:	andeq	r5, r1, r4, ror #6
   152c4:	andeq	r5, r1, r4, ror #6
   152c8:	andeq	r5, r1, r4, ror #6
   152cc:			; <UNDEFINED> instruction: 0x000159bc
   152d0:	andeq	r5, r1, r4, ror #6
   152d4:	andeq	r5, r1, r4, ror #6
   152d8:	andeq	r5, r1, r4, ror #6
   152dc:	andeq	r5, r1, r4, ror #6
   152e0:	muleq	r1, r8, r9
   152e4:	andeq	r5, r1, r4, ror r9
   152e8:	andeq	r5, r1, r4, ror #6
   152ec:	andeq	r5, r1, r4, ror #6
   152f0:	andeq	r5, r1, r4, ror #6
   152f4:	andeq	r5, r1, r4, ror #6
   152f8:	andeq	r5, r1, r4, ror #6
   152fc:	andeq	r5, r1, r4, ror #6
   15300:	andeq	r5, r1, r4, ror #6
   15304:	andeq	r5, r1, ip, lsr #10
   15308:	andeq	r5, r1, r0, lsl #21
   1530c:	andeq	r5, r1, r4, ror #6
   15310:	andeq	r5, r1, r4, ror #6
   15314:	andeq	r5, r1, r4, ror #6
   15318:	andeq	r5, r1, r8, lsr sl
   1531c:	andeq	r5, r1, r4, ror #6
   15320:	andeq	r5, r1, r4, ror #6
   15324:	andeq	r5, r1, r4, ror #6
   15328:	andeq	r5, r1, r0, lsr #20
   1532c:	andeq	r5, r1, r4, ror #6
   15330:	andeq	r5, r1, r4, lsl #20
   15334:	andeq	r5, r1, r4, ror #6
   15338:	andeq	r5, r1, r4, ror #6
   1533c:	andeq	r5, r1, r4, ror #6
   15340:	andeq	r5, r1, r4, ror #6
   15344:	andeq	r5, r1, r4, ror #6
   15348:	andeq	r5, r1, r4, ror #6
   1534c:			; <UNDEFINED> instruction: 0x000159bc
   15350:	mov	r1, r8
   15354:	mov	r0, r9
   15358:	bl	10f60 <strchr@plt>
   1535c:	cmp	r0, #0
   15360:	bne	15178 <__assert_fail@plt+0x4110>
   15364:	strd	r6, [sl]
   15368:	orr	r4, r4, #2
   1536c:	b	15128 <__assert_fail@plt+0x40c0>
   15370:	mov	fp, #1
   15374:	mov	r3, #1024	; 0x400
   15378:	sub	r8, r8, #66	; 0x42
   1537c:	cmp	r8, #53	; 0x35
   15380:	ldrls	pc, [pc, r8, lsl #2]
   15384:	b	15364 <__assert_fail@plt+0x42fc>
   15388:	andeq	r5, r1, r8, ror #10
   1538c:	andeq	r5, r1, r4, ror #6
   15390:	andeq	r5, r1, r4, ror #6
   15394:	andeq	r5, r1, r0, ror #17
   15398:	andeq	r5, r1, r4, ror #6
   1539c:	andeq	r5, r1, r4, lsr #14
   153a0:	andeq	r5, r1, r4, ror #6
   153a4:	andeq	r5, r1, r4, ror #6
   153a8:	andeq	r5, r1, r4, ror #6
   153ac:	andeq	r5, r1, r8, asr #13
   153b0:	andeq	r5, r1, r4, ror #6
   153b4:	andeq	r5, r1, r0, ror #8
   153b8:	andeq	r5, r1, r4, ror #6
   153bc:	andeq	r5, r1, r4, ror #6
   153c0:	andeq	r5, r1, r0, lsr #11
   153c4:	andeq	r5, r1, r4, ror #6
   153c8:	andeq	r5, r1, r4, ror #6
   153cc:	andeq	r5, r1, r4, ror #6
   153d0:			; <UNDEFINED> instruction: 0x000157b8
   153d4:	andeq	r5, r1, r4, ror #6
   153d8:	andeq	r5, r1, r4, ror #6
   153dc:	andeq	r5, r1, r4, ror #6
   153e0:	andeq	r5, r1, r4, ror #6
   153e4:	andeq	r5, r1, r4, lsr r6
   153e8:	andeq	r5, r1, ip, asr #16
   153ec:	andeq	r5, r1, r4, ror #6
   153f0:	andeq	r5, r1, r4, ror #6
   153f4:	andeq	r5, r1, r4, ror #6
   153f8:	andeq	r5, r1, r4, ror #6
   153fc:	andeq	r5, r1, r4, ror #6
   15400:	andeq	r5, r1, r4, ror #6
   15404:	andeq	r5, r1, r4, ror #6
   15408:	andeq	r5, r1, r0, lsr r5
   1540c:	andeq	r5, r1, ip, ror #9
   15410:	andeq	r5, r1, r4, ror #6
   15414:	andeq	r5, r1, r4, ror #6
   15418:	andeq	r5, r1, r4, ror #6
   1541c:	andeq	r5, r1, r4, lsr #14
   15420:	andeq	r5, r1, r4, ror #6
   15424:	andeq	r5, r1, r4, ror #6
   15428:	andeq	r5, r1, r4, ror #6
   1542c:	andeq	r5, r1, r8, asr #13
   15430:	andeq	r5, r1, r4, ror #6
   15434:	andeq	r5, r1, r0, ror #8
   15438:	andeq	r5, r1, r4, ror #6
   1543c:	andeq	r5, r1, r4, ror #6
   15440:	andeq	r5, r1, r4, ror #6
   15444:	andeq	r5, r1, r4, ror #6
   15448:	andeq	r5, r1, r4, ror #6
   1544c:	andeq	r5, r1, r4, ror #6
   15450:			; <UNDEFINED> instruction: 0x000157b8
   15454:	andeq	r5, r1, r4, ror #6
   15458:	andeq	r5, r1, r4, ror #6
   1545c:	andeq	r5, r1, r8, lsl #10
   15460:	asr	r9, r3, #31
   15464:	mov	r2, r3
   15468:	mov	r8, r3
   1546c:	mov	r0, #0
   15470:	mov	r3, r9
   15474:	mov	r1, #-2147483648	; 0x80000000
   15478:	bl	16094 <__assert_fail@plt+0x502c>
   1547c:	strd	r0, [sp]
   15480:	ldrd	r2, [sp]
   15484:	cmp	r6, r2
   15488:	sbcs	r3, r7, r3
   1548c:	blt	15a9c <__assert_fail@plt+0x4a34>
   15490:	mov	r3, r9
   15494:	mov	r2, r8
   15498:	mvn	r0, #0
   1549c:	mvn	r1, #-2147483648	; 0x80000000
   154a0:	bl	16094 <__assert_fail@plt+0x502c>
   154a4:	cmp	r0, r6
   154a8:	sbcs	r3, r1, r7
   154ac:	blt	15aac <__assert_fail@plt+0x4a44>
   154b0:	mul	ip, r6, r9
   154b4:	umull	r2, r3, r6, r8
   154b8:	mla	ip, r8, r7, ip
   154bc:	ldrd	r6, [sp]
   154c0:	add	r3, ip, r3
   154c4:	cmp	r2, r6
   154c8:	sbcs	ip, r3, r7
   154cc:	blt	15a9c <__assert_fail@plt+0x4a34>
   154d0:	cmp	r0, r2
   154d4:	sbcs	r1, r1, r3
   154d8:	blt	15aac <__assert_fail@plt+0x4a44>
   154dc:	mul	r1, r2, r9
   154e0:	umull	r6, r7, r2, r8
   154e4:	mla	r8, r8, r3, r1
   154e8:	add	r7, r8, r7
   154ec:	ldr	r2, [sp, #8]
   154f0:	add	r3, r2, fp
   154f4:	str	r3, [r5]
   154f8:	ldrb	r3, [r2, fp]
   154fc:	cmp	r3, #0
   15500:	orrne	r4, r4, #2
   15504:	b	15124 <__assert_fail@plt+0x40bc>
   15508:	cmp	r6, #0
   1550c:	sbcs	r3, r7, #-1073741824	; 0xc0000000
   15510:	blt	15a9c <__assert_fail@plt+0x4a34>
   15514:	cmp	r6, #0
   15518:	sbcs	r3, r7, #1073741824	; 0x40000000
   1551c:	bge	15aac <__assert_fail@plt+0x4a44>
   15520:	adds	r6, r6, r6
   15524:	adc	r7, r7, r7
   15528:	b	154ec <__assert_fail@plt+0x4484>
   1552c:	mov	fp, #1
   15530:	mov	r2, #0
   15534:	ldr	r3, [pc, #1572]	; 15b60 <__assert_fail@plt+0x4af8>
   15538:	cmp	r6, r2
   1553c:	sbcs	r3, r7, r3
   15540:	blt	15a9c <__assert_fail@plt+0x4a34>
   15544:	cmp	r6, #0
   15548:	sbcs	r3, r7, #4194304	; 0x400000
   1554c:	bge	15aac <__assert_fail@plt+0x4a44>
   15550:	lsl	r3, r7, #9
   15554:	orr	r3, r3, r6, lsr #23
   15558:	lsl	r2, r6, #9
   1555c:	mov	r6, r2
   15560:	mov	r7, r3
   15564:	b	154ec <__assert_fail@plt+0x4484>
   15568:	mov	r2, #0
   1556c:	ldr	r3, [pc, #1520]	; 15b64 <__assert_fail@plt+0x4afc>
   15570:	cmp	r6, r2
   15574:	sbcs	r3, r7, r3
   15578:	blt	15a9c <__assert_fail@plt+0x4a34>
   1557c:	cmp	r6, #0
   15580:	sbcs	r3, r7, #2097152	; 0x200000
   15584:	bge	15aac <__assert_fail@plt+0x4a44>
   15588:	lsl	r3, r7, #10
   1558c:	orr	r3, r3, r6, lsr #22
   15590:	lsl	r2, r6, #10
   15594:	mov	r6, r2
   15598:	mov	r7, r3
   1559c:	b	154ec <__assert_fail@plt+0x4484>
   155a0:	asr	r1, r3, #31
   155a4:	mov	r2, r3
   155a8:	mov	r3, r1
   155ac:	mov	r0, #0
   155b0:	mov	r1, #-2147483648	; 0x80000000
   155b4:	strd	r2, [sp]
   155b8:	bl	16094 <__assert_fail@plt+0x502c>
   155bc:	str	fp, [sp, #12]
   155c0:	strd	r4, [sp, #16]
   155c4:	mov	r8, #5
   155c8:	ldrd	r4, [sp]
   155cc:	mov	r9, #0
   155d0:	str	sl, [sp]
   155d4:	mov	fp, r1
   155d8:	mov	sl, r0
   155dc:	b	15618 <__assert_fail@plt+0x45b0>
   155e0:	mov	r3, r5
   155e4:	mov	r2, r4
   155e8:	mvn	r0, #0
   155ec:	mvn	r1, #-2147483648	; 0x80000000
   155f0:	bl	16094 <__assert_fail@plt+0x502c>
   155f4:	cmp	r0, r6
   155f8:	sbcs	r3, r1, r7
   155fc:	blt	15aec <__assert_fail@plt+0x4a84>
   15600:	mul	r3, r6, r5
   15604:	mla	r3, r4, r7, r3
   15608:	umull	r6, r7, r6, r4
   1560c:	add	r7, r3, r7
   15610:	subs	r8, r8, #1
   15614:	beq	15a88 <__assert_fail@plt+0x4a20>
   15618:	cmp	r6, sl
   1561c:	sbcs	r3, r7, fp
   15620:	bge	155e0 <__assert_fail@plt+0x4578>
   15624:	mov	r9, #1
   15628:	mov	r6, #0
   1562c:	mov	r7, #-2147483648	; 0x80000000
   15630:	b	15610 <__assert_fail@plt+0x45a8>
   15634:	asr	r1, r3, #31
   15638:	mov	r2, r3
   1563c:	mov	r3, r1
   15640:	mov	r0, #0
   15644:	mov	r1, #-2147483648	; 0x80000000
   15648:	strd	r2, [sp]
   1564c:	bl	16094 <__assert_fail@plt+0x502c>
   15650:	str	fp, [sp, #12]
   15654:	strd	r4, [sp, #16]
   15658:	mov	r8, #8
   1565c:	ldrd	r4, [sp]
   15660:	mov	r9, #0
   15664:	str	sl, [sp]
   15668:	mov	fp, r1
   1566c:	mov	sl, r0
   15670:	b	156ac <__assert_fail@plt+0x4644>
   15674:	mov	r3, r5
   15678:	mov	r2, r4
   1567c:	mvn	r0, #0
   15680:	mvn	r1, #-2147483648	; 0x80000000
   15684:	bl	16094 <__assert_fail@plt+0x502c>
   15688:	cmp	r0, r6
   1568c:	sbcs	r3, r1, r7
   15690:	blt	15acc <__assert_fail@plt+0x4a64>
   15694:	mul	r3, r6, r5
   15698:	mla	r3, r4, r7, r3
   1569c:	umull	r6, r7, r6, r4
   156a0:	add	r7, r3, r7
   156a4:	subs	r8, r8, #1
   156a8:	beq	15a88 <__assert_fail@plt+0x4a20>
   156ac:	cmp	r6, sl
   156b0:	sbcs	r3, r7, fp
   156b4:	bge	15674 <__assert_fail@plt+0x460c>
   156b8:	mov	r9, #1
   156bc:	mov	r6, #0
   156c0:	mov	r7, #-2147483648	; 0x80000000
   156c4:	b	156a4 <__assert_fail@plt+0x463c>
   156c8:	asr	r9, r3, #31
   156cc:	mov	r8, r3
   156d0:	mov	r2, r3
   156d4:	mov	r0, #0
   156d8:	mov	r3, r9
   156dc:	mov	r1, #-2147483648	; 0x80000000
   156e0:	bl	16094 <__assert_fail@plt+0x502c>
   156e4:	cmp	r6, r0
   156e8:	sbcs	r3, r7, r1
   156ec:	blt	15a9c <__assert_fail@plt+0x4a34>
   156f0:	mov	r3, r9
   156f4:	mov	r2, r8
   156f8:	mvn	r0, #0
   156fc:	mvn	r1, #-2147483648	; 0x80000000
   15700:	bl	16094 <__assert_fail@plt+0x502c>
   15704:	cmp	r0, r6
   15708:	sbcs	r3, r1, r7
   1570c:	blt	15aac <__assert_fail@plt+0x4a44>
   15710:	mul	r3, r6, r9
   15714:	mla	r3, r8, r7, r3
   15718:	umull	r6, r7, r6, r8
   1571c:	add	r7, r3, r7
   15720:	b	154ec <__assert_fail@plt+0x4484>
   15724:	asr	r1, r3, #31
   15728:	mov	r2, r3
   1572c:	mov	r3, r1
   15730:	mov	r0, #0
   15734:	mov	r1, #-2147483648	; 0x80000000
   15738:	strd	r2, [sp]
   1573c:	bl	16094 <__assert_fail@plt+0x502c>
   15740:	str	fp, [sp, #12]
   15744:	strd	r4, [sp, #16]
   15748:	mov	r8, #3
   1574c:	ldrd	r4, [sp]
   15750:	mov	r9, #0
   15754:	str	sl, [sp]
   15758:	mov	fp, r1
   1575c:	mov	sl, r0
   15760:	b	1579c <__assert_fail@plt+0x4734>
   15764:	mov	r3, r5
   15768:	mov	r2, r4
   1576c:	mvn	r0, #0
   15770:	mvn	r1, #-2147483648	; 0x80000000
   15774:	bl	16094 <__assert_fail@plt+0x502c>
   15778:	cmp	r0, r6
   1577c:	sbcs	r3, r1, r7
   15780:	blt	15abc <__assert_fail@plt+0x4a54>
   15784:	mul	r3, r6, r5
   15788:	mla	r3, r4, r7, r3
   1578c:	umull	r6, r7, r6, r4
   15790:	add	r7, r3, r7
   15794:	subs	r8, r8, #1
   15798:	beq	15a88 <__assert_fail@plt+0x4a20>
   1579c:	cmp	r6, sl
   157a0:	sbcs	r3, r7, fp
   157a4:	bge	15764 <__assert_fail@plt+0x46fc>
   157a8:	mov	r9, #1
   157ac:	mov	r6, #0
   157b0:	mov	r7, #-2147483648	; 0x80000000
   157b4:	b	15794 <__assert_fail@plt+0x472c>
   157b8:	asr	r1, r3, #31
   157bc:	mov	r2, r3
   157c0:	mov	r3, r1
   157c4:	mov	r0, #0
   157c8:	mov	r1, #-2147483648	; 0x80000000
   157cc:	strd	r2, [sp]
   157d0:	bl	16094 <__assert_fail@plt+0x502c>
   157d4:	str	fp, [sp, #12]
   157d8:	strd	r4, [sp, #16]
   157dc:	mov	r8, #4
   157e0:	ldrd	r4, [sp]
   157e4:	mov	r9, #0
   157e8:	str	sl, [sp]
   157ec:	mov	fp, r1
   157f0:	mov	sl, r0
   157f4:	b	15830 <__assert_fail@plt+0x47c8>
   157f8:	mov	r3, r5
   157fc:	mov	r2, r4
   15800:	mvn	r0, #0
   15804:	mvn	r1, #-2147483648	; 0x80000000
   15808:	bl	16094 <__assert_fail@plt+0x502c>
   1580c:	cmp	r0, r6
   15810:	sbcs	r3, r1, r7
   15814:	blt	15b0c <__assert_fail@plt+0x4aa4>
   15818:	mul	r3, r6, r5
   1581c:	mla	r3, r4, r7, r3
   15820:	umull	r6, r7, r6, r4
   15824:	add	r7, r3, r7
   15828:	subs	r8, r8, #1
   1582c:	beq	15a88 <__assert_fail@plt+0x4a20>
   15830:	cmp	r6, sl
   15834:	sbcs	r3, r7, fp
   15838:	bge	157f8 <__assert_fail@plt+0x4790>
   1583c:	mov	r9, #1
   15840:	mov	r6, #0
   15844:	mov	r7, #-2147483648	; 0x80000000
   15848:	b	15828 <__assert_fail@plt+0x47c0>
   1584c:	asr	r1, r3, #31
   15850:	mov	r2, r3
   15854:	mov	r3, r1
   15858:	mov	r0, #0
   1585c:	mov	r1, #-2147483648	; 0x80000000
   15860:	strd	r2, [sp]
   15864:	bl	16094 <__assert_fail@plt+0x502c>
   15868:	str	fp, [sp, #12]
   1586c:	strd	r4, [sp, #16]
   15870:	mov	r8, #7
   15874:	ldrd	r4, [sp]
   15878:	mov	r9, #0
   1587c:	str	sl, [sp]
   15880:	mov	fp, r1
   15884:	mov	sl, r0
   15888:	b	158c4 <__assert_fail@plt+0x485c>
   1588c:	mov	r3, r5
   15890:	mov	r2, r4
   15894:	mvn	r0, #0
   15898:	mvn	r1, #-2147483648	; 0x80000000
   1589c:	bl	16094 <__assert_fail@plt+0x502c>
   158a0:	cmp	r0, r6
   158a4:	sbcs	r3, r1, r7
   158a8:	blt	15afc <__assert_fail@plt+0x4a94>
   158ac:	mul	r3, r6, r5
   158b0:	mla	r3, r4, r7, r3
   158b4:	umull	r6, r7, r6, r4
   158b8:	add	r7, r3, r7
   158bc:	subs	r8, r8, #1
   158c0:	beq	15a88 <__assert_fail@plt+0x4a20>
   158c4:	cmp	r6, sl
   158c8:	sbcs	r3, r7, fp
   158cc:	bge	1588c <__assert_fail@plt+0x4824>
   158d0:	mov	r9, #1
   158d4:	mov	r6, #0
   158d8:	mov	r7, #-2147483648	; 0x80000000
   158dc:	b	158bc <__assert_fail@plt+0x4854>
   158e0:	asr	r1, r3, #31
   158e4:	mov	r2, r3
   158e8:	mov	r3, r1
   158ec:	mov	r0, #0
   158f0:	mov	r1, #-2147483648	; 0x80000000
   158f4:	strd	r2, [sp]
   158f8:	bl	16094 <__assert_fail@plt+0x502c>
   158fc:	str	fp, [sp, #12]
   15900:	strd	r4, [sp, #16]
   15904:	mov	r8, #6
   15908:	ldrd	r4, [sp]
   1590c:	mov	r9, #0
   15910:	str	sl, [sp]
   15914:	mov	fp, r1
   15918:	mov	sl, r0
   1591c:	b	15958 <__assert_fail@plt+0x48f0>
   15920:	mov	r3, r5
   15924:	mov	r2, r4
   15928:	mvn	r0, #0
   1592c:	mvn	r1, #-2147483648	; 0x80000000
   15930:	bl	16094 <__assert_fail@plt+0x502c>
   15934:	cmp	r0, r6
   15938:	sbcs	r3, r1, r7
   1593c:	blt	15adc <__assert_fail@plt+0x4a74>
   15940:	mul	r3, r6, r5
   15944:	mla	r3, r4, r7, r3
   15948:	umull	r6, r7, r6, r4
   1594c:	add	r7, r3, r7
   15950:	subs	r8, r8, #1
   15954:	beq	15a88 <__assert_fail@plt+0x4a20>
   15958:	cmp	r6, sl
   1595c:	sbcs	r3, r7, fp
   15960:	bge	15920 <__assert_fail@plt+0x48b8>
   15964:	mov	r9, #1
   15968:	mov	r6, #0
   1596c:	mov	r7, #-2147483648	; 0x80000000
   15970:	b	15950 <__assert_fail@plt+0x48e8>
   15974:	ldr	r3, [pc, #488]	; 15b64 <__assert_fail@plt+0x4afc>
   15978:	mov	r2, #0
   1597c:	mov	r0, r2
   15980:	mov	r1, r3
   15984:	mov	r2, #1024	; 0x400
   15988:	mov	r3, #0
   1598c:	mov	fp, #1
   15990:	strd	r2, [sp]
   15994:	b	15868 <__assert_fail@plt+0x4800>
   15998:	ldr	r3, [pc, #452]	; 15b64 <__assert_fail@plt+0x4afc>
   1599c:	mov	r2, #0
   159a0:	mov	r0, r2
   159a4:	mov	r1, r3
   159a8:	mov	r2, #1024	; 0x400
   159ac:	mov	r3, #0
   159b0:	mov	fp, #1
   159b4:	strd	r2, [sp]
   159b8:	b	15650 <__assert_fail@plt+0x45e8>
   159bc:	ldr	r3, [pc, #416]	; 15b64 <__assert_fail@plt+0x4afc>
   159c0:	mov	r2, #0
   159c4:	mov	r0, r2
   159c8:	mov	r1, r3
   159cc:	mov	r2, #1024	; 0x400
   159d0:	mov	r3, #0
   159d4:	mov	fp, #1
   159d8:	strd	r2, [sp]
   159dc:	b	157d4 <__assert_fail@plt+0x476c>
   159e0:	ldr	r3, [pc, #380]	; 15b64 <__assert_fail@plt+0x4afc>
   159e4:	mov	r2, #0
   159e8:	mov	r0, r2
   159ec:	mov	r1, r3
   159f0:	mov	r2, #1024	; 0x400
   159f4:	mov	r3, #0
   159f8:	mov	fp, #1
   159fc:	strd	r2, [sp]
   15a00:	b	155bc <__assert_fail@plt+0x4554>
   15a04:	ldr	r3, [pc, #344]	; 15b64 <__assert_fail@plt+0x4afc>
   15a08:	mov	r2, #0
   15a0c:	mov	fp, #1
   15a10:	strd	r2, [sp]
   15a14:	mov	r8, #1024	; 0x400
   15a18:	mov	r9, #0
   15a1c:	b	15480 <__assert_fail@plt+0x4418>
   15a20:	mov	fp, #1
   15a24:	mov	r0, #0
   15a28:	ldr	r1, [pc, #308]	; 15b64 <__assert_fail@plt+0x4afc>
   15a2c:	mov	r8, #1024	; 0x400
   15a30:	mov	r9, #0
   15a34:	b	156e4 <__assert_fail@plt+0x467c>
   15a38:	ldr	r3, [pc, #292]	; 15b64 <__assert_fail@plt+0x4afc>
   15a3c:	mov	r2, #0
   15a40:	mov	r0, r2
   15a44:	mov	r1, r3
   15a48:	mov	r2, #1024	; 0x400
   15a4c:	mov	r3, #0
   15a50:	mov	fp, #1
   15a54:	strd	r2, [sp]
   15a58:	b	15740 <__assert_fail@plt+0x46d8>
   15a5c:	ldr	r3, [pc, #256]	; 15b64 <__assert_fail@plt+0x4afc>
   15a60:	mov	r2, #0
   15a64:	mov	r0, r2
   15a68:	mov	r1, r3
   15a6c:	mov	r2, #1024	; 0x400
   15a70:	mov	r3, #0
   15a74:	mov	fp, #1
   15a78:	strd	r2, [sp]
   15a7c:	b	158fc <__assert_fail@plt+0x4894>
   15a80:	mov	fp, #1
   15a84:	b	154ec <__assert_fail@plt+0x4484>
   15a88:	ldrd	r4, [sp, #16]
   15a8c:	ldr	fp, [sp, #12]
   15a90:	ldr	sl, [sp]
   15a94:	orr	r4, r4, r9
   15a98:	b	154ec <__assert_fail@plt+0x4484>
   15a9c:	mov	r4, #1
   15aa0:	mov	r6, #0
   15aa4:	mov	r7, #-2147483648	; 0x80000000
   15aa8:	b	154ec <__assert_fail@plt+0x4484>
   15aac:	mov	r4, #1
   15ab0:	mvn	r6, #0
   15ab4:	mvn	r7, #-2147483648	; 0x80000000
   15ab8:	b	154ec <__assert_fail@plt+0x4484>
   15abc:	mov	r9, #1
   15ac0:	mvn	r6, #0
   15ac4:	mvn	r7, #-2147483648	; 0x80000000
   15ac8:	b	15794 <__assert_fail@plt+0x472c>
   15acc:	mov	r9, #1
   15ad0:	mvn	r6, #0
   15ad4:	mvn	r7, #-2147483648	; 0x80000000
   15ad8:	b	156a4 <__assert_fail@plt+0x463c>
   15adc:	mov	r9, #1
   15ae0:	mvn	r6, #0
   15ae4:	mvn	r7, #-2147483648	; 0x80000000
   15ae8:	b	15950 <__assert_fail@plt+0x48e8>
   15aec:	mov	r9, #1
   15af0:	mvn	r6, #0
   15af4:	mvn	r7, #-2147483648	; 0x80000000
   15af8:	b	15610 <__assert_fail@plt+0x45a8>
   15afc:	mov	r9, #1
   15b00:	mvn	r6, #0
   15b04:	mvn	r7, #-2147483648	; 0x80000000
   15b08:	b	158bc <__assert_fail@plt+0x4854>
   15b0c:	mov	r9, #1
   15b10:	mvn	r6, #0
   15b14:	mvn	r7, #-2147483648	; 0x80000000
   15b18:	b	15828 <__assert_fail@plt+0x47c0>
   15b1c:	mov	fp, #2
   15b20:	mov	r3, #1000	; 0x3e8
   15b24:	b	15378 <__assert_fail@plt+0x4310>
   15b28:	ldr	r3, [sp, #8]
   15b2c:	ldrb	r2, [r3, #2]
   15b30:	mov	r3, #1024	; 0x400
   15b34:	cmp	r2, #66	; 0x42
   15b38:	movne	fp, #1
   15b3c:	moveq	fp, #3
   15b40:	b	15378 <__assert_fail@plt+0x4310>
   15b44:	ldr	r3, [pc, #28]	; 15b68 <__assert_fail@plt+0x4b00>
   15b48:	mov	r2, #96	; 0x60
   15b4c:	ldr	r1, [pc, #24]	; 15b6c <__assert_fail@plt+0x4b04>
   15b50:	ldr	r0, [pc, #24]	; 15b70 <__assert_fail@plt+0x4b08>
   15b54:	bl	11068 <__assert_fail@plt>
   15b58:	bl	10e7c <__stack_chk_fail@plt>
   15b5c:	andeq	r7, r2, r8, lsl #30
   15b60:			; <UNDEFINED> instruction: 0xffc00000
   15b64:			; <UNDEFINED> instruction: 0xffe00000
   15b68:	andeq	r7, r1, r0, lsr #7
   15b6c:	andeq	r7, r1, ip, lsr #7
   15b70:			; <UNDEFINED> instruction: 0x000173bc
   15b74:	push	{r4, r5, lr}
   15b78:	sub	sp, sp, #12
   15b7c:	mov	r4, r0
   15b80:	bl	10fa8 <fileno@plt>
   15b84:	cmp	r0, #0
   15b88:	mov	r0, r4
   15b8c:	blt	15c08 <__assert_fail@plt+0x4ba0>
   15b90:	bl	10f18 <__freading@plt>
   15b94:	cmp	r0, #0
   15b98:	bne	15bd4 <__assert_fail@plt+0x4b6c>
   15b9c:	mov	r0, r4
   15ba0:	bl	15c14 <__assert_fail@plt+0x4bac>
   15ba4:	cmp	r0, #0
   15ba8:	beq	15c04 <__assert_fail@plt+0x4b9c>
   15bac:	bl	10f78 <__errno_location@plt>
   15bb0:	mov	r5, r0
   15bb4:	mov	r0, r4
   15bb8:	ldr	r4, [r5]
   15bbc:	bl	10fc0 <fclose@plt>
   15bc0:	cmp	r4, #0
   15bc4:	mvnne	r0, #0
   15bc8:	strne	r4, [r5]
   15bcc:	add	sp, sp, #12
   15bd0:	pop	{r4, r5, pc}
   15bd4:	mov	r0, r4
   15bd8:	bl	10fa8 <fileno@plt>
   15bdc:	mov	r3, #1
   15be0:	str	r3, [sp]
   15be4:	mov	r2, #0
   15be8:	mov	r3, #0
   15bec:	bl	10eb8 <lseek64@plt>
   15bf0:	mvn	r3, #0
   15bf4:	mvn	r2, #0
   15bf8:	cmp	r1, r3
   15bfc:	cmpeq	r0, r2
   15c00:	bne	15b9c <__assert_fail@plt+0x4b34>
   15c04:	mov	r0, r4
   15c08:	add	sp, sp, #12
   15c0c:	pop	{r4, r5, lr}
   15c10:	b	10fc0 <fclose@plt>
   15c14:	push	{r4, lr}
   15c18:	subs	r4, r0, #0
   15c1c:	sub	sp, sp, #8
   15c20:	beq	15c3c <__assert_fail@plt+0x4bd4>
   15c24:	bl	10f18 <__freading@plt>
   15c28:	cmp	r0, #0
   15c2c:	beq	15c3c <__assert_fail@plt+0x4bd4>
   15c30:	ldr	r3, [r4]
   15c34:	tst	r3, #256	; 0x100
   15c38:	bne	15c4c <__assert_fail@plt+0x4be4>
   15c3c:	mov	r0, r4
   15c40:	add	sp, sp, #8
   15c44:	pop	{r4, lr}
   15c48:	b	10e10 <fflush@plt>
   15c4c:	mov	r3, #1
   15c50:	str	r3, [sp]
   15c54:	mov	r2, #0
   15c58:	mov	r3, #0
   15c5c:	mov	r0, r4
   15c60:	bl	15c74 <__assert_fail@plt+0x4c0c>
   15c64:	mov	r0, r4
   15c68:	add	sp, sp, #8
   15c6c:	pop	{r4, lr}
   15c70:	b	10e10 <fflush@plt>
   15c74:	push	{r4, r5, r6, r7, r8, lr}
   15c78:	sub	sp, sp, #8
   15c7c:	ldmib	r0, {ip, lr}
   15c80:	mov	r4, r0
   15c84:	ldr	r5, [sp, #32]
   15c88:	cmp	lr, ip
   15c8c:	beq	15ca4 <__assert_fail@plt+0x4c3c>
   15c90:	str	r5, [sp, #32]
   15c94:	mov	r0, r4
   15c98:	add	sp, sp, #8
   15c9c:	pop	{r4, r5, r6, r7, r8, lr}
   15ca0:	b	10fcc <fseeko64@plt>
   15ca4:	ldr	lr, [r0, #20]
   15ca8:	ldr	ip, [r0, #16]
   15cac:	cmp	lr, ip
   15cb0:	bne	15c90 <__assert_fail@plt+0x4c28>
   15cb4:	ldr	r8, [r0, #36]	; 0x24
   15cb8:	cmp	r8, #0
   15cbc:	bne	15c90 <__assert_fail@plt+0x4c28>
   15cc0:	mov	r6, r2
   15cc4:	mov	r7, r3
   15cc8:	bl	10fa8 <fileno@plt>
   15ccc:	mov	r2, r6
   15cd0:	mov	r3, r7
   15cd4:	str	r5, [sp]
   15cd8:	bl	10eb8 <lseek64@plt>
   15cdc:	mvn	r3, #0
   15ce0:	mvn	r2, #0
   15ce4:	cmp	r1, r3
   15ce8:	cmpeq	r0, r2
   15cec:	beq	15d0c <__assert_fail@plt+0x4ca4>
   15cf0:	ldr	r3, [r4]
   15cf4:	strd	r0, [r4, #80]	; 0x50
   15cf8:	mov	r0, r8
   15cfc:	bic	r3, r3, #16
   15d00:	str	r3, [r4]
   15d04:	add	sp, sp, #8
   15d08:	pop	{r4, r5, r6, r7, r8, pc}
   15d0c:	mvn	r0, #0
   15d10:	b	15d04 <__assert_fail@plt+0x4c9c>
   15d14:	push	{r4, r5, r6, r7, r8, lr}
   15d18:	subs	r7, r0, #0
   15d1c:	ldr	r5, [pc, #108]	; 15d90 <__assert_fail@plt+0x4d28>
   15d20:	sub	sp, sp, #8
   15d24:	mov	r8, r1
   15d28:	ldr	r1, [r5]
   15d2c:	moveq	r7, sp
   15d30:	str	r1, [sp, #4]
   15d34:	mov	r0, r7
   15d38:	mov	r1, r8
   15d3c:	mov	r6, r2
   15d40:	bl	10ee8 <mbrtowc@plt>
   15d44:	cmp	r6, #0
   15d48:	cmnne	r0, #3
   15d4c:	mov	r4, r0
   15d50:	bhi	15d70 <__assert_fail@plt+0x4d08>
   15d54:	ldr	r2, [sp, #4]
   15d58:	ldr	r3, [r5]
   15d5c:	mov	r0, r4
   15d60:	cmp	r2, r3
   15d64:	bne	15d8c <__assert_fail@plt+0x4d24>
   15d68:	add	sp, sp, #8
   15d6c:	pop	{r4, r5, r6, r7, r8, pc}
   15d70:	mov	r0, #0
   15d74:	bl	15e08 <__assert_fail@plt+0x4da0>
   15d78:	cmp	r0, #0
   15d7c:	moveq	r4, #1
   15d80:	ldrbeq	r3, [r8]
   15d84:	streq	r3, [r7]
   15d88:	b	15d54 <__assert_fail@plt+0x4cec>
   15d8c:	bl	10e7c <__stack_chk_fail@plt>
   15d90:	andeq	r7, r2, r8, lsl #30
   15d94:	push	{r4, r5, r6, lr}
   15d98:	mov	r4, r0
   15d9c:	bl	10edc <__fpending@plt>
   15da0:	ldr	r5, [r4]
   15da4:	and	r5, r5, #32
   15da8:	mov	r6, r0
   15dac:	mov	r0, r4
   15db0:	bl	15b74 <__assert_fail@plt+0x4b0c>
   15db4:	cmp	r5, #0
   15db8:	mov	r4, r0
   15dbc:	bne	15de8 <__assert_fail@plt+0x4d80>
   15dc0:	cmp	r0, #0
   15dc4:	beq	15de0 <__assert_fail@plt+0x4d78>
   15dc8:	cmp	r6, #0
   15dcc:	bne	15e00 <__assert_fail@plt+0x4d98>
   15dd0:	bl	10f78 <__errno_location@plt>
   15dd4:	ldr	r4, [r0]
   15dd8:	subs	r4, r4, #9
   15ddc:	mvnne	r4, #0
   15de0:	mov	r0, r4
   15de4:	pop	{r4, r5, r6, pc}
   15de8:	cmp	r0, #0
   15dec:	bne	15e00 <__assert_fail@plt+0x4d98>
   15df0:	bl	10f78 <__errno_location@plt>
   15df4:	str	r4, [r0]
   15df8:	mvn	r4, #0
   15dfc:	b	15de0 <__assert_fail@plt+0x4d78>
   15e00:	mvn	r4, #0
   15e04:	b	15de0 <__assert_fail@plt+0x4d78>
   15e08:	push	{r4, lr}
   15e0c:	mov	r1, #0
   15e10:	bl	10ff0 <setlocale@plt>
   15e14:	subs	r4, r0, #0
   15e18:	beq	15e44 <__assert_fail@plt+0x4ddc>
   15e1c:	ldr	r1, [pc, #40]	; 15e4c <__assert_fail@plt+0x4de4>
   15e20:	bl	10df8 <strcmp@plt>
   15e24:	cmp	r0, #0
   15e28:	popeq	{r4, pc}
   15e2c:	mov	r0, r4
   15e30:	ldr	r1, [pc, #24]	; 15e50 <__assert_fail@plt+0x4de8>
   15e34:	bl	10df8 <strcmp@plt>
   15e38:	adds	r0, r0, #0
   15e3c:	movne	r0, #1
   15e40:	pop	{r4, pc}
   15e44:	mov	r0, #1
   15e48:	pop	{r4, pc}
   15e4c:	andeq	r7, r1, r4, ror #7
   15e50:	andeq	r7, r1, r8, ror #7
   15e54:	push	{r4, lr}
   15e58:	mov	r0, #14
   15e5c:	bl	11008 <nl_langinfo@plt>
   15e60:	cmp	r0, #0
   15e64:	beq	15e7c <__assert_fail@plt+0x4e14>
   15e68:	ldrb	r2, [r0]
   15e6c:	ldr	r3, [pc, #16]	; 15e84 <__assert_fail@plt+0x4e1c>
   15e70:	cmp	r2, #0
   15e74:	moveq	r0, r3
   15e78:	pop	{r4, pc}
   15e7c:	ldr	r0, [pc]	; 15e84 <__assert_fail@plt+0x4e1c>
   15e80:	pop	{r4, pc}
   15e84:	strdeq	r7, [r1], -r0
   15e88:	subs	r2, r1, #1
   15e8c:	bxeq	lr
   15e90:	bcc	16068 <__assert_fail@plt+0x5000>
   15e94:	cmp	r0, r1
   15e98:	bls	1604c <__assert_fail@plt+0x4fe4>
   15e9c:	tst	r1, r2
   15ea0:	beq	16058 <__assert_fail@plt+0x4ff0>
   15ea4:	clz	r3, r0
   15ea8:	clz	r2, r1
   15eac:	sub	r3, r2, r3
   15eb0:	rsbs	r3, r3, #31
   15eb4:	addne	r3, r3, r3, lsl #1
   15eb8:	mov	r2, #0
   15ebc:	addne	pc, pc, r3, lsl #2
   15ec0:	nop			; (mov r0, r0)
   15ec4:	cmp	r0, r1, lsl #31
   15ec8:	adc	r2, r2, r2
   15ecc:	subcs	r0, r0, r1, lsl #31
   15ed0:	cmp	r0, r1, lsl #30
   15ed4:	adc	r2, r2, r2
   15ed8:	subcs	r0, r0, r1, lsl #30
   15edc:	cmp	r0, r1, lsl #29
   15ee0:	adc	r2, r2, r2
   15ee4:	subcs	r0, r0, r1, lsl #29
   15ee8:	cmp	r0, r1, lsl #28
   15eec:	adc	r2, r2, r2
   15ef0:	subcs	r0, r0, r1, lsl #28
   15ef4:	cmp	r0, r1, lsl #27
   15ef8:	adc	r2, r2, r2
   15efc:	subcs	r0, r0, r1, lsl #27
   15f00:	cmp	r0, r1, lsl #26
   15f04:	adc	r2, r2, r2
   15f08:	subcs	r0, r0, r1, lsl #26
   15f0c:	cmp	r0, r1, lsl #25
   15f10:	adc	r2, r2, r2
   15f14:	subcs	r0, r0, r1, lsl #25
   15f18:	cmp	r0, r1, lsl #24
   15f1c:	adc	r2, r2, r2
   15f20:	subcs	r0, r0, r1, lsl #24
   15f24:	cmp	r0, r1, lsl #23
   15f28:	adc	r2, r2, r2
   15f2c:	subcs	r0, r0, r1, lsl #23
   15f30:	cmp	r0, r1, lsl #22
   15f34:	adc	r2, r2, r2
   15f38:	subcs	r0, r0, r1, lsl #22
   15f3c:	cmp	r0, r1, lsl #21
   15f40:	adc	r2, r2, r2
   15f44:	subcs	r0, r0, r1, lsl #21
   15f48:	cmp	r0, r1, lsl #20
   15f4c:	adc	r2, r2, r2
   15f50:	subcs	r0, r0, r1, lsl #20
   15f54:	cmp	r0, r1, lsl #19
   15f58:	adc	r2, r2, r2
   15f5c:	subcs	r0, r0, r1, lsl #19
   15f60:	cmp	r0, r1, lsl #18
   15f64:	adc	r2, r2, r2
   15f68:	subcs	r0, r0, r1, lsl #18
   15f6c:	cmp	r0, r1, lsl #17
   15f70:	adc	r2, r2, r2
   15f74:	subcs	r0, r0, r1, lsl #17
   15f78:	cmp	r0, r1, lsl #16
   15f7c:	adc	r2, r2, r2
   15f80:	subcs	r0, r0, r1, lsl #16
   15f84:	cmp	r0, r1, lsl #15
   15f88:	adc	r2, r2, r2
   15f8c:	subcs	r0, r0, r1, lsl #15
   15f90:	cmp	r0, r1, lsl #14
   15f94:	adc	r2, r2, r2
   15f98:	subcs	r0, r0, r1, lsl #14
   15f9c:	cmp	r0, r1, lsl #13
   15fa0:	adc	r2, r2, r2
   15fa4:	subcs	r0, r0, r1, lsl #13
   15fa8:	cmp	r0, r1, lsl #12
   15fac:	adc	r2, r2, r2
   15fb0:	subcs	r0, r0, r1, lsl #12
   15fb4:	cmp	r0, r1, lsl #11
   15fb8:	adc	r2, r2, r2
   15fbc:	subcs	r0, r0, r1, lsl #11
   15fc0:	cmp	r0, r1, lsl #10
   15fc4:	adc	r2, r2, r2
   15fc8:	subcs	r0, r0, r1, lsl #10
   15fcc:	cmp	r0, r1, lsl #9
   15fd0:	adc	r2, r2, r2
   15fd4:	subcs	r0, r0, r1, lsl #9
   15fd8:	cmp	r0, r1, lsl #8
   15fdc:	adc	r2, r2, r2
   15fe0:	subcs	r0, r0, r1, lsl #8
   15fe4:	cmp	r0, r1, lsl #7
   15fe8:	adc	r2, r2, r2
   15fec:	subcs	r0, r0, r1, lsl #7
   15ff0:	cmp	r0, r1, lsl #6
   15ff4:	adc	r2, r2, r2
   15ff8:	subcs	r0, r0, r1, lsl #6
   15ffc:	cmp	r0, r1, lsl #5
   16000:	adc	r2, r2, r2
   16004:	subcs	r0, r0, r1, lsl #5
   16008:	cmp	r0, r1, lsl #4
   1600c:	adc	r2, r2, r2
   16010:	subcs	r0, r0, r1, lsl #4
   16014:	cmp	r0, r1, lsl #3
   16018:	adc	r2, r2, r2
   1601c:	subcs	r0, r0, r1, lsl #3
   16020:	cmp	r0, r1, lsl #2
   16024:	adc	r2, r2, r2
   16028:	subcs	r0, r0, r1, lsl #2
   1602c:	cmp	r0, r1, lsl #1
   16030:	adc	r2, r2, r2
   16034:	subcs	r0, r0, r1, lsl #1
   16038:	cmp	r0, r1
   1603c:	adc	r2, r2, r2
   16040:	subcs	r0, r0, r1
   16044:	mov	r0, r2
   16048:	bx	lr
   1604c:	moveq	r0, #1
   16050:	movne	r0, #0
   16054:	bx	lr
   16058:	clz	r2, r1
   1605c:	rsb	r2, r2, #31
   16060:	lsr	r0, r0, r2
   16064:	bx	lr
   16068:	cmp	r0, #0
   1606c:	mvnne	r0, #0
   16070:	b	161a4 <__assert_fail@plt+0x513c>
   16074:	cmp	r1, #0
   16078:	beq	16068 <__assert_fail@plt+0x5000>
   1607c:	push	{r0, r1, lr}
   16080:	bl	15e88 <__assert_fail@plt+0x4e20>
   16084:	pop	{r1, r2, lr}
   16088:	mul	r3, r2, r0
   1608c:	sub	r1, r1, r3
   16090:	bx	lr
   16094:	cmp	r3, #0
   16098:	cmpeq	r2, #0
   1609c:	bne	160c0 <__assert_fail@plt+0x5058>
   160a0:	cmp	r1, #0
   160a4:	movlt	r1, #-2147483648	; 0x80000000
   160a8:	movlt	r0, #0
   160ac:	blt	160bc <__assert_fail@plt+0x5054>
   160b0:	cmpeq	r0, #0
   160b4:	mvnne	r1, #-2147483648	; 0x80000000
   160b8:	mvnne	r0, #0
   160bc:	b	161a4 <__assert_fail@plt+0x513c>
   160c0:	sub	sp, sp, #8
   160c4:	push	{sp, lr}
   160c8:	cmp	r1, #0
   160cc:	blt	160ec <__assert_fail@plt+0x5084>
   160d0:	cmp	r3, #0
   160d4:	blt	16120 <__assert_fail@plt+0x50b8>
   160d8:	bl	161b4 <__assert_fail@plt+0x514c>
   160dc:	ldr	lr, [sp, #4]
   160e0:	add	sp, sp, #8
   160e4:	pop	{r2, r3}
   160e8:	bx	lr
   160ec:	rsbs	r0, r0, #0
   160f0:	sbc	r1, r1, r1, lsl #1
   160f4:	cmp	r3, #0
   160f8:	blt	16144 <__assert_fail@plt+0x50dc>
   160fc:	bl	161b4 <__assert_fail@plt+0x514c>
   16100:	ldr	lr, [sp, #4]
   16104:	add	sp, sp, #8
   16108:	pop	{r2, r3}
   1610c:	rsbs	r0, r0, #0
   16110:	sbc	r1, r1, r1, lsl #1
   16114:	rsbs	r2, r2, #0
   16118:	sbc	r3, r3, r3, lsl #1
   1611c:	bx	lr
   16120:	rsbs	r2, r2, #0
   16124:	sbc	r3, r3, r3, lsl #1
   16128:	bl	161b4 <__assert_fail@plt+0x514c>
   1612c:	ldr	lr, [sp, #4]
   16130:	add	sp, sp, #8
   16134:	pop	{r2, r3}
   16138:	rsbs	r0, r0, #0
   1613c:	sbc	r1, r1, r1, lsl #1
   16140:	bx	lr
   16144:	rsbs	r2, r2, #0
   16148:	sbc	r3, r3, r3, lsl #1
   1614c:	bl	161b4 <__assert_fail@plt+0x514c>
   16150:	ldr	lr, [sp, #4]
   16154:	add	sp, sp, #8
   16158:	pop	{r2, r3}
   1615c:	rsbs	r2, r2, #0
   16160:	sbc	r3, r3, r3, lsl #1
   16164:	bx	lr
   16168:	cmp	r3, #0
   1616c:	cmpeq	r2, #0
   16170:	bne	16188 <__assert_fail@plt+0x5120>
   16174:	cmp	r1, #0
   16178:	cmpeq	r0, #0
   1617c:	mvnne	r1, #0
   16180:	mvnne	r0, #0
   16184:	b	161a4 <__assert_fail@plt+0x513c>
   16188:	sub	sp, sp, #8
   1618c:	push	{sp, lr}
   16190:	bl	161b4 <__assert_fail@plt+0x514c>
   16194:	ldr	lr, [sp, #4]
   16198:	add	sp, sp, #8
   1619c:	pop	{r2, r3}
   161a0:	bx	lr
   161a4:	push	{r1, lr}
   161a8:	mov	r0, #8
   161ac:	bl	10dec <raise@plt>
   161b0:	pop	{r1, pc}
   161b4:	cmp	r1, r3
   161b8:	cmpeq	r0, r2
   161bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161c0:	mov	r4, r0
   161c4:	movcc	r0, #0
   161c8:	mov	r5, r1
   161cc:	ldr	lr, [sp, #36]	; 0x24
   161d0:	movcc	r1, r0
   161d4:	bcc	162d0 <__assert_fail@plt+0x5268>
   161d8:	cmp	r3, #0
   161dc:	clzeq	ip, r2
   161e0:	clzne	ip, r3
   161e4:	addeq	ip, ip, #32
   161e8:	cmp	r5, #0
   161ec:	clzeq	r1, r4
   161f0:	addeq	r1, r1, #32
   161f4:	clzne	r1, r5
   161f8:	sub	ip, ip, r1
   161fc:	sub	sl, ip, #32
   16200:	lsl	r9, r3, ip
   16204:	rsb	fp, ip, #32
   16208:	orr	r9, r9, r2, lsl sl
   1620c:	orr	r9, r9, r2, lsr fp
   16210:	lsl	r8, r2, ip
   16214:	cmp	r5, r9
   16218:	cmpeq	r4, r8
   1621c:	movcc	r0, #0
   16220:	movcc	r1, r0
   16224:	bcc	16240 <__assert_fail@plt+0x51d8>
   16228:	mov	r0, #1
   1622c:	subs	r4, r4, r8
   16230:	lsl	r1, r0, sl
   16234:	orr	r1, r1, r0, lsr fp
   16238:	lsl	r0, r0, ip
   1623c:	sbc	r5, r5, r9
   16240:	cmp	ip, #0
   16244:	beq	162d0 <__assert_fail@plt+0x5268>
   16248:	lsr	r6, r8, #1
   1624c:	orr	r6, r6, r9, lsl #31
   16250:	lsr	r7, r9, #1
   16254:	mov	r2, ip
   16258:	b	1627c <__assert_fail@plt+0x5214>
   1625c:	subs	r3, r4, r6
   16260:	sbc	r8, r5, r7
   16264:	adds	r3, r3, r3
   16268:	adc	r8, r8, r8
   1626c:	adds	r4, r3, #1
   16270:	adc	r5, r8, #0
   16274:	subs	r2, r2, #1
   16278:	beq	16298 <__assert_fail@plt+0x5230>
   1627c:	cmp	r5, r7
   16280:	cmpeq	r4, r6
   16284:	bcs	1625c <__assert_fail@plt+0x51f4>
   16288:	adds	r4, r4, r4
   1628c:	adc	r5, r5, r5
   16290:	subs	r2, r2, #1
   16294:	bne	1627c <__assert_fail@plt+0x5214>
   16298:	lsr	r3, r4, ip
   1629c:	orr	r3, r3, r5, lsl fp
   162a0:	lsr	r2, r5, ip
   162a4:	orr	r3, r3, r5, lsr sl
   162a8:	adds	r0, r0, r4
   162ac:	mov	r4, r3
   162b0:	lsl	r3, r2, ip
   162b4:	orr	r3, r3, r4, lsl sl
   162b8:	lsl	ip, r4, ip
   162bc:	orr	r3, r3, r4, lsr fp
   162c0:	adc	r1, r1, r5
   162c4:	subs	r0, r0, ip
   162c8:	mov	r5, r2
   162cc:	sbc	r1, r1, r3
   162d0:	cmp	lr, #0
   162d4:	strdne	r4, [lr]
   162d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   162e0:	mov	r7, r0
   162e4:	ldr	r6, [pc, #72]	; 16334 <__assert_fail@plt+0x52cc>
   162e8:	ldr	r5, [pc, #72]	; 16338 <__assert_fail@plt+0x52d0>
   162ec:	add	r6, pc, r6
   162f0:	add	r5, pc, r5
   162f4:	sub	r6, r6, r5
   162f8:	mov	r8, r1
   162fc:	mov	r9, r2
   16300:	bl	10db4 <calloc@plt-0x20>
   16304:	asrs	r6, r6, #2
   16308:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1630c:	mov	r4, #0
   16310:	add	r4, r4, #1
   16314:	ldr	r3, [r5], #4
   16318:	mov	r2, r9
   1631c:	mov	r1, r8
   16320:	mov	r0, r7
   16324:	blx	r3
   16328:	cmp	r6, r4
   1632c:	bne	16310 <__assert_fail@plt+0x52a8>
   16330:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16334:	andeq	r1, r1, r0, lsl ip
   16338:	andeq	r1, r1, r8, lsl #24
   1633c:	bx	lr
   16340:	ldr	r3, [pc, #12]	; 16354 <__assert_fail@plt+0x52ec>
   16344:	mov	r1, #0
   16348:	add	r3, pc, r3
   1634c:	ldr	r2, [r3]
   16350:	b	10f84 <__cxa_atexit@plt>
   16354:	andeq	r1, r1, r4, lsr #27

Disassembly of section .fini:

00016358 <.fini>:
   16358:	push	{r3, lr}
   1635c:	pop	{r3, pc}
