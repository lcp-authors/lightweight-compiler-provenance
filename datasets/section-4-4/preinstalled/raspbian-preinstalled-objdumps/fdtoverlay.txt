
raspbian-preinstalled/fdtoverlay:     file format elf32-littlearm


Disassembly of section .init:

00010900 <.init>:
   10900:	push	{r3, lr}
   10904:	bl	11110 <__assert_fail@plt+0x640>
   10908:	pop	{r3, pc}

Disassembly of section .plt:

0001090c <calloc@plt-0x14>:
   1090c:	push	{lr}		; (str lr, [sp, #-4]!)
   10910:	ldr	lr, [pc, #4]	; 1091c <calloc@plt-0x4>
   10914:	add	lr, pc, lr
   10918:	ldr	pc, [lr, #8]!
   1091c:	andeq	r6, r1, r8, lsr #12

00010920 <calloc@plt>:
   10920:	add	ip, pc, #0, 12
   10924:	add	ip, ip, #90112	; 0x16000
   10928:	ldr	pc, [ip, #1576]!	; 0x628

0001092c <strcmp@plt>:
   1092c:	add	ip, pc, #0, 12
   10930:	add	ip, ip, #90112	; 0x16000
   10934:	ldr	pc, [ip, #1568]!	; 0x620

00010938 <strtol@plt>:
   10938:	add	ip, pc, #0, 12
   1093c:	add	ip, ip, #90112	; 0x16000
   10940:	ldr	pc, [ip, #1560]!	; 0x618

00010944 <read@plt>:
   10944:	add	ip, pc, #0, 12
   10948:	add	ip, ip, #90112	; 0x16000
   1094c:	ldr	pc, [ip, #1552]!	; 0x610

00010950 <memmove@plt>:
   10950:	add	ip, pc, #0, 12
   10954:	add	ip, ip, #90112	; 0x16000
   10958:	ldr	pc, [ip, #1544]!	; 0x608

0001095c <free@plt>:
   1095c:	add	ip, pc, #0, 12
   10960:	add	ip, ip, #90112	; 0x16000
   10964:	ldr	pc, [ip, #1536]!	; 0x600

00010968 <__vsnprintf_chk@plt>:
   10968:	add	ip, pc, #0, 12
   1096c:	add	ip, ip, #90112	; 0x16000
   10970:	ldr	pc, [ip, #1528]!	; 0x5f8

00010974 <memcpy@plt>:
   10974:	add	ip, pc, #0, 12
   10978:	add	ip, ip, #90112	; 0x16000
   1097c:	ldr	pc, [ip, #1520]!	; 0x5f0

00010980 <memcmp@plt>:
   10980:	add	ip, pc, #0, 12
   10984:	add	ip, ip, #90112	; 0x16000
   10988:	ldr	pc, [ip, #1512]!	; 0x5e8

0001098c <__stack_chk_fail@plt>:
   1098c:	add	ip, pc, #0, 12
   10990:	add	ip, ip, #90112	; 0x16000
   10994:	ldr	pc, [ip, #1504]!	; 0x5e0

00010998 <realloc@plt>:
   10998:	add	ip, pc, #0, 12
   1099c:	add	ip, ip, #90112	; 0x16000
   109a0:	ldr	pc, [ip, #1496]!	; 0x5d8

000109a4 <fwrite@plt>:
   109a4:	add	ip, pc, #0, 12
   109a8:	add	ip, ip, #90112	; 0x16000
   109ac:	ldr	pc, [ip, #1488]!	; 0x5d0

000109b0 <malloc@plt>:
   109b0:	add	ip, pc, #0, 12
   109b4:	add	ip, ip, #90112	; 0x16000
   109b8:	ldr	pc, [ip, #1480]!	; 0x5c8

000109bc <__libc_start_main@plt>:
   109bc:	add	ip, pc, #0, 12
   109c0:	add	ip, ip, #90112	; 0x16000
   109c4:	ldr	pc, [ip, #1472]!	; 0x5c0

000109c8 <strerror@plt>:
   109c8:	add	ip, pc, #0, 12
   109cc:	add	ip, ip, #90112	; 0x16000
   109d0:	ldr	pc, [ip, #1464]!	; 0x5b8

000109d4 <__vfprintf_chk@plt>:
   109d4:	add	ip, pc, #0, 12
   109d8:	add	ip, ip, #90112	; 0x16000
   109dc:	ldr	pc, [ip, #1456]!	; 0x5b0

000109e0 <__gmon_start__@plt>:
   109e0:	add	ip, pc, #0, 12
   109e4:	add	ip, ip, #90112	; 0x16000
   109e8:	ldr	pc, [ip, #1448]!	; 0x5a8

000109ec <open@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #90112	; 0x16000
   109f4:	ldr	pc, [ip, #1440]!	; 0x5a0

000109f8 <getopt_long@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #90112	; 0x16000
   10a00:	ldr	pc, [ip, #1432]!	; 0x598

00010a04 <__ctype_b_loc@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #90112	; 0x16000
   10a0c:	ldr	pc, [ip, #1424]!	; 0x590

00010a10 <exit@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #90112	; 0x16000
   10a18:	ldr	pc, [ip, #1416]!	; 0x588

00010a1c <strtoul@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #90112	; 0x16000
   10a24:	ldr	pc, [ip, #1408]!	; 0x580

00010a28 <strlen@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #90112	; 0x16000
   10a30:	ldr	pc, [ip, #1400]!	; 0x578

00010a34 <strchr@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #90112	; 0x16000
   10a3c:	ldr	pc, [ip, #1392]!	; 0x570

00010a40 <__errno_location@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #90112	; 0x16000
   10a48:	ldr	pc, [ip, #1384]!	; 0x568

00010a4c <memset@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #90112	; 0x16000
   10a54:	ldr	pc, [ip, #1376]!	; 0x560

00010a58 <putchar@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #90112	; 0x16000
   10a60:	ldr	pc, [ip, #1368]!	; 0x558

00010a64 <strncpy@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #90112	; 0x16000
   10a6c:	ldr	pc, [ip, #1360]!	; 0x550

00010a70 <__printf_chk@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #90112	; 0x16000
   10a78:	ldr	pc, [ip, #1352]!	; 0x548

00010a7c <write@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #90112	; 0x16000
   10a84:	ldr	pc, [ip, #1344]!	; 0x540

00010a88 <__fprintf_chk@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #90112	; 0x16000
   10a90:	ldr	pc, [ip, #1336]!	; 0x538

00010a94 <memchr@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #90112	; 0x16000
   10a9c:	ldr	pc, [ip, #1328]!	; 0x530

00010aa0 <strnlen@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #90112	; 0x16000
   10aa8:	ldr	pc, [ip, #1320]!	; 0x528

00010aac <strrchr@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #90112	; 0x16000
   10ab4:	ldr	pc, [ip, #1312]!	; 0x520

00010ab8 <abort@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #90112	; 0x16000
   10ac0:	ldr	pc, [ip, #1304]!	; 0x518

00010ac4 <close@plt>:
   10ac4:	add	ip, pc, #0, 12
   10ac8:	add	ip, ip, #90112	; 0x16000
   10acc:	ldr	pc, [ip, #1296]!	; 0x510

00010ad0 <__assert_fail@plt>:
   10ad0:	add	ip, pc, #0, 12
   10ad4:	add	ip, ip, #90112	; 0x16000
   10ad8:	ldr	pc, [ip, #1288]!	; 0x508

Disassembly of section .text:

00010adc <.text>:
   10adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ae0:	sub	sp, sp, #60	; 0x3c
   10ae4:	ldr	r5, [pc, #1412]	; 11070 <__assert_fail@plt+0x5a0>
   10ae8:	ldr	r3, [pc, #1412]	; 11074 <__assert_fail@plt+0x5a4>
   10aec:	add	r5, pc, r5
   10af0:	mov	r2, #0
   10af4:	str	r2, [sp, #12]
   10af8:	ldr	r3, [r5, r3]
   10afc:	ldr	r7, [pc, #1396]	; 11078 <__assert_fail@plt+0x5a8>
   10b00:	ldr	r9, [pc, #1396]	; 1107c <__assert_fail@plt+0x5ac>
   10b04:	str	r3, [sp, #28]
   10b08:	mov	r4, r0
   10b0c:	ldr	r3, [r3]
   10b10:	mov	r6, r1
   10b14:	mov	r8, r2
   10b18:	mov	fp, r2
   10b1c:	add	r7, pc, r7
   10b20:	add	r9, pc, r9
   10b24:	str	r3, [sp, #52]	; 0x34
   10b28:	str	fp, [sp]
   10b2c:	mov	r3, r7
   10b30:	mov	r2, r9
   10b34:	mov	r1, r6
   10b38:	mov	r0, r4
   10b3c:	bl	109f8 <getopt_long@plt>
   10b40:	cmn	r0, #1
   10b44:	beq	10c70 <__assert_fail@plt+0x1a0>
   10b48:	sub	r0, r0, #63	; 0x3f
   10b4c:	cmp	r0, #55	; 0x37
   10b50:	addls	pc, pc, r0, lsl #2
   10b54:	b	10b28 <__assert_fail@plt+0x58>
   10b58:	b	10f54 <__assert_fail@plt+0x484>
   10b5c:	b	10b28 <__assert_fail@plt+0x58>
   10b60:	b	10b28 <__assert_fail@plt+0x58>
   10b64:	b	10b28 <__assert_fail@plt+0x58>
   10b68:	b	10b28 <__assert_fail@plt+0x58>
   10b6c:	b	10b28 <__assert_fail@plt+0x58>
   10b70:	b	10b28 <__assert_fail@plt+0x58>
   10b74:	b	10b28 <__assert_fail@plt+0x58>
   10b78:	b	10b28 <__assert_fail@plt+0x58>
   10b7c:	b	10b28 <__assert_fail@plt+0x58>
   10b80:	b	10b28 <__assert_fail@plt+0x58>
   10b84:	b	10b28 <__assert_fail@plt+0x58>
   10b88:	b	10b28 <__assert_fail@plt+0x58>
   10b8c:	b	10b28 <__assert_fail@plt+0x58>
   10b90:	b	10b28 <__assert_fail@plt+0x58>
   10b94:	b	10b28 <__assert_fail@plt+0x58>
   10b98:	b	10b28 <__assert_fail@plt+0x58>
   10b9c:	b	10b28 <__assert_fail@plt+0x58>
   10ba0:	b	10b28 <__assert_fail@plt+0x58>
   10ba4:	b	10b28 <__assert_fail@plt+0x58>
   10ba8:	b	10b28 <__assert_fail@plt+0x58>
   10bac:	b	10b28 <__assert_fail@plt+0x58>
   10bb0:	b	10b28 <__assert_fail@plt+0x58>
   10bb4:	b	10fa0 <__assert_fail@plt+0x4d0>
   10bb8:	b	10b28 <__assert_fail@plt+0x58>
   10bbc:	b	10b28 <__assert_fail@plt+0x58>
   10bc0:	b	10b28 <__assert_fail@plt+0x58>
   10bc4:	b	10b28 <__assert_fail@plt+0x58>
   10bc8:	b	10b28 <__assert_fail@plt+0x58>
   10bcc:	b	10b28 <__assert_fail@plt+0x58>
   10bd0:	b	10b28 <__assert_fail@plt+0x58>
   10bd4:	b	10b28 <__assert_fail@plt+0x58>
   10bd8:	b	10b28 <__assert_fail@plt+0x58>
   10bdc:	b	10b28 <__assert_fail@plt+0x58>
   10be0:	b	10b28 <__assert_fail@plt+0x58>
   10be4:	b	10b28 <__assert_fail@plt+0x58>
   10be8:	b	10b28 <__assert_fail@plt+0x58>
   10bec:	b	10b28 <__assert_fail@plt+0x58>
   10bf0:	b	10b28 <__assert_fail@plt+0x58>
   10bf4:	b	10b28 <__assert_fail@plt+0x58>
   10bf8:	b	10b28 <__assert_fail@plt+0x58>
   10bfc:	b	10f7c <__assert_fail@plt+0x4ac>
   10c00:	b	10c60 <__assert_fail@plt+0x190>
   10c04:	b	10b28 <__assert_fail@plt+0x58>
   10c08:	b	10b28 <__assert_fail@plt+0x58>
   10c0c:	b	10b28 <__assert_fail@plt+0x58>
   10c10:	b	10b28 <__assert_fail@plt+0x58>
   10c14:	b	10b28 <__assert_fail@plt+0x58>
   10c18:	b	10c4c <__assert_fail@plt+0x17c>
   10c1c:	b	10b28 <__assert_fail@plt+0x58>
   10c20:	b	10b28 <__assert_fail@plt+0x58>
   10c24:	b	10b28 <__assert_fail@plt+0x58>
   10c28:	b	10b28 <__assert_fail@plt+0x58>
   10c2c:	b	10b28 <__assert_fail@plt+0x58>
   10c30:	b	10b28 <__assert_fail@plt+0x58>
   10c34:	b	10c38 <__assert_fail@plt+0x168>
   10c38:	ldr	r3, [pc, #1088]	; 11080 <__assert_fail@plt+0x5b0>
   10c3c:	mov	r2, #1
   10c40:	ldr	r3, [r5, r3]
   10c44:	str	r2, [r3]
   10c48:	b	10b28 <__assert_fail@plt+0x58>
   10c4c:	ldr	r3, [pc, #1072]	; 11084 <__assert_fail@plt+0x5b4>
   10c50:	ldr	r3, [r5, r3]
   10c54:	ldr	r3, [r3]
   10c58:	str	r3, [sp, #12]
   10c5c:	b	10b28 <__assert_fail@plt+0x58>
   10c60:	ldr	r3, [pc, #1052]	; 11084 <__assert_fail@plt+0x5b4>
   10c64:	ldr	r3, [r5, r3]
   10c68:	ldr	r8, [r3]
   10c6c:	b	10b28 <__assert_fail@plt+0x58>
   10c70:	cmp	r8, #0
   10c74:	beq	10ffc <__assert_fail@plt+0x52c>
   10c78:	ldr	r3, [sp, #12]
   10c7c:	cmp	r3, #0
   10c80:	beq	1103c <__assert_fail@plt+0x56c>
   10c84:	ldr	r3, [pc, #1020]	; 11088 <__assert_fail@plt+0x5b8>
   10c88:	ldr	r3, [r5, r3]
   10c8c:	ldr	r3, [r3]
   10c90:	sub	r4, r4, r3
   10c94:	cmp	r4, #0
   10c98:	add	r3, r6, r3, lsl #2
   10c9c:	str	r3, [sp, #20]
   10ca0:	ble	1101c <__assert_fail@plt+0x54c>
   10ca4:	ldr	r3, [pc, #980]	; 11080 <__assert_fail@plt+0x5b0>
   10ca8:	ldr	r3, [r5, r3]
   10cac:	ldr	r3, [r3]
   10cb0:	cmp	r3, #0
   10cb4:	bne	10ea0 <__assert_fail@plt+0x3d0>
   10cb8:	add	r1, sp, #44	; 0x2c
   10cbc:	mov	r0, r8
   10cc0:	bl	118c0 <__assert_fail@plt+0xdf0>
   10cc4:	subs	r3, r0, #0
   10cc8:	str	r3, [sp, #16]
   10ccc:	beq	10fd4 <__assert_fail@plt+0x504>
   10cd0:	ldr	r3, [sp, #16]
   10cd4:	ldr	r2, [r3, #4]
   10cd8:	ldr	r3, [sp, #44]	; 0x2c
   10cdc:	lsr	r1, r2, #24
   10ce0:	lsl	r0, r2, #8
   10ce4:	orr	r1, r1, r2, lsl #24
   10ce8:	and	r0, r0, #16711680	; 0xff0000
   10cec:	lsr	r2, r2, #8
   10cf0:	orr	r1, r1, r0
   10cf4:	and	r2, r2, #65280	; 0xff00
   10cf8:	orr	r1, r1, r2
   10cfc:	cmp	r1, r3
   10d00:	bhi	10fa4 <__assert_fail@plt+0x4d4>
   10d04:	lsl	r3, r4, #2
   10d08:	mov	r0, r3
   10d0c:	mov	r1, #1
   10d10:	str	r3, [sp, #36]	; 0x24
   10d14:	bl	10920 <calloc@plt>
   10d18:	mov	r9, #0
   10d1c:	ldr	r6, [sp, #20]
   10d20:	str	r5, [sp, #32]
   10d24:	mov	r7, r9
   10d28:	add	fp, sp, #48	; 0x30
   10d2c:	mov	r5, r9
   10d30:	sub	r8, r0, #4
   10d34:	mov	sl, r8
   10d38:	str	r0, [sp, #24]
   10d3c:	ldr	r0, [r6]
   10d40:	mov	r1, fp
   10d44:	bl	118c0 <__assert_fail@plt+0xdf0>
   10d48:	mov	r9, r6
   10d4c:	add	r6, r6, #4
   10d50:	cmp	r0, #0
   10d54:	str	r0, [sl, #4]!
   10d58:	beq	10e74 <__assert_fail@plt+0x3a4>
   10d5c:	add	r7, r7, #1
   10d60:	ldr	r2, [sp, #48]	; 0x30
   10d64:	cmp	r4, r7
   10d68:	add	r5, r5, r2
   10d6c:	bne	10d3c <__assert_fail@plt+0x26c>
   10d70:	ldr	r0, [sp, #16]
   10d74:	mov	r9, r5
   10d78:	ldr	r5, [sp, #32]
   10d7c:	ldr	r2, [r0, #4]
   10d80:	lsr	r3, r2, #24
   10d84:	lsl	r1, r2, #8
   10d88:	orr	r3, r3, r2, lsl #24
   10d8c:	and	r1, r1, #16711680	; 0xff0000
   10d90:	lsr	r2, r2, #8
   10d94:	orr	r3, r3, r1
   10d98:	and	r2, r2, #65280	; 0xff00
   10d9c:	orr	r3, r3, r2
   10da0:	add	r9, r3, r9
   10da4:	mov	r1, r9
   10da8:	str	r9, [sp, #44]	; 0x2c
   10dac:	bl	10998 <realloc@plt>
   10db0:	subs	r3, r0, #0
   10db4:	str	r3, [sp, #16]
   10db8:	beq	1105c <__assert_fail@plt+0x58c>
   10dbc:	ldr	sl, [sp, #16]
   10dc0:	ldr	r2, [sp, #44]	; 0x2c
   10dc4:	mov	r1, sl
   10dc8:	bl	12eec <__assert_fail@plt+0x241c>
   10dcc:	mov	r9, r8
   10dd0:	mov	r7, #0
   10dd4:	ldr	r1, [r9, #4]!
   10dd8:	mov	r0, sl
   10ddc:	bl	138e0 <__assert_fail@plt+0x2e10>
   10de0:	lsl	r3, r7, #2
   10de4:	cmp	r0, #0
   10de8:	bne	10f00 <__assert_fail@plt+0x430>
   10dec:	add	r7, r7, #1
   10df0:	cmp	r4, r7
   10df4:	bne	10dd4 <__assert_fail@plt+0x304>
   10df8:	ldr	r4, [sp, #16]
   10dfc:	mov	r0, r4
   10e00:	bl	131a0 <__assert_fail@plt+0x26d0>
   10e04:	mov	r1, r4
   10e08:	ldr	r0, [sp, #12]
   10e0c:	bl	11a84 <__assert_fail@plt+0xfb4>
   10e10:	subs	r6, r0, #0
   10e14:	bne	10f30 <__assert_fail@plt+0x460>
   10e18:	ldr	r3, [sp, #36]	; 0x24
   10e1c:	sub	r4, r3, #4
   10e20:	ldr	r3, [sp, #24]
   10e24:	add	r4, r3, r4
   10e28:	ldr	r0, [r8, #4]!
   10e2c:	cmp	r0, #0
   10e30:	beq	10e38 <__assert_fail@plt+0x368>
   10e34:	bl	1095c <free@plt>
   10e38:	cmp	r8, r4
   10e3c:	bne	10e28 <__assert_fail@plt+0x358>
   10e40:	ldr	r0, [sp, #24]
   10e44:	bl	1095c <free@plt>
   10e48:	ldr	r0, [sp, #16]
   10e4c:	bl	1095c <free@plt>
   10e50:	adds	r0, r6, #0
   10e54:	movne	r0, #1
   10e58:	ldr	r3, [sp, #28]
   10e5c:	ldr	r2, [sp, #52]	; 0x34
   10e60:	ldr	r3, [r3]
   10e64:	cmp	r2, r3
   10e68:	bne	1106c <__assert_fail@plt+0x59c>
   10e6c:	add	sp, sp, #60	; 0x3c
   10e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e74:	ldr	r5, [sp, #32]
   10e78:	ldr	r1, [pc, #524]	; 1108c <__assert_fail@plt+0x5bc>
   10e7c:	ldr	r2, [pc, #524]	; 11090 <__assert_fail@plt+0x5c0>
   10e80:	mov	r6, r0
   10e84:	ldr	ip, [r5, r1]
   10e88:	ldr	r3, [r9]
   10e8c:	add	r2, pc, r2
   10e90:	mov	r1, #1
   10e94:	ldr	r0, [ip]
   10e98:	bl	10a88 <__fprintf_chk@plt>
   10e9c:	b	10e18 <__assert_fail@plt+0x348>
   10ea0:	ldr	r1, [pc, #492]	; 11094 <__assert_fail@plt+0x5c4>
   10ea4:	mov	r2, r8
   10ea8:	add	r1, pc, r1
   10eac:	mov	r0, #1
   10eb0:	bl	10a70 <__printf_chk@plt>
   10eb4:	ldr	r1, [pc, #476]	; 11098 <__assert_fail@plt+0x5c8>
   10eb8:	ldr	r2, [sp, #12]
   10ebc:	add	r1, pc, r1
   10ec0:	mov	r0, #1
   10ec4:	bl	10a70 <__printf_chk@plt>
   10ec8:	ldr	r9, [pc, #460]	; 1109c <__assert_fail@plt+0x5cc>
   10ecc:	ldr	r3, [sp, #20]
   10ed0:	add	r9, pc, r9
   10ed4:	sub	r7, r3, #4
   10ed8:	mov	r6, #0
   10edc:	mov	r2, r6
   10ee0:	ldr	r3, [r7, #4]!
   10ee4:	mov	r1, r9
   10ee8:	add	r6, r6, #1
   10eec:	mov	r0, #1
   10ef0:	bl	10a70 <__printf_chk@plt>
   10ef4:	cmp	r4, r6
   10ef8:	bne	10edc <__assert_fail@plt+0x40c>
   10efc:	b	10cb8 <__assert_fail@plt+0x1e8>
   10f00:	ldr	r1, [pc, #388]	; 1108c <__assert_fail@plt+0x5bc>
   10f04:	ldr	r2, [sp, #20]
   10f08:	mov	r6, r0
   10f0c:	ldr	r0, [r5, r1]
   10f10:	ldr	r3, [r2, r3]
   10f14:	ldr	r2, [pc, #388]	; 110a0 <__assert_fail@plt+0x5d0>
   10f18:	str	r6, [sp]
   10f1c:	add	r2, pc, r2
   10f20:	mov	r1, #1
   10f24:	ldr	r0, [r0]
   10f28:	bl	10a88 <__fprintf_chk@plt>
   10f2c:	b	10e18 <__assert_fail@plt+0x348>
   10f30:	ldr	r1, [pc, #340]	; 1108c <__assert_fail@plt+0x5bc>
   10f34:	ldr	r2, [pc, #360]	; 110a4 <__assert_fail@plt+0x5d4>
   10f38:	ldr	r3, [sp, #12]
   10f3c:	ldr	r0, [r5, r1]
   10f40:	add	r2, pc, r2
   10f44:	mov	r1, #1
   10f48:	ldr	r0, [r0]
   10f4c:	bl	10a88 <__fprintf_chk@plt>
   10f50:	b	10e18 <__assert_fail@plt+0x348>
   10f54:	ldr	r3, [pc, #332]	; 110a8 <__assert_fail@plt+0x5d8>
   10f58:	ldr	r2, [pc, #332]	; 110ac <__assert_fail@plt+0x5dc>
   10f5c:	add	r3, pc, r3
   10f60:	ldr	r0, [pc, #328]	; 110b0 <__assert_fail@plt+0x5e0>
   10f64:	add	r1, r3, #96	; 0x60
   10f68:	add	r2, pc, r2
   10f6c:	str	r1, [sp]
   10f70:	add	r0, pc, r0
   10f74:	add	r1, r2, #8
   10f78:	bl	11ddc <__assert_fail@plt+0x130c>
   10f7c:	ldr	r3, [pc, #304]	; 110b4 <__assert_fail@plt+0x5e4>
   10f80:	ldr	r2, [pc, #304]	; 110b8 <__assert_fail@plt+0x5e8>
   10f84:	add	r3, pc, r3
   10f88:	add	r1, r3, #96	; 0x60
   10f8c:	add	r2, pc, r2
   10f90:	str	r1, [sp]
   10f94:	mov	r0, #0
   10f98:	add	r1, r2, #8
   10f9c:	bl	11ddc <__assert_fail@plt+0x130c>
   10fa0:	bl	11db0 <__assert_fail@plt+0x12e0>
   10fa4:	ldr	r0, [pc, #224]	; 1108c <__assert_fail@plt+0x5bc>
   10fa8:	ldr	r2, [pc, #268]	; 110bc <__assert_fail@plt+0x5ec>
   10fac:	ldr	r0, [r5, r0]
   10fb0:	add	r2, pc, r2
   10fb4:	str	r1, [sp]
   10fb8:	mov	r1, #1
   10fbc:	ldr	r0, [r0]
   10fc0:	bl	10a88 <__fprintf_chk@plt>
   10fc4:	ldr	r0, [sp, #16]
   10fc8:	bl	1095c <free@plt>
   10fcc:	mov	r0, #1
   10fd0:	b	10e58 <__assert_fail@plt+0x388>
   10fd4:	ldr	r1, [pc, #176]	; 1108c <__assert_fail@plt+0x5bc>
   10fd8:	ldr	r2, [pc, #224]	; 110c0 <__assert_fail@plt+0x5f0>
   10fdc:	mov	r3, r8
   10fe0:	ldr	r0, [r5, r1]
   10fe4:	add	r2, pc, r2
   10fe8:	mov	r1, #1
   10fec:	ldr	r0, [r0]
   10ff0:	bl	10a88 <__fprintf_chk@plt>
   10ff4:	mov	r0, #1
   10ff8:	b	10e58 <__assert_fail@plt+0x388>
   10ffc:	ldr	r0, [pc, #192]	; 110c4 <__assert_fail@plt+0x5f4>
   11000:	add	r3, r7, #96	; 0x60
   11004:	str	r3, [sp]
   11008:	mov	r2, r9
   1100c:	mov	r3, r7
   11010:	add	r1, r9, #8
   11014:	add	r0, pc, r0
   11018:	bl	11ddc <__assert_fail@plt+0x130c>
   1101c:	ldr	r0, [pc, #164]	; 110c8 <__assert_fail@plt+0x5f8>
   11020:	add	r3, r7, #96	; 0x60
   11024:	str	r3, [sp]
   11028:	mov	r2, r9
   1102c:	mov	r3, r7
   11030:	add	r1, r9, #8
   11034:	add	r0, pc, r0
   11038:	bl	11ddc <__assert_fail@plt+0x130c>
   1103c:	ldr	r0, [pc, #136]	; 110cc <__assert_fail@plt+0x5fc>
   11040:	add	r3, r7, #96	; 0x60
   11044:	str	r3, [sp]
   11048:	mov	r2, r9
   1104c:	mov	r3, r7
   11050:	add	r1, r9, #8
   11054:	add	r0, pc, r0
   11058:	bl	11ddc <__assert_fail@plt+0x130c>
   1105c:	ldr	r0, [pc, #108]	; 110d0 <__assert_fail@plt+0x600>
   11060:	mov	r1, r9
   11064:	add	r0, pc, r0
   11068:	bl	111c4 <__assert_fail@plt+0x6f4>
   1106c:	bl	1098c <__stack_chk_fail@plt>
   11070:	andeq	r6, r1, r0, asr r4
   11074:	andeq	r0, r0, r0, lsr #1
   11078:	andeq	r6, r1, r8, lsr #5
   1107c:	andeq	r5, r0, r0, lsr fp
   11080:	strheq	r0, [r0], -r4
   11084:	strheq	r0, [r0], -r8
   11088:	andeq	r0, r0, r4, lsr #1
   1108c:	andeq	r0, r0, r8, lsr #1
   11090:	andeq	r5, r0, r4, lsr #19
   11094:	andeq	r5, r0, r4, lsl #18
   11098:	andeq	r5, r0, r0, lsl #18
   1109c:	strdeq	r5, [r0], -ip
   110a0:	andeq	r5, r0, r0, lsr r9
   110a4:	andeq	r5, r0, r8, lsr #18
   110a8:	andeq	r5, r1, r8, ror #28
   110ac:	andeq	r5, r0, r8, ror #13
   110b0:	andeq	r5, r0, ip, ror #15
   110b4:	andeq	r5, r1, r0, asr #28
   110b8:	andeq	r5, r0, r4, asr #13
   110bc:	andeq	r5, r0, r0, asr r8
   110c0:	strdeq	r5, [r0], -ip
   110c4:	andeq	r5, r0, r8, asr r7
   110c8:	andeq	r5, r0, r0, ror #14
   110cc:	andeq	r5, r0, ip, lsr #14
   110d0:	ldrdeq	r5, [r0], -ip
   110d4:	mov	fp, #0
   110d8:	mov	lr, #0
   110dc:	pop	{r1}		; (ldr r1, [sp], #4)
   110e0:	mov	r2, sp
   110e4:	push	{r2}		; (str r2, [sp, #-4]!)
   110e8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ec:	ldr	ip, [pc, #16]	; 11104 <__assert_fail@plt+0x634>
   110f0:	push	{ip}		; (str ip, [sp, #-4]!)
   110f4:	ldr	r0, [pc, #12]	; 11108 <__assert_fail@plt+0x638>
   110f8:	ldr	r3, [pc, #12]	; 1110c <__assert_fail@plt+0x63c>
   110fc:	bl	109bc <__libc_start_main@plt>
   11100:	bl	10ab8 <abort@plt>
   11104:	andeq	r6, r1, r8, asr #12
   11108:	ldrdeq	r0, [r1], -ip
   1110c:	andeq	r6, r1, r8, ror #11
   11110:	ldr	r3, [pc, #20]	; 1112c <__assert_fail@plt+0x65c>
   11114:	ldr	r2, [pc, #20]	; 11130 <__assert_fail@plt+0x660>
   11118:	add	r3, pc, r3
   1111c:	ldr	r2, [r3, r2]
   11120:	cmp	r2, #0
   11124:	bxeq	lr
   11128:	b	109e0 <__gmon_start__@plt>
   1112c:	andeq	r5, r1, r4, lsr #28
   11130:	andeq	r0, r0, ip, lsr #1
   11134:	ldr	r0, [pc, #24]	; 11154 <__assert_fail@plt+0x684>
   11138:	ldr	r3, [pc, #24]	; 11158 <__assert_fail@plt+0x688>
   1113c:	cmp	r3, r0
   11140:	bxeq	lr
   11144:	ldr	r3, [pc, #16]	; 1115c <__assert_fail@plt+0x68c>
   11148:	cmp	r3, #0
   1114c:	bxeq	lr
   11150:	bx	r3
   11154:	andeq	r7, r2, r8
   11158:	andeq	r7, r2, r8
   1115c:	andeq	r0, r0, r0
   11160:	ldr	r0, [pc, #36]	; 1118c <__assert_fail@plt+0x6bc>
   11164:	ldr	r1, [pc, #36]	; 11190 <__assert_fail@plt+0x6c0>
   11168:	sub	r1, r1, r0
   1116c:	asr	r1, r1, #2
   11170:	add	r1, r1, r1, lsr #31
   11174:	asrs	r1, r1, #1
   11178:	bxeq	lr
   1117c:	ldr	r3, [pc, #16]	; 11194 <__assert_fail@plt+0x6c4>
   11180:	cmp	r3, #0
   11184:	bxeq	lr
   11188:	bx	r3
   1118c:	andeq	r7, r2, r8
   11190:	andeq	r7, r2, r8
   11194:	andeq	r0, r0, r0
   11198:	push	{r4, lr}
   1119c:	ldr	r4, [pc, #24]	; 111bc <__assert_fail@plt+0x6ec>
   111a0:	ldrb	r3, [r4]
   111a4:	cmp	r3, #0
   111a8:	popne	{r4, pc}
   111ac:	bl	11134 <__assert_fail@plt+0x664>
   111b0:	mov	r3, #1
   111b4:	strb	r3, [r4]
   111b8:	pop	{r4, pc}
   111bc:	andeq	r7, r2, r8
   111c0:	b	11160 <__assert_fail@plt+0x690>
   111c4:	push	{r0, r1, r2, r3}
   111c8:	ldr	r3, [pc, #96]	; 11230 <__assert_fail@plt+0x760>
   111cc:	ldr	r2, [pc, #96]	; 11234 <__assert_fail@plt+0x764>
   111d0:	add	r3, pc, r3
   111d4:	push	{lr}		; (str lr, [sp, #-4]!)
   111d8:	sub	sp, sp, #12
   111dc:	ldr	r1, [r3, r2]
   111e0:	ldr	r0, [pc, #80]	; 11238 <__assert_fail@plt+0x768>
   111e4:	add	ip, sp, #20
   111e8:	str	ip, [sp]
   111ec:	ldr	ip, [r1]
   111f0:	mov	r2, #13
   111f4:	str	ip, [sp, #4]
   111f8:	ldr	r4, [r3, r0]
   111fc:	ldr	r0, [pc, #56]	; 1123c <__assert_fail@plt+0x76c>
   11200:	mov	r1, #1
   11204:	add	r0, pc, r0
   11208:	ldr	r3, [r4]
   1120c:	bl	109a4 <fwrite@plt>
   11210:	ldr	r2, [pc, #40]	; 11240 <__assert_fail@plt+0x770>
   11214:	ldr	r0, [r4]
   11218:	ldr	r3, [sp]
   1121c:	add	r2, pc, r2
   11220:	mov	r1, #1
   11224:	bl	109d4 <__vfprintf_chk@plt>
   11228:	mov	r0, #1
   1122c:	bl	10a10 <exit@plt>
   11230:	andeq	r5, r1, ip, ror #26
   11234:	andeq	r0, r0, r0, lsr #1
   11238:	andeq	r0, r0, r8, lsr #1
   1123c:	andeq	r5, r0, ip, lsr #10
   11240:	andeq	r5, r0, r4, lsr #10
   11244:	ldr	ip, [pc, #100]	; 112b0 <__assert_fail@plt+0x7e0>
   11248:	push	{r0, r1, r2, r3}
   1124c:	add	ip, pc, ip
   11250:	ldr	r2, [pc, #92]	; 112b4 <__assert_fail@plt+0x7e4>
   11254:	push	{lr}		; (str lr, [sp, #-4]!)
   11258:	sub	sp, sp, #12
   1125c:	ldr	r2, [ip, r2]
   11260:	ldr	r3, [pc, #80]	; 112b8 <__assert_fail@plt+0x7e8>
   11264:	add	r1, sp, #20
   11268:	str	r1, [sp]
   1126c:	ldr	r1, [r2]
   11270:	ldr	r0, [pc, #68]	; 112bc <__assert_fail@plt+0x7ec>
   11274:	str	r1, [sp, #4]
   11278:	ldr	r4, [ip, r3]
   1127c:	ldr	r5, [sp, #16]
   11280:	mov	r2, #13
   11284:	mov	r1, #1
   11288:	ldr	r3, [r4]
   1128c:	add	r0, pc, r0
   11290:	bl	109a4 <fwrite@plt>
   11294:	ldr	r0, [r4]
   11298:	mov	r2, r5
   1129c:	ldr	r3, [sp]
   112a0:	mov	r1, #1
   112a4:	bl	109d4 <__vfprintf_chk@plt>
   112a8:	mov	r0, #1
   112ac:	bl	10a10 <exit@plt>
   112b0:	strdeq	r5, [r1], -r0
   112b4:	andeq	r0, r0, r0, lsr #1
   112b8:	andeq	r0, r0, r8, lsr #1
   112bc:	andeq	r5, r0, r4, lsr #9
   112c0:	push	{r4, r5, r6, lr}
   112c4:	mov	r6, r0
   112c8:	bl	10a28 <strlen@plt>
   112cc:	add	r4, r0, #1
   112d0:	mov	r0, r4
   112d4:	bl	109b0 <malloc@plt>
   112d8:	subs	r5, r0, #0
   112dc:	beq	112f4 <__assert_fail@plt+0x824>
   112e0:	mov	r2, r4
   112e4:	mov	r1, r6
   112e8:	bl	10974 <memcpy@plt>
   112ec:	mov	r0, r5
   112f0:	pop	{r4, r5, r6, pc}
   112f4:	ldr	r0, [pc, #4]	; 11300 <__assert_fail@plt+0x830>
   112f8:	add	r0, pc, r0
   112fc:	bl	11244 <__assert_fail@plt+0x774>
   11300:	andeq	r5, r0, r4, asr #12
   11304:	push	{r1, r2, r3}
   11308:	ldr	r3, [pc, #180]	; 113c4 <__assert_fail@plt+0x8f4>
   1130c:	ldr	r2, [pc, #180]	; 113c8 <__assert_fail@plt+0x8f8>
   11310:	add	r3, pc, r3
   11314:	push	{r4, r5, r6, r7, r8, r9, lr}
   11318:	sub	sp, sp, #16
   1131c:	ldr	r9, [r3, r2]
   11320:	ldr	r7, [sp, #44]	; 0x2c
   11324:	mov	r8, r0
   11328:	ldr	r2, [r9]
   1132c:	mov	r5, #0
   11330:	mov	r4, #128	; 0x80
   11334:	add	r6, sp, #48	; 0x30
   11338:	str	r2, [sp, #12]
   1133c:	b	1134c <__assert_fail@plt+0x87c>
   11340:	cmp	r0, #0
   11344:	addge	r4, r0, #1
   11348:	lsllt	r4, r4, #1
   1134c:	mov	r0, r5
   11350:	mov	r1, r4
   11354:	bl	10998 <realloc@plt>
   11358:	subs	r5, r0, #0
   1135c:	beq	113b0 <__assert_fail@plt+0x8e0>
   11360:	str	r6, [sp, #4]
   11364:	str	r7, [sp]
   11368:	mvn	r3, #0
   1136c:	mov	r2, #1
   11370:	mov	r1, r4
   11374:	str	r6, [sp, #8]
   11378:	bl	10968 <__vsnprintf_chk@plt>
   1137c:	cmp	r4, r0
   11380:	bls	11340 <__assert_fail@plt+0x870>
   11384:	str	r5, [r8]
   11388:	mov	r0, r5
   1138c:	bl	10a28 <strlen@plt>
   11390:	ldr	r2, [sp, #12]
   11394:	ldr	r3, [r9]
   11398:	cmp	r2, r3
   1139c:	bne	113c0 <__assert_fail@plt+0x8f0>
   113a0:	add	sp, sp, #16
   113a4:	pop	{r4, r5, r6, r7, r8, r9, lr}
   113a8:	add	sp, sp, #12
   113ac:	bx	lr
   113b0:	ldr	r0, [pc, #20]	; 113cc <__assert_fail@plt+0x8fc>
   113b4:	mov	r1, r4
   113b8:	add	r0, pc, r0
   113bc:	bl	11244 <__assert_fail@plt+0x774>
   113c0:	bl	1098c <__stack_chk_fail@plt>
   113c4:	andeq	r5, r1, ip, lsr #24
   113c8:	andeq	r0, r0, r0, lsr #1
   113cc:	andeq	r5, r0, r8, lsl #7
   113d0:	push	{r4, r5, r6, r7, r8, lr}
   113d4:	mov	r6, r1
   113d8:	mov	r8, r0
   113dc:	bl	10a28 <strlen@plt>
   113e0:	mov	r4, r0
   113e4:	mov	r0, r6
   113e8:	bl	10a28 <strlen@plt>
   113ec:	cmp	r4, #0
   113f0:	add	r3, r4, r0
   113f4:	mov	r7, r0
   113f8:	add	r0, r3, #2
   113fc:	beq	11410 <__assert_fail@plt+0x940>
   11400:	add	r2, r8, r4
   11404:	ldrb	r2, [r2, #-1]
   11408:	cmp	r2, #47	; 0x2f
   1140c:	beq	11458 <__assert_fail@plt+0x988>
   11410:	bl	109b0 <malloc@plt>
   11414:	subs	r5, r0, #0
   11418:	beq	1144c <__assert_fail@plt+0x97c>
   1141c:	mov	r2, r4
   11420:	mov	r1, r8
   11424:	bl	10974 <memcpy@plt>
   11428:	mov	r3, #47	; 0x2f
   1142c:	strb	r3, [r5, r4]
   11430:	add	r4, r4, #1
   11434:	add	r2, r7, #1
   11438:	mov	r1, r6
   1143c:	add	r0, r5, r4
   11440:	bl	10974 <memcpy@plt>
   11444:	mov	r0, r5
   11448:	pop	{r4, r5, r6, r7, r8, pc}
   1144c:	ldr	r0, [pc, #36]	; 11478 <__assert_fail@plt+0x9a8>
   11450:	add	r0, pc, r0
   11454:	bl	11244 <__assert_fail@plt+0x774>
   11458:	add	r0, r3, #1
   1145c:	bl	109b0 <malloc@plt>
   11460:	subs	r5, r0, #0
   11464:	beq	1144c <__assert_fail@plt+0x97c>
   11468:	mov	r1, r8
   1146c:	mov	r2, r4
   11470:	bl	10974 <memcpy@plt>
   11474:	b	11434 <__assert_fail@plt+0x964>
   11478:	andeq	r5, r0, ip, ror #9
   1147c:	cmp	r1, #0
   11480:	beq	1151c <__assert_fail@plt+0xa4c>
   11484:	push	{r4, r5, r6, r7, r8, lr}
   11488:	add	r8, r0, r1
   1148c:	mov	r7, r0
   11490:	ldrb	r3, [r8, #-1]
   11494:	cmp	r3, #0
   11498:	bne	11514 <__assert_fail@plt+0xa44>
   1149c:	cmp	r0, r8
   114a0:	bcs	1150c <__assert_fail@plt+0xa3c>
   114a4:	mov	r5, r7
   114a8:	mov	r6, r5
   114ac:	ldrb	r4, [r5], #1
   114b0:	cmp	r4, #0
   114b4:	beq	114e0 <__assert_fail@plt+0xa10>
   114b8:	bl	10a04 <__ctype_b_loc@plt>
   114bc:	lsl	r4, r4, #1
   114c0:	ldr	r3, [r0]
   114c4:	ldrh	r0, [r3, r4]
   114c8:	ands	r0, r0, #16384	; 0x4000
   114cc:	popeq	{r4, r5, r6, r7, r8, pc}
   114d0:	cmp	r8, r5
   114d4:	bhi	114a8 <__assert_fail@plt+0x9d8>
   114d8:	ldrb	r4, [r6, #1]
   114dc:	mov	r6, r5
   114e0:	cmp	r4, #0
   114e4:	sub	r7, r6, r7
   114e8:	clz	r7, r7
   114ec:	lsr	r7, r7, #5
   114f0:	moveq	r4, r7
   114f4:	movne	r4, #1
   114f8:	cmp	r4, #0
   114fc:	bne	11514 <__assert_fail@plt+0xa44>
   11500:	add	r7, r6, #1
   11504:	cmp	r8, r7
   11508:	bhi	114a4 <__assert_fail@plt+0x9d4>
   1150c:	mov	r0, #1
   11510:	pop	{r4, r5, r6, r7, r8, pc}
   11514:	mov	r0, #0
   11518:	pop	{r4, r5, r6, r7, r8, pc}
   1151c:	mov	r0, r1
   11520:	bx	lr
   11524:	ldr	r3, [pc, #616]	; 11794 <__assert_fail@plt+0xcc4>
   11528:	ldr	r2, [pc, #616]	; 11798 <__assert_fail@plt+0xcc8>
   1152c:	push	{r4, r5, r6, r7, r8, lr}
   11530:	add	r3, pc, r3
   11534:	ldr	r4, [r1]
   11538:	ldr	r6, [r3, r2]
   1153c:	mov	ip, r0
   11540:	ldrb	r0, [r0, r4]
   11544:	sub	sp, sp, #16
   11548:	ldr	r2, [r6]
   1154c:	sub	r3, r0, #48	; 0x30
   11550:	mov	r5, r1
   11554:	str	r2, [sp, #12]
   11558:	add	r1, ip, r4
   1155c:	add	r7, r4, #1
   11560:	cmp	r3, #72	; 0x48
   11564:	addls	pc, pc, r3, lsl #2
   11568:	b	11694 <__assert_fail@plt+0xbc4>
   1156c:	b	11730 <__assert_fail@plt+0xc60>
   11570:	b	11730 <__assert_fail@plt+0xc60>
   11574:	b	11730 <__assert_fail@plt+0xc60>
   11578:	b	11730 <__assert_fail@plt+0xc60>
   1157c:	b	11730 <__assert_fail@plt+0xc60>
   11580:	b	11730 <__assert_fail@plt+0xc60>
   11584:	b	11730 <__assert_fail@plt+0xc60>
   11588:	b	11730 <__assert_fail@plt+0xc60>
   1158c:	b	11694 <__assert_fail@plt+0xbc4>
   11590:	b	11694 <__assert_fail@plt+0xbc4>
   11594:	b	11694 <__assert_fail@plt+0xbc4>
   11598:	b	11694 <__assert_fail@plt+0xbc4>
   1159c:	b	11694 <__assert_fail@plt+0xbc4>
   115a0:	b	11694 <__assert_fail@plt+0xbc4>
   115a4:	b	11694 <__assert_fail@plt+0xbc4>
   115a8:	b	11694 <__assert_fail@plt+0xbc4>
   115ac:	b	11694 <__assert_fail@plt+0xbc4>
   115b0:	b	11694 <__assert_fail@plt+0xbc4>
   115b4:	b	11694 <__assert_fail@plt+0xbc4>
   115b8:	b	11694 <__assert_fail@plt+0xbc4>
   115bc:	b	11694 <__assert_fail@plt+0xbc4>
   115c0:	b	11694 <__assert_fail@plt+0xbc4>
   115c4:	b	11694 <__assert_fail@plt+0xbc4>
   115c8:	b	11694 <__assert_fail@plt+0xbc4>
   115cc:	b	11694 <__assert_fail@plt+0xbc4>
   115d0:	b	11694 <__assert_fail@plt+0xbc4>
   115d4:	b	11694 <__assert_fail@plt+0xbc4>
   115d8:	b	11694 <__assert_fail@plt+0xbc4>
   115dc:	b	11694 <__assert_fail@plt+0xbc4>
   115e0:	b	11694 <__assert_fail@plt+0xbc4>
   115e4:	b	11694 <__assert_fail@plt+0xbc4>
   115e8:	b	11694 <__assert_fail@plt+0xbc4>
   115ec:	b	11694 <__assert_fail@plt+0xbc4>
   115f0:	b	11694 <__assert_fail@plt+0xbc4>
   115f4:	b	11694 <__assert_fail@plt+0xbc4>
   115f8:	b	11694 <__assert_fail@plt+0xbc4>
   115fc:	b	11694 <__assert_fail@plt+0xbc4>
   11600:	b	11694 <__assert_fail@plt+0xbc4>
   11604:	b	11694 <__assert_fail@plt+0xbc4>
   11608:	b	11694 <__assert_fail@plt+0xbc4>
   1160c:	b	11694 <__assert_fail@plt+0xbc4>
   11610:	b	11694 <__assert_fail@plt+0xbc4>
   11614:	b	11694 <__assert_fail@plt+0xbc4>
   11618:	b	11694 <__assert_fail@plt+0xbc4>
   1161c:	b	11694 <__assert_fail@plt+0xbc4>
   11620:	b	11694 <__assert_fail@plt+0xbc4>
   11624:	b	11694 <__assert_fail@plt+0xbc4>
   11628:	b	11694 <__assert_fail@plt+0xbc4>
   1162c:	b	11694 <__assert_fail@plt+0xbc4>
   11630:	b	11690 <__assert_fail@plt+0xbc0>
   11634:	b	116b0 <__assert_fail@plt+0xbe0>
   11638:	b	11694 <__assert_fail@plt+0xbc4>
   1163c:	b	11694 <__assert_fail@plt+0xbc4>
   11640:	b	11694 <__assert_fail@plt+0xbc4>
   11644:	b	116b8 <__assert_fail@plt+0xbe8>
   11648:	b	11694 <__assert_fail@plt+0xbc4>
   1164c:	b	11694 <__assert_fail@plt+0xbc4>
   11650:	b	11694 <__assert_fail@plt+0xbc4>
   11654:	b	11694 <__assert_fail@plt+0xbc4>
   11658:	b	11694 <__assert_fail@plt+0xbc4>
   1165c:	b	11694 <__assert_fail@plt+0xbc4>
   11660:	b	11694 <__assert_fail@plt+0xbc4>
   11664:	b	116c0 <__assert_fail@plt+0xbf0>
   11668:	b	11694 <__assert_fail@plt+0xbc4>
   1166c:	b	11694 <__assert_fail@plt+0xbc4>
   11670:	b	11694 <__assert_fail@plt+0xbc4>
   11674:	b	116c8 <__assert_fail@plt+0xbf8>
   11678:	b	11694 <__assert_fail@plt+0xbc4>
   1167c:	b	116d0 <__assert_fail@plt+0xc00>
   11680:	b	11694 <__assert_fail@plt+0xbc4>
   11684:	b	116d8 <__assert_fail@plt+0xc08>
   11688:	b	11694 <__assert_fail@plt+0xbc4>
   1168c:	b	116e0 <__assert_fail@plt+0xc10>
   11690:	mov	r0, #7
   11694:	ldr	r2, [sp, #12]
   11698:	ldr	r3, [r6]
   1169c:	str	r7, [r5]
   116a0:	cmp	r2, r3
   116a4:	bne	11790 <__assert_fail@plt+0xcc0>
   116a8:	add	sp, sp, #16
   116ac:	pop	{r4, r5, r6, r7, r8, pc}
   116b0:	mov	r0, #8
   116b4:	b	11694 <__assert_fail@plt+0xbc4>
   116b8:	mov	r0, #12
   116bc:	b	11694 <__assert_fail@plt+0xbc4>
   116c0:	mov	r0, #10
   116c4:	b	11694 <__assert_fail@plt+0xbc4>
   116c8:	mov	r0, #13
   116cc:	b	11694 <__assert_fail@plt+0xbc4>
   116d0:	mov	r0, #9
   116d4:	b	11694 <__assert_fail@plt+0xbc4>
   116d8:	mov	r0, #11
   116dc:	b	11694 <__assert_fail@plt+0xbc4>
   116e0:	add	r4, sp, #8
   116e4:	add	r1, ip, r7
   116e8:	mov	r3, #0
   116ec:	mov	r2, #2
   116f0:	mov	r0, r4
   116f4:	strb	r3, [sp, #10]
   116f8:	bl	10a64 <strncpy@plt>
   116fc:	mov	r0, r4
   11700:	mov	r2, #16
   11704:	add	r1, sp, #4
   11708:	bl	10938 <strtol@plt>
   1170c:	ldr	r3, [sp, #4]
   11710:	cmp	r3, r4
   11714:	subhi	r3, r3, r4
   11718:	addhi	r7, r7, r3
   1171c:	uxtbhi	r0, r0
   11720:	bhi	11694 <__assert_fail@plt+0xbc4>
   11724:	ldr	r0, [pc, #112]	; 1179c <__assert_fail@plt+0xccc>
   11728:	add	r0, pc, r0
   1172c:	bl	11244 <__assert_fail@plt+0x774>
   11730:	add	r8, sp, #8
   11734:	mov	r3, #0
   11738:	mov	r2, #3
   1173c:	mov	r0, r8
   11740:	strb	r3, [sp, #11]
   11744:	bl	10a64 <strncpy@plt>
   11748:	mov	r0, r8
   1174c:	mov	r2, #8
   11750:	add	r1, sp, #4
   11754:	bl	10938 <strtol@plt>
   11758:	ldr	r7, [sp, #4]
   1175c:	cmp	r7, r8
   11760:	subhi	r7, r7, r8
   11764:	addhi	r7, r7, r4
   11768:	uxtbhi	r0, r0
   1176c:	bhi	11694 <__assert_fail@plt+0xbc4>
   11770:	ldr	r3, [pc, #40]	; 117a0 <__assert_fail@plt+0xcd0>
   11774:	ldr	r1, [pc, #40]	; 117a4 <__assert_fail@plt+0xcd4>
   11778:	ldr	r0, [pc, #40]	; 117a8 <__assert_fail@plt+0xcd8>
   1177c:	add	r3, pc, r3
   11780:	mov	r2, #150	; 0x96
   11784:	add	r1, pc, r1
   11788:	add	r0, pc, r0
   1178c:	bl	10ad0 <__assert_fail@plt>
   11790:	bl	1098c <__stack_chk_fail@plt>
   11794:	andeq	r5, r1, ip, lsl #20
   11798:	andeq	r0, r0, r0, lsr #1
   1179c:	andeq	r5, r0, ip, lsr r2
   117a0:	andeq	r5, r0, r4, lsr #3
   117a4:	andeq	r5, r0, ip, asr #3
   117a8:	ldrdeq	r5, [r0], -r0
   117ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117b0:	mov	r4, #0
   117b4:	str	r4, [r1]
   117b8:	mov	r8, r1
   117bc:	ldr	r1, [pc, #240]	; 118b4 <__assert_fail@plt+0xde4>
   117c0:	mov	r9, r2
   117c4:	add	r1, pc, r1
   117c8:	mov	r5, r0
   117cc:	bl	1092c <strcmp@plt>
   117d0:	subs	r7, r0, #0
   117d4:	beq	117ec <__assert_fail@plt+0xd1c>
   117d8:	mov	r1, r4
   117dc:	mov	r0, r5
   117e0:	bl	109ec <open@plt>
   117e4:	subs	r7, r0, #0
   117e8:	blt	11898 <__assert_fail@plt+0xdc8>
   117ec:	mov	r0, #1024	; 0x400
   117f0:	bl	109b0 <malloc@plt>
   117f4:	subs	r6, r0, #0
   117f8:	movne	r4, #0
   117fc:	movne	r5, #1024	; 0x400
   11800:	beq	118a8 <__assert_fail@plt+0xdd8>
   11804:	sub	r2, r5, r4
   11808:	add	r1, r6, r4
   1180c:	mov	r0, r7
   11810:	bl	10944 <read@plt>
   11814:	cmp	r0, #0
   11818:	blt	11854 <__assert_fail@plt+0xd84>
   1181c:	add	r4, r4, r0
   11820:	beq	11884 <__assert_fail@plt+0xdb4>
   11824:	cmp	r5, r4
   11828:	bne	11804 <__assert_fail@plt+0xd34>
   1182c:	lsl	r5, r5, #1
   11830:	mov	r0, r6
   11834:	mov	r1, r5
   11838:	bl	10998 <realloc@plt>
   1183c:	subs	r6, r0, #0
   11840:	bne	11804 <__assert_fail@plt+0xd34>
   11844:	ldr	r0, [pc, #108]	; 118b8 <__assert_fail@plt+0xde8>
   11848:	mov	r1, r5
   1184c:	add	r0, pc, r0
   11850:	bl	11244 <__assert_fail@plt+0x774>
   11854:	bl	10a40 <__errno_location@plt>
   11858:	ldr	r4, [r0]
   1185c:	mov	r0, r7
   11860:	bl	10ac4 <close@plt>
   11864:	cmp	r4, #0
   11868:	beq	1188c <__assert_fail@plt+0xdbc>
   1186c:	mov	r0, r6
   11870:	bl	1095c <free@plt>
   11874:	cmp	r9, #0
   11878:	strne	r5, [r9]
   1187c:	mov	r0, r4
   11880:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11884:	mov	r0, r7
   11888:	bl	10ac4 <close@plt>
   1188c:	mov	r4, #0
   11890:	str	r6, [r8]
   11894:	b	11874 <__assert_fail@plt+0xda4>
   11898:	bl	10a40 <__errno_location@plt>
   1189c:	ldr	r4, [r0]
   118a0:	mov	r0, r4
   118a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   118a8:	ldr	r0, [pc, #12]	; 118bc <__assert_fail@plt+0xdec>
   118ac:	add	r0, pc, r0
   118b0:	bl	11244 <__assert_fail@plt+0x774>
   118b4:	andeq	r5, r0, r8, asr #3
   118b8:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   118bc:	muleq	r0, r0, r0
   118c0:	push	{r4, r5, r6, lr}
   118c4:	sub	sp, sp, #16
   118c8:	ldr	r4, [pc, #124]	; 1194c <__assert_fail@plt+0xe7c>
   118cc:	ldr	r3, [pc, #124]	; 11950 <__assert_fail@plt+0xe80>
   118d0:	add	r4, pc, r4
   118d4:	mov	r2, r1
   118d8:	ldr	r5, [r4, r3]
   118dc:	add	r1, sp, #8
   118e0:	mov	r6, r0
   118e4:	ldr	r3, [r5]
   118e8:	str	r3, [sp, #12]
   118ec:	bl	117ac <__assert_fail@plt+0xcdc>
   118f0:	cmp	r0, #0
   118f4:	ldreq	r0, [sp, #8]
   118f8:	bne	11914 <__assert_fail@plt+0xe44>
   118fc:	ldr	r2, [sp, #12]
   11900:	ldr	r3, [r5]
   11904:	cmp	r2, r3
   11908:	bne	11948 <__assert_fail@plt+0xe78>
   1190c:	add	sp, sp, #16
   11910:	pop	{r4, r5, r6, pc}
   11914:	ldr	r3, [pc, #56]	; 11954 <__assert_fail@plt+0xe84>
   11918:	ldr	r3, [r4, r3]
   1191c:	ldr	r4, [r3]
   11920:	bl	109c8 <strerror@plt>
   11924:	ldr	r2, [pc, #44]	; 11958 <__assert_fail@plt+0xe88>
   11928:	mov	r3, r6
   1192c:	add	r2, pc, r2
   11930:	mov	r1, #1
   11934:	str	r0, [sp]
   11938:	mov	r0, r4
   1193c:	bl	10a88 <__fprintf_chk@plt>
   11940:	mov	r0, #0
   11944:	b	118fc <__assert_fail@plt+0xe2c>
   11948:	bl	1098c <__stack_chk_fail@plt>
   1194c:	andeq	r5, r1, ip, ror #12
   11950:	andeq	r0, r0, r0, lsr #1
   11954:	andeq	r0, r0, r8, lsr #1
   11958:	andeq	r5, r0, r4, rrx
   1195c:	push	{r4, r5, r6, r7, r8, lr}
   11960:	mov	r6, r1
   11964:	ldr	r1, [pc, #268]	; 11a78 <__assert_fail@plt+0xfa8>
   11968:	mov	r4, r0
   1196c:	add	r1, pc, r1
   11970:	bl	1092c <strcmp@plt>
   11974:	cmp	r0, #0
   11978:	bne	11a04 <__assert_fail@plt+0xf34>
   1197c:	ldr	r3, [r6, #4]
   11980:	lsr	r5, r3, #24
   11984:	lsl	r2, r3, #8
   11988:	orr	r5, r5, r3, lsl #24
   1198c:	and	r2, r2, #16711680	; 0xff0000
   11990:	lsr	r3, r3, #8
   11994:	orr	r5, r5, r2
   11998:	and	r3, r3, #65280	; 0xff00
   1199c:	orr	r5, r5, r3
   119a0:	cmp	r5, #0
   119a4:	movgt	r8, #1
   119a8:	ble	11a54 <__assert_fail@plt+0xf84>
   119ac:	mov	r4, #0
   119b0:	b	119bc <__assert_fail@plt+0xeec>
   119b4:	cmp	r4, r5
   119b8:	bge	11a5c <__assert_fail@plt+0xf8c>
   119bc:	sub	r2, r5, r4
   119c0:	add	r1, r6, r4
   119c4:	mov	r0, r8
   119c8:	bl	10a7c <write@plt>
   119cc:	subs	r7, r0, #0
   119d0:	add	r4, r4, r7
   119d4:	bge	119b4 <__assert_fail@plt+0xee4>
   119d8:	bl	10a40 <__errno_location@plt>
   119dc:	cmp	r8, #1
   119e0:	ldr	r7, [r0]
   119e4:	rsb	r7, r7, #0
   119e8:	beq	119f4 <__assert_fail@plt+0xf24>
   119ec:	mov	r0, r8
   119f0:	bl	10ac4 <close@plt>
   119f4:	cmp	r7, #0
   119f8:	bge	11a54 <__assert_fail@plt+0xf84>
   119fc:	rsb	r0, r7, #0
   11a00:	pop	{r4, r5, r6, r7, r8, pc}
   11a04:	mov	r0, r4
   11a08:	ldr	r2, [pc, #108]	; 11a7c <__assert_fail@plt+0xfac>
   11a0c:	ldr	r1, [pc, #108]	; 11a80 <__assert_fail@plt+0xfb0>
   11a10:	bl	109ec <open@plt>
   11a14:	subs	r8, r0, #0
   11a18:	blt	11a6c <__assert_fail@plt+0xf9c>
   11a1c:	ldr	r3, [r6, #4]
   11a20:	lsr	r5, r3, #24
   11a24:	lsl	r2, r3, #8
   11a28:	orr	r5, r5, r3, lsl #24
   11a2c:	and	r2, r2, #16711680	; 0xff0000
   11a30:	lsr	r3, r3, #8
   11a34:	orr	r5, r5, r2
   11a38:	and	r3, r3, #65280	; 0xff00
   11a3c:	orr	r5, r5, r3
   11a40:	cmp	r5, #0
   11a44:	bgt	119ac <__assert_fail@plt+0xedc>
   11a48:	cmp	r8, #1
   11a4c:	beq	11a54 <__assert_fail@plt+0xf84>
   11a50:	bl	10ac4 <close@plt>
   11a54:	mov	r0, #0
   11a58:	pop	{r4, r5, r6, r7, r8, pc}
   11a5c:	cmp	r8, #1
   11a60:	bne	119ec <__assert_fail@plt+0xf1c>
   11a64:	mov	r0, #0
   11a68:	pop	{r4, r5, r6, r7, r8, pc}
   11a6c:	bl	10a40 <__errno_location@plt>
   11a70:	ldr	r0, [r0]
   11a74:	pop	{r4, r5, r6, r7, r8, pc}
   11a78:	andeq	r5, r0, r0, lsr #32
   11a7c:			; <UNDEFINED> instruction: 0x000001b6
   11a80:	andeq	r0, r0, r1, asr #4
   11a84:	push	{r4, r5, lr}
   11a88:	sub	sp, sp, #12
   11a8c:	mov	r4, r0
   11a90:	bl	1195c <__assert_fail@plt+0xe8c>
   11a94:	ldr	r2, [pc, #80]	; 11aec <__assert_fail@plt+0x101c>
   11a98:	add	r2, pc, r2
   11a9c:	subs	r3, r0, #0
   11aa0:	bne	11ab0 <__assert_fail@plt+0xfe0>
   11aa4:	mov	r0, r3
   11aa8:	add	sp, sp, #12
   11aac:	pop	{r4, r5, pc}
   11ab0:	ldr	r3, [pc, #56]	; 11af0 <__assert_fail@plt+0x1020>
   11ab4:	ldr	r3, [r2, r3]
   11ab8:	ldr	r5, [r3]
   11abc:	bl	109c8 <strerror@plt>
   11ac0:	ldr	r2, [pc, #44]	; 11af4 <__assert_fail@plt+0x1024>
   11ac4:	mov	r3, r4
   11ac8:	add	r2, pc, r2
   11acc:	mov	r1, #1
   11ad0:	str	r0, [sp]
   11ad4:	mov	r0, r5
   11ad8:	bl	10a88 <__fprintf_chk@plt>
   11adc:	mvn	r3, #0
   11ae0:	mov	r0, r3
   11ae4:	add	sp, sp, #12
   11ae8:	pop	{r4, r5, pc}
   11aec:	andeq	r5, r1, r4, lsr #9
   11af0:	andeq	r0, r0, r8, lsr #1
   11af4:	andeq	r4, r0, ip, ror #29
   11af8:	ldrb	r3, [r0]
   11afc:	cmp	r3, #0
   11b00:	beq	11be0 <__assert_fail@plt+0x1110>
   11b04:	mvn	r3, #0
   11b08:	push	{r4, r5, r6, r7, r8, lr}
   11b0c:	mov	r5, r0
   11b10:	str	r3, [r2]
   11b14:	ldrb	r4, [r0]
   11b18:	ldr	r0, [pc, #200]	; 11be8 <__assert_fail@plt+0x1118>
   11b1c:	mov	r8, r1
   11b20:	add	r0, pc, r0
   11b24:	mov	r1, r4
   11b28:	mov	r7, r2
   11b2c:	bl	10a34 <strchr@plt>
   11b30:	mov	r6, r4
   11b34:	cmp	r0, #0
   11b38:	moveq	r6, r0
   11b3c:	beq	11b54 <__assert_fail@plt+0x1084>
   11b40:	ldrb	r3, [r5, #1]
   11b44:	cmp	r4, r3
   11b48:	beq	11bc0 <__assert_fail@plt+0x10f0>
   11b4c:	add	r5, r5, #1
   11b50:	mov	r4, r3
   11b54:	cmp	r4, #0
   11b58:	beq	11bd8 <__assert_fail@plt+0x1108>
   11b5c:	ldr	r0, [pc, #136]	; 11bec <__assert_fail@plt+0x111c>
   11b60:	mov	r1, r4
   11b64:	add	r0, pc, r0
   11b68:	bl	10a34 <strchr@plt>
   11b6c:	cmp	r0, #0
   11b70:	beq	11bd8 <__assert_fail@plt+0x1108>
   11b74:	cmp	r4, #115	; 0x73
   11b78:	beq	11ba8 <__assert_fail@plt+0x10d8>
   11b7c:	cmp	r6, #98	; 0x62
   11b80:	moveq	r3, #1
   11b84:	beq	11ba0 <__assert_fail@plt+0x10d0>
   11b88:	cmp	r6, #104	; 0x68
   11b8c:	moveq	r3, #2
   11b90:	beq	11ba0 <__assert_fail@plt+0x10d0>
   11b94:	cmp	r6, #108	; 0x6c
   11b98:	moveq	r3, #4
   11b9c:	mvnne	r3, #0
   11ba0:	str	r3, [r7]
   11ba4:	ldrb	r4, [r5]
   11ba8:	str	r4, [r8]
   11bac:	ldrb	r0, [r5, #1]
   11bb0:	adds	r0, r0, #0
   11bb4:	movne	r0, #1
   11bb8:	rsb	r0, r0, #0
   11bbc:	pop	{r4, r5, r6, r7, r8, pc}
   11bc0:	cmp	r6, #104	; 0x68
   11bc4:	add	r3, r5, #2
   11bc8:	ldrb	r4, [r5, #2]
   11bcc:	moveq	r6, #98	; 0x62
   11bd0:	mov	r5, r3
   11bd4:	b	11b54 <__assert_fail@plt+0x1084>
   11bd8:	mvn	r0, #0
   11bdc:	pop	{r4, r5, r6, r7, r8, pc}
   11be0:	mvn	r0, #0
   11be4:	bx	lr
   11be8:			; <UNDEFINED> instruction: 0x00004eb8
   11bec:	andeq	r4, r0, ip, ror lr
   11bf0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bf4:	subs	fp, r1, #0
   11bf8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bfc:	mov	r4, r0
   11c00:	bl	1147c <__assert_fail@plt+0x9ac>
   11c04:	cmp	r0, #0
   11c08:	bne	11d28 <__assert_fail@plt+0x1258>
   11c0c:	ands	r5, fp, #3
   11c10:	bne	11cb0 <__assert_fail@plt+0x11e0>
   11c14:	ldr	r1, [pc, #360]	; 11d84 <__assert_fail@plt+0x12b4>
   11c18:	mov	r0, #1
   11c1c:	add	r1, pc, r1
   11c20:	bl	10a70 <__printf_chk@plt>
   11c24:	cmp	fp, #0
   11c28:	add	r6, fp, #3
   11c2c:	movge	r6, fp
   11c30:	cmp	fp, #3
   11c34:	asr	r6, r6, #2
   11c38:	ble	11ca4 <__assert_fail@plt+0x11d4>
   11c3c:	ldr	sl, [pc, #324]	; 11d88 <__assert_fail@plt+0x12b8>
   11c40:	ldr	r9, [pc, #324]	; 11d8c <__assert_fail@plt+0x12bc>
   11c44:	ldr	r8, [pc, #324]	; 11d90 <__assert_fail@plt+0x12c0>
   11c48:	add	sl, pc, sl
   11c4c:	add	r9, pc, r9
   11c50:	add	r8, pc, r8
   11c54:	sub	r4, r4, #4
   11c58:	sub	r7, r6, #1
   11c5c:	ldr	r1, [r4, #4]!
   11c60:	cmp	r5, r7
   11c64:	movlt	r3, sl
   11c68:	lsr	r2, r1, #24
   11c6c:	lsl	r0, r1, #8
   11c70:	orr	r2, r2, r1, lsl #24
   11c74:	and	r0, r0, #16711680	; 0xff0000
   11c78:	lsr	r1, r1, #8
   11c7c:	orr	r2, r2, r0
   11c80:	and	r1, r1, #65280	; 0xff00
   11c84:	movge	r3, r9
   11c88:	orr	r2, r2, r1
   11c8c:	add	r5, r5, #1
   11c90:	mov	r1, r8
   11c94:	mov	r0, #1
   11c98:	bl	10a70 <__printf_chk@plt>
   11c9c:	cmp	r6, r5
   11ca0:	bgt	11c5c <__assert_fail@plt+0x118c>
   11ca4:	mov	r0, #62	; 0x3e
   11ca8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cac:	b	10a58 <putchar@plt>
   11cb0:	ldr	r1, [pc, #220]	; 11d94 <__assert_fail@plt+0x12c4>
   11cb4:	mov	r0, #1
   11cb8:	add	r1, pc, r1
   11cbc:	bl	10a70 <__printf_chk@plt>
   11cc0:	cmp	fp, #0
   11cc4:	ble	11d1c <__assert_fail@plt+0x124c>
   11cc8:	ldr	sl, [pc, #200]	; 11d98 <__assert_fail@plt+0x12c8>
   11ccc:	ldr	r9, [pc, #200]	; 11d9c <__assert_fail@plt+0x12cc>
   11cd0:	ldr	r8, [pc, #200]	; 11da0 <__assert_fail@plt+0x12d0>
   11cd4:	sub	r7, fp, #1
   11cd8:	add	sl, pc, sl
   11cdc:	add	r9, pc, r9
   11ce0:	add	r8, pc, r8
   11ce4:	add	fp, r4, fp
   11ce8:	mov	r6, r4
   11cec:	add	r6, r6, #1
   11cf0:	mov	r3, r6
   11cf4:	mov	r1, r8
   11cf8:	ldrb	r2, [r3, #-1]!
   11cfc:	mov	r0, #1
   11d00:	sub	r3, r3, r4
   11d04:	cmp	r3, r7
   11d08:	movge	r3, sl
   11d0c:	movlt	r3, r9
   11d10:	bl	10a70 <__printf_chk@plt>
   11d14:	cmp	r6, fp
   11d18:	bne	11cec <__assert_fail@plt+0x121c>
   11d1c:	mov	r0, #93	; 0x5d
   11d20:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d24:	b	10a58 <putchar@plt>
   11d28:	ldr	r1, [pc, #116]	; 11da4 <__assert_fail@plt+0x12d4>
   11d2c:	mov	r0, #1
   11d30:	add	r1, pc, r1
   11d34:	bl	10a70 <__printf_chk@plt>
   11d38:	ldr	r6, [pc, #104]	; 11da8 <__assert_fail@plt+0x12d8>
   11d3c:	ldr	r7, [pc, #104]	; 11dac <__assert_fail@plt+0x12dc>
   11d40:	add	r6, pc, r6
   11d44:	add	r7, pc, r7
   11d48:	add	fp, r4, fp
   11d4c:	mov	r2, r4
   11d50:	mov	r1, r6
   11d54:	mov	r0, #1
   11d58:	bl	10a70 <__printf_chk@plt>
   11d5c:	mov	r0, r4
   11d60:	bl	10a28 <strlen@plt>
   11d64:	add	r0, r0, #1
   11d68:	add	r4, r4, r0
   11d6c:	cmp	r4, fp
   11d70:	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d74:	mov	r1, r7
   11d78:	mov	r0, #1
   11d7c:	bl	10a70 <__printf_chk@plt>
   11d80:	b	11d4c <__assert_fail@plt+0x127c>
   11d84:	ldrdeq	r4, [r0], -ip
   11d88:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   11d8c:	andeq	r4, r0, r0, lsl #26
   11d90:			; <UNDEFINED> instruction: 0x00004db0
   11d94:	andeq	r4, r0, r4, asr sp
   11d98:	andeq	r4, r0, r4, ror ip
   11d9c:	andeq	r4, r0, r0, ror #20
   11da0:	andeq	r4, r0, r4, lsr sp
   11da4:			; <UNDEFINED> instruction: 0x00004cb8
   11da8:	andeq	r4, r0, ip, lsr #25
   11dac:			; <UNDEFINED> instruction: 0x00004cb0
   11db0:	ldr	r2, [pc, #28]	; 11dd4 <__assert_fail@plt+0x1304>
   11db4:	ldr	r1, [pc, #28]	; 11dd8 <__assert_fail@plt+0x1308>
   11db8:	push	{r4, lr}
   11dbc:	add	r2, pc, r2
   11dc0:	add	r1, pc, r1
   11dc4:	mov	r0, #1
   11dc8:	bl	10a70 <__printf_chk@plt>
   11dcc:	mov	r0, #0
   11dd0:	bl	10a10 <exit@plt>
   11dd4:	andeq	r4, r0, r0, ror #24
   11dd8:	andeq	r4, r0, r8, ror #24
   11ddc:	push	{r7, fp, lr}
   11de0:	sub	sp, sp, #44	; 0x2c
   11de4:	ldr	lr, [pc, #604]	; 12048 <__assert_fail@plt+0x1578>
   11de8:	ldr	ip, [pc, #604]	; 1204c <__assert_fail@plt+0x157c>
   11dec:	add	lr, pc, lr
   11df0:	cmp	r0, #0
   11df4:	str	r0, [sp, #20]
   11df8:	mov	r5, r1
   11dfc:	ldr	r1, [lr, ip]
   11e00:	mov	r4, r3
   11e04:	mov	r8, r2
   11e08:	ldr	r3, [r1]
   11e0c:	ldr	r6, [sp, #56]	; 0x38
   11e10:	str	r3, [sp, #36]	; 0x24
   11e14:	beq	11ff4 <__assert_fail@plt+0x1524>
   11e18:	ldr	r3, [pc, #560]	; 12050 <__assert_fail@plt+0x1580>
   11e1c:	ldr	r2, [pc, #560]	; 12054 <__assert_fail@plt+0x1584>
   11e20:	add	r3, pc, r3
   11e24:	ldm	r3, {r0, r1}
   11e28:	ldr	r3, [lr, r2]
   11e2c:	str	r0, [sp, #28]
   11e30:	add	r0, sp, #28
   11e34:	ldr	r7, [r3]
   11e38:	strh	r1, [sp, #32]
   11e3c:	bl	10a28 <strlen@plt>
   11e40:	ldr	r2, [pc, #528]	; 12058 <__assert_fail@plt+0x1588>
   11e44:	mov	r1, #1
   11e48:	str	r8, [sp]
   11e4c:	mov	r3, r5
   11e50:	add	r2, pc, r2
   11e54:	add	r8, r0, r1
   11e58:	mov	r0, r7
   11e5c:	bl	10a88 <__fprintf_chk@plt>
   11e60:	ldr	r0, [r4]
   11e64:	cmp	r0, #0
   11e68:	beq	11fd4 <__assert_fail@plt+0x1504>
   11e6c:	mov	r9, r4
   11e70:	mov	r5, #0
   11e74:	bl	10a28 <strlen@plt>
   11e78:	ldr	r3, [r9, #4]
   11e7c:	cmp	r3, #1
   11e80:	add	r3, r0, #1
   11e84:	addeq	r3, r3, r8
   11e88:	ldr	r0, [r9, #16]!
   11e8c:	cmp	r5, r3
   11e90:	movlt	r5, r3
   11e94:	cmp	r0, #0
   11e98:	bne	11e74 <__assert_fail@plt+0x13a4>
   11e9c:	ldr	r3, [r6]
   11ea0:	cmp	r3, #0
   11ea4:	beq	11fa4 <__assert_fail@plt+0x14d4>
   11ea8:	ldr	sl, [pc, #428]	; 1205c <__assert_fail@plt+0x158c>
   11eac:	ldr	r9, [pc, #428]	; 12060 <__assert_fail@plt+0x1590>
   11eb0:	add	sl, pc, sl
   11eb4:	add	r9, pc, r9
   11eb8:	add	r4, r4, #16
   11ebc:	b	11f34 <__assert_fail@plt+0x1464>
   11ec0:	mov	r2, #6
   11ec4:	mov	r3, r7
   11ec8:	mov	r1, #1
   11ecc:	mov	r0, r9
   11ed0:	bl	109a4 <fwrite@plt>
   11ed4:	ldr	r2, [r4, #-12]
   11ed8:	ldr	fp, [r4, #-16]
   11edc:	cmp	r2, #0
   11ee0:	bne	11f60 <__assert_fail@plt+0x1490>
   11ee4:	ldr	r2, [pc, #376]	; 12064 <__assert_fail@plt+0x1594>
   11ee8:	str	fp, [sp]
   11eec:	mov	r3, r5
   11ef0:	add	r2, pc, r2
   11ef4:	mov	r1, #1
   11ef8:	mov	r0, r7
   11efc:	bl	10a88 <__fprintf_chk@plt>
   11f00:	ldr	r2, [pc, #352]	; 12068 <__assert_fail@plt+0x1598>
   11f04:	ldr	r3, [r6], #4
   11f08:	add	r2, pc, r2
   11f0c:	mov	r1, #1
   11f10:	mov	r0, r7
   11f14:	bl	10a88 <__fprintf_chk@plt>
   11f18:	ldr	r3, [r4]
   11f1c:	cmp	r3, #0
   11f20:	beq	11fc8 <__assert_fail@plt+0x14f8>
   11f24:	ldr	r3, [r6]
   11f28:	add	r4, r4, #16
   11f2c:	cmp	r3, #0
   11f30:	beq	11fa4 <__assert_fail@plt+0x14d4>
   11f34:	ldr	r3, [r4, #-4]
   11f38:	cmp	r3, #126	; 0x7e
   11f3c:	bgt	11ec0 <__assert_fail@plt+0x13f0>
   11f40:	mov	r2, sl
   11f44:	mov	r1, #1
   11f48:	mov	r0, r7
   11f4c:	bl	10a88 <__fprintf_chk@plt>
   11f50:	ldr	r2, [r4, #-12]
   11f54:	ldr	fp, [r4, #-16]
   11f58:	cmp	r2, #0
   11f5c:	beq	11ee4 <__assert_fail@plt+0x1414>
   11f60:	mov	r0, fp
   11f64:	bl	10a28 <strlen@plt>
   11f68:	ldr	r2, [pc, #252]	; 1206c <__assert_fail@plt+0x159c>
   11f6c:	sub	ip, r5, r8
   11f70:	add	r2, pc, r2
   11f74:	str	r2, [sp, #8]
   11f78:	add	r2, sp, #28
   11f7c:	str	r2, [sp]
   11f80:	ldr	r2, [pc, #232]	; 12070 <__assert_fail@plt+0x15a0>
   11f84:	mov	r3, fp
   11f88:	add	r2, pc, r2
   11f8c:	mov	r1, #1
   11f90:	sub	ip, ip, r0
   11f94:	str	ip, [sp, #4]
   11f98:	mov	r0, r7
   11f9c:	bl	10a88 <__fprintf_chk@plt>
   11fa0:	b	11f00 <__assert_fail@plt+0x1430>
   11fa4:	ldr	r3, [pc, #200]	; 12074 <__assert_fail@plt+0x15a4>
   11fa8:	ldr	r1, [pc, #200]	; 12078 <__assert_fail@plt+0x15a8>
   11fac:	ldr	r0, [pc, #200]	; 1207c <__assert_fail@plt+0x15ac>
   11fb0:	add	r3, pc, r3
   11fb4:	ldr	r2, [pc, #196]	; 12080 <__assert_fail@plt+0x15b0>
   11fb8:	add	r3, r3, #16
   11fbc:	add	r1, pc, r1
   11fc0:	add	r0, pc, r0
   11fc4:	bl	10ad0 <__assert_fail@plt>
   11fc8:	ldr	r3, [sp, #20]
   11fcc:	cmp	r3, #0
   11fd0:	beq	12040 <__assert_fail@plt+0x1570>
   11fd4:	ldr	r2, [pc, #168]	; 12084 <__assert_fail@plt+0x15b4>
   11fd8:	ldr	r3, [sp, #20]
   11fdc:	mov	r0, r7
   11fe0:	add	r2, pc, r2
   11fe4:	mov	r1, #1
   11fe8:	bl	10a88 <__fprintf_chk@plt>
   11fec:	mov	r0, #1
   11ff0:	bl	10a10 <exit@plt>
   11ff4:	ldr	r1, [pc, #140]	; 12088 <__assert_fail@plt+0x15b8>
   11ff8:	ldr	r2, [pc, #140]	; 1208c <__assert_fail@plt+0x15bc>
   11ffc:	mov	r3, r5
   12000:	ldr	ip, [lr, r1]
   12004:	add	r2, pc, r2
   12008:	str	r8, [sp]
   1200c:	ldm	r2, {r0, r1}
   12010:	ldr	r7, [ip]
   12014:	ldr	r2, [pc, #116]	; 12090 <__assert_fail@plt+0x15c0>
   12018:	str	r0, [sp, #28]
   1201c:	strh	r1, [sp, #32]
   12020:	mov	r0, r7
   12024:	add	r2, pc, r2
   12028:	mov	r1, #1
   1202c:	bl	10a88 <__fprintf_chk@plt>
   12030:	ldr	r0, [r4]
   12034:	cmp	r0, #0
   12038:	movne	r8, #6
   1203c:	bne	11e6c <__assert_fail@plt+0x139c>
   12040:	mov	r0, #0
   12044:	bl	10a10 <exit@plt>
   12048:	andeq	r5, r1, r0, asr r1
   1204c:	andeq	r0, r0, r0, lsr #1
   12050:	andeq	r4, r0, ip, ror ip
   12054:	andeq	r0, r0, r8, lsr #1
   12058:	andeq	r4, r0, r8, ror #23
   1205c:	andeq	r4, r0, r4, asr #23
   12060:			; <UNDEFINED> instruction: 0x00004bb8
   12064:	andeq	r4, r0, ip, lsl #23
   12068:	muleq	r0, r0, fp
   1206c:	ldrdeq	r4, [r0], -ip
   12070:	strdeq	r4, [r0], -ip
   12074:	andeq	r4, r0, r0, ror r9
   12078:	muleq	r0, r4, r9
   1207c:	muleq	r0, r4, sl
   12080:			; <UNDEFINED> instruction: 0x000001b7
   12084:			; <UNDEFINED> instruction: 0x00004ab0
   12088:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1208c:	muleq	r0, r8, sl
   12090:	andeq	r4, r0, r4, lsl sl
   12094:	push	{lr}		; (str lr, [sp, #-4]!)
   12098:	ldr	r3, [r0, #16]
   1209c:	lsr	ip, r3, #24
   120a0:	lsl	lr, r3, #8
   120a4:	orr	ip, ip, r3, lsl #24
   120a8:	and	lr, lr, #16711680	; 0xff0000
   120ac:	lsr	r3, r3, #8
   120b0:	orr	ip, ip, lr
   120b4:	and	r3, r3, #65280	; 0xff00
   120b8:	orr	r3, ip, r3
   120bc:	cmp	r3, #39	; 0x27
   120c0:	bls	120f4 <__assert_fail@plt+0x1624>
   120c4:	ldr	ip, [r0, #8]
   120c8:	add	r3, r1, r3
   120cc:	lsr	lr, ip, #24
   120d0:	lsl	r1, ip, #8
   120d4:	orr	lr, lr, ip, lsl #24
   120d8:	and	r1, r1, #16711680	; 0xff0000
   120dc:	lsr	ip, ip, #8
   120e0:	orr	lr, lr, r1
   120e4:	and	ip, ip, #65280	; 0xff00
   120e8:	orr	ip, lr, ip
   120ec:	cmp	r3, ip
   120f0:	bls	120fc <__assert_fail@plt+0x162c>
   120f4:	mov	r0, #1
   120f8:	pop	{pc}		; (ldr pc, [sp], #4)
   120fc:	ldr	r3, [r0, #12]
   12100:	add	ip, r2, ip
   12104:	lsl	r1, r3, #8
   12108:	lsr	r2, r3, #24
   1210c:	orr	r2, r2, r3, lsl #24
   12110:	and	r1, r1, #16711680	; 0xff0000
   12114:	lsr	r3, r3, #8
   12118:	orr	r2, r2, r1
   1211c:	and	r3, r3, #65280	; 0xff00
   12120:	orr	r3, r2, r3
   12124:	cmp	ip, r3
   12128:	bhi	120f4 <__assert_fail@plt+0x1624>
   1212c:	ldr	r1, [r0, #32]
   12130:	ldr	r2, [r0, #4]
   12134:	lsl	ip, r1, #8
   12138:	lsr	r0, r1, #24
   1213c:	orr	r0, r0, r1, lsl #24
   12140:	and	ip, ip, #16711680	; 0xff0000
   12144:	lsl	lr, r2, #8
   12148:	orr	r0, r0, ip
   1214c:	lsr	r1, r1, #8
   12150:	lsr	ip, r2, #24
   12154:	orr	ip, ip, r2, lsl #24
   12158:	and	r1, r1, #65280	; 0xff00
   1215c:	and	lr, lr, #16711680	; 0xff0000
   12160:	lsr	r2, r2, #8
   12164:	orr	r0, r0, r1
   12168:	and	r2, r2, #65280	; 0xff00
   1216c:	orr	r1, ip, lr
   12170:	add	r0, r0, r3
   12174:	orr	r2, r1, r2
   12178:	cmp	r0, r2
   1217c:	movls	r0, #0
   12180:	movhi	r0, #1
   12184:	pop	{pc}		; (ldr pc, [sp], #4)
   12188:	push	{r4, r5, r6, r7, r8, lr}
   1218c:	cmp	r2, #0
   12190:	ldr	r4, [r0, #12]
   12194:	ldr	lr, [r0, #32]
   12198:	lsr	ip, r4, #24
   1219c:	lsl	r6, r4, #8
   121a0:	orr	ip, ip, r4, lsl #24
   121a4:	and	r6, r6, #16711680	; 0xff0000
   121a8:	lsr	r5, lr, #24
   121ac:	orr	ip, ip, r6
   121b0:	lsl	r6, lr, #8
   121b4:	orr	r5, r5, lr, lsl #24
   121b8:	lsr	r4, r4, #8
   121bc:	and	r6, r6, #16711680	; 0xff0000
   121c0:	lsr	lr, lr, #8
   121c4:	and	r4, r4, #65280	; 0xff00
   121c8:	orr	r5, r5, r6
   121cc:	and	lr, lr, #65280	; 0xff00
   121d0:	orr	ip, ip, r4
   121d4:	orr	lr, r5, lr
   121d8:	add	ip, ip, lr
   121dc:	add	ip, r0, ip
   121e0:	blt	12264 <__assert_fail@plt+0x1794>
   121e4:	add	r6, r1, r2
   121e8:	cmp	r6, ip
   121ec:	movls	r5, #0
   121f0:	movhi	r5, #1
   121f4:	cmp	r1, r0
   121f8:	orrcc	r5, r5, #1
   121fc:	cmp	r5, #0
   12200:	bne	12264 <__assert_fail@plt+0x1794>
   12204:	sub	r7, r3, r2
   12208:	add	r7, ip, r7
   1220c:	cmp	r7, r0
   12210:	bcc	12264 <__assert_fail@plt+0x1794>
   12214:	ldr	r4, [r0, #4]
   12218:	lsr	lr, r4, #24
   1221c:	lsl	r8, r4, #8
   12220:	orr	lr, lr, r4, lsl #24
   12224:	and	r8, r8, #16711680	; 0xff0000
   12228:	lsr	r4, r4, #8
   1222c:	orr	lr, lr, r8
   12230:	and	r4, r4, #65280	; 0xff00
   12234:	orr	r4, lr, r4
   12238:	add	lr, r0, r4
   1223c:	cmp	r7, lr
   12240:	bhi	1226c <__assert_fail@plt+0x179c>
   12244:	sub	ip, ip, r1
   12248:	mov	r0, r1
   1224c:	sub	r2, ip, r2
   12250:	mov	r1, r6
   12254:	add	r0, r0, r3
   12258:	bl	10950 <memmove@plt>
   1225c:	mov	r0, r5
   12260:	pop	{r4, r5, r6, r7, r8, pc}
   12264:	mvn	r0, #3
   12268:	pop	{r4, r5, r6, r7, r8, pc}
   1226c:	mvn	r0, #2
   12270:	pop	{r4, r5, r6, r7, r8, pc}
   12274:	push	{r4, r5, r6, lr}
   12278:	mov	r5, r2
   1227c:	mov	r6, r3
   12280:	lsl	r2, r2, #4
   12284:	lsl	r3, r3, #4
   12288:	mov	r4, r0
   1228c:	bl	12188 <__assert_fail@plt+0x16b8>
   12290:	cmp	r0, #0
   12294:	popne	{r4, r5, r6, pc}
   12298:	ldr	ip, [r4, #8]
   1229c:	ldr	r1, [r4, #12]
   122a0:	sub	r2, r6, r5
   122a4:	lsr	lr, ip, #24
   122a8:	lsl	r3, ip, #8
   122ac:	orr	lr, lr, ip, lsl #24
   122b0:	and	r3, r3, #16711680	; 0xff0000
   122b4:	orr	lr, lr, r3
   122b8:	lsl	r5, r1, #8
   122bc:	lsr	r3, r1, #24
   122c0:	orr	r3, r3, r1, lsl #24
   122c4:	and	r5, r5, #16711680	; 0xff0000
   122c8:	lsr	ip, ip, #8
   122cc:	lsr	r1, r1, #8
   122d0:	orr	r3, r3, r5
   122d4:	and	r1, r1, #65280	; 0xff00
   122d8:	and	ip, ip, #65280	; 0xff00
   122dc:	lsl	r2, r2, #4
   122e0:	orr	ip, lr, ip
   122e4:	orr	r3, r3, r1
   122e8:	add	ip, ip, r2
   122ec:	add	r3, r3, r2
   122f0:	rev	ip, ip
   122f4:	rev	r3, r3
   122f8:	str	ip, [r4, #8]
   122fc:	str	r3, [r4, #12]
   12300:	pop	{r4, r5, r6, pc}
   12304:	push	{r4, r5, r6, lr}
   12308:	mov	r4, r0
   1230c:	mov	r5, r2
   12310:	mov	r6, r3
   12314:	bl	12188 <__assert_fail@plt+0x16b8>
   12318:	cmp	r0, #0
   1231c:	popne	{r4, r5, r6, pc}
   12320:	ldr	r3, [r4, #36]	; 0x24
   12324:	ldr	r1, [r4, #12]
   12328:	sub	ip, r6, r5
   1232c:	lsr	r2, r3, #24
   12330:	lsl	r5, r3, #8
   12334:	orr	r2, r2, r3, lsl #24
   12338:	and	r5, r5, #16711680	; 0xff0000
   1233c:	lsr	lr, r3, #8
   12340:	orr	r2, r2, r5
   12344:	lsr	r3, r1, #24
   12348:	lsl	r5, r1, #8
   1234c:	orr	r3, r3, r1, lsl #24
   12350:	and	r5, r5, #16711680	; 0xff0000
   12354:	lsr	r1, r1, #8
   12358:	and	lr, lr, #65280	; 0xff00
   1235c:	orr	r3, r3, r5
   12360:	and	r1, r1, #65280	; 0xff00
   12364:	orr	r2, r2, lr
   12368:	orr	r3, r3, r1
   1236c:	add	r2, r2, ip
   12370:	add	r3, r3, ip
   12374:	rev	r2, r2
   12378:	rev	r3, r3
   1237c:	str	r2, [r4, #36]	; 0x24
   12380:	str	r3, [r4, #12]
   12384:	pop	{r4, r5, r6, pc}
   12388:	push	{r4, r5, r6, r7, r8, lr}
   1238c:	mov	r6, r0
   12390:	ldr	ip, [r0, #16]
   12394:	mov	r5, r1
   12398:	mov	r4, r3
   1239c:	add	r0, r1, #40	; 0x28
   123a0:	lsl	r3, ip, #8
   123a4:	lsr	r1, ip, #24
   123a8:	and	r3, r3, #16711680	; 0xff0000
   123ac:	orr	r1, r1, ip, lsl #24
   123b0:	lsr	ip, ip, #8
   123b4:	and	ip, ip, #65280	; 0xff00
   123b8:	orr	r1, r1, r3
   123bc:	orr	r1, r1, ip
   123c0:	add	r1, r6, r1
   123c4:	add	r7, r2, #40	; 0x28
   123c8:	bl	10950 <memmove@plt>
   123cc:	mov	r3, #671088640	; 0x28000000
   123d0:	str	r3, [r5, #16]
   123d4:	ldr	r0, [r6, #8]
   123d8:	mov	r2, r4
   123dc:	lsr	r1, r0, #24
   123e0:	lsl	r3, r0, #8
   123e4:	and	r3, r3, #16711680	; 0xff0000
   123e8:	orr	r1, r1, r0, lsl #24
   123ec:	lsr	r0, r0, #8
   123f0:	orr	r1, r1, r3
   123f4:	and	r0, r0, #65280	; 0xff00
   123f8:	orr	r1, r1, r0
   123fc:	add	r1, r6, r1
   12400:	add	r0, r5, r7
   12404:	bl	10950 <memmove@plt>
   12408:	lsl	r1, r4, #8
   1240c:	lsr	r3, r4, #24
   12410:	lsl	r0, r7, #8
   12414:	lsr	r2, r7, #24
   12418:	and	r0, r0, #16711680	; 0xff0000
   1241c:	and	r1, r1, #16711680	; 0xff0000
   12420:	orr	r3, r3, r4, lsl #24
   12424:	orr	r2, r2, r7, lsl #24
   12428:	orr	r2, r2, r0
   1242c:	orr	r3, r3, r1
   12430:	lsr	r0, r7, #8
   12434:	lsr	r1, r4, #8
   12438:	and	r0, r0, #65280	; 0xff00
   1243c:	and	r1, r1, #65280	; 0xff00
   12440:	orr	r2, r2, r0
   12444:	orr	r3, r3, r1
   12448:	str	r3, [r5, #36]	; 0x24
   1244c:	str	r2, [r5, #8]
   12450:	ldr	r2, [r6, #12]
   12454:	ldr	r0, [r6, #32]
   12458:	add	r4, r7, r4
   1245c:	lsr	r1, r2, #24
   12460:	lsl	r3, r2, #8
   12464:	orr	r1, r1, r2, lsl #24
   12468:	lsr	ip, r0, #24
   1246c:	lsl	lr, r0, #8
   12470:	lsr	r2, r2, #8
   12474:	and	r3, r3, #16711680	; 0xff0000
   12478:	orr	r3, r1, r3
   1247c:	and	r1, r2, #65280	; 0xff00
   12480:	orr	r2, ip, r0, lsl #24
   12484:	and	ip, lr, #16711680	; 0xff0000
   12488:	lsr	r0, r0, #8
   1248c:	orr	r1, r3, r1
   12490:	orr	r2, r2, ip
   12494:	and	r0, r0, #65280	; 0xff00
   12498:	orr	r2, r2, r0
   1249c:	add	r1, r6, r1
   124a0:	add	r0, r5, r4
   124a4:	bl	10950 <memmove@plt>
   124a8:	lsl	r2, r4, #8
   124ac:	lsr	r3, r4, #24
   124b0:	and	r2, r2, #16711680	; 0xff0000
   124b4:	orr	r3, r3, r4, lsl #24
   124b8:	lsr	r4, r4, #8
   124bc:	orr	r3, r3, r2
   124c0:	and	r4, r4, #65280	; 0xff00
   124c4:	orr	r4, r3, r4
   124c8:	str	r4, [r5, #12]
   124cc:	ldr	r2, [r6, #32]
   124d0:	lsl	r1, r2, #8
   124d4:	lsr	r3, r2, #24
   124d8:	orr	r3, r3, r2, lsl #24
   124dc:	and	r1, r1, #16711680	; 0xff0000
   124e0:	lsr	r2, r2, #8
   124e4:	orr	r3, r3, r1
   124e8:	and	r2, r2, #65280	; 0xff00
   124ec:	orr	r3, r3, r2
   124f0:	rev	r3, r3
   124f4:	str	r3, [r5, #32]
   124f8:	pop	{r4, r5, r6, r7, r8, pc}
   124fc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12500:	mov	r8, r2
   12504:	mov	r6, r3
   12508:	mov	r5, r0
   1250c:	bl	146b0 <__assert_fail@plt+0x3be0>
   12510:	subs	r7, r0, #0
   12514:	blt	12638 <__assert_fail@plt+0x1b68>
   12518:	ldr	r3, [r5, #12]
   1251c:	mov	r0, r8
   12520:	lsr	r4, r3, #24
   12524:	lsl	r2, r3, #8
   12528:	and	r2, r2, #16711680	; 0xff0000
   1252c:	orr	r4, r4, r3, lsl #24
   12530:	lsr	r3, r3, #8
   12534:	orr	r4, r4, r2
   12538:	and	r3, r3, #65280	; 0xff00
   1253c:	orr	r3, r4, r3
   12540:	add	r4, r5, r3
   12544:	bl	10a28 <strlen@plt>
   12548:	ldr	ip, [r5, #32]
   1254c:	mov	r2, r8
   12550:	lsr	r1, ip, #24
   12554:	lsl	r3, ip, #8
   12558:	orr	r1, r1, ip, lsl #24
   1255c:	and	r3, r3, #16711680	; 0xff0000
   12560:	lsr	ip, ip, #8
   12564:	orr	r1, r1, r3
   12568:	and	ip, ip, #65280	; 0xff00
   1256c:	orr	r1, r1, ip
   12570:	mov	r9, r0
   12574:	mov	r0, r4
   12578:	bl	14930 <__assert_fail@plt+0x3e60>
   1257c:	subs	r2, r0, #0
   12580:	subne	sl, r2, r4
   12584:	beq	12640 <__assert_fail@plt+0x1b70>
   12588:	cmp	sl, #0
   1258c:	movlt	r7, sl
   12590:	blt	12638 <__assert_fail@plt+0x1b68>
   12594:	ldr	r2, [r5, #8]
   12598:	add	r3, r6, #3
   1259c:	bic	r3, r3, #3
   125a0:	lsr	r1, r2, #24
   125a4:	lsl	r0, r2, #8
   125a8:	orr	r1, r1, r2, lsl #24
   125ac:	and	r0, r0, #16711680	; 0xff0000
   125b0:	lsr	r2, r2, #8
   125b4:	orr	r1, r1, r0
   125b8:	and	r2, r2, #65280	; 0xff00
   125bc:	orr	r1, r1, r2
   125c0:	ldr	r2, [sp, #40]	; 0x28
   125c4:	add	r1, r1, r7
   125c8:	add	r1, r5, r1
   125cc:	str	r1, [r2]
   125d0:	mov	r0, r5
   125d4:	add	r3, r3, #12
   125d8:	mov	r2, #0
   125dc:	bl	12304 <__assert_fail@plt+0x1834>
   125e0:	subs	r7, r0, #0
   125e4:	bne	12638 <__assert_fail@plt+0x1b68>
   125e8:	lsr	r1, sl, #24
   125ec:	lsl	r2, sl, #8
   125f0:	orr	r1, r1, sl, lsl #24
   125f4:	and	r2, r2, #16711680	; 0xff0000
   125f8:	lsr	r3, r6, #24
   125fc:	orr	r1, r1, r2
   12600:	lsl	r2, r6, #8
   12604:	orr	r3, r3, r6, lsl #24
   12608:	and	r2, r2, #16711680	; 0xff0000
   1260c:	orr	r3, r3, r2
   12610:	ldr	r2, [sp, #40]	; 0x28
   12614:	lsr	sl, sl, #8
   12618:	lsr	r6, r6, #8
   1261c:	and	sl, sl, #65280	; 0xff00
   12620:	ldr	r0, [r2]
   12624:	and	r6, r6, #65280	; 0xff00
   12628:	orr	r6, r3, r6
   1262c:	orr	sl, r1, sl
   12630:	mov	r3, #50331648	; 0x3000000
   12634:	stm	r0, {r3, r6, sl}
   12638:	mov	r0, r7
   1263c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12640:	ldr	r0, [r5, #32]
   12644:	ldr	r1, [r5, #12]
   12648:	add	r9, r9, #1
   1264c:	lsr	fp, r0, #24
   12650:	lsl	ip, r0, #8
   12654:	lsr	r3, r1, #24
   12658:	lsl	lr, r1, #8
   1265c:	orr	fp, fp, r0, lsl #24
   12660:	orr	r3, r3, r1, lsl #24
   12664:	and	lr, lr, #16711680	; 0xff0000
   12668:	and	ip, ip, #16711680	; 0xff0000
   1266c:	lsr	r0, r0, #8
   12670:	lsr	r1, r1, #8
   12674:	orr	r3, r3, lr
   12678:	orr	ip, fp, ip
   1267c:	and	r0, r0, #65280	; 0xff00
   12680:	and	r1, r1, #65280	; 0xff00
   12684:	orr	fp, ip, r0
   12688:	orr	r1, r3, r1
   1268c:	add	r1, r1, fp
   12690:	add	r1, r5, r1
   12694:	mov	r3, r9
   12698:	mov	r0, r5
   1269c:	bl	12188 <__assert_fail@plt+0x16b8>
   126a0:	subs	sl, r0, #0
   126a4:	bne	12588 <__assert_fail@plt+0x1ab8>
   126a8:	ldr	r2, [r5, #32]
   126ac:	mov	sl, fp
   126b0:	mov	r1, r8
   126b4:	lsr	r3, r2, #24
   126b8:	lsl	ip, r2, #8
   126bc:	orr	r3, r3, r2, lsl #24
   126c0:	and	ip, ip, #16711680	; 0xff0000
   126c4:	lsr	r2, r2, #8
   126c8:	orr	r3, r3, ip
   126cc:	and	r2, r2, #65280	; 0xff00
   126d0:	orr	r3, r3, r2
   126d4:	add	r3, r3, r9
   126d8:	rev	r3, r3
   126dc:	add	r0, r4, fp
   126e0:	str	r3, [r5, #32]
   126e4:	mov	r2, r9
   126e8:	bl	10974 <memcpy@plt>
   126ec:	cmp	sl, #0
   126f0:	movlt	r7, sl
   126f4:	bge	12594 <__assert_fail@plt+0x1ac4>
   126f8:	b	12638 <__assert_fail@plt+0x1b68>
   126fc:	push	{r4, r5, r6, lr}
   12700:	mov	r5, r0
   12704:	bl	140cc <__assert_fail@plt+0x35fc>
   12708:	cmp	r0, #0
   1270c:	popne	{r4, r5, r6, pc}
   12710:	ldr	r3, [r5, #20]
   12714:	lsr	r4, r3, #24
   12718:	lsl	r2, r3, #8
   1271c:	orr	r4, r4, r3, lsl #24
   12720:	and	r2, r2, #16711680	; 0xff0000
   12724:	lsr	r3, r3, #8
   12728:	orr	r4, r4, r2
   1272c:	and	r3, r3, #65280	; 0xff00
   12730:	orr	r4, r4, r3
   12734:	cmp	r4, #16
   12738:	bls	12784 <__assert_fail@plt+0x1cb4>
   1273c:	ldr	r3, [r5, #36]	; 0x24
   12740:	mov	r1, #16
   12744:	lsr	r2, r3, #24
   12748:	lsl	r0, r3, #8
   1274c:	orr	r2, r2, r3, lsl #24
   12750:	and	r0, r0, #16711680	; 0xff0000
   12754:	lsr	r3, r3, #8
   12758:	orr	r2, r2, r0
   1275c:	and	r3, r3, #65280	; 0xff00
   12760:	orr	r2, r2, r3
   12764:	mov	r0, r5
   12768:	bl	12094 <__assert_fail@plt+0x15c4>
   1276c:	cmp	r0, #0
   12770:	bne	1278c <__assert_fail@plt+0x1cbc>
   12774:	cmp	r4, #17
   12778:	movne	r3, #285212672	; 0x11000000
   1277c:	strne	r3, [r5, #20]
   12780:	pop	{r4, r5, r6, pc}
   12784:	mvn	r0, #9
   12788:	pop	{r4, r5, r6, pc}
   1278c:	mvn	r0, #11
   12790:	pop	{r4, r5, r6, pc}
   12794:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12798:	mov	r8, r2
   1279c:	mov	r9, r3
   127a0:	mov	r5, r0
   127a4:	ldr	r7, [sp, #40]	; 0x28
   127a8:	ldr	r6, [sp, #44]	; 0x2c
   127ac:	bl	126fc <__assert_fail@plt+0x1c2c>
   127b0:	subs	sl, r0, #0
   127b4:	beq	127c0 <__assert_fail@plt+0x1cf0>
   127b8:	mov	r0, sl
   127bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127c0:	mov	r0, r5
   127c4:	bl	14ea4 <__assert_fail@plt+0x43d4>
   127c8:	ldr	r1, [r5, #16]
   127cc:	mov	r2, sl
   127d0:	mov	r3, #1
   127d4:	lsr	r4, r1, #24
   127d8:	lsl	ip, r1, #8
   127dc:	orr	r4, r4, r1, lsl #24
   127e0:	and	ip, ip, #16711680	; 0xff0000
   127e4:	lsr	r1, r1, #8
   127e8:	orr	r4, r4, ip
   127ec:	and	r1, r1, #65280	; 0xff00
   127f0:	orr	r1, r4, r1
   127f4:	add	r4, r1, r0, lsl #4
   127f8:	add	fp, r5, r4
   127fc:	mov	r1, fp
   12800:	mov	r0, r5
   12804:	bl	12274 <__assert_fail@plt+0x17a4>
   12808:	subs	sl, r0, #0
   1280c:	bne	127b8 <__assert_fail@plt+0x1ce8>
   12810:	rev	r7, r7
   12814:	rev	r6, r6
   12818:	rev	r9, r9
   1281c:	rev	r8, r8
   12820:	str	r9, [r5, r4]
   12824:	mov	r0, sl
   12828:	str	r8, [fp, #4]
   1282c:	strd	r6, [fp, #8]
   12830:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12834:	push	{r4, r5, r6, r7, r8, lr}
   12838:	mov	r5, r0
   1283c:	mov	r6, r1
   12840:	ldr	r4, [r0, #16]
   12844:	bl	126fc <__assert_fail@plt+0x1c2c>
   12848:	subs	r7, r0, #0
   1284c:	beq	12858 <__assert_fail@plt+0x1d88>
   12850:	mov	r0, r7
   12854:	pop	{r4, r5, r6, r7, r8, pc}
   12858:	mov	r0, r5
   1285c:	bl	14ea4 <__assert_fail@plt+0x43d4>
   12860:	cmp	r0, r6
   12864:	ble	128a4 <__assert_fail@plt+0x1dd4>
   12868:	lsr	r1, r4, #24
   1286c:	lsl	r3, r4, #8
   12870:	orr	r1, r1, r4, lsl #24
   12874:	and	r3, r3, #16711680	; 0xff0000
   12878:	lsr	r4, r4, #8
   1287c:	orr	r1, r1, r3
   12880:	and	r4, r4, #65280	; 0xff00
   12884:	orr	r4, r1, r4
   12888:	add	r1, r4, r6, lsl #4
   1288c:	mov	r3, r7
   12890:	add	r1, r5, r1
   12894:	mov	r0, r5
   12898:	mov	r2, #1
   1289c:	pop	{r4, r5, r6, r7, r8, lr}
   128a0:	b	12274 <__assert_fail@plt+0x17a4>
   128a4:	mvn	r7, #0
   128a8:	b	12850 <__assert_fail@plt+0x1d80>
   128ac:	ldr	r3, [pc, #180]	; 12968 <__assert_fail@plt+0x1e98>
   128b0:	ldr	ip, [pc, #180]	; 1296c <__assert_fail@plt+0x1e9c>
   128b4:	add	r3, pc, r3
   128b8:	push	{r4, r5, r6, r7, r8, r9, lr}
   128bc:	sub	sp, sp, #12
   128c0:	ldr	r4, [r3, ip]
   128c4:	mov	r7, r1
   128c8:	mov	r6, r2
   128cc:	ldr	r3, [r4]
   128d0:	mov	r8, r0
   128d4:	str	r3, [sp, #4]
   128d8:	bl	126fc <__assert_fail@plt+0x1c2c>
   128dc:	subs	r5, r0, #0
   128e0:	beq	12900 <__assert_fail@plt+0x1e30>
   128e4:	ldr	r2, [sp, #4]
   128e8:	ldr	r3, [r4]
   128ec:	mov	r0, r5
   128f0:	cmp	r2, r3
   128f4:	bne	12964 <__assert_fail@plt+0x1e94>
   128f8:	add	sp, sp, #12
   128fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12900:	mov	r1, r7
   12904:	mov	r2, sp
   12908:	mov	r0, r8
   1290c:	bl	14f78 <__assert_fail@plt+0x44a8>
   12910:	subs	r7, r0, #0
   12914:	ldreq	r5, [sp]
   12918:	beq	128e4 <__assert_fail@plt+0x1e14>
   1291c:	mov	r0, r6
   12920:	bl	10a28 <strlen@plt>
   12924:	ldr	r2, [sp]
   12928:	mov	r1, r7
   1292c:	add	r2, r2, #4
   12930:	bic	r2, r2, #3
   12934:	add	r3, r0, #4
   12938:	mov	r9, r0
   1293c:	bic	r3, r3, #3
   12940:	mov	r0, r8
   12944:	bl	12304 <__assert_fail@plt+0x1834>
   12948:	subs	r5, r0, #0
   1294c:	bne	128e4 <__assert_fail@plt+0x1e14>
   12950:	add	r2, r9, #1
   12954:	mov	r1, r6
   12958:	mov	r0, r7
   1295c:	bl	10974 <memcpy@plt>
   12960:	b	128e4 <__assert_fail@plt+0x1e14>
   12964:	bl	1098c <__stack_chk_fail@plt>
   12968:	andeq	r4, r1, r8, lsl #13
   1296c:	andeq	r0, r0, r0, lsr #1
   12970:	ldr	ip, [pc, #288]	; 12a98 <__assert_fail@plt+0x1fc8>
   12974:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12978:	add	ip, pc, ip
   1297c:	ldr	lr, [pc, #280]	; 12a9c <__assert_fail@plt+0x1fcc>
   12980:	sub	sp, sp, #24
   12984:	mov	r4, r3
   12988:	ldr	r5, [ip, lr]
   1298c:	mov	r6, r1
   12990:	mov	r7, r2
   12994:	ldr	r3, [r5]
   12998:	mov	r2, ip
   1299c:	mov	r9, r0
   129a0:	ldr	sl, [sp, #56]	; 0x38
   129a4:	str	r3, [sp, #20]
   129a8:	bl	126fc <__assert_fail@plt+0x1c2c>
   129ac:	subs	r8, r0, #0
   129b0:	beq	129d0 <__assert_fail@plt+0x1f00>
   129b4:	ldr	r2, [sp, #20]
   129b8:	ldr	r3, [r5]
   129bc:	mov	r0, r8
   129c0:	cmp	r2, r3
   129c4:	bne	12a94 <__assert_fail@plt+0x1fc4>
   129c8:	add	sp, sp, #24
   129cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   129d0:	add	r3, sp, #16
   129d4:	mov	r2, r7
   129d8:	mov	r1, r6
   129dc:	mov	r0, r9
   129e0:	bl	153b8 <__assert_fail@plt+0x48e8>
   129e4:	cmp	r0, #0
   129e8:	str	r0, [sp, #12]
   129ec:	beq	12a4c <__assert_fail@plt+0x1f7c>
   129f0:	ldr	r2, [sp, #16]
   129f4:	add	r3, r4, #3
   129f8:	add	r2, r2, #3
   129fc:	add	r1, r0, #12
   12a00:	bic	r2, r2, #3
   12a04:	bic	r3, r3, #3
   12a08:	mov	r0, r9
   12a0c:	bl	12304 <__assert_fail@plt+0x1834>
   12a10:	cmp	r0, #0
   12a14:	bne	12a84 <__assert_fail@plt+0x1fb4>
   12a18:	lsr	r3, r4, #24
   12a1c:	lsl	r1, r4, #8
   12a20:	orr	r3, r3, r4, lsl #24
   12a24:	and	r1, r1, #16711680	; 0xff0000
   12a28:	lsr	r4, r4, #8
   12a2c:	ldr	r2, [sp, #12]
   12a30:	orr	r3, r3, r1
   12a34:	and	r4, r4, #65280	; 0xff00
   12a38:	orr	r4, r3, r4
   12a3c:	str	r4, [r2, #4]
   12a40:	add	r2, r2, #12
   12a44:	str	r2, [sl]
   12a48:	b	129b4 <__assert_fail@plt+0x1ee4>
   12a4c:	ldr	r0, [sp, #16]
   12a50:	cmn	r0, #1
   12a54:	bne	12a74 <__assert_fail@plt+0x1fa4>
   12a58:	add	ip, sp, #12
   12a5c:	mov	r3, r4
   12a60:	mov	r2, r7
   12a64:	mov	r1, r6
   12a68:	mov	r0, r9
   12a6c:	str	ip, [sp]
   12a70:	bl	124fc <__assert_fail@plt+0x1a2c>
   12a74:	cmp	r0, #0
   12a78:	bne	12a8c <__assert_fail@plt+0x1fbc>
   12a7c:	ldr	r2, [sp, #12]
   12a80:	b	12a40 <__assert_fail@plt+0x1f70>
   12a84:	cmn	r0, #1
   12a88:	beq	12a58 <__assert_fail@plt+0x1f88>
   12a8c:	mov	r8, r0
   12a90:	b	129b4 <__assert_fail@plt+0x1ee4>
   12a94:	bl	1098c <__stack_chk_fail@plt>
   12a98:	andeq	r4, r1, r4, asr #11
   12a9c:	andeq	r0, r0, r0, lsr #1
   12aa0:	ldr	ip, [pc, #116]	; 12b1c <__assert_fail@plt+0x204c>
   12aa4:	push	{r4, r5, r6, lr}
   12aa8:	add	ip, pc, ip
   12aac:	ldr	lr, [pc, #108]	; 12b20 <__assert_fail@plt+0x2050>
   12ab0:	sub	sp, sp, #16
   12ab4:	mov	r6, r3
   12ab8:	ldr	r4, [ip, lr]
   12abc:	add	r3, sp, #8
   12ac0:	str	r3, [sp]
   12ac4:	ldr	lr, [r4]
   12ac8:	ldr	r3, [sp, #32]
   12acc:	str	lr, [sp, #12]
   12ad0:	bl	12970 <__assert_fail@plt+0x1ea0>
   12ad4:	subs	r5, r0, #0
   12ad8:	bne	12ae8 <__assert_fail@plt+0x2018>
   12adc:	ldr	r3, [sp, #32]
   12ae0:	cmp	r3, #0
   12ae4:	bne	12b04 <__assert_fail@plt+0x2034>
   12ae8:	ldr	r2, [sp, #12]
   12aec:	ldr	r3, [r4]
   12af0:	mov	r0, r5
   12af4:	cmp	r2, r3
   12af8:	bne	12b18 <__assert_fail@plt+0x2048>
   12afc:	add	sp, sp, #16
   12b00:	pop	{r4, r5, r6, pc}
   12b04:	mov	r1, r6
   12b08:	mov	r2, r3
   12b0c:	ldr	r0, [sp, #8]
   12b10:	bl	10974 <memcpy@plt>
   12b14:	b	12ae8 <__assert_fail@plt+0x2018>
   12b18:	bl	1098c <__stack_chk_fail@plt>
   12b1c:	muleq	r1, r4, r4
   12b20:	andeq	r0, r0, r0, lsr #1
   12b24:	ldr	ip, [pc, #296]	; 12c54 <__assert_fail@plt+0x2184>
   12b28:	push	{r4, r5, r6, r7, r8, r9, lr}
   12b2c:	add	ip, pc, ip
   12b30:	ldr	lr, [pc, #288]	; 12c58 <__assert_fail@plt+0x2188>
   12b34:	sub	sp, sp, #28
   12b38:	mov	r8, r3
   12b3c:	ldr	r4, [ip, lr]
   12b40:	mov	r6, r1
   12b44:	mov	r7, r2
   12b48:	ldr	r3, [r4]
   12b4c:	mov	r2, ip
   12b50:	mov	r9, r0
   12b54:	str	r3, [sp, #20]
   12b58:	bl	126fc <__assert_fail@plt+0x1c2c>
   12b5c:	subs	r5, r0, #0
   12b60:	beq	12b80 <__assert_fail@plt+0x20b0>
   12b64:	ldr	r2, [sp, #20]
   12b68:	ldr	r3, [r4]
   12b6c:	mov	r0, r5
   12b70:	cmp	r2, r3
   12b74:	bne	12c50 <__assert_fail@plt+0x2180>
   12b78:	add	sp, sp, #28
   12b7c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12b80:	add	r3, sp, #16
   12b84:	mov	r2, r7
   12b88:	mov	r1, r6
   12b8c:	mov	r0, r9
   12b90:	bl	153b8 <__assert_fail@plt+0x48e8>
   12b94:	cmp	r0, #0
   12b98:	str	r0, [sp, #12]
   12b9c:	beq	12c14 <__assert_fail@plt+0x2144>
   12ba0:	ldr	r2, [sp, #16]
   12ba4:	ldr	r3, [sp, #56]	; 0x38
   12ba8:	add	r1, r0, #12
   12bac:	add	r6, r2, r3
   12bb0:	add	r3, r6, #3
   12bb4:	add	r2, r2, #3
   12bb8:	mov	r0, r9
   12bbc:	bic	r2, r2, #3
   12bc0:	bic	r3, r3, #3
   12bc4:	bl	12304 <__assert_fail@plt+0x1834>
   12bc8:	subs	r5, r0, #0
   12bcc:	bne	12b64 <__assert_fail@plt+0x2094>
   12bd0:	lsr	r3, r6, #24
   12bd4:	lsl	r2, r6, #8
   12bd8:	ldr	ip, [sp, #12]
   12bdc:	orr	r3, r3, r6, lsl #24
   12be0:	and	r2, r2, #16711680	; 0xff0000
   12be4:	lsr	r6, r6, #8
   12be8:	orr	r3, r3, r2
   12bec:	and	r6, r6, #65280	; 0xff00
   12bf0:	ldr	r2, [sp, #16]
   12bf4:	orr	r6, r3, r6
   12bf8:	add	r0, ip, #12
   12bfc:	mov	r1, r8
   12c00:	str	r6, [ip, #4]
   12c04:	add	r0, r0, r2
   12c08:	ldr	r2, [sp, #56]	; 0x38
   12c0c:	bl	10974 <memcpy@plt>
   12c10:	b	12b64 <__assert_fail@plt+0x2094>
   12c14:	add	r3, sp, #12
   12c18:	str	r3, [sp]
   12c1c:	mov	r2, r7
   12c20:	mov	r1, r6
   12c24:	mov	r0, r9
   12c28:	ldr	r3, [sp, #56]	; 0x38
   12c2c:	bl	124fc <__assert_fail@plt+0x1a2c>
   12c30:	subs	r5, r0, #0
   12c34:	bne	12b64 <__assert_fail@plt+0x2094>
   12c38:	ldr	r0, [sp, #12]
   12c3c:	mov	r1, r8
   12c40:	ldr	r2, [sp, #56]	; 0x38
   12c44:	add	r0, r0, #12
   12c48:	bl	10974 <memcpy@plt>
   12c4c:	b	12b64 <__assert_fail@plt+0x2094>
   12c50:	bl	1098c <__stack_chk_fail@plt>
   12c54:	andeq	r4, r1, r0, lsl r4
   12c58:	andeq	r0, r0, r0, lsr #1
   12c5c:	ldr	r3, [pc, #148]	; 12cf8 <__assert_fail@plt+0x2228>
   12c60:	ldr	ip, [pc, #148]	; 12cfc <__assert_fail@plt+0x222c>
   12c64:	add	r3, pc, r3
   12c68:	push	{r4, r5, r6, r7, r8, lr}
   12c6c:	sub	sp, sp, #8
   12c70:	ldr	r4, [r3, ip]
   12c74:	mov	r7, r1
   12c78:	mov	r8, r2
   12c7c:	ldr	r3, [r4]
   12c80:	mov	r6, r0
   12c84:	str	r3, [sp, #4]
   12c88:	bl	126fc <__assert_fail@plt+0x1c2c>
   12c8c:	subs	r5, r0, #0
   12c90:	beq	12cb0 <__assert_fail@plt+0x21e0>
   12c94:	ldr	r2, [sp, #4]
   12c98:	ldr	r3, [r4]
   12c9c:	mov	r0, r5
   12ca0:	cmp	r2, r3
   12ca4:	bne	12cf4 <__assert_fail@plt+0x2224>
   12ca8:	add	sp, sp, #8
   12cac:	pop	{r4, r5, r6, r7, r8, pc}
   12cb0:	mov	r1, r7
   12cb4:	mov	r2, r8
   12cb8:	mov	r3, sp
   12cbc:	mov	r0, r6
   12cc0:	bl	153b8 <__assert_fail@plt+0x48e8>
   12cc4:	subs	r1, r0, #0
   12cc8:	ldreq	r5, [sp]
   12ccc:	beq	12c94 <__assert_fail@plt+0x21c4>
   12cd0:	ldr	r2, [sp]
   12cd4:	mov	r3, r5
   12cd8:	add	r2, r2, #3
   12cdc:	bic	r2, r2, #3
   12ce0:	mov	r0, r6
   12ce4:	add	r2, r2, #12
   12ce8:	bl	12304 <__assert_fail@plt+0x1834>
   12cec:	mov	r5, r0
   12cf0:	b	12c94 <__assert_fail@plt+0x21c4>
   12cf4:	bl	1098c <__stack_chk_fail@plt>
   12cf8:	ldrdeq	r4, [r1], -r8
   12cfc:	andeq	r0, r0, r0, lsr #1
   12d00:	ldr	ip, [pc, #320]	; 12e48 <__assert_fail@plt+0x2378>
   12d04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d08:	add	ip, pc, ip
   12d0c:	ldr	lr, [pc, #312]	; 12e4c <__assert_fail@plt+0x237c>
   12d10:	sub	sp, sp, #12
   12d14:	mov	r8, r3
   12d18:	ldr	r6, [ip, lr]
   12d1c:	mov	r5, r1
   12d20:	mov	r7, r2
   12d24:	ldr	r3, [r6]
   12d28:	mov	r2, ip
   12d2c:	mov	r4, r0
   12d30:	str	r3, [sp, #4]
   12d34:	bl	126fc <__assert_fail@plt+0x1c2c>
   12d38:	cmp	r0, #0
   12d3c:	beq	12d58 <__assert_fail@plt+0x2288>
   12d40:	ldr	r2, [sp, #4]
   12d44:	ldr	r3, [r6]
   12d48:	cmp	r2, r3
   12d4c:	bne	12e44 <__assert_fail@plt+0x2374>
   12d50:	add	sp, sp, #12
   12d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d58:	mov	r3, r8
   12d5c:	mov	r2, r7
   12d60:	mov	r1, r5
   12d64:	mov	r0, r4
   12d68:	bl	15058 <__assert_fail@plt+0x4588>
   12d6c:	cmp	r0, #0
   12d70:	bge	12e3c <__assert_fail@plt+0x236c>
   12d74:	cmn	r0, #1
   12d78:	bne	12d40 <__assert_fail@plt+0x2270>
   12d7c:	mov	r9, sp
   12d80:	mov	r1, r5
   12d84:	mov	r2, r9
   12d88:	mov	r0, r4
   12d8c:	bl	14538 <__assert_fail@plt+0x3a68>
   12d90:	ldr	r5, [sp]
   12d94:	mov	r2, r9
   12d98:	mov	r1, r5
   12d9c:	mov	r0, r4
   12da0:	bl	14538 <__assert_fail@plt+0x3a68>
   12da4:	sub	r0, r0, #3
   12da8:	cmp	r0, #1
   12dac:	bls	12d90 <__assert_fail@plt+0x22c0>
   12db0:	ldr	r3, [r4, #8]
   12db4:	add	sl, r8, #4
   12db8:	bic	sl, sl, #3
   12dbc:	lsr	r9, r3, #24
   12dc0:	lsl	r2, r3, #8
   12dc4:	orr	r9, r9, r3, lsl #24
   12dc8:	and	r2, r2, #16711680	; 0xff0000
   12dcc:	lsr	r3, r3, #8
   12dd0:	orr	r9, r9, r2
   12dd4:	and	r3, r3, #65280	; 0xff00
   12dd8:	orr	r3, r9, r3
   12ddc:	add	r9, r3, r5
   12de0:	add	fp, r4, r9
   12de4:	mov	r1, fp
   12de8:	add	r3, sl, #8
   12dec:	mov	r2, #0
   12df0:	mov	r0, r4
   12df4:	bl	12304 <__assert_fail@plt+0x1834>
   12df8:	cmp	r0, #0
   12dfc:	bne	12d40 <__assert_fail@plt+0x2270>
   12e00:	add	r3, fp, #4
   12e04:	mov	r2, #16777216	; 0x1000000
   12e08:	mov	r1, r0
   12e0c:	str	r2, [r4, r9]
   12e10:	mov	r0, r3
   12e14:	mov	r2, sl
   12e18:	bl	10a4c <memset@plt>
   12e1c:	add	sl, fp, sl
   12e20:	mov	r2, r8
   12e24:	mov	r1, r7
   12e28:	bl	10974 <memcpy@plt>
   12e2c:	mov	r3, #33554432	; 0x2000000
   12e30:	mov	r0, r5
   12e34:	str	r3, [sl, #4]
   12e38:	b	12d40 <__assert_fail@plt+0x2270>
   12e3c:	mvn	r0, #1
   12e40:	b	12d40 <__assert_fail@plt+0x2270>
   12e44:	bl	1098c <__stack_chk_fail@plt>
   12e48:	andeq	r4, r1, r4, lsr r2
   12e4c:	andeq	r0, r0, r0, lsr #1
   12e50:	push	{r4, r5, r6, lr}
   12e54:	mov	r5, r0
   12e58:	mov	r0, r2
   12e5c:	mov	r4, r2
   12e60:	mov	r6, r1
   12e64:	bl	10a28 <strlen@plt>
   12e68:	mov	r2, r4
   12e6c:	mov	r1, r6
   12e70:	mov	r3, r0
   12e74:	mov	r0, r5
   12e78:	pop	{r4, r5, r6, lr}
   12e7c:	b	12d00 <__assert_fail@plt+0x2230>
   12e80:	push	{r4, r5, r6, lr}
   12e84:	mov	r5, r1
   12e88:	mov	r4, r0
   12e8c:	bl	126fc <__assert_fail@plt+0x1c2c>
   12e90:	cmp	r0, #0
   12e94:	popne	{r4, r5, r6, pc}
   12e98:	mov	r1, r5
   12e9c:	mov	r0, r4
   12ea0:	bl	16514 <__assert_fail@plt+0x5a44>
   12ea4:	cmp	r0, #0
   12ea8:	poplt	{r4, r5, r6, pc}
   12eac:	ldr	r3, [r4, #8]
   12eb0:	sub	r2, r0, r5
   12eb4:	mov	r0, r4
   12eb8:	lsr	r1, r3, #24
   12ebc:	lsl	ip, r3, #8
   12ec0:	orr	r1, r1, r3, lsl #24
   12ec4:	and	ip, ip, #16711680	; 0xff0000
   12ec8:	lsr	r3, r3, #8
   12ecc:	and	r3, r3, #65280	; 0xff00
   12ed0:	orr	r1, r1, ip
   12ed4:	orr	r1, r1, r3
   12ed8:	add	r1, r1, r5
   12edc:	add	r1, r4, r1
   12ee0:	mov	r3, #0
   12ee4:	pop	{r4, r5, r6, lr}
   12ee8:	b	12304 <__assert_fail@plt+0x1834>
   12eec:	ldr	r3, [pc, #672]	; 13194 <__assert_fail@plt+0x26c4>
   12ef0:	ldr	ip, [pc, #672]	; 13198 <__assert_fail@plt+0x26c8>
   12ef4:	add	r3, pc, r3
   12ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12efc:	sub	sp, sp, #20
   12f00:	ldr	r9, [r3, ip]
   12f04:	mov	r4, r0
   12f08:	mov	r7, r1
   12f0c:	ldr	r3, [r9]
   12f10:	mov	r6, r2
   12f14:	ldr	r8, [r0, #4]
   12f18:	str	r3, [sp, #12]
   12f1c:	bl	140cc <__assert_fail@plt+0x35fc>
   12f20:	subs	sl, r0, #0
   12f24:	beq	12f44 <__assert_fail@plt+0x2474>
   12f28:	ldr	r2, [sp, #12]
   12f2c:	ldr	r3, [r9]
   12f30:	mov	r0, sl
   12f34:	cmp	r2, r3
   12f38:	bne	13190 <__assert_fail@plt+0x26c0>
   12f3c:	add	sp, sp, #20
   12f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f44:	mov	r0, r4
   12f48:	bl	14ea4 <__assert_fail@plt+0x43d4>
   12f4c:	ldr	r3, [r4, #20]
   12f50:	lsr	r2, r3, #24
   12f54:	lsl	r1, r3, #8
   12f58:	orr	r2, r2, r3, lsl #24
   12f5c:	and	r1, r1, #16711680	; 0xff0000
   12f60:	lsr	r3, r3, #8
   12f64:	orr	r2, r2, r1
   12f68:	and	r3, r3, #65280	; 0xff00
   12f6c:	orr	r3, r2, r3
   12f70:	cmp	r3, #16
   12f74:	add	r0, r0, #1
   12f78:	lsl	fp, r0, #4
   12f7c:	bls	130cc <__assert_fail@plt+0x25fc>
   12f80:	ldr	r2, [r4, #36]	; 0x24
   12f84:	lsr	r3, r2, #24
   12f88:	lsl	r1, r2, #8
   12f8c:	orr	r3, r3, r2, lsl #24
   12f90:	and	r1, r1, #16711680	; 0xff0000
   12f94:	lsr	r2, r2, #8
   12f98:	orr	r3, r3, r1
   12f9c:	and	r2, r2, #65280	; 0xff00
   12fa0:	orr	r3, r3, r2
   12fa4:	str	r3, [sp, #8]
   12fa8:	mov	r2, r3
   12fac:	mov	r1, fp
   12fb0:	mov	r0, r4
   12fb4:	str	r3, [sp, #4]
   12fb8:	bl	12094 <__assert_fail@plt+0x15c4>
   12fbc:	ldr	r3, [sp, #4]
   12fc0:	cmp	r0, #0
   12fc4:	beq	13120 <__assert_fail@plt+0x2650>
   12fc8:	ldr	r2, [r4, #32]
   12fcc:	lsr	r5, r2, #24
   12fd0:	lsl	r1, r2, #8
   12fd4:	orr	r5, r5, r2, lsl #24
   12fd8:	and	r1, r1, #16711680	; 0xff0000
   12fdc:	lsr	r2, r2, #8
   12fe0:	orr	r5, r5, r1
   12fe4:	and	r2, r2, #65280	; 0xff00
   12fe8:	orr	r5, r5, r2
   12fec:	add	r5, r5, #40	; 0x28
   12ff0:	add	r5, r5, fp
   12ff4:	add	r5, r5, r3
   12ff8:	cmp	r6, r5
   12ffc:	blt	13118 <__assert_fail@plt+0x2648>
   13000:	lsr	r2, r8, #24
   13004:	lsl	r1, r8, #8
   13008:	orr	r2, r2, r8, lsl #24
   1300c:	and	r1, r1, #16711680	; 0xff0000
   13010:	lsr	r8, r8, #8
   13014:	orr	r2, r2, r1
   13018:	and	r8, r8, #65280	; 0xff00
   1301c:	orr	r8, r2, r8
   13020:	add	r1, r7, r5
   13024:	cmp	r4, r1
   13028:	add	r8, r4, r8
   1302c:	movcs	r2, #0
   13030:	movcc	r2, #1
   13034:	cmp	r8, r7
   13038:	movls	r2, #0
   1303c:	cmp	r2, #0
   13040:	moveq	r8, r7
   13044:	bne	13108 <__assert_fail@plt+0x2638>
   13048:	mov	r2, fp
   1304c:	mov	r1, r8
   13050:	mov	r0, r4
   13054:	bl	12388 <__assert_fail@plt+0x18b8>
   13058:	mov	r2, r5
   1305c:	mov	r1, r8
   13060:	mov	r0, r7
   13064:	bl	10950 <memmove@plt>
   13068:	lsr	r3, r6, #24
   1306c:	lsl	r2, r6, #8
   13070:	orr	r3, r3, r6, lsl #24
   13074:	and	r2, r2, #16711680	; 0xff0000
   13078:	lsr	r6, r6, #8
   1307c:	orr	r3, r3, r2
   13080:	ldr	r1, [pc, #276]	; 1319c <__assert_fail@plt+0x26cc>
   13084:	and	r6, r6, #65280	; 0xff00
   13088:	orr	r6, r3, r6
   1308c:	mov	r2, #285212672	; 0x11000000
   13090:	mov	r3, #268435456	; 0x10000000
   13094:	stm	r7, {r1, r6}
   13098:	strd	r2, [r7, #20]
   1309c:	ldr	r2, [r4, #28]
   130a0:	lsr	r3, r2, #24
   130a4:	lsl	r1, r2, #8
   130a8:	orr	r3, r3, r2, lsl #24
   130ac:	and	r1, r1, #16711680	; 0xff0000
   130b0:	lsr	r2, r2, #8
   130b4:	orr	r3, r3, r1
   130b8:	and	r2, r2, #65280	; 0xff00
   130bc:	orr	r3, r3, r2
   130c0:	rev	r3, r3
   130c4:	str	r3, [r7, #28]
   130c8:	b	12f28 <__assert_fail@plt+0x2458>
   130cc:	mov	r1, sl
   130d0:	add	r5, sp, #8
   130d4:	str	sl, [sp, #8]
   130d8:	b	130e0 <__assert_fail@plt+0x2610>
   130dc:	ldr	r1, [sp, #8]
   130e0:	mov	r2, r5
   130e4:	mov	r0, r4
   130e8:	bl	14538 <__assert_fail@plt+0x3a68>
   130ec:	cmp	r0, #9
   130f0:	bne	130dc <__assert_fail@plt+0x260c>
   130f4:	ldr	r3, [sp, #8]
   130f8:	cmp	r3, #0
   130fc:	movlt	sl, r3
   13100:	bge	12fa8 <__assert_fail@plt+0x24d8>
   13104:	b	12f28 <__assert_fail@plt+0x2458>
   13108:	add	r2, r8, r5
   1310c:	add	r1, r7, r6
   13110:	cmp	r2, r1
   13114:	bls	13048 <__assert_fail@plt+0x2578>
   13118:	mvn	sl, #2
   1311c:	b	12f28 <__assert_fail@plt+0x2458>
   13120:	mov	r0, r4
   13124:	mov	r2, r6
   13128:	mov	r1, r7
   1312c:	bl	14990 <__assert_fail@plt+0x3ec0>
   13130:	subs	sl, r0, #0
   13134:	bne	12f28 <__assert_fail@plt+0x2458>
   13138:	ldr	r3, [sp, #8]
   1313c:	lsr	r1, r6, #24
   13140:	orr	r1, r1, r6, lsl #24
   13144:	lsr	r2, r3, #24
   13148:	lsl	r0, r3, #8
   1314c:	orr	r2, r2, r3, lsl #24
   13150:	and	r0, r0, #16711680	; 0xff0000
   13154:	orr	r2, r2, r0
   13158:	lsl	r0, r6, #8
   1315c:	lsr	r3, r3, #8
   13160:	and	r0, r0, #16711680	; 0xff0000
   13164:	lsr	r6, r6, #8
   13168:	orr	r1, r1, r0
   1316c:	and	r3, r3, #65280	; 0xff00
   13170:	and	r6, r6, #65280	; 0xff00
   13174:	orr	r3, r2, r3
   13178:	orr	r2, r1, r6
   1317c:	mov	r1, #285212672	; 0x11000000
   13180:	str	r3, [r7, #36]	; 0x24
   13184:	str	r2, [r7, #4]
   13188:	str	r1, [r7, #20]
   1318c:	b	12f28 <__assert_fail@plt+0x2458>
   13190:	bl	1098c <__stack_chk_fail@plt>
   13194:	andeq	r4, r1, r8, asr #32
   13198:	andeq	r0, r0, r0, lsr #1
   1319c:	ldcl	13, cr0, [lr, #832]!	; 0x340
   131a0:	push	{r4, r5, r6, lr}
   131a4:	mov	r4, r0
   131a8:	bl	126fc <__assert_fail@plt+0x1c2c>
   131ac:	subs	r5, r0, #0
   131b0:	bne	13248 <__assert_fail@plt+0x2778>
   131b4:	mov	r0, r4
   131b8:	bl	14ea4 <__assert_fail@plt+0x43d4>
   131bc:	ldr	r2, [r4, #36]	; 0x24
   131c0:	mov	r1, r4
   131c4:	lsr	r3, r2, #24
   131c8:	lsl	ip, r2, #8
   131cc:	and	ip, ip, #16711680	; 0xff0000
   131d0:	orr	r3, r3, r2, lsl #24
   131d4:	lsr	r2, r2, #8
   131d8:	orr	r3, r3, ip
   131dc:	and	r2, r2, #65280	; 0xff00
   131e0:	orr	r3, r3, r2
   131e4:	add	r2, r0, #1
   131e8:	mov	r0, r4
   131ec:	lsl	r2, r2, #4
   131f0:	bl	12388 <__assert_fail@plt+0x18b8>
   131f4:	ldr	r1, [r4, #12]
   131f8:	ldr	r2, [r4, #32]
   131fc:	lsr	r3, r1, #24
   13200:	lsl	ip, r1, #8
   13204:	orr	r3, r3, r1, lsl #24
   13208:	and	ip, ip, #16711680	; 0xff0000
   1320c:	lsr	r0, r2, #24
   13210:	orr	r3, r3, ip
   13214:	lsl	ip, r2, #8
   13218:	orr	r0, r0, r2, lsl #24
   1321c:	lsr	r1, r1, #8
   13220:	and	ip, ip, #16711680	; 0xff0000
   13224:	lsr	r2, r2, #8
   13228:	and	r1, r1, #65280	; 0xff00
   1322c:	orr	r0, r0, ip
   13230:	and	r2, r2, #65280	; 0xff00
   13234:	orr	r3, r3, r1
   13238:	orr	r2, r0, r2
   1323c:	add	r3, r3, r2
   13240:	rev	r3, r3
   13244:	str	r3, [r4, #4]
   13248:	mov	r0, r5
   1324c:	pop	{r4, r5, r6, pc}
   13250:	ldr	ip, [pc, #216]	; 13330 <__assert_fail@plt+0x2860>
   13254:	push	{r4, r5, r6, r7, r8, lr}
   13258:	add	ip, pc, ip
   1325c:	ldr	lr, [pc, #208]	; 13334 <__assert_fail@plt+0x2864>
   13260:	sub	sp, sp, #24
   13264:	mov	r4, r3
   13268:	ldr	r5, [ip, lr]
   1326c:	add	r3, sp, #12
   13270:	mov	r6, r0
   13274:	ldr	ip, [r5]
   13278:	mov	r7, r1
   1327c:	mov	r8, r2
   13280:	str	ip, [sp, #20]
   13284:	bl	15604 <__assert_fail@plt+0x4b34>
   13288:	cmp	r0, #0
   1328c:	ldreq	r0, [sp, #12]
   13290:	beq	13304 <__assert_fail@plt+0x2834>
   13294:	ldr	r1, [sp, #12]
   13298:	cmp	r1, #4
   1329c:	bne	13324 <__assert_fail@plt+0x2854>
   132a0:	ldr	r2, [r0]
   132a4:	lsr	r3, r2, #24
   132a8:	lsl	r0, r2, #8
   132ac:	and	r0, r0, #16711680	; 0xff0000
   132b0:	orr	r3, r3, r2, lsl #24
   132b4:	lsr	r2, r2, #8
   132b8:	and	r2, r2, #65280	; 0xff00
   132bc:	orr	r3, r3, r0
   132c0:	orr	r3, r3, r2
   132c4:	adds	r3, r4, r3
   132c8:	movcs	r2, #1
   132cc:	movcc	r2, #0
   132d0:	cmn	r3, #1
   132d4:	movne	r0, #0
   132d8:	moveq	r0, #1
   132dc:	orrs	r2, r0, r2
   132e0:	bne	1331c <__assert_fail@plt+0x284c>
   132e4:	rev	r4, r3
   132e8:	str	r1, [sp]
   132ec:	mov	r2, r8
   132f0:	mov	r1, r7
   132f4:	mov	r0, r6
   132f8:	add	r3, sp, #16
   132fc:	str	r4, [sp, #16]
   13300:	bl	163e8 <__assert_fail@plt+0x5918>
   13304:	ldr	r2, [sp, #20]
   13308:	ldr	r3, [r5]
   1330c:	cmp	r2, r3
   13310:	bne	1332c <__assert_fail@plt+0x285c>
   13314:	add	sp, sp, #24
   13318:	pop	{r4, r5, r6, r7, r8, pc}
   1331c:	mvn	r0, #16
   13320:	b	13304 <__assert_fail@plt+0x2834>
   13324:	mvn	r0, #5
   13328:	b	13304 <__assert_fail@plt+0x2834>
   1332c:	bl	1098c <__stack_chk_fail@plt>
   13330:	andeq	r3, r1, r4, ror #25
   13334:	andeq	r0, r0, r0, lsr #1
   13338:	push	{r4, r5, r6, lr}
   1333c:	mov	r3, r2
   13340:	mov	r4, r2
   13344:	ldr	r2, [pc, #148]	; 133e0 <__assert_fail@plt+0x2910>
   13348:	mov	r5, r0
   1334c:	add	r2, pc, r2
   13350:	mov	r6, r1
   13354:	bl	13250 <__assert_fail@plt+0x2780>
   13358:	add	r2, r0, #1
   1335c:	cmp	r2, #1
   13360:	mov	r3, r0
   13364:	bls	13370 <__assert_fail@plt+0x28a0>
   13368:	mov	r0, r3
   1336c:	pop	{r4, r5, r6, pc}
   13370:	ldr	r2, [pc, #108]	; 133e4 <__assert_fail@plt+0x2914>
   13374:	mov	r3, r4
   13378:	add	r2, pc, r2
   1337c:	mov	r1, r6
   13380:	mov	r0, r5
   13384:	bl	13250 <__assert_fail@plt+0x2780>
   13388:	add	r2, r0, #1
   1338c:	cmp	r2, #1
   13390:	mov	r3, r0
   13394:	bhi	13368 <__assert_fail@plt+0x2898>
   13398:	mov	r1, r6
   1339c:	mov	r0, r5
   133a0:	bl	14834 <__assert_fail@plt+0x3d64>
   133a4:	subs	r6, r0, #0
   133a8:	blt	133d8 <__assert_fail@plt+0x2908>
   133ac:	mov	r1, r6
   133b0:	mov	r2, r4
   133b4:	mov	r0, r5
   133b8:	bl	13338 <__assert_fail@plt+0x2868>
   133bc:	mov	r1, r6
   133c0:	subs	r3, r0, #0
   133c4:	mov	r0, r5
   133c8:	bne	13368 <__assert_fail@plt+0x2898>
   133cc:	bl	148a4 <__assert_fail@plt+0x3dd4>
   133d0:	subs	r6, r0, #0
   133d4:	bge	133ac <__assert_fail@plt+0x28dc>
   133d8:	mov	r3, #0
   133dc:	b	13368 <__assert_fail@plt+0x2898>
   133e0:	andeq	r3, r0, r8, asr r7
   133e4:	andeq	r3, r0, r4, lsr r7
   133e8:	ldr	ip, [pc, #564]	; 13624 <__assert_fail@plt+0x2b54>
   133ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133f0:	add	ip, pc, ip
   133f4:	ldr	lr, [pc, #556]	; 13628 <__assert_fail@plt+0x2b58>
   133f8:	sub	sp, sp, #76	; 0x4c
   133fc:	mov	r4, r2
   13400:	str	r2, [sp, #44]	; 0x2c
   13404:	mov	r2, ip
   13408:	ldr	ip, [ip, lr]
   1340c:	mov	r9, r3
   13410:	mov	r7, r1
   13414:	ldr	r3, [ip]
   13418:	mov	r1, r4
   1341c:	str	r3, [sp, #68]	; 0x44
   13420:	str	ip, [sp, #40]	; 0x28
   13424:	mov	r6, r0
   13428:	bl	1519c <__assert_fail@plt+0x46cc>
   1342c:	subs	r3, r0, #0
   13430:	str	r3, [sp, #24]
   13434:	blt	1358c <__assert_fail@plt+0x2abc>
   13438:	add	r3, sp, #56	; 0x38
   1343c:	str	r3, [sp, #32]
   13440:	add	r3, sp, #52	; 0x34
   13444:	str	r3, [sp, #28]
   13448:	add	r3, sp, #60	; 0x3c
   1344c:	str	r3, [sp, #36]	; 0x24
   13450:	add	r3, sp, #64	; 0x40
   13454:	str	r3, [sp, #20]
   13458:	ldrd	r2, [sp, #28]
   1345c:	ldr	r1, [sp, #24]
   13460:	mov	r0, r6
   13464:	bl	154d0 <__assert_fail@plt+0x4a00>
   13468:	subs	r5, r0, #0
   1346c:	beq	13608 <__assert_fail@plt+0x2b38>
   13470:	ldr	r4, [sp, #56]	; 0x38
   13474:	ands	r4, r4, #3
   13478:	bne	13554 <__assert_fail@plt+0x2a84>
   1347c:	ldr	r3, [sp, #36]	; 0x24
   13480:	ldr	r2, [sp, #52]	; 0x34
   13484:	mov	r1, r7
   13488:	mov	r0, r6
   1348c:	bl	15604 <__assert_fail@plt+0x4b34>
   13490:	subs	r8, r0, #0
   13494:	beq	13610 <__assert_fail@plt+0x2b40>
   13498:	ldr	r3, [sp, #56]	; 0x38
   1349c:	lsrs	r3, r3, #2
   134a0:	subne	r5, r5, #4
   134a4:	bne	134c4 <__assert_fail@plt+0x29f4>
   134a8:	b	13574 <__assert_fail@plt+0x2aa4>
   134ac:	cmp	r0, #0
   134b0:	bne	13558 <__assert_fail@plt+0x2a88>
   134b4:	ldr	r3, [sp, #56]	; 0x38
   134b8:	add	r4, r4, #1
   134bc:	cmp	r4, r3, lsr #2
   134c0:	bcs	13574 <__assert_fail@plt+0x2aa4>
   134c4:	ldr	r3, [r5, #4]!
   134c8:	ldr	sl, [sp, #52]	; 0x34
   134cc:	lsr	fp, r3, #24
   134d0:	lsl	r1, r3, #8
   134d4:	orr	fp, fp, r3, lsl #24
   134d8:	and	r1, r1, #16711680	; 0xff0000
   134dc:	lsr	r3, r3, #8
   134e0:	orr	fp, fp, r1
   134e4:	and	r3, r3, #65280	; 0xff00
   134e8:	orr	fp, fp, r3
   134ec:	mov	r0, sl
   134f0:	ldr	r1, [r8, fp]
   134f4:	lsr	r3, r1, #24
   134f8:	lsl	ip, r1, #8
   134fc:	and	ip, ip, #16711680	; 0xff0000
   13500:	orr	r3, r3, r1, lsl #24
   13504:	lsr	r1, r1, #8
   13508:	orr	r3, r3, ip
   1350c:	and	r1, r1, #65280	; 0xff00
   13510:	orr	r3, r3, r1
   13514:	add	r3, r3, r9
   13518:	rev	r3, r3
   1351c:	str	r3, [sp, #64]	; 0x40
   13520:	bl	10a28 <strlen@plt>
   13524:	mov	r3, #4
   13528:	str	r3, [sp, #8]
   1352c:	ldr	r3, [sp, #20]
   13530:	str	fp, [sp]
   13534:	str	r3, [sp, #4]
   13538:	mov	r2, sl
   1353c:	mov	r1, r7
   13540:	mov	r3, r0
   13544:	mov	r0, r6
   13548:	bl	16354 <__assert_fail@plt+0x5884>
   1354c:	cmn	r0, #3
   13550:	bne	134ac <__assert_fail@plt+0x29dc>
   13554:	mvn	r0, #15
   13558:	ldr	r3, [sp, #40]	; 0x28
   1355c:	ldr	r2, [sp, #68]	; 0x44
   13560:	ldr	r3, [r3]
   13564:	cmp	r2, r3
   13568:	bne	13620 <__assert_fail@plt+0x2b50>
   1356c:	add	sp, sp, #76	; 0x4c
   13570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13574:	ldr	r1, [sp, #24]
   13578:	mov	r0, r6
   1357c:	bl	151bc <__assert_fail@plt+0x46ec>
   13580:	subs	r3, r0, #0
   13584:	str	r3, [sp, #24]
   13588:	bge	13458 <__assert_fail@plt+0x2988>
   1358c:	ldr	r1, [sp, #44]	; 0x2c
   13590:	mov	r0, r6
   13594:	bl	14834 <__assert_fail@plt+0x3d64>
   13598:	subs	r4, r0, #0
   1359c:	blt	13600 <__assert_fail@plt+0x2b30>
   135a0:	mov	r2, #0
   135a4:	mov	r1, r4
   135a8:	mov	r0, r6
   135ac:	bl	14f78 <__assert_fail@plt+0x44a8>
   135b0:	mov	r1, r7
   135b4:	mov	r2, r0
   135b8:	mov	r0, r6
   135bc:	bl	1516c <__assert_fail@plt+0x469c>
   135c0:	cmn	r0, #1
   135c4:	beq	13554 <__assert_fail@plt+0x2a84>
   135c8:	cmp	r0, #0
   135cc:	blt	13558 <__assert_fail@plt+0x2a88>
   135d0:	mov	r1, r0
   135d4:	mov	r3, r9
   135d8:	mov	r2, r4
   135dc:	mov	r0, r6
   135e0:	bl	133e8 <__assert_fail@plt+0x2918>
   135e4:	cmp	r0, #0
   135e8:	bne	13558 <__assert_fail@plt+0x2a88>
   135ec:	mov	r1, r4
   135f0:	mov	r0, r6
   135f4:	bl	148a4 <__assert_fail@plt+0x3dd4>
   135f8:	subs	r4, r0, #0
   135fc:	bge	135a0 <__assert_fail@plt+0x2ad0>
   13600:	mov	r0, #0
   13604:	b	13558 <__assert_fail@plt+0x2a88>
   13608:	ldr	r0, [sp, #56]	; 0x38
   1360c:	b	13558 <__assert_fail@plt+0x2a88>
   13610:	ldr	r0, [sp, #60]	; 0x3c
   13614:	cmn	r0, #1
   13618:	bne	13558 <__assert_fail@plt+0x2a88>
   1361c:	b	13554 <__assert_fail@plt+0x2a84>
   13620:	bl	1098c <__stack_chk_fail@plt>
   13624:	andeq	r3, r1, ip, asr #22
   13628:	andeq	r0, r0, r0, lsr #1
   1362c:	ldr	ip, [pc, #284]	; 13750 <__assert_fail@plt+0x2c80>
   13630:	push	{r4, r5, r6, r7, r8, r9, lr}
   13634:	add	ip, pc, ip
   13638:	ldr	lr, [pc, #276]	; 13754 <__assert_fail@plt+0x2c84>
   1363c:	mov	r7, r2
   13640:	mov	r2, ip
   13644:	ldr	r5, [ip, lr]
   13648:	ldr	r2, [pc, #264]	; 13758 <__assert_fail@plt+0x2c88>
   1364c:	sub	sp, sp, #20
   13650:	mov	r6, r1
   13654:	ldr	ip, [r5]
   13658:	mov	r9, r0
   1365c:	mov	r8, r3
   13660:	mov	r1, r7
   13664:	mov	r0, r6
   13668:	mov	r4, #0
   1366c:	add	r3, sp, #8
   13670:	add	r2, pc, r2
   13674:	str	ip, [sp, #12]
   13678:	str	r4, [sp, #4]
   1367c:	bl	15604 <__assert_fail@plt+0x4b34>
   13680:	cmp	r0, #0
   13684:	beq	136c8 <__assert_fail@plt+0x2bf8>
   13688:	ldr	r3, [sp, #8]
   1368c:	cmp	r3, #4
   13690:	bne	13744 <__assert_fail@plt+0x2c74>
   13694:	ldr	r3, [r0]
   13698:	lsr	r1, r3, #24
   1369c:	lsl	r2, r3, #8
   136a0:	orr	r1, r1, r3, lsl #24
   136a4:	and	r2, r2, #16711680	; 0xff0000
   136a8:	lsr	r3, r3, #8
   136ac:	orr	r1, r1, r2
   136b0:	and	r3, r3, #65280	; 0xff00
   136b4:	orr	r1, r1, r3
   136b8:	cmn	r1, #1
   136bc:	beq	13744 <__assert_fail@plt+0x2c74>
   136c0:	cmp	r1, r4
   136c4:	bne	1371c <__assert_fail@plt+0x2c4c>
   136c8:	ldr	r2, [pc, #140]	; 1375c <__assert_fail@plt+0x2c8c>
   136cc:	mov	r1, r7
   136d0:	mov	r0, r6
   136d4:	add	r3, sp, #4
   136d8:	add	r2, pc, r2
   136dc:	bl	15604 <__assert_fail@plt+0x4b34>
   136e0:	subs	r4, r0, #0
   136e4:	beq	1373c <__assert_fail@plt+0x2c6c>
   136e8:	mov	r0, r9
   136ec:	mov	r1, r4
   136f0:	bl	158f8 <__assert_fail@plt+0x4e28>
   136f4:	cmp	r0, #0
   136f8:	blt	1372c <__assert_fail@plt+0x2c5c>
   136fc:	cmp	r8, #0
   13700:	strne	r4, [r8]
   13704:	ldr	r2, [sp, #12]
   13708:	ldr	r3, [r5]
   1370c:	cmp	r2, r3
   13710:	bne	1374c <__assert_fail@plt+0x2c7c>
   13714:	add	sp, sp, #20
   13718:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1371c:	mov	r0, r9
   13720:	bl	15d5c <__assert_fail@plt+0x528c>
   13724:	cmp	r0, #0
   13728:	bge	136fc <__assert_fail@plt+0x2c2c>
   1372c:	ldr	r3, [sp, #4]
   13730:	cmn	r3, #1
   13734:	mvneq	r0, #15
   13738:	b	13704 <__assert_fail@plt+0x2c34>
   1373c:	ldr	r0, [sp, #4]
   13740:	b	136f4 <__assert_fail@plt+0x2c24>
   13744:	mvn	r0, #5
   13748:	b	13704 <__assert_fail@plt+0x2c34>
   1374c:	bl	1098c <__stack_chk_fail@plt>
   13750:	andeq	r3, r1, r8, lsl #18
   13754:	andeq	r0, r0, r0, lsr #1
   13758:	andeq	r3, r0, ip, asr #8
   1375c:	andeq	r3, r0, ip, ror #7
   13760:	ldr	ip, [pc, #368]	; 138d8 <__assert_fail@plt+0x2e08>
   13764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13768:	add	ip, pc, ip
   1376c:	ldr	lr, [pc, #360]	; 138dc <__assert_fail@plt+0x2e0c>
   13770:	sub	sp, sp, #28
   13774:	mov	r5, r2
   13778:	ldr	sl, [ip, lr]
   1377c:	mov	fp, r3
   13780:	mov	r6, r0
   13784:	ldr	r2, [sl]
   13788:	mov	r7, r1
   1378c:	mov	r0, r5
   13790:	mov	r1, fp
   13794:	mov	r3, ip
   13798:	str	r2, [sp, #20]
   1379c:	bl	1519c <__assert_fail@plt+0x46cc>
   137a0:	subs	r4, r0, #0
   137a4:	blt	13830 <__assert_fail@plt+0x2d60>
   137a8:	add	r9, sp, #16
   137ac:	add	r8, sp, #12
   137b0:	b	137f0 <__assert_fail@plt+0x2d20>
   137b4:	cmp	r1, #0
   137b8:	blt	13814 <__assert_fail@plt+0x2d44>
   137bc:	str	r1, [sp]
   137c0:	mov	r3, r0
   137c4:	mov	r1, r7
   137c8:	ldr	r2, [sp, #12]
   137cc:	mov	r0, r6
   137d0:	bl	12aa0 <__assert_fail@plt+0x1fd0>
   137d4:	subs	r1, r0, #0
   137d8:	bne	13814 <__assert_fail@plt+0x2d44>
   137dc:	mov	r1, r4
   137e0:	mov	r0, r5
   137e4:	bl	151bc <__assert_fail@plt+0x46ec>
   137e8:	subs	r4, r0, #0
   137ec:	blt	13830 <__assert_fail@plt+0x2d60>
   137f0:	mov	r1, r4
   137f4:	mov	r3, r9
   137f8:	mov	r2, r8
   137fc:	mov	r0, r5
   13800:	bl	154d0 <__assert_fail@plt+0x4a00>
   13804:	ldr	r1, [sp, #16]
   13808:	cmn	r1, #1
   1380c:	bne	137b4 <__assert_fail@plt+0x2ce4>
   13810:	mvn	r1, #12
   13814:	ldr	r2, [sp, #20]
   13818:	ldr	r3, [sl]
   1381c:	mov	r0, r1
   13820:	cmp	r2, r3
   13824:	bne	138d4 <__assert_fail@plt+0x2e04>
   13828:	add	sp, sp, #28
   1382c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13830:	mov	r1, fp
   13834:	mov	r0, r5
   13838:	bl	14834 <__assert_fail@plt+0x3d64>
   1383c:	subs	r4, r0, #0
   13840:	bge	1387c <__assert_fail@plt+0x2dac>
   13844:	b	138cc <__assert_fail@plt+0x2dfc>
   13848:	cmp	r1, #0
   1384c:	blt	13814 <__assert_fail@plt+0x2d44>
   13850:	mov	r3, r4
   13854:	mov	r2, r5
   13858:	mov	r0, r6
   1385c:	bl	13760 <__assert_fail@plt+0x2c90>
   13860:	subs	r1, r0, #0
   13864:	bne	13814 <__assert_fail@plt+0x2d44>
   13868:	mov	r1, r4
   1386c:	mov	r0, r5
   13870:	bl	148a4 <__assert_fail@plt+0x3dd4>
   13874:	subs	r4, r0, #0
   13878:	blt	138cc <__assert_fail@plt+0x2dfc>
   1387c:	mov	r2, #0
   13880:	mov	r1, r4
   13884:	mov	r0, r5
   13888:	bl	14f78 <__assert_fail@plt+0x44a8>
   1388c:	mov	r1, r7
   13890:	mov	r2, r0
   13894:	mov	r8, r0
   13898:	mov	r0, r6
   1389c:	bl	12e50 <__assert_fail@plt+0x2380>
   138a0:	cmn	r0, #2
   138a4:	mov	r1, r0
   138a8:	bne	13848 <__assert_fail@plt+0x2d78>
   138ac:	mov	r1, r7
   138b0:	mov	r2, r8
   138b4:	mov	r0, r6
   138b8:	bl	1516c <__assert_fail@plt+0x469c>
   138bc:	cmn	r0, #1
   138c0:	mov	r1, r0
   138c4:	bne	13848 <__assert_fail@plt+0x2d78>
   138c8:	b	13810 <__assert_fail@plt+0x2d40>
   138cc:	mov	r1, #0
   138d0:	b	13814 <__assert_fail@plt+0x2d44>
   138d4:	bl	1098c <__stack_chk_fail@plt>
   138d8:	ldrdeq	r3, [r1], -r4
   138dc:	andeq	r0, r0, r0, lsr #1
   138e0:	ldr	r3, [pc, #1984]	; 140a8 <__assert_fail@plt+0x35d8>
   138e4:	ldr	r2, [pc, #1984]	; 140ac <__assert_fail@plt+0x35dc>
   138e8:	add	r3, pc, r3
   138ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138f0:	sub	sp, sp, #84	; 0x54
   138f4:	ldr	r2, [r3, r2]
   138f8:	mov	sl, r0
   138fc:	mov	r4, r1
   13900:	ldr	r3, [r2]
   13904:	str	r2, [sp, #20]
   13908:	str	r3, [sp, #76]	; 0x4c
   1390c:	bl	15718 <__assert_fail@plt+0x4c48>
   13910:	mov	r5, r0
   13914:	mov	r0, sl
   13918:	bl	140cc <__assert_fail@plt+0x35fc>
   1391c:	subs	r9, r0, #0
   13920:	beq	13944 <__assert_fail@plt+0x2e74>
   13924:	ldr	r3, [sp, #20]
   13928:	ldr	r2, [sp, #76]	; 0x4c
   1392c:	mov	r0, r9
   13930:	ldr	r3, [r3]
   13934:	cmp	r2, r3
   13938:	bne	14070 <__assert_fail@plt+0x35a0>
   1393c:	add	sp, sp, #84	; 0x54
   13940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13944:	mov	r0, r4
   13948:	bl	140cc <__assert_fail@plt+0x35fc>
   1394c:	subs	r9, r0, #0
   13950:	bne	13924 <__assert_fail@plt+0x2e54>
   13954:	mov	r1, r9
   13958:	mov	r2, r5
   1395c:	mov	r0, r4
   13960:	bl	13338 <__assert_fail@plt+0x2868>
   13964:	subs	r9, r0, #0
   13968:	beq	1397c <__assert_fail@plt+0x2eac>
   1396c:	mvn	r3, #0
   13970:	str	r3, [r4]
   13974:	str	r3, [sl]
   13978:	b	13924 <__assert_fail@plt+0x2e54>
   1397c:	ldr	r1, [pc, #1836]	; 140b0 <__assert_fail@plt+0x35e0>
   13980:	mov	r0, r4
   13984:	add	r1, pc, r1
   13988:	bl	158f8 <__assert_fail@plt+0x4e28>
   1398c:	subs	r2, r0, #0
   13990:	bge	13ec4 <__assert_fail@plt+0x33f4>
   13994:	cmn	r2, #1
   13998:	movne	r9, r2
   1399c:	bne	1396c <__assert_fail@plt+0x2e9c>
   139a0:	ldr	r1, [pc, #1804]	; 140b4 <__assert_fail@plt+0x35e4>
   139a4:	mov	r0, r4
   139a8:	add	r1, pc, r1
   139ac:	bl	158f8 <__assert_fail@plt+0x4e28>
   139b0:	cmn	r0, #1
   139b4:	mov	r5, r0
   139b8:	beq	13bf8 <__assert_fail@plt+0x3128>
   139bc:	cmp	r0, #0
   139c0:	blt	13ee4 <__assert_fail@plt+0x3414>
   139c4:	ldr	r1, [pc, #1772]	; 140b8 <__assert_fail@plt+0x35e8>
   139c8:	mov	r0, sl
   139cc:	add	r1, pc, r1
   139d0:	bl	158f8 <__assert_fail@plt+0x4e28>
   139d4:	cmn	r0, #1
   139d8:	str	r0, [sp, #24]
   139dc:	blt	13bbc <__assert_fail@plt+0x30ec>
   139e0:	mov	r1, r5
   139e4:	mov	r0, r4
   139e8:	bl	1519c <__assert_fail@plt+0x46cc>
   139ec:	subs	r3, r0, #0
   139f0:	str	r3, [sp, #36]	; 0x24
   139f4:	blt	13bf8 <__assert_fail@plt+0x3128>
   139f8:	add	r3, sp, #60	; 0x3c
   139fc:	str	r3, [sp, #44]	; 0x2c
   13a00:	str	r9, [sp, #48]	; 0x30
   13a04:	add	r3, sp, #56	; 0x38
   13a08:	mov	r9, r4
   13a0c:	str	r3, [sp, #40]	; 0x28
   13a10:	add	r3, sp, #64	; 0x40
   13a14:	str	r3, [sp, #32]
   13a18:	ldrd	r2, [sp, #40]	; 0x28
   13a1c:	ldr	r1, [sp, #36]	; 0x24
   13a20:	mov	r0, r9
   13a24:	bl	154d0 <__assert_fail@plt+0x4a00>
   13a28:	subs	r5, r0, #0
   13a2c:	ldrne	r4, [sp, #60]	; 0x3c
   13a30:	bne	13ae0 <__assert_fail@plt+0x3010>
   13a34:	b	13bc4 <__assert_fail@plt+0x30f4>
   13a38:	add	r3, sp, #72	; 0x48
   13a3c:	ldr	r2, [sp, #56]	; 0x38
   13a40:	mov	r0, sl
   13a44:	bl	15604 <__assert_fail@plt+0x4b34>
   13a48:	subs	r1, r0, #0
   13a4c:	ldreq	r0, [sp, #72]	; 0x48
   13a50:	beq	13ac8 <__assert_fail@plt+0x2ff8>
   13a54:	mov	r0, sl
   13a58:	bl	158f8 <__assert_fail@plt+0x4e28>
   13a5c:	subs	r1, r0, #0
   13a60:	blt	13eb8 <__assert_fail@plt+0x33e8>
   13a64:	mov	r0, sl
   13a68:	bl	15644 <__assert_fail@plt+0x4b74>
   13a6c:	subs	fp, r0, #0
   13a70:	beq	14018 <__assert_fail@plt+0x3548>
   13a74:	mov	r2, r7
   13a78:	mov	r1, r5
   13a7c:	mov	r0, r9
   13a80:	bl	157f4 <__assert_fail@plt+0x4d24>
   13a84:	cmn	r0, #1
   13a88:	beq	13eac <__assert_fail@plt+0x33dc>
   13a8c:	cmp	r0, #0
   13a90:	blt	14094 <__assert_fail@plt+0x35c4>
   13a94:	ldr	r3, [sp, #28]
   13a98:	mov	ip, #4
   13a9c:	mov	r1, r0
   13aa0:	add	r0, sp, #68	; 0x44
   13aa4:	rev	fp, fp
   13aa8:	str	r3, [sp]
   13aac:	str	r0, [sp, #4]
   13ab0:	mov	r3, r8
   13ab4:	mov	r2, r4
   13ab8:	str	ip, [sp, #8]
   13abc:	mov	r0, r9
   13ac0:	str	fp, [sp, #68]	; 0x44
   13ac4:	bl	16354 <__assert_fail@plt+0x5884>
   13ac8:	cmp	r0, #0
   13acc:	bne	14094 <__assert_fail@plt+0x35c4>
   13ad0:	ldr	r4, [sp, #60]	; 0x3c
   13ad4:	cmp	r4, #0
   13ad8:	ble	13bd8 <__assert_fail@plt+0x3108>
   13adc:	mov	r5, r6
   13ae0:	mov	r2, r4
   13ae4:	mov	r1, #0
   13ae8:	mov	r0, r5
   13aec:	bl	10a94 <memchr@plt>
   13af0:	cmp	r0, #0
   13af4:	beq	13eac <__assert_fail@plt+0x33dc>
   13af8:	sub	r7, r0, r5
   13afc:	sub	r4, r4, #1
   13b00:	sub	r4, r4, r7
   13b04:	mov	r2, r7
   13b08:	mov	r1, #58	; 0x3a
   13b0c:	mov	r0, r5
   13b10:	str	r4, [sp, #60]	; 0x3c
   13b14:	bl	10a94 <memchr@plt>
   13b18:	add	r6, r7, #1
   13b1c:	add	r6, r5, r6
   13b20:	cmp	r0, #0
   13b24:	beq	13eac <__assert_fail@plt+0x33dc>
   13b28:	ldrb	r1, [r0]
   13b2c:	cmp	r1, #58	; 0x3a
   13b30:	bne	13eac <__assert_fail@plt+0x33dc>
   13b34:	sub	r2, r7, #1
   13b38:	sub	r7, r0, r5
   13b3c:	cmp	r7, r2
   13b40:	beq	13eac <__assert_fail@plt+0x33dc>
   13b44:	add	r4, r0, #1
   13b48:	sub	r2, r2, r7
   13b4c:	mov	r0, r4
   13b50:	bl	10a94 <memchr@plt>
   13b54:	cmp	r0, #0
   13b58:	beq	13eac <__assert_fail@plt+0x33dc>
   13b5c:	ldrb	r3, [r0]
   13b60:	cmp	r3, #58	; 0x3a
   13b64:	bne	13eac <__assert_fail@plt+0x33dc>
   13b68:	subs	r8, r0, r4
   13b6c:	beq	13eac <__assert_fail@plt+0x33dc>
   13b70:	add	fp, r0, #1
   13b74:	mov	r0, fp
   13b78:	mov	r2, #10
   13b7c:	ldr	r1, [sp, #32]
   13b80:	bl	10a1c <strtoul@plt>
   13b84:	ldr	r3, [sp, #64]	; 0x40
   13b88:	cmp	fp, r3
   13b8c:	ldrb	r3, [r3]
   13b90:	str	r0, [sp, #28]
   13b94:	movcc	r0, #0
   13b98:	movcs	r0, #1
   13b9c:	cmp	r3, #0
   13ba0:	movne	r0, #1
   13ba4:	cmp	r0, #0
   13ba8:	bne	13eac <__assert_fail@plt+0x33dc>
   13bac:	ldr	r1, [sp, #24]
   13bb0:	cmn	r1, #1
   13bb4:	bne	13a38 <__assert_fail@plt+0x2f68>
   13bb8:	mov	r4, r9
   13bbc:	ldr	r9, [sp, #24]
   13bc0:	b	1396c <__assert_fail@plt+0x2e9c>
   13bc4:	ldr	r3, [sp, #60]	; 0x3c
   13bc8:	cmn	r3, #1
   13bcc:	beq	14074 <__assert_fail@plt+0x35a4>
   13bd0:	cmp	r3, #0
   13bd4:	bne	1409c <__assert_fail@plt+0x35cc>
   13bd8:	ldr	r1, [sp, #36]	; 0x24
   13bdc:	mov	r0, r9
   13be0:	bl	151bc <__assert_fail@plt+0x46ec>
   13be4:	subs	r3, r0, #0
   13be8:	str	r3, [sp, #36]	; 0x24
   13bec:	bge	13a18 <__assert_fail@plt+0x2f48>
   13bf0:	mov	r4, r9
   13bf4:	ldr	r9, [sp, #48]	; 0x30
   13bf8:	mov	r1, #0
   13bfc:	mov	r0, r4
   13c00:	bl	14834 <__assert_fail@plt+0x3d64>
   13c04:	subs	r5, r0, #0
   13c08:	blt	13c80 <__assert_fail@plt+0x31b0>
   13c0c:	ldr	r7, [pc, #1192]	; 140bc <__assert_fail@plt+0x35ec>
   13c10:	add	r7, pc, r7
   13c14:	mov	r2, r7
   13c18:	mov	r1, r5
   13c1c:	mov	r0, r4
   13c20:	bl	1516c <__assert_fail@plt+0x469c>
   13c24:	cmn	r0, #1
   13c28:	mov	r6, r0
   13c2c:	beq	13c6c <__assert_fail@plt+0x319c>
   13c30:	cmp	r0, #0
   13c34:	blt	13eec <__assert_fail@plt+0x341c>
   13c38:	mov	r1, r4
   13c3c:	mov	r3, #0
   13c40:	mov	r2, r5
   13c44:	mov	r0, sl
   13c48:	bl	1362c <__assert_fail@plt+0x2b5c>
   13c4c:	subs	r1, r0, #0
   13c50:	blt	13f08 <__assert_fail@plt+0x3438>
   13c54:	mov	r3, r6
   13c58:	mov	r2, r4
   13c5c:	mov	r0, sl
   13c60:	bl	13760 <__assert_fail@plt+0x2c90>
   13c64:	cmp	r0, #0
   13c68:	bne	13edc <__assert_fail@plt+0x340c>
   13c6c:	mov	r1, r5
   13c70:	mov	r0, r4
   13c74:	bl	148a4 <__assert_fail@plt+0x3dd4>
   13c78:	subs	r5, r0, #0
   13c7c:	bge	13c14 <__assert_fail@plt+0x3144>
   13c80:	ldr	r5, [pc, #1080]	; 140c0 <__assert_fail@plt+0x35f0>
   13c84:	mov	r1, #0
   13c88:	add	r5, pc, r5
   13c8c:	mov	r2, r5
   13c90:	mov	r0, r4
   13c94:	bl	1516c <__assert_fail@plt+0x469c>
   13c98:	subs	r6, r0, #0
   13c9c:	blt	13ea0 <__assert_fail@plt+0x33d0>
   13ca0:	mov	r2, r5
   13ca4:	mov	r1, #0
   13ca8:	mov	r0, sl
   13cac:	bl	1516c <__assert_fail@plt+0x469c>
   13cb0:	cmn	r0, #1
   13cb4:	str	r0, [sp, #24]
   13cb8:	beq	14030 <__assert_fail@plt+0x3560>
   13cbc:	ldr	r3, [sp, #24]
   13cc0:	cmp	r3, #0
   13cc4:	blt	13bbc <__assert_fail@plt+0x30ec>
   13cc8:	mov	r1, r6
   13ccc:	mov	r0, r4
   13cd0:	bl	1519c <__assert_fail@plt+0x46cc>
   13cd4:	subs	fp, r0, #0
   13cd8:	blt	13ea0 <__assert_fail@plt+0x33d0>
   13cdc:	ldr	r3, [pc, #992]	; 140c4 <__assert_fail@plt+0x35f4>
   13ce0:	str	r9, [sp, #48]	; 0x30
   13ce4:	add	r3, pc, r3
   13ce8:	str	r3, [sp, #32]
   13cec:	ldr	r3, [pc, #980]	; 140c8 <__assert_fail@plt+0x35f8>
   13cf0:	add	r3, pc, r3
   13cf4:	str	r3, [sp, #36]	; 0x24
   13cf8:	add	r3, sp, #60	; 0x3c
   13cfc:	str	r3, [sp, #44]	; 0x2c
   13d00:	add	r3, sp, #56	; 0x38
   13d04:	str	r3, [sp, #40]	; 0x28
   13d08:	ldr	r3, [sp, #40]	; 0x28
   13d0c:	ldr	r2, [sp, #44]	; 0x2c
   13d10:	mov	r1, fp
   13d14:	mov	r0, r4
   13d18:	bl	154d0 <__assert_fail@plt+0x4a00>
   13d1c:	subs	r8, r0, #0
   13d20:	beq	14000 <__assert_fail@plt+0x3530>
   13d24:	ldr	r5, [sp, #56]	; 0x38
   13d28:	cmp	r5, #0
   13d2c:	ble	14048 <__assert_fail@plt+0x3578>
   13d30:	mov	r2, r5
   13d34:	mov	r1, #0
   13d38:	bl	10a94 <memchr@plt>
   13d3c:	sub	r3, r5, #1
   13d40:	add	r3, r8, r3
   13d44:	cmp	r0, r3
   13d48:	bne	14048 <__assert_fail@plt+0x3578>
   13d4c:	ldrb	r1, [r8]
   13d50:	add	r5, r8, r5
   13d54:	cmp	r1, #47	; 0x2f
   13d58:	bne	14048 <__assert_fail@plt+0x3578>
   13d5c:	add	r7, r8, #1
   13d60:	mov	r0, r7
   13d64:	bl	10a34 <strchr@plt>
   13d68:	subs	r6, r0, #0
   13d6c:	beq	14024 <__assert_fail@plt+0x3554>
   13d70:	sub	r3, r5, r6
   13d74:	sub	r8, r6, r8
   13d78:	cmp	r3, #12
   13d7c:	sub	r8, r8, #1
   13d80:	ble	14024 <__assert_fail@plt+0x3554>
   13d84:	ldr	r1, [sp, #32]
   13d88:	mov	r2, #13
   13d8c:	bl	10980 <memcmp@plt>
   13d90:	subs	r1, r0, #0
   13d94:	bne	14024 <__assert_fail@plt+0x3554>
   13d98:	mov	r3, r8
   13d9c:	mov	r2, r7
   13da0:	mov	r0, r4
   13da4:	bl	15058 <__assert_fail@plt+0x4588>
   13da8:	add	r3, r6, #13
   13dac:	str	r3, [sp, #28]
   13db0:	sub	r5, r5, r3
   13db4:	subs	r7, r0, #0
   13db8:	blt	14024 <__assert_fail@plt+0x3554>
   13dbc:	ldr	r2, [sp, #36]	; 0x24
   13dc0:	mov	r1, r7
   13dc4:	mov	r0, r4
   13dc8:	bl	1516c <__assert_fail@plt+0x469c>
   13dcc:	cmp	r0, #0
   13dd0:	blt	14024 <__assert_fail@plt+0x3554>
   13dd4:	add	r8, sp, #64	; 0x40
   13dd8:	mov	r3, r8
   13ddc:	mov	r2, r7
   13de0:	mov	r1, r4
   13de4:	mov	r0, sl
   13de8:	bl	1362c <__assert_fail@plt+0x2b5c>
   13dec:	subs	r9, r0, #0
   13df0:	blt	14080 <__assert_fail@plt+0x35b0>
   13df4:	ldr	r0, [sp, #64]	; 0x40
   13df8:	cmp	r0, #0
   13dfc:	beq	13f10 <__assert_fail@plt+0x3440>
   13e00:	bl	10a28 <strlen@plt>
   13e04:	mov	r6, r0
   13e08:	cmp	r6, #1
   13e0c:	movle	r3, r6
   13e10:	addgt	r3, r6, #1
   13e14:	add	r2, sp, #68	; 0x44
   13e18:	add	r3, r3, r5
   13e1c:	str	r2, [sp]
   13e20:	add	r3, r3, #1
   13e24:	ldr	r2, [sp, #60]	; 0x3c
   13e28:	ldr	r1, [sp, #24]
   13e2c:	mov	r0, sl
   13e30:	bl	12970 <__assert_fail@plt+0x1ea0>
   13e34:	cmp	r0, #0
   13e38:	blt	13ff8 <__assert_fail@plt+0x3528>
   13e3c:	ldr	r1, [sp, #64]	; 0x40
   13e40:	cmp	r1, #0
   13e44:	beq	13fa0 <__assert_fail@plt+0x34d0>
   13e48:	cmp	r6, #1
   13e4c:	ldr	r7, [sp, #68]	; 0x44
   13e50:	addgt	r8, r6, #1
   13e54:	bgt	13ef4 <__assert_fail@plt+0x3424>
   13e58:	mov	r9, r6
   13e5c:	mov	r8, r6
   13e60:	sub	r6, r6, #1
   13e64:	mov	r3, #47	; 0x2f
   13e68:	mov	r2, r5
   13e6c:	ldr	r1, [sp, #28]
   13e70:	strb	r3, [r7, r6]
   13e74:	add	r0, r7, r8
   13e78:	add	r5, r7, r5
   13e7c:	bl	10974 <memcpy@plt>
   13e80:	mov	r3, #0
   13e84:	mov	r1, fp
   13e88:	strb	r3, [r5, r9]
   13e8c:	mov	r0, r4
   13e90:	bl	151bc <__assert_fail@plt+0x46ec>
   13e94:	subs	fp, r0, #0
   13e98:	bge	13d08 <__assert_fail@plt+0x3238>
   13e9c:	ldr	r9, [sp, #48]	; 0x30
   13ea0:	mvn	r3, #0
   13ea4:	str	r3, [r4]
   13ea8:	b	13924 <__assert_fail@plt+0x2e54>
   13eac:	mov	r4, r9
   13eb0:	mvn	r9, #15
   13eb4:	b	1396c <__assert_fail@plt+0x2e9c>
   13eb8:	mov	r4, r9
   13ebc:	str	r1, [sp, #24]
   13ec0:	b	13bbc <__assert_fail@plt+0x30ec>
   13ec4:	mov	r3, r5
   13ec8:	mov	r1, r9
   13ecc:	mov	r0, r4
   13ed0:	bl	133e8 <__assert_fail@plt+0x2918>
   13ed4:	cmp	r0, #0
   13ed8:	beq	139a0 <__assert_fail@plt+0x2ed0>
   13edc:	mov	r9, r0
   13ee0:	b	1396c <__assert_fail@plt+0x2e9c>
   13ee4:	mov	r9, r0
   13ee8:	b	1396c <__assert_fail@plt+0x2e9c>
   13eec:	mov	r9, r0
   13ef0:	b	1396c <__assert_fail@plt+0x2e9c>
   13ef4:	mov	r2, r8
   13ef8:	mov	r0, r7
   13efc:	mov	r9, r8
   13f00:	bl	10974 <memcpy@plt>
   13f04:	b	13e64 <__assert_fail@plt+0x3394>
   13f08:	mov	r9, r1
   13f0c:	b	1396c <__assert_fail@plt+0x2e9c>
   13f10:	mov	r0, sl
   13f14:	bl	140cc <__assert_fail@plt+0x35fc>
   13f18:	subs	r6, r0, #0
   13f1c:	bne	13f90 <__assert_fail@plt+0x34c0>
   13f20:	add	r3, sp, #72	; 0x48
   13f24:	str	r5, [sp, #52]	; 0x34
   13f28:	mov	r5, r9
   13f2c:	mov	r9, r8
   13f30:	mov	r8, r4
   13f34:	mov	r4, r3
   13f38:	b	13f68 <__assert_fail@plt+0x3498>
   13f3c:	ldr	r2, [sp, #72]	; 0x48
   13f40:	cmp	r2, #0
   13f44:	beq	14054 <__assert_fail@plt+0x3584>
   13f48:	mov	r1, r5
   13f4c:	mov	r0, sl
   13f50:	bl	15c48 <__assert_fail@plt+0x5178>
   13f54:	subs	r5, r0, #0
   13f58:	blt	14088 <__assert_fail@plt+0x35b8>
   13f5c:	ldr	r2, [sp, #72]	; 0x48
   13f60:	add	r2, r2, #1
   13f64:	add	r6, r6, r2
   13f68:	mov	r2, r4
   13f6c:	mov	r1, r5
   13f70:	mov	r0, sl
   13f74:	bl	14f78 <__assert_fail@plt+0x44a8>
   13f78:	cmp	r0, #0
   13f7c:	bne	13f3c <__assert_fail@plt+0x346c>
   13f80:	ldr	r5, [sp, #52]	; 0x34
   13f84:	ldr	r6, [sp, #72]	; 0x48
   13f88:	mov	r4, r8
   13f8c:	mov	r8, r9
   13f90:	cmp	r6, #0
   13f94:	bge	13e08 <__assert_fail@plt+0x3338>
   13f98:	str	r6, [sp, #24]
   13f9c:	b	13bbc <__assert_fail@plt+0x30ec>
   13fa0:	mov	r3, r8
   13fa4:	mov	r2, r7
   13fa8:	mov	r1, r4
   13fac:	mov	r0, sl
   13fb0:	bl	1362c <__assert_fail@plt+0x2b5c>
   13fb4:	cmp	r0, #0
   13fb8:	blt	13ff8 <__assert_fail@plt+0x3528>
   13fbc:	cmp	r6, #1
   13fc0:	ldr	r7, [sp, #68]	; 0x44
   13fc4:	ble	13e58 <__assert_fail@plt+0x3388>
   13fc8:	ldr	r1, [sp, #64]	; 0x40
   13fcc:	add	r8, r6, #1
   13fd0:	cmp	r1, #0
   13fd4:	mov	r9, r8
   13fd8:	bne	13ef4 <__assert_fail@plt+0x3424>
   13fdc:	mov	r1, r0
   13fe0:	mov	r3, r8
   13fe4:	mov	r2, r7
   13fe8:	mov	r0, sl
   13fec:	bl	15948 <__assert_fail@plt+0x4e78>
   13ff0:	cmp	r0, #0
   13ff4:	bge	13e64 <__assert_fail@plt+0x3394>
   13ff8:	str	r0, [sp, #24]
   13ffc:	b	13bbc <__assert_fail@plt+0x30ec>
   14000:	ldr	r3, [sp, #56]	; 0x38
   14004:	ldr	r9, [sp, #48]	; 0x30
   14008:	cmp	r3, #0
   1400c:	beq	13ea0 <__assert_fail@plt+0x33d0>
   14010:	mov	r9, r3
   14014:	b	1396c <__assert_fail@plt+0x2e9c>
   14018:	mov	r4, r9
   1401c:	mvn	r9, #0
   14020:	b	1396c <__assert_fail@plt+0x2e9c>
   14024:	mvn	r3, #15
   14028:	str	r3, [sp, #24]
   1402c:	b	13bbc <__assert_fail@plt+0x30ec>
   14030:	mov	r2, r5
   14034:	mov	r1, #0
   14038:	mov	r0, sl
   1403c:	bl	12e50 <__assert_fail@plt+0x2380>
   14040:	str	r0, [sp, #24]
   14044:	b	13cbc <__assert_fail@plt+0x31ec>
   14048:	mvn	r3, #14
   1404c:	str	r3, [sp, #24]
   14050:	b	13bbc <__assert_fail@plt+0x30ec>
   14054:	cmp	r6, #0
   14058:	mov	r4, r8
   1405c:	ldr	r5, [sp, #52]	; 0x34
   14060:	mov	r8, r9
   14064:	moveq	r6, #1
   14068:	beq	13e08 <__assert_fail@plt+0x3338>
   1406c:	b	13f90 <__assert_fail@plt+0x34c0>
   14070:	bl	1098c <__stack_chk_fail@plt>
   14074:	mov	r4, r9
   14078:	mvn	r9, #12
   1407c:	b	1396c <__assert_fail@plt+0x2e9c>
   14080:	str	r9, [sp, #24]
   14084:	b	13bbc <__assert_fail@plt+0x30ec>
   14088:	mov	r4, r8
   1408c:	str	r5, [sp, #24]
   14090:	b	13bbc <__assert_fail@plt+0x30ec>
   14094:	mov	r4, r9
   14098:	b	13edc <__assert_fail@plt+0x340c>
   1409c:	mov	r4, r9
   140a0:	mov	r9, r3
   140a4:	b	1396c <__assert_fail@plt+0x2e9c>
   140a8:	andeq	r3, r1, r4, asr r6
   140ac:	andeq	r0, r0, r0, lsr #1
   140b0:	andeq	r3, r0, ip, asr #2
   140b4:	andeq	r3, r0, ip, lsr r1
   140b8:	andeq	r3, r0, r4, lsr #2
   140bc:	strdeq	r2, [r0], -ip
   140c0:	andeq	r2, r0, r8, ror lr
   140c4:	andeq	r2, r0, r4, lsr lr
   140c8:	andeq	r2, r0, ip, lsl lr
   140cc:	ldr	r3, [r0]
   140d0:	ldr	ip, [pc, #208]	; 141a8 <__assert_fail@plt+0x36d8>
   140d4:	lsr	r2, r3, #24
   140d8:	lsl	r1, r3, #8
   140dc:	orr	r2, r2, r3, lsl #24
   140e0:	and	r1, r1, #16711680	; 0xff0000
   140e4:	lsr	r3, r3, #8
   140e8:	orr	r2, r2, r1
   140ec:	and	r3, r3, #65280	; 0xff00
   140f0:	orr	r3, r2, r3
   140f4:	cmp	r3, ip
   140f8:	beq	14138 <__assert_fail@plt+0x3668>
   140fc:	ldr	r2, [pc, #168]	; 141ac <__assert_fail@plt+0x36dc>
   14100:	cmp	r3, r2
   14104:	bne	14198 <__assert_fail@plt+0x36c8>
   14108:	ldr	r3, [r0, #36]	; 0x24
   1410c:	lsr	r2, r3, #24
   14110:	lsl	r1, r3, #8
   14114:	orr	r2, r2, r3, lsl #24
   14118:	and	r1, r1, #16711680	; 0xff0000
   1411c:	lsr	r3, r3, #8
   14120:	orr	r2, r2, r1
   14124:	and	r3, r3, #65280	; 0xff00
   14128:	orrs	r3, r2, r3
   1412c:	movne	r0, #0
   14130:	mvneq	r0, #6
   14134:	bx	lr
   14138:	ldr	r3, [r0, #20]
   1413c:	lsr	r2, r3, #24
   14140:	lsl	r1, r3, #8
   14144:	orr	r2, r2, r3, lsl #24
   14148:	and	r1, r1, #16711680	; 0xff0000
   1414c:	lsr	r3, r3, #8
   14150:	orr	r2, r2, r1
   14154:	and	r3, r3, #65280	; 0xff00
   14158:	orr	r3, r2, r3
   1415c:	cmp	r3, #1
   14160:	bls	141a0 <__assert_fail@plt+0x36d0>
   14164:	ldr	r3, [r0, #24]
   14168:	lsr	r2, r3, #24
   1416c:	lsl	r1, r3, #8
   14170:	orr	r2, r2, r3, lsl #24
   14174:	and	r1, r1, #16711680	; 0xff0000
   14178:	lsr	r3, r3, #8
   1417c:	orr	r2, r2, r1
   14180:	and	r3, r3, #65280	; 0xff00
   14184:	orr	r3, r2, r3
   14188:	cmp	r3, #18
   1418c:	movcc	r0, #0
   14190:	mvncs	r0, #9
   14194:	bx	lr
   14198:	mvn	r0, #8
   1419c:	bx	lr
   141a0:	mvn	r0, #9
   141a4:	bx	lr
   141a8:	andle	pc, sp, sp, ror #29
   141ac:	svccs	0x00f20112
   141b0:	cmp	r0, #1
   141b4:	bls	141d8 <__assert_fail@plt+0x3708>
   141b8:	cmp	r0, #2
   141bc:	beq	141d0 <__assert_fail@plt+0x3700>
   141c0:	cmp	r0, #17
   141c4:	movcc	r0, #36	; 0x24
   141c8:	movcs	r0, #40	; 0x28
   141cc:	bx	lr
   141d0:	mov	r0, #32
   141d4:	bx	lr
   141d8:	mov	r0, #28
   141dc:	bx	lr
   141e0:	ldr	r3, [r0]
   141e4:	ldr	ip, [pc, #628]	; 14460 <__assert_fail@plt+0x3990>
   141e8:	lsr	r2, r3, #24
   141ec:	lsl	r1, r3, #8
   141f0:	orr	r2, r2, r3, lsl #24
   141f4:	and	r1, r1, #16711680	; 0xff0000
   141f8:	lsr	r3, r3, #8
   141fc:	orr	r2, r2, r1
   14200:	and	r3, r3, #65280	; 0xff00
   14204:	orr	r3, r2, r3
   14208:	cmp	r3, ip
   1420c:	bne	14450 <__assert_fail@plt+0x3980>
   14210:	push	{r4, r5, r6, lr}
   14214:	mov	r4, r0
   14218:	ldr	r3, [r0, #20]
   1421c:	lsr	r0, r3, #24
   14220:	lsl	r2, r3, #8
   14224:	and	r2, r2, #16711680	; 0xff0000
   14228:	orr	r0, r0, r3, lsl #24
   1422c:	lsr	r3, r3, #8
   14230:	orr	r0, r0, r2
   14234:	and	r3, r3, #65280	; 0xff00
   14238:	orr	r0, r0, r3
   1423c:	bl	141b0 <__assert_fail@plt+0x36e0>
   14240:	ldr	r3, [r4, #20]
   14244:	lsr	r1, r3, #24
   14248:	lsl	r2, r3, #8
   1424c:	orr	r1, r1, r3, lsl #24
   14250:	and	r2, r2, #16711680	; 0xff0000
   14254:	lsr	r3, r3, #8
   14258:	orr	r1, r1, r2
   1425c:	and	r3, r3, #65280	; 0xff00
   14260:	orr	r1, r1, r3
   14264:	cmp	r1, #1
   14268:	mov	r5, r0
   1426c:	bls	14458 <__assert_fail@plt+0x3988>
   14270:	ldr	r2, [r4, #24]
   14274:	lsr	r3, r2, #24
   14278:	lsl	ip, r2, #8
   1427c:	orr	r3, r3, r2, lsl #24
   14280:	and	ip, ip, #16711680	; 0xff0000
   14284:	lsr	r2, r2, #8
   14288:	and	r2, r2, #65280	; 0xff00
   1428c:	orr	r3, r3, ip
   14290:	orr	r3, r3, r2
   14294:	cmp	r1, r3
   14298:	movcs	r2, #0
   1429c:	movcc	r2, #1
   142a0:	cmp	r3, #17
   142a4:	movls	r3, r2
   142a8:	orrhi	r3, r2, #1
   142ac:	cmp	r3, #0
   142b0:	bne	14458 <__assert_fail@plt+0x3988>
   142b4:	ldr	r2, [r4, #4]
   142b8:	lsr	r3, r2, #24
   142bc:	lsl	ip, r2, #8
   142c0:	orr	r3, r3, r2, lsl #24
   142c4:	and	ip, ip, #16711680	; 0xff0000
   142c8:	lsr	r2, r2, #8
   142cc:	orr	r3, r3, ip
   142d0:	and	r2, r2, #65280	; 0xff00
   142d4:	orr	r3, r3, r2
   142d8:	cmp	r0, r3
   142dc:	bhi	14448 <__assert_fail@plt+0x3978>
   142e0:	cmp	r3, #0
   142e4:	blt	14448 <__assert_fail@plt+0x3978>
   142e8:	ldr	ip, [r4, #16]
   142ec:	lsr	r2, ip, #24
   142f0:	lsl	lr, ip, #8
   142f4:	orr	r2, r2, ip, lsl #24
   142f8:	and	lr, lr, #16711680	; 0xff0000
   142fc:	lsr	ip, ip, #8
   14300:	and	ip, ip, #65280	; 0xff00
   14304:	orr	r2, r2, lr
   14308:	orr	r2, r2, ip
   1430c:	cmp	r0, r2
   14310:	movhi	ip, #0
   14314:	movls	ip, #1
   14318:	cmp	r3, r2
   1431c:	movcc	ip, #0
   14320:	cmp	ip, #0
   14324:	beq	14448 <__assert_fail@plt+0x3978>
   14328:	ldr	ip, [r4, #8]
   1432c:	lsr	r2, ip, #24
   14330:	lsr	lr, ip, #8
   14334:	orr	r2, r2, ip, lsl #24
   14338:	and	lr, lr, #65280	; 0xff00
   1433c:	lsl	ip, ip, #8
   14340:	and	ip, ip, #16711680	; 0xff0000
   14344:	orr	r2, r2, lr
   14348:	orr	r2, r2, ip
   1434c:	cmp	r0, r2
   14350:	movhi	ip, #0
   14354:	movls	ip, #1
   14358:	cmp	r3, r2
   1435c:	movcc	ip, #0
   14360:	cmp	r1, #16
   14364:	bhi	143fc <__assert_fail@plt+0x392c>
   14368:	cmp	ip, #0
   1436c:	beq	14448 <__assert_fail@plt+0x3978>
   14370:	ldr	r1, [r4, #12]
   14374:	lsr	r2, r1, #24
   14378:	lsl	ip, r1, #8
   1437c:	orr	r2, r2, r1, lsl #24
   14380:	and	ip, ip, #16711680	; 0xff0000
   14384:	lsr	r1, r1, #8
   14388:	orr	r2, r2, ip
   1438c:	and	r1, r1, #65280	; 0xff00
   14390:	orr	r2, r2, r1
   14394:	cmp	r5, r2
   14398:	movhi	r0, #0
   1439c:	movls	r0, #1
   143a0:	cmp	r3, r2
   143a4:	movcc	r0, #0
   143a8:	cmp	r0, #0
   143ac:	beq	14448 <__assert_fail@plt+0x3978>
   143b0:	ldr	r0, [r4, #32]
   143b4:	lsr	r1, r0, #24
   143b8:	lsl	ip, r0, #8
   143bc:	orr	r1, r1, r0, lsl #24
   143c0:	and	ip, ip, #16711680	; 0xff0000
   143c4:	lsr	r0, r0, #8
   143c8:	and	r0, r0, #65280	; 0xff00
   143cc:	orr	r1, r1, ip
   143d0:	orr	r1, r1, r0
   143d4:	adds	r2, r1, r2
   143d8:	movcc	r1, #1
   143dc:	movcs	r1, #0
   143e0:	cmp	r3, r2
   143e4:	movcc	r2, #0
   143e8:	andcs	r2, r1, #1
   143ec:	cmp	r2, #0
   143f0:	mvneq	r0, #7
   143f4:	movne	r0, #0
   143f8:	pop	{r4, r5, r6, pc}
   143fc:	cmp	ip, #0
   14400:	beq	14448 <__assert_fail@plt+0x3978>
   14404:	ldr	ip, [r4, #36]	; 0x24
   14408:	lsr	r1, ip, #24
   1440c:	lsl	lr, ip, #8
   14410:	orr	r1, r1, ip, lsl #24
   14414:	and	lr, lr, #16711680	; 0xff0000
   14418:	lsr	ip, ip, #8
   1441c:	orr	r1, r1, lr
   14420:	and	ip, ip, #65280	; 0xff00
   14424:	orr	r1, r1, ip
   14428:	adds	r2, r2, r1
   1442c:	movcc	r1, #1
   14430:	movcs	r1, #0
   14434:	cmp	r3, r2
   14438:	movcc	r2, #0
   1443c:	andcs	r2, r1, #1
   14440:	cmp	r2, #0
   14444:	bne	14370 <__assert_fail@plt+0x38a0>
   14448:	mvn	r0, #7
   1444c:	pop	{r4, r5, r6, pc}
   14450:	mvn	r0, #8
   14454:	bx	lr
   14458:	mvn	r0, #9
   1445c:	pop	{r4, r5, r6, pc}
   14460:	andle	pc, sp, sp, ror #29
   14464:	push	{r4, r5, lr}
   14468:	ldr	ip, [r0, #8]
   1446c:	lsr	r3, ip, #24
   14470:	lsl	lr, ip, #8
   14474:	orr	r3, r3, ip, lsl #24
   14478:	and	lr, lr, #16711680	; 0xff0000
   1447c:	lsr	ip, ip, #8
   14480:	orr	r3, r3, lr
   14484:	and	ip, ip, #65280	; 0xff00
   14488:	orr	r3, r3, ip
   1448c:	adds	r3, r1, r3
   14490:	bcs	14530 <__assert_fail@plt+0x3a60>
   14494:	adds	r5, r3, r2
   14498:	bcs	14530 <__assert_fail@plt+0x3a60>
   1449c:	ldr	ip, [r0, #4]
   144a0:	lsr	lr, ip, #24
   144a4:	lsl	r4, ip, #8
   144a8:	orr	lr, lr, ip, lsl #24
   144ac:	and	r4, r4, #16711680	; 0xff0000
   144b0:	lsr	ip, ip, #8
   144b4:	orr	lr, lr, r4
   144b8:	and	ip, ip, #65280	; 0xff00
   144bc:	orr	ip, lr, ip
   144c0:	cmp	r5, ip
   144c4:	bhi	14530 <__assert_fail@plt+0x3a60>
   144c8:	ldr	ip, [r0, #20]
   144cc:	lsr	lr, ip, #24
   144d0:	lsl	r4, ip, #8
   144d4:	orr	lr, lr, ip, lsl #24
   144d8:	and	r4, r4, #16711680	; 0xff0000
   144dc:	lsr	ip, ip, #8
   144e0:	orr	lr, lr, r4
   144e4:	and	ip, ip, #65280	; 0xff00
   144e8:	orr	ip, lr, ip
   144ec:	cmp	ip, #16
   144f0:	bls	14528 <__assert_fail@plt+0x3a58>
   144f4:	adds	r1, r1, r2
   144f8:	bcs	14530 <__assert_fail@plt+0x3a60>
   144fc:	ldr	r2, [r0, #36]	; 0x24
   14500:	lsr	ip, r2, #24
   14504:	lsl	lr, r2, #8
   14508:	orr	ip, ip, r2, lsl #24
   1450c:	and	lr, lr, #16711680	; 0xff0000
   14510:	lsr	r2, r2, #8
   14514:	orr	ip, ip, lr
   14518:	and	r2, r2, #65280	; 0xff00
   1451c:	orr	r2, ip, r2
   14520:	cmp	r1, r2
   14524:	bhi	14530 <__assert_fail@plt+0x3a60>
   14528:	add	r0, r0, r3
   1452c:	pop	{r4, r5, pc}
   14530:	mov	r0, #0
   14534:	pop	{r4, r5, pc}
   14538:	mvn	r3, #7
   1453c:	push	{r4, r5, r6, r7, r8, lr}
   14540:	mov	r6, r2
   14544:	str	r3, [r2]
   14548:	mov	r2, #4
   1454c:	mov	r7, r0
   14550:	mov	r8, r1
   14554:	bl	14464 <__assert_fail@plt+0x3994>
   14558:	cmp	r0, #0
   1455c:	beq	145ec <__assert_fail@plt+0x3b1c>
   14560:	ldr	r3, [r0]
   14564:	mvn	r2, #10
   14568:	str	r2, [r6]
   1456c:	lsr	r5, r3, #24
   14570:	lsl	r2, r3, #8
   14574:	orr	r5, r5, r3, lsl #24
   14578:	and	r2, r2, #16711680	; 0xff0000
   1457c:	lsr	r3, r3, #8
   14580:	and	r3, r3, #65280	; 0xff00
   14584:	orr	r5, r5, r2
   14588:	orr	r5, r5, r3
   1458c:	sub	r3, r5, #1
   14590:	add	r4, r8, #4
   14594:	cmp	r3, #8
   14598:	addls	pc, pc, r3, lsl #2
   1459c:	b	145ec <__assert_fail@plt+0x3b1c>
   145a0:	b	145d0 <__assert_fail@plt+0x3b00>
   145a4:	b	14684 <__assert_fail@plt+0x3bb4>
   145a8:	b	145f8 <__assert_fail@plt+0x3b28>
   145ac:	b	14684 <__assert_fail@plt+0x3bb4>
   145b0:	b	145ec <__assert_fail@plt+0x3b1c>
   145b4:	b	145ec <__assert_fail@plt+0x3b1c>
   145b8:	b	145ec <__assert_fail@plt+0x3b1c>
   145bc:	b	145ec <__assert_fail@plt+0x3b1c>
   145c0:	b	14684 <__assert_fail@plt+0x3bb4>
   145c4:	ldrb	r3, [r0]
   145c8:	cmp	r3, #0
   145cc:	beq	14684 <__assert_fail@plt+0x3bb4>
   145d0:	mov	r1, r4
   145d4:	mov	r2, #1
   145d8:	mov	r0, r7
   145dc:	bl	14464 <__assert_fail@plt+0x3994>
   145e0:	add	r4, r4, #1
   145e4:	cmp	r0, #0
   145e8:	bne	145c4 <__assert_fail@plt+0x3af4>
   145ec:	mov	r5, #9
   145f0:	mov	r0, r5
   145f4:	pop	{r4, r5, r6, r7, r8, pc}
   145f8:	mov	r1, r4
   145fc:	mov	r2, #4
   14600:	mov	r0, r7
   14604:	bl	14464 <__assert_fail@plt+0x3994>
   14608:	cmp	r0, #0
   1460c:	beq	145ec <__assert_fail@plt+0x3b1c>
   14610:	ldr	r3, [r0]
   14614:	ldr	r2, [r7, #20]
   14618:	add	r1, r8, #12
   1461c:	lsr	r4, r3, #24
   14620:	lsl	ip, r3, #8
   14624:	orr	r4, r4, r3, lsl #24
   14628:	and	ip, ip, #16711680	; 0xff0000
   1462c:	lsr	r0, r3, #8
   14630:	orr	r4, r4, ip
   14634:	lsr	r3, r2, #24
   14638:	lsl	ip, r2, #8
   1463c:	orr	r3, r3, r2, lsl #24
   14640:	and	ip, ip, #16711680	; 0xff0000
   14644:	lsr	r2, r2, #8
   14648:	orr	r3, r3, ip
   1464c:	and	r2, r2, #65280	; 0xff00
   14650:	orr	r2, r3, r2
   14654:	and	r0, r0, #65280	; 0xff00
   14658:	cmp	r2, #15
   1465c:	orr	r4, r4, r0
   14660:	movls	r3, #1
   14664:	movhi	r3, #0
   14668:	cmp	r4, #7
   1466c:	movls	r3, #0
   14670:	cmp	r3, #0
   14674:	add	r4, r1, r4
   14678:	beq	14684 <__assert_fail@plt+0x3bb4>
   1467c:	tst	r1, #7
   14680:	addne	r4, r4, #4
   14684:	mov	r0, r7
   14688:	sub	r2, r4, r8
   1468c:	mov	r1, r8
   14690:	bl	14464 <__assert_fail@plt+0x3994>
   14694:	cmp	r0, #0
   14698:	beq	145ec <__assert_fail@plt+0x3b1c>
   1469c:	add	r4, r4, #3
   146a0:	bic	r4, r4, #3
   146a4:	str	r4, [r6]
   146a8:	mov	r0, r5
   146ac:	pop	{r4, r5, r6, r7, r8, pc}
   146b0:	push	{lr}		; (str lr, [sp, #-4]!)
   146b4:	sub	sp, sp, #12
   146b8:	subs	r3, r1, #0
   146bc:	str	r1, [sp, #4]
   146c0:	blt	146e8 <__assert_fail@plt+0x3c18>
   146c4:	tst	r3, #3
   146c8:	bne	146e8 <__assert_fail@plt+0x3c18>
   146cc:	add	r2, sp, #4
   146d0:	bl	14538 <__assert_fail@plt+0x3a68>
   146d4:	cmp	r0, #1
   146d8:	bne	146e8 <__assert_fail@plt+0x3c18>
   146dc:	ldr	r0, [sp, #4]
   146e0:	add	sp, sp, #12
   146e4:	pop	{pc}		; (ldr pc, [sp], #4)
   146e8:	mvn	r0, #3
   146ec:	b	146e0 <__assert_fail@plt+0x3c10>
   146f0:	push	{lr}		; (str lr, [sp, #-4]!)
   146f4:	sub	sp, sp, #12
   146f8:	subs	r3, r1, #0
   146fc:	str	r1, [sp, #4]
   14700:	blt	14728 <__assert_fail@plt+0x3c58>
   14704:	tst	r3, #3
   14708:	bne	14728 <__assert_fail@plt+0x3c58>
   1470c:	add	r2, sp, #4
   14710:	bl	14538 <__assert_fail@plt+0x3a68>
   14714:	cmp	r0, #3
   14718:	bne	14728 <__assert_fail@plt+0x3c58>
   1471c:	ldr	r0, [sp, #4]
   14720:	add	sp, sp, #12
   14724:	pop	{pc}		; (ldr pc, [sp], #4)
   14728:	mvn	r0, #3
   1472c:	b	14720 <__assert_fail@plt+0x3c50>
   14730:	ldr	r3, [pc, #244]	; 1482c <__assert_fail@plt+0x3d5c>
   14734:	ldr	ip, [pc, #244]	; 14830 <__assert_fail@plt+0x3d60>
   14738:	add	r3, pc, r3
   1473c:	push	{r4, r5, r6, r7, r8, lr}
   14740:	sub	sp, sp, #8
   14744:	ldr	r8, [r3, ip]
   14748:	mov	r4, #0
   1474c:	cmp	r1, #0
   14750:	ldr	r3, [r8]
   14754:	mov	r5, r2
   14758:	str	r4, [sp]
   1475c:	mov	r6, r0
   14760:	str	r3, [sp, #4]
   14764:	bge	14808 <__assert_fail@plt+0x3d38>
   14768:	mov	r7, sp
   1476c:	mov	r2, r7
   14770:	mov	r1, r4
   14774:	mov	r0, r6
   14778:	bl	14538 <__assert_fail@plt+0x3a68>
   1477c:	cmp	r0, #2
   14780:	beq	1479c <__assert_fail@plt+0x3ccc>
   14784:	cmp	r0, #9
   14788:	beq	147ec <__assert_fail@plt+0x3d1c>
   1478c:	cmp	r0, #1
   14790:	beq	147c0 <__assert_fail@plt+0x3cf0>
   14794:	ldr	r4, [sp]
   14798:	b	1476c <__assert_fail@plt+0x3c9c>
   1479c:	cmp	r5, #0
   147a0:	beq	14794 <__assert_fail@plt+0x3cc4>
   147a4:	ldr	r3, [r5]
   147a8:	sub	r3, r3, #1
   147ac:	cmp	r3, #0
   147b0:	str	r3, [r5]
   147b4:	bge	14794 <__assert_fail@plt+0x3cc4>
   147b8:	ldr	r4, [sp]
   147bc:	b	147d0 <__assert_fail@plt+0x3d00>
   147c0:	cmp	r5, #0
   147c4:	ldrne	r3, [r5]
   147c8:	addne	r3, r3, #1
   147cc:	strne	r3, [r5]
   147d0:	ldr	r2, [sp, #4]
   147d4:	ldr	r3, [r8]
   147d8:	mov	r0, r4
   147dc:	cmp	r2, r3
   147e0:	bne	14828 <__assert_fail@plt+0x3d58>
   147e4:	add	sp, sp, #8
   147e8:	pop	{r4, r5, r6, r7, r8, pc}
   147ec:	ldr	r4, [sp]
   147f0:	cmp	r4, #0
   147f4:	bge	14820 <__assert_fail@plt+0x3d50>
   147f8:	cmp	r5, #0
   147fc:	cmneq	r4, #8
   14800:	mvneq	r4, #0
   14804:	b	147d0 <__assert_fail@plt+0x3d00>
   14808:	bl	146b0 <__assert_fail@plt+0x3be0>
   1480c:	cmp	r0, #0
   14810:	mov	r4, r0
   14814:	str	r0, [sp]
   14818:	bge	14768 <__assert_fail@plt+0x3c98>
   1481c:	b	147d0 <__assert_fail@plt+0x3d00>
   14820:	mvn	r4, #0
   14824:	b	147d0 <__assert_fail@plt+0x3d00>
   14828:	bl	1098c <__stack_chk_fail@plt>
   1482c:	andeq	r2, r1, r4, lsl #16
   14830:	andeq	r0, r0, r0, lsr #1
   14834:	ldr	r3, [pc, #96]	; 1489c <__assert_fail@plt+0x3dcc>
   14838:	ldr	ip, [pc, #96]	; 148a0 <__assert_fail@plt+0x3dd0>
   1483c:	add	r3, pc, r3
   14840:	push	{r4, lr}
   14844:	sub	sp, sp, #8
   14848:	ldr	r4, [r3, ip]
   1484c:	mov	lr, #0
   14850:	mov	r2, sp
   14854:	ldr	r3, [r4]
   14858:	str	lr, [sp]
   1485c:	str	r3, [sp, #4]
   14860:	bl	14730 <__assert_fail@plt+0x3c60>
   14864:	cmp	r0, #0
   14868:	blt	14890 <__assert_fail@plt+0x3dc0>
   1486c:	ldr	r3, [sp]
   14870:	cmp	r3, #1
   14874:	mvnne	r0, #0
   14878:	ldr	r2, [sp, #4]
   1487c:	ldr	r3, [r4]
   14880:	cmp	r2, r3
   14884:	bne	14898 <__assert_fail@plt+0x3dc8>
   14888:	add	sp, sp, #8
   1488c:	pop	{r4, pc}
   14890:	mvn	r0, #0
   14894:	b	14878 <__assert_fail@plt+0x3da8>
   14898:	bl	1098c <__stack_chk_fail@plt>
   1489c:	andeq	r2, r1, r0, lsl #14
   148a0:	andeq	r0, r0, r0, lsr #1
   148a4:	ldr	r3, [pc, #124]	; 14928 <__assert_fail@plt+0x3e58>
   148a8:	ldr	r2, [pc, #124]	; 1492c <__assert_fail@plt+0x3e5c>
   148ac:	add	r3, pc, r3
   148b0:	push	{r4, r5, r6, lr}
   148b4:	sub	sp, sp, #8
   148b8:	ldr	r6, [r3, r2]
   148bc:	mov	r2, #1
   148c0:	mov	r5, r0
   148c4:	ldr	r3, [r6]
   148c8:	mov	r4, sp
   148cc:	str	r2, [sp]
   148d0:	str	r3, [sp, #4]
   148d4:	b	148ec <__assert_fail@plt+0x3e1c>
   148d8:	ldr	r3, [sp]
   148dc:	cmp	r3, #0
   148e0:	ble	14900 <__assert_fail@plt+0x3e30>
   148e4:	cmp	r3, #1
   148e8:	beq	1491c <__assert_fail@plt+0x3e4c>
   148ec:	mov	r2, r4
   148f0:	mov	r0, r5
   148f4:	bl	14730 <__assert_fail@plt+0x3c60>
   148f8:	subs	r1, r0, #0
   148fc:	bge	148d8 <__assert_fail@plt+0x3e08>
   14900:	mvn	r0, #0
   14904:	ldr	r2, [sp, #4]
   14908:	ldr	r3, [r6]
   1490c:	cmp	r2, r3
   14910:	bne	14924 <__assert_fail@plt+0x3e54>
   14914:	add	sp, sp, #8
   14918:	pop	{r4, r5, r6, pc}
   1491c:	mov	r0, r1
   14920:	b	14904 <__assert_fail@plt+0x3e34>
   14924:	bl	1098c <__stack_chk_fail@plt>
   14928:	muleq	r1, r0, r6
   1492c:	andeq	r0, r0, r0, lsr #1
   14930:	push	{r4, r5, r6, r7, r8, lr}
   14934:	mov	r4, r0
   14938:	mov	r0, r2
   1493c:	mov	r5, r1
   14940:	mov	r7, r2
   14944:	bl	10a28 <strlen@plt>
   14948:	add	r6, r0, #1
   1494c:	sub	r5, r5, r6
   14950:	adds	r5, r4, r5
   14954:	bcc	14968 <__assert_fail@plt+0x3e98>
   14958:	b	14988 <__assert_fail@plt+0x3eb8>
   1495c:	add	r4, r4, #1
   14960:	cmp	r5, r4
   14964:	bcc	14988 <__assert_fail@plt+0x3eb8>
   14968:	mov	r2, r6
   1496c:	mov	r1, r7
   14970:	mov	r0, r4
   14974:	bl	10980 <memcmp@plt>
   14978:	cmp	r0, #0
   1497c:	bne	1495c <__assert_fail@plt+0x3e8c>
   14980:	mov	r0, r4
   14984:	pop	{r4, r5, r6, r7, r8, pc}
   14988:	mov	r0, #0
   1498c:	pop	{r4, r5, r6, r7, r8, pc}
   14990:	push	{r4, r5, r6, r7, r8, lr}
   14994:	mov	r5, r1
   14998:	mov	r6, r2
   1499c:	mov	r7, r0
   149a0:	bl	140cc <__assert_fail@plt+0x35fc>
   149a4:	subs	r4, r0, #0
   149a8:	bne	149e4 <__assert_fail@plt+0x3f14>
   149ac:	ldr	r3, [r7, #4]
   149b0:	lsr	r0, r3, #24
   149b4:	lsl	r2, r3, #8
   149b8:	orr	r0, r0, r3, lsl #24
   149bc:	and	r2, r2, #16711680	; 0xff0000
   149c0:	lsr	r3, r3, #8
   149c4:	orr	r0, r0, r2
   149c8:	and	r3, r3, #65280	; 0xff00
   149cc:	orr	r2, r0, r3
   149d0:	cmp	r6, r2
   149d4:	bcc	149ec <__assert_fail@plt+0x3f1c>
   149d8:	mov	r1, r7
   149dc:	mov	r0, r5
   149e0:	bl	10950 <memmove@plt>
   149e4:	mov	r0, r4
   149e8:	pop	{r4, r5, r6, r7, r8, pc}
   149ec:	mvn	r4, #2
   149f0:	b	149e4 <__assert_fail@plt+0x3f14>
   149f4:	push	{lr}		; (str lr, [sp, #-4]!)
   149f8:	lsl	r1, r1, #4
   149fc:	ldr	r2, [r0, #16]
   14a00:	lsr	r3, r2, #24
   14a04:	lsl	lr, r2, #8
   14a08:	orr	r3, r3, r2, lsl #24
   14a0c:	and	lr, lr, #16711680	; 0xff0000
   14a10:	lsr	r2, r2, #8
   14a14:	orr	r3, r3, lr
   14a18:	and	r2, r2, #65280	; 0xff00
   14a1c:	orr	r3, r3, r2
   14a20:	adds	r1, r1, r3
   14a24:	bcs	14a6c <__assert_fail@plt+0x3f9c>
   14a28:	ldr	lr, [r0, #4]
   14a2c:	lsr	r2, lr, #24
   14a30:	lsl	r3, lr, #8
   14a34:	orr	r2, r2, lr, lsl #24
   14a38:	and	r3, r3, #16711680	; 0xff0000
   14a3c:	lsr	lr, lr, #8
   14a40:	orr	r2, r2, r3
   14a44:	and	lr, lr, #65280	; 0xff00
   14a48:	orr	r2, r2, lr
   14a4c:	sub	r2, r2, #16
   14a50:	cmp	r1, r2
   14a54:	bhi	14a60 <__assert_fail@plt+0x3f90>
   14a58:	add	r0, r0, r1
   14a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a60:	mov	ip, #0
   14a64:	mov	r0, ip
   14a68:	pop	{pc}		; (ldr pc, [sp], #4)
   14a6c:	mov	r0, #0
   14a70:	pop	{pc}		; (ldr pc, [sp], #4)
   14a74:	push	{r4, r5, r6, lr}
   14a78:	mov	r6, r2
   14a7c:	mov	r4, r0
   14a80:	mov	r5, r1
   14a84:	bl	146f0 <__assert_fail@plt+0x3c20>
   14a88:	cmp	r0, #0
   14a8c:	blt	14af0 <__assert_fail@plt+0x4020>
   14a90:	ldr	r3, [r4, #8]
   14a94:	cmp	r6, #0
   14a98:	lsr	r0, r3, #24
   14a9c:	lsl	r2, r3, #8
   14aa0:	orr	r0, r0, r3, lsl #24
   14aa4:	and	r2, r2, #16711680	; 0xff0000
   14aa8:	lsr	r3, r3, #8
   14aac:	orr	r0, r0, r2
   14ab0:	and	r3, r3, #65280	; 0xff00
   14ab4:	orr	r0, r0, r3
   14ab8:	add	r0, r0, r5
   14abc:	add	r0, r4, r0
   14ac0:	popeq	{r4, r5, r6, pc}
   14ac4:	ldr	r3, [r0, #4]
   14ac8:	lsr	r2, r3, #24
   14acc:	lsl	r1, r3, #8
   14ad0:	orr	r2, r2, r3, lsl #24
   14ad4:	and	r1, r1, #16711680	; 0xff0000
   14ad8:	lsr	r3, r3, #8
   14adc:	orr	r2, r2, r1
   14ae0:	and	r3, r3, #65280	; 0xff00
   14ae4:	orr	r3, r2, r3
   14ae8:	str	r3, [r6]
   14aec:	pop	{r4, r5, r6, pc}
   14af0:	cmp	r6, #0
   14af4:	strne	r0, [r6]
   14af8:	mov	r0, #0
   14afc:	pop	{r4, r5, r6, pc}
   14b00:	ldr	r3, [pc, #136]	; 14b90 <__assert_fail@plt+0x40c0>
   14b04:	ldr	r2, [pc, #136]	; 14b94 <__assert_fail@plt+0x40c4>
   14b08:	add	r3, pc, r3
   14b0c:	push	{r4, r5, r6, r7, lr}
   14b10:	sub	sp, sp, #12
   14b14:	ldr	r5, [r3, r2]
   14b18:	mov	r6, r0
   14b1c:	mov	r4, r1
   14b20:	ldr	r3, [r5]
   14b24:	mov	r7, sp
   14b28:	str	r3, [sp, #4]
   14b2c:	mov	r2, r7
   14b30:	mov	r1, r4
   14b34:	mov	r0, r6
   14b38:	bl	14538 <__assert_fail@plt+0x3a68>
   14b3c:	cmp	r0, #3
   14b40:	beq	14b70 <__assert_fail@plt+0x40a0>
   14b44:	cmp	r0, #9
   14b48:	bne	14b78 <__assert_fail@plt+0x40a8>
   14b4c:	ldr	r0, [sp]
   14b50:	cmp	r0, #0
   14b54:	mvnge	r0, #10
   14b58:	ldr	r2, [sp, #4]
   14b5c:	ldr	r3, [r5]
   14b60:	cmp	r2, r3
   14b64:	bne	14b8c <__assert_fail@plt+0x40bc>
   14b68:	add	sp, sp, #12
   14b6c:	pop	{r4, r5, r6, r7, pc}
   14b70:	mov	r0, r4
   14b74:	b	14b58 <__assert_fail@plt+0x4088>
   14b78:	cmp	r0, #4
   14b7c:	ldr	r4, [sp]
   14b80:	beq	14b2c <__assert_fail@plt+0x405c>
   14b84:	mvn	r0, #0
   14b88:	b	14b58 <__assert_fail@plt+0x4088>
   14b8c:	bl	1098c <__stack_chk_fail@plt>
   14b90:	andeq	r2, r1, r4, lsr r4
   14b94:	andeq	r0, r0, r0, lsr #1
   14b98:	push	{r4, r5, r6, r7, r8, lr}
   14b9c:	mov	r4, r0
   14ba0:	mov	r6, r1
   14ba4:	mov	r5, r2
   14ba8:	ldr	r7, [r0, #12]
   14bac:	bl	140cc <__assert_fail@plt+0x35fc>
   14bb0:	cmp	r0, #0
   14bb4:	bne	14d18 <__assert_fail@plt+0x4248>
   14bb8:	ldr	r2, [r4, #4]
   14bbc:	lsr	r3, r7, #24
   14bc0:	lsl	lr, r7, #8
   14bc4:	lsr	r1, r2, #24
   14bc8:	lsl	r0, r2, #8
   14bcc:	orr	r3, r3, r7, lsl #24
   14bd0:	and	lr, lr, #16711680	; 0xff0000
   14bd4:	lsr	ip, r7, #8
   14bd8:	orr	r1, r1, r2, lsl #24
   14bdc:	and	r0, r0, #16711680	; 0xff0000
   14be0:	lsr	r2, r2, #8
   14be4:	orr	r3, r3, lr
   14be8:	and	ip, ip, #65280	; 0xff00
   14bec:	orr	r1, r1, r0
   14bf0:	and	r2, r2, #65280	; 0xff00
   14bf4:	orr	r3, r3, ip
   14bf8:	orr	r2, r1, r2
   14bfc:	add	r3, r3, r6
   14c00:	cmp	r3, r2
   14c04:	bcs	14d14 <__assert_fail@plt+0x4244>
   14c08:	ldr	r1, [r4]
   14c0c:	ldr	lr, [pc, #316]	; 14d50 <__assert_fail@plt+0x4280>
   14c10:	sub	r2, r2, r3
   14c14:	lsr	r0, r1, #24
   14c18:	lsl	ip, r1, #8
   14c1c:	orr	r0, r0, r1, lsl #24
   14c20:	and	ip, ip, #16711680	; 0xff0000
   14c24:	lsr	r1, r1, #8
   14c28:	orr	r0, r0, ip
   14c2c:	and	r1, r1, #65280	; 0xff00
   14c30:	orr	r1, r0, r1
   14c34:	cmp	r1, lr
   14c38:	beq	14cb4 <__assert_fail@plt+0x41e4>
   14c3c:	ldr	r0, [pc, #272]	; 14d54 <__assert_fail@plt+0x4284>
   14c40:	cmp	r1, r0
   14c44:	bne	14d30 <__assert_fail@plt+0x4260>
   14c48:	cmp	r6, #0
   14c4c:	bge	14d14 <__assert_fail@plt+0x4244>
   14c50:	ldr	r0, [r4, #32]
   14c54:	lsr	r1, r0, #24
   14c58:	lsl	ip, r0, #8
   14c5c:	orr	r1, r1, r0, lsl #24
   14c60:	and	ip, ip, #16711680	; 0xff0000
   14c64:	lsr	r0, r0, #8
   14c68:	orr	r1, r1, ip
   14c6c:	and	r0, r0, #65280	; 0xff00
   14c70:	orr	r1, r1, r0
   14c74:	rsb	r1, r1, #0
   14c78:	cmp	r6, r1
   14c7c:	bcc	14d14 <__assert_fail@plt+0x4244>
   14c80:	rsb	r6, r6, #0
   14c84:	cmp	r2, r6
   14c88:	movcs	r2, r6
   14c8c:	add	r4, r4, r3
   14c90:	mov	r0, r4
   14c94:	mov	r1, #0
   14c98:	bl	10a94 <memchr@plt>
   14c9c:	cmp	r0, #0
   14ca0:	beq	14d48 <__assert_fail@plt+0x4278>
   14ca4:	cmp	r5, #0
   14ca8:	subne	r0, r0, r4
   14cac:	strne	r0, [r5]
   14cb0:	b	14d28 <__assert_fail@plt+0x4258>
   14cb4:	cmp	r6, #0
   14cb8:	blt	14d14 <__assert_fail@plt+0x4244>
   14cbc:	ldr	r1, [r4, #20]
   14cc0:	lsr	r0, r1, #24
   14cc4:	lsl	ip, r1, #8
   14cc8:	orr	r0, r0, r1, lsl #24
   14ccc:	and	ip, ip, #16711680	; 0xff0000
   14cd0:	lsr	r1, r1, #8
   14cd4:	orr	r0, r0, ip
   14cd8:	and	r1, r1, #65280	; 0xff00
   14cdc:	orr	r1, r0, r1
   14ce0:	cmp	r1, #16
   14ce4:	bls	14c8c <__assert_fail@plt+0x41bc>
   14ce8:	ldr	r0, [r4, #32]
   14cec:	lsr	r1, r0, #24
   14cf0:	lsl	ip, r0, #8
   14cf4:	orr	r1, r1, r0, lsl #24
   14cf8:	and	ip, ip, #16711680	; 0xff0000
   14cfc:	lsr	r0, r0, #8
   14d00:	orr	r1, r1, ip
   14d04:	and	r0, r0, #65280	; 0xff00
   14d08:	orr	r1, r1, r0
   14d0c:	cmp	r6, r1
   14d10:	bcc	14d38 <__assert_fail@plt+0x4268>
   14d14:	mvn	r0, #3
   14d18:	cmp	r5, #0
   14d1c:	movne	r4, #0
   14d20:	moveq	r4, r5
   14d24:	strne	r0, [r5]
   14d28:	mov	r0, r4
   14d2c:	pop	{r4, r5, r6, r7, r8, pc}
   14d30:	mvn	r0, #12
   14d34:	b	14d18 <__assert_fail@plt+0x4248>
   14d38:	sub	r1, r1, r6
   14d3c:	cmp	r2, r1
   14d40:	movcs	r2, r1
   14d44:	b	14c8c <__assert_fail@plt+0x41bc>
   14d48:	mvn	r0, #7
   14d4c:	b	14d18 <__assert_fail@plt+0x4248>
   14d50:	andle	pc, sp, sp, ror #29
   14d54:	svccs	0x00f20112
   14d58:	mov	r2, #0
   14d5c:	b	14b98 <__assert_fail@plt+0x40c8>
   14d60:	ldr	ip, [pc, #308]	; 14e9c <__assert_fail@plt+0x43cc>
   14d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d68:	add	ip, pc, ip
   14d6c:	ldr	lr, [pc, #300]	; 14ea0 <__assert_fail@plt+0x43d0>
   14d70:	sub	sp, sp, #28
   14d74:	mov	r5, r3
   14d78:	ldr	r4, [ip, lr]
   14d7c:	mov	r8, r1
   14d80:	mov	r7, r2
   14d84:	ldr	r3, [r4]
   14d88:	mov	r2, ip
   14d8c:	mov	r9, r0
   14d90:	str	r3, [sp, #20]
   14d94:	bl	140cc <__assert_fail@plt+0x35fc>
   14d98:	subs	r6, r0, #0
   14d9c:	bne	14e74 <__assert_fail@plt+0x43a4>
   14da0:	mov	r1, r8
   14da4:	mov	r0, r9
   14da8:	bl	149f4 <__assert_fail@plt+0x3f24>
   14dac:	subs	ip, r0, #0
   14db0:	beq	14e90 <__assert_fail@plt+0x43c0>
   14db4:	ldr	r0, [ip]
   14db8:	ldr	r1, [ip, #4]
   14dbc:	add	r3, sp, #8
   14dc0:	mov	r2, r3
   14dc4:	mov	lr, r0
   14dc8:	stmia	r2!, {r0, r1}
   14dcc:	ldr	r2, [sp, #12]
   14dd0:	lsl	r1, r0, #8
   14dd4:	and	r1, r1, #16711680	; 0xff0000
   14dd8:	lsr	r8, r2, #8
   14ddc:	lsl	r0, r2, #24
   14de0:	orr	r0, r0, r2, lsr #24
   14de4:	uxtb	sl, r8
   14de8:	lsr	r2, r2, #16
   14dec:	orr	r8, r0, sl, lsl #16
   14df0:	orr	r9, r1, lr, lsl #24
   14df4:	uxtb	r0, r2
   14df8:	mov	r1, #0
   14dfc:	lsr	sl, lr, #8
   14e00:	strd	r0, [sp]
   14e04:	ldr	r2, [sp]
   14e08:	and	r1, sl, #65280	; 0xff00
   14e0c:	orr	r1, r9, r1
   14e10:	orr	r2, r8, r2, lsl #8
   14e14:	orr	r1, r1, lr, lsr #24
   14e18:	str	r2, [r7]
   14e1c:	str	r1, [r7, #4]
   14e20:	ldr	r0, [ip, #8]!
   14e24:	mov	lr, r0
   14e28:	ldr	r1, [ip, #4]
   14e2c:	lsr	r8, r0, #8
   14e30:	and	r8, r8, #65280	; 0xff00
   14e34:	stmia	r3!, {r0, r1}
   14e38:	ldr	r7, [sp, #12]
   14e3c:	lsl	r3, r0, #8
   14e40:	and	r1, r3, #16711680	; 0xff0000
   14e44:	lsr	r2, r7, #8
   14e48:	lsr	r0, r7, #16
   14e4c:	uxtb	sl, r2
   14e50:	lsl	ip, r7, #24
   14e54:	orr	r3, r1, lr, lsl #24
   14e58:	orr	ip, ip, r7, lsr #24
   14e5c:	uxtb	r0, r0
   14e60:	orr	r3, r3, r8
   14e64:	orr	r2, ip, sl, lsl #16
   14e68:	orr	r3, r3, lr, lsr #24
   14e6c:	orr	r0, r2, r0, lsl #8
   14e70:	stm	r5, {r0, r3}
   14e74:	ldr	r2, [sp, #20]
   14e78:	ldr	r3, [r4]
   14e7c:	mov	r0, r6
   14e80:	cmp	r2, r3
   14e84:	bne	14e98 <__assert_fail@plt+0x43c8>
   14e88:	add	sp, sp, #28
   14e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e90:	mvn	r6, #3
   14e94:	b	14e74 <__assert_fail@plt+0x43a4>
   14e98:	bl	1098c <__stack_chk_fail@plt>
   14e9c:	ldrdeq	r2, [r1], -r4
   14ea0:	andeq	r0, r0, r0, lsr #1
   14ea4:	ldr	r3, [pc, #196]	; 14f70 <__assert_fail@plt+0x44a0>
   14ea8:	ldr	r2, [pc, #196]	; 14f74 <__assert_fail@plt+0x44a4>
   14eac:	add	r3, pc, r3
   14eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eb4:	sub	sp, sp, #28
   14eb8:	ldr	r8, [r3, r2]
   14ebc:	add	r3, sp, #8
   14ec0:	str	r3, [sp, #4]
   14ec4:	ldr	r3, [r8]
   14ec8:	mov	fp, r0
   14ecc:	mov	r9, #0
   14ed0:	str	r3, [sp, #20]
   14ed4:	b	14f38 <__assert_fail@plt+0x4468>
   14ed8:	ldr	r0, [r3, #8]!
   14edc:	ldr	r2, [sp, #4]
   14ee0:	ldr	r1, [r3, #4]
   14ee4:	stmia	r2!, {r0, r1}
   14ee8:	ldr	r3, [sp, #12]
   14eec:	ldr	ip, [sp, #8]
   14ef0:	lsr	r2, r3, #16
   14ef4:	lsr	r0, r3, #8
   14ef8:	lsl	lr, r3, #24
   14efc:	lsl	sl, ip, #8
   14f00:	orr	lr, lr, r3, lsr #24
   14f04:	uxtb	r6, r2
   14f08:	uxtb	r0, r0
   14f0c:	and	r3, sl, #16711680	; 0xff0000
   14f10:	lsr	r2, ip, #8
   14f14:	orr	r3, r3, ip, lsl #24
   14f18:	and	r1, r2, #65280	; 0xff00
   14f1c:	orr	r3, r3, r1
   14f20:	orr	r0, lr, r0, lsl #16
   14f24:	orr	r4, r0, r6, lsl #8
   14f28:	orr	r5, r3, ip, lsr #24
   14f2c:	orrs	r3, r4, r5
   14f30:	beq	14f50 <__assert_fail@plt+0x4480>
   14f34:	add	r9, r9, #1
   14f38:	mov	r1, r9
   14f3c:	mov	r0, fp
   14f40:	bl	149f4 <__assert_fail@plt+0x3f24>
   14f44:	subs	r3, r0, #0
   14f48:	bne	14ed8 <__assert_fail@plt+0x4408>
   14f4c:	mvn	r9, #7
   14f50:	ldr	r2, [sp, #20]
   14f54:	ldr	r3, [r8]
   14f58:	mov	r0, r9
   14f5c:	cmp	r2, r3
   14f60:	bne	14f6c <__assert_fail@plt+0x449c>
   14f64:	add	sp, sp, #28
   14f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f6c:	bl	1098c <__stack_chk_fail@plt>
   14f70:	muleq	r1, r0, r0
   14f74:	andeq	r0, r0, r0, lsr #1
   14f78:	push	{r4, r5, r6, r7, r8, lr}
   14f7c:	mov	r4, r0
   14f80:	mov	r7, r1
   14f84:	mov	r6, r2
   14f88:	ldr	r5, [r0, #8]
   14f8c:	bl	140cc <__assert_fail@plt+0x35fc>
   14f90:	cmp	r0, #0
   14f94:	beq	14fb0 <__assert_fail@plt+0x44e0>
   14f98:	cmp	r6, #0
   14f9c:	movne	r4, #0
   14fa0:	moveq	r4, r6
   14fa4:	strne	r0, [r6]
   14fa8:	mov	r0, r4
   14fac:	pop	{r4, r5, r6, r7, r8, pc}
   14fb0:	mov	r1, r7
   14fb4:	mov	r0, r4
   14fb8:	bl	146b0 <__assert_fail@plt+0x3be0>
   14fbc:	cmp	r0, #0
   14fc0:	blt	14f98 <__assert_fail@plt+0x44c8>
   14fc4:	ldr	r3, [r4, #20]
   14fc8:	lsr	r1, r5, #24
   14fcc:	lsl	r2, r5, #8
   14fd0:	orr	r1, r1, r5, lsl #24
   14fd4:	and	r2, r2, #16711680	; 0xff0000
   14fd8:	lsr	r5, r5, #8
   14fdc:	orr	r1, r1, r2
   14fe0:	and	r5, r5, #65280	; 0xff00
   14fe4:	lsr	r2, r3, #24
   14fe8:	orr	r5, r1, r5
   14fec:	lsl	r1, r3, #8
   14ff0:	orr	r2, r2, r3, lsl #24
   14ff4:	and	r1, r1, #16711680	; 0xff0000
   14ff8:	lsr	r3, r3, #8
   14ffc:	orr	r2, r2, r1
   15000:	and	r3, r3, #65280	; 0xff00
   15004:	add	r1, r5, r7
   15008:	orr	r3, r2, r3
   1500c:	add	r4, r4, r1
   15010:	cmp	r3, #15
   15014:	add	r4, r4, #4
   15018:	bhi	15034 <__assert_fail@plt+0x4564>
   1501c:	mov	r0, r4
   15020:	mov	r1, #47	; 0x2f
   15024:	bl	10aac <strrchr@plt>
   15028:	cmp	r0, #0
   1502c:	beq	15050 <__assert_fail@plt+0x4580>
   15030:	add	r4, r0, #1
   15034:	cmp	r6, #0
   15038:	beq	14fa8 <__assert_fail@plt+0x44d8>
   1503c:	mov	r0, r4
   15040:	bl	10a28 <strlen@plt>
   15044:	str	r0, [r6]
   15048:	mov	r0, r4
   1504c:	pop	{r4, r5, r6, r7, r8, pc}
   15050:	mvn	r0, #10
   15054:	b	14f98 <__assert_fail@plt+0x44c8>
   15058:	ldr	ip, [pc, #260]	; 15164 <__assert_fail@plt+0x4694>
   1505c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15060:	add	ip, pc, ip
   15064:	ldr	lr, [pc, #252]	; 15168 <__assert_fail@plt+0x4698>
   15068:	sub	sp, sp, #20
   1506c:	mov	r7, r3
   15070:	ldr	r9, [ip, lr]
   15074:	mov	r4, r1
   15078:	mov	r8, r2
   1507c:	ldr	r3, [r9]
   15080:	mov	r2, ip
   15084:	mov	r5, r0
   15088:	str	r3, [sp, #12]
   1508c:	bl	140cc <__assert_fail@plt+0x35fc>
   15090:	cmp	r0, #0
   15094:	bne	1513c <__assert_fail@plt+0x466c>
   15098:	cmp	r4, #0
   1509c:	str	r0, [sp, #4]
   150a0:	blt	15138 <__assert_fail@plt+0x4668>
   150a4:	add	r6, sp, #4
   150a8:	add	sl, sp, #8
   150ac:	mov	r1, r4
   150b0:	mov	r2, r6
   150b4:	mov	r0, r5
   150b8:	bl	14730 <__assert_fail@plt+0x3c60>
   150bc:	ldr	r3, [sp, #4]
   150c0:	cmp	r0, #0
   150c4:	cmpge	r3, #0
   150c8:	mov	r4, r0
   150cc:	blt	15154 <__assert_fail@plt+0x4684>
   150d0:	cmp	r3, #1
   150d4:	bne	150ac <__assert_fail@plt+0x45dc>
   150d8:	mov	r2, sl
   150dc:	mov	r1, r4
   150e0:	mov	r0, r5
   150e4:	bl	14f78 <__assert_fail@plt+0x44a8>
   150e8:	subs	fp, r0, #0
   150ec:	beq	150ac <__assert_fail@plt+0x45dc>
   150f0:	ldr	r3, [sp, #8]
   150f4:	cmp	r7, r3
   150f8:	bgt	150ac <__assert_fail@plt+0x45dc>
   150fc:	mov	r2, r7
   15100:	mov	r1, r8
   15104:	bl	10980 <memcmp@plt>
   15108:	cmp	r0, #0
   1510c:	bne	150ac <__assert_fail@plt+0x45dc>
   15110:	ldrb	fp, [fp, r7]
   15114:	cmp	fp, #0
   15118:	beq	15138 <__assert_fail@plt+0x4668>
   1511c:	mov	r2, r7
   15120:	mov	r1, #64	; 0x40
   15124:	mov	r0, r8
   15128:	bl	10a94 <memchr@plt>
   1512c:	cmp	fp, #64	; 0x40
   15130:	cmpeq	r0, #0
   15134:	bne	150ac <__assert_fail@plt+0x45dc>
   15138:	mov	r0, r4
   1513c:	ldr	r2, [sp, #12]
   15140:	ldr	r3, [r9]
   15144:	cmp	r2, r3
   15148:	bne	15160 <__assert_fail@plt+0x4690>
   1514c:	add	sp, sp, #20
   15150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15154:	cmp	r3, #0
   15158:	mvnlt	r4, #0
   1515c:	b	15138 <__assert_fail@plt+0x4668>
   15160:	bl	1098c <__stack_chk_fail@plt>
   15164:	ldrdeq	r1, [r1], -ip
   15168:	andeq	r0, r0, r0, lsr #1
   1516c:	push	{r4, r5, r6, lr}
   15170:	mov	r5, r0
   15174:	mov	r0, r2
   15178:	mov	r4, r2
   1517c:	mov	r6, r1
   15180:	bl	10a28 <strlen@plt>
   15184:	mov	r2, r4
   15188:	mov	r1, r6
   1518c:	mov	r3, r0
   15190:	mov	r0, r5
   15194:	pop	{r4, r5, r6, lr}
   15198:	b	15058 <__assert_fail@plt+0x4588>
   1519c:	push	{r4, lr}
   151a0:	mov	r4, r0
   151a4:	bl	146b0 <__assert_fail@plt+0x3be0>
   151a8:	subs	r1, r0, #0
   151ac:	poplt	{r4, pc}
   151b0:	mov	r0, r4
   151b4:	pop	{r4, lr}
   151b8:	b	14b00 <__assert_fail@plt+0x4030>
   151bc:	push	{r4, lr}
   151c0:	mov	r4, r0
   151c4:	bl	146f0 <__assert_fail@plt+0x3c20>
   151c8:	subs	r1, r0, #0
   151cc:	poplt	{r4, pc}
   151d0:	mov	r0, r4
   151d4:	pop	{r4, lr}
   151d8:	b	14b00 <__assert_fail@plt+0x4030>
   151dc:	ldr	ip, [pc, #272]	; 152f4 <__assert_fail@plt+0x4824>
   151e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151e4:	add	ip, pc, ip
   151e8:	ldr	lr, [pc, #264]	; 152f8 <__assert_fail@plt+0x4828>
   151ec:	mov	sl, r2
   151f0:	sub	sp, sp, #20
   151f4:	ldr	r2, [ip, lr]
   151f8:	mov	r9, r3
   151fc:	mov	r3, ip
   15200:	ldr	r3, [r2]
   15204:	str	r2, [sp, #4]
   15208:	mov	r5, r0
   1520c:	ldr	r7, [sp, #56]	; 0x38
   15210:	ldr	fp, [sp, #60]	; 0x3c
   15214:	str	r3, [sp, #12]
   15218:	bl	1519c <__assert_fail@plt+0x46cc>
   1521c:	subs	r4, r0, #0
   15220:	blt	152dc <__assert_fail@plt+0x480c>
   15224:	add	r8, sp, #8
   15228:	b	15240 <__assert_fail@plt+0x4770>
   1522c:	mov	r1, r4
   15230:	mov	r0, r5
   15234:	bl	151bc <__assert_fail@plt+0x46ec>
   15238:	subs	r4, r0, #0
   1523c:	blt	152dc <__assert_fail@plt+0x480c>
   15240:	mov	r2, r7
   15244:	mov	r1, r4
   15248:	mov	r0, r5
   1524c:	bl	14a74 <__assert_fail@plt+0x3fa4>
   15250:	subs	r6, r0, #0
   15254:	beq	152d8 <__assert_fail@plt+0x4808>
   15258:	ldr	r3, [r6, #8]
   1525c:	mov	r2, r8
   15260:	mov	r0, r5
   15264:	lsr	r1, r3, #24
   15268:	lsl	ip, r3, #8
   1526c:	orr	r1, r1, r3, lsl #24
   15270:	and	ip, ip, #16711680	; 0xff0000
   15274:	lsr	r3, r3, #8
   15278:	orr	r1, r1, ip
   1527c:	and	r3, r3, #65280	; 0xff00
   15280:	orr	r1, r1, r3
   15284:	bl	14b98 <__assert_fail@plt+0x40c8>
   15288:	cmp	r0, #0
   1528c:	beq	1522c <__assert_fail@plt+0x475c>
   15290:	ldr	r3, [sp, #8]
   15294:	cmp	r9, r3
   15298:	bne	1522c <__assert_fail@plt+0x475c>
   1529c:	mov	r2, r9
   152a0:	mov	r1, sl
   152a4:	bl	10980 <memcmp@plt>
   152a8:	cmp	r0, #0
   152ac:	bne	1522c <__assert_fail@plt+0x475c>
   152b0:	cmp	fp, #0
   152b4:	strne	r4, [fp]
   152b8:	ldr	r3, [sp, #4]
   152bc:	ldr	r2, [sp, #12]
   152c0:	mov	r0, r6
   152c4:	ldr	r3, [r3]
   152c8:	cmp	r2, r3
   152cc:	bne	152f0 <__assert_fail@plt+0x4820>
   152d0:	add	sp, sp, #20
   152d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152d8:	mvn	r4, #12
   152dc:	cmp	r7, #0
   152e0:	strne	r4, [r7]
   152e4:	movne	r6, #0
   152e8:	moveq	r6, r7
   152ec:	b	152b8 <__assert_fail@plt+0x47e8>
   152f0:	bl	1098c <__stack_chk_fail@plt>
   152f4:	andeq	r1, r1, r8, asr sp
   152f8:	andeq	r0, r0, r0, lsr #1
   152fc:	push	{r4, lr}
   15300:	ldr	r3, [r0, #20]
   15304:	lsr	ip, r3, #24
   15308:	lsl	lr, r3, #8
   1530c:	orr	ip, ip, r3, lsl #24
   15310:	and	lr, lr, #16711680	; 0xff0000
   15314:	lsr	r3, r3, #8
   15318:	orr	ip, ip, lr
   1531c:	and	r3, r3, #65280	; 0xff00
   15320:	orr	r3, ip, r3
   15324:	cmp	r3, #15
   15328:	bls	15334 <__assert_fail@plt+0x4864>
   1532c:	pop	{r4, lr}
   15330:	b	14a74 <__assert_fail@plt+0x3fa4>
   15334:	cmp	r2, #0
   15338:	mov	r4, r2
   1533c:	mvnne	r3, #9
   15340:	strne	r3, [r2]
   15344:	mov	r0, #0
   15348:	pop	{r4, pc}
   1534c:	push	{r4, r5, lr}
   15350:	sub	sp, sp, #12
   15354:	ldr	ip, [r0, #20]
   15358:	ldr	r4, [sp, #24]
   1535c:	lsr	lr, ip, #24
   15360:	lsl	r5, ip, #8
   15364:	orr	lr, lr, ip, lsl #24
   15368:	and	r5, r5, #16711680	; 0xff0000
   1536c:	lsr	ip, ip, #8
   15370:	orr	lr, lr, r5
   15374:	and	ip, ip, #65280	; 0xff00
   15378:	orr	ip, lr, ip
   1537c:	cmp	ip, #15
   15380:	bls	15398 <__assert_fail@plt+0x48c8>
   15384:	mov	ip, #0
   15388:	stm	sp, {r4, ip}
   1538c:	bl	151dc <__assert_fail@plt+0x470c>
   15390:	add	sp, sp, #12
   15394:	pop	{r4, r5, pc}
   15398:	cmp	r4, #0
   1539c:	moveq	r0, r4
   153a0:	beq	15390 <__assert_fail@plt+0x48c0>
   153a4:	mvn	r3, #9
   153a8:	mov	r0, #0
   153ac:	str	r3, [r4]
   153b0:	add	sp, sp, #12
   153b4:	pop	{r4, r5, pc}
   153b8:	push	{r4, r5, r6, r7, lr}
   153bc:	mov	r5, r0
   153c0:	sub	sp, sp, #12
   153c4:	mov	r0, r2
   153c8:	mov	r7, r3
   153cc:	mov	r4, r2
   153d0:	mov	r6, r1
   153d4:	bl	10a28 <strlen@plt>
   153d8:	str	r7, [sp]
   153dc:	mov	r2, r4
   153e0:	mov	r1, r6
   153e4:	mov	r3, r0
   153e8:	mov	r0, r5
   153ec:	bl	1534c <__assert_fail@plt+0x487c>
   153f0:	add	sp, sp, #12
   153f4:	pop	{r4, r5, r6, r7, pc}
   153f8:	ldr	ip, [pc, #200]	; 154c8 <__assert_fail@plt+0x49f8>
   153fc:	push	{r4, r5, lr}
   15400:	add	ip, pc, ip
   15404:	ldr	lr, [pc, #192]	; 154cc <__assert_fail@plt+0x49fc>
   15408:	sub	sp, sp, #20
   1540c:	ldr	r4, [ip, lr]
   15410:	ldr	r5, [sp, #32]
   15414:	add	ip, sp, #8
   15418:	str	r5, [sp]
   1541c:	ldr	lr, [r4]
   15420:	str	ip, [sp, #4]
   15424:	str	lr, [sp, #12]
   15428:	mov	r5, r0
   1542c:	bl	151dc <__assert_fail@plt+0x470c>
   15430:	cmp	r0, #0
   15434:	beq	15468 <__assert_fail@plt+0x4998>
   15438:	ldr	r3, [r5, #20]
   1543c:	lsr	r2, r3, #24
   15440:	lsl	r1, r3, #8
   15444:	orr	r2, r2, r3, lsl #24
   15448:	and	r1, r1, #16711680	; 0xff0000
   1544c:	lsr	r3, r3, #8
   15450:	orr	r2, r2, r1
   15454:	and	r3, r3, #65280	; 0xff00
   15458:	orr	r3, r2, r3
   1545c:	cmp	r3, #15
   15460:	bls	15480 <__assert_fail@plt+0x49b0>
   15464:	add	r0, r0, #12
   15468:	ldr	r2, [sp, #12]
   1546c:	ldr	r3, [r4]
   15470:	cmp	r2, r3
   15474:	bne	154c4 <__assert_fail@plt+0x49f4>
   15478:	add	sp, sp, #20
   1547c:	pop	{r4, r5, pc}
   15480:	ldr	r3, [sp, #8]
   15484:	add	r3, r3, #12
   15488:	tst	r3, #7
   1548c:	beq	15464 <__assert_fail@plt+0x4994>
   15490:	ldr	r3, [r0, #4]
   15494:	lsr	r2, r3, #24
   15498:	lsl	r1, r3, #8
   1549c:	orr	r2, r2, r3, lsl #24
   154a0:	and	r1, r1, #16711680	; 0xff0000
   154a4:	lsr	r3, r3, #8
   154a8:	orr	r2, r2, r1
   154ac:	and	r3, r3, #65280	; 0xff00
   154b0:	orr	r3, r2, r3
   154b4:	cmp	r3, #7
   154b8:	addhi	r0, r0, #16
   154bc:	bls	15464 <__assert_fail@plt+0x4994>
   154c0:	b	15468 <__assert_fail@plt+0x4998>
   154c4:	bl	1098c <__stack_chk_fail@plt>
   154c8:	andeq	r1, r1, ip, lsr fp
   154cc:	andeq	r0, r0, r0, lsr #1
   154d0:	ldr	ip, [pc, #292]	; 155fc <__assert_fail@plt+0x4b2c>
   154d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   154d8:	add	ip, pc, ip
   154dc:	ldr	lr, [pc, #284]	; 15600 <__assert_fail@plt+0x4b30>
   154e0:	sub	sp, sp, #12
   154e4:	mov	r8, r3
   154e8:	ldr	r4, [ip, lr]
   154ec:	mov	r3, ip
   154f0:	mov	r7, r2
   154f4:	ldr	r3, [r4]
   154f8:	mov	r2, r8
   154fc:	mov	r9, r0
   15500:	mov	r5, r1
   15504:	str	r3, [sp, #4]
   15508:	bl	14a74 <__assert_fail@plt+0x3fa4>
   1550c:	subs	r6, r0, #0
   15510:	beq	15588 <__assert_fail@plt+0x4ab8>
   15514:	cmp	r7, #0
   15518:	beq	15558 <__assert_fail@plt+0x4a88>
   1551c:	ldr	r3, [r6, #8]
   15520:	mov	r2, sp
   15524:	lsr	r1, r3, #24
   15528:	lsl	r0, r3, #8
   1552c:	orr	r1, r1, r3, lsl #24
   15530:	and	r0, r0, #16711680	; 0xff0000
   15534:	lsr	r3, r3, #8
   15538:	orr	r1, r1, r0
   1553c:	and	r3, r3, #65280	; 0xff00
   15540:	orr	r1, r1, r3
   15544:	mov	r0, r9
   15548:	bl	14b98 <__assert_fail@plt+0x40c8>
   1554c:	cmp	r0, #0
   15550:	strne	r0, [r7]
   15554:	beq	155e4 <__assert_fail@plt+0x4b14>
   15558:	ldr	r3, [r9, #20]
   1555c:	lsr	r2, r3, #24
   15560:	lsl	r1, r3, #8
   15564:	orr	r2, r2, r3, lsl #24
   15568:	and	r1, r1, #16711680	; 0xff0000
   1556c:	lsr	r3, r3, #8
   15570:	orr	r2, r2, r1
   15574:	and	r3, r3, #65280	; 0xff00
   15578:	orr	r3, r2, r3
   1557c:	cmp	r3, #15
   15580:	bls	155a4 <__assert_fail@plt+0x4ad4>
   15584:	add	r6, r6, #12
   15588:	ldr	r2, [sp, #4]
   1558c:	ldr	r3, [r4]
   15590:	mov	r0, r6
   15594:	cmp	r2, r3
   15598:	bne	155f8 <__assert_fail@plt+0x4b28>
   1559c:	add	sp, sp, #12
   155a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   155a4:	add	r5, r5, #12
   155a8:	tst	r5, #7
   155ac:	beq	15584 <__assert_fail@plt+0x4ab4>
   155b0:	ldr	r3, [r6, #4]
   155b4:	lsr	r2, r3, #24
   155b8:	lsl	r1, r3, #8
   155bc:	orr	r2, r2, r3, lsl #24
   155c0:	and	r1, r1, #16711680	; 0xff0000
   155c4:	lsr	r3, r3, #8
   155c8:	orr	r2, r2, r1
   155cc:	and	r3, r3, #65280	; 0xff00
   155d0:	orr	r3, r2, r3
   155d4:	cmp	r3, #7
   155d8:	addhi	r6, r6, #16
   155dc:	bls	15584 <__assert_fail@plt+0x4ab4>
   155e0:	b	15588 <__assert_fail@plt+0x4ab8>
   155e4:	cmp	r8, #0
   155e8:	mov	r6, #0
   155ec:	ldrne	r3, [sp]
   155f0:	strne	r3, [r8]
   155f4:	b	15588 <__assert_fail@plt+0x4ab8>
   155f8:	bl	1098c <__stack_chk_fail@plt>
   155fc:	andeq	r1, r1, r4, ror #20
   15600:	andeq	r0, r0, r0, lsr #1
   15604:	push	{r4, r5, r6, r7, lr}
   15608:	mov	r5, r0
   1560c:	sub	sp, sp, #12
   15610:	mov	r0, r2
   15614:	mov	r7, r3
   15618:	mov	r4, r2
   1561c:	mov	r6, r1
   15620:	bl	10a28 <strlen@plt>
   15624:	str	r7, [sp]
   15628:	mov	r2, r4
   1562c:	mov	r1, r6
   15630:	mov	r3, r0
   15634:	mov	r0, r5
   15638:	bl	153f8 <__assert_fail@plt+0x4928>
   1563c:	add	sp, sp, #12
   15640:	pop	{r4, r5, r6, r7, pc}
   15644:	ldr	ip, [pc, #188]	; 15708 <__assert_fail@plt+0x4c38>
   15648:	ldr	r2, [pc, #188]	; 1570c <__assert_fail@plt+0x4c3c>
   1564c:	add	ip, pc, ip
   15650:	push	{r4, r5, r6, r7, lr}
   15654:	sub	sp, sp, #12
   15658:	ldr	r4, [ip, r2]
   1565c:	ldr	r2, [pc, #172]	; 15710 <__assert_fail@plt+0x4c40>
   15660:	mov	r5, sp
   15664:	ldr	ip, [r4]
   15668:	mov	r3, r5
   1566c:	add	r2, pc, r2
   15670:	mov	r6, r0
   15674:	mov	r7, r1
   15678:	str	ip, [sp, #4]
   1567c:	bl	15604 <__assert_fail@plt+0x4b34>
   15680:	cmp	r0, #0
   15684:	beq	15694 <__assert_fail@plt+0x4bc4>
   15688:	ldr	r3, [sp]
   1568c:	cmp	r3, #4
   15690:	beq	156dc <__assert_fail@plt+0x4c0c>
   15694:	ldr	r2, [pc, #120]	; 15714 <__assert_fail@plt+0x4c44>
   15698:	mov	r3, r5
   1569c:	mov	r1, r7
   156a0:	mov	r0, r6
   156a4:	add	r2, pc, r2
   156a8:	bl	15604 <__assert_fail@plt+0x4b34>
   156ac:	cmp	r0, #0
   156b0:	beq	156c4 <__assert_fail@plt+0x4bf4>
   156b4:	ldr	r3, [sp]
   156b8:	cmp	r3, #4
   156bc:	movne	r0, #0
   156c0:	beq	156dc <__assert_fail@plt+0x4c0c>
   156c4:	ldr	r2, [sp, #4]
   156c8:	ldr	r3, [r4]
   156cc:	cmp	r2, r3
   156d0:	bne	15704 <__assert_fail@plt+0x4c34>
   156d4:	add	sp, sp, #12
   156d8:	pop	{r4, r5, r6, r7, pc}
   156dc:	ldr	r3, [r0]
   156e0:	lsr	r0, r3, #24
   156e4:	lsl	r2, r3, #8
   156e8:	orr	r0, r0, r3, lsl #24
   156ec:	and	r2, r2, #16711680	; 0xff0000
   156f0:	lsr	r3, r3, #8
   156f4:	orr	r0, r0, r2
   156f8:	and	r3, r3, #65280	; 0xff00
   156fc:	orr	r0, r0, r3
   15700:	b	156c4 <__assert_fail@plt+0x4bf4>
   15704:	bl	1098c <__stack_chk_fail@plt>
   15708:	strdeq	r1, [r1], -r0
   1570c:	andeq	r0, r0, r0, lsr #1
   15710:	andeq	r1, r0, r8, lsr r4
   15714:	andeq	r1, r0, r8, lsl #8
   15718:	push	{r4, r5, r6, lr}
   1571c:	mov	r2, #0
   15720:	mvn	r1, #0
   15724:	mov	r6, r0
   15728:	bl	14730 <__assert_fail@plt+0x3c60>
   1572c:	cmn	r0, #1
   15730:	beq	1579c <__assert_fail@plt+0x4ccc>
   15734:	cmp	r0, #0
   15738:	mov	r4, r0
   1573c:	movge	r5, #0
   15740:	bge	15750 <__assert_fail@plt+0x4c80>
   15744:	b	15790 <__assert_fail@plt+0x4cc0>
   15748:	cmp	r4, #0
   1574c:	blt	15790 <__assert_fail@plt+0x4cc0>
   15750:	mov	r1, r4
   15754:	mov	r0, r6
   15758:	bl	15644 <__assert_fail@plt+0x4b74>
   1575c:	mov	r1, r4
   15760:	mov	r2, #0
   15764:	cmn	r0, #1
   15768:	cmpne	r0, r5
   1576c:	mov	r3, r0
   15770:	mov	r0, r6
   15774:	movhi	r5, r3
   15778:	bl	14730 <__assert_fail@plt+0x3c60>
   1577c:	cmn	r0, #1
   15780:	mov	r4, r0
   15784:	bne	15748 <__assert_fail@plt+0x4c78>
   15788:	mov	r0, r5
   1578c:	pop	{r4, r5, r6, pc}
   15790:	mvn	r5, #0
   15794:	mov	r0, r5
   15798:	pop	{r4, r5, r6, pc}
   1579c:	mov	r5, #0
   157a0:	b	15788 <__assert_fail@plt+0x4cb8>
   157a4:	push	{r4, r5, r6, lr}
   157a8:	mov	r5, r1
   157ac:	ldr	r1, [pc, #60]	; 157f0 <__assert_fail@plt+0x4d20>
   157b0:	sub	sp, sp, #8
   157b4:	add	r1, pc, r1
   157b8:	mov	r6, r2
   157bc:	mov	r4, r0
   157c0:	bl	158f8 <__assert_fail@plt+0x4e28>
   157c4:	subs	r1, r0, #0
   157c8:	movlt	r0, #0
   157cc:	blt	157e8 <__assert_fail@plt+0x4d18>
   157d0:	mov	ip, #0
   157d4:	mov	r3, r6
   157d8:	mov	r2, r5
   157dc:	mov	r0, r4
   157e0:	str	ip, [sp]
   157e4:	bl	153f8 <__assert_fail@plt+0x4928>
   157e8:	add	sp, sp, #8
   157ec:	pop	{r4, r5, r6, pc}
   157f0:	andeq	r1, r0, r4, ror r3
   157f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   157f8:	mov	r4, r1
   157fc:	mov	r5, r2
   15800:	mov	r8, r0
   15804:	bl	140cc <__assert_fail@plt+0x35fc>
   15808:	subs	r7, r0, #0
   1580c:	bne	158c8 <__assert_fail@plt+0x4df8>
   15810:	ldrb	r3, [r4]
   15814:	add	r6, r4, r5
   15818:	cmp	r3, #47	; 0x2f
   1581c:	beq	15864 <__assert_fail@plt+0x4d94>
   15820:	mov	r2, r5
   15824:	mov	r1, #47	; 0x2f
   15828:	mov	r0, r4
   1582c:	bl	10a94 <memchr@plt>
   15830:	mov	r1, r4
   15834:	subs	r7, r0, #0
   15838:	subne	r5, r7, r4
   1583c:	mov	r2, r5
   15840:	mov	r0, r8
   15844:	moveq	r7, r6
   15848:	bl	157a4 <__assert_fail@plt+0x4cd4>
   1584c:	subs	r1, r0, #0
   15850:	beq	158f0 <__assert_fail@plt+0x4e20>
   15854:	mov	r0, r8
   15858:	bl	158f8 <__assert_fail@plt+0x4e28>
   1585c:	mov	r4, r7
   15860:	mov	r7, r0
   15864:	cmp	r6, r4
   15868:	bls	158c8 <__assert_fail@plt+0x4df8>
   1586c:	mov	r1, r4
   15870:	b	1587c <__assert_fail@plt+0x4dac>
   15874:	cmp	r6, r1
   15878:	beq	158c8 <__assert_fail@plt+0x4df8>
   1587c:	mov	r5, r1
   15880:	add	r1, r1, #1
   15884:	ldrb	r3, [r5]
   15888:	cmp	r3, #47	; 0x2f
   1588c:	beq	15874 <__assert_fail@plt+0x4da4>
   15890:	sub	r9, r6, r5
   15894:	mov	r2, r9
   15898:	mov	r1, #47	; 0x2f
   1589c:	mov	r0, r5
   158a0:	bl	10a94 <memchr@plt>
   158a4:	subs	r4, r0, #0
   158a8:	beq	158d0 <__assert_fail@plt+0x4e00>
   158ac:	mov	r1, r7
   158b0:	sub	r3, r4, r5
   158b4:	mov	r2, r5
   158b8:	mov	r0, r8
   158bc:	bl	15058 <__assert_fail@plt+0x4588>
   158c0:	subs	r7, r0, #0
   158c4:	bge	15864 <__assert_fail@plt+0x4d94>
   158c8:	mov	r0, r7
   158cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   158d0:	mov	r1, r7
   158d4:	mov	r3, r9
   158d8:	mov	r2, r5
   158dc:	mov	r0, r8
   158e0:	bl	15058 <__assert_fail@plt+0x4588>
   158e4:	mov	r7, r0
   158e8:	mov	r0, r7
   158ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   158f0:	mvn	r7, #4
   158f4:	b	158c8 <__assert_fail@plt+0x4df8>
   158f8:	push	{r4, r5, r6, lr}
   158fc:	mov	r5, r0
   15900:	mov	r0, r1
   15904:	mov	r4, r1
   15908:	bl	10a28 <strlen@plt>
   1590c:	mov	r1, r4
   15910:	mov	r2, r0
   15914:	mov	r0, r5
   15918:	pop	{r4, r5, r6, lr}
   1591c:	b	157f4 <__assert_fail@plt+0x4d24>
   15920:	push	{r4, r5, r6, lr}
   15924:	mov	r5, r0
   15928:	mov	r0, r1
   1592c:	mov	r4, r1
   15930:	bl	10a28 <strlen@plt>
   15934:	mov	r1, r4
   15938:	mov	r2, r0
   1593c:	mov	r0, r5
   15940:	pop	{r4, r5, r6, lr}
   15944:	b	157a4 <__assert_fail@plt+0x4cd4>
   15948:	ldr	ip, [pc, #416]	; 15af0 <__assert_fail@plt+0x5020>
   1594c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15950:	add	ip, pc, ip
   15954:	ldr	lr, [pc, #408]	; 15af4 <__assert_fail@plt+0x5024>
   15958:	mov	r8, r1
   1595c:	sub	sp, sp, #36	; 0x24
   15960:	ldr	r1, [ip, lr]
   15964:	mov	r4, r3
   15968:	str	r3, [sp]
   1596c:	ldr	r3, [r1]
   15970:	mov	r6, r2
   15974:	str	r1, [sp, #8]
   15978:	mov	r2, ip
   1597c:	mov	r9, r0
   15980:	str	r3, [sp, #28]
   15984:	bl	140cc <__assert_fail@plt+0x35fc>
   15988:	subs	fp, r0, #0
   1598c:	bne	15a9c <__assert_fail@plt+0x4fcc>
   15990:	cmp	r4, #1
   15994:	ble	15ae8 <__assert_fail@plt+0x5018>
   15998:	cmp	r8, #0
   1599c:	str	fp, [sp, #20]
   159a0:	blt	15ae0 <__assert_fail@plt+0x5010>
   159a4:	mov	r0, fp
   159a8:	mov	r7, fp
   159ac:	mov	r4, fp
   159b0:	mov	r5, fp
   159b4:	add	sl, sp, #20
   159b8:	add	r3, sp, #24
   159bc:	str	r3, [sp, #4]
   159c0:	cmp	r0, r5
   159c4:	ble	15a2c <__assert_fail@plt+0x4f5c>
   159c8:	cmp	r7, r8
   159cc:	beq	15a80 <__assert_fail@plt+0x4fb0>
   159d0:	mov	r1, r7
   159d4:	mov	r2, sl
   159d8:	mov	r0, r9
   159dc:	bl	14730 <__assert_fail@plt+0x3c60>
   159e0:	cmp	r0, #0
   159e4:	cmpge	r8, r0
   159e8:	mov	r7, r0
   159ec:	blt	15abc <__assert_fail@plt+0x4fec>
   159f0:	ldr	r0, [sp, #20]
   159f4:	cmp	r5, r0
   159f8:	ble	159c0 <__assert_fail@plt+0x4ef0>
   159fc:	rsb	r1, r6, #1
   15a00:	sub	r3, r4, #2
   15a04:	add	r3, r6, r3
   15a08:	add	r4, r1, r3
   15a0c:	ldrb	r2, [r3], #-1
   15a10:	cmp	r2, #47	; 0x2f
   15a14:	bne	15a08 <__assert_fail@plt+0x4f38>
   15a18:	sub	r5, r5, #1
   15a1c:	cmp	r5, r0
   15a20:	bne	15a00 <__assert_fail@plt+0x4f30>
   15a24:	cmp	r0, r5
   15a28:	bgt	159c8 <__assert_fail@plt+0x4ef8>
   15a2c:	mov	r1, r7
   15a30:	ldr	r2, [sp, #4]
   15a34:	mov	r0, r9
   15a38:	bl	14f78 <__assert_fail@plt+0x44a8>
   15a3c:	subs	r1, r0, #0
   15a40:	beq	15ad4 <__assert_fail@plt+0x5004>
   15a44:	ldr	r2, [sp, #24]
   15a48:	ldr	r0, [sp]
   15a4c:	add	r3, r2, r4
   15a50:	cmp	r3, r0
   15a54:	bge	159c8 <__assert_fail@plt+0x4ef8>
   15a58:	add	r0, r6, r4
   15a5c:	str	r3, [sp, #12]
   15a60:	add	r4, r3, #1
   15a64:	bl	10974 <memcpy@plt>
   15a68:	ldr	r3, [sp, #12]
   15a6c:	mov	r2, #47	; 0x2f
   15a70:	cmp	r7, r8
   15a74:	add	r5, r5, #1
   15a78:	strb	r2, [r6, r3]
   15a7c:	bne	159d0 <__assert_fail@plt+0x4f00>
   15a80:	ldr	r3, [sp, #20]
   15a84:	cmp	r3, r5
   15a88:	bge	15ae8 <__assert_fail@plt+0x5018>
   15a8c:	cmp	r4, #1
   15a90:	subgt	r4, r4, #1
   15a94:	mov	r3, #0
   15a98:	strb	r3, [r6, r4]
   15a9c:	ldr	r3, [sp, #8]
   15aa0:	ldr	r2, [sp, #28]
   15aa4:	mov	r0, fp
   15aa8:	ldr	r3, [r3]
   15aac:	cmp	r2, r3
   15ab0:	bne	15adc <__assert_fail@plt+0x500c>
   15ab4:	add	sp, sp, #36	; 0x24
   15ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15abc:	cmn	r0, #1
   15ac0:	bge	15ae0 <__assert_fail@plt+0x5010>
   15ac4:	cmn	r0, #4
   15ac8:	movne	fp, r0
   15acc:	mvneq	fp, #10
   15ad0:	b	15a9c <__assert_fail@plt+0x4fcc>
   15ad4:	ldr	fp, [sp, #24]
   15ad8:	b	15a9c <__assert_fail@plt+0x4fcc>
   15adc:	bl	1098c <__stack_chk_fail@plt>
   15ae0:	mvn	fp, #3
   15ae4:	b	15a9c <__assert_fail@plt+0x4fcc>
   15ae8:	mvn	fp, #2
   15aec:	b	15a9c <__assert_fail@plt+0x4fcc>
   15af0:	andeq	r1, r1, ip, ror #11
   15af4:	andeq	r0, r0, r0, lsr #1
   15af8:	ldr	ip, [pc, #224]	; 15be0 <__assert_fail@plt+0x5110>
   15afc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b00:	add	ip, pc, ip
   15b04:	ldr	lr, [pc, #216]	; 15be4 <__assert_fail@plt+0x5114>
   15b08:	sub	sp, sp, #8
   15b0c:	mov	sl, r3
   15b10:	ldr	r9, [ip, lr]
   15b14:	mov	r4, r1
   15b18:	mov	r6, r2
   15b1c:	ldr	r3, [r9]
   15b20:	mov	r2, ip
   15b24:	mov	r7, r0
   15b28:	str	r3, [sp, #4]
   15b2c:	bl	140cc <__assert_fail@plt+0x35fc>
   15b30:	cmp	r0, #0
   15b34:	bne	15ba0 <__assert_fail@plt+0x50d0>
   15b38:	cmp	r6, #0
   15b3c:	blt	15bd4 <__assert_fail@plt+0x5104>
   15b40:	cmp	r4, #0
   15b44:	str	r0, [sp]
   15b48:	movge	r3, r0
   15b4c:	mvnge	r5, #12
   15b50:	movge	r8, sp
   15b54:	bge	15b7c <__assert_fail@plt+0x50ac>
   15b58:	b	15bcc <__assert_fail@plt+0x50fc>
   15b5c:	mov	r1, r0
   15b60:	mov	r2, r8
   15b64:	mov	r0, r7
   15b68:	bl	14730 <__assert_fail@plt+0x3c60>
   15b6c:	cmp	r0, #0
   15b70:	cmpge	r4, r0
   15b74:	blt	15bb8 <__assert_fail@plt+0x50e8>
   15b78:	ldr	r3, [sp]
   15b7c:	cmp	r6, r3
   15b80:	moveq	r5, r0
   15b84:	cmp	r4, r0
   15b88:	bne	15b5c <__assert_fail@plt+0x508c>
   15b8c:	cmp	sl, #0
   15b90:	strne	r3, [sl]
   15b94:	cmp	r6, r3
   15b98:	movle	r0, r5
   15b9c:	mvngt	r0, #0
   15ba0:	ldr	r2, [sp, #4]
   15ba4:	ldr	r3, [r9]
   15ba8:	cmp	r2, r3
   15bac:	bne	15bdc <__assert_fail@plt+0x510c>
   15bb0:	add	sp, sp, #8
   15bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15bb8:	cmn	r0, #1
   15bbc:	bge	15bcc <__assert_fail@plt+0x50fc>
   15bc0:	cmn	r0, #4
   15bc4:	mvneq	r0, #10
   15bc8:	b	15ba0 <__assert_fail@plt+0x50d0>
   15bcc:	mvn	r0, #3
   15bd0:	b	15ba0 <__assert_fail@plt+0x50d0>
   15bd4:	mvn	r0, #0
   15bd8:	b	15ba0 <__assert_fail@plt+0x50d0>
   15bdc:	bl	1098c <__stack_chk_fail@plt>
   15be0:	andeq	r1, r1, ip, lsr r4
   15be4:	andeq	r0, r0, r0, lsr #1
   15be8:	ldr	ip, [pc, #80]	; 15c40 <__assert_fail@plt+0x5170>
   15bec:	push	{r4, lr}
   15bf0:	add	ip, pc, ip
   15bf4:	ldr	lr, [pc, #72]	; 15c44 <__assert_fail@plt+0x5174>
   15bf8:	sub	sp, sp, #8
   15bfc:	mov	r3, sp
   15c00:	ldr	r4, [ip, lr]
   15c04:	mov	r2, #0
   15c08:	ldr	ip, [r4]
   15c0c:	str	ip, [sp, #4]
   15c10:	bl	15af8 <__assert_fail@plt+0x5028>
   15c14:	cmp	r0, #0
   15c18:	ldreq	r0, [sp]
   15c1c:	beq	15c24 <__assert_fail@plt+0x5154>
   15c20:	mvnge	r0, #12
   15c24:	ldr	r2, [sp, #4]
   15c28:	ldr	r3, [r4]
   15c2c:	cmp	r2, r3
   15c30:	bne	15c3c <__assert_fail@plt+0x516c>
   15c34:	add	sp, sp, #8
   15c38:	pop	{r4, pc}
   15c3c:	bl	1098c <__stack_chk_fail@plt>
   15c40:	andeq	r1, r1, ip, asr #6
   15c44:	andeq	r0, r0, r0, lsr #1
   15c48:	push	{r4, r5, r6, lr}
   15c4c:	mov	r4, r0
   15c50:	mov	r5, r1
   15c54:	bl	15be8 <__assert_fail@plt+0x5118>
   15c58:	subs	r2, r0, #0
   15c5c:	poplt	{r4, r5, r6, pc}
   15c60:	mov	r1, r5
   15c64:	mov	r0, r4
   15c68:	sub	r2, r2, #1
   15c6c:	mov	r3, #0
   15c70:	pop	{r4, r5, r6, lr}
   15c74:	b	15af8 <__assert_fail@plt+0x5028>
   15c78:	ldr	ip, [pc, #212]	; 15d54 <__assert_fail@plt+0x5284>
   15c7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c80:	add	ip, pc, ip
   15c84:	ldr	lr, [pc, #204]	; 15d58 <__assert_fail@plt+0x5288>
   15c88:	sub	sp, sp, #8
   15c8c:	mov	sl, r3
   15c90:	ldr	r9, [ip, lr]
   15c94:	mov	r8, r1
   15c98:	mov	r7, r2
   15c9c:	ldr	r3, [r9]
   15ca0:	mov	r2, ip
   15ca4:	mov	r5, r0
   15ca8:	ldr	r6, [sp, #40]	; 0x28
   15cac:	str	r3, [sp, #4]
   15cb0:	bl	140cc <__assert_fail@plt+0x35fc>
   15cb4:	subs	r4, r0, #0
   15cb8:	beq	15cd8 <__assert_fail@plt+0x5208>
   15cbc:	ldr	r2, [sp, #4]
   15cc0:	ldr	r3, [r9]
   15cc4:	mov	r0, r4
   15cc8:	cmp	r2, r3
   15ccc:	bne	15d50 <__assert_fail@plt+0x5280>
   15cd0:	add	sp, sp, #8
   15cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15cd8:	mov	r2, r4
   15cdc:	mov	r1, r8
   15ce0:	mov	r0, r5
   15ce4:	bl	14730 <__assert_fail@plt+0x3c60>
   15ce8:	subs	r4, r0, #0
   15cec:	blt	15cbc <__assert_fail@plt+0x51ec>
   15cf0:	mov	r8, sp
   15cf4:	b	15d10 <__assert_fail@plt+0x5240>
   15cf8:	mov	r1, r4
   15cfc:	mov	r2, #0
   15d00:	mov	r0, r5
   15d04:	bl	14730 <__assert_fail@plt+0x3c60>
   15d08:	subs	r4, r0, #0
   15d0c:	blt	15cbc <__assert_fail@plt+0x51ec>
   15d10:	mov	r3, r8
   15d14:	mov	r2, r7
   15d18:	mov	r1, r4
   15d1c:	mov	r0, r5
   15d20:	bl	15604 <__assert_fail@plt+0x4b34>
   15d24:	cmp	r0, #0
   15d28:	beq	15cf8 <__assert_fail@plt+0x5228>
   15d2c:	ldr	r3, [sp]
   15d30:	cmp	r3, r6
   15d34:	bne	15cf8 <__assert_fail@plt+0x5228>
   15d38:	mov	r2, r6
   15d3c:	mov	r1, sl
   15d40:	bl	10980 <memcmp@plt>
   15d44:	cmp	r0, #0
   15d48:	bne	15cf8 <__assert_fail@plt+0x5228>
   15d4c:	b	15cbc <__assert_fail@plt+0x51ec>
   15d50:	bl	1098c <__stack_chk_fail@plt>
   15d54:			; <UNDEFINED> instruction: 0x000112bc
   15d58:	andeq	r0, r0, r0, lsr #1
   15d5c:	sub	r3, r1, #1
   15d60:	cmn	r3, #3
   15d64:	push	{r4, r5, r6, lr}
   15d68:	bhi	15dcc <__assert_fail@plt+0x52fc>
   15d6c:	mov	r5, r0
   15d70:	mov	r6, r1
   15d74:	bl	140cc <__assert_fail@plt+0x35fc>
   15d78:	subs	r4, r0, #0
   15d7c:	beq	15d88 <__assert_fail@plt+0x52b8>
   15d80:	mov	r0, r4
   15d84:	pop	{r4, r5, r6, pc}
   15d88:	mov	r2, r4
   15d8c:	mvn	r1, #0
   15d90:	mov	r0, r5
   15d94:	b	15db8 <__assert_fail@plt+0x52e8>
   15d98:	mov	r1, r4
   15d9c:	mov	r0, r5
   15da0:	bl	15644 <__assert_fail@plt+0x4b74>
   15da4:	mov	r1, r4
   15da8:	mov	r2, #0
   15dac:	cmp	r0, r6
   15db0:	mov	r0, r5
   15db4:	beq	15d80 <__assert_fail@plt+0x52b0>
   15db8:	bl	14730 <__assert_fail@plt+0x3c60>
   15dbc:	subs	r4, r0, #0
   15dc0:	bge	15d98 <__assert_fail@plt+0x52c8>
   15dc4:	mov	r0, r4
   15dc8:	pop	{r4, r5, r6, pc}
   15dcc:	mvn	r4, #5
   15dd0:	b	15d80 <__assert_fail@plt+0x52b0>
   15dd4:	push	{r4, r5, r6, r7, r8, lr}
   15dd8:	mov	r4, r0
   15ddc:	mov	r0, r2
   15de0:	mov	r5, r1
   15de4:	mov	r7, r2
   15de8:	bl	10a28 <strlen@plt>
   15dec:	cmp	r0, r5
   15df0:	bgt	15e50 <__assert_fail@plt+0x5380>
   15df4:	mov	r6, r0
   15df8:	add	r8, r0, #1
   15dfc:	b	15e24 <__assert_fail@plt+0x5354>
   15e00:	bl	10a94 <memchr@plt>
   15e04:	cmp	r0, #0
   15e08:	sub	r4, r0, r4
   15e0c:	add	r4, r4, #1
   15e10:	sub	r5, r5, r4
   15e14:	popeq	{r4, r5, r6, r7, r8, pc}
   15e18:	cmp	r6, r5
   15e1c:	add	r4, r0, #1
   15e20:	bgt	15e50 <__assert_fail@plt+0x5380>
   15e24:	mov	r2, r8
   15e28:	mov	r1, r4
   15e2c:	mov	r0, r7
   15e30:	bl	10980 <memcmp@plt>
   15e34:	mov	r1, #0
   15e38:	mov	r2, r5
   15e3c:	cmp	r0, r1
   15e40:	mov	r0, r4
   15e44:	bne	15e00 <__assert_fail@plt+0x5330>
   15e48:	mov	r0, #1
   15e4c:	pop	{r4, r5, r6, r7, r8, pc}
   15e50:	mov	r0, #0
   15e54:	pop	{r4, r5, r6, r7, r8, pc}
   15e58:	ldr	ip, [pc, #144]	; 15ef0 <__assert_fail@plt+0x5420>
   15e5c:	push	{r4, r5, r6, r7, lr}
   15e60:	add	ip, pc, ip
   15e64:	ldr	lr, [pc, #136]	; 15ef4 <__assert_fail@plt+0x5424>
   15e68:	sub	sp, sp, #12
   15e6c:	mov	r3, sp
   15e70:	ldr	r7, [ip, lr]
   15e74:	ldr	ip, [r7]
   15e78:	str	ip, [sp, #4]
   15e7c:	bl	15604 <__assert_fail@plt+0x4b34>
   15e80:	subs	r4, r0, #0
   15e84:	ldreq	r6, [sp]
   15e88:	beq	15ed0 <__assert_fail@plt+0x5400>
   15e8c:	ldr	r5, [sp]
   15e90:	mov	r6, #0
   15e94:	add	r5, r4, r5
   15e98:	cmp	r4, r5
   15e9c:	bcc	15eac <__assert_fail@plt+0x53dc>
   15ea0:	b	15ed0 <__assert_fail@plt+0x5400>
   15ea4:	add	r6, r6, #1
   15ea8:	bcs	15ed0 <__assert_fail@plt+0x5400>
   15eac:	sub	r1, r5, r4
   15eb0:	mov	r0, r4
   15eb4:	bl	10aa0 <strnlen@plt>
   15eb8:	add	r0, r0, #1
   15ebc:	add	r4, r4, r0
   15ec0:	cmp	r4, r5
   15ec4:	str	r0, [sp]
   15ec8:	bls	15ea4 <__assert_fail@plt+0x53d4>
   15ecc:	mvn	r6, #14
   15ed0:	ldr	r2, [sp, #4]
   15ed4:	ldr	r3, [r7]
   15ed8:	mov	r0, r6
   15edc:	cmp	r2, r3
   15ee0:	bne	15eec <__assert_fail@plt+0x541c>
   15ee4:	add	sp, sp, #12
   15ee8:	pop	{r4, r5, r6, r7, pc}
   15eec:	bl	1098c <__stack_chk_fail@plt>
   15ef0:	ldrdeq	r1, [r1], -ip
   15ef4:	andeq	r0, r0, r0, lsr #1
   15ef8:	ldr	ip, [pc, #212]	; 15fd4 <__assert_fail@plt+0x5504>
   15efc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15f00:	add	ip, pc, ip
   15f04:	ldr	lr, [pc, #204]	; 15fd8 <__assert_fail@plt+0x5508>
   15f08:	sub	sp, sp, #8
   15f0c:	mov	r8, r3
   15f10:	ldr	r9, [ip, lr]
   15f14:	mov	r3, sp
   15f18:	ldr	ip, [r9]
   15f1c:	str	ip, [sp, #4]
   15f20:	bl	15604 <__assert_fail@plt+0x4b34>
   15f24:	subs	r4, r0, #0
   15f28:	ldreq	r7, [sp]
   15f2c:	beq	15fa4 <__assert_fail@plt+0x54d4>
   15f30:	mov	r0, r8
   15f34:	bl	10a28 <strlen@plt>
   15f38:	ldr	r5, [sp]
   15f3c:	add	r5, r4, r5
   15f40:	cmp	r4, r5
   15f44:	add	sl, r0, #1
   15f48:	bcs	15fc0 <__assert_fail@plt+0x54f0>
   15f4c:	mov	r7, #0
   15f50:	b	15f64 <__assert_fail@plt+0x5494>
   15f54:	cmp	r6, r5
   15f58:	mov	r4, r6
   15f5c:	add	r7, r7, #1
   15f60:	bcs	15fc0 <__assert_fail@plt+0x54f0>
   15f64:	sub	r1, r5, r4
   15f68:	mov	r0, r4
   15f6c:	bl	10aa0 <strnlen@plt>
   15f70:	add	r0, r0, #1
   15f74:	add	r6, r4, r0
   15f78:	cmp	r6, r5
   15f7c:	str	r0, [sp]
   15f80:	bhi	15fc8 <__assert_fail@plt+0x54f8>
   15f84:	cmp	r0, sl
   15f88:	bne	15f54 <__assert_fail@plt+0x5484>
   15f8c:	mov	r0, r4
   15f90:	mov	r2, sl
   15f94:	mov	r1, r8
   15f98:	bl	10980 <memcmp@plt>
   15f9c:	cmp	r0, #0
   15fa0:	bne	15f54 <__assert_fail@plt+0x5484>
   15fa4:	ldr	r2, [sp, #4]
   15fa8:	ldr	r3, [r9]
   15fac:	mov	r0, r7
   15fb0:	cmp	r2, r3
   15fb4:	bne	15fd0 <__assert_fail@plt+0x5500>
   15fb8:	add	sp, sp, #8
   15fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15fc0:	mvn	r7, #0
   15fc4:	b	15fa4 <__assert_fail@plt+0x54d4>
   15fc8:	mvn	r7, #14
   15fcc:	b	15fa4 <__assert_fail@plt+0x54d4>
   15fd0:	bl	1098c <__stack_chk_fail@plt>
   15fd4:	andeq	r1, r1, ip, lsr r0
   15fd8:	andeq	r0, r0, r0, lsr #1
   15fdc:	ldr	ip, [pc, #228]	; 160c8 <__assert_fail@plt+0x55f8>
   15fe0:	push	{r4, r5, r6, r7, r8, lr}
   15fe4:	add	ip, pc, ip
   15fe8:	ldr	lr, [pc, #220]	; 160cc <__assert_fail@plt+0x55fc>
   15fec:	sub	sp, sp, #8
   15ff0:	mov	r6, r3
   15ff4:	ldr	r7, [ip, lr]
   15ff8:	mov	r3, sp
   15ffc:	ldr	r8, [sp, #32]
   16000:	ldr	ip, [r7]
   16004:	str	ip, [sp, #4]
   16008:	bl	15604 <__assert_fail@plt+0x4b34>
   1600c:	subs	r4, r0, #0
   16010:	beq	160b0 <__assert_fail@plt+0x55e0>
   16014:	ldr	r5, [sp]
   16018:	add	r5, r4, r5
   1601c:	cmp	r4, r5
   16020:	bcc	16040 <__assert_fail@plt+0x5570>
   16024:	b	1608c <__assert_fail@plt+0x55bc>
   16028:	cmp	r6, #0
   1602c:	beq	160a4 <__assert_fail@plt+0x55d4>
   16030:	cmp	r2, r5
   16034:	mov	r4, r2
   16038:	sub	r6, r6, #1
   1603c:	bcs	1608c <__assert_fail@plt+0x55bc>
   16040:	sub	r1, r5, r4
   16044:	mov	r0, r4
   16048:	bl	10aa0 <strnlen@plt>
   1604c:	add	r3, r0, #1
   16050:	add	r2, r4, r3
   16054:	cmp	r2, r5
   16058:	str	r3, [sp]
   1605c:	bls	16028 <__assert_fail@plt+0x5558>
   16060:	cmp	r8, #0
   16064:	mvnne	r3, #14
   16068:	strne	r3, [r8]
   1606c:	mov	r4, #0
   16070:	ldr	r2, [sp, #4]
   16074:	ldr	r3, [r7]
   16078:	mov	r0, r4
   1607c:	cmp	r2, r3
   16080:	bne	160c4 <__assert_fail@plt+0x55f4>
   16084:	add	sp, sp, #8
   16088:	pop	{r4, r5, r6, r7, r8, pc}
   1608c:	cmp	r8, #0
   16090:	beq	1606c <__assert_fail@plt+0x559c>
   16094:	mvn	r3, #0
   16098:	mov	r4, #0
   1609c:	str	r3, [r8]
   160a0:	b	16070 <__assert_fail@plt+0x55a0>
   160a4:	cmp	r8, #0
   160a8:	strne	r0, [r8]
   160ac:	b	16070 <__assert_fail@plt+0x55a0>
   160b0:	cmp	r8, #0
   160b4:	beq	1606c <__assert_fail@plt+0x559c>
   160b8:	ldr	r3, [sp]
   160bc:	str	r3, [r8]
   160c0:	b	16070 <__assert_fail@plt+0x55a0>
   160c4:	bl	1098c <__stack_chk_fail@plt>
   160c8:	andeq	r0, r1, r8, asr pc
   160cc:	andeq	r0, r0, r0, lsr #1
   160d0:	ldr	ip, [pc, #104]	; 16140 <__assert_fail@plt+0x5670>
   160d4:	push	{r4, r5, lr}
   160d8:	add	ip, pc, ip
   160dc:	ldr	lr, [pc, #96]	; 16144 <__assert_fail@plt+0x5674>
   160e0:	mov	r5, r2
   160e4:	ldr	r2, [pc, #92]	; 16148 <__assert_fail@plt+0x5678>
   160e8:	ldr	r4, [ip, lr]
   160ec:	sub	sp, sp, #12
   160f0:	mov	r3, sp
   160f4:	ldr	ip, [r4]
   160f8:	add	r2, pc, r2
   160fc:	str	ip, [sp, #4]
   16100:	bl	15604 <__assert_fail@plt+0x4b34>
   16104:	cmp	r0, #0
   16108:	ldreq	r0, [sp]
   1610c:	beq	16124 <__assert_fail@plt+0x5654>
   16110:	mov	r2, r5
   16114:	ldr	r1, [sp]
   16118:	bl	15dd4 <__assert_fail@plt+0x5304>
   1611c:	clz	r0, r0
   16120:	lsr	r0, r0, #5
   16124:	ldr	r2, [sp, #4]
   16128:	ldr	r3, [r4]
   1612c:	cmp	r2, r3
   16130:	bne	1613c <__assert_fail@plt+0x566c>
   16134:	add	sp, sp, #12
   16138:	pop	{r4, r5, pc}
   1613c:	bl	1098c <__stack_chk_fail@plt>
   16140:	andeq	r0, r1, r4, ror #28
   16144:	andeq	r0, r0, r0, lsr #1
   16148:	andeq	r0, r0, ip, lsr sl
   1614c:	push	{r4, r5, r6, lr}
   16150:	mov	r4, r1
   16154:	mov	r6, r2
   16158:	mov	r5, r0
   1615c:	bl	140cc <__assert_fail@plt+0x35fc>
   16160:	subs	r3, r0, #0
   16164:	beq	16170 <__assert_fail@plt+0x56a0>
   16168:	mov	r0, r3
   1616c:	pop	{r4, r5, r6, pc}
   16170:	mov	r2, r3
   16174:	mov	r1, r4
   16178:	mov	r0, r5
   1617c:	b	161b0 <__assert_fail@plt+0x56e0>
   16180:	mov	r2, r6
   16184:	mov	r1, r4
   16188:	mov	r0, r5
   1618c:	bl	160d0 <__assert_fail@plt+0x5600>
   16190:	mov	r1, r4
   16194:	mov	r2, #0
   16198:	mov	r3, r0
   1619c:	cmn	r3, #1
   161a0:	mov	r0, r5
   161a4:	blt	16168 <__assert_fail@plt+0x5698>
   161a8:	cmp	r3, r2
   161ac:	beq	161bc <__assert_fail@plt+0x56ec>
   161b0:	bl	14730 <__assert_fail@plt+0x3c60>
   161b4:	subs	r4, r0, #0
   161b8:	bge	16180 <__assert_fail@plt+0x56b0>
   161bc:	mov	r3, r4
   161c0:	mov	r0, r3
   161c4:	pop	{r4, r5, r6, pc}
   161c8:	ldr	r3, [pc, #380]	; 1634c <__assert_fail@plt+0x587c>
   161cc:	ldr	r2, [pc, #380]	; 16350 <__assert_fail@plt+0x5880>
   161d0:	add	r3, pc, r3
   161d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161d8:	sub	sp, sp, #20
   161dc:	ldr	r5, [r3, r2]
   161e0:	cmp	r1, #27
   161e4:	mov	r2, #0
   161e8:	ldr	r3, [r5]
   161ec:	str	r2, [sp, #4]
   161f0:	str	r3, [sp, #12]
   161f4:	bls	16330 <__assert_fail@plt+0x5860>
   161f8:	mov	r7, r1
   161fc:	mov	r6, r0
   16200:	bl	141e0 <__assert_fail@plt+0x3710>
   16204:	cmp	r0, #0
   16208:	mov	r4, r0
   1620c:	str	r0, [sp]
   16210:	bne	16254 <__assert_fail@plt+0x5784>
   16214:	ldr	r3, [r6, #4]
   16218:	lsr	r2, r3, #24
   1621c:	lsl	r1, r3, #8
   16220:	orr	r2, r2, r3, lsl #24
   16224:	and	r1, r1, #16711680	; 0xff0000
   16228:	lsr	r3, r3, #8
   1622c:	orr	r2, r2, r1
   16230:	and	r3, r3, #65280	; 0xff00
   16234:	orr	r3, r2, r3
   16238:	cmp	r7, r3
   1623c:	bcc	16330 <__assert_fail@plt+0x5860>
   16240:	mov	r0, r6
   16244:	bl	14ea4 <__assert_fail@plt+0x43d4>
   16248:	cmp	r0, #0
   1624c:	movlt	r4, r0
   16250:	bge	16270 <__assert_fail@plt+0x57a0>
   16254:	ldr	r2, [sp, #12]
   16258:	ldr	r3, [r5]
   1625c:	mov	r0, r4
   16260:	cmp	r2, r3
   16264:	bne	16348 <__assert_fail@plt+0x5878>
   16268:	add	sp, sp, #20
   1626c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16270:	ldr	fp, [sp, #4]
   16274:	mov	r7, r4
   16278:	add	r8, sp, #4
   1627c:	mov	sl, sp
   16280:	add	r9, sp, #8
   16284:	mov	r2, r8
   16288:	mov	r1, fp
   1628c:	mov	r0, r6
   16290:	bl	14538 <__assert_fail@plt+0x3a68>
   16294:	ldr	r3, [sp, #4]
   16298:	cmp	r3, #0
   1629c:	blt	16338 <__assert_fail@plt+0x5868>
   162a0:	sub	r0, r0, #1
   162a4:	cmp	r0, #8
   162a8:	addls	pc, pc, r0, lsl #2
   162ac:	b	16328 <__assert_fail@plt+0x5858>
   162b0:	b	16318 <__assert_fail@plt+0x5848>
   162b4:	b	162d4 <__assert_fail@plt+0x5804>
   162b8:	b	162f4 <__assert_fail@plt+0x5824>
   162bc:	b	162e0 <__assert_fail@plt+0x5810>
   162c0:	b	16328 <__assert_fail@plt+0x5858>
   162c4:	b	16328 <__assert_fail@plt+0x5858>
   162c8:	b	16328 <__assert_fail@plt+0x5858>
   162cc:	b	16328 <__assert_fail@plt+0x5858>
   162d0:	b	162e8 <__assert_fail@plt+0x5818>
   162d4:	cmp	r7, #0
   162d8:	beq	16320 <__assert_fail@plt+0x5850>
   162dc:	sub	r7, r7, #1
   162e0:	mov	fp, r3
   162e4:	b	16284 <__assert_fail@plt+0x57b4>
   162e8:	cmp	r7, #0
   162ec:	mvnne	r4, #10
   162f0:	b	16254 <__assert_fail@plt+0x5784>
   162f4:	mov	r1, fp
   162f8:	mov	r3, sl
   162fc:	mov	r2, r9
   16300:	mov	r0, r6
   16304:	bl	154d0 <__assert_fail@plt+0x4a00>
   16308:	cmp	r0, #0
   1630c:	beq	16340 <__assert_fail@plt+0x5870>
   16310:	ldr	r3, [sp, #4]
   16314:	b	162e0 <__assert_fail@plt+0x5810>
   16318:	adds	r7, r7, #1
   1631c:	bpl	162e0 <__assert_fail@plt+0x5810>
   16320:	mvn	r4, #10
   16324:	b	16254 <__assert_fail@plt+0x5784>
   16328:	mvn	r4, #12
   1632c:	b	16254 <__assert_fail@plt+0x5784>
   16330:	mvn	r4, #7
   16334:	b	16254 <__assert_fail@plt+0x5784>
   16338:	mov	r4, r3
   1633c:	b	16254 <__assert_fail@plt+0x5784>
   16340:	ldr	r4, [sp]
   16344:	b	16254 <__assert_fail@plt+0x5784>
   16348:	bl	1098c <__stack_chk_fail@plt>
   1634c:	andeq	r0, r1, ip, ror #26
   16350:	andeq	r0, r0, r0, lsr #1
   16354:	ldr	ip, [pc, #132]	; 163e0 <__assert_fail@plt+0x5910>
   16358:	push	{r4, r5, r6, lr}
   1635c:	add	ip, pc, ip
   16360:	ldr	lr, [pc, #124]	; 163e4 <__assert_fail@plt+0x5914>
   16364:	sub	sp, sp, #16
   16368:	ldr	r4, [ip, lr]
   1636c:	add	lr, sp, #8
   16370:	str	lr, [sp]
   16374:	ldr	ip, [r4]
   16378:	ldr	r5, [sp, #32]
   1637c:	ldr	r6, [sp, #36]	; 0x24
   16380:	str	ip, [sp, #12]
   16384:	bl	153f8 <__assert_fail@plt+0x4928>
   16388:	cmp	r0, #0
   1638c:	ldreq	r0, [sp, #8]
   16390:	beq	163bc <__assert_fail@plt+0x58ec>
   16394:	ldr	r2, [sp, #40]	; 0x28
   16398:	ldr	r3, [sp, #8]
   1639c:	add	r2, r2, r5
   163a0:	cmp	r2, r3
   163a4:	bhi	163d4 <__assert_fail@plt+0x5904>
   163a8:	mov	r1, r6
   163ac:	add	r0, r0, r5
   163b0:	ldr	r2, [sp, #40]	; 0x28
   163b4:	bl	10974 <memcpy@plt>
   163b8:	mov	r0, #0
   163bc:	ldr	r2, [sp, #12]
   163c0:	ldr	r3, [r4]
   163c4:	cmp	r2, r3
   163c8:	bne	163dc <__assert_fail@plt+0x590c>
   163cc:	add	sp, sp, #16
   163d0:	pop	{r4, r5, r6, pc}
   163d4:	mvn	r0, #2
   163d8:	b	163bc <__assert_fail@plt+0x58ec>
   163dc:	bl	1098c <__stack_chk_fail@plt>
   163e0:	andeq	r0, r1, r0, ror #23
   163e4:	andeq	r0, r0, r0, lsr #1
   163e8:	ldr	ip, [pc, #156]	; 1648c <__assert_fail@plt+0x59bc>
   163ec:	push	{r4, r5, r6, r7, r8, r9, lr}
   163f0:	add	ip, pc, ip
   163f4:	ldr	lr, [pc, #148]	; 16490 <__assert_fail@plt+0x59c0>
   163f8:	sub	sp, sp, #28
   163fc:	mov	r7, r3
   16400:	ldr	r4, [ip, lr]
   16404:	add	r3, sp, #16
   16408:	mov	r8, r0
   1640c:	ldr	ip, [r4]
   16410:	mov	r9, r1
   16414:	str	ip, [sp, #20]
   16418:	mov	r5, r2
   1641c:	bl	15604 <__assert_fail@plt+0x4b34>
   16420:	cmp	r0, #0
   16424:	ldreq	r0, [sp, #16]
   16428:	beq	16468 <__assert_fail@plt+0x5998>
   1642c:	ldr	r6, [sp, #16]
   16430:	ldr	r3, [sp, #56]	; 0x38
   16434:	cmp	r6, r3
   16438:	bne	16480 <__assert_fail@plt+0x59b0>
   1643c:	mov	r0, r5
   16440:	bl	10a28 <strlen@plt>
   16444:	mov	r3, #0
   16448:	str	r3, [sp]
   1644c:	str	r6, [sp, #8]
   16450:	str	r7, [sp, #4]
   16454:	mov	r2, r5
   16458:	mov	r1, r9
   1645c:	mov	r3, r0
   16460:	mov	r0, r8
   16464:	bl	16354 <__assert_fail@plt+0x5884>
   16468:	ldr	r2, [sp, #20]
   1646c:	ldr	r3, [r4]
   16470:	cmp	r2, r3
   16474:	bne	16488 <__assert_fail@plt+0x59b8>
   16478:	add	sp, sp, #28
   1647c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16480:	mvn	r0, #2
   16484:	b	16468 <__assert_fail@plt+0x5998>
   16488:	bl	1098c <__stack_chk_fail@plt>
   1648c:	andeq	r0, r1, ip, asr #22
   16490:	andeq	r0, r0, r0, lsr #1
   16494:	ldr	ip, [pc, #112]	; 1650c <__assert_fail@plt+0x5a3c>
   16498:	push	{r4, lr}
   1649c:	add	ip, pc, ip
   164a0:	ldr	lr, [pc, #104]	; 16510 <__assert_fail@plt+0x5a40>
   164a4:	sub	sp, sp, #8
   164a8:	mov	r3, sp
   164ac:	ldr	r4, [ip, lr]
   164b0:	ldr	ip, [r4]
   164b4:	str	ip, [sp, #4]
   164b8:	bl	153b8 <__assert_fail@plt+0x48e8>
   164bc:	cmp	r0, #0
   164c0:	ldreq	r0, [sp]
   164c4:	beq	164f0 <__assert_fail@plt+0x5a20>
   164c8:	ldr	r3, [sp]
   164cc:	add	r3, r3, #12
   164d0:	add	r3, r0, r3
   164d4:	cmp	r0, r3
   164d8:	bcs	164ec <__assert_fail@plt+0x5a1c>
   164dc:	mov	r2, #67108864	; 0x4000000
   164e0:	str	r2, [r0], #4
   164e4:	cmp	r0, r3
   164e8:	bcc	164e0 <__assert_fail@plt+0x5a10>
   164ec:	mov	r0, #0
   164f0:	ldr	r2, [sp, #4]
   164f4:	ldr	r3, [r4]
   164f8:	cmp	r2, r3
   164fc:	bne	16508 <__assert_fail@plt+0x5a38>
   16500:	add	sp, sp, #8
   16504:	pop	{r4, pc}
   16508:	bl	1098c <__stack_chk_fail@plt>
   1650c:	andeq	r0, r1, r0, lsr #21
   16510:	andeq	r0, r0, r0, lsr #1
   16514:	ldr	r3, [pc, #112]	; 1658c <__assert_fail@plt+0x5abc>
   16518:	ldr	r2, [pc, #112]	; 16590 <__assert_fail@plt+0x5ac0>
   1651c:	add	r3, pc, r3
   16520:	push	{r4, r5, r6, lr}
   16524:	sub	sp, sp, #8
   16528:	ldr	r6, [r3, r2]
   1652c:	mov	ip, #0
   16530:	cmp	r1, #0
   16534:	ldr	r3, [r6]
   16538:	str	ip, [sp]
   1653c:	str	r3, [sp, #4]
   16540:	blt	1656c <__assert_fail@plt+0x5a9c>
   16544:	mov	r4, r0
   16548:	mov	r5, sp
   1654c:	mov	r2, r5
   16550:	mov	r0, r4
   16554:	bl	14730 <__assert_fail@plt+0x3c60>
   16558:	ldr	r3, [sp]
   1655c:	cmp	r3, #0
   16560:	cmpge	r0, #0
   16564:	mov	r1, r0
   16568:	bge	1654c <__assert_fail@plt+0x5a7c>
   1656c:	ldr	r2, [sp, #4]
   16570:	ldr	r3, [r6]
   16574:	mov	r0, r1
   16578:	cmp	r2, r3
   1657c:	bne	16588 <__assert_fail@plt+0x5ab8>
   16580:	add	sp, sp, #8
   16584:	pop	{r4, r5, r6, pc}
   16588:	bl	1098c <__stack_chk_fail@plt>
   1658c:	andeq	r0, r1, r0, lsr #20
   16590:	andeq	r0, r0, r0, lsr #1
   16594:	push	{r4, r5, r6, lr}
   16598:	mov	r6, r0
   1659c:	mov	r5, r1
   165a0:	bl	16514 <__assert_fail@plt+0x5a44>
   165a4:	subs	r4, r0, #0
   165a8:	blt	165e0 <__assert_fail@plt+0x5b10>
   165ac:	mov	r1, r5
   165b0:	mov	r0, r6
   165b4:	mov	r2, #0
   165b8:	bl	14464 <__assert_fail@plt+0x3994>
   165bc:	sub	r1, r4, r5
   165c0:	add	r1, r0, r1
   165c4:	cmp	r0, r1
   165c8:	bcs	165dc <__assert_fail@plt+0x5b0c>
   165cc:	mov	r3, #67108864	; 0x4000000
   165d0:	str	r3, [r0], #4
   165d4:	cmp	r0, r1
   165d8:	bcc	165d0 <__assert_fail@plt+0x5b00>
   165dc:	mov	r4, #0
   165e0:	mov	r0, r4
   165e4:	pop	{r4, r5, r6, pc}
   165e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   165ec:	mov	r7, r0
   165f0:	ldr	r6, [pc, #72]	; 16640 <__assert_fail@plt+0x5b70>
   165f4:	ldr	r5, [pc, #72]	; 16644 <__assert_fail@plt+0x5b74>
   165f8:	add	r6, pc, r6
   165fc:	add	r5, pc, r5
   16600:	sub	r6, r6, r5
   16604:	mov	r8, r1
   16608:	mov	r9, r2
   1660c:	bl	10900 <calloc@plt-0x20>
   16610:	asrs	r6, r6, #2
   16614:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16618:	mov	r4, #0
   1661c:	add	r4, r4, #1
   16620:	ldr	r3, [r5], #4
   16624:	mov	r2, r9
   16628:	mov	r1, r8
   1662c:	mov	r0, r7
   16630:	blx	r3
   16634:	cmp	r6, r4
   16638:	bne	1661c <__assert_fail@plt+0x5b4c>
   1663c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16640:	andeq	r0, r1, r8, asr #15
   16644:	andeq	r0, r1, r0, asr #15
   16648:	bx	lr

Disassembly of section .fini:

0001664c <.fini>:
   1664c:	push	{r3, lr}
   16650:	pop	{r3, pc}
