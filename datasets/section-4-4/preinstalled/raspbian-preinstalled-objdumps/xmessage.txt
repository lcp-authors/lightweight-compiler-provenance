
raspbian-preinstalled/xmessage:     file format elf32-littlearm


Disassembly of section .init:

00010f00 <_init@@Base>:
   10f00:	push	{r3, lr}
   10f04:	bl	116cc <__assert_fail@plt+0x578>
   10f08:	pop	{r3, pc}

Disassembly of section .plt:

00010f0c <XtGetApplicationResources@plt-0x14>:
   10f0c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f10:	ldr	lr, [pc, #4]	; 10f1c <_init@@Base+0x1c>
   10f14:	add	lr, pc, lr
   10f18:	ldr	pc, [lr, #8]!
   10f1c:	andeq	r3, r1, r4, ror #1

00010f20 <XtGetApplicationResources@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #77824	; 0x13000
   10f28:	ldr	pc, [ip, #228]!	; 0xe4

00010f2c <strcmp@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #77824	; 0x13000
   10f34:	ldr	pc, [ip, #220]!	; 0xdc

00010f38 <strtol@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #77824	; 0x13000
   10f40:	ldr	pc, [ip, #212]!	; 0xd4

00010f44 <fopen@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #77824	; 0x13000
   10f4c:	ldr	pc, [ip, #204]!	; 0xcc

00010f50 <free@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #77824	; 0x13000
   10f58:	ldr	pc, [ip, #196]!	; 0xc4

00010f5c <XtAppInitialize@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #77824	; 0x13000
   10f64:	ldr	pc, [ip, #188]!	; 0xbc

00010f68 <XtCreateManagedWidget@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #77824	; 0x13000
   10f70:	ldr	pc, [ip, #180]!	; 0xb4

00010f74 <XtMalloc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #77824	; 0x13000
   10f7c:	ldr	pc, [ip, #172]!	; 0xac

00010f80 <XtAppAddTimeOut@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #77824	; 0x13000
   10f88:	ldr	pc, [ip, #164]!	; 0xa4

00010f8c <XParseGeometry@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #77824	; 0x13000
   10f94:	ldr	pc, [ip, #156]!	; 0x9c

00010f98 <XtVaSetValues@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #77824	; 0x13000
   10fa0:	ldr	pc, [ip, #148]!	; 0x94

00010fa4 <XtWindow@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #77824	; 0x13000
   10fac:	ldr	pc, [ip, #140]!	; 0x8c

00010fb0 <__stack_chk_fail@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #77824	; 0x13000
   10fb8:	ldr	pc, [ip, #132]!	; 0x84

00010fbc <XtScreen@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #77824	; 0x13000
   10fc4:	ldr	pc, [ip, #124]!	; 0x7c

00010fc8 <realloc@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #77824	; 0x13000
   10fd0:	ldr	pc, [ip, #116]!	; 0x74

00010fd4 <XtVaCreateManagedWidget@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #77824	; 0x13000
   10fdc:	ldr	pc, [ip, #108]!	; 0x6c

00010fe0 <perror@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #77824	; 0x13000
   10fe8:	ldr	pc, [ip, #100]!	; 0x64

00010fec <__xstat@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #77824	; 0x13000
   10ff4:	ldr	pc, [ip, #92]!	; 0x5c

00010ff8 <fwrite@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #77824	; 0x13000
   11000:	ldr	pc, [ip, #84]!	; 0x54

00011004 <strcpy@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #77824	; 0x13000
   1100c:	ldr	pc, [ip, #76]!	; 0x4c

00011010 <fread@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #77824	; 0x13000
   11018:	ldr	pc, [ip, #68]!	; 0x44

0001101c <XtVaCreateWidget@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #77824	; 0x13000
   11024:	ldr	pc, [ip, #60]!	; 0x3c

00011028 <puts@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #77824	; 0x13000
   11030:	ldr	pc, [ip, #52]!	; 0x34

00011034 <malloc@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #77824	; 0x13000
   1103c:	ldr	pc, [ip, #44]!	; 0x2c

00011040 <__libc_start_main@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #77824	; 0x13000
   11048:	ldr	pc, [ip, #36]!	; 0x24

0001104c <XtRealizeWidget@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #77824	; 0x13000
   11054:	ldr	pc, [ip, #28]!

00011058 <__gmon_start__@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #77824	; 0x13000
   11060:	ldr	pc, [ip, #20]!

00011064 <exit@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #77824	; 0x13000
   1106c:	ldr	pc, [ip, #12]!

00011070 <XSetWMProtocols@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #77824	; 0x13000
   11078:	ldr	pc, [ip, #4]!

0001107c <XQueryPointer@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #73728	; 0x12000
   11084:	ldr	pc, [ip, #4092]!	; 0xffc

00011088 <XtOverrideTranslations@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #73728	; 0x12000
   11090:	ldr	pc, [ip, #4084]!	; 0xff4

00011094 <strlen@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #73728	; 0x12000
   1109c:	ldr	pc, [ip, #4076]!	; 0xfec

000110a0 <strchr@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #73728	; 0x12000
   110a8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110ac <XtAppAddActions@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #73728	; 0x12000
   110b4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110b8 <XInternAtom@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #73728	; 0x12000
   110c0:	ldr	pc, [ip, #4052]!	; 0xfd4

000110c4 <XtVaGetValues@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #73728	; 0x12000
   110cc:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d0 <XtAppMainLoop@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #73728	; 0x12000
   110d8:	ldr	pc, [ip, #4036]!	; 0xfc4

000110dc <XtDisplay@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #73728	; 0x12000
   110e4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110e8 <XtParseTranslationTable@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #73728	; 0x12000
   110f0:	ldr	pc, [ip, #4020]!	; 0xfb4

000110f4 <__fprintf_chk@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #73728	; 0x12000
   110fc:	ldr	pc, [ip, #4012]!	; 0xfac

00011100 <fclose@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #73728	; 0x12000
   11108:	ldr	pc, [ip, #4004]!	; 0xfa4

0001110c <XtSetLanguageProc@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #73728	; 0x12000
   11114:	ldr	pc, [ip, #3996]!	; 0xf9c

00011118 <XtDestroyWidget@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #73728	; 0x12000
   11120:	ldr	pc, [ip, #3988]!	; 0xf94

00011124 <XMapWindow@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #73728	; 0x12000
   1112c:	ldr	pc, [ip, #3980]!	; 0xf8c

00011130 <XtAddCallback@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #73728	; 0x12000
   11138:	ldr	pc, [ip, #3972]!	; 0xf84

0001113c <XtSetMappedWhenManaged@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #73728	; 0x12000
   11144:	ldr	pc, [ip, #3964]!	; 0xf7c

00011148 <abort@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #73728	; 0x12000
   11150:	ldr	pc, [ip, #3956]!	; 0xf74

00011154 <__assert_fail@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #73728	; 0x12000
   1115c:	ldr	pc, [ip, #3948]!	; 0xf6c

Disassembly of section .text:

00011160 <.text>:
   11160:	ldr	r3, [pc, #1248]	; 11648 <__assert_fail@plt+0x4f4>
   11164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11168:	sub	sp, sp, #84	; 0x54
   1116c:	ldr	r9, [pc, #1240]	; 1164c <__assert_fail@plt+0x4f8>
   11170:	ldr	ip, [r1]
   11174:	mov	r2, #0
   11178:	ldr	r3, [r3]
   1117c:	ldr	r7, [pc, #1228]	; 11650 <__assert_fail@plt+0x4fc>
   11180:	mov	r4, r1
   11184:	str	r0, [sp, #36]	; 0x24
   11188:	mov	r1, r2
   1118c:	mov	r0, r2
   11190:	mov	r6, r2
   11194:	str	ip, [r9]
   11198:	str	r3, [sp, #76]	; 0x4c
   1119c:	bl	1110c <XtSetLanguageProc@plt>
   111a0:	add	r3, sp, #36	; 0x24
   111a4:	sub	r2, r7, #112	; 0x70
   111a8:	str	r6, [sp, #16]
   111ac:	str	r6, [sp, #12]
   111b0:	str	r3, [sp]
   111b4:	ldr	r1, [pc, #1176]	; 11654 <__assert_fail@plt+0x500>
   111b8:	mov	r3, #7
   111bc:	stmib	sp, {r4, r7}
   111c0:	add	r0, sp, #40	; 0x28
   111c4:	bl	10f5c <XtAppInitialize@plt>
   111c8:	ldr	r5, [pc, #1160]	; 11658 <__assert_fail@plt+0x504>
   111cc:	str	r6, [sp, #4]
   111d0:	str	r6, [sp]
   111d4:	add	r2, r7, #12
   111d8:	add	r1, r5, #4
   111dc:	mov	r3, #9
   111e0:	mov	r8, r0
   111e4:	bl	10f20 <XtGetApplicationResources@plt>
   111e8:	ldr	r6, [sp, #36]	; 0x24
   111ec:	cmp	r6, #1
   111f0:	ble	1123c <__assert_fail@plt+0xe8>
   111f4:	ldr	r1, [pc, #1120]	; 1165c <__assert_fail@plt+0x508>
   111f8:	ldr	r0, [r4, #4]
   111fc:	bl	10f2c <strcmp@plt>
   11200:	subs	r7, r0, #0
   11204:	beq	11228 <__assert_fail@plt+0xd4>
   11208:	ldr	r3, [r5, #4]
   1120c:	cmp	r3, #0
   11210:	beq	11378 <__assert_fail@plt+0x224>
   11214:	ldr	r3, [pc, #1092]	; 11660 <__assert_fail@plt+0x50c>
   11218:	ldr	r0, [r3]
   1121c:	bl	122ec <__assert_fail@plt+0x1198>
   11220:	mov	r0, #1
   11224:	bl	11064 <exit@plt>
   11228:	ldr	r3, [pc, #1076]	; 11664 <__assert_fail@plt+0x510>
   1122c:	ldr	r0, [r3]
   11230:	bl	122ec <__assert_fail@plt+0x1198>
   11234:	mov	r0, r7
   11238:	bl	11064 <exit@plt>
   1123c:	bne	11214 <__assert_fail@plt+0xc0>
   11240:	ldr	r0, [r5, #4]
   11244:	cmp	r0, #0
   11248:	beq	11214 <__assert_fail@plt+0xc0>
   1124c:	add	r1, sp, #44	; 0x2c
   11250:	bl	120cc <__assert_fail@plt+0xf78>
   11254:	subs	r3, r0, #0
   11258:	str	r3, [sp, #24]
   1125c:	beq	11624 <__assert_fail@plt+0x4d0>
   11260:	mov	r0, r8
   11264:	bl	110dc <XtDisplay@plt>
   11268:	mov	r2, #0
   1126c:	ldr	r1, [pc, #1012]	; 11668 <__assert_fail@plt+0x514>
   11270:	bl	110b8 <XInternAtom@plt>
   11274:	mov	r2, #2
   11278:	ldr	r1, [pc, #1004]	; 1166c <__assert_fail@plt+0x518>
   1127c:	str	r0, [r5]
   11280:	ldr	r0, [sp, #40]	; 0x28
   11284:	bl	110ac <XtAppAddActions@plt>
   11288:	ldr	r0, [pc, #992]	; 11670 <__assert_fail@plt+0x51c>
   1128c:	bl	110e8 <XtParseTranslationTable@plt>
   11290:	mov	r1, r0
   11294:	mov	r0, r8
   11298:	bl	11088 <XtOverrideTranslations@plt>
   1129c:	ldr	r0, [sp, #44]	; 0x2c
   112a0:	cmp	r0, #0
   112a4:	movle	r6, #0
   112a8:	ble	112d4 <__assert_fail@plt+0x180>
   112ac:	ldr	r3, [sp, #24]
   112b0:	sub	r1, r0, #1
   112b4:	add	r1, r3, r1
   112b8:	mov	r6, #0
   112bc:	sub	r3, r3, #1
   112c0:	ldrb	r2, [r3, #1]!
   112c4:	cmp	r2, #9
   112c8:	addeq	r6, r6, #1
   112cc:	cmp	r1, r3
   112d0:	bne	112c0 <__assert_fail@plt+0x16c>
   112d4:	rsb	r6, r6, r6, lsl #3
   112d8:	add	r6, r6, r0
   112dc:	add	r6, r6, #1
   112e0:	mov	r0, r6
   112e4:	bl	10f74 <XtMalloc@plt>
   112e8:	ldr	r3, [sp, #44]	; 0x2c
   112ec:	cmp	r3, #0
   112f0:	movle	r4, #0
   112f4:	mov	r7, r0
   112f8:	ble	1143c <__assert_fail@plt+0x2e8>
   112fc:	ldr	r2, [sp, #24]
   11300:	mov	r3, #0
   11304:	mov	r4, r3
   11308:	mov	r1, r3
   1130c:	sub	lr, r2, #1
   11310:	mov	ip, #32
   11314:	b	1133c <__assert_fail@plt+0x1e8>
   11318:	cmp	r0, #10
   1131c:	bne	1142c <__assert_fail@plt+0x2d8>
   11320:	mov	r4, r2
   11324:	mov	r3, #0
   11328:	strb	r0, [sl]
   1132c:	ldr	r2, [sp, #44]	; 0x2c
   11330:	add	r1, r1, #1
   11334:	cmp	r1, r2
   11338:	bge	1143c <__assert_fail@plt+0x2e8>
   1133c:	ldrb	r0, [lr, #1]!
   11340:	add	r2, r4, #1
   11344:	add	sl, r7, r4
   11348:	cmp	r0, #9
   1134c:	bne	11318 <__assert_fail@plt+0x1c4>
   11350:	sub	r0, r4, #1
   11354:	add	r0, r7, r0
   11358:	b	11360 <__assert_fail@plt+0x20c>
   1135c:	add	r2, r2, #1
   11360:	add	r3, r3, #1
   11364:	tst	r3, #7
   11368:	strb	ip, [r0, #1]!
   1136c:	mov	r4, r2
   11370:	bne	1135c <__assert_fail@plt+0x208>
   11374:	b	1132c <__assert_fail@plt+0x1d8>
   11378:	add	sl, r4, r6, lsl #2
   1137c:	sub	sl, sl, #4
   11380:	sub	r6, r6, #1
   11384:	mov	r7, r4
   11388:	ldr	r0, [r7, #4]!
   1138c:	bl	11094 <strlen@plt>
   11390:	cmp	r7, sl
   11394:	add	r6, r6, r0
   11398:	bne	11388 <__assert_fail@plt+0x234>
   1139c:	mov	r0, r6
   113a0:	bl	11034 <malloc@plt>
   113a4:	subs	r3, r0, #0
   113a8:	str	r3, [sp, #24]
   113ac:	beq	11604 <__assert_fail@plt+0x4b0>
   113b0:	ldr	r3, [sp, #36]	; 0x24
   113b4:	cmp	r3, #1
   113b8:	ble	11424 <__assert_fail@plt+0x2d0>
   113bc:	mov	fp, r3
   113c0:	ldr	r7, [sp, #24]
   113c4:	sub	r3, r3, #1
   113c8:	str	r6, [sp, #32]
   113cc:	mov	sl, #1
   113d0:	mov	r6, r4
   113d4:	mov	r4, r3
   113d8:	str	r8, [sp, #28]
   113dc:	ldr	r8, [r6, #4]!
   113e0:	mov	r0, r7
   113e4:	mov	r1, r8
   113e8:	bl	11004 <strcpy@plt>
   113ec:	mov	r0, r8
   113f0:	bl	11094 <strlen@plt>
   113f4:	cmp	r4, sl
   113f8:	movne	r3, #32
   113fc:	moveq	r3, #0
   11400:	add	sl, sl, #1
   11404:	add	r7, r7, r0
   11408:	strbne	r3, [r7]
   1140c:	strbeq	r3, [r7]
   11410:	addne	r7, r7, #1
   11414:	cmp	sl, fp
   11418:	bne	113dc <__assert_fail@plt+0x288>
   1141c:	ldr	r8, [sp, #28]
   11420:	ldr	r6, [sp, #32]
   11424:	str	r6, [sp, #44]	; 0x2c
   11428:	b	11260 <__assert_fail@plt+0x10c>
   1142c:	add	r3, r3, #1
   11430:	mov	r4, r2
   11434:	strb	r0, [sl]
   11438:	b	1132c <__assert_fail@plt+0x1d8>
   1143c:	cmp	r4, r6
   11440:	bge	11634 <__assert_fail@plt+0x4e0>
   11444:	mov	r6, #0
   11448:	ldr	r0, [sp, #24]
   1144c:	strb	r6, [r7, r4]
   11450:	bl	10f50 <free@plt>
   11454:	ldrh	r3, [r5, #24]
   11458:	ldrh	r0, [r5, #26]
   1145c:	ldrb	r2, [r5, #16]
   11460:	str	r3, [sp, #12]
   11464:	ldr	r3, [r5, #12]
   11468:	str	r0, [sp, #8]
   1146c:	str	r2, [sp]
   11470:	str	r3, [sp, #4]
   11474:	mov	r1, r7
   11478:	mov	r2, r4
   1147c:	ldr	r3, [r5, #8]
   11480:	mov	r0, r8
   11484:	str	r4, [sp, #44]	; 0x2c
   11488:	bl	117a8 <__assert_fail@plt+0x654>
   1148c:	cmp	r0, r6
   11490:	beq	11524 <__assert_fail@plt+0x3d0>
   11494:	mov	r1, r6
   11498:	mov	r0, r8
   1149c:	bl	1113c <XtSetMappedWhenManaged@plt>
   114a0:	mov	r0, r8
   114a4:	bl	1104c <XtRealizeWidget@plt>
   114a8:	mov	r0, r8
   114ac:	bl	110dc <XtDisplay@plt>
   114b0:	mov	r4, r0
   114b4:	mov	r0, r8
   114b8:	bl	10fa4 <XtWindow@plt>
   114bc:	mov	r3, #1
   114c0:	ldr	r2, [pc, #400]	; 11658 <__assert_fail@plt+0x504>
   114c4:	mov	r1, r0
   114c8:	mov	r0, r4
   114cc:	bl	11070 <XSetWMProtocols@plt>
   114d0:	ldrb	r3, [r5, #17]
   114d4:	cmp	r3, #0
   114d8:	bne	11568 <__assert_fail@plt+0x414>
   114dc:	ldrb	r3, [r5, #18]
   114e0:	cmp	r3, #0
   114e4:	bne	115a0 <__assert_fail@plt+0x44c>
   114e8:	mov	r0, r8
   114ec:	bl	110dc <XtDisplay@plt>
   114f0:	mov	r4, r0
   114f4:	mov	r0, r8
   114f8:	bl	10fa4 <XtWindow@plt>
   114fc:	mov	r1, r0
   11500:	mov	r0, r4
   11504:	bl	11124 <XMapWindow@plt>
   11508:	ldr	r2, [r5, #20]
   1150c:	cmp	r2, #0
   11510:	bne	1154c <__assert_fail@plt+0x3f8>
   11514:	ldr	r0, [sp, #40]	; 0x28
   11518:	bl	110d0 <XtAppMainLoop@plt>
   1151c:	mov	r0, #0
   11520:	bl	11064 <exit@plt>
   11524:	ldr	r2, [pc, #308]	; 11660 <__assert_fail@plt+0x50c>
   11528:	ldr	r1, [r5, #8]
   1152c:	ldr	r3, [r9]
   11530:	str	r1, [sp]
   11534:	mov	r1, #1
   11538:	ldr	r0, [r2]
   1153c:	ldr	r2, [pc, #304]	; 11674 <__assert_fail@plt+0x520>
   11540:	bl	110f4 <__fprintf_chk@plt>
   11544:	mov	r0, #1
   11548:	bl	11064 <exit@plt>
   1154c:	mov	r1, #1000	; 0x3e8
   11550:	mov	r3, #0
   11554:	mul	r1, r1, r2
   11558:	ldr	r0, [sp, #40]	; 0x28
   1155c:	ldr	r2, [pc, #276]	; 11678 <__assert_fail@plt+0x524>
   11560:	bl	10f80 <XtAppAddTimeOut@plt>
   11564:	b	11514 <__assert_fail@plt+0x3c0>
   11568:	mov	r0, r8
   1156c:	bl	10fbc <XtScreen@plt>
   11570:	ldr	r3, [r0, #12]
   11574:	mov	r0, r8
   11578:	add	r3, r3, r3, lsr #31
   1157c:	asr	r4, r3, #1
   11580:	bl	10fbc <XtScreen@plt>
   11584:	mov	r1, r4
   11588:	ldr	r2, [r0, #16]
   1158c:	mov	r0, r8
   11590:	add	r2, r2, r2, lsr #31
   11594:	asr	r2, r2, #1
   11598:	bl	12368 <__assert_fail@plt+0x1214>
   1159c:	b	114e8 <__assert_fail@plt+0x394>
   115a0:	mov	r0, r8
   115a4:	bl	110dc <XtDisplay@plt>
   115a8:	mov	r4, r0
   115ac:	mov	r0, r8
   115b0:	bl	10fa4 <XtWindow@plt>
   115b4:	add	r2, sp, #72	; 0x48
   115b8:	add	r3, sp, #68	; 0x44
   115bc:	add	r1, sp, #64	; 0x40
   115c0:	str	r2, [sp, #16]
   115c4:	str	r3, [sp, #12]
   115c8:	add	r2, sp, #52	; 0x34
   115cc:	add	r3, sp, #48	; 0x30
   115d0:	str	r1, [sp, #8]
   115d4:	str	r2, [sp, #4]
   115d8:	str	r3, [sp]
   115dc:	add	r2, sp, #56	; 0x38
   115e0:	add	r3, sp, #60	; 0x3c
   115e4:	mov	r1, r0
   115e8:	mov	r0, r4
   115ec:	bl	1107c <XQueryPointer@plt>
   115f0:	ldr	r2, [sp, #52]	; 0x34
   115f4:	ldr	r1, [sp, #48]	; 0x30
   115f8:	mov	r0, r8
   115fc:	bl	12368 <__assert_fail@plt+0x1214>
   11600:	b	114e8 <__assert_fail@plt+0x394>
   11604:	ldr	r1, [pc, #84]	; 11660 <__assert_fail@plt+0x50c>
   11608:	ldr	r3, [r9]
   1160c:	ldr	r2, [pc, #104]	; 1167c <__assert_fail@plt+0x528>
   11610:	ldr	r0, [r1]
   11614:	mov	r1, #1
   11618:	bl	110f4 <__fprintf_chk@plt>
   1161c:	mov	r0, #1
   11620:	bl	11064 <exit@plt>
   11624:	ldr	r1, [pc, #52]	; 11660 <__assert_fail@plt+0x50c>
   11628:	ldr	r3, [r9]
   1162c:	ldr	r2, [pc, #76]	; 11680 <__assert_fail@plt+0x52c>
   11630:	b	11610 <__assert_fail@plt+0x4bc>
   11634:	ldr	r3, [pc, #72]	; 11684 <__assert_fail@plt+0x530>
   11638:	mov	r2, #199	; 0xc7
   1163c:	ldr	r1, [pc, #68]	; 11688 <__assert_fail@plt+0x534>
   11640:	ldr	r0, [pc, #68]	; 1168c <__assert_fail@plt+0x538>
   11644:	bl	11154 <__assert_fail@plt>
   11648:	andeq	r2, r2, r8, lsl #31
   1164c:	andeq	r4, r2, ip, asr #5
   11650:	andeq	r4, r2, r0, ror r1
   11654:	andeq	r2, r1, r0, asr #14
   11658:			; <UNDEFINED> instruction: 0x000242b0
   1165c:	andeq	r2, r1, ip, asr #14
   11660:	muleq	r2, r0, r2
   11664:	andeq	r4, r2, r0, lsr #5
   11668:	andeq	r2, r1, r4, lsr #15
   1166c:	andeq	r4, r2, r8, ror r2
   11670:			; <UNDEFINED> instruction: 0x000127b8
   11674:	andeq	r2, r1, r4, lsl #16
   11678:	andeq	r2, r1, r4, asr #5
   1167c:	andeq	r2, r1, r8, ror r7
   11680:	andeq	r2, r1, r4, asr r7
   11684:	strdeq	r2, [r1], -r4
   11688:	andeq	r2, r1, r0, ror #15
   1168c:	strdeq	r2, [r1], -r8
   11690:	mov	fp, #0
   11694:	mov	lr, #0
   11698:	pop	{r1}		; (ldr r1, [sp], #4)
   1169c:	mov	r2, sp
   116a0:	push	{r2}		; (str r2, [sp, #-4]!)
   116a4:	push	{r0}		; (str r0, [sp, #-4]!)
   116a8:	ldr	ip, [pc, #16]	; 116c0 <__assert_fail@plt+0x56c>
   116ac:	push	{ip}		; (str ip, [sp, #-4]!)
   116b0:	ldr	r0, [pc, #12]	; 116c4 <__assert_fail@plt+0x570>
   116b4:	ldr	r3, [pc, #12]	; 116c8 <__assert_fail@plt+0x574>
   116b8:	bl	11040 <__libc_start_main@plt>
   116bc:	bl	11148 <abort@plt>
   116c0:	andeq	r2, r1, r4, lsr #11
   116c4:	andeq	r1, r1, r0, ror #2
   116c8:	andeq	r2, r1, r4, asr #10
   116cc:	ldr	r3, [pc, #20]	; 116e8 <__assert_fail@plt+0x594>
   116d0:	ldr	r2, [pc, #20]	; 116ec <__assert_fail@plt+0x598>
   116d4:	add	r3, pc, r3
   116d8:	ldr	r2, [r3, r2]
   116dc:	cmp	r2, #0
   116e0:	bxeq	lr
   116e4:	b	11058 <__gmon_start__@plt>
   116e8:	andeq	r2, r1, r4, lsr #18
   116ec:	andeq	r0, r0, ip, asr #1
   116f0:	ldr	r0, [pc, #24]	; 11710 <__assert_fail@plt+0x5bc>
   116f4:	ldr	r3, [pc, #24]	; 11714 <__assert_fail@plt+0x5c0>
   116f8:	cmp	r3, r0
   116fc:	bxeq	lr
   11700:	ldr	r3, [pc, #16]	; 11718 <__assert_fail@plt+0x5c4>
   11704:	cmp	r3, #0
   11708:	bxeq	lr
   1170c:	bx	r3
   11710:	andeq	r4, r2, r8, lsl #5
   11714:	andeq	r4, r2, r8, lsl #5
   11718:	andeq	r0, r0, r0
   1171c:	ldr	r0, [pc, #36]	; 11748 <__assert_fail@plt+0x5f4>
   11720:	ldr	r1, [pc, #36]	; 1174c <__assert_fail@plt+0x5f8>
   11724:	sub	r1, r1, r0
   11728:	asr	r1, r1, #2
   1172c:	add	r1, r1, r1, lsr #31
   11730:	asrs	r1, r1, #1
   11734:	bxeq	lr
   11738:	ldr	r3, [pc, #16]	; 11750 <__assert_fail@plt+0x5fc>
   1173c:	cmp	r3, #0
   11740:	bxeq	lr
   11744:	bx	r3
   11748:	andeq	r4, r2, r8, lsl #5
   1174c:	andeq	r4, r2, r8, lsl #5
   11750:	andeq	r0, r0, r0
   11754:	push	{r4, lr}
   11758:	ldr	r4, [pc, #24]	; 11778 <__assert_fail@plt+0x624>
   1175c:	ldrb	r3, [r4]
   11760:	cmp	r3, #0
   11764:	popne	{r4, pc}
   11768:	bl	116f0 <__assert_fail@plt+0x59c>
   1176c:	mov	r3, #1
   11770:	strb	r3, [r4]
   11774:	pop	{r4, pc}
   11778:	andeq	r4, r2, ip, lsr #5
   1177c:	b	1171c <__assert_fail@plt+0x5c8>
   11780:	ldrb	r3, [r1, #8]
   11784:	push	{r4, lr}
   11788:	mov	r4, r1
   1178c:	cmp	r3, #0
   11790:	bne	1179c <__assert_fail@plt+0x648>
   11794:	ldr	r0, [r4, #4]
   11798:	bl	11064 <exit@plt>
   1179c:	ldr	r0, [r1]
   117a0:	bl	11028 <puts@plt>
   117a4:	b	11794 <__assert_fail@plt+0x640>
   117a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117ac:	subs	r4, r3, #0
   117b0:	ldr	r3, [pc, #2120]	; 12000 <__assert_fail@plt+0xeac>
   117b4:	sub	sp, sp, #220	; 0xdc
   117b8:	mov	sl, r1
   117bc:	ldr	r3, [r3]
   117c0:	str	r0, [sp, #72]	; 0x48
   117c4:	str	r3, [sp, #212]	; 0xd4
   117c8:	ldrb	r3, [sp, #256]	; 0x100
   117cc:	str	r2, [sp, #84]	; 0x54
   117d0:	str	r3, [sp, #60]	; 0x3c
   117d4:	ldr	r3, [sp, #260]	; 0x104
   117d8:	str	r3, [sp, #92]	; 0x5c
   117dc:	add	r3, sp, #264	; 0x108
   117e0:	ldrh	r3, [r3]
   117e4:	str	r3, [sp, #76]	; 0x4c
   117e8:	add	r3, sp, #268	; 0x10c
   117ec:	ldrh	r3, [r3]
   117f0:	str	r3, [sp, #80]	; 0x50
   117f4:	beq	11f60 <__assert_fail@plt+0xe0c>
   117f8:	ldrb	r2, [r4]
   117fc:	cmp	r2, #0
   11800:	moveq	r5, r2
   11804:	streq	r5, [sp, #64]	; 0x40
   11808:	beq	1184c <__assert_fail@plt+0x6f8>
   1180c:	mov	r3, #1
   11810:	mov	r1, r4
   11814:	mov	lr, r3
   11818:	mov	r3, r1
   1181c:	cmp	r2, #92	; 0x5c
   11820:	ldrb	r0, [r3, #1]!
   11824:	movne	ip, r2
   11828:	movne	r2, r0
   1182c:	beq	11904 <__assert_fail@plt+0x7b0>
   11830:	cmp	ip, #44	; 0x2c
   11834:	addeq	lr, lr, #1
   11838:	cmp	r2, #0
   1183c:	mov	r1, r3
   11840:	bne	11818 <__assert_fail@plt+0x6c4>
   11844:	sub	r5, r3, r4
   11848:	str	lr, [sp, #64]	; 0x40
   1184c:	ldr	r3, [sp, #64]	; 0x40
   11850:	lsl	r0, r3, #4
   11854:	bl	11034 <malloc@plt>
   11858:	subs	fp, r0, #0
   1185c:	beq	11ff0 <__assert_fail@plt+0xe9c>
   11860:	add	r0, r5, #1
   11864:	bl	11034 <malloc@plt>
   11868:	subs	r3, r0, #0
   1186c:	str	r3, [sp, #88]	; 0x58
   11870:	beq	120b4 <__assert_fail@plt+0xf60>
   11874:	mov	r1, r4
   11878:	bl	11004 <strcpy@plt>
   1187c:	ldr	r8, [sp, #88]	; 0x58
   11880:	mov	r5, #0
   11884:	mov	r3, r5
   11888:	ldrb	r6, [r8]
   1188c:	cmp	r6, #0
   11890:	beq	119e4 <__assert_fail@plt+0x890>
   11894:	add	r0, r5, #101	; 0x65
   11898:	mov	r2, r8
   1189c:	mov	r9, #0
   118a0:	cmp	r6, #92	; 0x5c
   118a4:	beq	1196c <__assert_fail@plt+0x818>
   118a8:	cmp	r6, #58	; 0x3a
   118ac:	mov	r7, r2
   118b0:	beq	11950 <__assert_fail@plt+0x7fc>
   118b4:	cmp	r6, #44	; 0x2c
   118b8:	beq	11984 <__assert_fail@plt+0x830>
   118bc:	ldrb	r6, [r2, #1]
   118c0:	add	r4, r2, #1
   118c4:	mov	r1, r4
   118c8:	cmp	r6, #0
   118cc:	beq	118fc <__assert_fail@plt+0x7a8>
   118d0:	cmp	r6, #92	; 0x5c
   118d4:	mov	r2, r1
   118d8:	bne	118a8 <__assert_fail@plt+0x754>
   118dc:	ldrb	r7, [r4, #1]
   118e0:	cmp	r7, #0
   118e4:	beq	1197c <__assert_fail@plt+0x828>
   118e8:	ldrb	r6, [r4, #2]
   118ec:	add	r2, r4, #2
   118f0:	cmp	r6, #0
   118f4:	bne	118a0 <__assert_fail@plt+0x74c>
   118f8:	mov	r4, r2
   118fc:	mov	r7, r6
   11900:	b	1198c <__assert_fail@plt+0x838>
   11904:	cmp	r0, #0
   11908:	beq	11844 <__assert_fail@plt+0x6f0>
   1190c:	ldrb	ip, [r1, #2]
   11910:	add	r1, r1, #2
   11914:	cmp	ip, #0
   11918:	beq	11944 <__assert_fail@plt+0x7f0>
   1191c:	add	r0, r1, #1
   11920:	cmp	ip, #92	; 0x5c
   11924:	mov	r3, r0
   11928:	ldrb	r2, [r1, #1]
   1192c:	bne	11830 <__assert_fail@plt+0x6dc>
   11930:	cmp	r2, #0
   11934:	beq	11fe4 <__assert_fail@plt+0xe90>
   11938:	ldrb	ip, [r1, #2]!
   1193c:	cmp	ip, #0
   11940:	bne	1191c <__assert_fail@plt+0x7c8>
   11944:	str	lr, [sp, #64]	; 0x40
   11948:	sub	r5, r1, r4
   1194c:	b	1184c <__assert_fail@plt+0x6f8>
   11950:	ldrb	r6, [r2, #1]
   11954:	add	r4, r2, #1
   11958:	mov	r1, r4
   1195c:	cmp	r6, #0
   11960:	beq	11ee0 <__assert_fail@plt+0xd8c>
   11964:	mov	r9, r2
   11968:	b	118d0 <__assert_fail@plt+0x77c>
   1196c:	mov	r4, r2
   11970:	ldrb	r7, [r4, #1]
   11974:	cmp	r7, #0
   11978:	bne	118e8 <__assert_fail@plt+0x794>
   1197c:	add	r4, r4, #1
   11980:	b	1198c <__assert_fail@plt+0x838>
   11984:	mov	r4, r2
   11988:	strb	r3, [r2]
   1198c:	cmp	r9, #0
   11990:	beq	119b0 <__assert_fail@plt+0x85c>
   11994:	mov	r2, #10
   11998:	mov	r1, #0
   1199c:	add	r0, r9, #1
   119a0:	str	r3, [sp, #68]	; 0x44
   119a4:	bl	10f38 <strtol@plt>
   119a8:	ldr	r3, [sp, #68]	; 0x44
   119ac:	strb	r3, [r9]
   119b0:	ldr	r2, [sp, #64]	; 0x40
   119b4:	cmp	r5, r2
   119b8:	beq	11f24 <__assert_fail@plt+0xdd0>
   119bc:	cmp	r7, #0
   119c0:	str	r8, [fp, r5, lsl #4]
   119c4:	addne	r8, r4, #1
   119c8:	moveq	r8, r4
   119cc:	add	r2, fp, r5, lsl #4
   119d0:	ldrb	r6, [r8]
   119d4:	str	r0, [r2, #4]
   119d8:	add	r5, r5, #1
   119dc:	cmp	r6, #0
   119e0:	bne	11894 <__assert_fail@plt+0x740>
   119e4:	ldr	r3, [sp, #64]	; 0x40
   119e8:	cmp	r5, r3
   119ec:	bne	12088 <__assert_fail@plt+0xf34>
   119f0:	cmp	r5, #0
   119f4:	addne	r0, fp, #16
   119f8:	addne	ip, r0, r5, lsl #4
   119fc:	beq	11a5c <__assert_fail@plt+0x908>
   11a00:	ldr	r3, [r0, #-16]
   11a04:	ldrb	r1, [r3]
   11a08:	cmp	r1, #0
   11a0c:	movne	r2, r3
   11a10:	beq	11a4c <__assert_fail@plt+0x8f8>
   11a14:	cmp	r1, #92	; 0x5c
   11a18:	beq	11eec <__assert_fail@plt+0xd98>
   11a1c:	strb	r1, [r3]
   11a20:	ldrb	r1, [r2, #1]
   11a24:	add	r3, r3, #1
   11a28:	add	r2, r2, #1
   11a2c:	cmp	r1, #0
   11a30:	beq	11a4c <__assert_fail@plt+0x8f8>
   11a34:	cmp	r1, #92	; 0x5c
   11a38:	beq	11eec <__assert_fail@plt+0xd98>
   11a3c:	strb	r1, [r3], #1
   11a40:	ldrb	r1, [r2, #1]!
   11a44:	cmp	r1, #0
   11a48:	bne	11a34 <__assert_fail@plt+0x8e0>
   11a4c:	add	r0, r0, #16
   11a50:	cmp	ip, r0
   11a54:	strb	r6, [r3]
   11a58:	bne	11a00 <__assert_fail@plt+0x8ac>
   11a5c:	ldr	r3, [pc, #1440]	; 12004 <__assert_fail@plt+0xeb0>
   11a60:	mov	r4, #0
   11a64:	str	r4, [sp]
   11a68:	ldr	r2, [sp, #72]	; 0x48
   11a6c:	ldr	r1, [r3]
   11a70:	ldr	r0, [pc, #1424]	; 12008 <__assert_fail@plt+0xeb4>
   11a74:	mov	r3, r4
   11a78:	bl	10f68 <XtCreateManagedWidget@plt>
   11a7c:	ldr	r6, [pc, #1416]	; 1200c <__assert_fail@plt+0xeb8>
   11a80:	ldr	r2, [pc, #1416]	; 12010 <__assert_fail@plt+0xebc>
   11a84:	sub	r3, r6, #296	; 0x128
   11a88:	ldr	lr, [pc, #1412]	; 12014 <__assert_fail@plt+0xec0>
   11a8c:	sub	r3, r3, #2
   11a90:	ldr	r1, [r2]
   11a94:	str	r3, [sp, #36]	; 0x24
   11a98:	add	r3, r3, #360	; 0x168
   11a9c:	ldr	r2, [sp, #84]	; 0x54
   11aa0:	add	r3, r3, #3
   11aa4:	str	lr, [sp, #28]
   11aa8:	ldr	r9, [pc, #1384]	; 12018 <__assert_fail@plt+0xec4>
   11aac:	ldr	lr, [pc, #1384]	; 1201c <__assert_fail@plt+0xec8>
   11ab0:	mov	ip, #1
   11ab4:	str	r3, [sp, #12]
   11ab8:	mov	r3, #2
   11abc:	str	lr, [sp, #20]
   11ac0:	str	ip, [sp, #24]
   11ac4:	str	r2, [sp, #40]	; 0x28
   11ac8:	str	r3, [sp]
   11acc:	str	r4, [sp, #52]	; 0x34
   11ad0:	ldr	r3, [pc, #1352]	; 12020 <__assert_fail@plt+0xecc>
   11ad4:	str	r4, [sp, #32]
   11ad8:	str	r4, [sp, #16]
   11adc:	str	sl, [sp, #48]	; 0x30
   11ae0:	str	r6, [sp, #44]	; 0x2c
   11ae4:	str	r9, [sp, #4]
   11ae8:	mov	r7, r0
   11aec:	mov	r0, #3
   11af0:	mov	r2, r7
   11af4:	str	r0, [sp, #8]
   11af8:	ldr	r0, [pc, #1316]	; 12024 <__assert_fail@plt+0xed0>
   11afc:	bl	10fd4 <XtVaCreateManagedWidget@plt>
   11b00:	mov	r3, r4
   11b04:	add	r2, sp, #112	; 0x70
   11b08:	ldr	r1, [pc, #1304]	; 12028 <__assert_fail@plt+0xed4>
   11b0c:	mov	r8, r0
   11b10:	ldr	r0, [sp, #72]	; 0x48
   11b14:	bl	110c4 <XtVaGetValues@plt>
   11b18:	add	r3, sp, #128	; 0x80
   11b1c:	str	r3, [sp]
   11b20:	ldr	r0, [sp, #112]	; 0x70
   11b24:	add	r3, sp, #124	; 0x7c
   11b28:	add	r2, sp, #120	; 0x78
   11b2c:	add	r1, sp, #116	; 0x74
   11b30:	bl	10f8c <XParseGeometry@plt>
   11b34:	and	r0, r0, #12
   11b38:	cmp	r0, #12
   11b3c:	beq	11d80 <__assert_fail@plt+0xc2c>
   11b40:	ldr	ip, [pc, #1252]	; 1202c <__assert_fail@plt+0xed8>
   11b44:	ldr	r0, [pc, #1252]	; 12030 <__assert_fail@plt+0xedc>
   11b48:	add	r1, sp, #106	; 0x6a
   11b4c:	add	r2, sp, #104	; 0x68
   11b50:	add	r3, sp, #110	; 0x6e
   11b54:	str	ip, [sp, #12]
   11b58:	str	r0, [sp, #4]
   11b5c:	str	r1, [sp, #16]
   11b60:	str	r2, [sp, #8]
   11b64:	str	r3, [sp]
   11b68:	add	r2, sp, #108	; 0x6c
   11b6c:	ldr	r3, [pc, #1216]	; 12034 <__assert_fail@plt+0xee0>
   11b70:	ldr	r1, [pc, #1216]	; 12038 <__assert_fail@plt+0xee4>
   11b74:	mov	r0, r8
   11b78:	str	r4, [sp, #20]
   11b7c:	bl	110c4 <XtVaGetValues@plt>
   11b80:	ldrsh	r1, [sp, #106]	; 0x6a
   11b84:	ldrsh	r3, [sp, #104]	; 0x68
   11b88:	ldrsh	r0, [sp, #110]	; 0x6e
   11b8c:	ldrsh	r2, [sp, #108]	; 0x6c
   11b90:	add	r3, r3, r1
   11b94:	add	r3, r3, #1
   11b98:	add	r2, r2, r0
   11b9c:	add	r2, r2, #1
   11ba0:	add	r3, r3, r3, lsr #31
   11ba4:	ldr	r1, [pc, #1168]	; 1203c <__assert_fail@plt+0xee8>
   11ba8:	add	r2, r2, r2, lsr #31
   11bac:	sub	r0, r6, #376	; 0x178
   11bb0:	sub	ip, r6, #392	; 0x188
   11bb4:	asr	r3, r3, #1
   11bb8:	sub	r0, r0, #1
   11bbc:	asr	r2, r2, #1
   11bc0:	ldr	r1, [r1]
   11bc4:	stmib	sp, {r0, r3, ip}
   11bc8:	sub	r3, r6, #304	; 0x130
   11bcc:	str	r2, [sp, #16]
   11bd0:	str	r4, [sp, #20]
   11bd4:	mov	r2, r7
   11bd8:	str	sl, [sp]
   11bdc:	ldr	r0, [pc, #1088]	; 12024 <__assert_fail@plt+0xed0>
   11be0:	bl	1101c <XtVaCreateWidget@plt>
   11be4:	add	r2, sp, #98	; 0x62
   11be8:	sub	r3, r6, #496	; 0x1f0
   11bec:	sub	r3, r3, #3
   11bf0:	stm	sp, {r2, r4}
   11bf4:	add	r1, r6, #139	; 0x8b
   11bf8:	add	r2, sp, #96	; 0x60
   11bfc:	str	r0, [sp, #64]	; 0x40
   11c00:	bl	110c4 <XtVaGetValues@plt>
   11c04:	ldr	r0, [sp, #64]	; 0x40
   11c08:	bl	11118 <XtDestroyWidget@plt>
   11c0c:	ldr	r3, [sp, #76]	; 0x4c
   11c10:	cmp	r3, r4
   11c14:	bne	11c40 <__assert_fail@plt+0xaec>
   11c18:	mov	r0, r8
   11c1c:	bl	10fbc <XtScreen@plt>
   11c20:	vldr	d6, [pc, #976]	; 11ff8 <__assert_fail@plt+0xea4>
   11c24:	vldr	s14, [r0, #12]
   11c28:	vcvt.f64.s32	d7, s14
   11c2c:	vmul.f64	d7, d7, d6
   11c30:	vcvt.u32.f64	s14, d7
   11c34:	vmov	r3, s14
   11c38:	uxth	r3, r3
   11c3c:	str	r3, [sp, #76]	; 0x4c
   11c40:	ldr	r3, [sp, #80]	; 0x50
   11c44:	cmp	r3, #0
   11c48:	bne	11c74 <__assert_fail@plt+0xb20>
   11c4c:	mov	r0, r8
   11c50:	bl	10fbc <XtScreen@plt>
   11c54:	vldr	d6, [pc, #924]	; 11ff8 <__assert_fail@plt+0xea4>
   11c58:	vldr	s14, [r0, #16]
   11c5c:	vcvt.f64.s32	d7, s14
   11c60:	vmul.f64	d7, d7, d6
   11c64:	vcvt.u32.f64	s14, d7
   11c68:	vmov	r3, s14
   11c6c:	uxth	r3, r3
   11c70:	str	r3, [sp, #80]	; 0x50
   11c74:	ldrh	r3, [sp, #96]	; 0x60
   11c78:	ldr	r2, [sp, #76]	; 0x4c
   11c7c:	cmp	r3, r2
   11c80:	movls	r4, #0
   11c84:	bls	11cec <__assert_fail@plt+0xb98>
   11c88:	ldr	r3, [pc, #944]	; 12040 <__assert_fail@plt+0xeec>
   11c8c:	mov	r4, #0
   11c90:	ldr	ip, [sp, #76]	; 0x4c
   11c94:	str	r4, [sp, #4]
   11c98:	mov	r2, r8
   11c9c:	ldr	r1, [r3]
   11ca0:	ldr	r0, [pc, #924]	; 12044 <__assert_fail@plt+0xef0>
   11ca4:	str	r4, [sp]
   11ca8:	ldr	r3, [pc, #920]	; 12048 <__assert_fail@plt+0xef4>
   11cac:	strh	ip, [sp, #96]	; 0x60
   11cb0:	bl	1101c <XtVaCreateWidget@plt>
   11cb4:	ldr	r3, [pc, #912]	; 1204c <__assert_fail@plt+0xef8>
   11cb8:	add	r2, sp, #102	; 0x66
   11cbc:	add	r1, r3, #110	; 0x6e
   11cc0:	str	r4, [sp, #4]
   11cc4:	str	r2, [sp]
   11cc8:	add	r2, sp, #100	; 0x64
   11ccc:	mov	r6, r0
   11cd0:	bl	110c4 <XtVaGetValues@plt>
   11cd4:	mov	r0, r6
   11cd8:	bl	11118 <XtDestroyWidget@plt>
   11cdc:	ldrh	r4, [sp, #100]	; 0x64
   11ce0:	ldrh	r3, [sp, #102]	; 0x66
   11ce4:	add	r4, r4, r3
   11ce8:	uxth	r4, r4
   11cec:	cmp	sl, #0
   11cf0:	ldrh	r6, [sp, #98]	; 0x62
   11cf4:	beq	11d44 <__assert_fail@plt+0xbf0>
   11cf8:	ldrb	r3, [sl]
   11cfc:	cmp	r3, #0
   11d00:	beq	11d44 <__assert_fail@plt+0xbf0>
   11d04:	add	r6, r6, #1
   11d08:	mov	r0, sl
   11d0c:	uxth	r6, r6
   11d10:	b	11d2c <__assert_fail@plt+0xbd8>
   11d14:	ldrb	r2, [r0]
   11d18:	add	r3, r6, #1
   11d1c:	cmp	r2, #0
   11d20:	uxth	r3, r3
   11d24:	beq	11d44 <__assert_fail@plt+0xbf0>
   11d28:	mov	r6, r3
   11d2c:	add	r0, r0, #1
   11d30:	mov	r1, #10
   11d34:	strh	r6, [sp, #98]	; 0x62
   11d38:	bl	110a0 <strchr@plt>
   11d3c:	cmp	r0, #0
   11d40:	bne	11d14 <__assert_fail@plt+0xbc0>
   11d44:	ldr	r3, [sp, #80]	; 0x50
   11d48:	cmp	r3, r6
   11d4c:	bcc	11f6c <__assert_fail@plt+0xe18>
   11d50:	ldrh	r2, [sp, #96]	; 0x60
   11d54:	add	ip, r4, r6
   11d58:	ldr	r3, [pc, #752]	; 12050 <__assert_fail@plt+0xefc>
   11d5c:	uxth	ip, ip
   11d60:	mov	r0, #0
   11d64:	add	r1, r3, #636	; 0x27c
   11d68:	str	r0, [sp, #4]
   11d6c:	str	ip, [sp]
   11d70:	add	r1, r1, #2
   11d74:	mov	r0, r8
   11d78:	strh	ip, [sp, #98]	; 0x62
   11d7c:	bl	10f98 <XtVaSetValues@plt>
   11d80:	ldr	r3, [pc, #716]	; 12054 <__assert_fail@plt+0xf00>
   11d84:	ldr	r1, [pc, #660]	; 12020 <__assert_fail@plt+0xecc>
   11d88:	str	r3, [sp, #148]	; 0x94
   11d8c:	ldr	r3, [pc, #648]	; 1201c <__assert_fail@plt+0xec8>
   11d90:	ldr	ip, [pc, #704]	; 12058 <__assert_fail@plt+0xf04>
   11d94:	ldr	r0, [pc, #704]	; 1205c <__assert_fail@plt+0xf08>
   11d98:	mov	r2, #2
   11d9c:	str	r3, [sp, #156]	; 0x9c
   11da0:	str	r1, [sp, #132]	; 0x84
   11da4:	mov	r3, #1
   11da8:	mov	r1, #5
   11dac:	cmp	r5, #0
   11db0:	str	r9, [sp, #140]	; 0x8c
   11db4:	str	r8, [sp, #168]	; 0xa8
   11db8:	str	ip, [sp, #164]	; 0xa4
   11dbc:	str	r0, [sp, #172]	; 0xac
   11dc0:	str	r2, [sp, #136]	; 0x88
   11dc4:	str	r2, [sp, #144]	; 0x90
   11dc8:	str	r3, [sp, #152]	; 0x98
   11dcc:	str	r3, [sp, #160]	; 0xa0
   11dd0:	str	r1, [sp, #176]	; 0xb0
   11dd4:	ble	11ec0 <__assert_fail@plt+0xd6c>
   11dd8:	mov	r4, fp
   11ddc:	add	r5, r4, r5, lsl #4
   11de0:	str	r5, [sp, #64]	; 0x40
   11de4:	ldr	r9, [pc, #628]	; 12060 <__assert_fail@plt+0xf0c>
   11de8:	ldr	fp, [pc, #628]	; 12064 <__assert_fail@plt+0xf10>
   11dec:	ldr	sl, [pc, #628]	; 12068 <__assert_fail@plt+0xf14>
   11df0:	mov	r6, #0
   11df4:	ldr	r5, [sp, #92]	; 0x5c
   11df8:	b	11e0c <__assert_fail@plt+0xcb8>
   11dfc:	ldr	r3, [sp, #64]	; 0x40
   11e00:	add	r4, r4, #16
   11e04:	cmp	r4, r3
   11e08:	beq	11ec0 <__assert_fail@plt+0xd6c>
   11e0c:	mov	r3, #7
   11e10:	ldr	r1, [sl]
   11e14:	ldr	r0, [r4]
   11e18:	mov	r2, r7
   11e1c:	str	r3, [sp]
   11e20:	add	r3, sp, #132	; 0x84
   11e24:	str	r6, [sp, #184]	; 0xb8
   11e28:	str	fp, [sp, #180]	; 0xb4
   11e2c:	bl	10f68 <XtCreateManagedWidget@plt>
   11e30:	ldr	r3, [sp, #60]	; 0x3c
   11e34:	ldr	r2, [pc, #560]	; 1206c <__assert_fail@plt+0xf18>
   11e38:	strb	r3, [r4, #8]
   11e3c:	mov	r1, r9
   11e40:	mov	r3, r4
   11e44:	str	r0, [r4, #12]
   11e48:	mov	r6, r0
   11e4c:	bl	11130 <XtAddCallback@plt>
   11e50:	cmp	r5, #0
   11e54:	beq	11dfc <__assert_fail@plt+0xca8>
   11e58:	ldr	r1, [r4]
   11e5c:	mov	r0, r5
   11e60:	bl	10f2c <strcmp@plt>
   11e64:	subs	r8, r0, #0
   11e68:	bne	11dfc <__assert_fail@plt+0xca8>
   11e6c:	ldr	lr, [pc, #508]	; 12070 <__assert_fail@plt+0xf1c>
   11e70:	ldr	ip, [r4, #4]
   11e74:	ldr	r0, [r4, #12]
   11e78:	mov	r3, r8
   11e7c:	add	r2, sp, #110	; 0x6e
   11e80:	ldr	r1, [pc, #452]	; 1204c <__assert_fail@plt+0xef8>
   11e84:	str	ip, [lr]
   11e88:	bl	110c4 <XtVaGetValues@plt>
   11e8c:	ldrh	ip, [sp, #110]	; 0x6e
   11e90:	ldr	r0, [r4, #12]
   11e94:	mov	r3, r8
   11e98:	ldr	r1, [pc, #428]	; 1204c <__assert_fail@plt+0xef8>
   11e9c:	lsl	ip, ip, #1
   11ea0:	add	r4, r4, #16
   11ea4:	uxth	ip, ip
   11ea8:	mov	r2, ip
   11eac:	strh	ip, [sp, #110]	; 0x6e
   11eb0:	bl	10f98 <XtVaSetValues@plt>
   11eb4:	ldr	r3, [sp, #64]	; 0x40
   11eb8:	cmp	r4, r3
   11ebc:	bne	11e0c <__assert_fail@plt+0xcb8>
   11ec0:	ldr	r3, [pc, #312]	; 12000 <__assert_fail@plt+0xeac>
   11ec4:	ldr	r2, [sp, #212]	; 0xd4
   11ec8:	mov	r0, r7
   11ecc:	ldr	r3, [r3]
   11ed0:	cmp	r2, r3
   11ed4:	bne	120c8 <__assert_fail@plt+0xf74>
   11ed8:	add	sp, sp, #220	; 0xdc
   11edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ee0:	mov	r9, r2
   11ee4:	mov	r7, r6
   11ee8:	b	11994 <__assert_fail@plt+0x840>
   11eec:	ldrb	r1, [r2, #1]
   11ef0:	cmp	r1, #0
   11ef4:	beq	11a4c <__assert_fail@plt+0x8f8>
   11ef8:	strb	r1, [r3]
   11efc:	ldrb	r1, [r2, #2]
   11f00:	add	r3, r3, #1
   11f04:	add	r2, r2, #2
   11f08:	cmp	r1, #0
   11f0c:	bne	11a14 <__assert_fail@plt+0x8c0>
   11f10:	add	r0, r0, #16
   11f14:	cmp	ip, r0
   11f18:	strb	r6, [r3]
   11f1c:	bne	11a00 <__assert_fail@plt+0x8ac>
   11f20:	b	11a5c <__assert_fail@plt+0x908>
   11f24:	ldr	r2, [pc, #336]	; 1207c <__assert_fail@plt+0xf28>
   11f28:	ldr	r3, [pc, #336]	; 12080 <__assert_fail@plt+0xf2c>
   11f2c:	str	r5, [sp]
   11f30:	mov	r1, #1
   11f34:	ldr	r0, [r2]
   11f38:	ldr	r3, [r3]
   11f3c:	ldr	r2, [pc, #304]	; 12074 <__assert_fail@plt+0xf20>
   11f40:	bl	110f4 <__fprintf_chk@plt>
   11f44:	mov	r0, fp
   11f48:	bl	10f50 <free@plt>
   11f4c:	ldr	r0, [sp, #88]	; 0x58
   11f50:	bl	10f50 <free@plt>
   11f54:	mov	fp, #0
   11f58:	mvn	r5, #0
   11f5c:	b	11a5c <__assert_fail@plt+0x908>
   11f60:	mov	fp, r4
   11f64:	mov	r5, r4
   11f68:	b	11a5c <__assert_fail@plt+0x908>
   11f6c:	ldr	r2, [pc, #204]	; 12040 <__assert_fail@plt+0xeec>
   11f70:	mov	r6, #0
   11f74:	mov	r3, #1
   11f78:	ldr	ip, [sp, #80]	; 0x50
   11f7c:	ldr	r1, [r2]
   11f80:	ldr	r0, [pc, #240]	; 12078 <__assert_fail@plt+0xf24>
   11f84:	stm	sp, {r3, r6}
   11f88:	mov	r2, r8
   11f8c:	ldr	r3, [pc, #180]	; 12048 <__assert_fail@plt+0xef4>
   11f90:	strh	ip, [sp, #98]	; 0x62
   11f94:	bl	1101c <XtVaCreateWidget@plt>
   11f98:	ldr	r3, [pc, #172]	; 1204c <__assert_fail@plt+0xef8>
   11f9c:	add	r2, sp, #102	; 0x66
   11fa0:	add	r1, r3, #748	; 0x2ec
   11fa4:	str	r6, [sp, #4]
   11fa8:	str	r2, [sp]
   11fac:	add	r2, sp, #100	; 0x64
   11fb0:	mov	sl, r0
   11fb4:	bl	110c4 <XtVaGetValues@plt>
   11fb8:	mov	r0, sl
   11fbc:	bl	11118 <XtDestroyWidget@plt>
   11fc0:	ldrh	r2, [sp, #100]	; 0x64
   11fc4:	ldrh	r1, [sp, #102]	; 0x66
   11fc8:	ldrh	r3, [sp, #96]	; 0x60
   11fcc:	ldrh	r6, [sp, #98]	; 0x62
   11fd0:	add	r2, r2, r1
   11fd4:	add	r2, r2, r3
   11fd8:	uxth	r2, r2
   11fdc:	strh	r2, [sp, #96]	; 0x60
   11fe0:	b	11d54 <__assert_fail@plt+0xc00>
   11fe4:	str	lr, [sp, #64]	; 0x40
   11fe8:	sub	r5, r0, r4
   11fec:	b	1184c <__assert_fail@plt+0x6f8>
   11ff0:	mvn	r5, #0
   11ff4:	b	11a5c <__assert_fail@plt+0x908>
   11ff8:	strbtvs	r6, [r6], -r6, ror #12
   11ffc:	svccc	0x00e66666
   12000:	andeq	r2, r2, r8, lsl #31
   12004:	andeq	r4, r2, r4, lsr #5
   12008:	andeq	r2, r1, r0, lsr #12
   1200c:	andeq	r3, r2, r5, ror r7
   12010:	andeq	r4, r2, ip, lsl #5
   12014:	andeq	r2, r1, r8, lsr r6
   12018:	andeq	r2, r1, r0, asr r6
   1201c:	andeq	r2, r1, r8, asr #12
   12020:	andeq	r2, r1, r8, lsr #12
   12024:	andeq	r2, r1, r0, lsr r6
   12028:	andeq	r3, r2, r1, ror #2
   1202c:	andeq	r2, r1, r4, ror r6
   12030:	andeq	r2, r1, r0, lsl #13
   12034:	andeq	r2, r1, r8, asr r6
   12038:	andeq	r2, r1, r8, ror #12
   1203c:	andeq	r4, r2, r8, lsr #5
   12040:	andeq	r4, r2, r8, lsl #5
   12044:	andeq	r2, r1, ip, lsl #13
   12048:	muleq	r2, r1, r6
   1204c:	andeq	r3, r2, r4, lsl r5
   12050:	andeq	r3, r2, r2, lsl #11
   12054:			; <UNDEFINED> instruction: 0x000237b6
   12058:	andeq	r2, r1, r4, lsr #13
   1205c:			; <UNDEFINED> instruction: 0x000126b0
   12060:	andeq	r3, r2, r0, lsr #10
   12064:	andeq	r2, r1, r0, asr #13
   12068:	muleq	r2, ip, r2
   1206c:	andeq	r1, r1, r0, lsl #15
   12070:	ldrdeq	r4, [r2], -r8
   12074:			; <UNDEFINED> instruction: 0x000125b4
   12078:	muleq	r1, r8, r6
   1207c:	muleq	r2, r0, r2
   12080:	andeq	r4, r2, ip, asr #5
   12084:	andeq	r2, r1, ip, ror #11
   12088:	ldr	r2, [pc, #-20]	; 1207c <__assert_fail@plt+0xf28>
   1208c:	ldr	r3, [pc, #-20]	; 12080 <__assert_fail@plt+0xf2c>
   12090:	ldr	r1, [sp, #64]	; 0x40
   12094:	str	r1, [sp, #4]
   12098:	mov	r1, #1
   1209c:	ldr	r3, [r3]
   120a0:	ldr	r0, [r2]
   120a4:	str	r5, [sp]
   120a8:	ldr	r2, [pc, #-44]	; 12084 <__assert_fail@plt+0xf30>
   120ac:	bl	110f4 <__fprintf_chk@plt>
   120b0:	b	11f44 <__assert_fail@plt+0xdf0>
   120b4:	mov	r0, fp
   120b8:	bl	10f50 <free@plt>
   120bc:	mvn	r5, #0
   120c0:	ldr	fp, [sp, #88]	; 0x58
   120c4:	b	11a5c <__assert_fail@plt+0x908>
   120c8:	bl	10fb0 <__stack_chk_fail@plt>
   120cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   120d0:	sub	sp, sp, #96	; 0x60
   120d4:	ldr	r7, [pc, #464]	; 122ac <__assert_fail@plt+0x1158>
   120d8:	ldrb	r2, [r0]
   120dc:	mov	r6, r0
   120e0:	ldr	r3, [r7]
   120e4:	cmp	r2, #45	; 0x2d
   120e8:	mov	r9, r1
   120ec:	str	r3, [sp, #92]	; 0x5c
   120f0:	bne	12100 <__assert_fail@plt+0xfac>
   120f4:	ldrb	r4, [r0, #1]
   120f8:	cmp	r4, #0
   120fc:	beq	121a0 <__assert_fail@plt+0x104c>
   12100:	mov	r2, sp
   12104:	mov	r1, r6
   12108:	mov	r0, #3
   1210c:	bl	10fec <__xstat@plt>
   12110:	cmp	r0, #0
   12114:	bne	1220c <__assert_fail@plt+0x10b8>
   12118:	ldr	r0, [sp, #44]	; 0x2c
   1211c:	cmp	r0, #0
   12120:	blt	1220c <__assert_fail@plt+0x10b8>
   12124:	add	r0, r0, #1
   12128:	bl	11034 <malloc@plt>
   1212c:	subs	r5, r0, #0
   12130:	beq	12274 <__assert_fail@plt+0x1120>
   12134:	ldr	r1, [pc, #372]	; 122b0 <__assert_fail@plt+0x115c>
   12138:	mov	r0, r6
   1213c:	bl	10f44 <fopen@plt>
   12140:	subs	r4, r0, #0
   12144:	beq	12290 <__assert_fail@plt+0x113c>
   12148:	mov	r3, r4
   1214c:	ldr	r2, [sp, #44]	; 0x2c
   12150:	mov	r1, #1
   12154:	mov	r0, r5
   12158:	bl	11010 <fread@plt>
   1215c:	subs	r8, r0, #0
   12160:	bne	12170 <__assert_fail@plt+0x101c>
   12164:	ldr	r3, [sp, #44]	; 0x2c
   12168:	cmp	r3, #0
   1216c:	bne	1222c <__assert_fail@plt+0x10d8>
   12170:	mov	r3, #0
   12174:	str	r8, [r9]
   12178:	mov	r0, r4
   1217c:	strb	r3, [r5, r8]
   12180:	bl	11100 <fclose@plt>
   12184:	ldr	r2, [sp, #92]	; 0x5c
   12188:	ldr	r3, [r7]
   1218c:	mov	r0, r5
   12190:	cmp	r2, r3
   12194:	bne	122a8 <__assert_fail@plt+0x1154>
   12198:	add	sp, sp, #96	; 0x60
   1219c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   121a0:	ldr	r0, [pc, #268]	; 122b4 <__assert_fail@plt+0x1160>
   121a4:	bl	11034 <malloc@plt>
   121a8:	subs	r5, r0, #0
   121ac:	movne	r8, #8192	; 0x2000
   121b0:	ldrne	sl, [pc, #256]	; 122b8 <__assert_fail@plt+0x1164>
   121b4:	beq	12274 <__assert_fail@plt+0x1120>
   121b8:	add	r6, r5, r4
   121bc:	mov	r0, r6
   121c0:	ldr	r3, [sl]
   121c4:	mov	r2, #8192	; 0x2000
   121c8:	mov	r1, #1
   121cc:	bl	11010 <fread@plt>
   121d0:	cmp	r0, #0
   121d4:	ble	1221c <__assert_fail@plt+0x10c8>
   121d8:	add	r4, r4, r0
   121dc:	add	r3, r4, #8128	; 0x1fc0
   121e0:	add	r3, r3, #63	; 0x3f
   121e4:	cmp	r3, r8
   121e8:	blt	121b8 <__assert_fail@plt+0x1064>
   121ec:	lsl	r8, r8, #1
   121f0:	add	r1, r8, #1
   121f4:	mov	r0, r5
   121f8:	bl	10fc8 <realloc@plt>
   121fc:	subs	r6, r0, #0
   12200:	beq	1224c <__assert_fail@plt+0x10f8>
   12204:	mov	r5, r6
   12208:	b	121b8 <__assert_fail@plt+0x1064>
   1220c:	mov	r0, r6
   12210:	bl	10fe0 <perror@plt>
   12214:	mov	r5, #0
   12218:	b	12184 <__assert_fail@plt+0x1030>
   1221c:	mov	r3, #0
   12220:	str	r4, [r9]
   12224:	strb	r3, [r6]
   12228:	b	12184 <__assert_fail@plt+0x1030>
   1222c:	mov	r0, r6
   12230:	bl	10fe0 <perror@plt>
   12234:	mov	r0, r5
   12238:	bl	10f50 <free@plt>
   1223c:	mov	r0, r4
   12240:	bl	11100 <fclose@plt>
   12244:	mov	r5, r8
   12248:	b	12184 <__assert_fail@plt+0x1030>
   1224c:	mov	r0, r5
   12250:	bl	10f50 <free@plt>
   12254:	ldr	r3, [pc, #96]	; 122bc <__assert_fail@plt+0x1168>
   12258:	mov	r2, #35	; 0x23
   1225c:	mov	r1, #1
   12260:	ldr	r3, [r3]
   12264:	ldr	r0, [pc, #84]	; 122c0 <__assert_fail@plt+0x116c>
   12268:	mov	r5, r6
   1226c:	bl	10ff8 <fwrite@plt>
   12270:	b	12184 <__assert_fail@plt+0x1030>
   12274:	ldr	r3, [pc, #64]	; 122bc <__assert_fail@plt+0x1168>
   12278:	mov	r2, #35	; 0x23
   1227c:	mov	r1, #1
   12280:	ldr	r3, [r3]
   12284:	ldr	r0, [pc, #52]	; 122c0 <__assert_fail@plt+0x116c>
   12288:	bl	10ff8 <fwrite@plt>
   1228c:	b	12184 <__assert_fail@plt+0x1030>
   12290:	mov	r0, r6
   12294:	bl	10fe0 <perror@plt>
   12298:	mov	r0, r5
   1229c:	bl	10f50 <free@plt>
   122a0:	mov	r5, r4
   122a4:	b	12184 <__assert_fail@plt+0x1030>
   122a8:	bl	10fb0 <__stack_chk_fail@plt>
   122ac:	andeq	r2, r2, r8, lsl #31
   122b0:	strdeq	r2, [r1], -r0
   122b4:	andeq	r2, r0, r1
   122b8:	muleq	r2, r8, r2
   122bc:	muleq	r2, r0, r2
   122c0:	andeq	r2, r1, ip, asr #13
   122c4:	push	{r4, lr}
   122c8:	mov	r0, #0
   122cc:	bl	11064 <exit@plt>
   122d0:	ldr	r3, [pc, #16]	; 122e8 <__assert_fail@plt+0x1194>
   122d4:	ldr	r0, [r3]
   122d8:	cmp	r0, #0
   122dc:	bxlt	lr
   122e0:	push	{r4, lr}
   122e4:	bl	11064 <exit@plt>
   122e8:	ldrdeq	r4, [r2], -r8
   122ec:	ldr	r3, [pc, #96]	; 12354 <__assert_fail@plt+0x1200>
   122f0:	push	{r4, r5, r6, lr}
   122f4:	mov	r1, #1
   122f8:	ldr	r4, [pc, #88]	; 12358 <__assert_fail@plt+0x1204>
   122fc:	mov	r5, r0
   12300:	ldr	r2, [pc, #84]	; 1235c <__assert_fail@plt+0x1208>
   12304:	ldr	r3, [r3]
   12308:	bl	110f4 <__fprintf_chk@plt>
   1230c:	mov	r3, r5
   12310:	mov	r2, #23
   12314:	mov	r1, #1
   12318:	ldr	r0, [pc, #64]	; 12360 <__assert_fail@plt+0x120c>
   1231c:	bl	10ff8 <fwrite@plt>
   12320:	ldr	r3, [r4, #4]
   12324:	cmp	r3, #0
   12328:	popeq	{r4, r5, r6, pc}
   1232c:	ldr	r6, [pc, #48]	; 12364 <__assert_fail@plt+0x1210>
   12330:	add	r4, r4, #4
   12334:	mov	r2, r6
   12338:	mov	r1, #1
   1233c:	mov	r0, r5
   12340:	bl	110f4 <__fprintf_chk@plt>
   12344:	ldr	r3, [r4, #4]!
   12348:	cmp	r3, #0
   1234c:	bne	12334 <__assert_fail@plt+0x11e0>
   12350:	pop	{r4, r5, r6, pc}
   12354:	andeq	r4, r2, ip, asr #5
   12358:	ldrdeq	r4, [r2], -r8
   1235c:	strdeq	r2, [r1], -ip
   12360:	andeq	r2, r1, r4, lsr #14
   12364:	andeq	r2, r1, ip, lsr r7
   12368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1236c:	sub	sp, sp, #44	; 0x2c
   12370:	ldr	r9, [pc, #360]	; 124e0 <__assert_fail@plt+0x138c>
   12374:	ldr	ip, [pc, #360]	; 124e4 <__assert_fail@plt+0x1390>
   12378:	mov	r8, #0
   1237c:	ldr	lr, [r9]
   12380:	add	r7, sp, #34	; 0x22
   12384:	add	r6, sp, #32
   12388:	add	r3, ip, #110	; 0x6e
   1238c:	mov	r5, r1
   12390:	mov	r4, r2
   12394:	add	r1, ip, #748	; 0x2ec
   12398:	str	ip, [sp, #4]
   1239c:	str	r8, [sp, #12]
   123a0:	str	r7, [sp, #8]
   123a4:	str	r6, [sp]
   123a8:	add	r2, sp, #30
   123ac:	str	lr, [sp, #36]	; 0x24
   123b0:	mov	r8, r0
   123b4:	bl	110c4 <XtVaGetValues@plt>
   123b8:	ldrh	r3, [sp, #34]	; 0x22
   123bc:	ldrh	r1, [sp, #32]
   123c0:	ldrh	r2, [sp, #30]
   123c4:	mov	r0, r8
   123c8:	lsl	r3, r3, #1
   123cc:	ldr	r6, [pc, #276]	; 124e8 <__assert_fail@plt+0x1394>
   123d0:	uxth	r3, r3
   123d4:	add	r2, r3, r2
   123d8:	add	r3, r3, r1
   123dc:	strh	r3, [sp, #32]
   123e0:	strh	r2, [sp, #30]
   123e4:	bl	10fbc <XtScreen@plt>
   123e8:	ldr	r2, [r0, #12]
   123ec:	mov	r0, r8
   123f0:	str	r2, [sp, #20]
   123f4:	bl	10fbc <XtScreen@plt>
   123f8:	ldr	r2, [sp, #20]
   123fc:	lsl	r3, r2, #1
   12400:	smull	sl, fp, r3, r6
   12404:	smull	r6, r7, r2, r6
   12408:	sub	ip, r7, r2, asr #31
   1240c:	cmp	ip, r5
   12410:	sub	r3, fp, r3, asr #31
   12414:	movlt	ip, #2
   12418:	movge	ip, #1
   1241c:	cmp	r3, r5
   12420:	addlt	ip, ip, #1
   12424:	ldr	r3, [r0, #16]
   12428:	ldr	r0, [pc, #184]	; 124e8 <__assert_fail@plt+0x1394>
   1242c:	lsl	lr, r3, #1
   12430:	smull	r0, r1, r3, r0
   12434:	ldr	r0, [pc, #172]	; 124e8 <__assert_fail@plt+0x1394>
   12438:	sub	r1, r1, r3, asr #31
   1243c:	cmp	r1, r4
   12440:	smull	r0, r1, lr, r0
   12444:	ldrh	r0, [sp, #32]
   12448:	sub	lr, r1, lr, asr #31
   1244c:	ldrh	r1, [sp, #30]
   12450:	addlt	ip, ip, #3
   12454:	cmp	lr, r4
   12458:	sub	r2, r2, r1
   1245c:	addlt	ip, ip, #3
   12460:	sxth	r1, r1
   12464:	str	ip, [sp, #8]
   12468:	sxth	ip, r0
   1246c:	add	r1, r1, r1, lsr #31
   12470:	add	ip, ip, ip, lsr #31
   12474:	sub	r5, r5, r1, asr #1
   12478:	sub	r4, r4, ip, asr #1
   1247c:	bic	r5, r5, r5, asr #31
   12480:	bic	r4, r4, r4, asr #31
   12484:	sub	r3, r3, r0
   12488:	cmp	r2, r5
   1248c:	movge	r2, r5
   12490:	cmp	r3, r4
   12494:	movlt	r4, r3
   12498:	ldr	r1, [pc, #76]	; 124ec <__assert_fail@plt+0x1398>
   1249c:	ldr	r3, [pc, #76]	; 124f0 <__assert_fail@plt+0x139c>
   124a0:	mov	ip, #0
   124a4:	sxth	r4, r4
   124a8:	sxth	r2, r2
   124ac:	str	r1, [sp, #4]
   124b0:	mov	r0, r8
   124b4:	sub	r1, r3, #2
   124b8:	str	r4, [sp]
   124bc:	str	ip, [sp, #12]
   124c0:	bl	10f98 <XtVaSetValues@plt>
   124c4:	ldr	r2, [sp, #36]	; 0x24
   124c8:	ldr	r3, [r9]
   124cc:	cmp	r2, r3
   124d0:	bne	124dc <__assert_fail@plt+0x1388>
   124d4:	add	sp, sp, #44	; 0x2c
   124d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124dc:	bl	10fb0 <__stack_chk_fail@plt>
   124e0:	andeq	r2, r2, r8, lsl #31
   124e4:	andeq	r3, r2, r4, lsl r5
   124e8:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   124ec:	muleq	r2, sp, r1
   124f0:	andeq	r3, r2, pc, lsl #16
   124f4:	ldr	r0, [r1]
   124f8:	cmp	r0, #33	; 0x21
   124fc:	bne	12514 <__assert_fail@plt+0x13c0>
   12500:	ldr	ip, [pc, #56]	; 12540 <__assert_fail@plt+0x13ec>
   12504:	ldr	r0, [r1, #28]
   12508:	ldr	r1, [ip]
   1250c:	cmp	r0, r1
   12510:	bxne	lr
   12514:	push	{r4, lr}
   12518:	ldr	r3, [r3]
   1251c:	cmp	r3, #1
   12520:	movne	r0, #0
   12524:	beq	1252c <__assert_fail@plt+0x13d8>
   12528:	bl	11064 <exit@plt>
   1252c:	ldr	r0, [r2]
   12530:	mov	r1, #0
   12534:	mov	r2, #10
   12538:	bl	10f38 <strtol@plt>
   1253c:	b	12528 <__assert_fail@plt+0x13d4>
   12540:			; <UNDEFINED> instruction: 0x000242b0
   12544:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12548:	mov	r7, r0
   1254c:	ldr	r6, [pc, #72]	; 1259c <__assert_fail@plt+0x1448>
   12550:	ldr	r5, [pc, #72]	; 125a0 <__assert_fail@plt+0x144c>
   12554:	add	r6, pc, r6
   12558:	add	r5, pc, r5
   1255c:	sub	r6, r6, r5
   12560:	mov	r8, r1
   12564:	mov	r9, r2
   12568:	bl	10f00 <_init@@Base>
   1256c:	asrs	r6, r6, #2
   12570:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12574:	mov	r4, #0
   12578:	add	r4, r4, #1
   1257c:	ldr	r3, [r5], #4
   12580:	mov	r2, r9
   12584:	mov	r1, r8
   12588:	mov	r0, r7
   1258c:	blx	r3
   12590:	cmp	r6, r4
   12594:	bne	12578 <__assert_fail@plt+0x1424>
   12598:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1259c:	andeq	r0, r1, r8, lsr #20
   125a0:	andeq	r0, r1, r0, lsr #20
   125a4:	bx	lr

Disassembly of section .fini:

000125a8 <_fini@@Base>:
   125a8:	push	{r3, lr}
   125ac:	pop	{r3, pc}
