
raspbian-preinstalled/arm-linux-gnueabihf-objdump:     file format elf32-littlearm


Disassembly of section .init:

00011d30 <.init>:
   11d30:	push	{r3, lr}
   11d34:	bl	12df8 <__assert_fail@plt+0xa6c>
   11d38:	pop	{r3, pc}

Disassembly of section .plt:

00011d3c <calloc@plt-0x14>:
   11d3c:	push	{lr}		; (str lr, [sp, #-4]!)
   11d40:	ldr	lr, [pc, #4]	; 11d4c <calloc@plt-0x4>
   11d44:	add	lr, pc, lr
   11d48:	ldr	pc, [lr, #8]!
   11d4c:			; <UNDEFINED> instruction: 0x000542b4

00011d50 <calloc@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #84, 20	; 0x54000
   11d58:	ldr	pc, [ip, #692]!	; 0x2b4

00011d5c <strstr@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #84, 20	; 0x54000
   11d64:	ldr	pc, [ip, #684]!	; 0x2ac

00011d68 <cplus_demangle_print@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #84, 20	; 0x54000
   11d70:	ldr	pc, [ip, #676]!	; 0x2a4

00011d74 <raise@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #84, 20	; 0x54000
   11d7c:	ldr	pc, [ip, #668]!	; 0x29c

00011d80 <cplus_demangle_name_to_style@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #84, 20	; 0x54000
   11d88:	ldr	pc, [ip, #660]!	; 0x294

00011d8c <bfd_scan_vma@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #84, 20	; 0x54000
   11d94:	ldr	pc, [ip, #652]!	; 0x28c

00011d98 <strcmp@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #84, 20	; 0x54000
   11da0:	ldr	pc, [ip, #644]!	; 0x284

00011da4 <strtol@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #84, 20	; 0x54000
   11dac:	ldr	pc, [ip, #636]!	; 0x27c

00011db0 <strcspn@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #84, 20	; 0x54000
   11db8:	ldr	pc, [ip, #628]!	; 0x274

00011dbc <printf@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #84, 20	; 0x54000
   11dc4:	ldr	pc, [ip, #620]!	; 0x26c

00011dc8 <bfd_get_stab_name@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #84, 20	; 0x54000
   11dd0:	ldr	pc, [ip, #612]!	; 0x264

00011dd4 <read@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #84, 20	; 0x54000
   11ddc:	ldr	pc, [ip, #604]!	; 0x25c

00011de0 <fflush@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #84, 20	; 0x54000
   11de8:	ldr	pc, [ip, #596]!	; 0x254

00011dec <bfd_arch_list@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #84, 20	; 0x54000
   11df4:	ldr	pc, [ip, #588]!	; 0x24c

00011df8 <memmove@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #84, 20	; 0x54000
   11e00:	ldr	pc, [ip, #580]!	; 0x244

00011e04 <bfd_set_default_target@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #84, 20	; 0x54000
   11e0c:	ldr	pc, [ip, #572]!	; 0x23c

00011e10 <free@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #84, 20	; 0x54000
   11e18:	ldr	pc, [ip, #564]!	; 0x234

00011e1c <ferror@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #84, 20	; 0x54000
   11e24:	ldr	pc, [ip, #556]!	; 0x22c

00011e28 <filename_cmp@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #84, 20	; 0x54000
   11e30:	ldr	pc, [ip, #548]!	; 0x224

00011e34 <cplus_demangle_set_style@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #84, 20	; 0x54000
   11e3c:	ldr	pc, [ip, #540]!	; 0x21c

00011e40 <memcpy@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #84, 20	; 0x54000
   11e48:	ldr	pc, [ip, #532]!	; 0x214

00011e4c <bfd_malloc_and_get_section@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #84, 20	; 0x54000
   11e54:	ldr	pc, [ip, #524]!	; 0x20c

00011e58 <bfd_openr@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #84, 20	; 0x54000
   11e60:	ldr	pc, [ip, #516]!	; 0x204

00011e64 <lrealpath@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #84, 20	; 0x54000
   11e6c:	ldr	pc, [ip, #508]!	; 0x1fc

00011e70 <ftell@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #84, 20	; 0x54000
   11e78:	ldr	pc, [ip, #500]!	; 0x1f4

00011e7c <stpcpy@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #84, 20	; 0x54000
   11e84:	ldr	pc, [ip, #492]!	; 0x1ec

00011e88 <ctime@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #84, 20	; 0x54000
   11e90:	ldr	pc, [ip, #484]!	; 0x1e4

00011e94 <bfd_get_section_contents@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #84, 20	; 0x54000
   11e9c:	ldr	pc, [ip, #476]!	; 0x1dc

00011ea0 <dcgettext@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #84, 20	; 0x54000
   11ea8:	ldr	pc, [ip, #468]!	; 0x1d4

00011eac <bfd_get_mtime@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #84, 20	; 0x54000
   11eb4:	ldr	pc, [ip, #460]!	; 0x1cc

00011eb8 <strdup@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #84, 20	; 0x54000
   11ec0:	ldr	pc, [ip, #452]!	; 0x1c4

00011ec4 <unlink@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #84, 20	; 0x54000
   11ecc:	ldr	pc, [ip, #444]!	; 0x1bc

00011ed0 <xrealloc@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #84, 20	; 0x54000
   11ed8:	ldr	pc, [ip, #436]!	; 0x1b4

00011edc <textdomain@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #84, 20	; 0x54000
   11ee4:	ldr	pc, [ip, #428]!	; 0x1ac

00011ee8 <concat@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #84, 20	; 0x54000
   11ef0:	ldr	pc, [ip, #420]!	; 0x1a4

00011ef4 <bfd_target_list@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #84, 20	; 0x54000
   11efc:	ldr	pc, [ip, #412]!	; 0x19c

00011f00 <bfd_get_error@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #84, 20	; 0x54000
   11f08:	ldr	pc, [ip, #404]!	; 0x194

00011f0c <disassemble_init_for_target@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #84, 20	; 0x54000
   11f14:	ldr	pc, [ip, #396]!	; 0x18c

00011f18 <__fxstat64@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #84, 20	; 0x54000
   11f20:	ldr	pc, [ip, #388]!	; 0x184

00011f24 <fwrite@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #84, 20	; 0x54000
   11f2c:	ldr	pc, [ip, #380]!	; 0x17c

00011f30 <strcat@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #84, 20	; 0x54000
   11f38:	ldr	pc, [ip, #372]!	; 0x174

00011f3c <xmalloc@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #84, 20	; 0x54000
   11f44:	ldr	pc, [ip, #364]!	; 0x16c

00011f48 <bfd_set_error@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #84, 20	; 0x54000
   11f50:	ldr	pc, [ip, #356]!	; 0x164

00011f54 <xmalloc_set_program_name@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #84, 20	; 0x54000
   11f5c:	ldr	pc, [ip, #348]!	; 0x15c

00011f60 <xstrdup@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #84, 20	; 0x54000
   11f68:	ldr	pc, [ip, #340]!	; 0x154

00011f6c <strcpy@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #84, 20	; 0x54000
   11f74:	ldr	pc, [ip, #332]!	; 0x14c

00011f78 <fread@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #84, 20	; 0x54000
   11f80:	ldr	pc, [ip, #324]!	; 0x144

00011f84 <bfd_get_section_by_name@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #84, 20	; 0x54000
   11f8c:	ldr	pc, [ip, #316]!	; 0x13c

00011f90 <bfd_init@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #84, 20	; 0x54000
   11f98:	ldr	pc, [ip, #308]!	; 0x134

00011f9c <bfd_get_full_section_contents@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #84, 20	; 0x54000
   11fa4:	ldr	pc, [ip, #300]!	; 0x12c

00011fa8 <lbasename@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #84, 20	; 0x54000
   11fb0:	ldr	pc, [ip, #292]!	; 0x124

00011fb4 <open64@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #84, 20	; 0x54000
   11fbc:	ldr	pc, [ip, #284]!	; 0x11c

00011fc0 <mkstemps64@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #84, 20	; 0x54000
   11fc8:	ldr	pc, [ip, #276]!	; 0x114

00011fcc <getenv@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #84, 20	; 0x54000
   11fd4:	ldr	pc, [ip, #268]!	; 0x10c

00011fd8 <mkstemp64@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #84, 20	; 0x54000
   11fe0:	ldr	pc, [ip, #260]!	; 0x104

00011fe4 <puts@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #84, 20	; 0x54000
   11fec:	ldr	pc, [ip, #252]!	; 0xfc

00011ff0 <disassembler_usage@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #84, 20	; 0x54000
   11ff8:	ldr	pc, [ip, #244]!	; 0xf4

00011ffc <malloc@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #84, 20	; 0x54000
   12004:	ldr	pc, [ip, #236]!	; 0xec

00012008 <__libc_start_main@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #84, 20	; 0x54000
   12010:	ldr	pc, [ip, #228]!	; 0xe4

00012014 <strerror@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #84, 20	; 0x54000
   1201c:	ldr	pc, [ip, #220]!	; 0xdc

00012020 <__gmon_start__@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #84, 20	; 0x54000
   12028:	ldr	pc, [ip, #212]!	; 0xd4

0001202c <bfd_set_format@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #84, 20	; 0x54000
   12034:	ldr	pc, [ip, #204]!	; 0xcc

00012038 <getopt_long@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #84, 20	; 0x54000
   12040:	ldr	pc, [ip, #196]!	; 0xc4

00012044 <bfd_octets_per_byte@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #84, 20	; 0x54000
   1204c:	ldr	pc, [ip, #188]!	; 0xbc

00012050 <exit@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #84, 20	; 0x54000
   12058:	ldr	pc, [ip, #180]!	; 0xb4

0001205c <cplus_demangle_init_info@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #84, 20	; 0x54000
   12064:	ldr	pc, [ip, #172]!	; 0xac

00012068 <strtoul@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #84, 20	; 0x54000
   12070:	ldr	pc, [ip, #164]!	; 0xa4

00012074 <strlen@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #84, 20	; 0x54000
   1207c:	ldr	pc, [ip, #156]!	; 0x9c

00012080 <bfd_close_all_done@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #84, 20	; 0x54000
   12088:	ldr	pc, [ip, #148]!	; 0x94

0001208c <bfd_get_file_size@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #84, 20	; 0x54000
   12094:	ldr	pc, [ip, #140]!	; 0x8c

00012098 <strchr@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #84, 20	; 0x54000
   120a0:	ldr	pc, [ip, #132]!	; 0x84

000120a4 <bfd_get_arch@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #84, 20	; 0x54000
   120ac:	ldr	pc, [ip, #124]!	; 0x7c

000120b0 <fprintf@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #84, 20	; 0x54000
   120b8:	ldr	pc, [ip, #116]!	; 0x74

000120bc <bfd_cache_section_contents@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #84, 20	; 0x54000
   120c4:	ldr	pc, [ip, #108]!	; 0x6c

000120c8 <bfd_printable_arch_mach@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #84, 20	; 0x54000
   120d0:	ldr	pc, [ip, #100]!	; 0x64

000120d4 <bfd_coff_get_auxent@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #84, 20	; 0x54000
   120dc:	ldr	pc, [ip, #92]!	; 0x5c

000120e0 <cplus_mangle_opname@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #84, 20	; 0x54000
   120e8:	ldr	pc, [ip, #84]!	; 0x54

000120ec <__errno_location@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #84, 20	; 0x54000
   120f4:	ldr	pc, [ip, #76]!	; 0x4c

000120f8 <snprintf@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #84, 20	; 0x54000
   12100:	ldr	pc, [ip, #68]!	; 0x44

00012104 <bfd_iterate_over_targets@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #84, 20	; 0x54000
   1210c:	ldr	pc, [ip, #60]!	; 0x3c

00012110 <memset@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #84, 20	; 0x54000
   12118:	ldr	pc, [ip, #52]!	; 0x34

0001211c <putchar@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #84, 20	; 0x54000
   12124:	ldr	pc, [ip, #44]!	; 0x2c

00012128 <strncpy@plt>:
   12128:	add	ip, pc, #0, 12
   1212c:	add	ip, ip, #84, 20	; 0x54000
   12130:	ldr	pc, [ip, #36]!	; 0x24

00012134 <disassembler@plt>:
   12134:	add	ip, pc, #0, 12
   12138:	add	ip, ip, #84, 20	; 0x54000
   1213c:	ldr	pc, [ip, #28]!

00012140 <bfd_get_mach@plt>:
   12140:	add	ip, pc, #0, 12
   12144:	add	ip, ip, #84, 20	; 0x54000
   12148:	ldr	pc, [ip, #20]!

0001214c <strtod@plt>:
   1214c:	add	ip, pc, #0, 12
   12150:	add	ip, ip, #84, 20	; 0x54000
   12154:	ldr	pc, [ip, #12]!

00012158 <access@plt>:
   12158:	add	ip, pc, #0, 12
   1215c:	add	ip, ip, #84, 20	; 0x54000
   12160:	ldr	pc, [ip, #4]!

00012164 <fclose@plt>:
   12164:	add	ip, pc, #0, 12
   12168:	add	ip, ip, #339968	; 0x53000
   1216c:	ldr	pc, [ip, #4092]!	; 0xffc

00012170 <bfd_openw@plt>:
   12170:	add	ip, pc, #0, 12
   12174:	add	ip, ip, #339968	; 0x53000
   12178:	ldr	pc, [ip, #4084]!	; 0xff4

0001217c <strnlen@plt>:
   1217c:	add	ip, pc, #0, 12
   12180:	add	ip, ip, #339968	; 0x53000
   12184:	ldr	pc, [ip, #4076]!	; 0xfec

00012188 <bfd_coff_get_syment@plt>:
   12188:	add	ip, pc, #0, 12
   1218c:	add	ip, ip, #339968	; 0x53000
   12190:	ldr	pc, [ip, #4068]!	; 0xfe4

00012194 <cplus_demangle@plt>:
   12194:	add	ip, pc, #0, 12
   12198:	add	ip, ip, #339968	; 0x53000
   1219c:	ldr	pc, [ip, #4060]!	; 0xfdc

000121a0 <cplus_demangle_type@plt>:
   121a0:	add	ip, pc, #0, 12
   121a4:	add	ip, ip, #339968	; 0x53000
   121a8:	ldr	pc, [ip, #4052]!	; 0xfd4

000121ac <bfd_set_error_program_name@plt>:
   121ac:	add	ip, pc, #0, 12
   121b0:	add	ip, ip, #339968	; 0x53000
   121b4:	ldr	pc, [ip, #4044]!	; 0xfcc

000121b8 <bfd_demangle@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #339968	; 0x53000
   121c0:	ldr	pc, [ip, #4036]!	; 0xfc4

000121c4 <setlocale@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #339968	; 0x53000
   121cc:	ldr	pc, [ip, #4028]!	; 0xfbc

000121d0 <cplus_demangle_mangled_name@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #339968	; 0x53000
   121d8:	ldr	pc, [ip, #4020]!	; 0xfb4

000121dc <bfd_scan_arch@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #339968	; 0x53000
   121e4:	ldr	pc, [ip, #4012]!	; 0xfac

000121e8 <strrchr@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #339968	; 0x53000
   121f0:	ldr	pc, [ip, #4004]!	; 0xfa4

000121f4 <vfprintf@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #339968	; 0x53000
   121fc:	ldr	pc, [ip, #3996]!	; 0xf9c

00012200 <bfd_simple_get_relocated_section_contents@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #339968	; 0x53000
   12208:	ldr	pc, [ip, #3988]!	; 0xf94

0001220c <fputc@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #339968	; 0x53000
   12214:	ldr	pc, [ip, #3980]!	; 0xf8c

00012218 <xexit@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #339968	; 0x53000
   12220:	ldr	pc, [ip, #3972]!	; 0xf84

00012224 <bfd_close@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #339968	; 0x53000
   1222c:	ldr	pc, [ip, #3964]!	; 0xf7c

00012230 <bfd_sprintf_vma@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #339968	; 0x53000
   12238:	ldr	pc, [ip, #3956]!	; 0xf74

0001223c <sprintf@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #339968	; 0x53000
   12244:	ldr	pc, [ip, #3948]!	; 0xf6c

00012248 <mkdtemp@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #339968	; 0x53000
   12250:	ldr	pc, [ip, #3940]!	; 0xf64

00012254 <putc@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #339968	; 0x53000
   1225c:	ldr	pc, [ip, #3932]!	; 0xf5c

00012260 <bfd_check_format_matches@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #339968	; 0x53000
   12268:	ldr	pc, [ip, #3924]!	; 0xf54

0001226c <vsnprintf@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #339968	; 0x53000
   12274:	ldr	pc, [ip, #3916]!	; 0xf4c

00012278 <fopen64@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #339968	; 0x53000
   12280:	ldr	pc, [ip, #3908]!	; 0xf44

00012284 <bfd_errmsg@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #339968	; 0x53000
   1228c:	ldr	pc, [ip, #3900]!	; 0xf3c

00012290 <qsort@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #339968	; 0x53000
   12298:	ldr	pc, [ip, #3892]!	; 0xf34

0001229c <bfd_canonicalize_reloc@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #339968	; 0x53000
   122a4:	ldr	pc, [ip, #3884]!	; 0xf2c

000122a8 <remove_whitespace_and_extra_commas@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #339968	; 0x53000
   122b0:	ldr	pc, [ip, #3876]!	; 0xf24

000122b4 <bindtextdomain@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #339968	; 0x53000
   122bc:	ldr	pc, [ip, #3868]!	; 0xf1c

000122c0 <bfd_check_format@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #339968	; 0x53000
   122c8:	ldr	pc, [ip, #3860]!	; 0xf14

000122cc <bfd_openr_next_archived_file@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #339968	; 0x53000
   122d4:	ldr	pc, [ip, #3852]!	; 0xf0c

000122d8 <bfd_fprintf_vma@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #339968	; 0x53000
   122e0:	ldr	pc, [ip, #3844]!	; 0xf04

000122e4 <bfd_get_reloc_upper_bound@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #339968	; 0x53000
   122ec:	ldr	pc, [ip, #3836]!	; 0xefc

000122f0 <bfd_map_over_sections@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #339968	; 0x53000
   122f8:	ldr	pc, [ip, #3828]!	; 0xef4

000122fc <fseek@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #339968	; 0x53000
   12304:	ldr	pc, [ip, #3820]!	; 0xeec

00012308 <__xstat64@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #339968	; 0x53000
   12310:	ldr	pc, [ip, #3812]!	; 0xee4

00012314 <fputs@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #339968	; 0x53000
   1231c:	ldr	pc, [ip, #3804]!	; 0xedc

00012320 <strncmp@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #339968	; 0x53000
   12328:	ldr	pc, [ip, #3796]!	; 0xed4

0001232c <abort@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #339968	; 0x53000
   12334:	ldr	pc, [ip, #3788]!	; 0xecc

00012338 <getc@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #339968	; 0x53000
   12340:	ldr	pc, [ip, #3780]!	; 0xec4

00012344 <init_disassemble_info@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #339968	; 0x53000
   1234c:	ldr	pc, [ip, #3772]!	; 0xebc

00012350 <close@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #339968	; 0x53000
   12358:	ldr	pc, [ip, #3764]!	; 0xeb4

0001235c <xcalloc@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #339968	; 0x53000
   12364:	ldr	pc, [ip, #3756]!	; 0xeac

00012368 <dcngettext@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #339968	; 0x53000
   12370:	ldr	pc, [ip, #3748]!	; 0xea4

00012374 <bfd_arch_bits_per_address@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #339968	; 0x53000
   1237c:	ldr	pc, [ip, #3740]!	; 0xe9c

00012380 <strspn@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #339968	; 0x53000
   12388:	ldr	pc, [ip, #3732]!	; 0xe94

0001238c <__assert_fail@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #339968	; 0x53000
   12394:	ldr	pc, [ip, #3724]!	; 0xe8c

Disassembly of section .text:

00012398 <error@@Base-0x2ef14>:
   12398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1239c:	sub	sp, sp, #28
   123a0:	ldr	r5, [pc, #2444]	; 12d34 <__assert_fail@plt+0x9a8>
   123a4:	str	r0, [sp, #12]
   123a8:	str	r1, [sp, #8]
   123ac:	mov	r0, #5
   123b0:	ldr	r1, [pc, #2432]	; 12d38 <__assert_fail@plt+0x9ac>
   123b4:	bl	121c4 <setlocale@plt>
   123b8:	ldr	r1, [pc, #2424]	; 12d38 <__assert_fail@plt+0x9ac>
   123bc:	mov	r0, #0
   123c0:	bl	121c4 <setlocale@plt>
   123c4:	ldr	r1, [pc, #2416]	; 12d3c <__assert_fail@plt+0x9b0>
   123c8:	ldr	r0, [pc, #2416]	; 12d40 <__assert_fail@plt+0x9b4>
   123cc:	bl	122b4 <bindtextdomain@plt>
   123d0:	ldr	r0, [pc, #2408]	; 12d40 <__assert_fail@plt+0x9b4>
   123d4:	bl	11edc <textdomain@plt>
   123d8:	ldr	r3, [sp, #8]
   123dc:	mov	r4, #0
   123e0:	ldr	r7, [pc, #2396]	; 12d44 <__assert_fail@plt+0x9b8>
   123e4:	ldr	r3, [r3]
   123e8:	ldr	r6, [pc, #2392]	; 12d48 <__assert_fail@plt+0x9bc>
   123ec:	mov	r0, r3
   123f0:	str	r3, [r5]
   123f4:	bl	11f54 <xmalloc_set_program_name@plt>
   123f8:	ldr	r0, [r5]
   123fc:	bl	121ac <bfd_set_error_program_name@plt>
   12400:	add	r1, sp, #8
   12404:	add	r0, sp, #12
   12408:	bl	428e8 <warn@@Base+0x1118>
   1240c:	bl	11f90 <bfd_init@plt>
   12410:	bl	406f8 <__assert_fail@plt+0x2e36c>
   12414:	ldr	r5, [pc, #2352]	; 12d4c <__assert_fail@plt+0x9c0>
   12418:	ldr	r8, [pc, #2352]	; 12d50 <__assert_fail@plt+0x9c4>
   1241c:	mov	sl, r4
   12420:	mov	r3, #0
   12424:	str	r3, [sp]
   12428:	mov	r2, r6
   1242c:	mov	r3, r7
   12430:	ldr	r1, [sp, #8]
   12434:	ldr	r0, [sp, #12]
   12438:	bl	12038 <getopt_long@plt>
   1243c:	cmn	r0, #1
   12440:	beq	12bac <__assert_fail@plt+0x820>
   12444:	cmp	r0, #161	; 0xa1
   12448:	ldrls	pc, [pc, r0, lsl #2]
   1244c:	b	12ce4 <__assert_fail@plt+0x958>
   12450:	andeq	r2, r1, r0, lsr #8
   12454:	andeq	r2, r1, r4, ror #25
   12458:	andeq	r2, r1, r4, ror #25
   1245c:	andeq	r2, r1, r4, ror #25
   12460:	andeq	r2, r1, r4, ror #25
   12464:	andeq	r2, r1, r4, ror #25
   12468:	andeq	r2, r1, r4, ror #25
   1246c:	andeq	r2, r1, r4, ror #25
   12470:	andeq	r2, r1, r4, ror #25
   12474:	andeq	r2, r1, r4, ror #25
   12478:	andeq	r2, r1, r4, ror #25
   1247c:	andeq	r2, r1, r4, ror #25
   12480:	andeq	r2, r1, r4, ror #25
   12484:	andeq	r2, r1, r4, ror #25
   12488:	andeq	r2, r1, r4, ror #25
   1248c:	andeq	r2, r1, r4, ror #25
   12490:	andeq	r2, r1, r4, ror #25
   12494:	andeq	r2, r1, r4, ror #25
   12498:	andeq	r2, r1, r4, ror #25
   1249c:	andeq	r2, r1, r4, ror #25
   124a0:	andeq	r2, r1, r4, ror #25
   124a4:	andeq	r2, r1, r4, ror #25
   124a8:	andeq	r2, r1, r4, ror #25
   124ac:	andeq	r2, r1, r4, ror #25
   124b0:	andeq	r2, r1, r4, ror #25
   124b4:	andeq	r2, r1, r4, ror #25
   124b8:	andeq	r2, r1, r4, ror #25
   124bc:	andeq	r2, r1, r4, ror #25
   124c0:	andeq	r2, r1, r4, ror #25
   124c4:	andeq	r2, r1, r4, ror #25
   124c8:	andeq	r2, r1, r4, ror #25
   124cc:	andeq	r2, r1, r4, ror #25
   124d0:	andeq	r2, r1, r4, ror #25
   124d4:	andeq	r2, r1, r4, ror #25
   124d8:	andeq	r2, r1, r4, ror #25
   124dc:	andeq	r2, r1, r4, ror #25
   124e0:	andeq	r2, r1, r4, ror #25
   124e4:	andeq	r2, r1, r4, ror #25
   124e8:	andeq	r2, r1, r4, ror #25
   124ec:	andeq	r2, r1, r4, ror #25
   124f0:	andeq	r2, r1, r4, ror #25
   124f4:	andeq	r2, r1, r4, ror #25
   124f8:	andeq	r2, r1, r4, ror #25
   124fc:	andeq	r2, r1, r4, ror #25
   12500:	andeq	r2, r1, r4, ror #25
   12504:	andeq	r2, r1, r4, ror #25
   12508:	andeq	r2, r1, r4, ror #25
   1250c:	andeq	r2, r1, r4, ror #25
   12510:	andeq	r2, r1, r4, ror #25
   12514:	andeq	r2, r1, r4, ror #25
   12518:	andeq	r2, r1, r4, ror #25
   1251c:	andeq	r2, r1, r4, ror #25
   12520:	andeq	r2, r1, r4, ror #25
   12524:	andeq	r2, r1, r4, ror #25
   12528:	andeq	r2, r1, r4, ror #25
   1252c:	andeq	r2, r1, r4, ror #25
   12530:	andeq	r2, r1, r4, ror #25
   12534:	andeq	r2, r1, r4, ror #25
   12538:	andeq	r2, r1, r4, ror #25
   1253c:	andeq	r2, r1, r4, ror #25
   12540:	andeq	r2, r1, r4, ror #25
   12544:	andeq	r2, r1, r4, ror #25
   12548:	andeq	r2, r1, r4, ror #25
   1254c:	andeq	r2, r1, r4, ror #25
   12550:	andeq	r2, r1, r4, ror #25
   12554:	andeq	r2, r1, r4, ror #25
   12558:	andeq	r2, r1, r4, ror #25
   1255c:	andeq	r2, r1, ip, asr sl
   12560:	andeq	r2, r1, ip, asr #20
   12564:	strdeq	r2, [r1], -r0
   12568:	andeq	r2, r1, r4, ror #19
   1256c:	ldrdeq	r2, [r1], -r8
   12570:	ldrdeq	r2, [r1], -r4
   12574:	muleq	r1, ip, r9
   12578:	andeq	r2, r1, r4, ror #25
   1257c:	andeq	r2, r1, r4, ror #25
   12580:	andeq	r2, r1, r4, ror #25
   12584:	andeq	r2, r1, ip, ror #18
   12588:	andeq	r2, r1, r4, ror #25
   1258c:	andeq	r2, r1, r4, ror #25
   12590:	andeq	r2, r1, ip, asr r9
   12594:	andeq	r2, r1, r4, ror #25
   12598:	andeq	r2, r1, r0, asr r9
   1259c:	andeq	r2, r1, r0, asr #18
   125a0:	andeq	r2, r1, r4, lsr r9
   125a4:	andeq	r2, r1, r4, ror #25
   125a8:	andeq	r2, r1, r8, lsr #18
   125ac:	andeq	r2, r1, ip, lsl #18
   125b0:	andeq	r2, r1, r4, ror #25
   125b4:	andeq	r2, r1, r4, ror #25
   125b8:	andeq	r2, r1, r4, ror #25
   125bc:	andeq	r2, r1, r4, ror #25
   125c0:	andeq	r2, r1, r4, ror #25
   125c4:	andeq	r2, r1, r4, ror #25
   125c8:	andeq	r2, r1, r4, ror #25
   125cc:	andeq	r2, r1, r4, ror #25
   125d0:	andeq	r2, r1, r4, ror #25
   125d4:	andeq	r2, r1, r0, lsl #18
   125d8:	strdeq	r2, [r1], -r8
   125dc:	andeq	r2, r1, r4, ror #25
   125e0:	andeq	r2, r1, r8, lsl #23
   125e4:	andeq	r2, r1, r4, ror fp
   125e8:	andeq	r2, r1, r8, ror #22
   125ec:	andeq	r2, r1, ip, asr fp
   125f0:	muleq	r1, r4, fp
   125f4:	andeq	r2, r1, r0, ror #21
   125f8:	muleq	r1, r0, sl
   125fc:	andeq	r2, r1, r4, ror #25
   12600:	andeq	r2, r1, r4, lsl #21
   12604:	andeq	r2, r1, r0, lsl fp
   12608:	andeq	r2, r1, r4, ror #25
   1260c:	andeq	r2, r1, r4, ror #25
   12610:	andeq	r2, r1, r4, lsl #22
   12614:	andeq	r2, r1, r4, ror #25
   12618:	strdeq	r2, [r1], -r8
   1261c:	andeq	r2, r1, ip, ror #21
   12620:	andeq	r2, r1, r0, lsr fp
   12624:	andeq	r2, r1, r4, ror #25
   12628:	andeq	r2, r1, r8, lsr #18
   1262c:	andeq	r2, r1, ip, lsl fp
   12630:	andeq	r2, r1, ip, lsr fp
   12634:	andeq	r2, r1, r4, ror #25
   12638:	andeq	r2, r1, ip, ror #17
   1263c:	andeq	r2, r1, r4, ror #25
   12640:	andeq	r2, r1, r4, ror #25
   12644:	andeq	r2, r1, r4, ror #25
   12648:	andeq	r2, r1, r4, ror #25
   1264c:	andeq	r2, r1, r4, ror #25
   12650:	andeq	r2, r1, r4, ror #25
   12654:	andeq	r2, r1, r4, ror #25
   12658:	andeq	r2, r1, r4, ror #25
   1265c:	andeq	r2, r1, r4, ror #25
   12660:	andeq	r2, r1, r4, ror #25
   12664:	andeq	r2, r1, r4, ror #25
   12668:	andeq	r2, r1, r4, ror #25
   1266c:	andeq	r2, r1, r4, ror #25
   12670:	andeq	r2, r1, r4, ror #25
   12674:	andeq	r2, r1, r4, ror #25
   12678:	andeq	r2, r1, r4, ror #25
   1267c:	andeq	r2, r1, r4, ror #25
   12680:	andeq	r2, r1, r4, ror #25
   12684:	andeq	r2, r1, r4, ror #25
   12688:	andeq	r2, r1, r4, ror #25
   1268c:	andeq	r2, r1, r4, ror #25
   12690:	andeq	r2, r1, r4, ror #25
   12694:	andeq	r2, r1, r4, ror #25
   12698:	andeq	r2, r1, r4, ror #25
   1269c:	andeq	r2, r1, r4, ror #25
   126a0:	andeq	r2, r1, r4, ror #25
   126a4:	andeq	r2, r1, r4, ror #25
   126a8:	muleq	r1, ip, r8
   126ac:	andeq	r2, r1, ip, lsl #16
   126b0:	andeq	r2, r1, r4, asr r8
   126b4:	strdeq	r2, [r1], -r0
   126b8:	andeq	r2, r1, r8, lsr #15
   126bc:	andeq	r2, r1, r8, ror r7
   126c0:	andeq	r2, r1, r8, asr #14
   126c4:	andeq	r2, r1, r4, lsr r7
   126c8:	andeq	r2, r1, r8, lsl r7
   126cc:	andeq	r2, r1, r8, lsl #14
   126d0:	andeq	r2, r1, r4, ror #13
   126d4:	ldrdeq	r2, [r1], -r8
   126d8:	mov	r3, #1
   126dc:	str	r3, [r5, #208]	; 0xd0
   126e0:	b	12420 <__assert_fail@plt+0x94>
   126e4:	mov	r2, #0
   126e8:	add	r1, sp, #20
   126ec:	ldr	r0, [r8]
   126f0:	bl	12068 <strtoul@plt>
   126f4:	mov	r3, #1
   126f8:	str	r3, [r5, #80]	; 0x50
   126fc:	ldr	r3, [pc, #1616]	; 12d54 <__assert_fail@plt+0x9c8>
   12700:	str	r0, [r3]
   12704:	b	12420 <__assert_fail@plt+0x94>
   12708:	ldr	r2, [pc, #1608]	; 12d58 <__assert_fail@plt+0x9cc>
   1270c:	mov	r3, #1
   12710:	str	r3, [r2]
   12714:	b	12420 <__assert_fail@plt+0x94>
   12718:	mov	r2, #0
   1271c:	add	r1, sp, #20
   12720:	ldr	r0, [r8]
   12724:	bl	12068 <strtoul@plt>
   12728:	ldr	r3, [pc, #1580]	; 12d5c <__assert_fail@plt+0x9d0>
   1272c:	str	r0, [r3]
   12730:	b	12420 <__assert_fail@plt+0x94>
   12734:	ldr	r1, [pc, #1572]	; 12d60 <__assert_fail@plt+0x9d4>
   12738:	ldr	r0, [r8]
   1273c:	bl	40d54 <__assert_fail@plt+0x2e9c8>
   12740:	str	r0, [r5, #48]	; 0x30
   12744:	b	12420 <__assert_fail@plt+0x94>
   12748:	mov	r2, #0
   1274c:	mov	r1, r2
   12750:	ldr	r0, [r8]
   12754:	bl	12068 <strtoul@plt>
   12758:	cmp	r0, #0
   1275c:	str	r0, [r5, #184]	; 0xb8
   12760:	bgt	12420 <__assert_fail@plt+0x94>
   12764:	mov	r2, #5
   12768:	ldr	r1, [pc, #1524]	; 12d64 <__assert_fail@plt+0x9d8>
   1276c:	mov	r0, #0
   12770:	bl	11ea0 <dcgettext@plt>
   12774:	bl	406a0 <__assert_fail@plt+0x2e314>
   12778:	mov	r2, #10
   1277c:	mov	r1, #0
   12780:	ldr	r0, [r8]
   12784:	bl	11da4 <strtol@plt>
   12788:	cmp	r0, #0
   1278c:	str	r0, [r5, #204]	; 0xcc
   12790:	bge	12420 <__assert_fail@plt+0x94>
   12794:	mov	r2, #5
   12798:	ldr	r1, [pc, #1480]	; 12d68 <__assert_fail@plt+0x9dc>
   1279c:	mov	r0, #0
   127a0:	bl	11ea0 <dcgettext@plt>
   127a4:	bl	406a0 <__assert_fail@plt+0x2e314>
   127a8:	ldr	r9, [r8]
   127ac:	mov	r0, r9
   127b0:	str	r9, [r5, #196]	; 0xc4
   127b4:	bl	12074 <strlen@plt>
   127b8:	add	r3, r9, r0
   127bc:	str	r0, [r5, #200]	; 0xc8
   127c0:	ldrb	r3, [r3, #-1]
   127c4:	cmp	r3, #47	; 0x2f
   127c8:	bne	12420 <__assert_fail@plt+0x94>
   127cc:	sub	r3, r0, #2
   127d0:	add	r3, r9, r3
   127d4:	rsb	r1, r9, #1
   127d8:	add	r0, r1, r3
   127dc:	ldrb	r2, [r3], #-1
   127e0:	cmp	r2, #47	; 0x2f
   127e4:	beq	127d8 <__assert_fail@plt+0x44c>
   127e8:	str	r0, [r5, #200]	; 0xc8
   127ec:	b	12420 <__assert_fail@plt+0x94>
   127f0:	ldr	r0, [r8]
   127f4:	mov	r4, #1
   127f8:	cmp	r0, #0
   127fc:	str	r4, [r5, #116]	; 0x74
   12800:	beq	12ca0 <__assert_fail@plt+0x914>
   12804:	bl	307d8 <__assert_fail@plt+0x1e44c>
   12808:	b	12420 <__assert_fail@plt+0x94>
   1280c:	ldr	r1, [pc, #1368]	; 12d6c <__assert_fail@plt+0x9e0>
   12810:	ldr	r0, [r8]
   12814:	bl	40d54 <__assert_fail@plt+0x2e9c8>
   12818:	ldr	r2, [pc, #1360]	; 12d70 <__assert_fail@plt+0x9e4>
   1281c:	ldr	r3, [r2, #4]
   12820:	cmp	r0, r3
   12824:	str	r0, [r2]
   12828:	movcc	r0, #0
   1282c:	movcs	r0, #1
   12830:	cmn	r3, #1
   12834:	moveq	r0, #0
   12838:	cmp	r0, #0
   1283c:	beq	12420 <__assert_fail@plt+0x94>
   12840:	mov	r2, #5
   12844:	ldr	r1, [pc, #1320]	; 12d74 <__assert_fail@plt+0x9e8>
   12848:	mov	r0, #0
   1284c:	bl	11ea0 <dcgettext@plt>
   12850:	bl	406a0 <__assert_fail@plt+0x2e314>
   12854:	ldr	r1, [pc, #1308]	; 12d78 <__assert_fail@plt+0x9ec>
   12858:	ldr	r0, [r8]
   1285c:	bl	40d54 <__assert_fail@plt+0x2e9c8>
   12860:	ldr	r2, [pc, #1288]	; 12d70 <__assert_fail@plt+0x9e4>
   12864:	ldr	r3, [r2]
   12868:	cmp	r0, r3
   1286c:	str	r0, [r2, #4]
   12870:	movhi	r0, #0
   12874:	movls	r0, #1
   12878:	cmn	r3, #1
   1287c:	moveq	r0, #0
   12880:	cmp	r0, #0
   12884:	beq	12420 <__assert_fail@plt+0x94>
   12888:	mov	r2, #5
   1288c:	ldr	r1, [pc, #1256]	; 12d7c <__assert_fail@plt+0x9f0>
   12890:	mov	r0, #0
   12894:	bl	11ea0 <dcgettext@plt>
   12898:	bl	406a0 <__assert_fail@plt+0x2e314>
   1289c:	ldr	r9, [r8]
   128a0:	mov	r0, r9
   128a4:	bl	12074 <strlen@plt>
   128a8:	ldr	r1, [pc, #1232]	; 12d80 <__assert_fail@plt+0x9f4>
   128ac:	mov	r2, r0
   128b0:	mov	fp, r0
   128b4:	mov	r0, r9
   128b8:	bl	12320 <strncmp@plt>
   128bc:	cmp	r0, #0
   128c0:	beq	12ba0 <__assert_fail@plt+0x814>
   128c4:	mov	r2, fp
   128c8:	mov	r0, r9
   128cc:	ldr	r1, [pc, #1200]	; 12d84 <__assert_fail@plt+0x9f8>
   128d0:	bl	12320 <strncmp@plt>
   128d4:	cmp	r0, #0
   128d8:	bne	12d08 <__assert_fail@plt+0x97c>
   128dc:	ldr	r3, [pc, #1164]	; 12d70 <__assert_fail@plt+0x9e4>
   128e0:	mov	r2, #1
   128e4:	str	r2, [r3, #8]
   128e8:	b	12420 <__assert_fail@plt+0x94>
   128ec:	mov	r3, #1
   128f0:	str	r3, [r5, #188]	; 0xbc
   128f4:	b	12420 <__assert_fail@plt+0x94>
   128f8:	ldr	sl, [r8]
   128fc:	b	12420 <__assert_fail@plt+0x94>
   12900:	mov	r4, #1
   12904:	str	r4, [r5, #84]	; 0x54
   12908:	b	12420 <__assert_fail@plt+0x94>
   1290c:	ldr	r0, [r8]
   12910:	mov	r4, #1
   12914:	cmp	r0, #0
   12918:	str	r4, [r5, #116]	; 0x74
   1291c:	beq	12ca0 <__assert_fail@plt+0x914>
   12920:	bl	308d8 <__assert_fail@plt+0x1e54c>
   12924:	b	12420 <__assert_fail@plt+0x94>
   12928:	mov	r4, #1
   1292c:	str	r4, [r5, #232]	; 0xe8
   12930:	b	12420 <__assert_fail@plt+0x94>
   12934:	mov	r4, #1
   12938:	str	r4, [r5, #124]	; 0x7c
   1293c:	b	12420 <__assert_fail@plt+0x94>
   12940:	mov	r4, #1
   12944:	str	r4, [r5, #108]	; 0x6c
   12948:	str	r4, [r5, #192]	; 0xc0
   1294c:	b	12420 <__assert_fail@plt+0x94>
   12950:	mov	r4, #1
   12954:	str	r4, [r5, #128]	; 0x80
   12958:	b	12420 <__assert_fail@plt+0x94>
   1295c:	ldr	r3, [r8]
   12960:	mov	r4, #1
   12964:	str	r3, [r5, #96]	; 0x60
   12968:	b	12420 <__assert_fail@plt+0x94>
   1296c:	ldr	r3, [r5, #164]	; 0xa4
   12970:	ldr	r0, [r8]
   12974:	cmp	r3, #0
   12978:	beq	12990 <__assert_fail@plt+0x604>
   1297c:	mov	r2, r0
   12980:	ldr	r1, [pc, #1024]	; 12d88 <__assert_fail@plt+0x9fc>
   12984:	mov	r0, r3
   12988:	mov	r3, #0
   1298c:	bl	11ee8 <concat@plt>
   12990:	bl	122a8 <remove_whitespace_and_extra_commas@plt>
   12994:	str	r0, [r5, #164]	; 0xa4
   12998:	b	12420 <__assert_fail@plt+0x94>
   1299c:	ldr	r9, [r8]
   129a0:	ldrb	r3, [r9]
   129a4:	cmp	r3, #0
   129a8:	beq	12420 <__assert_fail@plt+0x94>
   129ac:	ldr	r1, [r5, #212]	; 0xd4
   129b0:	ldr	r0, [r5, #216]	; 0xd8
   129b4:	add	r1, r1, #1
   129b8:	str	r1, [r5, #212]	; 0xd4
   129bc:	lsl	r1, r1, #2
   129c0:	bl	11ed0 <xrealloc@plt>
   129c4:	ldr	r3, [r5, #212]	; 0xd4
   129c8:	sub	r3, r3, #-1073741823	; 0xc0000001
   129cc:	str	r0, [r5, #216]	; 0xd8
   129d0:	str	r9, [r0, r3, lsl #2]
   129d4:	b	12420 <__assert_fail@plt+0x94>
   129d8:	mov	r4, #1
   129dc:	str	r4, [r5, #140]	; 0x8c
   129e0:	b	12420 <__assert_fail@plt+0x94>
   129e4:	mov	r3, #1
   129e8:	str	r3, [r5, #20]
   129ec:	b	12420 <__assert_fail@plt+0x94>
   129f0:	ldr	r9, [r8]
   129f4:	ldr	r1, [pc, #912]	; 12d8c <__assert_fail@plt+0xa00>
   129f8:	mov	r0, r9
   129fc:	bl	11d98 <strcmp@plt>
   12a00:	cmp	r0, #0
   12a04:	beq	12ba0 <__assert_fail@plt+0x814>
   12a08:	mov	r0, r9
   12a0c:	ldr	r1, [pc, #892]	; 12d90 <__assert_fail@plt+0xa04>
   12a10:	bl	11d98 <strcmp@plt>
   12a14:	cmp	r0, #0
   12a18:	beq	128dc <__assert_fail@plt+0x550>
   12a1c:	mov	r2, #5
   12a20:	ldr	r1, [pc, #876]	; 12d94 <__assert_fail@plt+0xa08>
   12a24:	mov	r0, #0
   12a28:	bl	11ea0 <dcgettext@plt>
   12a2c:	bl	403fc <__assert_fail@plt+0x2e070>
   12a30:	ldr	r1, [pc, #864]	; 12d98 <__assert_fail@plt+0xa0c>
   12a34:	ldr	r2, [pc, #784]	; 12d4c <__assert_fail@plt+0x9c0>
   12a38:	mov	r3, #1
   12a3c:	ldr	r0, [r1]
   12a40:	mov	r1, r3
   12a44:	str	r3, [r2, #16]
   12a48:	bl	135a4 <__assert_fail@plt+0x1218>
   12a4c:	mov	r4, #1
   12a50:	str	r4, [r5, #108]	; 0x6c
   12a54:	str	r4, [r5, #180]	; 0xb4
   12a58:	b	12420 <__assert_fail@plt+0x94>
   12a5c:	ldr	r0, [r8]
   12a60:	mov	r3, #1
   12a64:	cmp	r0, #0
   12a68:	str	r3, [r5, #12]
   12a6c:	beq	12420 <__assert_fail@plt+0x94>
   12a70:	bl	11d80 <cplus_demangle_name_to_style@plt>
   12a74:	cmp	r0, #0
   12a78:	beq	12cf4 <__assert_fail@plt+0x968>
   12a7c:	bl	11e34 <cplus_demangle_set_style@plt>
   12a80:	b	12420 <__assert_fail@plt+0x94>
   12a84:	mov	r3, #1
   12a88:	str	r3, [r5, #32]
   12a8c:	b	12420 <__assert_fail@plt+0x94>
   12a90:	ldr	r9, [r5, #52]	; 0x34
   12a94:	ldr	fp, [r8]
   12a98:	cmp	r9, #0
   12a9c:	beq	12ac0 <__assert_fail@plt+0x734>
   12aa0:	mov	r1, fp
   12aa4:	ldr	r0, [r9]
   12aa8:	bl	11d98 <strcmp@plt>
   12aac:	cmp	r0, #0
   12ab0:	beq	12420 <__assert_fail@plt+0x94>
   12ab4:	ldr	r9, [r9, #8]
   12ab8:	cmp	r9, #0
   12abc:	bne	12aa0 <__assert_fail@plt+0x714>
   12ac0:	mov	r0, #12
   12ac4:	bl	11f3c <xmalloc@plt>
   12ac8:	ldr	r3, [r5, #52]	; 0x34
   12acc:	mov	r2, #0
   12ad0:	str	fp, [r0]
   12ad4:	strd	r2, [r0, #4]
   12ad8:	str	r0, [r5, #52]	; 0x34
   12adc:	b	12420 <__assert_fail@plt+0x94>
   12ae0:	mov	r4, #1
   12ae4:	str	r4, [r5, #228]	; 0xe4
   12ae8:	b	12420 <__assert_fail@plt+0x94>
   12aec:	mov	r4, #1
   12af0:	str	r4, [r5, #144]	; 0x90
   12af4:	b	12420 <__assert_fail@plt+0x94>
   12af8:	mov	r4, #1
   12afc:	str	r4, [r5, #104]	; 0x68
   12b00:	b	12420 <__assert_fail@plt+0x94>
   12b04:	mov	r4, #1
   12b08:	str	r4, [r5, #92]	; 0x5c
   12b0c:	b	12420 <__assert_fail@plt+0x94>
   12b10:	ldr	r3, [r8]
   12b14:	str	r3, [r5, #160]	; 0xa0
   12b18:	b	12420 <__assert_fail@plt+0x94>
   12b1c:	ldr	r2, [pc, #632]	; 12d9c <__assert_fail@plt+0xa10>
   12b20:	mov	r3, #1
   12b24:	str	r3, [r5, #56]	; 0x38
   12b28:	str	r3, [r2]
   12b2c:	b	12420 <__assert_fail@plt+0x94>
   12b30:	mov	r4, #1
   12b34:	str	r4, [r5, #100]	; 0x64
   12b38:	b	12420 <__assert_fail@plt+0x94>
   12b3c:	mov	r4, #1
   12b40:	str	r4, [r5, #92]	; 0x5c
   12b44:	str	r4, [r5, #100]	; 0x64
   12b48:	str	r4, [r5, #104]	; 0x68
   12b4c:	str	r4, [r5, #88]	; 0x58
   12b50:	str	r4, [r5, #84]	; 0x54
   12b54:	str	r4, [r5, #120]	; 0x78
   12b58:	b	12420 <__assert_fail@plt+0x94>
   12b5c:	mov	r4, #1
   12b60:	str	r4, [r5, #112]	; 0x70
   12b64:	b	12420 <__assert_fail@plt+0x94>
   12b68:	mov	r4, #1
   12b6c:	str	r4, [r5, #88]	; 0x58
   12b70:	b	12420 <__assert_fail@plt+0x94>
   12b74:	mov	r4, #1
   12b78:	str	r4, [r5, #112]	; 0x70
   12b7c:	str	r4, [r5, #76]	; 0x4c
   12b80:	str	r4, [r5, #12]
   12b84:	b	12420 <__assert_fail@plt+0x94>
   12b88:	mov	r4, #1
   12b8c:	str	r4, [r5, #108]	; 0x6c
   12b90:	b	12420 <__assert_fail@plt+0x94>
   12b94:	mov	r4, #1
   12b98:	str	r4, [r5, #120]	; 0x78
   12b9c:	b	12420 <__assert_fail@plt+0x94>
   12ba0:	ldr	r3, [pc, #456]	; 12d70 <__assert_fail@plt+0x9e4>
   12ba4:	str	r0, [r3, #8]
   12ba8:	b	12420 <__assert_fail@plt+0x94>
   12bac:	ldr	r6, [pc, #408]	; 12d4c <__assert_fail@plt+0x9c0>
   12bb0:	ldr	r3, [r6, #232]	; 0xe8
   12bb4:	cmp	r3, #0
   12bb8:	bne	12cb4 <__assert_fail@plt+0x928>
   12bbc:	cmp	r4, #0
   12bc0:	beq	12d24 <__assert_fail@plt+0x998>
   12bc4:	ldr	r3, [r6, #228]	; 0xe4
   12bc8:	cmp	r3, #0
   12bcc:	bne	12ca8 <__assert_fail@plt+0x91c>
   12bd0:	ldr	r5, [pc, #456]	; 12da0 <__assert_fail@plt+0xa14>
   12bd4:	ldr	r2, [sp, #12]
   12bd8:	ldr	r3, [r5]
   12bdc:	cmp	r3, r2
   12be0:	beq	12cc0 <__assert_fail@plt+0x934>
   12be4:	bge	12c20 <__assert_fail@plt+0x894>
   12be8:	ldr	r1, [sp, #8]
   12bec:	sub	r2, r2, #1
   12bf0:	sub	r2, r2, r3
   12bf4:	ldr	r0, [r1, r3, lsl #2]
   12bf8:	clz	r2, r2
   12bfc:	mov	r1, sl
   12c00:	lsr	r2, r2, #5
   12c04:	bl	18260 <__assert_fail@plt+0x5ed4>
   12c08:	ldr	r3, [r5]
   12c0c:	ldr	r2, [sp, #12]
   12c10:	add	r3, r3, #1
   12c14:	cmp	r3, r2
   12c18:	str	r3, [r5]
   12c1c:	blt	12be8 <__assert_fail@plt+0x85c>
   12c20:	ldr	r5, [r6, #52]	; 0x34
   12c24:	cmp	r5, #0
   12c28:	beq	12c94 <__assert_fail@plt+0x908>
   12c2c:	mov	r3, r5
   12c30:	ldr	r2, [r3, #4]
   12c34:	cmp	r2, #0
   12c38:	bne	12c4c <__assert_fail@plt+0x8c0>
   12c3c:	ldr	r3, [r3, #8]
   12c40:	cmp	r3, #0
   12c44:	bne	12c30 <__assert_fail@plt+0x8a4>
   12c48:	mov	r4, r3
   12c4c:	ldr	r8, [pc, #336]	; 12da4 <__assert_fail@plt+0xa18>
   12c50:	b	12c68 <__assert_fail@plt+0x8dc>
   12c54:	ldr	r7, [r5, #8]
   12c58:	mov	r0, r5
   12c5c:	bl	11e10 <free@plt>
   12c60:	subs	r5, r7, #0
   12c64:	beq	12c94 <__assert_fail@plt+0x908>
   12c68:	cmp	r4, #0
   12c6c:	bne	12c54 <__assert_fail@plt+0x8c8>
   12c70:	mov	r2, #5
   12c74:	mov	r1, r8
   12c78:	mov	r0, r4
   12c7c:	bl	11ea0 <dcgettext@plt>
   12c80:	ldr	r1, [r5]
   12c84:	bl	406c8 <__assert_fail@plt+0x2e33c>
   12c88:	mov	r3, #1
   12c8c:	str	r3, [r6, #16]
   12c90:	b	12c54 <__assert_fail@plt+0x8c8>
   12c94:	ldr	r0, [r6, #16]
   12c98:	add	sp, sp, #28
   12c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ca0:	bl	30b9c <__assert_fail@plt+0x1e810>
   12ca4:	b	12420 <__assert_fail@plt+0x94>
   12ca8:	bl	40908 <__assert_fail@plt+0x2e57c>
   12cac:	str	r0, [r6, #16]
   12cb0:	b	12c20 <__assert_fail@plt+0x894>
   12cb4:	ldr	r0, [pc, #236]	; 12da8 <__assert_fail@plt+0xa1c>
   12cb8:	bl	41128 <__assert_fail@plt+0x2ed9c>
   12cbc:	b	12bbc <__assert_fail@plt+0x830>
   12cc0:	mov	r1, sl
   12cc4:	mov	r2, #1
   12cc8:	ldr	r0, [pc, #220]	; 12dac <__assert_fail@plt+0xa20>
   12ccc:	bl	18260 <__assert_fail@plt+0x5ed4>
   12cd0:	b	12c20 <__assert_fail@plt+0x894>
   12cd4:	ldr	r3, [pc, #212]	; 12db0 <__assert_fail@plt+0xa24>
   12cd8:	mov	r1, #0
   12cdc:	ldr	r0, [r3]
   12ce0:	bl	135a4 <__assert_fail@plt+0x1218>
   12ce4:	ldr	r3, [pc, #172]	; 12d98 <__assert_fail@plt+0xa0c>
   12ce8:	mov	r1, #1
   12cec:	ldr	r0, [r3]
   12cf0:	bl	135a4 <__assert_fail@plt+0x1218>
   12cf4:	ldr	r1, [pc, #184]	; 12db4 <__assert_fail@plt+0xa28>
   12cf8:	mov	r2, #5
   12cfc:	bl	11ea0 <dcgettext@plt>
   12d00:	ldr	r1, [r8]
   12d04:	bl	406a0 <__assert_fail@plt+0x2e314>
   12d08:	mov	r2, #5
   12d0c:	ldr	r1, [pc, #164]	; 12db8 <__assert_fail@plt+0xa2c>
   12d10:	mov	r0, #0
   12d14:	bl	11ea0 <dcgettext@plt>
   12d18:	ldr	r1, [r8]
   12d1c:	bl	406c8 <__assert_fail@plt+0x2e33c>
   12d20:	b	12a30 <__assert_fail@plt+0x6a4>
   12d24:	ldr	r3, [pc, #108]	; 12d98 <__assert_fail@plt+0xa0c>
   12d28:	mov	r1, #2
   12d2c:	ldr	r0, [r3]
   12d30:	bl	135a4 <__assert_fail@plt+0x1218>
   12d34:	ldrdeq	r9, [r6], -ip
   12d38:	andeq	r9, r4, r4, lsr #5
   12d3c:	andeq	r9, r4, r0, lsr r3
   12d40:	andeq	r9, r4, r4, asr #6
   12d44:	andeq	r6, r6, ip, asr #4
   12d48:			; <UNDEFINED> instruction: 0x000494bc
   12d4c:	andeq	r7, r6, r0, asr #8
   12d50:	andeq	r7, r6, r8, lsr r4
   12d54:	ldrdeq	r9, [r6], -r8
   12d58:	andeq	r7, r6, r4, asr ip
   12d5c:	andeq	r7, r6, r8, ror r1
   12d60:	andeq	r9, r4, r4, ror r3
   12d64:	andeq	r9, r4, r8, asr #8
   12d68:	andeq	r9, r4, ip, lsl r4
   12d6c:	andeq	r9, r4, r4, lsl #7
   12d70:	andeq	r6, r6, r0, asr #4
   12d74:	muleq	r4, r4, r3
   12d78:	ldrdeq	r9, [r4], -r0
   12d7c:	andeq	r9, r4, r0, ror #7
   12d80:	muleq	r4, r0, r4
   12d84:	muleq	r4, r4, r4
   12d88:	andeq	r9, r4, r0, asr r3
   12d8c:	andeq	r9, r4, r4, ror r4
   12d90:	andeq	r0, r5, ip, ror #27
   12d94:	andeq	r9, r4, r8, ror r4
   12d98:	andeq	r7, r6, r8, lsl #3
   12d9c:	andeq	r9, r6, r8, lsr #27
   12da0:	andeq	r7, r6, r0, lsl #3
   12da4:	strdeq	r9, [r4], -r8
   12da8:	andeq	r9, r4, r8, ror #9
   12dac:	strdeq	r9, [r4], -r0
   12db0:	andeq	r7, r6, r0, lsr r4
   12db4:	andeq	r9, r4, r4, asr r3
   12db8:	muleq	r4, ip, r4
   12dbc:	mov	fp, #0
   12dc0:	mov	lr, #0
   12dc4:	pop	{r1}		; (ldr r1, [sp], #4)
   12dc8:	mov	r2, sp
   12dcc:	push	{r2}		; (str r2, [sp, #-4]!)
   12dd0:	push	{r0}		; (str r0, [sp, #-4]!)
   12dd4:	ldr	ip, [pc, #16]	; 12dec <__assert_fail@plt+0xa60>
   12dd8:	push	{ip}		; (str ip, [sp, #-4]!)
   12ddc:	ldr	r0, [pc, #12]	; 12df0 <__assert_fail@plt+0xa64>
   12de0:	ldr	r3, [pc, #12]	; 12df4 <__assert_fail@plt+0xa68>
   12de4:	bl	12008 <__libc_start_main@plt>
   12de8:	bl	1232c <abort@plt>
   12dec:	andeq	r7, r4, r4, asr r9
   12df0:	muleq	r1, r8, r3
   12df4:	strdeq	r7, [r4], -r4
   12df8:	ldr	r3, [pc, #20]	; 12e14 <__assert_fail@plt+0xa88>
   12dfc:	ldr	r2, [pc, #20]	; 12e18 <__assert_fail@plt+0xa8c>
   12e00:	add	r3, pc, r3
   12e04:	ldr	r2, [r3, r2]
   12e08:	cmp	r2, #0
   12e0c:	bxeq	lr
   12e10:	b	12020 <__gmon_start__@plt>
   12e14:	strdeq	r3, [r5], -r8
   12e18:	andeq	r0, r0, ip, lsr #4
   12e1c:	ldr	r0, [pc, #24]	; 12e3c <__assert_fail@plt+0xab0>
   12e20:	ldr	r3, [pc, #24]	; 12e40 <__assert_fail@plt+0xab4>
   12e24:	cmp	r3, r0
   12e28:	bxeq	lr
   12e2c:	ldr	r3, [pc, #16]	; 12e44 <__assert_fail@plt+0xab8>
   12e30:	cmp	r3, #0
   12e34:	bxeq	lr
   12e38:	bx	r3
   12e3c:	andeq	r7, r6, r0, lsl #3
   12e40:	andeq	r7, r6, r0, lsl #3
   12e44:	andeq	r0, r0, r0
   12e48:	ldr	r0, [pc, #36]	; 12e74 <__assert_fail@plt+0xae8>
   12e4c:	ldr	r1, [pc, #36]	; 12e78 <__assert_fail@plt+0xaec>
   12e50:	sub	r1, r1, r0
   12e54:	asr	r1, r1, #2
   12e58:	add	r1, r1, r1, lsr #31
   12e5c:	asrs	r1, r1, #1
   12e60:	bxeq	lr
   12e64:	ldr	r3, [pc, #16]	; 12e7c <__assert_fail@plt+0xaf0>
   12e68:	cmp	r3, #0
   12e6c:	bxeq	lr
   12e70:	bx	r3
   12e74:	andeq	r7, r6, r0, lsl #3
   12e78:	andeq	r7, r6, r0, lsl #3
   12e7c:	andeq	r0, r0, r0
   12e80:	push	{r4, lr}
   12e84:	ldr	r4, [pc, #24]	; 12ea4 <__assert_fail@plt+0xb18>
   12e88:	ldrb	r3, [r4]
   12e8c:	cmp	r3, #0
   12e90:	popne	{r4, pc}
   12e94:	bl	12e1c <__assert_fail@plt+0xa90>
   12e98:	mov	r3, #1
   12e9c:	strb	r3, [r4]
   12ea0:	pop	{r4, pc}
   12ea4:	andeq	r7, r6, ip, lsr r4
   12ea8:	b	12e48 <__assert_fail@plt+0xabc>
   12eac:	ldr	r2, [r0]
   12eb0:	ldr	r3, [r1]
   12eb4:	ldr	r0, [r2, #4]
   12eb8:	ldr	r1, [r3, #4]
   12ebc:	cmp	r0, r1
   12ec0:	bhi	12ee4 <__assert_fail@plt+0xb58>
   12ec4:	bcc	12edc <__assert_fail@plt+0xb50>
   12ec8:	cmp	r2, r3
   12ecc:	bhi	12ee4 <__assert_fail@plt+0xb58>
   12ed0:	mvncc	r0, #0
   12ed4:	movcs	r0, #0
   12ed8:	bx	lr
   12edc:	mvn	r0, #0
   12ee0:	bx	lr
   12ee4:	mov	r0, #1
   12ee8:	bx	lr
   12eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ef0:	sub	sp, sp, #28
   12ef4:	ldr	r9, [pc, #1640]	; 13564 <__assert_fail@plt+0x11d8>
   12ef8:	ldr	fp, [r9]
   12efc:	cmp	fp, #0
   12f00:	ble	13298 <__assert_fail@plt+0xf0c>
   12f04:	ldr	r3, [r1, #8]
   12f08:	str	r2, [sp, #8]
   12f0c:	ldr	r2, [r1, #112]	; 0x70
   12f10:	ldr	r5, [r9, #4]
   12f14:	ldr	sl, [r3, #4]
   12f18:	str	r2, [sp, #20]
   12f1c:	mov	r8, r1
   12f20:	ldr	r2, [r3]
   12f24:	mov	r7, #0
   12f28:	mov	ip, r0
   12f2c:	str	r0, [sp, #12]
   12f30:	str	r3, [sp]
   12f34:	str	r2, [sp, #16]
   12f38:	add	r1, r7, #1
   12f3c:	b	12f64 <__assert_fail@plt+0xbd8>
   12f40:	ldr	r0, [r5, r3, lsl #2]
   12f44:	lsl	r6, r3, #2
   12f48:	ldr	r2, [r0, #16]
   12f4c:	ldr	lr, [r0, #8]
   12f50:	ldr	r2, [r2, #28]
   12f54:	add	r2, r2, lr
   12f58:	cmp	r2, ip
   12f5c:	bls	130b4 <__assert_fail@plt+0xd28>
   12f60:	mov	fp, r3
   12f64:	add	r3, r7, fp
   12f68:	cmp	fp, r1
   12f6c:	asr	r3, r3, #1
   12f70:	bgt	12f40 <__assert_fail@plt+0xbb4>
   12f74:	cmp	r7, #0
   12f78:	moveq	r6, r7
   12f7c:	ldreq	r0, [r5]
   12f80:	beq	13024 <__assert_fail@plt+0xc98>
   12f84:	ldr	r0, [r5, r7, lsl #2]
   12f88:	mov	r3, r7
   12f8c:	lsl	r6, r7, #2
   12f90:	ldr	r1, [r0, #16]
   12f94:	ldr	r2, [r0, #8]
   12f98:	ldr	r1, [r1, #28]
   12f9c:	add	r2, r1, r2
   12fa0:	sub	r3, r3, #-1073741823	; 0xc0000001
   12fa4:	ldr	r3, [r5, r3, lsl #2]
   12fa8:	ldr	r1, [r3, #16]
   12fac:	ldr	ip, [r3, #8]
   12fb0:	ldr	r1, [r1, #28]
   12fb4:	add	r1, r1, ip
   12fb8:	cmp	r1, r2
   12fbc:	bne	1301c <__assert_fail@plt+0xc90>
   12fc0:	sub	ip, r7, #-1073741823	; 0xc0000001
   12fc4:	add	ip, r5, ip, lsl #2
   12fc8:	b	13008 <__assert_fail@plt+0xc7c>
   12fcc:	subs	r7, r7, #1
   12fd0:	beq	13290 <__assert_fail@plt+0xf04>
   12fd4:	ldr	r0, [ip]
   12fd8:	ldr	r3, [ip, #-4]!
   12fdc:	lsl	r6, r7, #2
   12fe0:	ldr	r1, [r0, #16]
   12fe4:	ldr	r2, [r3, #16]
   12fe8:	ldr	lr, [r0, #8]
   12fec:	ldr	r1, [r1, #28]
   12ff0:	ldr	r2, [r2, #28]
   12ff4:	add	r1, r1, lr
   12ff8:	ldr	lr, [r3, #8]
   12ffc:	add	r2, r2, lr
   13000:	cmp	r1, r2
   13004:	bne	1301c <__assert_fail@plt+0xc90>
   13008:	ldr	r6, [r3, #12]
   1300c:	ands	r6, r6, #260	; 0x104
   13010:	beq	12fcc <__assert_fail@plt+0xc40>
   13014:	ldr	r0, [r5, r7, lsl #2]
   13018:	lsl	r6, r7, #2
   1301c:	cmp	fp, r7
   13020:	ble	13450 <__assert_fail@plt+0x10c4>
   13024:	mov	r4, r7
   13028:	str	r7, [sp, #4]
   1302c:	ldr	r1, [r0, #16]
   13030:	mov	r7, r6
   13034:	b	1307c <__assert_fail@plt+0xcf0>
   13038:	ldr	r5, [r9, #4]
   1303c:	add	r4, r4, #1
   13040:	cmp	fp, r4
   13044:	ldr	r3, [r5, r6]
   13048:	ble	130c0 <__assert_fail@plt+0xd34>
   1304c:	ldr	r0, [r5, r4, lsl #2]
   13050:	ldr	r2, [r3, #16]
   13054:	ldr	lr, [r3, #8]
   13058:	ldr	r1, [r0, #16]
   1305c:	ldr	r2, [r2, #28]
   13060:	lsl	r7, r4, #2
   13064:	add	r2, r2, lr
   13068:	ldr	ip, [r1, #28]
   1306c:	ldr	lr, [r0, #8]
   13070:	add	ip, ip, lr
   13074:	cmp	ip, r2
   13078:	bne	130c0 <__assert_fail@plt+0xd34>
   1307c:	cmp	sl, r1
   13080:	bne	13038 <__assert_fail@plt+0xcac>
   13084:	ldr	r3, [r8, #84]	; 0x54
   13088:	mov	r1, r8
   1308c:	blx	r3
   13090:	cmp	r0, #0
   13094:	beq	13038 <__assert_fail@plt+0xcac>
   13098:	ldr	r3, [sp, #8]
   1309c:	cmp	r3, #0
   130a0:	strne	r4, [r3]
   130a4:	ldr	r3, [r9, #4]
   130a8:	ldr	r0, [r3, r7]
   130ac:	add	sp, sp, #28
   130b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130b4:	mov	r7, r3
   130b8:	bcc	12f38 <__assert_fail@plt+0xbac>
   130bc:	b	12fa0 <__assert_fail@plt+0xc14>
   130c0:	ldr	r7, [sp, #4]
   130c4:	ldr	r2, [sp]
   130c8:	ldr	r2, [r2, #8]
   130cc:	cmp	r2, #0
   130d0:	beq	13228 <__assert_fail@plt+0xe9c>
   130d4:	ldr	r2, [r3, #16]
   130d8:	cmp	r2, sl
   130dc:	movne	r3, #1
   130e0:	strne	r3, [sp, #4]
   130e4:	beq	13400 <__assert_fail@plt+0x1074>
   130e8:	ldr	r3, [sp, #4]
   130ec:	mov	r2, r5
   130f0:	eor	r3, r3, #1
   130f4:	str	r3, [sp, #20]
   130f8:	and	r3, r3, #1
   130fc:	sub	r4, r4, #1
   13100:	ldr	fp, [r9]
   13104:	str	r6, [sp, #16]
   13108:	mov	r5, r3
   1310c:	b	1311c <__assert_fail@plt+0xd90>
   13110:	ldr	r2, [r9, #4]
   13114:	subs	r4, r4, #1
   13118:	bcc	131a8 <__assert_fail@plt+0xe1c>
   1311c:	ldr	r3, [r2, r4, lsl #2]
   13120:	mov	r1, r8
   13124:	mov	r0, r3
   13128:	ldr	r3, [r3, #16]
   1312c:	lsl	r6, r4, #2
   13130:	cmp	r3, sl
   13134:	movne	r3, r5
   13138:	orreq	r3, r5, #1
   1313c:	cmp	r3, #0
   13140:	beq	13114 <__assert_fail@plt+0xd88>
   13144:	ldr	r2, [r8, #84]	; 0x54
   13148:	blx	r2
   1314c:	cmp	r0, #0
   13150:	beq	13110 <__assert_fail@plt+0xd84>
   13154:	ldr	ip, [r9]
   13158:	ldr	r2, [r9, #4]
   1315c:	cmp	ip, fp
   13160:	lsl	r1, fp, #2
   13164:	moveq	r1, r6
   13168:	ldr	lr, [r2, r6]
   1316c:	ldr	r0, [r2, r1]
   13170:	moveq	fp, r4
   13174:	ldr	r1, [lr, #16]
   13178:	ldr	r3, [r0, #16]
   1317c:	ldr	lr, [lr, #8]
   13180:	ldr	r1, [r1, #28]
   13184:	ldr	r3, [r3, #28]
   13188:	ldr	r0, [r0, #8]
   1318c:	add	r1, r1, lr
   13190:	add	r3, r3, r0
   13194:	cmp	r1, r3
   13198:	bne	13428 <__assert_fail@plt+0x109c>
   1319c:	mov	fp, r4
   131a0:	subs	r4, r4, #1
   131a4:	bcs	1311c <__assert_fail@plt+0xd90>
   131a8:	ldr	r6, [sp, #16]
   131ac:	ldr	ip, [r9]
   131b0:	mov	r5, r2
   131b4:	cmp	fp, ip
   131b8:	lslne	r6, fp, #2
   131bc:	beq	13364 <__assert_fail@plt+0xfd8>
   131c0:	ldr	r0, [r5, r6]
   131c4:	ldr	r2, [r0, #16]
   131c8:	cmp	r2, sl
   131cc:	beq	133d4 <__assert_fail@plt+0x1048>
   131d0:	ldr	r3, [sp, #4]
   131d4:	cmp	r3, #0
   131d8:	bne	13298 <__assert_fail@plt+0xf0c>
   131dc:	ldr	r2, [r8, #84]	; 0x54
   131e0:	mov	r1, r8
   131e4:	blx	r2
   131e8:	cmp	r0, #0
   131ec:	beq	13298 <__assert_fail@plt+0xf0c>
   131f0:	ldr	r3, [sp]
   131f4:	ldr	r2, [r3, #16]
   131f8:	ldr	r1, [r9, #4]
   131fc:	ldr	r3, [sp, #12]
   13200:	ldr	r0, [r1, r6]
   13204:	ldr	r1, [r0, #8]
   13208:	cmp	r1, r3
   1320c:	cmpne	r2, #0
   13210:	bgt	132a4 <__assert_fail@plt+0xf18>
   13214:	ldr	r3, [sp, #8]
   13218:	cmp	r3, #0
   1321c:	strne	fp, [r3]
   13220:	add	sp, sp, #28
   13224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13228:	ldr	r2, [sp, #16]
   1322c:	ldr	r2, [r2, #40]	; 0x28
   13230:	tst	r2, #32
   13234:	beq	1326c <__assert_fail@plt+0xee0>
   13238:	ldr	fp, [sl, #28]
   1323c:	ldr	r2, [sp, #12]
   13240:	cmp	fp, r2
   13244:	bhi	1326c <__assert_fail@plt+0xee0>
   13248:	ldr	r1, [sp, #20]
   1324c:	ldr	r0, [sl, #36]	; 0x24
   13250:	str	r3, [sp, #4]
   13254:	bl	47334 <warn@@Base+0x5b64>
   13258:	ldr	r2, [sp, #12]
   1325c:	ldr	r3, [sp, #4]
   13260:	add	r0, r0, fp
   13264:	cmp	r0, r2
   13268:	bhi	130d4 <__assert_fail@plt+0xd48>
   1326c:	mov	r0, r3
   13270:	mov	r1, r8
   13274:	ldr	r3, [r8, #84]	; 0x54
   13278:	blx	r3
   1327c:	subs	r3, r0, #0
   13280:	str	r3, [sp, #4]
   13284:	bne	13440 <__assert_fail@plt+0x10b4>
   13288:	ldr	r5, [r9, #4]
   1328c:	b	130e8 <__assert_fail@plt+0xd5c>
   13290:	ldr	r0, [r5]
   13294:	b	13024 <__assert_fail@plt+0xc98>
   13298:	mov	r0, #0
   1329c:	add	sp, sp, #28
   132a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132a4:	ldr	r3, [sp]
   132a8:	ldr	r1, [r3, #12]
   132ac:	cmp	r1, #0
   132b0:	beq	13214 <__assert_fail@plt+0xe88>
   132b4:	ldr	ip, [r1]
   132b8:	ldr	r3, [sp, #12]
   132bc:	ldr	ip, [ip, #4]
   132c0:	cmp	ip, r3
   132c4:	bhi	13214 <__assert_fail@plt+0xe88>
   132c8:	sub	r2, r2, #-1073741823	; 0xc0000001
   132cc:	ldr	lr, [r1, r2, lsl #2]
   132d0:	add	ip, r1, r2, lsl #2
   132d4:	ldr	r2, [lr, #4]
   132d8:	cmp	r2, r3
   132dc:	bcc	13214 <__assert_fail@plt+0xe88>
   132e0:	ldr	r2, [r0, #12]
   132e4:	tst	r2, #2097152	; 0x200000
   132e8:	bne	13214 <__assert_fail@plt+0xe88>
   132ec:	ldr	r4, [sp, #12]
   132f0:	cmp	r1, ip
   132f4:	bhi	13214 <__assert_fail@plt+0xe88>
   132f8:	sub	lr, ip, r1
   132fc:	asr	lr, lr, #2
   13300:	add	lr, lr, lr, lsr #31
   13304:	asr	lr, lr, #1
   13308:	ldr	r3, [r1, lr, lsl #2]
   1330c:	add	lr, r1, lr, lsl #2
   13310:	ldr	r3, [r3, #4]
   13314:	cmp	r3, r4
   13318:	beq	13464 <__assert_fail@plt+0x10d8>
   1331c:	movls	r2, lr
   13320:	movls	lr, ip
   13324:	bhi	13350 <__assert_fail@plt+0xfc4>
   13328:	b	13520 <__assert_fail@plt+0x1194>
   1332c:	add	r3, r3, r3, lsr #31
   13330:	asr	r3, r3, #1
   13334:	ldr	ip, [r1, r3, lsl #2]
   13338:	add	r2, r1, r3, lsl #2
   1333c:	ldr	r3, [ip, #4]
   13340:	cmp	r3, r4
   13344:	beq	1346c <__assert_fail@plt+0x10e0>
   13348:	bls	13520 <__assert_fail@plt+0x1194>
   1334c:	mov	lr, r2
   13350:	sub	r3, lr, r1
   13354:	cmp	r1, lr
   13358:	asr	r3, r3, #2
   1335c:	bls	1332c <__assert_fail@plt+0xfa0>
   13360:	b	13214 <__assert_fail@plt+0xe88>
   13364:	add	fp, r7, #1
   13368:	cmp	fp, ip
   1336c:	bge	1345c <__assert_fail@plt+0x10d0>
   13370:	ldr	r3, [sp, #20]
   13374:	mov	r2, r5
   13378:	and	r4, r3, #1
   1337c:	ldr	r3, [r2, fp, lsl #2]
   13380:	mov	r1, r8
   13384:	mov	r0, r3
   13388:	ldr	r3, [r3, #16]
   1338c:	lsl	r5, fp, #2
   13390:	cmp	r3, sl
   13394:	movne	r3, r4
   13398:	orreq	r3, r4, #1
   1339c:	cmp	r3, #0
   133a0:	beq	133b8 <__assert_fail@plt+0x102c>
   133a4:	ldr	r3, [r8, #84]	; 0x54
   133a8:	blx	r3
   133ac:	cmp	r0, #0
   133b0:	bne	13434 <__assert_fail@plt+0x10a8>
   133b4:	ldr	r2, [r9, #4]
   133b8:	ldr	r3, [r9]
   133bc:	add	fp, fp, #1
   133c0:	cmp	r3, fp
   133c4:	bgt	1337c <__assert_fail@plt+0xff0>
   133c8:	mov	r5, r2
   133cc:	mov	fp, r7
   133d0:	b	131c0 <__assert_fail@plt+0xe34>
   133d4:	ldr	r2, [r8, #84]	; 0x54
   133d8:	mov	r1, r8
   133dc:	blx	r2
   133e0:	cmp	r0, #0
   133e4:	beq	13298 <__assert_fail@plt+0xf0c>
   133e8:	ldr	r2, [r9, #4]
   133ec:	ldr	r3, [sp, #4]
   133f0:	cmp	r3, #0
   133f4:	ldr	r0, [r2, r6]
   133f8:	bne	13214 <__assert_fail@plt+0xe88>
   133fc:	b	131f0 <__assert_fail@plt+0xe64>
   13400:	mov	r0, r3
   13404:	mov	r1, r8
   13408:	ldr	r3, [r8, #84]	; 0x54
   1340c:	blx	r3
   13410:	cmp	r0, #0
   13414:	beq	13554 <__assert_fail@plt+0x11c8>
   13418:	ldr	r2, [r9, #4]
   1341c:	mov	fp, r7
   13420:	ldr	r0, [r2, r6]
   13424:	b	13214 <__assert_fail@plt+0xe88>
   13428:	ldr	r6, [sp, #16]
   1342c:	mov	r5, r2
   13430:	b	131b4 <__assert_fail@plt+0xe28>
   13434:	mov	r6, r5
   13438:	ldr	r5, [r9, #4]
   1343c:	b	131c0 <__assert_fail@plt+0xe34>
   13440:	ldr	r3, [sp]
   13444:	mov	fp, r7
   13448:	ldr	r2, [r3, #16]
   1344c:	b	131f8 <__assert_fail@plt+0xe6c>
   13450:	mov	r3, r0
   13454:	mov	r4, r7
   13458:	b	130c4 <__assert_fail@plt+0xd38>
   1345c:	mov	fp, r7
   13460:	b	131c0 <__assert_fail@plt+0xe34>
   13464:	mov	r2, lr
   13468:	mov	lr, ip
   1346c:	sub	ip, r2, #4
   13470:	cmp	r1, ip
   13474:	bhi	134bc <__assert_fail@plt+0x1130>
   13478:	ldr	r4, [r2, #-4]
   1347c:	ldr	r3, [sp, #12]
   13480:	ldr	r4, [r4, #4]
   13484:	cmp	r3, r4
   13488:	bne	134bc <__assert_fail@plt+0x1130>
   1348c:	sub	r1, ip, r1
   13490:	bic	r1, r1, #3
   13494:	sub	r1, ip, r1
   13498:	mov	r4, r3
   1349c:	b	134b0 <__assert_fail@plt+0x1124>
   134a0:	ldr	r3, [ip, #-4]!
   134a4:	ldr	r3, [r3, #4]
   134a8:	cmp	r3, r4
   134ac:	bne	134bc <__assert_fail@plt+0x1130>
   134b0:	cmp	r1, ip
   134b4:	mov	r2, ip
   134b8:	bne	134a0 <__assert_fail@plt+0x1114>
   134bc:	cmp	r2, lr
   134c0:	bhi	13214 <__assert_fail@plt+0xe88>
   134c4:	ldr	r1, [r2]
   134c8:	ldr	r3, [sp, #12]
   134cc:	ldr	ip, [r1, #4]
   134d0:	cmp	r3, ip
   134d4:	bne	13214 <__assert_fail@plt+0xe88>
   134d8:	ldr	r4, [pc, #136]	; 13568 <__assert_fail@plt+0x11dc>
   134dc:	add	r2, r2, #4
   134e0:	ldr	ip, [sp, #12]
   134e4:	b	134f8 <__assert_fail@plt+0x116c>
   134e8:	ldr	r1, [r2], #4
   134ec:	ldr	r3, [r1, #4]
   134f0:	cmp	r3, ip
   134f4:	bne	13214 <__assert_fail@plt+0xe88>
   134f8:	ldr	r3, [r1]
   134fc:	cmp	r3, #0
   13500:	beq	13514 <__assert_fail@plt+0x1188>
   13504:	ldr	r1, [r3]
   13508:	ldr	r3, [r1, #16]
   1350c:	cmp	r3, r4
   13510:	bne	1353c <__assert_fail@plt+0x11b0>
   13514:	cmp	lr, r2
   13518:	bcs	134e8 <__assert_fail@plt+0x115c>
   1351c:	b	13214 <__assert_fail@plt+0xe88>
   13520:	ldr	r3, [r2, #4]
   13524:	ldr	r3, [r3, #4]
   13528:	cmp	r3, r4
   1352c:	bhi	13214 <__assert_fail@plt+0xe88>
   13530:	add	r1, r2, #4
   13534:	mov	ip, lr
   13538:	b	132f0 <__assert_fail@plt+0xf64>
   1353c:	ldr	r3, [sp, #8]
   13540:	cmp	r3, #0
   13544:	moveq	r0, r1
   13548:	strne	fp, [r3]
   1354c:	movne	r0, r1
   13550:	b	13220 <__assert_fail@plt+0xe94>
   13554:	mov	r3, #1
   13558:	ldr	r5, [r9, #4]
   1355c:	str	r3, [sp, #4]
   13560:	b	130e8 <__assert_fail@plt+0xd5c>
   13564:	andeq	r7, r6, r0, asr #8
   13568:	andeq	r7, r6, r0, ror #5
   1356c:	push	{r4, lr}
   13570:	mov	r2, #0
   13574:	mov	r4, r0
   13578:	bl	12eec <__assert_fail@plt+0xb60>
   1357c:	cmp	r0, #0
   13580:	popeq	{r4, pc}
   13584:	ldr	r2, [r0, #16]
   13588:	ldr	r3, [r0, #8]
   1358c:	ldr	r0, [r2, #28]
   13590:	add	r0, r0, r3
   13594:	sub	r0, r0, r4
   13598:	clz	r0, r0
   1359c:	lsr	r0, r0, #5
   135a0:	pop	{r4, pc}
   135a4:	push	{r4, lr}
   135a8:	mov	r5, r1
   135ac:	mov	r4, r0
   135b0:	mov	r2, #5
   135b4:	ldr	r1, [pc, #284]	; 136d8 <__assert_fail@plt+0x134c>
   135b8:	mov	r0, #0
   135bc:	bl	11ea0 <dcgettext@plt>
   135c0:	ldr	r6, [pc, #276]	; 136dc <__assert_fail@plt+0x1350>
   135c4:	ldr	r2, [r6]
   135c8:	mov	r1, r0
   135cc:	mov	r0, r4
   135d0:	bl	120b0 <fprintf@plt>
   135d4:	mov	r2, #5
   135d8:	ldr	r1, [pc, #256]	; 136e0 <__assert_fail@plt+0x1354>
   135dc:	mov	r0, #0
   135e0:	bl	11ea0 <dcgettext@plt>
   135e4:	mov	r1, r0
   135e8:	mov	r0, r4
   135ec:	bl	120b0 <fprintf@plt>
   135f0:	mov	r2, #5
   135f4:	ldr	r1, [pc, #232]	; 136e4 <__assert_fail@plt+0x1358>
   135f8:	mov	r0, #0
   135fc:	bl	11ea0 <dcgettext@plt>
   13600:	mov	r1, r0
   13604:	mov	r0, r4
   13608:	bl	120b0 <fprintf@plt>
   1360c:	mov	r2, #5
   13610:	ldr	r1, [pc, #208]	; 136e8 <__assert_fail@plt+0x135c>
   13614:	mov	r0, #0
   13618:	bl	11ea0 <dcgettext@plt>
   1361c:	mov	r1, r0
   13620:	mov	r0, r4
   13624:	bl	120b0 <fprintf@plt>
   13628:	cmp	r5, #2
   1362c:	bne	13638 <__assert_fail@plt+0x12ac>
   13630:	mov	r0, r5
   13634:	bl	12050 <exit@plt>
   13638:	mov	r2, #5
   1363c:	ldr	r1, [pc, #168]	; 136ec <__assert_fail@plt+0x1360>
   13640:	mov	r0, #0
   13644:	bl	11ea0 <dcgettext@plt>
   13648:	mov	r1, r0
   1364c:	mov	r0, r4
   13650:	bl	120b0 <fprintf@plt>
   13654:	mov	r2, #5
   13658:	ldr	r1, [pc, #144]	; 136f0 <__assert_fail@plt+0x1364>
   1365c:	mov	r0, #0
   13660:	bl	11ea0 <dcgettext@plt>
   13664:	mov	r1, r0
   13668:	mov	r0, r4
   1366c:	bl	120b0 <fprintf@plt>
   13670:	mov	r2, #5
   13674:	ldr	r1, [pc, #120]	; 136f4 <__assert_fail@plt+0x1368>
   13678:	mov	r0, #0
   1367c:	bl	11ea0 <dcgettext@plt>
   13680:	mov	r1, r0
   13684:	mov	r0, r4
   13688:	bl	120b0 <fprintf@plt>
   1368c:	mov	r1, r4
   13690:	ldr	r0, [r6]
   13694:	bl	407c8 <__assert_fail@plt+0x2e43c>
   13698:	mov	r1, r4
   1369c:	ldr	r0, [r6]
   136a0:	bl	40868 <__assert_fail@plt+0x2e4dc>
   136a4:	mov	r0, r4
   136a8:	bl	11ff0 <disassembler_usage@plt>
   136ac:	cmp	r5, #0
   136b0:	bne	13630 <__assert_fail@plt+0x12a4>
   136b4:	mov	r2, #5
   136b8:	ldr	r1, [pc, #56]	; 136f8 <__assert_fail@plt+0x136c>
   136bc:	mov	r0, r5
   136c0:	bl	11ea0 <dcgettext@plt>
   136c4:	ldr	r2, [pc, #48]	; 136fc <__assert_fail@plt+0x1370>
   136c8:	mov	r1, r0
   136cc:	mov	r0, r4
   136d0:	bl	120b0 <fprintf@plt>
   136d4:	b	13630 <__assert_fail@plt+0x12a4>
   136d8:	andeq	r7, r4, r4, ror #18
   136dc:	ldrdeq	r9, [r6], -ip
   136e0:	andeq	r7, r4, r8, lsl #19
   136e4:			; <UNDEFINED> instruction: 0x000479b8
   136e8:	strdeq	r7, [r4], -r0
   136ec:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   136f0:	andeq	r8, r4, r0, lsr #2
   136f4:			; <UNDEFINED> instruction: 0x000488bc
   136f8:	ldrdeq	r8, [r4], -r0
   136fc:	andeq	r8, r4, r4, ror #19
   13700:	push	{r4, r5, lr}
   13704:	sub	sp, sp, #20
   13708:	ldr	r4, [pc, #40]	; 13738 <__assert_fail@plt+0x13ac>
   1370c:	stmib	sp, {r1, r2}
   13710:	mov	r5, #0
   13714:	add	r2, sp, #4
   13718:	ldr	r1, [pc, #28]	; 1373c <__assert_fail@plt+0x13b0>
   1371c:	str	r5, [sp, #12]
   13720:	bl	122f0 <bfd_map_over_sections@plt>
   13724:	ldr	r0, [r4, #8]
   13728:	bl	11e10 <free@plt>
   1372c:	str	r5, [r4, #8]
   13730:	add	sp, sp, #20
   13734:	pop	{r4, r5, pc}
   13738:	andeq	r7, r6, r0, asr #8
   1373c:	muleq	r1, r8, r3
   13740:	ldr	ip, [pc, #328]	; 13890 <__assert_fail@plt+0x1504>
   13744:	push	{r4, r5, r6, r7, r8, lr}
   13748:	mov	r3, #0
   1374c:	ldr	r4, [ip, #12]
   13750:	sub	sp, sp, #8
   13754:	cmp	r4, r3
   13758:	mov	r5, r2
   1375c:	mov	r7, r1
   13760:	ldr	r8, [r2, #4]
   13764:	str	r3, [sp, #4]
   13768:	mov	r6, r0
   1376c:	beq	1377c <__assert_fail@plt+0x13f0>
   13770:	ldrb	r4, [r8]
   13774:	cmp	r4, r3
   13778:	bne	13834 <__assert_fail@plt+0x14a8>
   1377c:	ldr	r2, [pc, #272]	; 13894 <__assert_fail@plt+0x1508>
   13780:	ldr	r3, [r5, #12]
   13784:	tst	r2, r3
   13788:	movne	r6, #0
   1378c:	beq	137ec <__assert_fail@plt+0x1460>
   13790:	ldr	r3, [pc, #256]	; 13898 <__assert_fail@plt+0x150c>
   13794:	ldr	r2, [r5, #16]
   13798:	cmp	r2, r3
   1379c:	moveq	r3, #1
   137a0:	streq	r3, [sp, #4]
   137a4:	cmp	r7, #0
   137a8:	beq	1384c <__assert_fail@plt+0x14c0>
   137ac:	mov	r2, r8
   137b0:	ldr	r3, [r7]
   137b4:	ldr	r1, [pc, #224]	; 1389c <__assert_fail@plt+0x1510>
   137b8:	ldr	r0, [r7, #4]
   137bc:	blx	r3
   137c0:	cmp	r6, #0
   137c4:	beq	137d4 <__assert_fail@plt+0x1448>
   137c8:	ldrb	r3, [r6]
   137cc:	cmp	r3, #0
   137d0:	bne	1380c <__assert_fail@plt+0x1480>
   137d4:	cmp	r4, #0
   137d8:	beq	137e4 <__assert_fail@plt+0x1458>
   137dc:	mov	r0, r4
   137e0:	bl	11e10 <free@plt>
   137e4:	add	sp, sp, #8
   137e8:	pop	{r4, r5, r6, r7, r8, pc}
   137ec:	ldr	r3, [r6, #4]
   137f0:	mov	r0, r6
   137f4:	add	r2, sp, #4
   137f8:	ldr	r3, [r3, #280]	; 0x118
   137fc:	mov	r1, r5
   13800:	blx	r3
   13804:	mov	r6, r0
   13808:	b	13790 <__assert_fail@plt+0x1404>
   1380c:	ldr	r0, [sp, #4]
   13810:	ldr	r3, [pc, #136]	; 138a0 <__assert_fail@plt+0x1514>
   13814:	cmp	r0, #0
   13818:	ldr	r1, [pc, #132]	; 138a4 <__assert_fail@plt+0x1518>
   1381c:	mov	r2, r6
   13820:	moveq	r1, r3
   13824:	ldr	r0, [r7, #4]
   13828:	ldr	r3, [r7]
   1382c:	blx	r3
   13830:	b	137d4 <__assert_fail@plt+0x1448>
   13834:	mov	r1, r8
   13838:	mov	r2, #3
   1383c:	bl	121b8 <bfd_demangle@plt>
   13840:	subs	r4, r0, #0
   13844:	movne	r8, r4
   13848:	b	1377c <__assert_fail@plt+0x13f0>
   1384c:	mov	r1, r8
   13850:	ldr	r0, [pc, #68]	; 1389c <__assert_fail@plt+0x1510>
   13854:	bl	11dbc <printf@plt>
   13858:	cmp	r6, #0
   1385c:	beq	137d4 <__assert_fail@plt+0x1448>
   13860:	ldrb	r3, [r6]
   13864:	cmp	r3, #0
   13868:	beq	137d4 <__assert_fail@plt+0x1448>
   1386c:	ldr	r0, [sp, #4]
   13870:	ldr	r2, [pc, #44]	; 138a4 <__assert_fail@plt+0x1518>
   13874:	ldr	r3, [pc, #36]	; 138a0 <__assert_fail@plt+0x1514>
   13878:	cmp	r0, #0
   1387c:	mov	r1, r6
   13880:	movne	r0, r2
   13884:	moveq	r0, r3
   13888:	bl	11dbc <printf@plt>
   1388c:	b	137d4 <__assert_fail@plt+0x1448>
   13890:	andeq	r7, r6, r0, asr #8
   13894:	eoreq	r0, r0, r0, lsl #2
   13898:	andeq	r7, r6, r8, lsr r2
   1389c:	andeq	ip, r4, r4, ror r3
   138a0:	andeq	r8, r4, r0, lsl sl
   138a4:	andeq	r8, r4, ip, lsl #20
   138a8:	push	{r4, r5, r6, r7, r8, lr}
   138ac:	sub	sp, sp, #8
   138b0:	mov	r6, r2
   138b4:	mov	r5, r0
   138b8:	mov	r7, r1
   138bc:	bl	11f84 <bfd_get_section_by_name@plt>
   138c0:	subs	r4, r0, #0
   138c4:	beq	13944 <__assert_fail@plt+0x15b8>
   138c8:	add	r2, sp, #4
   138cc:	mov	r1, r4
   138d0:	mov	r0, r5
   138d4:	bl	11e4c <bfd_malloc_and_get_section@plt>
   138d8:	subs	r8, r0, #0
   138dc:	beq	138f8 <__assert_fail@plt+0x156c>
   138e0:	ldr	r3, [r4, #36]	; 0x24
   138e4:	ldr	r4, [sp, #4]
   138e8:	str	r3, [r6]
   138ec:	mov	r0, r4
   138f0:	add	sp, sp, #8
   138f4:	pop	{r4, r5, r6, r7, r8, pc}
   138f8:	mov	r2, #5
   138fc:	ldr	r1, [pc, #88]	; 1395c <__assert_fail@plt+0x15d0>
   13900:	bl	11ea0 <dcgettext@plt>
   13904:	ldr	r5, [r5]
   13908:	mov	r4, r0
   1390c:	bl	11f00 <bfd_get_error@plt>
   13910:	bl	12284 <bfd_errmsg@plt>
   13914:	mov	r2, r5
   13918:	mov	r1, r7
   1391c:	mov	r3, r0
   13920:	mov	r0, r4
   13924:	bl	406c8 <__assert_fail@plt+0x2e33c>
   13928:	ldr	r3, [pc, #48]	; 13960 <__assert_fail@plt+0x15d4>
   1392c:	mov	r2, #1
   13930:	ldr	r0, [sp, #4]
   13934:	mov	r4, r8
   13938:	str	r2, [r3, #16]
   1393c:	bl	11e10 <free@plt>
   13940:	b	138ec <__assert_fail@plt+0x1560>
   13944:	mov	r2, #5
   13948:	ldr	r1, [pc, #20]	; 13964 <__assert_fail@plt+0x15d8>
   1394c:	bl	11ea0 <dcgettext@plt>
   13950:	mov	r1, r7
   13954:	bl	11dbc <printf@plt>
   13958:	b	138ec <__assert_fail@plt+0x1560>
   1395c:	andeq	r8, r4, r0, lsr sl
   13960:	andeq	r7, r6, r0, asr #8
   13964:	andeq	r8, r4, r8, lsl sl
   13968:	ldr	r3, [r1, #8]
   1396c:	push	{r4, r5, lr}
   13970:	sub	sp, sp, #36	; 0x24
   13974:	mov	r5, r2
   13978:	mov	r4, r1
   1397c:	mov	r2, r0
   13980:	mov	r1, sp
   13984:	ldr	r0, [r3]
   13988:	bl	12230 <bfd_sprintf_vma@plt>
   1398c:	cmp	r5, #0
   13990:	moveq	r2, sp
   13994:	beq	139bc <__assert_fail@plt+0x1630>
   13998:	ldrb	r3, [sp]
   1399c:	mov	r2, sp
   139a0:	cmp	r3, #48	; 0x30
   139a4:	bne	139b4 <__assert_fail@plt+0x1628>
   139a8:	ldrb	r3, [r2, #1]!
   139ac:	cmp	r3, #48	; 0x30
   139b0:	beq	139a8 <__assert_fail@plt+0x161c>
   139b4:	cmp	r3, #0
   139b8:	subeq	r2, r2, #1
   139bc:	ldr	r3, [r4]
   139c0:	ldr	r0, [r4, #4]
   139c4:	ldr	r1, [pc, #8]	; 139d4 <__assert_fail@plt+0x1648>
   139c8:	blx	r3
   139cc:	add	sp, sp, #36	; 0x24
   139d0:	pop	{r4, r5, pc}
   139d4:	andeq	ip, r4, r4, ror r3
   139d8:	push	{r4, r5, r6, r7, r8, lr}
   139dc:	mov	r5, r2
   139e0:	ldr	r4, [sp, #24]
   139e4:	mov	r8, r0
   139e8:	mov	r7, r1
   139ec:	mov	r0, r3
   139f0:	mov	r1, r4
   139f4:	ldr	r2, [sp, #28]
   139f8:	mov	r6, r3
   139fc:	bl	13968 <__assert_fail@plt+0x15dc>
   13a00:	cmp	r5, #0
   13a04:	ldr	r3, [r4]
   13a08:	beq	13b04 <__assert_fail@plt+0x1778>
   13a0c:	ldr	r1, [pc, #396]	; 13ba0 <__assert_fail@plt+0x1814>
   13a10:	ldr	r0, [r4, #4]
   13a14:	blx	r3
   13a18:	mov	r1, r4
   13a1c:	mov	r2, r5
   13a20:	mov	r0, r8
   13a24:	bl	13740 <__assert_fail@plt+0x13b4>
   13a28:	ldr	ip, [r5, #16]
   13a2c:	ldr	r1, [r5, #8]
   13a30:	ldr	r3, [ip, #28]
   13a34:	add	r3, r3, r1
   13a38:	cmp	r3, r6
   13a3c:	beq	13aa8 <__assert_fail@plt+0x171c>
   13a40:	ldr	r1, [r8, #40]	; 0x28
   13a44:	ldr	r0, [pc, #344]	; 13ba4 <__assert_fail@plt+0x1818>
   13a48:	ldr	r8, [r4]
   13a4c:	lsr	r1, r1, #5
   13a50:	and	r1, r1, #66	; 0x42
   13a54:	cmp	r1, #0
   13a58:	sub	r2, ip, r0
   13a5c:	clz	r2, r2
   13a60:	lsr	r2, r2, #5
   13a64:	moveq	r2, #0
   13a68:	cmp	r2, #0
   13a6c:	ldr	r0, [r4, #4]
   13a70:	bne	13ab0 <__assert_fail@plt+0x1724>
   13a74:	cmp	r3, r6
   13a78:	bhi	13b58 <__assert_fail@plt+0x17cc>
   13a7c:	bcs	13ab0 <__assert_fail@plt+0x1724>
   13a80:	ldr	r1, [pc, #288]	; 13ba8 <__assert_fail@plt+0x181c>
   13a84:	blx	r8
   13a88:	ldr	r3, [r5, #16]
   13a8c:	ldr	r0, [r5, #8]
   13a90:	mov	r2, #1
   13a94:	ldr	r3, [r3, #28]
   13a98:	mov	r1, r4
   13a9c:	sub	r3, r6, r3
   13aa0:	sub	r0, r3, r0
   13aa4:	bl	13968 <__assert_fail@plt+0x15dc>
   13aa8:	ldr	r8, [r4]
   13aac:	ldr	r0, [r4, #4]
   13ab0:	ldr	r1, [pc, #244]	; 13bac <__assert_fail@plt+0x1820>
   13ab4:	blx	r8
   13ab8:	ldr	r3, [pc, #240]	; 13bb0 <__assert_fail@plt+0x1824>
   13abc:	ldr	r3, [r3, #20]
   13ac0:	cmp	r3, #0
   13ac4:	popeq	{r4, r5, r6, r7, r8, pc}
   13ac8:	mov	r2, #5
   13acc:	ldr	r1, [pc, #224]	; 13bb4 <__assert_fail@plt+0x1828>
   13ad0:	mov	r0, #0
   13ad4:	ldr	r5, [r4]
   13ad8:	ldr	r4, [r4, #4]
   13adc:	bl	11ea0 <dcgettext@plt>
   13ae0:	ldr	r3, [r7, #28]
   13ae4:	ldr	r2, [r7, #80]	; 0x50
   13ae8:	sub	r2, r2, r3
   13aec:	add	r2, r2, r6
   13af0:	mov	r3, r5
   13af4:	mov	r1, r0
   13af8:	mov	r0, r4
   13afc:	pop	{r4, r5, r6, r7, r8, lr}
   13b00:	bx	r3
   13b04:	ldr	r2, [r7]
   13b08:	ldr	r1, [pc, #168]	; 13bb8 <__assert_fail@plt+0x182c>
   13b0c:	ldr	r0, [r4, #4]
   13b10:	blx	r3
   13b14:	ldr	r5, [r7, #28]
   13b18:	ldr	r3, [r4]
   13b1c:	cmp	r6, r5
   13b20:	bcc	13b8c <__assert_fail@plt+0x1800>
   13b24:	ldr	r0, [r4, #4]
   13b28:	bls	13b4c <__assert_fail@plt+0x17c0>
   13b2c:	ldr	r1, [pc, #116]	; 13ba8 <__assert_fail@plt+0x181c>
   13b30:	blx	r3
   13b34:	sub	r0, r6, r5
   13b38:	mov	r2, #1
   13b3c:	mov	r1, r4
   13b40:	bl	13968 <__assert_fail@plt+0x15dc>
   13b44:	ldr	r3, [r4]
   13b48:	ldr	r0, [r4, #4]
   13b4c:	ldr	r1, [pc, #88]	; 13bac <__assert_fail@plt+0x1820>
   13b50:	blx	r3
   13b54:	b	13ab8 <__assert_fail@plt+0x172c>
   13b58:	ldr	r1, [pc, #92]	; 13bbc <__assert_fail@plt+0x1830>
   13b5c:	blx	r8
   13b60:	ldr	r1, [r5, #16]
   13b64:	ldr	r3, [r5, #8]
   13b68:	mov	r2, #1
   13b6c:	ldr	r0, [r1, #28]
   13b70:	mov	r1, r4
   13b74:	add	r0, r0, r3
   13b78:	sub	r0, r0, r6
   13b7c:	bl	13968 <__assert_fail@plt+0x15dc>
   13b80:	ldr	r8, [r4]
   13b84:	ldr	r0, [r4, #4]
   13b88:	b	13ab0 <__assert_fail@plt+0x1724>
   13b8c:	ldr	r1, [pc, #40]	; 13bbc <__assert_fail@plt+0x1830>
   13b90:	ldr	r0, [r4, #4]
   13b94:	blx	r3
   13b98:	sub	r0, r5, r6
   13b9c:	b	13b38 <__assert_fail@plt+0x17ac>
   13ba0:	andeq	r8, r4, r4, ror #20
   13ba4:	andeq	r7, r6, r8, lsr r2
   13ba8:	andeq	r8, r4, r0, ror #20
   13bac:	andeq	r8, r4, r8, lsl #20
   13bb0:	andeq	r7, r6, r0, asr #8
   13bb4:	andeq	r8, r4, r8, ror #20
   13bb8:	andeq	r8, r4, r4, asr sl
   13bbc:	andeq	r8, r4, ip, asr sl
   13bc0:	push	{r4, r5, r6, r7, r8, lr}
   13bc4:	mov	r4, r1
   13bc8:	ldr	r7, [pc, #248]	; 13cc8 <__assert_fail@plt+0x193c>
   13bcc:	sub	sp, sp, #8
   13bd0:	mov	r6, r0
   13bd4:	ldr	r3, [r7]
   13bd8:	mov	r8, r2
   13bdc:	cmp	r3, #0
   13be0:	ldr	r5, [r1, #8]
   13be4:	ble	13c58 <__assert_fail@plt+0x18cc>
   13be8:	ldr	r3, [r5, #24]
   13bec:	cmp	r3, #0
   13bf0:	beq	13c2c <__assert_fail@plt+0x18a0>
   13bf4:	ldr	r3, [r3]
   13bf8:	cmp	r3, #0
   13bfc:	beq	13c2c <__assert_fail@plt+0x18a0>
   13c00:	ldr	r2, [r3]
   13c04:	cmp	r2, #0
   13c08:	beq	13c2c <__assert_fail@plt+0x18a0>
   13c0c:	ldr	r1, [r2, #16]
   13c10:	ldr	r0, [pc, #180]	; 13ccc <__assert_fail@plt+0x1940>
   13c14:	ldr	r3, [r2, #8]
   13c18:	cmp	r1, r0
   13c1c:	ldr	r1, [r1, #28]
   13c20:	add	r6, r6, r3
   13c24:	add	r6, r6, r1
   13c28:	beq	13c40 <__assert_fail@plt+0x18b4>
   13c2c:	mov	r2, #0
   13c30:	mov	r1, r4
   13c34:	mov	r0, r6
   13c38:	bl	12eec <__assert_fail@plt+0xb60>
   13c3c:	mov	r2, r0
   13c40:	ldrd	r0, [r5]
   13c44:	mov	r3, r6
   13c48:	stm	sp, {r4, r8}
   13c4c:	bl	139d8 <__assert_fail@plt+0x164c>
   13c50:	add	sp, sp, #8
   13c54:	pop	{r4, r5, r6, r7, r8, pc}
   13c58:	ldr	r3, [r1]
   13c5c:	ldr	r0, [r4, #4]
   13c60:	ldr	r1, [pc, #104]	; 13cd0 <__assert_fail@plt+0x1944>
   13c64:	blx	r3
   13c68:	mov	r2, r8
   13c6c:	mov	r1, r4
   13c70:	mov	r0, r6
   13c74:	bl	13968 <__assert_fail@plt+0x15dc>
   13c78:	ldr	r3, [r7, #20]
   13c7c:	cmp	r3, #0
   13c80:	beq	13c50 <__assert_fail@plt+0x18c4>
   13c84:	mov	r2, #5
   13c88:	ldr	r1, [pc, #68]	; 13cd4 <__assert_fail@plt+0x1948>
   13c8c:	mov	r0, #0
   13c90:	ldr	r7, [r4]
   13c94:	ldr	r4, [r4, #4]
   13c98:	bl	11ea0 <dcgettext@plt>
   13c9c:	ldr	r3, [r5, #4]
   13ca0:	ldr	r2, [r3, #80]	; 0x50
   13ca4:	ldr	r3, [r3, #28]
   13ca8:	sub	r2, r2, r3
   13cac:	add	r2, r2, r6
   13cb0:	mov	r3, r7
   13cb4:	mov	r1, r0
   13cb8:	mov	r0, r4
   13cbc:	add	sp, sp, #8
   13cc0:	pop	{r4, r5, r6, r7, r8, lr}
   13cc4:	bx	r3
   13cc8:	andeq	r7, r6, r0, asr #8
   13ccc:	andeq	r7, r6, r8, lsr r2
   13cd0:	andeq	r8, r4, r0, lsl #21
   13cd4:	andeq	r8, r4, r8, ror #20
   13cd8:	ldr	r3, [pc, #12]	; 13cec <__assert_fail@plt+0x1960>
   13cdc:	ldr	r2, [r3, #24]
   13ce0:	clz	r2, r2
   13ce4:	lsr	r2, r2, #5
   13ce8:	b	13bc0 <__assert_fail@plt+0x1834>
   13cec:	andeq	r7, r6, r0, asr #8
   13cf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cf4:	mov	r7, r2
   13cf8:	ldr	r2, [pc, #1176]	; 14198 <__assert_fail@plt+0x1e0c>
   13cfc:	sub	sp, sp, #100	; 0x64
   13d00:	mov	r6, r3
   13d04:	str	r1, [sp, #20]
   13d08:	ldr	r1, [r2, #28]
   13d0c:	mov	sl, r0
   13d10:	cmp	r1, #0
   13d14:	beq	1410c <__assert_fail@plt+0x1d80>
   13d18:	ldr	r2, [pc, #1148]	; 1419c <__assert_fail@plt+0x1e10>
   13d1c:	mov	r3, #12
   13d20:	str	r2, [sp]
   13d24:	ldr	r0, [pc, #1140]	; 141a0 <__assert_fail@plt+0x1e14>
   13d28:	bl	11dbc <printf@plt>
   13d2c:	cmp	r6, #0
   13d30:	beq	14104 <__assert_fail@plt+0x1d78>
   13d34:	ldr	r4, [r7]
   13d38:	cmp	r4, #0
   13d3c:	beq	14104 <__assert_fail@plt+0x1d78>
   13d40:	mov	r3, #0
   13d44:	str	r3, [sp, #44]	; 0x2c
   13d48:	str	r3, [sp, #36]	; 0x24
   13d4c:	str	r3, [sp, #32]
   13d50:	str	r3, [sp, #28]
   13d54:	b	13dc0 <__assert_fail@plt+0x1a34>
   13d58:	ldr	r3, [r4]
   13d5c:	mov	r1, #0
   13d60:	mov	r0, sl
   13d64:	ldr	r2, [r3]
   13d68:	bl	13740 <__assert_fail@plt+0x13b4>
   13d6c:	ldr	r4, [r4, #8]
   13d70:	cmp	r4, #0
   13d74:	beq	13d9c <__assert_fail@plt+0x1a10>
   13d78:	ldrlt	r0, [pc, #1060]	; 141a4 <__assert_fail@plt+0x1e18>
   13d7c:	ldrge	r0, [pc, #1060]	; 141a8 <__assert_fail@plt+0x1e1c>
   13d80:	rsblt	r4, r4, #0
   13d84:	bl	11dbc <printf@plt>
   13d88:	ldr	r3, [pc, #1052]	; 141ac <__assert_fail@plt+0x1e20>
   13d8c:	mov	r2, r4
   13d90:	mov	r0, sl
   13d94:	ldr	r1, [r3]
   13d98:	bl	122d8 <bfd_fprintf_vma@plt>
   13d9c:	cmp	r5, #0
   13da0:	bne	13ffc <__assert_fail@plt+0x1c70>
   13da4:	mov	r0, #10
   13da8:	bl	1211c <putchar@plt>
   13dac:	subs	r6, r6, #1
   13db0:	beq	13ec0 <__assert_fail@plt+0x1b34>
   13db4:	ldr	r4, [fp, #4]
   13db8:	cmp	r4, #0
   13dbc:	beq	13ec0 <__assert_fail@plt+0x1b34>
   13dc0:	ldr	r3, [pc, #1000]	; 141b0 <__assert_fail@plt+0x1e24>
   13dc4:	ldr	r2, [r4, #4]
   13dc8:	ldr	r3, [r3]
   13dcc:	cmn	r3, #1
   13dd0:	beq	13ddc <__assert_fail@plt+0x1a50>
   13dd4:	cmp	r3, r2
   13dd8:	bhi	13eb0 <__assert_fail@plt+0x1b24>
   13ddc:	ldr	r3, [pc, #972]	; 141b0 <__assert_fail@plt+0x1e24>
   13de0:	ldr	r3, [r3, #4]
   13de4:	cmn	r3, #1
   13de8:	beq	13df4 <__assert_fail@plt+0x1a68>
   13dec:	cmp	r3, r2
   13df0:	bcc	13eb0 <__assert_fail@plt+0x1b24>
   13df4:	ldr	r3, [pc, #924]	; 14198 <__assert_fail@plt+0x1e0c>
   13df8:	ldr	r1, [sp, #20]
   13dfc:	ldr	r3, [r3, #32]
   13e00:	cmp	r3, #0
   13e04:	cmpne	r1, #0
   13e08:	bne	13ef0 <__assert_fail@plt+0x1b64>
   13e0c:	ldr	r8, [r4]
   13e10:	cmp	r8, #0
   13e14:	moveq	r9, r8
   13e18:	beq	13e34 <__assert_fail@plt+0x1aa8>
   13e1c:	ldr	r9, [r8]
   13e20:	cmp	r9, #0
   13e24:	moveq	r8, r9
   13e28:	ldrne	r3, [r9, #16]
   13e2c:	ldrne	r8, [r9, #4]
   13e30:	ldrne	r9, [r3]
   13e34:	ldr	r3, [pc, #880]	; 141ac <__assert_fail@plt+0x1e20>
   13e38:	mov	r0, sl
   13e3c:	ldr	r1, [r3]
   13e40:	bl	122d8 <bfd_fprintf_vma@plt>
   13e44:	ldr	r5, [r4, #12]
   13e48:	add	r2, r7, #4
   13e4c:	cmp	r5, #0
   13e50:	beq	140c4 <__assert_fail@plt+0x1d38>
   13e54:	ldr	r3, [r5, #32]
   13e58:	cmp	r3, #0
   13e5c:	beq	140d8 <__assert_fail@plt+0x1d4c>
   13e60:	ldr	r1, [sl, #4]
   13e64:	ldr	r1, [r1, #4]
   13e68:	cmp	r1, #5
   13e6c:	beq	1401c <__assert_fail@plt+0x1c90>
   13e70:	mov	r5, #0
   13e74:	mov	r1, r3
   13e78:	ldr	r0, [pc, #820]	; 141b4 <__assert_fail@plt+0x1e28>
   13e7c:	str	r2, [sp, #24]
   13e80:	bl	11dbc <printf@plt>
   13e84:	ldr	r2, [sp, #24]
   13e88:	mov	fp, r7
   13e8c:	mov	r7, r2
   13e90:	cmp	r8, #0
   13e94:	bne	13d58 <__assert_fail@plt+0x19cc>
   13e98:	cmp	r9, #0
   13e9c:	ldr	r1, [pc, #788]	; 141b8 <__assert_fail@plt+0x1e2c>
   13ea0:	ldr	r0, [pc, #788]	; 141bc <__assert_fail@plt+0x1e30>
   13ea4:	movne	r1, r9
   13ea8:	bl	11dbc <printf@plt>
   13eac:	b	13d6c <__assert_fail@plt+0x19e0>
   13eb0:	subs	r6, r6, #1
   13eb4:	mov	fp, r7
   13eb8:	add	r7, r7, #4
   13ebc:	bne	13db4 <__assert_fail@plt+0x1a28>
   13ec0:	ldr	r3, [sp, #28]
   13ec4:	cmp	r3, #0
   13ec8:	beq	13ed4 <__assert_fail@plt+0x1b48>
   13ecc:	mov	r0, r3
   13ed0:	bl	11e10 <free@plt>
   13ed4:	ldr	r3, [sp, #32]
   13ed8:	cmp	r3, #0
   13edc:	beq	14104 <__assert_fail@plt+0x1d78>
   13ee0:	mov	r0, r3
   13ee4:	add	sp, sp, #100	; 0x64
   13ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13eec:	b	11e10 <free@plt>
   13ef0:	ldr	r1, [sl, #4]
   13ef4:	add	lr, sp, #60	; 0x3c
   13ef8:	add	ip, sp, #56	; 0x38
   13efc:	add	r0, sp, #52	; 0x34
   13f00:	add	r5, sp, #64	; 0x40
   13f04:	stm	sp, {r0, ip, lr}
   13f08:	mov	r3, r2
   13f0c:	str	r5, [sp, #12]
   13f10:	ldr	r5, [r1, #296]	; 0x128
   13f14:	ldr	r1, [pc, #636]	; 14198 <__assert_fail@plt+0x1e0c>
   13f18:	ldr	r2, [sp, #20]
   13f1c:	mov	r0, sl
   13f20:	ldr	r1, [r1, #36]	; 0x24
   13f24:	blx	r5
   13f28:	cmp	r0, #0
   13f2c:	beq	13ff4 <__assert_fail@plt+0x1c68>
   13f30:	ldr	r5, [sp, #56]	; 0x38
   13f34:	cmp	r5, #0
   13f38:	beq	13f7c <__assert_fail@plt+0x1bf0>
   13f3c:	ldr	r3, [sp, #32]
   13f40:	cmp	r3, #0
   13f44:	beq	14168 <__assert_fail@plt+0x1ddc>
   13f48:	mov	r1, r3
   13f4c:	mov	r0, r5
   13f50:	bl	11d98 <strcmp@plt>
   13f54:	cmp	r0, #0
   13f58:	beq	13f7c <__assert_fail@plt+0x1bf0>
   13f5c:	mov	r1, r5
   13f60:	ldr	r0, [pc, #600]	; 141c0 <__assert_fail@plt+0x1e34>
   13f64:	bl	11dbc <printf@plt>
   13f68:	ldr	r0, [sp, #32]
   13f6c:	bl	11e10 <free@plt>
   13f70:	ldr	r0, [sp, #56]	; 0x38
   13f74:	bl	11f60 <xstrdup@plt>
   13f78:	str	r0, [sp, #32]
   13f7c:	ldr	r2, [sp, #60]	; 0x3c
   13f80:	cmp	r2, #0
   13f84:	beq	13ff4 <__assert_fail@plt+0x1c68>
   13f88:	ldr	r3, [sp, #36]	; 0x24
   13f8c:	ldr	r0, [sp, #52]	; 0x34
   13f90:	cmp	r2, r3
   13f94:	beq	1413c <__assert_fail@plt+0x1db0>
   13f98:	ldr	r3, [sp, #64]	; 0x40
   13f9c:	cmp	r0, #0
   13fa0:	ldr	r1, [pc, #540]	; 141c4 <__assert_fail@plt+0x1e38>
   13fa4:	movne	r1, r0
   13fa8:	cmp	r3, #0
   13fac:	beq	14130 <__assert_fail@plt+0x1da4>
   13fb0:	ldr	r0, [pc, #528]	; 141c8 <__assert_fail@plt+0x1e3c>
   13fb4:	bl	11dbc <printf@plt>
   13fb8:	ldr	r3, [sp, #60]	; 0x3c
   13fbc:	ldr	r0, [sp, #28]
   13fc0:	str	r3, [sp, #36]	; 0x24
   13fc4:	ldr	r3, [sp, #64]	; 0x40
   13fc8:	cmp	r0, #0
   13fcc:	str	r3, [sp, #44]	; 0x2c
   13fd0:	beq	13fd8 <__assert_fail@plt+0x1c4c>
   13fd4:	bl	11e10 <free@plt>
   13fd8:	ldr	r3, [sp, #52]	; 0x34
   13fdc:	cmp	r3, #0
   13fe0:	str	r3, [sp, #28]
   13fe4:	beq	13ff4 <__assert_fail@plt+0x1c68>
   13fe8:	ldr	r0, [sp, #28]
   13fec:	bl	11f60 <xstrdup@plt>
   13ff0:	str	r0, [sp, #28]
   13ff4:	ldr	r2, [r4, #4]
   13ff8:	b	13e0c <__assert_fail@plt+0x1a80>
   13ffc:	ldr	r0, [pc, #420]	; 141a8 <__assert_fail@plt+0x1e1c>
   14000:	bl	11dbc <printf@plt>
   14004:	ldr	r3, [pc, #416]	; 141ac <__assert_fail@plt+0x1e20>
   14008:	mov	r2, r5
   1400c:	mov	r0, sl
   14010:	ldr	r1, [r3]
   14014:	bl	122d8 <bfd_fprintf_vma@plt>
   14018:	b	13da4 <__assert_fail@plt+0x1a18>
   1401c:	ldr	r1, [sl, #160]	; 0xa0
   14020:	cmp	r6, #1
   14024:	ldrh	r5, [r1, #38]	; 0x26
   14028:	sub	r1, r5, #43	; 0x2b
   1402c:	clz	r1, r1
   14030:	lsr	r1, r1, #5
   14034:	movle	r1, #0
   14038:	cmp	r1, #0
   1403c:	beq	13e70 <__assert_fail@plt+0x1ae4>
   14040:	mov	r0, r3
   14044:	ldr	r1, [pc, #384]	; 141cc <__assert_fail@plt+0x1e40>
   14048:	str	r2, [sp, #40]	; 0x28
   1404c:	str	r3, [sp, #24]
   14050:	bl	11d98 <strcmp@plt>
   14054:	ldr	r3, [sp, #24]
   14058:	ldr	r2, [sp, #40]	; 0x28
   1405c:	subs	r5, r0, #0
   14060:	bne	13e70 <__assert_fail@plt+0x1ae4>
   14064:	ldr	fp, [r7, #4]
   14068:	cmp	fp, #0
   1406c:	beq	13e70 <__assert_fail@plt+0x1ae4>
   14070:	ldr	r1, [fp, #12]
   14074:	cmp	r1, #0
   14078:	moveq	r5, r1
   1407c:	beq	13e74 <__assert_fail@plt+0x1ae8>
   14080:	ldr	ip, [r4, #4]
   14084:	ldr	r0, [fp, #4]
   14088:	cmp	ip, r0
   1408c:	bne	13e74 <__assert_fail@plt+0x1ae8>
   14090:	ldr	r0, [r1, #32]
   14094:	ldr	r1, [pc, #308]	; 141d0 <__assert_fail@plt+0x1e44>
   14098:	bl	11d98 <strcmp@plt>
   1409c:	ldr	r3, [sp, #24]
   140a0:	ldr	r2, [sp, #40]	; 0x28
   140a4:	cmp	r0, #0
   140a8:	bne	13e74 <__assert_fail@plt+0x1ae8>
   140ac:	add	r1, r7, #8
   140b0:	ldr	r5, [fp, #8]
   140b4:	mov	r7, r2
   140b8:	ldr	r3, [pc, #276]	; 141d4 <__assert_fail@plt+0x1e48>
   140bc:	mov	r2, r1
   140c0:	b	13e74 <__assert_fail@plt+0x1ae8>
   140c4:	ldr	r0, [pc, #268]	; 141d8 <__assert_fail@plt+0x1e4c>
   140c8:	mov	fp, r7
   140cc:	mov	r7, r2
   140d0:	bl	11dbc <printf@plt>
   140d4:	b	13e90 <__assert_fail@plt+0x1b04>
   140d8:	ldr	r1, [r5]
   140dc:	ldr	r0, [pc, #248]	; 141dc <__assert_fail@plt+0x1e50>
   140e0:	str	r2, [sp, #40]	; 0x28
   140e4:	str	r3, [sp, #24]
   140e8:	bl	11dbc <printf@plt>
   140ec:	ldr	r3, [sp, #24]
   140f0:	ldr	r2, [sp, #40]	; 0x28
   140f4:	mov	fp, r7
   140f8:	mov	r5, r3
   140fc:	mov	r7, r2
   14100:	b	13e90 <__assert_fail@plt+0x1b04>
   14104:	add	sp, sp, #100	; 0x64
   14108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1410c:	add	r1, sp, #64	; 0x40
   14110:	mvn	r2, #0
   14114:	bl	12230 <bfd_sprintf_vma@plt>
   14118:	add	r0, sp, #64	; 0x40
   1411c:	bl	12074 <strlen@plt>
   14120:	ldr	r3, [pc, #112]	; 14198 <__assert_fail@plt+0x1e0c>
   14124:	sub	r1, r0, #7
   14128:	str	r1, [r3, #28]
   1412c:	b	13d18 <__assert_fail@plt+0x198c>
   14130:	ldr	r0, [pc, #168]	; 141e0 <__assert_fail@plt+0x1e54>
   14134:	bl	11dbc <printf@plt>
   14138:	b	13fb8 <__assert_fail@plt+0x1c2c>
   1413c:	ldr	r3, [sp, #28]
   14140:	cmp	r3, #0
   14144:	cmpne	r0, #0
   14148:	bne	14178 <__assert_fail@plt+0x1dec>
   1414c:	ldr	r3, [sp, #64]	; 0x40
   14150:	ldr	r2, [sp, #44]	; 0x2c
   14154:	cmp	r3, r2
   14158:	beq	13ff4 <__assert_fail@plt+0x1c68>
   1415c:	ldr	r0, [sp, #52]	; 0x34
   14160:	ldr	r2, [sp, #60]	; 0x3c
   14164:	b	13f9c <__assert_fail@plt+0x1c10>
   14168:	mov	r1, r5
   1416c:	ldr	r0, [pc, #76]	; 141c0 <__assert_fail@plt+0x1e34>
   14170:	bl	11dbc <printf@plt>
   14174:	b	13f70 <__assert_fail@plt+0x1be4>
   14178:	mov	r1, r3
   1417c:	bl	11e28 <filename_cmp@plt>
   14180:	cmp	r0, #0
   14184:	beq	1414c <__assert_fail@plt+0x1dc0>
   14188:	ldr	r3, [sp, #64]	; 0x40
   1418c:	ldr	r0, [sp, #52]	; 0x34
   14190:	ldr	r2, [sp, #60]	; 0x3c
   14194:	b	13f9c <__assert_fail@plt+0x1c10>
   14198:	andeq	r7, r6, r0, asr #8
   1419c:	andeq	r9, r4, r4, lsr #5
   141a0:	andeq	r8, r4, r4, lsr #21
   141a4:	andeq	r8, r4, ip, asr sl
   141a8:	andeq	r8, r4, r0, ror #20
   141ac:	andeq	r7, r6, r0, lsr r4
   141b0:	andeq	r6, r6, r0, asr #4
   141b4:	andeq	r8, r4, r4, lsl fp
   141b8:	muleq	r4, r8, sl
   141bc:	andeq	r8, r4, ip, lsr #22
   141c0:	andeq	r8, r4, r4, lsr fp
   141c4:	andeq	r8, r4, r4, lsl #21
   141c8:	andeq	r8, r4, r0, asr #21
   141cc:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   141d0:	andeq	r8, r4, r8, lsl #22
   141d4:	andeq	r8, r4, r8, lsl #21
   141d8:	andeq	r8, r4, r4, ror #21
   141dc:	andeq	r8, r4, r0, lsr #22
   141e0:	andeq	r8, r4, r8, asr #21
   141e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141e8:	ldr	r4, [r0]
   141ec:	ldr	r5, [r1]
   141f0:	ldr	r0, [r4, #16]
   141f4:	ldr	r1, [r5, #16]
   141f8:	ldr	lr, [r4, #8]
   141fc:	ldr	r2, [r0, #28]
   14200:	ldr	r3, [r1, #28]
   14204:	ldr	ip, [r5, #8]
   14208:	add	r2, r2, lr
   1420c:	add	r3, r3, ip
   14210:	cmp	r2, r3
   14214:	bhi	142dc <__assert_fail@plt+0x1f50>
   14218:	bcc	142b8 <__assert_fail@plt+0x1f2c>
   1421c:	cmp	r0, r1
   14220:	bhi	142dc <__assert_fail@plt+0x1f50>
   14224:	bcc	142b8 <__assert_fail@plt+0x1f2c>
   14228:	ldr	r6, [r4, #4]
   1422c:	ldr	r1, [pc, #560]	; 14464 <__assert_fail@plt+0x20d8>
   14230:	mov	r0, r6
   14234:	bl	11d5c <strstr@plt>
   14238:	ldr	r7, [r5, #4]
   1423c:	ldr	r1, [pc, #544]	; 14464 <__assert_fail@plt+0x20d8>
   14240:	mov	r9, r0
   14244:	mov	r0, r7
   14248:	bl	11d5c <strstr@plt>
   1424c:	cmp	r9, #0
   14250:	mov	r8, r0
   14254:	beq	1431c <__assert_fail@plt+0x1f90>
   14258:	cmp	r0, #0
   1425c:	beq	14360 <__assert_fail@plt+0x1fd4>
   14260:	ldr	r8, [r4, #12]
   14264:	tst	r8, #16384	; 0x4000
   14268:	bne	142f4 <__assert_fail@plt+0x1f68>
   1426c:	mov	r0, r6
   14270:	bl	12074 <strlen@plt>
   14274:	add	r0, r6, r0
   14278:	ldrb	r3, [r0, #-2]
   1427c:	cmp	r3, #46	; 0x2e
   14280:	beq	142e4 <__assert_fail@plt+0x1f58>
   14284:	ldr	r9, [r5, #12]
   14288:	tst	r9, #16384	; 0x4000
   1428c:	bne	142b8 <__assert_fail@plt+0x1f2c>
   14290:	mov	r0, r7
   14294:	bl	12074 <strlen@plt>
   14298:	add	r0, r7, r0
   1429c:	ldrb	r3, [r0, #-2]
   142a0:	cmp	r3, #46	; 0x2e
   142a4:	bne	14300 <__assert_fail@plt+0x1f74>
   142a8:	ldrb	r3, [r0, #-1]
   142ac:	cmp	r3, #97	; 0x61
   142b0:	cmpne	r3, #111	; 0x6f
   142b4:	bne	14300 <__assert_fail@plt+0x1f74>
   142b8:	mvn	r0, #0
   142bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   142c0:	ldr	r1, [pc, #416]	; 14468 <__assert_fail@plt+0x20dc>
   142c4:	mov	r0, r7
   142c8:	bl	11d5c <strstr@plt>
   142cc:	cmp	r0, #0
   142d0:	bne	14334 <__assert_fail@plt+0x1fa8>
   142d4:	cmp	r9, #0
   142d8:	beq	14260 <__assert_fail@plt+0x1ed4>
   142dc:	mov	r0, #1
   142e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   142e4:	ldrb	r3, [r0, #-1]
   142e8:	cmp	r3, #97	; 0x61
   142ec:	cmpne	r3, #111	; 0x6f
   142f0:	bne	14284 <__assert_fail@plt+0x1ef8>
   142f4:	ldr	r9, [r5, #12]
   142f8:	tst	r9, #16384	; 0x4000
   142fc:	beq	14388 <__assert_fail@plt+0x1ffc>
   14300:	eor	r3, r8, r9
   14304:	tst	r3, #4
   14308:	beq	14340 <__assert_fail@plt+0x1fb4>
   1430c:	tst	r8, #4
   14310:	mvneq	r0, #0
   14314:	movne	r0, #1
   14318:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1431c:	ldr	r1, [pc, #324]	; 14468 <__assert_fail@plt+0x20dc>
   14320:	mov	r0, r6
   14324:	bl	11d5c <strstr@plt>
   14328:	cmp	r8, #0
   1432c:	mov	r9, r0
   14330:	beq	142c0 <__assert_fail@plt+0x1f34>
   14334:	cmp	r9, #0
   14338:	bne	14260 <__assert_fail@plt+0x1ed4>
   1433c:	b	142b8 <__assert_fail@plt+0x1f2c>
   14340:	tst	r3, #8
   14344:	bne	14378 <__assert_fail@plt+0x1fec>
   14348:	tst	r3, #1
   1434c:	beq	143b4 <__assert_fail@plt+0x2028>
   14350:	tst	r8, #1
   14354:	mvneq	r0, #0
   14358:	movne	r0, #1
   1435c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14360:	ldr	r1, [pc, #256]	; 14468 <__assert_fail@plt+0x20dc>
   14364:	mov	r0, r7
   14368:	bl	11d5c <strstr@plt>
   1436c:	cmp	r0, #0
   14370:	bne	14260 <__assert_fail@plt+0x1ed4>
   14374:	b	142dc <__assert_fail@plt+0x1f50>
   14378:	tst	r8, #8
   1437c:	moveq	r0, #1
   14380:	mvnne	r0, #0
   14384:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14388:	mov	r0, r7
   1438c:	bl	12074 <strlen@plt>
   14390:	add	r0, r7, r0
   14394:	ldrb	r3, [r0, #-2]
   14398:	cmp	r3, #46	; 0x2e
   1439c:	bne	142dc <__assert_fail@plt+0x1f50>
   143a0:	ldrb	r3, [r0, #-1]
   143a4:	cmp	r3, #111	; 0x6f
   143a8:	cmpne	r3, #97	; 0x61
   143ac:	beq	14300 <__assert_fail@plt+0x1f74>
   143b0:	b	142dc <__assert_fail@plt+0x1f50>
   143b4:	tst	r3, #2
   143b8:	beq	143cc <__assert_fail@plt+0x2040>
   143bc:	tst	r8, #2
   143c0:	moveq	r0, #1
   143c4:	mvnne	r0, #0
   143c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   143cc:	ldr	r3, [r4]
   143d0:	ldr	r3, [r3, #4]
   143d4:	ldr	r3, [r3, #4]
   143d8:	cmp	r3, #5
   143dc:	beq	14408 <__assert_fail@plt+0x207c>
   143e0:	ldrb	r3, [r6]
   143e4:	ldrb	r2, [r7]
   143e8:	cmp	r3, #46	; 0x2e
   143ec:	beq	1444c <__assert_fail@plt+0x20c0>
   143f0:	cmp	r2, #46	; 0x2e
   143f4:	beq	142b8 <__assert_fail@plt+0x1f2c>
   143f8:	mov	r1, r7
   143fc:	mov	r0, r6
   14400:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14404:	b	11d98 <strcmp@plt>
   14408:	ldr	r3, [r5]
   1440c:	ldr	r3, [r3, #4]
   14410:	ldr	r3, [r3, #4]
   14414:	cmp	r3, #5
   14418:	bne	143e0 <__assert_fail@plt+0x2054>
   1441c:	ldr	r3, [pc, #72]	; 1446c <__assert_fail@plt+0x20e0>
   14420:	ands	r8, r8, r3
   14424:	and	r9, r9, r3
   14428:	bne	14458 <__assert_fail@plt+0x20cc>
   1442c:	cmp	r9, #0
   14430:	ldr	r9, [r4, #28]
   14434:	bne	1443c <__assert_fail@plt+0x20b0>
   14438:	ldr	r8, [r5, #28]
   1443c:	cmp	r8, r9
   14440:	beq	143e0 <__assert_fail@plt+0x2054>
   14444:	bcs	142dc <__assert_fail@plt+0x1f50>
   14448:	b	142b8 <__assert_fail@plt+0x1f2c>
   1444c:	cmp	r2, #46	; 0x2e
   14450:	bne	142dc <__assert_fail@plt+0x1f50>
   14454:	b	143f8 <__assert_fail@plt+0x206c>
   14458:	cmp	r9, #0
   1445c:	beq	14438 <__assert_fail@plt+0x20ac>
   14460:	b	143e0 <__assert_fail@plt+0x2054>
   14464:	andeq	r8, r4, ip, lsr fp
   14468:	andeq	r8, r4, ip, asr #22
   1446c:	eoreq	r0, r0, r0, lsl #2
   14470:	push	{r1, r2, r3}
   14474:	push	{r4, r5, r6, lr}
   14478:	sub	sp, sp, #12
   1447c:	mov	r4, r0
   14480:	add	r6, sp, #32
   14484:	b	144a4 <__assert_fail@plt+0x2118>
   14488:	ldr	r3, [r4, #8]
   1448c:	ldr	r0, [r4]
   14490:	add	r1, r1, r3
   14494:	lsl	r1, r1, #1
   14498:	str	r1, [r4, #8]
   1449c:	bl	11ed0 <xrealloc@plt>
   144a0:	str	r0, [r4]
   144a4:	ldm	r4, {r0, r3, r5}
   144a8:	ldr	r2, [sp, #28]
   144ac:	str	r6, [sp, #4]
   144b0:	sub	r5, r5, r3
   144b4:	add	r0, r0, r3
   144b8:	mov	r1, r5
   144bc:	mov	r3, r6
   144c0:	bl	1226c <vsnprintf@plt>
   144c4:	cmp	r5, r0
   144c8:	mov	r1, r0
   144cc:	bls	14488 <__assert_fail@plt+0x20fc>
   144d0:	ldr	r3, [r4, #4]
   144d4:	add	r1, r3, r0
   144d8:	str	r1, [r4, #4]
   144dc:	add	sp, sp, #12
   144e0:	pop	{r4, r5, r6, lr}
   144e4:	add	sp, sp, #12
   144e8:	bx	lr
   144ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144f0:	sub	sp, sp, #20
   144f4:	mov	fp, r1
   144f8:	str	r0, [sp, #4]
   144fc:	mov	r0, #40	; 0x28
   14500:	mov	r5, r2
   14504:	bl	11f3c <xmalloc@plt>
   14508:	mov	r1, #0
   1450c:	mov	r4, r0
   14510:	mov	r0, fp
   14514:	bl	11fb4 <open64@plt>
   14518:	subs	r6, r0, #0
   1451c:	blt	1457c <__assert_fail@plt+0x21f0>
   14520:	mov	r2, r5
   14524:	mov	r1, r6
   14528:	mov	r0, #3
   1452c:	bl	11f18 <__fxstat64@plt>
   14530:	cmp	r0, #0
   14534:	blt	14574 <__assert_fail@plt+0x21e8>
   14538:	ldr	r7, [r5, #48]	; 0x30
   1453c:	str	r7, [r4, #16]
   14540:	mov	r0, r7
   14544:	bl	11ffc <malloc@plt>
   14548:	subs	r5, r0, #0
   1454c:	beq	1456c <__assert_fail@plt+0x21e0>
   14550:	mov	r2, r7
   14554:	mov	r1, r5
   14558:	mov	r0, r6
   1455c:	bl	11dd4 <read@plt>
   14560:	ldr	r3, [r4, #16]
   14564:	cmp	r0, r3
   14568:	beq	14594 <__assert_fail@plt+0x2208>
   1456c:	mov	r0, r5
   14570:	bl	11e10 <free@plt>
   14574:	mov	r0, r6
   14578:	bl	12350 <close@plt>
   1457c:	mov	r0, r4
   14580:	bl	11e10 <free@plt>
   14584:	mov	r4, #0
   14588:	mov	r0, r4
   1458c:	add	sp, sp, #20
   14590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14594:	mov	r0, r6
   14598:	bl	12350 <close@plt>
   1459c:	ldr	r2, [r4, #16]
   145a0:	str	r5, [r4, #12]
   145a4:	add	r3, r5, r2
   145a8:	cmp	r5, r3
   145ac:	movcs	sl, #0
   145b0:	movcs	r9, sl
   145b4:	bcs	1469c <__assert_fail@plt+0x2310>
   145b8:	mov	r6, #0
   145bc:	str	r4, [sp, #8]
   145c0:	str	fp, [sp, #12]
   145c4:	mov	r9, r6
   145c8:	str	r5, [sp]
   145cc:	mov	r8, #45	; 0x2d
   145d0:	mov	r4, r2
   145d4:	mov	fp, r6
   145d8:	mov	sl, r3
   145dc:	b	14664 <__assert_fail@plt+0x22d8>
   145e0:	cmp	r1, #13
   145e4:	bne	14658 <__assert_fail@plt+0x22cc>
   145e8:	cmp	r7, sl
   145ec:	bcs	145fc <__assert_fail@plt+0x2270>
   145f0:	ldrb	r1, [r5, #1]
   145f4:	cmp	r1, #10
   145f8:	beq	14688 <__assert_fail@plt+0x22fc>
   145fc:	cmp	r9, #0
   14600:	add	r5, fp, #1
   14604:	beq	14610 <__assert_fail@plt+0x2284>
   14608:	cmp	r5, r6
   1460c:	bls	14648 <__assert_fail@plt+0x22bc>
   14610:	sub	r8, r8, #5
   14614:	cmp	r8, #1
   14618:	movlt	r8, #1
   1461c:	mov	r1, r8
   14620:	mov	r0, r4
   14624:	bl	47334 <warn@@Base+0x5b64>
   14628:	add	r0, r0, #1
   1462c:	cmp	r5, r0
   14630:	movcc	r6, r0
   14634:	movcs	r6, r5
   14638:	mov	r0, r9
   1463c:	lsl	r1, r6, #2
   14640:	bl	11ed0 <xrealloc@plt>
   14644:	mov	r9, r0
   14648:	ldr	r3, [sp]
   1464c:	str	r7, [sp]
   14650:	str	r3, [r9, fp, lsl #2]
   14654:	mov	fp, r5
   14658:	cmp	sl, r7
   1465c:	mov	r5, r7
   14660:	bls	14690 <__assert_fail@plt+0x2304>
   14664:	mov	r7, r5
   14668:	ldrb	r1, [r7], #1
   1466c:	cmp	r1, #10
   14670:	bne	145e0 <__assert_fail@plt+0x2254>
   14674:	cmp	r7, sl
   14678:	bcs	145fc <__assert_fail@plt+0x2270>
   1467c:	ldrb	r1, [r5, #1]
   14680:	cmp	r1, #13
   14684:	bne	145fc <__assert_fail@plt+0x2270>
   14688:	add	r7, r5, #2
   1468c:	b	145fc <__assert_fail@plt+0x2270>
   14690:	mov	sl, fp
   14694:	ldr	r4, [sp, #8]
   14698:	ldr	fp, [sp, #12]
   1469c:	ldr	r2, [pc, #60]	; 146e0 <__assert_fail@plt+0x2354>
   146a0:	ldr	r1, [sp, #4]
   146a4:	mov	r3, #0
   146a8:	ldr	r0, [r2, #40]	; 0x28
   146ac:	str	r1, [r4, #4]
   146b0:	mov	r1, #1
   146b4:	str	r0, [r4]
   146b8:	str	sl, [r4, #24]
   146bc:	mov	r0, r4
   146c0:	str	r9, [r4, #20]
   146c4:	str	fp, [r4, #8]
   146c8:	str	r4, [r2, #40]	; 0x28
   146cc:	str	r3, [r4, #28]
   146d0:	str	r3, [r4, #32]
   146d4:	str	r1, [r4, #36]	; 0x24
   146d8:	add	sp, sp, #20
   146dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146e0:	andeq	r7, r6, r0, asr #8
   146e4:	ldr	r3, [r0, #40]	; 0x28
   146e8:	ldr	r2, [pc, #344]	; 14848 <__assert_fail@plt+0x24bc>
   146ec:	push	{r4, r5, r6, lr}
   146f0:	lsr	r3, r3, #5
   146f4:	tst	r3, #66	; 0x42
   146f8:	moveq	r3, #1
   146fc:	movne	r3, #0
   14700:	str	r3, [r2, #44]	; 0x2c
   14704:	mov	r4, r0
   14708:	bl	12374 <bfd_arch_bits_per_address@plt>
   1470c:	ldr	r3, [r4, #4]
   14710:	ldr	r2, [pc, #308]	; 1484c <__assert_fail@plt+0x24c0>
   14714:	ldr	r3, [r3, #8]
   14718:	cmp	r3, #0
   1471c:	lsr	r0, r0, #3
   14720:	str	r0, [r2]
   14724:	bne	147b4 <__assert_fail@plt+0x2428>
   14728:	ldr	r3, [pc, #288]	; 14850 <__assert_fail@plt+0x24c4>
   1472c:	ldr	r2, [pc, #288]	; 14854 <__assert_fail@plt+0x24c8>
   14730:	mov	r0, r4
   14734:	str	r2, [r3]
   14738:	bl	120a4 <bfd_get_arch@plt>
   1473c:	cmp	r0, #67	; 0x43
   14740:	beq	147d8 <__assert_fail@plt+0x244c>
   14744:	bls	1479c <__assert_fail@plt+0x2410>
   14748:	cmp	r0, #70	; 0x46
   1474c:	beq	147fc <__assert_fail@plt+0x2470>
   14750:	cmp	r0, #83	; 0x53
   14754:	bne	1475c <__assert_fail@plt+0x23d0>
   14758:	bl	280a8 <__assert_fail@plt+0x15d1c>
   1475c:	ldr	r1, [r4]
   14760:	mov	r0, r4
   14764:	bl	3040c <__assert_fail@plt+0x1e080>
   14768:	mov	r2, #0
   1476c:	ldr	r1, [pc, #228]	; 14858 <__assert_fail@plt+0x24cc>
   14770:	mov	r5, r0
   14774:	mov	r0, r4
   14778:	bl	122f0 <bfd_map_over_sections@plt>
   1477c:	cmp	r5, #0
   14780:	beq	14794 <__assert_fail@plt+0x2408>
   14784:	mov	r0, r5
   14788:	mov	r2, #0
   1478c:	ldr	r1, [pc, #196]	; 14858 <__assert_fail@plt+0x24cc>
   14790:	bl	122f0 <bfd_map_over_sections@plt>
   14794:	pop	{r4, r5, r6, lr}
   14798:	b	306ec <__assert_fail@plt+0x1e360>
   1479c:	cmp	r0, #8
   147a0:	beq	14804 <__assert_fail@plt+0x2478>
   147a4:	cmp	r0, #11
   147a8:	bne	1475c <__assert_fail@plt+0x23d0>
   147ac:	bl	28068 <__assert_fail@plt+0x15cdc>
   147b0:	b	1475c <__assert_fail@plt+0x23d0>
   147b4:	cmp	r3, #1
   147b8:	bne	147e0 <__assert_fail@plt+0x2454>
   147bc:	ldr	r3, [pc, #140]	; 14850 <__assert_fail@plt+0x24c4>
   147c0:	ldr	r2, [pc, #148]	; 1485c <__assert_fail@plt+0x24d0>
   147c4:	mov	r0, r4
   147c8:	str	r2, [r3]
   147cc:	bl	120a4 <bfd_get_arch@plt>
   147d0:	cmp	r0, #67	; 0x43
   147d4:	bne	14744 <__assert_fail@plt+0x23b8>
   147d8:	bl	280e8 <__assert_fail@plt+0x15d5c>
   147dc:	b	1475c <__assert_fail@plt+0x23d0>
   147e0:	ldr	r1, [pc, #120]	; 14860 <__assert_fail@plt+0x24d4>
   147e4:	mov	r2, #5
   147e8:	mov	r0, #0
   147ec:	bl	11ea0 <dcgettext@plt>
   147f0:	ldr	r1, [r4]
   147f4:	pop	{r4, r5, r6, lr}
   147f8:	b	417d0 <warn@@Base>
   147fc:	bl	280c8 <__assert_fail@plt+0x15d3c>
   14800:	b	1475c <__assert_fail@plt+0x23d0>
   14804:	mov	r0, r4
   14808:	bl	12140 <bfd_get_mach@plt>
   1480c:	cmp	r0, #17
   14810:	bhi	14830 <__assert_fail@plt+0x24a4>
   14814:	cmp	r0, #16
   14818:	bcs	14840 <__assert_fail@plt+0x24b4>
   1481c:	sub	r0, r0, #8
   14820:	cmp	r0, #1
   14824:	bls	14840 <__assert_fail@plt+0x24b4>
   14828:	bl	28048 <__assert_fail@plt+0x15cbc>
   1482c:	b	1475c <__assert_fail@plt+0x23d0>
   14830:	cmp	r0, #136	; 0x88
   14834:	beq	14840 <__assert_fail@plt+0x24b4>
   14838:	cmp	r0, #144	; 0x90
   1483c:	bne	14828 <__assert_fail@plt+0x249c>
   14840:	bl	28088 <__assert_fail@plt+0x15cfc>
   14844:	b	1475c <__assert_fail@plt+0x23d0>
   14848:	andeq	r7, r6, r0, asr #8
   1484c:	andeq	r9, r6, ip, lsr #27
   14850:	andeq	r9, r6, r0, ror #27
   14854:	andeq	r1, r4, r8, lsr #6
   14858:	andeq	r8, r1, r0, ror r6
   1485c:	muleq	r4, r0, r9
   14860:	andeq	r8, r4, ip, asr fp
   14864:	ldr	r3, [r1, #20]
   14868:	tst	r3, #8192	; 0x2000
   1486c:	bxne	lr
   14870:	ldr	ip, [pc, #36]	; 1489c <__assert_fail@plt+0x2510>
   14874:	ldr	r0, [r2]
   14878:	ldr	r3, [r1, #28]
   1487c:	ldr	r2, [ip, #48]	; 0x30
   14880:	cmp	r0, #0
   14884:	add	r3, r3, r2
   14888:	str	r3, [r1, #28]
   1488c:	ldrne	r3, [r1, #32]
   14890:	addne	r2, r3, r2
   14894:	strne	r2, [r1, #32]
   14898:	bx	lr
   1489c:	andeq	r7, r6, r0, asr #8
   148a0:	ldr	r3, [pc, #76]	; 148f4 <__assert_fail@plt+0x2568>
   148a4:	push	{r4, r5, r6, lr}
   148a8:	ldr	r4, [r3, #52]	; 0x34
   148ac:	cmp	r4, #0
   148b0:	beq	148ec <__assert_fail@plt+0x2560>
   148b4:	ldr	r5, [r0]
   148b8:	mov	r1, r5
   148bc:	ldr	r0, [r4]
   148c0:	bl	11d98 <strcmp@plt>
   148c4:	cmp	r0, #0
   148c8:	beq	148e0 <__assert_fail@plt+0x2554>
   148cc:	ldr	r4, [r4, #8]
   148d0:	cmp	r4, #0
   148d4:	bne	148b8 <__assert_fail@plt+0x252c>
   148d8:	mov	r0, r4
   148dc:	pop	{r4, r5, r6, pc}
   148e0:	mov	r0, #1
   148e4:	str	r0, [r4, #4]
   148e8:	pop	{r4, r5, r6, pc}
   148ec:	mov	r0, #1
   148f0:	pop	{r4, r5, r6, pc}
   148f4:	andeq	r7, r6, r0, asr #8
   148f8:	push	{r4, r5, r6, r7, lr}
   148fc:	mov	r4, r1
   14900:	sub	sp, sp, #12
   14904:	mov	r5, r2
   14908:	mov	r6, r0
   1490c:	bl	12044 <bfd_octets_per_byte@plt>
   14910:	ldr	r3, [r4, #20]
   14914:	tst	r3, #1048576	; 0x100000
   14918:	beq	14924 <__assert_fail@plt+0x2598>
   1491c:	add	sp, sp, #12
   14920:	pop	{r4, r5, r6, r7, pc}
   14924:	mov	r7, r0
   14928:	mov	r0, r4
   1492c:	ldr	r5, [r5]
   14930:	bl	148a0 <__assert_fail@plt+0x2514>
   14934:	cmp	r0, #0
   14938:	beq	1491c <__assert_fail@plt+0x2590>
   1493c:	mov	r1, r7
   14940:	ldr	r0, [r4, #36]	; 0x24
   14944:	bl	47334 <warn@@Base+0x5b64>
   14948:	ldr	r7, [pc, #1128]	; 14db8 <__assert_fail@plt+0x2a2c>
   1494c:	ldr	r3, [r4]
   14950:	ldr	r1, [r4, #8]
   14954:	mov	r2, r5
   14958:	str	r0, [sp]
   1495c:	ldr	r0, [pc, #1112]	; 14dbc <__assert_fail@plt+0x2a30>
   14960:	bl	11dbc <printf@plt>
   14964:	ldr	r1, [r7]
   14968:	ldr	r2, [r4, #28]
   1496c:	mov	r0, r6
   14970:	bl	122d8 <bfd_fprintf_vma@plt>
   14974:	ldr	r0, [pc, #1092]	; 14dc0 <__assert_fail@plt+0x2a34>
   14978:	bl	11dbc <printf@plt>
   1497c:	ldr	r1, [r7]
   14980:	ldr	r2, [r4, #32]
   14984:	mov	r0, r6
   14988:	bl	122d8 <bfd_fprintf_vma@plt>
   1498c:	ldr	r2, [r4, #64]	; 0x40
   14990:	ldr	r1, [r4, #80]	; 0x50
   14994:	ldr	r0, [pc, #1064]	; 14dc4 <__assert_fail@plt+0x2a38>
   14998:	bl	11dbc <printf@plt>
   1499c:	ldr	r3, [pc, #1060]	; 14dc8 <__assert_fail@plt+0x2a3c>
   149a0:	ldr	r3, [r3, #56]	; 0x38
   149a4:	cmp	r3, #0
   149a8:	beq	14ca8 <__assert_fail@plt+0x291c>
   149ac:	ldr	r0, [pc, #1036]	; 14dc0 <__assert_fail@plt+0x2a34>
   149b0:	bl	11dbc <printf@plt>
   149b4:	ldr	r3, [r4, #20]
   149b8:	tst	r3, #256	; 0x100
   149bc:	ldreq	r5, [pc, #1032]	; 14dcc <__assert_fail@plt+0x2a40>
   149c0:	bne	14c8c <__assert_fail@plt+0x2900>
   149c4:	tst	r3, #1
   149c8:	bne	14c70 <__assert_fail@plt+0x28e4>
   149cc:	tst	r3, #128	; 0x80
   149d0:	bne	14c54 <__assert_fail@plt+0x28c8>
   149d4:	tst	r3, #2
   149d8:	bne	14c38 <__assert_fail@plt+0x28ac>
   149dc:	tst	r3, #4
   149e0:	bne	14c1c <__assert_fail@plt+0x2890>
   149e4:	tst	r3, #8
   149e8:	bne	14c00 <__assert_fail@plt+0x2874>
   149ec:	tst	r3, #16
   149f0:	bne	14be4 <__assert_fail@plt+0x2858>
   149f4:	tst	r3, #32
   149f8:	bne	14bc8 <__assert_fail@plt+0x283c>
   149fc:	tst	r3, #64	; 0x40
   14a00:	bne	14bac <__assert_fail@plt+0x2820>
   14a04:	tst	r3, #8192	; 0x2000
   14a08:	bne	14b90 <__assert_fail@plt+0x2804>
   14a0c:	tst	r3, #512	; 0x200
   14a10:	bne	14b74 <__assert_fail@plt+0x27e8>
   14a14:	tst	r3, #32768	; 0x8000
   14a18:	bne	14b58 <__assert_fail@plt+0x27cc>
   14a1c:	tst	r3, #65536	; 0x10000
   14a20:	bne	14b40 <__assert_fail@plt+0x27b4>
   14a24:	mov	r0, r6
   14a28:	bl	120a4 <bfd_get_arch@plt>
   14a2c:	ldr	r3, [r4, #20]
   14a30:	cmp	r0, #38	; 0x26
   14a34:	beq	14af8 <__assert_fail@plt+0x276c>
   14a38:	tst	r3, #4194304	; 0x400000
   14a3c:	bne	14b24 <__assert_fail@plt+0x2798>
   14a40:	ldr	r2, [r6, #4]
   14a44:	ldr	r2, [r2, #4]
   14a48:	cmp	r2, #2
   14a4c:	beq	14acc <__assert_fail@plt+0x2740>
   14a50:	cmp	r2, #5
   14a54:	beq	14d54 <__assert_fail@plt+0x29c8>
   14a58:	tst	r3, #1024	; 0x400
   14a5c:	bne	14d10 <__assert_fail@plt+0x2984>
   14a60:	tst	r3, #33554432	; 0x2000000
   14a64:	bne	14cf8 <__assert_fail@plt+0x296c>
   14a68:	mov	r0, r6
   14a6c:	bl	120a4 <bfd_get_arch@plt>
   14a70:	ldr	r3, [r4, #20]
   14a74:	cmp	r0, #53	; 0x35
   14a78:	beq	14cd4 <__assert_fail@plt+0x2948>
   14a7c:	tst	r3, #131072	; 0x20000
   14a80:	beq	14abc <__assert_fail@plt+0x2730>
   14a84:	and	r3, r3, #786432	; 0xc0000
   14a88:	cmp	r3, #262144	; 0x40000
   14a8c:	beq	14d78 <__assert_fail@plt+0x29ec>
   14a90:	bls	14cc4 <__assert_fail@plt+0x2938>
   14a94:	cmp	r3, #524288	; 0x80000
   14a98:	bne	14cb4 <__assert_fail@plt+0x2928>
   14a9c:	ldr	r2, [pc, #812]	; 14dd0 <__assert_fail@plt+0x2a44>
   14aa0:	mov	r1, r5
   14aa4:	ldr	r0, [pc, #808]	; 14dd4 <__assert_fail@plt+0x2a48>
   14aa8:	bl	11dbc <printf@plt>
   14aac:	ldr	r3, [r6, #4]
   14ab0:	ldr	r3, [r3, #4]
   14ab4:	cmp	r3, #2
   14ab8:	beq	14d2c <__assert_fail@plt+0x29a0>
   14abc:	mov	r0, #10
   14ac0:	add	sp, sp, #12
   14ac4:	pop	{r4, r5, r6, r7, lr}
   14ac8:	b	1211c <putchar@plt>
   14acc:	tst	r3, #134217728	; 0x8000000
   14ad0:	bne	14d80 <__assert_fail@plt+0x29f4>
   14ad4:	tst	r3, #1073741824	; 0x40000000
   14ad8:	beq	14a58 <__assert_fail@plt+0x26cc>
   14adc:	mov	r1, r5
   14ae0:	ldr	r2, [pc, #752]	; 14dd8 <__assert_fail@plt+0x2a4c>
   14ae4:	ldr	r0, [pc, #744]	; 14dd4 <__assert_fail@plt+0x2a48>
   14ae8:	bl	11dbc <printf@plt>
   14aec:	ldr	r5, [pc, #744]	; 14ddc <__assert_fail@plt+0x2a50>
   14af0:	ldr	r3, [r4, #20]
   14af4:	b	14a58 <__assert_fail@plt+0x26cc>
   14af8:	tst	r3, #268435456	; 0x10000000
   14afc:	bne	14d9c <__assert_fail@plt+0x2a10>
   14b00:	tst	r3, #536870912	; 0x20000000
   14b04:	beq	14a38 <__assert_fail@plt+0x26ac>
   14b08:	mov	r1, r5
   14b0c:	ldr	r2, [pc, #716]	; 14de0 <__assert_fail@plt+0x2a54>
   14b10:	ldr	r0, [pc, #700]	; 14dd4 <__assert_fail@plt+0x2a48>
   14b14:	bl	11dbc <printf@plt>
   14b18:	ldr	r5, [pc, #700]	; 14ddc <__assert_fail@plt+0x2a50>
   14b1c:	ldr	r3, [r4, #20]
   14b20:	b	14a38 <__assert_fail@plt+0x26ac>
   14b24:	mov	r1, r5
   14b28:	ldr	r2, [pc, #692]	; 14de4 <__assert_fail@plt+0x2a58>
   14b2c:	ldr	r0, [pc, #672]	; 14dd4 <__assert_fail@plt+0x2a48>
   14b30:	bl	11dbc <printf@plt>
   14b34:	ldr	r5, [pc, #672]	; 14ddc <__assert_fail@plt+0x2a50>
   14b38:	ldr	r3, [r4, #20]
   14b3c:	b	14a40 <__assert_fail@plt+0x26b4>
   14b40:	mov	r1, r5
   14b44:	ldr	r2, [pc, #668]	; 14de8 <__assert_fail@plt+0x2a5c>
   14b48:	ldr	r0, [pc, #644]	; 14dd4 <__assert_fail@plt+0x2a48>
   14b4c:	bl	11dbc <printf@plt>
   14b50:	ldr	r5, [pc, #644]	; 14ddc <__assert_fail@plt+0x2a50>
   14b54:	b	14a24 <__assert_fail@plt+0x2698>
   14b58:	mov	r1, r5
   14b5c:	ldr	r2, [pc, #648]	; 14dec <__assert_fail@plt+0x2a60>
   14b60:	ldr	r0, [pc, #620]	; 14dd4 <__assert_fail@plt+0x2a48>
   14b64:	bl	11dbc <printf@plt>
   14b68:	ldr	r5, [pc, #620]	; 14ddc <__assert_fail@plt+0x2a50>
   14b6c:	ldr	r3, [r4, #20]
   14b70:	b	14a1c <__assert_fail@plt+0x2690>
   14b74:	mov	r1, r5
   14b78:	ldr	r2, [pc, #624]	; 14df0 <__assert_fail@plt+0x2a64>
   14b7c:	ldr	r0, [pc, #592]	; 14dd4 <__assert_fail@plt+0x2a48>
   14b80:	bl	11dbc <printf@plt>
   14b84:	ldr	r5, [pc, #592]	; 14ddc <__assert_fail@plt+0x2a50>
   14b88:	ldr	r3, [r4, #20]
   14b8c:	b	14a14 <__assert_fail@plt+0x2688>
   14b90:	mov	r1, r5
   14b94:	ldr	r2, [pc, #600]	; 14df4 <__assert_fail@plt+0x2a68>
   14b98:	ldr	r0, [pc, #564]	; 14dd4 <__assert_fail@plt+0x2a48>
   14b9c:	bl	11dbc <printf@plt>
   14ba0:	ldr	r5, [pc, #564]	; 14ddc <__assert_fail@plt+0x2a50>
   14ba4:	ldr	r3, [r4, #20]
   14ba8:	b	14a0c <__assert_fail@plt+0x2680>
   14bac:	mov	r1, r5
   14bb0:	ldr	r2, [pc, #576]	; 14df8 <__assert_fail@plt+0x2a6c>
   14bb4:	ldr	r0, [pc, #536]	; 14dd4 <__assert_fail@plt+0x2a48>
   14bb8:	bl	11dbc <printf@plt>
   14bbc:	ldr	r5, [pc, #536]	; 14ddc <__assert_fail@plt+0x2a50>
   14bc0:	ldr	r3, [r4, #20]
   14bc4:	b	14a04 <__assert_fail@plt+0x2678>
   14bc8:	mov	r1, r5
   14bcc:	ldr	r2, [pc, #552]	; 14dfc <__assert_fail@plt+0x2a70>
   14bd0:	ldr	r0, [pc, #508]	; 14dd4 <__assert_fail@plt+0x2a48>
   14bd4:	bl	11dbc <printf@plt>
   14bd8:	ldr	r5, [pc, #508]	; 14ddc <__assert_fail@plt+0x2a50>
   14bdc:	ldr	r3, [r4, #20]
   14be0:	b	149fc <__assert_fail@plt+0x2670>
   14be4:	mov	r1, r5
   14be8:	ldr	r2, [pc, #528]	; 14e00 <__assert_fail@plt+0x2a74>
   14bec:	ldr	r0, [pc, #480]	; 14dd4 <__assert_fail@plt+0x2a48>
   14bf0:	bl	11dbc <printf@plt>
   14bf4:	ldr	r5, [pc, #480]	; 14ddc <__assert_fail@plt+0x2a50>
   14bf8:	ldr	r3, [r4, #20]
   14bfc:	b	149f4 <__assert_fail@plt+0x2668>
   14c00:	mov	r1, r5
   14c04:	ldr	r2, [pc, #504]	; 14e04 <__assert_fail@plt+0x2a78>
   14c08:	ldr	r0, [pc, #452]	; 14dd4 <__assert_fail@plt+0x2a48>
   14c0c:	bl	11dbc <printf@plt>
   14c10:	ldr	r5, [pc, #452]	; 14ddc <__assert_fail@plt+0x2a50>
   14c14:	ldr	r3, [r4, #20]
   14c18:	b	149ec <__assert_fail@plt+0x2660>
   14c1c:	mov	r1, r5
   14c20:	ldr	r2, [pc, #480]	; 14e08 <__assert_fail@plt+0x2a7c>
   14c24:	ldr	r0, [pc, #424]	; 14dd4 <__assert_fail@plt+0x2a48>
   14c28:	bl	11dbc <printf@plt>
   14c2c:	ldr	r5, [pc, #424]	; 14ddc <__assert_fail@plt+0x2a50>
   14c30:	ldr	r3, [r4, #20]
   14c34:	b	149e4 <__assert_fail@plt+0x2658>
   14c38:	mov	r1, r5
   14c3c:	ldr	r2, [pc, #456]	; 14e0c <__assert_fail@plt+0x2a80>
   14c40:	ldr	r0, [pc, #396]	; 14dd4 <__assert_fail@plt+0x2a48>
   14c44:	bl	11dbc <printf@plt>
   14c48:	ldr	r5, [pc, #396]	; 14ddc <__assert_fail@plt+0x2a50>
   14c4c:	ldr	r3, [r4, #20]
   14c50:	b	149dc <__assert_fail@plt+0x2650>
   14c54:	mov	r1, r5
   14c58:	ldr	r2, [pc, #432]	; 14e10 <__assert_fail@plt+0x2a84>
   14c5c:	ldr	r0, [pc, #368]	; 14dd4 <__assert_fail@plt+0x2a48>
   14c60:	bl	11dbc <printf@plt>
   14c64:	ldr	r5, [pc, #368]	; 14ddc <__assert_fail@plt+0x2a50>
   14c68:	ldr	r3, [r4, #20]
   14c6c:	b	149d4 <__assert_fail@plt+0x2648>
   14c70:	mov	r1, r5
   14c74:	ldr	r2, [pc, #408]	; 14e14 <__assert_fail@plt+0x2a88>
   14c78:	ldr	r0, [pc, #340]	; 14dd4 <__assert_fail@plt+0x2a48>
   14c7c:	bl	11dbc <printf@plt>
   14c80:	ldr	r5, [pc, #340]	; 14ddc <__assert_fail@plt+0x2a50>
   14c84:	ldr	r3, [r4, #20]
   14c88:	b	149cc <__assert_fail@plt+0x2640>
   14c8c:	ldr	r2, [pc, #388]	; 14e18 <__assert_fail@plt+0x2a8c>
   14c90:	ldr	r1, [pc, #308]	; 14dcc <__assert_fail@plt+0x2a40>
   14c94:	ldr	r0, [pc, #312]	; 14dd4 <__assert_fail@plt+0x2a48>
   14c98:	bl	11dbc <printf@plt>
   14c9c:	ldr	r5, [pc, #312]	; 14ddc <__assert_fail@plt+0x2a50>
   14ca0:	ldr	r3, [r4, #20]
   14ca4:	b	149c4 <__assert_fail@plt+0x2638>
   14ca8:	ldr	r0, [pc, #364]	; 14e1c <__assert_fail@plt+0x2a90>
   14cac:	bl	11dbc <printf@plt>
   14cb0:	b	149ac <__assert_fail@plt+0x2620>
   14cb4:	cmp	r3, #786432	; 0xc0000
   14cb8:	ldreq	r2, [pc, #352]	; 14e20 <__assert_fail@plt+0x2a94>
   14cbc:	beq	14aa0 <__assert_fail@plt+0x2714>
   14cc0:	bl	1232c <abort@plt>
   14cc4:	cmp	r3, #0
   14cc8:	ldreq	r2, [pc, #340]	; 14e24 <__assert_fail@plt+0x2a98>
   14ccc:	beq	14aa0 <__assert_fail@plt+0x2714>
   14cd0:	b	14cc0 <__assert_fail@plt+0x2934>
   14cd4:	tst	r3, #536870912	; 0x20000000
   14cd8:	beq	14a7c <__assert_fail@plt+0x26f0>
   14cdc:	mov	r1, r5
   14ce0:	ldr	r2, [pc, #320]	; 14e28 <__assert_fail@plt+0x2a9c>
   14ce4:	ldr	r0, [pc, #232]	; 14dd4 <__assert_fail@plt+0x2a48>
   14ce8:	bl	11dbc <printf@plt>
   14cec:	ldr	r5, [pc, #232]	; 14ddc <__assert_fail@plt+0x2a50>
   14cf0:	ldr	r3, [r4, #20]
   14cf4:	b	14a7c <__assert_fail@plt+0x26f0>
   14cf8:	mov	r1, r5
   14cfc:	ldr	r2, [pc, #296]	; 14e2c <__assert_fail@plt+0x2aa0>
   14d00:	ldr	r0, [pc, #204]	; 14dd4 <__assert_fail@plt+0x2a48>
   14d04:	bl	11dbc <printf@plt>
   14d08:	ldr	r5, [pc, #204]	; 14ddc <__assert_fail@plt+0x2a50>
   14d0c:	b	14a68 <__assert_fail@plt+0x26dc>
   14d10:	mov	r1, r5
   14d14:	ldr	r2, [pc, #276]	; 14e30 <__assert_fail@plt+0x2aa4>
   14d18:	ldr	r0, [pc, #180]	; 14dd4 <__assert_fail@plt+0x2a48>
   14d1c:	bl	11dbc <printf@plt>
   14d20:	ldr	r5, [pc, #180]	; 14ddc <__assert_fail@plt+0x2a50>
   14d24:	ldr	r3, [r4, #20]
   14d28:	b	14a60 <__assert_fail@plt+0x26d4>
   14d2c:	ldr	r3, [r4, #140]	; 0x8c
   14d30:	cmp	r3, #0
   14d34:	beq	14abc <__assert_fail@plt+0x2730>
   14d38:	ldr	r3, [r3, #36]	; 0x24
   14d3c:	cmp	r3, #0
   14d40:	beq	14abc <__assert_fail@plt+0x2730>
   14d44:	ldm	r3, {r1, r2}
   14d48:	ldr	r0, [pc, #228]	; 14e34 <__assert_fail@plt+0x2aa8>
   14d4c:	bl	11dbc <printf@plt>
   14d50:	b	14abc <__assert_fail@plt+0x2730>
   14d54:	cmp	r3, #0
   14d58:	bge	14a58 <__assert_fail@plt+0x26cc>
   14d5c:	mov	r1, r5
   14d60:	ldr	r2, [pc, #208]	; 14e38 <__assert_fail@plt+0x2aac>
   14d64:	ldr	r0, [pc, #104]	; 14dd4 <__assert_fail@plt+0x2a48>
   14d68:	bl	11dbc <printf@plt>
   14d6c:	ldr	r5, [pc, #104]	; 14ddc <__assert_fail@plt+0x2a50>
   14d70:	ldr	r3, [r4, #20]
   14d74:	b	14a58 <__assert_fail@plt+0x26cc>
   14d78:	ldr	r2, [pc, #188]	; 14e3c <__assert_fail@plt+0x2ab0>
   14d7c:	b	14aa0 <__assert_fail@plt+0x2714>
   14d80:	mov	r1, r5
   14d84:	ldr	r2, [pc, #180]	; 14e40 <__assert_fail@plt+0x2ab4>
   14d88:	ldr	r0, [pc, #68]	; 14dd4 <__assert_fail@plt+0x2a48>
   14d8c:	bl	11dbc <printf@plt>
   14d90:	ldr	r5, [pc, #68]	; 14ddc <__assert_fail@plt+0x2a50>
   14d94:	ldr	r3, [r4, #20]
   14d98:	b	14ad4 <__assert_fail@plt+0x2748>
   14d9c:	mov	r1, r5
   14da0:	ldr	r2, [pc, #156]	; 14e44 <__assert_fail@plt+0x2ab8>
   14da4:	ldr	r0, [pc, #40]	; 14dd4 <__assert_fail@plt+0x2a48>
   14da8:	bl	11dbc <printf@plt>
   14dac:	ldr	r5, [pc, #40]	; 14ddc <__assert_fail@plt+0x2a50>
   14db0:	ldr	r3, [r4, #20]
   14db4:	b	14b00 <__assert_fail@plt+0x2774>
   14db8:	andeq	r7, r6, r0, lsr r4
   14dbc:	andeq	r8, r4, r8, ror #23
   14dc0:	andeq	sl, r4, r8, ror #16
   14dc4:	strdeq	r8, [r4], -ip
   14dc8:	andeq	r7, r6, r0, asr #8
   14dcc:	andeq	r9, r4, r4, lsr #5
   14dd0:	andeq	r8, r4, r0, asr #23
   14dd4:	andeq	sp, r4, r0, asr #31
   14dd8:			; <UNDEFINED> instruction: 0x00048cb4
   14ddc:	andeq	r8, r4, r4, lsl lr
   14de0:	muleq	r4, r8, ip
   14de4:	andeq	r8, r4, r0, lsr #25
   14de8:	andeq	r8, r4, r0, lsl #25
   14dec:	andeq	r8, r4, r8, ror ip
   14df0:	andeq	r8, r4, ip, ror #24
   14df4:	andeq	r8, r4, r0, ror #24
   14df8:	andeq	r8, r4, ip, asr ip
   14dfc:	andeq	r8, r4, r4, asr ip
   14e00:	andeq	r8, r4, r0, asr #25
   14e04:	andeq	r8, r4, r8, asr #24
   14e08:	andeq	r8, r4, ip, lsr #28
   14e0c:	andeq	r8, r4, r0, asr #24
   14e10:	andeq	r8, r4, r4, lsr ip
   14e14:	andeq	r8, r4, ip, lsr #24
   14e18:	andeq	r8, r4, r0, lsr #24
   14e1c:	andeq	r8, r4, ip, lsl #24
   14e20:	muleq	r4, r4, fp
   14e24:	andeq	r8, r4, ip, lsr #23
   14e28:	andeq	r8, r4, r0, ror #25
   14e2c:	ldrdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   14e30:	andeq	r8, r4, r8, asr #25
   14e34:	andeq	r8, r4, r8, ror #25
   14e38:			; <UNDEFINED> instruction: 0x00048cbc
   14e3c:	ldrdeq	r8, [r4], -r4
   14e40:	andeq	r8, r4, ip, lsr #25
   14e44:	muleq	r4, r0, ip
   14e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e4c:	sub	sp, sp, #100	; 0x64
   14e50:	mov	r4, #0
   14e54:	mov	r5, r1
   14e58:	str	r1, [sp, #12]
   14e5c:	str	r4, [sp, #28]
   14e60:	str	r0, [sp, #16]
   14e64:	bl	12044 <bfd_octets_per_byte@plt>
   14e68:	ldr	r3, [r5, #20]
   14e6c:	tst	r3, #256	; 0x100
   14e70:	str	r0, [sp, #8]
   14e74:	bne	14e80 <__assert_fail@plt+0x2af4>
   14e78:	add	sp, sp, #100	; 0x64
   14e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e80:	mov	r0, r5
   14e84:	bl	148a0 <__assert_fail@plt+0x2514>
   14e88:	cmp	r0, r4
   14e8c:	beq	14e78 <__assert_fail@plt+0x2aec>
   14e90:	ldr	r0, [r5, #36]	; 0x24
   14e94:	cmp	r0, r4
   14e98:	beq	14e78 <__assert_fail@plt+0x2aec>
   14e9c:	ldr	r3, [pc, #924]	; 15240 <__assert_fail@plt+0x2eb4>
   14ea0:	ldr	r2, [r3]
   14ea4:	cmn	r2, #1
   14ea8:	beq	14ec0 <__assert_fail@plt+0x2b34>
   14eac:	ldr	r1, [r5, #28]
   14eb0:	cmp	r2, r1
   14eb4:	subcs	r2, r2, r1
   14eb8:	strcs	r2, [sp, #4]
   14ebc:	bcs	14ec4 <__assert_fail@plt+0x2b38>
   14ec0:	str	r4, [sp, #4]
   14ec4:	ldr	r4, [r3, #4]
   14ec8:	cmn	r4, #1
   14ecc:	beq	151c8 <__assert_fail@plt+0x2e3c>
   14ed0:	ldr	r3, [sp, #12]
   14ed4:	ldr	r5, [r3, #28]
   14ed8:	cmp	r4, r5
   14edc:	bcc	14e78 <__assert_fail@plt+0x2aec>
   14ee0:	ldr	r1, [sp, #8]
   14ee4:	bl	47334 <warn@@Base+0x5b64>
   14ee8:	sub	r4, r4, r5
   14eec:	cmp	r0, r4
   14ef0:	movcc	r3, r0
   14ef4:	movcs	r3, r4
   14ef8:	str	r3, [sp, #20]
   14efc:	ldr	r3, [sp, #4]
   14f00:	ldr	r2, [sp, #20]
   14f04:	cmp	r3, r2
   14f08:	bcs	14e78 <__assert_fail@plt+0x2aec>
   14f0c:	mov	r2, #5
   14f10:	ldr	r1, [pc, #812]	; 15244 <__assert_fail@plt+0x2eb8>
   14f14:	mov	r0, #0
   14f18:	bl	11ea0 <dcgettext@plt>
   14f1c:	ldr	r3, [sp, #12]
   14f20:	ldr	r1, [r3]
   14f24:	bl	11dbc <printf@plt>
   14f28:	ldr	r3, [pc, #792]	; 15248 <__assert_fail@plt+0x2ebc>
   14f2c:	ldr	r3, [r3, #20]
   14f30:	cmp	r3, #0
   14f34:	bne	1520c <__assert_fail@plt+0x2e80>
   14f38:	mov	r0, #10
   14f3c:	bl	1211c <putchar@plt>
   14f40:	add	r2, sp, #28
   14f44:	ldr	r1, [sp, #12]
   14f48:	ldr	r0, [sp, #16]
   14f4c:	bl	11f9c <bfd_get_full_section_contents@plt>
   14f50:	cmp	r0, #0
   14f54:	beq	151d8 <__assert_fail@plt+0x2e4c>
   14f58:	ldr	r3, [sp, #12]
   14f5c:	add	r1, sp, #32
   14f60:	ldr	r0, [sp, #16]
   14f64:	ldr	r2, [r3, #28]
   14f68:	ldr	r3, [sp, #4]
   14f6c:	add	r5, sp, #33	; 0x21
   14f70:	add	r2, r3, r2
   14f74:	bl	12230 <bfd_sprintf_vma@plt>
   14f78:	add	r0, sp, #32
   14f7c:	bl	12074 <strlen@plt>
   14f80:	mov	r1, r5
   14f84:	ldrb	r3, [sp, #32]
   14f88:	mov	r2, #0
   14f8c:	b	14fa4 <__assert_fail@plt+0x2c18>
   14f90:	ldrb	r3, [r1], #1
   14f94:	add	ip, r2, #1
   14f98:	cmp	r3, #0
   14f9c:	beq	14fac <__assert_fail@plt+0x2c20>
   14fa0:	mov	r2, ip
   14fa4:	cmp	r3, #48	; 0x30
   14fa8:	beq	14f90 <__assert_fail@plt+0x2c04>
   14fac:	ldr	r3, [sp, #12]
   14fb0:	sub	r4, r0, r2
   14fb4:	ldr	r2, [sp, #20]
   14fb8:	ldr	r3, [r3, #28]
   14fbc:	cmp	r4, #4
   14fc0:	sub	r3, r3, #1
   14fc4:	add	r2, r3, r2
   14fc8:	add	r1, sp, #32
   14fcc:	ldr	r0, [sp, #16]
   14fd0:	movlt	r4, #4
   14fd4:	bl	12230 <bfd_sprintf_vma@plt>
   14fd8:	add	r0, sp, #32
   14fdc:	bl	12074 <strlen@plt>
   14fe0:	ldrb	r3, [sp, #32]
   14fe4:	mov	r2, #0
   14fe8:	b	15000 <__assert_fail@plt+0x2c74>
   14fec:	ldrb	r3, [r5], #1
   14ff0:	add	r1, r2, #1
   14ff4:	cmp	r3, #0
   14ff8:	beq	15008 <__assert_fail@plt+0x2c7c>
   14ffc:	mov	r2, r1
   15000:	cmp	r3, #48	; 0x30
   15004:	beq	14fec <__assert_fail@plt+0x2c60>
   15008:	ldr	r3, [sp, #8]
   1500c:	ldr	r1, [sp, #20]
   15010:	sub	r2, r0, r2
   15014:	cmp	r2, r4
   15018:	mul	r7, r3, r1
   1501c:	ldr	r9, [pc, #552]	; 1524c <__assert_fail@plt+0x2ec0>
   15020:	ldr	r8, [pc, #552]	; 15250 <__assert_fail@plt+0x2ec4>
   15024:	movge	sl, r2
   15028:	movlt	sl, r4
   1502c:	ldr	r3, [sp, #12]
   15030:	add	r1, sp, #32
   15034:	ldr	r0, [sp, #16]
   15038:	ldr	r2, [r3, #28]
   1503c:	ldr	r3, [sp, #4]
   15040:	add	r2, r3, r2
   15044:	bl	12230 <bfd_sprintf_vma@plt>
   15048:	add	r0, sp, #32
   1504c:	bl	12074 <strlen@plt>
   15050:	ldr	r1, [r9]
   15054:	mov	r5, r0
   15058:	mov	r0, #32
   1505c:	bl	12254 <putc@plt>
   15060:	cmp	r5, sl
   15064:	mov	r4, r5
   15068:	bge	15088 <__assert_fail@plt+0x2cfc>
   1506c:	add	r4, r4, #1
   15070:	ldr	r1, [r9]
   15074:	mov	r0, #48	; 0x30
   15078:	bl	12254 <putc@plt>
   1507c:	cmp	r4, sl
   15080:	bne	1506c <__assert_fail@plt+0x2ce0>
   15084:	mov	r5, sl
   15088:	ldr	r3, [sp, #4]
   1508c:	ldr	r2, [sp, #8]
   15090:	sub	r0, r5, sl
   15094:	ldr	r1, [r9]
   15098:	mul	r6, r3, r2
   1509c:	add	r3, sp, #32
   150a0:	add	r0, r3, r0
   150a4:	bl	12314 <fputs@plt>
   150a8:	add	r5, r6, #16
   150ac:	ldr	r1, [r9]
   150b0:	mov	r0, #32
   150b4:	bl	12254 <putc@plt>
   150b8:	cmp	r5, r6
   150bc:	bls	15234 <__assert_fail@plt+0x2ea8>
   150c0:	add	r4, r6, #1
   150c4:	cmp	r5, r4
   150c8:	movcc	r5, #1
   150cc:	movcs	r5, #16
   150d0:	add	r5, r5, r6
   150d4:	mov	fp, r6
   150d8:	b	15104 <__assert_fail@plt+0x2d78>
   150dc:	ldr	r3, [sp, #28]
   150e0:	ldr	r0, [pc, #364]	; 15254 <__assert_fail@plt+0x2ec8>
   150e4:	ldrb	r1, [r3, fp]
   150e8:	bl	11dbc <printf@plt>
   150ec:	and	r3, fp, #3
   150f0:	cmp	r3, #3
   150f4:	add	fp, fp, #1
   150f8:	beq	15124 <__assert_fail@plt+0x2d98>
   150fc:	cmp	r5, fp
   15100:	beq	15134 <__assert_fail@plt+0x2da8>
   15104:	cmp	r7, fp
   15108:	mov	r0, r8
   1510c:	bhi	150dc <__assert_fail@plt+0x2d50>
   15110:	bl	11dbc <printf@plt>
   15114:	and	r3, fp, #3
   15118:	cmp	r3, #3
   1511c:	add	fp, fp, #1
   15120:	bne	150fc <__assert_fail@plt+0x2d70>
   15124:	mov	r0, #32
   15128:	bl	1211c <putchar@plt>
   1512c:	cmp	r5, fp
   15130:	bne	15104 <__assert_fail@plt+0x2d78>
   15134:	mov	r0, #32
   15138:	bl	1211c <putchar@plt>
   1513c:	b	15170 <__assert_fail@plt+0x2de4>
   15140:	ldr	r3, [sp, #28]
   15144:	ldr	r2, [pc, #268]	; 15258 <__assert_fail@plt+0x2ecc>
   15148:	ldrb	r0, [r3, r6]
   1514c:	mov	r6, r4
   15150:	lsl	r3, r0, #1
   15154:	ldrh	r3, [r2, r3]
   15158:	tst	r3, #16
   1515c:	moveq	r0, #46	; 0x2e
   15160:	bl	1211c <putchar@plt>
   15164:	cmp	r5, r4
   15168:	beq	1518c <__assert_fail@plt+0x2e00>
   1516c:	add	r4, r4, #1
   15170:	cmp	r7, r6
   15174:	bhi	15140 <__assert_fail@plt+0x2db4>
   15178:	mov	r0, #32
   1517c:	bl	1211c <putchar@plt>
   15180:	cmp	r5, r4
   15184:	mov	r6, r4
   15188:	bne	1516c <__assert_fail@plt+0x2de0>
   1518c:	ldr	r1, [r9]
   15190:	mov	r0, #10
   15194:	bl	12254 <putc@plt>
   15198:	ldr	r1, [sp, #8]
   1519c:	mov	r0, #16
   151a0:	bl	47334 <warn@@Base+0x5b64>
   151a4:	ldr	r3, [sp, #4]
   151a8:	ldr	r2, [sp, #20]
   151ac:	add	r3, r3, r0
   151b0:	cmp	r2, r3
   151b4:	str	r3, [sp, #4]
   151b8:	bhi	1502c <__assert_fail@plt+0x2ca0>
   151bc:	ldr	r0, [sp, #28]
   151c0:	bl	11e10 <free@plt>
   151c4:	b	14e78 <__assert_fail@plt+0x2aec>
   151c8:	ldr	r1, [sp, #8]
   151cc:	bl	47334 <warn@@Base+0x5b64>
   151d0:	str	r0, [sp, #20]
   151d4:	b	14efc <__assert_fail@plt+0x2b70>
   151d8:	mov	r2, #5
   151dc:	ldr	r1, [pc, #120]	; 1525c <__assert_fail@plt+0x2ed0>
   151e0:	bl	11ea0 <dcgettext@plt>
   151e4:	ldr	r3, [sp, #12]
   151e8:	ldr	r5, [r3]
   151ec:	mov	r4, r0
   151f0:	bl	11f00 <bfd_get_error@plt>
   151f4:	bl	12284 <bfd_errmsg@plt>
   151f8:	mov	r1, r5
   151fc:	mov	r2, r0
   15200:	mov	r0, r4
   15204:	bl	406c8 <__assert_fail@plt+0x2e33c>
   15208:	b	14e78 <__assert_fail@plt+0x2aec>
   1520c:	mov	r2, #5
   15210:	ldr	r1, [pc, #72]	; 15260 <__assert_fail@plt+0x2ed4>
   15214:	mov	r0, #0
   15218:	bl	11ea0 <dcgettext@plt>
   1521c:	ldr	r3, [sp, #12]
   15220:	ldr	r1, [r3, #80]	; 0x50
   15224:	ldr	r3, [sp, #4]
   15228:	add	r1, r3, r1
   1522c:	bl	11dbc <printf@plt>
   15230:	b	14f38 <__assert_fail@plt+0x2bac>
   15234:	mov	r0, #32
   15238:	bl	1211c <putchar@plt>
   1523c:	b	1518c <__assert_fail@plt+0x2e00>
   15240:	andeq	r6, r6, r0, asr #4
   15244:	strdeq	r8, [r4], -ip
   15248:	andeq	r7, r6, r0, asr #8
   1524c:	andeq	r7, r6, r0, lsr r4
   15250:	andeq	sl, r4, r8, ror #16
   15254:	andeq	r8, r4, r0, ror #26
   15258:	strdeq	r5, [r6], -r8
   1525c:	andeq	r8, r4, r8, lsr sp
   15260:	andeq	r8, r4, r4, lsl sp
   15264:	ldr	r3, [r1, #20]
   15268:	tst	r3, #1048576	; 0x100000
   1526c:	bxne	lr
   15270:	push	{r4, r5, r6, lr}
   15274:	mov	r0, r1
   15278:	mov	r5, r2
   1527c:	mov	r4, r1
   15280:	bl	148a0 <__assert_fail@plt+0x2514>
   15284:	cmp	r0, #0
   15288:	popeq	{r4, r5, r6, pc}
   1528c:	ldr	r0, [r4]
   15290:	bl	12074 <strlen@plt>
   15294:	ldr	r3, [r5]
   15298:	cmp	r0, r3
   1529c:	strgt	r0, [r5]
   152a0:	pop	{r4, r5, r6, pc}
   152a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152a8:	cmp	r0, #0
   152ac:	ldr	r7, [pc, #456]	; 1547c <__assert_fail@plt+0x30f0>
   152b0:	ldrne	r0, [pc, #456]	; 15480 <__assert_fail@plt+0x30f4>
   152b4:	ldreq	r0, [pc, #456]	; 15484 <__assert_fail@plt+0x30f8>
   152b8:	ldrne	r6, [r7, #64]	; 0x40
   152bc:	ldreq	r6, [r7, #68]	; 0x44
   152c0:	sub	sp, sp, #12
   152c4:	ldrne	r5, [r7, #60]	; 0x3c
   152c8:	ldreq	r5, [r7, #36]	; 0x24
   152cc:	bl	11fe4 <puts@plt>
   152d0:	cmp	r6, #0
   152d4:	beq	15438 <__assert_fail@plt+0x30ac>
   152d8:	ble	153ac <__assert_fail@plt+0x3020>
   152dc:	ldr	sl, [pc, #420]	; 15488 <__assert_fail@plt+0x30fc>
   152e0:	ldr	r9, [pc, #420]	; 1548c <__assert_fail@plt+0x3100>
   152e4:	sub	r5, r5, #4
   152e8:	mov	r4, #0
   152ec:	b	15370 <__assert_fail@plt+0x2fe4>
   152f0:	ldr	r0, [r0, #16]
   152f4:	bl	148a0 <__assert_fail@plt+0x2514>
   152f8:	cmp	r0, #0
   152fc:	beq	15364 <__assert_fail@plt+0x2fd8>
   15300:	ldr	r1, [r7, #72]	; 0x48
   15304:	ldr	r2, [r5]
   15308:	cmp	r1, #0
   1530c:	bne	15330 <__assert_fail@plt+0x2fa4>
   15310:	ldr	ip, [fp, #4]
   15314:	mov	r1, r2
   15318:	mov	r0, fp
   1531c:	ldr	r2, [ip, #288]	; 0x120
   15320:	blx	r2
   15324:	cmp	r0, #0
   15328:	bne	15364 <__assert_fail@plt+0x2fd8>
   1532c:	ldr	r2, [r5]
   15330:	ldr	r8, [r2, #4]
   15334:	ldr	r1, [r7, #12]
   15338:	cmp	r1, #0
   1533c:	cmpne	r8, #0
   15340:	bne	153d4 <__assert_fail@plt+0x3048>
   15344:	ldr	r1, [fp, #4]
   15348:	mov	r0, fp
   1534c:	mov	r3, #2
   15350:	ldr	r8, [r1, #272]	; 0x110
   15354:	ldr	r1, [sl]
   15358:	blx	r8
   1535c:	mov	r0, #10
   15360:	bl	1211c <putchar@plt>
   15364:	add	r4, r4, #1
   15368:	cmp	r6, r4
   1536c:	beq	153ac <__assert_fail@plt+0x3020>
   15370:	ldr	r0, [r5, #4]!
   15374:	cmp	r0, #0
   15378:	beq	153bc <__assert_fail@plt+0x3030>
   1537c:	ldr	fp, [r0]
   15380:	cmp	fp, #0
   15384:	bne	152f0 <__assert_fail@plt+0x2f64>
   15388:	mov	r2, #5
   1538c:	mov	r1, r9
   15390:	mov	r0, fp
   15394:	bl	11ea0 <dcgettext@plt>
   15398:	mov	r1, r4
   1539c:	add	r4, r4, #1
   153a0:	bl	11dbc <printf@plt>
   153a4:	cmp	r6, r4
   153a8:	bne	15370 <__assert_fail@plt+0x2fe4>
   153ac:	ldr	r0, [pc, #220]	; 15490 <__assert_fail@plt+0x3104>
   153b0:	add	sp, sp, #12
   153b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153b8:	b	11fe4 <puts@plt>
   153bc:	mov	r2, #5
   153c0:	ldr	r1, [pc, #204]	; 15494 <__assert_fail@plt+0x3108>
   153c4:	bl	11ea0 <dcgettext@plt>
   153c8:	mov	r1, r4
   153cc:	bl	11dbc <printf@plt>
   153d0:	b	15364 <__assert_fail@plt+0x2fd8>
   153d4:	ldrb	r1, [r8]
   153d8:	cmp	r1, #0
   153dc:	beq	15344 <__assert_fail@plt+0x2fb8>
   153e0:	mov	r2, #3
   153e4:	mov	r1, r8
   153e8:	mov	r0, fp
   153ec:	bl	121b8 <bfd_demangle@plt>
   153f0:	subs	r3, r0, #0
   153f4:	beq	1545c <__assert_fail@plt+0x30d0>
   153f8:	ldr	r1, [r5]
   153fc:	ldr	r0, [fp, #4]
   15400:	mov	r2, r1
   15404:	str	r3, [r1, #4]
   15408:	ldr	r1, [r0, #272]	; 0x110
   1540c:	str	r3, [sp, #4]
   15410:	mov	ip, r1
   15414:	mov	r0, fp
   15418:	mov	r3, #2
   1541c:	ldr	r1, [sl]
   15420:	blx	ip
   15424:	ldr	r3, [r5]
   15428:	ldr	r0, [sp, #4]
   1542c:	str	r8, [r3, #4]
   15430:	bl	11e10 <free@plt>
   15434:	b	1535c <__assert_fail@plt+0x2fd0>
   15438:	mov	r2, #5
   1543c:	ldr	r1, [pc, #84]	; 15498 <__assert_fail@plt+0x310c>
   15440:	mov	r0, r6
   15444:	bl	11ea0 <dcgettext@plt>
   15448:	bl	11dbc <printf@plt>
   1544c:	ldr	r0, [pc, #60]	; 15490 <__assert_fail@plt+0x3104>
   15450:	add	sp, sp, #12
   15454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15458:	b	11fe4 <puts@plt>
   1545c:	ldr	r2, [fp, #4]
   15460:	mov	r0, fp
   15464:	mov	r3, #2
   15468:	ldr	r8, [r2, #272]	; 0x110
   1546c:	ldr	r1, [sl]
   15470:	ldr	r2, [r5]
   15474:	blx	r8
   15478:	b	1535c <__assert_fail@plt+0x2fd0>
   1547c:	andeq	r7, r6, r0, asr #8
   15480:	andeq	r8, r4, r8, ror #26
   15484:	andeq	r8, r4, r0, ror sp
   15488:	andeq	r7, r6, r0, lsr r4
   1548c:			; <UNDEFINED> instruction: 0x00048db4
   15490:	andeq	sl, r4, r4, ror pc
   15494:	andeq	r8, r4, ip, lsl #27
   15498:	andeq	r8, r4, r0, lsl #27
   1549c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154a0:	mov	r5, r0
   154a4:	ldr	r4, [pc, #3096]	; 160c4 <__assert_fail@plt+0x3d38>
   154a8:	sub	sp, sp, #204	; 0xcc
   154ac:	ldr	r3, [r4, #48]	; 0x30
   154b0:	cmp	r3, #0
   154b4:	bne	15c20 <__assert_fail@plt+0x3894>
   154b8:	ldr	r0, [r4, #76]	; 0x4c
   154bc:	ldr	r3, [r4, #80]	; 0x50
   154c0:	orrs	r0, r0, r3
   154c4:	beq	15c4c <__assert_fail@plt+0x38c0>
   154c8:	ldr	r3, [r4, #84]	; 0x54
   154cc:	cmp	r3, #0
   154d0:	bne	15c04 <__assert_fail@plt+0x3878>
   154d4:	ldr	r3, [r4, #88]	; 0x58
   154d8:	cmp	r3, #0
   154dc:	bne	15b0c <__assert_fail@plt+0x3780>
   154e0:	ldr	r3, [r4, #92]	; 0x5c
   154e4:	cmp	r3, #0
   154e8:	bne	1570c <__assert_fail@plt+0x3380>
   154ec:	ldr	r3, [r4, #96]	; 0x60
   154f0:	cmp	r3, #0
   154f4:	beq	1550c <__assert_fail@plt+0x3180>
   154f8:	mov	r2, #5
   154fc:	ldr	r1, [pc, #3012]	; 160c8 <__assert_fail@plt+0x3d3c>
   15500:	mov	r0, #0
   15504:	bl	11ea0 <dcgettext@plt>
   15508:	bl	406c8 <__assert_fail@plt+0x2e33c>
   1550c:	ldrd	r2, [r4, #76]	; 0x4c
   15510:	orrs	r3, r2, r3
   15514:	beq	15e0c <__assert_fail@plt+0x3a80>
   15518:	ldr	r1, [r4, #104]	; 0x68
   1551c:	ldr	r3, [r4, #100]	; 0x64
   15520:	ldr	r2, [r4, #108]	; 0x6c
   15524:	orr	r3, r3, r1
   15528:	ldr	r1, [r4, #112]	; 0x70
   1552c:	orr	r3, r3, r2
   15530:	ldr	r2, [r4, #116]	; 0x74
   15534:	orr	r3, r3, r1
   15538:	orrs	r3, r3, r2
   1553c:	beq	15594 <__assert_fail@plt+0x3208>
   15540:	ldr	r1, [r5, #40]	; 0x28
   15544:	lsr	r1, r1, #5
   15548:	ands	r6, r1, #16
   1554c:	streq	r6, [r4, #68]	; 0x44
   15550:	beq	15590 <__assert_fail@plt+0x3204>
   15554:	ldr	r3, [r5, #4]
   15558:	mov	r0, r5
   1555c:	ldr	r3, [r3, #260]	; 0x104
   15560:	blx	r3
   15564:	subs	r6, r0, #0
   15568:	blt	16098 <__assert_fail@plt+0x3d0c>
   1556c:	bne	15d78 <__assert_fail@plt+0x39ec>
   15570:	ldr	r3, [r5, #4]
   15574:	mov	r1, r6
   15578:	mov	r0, r5
   1557c:	ldr	r3, [r3, #264]	; 0x108
   15580:	blx	r3
   15584:	cmp	r0, #0
   15588:	str	r0, [r4, #68]	; 0x44
   1558c:	blt	15e38 <__assert_fail@plt+0x3aac>
   15590:	str	r6, [r4, #36]	; 0x24
   15594:	ldr	r3, [r4, #120]	; 0x78
   15598:	cmp	r3, #0
   1559c:	bne	15c68 <__assert_fail@plt+0x38dc>
   155a0:	ldrd	r2, [r4, #124]	; 0x7c
   155a4:	orrs	r3, r2, r3
   155a8:	beq	15728 <__assert_fail@plt+0x339c>
   155ac:	ldr	r3, [r5, #4]
   155b0:	mov	r0, r5
   155b4:	ldr	r3, [r3, #424]	; 0x1a8
   155b8:	blx	r3
   155bc:	subs	r6, r0, #0
   155c0:	blt	15750 <__assert_fail@plt+0x33c4>
   155c4:	bne	15e20 <__assert_fail@plt+0x3a94>
   155c8:	ldr	r3, [r5, #4]
   155cc:	mov	r1, r6
   155d0:	mov	r0, r5
   155d4:	ldr	r3, [r3, #428]	; 0x1ac
   155d8:	blx	r3
   155dc:	cmp	r0, #0
   155e0:	str	r0, [r4, #64]	; 0x40
   155e4:	blt	15e38 <__assert_fail@plt+0x3aac>
   155e8:	str	r6, [r4, #60]	; 0x3c
   155ec:	ldr	r3, [r4, #108]	; 0x6c
   155f0:	cmp	r3, #0
   155f4:	beq	15634 <__assert_fail@plt+0x32a8>
   155f8:	ldr	r2, [r5, #4]
   155fc:	ldr	r3, [r4, #60]	; 0x3c
   15600:	ldr	r1, [pc, #2756]	; 160cc <__assert_fail@plt+0x3d40>
   15604:	str	r3, [sp]
   15608:	str	r1, [sp, #4]
   1560c:	ldr	r3, [r4, #64]	; 0x40
   15610:	ldr	r6, [r2, #432]	; 0x1b0
   15614:	ldr	r1, [r4, #68]	; 0x44
   15618:	ldr	r2, [r4, #36]	; 0x24
   1561c:	mov	r0, r5
   15620:	blx	r6
   15624:	cmp	r0, #0
   15628:	movlt	r3, #0
   1562c:	strge	r0, [r4, #136]	; 0x88
   15630:	strlt	r3, [r4, #136]	; 0x88
   15634:	ldr	r3, [r4, #100]	; 0x64
   15638:	cmp	r3, #0
   1563c:	bne	15d6c <__assert_fail@plt+0x39e0>
   15640:	ldr	r3, [r4, #124]	; 0x7c
   15644:	cmp	r3, #0
   15648:	bne	15d60 <__assert_fail@plt+0x39d4>
   1564c:	ldr	r3, [r4, #116]	; 0x74
   15650:	cmp	r3, #0
   15654:	bne	15d54 <__assert_fail@plt+0x39c8>
   15658:	ldr	r3, [r4, #140]	; 0x8c
   1565c:	cmp	r3, #0
   15660:	bne	15d00 <__assert_fail@plt+0x3974>
   15664:	ldr	r3, [r4, #104]	; 0x68
   15668:	cmp	r3, #0
   1566c:	beq	15794 <__assert_fail@plt+0x3408>
   15670:	ldr	r2, [r4, #108]	; 0x6c
   15674:	cmp	r2, #0
   15678:	beq	15788 <__assert_fail@plt+0x33fc>
   1567c:	ldr	r3, [r4, #128]	; 0x80
   15680:	cmp	r3, #0
   15684:	bne	157ac <__assert_fail@plt+0x3420>
   15688:	ldr	r3, [r4, #144]	; 0x90
   1568c:	cmp	r3, #0
   15690:	bne	15cec <__assert_fail@plt+0x3960>
   15694:	ldr	r3, [r4, #108]	; 0x6c
   15698:	cmp	r3, #0
   1569c:	bne	157b8 <__assert_fail@plt+0x342c>
   156a0:	ldr	r3, [r4, #112]	; 0x70
   156a4:	ldr	r0, [r4, #36]	; 0x24
   156a8:	cmp	r3, #0
   156ac:	bne	15ab4 <__assert_fail@plt+0x3728>
   156b0:	cmp	r0, #0
   156b4:	beq	156c4 <__assert_fail@plt+0x3338>
   156b8:	bl	11e10 <free@plt>
   156bc:	mov	r3, #0
   156c0:	str	r3, [r4, #36]	; 0x24
   156c4:	ldr	r0, [r4, #60]	; 0x3c
   156c8:	cmp	r0, #0
   156cc:	beq	156dc <__assert_fail@plt+0x3350>
   156d0:	bl	11e10 <free@plt>
   156d4:	mov	r3, #0
   156d8:	str	r3, [r4, #60]	; 0x3c
   156dc:	ldr	r0, [r4, #132]	; 0x84
   156e0:	cmp	r0, #0
   156e4:	beq	156f4 <__assert_fail@plt+0x3368>
   156e8:	bl	11e10 <free@plt>
   156ec:	mov	r3, #0
   156f0:	str	r3, [r4, #132]	; 0x84
   156f4:	mov	r3, #0
   156f8:	str	r3, [r4, #68]	; 0x44
   156fc:	str	r3, [r4, #64]	; 0x40
   15700:	str	r3, [r4, #136]	; 0x88
   15704:	add	sp, sp, #204	; 0xcc
   15708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1570c:	ldr	r2, [pc, #2492]	; 160d0 <__assert_fail@plt+0x3d44>
   15710:	ldr	r3, [r5, #4]
   15714:	mov	r0, r5
   15718:	ldr	r1, [r2]
   1571c:	ldr	r3, [r3, #196]	; 0xc4
   15720:	blx	r3
   15724:	b	154ec <__assert_fail@plt+0x3160>
   15728:	ldr	r3, [r4, #108]	; 0x6c
   1572c:	cmp	r3, #0
   15730:	beq	15634 <__assert_fail@plt+0x32a8>
   15734:	ldr	r3, [r5, #4]
   15738:	mov	r0, r5
   1573c:	ldr	r3, [r3, #424]	; 0x1a8
   15740:	blx	r3
   15744:	cmp	r0, #0
   15748:	bgt	155ac <__assert_fail@plt+0x3220>
   1574c:	b	155ec <__assert_fail@plt+0x3260>
   15750:	ldr	r6, [r5, #40]	; 0x28
   15754:	lsr	r6, r6, #5
   15758:	ands	r6, r6, #64	; 0x40
   1575c:	bne	15e38 <__assert_fail@plt+0x3aac>
   15760:	mov	r2, #5
   15764:	ldr	r1, [pc, #2408]	; 160d4 <__assert_fail@plt+0x3d48>
   15768:	mov	r0, r6
   1576c:	bl	11ea0 <dcgettext@plt>
   15770:	ldr	r1, [r5]
   15774:	bl	406c8 <__assert_fail@plt+0x2e33c>
   15778:	mov	r3, #1
   1577c:	str	r6, [r4, #64]	; 0x40
   15780:	str	r3, [r4, #16]
   15784:	b	155e8 <__assert_fail@plt+0x325c>
   15788:	ldr	r1, [pc, #2376]	; 160d8 <__assert_fail@plt+0x3d4c>
   1578c:	mov	r0, r5
   15790:	bl	122f0 <bfd_map_over_sections@plt>
   15794:	ldr	r3, [r4, #128]	; 0x80
   15798:	cmp	r3, #0
   1579c:	beq	15688 <__assert_fail@plt+0x32fc>
   157a0:	ldr	r6, [r4, #108]	; 0x6c
   157a4:	cmp	r6, #0
   157a8:	beq	15d84 <__assert_fail@plt+0x39f8>
   157ac:	ldr	r3, [r4, #144]	; 0x90
   157b0:	cmp	r3, #0
   157b4:	bne	15cec <__assert_fail@plt+0x3960>
   157b8:	ldr	r0, [r4, #68]	; 0x44
   157bc:	mov	r3, #0
   157c0:	cmp	r0, r3
   157c4:	mvn	r2, #0
   157c8:	ldreq	r0, [r4, #64]	; 0x40
   157cc:	strd	r2, [r4, #152]	; 0x98
   157d0:	str	r3, [r4, #40]	; 0x28
   157d4:	str	r3, [r4, #148]	; 0x94
   157d8:	ldr	r3, [r4, #136]	; 0x88
   157dc:	str	r0, [r4]
   157e0:	add	r0, r0, r3
   157e4:	lsl	r0, r0, #2
   157e8:	bl	11f3c <xmalloc@plt>
   157ec:	ldr	r3, [r4, #68]	; 0x44
   157f0:	ldr	r9, [r4]
   157f4:	cmp	r3, #0
   157f8:	lsl	r2, r9, #2
   157fc:	ldrne	r1, [r4, #36]	; 0x24
   15800:	ldreq	r1, [r4, #60]	; 0x3c
   15804:	mov	sl, r0
   15808:	str	r0, [r4, #4]
   1580c:	bl	11e40 <memcpy@plt>
   15810:	mov	r6, sl
   15814:	mov	fp, sl
   15818:	subs	r9, r9, #1
   1581c:	bmi	15898 <__assert_fail@plt+0x350c>
   15820:	ldr	r7, [fp], #4
   15824:	ldr	r8, [r7, #4]
   15828:	cmp	r8, #0
   1582c:	beq	15818 <__assert_fail@plt+0x348c>
   15830:	ldrb	r3, [r8]
   15834:	cmp	r3, #0
   15838:	beq	15818 <__assert_fail@plt+0x348c>
   1583c:	ldr	r3, [r7, #12]
   15840:	tst	r3, #260	; 0x104
   15844:	beq	15874 <__assert_fail@plt+0x34e8>
   15848:	mov	r2, #4
   1584c:	ldr	r1, [pc, #2184]	; 160dc <__assert_fail@plt+0x3d50>
   15850:	mov	r0, r8
   15854:	bl	12320 <strncmp@plt>
   15858:	cmp	r0, #0
   1585c:	beq	15874 <__assert_fail@plt+0x34e8>
   15860:	mov	r0, r8
   15864:	ldr	r1, [pc, #2164]	; 160e0 <__assert_fail@plt+0x3d54>
   15868:	bl	11d98 <strcmp@plt>
   1586c:	cmp	r0, #0
   15870:	bne	15818 <__assert_fail@plt+0x348c>
   15874:	ldr	r3, [r7, #16]
   15878:	ldr	r2, [pc, #2148]	; 160e4 <__assert_fail@plt+0x3d58>
   1587c:	cmp	r3, r2
   15880:	beq	15818 <__assert_fail@plt+0x348c>
   15884:	ldr	r3, [r3, #20]
   15888:	tst	r3, #4096	; 0x1000
   1588c:	streq	r7, [r6], #4
   15890:	subs	r9, r9, #1
   15894:	bpl	15820 <__assert_fail@plt+0x3494>
   15898:	sub	r1, r6, sl
   1589c:	ldr	r2, [r4, #136]	; 0x88
   158a0:	asr	r3, r1, #2
   158a4:	cmp	r2, #0
   158a8:	str	r3, [r4]
   158ac:	mov	r1, r3
   158b0:	ble	158d4 <__assert_fail@plt+0x3548>
   158b4:	add	r1, r2, r3
   158b8:	ldr	r3, [r4, #132]	; 0x84
   158bc:	add	r2, sl, r1, lsl #2
   158c0:	str	r3, [r6], #4
   158c4:	cmp	r2, r6
   158c8:	add	r3, r3, #24
   158cc:	bne	158c0 <__assert_fail@plt+0x3534>
   158d0:	str	r1, [r4]
   158d4:	mov	r0, sl
   158d8:	ldr	r3, [pc, #2056]	; 160e8 <__assert_fail@plt+0x3d5c>
   158dc:	mov	r2, #4
   158e0:	bl	12290 <qsort@plt>
   158e4:	ldr	r3, [pc, #2020]	; 160d0 <__assert_fail@plt+0x3d44>
   158e8:	add	r7, sp, #48	; 0x30
   158ec:	mov	r0, r7
   158f0:	ldr	r1, [r3]
   158f4:	ldr	r2, [pc, #2032]	; 160ec <__assert_fail@plt+0x3d60>
   158f8:	bl	12344 <init_disassemble_info@plt>
   158fc:	ldr	r3, [pc, #2028]	; 160f0 <__assert_fail@plt+0x3d64>
   15900:	ldr	r0, [r4, #160]	; 0xa0
   15904:	ldr	r1, [pc, #2024]	; 160f4 <__assert_fail@plt+0x3d68>
   15908:	add	r2, sp, #20
   1590c:	str	r3, [sp, #124]	; 0x7c
   15910:	cmp	r0, #0
   15914:	mov	r3, #0
   15918:	str	r5, [sp, #20]
   1591c:	str	r1, [sp, #128]	; 0x80
   15920:	str	r2, [sp, #56]	; 0x38
   15924:	str	r3, [sp, #28]
   15928:	str	r3, [sp, #32]
   1592c:	str	r3, [sp, #36]	; 0x24
   15930:	str	r3, [sp, #44]	; 0x2c
   15934:	beq	15948 <__assert_fail@plt+0x35bc>
   15938:	bl	121dc <bfd_scan_arch@plt>
   1593c:	subs	r3, r0, #0
   15940:	strne	r3, [r5, #132]	; 0x84
   15944:	beq	16084 <__assert_fail@plt+0x3cf8>
   15948:	ldr	r6, [pc, #1960]	; 160f8 <__assert_fail@plt+0x3d6c>
   1594c:	ldr	r3, [r6, #8]
   15950:	cmp	r3, #2
   15954:	bne	15db8 <__assert_fail@plt+0x3a2c>
   15958:	mov	r0, r5
   1595c:	bl	120a4 <bfd_get_arch@plt>
   15960:	ldr	r3, [r5, #4]
   15964:	ldr	r6, [r3, #8]
   15968:	clz	r6, r6
   1596c:	lsr	r6, r6, #5
   15970:	mov	r8, r0
   15974:	mov	r0, r5
   15978:	bl	12140 <bfd_get_mach@plt>
   1597c:	mov	r1, r6
   15980:	mov	r3, r5
   15984:	mov	r2, r0
   15988:	mov	r0, r8
   1598c:	bl	12134 <disassembler@plt>
   15990:	cmp	r0, #0
   15994:	mov	r6, r0
   15998:	str	r0, [sp, #40]	; 0x28
   1599c:	beq	1601c <__assert_fail@plt+0x3c90>
   159a0:	ldr	r3, [r5, #4]
   159a4:	mov	r0, r5
   159a8:	ldr	r3, [r3, #4]
   159ac:	str	r3, [sp, #60]	; 0x3c
   159b0:	bl	120a4 <bfd_get_arch@plt>
   159b4:	str	r0, [sp, #64]	; 0x40
   159b8:	mov	r0, r5
   159bc:	bl	12140 <bfd_get_mach@plt>
   159c0:	ldr	r3, [r4, #164]	; 0xa4
   159c4:	str	r3, [sp, #192]	; 0xc0
   159c8:	str	r0, [sp, #68]	; 0x44
   159cc:	mov	r0, r5
   159d0:	bl	12044 <bfd_octets_per_byte@plt>
   159d4:	ldr	r3, [r5, #4]
   159d8:	mov	r2, #8
   159dc:	str	r2, [sp, #164]	; 0xa4
   159e0:	ldr	r3, [r3, #8]
   159e4:	mov	r2, #3
   159e8:	str	r2, [sp, #168]	; 0xa8
   159ec:	cmp	r3, #0
   159f0:	mov	r2, #0
   159f4:	str	r2, [sp, #172]	; 0xac
   159f8:	str	r0, [sp, #160]	; 0xa0
   159fc:	bne	15df8 <__assert_fail@plt+0x3a6c>
   15a00:	str	r3, [sp, #72]	; 0x48
   15a04:	str	r3, [sp, #156]	; 0x9c
   15a08:	mov	r0, r7
   15a0c:	bl	11f0c <disassemble_init_for_target@plt>
   15a10:	ldr	r3, [r5, #4]
   15a14:	mov	r0, r5
   15a18:	ldr	r3, [r3, #436]	; 0x1b4
   15a1c:	blx	r3
   15a20:	cmp	r0, #0
   15a24:	blt	15e2c <__assert_fail@plt+0x3aa0>
   15a28:	beq	15a6c <__assert_fail@plt+0x36e0>
   15a2c:	bl	11f3c <xmalloc@plt>
   15a30:	ldr	r3, [r5, #4]
   15a34:	ldr	r2, [r4, #60]	; 0x3c
   15a38:	ldr	r3, [r3, #440]	; 0x1b8
   15a3c:	mov	r1, r0
   15a40:	str	r0, [sp, #32]
   15a44:	mov	r0, r5
   15a48:	blx	r3
   15a4c:	cmp	r0, #0
   15a50:	mov	r1, r0
   15a54:	str	r0, [sp, #36]	; 0x24
   15a58:	blt	15e38 <__assert_fail@plt+0x3aac>
   15a5c:	ldr	r3, [pc, #1688]	; 160fc <__assert_fail@plt+0x3d70>
   15a60:	mov	r2, #4
   15a64:	ldr	r0, [sp, #32]
   15a68:	bl	12290 <qsort@plt>
   15a6c:	ldr	r0, [r4, #4]
   15a70:	ldr	r3, [r4]
   15a74:	str	r0, [sp, #96]	; 0x60
   15a78:	mov	r2, r7
   15a7c:	mov	r0, r5
   15a80:	ldr	r1, [pc, #1656]	; 16100 <__assert_fail@plt+0x3d74>
   15a84:	str	r3, [sp, #104]	; 0x68
   15a88:	bl	122f0 <bfd_map_over_sections@plt>
   15a8c:	ldr	r0, [sp, #32]
   15a90:	cmp	r0, #0
   15a94:	beq	15a9c <__assert_fail@plt+0x3710>
   15a98:	bl	11e10 <free@plt>
   15a9c:	ldr	r0, [r4, #4]
   15aa0:	bl	11e10 <free@plt>
   15aa4:	ldr	r3, [r4, #112]	; 0x70
   15aa8:	ldr	r0, [r4, #36]	; 0x24
   15aac:	cmp	r3, #0
   15ab0:	beq	156b0 <__assert_fail@plt+0x3324>
   15ab4:	mov	r1, r0
   15ab8:	mov	r3, #1
   15abc:	ldr	r2, [r4, #68]	; 0x44
   15ac0:	mov	r0, r5
   15ac4:	bl	34cf0 <__assert_fail@plt+0x22964>
   15ac8:	subs	r1, r0, #0
   15acc:	beq	15ddc <__assert_fail@plt+0x3a50>
   15ad0:	ldr	r3, [r4, #76]	; 0x4c
   15ad4:	ldr	r0, [pc, #1524]	; 160d0 <__assert_fail@plt+0x3d44>
   15ad8:	adds	r3, r3, #0
   15adc:	ldr	r2, [pc, #1568]	; 16104 <__assert_fail@plt+0x3d78>
   15ae0:	movne	r3, #1
   15ae4:	str	r3, [sp, #4]
   15ae8:	ldr	r3, [r4, #36]	; 0x24
   15aec:	ldr	r0, [r0]
   15af0:	str	r2, [sp]
   15af4:	mov	r2, r5
   15af8:	bl	34a10 <__assert_fail@plt+0x22684>
   15afc:	cmp	r0, #0
   15b00:	beq	16054 <__assert_fail@plt+0x3cc8>
   15b04:	ldr	r0, [r4, #36]	; 0x24
   15b08:	b	156b0 <__assert_fail@plt+0x3324>
   15b0c:	mov	r2, #5
   15b10:	ldr	r1, [pc, #1520]	; 16108 <__assert_fail@plt+0x3d7c>
   15b14:	mov	r0, #0
   15b18:	bl	11ea0 <dcgettext@plt>
   15b1c:	mov	r6, r0
   15b20:	mov	r0, r5
   15b24:	bl	120a4 <bfd_get_arch@plt>
   15b28:	mov	r7, r0
   15b2c:	mov	r0, r5
   15b30:	bl	12140 <bfd_get_mach@plt>
   15b34:	mov	r1, r0
   15b38:	mov	r0, r7
   15b3c:	bl	120c8 <bfd_printable_arch_mach@plt>
   15b40:	mov	r1, r0
   15b44:	mov	r0, r6
   15b48:	bl	11dbc <printf@plt>
   15b4c:	mov	r2, #5
   15b50:	ldr	r1, [pc, #1460]	; 1610c <__assert_fail@plt+0x3d80>
   15b54:	mov	r0, #0
   15b58:	bl	11ea0 <dcgettext@plt>
   15b5c:	ldr	r1, [r5, #40]	; 0x28
   15b60:	ldr	r6, [pc, #1448]	; 16110 <__assert_fail@plt+0x3d84>
   15b64:	and	r1, r6, r1, lsr #5
   15b68:	lsl	r1, r1, #22
   15b6c:	lsr	r1, r1, #22
   15b70:	bl	11dbc <printf@plt>
   15b74:	ldr	r3, [r5, #40]	; 0x28
   15b78:	and	r3, r6, r3, lsr #5
   15b7c:	tst	r3, #1
   15b80:	ldreq	r1, [pc, #1420]	; 16114 <__assert_fail@plt+0x3d88>
   15b84:	bne	15f70 <__assert_fail@plt+0x3be4>
   15b88:	tst	r3, #2
   15b8c:	bne	15e40 <__assert_fail@plt+0x3ab4>
   15b90:	tst	r3, #4
   15b94:	bne	15e64 <__assert_fail@plt+0x3ad8>
   15b98:	tst	r3, #8
   15b9c:	bne	15e88 <__assert_fail@plt+0x3afc>
   15ba0:	tst	r3, #16
   15ba4:	bne	15eac <__assert_fail@plt+0x3b20>
   15ba8:	tst	r3, #32
   15bac:	bne	15ed0 <__assert_fail@plt+0x3b44>
   15bb0:	tst	r3, #64	; 0x40
   15bb4:	bne	15ef4 <__assert_fail@plt+0x3b68>
   15bb8:	tst	r3, #128	; 0x80
   15bbc:	bne	15f18 <__assert_fail@plt+0x3b8c>
   15bc0:	tst	r3, #256	; 0x100
   15bc4:	bne	15f3c <__assert_fail@plt+0x3bb0>
   15bc8:	tst	r3, #512	; 0x200
   15bcc:	bne	15f60 <__assert_fail@plt+0x3bd4>
   15bd0:	mov	r2, #5
   15bd4:	ldr	r1, [pc, #1340]	; 16118 <__assert_fail@plt+0x3d8c>
   15bd8:	mov	r0, #0
   15bdc:	bl	11ea0 <dcgettext@plt>
   15be0:	bl	11dbc <printf@plt>
   15be4:	ldr	r3, [pc, #1252]	; 160d0 <__assert_fail@plt+0x3d44>
   15be8:	mov	r0, r5
   15bec:	ldr	r2, [r5, #116]	; 0x74
   15bf0:	ldr	r1, [r3]
   15bf4:	bl	122d8 <bfd_fprintf_vma@plt>
   15bf8:	mov	r0, #10
   15bfc:	bl	1211c <putchar@plt>
   15c00:	b	154e0 <__assert_fail@plt+0x3154>
   15c04:	ldr	r1, [pc, #1220]	; 160d0 <__assert_fail@plt+0x3d44>
   15c08:	mov	r3, #0
   15c0c:	mov	r2, #1
   15c10:	ldr	r0, [r1]
   15c14:	mov	r1, r5
   15c18:	bl	40be0 <__assert_fail@plt+0x2e854>
   15c1c:	b	154d4 <__assert_fail@plt+0x3148>
   15c20:	ldr	r3, [r0, #40]	; 0x28
   15c24:	add	r2, sp, #48	; 0x30
   15c28:	ldr	r1, [pc, #1260]	; 1611c <__assert_fail@plt+0x3d90>
   15c2c:	lsr	r3, r3, #5
   15c30:	and	r3, r3, #1
   15c34:	str	r3, [sp, #48]	; 0x30
   15c38:	bl	122f0 <bfd_map_over_sections@plt>
   15c3c:	ldr	r0, [r4, #76]	; 0x4c
   15c40:	ldr	r3, [r4, #80]	; 0x50
   15c44:	orrs	r0, r0, r3
   15c48:	bne	154c8 <__assert_fail@plt+0x313c>
   15c4c:	mov	r2, #5
   15c50:	ldr	r1, [pc, #1224]	; 16120 <__assert_fail@plt+0x3d94>
   15c54:	bl	11ea0 <dcgettext@plt>
   15c58:	ldm	r5, {r1, r3}
   15c5c:	ldr	r2, [r3]
   15c60:	bl	11dbc <printf@plt>
   15c64:	b	154c8 <__assert_fail@plt+0x313c>
   15c68:	mov	r3, #13
   15c6c:	mov	r2, #5
   15c70:	ldr	r1, [pc, #1196]	; 16124 <__assert_fail@plt+0x3d98>
   15c74:	mov	r0, #0
   15c78:	str	r3, [sp, #48]	; 0x30
   15c7c:	bl	11ea0 <dcgettext@plt>
   15c80:	bl	11dbc <printf@plt>
   15c84:	ldr	r3, [r4, #56]	; 0x38
   15c88:	add	r7, sp, #48	; 0x30
   15c8c:	cmp	r3, #0
   15c90:	bne	15fa8 <__assert_fail@plt+0x3c1c>
   15c94:	mov	r2, #5
   15c98:	ldr	r1, [pc, #1160]	; 16128 <__assert_fail@plt+0x3d9c>
   15c9c:	mov	r0, #0
   15ca0:	bl	11ea0 <dcgettext@plt>
   15ca4:	ldr	r2, [pc, #1152]	; 1612c <__assert_fail@plt+0x3da0>
   15ca8:	mov	r3, #10
   15cac:	ldr	r1, [pc, #1148]	; 16130 <__assert_fail@plt+0x3da4>
   15cb0:	strd	r2, [sp]
   15cb4:	str	r1, [sp, #8]
   15cb8:	ldr	r2, [pc, #1140]	; 16134 <__assert_fail@plt+0x3da8>
   15cbc:	ldr	r1, [sp, #48]	; 0x30
   15cc0:	bl	11dbc <printf@plt>
   15cc4:	ldr	r3, [r4, #56]	; 0x38
   15cc8:	cmp	r3, #0
   15ccc:	bne	15f90 <__assert_fail@plt+0x3c04>
   15cd0:	mov	r0, #10
   15cd4:	bl	1211c <putchar@plt>
   15cd8:	mov	r2, r7
   15cdc:	ldr	r1, [pc, #1108]	; 16138 <__assert_fail@plt+0x3dac>
   15ce0:	mov	r0, r5
   15ce4:	bl	122f0 <bfd_map_over_sections@plt>
   15ce8:	b	155a0 <__assert_fail@plt+0x3214>
   15cec:	mov	r2, #0
   15cf0:	ldr	r1, [pc, #1092]	; 1613c <__assert_fail@plt+0x3db0>
   15cf4:	mov	r0, r5
   15cf8:	bl	122f0 <bfd_map_over_sections@plt>
   15cfc:	b	15694 <__assert_fail@plt+0x3308>
   15d00:	mov	r0, r5
   15d04:	ldr	r2, [pc, #1076]	; 16140 <__assert_fail@plt+0x3db4>
   15d08:	ldr	r1, [pc, #1076]	; 16144 <__assert_fail@plt+0x3db8>
   15d0c:	bl	13700 <__assert_fail@plt+0x1374>
   15d10:	mov	r0, r5
   15d14:	ldr	r2, [pc, #1068]	; 16148 <__assert_fail@plt+0x3dbc>
   15d18:	ldr	r1, [pc, #1068]	; 1614c <__assert_fail@plt+0x3dc0>
   15d1c:	bl	13700 <__assert_fail@plt+0x1374>
   15d20:	mov	r0, r5
   15d24:	ldr	r2, [pc, #1060]	; 16150 <__assert_fail@plt+0x3dc4>
   15d28:	ldr	r1, [pc, #1060]	; 16154 <__assert_fail@plt+0x3dc8>
   15d2c:	bl	13700 <__assert_fail@plt+0x1374>
   15d30:	mov	r0, r5
   15d34:	ldr	r2, [pc, #1052]	; 16158 <__assert_fail@plt+0x3dcc>
   15d38:	ldr	r1, [pc, #1052]	; 1615c <__assert_fail@plt+0x3dd0>
   15d3c:	bl	13700 <__assert_fail@plt+0x1374>
   15d40:	ldr	r2, [pc, #1048]	; 16160 <__assert_fail@plt+0x3dd4>
   15d44:	ldr	r1, [pc, #1048]	; 16164 <__assert_fail@plt+0x3dd8>
   15d48:	mov	r0, r5
   15d4c:	bl	13700 <__assert_fail@plt+0x1374>
   15d50:	b	15664 <__assert_fail@plt+0x32d8>
   15d54:	mov	r0, r5
   15d58:	bl	146e4 <__assert_fail@plt+0x2358>
   15d5c:	b	15658 <__assert_fail@plt+0x32cc>
   15d60:	mov	r0, #1
   15d64:	bl	152a4 <__assert_fail@plt+0x2f18>
   15d68:	b	1564c <__assert_fail@plt+0x32c0>
   15d6c:	mov	r0, #0
   15d70:	bl	152a4 <__assert_fail@plt+0x2f18>
   15d74:	b	15640 <__assert_fail@plt+0x32b4>
   15d78:	bl	11f3c <xmalloc@plt>
   15d7c:	mov	r6, r0
   15d80:	b	15570 <__assert_fail@plt+0x31e4>
   15d84:	ldr	r3, [r5, #4]
   15d88:	mov	r0, r5
   15d8c:	ldr	r3, [r3, #436]	; 0x1b4
   15d90:	blx	r3
   15d94:	subs	r7, r0, #0
   15d98:	blt	15e38 <__assert_fail@plt+0x3aac>
   15d9c:	ldr	r0, [pc, #964]	; 16168 <__assert_fail@plt+0x3ddc>
   15da0:	bl	11dbc <printf@plt>
   15da4:	cmp	r7, #0
   15da8:	bne	15fbc <__assert_fail@plt+0x3c30>
   15dac:	ldr	r0, [pc, #952]	; 1616c <__assert_fail@plt+0x3de0>
   15db0:	bl	11fe4 <puts@plt>
   15db4:	b	15688 <__assert_fail@plt+0x32fc>
   15db8:	mov	r0, #452	; 0x1c4
   15dbc:	bl	11f3c <xmalloc@plt>
   15dc0:	mov	r2, #452	; 0x1c4
   15dc4:	ldr	r1, [r5, #4]
   15dc8:	bl	11e40 <memcpy@plt>
   15dcc:	ldr	r2, [r6, #8]
   15dd0:	str	r0, [r5, #4]
   15dd4:	str	r2, [r0, #8]
   15dd8:	b	15958 <__assert_fail@plt+0x35cc>
   15ddc:	ldr	r3, [r4, #116]	; 0x74
   15de0:	cmp	r3, #0
   15de4:	bne	15b04 <__assert_fail@plt+0x3778>
   15de8:	bl	30b9c <__assert_fail@plt+0x1e810>
   15dec:	mov	r0, r5
   15df0:	bl	146e4 <__assert_fail@plt+0x2358>
   15df4:	b	15b04 <__assert_fail@plt+0x3778>
   15df8:	cmp	r3, #1
   15dfc:	movne	r3, #2
   15e00:	strne	r3, [sp, #72]	; 0x48
   15e04:	bne	15a08 <__assert_fail@plt+0x367c>
   15e08:	b	15a00 <__assert_fail@plt+0x3674>
   15e0c:	ldr	r3, [pc, #700]	; 160d0 <__assert_fail@plt+0x3d44>
   15e10:	mov	r0, #10
   15e14:	ldr	r1, [r3]
   15e18:	bl	12254 <putc@plt>
   15e1c:	b	15518 <__assert_fail@plt+0x318c>
   15e20:	bl	11f3c <xmalloc@plt>
   15e24:	mov	r6, r0
   15e28:	b	155c8 <__assert_fail@plt+0x323c>
   15e2c:	ldr	r3, [r4, #128]	; 0x80
   15e30:	cmp	r3, #0
   15e34:	beq	15a6c <__assert_fail@plt+0x36e0>
   15e38:	ldr	r0, [r5]
   15e3c:	bl	40630 <__assert_fail@plt+0x2e2a4>
   15e40:	ldr	r2, [pc, #808]	; 16170 <__assert_fail@plt+0x3de4>
   15e44:	ldr	r0, [pc, #808]	; 16174 <__assert_fail@plt+0x3de8>
   15e48:	bl	11dbc <printf@plt>
   15e4c:	ldr	r2, [r5, #40]	; 0x28
   15e50:	ldr	r3, [pc, #696]	; 16110 <__assert_fail@plt+0x3d84>
   15e54:	ldr	r1, [pc, #796]	; 16178 <__assert_fail@plt+0x3dec>
   15e58:	and	r3, r3, r2, lsr #5
   15e5c:	tst	r3, #4
   15e60:	beq	15b98 <__assert_fail@plt+0x380c>
   15e64:	ldr	r2, [pc, #784]	; 1617c <__assert_fail@plt+0x3df0>
   15e68:	ldr	r0, [pc, #772]	; 16174 <__assert_fail@plt+0x3de8>
   15e6c:	bl	11dbc <printf@plt>
   15e70:	ldr	r2, [r5, #40]	; 0x28
   15e74:	ldr	r3, [pc, #660]	; 16110 <__assert_fail@plt+0x3d84>
   15e78:	ldr	r1, [pc, #760]	; 16178 <__assert_fail@plt+0x3dec>
   15e7c:	and	r3, r3, r2, lsr #5
   15e80:	tst	r3, #8
   15e84:	beq	15ba0 <__assert_fail@plt+0x3814>
   15e88:	ldr	r2, [pc, #752]	; 16180 <__assert_fail@plt+0x3df4>
   15e8c:	ldr	r0, [pc, #736]	; 16174 <__assert_fail@plt+0x3de8>
   15e90:	bl	11dbc <printf@plt>
   15e94:	ldr	r2, [r5, #40]	; 0x28
   15e98:	ldr	r3, [pc, #624]	; 16110 <__assert_fail@plt+0x3d84>
   15e9c:	ldr	r1, [pc, #724]	; 16178 <__assert_fail@plt+0x3dec>
   15ea0:	and	r3, r3, r2, lsr #5
   15ea4:	tst	r3, #16
   15ea8:	beq	15ba8 <__assert_fail@plt+0x381c>
   15eac:	ldr	r2, [pc, #720]	; 16184 <__assert_fail@plt+0x3df8>
   15eb0:	ldr	r0, [pc, #700]	; 16174 <__assert_fail@plt+0x3de8>
   15eb4:	bl	11dbc <printf@plt>
   15eb8:	ldr	r2, [r5, #40]	; 0x28
   15ebc:	ldr	r3, [pc, #588]	; 16110 <__assert_fail@plt+0x3d84>
   15ec0:	ldr	r1, [pc, #688]	; 16178 <__assert_fail@plt+0x3dec>
   15ec4:	and	r3, r3, r2, lsr #5
   15ec8:	tst	r3, #32
   15ecc:	beq	15bb0 <__assert_fail@plt+0x3824>
   15ed0:	ldr	r2, [pc, #688]	; 16188 <__assert_fail@plt+0x3dfc>
   15ed4:	ldr	r0, [pc, #664]	; 16174 <__assert_fail@plt+0x3de8>
   15ed8:	bl	11dbc <printf@plt>
   15edc:	ldr	r2, [r5, #40]	; 0x28
   15ee0:	ldr	r3, [pc, #552]	; 16110 <__assert_fail@plt+0x3d84>
   15ee4:	ldr	r1, [pc, #652]	; 16178 <__assert_fail@plt+0x3dec>
   15ee8:	and	r3, r3, r2, lsr #5
   15eec:	tst	r3, #64	; 0x40
   15ef0:	beq	15bb8 <__assert_fail@plt+0x382c>
   15ef4:	ldr	r2, [pc, #656]	; 1618c <__assert_fail@plt+0x3e00>
   15ef8:	ldr	r0, [pc, #628]	; 16174 <__assert_fail@plt+0x3de8>
   15efc:	bl	11dbc <printf@plt>
   15f00:	ldr	r2, [r5, #40]	; 0x28
   15f04:	ldr	r3, [pc, #516]	; 16110 <__assert_fail@plt+0x3d84>
   15f08:	ldr	r1, [pc, #616]	; 16178 <__assert_fail@plt+0x3dec>
   15f0c:	and	r3, r3, r2, lsr #5
   15f10:	tst	r3, #128	; 0x80
   15f14:	beq	15bc0 <__assert_fail@plt+0x3834>
   15f18:	ldr	r2, [pc, #624]	; 16190 <__assert_fail@plt+0x3e04>
   15f1c:	ldr	r0, [pc, #592]	; 16174 <__assert_fail@plt+0x3de8>
   15f20:	bl	11dbc <printf@plt>
   15f24:	ldr	r2, [r5, #40]	; 0x28
   15f28:	ldr	r3, [pc, #480]	; 16110 <__assert_fail@plt+0x3d84>
   15f2c:	ldr	r1, [pc, #580]	; 16178 <__assert_fail@plt+0x3dec>
   15f30:	and	r3, r3, r2, lsr #5
   15f34:	tst	r3, #256	; 0x100
   15f38:	beq	15bc8 <__assert_fail@plt+0x383c>
   15f3c:	ldr	r2, [pc, #592]	; 16194 <__assert_fail@plt+0x3e08>
   15f40:	ldr	r0, [pc, #556]	; 16174 <__assert_fail@plt+0x3de8>
   15f44:	bl	11dbc <printf@plt>
   15f48:	ldr	r2, [r5, #40]	; 0x28
   15f4c:	ldr	r3, [pc, #444]	; 16110 <__assert_fail@plt+0x3d84>
   15f50:	ldr	r1, [pc, #544]	; 16178 <__assert_fail@plt+0x3dec>
   15f54:	and	r3, r3, r2, lsr #5
   15f58:	tst	r3, #512	; 0x200
   15f5c:	beq	15bd0 <__assert_fail@plt+0x3844>
   15f60:	ldr	r2, [pc, #560]	; 16198 <__assert_fail@plt+0x3e0c>
   15f64:	ldr	r0, [pc, #520]	; 16174 <__assert_fail@plt+0x3de8>
   15f68:	bl	11dbc <printf@plt>
   15f6c:	b	15bd0 <__assert_fail@plt+0x3844>
   15f70:	ldr	r1, [pc, #412]	; 16114 <__assert_fail@plt+0x3d88>
   15f74:	ldr	r2, [pc, #544]	; 1619c <__assert_fail@plt+0x3e10>
   15f78:	ldr	r0, [pc, #500]	; 16174 <__assert_fail@plt+0x3de8>
   15f7c:	bl	11dbc <printf@plt>
   15f80:	ldr	r3, [r5, #40]	; 0x28
   15f84:	ldr	r1, [pc, #492]	; 16178 <__assert_fail@plt+0x3dec>
   15f88:	and	r3, r6, r3, lsr #5
   15f8c:	b	15b88 <__assert_fail@plt+0x37fc>
   15f90:	mov	r2, #5
   15f94:	ldr	r1, [pc, #516]	; 161a0 <__assert_fail@plt+0x3e14>
   15f98:	mov	r0, #0
   15f9c:	bl	11ea0 <dcgettext@plt>
   15fa0:	bl	11dbc <printf@plt>
   15fa4:	b	15cd0 <__assert_fail@plt+0x3944>
   15fa8:	mov	r2, r7
   15fac:	ldr	r1, [pc, #496]	; 161a4 <__assert_fail@plt+0x3e18>
   15fb0:	mov	r0, r5
   15fb4:	bl	122f0 <bfd_map_over_sections@plt>
   15fb8:	b	15c94 <__assert_fail@plt+0x3908>
   15fbc:	mov	r0, r7
   15fc0:	bl	11f3c <xmalloc@plt>
   15fc4:	ldr	r3, [r5, #4]
   15fc8:	ldr	r2, [r4, #60]	; 0x3c
   15fcc:	ldr	r3, [r3, #440]	; 0x1b8
   15fd0:	mov	r1, r0
   15fd4:	mov	r7, r0
   15fd8:	mov	r0, r5
   15fdc:	blx	r3
   15fe0:	subs	r8, r0, #0
   15fe4:	blt	15e38 <__assert_fail@plt+0x3aac>
   15fe8:	beq	16078 <__assert_fail@plt+0x3cec>
   15fec:	mov	r0, #10
   15ff0:	bl	1211c <putchar@plt>
   15ff4:	mov	r0, r5
   15ff8:	mov	r3, r8
   15ffc:	mov	r2, r7
   16000:	mov	r1, r6
   16004:	bl	13cf0 <__assert_fail@plt+0x1964>
   16008:	ldr	r0, [pc, #408]	; 161a8 <__assert_fail@plt+0x3e1c>
   1600c:	bl	11fe4 <puts@plt>
   16010:	mov	r0, r7
   16014:	bl	11e10 <free@plt>
   16018:	b	15688 <__assert_fail@plt+0x32fc>
   1601c:	mov	r2, #5
   16020:	ldr	r1, [pc, #388]	; 161ac <__assert_fail@plt+0x3e20>
   16024:	bl	11ea0 <dcgettext@plt>
   16028:	mov	r7, r0
   1602c:	mov	r0, r5
   16030:	bl	120a4 <bfd_get_arch@plt>
   16034:	mov	r1, r6
   16038:	bl	120c8 <bfd_printable_arch_mach@plt>
   1603c:	mov	r1, r0
   16040:	mov	r0, r7
   16044:	bl	406c8 <__assert_fail@plt+0x2e33c>
   16048:	mov	r3, #1
   1604c:	str	r3, [r4, #16]
   16050:	b	156a0 <__assert_fail@plt+0x3314>
   16054:	mov	r2, #5
   16058:	ldr	r1, [pc, #336]	; 161b0 <__assert_fail@plt+0x3e24>
   1605c:	bl	11ea0 <dcgettext@plt>
   16060:	ldr	r1, [r5]
   16064:	bl	406c8 <__assert_fail@plt+0x2e33c>
   16068:	mov	r3, #1
   1606c:	str	r3, [r4, #16]
   16070:	ldr	r0, [r4, #36]	; 0x24
   16074:	b	156b0 <__assert_fail@plt+0x3324>
   16078:	ldr	r0, [pc, #236]	; 1616c <__assert_fail@plt+0x3de0>
   1607c:	bl	11fe4 <puts@plt>
   16080:	b	16010 <__assert_fail@plt+0x3c84>
   16084:	ldr	r1, [pc, #296]	; 161b4 <__assert_fail@plt+0x3e28>
   16088:	mov	r2, #5
   1608c:	bl	11ea0 <dcgettext@plt>
   16090:	ldr	r1, [r4, #160]	; 0xa0
   16094:	bl	406a0 <__assert_fail@plt+0x2e314>
   16098:	mov	r2, #5
   1609c:	ldr	r1, [pc, #276]	; 161b8 <__assert_fail@plt+0x3e2c>
   160a0:	mov	r0, #0
   160a4:	bl	11ea0 <dcgettext@plt>
   160a8:	ldr	r1, [r5]
   160ac:	bl	406c8 <__assert_fail@plt+0x2e33c>
   160b0:	mov	r2, #5
   160b4:	ldr	r1, [pc, #256]	; 161bc <__assert_fail@plt+0x3e30>
   160b8:	mov	r0, #0
   160bc:	bl	11ea0 <dcgettext@plt>
   160c0:	bl	40630 <__assert_fail@plt+0x2e2a4>
   160c4:	andeq	r7, r6, r0, asr #8
   160c8:	andeq	r8, r4, ip, lsr #29
   160cc:	andeq	r7, r6, r4, asr #9
   160d0:	andeq	r7, r6, r0, lsr r4
   160d4:	andeq	r8, r4, r8, ror #30
   160d8:	muleq	r1, r0, r6
   160dc:	andeq	r9, r4, ip, lsr r0
   160e0:	andeq	r9, r4, r4, asr #32
   160e4:	andeq	r7, r6, r8, lsr r2
   160e8:	andeq	r4, r1, r4, ror #3
   160ec:	strheq	r2, [r1], -r0
   160f0:	ldrdeq	r3, [r1], -r8
   160f4:	andeq	r3, r1, ip, ror #10
   160f8:	andeq	r6, r6, r0, asr #4
   160fc:	andeq	r2, r1, ip, lsr #29
   16100:	andeq	r6, r1, r4, lsr r8
   16104:			; <UNDEFINED> instruction: 0x000121b8
   16108:	andeq	r8, r4, r4, lsl #28
   1610c:	andeq	r8, r4, r8, lsl lr
   16110:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   16114:	andeq	r9, r4, r4, lsr #5
   16118:	muleq	r4, r8, lr
   1611c:	andeq	r4, r1, r4, ror #16
   16120:	andeq	r8, r4, r8, ror #27
   16124:	andeq	r8, r4, r8, lsl pc
   16128:	andeq	r8, r4, r4, lsr #30
   1612c:	andeq	r8, r4, ip, asr pc
   16130:	andeq	r8, r4, r8, asr pc
   16134:	andeq	r8, r4, r0, asr pc
   16138:	strdeq	r4, [r1], -r8
   1613c:	andeq	r4, r1, r8, asr #28
   16140:	andeq	r8, r4, r4, lsl #31
   16144:	muleq	r4, r0, pc	; <UNPREDICTABLE>
   16148:	muleq	r4, r8, pc	; <UNPREDICTABLE>
   1614c:	andeq	r8, r4, r8, lsr #31
   16150:			; <UNDEFINED> instruction: 0x00048fb4
   16154:	andeq	r8, r4, r4, asr #31
   16158:	ldrdeq	r8, [r4], -r0
   1615c:	andeq	r8, r4, r4, ror #31
   16160:	strdeq	r8, [r4], -r4
   16164:	andeq	r9, r4, r4
   16168:	andeq	r9, r4, r4, lsl r0
   1616c:	andeq	r9, r4, r0, lsr r0
   16170:	andeq	r8, r4, r4, lsr lr
   16174:	andeq	sp, r4, r0, asr #31
   16178:	andeq	r8, r4, r4, lsl lr
   1617c:	andeq	r8, r4, ip, lsr lr
   16180:	andeq	r8, r4, r8, asr #28
   16184:	andeq	r8, r4, r4, asr lr
   16188:	andeq	r8, r4, r0, ror #28
   1618c:	andeq	r8, r4, ip, ror #28
   16190:	andeq	r8, r4, r4, ror lr
   16194:	andeq	r8, r4, ip, ror lr
   16198:	andeq	r8, r4, r4, lsl #29
   1619c:	andeq	r8, r4, r8, lsr #28
   161a0:	andeq	r8, r4, r0, ror #30
   161a4:	andeq	r5, r1, r4, ror #4
   161a8:	andeq	sl, r4, r4, ror pc
   161ac:	andeq	r9, r4, ip, rrx
   161b0:	muleq	r4, r4, r0
   161b4:	andeq	r9, r4, ip, asr #32
   161b8:	ldrdeq	r8, [r4], -ip
   161bc:	andeq	r8, r4, r4, lsl #30
   161c0:	push	{r4, r5, r6, r7, r8, lr}
   161c4:	mov	r7, r1
   161c8:	ldr	r8, [pc, #440]	; 16388 <__assert_fail@plt+0x3ffc>
   161cc:	sub	sp, sp, #8
   161d0:	mov	r1, #2
   161d4:	ldr	r3, [r8, #144]	; 0x90
   161d8:	mov	r6, r0
   161dc:	cmp	r3, #0
   161e0:	ldreq	r3, [r0, #40]	; 0x28
   161e4:	orreq	r3, r3, #1048576	; 0x100000
   161e8:	streq	r3, [r0, #40]	; 0x28
   161ec:	bl	122c0 <bfd_check_format@plt>
   161f0:	cmp	r0, #0
   161f4:	beq	162b8 <__assert_fail@plt+0x3f2c>
   161f8:	cmp	r7, #0
   161fc:	mov	r2, #5
   16200:	beq	162a0 <__assert_fail@plt+0x3f14>
   16204:	cmp	r7, #100	; 0x64
   16208:	bgt	16378 <__assert_fail@plt+0x3fec>
   1620c:	ldr	r1, [pc, #376]	; 1638c <__assert_fail@plt+0x4000>
   16210:	mov	r0, #0
   16214:	bl	11ea0 <dcgettext@plt>
   16218:	ldr	r1, [r6]
   1621c:	bl	11dbc <printf@plt>
   16220:	add	r7, r7, #1
   16224:	mov	r4, #0
   16228:	b	16250 <__assert_fail@plt+0x3ec4>
   1622c:	mov	r1, r7
   16230:	bl	161c0 <__assert_fail@plt+0x3e34>
   16234:	cmp	r4, #0
   16238:	beq	1624c <__assert_fail@plt+0x3ec0>
   1623c:	mov	r0, r4
   16240:	bl	12224 <bfd_close@plt>
   16244:	cmp	r4, r5
   16248:	beq	16298 <__assert_fail@plt+0x3f0c>
   1624c:	mov	r4, r5
   16250:	mov	r0, #0
   16254:	bl	11f48 <bfd_set_error@plt>
   16258:	mov	r1, r4
   1625c:	mov	r0, r6
   16260:	bl	122cc <bfd_openr_next_archived_file@plt>
   16264:	subs	r5, r0, #0
   16268:	bne	1622c <__assert_fail@plt+0x3ea0>
   1626c:	bl	11f00 <bfd_get_error@plt>
   16270:	cmp	r0, #9
   16274:	beq	16288 <__assert_fail@plt+0x3efc>
   16278:	ldr	r0, [r6]
   1627c:	bl	403fc <__assert_fail@plt+0x2e070>
   16280:	mov	r3, #1
   16284:	str	r3, [r8, #16]
   16288:	cmp	r4, #0
   1628c:	beq	16298 <__assert_fail@plt+0x3f0c>
   16290:	mov	r0, r4
   16294:	bl	12224 <bfd_close@plt>
   16298:	add	sp, sp, #8
   1629c:	pop	{r4, r5, r6, r7, r8, pc}
   162a0:	ldr	r1, [pc, #232]	; 16390 <__assert_fail@plt+0x4004>
   162a4:	mov	r0, r7
   162a8:	bl	11ea0 <dcgettext@plt>
   162ac:	ldr	r1, [r6]
   162b0:	bl	11dbc <printf@plt>
   162b4:	b	16220 <__assert_fail@plt+0x3e94>
   162b8:	add	r2, sp, #4
   162bc:	mov	r1, #1
   162c0:	mov	r0, r6
   162c4:	bl	12260 <bfd_check_format_matches@plt>
   162c8:	cmp	r0, #0
   162cc:	bne	162fc <__assert_fail@plt+0x3f70>
   162d0:	bl	11f00 <bfd_get_error@plt>
   162d4:	cmp	r0, #13
   162d8:	beq	16354 <__assert_fail@plt+0x3fc8>
   162dc:	bl	11f00 <bfd_get_error@plt>
   162e0:	cmp	r0, #12
   162e4:	beq	1630c <__assert_fail@plt+0x3f80>
   162e8:	ldr	r0, [r6]
   162ec:	bl	403fc <__assert_fail@plt+0x2e070>
   162f0:	mov	r3, #1
   162f4:	str	r3, [r8, #16]
   162f8:	b	16298 <__assert_fail@plt+0x3f0c>
   162fc:	mov	r0, r6
   16300:	bl	1549c <__assert_fail@plt+0x3110>
   16304:	add	sp, sp, #8
   16308:	pop	{r4, r5, r6, r7, r8, pc}
   1630c:	add	r2, sp, #4
   16310:	mov	r1, #3
   16314:	mov	r0, r6
   16318:	bl	12260 <bfd_check_format_matches@plt>
   1631c:	cmp	r0, #0
   16320:	bne	162fc <__assert_fail@plt+0x3f70>
   16324:	ldr	r0, [r6]
   16328:	bl	403fc <__assert_fail@plt+0x2e070>
   1632c:	mov	r3, #1
   16330:	str	r3, [r8, #16]
   16334:	bl	11f00 <bfd_get_error@plt>
   16338:	cmp	r0, #13
   1633c:	bne	16298 <__assert_fail@plt+0x3f0c>
   16340:	ldr	r0, [sp, #4]
   16344:	bl	4073c <__assert_fail@plt+0x2e3b0>
   16348:	ldr	r0, [sp, #4]
   1634c:	bl	11e10 <free@plt>
   16350:	b	16298 <__assert_fail@plt+0x3f0c>
   16354:	ldr	r0, [r6]
   16358:	bl	403fc <__assert_fail@plt+0x2e070>
   1635c:	mov	r3, #1
   16360:	ldr	r0, [sp, #4]
   16364:	str	r3, [r8, #16]
   16368:	bl	4073c <__assert_fail@plt+0x2e3b0>
   1636c:	ldr	r0, [sp, #4]
   16370:	bl	11e10 <free@plt>
   16374:	b	16298 <__assert_fail@plt+0x3f0c>
   16378:	ldr	r1, [pc, #20]	; 16394 <__assert_fail@plt+0x4008>
   1637c:	mov	r0, #0
   16380:	bl	11ea0 <dcgettext@plt>
   16384:	bl	406a0 <__assert_fail@plt+0x2e314>
   16388:	andeq	r7, r6, r0, asr #8
   1638c:	andeq	r9, r4, ip, ror #1
   16390:	andeq	r9, r4, r0, asr #1
   16394:	ldrdeq	r9, [r4], -r0
   16398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1639c:	mov	r5, r0
   163a0:	ldr	r4, [r2]
   163a4:	sub	sp, sp, #28
   163a8:	mov	r0, r4
   163ac:	mov	r8, r1
   163b0:	mov	r7, r2
   163b4:	bl	12074 <strlen@plt>
   163b8:	ldr	r9, [r8]
   163bc:	mov	r1, r9
   163c0:	mov	r6, r0
   163c4:	mov	r2, r6
   163c8:	mov	r0, r4
   163cc:	bl	12320 <strncmp@plt>
   163d0:	cmp	r0, #0
   163d4:	bne	1658c <__assert_fail@plt+0x4200>
   163d8:	ldrb	r3, [r9, r6]
   163dc:	cmp	r3, #0
   163e0:	bne	16594 <__assert_fail@plt+0x4208>
   163e4:	ldr	sl, [pc, #616]	; 16654 <__assert_fail@plt+0x42c8>
   163e8:	ldr	r3, [sl, #8]
   163ec:	cmp	r3, #0
   163f0:	beq	16630 <__assert_fail@plt+0x42a4>
   163f4:	mov	r1, r9
   163f8:	ldr	r2, [pc, #600]	; 16658 <__assert_fail@plt+0x42cc>
   163fc:	mov	r0, r5
   16400:	bl	138a8 <__assert_fail@plt+0x151c>
   16404:	cmp	r0, #0
   16408:	mov	r4, r0
   1640c:	str	r0, [sl, #176]	; 0xb0
   16410:	beq	1658c <__assert_fail@plt+0x4200>
   16414:	ldr	r3, [r7, #8]
   16418:	ldr	r8, [r8]
   1641c:	mov	r2, #5
   16420:	ldr	r1, [pc, #564]	; 1665c <__assert_fail@plt+0x42d0>
   16424:	mov	r0, #0
   16428:	str	r3, [sp, #8]
   1642c:	ldr	r6, [sl, #172]	; 0xac
   16430:	bl	11ea0 <dcgettext@plt>
   16434:	mov	r1, r8
   16438:	bl	11dbc <printf@plt>
   1643c:	ldr	r0, [pc, #540]	; 16660 <__assert_fail@plt+0x42d4>
   16440:	bl	11fe4 <puts@plt>
   16444:	sub	r3, r6, #12
   16448:	adds	r3, r4, r3
   1644c:	str	r3, [sp, #12]
   16450:	bcs	1657c <__assert_fail@plt+0x41f0>
   16454:	mov	r3, #0
   16458:	str	r3, [sp, #16]
   1645c:	mvn	fp, #0
   16460:	str	r7, [sp, #20]
   16464:	b	164cc <__assert_fail@plt+0x4140>
   16468:	ldr	r0, [pc, #500]	; 16664 <__assert_fail@plt+0x42d8>
   1646c:	bl	11dbc <printf@plt>
   16470:	uxth	r2, r8
   16474:	ldr	r1, [sp, #4]
   16478:	ldr	r0, [pc, #488]	; 16668 <__assert_fail@plt+0x42dc>
   1647c:	bl	11dbc <printf@plt>
   16480:	ldr	r3, [pc, #484]	; 1666c <__assert_fail@plt+0x42e0>
   16484:	mov	r2, r9
   16488:	mov	r0, r5
   1648c:	ldr	r1, [r3]
   16490:	bl	122d8 <bfd_fprintf_vma@plt>
   16494:	mov	r1, r6
   16498:	ldr	r0, [pc, #464]	; 16670 <__assert_fail@plt+0x42e4>
   1649c:	bl	11dbc <printf@plt>
   164a0:	cmp	r7, #0
   164a4:	bne	165f8 <__assert_fail@plt+0x426c>
   164a8:	ldr	r3, [sp, #8]
   164ac:	str	r3, [sp, #16]
   164b0:	add	r3, r9, r3
   164b4:	str	r3, [sp, #8]
   164b8:	ldr	r3, [sp, #12]
   164bc:	add	r4, r4, #12
   164c0:	cmp	r4, r3
   164c4:	add	fp, fp, #1
   164c8:	bhi	16578 <__assert_fail@plt+0x41ec>
   164cc:	ldr	r3, [r5, #4]
   164d0:	mov	r0, r4
   164d4:	ldr	r3, [r3, #76]	; 0x4c
   164d8:	blx	r3
   164dc:	ldr	r3, [r5, #4]
   164e0:	ldrb	r2, [r4, #5]
   164e4:	ldrb	r7, [r4, #4]
   164e8:	ldr	r3, [r3, #88]	; 0x58
   164ec:	str	r2, [sp, #4]
   164f0:	mov	r6, r0
   164f4:	add	r0, r4, #6
   164f8:	blx	r3
   164fc:	ldr	r3, [r5, #4]
   16500:	ldr	r3, [r3, #76]	; 0x4c
   16504:	mov	r8, r0
   16508:	add	r0, r4, #8
   1650c:	blx	r3
   16510:	mov	r1, fp
   16514:	mov	r9, r0
   16518:	ldr	r0, [pc, #340]	; 16674 <__assert_fail@plt+0x42e8>
   1651c:	bl	11dbc <printf@plt>
   16520:	mov	r0, r7
   16524:	bl	11dc8 <bfd_get_stab_name@plt>
   16528:	subs	r1, r0, #0
   1652c:	bne	16468 <__assert_fail@plt+0x40dc>
   16530:	cmp	r7, #0
   16534:	uxth	r8, r8
   16538:	bne	165bc <__assert_fail@plt+0x4230>
   1653c:	ldr	r0, [pc, #308]	; 16678 <__assert_fail@plt+0x42ec>
   16540:	bl	11dbc <printf@plt>
   16544:	mov	r2, r8
   16548:	ldr	r1, [sp, #4]
   1654c:	ldr	r0, [pc, #276]	; 16668 <__assert_fail@plt+0x42dc>
   16550:	bl	11dbc <printf@plt>
   16554:	ldr	r3, [pc, #272]	; 1666c <__assert_fail@plt+0x42e0>
   16558:	mov	r0, r5
   1655c:	mov	r2, r9
   16560:	ldr	r1, [r3]
   16564:	bl	122d8 <bfd_fprintf_vma@plt>
   16568:	mov	r1, r6
   1656c:	ldr	r0, [pc, #252]	; 16670 <__assert_fail@plt+0x42e4>
   16570:	bl	11dbc <printf@plt>
   16574:	b	164a8 <__assert_fail@plt+0x411c>
   16578:	ldr	r7, [sp, #20]
   1657c:	ldr	r0, [pc, #248]	; 1667c <__assert_fail@plt+0x42f0>
   16580:	bl	11fe4 <puts@plt>
   16584:	ldr	r3, [sp, #8]
   16588:	str	r3, [r7, #8]
   1658c:	add	sp, sp, #28
   16590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16594:	cmp	r3, #46	; 0x2e
   16598:	bne	1658c <__assert_fail@plt+0x4200>
   1659c:	add	r6, r9, r6
   165a0:	ldr	r2, [pc, #216]	; 16680 <__assert_fail@plt+0x42f4>
   165a4:	ldrb	r3, [r6, #1]
   165a8:	lsl	r3, r3, #1
   165ac:	ldrh	r3, [r2, r3]
   165b0:	tst	r3, #4
   165b4:	beq	1658c <__assert_fail@plt+0x4200>
   165b8:	b	163e4 <__assert_fail@plt+0x4058>
   165bc:	mov	r1, r7
   165c0:	ldr	r0, [pc, #188]	; 16684 <__assert_fail@plt+0x42f8>
   165c4:	bl	11dbc <printf@plt>
   165c8:	mov	r2, r8
   165cc:	ldr	r1, [sp, #4]
   165d0:	ldr	r0, [pc, #144]	; 16668 <__assert_fail@plt+0x42dc>
   165d4:	bl	11dbc <printf@plt>
   165d8:	ldr	r3, [pc, #140]	; 1666c <__assert_fail@plt+0x42e0>
   165dc:	mov	r0, r5
   165e0:	mov	r2, r9
   165e4:	ldr	r1, [r3]
   165e8:	bl	122d8 <bfd_fprintf_vma@plt>
   165ec:	mov	r1, r6
   165f0:	ldr	r0, [pc, #120]	; 16670 <__assert_fail@plt+0x42e4>
   165f4:	bl	11dbc <printf@plt>
   165f8:	ldr	r3, [sp, #16]
   165fc:	ldr	r1, [sl, #168]	; 0xa8
   16600:	add	r6, r6, r3
   16604:	cmp	r6, r1
   16608:	bcs	16624 <__assert_fail@plt+0x4298>
   1660c:	ldr	r2, [sl, #8]
   16610:	sub	r1, r1, r6
   16614:	add	r2, r2, r6
   16618:	ldr	r0, [pc, #104]	; 16688 <__assert_fail@plt+0x42fc>
   1661c:	bl	11dbc <printf@plt>
   16620:	b	164b8 <__assert_fail@plt+0x412c>
   16624:	ldr	r0, [pc, #96]	; 1668c <__assert_fail@plt+0x4300>
   16628:	bl	11dbc <printf@plt>
   1662c:	b	164b8 <__assert_fail@plt+0x412c>
   16630:	add	r2, sl, #168	; 0xa8
   16634:	ldr	r1, [r7, #4]
   16638:	mov	r0, r5
   1663c:	bl	138a8 <__assert_fail@plt+0x151c>
   16640:	cmp	r0, #0
   16644:	str	r0, [sl, #8]
   16648:	beq	1658c <__assert_fail@plt+0x4200>
   1664c:	ldr	r9, [r8]
   16650:	b	163f4 <__assert_fail@plt+0x4068>
   16654:	andeq	r7, r6, r0, asr #8
   16658:	andeq	r7, r6, ip, ror #9
   1665c:	andeq	r9, r4, r4, lsl #2
   16660:	andeq	r9, r4, r0, lsr #2
   16664:	andeq	r9, r4, ip, asr r1
   16668:	andeq	r9, r4, r4, ror #2
   1666c:	andeq	r7, r6, r0, lsr r4
   16670:	andeq	r9, r4, r0, ror r1
   16674:	andeq	r9, r4, r4, asr r1
   16678:	andeq	r9, r4, r8, ror r1
   1667c:	andeq	sl, r4, r4, ror pc
   16680:	strdeq	r5, [r6], -r8
   16684:	andeq	r9, r4, r0, lsl #3
   16688:	andeq	r9, r4, r8, lsl #3
   1668c:	muleq	r4, r0, r1
   16690:	ldr	r3, [pc, #380]	; 16814 <__assert_fail@plt+0x4488>
   16694:	sub	r2, r3, #168	; 0xa8
   16698:	cmp	r1, r2
   1669c:	cmpne	r1, r3
   166a0:	bxeq	lr
   166a4:	ldr	r3, [r1, #20]
   166a8:	tst	r3, #4096	; 0x1000
   166ac:	bxne	lr
   166b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   166b4:	mov	r5, r0
   166b8:	mov	r0, r1
   166bc:	mov	r4, r1
   166c0:	bl	148a0 <__assert_fail@plt+0x2514>
   166c4:	cmp	r0, #0
   166c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   166cc:	ldr	r3, [r4, #20]
   166d0:	tst	r3, #4
   166d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   166d8:	mov	r1, r4
   166dc:	mov	r0, r5
   166e0:	bl	122e4 <bfd_get_reloc_upper_bound@plt>
   166e4:	subs	r6, r0, #0
   166e8:	blt	1680c <__assert_fail@plt+0x4480>
   166ec:	ldr	r1, [r4]
   166f0:	ldr	r0, [pc, #288]	; 16818 <__assert_fail@plt+0x448c>
   166f4:	bl	11dbc <printf@plt>
   166f8:	cmp	r6, #0
   166fc:	beq	167cc <__assert_fail@plt+0x4440>
   16700:	ldr	r3, [r5, #40]	; 0x28
   16704:	lsr	r3, r3, #5
   16708:	tst	r3, #6144	; 0x1800
   1670c:	bne	16760 <__assert_fail@plt+0x43d4>
   16710:	mov	r0, r5
   16714:	bl	1208c <bfd_get_file_size@plt>
   16718:	asr	r3, r6, #31
   1671c:	cmp	r3, r1
   16720:	cmpeq	r6, r0
   16724:	bhi	16744 <__assert_fail@plt+0x43b8>
   16728:	mov	r0, r5
   1672c:	ldr	r8, [r4, #76]	; 0x4c
   16730:	bl	1208c <bfd_get_file_size@plt>
   16734:	mov	r9, #0
   16738:	cmp	r9, r1
   1673c:	cmpeq	r8, r0
   16740:	bls	16760 <__assert_fail@plt+0x43d4>
   16744:	ldr	r1, [r4, #76]	; 0x4c
   16748:	ldr	r0, [pc, #204]	; 1681c <__assert_fail@plt+0x4490>
   1674c:	bl	11dbc <printf@plt>
   16750:	mov	r0, #18
   16754:	bl	11f48 <bfd_set_error@plt>
   16758:	ldr	r0, [r5]
   1675c:	bl	40630 <__assert_fail@plt+0x2e2a4>
   16760:	mov	r0, r6
   16764:	bl	11f3c <xmalloc@plt>
   16768:	ldr	r3, [pc, #176]	; 16820 <__assert_fail@plt+0x4494>
   1676c:	mov	r1, r4
   16770:	ldr	r3, [r3, #36]	; 0x24
   16774:	mov	r2, r0
   16778:	mov	r6, r0
   1677c:	mov	r0, r5
   16780:	bl	1229c <bfd_canonicalize_reloc@plt>
   16784:	subs	r7, r0, #0
   16788:	blt	167d8 <__assert_fail@plt+0x444c>
   1678c:	beq	167c0 <__assert_fail@plt+0x4434>
   16790:	mov	r0, #10
   16794:	bl	1211c <putchar@plt>
   16798:	mov	r0, r5
   1679c:	mov	r3, r7
   167a0:	mov	r2, r6
   167a4:	mov	r1, r4
   167a8:	bl	13cf0 <__assert_fail@plt+0x1964>
   167ac:	ldr	r0, [pc, #112]	; 16824 <__assert_fail@plt+0x4498>
   167b0:	bl	11fe4 <puts@plt>
   167b4:	mov	r0, r6
   167b8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   167bc:	b	11e10 <free@plt>
   167c0:	ldr	r0, [pc, #96]	; 16828 <__assert_fail@plt+0x449c>
   167c4:	bl	11fe4 <puts@plt>
   167c8:	b	167b4 <__assert_fail@plt+0x4428>
   167cc:	ldr	r0, [pc, #84]	; 16828 <__assert_fail@plt+0x449c>
   167d0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   167d4:	b	11fe4 <puts@plt>
   167d8:	mov	r0, #10
   167dc:	bl	1211c <putchar@plt>
   167e0:	mov	r2, #5
   167e4:	ldr	r1, [pc, #64]	; 1682c <__assert_fail@plt+0x44a0>
   167e8:	mov	r0, #0
   167ec:	bl	11ea0 <dcgettext@plt>
   167f0:	ldr	r1, [r5]
   167f4:	bl	406c8 <__assert_fail@plt+0x2e33c>
   167f8:	mov	r2, #5
   167fc:	ldr	r1, [pc, #44]	; 16830 <__assert_fail@plt+0x44a4>
   16800:	mov	r0, #0
   16804:	bl	11ea0 <dcgettext@plt>
   16808:	bl	40630 <__assert_fail@plt+0x2e2a4>
   1680c:	ldr	r0, [r5]
   16810:	bl	40630 <__assert_fail@plt+0x2e2a4>
   16814:	andeq	r7, r6, r0, ror #5
   16818:	muleq	r4, r4, r1
   1681c:			; <UNDEFINED> instruction: 0x000491b4
   16820:	andeq	r7, r6, r0, asr #8
   16824:	andeq	sl, r4, r4, ror pc
   16828:	andeq	r9, r4, r0, lsr r0
   1682c:	andeq	r9, r4, r8, asr #3
   16830:	andeq	r8, r4, r4, lsl #30
   16834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16838:	mov	r3, #0
   1683c:	ldr	fp, [pc, #4000]	; 177e4 <__assert_fail@plt+0x5458>
   16840:	sub	sp, sp, #300	; 0x12c
   16844:	ldr	r5, [r2, #112]	; 0x70
   16848:	ldr	ip, [fp, #180]	; 0xb4
   1684c:	str	r3, [sp, #148]	; 0x94
   16850:	cmp	ip, r3
   16854:	str	r3, [sp, #152]	; 0x98
   16858:	bne	16868 <__assert_fail@plt+0x44dc>
   1685c:	ldr	r3, [fp, #52]	; 0x34
   16860:	cmp	r3, #0
   16864:	beq	16bc4 <__assert_fail@plt+0x4838>
   16868:	str	r0, [sp, #128]	; 0x80
   1686c:	mov	r0, r1
   16870:	mov	r4, r1
   16874:	str	r1, [sp, #108]	; 0x6c
   16878:	mov	r7, r2
   1687c:	bl	148a0 <__assert_fail@plt+0x2514>
   16880:	cmp	r0, #0
   16884:	beq	16bbc <__assert_fail@plt+0x4830>
   16888:	mov	r1, r4
   1688c:	ldr	r4, [r4, #36]	; 0x24
   16890:	cmp	r4, #0
   16894:	beq	16bbc <__assert_fail@plt+0x4830>
   16898:	ldr	r3, [pc, #3912]	; 177e8 <__assert_fail@plt+0x545c>
   1689c:	ldr	r2, [r3]
   168a0:	cmn	r2, #1
   168a4:	beq	16bdc <__assert_fail@plt+0x4850>
   168a8:	ldr	r1, [r1, #28]
   168ac:	cmp	r2, r1
   168b0:	subcs	sl, r2, r1
   168b4:	bcc	16bdc <__assert_fail@plt+0x4850>
   168b8:	ldr	r6, [r3, #4]
   168bc:	cmn	r6, #1
   168c0:	beq	16bec <__assert_fail@plt+0x4860>
   168c4:	ldr	r3, [sp, #108]	; 0x6c
   168c8:	ldr	r8, [r3, #28]
   168cc:	cmp	r6, r8
   168d0:	bcc	16bbc <__assert_fail@plt+0x4830>
   168d4:	mov	r1, r5
   168d8:	mov	r0, r4
   168dc:	bl	47334 <warn@@Base+0x5b64>
   168e0:	sub	r6, r6, r8
   168e4:	cmp	r0, r6
   168e8:	movcc	r3, r0
   168ec:	movcs	r3, r6
   168f0:	str	r3, [sp, #112]	; 0x70
   168f4:	ldr	r3, [sp, #112]	; 0x70
   168f8:	cmp	r3, sl
   168fc:	bls	16bbc <__assert_fail@plt+0x4830>
   16900:	ldr	r2, [r7, #8]
   16904:	str	r2, [sp, #124]	; 0x7c
   16908:	ldr	r1, [r2, #12]
   1690c:	cmp	r1, #0
   16910:	str	r1, [sp, #40]	; 0x28
   16914:	beq	1802c <__assert_fail@plt+0x5ca0>
   16918:	ldr	r3, [fp, #128]	; 0x80
   1691c:	cmp	r3, #0
   16920:	beq	1802c <__assert_fail@plt+0x5ca0>
   16924:	ldr	r3, [r2, #16]
   16928:	ldr	r2, [sp, #108]	; 0x6c
   1692c:	add	r3, r1, r3, lsl #2
   16930:	ldr	r2, [r2, #28]
   16934:	str	r3, [sp, #60]	; 0x3c
   16938:	str	r2, [sp, #68]	; 0x44
   1693c:	mov	r2, #0
   16940:	str	r2, [sp, #140]	; 0x8c
   16944:	add	r2, sp, #148	; 0x94
   16948:	ldr	r1, [sp, #108]	; 0x6c
   1694c:	ldr	r0, [sp, #128]	; 0x80
   16950:	bl	11e4c <bfd_malloc_and_get_section@plt>
   16954:	cmp	r0, #0
   16958:	beq	16b8c <__assert_fail@plt+0x4800>
   1695c:	ldr	r1, [sp, #108]	; 0x6c
   16960:	ldr	r2, [sp, #148]	; 0x94
   16964:	ldr	r0, [sp, #40]	; 0x28
   16968:	ldr	r3, [r1, #28]
   1696c:	ldr	ip, [sp, #60]	; 0x3c
   16970:	ldr	lr, [sp, #124]	; 0x7c
   16974:	cmp	r0, ip
   16978:	str	r1, [lr, #4]
   1697c:	strd	r2, [r7, #88]	; 0x58
   16980:	str	r4, [r7, #96]	; 0x60
   16984:	str	r1, [r7, #36]	; 0x24
   16988:	bcs	169d0 <__assert_fail@plt+0x4644>
   1698c:	ldr	r3, [r0]
   16990:	ldr	r1, [sp, #68]	; 0x44
   16994:	ldr	r3, [r3, #4]
   16998:	add	r1, r1, sl
   1699c:	cmp	r1, r3
   169a0:	bls	169d0 <__assert_fail@plt+0x4644>
   169a4:	add	r3, r0, #4
   169a8:	b	169c0 <__assert_fail@plt+0x4634>
   169ac:	ldr	r0, [r3]
   169b0:	add	r3, r3, #4
   169b4:	ldr	r0, [r0, #4]
   169b8:	cmp	r0, r1
   169bc:	bcs	169cc <__assert_fail@plt+0x4640>
   169c0:	cmp	r3, ip
   169c4:	mov	r2, r3
   169c8:	bcc	169ac <__assert_fail@plt+0x4620>
   169cc:	str	r2, [sp, #40]	; 0x28
   169d0:	mov	r2, #5
   169d4:	ldr	r1, [pc, #3600]	; 177ec <__assert_fail@plt+0x5460>
   169d8:	mov	r0, #0
   169dc:	bl	11ea0 <dcgettext@plt>
   169e0:	ldr	r4, [sp, #108]	; 0x6c
   169e4:	ldr	r1, [r4]
   169e8:	bl	11dbc <printf@plt>
   169ec:	ldr	r6, [sp, #124]	; 0x7c
   169f0:	ldr	r0, [r4, #28]
   169f4:	mov	r4, #1
   169f8:	add	r2, sp, #152	; 0x98
   169fc:	mov	r1, r7
   16a00:	add	r0, sl, r0
   16a04:	str	r4, [r6, #8]
   16a08:	bl	12eec <__assert_fail@plt+0xb60>
   16a0c:	ldr	r3, [sp, #128]	; 0x80
   16a10:	ldr	r2, [r3, #4]
   16a14:	mov	r3, #0
   16a18:	str	r3, [r6, #8]
   16a1c:	ldr	r1, [r2, #4]
   16a20:	cmp	r1, #5
   16a24:	mov	r5, r0
   16a28:	beq	1818c <__assert_fail@plt+0x5e00>
   16a2c:	str	r3, [sp, #132]	; 0x84
   16a30:	mvn	r3, #0
   16a34:	str	r3, [sp, #136]	; 0x88
   16a38:	str	sl, [sp, #20]
   16a3c:	mov	sl, r7
   16a40:	ldr	r3, [sp, #108]	; 0x6c
   16a44:	ldr	r2, [sp, #20]
   16a48:	cmp	r5, #0
   16a4c:	ldr	r3, [r3, #28]
   16a50:	ldr	r0, [fp, #24]
   16a54:	add	r4, r2, r3
   16a58:	ldr	r2, [sp, #136]	; 0x88
   16a5c:	and	r4, r4, r2
   16a60:	ldr	r2, [sp, #132]	; 0x84
   16a64:	eor	r4, r4, r2
   16a68:	sub	r4, r4, r2
   16a6c:	beq	17e00 <__assert_fail@plt+0x5a74>
   16a70:	ldr	r1, [r5, #16]
   16a74:	ldr	r2, [r5, #8]
   16a78:	ldr	ip, [r1, #28]
   16a7c:	add	ip, ip, r2
   16a80:	cmp	ip, r4
   16a84:	bls	17f2c <__assert_fail@plt+0x5ba0>
   16a88:	mov	r2, #0
   16a8c:	mvn	r1, #0
   16a90:	cmp	r0, #0
   16a94:	str	r2, [sl, #40]	; 0x28
   16a98:	str	r2, [sl, #44]	; 0x2c
   16a9c:	str	r1, [sl, #52]	; 0x34
   16aa0:	bne	16c08 <__assert_fail@plt+0x487c>
   16aa4:	ldr	r3, [sl]
   16aa8:	ldr	r1, [pc, #3508]	; 17864 <__assert_fail@plt+0x54d8>
   16aac:	ldr	r0, [sl, #4]
   16ab0:	blx	r3
   16ab4:	mov	r3, #0
   16ab8:	mov	r2, r5
   16abc:	str	r3, [sp, #4]
   16ac0:	ldr	r1, [sp, #108]	; 0x6c
   16ac4:	mov	r3, r4
   16ac8:	ldr	r0, [sp, #128]	; 0x80
   16acc:	str	sl, [sp]
   16ad0:	bl	139d8 <__assert_fail@plt+0x164c>
   16ad4:	ldr	r1, [pc, #3468]	; 17868 <__assert_fail@plt+0x54dc>
   16ad8:	ldr	r3, [sl]
   16adc:	ldr	r0, [sl, #4]
   16ae0:	blx	r3
   16ae4:	ldr	r1, [r5, #16]
   16ae8:	ldr	r2, [r5, #8]
   16aec:	ldr	ip, [r1, #28]
   16af0:	add	ip, ip, r2
   16af4:	cmp	r4, ip
   16af8:	bcc	16c00 <__assert_fail@plt+0x4874>
   16afc:	ldr	ip, [fp]
   16b00:	ldr	r3, [sp, #152]	; 0x98
   16b04:	cmp	ip, r3
   16b08:	ble	18084 <__assert_fail@plt+0x5cf8>
   16b0c:	ldr	r1, [r1, #28]
   16b10:	ldr	r6, [sp, #108]	; 0x6c
   16b14:	add	r2, r1, r2
   16b18:	b	16b30 <__assert_fail@plt+0x47a4>
   16b1c:	ldr	r1, [fp]
   16b20:	add	r3, r3, #1
   16b24:	cmp	r3, r1
   16b28:	str	r3, [sp, #152]	; 0x98
   16b2c:	bge	17f78 <__assert_fail@plt+0x5bec>
   16b30:	ldr	r1, [fp, #4]
   16b34:	mov	ip, r2
   16b38:	ldr	r0, [r1, r3, lsl #2]
   16b3c:	ldr	r1, [r0, #16]
   16b40:	cmp	r1, r6
   16b44:	bne	16b1c <__assert_fail@plt+0x4790>
   16b48:	ldr	r1, [r6, #28]
   16b4c:	ldr	lr, [r0, #8]
   16b50:	add	r1, r1, lr
   16b54:	cmp	r1, r2
   16b58:	bls	16b1c <__assert_fail@plt+0x4790>
   16b5c:	ldr	r3, [sl, #84]	; 0x54
   16b60:	mov	r1, sl
   16b64:	blx	r3
   16b68:	cmp	r0, #0
   16b6c:	bne	17fc0 <__assert_fail@plt+0x5c34>
   16b70:	ldr	r2, [r5, #16]
   16b74:	ldr	r1, [r5, #8]
   16b78:	ldr	r3, [sp, #152]	; 0x98
   16b7c:	ldr	r2, [r2, #28]
   16b80:	add	r2, r1, r2
   16b84:	mov	ip, r2
   16b88:	b	16b1c <__assert_fail@plt+0x4790>
   16b8c:	mov	r2, #5
   16b90:	ldr	r1, [pc, #3160]	; 177f0 <__assert_fail@plt+0x5464>
   16b94:	bl	11ea0 <dcgettext@plt>
   16b98:	ldr	r3, [sp, #108]	; 0x6c
   16b9c:	ldr	r5, [r3]
   16ba0:	mov	r4, r0
   16ba4:	bl	11f00 <bfd_get_error@plt>
   16ba8:	bl	12284 <bfd_errmsg@plt>
   16bac:	mov	r1, r5
   16bb0:	mov	r2, r0
   16bb4:	mov	r0, r4
   16bb8:	bl	406c8 <__assert_fail@plt+0x2e33c>
   16bbc:	add	sp, sp, #300	; 0x12c
   16bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bc4:	ldr	r3, [r1, #20]
   16bc8:	and	r3, r3, #272	; 0x110
   16bcc:	cmp	r3, #272	; 0x110
   16bd0:	beq	16868 <__assert_fail@plt+0x44dc>
   16bd4:	add	sp, sp, #300	; 0x12c
   16bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bdc:	ldr	r6, [r3, #4]
   16be0:	mov	sl, #0
   16be4:	cmn	r6, #1
   16be8:	bne	168c4 <__assert_fail@plt+0x4538>
   16bec:	mov	r1, r5
   16bf0:	mov	r0, r4
   16bf4:	bl	47334 <warn@@Base+0x5b64>
   16bf8:	str	r0, [sp, #112]	; 0x70
   16bfc:	b	168f4 <__assert_fail@plt+0x4568>
   16c00:	ldr	r3, [sp, #108]	; 0x6c
   16c04:	ldr	r3, [r3, #28]
   16c08:	str	r5, [sp, #120]	; 0x78
   16c0c:	sub	r3, ip, r3
   16c10:	ldr	r2, [sp, #112]	; 0x70
   16c14:	str	r3, [sp, #64]	; 0x40
   16c18:	cmp	r2, r3
   16c1c:	movcs	r3, #0
   16c20:	movcc	r3, #1
   16c24:	ldr	r2, [sp, #64]	; 0x40
   16c28:	ldr	r1, [sp, #20]
   16c2c:	cmp	r2, r1
   16c30:	orrls	r3, r3, #1
   16c34:	ldr	r1, [sp, #112]	; 0x70
   16c38:	cmp	r3, #0
   16c3c:	movne	r2, r1
   16c40:	str	r2, [sp, #64]	; 0x40
   16c44:	ldr	r2, [fp, #180]	; 0xb4
   16c48:	clz	r3, r5
   16c4c:	cmp	r2, #0
   16c50:	lsr	r3, r3, #5
   16c54:	movne	r3, #1
   16c58:	cmp	r3, #0
   16c5c:	beq	17d1c <__assert_fail@plt+0x5990>
   16c60:	mov	r3, #1
   16c64:	str	r3, [sp, #72]	; 0x48
   16c68:	ldr	r3, [sl, #8]
   16c6c:	mov	r2, r3
   16c70:	str	r3, [sp, #32]
   16c74:	mov	r3, #120	; 0x78
   16c78:	ldr	r2, [r2, #4]
   16c7c:	mov	r0, r3
   16c80:	str	r3, [sp, #188]	; 0xbc
   16c84:	ldr	r3, [sp, #148]	; 0x94
   16c88:	str	r2, [sp, #48]	; 0x30
   16c8c:	str	r3, [sp, #76]	; 0x4c
   16c90:	ldr	r3, [sl, #112]	; 0x70
   16c94:	ldr	r2, [sp, #124]	; 0x7c
   16c98:	str	r3, [sp, #24]
   16c9c:	ldr	r3, [sl, #116]	; 0x74
   16ca0:	ldr	r2, [r2, #20]
   16ca4:	str	r3, [sp, #104]	; 0x68
   16ca8:	ldr	r3, [sl, #120]	; 0x78
   16cac:	str	r2, [sp, #100]	; 0x64
   16cb0:	str	r3, [sp, #116]	; 0x74
   16cb4:	bl	11f3c <xmalloc@plt>
   16cb8:	ldr	r3, [fp, #184]	; 0xb8
   16cbc:	mov	r2, r3
   16cc0:	str	r3, [sp, #56]	; 0x38
   16cc4:	mov	r3, #0
   16cc8:	cmp	r2, r3
   16ccc:	str	r3, [sp, #184]	; 0xb8
   16cd0:	str	r0, [sp, #180]	; 0xb4
   16cd4:	bne	16cec <__assert_fail@plt+0x4960>
   16cd8:	ldr	r3, [sp, #72]	; 0x48
   16cdc:	cmp	r3, #0
   16ce0:	movne	r3, #4
   16ce4:	moveq	r3, #16
   16ce8:	str	r3, [sp, #56]	; 0x38
   16cec:	ldr	r3, [fp, #24]
   16cf0:	cmp	r3, #0
   16cf4:	str	r3, [sp, #96]	; 0x60
   16cf8:	movne	r3, #0
   16cfc:	strne	r3, [sp, #96]	; 0x60
   16d00:	beq	17d88 <__assert_fail@plt+0x59fc>
   16d04:	ldr	r3, [sp, #20]
   16d08:	ldr	r2, [sp, #64]	; 0x40
   16d0c:	cmp	r3, r2
   16d10:	mov	r3, #0
   16d14:	strb	r3, [sl, #128]	; 0x80
   16d18:	bcs	174e0 <__assert_fail@plt+0x5154>
   16d1c:	ldr	r3, [sp, #24]
   16d20:	mov	r9, sl
   16d24:	str	r3, [sp, #36]	; 0x24
   16d28:	mul	r2, r2, r3
   16d2c:	str	r2, [sp, #52]	; 0x34
   16d30:	ldr	r3, [sp, #20]
   16d34:	ldr	r2, [sp, #24]
   16d38:	ldr	r0, [sp, #52]	; 0x34
   16d3c:	ldr	r1, [sp, #32]
   16d40:	mul	r2, r3, r2
   16d44:	mov	r3, #0
   16d48:	cmp	r2, r0
   16d4c:	str	r2, [sp, #44]	; 0x2c
   16d50:	str	r3, [r1, #24]
   16d54:	bcs	17b54 <__assert_fail@plt+0x57c8>
   16d58:	ldr	r1, [sp, #76]	; 0x4c
   16d5c:	mov	r3, r2
   16d60:	add	r3, r1, r3
   16d64:	ldrb	r2, [r1, r2]
   16d68:	cmp	r2, #0
   16d6c:	bne	17b54 <__assert_fail@plt+0x57c8>
   16d70:	sub	r2, r1, #1
   16d74:	add	r2, r2, r0
   16d78:	rsb	r1, r1, #1
   16d7c:	b	16d8c <__assert_fail@plt+0x4a00>
   16d80:	ldrb	ip, [r3, #1]!
   16d84:	cmp	ip, #0
   16d88:	bne	16d98 <__assert_fail@plt+0x4a0c>
   16d8c:	cmp	r2, r3
   16d90:	add	r0, r1, r3
   16d94:	bne	16d80 <__assert_fail@plt+0x49f4>
   16d98:	ldr	r3, [fp, #188]	; 0xbc
   16d9c:	cmp	r3, #0
   16da0:	bne	16df8 <__assert_fail@plt+0x4a6c>
   16da4:	ldrb	r3, [r9, #128]	; 0x80
   16da8:	cmp	r3, #0
   16dac:	beq	16dbc <__assert_fail@plt+0x4a30>
   16db0:	ldrb	r3, [r9, #129]	; 0x81
   16db4:	cmp	r3, #0
   16db8:	bne	16df8 <__assert_fail@plt+0x4a6c>
   16dbc:	ldr	r3, [sp, #44]	; 0x2c
   16dc0:	ldr	r2, [sp, #104]	; 0x68
   16dc4:	sub	r3, r0, r3
   16dc8:	cmp	r2, r3
   16dcc:	str	r3, [sp, #28]
   16dd0:	bls	17764 <__assert_fail@plt+0x53d8>
   16dd4:	ldr	r1, [sp, #116]	; 0x74
   16dd8:	ldr	r2, [sp, #52]	; 0x34
   16ddc:	cmp	r1, r3
   16de0:	sub	r2, r0, r2
   16de4:	clz	r2, r2
   16de8:	lsr	r2, r2, #5
   16dec:	movls	r2, #0
   16df0:	cmp	r2, #0
   16df4:	bne	17778 <__assert_fail@plt+0x53ec>
   16df8:	ldr	r3, [fp, #32]
   16dfc:	cmp	r3, #0
   16e00:	bne	16e10 <__assert_fail@plt+0x4a84>
   16e04:	ldr	r3, [fp, #192]	; 0xc0
   16e08:	cmp	r3, #0
   16e0c:	beq	17154 <__assert_fail@plt+0x4dc8>
   16e10:	ldr	r3, [sp, #32]
   16e14:	add	ip, sp, #168	; 0xa8
   16e18:	add	r0, sp, #164	; 0xa4
   16e1c:	ldr	r4, [r3]
   16e20:	add	r1, sp, #160	; 0xa0
   16e24:	add	r3, sp, #156	; 0x9c
   16e28:	ldr	r2, [r4, #4]
   16e2c:	str	r0, [sp, #8]
   16e30:	str	r1, [sp, #4]
   16e34:	str	r3, [sp]
   16e38:	str	ip, [sp, #12]
   16e3c:	ldr	r3, [sp, #20]
   16e40:	ldr	r5, [r2, #296]	; 0x128
   16e44:	ldr	r1, [fp, #36]	; 0x24
   16e48:	ldr	r2, [sp, #48]	; 0x30
   16e4c:	mov	r0, r4
   16e50:	blx	r5
   16e54:	cmp	r0, #0
   16e58:	beq	17154 <__assert_fail@plt+0x4dc8>
   16e5c:	ldr	r5, [sp, #156]	; 0x9c
   16e60:	ldr	r2, [sp, #160]	; 0xa0
   16e64:	cmp	r5, #0
   16e68:	beq	17b20 <__assert_fail@plt+0x5794>
   16e6c:	ldrb	r3, [r5]
   16e70:	cmp	r3, #0
   16e74:	streq	r3, [sp, #156]	; 0x9c
   16e78:	beq	17b20 <__assert_fail@plt+0x5794>
   16e7c:	cmp	r2, #0
   16e80:	beq	16ea4 <__assert_fail@plt+0x4b18>
   16e84:	ldrb	r3, [r2]
   16e88:	cmp	r3, #0
   16e8c:	bne	16ea0 <__assert_fail@plt+0x4b14>
   16e90:	mov	r3, #0
   16e94:	str	r3, [sp, #160]	; 0xa0
   16e98:	cmp	r5, #0
   16e9c:	beq	16eac <__assert_fail@plt+0x4b20>
   16ea0:	ldrb	r3, [r5]
   16ea4:	cmp	r3, #47	; 0x2f
   16ea8:	beq	17bf0 <__assert_fail@plt+0x5864>
   16eac:	mov	r8, #0
   16eb0:	mov	r7, r8
   16eb4:	ldr	r3, [fp, #32]
   16eb8:	cmp	r3, #0
   16ebc:	beq	16f88 <__assert_fail@plt+0x4bfc>
   16ec0:	ldr	r5, [sp, #160]	; 0xa0
   16ec4:	cmp	r5, #0
   16ec8:	beq	16efc <__assert_fail@plt+0x4b70>
   16ecc:	ldr	r1, [fp, #148]	; 0x94
   16ed0:	cmp	r1, #0
   16ed4:	beq	16ee8 <__assert_fail@plt+0x4b5c>
   16ed8:	mov	r0, r5
   16edc:	bl	11d98 <strcmp@plt>
   16ee0:	cmp	r0, #0
   16ee4:	beq	16efc <__assert_fail@plt+0x4b70>
   16ee8:	mov	r1, r5
   16eec:	ldr	r0, [pc, #2304]	; 177f4 <__assert_fail@plt+0x5468>
   16ef0:	bl	11dbc <printf@plt>
   16ef4:	mvn	r3, #0
   16ef8:	str	r3, [fp, #152]	; 0x98
   16efc:	ldr	r2, [sp, #164]	; 0xa4
   16f00:	cmp	r2, #0
   16f04:	beq	16f38 <__assert_fail@plt+0x4bac>
   16f08:	ldr	r1, [fp, #152]	; 0x98
   16f0c:	ldr	r3, [sp, #168]	; 0xa8
   16f10:	cmp	r2, r1
   16f14:	beq	17e74 <__assert_fail@plt+0x5ae8>
   16f18:	cmp	r3, #0
   16f1c:	ldr	r1, [sp, #156]	; 0x9c
   16f20:	beq	17cc4 <__assert_fail@plt+0x5938>
   16f24:	ldr	r0, [pc, #2340]	; 17850 <__assert_fail@plt+0x54c4>
   16f28:	cmp	r1, #0
   16f2c:	moveq	r1, r0
   16f30:	ldr	r0, [pc, #2240]	; 177f8 <__assert_fail@plt+0x546c>
   16f34:	bl	11dbc <printf@plt>
   16f38:	ldr	r3, [fp, #208]	; 0xd0
   16f3c:	cmp	r3, #0
   16f40:	beq	16f88 <__assert_fail@plt+0x4bfc>
   16f44:	add	sl, sp, #192	; 0xc0
   16f48:	ldr	r6, [pc, #2220]	; 177fc <__assert_fail@plt+0x5470>
   16f4c:	b	16f64 <__assert_fail@plt+0x4bd8>
   16f50:	ldr	r3, [sp, #176]	; 0xb0
   16f54:	ldr	r2, [sp, #192]	; 0xc0
   16f58:	ldr	r1, [sp, #172]	; 0xac
   16f5c:	mov	r0, r6
   16f60:	bl	11dbc <printf@plt>
   16f64:	ldr	r1, [r4, #4]
   16f68:	mov	r3, sl
   16f6c:	add	r2, sp, #176	; 0xb0
   16f70:	ldr	r5, [r1, #304]	; 0x130
   16f74:	mov	r0, r4
   16f78:	add	r1, sp, #172	; 0xac
   16f7c:	blx	r5
   16f80:	cmp	r0, #0
   16f84:	bne	16f50 <__assert_fail@plt+0x4bc4>
   16f88:	ldr	r3, [fp, #192]	; 0xc0
   16f8c:	cmp	r3, #0
   16f90:	beq	170d0 <__assert_fail@plt+0x4d44>
   16f94:	ldr	r5, [sp, #156]	; 0x9c
   16f98:	cmp	r5, #0
   16f9c:	mov	r2, r5
   16fa0:	beq	170d0 <__assert_fail@plt+0x4d44>
   16fa4:	ldr	r3, [sp, #164]	; 0xa4
   16fa8:	cmp	r3, #0
   16fac:	beq	17c84 <__assert_fail@plt+0x58f8>
   16fb0:	ldr	r3, [fp, #40]	; 0x28
   16fb4:	cmp	r3, #0
   16fb8:	beq	1824c <__assert_fail@plt+0x5ec0>
   16fbc:	ldr	r6, [pc, #2108]	; 17800 <__assert_fail@plt+0x5474>
   16fc0:	mov	r1, r5
   16fc4:	b	16fd8 <__assert_fail@plt+0x4c4c>
   16fc8:	ldr	r3, [r6]
   16fcc:	ldr	r1, [sp, #156]	; 0x9c
   16fd0:	cmp	r3, #0
   16fd4:	beq	17e84 <__assert_fail@plt+0x5af8>
   16fd8:	ldr	r0, [r3, #4]
   16fdc:	bl	11e28 <filename_cmp@plt>
   16fe0:	ldr	r6, [r6]
   16fe4:	cmp	r0, #0
   16fe8:	bne	16fc8 <__assert_fail@plt+0x4c3c>
   16fec:	cmp	r6, #0
   16ff0:	ldreq	r2, [sp, #156]	; 0x9c
   16ff4:	beq	1824c <__assert_fail@plt+0x5ec0>
   16ff8:	ldr	r5, [sp, #164]	; 0xa4
   16ffc:	ldr	r3, [r6, #28]
   17000:	cmp	r3, r5
   17004:	beq	170d0 <__assert_fail@plt+0x4d44>
   17008:	ldr	r3, [fp, #220]	; 0xdc
   1700c:	ldr	r2, [r6, #12]
   17010:	cmp	r3, #0
   17014:	beq	17ee0 <__assert_fail@plt+0x5b54>
   17018:	ldr	r3, [r6, #36]	; 0x24
   1701c:	cmp	r3, #0
   17020:	beq	17ee0 <__assert_fail@plt+0x5b54>
   17024:	mov	r4, #1
   17028:	cmp	r2, #0
   1702c:	beq	170b4 <__assert_fail@plt+0x4d28>
   17030:	cmp	r5, r4
   17034:	bcc	170b4 <__assert_fail@plt+0x4d28>
   17038:	sub	r4, r4, #1
   1703c:	ldr	r7, [pc, #2036]	; 17838 <__assert_fail@plt+0x54ac>
   17040:	b	17068 <__assert_fail@plt+0x4cdc>
   17044:	mov	r0, sl
   17048:	mov	r2, #1
   1704c:	bl	11f24 <fwrite@plt>
   17050:	cmp	r0, #1
   17054:	beq	17f18 <__assert_fail@plt+0x5b8c>
   17058:	add	r3, r4, #2
   1705c:	cmp	r5, r3
   17060:	add	r4, r4, #1
   17064:	bcc	170b0 <__assert_fail@plt+0x4d24>
   17068:	ldr	r3, [r6, #24]
   1706c:	cmp	r3, r4
   17070:	bls	17058 <__assert_fail@plt+0x4ccc>
   17074:	ldr	r3, [r6, #20]
   17078:	ldr	r1, [pc, #1924]	; 17804 <__assert_fail@plt+0x5478>
   1707c:	ldr	sl, [r3, r4, lsl #2]
   17080:	mov	r0, sl
   17084:	bl	11db0 <strcspn@plt>
   17088:	ldr	r3, [r7]
   1708c:	subs	r1, r0, #0
   17090:	bne	17044 <__assert_fail@plt+0x4cb8>
   17094:	mov	r1, r3
   17098:	mov	r0, #10
   1709c:	bl	12254 <putc@plt>
   170a0:	add	r3, r4, #2
   170a4:	cmp	r5, r3
   170a8:	add	r4, r4, #1
   170ac:	bcs	17068 <__assert_fail@plt+0x4cdc>
   170b0:	ldr	r5, [sp, #164]	; 0xa4
   170b4:	ldr	r3, [r6, #32]
   170b8:	cmp	r3, r5
   170bc:	bcs	170c4 <__assert_fail@plt+0x4d38>
   170c0:	str	r5, [r6, #32]
   170c4:	mov	r3, #0
   170c8:	str	r5, [r6, #28]
   170cc:	str	r3, [r6, #36]	; 0x24
   170d0:	ldr	r0, [sp, #160]	; 0xa0
   170d4:	cmp	r0, #0
   170d8:	beq	1711c <__assert_fail@plt+0x4d90>
   170dc:	ldr	r4, [fp, #148]	; 0x94
   170e0:	cmp	r4, #0
   170e4:	beq	17104 <__assert_fail@plt+0x4d78>
   170e8:	mov	r1, r4
   170ec:	bl	11d98 <strcmp@plt>
   170f0:	cmp	r0, #0
   170f4:	beq	1711c <__assert_fail@plt+0x4d90>
   170f8:	mov	r0, r4
   170fc:	bl	11e10 <free@plt>
   17100:	ldr	r0, [sp, #160]	; 0xa0
   17104:	bl	12074 <strlen@plt>
   17108:	add	r0, r0, #1
   1710c:	bl	11f3c <xmalloc@plt>
   17110:	ldr	r1, [sp, #160]	; 0xa0
   17114:	str	r0, [fp, #148]	; 0x94
   17118:	bl	11f6c <strcpy@plt>
   1711c:	ldr	r3, [sp, #164]	; 0xa4
   17120:	cmp	r3, #0
   17124:	beq	17134 <__assert_fail@plt+0x4da8>
   17128:	ldr	r2, [fp, #152]	; 0x98
   1712c:	cmp	r3, r2
   17130:	strne	r3, [fp, #152]	; 0x98
   17134:	ldr	r3, [sp, #168]	; 0xa8
   17138:	ldr	r2, [fp, #156]	; 0x9c
   1713c:	cmp	r3, r2
   17140:	strne	r3, [fp, #156]	; 0x9c
   17144:	cmp	r8, #0
   17148:	beq	17154 <__assert_fail@plt+0x4dc8>
   1714c:	mov	r0, r8
   17150:	bl	11e10 <free@plt>
   17154:	ldr	r2, [sp, #48]	; 0x30
   17158:	ldr	r3, [fp, #24]
   1715c:	ldr	r0, [r2, #28]
   17160:	cmp	r3, #0
   17164:	ldr	r3, [sp, #20]
   17168:	add	r0, r3, r0
   1716c:	beq	17918 <__assert_fail@plt+0x558c>
   17170:	ldr	r4, [sp, #32]
   17174:	mov	r3, #1
   17178:	ldr	r7, [pc, #1720]	; 17838 <__assert_fail@plt+0x54ac>
   1717c:	str	r3, [r4, #8]
   17180:	mov	r1, r9
   17184:	mov	r2, #0
   17188:	bl	13bc0 <__assert_fail@plt+0x1834>
   1718c:	mov	r3, #0
   17190:	ldr	r1, [r7]
   17194:	str	r3, [r4, #8]
   17198:	mov	r0, #32
   1719c:	bl	12254 <putc@plt>
   171a0:	ldr	r3, [sp, #72]	; 0x48
   171a4:	cmp	r3, #0
   171a8:	beq	17878 <__assert_fail@plt+0x54ec>
   171ac:	ldr	r4, [fp, #180]	; 0xb4
   171b0:	ldr	r2, [fp, #160]	; 0xa0
   171b4:	cmp	r4, #0
   171b8:	movne	r3, #1073741824	; 0x40000000
   171bc:	moveq	r3, #0
   171c0:	cmp	r2, #0
   171c4:	str	r3, [r9, #60]	; 0x3c
   171c8:	orrne	r3, r3, #536870912	; 0x20000000
   171cc:	ldr	r1, [pc, #1588]	; 17808 <__assert_fail@plt+0x547c>
   171d0:	strne	r3, [r9, #60]	; 0x3c
   171d4:	ldr	r3, [r9, #124]	; 0x7c
   171d8:	mov	r2, #0
   171dc:	str	r1, [r9]
   171e0:	cmp	r3, #0
   171e4:	add	r1, sp, #180	; 0xb4
   171e8:	str	r2, [sp, #184]	; 0xb8
   171ec:	str	r2, [r9, #100]	; 0x64
   171f0:	str	r2, [r9, #104]	; 0x68
   171f4:	str	r1, [r9, #4]
   171f8:	beq	17234 <__assert_fail@plt+0x4ea8>
   171fc:	ldr	r3, [sp, #32]
   17200:	ldr	r2, [sp, #40]	; 0x28
   17204:	ldr	r1, [sp, #60]	; 0x3c
   17208:	ldr	r3, [r3]
   1720c:	cmp	r1, r2
   17210:	movls	r2, #0
   17214:	ldr	r3, [r3, #40]	; 0x28
   17218:	movhi	r2, #1
   1721c:	lsr	r3, r3, #5
   17220:	and	r3, r3, #66	; 0x42
   17224:	cmp	r3, #0
   17228:	movne	r2, #0
   1722c:	cmp	r2, #0
   17230:	bne	17b9c <__assert_fail@plt+0x5810>
   17234:	ldr	r3, [sp, #48]	; 0x30
   17238:	cmp	r4, #0
   1723c:	ldr	r0, [r3, #28]
   17240:	bne	1725c <__assert_fail@plt+0x4ed0>
   17244:	ldr	r3, [r3, #20]
   17248:	and	r3, r3, #272	; 0x110
   1724c:	cmp	r3, #272	; 0x110
   17250:	ldreq	r3, [sp, #64]	; 0x40
   17254:	addeq	r3, r0, r3
   17258:	streq	r3, [r9, #148]	; 0x94
   1725c:	ldr	r3, [sp, #20]
   17260:	mov	r1, r9
   17264:	add	r0, r3, r0
   17268:	ldr	r3, [sp, #100]	; 0x64
   1726c:	blx	r3
   17270:	ldr	r7, [pc, #1472]	; 17838 <__assert_fail@plt+0x54ac>
   17274:	ldr	r2, [fp, #184]	; 0xb8
   17278:	ldr	r3, [r7]
   1727c:	cmp	r2, #0
   17280:	ldr	r2, [pc, #1412]	; 1780c <__assert_fail@plt+0x5480>
   17284:	str	r3, [r9, #4]
   17288:	mov	r3, #0
   1728c:	str	r2, [r9]
   17290:	str	r3, [r9, #148]	; 0x94
   17294:	str	r0, [sp, #36]	; 0x24
   17298:	bne	172b0 <__assert_fail@plt+0x4f24>
   1729c:	ldr	r3, [r9, #100]	; 0x64
   172a0:	ldr	r2, [sp, #56]	; 0x38
   172a4:	cmp	r3, #0
   172a8:	movne	r2, r3
   172ac:	str	r2, [sp, #56]	; 0x38
   172b0:	ldr	r2, [sp, #24]
   172b4:	ldr	r3, [sp, #36]	; 0x24
   172b8:	cmp	r2, r3
   172bc:	bgt	17cdc <__assert_fail@plt+0x5950>
   172c0:	str	r3, [sp, #28]
   172c4:	ldr	r2, [fp, #24]
   172c8:	ldr	r3, [fp, #224]	; 0xe0
   172cc:	cmp	r2, #0
   172d0:	beq	17560 <__assert_fail@plt+0x51d4>
   172d4:	cmp	r3, #0
   172d8:	bgt	1758c <__assert_fail@plt+0x5200>
   172dc:	ldr	r3, [sp, #72]	; 0x48
   172e0:	cmp	r3, #0
   172e4:	movne	r5, #0
   172e8:	movne	r4, r5
   172ec:	beq	17b3c <__assert_fail@plt+0x57b0>
   172f0:	ldr	r3, [sp, #184]	; 0xb8
   172f4:	cmp	r3, #0
   172f8:	bne	176a4 <__assert_fail@plt+0x5318>
   172fc:	ldr	r2, [fp, #24]
   17300:	ldr	r3, [fp, #224]	; 0xe0
   17304:	cmp	r2, #0
   17308:	mvneq	r3, r3
   1730c:	lsreq	r3, r3, #31
   17310:	beq	17320 <__assert_fail@plt+0x4f94>
   17314:	cmp	r3, #0
   17318:	movle	r3, #0
   1731c:	movgt	r3, #1
   17320:	cmp	r3, #0
   17324:	bne	17978 <__assert_fail@plt+0x55ec>
   17328:	ldr	r3, [fp, #56]	; 0x38
   1732c:	cmp	r3, #0
   17330:	beq	17708 <__assert_fail@plt+0x537c>
   17334:	ldr	r3, [sp, #60]	; 0x3c
   17338:	ldr	r4, [sp, #40]	; 0x28
   1733c:	cmp	r3, r4
   17340:	bls	176bc <__assert_fail@plt+0x5330>
   17344:	ldr	r1, [sp, #24]
   17348:	ldr	r0, [sp, #28]
   1734c:	bl	47334 <warn@@Base+0x5b64>
   17350:	ldr	r4, [r4]
   17354:	ldr	r3, [sp, #68]	; 0x44
   17358:	ldr	r2, [sp, #20]
   1735c:	add	r5, r3, r2
   17360:	ldr	r3, [r4, #4]
   17364:	add	r5, r5, r0
   17368:	cmp	r3, r5
   1736c:	mov	r6, r0
   17370:	bcs	176bc <__assert_fail@plt+0x5330>
   17374:	mov	r3, #1
   17378:	ldr	r2, [sp, #40]	; 0x28
   1737c:	ldr	r8, [pc, #1164]	; 17810 <__assert_fail@plt+0x5484>
   17380:	ldr	sl, [pc, #1164]	; 17814 <__assert_fail@plt+0x5488>
   17384:	add	r7, r2, #4
   17388:	b	17490 <__assert_fail@plt+0x5104>
   1738c:	ldr	r3, [pc, #1188]	; 17838 <__assert_fail@plt+0x54ac>
   17390:	mov	r0, #9
   17394:	ldr	r1, [r3]
   17398:	bl	12254 <putc@plt>
   1739c:	ldr	r3, [sp, #48]	; 0x30
   173a0:	ldr	r2, [sp, #68]	; 0x44
   173a4:	ldr	r0, [r4, #4]
   173a8:	ldr	r3, [r3, #28]
   173ac:	mov	r1, r9
   173b0:	sub	r3, r3, r2
   173b4:	add	r0, r3, r0
   173b8:	mov	r2, #1
   173bc:	bl	13968 <__assert_fail@plt+0x15dc>
   173c0:	ldr	r3, [r4, #12]
   173c4:	cmp	r3, #0
   173c8:	beq	1752c <__assert_fail@plt+0x51a0>
   173cc:	ldr	r1, [r3, #32]
   173d0:	cmp	r1, #0
   173d4:	moveq	r0, sl
   173d8:	ldreq	r1, [r3]
   173dc:	ldrne	r0, [pc, #1076]	; 17818 <__assert_fail@plt+0x548c>
   173e0:	bl	11dbc <printf@plt>
   173e4:	ldr	r3, [r4]
   173e8:	cmp	r3, #0
   173ec:	beq	17540 <__assert_fail@plt+0x51b4>
   173f0:	ldr	r2, [r3]
   173f4:	cmp	r2, #0
   173f8:	beq	17540 <__assert_fail@plt+0x51b4>
   173fc:	ldr	r3, [r2, #4]
   17400:	cmp	r3, #0
   17404:	beq	17414 <__assert_fail@plt+0x5088>
   17408:	ldrb	r3, [r3]
   1740c:	cmp	r3, #0
   17410:	bne	1754c <__assert_fail@plt+0x51c0>
   17414:	ldr	r3, [r2, #16]
   17418:	ldr	r1, [r3]
   1741c:	cmp	r1, #0
   17420:	beq	17524 <__assert_fail@plt+0x5198>
   17424:	ldrb	r3, [r1]
   17428:	cmp	r3, #0
   1742c:	moveq	r1, r8
   17430:	ldr	r0, [pc, #1036]	; 17844 <__assert_fail@plt+0x54b8>
   17434:	bl	11dbc <printf@plt>
   17438:	ldr	r4, [r4, #8]
   1743c:	cmp	r4, #0
   17440:	beq	17464 <__assert_fail@plt+0x50d8>
   17444:	rsblt	r4, r4, #0
   17448:	ldrlt	r0, [pc, #972]	; 1781c <__assert_fail@plt+0x5490>
   1744c:	ldrge	r0, [pc, #972]	; 17820 <__assert_fail@plt+0x5494>
   17450:	bl	11dbc <printf@plt>
   17454:	mov	r0, r4
   17458:	mov	r2, #1
   1745c:	mov	r1, r9
   17460:	bl	13968 <__assert_fail@plt+0x15dc>
   17464:	mov	r0, #10
   17468:	bl	1211c <putchar@plt>
   1746c:	mov	r3, #0
   17470:	ldr	r2, [sp, #60]	; 0x3c
   17474:	str	r7, [sp, #40]	; 0x28
   17478:	cmp	r7, r2
   1747c:	bcs	174b8 <__assert_fail@plt+0x512c>
   17480:	ldr	r4, [r7], #4
   17484:	ldr	r2, [r4, #4]
   17488:	cmp	r2, r5
   1748c:	bcs	174b8 <__assert_fail@plt+0x512c>
   17490:	ldr	r1, [fp, #104]	; 0x68
   17494:	ldr	r2, [fp, #128]	; 0x80
   17498:	orrs	r2, r1, r2
   1749c:	beq	17470 <__assert_fail@plt+0x50e4>
   174a0:	ldr	r3, [fp, #56]	; 0x38
   174a4:	cmp	r3, #0
   174a8:	bne	1738c <__assert_fail@plt+0x5000>
   174ac:	ldr	r0, [pc, #880]	; 17824 <__assert_fail@plt+0x5498>
   174b0:	bl	11dbc <printf@plt>
   174b4:	b	1739c <__assert_fail@plt+0x5010>
   174b8:	cmp	r3, #0
   174bc:	bne	176bc <__assert_fail@plt+0x5330>
   174c0:	ldr	r3, [sp, #20]
   174c4:	add	r3, r3, r6
   174c8:	str	r3, [sp, #20]
   174cc:	ldr	r3, [sp, #20]
   174d0:	ldr	r2, [sp, #64]	; 0x40
   174d4:	cmp	r3, r2
   174d8:	bcc	16d30 <__assert_fail@plt+0x49a4>
   174dc:	mov	sl, r9
   174e0:	ldr	r0, [sp, #180]	; 0xb4
   174e4:	bl	11e10 <free@plt>
   174e8:	ldr	r3, [sp, #64]	; 0x40
   174ec:	ldr	r2, [sp, #112]	; 0x70
   174f0:	ldr	r5, [sp, #120]	; 0x78
   174f4:	cmp	r2, r3
   174f8:	str	r3, [sp, #20]
   174fc:	bhi	16a40 <__assert_fail@plt+0x46b4>
   17500:	ldr	r0, [sp, #148]	; 0x94
   17504:	bl	11e10 <free@plt>
   17508:	ldr	r3, [sp, #140]	; 0x8c
   1750c:	cmp	r3, #0
   17510:	beq	16bbc <__assert_fail@plt+0x4830>
   17514:	mov	r0, r3
   17518:	add	sp, sp, #300	; 0x12c
   1751c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17520:	b	11e10 <free@plt>
   17524:	ldr	r1, [pc, #740]	; 17810 <__assert_fail@plt+0x5484>
   17528:	b	17430 <__assert_fail@plt+0x50a4>
   1752c:	ldr	r0, [pc, #756]	; 17828 <__assert_fail@plt+0x549c>
   17530:	bl	11dbc <printf@plt>
   17534:	ldr	r3, [r4]
   17538:	cmp	r3, #0
   1753c:	bne	173f0 <__assert_fail@plt+0x5064>
   17540:	mov	r0, r8
   17544:	bl	11dbc <printf@plt>
   17548:	b	17438 <__assert_fail@plt+0x50ac>
   1754c:	ldr	r3, [sp, #32]
   17550:	mov	r1, r9
   17554:	ldr	r0, [r3]
   17558:	bl	13740 <__assert_fail@plt+0x13b4>
   1755c:	b	17438 <__assert_fail@plt+0x50ac>
   17560:	cmp	r3, #0
   17564:	blt	172dc <__assert_fail@plt+0x4f50>
   17568:	ldr	r2, [sp, #56]	; 0x38
   1756c:	ldr	r3, [sp, #36]	; 0x24
   17570:	cmp	r2, r3
   17574:	bge	1758c <__assert_fail@plt+0x5200>
   17578:	ldr	r3, [fp, #56]	; 0x38
   1757c:	cmp	r3, #0
   17580:	moveq	r3, r2
   17584:	moveq	r5, r2
   17588:	beq	17594 <__assert_fail@plt+0x5208>
   1758c:	ldr	r3, [sp, #28]
   17590:	ldr	r5, [sp, #36]	; 0x24
   17594:	ldr	r4, [r9, #104]	; 0x68
   17598:	ldr	r2, [sp, #44]	; 0x2c
   1759c:	cmp	r4, #0
   175a0:	add	r3, r2, r3
   175a4:	moveq	r4, #1
   175a8:	cmp	r2, r3
   175ac:	str	r3, [sp, #80]	; 0x50
   175b0:	bcs	17634 <__assert_fail@plt+0x52a8>
   175b4:	ldr	r7, [pc, #636]	; 17838 <__assert_fail@plt+0x54ac>
   175b8:	ldr	r3, [sp, #76]	; 0x4c
   175bc:	ldr	r8, [sp, #44]	; 0x2c
   175c0:	str	r5, [sp, #84]	; 0x54
   175c4:	add	sl, r3, r8
   175c8:	mov	r3, r7
   175cc:	mov	r7, r4
   175d0:	mov	r4, r3
   175d4:	ldr	r3, [sp, #52]	; 0x34
   175d8:	add	r8, r8, r7
   175dc:	cmp	r8, r3
   175e0:	bhi	176b4 <__assert_fail@plt+0x5328>
   175e4:	ldr	r2, [r9, #108]	; 0x6c
   175e8:	cmp	r2, #1
   175ec:	beq	176e0 <__assert_fail@plt+0x5354>
   175f0:	cmp	r7, #0
   175f4:	addgt	r6, sl, r7
   175f8:	ble	176b4 <__assert_fail@plt+0x5328>
   175fc:	ldrb	r1, [sl], #1
   17600:	ldr	r0, [pc, #568]	; 17840 <__assert_fail@plt+0x54b4>
   17604:	bl	11dbc <printf@plt>
   17608:	cmp	r6, sl
   1760c:	bne	175fc <__assert_fail@plt+0x5270>
   17610:	ldr	r1, [r4]
   17614:	mov	r0, #32
   17618:	bl	12254 <putc@plt>
   1761c:	ldr	r3, [sp, #80]	; 0x50
   17620:	mov	sl, r6
   17624:	cmp	r8, r3
   17628:	bcc	175d4 <__assert_fail@plt+0x5248>
   1762c:	ldr	r5, [sp, #84]	; 0x54
   17630:	mov	r4, r7
   17634:	ldr	r8, [sp, #56]	; 0x38
   17638:	cmp	r8, r5
   1763c:	ble	1767c <__assert_fail@plt+0x52f0>
   17640:	ldr	r7, [pc, #496]	; 17838 <__assert_fail@plt+0x54ac>
   17644:	cmp	r4, #0
   17648:	movgt	r6, #0
   1764c:	ble	17664 <__assert_fail@plt+0x52d8>
   17650:	add	r6, r6, #1
   17654:	ldr	r0, [pc, #464]	; 1782c <__assert_fail@plt+0x54a0>
   17658:	bl	11dbc <printf@plt>
   1765c:	cmp	r4, r6
   17660:	bne	17650 <__assert_fail@plt+0x52c4>
   17664:	add	r5, r5, r4
   17668:	ldr	r1, [r7]
   1766c:	mov	r0, #32
   17670:	bl	12254 <putc@plt>
   17674:	cmp	r8, r5
   17678:	bgt	17644 <__assert_fail@plt+0x52b8>
   1767c:	ldr	r3, [sp, #72]	; 0x48
   17680:	cmp	r3, #0
   17684:	beq	17b90 <__assert_fail@plt+0x5804>
   17688:	ldr	r7, [pc, #424]	; 17838 <__assert_fail@plt+0x54ac>
   1768c:	mov	r0, #9
   17690:	ldr	r1, [r7]
   17694:	bl	12254 <putc@plt>
   17698:	ldr	r3, [sp, #184]	; 0xb8
   1769c:	cmp	r3, #0
   176a0:	beq	172fc <__assert_fail@plt+0x4f70>
   176a4:	ldr	r1, [sp, #180]	; 0xb4
   176a8:	ldr	r0, [pc, #404]	; 17844 <__assert_fail@plt+0x54b8>
   176ac:	bl	11dbc <printf@plt>
   176b0:	b	172fc <__assert_fail@plt+0x4f70>
   176b4:	add	r6, sl, r7
   176b8:	b	17610 <__assert_fail@plt+0x5284>
   176bc:	mov	r0, #10
   176c0:	bl	1211c <putchar@plt>
   176c4:	ldr	r1, [sp, #24]
   176c8:	ldr	r0, [sp, #28]
   176cc:	bl	47334 <warn@@Base+0x5b64>
   176d0:	ldr	r3, [sp, #20]
   176d4:	add	r3, r3, r0
   176d8:	str	r3, [sp, #20]
   176dc:	b	174cc <__assert_fail@plt+0x5140>
   176e0:	cmp	r7, #0
   176e4:	addgt	r6, sl, r7
   176e8:	movgt	r5, r6
   176ec:	ble	176b4 <__assert_fail@plt+0x5328>
   176f0:	ldrb	r1, [r5, #-1]!
   176f4:	ldr	r0, [pc, #324]	; 17840 <__assert_fail@plt+0x54b4>
   176f8:	bl	11dbc <printf@plt>
   176fc:	cmp	sl, r5
   17700:	bne	176f0 <__assert_fail@plt+0x5364>
   17704:	b	17610 <__assert_fail@plt+0x5284>
   17708:	ldr	r7, [pc, #296]	; 17838 <__assert_fail@plt+0x54ac>
   1770c:	mov	r0, #10
   17710:	ldr	r1, [r7]
   17714:	bl	12254 <putc@plt>
   17718:	ldr	r3, [sp, #60]	; 0x3c
   1771c:	ldr	r2, [sp, #40]	; 0x28
   17720:	cmp	r3, r2
   17724:	bls	177c8 <__assert_fail@plt+0x543c>
   17728:	ldr	r1, [sp, #24]
   1772c:	ldr	r0, [sp, #28]
   17730:	bl	47334 <warn@@Base+0x5b64>
   17734:	mov	r6, r0
   17738:	ldr	r3, [sp, #40]	; 0x28
   1773c:	ldr	r2, [sp, #20]
   17740:	ldr	r4, [r3]
   17744:	ldr	r3, [sp, #68]	; 0x44
   17748:	add	r5, r3, r2
   1774c:	ldr	r3, [r4, #4]
   17750:	add	r5, r5, r6
   17754:	cmp	r3, r5
   17758:	movcc	r3, #0
   1775c:	bcc	17378 <__assert_fail@plt+0x4fec>
   17760:	b	174c0 <__assert_fail@plt+0x5134>
   17764:	ldr	r3, [sp, #52]	; 0x34
   17768:	cmp	r0, r3
   1776c:	ldrne	r3, [sp, #28]
   17770:	bicne	r3, r3, #3
   17774:	strne	r3, [sp, #28]
   17778:	ldr	r3, [fp, #20]
   1777c:	ldr	r2, [sp, #28]
   17780:	cmp	r3, #0
   17784:	str	r2, [sp, #36]	; 0x24
   17788:	beq	177b0 <__assert_fail@plt+0x5424>
   1778c:	ldr	r1, [sp, #24]
   17790:	mov	r0, r2
   17794:	bl	47334 <warn@@Base+0x5b64>
   17798:	ldr	r3, [sp, #20]
   1779c:	add	r4, r0, r3
   177a0:	ldr	r3, [sp, #64]	; 0x40
   177a4:	mov	r6, r0
   177a8:	cmp	r4, r3
   177ac:	bcc	17c94 <__assert_fail@plt+0x5908>
   177b0:	ldr	r0, [pc, #120]	; 17830 <__assert_fail@plt+0x54a4>
   177b4:	bl	11fe4 <puts@plt>
   177b8:	ldr	r3, [sp, #60]	; 0x3c
   177bc:	ldr	r2, [sp, #40]	; 0x28
   177c0:	cmp	r3, r2
   177c4:	bhi	17728 <__assert_fail@plt+0x539c>
   177c8:	ldr	r0, [sp, #28]
   177cc:	ldr	r1, [sp, #24]
   177d0:	bl	47334 <warn@@Base+0x5b64>
   177d4:	ldr	r3, [sp, #20]
   177d8:	add	r3, r3, r0
   177dc:	str	r3, [sp, #20]
   177e0:	b	174cc <__assert_fail@plt+0x5140>
   177e4:	andeq	r7, r6, r0, asr #8
   177e8:	andeq	r6, r6, r0, asr #4
   177ec:	andeq	r9, r4, r8, ror #3
   177f0:	andeq	r8, r4, r8, lsr sp
   177f4:	andeq	r8, r4, r4, lsr fp
   177f8:	andeq	r8, r4, r8, asr #21
   177fc:	andeq	r9, r4, ip, asr #4
   17800:	andeq	r7, r6, r8, ror #8
   17804:	andeq	r9, r4, r4, ror #4
   17808:	andeq	r4, r1, r0, ror r4
   1780c:	strheq	r2, [r1], -r0
   17810:	muleq	r4, r8, sl
   17814:			; <UNDEFINED> instruction: 0x000492b0
   17818:	andeq	r9, r4, r8, lsr #5
   1781c:	andeq	r8, r4, ip, asr sl
   17820:	andeq	r8, r4, r0, ror #20
   17824:	muleq	r4, r4, r2
   17828:	muleq	r4, r8, r2
   1782c:	andeq	sl, r4, r8, ror #16
   17830:	andeq	r9, r4, r4, asr #4
   17834:	strdeq	r5, [r6], -r8
   17838:	andeq	r7, r6, r0, lsr r4
   1783c:	andeq	r9, r4, r8, ror #4
   17840:	andeq	r8, r4, r0, ror #26
   17844:	andeq	ip, r4, r4, ror r3
   17848:	andeq	r2, r5, r4, asr #14
   1784c:	andeq	r9, r4, r8, lsl #4
   17850:	andeq	r8, r4, r4, lsl #21
   17854:	andeq	r8, r4, r0, asr #21
   17858:	andeq	r9, r4, r0, ror r2
   1785c:	andeq	r8, r4, ip, lsr fp
   17860:	andeq	r8, r4, ip, asr #22
   17864:	andeq	sl, r4, r4, ror pc
   17868:	andeq	r8, r4, r8, lsr fp
   1786c:			; <UNDEFINED> instruction: 0x000492b8
   17870:	ldrdeq	r1, [r5], -ip
   17874:	andeq	r2, r1, ip, lsr #29
   17878:	ldr	r4, [sp, #56]	; 0x38
   1787c:	ldr	r1, [sp, #24]
   17880:	mov	r0, r4
   17884:	bl	47334 <warn@@Base+0x5b64>
   17888:	ldr	r2, [sp, #20]
   1788c:	str	r4, [sp, #28]
   17890:	add	r0, r0, r2
   17894:	ldr	r2, [sp, #64]	; 0x40
   17898:	cmp	r0, r2
   1789c:	bhi	17b5c <__assert_fail@plt+0x57d0>
   178a0:	ldr	r2, [sp, #44]	; 0x2c
   178a4:	ldr	r3, [sp, #44]	; 0x2c
   178a8:	add	r1, r2, r4
   178ac:	cmp	r3, r1
   178b0:	str	r4, [sp, #36]	; 0x24
   178b4:	bcs	17b88 <__assert_fail@plt+0x57fc>
   178b8:	ldr	r2, [sp, #76]	; 0x4c
   178bc:	sub	r3, r3, #1
   178c0:	sub	r0, r2, #1
   178c4:	ldr	r5, [pc, #-152]	; 17834 <__assert_fail@plt+0x54a8>
   178c8:	add	r3, r2, r3
   178cc:	add	r0, r0, r1
   178d0:	add	r2, sp, #192	; 0xc0
   178d4:	mov	r4, #46	; 0x2e
   178d8:	ldrb	ip, [r3, #1]!
   178dc:	add	r2, r2, #1
   178e0:	lsl	lr, ip, #1
   178e4:	ldrh	lr, [r5, lr]
   178e8:	tst	lr, #16
   178ec:	strbne	ip, [r2, #-1]
   178f0:	strbeq	r4, [r2, #-1]
   178f4:	cmp	r0, r3
   178f8:	bne	178d8 <__assert_fail@plt+0x554c>
   178fc:	ldr	r3, [sp, #44]	; 0x2c
   17900:	sub	r1, r1, r3
   17904:	add	r3, sp, #296	; 0x128
   17908:	add	r1, r3, r1
   1790c:	mov	r3, #0
   17910:	strb	r3, [r1, #-104]	; 0xffffff98
   17914:	b	172c4 <__assert_fail@plt+0x4f38>
   17918:	add	r3, sp, #192	; 0xc0
   1791c:	mov	r4, r3
   17920:	mov	r1, r3
   17924:	ldr	r3, [sp, #32]
   17928:	mov	r2, r0
   1792c:	ldr	r0, [r3]
   17930:	bl	12230 <bfd_sprintf_vma@plt>
   17934:	ldr	r1, [sp, #96]	; 0x60
   17938:	ldrb	r2, [r4, r1]
   1793c:	add	r1, r4, r1
   17940:	mov	r3, r1
   17944:	cmp	r2, #48	; 0x30
   17948:	bne	17960 <__assert_fail@plt+0x55d4>
   1794c:	mov	r0, #32
   17950:	strb	r0, [r3]
   17954:	ldrb	r2, [r3, #1]!
   17958:	cmp	r2, #48	; 0x30
   1795c:	beq	17950 <__assert_fail@plt+0x55c4>
   17960:	cmp	r2, #0
   17964:	moveq	r2, #48	; 0x30
   17968:	strbeq	r2, [r3, #-1]
   1796c:	ldr	r0, [pc, #-312]	; 1783c <__assert_fail@plt+0x54b0>
   17970:	bl	11dbc <printf@plt>
   17974:	b	171a0 <__assert_fail@plt+0x4e14>
   17978:	ldr	r3, [sp, #36]	; 0x24
   1797c:	cmp	r3, r5
   17980:	ble	17328 <__assert_fail@plt+0x4f9c>
   17984:	ldr	r2, [sp, #96]	; 0x60
   17988:	add	r3, sp, #192	; 0xc0
   1798c:	ldr	r7, [pc, #-348]	; 17838 <__assert_fail@plt+0x54ac>
   17990:	str	r3, [sp, #92]	; 0x5c
   17994:	add	r3, r3, r2
   17998:	ldr	r2, [sp, #44]	; 0x2c
   1799c:	str	r7, [sp, #80]	; 0x50
   179a0:	add	sl, r5, r2
   179a4:	mov	r7, r3
   179a8:	str	r9, [sp, #88]	; 0x58
   179ac:	ldr	r3, [sp, #80]	; 0x50
   179b0:	mov	r0, #10
   179b4:	mov	r8, sl
   179b8:	ldr	r1, [r3]
   179bc:	bl	12254 <putc@plt>
   179c0:	ldr	r1, [sp, #24]
   179c4:	mov	r0, sl
   179c8:	bl	47334 <warn@@Base+0x5b64>
   179cc:	ldr	r3, [sp, #48]	; 0x30
   179d0:	ldr	r1, [sp, #92]	; 0x5c
   179d4:	ldr	r2, [r3, #28]
   179d8:	ldr	r3, [sp, #32]
   179dc:	add	r2, r0, r2
   179e0:	ldr	r0, [r3]
   179e4:	bl	12230 <bfd_sprintf_vma@plt>
   179e8:	ldrb	r2, [r7]
   179ec:	mov	r3, r7
   179f0:	cmp	r2, #48	; 0x30
   179f4:	bne	17a0c <__assert_fail@plt+0x5680>
   179f8:	mov	r1, #32
   179fc:	strb	r1, [r3]
   17a00:	ldrb	r2, [r3, #1]!
   17a04:	cmp	r2, #48	; 0x30
   17a08:	beq	179fc <__assert_fail@plt+0x5670>
   17a0c:	cmp	r2, #0
   17a10:	moveq	r2, #48	; 0x30
   17a14:	strbeq	r2, [r3, #-1]
   17a18:	mov	r1, r7
   17a1c:	ldr	r0, [pc, #-488]	; 1783c <__assert_fail@plt+0x54b0>
   17a20:	bl	11dbc <printf@plt>
   17a24:	ldr	r3, [sp, #56]	; 0x38
   17a28:	add	r5, r3, r5
   17a2c:	ldr	r3, [sp, #36]	; 0x24
   17a30:	cmp	r3, r5
   17a34:	movlt	r5, r3
   17a38:	ldr	r3, [sp, #44]	; 0x2c
   17a3c:	add	sl, r5, r3
   17a40:	cmp	sl, r8
   17a44:	ldrhi	r3, [sp, #76]	; 0x4c
   17a48:	addhi	r6, r3, r8
   17a4c:	bls	17aac <__assert_fail@plt+0x5720>
   17a50:	ldr	r3, [sp, #52]	; 0x34
   17a54:	add	r8, r8, r4
   17a58:	cmp	r8, r3
   17a5c:	bhi	17b18 <__assert_fail@plt+0x578c>
   17a60:	ldr	r3, [sp, #88]	; 0x58
   17a64:	ldr	r3, [r3, #108]	; 0x6c
   17a68:	cmp	r3, #1
   17a6c:	beq	17ac0 <__assert_fail@plt+0x5734>
   17a70:	cmp	r4, #0
   17a74:	addgt	r9, r6, r4
   17a78:	ble	17b18 <__assert_fail@plt+0x578c>
   17a7c:	ldrb	r1, [r6], #1
   17a80:	ldr	r0, [pc, #-584]	; 17840 <__assert_fail@plt+0x54b4>
   17a84:	bl	11dbc <printf@plt>
   17a88:	cmp	r9, r6
   17a8c:	bne	17a7c <__assert_fail@plt+0x56f0>
   17a90:	ldr	r3, [sp, #80]	; 0x50
   17a94:	mov	r0, #32
   17a98:	mov	r6, r9
   17a9c:	ldr	r1, [r3]
   17aa0:	bl	12254 <putc@plt>
   17aa4:	cmp	sl, r8
   17aa8:	bhi	17a50 <__assert_fail@plt+0x56c4>
   17aac:	ldr	r3, [sp, #36]	; 0x24
   17ab0:	cmp	r3, r5
   17ab4:	bgt	179ac <__assert_fail@plt+0x5620>
   17ab8:	ldr	r9, [sp, #88]	; 0x58
   17abc:	b	17328 <__assert_fail@plt+0x4f9c>
   17ac0:	cmp	r4, #0
   17ac4:	ble	17b18 <__assert_fail@plt+0x578c>
   17ac8:	add	r9, r6, r4
   17acc:	mov	r2, r9
   17ad0:	str	sl, [sp, #84]	; 0x54
   17ad4:	mov	sl, r9
   17ad8:	mov	r9, r7
   17adc:	mov	r7, r5
   17ae0:	mov	r5, r4
   17ae4:	mov	r4, r6
   17ae8:	mov	r6, r2
   17aec:	ldrb	r1, [r6, #-1]!
   17af0:	ldr	r0, [pc, #-696]	; 17840 <__assert_fail@plt+0x54b4>
   17af4:	bl	11dbc <printf@plt>
   17af8:	cmp	r6, r4
   17afc:	bne	17aec <__assert_fail@plt+0x5760>
   17b00:	mov	r4, r5
   17b04:	mov	r5, r7
   17b08:	mov	r7, r9
   17b0c:	mov	r9, sl
   17b10:	ldr	sl, [sp, #84]	; 0x54
   17b14:	b	17a90 <__assert_fail@plt+0x5704>
   17b18:	add	r9, r6, r4
   17b1c:	b	17a90 <__assert_fail@plt+0x5704>
   17b20:	cmp	r2, #0
   17b24:	beq	16eac <__assert_fail@plt+0x4b20>
   17b28:	ldrb	r3, [r2]
   17b2c:	ldr	r5, [sp, #156]	; 0x9c
   17b30:	cmp	r3, #0
   17b34:	beq	16e90 <__assert_fail@plt+0x4b04>
   17b38:	b	16e98 <__assert_fail@plt+0x4b0c>
   17b3c:	mov	r4, r3
   17b40:	mov	r5, r3
   17b44:	add	r1, sp, #192	; 0xc0
   17b48:	ldr	r0, [pc, #-780]	; 17844 <__assert_fail@plt+0x54b8>
   17b4c:	bl	11dbc <printf@plt>
   17b50:	b	172fc <__assert_fail@plt+0x4f70>
   17b54:	ldr	r0, [sp, #44]	; 0x2c
   17b58:	b	16d98 <__assert_fail@plt+0x4a0c>
   17b5c:	ldr	r2, [sp, #20]
   17b60:	ldr	r3, [sp, #64]	; 0x40
   17b64:	ldr	r1, [sp, #52]	; 0x34
   17b68:	sub	r3, r3, r2
   17b6c:	ldr	r2, [sp, #24]
   17b70:	mul	r3, r2, r3
   17b74:	str	r3, [sp, #36]	; 0x24
   17b78:	str	r3, [sp, #28]
   17b7c:	ldr	r3, [sp, #44]	; 0x2c
   17b80:	cmp	r3, r1
   17b84:	bcc	178b8 <__assert_fail@plt+0x552c>
   17b88:	mov	r1, #0
   17b8c:	b	17904 <__assert_fail@plt+0x5578>
   17b90:	ldr	r0, [pc, #-848]	; 17848 <__assert_fail@plt+0x54bc>
   17b94:	bl	11dbc <printf@plt>
   17b98:	b	17b44 <__assert_fail@plt+0x57b8>
   17b9c:	ldr	r3, [sp, #40]	; 0x28
   17ba0:	ldr	r2, [sp, #20]
   17ba4:	ldr	r6, [r3]
   17ba8:	ldr	r3, [sp, #68]	; 0x44
   17bac:	add	r5, r3, r2
   17bb0:	ldr	r3, [r6, #4]
   17bb4:	sub	r5, r3, r5
   17bb8:	cmp	r5, #0
   17bbc:	beq	17bd8 <__assert_fail@plt+0x584c>
   17bc0:	ble	17234 <__assert_fail@plt+0x4ea8>
   17bc4:	ldr	r0, [sp, #36]	; 0x24
   17bc8:	ldr	r1, [sp, #24]
   17bcc:	bl	47334 <warn@@Base+0x5b64>
   17bd0:	cmp	r5, r0
   17bd4:	bge	17234 <__assert_fail@plt+0x4ea8>
   17bd8:	ldr	r3, [r9, #60]	; 0x3c
   17bdc:	orr	r3, r3, #-2147483648	; 0x80000000
   17be0:	str	r3, [r9, #60]	; 0x3c
   17be4:	ldr	r3, [sp, #32]
   17be8:	str	r6, [r3, #24]
   17bec:	b	17234 <__assert_fail@plt+0x4ea8>
   17bf0:	ldr	r3, [fp, #196]	; 0xc4
   17bf4:	cmp	r3, #0
   17bf8:	beq	16eac <__assert_fail@plt+0x4b20>
   17bfc:	ldr	r0, [fp, #200]	; 0xc8
   17c00:	add	r0, r0, #4096	; 0x1000
   17c04:	add	r0, r0, #1
   17c08:	bl	11f3c <xmalloc@plt>
   17c0c:	ldr	r6, [fp, #200]	; 0xc8
   17c10:	cmp	r6, #0
   17c14:	mov	r8, r0
   17c18:	bne	17fb0 <__assert_fail@plt+0x5c24>
   17c1c:	ldr	r0, [fp, #204]	; 0xcc
   17c20:	add	r6, r8, r6
   17c24:	cmp	r0, #0
   17c28:	ble	17c5c <__assert_fail@plt+0x58d0>
   17c2c:	ldrb	r3, [r5, #1]
   17c30:	add	r2, r5, #1
   17c34:	cmp	r3, #0
   17c38:	beq	17c5c <__assert_fail@plt+0x58d0>
   17c3c:	mov	r1, #0
   17c40:	cmp	r3, #47	; 0x2f
   17c44:	moveq	r5, r2
   17c48:	ldrb	r3, [r2, #1]!
   17c4c:	addeq	r1, r1, #1
   17c50:	cmp	r3, #0
   17c54:	cmpne	r0, r1
   17c58:	bgt	17c40 <__assert_fail@plt+0x58b4>
   17c5c:	mov	r0, r6
   17c60:	mov	r1, r5
   17c64:	mov	r2, #4096	; 0x1000
   17c68:	add	r6, r6, #4096	; 0x1000
   17c6c:	bl	12128 <strncpy@plt>
   17c70:	mov	r3, #0
   17c74:	mov	r7, #1
   17c78:	str	r8, [sp, #156]	; 0x9c
   17c7c:	strb	r3, [r6]
   17c80:	b	16eb4 <__assert_fail@plt+0x4b28>
   17c84:	ldr	r0, [sp, #160]	; 0xa0
   17c88:	cmp	r0, #0
   17c8c:	bne	170dc <__assert_fail@plt+0x4d50>
   17c90:	b	17134 <__assert_fail@plt+0x4da8>
   17c94:	ldr	r3, [sp, #48]	; 0x30
   17c98:	mov	r1, r0
   17c9c:	ldr	r0, [pc, #-1112]	; 1784c <__assert_fail@plt+0x54c0>
   17ca0:	ldr	r2, [r3, #80]	; 0x50
   17ca4:	add	r2, r4, r2
   17ca8:	bl	11dbc <printf@plt>
   17cac:	ldr	r3, [sp, #60]	; 0x3c
   17cb0:	ldr	r2, [sp, #40]	; 0x28
   17cb4:	cmp	r3, r2
   17cb8:	strls	r4, [sp, #20]
   17cbc:	bhi	17738 <__assert_fail@plt+0x53ac>
   17cc0:	b	16d30 <__assert_fail@plt+0x49a4>
   17cc4:	ldr	r3, [pc, #-1148]	; 17850 <__assert_fail@plt+0x54c4>
   17cc8:	cmp	r1, #0
   17ccc:	moveq	r1, r3
   17cd0:	ldr	r0, [pc, #-1156]	; 17854 <__assert_fail@plt+0x54c8>
   17cd4:	bl	11dbc <printf@plt>
   17cd8:	b	16f38 <__assert_fail@plt+0x4bac>
   17cdc:	ldr	r3, [sp, #184]	; 0xb8
   17ce0:	mov	sl, r9
   17ce4:	cmp	r3, #0
   17ce8:	bne	18020 <__assert_fail@plt+0x5c94>
   17cec:	ldr	r4, [sp, #36]	; 0x24
   17cf0:	cmp	r4, #0
   17cf4:	blt	174e0 <__assert_fail@plt+0x5154>
   17cf8:	mov	r2, #5
   17cfc:	ldr	r1, [pc, #-1196]	; 17858 <__assert_fail@plt+0x54cc>
   17d00:	mov	r0, #0
   17d04:	bl	11ea0 <dcgettext@plt>
   17d08:	mov	r1, r4
   17d0c:	bl	406c8 <__assert_fail@plt+0x2e33c>
   17d10:	mov	r3, #1
   17d14:	str	r3, [fp, #16]
   17d18:	b	174e0 <__assert_fail@plt+0x5154>
   17d1c:	ldr	r3, [r5, #16]
   17d20:	ldr	r2, [sp, #108]	; 0x6c
   17d24:	cmp	r3, r2
   17d28:	bne	16c60 <__assert_fail@plt+0x48d4>
   17d2c:	ldr	r3, [r2, #28]
   17d30:	ldr	r2, [r5, #8]
   17d34:	add	r3, r3, r2
   17d38:	cmp	r3, r4
   17d3c:	bhi	16c60 <__assert_fail@plt+0x48d4>
   17d40:	ldr	r4, [r5, #12]
   17d44:	tst	r4, #65536	; 0x10000
   17d48:	bne	17d78 <__assert_fail@plt+0x59ec>
   17d4c:	ldr	r5, [r5, #4]
   17d50:	ldr	r1, [pc, #-1276]	; 1785c <__assert_fail@plt+0x54d0>
   17d54:	mov	r0, r5
   17d58:	bl	11d5c <strstr@plt>
   17d5c:	cmp	r0, #0
   17d60:	bne	17d78 <__assert_fail@plt+0x59ec>
   17d64:	mov	r0, r5
   17d68:	ldr	r1, [pc, #-1296]	; 17860 <__assert_fail@plt+0x54d4>
   17d6c:	bl	11d5c <strstr@plt>
   17d70:	cmp	r0, #0
   17d74:	beq	16c60 <__assert_fail@plt+0x48d4>
   17d78:	lsr	r4, r4, #3
   17d7c:	and	r3, r4, #1
   17d80:	str	r3, [sp, #72]	; 0x48
   17d84:	b	16c68 <__assert_fail@plt+0x48dc>
   17d88:	ldr	r4, [sp, #48]	; 0x30
   17d8c:	ldr	r1, [sp, #24]
   17d90:	ldr	r0, [r4, #36]	; 0x24
   17d94:	bl	47334 <warn@@Base+0x5b64>
   17d98:	ldr	r3, [sp, #32]
   17d9c:	ldr	r2, [r4, #28]
   17da0:	add	r1, sp, #192	; 0xc0
   17da4:	add	r2, r0, r2
   17da8:	ldr	r0, [r3]
   17dac:	bl	12230 <bfd_sprintf_vma@plt>
   17db0:	ldrb	r3, [sp, #192]	; 0xc0
   17db4:	cmp	r3, #48	; 0x30
   17db8:	bne	16d04 <__assert_fail@plt+0x4978>
   17dbc:	add	r2, sp, #193	; 0xc1
   17dc0:	ldr	r1, [sp, #96]	; 0x60
   17dc4:	b	17dcc <__assert_fail@plt+0x5a40>
   17dc8:	mov	r1, r0
   17dcc:	ldrb	r3, [r2], #1
   17dd0:	add	r0, r1, #1
   17dd4:	cmp	r3, #48	; 0x30
   17dd8:	beq	17dc8 <__assert_fail@plt+0x5a3c>
   17ddc:	cmp	r3, #0
   17de0:	bne	17df4 <__assert_fail@plt+0x5a68>
   17de4:	ldr	r3, [sp, #48]	; 0x30
   17de8:	ldr	r3, [r3, #28]
   17dec:	cmp	r3, #0
   17df0:	bne	16d04 <__assert_fail@plt+0x4978>
   17df4:	bic	r3, r1, #3
   17df8:	str	r3, [sp, #96]	; 0x60
   17dfc:	b	16d04 <__assert_fail@plt+0x4978>
   17e00:	mvn	r3, #0
   17e04:	cmp	r0, #0
   17e08:	str	r5, [sl, #40]	; 0x28
   17e0c:	str	r5, [sl, #44]	; 0x2c
   17e10:	str	r3, [sl, #52]	; 0x34
   17e14:	bne	17e54 <__assert_fail@plt+0x5ac8>
   17e18:	ldr	r3, [sl]
   17e1c:	ldr	r1, [pc, #-1472]	; 17864 <__assert_fail@plt+0x54d8>
   17e20:	ldr	r0, [sl, #4]
   17e24:	blx	r3
   17e28:	mov	r3, r4
   17e2c:	ldr	r1, [sp, #108]	; 0x6c
   17e30:	ldr	r0, [sp, #128]	; 0x80
   17e34:	str	r5, [sp, #4]
   17e38:	str	sl, [sp]
   17e3c:	mov	r2, r5
   17e40:	bl	139d8 <__assert_fail@plt+0x164c>
   17e44:	ldr	r3, [sl]
   17e48:	ldr	r1, [pc, #-1512]	; 17868 <__assert_fail@plt+0x54dc>
   17e4c:	ldr	r0, [sl, #4]
   17e50:	blx	r3
   17e54:	ldr	r3, [sp, #112]	; 0x70
   17e58:	ldr	r2, [sp, #20]
   17e5c:	cmp	r3, r2
   17e60:	bls	17f94 <__assert_fail@plt+0x5c08>
   17e64:	mov	r2, #0
   17e68:	str	r2, [sp, #120]	; 0x78
   17e6c:	str	r3, [sp, #64]	; 0x40
   17e70:	b	16c44 <__assert_fail@plt+0x48b8>
   17e74:	ldr	r1, [fp, #156]	; 0x9c
   17e78:	cmp	r1, r3
   17e7c:	bne	16f18 <__assert_fail@plt+0x4b8c>
   17e80:	b	16f38 <__assert_fail@plt+0x4bac>
   17e84:	mov	r5, r1
   17e88:	cmp	r7, #0
   17e8c:	bne	180d0 <__assert_fail@plt+0x5d44>
   17e90:	add	r3, sp, #192	; 0xc0
   17e94:	mov	r2, r3
   17e98:	mov	r1, r5
   17e9c:	mov	r0, r5
   17ea0:	str	r3, [sp, #92]	; 0x5c
   17ea4:	bl	144ec <__assert_fail@plt+0x2160>
   17ea8:	subs	r6, r0, #0
   17eac:	beq	180e4 <__assert_fail@plt+0x5d58>
   17eb0:	mov	r0, r4
   17eb4:	bl	11eac <bfd_get_mtime@plt>
   17eb8:	ldr	r3, [sp, #272]	; 0x110
   17ebc:	cmp	r3, r0
   17ec0:	ble	16ff8 <__assert_fail@plt+0x4c6c>
   17ec4:	mov	r2, #5
   17ec8:	ldr	r1, [pc, #-1636]	; 1786c <__assert_fail@plt+0x54e0>
   17ecc:	mov	r0, #0
   17ed0:	bl	11ea0 <dcgettext@plt>
   17ed4:	mov	r1, r5
   17ed8:	bl	417d0 <warn@@Base>
   17edc:	b	16ff8 <__assert_fail@plt+0x4c6c>
   17ee0:	mvn	r4, #4
   17ee4:	adds	r4, r5, r4
   17ee8:	ldr	r3, [r6, #32]
   17eec:	movcc	r4, #1
   17ef0:	cmp	r3, r4
   17ef4:	bcc	17028 <__assert_fail@plt+0x4c9c>
   17ef8:	cmp	r5, r3
   17efc:	bls	1817c <__assert_fail@plt+0x5df0>
   17f00:	cmp	r2, #0
   17f04:	add	r4, r3, #1
   17f08:	beq	170c0 <__assert_fail@plt+0x4d34>
   17f0c:	cmp	r5, r4
   17f10:	bcs	17038 <__assert_fail@plt+0x4cac>
   17f14:	b	170c0 <__assert_fail@plt+0x4d34>
   17f18:	ldr	r3, [r7]
   17f1c:	mov	r0, #10
   17f20:	mov	r1, r3
   17f24:	bl	12254 <putc@plt>
   17f28:	b	170a0 <__assert_fail@plt+0x4d14>
   17f2c:	ldm	fp, {ip, lr}
   17f30:	ldr	r3, [sp, #152]	; 0x98
   17f34:	cmp	r3, ip
   17f38:	add	r8, lr, r3, lsl #2
   17f3c:	bge	17f5c <__assert_fail@plt+0x5bd0>
   17f40:	ldr	r6, [lr, r3, lsl #2]
   17f44:	ldr	lr, [r6, #16]
   17f48:	ldr	r6, [r6, #8]
   17f4c:	ldr	lr, [lr, #28]
   17f50:	add	lr, lr, r6
   17f54:	cmp	r4, lr
   17f58:	bcs	18098 <__assert_fail@plt+0x5d0c>
   17f5c:	mov	lr, #0
   17f60:	cmp	r0, #0
   17f64:	str	r8, [sl, #40]	; 0x28
   17f68:	str	lr, [sl, #44]	; 0x2c
   17f6c:	str	r3, [sl, #52]	; 0x34
   17f70:	bne	16b04 <__assert_fail@plt+0x4778>
   17f74:	b	16aa4 <__assert_fail@plt+0x4718>
   17f78:	cmp	r4, ip
   17f7c:	bcs	18084 <__assert_fail@plt+0x5cf8>
   17f80:	mov	r3, #0
   17f84:	str	r3, [sp, #120]	; 0x78
   17f88:	ldr	r3, [sp, #108]	; 0x6c
   17f8c:	ldr	r3, [r3, #28]
   17f90:	b	16c0c <__assert_fail@plt+0x4880>
   17f94:	mov	r3, #0
   17f98:	str	r3, [sp, #120]	; 0x78
   17f9c:	ldr	r3, [sp, #112]	; 0x70
   17fa0:	str	r3, [sp, #64]	; 0x40
   17fa4:	mov	r3, #1
   17fa8:	str	r3, [sp, #72]	; 0x48
   17fac:	b	16c68 <__assert_fail@plt+0x48dc>
   17fb0:	mov	r2, r6
   17fb4:	ldr	r1, [fp, #196]	; 0xc4
   17fb8:	bl	11e40 <memcpy@plt>
   17fbc:	b	17c1c <__assert_fail@plt+0x5890>
   17fc0:	ldr	r3, [r5, #16]
   17fc4:	ldr	r2, [sp, #152]	; 0x98
   17fc8:	ldr	r1, [fp]
   17fcc:	ldr	ip, [r3, #28]
   17fd0:	ldr	r3, [r5, #8]
   17fd4:	cmp	r2, r1
   17fd8:	add	ip, ip, r3
   17fdc:	bge	17f78 <__assert_fail@plt+0x5bec>
   17fe0:	ldr	r3, [fp, #4]
   17fe4:	cmp	r4, ip
   17fe8:	ldr	r3, [r3, r2, lsl #2]
   17fec:	str	r3, [sp, #120]	; 0x78
   17ff0:	bcc	17f88 <__assert_fail@plt+0x5bfc>
   17ff4:	ldr	r2, [sp, #120]	; 0x78
   17ff8:	cmp	r2, #0
   17ffc:	beq	18234 <__assert_fail@plt+0x5ea8>
   18000:	ldr	r3, [r2, #16]
   18004:	ldr	r1, [sp, #108]	; 0x6c
   18008:	ldr	r2, [r2, #8]
   1800c:	ldr	r3, [r3, #28]
   18010:	ldr	r1, [r1, #28]
   18014:	sub	r3, r3, r1
   18018:	add	r3, r3, r2
   1801c:	b	16c10 <__assert_fail@plt+0x4884>
   18020:	ldr	r0, [sp, #180]	; 0xb4
   18024:	bl	11fe4 <puts@plt>
   18028:	b	17cec <__assert_fail@plt+0x5960>
   1802c:	ldr	r3, [sp, #108]	; 0x6c
   18030:	ldr	r3, [r3, #20]
   18034:	tst	r3, #4
   18038:	beq	1806c <__assert_fail@plt+0x5ce0>
   1803c:	ldr	r3, [fp, #104]	; 0x68
   18040:	cmp	r3, #0
   18044:	bne	18054 <__assert_fail@plt+0x5cc8>
   18048:	ldr	r3, [r7, #124]	; 0x7c
   1804c:	cmp	r3, #0
   18050:	beq	1806c <__assert_fail@plt+0x5ce0>
   18054:	ldr	r1, [sp, #108]	; 0x6c
   18058:	ldr	r0, [sp, #128]	; 0x80
   1805c:	bl	122e4 <bfd_get_reloc_upper_bound@plt>
   18060:	cmp	r0, #0
   18064:	blt	18254 <__assert_fail@plt+0x5ec8>
   18068:	bne	181c8 <__assert_fail@plt+0x5e3c>
   1806c:	mov	r3, #0
   18070:	str	r3, [sp, #60]	; 0x3c
   18074:	str	r3, [sp, #40]	; 0x28
   18078:	str	r3, [sp, #68]	; 0x44
   1807c:	str	r3, [sp, #140]	; 0x8c
   18080:	b	16944 <__assert_fail@plt+0x45b8>
   18084:	ldr	r2, [sp, #112]	; 0x70
   18088:	mov	r3, #0
   1808c:	str	r3, [sp, #120]	; 0x78
   18090:	str	r2, [sp, #64]	; 0x40
   18094:	b	16c24 <__assert_fail@plt+0x4898>
   18098:	mov	r9, r8
   1809c:	mov	lr, r3
   180a0:	add	lr, lr, #1
   180a4:	cmp	lr, ip
   180a8:	beq	18244 <__assert_fail@plt+0x5eb8>
   180ac:	ldr	r7, [r9, #4]!
   180b0:	ldr	r6, [r7, #16]
   180b4:	ldr	r7, [r7, #8]
   180b8:	ldr	r6, [r6, #28]
   180bc:	add	r6, r6, r7
   180c0:	cmp	r6, r4
   180c4:	bls	180a0 <__assert_fail@plt+0x5d14>
   180c8:	sub	lr, lr, r3
   180cc:	b	17f60 <__assert_fail@plt+0x5bd4>
   180d0:	mov	r0, r5
   180d4:	bl	11f60 <xstrdup@plt>
   180d8:	mov	r5, r0
   180dc:	str	r0, [sp, #156]	; 0x9c
   180e0:	b	17e90 <__assert_fail@plt+0x5b04>
   180e4:	ldr	r3, [fp, #212]	; 0xd4
   180e8:	cmp	r3, #0
   180ec:	beq	170d0 <__assert_fail@plt+0x4d44>
   180f0:	mov	r0, r5
   180f4:	bl	11fa8 <lbasename@plt>
   180f8:	ldr	r3, [fp, #212]	; 0xd4
   180fc:	cmp	r3, #0
   18100:	ble	170d0 <__assert_fail@plt+0x4d44>
   18104:	mov	r7, r6
   18108:	str	r4, [sp, #80]	; 0x50
   1810c:	ldr	sl, [pc, #-2212]	; 17870 <__assert_fail@plt+0x54e4>
   18110:	str	r8, [sp, #28]
   18114:	mov	r4, r0
   18118:	ldr	r6, [sp, #92]	; 0x5c
   1811c:	b	18138 <__assert_fail@plt+0x5dac>
   18120:	mov	r0, r8
   18124:	bl	11e10 <free@plt>
   18128:	ldr	r3, [fp, #212]	; 0xd4
   1812c:	add	r7, r7, #1
   18130:	cmp	r7, r3
   18134:	bge	1822c <__assert_fail@plt+0x5ea0>
   18138:	ldr	r1, [fp, #216]	; 0xd8
   1813c:	mov	r3, #0
   18140:	mov	r2, r4
   18144:	ldr	r0, [r1, r7, lsl #2]
   18148:	mov	r1, sl
   1814c:	bl	11ee8 <concat@plt>
   18150:	mov	r2, r6
   18154:	mov	r1, r0
   18158:	mov	r8, r0
   1815c:	mov	r0, r5
   18160:	bl	144ec <__assert_fail@plt+0x2160>
   18164:	cmp	r0, #0
   18168:	beq	18120 <__assert_fail@plt+0x5d94>
   1816c:	ldr	r8, [sp, #28]
   18170:	mov	r6, r0
   18174:	ldr	r4, [sp, #80]	; 0x50
   18178:	b	17eb0 <__assert_fail@plt+0x5b24>
   1817c:	cmp	r2, #0
   18180:	movne	r4, r5
   18184:	bne	17038 <__assert_fail@plt+0x4cac>
   18188:	b	170c4 <__assert_fail@plt+0x4d38>
   1818c:	ldr	r2, [r2, #448]	; 0x1c0
   18190:	cmp	r2, r3
   18194:	beq	1821c <__assert_fail@plt+0x5e90>
   18198:	ldrb	r3, [r2, #469]	; 0x1d5
   1819c:	ands	r3, r3, r4
   181a0:	beq	16a2c <__assert_fail@plt+0x46a0>
   181a4:	ldr	r3, [r2, #396]	; 0x18c
   181a8:	ldrb	r3, [r3, #10]
   181ac:	sub	r3, r3, #1
   181b0:	lsl	r3, r4, r3
   181b4:	str	r3, [sp, #132]	; 0x84
   181b8:	lsl	r3, r3, r4
   181bc:	sub	r3, r3, #1
   181c0:	str	r3, [sp, #136]	; 0x88
   181c4:	b	16a38 <__assert_fail@plt+0x46ac>
   181c8:	bl	11f3c <xmalloc@plt>
   181cc:	ldr	r3, [fp, #36]	; 0x24
   181d0:	ldr	r1, [sp, #108]	; 0x6c
   181d4:	mov	r2, r0
   181d8:	str	r0, [sp, #40]	; 0x28
   181dc:	ldr	r0, [sp, #128]	; 0x80
   181e0:	bl	1229c <bfd_canonicalize_reloc@plt>
   181e4:	subs	r5, r0, #0
   181e8:	blt	18254 <__assert_fail@plt+0x5ec8>
   181ec:	ldr	r6, [sp, #40]	; 0x28
   181f0:	ldr	r3, [pc, #-2436]	; 17874 <__assert_fail@plt+0x54e8>
   181f4:	mov	r2, #4
   181f8:	mov	r1, r5
   181fc:	mov	r0, r6
   18200:	bl	12290 <qsort@plt>
   18204:	add	r2, r6, r5, lsl #2
   18208:	mov	r3, #0
   1820c:	str	r2, [sp, #60]	; 0x3c
   18210:	str	r6, [sp, #140]	; 0x8c
   18214:	str	r3, [sp, #68]	; 0x44
   18218:	b	16944 <__assert_fail@plt+0x45b8>
   1821c:	mvn	r3, #0
   18220:	str	r2, [sp, #132]	; 0x84
   18224:	str	r3, [sp, #136]	; 0x88
   18228:	b	16a38 <__assert_fail@plt+0x46ac>
   1822c:	ldr	r8, [sp, #28]
   18230:	b	170d0 <__assert_fail@plt+0x4d44>
   18234:	ldr	r3, [sp, #112]	; 0x70
   18238:	str	r3, [sp, #64]	; 0x40
   1823c:	ldr	r3, [sp, #120]	; 0x78
   18240:	b	16c24 <__assert_fail@plt+0x4898>
   18244:	sub	lr, ip, r3
   18248:	b	17f60 <__assert_fail@plt+0x5bd4>
   1824c:	mov	r5, r2
   18250:	b	17e88 <__assert_fail@plt+0x5afc>
   18254:	ldr	r3, [sp, #128]	; 0x80
   18258:	ldr	r0, [r3]
   1825c:	bl	40630 <__assert_fail@plt+0x2e2a4>
   18260:	push	{r4, r5, r6, lr}
   18264:	mov	r5, r1
   18268:	mov	r6, r2
   1826c:	mov	r4, r0
   18270:	bl	40da8 <__assert_fail@plt+0x2ea1c>
   18274:	cmp	r0, #1
   18278:	sbcs	r3, r1, #0
   1827c:	blt	182b8 <__assert_fail@plt+0x5f2c>
   18280:	mov	r1, r5
   18284:	mov	r0, r4
   18288:	bl	11e58 <bfd_openr@plt>
   1828c:	subs	r5, r0, #0
   18290:	beq	182b0 <__assert_fail@plt+0x5f24>
   18294:	mov	r1, #0
   18298:	bl	161c0 <__assert_fail@plt+0x3e34>
   1829c:	cmp	r6, #0
   182a0:	mov	r0, r5
   182a4:	bne	182c8 <__assert_fail@plt+0x5f3c>
   182a8:	pop	{r4, r5, r6, lr}
   182ac:	b	12224 <bfd_close@plt>
   182b0:	mov	r0, r4
   182b4:	bl	403fc <__assert_fail@plt+0x2e070>
   182b8:	ldr	r3, [pc, #16]	; 182d0 <__assert_fail@plt+0x5f44>
   182bc:	mov	r2, #1
   182c0:	str	r2, [r3, #16]
   182c4:	pop	{r4, r5, r6, pc}
   182c8:	pop	{r4, r5, r6, lr}
   182cc:	b	12080 <bfd_close_all_done@plt>
   182d0:	andeq	r7, r6, r0, asr #8
   182d4:	cmp	r0, #0
   182d8:	bxeq	lr
   182dc:	push	{r4, r5, r6, r7}
   182e0:	mov	r6, r2
   182e4:	ldr	r2, [r0, #44]	; 0x2c
   182e8:	cmp	r2, #0
   182ec:	moveq	r0, r2
   182f0:	beq	1833c <__assert_fail@plt+0x5fb0>
   182f4:	mov	r7, r3
   182f8:	ldr	r3, [r2]
   182fc:	cmp	r3, #0
   18300:	beq	18350 <__assert_fail@plt+0x5fc4>
   18304:	ldr	r0, [r3, #4]
   18308:	mov	r1, #0
   1830c:	cmp	r7, r1
   18310:	cmpeq	r6, r0
   18314:	bne	18330 <__assert_fail@plt+0x5fa4>
   18318:	b	18344 <__assert_fail@plt+0x5fb8>
   1831c:	ldr	r4, [r0, #4]
   18320:	mov	r5, #0
   18324:	cmp	r5, r7
   18328:	cmpeq	r4, r6
   1832c:	beq	18344 <__assert_fail@plt+0x5fb8>
   18330:	ldr	r0, [r2, #4]!
   18334:	cmp	r0, #0
   18338:	bne	1831c <__assert_fail@plt+0x5f90>
   1833c:	pop	{r4, r5, r6, r7}
   18340:	bx	lr
   18344:	mov	r0, #1
   18348:	pop	{r4, r5, r6, r7}
   1834c:	bx	lr
   18350:	mov	r0, r3
   18354:	b	1833c <__assert_fail@plt+0x5fb0>
   18358:	push	{r4, r5, r6, lr}
   1835c:	lsl	r6, r0, #3
   18360:	ldr	r4, [pc, #124]	; 183e4 <__assert_fail@plt+0x6058>
   18364:	add	r3, r6, r0
   18368:	add	r3, r4, r3, lsl #3
   1836c:	ldr	r2, [r3, #16]
   18370:	cmp	r2, #0
   18374:	popeq	{r4, r5, r6, pc}
   18378:	ldr	r3, [r3, #52]	; 0x34
   1837c:	cmp	r3, #0
   18380:	beq	18390 <__assert_fail@plt+0x6004>
   18384:	ldr	r1, [r3, #108]	; 0x6c
   18388:	cmp	r2, r1
   1838c:	beq	183c0 <__assert_fail@plt+0x6034>
   18390:	mov	r5, r0
   18394:	mov	r0, r2
   18398:	bl	11e10 <free@plt>
   1839c:	add	r0, r6, r5
   183a0:	mov	r2, #0
   183a4:	add	r0, r4, r0, lsl #3
   183a8:	mov	r3, #0
   183ac:	mov	r1, #0
   183b0:	str	r1, [r0, #16]
   183b4:	strd	r2, [r0, #24]
   183b8:	strd	r2, [r0, #32]
   183bc:	pop	{r4, r5, r6, pc}
   183c0:	ldrb	ip, [r3, #24]
   183c4:	ldr	r1, [r3, #20]
   183c8:	mov	lr, #0
   183cc:	bic	ip, ip, #48	; 0x30
   183d0:	bic	r1, r1, #16384	; 0x4000
   183d4:	strb	ip, [r3, #24]
   183d8:	str	r1, [r3, #20]
   183dc:	str	lr, [r3, #108]	; 0x6c
   183e0:	b	18390 <__assert_fail@plt+0x6004>
   183e4:	andeq	r6, r6, r0, ror #10
   183e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   183ec:	lsl	r8, r0, #3
   183f0:	ldr	r7, [pc, #456]	; 185c0 <__assert_fail@plt+0x6234>
   183f4:	add	r3, r8, r0
   183f8:	mov	r6, r1
   183fc:	add	r3, r7, r3, lsl #3
   18400:	sub	sp, sp, #8
   18404:	ldr	r4, [r3, #16]
   18408:	mov	r5, r0
   1840c:	cmp	r4, #0
   18410:	mov	r9, r2
   18414:	ldr	r1, [r2]
   18418:	beq	18444 <__assert_fail@plt+0x60b8>
   1841c:	ldr	r0, [r3, #12]
   18420:	bl	11d98 <strcmp@plt>
   18424:	cmp	r0, #0
   18428:	bne	18438 <__assert_fail@plt+0x60ac>
   1842c:	mov	r0, #1
   18430:	add	sp, sp, #8
   18434:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18438:	mov	r0, r4
   1843c:	bl	11e10 <free@plt>
   18440:	ldr	r1, [r9]
   18444:	add	r4, r8, r5
   18448:	mov	r3, #0
   1844c:	add	r4, r7, r4, lsl #3
   18450:	str	r3, [r4, #44]	; 0x2c
   18454:	str	r3, [r4, #48]	; 0x30
   18458:	str	r1, [r4, #12]
   1845c:	ldr	r0, [r6, #28]
   18460:	str	r3, [r4, #28]
   18464:	str	r0, [r4, #24]
   18468:	ldr	r2, [r6, #36]	; 0x24
   1846c:	str	r3, [r4, #36]	; 0x24
   18470:	add	sl, r2, #1
   18474:	mov	r0, sl
   18478:	str	r2, [r4, #32]
   1847c:	bl	11ffc <malloc@plt>
   18480:	cmp	sl, #0
   18484:	moveq	sl, #1
   18488:	str	r6, [r4, #52]	; 0x34
   1848c:	clz	r3, r0
   18490:	lsr	r3, r3, #5
   18494:	movne	sl, r3
   18498:	cmp	sl, #0
   1849c:	str	r0, [r4, #16]
   184a0:	str	r0, [sp, #4]
   184a4:	bne	18564 <__assert_fail@plt+0x61d8>
   184a8:	add	r2, sp, #4
   184ac:	mov	r1, r6
   184b0:	mov	r0, r9
   184b4:	bl	11f9c <bfd_get_full_section_contents@plt>
   184b8:	cmp	r0, #0
   184bc:	beq	18564 <__assert_fail@plt+0x61d8>
   184c0:	ldr	r7, [pc, #252]	; 185c4 <__assert_fail@plt+0x6238>
   184c4:	ldr	r2, [r4, #16]
   184c8:	ldr	r3, [r4, #32]
   184cc:	ldr	r1, [r7, #44]	; 0x2c
   184d0:	cmp	r1, #0
   184d4:	strb	sl, [r2, r3]
   184d8:	beq	1842c <__assert_fail@plt+0x60a0>
   184dc:	ldr	r3, [r4, #64]	; 0x40
   184e0:	cmp	r3, #0
   184e4:	beq	1842c <__assert_fail@plt+0x60a0>
   184e8:	ldr	r1, [r4, #16]
   184ec:	mov	r0, r6
   184f0:	bl	120bc <bfd_cache_section_contents@plt>
   184f4:	ldr	r3, [r7, #36]	; 0x24
   184f8:	ldr	r2, [r4, #16]
   184fc:	mov	r1, r6
   18500:	mov	r0, r9
   18504:	bl	12200 <bfd_simple_get_relocated_section_contents@plt>
   18508:	subs	r7, r0, #0
   1850c:	beq	18598 <__assert_fail@plt+0x620c>
   18510:	mov	r1, r6
   18514:	mov	r0, r9
   18518:	bl	122e4 <bfd_get_reloc_upper_bound@plt>
   1851c:	cmp	r0, #0
   18520:	ble	1842c <__assert_fail@plt+0x60a0>
   18524:	bl	11f3c <xmalloc@plt>
   18528:	mov	r3, sl
   1852c:	mov	r1, r6
   18530:	mov	r5, r0
   18534:	mov	r2, r0
   18538:	mov	r0, r9
   1853c:	bl	1229c <bfd_canonicalize_reloc@plt>
   18540:	cmp	r0, #0
   18544:	strne	r0, [r4, #48]	; 0x30
   18548:	strne	r5, [r4, #44]	; 0x2c
   1854c:	movne	r0, #1
   18550:	bne	18430 <__assert_fail@plt+0x60a4>
   18554:	mov	r0, r5
   18558:	bl	11e10 <free@plt>
   1855c:	mov	r0, #1
   18560:	b	18430 <__assert_fail@plt+0x60a4>
   18564:	mov	r0, r5
   18568:	add	r5, r8, r5
   1856c:	bl	18358 <__assert_fail@plt+0x5fcc>
   18570:	add	r7, r7, r5, lsl #3
   18574:	mov	r2, #5
   18578:	ldr	r1, [pc, #72]	; 185c8 <__assert_fail@plt+0x623c>
   1857c:	mov	r0, #0
   18580:	bl	11ea0 <dcgettext@plt>
   18584:	ldr	r1, [r7, #8]
   18588:	bl	11dbc <printf@plt>
   1858c:	mov	r0, #0
   18590:	add	sp, sp, #8
   18594:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18598:	mov	r0, r5
   1859c:	bl	18358 <__assert_fail@plt+0x5fcc>
   185a0:	mov	r2, #5
   185a4:	ldr	r1, [pc, #28]	; 185c8 <__assert_fail@plt+0x623c>
   185a8:	mov	r0, r7
   185ac:	bl	11ea0 <dcgettext@plt>
   185b0:	ldr	r1, [r4, #8]
   185b4:	bl	11dbc <printf@plt>
   185b8:	mov	r0, r7
   185bc:	b	18430 <__assert_fail@plt+0x60a4>
   185c0:	andeq	r6, r6, r0, ror #10
   185c4:	andeq	r7, r6, r0, asr #8
   185c8:	andeq	r9, r4, r8, ror #5
   185cc:	push	{r4, r5, r6, r7, r8, lr}
   185d0:	lsl	r4, r0, #3
   185d4:	ldr	r6, [pc, #144]	; 1866c <__assert_fail@plt+0x62e0>
   185d8:	add	r3, r4, r0
   185dc:	mov	r5, r0
   185e0:	add	r3, r6, r3, lsl #3
   185e4:	mov	r7, r1
   185e8:	ldr	r2, [r3, #16]
   185ec:	cmp	r2, #0
   185f0:	beq	18608 <__assert_fail@plt+0x627c>
   185f4:	ldr	r0, [r3, #12]
   185f8:	ldr	r1, [r1]
   185fc:	bl	11d98 <strcmp@plt>
   18600:	cmp	r0, #0
   18604:	beq	18640 <__assert_fail@plt+0x62b4>
   18608:	add	r4, r4, r5
   1860c:	mov	r0, r7
   18610:	lsl	r4, r4, #3
   18614:	add	r8, r6, r4
   18618:	ldr	r1, [r6, r4]
   1861c:	bl	11f84 <bfd_get_section_by_name@plt>
   18620:	subs	r1, r0, #0
   18624:	beq	18648 <__assert_fail@plt+0x62bc>
   18628:	ldr	r3, [r6, r4]
   1862c:	str	r3, [r8, #8]
   18630:	mov	r2, r7
   18634:	mov	r0, r5
   18638:	pop	{r4, r5, r6, r7, r8, lr}
   1863c:	b	183e8 <__assert_fail@plt+0x605c>
   18640:	mov	r0, #1
   18644:	pop	{r4, r5, r6, r7, r8, pc}
   18648:	ldr	r1, [r8, #4]
   1864c:	mov	r0, r7
   18650:	bl	11f84 <bfd_get_section_by_name@plt>
   18654:	subs	r1, r0, #0
   18658:	ldrne	r3, [r8, #4]
   1865c:	strne	r3, [r8, #8]
   18660:	bne	18630 <__assert_fail@plt+0x62a4>
   18664:	mov	r0, r1
   18668:	pop	{r4, r5, r6, r7, r8, pc}
   1866c:	andeq	r6, r6, r0, ror #10
   18670:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18674:	mov	r2, #17
   18678:	ldr	r6, [r1]
   1867c:	mov	r9, r1
   18680:	mov	sl, r0
   18684:	ldr	r1, [pc, #212]	; 18760 <__assert_fail@plt+0x63d4>
   18688:	mov	r0, r6
   1868c:	bl	12320 <strncmp@plt>
   18690:	ldr	r8, [pc, #204]	; 18764 <__assert_fail@plt+0x63d8>
   18694:	ldr	r3, [pc, #204]	; 18768 <__assert_fail@plt+0x63dc>
   18698:	mov	r5, #0
   1869c:	mov	r4, r8
   186a0:	cmp	r0, r5
   186a4:	moveq	r6, r3
   186a8:	b	186bc <__assert_fail@plt+0x6330>
   186ac:	add	r5, r5, #1
   186b0:	cmp	r5, #43	; 0x2b
   186b4:	add	r4, r4, #72	; 0x48
   186b8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186bc:	ldr	r7, [r4]
   186c0:	mov	r1, r6
   186c4:	mov	r0, r7
   186c8:	bl	11d98 <strcmp@plt>
   186cc:	mov	r1, r6
   186d0:	subs	fp, r0, #0
   186d4:	beq	186e8 <__assert_fail@plt+0x635c>
   186d8:	ldr	r0, [r4, #4]
   186dc:	bl	11d98 <strcmp@plt>
   186e0:	cmp	r0, #0
   186e4:	bne	186ac <__assert_fail@plt+0x6320>
   186e8:	ldr	r3, [r4, #60]	; 0x3c
   186ec:	cmp	r3, #0
   186f0:	beq	186ac <__assert_fail@plt+0x6320>
   186f4:	ldr	r3, [r3]
   186f8:	cmp	r3, #0
   186fc:	beq	186ac <__assert_fail@plt+0x6320>
   18700:	cmp	fp, #0
   18704:	lsl	r3, r5, #3
   18708:	addne	r2, r3, r5
   1870c:	add	r3, r3, r5
   18710:	addne	r2, r8, r2, lsl #3
   18714:	add	r8, r8, r3, lsl #3
   18718:	ldrne	r7, [r2, #4]
   1871c:	mov	r1, r9
   18720:	mov	r2, sl
   18724:	mov	r0, r5
   18728:	str	r7, [r8, #8]
   1872c:	bl	183e8 <__assert_fail@plt+0x605c>
   18730:	cmp	r0, #0
   18734:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18738:	mov	r1, sl
   1873c:	ldr	r3, [r8, #56]	; 0x38
   18740:	mov	r0, r8
   18744:	blx	r3
   18748:	cmp	r5, #3
   1874c:	cmpne	r5, #0
   18750:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18754:	mov	r0, r5
   18758:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1875c:	b	18358 <__assert_fail@plt+0x5fcc>
   18760:	andeq	r9, r4, ip, lsl r3
   18764:	andeq	r6, r6, r0, ror #10
   18768:	andeq	r9, r4, r0, lsl r3
   1876c:	b	12224 <bfd_close@plt>
   18770:	push	{r4, lr}
   18774:	mov	r1, #0
   18778:	bl	11e58 <bfd_openr@plt>
   1877c:	subs	r4, r0, #0
   18780:	beq	1879c <__assert_fail@plt+0x6410>
   18784:	mov	r1, #1
   18788:	bl	122c0 <bfd_check_format@plt>
   1878c:	cmp	r0, #0
   18790:	beq	1879c <__assert_fail@plt+0x6410>
   18794:	mov	r0, r4
   18798:	pop	{r4, pc}
   1879c:	mov	r4, #0
   187a0:	mov	r0, r4
   187a4:	pop	{r4, pc}
   187a8:	ldr	ip, [pc, #108]	; 1881c <__assert_fail@plt+0x6490>
   187ac:	ldr	r2, [r0]
   187b0:	ldr	r3, [r1]
   187b4:	ldr	r1, [ip]
   187b8:	lsl	r2, r2, #3
   187bc:	lsl	r3, r3, #3
   187c0:	push	{r4, r5}
   187c4:	ldrd	r4, [r1, r2]
   187c8:	ldrd	r0, [r1, r3]
   187cc:	cmp	r5, r1
   187d0:	cmpeq	r4, r0
   187d4:	movhi	r0, #1
   187d8:	movls	r0, #0
   187dc:	movcc	r1, #1
   187e0:	movcs	r1, #0
   187e4:	subs	r0, r0, r1
   187e8:	bne	18814 <__assert_fail@plt+0x6488>
   187ec:	ldr	r1, [ip, #4]
   187f0:	ldrd	r4, [r1, r2]
   187f4:	ldrd	r2, [r3, r1]
   187f8:	cmp	r5, r3
   187fc:	cmpeq	r4, r2
   18800:	movhi	r0, #1
   18804:	movls	r0, #0
   18808:	movcc	r3, #1
   1880c:	movcs	r3, #0
   18810:	sub	r0, r0, r3
   18814:	pop	{r4, r5}
   18818:	bx	lr
   1881c:	andeq	r7, r6, r0, lsr r5
   18820:	ldr	r0, [r0, #32]
   18824:	ldr	r3, [r1, #32]
   18828:	sub	r0, r0, r3
   1882c:	bx	lr
   18830:	ldrd	r2, [r1]
   18834:	push	{r4, r5}
   18838:	ldrd	r4, [r0]
   1883c:	cmp	r5, r3
   18840:	cmpeq	r4, r2
   18844:	movhi	r0, #1
   18848:	movls	r0, #0
   1884c:	movcc	r3, #1
   18850:	movcs	r3, #0
   18854:	sub	r0, r0, r3
   18858:	pop	{r4, r5}
   1885c:	bx	lr
   18860:	push	{r4, lr}
   18864:	mov	r4, r0
   18868:	mov	r2, #5
   1886c:	ldr	r1, [pc, #20]	; 18888 <__assert_fail@plt+0x64fc>
   18870:	mov	r0, #0
   18874:	bl	11ea0 <dcgettext@plt>
   18878:	ldr	r1, [r4, #8]
   1887c:	bl	11dbc <printf@plt>
   18880:	mov	r0, #1
   18884:	pop	{r4, pc}
   18888:	andeq	sl, r4, r0, lsr r6
   1888c:	push	{r4, lr}
   18890:	mov	r3, r0
   18894:	ldr	r4, [pc, #104]	; 18904 <__assert_fail@plt+0x6578>
   18898:	sub	sp, sp, #8
   1889c:	ldr	r2, [r4, #72]	; 0x48
   188a0:	cmp	r2, #0
   188a4:	beq	188e8 <__assert_fail@plt+0x655c>
   188a8:	ldr	r0, [r4, #76]	; 0x4c
   188ac:	cmp	r0, r3
   188b0:	bls	188e8 <__assert_fail@plt+0x655c>
   188b4:	ldr	r0, [r2, r3, lsl #2]
   188b8:	cmp	r0, #0
   188bc:	beq	188e8 <__assert_fail@plt+0x655c>
   188c0:	cmp	r1, #0
   188c4:	bne	188fc <__assert_fail@plt+0x6570>
   188c8:	str	r0, [sp]
   188cc:	ldr	r2, [pc, #52]	; 18908 <__assert_fail@plt+0x657c>
   188d0:	mov	r1, #64	; 0x40
   188d4:	add	r0, r4, #8
   188d8:	bl	120f8 <snprintf@plt>
   188dc:	add	r0, r4, #8
   188e0:	add	sp, sp, #8
   188e4:	pop	{r4, pc}
   188e8:	ldr	r2, [pc, #28]	; 1890c <__assert_fail@plt+0x6580>
   188ec:	mov	r1, #64	; 0x40
   188f0:	ldr	r0, [pc, #24]	; 18910 <__assert_fail@plt+0x6584>
   188f4:	bl	120f8 <snprintf@plt>
   188f8:	ldr	r0, [pc, #16]	; 18910 <__assert_fail@plt+0x6584>
   188fc:	add	sp, sp, #8
   18900:	pop	{r4, pc}
   18904:	andeq	r7, r6, r0, lsr r5
   18908:	andeq	sl, r4, r4, ror r6
   1890c:	andeq	sl, r4, r0, lsl #13
   18910:	andeq	r7, r6, r8, lsr r5
   18914:	push	{r4, lr}
   18918:	bl	18770 <__assert_fail@plt+0x63e4>
   1891c:	adds	r0, r0, #0
   18920:	movne	r0, #1
   18924:	pop	{r4, pc}
   18928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1892c:	sub	sp, sp, #12
   18930:	mov	sl, r1
   18934:	mov	r9, r0
   18938:	bl	18770 <__assert_fail@plt+0x63e4>
   1893c:	subs	r3, r0, #0
   18940:	str	r3, [sp, #4]
   18944:	beq	18a0c <__assert_fail@plt+0x6680>
   18948:	ldr	r1, [pc, #240]	; 18a40 <__assert_fail@plt+0x66b4>
   1894c:	mov	r0, r9
   18950:	bl	12278 <fopen64@plt>
   18954:	subs	r6, r0, #0
   18958:	beq	18a18 <__assert_fail@plt+0x668c>
   1895c:	ldr	r5, [pc, #224]	; 18a44 <__assert_fail@plt+0x66b8>
   18960:	ldr	r4, [pc, #224]	; 18a48 <__assert_fail@plt+0x66bc>
   18964:	mov	r7, r5
   18968:	mov	fp, #0
   1896c:	mov	r3, r6
   18970:	mov	r2, #8192	; 0x2000
   18974:	mov	r1, #1
   18978:	mov	r0, r7
   1897c:	bl	11f78 <fread@plt>
   18980:	subs	r8, r0, #0
   18984:	beq	189c0 <__assert_fail@plt+0x6634>
   18988:	add	r0, r5, r8
   1898c:	cmp	r0, r5
   18990:	mvn	r2, fp
   18994:	bls	1896c <__assert_fail@plt+0x65e0>
   18998:	ldr	r1, [pc, #164]	; 18a44 <__assert_fail@plt+0x66b8>
   1899c:	ldrb	r3, [r1], #1
   189a0:	eor	r3, r3, r2
   189a4:	cmp	r0, r1
   189a8:	uxtb	r3, r3
   189ac:	ldr	r3, [r4, r3, lsl #2]
   189b0:	eor	r2, r3, r2, lsr #8
   189b4:	bne	1899c <__assert_fail@plt+0x6610>
   189b8:	mvn	fp, r2
   189bc:	b	1896c <__assert_fail@plt+0x65e0>
   189c0:	mov	r0, r6
   189c4:	bl	12164 <fclose@plt>
   189c8:	ldr	r2, [sl]
   189cc:	cmp	r2, fp
   189d0:	moveq	r0, #1
   189d4:	bne	189e0 <__assert_fail@plt+0x6654>
   189d8:	add	sp, sp, #12
   189dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189e0:	ldr	r0, [sp, #4]
   189e4:	bl	1876c <__assert_fail@plt+0x63e0>
   189e8:	mov	r2, #5
   189ec:	ldr	r1, [pc, #88]	; 18a4c <__assert_fail@plt+0x66c0>
   189f0:	mov	r0, r8
   189f4:	bl	11ea0 <dcgettext@plt>
   189f8:	mov	r1, r9
   189fc:	bl	417d0 <warn@@Base>
   18a00:	mov	r0, r8
   18a04:	add	sp, sp, #12
   18a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a0c:	ldr	r0, [sp, #4]
   18a10:	add	sp, sp, #12
   18a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a18:	ldr	r0, [sp, #4]
   18a1c:	bl	1876c <__assert_fail@plt+0x63e0>
   18a20:	mov	r2, #5
   18a24:	ldr	r1, [pc, #36]	; 18a50 <__assert_fail@plt+0x66c4>
   18a28:	mov	r0, r6
   18a2c:	bl	11ea0 <dcgettext@plt>
   18a30:	mov	r1, r9
   18a34:	bl	417d0 <warn@@Base>
   18a38:	mov	r0, r6
   18a3c:	b	189d8 <__assert_fail@plt+0x664c>
   18a40:	andeq	sl, r4, r4, lsl #13
   18a44:	andeq	r7, r6, ip, asr ip
   18a48:	andeq	r9, r4, ip, ror r7
   18a4c:			; <UNDEFINED> instruction: 0x0004a6b8
   18a50:	andeq	sl, r4, r8, lsl #13
   18a54:	push	{r4, r5, r6, r7, r8, lr}
   18a58:	mov	r6, r1
   18a5c:	ldrd	r4, [r0, #32]
   18a60:	ldr	r7, [r0, #16]
   18a64:	mov	r1, r4
   18a68:	mov	r0, r7
   18a6c:	bl	1217c <strnlen@plt>
   18a70:	mov	r3, #0
   18a74:	cmp	r5, r3
   18a78:	add	r0, r0, #4
   18a7c:	bic	r0, r0, #3
   18a80:	add	r2, r0, #4
   18a84:	cmpeq	r4, r2
   18a88:	movcc	r7, #0
   18a8c:	bcc	18aa8 <__assert_fail@plt+0x671c>
   18a90:	ldr	r3, [pc, #24]	; 18ab0 <__assert_fail@plt+0x6724>
   18a94:	add	r0, r7, r0
   18a98:	mov	r1, #4
   18a9c:	ldr	r3, [r3]
   18aa0:	blx	r3
   18aa4:	str	r0, [r6]
   18aa8:	mov	r0, r7
   18aac:	pop	{r4, r5, r6, r7, r8, pc}
   18ab0:	andeq	r9, r6, r0, ror #27
   18ab4:	push	{r4, r5, r6, r7, r8, lr}
   18ab8:	mov	r8, r1
   18abc:	ldrd	r4, [r0, #32]
   18ac0:	ldr	r7, [r0, #16]
   18ac4:	mov	r1, r4
   18ac8:	mov	r0, r7
   18acc:	bl	1217c <strnlen@plt>
   18ad0:	mov	r3, #0
   18ad4:	cmp	r5, r3
   18ad8:	add	r6, r0, #1
   18adc:	cmpeq	r4, r6
   18ae0:	bls	18b18 <__assert_fail@plt+0x678c>
   18ae4:	sub	r4, r4, r6
   18ae8:	cmp	r4, #19
   18aec:	bls	18b18 <__assert_fail@plt+0x678c>
   18af0:	mov	r1, #8
   18af4:	mov	r0, #1
   18af8:	bl	11d50 <calloc@plt>
   18afc:	cmp	r0, #0
   18b00:	beq	18b18 <__assert_fail@plt+0x678c>
   18b04:	add	r6, r7, r6
   18b08:	str	r0, [r8]
   18b0c:	stm	r0, {r4, r6}
   18b10:	mov	r0, r7
   18b14:	pop	{r4, r5, r6, r7, r8, pc}
   18b18:	mov	r7, #0
   18b1c:	mov	r0, r7
   18b20:	pop	{r4, r5, r6, r7, r8, pc}
   18b24:	ldr	r1, [pc, #180]	; 18be0 <__assert_fail@plt+0x6854>
   18b28:	push	{r4, r5, r6, r7, lr}
   18b2c:	sub	sp, sp, #44	; 0x2c
   18b30:	ldr	r4, [r1, #80]	; 0x50
   18b34:	ldr	r5, [sp, #64]	; 0x40
   18b38:	add	ip, r4, #1
   18b3c:	and	ip, ip, #15
   18b40:	str	ip, [r1, #80]	; 0x50
   18b44:	cmp	r5, #0
   18b48:	add	r1, r1, #84	; 0x54
   18b4c:	mov	r6, r2
   18b50:	mov	r7, r3
   18b54:	add	r4, r1, r4, lsl #6
   18b58:	bne	18bb0 <__assert_fail@plt+0x6824>
   18b5c:	cmp	r0, #0
   18b60:	add	r5, sp, #8
   18b64:	beq	18b9c <__assert_fail@plt+0x6810>
   18b68:	mov	r3, r0
   18b6c:	ldr	r2, [pc, #112]	; 18be4 <__assert_fail@plt+0x6858>
   18b70:	mov	r0, r5
   18b74:	ldr	r1, [pc, #108]	; 18be8 <__assert_fail@plt+0x685c>
   18b78:	bl	1223c <sprintf@plt>
   18b7c:	strd	r6, [sp]
   18b80:	mov	r2, r5
   18b84:	mov	r1, #64	; 0x40
   18b88:	mov	r0, r4
   18b8c:	bl	120f8 <snprintf@plt>
   18b90:	mov	r0, r4
   18b94:	add	sp, sp, #44	; 0x2c
   18b98:	pop	{r4, r5, r6, r7, pc}
   18b9c:	mov	r0, r5
   18ba0:	ldr	r2, [pc, #60]	; 18be4 <__assert_fail@plt+0x6858>
   18ba4:	ldr	r1, [pc, #64]	; 18bec <__assert_fail@plt+0x6860>
   18ba8:	bl	1223c <sprintf@plt>
   18bac:	b	18b7c <__assert_fail@plt+0x67f0>
   18bb0:	strd	r6, [sp]
   18bb4:	ldr	r2, [pc, #52]	; 18bf0 <__assert_fail@plt+0x6864>
   18bb8:	mov	r1, #64	; 0x40
   18bbc:	mov	r0, r4
   18bc0:	bl	120f8 <snprintf@plt>
   18bc4:	cmp	r5, #8
   18bc8:	movcs	r5, #8
   18bcc:	sub	r4, r4, r5, lsl #1
   18bd0:	add	r4, r4, #16
   18bd4:	mov	r0, r4
   18bd8:	add	sp, sp, #44	; 0x2c
   18bdc:	pop	{r4, r5, r6, r7, pc}
   18be0:	andeq	r7, r6, r0, lsr r5
   18be4:			; <UNDEFINED> instruction: 0x000515b4
   18be8:	andeq	sl, r4, ip, lsl #14
   18bec:	andeq	sl, r4, r4, lsl r7
   18bf0:	andeq	sl, r4, r0, lsl #14
   18bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bf8:	sub	sp, sp, #28
   18bfc:	ldr	r3, [sp, #68]	; 0x44
   18c00:	ldr	ip, [sp, #64]	; 0x40
   18c04:	mul	r3, r0, r3
   18c08:	umull	r4, r5, r0, ip
   18c0c:	mla	r3, ip, r1, r3
   18c10:	ldr	r1, [sp, #72]	; 0x48
   18c14:	add	r5, r3, r5
   18c18:	cmp	r1, #0
   18c1c:	beq	18d08 <__assert_fail@plt+0x697c>
   18c20:	ldr	r6, [pc, #500]	; 18e1c <__assert_fail@plt+0x6a90>
   18c24:	ldr	r0, [r6, #2608]	; 0xa30
   18c28:	cmp	r0, #0
   18c2c:	beq	18d24 <__assert_fail@plt+0x6998>
   18c30:	mov	r3, #36	; 0x24
   18c34:	mov	lr, #34	; 0x22
   18c38:	cmp	r2, #0
   18c3c:	beq	18c50 <__assert_fail@plt+0x68c4>
   18c40:	ldr	r7, [r2, #56]	; 0x38
   18c44:	ldr	r2, [r2, #60]	; 0x3c
   18c48:	adds	r4, r4, r7
   18c4c:	adc	r5, r5, r2
   18c50:	add	r3, r3, r3, lsl #3
   18c54:	add	r3, r6, r3, lsl #3
   18c58:	ldrd	r2, [r3, #32]
   18c5c:	cmp	r3, r5
   18c60:	cmpeq	r2, r4
   18c64:	bls	18d38 <__assert_fail@plt+0x69ac>
   18c68:	add	lr, lr, lr, lsl #3
   18c6c:	add	r6, r6, lr, lsl #3
   18c70:	ldr	r3, [r6, #16]
   18c74:	cmp	r3, #0
   18c78:	beq	18d88 <__assert_fail@plt+0x69fc>
   18c7c:	ldr	r3, [pc, #412]	; 18e20 <__assert_fail@plt+0x6a94>
   18c80:	add	r0, r0, r4
   18c84:	mov	r1, ip
   18c88:	ldr	r3, [r3]
   18c8c:	blx	r3
   18c90:	ldr	r4, [r6, #24]
   18c94:	ldrd	sl, [r6, #32]
   18c98:	ldr	r7, [r6, #28]
   18c9c:	subs	r8, r0, r4
   18ca0:	sbc	r9, r1, r7
   18ca4:	cmp	fp, r9
   18ca8:	cmpeq	sl, r8
   18cac:	mov	r5, r0
   18cb0:	bls	18db0 <__assert_fail@plt+0x6a24>
   18cb4:	ldr	r2, [r6, #16]
   18cb8:	str	r1, [sp, #20]
   18cbc:	sub	r1, sl, r8
   18cc0:	add	r8, r2, r8
   18cc4:	mov	r0, r8
   18cc8:	bl	1217c <strnlen@plt>
   18ccc:	adds	r4, r4, sl
   18cd0:	adc	r7, r7, fp
   18cd4:	subs	r3, r4, r5
   18cd8:	str	r3, [sp, #8]
   18cdc:	ldr	r3, [sp, #20]
   18ce0:	mov	r1, #0
   18ce4:	sbc	r3, r7, r3
   18ce8:	str	r3, [sp, #12]
   18cec:	ldrd	r2, [sp, #8]
   18cf0:	cmp	r1, r3
   18cf4:	cmpeq	r0, r2
   18cf8:	beq	18e0c <__assert_fail@plt+0x6a80>
   18cfc:	mov	r0, r8
   18d00:	add	sp, sp, #28
   18d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d08:	ldr	r6, [pc, #268]	; 18e1c <__assert_fail@plt+0x6a90>
   18d0c:	ldr	r0, [r6, #2536]	; 0x9e8
   18d10:	cmp	r0, #0
   18d14:	beq	18e00 <__assert_fail@plt+0x6a74>
   18d18:	mov	r3, #35	; 0x23
   18d1c:	mov	lr, #10
   18d20:	b	18c38 <__assert_fail@plt+0x68ac>
   18d24:	ldr	r1, [pc, #248]	; 18e24 <__assert_fail@plt+0x6a98>
   18d28:	mov	r2, #5
   18d2c:	add	sp, sp, #28
   18d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d34:	b	11ea0 <dcgettext@plt>
   18d38:	ldr	r1, [pc, #232]	; 18e28 <__assert_fail@plt+0x6a9c>
   18d3c:	mov	r2, #5
   18d40:	mov	r0, #0
   18d44:	mov	r6, r0
   18d48:	bl	11ea0 <dcgettext@plt>
   18d4c:	mov	r2, r4
   18d50:	mov	r3, r5
   18d54:	str	r6, [sp]
   18d58:	mov	r7, r0
   18d5c:	ldr	r0, [pc, #200]	; 18e2c <__assert_fail@plt+0x6aa0>
   18d60:	bl	18b24 <__assert_fail@plt+0x6798>
   18d64:	mov	r1, r0
   18d68:	mov	r0, r7
   18d6c:	bl	417d0 <warn@@Base>
   18d70:	mov	r0, r6
   18d74:	mov	r2, #5
   18d78:	ldr	r1, [pc, #176]	; 18e30 <__assert_fail@plt+0x6aa4>
   18d7c:	add	sp, sp, #28
   18d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d84:	b	11ea0 <dcgettext@plt>
   18d88:	cmp	r1, #0
   18d8c:	moveq	r0, r1
   18d90:	movne	r0, r3
   18d94:	movne	r2, #5
   18d98:	ldrne	r1, [pc, #148]	; 18e34 <__assert_fail@plt+0x6aa8>
   18d9c:	moveq	r2, #5
   18da0:	ldreq	r1, [pc, #144]	; 18e38 <__assert_fail@plt+0x6aac>
   18da4:	add	sp, sp, #28
   18da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dac:	b	11ea0 <dcgettext@plt>
   18db0:	ldr	r1, [pc, #132]	; 18e3c <__assert_fail@plt+0x6ab0>
   18db4:	mov	r2, #5
   18db8:	mov	r0, #0
   18dbc:	mov	r4, r0
   18dc0:	bl	11ea0 <dcgettext@plt>
   18dc4:	mov	r2, r8
   18dc8:	mov	r3, r9
   18dcc:	str	r4, [sp]
   18dd0:	mov	r5, r0
   18dd4:	ldr	r0, [pc, #80]	; 18e2c <__assert_fail@plt+0x6aa0>
   18dd8:	bl	18b24 <__assert_fail@plt+0x6798>
   18ddc:	mov	r1, r0
   18de0:	mov	r0, r5
   18de4:	bl	417d0 <warn@@Base>
   18de8:	mov	r0, r4
   18dec:	mov	r2, #5
   18df0:	ldr	r1, [pc, #72]	; 18e40 <__assert_fail@plt+0x6ab4>
   18df4:	add	sp, sp, #28
   18df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dfc:	b	11ea0 <dcgettext@plt>
   18e00:	mov	r2, #5
   18e04:	ldr	r1, [pc, #56]	; 18e44 <__assert_fail@plt+0x6ab8>
   18e08:	b	18d2c <__assert_fail@plt+0x69a0>
   18e0c:	mov	r2, #5
   18e10:	ldr	r1, [pc, #48]	; 18e48 <__assert_fail@plt+0x6abc>
   18e14:	mov	r0, #0
   18e18:	b	18d2c <__assert_fail@plt+0x69a0>
   18e1c:	andeq	r6, r6, r0, ror #10
   18e20:	andeq	r9, r6, r0, ror #27
   18e24:	andeq	sl, r4, ip, lsl r7
   18e28:	andeq	sl, r4, r0, ror #14
   18e2c:	andeq	r8, r4, r8, lsr #29
   18e30:	andeq	sl, r4, ip, lsl #15
   18e34:	andeq	sl, r4, r8, lsr #15
   18e38:	andeq	sl, r4, r4, asr #15
   18e3c:	ldrdeq	sl, [r4], -ip
   18e40:	andeq	sl, r4, r0, lsl r8
   18e44:	andeq	sl, r4, r0, asr #14
   18e48:	andeq	sl, r4, r4, lsr r8
   18e4c:	push	{lr}		; (str lr, [sp, #-4]!)
   18e50:	sub	sp, sp, #12
   18e54:	mov	r3, r1
   18e58:	str	r2, [sp]
   18e5c:	mov	r2, r0
   18e60:	mov	r0, #0
   18e64:	bl	18b24 <__assert_fail@plt+0x6798>
   18e68:	mov	r1, r0
   18e6c:	ldr	r0, [pc, #8]	; 18e7c <__assert_fail@plt+0x6af0>
   18e70:	add	sp, sp, #12
   18e74:	pop	{lr}		; (ldr lr, [sp], #4)
   18e78:	b	11dbc <printf@plt>
   18e7c:	andeq	fp, r4, r0, ror sl
   18e80:	push	{r4, r5, r6, r7, r8, lr}
   18e84:	ldr	r7, [pc, #72]	; 18ed4 <__assert_fail@plt+0x6b48>
   18e88:	ldr	r5, [r7, #1108]	; 0x454
   18e8c:	cmp	r5, #0
   18e90:	beq	18ec4 <__assert_fail@plt+0x6b38>
   18e94:	ldr	r0, [r5, #12]
   18e98:	ldr	r6, [r5, #20]
   18e9c:	cmp	r0, #0
   18ea0:	beq	18eb4 <__assert_fail@plt+0x6b28>
   18ea4:	ldr	r4, [r0, #12]
   18ea8:	bl	11e10 <free@plt>
   18eac:	subs	r0, r4, #0
   18eb0:	bne	18ea4 <__assert_fail@plt+0x6b18>
   18eb4:	mov	r0, r5
   18eb8:	bl	11e10 <free@plt>
   18ebc:	subs	r5, r6, #0
   18ec0:	bne	18e94 <__assert_fail@plt+0x6b08>
   18ec4:	mov	r3, #0
   18ec8:	str	r3, [r7, #1108]	; 0x454
   18ecc:	str	r3, [r7, #1112]	; 0x458
   18ed0:	pop	{r4, r5, r6, r7, r8, pc}
   18ed4:	andeq	r7, r6, r0, lsr r5
   18ed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18edc:	mov	r9, r2
   18ee0:	ldr	r3, [r0, #8]
   18ee4:	ldr	r2, [r2]
   18ee8:	sub	sp, sp, #108	; 0x6c
   18eec:	cmp	r2, r3
   18ef0:	strne	r3, [r9]
   18ef4:	ldr	r3, [r1]
   18ef8:	mov	r4, r0
   18efc:	cmp	r3, #0
   18f00:	ldr	r6, [pc, #548]	; 1912c <__assert_fail@plt+0x6da0>
   18f04:	bne	1908c <__assert_fail@plt+0x6d00>
   18f08:	ldr	r2, [r6]
   18f0c:	ldrd	r0, [r4, #32]
   18f10:	bl	18e4c <__assert_fail@plt+0x6ac0>
   18f14:	ldrb	r3, [r4, #69]	; 0x45
   18f18:	cmp	r3, #0
   18f1c:	beq	19064 <__assert_fail@plt+0x6cd8>
   18f20:	ldr	r3, [pc, #520]	; 19130 <__assert_fail@plt+0x6da4>
   18f24:	add	r5, sp, #4
   18f28:	str	r3, [sp, #4]
   18f2c:	mov	r1, r5
   18f30:	ldr	r0, [pc, #508]	; 19134 <__assert_fail@plt+0x6da8>
   18f34:	bl	11dbc <printf@plt>
   18f38:	ldr	r0, [r4, #8]
   18f3c:	cmp	r0, #0
   18f40:	beq	18fe8 <__assert_fail@plt+0x6c5c>
   18f44:	ldr	r6, [pc, #492]	; 19138 <__assert_fail@plt+0x6dac>
   18f48:	ldr	fp, [pc, #480]	; 19130 <__assert_fail@plt+0x6da4>
   18f4c:	ldr	sl, [pc, #488]	; 1913c <__assert_fail@plt+0x6db0>
   18f50:	ldr	r9, [pc, #488]	; 19140 <__assert_fail@plt+0x6db4>
   18f54:	ldr	r8, [pc, #488]	; 19144 <__assert_fail@plt+0x6db8>
   18f58:	mov	r7, #0
   18f5c:	b	18f98 <__assert_fail@plt+0x6c0c>
   18f60:	cmp	r2, #8
   18f64:	beq	1902c <__assert_fail@plt+0x6ca0>
   18f68:	cmp	r2, #9
   18f6c:	beq	1900c <__assert_fail@plt+0x6c80>
   18f70:	cmp	r2, #7
   18f74:	beq	19000 <__assert_fail@plt+0x6c74>
   18f78:	str	sl, [r5]
   18f7c:	mov	r1, r5
   18f80:	mov	r0, r6
   18f84:	bl	11dbc <printf@plt>
   18f88:	ldr	r0, [r4, #8]
   18f8c:	add	r7, r7, #1
   18f90:	cmp	r0, r7
   18f94:	bls	18fe8 <__assert_fail@plt+0x6c5c>
   18f98:	ldr	r1, [r4, #12]
   18f9c:	lsl	r2, r7, #1
   18fa0:	ldrsh	r2, [r1, r2]
   18fa4:	cmn	r2, #1
   18fa8:	beq	18f8c <__assert_fail@plt+0x6c00>
   18fac:	cmp	r2, #16
   18fb0:	beq	18ff8 <__assert_fail@plt+0x6c6c>
   18fb4:	ble	18f60 <__assert_fail@plt+0x6bd4>
   18fb8:	cmp	r2, #22
   18fbc:	beq	19050 <__assert_fail@plt+0x6cc4>
   18fc0:	cmp	r2, #128	; 0x80
   18fc4:	beq	19038 <__assert_fail@plt+0x6cac>
   18fc8:	cmp	r2, #20
   18fcc:	bne	18f78 <__assert_fail@plt+0x6bec>
   18fd0:	ldr	r2, [r4, #16]
   18fd4:	mov	r1, r8
   18fd8:	mov	r0, r5
   18fdc:	ldr	r2, [r2, r7, lsl #2]
   18fe0:	bl	1223c <sprintf@plt>
   18fe4:	b	18f7c <__assert_fail@plt+0x6bf0>
   18fe8:	mov	r0, #10
   18fec:	bl	1211c <putchar@plt>
   18ff0:	add	sp, sp, #108	; 0x6c
   18ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ff8:	str	fp, [r5]
   18ffc:	b	18f7c <__assert_fail@plt+0x6bf0>
   19000:	mov	r2, #117	; 0x75
   19004:	strh	r2, [r5]
   19008:	b	18f7c <__assert_fail@plt+0x6bf0>
   1900c:	ldr	r2, [r4, #16]
   19010:	mov	r1, #0
   19014:	ldr	r0, [r2, r7, lsl #2]
   19018:	bl	1888c <__assert_fail@plt+0x6500>
   1901c:	mov	r1, r0
   19020:	mov	r0, r5
   19024:	bl	11f6c <strcpy@plt>
   19028:	b	18f7c <__assert_fail@plt+0x6bf0>
   1902c:	mov	r2, #115	; 0x73
   19030:	strh	r2, [r5]
   19034:	b	18f7c <__assert_fail@plt+0x6bf0>
   19038:	ldr	r2, [r4, #16]
   1903c:	mov	r1, r9
   19040:	mov	r0, r5
   19044:	ldr	r2, [r2, r7, lsl #2]
   19048:	bl	1223c <sprintf@plt>
   1904c:	b	18f7c <__assert_fail@plt+0x6bf0>
   19050:	ldr	r3, [pc, #240]	; 19148 <__assert_fail@plt+0x6dbc>
   19054:	ldm	r3, {r0, r1}
   19058:	str	r0, [r5]
   1905c:	strb	r1, [sp, #8]
   19060:	b	18f7c <__assert_fail@plt+0x6bf0>
   19064:	mov	r1, #1
   19068:	ldr	r0, [r4, #48]	; 0x30
   1906c:	bl	1888c <__assert_fail@plt+0x6500>
   19070:	add	r5, sp, #4
   19074:	ldr	r3, [r4, #56]	; 0x38
   19078:	ldr	r1, [pc, #204]	; 1914c <__assert_fail@plt+0x6dc0>
   1907c:	mov	r2, r0
   19080:	mov	r0, r5
   19084:	bl	1223c <sprintf@plt>
   19088:	b	18f2c <__assert_fail@plt+0x6ba0>
   1908c:	mov	r5, #0
   19090:	str	r5, [r1]
   19094:	ldr	r1, [r6]
   19098:	ldr	r2, [pc, #176]	; 19150 <__assert_fail@plt+0x6dc4>
   1909c:	ldr	r0, [pc, #176]	; 19154 <__assert_fail@plt+0x6dc8>
   190a0:	lsl	r1, r1, #1
   190a4:	bl	11dbc <printf@plt>
   190a8:	ldr	ip, [r9]
   190ac:	cmp	ip, r5
   190b0:	beq	19120 <__assert_fail@plt+0x6d94>
   190b4:	ldr	r7, [pc, #124]	; 19138 <__assert_fail@plt+0x6dac>
   190b8:	ldr	r8, [pc, #152]	; 19158 <__assert_fail@plt+0x6dcc>
   190bc:	b	190e0 <__assert_fail@plt+0x6d54>
   190c0:	bl	1888c <__assert_fail@plt+0x6500>
   190c4:	mov	r1, r0
   190c8:	mov	r0, r7
   190cc:	bl	11dbc <printf@plt>
   190d0:	ldr	ip, [r9]
   190d4:	add	r5, r5, #1
   190d8:	cmp	ip, r5
   190dc:	bls	19120 <__assert_fail@plt+0x6d94>
   190e0:	ldr	r2, [r4, #12]
   190e4:	lsl	r3, r5, #1
   190e8:	mov	r0, r5
   190ec:	ldrsh	r3, [r2, r3]
   190f0:	mov	r1, #1
   190f4:	cmn	r3, #1
   190f8:	beq	190d4 <__assert_fail@plt+0x6d48>
   190fc:	ldr	r3, [r4, #64]	; 0x40
   19100:	cmp	r3, r5
   19104:	bne	190c0 <__assert_fail@plt+0x6d34>
   19108:	mov	r0, r8
   1910c:	bl	11dbc <printf@plt>
   19110:	ldr	ip, [r9]
   19114:	add	r5, r5, #1
   19118:	cmp	ip, r5
   1911c:	bhi	190e0 <__assert_fail@plt+0x6d54>
   19120:	mov	r0, #10
   19124:	bl	1211c <putchar@plt>
   19128:	b	18f08 <__assert_fail@plt+0x6b7c>
   1912c:	andeq	r9, r6, ip, lsr #27
   19130:	rsbseq	r7, r0, r5, ror #16
   19134:	andeq	sl, r4, r4, lsl #17
   19138:	andeq	sl, r4, r4, ror r8
   1913c:	rsbeq	r2, r1, lr, ror #30
   19140:	andeq	sl, r4, ip, lsl #17
   19144:	muleq	r4, r4, r8
   19148:	muleq	r4, ip, r8
   1914c:	andeq	sl, r4, ip, ror r8
   19150:	andeq	sl, r4, r4, asr r8
   19154:	andeq	sl, r4, ip, asr r8
   19158:	andeq	sl, r4, ip, ror #16
   1915c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19160:	mov	r4, r1
   19164:	mov	r7, r0
   19168:	ldr	r1, [sp, #32]
   1916c:	mov	r0, r4
   19170:	mov	r8, r3
   19174:	blx	r2
   19178:	subs	r5, r0, #0
   1917c:	beq	194bc <__assert_fail@plt+0x7130>
   19180:	mov	r0, r7
   19184:	bl	11e64 <lrealpath@plt>
   19188:	mov	r6, r0
   1918c:	bl	12074 <strlen@plt>
   19190:	subs	r4, r0, #0
   19194:	beq	19510 <__assert_fail@plt+0x7184>
   19198:	add	r3, r6, r4
   1919c:	ldrb	r2, [r3, #-1]
   191a0:	cmp	r2, #47	; 0x2f
   191a4:	subne	r3, r4, #2
   191a8:	addne	r3, r6, r3
   191ac:	subne	r0, r6, #1
   191b0:	rsbne	r1, r6, #1
   191b4:	bne	191c8 <__assert_fail@plt+0x6e3c>
   191b8:	b	191dc <__assert_fail@plt+0x6e50>
   191bc:	ldrb	r2, [r3], #-1
   191c0:	cmp	r2, #47	; 0x2f
   191c4:	beq	194b4 <__assert_fail@plt+0x7128>
   191c8:	cmp	r3, r0
   191cc:	add	r4, r1, r3
   191d0:	bne	191bc <__assert_fail@plt+0x6e30>
   191d4:	mov	r3, r6
   191d8:	mov	r4, #0
   191dc:	mov	r2, #0
   191e0:	strb	r2, [r3]
   191e4:	mov	r0, r5
   191e8:	bl	12074 <strlen@plt>
   191ec:	mov	r9, r0
   191f0:	add	r0, r0, r4
   191f4:	add	r0, r0, #51	; 0x33
   191f8:	bl	11ffc <malloc@plt>
   191fc:	subs	r4, r0, #0
   19200:	beq	194dc <__assert_fail@plt+0x7150>
   19204:	add	r2, r9, #1
   19208:	mov	r1, r5
   1920c:	bl	11e40 <memcpy@plt>
   19210:	ldr	r1, [sp, #32]
   19214:	mov	r0, r4
   19218:	blx	r8
   1921c:	cmp	r0, #0
   19220:	beq	19274 <__assert_fail@plt+0x6ee8>
   19224:	mov	r0, r6
   19228:	bl	11e10 <free@plt>
   1922c:	mov	r0, r4
   19230:	bl	18770 <__assert_fail@plt+0x63e4>
   19234:	ldr	r6, [pc, #732]	; 19518 <__assert_fail@plt+0x718c>
   19238:	mov	r2, #5
   1923c:	cmp	r0, #0
   19240:	mov	r5, r0
   19244:	str	r0, [r6, #1116]	; 0x45c
   19248:	beq	194f4 <__assert_fail@plt+0x7168>
   1924c:	ldr	r1, [pc, #712]	; 1951c <__assert_fail@plt+0x7190>
   19250:	mov	r0, #0
   19254:	bl	11ea0 <dcgettext@plt>
   19258:	mov	r2, r4
   1925c:	mov	r1, r7
   19260:	bl	11dbc <printf@plt>
   19264:	ldr	r5, [r6, #1116]	; 0x45c
   19268:	str	r4, [r6, #1120]	; 0x460
   1926c:	mov	r0, r5
   19270:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19274:	mov	r2, r5
   19278:	ldr	r1, [pc, #672]	; 19520 <__assert_fail@plt+0x7194>
   1927c:	mov	r0, r4
   19280:	bl	1223c <sprintf@plt>
   19284:	ldr	r1, [sp, #32]
   19288:	mov	r0, r4
   1928c:	blx	r8
   19290:	cmp	r0, #0
   19294:	bne	19224 <__assert_fail@plt+0x6e98>
   19298:	mov	r3, r5
   1929c:	mov	r2, r6
   192a0:	ldr	r1, [pc, #636]	; 19524 <__assert_fail@plt+0x7198>
   192a4:	mov	r0, r4
   192a8:	bl	1223c <sprintf@plt>
   192ac:	ldr	r1, [sp, #32]
   192b0:	mov	r0, r4
   192b4:	blx	r8
   192b8:	cmp	r0, #0
   192bc:	bne	19224 <__assert_fail@plt+0x6e98>
   192c0:	mov	r3, r5
   192c4:	mov	r2, r6
   192c8:	ldr	r1, [pc, #600]	; 19528 <__assert_fail@plt+0x719c>
   192cc:	mov	r0, r4
   192d0:	bl	1223c <sprintf@plt>
   192d4:	ldr	r1, [sp, #32]
   192d8:	mov	r0, r4
   192dc:	blx	r8
   192e0:	cmp	r0, #0
   192e4:	bne	19224 <__assert_fail@plt+0x6e98>
   192e8:	mov	r3, r5
   192ec:	ldr	r2, [pc, #568]	; 1952c <__assert_fail@plt+0x71a0>
   192f0:	ldr	r1, [pc, #568]	; 19530 <__assert_fail@plt+0x71a4>
   192f4:	mov	r0, r4
   192f8:	bl	1223c <sprintf@plt>
   192fc:	ldr	r1, [sp, #32]
   19300:	mov	r0, r4
   19304:	blx	r8
   19308:	cmp	r0, #0
   1930c:	bne	19224 <__assert_fail@plt+0x6e98>
   19310:	mov	r3, r5
   19314:	ldr	r2, [pc, #536]	; 19534 <__assert_fail@plt+0x71a8>
   19318:	ldr	r1, [pc, #528]	; 19530 <__assert_fail@plt+0x71a4>
   1931c:	mov	r0, r4
   19320:	bl	1223c <sprintf@plt>
   19324:	ldr	r1, [sp, #32]
   19328:	mov	r0, r4
   1932c:	blx	r8
   19330:	cmp	r0, #0
   19334:	bne	19224 <__assert_fail@plt+0x6e98>
   19338:	ldr	r2, [pc, #504]	; 19538 <__assert_fail@plt+0x71ac>
   1933c:	mov	r3, r4
   19340:	mov	ip, #47	; 0x2f
   19344:	ldm	r2, {r0, r1, r2}
   19348:	stmia	r3!, {r0, r1}
   1934c:	mov	r1, r5
   19350:	strh	r2, [r3]
   19354:	add	r0, r4, #11
   19358:	strb	ip, [r4, #10]
   1935c:	bl	11f6c <strcpy@plt>
   19360:	ldr	r1, [sp, #32]
   19364:	mov	r0, r4
   19368:	blx	r8
   1936c:	subs	r8, r0, #0
   19370:	bne	19224 <__assert_fail@plt+0x6e98>
   19374:	mov	r2, #5
   19378:	ldr	r1, [pc, #444]	; 1953c <__assert_fail@plt+0x71b0>
   1937c:	bl	11ea0 <dcgettext@plt>
   19380:	mov	r1, r5
   19384:	bl	417d0 <warn@@Base>
   19388:	mov	r2, #5
   1938c:	ldr	r1, [pc, #428]	; 19540 <__assert_fail@plt+0x71b4>
   19390:	mov	r0, r8
   19394:	bl	11ea0 <dcgettext@plt>
   19398:	mov	r1, r4
   1939c:	bl	417d0 <warn@@Base>
   193a0:	mov	r3, r5
   193a4:	ldr	r2, [pc, #392]	; 19534 <__assert_fail@plt+0x71a8>
   193a8:	ldr	r1, [pc, #384]	; 19530 <__assert_fail@plt+0x71a4>
   193ac:	mov	r0, r4
   193b0:	bl	1223c <sprintf@plt>
   193b4:	mov	r2, #5
   193b8:	ldr	r1, [pc, #384]	; 19540 <__assert_fail@plt+0x71b4>
   193bc:	mov	r0, r8
   193c0:	bl	11ea0 <dcgettext@plt>
   193c4:	mov	r1, r4
   193c8:	bl	417d0 <warn@@Base>
   193cc:	mov	r3, r5
   193d0:	ldr	r2, [pc, #340]	; 1952c <__assert_fail@plt+0x71a0>
   193d4:	ldr	r1, [pc, #340]	; 19530 <__assert_fail@plt+0x71a4>
   193d8:	mov	r0, r4
   193dc:	bl	1223c <sprintf@plt>
   193e0:	mov	r2, #5
   193e4:	ldr	r1, [pc, #340]	; 19540 <__assert_fail@plt+0x71b4>
   193e8:	mov	r0, r8
   193ec:	bl	11ea0 <dcgettext@plt>
   193f0:	mov	r1, r4
   193f4:	bl	417d0 <warn@@Base>
   193f8:	mov	r3, r5
   193fc:	mov	r2, r6
   19400:	ldr	r1, [pc, #288]	; 19528 <__assert_fail@plt+0x719c>
   19404:	mov	r0, r4
   19408:	bl	1223c <sprintf@plt>
   1940c:	mov	r2, #5
   19410:	ldr	r1, [pc, #296]	; 19540 <__assert_fail@plt+0x71b4>
   19414:	mov	r0, r8
   19418:	bl	11ea0 <dcgettext@plt>
   1941c:	mov	r1, r4
   19420:	bl	417d0 <warn@@Base>
   19424:	mov	r3, r5
   19428:	mov	r2, r6
   1942c:	ldr	r1, [pc, #240]	; 19524 <__assert_fail@plt+0x7198>
   19430:	mov	r0, r4
   19434:	bl	1223c <sprintf@plt>
   19438:	mov	r2, #5
   1943c:	ldr	r1, [pc, #252]	; 19540 <__assert_fail@plt+0x71b4>
   19440:	mov	r0, r8
   19444:	bl	11ea0 <dcgettext@plt>
   19448:	mov	r1, r4
   1944c:	bl	417d0 <warn@@Base>
   19450:	mov	r2, r5
   19454:	ldr	r1, [pc, #196]	; 19520 <__assert_fail@plt+0x7194>
   19458:	mov	r0, r4
   1945c:	bl	1223c <sprintf@plt>
   19460:	mov	r2, #5
   19464:	ldr	r1, [pc, #212]	; 19540 <__assert_fail@plt+0x71b4>
   19468:	mov	r0, r8
   1946c:	bl	11ea0 <dcgettext@plt>
   19470:	mov	r1, r4
   19474:	bl	417d0 <warn@@Base>
   19478:	mov	r1, r5
   1947c:	mov	r0, r4
   19480:	bl	11f6c <strcpy@plt>
   19484:	mov	r2, #5
   19488:	ldr	r1, [pc, #176]	; 19540 <__assert_fail@plt+0x71b4>
   1948c:	mov	r0, r8
   19490:	bl	11ea0 <dcgettext@plt>
   19494:	mov	r1, r4
   19498:	bl	417d0 <warn@@Base>
   1949c:	mov	r0, r6
   194a0:	bl	11e10 <free@plt>
   194a4:	mov	r0, r4
   194a8:	mov	r5, r8
   194ac:	bl	11e10 <free@plt>
   194b0:	b	1926c <__assert_fail@plt+0x6ee0>
   194b4:	add	r3, r6, r4
   194b8:	b	191dc <__assert_fail@plt+0x6e50>
   194bc:	mov	r2, #5
   194c0:	ldr	r1, [pc, #124]	; 19544 <__assert_fail@plt+0x71b8>
   194c4:	bl	11ea0 <dcgettext@plt>
   194c8:	ldr	r1, [r4, #8]
   194cc:	cmp	r1, #0
   194d0:	ldreq	r1, [r4]
   194d4:	bl	417d0 <warn@@Base>
   194d8:	b	1926c <__assert_fail@plt+0x6ee0>
   194dc:	mov	r2, #5
   194e0:	ldr	r1, [pc, #96]	; 19548 <__assert_fail@plt+0x71bc>
   194e4:	bl	11ea0 <dcgettext@plt>
   194e8:	mov	r5, r4
   194ec:	bl	417d0 <warn@@Base>
   194f0:	b	1926c <__assert_fail@plt+0x6ee0>
   194f4:	ldr	r1, [pc, #80]	; 1954c <__assert_fail@plt+0x71c0>
   194f8:	bl	11ea0 <dcgettext@plt>
   194fc:	mov	r1, r4
   19500:	bl	417d0 <warn@@Base>
   19504:	mov	r0, r4
   19508:	bl	11e10 <free@plt>
   1950c:	b	1926c <__assert_fail@plt+0x6ee0>
   19510:	mov	r3, r6
   19514:	b	191dc <__assert_fail@plt+0x6e50>
   19518:	andeq	r7, r6, r0, lsr r5
   1951c:	andeq	sl, r4, r8, ror r9
   19520:	ldrdeq	sl, [r4], -r4
   19524:	andeq	sp, r4, r0, asr #31
   19528:	andeq	sl, r4, r0, ror #17
   1952c:	andeq	sl, r4, ip, ror #17
   19530:	strdeq	sl, [r4], -ip
   19534:	andeq	sl, r4, r4, lsl #18
   19538:	strdeq	sl, [r4], -r0
   1953c:	andeq	sl, r4, r8, lsl r9
   19540:	andeq	sl, r4, r4, asr #18
   19544:	andeq	sl, r4, r4, lsr #17
   19548:	andeq	sl, r4, r4, asr #17
   1954c:	andeq	sl, r4, r0, asr r9
   19550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19554:	add	r6, r1, #4
   19558:	cmp	r6, r2
   1955c:	sub	sp, sp, #20
   19560:	mov	sl, r1
   19564:	mov	r4, r2
   19568:	mov	fp, r0
   1956c:	mov	r5, r3
   19570:	bcc	195fc <__assert_fail@plt+0x7270>
   19574:	cmp	r1, r2
   19578:	bcc	19664 <__assert_fail@plt+0x72d8>
   1957c:	mov	r2, #0
   19580:	mov	r3, #0
   19584:	mov	r8, #4
   19588:	mov	r9, #0
   1958c:	strd	r2, [r5]
   19590:	mov	r3, #4
   19594:	str	r3, [sp, #12]
   19598:	str	r3, [r5, #36]	; 0x24
   1959c:	ldrd	r2, [fp, #32]
   195a0:	cmp	r3, r9
   195a4:	cmpeq	r2, r8
   195a8:	bcc	19970 <__assert_fail@plt+0x75e4>
   195ac:	add	r8, r6, #2
   195b0:	cmp	r8, r4
   195b4:	bcc	19678 <__assert_fail@plt+0x72ec>
   195b8:	cmp	r6, r4
   195bc:	bcs	195d0 <__assert_fail@plt+0x7244>
   195c0:	sub	r1, r4, r6
   195c4:	sub	r3, r1, #1
   195c8:	cmp	r3, #7
   195cc:	bls	1967c <__assert_fail@plt+0x72f0>
   195d0:	mov	r3, #0
   195d4:	strh	r3, [r5, #8]
   195d8:	mov	r2, #5
   195dc:	ldr	r1, [pc, #1308]	; 19b00 <__assert_fail@plt+0x7774>
   195e0:	mov	r0, #0
   195e4:	bl	11ea0 <dcgettext@plt>
   195e8:	bl	417d0 <warn@@Base>
   195ec:	mov	r6, #0
   195f0:	mov	r0, r6
   195f4:	add	sp, sp, #20
   195f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195fc:	mov	r1, #4
   19600:	ldr	r7, [pc, #1276]	; 19b04 <__assert_fail@plt+0x7778>
   19604:	mov	r0, sl
   19608:	ldr	r3, [r7]
   1960c:	blx	r3
   19610:	mov	r3, #0
   19614:	mvn	r2, #0
   19618:	cmp	r1, r3
   1961c:	cmpeq	r0, r2
   19620:	strd	r0, [r5]
   19624:	bne	19ac4 <__assert_fail@plt+0x7738>
   19628:	add	r3, sl, #12
   1962c:	cmp	r3, r4
   19630:	bcc	19a88 <__assert_fail@plt+0x76fc>
   19634:	cmp	r6, r4
   19638:	bcs	1964c <__assert_fail@plt+0x72c0>
   1963c:	sub	r1, r4, r6
   19640:	sub	r2, r1, #1
   19644:	cmp	r2, #7
   19648:	bls	19a8c <__assert_fail@plt+0x7700>
   1964c:	mov	r0, #0
   19650:	mov	r1, #0
   19654:	mov	r8, #12
   19658:	strd	r0, [r5]
   1965c:	mov	r9, #0
   19660:	b	19aac <__assert_fail@plt+0x7720>
   19664:	sub	r1, r2, r1
   19668:	sub	r3, r1, #1
   1966c:	cmp	r3, #7
   19670:	bhi	1957c <__assert_fail@plt+0x71f0>
   19674:	b	19600 <__assert_fail@plt+0x7274>
   19678:	mov	r1, #2
   1967c:	ldr	r7, [pc, #1152]	; 19b04 <__assert_fail@plt+0x7778>
   19680:	mov	r0, r6
   19684:	ldr	r3, [r7]
   19688:	blx	r3
   1968c:	uxth	r0, r0
   19690:	sub	r3, r0, #2
   19694:	cmp	r3, #3
   19698:	strh	r0, [r5, #8]
   1969c:	bhi	195d8 <__assert_fail@plt+0x724c>
   196a0:	cmp	r0, #5
   196a4:	bne	196d8 <__assert_fail@plt+0x734c>
   196a8:	add	r9, r6, #3
   196ac:	cmp	r9, r4
   196b0:	bcc	19a34 <__assert_fail@plt+0x76a8>
   196b4:	cmp	r8, r4
   196b8:	bcs	196cc <__assert_fail@plt+0x7340>
   196bc:	sub	r1, r4, r8
   196c0:	sub	r3, r1, #1
   196c4:	cmp	r3, #7
   196c8:	bls	19794 <__assert_fail@plt+0x7408>
   196cc:	add	r8, r6, #4
   196d0:	cmp	r4, r8
   196d4:	bhi	197ac <__assert_fail@plt+0x7420>
   196d8:	ldr	r6, [r5, #36]	; 0x24
   196dc:	cmp	r6, #8
   196e0:	bhi	199ac <__assert_fail@plt+0x7620>
   196e4:	add	r3, r8, r6
   196e8:	cmp	r4, r3
   196ec:	bhi	196fc <__assert_fail@plt+0x7370>
   196f0:	cmp	r8, r4
   196f4:	bcs	198f0 <__assert_fail@plt+0x7564>
   196f8:	sub	r6, r4, r8
   196fc:	sub	r3, r6, #1
   19700:	cmp	r3, #7
   19704:	movls	r1, r6
   19708:	bhi	198f0 <__assert_fail@plt+0x7564>
   1970c:	ldr	r3, [r7]
   19710:	mov	r0, r8
   19714:	blx	r3
   19718:	strd	r0, [r5, #16]
   1971c:	ldr	r6, [r5, #36]	; 0x24
   19720:	add	r6, r8, r6
   19724:	add	r8, r6, #1
   19728:	cmp	r8, r4
   1972c:	bcc	198d8 <__assert_fail@plt+0x754c>
   19730:	cmp	r4, r6
   19734:	bls	19748 <__assert_fail@plt+0x73bc>
   19738:	sub	r1, r4, r6
   1973c:	sub	r3, r1, #1
   19740:	cmp	r3, #7
   19744:	bls	198dc <__assert_fail@plt+0x7550>
   19748:	mov	r3, #0
   1974c:	strb	r3, [r5, #24]
   19750:	ldrh	r3, [r5, #8]
   19754:	cmp	r3, #3
   19758:	bls	197ec <__assert_fail@plt+0x7460>
   1975c:	add	r6, r6, #2
   19760:	cmp	r6, r4
   19764:	bcc	19a64 <__assert_fail@plt+0x76d8>
   19768:	cmp	r8, r4
   1976c:	bcc	19ad0 <__assert_fail@plt+0x7744>
   19770:	mov	r3, #0
   19774:	strb	r3, [r5, #25]
   19778:	mov	r2, #5
   1977c:	ldr	r1, [pc, #900]	; 19b08 <__assert_fail@plt+0x777c>
   19780:	mov	r0, #0
   19784:	bl	11ea0 <dcgettext@plt>
   19788:	bl	417d0 <warn@@Base>
   1978c:	mov	r6, #0
   19790:	b	195f0 <__assert_fail@plt+0x7264>
   19794:	mov	r0, r8
   19798:	ldr	r3, [r7]
   1979c:	add	r8, r6, #4
   197a0:	blx	r3
   197a4:	cmp	r4, r8
   197a8:	bls	196d8 <__assert_fail@plt+0x734c>
   197ac:	mov	r1, #1
   197b0:	mov	r0, r9
   197b4:	ldr	r3, [r7]
   197b8:	blx	r3
   197bc:	uxtb	r6, r0
   197c0:	cmp	r6, #0
   197c4:	beq	196d8 <__assert_fail@plt+0x734c>
   197c8:	mov	r2, #5
   197cc:	ldr	r1, [pc, #824]	; 19b0c <__assert_fail@plt+0x7780>
   197d0:	mov	r0, #0
   197d4:	bl	11ea0 <dcgettext@plt>
   197d8:	mov	r2, r6
   197dc:	ldr	r1, [fp, #8]
   197e0:	bl	417d0 <warn@@Base>
   197e4:	mov	r6, #0
   197e8:	b	195f0 <__assert_fail@plt+0x7264>
   197ec:	mov	r6, r8
   197f0:	mov	r3, #1
   197f4:	strb	r3, [r5, #25]
   197f8:	add	r8, r6, #1
   197fc:	cmp	r8, r4
   19800:	bcc	19918 <__assert_fail@plt+0x758c>
   19804:	cmp	r6, r4
   19808:	bcs	1981c <__assert_fail@plt+0x7490>
   1980c:	sub	r1, r4, r6
   19810:	sub	r3, r1, #1
   19814:	cmp	r3, #7
   19818:	bls	199e8 <__assert_fail@plt+0x765c>
   1981c:	add	r9, r6, #2
   19820:	mov	r3, #0
   19824:	cmp	r4, r9
   19828:	strb	r3, [r5, #26]
   1982c:	add	fp, r6, #3
   19830:	bhi	19a08 <__assert_fail@plt+0x767c>
   19834:	mov	r3, #0
   19838:	cmp	fp, r4
   1983c:	str	r3, [r5, #28]
   19840:	bcc	19958 <__assert_fail@plt+0x75cc>
   19844:	mov	r3, #0
   19848:	strb	r3, [r5, #32]
   1984c:	add	r6, r6, #4
   19850:	cmp	r6, r4
   19854:	bcc	19900 <__assert_fail@plt+0x7574>
   19858:	cmp	r4, fp
   1985c:	bls	19870 <__assert_fail@plt+0x74e4>
   19860:	sub	r1, r4, fp
   19864:	sub	r3, r1, #1
   19868:	cmp	r3, #7
   1986c:	bls	19904 <__assert_fail@plt+0x7578>
   19870:	mov	r3, #0
   19874:	strb	r3, [r5, #33]	; 0x21
   19878:	ldr	r3, [r5]
   1987c:	ldr	r2, [sp, #12]
   19880:	add	r3, r2, r3
   19884:	add	sl, sl, r3
   19888:	ldr	r3, [sp, #56]	; 0x38
   1988c:	cmp	sl, r4
   19890:	str	sl, [r3]
   19894:	bls	195f0 <__assert_fail@plt+0x7264>
   19898:	ldr	r1, [pc, #624]	; 19b10 <__assert_fail@plt+0x7784>
   1989c:	mov	r2, #5
   198a0:	mov	r0, #0
   198a4:	mov	r6, r0
   198a8:	bl	11ea0 <dcgettext@plt>
   198ac:	str	r6, [sp]
   198b0:	ldrd	r2, [r5]
   198b4:	mov	r7, r0
   198b8:	ldr	r0, [pc, #596]	; 19b14 <__assert_fail@plt+0x7788>
   198bc:	bl	18b24 <__assert_fail@plt+0x6798>
   198c0:	mov	r1, r0
   198c4:	mov	r0, r7
   198c8:	bl	417d0 <warn@@Base>
   198cc:	ldr	r3, [sp, #56]	; 0x38
   198d0:	str	r4, [r3]
   198d4:	b	195f0 <__assert_fail@plt+0x7264>
   198d8:	mov	r1, #1
   198dc:	ldr	r3, [r7]
   198e0:	mov	r0, r6
   198e4:	blx	r3
   198e8:	strb	r0, [r5, #24]
   198ec:	b	19750 <__assert_fail@plt+0x73c4>
   198f0:	mov	r2, #0
   198f4:	mov	r3, #0
   198f8:	strd	r2, [r5, #16]
   198fc:	b	1971c <__assert_fail@plt+0x7390>
   19900:	mov	r1, #1
   19904:	ldr	r3, [r7]
   19908:	mov	r0, fp
   1990c:	blx	r3
   19910:	strb	r0, [r5, #33]	; 0x21
   19914:	b	19878 <__assert_fail@plt+0x74ec>
   19918:	ldr	r3, [r7]
   1991c:	mov	r1, #1
   19920:	mov	r0, r6
   19924:	blx	r3
   19928:	add	r9, r6, #2
   1992c:	cmp	r4, r9
   19930:	add	fp, r6, #3
   19934:	strb	r0, [r5, #26]
   19938:	bhi	19a08 <__assert_fail@plt+0x767c>
   1993c:	subs	r1, r4, r8
   19940:	beq	19834 <__assert_fail@plt+0x74a8>
   19944:	mov	r0, r8
   19948:	bl	41ab8 <warn@@Base+0x2e8>
   1994c:	cmp	r4, fp
   19950:	str	r0, [r5, #28]
   19954:	bls	19844 <__assert_fail@plt+0x74b8>
   19958:	mov	r1, #1
   1995c:	mov	r0, r9
   19960:	ldr	r3, [r7]
   19964:	blx	r3
   19968:	strb	r0, [r5, #32]
   1996c:	b	1984c <__assert_fail@plt+0x74c0>
   19970:	ldr	r3, [fp, #16]
   19974:	ldr	r2, [r5, #36]	; 0x24
   19978:	sub	r3, r6, r3
   1997c:	mov	r7, #0
   19980:	sub	r2, r3, r2
   19984:	mov	r0, fp
   19988:	mov	r3, r7
   1998c:	bl	182d4 <__assert_fail@plt+0x5f48>
   19990:	subs	r8, r0, #0
   19994:	beq	19ae4 <__assert_fail@plt+0x7758>
   19998:	ldr	r2, [sp, #12]
   1999c:	sub	r3, r4, sl
   199a0:	sub	r3, r3, r2
   199a4:	stm	r5, {r3, r7}
   199a8:	b	195ac <__assert_fail@plt+0x7220>
   199ac:	mov	r3, #5
   199b0:	str	r3, [sp]
   199b4:	ldr	r2, [pc, #348]	; 19b18 <__assert_fail@plt+0x778c>
   199b8:	mov	r3, r6
   199bc:	ldr	r1, [pc, #344]	; 19b1c <__assert_fail@plt+0x7790>
   199c0:	mov	r0, #0
   199c4:	bl	12368 <dcngettext@plt>
   199c8:	mov	r1, r6
   199cc:	mov	r2, #8
   199d0:	bl	412ac <error@@Base>
   199d4:	add	r3, r8, #8
   199d8:	cmp	r4, r3
   199dc:	bls	196f0 <__assert_fail@plt+0x7364>
   199e0:	mov	r1, #8
   199e4:	b	1970c <__assert_fail@plt+0x7380>
   199e8:	ldr	r3, [r7]
   199ec:	mov	r0, r6
   199f0:	blx	r3
   199f4:	add	r9, r6, #2
   199f8:	cmp	r4, r9
   199fc:	add	fp, r6, #3
   19a00:	strb	r0, [r5, #26]
   19a04:	bls	19834 <__assert_fail@plt+0x74a8>
   19a08:	mov	r0, r8
   19a0c:	mov	r1, #1
   19a10:	bl	41ab8 <warn@@Base+0x2e8>
   19a14:	cmp	r4, fp
   19a18:	str	r0, [r5, #28]
   19a1c:	bhi	19958 <__assert_fail@plt+0x75cc>
   19a20:	sub	r1, r4, r9
   19a24:	sub	r3, r1, #1
   19a28:	cmp	r3, #7
   19a2c:	bhi	19844 <__assert_fail@plt+0x74b8>
   19a30:	b	1995c <__assert_fail@plt+0x75d0>
   19a34:	mov	r0, r8
   19a38:	ldr	r3, [r7]
   19a3c:	add	r8, r6, #4
   19a40:	mov	r1, #1
   19a44:	blx	r3
   19a48:	cmp	r4, r8
   19a4c:	bhi	197ac <__assert_fail@plt+0x7420>
   19a50:	sub	r1, r4, r9
   19a54:	sub	r3, r1, #1
   19a58:	cmp	r3, #7
   19a5c:	bhi	196d8 <__assert_fail@plt+0x734c>
   19a60:	b	197b0 <__assert_fail@plt+0x7424>
   19a64:	mov	r1, #1
   19a68:	mov	r0, r8
   19a6c:	ldr	r3, [r7]
   19a70:	blx	r3
   19a74:	uxtb	r0, r0
   19a78:	cmp	r0, #0
   19a7c:	strb	r0, [r5, #25]
   19a80:	bne	197f8 <__assert_fail@plt+0x746c>
   19a84:	b	19778 <__assert_fail@plt+0x73ec>
   19a88:	mov	r1, #8
   19a8c:	ldr	r2, [r7]
   19a90:	mov	r0, r6
   19a94:	str	r3, [sp, #12]
   19a98:	blx	r2
   19a9c:	ldr	r3, [sp, #12]
   19aa0:	adds	r8, r0, #12
   19aa4:	adc	r9, r1, #0
   19aa8:	strd	r0, [r5]
   19aac:	mov	r2, #8
   19ab0:	mov	r6, r3
   19ab4:	mov	r3, #12
   19ab8:	str	r2, [r5, #36]	; 0x24
   19abc:	str	r3, [sp, #12]
   19ac0:	b	1959c <__assert_fail@plt+0x7210>
   19ac4:	adds	r8, r0, #4
   19ac8:	adc	r9, r1, #0
   19acc:	b	19590 <__assert_fail@plt+0x7204>
   19ad0:	sub	r1, r4, r8
   19ad4:	sub	r3, r1, #1
   19ad8:	cmp	r3, #7
   19adc:	bhi	19770 <__assert_fail@plt+0x73e4>
   19ae0:	b	19a68 <__assert_fail@plt+0x76dc>
   19ae4:	mov	r2, #5
   19ae8:	ldr	r1, [pc, #48]	; 19b20 <__assert_fail@plt+0x7794>
   19aec:	bl	11ea0 <dcgettext@plt>
   19af0:	ldr	r1, [r5]
   19af4:	mov	r6, r8
   19af8:	bl	417d0 <warn@@Base>
   19afc:	b	195f0 <__assert_fail@plt+0x7264>
   19b00:	strdeq	sl, [r4], -ip
   19b04:	andeq	r9, r6, r0, ror #27
   19b08:	andeq	sl, r4, r4, lsl fp
   19b0c:	andeq	sl, r4, r0, asr #20
   19b10:	andeq	sl, r4, ip, lsr fp
   19b14:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   19b18:	andeq	sl, r4, r0, lsl #21
   19b1c:	andeq	sl, r4, ip, asr #21
   19b20:	andeq	sl, r4, r4, lsr #19
   19b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b28:	sub	sp, sp, #60	; 0x3c
   19b2c:	cmp	r0, r1
   19b30:	str	r3, [sp, #44]	; 0x2c
   19b34:	ldr	r3, [sp, #96]	; 0x60
   19b38:	str	r3, [sp, #52]	; 0x34
   19b3c:	bcs	19cb8 <__assert_fail@plt+0x792c>
   19b40:	mov	r7, r2
   19b44:	lsl	r2, r2, #3
   19b48:	mov	fp, r1
   19b4c:	mvn	r3, #0
   19b50:	sub	r1, r2, #1
   19b54:	mov	r6, r0
   19b58:	sub	r2, r2, #33	; 0x21
   19b5c:	mvn	r0, #1
   19b60:	lsl	r3, r3, r1
   19b64:	rsb	ip, r1, #32
   19b68:	orr	r3, r3, r0, lsl r2
   19b6c:	orr	r3, r3, r0, lsr ip
   19b70:	mvn	r2, r0, lsl r1
   19b74:	mvn	r3, r3
   19b78:	str	r3, [sp, #36]	; 0x24
   19b7c:	lsl	r3, r7, #1
   19b80:	str	r2, [sp, #32]
   19b84:	str	r3, [sp, #48]	; 0x30
   19b88:	b	19c84 <__assert_fail@plt+0x78f8>
   19b8c:	sub	r3, r7, #1
   19b90:	cmp	r3, #7
   19b94:	movls	r1, r7
   19b98:	bls	19cf8 <__assert_fail@plt+0x796c>
   19b9c:	mov	r4, #0
   19ba0:	mov	r5, #0
   19ba4:	ldr	r3, [sp, #48]	; 0x30
   19ba8:	add	r6, r6, r3
   19bac:	cmp	fp, r6
   19bb0:	subls	r1, fp, r8
   19bb4:	movhi	r1, r7
   19bb8:	cmp	r1, #0
   19bbc:	moveq	r8, #0
   19bc0:	strdeq	r4, [sp, #16]
   19bc4:	moveq	r9, #0
   19bc8:	bne	19d14 <__assert_fail@plt+0x7988>
   19bcc:	ldr	r1, [sp, #44]	; 0x2c
   19bd0:	ldr	r0, [pc, #472]	; 19db0 <__assert_fail@plt+0x7a24>
   19bd4:	bl	11dbc <printf@plt>
   19bd8:	ldrd	r2, [sp, #16]
   19bdc:	orrs	r3, r2, r3
   19be0:	beq	19d94 <__assert_fail@plt+0x7a08>
   19be4:	ldrd	r2, [sp, #32]
   19be8:	mov	r1, r2
   19bec:	and	r1, r1, r4
   19bf0:	str	r1, [sp, #8]
   19bf4:	mov	r1, r3
   19bf8:	and	r1, r1, r5
   19bfc:	str	r1, [sp, #12]
   19c00:	ldrd	r0, [sp, #8]
   19c04:	cmp	r3, r1
   19c08:	cmpeq	r2, r0
   19c0c:	bne	19c30 <__assert_fail@plt+0x78a4>
   19c10:	and	r1, r8, r2
   19c14:	str	r1, [sp, #24]
   19c18:	and	r1, r9, r3
   19c1c:	str	r1, [sp, #28]
   19c20:	ldrd	r0, [sp, #24]
   19c24:	cmp	r3, r1
   19c28:	cmpeq	r2, r0
   19c2c:	bne	19d64 <__assert_fail@plt+0x79d8>
   19c30:	ldr	sl, [sp, #52]	; 0x34
   19c34:	mov	r3, #0
   19c38:	adds	r0, sl, r4
   19c3c:	adc	r1, r3, r5
   19c40:	mov	r2, r7
   19c44:	bl	18e4c <__assert_fail@plt+0x6ac0>
   19c48:	adds	r0, sl, r8
   19c4c:	mov	r3, #0
   19c50:	adc	r1, r3, r9
   19c54:	mov	r2, r7
   19c58:	bl	18e4c <__assert_fail@plt+0x6ac0>
   19c5c:	cmp	r9, r5
   19c60:	cmpeq	r8, r4
   19c64:	beq	19d58 <__assert_fail@plt+0x79cc>
   19c68:	bcc	19d38 <__assert_fail@plt+0x79ac>
   19c6c:	ldr	r3, [pc, #320]	; 19db4 <__assert_fail@plt+0x7a28>
   19c70:	mov	r0, #10
   19c74:	ldr	r1, [r3]
   19c78:	bl	12254 <putc@plt>
   19c7c:	cmp	fp, r6
   19c80:	bls	19cb8 <__assert_fail@plt+0x792c>
   19c84:	cmp	r7, #8
   19c88:	add	r8, r7, r6
   19c8c:	bhi	19cc0 <__assert_fail@plt+0x7934>
   19c90:	cmp	r8, fp
   19c94:	bcc	19b8c <__assert_fail@plt+0x7800>
   19c98:	sub	r1, fp, r6
   19c9c:	sub	r3, r1, #1
   19ca0:	cmp	r3, #7
   19ca4:	movhi	r4, #0
   19ca8:	movhi	r5, #0
   19cac:	bls	19cf8 <__assert_fail@plt+0x796c>
   19cb0:	cmp	r8, fp
   19cb4:	bcc	19ba4 <__assert_fail@plt+0x7818>
   19cb8:	add	sp, sp, #60	; 0x3c
   19cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cc0:	mov	r3, #5
   19cc4:	str	r3, [sp]
   19cc8:	ldr	r2, [pc, #232]	; 19db8 <__assert_fail@plt+0x7a2c>
   19ccc:	mov	r3, r7
   19cd0:	ldr	r1, [pc, #228]	; 19dbc <__assert_fail@plt+0x7a30>
   19cd4:	mov	r0, #0
   19cd8:	bl	12368 <dcngettext@plt>
   19cdc:	mov	r2, #8
   19ce0:	mov	r1, r7
   19ce4:	bl	412ac <error@@Base>
   19ce8:	add	r3, r6, #8
   19cec:	cmp	fp, r3
   19cf0:	bls	19c98 <__assert_fail@plt+0x790c>
   19cf4:	mov	r1, #8
   19cf8:	ldr	r3, [pc, #192]	; 19dc0 <__assert_fail@plt+0x7a34>
   19cfc:	mov	r0, r6
   19d00:	ldr	r3, [r3]
   19d04:	blx	r3
   19d08:	mov	r4, r0
   19d0c:	mov	r5, r1
   19d10:	b	19cb0 <__assert_fail@plt+0x7924>
   19d14:	mov	r0, r8
   19d18:	bl	41ab8 <warn@@Base+0x2e8>
   19d1c:	orr	r3, r0, r4
   19d20:	str	r3, [sp, #16]
   19d24:	orr	r3, r1, r5
   19d28:	mov	r8, r0
   19d2c:	mov	r9, r1
   19d30:	str	r3, [sp, #20]
   19d34:	b	19bcc <__assert_fail@plt+0x7840>
   19d38:	ldr	r1, [pc, #132]	; 19dc4 <__assert_fail@plt+0x7a38>
   19d3c:	mov	r2, #5
   19d40:	mov	r0, #0
   19d44:	bl	11ea0 <dcgettext@plt>
   19d48:	ldr	r3, [pc, #100]	; 19db4 <__assert_fail@plt+0x7a28>
   19d4c:	ldr	r1, [r3]
   19d50:	bl	12314 <fputs@plt>
   19d54:	b	19c6c <__assert_fail@plt+0x78e0>
   19d58:	mov	r2, #5
   19d5c:	ldr	r1, [pc, #100]	; 19dc8 <__assert_fail@plt+0x7a3c>
   19d60:	b	19d40 <__assert_fail@plt+0x79b4>
   19d64:	mov	r0, r4
   19d68:	mov	r1, r5
   19d6c:	mov	r2, r7
   19d70:	bl	18e4c <__assert_fail@plt+0x6ac0>
   19d74:	mov	r0, r8
   19d78:	mov	r2, r7
   19d7c:	mov	r1, r9
   19d80:	bl	18e4c <__assert_fail@plt+0x6ac0>
   19d84:	ldr	r0, [pc, #64]	; 19dcc <__assert_fail@plt+0x7a40>
   19d88:	str	r8, [sp, #52]	; 0x34
   19d8c:	bl	11fe4 <puts@plt>
   19d90:	b	19c7c <__assert_fail@plt+0x78f0>
   19d94:	mov	r2, #5
   19d98:	ldr	r1, [pc, #48]	; 19dd0 <__assert_fail@plt+0x7a44>
   19d9c:	mov	r0, #0
   19da0:	bl	11ea0 <dcgettext@plt>
   19da4:	add	sp, sp, #60	; 0x3c
   19da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dac:	b	11dbc <printf@plt>
   19db0:	andeq	sl, r4, ip, ror #22
   19db4:	andeq	r7, r6, r0, lsr r4
   19db8:	andeq	sl, r4, r0, lsl #21
   19dbc:	andeq	sl, r4, ip, asr #21
   19dc0:	andeq	r9, r6, r0, ror #27
   19dc4:	andeq	sl, r4, r8, lsr #23
   19dc8:	muleq	r4, r8, fp
   19dcc:	andeq	sl, r4, r8, lsl #23
   19dd0:	andeq	sl, r4, r8, ror fp
   19dd4:	push	{r4, r5, r6, lr}
   19dd8:	mov	r5, r0
   19ddc:	mov	r6, r1
   19de0:	bl	185cc <__assert_fail@plt+0x6240>
   19de4:	subs	r4, r0, #0
   19de8:	bne	19e3c <__assert_fail@plt+0x7ab0>
   19dec:	ldr	r3, [pc, #124]	; 19e70 <__assert_fail@plt+0x7ae4>
   19df0:	ldr	r3, [r3]
   19df4:	cmp	r3, #0
   19df8:	beq	19e34 <__assert_fail@plt+0x7aa8>
   19dfc:	ldr	r6, [pc, #112]	; 19e74 <__assert_fail@plt+0x7ae8>
   19e00:	ldr	r1, [r6, #1116]	; 0x45c
   19e04:	cmp	r1, #0
   19e08:	beq	19e34 <__assert_fail@plt+0x7aa8>
   19e0c:	mov	r0, r5
   19e10:	bl	185cc <__assert_fail@plt+0x6240>
   19e14:	cmp	r0, #0
   19e18:	beq	19e34 <__assert_fail@plt+0x7aa8>
   19e1c:	add	r5, r5, r5, lsl #3
   19e20:	ldr	r3, [pc, #80]	; 19e78 <__assert_fail@plt+0x7aec>
   19e24:	ldr	r2, [r6, #1120]	; 0x460
   19e28:	add	r5, r3, r5, lsl #3
   19e2c:	mov	r4, #1
   19e30:	str	r2, [r5, #12]
   19e34:	mov	r0, r4
   19e38:	pop	{r4, r5, r6, pc}
   19e3c:	ldr	r3, [pc, #48]	; 19e74 <__assert_fail@plt+0x7ae8>
   19e40:	ldr	r2, [r3, #1116]	; 0x45c
   19e44:	cmp	r2, r6
   19e48:	movne	r4, #1
   19e4c:	bne	19e34 <__assert_fail@plt+0x7aa8>
   19e50:	ldr	r2, [pc, #32]	; 19e78 <__assert_fail@plt+0x7aec>
   19e54:	add	r5, r5, r5, lsl #3
   19e58:	ldr	r3, [r3, #1120]	; 0x460
   19e5c:	add	r5, r2, r5, lsl #3
   19e60:	mov	r4, #1
   19e64:	str	r3, [r5, #12]
   19e68:	mov	r0, r4
   19e6c:	pop	{r4, r5, r6, pc}
   19e70:	muleq	r6, ip, sp
   19e74:	andeq	r7, r6, r0, lsr r5
   19e78:	andeq	r6, r6, r0, ror #10
   19e7c:	ldr	r3, [pc, #184]	; 19f3c <__assert_fail@plt+0x7bb0>
   19e80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e84:	ldr	r3, [r3]
   19e88:	cmp	r3, #0
   19e8c:	bne	19f0c <__assert_fail@plt+0x7b80>
   19e90:	ldr	r3, [pc, #168]	; 19f40 <__assert_fail@plt+0x7bb4>
   19e94:	rsb	r0, r0, #80	; 0x50
   19e98:	umull	r3, r0, r3, r0
   19e9c:	cmp	r2, r0, lsr #1
   19ea0:	bcc	19f0c <__assert_fail@plt+0x7b80>
   19ea4:	cmp	r2, #0
   19ea8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19eac:	add	r5, r1, r2
   19eb0:	ldr	r7, [pc, #140]	; 19f44 <__assert_fail@plt+0x7bb8>
   19eb4:	ldr	r8, [pc, #140]	; 19f48 <__assert_fail@plt+0x7bbc>
   19eb8:	ldr	r6, [pc, #140]	; 19f4c <__assert_fail@plt+0x7bc0>
   19ebc:	sub	r5, r5, #1
   19ec0:	sub	r9, r1, #1
   19ec4:	rsb	r4, r1, #1
   19ec8:	b	19ee0 <__assert_fail@plt+0x7b54>
   19ecc:	ldrb	r1, [r9, #1]!
   19ed0:	mov	r0, r6
   19ed4:	bl	11dbc <printf@plt>
   19ed8:	cmp	r9, r5
   19edc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ee0:	add	r2, r4, r9
   19ee4:	umull	r1, r3, r7, r2
   19ee8:	lsr	r3, r3, #3
   19eec:	add	r1, r3, r3, lsl #1
   19ef0:	add	r3, r3, r1, lsl #2
   19ef4:	cmp	r2, r3, lsl #1
   19ef8:	bne	19ecc <__assert_fail@plt+0x7b40>
   19efc:	ldr	r1, [r8]
   19f00:	mov	r0, #10
   19f04:	bl	12254 <putc@plt>
   19f08:	b	19ecc <__assert_fail@plt+0x7b40>
   19f0c:	cmp	r2, #0
   19f10:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f14:	add	r5, r1, r2
   19f18:	ldr	r6, [pc, #44]	; 19f4c <__assert_fail@plt+0x7bc0>
   19f1c:	sub	r5, r5, #1
   19f20:	sub	r4, r1, #1
   19f24:	ldrb	r1, [r4, #1]!
   19f28:	mov	r0, r6
   19f2c:	bl	11dbc <printf@plt>
   19f30:	cmp	r5, r4
   19f34:	bne	19f24 <__assert_fail@plt+0x7b98>
   19f38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f3c:	andeq	r9, r6, r8, lsr #27
   19f40:	bge	feac49f4 <optarg@@GLIBC_2.4+0xfea5d5bc>
   19f44:	cdpmi	12, 12, cr14, cr4, cr15, {2}
   19f48:	andeq	r7, r6, r0, lsr r4
   19f4c:			; <UNDEFINED> instruction: 0x0004abb8
   19f50:	push	{r4, r5, r6, lr}
   19f54:	mov	r2, #5
   19f58:	mov	r4, r0
   19f5c:	mov	r5, r1
   19f60:	mov	r0, #0
   19f64:	ldr	r1, [pc, #20]	; 19f80 <__assert_fail@plt+0x7bf4>
   19f68:	bl	11ea0 <dcgettext@plt>
   19f6c:	bl	11dbc <printf@plt>
   19f70:	mov	r2, r5
   19f74:	mov	r1, r4
   19f78:	pop	{r4, r5, r6, lr}
   19f7c:	b	19e7c <__assert_fail@plt+0x7af0>
   19f80:	andeq	sl, r4, r0, asr #23
   19f84:	ldrd	r2, [r0, #32]
   19f88:	orrs	r3, r2, r3
   19f8c:	beq	19f98 <__assert_fail@plt+0x7c0c>
   19f90:	mov	r0, #1
   19f94:	bx	lr
   19f98:	push	{r4, lr}
   19f9c:	mov	r4, r0
   19fa0:	mov	r2, #5
   19fa4:	ldr	r1, [pc, #20]	; 19fc0 <__assert_fail@plt+0x7c34>
   19fa8:	mov	r0, #0
   19fac:	bl	11ea0 <dcgettext@plt>
   19fb0:	ldr	r1, [r4, #8]
   19fb4:	bl	11dbc <printf@plt>
   19fb8:	mov	r0, #0
   19fbc:	pop	{r4, pc}
   19fc0:	ldrdeq	sl, [r4], -ip
   19fc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fc8:	sub	sp, sp, #20
   19fcc:	mov	r9, r0
   19fd0:	mov	r4, r2
   19fd4:	ldr	r1, [pc, #232]	; 1a0c4 <__assert_fail@plt+0x7d38>
   19fd8:	mov	r2, #5
   19fdc:	mov	r0, #0
   19fe0:	ldr	sl, [sp, #56]	; 0x38
   19fe4:	mov	r5, r3
   19fe8:	ldrb	r7, [sp, #60]	; 0x3c
   19fec:	bl	11ea0 <dcgettext@plt>
   19ff0:	mov	r1, #0
   19ff4:	mov	r2, r4
   19ff8:	mov	r3, r5
   19ffc:	str	r1, [sp]
   1a000:	mov	r6, r0
   1a004:	ldr	r0, [pc, #188]	; 1a0c8 <__assert_fail@plt+0x7d3c>
   1a008:	bl	18b24 <__assert_fail@plt+0x6798>
   1a00c:	mov	r1, r7
   1a010:	mov	r2, r0
   1a014:	mov	r0, r6
   1a018:	bl	11dbc <printf@plt>
   1a01c:	cmp	r9, sl
   1a020:	movhi	r0, sl
   1a024:	bhi	1a0b4 <__assert_fail@plt+0x7d28>
   1a028:	sub	r2, sl, r9
   1a02c:	asr	r3, r2, #31
   1a030:	cmp	r3, r5
   1a034:	cmpeq	r2, r4
   1a038:	movhi	r2, r4
   1a03c:	movhi	r3, r5
   1a040:	subs	r0, r2, #1
   1a044:	sbc	r1, r3, #0
   1a048:	orrs	r3, r2, r3
   1a04c:	str	r0, [sp, #12]
   1a050:	beq	1a0bc <__assert_fail@plt+0x7d30>
   1a054:	ldr	fp, [pc, #112]	; 1a0cc <__assert_fail@plt+0x7d40>
   1a058:	ldr	r8, [pc, #112]	; 1a0d0 <__assert_fail@plt+0x7d44>
   1a05c:	mov	r4, r0
   1a060:	mov	r5, r1
   1a064:	mov	r3, r9
   1a068:	mvn	r6, #0
   1a06c:	mvn	r7, #0
   1a070:	mov	r0, r3
   1a074:	ldr	r2, [fp]
   1a078:	mov	r1, #1
   1a07c:	add	sl, r3, r1
   1a080:	blx	r2
   1a084:	mov	r1, r0
   1a088:	mov	r0, r8
   1a08c:	bl	11dbc <printf@plt>
   1a090:	subs	r4, r4, #1
   1a094:	sbc	r5, r5, #0
   1a098:	cmp	r5, r7
   1a09c:	cmpeq	r4, r6
   1a0a0:	mov	r3, sl
   1a0a4:	bne	1a070 <__assert_fail@plt+0x7ce4>
   1a0a8:	ldr	r3, [sp, #12]
   1a0ac:	add	sl, r3, #1
   1a0b0:	add	r0, r9, sl
   1a0b4:	add	sp, sp, #20
   1a0b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0bc:	mov	r0, r9
   1a0c0:	b	1a0b4 <__assert_fail@plt+0x7d28>
   1a0c4:	strdeq	sl, [r4], -r8
   1a0c8:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   1a0cc:	andeq	r9, r6, r0, ror #27
   1a0d0:	andeq	sl, r4, ip, lsl #24
   1a0d4:	ldr	r2, [pc, #216]	; 1a1b4 <__assert_fail@plt+0x7e28>
   1a0d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a0dc:	sub	sp, sp, #8
   1a0e0:	ldr	sl, [r2, #736]	; 0x2e0
   1a0e4:	cmp	sl, #0
   1a0e8:	beq	1a1a4 <__assert_fail@plt+0x7e18>
   1a0ec:	add	r2, r2, #752	; 0x2f0
   1a0f0:	mov	r4, r0
   1a0f4:	ldrd	r6, [r2]
   1a0f8:	mov	r5, r1
   1a0fc:	cmp	r7, r1
   1a100:	cmpeq	r6, r0
   1a104:	bls	1a13c <__assert_fail@plt+0x7db0>
   1a108:	add	sl, sl, r0
   1a10c:	sub	r1, r6, r4
   1a110:	mov	r0, sl
   1a114:	bl	1217c <strnlen@plt>
   1a118:	subs	r8, r6, r4
   1a11c:	sbc	r9, r7, r5
   1a120:	mov	r1, #0
   1a124:	cmp	r1, r9
   1a128:	cmpeq	r0, r8
   1a12c:	beq	1a18c <__assert_fail@plt+0x7e00>
   1a130:	mov	r0, sl
   1a134:	add	sp, sp, #8
   1a138:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a13c:	ldr	r1, [pc, #116]	; 1a1b8 <__assert_fail@plt+0x7e2c>
   1a140:	mov	r2, #5
   1a144:	mov	r0, #0
   1a148:	mov	r6, r0
   1a14c:	bl	11ea0 <dcgettext@plt>
   1a150:	mov	r2, r4
   1a154:	mov	r3, r5
   1a158:	str	r6, [sp]
   1a15c:	mov	r7, r0
   1a160:	ldr	r0, [pc, #84]	; 1a1bc <__assert_fail@plt+0x7e30>
   1a164:	bl	18b24 <__assert_fail@plt+0x6798>
   1a168:	mov	r1, r0
   1a16c:	mov	r0, r7
   1a170:	bl	417d0 <warn@@Base>
   1a174:	ldr	r1, [pc, #68]	; 1a1c0 <__assert_fail@plt+0x7e34>
   1a178:	mov	r0, r6
   1a17c:	mov	r2, #5
   1a180:	add	sp, sp, #8
   1a184:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a188:	b	11ea0 <dcgettext@plt>
   1a18c:	mov	r2, #5
   1a190:	ldr	r1, [pc, #44]	; 1a1c4 <__assert_fail@plt+0x7e38>
   1a194:	mov	r0, #0
   1a198:	add	sp, sp, #8
   1a19c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a1a0:	b	11ea0 <dcgettext@plt>
   1a1a4:	mov	r0, sl
   1a1a8:	mov	r2, #5
   1a1ac:	ldr	r1, [pc, #20]	; 1a1c8 <__assert_fail@plt+0x7e3c>
   1a1b0:	b	1a180 <__assert_fail@plt+0x7df4>
   1a1b4:	andeq	r6, r6, r0, ror #10
   1a1b8:	andeq	sl, r4, r4, lsl ip
   1a1bc:	andeq	r8, r4, r8, lsr #29
   1a1c0:	andeq	sl, r4, r8, lsr ip
   1a1c4:	andeq	sl, r4, ip, asr #24
   1a1c8:	andeq	sl, r4, r4, asr #15
   1a1cc:	ldr	r2, [pc, #216]	; 1a2ac <__assert_fail@plt+0x7f20>
   1a1d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a1d4:	sub	sp, sp, #8
   1a1d8:	ldr	sl, [r2, #808]	; 0x328
   1a1dc:	cmp	sl, #0
   1a1e0:	beq	1a29c <__assert_fail@plt+0x7f10>
   1a1e4:	add	r2, r2, #832	; 0x340
   1a1e8:	mov	r4, r0
   1a1ec:	ldrd	r6, [r2, #-8]
   1a1f0:	mov	r5, r1
   1a1f4:	cmp	r7, r1
   1a1f8:	cmpeq	r6, r0
   1a1fc:	bls	1a234 <__assert_fail@plt+0x7ea8>
   1a200:	add	sl, sl, r0
   1a204:	sub	r1, r6, r4
   1a208:	mov	r0, sl
   1a20c:	bl	1217c <strnlen@plt>
   1a210:	subs	r8, r6, r4
   1a214:	sbc	r9, r7, r5
   1a218:	mov	r1, #0
   1a21c:	cmp	r1, r9
   1a220:	cmpeq	r0, r8
   1a224:	beq	1a284 <__assert_fail@plt+0x7ef8>
   1a228:	mov	r0, sl
   1a22c:	add	sp, sp, #8
   1a230:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a234:	ldr	r1, [pc, #116]	; 1a2b0 <__assert_fail@plt+0x7f24>
   1a238:	mov	r2, #5
   1a23c:	mov	r0, #0
   1a240:	mov	r6, r0
   1a244:	bl	11ea0 <dcgettext@plt>
   1a248:	mov	r2, r4
   1a24c:	mov	r3, r5
   1a250:	str	r6, [sp]
   1a254:	mov	r7, r0
   1a258:	ldr	r0, [pc, #84]	; 1a2b4 <__assert_fail@plt+0x7f28>
   1a25c:	bl	18b24 <__assert_fail@plt+0x6798>
   1a260:	mov	r1, r0
   1a264:	mov	r0, r7
   1a268:	bl	417d0 <warn@@Base>
   1a26c:	ldr	r1, [pc, #68]	; 1a2b8 <__assert_fail@plt+0x7f2c>
   1a270:	mov	r0, r6
   1a274:	mov	r2, #5
   1a278:	add	sp, sp, #8
   1a27c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a280:	b	11ea0 <dcgettext@plt>
   1a284:	mov	r2, #5
   1a288:	ldr	r1, [pc, #44]	; 1a2bc <__assert_fail@plt+0x7f30>
   1a28c:	mov	r0, #0
   1a290:	add	sp, sp, #8
   1a294:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a298:	b	11ea0 <dcgettext@plt>
   1a29c:	mov	r0, sl
   1a2a0:	mov	r2, #5
   1a2a4:	ldr	r1, [pc, #20]	; 1a2c0 <__assert_fail@plt+0x7f34>
   1a2a8:	b	1a278 <__assert_fail@plt+0x7eec>
   1a2ac:	andeq	r6, r6, r0, ror #10
   1a2b0:	muleq	r4, r8, ip
   1a2b4:	andeq	r8, r4, r8, lsr #29
   1a2b8:	andeq	sl, r4, r8, lsr ip
   1a2bc:	andeq	sl, r4, r0, asr #25
   1a2c0:	andeq	sl, r4, r8, ror ip
   1a2c4:	push	{r4, lr}
   1a2c8:	mov	r4, r0
   1a2cc:	bl	43088 <warn@@Base+0x18b8>
   1a2d0:	subs	r3, r0, #0
   1a2d4:	beq	1a2e0 <__assert_fail@plt+0x7f54>
   1a2d8:	mov	r0, r3
   1a2dc:	pop	{r4, pc}
   1a2e0:	sub	r3, r4, #16384	; 0x4000
   1a2e4:	ldr	r2, [pc, #52]	; 1a320 <__assert_fail@plt+0x7f94>
   1a2e8:	sub	r3, r3, #128	; 0x80
   1a2ec:	cmp	r3, r2
   1a2f0:	mov	r2, #5
   1a2f4:	ldrls	r1, [pc, #40]	; 1a324 <__assert_fail@plt+0x7f98>
   1a2f8:	ldrhi	r1, [pc, #40]	; 1a328 <__assert_fail@plt+0x7f9c>
   1a2fc:	bl	11ea0 <dcgettext@plt>
   1a300:	mov	r3, r4
   1a304:	mov	r1, #100	; 0x64
   1a308:	mov	r2, r0
   1a30c:	ldr	r0, [pc, #24]	; 1a32c <__assert_fail@plt+0x7fa0>
   1a310:	bl	120f8 <snprintf@plt>
   1a314:	ldr	r3, [pc, #16]	; 1a32c <__assert_fail@plt+0x7fa0>
   1a318:	mov	r0, r3
   1a31c:	pop	{r4, pc}
   1a320:	andeq	fp, r0, pc, ror pc
   1a324:	strdeq	sl, [r4], -r0
   1a328:	andeq	sl, r4, r8, lsl #26
   1a32c:	muleq	r6, r4, r9
   1a330:	subs	r3, r0, #0
   1a334:	beq	1a36c <__assert_fail@plt+0x7fe0>
   1a338:	ldr	r2, [pc, #96]	; 1a3a0 <__assert_fail@plt+0x8014>
   1a33c:	cmp	r3, r2
   1a340:	beq	1a360 <__assert_fail@plt+0x7fd4>
   1a344:	push	{r4, lr}
   1a348:	mov	r4, r3
   1a34c:	bl	43f10 <warn@@Base+0x2740>
   1a350:	subs	r3, r0, #0
   1a354:	beq	1a378 <__assert_fail@plt+0x7fec>
   1a358:	mov	r0, r3
   1a35c:	pop	{r4, pc}
   1a360:	ldr	r3, [pc, #60]	; 1a3a4 <__assert_fail@plt+0x8018>
   1a364:	mov	r0, r3
   1a368:	bx	lr
   1a36c:	ldr	r3, [pc, #52]	; 1a3a8 <__assert_fail@plt+0x801c>
   1a370:	mov	r0, r3
   1a374:	bx	lr
   1a378:	mov	r2, #5
   1a37c:	ldr	r1, [pc, #40]	; 1a3ac <__assert_fail@plt+0x8020>
   1a380:	bl	11ea0 <dcgettext@plt>
   1a384:	mov	r3, r4
   1a388:	mov	r1, #100	; 0x64
   1a38c:	mov	r2, r0
   1a390:	ldr	r0, [pc, #24]	; 1a3b0 <__assert_fail@plt+0x8024>
   1a394:	bl	120f8 <snprintf@plt>
   1a398:	ldr	r3, [pc, #16]	; 1a3b0 <__assert_fail@plt+0x8024>
   1a39c:	b	1a358 <__assert_fail@plt+0x7fcc>
   1a3a0:	andeq	r2, r0, r1
   1a3a4:	andeq	sl, r4, r0, lsr sp
   1a3a8:	andeq	sl, r4, r0, lsr #26
   1a3ac:	andeq	sl, r4, r8, asr sp
   1a3b0:	strdeq	r7, [r6], -r8
   1a3b4:	subs	r3, r0, #0
   1a3b8:	bne	1a3c8 <__assert_fail@plt+0x803c>
   1a3bc:	ldr	r3, [pc, #72]	; 1a40c <__assert_fail@plt+0x8080>
   1a3c0:	mov	r0, r3
   1a3c4:	bx	lr
   1a3c8:	push	{r4, lr}
   1a3cc:	mov	r4, r3
   1a3d0:	bl	43a4c <warn@@Base+0x227c>
   1a3d4:	subs	r3, r0, #0
   1a3d8:	beq	1a3e4 <__assert_fail@plt+0x8058>
   1a3dc:	mov	r0, r3
   1a3e0:	pop	{r4, pc}
   1a3e4:	mov	r2, #5
   1a3e8:	ldr	r1, [pc, #32]	; 1a410 <__assert_fail@plt+0x8084>
   1a3ec:	bl	11ea0 <dcgettext@plt>
   1a3f0:	mov	r3, r4
   1a3f4:	mov	r1, #100	; 0x64
   1a3f8:	mov	r2, r0
   1a3fc:	ldr	r0, [pc, #16]	; 1a414 <__assert_fail@plt+0x8088>
   1a400:	bl	120f8 <snprintf@plt>
   1a404:	ldr	r3, [pc, #8]	; 1a414 <__assert_fail@plt+0x8088>
   1a408:	b	1a3dc <__assert_fail@plt+0x8050>
   1a40c:	andeq	sl, r4, r0, ror sp
   1a410:	andeq	sl, r4, r4, lsl #27
   1a414:	andeq	r7, r6, ip, asr sl
   1a418:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a41c:	mov	r5, r1
   1a420:	and	r1, r1, #7
   1a424:	sub	r1, r1, #2
   1a428:	cmp	r1, #2
   1a42c:	mov	fp, r3
   1a430:	ldrls	r3, [pc, #240]	; 1a528 <__assert_fail@plt+0x819c>
   1a434:	ldrhi	r3, [pc, #240]	; 1a52c <__assert_fail@plt+0x81a0>
   1a438:	addls	r1, r3, r1, lsl #2
   1a43c:	ldr	r6, [r0]
   1a440:	ldrls	r4, [r1, #1024]	; 0x400
   1a444:	ldrhi	r4, [r3]
   1a448:	ldr	r9, [sp, #40]	; 0x28
   1a44c:	add	r8, r6, r4
   1a450:	cmp	r8, r9
   1a454:	mov	r7, r0
   1a458:	mov	sl, r2
   1a45c:	bcs	1a4bc <__assert_fail@plt+0x8130>
   1a460:	cmp	r4, #8
   1a464:	bhi	1a4f0 <__assert_fail@plt+0x8164>
   1a468:	cmp	r4, #0
   1a46c:	beq	1a518 <__assert_fail@plt+0x818c>
   1a470:	tst	r5, #8
   1a474:	bne	1a4e0 <__assert_fail@plt+0x8154>
   1a478:	ldr	r3, [pc, #176]	; 1a530 <__assert_fail@plt+0x81a4>
   1a47c:	mov	r1, r4
   1a480:	mov	r0, r6
   1a484:	ldr	r3, [r3]
   1a488:	blx	r3
   1a48c:	and	r5, r5, #112	; 0x70
   1a490:	cmp	r5, #16
   1a494:	bne	1a4b4 <__assert_fail@plt+0x8128>
   1a498:	ldrd	r2, [fp]
   1a49c:	ldr	ip, [sl]
   1a4a0:	sub	r6, r6, ip
   1a4a4:	adds	r4, r2, r6
   1a4a8:	adc	r5, r3, r6, asr #31
   1a4ac:	adds	r0, r0, r4
   1a4b0:	adc	r1, r1, r5
   1a4b4:	str	r8, [r7]
   1a4b8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4bc:	ldr	r1, [pc, #112]	; 1a534 <__assert_fail@plt+0x81a8>
   1a4c0:	mov	r2, #5
   1a4c4:	mov	r0, #0
   1a4c8:	bl	11ea0 <dcgettext@plt>
   1a4cc:	bl	417d0 <warn@@Base>
   1a4d0:	mov	r0, #0
   1a4d4:	str	r9, [r7]
   1a4d8:	mov	r1, r0
   1a4dc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4e0:	mov	r1, r4
   1a4e4:	mov	r0, r6
   1a4e8:	bl	41ab8 <warn@@Base+0x2e8>
   1a4ec:	b	1a48c <__assert_fail@plt+0x8100>
   1a4f0:	mov	r2, #5
   1a4f4:	ldr	r1, [pc, #60]	; 1a538 <__assert_fail@plt+0x81ac>
   1a4f8:	mov	r0, #0
   1a4fc:	bl	11ea0 <dcgettext@plt>
   1a500:	mov	r1, r4
   1a504:	bl	417d0 <warn@@Base>
   1a508:	mov	r0, #0
   1a50c:	str	r9, [r7]
   1a510:	mov	r1, r0
   1a514:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a518:	mov	r0, r4
   1a51c:	mov	r2, #5
   1a520:	ldr	r1, [pc, #20]	; 1a53c <__assert_fail@plt+0x81b0>
   1a524:	b	1a4c8 <__assert_fail@plt+0x813c>
   1a528:	andeq	r9, r4, ip, ror r7
   1a52c:	andeq	r9, r6, ip, lsr #27
   1a530:	andeq	r9, r6, r0, ror #27
   1a534:	muleq	r4, ip, sp
   1a538:	andeq	sl, r4, r8, asr #27
   1a53c:	strdeq	sl, [r4], -r4
   1a540:	push	{r4, lr}
   1a544:	mov	r2, #5
   1a548:	mov	r4, r0
   1a54c:	ldr	r1, [pc, #20]	; 1a568 <__assert_fail@plt+0x81dc>
   1a550:	mov	r0, #0
   1a554:	bl	11ea0 <dcgettext@plt>
   1a558:	mov	r1, r4
   1a55c:	bl	412ac <error@@Base>
   1a560:	mov	r0, #1
   1a564:	bl	12218 <xexit@plt>
   1a568:	andeq	sl, r4, ip, lsl lr
   1a56c:	push	{r4, r5, r6, r7, r8, lr}
   1a570:	ldr	r4, [r0, #8]
   1a574:	cmp	r4, r1
   1a578:	bhi	1a668 <__assert_fail@plt+0x82dc>
   1a57c:	ldr	r3, [pc, #280]	; 1a69c <__assert_fail@plt+0x8310>
   1a580:	ldr	r3, [r3, #76]	; 0x4c
   1a584:	cmp	r3, r1
   1a588:	movcs	r2, #0
   1a58c:	movcc	r2, #1
   1a590:	cmp	r3, #0
   1a594:	movne	r7, r2
   1a598:	moveq	r7, #0
   1a59c:	cmp	r7, #0
   1a5a0:	bne	1a660 <__assert_fail@plt+0x82d4>
   1a5a4:	add	r3, r1, #1
   1a5a8:	cmp	r3, #0
   1a5ac:	str	r3, [r0, #8]
   1a5b0:	beq	1a660 <__assert_fail@plt+0x82d4>
   1a5b4:	cmp	r3, #1024	; 0x400
   1a5b8:	mov	r6, r1
   1a5bc:	mov	r5, r0
   1a5c0:	bhi	1a644 <__assert_fail@plt+0x82b8>
   1a5c4:	lsl	r1, r3, #1
   1a5c8:	ldr	r0, [r0, #12]
   1a5cc:	bl	11ed0 <xrealloc@plt>
   1a5d0:	ldr	r1, [r5, #8]
   1a5d4:	ldr	r3, [r5, #16]
   1a5d8:	cmn	r1, #-1073741822	; 0xc0000002
   1a5dc:	str	r0, [r5, #12]
   1a5e0:	bhi	1a694 <__assert_fail@plt+0x8308>
   1a5e4:	lsl	r1, r1, #2
   1a5e8:	mov	r0, r3
   1a5ec:	bl	11ed0 <xrealloc@plt>
   1a5f0:	ldr	r6, [r5, #12]
   1a5f4:	cmp	r6, #0
   1a5f8:	str	r0, [r5, #16]
   1a5fc:	beq	1a670 <__assert_fail@plt+0x82e4>
   1a600:	ldr	r3, [r5, #8]
   1a604:	cmp	r4, r3
   1a608:	bcs	1a63c <__assert_fail@plt+0x82b0>
   1a60c:	sub	r3, r4, #-2147483647	; 0x80000001
   1a610:	sub	r1, r4, #-1073741823	; 0xc0000001
   1a614:	mov	r2, r7
   1a618:	add	r3, r6, r3, lsl #1
   1a61c:	add	r0, r0, r1, lsl #2
   1a620:	mvn	ip, #0
   1a624:	strh	ip, [r3, #2]!
   1a628:	str	r2, [r0, #4]!
   1a62c:	ldr	r1, [r5, #8]
   1a630:	add	r4, r4, #1
   1a634:	cmp	r1, r4
   1a638:	bhi	1a624 <__assert_fail@plt+0x8298>
   1a63c:	mov	r0, #1
   1a640:	pop	{r4, r5, r6, r7, r8, pc}
   1a644:	mov	r2, #5
   1a648:	ldr	r1, [pc, #80]	; 1a6a0 <__assert_fail@plt+0x8314>
   1a64c:	mov	r0, r7
   1a650:	bl	11ea0 <dcgettext@plt>
   1a654:	mov	r1, r6
   1a658:	bl	412ac <error@@Base>
   1a65c:	str	r7, [r5, #8]
   1a660:	mvn	r0, #0
   1a664:	pop	{r4, r5, r6, r7, r8, pc}
   1a668:	mov	r0, #0
   1a66c:	pop	{r4, r5, r6, r7, r8, pc}
   1a670:	mov	r2, #5
   1a674:	ldr	r1, [pc, #40]	; 1a6a4 <__assert_fail@plt+0x8318>
   1a678:	mov	r0, r6
   1a67c:	bl	11ea0 <dcgettext@plt>
   1a680:	ldr	r1, [r5, #8]
   1a684:	bl	412ac <error@@Base>
   1a688:	str	r6, [r5, #8]
   1a68c:	mvn	r0, #0
   1a690:	pop	{r4, r5, r6, r7, r8, pc}
   1a694:	mov	r0, r1
   1a698:	bl	1a540 <__assert_fail@plt+0x81b4>
   1a69c:	andeq	r7, r6, r0, lsr r5
   1a6a0:	andeq	sl, r4, ip, ror #28
   1a6a4:	muleq	r4, r4, lr
   1a6a8:	push	{r4, lr}
   1a6ac:	mov	r3, r0
   1a6b0:	ldr	r4, [pc, #32]	; 1a6d8 <__assert_fail@plt+0x834c>
   1a6b4:	ldr	r2, [pc, #32]	; 1a6dc <__assert_fail@plt+0x8350>
   1a6b8:	mov	r0, r4
   1a6bc:	mov	r1, #15
   1a6c0:	bl	120f8 <snprintf@plt>
   1a6c4:	mov	r2, r4
   1a6c8:	mov	r1, #8
   1a6cc:	ldr	r0, [pc, #12]	; 1a6e0 <__assert_fail@plt+0x8354>
   1a6d0:	pop	{r4, lr}
   1a6d4:	b	11dbc <printf@plt>
   1a6d8:	andeq	r7, r6, r0, asr #21
   1a6dc:	andeq	lr, r4, r0, asr #8
   1a6e0:	ldrdeq	sl, [r4], -r0
   1a6e4:	cmp	r2, #0
   1a6e8:	push	{r4, r5, r6, lr}
   1a6ec:	mov	r5, #0
   1a6f0:	lslne	r3, r2, #1
   1a6f4:	moveq	r3, #4
   1a6f8:	cmp	r1, r5
   1a6fc:	cmpeq	r0, r0
   1a700:	bne	1a718 <__assert_fail@plt+0x838c>
   1a704:	mov	r2, r0
   1a708:	sub	r1, r3, #1
   1a70c:	ldr	r0, [pc, #24]	; 1a72c <__assert_fail@plt+0x83a0>
   1a710:	pop	{r4, r5, r6, lr}
   1a714:	b	11dbc <printf@plt>
   1a718:	ldr	r3, [pc, #16]	; 1a730 <__assert_fail@plt+0x83a4>
   1a71c:	mov	r2, #272	; 0x110
   1a720:	ldr	r1, [pc, #12]	; 1a734 <__assert_fail@plt+0x83a8>
   1a724:	ldr	r0, [pc, #12]	; 1a738 <__assert_fail@plt+0x83ac>
   1a728:	bl	1238c <__assert_fail@plt>
   1a72c:	andeq	sl, r4, r0, lsl pc
   1a730:	andeq	r9, r4, r8, lsl #23
   1a734:	ldrdeq	sl, [r4], -r8
   1a738:	strdeq	sl, [r4], -r0
   1a73c:	orrs	ip, r0, r1
   1a740:	push	{r4, r5, lr}
   1a744:	mov	r4, r2
   1a748:	sub	sp, sp, #12
   1a74c:	mov	r5, r3
   1a750:	bne	1a774 <__assert_fail@plt+0x83e8>
   1a754:	strd	r4, [sp]
   1a758:	ldr	r2, [pc, #76]	; 1a7ac <__assert_fail@plt+0x8420>
   1a75c:	mov	r1, #64	; 0x40
   1a760:	ldr	r0, [sp, #24]
   1a764:	bl	120f8 <snprintf@plt>
   1a768:	ldr	r0, [sp, #24]
   1a76c:	add	sp, sp, #12
   1a770:	pop	{r4, r5, pc}
   1a774:	strd	r0, [sp]
   1a778:	ldr	r2, [pc, #44]	; 1a7ac <__assert_fail@plt+0x8420>
   1a77c:	mov	r1, #64	; 0x40
   1a780:	ldr	r0, [sp, #24]
   1a784:	bl	120f8 <snprintf@plt>
   1a788:	ldr	r3, [sp, #24]
   1a78c:	strd	r4, [sp]
   1a790:	ldr	r2, [pc, #24]	; 1a7b0 <__assert_fail@plt+0x8424>
   1a794:	rsb	r1, r0, #64	; 0x40
   1a798:	add	r0, r3, r0
   1a79c:	bl	120f8 <snprintf@plt>
   1a7a0:	ldr	r0, [sp, #24]
   1a7a4:	add	sp, sp, #12
   1a7a8:	pop	{r4, r5, pc}
   1a7ac:	andeq	sl, r4, r8, lsl pc
   1a7b0:	andeq	sl, r4, r0, lsr #30
   1a7b4:	ldr	r3, [pc, #88]	; 1a814 <__assert_fail@plt+0x8488>
   1a7b8:	push	{r4, r5, r6, lr}
   1a7bc:	mov	r2, #5
   1a7c0:	ldr	r3, [r3]
   1a7c4:	mov	r5, r0
   1a7c8:	cmp	r3, #0
   1a7cc:	beq	1a7fc <__assert_fail@plt+0x8470>
   1a7d0:	ldr	r3, [r1]
   1a7d4:	mov	r4, r1
   1a7d8:	cmp	r3, #0
   1a7dc:	beq	1a7fc <__assert_fail@plt+0x8470>
   1a7e0:	ldr	r1, [pc, #48]	; 1a818 <__assert_fail@plt+0x848c>
   1a7e4:	mov	r0, #0
   1a7e8:	bl	11ea0 <dcgettext@plt>
   1a7ec:	ldr	r2, [r4]
   1a7f0:	ldr	r1, [r5]
   1a7f4:	pop	{r4, r5, r6, lr}
   1a7f8:	b	11dbc <printf@plt>
   1a7fc:	ldr	r1, [pc, #24]	; 1a81c <__assert_fail@plt+0x8490>
   1a800:	mov	r0, #0
   1a804:	bl	11ea0 <dcgettext@plt>
   1a808:	ldr	r1, [r5]
   1a80c:	pop	{r4, r5, r6, lr}
   1a810:	b	11dbc <printf@plt>
   1a814:	muleq	r6, ip, sp
   1a818:	andeq	sl, r4, r8, lsr #30
   1a81c:	andeq	sl, r4, r8, asr pc
   1a820:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a824:	mov	r4, r0
   1a828:	add	r1, r0, #12
   1a82c:	add	r0, r0, #8
   1a830:	bl	1a7b4 <__assert_fail@plt+0x8428>
   1a834:	ldrd	r8, [r4, #32]
   1a838:	ldr	r6, [r4, #16]
   1a83c:	mov	r1, r8
   1a840:	mov	r0, r6
   1a844:	bl	1217c <strnlen@plt>
   1a848:	mov	r3, #0
   1a84c:	cmp	r9, r3
   1a850:	cmpeq	r8, r0
   1a854:	beq	1a95c <__assert_fail@plt+0x85d0>
   1a858:	mov	r2, #5
   1a85c:	ldr	r1, [pc, #368]	; 1a9d4 <__assert_fail@plt+0x8648>
   1a860:	mov	r5, r0
   1a864:	mov	r0, #0
   1a868:	bl	11ea0 <dcgettext@plt>
   1a86c:	mov	r1, r6
   1a870:	bl	11dbc <printf@plt>
   1a874:	mov	r2, #14
   1a878:	ldr	r1, [pc, #344]	; 1a9d8 <__assert_fail@plt+0x864c>
   1a87c:	ldr	r0, [r4, #8]
   1a880:	bl	12320 <strncmp@plt>
   1a884:	subs	r7, r0, #0
   1a888:	beq	1a8f4 <__assert_fail@plt+0x8568>
   1a88c:	ldr	r6, [r4, #32]
   1a890:	mov	r2, #5
   1a894:	sub	r6, r6, #1
   1a898:	sub	r6, r6, r5
   1a89c:	cmp	r6, #19
   1a8a0:	bls	1a97c <__assert_fail@plt+0x85f0>
   1a8a4:	ldr	r1, [pc, #304]	; 1a9dc <__assert_fail@plt+0x8650>
   1a8a8:	mov	r0, #0
   1a8ac:	ldr	r7, [r4, #16]
   1a8b0:	bl	11ea0 <dcgettext@plt>
   1a8b4:	ldr	r4, [pc, #292]	; 1a9e0 <__assert_fail@plt+0x8654>
   1a8b8:	mov	r1, r6
   1a8bc:	bl	11dbc <printf@plt>
   1a8c0:	add	r1, r5, #1
   1a8c4:	add	r1, r7, r1
   1a8c8:	mov	r2, r6
   1a8cc:	bl	19e7c <__assert_fail@plt+0x7af0>
   1a8d0:	ldr	r1, [r4]
   1a8d4:	mov	r0, #10
   1a8d8:	bl	12254 <putc@plt>
   1a8dc:	ldr	r1, [r4]
   1a8e0:	mov	r0, #10
   1a8e4:	bl	12254 <putc@plt>
   1a8e8:	mov	r7, #1
   1a8ec:	mov	r0, r7
   1a8f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a8f4:	ldrd	r2, [r4, #32]
   1a8f8:	add	r5, r5, #4
   1a8fc:	bic	r5, r5, #3
   1a900:	mov	r9, #0
   1a904:	add	r8, r5, #4
   1a908:	cmp	r9, r3
   1a90c:	cmpeq	r8, r2
   1a910:	bhi	1a99c <__assert_fail@plt+0x8610>
   1a914:	ldr	r3, [pc, #200]	; 1a9e4 <__assert_fail@plt+0x8658>
   1a918:	add	r0, r6, r5
   1a91c:	mov	r1, #4
   1a920:	ldr	r3, [r3]
   1a924:	blx	r3
   1a928:	mov	r2, #5
   1a92c:	ldr	r1, [pc, #180]	; 1a9e8 <__assert_fail@plt+0x865c>
   1a930:	mov	r6, r0
   1a934:	mov	r0, r7
   1a938:	bl	11ea0 <dcgettext@plt>
   1a93c:	mov	r1, r6
   1a940:	bl	11dbc <printf@plt>
   1a944:	ldrd	r2, [r4, #32]
   1a948:	cmp	r9, r3
   1a94c:	cmpeq	r8, r2
   1a950:	bcc	1a9b0 <__assert_fail@plt+0x8624>
   1a954:	ldr	r4, [pc, #132]	; 1a9e0 <__assert_fail@plt+0x8654>
   1a958:	b	1a8dc <__assert_fail@plt+0x8550>
   1a95c:	mov	r2, #5
   1a960:	ldr	r1, [pc, #132]	; 1a9ec <__assert_fail@plt+0x8660>
   1a964:	mov	r0, #0
   1a968:	bl	11ea0 <dcgettext@plt>
   1a96c:	mov	r7, #0
   1a970:	bl	417d0 <warn@@Base>
   1a974:	mov	r0, r7
   1a978:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a97c:	ldr	r1, [pc, #108]	; 1a9f0 <__assert_fail@plt+0x8664>
   1a980:	mov	r0, #0
   1a984:	bl	11ea0 <dcgettext@plt>
   1a988:	mov	r7, #0
   1a98c:	mov	r1, r6
   1a990:	bl	417d0 <warn@@Base>
   1a994:	mov	r0, r7
   1a998:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a99c:	mov	r2, #5
   1a9a0:	ldr	r1, [pc, #76]	; 1a9f4 <__assert_fail@plt+0x8668>
   1a9a4:	bl	11ea0 <dcgettext@plt>
   1a9a8:	bl	417d0 <warn@@Base>
   1a9ac:	b	1a8ec <__assert_fail@plt+0x8560>
   1a9b0:	mov	r2, #5
   1a9b4:	ldr	r1, [pc, #60]	; 1a9f8 <__assert_fail@plt+0x866c>
   1a9b8:	mov	r0, r7
   1a9bc:	bl	11ea0 <dcgettext@plt>
   1a9c0:	ldr	r1, [r4, #32]
   1a9c4:	sub	r1, r1, #4
   1a9c8:	sub	r1, r1, r5
   1a9cc:	bl	417d0 <warn@@Base>
   1a9d0:	b	1a8ec <__assert_fail@plt+0x8560>
   1a9d4:	andeq	sl, r4, r4, lsr #31
   1a9d8:	andeq	sl, r4, r4, asr #31
   1a9dc:	andeq	fp, r4, r8, rrx
   1a9e0:	andeq	r7, r6, r0, lsr r4
   1a9e4:	andeq	r9, r6, r0, ror #27
   1a9e8:	strdeq	sl, [r4], -r4
   1a9ec:	andeq	sl, r4, r8, ror pc
   1a9f0:	andeq	fp, r4, r4, asr #32
   1a9f4:	ldrdeq	sl, [r4], -r4
   1a9f8:	andeq	fp, r4, r8
   1a9fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa00:	mov	fp, r0
   1aa04:	add	r1, r0, #12
   1aa08:	sub	sp, sp, #36	; 0x24
   1aa0c:	add	r0, r0, #8
   1aa10:	ldr	r4, [fp, #16]
   1aa14:	bl	1a7b4 <__assert_fail@plt+0x8428>
   1aa18:	ldrd	r2, [fp, #32]
   1aa1c:	cmp	r3, #0
   1aa20:	cmpeq	r2, #23
   1aa24:	bls	1af54 <__assert_fail@plt+0x8bc8>
   1aa28:	mov	r1, #4
   1aa2c:	mov	r0, r4
   1aa30:	bl	41990 <warn@@Base+0x1c0>
   1aa34:	mov	r2, #5
   1aa38:	ldr	r1, [pc, #1932]	; 1b1cc <__assert_fail@plt+0x8e40>
   1aa3c:	mov	r5, r0
   1aa40:	mov	r0, #0
   1aa44:	bl	11ea0 <dcgettext@plt>
   1aa48:	mov	r1, r5
   1aa4c:	bl	11dbc <printf@plt>
   1aa50:	sub	r3, r5, #3
   1aa54:	cmp	r3, #5
   1aa58:	bhi	1afb4 <__assert_fail@plt+0x8c28>
   1aa5c:	cmp	r5, #3
   1aa60:	beq	1af60 <__assert_fail@plt+0x8bd4>
   1aa64:	cmp	r5, #4
   1aa68:	beq	1af74 <__assert_fail@plt+0x8be8>
   1aa6c:	cmp	r5, #5
   1aa70:	beq	1af88 <__assert_fail@plt+0x8bfc>
   1aa74:	cmp	r5, #6
   1aa78:	beq	1af9c <__assert_fail@plt+0x8c10>
   1aa7c:	mov	r1, #4
   1aa80:	add	r0, r4, r1
   1aa84:	bl	41990 <warn@@Base+0x1c0>
   1aa88:	mov	r1, #4
   1aa8c:	mov	r5, #0
   1aa90:	mov	r7, r0
   1aa94:	add	r0, r4, #8
   1aa98:	bl	41990 <warn@@Base+0x1c0>
   1aa9c:	mov	r1, #4
   1aaa0:	mov	r6, r0
   1aaa4:	add	r0, r4, #12
   1aaa8:	bl	41990 <warn@@Base+0x1c0>
   1aaac:	mov	r1, #4
   1aab0:	mov	r8, r0
   1aab4:	add	r0, r4, #16
   1aab8:	bl	41990 <warn@@Base+0x1c0>
   1aabc:	mov	r1, #4
   1aac0:	str	r0, [sp, #4]
   1aac4:	mov	r9, r0
   1aac8:	add	r0, r4, #20
   1aacc:	bl	41990 <warn@@Base+0x1c0>
   1aad0:	mov	ip, r0
   1aad4:	str	r0, [sp, #8]
   1aad8:	ldrd	r0, [fp, #32]
   1aadc:	cmp	r1, r5
   1aae0:	cmpeq	r0, r7
   1aae4:	bcc	1af30 <__assert_fail@plt+0x8ba4>
   1aae8:	cmp	r1, r5
   1aaec:	cmpeq	r0, r6
   1aaf0:	bcc	1af30 <__assert_fail@plt+0x8ba4>
   1aaf4:	cmp	r1, r5
   1aaf8:	cmpeq	r0, r8
   1aafc:	bcc	1af30 <__assert_fail@plt+0x8ba4>
   1ab00:	cmp	r1, r5
   1ab04:	cmpeq	r0, r9
   1ab08:	bcc	1af30 <__assert_fail@plt+0x8ba4>
   1ab0c:	cmp	r1, r5
   1ab10:	cmpeq	r0, ip
   1ab14:	bcc	1af30 <__assert_fail@plt+0x8ba4>
   1ab18:	cmp	r7, r6
   1ab1c:	bhi	1b020 <__assert_fail@plt+0x8c94>
   1ab20:	cmp	r6, r8
   1ab24:	bhi	1b044 <__assert_fail@plt+0x8cb8>
   1ab28:	ldr	r3, [sp, #4]
   1ab2c:	cmp	r8, r3
   1ab30:	bhi	1afd8 <__assert_fail@plt+0x8c4c>
   1ab34:	ldr	r3, [sp, #4]
   1ab38:	ldr	r2, [sp, #8]
   1ab3c:	cmp	r3, r2
   1ab40:	bhi	1b084 <__assert_fail@plt+0x8cf8>
   1ab44:	ldr	r3, [fp, #16]
   1ab48:	ldr	r2, [sp, #4]
   1ab4c:	add	r0, r3, r0
   1ab50:	add	r2, r4, r2
   1ab54:	cmp	r2, r0
   1ab58:	str	r2, [sp, #16]
   1ab5c:	bhi	1b068 <__assert_fail@plt+0x8cdc>
   1ab60:	sub	r3, r6, r7
   1ab64:	mov	r5, r3
   1ab68:	mov	r2, #5
   1ab6c:	ldr	r1, [pc, #1628]	; 1b1d0 <__assert_fail@plt+0x8e44>
   1ab70:	mov	r0, #0
   1ab74:	str	r3, [sp, #20]
   1ab78:	bl	11ea0 <dcgettext@plt>
   1ab7c:	lsr	r3, r5, #3
   1ab80:	mov	r5, r3
   1ab84:	mov	r9, r3
   1ab88:	bl	11dbc <printf@plt>
   1ab8c:	cmp	r5, #0
   1ab90:	addne	r7, r4, r7
   1ab94:	movne	r5, #0
   1ab98:	strne	r4, [sp, #12]
   1ab9c:	movne	sl, r9
   1aba0:	beq	1abfc <__assert_fail@plt+0x8870>
   1aba4:	mov	r0, r7
   1aba8:	mov	r1, #8
   1abac:	bl	41990 <warn@@Base+0x1c0>
   1abb0:	mov	r1, #8
   1abb4:	mov	r9, r0
   1abb8:	add	r0, r7, r1
   1abbc:	bl	41990 <warn@@Base+0x1c0>
   1abc0:	mov	r2, #5
   1abc4:	ldr	r1, [pc, #1544]	; 1b1d4 <__assert_fail@plt+0x8e48>
   1abc8:	add	r7, r7, #16
   1abcc:	mov	r4, r0
   1abd0:	mov	r0, #0
   1abd4:	bl	11ea0 <dcgettext@plt>
   1abd8:	add	r3, r9, r4
   1abdc:	lsr	r1, r5, #1
   1abe0:	sub	r3, r3, #1
   1abe4:	mov	r2, r9
   1abe8:	add	r5, r5, #2
   1abec:	bl	11dbc <printf@plt>
   1abf0:	cmp	sl, r5
   1abf4:	bhi	1aba4 <__assert_fail@plt+0x8818>
   1abf8:	ldr	r4, [sp, #12]
   1abfc:	sub	r9, r8, r6
   1ac00:	mov	r2, #5
   1ac04:	ldr	r1, [pc, #1484]	; 1b1d8 <__assert_fail@plt+0x8e4c>
   1ac08:	mov	r0, #0
   1ac0c:	bl	11ea0 <dcgettext@plt>
   1ac10:	lsr	r9, r9, #3
   1ac14:	bl	11dbc <printf@plt>
   1ac18:	cmp	r9, #0
   1ac1c:	addne	r6, r4, r6
   1ac20:	movne	r5, #0
   1ac24:	strne	r4, [sp, #12]
   1ac28:	strne	fp, [sp, #24]
   1ac2c:	beq	1acbc <__assert_fail@plt+0x8930>
   1ac30:	mov	r0, r6
   1ac34:	mov	r1, #8
   1ac38:	bl	41990 <warn@@Base+0x1c0>
   1ac3c:	mov	r1, #8
   1ac40:	mov	r4, r0
   1ac44:	add	r0, r6, r1
   1ac48:	bl	41990 <warn@@Base+0x1c0>
   1ac4c:	mov	r1, #8
   1ac50:	mov	r7, r0
   1ac54:	add	r0, r6, #16
   1ac58:	bl	41990 <warn@@Base+0x1c0>
   1ac5c:	mov	r2, #5
   1ac60:	add	r6, r6, #24
   1ac64:	mov	sl, r0
   1ac68:	mov	fp, r1
   1ac6c:	mov	r0, #0
   1ac70:	ldr	r1, [pc, #1380]	; 1b1dc <__assert_fail@plt+0x8e50>
   1ac74:	bl	11ea0 <dcgettext@plt>
   1ac78:	ldr	r3, [pc, #1376]	; 1b1e0 <__assert_fail@plt+0x8e54>
   1ac7c:	mov	r2, r4
   1ac80:	umull	r3, r1, r3, r5
   1ac84:	mov	r3, r7
   1ac88:	lsr	r1, r1, #1
   1ac8c:	bl	11dbc <printf@plt>
   1ac90:	mov	r0, sl
   1ac94:	mov	r1, fp
   1ac98:	mov	r2, #8
   1ac9c:	bl	18e4c <__assert_fail@plt+0x6ac0>
   1aca0:	add	r5, r5, #3
   1aca4:	mov	r0, #10
   1aca8:	bl	1211c <putchar@plt>
   1acac:	cmp	r9, r5
   1acb0:	bhi	1ac30 <__assert_fail@plt+0x88a4>
   1acb4:	ldr	r4, [sp, #12]
   1acb8:	ldr	fp, [sp, #24]
   1acbc:	mov	r2, #5
   1acc0:	ldr	r1, [pc, #1308]	; 1b1e4 <__assert_fail@plt+0x8e58>
   1acc4:	mov	r0, #0
   1acc8:	bl	11ea0 <dcgettext@plt>
   1accc:	ldr	r3, [sp, #4]
   1acd0:	sub	r3, r3, r8
   1acd4:	mov	r5, r3
   1acd8:	mov	r6, r3
   1acdc:	bl	11dbc <printf@plt>
   1ace0:	cmp	r5, #0
   1ace4:	beq	1ada0 <__assert_fail@plt+0x8a14>
   1ace8:	add	r5, r8, #8
   1acec:	sub	r2, r6, #20
   1acf0:	add	r5, r4, r5
   1acf4:	str	r4, [sp, #24]
   1acf8:	str	r2, [sp, #12]
   1acfc:	mov	sl, #0
   1ad00:	mov	r4, r6
   1ad04:	str	fp, [sp, #28]
   1ad08:	b	1ad1c <__assert_fail@plt+0x8990>
   1ad0c:	ldr	r3, [sp, #12]
   1ad10:	add	r5, r5, #20
   1ad14:	cmp	sl, r3
   1ad18:	bhi	1ad98 <__assert_fail@plt+0x8a0c>
   1ad1c:	mov	r1, #8
   1ad20:	sub	r0, r5, #8
   1ad24:	bl	41990 <warn@@Base+0x1c0>
   1ad28:	add	sl, sl, #20
   1ad2c:	mov	r8, r0
   1ad30:	mov	r9, r1
   1ad34:	mov	r0, r5
   1ad38:	mov	r1, #8
   1ad3c:	bl	41990 <warn@@Base+0x1c0>
   1ad40:	mov	r6, r0
   1ad44:	mov	r7, r1
   1ad48:	add	r0, r5, #8
   1ad4c:	mov	r1, #4
   1ad50:	bl	41990 <warn@@Base+0x1c0>
   1ad54:	mov	r1, r9
   1ad58:	mov	r2, #8
   1ad5c:	mov	fp, r0
   1ad60:	mov	r0, r8
   1ad64:	bl	18e4c <__assert_fail@plt+0x6ac0>
   1ad68:	mov	r0, r6
   1ad6c:	mov	r1, r7
   1ad70:	mov	r2, #8
   1ad74:	bl	18e4c <__assert_fail@plt+0x6ac0>
   1ad78:	mov	r2, #5
   1ad7c:	ldr	r1, [pc, #1124]	; 1b1e8 <__assert_fail@plt+0x8e5c>
   1ad80:	mov	r0, #0
   1ad84:	bl	11ea0 <dcgettext@plt>
   1ad88:	mov	r1, fp
   1ad8c:	bl	11dbc <printf@plt>
   1ad90:	cmp	r4, sl
   1ad94:	bhi	1ad0c <__assert_fail@plt+0x8980>
   1ad98:	ldr	r4, [sp, #24]
   1ad9c:	ldr	fp, [sp, #28]
   1ada0:	ldrd	r2, [sp, #4]
   1ada4:	ldr	r1, [pc, #1088]	; 1b1ec <__assert_fail@plt+0x8e60>
   1ada8:	mov	r0, #0
   1adac:	sub	r3, r3, r2
   1adb0:	mov	r2, #5
   1adb4:	lsr	sl, r3, #3
   1adb8:	bl	11ea0 <dcgettext@plt>
   1adbc:	bl	11dbc <printf@plt>
   1adc0:	cmp	sl, #0
   1adc4:	beq	1affc <__assert_fail@plt+0x8c70>
   1adc8:	ldr	r3, [sp, #8]
   1adcc:	ldr	r9, [sp, #16]
   1add0:	add	r8, r4, r3
   1add4:	ldr	r3, [sp, #20]
   1add8:	mov	r5, #0
   1addc:	lsr	r3, r3, #4
   1ade0:	str	r3, [sp, #24]
   1ade4:	b	1ae5c <__assert_fail@plt+0x8ad0>
   1ade8:	mov	r1, #4
   1adec:	bl	41990 <warn@@Base+0x1c0>
   1adf0:	add	r4, r4, #4
   1adf4:	lsl	r3, r0, #2
   1adf8:	cmp	r3, r0
   1adfc:	add	r3, r3, r4
   1ae00:	mov	r7, r0
   1ae04:	add	r3, r8, r3
   1ae08:	bcc	1ae24 <__assert_fail@plt+0x8a98>
   1ae0c:	ldr	r2, [fp, #16]
   1ae10:	ldr	r1, [fp, #32]
   1ae14:	add	r2, r2, r1
   1ae18:	cmp	r8, r3
   1ae1c:	cmpls	r3, r2
   1ae20:	bcc	1b0a8 <__assert_fail@plt+0x8d1c>
   1ae24:	mov	r1, r7
   1ae28:	ldr	r0, [pc, #960]	; 1b1f0 <__assert_fail@plt+0x8e64>
   1ae2c:	bl	11dbc <printf@plt>
   1ae30:	mov	r2, #5
   1ae34:	ldr	r1, [pc, #952]	; 1b1f4 <__assert_fail@plt+0x8e68>
   1ae38:	mov	r0, #0
   1ae3c:	bl	11ea0 <dcgettext@plt>
   1ae40:	mov	r2, r5
   1ae44:	mov	r1, r7
   1ae48:	bl	417d0 <warn@@Base>
   1ae4c:	add	r5, r5, #1
   1ae50:	cmp	sl, r5
   1ae54:	add	r9, r9, #8
   1ae58:	beq	1affc <__assert_fail@plt+0x8c70>
   1ae5c:	mov	r1, #4
   1ae60:	mov	r0, r9
   1ae64:	bl	41990 <warn@@Base+0x1c0>
   1ae68:	mov	r1, #4
   1ae6c:	mov	r6, r0
   1ae70:	add	r0, r9, r1
   1ae74:	bl	41990 <warn@@Base+0x1c0>
   1ae78:	orrs	r3, r6, r0
   1ae7c:	mov	r4, r0
   1ae80:	beq	1ae4c <__assert_fail@plt+0x8ac0>
   1ae84:	adds	r3, r8, r6
   1ae88:	bcs	1aea0 <__assert_fail@plt+0x8b14>
   1ae8c:	ldr	r1, [fp, #32]
   1ae90:	ldr	r2, [fp, #16]
   1ae94:	add	r2, r2, r1
   1ae98:	cmp	r3, r2
   1ae9c:	bcc	1b004 <__assert_fail@plt+0x8c78>
   1aea0:	mov	r2, #5
   1aea4:	ldr	r1, [pc, #844]	; 1b1f8 <__assert_fail@plt+0x8e6c>
   1aea8:	mov	r0, #0
   1aeac:	bl	11ea0 <dcgettext@plt>
   1aeb0:	mov	r2, r6
   1aeb4:	mov	r1, r5
   1aeb8:	bl	11dbc <printf@plt>
   1aebc:	mov	r2, #5
   1aec0:	ldr	r1, [pc, #820]	; 1b1fc <__assert_fail@plt+0x8e70>
   1aec4:	mov	r0, #0
   1aec8:	bl	11ea0 <dcgettext@plt>
   1aecc:	mov	r2, r5
   1aed0:	mov	r1, r6
   1aed4:	bl	417d0 <warn@@Base>
   1aed8:	adds	r0, r8, r4
   1aedc:	bcs	1aef8 <__assert_fail@plt+0x8b6c>
   1aee0:	ldr	r2, [fp, #32]
   1aee4:	ldr	r3, [fp, #16]
   1aee8:	sub	r2, r2, #3
   1aeec:	add	r3, r3, r2
   1aef0:	cmp	r0, r3
   1aef4:	bcc	1ade8 <__assert_fail@plt+0x8a5c>
   1aef8:	mov	r2, #5
   1aefc:	ldr	r1, [pc, #764]	; 1b200 <__assert_fail@plt+0x8e74>
   1af00:	mov	r0, #0
   1af04:	bl	11ea0 <dcgettext@plt>
   1af08:	mov	r1, r4
   1af0c:	bl	11dbc <printf@plt>
   1af10:	mov	r2, #5
   1af14:	ldr	r1, [pc, #744]	; 1b204 <__assert_fail@plt+0x8e78>
   1af18:	mov	r0, #0
   1af1c:	bl	11ea0 <dcgettext@plt>
   1af20:	mov	r2, r5
   1af24:	mov	r1, r4
   1af28:	bl	417d0 <warn@@Base>
   1af2c:	b	1ae4c <__assert_fail@plt+0x8ac0>
   1af30:	ldr	r1, [pc, #720]	; 1b208 <__assert_fail@plt+0x8e7c>
   1af34:	mov	r2, #5
   1af38:	mov	r0, #0
   1af3c:	bl	11ea0 <dcgettext@plt>
   1af40:	ldr	r1, [fp, #8]
   1af44:	bl	417d0 <warn@@Base>
   1af48:	mov	r0, #0
   1af4c:	add	sp, sp, #36	; 0x24
   1af50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af54:	mov	r2, #5
   1af58:	ldr	r1, [pc, #684]	; 1b20c <__assert_fail@plt+0x8e80>
   1af5c:	b	1af38 <__assert_fail@plt+0x8bac>
   1af60:	mov	r2, #5
   1af64:	ldr	r1, [pc, #676]	; 1b210 <__assert_fail@plt+0x8e84>
   1af68:	mov	r0, #0
   1af6c:	bl	11ea0 <dcgettext@plt>
   1af70:	bl	417d0 <warn@@Base>
   1af74:	mov	r2, #5
   1af78:	ldr	r1, [pc, #660]	; 1b214 <__assert_fail@plt+0x8e88>
   1af7c:	mov	r0, #0
   1af80:	bl	11ea0 <dcgettext@plt>
   1af84:	bl	417d0 <warn@@Base>
   1af88:	mov	r2, #5
   1af8c:	ldr	r1, [pc, #644]	; 1b218 <__assert_fail@plt+0x8e8c>
   1af90:	mov	r0, #0
   1af94:	bl	11ea0 <dcgettext@plt>
   1af98:	bl	417d0 <warn@@Base>
   1af9c:	mov	r2, #5
   1afa0:	ldr	r1, [pc, #628]	; 1b21c <__assert_fail@plt+0x8e90>
   1afa4:	mov	r0, #0
   1afa8:	bl	11ea0 <dcgettext@plt>
   1afac:	bl	417d0 <warn@@Base>
   1afb0:	b	1aa7c <__assert_fail@plt+0x86f0>
   1afb4:	mov	r2, #5
   1afb8:	ldr	r1, [pc, #608]	; 1b220 <__assert_fail@plt+0x8e94>
   1afbc:	mov	r0, #0
   1afc0:	bl	11ea0 <dcgettext@plt>
   1afc4:	mov	r1, r5
   1afc8:	bl	417d0 <warn@@Base>
   1afcc:	mov	r0, #0
   1afd0:	add	sp, sp, #36	; 0x24
   1afd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afd8:	mov	r2, #5
   1afdc:	ldr	r1, [pc, #576]	; 1b224 <__assert_fail@plt+0x8e98>
   1afe0:	mov	r0, r5
   1afe4:	bl	11ea0 <dcgettext@plt>
   1afe8:	mov	r2, r8
   1afec:	ldr	r1, [sp, #4]
   1aff0:	bl	417d0 <warn@@Base>
   1aff4:	mov	r0, r5
   1aff8:	b	1af4c <__assert_fail@plt+0x8bc0>
   1affc:	mov	r0, #1
   1b000:	b	1af4c <__assert_fail@plt+0x8bc0>
   1b004:	ldr	r2, [sp, #8]
   1b008:	ldr	r0, [pc, #536]	; 1b228 <__assert_fail@plt+0x8e9c>
   1b00c:	sub	r2, r1, r2
   1b010:	sub	r2, r2, r6
   1b014:	mov	r1, r5
   1b018:	bl	11dbc <printf@plt>
   1b01c:	b	1aed8 <__assert_fail@plt+0x8b4c>
   1b020:	mov	r2, #5
   1b024:	ldr	r1, [pc, #512]	; 1b22c <__assert_fail@plt+0x8ea0>
   1b028:	mov	r0, r5
   1b02c:	bl	11ea0 <dcgettext@plt>
   1b030:	mov	r2, r7
   1b034:	mov	r1, r6
   1b038:	bl	417d0 <warn@@Base>
   1b03c:	mov	r0, r5
   1b040:	b	1af4c <__assert_fail@plt+0x8bc0>
   1b044:	mov	r2, #5
   1b048:	ldr	r1, [pc, #480]	; 1b230 <__assert_fail@plt+0x8ea4>
   1b04c:	mov	r0, r5
   1b050:	bl	11ea0 <dcgettext@plt>
   1b054:	mov	r2, r6
   1b058:	mov	r1, r8
   1b05c:	bl	417d0 <warn@@Base>
   1b060:	mov	r0, r5
   1b064:	b	1af4c <__assert_fail@plt+0x8bc0>
   1b068:	mov	r2, #5
   1b06c:	ldr	r1, [pc, #448]	; 1b234 <__assert_fail@plt+0x8ea8>
   1b070:	mov	r0, #0
   1b074:	bl	11ea0 <dcgettext@plt>
   1b078:	bl	417d0 <warn@@Base>
   1b07c:	mov	r0, #0
   1b080:	b	1af4c <__assert_fail@plt+0x8bc0>
   1b084:	mov	r2, #5
   1b088:	ldr	r1, [pc, #424]	; 1b238 <__assert_fail@plt+0x8eac>
   1b08c:	mov	r0, r5
   1b090:	bl	11ea0 <dcgettext@plt>
   1b094:	ldr	r2, [sp, #4]
   1b098:	ldr	r1, [sp, #8]
   1b09c:	bl	417d0 <warn@@Base>
   1b0a0:	mov	r0, r5
   1b0a4:	b	1af4c <__assert_fail@plt+0x8bc0>
   1b0a8:	cmp	r7, #1
   1b0ac:	bhi	1b1c0 <__assert_fail@plt+0x8e34>
   1b0b0:	cmp	r7, #0
   1b0b4:	beq	1b180 <__assert_fail@plt+0x8df4>
   1b0b8:	cmp	r7, #1
   1b0bc:	movne	r3, #9
   1b0c0:	moveq	r3, #32
   1b0c4:	mov	r2, #0
   1b0c8:	str	r5, [sp, #20]
   1b0cc:	ldr	r5, [sp, #24]
   1b0d0:	add	r4, r8, r4
   1b0d4:	str	r9, [sp, #4]
   1b0d8:	str	r8, [sp, #16]
   1b0dc:	mov	r9, r2
   1b0e0:	mov	r8, r3
   1b0e4:	str	sl, [sp, #12]
   1b0e8:	mov	r1, #4
   1b0ec:	mov	r0, r4
   1b0f0:	bl	41990 <warn@@Base+0x1c0>
   1b0f4:	mov	r1, r8
   1b0f8:	mov	sl, r0
   1b0fc:	bic	ip, sl, #-16777216	; 0xff000000
   1b100:	cmp	r5, ip
   1b104:	mov	r2, ip
   1b108:	ldr	r0, [pc, #300]	; 1b23c <__assert_fail@plt+0x8eb0>
   1b10c:	subls	r2, ip, r5
   1b110:	lsr	r6, sl, #28
   1b114:	ldrls	r0, [pc, #292]	; 1b240 <__assert_fail@plt+0x8eb4>
   1b118:	lsr	sl, sl, #31
   1b11c:	bl	11dbc <printf@plt>
   1b120:	subs	r0, sl, #0
   1b124:	movne	r0, #0
   1b128:	ldr	r1, [pc, #276]	; 1b244 <__assert_fail@plt+0x8eb8>
   1b12c:	mov	r2, #5
   1b130:	ldrne	r1, [pc, #272]	; 1b248 <__assert_fail@plt+0x8ebc>
   1b134:	bl	11ea0 <dcgettext@plt>
   1b138:	and	r6, r6, #7
   1b13c:	ldr	r3, [pc, #264]	; 1b24c <__assert_fail@plt+0x8ec0>
   1b140:	mov	r2, #5
   1b144:	add	r6, r3, r6, lsl #2
   1b148:	ldr	r1, [r6, #1056]	; 0x420
   1b14c:	mov	sl, r0
   1b150:	mov	r0, #0
   1b154:	bl	11ea0 <dcgettext@plt>
   1b158:	mov	r1, sl
   1b15c:	mov	r2, r0
   1b160:	ldr	r0, [pc, #232]	; 1b250 <__assert_fail@plt+0x8ec4>
   1b164:	bl	11dbc <printf@plt>
   1b168:	cmp	r7, #1
   1b16c:	bne	1b18c <__assert_fail@plt+0x8e00>
   1b170:	ldr	r9, [sp, #4]
   1b174:	ldr	sl, [sp, #12]
   1b178:	ldr	r8, [sp, #16]
   1b17c:	ldr	r5, [sp, #20]
   1b180:	mov	r0, #10
   1b184:	bl	1211c <putchar@plt>
   1b188:	b	1ae4c <__assert_fail@plt+0x8ac0>
   1b18c:	add	r9, r9, #1
   1b190:	mov	r0, #10
   1b194:	bl	1211c <putchar@plt>
   1b198:	cmp	r7, r9
   1b19c:	add	r4, r4, #4
   1b1a0:	bhi	1b0e8 <__assert_fail@plt+0x8d5c>
   1b1a4:	cmp	r7, #1
   1b1a8:	ldr	r9, [sp, #4]
   1b1ac:	ldr	sl, [sp, #12]
   1b1b0:	ldr	r8, [sp, #16]
   1b1b4:	ldr	r5, [sp, #20]
   1b1b8:	bhi	1ae4c <__assert_fail@plt+0x8ac0>
   1b1bc:	b	1b180 <__assert_fail@plt+0x8df4>
   1b1c0:	mov	r0, #10
   1b1c4:	bl	1211c <putchar@plt>
   1b1c8:	b	1b0b8 <__assert_fail@plt+0x8d2c>
   1b1cc:	andeq	fp, r4, ip, lsr #1
   1b1d0:	andeq	fp, r4, r4, ror #5
   1b1d4:	strdeq	fp, [r4], -ip
   1b1d8:	strdeq	fp, [r4], -r0
   1b1dc:	andeq	fp, r4, r8, lsr #6
   1b1e0:	bge	feac5c94 <optarg@@GLIBC_2.4+0xfea5e85c>
   1b1e4:	andeq	fp, r4, r4, lsl r3
   1b1e8:	andeq	fp, r4, ip, asr #6
   1b1ec:	andeq	fp, r4, ip, lsr r3
   1b1f0:	andeq	fp, r4, ip, lsl r4
   1b1f4:	andeq	fp, r4, ip, lsr r4
   1b1f8:	andeq	fp, r4, r4, asr r3
   1b1fc:	andeq	fp, r4, r0, ror r3
   1b200:			; <UNDEFINED> instruction: 0x0004b3b8
   1b204:	ldrdeq	fp, [r4], -r8
   1b208:	andeq	fp, r4, r4, lsr #3
   1b20c:	andeq	fp, r4, r4, lsl #1
   1b210:	ldrdeq	fp, [r4], -r8
   1b214:	andeq	fp, r4, ip, lsl #2
   1b218:	andeq	fp, r4, r4, asr #2
   1b21c:	andeq	fp, r4, r4, ror r1
   1b220:	strheq	fp, [r4], -ip
   1b224:	andeq	fp, r4, ip, lsr #4
   1b228:	andeq	fp, r4, ip, lsr #7
   1b22c:	andeq	fp, r4, r8, asr #3
   1b230:	strdeq	fp, [r4], -r4
   1b234:			; <UNDEFINED> instruction: 0x0004b2b4
   1b238:	andeq	fp, r4, r0, ror r2
   1b23c:	andeq	fp, r4, ip, ror r4
   1b240:	andeq	fp, r4, r4, ror r4
   1b244:	andeq	fp, r4, ip, lsl #9
   1b248:	andeq	fp, r4, r4, lsl #9
   1b24c:	andeq	r9, r4, ip, ror r7
   1b250:	muleq	r4, r4, r4
   1b254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b258:	mov	r4, r0
   1b25c:	ldr	sl, [r0, #32]
   1b260:	sub	sp, sp, #12
   1b264:	cmp	sl, #0
   1b268:	beq	1b378 <__assert_fail@plt+0x8fec>
   1b26c:	ldrd	r2, [r4, #24]
   1b270:	add	r1, r0, #12
   1b274:	add	r0, r0, #8
   1b278:	ldr	r5, [r4, #16]
   1b27c:	strd	r2, [sp]
   1b280:	bl	1a7b4 <__assert_fail@plt+0x8428>
   1b284:	ldr	r9, [pc, #272]	; 1b39c <__assert_fail@plt+0x9010>
   1b288:	ldr	r6, [pc, #272]	; 1b3a0 <__assert_fail@plt+0x9014>
   1b28c:	ldr	r7, [pc, #272]	; 1b3a4 <__assert_fail@plt+0x9018>
   1b290:	cmp	sl, #16
   1b294:	ldr	r1, [sp]
   1b298:	ldr	r0, [pc, #264]	; 1b3a8 <__assert_fail@plt+0x901c>
   1b29c:	movcc	r4, sl
   1b2a0:	movcs	r4, #16
   1b2a4:	mov	fp, #0
   1b2a8:	bl	11dbc <printf@plt>
   1b2ac:	b	1b2d4 <__assert_fail@plt+0x8f48>
   1b2b0:	ldrb	r1, [r5, fp]
   1b2b4:	mov	r0, r7
   1b2b8:	bl	11dbc <printf@plt>
   1b2bc:	and	r2, fp, #3
   1b2c0:	cmp	r2, #3
   1b2c4:	add	fp, fp, #1
   1b2c8:	beq	1b2f4 <__assert_fail@plt+0x8f68>
   1b2cc:	cmp	fp, #16
   1b2d0:	beq	1b304 <__assert_fail@plt+0x8f78>
   1b2d4:	cmp	r4, fp
   1b2d8:	mov	r0, r6
   1b2dc:	bgt	1b2b0 <__assert_fail@plt+0x8f24>
   1b2e0:	bl	11dbc <printf@plt>
   1b2e4:	and	r2, fp, #3
   1b2e8:	cmp	r2, #3
   1b2ec:	add	fp, fp, #1
   1b2f0:	bne	1b2cc <__assert_fail@plt+0x8f40>
   1b2f4:	mov	r0, #32
   1b2f8:	bl	1211c <putchar@plt>
   1b2fc:	cmp	fp, #16
   1b300:	bne	1b2d4 <__assert_fail@plt+0x8f48>
   1b304:	sub	fp, r5, #1
   1b308:	ldrb	r1, [fp, #1]
   1b30c:	mov	r0, #46	; 0x2e
   1b310:	add	r8, fp, #1
   1b314:	sub	ip, r1, #32
   1b318:	cmp	ip, #95	; 0x5f
   1b31c:	movls	r0, r1
   1b320:	bl	1211c <putchar@plt>
   1b324:	add	r3, fp, #2
   1b328:	sub	r3, r3, r5
   1b32c:	cmp	r4, r3
   1b330:	mov	fp, r8
   1b334:	bgt	1b308 <__assert_fail@plt+0x8f7c>
   1b338:	ldrd	r2, [sp]
   1b33c:	ldr	r1, [r9]
   1b340:	mov	r0, #10
   1b344:	adds	r2, r2, r4
   1b348:	adc	r3, r3, r4, asr #31
   1b34c:	add	r5, r5, r4
   1b350:	strd	r2, [sp]
   1b354:	bl	12254 <putc@plt>
   1b358:	subs	sl, sl, r4
   1b35c:	bne	1b290 <__assert_fail@plt+0x8f04>
   1b360:	ldr	r1, [r9]
   1b364:	mov	r0, #10
   1b368:	bl	12254 <putc@plt>
   1b36c:	mov	r0, #1
   1b370:	add	sp, sp, #12
   1b374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b378:	mov	r2, #5
   1b37c:	ldr	r1, [pc, #40]	; 1b3ac <__assert_fail@plt+0x9020>
   1b380:	mov	r0, sl
   1b384:	bl	11ea0 <dcgettext@plt>
   1b388:	ldr	r1, [r4, #8]
   1b38c:	bl	11dbc <printf@plt>
   1b390:	mov	r0, sl
   1b394:	add	sp, sp, #12
   1b398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b39c:	andeq	r7, r6, r0, lsr r4
   1b3a0:	andeq	sl, r4, r8, ror #16
   1b3a4:	andeq	fp, r4, ip, lsr #9
   1b3a8:	andeq	fp, r4, r0, lsr #9
   1b3ac:	ldrdeq	sl, [r4], -ip
   1b3b0:	cmp	r0, r3
   1b3b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b3b8:	bcs	1b4c8 <__assert_fail@plt+0x913c>
   1b3bc:	mov	sl, r0
   1b3c0:	mov	r7, #0
   1b3c4:	ldrb	r8, [sl], #1
   1b3c8:	and	r6, r8, #127	; 0x7f
   1b3cc:	tst	r8, #128	; 0x80
   1b3d0:	uxtb	r6, r6
   1b3d4:	beq	1b4e4 <__assert_fail@plt+0x9158>
   1b3d8:	sub	r3, r3, r0
   1b3dc:	mov	lr, #7
   1b3e0:	rsb	r3, r3, r3, lsl #3
   1b3e4:	mov	r9, #1
   1b3e8:	cmp	lr, r3
   1b3ec:	sub	ip, lr, #32
   1b3f0:	rsb	r0, lr, #32
   1b3f4:	beq	1b4a8 <__assert_fail@plt+0x911c>
   1b3f8:	ldrb	r8, [sl], #1
   1b3fc:	add	r9, r9, #1
   1b400:	mov	r5, #0
   1b404:	and	r4, r8, #127	; 0x7f
   1b408:	tst	r8, #128	; 0x80
   1b40c:	uxtb	r4, r4
   1b410:	lsl	ip, r4, ip
   1b414:	orr	ip, ip, r4, lsr r0
   1b418:	orr	r4, r6, r4, lsl lr
   1b41c:	orr	ip, ip, r7
   1b420:	mov	r6, r4
   1b424:	mov	r7, ip
   1b428:	add	lr, lr, #7
   1b42c:	beq	1b4b8 <__assert_fail@plt+0x912c>
   1b430:	cmp	r9, #10
   1b434:	bne	1b3e8 <__assert_fail@plt+0x905c>
   1b438:	cmp	r1, #0
   1b43c:	beq	1b49c <__assert_fail@plt+0x9110>
   1b440:	cmp	lr, #63	; 0x3f
   1b444:	movhi	r3, #0
   1b448:	movls	r3, #1
   1b44c:	str	r9, [r1]
   1b450:	cmp	r2, #0
   1b454:	movne	r2, r3
   1b458:	moveq	r2, #0
   1b45c:	cmp	r2, #0
   1b460:	beq	1b49c <__assert_fail@plt+0x9110>
   1b464:	tst	r8, #64	; 0x40
   1b468:	beq	1b49c <__assert_fail@plt+0x9110>
   1b46c:	mov	r1, #1
   1b470:	sub	r0, lr, #32
   1b474:	lsl	r2, r1, lr
   1b478:	lsl	r3, r1, r0
   1b47c:	rsb	r0, lr, #32
   1b480:	orr	r3, r3, r1, lsr r0
   1b484:	rsbs	r0, r2, #0
   1b488:	rsc	r1, r3, #0
   1b48c:	orr	r2, r0, r6
   1b490:	orr	r3, r1, r7
   1b494:	mov	r6, r2
   1b498:	mov	r7, r3
   1b49c:	mov	r0, r6
   1b4a0:	mov	r1, r7
   1b4a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b4a8:	mov	r3, #1
   1b4ac:	cmp	r1, #0
   1b4b0:	bne	1b44c <__assert_fail@plt+0x90c0>
   1b4b4:	b	1b450 <__assert_fail@plt+0x90c4>
   1b4b8:	cmp	lr, #63	; 0x3f
   1b4bc:	movhi	r3, #0
   1b4c0:	movls	r3, #1
   1b4c4:	b	1b4ac <__assert_fail@plt+0x9120>
   1b4c8:	mov	r8, #0
   1b4cc:	mov	lr, r8
   1b4d0:	mov	r9, r8
   1b4d4:	mov	r3, #1
   1b4d8:	mov	r6, #0
   1b4dc:	mov	r7, #0
   1b4e0:	b	1b4ac <__assert_fail@plt+0x9120>
   1b4e4:	mov	r3, #1
   1b4e8:	mov	r9, r3
   1b4ec:	mov	lr, #7
   1b4f0:	b	1b4ac <__assert_fail@plt+0x9120>
   1b4f4:	cmp	r1, r0
   1b4f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b4fc:	sub	sp, sp, #8
   1b500:	bls	1b678 <__assert_fail@plt+0x92ec>
   1b504:	ldr	r8, [pc, #412]	; 1b6a8 <__assert_fail@plt+0x931c>
   1b508:	mov	r4, r0
   1b50c:	mov	r5, r1
   1b510:	mov	r7, #0
   1b514:	mov	r3, r5
   1b518:	mov	r2, #0
   1b51c:	add	r1, sp, #4
   1b520:	mov	r0, r4
   1b524:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1b528:	ldr	r6, [sp, #4]
   1b52c:	add	r6, r4, r6
   1b530:	cmp	r5, r6
   1b534:	mov	r9, r0
   1b538:	beq	1b68c <__assert_fail@plt+0x9300>
   1b53c:	cmp	r0, #0
   1b540:	beq	1b690 <__assert_fail@plt+0x9304>
   1b544:	mov	r3, r5
   1b548:	mov	r2, #0
   1b54c:	add	r1, sp, #4
   1b550:	mov	r0, r6
   1b554:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1b558:	ldr	r3, [sp, #4]
   1b55c:	add	r4, r6, r3
   1b560:	cmp	r5, r4
   1b564:	mov	sl, r0
   1b568:	beq	1b68c <__assert_fail@plt+0x9300>
   1b56c:	mov	r0, #24
   1b570:	ldrb	r6, [r6, r3]
   1b574:	bl	11ffc <malloc@plt>
   1b578:	add	r4, r4, #1
   1b57c:	cmp	r0, #0
   1b580:	beq	1b5f4 <__assert_fail@plt+0x9268>
   1b584:	ldr	r3, [r8, #1108]	; 0x454
   1b588:	str	r9, [r0]
   1b58c:	cmp	r3, #0
   1b590:	str	sl, [r0, #4]
   1b594:	ldrne	r3, [r8, #1112]	; 0x458
   1b598:	strd	r6, [r0, #8]
   1b59c:	str	r7, [r0, #16]
   1b5a0:	str	r7, [r0, #20]
   1b5a4:	streq	r0, [r8, #1108]	; 0x454
   1b5a8:	strne	r0, [r3, #20]
   1b5ac:	str	r0, [r8, #1112]	; 0x458
   1b5b0:	b	1b5f4 <__assert_fail@plt+0x9268>
   1b5b4:	mov	r0, #16
   1b5b8:	bl	11ffc <malloc@plt>
   1b5bc:	cmp	r0, #0
   1b5c0:	beq	1b5ec <__assert_fail@plt+0x9260>
   1b5c4:	ldr	r3, [r8, #1112]	; 0x458
   1b5c8:	stm	r0, {r6, r9}
   1b5cc:	ldr	r2, [r3, #12]
   1b5d0:	str	sl, [r0, #8]
   1b5d4:	cmp	r2, #0
   1b5d8:	str	r7, [r0, #12]
   1b5dc:	ldrne	r2, [r3, #16]
   1b5e0:	streq	r0, [r3, #12]
   1b5e4:	strne	r0, [r2, #12]
   1b5e8:	str	r0, [r3, #16]
   1b5ec:	cmp	r6, #0
   1b5f0:	beq	1b69c <__assert_fail@plt+0x9310>
   1b5f4:	mov	r3, r5
   1b5f8:	mov	r0, r4
   1b5fc:	mov	r2, #0
   1b600:	add	r1, sp, #4
   1b604:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1b608:	ldr	r3, [sp, #4]
   1b60c:	add	r4, r4, r3
   1b610:	cmp	r5, r4
   1b614:	mov	r6, r0
   1b618:	beq	1b678 <__assert_fail@plt+0x92ec>
   1b61c:	mov	r3, r5
   1b620:	mov	r0, r4
   1b624:	mov	r2, #0
   1b628:	add	r1, sp, #4
   1b62c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1b630:	ldr	r3, [sp, #4]
   1b634:	add	r4, r4, r3
   1b638:	cmp	r5, r4
   1b63c:	mov	r9, r0
   1b640:	beq	1b678 <__assert_fail@plt+0x92ec>
   1b644:	cmp	r0, #33	; 0x21
   1b648:	mvnne	sl, #0
   1b64c:	bne	1b5b4 <__assert_fail@plt+0x9228>
   1b650:	mov	r3, r5
   1b654:	mov	r0, r4
   1b658:	mov	r2, #1
   1b65c:	add	r1, sp, #4
   1b660:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1b664:	ldr	r3, [sp, #4]
   1b668:	add	r4, r4, r3
   1b66c:	cmp	r5, r4
   1b670:	mov	sl, r0
   1b674:	bne	1b5b4 <__assert_fail@plt+0x9228>
   1b678:	mov	r2, #5
   1b67c:	ldr	r1, [pc, #40]	; 1b6ac <__assert_fail@plt+0x9320>
   1b680:	mov	r0, #0
   1b684:	bl	11ea0 <dcgettext@plt>
   1b688:	bl	412ac <error@@Base>
   1b68c:	mov	r6, #0
   1b690:	mov	r0, r6
   1b694:	add	sp, sp, #8
   1b698:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b69c:	cmp	r5, r4
   1b6a0:	bhi	1b514 <__assert_fail@plt+0x9188>
   1b6a4:	b	1b678 <__assert_fail@plt+0x92ec>
   1b6a8:	andeq	r7, r6, r0, lsr r5
   1b6ac:			; <UNDEFINED> instruction: 0x0004b4b4
   1b6b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6b4:	sub	sp, sp, #20
   1b6b8:	ldr	ip, [r0, #16]
   1b6bc:	ldr	r3, [r0, #32]
   1b6c0:	str	r0, [sp, #12]
   1b6c4:	add	r1, r0, #12
   1b6c8:	add	r3, ip, r3
   1b6cc:	add	r0, r0, #8
   1b6d0:	str	ip, [sp, #4]
   1b6d4:	str	r3, [sp, #8]
   1b6d8:	bl	1a7b4 <__assert_fail@plt+0x8428>
   1b6dc:	ldr	fp, [pc, #388]	; 1b868 <__assert_fail@plt+0x94dc>
   1b6e0:	ldr	r5, [pc, #388]	; 1b86c <__assert_fail@plt+0x94e0>
   1b6e4:	ldr	r4, [pc, #388]	; 1b870 <__assert_fail@plt+0x94e4>
   1b6e8:	bl	18e80 <__assert_fail@plt+0x6af4>
   1b6ec:	ldr	r6, [fp, #1108]	; 0x454
   1b6f0:	cmp	r6, #0
   1b6f4:	bne	1b73c <__assert_fail@plt+0x93b0>
   1b6f8:	ldr	r8, [sp, #4]
   1b6fc:	ldr	r1, [sp, #8]
   1b700:	mov	r0, r8
   1b704:	bl	1b4f4 <__assert_fail@plt+0x9168>
   1b708:	ldr	r3, [fp, #1108]	; 0x454
   1b70c:	cmp	r3, #0
   1b710:	mov	r7, r0
   1b714:	streq	r0, [sp, #4]
   1b718:	bne	1b834 <__assert_fail@plt+0x94a8>
   1b71c:	ldr	r3, [sp, #4]
   1b720:	cmp	r3, #0
   1b724:	bne	1b6e8 <__assert_fail@plt+0x935c>
   1b728:	mov	r0, #10
   1b72c:	bl	1211c <putchar@plt>
   1b730:	mov	r0, #1
   1b734:	add	sp, sp, #20
   1b738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b73c:	mov	r2, #5
   1b740:	ldr	r1, [pc, #300]	; 1b874 <__assert_fail@plt+0x94e8>
   1b744:	mov	r0, #0
   1b748:	bl	11ea0 <dcgettext@plt>
   1b74c:	ldr	r3, [sp, #12]
   1b750:	ldr	r1, [r3, #16]
   1b754:	ldr	r3, [sp, #4]
   1b758:	sub	r1, r3, r1
   1b75c:	bl	11dbc <printf@plt>
   1b760:	ldr	r6, [fp, #1108]	; 0x454
   1b764:	cmp	r6, #0
   1b768:	beq	1b728 <__assert_fail@plt+0x939c>
   1b76c:	mov	r3, #0
   1b770:	str	r3, [sp, #4]
   1b774:	ldr	sl, [pc, #252]	; 1b878 <__assert_fail@plt+0x94ec>
   1b778:	ldr	r9, [pc, #252]	; 1b87c <__assert_fail@plt+0x94f0>
   1b77c:	ldr	r0, [r6, #4]
   1b780:	ldr	r7, [r6]
   1b784:	bl	1a2c4 <__assert_fail@plt+0x7f38>
   1b788:	mov	r2, #5
   1b78c:	mov	r8, r0
   1b790:	ldr	r0, [r6, #8]
   1b794:	cmp	r0, #0
   1b798:	movne	r0, #0
   1b79c:	ldrne	r1, [pc, #220]	; 1b880 <__assert_fail@plt+0x94f4>
   1b7a0:	ldreq	r1, [pc, #220]	; 1b884 <__assert_fail@plt+0x94f8>
   1b7a4:	bl	11ea0 <dcgettext@plt>
   1b7a8:	mov	r1, r7
   1b7ac:	mov	r2, r8
   1b7b0:	mov	r3, r0
   1b7b4:	mov	r0, sl
   1b7b8:	bl	11dbc <printf@plt>
   1b7bc:	ldr	r7, [r6, #12]
   1b7c0:	cmp	r7, #0
   1b7c4:	bne	1b7e4 <__assert_fail@plt+0x9458>
   1b7c8:	b	1b824 <__assert_fail@plt+0x9498>
   1b7cc:	ldr	r1, [r5]
   1b7d0:	mov	r0, #10
   1b7d4:	bl	12254 <putc@plt>
   1b7d8:	ldr	r7, [r7, #12]
   1b7dc:	cmp	r7, #0
   1b7e0:	beq	1b824 <__assert_fail@plt+0x9498>
   1b7e4:	ldr	r0, [r7]
   1b7e8:	bl	1a330 <__assert_fail@plt+0x7fa4>
   1b7ec:	mov	r8, r0
   1b7f0:	ldr	r0, [r7, #4]
   1b7f4:	bl	1a3b4 <__assert_fail@plt+0x8028>
   1b7f8:	mov	r1, r8
   1b7fc:	mov	r2, r0
   1b800:	mov	r0, r4
   1b804:	bl	11dbc <printf@plt>
   1b808:	ldr	r3, [r7, #4]
   1b80c:	cmp	r3, #33	; 0x21
   1b810:	bne	1b7cc <__assert_fail@plt+0x9440>
   1b814:	ldr	r1, [r7, #8]
   1b818:	mov	r0, r9
   1b81c:	bl	11dbc <printf@plt>
   1b820:	b	1b7cc <__assert_fail@plt+0x9440>
   1b824:	ldr	r6, [r6, #20]
   1b828:	cmp	r6, #0
   1b82c:	bne	1b77c <__assert_fail@plt+0x93f0>
   1b830:	b	1b71c <__assert_fail@plt+0x9390>
   1b834:	mov	r0, r6
   1b838:	mov	r2, #5
   1b83c:	ldr	r1, [pc, #48]	; 1b874 <__assert_fail@plt+0x94e8>
   1b840:	bl	11ea0 <dcgettext@plt>
   1b844:	ldr	r3, [sp, #12]
   1b848:	ldr	r1, [r3, #16]
   1b84c:	sub	r1, r8, r1
   1b850:	bl	11dbc <printf@plt>
   1b854:	ldr	r6, [fp, #1108]	; 0x454
   1b858:	str	r7, [sp, #4]
   1b85c:	cmp	r6, #0
   1b860:	bne	1b774 <__assert_fail@plt+0x93e8>
   1b864:	b	1b71c <__assert_fail@plt+0x9390>
   1b868:	andeq	r7, r6, r0, lsr r5
   1b86c:	andeq	r7, r6, r0, lsr r4
   1b870:	andeq	fp, r4, ip, lsr #10
   1b874:	andeq	fp, r4, r0, ror #9
   1b878:	andeq	fp, r4, r4, lsl r5
   1b87c:	andeq	fp, r4, r0, ror r9
   1b880:	strdeq	fp, [r4], -r8
   1b884:	andeq	fp, r4, r8, lsl #10
   1b888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b88c:	sub	sp, sp, #60	; 0x3c
   1b890:	ldr	r5, [pc, #4020]	; 1c84c <__assert_fail@plt+0xa4c0>
   1b894:	ldr	r4, [sp, #96]	; 0x60
   1b898:	ldr	sl, [sp, #104]	; 0x68
   1b89c:	strd	r2, [sp, #32]
   1b8a0:	mov	r7, r1
   1b8a4:	ldr	r3, [sp, #108]	; 0x6c
   1b8a8:	add	r4, r0, r4
   1b8ac:	mov	r6, #0
   1b8b0:	str	r3, [sp, #28]
   1b8b4:	cmp	r4, r0
   1b8b8:	bls	1bce4 <__assert_fail@plt+0x9958>
   1b8bc:	add	ip, r0, #1
   1b8c0:	str	ip, [sp, #44]	; 0x2c
   1b8c4:	ldrb	fp, [r0]
   1b8c8:	sub	r3, fp, #3
   1b8cc:	cmp	r3, #249	; 0xf9
   1b8d0:	ldrls	pc, [pc, r3, lsl #2]
   1b8d4:	b	1bcc0 <__assert_fail@plt+0x9934>
   1b8d8:	andeq	fp, r1, r4, asr sp
   1b8dc:	andeq	fp, r1, r0, asr #25
   1b8e0:	andeq	fp, r1, r0, asr #25
   1b8e4:	andeq	fp, r1, ip, lsr #27
   1b8e8:	andeq	fp, r1, r0, asr #25
   1b8ec:			; <UNDEFINED> instruction: 0x0001bdbc
   1b8f0:	andeq	fp, r1, ip, ror #27
   1b8f4:	andeq	fp, r1, r0, lsl pc
   1b8f8:	andeq	fp, r1, r0, asr #30
   1b8fc:	andeq	fp, r1, r8, lsl #31
   1b900:			; <UNDEFINED> instruction: 0x0001bfb8
   1b904:	andeq	fp, r1, r4, lsr lr
   1b908:	andeq	ip, r1, r0, asr r0
   1b90c:	andeq	fp, r1, ip, lsl #29
   1b910:	ldrdeq	fp, [r1], -r8
   1b914:	andeq	ip, r1, r0
   1b918:	andeq	ip, r1, r8, asr #1
   1b91c:	andeq	ip, r1, r0, lsl r0
   1b920:	andeq	ip, r1, r0, lsr #32
   1b924:	ldrdeq	ip, [r1], -r8
   1b928:	andeq	ip, r1, r8, ror #1
   1b92c:	strdeq	ip, [r1], -r8
   1b930:	andeq	ip, r1, r8, lsl #2
   1b934:	andeq	ip, r1, r8, lsl r1
   1b938:	andeq	ip, r1, r8, lsr #2
   1b93c:	andeq	ip, r1, r8, lsr r1
   1b940:	andeq	ip, r1, r8, asr #2
   1b944:	andeq	ip, r1, r8, asr r1
   1b948:	andeq	ip, r1, r8, ror #2
   1b94c:	andeq	ip, r1, r8, ror r1
   1b950:	andeq	ip, r1, r8, lsl #3
   1b954:	muleq	r1, r8, r1
   1b958:	andeq	ip, r1, r8, lsr #3
   1b95c:	andeq	ip, r1, r0, ror #3
   1b960:	strdeq	ip, [r1], -r0
   1b964:	andeq	ip, r1, r0, lsl #4
   1b968:	andeq	ip, r1, r0, lsl r2
   1b96c:	andeq	ip, r1, r0, lsr #4
   1b970:	andeq	ip, r1, r8, ror #4
   1b974:	andeq	ip, r1, r8, ror r2
   1b978:	andeq	ip, r1, r8, lsl #5
   1b97c:	muleq	r1, r8, r2
   1b980:	andeq	ip, r1, r8, lsr #5
   1b984:			; <UNDEFINED> instruction: 0x0001c2b8
   1b988:	andeq	ip, r1, r8, asr #5
   1b98c:	andeq	ip, r1, r0, lsl r3
   1b990:	andeq	ip, r1, r0, lsl r3
   1b994:	andeq	ip, r1, r0, lsl r3
   1b998:	andeq	ip, r1, r0, lsl r3
   1b99c:	andeq	ip, r1, r0, lsl r3
   1b9a0:	andeq	ip, r1, r0, lsl r3
   1b9a4:	andeq	ip, r1, r0, lsl r3
   1b9a8:	andeq	ip, r1, r0, lsl r3
   1b9ac:	andeq	ip, r1, r0, lsl r3
   1b9b0:	andeq	ip, r1, r0, lsl r3
   1b9b4:	andeq	ip, r1, r0, lsl r3
   1b9b8:	andeq	ip, r1, r0, lsl r3
   1b9bc:	andeq	ip, r1, r0, lsl r3
   1b9c0:	andeq	ip, r1, r0, lsl r3
   1b9c4:	andeq	ip, r1, r0, lsl r3
   1b9c8:	andeq	ip, r1, r0, lsl r3
   1b9cc:	andeq	ip, r1, r0, lsl r3
   1b9d0:	andeq	ip, r1, r0, lsl r3
   1b9d4:	andeq	ip, r1, r0, lsl r3
   1b9d8:	andeq	ip, r1, r0, lsl r3
   1b9dc:	andeq	ip, r1, r0, lsl r3
   1b9e0:	andeq	ip, r1, r0, lsl r3
   1b9e4:	andeq	ip, r1, r0, lsl r3
   1b9e8:	andeq	ip, r1, r0, lsl r3
   1b9ec:	andeq	ip, r1, r0, lsl r3
   1b9f0:	andeq	ip, r1, r0, lsl r3
   1b9f4:	andeq	ip, r1, r0, lsl r3
   1b9f8:	andeq	ip, r1, r0, lsl r3
   1b9fc:	andeq	ip, r1, r0, lsl r3
   1ba00:	andeq	ip, r1, r0, lsl r3
   1ba04:	andeq	ip, r1, r0, lsl r3
   1ba08:	andeq	ip, r1, r0, lsl r3
   1ba0c:	andeq	ip, r1, r4, lsr #6
   1ba10:	andeq	ip, r1, r4, lsr #6
   1ba14:	andeq	ip, r1, r4, lsr #6
   1ba18:	andeq	ip, r1, r4, lsr #6
   1ba1c:	andeq	ip, r1, r4, lsr #6
   1ba20:	andeq	ip, r1, r4, lsr #6
   1ba24:	andeq	ip, r1, r4, lsr #6
   1ba28:	andeq	ip, r1, r4, lsr #6
   1ba2c:	andeq	ip, r1, r4, lsr #6
   1ba30:	andeq	ip, r1, r4, lsr #6
   1ba34:	andeq	ip, r1, r4, lsr #6
   1ba38:	andeq	ip, r1, r4, lsr #6
   1ba3c:	andeq	ip, r1, r4, lsr #6
   1ba40:	andeq	ip, r1, r4, lsr #6
   1ba44:	andeq	ip, r1, r4, lsr #6
   1ba48:	andeq	ip, r1, r4, lsr #6
   1ba4c:	andeq	ip, r1, r4, lsr #6
   1ba50:	andeq	ip, r1, r4, lsr #6
   1ba54:	andeq	ip, r1, r4, lsr #6
   1ba58:	andeq	ip, r1, r4, lsr #6
   1ba5c:	andeq	ip, r1, r4, lsr #6
   1ba60:	andeq	ip, r1, r4, lsr #6
   1ba64:	andeq	ip, r1, r4, lsr #6
   1ba68:	andeq	ip, r1, r4, lsr #6
   1ba6c:	andeq	ip, r1, r4, lsr #6
   1ba70:	andeq	ip, r1, r4, lsr #6
   1ba74:	andeq	ip, r1, r4, lsr #6
   1ba78:	andeq	ip, r1, r4, lsr #6
   1ba7c:	andeq	ip, r1, r4, lsr #6
   1ba80:	andeq	ip, r1, r4, lsr #6
   1ba84:	andeq	ip, r1, r4, lsr #6
   1ba88:	andeq	ip, r1, r4, lsr #6
   1ba8c:	andeq	ip, r1, ip, asr #6
   1ba90:	andeq	ip, r1, ip, asr #6
   1ba94:	andeq	ip, r1, ip, asr #6
   1ba98:	andeq	ip, r1, ip, asr #6
   1ba9c:	andeq	ip, r1, ip, asr #6
   1baa0:	andeq	ip, r1, ip, asr #6
   1baa4:	andeq	ip, r1, ip, asr #6
   1baa8:	andeq	ip, r1, ip, asr #6
   1baac:	andeq	ip, r1, ip, asr #6
   1bab0:	andeq	ip, r1, ip, asr #6
   1bab4:	andeq	ip, r1, ip, asr #6
   1bab8:	andeq	ip, r1, ip, asr #6
   1babc:	andeq	ip, r1, ip, asr #6
   1bac0:	andeq	ip, r1, ip, asr #6
   1bac4:	andeq	ip, r1, ip, asr #6
   1bac8:	andeq	ip, r1, ip, asr #6
   1bacc:	andeq	ip, r1, ip, asr #6
   1bad0:	andeq	ip, r1, ip, asr #6
   1bad4:	andeq	ip, r1, ip, asr #6
   1bad8:	andeq	ip, r1, ip, asr #6
   1badc:	andeq	ip, r1, ip, asr #6
   1bae0:	andeq	ip, r1, ip, asr #6
   1bae4:	andeq	ip, r1, ip, asr #6
   1bae8:	andeq	ip, r1, ip, asr #6
   1baec:	andeq	ip, r1, ip, asr #6
   1baf0:	andeq	ip, r1, ip, asr #6
   1baf4:	andeq	ip, r1, ip, asr #6
   1baf8:	andeq	ip, r1, ip, asr #6
   1bafc:	andeq	ip, r1, ip, asr #6
   1bb00:	andeq	ip, r1, ip, asr #6
   1bb04:	andeq	ip, r1, ip, asr #6
   1bb08:	andeq	ip, r1, ip, asr #6
   1bb0c:			; <UNDEFINED> instruction: 0x0001c3b4
   1bb10:	andeq	ip, r1, ip, lsl r4
   1bb14:	andeq	ip, r1, r8, asr r4
   1bb18:	andeq	ip, r1, r8, ror #9
   1bb1c:	andeq	ip, r1, r0, lsr #10
   1bb20:	andeq	ip, r1, r0, asr r5
   1bb24:	andeq	ip, r1, r0, lsl #11
   1bb28:	muleq	r1, r0, r5
   1bb2c:	andeq	ip, r1, r0, lsr #11
   1bb30:	strdeq	ip, [r1], -r0
   1bb34:	andeq	ip, r1, r0, asr #12
   1bb38:	andeq	ip, r1, ip, ror #15
   1bb3c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bb40:	andeq	ip, r1, r0, asr #28
   1bb44:	andeq	ip, r1, ip, ror #29
   1bb48:	andeq	ip, r1, r4, lsr #24
   1bb4c:	andeq	ip, r1, r4, lsr ip
   1bb50:	andeq	fp, r1, r0, asr #25
   1bb54:	andeq	fp, r1, r0, asr #25
   1bb58:	andeq	ip, r1, ip, ror #25
   1bb5c:	muleq	r1, ip, sp
   1bb60:	andeq	ip, r1, r0, asr #13
   1bb64:	andeq	ip, r1, r8, lsl #15
   1bb68:	andeq	fp, r1, r0, asr #25
   1bb6c:	andeq	ip, r1, ip, asr fp
   1bb70:	ldrdeq	ip, [r1], -r8
   1bb74:	andeq	fp, r1, r0, asr #25
   1bb78:	andeq	fp, r1, r0, asr #25
   1bb7c:	andeq	fp, r1, r0, asr #25
   1bb80:	andeq	fp, r1, r0, asr #25
   1bb84:	andeq	fp, r1, r0, asr #25
   1bb88:	andeq	fp, r1, r0, asr #25
   1bb8c:	andeq	fp, r1, r0, asr #25
   1bb90:	andeq	fp, r1, r0, asr #25
   1bb94:	andeq	fp, r1, r0, asr #25
   1bb98:	andeq	fp, r1, r0, asr #25
   1bb9c:	andeq	fp, r1, r0, asr #25
   1bba0:	andeq	fp, r1, r0, asr #25
   1bba4:	andeq	fp, r1, r0, asr #25
   1bba8:	andeq	fp, r1, r0, asr #25
   1bbac:	andeq	fp, r1, r0, asr #25
   1bbb0:	andeq	fp, r1, r0, asr #25
   1bbb4:	andeq	fp, r1, r0, asr #25
   1bbb8:	andeq	fp, r1, r0, asr #25
   1bbbc:	andeq	fp, r1, r0, asr #25
   1bbc0:	andeq	fp, r1, r0, asr #25
   1bbc4:	andeq	fp, r1, r0, asr #25
   1bbc8:	andeq	fp, r1, r0, asr #25
   1bbcc:	andeq	fp, r1, r0, asr #25
   1bbd0:	andeq	fp, r1, r0, asr #25
   1bbd4:	andeq	fp, r1, r0, asr #25
   1bbd8:	andeq	fp, r1, r0, asr #25
   1bbdc:	andeq	fp, r1, r0, asr #25
   1bbe0:	andeq	fp, r1, r0, asr #25
   1bbe4:	andeq	fp, r1, r0, asr #25
   1bbe8:	andeq	fp, r1, r0, asr #25
   1bbec:	andeq	fp, r1, r0, asr #25
   1bbf0:	andeq	fp, r1, r0, asr #25
   1bbf4:	andeq	fp, r1, r0, asr #25
   1bbf8:	andeq	fp, r1, r0, asr #25
   1bbfc:	andeq	fp, r1, r0, asr #25
   1bc00:	andeq	fp, r1, r0, asr #25
   1bc04:	andeq	fp, r1, r0, asr #25
   1bc08:	andeq	fp, r1, r0, asr #25
   1bc0c:	andeq	fp, r1, r0, asr #25
   1bc10:	andeq	fp, r1, r0, asr #25
   1bc14:	andeq	fp, r1, r0, asr #25
   1bc18:	andeq	fp, r1, r0, asr #25
   1bc1c:	andeq	fp, r1, r0, asr #25
   1bc20:	andeq	fp, r1, r0, asr #25
   1bc24:	andeq	fp, r1, r0, asr #25
   1bc28:	andeq	fp, r1, r0, asr #25
   1bc2c:	andeq	fp, r1, r0, asr #25
   1bc30:	andeq	fp, r1, r0, asr #25
   1bc34:	andeq	fp, r1, r0, asr #25
   1bc38:	andeq	fp, r1, r0, asr #25
   1bc3c:	andeq	fp, r1, r0, asr #25
   1bc40:	andeq	fp, r1, r0, asr #25
   1bc44:	andeq	fp, r1, r0, asr #25
   1bc48:	andeq	fp, r1, r0, asr #25
   1bc4c:	andeq	ip, r1, r0, lsl fp
   1bc50:	andeq	ip, r1, ip, lsr #22
   1bc54:	andeq	ip, r1, ip, lsr fp
   1bc58:	andeq	ip, r1, ip, asr #22
   1bc5c:	andeq	ip, r1, ip, lsl #16
   1bc60:	andeq	ip, r1, ip, lsl r8
   1bc64:	andeq	ip, r1, ip, lsr #16
   1bc68:	andeq	fp, r1, r0, asr #25
   1bc6c:	andeq	fp, r1, r0, asr #25
   1bc70:	andeq	fp, r1, r0, asr #25
   1bc74:	andeq	fp, r1, r0, asr #25
   1bc78:	andeq	fp, r1, r0, asr #25
   1bc7c:	andeq	fp, r1, r0, asr #25
   1bc80:	andeq	fp, r1, r0, asr #25
   1bc84:	andeq	fp, r1, r0, asr #25
   1bc88:	andeq	fp, r1, r0, asr #25
   1bc8c:	andeq	ip, r1, ip, lsr r8
   1bc90:	andeq	ip, r1, r8, lsl #20
   1bc94:	andeq	ip, r1, r4, lsr ip
   1bc98:	andeq	ip, r1, ip, ror #25
   1bc9c:	muleq	r1, ip, sp
   1bca0:	andeq	ip, r1, r0, asr #13
   1bca4:	andeq	ip, r1, r8, lsl #15
   1bca8:	andeq	ip, r1, ip, asr fp
   1bcac:	andeq	ip, r1, r8, ror #20
   1bcb0:	ldrdeq	ip, [r1], -r8
   1bcb4:	andeq	ip, r1, r8, ror sl
   1bcb8:	andeq	ip, r1, r0, asr #21
   1bcbc:	strdeq	fp, [r1], -r0
   1bcc0:	sub	r3, fp, #224	; 0xe0
   1bcc4:	cmp	r3, #31
   1bcc8:	mov	r2, #5
   1bccc:	ldrls	r1, [pc, #2940]	; 1c850 <__assert_fail@plt+0xa4c4>
   1bcd0:	ldrhi	r1, [pc, #2940]	; 1c854 <__assert_fail@plt+0xa4c8>
   1bcd4:	mov	r0, #0
   1bcd8:	bl	11ea0 <dcgettext@plt>
   1bcdc:	mov	r1, fp
   1bce0:	bl	11dbc <printf@plt>
   1bce4:	mov	r0, r6
   1bce8:	add	sp, sp, #60	; 0x3c
   1bcec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcf0:	mov	r0, ip
   1bcf4:	mov	r3, r4
   1bcf8:	mov	r2, #0
   1bcfc:	add	r1, sp, #52	; 0x34
   1bd00:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1bd04:	ldr	r3, [sp, #44]	; 0x2c
   1bd08:	ldr	ip, [sp, #52]	; 0x34
   1bd0c:	mov	r2, #0
   1bd10:	add	r3, r3, ip
   1bd14:	str	r2, [sp]
   1bd18:	str	r3, [sp, #44]	; 0x2c
   1bd1c:	mov	r2, r0
   1bd20:	mov	r3, r1
   1bd24:	ldr	r0, [pc, #3236]	; 1c9d0 <__assert_fail@plt+0xa644>
   1bd28:	bl	18b24 <__assert_fail@plt+0x6798>
   1bd2c:	mov	r1, r0
   1bd30:	ldr	r0, [pc, #2848]	; 1c858 <__assert_fail@plt+0xa4cc>
   1bd34:	bl	11dbc <printf@plt>
   1bd38:	ldr	r0, [sp, #44]	; 0x2c
   1bd3c:	cmp	r4, r0
   1bd40:	bls	1b8b4 <__assert_fail@plt+0x9528>
   1bd44:	mov	r0, r5
   1bd48:	bl	11dbc <printf@plt>
   1bd4c:	ldr	r0, [sp, #44]	; 0x2c
   1bd50:	b	1b8b4 <__assert_fail@plt+0x9528>
   1bd54:	cmp	r7, #8
   1bd58:	bhi	1d12c <__assert_fail@plt+0xada0>
   1bd5c:	add	r3, ip, r7
   1bd60:	cmp	r4, r3
   1bd64:	movhi	r1, r7
   1bd68:	bhi	1cf98 <__assert_fail@plt+0xac0c>
   1bd6c:	cmp	r4, ip
   1bd70:	bhi	1cf94 <__assert_fail@plt+0xac08>
   1bd74:	mov	r2, #0
   1bd78:	mov	r3, #0
   1bd7c:	ldr	r1, [sp, #44]	; 0x2c
   1bd80:	mov	r0, #0
   1bd84:	add	r1, r1, r7
   1bd88:	str	r0, [sp]
   1bd8c:	ldr	r0, [pc, #3132]	; 1c9d0 <__assert_fail@plt+0xa644>
   1bd90:	str	r1, [sp, #44]	; 0x2c
   1bd94:	bl	18b24 <__assert_fail@plt+0x6798>
   1bd98:	mov	r1, r0
   1bd9c:	ldr	r0, [pc, #2744]	; 1c85c <__assert_fail@plt+0xa4d0>
   1bda0:	bl	11dbc <printf@plt>
   1bda4:	ldr	r0, [sp, #44]	; 0x2c
   1bda8:	b	1bd3c <__assert_fail@plt+0x99b0>
   1bdac:	ldr	r0, [pc, #2732]	; 1c860 <__assert_fail@plt+0xa4d4>
   1bdb0:	bl	11dbc <printf@plt>
   1bdb4:	ldr	r0, [sp, #44]	; 0x2c
   1bdb8:	b	1bd3c <__assert_fail@plt+0x99b0>
   1bdbc:	add	r0, r0, #2
   1bdc0:	cmp	r4, r0
   1bdc4:	bhi	1d068 <__assert_fail@plt+0xacdc>
   1bdc8:	cmp	ip, r4
   1bdcc:	bcc	1d2fc <__assert_fail@plt+0xaf70>
   1bdd0:	mov	r1, #0
   1bdd4:	add	ip, ip, #1
   1bdd8:	ldr	r0, [pc, #2692]	; 1c864 <__assert_fail@plt+0xa4d8>
   1bddc:	str	ip, [sp, #44]	; 0x2c
   1bde0:	bl	11dbc <printf@plt>
   1bde4:	ldr	r0, [sp, #44]	; 0x2c
   1bde8:	b	1bd3c <__assert_fail@plt+0x99b0>
   1bdec:	add	r0, r0, #2
   1bdf0:	cmp	r4, r0
   1bdf4:	bhi	1d18c <__assert_fail@plt+0xae00>
   1bdf8:	cmp	ip, r4
   1bdfc:	movcs	r1, #0
   1be00:	bcs	1be1c <__assert_fail@plt+0x9a90>
   1be04:	subs	r1, r4, ip
   1be08:	beq	1be1c <__assert_fail@plt+0x9a90>
   1be0c:	mov	r0, ip
   1be10:	bl	41ab8 <warn@@Base+0x2e8>
   1be14:	ldr	ip, [sp, #44]	; 0x2c
   1be18:	mov	r1, r0
   1be1c:	add	ip, ip, #1
   1be20:	ldr	r0, [pc, #2624]	; 1c868 <__assert_fail@plt+0xa4dc>
   1be24:	str	ip, [sp, #44]	; 0x2c
   1be28:	bl	11dbc <printf@plt>
   1be2c:	ldr	r0, [sp, #44]	; 0x2c
   1be30:	b	1bd3c <__assert_fail@plt+0x99b0>
   1be34:	add	r0, r0, #5
   1be38:	cmp	r4, r0
   1be3c:	bhi	1d020 <__assert_fail@plt+0xac94>
   1be40:	cmp	ip, r4
   1be44:	bcc	1d2e8 <__assert_fail@plt+0xaf5c>
   1be48:	mov	r1, #0
   1be4c:	add	ip, ip, #4
   1be50:	ldr	r0, [pc, #2580]	; 1c86c <__assert_fail@plt+0xa4e0>
   1be54:	str	ip, [sp, #44]	; 0x2c
   1be58:	bl	11dbc <printf@plt>
   1be5c:	ldr	r0, [sp, #44]	; 0x2c
   1be60:	add	r3, r0, #4
   1be64:	cmp	r3, r4
   1be68:	bcc	1d000 <__assert_fail@plt+0xac74>
   1be6c:	cmp	r0, r4
   1be70:	bcc	1d234 <__assert_fail@plt+0xaea8>
   1be74:	mov	r1, #0
   1be78:	ldr	r0, [pc, #2544]	; 1c870 <__assert_fail@plt+0xa4e4>
   1be7c:	str	r3, [sp, #44]	; 0x2c
   1be80:	bl	11dbc <printf@plt>
   1be84:	ldr	r0, [sp, #44]	; 0x2c
   1be88:	b	1bd3c <__assert_fail@plt+0x99b0>
   1be8c:	mov	r0, ip
   1be90:	mov	r3, r4
   1be94:	mov	r2, #0
   1be98:	add	r1, sp, #52	; 0x34
   1be9c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1bea0:	mov	r3, #0
   1bea4:	str	r3, [sp]
   1bea8:	mov	r2, r0
   1beac:	mov	r3, r1
   1beb0:	ldr	r0, [pc, #2860]	; 1c9e4 <__assert_fail@plt+0xa658>
   1beb4:	bl	18b24 <__assert_fail@plt+0x6798>
   1beb8:	mov	r1, r0
   1bebc:	ldr	r0, [pc, #2480]	; 1c874 <__assert_fail@plt+0xa4e8>
   1bec0:	bl	11dbc <printf@plt>
   1bec4:	ldr	r0, [sp, #44]	; 0x2c
   1bec8:	ldr	r8, [sp, #52]	; 0x34
   1becc:	add	r0, r0, r8
   1bed0:	str	r0, [sp, #44]	; 0x2c
   1bed4:	b	1bd3c <__assert_fail@plt+0x99b0>
   1bed8:	mov	r0, ip
   1bedc:	mov	r3, r4
   1bee0:	mov	r2, #1
   1bee4:	add	r1, sp, #52	; 0x34
   1bee8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1beec:	mov	r3, #0
   1bef0:	str	r3, [sp]
   1bef4:	mov	r2, r0
   1bef8:	mov	r3, r1
   1befc:	ldr	r0, [pc, #2732]	; 1c9b0 <__assert_fail@plt+0xa624>
   1bf00:	bl	18b24 <__assert_fail@plt+0x6798>
   1bf04:	mov	r1, r0
   1bf08:	ldr	r0, [pc, #2408]	; 1c878 <__assert_fail@plt+0xa4ec>
   1bf0c:	b	1bec0 <__assert_fail@plt+0x9b34>
   1bf10:	add	r0, r0, #3
   1bf14:	cmp	r4, r0
   1bf18:	bhi	1d088 <__assert_fail@plt+0xacfc>
   1bf1c:	cmp	ip, r4
   1bf20:	bcc	1d2d4 <__assert_fail@plt+0xaf48>
   1bf24:	mov	r1, #0
   1bf28:	add	ip, ip, #2
   1bf2c:	ldr	r0, [pc, #2376]	; 1c87c <__assert_fail@plt+0xa4f0>
   1bf30:	str	ip, [sp, #44]	; 0x2c
   1bf34:	bl	11dbc <printf@plt>
   1bf38:	ldr	r0, [sp, #44]	; 0x2c
   1bf3c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1bf40:	add	r0, r0, #3
   1bf44:	cmp	r4, r0
   1bf48:	bhi	1d194 <__assert_fail@plt+0xae08>
   1bf4c:	cmp	ip, r4
   1bf50:	movcs	r1, #0
   1bf54:	bcs	1bf70 <__assert_fail@plt+0x9be4>
   1bf58:	subs	r1, r4, ip
   1bf5c:	beq	1bf70 <__assert_fail@plt+0x9be4>
   1bf60:	mov	r0, ip
   1bf64:	bl	41ab8 <warn@@Base+0x2e8>
   1bf68:	ldr	ip, [sp, #44]	; 0x2c
   1bf6c:	mov	r1, r0
   1bf70:	add	ip, ip, #2
   1bf74:	ldr	r0, [pc, #2308]	; 1c880 <__assert_fail@plt+0xa4f4>
   1bf78:	str	ip, [sp, #44]	; 0x2c
   1bf7c:	bl	11dbc <printf@plt>
   1bf80:	ldr	r0, [sp, #44]	; 0x2c
   1bf84:	b	1bd3c <__assert_fail@plt+0x99b0>
   1bf88:	add	r0, r0, #5
   1bf8c:	cmp	r4, r0
   1bf90:	bhi	1d10c <__assert_fail@plt+0xad80>
   1bf94:	cmp	ip, r4
   1bf98:	bcc	1d2c0 <__assert_fail@plt+0xaf34>
   1bf9c:	mov	r1, #0
   1bfa0:	add	ip, ip, #4
   1bfa4:	ldr	r0, [pc, #2264]	; 1c884 <__assert_fail@plt+0xa4f8>
   1bfa8:	str	ip, [sp, #44]	; 0x2c
   1bfac:	bl	11dbc <printf@plt>
   1bfb0:	ldr	r0, [sp, #44]	; 0x2c
   1bfb4:	b	1bd3c <__assert_fail@plt+0x99b0>
   1bfb8:	add	r0, r0, #5
   1bfbc:	cmp	r4, r0
   1bfc0:	bhi	1d184 <__assert_fail@plt+0xadf8>
   1bfc4:	cmp	ip, r4
   1bfc8:	movcs	r1, #0
   1bfcc:	bcs	1bfe8 <__assert_fail@plt+0x9c5c>
   1bfd0:	subs	r1, r4, ip
   1bfd4:	beq	1bfe8 <__assert_fail@plt+0x9c5c>
   1bfd8:	mov	r0, ip
   1bfdc:	bl	41ab8 <warn@@Base+0x2e8>
   1bfe0:	ldr	ip, [sp, #44]	; 0x2c
   1bfe4:	mov	r1, r0
   1bfe8:	add	ip, ip, #4
   1bfec:	ldr	r0, [pc, #2196]	; 1c888 <__assert_fail@plt+0xa4fc>
   1bff0:	str	ip, [sp, #44]	; 0x2c
   1bff4:	bl	11dbc <printf@plt>
   1bff8:	ldr	r0, [sp, #44]	; 0x2c
   1bffc:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c000:	ldr	r0, [pc, #2180]	; 1c88c <__assert_fail@plt+0xa500>
   1c004:	bl	11dbc <printf@plt>
   1c008:	ldr	r0, [sp, #44]	; 0x2c
   1c00c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c010:	ldr	r0, [pc, #2168]	; 1c890 <__assert_fail@plt+0xa504>
   1c014:	bl	11dbc <printf@plt>
   1c018:	ldr	r0, [sp, #44]	; 0x2c
   1c01c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c020:	add	r0, r0, #2
   1c024:	cmp	r4, r0
   1c028:	bhi	1d0ec <__assert_fail@plt+0xad60>
   1c02c:	cmp	ip, r4
   1c030:	bcc	1d2ac <__assert_fail@plt+0xaf20>
   1c034:	mov	r1, #0
   1c038:	add	ip, ip, #1
   1c03c:	ldr	r0, [pc, #2128]	; 1c894 <__assert_fail@plt+0xa508>
   1c040:	str	ip, [sp, #44]	; 0x2c
   1c044:	bl	11dbc <printf@plt>
   1c048:	ldr	r0, [sp, #44]	; 0x2c
   1c04c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c050:	add	r0, r0, #5
   1c054:	cmp	r4, r0
   1c058:	bhi	1cf7c <__assert_fail@plt+0xabf0>
   1c05c:	cmp	ip, r4
   1c060:	movcs	r1, #0
   1c064:	bcs	1c070 <__assert_fail@plt+0x9ce4>
   1c068:	subs	r1, r4, ip
   1c06c:	bne	1cf80 <__assert_fail@plt+0xabf4>
   1c070:	add	ip, ip, #4
   1c074:	ldr	r0, [pc, #2076]	; 1c898 <__assert_fail@plt+0xa50c>
   1c078:	str	ip, [sp, #44]	; 0x2c
   1c07c:	bl	11dbc <printf@plt>
   1c080:	ldr	r0, [sp, #44]	; 0x2c
   1c084:	add	r3, r0, #4
   1c088:	cmp	r3, r4
   1c08c:	bcc	1d16c <__assert_fail@plt+0xade0>
   1c090:	cmp	r0, r4
   1c094:	movcs	r1, #0
   1c098:	bcs	1c0b4 <__assert_fail@plt+0x9d28>
   1c09c:	subs	r1, r4, r0
   1c0a0:	beq	1c0b4 <__assert_fail@plt+0x9d28>
   1c0a4:	bl	41ab8 <warn@@Base+0x2e8>
   1c0a8:	ldr	r3, [sp, #44]	; 0x2c
   1c0ac:	add	r3, r3, #4
   1c0b0:	mov	r1, r0
   1c0b4:	ldr	r0, [pc, #2016]	; 1c89c <__assert_fail@plt+0xa510>
   1c0b8:	str	r3, [sp, #44]	; 0x2c
   1c0bc:	bl	11dbc <printf@plt>
   1c0c0:	ldr	r0, [sp, #44]	; 0x2c
   1c0c4:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c0c8:	ldr	r0, [pc, #2000]	; 1c8a0 <__assert_fail@plt+0xa514>
   1c0cc:	bl	11dbc <printf@plt>
   1c0d0:	ldr	r0, [sp, #44]	; 0x2c
   1c0d4:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c0d8:	ldr	r0, [pc, #1988]	; 1c8a4 <__assert_fail@plt+0xa518>
   1c0dc:	bl	11dbc <printf@plt>
   1c0e0:	ldr	r0, [sp, #44]	; 0x2c
   1c0e4:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c0e8:	ldr	r0, [pc, #1976]	; 1c8a8 <__assert_fail@plt+0xa51c>
   1c0ec:	bl	11dbc <printf@plt>
   1c0f0:	ldr	r0, [sp, #44]	; 0x2c
   1c0f4:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c0f8:	ldr	r0, [pc, #1964]	; 1c8ac <__assert_fail@plt+0xa520>
   1c0fc:	bl	11dbc <printf@plt>
   1c100:	ldr	r0, [sp, #44]	; 0x2c
   1c104:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c108:	ldr	r0, [pc, #1952]	; 1c8b0 <__assert_fail@plt+0xa524>
   1c10c:	bl	11dbc <printf@plt>
   1c110:	ldr	r0, [sp, #44]	; 0x2c
   1c114:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c118:	ldr	r0, [pc, #1940]	; 1c8b4 <__assert_fail@plt+0xa528>
   1c11c:	bl	11dbc <printf@plt>
   1c120:	ldr	r0, [sp, #44]	; 0x2c
   1c124:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c128:	ldr	r0, [pc, #1928]	; 1c8b8 <__assert_fail@plt+0xa52c>
   1c12c:	bl	11dbc <printf@plt>
   1c130:	ldr	r0, [sp, #44]	; 0x2c
   1c134:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c138:	ldr	r0, [pc, #1916]	; 1c8bc <__assert_fail@plt+0xa530>
   1c13c:	bl	11dbc <printf@plt>
   1c140:	ldr	r0, [sp, #44]	; 0x2c
   1c144:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c148:	ldr	r0, [pc, #1904]	; 1c8c0 <__assert_fail@plt+0xa534>
   1c14c:	bl	11dbc <printf@plt>
   1c150:	ldr	r0, [sp, #44]	; 0x2c
   1c154:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c158:	ldr	r0, [pc, #1892]	; 1c8c4 <__assert_fail@plt+0xa538>
   1c15c:	bl	11dbc <printf@plt>
   1c160:	ldr	r0, [sp, #44]	; 0x2c
   1c164:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c168:	ldr	r0, [pc, #1880]	; 1c8c8 <__assert_fail@plt+0xa53c>
   1c16c:	bl	11dbc <printf@plt>
   1c170:	ldr	r0, [sp, #44]	; 0x2c
   1c174:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c178:	ldr	r0, [pc, #1868]	; 1c8cc <__assert_fail@plt+0xa540>
   1c17c:	bl	11dbc <printf@plt>
   1c180:	ldr	r0, [sp, #44]	; 0x2c
   1c184:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c188:	ldr	r0, [pc, #1856]	; 1c8d0 <__assert_fail@plt+0xa544>
   1c18c:	bl	11dbc <printf@plt>
   1c190:	ldr	r0, [sp, #44]	; 0x2c
   1c194:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c198:	ldr	r0, [pc, #1844]	; 1c8d4 <__assert_fail@plt+0xa548>
   1c19c:	bl	11dbc <printf@plt>
   1c1a0:	ldr	r0, [sp, #44]	; 0x2c
   1c1a4:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c1a8:	mov	r0, ip
   1c1ac:	mov	r3, r4
   1c1b0:	mov	r2, #0
   1c1b4:	add	r1, sp, #52	; 0x34
   1c1b8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1c1bc:	mov	r3, #0
   1c1c0:	str	r3, [sp]
   1c1c4:	mov	r2, r0
   1c1c8:	mov	r3, r1
   1c1cc:	ldr	r0, [pc, #2064]	; 1c9e4 <__assert_fail@plt+0xa658>
   1c1d0:	bl	18b24 <__assert_fail@plt+0x6798>
   1c1d4:	mov	r1, r0
   1c1d8:	ldr	r0, [pc, #1784]	; 1c8d8 <__assert_fail@plt+0xa54c>
   1c1dc:	b	1bec0 <__assert_fail@plt+0x9b34>
   1c1e0:	ldr	r0, [pc, #1780]	; 1c8dc <__assert_fail@plt+0xa550>
   1c1e4:	bl	11dbc <printf@plt>
   1c1e8:	ldr	r0, [sp, #44]	; 0x2c
   1c1ec:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c1f0:	ldr	r0, [pc, #1768]	; 1c8e0 <__assert_fail@plt+0xa554>
   1c1f4:	bl	11dbc <printf@plt>
   1c1f8:	ldr	r0, [sp, #44]	; 0x2c
   1c1fc:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c200:	ldr	r0, [pc, #1756]	; 1c8e4 <__assert_fail@plt+0xa558>
   1c204:	bl	11dbc <printf@plt>
   1c208:	ldr	r0, [sp, #44]	; 0x2c
   1c20c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c210:	ldr	r0, [pc, #1744]	; 1c8e8 <__assert_fail@plt+0xa55c>
   1c214:	bl	11dbc <printf@plt>
   1c218:	ldr	r0, [sp, #44]	; 0x2c
   1c21c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c220:	add	r0, r0, #3
   1c224:	cmp	r4, r0
   1c228:	bhi	1d17c <__assert_fail@plt+0xadf0>
   1c22c:	cmp	ip, r4
   1c230:	movcs	r1, #0
   1c234:	bcs	1c250 <__assert_fail@plt+0x9ec4>
   1c238:	subs	r1, r4, ip
   1c23c:	beq	1c250 <__assert_fail@plt+0x9ec4>
   1c240:	mov	r0, ip
   1c244:	bl	41ab8 <warn@@Base+0x2e8>
   1c248:	ldr	ip, [sp, #44]	; 0x2c
   1c24c:	mov	r1, r0
   1c250:	add	ip, ip, #2
   1c254:	ldr	r0, [pc, #1680]	; 1c8ec <__assert_fail@plt+0xa560>
   1c258:	str	ip, [sp, #44]	; 0x2c
   1c25c:	bl	11dbc <printf@plt>
   1c260:	ldr	r0, [sp, #44]	; 0x2c
   1c264:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c268:	ldr	r0, [pc, #1664]	; 1c8f0 <__assert_fail@plt+0xa564>
   1c26c:	bl	11dbc <printf@plt>
   1c270:	ldr	r0, [sp, #44]	; 0x2c
   1c274:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c278:	ldr	r0, [pc, #1652]	; 1c8f4 <__assert_fail@plt+0xa568>
   1c27c:	bl	11dbc <printf@plt>
   1c280:	ldr	r0, [sp, #44]	; 0x2c
   1c284:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c288:	ldr	r0, [pc, #1640]	; 1c8f8 <__assert_fail@plt+0xa56c>
   1c28c:	bl	11dbc <printf@plt>
   1c290:	ldr	r0, [sp, #44]	; 0x2c
   1c294:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c298:	ldr	r0, [pc, #1628]	; 1c8fc <__assert_fail@plt+0xa570>
   1c29c:	bl	11dbc <printf@plt>
   1c2a0:	ldr	r0, [sp, #44]	; 0x2c
   1c2a4:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c2a8:	ldr	r0, [pc, #1616]	; 1c900 <__assert_fail@plt+0xa574>
   1c2ac:	bl	11dbc <printf@plt>
   1c2b0:	ldr	r0, [sp, #44]	; 0x2c
   1c2b4:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c2b8:	ldr	r0, [pc, #1604]	; 1c904 <__assert_fail@plt+0xa578>
   1c2bc:	bl	11dbc <printf@plt>
   1c2c0:	ldr	r0, [sp, #44]	; 0x2c
   1c2c4:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c2c8:	add	r0, r0, #3
   1c2cc:	cmp	r4, r0
   1c2d0:	bhi	1d174 <__assert_fail@plt+0xade8>
   1c2d4:	cmp	ip, r4
   1c2d8:	movcs	r1, #0
   1c2dc:	bcs	1c2f8 <__assert_fail@plt+0x9f6c>
   1c2e0:	subs	r1, r4, ip
   1c2e4:	beq	1c2f8 <__assert_fail@plt+0x9f6c>
   1c2e8:	mov	r0, ip
   1c2ec:	bl	41ab8 <warn@@Base+0x2e8>
   1c2f0:	ldr	ip, [sp, #44]	; 0x2c
   1c2f4:	mov	r1, r0
   1c2f8:	add	ip, ip, #2
   1c2fc:	ldr	r0, [pc, #1540]	; 1c908 <__assert_fail@plt+0xa57c>
   1c300:	str	ip, [sp, #44]	; 0x2c
   1c304:	bl	11dbc <printf@plt>
   1c308:	ldr	r0, [sp, #44]	; 0x2c
   1c30c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c310:	sub	r1, fp, #48	; 0x30
   1c314:	ldr	r0, [pc, #1520]	; 1c90c <__assert_fail@plt+0xa580>
   1c318:	bl	11dbc <printf@plt>
   1c31c:	ldr	r0, [sp, #44]	; 0x2c
   1c320:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c324:	sub	fp, fp, #80	; 0x50
   1c328:	mov	r1, #1
   1c32c:	mov	r0, fp
   1c330:	bl	1888c <__assert_fail@plt+0x6500>
   1c334:	mov	r1, fp
   1c338:	mov	r2, r0
   1c33c:	ldr	r0, [pc, #1484]	; 1c910 <__assert_fail@plt+0xa584>
   1c340:	bl	11dbc <printf@plt>
   1c344:	ldr	r0, [sp, #44]	; 0x2c
   1c348:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c34c:	sub	fp, fp, #112	; 0x70
   1c350:	mov	r1, #1
   1c354:	mov	r0, fp
   1c358:	bl	1888c <__assert_fail@plt+0x6500>
   1c35c:	mov	r3, r4
   1c360:	mov	r2, #1
   1c364:	add	r1, sp, #52	; 0x34
   1c368:	mov	r8, r0
   1c36c:	ldr	r0, [sp, #44]	; 0x2c
   1c370:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1c374:	mov	r3, #0
   1c378:	str	r3, [sp]
   1c37c:	mov	r2, r0
   1c380:	mov	r3, r1
   1c384:	ldr	r0, [pc, #1572]	; 1c9b0 <__assert_fail@plt+0xa624>
   1c388:	bl	18b24 <__assert_fail@plt+0x6798>
   1c38c:	mov	r2, r8
   1c390:	mov	r1, fp
   1c394:	mov	r3, r0
   1c398:	ldr	r0, [pc, #1396]	; 1c914 <__assert_fail@plt+0xa588>
   1c39c:	bl	11dbc <printf@plt>
   1c3a0:	ldr	r0, [sp, #44]	; 0x2c
   1c3a4:	ldr	r8, [sp, #52]	; 0x34
   1c3a8:	add	r0, r0, r8
   1c3ac:	str	r0, [sp, #44]	; 0x2c
   1c3b0:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c3b4:	mov	r0, ip
   1c3b8:	mov	r3, r4
   1c3bc:	mov	r2, #0
   1c3c0:	add	r1, sp, #52	; 0x34
   1c3c4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1c3c8:	ldr	r3, [sp, #44]	; 0x2c
   1c3cc:	mov	r2, #0
   1c3d0:	str	r2, [sp]
   1c3d4:	mov	r8, r0
   1c3d8:	ldr	r0, [sp, #52]	; 0x34
   1c3dc:	mov	r2, r8
   1c3e0:	add	r3, r3, r0
   1c3e4:	str	r3, [sp, #44]	; 0x2c
   1c3e8:	ldr	r0, [pc, #1524]	; 1c9e4 <__assert_fail@plt+0xa658>
   1c3ec:	mov	r3, r1
   1c3f0:	bl	18b24 <__assert_fail@plt+0x6798>
   1c3f4:	mov	r1, #1
   1c3f8:	mov	r9, r0
   1c3fc:	mov	r0, r8
   1c400:	bl	1888c <__assert_fail@plt+0x6500>
   1c404:	mov	r1, r9
   1c408:	mov	r2, r0
   1c40c:	ldr	r0, [pc, #1284]	; 1c918 <__assert_fail@plt+0xa58c>
   1c410:	bl	11dbc <printf@plt>
   1c414:	ldr	r0, [sp, #44]	; 0x2c
   1c418:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c41c:	mov	r0, ip
   1c420:	mov	r3, r4
   1c424:	mov	r2, #1
   1c428:	add	r1, sp, #52	; 0x34
   1c42c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1c430:	mov	r3, #0
   1c434:	str	r3, [sp]
   1c438:	mov	r6, #1
   1c43c:	mov	r2, r0
   1c440:	mov	r3, r1
   1c444:	ldr	r0, [pc, #1380]	; 1c9b0 <__assert_fail@plt+0xa624>
   1c448:	bl	18b24 <__assert_fail@plt+0x6798>
   1c44c:	mov	r1, r0
   1c450:	ldr	r0, [pc, #1220]	; 1c91c <__assert_fail@plt+0xa590>
   1c454:	b	1bec0 <__assert_fail@plt+0x9b34>
   1c458:	mov	r0, ip
   1c45c:	mov	r3, r4
   1c460:	mov	r2, #0
   1c464:	add	r1, sp, #52	; 0x34
   1c468:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1c46c:	ldr	r3, [sp, #44]	; 0x2c
   1c470:	ldr	r2, [sp, #52]	; 0x34
   1c474:	mov	r8, #0
   1c478:	add	r3, r3, r2
   1c47c:	str	r3, [sp, #44]	; 0x2c
   1c480:	str	r8, [sp]
   1c484:	mov	r2, r0
   1c488:	mov	r3, r1
   1c48c:	mov	r9, r0
   1c490:	ldr	r0, [pc, #1356]	; 1c9e4 <__assert_fail@plt+0xa658>
   1c494:	bl	18b24 <__assert_fail@plt+0x6798>
   1c498:	mov	r1, #1
   1c49c:	mov	fp, r0
   1c4a0:	mov	r0, r9
   1c4a4:	bl	1888c <__assert_fail@plt+0x6500>
   1c4a8:	mov	r3, r4
   1c4ac:	mov	r2, #1
   1c4b0:	add	r1, sp, #52	; 0x34
   1c4b4:	mov	r9, r0
   1c4b8:	ldr	r0, [sp, #44]	; 0x2c
   1c4bc:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1c4c0:	str	r8, [sp]
   1c4c4:	mov	r2, r0
   1c4c8:	mov	r3, r1
   1c4cc:	ldr	r0, [pc, #1244]	; 1c9b0 <__assert_fail@plt+0xa624>
   1c4d0:	bl	18b24 <__assert_fail@plt+0x6798>
   1c4d4:	mov	r2, r9
   1c4d8:	mov	r1, fp
   1c4dc:	mov	r3, r0
   1c4e0:	ldr	r0, [pc, #1080]	; 1c920 <__assert_fail@plt+0xa594>
   1c4e4:	b	1c39c <__assert_fail@plt+0xa010>
   1c4e8:	mov	r0, ip
   1c4ec:	mov	r3, r4
   1c4f0:	mov	r2, #0
   1c4f4:	add	r1, sp, #52	; 0x34
   1c4f8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1c4fc:	mov	r3, #0
   1c500:	str	r3, [sp]
   1c504:	mov	r2, r0
   1c508:	mov	r3, r1
   1c50c:	ldr	r0, [pc, #1232]	; 1c9e4 <__assert_fail@plt+0xa658>
   1c510:	bl	18b24 <__assert_fail@plt+0x6798>
   1c514:	mov	r1, r0
   1c518:	ldr	r0, [pc, #1028]	; 1c924 <__assert_fail@plt+0xa598>
   1c51c:	b	1bec0 <__assert_fail@plt+0x9b34>
   1c520:	add	r0, r0, #2
   1c524:	cmp	r4, r0
   1c528:	bhi	1cfe0 <__assert_fail@plt+0xac54>
   1c52c:	cmp	ip, r4
   1c530:	bcc	1d298 <__assert_fail@plt+0xaf0c>
   1c534:	mov	r1, #0
   1c538:	add	ip, ip, #1
   1c53c:	ldr	r0, [pc, #996]	; 1c928 <__assert_fail@plt+0xa59c>
   1c540:	str	ip, [sp, #44]	; 0x2c
   1c544:	bl	11dbc <printf@plt>
   1c548:	ldr	r0, [sp, #44]	; 0x2c
   1c54c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c550:	add	r0, r0, #2
   1c554:	cmp	r4, r0
   1c558:	bhi	1cfc0 <__assert_fail@plt+0xac34>
   1c55c:	cmp	ip, r4
   1c560:	bcc	1d284 <__assert_fail@plt+0xaef8>
   1c564:	mov	r1, #0
   1c568:	add	ip, ip, #1
   1c56c:	ldr	r0, [pc, #952]	; 1c92c <__assert_fail@plt+0xa5a0>
   1c570:	str	ip, [sp, #44]	; 0x2c
   1c574:	bl	11dbc <printf@plt>
   1c578:	ldr	r0, [sp, #44]	; 0x2c
   1c57c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c580:	ldr	r0, [pc, #936]	; 1c930 <__assert_fail@plt+0xa5a4>
   1c584:	bl	11dbc <printf@plt>
   1c588:	ldr	r0, [sp, #44]	; 0x2c
   1c58c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c590:	ldr	r0, [pc, #924]	; 1c934 <__assert_fail@plt+0xa5a8>
   1c594:	bl	11dbc <printf@plt>
   1c598:	ldr	r0, [sp, #44]	; 0x2c
   1c59c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c5a0:	add	r0, r0, #3
   1c5a4:	cmp	r4, r0
   1c5a8:	bhi	1cf3c <__assert_fail@plt+0xabb0>
   1c5ac:	cmp	ip, r4
   1c5b0:	bcs	1c5bc <__assert_fail@plt+0xa230>
   1c5b4:	subs	r1, r4, ip
   1c5b8:	bne	1cf40 <__assert_fail@plt+0xabb4>
   1c5bc:	ldr	r3, [sp, #28]
   1c5c0:	mov	r2, sl
   1c5c4:	mov	lr, #0
   1c5c8:	add	ip, ip, #2
   1c5cc:	str	lr, [sp]
   1c5d0:	ldr	r0, [pc, #1016]	; 1c9d0 <__assert_fail@plt+0xa644>
   1c5d4:	str	ip, [sp, #44]	; 0x2c
   1c5d8:	bl	18b24 <__assert_fail@plt+0x6798>
   1c5dc:	mov	r1, r0
   1c5e0:	ldr	r0, [pc, #848]	; 1c938 <__assert_fail@plt+0xa5ac>
   1c5e4:	bl	11dbc <printf@plt>
   1c5e8:	ldr	r0, [sp, #44]	; 0x2c
   1c5ec:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c5f0:	add	r0, r0, #5
   1c5f4:	cmp	r4, r0
   1c5f8:	bhi	1cf5c <__assert_fail@plt+0xabd0>
   1c5fc:	cmp	ip, r4
   1c600:	bcs	1c60c <__assert_fail@plt+0xa280>
   1c604:	subs	r1, r4, ip
   1c608:	bne	1cf60 <__assert_fail@plt+0xabd4>
   1c60c:	ldr	r3, [sp, #28]
   1c610:	mov	r2, sl
   1c614:	mov	lr, #0
   1c618:	add	ip, ip, #4
   1c61c:	str	lr, [sp]
   1c620:	ldr	r0, [pc, #936]	; 1c9d0 <__assert_fail@plt+0xa644>
   1c624:	str	ip, [sp, #44]	; 0x2c
   1c628:	bl	18b24 <__assert_fail@plt+0x6798>
   1c62c:	mov	r1, r0
   1c630:	ldr	r0, [pc, #772]	; 1c93c <__assert_fail@plt+0xa5b0>
   1c634:	bl	11dbc <printf@plt>
   1c638:	ldr	r0, [sp, #44]	; 0x2c
   1c63c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c640:	ldr	r3, [sp, #36]	; 0x24
   1c644:	cmn	r3, #1
   1c648:	beq	1d4a8 <__assert_fail@plt+0xb11c>
   1c64c:	ldr	r3, [sp, #36]	; 0x24
   1c650:	cmp	r3, #2
   1c654:	beq	1d19c <__assert_fail@plt+0xae10>
   1c658:	ldr	r3, [sp, #32]
   1c65c:	cmp	r3, #8
   1c660:	bhi	1d408 <__assert_fail@plt+0xb07c>
   1c664:	ldr	r3, [sp, #32]
   1c668:	add	r3, ip, r3
   1c66c:	cmp	r4, r3
   1c670:	bhi	1d310 <__assert_fail@plt+0xaf84>
   1c674:	cmp	r4, ip
   1c678:	bhi	1d368 <__assert_fail@plt+0xafdc>
   1c67c:	mov	r0, #0
   1c680:	mov	r1, #0
   1c684:	ldr	r3, [sp, #44]	; 0x2c
   1c688:	ldr	r2, [sp, #32]
   1c68c:	add	r3, r3, r2
   1c690:	str	r3, [sp, #44]	; 0x2c
   1c694:	mov	ip, #0
   1c698:	mov	r2, r0
   1c69c:	mov	r3, r1
   1c6a0:	str	ip, [sp]
   1c6a4:	ldr	r0, [pc, #804]	; 1c9d0 <__assert_fail@plt+0xa644>
   1c6a8:	bl	18b24 <__assert_fail@plt+0x6798>
   1c6ac:	mov	r1, r0
   1c6b0:	ldr	r0, [pc, #648]	; 1c940 <__assert_fail@plt+0xa5b4>
   1c6b4:	bl	11dbc <printf@plt>
   1c6b8:	ldr	r0, [sp, #44]	; 0x2c
   1c6bc:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c6c0:	mov	r0, ip
   1c6c4:	mov	r3, r4
   1c6c8:	mov	r2, #0
   1c6cc:	add	r1, sp, #52	; 0x34
   1c6d0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1c6d4:	ldr	r3, [sp, #44]	; 0x2c
   1c6d8:	ldr	r2, [sp, #52]	; 0x34
   1c6dc:	cmp	fp, #165	; 0xa5
   1c6e0:	ldr	ip, [pc, #604]	; 1c944 <__assert_fail@plt+0xa5b8>
   1c6e4:	add	r3, r3, r2
   1c6e8:	mov	r8, #0
   1c6ec:	str	r3, [sp, #44]	; 0x2c
   1c6f0:	str	r8, [sp]
   1c6f4:	moveq	fp, ip
   1c6f8:	mov	r9, r0
   1c6fc:	ldr	r0, [pc, #580]	; 1c948 <__assert_fail@plt+0xa5bc>
   1c700:	mov	r3, r1
   1c704:	movne	fp, r0
   1c708:	mov	r2, r9
   1c70c:	ldr	r0, [pc, #720]	; 1c9e4 <__assert_fail@plt+0xa658>
   1c710:	bl	18b24 <__assert_fail@plt+0x6798>
   1c714:	mov	r1, #1
   1c718:	str	r0, [sp, #40]	; 0x28
   1c71c:	mov	r0, r9
   1c720:	bl	1888c <__assert_fail@plt+0x6500>
   1c724:	ldr	r2, [sp, #40]	; 0x28
   1c728:	mov	r1, fp
   1c72c:	mov	r3, r0
   1c730:	ldr	r0, [pc, #532]	; 1c94c <__assert_fail@plt+0xa5c0>
   1c734:	bl	11dbc <printf@plt>
   1c738:	mov	r3, r4
   1c73c:	mov	r2, r8
   1c740:	add	r1, sp, #52	; 0x34
   1c744:	ldr	r0, [sp, #44]	; 0x2c
   1c748:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1c74c:	ldr	r3, [sp, #44]	; 0x2c
   1c750:	ldr	r2, [sp, #52]	; 0x34
   1c754:	str	r8, [sp]
   1c758:	add	r3, r3, r2
   1c75c:	str	r3, [sp, #44]	; 0x2c
   1c760:	ldr	r3, [sp, #28]
   1c764:	adds	r2, sl, r0
   1c768:	adc	r3, r3, r1
   1c76c:	ldr	r0, [pc, #604]	; 1c9d0 <__assert_fail@plt+0xa644>
   1c770:	bl	18b24 <__assert_fail@plt+0x6798>
   1c774:	mov	r1, r0
   1c778:	ldr	r0, [pc, #464]	; 1c950 <__assert_fail@plt+0xa5c4>
   1c77c:	bl	11dbc <printf@plt>
   1c780:	ldr	r0, [sp, #44]	; 0x2c
   1c784:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c788:	add	r0, r0, #2
   1c78c:	cmp	r4, r0
   1c790:	bhi	1d0a8 <__assert_fail@plt+0xad1c>
   1c794:	cmp	ip, r4
   1c798:	bcc	1d270 <__assert_fail@plt+0xaee4>
   1c79c:	mov	r2, #0
   1c7a0:	ldr	r3, [pc, #428]	; 1c954 <__assert_fail@plt+0xa5c8>
   1c7a4:	cmp	fp, #166	; 0xa6
   1c7a8:	add	ip, ip, #1
   1c7ac:	ldr	r1, [pc, #420]	; 1c958 <__assert_fail@plt+0xa5cc>
   1c7b0:	ldr	r0, [pc, #420]	; 1c95c <__assert_fail@plt+0xa5d0>
   1c7b4:	movne	r1, r3
   1c7b8:	str	ip, [sp, #44]	; 0x2c
   1c7bc:	bl	11dbc <printf@plt>
   1c7c0:	mov	r3, r4
   1c7c4:	mov	r2, #0
   1c7c8:	add	r1, sp, #52	; 0x34
   1c7cc:	ldr	r0, [sp, #44]	; 0x2c
   1c7d0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1c7d4:	ldr	r3, [sp, #44]	; 0x2c
   1c7d8:	ldr	ip, [sp, #52]	; 0x34
   1c7dc:	mov	r2, #0
   1c7e0:	add	r3, r3, ip
   1c7e4:	str	r2, [sp]
   1c7e8:	b	1c75c <__assert_fail@plt+0xa3d0>
   1c7ec:	ldr	r0, [pc, #364]	; 1c960 <__assert_fail@plt+0xa5d4>
   1c7f0:	bl	11dbc <printf@plt>
   1c7f4:	ldr	r0, [sp, #44]	; 0x2c
   1c7f8:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c7fc:	ldr	r0, [pc, #352]	; 1c964 <__assert_fail@plt+0xa5d8>
   1c800:	bl	11dbc <printf@plt>
   1c804:	ldr	r0, [sp, #44]	; 0x2c
   1c808:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c80c:	ldr	r0, [pc, #340]	; 1c968 <__assert_fail@plt+0xa5dc>
   1c810:	bl	11dbc <printf@plt>
   1c814:	ldr	r0, [sp, #44]	; 0x2c
   1c818:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c81c:	ldr	r0, [pc, #328]	; 1c96c <__assert_fail@plt+0xa5e0>
   1c820:	bl	11dbc <printf@plt>
   1c824:	ldr	r0, [sp, #44]	; 0x2c
   1c828:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c82c:	ldr	r0, [pc, #316]	; 1c970 <__assert_fail@plt+0xa5e4>
   1c830:	bl	11dbc <printf@plt>
   1c834:	ldr	r0, [sp, #44]	; 0x2c
   1c838:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c83c:	ldr	r0, [pc, #304]	; 1c974 <__assert_fail@plt+0xa5e8>
   1c840:	bl	11dbc <printf@plt>
   1c844:	ldr	r0, [sp, #44]	; 0x2c
   1c848:	b	1bd3c <__assert_fail@plt+0x99b0>
   1c84c:	muleq	r4, r0, ip
   1c850:	andeq	fp, r4, r4, asr ip
   1c854:	andeq	fp, r4, r4, ror ip
   1c858:	andeq	fp, r4, r0, lsr #23
   1c85c:	andeq	fp, r4, r0, ror r6
   1c860:	andeq	fp, r4, r0, lsl #13
   1c864:	andeq	fp, r4, ip, lsl #13
   1c868:	andeq	fp, r4, r0, lsr #13
   1c86c:	andeq	fp, r4, r4, lsl #14
   1c870:	andeq	fp, r4, r8, lsl r7
   1c874:	andeq	fp, r4, r0, lsr r7
   1c878:	andeq	fp, r4, r4, asr #14
   1c87c:			; <UNDEFINED> instruction: 0x0004b6b4
   1c880:	andeq	fp, r4, r8, asr #13
   1c884:	ldrdeq	fp, [r4], -ip
   1c888:	strdeq	fp, [r4], -r0
   1c88c:	andeq	fp, r4, r8, asr r7
   1c890:	andeq	fp, r4, r0, ror r7
   1c894:	andeq	fp, r4, ip, ror r7
   1c898:	andeq	fp, r4, ip, lsl r7
   1c89c:	andeq	fp, r4, r8, lsl #15
   1c8a0:	andeq	fp, r4, r4, ror #14
   1c8a4:	andeq	fp, r4, ip, lsl #15
   1c8a8:	muleq	r4, r8, r7
   1c8ac:	andeq	fp, r4, r4, lsr #15
   1c8b0:			; <UNDEFINED> instruction: 0x0004b7b4
   1c8b4:	andeq	fp, r4, r0, asr #15
   1c8b8:	andeq	fp, r4, ip, asr #15
   1c8bc:	ldrdeq	fp, [r4], -r8
   1c8c0:	andeq	fp, r4, r4, ror #15
   1c8c4:	strdeq	fp, [r4], -r0
   1c8c8:	strdeq	fp, [r4], -ip
   1c8cc:	andeq	fp, r4, r8, lsl #16
   1c8d0:	andeq	fp, r4, r4, lsl r8
   1c8d4:	andeq	fp, r4, r0, lsr #16
   1c8d8:	andeq	fp, r4, ip, lsr #16
   1c8dc:	andeq	fp, r4, r4, asr #16
   1c8e0:	andeq	fp, r4, r0, asr r8
   1c8e4:	andeq	fp, r4, ip, asr r8
   1c8e8:	andeq	fp, r4, r8, ror #16
   1c8ec:	andeq	fp, r4, r4, ror r8
   1c8f0:	andeq	fp, r4, r4, lsl #17
   1c8f4:	muleq	r4, r0, r8
   1c8f8:	muleq	r4, ip, r8
   1c8fc:	andeq	fp, r4, r8, lsr #17
   1c900:			; <UNDEFINED> instruction: 0x0004b8b4
   1c904:	andeq	fp, r4, r0, asr #17
   1c908:	andeq	fp, r4, ip, asr #17
   1c90c:	ldrdeq	fp, [r4], -ip
   1c910:	andeq	fp, r4, r8, ror #17
   1c914:	strdeq	fp, [r4], -ip
   1c918:	andeq	fp, r4, r4, lsl r9
   1c91c:	andeq	fp, r4, r8, lsr #18
   1c920:	andeq	fp, r4, r8, lsr r9
   1c924:	andeq	fp, r4, r0, asr r9
   1c928:	andeq	fp, r4, r0, ror #18
   1c92c:	andeq	fp, r4, r8, ror r9
   1c930:	muleq	r4, r0, r9
   1c934:	muleq	r4, ip, r9
   1c938:			; <UNDEFINED> instruction: 0x0004b9b8
   1c93c:	andeq	fp, r4, ip, asr #19
   1c940:	andeq	fp, r4, r0, lsl #20
   1c944:	andeq	fp, r4, r8, asr #11
   1c948:	ldrdeq	fp, [r4], -ip
   1c94c:	andeq	fp, r4, r4, asr #22
   1c950:	andeq	fp, r4, r4, asr #19
   1c954:	andeq	fp, r4, r8, lsl #12
   1c958:	strdeq	fp, [r4], -r4
   1c95c:	andeq	fp, r4, r0, asr fp
   1c960:	andeq	fp, r4, r8, lsl sl
   1c964:	andeq	fp, r4, r0, lsr sl
   1c968:	strdeq	fp, [r4], -ip
   1c96c:	andeq	fp, r4, r0, lsl ip
   1c970:	andeq	fp, r4, r8, lsr #24
   1c974:	ldrdeq	fp, [r4], -r0
   1c978:	andeq	fp, r4, r4, ror #21
   1c97c:	andeq	fp, r4, r8, lsr ip
   1c980:	andeq	fp, r4, r4, ror #22
   1c984:	andeq	fp, r4, r4, lsl #23
   1c988:	andeq	fp, r4, r0, lsr #21
   1c98c:	andeq	fp, r4, r0, asr #23
   1c990:	ldrdeq	fp, [r4], -r4
   1c994:	andeq	fp, r4, r8, ror #23
   1c998:	andeq	fp, r4, r0, lsr #12
   1c99c:	andeq	fp, r4, r0, lsr r6
   1c9a0:	andeq	fp, r4, r8, asr fp
   1c9a4:	andeq	fp, r4, r4, asr #12
   1c9a8:	andeq	fp, r4, r8, asr r6
   1c9ac:	andeq	fp, r4, r4, ror sl
   1c9b0:	muleq	r4, r0, r2
   1c9b4:	andeq	fp, r4, r0, lsr #22
   1c9b8:	andeq	fp, r4, r4, lsl #11
   1c9bc:	andeq	fp, r4, r0, ror r5
   1c9c0:	andeq	fp, r4, r0, lsr fp
   1c9c4:	andeq	r7, r6, r0, lsr r4
   1c9c8:	muleq	r4, ip, r5
   1c9cc:			; <UNDEFINED> instruction: 0x0004b5b0
   1c9d0:	andeq	r8, r4, r8, lsr #29
   1c9d4:	andeq	fp, r4, r8, lsr fp
   1c9d8:	andeq	fp, r4, r8, asr #20
   1c9dc:	andeq	fp, r4, ip, asr sl
   1c9e0:	andeq	fp, r4, r8, ror #20
   1c9e4:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   1c9e8:	andeq	fp, r4, r8, lsl #21
   1c9ec:	andeq	r9, r6, r0, ror #27
   1c9f0:	andeq	sl, r4, r0, lsl #21
   1c9f4:	andeq	sl, r4, ip, asr #21
   1c9f8:	andeq	fp, r4, r0, ror #19
   1c9fc:	andeq	fp, r4, ip, lsl #22
   1ca00:	andeq	fp, r4, r4, asr r5
   1ca04:	andeq	fp, r4, ip, lsr r5
   1ca08:	cmp	ip, r4
   1ca0c:	addcc	r3, r0, #2
   1ca10:	strcc	r3, [sp, #44]	; 0x2c
   1ca14:	ldrbcc	fp, [r0, #1]
   1ca18:	ldr	r3, [sp, #112]	; 0x70
   1ca1c:	ldr	r2, [sp, #112]	; 0x70
   1ca20:	movcs	fp, #0
   1ca24:	add	r3, r3, #24
   1ca28:	add	r2, r2, #16
   1ca2c:	str	r4, [sp]
   1ca30:	mov	r1, fp
   1ca34:	add	r0, sp, #44	; 0x2c
   1ca38:	bl	1a418 <__assert_fail@plt+0x808c>
   1ca3c:	mov	r8, r0
   1ca40:	mov	r9, r1
   1ca44:	ldr	r0, [pc, #-212]	; 1c978 <__assert_fail@plt+0xa5ec>
   1ca48:	mov	r1, fp
   1ca4c:	bl	11dbc <printf@plt>
   1ca50:	mov	r0, r8
   1ca54:	mov	r2, r7
   1ca58:	mov	r1, r9
   1ca5c:	bl	18e4c <__assert_fail@plt+0x6ac0>
   1ca60:	ldr	r0, [sp, #44]	; 0x2c
   1ca64:	b	1bd3c <__assert_fail@plt+0x99b0>
   1ca68:	ldr	r0, [pc, #-244]	; 1c97c <__assert_fail@plt+0xa5f0>
   1ca6c:	bl	11dbc <printf@plt>
   1ca70:	ldr	r0, [sp, #44]	; 0x2c
   1ca74:	b	1bd3c <__assert_fail@plt+0x99b0>
   1ca78:	add	r0, r0, #5
   1ca7c:	cmp	r4, r0
   1ca80:	bhi	1d040 <__assert_fail@plt+0xacb4>
   1ca84:	cmp	ip, r4
   1ca88:	bcc	1d25c <__assert_fail@plt+0xaed0>
   1ca8c:	ldr	r3, [sp, #28]
   1ca90:	mov	r2, sl
   1ca94:	mov	lr, #0
   1ca98:	add	ip, ip, #4
   1ca9c:	str	lr, [sp]
   1caa0:	ldr	r0, [pc, #-216]	; 1c9d0 <__assert_fail@plt+0xa644>
   1caa4:	str	ip, [sp, #44]	; 0x2c
   1caa8:	bl	18b24 <__assert_fail@plt+0x6798>
   1caac:	mov	r1, r0
   1cab0:	ldr	r0, [pc, #-312]	; 1c980 <__assert_fail@plt+0xa5f4>
   1cab4:	bl	11dbc <printf@plt>
   1cab8:	ldr	r0, [sp, #44]	; 0x2c
   1cabc:	b	1bd3c <__assert_fail@plt+0x99b0>
   1cac0:	mov	r0, ip
   1cac4:	mov	r3, r4
   1cac8:	mov	r2, #0
   1cacc:	add	r1, sp, #52	; 0x34
   1cad0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1cad4:	ldr	r3, [sp, #44]	; 0x2c
   1cad8:	ldr	ip, [sp, #52]	; 0x34
   1cadc:	mov	r2, #0
   1cae0:	add	r3, r3, ip
   1cae4:	str	r2, [sp]
   1cae8:	str	r3, [sp, #44]	; 0x2c
   1caec:	mov	r2, r0
   1caf0:	mov	r3, r1
   1caf4:	ldr	r0, [pc, #-300]	; 1c9d0 <__assert_fail@plt+0xa644>
   1caf8:	bl	18b24 <__assert_fail@plt+0x6798>
   1cafc:	mov	r1, r0
   1cb00:	ldr	r0, [pc, #-388]	; 1c984 <__assert_fail@plt+0xa5f8>
   1cb04:	bl	11dbc <printf@plt>
   1cb08:	ldr	r0, [sp, #44]	; 0x2c
   1cb0c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1cb10:	mov	r2, #5
   1cb14:	ldr	r1, [pc, #-404]	; 1c988 <__assert_fail@plt+0xa5fc>
   1cb18:	mov	r0, #0
   1cb1c:	bl	11ea0 <dcgettext@plt>
   1cb20:	bl	11dbc <printf@plt>
   1cb24:	ldr	r0, [sp, #44]	; 0x2c
   1cb28:	b	1bd3c <__assert_fail@plt+0x99b0>
   1cb2c:	ldr	r0, [pc, #-424]	; 1c98c <__assert_fail@plt+0xa600>
   1cb30:	bl	11dbc <printf@plt>
   1cb34:	ldr	r0, [sp, #44]	; 0x2c
   1cb38:	b	1bd3c <__assert_fail@plt+0x99b0>
   1cb3c:	ldr	r0, [pc, #-436]	; 1c990 <__assert_fail@plt+0xa604>
   1cb40:	bl	11dbc <printf@plt>
   1cb44:	ldr	r0, [sp, #44]	; 0x2c
   1cb48:	b	1bd3c <__assert_fail@plt+0x99b0>
   1cb4c:	ldr	r0, [pc, #-448]	; 1c994 <__assert_fail@plt+0xa608>
   1cb50:	bl	11dbc <printf@plt>
   1cb54:	ldr	r0, [sp, #44]	; 0x2c
   1cb58:	b	1bd3c <__assert_fail@plt+0x99b0>
   1cb5c:	mov	r0, ip
   1cb60:	mov	r3, r4
   1cb64:	mov	r2, #0
   1cb68:	add	r1, sp, #52	; 0x34
   1cb6c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1cb70:	ldr	ip, [sp, #52]	; 0x34
   1cb74:	cmp	fp, #168	; 0xa8
   1cb78:	mov	r2, r0
   1cb7c:	ldr	r0, [sp, #44]	; 0x2c
   1cb80:	mov	r3, r1
   1cb84:	add	r0, r0, ip
   1cb88:	ldr	r1, [pc, #-504]	; 1c998 <__assert_fail@plt+0xa60c>
   1cb8c:	ldr	ip, [pc, #-504]	; 1c99c <__assert_fail@plt+0xa610>
   1cb90:	moveq	fp, r1
   1cb94:	movne	fp, ip
   1cb98:	orrs	r1, r2, r3
   1cb9c:	str	r0, [sp, #44]	; 0x2c
   1cba0:	beq	1cbb0 <__assert_fail@plt+0xa824>
   1cba4:	ldr	r1, [sp, #28]
   1cba8:	adds	r2, r2, sl
   1cbac:	adc	r3, r3, r1
   1cbb0:	mov	r1, #0
   1cbb4:	str	r1, [sp]
   1cbb8:	ldr	r0, [pc, #-496]	; 1c9d0 <__assert_fail@plt+0xa644>
   1cbbc:	bl	18b24 <__assert_fail@plt+0x6798>
   1cbc0:	mov	r1, fp
   1cbc4:	mov	r2, r0
   1cbc8:	ldr	r0, [pc, #-560]	; 1c9a0 <__assert_fail@plt+0xa614>
   1cbcc:	bl	11dbc <printf@plt>
   1cbd0:	ldr	r0, [sp, #44]	; 0x2c
   1cbd4:	b	1bd3c <__assert_fail@plt+0x99b0>
   1cbd8:	mov	r0, ip
   1cbdc:	mov	r3, r4
   1cbe0:	mov	r2, #0
   1cbe4:	add	r1, sp, #52	; 0x34
   1cbe8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1cbec:	ldr	ip, [sp, #52]	; 0x34
   1cbf0:	cmp	fp, #169	; 0xa9
   1cbf4:	mov	r2, r0
   1cbf8:	ldr	r0, [sp, #44]	; 0x2c
   1cbfc:	mov	r3, r1
   1cc00:	add	r0, r0, ip
   1cc04:	ldr	r1, [pc, #-616]	; 1c9a4 <__assert_fail@plt+0xa618>
   1cc08:	ldr	ip, [pc, #-616]	; 1c9a8 <__assert_fail@plt+0xa61c>
   1cc0c:	moveq	fp, r1
   1cc10:	movne	fp, ip
   1cc14:	orrs	r1, r2, r3
   1cc18:	str	r0, [sp, #44]	; 0x2c
   1cc1c:	beq	1cbb0 <__assert_fail@plt+0xa824>
   1cc20:	b	1cba4 <__assert_fail@plt+0xa818>
   1cc24:	ldr	r0, [pc, #-640]	; 1c9ac <__assert_fail@plt+0xa620>
   1cc28:	bl	11dbc <printf@plt>
   1cc2c:	ldr	r0, [sp, #44]	; 0x2c
   1cc30:	b	1bd3c <__assert_fail@plt+0x99b0>
   1cc34:	ldr	r3, [sp, #36]	; 0x24
   1cc38:	cmn	r3, #1
   1cc3c:	beq	1d4c0 <__assert_fail@plt+0xb134>
   1cc40:	ldr	r3, [sp, #36]	; 0x24
   1cc44:	cmp	r3, #2
   1cc48:	beq	1d1e4 <__assert_fail@plt+0xae58>
   1cc4c:	ldr	r3, [sp, #32]
   1cc50:	cmp	r3, #8
   1cc54:	bhi	1d44c <__assert_fail@plt+0xb0c0>
   1cc58:	ldr	r3, [sp, #32]
   1cc5c:	add	r3, ip, r3
   1cc60:	cmp	r4, r3
   1cc64:	bhi	1d334 <__assert_fail@plt+0xafa8>
   1cc68:	cmp	r4, ip
   1cc6c:	bhi	1d360 <__assert_fail@plt+0xafd4>
   1cc70:	mov	r2, #0
   1cc74:	mov	r3, #0
   1cc78:	ldr	r1, [sp, #44]	; 0x2c
   1cc7c:	ldr	r0, [sp, #32]
   1cc80:	add	r1, r1, r0
   1cc84:	str	r1, [sp, #44]	; 0x2c
   1cc88:	ldr	ip, [pc, #-656]	; 1ca00 <__assert_fail@plt+0xa674>
   1cc8c:	ldr	r1, [pc, #-656]	; 1ca04 <__assert_fail@plt+0xa678>
   1cc90:	mov	r8, #0
   1cc94:	cmp	fp, #160	; 0xa0
   1cc98:	str	r8, [sp]
   1cc9c:	ldr	r0, [pc, #-724]	; 1c9d0 <__assert_fail@plt+0xa644>
   1cca0:	moveq	fp, r1
   1cca4:	movne	fp, ip
   1cca8:	bl	18b24 <__assert_fail@plt+0x6798>
   1ccac:	mov	r3, r4
   1ccb0:	mov	r2, #1
   1ccb4:	add	r1, sp, #52	; 0x34
   1ccb8:	mov	r9, r0
   1ccbc:	ldr	r0, [sp, #44]	; 0x2c
   1ccc0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1ccc4:	str	r8, [sp]
   1ccc8:	mov	r2, r0
   1cccc:	mov	r3, r1
   1ccd0:	ldr	r0, [pc, #-808]	; 1c9b0 <__assert_fail@plt+0xa624>
   1ccd4:	bl	18b24 <__assert_fail@plt+0x6798>
   1ccd8:	mov	r2, r9
   1ccdc:	mov	r1, fp
   1cce0:	mov	r3, r0
   1cce4:	ldr	r0, [pc, #-824]	; 1c9b4 <__assert_fail@plt+0xa628>
   1cce8:	b	1c39c <__assert_fail@plt+0xa010>
   1ccec:	mov	r0, ip
   1ccf0:	mov	r3, r4
   1ccf4:	mov	r2, #0
   1ccf8:	add	r1, sp, #52	; 0x34
   1ccfc:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1cd00:	ldr	r3, [sp, #44]	; 0x2c
   1cd04:	ldr	r2, [sp, #52]	; 0x34
   1cd08:	add	r3, r3, r2
   1cd0c:	sub	r8, r4, r3
   1cd10:	str	r3, [sp, #44]	; 0x2c
   1cd14:	asr	r9, r8, #31
   1cd18:	ldr	r3, [pc, #-872]	; 1c9b8 <__assert_fail@plt+0xa62c>
   1cd1c:	cmp	r9, r1
   1cd20:	cmpeq	r8, r0
   1cd24:	movhi	r8, r0
   1cd28:	movhi	r9, r1
   1cd2c:	cmp	fp, #163	; 0xa3
   1cd30:	ldr	r1, [pc, #-892]	; 1c9bc <__assert_fail@plt+0xa630>
   1cd34:	ldr	r0, [pc, #-892]	; 1c9c0 <__assert_fail@plt+0xa634>
   1cd38:	movne	r1, r3
   1cd3c:	bl	11dbc <printf@plt>
   1cd40:	ldr	r3, [sp, #112]	; 0x70
   1cd44:	mov	r1, r7
   1cd48:	str	r3, [sp, #16]
   1cd4c:	ldr	r3, [sp, #28]
   1cd50:	str	sl, [sp, #8]
   1cd54:	str	r3, [sp, #12]
   1cd58:	strd	r8, [sp]
   1cd5c:	ldrd	r2, [sp, #32]
   1cd60:	ldr	r0, [sp, #44]	; 0x2c
   1cd64:	bl	1b888 <__assert_fail@plt+0x94fc>
   1cd68:	ldr	r3, [pc, #-940]	; 1c9c4 <__assert_fail@plt+0xa638>
   1cd6c:	ldr	r1, [r3]
   1cd70:	cmp	r0, #0
   1cd74:	mov	r0, #41	; 0x29
   1cd78:	movne	r6, #1
   1cd7c:	bl	12254 <putc@plt>
   1cd80:	ldr	r0, [sp, #44]	; 0x2c
   1cd84:	add	r0, r0, r8
   1cd88:	cmp	r0, r4
   1cd8c:	movhi	r0, r4
   1cd90:	bhi	1b8b4 <__assert_fail@plt+0x9528>
   1cd94:	str	r0, [sp, #44]	; 0x2c
   1cd98:	b	1bd3c <__assert_fail@plt+0x99b0>
   1cd9c:	mov	r0, ip
   1cda0:	mov	r3, r4
   1cda4:	mov	r2, #0
   1cda8:	add	r1, sp, #52	; 0x34
   1cdac:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1cdb0:	ldr	ip, [pc, #-1008]	; 1c9c8 <__assert_fail@plt+0xa63c>
   1cdb4:	cmp	fp, #164	; 0xa4
   1cdb8:	ldr	r3, [sp, #44]	; 0x2c
   1cdbc:	moveq	fp, ip
   1cdc0:	ldr	ip, [sp, #52]	; 0x34
   1cdc4:	ldr	r2, [pc, #-1024]	; 1c9cc <__assert_fail@plt+0xa640>
   1cdc8:	add	r3, r3, ip
   1cdcc:	movne	fp, r2
   1cdd0:	str	r3, [sp, #44]	; 0x2c
   1cdd4:	mov	r2, #0
   1cdd8:	ldr	r3, [sp, #28]
   1cddc:	str	r2, [sp]
   1cde0:	adds	r2, sl, r0
   1cde4:	adc	r3, r3, r1
   1cde8:	ldr	r0, [pc, #-1056]	; 1c9d0 <__assert_fail@plt+0xa644>
   1cdec:	bl	18b24 <__assert_fail@plt+0x6798>
   1cdf0:	mov	r1, fp
   1cdf4:	mov	r2, r0
   1cdf8:	ldr	r0, [pc, #-1068]	; 1c9d4 <__assert_fail@plt+0xa648>
   1cdfc:	bl	11dbc <printf@plt>
   1ce00:	ldr	r0, [sp, #44]	; 0x2c
   1ce04:	add	ip, r0, #1
   1ce08:	cmp	ip, r4
   1ce0c:	bcc	1d0c8 <__assert_fail@plt+0xad3c>
   1ce10:	cmp	r0, r4
   1ce14:	bcc	1d248 <__assert_fail@plt+0xaebc>
   1ce18:	mov	r2, #0
   1ce1c:	mov	r3, #0
   1ce20:	mov	r1, #32
   1ce24:	str	r4, [sp]
   1ce28:	str	r1, [sp, #4]
   1ce2c:	mov	r0, ip
   1ce30:	str	ip, [sp, #44]	; 0x2c
   1ce34:	bl	19fc4 <__assert_fail@plt+0x7c38>
   1ce38:	str	r0, [sp, #44]	; 0x2c
   1ce3c:	b	1bd3c <__assert_fail@plt+0x99b0>
   1ce40:	ldr	r0, [pc, #-1136]	; 1c9d8 <__assert_fail@plt+0xa64c>
   1ce44:	bl	11dbc <printf@plt>
   1ce48:	mov	r2, #5
   1ce4c:	ldr	r1, [pc, #-1144]	; 1c9dc <__assert_fail@plt+0xa650>
   1ce50:	mov	r0, #0
   1ce54:	bl	11ea0 <dcgettext@plt>
   1ce58:	mov	r3, r4
   1ce5c:	mov	r2, #0
   1ce60:	add	r1, sp, #52	; 0x34
   1ce64:	mov	r8, #0
   1ce68:	mov	r9, r0
   1ce6c:	ldr	r0, [sp, #44]	; 0x2c
   1ce70:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1ce74:	str	r8, [sp]
   1ce78:	mov	r2, r0
   1ce7c:	mov	r3, r1
   1ce80:	ldr	r0, [pc, #-1188]	; 1c9e4 <__assert_fail@plt+0xa658>
   1ce84:	bl	18b24 <__assert_fail@plt+0x6798>
   1ce88:	mov	r1, r0
   1ce8c:	mov	r0, r9
   1ce90:	bl	11dbc <printf@plt>
   1ce94:	ldr	r3, [sp, #44]	; 0x2c
   1ce98:	ldr	r2, [sp, #52]	; 0x34
   1ce9c:	ldr	r1, [pc, #-1220]	; 1c9e0 <__assert_fail@plt+0xa654>
   1cea0:	add	r3, r3, r2
   1cea4:	mov	r0, r8
   1cea8:	mov	r2, #5
   1ceac:	str	r3, [sp, #44]	; 0x2c
   1ceb0:	bl	11ea0 <dcgettext@plt>
   1ceb4:	mov	r3, r4
   1ceb8:	mov	r2, r8
   1cebc:	add	r1, sp, #52	; 0x34
   1cec0:	mov	r9, r0
   1cec4:	ldr	r0, [sp, #44]	; 0x2c
   1cec8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1cecc:	str	r8, [sp]
   1ced0:	mov	r2, r0
   1ced4:	mov	r3, r1
   1ced8:	ldr	r0, [pc, #-1276]	; 1c9e4 <__assert_fail@plt+0xa658>
   1cedc:	bl	18b24 <__assert_fail@plt+0x6798>
   1cee0:	mov	r1, r0
   1cee4:	mov	r0, r9
   1cee8:	b	1bec0 <__assert_fail@plt+0x9b34>
   1ceec:	ldr	r0, [pc, #-1292]	; 1c9e8 <__assert_fail@plt+0xa65c>
   1cef0:	bl	11dbc <printf@plt>
   1cef4:	mov	r3, r4
   1cef8:	mov	r2, #0
   1cefc:	add	r1, sp, #52	; 0x34
   1cf00:	ldr	r0, [sp, #44]	; 0x2c
   1cf04:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1cf08:	ldr	ip, [sp, #44]	; 0x2c
   1cf0c:	ldr	r2, [sp, #52]	; 0x34
   1cf10:	mov	r3, #32
   1cf14:	add	ip, ip, r2
   1cf18:	str	r3, [sp, #4]
   1cf1c:	str	r4, [sp]
   1cf20:	str	ip, [sp, #44]	; 0x2c
   1cf24:	mov	r2, r0
   1cf28:	mov	r3, r1
   1cf2c:	mov	r0, ip
   1cf30:	bl	19fc4 <__assert_fail@plt+0x7c38>
   1cf34:	str	r0, [sp, #44]	; 0x2c
   1cf38:	b	1bd3c <__assert_fail@plt+0x99b0>
   1cf3c:	mov	r1, #2
   1cf40:	mov	r0, ip
   1cf44:	bl	41ab8 <warn@@Base+0x2e8>
   1cf48:	ldr	r3, [sp, #28]
   1cf4c:	ldr	ip, [sp, #44]	; 0x2c
   1cf50:	adds	r2, r0, sl
   1cf54:	adc	r3, r1, r3
   1cf58:	b	1c5c4 <__assert_fail@plt+0xa238>
   1cf5c:	mov	r1, #4
   1cf60:	mov	r0, ip
   1cf64:	bl	41ab8 <warn@@Base+0x2e8>
   1cf68:	ldr	r3, [sp, #28]
   1cf6c:	ldr	ip, [sp, #44]	; 0x2c
   1cf70:	adds	r2, r0, sl
   1cf74:	adc	r3, r1, r3
   1cf78:	b	1c614 <__assert_fail@plt+0xa288>
   1cf7c:	mov	r1, #4
   1cf80:	mov	r0, ip
   1cf84:	bl	41ab8 <warn@@Base+0x2e8>
   1cf88:	ldr	ip, [sp, #44]	; 0x2c
   1cf8c:	mov	r1, r0
   1cf90:	b	1c070 <__assert_fail@plt+0x9ce4>
   1cf94:	sub	r1, r4, ip
   1cf98:	sub	r3, r1, #1
   1cf9c:	cmp	r3, #7
   1cfa0:	bhi	1bd74 <__assert_fail@plt+0x99e8>
   1cfa4:	ldr	r3, [pc, #-1472]	; 1c9ec <__assert_fail@plt+0xa660>
   1cfa8:	mov	r0, ip
   1cfac:	ldr	r3, [r3]
   1cfb0:	blx	r3
   1cfb4:	mov	r2, r0
   1cfb8:	mov	r3, r1
   1cfbc:	b	1bd7c <__assert_fail@plt+0x99f0>
   1cfc0:	mov	r1, #1
   1cfc4:	ldr	r3, [pc, #-1504]	; 1c9ec <__assert_fail@plt+0xa660>
   1cfc8:	mov	r0, ip
   1cfcc:	ldr	r3, [r3]
   1cfd0:	blx	r3
   1cfd4:	ldr	ip, [sp, #44]	; 0x2c
   1cfd8:	mov	r1, r0
   1cfdc:	b	1c568 <__assert_fail@plt+0xa1dc>
   1cfe0:	mov	r1, #1
   1cfe4:	ldr	r3, [pc, #-1536]	; 1c9ec <__assert_fail@plt+0xa660>
   1cfe8:	mov	r0, ip
   1cfec:	ldr	r3, [r3]
   1cff0:	blx	r3
   1cff4:	ldr	ip, [sp, #44]	; 0x2c
   1cff8:	mov	r1, r0
   1cffc:	b	1c538 <__assert_fail@plt+0xa1ac>
   1d000:	mov	r1, #4
   1d004:	ldr	r3, [pc, #-1568]	; 1c9ec <__assert_fail@plt+0xa660>
   1d008:	ldr	r3, [r3]
   1d00c:	blx	r3
   1d010:	ldr	r3, [sp, #44]	; 0x2c
   1d014:	add	r3, r3, #4
   1d018:	mov	r1, r0
   1d01c:	b	1be78 <__assert_fail@plt+0x9aec>
   1d020:	mov	r1, #4
   1d024:	ldr	r3, [pc, #-1600]	; 1c9ec <__assert_fail@plt+0xa660>
   1d028:	mov	r0, ip
   1d02c:	ldr	r3, [r3]
   1d030:	blx	r3
   1d034:	ldr	ip, [sp, #44]	; 0x2c
   1d038:	mov	r1, r0
   1d03c:	b	1be4c <__assert_fail@plt+0x9ac0>
   1d040:	mov	r1, #4
   1d044:	ldr	r3, [pc, #-1632]	; 1c9ec <__assert_fail@plt+0xa660>
   1d048:	mov	r0, ip
   1d04c:	ldr	r3, [r3]
   1d050:	blx	r3
   1d054:	ldr	r3, [sp, #28]
   1d058:	ldr	ip, [sp, #44]	; 0x2c
   1d05c:	adds	r2, sl, r0
   1d060:	adc	r3, r3, r1
   1d064:	b	1ca94 <__assert_fail@plt+0xa708>
   1d068:	mov	r1, #1
   1d06c:	ldr	r3, [pc, #-1672]	; 1c9ec <__assert_fail@plt+0xa660>
   1d070:	mov	r0, ip
   1d074:	ldr	r3, [r3]
   1d078:	blx	r3
   1d07c:	ldr	ip, [sp, #44]	; 0x2c
   1d080:	mov	r1, r0
   1d084:	b	1bdd4 <__assert_fail@plt+0x9a48>
   1d088:	mov	r1, #2
   1d08c:	ldr	r3, [pc, #-1704]	; 1c9ec <__assert_fail@plt+0xa660>
   1d090:	mov	r0, ip
   1d094:	ldr	r3, [r3]
   1d098:	blx	r3
   1d09c:	ldr	ip, [sp, #44]	; 0x2c
   1d0a0:	mov	r1, r0
   1d0a4:	b	1bf28 <__assert_fail@plt+0x9b9c>
   1d0a8:	mov	r1, #1
   1d0ac:	ldr	r3, [pc, #-1736]	; 1c9ec <__assert_fail@plt+0xa660>
   1d0b0:	mov	r0, ip
   1d0b4:	ldr	r3, [r3]
   1d0b8:	blx	r3
   1d0bc:	ldr	ip, [sp, #44]	; 0x2c
   1d0c0:	mov	r2, r0
   1d0c4:	b	1c7a0 <__assert_fail@plt+0xa414>
   1d0c8:	mov	r1, #1
   1d0cc:	ldr	r3, [pc, #-1768]	; 1c9ec <__assert_fail@plt+0xa660>
   1d0d0:	ldr	r3, [r3]
   1d0d4:	blx	r3
   1d0d8:	ldr	ip, [sp, #44]	; 0x2c
   1d0dc:	add	ip, ip, #1
   1d0e0:	mov	r2, r0
   1d0e4:	mov	r3, r1
   1d0e8:	b	1ce20 <__assert_fail@plt+0xaa94>
   1d0ec:	mov	r1, #1
   1d0f0:	ldr	r3, [pc, #-1804]	; 1c9ec <__assert_fail@plt+0xa660>
   1d0f4:	mov	r0, ip
   1d0f8:	ldr	r3, [r3]
   1d0fc:	blx	r3
   1d100:	ldr	ip, [sp, #44]	; 0x2c
   1d104:	mov	r1, r0
   1d108:	b	1c038 <__assert_fail@plt+0x9cac>
   1d10c:	mov	r1, #4
   1d110:	ldr	r3, [pc, #-1836]	; 1c9ec <__assert_fail@plt+0xa660>
   1d114:	mov	r0, ip
   1d118:	ldr	r3, [r3]
   1d11c:	blx	r3
   1d120:	ldr	ip, [sp, #44]	; 0x2c
   1d124:	mov	r1, r0
   1d128:	b	1bfa0 <__assert_fail@plt+0x9c14>
   1d12c:	mov	r3, #5
   1d130:	str	r3, [sp]
   1d134:	ldr	r2, [pc, #-1868]	; 1c9f0 <__assert_fail@plt+0xa664>
   1d138:	mov	r3, r7
   1d13c:	ldr	r1, [pc, #-1872]	; 1c9f4 <__assert_fail@plt+0xa668>
   1d140:	mov	r0, #0
   1d144:	bl	12368 <dcngettext@plt>
   1d148:	mov	r1, r7
   1d14c:	mov	r2, #8
   1d150:	bl	412ac <error@@Base>
   1d154:	ldr	ip, [sp, #44]	; 0x2c
   1d158:	add	r3, ip, #8
   1d15c:	cmp	r4, r3
   1d160:	movhi	r1, #8
   1d164:	bhi	1cfa4 <__assert_fail@plt+0xac18>
   1d168:	b	1bd6c <__assert_fail@plt+0x99e0>
   1d16c:	mov	r1, #4
   1d170:	b	1c0a4 <__assert_fail@plt+0x9d18>
   1d174:	mov	r1, #2
   1d178:	b	1c2e8 <__assert_fail@plt+0x9f5c>
   1d17c:	mov	r1, #2
   1d180:	b	1c240 <__assert_fail@plt+0x9eb4>
   1d184:	mov	r1, #4
   1d188:	b	1bfd8 <__assert_fail@plt+0x9c4c>
   1d18c:	mov	r1, #1
   1d190:	b	1be0c <__assert_fail@plt+0x9a80>
   1d194:	mov	r1, #2
   1d198:	b	1bf60 <__assert_fail@plt+0x9bd4>
   1d19c:	cmp	r7, #8
   1d1a0:	bhi	1d3bc <__assert_fail@plt+0xb030>
   1d1a4:	add	r3, ip, r7
   1d1a8:	cmp	r4, r3
   1d1ac:	bls	1d3f8 <__assert_fail@plt+0xb06c>
   1d1b0:	mov	r3, r7
   1d1b4:	sub	r2, r3, #1
   1d1b8:	cmp	r2, #7
   1d1bc:	bhi	1d49c <__assert_fail@plt+0xb110>
   1d1c0:	mov	r1, r3
   1d1c4:	ldr	r3, [pc, #-2016]	; 1c9ec <__assert_fail@plt+0xa660>
   1d1c8:	mov	r0, ip
   1d1cc:	ldr	r3, [r3]
   1d1d0:	blx	r3
   1d1d4:	ldr	r3, [sp, #44]	; 0x2c
   1d1d8:	add	r3, r3, r7
   1d1dc:	str	r3, [sp, #44]	; 0x2c
   1d1e0:	b	1c694 <__assert_fail@plt+0xa308>
   1d1e4:	cmp	r7, #8
   1d1e8:	bhi	1d370 <__assert_fail@plt+0xafe4>
   1d1ec:	add	r3, ip, r7
   1d1f0:	cmp	r4, r3
   1d1f4:	bls	1d3ac <__assert_fail@plt+0xb020>
   1d1f8:	mov	r3, r7
   1d1fc:	sub	r2, r3, #1
   1d200:	cmp	r2, #7
   1d204:	bhi	1d490 <__assert_fail@plt+0xb104>
   1d208:	mov	r1, r3
   1d20c:	ldr	r3, [pc, #-2088]	; 1c9ec <__assert_fail@plt+0xa660>
   1d210:	mov	r0, ip
   1d214:	ldr	r3, [r3]
   1d218:	blx	r3
   1d21c:	mov	r2, r0
   1d220:	mov	r3, r1
   1d224:	ldr	r1, [sp, #44]	; 0x2c
   1d228:	add	r1, r1, r7
   1d22c:	str	r1, [sp, #44]	; 0x2c
   1d230:	b	1cc88 <__assert_fail@plt+0xa8fc>
   1d234:	sub	r1, r4, r0
   1d238:	sub	r2, r1, #1
   1d23c:	cmp	r2, #7
   1d240:	bhi	1be74 <__assert_fail@plt+0x9ae8>
   1d244:	b	1d004 <__assert_fail@plt+0xac78>
   1d248:	sub	r1, r4, r0
   1d24c:	sub	r3, r1, #1
   1d250:	cmp	r3, #7
   1d254:	bhi	1ce18 <__assert_fail@plt+0xaa8c>
   1d258:	b	1d0cc <__assert_fail@plt+0xad40>
   1d25c:	sub	r1, r4, ip
   1d260:	sub	r3, r1, #1
   1d264:	cmp	r3, #7
   1d268:	bhi	1ca8c <__assert_fail@plt+0xa700>
   1d26c:	b	1d044 <__assert_fail@plt+0xacb8>
   1d270:	sub	r1, r4, ip
   1d274:	sub	r3, r1, #1
   1d278:	cmp	r3, #7
   1d27c:	bhi	1c79c <__assert_fail@plt+0xa410>
   1d280:	b	1d0ac <__assert_fail@plt+0xad20>
   1d284:	sub	r1, r4, ip
   1d288:	sub	r3, r1, #1
   1d28c:	cmp	r3, #7
   1d290:	bhi	1c564 <__assert_fail@plt+0xa1d8>
   1d294:	b	1cfc4 <__assert_fail@plt+0xac38>
   1d298:	sub	r1, r4, ip
   1d29c:	sub	r3, r1, #1
   1d2a0:	cmp	r3, #7
   1d2a4:	bhi	1c534 <__assert_fail@plt+0xa1a8>
   1d2a8:	b	1cfe4 <__assert_fail@plt+0xac58>
   1d2ac:	sub	r1, r4, ip
   1d2b0:	sub	r3, r1, #1
   1d2b4:	cmp	r3, #7
   1d2b8:	bhi	1c034 <__assert_fail@plt+0x9ca8>
   1d2bc:	b	1d0f0 <__assert_fail@plt+0xad64>
   1d2c0:	sub	r1, r4, ip
   1d2c4:	sub	r3, r1, #1
   1d2c8:	cmp	r3, #7
   1d2cc:	bhi	1bf9c <__assert_fail@plt+0x9c10>
   1d2d0:	b	1d110 <__assert_fail@plt+0xad84>
   1d2d4:	sub	r1, r4, ip
   1d2d8:	sub	r3, r1, #1
   1d2dc:	cmp	r3, #7
   1d2e0:	bhi	1bf24 <__assert_fail@plt+0x9b98>
   1d2e4:	b	1d08c <__assert_fail@plt+0xad00>
   1d2e8:	sub	r1, r4, ip
   1d2ec:	sub	r3, r1, #1
   1d2f0:	cmp	r3, #7
   1d2f4:	bhi	1be48 <__assert_fail@plt+0x9abc>
   1d2f8:	b	1d024 <__assert_fail@plt+0xac98>
   1d2fc:	sub	r1, r4, ip
   1d300:	sub	r3, r1, #1
   1d304:	cmp	r3, #7
   1d308:	bhi	1bdd0 <__assert_fail@plt+0x9a44>
   1d30c:	b	1d06c <__assert_fail@plt+0xace0>
   1d310:	ldr	r1, [sp, #32]
   1d314:	sub	r3, r1, #1
   1d318:	cmp	r3, #7
   1d31c:	bhi	1c67c <__assert_fail@plt+0xa2f0>
   1d320:	ldr	r3, [pc, #-2364]	; 1c9ec <__assert_fail@plt+0xa660>
   1d324:	mov	r0, ip
   1d328:	ldr	r3, [r3]
   1d32c:	blx	r3
   1d330:	b	1c684 <__assert_fail@plt+0xa2f8>
   1d334:	ldr	r1, [sp, #32]
   1d338:	sub	r3, r1, #1
   1d33c:	cmp	r3, #7
   1d340:	bhi	1cc70 <__assert_fail@plt+0xa8e4>
   1d344:	ldr	r3, [pc, #-2400]	; 1c9ec <__assert_fail@plt+0xa660>
   1d348:	mov	r0, ip
   1d34c:	ldr	r3, [r3]
   1d350:	blx	r3
   1d354:	mov	r2, r0
   1d358:	mov	r3, r1
   1d35c:	b	1cc78 <__assert_fail@plt+0xa8ec>
   1d360:	sub	r1, r4, ip
   1d364:	b	1d338 <__assert_fail@plt+0xafac>
   1d368:	sub	r1, r4, ip
   1d36c:	b	1d314 <__assert_fail@plt+0xaf88>
   1d370:	mov	r3, #5
   1d374:	str	r3, [sp]
   1d378:	ldr	r2, [pc, #-2448]	; 1c9f0 <__assert_fail@plt+0xa664>
   1d37c:	mov	r3, r7
   1d380:	ldr	r1, [pc, #-2452]	; 1c9f4 <__assert_fail@plt+0xa668>
   1d384:	mov	r0, #0
   1d388:	bl	12368 <dcngettext@plt>
   1d38c:	mov	r1, r7
   1d390:	mov	r2, #8
   1d394:	bl	412ac <error@@Base>
   1d398:	ldr	ip, [sp, #44]	; 0x2c
   1d39c:	add	r3, ip, #8
   1d3a0:	cmp	r4, r3
   1d3a4:	movhi	r1, #8
   1d3a8:	bhi	1d20c <__assert_fail@plt+0xae80>
   1d3ac:	cmp	r4, ip
   1d3b0:	bls	1d490 <__assert_fail@plt+0xb104>
   1d3b4:	sub	r3, r4, ip
   1d3b8:	b	1d1fc <__assert_fail@plt+0xae70>
   1d3bc:	mov	r3, #5
   1d3c0:	str	r3, [sp]
   1d3c4:	ldr	r2, [pc, #-2524]	; 1c9f0 <__assert_fail@plt+0xa664>
   1d3c8:	mov	r3, r7
   1d3cc:	ldr	r1, [pc, #-2528]	; 1c9f4 <__assert_fail@plt+0xa668>
   1d3d0:	mov	r0, #0
   1d3d4:	bl	12368 <dcngettext@plt>
   1d3d8:	mov	r1, r7
   1d3dc:	mov	r2, #8
   1d3e0:	bl	412ac <error@@Base>
   1d3e4:	ldr	ip, [sp, #44]	; 0x2c
   1d3e8:	add	r3, ip, #8
   1d3ec:	cmp	r4, r3
   1d3f0:	movhi	r1, #8
   1d3f4:	bhi	1d1c4 <__assert_fail@plt+0xae38>
   1d3f8:	cmp	r4, ip
   1d3fc:	bls	1d49c <__assert_fail@plt+0xb110>
   1d400:	sub	r3, r4, ip
   1d404:	b	1d1b4 <__assert_fail@plt+0xae28>
   1d408:	ldr	r8, [sp, #32]
   1d40c:	mov	r3, #5
   1d410:	str	r3, [sp]
   1d414:	ldr	r2, [pc, #-2604]	; 1c9f0 <__assert_fail@plt+0xa664>
   1d418:	mov	r3, r8
   1d41c:	ldr	r1, [pc, #-2608]	; 1c9f4 <__assert_fail@plt+0xa668>
   1d420:	mov	r0, #0
   1d424:	bl	12368 <dcngettext@plt>
   1d428:	mov	r1, r8
   1d42c:	mov	r2, #8
   1d430:	bl	412ac <error@@Base>
   1d434:	ldr	ip, [sp, #44]	; 0x2c
   1d438:	add	r3, ip, #8
   1d43c:	cmp	r4, r3
   1d440:	movhi	r1, #8
   1d444:	bhi	1d320 <__assert_fail@plt+0xaf94>
   1d448:	b	1c674 <__assert_fail@plt+0xa2e8>
   1d44c:	ldr	r8, [sp, #32]
   1d450:	mov	r3, #5
   1d454:	str	r3, [sp]
   1d458:	ldr	r2, [pc, #-2672]	; 1c9f0 <__assert_fail@plt+0xa664>
   1d45c:	mov	r3, r8
   1d460:	ldr	r1, [pc, #-2676]	; 1c9f4 <__assert_fail@plt+0xa668>
   1d464:	mov	r0, #0
   1d468:	bl	12368 <dcngettext@plt>
   1d46c:	mov	r1, r8
   1d470:	mov	r2, #8
   1d474:	bl	412ac <error@@Base>
   1d478:	ldr	ip, [sp, #44]	; 0x2c
   1d47c:	add	r3, ip, #8
   1d480:	cmp	r4, r3
   1d484:	movhi	r1, #8
   1d488:	bhi	1d344 <__assert_fail@plt+0xafb8>
   1d48c:	b	1cc68 <__assert_fail@plt+0xa8dc>
   1d490:	mov	r2, #0
   1d494:	mov	r3, #0
   1d498:	b	1d224 <__assert_fail@plt+0xae98>
   1d49c:	mov	r0, #0
   1d4a0:	mov	r1, #0
   1d4a4:	b	1d1d4 <__assert_fail@plt+0xae48>
   1d4a8:	mov	r2, #5
   1d4ac:	ldr	r1, [pc, #-2748]	; 1c9f8 <__assert_fail@plt+0xa66c>
   1d4b0:	mov	r0, #0
   1d4b4:	bl	11ea0 <dcgettext@plt>
   1d4b8:	bl	11dbc <printf@plt>
   1d4bc:	b	1bce4 <__assert_fail@plt+0x9958>
   1d4c0:	mov	r2, #5
   1d4c4:	ldr	r1, [pc, #-2768]	; 1c9fc <__assert_fail@plt+0xa670>
   1d4c8:	mov	r0, #0
   1d4cc:	bl	11ea0 <dcgettext@plt>
   1d4d0:	ldr	r3, [pc, #-2776]	; 1ca00 <__assert_fail@plt+0xa674>
   1d4d4:	cmp	fp, #160	; 0xa0
   1d4d8:	ldr	r1, [pc, #-2780]	; 1ca04 <__assert_fail@plt+0xa678>
   1d4dc:	movne	r1, r3
   1d4e0:	bl	11dbc <printf@plt>
   1d4e4:	b	1bce4 <__assert_fail@plt+0x9958>
   1d4e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4ec:	sub	sp, sp, #44	; 0x2c
   1d4f0:	ldr	sl, [pc, #1204]	; 1d9ac <__assert_fail@plt+0xb620>
   1d4f4:	cmp	r2, #8
   1d4f8:	mov	r7, r2
   1d4fc:	mov	r6, r1
   1d500:	mov	r4, r0
   1d504:	str	r3, [sp, #20]
   1d508:	movcc	r3, r2
   1d50c:	movcs	r3, #8
   1d510:	str	r0, [sp, #24]
   1d514:	str	r3, [sp, #28]
   1d518:	ldr	r3, [sp, #24]
   1d51c:	add	r5, r4, #1
   1d520:	sub	r1, r4, r3
   1d524:	ldr	r3, [sp, #20]
   1d528:	cmp	r5, r6
   1d52c:	add	r1, r1, r3
   1d530:	bhi	1d7ec <__assert_fail@plt+0xb460>
   1d534:	ldr	r0, [pc, #1140]	; 1d9b0 <__assert_fail@plt+0xb624>
   1d538:	bl	11dbc <printf@plt>
   1d53c:	cmp	r5, r6
   1d540:	bne	1d568 <__assert_fail@plt+0xb1dc>
   1d544:	cmp	r4, r6
   1d548:	bcc	1d568 <__assert_fail@plt+0xb1dc>
   1d54c:	mov	r2, #5
   1d550:	ldr	r1, [pc, #1116]	; 1d9b4 <__assert_fail@plt+0xb628>
   1d554:	mov	r0, #0
   1d558:	bl	11ea0 <dcgettext@plt>
   1d55c:	bl	11dbc <printf@plt>
   1d560:	add	sp, sp, #44	; 0x2c
   1d564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d568:	ldr	r3, [sl]
   1d56c:	mov	r1, #1
   1d570:	mov	r0, r4
   1d574:	blx	r3
   1d578:	cmp	r0, #7
   1d57c:	ldrls	pc, [pc, r0, lsl #2]
   1d580:	b	1d788 <__assert_fail@plt+0xb3fc>
   1d584:	andeq	sp, r1, ip, asr #10
   1d588:	andeq	sp, r1, r8, lsl #15
   1d58c:	andeq	sp, r1, r8, lsl #15
   1d590:	andeq	sp, r1, r8, lsl #15
   1d594:	andeq	sp, r1, ip, ror #13
   1d598:	muleq	r1, r0, r6
   1d59c:	andeq	sp, r1, ip, lsl #12
   1d5a0:	andeq	sp, r1, r4, lsr #11
   1d5a4:	cmp	r7, #8
   1d5a8:	add	fp, r5, r7
   1d5ac:	bhi	1d85c <__assert_fail@plt+0xb4d0>
   1d5b0:	cmp	r6, fp
   1d5b4:	movhi	r1, r7
   1d5b8:	bls	1d890 <__assert_fail@plt+0xb504>
   1d5bc:	sub	r3, r1, #1
   1d5c0:	cmp	r3, #7
   1d5c4:	bhi	1d8d8 <__assert_fail@plt+0xb54c>
   1d5c8:	mov	r0, r5
   1d5cc:	ldr	r3, [sl]
   1d5d0:	blx	r3
   1d5d4:	mov	r8, r0
   1d5d8:	mov	r9, r1
   1d5dc:	mov	r3, r6
   1d5e0:	mov	r2, #0
   1d5e4:	add	r1, sp, #36	; 0x24
   1d5e8:	mov	r0, fp
   1d5ec:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1d5f0:	ldr	r4, [sp, #36]	; 0x24
   1d5f4:	add	r4, fp, r4
   1d5f8:	adds	r3, r8, r0
   1d5fc:	str	r3, [sp, #8]
   1d600:	adc	r3, r9, r1
   1d604:	str	r3, [sp, #12]
   1d608:	b	1d730 <__assert_fail@plt+0xb3a4>
   1d60c:	cmp	r7, #8
   1d610:	add	fp, r5, r7
   1d614:	bhi	1d904 <__assert_fail@plt+0xb578>
   1d618:	cmp	r6, fp
   1d61c:	bls	1d8ac <__assert_fail@plt+0xb520>
   1d620:	sub	r3, r7, #1
   1d624:	cmp	r3, #7
   1d628:	mov	r4, r7
   1d62c:	movls	r1, r7
   1d630:	bhi	1d9a0 <__assert_fail@plt+0xb614>
   1d634:	mov	r0, r5
   1d638:	ldr	r3, [sl]
   1d63c:	blx	r3
   1d640:	cmp	r7, #8
   1d644:	mov	r8, r0
   1d648:	mov	r9, r1
   1d64c:	bhi	1d964 <__assert_fail@plt+0xb5d8>
   1d650:	add	r3, fp, r4
   1d654:	cmp	r6, r3
   1d658:	bhi	1d668 <__assert_fail@plt+0xb2dc>
   1d65c:	cmp	r6, fp
   1d660:	bls	1d8f4 <__assert_fail@plt+0xb568>
   1d664:	sub	r4, r6, fp
   1d668:	sub	r3, r4, #1
   1d66c:	cmp	r3, #7
   1d670:	bhi	1d8f4 <__assert_fail@plt+0xb568>
   1d674:	mov	r1, r4
   1d678:	ldr	r3, [sl]
   1d67c:	mov	r0, fp
   1d680:	blx	r3
   1d684:	strd	r0, [sp, #8]
   1d688:	add	r4, fp, r7
   1d68c:	b	1d730 <__assert_fail@plt+0xb3a4>
   1d690:	cmp	r7, #4
   1d694:	add	r8, r5, r7
   1d698:	bhi	1d80c <__assert_fail@plt+0xb480>
   1d69c:	cmp	r8, r6
   1d6a0:	movcc	r1, r7
   1d6a4:	bcs	1d840 <__assert_fail@plt+0xb4b4>
   1d6a8:	sub	r3, r1, #1
   1d6ac:	cmp	r3, #7
   1d6b0:	bhi	1d8cc <__assert_fail@plt+0xb540>
   1d6b4:	mov	r0, r5
   1d6b8:	ldr	r3, [sl]
   1d6bc:	blx	r3
   1d6c0:	str	r0, [sp, #80]	; 0x50
   1d6c4:	mov	r2, r7
   1d6c8:	mov	r1, #0
   1d6cc:	bl	18e4c <__assert_fail@plt+0x6ac0>
   1d6d0:	mov	r2, #5
   1d6d4:	ldr	r1, [pc, #732]	; 1d9b8 <__assert_fail@plt+0xb62c>
   1d6d8:	mov	r0, #0
   1d6dc:	bl	11ea0 <dcgettext@plt>
   1d6e0:	mov	r4, r8
   1d6e4:	bl	11dbc <printf@plt>
   1d6e8:	b	1d518 <__assert_fail@plt+0xb18c>
   1d6ec:	mov	r3, r6
   1d6f0:	mov	r2, #0
   1d6f4:	add	r1, sp, #36	; 0x24
   1d6f8:	mov	r0, r5
   1d6fc:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1d700:	ldr	r4, [sp, #36]	; 0x24
   1d704:	mov	r3, r6
   1d708:	add	r4, r5, r4
   1d70c:	mov	r2, #0
   1d710:	mov	r8, r0
   1d714:	mov	r9, r1
   1d718:	mov	r0, r4
   1d71c:	add	r1, sp, #36	; 0x24
   1d720:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1d724:	ldr	r3, [sp, #36]	; 0x24
   1d728:	add	r4, r4, r3
   1d72c:	strd	r0, [sp, #8]
   1d730:	ldr	r5, [sp, #80]	; 0x50
   1d734:	mov	fp, #0
   1d738:	adds	r0, r5, r8
   1d73c:	adc	r1, fp, r9
   1d740:	mov	r2, r7
   1d744:	bl	18e4c <__assert_fail@plt+0x6ac0>
   1d748:	ldr	r3, [sp, #8]
   1d74c:	mov	r2, r7
   1d750:	adds	r0, r5, r3
   1d754:	ldr	r3, [sp, #12]
   1d758:	adc	r1, fp, r3
   1d75c:	bl	18e4c <__assert_fail@plt+0x6ac0>
   1d760:	ldrd	r2, [sp, #8]
   1d764:	cmp	r3, r9
   1d768:	cmpeq	r2, r8
   1d76c:	beq	1d7cc <__assert_fail@plt+0xb440>
   1d770:	bcc	1d7ac <__assert_fail@plt+0xb420>
   1d774:	ldr	r3, [pc, #576]	; 1d9bc <__assert_fail@plt+0xb630>
   1d778:	mov	r0, #10
   1d77c:	ldr	r1, [r3]
   1d780:	bl	12254 <putc@plt>
   1d784:	b	1d518 <__assert_fail@plt+0xb18c>
   1d788:	mov	r8, r0
   1d78c:	mov	r2, #5
   1d790:	ldr	r1, [pc, #552]	; 1d9c0 <__assert_fail@plt+0xb634>
   1d794:	mov	r0, #0
   1d798:	bl	11ea0 <dcgettext@plt>
   1d79c:	mov	r1, r8
   1d7a0:	bl	412ac <error@@Base>
   1d7a4:	add	sp, sp, #44	; 0x2c
   1d7a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7ac:	mov	r2, #5
   1d7b0:	ldr	r1, [pc, #524]	; 1d9c4 <__assert_fail@plt+0xb638>
   1d7b4:	mov	r0, #0
   1d7b8:	bl	11ea0 <dcgettext@plt>
   1d7bc:	ldr	r3, [pc, #504]	; 1d9bc <__assert_fail@plt+0xb630>
   1d7c0:	ldr	r1, [r3]
   1d7c4:	bl	12314 <fputs@plt>
   1d7c8:	b	1d774 <__assert_fail@plt+0xb3e8>
   1d7cc:	mov	r2, #5
   1d7d0:	ldr	r1, [pc, #496]	; 1d9c8 <__assert_fail@plt+0xb63c>
   1d7d4:	mov	r0, fp
   1d7d8:	bl	11ea0 <dcgettext@plt>
   1d7dc:	ldr	r3, [pc, #472]	; 1d9bc <__assert_fail@plt+0xb630>
   1d7e0:	ldr	r1, [r3]
   1d7e4:	bl	12314 <fputs@plt>
   1d7e8:	b	1d774 <__assert_fail@plt+0xb3e8>
   1d7ec:	mov	r2, #5
   1d7f0:	ldr	r1, [pc, #468]	; 1d9cc <__assert_fail@plt+0xb640>
   1d7f4:	mov	r0, #0
   1d7f8:	bl	11ea0 <dcgettext@plt>
   1d7fc:	ldr	r1, [sp, #20]
   1d800:	bl	417d0 <warn@@Base>
   1d804:	add	sp, sp, #44	; 0x2c
   1d808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d80c:	mov	r3, #5
   1d810:	str	r3, [sp]
   1d814:	ldr	r2, [pc, #436]	; 1d9d0 <__assert_fail@plt+0xb644>
   1d818:	mov	r3, r7
   1d81c:	ldr	r1, [pc, #432]	; 1d9d4 <__assert_fail@plt+0xb648>
   1d820:	mov	r0, #0
   1d824:	bl	12368 <dcngettext@plt>
   1d828:	add	r4, r4, #5
   1d82c:	mov	r2, #4
   1d830:	mov	r1, r7
   1d834:	bl	412ac <error@@Base>
   1d838:	cmp	r6, r4
   1d83c:	bhi	1d998 <__assert_fail@plt+0xb60c>
   1d840:	cmp	r5, r6
   1d844:	bcs	1d8cc <__assert_fail@plt+0xb540>
   1d848:	sub	r1, r6, r5
   1d84c:	sub	r3, r1, #1
   1d850:	cmp	r3, #7
   1d854:	bls	1d6b4 <__assert_fail@plt+0xb328>
   1d858:	b	1d8cc <__assert_fail@plt+0xb540>
   1d85c:	mov	r3, #5
   1d860:	str	r3, [sp]
   1d864:	ldr	r2, [pc, #356]	; 1d9d0 <__assert_fail@plt+0xb644>
   1d868:	mov	r3, r7
   1d86c:	ldr	r1, [pc, #352]	; 1d9d4 <__assert_fail@plt+0xb648>
   1d870:	mov	r0, #0
   1d874:	bl	12368 <dcngettext@plt>
   1d878:	add	r4, r4, #9
   1d87c:	mov	r2, #8
   1d880:	mov	r1, r7
   1d884:	bl	412ac <error@@Base>
   1d888:	cmp	r6, r4
   1d88c:	bhi	1d990 <__assert_fail@plt+0xb604>
   1d890:	cmp	r5, r6
   1d894:	bcs	1d8d8 <__assert_fail@plt+0xb54c>
   1d898:	sub	r1, r6, r5
   1d89c:	sub	r3, r1, #1
   1d8a0:	cmp	r3, #7
   1d8a4:	bls	1d5c8 <__assert_fail@plt+0xb23c>
   1d8a8:	b	1d8d8 <__assert_fail@plt+0xb54c>
   1d8ac:	cmp	r5, r6
   1d8b0:	bcs	1d8e4 <__assert_fail@plt+0xb558>
   1d8b4:	sub	r1, r6, r5
   1d8b8:	sub	r3, r1, #1
   1d8bc:	cmp	r3, #7
   1d8c0:	bhi	1d8e4 <__assert_fail@plt+0xb558>
   1d8c4:	ldr	r4, [sp, #28]
   1d8c8:	b	1d634 <__assert_fail@plt+0xb2a8>
   1d8cc:	mov	r0, #0
   1d8d0:	str	r0, [sp, #80]	; 0x50
   1d8d4:	b	1d6c4 <__assert_fail@plt+0xb338>
   1d8d8:	mov	r8, #0
   1d8dc:	mov	r9, #0
   1d8e0:	b	1d5dc <__assert_fail@plt+0xb250>
   1d8e4:	ldr	r4, [sp, #28]
   1d8e8:	mov	r8, #0
   1d8ec:	mov	r9, #0
   1d8f0:	b	1d650 <__assert_fail@plt+0xb2c4>
   1d8f4:	mov	r2, #0
   1d8f8:	mov	r3, #0
   1d8fc:	strd	r2, [sp, #8]
   1d900:	b	1d688 <__assert_fail@plt+0xb2fc>
   1d904:	mov	r3, #5
   1d908:	str	r3, [sp]
   1d90c:	ldr	r2, [pc, #188]	; 1d9d0 <__assert_fail@plt+0xb644>
   1d910:	mov	r3, r7
   1d914:	ldr	r1, [pc, #184]	; 1d9d4 <__assert_fail@plt+0xb648>
   1d918:	mov	r0, #0
   1d91c:	bl	12368 <dcngettext@plt>
   1d920:	mov	r1, r7
   1d924:	mov	r2, #8
   1d928:	bl	412ac <error@@Base>
   1d92c:	add	r4, r4, #9
   1d930:	cmp	r6, r4
   1d934:	movhi	r1, #8
   1d938:	movhi	r4, r1
   1d93c:	bhi	1d634 <__assert_fail@plt+0xb2a8>
   1d940:	cmp	r5, r6
   1d944:	bcs	1d958 <__assert_fail@plt+0xb5cc>
   1d948:	sub	r1, r6, r5
   1d94c:	sub	r3, r1, #1
   1d950:	cmp	r3, #7
   1d954:	bls	1d8c4 <__assert_fail@plt+0xb538>
   1d958:	ldr	r4, [sp, #28]
   1d95c:	mov	r8, #0
   1d960:	mov	r9, #0
   1d964:	mov	r3, #5
   1d968:	str	r3, [sp]
   1d96c:	ldr	r2, [pc, #92]	; 1d9d0 <__assert_fail@plt+0xb644>
   1d970:	mov	r3, r7
   1d974:	ldr	r1, [pc, #88]	; 1d9d4 <__assert_fail@plt+0xb648>
   1d978:	mov	r0, #0
   1d97c:	bl	12368 <dcngettext@plt>
   1d980:	mov	r2, #8
   1d984:	mov	r1, r7
   1d988:	bl	412ac <error@@Base>
   1d98c:	b	1d650 <__assert_fail@plt+0xb2c4>
   1d990:	mov	r1, #8
   1d994:	b	1d5c8 <__assert_fail@plt+0xb23c>
   1d998:	mov	r1, #4
   1d99c:	b	1d6b4 <__assert_fail@plt+0xb328>
   1d9a0:	mov	r8, #0
   1d9a4:	mov	r9, #0
   1d9a8:	b	1d650 <__assert_fail@plt+0xb2c4>
   1d9ac:	andeq	r9, r6, r0, ror #27
   1d9b0:	andeq	sl, r4, ip, ror #22
   1d9b4:	andeq	sl, r4, r8, ror fp
   1d9b8:	andeq	fp, r4, ip, asr #25
   1d9bc:	andeq	r7, r6, r0, lsr r4
   1d9c0:	ldrdeq	fp, [r4], -ip
   1d9c4:	andeq	sl, r4, r8, lsr #23
   1d9c8:	muleq	r4, r8, fp
   1d9cc:	muleq	r4, r4, ip
   1d9d0:	andeq	sl, r4, r0, lsl #21
   1d9d4:	andeq	sl, r4, ip, asr #21
   1d9d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9dc:	mov	r9, r0
   1d9e0:	sub	sp, sp, #28
   1d9e4:	ldr	ip, [r9, #32]
   1d9e8:	ldr	sl, [r9, #16]
   1d9ec:	ldr	r0, [pc, #248]	; 1daec <__assert_fail@plt+0xb760>
   1d9f0:	add	sl, sl, ip
   1d9f4:	cmp	sl, r3
   1d9f8:	mov	lr, r1
   1d9fc:	movcs	sl, r3
   1da00:	str	r1, [sp, #12]
   1da04:	ldr	r3, [pc, #228]	; 1daf0 <__assert_fail@plt+0xb764>
   1da08:	add	r1, r2, r2, lsl #2
   1da0c:	ldr	ip, [r0, #1440]	; 0x5a0
   1da10:	add	r2, r2, r1, lsl #1
   1da14:	ldr	r4, [lr]
   1da18:	ldr	r1, [r3]
   1da1c:	mov	r0, #10
   1da20:	ldr	r8, [ip, r2, lsl #3]
   1da24:	bl	12254 <putc@plt>
   1da28:	cmp	r4, sl
   1da2c:	bcc	1da88 <__assert_fail@plt+0xb6fc>
   1da30:	b	1dacc <__assert_fail@plt+0xb740>
   1da34:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1da38:	ldr	r4, [sp, #20]
   1da3c:	add	r4, r5, r4
   1da40:	strd	r0, [sp]
   1da44:	mov	r1, fp
   1da48:	ldr	r0, [pc, #164]	; 1daf4 <__assert_fail@plt+0xb768>
   1da4c:	bl	11dbc <printf@plt>
   1da50:	mov	r2, r8
   1da54:	mov	r0, r6
   1da58:	mov	r1, r7
   1da5c:	bl	1a6e4 <__assert_fail@plt+0x8358>
   1da60:	ldrd	r0, [sp]
   1da64:	mov	r2, r8
   1da68:	bl	1a6e4 <__assert_fail@plt+0x8358>
   1da6c:	mov	r2, #5
   1da70:	ldr	r1, [pc, #128]	; 1daf8 <__assert_fail@plt+0xb76c>
   1da74:	mov	r0, #0
   1da78:	bl	11ea0 <dcgettext@plt>
   1da7c:	bl	11dbc <printf@plt>
   1da80:	cmp	sl, r4
   1da84:	bls	1dacc <__assert_fail@plt+0xb740>
   1da88:	mov	r3, sl
   1da8c:	mov	r2, #0
   1da90:	add	r1, sp, #20
   1da94:	mov	r0, r4
   1da98:	ldr	fp, [r9, #16]
   1da9c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1daa0:	ldr	r5, [sp, #20]
   1daa4:	sub	fp, r4, fp
   1daa8:	add	r5, r4, r5
   1daac:	cmp	r5, sl
   1dab0:	mov	r3, sl
   1dab4:	mov	r2, #0
   1dab8:	mov	r6, r0
   1dabc:	mov	r7, r1
   1dac0:	mov	r0, r5
   1dac4:	add	r1, sp, #20
   1dac8:	bne	1da34 <__assert_fail@plt+0xb6a8>
   1dacc:	ldr	r3, [pc, #28]	; 1daf0 <__assert_fail@plt+0xb764>
   1dad0:	mov	r0, #10
   1dad4:	ldr	r1, [r3]
   1dad8:	bl	12254 <putc@plt>
   1dadc:	ldr	r3, [sp, #12]
   1dae0:	str	r4, [r3]
   1dae4:	add	sp, sp, #28
   1dae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daec:	andeq	r7, r6, r0, lsr r5
   1daf0:	andeq	r7, r6, r0, lsr r4
   1daf4:	andeq	sl, r4, ip, ror #22
   1daf8:	andeq	fp, r4, r0, lsl #26
   1dafc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db00:	add	r1, r0, #12
   1db04:	ldr	r4, [r0, #16]
   1db08:	ldr	r5, [r0, #32]
   1db0c:	sub	sp, sp, #12
   1db10:	add	r0, r0, #8
   1db14:	add	r5, r4, r5
   1db18:	bl	1a7b4 <__assert_fail@plt+0x8428>
   1db1c:	cmp	r4, r5
   1db20:	bcs	1dc4c <__assert_fail@plt+0xb8c0>
   1db24:	ldr	sl, [pc, #396]	; 1dcb8 <__assert_fail@plt+0xb92c>
   1db28:	ldr	r9, [pc, #396]	; 1dcbc <__assert_fail@plt+0xb930>
   1db2c:	ldr	r8, [pc, #396]	; 1dcc0 <__assert_fail@plt+0xb934>
   1db30:	ldr	r7, [pc, #396]	; 1dcc4 <__assert_fail@plt+0xb938>
   1db34:	b	1dba0 <__assert_fail@plt+0xb814>
   1db38:	cmp	r3, #1
   1db3c:	beq	1dbf8 <__assert_fail@plt+0xb86c>
   1db40:	cmp	r3, #2
   1db44:	bne	1db98 <__assert_fail@plt+0xb80c>
   1db48:	mov	r2, #0
   1db4c:	mov	r3, r5
   1db50:	add	r1, sp, #4
   1db54:	mov	r0, r4
   1db58:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1db5c:	ldr	fp, [sp, #4]
   1db60:	add	fp, r4, fp
   1db64:	sub	r1, r5, fp
   1db68:	mov	r6, r0
   1db6c:	mov	r0, fp
   1db70:	bl	1217c <strnlen@plt>
   1db74:	ldr	r1, [pc, #332]	; 1dcc8 <__assert_fail@plt+0xb93c>
   1db78:	mov	r2, #5
   1db7c:	add	r4, r0, #1
   1db80:	mov	r0, #0
   1db84:	bl	11ea0 <dcgettext@plt>
   1db88:	mov	r2, fp
   1db8c:	mov	r1, r6
   1db90:	add	r4, fp, r4
   1db94:	bl	11dbc <printf@plt>
   1db98:	cmp	r5, r4
   1db9c:	bls	1dc4c <__assert_fail@plt+0xb8c0>
   1dba0:	ldrb	r3, [r4], #1
   1dba4:	cmp	r3, #3
   1dba8:	beq	1dc58 <__assert_fail@plt+0xb8cc>
   1dbac:	bls	1db38 <__assert_fail@plt+0xb7ac>
   1dbb0:	cmp	r3, #4
   1dbb4:	beq	1dc30 <__assert_fail@plt+0xb8a4>
   1dbb8:	cmp	r3, #255	; 0xff
   1dbbc:	bne	1db98 <__assert_fail@plt+0xb80c>
   1dbc0:	mov	r2, #0
   1dbc4:	mov	r3, r5
   1dbc8:	add	r1, sp, #4
   1dbcc:	mov	r0, r4
   1dbd0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1dbd4:	ldr	fp, [sp, #4]
   1dbd8:	add	fp, r4, fp
   1dbdc:	sub	r1, r5, fp
   1dbe0:	mov	r6, r0
   1dbe4:	mov	r0, fp
   1dbe8:	bl	1217c <strnlen@plt>
   1dbec:	mov	r2, #5
   1dbf0:	mov	r1, r8
   1dbf4:	b	1db7c <__assert_fail@plt+0xb7f0>
   1dbf8:	mov	r2, #0
   1dbfc:	mov	r3, r5
   1dc00:	add	r1, sp, #4
   1dc04:	mov	r0, r4
   1dc08:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1dc0c:	ldr	fp, [sp, #4]
   1dc10:	add	fp, r4, fp
   1dc14:	sub	r1, r5, fp
   1dc18:	mov	r6, r0
   1dc1c:	mov	r0, fp
   1dc20:	bl	1217c <strnlen@plt>
   1dc24:	mov	r2, #5
   1dc28:	mov	r1, r7
   1dc2c:	b	1db7c <__assert_fail@plt+0xb7f0>
   1dc30:	mov	r2, #5
   1dc34:	mov	r1, r9
   1dc38:	mov	r0, #0
   1dc3c:	bl	11ea0 <dcgettext@plt>
   1dc40:	bl	11dbc <printf@plt>
   1dc44:	cmp	r5, r4
   1dc48:	bhi	1dba0 <__assert_fail@plt+0xb814>
   1dc4c:	mov	r0, #1
   1dc50:	add	sp, sp, #12
   1dc54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc58:	mov	r3, r5
   1dc5c:	mov	r2, #0
   1dc60:	add	r1, sp, #4
   1dc64:	mov	r0, r4
   1dc68:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1dc6c:	ldr	r2, [sp, #4]
   1dc70:	mov	r3, r5
   1dc74:	add	r4, r4, r2
   1dc78:	add	r1, sp, #4
   1dc7c:	mov	r2, #0
   1dc80:	mov	fp, r0
   1dc84:	mov	r0, r4
   1dc88:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1dc8c:	mov	r1, sl
   1dc90:	mov	r2, #5
   1dc94:	mov	r6, r0
   1dc98:	ldr	r0, [sp, #4]
   1dc9c:	add	r4, r4, r0
   1dca0:	mov	r0, #0
   1dca4:	bl	11ea0 <dcgettext@plt>
   1dca8:	mov	r2, r6
   1dcac:	mov	r1, fp
   1dcb0:	bl	11dbc <printf@plt>
   1dcb4:	b	1db98 <__assert_fail@plt+0xb80c>
   1dcb8:	andeq	fp, r4, r4, lsl sp
   1dcbc:	andeq	fp, r4, r8, asr #26
   1dcc0:			; <UNDEFINED> instruction: 0x0004bdbc
   1dcc4:	andeq	fp, r4, r0, ror #26
   1dcc8:	muleq	r4, r0, sp
   1dccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcd0:	sub	sp, sp, #20
   1dcd4:	mov	r3, r2
   1dcd8:	mov	r7, r2
   1dcdc:	mov	r9, r1
   1dce0:	mov	r2, #0
   1dce4:	add	r1, sp, #12
   1dce8:	mov	r8, r0
   1dcec:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1dcf0:	ldr	r4, [sp, #12]
   1dcf4:	add	r5, r8, r4
   1dcf8:	sub	r3, r7, r5
   1dcfc:	clz	r3, r3
   1dd00:	lsr	r3, r3, #5
   1dd04:	cmp	r0, #0
   1dd08:	moveq	r3, #1
   1dd0c:	cmp	r3, #0
   1dd10:	bne	1dd24 <__assert_fail@plt+0xb998>
   1dd14:	sub	r2, r7, r5
   1dd18:	cmp	r2, r0
   1dd1c:	mov	ip, r0
   1dd20:	bcs	1dd44 <__assert_fail@plt+0xb9b8>
   1dd24:	mov	r2, #5
   1dd28:	ldr	r1, [pc, #1976]	; 1e4e8 <__assert_fail@plt+0xc15c>
   1dd2c:	mov	r0, #0
   1dd30:	bl	11ea0 <dcgettext@plt>
   1dd34:	bl	417d0 <warn@@Base>
   1dd38:	ldr	r0, [sp, #12]
   1dd3c:	add	sp, sp, #20
   1dd40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd44:	ldrb	sl, [r8, r4]
   1dd48:	mov	r0, r3
   1dd4c:	mov	r2, #5
   1dd50:	ldr	r1, [pc, #1940]	; 1e4ec <__assert_fail@plt+0xc160>
   1dd54:	add	r4, r4, ip
   1dd58:	bl	11ea0 <dcgettext@plt>
   1dd5c:	mov	r1, sl
   1dd60:	bl	11dbc <printf@plt>
   1dd64:	sub	r3, sl, #1
   1dd68:	add	r6, r5, #1
   1dd6c:	cmp	r3, #127	; 0x7f
   1dd70:	ldrls	pc, [pc, r3, lsl #2]
   1dd74:	b	1e320 <__assert_fail@plt+0xbf94>
   1dd78:	andeq	lr, r1, r0
   1dd7c:	andeq	lr, r1, r8, asr r0
   1dd80:	andeq	lr, r1, r8, asr r1
   1dd84:			; <UNDEFINED> instruction: 0x0001e2b8
   1dd88:	andeq	lr, r1, r0, lsr #6
   1dd8c:	andeq	lr, r1, r0, lsr #6
   1dd90:	andeq	lr, r1, r0, lsr #6
   1dd94:	andeq	lr, r1, r0, lsr #6
   1dd98:	andeq	lr, r1, r0, lsr #6
   1dd9c:	andeq	lr, r1, r0, lsr #6
   1dda0:	andeq	lr, r1, r0, lsr #6
   1dda4:	andeq	lr, r1, r0, lsr #6
   1dda8:	andeq	lr, r1, r0, lsr #6
   1ddac:	andeq	lr, r1, r0, lsr #6
   1ddb0:	andeq	lr, r1, r0, lsr #6
   1ddb4:	andeq	lr, r1, r0, lsr #6
   1ddb8:	andeq	lr, r1, r8, lsl #6
   1ddbc:	andeq	lr, r1, r4, lsl r3
   1ddc0:	strdeq	lr, [r1], -r8
   1ddc4:	andeq	lr, r1, r4, lsl #2
   1ddc8:	andeq	lr, r1, r0, lsl r1
   1ddcc:	andeq	lr, r1, ip, lsl r1
   1ddd0:	andeq	lr, r1, r8, lsr #2
   1ddd4:	andeq	lr, r1, r4, lsr r1
   1ddd8:	andeq	lr, r1, r0, asr #2
   1dddc:	andeq	lr, r1, r0, lsr #6
   1dde0:	andeq	lr, r1, r0, lsr #6
   1dde4:	andeq	lr, r1, r0, lsr #6
   1dde8:	andeq	lr, r1, r0, lsr #6
   1ddec:	andeq	lr, r1, r0, lsr #6
   1ddf0:	andeq	lr, r1, r0, lsr #6
   1ddf4:	andeq	lr, r1, ip, asr #2
   1ddf8:	andeq	lr, r1, r0, lsr #6
   1ddfc:	andeq	lr, r1, r0, lsr #6
   1de00:	andeq	lr, r1, r0, lsr #6
   1de04:	andeq	lr, r1, r0, lsr #6
   1de08:	andeq	lr, r1, r0, lsr #6
   1de0c:	andeq	lr, r1, r0, lsr #6
   1de10:	andeq	lr, r1, r0, lsr #6
   1de14:	andeq	lr, r1, r0, lsr #6
   1de18:	andeq	lr, r1, r0, lsr #6
   1de1c:	andeq	lr, r1, r0, lsr #6
   1de20:	andeq	lr, r1, r0, lsr #6
   1de24:	andeq	lr, r1, r0, lsr #6
   1de28:	andeq	lr, r1, r0, lsr #6
   1de2c:	andeq	lr, r1, r0, lsr #6
   1de30:	andeq	lr, r1, r0, lsr #6
   1de34:	andeq	lr, r1, r0, lsr #6
   1de38:	andeq	lr, r1, r0, lsr #6
   1de3c:	andeq	lr, r1, r0, lsr #6
   1de40:	andeq	lr, r1, r0, lsr #6
   1de44:	andeq	lr, r1, r0, lsr #6
   1de48:	andeq	lr, r1, r0, lsr #6
   1de4c:	andeq	lr, r1, r0, lsr #6
   1de50:	andeq	lr, r1, r0, lsr #6
   1de54:	andeq	lr, r1, r0, lsr #6
   1de58:	andeq	lr, r1, r0, lsr #6
   1de5c:	andeq	lr, r1, r0, lsr #6
   1de60:	andeq	lr, r1, r0, lsr #6
   1de64:	andeq	lr, r1, r0, lsr #6
   1de68:	andeq	lr, r1, r0, lsr #6
   1de6c:	andeq	lr, r1, r0, lsr #6
   1de70:	andeq	lr, r1, r0, lsr #6
   1de74:	andeq	lr, r1, r0, lsr #6
   1de78:	andeq	lr, r1, r0, lsr #6
   1de7c:	andeq	lr, r1, r0, lsr #6
   1de80:	andeq	lr, r1, r0, lsr #6
   1de84:	andeq	lr, r1, r0, lsr #6
   1de88:	andeq	lr, r1, r0, lsr #6
   1de8c:	andeq	lr, r1, r0, lsr #6
   1de90:	andeq	lr, r1, r0, lsr #6
   1de94:	andeq	lr, r1, r0, lsr #6
   1de98:	andeq	lr, r1, r0, lsr #6
   1de9c:	andeq	lr, r1, r0, lsr #6
   1dea0:	andeq	lr, r1, r0, lsr #6
   1dea4:	andeq	lr, r1, r0, lsr #6
   1dea8:	andeq	lr, r1, r0, lsr #6
   1deac:	andeq	lr, r1, r0, lsr #6
   1deb0:	andeq	lr, r1, r0, lsr #6
   1deb4:	andeq	lr, r1, r0, lsr #6
   1deb8:	andeq	lr, r1, r0, lsr #6
   1debc:	andeq	lr, r1, r0, lsr #6
   1dec0:	andeq	lr, r1, r0, lsr #6
   1dec4:	andeq	lr, r1, r0, lsr #6
   1dec8:	andeq	lr, r1, r0, lsr #6
   1decc:	andeq	lr, r1, r0, lsr #6
   1ded0:	andeq	lr, r1, r0, lsr #6
   1ded4:	andeq	lr, r1, r0, lsr #6
   1ded8:	andeq	lr, r1, r0, lsr #6
   1dedc:	andeq	lr, r1, r0, lsr #6
   1dee0:	andeq	lr, r1, r0, lsr #6
   1dee4:	andeq	lr, r1, r0, lsr #6
   1dee8:	andeq	lr, r1, r0, lsr #6
   1deec:	andeq	lr, r1, r0, lsr #6
   1def0:	andeq	lr, r1, r0, lsr #6
   1def4:	andeq	lr, r1, r0, lsr #6
   1def8:	andeq	lr, r1, r0, lsr #6
   1defc:	andeq	lr, r1, r0, lsr #6
   1df00:	andeq	lr, r1, r0, lsr #6
   1df04:	andeq	lr, r1, r0, lsr #6
   1df08:	andeq	lr, r1, r0, lsr #6
   1df0c:	andeq	lr, r1, r0, lsr #6
   1df10:	andeq	lr, r1, r0, lsr #6
   1df14:	andeq	lr, r1, r0, lsr #6
   1df18:	andeq	lr, r1, r0, lsr #6
   1df1c:	andeq	lr, r1, r0, lsr #6
   1df20:	andeq	lr, r1, r0, lsr #6
   1df24:	andeq	lr, r1, r0, lsr #6
   1df28:	andeq	lr, r1, r0, lsr #6
   1df2c:	andeq	lr, r1, r0, lsr #6
   1df30:	andeq	lr, r1, r0, lsr #6
   1df34:	andeq	lr, r1, r0, lsr #6
   1df38:	andeq	lr, r1, r0, lsr #6
   1df3c:	andeq	lr, r1, r0, lsr #6
   1df40:	andeq	lr, r1, r0, lsr #6
   1df44:	andeq	lr, r1, r0, lsr #6
   1df48:	andeq	lr, r1, r0, lsr #6
   1df4c:	andeq	lr, r1, r0, lsr #6
   1df50:	andeq	lr, r1, r0, lsr #6
   1df54:	andeq	lr, r1, r0, lsr #6
   1df58:	andeq	lr, r1, r0, lsr #6
   1df5c:	andeq	lr, r1, r0, lsr #6
   1df60:	andeq	lr, r1, r0, lsr #6
   1df64:	andeq	lr, r1, r0, lsr #6
   1df68:	andeq	lr, r1, r0, lsr #6
   1df6c:	andeq	lr, r1, r0, lsr #6
   1df70:	andeq	lr, r1, r0, lsr #6
   1df74:	andeq	sp, r1, r8, ror pc
   1df78:	ldr	r3, [sp, #12]
   1df7c:	ldr	r0, [pc, #1388]	; 1e4f0 <__assert_fail@plt+0xc164>
   1df80:	sub	r3, r4, r3
   1df84:	add	r5, r5, r3
   1df88:	bl	11fe4 <puts@plt>
   1df8c:	cmp	r6, r5
   1df90:	bcs	1dff4 <__assert_fail@plt+0xbc68>
   1df94:	ldr	r8, [pc, #1368]	; 1e4f4 <__assert_fail@plt+0xc168>
   1df98:	ldr	fp, [pc, #1368]	; 1e4f8 <__assert_fail@plt+0xc16c>
   1df9c:	ldr	sl, [pc, #1368]	; 1e4fc <__assert_fail@plt+0xc170>
   1dfa0:	ldr	r9, [pc, #1368]	; 1e500 <__assert_fail@plt+0xc174>
   1dfa4:	mov	r3, r5
   1dfa8:	mov	r0, r6
   1dfac:	mov	r2, #0
   1dfb0:	add	r1, sp, #12
   1dfb4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1dfb8:	ldr	r3, [sp, #12]
   1dfbc:	add	r6, r6, r3
   1dfc0:	cmp	r0, #2
   1dfc4:	beq	1e46c <__assert_fail@plt+0xc0e0>
   1dfc8:	cmp	r0, #3
   1dfcc:	beq	1e3a8 <__assert_fail@plt+0xc01c>
   1dfd0:	cmp	r0, #1
   1dfd4:	beq	1e394 <__assert_fail@plt+0xc008>
   1dfd8:	mov	r7, r0
   1dfdc:	ldr	r1, [pc, #1312]	; 1e504 <__assert_fail@plt+0xc178>
   1dfe0:	mov	r2, #5
   1dfe4:	mov	r0, #0
   1dfe8:	bl	11ea0 <dcgettext@plt>
   1dfec:	mov	r1, r7
   1dff0:	bl	11dbc <printf@plt>
   1dff4:	mov	r0, r4
   1dff8:	add	sp, sp, #20
   1dffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e000:	mov	r2, #5
   1e004:	ldr	r1, [pc, #1276]	; 1e508 <__assert_fail@plt+0xc17c>
   1e008:	mov	r0, #0
   1e00c:	bl	11ea0 <dcgettext@plt>
   1e010:	bl	11dbc <printf@plt>
   1e014:	ldr	r3, [pc, #1264]	; 1e50c <__assert_fail@plt+0xc180>
   1e018:	mov	r2, #0
   1e01c:	add	r1, r3, #1440	; 0x5a0
   1e020:	mov	r6, #0
   1e024:	strh	r2, [r1, #40]	; 0x28
   1e028:	mov	r7, #0
   1e02c:	add	r1, r3, #1456	; 0x5b0
   1e030:	str	r2, [r3, #1456]	; 0x5b0
   1e034:	str	r2, [r3, #1468]	; 0x5bc
   1e038:	str	r2, [r3, #1476]	; 0x5c4
   1e03c:	str	r2, [r3, #1484]	; 0x5cc
   1e040:	mov	r2, #1
   1e044:	str	r9, [r3, #1472]	; 0x5c0
   1e048:	strd	r6, [r1, #-8]
   1e04c:	str	r2, [r3, #1460]	; 0x5b4
   1e050:	str	r2, [r3, #1464]	; 0x5b8
   1e054:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e058:	ldr	r3, [sp, #12]
   1e05c:	sub	r3, r4, r3
   1e060:	sub	r1, r3, #1
   1e064:	cmp	r1, #8
   1e068:	bhi	1e4bc <__assert_fail@plt+0xc130>
   1e06c:	add	r5, r5, r3
   1e070:	cmp	r7, r5
   1e074:	bhi	1e084 <__assert_fail@plt+0xbcf8>
   1e078:	cmp	r7, r6
   1e07c:	bls	1e4b0 <__assert_fail@plt+0xc124>
   1e080:	sub	r1, r7, r6
   1e084:	sub	r3, r1, #1
   1e088:	cmp	r3, #7
   1e08c:	bhi	1e4b0 <__assert_fail@plt+0xc124>
   1e090:	ldr	r3, [pc, #1144]	; 1e510 <__assert_fail@plt+0xc184>
   1e094:	mov	r0, r6
   1e098:	ldr	r3, [r3]
   1e09c:	blx	r3
   1e0a0:	mov	r6, r0
   1e0a4:	mov	r7, r1
   1e0a8:	ldr	r1, [pc, #1124]	; 1e514 <__assert_fail@plt+0xc188>
   1e0ac:	mov	r2, #5
   1e0b0:	mov	r0, #0
   1e0b4:	mov	r5, r0
   1e0b8:	bl	11ea0 <dcgettext@plt>
   1e0bc:	mov	r2, r6
   1e0c0:	mov	r3, r7
   1e0c4:	str	r5, [sp]
   1e0c8:	mov	r8, r0
   1e0cc:	ldr	r0, [pc, #1092]	; 1e518 <__assert_fail@plt+0xc18c>
   1e0d0:	bl	18b24 <__assert_fail@plt+0x6798>
   1e0d4:	mov	r1, r0
   1e0d8:	mov	r0, r8
   1e0dc:	bl	11dbc <printf@plt>
   1e0e0:	ldr	r3, [pc, #1060]	; 1e50c <__assert_fail@plt+0xc180>
   1e0e4:	add	r2, r3, #1456	; 0x5b0
   1e0e8:	str	r5, [r3, #1456]	; 0x5b0
   1e0ec:	strb	r5, [r3, #1480]	; 0x5c8
   1e0f0:	strd	r6, [r2, #-8]
   1e0f4:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e0f8:	ldr	r0, [pc, #1052]	; 1e51c <__assert_fail@plt+0xc190>
   1e0fc:	bl	11fe4 <puts@plt>
   1e100:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e104:	ldr	r0, [pc, #1044]	; 1e520 <__assert_fail@plt+0xc194>
   1e108:	bl	11fe4 <puts@plt>
   1e10c:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e110:	ldr	r0, [pc, #1036]	; 1e524 <__assert_fail@plt+0xc198>
   1e114:	bl	11fe4 <puts@plt>
   1e118:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e11c:	ldr	r0, [pc, #1028]	; 1e528 <__assert_fail@plt+0xc19c>
   1e120:	bl	11fe4 <puts@plt>
   1e124:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e128:	ldr	r0, [pc, #1020]	; 1e52c <__assert_fail@plt+0xc1a0>
   1e12c:	bl	11fe4 <puts@plt>
   1e130:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e134:	ldr	r0, [pc, #1012]	; 1e530 <__assert_fail@plt+0xc1a4>
   1e138:	bl	11fe4 <puts@plt>
   1e13c:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e140:	ldr	r0, [pc, #1004]	; 1e534 <__assert_fail@plt+0xc1a8>
   1e144:	bl	11fe4 <puts@plt>
   1e148:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e14c:	ldr	r0, [pc, #996]	; 1e538 <__assert_fail@plt+0xc1ac>
   1e150:	bl	11fe4 <puts@plt>
   1e154:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e158:	mov	r2, #5
   1e15c:	ldr	r1, [pc, #984]	; 1e53c <__assert_fail@plt+0xc1b0>
   1e160:	mov	r0, #0
   1e164:	bl	11ea0 <dcgettext@plt>
   1e168:	bl	11dbc <printf@plt>
   1e16c:	mov	r2, #5
   1e170:	ldr	r1, [pc, #968]	; 1e540 <__assert_fail@plt+0xc1b4>
   1e174:	mov	r0, #0
   1e178:	bl	11ea0 <dcgettext@plt>
   1e17c:	bl	11dbc <printf@plt>
   1e180:	ldr	r2, [pc, #900]	; 1e50c <__assert_fail@plt+0xc180>
   1e184:	ldr	r0, [pc, #952]	; 1e544 <__assert_fail@plt+0xc1b8>
   1e188:	add	r5, r4, #1
   1e18c:	ldr	r3, [r2, #1484]	; 0x5cc
   1e190:	mov	r9, #0
   1e194:	add	r3, r3, #1
   1e198:	mov	r1, r3
   1e19c:	str	r3, [r2, #1484]	; 0x5cc
   1e1a0:	bl	11dbc <printf@plt>
   1e1a4:	sub	r1, r7, r6
   1e1a8:	mov	r0, r6
   1e1ac:	bl	1217c <strnlen@plt>
   1e1b0:	add	r5, r6, r5
   1e1b4:	mov	r3, r7
   1e1b8:	mov	r2, r9
   1e1bc:	add	r1, sp, #12
   1e1c0:	mov	sl, r0
   1e1c4:	mov	r0, r5
   1e1c8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1e1cc:	str	r9, [sp]
   1e1d0:	mov	r2, r0
   1e1d4:	mov	r3, r1
   1e1d8:	ldr	r0, [pc, #788]	; 1e4f4 <__assert_fail@plt+0xc168>
   1e1dc:	bl	18b24 <__assert_fail@plt+0x6798>
   1e1e0:	mov	r1, r0
   1e1e4:	ldr	r0, [pc, #860]	; 1e548 <__assert_fail@plt+0xc1bc>
   1e1e8:	bl	11dbc <printf@plt>
   1e1ec:	ldr	r3, [sp, #12]
   1e1f0:	mov	r2, r9
   1e1f4:	add	r5, r5, r3
   1e1f8:	mov	r0, r5
   1e1fc:	mov	r3, r7
   1e200:	add	r1, sp, #12
   1e204:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1e208:	str	r9, [sp]
   1e20c:	mov	r2, r0
   1e210:	mov	r3, r1
   1e214:	ldr	r0, [pc, #728]	; 1e4f4 <__assert_fail@plt+0xc168>
   1e218:	bl	18b24 <__assert_fail@plt+0x6798>
   1e21c:	mov	r1, r0
   1e220:	ldr	r0, [pc, #800]	; 1e548 <__assert_fail@plt+0xc1bc>
   1e224:	bl	11dbc <printf@plt>
   1e228:	ldr	r3, [sp, #12]
   1e22c:	mov	r2, r9
   1e230:	add	r5, r5, r3
   1e234:	mov	r0, r5
   1e238:	mov	r3, r7
   1e23c:	add	r1, sp, #12
   1e240:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1e244:	str	r9, [sp]
   1e248:	mov	r2, r0
   1e24c:	mov	r3, r1
   1e250:	ldr	r0, [pc, #668]	; 1e4f4 <__assert_fail@plt+0xc168>
   1e254:	bl	18b24 <__assert_fail@plt+0x6798>
   1e258:	mov	r1, r0
   1e25c:	ldr	r0, [pc, #740]	; 1e548 <__assert_fail@plt+0xc1bc>
   1e260:	bl	11dbc <printf@plt>
   1e264:	ldr	r3, [sp, #12]
   1e268:	mov	r1, sl
   1e26c:	add	r5, r5, r3
   1e270:	sub	r8, r5, r8
   1e274:	sub	r5, r7, r5
   1e278:	clz	r5, r5
   1e27c:	lsr	r5, r5, #5
   1e280:	mov	r2, r6
   1e284:	ldr	r0, [pc, #704]	; 1e54c <__assert_fail@plt+0xc1c0>
   1e288:	cmp	r8, r4
   1e28c:	moveq	r8, r5
   1e290:	orrne	r8, r5, #1
   1e294:	bl	11dbc <printf@plt>
   1e298:	cmp	r8, r9
   1e29c:	beq	1dff4 <__assert_fail@plt+0xbc68>
   1e2a0:	mov	r2, #5
   1e2a4:	ldr	r1, [pc, #676]	; 1e550 <__assert_fail@plt+0xc1c4>
   1e2a8:	mov	r0, r9
   1e2ac:	bl	11ea0 <dcgettext@plt>
   1e2b0:	bl	417d0 <warn@@Base>
   1e2b4:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e2b8:	mov	r2, #5
   1e2bc:	ldr	r1, [pc, #656]	; 1e554 <__assert_fail@plt+0xc1c8>
   1e2c0:	mov	r0, #0
   1e2c4:	bl	11ea0 <dcgettext@plt>
   1e2c8:	mov	r3, r7
   1e2cc:	add	r1, sp, #12
   1e2d0:	mov	r2, #0
   1e2d4:	mov	r5, r0
   1e2d8:	mov	r0, r6
   1e2dc:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1e2e0:	mov	r3, #0
   1e2e4:	str	r3, [sp]
   1e2e8:	mov	r2, r0
   1e2ec:	mov	r3, r1
   1e2f0:	ldr	r0, [pc, #508]	; 1e4f4 <__assert_fail@plt+0xc168>
   1e2f4:	bl	18b24 <__assert_fail@plt+0x6798>
   1e2f8:	mov	r1, r0
   1e2fc:	mov	r0, r5
   1e300:	bl	11dbc <printf@plt>
   1e304:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e308:	ldr	r0, [pc, #584]	; 1e558 <__assert_fail@plt+0xc1cc>
   1e30c:	bl	11fe4 <puts@plt>
   1e310:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e314:	ldr	r0, [pc, #576]	; 1e55c <__assert_fail@plt+0xc1d0>
   1e318:	bl	11fe4 <puts@plt>
   1e31c:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e320:	tst	sl, #128	; 0x80
   1e324:	ldr	r7, [sp, #12]
   1e328:	ldrne	r1, [pc, #560]	; 1e560 <__assert_fail@plt+0xc1d4>
   1e32c:	ldreq	r1, [pc, #560]	; 1e564 <__assert_fail@plt+0xc1d8>
   1e330:	mov	r2, #5
   1e334:	mov	r0, #0
   1e338:	bl	11ea0 <dcgettext@plt>
   1e33c:	mvn	r7, r7
   1e340:	bl	11dbc <printf@plt>
   1e344:	add	r7, r7, r4
   1e348:	mov	r2, #5
   1e34c:	ldr	r1, [pc, #532]	; 1e568 <__assert_fail@plt+0xc1dc>
   1e350:	mov	r0, #0
   1e354:	bl	11ea0 <dcgettext@plt>
   1e358:	mov	r1, r7
   1e35c:	bl	11dbc <printf@plt>
   1e360:	cmp	r7, #0
   1e364:	beq	1e388 <__assert_fail@plt+0xbffc>
   1e368:	add	r7, r7, #1
   1e36c:	ldr	r8, [pc, #504]	; 1e56c <__assert_fail@plt+0xc1e0>
   1e370:	add	r5, r5, r7
   1e374:	ldrb	r1, [r6], #1
   1e378:	mov	r0, r8
   1e37c:	bl	11dbc <printf@plt>
   1e380:	cmp	r5, r6
   1e384:	bne	1e374 <__assert_fail@plt+0xbfe8>
   1e388:	ldr	r0, [pc, #480]	; 1e570 <__assert_fail@plt+0xc1e4>
   1e38c:	bl	11fe4 <puts@plt>
   1e390:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e394:	ldr	r0, [pc, #472]	; 1e574 <__assert_fail@plt+0xc1e8>
   1e398:	bl	11fe4 <puts@plt>
   1e39c:	cmp	r6, r5
   1e3a0:	bcc	1dfa4 <__assert_fail@plt+0xbc18>
   1e3a4:	b	1dff4 <__assert_fail@plt+0xbc68>
   1e3a8:	mov	r0, sl
   1e3ac:	bl	11dbc <printf@plt>
   1e3b0:	mov	r3, r5
   1e3b4:	mov	r2, #0
   1e3b8:	mov	r0, r6
   1e3bc:	add	r1, sp, #12
   1e3c0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1e3c4:	mov	r7, #0
   1e3c8:	str	r7, [sp]
   1e3cc:	mov	r2, r0
   1e3d0:	mov	r3, r1
   1e3d4:	mov	r0, r8
   1e3d8:	bl	18b24 <__assert_fail@plt+0x6798>
   1e3dc:	mov	r1, r0
   1e3e0:	mov	r0, r9
   1e3e4:	bl	11dbc <printf@plt>
   1e3e8:	ldr	r3, [sp, #12]
   1e3ec:	mov	r2, r7
   1e3f0:	add	r6, r6, r3
   1e3f4:	mov	r0, r6
   1e3f8:	mov	r3, r5
   1e3fc:	add	r1, sp, #12
   1e400:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1e404:	str	r7, [sp]
   1e408:	mov	r2, r0
   1e40c:	mov	r3, r1
   1e410:	mov	r0, r8
   1e414:	bl	18b24 <__assert_fail@plt+0x6798>
   1e418:	mov	r1, r0
   1e41c:	ldr	r0, [pc, #340]	; 1e578 <__assert_fail@plt+0xc1ec>
   1e420:	bl	11dbc <printf@plt>
   1e424:	ldr	r3, [sp, #12]
   1e428:	mov	r2, r7
   1e42c:	add	r6, r6, r3
   1e430:	mov	r0, r6
   1e434:	mov	r3, r5
   1e438:	add	r1, sp, #12
   1e43c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1e440:	str	r7, [sp]
   1e444:	mov	r3, r1
   1e448:	mov	r2, r0
   1e44c:	mov	r0, r8
   1e450:	bl	18b24 <__assert_fail@plt+0x6798>
   1e454:	mov	r1, r0
   1e458:	ldr	r0, [pc, #284]	; 1e57c <__assert_fail@plt+0xc1f0>
   1e45c:	bl	11dbc <printf@plt>
   1e460:	ldr	r3, [sp, #12]
   1e464:	add	r6, r6, r3
   1e468:	b	1e39c <__assert_fail@plt+0xc010>
   1e46c:	mov	r3, r5
   1e470:	mov	r2, #0
   1e474:	mov	r0, r6
   1e478:	add	r1, sp, #12
   1e47c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1e480:	mov	r3, #0
   1e484:	str	r3, [sp]
   1e488:	mov	r2, r0
   1e48c:	mov	r3, r1
   1e490:	mov	r0, r8
   1e494:	bl	18b24 <__assert_fail@plt+0x6798>
   1e498:	mov	r1, r0
   1e49c:	mov	r0, fp
   1e4a0:	bl	11dbc <printf@plt>
   1e4a4:	ldr	r3, [sp, #12]
   1e4a8:	add	r6, r6, r3
   1e4ac:	b	1e39c <__assert_fail@plt+0xc010>
   1e4b0:	mov	r6, #0
   1e4b4:	mov	r7, #0
   1e4b8:	b	1e0a8 <__assert_fail@plt+0xbd1c>
   1e4bc:	mov	r2, #5
   1e4c0:	ldr	r1, [pc, #184]	; 1e580 <__assert_fail@plt+0xc1f4>
   1e4c4:	mov	r0, #0
   1e4c8:	bl	11ea0 <dcgettext@plt>
   1e4cc:	ldr	r1, [sp, #12]
   1e4d0:	mov	r6, #0
   1e4d4:	mvn	r1, r1
   1e4d8:	add	r1, r1, r4
   1e4dc:	mov	r7, #0
   1e4e0:	bl	417d0 <warn@@Base>
   1e4e4:	b	1e0a8 <__assert_fail@plt+0xbd1c>
   1e4e8:	strdeq	fp, [r4], -r0
   1e4ec:	andeq	fp, r4, ip, lsl lr
   1e4f0:	andeq	ip, r4, r8, asr #32
   1e4f4:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   1e4f8:	andeq	ip, r4, r8, lsl #1
   1e4fc:	strheq	ip, [r4], -r4
   1e500:	ldrdeq	ip, [r4], -r4
   1e504:	andeq	ip, r4, r4, ror #1
   1e508:	andeq	fp, r4, r4, lsr lr
   1e50c:	andeq	r7, r6, r0, lsr r5
   1e510:	andeq	r9, r6, r0, ror #27
   1e514:	andeq	fp, r4, ip, ror lr
   1e518:	andeq	r8, r4, r8, lsr #29
   1e51c:	andeq	fp, r4, r0, ror #30
   1e520:	andeq	fp, r4, r8, ror pc
   1e524:	muleq	r4, r8, pc	; <UNPREDICTABLE>
   1e528:			; <UNDEFINED> instruction: 0x0004bfb4
   1e52c:	andeq	fp, r4, ip, asr #31
   1e530:	andeq	fp, r4, ip, ror #31
   1e534:	andeq	ip, r4, ip
   1e538:	andeq	ip, r4, r0, lsr r0
   1e53c:	muleq	r4, r4, lr
   1e540:			; <UNDEFINED> instruction: 0x0004beb4
   1e544:	ldrdeq	fp, [r4], -r0
   1e548:	ldrdeq	fp, [r4], -r8
   1e54c:	ldrdeq	fp, [r4], -ip
   1e550:	andeq	fp, r4, r4, ror #29
   1e554:	andeq	fp, r4, ip, lsl #30
   1e558:	andeq	fp, r4, r8, lsr #30
   1e55c:	andeq	fp, r4, r8, asr #30
   1e560:	andeq	ip, r4, ip, lsl #2
   1e564:	andeq	ip, r4, ip, lsl r1
   1e568:	andeq	ip, r4, r8, lsr #2
   1e56c:			; <UNDEFINED> instruction: 0x0004abb8
   1e570:	andeq	lr, r4, r0, ror r4
   1e574:	andeq	ip, r4, ip, rrx
   1e578:	ldrdeq	ip, [r4], -r8
   1e57c:	ldrdeq	ip, [r4], -ip	; <UNPREDICTABLE>
   1e580:	andeq	fp, r4, r8, asr #28
   1e584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e588:	sub	sp, sp, #44	; 0x2c
   1e58c:	mov	fp, r0
   1e590:	mov	r0, #72	; 0x48
   1e594:	str	r3, [sp, #24]
   1e598:	mov	r4, r1
   1e59c:	mov	sl, r2
   1e5a0:	bl	11f3c <xmalloc@plt>
   1e5a4:	mov	r2, #72	; 0x48
   1e5a8:	mov	r1, #0
   1e5ac:	mov	r5, r0
   1e5b0:	bl	12110 <memset@plt>
   1e5b4:	mov	r0, #2
   1e5b8:	bl	11f3c <xmalloc@plt>
   1e5bc:	str	r0, [r5, #12]
   1e5c0:	mov	r0, #4
   1e5c4:	bl	11f3c <xmalloc@plt>
   1e5c8:	mov	r2, fp
   1e5cc:	ldrb	r6, [r2], #1
   1e5d0:	cmp	r2, r4
   1e5d4:	str	r2, [r5, #20]
   1e5d8:	str	r0, [r5, #16]
   1e5dc:	bcs	1e624 <__assert_fail@plt+0xc298>
   1e5e0:	ldrb	r3, [fp, #1]
   1e5e4:	add	fp, fp, #2
   1e5e8:	cmp	r3, #0
   1e5ec:	bne	1e600 <__assert_fail@plt+0xc274>
   1e5f0:	b	1e628 <__assert_fail@plt+0xc29c>
   1e5f4:	ldrb	r3, [fp], #1
   1e5f8:	cmp	r3, #0
   1e5fc:	beq	1e628 <__assert_fail@plt+0xc29c>
   1e600:	cmp	r4, fp
   1e604:	bne	1e5f4 <__assert_fail@plt+0xc268>
   1e608:	mov	r2, #5
   1e60c:	ldr	r1, [pc, #1268]	; 1eb08 <__assert_fail@plt+0xc77c>
   1e610:	mov	r0, #0
   1e614:	bl	11ea0 <dcgettext@plt>
   1e618:	mov	r8, r4
   1e61c:	bl	417d0 <warn@@Base>
   1e620:	b	1e7d0 <__assert_fail@plt+0xc444>
   1e624:	mov	fp, r2
   1e628:	cmp	r4, fp
   1e62c:	beq	1e608 <__assert_fail@plt+0xc27c>
   1e630:	mov	r0, r2
   1e634:	ldr	r1, [pc, #1232]	; 1eb0c <__assert_fail@plt+0xc780>
   1e638:	bl	11d98 <strcmp@plt>
   1e63c:	cmp	r0, #0
   1e640:	ldreq	r3, [pc, #1224]	; 1eb10 <__assert_fail@plt+0xc784>
   1e644:	ldreq	r3, [r3]
   1e648:	addeq	fp, fp, r3
   1e64c:	cmp	r6, #3
   1e650:	bgt	1e798 <__assert_fail@plt+0xc40c>
   1e654:	ldr	r7, [pc, #1204]	; 1eb10 <__assert_fail@plt+0xc784>
   1e658:	mov	r3, #0
   1e65c:	strb	r3, [r5, #71]	; 0x47
   1e660:	ldr	r3, [r7]
   1e664:	strb	r3, [r5, #70]	; 0x46
   1e668:	mov	r3, r4
   1e66c:	add	r1, sp, #36	; 0x24
   1e670:	mov	r2, #0
   1e674:	mov	r0, fp
   1e678:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1e67c:	mov	r3, #0
   1e680:	mov	r9, r1
   1e684:	mov	r8, r0
   1e688:	cmp	r9, r3
   1e68c:	cmpeq	r8, r8
   1e690:	str	r8, [r5, #24]
   1e694:	beq	1e6dc <__assert_fail@plt+0xc350>
   1e698:	ldr	r1, [pc, #1140]	; 1eb14 <__assert_fail@plt+0xc788>
   1e69c:	mov	r2, #5
   1e6a0:	mov	r0, r3
   1e6a4:	bl	11ea0 <dcgettext@plt>
   1e6a8:	mov	r3, #0
   1e6ac:	str	r3, [sp]
   1e6b0:	mov	r2, r8
   1e6b4:	mov	r3, r9
   1e6b8:	str	r0, [sp, #8]
   1e6bc:	ldr	r0, [pc, #1108]	; 1eb18 <__assert_fail@plt+0xc78c>
   1e6c0:	bl	18b24 <__assert_fail@plt+0x6798>
   1e6c4:	ldr	r1, [sp, #8]
   1e6c8:	ldr	r2, [pc, #1100]	; 1eb1c <__assert_fail@plt+0xc790>
   1e6cc:	mov	r3, r0
   1e6d0:	mov	r0, r1
   1e6d4:	ldr	r1, [pc, #1092]	; 1eb20 <__assert_fail@plt+0xc794>
   1e6d8:	bl	412ac <error@@Base>
   1e6dc:	ldr	r2, [sp, #36]	; 0x24
   1e6e0:	mov	r3, r4
   1e6e4:	add	fp, fp, r2
   1e6e8:	mov	r0, fp
   1e6ec:	mov	r2, #1
   1e6f0:	add	r1, sp, #36	; 0x24
   1e6f4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1e6f8:	asr	r3, r0, #31
   1e6fc:	cmp	r1, r3
   1e700:	cmpeq	r0, r0
   1e704:	mov	r8, r0
   1e708:	mov	r9, r1
   1e70c:	str	r0, [r5, #28]
   1e710:	beq	1e758 <__assert_fail@plt+0xc3cc>
   1e714:	ldr	r1, [pc, #1016]	; 1eb14 <__assert_fail@plt+0xc788>
   1e718:	mov	r2, #5
   1e71c:	mov	r0, #0
   1e720:	bl	11ea0 <dcgettext@plt>
   1e724:	mov	r2, r8
   1e728:	mov	r3, r9
   1e72c:	str	r0, [sp, #8]
   1e730:	mov	r0, #0
   1e734:	str	r0, [sp]
   1e738:	ldr	r0, [pc, #996]	; 1eb24 <__assert_fail@plt+0xc798>
   1e73c:	bl	18b24 <__assert_fail@plt+0x6798>
   1e740:	ldr	r1, [sp, #8]
   1e744:	ldr	r2, [pc, #988]	; 1eb28 <__assert_fail@plt+0xc79c>
   1e748:	mov	r3, r0
   1e74c:	mov	r0, r1
   1e750:	ldr	r1, [pc, #968]	; 1eb20 <__assert_fail@plt+0xc794>
   1e754:	bl	412ac <error@@Base>
   1e758:	ldr	r3, [sp, #36]	; 0x24
   1e75c:	cmp	r6, #1
   1e760:	add	fp, fp, r3
   1e764:	bne	1e7dc <__assert_fail@plt+0xc450>
   1e768:	add	r8, fp, #1
   1e76c:	cmp	r4, r8
   1e770:	bhi	1e910 <__assert_fail@plt+0xc584>
   1e774:	cmp	r4, fp
   1e778:	bls	1e78c <__assert_fail@plt+0xc400>
   1e77c:	sub	r1, r4, fp
   1e780:	sub	r3, r1, #1
   1e784:	cmp	r3, #7
   1e788:	bls	1e914 <__assert_fail@plt+0xc588>
   1e78c:	mov	r3, #0
   1e790:	str	r3, [r5, #64]	; 0x40
   1e794:	b	1e818 <__assert_fail@plt+0xc48c>
   1e798:	add	r7, fp, #1
   1e79c:	cmp	r4, r7
   1e7a0:	bhi	1e858 <__assert_fail@plt+0xc4cc>
   1e7a4:	cmp	r4, fp
   1e7a8:	bhi	1e974 <__assert_fail@plt+0xc5e8>
   1e7ac:	mov	r3, #0
   1e7b0:	strb	r3, [r5, #70]	; 0x46
   1e7b4:	ldr	r1, [pc, #880]	; 1eb2c <__assert_fail@plt+0xc7a0>
   1e7b8:	mov	r2, #5
   1e7bc:	mov	r0, #0
   1e7c0:	bl	11ea0 <dcgettext@plt>
   1e7c4:	ldrb	r1, [r5, #70]	; 0x46
   1e7c8:	mov	r8, r4
   1e7cc:	bl	417d0 <warn@@Base>
   1e7d0:	mov	r0, r8
   1e7d4:	add	sp, sp, #44	; 0x2c
   1e7d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7dc:	mov	r3, r4
   1e7e0:	mov	r2, #0
   1e7e4:	add	r1, sp, #36	; 0x24
   1e7e8:	mov	r0, fp
   1e7ec:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1e7f0:	mov	r3, #0
   1e7f4:	mov	r9, r1
   1e7f8:	mov	r8, r0
   1e7fc:	cmp	r9, r3
   1e800:	cmpeq	r8, r8
   1e804:	mov	r0, r8
   1e808:	str	r8, [r5, #64]	; 0x40
   1e80c:	bne	1e92c <__assert_fail@plt+0xc5a0>
   1e810:	ldr	r8, [sp, #36]	; 0x24
   1e814:	add	r8, fp, r8
   1e818:	ldr	r3, [r5, #20]
   1e81c:	ldrb	r3, [r3]
   1e820:	cmp	r3, #122	; 0x7a
   1e824:	movne	r0, #0
   1e828:	movne	r9, r0
   1e82c:	beq	1e988 <__assert_fail@plt+0xc5fc>
   1e830:	ldr	r3, [sp, #24]
   1e834:	str	r5, [sl]
   1e838:	str	r6, [r3]
   1e83c:	ldr	r3, [sp, #80]	; 0x50
   1e840:	str	r9, [r3]
   1e844:	ldr	r3, [sp, #84]	; 0x54
   1e848:	str	r0, [r3]
   1e84c:	mov	r0, r8
   1e850:	add	sp, sp, #44	; 0x2c
   1e854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e858:	mov	r1, #1
   1e85c:	ldr	r8, [pc, #716]	; 1eb30 <__assert_fail@plt+0xc7a4>
   1e860:	mov	r0, fp
   1e864:	ldr	r3, [r8]
   1e868:	blx	r3
   1e86c:	uxtb	r0, r0
   1e870:	sub	r3, r0, #1
   1e874:	cmp	r3, #7
   1e878:	strb	r0, [r5, #70]	; 0x46
   1e87c:	bhi	1e7b4 <__assert_fail@plt+0xc428>
   1e880:	add	fp, fp, #2
   1e884:	cmp	r4, fp
   1e888:	bhi	1e8b8 <__assert_fail@plt+0xc52c>
   1e88c:	cmp	r4, r7
   1e890:	bls	1e8a4 <__assert_fail@plt+0xc518>
   1e894:	sub	r1, r4, r7
   1e898:	sub	r3, r1, #1
   1e89c:	cmp	r3, #7
   1e8a0:	bls	1e8bc <__assert_fail@plt+0xc530>
   1e8a4:	mov	r3, #0
   1e8a8:	strb	r3, [r5, #71]	; 0x47
   1e8ac:	ldr	r7, [pc, #604]	; 1eb10 <__assert_fail@plt+0xc784>
   1e8b0:	str	r0, [r7]
   1e8b4:	b	1e668 <__assert_fail@plt+0xc2dc>
   1e8b8:	mov	r1, #1
   1e8bc:	ldr	r3, [r8]
   1e8c0:	mov	r0, r7
   1e8c4:	blx	r3
   1e8c8:	uxtb	r3, r0
   1e8cc:	cmp	r3, #8
   1e8d0:	strb	r3, [r5, #71]	; 0x47
   1e8d4:	bhi	1e8e8 <__assert_fail@plt+0xc55c>
   1e8d8:	ldrb	r0, [r5, #70]	; 0x46
   1e8dc:	add	r3, r0, r3
   1e8e0:	cmp	r3, #8
   1e8e4:	ble	1e8ac <__assert_fail@plt+0xc520>
   1e8e8:	mov	r2, #5
   1e8ec:	ldr	r1, [pc, #576]	; 1eb34 <__assert_fail@plt+0xc7a8>
   1e8f0:	mov	r0, #0
   1e8f4:	bl	11ea0 <dcgettext@plt>
   1e8f8:	ldrb	r1, [r5, #71]	; 0x47
   1e8fc:	bl	417d0 <warn@@Base>
   1e900:	mov	r8, r4
   1e904:	mov	r0, r8
   1e908:	add	sp, sp, #44	; 0x2c
   1e90c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e910:	mov	r1, r6
   1e914:	ldr	r3, [pc, #532]	; 1eb30 <__assert_fail@plt+0xc7a4>
   1e918:	mov	r0, fp
   1e91c:	ldr	r3, [r3]
   1e920:	blx	r3
   1e924:	str	r0, [r5, #64]	; 0x40
   1e928:	b	1e818 <__assert_fail@plt+0xc48c>
   1e92c:	ldr	r1, [pc, #480]	; 1eb14 <__assert_fail@plt+0xc788>
   1e930:	mov	r2, #5
   1e934:	mov	r0, r3
   1e938:	bl	11ea0 <dcgettext@plt>
   1e93c:	mov	r3, #0
   1e940:	str	r3, [sp]
   1e944:	mov	r2, r8
   1e948:	mov	r3, r9
   1e94c:	str	r0, [sp, #8]
   1e950:	ldr	r0, [pc, #448]	; 1eb18 <__assert_fail@plt+0xc78c>
   1e954:	bl	18b24 <__assert_fail@plt+0x6798>
   1e958:	ldr	r1, [sp, #8]
   1e95c:	ldr	r2, [pc, #468]	; 1eb38 <__assert_fail@plt+0xc7ac>
   1e960:	mov	r3, r0
   1e964:	mov	r0, r1
   1e968:	ldr	r1, [pc, #432]	; 1eb20 <__assert_fail@plt+0xc794>
   1e96c:	bl	412ac <error@@Base>
   1e970:	b	1e810 <__assert_fail@plt+0xc484>
   1e974:	sub	r1, r4, fp
   1e978:	sub	r3, r1, #1
   1e97c:	cmp	r3, #7
   1e980:	bhi	1e7ac <__assert_fail@plt+0xc420>
   1e984:	b	1e85c <__assert_fail@plt+0xc4d0>
   1e988:	mov	r3, r4
   1e98c:	mov	r2, #0
   1e990:	add	r1, sp, #36	; 0x24
   1e994:	mov	r0, r8
   1e998:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1e99c:	mov	fp, #0
   1e9a0:	str	fp, [sp, #12]
   1e9a4:	mov	r2, r0
   1e9a8:	str	r2, [sp, #8]
   1e9ac:	mov	r3, r1
   1e9b0:	ldrd	r0, [sp, #8]
   1e9b4:	strd	r2, [sp, #16]
   1e9b8:	mov	r9, r2
   1e9bc:	cmp	r3, r1
   1e9c0:	cmpeq	r2, r0
   1e9c4:	beq	1ea04 <__assert_fail@plt+0xc678>
   1e9c8:	ldr	r1, [pc, #324]	; 1eb14 <__assert_fail@plt+0xc788>
   1e9cc:	mov	r2, #5
   1e9d0:	mov	r0, fp
   1e9d4:	bl	11ea0 <dcgettext@plt>
   1e9d8:	ldrd	r2, [sp, #16]
   1e9dc:	str	fp, [sp]
   1e9e0:	str	r0, [sp, #28]
   1e9e4:	ldr	r0, [pc, #300]	; 1eb18 <__assert_fail@plt+0xc78c>
   1e9e8:	bl	18b24 <__assert_fail@plt+0x6798>
   1e9ec:	ldr	r1, [sp, #28]
   1e9f0:	ldr	r2, [pc, #324]	; 1eb3c <__assert_fail@plt+0xc7b0>
   1e9f4:	mov	r3, r0
   1e9f8:	mov	r0, r1
   1e9fc:	ldr	r1, [pc, #284]	; 1eb20 <__assert_fail@plt+0xc794>
   1ea00:	bl	412ac <error@@Base>
   1ea04:	ldr	r0, [sp, #36]	; 0x24
   1ea08:	ldr	r3, [sp, #16]
   1ea0c:	add	r0, r8, r0
   1ea10:	sub	r8, r4, r0
   1ea14:	cmp	r3, r8
   1ea18:	bhi	1eac8 <__assert_fail@plt+0xc73c>
   1ea1c:	ldrd	r2, [sp, #16]
   1ea20:	cmp	r2, #0
   1ea24:	add	r8, r0, r2
   1ea28:	beq	1e830 <__assert_fail@plt+0xc4a4>
   1ea2c:	ldr	r3, [r5, #20]
   1ea30:	add	r3, r3, #1
   1ea34:	cmp	r4, r3
   1ea38:	movls	r2, #0
   1ea3c:	movhi	r2, #1
   1ea40:	cmp	r0, r8
   1ea44:	movcs	r2, #0
   1ea48:	cmp	r2, #0
   1ea4c:	beq	1e830 <__assert_fail@plt+0xc4a4>
   1ea50:	ldr	lr, [r7]
   1ea54:	ldr	ip, [pc, #228]	; 1eb40 <__assert_fail@plt+0xc7b4>
   1ea58:	mov	r1, r0
   1ea5c:	b	1ea7c <__assert_fail@plt+0xc6f0>
   1ea60:	cmp	r2, #82	; 0x52
   1ea64:	beq	1eabc <__assert_fail@plt+0xc730>
   1ea68:	cmp	r2, #83	; 0x53
   1ea6c:	bne	1e830 <__assert_fail@plt+0xc4a4>
   1ea70:	cmp	r4, r3
   1ea74:	cmphi	r8, r1
   1ea78:	bls	1e830 <__assert_fail@plt+0xc4a4>
   1ea7c:	ldrb	r2, [r3], #1
   1ea80:	cmp	r2, #76	; 0x4c
   1ea84:	addeq	r1, r1, #1
   1ea88:	beq	1ea70 <__assert_fail@plt+0xc6e4>
   1ea8c:	cmp	r2, #80	; 0x50
   1ea90:	bne	1ea60 <__assert_fail@plt+0xc6d4>
   1ea94:	ldrb	r2, [r1]
   1ea98:	and	r2, r2, #7
   1ea9c:	sub	r2, r2, #2
   1eaa0:	cmp	r2, #2
   1eaa4:	addls	r2, ip, r2, lsl #2
   1eaa8:	movhi	r2, lr
   1eaac:	ldrls	r2, [r2, #1024]	; 0x400
   1eab0:	add	r2, r2, #1
   1eab4:	add	r1, r1, r2
   1eab8:	b	1ea70 <__assert_fail@plt+0xc6e4>
   1eabc:	ldrb	r2, [r1], #1
   1eac0:	strb	r2, [r5, #68]	; 0x44
   1eac4:	b	1ea70 <__assert_fail@plt+0xc6e4>
   1eac8:	mov	r2, #5
   1eacc:	ldr	r1, [pc, #112]	; 1eb44 <__assert_fail@plt+0xc7b8>
   1ead0:	mov	r0, #0
   1ead4:	bl	11ea0 <dcgettext@plt>
   1ead8:	mov	r1, #0
   1eadc:	ldrd	r2, [sp, #8]
   1eae0:	str	r1, [sp]
   1eae4:	mov	r5, r0
   1eae8:	ldr	r0, [pc, #88]	; 1eb48 <__assert_fail@plt+0xc7bc>
   1eaec:	bl	18b24 <__assert_fail@plt+0x6798>
   1eaf0:	mov	r2, r8
   1eaf4:	mov	r8, r4
   1eaf8:	mov	r1, r0
   1eafc:	mov	r0, r5
   1eb00:	bl	417d0 <warn@@Base>
   1eb04:	b	1e7d0 <__assert_fail@plt+0xc444>
   1eb08:	andeq	ip, r4, r4, lsr r1
   1eb0c:	andeq	ip, r4, ip, asr r1
   1eb10:	andeq	r9, r6, ip, lsr #27
   1eb14:			; <UNDEFINED> instruction: 0x0004c1b0
   1eb18:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   1eb1c:	muleq	r0, r4, ip
   1eb20:	ldrdeq	sl, [r4], -r8
   1eb24:	muleq	r4, r0, r2
   1eb28:	muleq	r0, r5, ip
   1eb2c:	andeq	ip, r4, r0, ror #2
   1eb30:	andeq	r9, r6, r0, ror #27
   1eb34:	andeq	ip, r4, r8, lsl #3
   1eb38:	muleq	r0, ip, ip
   1eb3c:	andeq	r1, r0, r1, lsr #25
   1eb40:	andeq	r9, r4, ip, ror r7
   1eb44:	strdeq	ip, [r4], -ip	; <UNPREDICTABLE>
   1eb48:	andeq	r8, r4, r8, lsr #29
   1eb4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb50:	sub	sp, sp, #260	; 0x104
   1eb54:	mov	r9, r3
   1eb58:	ldr	r3, [sp, #312]	; 0x138
   1eb5c:	ldr	sl, [sp, #296]	; 0x128
   1eb60:	str	r3, [sp, #64]	; 0x40
   1eb64:	ldr	r3, [sp, #324]	; 0x144
   1eb68:	ldr	ip, [sp, #300]	; 0x12c
   1eb6c:	str	r3, [sp, #68]	; 0x44
   1eb70:	ldrb	r3, [sp, #348]	; 0x15c
   1eb74:	mov	r7, #0
   1eb78:	mov	r6, #0
   1eb7c:	cmp	sl, ip
   1eb80:	strd	r6, [sp, #160]	; 0xa0
   1eb84:	ldr	fp, [sp, #320]	; 0x140
   1eb88:	ldr	r7, [sp, #316]	; 0x13c
   1eb8c:	str	r3, [sp, #60]	; 0x3c
   1eb90:	bhi	1f248 <__assert_fail@plt+0xcebc>
   1eb94:	mov	r8, r2
   1eb98:	moveq	r2, #1
   1eb9c:	movne	r2, #0
   1eba0:	cmp	r1, #25
   1eba4:	moveq	r2, #0
   1eba8:	andne	r2, r2, #1
   1ebac:	cmp	r2, #0
   1ebb0:	mov	r4, r1
   1ebb4:	bne	1f248 <__assert_fail@plt+0xcebc>
   1ebb8:	cmp	r1, #18
   1ebbc:	mov	r5, r0
   1ebc0:	beq	20238 <__assert_fail@plt+0xdeac>
   1ebc4:	bhi	1ed1c <__assert_fail@plt+0xc990>
   1ebc8:	cmp	r1, #12
   1ebcc:	bls	1ef70 <__assert_fail@plt+0xcbe4>
   1ebd0:	cmp	r1, #15
   1ebd4:	beq	20250 <__assert_fail@plt+0xdec4>
   1ebd8:	bls	1ef14 <__assert_fail@plt+0xcb88>
   1ebdc:	cmp	r1, #16
   1ebe0:	bne	1f090 <__assert_fail@plt+0xcd04>
   1ebe4:	ldr	r3, [sp, #328]	; 0x148
   1ebe8:	cmp	r3, #2
   1ebec:	beq	20d58 <__assert_fail@plt+0xe9cc>
   1ebf0:	ldr	r3, [sp, #328]	; 0x148
   1ebf4:	sub	r3, r3, #3
   1ebf8:	cmp	r3, #1
   1ebfc:	bhi	20e4c <__assert_fail@plt+0xeac0>
   1ec00:	cmp	fp, #8
   1ec04:	mov	r1, fp
   1ec08:	add	r6, sl, fp
   1ec0c:	bhi	20fa8 <__assert_fail@plt+0xec1c>
   1ec10:	ldr	r3, [sp, #300]	; 0x12c
   1ec14:	cmp	r3, r6
   1ec18:	bhi	1ec30 <__assert_fail@plt+0xc8a4>
   1ec1c:	ldr	r3, [sp, #300]	; 0x12c
   1ec20:	cmp	sl, r3
   1ec24:	bcs	20d48 <__assert_fail@plt+0xe9bc>
   1ec28:	ldr	r3, [sp, #300]	; 0x12c
   1ec2c:	sub	r1, r3, sl
   1ec30:	sub	r3, r1, #1
   1ec34:	cmp	r3, #7
   1ec38:	bhi	20d48 <__assert_fail@plt+0xe9bc>
   1ec3c:	ldr	r3, [pc, #3996]	; 1fbe0 <__assert_fail@plt+0xd854>
   1ec40:	mov	r0, sl
   1ec44:	ldr	r3, [r3]
   1ec48:	blx	r3
   1ec4c:	strd	r0, [sp, #160]	; 0xa0
   1ec50:	ldr	r3, [sp, #336]	; 0x150
   1ec54:	cmp	r3, #0
   1ec58:	bne	1f070 <__assert_fail@plt+0xcce4>
   1ec5c:	str	r3, [sp]
   1ec60:	ldrd	r2, [sp, #160]	; 0xa0
   1ec64:	ldr	r0, [pc, #3960]	; 1fbe4 <__assert_fail@plt+0xd858>
   1ec68:	bl	18b24 <__assert_fail@plt+0x6798>
   1ec6c:	ldr	r1, [sp, #60]	; 0x3c
   1ec70:	mov	r2, r0
   1ec74:	ldr	r0, [pc, #3948]	; 1fbe8 <__assert_fail@plt+0xd85c>
   1ec78:	bl	11dbc <printf@plt>
   1ec7c:	ldr	r7, [sp, #336]	; 0x150
   1ec80:	ldr	r2, [pc, #3940]	; 1fbec <__assert_fail@plt+0xd860>
   1ec84:	ldr	r3, [pc, #3940]	; 1fbf0 <__assert_fail@plt+0xd864>
   1ec88:	ldr	r2, [r2]
   1ec8c:	ldr	r3, [r3]
   1ec90:	orrs	r3, r2, r3
   1ec94:	beq	1f578 <__assert_fail@plt+0xd1ec>
   1ec98:	ldr	r8, [pc, #3924]	; 1fbf4 <__assert_fail@plt+0xd868>
   1ec9c:	ldr	r3, [r8, #1488]	; 0x5d0
   1eca0:	cmp	r3, #0
   1eca4:	bne	1f578 <__assert_fail@plt+0xd1ec>
   1eca8:	ldr	r3, [sp, #332]	; 0x14c
   1ecac:	cmp	r3, #0
   1ecb0:	beq	1f578 <__assert_fail@plt+0xd1ec>
   1ecb4:	cmp	r5, #85	; 0x55
   1ecb8:	beq	20cc8 <__assert_fail@plt+0xe93c>
   1ecbc:	bls	1fba0 <__assert_fail@plt+0xd814>
   1ecc0:	ldr	r3, [pc, #3888]	; 1fbf8 <__assert_fail@plt+0xd86c>
   1ecc4:	cmp	r5, r3
   1ecc8:	bls	1fb00 <__assert_fail@plt+0xd774>
   1eccc:	ldr	r3, [pc, #3880]	; 1fbfc <__assert_fail@plt+0xd870>
   1ecd0:	cmp	r5, r3
   1ecd4:	beq	20cb8 <__assert_fail@plt+0xe92c>
   1ecd8:	bhi	1fae4 <__assert_fail@plt+0xd758>
   1ecdc:	sub	r3, r3, #2
   1ece0:	cmp	r5, r3
   1ece4:	beq	1fb24 <__assert_fail@plt+0xd798>
   1ece8:	add	r3, r3, #1
   1ecec:	cmp	r5, r3
   1ecf0:	bne	1f578 <__assert_fail@plt+0xd1ec>
   1ecf4:	ldr	r3, [r8, #1500]	; 0x5dc
   1ecf8:	cmp	r3, #0
   1ecfc:	beq	1f260 <__assert_fail@plt+0xced4>
   1ed00:	cmp	r4, #7
   1ed04:	bne	21210 <__assert_fail@plt+0xee84>
   1ed08:	sub	r2, r6, #8
   1ed0c:	mov	r3, #8
   1ed10:	str	r2, [r8, #1512]	; 0x5e8
   1ed14:	str	r3, [r8, #1516]	; 0x5ec
   1ed18:	b	1f260 <__assert_fail@plt+0xced4>
   1ed1c:	cmp	r1, #25
   1ed20:	beq	20274 <__assert_fail@plt+0xdee8>
   1ed24:	bls	1ee54 <__assert_fail@plt+0xcac8>
   1ed28:	ldr	r3, [pc, #3892]	; 1fc64 <__assert_fail@plt+0xd8d8>
   1ed2c:	cmp	r1, r3
   1ed30:	beq	1fe68 <__assert_fail@plt+0xdadc>
   1ed34:	bhi	1f018 <__assert_fail@plt+0xcc8c>
   1ed38:	cmp	r1, #31
   1ed3c:	beq	1f0ec <__assert_fail@plt+0xcd60>
   1ed40:	sub	r3, r3, #1
   1ed44:	cmp	r1, r3
   1ed48:	bne	1f028 <__assert_fail@plt+0xcc9c>
   1ed4c:	ldr	r3, [sp, #300]	; 0x12c
   1ed50:	mov	r2, #0
   1ed54:	add	r1, sp, #156	; 0x9c
   1ed58:	mov	r0, sl
   1ed5c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1ed60:	ldr	r6, [sp, #156]	; 0x9c
   1ed64:	add	r6, sl, r6
   1ed68:	strd	r0, [sp, #160]	; 0xa0
   1ed6c:	ldr	r3, [sp, #336]	; 0x150
   1ed70:	cmp	r3, #0
   1ed74:	bne	1f070 <__assert_fail@plt+0xcce4>
   1ed78:	ldr	r1, [pc, #3712]	; 1fc00 <__assert_fail@plt+0xd874>
   1ed7c:	mov	r2, #5
   1ed80:	mov	r0, r3
   1ed84:	bl	11ea0 <dcgettext@plt>
   1ed88:	ldr	r3, [sp, #336]	; 0x150
   1ed8c:	ldr	r8, [pc, #3696]	; 1fc04 <__assert_fail@plt+0xd878>
   1ed90:	str	r3, [sp]
   1ed94:	ldrd	r2, [sp, #160]	; 0xa0
   1ed98:	mov	r9, r0
   1ed9c:	ldr	r0, [pc, #3648]	; 1fbe4 <__assert_fail@plt+0xd858>
   1eda0:	bl	18b24 <__assert_fail@plt+0x6798>
   1eda4:	ldr	r1, [sp, #64]	; 0x40
   1eda8:	ldr	r2, [sp, #164]	; 0xa4
   1edac:	ldr	r3, [sp, #160]	; 0xa0
   1edb0:	ldr	ip, [r8, #2680]	; 0xa78
   1edb4:	mul	r2, r1, r2
   1edb8:	cmp	ip, #0
   1edbc:	str	r0, [sp, #104]	; 0x68
   1edc0:	umull	r0, r1, r3, r1
   1edc4:	mla	r3, r3, r7, r2
   1edc8:	strd	r0, [sp, #88]	; 0x58
   1edcc:	add	r3, r3, r1
   1edd0:	str	r3, [sp, #92]	; 0x5c
   1edd4:	beq	21414 <__assert_fail@plt+0xf088>
   1edd8:	ldrd	r0, [sp, #88]	; 0x58
   1eddc:	ldr	lr, [sp, #64]	; 0x40
   1ede0:	add	r3, r8, #2704	; 0xa90
   1ede4:	adds	r2, r0, lr
   1ede8:	adc	r1, r1, r7
   1edec:	str	r2, [sp, #96]	; 0x60
   1edf0:	str	r1, [sp, #100]	; 0x64
   1edf4:	ldrd	r2, [r3, #-8]
   1edf8:	ldrd	r0, [sp, #96]	; 0x60
   1edfc:	cmp	r1, r3
   1ee00:	cmpeq	r0, r2
   1ee04:	bhi	213a4 <__assert_fail@plt+0xf018>
   1ee08:	ldr	r3, [pc, #3536]	; 1fbe0 <__assert_fail@plt+0xd854>
   1ee0c:	ldr	r2, [sp, #88]	; 0x58
   1ee10:	ldr	r1, [sp, #64]	; 0x40
   1ee14:	add	r0, ip, r2
   1ee18:	ldr	r3, [r3]
   1ee1c:	blx	r3
   1ee20:	ldr	r3, [sp, #336]	; 0x150
   1ee24:	str	r3, [sp]
   1ee28:	mov	r2, r0
   1ee2c:	mov	r3, r1
   1ee30:	ldr	r0, [pc, #3500]	; 1fbe4 <__assert_fail@plt+0xd858>
   1ee34:	bl	18b24 <__assert_fail@plt+0x6798>
   1ee38:	mov	r3, r0
   1ee3c:	ldr	r2, [sp, #104]	; 0x68
   1ee40:	ldr	r1, [sp, #60]	; 0x3c
   1ee44:	mov	r0, r9
   1ee48:	bl	11dbc <printf@plt>
   1ee4c:	mov	r7, #0
   1ee50:	b	1ec80 <__assert_fail@plt+0xc8f4>
   1ee54:	cmp	r1, #21
   1ee58:	beq	20250 <__assert_fail@plt+0xdec4>
   1ee5c:	bls	1f0c4 <__assert_fail@plt+0xcd38>
   1ee60:	cmp	r1, #22
   1ee64:	bne	1f0e4 <__assert_fail@plt+0xcd58>
   1ee68:	ldr	r3, [sp, #300]	; 0x12c
   1ee6c:	mov	r0, sl
   1ee70:	add	r1, sp, #156	; 0x9c
   1ee74:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1ee78:	ldr	r2, [sp, #336]	; 0x150
   1ee7c:	ldr	r3, [sp, #156]	; 0x9c
   1ee80:	cmp	r2, #0
   1ee84:	add	sl, sl, r3
   1ee88:	mov	r4, r0
   1ee8c:	beq	20db0 <__assert_fail@plt+0xea24>
   1ee90:	cmp	r4, #33	; 0x21
   1ee94:	beq	20e68 <__assert_fail@plt+0xeadc>
   1ee98:	ldr	r3, [sp, #60]	; 0x3c
   1ee9c:	str	fp, [sp, #24]
   1eea0:	str	r3, [sp, #52]	; 0x34
   1eea4:	ldr	r3, [sp, #344]	; 0x158
   1eea8:	str	r7, [sp, #20]
   1eeac:	str	r3, [sp, #48]	; 0x30
   1eeb0:	ldr	r3, [sp, #340]	; 0x154
   1eeb4:	mov	r1, r4
   1eeb8:	str	r3, [sp, #44]	; 0x2c
   1eebc:	ldr	r3, [sp, #336]	; 0x150
   1eec0:	mov	r0, r5
   1eec4:	str	r3, [sp, #40]	; 0x28
   1eec8:	ldr	r3, [sp, #332]	; 0x14c
   1eecc:	str	r3, [sp, #36]	; 0x24
   1eed0:	ldr	r3, [sp, #328]	; 0x148
   1eed4:	str	r3, [sp, #32]
   1eed8:	ldr	r3, [sp, #68]	; 0x44
   1eedc:	str	r3, [sp, #28]
   1eee0:	ldr	r3, [sp, #64]	; 0x40
   1eee4:	str	r3, [sp, #16]
   1eee8:	add	r3, sp, #304	; 0x130
   1eeec:	ldrd	r2, [r3]
   1eef0:	str	sl, [sp]
   1eef4:	strd	r2, [sp, #8]
   1eef8:	ldr	r3, [sp, #300]	; 0x12c
   1eefc:	mov	r2, r8
   1ef00:	str	r3, [sp, #4]
   1ef04:	mov	r3, r9
   1ef08:	bl	1eb4c <__assert_fail@plt+0xc7c0>
   1ef0c:	mov	r6, r0
   1ef10:	b	1f260 <__assert_fail@plt+0xced4>
   1ef14:	cmp	r1, #13
   1ef18:	bne	1f138 <__assert_fail@plt+0xcdac>
   1ef1c:	ldr	r3, [sp, #300]	; 0x12c
   1ef20:	mov	r2, #1
   1ef24:	add	r1, sp, #156	; 0x9c
   1ef28:	mov	r0, sl
   1ef2c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1ef30:	ldr	r6, [sp, #156]	; 0x9c
   1ef34:	add	r6, sl, r6
   1ef38:	strd	r0, [sp, #160]	; 0xa0
   1ef3c:	ldr	r3, [sp, #336]	; 0x150
   1ef40:	cmp	r3, #0
   1ef44:	bne	1f070 <__assert_fail@plt+0xcce4>
   1ef48:	str	r3, [sp]
   1ef4c:	ldrd	r2, [sp, #160]	; 0xa0
   1ef50:	ldr	r0, [pc, #3248]	; 1fc08 <__assert_fail@plt+0xd87c>
   1ef54:	bl	18b24 <__assert_fail@plt+0x6798>
   1ef58:	ldr	r1, [sp, #60]	; 0x3c
   1ef5c:	mov	r2, r0
   1ef60:	ldr	r0, [pc, #3236]	; 1fc0c <__assert_fail@plt+0xd880>
   1ef64:	bl	11dbc <printf@plt>
   1ef68:	ldr	r7, [sp, #336]	; 0x150
   1ef6c:	b	1ec80 <__assert_fail@plt+0xc8f4>
   1ef70:	cmp	r1, #11
   1ef74:	bcs	1f098 <__assert_fail@plt+0xcd0c>
   1ef78:	cmp	r1, #5
   1ef7c:	beq	20238 <__assert_fail@plt+0xdeac>
   1ef80:	cmp	r1, #6
   1ef84:	beq	1f0cc <__assert_fail@plt+0xcd40>
   1ef88:	cmp	r1, #1
   1ef8c:	bne	1f028 <__assert_fail@plt+0xcc9c>
   1ef90:	ldr	r3, [sp, #64]	; 0x40
   1ef94:	cmp	r3, #8
   1ef98:	mov	r1, r3
   1ef9c:	add	r6, sl, r3
   1efa0:	bhi	20dc8 <__assert_fail@plt+0xea3c>
   1efa4:	ldr	r3, [sp, #300]	; 0x12c
   1efa8:	cmp	r3, r6
   1efac:	bhi	1efc4 <__assert_fail@plt+0xcc38>
   1efb0:	ldr	r3, [sp, #300]	; 0x12c
   1efb4:	cmp	sl, r3
   1efb8:	bcs	2078c <__assert_fail@plt+0xe400>
   1efbc:	ldr	r3, [sp, #300]	; 0x12c
   1efc0:	sub	r1, r3, sl
   1efc4:	sub	r3, r1, #1
   1efc8:	cmp	r3, #7
   1efcc:	bhi	2078c <__assert_fail@plt+0xe400>
   1efd0:	ldr	r3, [pc, #3080]	; 1fbe0 <__assert_fail@plt+0xd854>
   1efd4:	mov	r0, sl
   1efd8:	ldr	r3, [r3]
   1efdc:	blx	r3
   1efe0:	strd	r0, [sp, #160]	; 0xa0
   1efe4:	ldr	r3, [sp, #336]	; 0x150
   1efe8:	cmp	r3, #0
   1efec:	bne	1f070 <__assert_fail@plt+0xcce4>
   1eff0:	str	r3, [sp]
   1eff4:	ldr	r0, [pc, #3048]	; 1fbe4 <__assert_fail@plt+0xd858>
   1eff8:	ldrd	r2, [sp, #160]	; 0xa0
   1effc:	bl	18b24 <__assert_fail@plt+0x6798>
   1f000:	ldr	r1, [sp, #60]	; 0x3c
   1f004:	mov	r2, r0
   1f008:	ldr	r0, [pc, #3176]	; 1fc78 <__assert_fail@plt+0xd8ec>
   1f00c:	bl	11dbc <printf@plt>
   1f010:	ldr	r7, [sp, #336]	; 0x150
   1f014:	b	1ec80 <__assert_fail@plt+0xc8f4>
   1f018:	sub	r3, r1, #7936	; 0x1f00
   1f01c:	sub	r3, r3, #32
   1f020:	cmp	r3, #1
   1f024:	bls	1f0ec <__assert_fail@plt+0xcd60>
   1f028:	mov	r6, sl
   1f02c:	cmp	r4, #19
   1f030:	bls	1f144 <__assert_fail@plt+0xcdb8>
   1f034:	cmp	r4, #30
   1f038:	beq	20620 <__assert_fail@plt+0xe294>
   1f03c:	bls	1f42c <__assert_fail@plt+0xd0a0>
   1f040:	ldr	r3, [pc, #3016]	; 1fc10 <__assert_fail@plt+0xd884>
   1f044:	cmp	r4, r3
   1f048:	beq	1ed6c <__assert_fail@plt+0xc9e0>
   1f04c:	bhi	1f320 <__assert_fail@plt+0xcf94>
   1f050:	cmp	r4, #32
   1f054:	beq	206ec <__assert_fail@plt+0xe360>
   1f058:	bcc	1ff18 <__assert_fail@plt+0xdb8c>
   1f05c:	cmp	r4, #33	; 0x21
   1f060:	bne	1f480 <__assert_fail@plt+0xd0f4>
   1f064:	ldr	r3, [sp, #336]	; 0x150
   1f068:	cmp	r3, #0
   1f06c:	beq	20320 <__assert_fail@plt+0xdf94>
   1f070:	mov	r7, #0
   1f074:	ldr	r8, [pc, #2936]	; 1fbf4 <__assert_fail@plt+0xd868>
   1f078:	ldr	r3, [r8, #1488]	; 0x5d0
   1f07c:	cmp	r3, #0
   1f080:	beq	1eca8 <__assert_fail@plt+0xc91c>
   1f084:	mov	r0, r6
   1f088:	add	sp, sp, #260	; 0x104
   1f08c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f090:	cmp	r1, #17
   1f094:	bne	1f028 <__assert_fail@plt+0xcc9c>
   1f098:	ldr	r3, [sp, #300]	; 0x12c
   1f09c:	add	r6, sl, #1
   1f0a0:	cmp	r6, r3
   1f0a4:	bcs	20604 <__assert_fail@plt+0xe278>
   1f0a8:	mov	r1, #1
   1f0ac:	ldr	r3, [pc, #2860]	; 1fbe0 <__assert_fail@plt+0xd854>
   1f0b0:	mov	r0, sl
   1f0b4:	ldr	r3, [r3]
   1f0b8:	blx	r3
   1f0bc:	strd	r0, [sp, #160]	; 0xa0
   1f0c0:	b	1f02c <__assert_fail@plt+0xcca0>
   1f0c4:	cmp	r1, #19
   1f0c8:	bne	1f028 <__assert_fail@plt+0xcc9c>
   1f0cc:	ldr	r3, [sp, #300]	; 0x12c
   1f0d0:	add	r6, sl, #4
   1f0d4:	cmp	r6, r3
   1f0d8:	bcs	20604 <__assert_fail@plt+0xe278>
   1f0dc:	mov	r1, #4
   1f0e0:	b	1f0ac <__assert_fail@plt+0xcd20>
   1f0e4:	cmp	r1, #23
   1f0e8:	bne	1f028 <__assert_fail@plt+0xcc9c>
   1f0ec:	cmp	fp, #8
   1f0f0:	mov	r1, fp
   1f0f4:	add	r6, sl, fp
   1f0f8:	bhi	20e0c <__assert_fail@plt+0xea80>
   1f0fc:	ldr	r3, [sp, #300]	; 0x12c
   1f100:	cmp	r3, r6
   1f104:	bhi	1f11c <__assert_fail@plt+0xcd90>
   1f108:	ldr	r3, [sp, #300]	; 0x12c
   1f10c:	cmp	sl, r3
   1f110:	bcs	1f128 <__assert_fail@plt+0xcd9c>
   1f114:	ldr	r3, [sp, #300]	; 0x12c
   1f118:	sub	r1, r3, sl
   1f11c:	sub	r3, r1, #1
   1f120:	cmp	r3, #7
   1f124:	bls	1f0ac <__assert_fail@plt+0xcd20>
   1f128:	mov	r2, #0
   1f12c:	mov	r3, #0
   1f130:	strd	r2, [sp, #160]	; 0xa0
   1f134:	b	1f02c <__assert_fail@plt+0xcca0>
   1f138:	cmp	r1, #14
   1f13c:	beq	1f0ec <__assert_fail@plt+0xcd60>
   1f140:	b	1f028 <__assert_fail@plt+0xcc9c>
   1f144:	cmp	r4, #17
   1f148:	bcs	1f448 <__assert_fail@plt+0xd0bc>
   1f14c:	cmp	r4, #8
   1f150:	beq	20760 <__assert_fail@plt+0xe3d4>
   1f154:	bls	1f1dc <__assert_fail@plt+0xce50>
   1f158:	cmp	r4, #13
   1f15c:	bhi	1f2d0 <__assert_fail@plt+0xcf44>
   1f160:	cmp	r4, #11
   1f164:	bcs	1ef3c <__assert_fail@plt+0xcbb0>
   1f168:	cmp	r4, #9
   1f16c:	beq	1f700 <__assert_fail@plt+0xd374>
   1f170:	cmp	r4, #10
   1f174:	bne	1f480 <__assert_fail@plt+0xd0f4>
   1f178:	ldr	r3, [sp, #300]	; 0x12c
   1f17c:	add	r7, r6, #1
   1f180:	cmp	r7, r3
   1f184:	bcc	20298 <__assert_fail@plt+0xdf0c>
   1f188:	cmp	r6, r3
   1f18c:	bcs	1f1a0 <__assert_fail@plt+0xce14>
   1f190:	sub	r1, r3, r6
   1f194:	sub	r3, r1, #1
   1f198:	cmp	r3, #7
   1f19c:	bls	21674 <__assert_fail@plt+0xf2e8>
   1f1a0:	mov	r2, #0
   1f1a4:	mov	r3, #0
   1f1a8:	strd	r2, [sp, #160]	; 0xa0
   1f1ac:	mov	r2, #5
   1f1b0:	ldr	r1, [pc, #2652]	; 1fc14 <__assert_fail@plt+0xd888>
   1f1b4:	mov	r0, #0
   1f1b8:	bl	11ea0 <dcgettext@plt>
   1f1bc:	bl	417d0 <warn@@Base>
   1f1c0:	mov	r2, #0
   1f1c4:	mov	r0, r2
   1f1c8:	str	r2, [sp, #160]	; 0xa0
   1f1cc:	mov	r1, r2
   1f1d0:	str	r2, [sp, #164]	; 0xa4
   1f1d4:	ldr	r7, [sp, #300]	; 0x12c
   1f1d8:	b	1f778 <__assert_fail@plt+0xd3ec>
   1f1dc:	cmp	r4, #4
   1f1e0:	beq	206cc <__assert_fail@plt+0xe340>
   1f1e4:	bhi	1f26c <__assert_fail@plt+0xcee0>
   1f1e8:	cmp	r4, #1
   1f1ec:	beq	1efe4 <__assert_fail@plt+0xcc58>
   1f1f0:	cmp	r4, #3
   1f1f4:	bne	1f480 <__assert_fail@plt+0xd0f4>
   1f1f8:	ldr	r3, [sp, #300]	; 0x12c
   1f1fc:	add	r7, r6, #2
   1f200:	cmp	r7, r3
   1f204:	bcs	1f188 <__assert_fail@plt+0xcdfc>
   1f208:	ldr	r3, [pc, #2512]	; 1fbe0 <__assert_fail@plt+0xd854>
   1f20c:	mov	r0, r6
   1f210:	mov	r1, #2
   1f214:	ldr	r3, [r3]
   1f218:	blx	r3
   1f21c:	ldr	ip, [sp, #300]	; 0x12c
   1f220:	add	r2, r7, r0
   1f224:	cmp	r7, r2
   1f228:	movls	r3, #0
   1f22c:	movhi	r3, #1
   1f230:	cmp	ip, r2
   1f234:	orrcc	r3, r3, #1
   1f238:	cmp	r3, #0
   1f23c:	strd	r0, [sp, #160]	; 0xa0
   1f240:	bne	1f750 <__assert_fail@plt+0xd3c4>
   1f244:	b	1f778 <__assert_fail@plt+0xd3ec>
   1f248:	mov	r2, #5
   1f24c:	ldr	r1, [pc, #2500]	; 1fc18 <__assert_fail@plt+0xd88c>
   1f250:	mov	r0, #0
   1f254:	bl	11ea0 <dcgettext@plt>
   1f258:	mov	r6, sl
   1f25c:	bl	417d0 <warn@@Base>
   1f260:	mov	r0, r6
   1f264:	add	sp, sp, #260	; 0x104
   1f268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f26c:	cmp	r4, #6
   1f270:	beq	1efe4 <__assert_fail@plt+0xcc58>
   1f274:	bls	1ef3c <__assert_fail@plt+0xcbb0>
   1f278:	ldr	r3, [sp, #336]	; 0x150
   1f27c:	add	r7, r6, #8
   1f280:	cmp	r3, #0
   1f284:	beq	202a8 <__assert_fail@plt+0xdf1c>
   1f288:	ldr	r3, [pc, #2404]	; 1fbf4 <__assert_fail@plt+0xd868>
   1f28c:	ldr	r3, [r3, #1488]	; 0x5d0
   1f290:	cmp	r3, #0
   1f294:	bne	1f2c8 <__assert_fail@plt+0xcf3c>
   1f298:	ldr	r3, [sp, #300]	; 0x12c
   1f29c:	cmp	r3, r7
   1f2a0:	bhi	20fd0 <__assert_fail@plt+0xec44>
   1f2a4:	cmp	r6, r3
   1f2a8:	bcs	1f2bc <__assert_fail@plt+0xcf30>
   1f2ac:	sub	r1, r3, r6
   1f2b0:	sub	r3, r1, #1
   1f2b4:	cmp	r3, #7
   1f2b8:	bls	20fd4 <__assert_fail@plt+0xec48>
   1f2bc:	mov	r2, #0
   1f2c0:	mov	r3, #0
   1f2c4:	strd	r2, [sp, #160]	; 0xa0
   1f2c8:	mov	r6, r7
   1f2cc:	b	1f498 <__assert_fail@plt+0xd10c>
   1f2d0:	cmp	r4, #15
   1f2d4:	beq	1ef3c <__assert_fail@plt+0xcbb0>
   1f2d8:	bhi	1ec50 <__assert_fail@plt+0xc8c4>
   1f2dc:	ldr	r3, [sp, #336]	; 0x150
   1f2e0:	cmp	r3, #0
   1f2e4:	bne	1f070 <__assert_fail@plt+0xcce4>
   1f2e8:	ldr	r1, [pc, #2348]	; 1fc1c <__assert_fail@plt+0xd890>
   1f2ec:	mov	r2, #5
   1f2f0:	mov	r0, r3
   1f2f4:	bl	11ea0 <dcgettext@plt>
   1f2f8:	ldr	r3, [sp, #336]	; 0x150
   1f2fc:	str	r3, [sp]
   1f300:	ldrd	r2, [sp, #160]	; 0xa0
   1f304:	mov	r7, r0
   1f308:	ldr	r0, [pc, #2260]	; 1fbe4 <__assert_fail@plt+0xd858>
   1f30c:	bl	18b24 <__assert_fail@plt+0x6798>
   1f310:	mov	r8, r0
   1f314:	ldrd	r0, [sp, #160]	; 0xa0
   1f318:	bl	1a0d4 <__assert_fail@plt+0x7d48>
   1f31c:	b	1ff58 <__assert_fail@plt+0xdbcc>
   1f320:	ldr	r3, [pc, #2604]	; 1fd54 <__assert_fail@plt+0xd9c8>
   1f324:	cmp	r4, r3
   1f328:	beq	1ff74 <__assert_fail@plt+0xdbe8>
   1f32c:	add	r3, r3, #1
   1f330:	cmp	r4, r3
   1f334:	bne	1f474 <__assert_fail@plt+0xd0e8>
   1f338:	ldr	r3, [sp, #336]	; 0x150
   1f33c:	cmp	r3, #0
   1f340:	bne	1f070 <__assert_fail@plt+0xcce4>
   1f344:	mov	r2, #5
   1f348:	ldr	r1, [pc, #2256]	; 1fc20 <__assert_fail@plt+0xd894>
   1f34c:	mov	r0, r3
   1f350:	bl	11ea0 <dcgettext@plt>
   1f354:	ldr	r3, [sp, #336]	; 0x150
   1f358:	str	r3, [sp]
   1f35c:	ldrd	r2, [sp, #160]	; 0xa0
   1f360:	str	r0, [sp, #88]	; 0x58
   1f364:	ldr	r0, [pc, #2168]	; 1fbe4 <__assert_fail@plt+0xd858>
   1f368:	bl	18b24 <__assert_fail@plt+0x6798>
   1f36c:	ldr	r3, [pc, #2224]	; 1fc24 <__assert_fail@plt+0xd898>
   1f370:	ldr	r3, [r3]
   1f374:	cmp	r3, #0
   1f378:	str	r0, [sp, #96]	; 0x60
   1f37c:	beq	212fc <__assert_fail@plt+0xef70>
   1f380:	ldr	r3, [pc, #2156]	; 1fbf4 <__assert_fail@plt+0xd868>
   1f384:	ldr	r1, [r3, #1116]	; 0x45c
   1f388:	cmp	r1, #0
   1f38c:	beq	213e8 <__assert_fail@plt+0xf05c>
   1f390:	ldrd	r2, [sp, #160]	; 0xa0
   1f394:	mov	r0, #42	; 0x2a
   1f398:	strd	r2, [sp, #104]	; 0x68
   1f39c:	bl	185cc <__assert_fail@plt+0x6240>
   1f3a0:	cmp	r0, #0
   1f3a4:	beq	21400 <__assert_fail@plt+0xf074>
   1f3a8:	ldr	r3, [pc, #2132]	; 1fc04 <__assert_fail@plt+0xd878>
   1f3ac:	ldr	r0, [r3, #3040]	; 0xbe0
   1f3b0:	cmp	r0, #0
   1f3b4:	beq	21658 <__assert_fail@plt+0xf2cc>
   1f3b8:	add	r3, r3, #3056	; 0xbf0
   1f3bc:	ldrd	r8, [sp, #104]	; 0x68
   1f3c0:	ldrd	r2, [r3]
   1f3c4:	cmp	r9, r3
   1f3c8:	cmpeq	r8, r2
   1f3cc:	bcs	2142c <__assert_fail@plt+0xf0a0>
   1f3d0:	ldrd	r8, [sp, #104]	; 0x68
   1f3d4:	strd	r2, [sp, #104]	; 0x68
   1f3d8:	add	r7, r0, r8
   1f3dc:	sub	r1, r2, r8
   1f3e0:	mov	r0, r7
   1f3e4:	bl	1217c <strnlen@plt>
   1f3e8:	ldrd	r2, [sp, #104]	; 0x68
   1f3ec:	subs	r1, r2, r8
   1f3f0:	sbc	r3, r3, r9
   1f3f4:	str	r1, [sp, #120]	; 0x78
   1f3f8:	str	r3, [sp, #124]	; 0x7c
   1f3fc:	ldrd	r2, [sp, #120]	; 0x78
   1f400:	mov	r1, #0
   1f404:	cmp	r1, r3
   1f408:	cmpeq	r0, r2
   1f40c:	beq	21640 <__assert_fail@plt+0xf2b4>
   1f410:	mov	r3, r7
   1f414:	ldr	r2, [sp, #96]	; 0x60
   1f418:	ldr	r1, [sp, #60]	; 0x3c
   1f41c:	ldr	r0, [sp, #88]	; 0x58
   1f420:	bl	11dbc <printf@plt>
   1f424:	mov	r7, #0
   1f428:	b	1ec80 <__assert_fail@plt+0xc8f4>
   1f42c:	cmp	r4, #22
   1f430:	beq	1f498 <__assert_fail@plt+0xd10c>
   1f434:	bhi	1f6f8 <__assert_fail@plt+0xd36c>
   1f438:	cmp	r4, #20
   1f43c:	beq	1f278 <__assert_fail@plt+0xceec>
   1f440:	cmp	r4, #21
   1f444:	bne	1f480 <__assert_fail@plt+0xd0f4>
   1f448:	ldr	r3, [sp, #336]	; 0x150
   1f44c:	cmp	r3, #0
   1f450:	bne	1f070 <__assert_fail@plt+0xcce4>
   1f454:	ldrd	r2, [sp, #160]	; 0xa0
   1f458:	ldr	r1, [sp, #304]	; 0x130
   1f45c:	adds	r2, r1, r2
   1f460:	ldr	r1, [sp, #336]	; 0x150
   1f464:	str	r1, [sp]
   1f468:	ldr	r1, [sp, #308]	; 0x134
   1f46c:	adc	r3, r1, r3
   1f470:	b	1ec64 <__assert_fail@plt+0xc8d8>
   1f474:	sub	r3, r3, #31
   1f478:	cmp	r4, r3
   1f47c:	beq	1fe84 <__assert_fail@plt+0xdaf8>
   1f480:	ldr	r1, [pc, #1952]	; 1fc28 <__assert_fail@plt+0xd89c>
   1f484:	mov	r2, #5
   1f488:	mov	r0, #0
   1f48c:	bl	11ea0 <dcgettext@plt>
   1f490:	mov	r1, r4
   1f494:	bl	417d0 <warn@@Base>
   1f498:	ldr	r3, [sp, #336]	; 0x150
   1f49c:	cmp	r3, #0
   1f4a0:	ldreq	r7, [sp, #336]	; 0x150
   1f4a4:	beq	1ec80 <__assert_fail@plt+0xc8f4>
   1f4a8:	b	1f070 <__assert_fail@plt+0xcce4>
   1f4ac:	add	r3, r3, #4
   1f4b0:	cmp	r5, r3
   1f4b4:	bne	1f578 <__assert_fail@plt+0xd1ec>
   1f4b8:	ldr	r3, [sp, #328]	; 0x148
   1f4bc:	cmp	r3, #3
   1f4c0:	bgt	1f4d0 <__assert_fail@plt+0xd144>
   1f4c4:	sub	r3, r4, #6
   1f4c8:	cmp	r3, #1
   1f4cc:	bls	1f4d8 <__assert_fail@plt+0xd14c>
   1f4d0:	cmp	r4, #23
   1f4d4:	bne	1f578 <__assert_fail@plt+0xd1ec>
   1f4d8:	ldr	r3, [sp, #332]	; 0x14c
   1f4dc:	ldr	r2, [sp, #332]	; 0x14c
   1f4e0:	ldr	r3, [r3, #64]	; 0x40
   1f4e4:	ldr	r2, [r2, #60]	; 0x3c
   1f4e8:	cmp	r3, #0
   1f4ec:	cmpne	r3, r2
   1f4f0:	bls	20f04 <__assert_fail@plt+0xeb78>
   1f4f4:	ldr	r3, [sp, #332]	; 0x14c
   1f4f8:	ldr	r0, [r3, #56]	; 0x38
   1f4fc:	ldr	r3, [sp, #344]	; 0x158
   1f500:	cmp	r3, #0
   1f504:	beq	1f530 <__assert_fail@plt+0xd1a4>
   1f508:	ldr	r1, [sp, #344]	; 0x158
   1f50c:	ldr	r3, [sp, #160]	; 0xa0
   1f510:	ldr	ip, [sp, #164]	; 0xa4
   1f514:	ldr	r1, [r1, #48]	; 0x30
   1f518:	adds	r3, r3, r1
   1f51c:	ldr	r1, [sp, #344]	; 0x158
   1f520:	str	r3, [sp, #160]	; 0xa0
   1f524:	ldr	r1, [r1, #52]	; 0x34
   1f528:	adc	r3, ip, r1
   1f52c:	str	r3, [sp, #164]	; 0xa4
   1f530:	ldr	r3, [pc, #1780]	; 1fc2c <__assert_fail@plt+0xd8a0>
   1f534:	ldr	r1, [r8, #1492]	; 0x5d4
   1f538:	cmp	r5, r3
   1f53c:	str	r1, [r0, r2, lsl #2]
   1f540:	ldr	r3, [sp, #332]	; 0x14c
   1f544:	beq	20fec <__assert_fail@plt+0xec60>
   1f548:	ldr	r1, [r3, #60]	; 0x3c
   1f54c:	ldr	r3, [r3, #68]	; 0x44
   1f550:	cmp	r1, r3
   1f554:	bhi	212cc <__assert_fail@plt+0xef40>
   1f558:	ldr	r3, [sp, #332]	; 0x14c
   1f55c:	ldrd	r8, [sp, #160]	; 0xa0
   1f560:	add	r1, r1, #1
   1f564:	ldr	r0, [r3, #48]	; 0x30
   1f568:	lsl	r3, r2, #3
   1f56c:	strd	r8, [r0, r3]
   1f570:	ldr	r3, [sp, #332]	; 0x14c
   1f574:	str	r1, [r3, #60]	; 0x3c
   1f578:	ldr	r2, [sp, #336]	; 0x150
   1f57c:	clz	r3, r5
   1f580:	cmp	r2, #0
   1f584:	lsr	r3, r3, #5
   1f588:	moveq	r8, r3
   1f58c:	movne	r8, #1
   1f590:	cmp	r8, #0
   1f594:	bne	1f260 <__assert_fail@plt+0xced4>
   1f598:	cmp	r5, #66	; 0x42
   1f59c:	beq	2080c <__assert_fail@plt+0xe480>
   1f5a0:	bhi	1f8c0 <__assert_fail@plt+0xd534>
   1f5a4:	cmp	r5, #34	; 0x22
   1f5a8:	beq	1f9b8 <__assert_fail@plt+0xd62c>
   1f5ac:	bls	1f5e8 <__assert_fail@plt+0xd25c>
   1f5b0:	cmp	r5, #54	; 0x36
   1f5b4:	beq	2096c <__assert_fail@plt+0xe5e0>
   1f5b8:	bls	1f694 <__assert_fail@plt+0xd308>
   1f5bc:	cmp	r5, #61	; 0x3d
   1f5c0:	beq	20900 <__assert_fail@plt+0xe574>
   1f5c4:	bls	1f820 <__assert_fail@plt+0xd494>
   1f5c8:	cmp	r5, #62	; 0x3e
   1f5cc:	beq	1ffa8 <__assert_fail@plt+0xdc1c>
   1f5d0:	cmp	r5, #64	; 0x40
   1f5d4:	bne	1f260 <__assert_fail@plt+0xced4>
   1f5d8:	ldr	r3, [pc, #1556]	; 1fbf4 <__assert_fail@plt+0xd868>
   1f5dc:	mov	r2, #1
   1f5e0:	str	r2, [r3, #1492]	; 0x5d4
   1f5e4:	b	1f828 <__assert_fail@plt+0xd49c>
   1f5e8:	cmp	r5, #19
   1f5ec:	beq	2079c <__assert_fail@plt+0xe410>
   1f5f0:	bls	1f7c0 <__assert_fail@plt+0xd434>
   1f5f4:	cmp	r5, #24
   1f5f8:	beq	20870 <__assert_fail@plt+0xe4e4>
   1f5fc:	bls	1f644 <__assert_fail@plt+0xd2b8>
   1f600:	cmp	r5, #25
   1f604:	beq	1f828 <__assert_fail@plt+0xd49c>
   1f608:	cmp	r5, #32
   1f60c:	bne	1f260 <__assert_fail@plt+0xced4>
   1f610:	mov	r0, #9
   1f614:	bl	1211c <putchar@plt>
   1f618:	ldrd	r2, [sp, #160]	; 0xa0
   1f61c:	cmp	r3, #0
   1f620:	cmpeq	r2, #3
   1f624:	bhi	20384 <__assert_fail@plt+0xdff8>
   1f628:	cmp	r2, #3
   1f62c:	ldrls	pc, [pc, r2, lsl #2]
   1f630:	b	20384 <__assert_fail@plt+0xdff8>
   1f634:	andeq	r0, r2, r4, lsl #8
   1f638:	andeq	r0, r2, ip, ror #7
   1f63c:	ldrdeq	r0, [r2], -r4
   1f640:			; <UNDEFINED> instruction: 0x000203bc
   1f644:	cmp	r5, #23
   1f648:	bne	1f260 <__assert_fail@plt+0xced4>
   1f64c:	mov	r0, #9
   1f650:	bl	1211c <putchar@plt>
   1f654:	ldrd	r2, [sp, #160]	; 0xa0
   1f658:	cmp	r3, #0
   1f65c:	cmpeq	r2, #2
   1f660:	beq	2036c <__assert_fail@plt+0xdfe0>
   1f664:	cmp	r3, #0
   1f668:	cmpeq	r2, #3
   1f66c:	beq	21098 <__assert_fail@plt+0xed0c>
   1f670:	cmp	r3, #0
   1f674:	cmpeq	r2, #1
   1f678:	beq	2108c <__assert_fail@plt+0xed00>
   1f67c:	mov	r2, #5
   1f680:	ldr	r1, [pc, #1448]	; 1fc30 <__assert_fail@plt+0xd8a4>
   1f684:	mov	r0, #0
   1f688:	bl	11ea0 <dcgettext@plt>
   1f68c:	bl	11dbc <printf@plt>
   1f690:	b	1f260 <__assert_fail@plt+0xced4>
   1f694:	cmp	r5, #46	; 0x2e
   1f698:	beq	1f868 <__assert_fail@plt+0xd4dc>
   1f69c:	bls	1fa90 <__assert_fail@plt+0xd704>
   1f6a0:	cmp	r5, #47	; 0x2f
   1f6a4:	beq	1f9b8 <__assert_fail@plt+0xd62c>
   1f6a8:	cmp	r5, #50	; 0x32
   1f6ac:	bne	1f260 <__assert_fail@plt+0xced4>
   1f6b0:	mov	r0, #9
   1f6b4:	bl	1211c <putchar@plt>
   1f6b8:	ldrd	r2, [sp, #160]	; 0xa0
   1f6bc:	cmp	r3, #0
   1f6c0:	cmpeq	r2, #2
   1f6c4:	beq	20360 <__assert_fail@plt+0xdfd4>
   1f6c8:	cmp	r3, #0
   1f6cc:	cmpeq	r2, #3
   1f6d0:	beq	21140 <__assert_fail@plt+0xedb4>
   1f6d4:	cmp	r3, #0
   1f6d8:	cmpeq	r2, #1
   1f6dc:	beq	21134 <__assert_fail@plt+0xeda8>
   1f6e0:	mov	r2, #5
   1f6e4:	ldr	r1, [pc, #1352]	; 1fc34 <__assert_fail@plt+0xd8a8>
   1f6e8:	mov	r0, #0
   1f6ec:	bl	11ea0 <dcgettext@plt>
   1f6f0:	bl	11dbc <printf@plt>
   1f6f4:	b	1f260 <__assert_fail@plt+0xced4>
   1f6f8:	cmp	r4, #24
   1f6fc:	bne	1f7b0 <__assert_fail@plt+0xd424>
   1f700:	ldr	r3, [sp, #300]	; 0x12c
   1f704:	mov	r2, #0
   1f708:	add	r1, sp, #156	; 0x9c
   1f70c:	mov	r0, r6
   1f710:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1f714:	ldr	r7, [sp, #156]	; 0x9c
   1f718:	ldr	r3, [sp, #300]	; 0x12c
   1f71c:	add	r7, r6, r7
   1f720:	cmp	r3, r7
   1f724:	strd	r0, [sp, #160]	; 0xa0
   1f728:	bls	1f1ac <__assert_fail@plt+0xce20>
   1f72c:	add	r2, r7, r0
   1f730:	cmp	r7, r2
   1f734:	ldr	ip, [sp, #300]	; 0x12c
   1f738:	movls	r3, #0
   1f73c:	movhi	r3, #1
   1f740:	cmp	ip, r2
   1f744:	orrcc	r3, r3, #1
   1f748:	cmp	r3, #0
   1f74c:	beq	1f778 <__assert_fail@plt+0xd3ec>
   1f750:	mov	r2, #5
   1f754:	ldr	r1, [pc, #1244]	; 1fc38 <__assert_fail@plt+0xd8ac>
   1f758:	mov	r0, #0
   1f75c:	bl	11ea0 <dcgettext@plt>
   1f760:	ldr	r1, [sp, #160]	; 0xa0
   1f764:	bl	417d0 <warn@@Base>
   1f768:	ldr	r3, [sp, #300]	; 0x12c
   1f76c:	sub	r0, r3, r7
   1f770:	asr	r1, r0, #31
   1f774:	strd	r0, [sp, #160]	; 0xa0
   1f778:	ldr	r3, [sp, #336]	; 0x150
   1f77c:	cmp	r3, #0
   1f780:	addne	r6, r7, r0
   1f784:	bne	1f074 <__assert_fail@plt+0xcce8>
   1f788:	ldr	r3, [sp, #60]	; 0x3c
   1f78c:	mov	r2, r0
   1f790:	str	r3, [sp, #4]
   1f794:	ldr	r3, [sp, #300]	; 0x12c
   1f798:	mov	r0, r7
   1f79c:	str	r3, [sp]
   1f7a0:	mov	r3, r1
   1f7a4:	bl	19fc4 <__assert_fail@plt+0x7c38>
   1f7a8:	mov	r6, r0
   1f7ac:	b	1ec80 <__assert_fail@plt+0xc8f4>
   1f7b0:	bcc	1efe4 <__assert_fail@plt+0xcc58>
   1f7b4:	cmp	r4, #25
   1f7b8:	bne	1f480 <__assert_fail@plt+0xd0f4>
   1f7bc:	b	1ef3c <__assert_fail@plt+0xcbb0>
   1f7c0:	cmp	r5, #9
   1f7c4:	bne	1f854 <__assert_fail@plt+0xd4c8>
   1f7c8:	mov	r0, r5
   1f7cc:	bl	1211c <putchar@plt>
   1f7d0:	ldrd	r2, [sp, #160]	; 0xa0
   1f7d4:	cmp	r3, #0
   1f7d8:	cmpeq	r2, #1
   1f7dc:	beq	20354 <__assert_fail@plt+0xdfc8>
   1f7e0:	orrs	r1, r2, r3
   1f7e4:	beq	21128 <__assert_fail@plt+0xed9c>
   1f7e8:	cmp	r3, #0
   1f7ec:	cmpeq	r2, #255	; 0xff
   1f7f0:	beq	1f808 <__assert_fail@plt+0xd47c>
   1f7f4:	mvn	r1, #0
   1f7f8:	mvn	r0, #0
   1f7fc:	cmp	r3, r1
   1f800:	cmpeq	r2, r0
   1f804:	bne	1f260 <__assert_fail@plt+0xced4>
   1f808:	mov	r2, #5
   1f80c:	ldr	r1, [pc, #1064]	; 1fc3c <__assert_fail@plt+0xd8b0>
   1f810:	mov	r0, #0
   1f814:	bl	11ea0 <dcgettext@plt>
   1f818:	bl	11dbc <printf@plt>
   1f81c:	b	1f260 <__assert_fail@plt+0xced4>
   1f820:	cmp	r5, #56	; 0x38
   1f824:	bne	1f260 <__assert_fail@plt+0xced4>
   1f828:	ldr	r3, [sp, #328]	; 0x148
   1f82c:	cmp	r3, #3
   1f830:	ble	20288 <__assert_fail@plt+0xdefc>
   1f834:	cmp	r4, #23
   1f838:	bne	1f9b8 <__assert_fail@plt+0xd62c>
   1f83c:	mov	r2, #5
   1f840:	ldr	r1, [pc, #1016]	; 1fc40 <__assert_fail@plt+0xd8b4>
   1f844:	mov	r0, #0
   1f848:	bl	11ea0 <dcgettext@plt>
   1f84c:	bl	11dbc <printf@plt>
   1f850:	b	1f9b8 <__assert_fail@plt+0xd62c>
   1f854:	bls	1f8b4 <__assert_fail@plt+0xd528>
   1f858:	cmp	r5, #11
   1f85c:	beq	1f868 <__assert_fail@plt+0xd4dc>
   1f860:	cmp	r5, #13
   1f864:	bne	1f260 <__assert_fail@plt+0xced4>
   1f868:	cmp	r4, #24
   1f86c:	bne	1f260 <__assert_fail@plt+0xced4>
   1f870:	ldr	r0, [pc, #972]	; 1fc44 <__assert_fail@plt+0xd8b8>
   1f874:	bl	11dbc <printf@plt>
   1f878:	ldr	r3, [sp, #340]	; 0x154
   1f87c:	ldrd	r4, [sp, #160]	; 0xa0
   1f880:	str	r3, [sp, #16]
   1f884:	add	r3, sp, #304	; 0x130
   1f888:	ldr	r1, [sp, #64]	; 0x40
   1f88c:	ldrd	r2, [r3]
   1f890:	mov	r0, r7
   1f894:	strd	r4, [sp]
   1f898:	strd	r2, [sp, #8]
   1f89c:	mov	r2, fp
   1f8a0:	ldr	r3, [sp, #328]	; 0x148
   1f8a4:	bl	1b888 <__assert_fail@plt+0x94fc>
   1f8a8:	mov	r0, #41	; 0x29
   1f8ac:	bl	1211c <putchar@plt>
   1f8b0:	b	1f260 <__assert_fail@plt+0xced4>
   1f8b4:	cmp	r5, #2
   1f8b8:	beq	1f828 <__assert_fail@plt+0xd49c>
   1f8bc:	b	1f260 <__assert_fail@plt+0xced4>
   1f8c0:	cmp	r5, #107	; 0x6b
   1f8c4:	beq	1f868 <__assert_fail@plt+0xd4dc>
   1f8c8:	bhi	1fa3c <__assert_fail@plt+0xd6b0>
   1f8cc:	cmp	r5, #77	; 0x4d
   1f8d0:	beq	1f828 <__assert_fail@plt+0xd49c>
   1f8d4:	bls	1f950 <__assert_fail@plt+0xd5c4>
   1f8d8:	cmp	r5, #94	; 0x5e
   1f8dc:	beq	201e8 <__assert_fail@plt+0xde5c>
   1f8e0:	bls	1f9b0 <__assert_fail@plt+0xd624>
   1f8e4:	cmp	r5, #101	; 0x65
   1f8e8:	bne	1f260 <__assert_fail@plt+0xced4>
   1f8ec:	mov	r0, #9
   1f8f0:	bl	1211c <putchar@plt>
   1f8f4:	ldrd	r2, [sp, #160]	; 0xa0
   1f8f8:	cmp	r3, #0
   1f8fc:	cmpeq	r2, #1
   1f900:	beq	20348 <__assert_fail@plt+0xdfbc>
   1f904:	orrs	r1, r2, r3
   1f908:	beq	21080 <__assert_fail@plt+0xecf4>
   1f90c:	cmp	r3, #0
   1f910:	cmpeq	r2, #2
   1f914:	beq	21074 <__assert_fail@plt+0xece8>
   1f918:	subs	r1, r2, #64	; 0x40
   1f91c:	sbc	r3, r3, #0
   1f920:	str	r1, [sp, #112]	; 0x70
   1f924:	str	r3, [sp, #116]	; 0x74
   1f928:	ldrd	r2, [sp, #112]	; 0x70
   1f92c:	mov	r0, #0
   1f930:	cmp	r3, #0
   1f934:	cmpeq	r2, #191	; 0xbf
   1f938:	mov	r2, #5
   1f93c:	ldrls	r1, [pc, #772]	; 1fc48 <__assert_fail@plt+0xd8bc>
   1f940:	ldrhi	r1, [pc, #772]	; 1fc4c <__assert_fail@plt+0xd8c0>
   1f944:	bl	11ea0 <dcgettext@plt>
   1f948:	bl	11dbc <printf@plt>
   1f94c:	b	1f260 <__assert_fail@plt+0xced4>
   1f950:	cmp	r5, #72	; 0x48
   1f954:	beq	1f828 <__assert_fail@plt+0xd49c>
   1f958:	bls	1fa30 <__assert_fail@plt+0xd6a4>
   1f95c:	cmp	r5, #74	; 0x4a
   1f960:	beq	1f828 <__assert_fail@plt+0xd49c>
   1f964:	cmp	r5, #76	; 0x4c
   1f968:	bne	1f260 <__assert_fail@plt+0xced4>
   1f96c:	mov	r0, #9
   1f970:	bl	1211c <putchar@plt>
   1f974:	ldrd	r2, [sp, #160]	; 0xa0
   1f978:	cmp	r3, #0
   1f97c:	cmpeq	r2, #1
   1f980:	beq	20378 <__assert_fail@plt+0xdfec>
   1f984:	orrs	r1, r2, r3
   1f988:	beq	21068 <__assert_fail@plt+0xecdc>
   1f98c:	cmp	r3, #0
   1f990:	cmpeq	r2, #2
   1f994:	beq	2105c <__assert_fail@plt+0xecd0>
   1f998:	mov	r2, #5
   1f99c:	ldr	r1, [pc, #684]	; 1fc50 <__assert_fail@plt+0xd8c4>
   1f9a0:	mov	r0, #0
   1f9a4:	bl	11ea0 <dcgettext@plt>
   1f9a8:	bl	11dbc <printf@plt>
   1f9ac:	b	1f260 <__assert_fail@plt+0xced4>
   1f9b0:	cmp	r5, #81	; 0x51
   1f9b4:	bhi	1f260 <__assert_fail@plt+0xced4>
   1f9b8:	cmp	r7, #0
   1f9bc:	beq	1f260 <__assert_fail@plt+0xced4>
   1f9c0:	ldr	r0, [pc, #636]	; 1fc44 <__assert_fail@plt+0xd8b8>
   1f9c4:	bl	11dbc <printf@plt>
   1f9c8:	ldr	r3, [sp, #340]	; 0x154
   1f9cc:	ldrd	r4, [sp, #160]	; 0xa0
   1f9d0:	str	r3, [sp, #16]
   1f9d4:	add	r3, sp, #304	; 0x130
   1f9d8:	ldr	r1, [sp, #64]	; 0x40
   1f9dc:	ldrd	r2, [r3]
   1f9e0:	mov	r0, r7
   1f9e4:	strd	r4, [sp]
   1f9e8:	strd	r2, [sp, #8]
   1f9ec:	mov	r2, fp
   1f9f0:	ldr	r3, [sp, #328]	; 0x148
   1f9f4:	bl	1b888 <__assert_fail@plt+0x94fc>
   1f9f8:	mov	r4, r0
   1f9fc:	mov	r0, #41	; 0x29
   1fa00:	bl	1211c <putchar@plt>
   1fa04:	cmp	r4, #0
   1fa08:	beq	1f260 <__assert_fail@plt+0xced4>
   1fa0c:	ldr	r3, [pc, #480]	; 1fbf4 <__assert_fail@plt+0xd868>
   1fa10:	ldr	r0, [r3, #1492]	; 0x5d4
   1fa14:	cmp	r0, #0
   1fa18:	bne	1f260 <__assert_fail@plt+0xced4>
   1fa1c:	mov	r2, #5
   1fa20:	ldr	r1, [pc, #556]	; 1fc54 <__assert_fail@plt+0xd8c8>
   1fa24:	bl	11ea0 <dcgettext@plt>
   1fa28:	bl	11dbc <printf@plt>
   1fa2c:	b	1f260 <__assert_fail@plt+0xced4>
   1fa30:	cmp	r5, #70	; 0x46
   1fa34:	beq	1f828 <__assert_fail@plt+0xd49c>
   1fa38:	b	1f260 <__assert_fail@plt+0xced4>
   1fa3c:	cmp	r5, #132	; 0x84
   1fa40:	bls	1fac0 <__assert_fail@plt+0xd734>
   1fa44:	cmp	r5, #139	; 0x8b
   1fa48:	bne	1fa9c <__assert_fail@plt+0xd710>
   1fa4c:	mov	r0, #9
   1fa50:	bl	1211c <putchar@plt>
   1fa54:	ldrd	r2, [sp, #160]	; 0xa0
   1fa58:	cmp	r3, #0
   1fa5c:	cmpeq	r2, #1
   1fa60:	beq	20330 <__assert_fail@plt+0xdfa4>
   1fa64:	orrs	r1, r2, r3
   1fa68:	beq	21044 <__assert_fail@plt+0xecb8>
   1fa6c:	cmp	r3, #0
   1fa70:	cmpeq	r2, #2
   1fa74:	beq	2102c <__assert_fail@plt+0xeca0>
   1fa78:	mov	r2, #5
   1fa7c:	ldr	r1, [pc, #732]	; 1fd60 <__assert_fail@plt+0xd9d4>
   1fa80:	mov	r0, #0
   1fa84:	bl	11ea0 <dcgettext@plt>
   1fa88:	bl	11dbc <printf@plt>
   1fa8c:	b	1f260 <__assert_fail@plt+0xced4>
   1fa90:	cmp	r5, #42	; 0x2a
   1fa94:	beq	1f828 <__assert_fail@plt+0xd49c>
   1fa98:	b	1f260 <__assert_fail@plt+0xced4>
   1fa9c:	bhi	1faac <__assert_fail@plt+0xd720>
   1faa0:	cmp	r5, #134	; 0x86
   1faa4:	beq	1f828 <__assert_fail@plt+0xd49c>
   1faa8:	b	1f260 <__assert_fail@plt+0xced4>
   1faac:	sub	r5, r5, #8448	; 0x2100
   1fab0:	sub	r5, r5, #17
   1fab4:	cmp	r5, #3
   1fab8:	bls	1f828 <__assert_fail@plt+0xd49c>
   1fabc:	b	1f260 <__assert_fail@plt+0xced4>
   1fac0:	cmp	r5, #131	; 0x83
   1fac4:	bcs	1f828 <__assert_fail@plt+0xd49c>
   1fac8:	cmp	r5, #111	; 0x6f
   1facc:	bcc	1f260 <__assert_fail@plt+0xced4>
   1fad0:	cmp	r5, #112	; 0x70
   1fad4:	bls	1f868 <__assert_fail@plt+0xd4dc>
   1fad8:	cmp	r5, #126	; 0x7e
   1fadc:	beq	1f828 <__assert_fail@plt+0xd49c>
   1fae0:	b	1f260 <__assert_fail@plt+0xced4>
   1fae4:	ldr	r3, [pc, #364]	; 1fc58 <__assert_fail@plt+0xd8cc>
   1fae8:	cmp	r5, r3
   1faec:	bne	1f4ac <__assert_fail@plt+0xd120>
   1faf0:	ldrd	r2, [sp, #160]	; 0xa0
   1faf4:	ldr	r1, [sp, #332]	; 0x14c
   1faf8:	strd	r2, [r1, #32]
   1fafc:	b	1f260 <__assert_fail@plt+0xced4>
   1fb00:	sub	r3, r3, #3
   1fb04:	cmp	r5, r3
   1fb08:	bcs	1f4b8 <__assert_fail@plt+0xd12c>
   1fb0c:	cmp	r5, #132	; 0x84
   1fb10:	bhi	1fe5c <__assert_fail@plt+0xdad0>
   1fb14:	cmp	r5, #131	; 0x83
   1fb18:	bcs	1f4b8 <__assert_fail@plt+0xd12c>
   1fb1c:	cmp	r5, #118	; 0x76
   1fb20:	bne	1fe50 <__assert_fail@plt+0xdac4>
   1fb24:	ldr	r3, [r8, #1500]	; 0x5dc
   1fb28:	cmp	r3, #0
   1fb2c:	beq	1f578 <__assert_fail@plt+0xd1ec>
   1fb30:	cmp	r4, #14
   1fb34:	beq	2133c <__assert_fail@plt+0xefb0>
   1fb38:	ldr	r3, [pc, #292]	; 1fc64 <__assert_fail@plt+0xd8d8>
   1fb3c:	cmp	r4, r3
   1fb40:	beq	21318 <__assert_fail@plt+0xef8c>
   1fb44:	cmp	r4, #8
   1fb48:	beq	2134c <__assert_fail@plt+0xefc0>
   1fb4c:	mov	r2, #5
   1fb50:	ldr	r1, [pc, #260]	; 1fc5c <__assert_fail@plt+0xd8d0>
   1fb54:	mov	r0, #0
   1fb58:	bl	11ea0 <dcgettext@plt>
   1fb5c:	str	r0, [sp, #68]	; 0x44
   1fb60:	mov	r0, r4
   1fb64:	bl	1a3b4 <__assert_fail@plt+0x8028>
   1fb68:	str	r0, [sp, #60]	; 0x3c
   1fb6c:	mov	r0, r5
   1fb70:	bl	1a330 <__assert_fail@plt+0x7fa4>
   1fb74:	ldr	r3, [sp, #68]	; 0x44
   1fb78:	ldr	r1, [sp, #60]	; 0x3c
   1fb7c:	mov	r2, r0
   1fb80:	mov	r0, r3
   1fb84:	bl	417d0 <warn@@Base>
   1fb88:	mov	r2, #5
   1fb8c:	ldr	r1, [pc, #204]	; 1fc60 <__assert_fail@plt+0xd8d4>
   1fb90:	mov	r0, #0
   1fb94:	bl	11ea0 <dcgettext@plt>
   1fb98:	str	r0, [r8, #1504]	; 0x5e0
   1fb9c:	b	1f578 <__assert_fail@plt+0xd1ec>
   1fba0:	cmp	r5, #56	; 0x38
   1fba4:	beq	1f4b8 <__assert_fail@plt+0xd12c>
   1fba8:	bhi	1fe08 <__assert_fail@plt+0xda7c>
   1fbac:	cmp	r5, #25
   1fbb0:	beq	1f4b8 <__assert_fail@plt+0xd12c>
   1fbb4:	bhi	1fdb0 <__assert_fail@plt+0xda24>
   1fbb8:	cmp	r5, #2
   1fbbc:	beq	1f4b8 <__assert_fail@plt+0xd12c>
   1fbc0:	cmp	r5, #17
   1fbc4:	bne	1f578 <__assert_fail@plt+0xd1ec>
   1fbc8:	ldr	r3, [r8, #1496]	; 0x5d8
   1fbcc:	cmp	r3, #0
   1fbd0:	ldrdne	r2, [sp, #160]	; 0xa0
   1fbd4:	ldrne	r1, [sp, #332]	; 0x14c
   1fbd8:	strdne	r2, [r1, #24]
   1fbdc:	b	1f260 <__assert_fail@plt+0xced4>
   1fbe0:	andeq	r9, r6, r0, ror #27
   1fbe4:	andeq	r8, r4, r8, lsr #29
   1fbe8:	muleq	r4, ip, r2
   1fbec:	muleq	r6, r4, sp
   1fbf0:			; <UNDEFINED> instruction: 0x00069db8
   1fbf4:	andeq	r7, r6, r0, lsr r5
   1fbf8:	andeq	r2, r0, r4, lsl r1
   1fbfc:	andeq	r2, r0, r2, lsr r1
   1fc00:	andeq	ip, r4, r0, asr r4
   1fc04:	andeq	r6, r6, r0, ror #10
   1fc08:	muleq	r4, r0, r2
   1fc0c:	muleq	r4, r4, r2
   1fc10:	andeq	r1, r0, r1, lsl #30
   1fc14:	andeq	ip, r4, r4, ror #5
   1fc18:	andeq	ip, r4, ip, asr #4
   1fc1c:	andeq	ip, r4, r4, lsr #6
   1fc20:	muleq	r4, r8, r3
   1fc24:	muleq	r6, ip, sp
   1fc28:	andeq	ip, r4, ip, lsr #9
   1fc2c:	andeq	r2, r0, r7, lsr r1
   1fc30:	andeq	ip, r4, r4, asr #20
   1fc34:	andeq	ip, r4, ip, lsl #20
   1fc38:	strdeq	ip, [r4], -ip	; <UNPREDICTABLE>
   1fc3c:	andeq	ip, r4, r0, asr #23
   1fc40:	andeq	ip, r4, r0, lsl #25
   1fc44:	muleq	r4, r4, ip
   1fc48:	andeq	ip, r4, ip, ror sl
   1fc4c:	muleq	r4, r0, sl
   1fc50:	andeq	ip, r4, r8, asr #21
   1fc54:	muleq	r4, r8, ip
   1fc58:	andeq	r2, r0, r3, lsr r1
   1fc5c:	andeq	ip, r4, r0, ror r5
   1fc60:	muleq	r4, r8, r5
   1fc64:	andeq	r1, r0, r2, lsl #30
   1fc68:	andeq	r0, r5, r8, asr #3
   1fc6c:	andeq	ip, r4, r8, ror r3
   1fc70:	andeq	ip, r4, ip, asr #6
   1fc74:	andeq	ip, r4, r8, lsr #5
   1fc78:			; <UNDEFINED> instruction: 0x0004c2b8
   1fc7c:	muleq	r6, r4, sp
   1fc80:			; <UNDEFINED> instruction: 0x00069db8
   1fc84:	andeq	ip, r4, r4, asr ip
   1fc88:	andeq	ip, r4, r8, ror #20
   1fc8c:	ldrdeq	ip, [r4], -r8
   1fc90:	strdeq	ip, [r4], -r4
   1fc94:	andeq	ip, r4, ip, lsr #20
   1fc98:	andeq	ip, r4, ip, lsr #21
   1fc9c:	andeq	ip, r4, r8, lsl #12
   1fca0:	andeq	ip, r4, r4, ror #11
   1fca4:	andeq	ip, r4, r0, asr #11
   1fca8:			; <UNDEFINED> instruction: 0x0004c5b4
   1fcac:	andeq	ip, r4, r4, lsr #11
   1fcb0:	andeq	ip, r4, r8, lsr #24
   1fcb4:	andeq	ip, r4, r4, lsl ip
   1fcb8:	strdeq	ip, [r4], -ip	; <UNPREDICTABLE>
   1fcbc:	andeq	ip, r4, r8, ror #23
   1fcc0:	andeq	ip, r4, ip, lsr #19
   1fcc4:	muleq	r4, r4, r9
   1fcc8:	andeq	ip, r4, r0, lsl #19
   1fccc:	andeq	ip, r4, r8, ror #18
   1fcd0:	andeq	ip, r4, r8, asr r9
   1fcd4:	andeq	ip, r4, r0, asr #18
   1fcd8:	andeq	ip, r4, r0, lsr r9
   1fcdc:	andeq	ip, r4, r8, lsr #18
   1fce0:	andeq	ip, r4, r0, lsr #18
   1fce4:	andeq	ip, r4, ip, lsl #18
   1fce8:	andeq	ip, r4, r4, lsr #17
   1fcec:	strdeq	ip, [r4], -r8
   1fcf0:	andeq	ip, r4, r8, ror #17
   1fcf4:	ldrdeq	ip, [r4], -ip	; <UNPREDICTABLE>
   1fcf8:	andeq	ip, r4, r8, asr #17
   1fcfc:			; <UNDEFINED> instruction: 0x0004c8b4
   1fd00:	muleq	r4, r0, r8
   1fd04:	andeq	ip, r4, r0, lsl #17
   1fd08:	andeq	ip, r4, r4, ror r8
   1fd0c:	andeq	ip, r4, r4, ror #16
   1fd10:	andeq	ip, r4, r8, asr r8
   1fd14:	andeq	ip, r4, r0, asr r8
   1fd18:	andeq	ip, r4, r0, asr #16
   1fd1c:	andeq	ip, r4, r4, lsr r8
   1fd20:	andeq	ip, r4, r0, lsr #16
   1fd24:	andeq	ip, r4, r8, lsl r8
   1fd28:	andeq	ip, r4, r4, asr #19
   1fd2c:	ldrdeq	ip, [r4], -r8
   1fd30:	muleq	r4, r0, r9
   1fd34:	andeq	ip, r4, r0, asr #5
   1fd38:	andeq	r9, r6, r0, ror #27
   1fd3c:	andeq	ip, r4, ip, lsr r4
   1fd40:	andeq	ip, r4, r4, asr #13
   1fd44:	andeq	ip, r4, ip, lsl #22
   1fd48:	andeq	ip, r4, r0, lsl #22
   1fd4c:	strdeq	ip, [r4], -r4
   1fd50:	andeq	ip, r4, r0, ror #21
   1fd54:	andeq	r1, r0, r0, lsr #30
   1fd58:			; <UNDEFINED> instruction: 0x0004ccb4
   1fd5c:	andeq	r8, r4, r8, lsr #29
   1fd60:	andeq	ip, r4, ip, lsr ip
   1fd64:	andeq	ip, r4, r0, lsl #23
   1fd68:	andeq	ip, r4, r4, ror fp
   1fd6c:	andeq	ip, r4, r4, ror #22
   1fd70:	andeq	ip, r4, r4, asr fp
   1fd74:	andeq	ip, r4, r8, asr #22
   1fd78:	andeq	ip, r4, ip, lsr fp
   1fd7c:	andeq	ip, r4, r0, lsr fp
   1fd80:	muleq	r4, r8, fp
   1fd84:	andeq	ip, r4, r8, lsr #23
   1fd88:	andeq	ip, r4, r4, lsl #13
   1fd8c:	andeq	ip, r4, r4, asr #14
   1fd90:	andeq	ip, r4, r0, lsr r6
   1fd94:	andeq	ip, r4, r4, ror r7
   1fd98:	muleq	r4, ip, r7
   1fd9c:	andeq	r8, r0, r1
   1fda0:	andeq	r8, r0, r5, ror #14
   1fda4:	andeq	ip, r4, r8, lsl #14
   1fda8:	andeq	sl, r4, r0, lsl #21
   1fdac:	andeq	sl, r4, ip, asr #21
   1fdb0:	cmp	r5, #27
   1fdb4:	bne	1fe44 <__assert_fail@plt+0xdab8>
   1fdb8:	ldr	r3, [r8, #1500]	; 0x5dc
   1fdbc:	cmp	r3, #0
   1fdc0:	beq	1f260 <__assert_fail@plt+0xced4>
   1fdc4:	cmp	r4, #14
   1fdc8:	beq	2136c <__assert_fail@plt+0xefe0>
   1fdcc:	bls	20ea8 <__assert_fail@plt+0xeb1c>
   1fdd0:	cmp	r4, #31
   1fdd4:	beq	2137c <__assert_fail@plt+0xeff0>
   1fdd8:	ldr	r3, [pc, #-380]	; 1fc64 <__assert_fail@plt+0xd8d8>
   1fddc:	cmp	r4, r3
   1fde0:	bne	20eb4 <__assert_fail@plt+0xeb28>
   1fde4:	ldr	r2, [sp, #68]	; 0x44
   1fde8:	mov	r3, #0
   1fdec:	str	fp, [sp]
   1fdf0:	strd	r2, [sp, #4]
   1fdf4:	ldrd	r0, [sp, #160]	; 0xa0
   1fdf8:	ldr	r2, [sp, #344]	; 0x158
   1fdfc:	bl	18bf4 <__assert_fail@plt+0x6868>
   1fe00:	str	r0, [r8, #1508]	; 0x5e4
   1fe04:	b	1f260 <__assert_fail@plt+0xced4>
   1fe08:	cmp	r5, #72	; 0x48
   1fe0c:	beq	1f4b8 <__assert_fail@plt+0xd12c>
   1fe10:	bhi	1fe30 <__assert_fail@plt+0xdaa4>
   1fe14:	cmp	r5, #64	; 0x40
   1fe18:	moveq	r3, #1
   1fe1c:	streq	r3, [r8, #1492]	; 0x5d4
   1fe20:	beq	1f4b8 <__assert_fail@plt+0xd12c>
   1fe24:	cmp	r5, #70	; 0x46
   1fe28:	bne	1f578 <__assert_fail@plt+0xd1ec>
   1fe2c:	b	1f4b8 <__assert_fail@plt+0xd12c>
   1fe30:	cmp	r5, #74	; 0x4a
   1fe34:	beq	1f4b8 <__assert_fail@plt+0xd12c>
   1fe38:	cmp	r5, #77	; 0x4d
   1fe3c:	bne	1f578 <__assert_fail@plt+0xd1ec>
   1fe40:	b	1f4b8 <__assert_fail@plt+0xd12c>
   1fe44:	cmp	r5, #42	; 0x2a
   1fe48:	bne	1f578 <__assert_fail@plt+0xd1ec>
   1fe4c:	b	1f4b8 <__assert_fail@plt+0xd12c>
   1fe50:	cmp	r5, #126	; 0x7e
   1fe54:	bne	1f578 <__assert_fail@plt+0xd1ec>
   1fe58:	b	1f4b8 <__assert_fail@plt+0xd12c>
   1fe5c:	cmp	r5, #134	; 0x86
   1fe60:	bne	1f578 <__assert_fail@plt+0xd1ec>
   1fe64:	b	1f4b8 <__assert_fail@plt+0xd12c>
   1fe68:	ldr	r3, [sp, #300]	; 0x12c
   1fe6c:	add	r1, sp, #156	; 0x9c
   1fe70:	mov	r0, sl
   1fe74:	bl	1b3b0 <__assert_fail@plt+0x9024>
   1fe78:	ldr	r6, [sp, #156]	; 0x9c
   1fe7c:	add	r6, sl, r6
   1fe80:	strd	r0, [sp, #160]	; 0xa0
   1fe84:	ldr	r3, [sp, #336]	; 0x150
   1fe88:	cmp	r3, #0
   1fe8c:	bne	1f070 <__assert_fail@plt+0xcce4>
   1fe90:	ldr	r3, [sp, #340]	; 0x154
   1fe94:	mov	r1, #46	; 0x2e
   1fe98:	ldr	r0, [r3, #8]
   1fe9c:	bl	121e8 <strrchr@plt>
   1fea0:	cmp	r0, #0
   1fea4:	beq	21254 <__assert_fail@plt+0xeec8>
   1fea8:	ldr	r1, [pc, #-584]	; 1fc68 <__assert_fail@plt+0xd8dc>
   1feac:	bl	11d98 <strcmp@plt>
   1feb0:	clz	r8, r0
   1feb4:	lsr	r8, r8, #5
   1feb8:	ldr	r1, [pc, #-596]	; 1fc6c <__assert_fail@plt+0xd8e0>
   1febc:	mov	r2, #5
   1fec0:	mov	r0, #0
   1fec4:	mov	r7, r0
   1fec8:	bl	11ea0 <dcgettext@plt>
   1fecc:	ldrd	r2, [sp, #160]	; 0xa0
   1fed0:	str	r7, [sp]
   1fed4:	str	r0, [sp, #88]	; 0x58
   1fed8:	ldr	r0, [pc, #-388]	; 1fd5c <__assert_fail@plt+0xd9d0>
   1fedc:	bl	18b24 <__assert_fail@plt+0x6798>
   1fee0:	ldr	r3, [sp, #68]	; 0x44
   1fee4:	ldr	r2, [sp, #344]	; 0x158
   1fee8:	str	r3, [sp, #4]
   1feec:	str	r8, [sp, #8]
   1fef0:	str	fp, [sp]
   1fef4:	mov	r9, r0
   1fef8:	ldrd	r0, [sp, #160]	; 0xa0
   1fefc:	bl	18bf4 <__assert_fail@plt+0x6868>
   1ff00:	mov	r2, r9
   1ff04:	ldr	r1, [sp, #60]	; 0x3c
   1ff08:	mov	r3, r0
   1ff0c:	ldr	r0, [sp, #88]	; 0x58
   1ff10:	bl	11dbc <printf@plt>
   1ff14:	b	1ec80 <__assert_fail@plt+0xc8f4>
   1ff18:	ldr	r3, [sp, #336]	; 0x150
   1ff1c:	cmp	r3, #0
   1ff20:	bne	1f070 <__assert_fail@plt+0xcce4>
   1ff24:	ldr	r1, [pc, #-700]	; 1fc70 <__assert_fail@plt+0xd8e4>
   1ff28:	mov	r2, #5
   1ff2c:	mov	r0, r3
   1ff30:	bl	11ea0 <dcgettext@plt>
   1ff34:	ldr	r3, [sp, #336]	; 0x150
   1ff38:	str	r3, [sp]
   1ff3c:	ldrd	r2, [sp, #160]	; 0xa0
   1ff40:	mov	r7, r0
   1ff44:	ldr	r0, [pc, #-496]	; 1fd5c <__assert_fail@plt+0xd9d0>
   1ff48:	bl	18b24 <__assert_fail@plt+0x6798>
   1ff4c:	mov	r8, r0
   1ff50:	ldrd	r0, [sp, #160]	; 0xa0
   1ff54:	bl	1a1cc <__assert_fail@plt+0x7e40>
   1ff58:	mov	r3, r0
   1ff5c:	mov	r2, r8
   1ff60:	mov	r0, r7
   1ff64:	ldr	r1, [sp, #60]	; 0x3c
   1ff68:	bl	11dbc <printf@plt>
   1ff6c:	ldr	r7, [sp, #336]	; 0x150
   1ff70:	b	1ec80 <__assert_fail@plt+0xc8f4>
   1ff74:	ldr	r3, [sp, #336]	; 0x150
   1ff78:	cmp	r3, #0
   1ff7c:	bne	1f070 <__assert_fail@plt+0xcce4>
   1ff80:	str	r3, [sp]
   1ff84:	ldr	r0, [pc, #-560]	; 1fd5c <__assert_fail@plt+0xd9d0>
   1ff88:	ldrd	r2, [sp, #160]	; 0xa0
   1ff8c:	bl	18b24 <__assert_fail@plt+0x6798>
   1ff90:	ldr	r1, [sp, #60]	; 0x3c
   1ff94:	mov	r2, r0
   1ff98:	ldr	r0, [pc, #-812]	; 1fc74 <__assert_fail@plt+0xd8e8>
   1ff9c:	bl	11dbc <printf@plt>
   1ffa0:	ldr	r7, [sp, #336]	; 0x150
   1ffa4:	b	1ec80 <__assert_fail@plt+0xc8f4>
   1ffa8:	mov	r0, #9
   1ffac:	bl	1211c <putchar@plt>
   1ffb0:	ldrd	r2, [sp, #160]	; 0xa0
   1ffb4:	cmp	r3, #0
   1ffb8:	cmpeq	r2, #134	; 0x86
   1ffbc:	bhi	205cc <__assert_fail@plt+0xe240>
   1ffc0:	cmp	r2, #134	; 0x86
   1ffc4:	ldrls	pc, [pc, r2, lsl #2]
   1ffc8:	b	205cc <__assert_fail@plt+0xe240>
   1ffcc:	andeq	r0, r2, r0, asr #11
   1ffd0:			; <UNDEFINED> instruction: 0x000205b4
   1ffd4:	andeq	r0, r2, r8, lsr #11
   1ffd8:	muleq	r2, ip, r5
   1ffdc:	muleq	r2, r0, r5
   1ffe0:	andeq	r0, r2, r4, lsl #11
   1ffe4:	andeq	r0, r2, r8, ror r5
   1ffe8:	andeq	r0, r2, ip, ror #10
   1ffec:	andeq	r0, r2, r0, ror #10
   1fff0:	andeq	r0, r2, r4, asr r5
   1fff4:	andeq	r0, r2, r8, asr #10
   1fff8:	andeq	r0, r2, ip, lsr r5
   1fffc:	andeq	r0, r2, r0, lsr r5
   20000:	andeq	r0, r2, r4, lsr #10
   20004:	andeq	r0, r2, r8, lsl r5
   20008:	andeq	r0, r2, ip, lsl #10
   2000c:	andeq	r0, r2, r0, lsl #10
   20010:	strdeq	r0, [r2], -r4
   20014:	andeq	r0, r2, r8, ror #9
   20018:	andeq	r0, r2, ip, asr #11
   2001c:	andeq	r0, r2, ip, asr #11
   20020:	andeq	r0, r2, ip, asr #11
   20024:	andeq	r0, r2, ip, asr #11
   20028:	andeq	r0, r2, ip, asr #11
   2002c:	andeq	r0, r2, ip, asr #11
   20030:	andeq	r0, r2, ip, asr #11
   20034:	andeq	r0, r2, ip, asr #11
   20038:	andeq	r0, r2, ip, asr #11
   2003c:	andeq	r0, r2, ip, asr #11
   20040:	andeq	r0, r2, ip, asr #11
   20044:	andeq	r0, r2, ip, asr #11
   20048:	andeq	r0, r2, ip, asr #11
   2004c:	andeq	r0, r2, ip, asr #11
   20050:	andeq	r0, r2, ip, asr #11
   20054:	andeq	r0, r2, ip, asr #11
   20058:	andeq	r0, r2, ip, asr #11
   2005c:	andeq	r0, r2, ip, asr #11
   20060:	andeq	r0, r2, ip, asr #11
   20064:	andeq	r0, r2, ip, asr #11
   20068:	andeq	r0, r2, ip, asr #11
   2006c:	andeq	r0, r2, ip, asr #11
   20070:	andeq	r0, r2, ip, asr #11
   20074:	andeq	r0, r2, ip, asr #11
   20078:	andeq	r0, r2, ip, asr #11
   2007c:	andeq	r0, r2, ip, asr #11
   20080:	andeq	r0, r2, ip, asr #11
   20084:	andeq	r0, r2, ip, asr #11
   20088:	andeq	r0, r2, ip, asr #11
   2008c:	andeq	r0, r2, ip, asr #11
   20090:	andeq	r0, r2, ip, asr #11
   20094:	andeq	r0, r2, ip, asr #11
   20098:	andeq	r0, r2, ip, asr #11
   2009c:	andeq	r0, r2, ip, asr #11
   200a0:	andeq	r0, r2, ip, asr #11
   200a4:	andeq	r0, r2, ip, asr #11
   200a8:	andeq	r0, r2, ip, asr #11
   200ac:	andeq	r0, r2, ip, asr #11
   200b0:	andeq	r0, r2, ip, asr #11
   200b4:	andeq	r0, r2, ip, asr #11
   200b8:	andeq	r0, r2, ip, asr #11
   200bc:	andeq	r0, r2, ip, asr #11
   200c0:	andeq	r0, r2, ip, asr #11
   200c4:	andeq	r0, r2, ip, asr #11
   200c8:	andeq	r0, r2, ip, asr #11
   200cc:	andeq	r0, r2, ip, asr #11
   200d0:	andeq	r0, r2, ip, asr #11
   200d4:	andeq	r0, r2, ip, asr #11
   200d8:	andeq	r0, r2, ip, asr #11
   200dc:	andeq	r0, r2, ip, asr #11
   200e0:	andeq	r0, r2, ip, asr #11
   200e4:	andeq	r0, r2, ip, asr #11
   200e8:	andeq	r0, r2, ip, asr #11
   200ec:	andeq	r0, r2, ip, asr #11
   200f0:	andeq	r0, r2, ip, asr #11
   200f4:	andeq	r0, r2, ip, asr #11
   200f8:	andeq	r0, r2, ip, asr #11
   200fc:	andeq	r0, r2, ip, asr #11
   20100:	andeq	r0, r2, ip, asr #11
   20104:	andeq	r0, r2, ip, asr #11
   20108:	andeq	r0, r2, ip, asr #11
   2010c:	andeq	r0, r2, ip, asr #11
   20110:	andeq	r0, r2, ip, asr #11
   20114:	andeq	r0, r2, ip, asr #11
   20118:	andeq	r0, r2, ip, asr #11
   2011c:	andeq	r0, r2, ip, asr #11
   20120:	andeq	r0, r2, ip, asr #11
   20124:	andeq	r0, r2, ip, asr #11
   20128:	andeq	r0, r2, ip, asr #11
   2012c:	andeq	r0, r2, ip, asr #11
   20130:	andeq	r0, r2, ip, asr #11
   20134:	andeq	r0, r2, ip, asr #11
   20138:	andeq	r0, r2, ip, asr #11
   2013c:	andeq	r0, r2, ip, asr #11
   20140:	andeq	r0, r2, ip, asr #11
   20144:	andeq	r0, r2, ip, asr #11
   20148:	andeq	r0, r2, ip, asr #11
   2014c:	andeq	r0, r2, ip, asr #11
   20150:	andeq	r0, r2, ip, asr #11
   20154:	andeq	r0, r2, ip, asr #11
   20158:	andeq	r0, r2, ip, asr #11
   2015c:	andeq	r0, r2, ip, asr #11
   20160:	andeq	r0, r2, ip, asr #11
   20164:	andeq	r0, r2, ip, asr #11
   20168:	andeq	r0, r2, ip, asr #11
   2016c:	andeq	r0, r2, ip, asr #11
   20170:	andeq	r0, r2, ip, asr #11
   20174:	andeq	r0, r2, ip, asr #11
   20178:	andeq	r0, r2, ip, asr #11
   2017c:	andeq	r0, r2, ip, asr #11
   20180:	andeq	r0, r2, ip, asr #11
   20184:	andeq	r0, r2, ip, asr #11
   20188:	andeq	r0, r2, ip, asr #11
   2018c:	andeq	r0, r2, ip, asr #11
   20190:	andeq	r0, r2, ip, asr #11
   20194:	andeq	r0, r2, ip, asr #11
   20198:	andeq	r0, r2, ip, asr #11
   2019c:	andeq	r0, r2, ip, asr #11
   201a0:	andeq	r0, r2, ip, asr #11
   201a4:	andeq	r0, r2, ip, asr #11
   201a8:	andeq	r0, r2, ip, asr #11
   201ac:	andeq	r0, r2, ip, asr #11
   201b0:	andeq	r0, r2, ip, asr #11
   201b4:	andeq	r0, r2, ip, asr #11
   201b8:	andeq	r0, r2, ip, asr #11
   201bc:	andeq	r0, r2, ip, asr #11
   201c0:	andeq	r0, r2, ip, asr #11
   201c4:	andeq	r0, r2, ip, asr #11
   201c8:	andeq	r0, r2, ip, asr #11
   201cc:	ldrdeq	r0, [r2], -ip
   201d0:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   201d4:	andeq	r0, r2, r4, asr #9
   201d8:			; <UNDEFINED> instruction: 0x000204b8
   201dc:	andeq	r0, r2, ip, lsr #9
   201e0:	andeq	r0, r2, r0, lsr #9
   201e4:	muleq	r2, r4, r4
   201e8:	mov	r0, #9
   201ec:	bl	1211c <putchar@plt>
   201f0:	ldr	r3, [sp, #160]	; 0xa0
   201f4:	ldr	r2, [sp, #164]	; 0xa4
   201f8:	subs	r3, r3, #1
   201fc:	str	r3, [sp, #80]	; 0x50
   20200:	sbc	r3, r2, #0
   20204:	str	r3, [sp, #84]	; 0x54
   20208:	ldrd	r2, [sp, #80]	; 0x50
   2020c:	cmp	r3, #0
   20210:	cmpeq	r2, #4
   20214:	bhi	212e4 <__assert_fail@plt+0xef58>
   20218:	cmp	r2, #4
   2021c:	ldrls	pc, [pc, r2, lsl #2]
   20220:	b	212e4 <__assert_fail@plt+0xef58>
   20224:	andeq	r0, r2, ip, ror r4
   20228:	andeq	r0, r2, r4, ror #8
   2022c:	andeq	r0, r2, ip, asr #8
   20230:	andeq	r0, r2, r4, lsr r4
   20234:	andeq	r0, r2, ip, lsl r4
   20238:	ldr	r3, [sp, #300]	; 0x12c
   2023c:	add	r6, sl, #2
   20240:	cmp	r6, r3
   20244:	bcs	20604 <__assert_fail@plt+0xe278>
   20248:	mov	r1, #2
   2024c:	b	1f0ac <__assert_fail@plt+0xcd20>
   20250:	ldr	r3, [sp, #300]	; 0x12c
   20254:	mov	r2, #0
   20258:	add	r1, sp, #156	; 0x9c
   2025c:	mov	r0, sl
   20260:	bl	1b3b0 <__assert_fail@plt+0x9024>
   20264:	ldr	r6, [sp, #156]	; 0x9c
   20268:	add	r6, sl, r6
   2026c:	strd	r0, [sp, #160]	; 0xa0
   20270:	b	1f02c <__assert_fail@plt+0xcca0>
   20274:	mov	r2, #1
   20278:	mov	r3, #0
   2027c:	mov	r6, sl
   20280:	strd	r2, [sp, #160]	; 0xa0
   20284:	b	1ef3c <__assert_fail@plt+0xcbb0>
   20288:	sub	r3, r4, #6
   2028c:	cmp	r3, #1
   20290:	bhi	1f834 <__assert_fail@plt+0xd4a8>
   20294:	b	1f83c <__assert_fail@plt+0xd4b0>
   20298:	ldr	r3, [pc, #-1384]	; 1fd38 <__assert_fail@plt+0xd9ac>
   2029c:	mov	r0, r6
   202a0:	mov	r1, #1
   202a4:	b	1f214 <__assert_fail@plt+0xce88>
   202a8:	ldr	r3, [sp, #300]	; 0x12c
   202ac:	cmp	r3, r7
   202b0:	bcs	2114c <__assert_fail@plt+0xedc0>
   202b4:	mov	r0, #0
   202b8:	cmp	r4, #20
   202bc:	str	r0, [sp, #184]	; 0xb8
   202c0:	str	r0, [sp, #160]	; 0xa0
   202c4:	str	r0, [sp, #188]	; 0xbc
   202c8:	str	r0, [sp, #164]	; 0xa4
   202cc:	beq	21304 <__assert_fail@plt+0xef78>
   202d0:	mov	r2, r0
   202d4:	mov	r3, r0
   202d8:	mov	lr, r0
   202dc:	str	r0, [sp, #88]	; 0x58
   202e0:	add	ip, sp, #192	; 0xc0
   202e4:	mov	r0, lr
   202e8:	ldr	r1, [sp, #88]	; 0x58
   202ec:	str	ip, [sp]
   202f0:	bl	1a73c <__assert_fail@plt+0x83b0>
   202f4:	ldr	r1, [sp, #60]	; 0x3c
   202f8:	mov	r2, r0
   202fc:	ldr	r0, [pc, #-1676]	; 1fc78 <__assert_fail@plt+0xd8ec>
   20300:	bl	11dbc <printf@plt>
   20304:	ldr	r2, [pc, #-1680]	; 1fc7c <__assert_fail@plt+0xd8f0>
   20308:	ldr	r3, [pc, #-1680]	; 1fc80 <__assert_fail@plt+0xd8f4>
   2030c:	ldr	r2, [r2]
   20310:	ldr	r3, [r3]
   20314:	orrs	r3, r2, r3
   20318:	bne	1f288 <__assert_fail@plt+0xcefc>
   2031c:	b	1f2c8 <__assert_fail@plt+0xcf3c>
   20320:	str	r3, [sp]
   20324:	mov	r2, r8
   20328:	mov	r3, r9
   2032c:	b	1ef50 <__assert_fail@plt+0xcbc4>
   20330:	mov	r2, #5
   20334:	ldr	r1, [pc, #-1720]	; 1fc84 <__assert_fail@plt+0xd8f8>
   20338:	mov	r0, r8
   2033c:	bl	11ea0 <dcgettext@plt>
   20340:	bl	11dbc <printf@plt>
   20344:	b	1f260 <__assert_fail@plt+0xced4>
   20348:	ldr	r0, [pc, #-1736]	; 1fc88 <__assert_fail@plt+0xd8fc>
   2034c:	bl	11dbc <printf@plt>
   20350:	b	1f260 <__assert_fail@plt+0xced4>
   20354:	ldr	r0, [pc, #-1744]	; 1fc8c <__assert_fail@plt+0xd900>
   20358:	bl	11dbc <printf@plt>
   2035c:	b	1f260 <__assert_fail@plt+0xced4>
   20360:	ldr	r0, [pc, #-1752]	; 1fc90 <__assert_fail@plt+0xd904>
   20364:	bl	11dbc <printf@plt>
   20368:	b	1f260 <__assert_fail@plt+0xced4>
   2036c:	ldr	r0, [pc, #-1760]	; 1fc94 <__assert_fail@plt+0xd908>
   20370:	bl	11dbc <printf@plt>
   20374:	b	1f260 <__assert_fail@plt+0xced4>
   20378:	ldr	r0, [pc, #-1768]	; 1fc98 <__assert_fail@plt+0xd90c>
   2037c:	bl	11dbc <printf@plt>
   20380:	b	1f260 <__assert_fail@plt+0xced4>
   20384:	ldr	r1, [pc, #-1776]	; 1fc9c <__assert_fail@plt+0xd910>
   20388:	mov	r2, #5
   2038c:	mov	r0, #0
   20390:	bl	11ea0 <dcgettext@plt>
   20394:	mov	r3, #0
   20398:	str	r3, [sp]
   2039c:	ldrd	r2, [sp, #160]	; 0xa0
   203a0:	mov	r4, r0
   203a4:	ldr	r0, [pc, #-1616]	; 1fd5c <__assert_fail@plt+0xd9d0>
   203a8:	bl	18b24 <__assert_fail@plt+0x6798>
   203ac:	mov	r1, r0
   203b0:	mov	r0, r4
   203b4:	bl	11dbc <printf@plt>
   203b8:	b	1f260 <__assert_fail@plt+0xced4>
   203bc:	mov	r2, #5
   203c0:	ldr	r1, [pc, #-1832]	; 1fca0 <__assert_fail@plt+0xd914>
   203c4:	mov	r0, #0
   203c8:	bl	11ea0 <dcgettext@plt>
   203cc:	bl	11dbc <printf@plt>
   203d0:	b	1f260 <__assert_fail@plt+0xced4>
   203d4:	mov	r2, #5
   203d8:	ldr	r1, [pc, #-1852]	; 1fca4 <__assert_fail@plt+0xd918>
   203dc:	mov	r0, #0
   203e0:	bl	11ea0 <dcgettext@plt>
   203e4:	bl	11dbc <printf@plt>
   203e8:	b	1f260 <__assert_fail@plt+0xced4>
   203ec:	mov	r2, #5
   203f0:	ldr	r1, [pc, #-1872]	; 1fca8 <__assert_fail@plt+0xd91c>
   203f4:	mov	r0, #0
   203f8:	bl	11ea0 <dcgettext@plt>
   203fc:	bl	11dbc <printf@plt>
   20400:	b	1f260 <__assert_fail@plt+0xced4>
   20404:	mov	r2, #5
   20408:	ldr	r1, [pc, #-1892]	; 1fcac <__assert_fail@plt+0xd920>
   2040c:	mov	r0, #0
   20410:	bl	11ea0 <dcgettext@plt>
   20414:	bl	11dbc <printf@plt>
   20418:	b	1f260 <__assert_fail@plt+0xced4>
   2041c:	mov	r2, #5
   20420:	ldr	r1, [pc, #-1912]	; 1fcb0 <__assert_fail@plt+0xd924>
   20424:	mov	r0, #0
   20428:	bl	11ea0 <dcgettext@plt>
   2042c:	bl	11dbc <printf@plt>
   20430:	b	1f260 <__assert_fail@plt+0xced4>
   20434:	mov	r2, #5
   20438:	ldr	r1, [pc, #-1932]	; 1fcb4 <__assert_fail@plt+0xd928>
   2043c:	mov	r0, #0
   20440:	bl	11ea0 <dcgettext@plt>
   20444:	bl	11dbc <printf@plt>
   20448:	b	1f260 <__assert_fail@plt+0xced4>
   2044c:	mov	r2, #5
   20450:	ldr	r1, [pc, #-1952]	; 1fcb8 <__assert_fail@plt+0xd92c>
   20454:	mov	r0, #0
   20458:	bl	11ea0 <dcgettext@plt>
   2045c:	bl	11dbc <printf@plt>
   20460:	b	1f260 <__assert_fail@plt+0xced4>
   20464:	mov	r2, #5
   20468:	ldr	r1, [pc, #-1972]	; 1fcbc <__assert_fail@plt+0xd930>
   2046c:	mov	r0, #0
   20470:	bl	11ea0 <dcgettext@plt>
   20474:	bl	11dbc <printf@plt>
   20478:	b	1f260 <__assert_fail@plt+0xced4>
   2047c:	mov	r2, #5
   20480:	ldr	r1, [pc, #-1920]	; 1fd08 <__assert_fail@plt+0xd97c>
   20484:	mov	r0, #0
   20488:	bl	11ea0 <dcgettext@plt>
   2048c:	bl	11dbc <printf@plt>
   20490:	b	1f260 <__assert_fail@plt+0xced4>
   20494:	ldr	r0, [pc, #-2012]	; 1fcc0 <__assert_fail@plt+0xd934>
   20498:	bl	11dbc <printf@plt>
   2049c:	b	1f260 <__assert_fail@plt+0xced4>
   204a0:	ldr	r0, [pc, #-2020]	; 1fcc4 <__assert_fail@plt+0xd938>
   204a4:	bl	11dbc <printf@plt>
   204a8:	b	1f260 <__assert_fail@plt+0xced4>
   204ac:	ldr	r0, [pc, #-2028]	; 1fcc8 <__assert_fail@plt+0xd93c>
   204b0:	bl	11dbc <printf@plt>
   204b4:	b	1f260 <__assert_fail@plt+0xced4>
   204b8:	ldr	r0, [pc, #-2036]	; 1fccc <__assert_fail@plt+0xd940>
   204bc:	bl	11dbc <printf@plt>
   204c0:	b	1f260 <__assert_fail@plt+0xced4>
   204c4:	ldr	r0, [pc, #-2044]	; 1fcd0 <__assert_fail@plt+0xd944>
   204c8:	bl	11dbc <printf@plt>
   204cc:	b	1f260 <__assert_fail@plt+0xced4>
   204d0:	ldr	r0, [pc, #-2052]	; 1fcd4 <__assert_fail@plt+0xd948>
   204d4:	bl	11dbc <printf@plt>
   204d8:	b	1f260 <__assert_fail@plt+0xced4>
   204dc:	ldr	r0, [pc, #-2060]	; 1fcd8 <__assert_fail@plt+0xd94c>
   204e0:	bl	11dbc <printf@plt>
   204e4:	b	1f260 <__assert_fail@plt+0xced4>
   204e8:	ldr	r0, [pc, #-2068]	; 1fcdc <__assert_fail@plt+0xd950>
   204ec:	bl	11dbc <printf@plt>
   204f0:	b	1f260 <__assert_fail@plt+0xced4>
   204f4:	ldr	r0, [pc, #-2076]	; 1fce0 <__assert_fail@plt+0xd954>
   204f8:	bl	11dbc <printf@plt>
   204fc:	b	1f260 <__assert_fail@plt+0xced4>
   20500:	ldr	r0, [pc, #-2084]	; 1fce4 <__assert_fail@plt+0xd958>
   20504:	bl	11dbc <printf@plt>
   20508:	b	1f260 <__assert_fail@plt+0xced4>
   2050c:	ldr	r0, [pc, #-2092]	; 1fce8 <__assert_fail@plt+0xd95c>
   20510:	bl	11dbc <printf@plt>
   20514:	b	1f260 <__assert_fail@plt+0xced4>
   20518:	ldr	r0, [pc, #-2100]	; 1fcec <__assert_fail@plt+0xd960>
   2051c:	bl	11dbc <printf@plt>
   20520:	b	1f260 <__assert_fail@plt+0xced4>
   20524:	ldr	r0, [pc, #-2108]	; 1fcf0 <__assert_fail@plt+0xd964>
   20528:	bl	11dbc <printf@plt>
   2052c:	b	1f260 <__assert_fail@plt+0xced4>
   20530:	ldr	r0, [pc, #-2116]	; 1fcf4 <__assert_fail@plt+0xd968>
   20534:	bl	11dbc <printf@plt>
   20538:	b	1f260 <__assert_fail@plt+0xced4>
   2053c:	ldr	r0, [pc, #-2124]	; 1fcf8 <__assert_fail@plt+0xd96c>
   20540:	bl	11dbc <printf@plt>
   20544:	b	1f260 <__assert_fail@plt+0xced4>
   20548:	ldr	r0, [pc, #-2132]	; 1fcfc <__assert_fail@plt+0xd970>
   2054c:	bl	11dbc <printf@plt>
   20550:	b	1f260 <__assert_fail@plt+0xced4>
   20554:	ldr	r0, [pc, #-2140]	; 1fd00 <__assert_fail@plt+0xd974>
   20558:	bl	11dbc <printf@plt>
   2055c:	b	1f260 <__assert_fail@plt+0xced4>
   20560:	ldr	r0, [pc, #-2148]	; 1fd04 <__assert_fail@plt+0xd978>
   20564:	bl	11dbc <printf@plt>
   20568:	b	1f260 <__assert_fail@plt+0xced4>
   2056c:	ldr	r0, [pc, #-2156]	; 1fd08 <__assert_fail@plt+0xd97c>
   20570:	bl	11dbc <printf@plt>
   20574:	b	1f260 <__assert_fail@plt+0xced4>
   20578:	ldr	r0, [pc, #-2164]	; 1fd0c <__assert_fail@plt+0xd980>
   2057c:	bl	11dbc <printf@plt>
   20580:	b	1f260 <__assert_fail@plt+0xced4>
   20584:	ldr	r0, [pc, #-2172]	; 1fd10 <__assert_fail@plt+0xd984>
   20588:	bl	11dbc <printf@plt>
   2058c:	b	1f260 <__assert_fail@plt+0xced4>
   20590:	ldr	r0, [pc, #-2180]	; 1fd14 <__assert_fail@plt+0xd988>
   20594:	bl	11dbc <printf@plt>
   20598:	b	1f260 <__assert_fail@plt+0xced4>
   2059c:	ldr	r0, [pc, #-2188]	; 1fd18 <__assert_fail@plt+0xd98c>
   205a0:	bl	11dbc <printf@plt>
   205a4:	b	1f260 <__assert_fail@plt+0xced4>
   205a8:	ldr	r0, [pc, #-2196]	; 1fd1c <__assert_fail@plt+0xd990>
   205ac:	bl	11dbc <printf@plt>
   205b0:	b	1f260 <__assert_fail@plt+0xced4>
   205b4:	ldr	r0, [pc, #-2204]	; 1fd20 <__assert_fail@plt+0xd994>
   205b8:	bl	11dbc <printf@plt>
   205bc:	b	1f260 <__assert_fail@plt+0xced4>
   205c0:	ldr	r0, [pc, #-2212]	; 1fd24 <__assert_fail@plt+0xd998>
   205c4:	bl	11dbc <printf@plt>
   205c8:	b	1f260 <__assert_fail@plt+0xced4>
   205cc:	subs	r1, r2, #128	; 0x80
   205d0:	sbc	r3, r3, #0
   205d4:	str	r1, [sp, #144]	; 0x90
   205d8:	str	r3, [sp, #148]	; 0x94
   205dc:	ldrd	r2, [sp, #144]	; 0x90
   205e0:	mov	r0, #0
   205e4:	cmp	r3, #0
   205e8:	cmpeq	r2, #127	; 0x7f
   205ec:	mov	r2, #5
   205f0:	ldrls	r1, [pc, #-2256]	; 1fd28 <__assert_fail@plt+0xd99c>
   205f4:	ldrhi	r1, [pc, #-2256]	; 1fd2c <__assert_fail@plt+0xd9a0>
   205f8:	bl	11ea0 <dcgettext@plt>
   205fc:	bl	11dbc <printf@plt>
   20600:	b	1f260 <__assert_fail@plt+0xced4>
   20604:	cmp	sl, r3
   20608:	bcs	1f02c <__assert_fail@plt+0xcca0>
   2060c:	sub	r1, r3, sl
   20610:	sub	r3, r1, #1
   20614:	cmp	r3, #7
   20618:	bhi	1f02c <__assert_fail@plt+0xcca0>
   2061c:	b	1f0ac <__assert_fail@plt+0xcd20>
   20620:	ldr	r3, [sp, #336]	; 0x150
   20624:	add	r7, r6, #16
   20628:	cmp	r3, #0
   2062c:	bne	20754 <__assert_fail@plt+0xe3c8>
   20630:	ldr	r3, [sp, #300]	; 0x12c
   20634:	add	r8, r6, #8
   20638:	cmp	r8, r3
   2063c:	bls	211e0 <__assert_fail@plt+0xee54>
   20640:	mov	r2, #0
   20644:	mov	r3, #0
   20648:	strd	r2, [sp, #168]	; 0xa8
   2064c:	strd	r2, [sp, #176]	; 0xb0
   20650:	ldr	r3, [sp, #300]	; 0x12c
   20654:	cmp	r3, r7
   20658:	bcs	211c0 <__assert_fail@plt+0xee34>
   2065c:	mov	r2, #0
   20660:	mov	r0, r2
   20664:	mov	r1, r2
   20668:	mov	r6, r2
   2066c:	mov	r8, r2
   20670:	str	r2, [sp, #184]	; 0xb8
   20674:	str	r2, [sp, #192]	; 0xc0
   20678:	str	r2, [sp, #188]	; 0xbc
   2067c:	str	r2, [sp, #196]	; 0xc4
   20680:	ldr	r3, [pc, #-2384]	; 1fd38 <__assert_fail@plt+0xd9ac>
   20684:	ldr	ip, [pc, #-2396]	; 1fd30 <__assert_fail@plt+0xd9a4>
   20688:	ldr	r2, [sp, #168]	; 0xa8
   2068c:	ldr	lr, [r3]
   20690:	ldr	r3, [sp, #172]	; 0xac
   20694:	cmp	lr, ip
   20698:	ldr	lr, [sp, #176]	; 0xb0
   2069c:	ldr	ip, [sp, #180]	; 0xb4
   206a0:	beq	2125c <__assert_fail@plt+0xeed0>
   206a4:	strd	r0, [sp, #16]
   206a8:	str	r6, [sp, #8]
   206ac:	str	r8, [sp, #12]
   206b0:	str	lr, [sp]
   206b4:	str	ip, [sp, #4]
   206b8:	ldr	r0, [pc, #-2444]	; 1fd34 <__assert_fail@plt+0xd9a8>
   206bc:	mov	r6, r7
   206c0:	bl	11dbc <printf@plt>
   206c4:	mov	r7, #0
   206c8:	b	1ec80 <__assert_fail@plt+0xc8f4>
   206cc:	ldr	r3, [sp, #300]	; 0x12c
   206d0:	add	r7, r6, #4
   206d4:	cmp	r7, r3
   206d8:	bcs	1f188 <__assert_fail@plt+0xcdfc>
   206dc:	ldr	r3, [pc, #-2476]	; 1fd38 <__assert_fail@plt+0xd9ac>
   206e0:	mov	r0, r6
   206e4:	mov	r1, r4
   206e8:	b	1f214 <__assert_fail@plt+0xce88>
   206ec:	ldr	r3, [sp, #336]	; 0x150
   206f0:	add	r7, r6, #8
   206f4:	cmp	r3, #0
   206f8:	bne	20754 <__assert_fail@plt+0xe3c8>
   206fc:	ldr	r3, [sp, #300]	; 0x12c
   20700:	cmp	r7, r3
   20704:	bls	211f4 <__assert_fail@plt+0xee68>
   20708:	mov	lr, #0
   2070c:	mov	r2, lr
   20710:	mov	r3, lr
   20714:	mov	r0, lr
   20718:	mov	r1, lr
   2071c:	str	lr, [sp, #184]	; 0xb8
   20720:	str	lr, [sp, #160]	; 0xa0
   20724:	str	lr, [sp, #188]	; 0xbc
   20728:	str	lr, [sp, #164]	; 0xa4
   2072c:	add	ip, sp, #192	; 0xc0
   20730:	str	ip, [sp]
   20734:	bl	1a73c <__assert_fail@plt+0x83b0>
   20738:	ldr	r1, [sp, #60]	; 0x3c
   2073c:	mov	r6, r7
   20740:	mov	r7, #0
   20744:	mov	r2, r0
   20748:	ldr	r0, [pc, #-2580]	; 1fd3c <__assert_fail@plt+0xd9b0>
   2074c:	bl	11dbc <printf@plt>
   20750:	b	1ec80 <__assert_fail@plt+0xc8f4>
   20754:	mov	r6, r7
   20758:	mov	r7, #0
   2075c:	b	1f074 <__assert_fail@plt+0xcce8>
   20760:	ldr	r3, [sp, #336]	; 0x150
   20764:	cmp	r3, #0
   20768:	ldr	r3, [sp, #300]	; 0x12c
   2076c:	sub	r7, r3, r6
   20770:	beq	20e90 <__assert_fail@plt+0xeb04>
   20774:	mov	r0, r6
   20778:	mov	r1, r7
   2077c:	bl	1217c <strnlen@plt>
   20780:	add	r0, r0, #1
   20784:	add	r6, r6, r0
   20788:	b	1f498 <__assert_fail@plt+0xd10c>
   2078c:	mov	r2, #0
   20790:	mov	r3, #0
   20794:	strd	r2, [sp, #160]	; 0xa0
   20798:	b	1efe4 <__assert_fail@plt+0xcc58>
   2079c:	mov	r0, #9
   207a0:	bl	1211c <putchar@plt>
   207a4:	ldrd	r2, [sp, #160]	; 0xa0
   207a8:	cmp	r3, #0
   207ac:	cmpeq	r2, #19
   207b0:	beq	21580 <__assert_fail@plt+0xf1f4>
   207b4:	bhi	20b80 <__assert_fail@plt+0xe7f4>
   207b8:	cmp	r3, #0
   207bc:	cmpeq	r2, #9
   207c0:	beq	215b0 <__assert_fail@plt+0xf224>
   207c4:	bls	20b3c <__assert_fail@plt+0xe7b0>
   207c8:	cmp	r3, #0
   207cc:	cmpeq	r2, #14
   207d0:	beq	214b4 <__assert_fail@plt+0xf128>
   207d4:	bhi	20938 <__assert_fail@plt+0xe5ac>
   207d8:	cmp	r3, #0
   207dc:	cmpeq	r2, #11
   207e0:	beq	21484 <__assert_fail@plt+0xf0f8>
   207e4:	bcc	21478 <__assert_fail@plt+0xf0ec>
   207e8:	cmp	r3, #0
   207ec:	cmpeq	r2, #12
   207f0:	beq	2152c <__assert_fail@plt+0xf1a0>
   207f4:	cmp	r3, #0
   207f8:	cmpeq	r2, #13
   207fc:	bne	214cc <__assert_fail@plt+0xf140>
   20800:	ldr	r0, [pc, #-2760]	; 1fd40 <__assert_fail@plt+0xd9b4>
   20804:	bl	11dbc <printf@plt>
   20808:	b	1f260 <__assert_fail@plt+0xced4>
   2080c:	mov	r0, #9
   20810:	bl	1211c <putchar@plt>
   20814:	ldrd	r2, [sp, #160]	; 0xa0
   20818:	cmp	r3, #0
   2081c:	cmpeq	r2, #3
   20820:	bhi	212b4 <__assert_fail@plt+0xef28>
   20824:	cmp	r2, #3
   20828:	ldrls	pc, [pc, r2, lsl #2]
   2082c:	b	212b4 <__assert_fail@plt+0xef28>
   20830:	andeq	r0, r2, r4, ror #16
   20834:	andeq	r0, r2, r8, asr r8
   20838:	andeq	r0, r2, ip, asr #16
   2083c:	andeq	r0, r2, r0, asr #16
   20840:	ldr	r0, [pc, #-2820]	; 1fd44 <__assert_fail@plt+0xd9b8>
   20844:	bl	11dbc <printf@plt>
   20848:	b	1f260 <__assert_fail@plt+0xced4>
   2084c:	ldr	r0, [pc, #-2828]	; 1fd48 <__assert_fail@plt+0xd9bc>
   20850:	bl	11dbc <printf@plt>
   20854:	b	1f260 <__assert_fail@plt+0xced4>
   20858:	ldr	r0, [pc, #-2836]	; 1fd4c <__assert_fail@plt+0xd9c0>
   2085c:	bl	11dbc <printf@plt>
   20860:	b	1f260 <__assert_fail@plt+0xced4>
   20864:	ldr	r0, [pc, #-2844]	; 1fd50 <__assert_fail@plt+0xd9c4>
   20868:	bl	11dbc <printf@plt>
   2086c:	b	1f260 <__assert_fail@plt+0xced4>
   20870:	ldr	r3, [pc, #-2852]	; 1fd54 <__assert_fail@plt+0xd9c8>
   20874:	cmp	r4, r3
   20878:	cmpne	r4, #32
   2087c:	beq	1f260 <__assert_fail@plt+0xced4>
   20880:	sub	r3, r4, #17
   20884:	cmp	r4, #21
   20888:	cmpne	r3, #2
   2088c:	ldrd	r8, [sp, #160]	; 0xa0
   20890:	bhi	208a8 <__assert_fail@plt+0xe51c>
   20894:	ldr	r3, [sp, #304]	; 0x130
   20898:	adds	r8, r8, r3
   2089c:	ldr	r3, [sp, #308]	; 0x134
   208a0:	adc	r9, r9, r3
   208a4:	strd	r8, [sp, #160]	; 0xa0
   208a8:	ldr	r3, [sp, #340]	; 0x154
   208ac:	ldrd	r2, [r3, #32]
   208b0:	cmp	r3, r9
   208b4:	cmpeq	r2, r8
   208b8:	bhi	210a4 <__assert_fail@plt+0xed18>
   208bc:	ldr	r1, [pc, #-2924]	; 1fd58 <__assert_fail@plt+0xd9cc>
   208c0:	mov	r2, #5
   208c4:	mov	r0, #0
   208c8:	bl	11ea0 <dcgettext@plt>
   208cc:	mov	r3, #0
   208d0:	str	r3, [sp]
   208d4:	ldrd	r2, [sp, #160]	; 0xa0
   208d8:	mov	r4, r0
   208dc:	ldr	r0, [pc, #-2952]	; 1fd5c <__assert_fail@plt+0xd9d0>
   208e0:	bl	18b24 <__assert_fail@plt+0x6798>
   208e4:	ldr	r3, [sp, #340]	; 0x154
   208e8:	ldr	r2, [r3, #16]
   208ec:	sub	r2, sl, r2
   208f0:	mov	r1, r0
   208f4:	mov	r0, r4
   208f8:	bl	417d0 <warn@@Base>
   208fc:	b	1f260 <__assert_fail@plt+0xced4>
   20900:	mov	r0, #9
   20904:	bl	1211c <putchar@plt>
   20908:	ldrd	r2, [sp, #160]	; 0xa0
   2090c:	orrs	r1, r2, r3
   20910:	beq	20f90 <__assert_fail@plt+0xec04>
   20914:	cmp	r3, #0
   20918:	cmpeq	r2, #1
   2091c:	beq	20f78 <__assert_fail@plt+0xebec>
   20920:	mov	r2, #5
   20924:	ldr	r1, [pc, #-3020]	; 1fd60 <__assert_fail@plt+0xd9d4>
   20928:	mov	r0, #0
   2092c:	bl	11ea0 <dcgettext@plt>
   20930:	bl	11dbc <printf@plt>
   20934:	b	1f260 <__assert_fail@plt+0xced4>
   20938:	cmp	r3, #0
   2093c:	cmpeq	r2, #16
   20940:	beq	21544 <__assert_fail@plt+0xf1b8>
   20944:	bcc	21538 <__assert_fail@plt+0xf1ac>
   20948:	cmp	r3, #0
   2094c:	cmpeq	r2, #17
   20950:	beq	214c0 <__assert_fail@plt+0xf134>
   20954:	cmp	r3, #0
   20958:	cmpeq	r2, #18
   2095c:	bne	214cc <__assert_fail@plt+0xf140>
   20960:	ldr	r0, [pc, #-3012]	; 1fda4 <__assert_fail@plt+0xda18>
   20964:	bl	11dbc <printf@plt>
   20968:	b	1f260 <__assert_fail@plt+0xced4>
   2096c:	mov	r0, #9
   20970:	bl	1211c <putchar@plt>
   20974:	ldr	r3, [sp, #160]	; 0xa0
   20978:	ldr	r2, [sp, #164]	; 0xa4
   2097c:	subs	r1, r3, #1
   20980:	str	r1, [sp, #72]	; 0x48
   20984:	sbc	r1, r2, #0
   20988:	str	r1, [sp, #76]	; 0x4c
   2098c:	ldrd	r0, [sp, #72]	; 0x48
   20990:	cmp	r1, #0
   20994:	cmpeq	r0, #64	; 0x40
   20998:	bhi	20b04 <__assert_fail@plt+0xe778>
   2099c:	mov	r1, r0
   209a0:	cmp	r0, #64	; 0x40
   209a4:	ldrls	pc, [pc, r0, lsl #2]
   209a8:	b	20b04 <__assert_fail@plt+0xe778>
   209ac:	strdeq	r0, [r2], -r8
   209b0:	andeq	r0, r2, ip, ror #21
   209b4:	andeq	r0, r2, r0, ror #21
   209b8:	ldrdeq	r0, [r2], -r4
   209bc:	andeq	r0, r2, r8, asr #21
   209c0:	andeq	r0, r2, r4, lsl #22
   209c4:	andeq	r0, r2, r4, lsl #22
   209c8:	andeq	r0, r2, r4, lsl #22
   209cc:	andeq	r0, r2, r4, lsl #22
   209d0:	andeq	r0, r2, r4, lsl #22
   209d4:	andeq	r0, r2, r4, lsl #22
   209d8:	andeq	r0, r2, r4, lsl #22
   209dc:	andeq	r0, r2, r4, lsl #22
   209e0:	andeq	r0, r2, r4, lsl #22
   209e4:	andeq	r0, r2, r4, lsl #22
   209e8:	andeq	r0, r2, r4, lsl #22
   209ec:	andeq	r0, r2, r4, lsl #22
   209f0:	andeq	r0, r2, r4, lsl #22
   209f4:	andeq	r0, r2, r4, lsl #22
   209f8:	andeq	r0, r2, r4, lsl #22
   209fc:	andeq	r0, r2, r4, lsl #22
   20a00:	andeq	r0, r2, r4, lsl #22
   20a04:	andeq	r0, r2, r4, lsl #22
   20a08:	andeq	r0, r2, r4, lsl #22
   20a0c:	andeq	r0, r2, r4, lsl #22
   20a10:	andeq	r0, r2, r4, lsl #22
   20a14:	andeq	r0, r2, r4, lsl #22
   20a18:	andeq	r0, r2, r4, lsl #22
   20a1c:	andeq	r0, r2, r4, lsl #22
   20a20:	andeq	r0, r2, r4, lsl #22
   20a24:	andeq	r0, r2, r4, lsl #22
   20a28:	andeq	r0, r2, r4, lsl #22
   20a2c:	andeq	r0, r2, r4, lsl #22
   20a30:	andeq	r0, r2, r4, lsl #22
   20a34:	andeq	r0, r2, r4, lsl #22
   20a38:	andeq	r0, r2, r4, lsl #22
   20a3c:	andeq	r0, r2, r4, lsl #22
   20a40:	andeq	r0, r2, r4, lsl #22
   20a44:	andeq	r0, r2, r4, lsl #22
   20a48:	andeq	r0, r2, r4, lsl #22
   20a4c:	andeq	r0, r2, r4, lsl #22
   20a50:	andeq	r0, r2, r4, lsl #22
   20a54:	andeq	r0, r2, r4, lsl #22
   20a58:	andeq	r0, r2, r4, lsl #22
   20a5c:	andeq	r0, r2, r4, lsl #22
   20a60:	andeq	r0, r2, r4, lsl #22
   20a64:	andeq	r0, r2, r4, lsl #22
   20a68:	andeq	r0, r2, r4, lsl #22
   20a6c:	andeq	r0, r2, r4, lsl #22
   20a70:	andeq	r0, r2, r4, lsl #22
   20a74:	andeq	r0, r2, r4, lsl #22
   20a78:	andeq	r0, r2, r4, lsl #22
   20a7c:	andeq	r0, r2, r4, lsl #22
   20a80:	andeq	r0, r2, r4, lsl #22
   20a84:	andeq	r0, r2, r4, lsl #22
   20a88:	andeq	r0, r2, r4, lsl #22
   20a8c:	andeq	r0, r2, r4, lsl #22
   20a90:	andeq	r0, r2, r4, lsl #22
   20a94:	andeq	r0, r2, r4, lsl #22
   20a98:	andeq	r0, r2, r4, lsl #22
   20a9c:	andeq	r0, r2, r4, lsl #22
   20aa0:	andeq	r0, r2, r4, lsl #22
   20aa4:	andeq	r0, r2, r4, lsl #22
   20aa8:			; <UNDEFINED> instruction: 0x00020abc
   20aac:			; <UNDEFINED> instruction: 0x00020ab0
   20ab0:	ldr	r0, [pc, #-3412]	; 1fd64 <__assert_fail@plt+0xd9d8>
   20ab4:	bl	11dbc <printf@plt>
   20ab8:	b	1f260 <__assert_fail@plt+0xced4>
   20abc:	ldr	r0, [pc, #-3420]	; 1fd68 <__assert_fail@plt+0xd9dc>
   20ac0:	bl	11dbc <printf@plt>
   20ac4:	b	1f260 <__assert_fail@plt+0xced4>
   20ac8:	ldr	r0, [pc, #-3428]	; 1fd6c <__assert_fail@plt+0xd9e0>
   20acc:	bl	11dbc <printf@plt>
   20ad0:	b	1f260 <__assert_fail@plt+0xced4>
   20ad4:	ldr	r0, [pc, #-3436]	; 1fd70 <__assert_fail@plt+0xd9e4>
   20ad8:	bl	11dbc <printf@plt>
   20adc:	b	1f260 <__assert_fail@plt+0xced4>
   20ae0:	ldr	r0, [pc, #-3444]	; 1fd74 <__assert_fail@plt+0xd9e8>
   20ae4:	bl	11dbc <printf@plt>
   20ae8:	b	1f260 <__assert_fail@plt+0xced4>
   20aec:	ldr	r0, [pc, #-3452]	; 1fd78 <__assert_fail@plt+0xd9ec>
   20af0:	bl	11dbc <printf@plt>
   20af4:	b	1f260 <__assert_fail@plt+0xced4>
   20af8:	ldr	r0, [pc, #-3460]	; 1fd7c <__assert_fail@plt+0xd9f0>
   20afc:	bl	11dbc <printf@plt>
   20b00:	b	1f260 <__assert_fail@plt+0xced4>
   20b04:	subs	r3, r3, #64	; 0x40
   20b08:	str	r3, [sp, #128]	; 0x80
   20b0c:	sbc	r3, r2, #0
   20b10:	str	r3, [sp, #132]	; 0x84
   20b14:	ldrd	r2, [sp, #128]	; 0x80
   20b18:	mov	r0, #0
   20b1c:	cmp	r3, #0
   20b20:	cmpeq	r2, #191	; 0xbf
   20b24:	mov	r2, #5
   20b28:	ldrls	r1, [pc, #-3504]	; 1fd80 <__assert_fail@plt+0xd9f4>
   20b2c:	ldrhi	r1, [pc, #-3504]	; 1fd84 <__assert_fail@plt+0xd9f8>
   20b30:	bl	11ea0 <dcgettext@plt>
   20b34:	bl	11dbc <printf@plt>
   20b38:	b	1f260 <__assert_fail@plt+0xced4>
   20b3c:	cmp	r3, #0
   20b40:	cmpeq	r2, #4
   20b44:	beq	215e0 <__assert_fail@plt+0xf254>
   20b48:	bls	20bd4 <__assert_fail@plt+0xe848>
   20b4c:	cmp	r3, #0
   20b50:	cmpeq	r2, #6
   20b54:	beq	215a4 <__assert_fail@plt+0xf218>
   20b58:	bcc	21598 <__assert_fail@plt+0xf20c>
   20b5c:	cmp	r3, #0
   20b60:	cmpeq	r2, #7
   20b64:	beq	2158c <__assert_fail@plt+0xf200>
   20b68:	cmp	r3, #0
   20b6c:	cmpeq	r2, #8
   20b70:	bne	214cc <__assert_fail@plt+0xf140>
   20b74:	ldr	r0, [pc, #-3572]	; 1fd88 <__assert_fail@plt+0xd9fc>
   20b78:	bl	11dbc <printf@plt>
   20b7c:	b	1f260 <__assert_fail@plt+0xced4>
   20b80:	cmp	r3, #0
   20b84:	cmpeq	r2, #29
   20b88:	beq	21610 <__assert_fail@plt+0xf284>
   20b8c:	bhi	20c30 <__assert_fail@plt+0xe8a4>
   20b90:	cmp	r3, #0
   20b94:	cmpeq	r2, #24
   20b98:	beq	215bc <__assert_fail@plt+0xf230>
   20b9c:	bhi	20bfc <__assert_fail@plt+0xe870>
   20ba0:	cmp	r3, #0
   20ba4:	cmpeq	r2, #21
   20ba8:	beq	21604 <__assert_fail@plt+0xf278>
   20bac:	bcc	215f8 <__assert_fail@plt+0xf26c>
   20bb0:	cmp	r3, #0
   20bb4:	cmpeq	r2, #22
   20bb8:	beq	215ec <__assert_fail@plt+0xf260>
   20bbc:	cmp	r3, #0
   20bc0:	cmpeq	r2, #23
   20bc4:	bne	214cc <__assert_fail@plt+0xf140>
   20bc8:	ldr	r0, [pc, #-3652]	; 1fd8c <__assert_fail@plt+0xda00>
   20bcc:	bl	11dbc <printf@plt>
   20bd0:	b	1f260 <__assert_fail@plt+0xced4>
   20bd4:	cmp	r3, #0
   20bd8:	cmpeq	r2, #2
   20bdc:	beq	215d4 <__assert_fail@plt+0xf248>
   20be0:	bhi	215c8 <__assert_fail@plt+0xf23c>
   20be4:	cmp	r3, #0
   20be8:	cmpeq	r2, #1
   20bec:	bne	214cc <__assert_fail@plt+0xf140>
   20bf0:	ldr	r0, [pc, #-3688]	; 1fd90 <__assert_fail@plt+0xda04>
   20bf4:	bl	11dbc <printf@plt>
   20bf8:	b	1f260 <__assert_fail@plt+0xced4>
   20bfc:	cmp	r3, #0
   20c00:	cmpeq	r2, #26
   20c04:	beq	21634 <__assert_fail@plt+0xf2a8>
   20c08:	bcc	21628 <__assert_fail@plt+0xf29c>
   20c0c:	cmp	r3, #0
   20c10:	cmpeq	r2, #27
   20c14:	beq	2161c <__assert_fail@plt+0xf290>
   20c18:	cmp	r3, #0
   20c1c:	cmpeq	r2, #28
   20c20:	bne	214cc <__assert_fail@plt+0xf140>
   20c24:	ldr	r0, [pc, #-3736]	; 1fd94 <__assert_fail@plt+0xda08>
   20c28:	bl	11dbc <printf@plt>
   20c2c:	b	1f260 <__assert_fail@plt+0xced4>
   20c30:	cmp	r3, #0
   20c34:	cmpeq	r2, #34	; 0x22
   20c38:	beq	21550 <__assert_fail@plt+0xf1c4>
   20c3c:	bhi	20c74 <__assert_fail@plt+0xe8e8>
   20c40:	cmp	r3, #0
   20c44:	cmpeq	r2, #31
   20c48:	beq	21574 <__assert_fail@plt+0xf1e8>
   20c4c:	bcc	21568 <__assert_fail@plt+0xf1dc>
   20c50:	cmp	r3, #0
   20c54:	cmpeq	r2, #32
   20c58:	beq	2155c <__assert_fail@plt+0xf1d0>
   20c5c:	cmp	r3, #0
   20c60:	cmpeq	r2, #33	; 0x21
   20c64:	bne	214cc <__assert_fail@plt+0xf140>
   20c68:	ldr	r0, [pc, #-3800]	; 1fd98 <__assert_fail@plt+0xda0c>
   20c6c:	bl	11dbc <printf@plt>
   20c70:	b	1f260 <__assert_fail@plt+0xced4>
   20c74:	cmp	r3, #0
   20c78:	cmpeq	r2, #36	; 0x24
   20c7c:	beq	214a8 <__assert_fail@plt+0xf11c>
   20c80:	bcc	2149c <__assert_fail@plt+0xf110>
   20c84:	ldr	r0, [pc, #-3824]	; 1fd9c <__assert_fail@plt+0xda10>
   20c88:	mov	r1, #0
   20c8c:	cmp	r3, r1
   20c90:	cmpeq	r2, r0
   20c94:	beq	21490 <__assert_fail@plt+0xf104>
   20c98:	ldr	r0, [pc, #-3840]	; 1fda0 <__assert_fail@plt+0xda14>
   20c9c:	mov	r1, #0
   20ca0:	cmp	r3, r1
   20ca4:	cmpeq	r2, r0
   20ca8:	bne	214cc <__assert_fail@plt+0xf140>
   20cac:	ldr	r0, [pc, #-3856]	; 1fda4 <__assert_fail@plt+0xda18>
   20cb0:	bl	11dbc <printf@plt>
   20cb4:	b	1f260 <__assert_fail@plt+0xced4>
   20cb8:	ldrd	r2, [sp, #160]	; 0xa0
   20cbc:	ldr	r1, [sp, #332]	; 0x14c
   20cc0:	strd	r2, [r1, #40]	; 0x28
   20cc4:	b	1f260 <__assert_fail@plt+0xced4>
   20cc8:	ldr	r3, [sp, #328]	; 0x148
   20ccc:	cmp	r3, #3
   20cd0:	bgt	20ce0 <__assert_fail@plt+0xe954>
   20cd4:	sub	r3, r4, #6
   20cd8:	cmp	r3, #1
   20cdc:	bls	20ce8 <__assert_fail@plt+0xe95c>
   20ce0:	cmp	r4, #23
   20ce4:	bne	1f260 <__assert_fail@plt+0xced4>
   20ce8:	ldr	r2, [sp, #332]	; 0x14c
   20cec:	ldr	r3, [sp, #332]	; 0x14c
   20cf0:	ldr	r4, [r2, #76]	; 0x4c
   20cf4:	ldr	r3, [r3, #80]	; 0x50
   20cf8:	ldr	r0, [r2, #72]	; 0x48
   20cfc:	cmp	r3, #0
   20d00:	cmpne	r3, r4
   20d04:	bhi	212ac <__assert_fail@plt+0xef20>
   20d08:	add	r5, r3, #1024	; 0x400
   20d0c:	cmn	r5, #-536870910	; 0xe0000002
   20d10:	bhi	2166c <__assert_fail@plt+0xf2e0>
   20d14:	lsl	r1, r5, #3
   20d18:	bl	11ed0 <xrealloc@plt>
   20d1c:	ldr	r3, [sp, #332]	; 0x14c
   20d20:	ldr	r1, [r3, #76]	; 0x4c
   20d24:	str	r5, [r3, #80]	; 0x50
   20d28:	str	r0, [r3, #72]	; 0x48
   20d2c:	ldrd	r2, [sp, #160]	; 0xa0
   20d30:	lsl	r4, r4, #3
   20d34:	add	r1, r1, #1
   20d38:	strd	r2, [r0, r4]
   20d3c:	ldr	r3, [sp, #332]	; 0x14c
   20d40:	str	r1, [r3, #76]	; 0x4c
   20d44:	b	1f260 <__assert_fail@plt+0xced4>
   20d48:	mov	r2, #0
   20d4c:	mov	r3, #0
   20d50:	strd	r2, [sp, #160]	; 0xa0
   20d54:	b	1ec50 <__assert_fail@plt+0xc8c4>
   20d58:	ldr	r3, [sp, #64]	; 0x40
   20d5c:	cmp	r3, #8
   20d60:	mov	r1, r3
   20d64:	add	r6, sl, r3
   20d68:	bls	1ec10 <__assert_fail@plt+0xc884>
   20d6c:	mov	r3, #5
   20d70:	str	r3, [sp]
   20d74:	mov	r7, r1
   20d78:	mov	r3, r1
   20d7c:	ldr	r2, [pc, #-4060]	; 1fda8 <__assert_fail@plt+0xda1c>
   20d80:	ldr	r1, [pc, #-4060]	; 1fdac <__assert_fail@plt+0xda20>
   20d84:	mov	r0, #0
   20d88:	bl	12368 <dcngettext@plt>
   20d8c:	mov	r2, #8
   20d90:	mov	r1, r7
   20d94:	bl	412ac <error@@Base>
   20d98:	ldr	r2, [sp, #300]	; 0x12c
   20d9c:	add	r3, sl, #8
   20da0:	cmp	r2, r3
   20da4:	bls	1ec1c <__assert_fail@plt+0xc890>
   20da8:	mov	r1, #8
   20dac:	b	1ec3c <__assert_fail@plt+0xc8b0>
   20db0:	bl	1a3b4 <__assert_fail@plt+0x8028>
   20db4:	ldr	r1, [sp, #60]	; 0x3c
   20db8:	mov	r2, r0
   20dbc:	ldr	r0, [pc, #2276]	; 216a8 <__assert_fail@plt+0xf31c>
   20dc0:	bl	11dbc <printf@plt>
   20dc4:	b	1ee90 <__assert_fail@plt+0xcb04>
   20dc8:	mov	r3, #5
   20dcc:	str	r3, [sp]
   20dd0:	mov	r7, r1
   20dd4:	mov	r3, r1
   20dd8:	ldr	r2, [pc, #2252]	; 216ac <__assert_fail@plt+0xf320>
   20ddc:	ldr	r1, [pc, #2252]	; 216b0 <__assert_fail@plt+0xf324>
   20de0:	mov	r0, #0
   20de4:	bl	12368 <dcngettext@plt>
   20de8:	mov	r2, #8
   20dec:	mov	r1, r7
   20df0:	bl	412ac <error@@Base>
   20df4:	ldr	r2, [sp, #300]	; 0x12c
   20df8:	add	r3, sl, #8
   20dfc:	cmp	r2, r3
   20e00:	movhi	r1, #8
   20e04:	bhi	1efd0 <__assert_fail@plt+0xcc44>
   20e08:	b	1efb0 <__assert_fail@plt+0xcc24>
   20e0c:	mov	r3, #5
   20e10:	str	r3, [sp]
   20e14:	ldr	r2, [pc, #2192]	; 216ac <__assert_fail@plt+0xf320>
   20e18:	mov	r3, fp
   20e1c:	ldr	r1, [pc, #2188]	; 216b0 <__assert_fail@plt+0xf324>
   20e20:	mov	r0, #0
   20e24:	bl	12368 <dcngettext@plt>
   20e28:	mov	r2, #8
   20e2c:	mov	r1, fp
   20e30:	bl	412ac <error@@Base>
   20e34:	ldr	r2, [sp, #300]	; 0x12c
   20e38:	add	r3, sl, #8
   20e3c:	cmp	r2, r3
   20e40:	movhi	r1, #8
   20e44:	bhi	1f0ac <__assert_fail@plt+0xcd20>
   20e48:	b	1f108 <__assert_fail@plt+0xcd7c>
   20e4c:	mov	r2, #5
   20e50:	ldr	r1, [pc, #2140]	; 216b4 <__assert_fail@plt+0xf328>
   20e54:	mov	r0, #0
   20e58:	bl	11ea0 <dcgettext@plt>
   20e5c:	bl	412ac <error@@Base>
   20e60:	mov	r6, sl
   20e64:	b	1ec50 <__assert_fail@plt+0xc8c4>
   20e68:	ldr	r3, [sp, #300]	; 0x12c
   20e6c:	mov	r0, sl
   20e70:	add	r1, sp, #156	; 0x9c
   20e74:	mov	r2, #1
   20e78:	bl	1b3b0 <__assert_fail@plt+0x9024>
   20e7c:	ldr	r3, [sp, #156]	; 0x9c
   20e80:	add	sl, sl, r3
   20e84:	mov	r8, r0
   20e88:	mov	r9, r1
   20e8c:	b	1ee98 <__assert_fail@plt+0xcb0c>
   20e90:	ldr	r1, [sp, #60]	; 0x3c
   20e94:	mov	r3, r6
   20e98:	mov	r2, r7
   20e9c:	ldr	r0, [pc, #2068]	; 216b8 <__assert_fail@plt+0xf32c>
   20ea0:	bl	11dbc <printf@plt>
   20ea4:	b	20774 <__assert_fail@plt+0xe3e8>
   20ea8:	cmp	r4, #8
   20eac:	streq	sl, [r8, #1508]	; 0x5e4
   20eb0:	beq	1f260 <__assert_fail@plt+0xced4>
   20eb4:	mov	r2, #5
   20eb8:	ldr	r1, [pc, #2044]	; 216bc <__assert_fail@plt+0xf330>
   20ebc:	mov	r0, #0
   20ec0:	bl	11ea0 <dcgettext@plt>
   20ec4:	mov	r5, r0
   20ec8:	mov	r0, r4
   20ecc:	bl	1a3b4 <__assert_fail@plt+0x8028>
   20ed0:	mov	r4, r0
   20ed4:	mov	r0, #27
   20ed8:	bl	1a330 <__assert_fail@plt+0x7fa4>
   20edc:	mov	r1, r4
   20ee0:	mov	r2, r0
   20ee4:	mov	r0, r5
   20ee8:	bl	417d0 <warn@@Base>
   20eec:	mov	r2, #5
   20ef0:	ldr	r1, [pc, #1992]	; 216c0 <__assert_fail@plt+0xf334>
   20ef4:	mov	r0, #0
   20ef8:	bl	11ea0 <dcgettext@plt>
   20efc:	str	r0, [r8, #1508]	; 0x5e4
   20f00:	b	1f260 <__assert_fail@plt+0xced4>
   20f04:	ldr	r1, [sp, #332]	; 0x14c
   20f08:	add	r3, r3, #1024	; 0x400
   20f0c:	cmn	r3, #-536870910	; 0xe0000002
   20f10:	ldr	r0, [r1, #48]	; 0x30
   20f14:	bhi	216a0 <__assert_fail@plt+0xf314>
   20f18:	str	r2, [sp, #68]	; 0x44
   20f1c:	lsl	r2, r3, #3
   20f20:	mov	r1, r2
   20f24:	mov	r9, r2
   20f28:	str	r3, [sp, #60]	; 0x3c
   20f2c:	bl	11ed0 <xrealloc@plt>
   20f30:	ldr	r3, [sp, #332]	; 0x14c
   20f34:	mov	r1, r9
   20f38:	str	r0, [r3, #48]	; 0x30
   20f3c:	ldr	r0, [r3, #52]	; 0x34
   20f40:	bl	11ed0 <xrealloc@plt>
   20f44:	ldr	r3, [sp, #60]	; 0x3c
   20f48:	lsl	r1, r3, #2
   20f4c:	ldr	r3, [sp, #332]	; 0x14c
   20f50:	str	r0, [r3, #52]	; 0x34
   20f54:	ldr	r0, [r3, #56]	; 0x38
   20f58:	bl	11ed0 <xrealloc@plt>
   20f5c:	ldr	r3, [sp, #332]	; 0x14c
   20f60:	mov	r2, r3
   20f64:	str	r0, [r3, #56]	; 0x38
   20f68:	ldr	r3, [sp, #60]	; 0x3c
   20f6c:	str	r3, [r2, #64]	; 0x40
   20f70:	ldr	r2, [sp, #68]	; 0x44
   20f74:	b	1f4fc <__assert_fail@plt+0xd170>
   20f78:	mov	r2, #5
   20f7c:	ldr	r1, [pc, #1856]	; 216c4 <__assert_fail@plt+0xf338>
   20f80:	mov	r0, #0
   20f84:	bl	11ea0 <dcgettext@plt>
   20f88:	bl	11dbc <printf@plt>
   20f8c:	b	1f260 <__assert_fail@plt+0xced4>
   20f90:	mov	r2, #5
   20f94:	ldr	r1, [pc, #1836]	; 216c8 <__assert_fail@plt+0xf33c>
   20f98:	mov	r0, r8
   20f9c:	bl	11ea0 <dcgettext@plt>
   20fa0:	bl	11dbc <printf@plt>
   20fa4:	b	1f260 <__assert_fail@plt+0xced4>
   20fa8:	mov	r3, #5
   20fac:	str	r3, [sp]
   20fb0:	ldr	r2, [pc, #1780]	; 216ac <__assert_fail@plt+0xf320>
   20fb4:	ldr	r1, [pc, #1780]	; 216b0 <__assert_fail@plt+0xf324>
   20fb8:	mov	r3, fp
   20fbc:	mov	r0, #0
   20fc0:	bl	12368 <dcngettext@plt>
   20fc4:	mov	r2, #8
   20fc8:	mov	r1, fp
   20fcc:	b	20d94 <__assert_fail@plt+0xea08>
   20fd0:	mov	r1, #8
   20fd4:	ldr	r3, [pc, #1776]	; 216cc <__assert_fail@plt+0xf340>
   20fd8:	mov	r0, r6
   20fdc:	ldr	r3, [r3]
   20fe0:	blx	r3
   20fe4:	strd	r0, [sp, #160]	; 0xa0
   20fe8:	b	1f2c8 <__assert_fail@plt+0xcf3c>
   20fec:	ldr	r3, [r3, #68]	; 0x44
   20ff0:	cmp	r3, r2
   20ff4:	bhi	2168c <__assert_fail@plt+0xf300>
   20ff8:	ldr	r2, [sp, #332]	; 0x14c
   20ffc:	ldr	r2, [r2, #60]	; 0x3c
   21000:	cmp	r3, r2
   21004:	bhi	21354 <__assert_fail@plt+0xefc8>
   21008:	ldr	r2, [sp, #332]	; 0x14c
   2100c:	ldrd	r0, [sp, #160]	; 0xa0
   21010:	ldr	ip, [r2, #52]	; 0x34
   21014:	lsl	r2, r3, #3
   21018:	add	r3, r3, #1
   2101c:	strd	r0, [ip, r2]
   21020:	ldr	r2, [sp, #332]	; 0x14c
   21024:	str	r3, [r2, #68]	; 0x44
   21028:	b	1f260 <__assert_fail@plt+0xced4>
   2102c:	mov	r2, #5
   21030:	ldr	r1, [pc, #1688]	; 216d0 <__assert_fail@plt+0xf344>
   21034:	mov	r0, #0
   21038:	bl	11ea0 <dcgettext@plt>
   2103c:	bl	11dbc <printf@plt>
   21040:	b	1f260 <__assert_fail@plt+0xced4>
   21044:	mov	r2, #5
   21048:	ldr	r1, [pc, #1668]	; 216d4 <__assert_fail@plt+0xf348>
   2104c:	mov	r0, r8
   21050:	bl	11ea0 <dcgettext@plt>
   21054:	bl	11dbc <printf@plt>
   21058:	b	1f260 <__assert_fail@plt+0xced4>
   2105c:	ldr	r0, [pc, #1652]	; 216d8 <__assert_fail@plt+0xf34c>
   21060:	bl	11dbc <printf@plt>
   21064:	b	1f260 <__assert_fail@plt+0xced4>
   21068:	ldr	r0, [pc, #1644]	; 216dc <__assert_fail@plt+0xf350>
   2106c:	bl	11dbc <printf@plt>
   21070:	b	1f260 <__assert_fail@plt+0xced4>
   21074:	ldr	r0, [pc, #1636]	; 216e0 <__assert_fail@plt+0xf354>
   21078:	bl	11dbc <printf@plt>
   2107c:	b	1f260 <__assert_fail@plt+0xced4>
   21080:	ldr	r0, [pc, #1628]	; 216e4 <__assert_fail@plt+0xf358>
   21084:	bl	11dbc <printf@plt>
   21088:	b	1f260 <__assert_fail@plt+0xced4>
   2108c:	ldr	r0, [pc, #1620]	; 216e8 <__assert_fail@plt+0xf35c>
   21090:	bl	11dbc <printf@plt>
   21094:	b	1f260 <__assert_fail@plt+0xced4>
   21098:	ldr	r0, [pc, #1612]	; 216ec <__assert_fail@plt+0xf360>
   2109c:	bl	11dbc <printf@plt>
   210a0:	b	1f260 <__assert_fail@plt+0xced4>
   210a4:	ldr	r3, [sp, #340]	; 0x154
   210a8:	mov	r2, #0
   210ac:	ldr	r1, [r3, #16]
   210b0:	ldr	r3, [sp, #300]	; 0x12c
   210b4:	add	r0, r1, r8
   210b8:	mov	r1, r2
   210bc:	bl	1b3b0 <__assert_fail@plt+0x9024>
   210c0:	mov	r2, #5
   210c4:	ldr	r1, [pc, #1572]	; 216f0 <__assert_fail@plt+0xf364>
   210c8:	mov	r5, r0
   210cc:	mov	r0, #0
   210d0:	bl	11ea0 <dcgettext@plt>
   210d4:	mov	r1, r5
   210d8:	bl	11dbc <printf@plt>
   210dc:	cmp	r4, #16
   210e0:	beq	2111c <__assert_fail@plt+0xed90>
   210e4:	ldr	r3, [pc, #1544]	; 216f4 <__assert_fail@plt+0xf368>
   210e8:	ldr	r3, [r3, #1108]	; 0x454
   210ec:	cmp	r3, #0
   210f0:	beq	2111c <__assert_fail@plt+0xed90>
   210f4:	ldr	r2, [r3]
   210f8:	cmp	r5, r2
   210fc:	bne	21110 <__assert_fail@plt+0xed84>
   21100:	b	2138c <__assert_fail@plt+0xf000>
   21104:	ldr	r2, [r3]
   21108:	cmp	r2, r5
   2110c:	beq	2138c <__assert_fail@plt+0xf000>
   21110:	ldr	r3, [r3, #20]
   21114:	cmp	r3, #0
   21118:	bne	21104 <__assert_fail@plt+0xed78>
   2111c:	mov	r0, #93	; 0x5d
   21120:	bl	1211c <putchar@plt>
   21124:	b	1f260 <__assert_fail@plt+0xced4>
   21128:	ldr	r0, [pc, #1480]	; 216f8 <__assert_fail@plt+0xf36c>
   2112c:	bl	11dbc <printf@plt>
   21130:	b	1f260 <__assert_fail@plt+0xced4>
   21134:	ldr	r0, [pc, #1472]	; 216fc <__assert_fail@plt+0xf370>
   21138:	bl	11dbc <printf@plt>
   2113c:	b	1f260 <__assert_fail@plt+0xced4>
   21140:	ldr	r0, [pc, #1464]	; 21700 <__assert_fail@plt+0xf374>
   21144:	bl	11dbc <printf@plt>
   21148:	b	1f260 <__assert_fail@plt+0xced4>
   2114c:	add	r2, sp, #160	; 0xa0
   21150:	add	r1, sp, #184	; 0xb8
   21154:	mov	r0, r6
   21158:	bl	41b48 <warn@@Base+0x378>
   2115c:	ldr	r1, [sp, #188]	; 0xbc
   21160:	cmp	r4, #20
   21164:	ldrd	r2, [sp, #160]	; 0xa0
   21168:	ldr	lr, [sp, #184]	; 0xb8
   2116c:	str	r1, [sp, #88]	; 0x58
   21170:	bne	202e0 <__assert_fail@plt+0xdf54>
   21174:	add	r1, sp, #304	; 0x130
   21178:	ldrd	r0, [r1]
   2117c:	adds	r8, r0, r2
   21180:	adcs	r9, r1, r3
   21184:	mov	r2, #0
   21188:	mov	r3, #0
   2118c:	movcs	r2, #1
   21190:	movcs	r3, #0
   21194:	orrs	r3, r2, r3
   21198:	mov	r2, r8
   2119c:	mov	r3, r9
   211a0:	beq	202e0 <__assert_fail@plt+0xdf54>
   211a4:	ldr	r1, [sp, #88]	; 0x58
   211a8:	adds	lr, lr, #1
   211ac:	adc	r1, r1, #0
   211b0:	str	r1, [sp, #88]	; 0x58
   211b4:	str	r1, [sp, #188]	; 0xbc
   211b8:	str	lr, [sp, #184]	; 0xb8
   211bc:	b	202e0 <__assert_fail@plt+0xdf54>
   211c0:	mov	r0, r8
   211c4:	add	r1, sp, #184	; 0xb8
   211c8:	add	r2, sp, #192	; 0xc0
   211cc:	bl	41b48 <warn@@Base+0x378>
   211d0:	ldr	r6, [sp, #184]	; 0xb8
   211d4:	ldr	r8, [sp, #188]	; 0xbc
   211d8:	ldrd	r0, [sp, #192]	; 0xc0
   211dc:	b	20680 <__assert_fail@plt+0xe2f4>
   211e0:	mov	r0, r6
   211e4:	add	r2, sp, #176	; 0xb0
   211e8:	add	r1, sp, #168	; 0xa8
   211ec:	bl	41b48 <warn@@Base+0x378>
   211f0:	b	20650 <__assert_fail@plt+0xe2c4>
   211f4:	mov	r0, r6
   211f8:	add	r2, sp, #160	; 0xa0
   211fc:	add	r1, sp, #184	; 0xb8
   21200:	bl	41b48 <warn@@Base+0x378>
   21204:	ldrd	r0, [sp, #184]	; 0xb8
   21208:	ldrd	r2, [sp, #160]	; 0xa0
   2120c:	b	2072c <__assert_fail@plt+0xe3a0>
   21210:	mov	r2, #5
   21214:	ldr	r1, [pc, #1184]	; 216bc <__assert_fail@plt+0xf330>
   21218:	mov	r0, #0
   2121c:	bl	11ea0 <dcgettext@plt>
   21220:	mov	r5, r0
   21224:	mov	r0, r4
   21228:	bl	1a3b4 <__assert_fail@plt+0x8028>
   2122c:	mov	r4, r0
   21230:	ldr	r0, [pc, #1228]	; 21704 <__assert_fail@plt+0xf378>
   21234:	bl	1a330 <__assert_fail@plt+0x7fa4>
   21238:	mov	r1, r4
   2123c:	mov	r2, r0
   21240:	mov	r0, r5
   21244:	bl	417d0 <warn@@Base>
   21248:	mov	r3, #0
   2124c:	str	r3, [r8, #1512]	; 0x5e8
   21250:	b	1f260 <__assert_fail@plt+0xced4>
   21254:	ldr	r8, [sp, #336]	; 0x150
   21258:	b	1feb8 <__assert_fail@plt+0xdb2c>
   2125c:	str	r2, [sp, #60]	; 0x3c
   21260:	mov	r9, r3
   21264:	str	r2, [sp, #184]	; 0xb8
   21268:	str	r3, [sp, #188]	; 0xbc
   2126c:	mov	r2, lr
   21270:	mov	r3, ip
   21274:	strd	r0, [sp, #176]	; 0xb0
   21278:	str	lr, [sp, #192]	; 0xc0
   2127c:	str	ip, [sp, #196]	; 0xc4
   21280:	str	r6, [sp, #168]	; 0xa8
   21284:	str	r8, [sp, #172]	; 0xac
   21288:	mov	lr, r0
   2128c:	mov	ip, r1
   21290:	mov	r0, r2
   21294:	mov	r1, r3
   21298:	mov	r2, r6
   2129c:	mov	r3, r8
   212a0:	ldr	r6, [sp, #60]	; 0x3c
   212a4:	mov	r8, r9
   212a8:	b	206a4 <__assert_fail@plt+0xe318>
   212ac:	mov	r1, r4
   212b0:	b	20d2c <__assert_fail@plt+0xe9a0>
   212b4:	mov	r2, #5
   212b8:	ldr	r1, [pc, #1096]	; 21708 <__assert_fail@plt+0xf37c>
   212bc:	mov	r0, #0
   212c0:	bl	11ea0 <dcgettext@plt>
   212c4:	bl	11dbc <printf@plt>
   212c8:	b	1f260 <__assert_fail@plt+0xced4>
   212cc:	mov	r2, #5
   212d0:	ldr	r1, [pc, #1076]	; 2170c <__assert_fail@plt+0xf380>
   212d4:	mov	r0, #0
   212d8:	bl	11ea0 <dcgettext@plt>
   212dc:	bl	417d0 <warn@@Base>
   212e0:	b	1f578 <__assert_fail@plt+0xd1ec>
   212e4:	mov	r2, #5
   212e8:	ldr	r1, [pc, #1056]	; 21710 <__assert_fail@plt+0xf384>
   212ec:	mov	r0, #0
   212f0:	bl	11ea0 <dcgettext@plt>
   212f4:	bl	11dbc <printf@plt>
   212f8:	b	1f260 <__assert_fail@plt+0xced4>
   212fc:	ldr	r7, [pc, #1040]	; 21714 <__assert_fail@plt+0xf388>
   21300:	b	1f410 <__assert_fail@plt+0xd084>
   21304:	add	r3, sp, #304	; 0x130
   21308:	mov	lr, r0
   2130c:	str	r0, [sp, #88]	; 0x58
   21310:	ldrd	r2, [r3]
   21314:	b	202e0 <__assert_fail@plt+0xdf54>
   21318:	ldr	r2, [sp, #68]	; 0x44
   2131c:	mov	r3, #0
   21320:	str	fp, [sp]
   21324:	strd	r2, [sp, #4]
   21328:	ldrd	r0, [sp, #160]	; 0xa0
   2132c:	ldr	r2, [sp, #344]	; 0x158
   21330:	bl	18bf4 <__assert_fail@plt+0x6868>
   21334:	str	r0, [r8, #1504]	; 0x5e0
   21338:	b	1f578 <__assert_fail@plt+0xd1ec>
   2133c:	ldrd	r0, [sp, #160]	; 0xa0
   21340:	bl	1a0d4 <__assert_fail@plt+0x7d48>
   21344:	str	r0, [r8, #1504]	; 0x5e0
   21348:	b	1f578 <__assert_fail@plt+0xd1ec>
   2134c:	str	sl, [r8, #1504]	; 0x5e0
   21350:	b	1f578 <__assert_fail@plt+0xd1ec>
   21354:	mov	r2, #5
   21358:	ldr	r1, [pc, #952]	; 21718 <__assert_fail@plt+0xf38c>
   2135c:	mov	r0, #0
   21360:	bl	11ea0 <dcgettext@plt>
   21364:	bl	417d0 <warn@@Base>
   21368:	b	1f260 <__assert_fail@plt+0xced4>
   2136c:	ldrd	r0, [sp, #160]	; 0xa0
   21370:	bl	1a0d4 <__assert_fail@plt+0x7d48>
   21374:	str	r0, [r8, #1508]	; 0x5e4
   21378:	b	1f260 <__assert_fail@plt+0xced4>
   2137c:	ldrd	r0, [sp, #160]	; 0xa0
   21380:	bl	1a1cc <__assert_fail@plt+0x7e40>
   21384:	str	r0, [r8, #1508]	; 0x5e4
   21388:	b	1f260 <__assert_fail@plt+0xced4>
   2138c:	ldr	r0, [r3, #4]
   21390:	bl	1a2c4 <__assert_fail@plt+0x7f38>
   21394:	mov	r1, r0
   21398:	ldr	r0, [pc, #892]	; 2171c <__assert_fail@plt+0xf390>
   2139c:	bl	11dbc <printf@plt>
   213a0:	b	2111c <__assert_fail@plt+0xed90>
   213a4:	ldr	r1, [pc, #884]	; 21720 <__assert_fail@plt+0xf394>
   213a8:	mov	r2, #5
   213ac:	ldr	r0, [sp, #336]	; 0x150
   213b0:	bl	11ea0 <dcgettext@plt>
   213b4:	ldr	r3, [sp, #336]	; 0x150
   213b8:	ldr	r8, [r8, #2672]	; 0xa70
   213bc:	str	r3, [sp]
   213c0:	ldrd	r2, [sp, #88]	; 0x58
   213c4:	mov	r7, r0
   213c8:	ldr	r0, [pc, #852]	; 21724 <__assert_fail@plt+0xf398>
   213cc:	bl	18b24 <__assert_fail@plt+0x6798>
   213d0:	mov	r1, r8
   213d4:	mov	r2, r0
   213d8:	mov	r0, r7
   213dc:	bl	417d0 <warn@@Base>
   213e0:	ldr	r3, [pc, #832]	; 21728 <__assert_fail@plt+0xf39c>
   213e4:	b	1ee3c <__assert_fail@plt+0xcab0>
   213e8:	mov	r2, #5
   213ec:	ldr	r1, [pc, #824]	; 2172c <__assert_fail@plt+0xf3a0>
   213f0:	mov	r0, #0
   213f4:	bl	11ea0 <dcgettext@plt>
   213f8:	mov	r7, r0
   213fc:	b	1f410 <__assert_fail@plt+0xd084>
   21400:	mov	r2, #5
   21404:	ldr	r1, [pc, #804]	; 21730 <__assert_fail@plt+0xf3a4>
   21408:	bl	11ea0 <dcgettext@plt>
   2140c:	mov	r7, r0
   21410:	b	1f410 <__assert_fail@plt+0xd084>
   21414:	mov	r2, #5
   21418:	ldr	r1, [pc, #788]	; 21734 <__assert_fail@plt+0xf3a8>
   2141c:	ldr	r0, [sp, #336]	; 0x150
   21420:	bl	11ea0 <dcgettext@plt>
   21424:	mov	r3, r0
   21428:	b	1ee3c <__assert_fail@plt+0xcab0>
   2142c:	ldr	r1, [pc, #772]	; 21738 <__assert_fail@plt+0xf3ac>
   21430:	mov	r2, #5
   21434:	mov	r0, #0
   21438:	mov	r7, r0
   2143c:	bl	11ea0 <dcgettext@plt>
   21440:	ldrd	r2, [sp, #104]	; 0x68
   21444:	str	r7, [sp]
   21448:	mov	r8, r0
   2144c:	ldr	r0, [pc, #720]	; 21724 <__assert_fail@plt+0xf398>
   21450:	bl	18b24 <__assert_fail@plt+0x6798>
   21454:	mov	r1, r0
   21458:	mov	r0, r8
   2145c:	bl	417d0 <warn@@Base>
   21460:	mov	r0, r7
   21464:	mov	r2, #5
   21468:	ldr	r1, [pc, #716]	; 2173c <__assert_fail@plt+0xf3b0>
   2146c:	bl	11ea0 <dcgettext@plt>
   21470:	mov	r7, r0
   21474:	b	1f410 <__assert_fail@plt+0xd084>
   21478:	ldr	r0, [pc, #704]	; 21740 <__assert_fail@plt+0xf3b4>
   2147c:	bl	11dbc <printf@plt>
   21480:	b	1f260 <__assert_fail@plt+0xced4>
   21484:	ldr	r0, [pc, #696]	; 21744 <__assert_fail@plt+0xf3b8>
   21488:	bl	11dbc <printf@plt>
   2148c:	b	1f260 <__assert_fail@plt+0xced4>
   21490:	ldr	r0, [pc, #688]	; 21748 <__assert_fail@plt+0xf3bc>
   21494:	bl	11dbc <printf@plt>
   21498:	b	1f260 <__assert_fail@plt+0xced4>
   2149c:	ldr	r0, [pc, #680]	; 2174c <__assert_fail@plt+0xf3c0>
   214a0:	bl	11dbc <printf@plt>
   214a4:	b	1f260 <__assert_fail@plt+0xced4>
   214a8:	ldr	r0, [pc, #672]	; 21750 <__assert_fail@plt+0xf3c4>
   214ac:	bl	11dbc <printf@plt>
   214b0:	b	1f260 <__assert_fail@plt+0xced4>
   214b4:	ldr	r0, [pc, #664]	; 21754 <__assert_fail@plt+0xf3c8>
   214b8:	bl	11dbc <printf@plt>
   214bc:	b	1f260 <__assert_fail@plt+0xced4>
   214c0:	ldr	r0, [pc, #656]	; 21758 <__assert_fail@plt+0xf3cc>
   214c4:	bl	11dbc <printf@plt>
   214c8:	b	1f260 <__assert_fail@plt+0xced4>
   214cc:	subs	r1, r2, #32768	; 0x8000
   214d0:	sbc	r3, r3, #0
   214d4:	str	r3, [sp, #140]	; 0x8c
   214d8:	str	r1, [sp, #136]	; 0x88
   214dc:	ldrd	r0, [sp, #136]	; 0x88
   214e0:	mov	r3, #0
   214e4:	ldr	r2, [pc, #624]	; 2175c <__assert_fail@plt+0xf3d0>
   214e8:	cmp	r1, r3
   214ec:	cmpeq	r0, r2
   214f0:	mov	r2, #5
   214f4:	ldrls	r1, [pc, #612]	; 21760 <__assert_fail@plt+0xf3d4>
   214f8:	ldrhi	r1, [pc, #612]	; 21764 <__assert_fail@plt+0xf3d8>
   214fc:	mov	r0, #0
   21500:	bl	11ea0 <dcgettext@plt>
   21504:	mov	r3, #0
   21508:	str	r3, [sp]
   2150c:	ldrd	r2, [sp, #160]	; 0xa0
   21510:	mov	r4, r0
   21514:	ldr	r0, [pc, #520]	; 21724 <__assert_fail@plt+0xf398>
   21518:	bl	18b24 <__assert_fail@plt+0x6798>
   2151c:	mov	r1, r0
   21520:	mov	r0, r4
   21524:	bl	11dbc <printf@plt>
   21528:	b	1f260 <__assert_fail@plt+0xced4>
   2152c:	ldr	r0, [pc, #564]	; 21768 <__assert_fail@plt+0xf3dc>
   21530:	bl	11dbc <printf@plt>
   21534:	b	1f260 <__assert_fail@plt+0xced4>
   21538:	ldr	r0, [pc, #556]	; 2176c <__assert_fail@plt+0xf3e0>
   2153c:	bl	11dbc <printf@plt>
   21540:	b	1f260 <__assert_fail@plt+0xced4>
   21544:	ldr	r0, [pc, #548]	; 21770 <__assert_fail@plt+0xf3e4>
   21548:	bl	11dbc <printf@plt>
   2154c:	b	1f260 <__assert_fail@plt+0xced4>
   21550:	ldr	r0, [pc, #540]	; 21774 <__assert_fail@plt+0xf3e8>
   21554:	bl	11dbc <printf@plt>
   21558:	b	1f260 <__assert_fail@plt+0xced4>
   2155c:	ldr	r0, [pc, #532]	; 21778 <__assert_fail@plt+0xf3ec>
   21560:	bl	11dbc <printf@plt>
   21564:	b	1f260 <__assert_fail@plt+0xced4>
   21568:	ldr	r0, [pc, #524]	; 2177c <__assert_fail@plt+0xf3f0>
   2156c:	bl	11dbc <printf@plt>
   21570:	b	1f260 <__assert_fail@plt+0xced4>
   21574:	ldr	r0, [pc, #516]	; 21780 <__assert_fail@plt+0xf3f4>
   21578:	bl	11dbc <printf@plt>
   2157c:	b	1f260 <__assert_fail@plt+0xced4>
   21580:	ldr	r0, [pc, #508]	; 21784 <__assert_fail@plt+0xf3f8>
   21584:	bl	11dbc <printf@plt>
   21588:	b	1f260 <__assert_fail@plt+0xced4>
   2158c:	ldr	r0, [pc, #500]	; 21788 <__assert_fail@plt+0xf3fc>
   21590:	bl	11dbc <printf@plt>
   21594:	b	1f260 <__assert_fail@plt+0xced4>
   21598:	ldr	r0, [pc, #492]	; 2178c <__assert_fail@plt+0xf400>
   2159c:	bl	11dbc <printf@plt>
   215a0:	b	1f260 <__assert_fail@plt+0xced4>
   215a4:	ldr	r0, [pc, #484]	; 21790 <__assert_fail@plt+0xf404>
   215a8:	bl	11dbc <printf@plt>
   215ac:	b	1f260 <__assert_fail@plt+0xced4>
   215b0:	ldr	r0, [pc, #476]	; 21794 <__assert_fail@plt+0xf408>
   215b4:	bl	11dbc <printf@plt>
   215b8:	b	1f260 <__assert_fail@plt+0xced4>
   215bc:	ldr	r0, [pc, #468]	; 21798 <__assert_fail@plt+0xf40c>
   215c0:	bl	11dbc <printf@plt>
   215c4:	b	1f260 <__assert_fail@plt+0xced4>
   215c8:	ldr	r0, [pc, #460]	; 2179c <__assert_fail@plt+0xf410>
   215cc:	bl	11dbc <printf@plt>
   215d0:	b	1f260 <__assert_fail@plt+0xced4>
   215d4:	ldr	r0, [pc, #452]	; 217a0 <__assert_fail@plt+0xf414>
   215d8:	bl	11dbc <printf@plt>
   215dc:	b	1f260 <__assert_fail@plt+0xced4>
   215e0:	ldr	r0, [pc, #444]	; 217a4 <__assert_fail@plt+0xf418>
   215e4:	bl	11dbc <printf@plt>
   215e8:	b	1f260 <__assert_fail@plt+0xced4>
   215ec:	ldr	r0, [pc, #436]	; 217a8 <__assert_fail@plt+0xf41c>
   215f0:	bl	11dbc <printf@plt>
   215f4:	b	1f260 <__assert_fail@plt+0xced4>
   215f8:	ldr	r0, [pc, #428]	; 217ac <__assert_fail@plt+0xf420>
   215fc:	bl	11dbc <printf@plt>
   21600:	b	1f260 <__assert_fail@plt+0xced4>
   21604:	ldr	r0, [pc, #420]	; 217b0 <__assert_fail@plt+0xf424>
   21608:	bl	11dbc <printf@plt>
   2160c:	b	1f260 <__assert_fail@plt+0xced4>
   21610:	ldr	r0, [pc, #412]	; 217b4 <__assert_fail@plt+0xf428>
   21614:	bl	11dbc <printf@plt>
   21618:	b	1f260 <__assert_fail@plt+0xced4>
   2161c:	ldr	r0, [pc, #404]	; 217b8 <__assert_fail@plt+0xf42c>
   21620:	bl	11dbc <printf@plt>
   21624:	b	1f260 <__assert_fail@plt+0xced4>
   21628:	ldr	r0, [pc, #396]	; 217bc <__assert_fail@plt+0xf430>
   2162c:	bl	11dbc <printf@plt>
   21630:	b	1f260 <__assert_fail@plt+0xced4>
   21634:	ldr	r0, [pc, #388]	; 217c0 <__assert_fail@plt+0xf434>
   21638:	bl	11dbc <printf@plt>
   2163c:	b	1f260 <__assert_fail@plt+0xced4>
   21640:	mov	r2, #5
   21644:	ldr	r1, [pc, #376]	; 217c4 <__assert_fail@plt+0xf438>
   21648:	mov	r0, #0
   2164c:	bl	11ea0 <dcgettext@plt>
   21650:	mov	r7, r0
   21654:	b	1f410 <__assert_fail@plt+0xd084>
   21658:	mov	r2, #5
   2165c:	ldr	r1, [pc, #356]	; 217c8 <__assert_fail@plt+0xf43c>
   21660:	bl	11ea0 <dcgettext@plt>
   21664:	mov	r7, r0
   21668:	b	1f410 <__assert_fail@plt+0xd084>
   2166c:	mov	r0, r5
   21670:	bl	1a540 <__assert_fail@plt+0x81b4>
   21674:	ldr	r3, [pc, #80]	; 216cc <__assert_fail@plt+0xf340>
   21678:	mov	r0, r6
   2167c:	ldr	r3, [r3]
   21680:	blx	r3
   21684:	strd	r0, [sp, #160]	; 0xa0
   21688:	b	1f1ac <__assert_fail@plt+0xce20>
   2168c:	ldr	r3, [pc, #312]	; 217cc <__assert_fail@plt+0xf440>
   21690:	ldr	r2, [pc, #312]	; 217d0 <__assert_fail@plt+0xf444>
   21694:	ldr	r1, [pc, #312]	; 217d4 <__assert_fail@plt+0xf448>
   21698:	ldr	r0, [pc, #312]	; 217d8 <__assert_fail@plt+0xf44c>
   2169c:	bl	1238c <__assert_fail@plt>
   216a0:	mov	r0, r3
   216a4:	bl	1a540 <__assert_fail@plt+0x81b4>
   216a8:	muleq	r4, r4, r2
   216ac:	andeq	sl, r4, r0, lsl #21
   216b0:	andeq	sl, r4, ip, asr #21
   216b4:	andeq	ip, r4, r0, ror #4
   216b8:	ldrdeq	ip, [r4], -ip	; <UNPREDICTABLE>
   216bc:	andeq	ip, r4, r0, ror r5
   216c0:	muleq	r4, r8, r5
   216c4:	andeq	ip, r4, r8, ror ip
   216c8:	andeq	ip, r4, r0, ror ip
   216cc:	andeq	r9, r6, r0, ror #27
   216d0:	andeq	ip, r4, r0, ror #24
   216d4:	andeq	ip, r4, ip, asr #24
   216d8:			; <UNDEFINED> instruction: 0x0004cab8
   216dc:	andeq	ip, r4, r4, lsr #21
   216e0:	andeq	ip, r4, r0, ror sl
   216e4:	andeq	ip, r4, ip, asr sl
   216e8:	andeq	ip, r4, r4, lsr #20
   216ec:	andeq	ip, r4, r8, lsr sl
   216f0:	andeq	ip, r4, ip, lsl #26
   216f4:	andeq	r7, r6, r0, lsr r5
   216f8:	andeq	ip, r4, ip, asr #23
   216fc:	andeq	ip, r4, r8, ror #19
   21700:	andeq	ip, r4, r0, lsl #20
   21704:	andeq	r2, r0, r1, lsr r1
   21708:	andeq	ip, r4, r0, lsr #22
   2170c:	andeq	ip, r4, r4, asr #9
   21710:	andeq	ip, r4, ip, lsr ip
   21714:	andeq	r9, r4, r4, lsr #5
   21718:	andeq	ip, r4, ip, lsr #10
   2171c:	andeq	ip, r4, r4, lsr #26
   21720:	andeq	ip, r4, r8, lsl #9
   21724:	andeq	r8, r4, r8, lsr #29
   21728:	andeq	ip, r4, r8, lsr r2
   2172c:	andeq	ip, r4, r4, asr #7
   21730:	andeq	ip, r4, r4, ror #7
   21734:	andeq	ip, r4, ip, ror #8
   21738:	andeq	ip, r4, r0, lsl r4
   2173c:	andeq	sl, r4, r8, lsr ip
   21740:	andeq	ip, r4, r4, lsr #13
   21744:			; <UNDEFINED> instruction: 0x0004c6b0
   21748:	ldrdeq	ip, [r4], -r4
   2174c:			; <UNDEFINED> instruction: 0x0004c7b4
   21750:	andeq	ip, r4, r4, asr #15
   21754:	ldrdeq	ip, [r4], -r0
   21758:	strdeq	ip, [r4], -r8
   2175c:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   21760:	andeq	ip, r4, r8, ror #15
   21764:	andeq	ip, r4, r8, lsl #16
   21768:			; <UNDEFINED> instruction: 0x0004c6b8
   2176c:	andeq	ip, r4, r0, ror #13
   21770:	andeq	ip, r4, r8, ror #13
   21774:	andeq	ip, r4, r4, lsr #15
   21778:	muleq	r4, r4, r7
   2177c:	andeq	ip, r4, r4, lsl #15
   21780:	andeq	ip, r4, ip, lsl #15
   21784:	andeq	ip, r4, r0, lsr #14
   21788:	andeq	ip, r4, r4, ror r6
   2178c:	andeq	ip, r4, ip, asr r6
   21790:	andeq	ip, r4, r8, ror #12
   21794:	muleq	r4, r4, r6
   21798:	andeq	ip, r4, r0, asr r7
   2179c:	andeq	ip, r4, ip, asr #12
   217a0:	andeq	ip, r4, ip, lsr r6
   217a4:	andeq	ip, r4, r4, asr r6
   217a8:	andeq	ip, r4, ip, lsr r7
   217ac:	andeq	ip, r4, r4, lsr #14
   217b0:	andeq	ip, r4, r0, lsr r7
   217b4:	andeq	ip, r4, ip, ror r7
   217b8:	andeq	ip, r4, ip, ror #14
   217bc:	andeq	ip, r4, ip, asr r7
   217c0:	andeq	ip, r4, r4, ror #14
   217c4:	andeq	sl, r4, ip, asr #24
   217c8:	andeq	sl, r4, r4, asr #15
   217cc:			; <UNDEFINED> instruction: 0x00049bbc
   217d0:	andeq	r0, r0, lr, lsl #17
   217d4:	ldrdeq	sl, [r4], -r8
   217d8:	andeq	ip, r4, r8, lsl #10
   217dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217e0:	subs	ip, r3, #0
   217e4:	sub	sp, sp, #284	; 0x11c
   217e8:	mov	r3, r0
   217ec:	str	r0, [sp, #112]	; 0x70
   217f0:	ldr	r3, [r3, #32]
   217f4:	ldr	r0, [r0, #16]
   217f8:	str	ip, [sp, #136]	; 0x88
   217fc:	str	r0, [sp, #92]	; 0x5c
   21800:	str	r2, [sp, #176]	; 0xb0
   21804:	add	sl, r0, r3
   21808:	mov	r7, r1
   2180c:	bne	226f4 <__assert_fail@plt+0x10368>
   21810:	ldr	r2, [pc, #4036]	; 227dc <__assert_fail@plt+0x10450>
   21814:	ldr	r3, [pc, #4036]	; 227e0 <__assert_fail@plt+0x10454>
   21818:	ldr	r2, [r2]
   2181c:	ldr	r3, [r3]
   21820:	orrs	r3, r2, r3
   21824:	streq	ip, [sp, #196]	; 0xc4
   21828:	bne	21d98 <__assert_fail@plt+0xfa0c>
   2182c:	mov	r1, r7
   21830:	mov	r0, #10
   21834:	bl	19dd4 <__assert_fail@plt+0x7a48>
   21838:	mov	r1, r7
   2183c:	mov	r0, #11
   21840:	bl	19dd4 <__assert_fail@plt+0x7a48>
   21844:	mov	r1, r7
   21848:	mov	r0, #34	; 0x22
   2184c:	bl	19dd4 <__assert_fail@plt+0x7a48>
   21850:	mov	r1, r7
   21854:	mov	r0, #35	; 0x23
   21858:	bl	19dd4 <__assert_fail@plt+0x7a48>
   2185c:	mov	r1, r7
   21860:	mov	r0, #36	; 0x24
   21864:	bl	19dd4 <__assert_fail@plt+0x7a48>
   21868:	mov	r1, r7
   2186c:	mov	r0, #37	; 0x25
   21870:	bl	19dd4 <__assert_fail@plt+0x7a48>
   21874:	ldr	r4, [sp, #176]	; 0xb0
   21878:	mov	r1, r7
   2187c:	mov	r0, r4
   21880:	lsl	r5, r4, #3
   21884:	str	r5, [sp, #192]	; 0xc0
   21888:	bl	19dd4 <__assert_fail@plt+0x7a48>
   2188c:	ldr	r2, [pc, #3920]	; 227e4 <__assert_fail@plt+0x10458>
   21890:	add	r3, r5, r4
   21894:	str	r2, [sp, #180]	; 0xb4
   21898:	add	r3, r2, r3, lsl #3
   2189c:	ldr	r3, [r3, #16]
   218a0:	cmp	r3, #0
   218a4:	beq	22c74 <__assert_fail@plt+0x108e8>
   218a8:	ldr	r3, [pc, #3896]	; 227e8 <__assert_fail@plt+0x1045c>
   218ac:	str	r3, [sp, #140]	; 0x8c
   218b0:	ldr	r3, [r3]
   218b4:	cmp	r3, #0
   218b8:	beq	22d78 <__assert_fail@plt+0x109ec>
   218bc:	ldr	r3, [sp, #92]	; 0x5c
   218c0:	cmp	r3, sl
   218c4:	bcs	21d38 <__assert_fail@plt+0xf9ac>
   218c8:	ldr	r3, [pc, #3868]	; 227ec <__assert_fail@plt+0x10460>
   218cc:	str	r3, [sp, #104]	; 0x68
   218d0:	ldr	r9, [sp, #92]	; 0x5c
   218d4:	mov	r6, sl
   218d8:	mov	r3, #0
   218dc:	str	r3, [sp, #116]	; 0x74
   218e0:	str	r9, [sp, #56]	; 0x38
   218e4:	ldr	r1, [sp, #56]	; 0x38
   218e8:	mov	r2, #0
   218ec:	mov	r3, #0
   218f0:	add	r5, r1, #4
   218f4:	cmp	r5, r6
   218f8:	strd	r2, [sp, #200]	; 0xc8
   218fc:	strd	r2, [sp, #208]	; 0xd0
   21900:	bcc	21ef4 <__assert_fail@plt+0xfb68>
   21904:	sub	r1, r6, r1
   21908:	sub	r3, r1, #1
   2190c:	cmp	r3, #7
   21910:	bls	21ef8 <__assert_fail@plt+0xfb6c>
   21914:	add	r4, r5, #2
   21918:	mov	r8, #4
   2191c:	cmp	r4, r6
   21920:	str	r8, [sp, #88]	; 0x58
   21924:	str	r8, [sp, #128]	; 0x80
   21928:	mov	r9, #0
   2192c:	bcs	21f70 <__assert_fail@plt+0xfbe4>
   21930:	mov	r2, #0
   21934:	mov	r3, #0
   21938:	mov	r1, #2
   2193c:	strd	r2, [sp, #80]	; 0x50
   21940:	ldr	r3, [pc, #3936]	; 228a8 <__assert_fail@plt+0x1051c>
   21944:	mov	r0, r5
   21948:	ldr	r3, [r3]
   2194c:	blx	r3
   21950:	uxth	r3, r0
   21954:	str	r3, [sp, #76]	; 0x4c
   21958:	ldr	r3, [sp, #320]	; 0x140
   2195c:	ldr	r2, [sp, #56]	; 0x38
   21960:	cmp	r3, #0
   21964:	ldr	r3, [sp, #92]	; 0x5c
   21968:	movne	r0, #2
   2196c:	sub	r3, r2, r3
   21970:	mov	r1, r3
   21974:	mov	r2, r3
   21978:	str	r3, [sp, #120]	; 0x78
   2197c:	asr	r3, r3, #31
   21980:	moveq	r0, #1
   21984:	strd	r2, [sp, #64]	; 0x40
   21988:	ldr	r3, [sp, #104]	; 0x68
   2198c:	ldrne	r1, [r3, #1528]	; 0x5f8
   21990:	ldreq	r1, [r3, #1536]	; 0x600
   21994:	ldrne	r7, [r3, #1524]	; 0x5f4
   21998:	ldreq	r7, [r3, #1532]	; 0x5fc
   2199c:	cmp	r1, #0
   219a0:	beq	22c6c <__assert_fail@plt+0x108e0>
   219a4:	add	r0, r0, #1
   219a8:	ldrd	sl, [sp, #64]	; 0x40
   219ac:	lsl	r0, r0, #3
   219b0:	ldrd	r2, [r7, r0]
   219b4:	cmp	fp, r3
   219b8:	cmpeq	sl, r2
   219bc:	beq	219f0 <__assert_fail@plt+0xf664>
   219c0:	ldr	ip, [sp, #56]	; 0x38
   219c4:	ldrd	sl, [sp, #64]	; 0x40
   219c8:	b	219dc <__assert_fail@plt+0xf650>
   219cc:	ldrd	r2, [r7, r0]
   219d0:	cmp	fp, r3
   219d4:	cmpeq	sl, r2
   219d8:	beq	21f88 <__assert_fail@plt+0xfbfc>
   219dc:	subs	r1, r1, #1
   219e0:	add	r7, r7, #104	; 0x68
   219e4:	bne	219cc <__assert_fail@plt+0xf640>
   219e8:	mov	r7, r1
   219ec:	str	ip, [sp, #56]	; 0x38
   219f0:	ldr	r3, [sp, #76]	; 0x4c
   219f4:	cmp	r3, #4
   219f8:	bls	21e84 <__assert_fail@plt+0xfaf8>
   219fc:	add	sl, r5, #3
   21a00:	cmp	sl, r6
   21a04:	bcc	22320 <__assert_fail@plt+0xff94>
   21a08:	cmp	r6, r4
   21a0c:	bls	21a20 <__assert_fail@plt+0xf694>
   21a10:	sub	r1, r6, r4
   21a14:	sub	r3, r1, #1
   21a18:	cmp	r3, #7
   21a1c:	bls	22ef0 <__assert_fail@plt+0x10b64>
   21a20:	add	r4, r5, #4
   21a24:	mov	r3, #0
   21a28:	cmp	r6, r4
   21a2c:	str	r3, [sp, #320]	; 0x140
   21a30:	str	r3, [sp, #152]	; 0x98
   21a34:	bls	22364 <__assert_fail@plt+0xffd8>
   21a38:	mov	r1, #1
   21a3c:	ldr	r3, [pc, #3684]	; 228a8 <__assert_fail@plt+0x1051c>
   21a40:	mov	r0, sl
   21a44:	ldr	r3, [r3]
   21a48:	blx	r3
   21a4c:	uxtb	r3, r0
   21a50:	str	r3, [sp, #108]	; 0x6c
   21a54:	ldr	r3, [sp, #88]	; 0x58
   21a58:	add	sl, r4, r3
   21a5c:	cmp	sl, r6
   21a60:	bcc	21ea4 <__assert_fail@plt+0xfb18>
   21a64:	cmp	r4, r6
   21a68:	bcs	21a7c <__assert_fail@plt+0xf6f0>
   21a6c:	sub	r1, r6, r4
   21a70:	sub	r3, r1, #1
   21a74:	cmp	r3, #7
   21a78:	bls	21ea8 <__assert_fail@plt+0xfb1c>
   21a7c:	mov	r2, #0
   21a80:	mov	r3, #0
   21a84:	cmp	r7, #0
   21a88:	strd	r2, [sp, #144]	; 0x90
   21a8c:	beq	21ec4 <__assert_fail@plt+0xfb38>
   21a90:	ldr	r3, [r7, #32]
   21a94:	str	r3, [sp, #160]	; 0xa0
   21a98:	ldr	r3, [r7, #36]	; 0x24
   21a9c:	str	r3, [sp, #164]	; 0xa4
   21aa0:	ldr	r3, [r7, #84]	; 0x54
   21aa4:	str	r3, [sp, #156]	; 0x9c
   21aa8:	ldr	r3, [sp, #76]	; 0x4c
   21aac:	cmp	r3, #4
   21ab0:	bhi	21e68 <__assert_fail@plt+0xfadc>
   21ab4:	add	r5, sl, #1
   21ab8:	cmp	r5, r6
   21abc:	bcc	21e48 <__assert_fail@plt+0xfabc>
   21ac0:	cmp	r6, sl
   21ac4:	bls	21ad8 <__assert_fail@plt+0xf74c>
   21ac8:	sub	r1, r6, sl
   21acc:	sub	r3, r1, #1
   21ad0:	cmp	r3, #7
   21ad4:	bls	21e4c <__assert_fail@plt+0xfac0>
   21ad8:	mov	r4, #0
   21adc:	mov	r2, #5
   21ae0:	ldr	r1, [pc, #3336]	; 227f0 <__assert_fail@plt+0x10464>
   21ae4:	mov	r0, #0
   21ae8:	bl	11ea0 <dcgettext@plt>
   21aec:	ldr	fp, [sp, #88]	; 0x58
   21af0:	mov	r1, r4
   21af4:	mov	r2, fp
   21af8:	mov	sl, r5
   21afc:	bl	417d0 <warn@@Base>
   21b00:	uxtb	r3, fp
   21b04:	str	r3, [sp, #108]	; 0x6c
   21b08:	ldr	r3, [sp, #320]	; 0x140
   21b0c:	cmp	r3, #0
   21b10:	beq	21b58 <__assert_fail@plt+0xf7cc>
   21b14:	add	r4, sl, #8
   21b18:	cmp	r4, r6
   21b1c:	bls	226bc <__assert_fail@plt+0x10330>
   21b20:	mov	r2, #0
   21b24:	mov	r3, #0
   21b28:	strd	r2, [sp, #200]	; 0xc8
   21b2c:	strd	r2, [sp, #208]	; 0xd0
   21b30:	ldr	r3, [sp, #88]	; 0x58
   21b34:	add	sl, r4, r3
   21b38:	cmp	sl, r6
   21b3c:	bcc	22380 <__assert_fail@plt+0xfff4>
   21b40:	cmp	r4, r6
   21b44:	bcs	21b58 <__assert_fail@plt+0xf7cc>
   21b48:	sub	r1, r6, r4
   21b4c:	sub	r3, r1, #1
   21b50:	cmp	r3, #7
   21b54:	bls	22384 <__assert_fail@plt+0xfff8>
   21b58:	mov	r2, #0
   21b5c:	mov	r3, #0
   21b60:	strd	r2, [sp, #168]	; 0xa8
   21b64:	ldrd	r0, [sp, #80]	; 0x50
   21b68:	ldr	r2, [sp, #128]	; 0x80
   21b6c:	adds	r3, r0, r2
   21b70:	adc	r9, r1, r9
   21b74:	ldrd	r0, [sp, #64]	; 0x40
   21b78:	ldr	r2, [sp, #140]	; 0x8c
   21b7c:	adds	r3, r3, r0
   21b80:	str	r3, [sp, #96]	; 0x60
   21b84:	adc	r3, r9, r1
   21b88:	str	r3, [sp, #100]	; 0x64
   21b8c:	ldrd	r0, [sp, #96]	; 0x60
   21b90:	mov	r3, #0
   21b94:	ldr	r5, [r2]
   21b98:	cmp	r3, r1
   21b9c:	ldr	r3, [sp, #120]	; 0x78
   21ba0:	cmpeq	r5, r0
   21ba4:	add	r4, r8, r3
   21ba8:	bhi	221e0 <__assert_fail@plt+0xfe54>
   21bac:	ldr	r3, [sp, #136]	; 0x88
   21bb0:	cmp	r3, #0
   21bb4:	bne	221cc <__assert_fail@plt+0xfe40>
   21bb8:	ldr	r2, [pc, #3100]	; 227dc <__assert_fail@plt+0x10450>
   21bbc:	ldr	r3, [pc, #3100]	; 227e0 <__assert_fail@plt+0x10454>
   21bc0:	ldr	r2, [r2]
   21bc4:	ldr	r3, [r3]
   21bc8:	orrs	r3, r2, r3
   21bcc:	beq	21f90 <__assert_fail@plt+0xfc04>
   21bd0:	ldr	r3, [sp, #104]	; 0x68
   21bd4:	ldr	r3, [r3, #1488]	; 0x5d0
   21bd8:	cmp	r3, #0
   21bdc:	bne	21f90 <__assert_fail@plt+0xfc04>
   21be0:	ldr	r3, [sp, #320]	; 0x140
   21be4:	cmp	r3, #0
   21be8:	bne	21c60 <__assert_fail@plt+0xf8d4>
   21bec:	ldr	r1, [sp, #116]	; 0x74
   21bf0:	ldr	r2, [sp, #104]	; 0x68
   21bf4:	add	r3, r1, r1, lsl #2
   21bf8:	ldr	r2, [r2, #1440]	; 0x5a0
   21bfc:	add	r3, r1, r3, lsl #1
   21c00:	ldrd	r0, [sp, #64]	; 0x40
   21c04:	add	ip, r2, r3, lsl #3
   21c08:	strd	r0, [ip, #16]
   21c0c:	ldr	r1, [sp, #108]	; 0x6c
   21c10:	mov	r0, #0
   21c14:	str	r1, [r2, r3, lsl #3]
   21c18:	ldr	r1, [sp, #88]	; 0x58
   21c1c:	mvn	r2, #0
   21c20:	str	r1, [ip, #4]
   21c24:	ldr	r1, [sp, #76]	; 0x4c
   21c28:	mov	r3, #0
   21c2c:	str	r1, [ip, #8]
   21c30:	ldr	r1, [sp, #320]	; 0x140
   21c34:	strd	r2, [ip, #32]
   21c38:	str	r1, [ip, #48]	; 0x30
   21c3c:	str	r1, [ip, #56]	; 0x38
   21c40:	str	r1, [ip, #64]	; 0x40
   21c44:	str	r1, [ip, #60]	; 0x3c
   21c48:	str	r1, [ip, #72]	; 0x48
   21c4c:	str	r1, [ip, #80]	; 0x50
   21c50:	str	r1, [ip, #76]	; 0x4c
   21c54:	mov	r1, #0
   21c58:	strd	r2, [ip, #40]	; 0x28
   21c5c:	strd	r0, [ip, #24]
   21c60:	ldr	r3, [sp, #136]	; 0x88
   21c64:	cmp	r3, #0
   21c68:	beq	21f90 <__assert_fail@plt+0xfc04>
   21c6c:	ldrd	r2, [sp, #80]	; 0x50
   21c70:	mov	r5, #0
   21c74:	adds	r0, r4, r2
   21c78:	adcs	r1, r5, r3
   21c7c:	mov	r2, #0
   21c80:	mov	r3, #0
   21c84:	movcs	r2, #1
   21c88:	movcs	r3, #0
   21c8c:	orrs	r3, r2, r3
   21c90:	bne	22d8c <__assert_fail@plt+0x10a00>
   21c94:	ldr	r3, [sp, #112]	; 0x70
   21c98:	ldrd	r2, [r3, #32]
   21c9c:	cmp	r1, r3
   21ca0:	cmpeq	r0, r2
   21ca4:	bhi	22d8c <__assert_fail@plt+0x10a00>
   21ca8:	ldr	r3, [sp, #76]	; 0x4c
   21cac:	ldr	r2, [sp, #80]	; 0x50
   21cb0:	sub	r3, r3, #2
   21cb4:	cmp	r3, #3
   21cb8:	ldr	r3, [sp, #56]	; 0x38
   21cbc:	add	r2, r8, r2
   21cc0:	add	r3, r3, r2
   21cc4:	str	r3, [sp, #56]	; 0x38
   21cc8:	bhi	227a0 <__assert_fail@plt+0x10414>
   21ccc:	ldr	r5, [sp, #152]	; 0x98
   21cd0:	sub	r3, r5, #1
   21cd4:	cmp	r3, #1
   21cd8:	bls	2239c <__assert_fail@plt+0x10010>
   21cdc:	mov	r2, #5
   21ce0:	ldr	r1, [pc, #2828]	; 227f4 <__assert_fail@plt+0x10468>
   21ce4:	mov	r0, #0
   21ce8:	bl	11ea0 <dcgettext@plt>
   21cec:	mov	r1, #0
   21cf0:	ldrd	r2, [sp, #64]	; 0x40
   21cf4:	str	r1, [sp]
   21cf8:	mov	r4, r0
   21cfc:	ldr	r0, [pc, #2928]	; 22874 <__assert_fail@plt+0x104e8>
   21d00:	bl	18b24 <__assert_fail@plt+0x6798>
   21d04:	mov	r2, r5
   21d08:	mov	r1, r0
   21d0c:	mov	r0, r4
   21d10:	bl	417d0 <warn@@Base>
   21d14:	ldr	r3, [sp, #56]	; 0x38
   21d18:	cmp	r3, r6
   21d1c:	ldr	r3, [sp, #116]	; 0x74
   21d20:	add	r3, r3, #1
   21d24:	str	r3, [sp, #116]	; 0x74
   21d28:	bcc	218e4 <__assert_fail@plt+0xf558>
   21d2c:	ldr	r3, [sp, #136]	; 0x88
   21d30:	cmp	r3, #0
   21d34:	bne	22ddc <__assert_fail@plt+0x10a50>
   21d38:	ldr	r2, [pc, #2716]	; 227dc <__assert_fail@plt+0x10450>
   21d3c:	ldr	r3, [pc, #2716]	; 227e0 <__assert_fail@plt+0x10454>
   21d40:	ldr	r2, [r2]
   21d44:	ldr	r3, [r3]
   21d48:	orrs	r3, r2, r3
   21d4c:	beq	22c20 <__assert_fail@plt+0x10894>
   21d50:	ldr	r3, [pc, #2708]	; 227ec <__assert_fail@plt+0x10460>
   21d54:	ldr	r2, [sp, #320]	; 0x140
   21d58:	str	r3, [sp, #104]	; 0x68
   21d5c:	ldr	r3, [r3, #1488]	; 0x5d0
   21d60:	orrs	r3, r2, r3
   21d64:	bne	22c20 <__assert_fail@plt+0x10894>
   21d68:	ldr	r2, [sp, #104]	; 0x68
   21d6c:	ldr	r1, [sp, #196]	; 0xc4
   21d70:	ldr	r3, [r2, #1520]	; 0x5f0
   21d74:	cmp	r3, r1
   21d78:	movcs	r3, r1
   21d7c:	ldr	r1, [sp, #136]	; 0x88
   21d80:	str	r3, [r2, #1488]	; 0x5d0
   21d84:	cmp	r1, #0
   21d88:	beq	22c20 <__assert_fail@plt+0x10894>
   21d8c:	mov	r0, #1
   21d90:	add	sp, sp, #284	; 0x11c
   21d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d98:	ldr	r3, [pc, #2636]	; 227ec <__assert_fail@plt+0x10460>
   21d9c:	ldr	r2, [sp, #320]	; 0x140
   21da0:	str	r3, [sp, #104]	; 0x68
   21da4:	ldr	r3, [r3, #1488]	; 0x5d0
   21da8:	orrs	r3, r2, r3
   21dac:	bne	22ca8 <__assert_fail@plt+0x1091c>
   21db0:	ldr	r3, [sp, #92]	; 0x5c
   21db4:	cmp	r3, sl
   21db8:	bcs	22e3c <__assert_fail@plt+0x10ab0>
   21dbc:	ldr	fp, [sp, #92]	; 0x5c
   21dc0:	mov	r3, #0
   21dc4:	ldr	r9, [pc, #2780]	; 228a8 <__assert_fail@plt+0x1051c>
   21dc8:	str	r7, [sp, #64]	; 0x40
   21dcc:	mov	r6, fp
   21dd0:	mov	r8, sl
   21dd4:	mov	r7, r3
   21dd8:	add	sl, r6, #4
   21ddc:	cmp	sl, r8
   21de0:	bcc	221f8 <__assert_fail@plt+0xfe6c>
   21de4:	sub	r1, r8, r6
   21de8:	sub	r0, r1, #1
   21dec:	cmp	r0, #7
   21df0:	bls	221fc <__assert_fail@plt+0xfe70>
   21df4:	mov	r4, #0
   21df8:	mov	r5, #0
   21dfc:	ldr	r1, [pc, #2548]	; 227f8 <__assert_fail@plt+0x1046c>
   21e00:	mov	r2, #5
   21e04:	mov	r0, #0
   21e08:	mov	r8, r0
   21e0c:	bl	11ea0 <dcgettext@plt>
   21e10:	mov	r2, r4
   21e14:	mov	r3, r5
   21e18:	str	r8, [sp]
   21e1c:	mov	r6, r0
   21e20:	ldr	r0, [pc, #2636]	; 22874 <__assert_fail@plt+0x104e8>
   21e24:	bl	18b24 <__assert_fail@plt+0x6798>
   21e28:	ldr	r3, [sp, #112]	; 0x70
   21e2c:	ldr	r2, [r3, #8]
   21e30:	mov	r1, r0
   21e34:	mov	r0, r6
   21e38:	bl	417d0 <warn@@Base>
   21e3c:	mov	r0, r8
   21e40:	add	sp, sp, #284	; 0x11c
   21e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e48:	mov	r1, #1
   21e4c:	ldr	r3, [pc, #2644]	; 228a8 <__assert_fail@plt+0x1051c>
   21e50:	mov	r0, sl
   21e54:	mov	sl, r5
   21e58:	ldr	r3, [r3]
   21e5c:	blx	r3
   21e60:	uxtb	r3, r0
   21e64:	str	r3, [sp, #108]	; 0x6c
   21e68:	ldr	r3, [sp, #108]	; 0x6c
   21e6c:	sub	r3, r3, #2
   21e70:	cmp	r3, #6
   21e74:	movhi	r5, sl
   21e78:	ldrhi	r4, [sp, #108]	; 0x6c
   21e7c:	bls	21b08 <__assert_fail@plt+0xf77c>
   21e80:	b	21adc <__assert_fail@plt+0xf750>
   21e84:	mov	r3, #1
   21e88:	str	r3, [sp, #152]	; 0x98
   21e8c:	mov	r3, #255	; 0xff
   21e90:	str	r3, [sp, #108]	; 0x6c
   21e94:	ldr	r3, [sp, #88]	; 0x58
   21e98:	add	sl, r4, r3
   21e9c:	cmp	sl, r6
   21ea0:	bcs	21a64 <__assert_fail@plt+0xf6d8>
   21ea4:	ldr	r1, [sp, #88]	; 0x58
   21ea8:	ldr	r3, [pc, #2552]	; 228a8 <__assert_fail@plt+0x1051c>
   21eac:	mov	r0, r4
   21eb0:	ldr	r3, [r3]
   21eb4:	blx	r3
   21eb8:	cmp	r7, #0
   21ebc:	strd	r0, [sp, #144]	; 0x90
   21ec0:	bne	21a90 <__assert_fail@plt+0xf704>
   21ec4:	ldr	r2, [sp, #176]	; 0xb0
   21ec8:	ldr	r3, [sp, #192]	; 0xc0
   21ecc:	add	r3, r3, r2
   21ed0:	mov	r2, #0
   21ed4:	str	r2, [sp, #160]	; 0xa0
   21ed8:	ldr	r2, [sp, #180]	; 0xb4
   21edc:	add	r3, r2, r3, lsl #3
   21ee0:	mov	r2, #0
   21ee4:	ldr	r3, [r3, #32]
   21ee8:	str	r2, [sp, #164]	; 0xa4
   21eec:	str	r3, [sp, #156]	; 0x9c
   21ef0:	b	21aa8 <__assert_fail@plt+0xf71c>
   21ef4:	mov	r1, #4
   21ef8:	ldr	r3, [pc, #2472]	; 228a8 <__assert_fail@plt+0x1051c>
   21efc:	ldr	r4, [sp, #56]	; 0x38
   21f00:	ldr	r3, [r3]
   21f04:	mov	r0, r4
   21f08:	blx	r3
   21f0c:	mov	r3, #0
   21f10:	mvn	r2, #0
   21f14:	cmp	r1, r3
   21f18:	cmpeq	r0, r2
   21f1c:	strd	r0, [sp, #80]	; 0x50
   21f20:	bne	226d0 <__assert_fail@plt+0x10344>
   21f24:	add	r2, r4, #12
   21f28:	cmp	r2, r6
   21f2c:	bcc	22660 <__assert_fail@plt+0x102d4>
   21f30:	cmp	r5, r6
   21f34:	bcs	21f48 <__assert_fail@plt+0xfbbc>
   21f38:	sub	r1, r6, r5
   21f3c:	sub	r3, r1, #1
   21f40:	cmp	r3, #7
   21f44:	bls	22664 <__assert_fail@plt+0x102d8>
   21f48:	mov	r5, r2
   21f4c:	mov	r3, #12
   21f50:	add	r4, r5, #2
   21f54:	str	r3, [sp, #128]	; 0x80
   21f58:	mov	r8, r3
   21f5c:	cmp	r4, r6
   21f60:	mov	r3, #8
   21f64:	mov	r9, #0
   21f68:	str	r3, [sp, #88]	; 0x58
   21f6c:	bcc	21930 <__assert_fail@plt+0xf5a4>
   21f70:	mov	r2, #0
   21f74:	mov	r3, #0
   21f78:	strd	r2, [sp, #80]	; 0x50
   21f7c:	mov	r3, #0
   21f80:	str	r3, [sp, #76]	; 0x4c
   21f84:	b	21958 <__assert_fail@plt+0xf5cc>
   21f88:	str	ip, [sp, #56]	; 0x38
   21f8c:	b	219f0 <__assert_fail@plt+0xf664>
   21f90:	cmp	r5, #0
   21f94:	bne	21c6c <__assert_fail@plt+0xf8e0>
   21f98:	ldr	r1, [pc, #2140]	; 227fc <__assert_fail@plt+0x10470>
   21f9c:	mov	r2, #5
   21fa0:	mov	r0, r5
   21fa4:	bl	11ea0 <dcgettext@plt>
   21fa8:	ldrd	r2, [sp, #64]	; 0x40
   21fac:	str	r5, [sp]
   21fb0:	mov	r9, r0
   21fb4:	ldr	r0, [pc, #2232]	; 22874 <__assert_fail@plt+0x104e8>
   21fb8:	bl	18b24 <__assert_fail@plt+0x6798>
   21fbc:	mov	r1, r0
   21fc0:	mov	r0, r9
   21fc4:	bl	11dbc <printf@plt>
   21fc8:	ldr	r1, [pc, #2096]	; 22800 <__assert_fail@plt+0x10474>
   21fcc:	mov	r2, #5
   21fd0:	mov	r0, r5
   21fd4:	bl	11ea0 <dcgettext@plt>
   21fd8:	ldrd	r2, [sp, #80]	; 0x50
   21fdc:	str	r5, [sp]
   21fe0:	mov	r9, r0
   21fe4:	ldr	r0, [pc, #2184]	; 22874 <__assert_fail@plt+0x104e8>
   21fe8:	bl	18b24 <__assert_fail@plt+0x6798>
   21fec:	ldr	r1, [sp, #88]	; 0x58
   21ff0:	ldr	r3, [pc, #2060]	; 22804 <__assert_fail@plt+0x10478>
   21ff4:	cmp	r1, #8
   21ff8:	ldr	r2, [pc, #2056]	; 22808 <__assert_fail@plt+0x1047c>
   21ffc:	movne	r2, r3
   22000:	mov	r1, r0
   22004:	mov	r0, r9
   22008:	bl	11dbc <printf@plt>
   2200c:	mov	r2, #5
   22010:	ldr	r1, [pc, #2036]	; 2280c <__assert_fail@plt+0x10480>
   22014:	mov	r0, r5
   22018:	bl	11ea0 <dcgettext@plt>
   2201c:	ldr	r1, [sp, #76]	; 0x4c
   22020:	bl	11dbc <printf@plt>
   22024:	ldr	r1, [pc, #2020]	; 22810 <__assert_fail@plt+0x10484>
   22028:	mov	r2, #5
   2202c:	mov	r0, r5
   22030:	bl	11ea0 <dcgettext@plt>
   22034:	ldrd	r2, [sp, #144]	; 0x90
   22038:	str	r5, [sp]
   2203c:	mov	r9, r0
   22040:	ldr	r0, [pc, #2092]	; 22874 <__assert_fail@plt+0x104e8>
   22044:	bl	18b24 <__assert_fail@plt+0x6798>
   22048:	mov	r1, r0
   2204c:	mov	r0, r9
   22050:	bl	11dbc <printf@plt>
   22054:	mov	r2, #5
   22058:	ldr	r1, [pc, #1972]	; 22814 <__assert_fail@plt+0x10488>
   2205c:	mov	r0, r5
   22060:	bl	11ea0 <dcgettext@plt>
   22064:	ldr	r1, [sp, #108]	; 0x6c
   22068:	bl	11dbc <printf@plt>
   2206c:	ldr	r3, [sp, #320]	; 0x140
   22070:	cmp	r3, #0
   22074:	bne	22d0c <__assert_fail@plt+0x10980>
   22078:	cmp	r7, #0
   2207c:	beq	21c6c <__assert_fail@plt+0xf8e0>
   22080:	mov	r2, #5
   22084:	ldr	r1, [pc, #1932]	; 22818 <__assert_fail@plt+0x1048c>
   22088:	mov	r0, #0
   2208c:	bl	11ea0 <dcgettext@plt>
   22090:	bl	11dbc <printf@plt>
   22094:	ldr	r1, [pc, #1920]	; 2281c <__assert_fail@plt+0x10490>
   22098:	mov	r2, #5
   2209c:	mov	r0, #0
   220a0:	bl	11ea0 <dcgettext@plt>
   220a4:	mov	r5, #0
   220a8:	ldrd	r2, [r7, #32]
   220ac:	str	r5, [sp]
   220b0:	mov	fp, r0
   220b4:	ldr	r0, [pc, #1976]	; 22874 <__assert_fail@plt+0x104e8>
   220b8:	bl	18b24 <__assert_fail@plt+0x6798>
   220bc:	mov	r3, r5
   220c0:	ldr	r2, [r7, #84]	; 0x54
   220c4:	str	r5, [sp]
   220c8:	mov	r9, r0
   220cc:	ldr	r0, [pc, #1952]	; 22874 <__assert_fail@plt+0x104e8>
   220d0:	bl	18b24 <__assert_fail@plt+0x6798>
   220d4:	mov	r1, r9
   220d8:	mov	r2, r0
   220dc:	mov	r0, fp
   220e0:	bl	11dbc <printf@plt>
   220e4:	ldr	r1, [pc, #1844]	; 22820 <__assert_fail@plt+0x10494>
   220e8:	mov	r0, r5
   220ec:	mov	r2, #5
   220f0:	bl	11ea0 <dcgettext@plt>
   220f4:	ldrd	r2, [r7, #40]	; 0x28
   220f8:	str	r5, [sp]
   220fc:	mov	fp, r0
   22100:	ldr	r0, [pc, #1900]	; 22874 <__assert_fail@plt+0x104e8>
   22104:	bl	18b24 <__assert_fail@plt+0x6798>
   22108:	mov	r3, r5
   2210c:	ldr	r2, [r7, #88]	; 0x58
   22110:	str	r5, [sp]
   22114:	mov	r9, r0
   22118:	ldr	r0, [pc, #1876]	; 22874 <__assert_fail@plt+0x104e8>
   2211c:	bl	18b24 <__assert_fail@plt+0x6798>
   22120:	mov	r1, r9
   22124:	mov	r2, r0
   22128:	mov	r0, fp
   2212c:	bl	11dbc <printf@plt>
   22130:	ldr	r1, [pc, #1772]	; 22824 <__assert_fail@plt+0x10498>
   22134:	mov	r0, r5
   22138:	mov	r2, #5
   2213c:	bl	11ea0 <dcgettext@plt>
   22140:	ldrd	r2, [r7, #48]	; 0x30
   22144:	str	r5, [sp]
   22148:	mov	fp, r0
   2214c:	ldr	r0, [pc, #1824]	; 22874 <__assert_fail@plt+0x104e8>
   22150:	bl	18b24 <__assert_fail@plt+0x6798>
   22154:	mov	r3, r5
   22158:	ldr	r2, [r7, #92]	; 0x5c
   2215c:	str	r5, [sp]
   22160:	mov	r9, r0
   22164:	ldr	r0, [pc, #1800]	; 22874 <__assert_fail@plt+0x104e8>
   22168:	bl	18b24 <__assert_fail@plt+0x6798>
   2216c:	mov	r1, r9
   22170:	mov	r2, r0
   22174:	mov	r0, fp
   22178:	bl	11dbc <printf@plt>
   2217c:	ldr	r1, [pc, #1700]	; 22828 <__assert_fail@plt+0x1049c>
   22180:	mov	r0, r5
   22184:	mov	r2, #5
   22188:	bl	11ea0 <dcgettext@plt>
   2218c:	ldrd	r2, [r7, #56]	; 0x38
   22190:	str	r5, [sp]
   22194:	mov	fp, r0
   22198:	ldr	r0, [pc, #1748]	; 22874 <__assert_fail@plt+0x104e8>
   2219c:	bl	18b24 <__assert_fail@plt+0x6798>
   221a0:	ldr	r2, [r7, #96]	; 0x60
   221a4:	mov	r3, r5
   221a8:	str	r5, [sp]
   221ac:	mov	r9, r0
   221b0:	ldr	r0, [pc, #1724]	; 22874 <__assert_fail@plt+0x104e8>
   221b4:	bl	18b24 <__assert_fail@plt+0x6798>
   221b8:	mov	r1, r9
   221bc:	mov	r2, r0
   221c0:	mov	r0, fp
   221c4:	bl	11dbc <printf@plt>
   221c8:	b	21c6c <__assert_fail@plt+0xf8e0>
   221cc:	ldr	r3, [sp, #104]	; 0x68
   221d0:	ldr	r3, [r3, #1488]	; 0x5d0
   221d4:	cmp	r3, #0
   221d8:	bne	21c6c <__assert_fail@plt+0xf8e0>
   221dc:	b	21be0 <__assert_fail@plt+0xf854>
   221e0:	ldr	r3, [sp, #80]	; 0x50
   221e4:	add	r4, r4, r3
   221e8:	ldr	r3, [sp, #92]	; 0x5c
   221ec:	add	r3, r3, r4
   221f0:	str	r3, [sp, #56]	; 0x38
   221f4:	b	21d14 <__assert_fail@plt+0xf988>
   221f8:	mov	r1, #4
   221fc:	ldr	r4, [r9]
   22200:	mov	r0, r6
   22204:	blx	r4
   22208:	mov	r3, #0
   2220c:	mvn	r2, #0
   22210:	cmp	r1, r3
   22214:	cmpeq	r0, r2
   22218:	mov	r4, r0
   2221c:	mov	r5, r1
   22220:	beq	228ac <__assert_fail@plt+0x10520>
   22224:	adds	r3, r0, #16
   22228:	str	r3, [sp, #56]	; 0x38
   2222c:	sbc	r3, r1, #0
   22230:	str	r3, [sp, #60]	; 0x3c
   22234:	ldrd	r2, [sp, #56]	; 0x38
   22238:	cmp	r3, #0
   2223c:	cmpeq	r2, #14
   22240:	bls	22e60 <__assert_fail@plt+0x10ad4>
   22244:	add	r3, r0, #4
   22248:	add	r6, r6, r3
   2224c:	cmp	fp, r6
   22250:	movls	r3, #0
   22254:	movhi	r3, #1
   22258:	cmp	r4, #0
   2225c:	orrle	r3, r3, #1
   22260:	cmp	r3, #0
   22264:	bne	21dfc <__assert_fail@plt+0xfa70>
   22268:	cmp	r6, r8
   2226c:	add	r7, r7, #1
   22270:	bcc	21dd8 <__assert_fail@plt+0xfa4c>
   22274:	mov	r2, r7
   22278:	cmp	r2, #0
   2227c:	mov	sl, r8
   22280:	str	r7, [sp, #196]	; 0xc4
   22284:	mov	r8, r3
   22288:	ldr	r7, [sp, #64]	; 0x40
   2228c:	beq	22e3c <__assert_fail@plt+0x10ab0>
   22290:	ldr	r3, [pc, #1428]	; 2282c <__assert_fail@plt+0x104a0>
   22294:	cmp	r2, r3
   22298:	bhi	22e98 <__assert_fail@plt+0x10b0c>
   2229c:	ldr	r5, [sp, #196]	; 0xc4
   222a0:	add	r4, r5, r5, lsl #2
   222a4:	add	r4, r5, r4, lsl #1
   222a8:	lsl	r4, r4, #3
   222ac:	mov	r0, r4
   222b0:	bl	11f3c <xmalloc@plt>
   222b4:	mov	r2, r4
   222b8:	ldr	r4, [sp, #104]	; 0x68
   222bc:	mov	r1, r8
   222c0:	str	r0, [r4, #1440]	; 0x5a0
   222c4:	bl	12110 <memset@plt>
   222c8:	ldr	r3, [sp, #136]	; 0x88
   222cc:	str	r5, [r4, #1520]	; 0x5f0
   222d0:	cmp	r3, #0
   222d4:	beq	2182c <__assert_fail@plt+0xf4a0>
   222d8:	ldr	r4, [sp, #176]	; 0xb0
   222dc:	mov	r1, r7
   222e0:	mov	r0, r4
   222e4:	lsl	r3, r4, #3
   222e8:	mov	r5, r3
   222ec:	str	r3, [sp, #192]	; 0xc0
   222f0:	bl	19dd4 <__assert_fail@plt+0x7a48>
   222f4:	ldr	r2, [pc, #1256]	; 227e4 <__assert_fail@plt+0x10458>
   222f8:	add	r3, r5, r4
   222fc:	str	r2, [sp, #180]	; 0xb4
   22300:	add	r3, r2, r3, lsl #3
   22304:	ldr	r3, [r3, #16]
   22308:	cmp	r3, #0
   2230c:	beq	22c74 <__assert_fail@plt+0x108e8>
   22310:	ldr	r3, [pc, #1232]	; 227e8 <__assert_fail@plt+0x1045c>
   22314:	str	r8, [sp, #320]	; 0x140
   22318:	str	r3, [sp, #140]	; 0x8c
   2231c:	b	218d0 <__assert_fail@plt+0xf544>
   22320:	ldr	r3, [pc, #1408]	; 228a8 <__assert_fail@plt+0x1051c>
   22324:	mov	r0, r4
   22328:	mov	r1, #1
   2232c:	ldr	r3, [r3]
   22330:	blx	r3
   22334:	add	r4, r5, #4
   22338:	cmp	r6, r4
   2233c:	sub	r3, r0, #2
   22340:	clz	r3, r3
   22344:	lsr	r3, r3, #5
   22348:	str	r0, [sp, #152]	; 0x98
   2234c:	str	r3, [sp, #320]	; 0x140
   22350:	bhi	21a38 <__assert_fail@plt+0xf6ac>
   22354:	sub	r1, r6, sl
   22358:	sub	r3, r1, #1
   2235c:	cmp	r3, #7
   22360:	bls	21a3c <__assert_fail@plt+0xf6b0>
   22364:	ldr	r3, [sp, #88]	; 0x58
   22368:	add	sl, r4, r3
   2236c:	cmp	r6, sl
   22370:	mov	r3, #0
   22374:	str	r3, [sp, #108]	; 0x6c
   22378:	bls	21a7c <__assert_fail@plt+0xf6f0>
   2237c:	b	21ea4 <__assert_fail@plt+0xfb18>
   22380:	ldr	r1, [sp, #88]	; 0x58
   22384:	ldr	r3, [pc, #1308]	; 228a8 <__assert_fail@plt+0x1051c>
   22388:	mov	r0, r4
   2238c:	ldr	r3, [r3]
   22390:	blx	r3
   22394:	strd	r0, [sp, #168]	; 0xa8
   22398:	b	21b64 <__assert_fail@plt+0xf7d8>
   2239c:	bl	18e80 <__assert_fail@plt+0x6af4>
   223a0:	ldrd	r0, [sp, #144]	; 0x90
   223a4:	ldr	r2, [sp, #156]	; 0x9c
   223a8:	mov	r3, #0
   223ac:	cmp	r3, r1
   223b0:	cmpeq	r2, r0
   223b4:	bls	22b94 <__assert_fail@plt+0x10808>
   223b8:	ldr	r1, [sp, #192]	; 0xc0
   223bc:	ldr	r0, [sp, #176]	; 0xb0
   223c0:	add	r4, r1, r0
   223c4:	ldr	r1, [sp, #160]	; 0xa0
   223c8:	adds	r0, r2, r1
   223cc:	str	r0, [sp, #184]	; 0xb8
   223d0:	ldr	r0, [sp, #180]	; 0xb4
   223d4:	add	r4, r0, r4, lsl #3
   223d8:	ldr	r0, [sp, #164]	; 0xa4
   223dc:	adc	r3, r3, r0
   223e0:	str	r3, [sp, #188]	; 0xbc
   223e4:	ldrd	r8, [sp, #184]	; 0xb8
   223e8:	ldrd	r2, [r4, #32]
   223ec:	ldr	r0, [sp, #156]	; 0x9c
   223f0:	cmp	r9, r3
   223f4:	cmpeq	r8, r2
   223f8:	add	r5, r0, r1
   223fc:	bhi	22cec <__assert_fail@plt+0x10960>
   22400:	ldr	r3, [sp, #104]	; 0x68
   22404:	ldr	r3, [r3, #1108]	; 0x454
   22408:	cmp	r3, #0
   2240c:	bne	22428 <__assert_fail@plt+0x1009c>
   22410:	ldr	r3, [sp, #144]	; 0x90
   22414:	ldr	r0, [r4, #16]
   22418:	add	r3, r1, r3
   2241c:	add	r1, r0, r5
   22420:	add	r0, r0, r3
   22424:	bl	1b4f4 <__assert_fail@plt+0x9168>
   22428:	ldr	r3, [sp, #56]	; 0x38
   2242c:	cmp	sl, r3
   22430:	bcs	21d14 <__assert_fail@plt+0xf988>
   22434:	ldr	r2, [sp, #116]	; 0x74
   22438:	mov	fp, r6
   2243c:	mov	r1, #0
   22440:	add	r3, r2, r2, lsl #2
   22444:	ldr	r9, [sp, #56]	; 0x38
   22448:	add	r3, r2, r3, lsl #1
   2244c:	str	r1, [sp, #168]	; 0xa8
   22450:	lsl	r3, r3, #3
   22454:	str	r3, [sp, #164]	; 0xa4
   22458:	mvn	r3, #0
   2245c:	str	r3, [sp, #156]	; 0x9c
   22460:	add	r3, sp, #216	; 0xd8
   22464:	str	r1, [sp, #80]	; 0x50
   22468:	str	r3, [sp, #152]	; 0x98
   2246c:	str	r7, [sp, #56]	; 0x38
   22470:	mov	r3, r9
   22474:	mov	r2, #0
   22478:	mov	r0, sl
   2247c:	ldr	r1, [sp, #152]	; 0x98
   22480:	bl	1b3b0 <__assert_fail@plt+0x9024>
   22484:	ldr	r3, [sp, #216]	; 0xd8
   22488:	ldr	r2, [sp, #92]	; 0x5c
   2248c:	sub	r4, sl, r2
   22490:	add	sl, sl, r3
   22494:	subs	r8, r0, #0
   22498:	bne	225d4 <__assert_fail@plt+0x10248>
   2249c:	ldr	r3, [sp, #80]	; 0x50
   224a0:	cmp	r3, #0
   224a4:	cmpeq	fp, r9
   224a8:	beq	22764 <__assert_fail@plt+0x103d8>
   224ac:	ldr	r3, [sp, #136]	; 0x88
   224b0:	ldr	r1, [sp, #80]	; 0x50
   224b4:	cmp	r3, #0
   224b8:	sub	r5, r1, #1
   224bc:	bne	22510 <__assert_fail@plt+0x10184>
   224c0:	ldr	r3, [sp, #140]	; 0x8c
   224c4:	ldr	r3, [r3]
   224c8:	cmp	r3, r4
   224cc:	bhi	22510 <__assert_fail@plt+0x10184>
   224d0:	ldr	r3, [sp, #180]	; 0xb4
   224d4:	ldr	r2, [r3, #3096]	; 0xc18
   224d8:	cmn	r2, #1
   224dc:	movne	r3, #0
   224e0:	moveq	r3, #1
   224e4:	cmp	r2, r1
   224e8:	orrgt	r3, r3, #1
   224ec:	cmp	r3, #0
   224f0:	beq	22510 <__assert_fail@plt+0x10184>
   224f4:	mov	r2, #5
   224f8:	ldr	r1, [pc, #816]	; 22830 <__assert_fail@plt+0x104a4>
   224fc:	mov	r0, #0
   22500:	bl	11ea0 <dcgettext@plt>
   22504:	mov	r2, r4
   22508:	ldr	r1, [sp, #80]	; 0x50
   2250c:	bl	11dbc <printf@plt>
   22510:	cmp	r5, #0
   22514:	blt	22574 <__assert_fail@plt+0x101e8>
   22518:	ldr	r3, [sp, #140]	; 0x8c
   2251c:	ldr	r2, [sp, #156]	; 0x9c
   22520:	ldr	r3, [r3]
   22524:	cmp	r3, #0
   22528:	cmpne	r2, r5
   2252c:	bgt	21d8c <__assert_fail@plt+0xfa00>
   22530:	str	r5, [sp, #80]	; 0x50
   22534:	cmp	r9, sl
   22538:	bhi	22470 <__assert_fail@plt+0x100e4>
   2253c:	mov	r6, fp
   22540:	str	r9, [sp, #56]	; 0x38
   22544:	b	21d14 <__assert_fail@plt+0xf988>
   22548:	mov	r2, sl
   2254c:	cmp	r9, r2
   22550:	beq	2253c <__assert_fail@plt+0x101b0>
   22554:	ldr	r3, [sp, #136]	; 0x88
   22558:	cmp	r3, #0
   2255c:	bne	22570 <__assert_fail@plt+0x101e4>
   22560:	ldr	r3, [sp, #140]	; 0x8c
   22564:	ldr	r3, [r3]
   22568:	cmp	r4, r3
   2256c:	bcs	22bd4 <__assert_fail@plt+0x10848>
   22570:	mvn	r5, #0
   22574:	ldr	r3, [sp, #104]	; 0x68
   22578:	ldr	r3, [r3, #1540]	; 0x604
   2257c:	cmp	r3, #2
   22580:	bhi	22518 <__assert_fail@plt+0x1018c>
   22584:	mov	r2, #5
   22588:	ldr	r1, [pc, #676]	; 22834 <__assert_fail@plt+0x104a8>
   2258c:	mov	r0, #0
   22590:	bl	11ea0 <dcgettext@plt>
   22594:	ldr	r3, [sp, #112]	; 0x70
   22598:	mov	r1, r4
   2259c:	ldr	r2, [r3, #8]
   225a0:	bl	417d0 <warn@@Base>
   225a4:	ldr	r2, [sp, #104]	; 0x68
   225a8:	ldr	r3, [r2, #1540]	; 0x604
   225ac:	add	r3, r3, #1
   225b0:	cmp	r3, #3
   225b4:	str	r3, [r2, #1540]	; 0x604
   225b8:	bne	22518 <__assert_fail@plt+0x1018c>
   225bc:	mov	r2, #5
   225c0:	ldr	r1, [pc, #624]	; 22838 <__assert_fail@plt+0x104ac>
   225c4:	mov	r0, #0
   225c8:	bl	11ea0 <dcgettext@plt>
   225cc:	bl	417d0 <warn@@Base>
   225d0:	b	22518 <__assert_fail@plt+0x1018c>
   225d4:	ldr	r3, [sp, #136]	; 0x88
   225d8:	cmp	r3, #0
   225dc:	bne	228d4 <__assert_fail@plt+0x10548>
   225e0:	ldr	r3, [sp, #140]	; 0x8c
   225e4:	ldr	r3, [r3]
   225e8:	cmp	r3, #0
   225ec:	beq	2260c <__assert_fail@plt+0x10280>
   225f0:	cmp	r3, r4
   225f4:	ldrhi	r3, [sp, #136]	; 0x88
   225f8:	movhi	r5, r3
   225fc:	movhi	r7, r3
   22600:	bhi	228e0 <__assert_fail@plt+0x10554>
   22604:	ldreq	r3, [sp, #80]	; 0x50
   22608:	streq	r3, [sp, #156]	; 0x9c
   2260c:	ldr	r3, [sp, #180]	; 0xb4
   22610:	ldr	r5, [sp, #80]	; 0x50
   22614:	ldr	r3, [r3, #3096]	; 0xc18
   22618:	cmn	r3, #1
   2261c:	movne	r2, #0
   22620:	moveq	r2, #1
   22624:	cmp	r3, r5
   22628:	orrgt	r2, r2, #1
   2262c:	subs	r7, r2, #0
   22630:	beq	22c04 <__assert_fail@plt+0x10878>
   22634:	mov	r2, #5
   22638:	ldr	r1, [pc, #508]	; 2283c <__assert_fail@plt+0x104b0>
   2263c:	mov	r0, #0
   22640:	bl	11ea0 <dcgettext@plt>
   22644:	mov	r1, r5
   22648:	mov	r3, r8
   2264c:	mov	r2, r4
   22650:	bl	11dbc <printf@plt>
   22654:	str	r5, [sp, #168]	; 0xa8
   22658:	mov	r5, #1
   2265c:	b	228e0 <__assert_fail@plt+0x10554>
   22660:	mov	r1, #8
   22664:	ldr	r3, [pc, #572]	; 228a8 <__assert_fail@plt+0x1051c>
   22668:	mov	r0, r5
   2266c:	mov	r5, r2
   22670:	ldr	r3, [r3]
   22674:	blx	r3
   22678:	add	r4, r5, #2
   2267c:	mov	r3, #12
   22680:	str	r3, [sp, #128]	; 0x80
   22684:	mov	r8, r3
   22688:	cmp	r4, r6
   2268c:	mov	r3, #8
   22690:	mov	r9, #0
   22694:	str	r3, [sp, #88]	; 0x58
   22698:	strd	r0, [sp, #80]	; 0x50
   2269c:	bcc	226ec <__assert_fail@plt+0x10360>
   226a0:	cmp	r5, r6
   226a4:	bcs	21f7c <__assert_fail@plt+0xfbf0>
   226a8:	sub	r1, r6, r5
   226ac:	sub	r3, r1, #1
   226b0:	cmp	r3, #7
   226b4:	bhi	21f7c <__assert_fail@plt+0xfbf0>
   226b8:	b	21940 <__assert_fail@plt+0xf5b4>
   226bc:	mov	r0, sl
   226c0:	add	r2, sp, #208	; 0xd0
   226c4:	add	r1, sp, #200	; 0xc8
   226c8:	bl	41b48 <warn@@Base+0x378>
   226cc:	b	21b30 <__assert_fail@plt+0xf7a4>
   226d0:	add	r4, r5, #2
   226d4:	mov	r8, #4
   226d8:	cmp	r4, r6
   226dc:	str	r8, [sp, #88]	; 0x58
   226e0:	str	r8, [sp, #128]	; 0x80
   226e4:	mov	r9, #0
   226e8:	bcs	226a0 <__assert_fail@plt+0x10314>
   226ec:	mov	r1, #2
   226f0:	b	21940 <__assert_fail@plt+0xf5b4>
   226f4:	ldr	r3, [pc, #240]	; 227ec <__assert_fail@plt+0x10460>
   226f8:	ldr	r2, [sp, #320]	; 0x140
   226fc:	str	r3, [sp, #104]	; 0x68
   22700:	ldr	r3, [r3, #1488]	; 0x5d0
   22704:	orrs	r3, r2, r3
   22708:	beq	21db0 <__assert_fail@plt+0xfa24>
   2270c:	ldr	r4, [sp, #176]	; 0xb0
   22710:	mov	r0, r4
   22714:	lsl	r5, r4, #3
   22718:	str	r5, [sp, #192]	; 0xc0
   2271c:	bl	19dd4 <__assert_fail@plt+0x7a48>
   22720:	ldr	r2, [pc, #188]	; 227e4 <__assert_fail@plt+0x10458>
   22724:	add	r3, r5, r4
   22728:	str	r2, [sp, #180]	; 0xb4
   2272c:	add	r3, r2, r3, lsl #3
   22730:	ldr	r3, [r3, #16]
   22734:	cmp	r3, #0
   22738:	beq	22c74 <__assert_fail@plt+0x108e8>
   2273c:	ldr	r3, [sp, #92]	; 0x5c
   22740:	cmp	r3, sl
   22744:	movcs	r3, #0
   22748:	strcs	r3, [sp, #196]	; 0xc4
   2274c:	bcs	22ddc <__assert_fail@plt+0x10a50>
   22750:	ldr	r3, [pc, #144]	; 227e8 <__assert_fail@plt+0x1045c>
   22754:	str	r3, [sp, #140]	; 0x8c
   22758:	mov	r3, #0
   2275c:	str	r3, [sp, #196]	; 0xc4
   22760:	b	218d0 <__assert_fail@plt+0xf544>
   22764:	cmp	r9, sl
   22768:	bls	22548 <__assert_fail@plt+0x101bc>
   2276c:	ldrb	r3, [sl]
   22770:	cmp	r3, #0
   22774:	bne	22554 <__assert_fail@plt+0x101c8>
   22778:	add	r3, sl, #1
   2277c:	b	22790 <__assert_fail@plt+0x10404>
   22780:	ldrb	r2, [r2]
   22784:	add	r3, r3, #1
   22788:	cmp	r2, #0
   2278c:	bne	22554 <__assert_fail@plt+0x101c8>
   22790:	cmp	r3, r9
   22794:	mov	r2, r3
   22798:	bne	22780 <__assert_fail@plt+0x103f4>
   2279c:	b	2254c <__assert_fail@plt+0x101c0>
   227a0:	mov	r2, #5
   227a4:	ldr	r1, [pc, #148]	; 22840 <__assert_fail@plt+0x104b4>
   227a8:	mov	r0, #0
   227ac:	bl	11ea0 <dcgettext@plt>
   227b0:	mov	r1, #0
   227b4:	ldrd	r2, [sp, #64]	; 0x40
   227b8:	str	r1, [sp]
   227bc:	mov	r4, r0
   227c0:	ldr	r0, [pc, #172]	; 22874 <__assert_fail@plt+0x104e8>
   227c4:	bl	18b24 <__assert_fail@plt+0x6798>
   227c8:	ldr	r2, [sp, #76]	; 0x4c
   227cc:	mov	r1, r0
   227d0:	mov	r0, r4
   227d4:	bl	417d0 <warn@@Base>
   227d8:	b	21d14 <__assert_fail@plt+0xf988>
   227dc:	muleq	r6, r4, sp
   227e0:			; <UNDEFINED> instruction: 0x00069db8
   227e4:	andeq	r6, r6, r0, ror #10
   227e8:	ldrdeq	r9, [r6], -r8
   227ec:	andeq	r7, r6, r0, lsr r5
   227f0:	andeq	ip, r4, r8, lsl lr
   227f4:	andeq	sp, r4, r4, rrx
   227f8:	muleq	r4, r0, sp
   227fc:	andeq	ip, r4, r8, asr lr
   22800:	andeq	ip, r4, ip, ror lr
   22804:	andeq	ip, r4, r4, lsr sp
   22808:	andeq	ip, r4, ip, lsr #26
   2280c:	muleq	r4, ip, lr
   22810:			; <UNDEFINED> instruction: 0x0004ceb4
   22814:	andeq	ip, r4, ip, asr #29
   22818:	andeq	ip, r4, r4, lsl pc
   2281c:	andeq	ip, r4, r0, lsr pc
   22820:	andeq	ip, r4, ip, asr pc
   22824:	andeq	ip, r4, r8, lsl #31
   22828:			; <UNDEFINED> instruction: 0x0004cfb4
   2282c:	rsceq	fp, r8, #184320	; 0x2d000
   22830:	andeq	sp, r4, r4, asr r1
   22834:	andeq	sp, r4, r4, ror r1
   22838:			; <UNDEFINED> instruction: 0x0004d1b8
   2283c:	strdeq	sp, [r4], -r8
   22840:	andeq	sp, r4, ip, lsl r0
   22844:	andeq	sp, r4, r8, asr #5
   22848:	ldrdeq	sp, [r4], -r4
   2284c:	andeq	sp, r4, r0, lsr #6
   22850:	andeq	sp, r4, r4, lsr #1
   22854:	andeq	r9, r4, ip, asr r2
   22858:	strdeq	ip, [r4], -r8
   2285c:	muleq	r0, pc, ip	; <UNPREDICTABLE>
   22860:	andeq	sp, r4, r0, ror #5
   22864:	strdeq	sp, [r4], -ip
   22868:	andeq	ip, r4, r4, ror #29
   2286c:	strdeq	ip, [r4], -ip	; <UNPREDICTABLE>
   22870:	andeq	ip, r4, r0, ror #31
   22874:	andeq	r8, r4, r8, lsr #29
   22878:	andeq	sp, r4, ip, lsr #4
   2287c:	andeq	r7, r6, r0, lsr r4
   22880:	andeq	ip, r4, ip, lsr sp
   22884:	andeq	ip, r4, ip, asr sp
   22888:	andeq	sp, r4, r8, lsl r2
   2288c:	andeq	ip, r4, r0, asr #27
   22890:	andeq	r0, r0, fp, lsr #25
   22894:	andeq	r0, r5, ip, lsl #24
   22898:	andeq	r0, r0, ip, ror ip
   2289c:	ldrdeq	sl, [r4], -r8
   228a0:	andeq	sp, r4, r8, ror r2
   228a4:	ldrdeq	r9, [r4], -r8
   228a8:	andeq	r9, r6, r0, ror #27
   228ac:	add	r1, r6, #12
   228b0:	cmp	r8, r1
   228b4:	bhi	22bb4 <__assert_fail@plt+0x10828>
   228b8:	cmp	sl, r8
   228bc:	bcs	21df4 <__assert_fail@plt+0xfa68>
   228c0:	sub	r1, r8, sl
   228c4:	sub	r0, r1, #1
   228c8:	cmp	r0, #7
   228cc:	bhi	21df4 <__assert_fail@plt+0xfa68>
   228d0:	b	22bb8 <__assert_fail@plt+0x1082c>
   228d4:	mov	r3, #0
   228d8:	ldr	r5, [sp, #136]	; 0x88
   228dc:	mov	r7, r3
   228e0:	ldr	r3, [sp, #104]	; 0x68
   228e4:	ldr	r2, [r3, #1108]	; 0x454
   228e8:	cmp	r2, #0
   228ec:	str	r2, [sp, #144]	; 0x90
   228f0:	beq	22df4 <__assert_fail@plt+0x10a68>
   228f4:	ldr	r3, [r2]
   228f8:	cmp	r8, r3
   228fc:	beq	22920 <__assert_fail@plt+0x10594>
   22900:	mov	r3, r2
   22904:	ldr	r3, [r3, #20]
   22908:	cmp	r3, #0
   2290c:	beq	22df4 <__assert_fail@plt+0x10a68>
   22910:	ldr	r2, [r3]
   22914:	cmp	r2, r8
   22918:	bne	22904 <__assert_fail@plt+0x10578>
   2291c:	str	r3, [sp, #144]	; 0x90
   22920:	ldr	r3, [sp, #144]	; 0x90
   22924:	cmp	r7, #0
   22928:	ldr	r0, [r3, #4]
   2292c:	bne	22c2c <__assert_fail@plt+0x108a0>
   22930:	cmp	r0, #17
   22934:	beq	22c4c <__assert_fail@plt+0x108c0>
   22938:	ldr	r2, [sp, #104]	; 0x68
   2293c:	mov	r3, #0
   22940:	cmp	r0, #46	; 0x2e
   22944:	str	r3, [r2, #1496]	; 0x5d8
   22948:	beq	22c64 <__assert_fail@plt+0x108d8>
   2294c:	cmp	r0, #3
   22950:	beq	22c64 <__assert_fail@plt+0x108d8>
   22954:	ldr	r3, [sp, #104]	; 0x68
   22958:	ldr	r6, [r3, #1440]	; 0x5a0
   2295c:	cmp	r6, #0
   22960:	beq	22b70 <__assert_fail@plt+0x107e4>
   22964:	ldr	r3, [r3, #1520]	; 0x5f0
   22968:	ldr	r2, [sp, #116]	; 0x74
   2296c:	cmp	r3, r2
   22970:	bls	22b70 <__assert_fail@plt+0x107e4>
   22974:	ldr	r3, [sp, #164]	; 0xa4
   22978:	adds	r6, r6, r3
   2297c:	beq	22b70 <__assert_fail@plt+0x107e4>
   22980:	ldr	r2, [r6, #60]	; 0x3c
   22984:	ldr	r3, [r6, #68]	; 0x44
   22988:	cmp	r2, r3
   2298c:	bne	22edc <__assert_fail@plt+0x10b50>
   22990:	ldr	r3, [sp, #144]	; 0x90
   22994:	ldr	r4, [r3, #12]
   22998:	cmp	r4, #0
   2299c:	beq	22b54 <__assert_fail@plt+0x107c8>
   229a0:	ldr	r3, [r4]
   229a4:	cmp	r3, #0
   229a8:	beq	22b10 <__assert_fail@plt+0x10784>
   229ac:	ldr	r3, [sp, #136]	; 0x88
   229b0:	ldrb	r2, [sp, #108]	; 0x6c
   229b4:	eor	r8, r5, #1
   229b8:	orr	r8, r8, r3
   229bc:	mov	r3, #0
   229c0:	str	r9, [sp, #160]	; 0xa0
   229c4:	strd	r2, [sp, #120]	; 0x78
   229c8:	mov	r9, r7
   229cc:	b	22a5c <__assert_fail@plt+0x106d0>
   229d0:	ldr	r2, [r4, #8]
   229d4:	cmp	r8, #0
   229d8:	ldm	r4, {r5, r7}
   229dc:	asr	r3, r2, #31
   229e0:	beq	22a78 <__assert_fail@plt+0x106ec>
   229e4:	mov	r1, #32
   229e8:	str	r1, [sp, #52]	; 0x34
   229ec:	ldr	r1, [sp, #56]	; 0x38
   229f0:	mov	ip, #1
   229f4:	str	r1, [sp, #48]	; 0x30
   229f8:	ldr	r1, [sp, #112]	; 0x70
   229fc:	strd	sl, [sp]
   22a00:	str	r1, [sp, #44]	; 0x2c
   22a04:	ldr	r1, [sp, #76]	; 0x4c
   22a08:	str	r6, [sp, #36]	; 0x24
   22a0c:	str	r1, [sp, #32]
   22a10:	ldr	r1, [sp, #88]	; 0x58
   22a14:	str	ip, [sp, #40]	; 0x28
   22a18:	str	r1, [sp, #24]
   22a1c:	mov	r1, #0
   22a20:	str	r1, [sp, #28]
   22a24:	ldrd	r0, [sp, #120]	; 0x78
   22a28:	strd	r0, [sp, #16]
   22a2c:	ldrd	r0, [sp, #64]	; 0x40
   22a30:	strd	r0, [sp, #8]
   22a34:	mov	r1, r7
   22a38:	mov	r0, r5
   22a3c:	bl	1eb4c <__assert_fail@plt+0xc7c0>
   22a40:	ldr	r4, [r4, #12]
   22a44:	cmp	r4, #0
   22a48:	mov	sl, r0
   22a4c:	beq	22b04 <__assert_fail@plt+0x10778>
   22a50:	ldr	r3, [r4]
   22a54:	cmp	r3, #0
   22a58:	beq	22b04 <__assert_fail@plt+0x10778>
   22a5c:	cmp	r9, #0
   22a60:	beq	229d0 <__assert_fail@plt+0x10644>
   22a64:	ldr	r3, [sp, #92]	; 0x5c
   22a68:	ldr	r0, [pc, #-556]	; 22844 <__assert_fail@plt+0x104b8>
   22a6c:	sub	r1, sl, r3
   22a70:	bl	11dbc <printf@plt>
   22a74:	b	229d0 <__assert_fail@plt+0x10644>
   22a78:	mov	r0, r5
   22a7c:	strd	r2, [sp, #128]	; 0x80
   22a80:	bl	1a330 <__assert_fail@plt+0x7fa4>
   22a84:	mov	r1, r0
   22a88:	ldr	r0, [pc, #-584]	; 22848 <__assert_fail@plt+0x104bc>
   22a8c:	bl	11dbc <printf@plt>
   22a90:	mov	r3, #32
   22a94:	str	r3, [sp, #52]	; 0x34
   22a98:	ldr	r3, [sp, #56]	; 0x38
   22a9c:	strd	sl, [sp]
   22aa0:	str	r3, [sp, #48]	; 0x30
   22aa4:	ldr	r3, [sp, #112]	; 0x70
   22aa8:	mov	r1, r7
   22aac:	str	r3, [sp, #44]	; 0x2c
   22ab0:	ldr	r3, [sp, #76]	; 0x4c
   22ab4:	str	r8, [sp, #40]	; 0x28
   22ab8:	str	r3, [sp, #32]
   22abc:	ldr	r3, [sp, #88]	; 0x58
   22ac0:	str	r6, [sp, #36]	; 0x24
   22ac4:	str	r3, [sp, #24]
   22ac8:	mov	r3, #0
   22acc:	str	r3, [sp, #28]
   22ad0:	ldrd	r2, [sp, #120]	; 0x78
   22ad4:	mov	r0, r5
   22ad8:	strd	r2, [sp, #16]
   22adc:	ldrd	r2, [sp, #64]	; 0x40
   22ae0:	strd	r2, [sp, #8]
   22ae4:	ldrd	r2, [sp, #128]	; 0x80
   22ae8:	bl	1eb4c <__assert_fail@plt+0xc7c0>
   22aec:	mov	sl, r0
   22af0:	mov	r0, #10
   22af4:	bl	1211c <putchar@plt>
   22af8:	ldr	r4, [r4, #12]
   22afc:	cmp	r4, #0
   22b00:	bne	22a50 <__assert_fail@plt+0x106c4>
   22b04:	cmp	r6, #0
   22b08:	ldr	r9, [sp, #160]	; 0xa0
   22b0c:	beq	22b54 <__assert_fail@plt+0x107c8>
   22b10:	ldr	r1, [r6, #60]	; 0x3c
   22b14:	ldr	r2, [r6, #68]	; 0x44
   22b18:	sub	r3, r1, r2
   22b1c:	cmp	r3, #1
   22b20:	beq	22cb4 <__assert_fail@plt+0x10928>
   22b24:	cmp	r3, #0
   22b28:	beq	22b54 <__assert_fail@plt+0x107c8>
   22b2c:	cmn	r3, #1
   22b30:	bne	22ec8 <__assert_fail@plt+0x10b3c>
   22b34:	mov	r2, #5
   22b38:	ldr	r1, [pc, #-756]	; 2284c <__assert_fail@plt+0x104c0>
   22b3c:	mov	r0, #0
   22b40:	bl	11ea0 <dcgettext@plt>
   22b44:	bl	417d0 <warn@@Base>
   22b48:	ldr	r3, [r6, #68]	; 0x44
   22b4c:	sub	r3, r3, #1
   22b50:	str	r3, [r6, #68]	; 0x44
   22b54:	ldr	r3, [sp, #144]	; 0x90
   22b58:	ldr	r3, [r3, #8]
   22b5c:	cmp	r3, #0
   22b60:	ldrne	r3, [sp, #80]	; 0x50
   22b64:	addne	r3, r3, #1
   22b68:	strne	r3, [sp, #80]	; 0x50
   22b6c:	b	22534 <__assert_fail@plt+0x101a8>
   22b70:	ldr	r3, [sp, #144]	; 0x90
   22b74:	ldr	r4, [r3, #12]
   22b78:	cmp	r4, #0
   22b7c:	beq	22b54 <__assert_fail@plt+0x107c8>
   22b80:	ldr	r3, [r4]
   22b84:	cmp	r3, #0
   22b88:	movne	r6, #0
   22b8c:	bne	229ac <__assert_fail@plt+0x10620>
   22b90:	b	22b54 <__assert_fail@plt+0x107c8>
   22b94:	mov	r2, #5
   22b98:	ldr	r1, [pc, #-848]	; 22850 <__assert_fail@plt+0x104c4>
   22b9c:	mov	r0, #0
   22ba0:	bl	11ea0 <dcgettext@plt>
   22ba4:	ldr	r2, [sp, #156]	; 0x9c
   22ba8:	ldr	r1, [sp, #144]	; 0x90
   22bac:	bl	417d0 <warn@@Base>
   22bb0:	b	22428 <__assert_fail@plt+0x1009c>
   22bb4:	mov	r1, #8
   22bb8:	ldr	r3, [r9]
   22bbc:	mov	r0, sl
   22bc0:	blx	r3
   22bc4:	mov	r4, r0
   22bc8:	mov	r5, r1
   22bcc:	add	r3, r0, #12
   22bd0:	b	22248 <__assert_fail@plt+0xfebc>
   22bd4:	ldr	r3, [sp, #180]	; 0xb4
   22bd8:	ldr	r1, [sp, #80]	; 0x50
   22bdc:	ldr	r2, [r3, #3096]	; 0xc18
   22be0:	cmn	r2, #1
   22be4:	movne	r3, #0
   22be8:	moveq	r3, #1
   22bec:	cmp	r1, r2
   22bf0:	orrlt	r3, r3, #1
   22bf4:	cmp	r3, #0
   22bf8:	mvnne	r5, #0
   22bfc:	bne	224f4 <__assert_fail@plt+0x10168>
   22c00:	b	22570 <__assert_fail@plt+0x101e4>
   22c04:	ldr	r2, [sp, #168]	; 0xa8
   22c08:	cmp	r3, r2
   22c0c:	bgt	22e6c <__assert_fail@plt+0x10ae0>
   22c10:	ldr	r3, [sp, #80]	; 0x50
   22c14:	mov	r5, r7
   22c18:	str	r3, [sp, #168]	; 0xa8
   22c1c:	b	228e0 <__assert_fail@plt+0x10554>
   22c20:	mov	r0, #10
   22c24:	bl	1211c <putchar@plt>
   22c28:	b	21d8c <__assert_fail@plt+0xfa00>
   22c2c:	bl	1a2c4 <__assert_fail@plt+0x7f38>
   22c30:	mov	r1, r0
   22c34:	ldr	r0, [pc, #-1000]	; 22854 <__assert_fail@plt+0x104c8>
   22c38:	bl	11dbc <printf@plt>
   22c3c:	ldr	r3, [sp, #144]	; 0x90
   22c40:	ldr	r0, [r3, #4]
   22c44:	cmp	r0, #17
   22c48:	bne	22938 <__assert_fail@plt+0x105ac>
   22c4c:	ldr	r2, [sp, #104]	; 0x68
   22c50:	ldr	r1, [sp, #136]	; 0x88
   22c54:	mov	r3, #1
   22c58:	str	r1, [r2, #1500]	; 0x5dc
   22c5c:	str	r3, [r2, #1496]	; 0x5d8
   22c60:	b	22954 <__assert_fail@plt+0x105c8>
   22c64:	str	r3, [r2, #1492]	; 0x5d4
   22c68:	b	22954 <__assert_fail@plt+0x105c8>
   22c6c:	mov	r7, r1
   22c70:	b	219f0 <__assert_fail@plt+0xf664>
   22c74:	mov	r2, #5
   22c78:	ldr	r1, [pc, #-1064]	; 22858 <__assert_fail@plt+0x104cc>
   22c7c:	mov	r0, #0
   22c80:	bl	11ea0 <dcgettext@plt>
   22c84:	ldr	r2, [sp, #176]	; 0xb0
   22c88:	ldr	r3, [sp, #192]	; 0xc0
   22c8c:	add	r3, r3, r2
   22c90:	ldr	r2, [sp, #180]	; 0xb4
   22c94:	ldr	r1, [r2, r3, lsl #3]
   22c98:	bl	417d0 <warn@@Base>
   22c9c:	mov	r0, #0
   22ca0:	add	sp, sp, #284	; 0x11c
   22ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ca8:	ldr	r3, [sp, #136]	; 0x88
   22cac:	str	r3, [sp, #196]	; 0xc4
   22cb0:	b	2182c <__assert_fail@plt+0xf4a0>
   22cb4:	ldr	r0, [r6, #52]	; 0x34
   22cb8:	lsl	r3, r2, #3
   22cbc:	mvn	r4, #0
   22cc0:	add	r2, r2, #1
   22cc4:	mvn	r5, #0
   22cc8:	cmp	r2, r1
   22ccc:	strd	r4, [r0, r3]
   22cd0:	str	r2, [r6, #68]	; 0x44
   22cd4:	beq	22b54 <__assert_fail@plt+0x107c8>
   22cd8:	ldr	r3, [pc, #-1084]	; 228a4 <__assert_fail@plt+0x10518>
   22cdc:	ldr	r2, [pc, #-1160]	; 2285c <__assert_fail@plt+0x104d0>
   22ce0:	ldr	r1, [pc, #-1100]	; 2289c <__assert_fail@plt+0x10510>
   22ce4:	ldr	r0, [pc, #-1164]	; 22860 <__assert_fail@plt+0x104d4>
   22ce8:	bl	1238c <__assert_fail@plt>
   22cec:	mov	r2, #5
   22cf0:	ldr	r1, [pc, #-1172]	; 22864 <__assert_fail@plt+0x104d8>
   22cf4:	mov	r0, #0
   22cf8:	bl	11ea0 <dcgettext@plt>
   22cfc:	ldr	r2, [r4, #32]
   22d00:	mov	r1, r5
   22d04:	bl	417d0 <warn@@Base>
   22d08:	b	22428 <__assert_fail@plt+0x1009c>
   22d0c:	add	r3, sp, #216	; 0xd8
   22d10:	mov	r2, #5
   22d14:	ldr	r1, [pc, #-1204]	; 22868 <__assert_fail@plt+0x104dc>
   22d18:	mov	r0, r5
   22d1c:	mov	fp, r3
   22d20:	bl	11ea0 <dcgettext@plt>
   22d24:	ldrd	r2, [sp, #208]	; 0xd0
   22d28:	str	fp, [sp]
   22d2c:	mov	r9, r0
   22d30:	ldrd	r0, [sp, #200]	; 0xc8
   22d34:	bl	1a73c <__assert_fail@plt+0x83b0>
   22d38:	mov	r1, r0
   22d3c:	mov	r0, r9
   22d40:	bl	11dbc <printf@plt>
   22d44:	ldr	r1, [pc, #-1248]	; 2286c <__assert_fail@plt+0x104e0>
   22d48:	mov	r2, #5
   22d4c:	mov	r0, r5
   22d50:	bl	11ea0 <dcgettext@plt>
   22d54:	str	r5, [sp]
   22d58:	ldrd	r2, [sp, #168]	; 0xa8
   22d5c:	mov	r9, r0
   22d60:	ldr	r0, [pc, #-1268]	; 22874 <__assert_fail@plt+0x104e8>
   22d64:	bl	18b24 <__assert_fail@plt+0x6798>
   22d68:	mov	r1, r0
   22d6c:	mov	r0, r9
   22d70:	bl	11dbc <printf@plt>
   22d74:	b	22078 <__assert_fail@plt+0xfcec>
   22d78:	ldr	r3, [sp, #112]	; 0x70
   22d7c:	add	r1, r3, #12
   22d80:	add	r0, r3, #8
   22d84:	bl	1a7b4 <__assert_fail@plt+0x8428>
   22d88:	b	218bc <__assert_fail@plt+0xf530>
   22d8c:	mov	r2, #5
   22d90:	ldr	r1, [pc, #-1320]	; 22870 <__assert_fail@plt+0x104e4>
   22d94:	mov	r0, #0
   22d98:	bl	11ea0 <dcgettext@plt>
   22d9c:	ldr	r3, [sp, #112]	; 0x70
   22da0:	mov	r1, #0
   22da4:	ldr	r5, [r3, #8]
   22da8:	ldrd	r2, [sp, #80]	; 0x50
   22dac:	str	r1, [sp]
   22db0:	mov	r4, r0
   22db4:	ldr	r0, [pc, #-1352]	; 22874 <__assert_fail@plt+0x104e8>
   22db8:	bl	18b24 <__assert_fail@plt+0x6798>
   22dbc:	ldr	ip, [sp, #116]	; 0x74
   22dc0:	ldr	r2, [sp, #120]	; 0x78
   22dc4:	mov	r1, r5
   22dc8:	str	ip, [sp, #196]	; 0xc4
   22dcc:	mov	r3, r0
   22dd0:	mov	r0, r4
   22dd4:	bl	417d0 <warn@@Base>
   22dd8:	b	21d2c <__assert_fail@plt+0xf9a0>
   22ddc:	ldr	r3, [sp, #104]	; 0x68
   22de0:	ldr	r2, [sp, #320]	; 0x140
   22de4:	ldr	r3, [r3, #1488]	; 0x5d0
   22de8:	orrs	r3, r2, r3
   22dec:	bne	21d8c <__assert_fail@plt+0xfa00>
   22df0:	b	21d68 <__assert_fail@plt+0xf9dc>
   22df4:	cmp	r7, #0
   22df8:	mov	fp, r4
   22dfc:	bne	22e24 <__assert_fail@plt+0x10a98>
   22e00:	mov	r2, #5
   22e04:	ldr	r1, [pc, #-1428]	; 22878 <__assert_fail@plt+0x104ec>
   22e08:	mov	r0, #0
   22e0c:	bl	11ea0 <dcgettext@plt>
   22e10:	mov	r2, r8
   22e14:	mov	r1, fp
   22e18:	bl	417d0 <warn@@Base>
   22e1c:	mov	r0, #0
   22e20:	b	21d90 <__assert_fail@plt+0xfa04>
   22e24:	mov	r0, #10
   22e28:	bl	1211c <putchar@plt>
   22e2c:	ldr	r3, [pc, #-1464]	; 2287c <__assert_fail@plt+0x104f0>
   22e30:	ldr	r0, [r3]
   22e34:	bl	11de0 <fflush@plt>
   22e38:	b	22e00 <__assert_fail@plt+0x10a74>
   22e3c:	mov	r2, #5
   22e40:	ldr	r1, [pc, #-1480]	; 22880 <__assert_fail@plt+0x104f4>
   22e44:	mov	r0, #0
   22e48:	bl	11ea0 <dcgettext@plt>
   22e4c:	ldr	r3, [sp, #112]	; 0x70
   22e50:	ldr	r1, [r3, #8]
   22e54:	bl	412ac <error@@Base>
   22e58:	mov	r0, #0
   22e5c:	b	21d90 <__assert_fail@plt+0xfa04>
   22e60:	mov	r2, #5
   22e64:	ldr	r1, [pc, #-1512]	; 22884 <__assert_fail@plt+0x104f8>
   22e68:	b	21e04 <__assert_fail@plt+0xfa78>
   22e6c:	mov	r2, #5
   22e70:	ldr	r1, [pc, #-1520]	; 22888 <__assert_fail@plt+0x104fc>
   22e74:	mov	r0, r7
   22e78:	bl	11ea0 <dcgettext@plt>
   22e7c:	ldr	r6, [sp, #80]	; 0x50
   22e80:	mov	r2, r4
   22e84:	mov	r1, r6
   22e88:	bl	11dbc <printf@plt>
   22e8c:	mov	r5, r7
   22e90:	str	r6, [sp, #168]	; 0xa8
   22e94:	b	228e0 <__assert_fail@plt+0x10554>
   22e98:	ldr	r4, [sp, #104]	; 0x68
   22e9c:	mov	r2, #5
   22ea0:	ldr	r1, [pc, #-1564]	; 2288c <__assert_fail@plt+0x10500>
   22ea4:	mov	r0, r8
   22ea8:	str	r8, [r4, #1440]	; 0x5a0
   22eac:	bl	11ea0 <dcgettext@plt>
   22eb0:	ldr	r1, [sp, #196]	; 0xc4
   22eb4:	bl	412ac <error@@Base>
   22eb8:	str	r8, [r4, #1488]	; 0x5d0
   22ebc:	str	r8, [r4, #1520]	; 0x5f0
   22ec0:	mov	r0, r8
   22ec4:	b	21d90 <__assert_fail@plt+0xfa04>
   22ec8:	ldr	r3, [pc, #-1580]	; 228a4 <__assert_fail@plt+0x10518>
   22ecc:	ldr	r2, [pc, #-1604]	; 22890 <__assert_fail@plt+0x10504>
   22ed0:	ldr	r1, [pc, #-1596]	; 2289c <__assert_fail@plt+0x10510>
   22ed4:	ldr	r0, [pc, #-1608]	; 22894 <__assert_fail@plt+0x10508>
   22ed8:	bl	1238c <__assert_fail@plt>
   22edc:	ldr	r3, [pc, #-1600]	; 228a4 <__assert_fail@plt+0x10518>
   22ee0:	ldr	r2, [pc, #-1616]	; 22898 <__assert_fail@plt+0x1050c>
   22ee4:	ldr	r1, [pc, #-1616]	; 2289c <__assert_fail@plt+0x10510>
   22ee8:	ldr	r0, [pc, #-1616]	; 228a0 <__assert_fail@plt+0x10514>
   22eec:	bl	1238c <__assert_fail@plt>
   22ef0:	ldr	r3, [pc, #-1616]	; 228a8 <__assert_fail@plt+0x1051c>
   22ef4:	mov	r0, r4
   22ef8:	add	r4, r5, #4
   22efc:	ldr	r3, [r3]
   22f00:	blx	r3
   22f04:	cmp	r6, r4
   22f08:	sub	r3, r0, #2
   22f0c:	clz	r3, r3
   22f10:	lsr	r3, r3, #5
   22f14:	str	r0, [sp, #152]	; 0x98
   22f18:	str	r3, [sp, #320]	; 0x140
   22f1c:	bhi	21a38 <__assert_fail@plt+0xf6ac>
   22f20:	b	22364 <__assert_fail@plt+0xffd8>
   22f24:	push	{lr}		; (str lr, [sp, #-4]!)
   22f28:	sub	sp, sp, #12
   22f2c:	mov	r3, #1
   22f30:	ldr	r2, [r0, #40]	; 0x28
   22f34:	str	r3, [sp]
   22f38:	mov	r3, #0
   22f3c:	bl	217dc <__assert_fail@plt+0xf450>
   22f40:	add	sp, sp, #12
   22f44:	pop	{pc}		; (ldr pc, [sp], #4)
   22f48:	b	22f24 <__assert_fail@plt+0x10b98>
   22f4c:	push	{lr}		; (str lr, [sp, #-4]!)
   22f50:	sub	sp, sp, #12
   22f54:	mov	r3, #0
   22f58:	ldr	r2, [r0, #40]	; 0x28
   22f5c:	str	r3, [sp]
   22f60:	bl	217dc <__assert_fail@plt+0xf450>
   22f64:	add	sp, sp, #12
   22f68:	pop	{pc}		; (ldr pc, [sp], #4)
   22f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f70:	sub	sp, sp, #164	; 0xa4
   22f74:	ldr	ip, [r0, #16]
   22f78:	ldr	r3, [r0, #32]
   22f7c:	str	r0, [sp, #124]	; 0x7c
   22f80:	add	r6, ip, r3
   22f84:	mov	r4, r1
   22f88:	add	r1, r0, #12
   22f8c:	add	r0, r0, #8
   22f90:	mov	r5, ip
   22f94:	str	ip, [sp, #120]	; 0x78
   22f98:	str	r6, [sp, #132]	; 0x84
   22f9c:	bl	1a7b4 <__assert_fail@plt+0x8428>
   22fa0:	mov	r1, r4
   22fa4:	mov	r0, #10
   22fa8:	bl	19dd4 <__assert_fail@plt+0x7a48>
   22fac:	cmp	r5, r6
   22fb0:	bcs	23b40 <__assert_fail@plt+0x117b4>
   22fb4:	ldr	r3, [sp, #120]	; 0x78
   22fb8:	ldr	r2, [sp, #132]	; 0x84
   22fbc:	add	r5, r3, #4
   22fc0:	cmp	r5, r2
   22fc4:	bcc	23064 <__assert_fail@plt+0x10cd8>
   22fc8:	sub	r1, r2, r3
   22fcc:	sub	r3, r1, #1
   22fd0:	cmp	r3, #7
   22fd4:	movhi	r3, #4
   22fd8:	strhi	r3, [sp, #76]	; 0x4c
   22fdc:	bls	23068 <__assert_fail@plt+0x10cdc>
   22fe0:	ldr	r3, [sp, #124]	; 0x7c
   22fe4:	mov	r1, #0
   22fe8:	mov	r8, #0
   22fec:	ldr	r0, [r3, #16]
   22ff0:	mov	r9, #0
   22ff4:	sub	r0, r5, r0
   22ff8:	mov	ip, #0
   22ffc:	str	r5, [sp, #72]	; 0x48
   23000:	ldr	r3, [sp, #124]	; 0x7c
   23004:	ldrd	r2, [r3, #32]
   23008:	cmp	r3, r1
   2300c:	cmpeq	r2, r0
   23010:	bcc	230dc <__assert_fail@plt+0x10d50>
   23014:	ldr	r3, [sp, #72]	; 0x48
   23018:	add	r7, r5, #2
   2301c:	cmp	r7, r3
   23020:	bcc	2313c <__assert_fail@plt+0x10db0>
   23024:	cmp	r5, r3
   23028:	bcc	23f50 <__assert_fail@plt+0x11bc4>
   2302c:	ldr	r1, [pc, #4064]	; 24014 <__assert_fail@plt+0x11c88>
   23030:	mov	r2, #5
   23034:	mov	r0, #0
   23038:	bl	11ea0 <dcgettext@plt>
   2303c:	mov	r1, #0
   23040:	bl	11dbc <printf@plt>
   23044:	mov	r2, #5
   23048:	ldr	r1, [pc, #4040]	; 24018 <__assert_fail@plt+0x11c8c>
   2304c:	mov	r0, #0
   23050:	bl	11ea0 <dcgettext@plt>
   23054:	bl	417d0 <warn@@Base>
   23058:	mov	r0, #0
   2305c:	add	sp, sp, #164	; 0xa4
   23060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23064:	mov	r1, #4
   23068:	ldr	r3, [pc, #4012]	; 2401c <__assert_fail@plt+0x11c90>
   2306c:	ldr	r0, [sp, #120]	; 0x78
   23070:	str	r3, [sp, #104]	; 0x68
   23074:	ldr	r3, [r3]
   23078:	blx	r3
   2307c:	mov	r3, #0
   23080:	mvn	r2, #0
   23084:	cmp	r1, r3
   23088:	cmpeq	r0, r2
   2308c:	movne	r3, #4
   23090:	mov	r8, r0
   23094:	mov	r9, r1
   23098:	strne	r3, [sp, #76]	; 0x4c
   2309c:	beq	23f98 <__assert_fail@plt+0x11c0c>
   230a0:	ldr	r3, [sp, #124]	; 0x7c
   230a4:	mov	ip, r8
   230a8:	ldr	r2, [r3, #16]
   230ac:	mov	r3, #0
   230b0:	sub	r2, r5, r2
   230b4:	adds	r0, r2, r8
   230b8:	adcs	r1, r3, r9
   230bc:	add	r3, r5, r8
   230c0:	mov	r2, #0
   230c4:	str	r3, [sp, #72]	; 0x48
   230c8:	movcs	r2, #1
   230cc:	mov	r3, #0
   230d0:	movcs	r3, #0
   230d4:	orrs	r3, r2, r3
   230d8:	beq	23000 <__assert_fail@plt+0x10c74>
   230dc:	mov	r2, #5
   230e0:	ldr	r1, [pc, #3896]	; 24020 <__assert_fail@plt+0x11c94>
   230e4:	mov	r0, #0
   230e8:	bl	11ea0 <dcgettext@plt>
   230ec:	ldr	r1, [sp, #124]	; 0x7c
   230f0:	mov	r4, #0
   230f4:	mov	r2, r8
   230f8:	ldr	r5, [r1, #16]
   230fc:	ldr	r7, [r1, #8]
   23100:	mov	r3, r9
   23104:	str	r4, [sp]
   23108:	mov	r6, r0
   2310c:	ldr	r0, [sp, #120]	; 0x78
   23110:	sub	r5, r0, r5
   23114:	ldr	r0, [pc, #3848]	; 24024 <__assert_fail@plt+0x11c98>
   23118:	bl	18b24 <__assert_fail@plt+0x6798>
   2311c:	mov	r2, r5
   23120:	mov	r1, r7
   23124:	mov	r3, r0
   23128:	mov	r0, r6
   2312c:	bl	417d0 <warn@@Base>
   23130:	mov	r0, r4
   23134:	add	sp, sp, #164	; 0xa4
   23138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2313c:	mov	r1, #2
   23140:	ldr	r3, [pc, #3796]	; 2401c <__assert_fail@plt+0x11c90>
   23144:	mov	r0, r5
   23148:	str	r3, [sp, #104]	; 0x68
   2314c:	ldr	r3, [r3]
   23150:	blx	r3
   23154:	mov	r2, #5
   23158:	ldr	r1, [pc, #3764]	; 24014 <__assert_fail@plt+0x11c88>
   2315c:	uxth	r4, r0
   23160:	mov	r0, #0
   23164:	bl	11ea0 <dcgettext@plt>
   23168:	mov	r1, r4
   2316c:	bl	11dbc <printf@plt>
   23170:	cmp	r4, #5
   23174:	bne	23044 <__assert_fail@plt+0x10cb8>
   23178:	ldr	r3, [sp, #72]	; 0x48
   2317c:	add	r6, r5, #4
   23180:	cmp	r6, r3
   23184:	bcc	23ee0 <__assert_fail@plt+0x11b54>
   23188:	cmp	r7, r3
   2318c:	bcs	231a0 <__assert_fail@plt+0x10e14>
   23190:	sub	r3, r8, #3
   23194:	cmp	r3, #7
   23198:	subls	r1, r8, #2
   2319c:	bls	23ee4 <__assert_fail@plt+0x11b58>
   231a0:	ldr	r3, [sp, #72]	; 0x48
   231a4:	add	r4, r5, #8
   231a8:	cmp	r4, r3
   231ac:	bcs	231d0 <__assert_fail@plt+0x10e44>
   231b0:	mov	r1, #4
   231b4:	ldr	r3, [sp, #104]	; 0x68
   231b8:	mov	r0, r6
   231bc:	ldr	r3, [r3]
   231c0:	blx	r3
   231c4:	subs	r3, r0, #0
   231c8:	mov	sl, r3
   231cc:	bne	231ec <__assert_fail@plt+0x10e60>
   231d0:	mov	r2, #5
   231d4:	ldr	r1, [pc, #3660]	; 24028 <__assert_fail@plt+0x11c9c>
   231d8:	mov	r0, #0
   231dc:	bl	11ea0 <dcgettext@plt>
   231e0:	bl	417d0 <warn@@Base>
   231e4:	mov	r3, #0
   231e8:	mov	sl, r3
   231ec:	ldr	r3, [sp, #72]	; 0x48
   231f0:	add	r7, r5, #12
   231f4:	cmp	r7, r3
   231f8:	bcc	23e94 <__assert_fail@plt+0x11b08>
   231fc:	cmp	r4, r3
   23200:	bcs	23214 <__assert_fail@plt+0x10e88>
   23204:	sub	r1, r3, r4
   23208:	sub	r3, r1, #1
   2320c:	cmp	r3, #7
   23210:	bls	23e98 <__assert_fail@plt+0x11b0c>
   23214:	ldr	r3, [sp, #72]	; 0x48
   23218:	add	r6, r5, #16
   2321c:	cmp	r3, r6
   23220:	mov	r3, #0
   23224:	str	r3, [sp, #56]	; 0x38
   23228:	bhi	23e48 <__assert_fail@plt+0x11abc>
   2322c:	ldr	r3, [sp, #72]	; 0x48
   23230:	add	r4, r5, #20
   23234:	cmp	r3, r4
   23238:	mov	r9, #0
   2323c:	bhi	23d1c <__assert_fail@plt+0x11990>
   23240:	ldr	r3, [sp, #72]	; 0x48
   23244:	add	r7, r5, #24
   23248:	cmp	r3, r7
   2324c:	mov	r3, #0
   23250:	str	r3, [sp, #92]	; 0x5c
   23254:	str	r3, [sp, #68]	; 0x44
   23258:	bhi	23dd0 <__assert_fail@plt+0x11a44>
   2325c:	ldr	r3, [sp, #72]	; 0x48
   23260:	add	r6, r5, #28
   23264:	cmp	r6, r3
   23268:	mov	r3, #0
   2326c:	str	r3, [sp, #88]	; 0x58
   23270:	str	r3, [sp, #84]	; 0x54
   23274:	str	r3, [sp, #128]	; 0x80
   23278:	bcc	23da0 <__assert_fail@plt+0x11a14>
   2327c:	ldr	r3, [sp, #72]	; 0x48
   23280:	add	r4, r5, #32
   23284:	cmp	r4, r3
   23288:	bcs	23f2c <__assert_fail@plt+0x11ba0>
   2328c:	mov	r1, #4
   23290:	mov	r3, #0
   23294:	str	r3, [sp, #80]	; 0x50
   23298:	ldr	r3, [sp, #104]	; 0x68
   2329c:	mov	r0, r6
   232a0:	ldr	r3, [r3]
   232a4:	blx	r3
   232a8:	tst	r0, #3
   232ac:	mov	r8, r0
   232b0:	beq	232d8 <__assert_fail@plt+0x10f4c>
   232b4:	mov	r2, #5
   232b8:	ldr	r1, [pc, #3436]	; 2402c <__assert_fail@plt+0x11ca0>
   232bc:	mov	r0, #0
   232c0:	bl	11ea0 <dcgettext@plt>
   232c4:	mov	r1, r8
   232c8:	bl	417d0 <warn@@Base>
   232cc:	rsb	r3, r8, #0
   232d0:	and	r3, r3, #3
   232d4:	add	r8, r8, r3
   232d8:	mov	r2, #5
   232dc:	ldr	r1, [pc, #3404]	; 24030 <__assert_fail@plt+0x11ca4>
   232e0:	mov	r0, #0
   232e4:	bl	11ea0 <dcgettext@plt>
   232e8:	bl	11dbc <printf@plt>
   232ec:	cmp	r8, #0
   232f0:	beq	240e4 <__assert_fail@plt+0x11d58>
   232f4:	mov	fp, r9
   232f8:	ldr	r5, [pc, #3380]	; 24034 <__assert_fail@plt+0x11ca8>
   232fc:	add	r8, r4, r8
   23300:	ldr	r7, [sp, #72]	; 0x48
   23304:	ldr	r9, [sp, #104]	; 0x68
   23308:	b	2333c <__assert_fail@plt+0x10fb0>
   2330c:	cmp	r7, r4
   23310:	bls	23324 <__assert_fail@plt+0x10f98>
   23314:	sub	r1, r7, r4
   23318:	sub	r3, r1, #1
   2331c:	cmp	r3, #7
   23320:	bls	2334c <__assert_fail@plt+0x10fc0>
   23324:	mov	r1, #0
   23328:	mov	r0, r5
   2332c:	bl	11dbc <printf@plt>
   23330:	cmp	r8, r6
   23334:	mov	r4, r6
   23338:	beq	23360 <__assert_fail@plt+0x10fd4>
   2333c:	add	r6, r4, #1
   23340:	cmp	r6, r7
   23344:	bcs	2330c <__assert_fail@plt+0x10f80>
   23348:	mov	r1, #1
   2334c:	mov	r0, r4
   23350:	ldr	r3, [r9]
   23354:	blx	r3
   23358:	uxtb	r1, r0
   2335c:	b	23328 <__assert_fail@plt+0x10f9c>
   23360:	mov	r9, fp
   23364:	ldr	r3, [pc, #3276]	; 24038 <__assert_fail@plt+0x11cac>
   23368:	mov	r0, #10
   2336c:	mov	r4, r3
   23370:	ldr	r1, [r3]
   23374:	bl	12254 <putc@plt>
   23378:	ldr	r1, [r4]
   2337c:	mov	r0, #10
   23380:	bl	12254 <putc@plt>
   23384:	mov	r2, #5
   23388:	ldr	r1, [pc, #3244]	; 2403c <__assert_fail@plt+0x11cb0>
   2338c:	mov	r0, #0
   23390:	bl	11ea0 <dcgettext@plt>
   23394:	bl	11dbc <printf@plt>
   23398:	cmp	sl, #0
   2339c:	beq	2343c <__assert_fail@plt+0x110b0>
   233a0:	mov	r0, r8
   233a4:	str	r8, [sp, #96]	; 0x60
   233a8:	ldr	r7, [pc, #3216]	; 24040 <__assert_fail@plt+0x11cb4>
   233ac:	mov	r4, #0
   233b0:	ldr	r6, [sp, #76]	; 0x4c
   233b4:	ldr	r8, [sp, #72]	; 0x48
   233b8:	str	r9, [sp, #100]	; 0x64
   233bc:	ldr	fp, [sp, #104]	; 0x68
   233c0:	b	23410 <__assert_fail@plt+0x11084>
   233c4:	sub	r3, r5, r6
   233c8:	cmp	r8, r3
   233cc:	bls	233e0 <__assert_fail@plt+0x11054>
   233d0:	sub	r1, r8, r0
   233d4:	sub	r3, r1, #1
   233d8:	cmp	r3, #7
   233dc:	bls	23420 <__assert_fail@plt+0x11094>
   233e0:	mov	r9, #0
   233e4:	mov	r2, #5
   233e8:	mov	r1, r7
   233ec:	mov	r0, #0
   233f0:	bl	11ea0 <dcgettext@plt>
   233f4:	mov	r1, r4
   233f8:	mov	r2, r9
   233fc:	add	r4, r4, #1
   23400:	bl	11dbc <printf@plt>
   23404:	cmp	sl, r4
   23408:	mov	r0, r5
   2340c:	beq	23430 <__assert_fail@plt+0x110a4>
   23410:	add	r5, r0, r6
   23414:	cmp	r5, r8
   23418:	bcs	233c4 <__assert_fail@plt+0x11038>
   2341c:	mov	r1, r6
   23420:	ldr	r3, [fp]
   23424:	blx	r3
   23428:	mov	r9, r0
   2342c:	b	233e4 <__assert_fail@plt+0x11058>
   23430:	ldrd	r8, [sp, #96]	; 0x60
   23434:	ldr	r2, [sp, #76]	; 0x4c
   23438:	mla	r8, r2, sl, r8
   2343c:	ldr	r3, [pc, #3060]	; 24038 <__assert_fail@plt+0x11cac>
   23440:	mov	r0, #10
   23444:	ldr	r1, [r3]
   23448:	bl	12254 <putc@plt>
   2344c:	mov	r2, #5
   23450:	ldr	r1, [pc, #3052]	; 24044 <__assert_fail@plt+0x11cb8>
   23454:	mov	r0, #0
   23458:	bl	11ea0 <dcgettext@plt>
   2345c:	bl	11dbc <printf@plt>
   23460:	ldr	r3, [sp, #56]	; 0x38
   23464:	cmp	r3, #0
   23468:	beq	2350c <__assert_fail@plt+0x11180>
   2346c:	mov	r0, r8
   23470:	mov	sl, r8
   23474:	ldr	r7, [pc, #3012]	; 24040 <__assert_fail@plt+0x11cb4>
   23478:	mov	r4, #0
   2347c:	ldr	r6, [sp, #76]	; 0x4c
   23480:	ldr	r8, [sp, #72]	; 0x48
   23484:	str	r9, [sp, #96]	; 0x60
   23488:	ldr	fp, [sp, #104]	; 0x68
   2348c:	b	234e0 <__assert_fail@plt+0x11154>
   23490:	sub	r3, r5, r6
   23494:	cmp	r8, r3
   23498:	bls	234ac <__assert_fail@plt+0x11120>
   2349c:	sub	r1, r8, r0
   234a0:	sub	r3, r1, #1
   234a4:	cmp	r3, #7
   234a8:	bls	234f0 <__assert_fail@plt+0x11164>
   234ac:	mov	r9, #0
   234b0:	mov	r2, #5
   234b4:	mov	r1, r7
   234b8:	mov	r0, #0
   234bc:	bl	11ea0 <dcgettext@plt>
   234c0:	mov	r1, r4
   234c4:	mov	r2, r9
   234c8:	bl	11dbc <printf@plt>
   234cc:	ldr	r3, [sp, #56]	; 0x38
   234d0:	add	r4, r4, #1
   234d4:	cmp	r4, r3
   234d8:	mov	r0, r5
   234dc:	beq	23500 <__assert_fail@plt+0x11174>
   234e0:	add	r5, r0, r6
   234e4:	cmp	r5, r8
   234e8:	bcs	23490 <__assert_fail@plt+0x11104>
   234ec:	mov	r1, r6
   234f0:	ldr	r3, [fp]
   234f4:	blx	r3
   234f8:	mov	r9, r0
   234fc:	b	234b0 <__assert_fail@plt+0x11124>
   23500:	ldr	r3, [sp, #76]	; 0x4c
   23504:	ldr	r9, [sp, #96]	; 0x60
   23508:	mla	r8, r3, r4, sl
   2350c:	ldr	r3, [pc, #2852]	; 24038 <__assert_fail@plt+0x11cac>
   23510:	mov	r0, #10
   23514:	ldr	r1, [r3]
   23518:	bl	12254 <putc@plt>
   2351c:	mov	r2, #5
   23520:	ldr	r1, [pc, #2848]	; 24048 <__assert_fail@plt+0x11cbc>
   23524:	mov	r0, #0
   23528:	bl	11ea0 <dcgettext@plt>
   2352c:	bl	11dbc <printf@plt>
   23530:	cmp	r9, #0
   23534:	beq	235e0 <__assert_fail@plt+0x11254>
   23538:	mov	r0, r8
   2353c:	mov	sl, r8
   23540:	mov	r6, #0
   23544:	ldr	r7, [sp, #72]	; 0x48
   23548:	ldr	r8, [sp, #104]	; 0x68
   2354c:	b	235b8 <__assert_fail@plt+0x1122c>
   23550:	cmp	r7, r0
   23554:	bls	23568 <__assert_fail@plt+0x111dc>
   23558:	sub	r1, r7, r0
   2355c:	sub	r2, r1, #1
   23560:	cmp	r2, #7
   23564:	bls	235c8 <__assert_fail@plt+0x1123c>
   23568:	mov	r4, #0
   2356c:	mov	r5, #0
   23570:	mov	r2, #5
   23574:	ldr	r1, [pc, #2768]	; 2404c <__assert_fail@plt+0x11cc0>
   23578:	mov	r0, #0
   2357c:	bl	11ea0 <dcgettext@plt>
   23580:	mov	r1, r6
   23584:	bl	11dbc <printf@plt>
   23588:	mov	r0, r4
   2358c:	mov	r1, r5
   23590:	mov	r2, #8
   23594:	bl	18e4c <__assert_fail@plt+0x6ac0>
   23598:	ldr	r3, [pc, #2712]	; 24038 <__assert_fail@plt+0x11cac>
   2359c:	add	r6, r6, #1
   235a0:	mov	r0, #10
   235a4:	ldr	r1, [r3]
   235a8:	bl	12254 <putc@plt>
   235ac:	cmp	r6, r9
   235b0:	mov	r0, fp
   235b4:	beq	235dc <__assert_fail@plt+0x11250>
   235b8:	add	fp, r0, #8
   235bc:	cmp	fp, r7
   235c0:	bcs	23550 <__assert_fail@plt+0x111c4>
   235c4:	mov	r1, #8
   235c8:	ldr	r2, [r8]
   235cc:	blx	r2
   235d0:	mov	r4, r0
   235d4:	mov	r5, r1
   235d8:	b	23570 <__assert_fail@plt+0x111e4>
   235dc:	add	r8, sl, r6, lsl #3
   235e0:	ldr	r3, [sp, #92]	; 0x5c
   235e4:	ldr	r2, [sp, #84]	; 0x54
   235e8:	add	r3, r8, r3
   235ec:	str	r3, [sp, #92]	; 0x5c
   235f0:	add	r3, r3, r2
   235f4:	ldr	r2, [sp, #88]	; 0x58
   235f8:	str	r3, [sp, #96]	; 0x60
   235fc:	add	r3, r3, r2
   23600:	add	r6, r3, r2
   23604:	str	r3, [sp, #88]	; 0x58
   23608:	ldr	r3, [sp, #80]	; 0x50
   2360c:	mov	r0, #10
   23610:	add	r9, r6, r3
   23614:	ldr	r3, [pc, #2588]	; 24038 <__assert_fail@plt+0x11cac>
   23618:	ldr	r1, [r3]
   2361c:	bl	12254 <putc@plt>
   23620:	ldr	r3, [sp, #72]	; 0x48
   23624:	cmp	r9, r3
   23628:	bhi	240a8 <__assert_fail@plt+0x11d1c>
   2362c:	ldr	r3, [sp, #68]	; 0x44
   23630:	cmp	r3, #0
   23634:	moveq	r8, r3
   23638:	beq	23664 <__assert_fail@plt+0x112d8>
   2363c:	ldr	r3, [sp, #68]	; 0x44
   23640:	add	r1, r8, r3, lsl #2
   23644:	sub	r1, r1, #4
   23648:	sub	r3, r8, #4
   2364c:	mov	r8, #0
   23650:	ldr	r2, [r3, #4]!
   23654:	cmp	r2, #0
   23658:	addne	r8, r8, #1
   2365c:	cmp	r3, r1
   23660:	bne	23650 <__assert_fail@plt+0x112c4>
   23664:	ldr	r4, [sp, #68]	; 0x44
   23668:	mov	r3, #5
   2366c:	str	r3, [sp]
   23670:	ldr	r2, [pc, #2520]	; 24050 <__assert_fail@plt+0x11cc4>
   23674:	mov	r3, r4
   23678:	ldr	r1, [pc, #2516]	; 24054 <__assert_fail@plt+0x11cc8>
   2367c:	mov	r0, #0
   23680:	bl	12368 <dcngettext@plt>
   23684:	mov	r2, r4
   23688:	mov	r1, r8
   2368c:	bl	11dbc <printf@plt>
   23690:	ldr	r3, [sp, #128]	; 0x80
   23694:	cmp	r3, #0
   23698:	moveq	r4, r3
   2369c:	moveq	sl, r3
   236a0:	beq	23744 <__assert_fail@plt+0x113b8>
   236a4:	ldr	r2, [sp, #128]	; 0x80
   236a8:	ldr	r3, [sp, #92]	; 0x5c
   236ac:	str	r8, [sp, #56]	; 0x38
   236b0:	add	r7, r3, r2, lsl #2
   236b4:	sub	r1, r7, #4
   236b8:	mov	r2, #0
   236bc:	str	r6, [sp, #80]	; 0x50
   236c0:	mov	fp, r2
   236c4:	mov	sl, r2
   236c8:	ldr	r0, [r3]
   236cc:	mov	r8, r3
   236d0:	mov	r7, r1
   236d4:	mov	r6, r2
   236d8:	str	r9, [sp, #84]	; 0x54
   236dc:	ldr	r5, [sp, #68]	; 0x44
   236e0:	b	236e8 <__assert_fail@plt+0x1135c>
   236e4:	mov	r0, r4
   236e8:	cmp	r7, r8
   236ec:	beq	23730 <__assert_fail@plt+0x113a4>
   236f0:	mov	r1, r5
   236f4:	bl	47520 <warn@@Base+0x5d50>
   236f8:	ldr	r4, [r8, #4]!
   236fc:	mov	r0, r4
   23700:	mov	r9, r1
   23704:	mov	r1, r5
   23708:	bl	47520 <warn@@Base+0x5d50>
   2370c:	cmp	r9, r1
   23710:	movne	r6, #0
   23714:	bne	236e4 <__assert_fail@plt+0x11358>
   23718:	add	r6, r6, #1
   2371c:	cmp	fp, r6
   23720:	add	r3, sl, #1
   23724:	movcc	fp, r6
   23728:	mov	sl, r3
   2372c:	b	236e4 <__assert_fail@plt+0x11358>
   23730:	ldr	r8, [sp, #56]	; 0x38
   23734:	ldr	r6, [sp, #80]	; 0x50
   23738:	ldr	r9, [sp, #84]	; 0x54
   2373c:	mov	r4, fp
   23740:	add	r8, r8, sl
   23744:	mov	r2, #5
   23748:	ldr	r1, [pc, #2312]	; 24058 <__assert_fail@plt+0x11ccc>
   2374c:	mov	r0, #0
   23750:	bl	11ea0 <dcgettext@plt>
   23754:	mov	r3, r4
   23758:	ldr	r4, [sp, #128]	; 0x80
   2375c:	mov	r2, sl
   23760:	mov	r1, r4
   23764:	bl	11dbc <printf@plt>
   23768:	cmp	r4, r8
   2376c:	bne	240ec <__assert_fail@plt+0x11d60>
   23770:	mov	r3, #0
   23774:	ldrd	r4, [sp, #136]	; 0x88
   23778:	mov	r7, r3
   2377c:	str	r3, [sp, #80]	; 0x50
   23780:	str	r3, [sp, #68]	; 0x44
   23784:	mov	r3, r9
   23788:	mov	r2, #0
   2378c:	mov	r0, r6
   23790:	add	r1, sp, #156	; 0x9c
   23794:	bl	1b3b0 <__assert_fail@plt+0x9024>
   23798:	ldr	r3, [sp, #156]	; 0x9c
   2379c:	add	r6, r6, r3
   237a0:	orrs	r2, r0, r1
   237a4:	strd	r0, [sp, #56]	; 0x38
   237a8:	beq	238f4 <__assert_fail@plt+0x11568>
   237ac:	ldr	r3, [sp, #68]	; 0x44
   237b0:	ldr	r2, [sp, #80]	; 0x50
   237b4:	cmp	r3, r2
   237b8:	beq	238d0 <__assert_fail@plt+0x11544>
   237bc:	ldr	r3, [sp, #68]	; 0x44
   237c0:	ldr	r2, [sp, #80]	; 0x50
   237c4:	cmp	r3, r2
   237c8:	bcs	24000 <__assert_fail@plt+0x11c74>
   237cc:	lsl	r0, r3, #4
   237d0:	add	r8, r7, r0
   237d4:	cmp	r7, r8
   237d8:	bcs	2381c <__assert_fail@plt+0x11490>
   237dc:	ldrd	r2, [r7]
   237e0:	ldrd	sl, [sp, #56]	; 0x38
   237e4:	cmp	fp, r3
   237e8:	cmpeq	sl, r2
   237ec:	beq	238a4 <__assert_fail@plt+0x11518>
   237f0:	sub	r0, r0, #16
   237f4:	add	r0, r0, r7
   237f8:	mov	r1, r7
   237fc:	ldrd	sl, [sp, #56]	; 0x38
   23800:	b	23814 <__assert_fail@plt+0x11488>
   23804:	ldrd	r2, [r1, #16]!
   23808:	cmp	r3, fp
   2380c:	cmpeq	r2, sl
   23810:	beq	238a4 <__assert_fail@plt+0x11518>
   23814:	cmp	r0, r1
   23818:	bne	23804 <__assert_fail@plt+0x11478>
   2381c:	ldrd	r2, [sp, #56]	; 0x38
   23820:	str	r6, [r8, #8]
   23824:	mov	r0, r6
   23828:	strd	r2, [r8]
   2382c:	add	r1, sp, #156	; 0x9c
   23830:	mov	r3, r9
   23834:	mov	r2, #0
   23838:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2383c:	ldr	r3, [sp, #156]	; 0x9c
   23840:	ldr	r2, [sp, #68]	; 0x44
   23844:	add	r6, r6, r3
   23848:	add	r2, r2, #1
   2384c:	str	r2, [sp, #68]	; 0x44
   23850:	mov	r3, r9
   23854:	mov	r2, #0
   23858:	mov	r0, r6
   2385c:	add	r1, sp, #156	; 0x9c
   23860:	bl	1b3b0 <__assert_fail@plt+0x9024>
   23864:	ldr	r2, [sp, #156]	; 0x9c
   23868:	mov	r3, r9
   2386c:	add	r6, r6, r2
   23870:	mov	r2, #0
   23874:	mov	sl, r0
   23878:	mov	r8, r1
   2387c:	mov	r0, r6
   23880:	add	r1, sp, #156	; 0x9c
   23884:	bl	1b3b0 <__assert_fail@plt+0x9024>
   23888:	ldr	r3, [sp, #156]	; 0x9c
   2388c:	add	r6, r6, r3
   23890:	orr	r4, r0, sl
   23894:	orr	r5, r1, r8
   23898:	orrs	r3, r4, r5
   2389c:	bne	23850 <__assert_fail@plt+0x114c4>
   238a0:	b	23784 <__assert_fail@plt+0x113f8>
   238a4:	mov	r2, #5
   238a8:	ldr	r1, [pc, #1964]	; 2405c <__assert_fail@plt+0x11cd0>
   238ac:	mov	r0, #0
   238b0:	bl	11ea0 <dcgettext@plt>
   238b4:	ldr	r3, [sp, #124]	; 0x7c
   238b8:	ldr	r1, [sp, #56]	; 0x38
   238bc:	ldr	r2, [r3, #16]
   238c0:	ldr	r3, [sp, #120]	; 0x78
   238c4:	sub	r2, r3, r2
   238c8:	bl	417d0 <warn@@Base>
   238cc:	b	2381c <__assert_fail@plt+0x11490>
   238d0:	lsl	r3, r3, #1
   238d4:	cmp	r3, #256	; 0x100
   238d8:	movcc	r3, #256	; 0x100
   238dc:	mov	r0, r7
   238e0:	lsl	r1, r3, #4
   238e4:	str	r3, [sp, #80]	; 0x50
   238e8:	bl	11ed0 <xrealloc@plt>
   238ec:	mov	r7, r0
   238f0:	b	237bc <__assert_fail@plt+0x11430>
   238f4:	mov	r2, #5
   238f8:	ldr	r1, [pc, #1888]	; 24060 <__assert_fail@plt+0x11cd4>
   238fc:	mov	r0, #0
   23900:	str	r7, [sp, #80]	; 0x50
   23904:	strd	r4, [sp, #136]	; 0x88
   23908:	ldr	r7, [sp, #68]	; 0x44
   2390c:	bl	11ea0 <dcgettext@plt>
   23910:	bl	11dbc <printf@plt>
   23914:	ldr	r3, [sp, #128]	; 0x80
   23918:	cmp	r3, #0
   2391c:	beq	23b20 <__assert_fail@plt+0x11794>
   23920:	ldr	r3, [sp, #80]	; 0x50
   23924:	ldrd	sl, [sp, #144]	; 0x90
   23928:	add	r3, r3, r7, lsl #4
   2392c:	str	r3, [sp, #84]	; 0x54
   23930:	ldr	r3, [sp, #92]	; 0x5c
   23934:	str	r9, [sp, #68]	; 0x44
   23938:	sub	r3, r3, #4
   2393c:	str	r3, [sp, #116]	; 0x74
   23940:	ldr	r3, [sp, #88]	; 0x58
   23944:	str	r3, [sp, #108]	; 0x6c
   23948:	ldr	r3, [sp, #96]	; 0x60
   2394c:	str	r3, [sp, #112]	; 0x70
   23950:	mov	r3, #0
   23954:	str	r3, [sp, #100]	; 0x64
   23958:	ldr	r3, [sp, #112]	; 0x70
   2395c:	ldr	r2, [sp, #76]	; 0x4c
   23960:	mov	r0, r3
   23964:	add	r3, r3, r2
   23968:	ldr	r2, [sp, #72]	; 0x48
   2396c:	str	r3, [sp, #112]	; 0x70
   23970:	cmp	r2, r3
   23974:	bhi	23ce8 <__assert_fail@plt+0x1195c>
   23978:	cmp	r0, r2
   2397c:	bcs	23990 <__assert_fail@plt+0x11604>
   23980:	sub	r1, r2, r0
   23984:	sub	r3, r1, #1
   23988:	cmp	r3, #7
   2398c:	bls	23cec <__assert_fail@plt+0x11960>
   23990:	mov	r4, #0
   23994:	mov	r5, #0
   23998:	ldr	r3, [sp, #108]	; 0x6c
   2399c:	ldr	r2, [sp, #76]	; 0x4c
   239a0:	mov	r0, r3
   239a4:	add	r3, r3, r2
   239a8:	ldr	r2, [sp, #72]	; 0x48
   239ac:	str	r3, [sp, #108]	; 0x6c
   239b0:	cmp	r2, r3
   239b4:	bhi	23cc8 <__assert_fail@plt+0x1193c>
   239b8:	cmp	r0, r2
   239bc:	bcs	239d0 <__assert_fail@plt+0x11644>
   239c0:	sub	r1, r2, r0
   239c4:	sub	r3, r1, #1
   239c8:	cmp	r3, #7
   239cc:	bls	23ccc <__assert_fail@plt+0x11940>
   239d0:	ldr	r3, [sp, #68]	; 0x44
   239d4:	str	r3, [sp, #96]	; 0x60
   239d8:	ldr	r3, [sp, #116]	; 0x74
   239dc:	mov	r0, r4
   239e0:	mov	r1, r5
   239e4:	ldr	r4, [r3, #4]!
   239e8:	mvn	r9, #1
   239ec:	str	r3, [sp, #116]	; 0x74
   239f0:	bl	1a0d4 <__assert_fail@plt+0x7d48>
   239f4:	mov	r2, r4
   239f8:	ldr	r1, [sp, #100]	; 0x64
   239fc:	mov	r3, r0
   23a00:	ldr	r0, [pc, #1628]	; 24064 <__assert_fail@plt+0x11cd8>
   23a04:	bl	11dbc <printf@plt>
   23a08:	ldr	r8, [sp, #96]	; 0x60
   23a0c:	mvn	r3, #0
   23a10:	str	r3, [sp, #88]	; 0x58
   23a14:	str	r3, [sp, #92]	; 0x5c
   23a18:	ldr	r3, [sp, #72]	; 0x48
   23a1c:	mov	r2, #0
   23a20:	add	r1, sp, #156	; 0x9c
   23a24:	mov	r0, r8
   23a28:	bl	1b3b0 <__assert_fail@plt+0x9024>
   23a2c:	cmn	r9, #1
   23a30:	mov	r6, r0
   23a34:	mov	r7, r1
   23a38:	beq	23cb8 <__assert_fail@plt+0x1192c>
   23a3c:	orrs	r3, r6, r7
   23a40:	beq	23aec <__assert_fail@plt+0x11760>
   23a44:	cmp	r9, #0
   23a48:	ldr	r5, [sp, #156]	; 0x9c
   23a4c:	blt	23a84 <__assert_fail@plt+0x116f8>
   23a50:	ldr	r2, [sp, #88]	; 0x58
   23a54:	ldr	r0, [sp, #92]	; 0x5c
   23a58:	moveq	r3, #1
   23a5c:	movne	r3, #0
   23a60:	orrs	r2, r2, r0
   23a64:	movne	r3, #0
   23a68:	ldr	r2, [pc, #1528]	; 24068 <__assert_fail@plt+0x11cdc>
   23a6c:	cmp	r3, #0
   23a70:	ldr	r1, [pc, #1524]	; 2406c <__assert_fail@plt+0x11ce0>
   23a74:	ldr	r0, [pc, #1524]	; 24070 <__assert_fail@plt+0x11ce4>
   23a78:	moveq	r1, r2
   23a7c:	mov	r2, r6
   23a80:	bl	11dbc <printf@plt>
   23a84:	ldr	r1, [sp, #80]	; 0x50
   23a88:	ldr	r0, [sp, #84]	; 0x54
   23a8c:	cmp	r1, r0
   23a90:	bcs	23ac4 <__assert_fail@plt+0x11738>
   23a94:	ldrd	r2, [r1]
   23a98:	cmp	r7, r3
   23a9c:	cmpeq	r6, r2
   23aa0:	bne	23ab8 <__assert_fail@plt+0x1172c>
   23aa4:	b	23b4c <__assert_fail@plt+0x117c0>
   23aa8:	ldrd	r2, [r1]
   23aac:	cmp	r3, r7
   23ab0:	cmpeq	r2, r6
   23ab4:	beq	23b50 <__assert_fail@plt+0x117c4>
   23ab8:	add	r1, r1, #16
   23abc:	cmp	r1, r0
   23ac0:	bcc	23aa8 <__assert_fail@plt+0x1171c>
   23ac4:	mov	r2, #5
   23ac8:	ldr	r1, [pc, #1444]	; 24074 <__assert_fail@plt+0x11ce8>
   23acc:	mov	r0, #0
   23ad0:	bl	11ea0 <dcgettext@plt>
   23ad4:	ldr	r3, [sp, #124]	; 0x7c
   23ad8:	mov	r1, r6
   23adc:	ldr	r2, [r3, #16]
   23ae0:	ldr	r3, [sp, #120]	; 0x78
   23ae4:	sub	r2, r3, r2
   23ae8:	bl	417d0 <warn@@Base>
   23aec:	cmp	r9, #0
   23af0:	ble	23d04 <__assert_fail@plt+0x11978>
   23af4:	ldr	r3, [sp, #100]	; 0x64
   23af8:	mov	r0, #10
   23afc:	add	r4, r3, #1
   23b00:	ldr	r3, [pc, #1328]	; 24038 <__assert_fail@plt+0x11cac>
   23b04:	str	r4, [sp, #100]	; 0x64
   23b08:	ldr	r1, [r3]
   23b0c:	bl	12254 <putc@plt>
   23b10:	ldr	r3, [sp, #128]	; 0x80
   23b14:	cmp	r3, r4
   23b18:	bne	23958 <__assert_fail@plt+0x115cc>
   23b1c:	strd	sl, [sp, #144]	; 0x90
   23b20:	ldr	r3, [sp, #72]	; 0x48
   23b24:	ldr	r0, [sp, #80]	; 0x50
   23b28:	mov	r4, r3
   23b2c:	str	r3, [sp, #120]	; 0x78
   23b30:	bl	11e10 <free@plt>
   23b34:	ldr	r2, [sp, #132]	; 0x84
   23b38:	cmp	r2, r4
   23b3c:	bhi	22fb4 <__assert_fail@plt+0x10c28>
   23b40:	mov	r0, #1
   23b44:	add	sp, sp, #164	; 0xa4
   23b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b4c:	ldr	r1, [sp, #80]	; 0x50
   23b50:	ldr	r4, [r1, #8]
   23b54:	ldr	r3, [sp, #68]	; 0x44
   23b58:	mov	r0, r4
   23b5c:	mov	r2, #0
   23b60:	add	r1, sp, #156	; 0x9c
   23b64:	bl	1b3b0 <__assert_fail@plt+0x9024>
   23b68:	ldr	r3, [sp, #156]	; 0x9c
   23b6c:	cmp	r9, #0
   23b70:	add	r4, r4, r3
   23b74:	blt	23b88 <__assert_fail@plt+0x117fc>
   23b78:	bl	1a2c4 <__assert_fail@plt+0x7f38>
   23b7c:	mov	r1, r0
   23b80:	ldr	r0, [pc, #1264]	; 24078 <__assert_fail@plt+0x11cec>
   23b84:	bl	11dbc <printf@plt>
   23b88:	add	r8, r8, r5
   23b8c:	str	r9, [sp, #56]	; 0x38
   23b90:	mov	r5, #0
   23b94:	mov	r9, r8
   23b98:	b	23c00 <__assert_fail@plt+0x11874>
   23b9c:	ldr	r1, [sp, #76]	; 0x4c
   23ba0:	ldr	r3, [sp, #56]	; 0x38
   23ba4:	mov	r0, #0
   23ba8:	str	r1, [sp, #24]
   23bac:	mov	r1, #0
   23bb0:	lsr	r2, r3, #31
   23bb4:	strd	r0, [sp, #16]
   23bb8:	strd	r0, [sp, #8]
   23bbc:	ldr	r1, [sp, #72]	; 0x48
   23bc0:	mov	ip, #61	; 0x3d
   23bc4:	mov	r3, #5
   23bc8:	str	r1, [sp, #4]
   23bcc:	str	r9, [sp]
   23bd0:	str	r2, [sp, #40]	; 0x28
   23bd4:	str	r3, [sp, #32]
   23bd8:	str	r5, [sp, #48]	; 0x30
   23bdc:	str	r5, [sp, #44]	; 0x2c
   23be0:	str	r5, [sp, #36]	; 0x24
   23be4:	str	r5, [sp, #28]
   23be8:	mov	r1, r6
   23bec:	str	ip, [sp, #52]	; 0x34
   23bf0:	mov	r2, #0
   23bf4:	mov	r3, #0
   23bf8:	bl	1eb4c <__assert_fail@plt+0xc7c0>
   23bfc:	mov	r9, r0
   23c00:	ldr	r6, [sp, #68]	; 0x44
   23c04:	mov	r2, #0
   23c08:	mov	r3, r6
   23c0c:	mov	r0, r4
   23c10:	add	r1, sp, #156	; 0x9c
   23c14:	bl	1b3b0 <__assert_fail@plt+0x9024>
   23c18:	ldr	r2, [sp, #156]	; 0x9c
   23c1c:	mov	r3, r6
   23c20:	add	r4, r4, r2
   23c24:	mov	r2, #0
   23c28:	mov	r7, r0
   23c2c:	mov	r8, r1
   23c30:	mov	r0, r4
   23c34:	add	r1, sp, #156	; 0x9c
   23c38:	bl	1b3b0 <__assert_fail@plt+0x9024>
   23c3c:	ldr	r3, [sp, #156]	; 0x9c
   23c40:	add	r4, r4, r3
   23c44:	orr	sl, r0, r7
   23c48:	orr	fp, r1, r8
   23c4c:	orrs	r3, sl, fp
   23c50:	mov	r6, r0
   23c54:	beq	23c80 <__assert_fail@plt+0x118f4>
   23c58:	ldr	r3, [sp, #56]	; 0x38
   23c5c:	cmp	r3, #0
   23c60:	blt	23b9c <__assert_fail@plt+0x11810>
   23c64:	mov	r0, r7
   23c68:	bl	46f50 <warn@@Base+0x5780>
   23c6c:	subs	r1, r0, #0
   23c70:	beq	23c90 <__assert_fail@plt+0x11904>
   23c74:	ldr	r0, [pc, #1020]	; 24078 <__assert_fail@plt+0x11cec>
   23c78:	bl	11dbc <printf@plt>
   23c7c:	b	23b9c <__assert_fail@plt+0x11810>
   23c80:	mov	r8, r9
   23c84:	ldr	r9, [sp, #56]	; 0x38
   23c88:	add	r9, r9, #1
   23c8c:	b	23a18 <__assert_fail@plt+0x1168c>
   23c90:	mov	r2, #5
   23c94:	ldr	r1, [pc, #992]	; 2407c <__assert_fail@plt+0x11cf0>
   23c98:	bl	11ea0 <dcgettext@plt>
   23c9c:	mov	r1, #100	; 0x64
   23ca0:	mov	r3, r7
   23ca4:	mov	r2, r0
   23ca8:	ldr	r0, [pc, #976]	; 24080 <__assert_fail@plt+0x11cf4>
   23cac:	bl	120f8 <snprintf@plt>
   23cb0:	ldr	r1, [pc, #968]	; 24080 <__assert_fail@plt+0x11cf4>
   23cb4:	b	23c74 <__assert_fail@plt+0x118e8>
   23cb8:	strd	r6, [sp, #88]	; 0x58
   23cbc:	ldr	r8, [sp, #96]	; 0x60
   23cc0:	mov	r9, #0
   23cc4:	b	23a18 <__assert_fail@plt+0x1168c>
   23cc8:	ldr	r1, [sp, #76]	; 0x4c
   23ccc:	ldr	r3, [sp, #104]	; 0x68
   23cd0:	ldr	r3, [r3]
   23cd4:	blx	r3
   23cd8:	ldr	r3, [sp, #68]	; 0x44
   23cdc:	add	r3, r3, r0
   23ce0:	str	r3, [sp, #96]	; 0x60
   23ce4:	b	239d8 <__assert_fail@plt+0x1164c>
   23ce8:	ldr	r1, [sp, #76]	; 0x4c
   23cec:	ldr	r3, [sp, #104]	; 0x68
   23cf0:	ldr	r3, [r3]
   23cf4:	blx	r3
   23cf8:	mov	r4, r0
   23cfc:	mov	r5, r1
   23d00:	b	23998 <__assert_fail@plt+0x1160c>
   23d04:	mov	r2, #5
   23d08:	ldr	r1, [pc, #884]	; 24084 <__assert_fail@plt+0x11cf8>
   23d0c:	mov	r0, #0
   23d10:	bl	11ea0 <dcgettext@plt>
   23d14:	bl	11dbc <printf@plt>
   23d18:	b	23af4 <__assert_fail@plt+0x11768>
   23d1c:	mov	r1, #4
   23d20:	ldr	r3, [sp, #104]	; 0x68
   23d24:	mov	r0, r6
   23d28:	add	r7, r5, #24
   23d2c:	ldr	r3, [r3]
   23d30:	blx	r3
   23d34:	ldr	r2, [sp, #72]	; 0x48
   23d38:	cmp	r7, r2
   23d3c:	lsl	r3, r0, #2
   23d40:	str	r0, [sp, #68]	; 0x44
   23d44:	str	r3, [sp, #92]	; 0x5c
   23d48:	bcc	23dd0 <__assert_fail@plt+0x11a44>
   23d4c:	ldr	r3, [sp, #72]	; 0x48
   23d50:	cmp	r3, r4
   23d54:	bls	2325c <__assert_fail@plt+0x10ed0>
   23d58:	sub	r1, r3, r4
   23d5c:	sub	r3, r1, #1
   23d60:	cmp	r3, #7
   23d64:	bhi	2325c <__assert_fail@plt+0x10ed0>
   23d68:	ldr	r3, [sp, #104]	; 0x68
   23d6c:	mov	r0, r4
   23d70:	add	r6, r5, #28
   23d74:	ldr	r3, [r3]
   23d78:	blx	r3
   23d7c:	ldr	r2, [sp, #72]	; 0x48
   23d80:	cmp	r2, r6
   23d84:	lsl	r2, r0, #2
   23d88:	str	r2, [sp, #84]	; 0x54
   23d8c:	ldr	r2, [sp, #76]	; 0x4c
   23d90:	str	r0, [sp, #128]	; 0x80
   23d94:	mul	r3, r0, r2
   23d98:	str	r3, [sp, #88]	; 0x58
   23d9c:	bls	2327c <__assert_fail@plt+0x10ef0>
   23da0:	ldr	r3, [sp, #104]	; 0x68
   23da4:	mov	r0, r7
   23da8:	mov	r1, #4
   23dac:	ldr	r3, [r3]
   23db0:	blx	r3
   23db4:	ldr	r3, [sp, #72]	; 0x48
   23db8:	add	r4, r5, #32
   23dbc:	cmp	r4, r3
   23dc0:	str	r0, [sp, #80]	; 0x50
   23dc4:	bcs	23f64 <__assert_fail@plt+0x11bd8>
   23dc8:	mov	r1, #4
   23dcc:	b	23298 <__assert_fail@plt+0x10f0c>
   23dd0:	ldr	r3, [sp, #104]	; 0x68
   23dd4:	mov	r0, r4
   23dd8:	mov	r1, #4
   23ddc:	ldr	r3, [r3]
   23de0:	blx	r3
   23de4:	ldr	r2, [sp, #72]	; 0x48
   23de8:	add	r6, r5, #28
   23dec:	cmp	r2, r6
   23df0:	lsl	r2, r0, #2
   23df4:	str	r2, [sp, #84]	; 0x54
   23df8:	ldr	r2, [sp, #76]	; 0x4c
   23dfc:	str	r0, [sp, #128]	; 0x80
   23e00:	mul	r3, r0, r2
   23e04:	str	r3, [sp, #88]	; 0x58
   23e08:	bhi	23da0 <__assert_fail@plt+0x11a14>
   23e0c:	ldr	r3, [sp, #72]	; 0x48
   23e10:	sub	r1, r3, r7
   23e14:	sub	r3, r1, #1
   23e18:	cmp	r3, #7
   23e1c:	bhi	2327c <__assert_fail@plt+0x10ef0>
   23e20:	ldr	r3, [sp, #104]	; 0x68
   23e24:	mov	r0, r7
   23e28:	add	r4, r5, #32
   23e2c:	ldr	r3, [r3]
   23e30:	blx	r3
   23e34:	ldr	r3, [sp, #72]	; 0x48
   23e38:	cmp	r4, r3
   23e3c:	str	r0, [sp, #80]	; 0x50
   23e40:	bcs	23f34 <__assert_fail@plt+0x11ba8>
   23e44:	b	23dc8 <__assert_fail@plt+0x11a3c>
   23e48:	mov	r1, #4
   23e4c:	ldr	r3, [sp, #104]	; 0x68
   23e50:	mov	r0, r7
   23e54:	add	r4, r5, #20
   23e58:	ldr	r3, [r3]
   23e5c:	blx	r3
   23e60:	ldr	r3, [sp, #72]	; 0x48
   23e64:	cmp	r4, r3
   23e68:	mov	r9, r0
   23e6c:	bcc	23d1c <__assert_fail@plt+0x11990>
   23e70:	ldr	r3, [sp, #72]	; 0x48
   23e74:	cmp	r3, r6
   23e78:	bls	23240 <__assert_fail@plt+0x10eb4>
   23e7c:	ldr	r3, [sp, #72]	; 0x48
   23e80:	sub	r1, r3, r6
   23e84:	sub	r3, r1, #1
   23e88:	cmp	r3, #7
   23e8c:	bhi	23240 <__assert_fail@plt+0x10eb4>
   23e90:	b	23d20 <__assert_fail@plt+0x11994>
   23e94:	mov	r1, #4
   23e98:	ldr	r3, [sp, #104]	; 0x68
   23e9c:	mov	r0, r4
   23ea0:	add	r6, r5, #16
   23ea4:	ldr	r3, [r3]
   23ea8:	blx	r3
   23eac:	ldr	r3, [sp, #72]	; 0x48
   23eb0:	cmp	r6, r3
   23eb4:	str	r0, [sp, #56]	; 0x38
   23eb8:	bcc	23e48 <__assert_fail@plt+0x11abc>
   23ebc:	ldr	r3, [sp, #72]	; 0x48
   23ec0:	cmp	r7, r3
   23ec4:	bcs	2322c <__assert_fail@plt+0x10ea0>
   23ec8:	ldr	r3, [sp, #72]	; 0x48
   23ecc:	sub	r1, r3, r7
   23ed0:	sub	r3, r1, #1
   23ed4:	cmp	r3, #7
   23ed8:	bhi	2322c <__assert_fail@plt+0x10ea0>
   23edc:	b	23e4c <__assert_fail@plt+0x11ac0>
   23ee0:	mov	r1, #2
   23ee4:	ldr	r3, [sp, #104]	; 0x68
   23ee8:	mov	r0, r7
   23eec:	ldr	r3, [r3]
   23ef0:	blx	r3
   23ef4:	uxth	r4, r0
   23ef8:	cmp	r4, #0
   23efc:	bne	23f7c <__assert_fail@plt+0x11bf0>
   23f00:	ldr	r3, [sp, #72]	; 0x48
   23f04:	add	r4, r5, #8
   23f08:	cmp	r4, r3
   23f0c:	bcc	231b0 <__assert_fail@plt+0x10e24>
   23f10:	cmp	r6, r3
   23f14:	bcs	231d0 <__assert_fail@plt+0x10e44>
   23f18:	sub	r1, r3, r6
   23f1c:	sub	r3, r1, #1
   23f20:	cmp	r3, #7
   23f24:	bls	231b4 <__assert_fail@plt+0x10e28>
   23f28:	b	231d0 <__assert_fail@plt+0x10e44>
   23f2c:	mov	r3, #0
   23f30:	str	r3, [sp, #80]	; 0x50
   23f34:	mov	r2, #5
   23f38:	ldr	r1, [pc, #240]	; 24030 <__assert_fail@plt+0x11ca4>
   23f3c:	mov	r0, #0
   23f40:	bl	11ea0 <dcgettext@plt>
   23f44:	mov	r8, r4
   23f48:	bl	11dbc <printf@plt>
   23f4c:	b	23364 <__assert_fail@plt+0x10fd8>
   23f50:	sub	r3, ip, #1
   23f54:	cmp	r3, #7
   23f58:	bhi	2302c <__assert_fail@plt+0x10ca0>
   23f5c:	mov	r1, ip
   23f60:	b	23140 <__assert_fail@plt+0x10db4>
   23f64:	ldr	r3, [sp, #72]	; 0x48
   23f68:	sub	r1, r3, r6
   23f6c:	sub	r3, r1, #1
   23f70:	cmp	r3, #7
   23f74:	bhi	23f34 <__assert_fail@plt+0x11ba8>
   23f78:	b	23298 <__assert_fail@plt+0x10f0c>
   23f7c:	mov	r2, #5
   23f80:	ldr	r1, [pc, #256]	; 24088 <__assert_fail@plt+0x11cfc>
   23f84:	mov	r0, #0
   23f88:	bl	11ea0 <dcgettext@plt>
   23f8c:	mov	r1, r4
   23f90:	bl	417d0 <warn@@Base>
   23f94:	b	23f00 <__assert_fail@plt+0x11b74>
   23f98:	ldr	r3, [sp, #120]	; 0x78
   23f9c:	add	r4, r3, #12
   23fa0:	ldr	r3, [sp, #132]	; 0x84
   23fa4:	cmp	r4, r3
   23fa8:	bcc	23fd4 <__assert_fail@plt+0x11c48>
   23fac:	cmp	r5, r3
   23fb0:	bcs	23fc4 <__assert_fail@plt+0x11c38>
   23fb4:	sub	r1, r3, r5
   23fb8:	sub	r3, r1, #1
   23fbc:	cmp	r3, #7
   23fc0:	bls	23fd8 <__assert_fail@plt+0x11c4c>
   23fc4:	mov	r3, #8
   23fc8:	mov	r5, r4
   23fcc:	str	r3, [sp, #76]	; 0x4c
   23fd0:	b	22fe0 <__assert_fail@plt+0x10c54>
   23fd4:	mov	r1, #8
   23fd8:	ldr	r3, [sp, #104]	; 0x68
   23fdc:	mov	r0, r5
   23fe0:	mov	r5, r4
   23fe4:	ldr	r3, [r3]
   23fe8:	blx	r3
   23fec:	mov	r3, #8
   23ff0:	str	r3, [sp, #76]	; 0x4c
   23ff4:	mov	r8, r0
   23ff8:	mov	r9, r1
   23ffc:	b	230a0 <__assert_fail@plt+0x10d14>
   24000:	ldr	r3, [pc, #144]	; 24098 <__assert_fail@plt+0x11d0c>
   24004:	ldr	r2, [pc, #128]	; 2408c <__assert_fail@plt+0x11d00>
   24008:	ldr	r1, [pc, #148]	; 240a4 <__assert_fail@plt+0x11d18>
   2400c:	ldr	r0, [pc, #124]	; 24090 <__assert_fail@plt+0x11d04>
   24010:	bl	1238c <__assert_fail@plt>
   24014:	andeq	fp, r4, ip, lsr #1
   24018:	andeq	sp, r4, r8, asr #6
   2401c:	andeq	r9, r6, r0, ror #27
   24020:	andeq	ip, r4, r0, ror #31
   24024:	andeq	r8, r4, r8, lsr #29
   24028:			; <UNDEFINED> instruction: 0x0004d3bc
   2402c:	andeq	sp, r4, ip, lsl #8
   24030:	strdeq	sp, [r4], -r4
   24034:			; <UNDEFINED> instruction: 0x0004abb8
   24038:	andeq	r7, r6, r0, lsr r4
   2403c:	andeq	sp, r4, r4, ror #8
   24040:	andeq	sp, r4, r0, ror r4
   24044:	andeq	sp, r4, r8, lsl #9
   24048:	andeq	sp, r4, r0, lsl #9
   2404c:	muleq	r4, r4, r4
   24050:	strdeq	sp, [r4], -r4
   24054:	andeq	sp, r4, r0, lsl r5
   24058:	andeq	sp, r4, ip, lsr #10
   2405c:	ldrdeq	sp, [r4], -r8
   24060:	andeq	fp, r4, ip, lsr r3
   24064:	andeq	sp, r4, ip, lsl r6
   24068:	andeq	sp, r4, r4, asr #6
   2406c:	andeq	r8, r4, ip, lsl ip
   24070:	andeq	sp, r4, ip, lsr #12
   24074:	andeq	sp, r4, r4, lsr r6
   24078:	andeq	fp, r4, ip, asr #18
   2407c:	andeq	sp, r4, r8, ror r6
   24080:	andeq	r7, r6, r8, lsr fp
   24084:	muleq	r4, r0, r6
   24088:	andeq	sp, r4, r4, lsl #7
   2408c:	andeq	r2, r0, r6, lsl #3
   24090:	andeq	sp, r4, r8, lsr #11
   24094:	muleq	r4, ip, r4
   24098:	andeq	r9, r4, ip, ror #23
   2409c:	andeq	r2, r0, sl, ror #2
   240a0:	andeq	sp, r4, r8, ror r5
   240a4:	ldrdeq	sl, [r4], -r8
   240a8:	mov	r2, #5
   240ac:	ldr	r1, [pc, #-32]	; 24094 <__assert_fail@plt+0x11d08>
   240b0:	mov	r0, #0
   240b4:	bl	11ea0 <dcgettext@plt>
   240b8:	ldr	r3, [sp, #124]	; 0x7c
   240bc:	ldr	r2, [sp, #72]	; 0x48
   240c0:	ldr	r1, [r3, #16]
   240c4:	ldr	r3, [sp, #120]	; 0x78
   240c8:	sub	r2, r2, r1
   240cc:	sub	r3, r3, r1
   240d0:	sub	r1, r9, r1
   240d4:	bl	417d0 <warn@@Base>
   240d8:	mov	r0, #0
   240dc:	add	sp, sp, #164	; 0xa4
   240e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   240e4:	mov	r8, r4
   240e8:	b	23364 <__assert_fail@plt+0x10fd8>
   240ec:	ldr	r3, [pc, #-92]	; 24098 <__assert_fail@plt+0x11d0c>
   240f0:	ldr	r2, [pc, #-92]	; 2409c <__assert_fail@plt+0x11d10>
   240f4:	ldr	r1, [pc, #-88]	; 240a4 <__assert_fail@plt+0x11d18>
   240f8:	ldr	r0, [pc, #-96]	; 240a0 <__assert_fail@plt+0x11d14>
   240fc:	bl	1238c <__assert_fail@plt>
   24100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24104:	sub	sp, sp, #1184	; 0x4a0
   24108:	sub	sp, sp, #4
   2410c:	ldr	r6, [r0, #16]
   24110:	ldr	r3, [r0, #32]
   24114:	mov	r5, r0
   24118:	str	r0, [sp, #128]	; 0x80
   2411c:	mov	r4, r1
   24120:	mov	r0, #10
   24124:	add	fp, r6, r3
   24128:	str	r6, [sp, #112]	; 0x70
   2412c:	bl	19dd4 <__assert_fail@plt+0x7a48>
   24130:	mov	r1, r4
   24134:	mov	r0, #4
   24138:	bl	19dd4 <__assert_fail@plt+0x7a48>
   2413c:	add	r1, r5, #12
   24140:	add	r0, r5, #8
   24144:	bl	1a7b4 <__assert_fail@plt+0x8428>
   24148:	cmp	r6, fp
   2414c:	bcs	24ee8 <__assert_fail@plt+0x12b5c>
   24150:	mov	r9, r6
   24154:	mov	r7, fp
   24158:	ldr	r3, [sp, #112]	; 0x70
   2415c:	add	r4, r9, #2
   24160:	sub	r5, r9, r3
   24164:	cmp	r4, r7
   24168:	mov	sl, r5
   2416c:	bcc	241ac <__assert_fail@plt+0x11e20>
   24170:	sub	r1, r7, r9
   24174:	sub	r3, r1, #1
   24178:	cmp	r3, #7
   2417c:	bls	241b0 <__assert_fail@plt+0x11e24>
   24180:	mov	r2, #5
   24184:	ldr	r1, [pc, #3924]	; 250e0 <__assert_fail@plt+0x12d54>
   24188:	mov	r0, #0
   2418c:	bl	11ea0 <dcgettext@plt>
   24190:	ldr	r3, [sp, #128]	; 0x80
   24194:	ldr	r1, [r3, #8]
   24198:	bl	412ac <error@@Base>
   2419c:	mov	r0, #0
   241a0:	add	sp, sp, #1184	; 0x4a0
   241a4:	add	sp, sp, #4
   241a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   241ac:	mov	r1, #2
   241b0:	ldr	r8, [pc, #3884]	; 250e4 <__assert_fail@plt+0x12d58>
   241b4:	mov	r0, r9
   241b8:	ldr	r3, [r8]
   241bc:	blx	r3
   241c0:	sub	r3, r0, #4
   241c4:	cmp	r3, #1
   241c8:	str	r0, [sp, #88]	; 0x58
   241cc:	bhi	24180 <__assert_fail@plt+0x11df4>
   241d0:	add	r9, r9, #3
   241d4:	cmp	r9, r7
   241d8:	bcc	24268 <__assert_fail@plt+0x11edc>
   241dc:	cmp	r4, r7
   241e0:	bcs	241f4 <__assert_fail@plt+0x11e68>
   241e4:	sub	r1, r7, r4
   241e8:	sub	r3, r1, #1
   241ec:	cmp	r3, #7
   241f0:	bls	2426c <__assert_fail@plt+0x11ee0>
   241f4:	mov	r2, #5
   241f8:	ldr	r1, [pc, #3816]	; 250e8 <__assert_fail@plt+0x12d5c>
   241fc:	mov	r0, #0
   24200:	bl	11ea0 <dcgettext@plt>
   24204:	mov	r1, sl
   24208:	bl	11dbc <printf@plt>
   2420c:	mov	r2, #5
   24210:	ldr	r1, [pc, #3796]	; 250ec <__assert_fail@plt+0x12d60>
   24214:	mov	r0, #0
   24218:	bl	11ea0 <dcgettext@plt>
   2421c:	ldr	r1, [sp, #88]	; 0x58
   24220:	bl	11dbc <printf@plt>
   24224:	ldr	r1, [pc, #3780]	; 250f0 <__assert_fail@plt+0x12d64>
   24228:	mov	r2, #5
   2422c:	mov	r0, #0
   24230:	bl	11ea0 <dcgettext@plt>
   24234:	mov	r1, #4
   24238:	bl	11dbc <printf@plt>
   2423c:	mov	r0, #10
   24240:	bl	1211c <putchar@plt>
   24244:	mov	r2, #5
   24248:	ldr	r1, [pc, #3748]	; 250f4 <__assert_fail@plt+0x12d68>
   2424c:	mov	r0, #0
   24250:	bl	11ea0 <dcgettext@plt>
   24254:	bl	412ac <error@@Base>
   24258:	mov	r0, #0
   2425c:	add	sp, sp, #1184	; 0x4a0
   24260:	add	sp, sp, #4
   24264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24268:	mov	r1, #1
   2426c:	ldr	r3, [r8]
   24270:	mov	r0, r4
   24274:	blx	r3
   24278:	mov	r2, #5
   2427c:	ldr	r1, [pc, #3684]	; 250e8 <__assert_fail@plt+0x12d5c>
   24280:	tst	r0, #1
   24284:	mov	r4, r0
   24288:	mov	r0, #0
   2428c:	moveq	sl, #4
   24290:	movne	sl, #8
   24294:	bl	11ea0 <dcgettext@plt>
   24298:	mov	r1, r5
   2429c:	bl	11dbc <printf@plt>
   242a0:	mov	r2, #5
   242a4:	ldr	r1, [pc, #3648]	; 250ec <__assert_fail@plt+0x12d60>
   242a8:	mov	r0, #0
   242ac:	bl	11ea0 <dcgettext@plt>
   242b0:	ldr	r1, [sp, #88]	; 0x58
   242b4:	bl	11dbc <printf@plt>
   242b8:	mov	r2, #5
   242bc:	ldr	r1, [pc, #3628]	; 250f0 <__assert_fail@plt+0x12d64>
   242c0:	mov	r0, #0
   242c4:	bl	11ea0 <dcgettext@plt>
   242c8:	mov	r1, sl
   242cc:	bl	11dbc <printf@plt>
   242d0:	ands	r3, r4, #2
   242d4:	str	r3, [sp, #92]	; 0x5c
   242d8:	and	r4, r4, #4
   242dc:	beq	24f00 <__assert_fail@plt+0x12b74>
   242e0:	add	r5, r9, sl
   242e4:	cmp	r5, r7
   242e8:	bcc	244fc <__assert_fail@plt+0x12170>
   242ec:	cmp	r9, r7
   242f0:	bcc	24880 <__assert_fail@plt+0x124f4>
   242f4:	mov	r2, #0
   242f8:	mov	r3, #0
   242fc:	mov	r6, #0
   24300:	strd	r2, [sp, #96]	; 0x60
   24304:	ldr	r1, [pc, #3564]	; 250f8 <__assert_fail@plt+0x12d6c>
   24308:	mov	r2, #5
   2430c:	mov	r0, #0
   24310:	bl	11ea0 <dcgettext@plt>
   24314:	mov	r1, r6
   24318:	bl	11dbc <printf@plt>
   2431c:	cmp	r4, #0
   24320:	beq	24e8c <__assert_fail@plt+0x12b00>
   24324:	add	fp, r5, #1
   24328:	cmp	fp, r7
   2432c:	bcc	2444c <__assert_fail@plt+0x120c0>
   24330:	cmp	r5, r7
   24334:	bcs	2423c <__assert_fail@plt+0x11eb0>
   24338:	sub	r1, r7, r5
   2433c:	sub	r3, r1, #1
   24340:	cmp	r3, #7
   24344:	bhi	2423c <__assert_fail@plt+0x11eb0>
   24348:	mov	r0, r5
   2434c:	ldr	r3, [r8]
   24350:	add	r4, sp, #160	; 0xa0
   24354:	str	r4, [sp, #68]	; 0x44
   24358:	blx	r3
   2435c:	mov	r2, #1024	; 0x400
   24360:	mov	r1, #0
   24364:	mov	r5, r0
   24368:	str	r0, [sp, #104]	; 0x68
   2436c:	mov	r0, r4
   24370:	bl	12110 <memset@plt>
   24374:	cmp	r5, #0
   24378:	beq	2423c <__assert_fail@plt+0x11eb0>
   2437c:	mov	r2, #5
   24380:	ldr	r1, [pc, #3444]	; 250fc <__assert_fail@plt+0x12d70>
   24384:	mov	r0, #0
   24388:	bl	11ea0 <dcgettext@plt>
   2438c:	bl	11dbc <printf@plt>
   24390:	add	r3, sp, #152	; 0x98
   24394:	mov	r9, #0
   24398:	str	r3, [sp, #116]	; 0x74
   2439c:	str	sl, [sp, #136]	; 0x88
   243a0:	b	24420 <__assert_fail@plt+0x12094>
   243a4:	cmp	r7, fp
   243a8:	bls	243bc <__assert_fail@plt+0x12030>
   243ac:	sub	r1, r7, fp
   243b0:	sub	r3, r1, #1
   243b4:	cmp	r3, #7
   243b8:	bls	24430 <__assert_fail@plt+0x120a4>
   243bc:	ldr	ip, [sp, #68]	; 0x44
   243c0:	mov	r5, #0
   243c4:	mov	r3, r7
   243c8:	mov	r2, #0
   243cc:	ldr	r1, [sp, #116]	; 0x74
   243d0:	mov	r0, r4
   243d4:	str	r4, [ip]
   243d8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   243dc:	ldr	fp, [sp, #152]	; 0x98
   243e0:	add	fp, r4, fp
   243e4:	mov	r2, r0
   243e8:	mov	r3, r1
   243ec:	strd	r2, [sp, #56]	; 0x38
   243f0:	orrs	r3, r2, r3
   243f4:	mov	r2, #5
   243f8:	bne	24a20 <__assert_fail@plt+0x12694>
   243fc:	ldr	r1, [pc, #3324]	; 25100 <__assert_fail@plt+0x12d74>
   24400:	mov	r0, #0
   24404:	bl	11ea0 <dcgettext@plt>
   24408:	mov	r1, r5
   2440c:	bl	11dbc <printf@plt>
   24410:	ldr	r3, [sp, #104]	; 0x68
   24414:	add	r9, r9, #1
   24418:	cmp	r3, r9
   2441c:	bls	24ed0 <__assert_fail@plt+0x12b44>
   24420:	add	r4, fp, #1
   24424:	cmp	r4, r7
   24428:	bcs	243a4 <__assert_fail@plt+0x12018>
   2442c:	mov	r1, #1
   24430:	ldr	r3, [r8]
   24434:	mov	r0, fp
   24438:	blx	r3
   2443c:	ldr	r3, [sp, #68]	; 0x44
   24440:	mov	r5, r0
   24444:	add	ip, r3, r0, lsl #2
   24448:	b	243c4 <__assert_fail@plt+0x12038>
   2444c:	mov	r0, r5
   24450:	ldr	r3, [r8]
   24454:	add	r4, sp, #160	; 0xa0
   24458:	mov	r1, #1
   2445c:	str	r4, [sp, #68]	; 0x44
   24460:	blx	r3
   24464:	mov	r2, #1024	; 0x400
   24468:	mov	r1, #0
   2446c:	mov	r5, r0
   24470:	str	r0, [sp, #104]	; 0x68
   24474:	mov	r0, r4
   24478:	bl	12110 <memset@plt>
   2447c:	cmp	r5, #0
   24480:	bne	2437c <__assert_fail@plt+0x11ff0>
   24484:	ldr	r3, [sp, #68]	; 0x44
   24488:	mov	r0, #10
   2448c:	str	r3, [sp, #136]	; 0x88
   24490:	bl	1211c <putchar@plt>
   24494:	add	r9, fp, #1
   24498:	cmp	r9, r7
   2449c:	bcc	2456c <__assert_fail@plt+0x121e0>
   244a0:	sub	r1, r7, fp
   244a4:	sub	r3, r1, #1
   244a8:	cmp	r3, #7
   244ac:	bhi	24ee0 <__assert_fail@plt+0x12b54>
   244b0:	mov	r0, fp
   244b4:	ldr	r3, [r8]
   244b8:	blx	r3
   244bc:	subs	r4, r0, #0
   244c0:	beq	24ee0 <__assert_fail@plt+0x12b54>
   244c4:	sub	r3, r4, #1
   244c8:	cmp	r3, #9
   244cc:	ldrls	pc, [pc, r3, lsl #2]
   244d0:	b	24f1c <__assert_fail@plt+0x12b90>
   244d4:	andeq	r4, r2, r8, asr #16
   244d8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   244dc:	andeq	r4, r2, ip, ror #14
   244e0:	andeq	r4, r2, r0, asr r7
   244e4:	strdeq	r4, [r2], -r0
   244e8:	muleq	r2, r0, r6
   244ec:	andeq	r4, r2, ip, asr #12
   244f0:	strdeq	r4, [r2], -r8
   244f4:	muleq	r2, r0, r5
   244f8:	andeq	r4, r2, r8, lsl r5
   244fc:	mov	r1, sl
   24500:	mov	r0, r9
   24504:	ldr	r3, [r8]
   24508:	blx	r3
   2450c:	strd	r0, [sp, #96]	; 0x60
   24510:	mov	r6, r0
   24514:	b	24304 <__assert_fail@plt+0x11f78>
   24518:	add	fp, r9, sl
   2451c:	cmp	fp, r7
   24520:	bcc	2497c <__assert_fail@plt+0x125f0>
   24524:	cmp	r9, r7
   24528:	bcs	2453c <__assert_fail@plt+0x121b0>
   2452c:	sub	r1, r7, r9
   24530:	sub	r3, r1, #1
   24534:	cmp	r3, #7
   24538:	bls	24980 <__assert_fail@plt+0x125f4>
   2453c:	mov	r4, #0
   24540:	ldr	r1, [pc, #3004]	; 25104 <__assert_fail@plt+0x12d78>
   24544:	mov	r2, #5
   24548:	mov	r0, #0
   2454c:	bl	11ea0 <dcgettext@plt>
   24550:	mov	r1, r4
   24554:	bl	11dbc <printf@plt>
   24558:	cmp	r7, fp
   2455c:	bls	24244 <__assert_fail@plt+0x11eb8>
   24560:	add	r9, fp, #1
   24564:	cmp	r9, r7
   24568:	bcs	244a0 <__assert_fail@plt+0x12114>
   2456c:	mov	r0, fp
   24570:	ldr	r3, [r8]
   24574:	mov	r1, #1
   24578:	blx	r3
   2457c:	subs	r4, r0, #0
   24580:	bne	244c4 <__assert_fail@plt+0x12138>
   24584:	mov	r0, #10
   24588:	bl	1211c <putchar@plt>
   2458c:	b	24158 <__assert_fail@plt+0x11dcc>
   24590:	mov	r3, r7
   24594:	mov	r2, #0
   24598:	add	r1, sp, #152	; 0x98
   2459c:	mov	r0, r9
   245a0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   245a4:	mov	r4, r0
   245a8:	ldr	r0, [sp, #152]	; 0x98
   245ac:	add	r0, r9, r0
   245b0:	add	fp, r0, sl
   245b4:	cmp	fp, r7
   245b8:	bcc	249a8 <__assert_fail@plt+0x1261c>
   245bc:	cmp	r7, r0
   245c0:	bls	245d4 <__assert_fail@plt+0x12248>
   245c4:	sub	r1, r7, r0
   245c8:	sub	r3, r1, #1
   245cc:	cmp	r3, #7
   245d0:	bls	249ac <__assert_fail@plt+0x12620>
   245d4:	mov	r5, #0
   245d8:	ldr	r1, [pc, #2856]	; 25108 <__assert_fail@plt+0x12d7c>
   245dc:	mov	r2, #5
   245e0:	mov	r0, #0
   245e4:	bl	11ea0 <dcgettext@plt>
   245e8:	mov	r2, r5
   245ec:	mov	r1, r4
   245f0:	bl	11dbc <printf@plt>
   245f4:	b	24558 <__assert_fail@plt+0x121cc>
   245f8:	mov	r3, r7
   245fc:	mov	r2, #0
   24600:	add	r1, sp, #152	; 0x98
   24604:	mov	r0, r9
   24608:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2460c:	mov	r4, r0
   24610:	ldr	r0, [sp, #152]	; 0x98
   24614:	add	r0, r9, r0
   24618:	add	fp, r0, sl
   2461c:	cmp	fp, r7
   24620:	bcc	24994 <__assert_fail@plt+0x12608>
   24624:	cmp	r7, r0
   24628:	bls	2463c <__assert_fail@plt+0x122b0>
   2462c:	sub	r1, r7, r0
   24630:	sub	r3, r1, #1
   24634:	cmp	r3, #7
   24638:	bls	24998 <__assert_fail@plt+0x1260c>
   2463c:	mov	r5, #0
   24640:	mov	r2, #5
   24644:	ldr	r1, [pc, #2752]	; 2510c <__assert_fail@plt+0x12d80>
   24648:	b	245e0 <__assert_fail@plt+0x12254>
   2464c:	add	fp, r9, sl
   24650:	cmp	fp, r7
   24654:	bcc	24944 <__assert_fail@plt+0x125b8>
   24658:	cmp	r9, r7
   2465c:	bcs	24670 <__assert_fail@plt+0x122e4>
   24660:	sub	r1, r7, r9
   24664:	sub	r3, r1, #1
   24668:	cmp	r3, #7
   2466c:	bls	24948 <__assert_fail@plt+0x125bc>
   24670:	mov	r4, #0
   24674:	mov	r2, #5
   24678:	ldr	r1, [pc, #2704]	; 25110 <__assert_fail@plt+0x12d84>
   2467c:	mov	r0, #0
   24680:	bl	11ea0 <dcgettext@plt>
   24684:	mov	r1, r4
   24688:	bl	11dbc <printf@plt>
   2468c:	b	24558 <__assert_fail@plt+0x121cc>
   24690:	mov	r3, r7
   24694:	mov	r2, #0
   24698:	add	r1, sp, #152	; 0x98
   2469c:	mov	r0, r9
   246a0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   246a4:	mov	r4, r0
   246a8:	ldr	r0, [sp, #152]	; 0x98
   246ac:	add	r0, r9, r0
   246b0:	add	fp, r0, sl
   246b4:	cmp	fp, r7
   246b8:	bcc	2496c <__assert_fail@plt+0x125e0>
   246bc:	cmp	r7, r0
   246c0:	bls	246d4 <__assert_fail@plt+0x12348>
   246c4:	sub	r1, r7, r0
   246c8:	sub	r3, r1, #1
   246cc:	cmp	r3, #7
   246d0:	bls	24970 <__assert_fail@plt+0x125e4>
   246d4:	mov	r0, #0
   246d8:	mov	r1, #0
   246dc:	bl	1a0d4 <__assert_fail@plt+0x7d48>
   246e0:	mov	r2, #5
   246e4:	ldr	r1, [pc, #2600]	; 25114 <__assert_fail@plt+0x12d88>
   246e8:	mov	r5, r0
   246ec:	b	245e0 <__assert_fail@plt+0x12254>
   246f0:	mov	r3, r7
   246f4:	mov	r2, #0
   246f8:	add	r1, sp, #152	; 0x98
   246fc:	mov	r0, r9
   24700:	bl	1b3b0 <__assert_fail@plt+0x9024>
   24704:	mov	r4, r0
   24708:	ldr	r0, [sp, #152]	; 0x98
   2470c:	add	r0, r9, r0
   24710:	add	fp, r0, sl
   24714:	cmp	fp, r7
   24718:	bcc	2495c <__assert_fail@plt+0x125d0>
   2471c:	cmp	r7, r0
   24720:	bls	24734 <__assert_fail@plt+0x123a8>
   24724:	sub	r1, r7, r0
   24728:	sub	r3, r1, #1
   2472c:	cmp	r3, #7
   24730:	bls	24960 <__assert_fail@plt+0x125d4>
   24734:	mov	r0, #0
   24738:	mov	r1, #0
   2473c:	bl	1a0d4 <__assert_fail@plt+0x7d48>
   24740:	mov	r2, #5
   24744:	ldr	r1, [pc, #2508]	; 25118 <__assert_fail@plt+0x12d8c>
   24748:	mov	r5, r0
   2474c:	b	245e0 <__assert_fail@plt+0x12254>
   24750:	mov	r2, #5
   24754:	ldr	r1, [pc, #2496]	; 2511c <__assert_fail@plt+0x12d90>
   24758:	mov	r0, #0
   2475c:	bl	11ea0 <dcgettext@plt>
   24760:	mov	fp, r9
   24764:	bl	11dbc <printf@plt>
   24768:	b	24558 <__assert_fail@plt+0x121cc>
   2476c:	add	r3, sp, #160	; 0xa0
   24770:	add	r4, sp, #152	; 0x98
   24774:	str	r3, [sp, #104]	; 0x68
   24778:	mov	r2, #0
   2477c:	mov	r3, r7
   24780:	mov	r0, r9
   24784:	mov	r1, r4
   24788:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2478c:	ldr	fp, [sp, #152]	; 0x98
   24790:	mov	r1, r4
   24794:	add	r9, r9, fp
   24798:	mov	r3, r7
   2479c:	mov	r2, #0
   247a0:	str	r0, [sp, #68]	; 0x44
   247a4:	mov	r0, r9
   247a8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   247ac:	ldr	fp, [sp, #152]	; 0x98
   247b0:	add	fp, r9, fp
   247b4:	str	r0, [sp, #56]	; 0x38
   247b8:	ldr	r0, [sp, #92]	; 0x5c
   247bc:	cmp	r0, #0
   247c0:	bne	24894 <__assert_fail@plt+0x12508>
   247c4:	mov	r2, #5
   247c8:	ldr	r1, [pc, #2384]	; 25120 <__assert_fail@plt+0x12d94>
   247cc:	bl	11ea0 <dcgettext@plt>
   247d0:	bl	412ac <error@@Base>
   247d4:	mov	r2, #5
   247d8:	ldr	r1, [pc, #2372]	; 25124 <__assert_fail@plt+0x12d98>
   247dc:	mov	r0, #0
   247e0:	bl	11ea0 <dcgettext@plt>
   247e4:	ldr	r2, [sp, #56]	; 0x38
   247e8:	ldr	r1, [sp, #68]	; 0x44
   247ec:	bl	11dbc <printf@plt>
   247f0:	b	24558 <__assert_fail@plt+0x121cc>
   247f4:	mov	r2, #0
   247f8:	mov	r3, r7
   247fc:	mov	r0, r9
   24800:	add	r1, sp, #152	; 0x98
   24804:	bl	1b3b0 <__assert_fail@plt+0x9024>
   24808:	mov	r4, r0
   2480c:	ldr	r0, [sp, #152]	; 0x98
   24810:	add	r9, r9, r0
   24814:	sub	r1, r7, r9
   24818:	mov	r0, r9
   2481c:	bl	1217c <strnlen@plt>
   24820:	ldr	r1, [pc, #2304]	; 25128 <__assert_fail@plt+0x12d9c>
   24824:	mov	r2, #5
   24828:	add	fp, r0, #1
   2482c:	mov	r0, #0
   24830:	bl	11ea0 <dcgettext@plt>
   24834:	mov	r2, r9
   24838:	mov	r1, r4
   2483c:	add	fp, r9, fp
   24840:	bl	11dbc <printf@plt>
   24844:	b	24558 <__assert_fail@plt+0x121cc>
   24848:	mov	r2, #0
   2484c:	mov	r3, r7
   24850:	mov	r0, r9
   24854:	add	r1, sp, #152	; 0x98
   24858:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2485c:	mov	r4, r0
   24860:	ldr	r0, [sp, #152]	; 0x98
   24864:	add	r9, r9, r0
   24868:	sub	r1, r7, r9
   2486c:	mov	r0, r9
   24870:	bl	1217c <strnlen@plt>
   24874:	mov	r2, #5
   24878:	ldr	r1, [pc, #2220]	; 2512c <__assert_fail@plt+0x12da0>
   2487c:	b	24828 <__assert_fail@plt+0x1249c>
   24880:	sub	r1, r7, r9
   24884:	sub	r3, r1, #1
   24888:	cmp	r3, #7
   2488c:	bhi	242f4 <__assert_fail@plt+0x11f68>
   24890:	b	24500 <__assert_fail@plt+0x12174>
   24894:	ldr	r6, [pc, #2196]	; 25130 <__assert_fail@plt+0x12da4>
   24898:	ldr	r3, [sp, #56]	; 0x38
   2489c:	ldr	r4, [r6, #304]	; 0x130
   248a0:	str	r3, [sp, #80]	; 0x50
   248a4:	mov	r3, #0
   248a8:	cmp	r4, r3
   248ac:	str	r3, [sp, #84]	; 0x54
   248b0:	beq	247d4 <__assert_fail@plt+0x12448>
   248b4:	add	r6, r6, #320	; 0x140
   248b8:	ldrd	r0, [sp, #96]	; 0x60
   248bc:	ldrd	r2, [r6]
   248c0:	cmp	r1, r3
   248c4:	cmpeq	r0, r2
   248c8:	bcs	247d4 <__assert_fail@plt+0x12448>
   248cc:	ldrd	r0, [sp, #80]	; 0x50
   248d0:	orrs	r1, r0, r1
   248d4:	beq	247d4 <__assert_fail@plt+0x12448>
   248d8:	ldrd	r0, [sp, #96]	; 0x60
   248dc:	add	ip, r4, r2
   248e0:	str	ip, [sp, #116]	; 0x74
   248e4:	add	r5, r4, r0
   248e8:	add	r9, r5, #4
   248ec:	cmp	ip, r9
   248f0:	bhi	249bc <__assert_fail@plt+0x12630>
   248f4:	cmp	r5, ip
   248f8:	bcc	24da4 <__assert_fail@plt+0x12a18>
   248fc:	mov	r0, #4
   24900:	mov	r1, #0
   24904:	mov	ip, #4
   24908:	str	ip, [sp, #132]	; 0x84
   2490c:	cmp	r3, r1
   24910:	cmpeq	r2, r0
   24914:	bcc	247d4 <__assert_fail@plt+0x12448>
   24918:	ldr	r2, [sp, #116]	; 0x74
   2491c:	add	r3, r9, #2
   24920:	cmp	r2, r3
   24924:	bhi	24b70 <__assert_fail@plt+0x127e4>
   24928:	cmp	r2, r9
   2492c:	bls	247d4 <__assert_fail@plt+0x12448>
   24930:	sub	r1, r2, r9
   24934:	sub	r3, r1, #1
   24938:	cmp	r3, #7
   2493c:	bhi	247d4 <__assert_fail@plt+0x12448>
   24940:	b	24b74 <__assert_fail@plt+0x127e8>
   24944:	mov	r1, sl
   24948:	mov	r0, r9
   2494c:	ldr	r3, [r8]
   24950:	blx	r3
   24954:	mov	r4, r0
   24958:	b	24674 <__assert_fail@plt+0x122e8>
   2495c:	mov	r1, sl
   24960:	ldr	r3, [r8]
   24964:	blx	r3
   24968:	b	2473c <__assert_fail@plt+0x123b0>
   2496c:	mov	r1, sl
   24970:	ldr	r3, [r8]
   24974:	blx	r3
   24978:	b	246dc <__assert_fail@plt+0x12350>
   2497c:	mov	r1, sl
   24980:	mov	r0, r9
   24984:	ldr	r3, [r8]
   24988:	blx	r3
   2498c:	mov	r4, r0
   24990:	b	24540 <__assert_fail@plt+0x121b4>
   24994:	mov	r1, sl
   24998:	ldr	r3, [r8]
   2499c:	blx	r3
   249a0:	mov	r5, r0
   249a4:	b	24640 <__assert_fail@plt+0x122b4>
   249a8:	mov	r1, sl
   249ac:	ldr	r3, [r8]
   249b0:	blx	r3
   249b4:	mov	r5, r0
   249b8:	b	245d8 <__assert_fail@plt+0x1224c>
   249bc:	mov	r1, #4
   249c0:	ldr	r3, [r8]
   249c4:	mov	r0, r5
   249c8:	blx	r3
   249cc:	mov	r3, #0
   249d0:	mvn	r2, #0
   249d4:	cmp	r1, r3
   249d8:	cmpeq	r0, r2
   249dc:	beq	24e44 <__assert_fail@plt+0x12ab8>
   249e0:	mov	r2, #4
   249e4:	mov	r3, #0
   249e8:	mov	ip, #4
   249ec:	str	ip, [sp, #132]	; 0x84
   249f0:	adds	r4, r2, r0
   249f4:	adcs	r5, r3, r1
   249f8:	mov	r2, #0
   249fc:	mov	r3, #0
   24a00:	movcs	r2, #1
   24a04:	movcs	r3, #0
   24a08:	orrs	r3, r2, r3
   24a0c:	mov	r0, r4
   24a10:	mov	r1, r5
   24a14:	bne	247d4 <__assert_fail@plt+0x12448>
   24a18:	ldrd	r2, [r6]
   24a1c:	b	2490c <__assert_fail@plt+0x12580>
   24a20:	ldr	r1, [pc, #1804]	; 25134 <__assert_fail@plt+0x12da8>
   24a24:	mov	r0, #0
   24a28:	bl	11ea0 <dcgettext@plt>
   24a2c:	mov	r1, r5
   24a30:	bl	11dbc <printf@plt>
   24a34:	ldrd	r2, [sp, #56]	; 0x38
   24a38:	str	r9, [sp, #132]	; 0x84
   24a3c:	mov	r4, #0
   24a40:	subs	r1, r2, #1
   24a44:	mov	r5, #0
   24a48:	mov	r9, r7
   24a4c:	sbc	r3, r3, #0
   24a50:	str	r1, [sp, #120]	; 0x78
   24a54:	str	r3, [sp, #124]	; 0x7c
   24a58:	add	sl, fp, #1
   24a5c:	cmp	sl, r9
   24a60:	mov	r1, #1
   24a64:	bcc	24af8 <__assert_fail@plt+0x1276c>
   24a68:	sub	r1, r9, fp
   24a6c:	cmp	r9, fp
   24a70:	sub	r3, r1, #1
   24a74:	bls	24a80 <__assert_fail@plt+0x126f4>
   24a78:	cmp	r3, #7
   24a7c:	bls	24af8 <__assert_fail@plt+0x1276c>
   24a80:	mov	r0, #0
   24a84:	bl	1a3b4 <__assert_fail@plt+0x8028>
   24a88:	ldrd	r2, [sp, #56]	; 0x38
   24a8c:	mov	r1, r0
   24a90:	subs	r0, r2, #1
   24a94:	sbc	r3, r3, #0
   24a98:	str	r0, [sp, #72]	; 0x48
   24a9c:	str	r3, [sp, #76]	; 0x4c
   24aa0:	ldrd	r2, [sp, #72]	; 0x48
   24aa4:	cmp	r3, r5
   24aa8:	cmpeq	r2, r4
   24aac:	beq	24e30 <__assert_fail@plt+0x12aa4>
   24ab0:	ldr	r2, [pc, #1664]	; 25138 <__assert_fail@plt+0x12dac>
   24ab4:	ldr	r0, [pc, #1664]	; 2513c <__assert_fail@plt+0x12db0>
   24ab8:	bl	11dbc <printf@plt>
   24abc:	mov	r8, #0
   24ac0:	mov	r2, #5
   24ac4:	ldr	r1, [pc, #1652]	; 25140 <__assert_fail@plt+0x12db4>
   24ac8:	mov	r0, #0
   24acc:	bl	11ea0 <dcgettext@plt>
   24ad0:	mov	r4, r0
   24ad4:	mov	r0, r8
   24ad8:	bl	1a3b4 <__assert_fail@plt+0x8028>
   24adc:	mov	r1, r0
   24ae0:	mov	r0, r4
   24ae4:	bl	412ac <error@@Base>
   24ae8:	mov	r0, #0
   24aec:	add	sp, sp, #1184	; 0x4a0
   24af0:	add	sp, sp, #4
   24af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24af8:	ldr	r3, [r8]
   24afc:	mov	r0, fp
   24b00:	blx	r3
   24b04:	mov	fp, sl
   24b08:	mov	r6, r0
   24b0c:	bl	1a3b4 <__assert_fail@plt+0x8028>
   24b10:	ldrd	r2, [sp, #120]	; 0x78
   24b14:	cmp	r3, r5
   24b18:	ldr	r3, [pc, #1572]	; 25144 <__assert_fail@plt+0x12db8>
   24b1c:	cmpeq	r2, r4
   24b20:	ldr	r2, [pc, #1552]	; 25138 <__assert_fail@plt+0x12dac>
   24b24:	moveq	r2, r3
   24b28:	mov	r1, r0
   24b2c:	ldr	r0, [pc, #1544]	; 2513c <__assert_fail@plt+0x12db0>
   24b30:	bl	11dbc <printf@plt>
   24b34:	cmp	r6, #3
   24b38:	bcc	24f14 <__assert_fail@plt+0x12b88>
   24b3c:	cmp	r6, #15
   24b40:	bls	24b4c <__assert_fail@plt+0x127c0>
   24b44:	cmp	r6, #23
   24b48:	bne	24f14 <__assert_fail@plt+0x12b88>
   24b4c:	ldrd	r2, [sp, #56]	; 0x38
   24b50:	adds	r4, r4, #1
   24b54:	adc	r5, r5, #0
   24b58:	cmp	r5, r3
   24b5c:	cmpeq	r4, r2
   24b60:	bne	24a58 <__assert_fail@plt+0x126cc>
   24b64:	mov	r7, r9
   24b68:	ldr	r9, [sp, #132]	; 0x84
   24b6c:	b	24410 <__assert_fail@plt+0x12084>
   24b70:	mov	r1, #2
   24b74:	ldr	r3, [r8]
   24b78:	mov	r0, r9
   24b7c:	blx	r3
   24b80:	sub	r3, r0, #2
   24b84:	cmp	r3, #2
   24b88:	bhi	247d4 <__assert_fail@plt+0x12448>
   24b8c:	ldr	r3, [sp, #132]	; 0x84
   24b90:	cmp	r0, #4
   24b94:	add	r3, r3, #3
   24b98:	add	r3, r9, r3
   24b9c:	addeq	r3, r3, #1
   24ba0:	ldr	r2, [sp, #116]	; 0x74
   24ba4:	add	r9, r3, #4
   24ba8:	cmp	r2, r9
   24bac:	add	r0, r3, #3
   24bb0:	bls	24d88 <__assert_fail@plt+0x129fc>
   24bb4:	mov	r1, #1
   24bb8:	ldr	r3, [r8]
   24bbc:	blx	r3
   24bc0:	cmp	r0, #0
   24bc4:	beq	247d4 <__assert_fail@plt+0x12448>
   24bc8:	sub	r0, r0, #1
   24bcc:	ldr	r4, [sp, #116]	; 0x74
   24bd0:	add	r9, r9, r0
   24bd4:	cmp	r4, r9
   24bd8:	movhi	r6, r9
   24bdc:	bhi	24bf8 <__assert_fail@plt+0x1286c>
   24be0:	b	247d4 <__assert_fail@plt+0x12448>
   24be4:	bl	1217c <strnlen@plt>
   24be8:	add	r0, r0, #1
   24bec:	add	r6, r6, r0
   24bf0:	cmp	r4, r6
   24bf4:	bls	247d4 <__assert_fail@plt+0x12448>
   24bf8:	ldrb	r3, [r6]
   24bfc:	sub	r1, r4, r6
   24c00:	mov	r0, r6
   24c04:	cmp	r3, #0
   24c08:	bne	24be4 <__assert_fail@plt+0x12858>
   24c0c:	add	r5, r6, #1
   24c10:	cmp	r4, r5
   24c14:	str	r4, [sp, #116]	; 0x74
   24c18:	bls	247d4 <__assert_fail@plt+0x12448>
   24c1c:	ldrd	r0, [sp, #80]	; 0x50
   24c20:	ldrb	r2, [r6, #1]
   24c24:	cmp	r1, #0
   24c28:	cmpeq	r0, #1
   24c2c:	movne	r3, #1
   24c30:	moveq	r3, #0
   24c34:	cmp	r2, #0
   24c38:	moveq	r3, #0
   24c3c:	cmp	r3, #0
   24c40:	beq	24d08 <__assert_fail@plt+0x1297c>
   24c44:	str	sl, [sp, #132]	; 0x84
   24c48:	str	r9, [sp, #140]	; 0x8c
   24c4c:	mov	sl, r0
   24c50:	mov	r9, fp
   24c54:	mov	fp, r1
   24c58:	sub	r1, r4, r5
   24c5c:	mov	r0, r5
   24c60:	bl	1217c <strnlen@plt>
   24c64:	mov	r3, r4
   24c68:	mov	r2, #0
   24c6c:	add	r1, sp, #156	; 0x9c
   24c70:	add	r0, r0, #1
   24c74:	add	r5, r5, r0
   24c78:	mov	r0, r5
   24c7c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   24c80:	ldr	r6, [sp, #156]	; 0x9c
   24c84:	mov	r3, r4
   24c88:	add	r6, r5, r6
   24c8c:	mov	r0, r6
   24c90:	mov	r2, #0
   24c94:	add	r1, sp, #156	; 0x9c
   24c98:	bl	1b3b0 <__assert_fail@plt+0x9024>
   24c9c:	ldr	r2, [sp, #156]	; 0x9c
   24ca0:	mov	r3, r4
   24ca4:	add	r6, r6, r2
   24ca8:	mov	r0, r6
   24cac:	mov	r2, #0
   24cb0:	add	r1, sp, #156	; 0x9c
   24cb4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   24cb8:	ldr	r3, [sp, #156]	; 0x9c
   24cbc:	subs	sl, sl, #1
   24cc0:	add	r5, r6, r3
   24cc4:	sbc	fp, fp, #0
   24cc8:	cmp	r4, r5
   24ccc:	bls	24ef0 <__assert_fail@plt+0x12b64>
   24cd0:	ldrb	r2, [r6, r3]
   24cd4:	cmp	fp, #0
   24cd8:	cmpeq	sl, #1
   24cdc:	movne	r3, #1
   24ce0:	moveq	r3, #0
   24ce4:	cmp	r2, #0
   24ce8:	moveq	r3, #0
   24cec:	cmp	r3, #0
   24cf0:	bne	24c58 <__assert_fail@plt+0x128cc>
   24cf4:	strd	sl, [sp, #80]	; 0x50
   24cf8:	mov	fp, r9
   24cfc:	ldr	sl, [sp, #132]	; 0x84
   24d00:	ldr	r9, [sp, #140]	; 0x8c
   24d04:	str	r4, [sp, #116]	; 0x74
   24d08:	cmp	r2, #0
   24d0c:	beq	247d4 <__assert_fail@plt+0x12448>
   24d10:	ldr	r4, [sp, #116]	; 0x74
   24d14:	mov	r0, r5
   24d18:	sub	r1, r4, r5
   24d1c:	bl	1217c <strnlen@plt>
   24d20:	add	r0, r0, #1
   24d24:	add	r0, r5, r0
   24d28:	cmp	r4, r0
   24d2c:	bls	247d4 <__assert_fail@plt+0x12448>
   24d30:	ldr	r3, [sp, #104]	; 0x68
   24d34:	mov	r2, #0
   24d38:	sub	r1, r3, #4
   24d3c:	mov	r3, r4
   24d40:	bl	1b3b0 <__assert_fail@plt+0x9024>
   24d44:	mov	r2, r0
   24d48:	mov	r3, r1
   24d4c:	orrs	r1, r2, r3
   24d50:	ldrne	r4, [sp, #116]	; 0x74
   24d54:	bne	24ddc <__assert_fail@plt+0x12a50>
   24d58:	ldr	r9, [pc, #1000]	; 25148 <__assert_fail@plt+0x12dbc>
   24d5c:	mov	r2, #5
   24d60:	ldr	r1, [pc, #996]	; 2514c <__assert_fail@plt+0x12dc0>
   24d64:	mov	r0, #0
   24d68:	bl	11ea0 <dcgettext@plt>
   24d6c:	mov	r3, r9
   24d70:	stm	sp, {r3, r5}
   24d74:	ldr	r2, [sp, #56]	; 0x38
   24d78:	mov	r3, r9
   24d7c:	ldr	r1, [sp, #68]	; 0x44
   24d80:	bl	11dbc <printf@plt>
   24d84:	b	24558 <__assert_fail@plt+0x121cc>
   24d88:	cmp	r2, r0
   24d8c:	bls	247d4 <__assert_fail@plt+0x12448>
   24d90:	sub	r1, r2, r0
   24d94:	sub	r3, r1, #1
   24d98:	cmp	r3, #7
   24d9c:	bls	24bb8 <__assert_fail@plt+0x1282c>
   24da0:	b	247d4 <__assert_fail@plt+0x12448>
   24da4:	sub	r1, r2, r0
   24da8:	sub	r0, r1, #1
   24dac:	cmp	r0, #7
   24db0:	bhi	248fc <__assert_fail@plt+0x12570>
   24db4:	b	249c0 <__assert_fail@plt+0x12634>
   24db8:	strd	r2, [sp, #104]	; 0x68
   24dbc:	bl	1217c <strnlen@plt>
   24dc0:	ldrd	r2, [sp, #104]	; 0x68
   24dc4:	subs	r2, r2, #1
   24dc8:	sbc	r3, r3, #0
   24dcc:	add	r0, r0, #1
   24dd0:	add	r9, r9, r0
   24dd4:	cmp	r4, r9
   24dd8:	bls	247d4 <__assert_fail@plt+0x12448>
   24ddc:	ldrb	lr, [r9]
   24de0:	cmp	r3, #0
   24de4:	cmpeq	r2, #1
   24de8:	movhi	ip, #1
   24dec:	movls	ip, #0
   24df0:	cmp	lr, #0
   24df4:	moveq	ip, #0
   24df8:	cmp	ip, #0
   24dfc:	sub	r1, r4, r9
   24e00:	mov	r0, r9
   24e04:	bne	24db8 <__assert_fail@plt+0x12a2c>
   24e08:	cmp	r4, r9
   24e0c:	bls	247d4 <__assert_fail@plt+0x12448>
   24e10:	cmp	lr, #0
   24e14:	beq	247d4 <__assert_fail@plt+0x12448>
   24e18:	mov	r0, ip
   24e1c:	mov	r2, #5
   24e20:	ldr	r1, [pc, #804]	; 2514c <__assert_fail@plt+0x12dc0>
   24e24:	bl	11ea0 <dcgettext@plt>
   24e28:	ldr	r3, [pc, #800]	; 25150 <__assert_fail@plt+0x12dc4>
   24e2c:	b	24d70 <__assert_fail@plt+0x129e4>
   24e30:	ldr	r2, [pc, #780]	; 25144 <__assert_fail@plt+0x12db8>
   24e34:	ldr	r0, [pc, #768]	; 2513c <__assert_fail@plt+0x12db0>
   24e38:	bl	11dbc <printf@plt>
   24e3c:	mov	r8, #0
   24e40:	b	24ac0 <__assert_fail@plt+0x12734>
   24e44:	ldr	r3, [sp, #116]	; 0x74
   24e48:	add	r5, r5, #12
   24e4c:	cmp	r3, r5
   24e50:	bhi	24ea8 <__assert_fail@plt+0x12b1c>
   24e54:	cmp	r3, r9
   24e58:	bls	24e70 <__assert_fail@plt+0x12ae4>
   24e5c:	ldr	r3, [sp, #116]	; 0x74
   24e60:	sub	r1, r3, r9
   24e64:	sub	r3, r1, #1
   24e68:	cmp	r3, #7
   24e6c:	bls	24eac <__assert_fail@plt+0x12b20>
   24e70:	mov	ip, #8
   24e74:	mov	r9, r5
   24e78:	ldrd	r2, [r6]
   24e7c:	mov	r0, #12
   24e80:	mov	r1, #0
   24e84:	str	ip, [sp, #132]	; 0x84
   24e88:	b	2490c <__assert_fail@plt+0x12580>
   24e8c:	mov	fp, r5
   24e90:	str	r4, [sp, #136]	; 0x88
   24e94:	mov	r0, #10
   24e98:	bl	1211c <putchar@plt>
   24e9c:	cmp	fp, r7
   24ea0:	bcc	24494 <__assert_fail@plt+0x12108>
   24ea4:	b	24244 <__assert_fail@plt+0x11eb8>
   24ea8:	mov	r1, #8
   24eac:	mov	r0, r9
   24eb0:	ldr	r3, [r8]
   24eb4:	blx	r3
   24eb8:	mov	ip, #8
   24ebc:	mov	r9, r5
   24ec0:	mov	r2, #12
   24ec4:	mov	r3, #0
   24ec8:	str	ip, [sp, #132]	; 0x84
   24ecc:	b	249f0 <__assert_fail@plt+0x12664>
   24ed0:	ldr	r3, [sp, #68]	; 0x44
   24ed4:	ldr	sl, [sp, #136]	; 0x88
   24ed8:	str	r3, [sp, #136]	; 0x88
   24edc:	b	24e94 <__assert_fail@plt+0x12b08>
   24ee0:	mov	r0, #10
   24ee4:	bl	1211c <putchar@plt>
   24ee8:	mov	r0, #1
   24eec:	b	241a0 <__assert_fail@plt+0x11e14>
   24ef0:	strd	sl, [sp, #80]	; 0x50
   24ef4:	ldr	sl, [sp, #132]	; 0x84
   24ef8:	mov	fp, r9
   24efc:	b	247d4 <__assert_fail@plt+0x12448>
   24f00:	mov	r2, #0
   24f04:	mov	r3, #0
   24f08:	mov	r5, r9
   24f0c:	strd	r2, [sp, #96]	; 0x60
   24f10:	b	2431c <__assert_fail@plt+0x11f90>
   24f14:	mov	r8, r6
   24f18:	b	24ac0 <__assert_fail@plt+0x12734>
   24f1c:	ldr	r3, [sp, #136]	; 0x88
   24f20:	cmp	r3, #0
   24f24:	beq	24f7c <__assert_fail@plt+0x12bf0>
   24f28:	ldr	r5, [r3, r4, lsl #2]
   24f2c:	cmp	r5, #0
   24f30:	beq	24f7c <__assert_fail@plt+0x12bf0>
   24f34:	mov	r3, r7
   24f38:	mov	r2, #0
   24f3c:	add	r1, sp, #152	; 0x98
   24f40:	mov	r0, r5
   24f44:	bl	1b3b0 <__assert_fail@plt+0x9024>
   24f48:	mov	r2, r0
   24f4c:	mov	r3, r1
   24f50:	strd	r2, [sp, #56]	; 0x38
   24f54:	orrs	r3, r2, r3
   24f58:	bne	24f9c <__assert_fail@plt+0x12c10>
   24f5c:	mov	r2, #5
   24f60:	ldr	r1, [pc, #492]	; 25154 <__assert_fail@plt+0x12dc8>
   24f64:	mov	r0, #0
   24f68:	bl	11ea0 <dcgettext@plt>
   24f6c:	mov	r1, r4
   24f70:	mov	fp, r9
   24f74:	bl	11dbc <printf@plt>
   24f78:	b	24558 <__assert_fail@plt+0x121cc>
   24f7c:	mov	r2, #5
   24f80:	ldr	r1, [pc, #464]	; 25158 <__assert_fail@plt+0x12dcc>
   24f84:	mov	r0, #0
   24f88:	bl	11ea0 <dcgettext@plt>
   24f8c:	mov	r1, r4
   24f90:	bl	412ac <error@@Base>
   24f94:	mov	r0, #0
   24f98:	b	241a0 <__assert_fail@plt+0x11e14>
   24f9c:	ldr	r3, [sp, #152]	; 0x98
   24fa0:	mov	r2, #5
   24fa4:	add	r3, r5, r3
   24fa8:	ldr	r1, [pc, #428]	; 2515c <__assert_fail@plt+0x12dd0>
   24fac:	mov	r0, #0
   24fb0:	str	r3, [sp, #68]	; 0x44
   24fb4:	bl	11ea0 <dcgettext@plt>
   24fb8:	mov	r1, r4
   24fbc:	bl	11dbc <printf@plt>
   24fc0:	ldrd	r2, [sp, #56]	; 0x38
   24fc4:	mov	fp, r9
   24fc8:	mov	r4, #0
   24fcc:	subs	r1, r2, #1
   24fd0:	sbc	r3, r3, #0
   24fd4:	str	r3, [sp, #148]	; 0x94
   24fd8:	ldr	r3, [sp, #68]	; 0x44
   24fdc:	mov	r9, fp
   24fe0:	mov	r6, #0
   24fe4:	mov	fp, sl
   24fe8:	mov	sl, r4
   24fec:	mov	r5, #0
   24ff0:	str	r1, [sp, #144]	; 0x90
   24ff4:	str	r5, [sp, #104]	; 0x68
   24ff8:	add	r2, r3, #1
   24ffc:	cmp	r2, r7
   25000:	str	r2, [sp, #68]	; 0x44
   25004:	bcc	250c8 <__assert_fail@plt+0x12d3c>
   25008:	cmp	r7, r3
   2500c:	bls	25020 <__assert_fail@plt+0x12c94>
   25010:	sub	r1, r7, r3
   25014:	sub	r0, r1, #1
   25018:	cmp	r0, #7
   2501c:	bls	250cc <__assert_fail@plt+0x12d40>
   25020:	mov	r1, #0
   25024:	ldr	r2, [sp, #88]	; 0x58
   25028:	mov	r3, #32
   2502c:	str	r2, [sp, #32]
   25030:	mov	r2, #0
   25034:	str	r2, [sp, #28]
   25038:	ldr	r2, [sp, #104]	; 0x68
   2503c:	str	r9, [sp]
   25040:	str	r2, [sp, #20]
   25044:	str	r2, [sp, #12]
   25048:	str	r3, [sp, #52]	; 0x34
   2504c:	mov	r2, #0
   25050:	mov	r3, #0
   25054:	str	r6, [sp, #48]	; 0x30
   25058:	str	r6, [sp, #44]	; 0x2c
   2505c:	str	r6, [sp, #40]	; 0x28
   25060:	str	r6, [sp, #36]	; 0x24
   25064:	str	fp, [sp, #24]
   25068:	str	sl, [sp, #16]
   2506c:	str	sl, [sp, #8]
   25070:	str	r7, [sp, #4]
   25074:	mov	r0, #0
   25078:	bl	1eb4c <__assert_fail@plt+0xc7c0>
   2507c:	ldrd	r2, [sp, #144]	; 0x90
   25080:	cmp	r3, r5
   25084:	cmpeq	r2, r4
   25088:	mov	r9, r0
   2508c:	beq	25098 <__assert_fail@plt+0x12d0c>
   25090:	mov	r0, #44	; 0x2c
   25094:	bl	1211c <putchar@plt>
   25098:	ldrd	r2, [sp, #56]	; 0x38
   2509c:	adds	r4, r4, #1
   250a0:	adc	r5, r5, #0
   250a4:	cmp	r5, r3
   250a8:	cmpeq	r4, r2
   250ac:	ldr	r3, [sp, #68]	; 0x44
   250b0:	bne	24ff8 <__assert_fail@plt+0x12c6c>
   250b4:	mov	r0, #10
   250b8:	mov	sl, fp
   250bc:	mov	fp, r9
   250c0:	bl	1211c <putchar@plt>
   250c4:	b	24558 <__assert_fail@plt+0x121cc>
   250c8:	mov	r1, #1
   250cc:	mov	r0, r3
   250d0:	ldr	r3, [r8]
   250d4:	blx	r3
   250d8:	mov	r1, r0
   250dc:	b	25024 <__assert_fail@plt+0x12c98>
   250e0:	andeq	sp, r4, r0, lsr #13
   250e4:	andeq	r9, r6, r0, ror #27
   250e8:	andeq	sp, r4, r4, ror #13
   250ec:	andeq	sp, r4, ip, lsl #14
   250f0:	andeq	sp, r4, r0, lsr r7
   250f4:	andeq	sp, r4, r4, lsl #16
   250f8:	andeq	sp, r4, r4, asr r7
   250fc:	andeq	sp, r4, ip, ror r7
   25100:	muleq	r4, ip, r7
   25104:	andeq	sp, r4, r4, lsl #20
   25108:	andeq	sp, r4, ip, asr #19
   2510c:	muleq	r4, r0, r9
   25110:	andeq	sp, r4, ip, ror #18
   25114:	andeq	sp, r4, ip, lsr r9
   25118:	andeq	sp, r4, ip, lsl #18
   2511c:	andeq	sp, r4, r0, lsr #17
   25120:	andeq	sp, r4, r0, lsr r8
   25124:	andeq	sp, r4, r0, ror r8
   25128:	andeq	sp, r4, r0, ror #17
   2512c:			; <UNDEFINED> instruction: 0x0004d8b4
   25130:	andeq	r6, r6, r0, ror #10
   25134:	andeq	sp, r4, r0, asr #15
   25138:	andeq	r8, r4, r4, lsl lr
   2513c:	andeq	sp, r4, r0, asr #31
   25140:	andeq	sp, r4, r0, ror #15
   25144:	andeq	sl, r4, r4, ror pc
   25148:	andeq	r9, r4, r4, lsr #5
   2514c:	andeq	sp, r4, r4, ror sl
   25150:	ldrdeq	r1, [r5], -ip
   25154:	andeq	sp, r4, r0, asr sl
   25158:	andeq	sp, r4, ip, lsr #20
   2515c:	andeq	sp, r4, r0, ror #20
   25160:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25164:	mov	sl, r2
   25168:	sub	sp, sp, #124	; 0x7c
   2516c:	add	r2, r0, #1
   25170:	cmp	r2, sl
   25174:	str	r2, [sp, #104]	; 0x68
   25178:	mov	r6, r1
   2517c:	str	r3, [sp, #76]	; 0x4c
   25180:	bcc	252a8 <__assert_fail@plt+0x12f1c>
   25184:	cmp	r0, sl
   25188:	bcc	25404 <__assert_fail@plt+0x13078>
   2518c:	ldr	fp, [sp, #104]	; 0x68
   25190:	add	r9, sp, #116	; 0x74
   25194:	mov	r3, #0
   25198:	str	r3, [sp, #68]	; 0x44
   2519c:	mov	r3, sl
   251a0:	mov	r2, #0
   251a4:	mov	r1, r9
   251a8:	mov	r0, fp
   251ac:	bl	1b3b0 <__assert_fail@plt+0x9024>
   251b0:	ldr	r3, [sp, #116]	; 0x74
   251b4:	add	r3, fp, r3
   251b8:	cmp	sl, r3
   251bc:	str	r3, [sp, #92]	; 0x5c
   251c0:	strd	r0, [sp, #96]	; 0x60
   251c4:	beq	2562c <__assert_fail@plt+0x132a0>
   251c8:	ldrd	r2, [sp, #96]	; 0x60
   251cc:	orrs	r3, r2, r3
   251d0:	mov	r2, #5
   251d4:	beq	2564c <__assert_fail@plt+0x132c0>
   251d8:	ldr	r1, [pc, #1212]	; 2569c <__assert_fail@plt+0x13310>
   251dc:	mov	r0, #0
   251e0:	bl	11ea0 <dcgettext@plt>
   251e4:	ldr	r3, [sp, #92]	; 0x5c
   251e8:	ldr	r1, [sp, #168]	; 0xa8
   251ec:	sub	r2, r3, r6
   251f0:	bl	11dbc <printf@plt>
   251f4:	mov	r2, #5
   251f8:	ldr	r1, [pc, #1184]	; 256a0 <__assert_fail@plt+0x13314>
   251fc:	mov	r0, #0
   25200:	mov	fp, #2
   25204:	bl	11ea0 <dcgettext@plt>
   25208:	bl	11dbc <printf@plt>
   2520c:	str	fp, [sp, #72]	; 0x48
   25210:	ldr	fp, [sp, #68]	; 0x44
   25214:	cmp	fp, #0
   25218:	beq	2538c <__assert_fail@plt+0x13000>
   2521c:	ldr	r3, [sp, #72]	; 0x48
   25220:	ldr	r4, [sp, #104]	; 0x68
   25224:	mov	r5, #0
   25228:	and	r8, r3, #1
   2522c:	mov	r2, #0
   25230:	mov	r3, sl
   25234:	mov	r0, r4
   25238:	mov	r1, r9
   2523c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25240:	ldr	r3, [sp, #116]	; 0x74
   25244:	add	r4, r4, r3
   25248:	cmp	r1, #0
   2524c:	cmpeq	r0, #1
   25250:	movne	r2, #1
   25254:	moveq	r2, #0
   25258:	cmp	r2, r8
   2525c:	mov	r6, r0
   25260:	mov	r7, r1
   25264:	beq	25360 <__assert_fail@plt+0x12fd4>
   25268:	subs	r3, r0, #1
   2526c:	str	r3, [sp, #56]	; 0x38
   25270:	sbc	r3, r1, #0
   25274:	str	r3, [sp, #60]	; 0x3c
   25278:	ldrd	r2, [sp, #56]	; 0x38
   2527c:	cmp	r3, #0
   25280:	cmpeq	r2, #4
   25284:	bhi	25418 <__assert_fail@plt+0x1308c>
   25288:	cmp	r2, #4
   2528c:	ldrls	pc, [pc, r2, lsl #2]
   25290:	b	25418 <__assert_fail@plt+0x1308c>
   25294:	andeq	r5, r2, ip, ror #7
   25298:	ldrdeq	r5, [r2], -r4
   2529c:			; <UNDEFINED> instruction: 0x000253bc
   252a0:	andeq	r5, r2, r4, lsr #7
   252a4:	andeq	r5, r2, ip, asr #6
   252a8:	mov	r1, #1
   252ac:	ldr	r3, [pc, #1008]	; 256a4 <__assert_fail@plt+0x13318>
   252b0:	ldr	r3, [r3]
   252b4:	blx	r3
   252b8:	ldr	fp, [sp, #104]	; 0x68
   252bc:	uxtb	r5, r0
   252c0:	cmp	r5, #0
   252c4:	str	r5, [sp, #68]	; 0x44
   252c8:	beq	25694 <__assert_fail@plt+0x13308>
   252cc:	mov	r4, #0
   252d0:	add	r9, sp, #116	; 0x74
   252d4:	b	252e0 <__assert_fail@plt+0x12f54>
   252d8:	cmp	r5, r3
   252dc:	bls	2519c <__assert_fail@plt+0x12e10>
   252e0:	mov	r3, sl
   252e4:	mov	r2, #0
   252e8:	mov	r0, fp
   252ec:	mov	r1, r9
   252f0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   252f4:	ldr	r2, [sp, #116]	; 0x74
   252f8:	mov	r3, sl
   252fc:	add	fp, fp, r2
   25300:	mov	r0, fp
   25304:	mov	r2, #0
   25308:	mov	r1, r9
   2530c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25310:	ldr	r3, [sp, #116]	; 0x74
   25314:	add	r4, r4, #1
   25318:	add	fp, fp, r3
   2531c:	cmp	sl, fp
   25320:	uxtb	r3, r4
   25324:	bne	252d8 <__assert_fail@plt+0x12f4c>
   25328:	ldr	r1, [pc, #888]	; 256a8 <__assert_fail@plt+0x1331c>
   2532c:	mov	r2, #5
   25330:	mov	r0, #0
   25334:	bl	11ea0 <dcgettext@plt>
   25338:	ldr	r1, [sp, #168]	; 0xa8
   2533c:	bl	417d0 <warn@@Base>
   25340:	mov	r0, fp
   25344:	add	sp, sp, #124	; 0x7c
   25348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2534c:	mov	r2, #5
   25350:	ldr	r1, [pc, #852]	; 256ac <__assert_fail@plt+0x13320>
   25354:	mov	r0, #0
   25358:	bl	11ea0 <dcgettext@plt>
   2535c:	bl	11dbc <printf@plt>
   25360:	add	r5, r5, #1
   25364:	mov	r3, sl
   25368:	mov	r2, #0
   2536c:	mov	r0, r4
   25370:	mov	r1, r9
   25374:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25378:	uxtb	r2, r5
   2537c:	ldr	r3, [sp, #116]	; 0x74
   25380:	cmp	r2, fp
   25384:	add	r4, r4, r3
   25388:	bcc	2522c <__assert_fail@plt+0x12ea0>
   2538c:	ldr	r3, [sp, #72]	; 0x48
   25390:	cmp	r3, #1
   25394:	beq	25454 <__assert_fail@plt+0x130c8>
   25398:	mov	r3, #1
   2539c:	str	r3, [sp, #72]	; 0x48
   253a0:	b	25214 <__assert_fail@plt+0x12e88>
   253a4:	mov	r2, #5
   253a8:	ldr	r1, [pc, #768]	; 256b0 <__assert_fail@plt+0x13324>
   253ac:	mov	r0, #0
   253b0:	bl	11ea0 <dcgettext@plt>
   253b4:	bl	11dbc <printf@plt>
   253b8:	b	25360 <__assert_fail@plt+0x12fd4>
   253bc:	mov	r2, #5
   253c0:	ldr	r1, [pc, #748]	; 256b4 <__assert_fail@plt+0x13328>
   253c4:	mov	r0, #0
   253c8:	bl	11ea0 <dcgettext@plt>
   253cc:	bl	11dbc <printf@plt>
   253d0:	b	25360 <__assert_fail@plt+0x12fd4>
   253d4:	mov	r2, #5
   253d8:	ldr	r1, [pc, #728]	; 256b8 <__assert_fail@plt+0x1332c>
   253dc:	mov	r0, #0
   253e0:	bl	11ea0 <dcgettext@plt>
   253e4:	bl	11dbc <printf@plt>
   253e8:	b	25360 <__assert_fail@plt+0x12fd4>
   253ec:	mov	r2, #5
   253f0:	ldr	r1, [pc, #708]	; 256bc <__assert_fail@plt+0x13330>
   253f4:	mov	r0, #0
   253f8:	bl	11ea0 <dcgettext@plt>
   253fc:	bl	11dbc <printf@plt>
   25400:	b	25360 <__assert_fail@plt+0x12fd4>
   25404:	sub	r1, sl, r0
   25408:	sub	r3, r1, #1
   2540c:	cmp	r3, #7
   25410:	bhi	2518c <__assert_fail@plt+0x12e00>
   25414:	b	252ac <__assert_fail@plt+0x12f20>
   25418:	mov	r2, #5
   2541c:	ldr	r1, [pc, #668]	; 256c0 <__assert_fail@plt+0x13334>
   25420:	mov	r0, #0
   25424:	bl	11ea0 <dcgettext@plt>
   25428:	mov	r1, #0
   2542c:	str	r1, [sp]
   25430:	mov	r2, r6
   25434:	mov	r3, r7
   25438:	str	r0, [sp, #80]	; 0x50
   2543c:	ldr	r0, [pc, #640]	; 256c4 <__assert_fail@plt+0x13338>
   25440:	bl	18b24 <__assert_fail@plt+0x6798>
   25444:	mov	r1, r0
   25448:	ldr	r0, [sp, #80]	; 0x50
   2544c:	bl	11dbc <printf@plt>
   25450:	b	25360 <__assert_fail@plt+0x12fd4>
   25454:	mov	r3, #0
   25458:	mov	r5, r3
   2545c:	ldr	r3, [pc, #612]	; 256c8 <__assert_fail@plt+0x1333c>
   25460:	mov	r2, #0
   25464:	mov	r4, r2
   25468:	mov	r8, r5
   2546c:	mov	r7, r9
   25470:	mov	r0, #10
   25474:	ldr	r1, [r3]
   25478:	strd	r4, [sp, #80]	; 0x50
   2547c:	bl	12254 <putc@plt>
   25480:	str	r4, [sp, #108]	; 0x6c
   25484:	ldr	r1, [sp, #80]	; 0x50
   25488:	ldr	r0, [pc, #572]	; 256cc <__assert_fail@plt+0x13340>
   2548c:	bl	11dbc <printf@plt>
   25490:	mov	r3, #2
   25494:	str	r3, [sp, #88]	; 0x58
   25498:	ldr	r9, [sp, #108]	; 0x6c
   2549c:	mov	r3, r8
   254a0:	mov	r8, r7
   254a4:	mov	r7, r3
   254a8:	ldr	r3, [sp, #68]	; 0x44
   254ac:	cmp	r3, #0
   254b0:	ldreq	fp, [sp, #92]	; 0x5c
   254b4:	beq	255c0 <__assert_fail@plt+0x13234>
   254b8:	ldr	r3, [sp, #88]	; 0x58
   254bc:	mov	r5, #0
   254c0:	and	r3, r3, #1
   254c4:	str	r3, [sp, #72]	; 0x48
   254c8:	ldr	fp, [sp, #92]	; 0x5c
   254cc:	mov	r3, r9
   254d0:	ldr	r4, [sp, #104]	; 0x68
   254d4:	mov	r6, r5
   254d8:	mov	r9, r8
   254dc:	mov	r8, r5
   254e0:	mov	r5, r3
   254e4:	mov	r3, sl
   254e8:	mov	r2, #0
   254ec:	mov	r0, r4
   254f0:	mov	r1, r9
   254f4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   254f8:	ldr	r2, [sp, #116]	; 0x74
   254fc:	mov	r3, sl
   25500:	add	r4, r4, r2
   25504:	mov	r2, #0
   25508:	add	r8, r8, #1
   2550c:	strd	r0, [sp, #56]	; 0x38
   25510:	mov	r0, r4
   25514:	mov	r1, r9
   25518:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2551c:	ldrd	r2, [sp, #56]	; 0x38
   25520:	ldr	lr, [sp, #72]	; 0x48
   25524:	ldr	r1, [sp, #116]	; 0x74
   25528:	cmp	r3, #0
   2552c:	ldr	r3, [sp, #76]	; 0x4c
   25530:	cmpeq	r2, #1
   25534:	ldr	r2, [sp, #160]	; 0xa0
   25538:	ldrh	ip, [r3]
   2553c:	moveq	r3, #1
   25540:	movne	r3, #0
   25544:	eor	r3, r3, lr
   25548:	mov	lr, #9
   2554c:	ldr	r2, [r2]
   25550:	str	lr, [sp, #52]	; 0x34
   25554:	ldr	lr, [sp, #164]	; 0xa4
   25558:	str	fp, [sp]
   2555c:	str	r3, [sp, #40]	; 0x28
   25560:	str	r2, [sp, #24]
   25564:	mov	r3, #0
   25568:	mov	r2, #0
   2556c:	str	r6, [sp, #48]	; 0x30
   25570:	str	lr, [sp, #44]	; 0x2c
   25574:	str	r6, [sp, #36]	; 0x24
   25578:	str	r6, [sp, #28]
   2557c:	str	r5, [sp, #16]
   25580:	str	r7, [sp, #20]
   25584:	str	r5, [sp, #8]
   25588:	str	r7, [sp, #12]
   2558c:	str	sl, [sp, #4]
   25590:	str	ip, [sp, #32]
   25594:	add	r4, r4, r1
   25598:	mov	r1, r0
   2559c:	mov	r0, #0
   255a0:	bl	1eb4c <__assert_fail@plt+0xc7c0>
   255a4:	ldr	r2, [sp, #68]	; 0x44
   255a8:	uxtb	r3, r8
   255ac:	cmp	r3, r2
   255b0:	mov	fp, r0
   255b4:	bcc	254e4 <__assert_fail@plt+0x13158>
   255b8:	mov	r8, r9
   255bc:	mov	r9, r5
   255c0:	ldr	r3, [sp, #88]	; 0x58
   255c4:	cmp	r3, #1
   255c8:	movne	r3, #1
   255cc:	strne	r3, [sp, #88]	; 0x58
   255d0:	bne	254a8 <__assert_fail@plt+0x1311c>
   255d4:	mov	r3, r7
   255d8:	cmp	sl, fp
   255dc:	mov	r7, r8
   255e0:	mov	r8, r3
   255e4:	beq	25670 <__assert_fail@plt+0x132e4>
   255e8:	ldr	r3, [pc, #216]	; 256c8 <__assert_fail@plt+0x1333c>
   255ec:	mov	r0, #10
   255f0:	ldr	r1, [r3]
   255f4:	bl	12254 <putc@plt>
   255f8:	ldr	r3, [sp, #80]	; 0x50
   255fc:	adds	r3, r3, #1
   25600:	str	r3, [sp, #80]	; 0x50
   25604:	ldr	r3, [sp, #84]	; 0x54
   25608:	adc	r3, r3, #0
   2560c:	str	r3, [sp, #84]	; 0x54
   25610:	ldrd	r0, [sp, #80]	; 0x50
   25614:	ldrd	r2, [sp, #96]	; 0x60
   25618:	cmp	r3, r1
   2561c:	cmpeq	r2, r0
   25620:	beq	25340 <__assert_fail@plt+0x12fb4>
   25624:	str	fp, [sp, #92]	; 0x5c
   25628:	b	25484 <__assert_fail@plt+0x130f8>
   2562c:	mov	r2, #5
   25630:	ldr	r1, [pc, #152]	; 256d0 <__assert_fail@plt+0x13344>
   25634:	mov	r0, #0
   25638:	bl	11ea0 <dcgettext@plt>
   2563c:	ldr	r1, [sp, #168]	; 0xa8
   25640:	mov	fp, sl
   25644:	bl	417d0 <warn@@Base>
   25648:	b	25340 <__assert_fail@plt+0x12fb4>
   2564c:	ldr	r1, [pc, #128]	; 256d4 <__assert_fail@plt+0x13348>
   25650:	mov	r0, #0
   25654:	bl	11ea0 <dcgettext@plt>
   25658:	ldr	r1, [sp, #168]	; 0xa8
   2565c:	ldr	fp, [sp, #92]	; 0x5c
   25660:	bl	11dbc <printf@plt>
   25664:	mov	r0, fp
   25668:	add	sp, sp, #124	; 0x7c
   2566c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25670:	mov	r2, #5
   25674:	ldr	r1, [pc, #92]	; 256d8 <__assert_fail@plt+0x1334c>
   25678:	mov	r0, #0
   2567c:	bl	11ea0 <dcgettext@plt>
   25680:	ldr	r1, [sp, #168]	; 0xa8
   25684:	bl	417d0 <warn@@Base>
   25688:	mov	r0, fp
   2568c:	add	sp, sp, #124	; 0x7c
   25690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25694:	add	r9, sp, #116	; 0x74
   25698:	b	2519c <__assert_fail@plt+0x12e10>
   2569c:	andeq	sp, r4, r4, lsl #22
   256a0:	andeq	sp, r4, r4, lsr #22
   256a4:	andeq	r9, r6, r0, ror #27
   256a8:			; <UNDEFINED> instruction: 0x0004dab4
   256ac:	andeq	sp, r4, ip, asr #22
   256b0:	andeq	sp, r4, r4, asr #22
   256b4:	andeq	sp, r4, ip, lsr fp
   256b8:	andeq	sp, r4, r4, lsr fp
   256bc:	andeq	sp, r4, ip, lsr #22
   256c0:	andeq	sp, r4, r4, asr fp
   256c4:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   256c8:	andeq	r7, r6, r0, lsr r4
   256cc:	andeq	sp, r4, r8, ror fp
   256d0:	ldrdeq	sp, [r4], -r4
   256d4:	andeq	sp, r4, r8, ror #21
   256d8:	andeq	sp, r4, r0, lsl #23
   256dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   256e0:	sub	sp, sp, #228	; 0xe4
   256e4:	ldr	sl, [r0, #16]
   256e8:	str	r1, [sp, #132]	; 0x84
   256ec:	ldr	r1, [pc, #4032]	; 266b4 <__assert_fail@plt+0x14328>
   256f0:	ldr	r2, [r0, #32]
   256f4:	str	r0, [sp, #76]	; 0x4c
   256f8:	ldr	r3, [r1]
   256fc:	add	fp, sl, r2
   25700:	cmp	r3, #0
   25704:	moveq	r3, #1
   25708:	streq	r3, [r1]
   2570c:	bne	25750 <__assert_fail@plt+0x133c4>
   25710:	ldr	r3, [pc, #4000]	; 266b8 <__assert_fail@plt+0x1432c>
   25714:	mov	r2, #5
   25718:	ldr	r3, [r3]
   2571c:	cmp	r3, #0
   25720:	beq	25fb4 <__assert_fail@plt+0x13c28>
   25724:	ldr	r4, [sp, #76]	; 0x4c
   25728:	ldr	r3, [r4, #12]
   2572c:	cmp	r3, #0
   25730:	beq	25fb4 <__assert_fail@plt+0x13c28>
   25734:	ldr	r1, [pc, #3968]	; 266bc <__assert_fail@plt+0x14330>
   25738:	mov	r0, #0
   2573c:	bl	11ea0 <dcgettext@plt>
   25740:	ldr	r2, [r4, #12]
   25744:	ldr	r1, [r4, #8]
   25748:	bl	11dbc <printf@plt>
   2574c:	b	25fcc <__assert_fail@plt+0x13c40>
   25750:	tst	r3, #1
   25754:	bne	25710 <__assert_fail@plt+0x13384>
   25758:	tst	r3, #2
   2575c:	bne	2576c <__assert_fail@plt+0x133e0>
   25760:	mov	r0, #1
   25764:	add	sp, sp, #228	; 0xe4
   25768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2576c:	ldr	r3, [sp, #76]	; 0x4c
   25770:	add	r1, r3, #12
   25774:	add	r0, r3, #8
   25778:	bl	1a7b4 <__assert_fail@plt+0x8428>
   2577c:	cmp	sl, fp
   25780:	bcs	25760 <__assert_fail@plt+0x133d4>
   25784:	mov	r3, #1
   25788:	str	r3, [sp, #172]	; 0xac
   2578c:	add	r3, sp, #184	; 0xb8
   25790:	str	r3, [sp, #92]	; 0x5c
   25794:	ldr	r7, [pc, #3876]	; 266c0 <__assert_fail@plt+0x14334>
   25798:	ldr	r3, [sp, #76]	; 0x4c
   2579c:	mov	r2, #12
   257a0:	ldr	r1, [pc, #3868]	; 266c4 <__assert_fail@plt+0x14338>
   257a4:	ldr	r5, [r3, #8]
   257a8:	mov	r0, r5
   257ac:	bl	12320 <strncmp@plt>
   257b0:	subs	r4, r0, #0
   257b4:	bne	26c44 <__assert_fail@plt+0x148b8>
   257b8:	mov	r0, r5
   257bc:	ldr	r1, [pc, #3844]	; 266c8 <__assert_fail@plt+0x1433c>
   257c0:	bl	11d98 <strcmp@plt>
   257c4:	cmp	r0, #0
   257c8:	beq	26c44 <__assert_fail@plt+0x148b8>
   257cc:	ldr	lr, [pc, #3832]	; 266cc <__assert_fail@plt+0x14340>
   257d0:	ldr	ip, [sp, #92]	; 0x5c
   257d4:	add	r5, lr, #8
   257d8:	str	fp, [sp, #176]	; 0xb0
   257dc:	ldm	r5!, {r0, r1, r2, r3}
   257e0:	stmia	ip!, {r0, r1, r2, r3}
   257e4:	ldm	r5!, {r0, r1, r2, r3}
   257e8:	stmia	ip!, {r0, r1, r2, r3}
   257ec:	ldm	r5, {r0, r1}
   257f0:	stm	ip, {r0, r1}
   257f4:	ldrb	r0, [sp, #216]	; 0xd8
   257f8:	cmp	r0, #0
   257fc:	beq	27d34 <__assert_fail@plt+0x159a8>
   25800:	sub	r9, lr, #224	; 0xe0
   25804:	mov	r1, #0
   25808:	mov	r3, #1
   2580c:	ldrb	r0, [sp, #210]	; 0xd2
   25810:	mov	r2, r1
   25814:	str	r1, [sp, #56]	; 0x38
   25818:	strh	r4, [lr, #-200]	; 0xffffff38
   2581c:	mov	r6, sl
   25820:	str	r1, [r9, #-8]
   25824:	str	r3, [r7, #1460]	; 0x5b4
   25828:	sub	r1, lr, #240	; 0xf0
   2582c:	str	r3, [r7, #1464]	; 0x5b8
   25830:	mov	lr, fp
   25834:	ldr	r3, [pc, #3940]	; 267a0 <__assert_fail@plt+0x14414>
   25838:	cmp	r6, lr
   2583c:	str	r4, [sp, #80]	; 0x50
   25840:	str	r4, [r7, #1456]	; 0x5b0
   25844:	str	r4, [r7, #1468]	; 0x5bc
   25848:	str	r4, [r7, #1476]	; 0x5c4
   2584c:	str	r4, [r7, #1484]	; 0x5cc
   25850:	str	r1, [sp, #116]	; 0x74
   25854:	str	r2, [r9, #-4]
   25858:	str	r2, [sp, #60]	; 0x3c
   2585c:	str	r4, [sp, #88]	; 0x58
   25860:	str	r4, [sp, #64]	; 0x40
   25864:	str	r4, [sp, #112]	; 0x70
   25868:	str	r0, [r7, #1472]	; 0x5c0
   2586c:	str	r3, [sp, #96]	; 0x60
   25870:	bcs	26d60 <__assert_fail@plt+0x149d4>
   25874:	mov	r3, lr
   25878:	b	259e4 <__assert_fail@plt+0x13658>
   2587c:	sub	r0, r5, r0
   25880:	ldrb	r6, [sp, #216]	; 0xd8
   25884:	uxtb	r4, r0
   25888:	mov	r0, r4
   2588c:	mov	r1, r6
   25890:	bl	47334 <warn@@Base+0x5b64>
   25894:	ldrb	r1, [sp, #209]	; 0xd1
   25898:	ldrd	r2, [r9, #-8]
   2589c:	ldrb	r8, [sp, #208]	; 0xd0
   258a0:	cmp	r1, #1
   258a4:	strd	r2, [sp, #104]	; 0x68
   258a8:	uxtb	r0, r0
   258ac:	beq	26e40 <__assert_fail@plt+0x14ab4>
   258b0:	ldrb	ip, [r7, #1480]	; 0x5c8
   258b4:	add	r0, ip, r0
   258b8:	bl	47520 <warn@@Base+0x5d50>
   258bc:	ldrd	r2, [sp, #104]	; 0x68
   258c0:	mul	r0, r8, r0
   258c4:	strb	r1, [r7, #1480]	; 0x5c8
   258c8:	adds	r2, r2, r0
   258cc:	adc	r3, r3, #0
   258d0:	cmp	r0, #0
   258d4:	strd	r2, [r9, #-8]
   258d8:	movne	r3, #0
   258dc:	strne	r3, [r7, #1456]	; 0x5b0
   258e0:	mov	r1, r6
   258e4:	mov	r0, r4
   258e8:	bl	47520 <warn@@Base+0x5d50>
   258ec:	ldr	r3, [sp, #212]	; 0xd4
   258f0:	ldr	r2, [r7, #1464]	; 0x5b8
   258f4:	uxtab	r1, r3, r1
   258f8:	add	r1, r1, r2
   258fc:	str	r1, [r7, #1464]	; 0x5b8
   25900:	ldr	r3, [sp, #64]	; 0x40
   25904:	cmp	r3, #0
   25908:	beq	25dcc <__assert_fail@plt+0x13a40>
   2590c:	ldr	r4, [r7, #1460]	; 0x5b4
   25910:	ldr	r3, [sp, #88]	; 0x58
   25914:	sub	r4, r4, #1
   25918:	cmp	r4, r3
   2591c:	bcs	26e10 <__assert_fail@plt+0x14a84>
   25920:	ldr	r3, [sp, #64]	; 0x40
   25924:	ldr	r6, [r3, r4, lsl #4]
   25928:	mov	r0, r6
   2592c:	bl	12074 <strlen@plt>
   25930:	cmp	r0, #35	; 0x23
   25934:	mov	r8, r0
   25938:	bls	26df0 <__assert_fail@plt+0x14a64>
   2593c:	ldr	r3, [pc, #3736]	; 267dc <__assert_fail@plt+0x14450>
   25940:	ldr	r3, [r3]
   25944:	cmp	r3, #0
   25948:	beq	26dc0 <__assert_fail@plt+0x14a34>
   2594c:	add	r8, r0, #1
   25950:	mov	r0, r8
   25954:	bl	11f3c <xmalloc@plt>
   25958:	mov	r2, r8
   2595c:	mov	r1, r6
   25960:	mov	r4, r0
   25964:	bl	12128 <strncpy@plt>
   25968:	ldr	r3, [pc, #3692]	; 267dc <__assert_fail@plt+0x14450>
   2596c:	ldr	r3, [r3]
   25970:	cmp	r3, #0
   25974:	bne	26d90 <__assert_fail@plt+0x14a04>
   25978:	ldrb	r3, [sp, #209]	; 0xd1
   2597c:	ldr	r2, [r7, #1464]	; 0x5b8
   25980:	ldrd	r0, [r9, #-8]
   25984:	cmp	r3, #1
   25988:	beq	26d7c <__assert_fail@plt+0x149f0>
   2598c:	ldrb	r3, [r7, #1480]	; 0x5c8
   25990:	strd	r0, [sp]
   25994:	mov	r1, r4
   25998:	str	r3, [sp, #8]
   2599c:	ldr	r0, [pc, #3372]	; 266d0 <__assert_fail@plt+0x14344>
   259a0:	bl	11dbc <printf@plt>
   259a4:	ldr	r1, [r7, #1456]	; 0x5b0
   259a8:	cmp	r1, #0
   259ac:	beq	26d68 <__assert_fail@plt+0x149dc>
   259b0:	ldr	r0, [pc, #3356]	; 266d4 <__assert_fail@plt+0x14348>
   259b4:	bl	11dbc <printf@plt>
   259b8:	ldr	r3, [r7, #1456]	; 0x5b0
   259bc:	cmn	r5, #1
   259c0:	add	r3, r3, #1
   259c4:	str	r3, [r7, #1456]	; 0x5b0
   259c8:	beq	26bf4 <__assert_fail@plt+0x14868>
   259cc:	mov	r0, r4
   259d0:	bl	11e10 <free@plt>
   259d4:	ldr	r3, [sp, #176]	; 0xb0
   259d8:	cmp	r3, sl
   259dc:	bls	25a7c <__assert_fail@plt+0x136f0>
   259e0:	mov	r6, sl
   259e4:	mov	sl, r6
   259e8:	ldrb	r0, [sp, #217]	; 0xd9
   259ec:	ldrb	r5, [sl], #1
   259f0:	cmp	r5, r0
   259f4:	bcs	2587c <__assert_fail@plt+0x134f0>
   259f8:	cmp	r5, #12
   259fc:	ldrls	pc, [pc, r5, lsl #2]
   25a00:	b	25d20 <__assert_fail@plt+0x13994>
   25a04:	andeq	r5, r2, r4, ror #27
   25a08:			; <UNDEFINED> instruction: 0x00025db8
   25a0c:	andeq	r5, r2, r0, ror #24
   25a10:	andeq	r5, r2, r4, lsr ip
   25a14:	andeq	r5, r2, r0, asr #22
   25a18:	andeq	r5, r2, ip, lsl fp
   25a1c:	andeq	r5, r2, ip, lsl #26
   25a20:	andeq	r5, r2, r0, asr #25
   25a24:	andeq	r5, r2, ip, asr #25
   25a28:	andeq	r5, r2, r8, asr #21
   25a2c:			; <UNDEFINED> instruction: 0x00025db8
   25a30:			; <UNDEFINED> instruction: 0x00025db8
   25a34:	andeq	r5, r2, r8, lsr sl
   25a38:	mov	r3, fp
   25a3c:	mov	r2, #0
   25a40:	mov	r0, sl
   25a44:	add	r1, sp, #180	; 0xb4
   25a48:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25a4c:	ldr	r3, [sp, #180]	; 0xb4
   25a50:	mov	r2, #5
   25a54:	ldr	r1, [pc, #3196]	; 266d8 <__assert_fail@plt+0x1434c>
   25a58:	add	sl, sl, r3
   25a5c:	mov	r4, r0
   25a60:	mov	r0, #0
   25a64:	bl	11ea0 <dcgettext@plt>
   25a68:	mov	r1, r4
   25a6c:	bl	11dbc <printf@plt>
   25a70:	ldr	r3, [sp, #176]	; 0xb0
   25a74:	cmp	r3, sl
   25a78:	bhi	259e0 <__assert_fail@plt+0x13654>
   25a7c:	ldr	r3, [sp, #64]	; 0x40
   25a80:	cmp	r3, #0
   25a84:	beq	25a90 <__assert_fail@plt+0x13704>
   25a88:	mov	r0, r3
   25a8c:	bl	11e10 <free@plt>
   25a90:	ldr	r3, [sp, #80]	; 0x50
   25a94:	cmp	r3, #0
   25a98:	beq	25aa4 <__assert_fail@plt+0x13718>
   25a9c:	mov	r0, r3
   25aa0:	bl	11e10 <free@plt>
   25aa4:	ldr	r3, [sp, #96]	; 0x60
   25aa8:	mov	r0, #10
   25aac:	ldr	r1, [r3]
   25ab0:	bl	12254 <putc@plt>
   25ab4:	cmp	fp, sl
   25ab8:	bhi	25798 <__assert_fail@plt+0x1340c>
   25abc:	ldr	r0, [sp, #172]	; 0xac
   25ac0:	add	sp, sp, #228	; 0xe4
   25ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ac8:	add	r6, r6, #3
   25acc:	cmp	fp, r6
   25ad0:	bhi	26e80 <__assert_fail@plt+0x14af4>
   25ad4:	cmp	fp, sl
   25ad8:	bls	25aec <__assert_fail@plt+0x13760>
   25adc:	sub	r1, fp, sl
   25ae0:	sub	r3, r1, #1
   25ae4:	cmp	r3, #7
   25ae8:	bls	26e84 <__assert_fail@plt+0x14af8>
   25aec:	mov	r0, #0
   25af0:	mov	r1, r0
   25af4:	ldr	r3, [r9, #-8]
   25af8:	ldr	r2, [r9, #-4]
   25afc:	adds	r3, r3, r0
   25b00:	adc	r2, r2, r1
   25b04:	mov	r1, #0
   25b08:	mov	sl, r6
   25b0c:	str	r3, [r9, #-8]
   25b10:	str	r2, [r9, #-4]
   25b14:	strb	r1, [r7, #1480]	; 0x5c8
   25b18:	b	259d4 <__assert_fail@plt+0x13648>
   25b1c:	mov	r3, fp
   25b20:	mov	r0, sl
   25b24:	mov	r2, #0
   25b28:	add	r1, sp, #180	; 0xb4
   25b2c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25b30:	ldr	r3, [sp, #180]	; 0xb4
   25b34:	add	sl, sl, r3
   25b38:	str	r0, [r7, #1468]	; 0x5bc
   25b3c:	b	259d4 <__assert_fail@plt+0x13648>
   25b40:	mov	r3, fp
   25b44:	mov	r0, sl
   25b48:	mov	r2, #0
   25b4c:	add	r1, sp, #180	; 0xb4
   25b50:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25b54:	ldr	r3, [sp, #88]	; 0x58
   25b58:	clz	r4, r3
   25b5c:	ldr	r3, [sp, #64]	; 0x40
   25b60:	lsr	r4, r4, #5
   25b64:	cmp	r3, #0
   25b68:	moveq	r4, #1
   25b6c:	ldr	r3, [sp, #180]	; 0xb4
   25b70:	cmp	r4, #0
   25b74:	add	sl, sl, r3
   25b78:	mov	r5, r0
   25b7c:	str	r0, [r7, #1460]	; 0x5b4
   25b80:	sub	r6, r0, #1
   25b84:	bne	26fd0 <__assert_fail@plt+0x14c44>
   25b88:	ldr	r3, [sp, #88]	; 0x58
   25b8c:	cmp	r6, r3
   25b90:	bcs	27a18 <__assert_fail@plt+0x1568c>
   25b94:	ldr	r3, [sp, #64]	; 0x40
   25b98:	add	r8, r3, r6, lsl #4
   25b9c:	ldr	r5, [r8, #4]
   25ba0:	cmp	r5, #0
   25ba4:	beq	27c3c <__assert_fail@plt+0x158b0>
   25ba8:	ldrd	r2, [sp, #56]	; 0x38
   25bac:	mov	r1, r2
   25bb0:	orrs	r3, r1, r3
   25bb4:	ldr	r3, [sp, #80]	; 0x50
   25bb8:	moveq	r6, #1
   25bbc:	movne	r6, #0
   25bc0:	cmp	r3, #0
   25bc4:	moveq	r6, #1
   25bc8:	cmp	r6, #0
   25bcc:	bne	27d50 <__assert_fail@plt+0x159c4>
   25bd0:	ldrd	r0, [sp, #56]	; 0x38
   25bd4:	mov	r3, #0
   25bd8:	cmp	r1, r3
   25bdc:	cmpeq	r0, r5
   25be0:	bcs	27cc0 <__assert_fail@plt+0x15934>
   25be4:	ldr	r1, [pc, #2800]	; 266dc <__assert_fail@plt+0x14350>
   25be8:	mov	r2, #5
   25bec:	mov	r0, r6
   25bf0:	bl	11ea0 <dcgettext@plt>
   25bf4:	ldrd	r2, [sp, #56]	; 0x38
   25bf8:	str	r6, [sp]
   25bfc:	mov	r4, r0
   25c00:	ldr	r0, [pc, #2880]	; 26748 <__assert_fail@plt+0x143bc>
   25c04:	bl	18b24 <__assert_fail@plt+0x6798>
   25c08:	mov	r1, r5
   25c0c:	mov	r2, r0
   25c10:	mov	r0, r4
   25c14:	bl	417d0 <warn@@Base>
   25c18:	mov	r0, r6
   25c1c:	mov	r2, #5
   25c20:	ldr	r1, [pc, #2744]	; 266e0 <__assert_fail@plt+0x14354>
   25c24:	bl	11ea0 <dcgettext@plt>
   25c28:	mov	r1, r5
   25c2c:	bl	11dbc <printf@plt>
   25c30:	b	259d4 <__assert_fail@plt+0x13648>
   25c34:	mov	r3, fp
   25c38:	mov	r2, #1
   25c3c:	mov	r0, sl
   25c40:	add	r1, sp, #180	; 0xb4
   25c44:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25c48:	ldr	r3, [r7, #1464]	; 0x5b8
   25c4c:	ldr	r2, [sp, #180]	; 0xb4
   25c50:	add	sl, sl, r2
   25c54:	add	r0, r3, r0
   25c58:	str	r0, [r7, #1464]	; 0x5b8
   25c5c:	b	259d4 <__assert_fail@plt+0x13648>
   25c60:	mov	r3, fp
   25c64:	mov	r0, sl
   25c68:	mov	r2, #0
   25c6c:	add	r1, sp, #180	; 0xb4
   25c70:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25c74:	ldrb	r1, [sp, #209]	; 0xd1
   25c78:	ldr	r3, [sp, #180]	; 0xb4
   25c7c:	ldrd	r4, [r9, #-8]
   25c80:	cmp	r1, #1
   25c84:	add	sl, sl, r3
   25c88:	beq	26fb0 <__assert_fail@plt+0x14c24>
   25c8c:	ldrb	r3, [r7, #1480]	; 0x5c8
   25c90:	add	r0, r3, r0
   25c94:	bl	47520 <warn@@Base+0x5d50>
   25c98:	ldrb	r3, [sp, #208]	; 0xd0
   25c9c:	mul	r0, r0, r3
   25ca0:	strb	r1, [r7, #1480]	; 0x5c8
   25ca4:	adds	r4, r4, r0
   25ca8:	adc	r5, r5, #0
   25cac:	cmp	r0, #0
   25cb0:	movne	r3, #0
   25cb4:	strd	r4, [r9, #-8]
   25cb8:	strne	r3, [r7, #1456]	; 0x5b0
   25cbc:	b	259d4 <__assert_fail@plt+0x13648>
   25cc0:	mov	r3, #1
   25cc4:	str	r3, [r7, #1476]	; 0x5c4
   25cc8:	b	259d4 <__assert_fail@plt+0x13648>
   25ccc:	ldrb	r1, [sp, #216]	; 0xd8
   25cd0:	rsb	r0, r0, #255	; 0xff
   25cd4:	bl	47540 <warn@@Base+0x5d70>
   25cd8:	ldrb	r1, [sp, #209]	; 0xd1
   25cdc:	ldrb	r6, [sp, #208]	; 0xd0
   25ce0:	ldrd	r2, [r9, #-8]
   25ce4:	cmp	r1, #1
   25ce8:	mov	r4, r2
   25cec:	mov	r5, r3
   25cf0:	muleq	r0, r6, r0
   25cf4:	beq	25ca4 <__assert_fail@plt+0x13918>
   25cf8:	ldrb	r3, [r7, #1480]	; 0x5c8
   25cfc:	add	r0, r3, r0
   25d00:	bl	47520 <warn@@Base+0x5d50>
   25d04:	mul	r0, r6, r0
   25d08:	b	25ca0 <__assert_fail@plt+0x13914>
   25d0c:	ldr	r3, [r7, #1472]	; 0x5c0
   25d10:	clz	r3, r3
   25d14:	lsr	r3, r3, #5
   25d18:	str	r3, [r7, #1472]	; 0x5c0
   25d1c:	b	259d4 <__assert_fail@plt+0x13648>
   25d20:	mov	r2, #5
   25d24:	ldr	r1, [pc, #2488]	; 266e4 <__assert_fail@plt+0x14358>
   25d28:	mov	r0, #0
   25d2c:	bl	11ea0 <dcgettext@plt>
   25d30:	mov	r1, r5
   25d34:	bl	11dbc <printf@plt>
   25d38:	ldr	r3, [sp, #112]	; 0x70
   25d3c:	cmp	r3, #0
   25d40:	beq	25da8 <__assert_fail@plt+0x13a1c>
   25d44:	add	r3, r3, r5
   25d48:	ldrb	r4, [r3, #-1]
   25d4c:	cmp	r4, #0
   25d50:	beq	25da8 <__assert_fail@plt+0x13a1c>
   25d54:	ldr	r8, [pc, #2544]	; 2674c <__assert_fail@plt+0x143c0>
   25d58:	add	r6, sp, #180	; 0xb4
   25d5c:	mov	r3, fp
   25d60:	mov	r2, #0
   25d64:	mov	r1, r6
   25d68:	mov	r0, sl
   25d6c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25d70:	mov	r3, #0
   25d74:	str	r3, [sp]
   25d78:	mov	r2, r0
   25d7c:	mov	r3, r1
   25d80:	mov	r0, r8
   25d84:	bl	18b24 <__assert_fail@plt+0x6798>
   25d88:	cmp	r4, #1
   25d8c:	mov	r1, r0
   25d90:	bne	27fac <__assert_fail@plt+0x15c20>
   25d94:	ldr	r2, [pc, #2484]	; 26750 <__assert_fail@plt+0x143c4>
   25d98:	ldr	r0, [pc, #2376]	; 266e8 <__assert_fail@plt+0x1435c>
   25d9c:	bl	11dbc <printf@plt>
   25da0:	ldr	r3, [sp, #180]	; 0xb4
   25da4:	add	sl, sl, r3
   25da8:	ldr	r3, [sp, #96]	; 0x60
   25dac:	mov	r0, #10
   25db0:	ldr	r1, [r3]
   25db4:	bl	12254 <putc@plt>
   25db8:	cmp	r5, #1
   25dbc:	bne	259d4 <__assert_fail@plt+0x13648>
   25dc0:	ldr	r3, [sp, #64]	; 0x40
   25dc4:	cmp	r3, #0
   25dc8:	bne	2590c <__assert_fail@plt+0x13580>
   25dcc:	mov	r2, #5
   25dd0:	ldr	r1, [pc, #2324]	; 266ec <__assert_fail@plt+0x14360>
   25dd4:	ldr	r0, [sp, #64]	; 0x40
   25dd8:	bl	11ea0 <dcgettext@plt>
   25ddc:	mov	r6, r0
   25de0:	b	25928 <__assert_fail@plt+0x1359c>
   25de4:	add	r6, sp, #180	; 0xb4
   25de8:	mov	r1, r6
   25dec:	mov	r2, #0
   25df0:	mov	r0, sl
   25df4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25df8:	subs	r1, r0, #0
   25dfc:	beq	26fbc <__assert_fail@plt+0x14c30>
   25e00:	ldr	r4, [sp, #180]	; 0xb4
   25e04:	add	r5, sl, r4
   25e08:	ldrb	r3, [sl, r4]
   25e0c:	add	r4, r1, r4
   25e10:	add	sl, sl, r4
   25e14:	sub	r2, r3, #1
   25e18:	add	r8, r5, #1
   25e1c:	cmp	r2, #21
   25e20:	ldrls	pc, [pc, r2, lsl #2]
   25e24:	b	25e80 <__assert_fail@plt+0x13af4>
   25e28:	andeq	r5, r2, ip, lsr #29
   25e2c:	andeq	r5, r2, r0, ror #30
   25e30:			; <UNDEFINED> instruction: 0x00025ebc
   25e34:	andeq	r5, r2, ip, lsr #29
   25e38:	andeq	r5, r2, r0, lsl #29
   25e3c:	andeq	r5, r2, r0, lsl #29
   25e40:	andeq	r5, r2, r0, lsl #29
   25e44:	andeq	r5, r2, r0, lsl #29
   25e48:	andeq	r5, r2, r0, lsl #29
   25e4c:	andeq	r5, r2, r0, lsl #29
   25e50:	andeq	r5, r2, r0, lsl #29
   25e54:	andeq	r5, r2, r0, lsl #29
   25e58:	andeq	r5, r2, r0, lsl #29
   25e5c:	andeq	r5, r2, r0, lsl #29
   25e60:	andeq	r5, r2, r0, lsl #29
   25e64:	andeq	r5, r2, r0, lsl #29
   25e68:	andeq	r5, r2, r0, lsl #29
   25e6c:	andeq	r5, r2, r0, lsl #29
   25e70:	andeq	r5, r2, r0, lsl #29
   25e74:	andeq	r5, r2, r0, lsl #29
   25e78:	andeq	r5, r2, r0, lsl #29
   25e7c:	andeq	r5, r2, ip, lsr #29
   25e80:	mov	r2, #5
   25e84:	ldr	r1, [pc, #2148]	; 266f0 <__assert_fail@plt+0x14364>
   25e88:	mov	r0, #0
   25e8c:	str	r3, [sp, #104]	; 0x68
   25e90:	bl	11ea0 <dcgettext@plt>
   25e94:	ldr	r3, [sp, #104]	; 0x68
   25e98:	ldr	r2, [sp, #180]	; 0xb4
   25e9c:	mov	r1, r3
   25ea0:	sub	r2, r4, r2
   25ea4:	bl	11dbc <printf@plt>
   25ea8:	ldr	r3, [sp, #104]	; 0x68
   25eac:	cmp	r3, #1
   25eb0:	bne	259d4 <__assert_fail@plt+0x13648>
   25eb4:	mvn	r5, #0
   25eb8:	b	25900 <__assert_fail@plt+0x13574>
   25ebc:	ldr	r3, [sp, #88]	; 0x58
   25ec0:	ldr	r0, [sp, #64]	; 0x40
   25ec4:	add	r3, r3, #1
   25ec8:	str	r3, [sp, #88]	; 0x58
   25ecc:	lsl	r4, r3, #4
   25ed0:	mov	r1, r4
   25ed4:	bl	11ed0 <xrealloc@plt>
   25ed8:	sub	r4, r4, #16
   25edc:	ldr	r3, [r7, #1484]	; 0x5cc
   25ee0:	add	r3, r3, #1
   25ee4:	str	r3, [r7, #1484]	; 0x5cc
   25ee8:	mov	r2, r0
   25eec:	str	r8, [r0, r4]
   25ef0:	str	r0, [sp, #64]	; 0x40
   25ef4:	mov	r0, r8
   25ef8:	add	r4, r2, r4
   25efc:	bl	12074 <strlen@plt>
   25f00:	ldr	r3, [sp, #176]	; 0xb0
   25f04:	mov	r2, #0
   25f08:	mov	r1, r6
   25f0c:	add	r0, r0, #1
   25f10:	add	r8, r8, r0
   25f14:	mov	r0, r8
   25f18:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25f1c:	ldr	r3, [sp, #176]	; 0xb0
   25f20:	mov	r2, #0
   25f24:	mov	r1, r6
   25f28:	str	r0, [r4, #4]
   25f2c:	ldr	r0, [sp, #180]	; 0xb4
   25f30:	add	r8, r8, r0
   25f34:	mov	r0, r8
   25f38:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25f3c:	ldr	r3, [sp, #176]	; 0xb0
   25f40:	mov	r1, r6
   25f44:	mov	r2, #0
   25f48:	str	r0, [r4, #8]
   25f4c:	ldr	r0, [sp, #180]	; 0xb4
   25f50:	add	r0, r8, r0
   25f54:	bl	1b3b0 <__assert_fail@plt+0x9024>
   25f58:	str	r0, [r4, #12]
   25f5c:	b	259d4 <__assert_fail@plt+0x13648>
   25f60:	sub	r4, r1, #1
   25f64:	cmp	r4, #8
   25f68:	bhi	27cf0 <__assert_fail@plt+0x15964>
   25f6c:	cmp	fp, sl
   25f70:	bhi	25f80 <__assert_fail@plt+0x13bf4>
   25f74:	cmp	fp, r8
   25f78:	bls	27df0 <__assert_fail@plt+0x15a64>
   25f7c:	sub	r4, fp, r8
   25f80:	sub	r3, r4, #1
   25f84:	cmp	r3, #7
   25f88:	movls	r1, r4
   25f8c:	bhi	27df0 <__assert_fail@plt+0x15a64>
   25f90:	ldr	r3, [pc, #2124]	; 267e4 <__assert_fail@plt+0x14458>
   25f94:	mov	r0, r8
   25f98:	ldr	r3, [r3]
   25f9c:	blx	r3
   25fa0:	strd	r0, [r9, #-8]
   25fa4:	mov	r3, #0
   25fa8:	strb	r3, [r7, #1480]	; 0x5c8
   25fac:	str	r3, [r7, #1456]	; 0x5b0
   25fb0:	b	259d4 <__assert_fail@plt+0x13648>
   25fb4:	ldr	r1, [pc, #1848]	; 266f4 <__assert_fail@plt+0x14368>
   25fb8:	mov	r0, #0
   25fbc:	bl	11ea0 <dcgettext@plt>
   25fc0:	ldr	r3, [sp, #76]	; 0x4c
   25fc4:	ldr	r1, [r3, #8]
   25fc8:	bl	11dbc <printf@plt>
   25fcc:	cmp	sl, fp
   25fd0:	bcs	27eb0 <__assert_fail@plt+0x15b24>
   25fd4:	add	r3, sp, #184	; 0xb8
   25fd8:	ldr	r6, [pc, #1760]	; 266c0 <__assert_fail@plt+0x14334>
   25fdc:	mov	r9, sl
   25fe0:	str	r3, [sp, #92]	; 0x5c
   25fe4:	str	sl, [sp, #88]	; 0x58
   25fe8:	b	26004 <__assert_fail@plt+0x13c78>
   25fec:	ldr	r1, [pc, #1796]	; 266f8 <__assert_fail@plt+0x1436c>
   25ff0:	mov	r0, #0
   25ff4:	bl	11ea0 <dcgettext@plt>
   25ff8:	bl	11dbc <printf@plt>
   25ffc:	cmp	fp, r9
   26000:	bls	26344 <__assert_fail@plt+0x13fb8>
   26004:	ldr	r3, [sp, #76]	; 0x4c
   26008:	mov	r2, #12
   2600c:	ldr	r1, [pc, #1712]	; 266c4 <__assert_fail@plt+0x14338>
   26010:	ldr	r5, [r3, #8]
   26014:	mov	r0, r5
   26018:	bl	12320 <strncmp@plt>
   2601c:	subs	r4, r0, #0
   26020:	bne	26988 <__assert_fail@plt+0x145fc>
   26024:	mov	r0, r5
   26028:	ldr	r1, [pc, #1688]	; 266c8 <__assert_fail@plt+0x1433c>
   2602c:	bl	11d98 <strcmp@plt>
   26030:	cmp	r0, #0
   26034:	beq	26988 <__assert_fail@plt+0x145fc>
   26038:	ldr	ip, [pc, #1872]	; 26790 <__assert_fail@plt+0x14404>
   2603c:	ldr	lr, [sp, #92]	; 0x5c
   26040:	str	fp, [sp, #176]	; 0xb0
   26044:	ldm	ip!, {r0, r1, r2, r3}
   26048:	stmia	lr!, {r0, r1, r2, r3}
   2604c:	ldm	ip!, {r0, r1, r2, r3}
   26050:	stmia	lr!, {r0, r1, r2, r3}
   26054:	ldm	ip, {r0, r1}
   26058:	stm	lr, {r0, r1}
   2605c:	ldrb	r0, [sp, #216]	; 0xd8
   26060:	cmp	r0, #0
   26064:	beq	27e00 <__assert_fail@plt+0x15a74>
   26068:	ldrb	r2, [sp, #210]	; 0xd2
   2606c:	sub	r3, ip, #224	; 0xe0
   26070:	mov	r0, #0
   26074:	mov	r1, #0
   26078:	str	r4, [r6, #1456]	; 0x5b0
   2607c:	str	r4, [r6, #1468]	; 0x5bc
   26080:	str	r4, [r6, #1476]	; 0x5c4
   26084:	strh	r4, [ip, #-200]	; 0xffffff38
   26088:	str	r4, [r6, #1484]	; 0x5cc
   2608c:	str	r4, [sp, #56]	; 0x38
   26090:	mov	r4, fp
   26094:	str	r3, [sp, #80]	; 0x50
   26098:	mov	r3, #1
   2609c:	strd	r0, [ip, #-232]	; 0xffffff18
   260a0:	str	r2, [r6, #1472]	; 0x5c0
   260a4:	str	r3, [r6, #1460]	; 0x5b4
   260a8:	str	r3, [r6, #1464]	; 0x5b8
   260ac:	cmp	r9, r4
   260b0:	mov	r2, #5
   260b4:	bcs	25fec <__assert_fail@plt+0x13c60>
   260b8:	ldr	r1, [pc, #1596]	; 266fc <__assert_fail@plt+0x14370>
   260bc:	mov	r0, #0
   260c0:	bl	11ea0 <dcgettext@plt>
   260c4:	bl	11dbc <printf@plt>
   260c8:	ldr	r3, [sp, #176]	; 0xb0
   260cc:	cmp	r9, r3
   260d0:	bcs	27d2c <__assert_fail@plt+0x159a0>
   260d4:	str	fp, [sp, #64]	; 0x40
   260d8:	ldr	fp, [sp, #80]	; 0x50
   260dc:	b	26258 <__assert_fail@plt+0x13ecc>
   260e0:	sub	r7, r7, r0
   260e4:	ldrb	r1, [sp, #216]	; 0xd8
   260e8:	uxtb	r7, r7
   260ec:	mov	r0, r7
   260f0:	bl	47334 <warn@@Base+0x5b64>
   260f4:	ldrd	r2, [fp, #-8]
   260f8:	ldrb	ip, [sp, #209]	; 0xd1
   260fc:	ldrb	r4, [sp, #208]	; 0xd0
   26100:	strd	r2, [sp, #96]	; 0x60
   26104:	mov	r3, #0
   26108:	cmp	ip, #1
   2610c:	uxtb	r0, r0
   26110:	uxtb	r2, r0
   26114:	strd	r2, [sp, #80]	; 0x50
   26118:	beq	26904 <__assert_fail@plt+0x14578>
   2611c:	ldrb	r2, [r6, #1480]	; 0x5c8
   26120:	ldrd	r8, [sp, #80]	; 0x50
   26124:	mov	r3, #0
   26128:	adds	r0, r2, r8
   2612c:	adc	r1, r3, r9
   26130:	mov	r2, ip
   26134:	mov	r3, #0
   26138:	bl	47780 <warn@@Base+0x5fb0>
   2613c:	ldrd	r8, [sp, #96]	; 0x60
   26140:	ldr	r1, [pc, #1464]	; 26700 <__assert_fail@plt+0x14374>
   26144:	mul	r4, r0, r4
   26148:	strb	r2, [r6, #1480]	; 0x5c8
   2614c:	adds	r8, r8, r4
   26150:	adc	r9, r9, #0
   26154:	cmp	r4, #0
   26158:	movne	r3, #0
   2615c:	mov	r2, #5
   26160:	mov	r0, #0
   26164:	strne	r3, [r6, #1456]	; 0x5b0
   26168:	mov	r4, r0
   2616c:	strd	r8, [fp, #-8]
   26170:	bl	11ea0 <dcgettext@plt>
   26174:	ldrd	r2, [sp, #80]	; 0x50
   26178:	str	r4, [sp]
   2617c:	mov	r5, r0
   26180:	ldr	r0, [pc, #1472]	; 26748 <__assert_fail@plt+0x143bc>
   26184:	bl	18b24 <__assert_fail@plt+0x6798>
   26188:	str	r4, [sp]
   2618c:	ldrd	r2, [fp, #-8]
   26190:	mov	r8, r0
   26194:	ldr	r0, [pc, #1456]	; 2674c <__assert_fail@plt+0x143c0>
   26198:	bl	18b24 <__assert_fail@plt+0x6798>
   2619c:	ldrb	r1, [r6, #1480]	; 0x5c8
   261a0:	ldr	r3, [pc, #1448]	; 26750 <__assert_fail@plt+0x143c4>
   261a4:	mov	r2, r8
   261a8:	stm	sp, {r1, r3}
   261ac:	mov	r1, r7
   261b0:	mov	r3, r0
   261b4:	mov	r0, r5
   261b8:	bl	11dbc <printf@plt>
   261bc:	mov	r0, r7
   261c0:	ldrb	r1, [sp, #216]	; 0xd8
   261c4:	bl	47520 <warn@@Base+0x5d50>
   261c8:	ldr	r4, [sp, #212]	; 0xd4
   261cc:	ldr	r3, [r6, #1464]	; 0x5b8
   261d0:	mov	r2, #5
   261d4:	mov	r0, #0
   261d8:	mov	r5, r0
   261dc:	uxtab	r4, r4, r1
   261e0:	ldr	r1, [pc, #1308]	; 26704 <__assert_fail@plt+0x14378>
   261e4:	add	r3, r3, r4
   261e8:	str	r3, [r6, #1464]	; 0x5b8
   261ec:	bl	11ea0 <dcgettext@plt>
   261f0:	mov	r2, r4
   261f4:	asr	r3, r4, #31
   261f8:	str	r5, [sp]
   261fc:	mov	r7, r0
   26200:	ldr	r0, [pc, #1332]	; 2673c <__assert_fail@plt+0x143b0>
   26204:	bl	18b24 <__assert_fail@plt+0x6798>
   26208:	ldr	r2, [r6, #1464]	; 0x5b8
   2620c:	mov	r1, r0
   26210:	mov	r0, r7
   26214:	bl	11dbc <printf@plt>
   26218:	ldr	r4, [r6, #1456]	; 0x5b0
   2621c:	cmp	r4, r5
   26220:	beq	268f0 <__assert_fail@plt+0x14564>
   26224:	ldr	r1, [pc, #1288]	; 26734 <__assert_fail@plt+0x143a8>
   26228:	mov	r0, r5
   2622c:	mov	r2, #5
   26230:	bl	11ea0 <dcgettext@plt>
   26234:	mov	r1, r4
   26238:	bl	11dbc <printf@plt>
   2623c:	ldr	r3, [r6, #1456]	; 0x5b0
   26240:	add	r3, r3, #1
   26244:	str	r3, [r6, #1456]	; 0x5b0
   26248:	ldr	r3, [sp, #176]	; 0xb0
   2624c:	cmp	r3, sl
   26250:	bls	26324 <__assert_fail@plt+0x13f98>
   26254:	mov	r9, sl
   26258:	ldr	r3, [sp, #88]	; 0x58
   2625c:	mov	sl, r9
   26260:	sub	r1, r9, r3
   26264:	ldr	r0, [pc, #1180]	; 26708 <__assert_fail@plt+0x1437c>
   26268:	bl	11dbc <printf@plt>
   2626c:	ldrb	r7, [sl], #1
   26270:	ldrb	r0, [sp, #217]	; 0xd9
   26274:	cmp	r7, r0
   26278:	bcs	260e0 <__assert_fail@plt+0x13d54>
   2627c:	cmp	r7, #12
   26280:	ldrls	pc, [pc, r7, lsl #2]
   26284:	b	27eec <__assert_fail@plt+0x15b60>
   26288:	strdeq	r6, [r2], -r0
   2628c:	andeq	r6, r2, r4, lsl #16
   26290:	ldrdeq	r6, [r2], -ip
   26294:	andeq	r6, r2, ip, ror #10
   26298:	andeq	r6, r2, r8, lsl #10
   2629c:	andeq	r6, r2, ip, lsl #17
   262a0:	andeq	r6, r2, r0, asr #16
   262a4:	ldrdeq	r6, [r2], -r0
   262a8:	andeq	r6, r2, r4, lsr r4
   262ac:	andeq	r6, r2, r4, lsr #7
   262b0:	andeq	r6, r2, ip, lsl #7
   262b4:	andeq	r6, r2, r4, ror r3
   262b8:			; <UNDEFINED> instruction: 0x000262bc
   262bc:	ldr	r3, [sp, #64]	; 0x40
   262c0:	mov	r2, #0
   262c4:	mov	r0, sl
   262c8:	add	r1, sp, #180	; 0xb4
   262cc:	bl	1b3b0 <__assert_fail@plt+0x9024>
   262d0:	ldr	r3, [sp, #180]	; 0xb4
   262d4:	mov	r2, #5
   262d8:	add	sl, sl, r3
   262dc:	mov	r4, r0
   262e0:	mov	r5, r1
   262e4:	mov	r0, #0
   262e8:	ldr	r1, [pc, #1052]	; 2670c <__assert_fail@plt+0x14380>
   262ec:	bl	11ea0 <dcgettext@plt>
   262f0:	mov	r1, #0
   262f4:	mov	r3, r5
   262f8:	mov	r2, r4
   262fc:	str	r1, [sp]
   26300:	mov	r7, r0
   26304:	ldr	r0, [pc, #1084]	; 26748 <__assert_fail@plt+0x143bc>
   26308:	bl	18b24 <__assert_fail@plt+0x6798>
   2630c:	mov	r1, r0
   26310:	mov	r0, r7
   26314:	bl	11dbc <printf@plt>
   26318:	ldr	r3, [sp, #176]	; 0xb0
   2631c:	cmp	r3, sl
   26320:	bhi	26254 <__assert_fail@plt+0x13ec8>
   26324:	ldr	fp, [sp, #64]	; 0x40
   26328:	ldr	r3, [pc, #1136]	; 267a0 <__assert_fail@plt+0x14414>
   2632c:	mov	r0, #10
   26330:	mov	r9, sl
   26334:	ldr	r1, [r3]
   26338:	bl	12254 <putc@plt>
   2633c:	cmp	fp, r9
   26340:	bhi	26004 <__assert_fail@plt+0x13c78>
   26344:	ldr	r3, [pc, #872]	; 266b4 <__assert_fail@plt+0x14328>
   26348:	ldr	sl, [sp, #88]	; 0x58
   2634c:	ldr	r3, [r3]
   26350:	tst	r3, #2
   26354:	beq	25760 <__assert_fail@plt+0x133d4>
   26358:	ldr	r3, [sp, #76]	; 0x4c
   2635c:	add	r1, r3, #12
   26360:	add	r0, r3, #8
   26364:	bl	1a7b4 <__assert_fail@plt+0x8428>
   26368:	mov	r3, #1
   2636c:	str	r3, [sp, #172]	; 0xac
   26370:	b	25794 <__assert_fail@plt+0x13408>
   26374:	mov	r2, #5
   26378:	ldr	r1, [pc, #912]	; 26710 <__assert_fail@plt+0x14384>
   2637c:	mov	r0, #0
   26380:	bl	11ea0 <dcgettext@plt>
   26384:	bl	11dbc <printf@plt>
   26388:	b	26248 <__assert_fail@plt+0x13ebc>
   2638c:	mov	r2, #5
   26390:	ldr	r1, [pc, #892]	; 26714 <__assert_fail@plt+0x14388>
   26394:	mov	r0, #0
   26398:	bl	11ea0 <dcgettext@plt>
   2639c:	bl	11dbc <printf@plt>
   263a0:	b	26248 <__assert_fail@plt+0x13ebc>
   263a4:	ldr	r3, [sp, #64]	; 0x40
   263a8:	add	r9, r9, #3
   263ac:	cmp	r3, r9
   263b0:	bhi	27c4c <__assert_fail@plt+0x158c0>
   263b4:	cmp	r3, sl
   263b8:	bhi	27cdc <__assert_fail@plt+0x15950>
   263bc:	mov	r5, #0
   263c0:	mov	r7, r5
   263c4:	ldrd	r2, [fp, #-8]
   263c8:	mov	r4, #0
   263cc:	mov	r0, r4
   263d0:	adds	r1, r2, r5
   263d4:	adc	r3, r3, r7
   263d8:	str	r1, [fp, #-8]
   263dc:	mov	r2, #5
   263e0:	ldr	r1, [pc, #816]	; 26718 <__assert_fail@plt+0x1438c>
   263e4:	str	r3, [fp, #-4]
   263e8:	strb	r4, [r6, #1480]	; 0x5c8
   263ec:	bl	11ea0 <dcgettext@plt>
   263f0:	mov	r2, r5
   263f4:	mov	r3, r7
   263f8:	str	r4, [sp]
   263fc:	mov	sl, r9
   26400:	mov	r8, r0
   26404:	ldr	r0, [pc, #828]	; 26748 <__assert_fail@plt+0x143bc>
   26408:	bl	18b24 <__assert_fail@plt+0x6798>
   2640c:	str	r4, [sp]
   26410:	ldrd	r2, [fp, #-8]
   26414:	mov	r5, r0
   26418:	ldr	r0, [pc, #812]	; 2674c <__assert_fail@plt+0x143c0>
   2641c:	bl	18b24 <__assert_fail@plt+0x6798>
   26420:	mov	r1, r5
   26424:	mov	r2, r0
   26428:	mov	r0, r8
   2642c:	bl	11dbc <printf@plt>
   26430:	b	26248 <__assert_fail@plt+0x13ebc>
   26434:	ldrb	r3, [sp, #209]	; 0xd1
   26438:	cmp	r3, #0
   2643c:	beq	27c6c <__assert_fail@plt+0x158e0>
   26440:	ldrb	r1, [sp, #216]	; 0xd8
   26444:	rsb	r0, r0, #255	; 0xff
   26448:	bl	47540 <warn@@Base+0x5d70>
   2644c:	ldrb	r4, [sp, #208]	; 0xd0
   26450:	ldr	r3, [fp, #-8]
   26454:	ldr	r2, [fp, #-4]
   26458:	smull	r4, r5, r0, r4
   2645c:	adds	r3, r3, r4
   26460:	adc	r2, r2, r5
   26464:	orrs	r1, r4, r5
   26468:	str	r3, [fp, #-8]
   2646c:	ldr	r1, [pc, #680]	; 2671c <__assert_fail@plt+0x14390>
   26470:	movne	r3, #0
   26474:	str	r2, [fp, #-4]
   26478:	mov	r0, #0
   2647c:	mov	r2, #5
   26480:	strne	r3, [r6, #1456]	; 0x5b0
   26484:	mov	r7, r0
   26488:	bl	11ea0 <dcgettext@plt>
   2648c:	mov	r2, r4
   26490:	mov	r3, r5
   26494:	str	r7, [sp]
   26498:	mov	r8, r0
   2649c:	ldr	r0, [pc, #676]	; 26748 <__assert_fail@plt+0x143bc>
   264a0:	bl	18b24 <__assert_fail@plt+0x6798>
   264a4:	str	r7, [sp]
   264a8:	ldrd	r2, [fp, #-8]
   264ac:	mov	r4, r0
   264b0:	ldr	r0, [pc, #660]	; 2674c <__assert_fail@plt+0x143c0>
   264b4:	bl	18b24 <__assert_fail@plt+0x6798>
   264b8:	mov	r1, r4
   264bc:	ldr	r3, [pc, #652]	; 26750 <__assert_fail@plt+0x143c4>
   264c0:	mov	r2, r0
   264c4:	mov	r0, r8
   264c8:	bl	11dbc <printf@plt>
   264cc:	b	26248 <__assert_fail@plt+0x13ebc>
   264d0:	mov	r2, #5
   264d4:	ldr	r1, [pc, #580]	; 26720 <__assert_fail@plt+0x14394>
   264d8:	mov	r0, #0
   264dc:	bl	11ea0 <dcgettext@plt>
   264e0:	bl	11dbc <printf@plt>
   264e4:	mov	r3, #1
   264e8:	str	r3, [r6, #1476]	; 0x5c4
   264ec:	b	26248 <__assert_fail@plt+0x13ebc>
   264f0:	mov	r0, sl
   264f4:	ldr	r2, [sp, #64]	; 0x40
   264f8:	ldrb	r1, [sp, #210]	; 0xd2
   264fc:	bl	1dccc <__assert_fail@plt+0xb940>
   26500:	add	sl, sl, r0
   26504:	b	26248 <__assert_fail@plt+0x13ebc>
   26508:	ldr	r3, [sp, #64]	; 0x40
   2650c:	mov	r2, #0
   26510:	mov	r0, sl
   26514:	add	r1, sp, #180	; 0xb4
   26518:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2651c:	ldr	r3, [sp, #180]	; 0xb4
   26520:	mov	r2, #5
   26524:	add	sl, sl, r3
   26528:	mov	r4, r0
   2652c:	mov	r7, r1
   26530:	mov	r0, #0
   26534:	ldr	r1, [pc, #488]	; 26724 <__assert_fail@plt+0x14398>
   26538:	bl	11ea0 <dcgettext@plt>
   2653c:	mov	r1, #0
   26540:	mov	r3, r7
   26544:	mov	r2, r4
   26548:	str	r1, [sp]
   2654c:	mov	r5, r0
   26550:	ldr	r0, [pc, #484]	; 2673c <__assert_fail@plt+0x143b0>
   26554:	bl	18b24 <__assert_fail@plt+0x6798>
   26558:	mov	r1, r0
   2655c:	mov	r0, r5
   26560:	bl	11dbc <printf@plt>
   26564:	str	r4, [r6, #1460]	; 0x5b4
   26568:	b	26248 <__assert_fail@plt+0x13ebc>
   2656c:	ldr	r3, [sp, #64]	; 0x40
   26570:	mov	r2, #1
   26574:	add	r1, sp, #180	; 0xb4
   26578:	mov	r0, sl
   2657c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   26580:	ldr	r3, [sp, #180]	; 0xb4
   26584:	mov	r2, #5
   26588:	add	sl, sl, r3
   2658c:	mov	r4, r0
   26590:	ldr	r0, [r6, #1464]	; 0x5b8
   26594:	mov	r7, r1
   26598:	add	r0, r0, r4
   2659c:	str	r0, [r6, #1464]	; 0x5b8
   265a0:	ldr	r1, [pc, #384]	; 26728 <__assert_fail@plt+0x1439c>
   265a4:	mov	r0, #0
   265a8:	bl	11ea0 <dcgettext@plt>
   265ac:	mov	r1, #0
   265b0:	mov	r2, r4
   265b4:	str	r1, [sp]
   265b8:	mov	r3, r7
   265bc:	mov	r5, r0
   265c0:	ldr	r0, [pc, #372]	; 2673c <__assert_fail@plt+0x143b0>
   265c4:	bl	18b24 <__assert_fail@plt+0x6798>
   265c8:	ldr	r2, [r6, #1464]	; 0x5b8
   265cc:	mov	r1, r0
   265d0:	mov	r0, r5
   265d4:	bl	11dbc <printf@plt>
   265d8:	b	26248 <__assert_fail@plt+0x13ebc>
   265dc:	ldr	r3, [sp, #64]	; 0x40
   265e0:	mov	r2, #0
   265e4:	mov	r0, sl
   265e8:	add	r1, sp, #180	; 0xb4
   265ec:	bl	1b3b0 <__assert_fail@plt+0x9024>
   265f0:	ldrb	r2, [sp, #209]	; 0xd1
   265f4:	ldr	r3, [sp, #180]	; 0xb4
   265f8:	cmp	r2, #1
   265fc:	add	sl, sl, r3
   26600:	mov	r8, r0
   26604:	mov	r7, r1
   26608:	ldrd	r0, [fp, #-8]
   2660c:	strd	r0, [sp, #80]	; 0x50
   26610:	beq	27d70 <__assert_fail@plt+0x159e4>
   26614:	ldrb	r0, [r6, #1480]	; 0x5c8
   26618:	mov	r1, #0
   2661c:	mov	r3, #0
   26620:	adds	r0, r0, r8
   26624:	adc	r1, r1, r7
   26628:	bl	47780 <warn@@Base+0x5fb0>
   2662c:	ldrb	r3, [sp, #208]	; 0xd0
   26630:	ldrd	r4, [sp, #80]	; 0x50
   26634:	ldr	r1, [pc, #240]	; 2672c <__assert_fail@plt+0x143a0>
   26638:	mul	r0, r0, r3
   2663c:	strb	r2, [r6, #1480]	; 0x5c8
   26640:	adds	r4, r4, r0
   26644:	adc	r5, r5, #0
   26648:	cmp	r0, #0
   2664c:	movne	r3, #0
   26650:	mov	r2, #5
   26654:	mov	r0, #0
   26658:	strne	r3, [r6, #1456]	; 0x5b0
   2665c:	strd	r4, [fp, #-8]
   26660:	mov	r4, r0
   26664:	bl	11ea0 <dcgettext@plt>
   26668:	mov	r2, r8
   2666c:	mov	r3, r7
   26670:	str	r4, [sp]
   26674:	mov	r5, r0
   26678:	ldr	r0, [pc, #200]	; 26748 <__assert_fail@plt+0x143bc>
   2667c:	bl	18b24 <__assert_fail@plt+0x6798>
   26680:	str	r4, [sp]
   26684:	ldrd	r2, [fp, #-8]
   26688:	mov	r7, r0
   2668c:	ldr	r0, [pc, #184]	; 2674c <__assert_fail@plt+0x143c0>
   26690:	bl	18b24 <__assert_fail@plt+0x6798>
   26694:	ldr	r3, [pc, #180]	; 26750 <__assert_fail@plt+0x143c4>
   26698:	mov	r1, r7
   2669c:	str	r3, [sp]
   266a0:	ldrb	r3, [r6, #1480]	; 0x5c8
   266a4:	mov	r2, r0
   266a8:	mov	r0, r5
   266ac:	bl	11dbc <printf@plt>
   266b0:	b	26248 <__assert_fail@plt+0x13ebc>
   266b4:			; <UNDEFINED> instruction: 0x00069db4
   266b8:	muleq	r6, ip, sp
   266bc:	muleq	r4, ip, fp
   266c0:	andeq	r7, r6, r0, lsr r5
   266c4:	andeq	sp, r4, r8, lsl #24
   266c8:	andeq	sp, r4, r8, lsl ip
   266cc:	andeq	r7, r6, r0, asr #23
   266d0:	andeq	lr, r4, ip, lsr #8
   266d4:	andeq	lr, r4, r4, ror r4
   266d8:	ldrdeq	lr, [r4], -ip
   266dc:	andeq	lr, r4, ip, asr #4
   266e0:	andeq	lr, r4, r4, lsr #7
   266e4:	andeq	lr, r4, ip, lsr #3
   266e8:	ldrdeq	lr, [r4], -r0
   266ec:	muleq	r4, r8, r5
   266f0:	andeq	lr, r4, r4, ror #5
   266f4:	ldrdeq	sp, [r4], -ip
   266f8:	andeq	sp, r4, r8, asr #30
   266fc:	andeq	sp, r4, r8, ror #30
   26700:	andeq	sp, r4, r8, asr #31
   26704:	andeq	lr, r4, r4
   26708:	andeq	sp, r4, r4, lsl #31
   2670c:	muleq	r4, r8, r1
   26710:	andeq	lr, r4, r8, ror r1
   26714:	andeq	lr, r4, ip, asr r1
   26718:	andeq	lr, r4, ip, lsr #2
   2671c:	andeq	lr, r4, r4, lsl #2
   26720:	strdeq	lr, [r4], -r0
   26724:	muleq	r4, r0, r0
   26728:	andeq	lr, r4, r4, ror r0
   2672c:	andeq	lr, r4, r0, asr r0
   26730:	andeq	lr, r4, r8, lsr #32
   26734:	andeq	lr, r4, ip, lsl r0
   26738:	ldrdeq	lr, [r4], -r8
   2673c:	muleq	r4, r0, r2
   26740:	andeq	lr, r4, r4, asr #1
   26744:	muleq	r4, r0, pc	; <UNPREDICTABLE>
   26748:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   2674c:	andeq	r8, r4, r8, lsr #29
   26750:	andeq	r9, r4, r4, lsr #5
   26754:	andeq	sp, r4, r4, ror #13
   26758:	andeq	sp, r4, ip, ror ip
   2675c:	andeq	sp, r4, r0, lsr #25
   26760:	andeq	sp, r4, r4, asr #25
   26764:	andeq	sp, r4, r8, ror #25
   26768:	andeq	sp, r4, r0, lsr sp
   2676c:	andeq	sp, r4, r4, asr sp
   26770:	andeq	sp, r4, r8, ror sp
   26774:	muleq	r4, ip, sp
   26778:	ldrdeq	r7, [r6], -r8
   2677c:	andeq	sp, r4, ip, lsl lr
   26780:	andeq	sp, r4, r8, lsr #28
   26784:	andeq	sp, r4, r4, asr #28
   26788:	andeq	sp, r4, r4, ror lr
   2678c:	andeq	sp, r4, ip, asr #29
   26790:	andeq	r7, r6, r0, lsr #23
   26794:	ldrdeq	r7, [r6], -r0
   26798:	muleq	r4, r4, r2
   2679c:	andeq	r7, r6, r8, asr #23
   267a0:	andeq	r7, r6, r0, lsr r4
   267a4:	andeq	lr, r4, r4, lsl r4
   267a8:	andeq	lr, r4, ip, asr r4
   267ac:	andeq	lr, r4, r8, asr #8
   267b0:	strdeq	lr, [r4], -r0
   267b4:	andeq	lr, r4, ip, ror r2
   267b8:	andeq	sp, r4, r0, asr #27
   267bc:	andeq	sp, r4, ip, lsl #26
   267c0:	muleq	r4, ip, r4
   267c4:	andeq	sp, r4, ip, asr lr
   267c8:	andeq	sp, r4, r8, ror #28
   267cc:	strdeq	fp, [r4], -r0
   267d0:	andeq	lr, r4, r0, lsl #6
   267d4:	andeq	lr, r4, ip, lsl #4
   267d8:	andeq	lr, r4, r8, lsr #4
   267dc:	andeq	r9, r6, r8, lsr #27
   267e0:	andeq	lr, r4, r4, asr #4
   267e4:	andeq	r9, r6, r0, ror #27
   267e8:	andeq	r1, r5, r0, lsr #30
   267ec:	andeq	lr, r4, r8, lsl #5
   267f0:	andeq	sl, r4, r0, lsl #21
   267f4:	andeq	sl, r4, ip, asr #21
   267f8:	muleq	r4, r8, lr
   267fc:	andeq	sp, r4, r0, asr #29
   26800:	strdeq	sp, [r4], -r0
   26804:	mov	r2, #5
   26808:	ldr	r1, [pc, #-224]	; 26730 <__assert_fail@plt+0x143a4>
   2680c:	mov	r0, #0
   26810:	bl	11ea0 <dcgettext@plt>
   26814:	bl	11dbc <printf@plt>
   26818:	ldr	r4, [r6, #1456]	; 0x5b0
   2681c:	cmp	r4, #0
   26820:	beq	268f0 <__assert_fail@plt+0x14564>
   26824:	mov	r2, #5
   26828:	ldr	r1, [pc, #-252]	; 26734 <__assert_fail@plt+0x143a8>
   2682c:	mov	r0, #0
   26830:	bl	11ea0 <dcgettext@plt>
   26834:	mov	r1, r4
   26838:	bl	11dbc <printf@plt>
   2683c:	b	2623c <__assert_fail@plt+0x13eb0>
   26840:	mov	r2, #5
   26844:	ldr	r1, [pc, #-276]	; 26738 <__assert_fail@plt+0x143ac>
   26848:	mov	r0, #0
   2684c:	ldr	r4, [r6, #1472]	; 0x5c0
   26850:	bl	11ea0 <dcgettext@plt>
   26854:	clz	r4, r4
   26858:	mov	r1, #0
   2685c:	lsr	r4, r4, #5
   26860:	mov	r2, r4
   26864:	mov	r3, #0
   26868:	str	r1, [sp]
   2686c:	mov	r5, r0
   26870:	ldr	r0, [pc, #-316]	; 2673c <__assert_fail@plt+0x143b0>
   26874:	bl	18b24 <__assert_fail@plt+0x6798>
   26878:	mov	r1, r0
   2687c:	mov	r0, r5
   26880:	bl	11dbc <printf@plt>
   26884:	str	r4, [r6, #1472]	; 0x5c0
   26888:	b	26248 <__assert_fail@plt+0x13ebc>
   2688c:	ldr	r3, [sp, #64]	; 0x40
   26890:	mov	r2, #0
   26894:	mov	r0, sl
   26898:	add	r1, sp, #180	; 0xb4
   2689c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   268a0:	ldr	r3, [sp, #180]	; 0xb4
   268a4:	mov	r2, #5
   268a8:	add	sl, sl, r3
   268ac:	mov	r4, r0
   268b0:	mov	r7, r1
   268b4:	mov	r0, #0
   268b8:	ldr	r1, [pc, #-384]	; 26740 <__assert_fail@plt+0x143b4>
   268bc:	bl	11ea0 <dcgettext@plt>
   268c0:	mov	r1, #0
   268c4:	mov	r3, r7
   268c8:	mov	r2, r4
   268cc:	str	r1, [sp]
   268d0:	mov	r5, r0
   268d4:	ldr	r0, [pc, #-404]	; 26748 <__assert_fail@plt+0x143bc>
   268d8:	bl	18b24 <__assert_fail@plt+0x6798>
   268dc:	mov	r1, r0
   268e0:	mov	r0, r5
   268e4:	bl	11dbc <printf@plt>
   268e8:	str	r4, [r6, #1468]	; 0x5bc
   268ec:	b	26248 <__assert_fail@plt+0x13ebc>
   268f0:	ldr	r3, [pc, #-344]	; 267a0 <__assert_fail@plt+0x14414>
   268f4:	mov	r0, #10
   268f8:	ldr	r1, [r3]
   268fc:	bl	12254 <putc@plt>
   26900:	b	2623c <__assert_fail@plt+0x13eb0>
   26904:	umull	r4, r5, r0, r4
   26908:	ldrd	r0, [sp, #96]	; 0x60
   2690c:	adds	r3, r4, r0
   26910:	adc	r2, r5, r1
   26914:	orrs	r1, r4, r5
   26918:	str	r3, [fp, #-8]
   2691c:	ldr	r1, [pc, #-480]	; 26744 <__assert_fail@plt+0x143b8>
   26920:	movne	r3, #0
   26924:	str	r2, [fp, #-4]
   26928:	mov	r0, #0
   2692c:	mov	r2, #5
   26930:	strne	r3, [r6, #1456]	; 0x5b0
   26934:	mov	r8, r0
   26938:	bl	11ea0 <dcgettext@plt>
   2693c:	mov	r2, r4
   26940:	mov	r3, r5
   26944:	str	r8, [sp]
   26948:	mov	r9, r0
   2694c:	ldr	r0, [pc, #-524]	; 26748 <__assert_fail@plt+0x143bc>
   26950:	bl	18b24 <__assert_fail@plt+0x6798>
   26954:	str	r8, [sp]
   26958:	ldrd	r2, [fp, #-8]
   2695c:	mov	r4, r0
   26960:	ldr	r0, [pc, #-540]	; 2674c <__assert_fail@plt+0x143c0>
   26964:	bl	18b24 <__assert_fail@plt+0x6798>
   26968:	ldr	r3, [pc, #-544]	; 26750 <__assert_fail@plt+0x143c4>
   2696c:	mov	r2, r4
   26970:	str	r3, [sp]
   26974:	mov	r1, r7
   26978:	mov	r3, r0
   2697c:	mov	r0, r9
   26980:	bl	11dbc <printf@plt>
   26984:	b	261bc <__assert_fail@plt+0x13e30>
   26988:	add	r3, sp, #176	; 0xb0
   2698c:	str	r3, [sp]
   26990:	mov	r2, fp
   26994:	ldr	r3, [sp, #92]	; 0x5c
   26998:	mov	r1, r9
   2699c:	ldr	r0, [sp, #76]	; 0x4c
   269a0:	bl	19550 <__assert_fail@plt+0x71c4>
   269a4:	subs	r3, r0, #0
   269a8:	str	r3, [sp, #56]	; 0x38
   269ac:	beq	27e58 <__assert_fail@plt+0x15acc>
   269b0:	mov	r2, #5
   269b4:	ldr	r1, [pc, #-616]	; 26754 <__assert_fail@plt+0x143c8>
   269b8:	mov	r0, #0
   269bc:	bl	11ea0 <dcgettext@plt>
   269c0:	ldr	r3, [sp, #88]	; 0x58
   269c4:	sub	r1, r9, r3
   269c8:	bl	11dbc <printf@plt>
   269cc:	mov	r2, #5
   269d0:	ldr	r1, [pc, #-640]	; 26758 <__assert_fail@plt+0x143cc>
   269d4:	mov	r0, #0
   269d8:	bl	11ea0 <dcgettext@plt>
   269dc:	ldr	r1, [sp, #184]	; 0xb8
   269e0:	bl	11dbc <printf@plt>
   269e4:	mov	r2, #5
   269e8:	ldr	r1, [pc, #-660]	; 2675c <__assert_fail@plt+0x143d0>
   269ec:	mov	r0, #0
   269f0:	bl	11ea0 <dcgettext@plt>
   269f4:	ldrh	r1, [sp, #192]	; 0xc0
   269f8:	bl	11dbc <printf@plt>
   269fc:	mov	r2, #5
   26a00:	ldr	r1, [pc, #-680]	; 26760 <__assert_fail@plt+0x143d4>
   26a04:	mov	r0, #0
   26a08:	bl	11ea0 <dcgettext@plt>
   26a0c:	ldr	r1, [sp, #200]	; 0xc8
   26a10:	bl	11dbc <printf@plt>
   26a14:	mov	r2, #5
   26a18:	ldr	r1, [pc, #-700]	; 26764 <__assert_fail@plt+0x143d8>
   26a1c:	mov	r0, #0
   26a20:	bl	11ea0 <dcgettext@plt>
   26a24:	ldrb	r1, [sp, #208]	; 0xd0
   26a28:	bl	11dbc <printf@plt>
   26a2c:	ldrh	r3, [sp, #192]	; 0xc0
   26a30:	cmp	r3, #3
   26a34:	bhi	26eb8 <__assert_fail@plt+0x14b2c>
   26a38:	mov	r2, #5
   26a3c:	ldr	r1, [pc, #-732]	; 26768 <__assert_fail@plt+0x143dc>
   26a40:	mov	r0, #0
   26a44:	bl	11ea0 <dcgettext@plt>
   26a48:	ldrb	r1, [sp, #210]	; 0xd2
   26a4c:	bl	11dbc <printf@plt>
   26a50:	mov	r2, #5
   26a54:	ldr	r1, [pc, #-752]	; 2676c <__assert_fail@plt+0x143e0>
   26a58:	mov	r0, #0
   26a5c:	bl	11ea0 <dcgettext@plt>
   26a60:	ldr	r1, [sp, #212]	; 0xd4
   26a64:	bl	11dbc <printf@plt>
   26a68:	mov	r2, #5
   26a6c:	ldr	r1, [pc, #-772]	; 26770 <__assert_fail@plt+0x143e4>
   26a70:	mov	r0, #0
   26a74:	bl	11ea0 <dcgettext@plt>
   26a78:	ldrb	r1, [sp, #216]	; 0xd8
   26a7c:	bl	11dbc <printf@plt>
   26a80:	mov	r2, #5
   26a84:	ldr	r1, [pc, #-792]	; 26774 <__assert_fail@plt+0x143e8>
   26a88:	mov	r0, #0
   26a8c:	bl	11ea0 <dcgettext@plt>
   26a90:	ldrb	r1, [sp, #217]	; 0xd9
   26a94:	bl	11dbc <printf@plt>
   26a98:	ldrb	r0, [sp, #216]	; 0xd8
   26a9c:	cmp	r0, #0
   26aa0:	beq	26e9c <__assert_fail@plt+0x14b10>
   26aa4:	ldrb	r0, [sp, #210]	; 0xd2
   26aa8:	ldrb	r3, [sp, #217]	; 0xd9
   26aac:	ldr	r1, [pc, #-828]	; 26778 <__assert_fail@plt+0x143ec>
   26ab0:	ldr	r2, [sp, #56]	; 0x38
   26ab4:	str	r0, [r6, #1472]	; 0x5c0
   26ab8:	add	r3, r2, r3
   26abc:	mov	r0, #0
   26ac0:	strh	r0, [r1, #32]
   26ac4:	cmp	fp, r3
   26ac8:	add	r1, r1, #8
   26acc:	mov	r2, #0
   26ad0:	mov	r3, #0
   26ad4:	mov	r4, #1
   26ad8:	str	r0, [r6, #1456]	; 0x5b0
   26adc:	str	r0, [r6, #1468]	; 0x5bc
   26ae0:	str	r0, [r6, #1476]	; 0x5c4
   26ae4:	str	r0, [r6, #1484]	; 0x5cc
   26ae8:	strd	r2, [r1, #-8]
   26aec:	str	r4, [r6, #1460]	; 0x5b4
   26af0:	str	r4, [r6, #1464]	; 0x5b8
   26af4:	str	r1, [sp, #80]	; 0x50
   26af8:	bls	27e60 <__assert_fail@plt+0x15ad4>
   26afc:	mov	r2, #5
   26b00:	ldr	r1, [pc, #-908]	; 2677c <__assert_fail@plt+0x143f0>
   26b04:	bl	11ea0 <dcgettext@plt>
   26b08:	bl	11dbc <printf@plt>
   26b0c:	ldrb	r3, [sp, #217]	; 0xd9
   26b10:	cmp	r3, #1
   26b14:	bls	26b60 <__assert_fail@plt+0x147d4>
   26b18:	ldr	r3, [sp, #56]	; 0x38
   26b1c:	ldr	r9, [pc, #-932]	; 26780 <__assert_fail@plt+0x143f4>
   26b20:	ldr	r8, [pc, #-932]	; 26784 <__assert_fail@plt+0x143f8>
   26b24:	sub	r5, r3, #1
   26b28:	mov	r7, #5
   26b2c:	ldrb	r3, [r5, #1]!
   26b30:	mov	r2, r9
   26b34:	mov	r1, r8
   26b38:	str	r7, [sp]
   26b3c:	mov	r0, #0
   26b40:	bl	12368 <dcngettext@plt>
   26b44:	mov	r1, r4
   26b48:	ldrb	r2, [r5]
   26b4c:	bl	11dbc <printf@plt>
   26b50:	ldrb	r3, [sp, #217]	; 0xd9
   26b54:	add	r4, r4, #1
   26b58:	cmp	r4, r3
   26b5c:	blt	26b2c <__assert_fail@plt+0x147a0>
   26b60:	ldrh	r2, [sp, #192]	; 0xc0
   26b64:	ldr	r1, [sp, #56]	; 0x38
   26b68:	sub	r3, r3, #1
   26b6c:	cmp	r2, #4
   26b70:	add	r4, r1, r3
   26b74:	bhi	26f2c <__assert_fail@plt+0x14ba0>
   26b78:	ldr	r2, [sp, #56]	; 0x38
   26b7c:	ldrb	r0, [r2, r3]
   26b80:	mov	r2, #5
   26b84:	cmp	r0, #0
   26b88:	bne	27750 <__assert_fail@plt+0x153c4>
   26b8c:	ldr	r1, [pc, #-1036]	; 26788 <__assert_fail@plt+0x143fc>
   26b90:	bl	11ea0 <dcgettext@plt>
   26b94:	bl	11dbc <printf@plt>
   26b98:	ldrb	r0, [r4, #1]
   26b9c:	add	r9, r4, #1
   26ba0:	mov	r2, #5
   26ba4:	cmp	r0, #0
   26ba8:	bne	277dc <__assert_fail@plt+0x15450>
   26bac:	ldr	r1, [pc, #-1064]	; 2678c <__assert_fail@plt+0x14400>
   26bb0:	bl	11ea0 <dcgettext@plt>
   26bb4:	bl	11dbc <printf@plt>
   26bb8:	add	r9, r9, #1
   26bbc:	ldr	r3, [pc, #-1060]	; 267a0 <__assert_fail@plt+0x14414>
   26bc0:	mov	r0, #10
   26bc4:	ldr	r1, [r3]
   26bc8:	bl	12254 <putc@plt>
   26bcc:	ldr	lr, [sp, #92]	; 0x5c
   26bd0:	ldr	ip, [pc, #-1096]	; 26790 <__assert_fail@plt+0x14404>
   26bd4:	ldr	r4, [sp, #176]	; 0xb0
   26bd8:	ldm	lr!, {r0, r1, r2, r3}
   26bdc:	stmia	ip!, {r0, r1, r2, r3}
   26be0:	ldm	lr!, {r0, r1, r2, r3}
   26be4:	stmia	ip!, {r0, r1, r2, r3}
   26be8:	ldm	lr, {r0, r1}
   26bec:	stm	ip, {r0, r1}
   26bf0:	b	260ac <__assert_fail@plt+0x13d20>
   26bf4:	ldrb	r3, [sp, #210]	; 0xd2
   26bf8:	ldr	r2, [sp, #116]	; 0x74
   26bfc:	mov	r0, #0
   26c00:	str	r3, [r7, #1472]	; 0x5c0
   26c04:	mov	r3, #0
   26c08:	strh	r3, [r2, #40]	; 0x28
   26c0c:	ldr	r2, [sp, #96]	; 0x60
   26c10:	mov	r1, #0
   26c14:	mov	ip, #1
   26c18:	strd	r0, [r9, #-8]
   26c1c:	ldr	r1, [r2]
   26c20:	mov	r0, #10
   26c24:	str	r3, [r7, #1456]	; 0x5b0
   26c28:	str	r3, [r7, #1468]	; 0x5bc
   26c2c:	str	r3, [r7, #1476]	; 0x5c4
   26c30:	str	r3, [r7, #1484]	; 0x5cc
   26c34:	str	ip, [r7, #1460]	; 0x5b4
   26c38:	str	ip, [r7, #1464]	; 0x5b8
   26c3c:	bl	12254 <putc@plt>
   26c40:	b	259cc <__assert_fail@plt+0x13640>
   26c44:	add	r3, sp, #176	; 0xb0
   26c48:	str	r3, [sp]
   26c4c:	mov	r1, sl
   26c50:	ldr	r3, [sp, #92]	; 0x5c
   26c54:	mov	r2, fp
   26c58:	ldr	r0, [sp, #76]	; 0x4c
   26c5c:	bl	19550 <__assert_fail@plt+0x71c4>
   26c60:	subs	r3, r0, #0
   26c64:	str	r3, [sp, #112]	; 0x70
   26c68:	beq	27d44 <__assert_fail@plt+0x159b8>
   26c6c:	ldrb	r0, [sp, #216]	; 0xd8
   26c70:	cmp	r0, #0
   26c74:	beq	26e64 <__assert_fail@plt+0x14ad8>
   26c78:	ldrb	r3, [sp, #217]	; 0xd9
   26c7c:	ldrb	r2, [sp, #210]	; 0xd2
   26c80:	ldr	r1, [pc, #-1268]	; 26794 <__assert_fail@plt+0x14408>
   26c84:	ldr	r0, [sp, #112]	; 0x70
   26c88:	sub	r6, r3, #1
   26c8c:	add	r6, r0, r6
   26c90:	str	r2, [r7, #1472]	; 0x5c0
   26c94:	add	r2, r1, #16
   26c98:	mov	r0, #0
   26c9c:	mov	r8, #1
   26ca0:	cmp	fp, r6
   26ca4:	str	r1, [sp, #116]	; 0x74
   26ca8:	mov	r5, r0
   26cac:	strh	r0, [r1, #40]	; 0x28
   26cb0:	str	r0, [r7, #1456]	; 0x5b0
   26cb4:	str	r0, [r7, #1468]	; 0x5bc
   26cb8:	str	r0, [r7, #1476]	; 0x5c4
   26cbc:	str	r0, [r7, #1484]	; 0x5cc
   26cc0:	str	r0, [r2, #-8]
   26cc4:	str	r0, [r1, #12]
   26cc8:	str	r8, [r7, #1460]	; 0x5b4
   26ccc:	str	r8, [r7, #1464]	; 0x5b8
   26cd0:	mov	r9, r2
   26cd4:	bls	27e40 <__assert_fail@plt+0x15ab4>
   26cd8:	ldrh	r2, [sp, #192]	; 0xc0
   26cdc:	cmp	r2, #4
   26ce0:	bhi	26fec <__assert_fail@plt+0x14c60>
   26ce4:	ldrb	r3, [r6]
   26ce8:	str	r0, [sp, #56]	; 0x38
   26cec:	str	r0, [sp, #60]	; 0x3c
   26cf0:	cmp	r3, #0
   26cf4:	streq	r3, [sp, #80]	; 0x50
   26cf8:	bne	26ed4 <__assert_fail@plt+0x14b48>
   26cfc:	add	r4, r6, #1
   26d00:	cmp	fp, r4
   26d04:	bhi	26e48 <__assert_fail@plt+0x14abc>
   26d08:	add	r6, r6, #2
   26d0c:	mov	r3, #0
   26d10:	str	r3, [sp, #88]	; 0x58
   26d14:	str	r3, [sp, #64]	; 0x40
   26d18:	mov	r2, #5
   26d1c:	ldr	r1, [pc, #-1420]	; 26798 <__assert_fail@plt+0x1440c>
   26d20:	mov	r0, #0
   26d24:	bl	11ea0 <dcgettext@plt>
   26d28:	bl	11dbc <printf@plt>
   26d2c:	ldr	r4, [sp, #92]	; 0x5c
   26d30:	ldr	ip, [pc, #-1436]	; 2679c <__assert_fail@plt+0x14410>
   26d34:	ldr	lr, [sp, #176]	; 0xb0
   26d38:	ldm	r4!, {r0, r1, r2, r3}
   26d3c:	cmp	r6, lr
   26d40:	stmia	ip!, {r0, r1, r2, r3}
   26d44:	ldm	r4!, {r0, r1, r2, r3}
   26d48:	stmia	ip!, {r0, r1, r2, r3}
   26d4c:	ldm	r4, {r0, r1}
   26d50:	ldr	r3, [pc, #-1464]	; 267a0 <__assert_fail@plt+0x14414>
   26d54:	stm	ip, {r0, r1}
   26d58:	str	r3, [sp, #96]	; 0x60
   26d5c:	bcc	25874 <__assert_fail@plt+0x134e8>
   26d60:	mov	sl, r6
   26d64:	b	25a7c <__assert_fail@plt+0x136f0>
   26d68:	ldr	r3, [sp, #96]	; 0x60
   26d6c:	mov	r0, #10
   26d70:	ldr	r1, [r3]
   26d74:	bl	12254 <putc@plt>
   26d78:	b	259b8 <__assert_fail@plt+0x1362c>
   26d7c:	strd	r0, [sp]
   26d80:	mov	r1, r4
   26d84:	ldr	r0, [pc, #-1512]	; 267a4 <__assert_fail@plt+0x14418>
   26d88:	bl	11dbc <printf@plt>
   26d8c:	b	259a4 <__assert_fail@plt+0x13618>
   26d90:	ldrb	r3, [sp, #209]	; 0xd1
   26d94:	ldr	r2, [r7, #1464]	; 0x5b8
   26d98:	ldrd	r0, [r9, #-8]
   26d9c:	cmp	r3, #1
   26da0:	beq	26ddc <__assert_fail@plt+0x14a50>
   26da4:	ldrb	r3, [r7, #1480]	; 0x5c8
   26da8:	strd	r0, [sp]
   26dac:	mov	r1, r4
   26db0:	str	r3, [sp, #8]
   26db4:	ldr	r0, [pc, #-1556]	; 267a8 <__assert_fail@plt+0x1441c>
   26db8:	bl	11dbc <printf@plt>
   26dbc:	b	259a4 <__assert_fail@plt+0x13618>
   26dc0:	mov	r0, #36	; 0x24
   26dc4:	bl	11f3c <xmalloc@plt>
   26dc8:	sub	r1, r8, #35	; 0x23
   26dcc:	add	r1, r6, r1
   26dd0:	mov	r2, #36	; 0x24
   26dd4:	mov	r4, r0
   26dd8:	b	25964 <__assert_fail@plt+0x135d8>
   26ddc:	strd	r0, [sp]
   26de0:	mov	r1, r4
   26de4:	ldr	r0, [pc, #-1600]	; 267ac <__assert_fail@plt+0x14420>
   26de8:	bl	11dbc <printf@plt>
   26dec:	b	259a4 <__assert_fail@plt+0x13618>
   26df0:	add	r8, r0, #1
   26df4:	mov	r0, r8
   26df8:	bl	11f3c <xmalloc@plt>
   26dfc:	mov	r2, r8
   26e00:	mov	r1, r6
   26e04:	mov	r4, r0
   26e08:	bl	12128 <strncpy@plt>
   26e0c:	b	25978 <__assert_fail@plt+0x135ec>
   26e10:	mov	r2, #5
   26e14:	ldr	r1, [pc, #-1644]	; 267b0 <__assert_fail@plt+0x14424>
   26e18:	mov	r0, #0
   26e1c:	bl	11ea0 <dcgettext@plt>
   26e20:	mov	r1, r4
   26e24:	bl	417d0 <warn@@Base>
   26e28:	mov	r2, #5
   26e2c:	ldr	r1, [pc, #-1664]	; 267b4 <__assert_fail@plt+0x14428>
   26e30:	mov	r0, #0
   26e34:	bl	11ea0 <dcgettext@plt>
   26e38:	mov	r6, r0
   26e3c:	b	25928 <__assert_fail@plt+0x1359c>
   26e40:	smulbb	r0, r0, r8
   26e44:	b	258c8 <__assert_fail@plt+0x1353c>
   26e48:	ldrb	r3, [r6, #1]
   26e4c:	cmp	r3, #0
   26e50:	bne	27968 <__assert_fail@plt+0x155dc>
   26e54:	str	r3, [sp, #88]	; 0x58
   26e58:	add	r6, r6, #2
   26e5c:	str	r3, [sp, #64]	; 0x40
   26e60:	b	26d18 <__assert_fail@plt+0x1498c>
   26e64:	mov	r2, #5
   26e68:	ldr	r1, [pc, #-1720]	; 267b8 <__assert_fail@plt+0x1442c>
   26e6c:	bl	11ea0 <dcgettext@plt>
   26e70:	bl	417d0 <warn@@Base>
   26e74:	mov	r3, #1
   26e78:	strb	r3, [sp, #216]	; 0xd8
   26e7c:	b	26c78 <__assert_fail@plt+0x148ec>
   26e80:	mov	r1, #2
   26e84:	ldr	r3, [pc, #-1704]	; 267e4 <__assert_fail@plt+0x14458>
   26e88:	mov	r0, sl
   26e8c:	ldr	r3, [r3]
   26e90:	blx	r3
   26e94:	mov	r1, #0
   26e98:	b	25af4 <__assert_fail@plt+0x13768>
   26e9c:	mov	r2, #5
   26ea0:	ldr	r1, [pc, #-1776]	; 267b8 <__assert_fail@plt+0x1442c>
   26ea4:	bl	11ea0 <dcgettext@plt>
   26ea8:	bl	417d0 <warn@@Base>
   26eac:	mov	r3, #1
   26eb0:	strb	r3, [sp, #216]	; 0xd8
   26eb4:	b	26aa4 <__assert_fail@plt+0x14718>
   26eb8:	mov	r2, #5
   26ebc:	ldr	r1, [pc, #-1800]	; 267bc <__assert_fail@plt+0x14430>
   26ec0:	mov	r0, #0
   26ec4:	bl	11ea0 <dcgettext@plt>
   26ec8:	ldrb	r1, [sp, #209]	; 0xd1
   26ecc:	bl	11dbc <printf@plt>
   26ed0:	b	26a38 <__assert_fail@plt+0x146ac>
   26ed4:	mov	r5, r9
   26ed8:	mov	r4, r6
   26edc:	ldrd	r8, [sp, #56]	; 0x38
   26ee0:	b	26ef0 <__assert_fail@plt+0x14b64>
   26ee4:	ldrb	r3, [r4]
   26ee8:	cmp	r3, #0
   26eec:	beq	27b30 <__assert_fail@plt+0x157a4>
   26ef0:	sub	r1, fp, r4
   26ef4:	mov	r0, r4
   26ef8:	bl	1217c <strnlen@plt>
   26efc:	adds	r8, r8, #1
   26f00:	adc	r9, r9, #0
   26f04:	add	r0, r0, #1
   26f08:	add	r4, r4, r0
   26f0c:	cmp	fp, r4
   26f10:	bhi	26ee4 <__assert_fail@plt+0x14b58>
   26f14:	mov	r2, #5
   26f18:	ldr	r1, [pc, #-1888]	; 267c0 <__assert_fail@plt+0x14434>
   26f1c:	mov	r0, #0
   26f20:	bl	11ea0 <dcgettext@plt>
   26f24:	bl	417d0 <warn@@Base>
   26f28:	b	25abc <__assert_fail@plt+0x13730>
   26f2c:	ldr	r1, [sp, #132]	; 0x84
   26f30:	mov	r0, #11
   26f34:	bl	19dd4 <__assert_fail@plt+0x7a48>
   26f38:	mov	r2, #5
   26f3c:	ldr	r1, [pc, #-1920]	; 267c4 <__assert_fail@plt+0x14438>
   26f40:	mov	r0, #0
   26f44:	bl	11ea0 <dcgettext@plt>
   26f48:	ldr	r7, [sp, #76]	; 0x4c
   26f4c:	ldr	r8, [sp, #88]	; 0x58
   26f50:	add	r5, sp, #220	; 0xdc
   26f54:	add	r3, sp, #192	; 0xc0
   26f58:	mov	r2, fp
   26f5c:	mov	r1, r8
   26f60:	str	r7, [sp, #4]
   26f64:	str	r5, [sp]
   26f68:	str	r0, [sp, #8]
   26f6c:	mov	r0, r4
   26f70:	bl	25160 <__assert_fail@plt+0x12dd4>
   26f74:	mov	r2, #5
   26f78:	ldr	r1, [pc, #-1976]	; 267c8 <__assert_fail@plt+0x1443c>
   26f7c:	mov	r4, r0
   26f80:	mov	r0, #0
   26f84:	bl	11ea0 <dcgettext@plt>
   26f88:	str	r5, [sp]
   26f8c:	add	r3, sp, #192	; 0xc0
   26f90:	str	r7, [sp, #4]
   26f94:	mov	r2, fp
   26f98:	mov	r1, r8
   26f9c:	str	r0, [sp, #8]
   26fa0:	mov	r0, r4
   26fa4:	bl	25160 <__assert_fail@plt+0x12dd4>
   26fa8:	mov	r9, r0
   26fac:	b	26bbc <__assert_fail@plt+0x14830>
   26fb0:	ldrb	r3, [sp, #208]	; 0xd0
   26fb4:	mul	r0, r0, r3
   26fb8:	b	25ca4 <__assert_fail@plt+0x13918>
   26fbc:	mov	r2, #5
   26fc0:	ldr	r1, [pc, #-2044]	; 267cc <__assert_fail@plt+0x14440>
   26fc4:	bl	11ea0 <dcgettext@plt>
   26fc8:	bl	417d0 <warn@@Base>
   26fcc:	b	259d4 <__assert_fail@plt+0x13648>
   26fd0:	mov	r2, #5
   26fd4:	ldr	r1, [pc, #-2060]	; 267d0 <__assert_fail@plt+0x14444>
   26fd8:	mov	r0, #0
   26fdc:	bl	11ea0 <dcgettext@plt>
   26fe0:	mov	r1, r6
   26fe4:	bl	11dbc <printf@plt>
   26fe8:	b	259d4 <__assert_fail@plt+0x13648>
   26fec:	ldr	r2, [sp, #112]	; 0x70
   26ff0:	ldr	r1, [sp, #132]	; 0x84
   26ff4:	add	r3, r2, r3
   26ff8:	mov	sl, r3
   26ffc:	mov	r0, #11
   27000:	str	r3, [sp, #96]	; 0x60
   27004:	bl	19dd4 <__assert_fail@plt+0x7a48>
   27008:	cmp	fp, sl
   2700c:	bhi	27b9c <__assert_fail@plt+0x15810>
   27010:	sub	r1, fp, r6
   27014:	sub	r3, r1, #1
   27018:	cmp	r3, #7
   2701c:	bls	27ba0 <__assert_fail@plt+0x15814>
   27020:	ldr	r6, [sp, #96]	; 0x60
   27024:	add	sl, sp, #180	; 0xb4
   27028:	str	r5, [sp, #120]	; 0x78
   2702c:	str	r5, [sp, #124]	; 0x7c
   27030:	mov	r3, fp
   27034:	mov	r2, #0
   27038:	mov	r1, sl
   2703c:	mov	r0, r6
   27040:	bl	1b3b0 <__assert_fail@plt+0x9024>
   27044:	ldr	r3, [sp, #180]	; 0xb4
   27048:	add	r8, r6, r3
   2704c:	cmp	fp, r8
   27050:	strd	r0, [sp, #56]	; 0x38
   27054:	beq	27e80 <__assert_fail@plt+0x15af4>
   27058:	ldrd	r4, [sp, #56]	; 0x38
   2705c:	lsl	r0, r4, #2
   27060:	bl	11f3c <xmalloc@plt>
   27064:	orrs	r3, r4, r5
   27068:	str	r0, [sp, #80]	; 0x50
   2706c:	beq	27558 <__assert_fail@plt+0x151cc>
   27070:	mov	r2, #0
   27074:	mov	r3, #0
   27078:	mov	r6, fp
   2707c:	str	sl, [sp, #88]	; 0x58
   27080:	mov	r4, r0
   27084:	mov	sl, r2
   27088:	mov	fp, r3
   2708c:	str	r2, [sp, #156]	; 0x9c
   27090:	str	r3, [sp, #168]	; 0xa8
   27094:	str	r9, [sp, #152]	; 0x98
   27098:	ldrd	r2, [sp, #120]	; 0x78
   2709c:	orrs	r1, r2, r3
   270a0:	beq	27528 <__assert_fail@plt+0x1519c>
   270a4:	strd	sl, [sp, #136]	; 0x88
   270a8:	str	r2, [sp, #128]	; 0x80
   270ac:	ldr	r9, [sp, #96]	; 0x60
   270b0:	mov	r5, #0
   270b4:	mov	fp, r4
   270b8:	b	27134 <__assert_fail@plt+0x14da8>
   270bc:	ldr	r3, [sp, #76]	; 0x4c
   270c0:	ldrh	ip, [sp, #192]	; 0xc0
   270c4:	str	r3, [sp, #44]	; 0x2c
   270c8:	ldr	r3, [sp, #156]	; 0x9c
   270cc:	ldr	r1, [sp, #168]	; 0xa8
   270d0:	mov	r0, #0
   270d4:	mov	r2, #9
   270d8:	str	r3, [sp, #16]
   270dc:	str	r3, [sp, #8]
   270e0:	mov	r3, #1
   270e4:	str	r1, [sp, #20]
   270e8:	str	r1, [sp, #12]
   270ec:	str	r8, [sp]
   270f0:	add	r5, r5, r3
   270f4:	str	r2, [sp, #52]	; 0x34
   270f8:	str	r3, [sp, #40]	; 0x28
   270fc:	str	r4, [sp, #24]
   27100:	mov	r3, #0
   27104:	str	r6, [sp, #4]
   27108:	ldr	r1, [sp, #64]	; 0x40
   2710c:	str	ip, [sp, #32]
   27110:	str	r0, [sp, #48]	; 0x30
   27114:	str	r0, [sp, #36]	; 0x24
   27118:	str	r0, [sp, #28]
   2711c:	mov	r2, #0
   27120:	bl	1eb4c <__assert_fail@plt+0xc7c0>
   27124:	ldr	r3, [sp, #128]	; 0x80
   27128:	cmp	r3, r5
   2712c:	mov	r8, r0
   27130:	beq	27520 <__assert_fail@plt+0x15194>
   27134:	ldr	r4, [sp, #88]	; 0x58
   27138:	mov	r3, r6
   2713c:	mov	r2, #0
   27140:	mov	r0, r9
   27144:	mov	r1, r4
   27148:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2714c:	ldr	r2, [sp, #180]	; 0xb4
   27150:	mov	r3, r6
   27154:	add	r9, r9, r2
   27158:	mov	r2, #0
   2715c:	strd	r0, [sp, #104]	; 0x68
   27160:	mov	r0, r9
   27164:	mov	r1, r4
   27168:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2716c:	ldr	r3, [sp, #180]	; 0xb4
   27170:	cmp	r6, r8
   27174:	add	r9, r9, r3
   27178:	strd	r0, [sp, #64]	; 0x40
   2717c:	beq	2724c <__assert_fail@plt+0x14ec0>
   27180:	ldrd	r2, [sp, #104]	; 0x68
   27184:	ldr	r4, [sp, #220]	; 0xdc
   27188:	cmp	r3, #0
   2718c:	cmpeq	r2, #1
   27190:	bne	270bc <__assert_fail@plt+0x14d30>
   27194:	ldrd	r2, [sp, #64]	; 0x40
   27198:	cmp	r3, #0
   2719c:	cmpeq	r2, #8
   271a0:	streq	r8, [fp]
   271a4:	beq	270bc <__assert_fail@plt+0x14d30>
   271a8:	cmp	r3, #0
   271ac:	cmpeq	r2, #31
   271b0:	bne	270bc <__assert_fail@plt+0x14d30>
   271b4:	cmp	r4, #8
   271b8:	bhi	27204 <__assert_fail@plt+0x14e78>
   271bc:	add	r3, r8, r4
   271c0:	cmp	r6, r3
   271c4:	bhi	271d4 <__assert_fail@plt+0x14e48>
   271c8:	cmp	r6, r8
   271cc:	bls	27240 <__assert_fail@plt+0x14eb4>
   271d0:	sub	r4, r6, r8
   271d4:	sub	r3, r4, #1
   271d8:	cmp	r3, #7
   271dc:	movls	r1, r4
   271e0:	bhi	27240 <__assert_fail@plt+0x14eb4>
   271e4:	ldr	r3, [pc, #-2568]	; 267e4 <__assert_fail@plt+0x14458>
   271e8:	mov	r0, r8
   271ec:	ldr	r3, [r3]
   271f0:	blx	r3
   271f4:	bl	1a1cc <__assert_fail@plt+0x7e40>
   271f8:	ldr	r4, [sp, #220]	; 0xdc
   271fc:	str	r0, [fp]
   27200:	b	270bc <__assert_fail@plt+0x14d30>
   27204:	mov	r3, #5
   27208:	str	r3, [sp]
   2720c:	ldr	r2, [pc, #-2596]	; 267f0 <__assert_fail@plt+0x14464>
   27210:	mov	r3, r4
   27214:	ldr	r1, [pc, #-2600]	; 267f4 <__assert_fail@plt+0x14468>
   27218:	mov	r0, #0
   2721c:	bl	12368 <dcngettext@plt>
   27220:	mov	r1, r4
   27224:	mov	r2, #8
   27228:	bl	412ac <error@@Base>
   2722c:	add	r3, r8, #8
   27230:	cmp	r6, r3
   27234:	bls	271c8 <__assert_fail@plt+0x14e3c>
   27238:	mov	r1, #8
   2723c:	b	271e4 <__assert_fail@plt+0x14e58>
   27240:	mov	r0, #0
   27244:	mov	r1, #0
   27248:	b	271f4 <__assert_fail@plt+0x14e68>
   2724c:	mov	r2, #5
   27250:	ldr	r1, [pc, #-2692]	; 267d4 <__assert_fail@plt+0x14448>
   27254:	mov	r0, #0
   27258:	mov	fp, r6
   2725c:	ldr	r9, [sp, #152]	; 0x98
   27260:	ldr	sl, [sp, #88]	; 0x58
   27264:	bl	11ea0 <dcgettext@plt>
   27268:	bl	417d0 <warn@@Base>
   2726c:	mov	r2, #5
   27270:	ldr	r1, [pc, #-2724]	; 267d4 <__assert_fail@plt+0x14448>
   27274:	mov	r0, #0
   27278:	bl	11ea0 <dcgettext@plt>
   2727c:	add	r3, r8, #1
   27280:	mov	r4, r3
   27284:	str	r3, [sp, #152]	; 0x98
   27288:	bl	417d0 <warn@@Base>
   2728c:	cmp	fp, r4
   27290:	bls	27580 <__assert_fail@plt+0x151f4>
   27294:	mov	r1, #1
   27298:	ldr	r3, [pc, #-2748]	; 267e4 <__assert_fail@plt+0x14458>
   2729c:	mov	r0, r8
   272a0:	ldr	r3, [r3]
   272a4:	blx	r3
   272a8:	ldr	r6, [sp, #152]	; 0x98
   272ac:	uxtb	r3, r0
   272b0:	str	r3, [sp, #144]	; 0x90
   272b4:	mov	r3, #0
   272b8:	str	r3, [sp, #148]	; 0x94
   272bc:	ldrd	r2, [sp, #144]	; 0x90
   272c0:	orrs	r1, r2, r3
   272c4:	beq	2732c <__assert_fail@plt+0x14fa0>
   272c8:	str	r9, [sp, #64]	; 0x40
   272cc:	mov	r4, #0
   272d0:	mov	r5, #0
   272d4:	mov	r8, r2
   272d8:	mov	r9, r3
   272dc:	mov	r3, fp
   272e0:	mov	r2, #0
   272e4:	mov	r0, r6
   272e8:	mov	r1, sl
   272ec:	bl	1b3b0 <__assert_fail@plt+0x9024>
   272f0:	ldr	r2, [sp, #180]	; 0xb4
   272f4:	mov	r3, fp
   272f8:	add	r6, r6, r2
   272fc:	mov	r0, r6
   27300:	mov	r2, #0
   27304:	mov	r1, sl
   27308:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2730c:	adds	r4, r4, #1
   27310:	adc	r5, r5, #0
   27314:	ldr	r3, [sp, #180]	; 0xb4
   27318:	cmp	r9, r5
   2731c:	cmpeq	r8, r4
   27320:	add	r6, r6, r3
   27324:	bne	272dc <__assert_fail@plt+0x14f50>
   27328:	ldr	r9, [sp, #64]	; 0x40
   2732c:	mov	r3, fp
   27330:	mov	r0, r6
   27334:	mov	r2, #0
   27338:	mov	r1, sl
   2733c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   27340:	mov	r3, r0
   27344:	str	r0, [sp, #156]	; 0x9c
   27348:	ldr	r0, [sp, #180]	; 0xb4
   2734c:	str	r3, [sp, #88]	; 0x58
   27350:	add	r6, r6, r0
   27354:	cmp	fp, r6
   27358:	beq	27e98 <__assert_fail@plt+0x15b0c>
   2735c:	ldr	r3, [sp, #156]	; 0x9c
   27360:	mov	r0, #1
   27364:	str	r3, [sp, #160]	; 0xa0
   27368:	lsl	r1, r3, #4
   2736c:	bl	1235c <xcalloc@plt>
   27370:	mov	r3, #0
   27374:	str	r3, [sp, #164]	; 0xa4
   27378:	ldrd	r4, [sp, #160]	; 0xa0
   2737c:	orrs	r2, r4, r5
   27380:	str	r0, [sp, #64]	; 0x40
   27384:	beq	275c0 <__assert_fail@plt+0x15234>
   27388:	str	r9, [sp, #168]	; 0xa8
   2738c:	mov	r9, r0
   27390:	str	r3, [sp, #104]	; 0x68
   27394:	str	sl, [sp, #128]	; 0x80
   27398:	ldrd	r2, [sp, #144]	; 0x90
   2739c:	orrs	r1, r2, r3
   273a0:	beq	276a8 <__assert_fail@plt+0x1531c>
   273a4:	str	r2, [sp, #136]	; 0x88
   273a8:	ldr	sl, [sp, #152]	; 0x98
   273ac:	mov	r8, #0
   273b0:	b	27454 <__assert_fail@plt+0x150c8>
   273b4:	cmp	r5, #0
   273b8:	cmpeq	r4, #2
   273bc:	bne	273e8 <__assert_fail@plt+0x1505c>
   273c0:	ldrd	r2, [sp, #96]	; 0x60
   273c4:	cmp	r3, #0
   273c8:	cmpeq	r2, #11
   273cc:	beq	2773c <__assert_fail@plt+0x153b0>
   273d0:	cmp	r3, #0
   273d4:	cmpeq	r2, #15
   273d8:	beq	2771c <__assert_fail@plt+0x15390>
   273dc:	cmp	r3, #0
   273e0:	cmpeq	r2, #5
   273e4:	beq	27630 <__assert_fail@plt+0x152a4>
   273e8:	ldr	r4, [sp, #220]	; 0xdc
   273ec:	ldr	r3, [sp, #76]	; 0x4c
   273f0:	ldrh	ip, [sp, #192]	; 0xc0
   273f4:	mov	r0, #0
   273f8:	mov	r1, #0
   273fc:	str	r3, [sp, #44]	; 0x2c
   27400:	mov	r2, #9
   27404:	mov	r3, #1
   27408:	strd	r0, [sp, #16]
   2740c:	strd	r0, [sp, #8]
   27410:	stm	sp, {r6, fp}
   27414:	add	r8, r8, r3
   27418:	str	r2, [sp, #52]	; 0x34
   2741c:	str	r3, [sp, #40]	; 0x28
   27420:	str	r4, [sp, #24]
   27424:	mov	r3, #0
   27428:	ldr	r1, [sp, #96]	; 0x60
   2742c:	str	ip, [sp, #32]
   27430:	str	r0, [sp, #48]	; 0x30
   27434:	str	r0, [sp, #36]	; 0x24
   27438:	str	r0, [sp, #28]
   2743c:	mov	r2, #0
   27440:	bl	1eb4c <__assert_fail@plt+0xc7c0>
   27444:	ldr	r3, [sp, #136]	; 0x88
   27448:	cmp	r8, r3
   2744c:	mov	r6, r0
   27450:	beq	276a8 <__assert_fail@plt+0x1531c>
   27454:	mov	r3, fp
   27458:	mov	r2, #0
   2745c:	mov	r0, sl
   27460:	ldr	r1, [sp, #128]	; 0x80
   27464:	bl	1b3b0 <__assert_fail@plt+0x9024>
   27468:	ldr	r2, [sp, #180]	; 0xb4
   2746c:	mov	r3, fp
   27470:	add	sl, sl, r2
   27474:	mov	r2, #0
   27478:	mov	r4, r0
   2747c:	mov	r5, r1
   27480:	mov	r0, sl
   27484:	ldr	r1, [sp, #128]	; 0x80
   27488:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2748c:	ldr	r3, [sp, #180]	; 0xb4
   27490:	cmp	fp, r6
   27494:	add	sl, sl, r3
   27498:	strd	r0, [sp, #96]	; 0x60
   2749c:	beq	27594 <__assert_fail@plt+0x15208>
   274a0:	cmp	r5, #0
   274a4:	cmpeq	r4, #1
   274a8:	bne	273b4 <__assert_fail@plt+0x15028>
   274ac:	ldrd	r2, [sp, #96]	; 0x60
   274b0:	ldr	r4, [sp, #220]	; 0xdc
   274b4:	cmp	r3, #0
   274b8:	cmpeq	r2, #8
   274bc:	streq	r6, [r9]
   274c0:	beq	273ec <__assert_fail@plt+0x15060>
   274c4:	cmp	r3, #0
   274c8:	cmpeq	r2, #31
   274cc:	bne	273ec <__assert_fail@plt+0x15060>
   274d0:	cmp	r4, #8
   274d4:	bhi	276d4 <__assert_fail@plt+0x15348>
   274d8:	add	r3, r6, r4
   274dc:	cmp	fp, r3
   274e0:	bhi	274f0 <__assert_fail@plt+0x15164>
   274e4:	cmp	fp, r6
   274e8:	bls	27710 <__assert_fail@plt+0x15384>
   274ec:	sub	r4, fp, r6
   274f0:	sub	r3, r4, #1
   274f4:	cmp	r3, #7
   274f8:	movls	r1, r4
   274fc:	bhi	27710 <__assert_fail@plt+0x15384>
   27500:	ldr	r3, [pc, #-3364]	; 267e4 <__assert_fail@plt+0x14458>
   27504:	mov	r0, r6
   27508:	ldr	r3, [r3]
   2750c:	blx	r3
   27510:	bl	1a1cc <__assert_fail@plt+0x7e40>
   27514:	ldr	r4, [sp, #220]	; 0xdc
   27518:	str	r0, [r9]
   2751c:	b	273ec <__assert_fail@plt+0x15060>
   27520:	mov	r4, fp
   27524:	ldrd	sl, [sp, #136]	; 0x88
   27528:	cmp	r6, r8
   2752c:	beq	27edc <__assert_fail@plt+0x15b50>
   27530:	ldrd	r2, [sp, #56]	; 0x38
   27534:	adds	sl, sl, #1
   27538:	adc	fp, fp, #0
   2753c:	cmp	r3, fp
   27540:	cmpeq	r2, sl
   27544:	add	r4, r4, #4
   27548:	bne	27098 <__assert_fail@plt+0x14d0c>
   2754c:	ldr	r9, [sp, #152]	; 0x98
   27550:	ldr	sl, [sp, #88]	; 0x58
   27554:	mov	fp, r6
   27558:	add	r3, r8, #1
   2755c:	cmp	fp, r3
   27560:	str	r3, [sp, #152]	; 0x98
   27564:	bhi	27294 <__assert_fail@plt+0x14f08>
   27568:	cmp	fp, r8
   2756c:	bls	27580 <__assert_fail@plt+0x151f4>
   27570:	sub	r1, fp, r8
   27574:	sub	r3, r1, #1
   27578:	cmp	r3, #7
   2757c:	bls	27298 <__assert_fail@plt+0x14f0c>
   27580:	mov	r2, #0
   27584:	mov	r3, #0
   27588:	ldr	r6, [sp, #152]	; 0x98
   2758c:	strd	r2, [sp, #144]	; 0x90
   27590:	b	2732c <__assert_fail@plt+0x14fa0>
   27594:	mov	r2, #5
   27598:	ldr	r1, [pc, #-3528]	; 267d8 <__assert_fail@plt+0x1444c>
   2759c:	mov	r0, #0
   275a0:	ldr	r9, [sp, #168]	; 0xa8
   275a4:	bl	11ea0 <dcgettext@plt>
   275a8:	bl	417d0 <warn@@Base>
   275ac:	mov	r2, #5
   275b0:	ldr	r1, [pc, #-3552]	; 267d8 <__assert_fail@plt+0x1444c>
   275b4:	mov	r0, #0
   275b8:	bl	11ea0 <dcgettext@plt>
   275bc:	bl	417d0 <warn@@Base>
   275c0:	ldr	r3, [sp, #64]	; 0x40
   275c4:	ldr	r4, [r3, #4]
   275c8:	cmp	r4, #0
   275cc:	beq	2765c <__assert_fail@plt+0x152d0>
   275d0:	ldrd	r2, [sp, #56]	; 0x38
   275d4:	orrs	r3, r2, r3
   275d8:	beq	27b84 <__assert_fail@plt+0x157f8>
   275dc:	ldrd	r0, [sp, #56]	; 0x38
   275e0:	mov	r3, #0
   275e4:	cmp	r3, r1
   275e8:	cmpeq	r4, r0
   275ec:	bhi	27c70 <__assert_fail@plt+0x158e4>
   275f0:	ldr	r3, [sp, #80]	; 0x50
   275f4:	sub	r4, r4, #-1073741823	; 0xc0000001
   275f8:	ldr	r4, [r3, r4, lsl #2]
   275fc:	ldr	r3, [pc, #-3624]	; 267dc <__assert_fail@plt+0x14450>
   27600:	ldr	r3, [r3]
   27604:	cmp	r3, #0
   27608:	bne	27660 <__assert_fail@plt+0x152d4>
   2760c:	mov	r0, r4
   27610:	bl	12074 <strlen@plt>
   27614:	cmp	r0, #75	; 0x4b
   27618:	bls	27660 <__assert_fail@plt+0x152d4>
   2761c:	ldr	r3, [sp, #64]	; 0x40
   27620:	ldr	r0, [pc, #-3656]	; 267e0 <__assert_fail@plt+0x14454>
   27624:	ldr	r1, [r3]
   27628:	bl	11dbc <printf@plt>
   2762c:	b	26d18 <__assert_fail@plt+0x1498c>
   27630:	add	r3, r6, #2
   27634:	cmp	fp, r3
   27638:	bls	27684 <__assert_fail@plt+0x152f8>
   2763c:	mov	r1, #2
   27640:	ldr	r3, [pc, #-3684]	; 267e4 <__assert_fail@plt+0x14458>
   27644:	mov	r0, r6
   27648:	ldr	r3, [r3]
   2764c:	blx	r3
   27650:	ldr	r4, [sp, #220]	; 0xdc
   27654:	str	r0, [r9, #4]
   27658:	b	273ec <__assert_fail@plt+0x15060>
   2765c:	ldr	r4, [pc, #-3708]	; 267e8 <__assert_fail@plt+0x1445c>
   27660:	mov	r2, #5
   27664:	ldr	r1, [pc, #-3712]	; 267ec <__assert_fail@plt+0x14460>
   27668:	mov	r0, #0
   2766c:	bl	11ea0 <dcgettext@plt>
   27670:	ldr	r3, [sp, #64]	; 0x40
   27674:	mov	r1, r4
   27678:	ldr	r2, [r3]
   2767c:	bl	11dbc <printf@plt>
   27680:	b	26d18 <__assert_fail@plt+0x1498c>
   27684:	cmp	fp, r6
   27688:	bls	2769c <__assert_fail@plt+0x15310>
   2768c:	sub	r1, fp, r6
   27690:	sub	r3, r1, #1
   27694:	cmp	r3, #7
   27698:	bls	27640 <__assert_fail@plt+0x152b4>
   2769c:	mov	r3, #0
   276a0:	str	r3, [r9, #4]
   276a4:	b	273e8 <__assert_fail@plt+0x1505c>
   276a8:	cmp	fp, r6
   276ac:	beq	27ed4 <__assert_fail@plt+0x15b48>
   276b0:	ldr	r3, [sp, #104]	; 0x68
   276b4:	ldr	r2, [sp, #156]	; 0x9c
   276b8:	add	r3, r3, #1
   276bc:	cmp	r3, r2
   276c0:	str	r3, [sp, #104]	; 0x68
   276c4:	add	r9, r9, #16
   276c8:	bne	27398 <__assert_fail@plt+0x1500c>
   276cc:	ldr	r9, [sp, #168]	; 0xa8
   276d0:	b	275c0 <__assert_fail@plt+0x15234>
   276d4:	mov	r3, #5
   276d8:	str	r3, [sp]
   276dc:	ldr	r2, [pc, #-3828]	; 267f0 <__assert_fail@plt+0x14464>
   276e0:	mov	r3, r4
   276e4:	ldr	r1, [pc, #-3832]	; 267f4 <__assert_fail@plt+0x14468>
   276e8:	mov	r0, #0
   276ec:	bl	12368 <dcngettext@plt>
   276f0:	mov	r1, r4
   276f4:	mov	r2, #8
   276f8:	bl	412ac <error@@Base>
   276fc:	add	r3, r6, #8
   27700:	cmp	fp, r3
   27704:	bls	274e4 <__assert_fail@plt+0x15158>
   27708:	mov	r1, #8
   2770c:	b	27500 <__assert_fail@plt+0x15174>
   27710:	mov	r0, #0
   27714:	mov	r1, #0
   27718:	b	27510 <__assert_fail@plt+0x15184>
   2771c:	mov	r2, #0
   27720:	mov	r1, r2
   27724:	mov	r3, fp
   27728:	mov	r0, r6
   2772c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   27730:	ldr	r4, [sp, #220]	; 0xdc
   27734:	str	r0, [r9, #4]
   27738:	b	273ec <__assert_fail@plt+0x15060>
   2773c:	add	r3, r6, #1
   27740:	cmp	fp, r3
   27744:	bls	27684 <__assert_fail@plt+0x152f8>
   27748:	mov	r1, #1
   2774c:	b	27640 <__assert_fail@plt+0x152b4>
   27750:	ldr	r1, [pc, #-3936]	; 267f8 <__assert_fail@plt+0x1446c>
   27754:	mov	r0, #0
   27758:	bl	11ea0 <dcgettext@plt>
   2775c:	ldr	r3, [sp, #88]	; 0x58
   27760:	sub	r1, r4, r3
   27764:	bl	11dbc <printf@plt>
   27768:	cmp	fp, r4
   2776c:	bls	277cc <__assert_fail@plt+0x15440>
   27770:	ldrb	r3, [r4]
   27774:	cmp	r3, #0
   27778:	beq	277cc <__assert_fail@plt+0x15440>
   2777c:	ldr	r8, [pc, #-3976]	; 267fc <__assert_fail@plt+0x14470>
   27780:	mov	r5, #0
   27784:	b	27794 <__assert_fail@plt+0x15408>
   27788:	ldrb	r3, [r4]
   2778c:	cmp	r3, #0
   27790:	beq	277cc <__assert_fail@plt+0x15440>
   27794:	sub	r7, fp, r4
   27798:	add	r5, r5, #1
   2779c:	mov	r3, r4
   277a0:	mov	r1, r5
   277a4:	mov	r2, r7
   277a8:	mov	r0, r8
   277ac:	bl	11dbc <printf@plt>
   277b0:	mov	r0, r4
   277b4:	mov	r1, r7
   277b8:	bl	1217c <strnlen@plt>
   277bc:	add	r0, r0, #1
   277c0:	add	r4, r4, r0
   277c4:	cmp	fp, r4
   277c8:	bhi	27788 <__assert_fail@plt+0x153fc>
   277cc:	sub	r3, fp, #1
   277d0:	cmp	r4, r3
   277d4:	bcc	26b98 <__assert_fail@plt+0x1480c>
   277d8:	b	26344 <__assert_fail@plt+0x13fb8>
   277dc:	ldr	r1, [pc, #-4068]	; 26800 <__assert_fail@plt+0x14474>
   277e0:	mov	r0, #0
   277e4:	bl	11ea0 <dcgettext@plt>
   277e8:	ldr	r3, [sp, #88]	; 0x58
   277ec:	sub	r1, r9, r3
   277f0:	bl	11dbc <printf@plt>
   277f4:	mov	r2, #5
   277f8:	ldr	r1, [pc, #1992]	; 27fc8 <__assert_fail@plt+0x15c3c>
   277fc:	mov	r0, #0
   27800:	bl	11ea0 <dcgettext@plt>
   27804:	bl	11dbc <printf@plt>
   27808:	cmp	fp, r9
   2780c:	bls	26bb8 <__assert_fail@plt+0x1482c>
   27810:	ldrb	r3, [r4, #1]
   27814:	cmp	r3, #0
   27818:	beq	26bb8 <__assert_fail@plt+0x1482c>
   2781c:	ldr	sl, [pc, #1960]	; 27fcc <__assert_fail@plt+0x15c40>
   27820:	ldr	r8, [pc, #1960]	; 27fd0 <__assert_fail@plt+0x15c44>
   27824:	add	r7, sp, #180	; 0xb4
   27828:	mov	r5, #0
   2782c:	b	27840 <__assert_fail@plt+0x154b4>
   27830:	bls	26bb8 <__assert_fail@plt+0x1482c>
   27834:	ldrb	r3, [r4, r3]
   27838:	cmp	r3, #0
   2783c:	beq	26bb8 <__assert_fail@plt+0x1482c>
   27840:	ldr	r3, [r6, #1484]	; 0x5cc
   27844:	sub	r2, fp, r9
   27848:	add	r3, r3, #1
   2784c:	mov	r4, r2
   27850:	mov	r1, r3
   27854:	ldr	r0, [pc, #1912]	; 27fd4 <__assert_fail@plt+0x15c48>
   27858:	str	r3, [r6, #1484]	; 0x5cc
   2785c:	bl	11dbc <printf@plt>
   27860:	mov	r1, r4
   27864:	mov	r0, r9
   27868:	str	r4, [sp, #64]	; 0x40
   2786c:	bl	1217c <strnlen@plt>
   27870:	mov	r3, fp
   27874:	mov	r2, #0
   27878:	mov	r1, r7
   2787c:	add	r4, r0, #1
   27880:	add	r4, r9, r4
   27884:	mov	r0, r4
   27888:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2788c:	str	r5, [sp]
   27890:	mov	r2, r0
   27894:	mov	r3, r1
   27898:	mov	r0, sl
   2789c:	bl	18b24 <__assert_fail@plt+0x6798>
   278a0:	mov	r1, r0
   278a4:	mov	r0, r8
   278a8:	bl	11dbc <printf@plt>
   278ac:	ldr	r0, [sp, #180]	; 0xb4
   278b0:	mov	r3, fp
   278b4:	add	r4, r4, r0
   278b8:	mov	r0, r4
   278bc:	mov	r2, #0
   278c0:	mov	r1, r7
   278c4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   278c8:	str	r5, [sp]
   278cc:	mov	r2, r0
   278d0:	mov	r3, r1
   278d4:	mov	r0, sl
   278d8:	bl	18b24 <__assert_fail@plt+0x6798>
   278dc:	mov	r1, r0
   278e0:	mov	r0, r8
   278e4:	bl	11dbc <printf@plt>
   278e8:	ldr	r0, [sp, #180]	; 0xb4
   278ec:	mov	r3, fp
   278f0:	add	r4, r4, r0
   278f4:	mov	r2, #0
   278f8:	mov	r0, r4
   278fc:	mov	r1, r7
   27900:	bl	1b3b0 <__assert_fail@plt+0x9024>
   27904:	str	r5, [sp]
   27908:	mov	r2, r0
   2790c:	mov	r3, r1
   27910:	mov	r0, sl
   27914:	bl	18b24 <__assert_fail@plt+0x6798>
   27918:	mov	r1, r0
   2791c:	mov	r0, r8
   27920:	bl	11dbc <printf@plt>
   27924:	ldr	r3, [sp, #180]	; 0xb4
   27928:	ldr	r1, [sp, #64]	; 0x40
   2792c:	mov	r2, r9
   27930:	ldr	r0, [pc, #1696]	; 27fd8 <__assert_fail@plt+0x15c4c>
   27934:	add	r9, r4, r3
   27938:	str	r3, [sp, #64]	; 0x40
   2793c:	bl	11dbc <printf@plt>
   27940:	cmp	fp, r9
   27944:	ldr	r3, [sp, #64]	; 0x40
   27948:	bne	27830 <__assert_fail@plt+0x154a4>
   2794c:	mov	r2, #5
   27950:	ldr	r1, [pc, #1668]	; 27fdc <__assert_fail@plt+0x15c50>
   27954:	mov	r0, #0
   27958:	bl	11ea0 <dcgettext@plt>
   2795c:	bl	417d0 <warn@@Base>
   27960:	mov	r9, fp
   27964:	b	26bb8 <__assert_fail@plt+0x1482c>
   27968:	mov	r3, #0
   2796c:	mov	r5, r4
   27970:	str	r4, [sp, #64]	; 0x40
   27974:	add	sl, sp, #180	; 0xb4
   27978:	mov	r4, r3
   2797c:	b	2798c <__assert_fail@plt+0x15600>
   27980:	ldrb	r3, [r8, r3]
   27984:	cmp	r3, #0
   27988:	beq	27a50 <__assert_fail@plt+0x156c4>
   2798c:	sub	r1, fp, r5
   27990:	mov	r0, r5
   27994:	bl	1217c <strnlen@plt>
   27998:	mov	r3, fp
   2799c:	mov	r2, #0
   279a0:	mov	r1, sl
   279a4:	add	r4, r4, #1
   279a8:	add	r8, r0, #1
   279ac:	add	r8, r5, r8
   279b0:	mov	r0, r8
   279b4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   279b8:	ldr	r5, [sp, #180]	; 0xb4
   279bc:	mov	r3, fp
   279c0:	add	r8, r8, r5
   279c4:	mov	r0, r8
   279c8:	mov	r2, #0
   279cc:	mov	r1, sl
   279d0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   279d4:	ldr	r0, [sp, #180]	; 0xb4
   279d8:	mov	r3, fp
   279dc:	add	r8, r8, r0
   279e0:	mov	r0, r8
   279e4:	mov	r2, #0
   279e8:	mov	r1, sl
   279ec:	bl	1b3b0 <__assert_fail@plt+0x9024>
   279f0:	ldr	r3, [sp, #180]	; 0xb4
   279f4:	add	r5, r8, r3
   279f8:	cmp	fp, r5
   279fc:	bhi	27980 <__assert_fail@plt+0x155f4>
   27a00:	mov	r2, #5
   27a04:	ldr	r1, [pc, #1492]	; 27fe0 <__assert_fail@plt+0x15c54>
   27a08:	mov	r0, #0
   27a0c:	bl	11ea0 <dcgettext@plt>
   27a10:	bl	417d0 <warn@@Base>
   27a14:	b	25abc <__assert_fail@plt+0x13730>
   27a18:	mov	r2, #5
   27a1c:	ldr	r1, [pc, #1472]	; 27fe4 <__assert_fail@plt+0x15c58>
   27a20:	mov	r0, r4
   27a24:	bl	11ea0 <dcgettext@plt>
   27a28:	ldr	r2, [sp, #88]	; 0x58
   27a2c:	mov	r1, r5
   27a30:	bl	417d0 <warn@@Base>
   27a34:	mov	r0, r4
   27a38:	mov	r2, #5
   27a3c:	ldr	r1, [pc, #1444]	; 27fe8 <__assert_fail@plt+0x15c5c>
   27a40:	bl	11ea0 <dcgettext@plt>
   27a44:	mov	r1, r6
   27a48:	bl	11dbc <printf@plt>
   27a4c:	b	259d4 <__assert_fail@plt+0x13648>
   27a50:	mov	r3, r4
   27a54:	str	r4, [sp, #88]	; 0x58
   27a58:	lsl	r0, r3, #4
   27a5c:	ldr	r4, [sp, #64]	; 0x40
   27a60:	bl	11f3c <xmalloc@plt>
   27a64:	ldrb	r3, [r6, #1]
   27a68:	cmp	r3, #0
   27a6c:	str	r0, [sp, #64]	; 0x40
   27a70:	ldrne	r8, [sp, #64]	; 0x40
   27a74:	beq	27b00 <__assert_fail@plt+0x15774>
   27a78:	str	r4, [r8]
   27a7c:	sub	r1, fp, r4
   27a80:	mov	r0, r4
   27a84:	bl	1217c <strnlen@plt>
   27a88:	mov	r3, fp
   27a8c:	mov	r2, #0
   27a90:	mov	r1, sl
   27a94:	add	r8, r8, #16
   27a98:	add	r6, r0, #1
   27a9c:	add	r6, r4, r6
   27aa0:	mov	r0, r6
   27aa4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   27aa8:	ldr	r2, [sp, #180]	; 0xb4
   27aac:	mov	r3, fp
   27ab0:	add	r6, r6, r2
   27ab4:	mov	r1, sl
   27ab8:	mov	r2, #0
   27abc:	str	r0, [r8, #-12]
   27ac0:	mov	r0, r6
   27ac4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   27ac8:	ldr	r2, [sp, #180]	; 0xb4
   27acc:	mov	r3, fp
   27ad0:	add	r6, r6, r2
   27ad4:	mov	r1, sl
   27ad8:	mov	r2, #0
   27adc:	str	r0, [r8, #-8]
   27ae0:	mov	r0, r6
   27ae4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   27ae8:	ldr	r3, [sp, #180]	; 0xb4
   27aec:	add	r4, r6, r3
   27af0:	str	r0, [r8, #-4]
   27af4:	ldrb	r3, [r6, r3]
   27af8:	cmp	r3, #0
   27afc:	bne	27a78 <__assert_fail@plt+0x156ec>
   27b00:	ldr	r3, [sp, #80]	; 0x50
   27b04:	add	r6, r5, #1
   27b08:	cmp	r3, #0
   27b0c:	bne	275c0 <__assert_fail@plt+0x15234>
   27b10:	mov	r2, #5
   27b14:	ldr	r1, [pc, #1232]	; 27fec <__assert_fail@plt+0x15c60>
   27b18:	ldr	r0, [sp, #80]	; 0x50
   27b1c:	bl	11ea0 <dcgettext@plt>
   27b20:	ldr	r3, [sp, #64]	; 0x40
   27b24:	ldr	r1, [r3]
   27b28:	bl	11dbc <printf@plt>
   27b2c:	b	26d18 <__assert_fail@plt+0x1498c>
   27b30:	strd	r8, [sp, #56]	; 0x38
   27b34:	ldr	r3, [sp, #56]	; 0x38
   27b38:	mov	r9, r5
   27b3c:	lsl	r0, r3, #2
   27b40:	bl	11f3c <xmalloc@plt>
   27b44:	ldrb	r3, [r6]
   27b48:	cmp	r3, #0
   27b4c:	str	r0, [sp, #80]	; 0x50
   27b50:	ldrne	r3, [sp, #80]	; 0x50
   27b54:	subne	r5, r3, #4
   27b58:	beq	27b7c <__assert_fail@plt+0x157f0>
   27b5c:	str	r6, [r5, #4]!
   27b60:	sub	r1, r6, fp
   27b64:	mov	r0, r6
   27b68:	bl	1217c <strnlen@plt>
   27b6c:	add	r0, r0, #1
   27b70:	ldrb	r3, [r6, r0]!
   27b74:	cmp	r3, #0
   27b78:	bne	27b5c <__assert_fail@plt+0x157d0>
   27b7c:	mov	r6, r4
   27b80:	b	26cfc <__assert_fail@plt+0x14970>
   27b84:	mov	r2, #5
   27b88:	ldr	r1, [pc, #1120]	; 27ff0 <__assert_fail@plt+0x15c64>
   27b8c:	mov	r0, #0
   27b90:	bl	11ea0 <dcgettext@plt>
   27b94:	mov	r4, r0
   27b98:	b	275fc <__assert_fail@plt+0x15270>
   27b9c:	mov	r1, r8
   27ba0:	ldr	r3, [pc, #1100]	; 27ff4 <__assert_fail@plt+0x15c68>
   27ba4:	mov	r0, r6
   27ba8:	ldr	r3, [r3]
   27bac:	blx	r3
   27bb0:	ldr	r6, [sp, #96]	; 0x60
   27bb4:	uxtb	r3, r0
   27bb8:	str	r3, [sp, #120]	; 0x78
   27bbc:	mov	r3, #0
   27bc0:	str	r3, [sp, #124]	; 0x7c
   27bc4:	ldrd	r2, [sp, #120]	; 0x78
   27bc8:	orrs	r1, r2, r3
   27bcc:	beq	27e78 <__assert_fail@plt+0x15aec>
   27bd0:	str	r9, [sp, #56]	; 0x38
   27bd4:	mov	r4, #0
   27bd8:	mov	r5, #0
   27bdc:	add	sl, sp, #180	; 0xb4
   27be0:	mov	r8, r2
   27be4:	mov	r9, r3
   27be8:	mov	r3, fp
   27bec:	mov	r2, #0
   27bf0:	mov	r0, r6
   27bf4:	mov	r1, sl
   27bf8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   27bfc:	ldr	r2, [sp, #180]	; 0xb4
   27c00:	mov	r3, fp
   27c04:	add	r6, r6, r2
   27c08:	mov	r0, r6
   27c0c:	mov	r2, #0
   27c10:	mov	r1, sl
   27c14:	bl	1b3b0 <__assert_fail@plt+0x9024>
   27c18:	adds	r4, r4, #1
   27c1c:	adc	r5, r5, #0
   27c20:	ldr	r3, [sp, #180]	; 0xb4
   27c24:	cmp	r5, r9
   27c28:	cmpeq	r4, r8
   27c2c:	add	r6, r6, r3
   27c30:	bne	27be8 <__assert_fail@plt+0x1585c>
   27c34:	ldr	r9, [sp, #56]	; 0x38
   27c38:	b	27030 <__assert_fail@plt+0x14ca4>
   27c3c:	ldr	r1, [r3, r6, lsl #4]
   27c40:	ldr	r0, [pc, #944]	; 27ff8 <__assert_fail@plt+0x15c6c>
   27c44:	bl	11dbc <printf@plt>
   27c48:	b	259d4 <__assert_fail@plt+0x13648>
   27c4c:	mov	r1, #2
   27c50:	ldr	r3, [pc, #924]	; 27ff4 <__assert_fail@plt+0x15c68>
   27c54:	mov	r0, sl
   27c58:	ldr	r3, [r3]
   27c5c:	blx	r3
   27c60:	mov	r5, r0
   27c64:	mov	r7, r1
   27c68:	b	263c4 <__assert_fail@plt+0x14038>
   27c6c:	udf	#0
   27c70:	ldr	r1, [pc, #900]	; 27ffc <__assert_fail@plt+0x15c70>
   27c74:	mov	r2, #5
   27c78:	mov	r0, #0
   27c7c:	mov	r5, r0
   27c80:	bl	11ea0 <dcgettext@plt>
   27c84:	ldrd	r2, [sp, #56]	; 0x38
   27c88:	str	r5, [sp]
   27c8c:	mov	r8, r0
   27c90:	ldr	r0, [pc, #820]	; 27fcc <__assert_fail@plt+0x15c40>
   27c94:	bl	18b24 <__assert_fail@plt+0x6798>
   27c98:	mov	r1, r4
   27c9c:	mov	r2, r0
   27ca0:	mov	r0, r8
   27ca4:	bl	417d0 <warn@@Base>
   27ca8:	mov	r0, r5
   27cac:	mov	r2, #5
   27cb0:	ldr	r1, [pc, #840]	; 28000 <__assert_fail@plt+0x15c74>
   27cb4:	bl	11ea0 <dcgettext@plt>
   27cb8:	mov	r4, r0
   27cbc:	b	275fc <__assert_fail@plt+0x15270>
   27cc0:	ldr	r3, [sp, #80]	; 0x50
   27cc4:	sub	r5, r5, #-1073741823	; 0xc0000001
   27cc8:	ldr	r2, [r8]
   27ccc:	ldr	r1, [r3, r5, lsl #2]
   27cd0:	ldr	r0, [pc, #812]	; 28004 <__assert_fail@plt+0x15c78>
   27cd4:	bl	11dbc <printf@plt>
   27cd8:	b	259d4 <__assert_fail@plt+0x13648>
   27cdc:	sub	r1, r3, sl
   27ce0:	sub	r3, r1, #1
   27ce4:	cmp	r3, #7
   27ce8:	bhi	263bc <__assert_fail@plt+0x14030>
   27cec:	b	27c50 <__assert_fail@plt+0x158c4>
   27cf0:	mov	r3, #5
   27cf4:	str	r3, [sp]
   27cf8:	ldr	r2, [pc, #776]	; 28008 <__assert_fail@plt+0x15c7c>
   27cfc:	mov	r3, r4
   27d00:	ldr	r1, [pc, #772]	; 2800c <__assert_fail@plt+0x15c80>
   27d04:	mov	r0, #0
   27d08:	bl	12368 <dcngettext@plt>
   27d0c:	add	r5, r5, #9
   27d10:	mov	r1, r4
   27d14:	mov	r2, #8
   27d18:	bl	412ac <error@@Base>
   27d1c:	cmp	fp, r5
   27d20:	bls	25f74 <__assert_fail@plt+0x13be8>
   27d24:	mov	r1, #8
   27d28:	b	25f90 <__assert_fail@plt+0x13c04>
   27d2c:	mov	sl, r9
   27d30:	b	26328 <__assert_fail@plt+0x13f9c>
   27d34:	mov	r2, #5
   27d38:	ldr	r1, [pc, #720]	; 28010 <__assert_fail@plt+0x15c84>
   27d3c:	bl	11ea0 <dcgettext@plt>
   27d40:	bl	417d0 <warn@@Base>
   27d44:	mov	r0, #0
   27d48:	add	sp, sp, #228	; 0xe4
   27d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d50:	mov	r0, r4
   27d54:	mov	r2, #5
   27d58:	ldr	r1, [pc, #692]	; 28014 <__assert_fail@plt+0x15c88>
   27d5c:	bl	11ea0 <dcgettext@plt>
   27d60:	mov	r2, r5
   27d64:	ldr	r1, [r8]
   27d68:	bl	11dbc <printf@plt>
   27d6c:	b	259d4 <__assert_fail@plt+0x13648>
   27d70:	ldrb	r2, [sp, #208]	; 0xd0
   27d74:	umull	r8, r9, r2, r8
   27d78:	mla	r9, r2, r7, r9
   27d7c:	adds	r3, r8, r0
   27d80:	adc	r2, r9, r1
   27d84:	orrs	r1, r8, r9
   27d88:	str	r3, [fp, #-8]
   27d8c:	ldr	r1, [pc, #644]	; 28018 <__assert_fail@plt+0x15c8c>
   27d90:	movne	r3, #0
   27d94:	str	r2, [fp, #-4]
   27d98:	mov	r0, #0
   27d9c:	mov	r2, #5
   27da0:	strne	r3, [r6, #1456]	; 0x5b0
   27da4:	mov	r4, r0
   27da8:	bl	11ea0 <dcgettext@plt>
   27dac:	mov	r2, r8
   27db0:	mov	r3, r9
   27db4:	str	r4, [sp]
   27db8:	mov	r5, r0
   27dbc:	ldr	r0, [pc, #520]	; 27fcc <__assert_fail@plt+0x15c40>
   27dc0:	bl	18b24 <__assert_fail@plt+0x6798>
   27dc4:	str	r4, [sp]
   27dc8:	ldrd	r2, [fp, #-8]
   27dcc:	mov	r7, r0
   27dd0:	ldr	r0, [pc, #580]	; 2801c <__assert_fail@plt+0x15c90>
   27dd4:	bl	18b24 <__assert_fail@plt+0x6798>
   27dd8:	mov	r1, r7
   27ddc:	ldr	r3, [pc, #572]	; 28020 <__assert_fail@plt+0x15c94>
   27de0:	mov	r2, r0
   27de4:	mov	r0, r5
   27de8:	bl	11dbc <printf@plt>
   27dec:	b	26248 <__assert_fail@plt+0x13ebc>
   27df0:	mov	r2, #0
   27df4:	mov	r3, #0
   27df8:	strd	r2, [r9, #-8]
   27dfc:	b	25fa4 <__assert_fail@plt+0x13c18>
   27e00:	mov	r2, #5
   27e04:	ldr	r1, [pc, #516]	; 28010 <__assert_fail@plt+0x15c84>
   27e08:	ldr	sl, [sp, #88]	; 0x58
   27e0c:	bl	11ea0 <dcgettext@plt>
   27e10:	bl	417d0 <warn@@Base>
   27e14:	ldr	r3, [pc, #520]	; 28024 <__assert_fail@plt+0x15c98>
   27e18:	ldr	r0, [r3]
   27e1c:	ands	r0, r0, #2
   27e20:	beq	25764 <__assert_fail@plt+0x133d8>
   27e24:	ldr	r3, [sp, #76]	; 0x4c
   27e28:	add	r1, r3, #12
   27e2c:	add	r0, r3, #8
   27e30:	bl	1a7b4 <__assert_fail@plt+0x8428>
   27e34:	mov	r3, #0
   27e38:	str	r3, [sp, #172]	; 0xac
   27e3c:	b	25794 <__assert_fail@plt+0x13408>
   27e40:	mov	r2, #5
   27e44:	ldr	r1, [pc, #476]	; 28028 <__assert_fail@plt+0x15c9c>
   27e48:	bl	11ea0 <dcgettext@plt>
   27e4c:	ldrb	r1, [sp, #217]	; 0xd9
   27e50:	bl	417d0 <warn@@Base>
   27e54:	b	27d44 <__assert_fail@plt+0x159b8>
   27e58:	ldr	sl, [sp, #88]	; 0x58
   27e5c:	b	27e14 <__assert_fail@plt+0x15a88>
   27e60:	mov	r2, #5
   27e64:	ldr	r1, [pc, #448]	; 2802c <__assert_fail@plt+0x15ca0>
   27e68:	ldr	sl, [sp, #88]	; 0x58
   27e6c:	bl	11ea0 <dcgettext@plt>
   27e70:	bl	417d0 <warn@@Base>
   27e74:	b	27e14 <__assert_fail@plt+0x15a88>
   27e78:	add	sl, sp, #180	; 0xb4
   27e7c:	b	27030 <__assert_fail@plt+0x14ca4>
   27e80:	mov	r2, #5
   27e84:	ldr	r1, [pc, #420]	; 28030 <__assert_fail@plt+0x15ca4>
   27e88:	mov	r0, #0
   27e8c:	bl	11ea0 <dcgettext@plt>
   27e90:	bl	417d0 <warn@@Base>
   27e94:	b	25abc <__assert_fail@plt+0x13730>
   27e98:	mov	r2, #5
   27e9c:	ldr	r1, [pc, #400]	; 28034 <__assert_fail@plt+0x15ca8>
   27ea0:	mov	r0, #0
   27ea4:	bl	11ea0 <dcgettext@plt>
   27ea8:	bl	417d0 <warn@@Base>
   27eac:	b	25abc <__assert_fail@plt+0x13730>
   27eb0:	ldr	r3, [pc, #364]	; 28024 <__assert_fail@plt+0x15c98>
   27eb4:	ldr	r3, [r3]
   27eb8:	tst	r3, #2
   27ebc:	beq	25760 <__assert_fail@plt+0x133d4>
   27ec0:	ldr	r3, [sp, #76]	; 0x4c
   27ec4:	add	r1, r3, #12
   27ec8:	add	r0, r3, #8
   27ecc:	bl	1a7b4 <__assert_fail@plt+0x8428>
   27ed0:	b	25760 <__assert_fail@plt+0x133d4>
   27ed4:	ldr	r9, [sp, #168]	; 0xa8
   27ed8:	b	275ac <__assert_fail@plt+0x15220>
   27edc:	mov	fp, r6
   27ee0:	ldr	r9, [sp, #152]	; 0x98
   27ee4:	ldr	sl, [sp, #88]	; 0x58
   27ee8:	b	2726c <__assert_fail@plt+0x14ee0>
   27eec:	mov	r2, #5
   27ef0:	ldr	r1, [pc, #320]	; 28038 <__assert_fail@plt+0x15cac>
   27ef4:	mov	r0, #0
   27ef8:	bl	11ea0 <dcgettext@plt>
   27efc:	mov	r1, r7
   27f00:	bl	11dbc <printf@plt>
   27f04:	ldr	r3, [sp, #56]	; 0x38
   27f08:	cmp	r3, #0
   27f0c:	bne	27f24 <__assert_fail@plt+0x15b98>
   27f10:	ldr	r3, [pc, #292]	; 2803c <__assert_fail@plt+0x15cb0>
   27f14:	mov	r0, #10
   27f18:	ldr	r1, [r3]
   27f1c:	bl	12254 <putc@plt>
   27f20:	b	26248 <__assert_fail@plt+0x13ebc>
   27f24:	add	r7, r3, r7
   27f28:	ldrb	r4, [r7, #-1]
   27f2c:	cmp	r4, #0
   27f30:	beq	27f10 <__assert_fail@plt+0x15b84>
   27f34:	ldr	r8, [pc, #224]	; 2801c <__assert_fail@plt+0x15c90>
   27f38:	ldr	r7, [pc, #256]	; 28040 <__assert_fail@plt+0x15cb4>
   27f3c:	add	r5, sp, #180	; 0xb4
   27f40:	mov	r9, #0
   27f44:	ldr	r3, [sp, #64]	; 0x40
   27f48:	mov	r2, #0
   27f4c:	mov	r1, r5
   27f50:	mov	r0, sl
   27f54:	bl	1b3b0 <__assert_fail@plt+0x9024>
   27f58:	str	r9, [sp]
   27f5c:	mov	r2, r0
   27f60:	mov	r3, r1
   27f64:	mov	r0, r8
   27f68:	bl	18b24 <__assert_fail@plt+0x6798>
   27f6c:	cmp	r4, #1
   27f70:	mov	r1, r0
   27f74:	beq	27f94 <__assert_fail@plt+0x15c08>
   27f78:	mov	r2, r7
   27f7c:	ldr	r0, [pc, #192]	; 28044 <__assert_fail@plt+0x15cb8>
   27f80:	bl	11dbc <printf@plt>
   27f84:	ldr	r3, [sp, #180]	; 0xb4
   27f88:	sub	r4, r4, #1
   27f8c:	add	sl, sl, r3
   27f90:	b	27f44 <__assert_fail@plt+0x15bb8>
   27f94:	ldr	r2, [pc, #132]	; 28020 <__assert_fail@plt+0x15c94>
   27f98:	ldr	r0, [pc, #164]	; 28044 <__assert_fail@plt+0x15cb8>
   27f9c:	bl	11dbc <printf@plt>
   27fa0:	ldr	r3, [sp, #180]	; 0xb4
   27fa4:	add	sl, sl, r3
   27fa8:	b	27f10 <__assert_fail@plt+0x15b84>
   27fac:	ldr	r2, [pc, #140]	; 28040 <__assert_fail@plt+0x15cb4>
   27fb0:	ldr	r0, [pc, #140]	; 28044 <__assert_fail@plt+0x15cb8>
   27fb4:	bl	11dbc <printf@plt>
   27fb8:	ldr	r3, [sp, #180]	; 0xb4
   27fbc:	sub	r4, r4, #1
   27fc0:	add	sl, sl, r3
   27fc4:	b	25d5c <__assert_fail@plt+0x139d0>
   27fc8:			; <UNDEFINED> instruction: 0x0004beb4
   27fcc:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   27fd0:	ldrdeq	fp, [r4], -r8
   27fd4:	andeq	sp, r4, r8, lsl pc
   27fd8:	andeq	sp, r4, r0, lsr #30
   27fdc:	andeq	sp, r4, r8, lsr #30
   27fe0:	andeq	lr, r4, ip, ror r4
   27fe4:	andeq	lr, r4, r0, lsr #6
   27fe8:	andeq	lr, r4, r4, asr #6
   27fec:	andeq	lr, r4, r0, asr #4
   27ff0:	muleq	r4, r8, r5
   27ff4:	andeq	r9, r6, r0, ror #27
   27ff8:	andeq	lr, r4, r8, ror #6
   27ffc:	andeq	lr, r4, ip, asr #4
   28000:	andeq	lr, r4, ip, ror r2
   28004:	ldrdeq	lr, [r4], -r0
   28008:	andeq	sl, r4, r0, lsl #21
   2800c:	andeq	sl, r4, ip, asr #21
   28010:	andeq	sp, r4, r8, lsr #24
   28014:	andeq	lr, r4, r4, ror r3
   28018:	andeq	lr, r4, r0, lsr r0
   2801c:	andeq	r8, r4, r8, lsr #29
   28020:	andeq	r9, r4, r4, lsr #5
   28024:			; <UNDEFINED> instruction: 0x00069db4
   28028:	ldrdeq	lr, [r4], -r8
   2802c:	strdeq	sp, [r4], -r0
   28030:	andeq	lr, r4, ip, lsl #4
   28034:	andeq	lr, r4, r8, lsr #4
   28038:	andeq	lr, r4, ip, lsr #3
   2803c:	andeq	r7, r6, r0, lsr r4
   28040:	andeq	r8, r4, r4, lsl lr
   28044:	ldrdeq	lr, [r4], -r0
   28048:	ldr	r3, [pc, #16]	; 28060 <__assert_fail@plt+0x15cd4>
   2804c:	ldr	r1, [pc, #16]	; 28064 <__assert_fail@plt+0x15cd8>
   28050:	mov	r2, #101	; 0x65
   28054:	str	r1, [r3, #72]	; 0x48
   28058:	str	r2, [r3, #76]	; 0x4c
   2805c:	bx	lr
   28060:	andeq	r7, r6, r0, lsr r5
   28064:	andeq	r9, r4, r0, lsl #24
   28068:	ldr	r3, [pc, #16]	; 28080 <__assert_fail@plt+0x15cf4>
   2806c:	ldr	r1, [pc, #16]	; 28084 <__assert_fail@plt+0x15cf8>
   28070:	mov	r2, #101	; 0x65
   28074:	str	r1, [r3, #72]	; 0x48
   28078:	str	r2, [r3, #76]	; 0x4c
   2807c:	bx	lr
   28080:	andeq	r7, r6, r0, lsr r5
   28084:	muleq	r4, r4, sp
   28088:	ldr	r3, [pc, #16]	; 280a0 <__assert_fail@plt+0x15d14>
   2808c:	ldr	r1, [pc, #16]	; 280a4 <__assert_fail@plt+0x15d18>
   28090:	mov	r2, #126	; 0x7e
   28094:	str	r1, [r3, #72]	; 0x48
   28098:	str	r2, [r3, #76]	; 0x4c
   2809c:	bx	lr
   280a0:	andeq	r7, r6, r0, lsr r5
   280a4:	andeq	r9, r4, r8, lsr #30
   280a8:	ldr	r3, [pc, #16]	; 280c0 <__assert_fail@plt+0x15d34>
   280ac:	ldr	r1, [pc, #16]	; 280c4 <__assert_fail@plt+0x15d38>
   280b0:	mov	r2, #96	; 0x60
   280b4:	str	r1, [r3, #72]	; 0x48
   280b8:	str	r2, [r3, #76]	; 0x4c
   280bc:	bx	lr
   280c0:	andeq	r7, r6, r0, lsr r5
   280c4:	andeq	sl, r4, r0, lsr #2
   280c8:	ldr	r3, [pc, #16]	; 280e0 <__assert_fail@plt+0x15d54>
   280cc:	ldr	r1, [pc, #16]	; 280e4 <__assert_fail@plt+0x15d58>
   280d0:	mov	r2, #84	; 0x54
   280d4:	str	r1, [r3, #72]	; 0x48
   280d8:	str	r2, [r3, #76]	; 0x4c
   280dc:	bx	lr
   280e0:	andeq	r7, r6, r0, lsr r5
   280e4:	andeq	sl, r4, r0, lsr #5
   280e8:	ldr	r3, [pc, #16]	; 28100 <__assert_fail@plt+0x15d74>
   280ec:	ldr	r1, [pc, #16]	; 28104 <__assert_fail@plt+0x15d78>
   280f0:	mov	r2, #64	; 0x40
   280f4:	str	r1, [r3, #72]	; 0x48
   280f8:	str	r2, [r3, #76]	; 0x4c
   280fc:	bx	lr
   28100:	andeq	r7, r6, r0, lsr r5
   28104:	strdeq	sl, [r4], -r0
   28108:	cmp	r0, #62	; 0x3e
   2810c:	beq	2817c <__assert_fail@plt+0x15df0>
   28110:	bhi	28144 <__assert_fail@plt+0x15db8>
   28114:	cmp	r0, #6
   28118:	beq	28194 <__assert_fail@plt+0x15e08>
   2811c:	cmp	r0, #22
   28120:	beq	281ac <__assert_fail@plt+0x15e20>
   28124:	cmp	r0, #3
   28128:	bxne	lr
   2812c:	ldr	r3, [pc, #168]	; 281dc <__assert_fail@plt+0x15e50>
   28130:	ldr	r1, [pc, #168]	; 281e0 <__assert_fail@plt+0x15e54>
   28134:	mov	r2, #101	; 0x65
   28138:	str	r1, [r3, #72]	; 0x48
   2813c:	str	r2, [r3, #76]	; 0x4c
   28140:	bx	lr
   28144:	cmp	r0, #183	; 0xb7
   28148:	beq	281c4 <__assert_fail@plt+0x15e38>
   2814c:	bls	28170 <__assert_fail@plt+0x15de4>
   28150:	cmp	r0, #243	; 0xf3
   28154:	bxne	lr
   28158:	ldr	r3, [pc, #124]	; 281dc <__assert_fail@plt+0x15e50>
   2815c:	ldr	r1, [pc, #128]	; 281e4 <__assert_fail@plt+0x15e58>
   28160:	mov	r2, #64	; 0x40
   28164:	str	r1, [r3, #72]	; 0x48
   28168:	str	r2, [r3, #76]	; 0x4c
   2816c:	bx	lr
   28170:	sub	r0, r0, #180	; 0xb4
   28174:	cmp	r0, #1
   28178:	bxhi	lr
   2817c:	ldr	r3, [pc, #88]	; 281dc <__assert_fail@plt+0x15e50>
   28180:	ldr	r1, [pc, #96]	; 281e8 <__assert_fail@plt+0x15e5c>
   28184:	mov	r2, #126	; 0x7e
   28188:	str	r1, [r3, #72]	; 0x48
   2818c:	str	r2, [r3, #76]	; 0x4c
   28190:	bx	lr
   28194:	ldr	r3, [pc, #64]	; 281dc <__assert_fail@plt+0x15e50>
   28198:	ldr	r1, [pc, #76]	; 281ec <__assert_fail@plt+0x15e60>
   2819c:	mov	r2, #101	; 0x65
   281a0:	str	r1, [r3, #72]	; 0x48
   281a4:	str	r2, [r3, #76]	; 0x4c
   281a8:	bx	lr
   281ac:	ldr	r3, [pc, #40]	; 281dc <__assert_fail@plt+0x15e50>
   281b0:	ldr	r1, [pc, #56]	; 281f0 <__assert_fail@plt+0x15e64>
   281b4:	mov	r2, #84	; 0x54
   281b8:	str	r1, [r3, #72]	; 0x48
   281bc:	str	r2, [r3, #76]	; 0x4c
   281c0:	bx	lr
   281c4:	ldr	r3, [pc, #16]	; 281dc <__assert_fail@plt+0x15e50>
   281c8:	ldr	r1, [pc, #36]	; 281f4 <__assert_fail@plt+0x15e68>
   281cc:	mov	r2, #96	; 0x60
   281d0:	str	r1, [r3, #72]	; 0x48
   281d4:	str	r2, [r3, #76]	; 0x4c
   281d8:	bx	lr
   281dc:	andeq	r7, r6, r0, lsr r5
   281e0:	andeq	r9, r4, r0, lsl #24
   281e4:	strdeq	sl, [r4], -r0
   281e8:	andeq	r9, r4, r8, lsr #30
   281ec:	muleq	r4, r4, sp
   281f0:	andeq	sl, r4, r0, lsr #5
   281f4:	andeq	sl, r4, r0, lsr #2
   281f8:	push	{r4, r5, r6, lr}
   281fc:	mov	r4, r0
   28200:	mvn	r0, #0
   28204:	mov	r5, r1
   28208:	bl	47334 <warn@@Base+0x5b64>
   2820c:	cmp	r0, r4
   28210:	bls	28220 <__assert_fail@plt+0x15e94>
   28214:	mul	r0, r4, r5
   28218:	pop	{r4, r5, r6, lr}
   2821c:	b	11f3c <xmalloc@plt>
   28220:	mov	r0, #0
   28224:	pop	{r4, r5, r6, pc}
   28228:	push	{r4, r5, r6, lr}
   2822c:	mov	r4, r0
   28230:	mvn	r0, #0
   28234:	mov	r5, r1
   28238:	bl	47334 <warn@@Base+0x5b64>
   2823c:	cmp	r0, r4
   28240:	bls	28250 <__assert_fail@plt+0x15ec4>
   28244:	mul	r0, r4, r5
   28248:	pop	{r4, r5, r6, lr}
   2824c:	b	11f3c <xmalloc@plt>
   28250:	ldr	r3, [pc, #40]	; 28280 <__assert_fail@plt+0x15ef4>
   28254:	mov	r2, #5
   28258:	ldr	r1, [pc, #36]	; 28284 <__assert_fail@plt+0x15ef8>
   2825c:	mov	r0, #0
   28260:	ldr	r5, [r3]
   28264:	bl	11ea0 <dcgettext@plt>
   28268:	mov	r2, r4
   2826c:	mov	r1, r0
   28270:	mov	r0, r5
   28274:	bl	120b0 <fprintf@plt>
   28278:	mov	r0, #1
   2827c:	bl	12218 <xexit@plt>
   28280:	andeq	r7, r6, r8, lsl #3
   28284:	andeq	lr, r4, r0, asr #9
   28288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2828c:	sub	sp, sp, #380	; 0x17c
   28290:	ldr	r2, [r0, #16]
   28294:	ldr	r3, [r0, #32]
   28298:	mov	r5, r0
   2829c:	str	r0, [sp, #144]	; 0x90
   282a0:	ldr	r1, [pc, #3464]	; 29030 <__assert_fail@plt+0x16ca4>
   282a4:	ldr	r0, [r0, #8]
   282a8:	add	fp, r2, r3
   282ac:	str	r2, [sp, #128]	; 0x80
   282b0:	str	r2, [sp, #344]	; 0x158
   282b4:	bl	11d98 <strcmp@plt>
   282b8:	mov	r4, #0
   282bc:	mov	r2, #5
   282c0:	ldr	r1, [pc, #3436]	; 29034 <__assert_fail@plt+0x16ca8>
   282c4:	str	r4, [sp, #352]	; 0x160
   282c8:	str	r4, [sp, #148]	; 0x94
   282cc:	str	r0, [sp, #140]	; 0x8c
   282d0:	mov	r0, r4
   282d4:	bl	11ea0 <dcgettext@plt>
   282d8:	ldr	r3, [pc, #3416]	; 29038 <__assert_fail@plt+0x16cac>
   282dc:	add	r1, r5, #12
   282e0:	str	r4, [sp, #332]	; 0x14c
   282e4:	ldr	r3, [r3]
   282e8:	str	r3, [sp, #136]	; 0x88
   282ec:	str	r0, [sp, #132]	; 0x84
   282f0:	add	r0, r5, #8
   282f4:	bl	1a7b4 <__assert_fail@plt+0x8428>
   282f8:	ldr	sl, [sp, #344]	; 0x158
   282fc:	str	r4, [sp, #328]	; 0x148
   28300:	mov	r9, sl
   28304:	mov	sl, fp
   28308:	cmp	sl, r9
   2830c:	bls	28430 <__assert_fail@plt+0x160a4>
   28310:	add	r2, r9, #4
   28314:	mov	r3, #0
   28318:	mov	r1, #1
   2831c:	cmp	r2, sl
   28320:	str	r1, [sp, #360]	; 0x168
   28324:	str	r3, [sp, #364]	; 0x16c
   28328:	str	r3, [sp, #368]	; 0x170
   2832c:	bcc	28394 <__assert_fail@plt+0x16008>
   28330:	sub	r1, sl, r9
   28334:	sub	r3, r1, #1
   28338:	cmp	r3, #7
   2833c:	bls	28398 <__assert_fail@plt+0x1600c>
   28340:	str	r2, [sp, #344]	; 0x158
   28344:	ldr	r3, [sp, #128]	; 0x80
   28348:	ldr	r0, [pc, #3308]	; 2903c <__assert_fail@plt+0x16cb0>
   2834c:	sub	r1, r9, r3
   28350:	bl	11dbc <printf@plt>
   28354:	ldr	r9, [sp, #344]	; 0x158
   28358:	cmp	sl, r9
   2835c:	bls	28308 <__assert_fail@plt+0x15f7c>
   28360:	ldrb	r3, [r9]
   28364:	cmp	r3, #0
   28368:	bne	28308 <__assert_fail@plt+0x15f7c>
   2836c:	add	r3, r9, #1
   28370:	cmp	sl, r3
   28374:	str	r3, [sp, #344]	; 0x158
   28378:	mov	r9, r3
   2837c:	beq	28308 <__assert_fail@plt+0x15f7c>
   28380:	ldrb	r2, [r3]
   28384:	add	r3, r3, #1
   28388:	cmp	r2, #0
   2838c:	beq	28370 <__assert_fail@plt+0x15fe4>
   28390:	b	28308 <__assert_fail@plt+0x15f7c>
   28394:	mov	r1, #4
   28398:	ldr	r3, [pc, #3232]	; 29040 <__assert_fail@plt+0x16cb4>
   2839c:	mov	r0, r9
   283a0:	ldr	r3, [r3]
   283a4:	blx	r3
   283a8:	mov	r2, r0
   283ac:	mov	r3, r1
   283b0:	ldr	r1, [sp, #344]	; 0x158
   283b4:	strd	r2, [sp, #24]
   283b8:	add	r0, r1, #4
   283bc:	orrs	r3, r2, r3
   283c0:	str	r0, [sp, #344]	; 0x158
   283c4:	beq	28344 <__assert_fail@plt+0x15fb8>
   283c8:	ldrd	r4, [sp, #24]
   283cc:	mov	r3, #0
   283d0:	mvn	r2, #0
   283d4:	cmp	r5, r3
   283d8:	cmpeq	r4, r2
   283dc:	beq	2afbc <__assert_fail@plt+0x18c30>
   283e0:	add	fp, r4, #4
   283e4:	add	fp, r9, fp
   283e8:	cmp	fp, r0
   283ec:	cmpcs	sl, fp
   283f0:	mov	r6, #4
   283f4:	bcc	2b00c <__assert_fail@plt+0x18c80>
   283f8:	add	r3, r0, r6
   283fc:	cmp	r3, sl
   28400:	bcc	28444 <__assert_fail@plt+0x160b8>
   28404:	cmp	sl, r0
   28408:	bls	2841c <__assert_fail@plt+0x16090>
   2840c:	sub	r1, sl, r0
   28410:	sub	r2, r1, #1
   28414:	cmp	r2, #7
   28418:	bls	28448 <__assert_fail@plt+0x160bc>
   2841c:	ldr	r2, [sp, #140]	; 0x8c
   28420:	str	r3, [sp, #344]	; 0x158
   28424:	cmp	r2, #0
   28428:	bne	2b304 <__assert_fail@plt+0x18f78>
   2842c:	str	sl, [sp, #344]	; 0x158
   28430:	mov	r0, #10
   28434:	bl	1211c <putchar@plt>
   28438:	mov	r0, #1
   2843c:	add	sp, sp, #380	; 0x17c
   28440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28444:	mov	r1, r6
   28448:	ldr	r3, [pc, #3056]	; 29040 <__assert_fail@plt+0x16cb4>
   2844c:	ldr	r3, [r3]
   28450:	blx	r3
   28454:	mov	r2, r0
   28458:	mov	r3, r1
   2845c:	ldr	r0, [sp, #344]	; 0x158
   28460:	ldr	r1, [sp, #140]	; 0x8c
   28464:	add	r0, r0, r6
   28468:	cmp	r1, #0
   2846c:	strd	r2, [sp, #120]	; 0x78
   28470:	str	r0, [sp, #344]	; 0x158
   28474:	beq	2abfc <__assert_fail@plt+0x18870>
   28478:	ldrd	r4, [sp, #120]	; 0x78
   2847c:	mov	r3, #0
   28480:	mvn	r2, #0
   28484:	cmp	r5, r3
   28488:	cmpeq	r4, r2
   2848c:	moveq	r1, #1
   28490:	movne	r1, #0
   28494:	cmp	r6, #4
   28498:	movne	r1, #0
   2849c:	andeq	r1, r1, #1
   284a0:	cmp	r1, #0
   284a4:	strdne	r2, [sp, #120]	; 0x78
   284a8:	beq	2b7a4 <__assert_fail@plt+0x19418>
   284ac:	mov	r3, #0
   284b0:	cmp	r0, sl
   284b4:	str	r3, [sp, #356]	; 0x164
   284b8:	bcs	2842c <__assert_fail@plt+0x160a0>
   284bc:	add	r2, sp, #364	; 0x16c
   284c0:	add	r3, sp, #368	; 0x170
   284c4:	str	r2, [sp, #4]
   284c8:	str	r3, [sp]
   284cc:	add	r2, sp, #356	; 0x164
   284d0:	add	r3, sp, #372	; 0x174
   284d4:	mov	r1, sl
   284d8:	bl	1e584 <__assert_fail@plt+0xc1f8>
   284dc:	ldr	r5, [sp, #356]	; 0x164
   284e0:	cmp	r5, #0
   284e4:	str	r0, [sp, #344]	; 0x158
   284e8:	beq	28430 <__assert_fail@plt+0x160a4>
   284ec:	ldr	r3, [sp, #352]	; 0x160
   284f0:	ldr	r1, [r5, #64]	; 0x40
   284f4:	cmp	r3, #0
   284f8:	subne	r3, r3, #1
   284fc:	ldr	r2, [sp, #328]	; 0x148
   28500:	cmp	r3, r1
   28504:	movcs	r1, r3
   28508:	str	r2, [r5]
   2850c:	str	r9, [r5, #4]
   28510:	mov	r0, r5
   28514:	bl	1a56c <__assert_fail@plt+0x81e0>
   28518:	cmp	r0, #0
   2851c:	blt	28430 <__assert_fail@plt+0x160a4>
   28520:	ldrb	r3, [r5, #68]	; 0x44
   28524:	cmp	r3, #0
   28528:	beq	2b684 <__assert_fail@plt+0x192f8>
   2852c:	and	r3, r3, #7
   28530:	sub	r3, r3, #2
   28534:	cmp	r3, #2
   28538:	ldrls	r2, [pc, #2820]	; 29044 <__assert_fail@plt+0x16cb8>
   2853c:	ldrhi	r3, [pc, #2804]	; 29038 <__assert_fail@plt+0x16cac>
   28540:	addls	r3, r2, r3, lsl #2
   28544:	ldrhi	r3, [r3]
   28548:	ldrls	r3, [r3, #1024]	; 0x400
   2854c:	str	r3, [sp, #116]	; 0x74
   28550:	ldr	r3, [sp, #128]	; 0x80
   28554:	ldr	r0, [pc, #2796]	; 29048 <__assert_fail@plt+0x16cbc>
   28558:	sub	r1, r9, r3
   2855c:	ldr	r3, [pc, #2792]	; 2904c <__assert_fail@plt+0x16cc0>
   28560:	mov	r4, r3
   28564:	str	r3, [sp, #112]	; 0x70
   28568:	bl	11dbc <printf@plt>
   2856c:	ldrd	r0, [sp, #24]
   28570:	ldrb	r2, [r5, #70]	; 0x46
   28574:	bl	18e4c <__assert_fail@plt+0x6ac0>
   28578:	mov	r2, r6
   2857c:	ldrd	r0, [sp, #120]	; 0x78
   28580:	bl	18e4c <__assert_fail@plt+0x6ac0>
   28584:	ldr	r3, [r4]
   28588:	cmp	r3, #0
   2858c:	beq	2b614 <__assert_fail@plt+0x19288>
   28590:	ldr	r0, [r5, #64]	; 0x40
   28594:	ldrd	r2, [r5, #24]
   28598:	ldr	r1, [r5, #20]
   2859c:	str	r0, [sp]
   285a0:	ldr	r0, [pc, #2728]	; 29050 <__assert_fail@plt+0x16cc4>
   285a4:	bl	11dbc <printf@plt>
   285a8:	str	r5, [sp, #328]	; 0x148
   285ac:	ldr	r4, [sp, #344]	; 0x158
   285b0:	mov	r2, r4
   285b4:	cmp	fp, r2
   285b8:	bls	28908 <__assert_fail@plt+0x1657c>
   285bc:	add	r0, r2, #1
   285c0:	str	r0, [sp, #344]	; 0x158
   285c4:	ldrb	r3, [r0, #-1]
   285c8:	ands	r1, r3, #192	; 0xc0
   285cc:	and	r6, r3, #63	; 0x3f
   285d0:	movne	r3, r1
   285d4:	sub	r3, r3, #1
   285d8:	cmp	r3, #191	; 0xbf
   285dc:	ldrls	pc, [pc, r3, lsl #2]
   285e0:	b	29028 <__assert_fail@plt+0x16c9c>
   285e4:	andeq	r8, r2, r8, lsl #31
   285e8:	andeq	r8, r2, r0, lsl #31
   285ec:	andeq	r8, r2, r8, ror pc
   285f0:	andeq	r8, r2, r0, ror pc
   285f4:	strdeq	r8, [r2], -r4
   285f8:	andeq	r8, r2, r0, lsl #29
   285fc:	andeq	r8, r2, ip, lsl #28
   28600:	muleq	r2, r8, sp
   28604:	andeq	r8, r2, r0, lsl #26
   28608:	andeq	r9, r2, r8, lsr #32
   2860c:	andeq	r9, r2, r8, lsr #32
   28610:	ldrdeq	r8, [r2], -r0
   28614:	andeq	r8, r2, r4, ror #17
   28618:	andeq	r8, r2, r4, ror #17
   2861c:	andeq	r8, r2, r8, lsl ip
   28620:	ldrdeq	r8, [r2], -r4
   28624:	strdeq	r8, [r2], -ip
   28628:			; <UNDEFINED> instruction: 0x000289b8
   2862c:	andeq	r8, r2, ip, lsr #19
   28630:	strdeq	r8, [r2], -r4
   28634:	strdeq	r8, [r2], -ip
   28638:	ldrdeq	r8, [r2], -r4
   2863c:	andeq	r9, r2, r8, lsr #32
   28640:	andeq	r9, r2, r8, lsr #32
   28644:	andeq	r9, r2, r8, lsr #32
   28648:	andeq	r9, r2, r8, lsr #32
   2864c:	andeq	r9, r2, r8, lsr #32
   28650:	andeq	r9, r2, r8, lsr #32
   28654:	andeq	r8, r2, r4, lsr #19
   28658:	andeq	r9, r2, r8, lsr #32
   2865c:	andeq	r9, r2, r8, lsr #32
   28660:	andeq	r9, r2, r8, lsr #32
   28664:	andeq	r9, r2, r8, lsr #32
   28668:	andeq	r9, r2, r8, lsr #32
   2866c:	andeq	r9, r2, r8, lsr #32
   28670:	andeq	r9, r2, r8, lsr #32
   28674:	andeq	r9, r2, r8, lsr #32
   28678:	andeq	r9, r2, r8, lsr #32
   2867c:	andeq	r9, r2, r8, lsr #32
   28680:	andeq	r9, r2, r8, lsr #32
   28684:	andeq	r9, r2, r8, lsr #32
   28688:	andeq	r9, r2, r8, lsr #32
   2868c:	andeq	r9, r2, r8, lsr #32
   28690:	andeq	r9, r2, r8, lsr #32
   28694:	andeq	r9, r2, r8, lsr #32
   28698:	andeq	r8, r2, r4, ror #17
   2869c:	andeq	r8, r2, ip, lsr #31
   286a0:	andeq	r9, r2, r8, lsr #32
   286a4:	andeq	r9, r2, r8, lsr #32
   286a8:	andeq	r9, r2, r8, lsr #32
   286ac:	andeq	r9, r2, r8, lsr #32
   286b0:	andeq	r9, r2, r8, lsr #32
   286b4:	andeq	r9, r2, r8, lsr #32
   286b8:	andeq	r9, r2, r8, lsr #32
   286bc:	andeq	r9, r2, r8, lsr #32
   286c0:	andeq	r9, r2, r8, lsr #32
   286c4:	andeq	r9, r2, r8, lsr #32
   286c8:	andeq	r9, r2, r8, lsr #32
   286cc:	andeq	r9, r2, r8, lsr #32
   286d0:	andeq	r9, r2, r8, lsr #32
   286d4:	andeq	r9, r2, r8, lsr #32
   286d8:	andeq	r9, r2, r8, lsr #32
   286dc:	andeq	r9, r2, r8, lsr #32
   286e0:	andeq	r9, r2, r8, lsr #32
   286e4:	andeq	r9, r2, r8, lsr #32
   286e8:	andeq	r9, r2, r8, lsr #32
   286ec:	andeq	r9, r2, r8, lsr #32
   286f0:	andeq	r9, r2, r8, lsr #32
   286f4:	andeq	r9, r2, r8, lsr #32
   286f8:	andeq	r9, r2, r8, lsr #32
   286fc:	andeq	r9, r2, r8, lsr #32
   28700:	andeq	r9, r2, r8, lsr #32
   28704:	andeq	r9, r2, r8, lsr #32
   28708:	andeq	r9, r2, r8, lsr #32
   2870c:	andeq	r9, r2, r8, lsr #32
   28710:	andeq	r9, r2, r8, lsr #32
   28714:	andeq	r9, r2, r8, lsr #32
   28718:	andeq	r9, r2, r8, lsr #32
   2871c:	andeq	r9, r2, r8, lsr #32
   28720:	andeq	r9, r2, r8, lsr #32
   28724:	andeq	r9, r2, r8, lsr #32
   28728:	andeq	r9, r2, r8, lsr #32
   2872c:	andeq	r9, r2, r8, lsr #32
   28730:	andeq	r9, r2, r8, lsr #32
   28734:	andeq	r9, r2, r8, lsr #32
   28738:	andeq	r9, r2, r8, lsr #32
   2873c:	andeq	r9, r2, r8, lsr #32
   28740:	andeq	r9, r2, r8, lsr #32
   28744:	andeq	r9, r2, r8, lsr #32
   28748:	andeq	r9, r2, r8, lsr #32
   2874c:	andeq	r9, r2, r8, lsr #32
   28750:	andeq	r9, r2, r8, lsr #32
   28754:	andeq	r9, r2, r8, lsr #32
   28758:	andeq	r9, r2, r8, lsr #32
   2875c:	andeq	r9, r2, r8, lsr #32
   28760:	andeq	r9, r2, r8, lsr #32
   28764:	andeq	r9, r2, r8, lsr #32
   28768:	andeq	r9, r2, r8, lsr #32
   2876c:	andeq	r9, r2, r8, lsr #32
   28770:	andeq	r9, r2, r8, lsr #32
   28774:	andeq	r9, r2, r8, lsr #32
   28778:	andeq	r9, r2, r8, lsr #32
   2877c:	andeq	r9, r2, r8, lsr #32
   28780:	andeq	r9, r2, r8, lsr #32
   28784:	andeq	r9, r2, r8, lsr #32
   28788:	andeq	r9, r2, r8, lsr #32
   2878c:	andeq	r9, r2, r8, lsr #32
   28790:	andeq	r9, r2, r8, lsr #32
   28794:	andeq	r9, r2, r8, lsr #32
   28798:	andeq	r9, r2, r8, lsr #32
   2879c:	andeq	r9, r2, r8, lsr #32
   287a0:	andeq	r9, r2, r8, lsr #32
   287a4:	andeq	r9, r2, r8, lsr #32
   287a8:	andeq	r9, r2, r8, lsr #32
   287ac:	andeq	r9, r2, r8, lsr #32
   287b0:	andeq	r9, r2, r8, lsr #32
   287b4:	andeq	r9, r2, r8, lsr #32
   287b8:	andeq	r9, r2, r8, lsr #32
   287bc:	andeq	r9, r2, r8, lsr #32
   287c0:	andeq	r9, r2, r8, lsr #32
   287c4:	andeq	r9, r2, r8, lsr #32
   287c8:	andeq	r9, r2, r8, lsr #32
   287cc:	andeq	r9, r2, r8, lsr #32
   287d0:	andeq	r9, r2, r8, lsr #32
   287d4:	andeq	r9, r2, r8, lsr #32
   287d8:	andeq	r9, r2, r8, lsr #32
   287dc:	andeq	r9, r2, r8, lsr #32
   287e0:	andeq	r8, r2, r0, asr #25
   287e4:	andeq	r9, r2, r8, lsr #32
   287e8:	andeq	r9, r2, r8, lsr #32
   287ec:	andeq	r9, r2, r8, lsr #32
   287f0:	andeq	r9, r2, r8, lsr #32
   287f4:	andeq	r9, r2, r8, lsr #32
   287f8:	andeq	r9, r2, r8, lsr #32
   287fc:	andeq	r9, r2, r8, lsr #32
   28800:	andeq	r9, r2, r8, lsr #32
   28804:	andeq	r9, r2, r8, lsr #32
   28808:	andeq	r9, r2, r8, lsr #32
   2880c:	andeq	r9, r2, r8, lsr #32
   28810:	andeq	r9, r2, r8, lsr #32
   28814:	andeq	r9, r2, r8, lsr #32
   28818:	andeq	r9, r2, r8, lsr #32
   2881c:	andeq	r9, r2, r8, lsr #32
   28820:	andeq	r9, r2, r8, lsr #32
   28824:	andeq	r9, r2, r8, lsr #32
   28828:	andeq	r9, r2, r8, lsr #32
   2882c:	andeq	r9, r2, r8, lsr #32
   28830:	andeq	r9, r2, r8, lsr #32
   28834:	andeq	r9, r2, r8, lsr #32
   28838:	andeq	r9, r2, r8, lsr #32
   2883c:	andeq	r9, r2, r8, lsr #32
   28840:	andeq	r9, r2, r8, lsr #32
   28844:	andeq	r9, r2, r8, lsr #32
   28848:	andeq	r9, r2, r8, lsr #32
   2884c:	andeq	r9, r2, r8, lsr #32
   28850:	andeq	r9, r2, r8, lsr #32
   28854:	andeq	r9, r2, r8, lsr #32
   28858:	andeq	r9, r2, r8, lsr #32
   2885c:	andeq	r9, r2, r8, lsr #32
   28860:	andeq	r9, r2, r8, lsr #32
   28864:	andeq	r9, r2, r8, lsr #32
   28868:	andeq	r9, r2, r8, lsr #32
   2886c:	andeq	r9, r2, r8, lsr #32
   28870:	andeq	r9, r2, r8, lsr #32
   28874:	andeq	r9, r2, r8, lsr #32
   28878:	andeq	r9, r2, r8, lsr #32
   2887c:	andeq	r9, r2, r8, lsr #32
   28880:	andeq	r9, r2, r8, lsr #32
   28884:	andeq	r9, r2, r8, lsr #32
   28888:	andeq	r9, r2, r8, lsr #32
   2888c:	andeq	r9, r2, r8, lsr #32
   28890:	andeq	r9, r2, r8, lsr #32
   28894:	andeq	r9, r2, r8, lsr #32
   28898:	andeq	r9, r2, r8, lsr #32
   2889c:	andeq	r9, r2, r8, lsr #32
   288a0:	andeq	r9, r2, r8, lsr #32
   288a4:	andeq	r9, r2, r8, lsr #32
   288a8:	andeq	r9, r2, r8, lsr #32
   288ac:	andeq	r9, r2, r8, lsr #32
   288b0:	andeq	r9, r2, r8, lsr #32
   288b4:	andeq	r9, r2, r8, lsr #32
   288b8:	andeq	r9, r2, r8, lsr #32
   288bc:	andeq	r9, r2, r8, lsr #32
   288c0:	andeq	r9, r2, r8, lsr #32
   288c4:	andeq	r9, r2, r8, lsr #32
   288c8:	andeq	r9, r2, r8, lsr #32
   288cc:	andeq	r9, r2, r8, lsr #32
   288d0:	andeq	r9, r2, r8, lsr #32
   288d4:	andeq	r9, r2, r8, lsr #32
   288d8:	andeq	r9, r2, r8, lsr #32
   288dc:	andeq	r9, r2, r8, lsr #32
   288e0:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   288e4:	mov	r3, sl
   288e8:	mov	r2, #0
   288ec:	add	r1, sp, #348	; 0x15c
   288f0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   288f4:	ldr	r2, [sp, #344]	; 0x158
   288f8:	ldr	r3, [sp, #348]	; 0x15c
   288fc:	add	r2, r2, r3
   28900:	cmp	fp, r2
   28904:	bhi	285bc <__assert_fail@plt+0x16230>
   28908:	mov	r9, #1
   2890c:	str	r4, [sp, #344]	; 0x158
   28910:	str	r9, [sp, #24]
   28914:	cmp	fp, r4
   28918:	bls	28968 <__assert_fail@plt+0x165dc>
   2891c:	add	r0, r4, #1
   28920:	str	r0, [sp, #344]	; 0x158
   28924:	ldrb	r3, [r4]
   28928:	ands	r2, r3, #192	; 0xc0
   2892c:	and	r8, r3, #63	; 0x3f
   28930:	movne	r3, r2
   28934:	bne	290e8 <__assert_fail@plt+0x16d5c>
   28938:	cmp	r3, #0
   2893c:	bne	290e8 <__assert_fail@plt+0x16d5c>
   28940:	ldr	r3, [sp, #112]	; 0x70
   28944:	ldr	r3, [r3]
   28948:	cmp	r3, #0
   2894c:	movne	r4, r0
   28950:	bne	28914 <__assert_fail@plt+0x16588>
   28954:	ldr	r0, [pc, #1784]	; 29054 <__assert_fail@plt+0x16cc8>
   28958:	bl	11fe4 <puts@plt>
   2895c:	ldr	r4, [sp, #344]	; 0x158
   28960:	cmp	fp, r4
   28964:	bhi	2891c <__assert_fail@plt+0x16590>
   28968:	ldr	r3, [sp, #112]	; 0x70
   2896c:	ldr	r9, [sp, #24]
   28970:	ldr	r3, [r3]
   28974:	eor	r9, r9, #1
   28978:	cmp	r3, #0
   2897c:	andne	r9, r9, #1
   28980:	moveq	r9, #0
   28984:	cmp	r9, #0
   28988:	bne	2b37c <__assert_fail@plt+0x18ff0>
   2898c:	ldr	r3, [pc, #1700]	; 29038 <__assert_fail@plt+0x16cac>
   28990:	ldr	r2, [sp, #136]	; 0x88
   28994:	mov	r9, fp
   28998:	str	fp, [sp, #344]	; 0x158
   2899c:	str	r2, [r3]
   289a0:	b	28308 <__assert_fail@plt+0x15f7c>
   289a4:	add	r2, r2, #9
   289a8:	b	285b4 <__assert_fail@plt+0x16228>
   289ac:	mov	r3, sl
   289b0:	mov	r2, #1
   289b4:	b	288ec <__assert_fail@plt+0x16560>
   289b8:	mov	r3, sl
   289bc:	mov	r2, #0
   289c0:	add	r1, sp, #348	; 0x15c
   289c4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   289c8:	ldr	r3, [sp, #348]	; 0x15c
   289cc:	ldr	ip, [sp, #344]	; 0x158
   289d0:	add	r1, sp, #348	; 0x15c
   289d4:	add	ip, ip, r3
   289d8:	mov	r0, ip
   289dc:	mov	r3, sl
   289e0:	mov	r2, #1
   289e4:	str	ip, [sp, #344]	; 0x158
   289e8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   289ec:	ldr	r2, [sp, #344]	; 0x158
   289f0:	ldr	r3, [sp, #348]	; 0x15c
   289f4:	add	r2, r2, r3
   289f8:	b	285b4 <__assert_fail@plt+0x16228>
   289fc:	add	r8, sp, #348	; 0x15c
   28a00:	mov	r3, sl
   28a04:	mov	r2, #0
   28a08:	mov	r1, r8
   28a0c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   28a10:	mov	r9, #0
   28a14:	str	r9, [sp, #100]	; 0x64
   28a18:	str	r0, [sp, #96]	; 0x60
   28a1c:	ldrd	r2, [sp, #96]	; 0x60
   28a20:	mov	r6, r0
   28a24:	mov	r7, r1
   28a28:	cmp	r3, r1
   28a2c:	cmpeq	r2, r0
   28a30:	beq	28a74 <__assert_fail@plt+0x166e8>
   28a34:	ldr	r1, [pc, #1688]	; 290d4 <__assert_fail@plt+0x16d48>
   28a38:	mov	r2, #5
   28a3c:	mov	r0, r9
   28a40:	bl	11ea0 <dcgettext@plt>
   28a44:	mov	r2, r6
   28a48:	mov	r3, r7
   28a4c:	str	r9, [sp]
   28a50:	str	r0, [sp, #24]
   28a54:	ldr	r0, [pc, #1660]	; 290d8 <__assert_fail@plt+0x16d4c>
   28a58:	bl	18b24 <__assert_fail@plt+0x6798>
   28a5c:	ldr	r1, [sp, #24]
   28a60:	ldr	r2, [pc, #1520]	; 29058 <__assert_fail@plt+0x16ccc>
   28a64:	mov	r3, r0
   28a68:	mov	r0, r1
   28a6c:	ldr	r1, [pc, #1644]	; 290e0 <__assert_fail@plt+0x16d54>
   28a70:	bl	412ac <error@@Base>
   28a74:	ldr	r3, [sp, #348]	; 0x15c
   28a78:	ldr	ip, [sp, #344]	; 0x158
   28a7c:	mov	r1, r8
   28a80:	add	ip, ip, r3
   28a84:	mov	r0, ip
   28a88:	mov	r3, sl
   28a8c:	mov	r2, #1
   28a90:	str	ip, [sp, #344]	; 0x158
   28a94:	bl	1b3b0 <__assert_fail@plt+0x9024>
   28a98:	ldr	r3, [sp, #344]	; 0x158
   28a9c:	ldr	r2, [sp, #348]	; 0x15c
   28aa0:	mov	r1, r6
   28aa4:	add	r3, r3, r2
   28aa8:	mov	r0, r5
   28aac:	str	r3, [sp, #344]	; 0x158
   28ab0:	bl	1a56c <__assert_fail@plt+0x81e0>
   28ab4:	cmp	r0, #0
   28ab8:	blt	28acc <__assert_fail@plt+0x16740>
   28abc:	ldr	r3, [r5, #12]
   28ac0:	lsl	r6, r6, #1
   28ac4:	mov	r2, #7
   28ac8:	strh	r2, [r3, r6]
   28acc:	ldr	r2, [sp, #344]	; 0x158
   28ad0:	b	285b4 <__assert_fail@plt+0x16228>
   28ad4:	add	r8, sp, #348	; 0x15c
   28ad8:	mov	r3, sl
   28adc:	mov	r2, #0
   28ae0:	mov	r1, r8
   28ae4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   28ae8:	mov	r6, #0
   28aec:	str	r6, [sp, #84]	; 0x54
   28af0:	str	r0, [sp, #80]	; 0x50
   28af4:	mov	r2, r0
   28af8:	mov	r3, r1
   28afc:	ldrd	r0, [sp, #80]	; 0x50
   28b00:	strd	r2, [sp, #24]
   28b04:	cmp	r1, r3
   28b08:	cmpeq	r0, r2
   28b0c:	beq	28b48 <__assert_fail@plt+0x167bc>
   28b10:	ldr	r1, [pc, #1468]	; 290d4 <__assert_fail@plt+0x16d48>
   28b14:	mov	r2, #5
   28b18:	mov	r0, r6
   28b1c:	bl	11ea0 <dcgettext@plt>
   28b20:	ldrd	r2, [sp, #24]
   28b24:	str	r6, [sp]
   28b28:	mov	r7, r0
   28b2c:	ldr	r0, [pc, #1444]	; 290d8 <__assert_fail@plt+0x16d4c>
   28b30:	bl	18b24 <__assert_fail@plt+0x6798>
   28b34:	ldr	r2, [pc, #1312]	; 2905c <__assert_fail@plt+0x16cd0>
   28b38:	ldr	r1, [pc, #1440]	; 290e0 <__assert_fail@plt+0x16d54>
   28b3c:	mov	r3, r0
   28b40:	mov	r0, r7
   28b44:	bl	412ac <error@@Base>
   28b48:	ldr	ip, [sp, #344]	; 0x158
   28b4c:	ldr	r3, [sp, #348]	; 0x15c
   28b50:	mov	r1, r8
   28b54:	add	ip, ip, r3
   28b58:	mov	r2, #0
   28b5c:	mov	r3, sl
   28b60:	mov	r0, ip
   28b64:	str	ip, [sp, #344]	; 0x158
   28b68:	bl	1b3b0 <__assert_fail@plt+0x9024>
   28b6c:	mov	r8, #0
   28b70:	str	r8, [sp, #92]	; 0x5c
   28b74:	str	r0, [sp, #88]	; 0x58
   28b78:	ldrd	r2, [sp, #88]	; 0x58
   28b7c:	mov	r6, r0
   28b80:	mov	r7, r1
   28b84:	cmp	r3, r1
   28b88:	cmpeq	r2, r0
   28b8c:	beq	28bcc <__assert_fail@plt+0x16840>
   28b90:	ldr	r1, [pc, #1340]	; 290d4 <__assert_fail@plt+0x16d48>
   28b94:	mov	r2, #5
   28b98:	mov	r0, r8
   28b9c:	bl	11ea0 <dcgettext@plt>
   28ba0:	mov	r2, r6
   28ba4:	mov	r3, r7
   28ba8:	str	r8, [sp]
   28bac:	mov	r9, r0
   28bb0:	ldr	r0, [pc, #1312]	; 290d8 <__assert_fail@plt+0x16d4c>
   28bb4:	bl	18b24 <__assert_fail@plt+0x6798>
   28bb8:	ldr	r2, [pc, #1184]	; 29060 <__assert_fail@plt+0x16cd4>
   28bbc:	ldr	r1, [pc, #1308]	; 290e0 <__assert_fail@plt+0x16d54>
   28bc0:	mov	r3, r0
   28bc4:	mov	r0, r9
   28bc8:	bl	412ac <error@@Base>
   28bcc:	ldr	r3, [sp, #344]	; 0x158
   28bd0:	ldr	r2, [sp, #348]	; 0x15c
   28bd4:	add	r3, r3, r2
   28bd8:	adds	r2, r3, r6
   28bdc:	str	r3, [sp, #344]	; 0x158
   28be0:	strcc	r2, [sp, #344]	; 0x158
   28be4:	bcs	2abc8 <__assert_fail@plt+0x1883c>
   28be8:	ldr	r1, [sp, #24]
   28bec:	mov	r0, r5
   28bf0:	bl	1a56c <__assert_fail@plt+0x81e0>
   28bf4:	cmp	r0, #0
   28bf8:	blt	28acc <__assert_fail@plt+0x16740>
   28bfc:	ldr	r3, [sp, #24]
   28c00:	ldr	r2, [r5, #12]
   28c04:	mov	r1, #7
   28c08:	lsl	r3, r3, #1
   28c0c:	strh	r1, [r2, r3]
   28c10:	ldr	r2, [sp, #344]	; 0x158
   28c14:	b	285b4 <__assert_fail@plt+0x16228>
   28c18:	mov	r3, sl
   28c1c:	mov	r2, #0
   28c20:	add	r1, sp, #348	; 0x15c
   28c24:	bl	1b3b0 <__assert_fail@plt+0x9024>
   28c28:	mov	r8, #0
   28c2c:	str	r8, [sp, #76]	; 0x4c
   28c30:	str	r0, [sp, #72]	; 0x48
   28c34:	ldrd	r2, [sp, #72]	; 0x48
   28c38:	mov	r6, r0
   28c3c:	mov	r7, r1
   28c40:	cmp	r1, r3
   28c44:	cmpeq	r0, r2
   28c48:	beq	28c88 <__assert_fail@plt+0x168fc>
   28c4c:	ldr	r1, [pc, #1152]	; 290d4 <__assert_fail@plt+0x16d48>
   28c50:	mov	r2, #5
   28c54:	mov	r0, r8
   28c58:	bl	11ea0 <dcgettext@plt>
   28c5c:	mov	r2, r6
   28c60:	mov	r3, r7
   28c64:	str	r8, [sp]
   28c68:	mov	r9, r0
   28c6c:	ldr	r0, [pc, #1124]	; 290d8 <__assert_fail@plt+0x16d4c>
   28c70:	bl	18b24 <__assert_fail@plt+0x6798>
   28c74:	ldr	r2, [pc, #1000]	; 29064 <__assert_fail@plt+0x16cd8>
   28c78:	ldr	r1, [pc, #1120]	; 290e0 <__assert_fail@plt+0x16d54>
   28c7c:	mov	r3, r0
   28c80:	mov	r0, r9
   28c84:	bl	412ac <error@@Base>
   28c88:	ldr	r3, [sp, #344]	; 0x158
   28c8c:	ldr	r2, [sp, #348]	; 0x15c
   28c90:	add	r3, r3, r2
   28c94:	adds	r2, r3, r6
   28c98:	str	r3, [sp, #344]	; 0x158
   28c9c:	bcc	285b4 <__assert_fail@plt+0x16228>
   28ca0:	mov	r2, #5
   28ca4:	ldr	r1, [pc, #956]	; 29068 <__assert_fail@plt+0x16cdc>
   28ca8:	mov	r0, #0
   28cac:	bl	11ea0 <dcgettext@plt>
   28cb0:	mov	r1, r6
   28cb4:	bl	417d0 <warn@@Base>
   28cb8:	mov	r2, fp
   28cbc:	b	285b4 <__assert_fail@plt+0x16228>
   28cc0:	mov	r3, sl
   28cc4:	mov	r2, #0
   28cc8:	add	r1, sp, #348	; 0x15c
   28ccc:	b	28a94 <__assert_fail@plt+0x16708>
   28cd0:	mov	r3, sl
   28cd4:	mov	r2, #0
   28cd8:	add	r1, sp, #348	; 0x15c
   28cdc:	bl	1b3b0 <__assert_fail@plt+0x9024>
   28ce0:	ldr	r3, [sp, #348]	; 0x15c
   28ce4:	ldr	ip, [sp, #344]	; 0x158
   28ce8:	add	r1, sp, #348	; 0x15c
   28cec:	add	ip, ip, r3
   28cf0:	mov	r0, ip
   28cf4:	mov	r3, sl
   28cf8:	mov	r2, #0
   28cfc:	b	289e4 <__assert_fail@plt+0x16658>
   28d00:	add	r8, sp, #348	; 0x15c
   28d04:	mov	r3, sl
   28d08:	mov	r2, #0
   28d0c:	mov	r1, r8
   28d10:	bl	1b3b0 <__assert_fail@plt+0x9024>
   28d14:	mov	r9, #0
   28d18:	str	r9, [sp, #68]	; 0x44
   28d1c:	str	r0, [sp, #64]	; 0x40
   28d20:	ldrd	r2, [sp, #64]	; 0x40
   28d24:	mov	r6, r0
   28d28:	mov	r7, r1
   28d2c:	cmp	r1, r3
   28d30:	cmpeq	r0, r2
   28d34:	beq	28d78 <__assert_fail@plt+0x169ec>
   28d38:	ldr	r1, [pc, #916]	; 290d4 <__assert_fail@plt+0x16d48>
   28d3c:	mov	r2, #5
   28d40:	mov	r0, r9
   28d44:	bl	11ea0 <dcgettext@plt>
   28d48:	mov	r2, r6
   28d4c:	mov	r3, r7
   28d50:	str	r9, [sp]
   28d54:	str	r0, [sp, #24]
   28d58:	ldr	r0, [pc, #888]	; 290d8 <__assert_fail@plt+0x16d4c>
   28d5c:	bl	18b24 <__assert_fail@plt+0x6798>
   28d60:	ldr	r1, [sp, #24]
   28d64:	ldr	r2, [pc, #768]	; 2906c <__assert_fail@plt+0x16ce0>
   28d68:	mov	r3, r0
   28d6c:	mov	r0, r1
   28d70:	ldr	r1, [pc, #872]	; 290e0 <__assert_fail@plt+0x16d54>
   28d74:	bl	412ac <error@@Base>
   28d78:	ldr	r3, [sp, #348]	; 0x15c
   28d7c:	ldr	ip, [sp, #344]	; 0x158
   28d80:	mov	r1, r8
   28d84:	add	ip, ip, r3
   28d88:	mov	r0, ip
   28d8c:	mov	r3, sl
   28d90:	mov	r2, #0
   28d94:	b	28a90 <__assert_fail@plt+0x16704>
   28d98:	mov	r3, sl
   28d9c:	mov	r2, #0
   28da0:	add	r1, sp, #348	; 0x15c
   28da4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   28da8:	mov	r8, #0
   28dac:	str	r8, [sp, #60]	; 0x3c
   28db0:	str	r0, [sp, #56]	; 0x38
   28db4:	ldrd	r2, [sp, #56]	; 0x38
   28db8:	mov	r6, r0
   28dbc:	mov	r7, r1
   28dc0:	cmp	r1, r3
   28dc4:	cmpeq	r0, r2
   28dc8:	beq	28a98 <__assert_fail@plt+0x1670c>
   28dcc:	ldr	r1, [pc, #768]	; 290d4 <__assert_fail@plt+0x16d48>
   28dd0:	mov	r2, #5
   28dd4:	mov	r0, r8
   28dd8:	bl	11ea0 <dcgettext@plt>
   28ddc:	mov	r2, r6
   28de0:	mov	r3, r7
   28de4:	str	r8, [sp]
   28de8:	mov	r9, r0
   28dec:	ldr	r0, [pc, #740]	; 290d8 <__assert_fail@plt+0x16d4c>
   28df0:	bl	18b24 <__assert_fail@plt+0x6798>
   28df4:	ldr	r2, [pc, #628]	; 29070 <__assert_fail@plt+0x16ce4>
   28df8:	ldr	r1, [pc, #736]	; 290e0 <__assert_fail@plt+0x16d54>
   28dfc:	mov	r3, r0
   28e00:	mov	r0, r9
   28e04:	bl	412ac <error@@Base>
   28e08:	b	28a98 <__assert_fail@plt+0x1670c>
   28e0c:	mov	r3, sl
   28e10:	mov	r2, #0
   28e14:	add	r1, sp, #348	; 0x15c
   28e18:	bl	1b3b0 <__assert_fail@plt+0x9024>
   28e1c:	mov	r8, #0
   28e20:	str	r8, [sp, #52]	; 0x34
   28e24:	str	r0, [sp, #48]	; 0x30
   28e28:	ldrd	r2, [sp, #48]	; 0x30
   28e2c:	mov	r6, r0
   28e30:	mov	r7, r1
   28e34:	cmp	r3, r1
   28e38:	cmpeq	r2, r0
   28e3c:	beq	28a98 <__assert_fail@plt+0x1670c>
   28e40:	ldr	r1, [pc, #652]	; 290d4 <__assert_fail@plt+0x16d48>
   28e44:	mov	r2, #5
   28e48:	mov	r0, r8
   28e4c:	bl	11ea0 <dcgettext@plt>
   28e50:	mov	r2, r6
   28e54:	mov	r3, r7
   28e58:	str	r8, [sp]
   28e5c:	mov	r9, r0
   28e60:	ldr	r0, [pc, #624]	; 290d8 <__assert_fail@plt+0x16d4c>
   28e64:	bl	18b24 <__assert_fail@plt+0x6798>
   28e68:	ldr	r2, [pc, #516]	; 29074 <__assert_fail@plt+0x16ce8>
   28e6c:	ldr	r1, [pc, #620]	; 290e0 <__assert_fail@plt+0x16d54>
   28e70:	mov	r3, r0
   28e74:	mov	r0, r9
   28e78:	bl	412ac <error@@Base>
   28e7c:	b	28a98 <__assert_fail@plt+0x1670c>
   28e80:	mov	r3, sl
   28e84:	mov	r2, #0
   28e88:	add	r1, sp, #348	; 0x15c
   28e8c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   28e90:	mov	r8, #0
   28e94:	str	r8, [sp, #44]	; 0x2c
   28e98:	str	r0, [sp, #40]	; 0x28
   28e9c:	ldrd	r2, [sp, #40]	; 0x28
   28ea0:	mov	r6, r0
   28ea4:	mov	r7, r1
   28ea8:	cmp	r3, r1
   28eac:	cmpeq	r2, r0
   28eb0:	beq	28a98 <__assert_fail@plt+0x1670c>
   28eb4:	ldr	r1, [pc, #536]	; 290d4 <__assert_fail@plt+0x16d48>
   28eb8:	mov	r2, #5
   28ebc:	mov	r0, r8
   28ec0:	bl	11ea0 <dcgettext@plt>
   28ec4:	mov	r2, r6
   28ec8:	mov	r3, r7
   28ecc:	str	r8, [sp]
   28ed0:	mov	r9, r0
   28ed4:	ldr	r0, [pc, #508]	; 290d8 <__assert_fail@plt+0x16d4c>
   28ed8:	bl	18b24 <__assert_fail@plt+0x6798>
   28edc:	ldr	r2, [pc, #404]	; 29078 <__assert_fail@plt+0x16cec>
   28ee0:	ldr	r1, [pc, #504]	; 290e0 <__assert_fail@plt+0x16d54>
   28ee4:	mov	r3, r0
   28ee8:	mov	r0, r9
   28eec:	bl	412ac <error@@Base>
   28ef0:	b	28a98 <__assert_fail@plt+0x1670c>
   28ef4:	add	r8, sp, #348	; 0x15c
   28ef8:	mov	r3, sl
   28efc:	mov	r2, #0
   28f00:	mov	r1, r8
   28f04:	bl	1b3b0 <__assert_fail@plt+0x9024>
   28f08:	mov	r9, #0
   28f0c:	str	r9, [sp, #36]	; 0x24
   28f10:	str	r0, [sp, #32]
   28f14:	ldrd	r2, [sp, #32]
   28f18:	mov	r6, r0
   28f1c:	mov	r7, r1
   28f20:	cmp	r3, r1
   28f24:	cmpeq	r2, r0
   28f28:	beq	28d78 <__assert_fail@plt+0x169ec>
   28f2c:	ldr	r1, [pc, #416]	; 290d4 <__assert_fail@plt+0x16d48>
   28f30:	mov	r2, #5
   28f34:	mov	r0, r9
   28f38:	bl	11ea0 <dcgettext@plt>
   28f3c:	mov	r2, r6
   28f40:	mov	r3, r7
   28f44:	str	r9, [sp]
   28f48:	str	r0, [sp, #24]
   28f4c:	ldr	r0, [pc, #388]	; 290d8 <__assert_fail@plt+0x16d4c>
   28f50:	bl	18b24 <__assert_fail@plt+0x6798>
   28f54:	ldr	r1, [sp, #24]
   28f58:	ldr	r2, [pc, #284]	; 2907c <__assert_fail@plt+0x16cf0>
   28f5c:	mov	r3, r0
   28f60:	mov	r0, r1
   28f64:	ldr	r1, [pc, #372]	; 290e0 <__assert_fail@plt+0x16d54>
   28f68:	bl	412ac <error@@Base>
   28f6c:	b	28d78 <__assert_fail@plt+0x169ec>
   28f70:	add	r2, r2, #5
   28f74:	b	285b4 <__assert_fail@plt+0x16228>
   28f78:	add	r2, r2, #3
   28f7c:	b	285b4 <__assert_fail@plt+0x16228>
   28f80:	add	r2, r2, #2
   28f84:	b	285b4 <__assert_fail@plt+0x16228>
   28f88:	ldr	r3, [sp, #116]	; 0x74
   28f8c:	add	r2, r0, r3
   28f90:	b	285b4 <__assert_fail@plt+0x16228>
   28f94:	mov	r1, r6
   28f98:	mov	r0, r5
   28f9c:	bl	1a56c <__assert_fail@plt+0x81e0>
   28fa0:	cmp	r0, #0
   28fa4:	bge	28abc <__assert_fail@plt+0x16730>
   28fa8:	b	28acc <__assert_fail@plt+0x16740>
   28fac:	add	r8, sp, #348	; 0x15c
   28fb0:	mov	r3, sl
   28fb4:	mov	r1, r8
   28fb8:	mov	r2, #0
   28fbc:	bl	1b3b0 <__assert_fail@plt+0x9024>
   28fc0:	mov	r3, #0
   28fc4:	str	r3, [sp, #108]	; 0x6c
   28fc8:	str	r0, [sp, #104]	; 0x68
   28fcc:	mov	r6, r0
   28fd0:	mov	r7, r1
   28fd4:	ldrd	r0, [sp, #104]	; 0x68
   28fd8:	cmp	r1, r7
   28fdc:	cmpeq	r0, r6
   28fe0:	beq	28d78 <__assert_fail@plt+0x169ec>
   28fe4:	ldr	r1, [pc, #232]	; 290d4 <__assert_fail@plt+0x16d48>
   28fe8:	mov	r2, #5
   28fec:	mov	r0, r3
   28ff0:	bl	11ea0 <dcgettext@plt>
   28ff4:	mov	r3, #0
   28ff8:	str	r3, [sp]
   28ffc:	mov	r2, r6
   29000:	mov	r3, r7
   29004:	mov	r9, r0
   29008:	ldr	r0, [pc, #200]	; 290d8 <__assert_fail@plt+0x16d4c>
   2900c:	bl	18b24 <__assert_fail@plt+0x6798>
   29010:	ldr	r2, [pc, #104]	; 29080 <__assert_fail@plt+0x16cf4>
   29014:	ldr	r1, [pc, #196]	; 290e0 <__assert_fail@plt+0x16d54>
   29018:	mov	r3, r0
   2901c:	mov	r0, r9
   29020:	bl	412ac <error@@Base>
   29024:	b	28d78 <__assert_fail@plt+0x169ec>
   29028:	mov	r2, r0
   2902c:	b	285b4 <__assert_fail@plt+0x16228>
   29030:	andeq	lr, r4, ip, lsl #10
   29034:	andeq	lr, r4, r8, lsl r5
   29038:	andeq	r9, r6, ip, lsr #27
   2903c:	andeq	lr, r4, r8, lsr #10
   29040:	andeq	r9, r6, r0, ror #27
   29044:	andeq	r9, r4, ip, ror r7
   29048:	andeq	lr, r4, ip, ror #10
   2904c:	andeq	r9, r6, r8, asr #27
   29050:	andeq	lr, r4, r4, ror r5
   29054:	andeq	lr, r4, ip, lsr sl
   29058:	andeq	r1, r0, r7, lsr #29
   2905c:	muleq	r0, r7, lr
   29060:	muleq	r0, r8, lr
   29064:	andeq	r1, r0, fp, lsl #29
   29068:	andeq	lr, r4, r8, ror #14
   2906c:	andeq	r1, r0, fp, ror lr
   29070:	andeq	r1, r0, r6, ror lr
   29074:	andeq	r1, r0, r1, ror lr
   29078:	andeq	r1, r0, ip, ror #28
   2907c:	andeq	r1, r0, r6, ror #28
   29080:			; <UNDEFINED> instruction: 0x00001eba
   29084:	strdeq	r1, [r0], -r3
   29088:	ldrdeq	lr, [r4], -r4
   2908c:	andeq	r2, r0, pc, ror r0
   29090:	andeq	r2, r0, r5, lsl #1
   29094:	andeq	lr, r4, r8, asr #23
   29098:	andeq	r2, r0, r4, lsr #32
   2909c:	andeq	r2, r0, r5, lsr #32
   290a0:	andeq	r9, r4, r4, lsr #5
   290a4:	andeq	lr, r4, r0, ror #21
   290a8:	strdeq	lr, [r4], -r0
   290ac:	andeq	r2, r0, ip, asr #32
   290b0:	andeq	r1, r0, sl, asr #30
   290b4:	andeq	r1, r0, fp, asr #30
   290b8:	muleq	r4, r4, r8
   290bc:	andeq	lr, r4, r0, ror r8
   290c0:	andeq	r1, r0, r5, ror #31
   290c4:	strdeq	lr, [r4], -ip
   290c8:	ldrdeq	r1, [r0], -ip
   290cc:	ldrdeq	lr, [r4], -ip
   290d0:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   290d4:			; <UNDEFINED> instruction: 0x0004c1b0
   290d8:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   290dc:	muleq	r0, sp, pc	; <UNPREDICTABLE>
   290e0:	ldrdeq	sl, [r4], -r8
   290e4:	andeq	lr, r4, r4, asr #18
   290e8:	sub	r2, r3, #1
   290ec:	cmp	r2, #191	; 0xbf
   290f0:	ldrls	pc, [pc, r2, lsl #2]
   290f4:	b	2ab88 <__assert_fail@plt+0x187fc>
   290f8:	ldrdeq	sl, [r2], -r8
   290fc:	andeq	sl, r2, r4, lsl #22
   29100:	andeq	sl, r2, r4, lsr #20
   29104:			; <UNDEFINED> instruction: 0x00029bb8
   29108:	andeq	r9, r2, r0, asr #20
   2910c:	andeq	sl, r2, r4, lsr #5
   29110:	andeq	sl, r2, r4, asr #3
   29114:	strdeq	sl, [r2], -r4
   29118:	andeq	r9, r2, r0, asr pc
   2911c:	andeq	r9, r2, r8, lsr #29
   29120:	strdeq	r9, [r2], -r4
   29124:	andeq	r9, r2, r0, lsl #26
   29128:	andeq	r9, r2, ip, lsr ip
   2912c:	andeq	sl, r2, r4, lsr #17
   29130:	andeq	sl, r2, r0, ror r6
   29134:	andeq	sl, r2, r0, lsr r7
   29138:	andeq	sl, r2, ip, asr #1
   2913c:	andeq	sl, r2, r8, ror #7
   29140:	andeq	sl, r2, r4, lsl #7
   29144:	strdeq	sl, [r2], -r8
   29148:	andeq	r9, r2, r4, lsr r9
   2914c:	muleq	r2, r8, r7
   29150:	andeq	sl, r2, r8, lsl #23
   29154:	andeq	sl, r2, r8, lsl #23
   29158:	andeq	sl, r2, r8, lsl #23
   2915c:	andeq	sl, r2, r8, lsl #23
   29160:	andeq	sl, r2, r8, lsl #23
   29164:	andeq	sl, r2, r8, lsl #23
   29168:	andeq	r9, r2, r4, ror #13
   2916c:	andeq	sl, r2, r8, lsl #23
   29170:	andeq	sl, r2, r8, lsl #23
   29174:	andeq	sl, r2, r8, lsl #23
   29178:	andeq	sl, r2, r8, lsl #23
   2917c:	andeq	sl, r2, r8, lsl #23
   29180:	andeq	sl, r2, r8, lsl #23
   29184:	andeq	sl, r2, r8, lsl #23
   29188:	andeq	sl, r2, r8, lsl #23
   2918c:	andeq	sl, r2, r8, lsl #23
   29190:	andeq	sl, r2, r8, lsl #23
   29194:	andeq	sl, r2, r8, lsl #23
   29198:	andeq	sl, r2, r8, lsl #23
   2919c:	andeq	sl, r2, r8, lsl #23
   291a0:	andeq	sl, r2, r8, lsl #23
   291a4:	andeq	sl, r2, r8, lsl #23
   291a8:	andeq	r9, r2, r4, lsl #18
   291ac:	andeq	r9, r2, r0, lsr r5
   291b0:	ldrdeq	r9, [r2], -r4
   291b4:	andeq	sl, r2, r8, lsl #23
   291b8:	andeq	sl, r2, r8, lsl #23
   291bc:	andeq	sl, r2, r8, lsl #23
   291c0:	andeq	sl, r2, r8, lsl #23
   291c4:	andeq	sl, r2, r8, lsl #23
   291c8:	andeq	sl, r2, r8, lsl #23
   291cc:	andeq	sl, r2, r8, lsl #23
   291d0:	andeq	sl, r2, r8, lsl #23
   291d4:	andeq	sl, r2, r8, lsl #23
   291d8:	andeq	sl, r2, r8, lsl #23
   291dc:	andeq	sl, r2, r8, lsl #23
   291e0:	andeq	sl, r2, r8, lsl #23
   291e4:	andeq	sl, r2, r8, lsl #23
   291e8:	andeq	sl, r2, r8, lsl #23
   291ec:	andeq	sl, r2, r8, lsl #23
   291f0:	andeq	sl, r2, r8, lsl #23
   291f4:	andeq	r9, r2, r8, ror #9
   291f8:	andeq	sl, r2, r8, lsl #23
   291fc:	andeq	sl, r2, r8, lsl #23
   29200:	andeq	sl, r2, r8, lsl #23
   29204:	andeq	sl, r2, r8, lsl #23
   29208:	andeq	sl, r2, r8, lsl #23
   2920c:	andeq	sl, r2, r8, lsl #23
   29210:	andeq	sl, r2, r8, lsl #23
   29214:	andeq	sl, r2, r8, lsl #23
   29218:	andeq	sl, r2, r8, lsl #23
   2921c:	andeq	sl, r2, r8, lsl #23
   29220:	andeq	sl, r2, r8, lsl #23
   29224:	andeq	sl, r2, r8, lsl #23
   29228:	andeq	sl, r2, r8, lsl #23
   2922c:	andeq	sl, r2, r8, lsl #23
   29230:	andeq	sl, r2, r8, lsl #23
   29234:	andeq	sl, r2, r8, lsl #23
   29238:	andeq	sl, r2, r8, lsl #23
   2923c:	andeq	sl, r2, r8, lsl #23
   29240:	andeq	sl, r2, r8, lsl #23
   29244:	andeq	sl, r2, r8, lsl #23
   29248:	andeq	sl, r2, r8, lsl #23
   2924c:	andeq	sl, r2, r8, lsl #23
   29250:	andeq	sl, r2, r8, lsl #23
   29254:	andeq	sl, r2, r8, lsl #23
   29258:	andeq	sl, r2, r8, lsl #23
   2925c:	andeq	sl, r2, r8, lsl #23
   29260:	andeq	sl, r2, r8, lsl #23
   29264:	andeq	sl, r2, r8, lsl #23
   29268:	andeq	sl, r2, r8, lsl #23
   2926c:	andeq	sl, r2, r8, lsl #23
   29270:	andeq	sl, r2, r8, lsl #23
   29274:	andeq	sl, r2, r8, lsl #23
   29278:	andeq	sl, r2, r8, lsl #23
   2927c:	andeq	sl, r2, r8, lsl #23
   29280:	andeq	sl, r2, r8, lsl #23
   29284:	andeq	sl, r2, r8, lsl #23
   29288:	andeq	sl, r2, r8, lsl #23
   2928c:	andeq	sl, r2, r8, lsl #23
   29290:	andeq	sl, r2, r8, lsl #23
   29294:	andeq	sl, r2, r8, lsl #23
   29298:	andeq	sl, r2, r8, lsl #23
   2929c:	andeq	sl, r2, r8, lsl #23
   292a0:	andeq	sl, r2, r8, lsl #23
   292a4:	andeq	sl, r2, r8, lsl #23
   292a8:	andeq	sl, r2, r8, lsl #23
   292ac:	andeq	sl, r2, r8, lsl #23
   292b0:	andeq	sl, r2, r8, lsl #23
   292b4:	andeq	sl, r2, r8, lsl #23
   292b8:	andeq	sl, r2, r8, lsl #23
   292bc:	andeq	sl, r2, r8, lsl #23
   292c0:	andeq	sl, r2, r8, lsl #23
   292c4:	andeq	sl, r2, r8, lsl #23
   292c8:	andeq	sl, r2, r8, lsl #23
   292cc:	andeq	sl, r2, r8, lsl #23
   292d0:	andeq	sl, r2, r8, lsl #23
   292d4:	andeq	sl, r2, r8, lsl #23
   292d8:	andeq	sl, r2, r8, lsl #23
   292dc:	andeq	sl, r2, r8, lsl #23
   292e0:	andeq	sl, r2, r8, lsl #23
   292e4:	andeq	sl, r2, r8, lsl #23
   292e8:	andeq	sl, r2, r8, lsl #23
   292ec:	andeq	sl, r2, r8, lsl #23
   292f0:	andeq	sl, r2, r8, lsl #23
   292f4:	strdeq	r9, [r2], -r8
   292f8:	andeq	sl, r2, r8, lsl #23
   292fc:	andeq	sl, r2, r8, lsl #23
   29300:	andeq	sl, r2, r8, lsl #23
   29304:	andeq	sl, r2, r8, lsl #23
   29308:	andeq	sl, r2, r8, lsl #23
   2930c:	andeq	sl, r2, r8, lsl #23
   29310:	andeq	sl, r2, r8, lsl #23
   29314:	andeq	sl, r2, r8, lsl #23
   29318:	andeq	sl, r2, r8, lsl #23
   2931c:	andeq	sl, r2, r8, lsl #23
   29320:	andeq	sl, r2, r8, lsl #23
   29324:	andeq	sl, r2, r8, lsl #23
   29328:	andeq	sl, r2, r8, lsl #23
   2932c:	andeq	sl, r2, r8, lsl #23
   29330:	andeq	sl, r2, r8, lsl #23
   29334:	andeq	sl, r2, r8, lsl #23
   29338:	andeq	sl, r2, r8, lsl #23
   2933c:	andeq	sl, r2, r8, lsl #23
   29340:	andeq	sl, r2, r8, lsl #23
   29344:	andeq	sl, r2, r8, lsl #23
   29348:	andeq	sl, r2, r8, lsl #23
   2934c:	andeq	sl, r2, r8, lsl #23
   29350:	andeq	sl, r2, r8, lsl #23
   29354:	andeq	sl, r2, r8, lsl #23
   29358:	andeq	sl, r2, r8, lsl #23
   2935c:	andeq	sl, r2, r8, lsl #23
   29360:	andeq	sl, r2, r8, lsl #23
   29364:	andeq	sl, r2, r8, lsl #23
   29368:	andeq	sl, r2, r8, lsl #23
   2936c:	andeq	sl, r2, r8, lsl #23
   29370:	andeq	sl, r2, r8, lsl #23
   29374:	andeq	sl, r2, r8, lsl #23
   29378:	andeq	sl, r2, r8, lsl #23
   2937c:	andeq	sl, r2, r8, lsl #23
   29380:	andeq	sl, r2, r8, lsl #23
   29384:	andeq	sl, r2, r8, lsl #23
   29388:	andeq	sl, r2, r8, lsl #23
   2938c:	andeq	sl, r2, r8, lsl #23
   29390:	andeq	sl, r2, r8, lsl #23
   29394:	andeq	sl, r2, r8, lsl #23
   29398:	andeq	sl, r2, r8, lsl #23
   2939c:	andeq	sl, r2, r8, lsl #23
   293a0:	andeq	sl, r2, r8, lsl #23
   293a4:	andeq	sl, r2, r8, lsl #23
   293a8:	andeq	sl, r2, r8, lsl #23
   293ac:	andeq	sl, r2, r8, lsl #23
   293b0:	andeq	sl, r2, r8, lsl #23
   293b4:	andeq	sl, r2, r8, lsl #23
   293b8:	andeq	sl, r2, r8, lsl #23
   293bc:	andeq	sl, r2, r8, lsl #23
   293c0:	andeq	sl, r2, r8, lsl #23
   293c4:	andeq	sl, r2, r8, lsl #23
   293c8:	andeq	sl, r2, r8, lsl #23
   293cc:	andeq	sl, r2, r8, lsl #23
   293d0:	andeq	sl, r2, r8, lsl #23
   293d4:	andeq	sl, r2, r8, lsl #23
   293d8:	andeq	sl, r2, r8, lsl #23
   293dc:	andeq	sl, r2, r8, lsl #23
   293e0:	andeq	sl, r2, r8, lsl #23
   293e4:	andeq	sl, r2, r8, lsl #23
   293e8:	andeq	sl, r2, r8, lsl #23
   293ec:	andeq	sl, r2, r8, lsl #23
   293f0:	andeq	sl, r2, r8, lsl #23
   293f4:	andeq	sl, r2, r8, lsr #21
   293f8:	mov	r3, sl
   293fc:	mov	r2, #0
   29400:	add	r1, sp, #348	; 0x15c
   29404:	bl	1b3b0 <__assert_fail@plt+0x9024>
   29408:	mov	r4, #0
   2940c:	str	r4, [sp, #180]	; 0xb4
   29410:	str	r0, [sp, #176]	; 0xb0
   29414:	ldrd	r2, [sp, #176]	; 0xb0
   29418:	mov	r6, r0
   2941c:	mov	r7, r1
   29420:	cmp	r3, r1
   29424:	cmpeq	r2, r0
   29428:	beq	29468 <__assert_fail@plt+0x170dc>
   2942c:	ldr	r1, [pc, #-864]	; 290d4 <__assert_fail@plt+0x16d48>
   29430:	mov	r2, #5
   29434:	mov	r0, r4
   29438:	bl	11ea0 <dcgettext@plt>
   2943c:	mov	r2, r6
   29440:	mov	r3, r7
   29444:	str	r4, [sp]
   29448:	mov	r9, r0
   2944c:	ldr	r0, [pc, #-892]	; 290d8 <__assert_fail@plt+0x16d4c>
   29450:	bl	18b24 <__assert_fail@plt+0x6798>
   29454:	ldr	r2, [pc, #-984]	; 29084 <__assert_fail@plt+0x16cf8>
   29458:	ldr	r1, [pc, #-896]	; 290e0 <__assert_fail@plt+0x16d54>
   2945c:	mov	r3, r0
   29460:	mov	r0, r9
   29464:	bl	412ac <error@@Base>
   29468:	ldr	r3, [r5, #8]
   2946c:	ldr	r4, [sp, #344]	; 0x158
   29470:	ldr	r2, [sp, #348]	; 0x15c
   29474:	cmp	r3, r8
   29478:	ldr	r3, [sp, #112]	; 0x70
   2947c:	add	r4, r4, r2
   29480:	str	r4, [sp, #344]	; 0x158
   29484:	ldr	r1, [r3]
   29488:	bhi	2b718 <__assert_fail@plt+0x1938c>
   2948c:	cmp	r1, #0
   29490:	beq	294a4 <__assert_fail@plt+0x17118>
   29494:	ldr	r3, [sp, #132]	; 0x84
   29498:	ldrb	r3, [r3]
   2949c:	cmp	r3, #0
   294a0:	beq	2b720 <__assert_fail@plt+0x19394>
   294a4:	mov	r1, #0
   294a8:	mov	r0, r8
   294ac:	bl	1888c <__assert_fail@plt+0x6500>
   294b0:	ldr	r3, [r5, #28]
   294b4:	ldr	r4, [sp, #132]	; 0x84
   294b8:	mul	r3, r3, r6
   294bc:	mov	r1, r4
   294c0:	mov	r2, r0
   294c4:	ldr	r0, [pc, #-1092]	; 29088 <__assert_fail@plt+0x16cfc>
   294c8:	bl	11dbc <printf@plt>
   294cc:	ldrb	r3, [r4]
   294d0:	cmp	r3, #0
   294d4:	beq	2bb44 <__assert_fail@plt+0x197b8>
   294d8:	mov	r3, #0
   294dc:	ldr	r4, [sp, #344]	; 0x158
   294e0:	str	r3, [sp, #24]
   294e4:	b	28914 <__assert_fail@plt+0x16588>
   294e8:	ldr	r3, [sp, #112]	; 0x70
   294ec:	ldr	r0, [r3]
   294f0:	cmp	r0, #0
   294f4:	beq	2b750 <__assert_fail@plt+0x193c4>
   294f8:	add	r2, sp, #352	; 0x160
   294fc:	add	r1, sp, #360	; 0x168
   29500:	mov	r0, r5
   29504:	bl	18ed8 <__assert_fail@plt+0x6b4c>
   29508:	ldr	r1, [r5, #24]
   2950c:	ldrd	r2, [r5, #32]
   29510:	ldr	r4, [sp, #344]	; 0x158
   29514:	mul	r8, r1, r8
   29518:	adds	r0, r2, r8
   2951c:	adc	r1, r3, #0
   29520:	mov	r3, #0
   29524:	str	r3, [sp, #24]
   29528:	strd	r0, [r5, #32]
   2952c:	b	28914 <__assert_fail@plt+0x16588>
   29530:	mov	r3, sl
   29534:	mov	r2, #0
   29538:	add	r1, sp, #348	; 0x15c
   2953c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   29540:	add	r3, sp, #312	; 0x138
   29544:	mov	r4, #0
   29548:	str	r4, [sp, #316]	; 0x13c
   2954c:	str	r0, [sp, #312]	; 0x138
   29550:	ldrd	r2, [r3]
   29554:	mov	r6, r0
   29558:	mov	r7, r1
   2955c:	cmp	r3, r1
   29560:	cmpeq	r2, r0
   29564:	beq	295a4 <__assert_fail@plt+0x17218>
   29568:	ldr	r1, [pc, #-1180]	; 290d4 <__assert_fail@plt+0x16d48>
   2956c:	mov	r2, #5
   29570:	mov	r0, r4
   29574:	bl	11ea0 <dcgettext@plt>
   29578:	mov	r2, r6
   2957c:	mov	r3, r7
   29580:	str	r4, [sp]
   29584:	mov	r8, r0
   29588:	ldr	r0, [pc, #-1208]	; 290d8 <__assert_fail@plt+0x16d4c>
   2958c:	bl	18b24 <__assert_fail@plt+0x6798>
   29590:	ldr	r2, [pc, #-1292]	; 2908c <__assert_fail@plt+0x16d00>
   29594:	ldr	r1, [pc, #-1212]	; 290e0 <__assert_fail@plt+0x16d54>
   29598:	mov	r3, r0
   2959c:	mov	r0, r8
   295a0:	bl	412ac <error@@Base>
   295a4:	ldr	r2, [sp, #112]	; 0x70
   295a8:	ldr	r4, [sp, #344]	; 0x158
   295ac:	ldr	r3, [sp, #348]	; 0x15c
   295b0:	ldr	r2, [r2]
   295b4:	add	r4, r4, r3
   295b8:	cmp	r2, #0
   295bc:	str	r2, [sp, #24]
   295c0:	str	r4, [sp, #344]	; 0x158
   295c4:	beq	2b910 <__assert_fail@plt+0x19584>
   295c8:	mov	r3, #0
   295cc:	str	r3, [sp, #24]
   295d0:	b	28914 <__assert_fail@plt+0x16588>
   295d4:	add	r4, sp, #348	; 0x15c
   295d8:	mov	r3, sl
   295dc:	mov	r2, #0
   295e0:	mov	r1, r4
   295e4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   295e8:	add	r3, sp, #320	; 0x140
   295ec:	mov	r6, #0
   295f0:	str	r6, [sp, #324]	; 0x144
   295f4:	str	r0, [sp, #320]	; 0x140
   295f8:	ldrd	r2, [r3]
   295fc:	mov	r8, r0
   29600:	mov	r9, r1
   29604:	cmp	r3, r1
   29608:	cmpeq	r2, r0
   2960c:	str	r0, [sp, #24]
   29610:	beq	29650 <__assert_fail@plt+0x172c4>
   29614:	ldr	r1, [pc, #-1352]	; 290d4 <__assert_fail@plt+0x16d48>
   29618:	mov	r2, #5
   2961c:	mov	r0, r6
   29620:	bl	11ea0 <dcgettext@plt>
   29624:	mov	r2, r8
   29628:	mov	r3, r9
   2962c:	str	r6, [sp]
   29630:	mov	r7, r0
   29634:	ldr	r0, [pc, #-1380]	; 290d8 <__assert_fail@plt+0x16d4c>
   29638:	bl	18b24 <__assert_fail@plt+0x6798>
   2963c:	ldr	r2, [pc, #-1460]	; 29090 <__assert_fail@plt+0x16d04>
   29640:	ldr	r1, [pc, #-1384]	; 290e0 <__assert_fail@plt+0x16d54>
   29644:	mov	r3, r0
   29648:	mov	r0, r7
   2964c:	bl	412ac <error@@Base>
   29650:	ldr	ip, [sp, #344]	; 0x158
   29654:	ldr	r3, [sp, #348]	; 0x15c
   29658:	mov	r2, #1
   2965c:	add	ip, ip, r3
   29660:	mov	r0, ip
   29664:	mov	r3, sl
   29668:	mov	r1, r4
   2966c:	str	ip, [sp, #344]	; 0x158
   29670:	bl	1b3b0 <__assert_fail@plt+0x9024>
   29674:	ldr	r3, [sp, #344]	; 0x158
   29678:	ldr	r2, [sp, #348]	; 0x15c
   2967c:	mov	r1, r8
   29680:	add	r3, r3, r2
   29684:	str	r3, [sp, #344]	; 0x158
   29688:	mov	r6, r0
   2968c:	mov	r0, r5
   29690:	bl	1a56c <__assert_fail@plt+0x81e0>
   29694:	rsbs	r6, r6, #0
   29698:	ldr	r3, [sp, #112]	; 0x70
   2969c:	cmp	r0, #0
   296a0:	blt	2b7cc <__assert_fail@plt+0x19440>
   296a4:	ldr	r1, [r3]
   296a8:	cmp	r1, #0
   296ac:	beq	2bbec <__assert_fail@plt+0x19860>
   296b0:	ldr	r3, [r5, #28]
   296b4:	ldr	r2, [r5, #12]
   296b8:	lsl	r8, r8, #1
   296bc:	mov	r1, #128	; 0x80
   296c0:	mul	r6, r3, r6
   296c4:	ldr	r3, [r5, #16]
   296c8:	strh	r1, [r2, r8]
   296cc:	ldr	r2, [sp, #24]
   296d0:	ldr	r4, [sp, #344]	; 0x158
   296d4:	str	r6, [r3, r2, lsl #2]
   296d8:	mov	r3, #0
   296dc:	str	r3, [sp, #24]
   296e0:	b	28914 <__assert_fail@plt+0x16588>
   296e4:	add	r4, r4, #9
   296e8:	cmp	fp, r4
   296ec:	bhi	2b5f4 <__assert_fail@plt+0x19268>
   296f0:	cmp	r0, fp
   296f4:	bcs	29708 <__assert_fail@plt+0x1737c>
   296f8:	sub	r1, fp, r0
   296fc:	sub	r3, r1, #1
   29700:	cmp	r3, #7
   29704:	bls	2b5f8 <__assert_fail@plt+0x1926c>
   29708:	mov	r6, #0
   2970c:	mov	r4, r6
   29710:	ldr	r3, [sp, #112]	; 0x70
   29714:	add	r0, r0, #8
   29718:	str	r0, [sp, #344]	; 0x158
   2971c:	ldr	ip, [r3]
   29720:	cmp	ip, #0
   29724:	bne	2abe8 <__assert_fail@plt+0x1885c>
   29728:	ldr	r1, [r5, #24]
   2972c:	ldrd	r2, [r5, #32]
   29730:	ldrb	lr, [r5, #70]	; 0x46
   29734:	umull	r8, r9, r1, r6
   29738:	str	lr, [sp]
   2973c:	mla	r9, r1, r4, r9
   29740:	adds	r2, r8, r2
   29744:	mov	r0, ip
   29748:	adc	r3, r9, r3
   2974c:	mul	r7, r6, r1
   29750:	bl	18b24 <__assert_fail@plt+0x6798>
   29754:	mov	r1, r7
   29758:	mov	r2, r0
   2975c:	ldr	r0, [pc, #-1744]	; 29094 <__assert_fail@plt+0x16d08>
   29760:	bl	11dbc <printf@plt>
   29764:	ldr	r0, [r5, #24]
   29768:	ldr	r1, [r5, #32]
   2976c:	umull	r6, r7, r0, r6
   29770:	mla	r7, r0, r4, r7
   29774:	ldr	r0, [r5, #36]	; 0x24
   29778:	adds	r1, r1, r6
   2977c:	adc	r3, r0, r7
   29780:	str	r3, [r5, #36]	; 0x24
   29784:	mov	r3, #0
   29788:	str	r1, [r5, #32]
   2978c:	ldr	r4, [sp, #344]	; 0x158
   29790:	str	r3, [sp, #24]
   29794:	b	28914 <__assert_fail@plt+0x16588>
   29798:	add	r4, sp, #348	; 0x15c
   2979c:	mov	r3, sl
   297a0:	mov	r2, #0
   297a4:	mov	r1, r4
   297a8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   297ac:	add	r3, sp, #280	; 0x118
   297b0:	mov	r6, #0
   297b4:	str	r6, [sp, #284]	; 0x11c
   297b8:	str	r0, [sp, #280]	; 0x118
   297bc:	ldrd	r2, [r3]
   297c0:	mov	r8, r0
   297c4:	mov	r9, r1
   297c8:	cmp	r3, r1
   297cc:	cmpeq	r2, r0
   297d0:	beq	29810 <__assert_fail@plt+0x17484>
   297d4:	ldr	r1, [pc, #-1800]	; 290d4 <__assert_fail@plt+0x16d48>
   297d8:	mov	r2, #5
   297dc:	mov	r0, r6
   297e0:	bl	11ea0 <dcgettext@plt>
   297e4:	mov	r2, r8
   297e8:	mov	r3, r9
   297ec:	str	r6, [sp]
   297f0:	mov	r7, r0
   297f4:	ldr	r0, [pc, #-1828]	; 290d8 <__assert_fail@plt+0x16d4c>
   297f8:	bl	18b24 <__assert_fail@plt+0x6798>
   297fc:	ldr	r2, [pc, #-1900]	; 29098 <__assert_fail@plt+0x16d0c>
   29800:	ldr	r1, [pc, #-1832]	; 290e0 <__assert_fail@plt+0x16d54>
   29804:	mov	r3, r0
   29808:	mov	r0, r7
   2980c:	bl	412ac <error@@Base>
   29810:	ldr	ip, [sp, #344]	; 0x158
   29814:	ldr	r3, [sp, #348]	; 0x15c
   29818:	mov	r1, r4
   2981c:	add	ip, ip, r3
   29820:	mov	r2, #0
   29824:	mov	r3, sl
   29828:	mov	r0, ip
   2982c:	str	ip, [sp, #344]	; 0x158
   29830:	bl	1b3b0 <__assert_fail@plt+0x9024>
   29834:	mov	r4, #0
   29838:	str	r4, [sp, #156]	; 0x9c
   2983c:	str	r0, [sp, #152]	; 0x98
   29840:	ldrd	r2, [sp, #152]	; 0x98
   29844:	mov	r6, r0
   29848:	mov	r7, r1
   2984c:	cmp	r3, r1
   29850:	cmpeq	r2, r0
   29854:	beq	29898 <__assert_fail@plt+0x1750c>
   29858:	ldr	r1, [pc, #-1932]	; 290d4 <__assert_fail@plt+0x16d48>
   2985c:	mov	r2, #5
   29860:	mov	r0, r4
   29864:	bl	11ea0 <dcgettext@plt>
   29868:	mov	r2, r6
   2986c:	mov	r3, r7
   29870:	str	r4, [sp]
   29874:	str	r0, [sp, #24]
   29878:	ldr	r0, [pc, #-1960]	; 290d8 <__assert_fail@plt+0x16d4c>
   2987c:	bl	18b24 <__assert_fail@plt+0x6798>
   29880:	ldr	r1, [sp, #24]
   29884:	ldr	r2, [pc, #-2032]	; 2909c <__assert_fail@plt+0x16d10>
   29888:	mov	r3, r0
   2988c:	mov	r0, r1
   29890:	ldr	r1, [pc, #-1976]	; 290e0 <__assert_fail@plt+0x16d54>
   29894:	bl	412ac <error@@Base>
   29898:	ldr	r2, [sp, #348]	; 0x15c
   2989c:	ldr	r3, [sp, #344]	; 0x158
   298a0:	ldr	r1, [r5, #8]
   298a4:	add	r3, r3, r2
   298a8:	add	r4, r3, r6
   298ac:	cmp	r3, r4
   298b0:	movls	r2, #0
   298b4:	movhi	r2, #1
   298b8:	cmp	fp, r4
   298bc:	orrcc	r2, r2, #1
   298c0:	ldr	ip, [pc, #-2088]	; 290a0 <__assert_fail@plt+0x16d14>
   298c4:	cmp	r3, fp
   298c8:	orrcs	r2, r2, #1
   298cc:	ldr	r0, [sp, #132]	; 0x84
   298d0:	cmp	r1, r8
   298d4:	movhi	r0, ip
   298d8:	cmp	r2, #0
   298dc:	str	r0, [sp, #24]
   298e0:	str	r3, [sp, #344]	; 0x158
   298e4:	beq	2bbb8 <__assert_fail@plt+0x1982c>
   298e8:	mov	r1, r6
   298ec:	ldr	r0, [pc, #-2128]	; 290a4 <__assert_fail@plt+0x16d18>
   298f0:	bl	11dbc <printf@plt>
   298f4:	mov	r3, #0
   298f8:	str	r3, [sp, #24]
   298fc:	ldr	r4, [sp, #344]	; 0x158
   29900:	b	28914 <__assert_fail@plt+0x16588>
   29904:	ldr	r3, [sp, #112]	; 0x70
   29908:	ldr	r3, [r3]
   2990c:	cmp	r3, #0
   29910:	str	r3, [sp, #24]
   29914:	movne	r3, #0
   29918:	movne	r4, r0
   2991c:	strne	r3, [sp, #24]
   29920:	bne	28914 <__assert_fail@plt+0x16588>
   29924:	ldr	r0, [pc, #-2180]	; 290a8 <__assert_fail@plt+0x16d1c>
   29928:	bl	11fe4 <puts@plt>
   2992c:	ldr	r4, [sp, #344]	; 0x158
   29930:	b	28914 <__assert_fail@plt+0x16588>
   29934:	add	r4, sp, #348	; 0x15c
   29938:	mov	r3, sl
   2993c:	mov	r2, #0
   29940:	mov	r1, r4
   29944:	bl	1b3b0 <__assert_fail@plt+0x9024>
   29948:	add	r3, sp, #296	; 0x128
   2994c:	mov	r9, #0
   29950:	str	r9, [sp, #300]	; 0x12c
   29954:	str	r0, [sp, #296]	; 0x128
   29958:	ldrd	r2, [r3]
   2995c:	mov	r6, r0
   29960:	mov	r7, r1
   29964:	cmp	r3, r1
   29968:	cmpeq	r2, r0
   2996c:	mov	r8, r0
   29970:	beq	299b4 <__assert_fail@plt+0x17628>
   29974:	ldr	r1, [pc, #-2216]	; 290d4 <__assert_fail@plt+0x16d48>
   29978:	mov	r2, #5
   2997c:	mov	r0, r9
   29980:	bl	11ea0 <dcgettext@plt>
   29984:	mov	r2, r6
   29988:	mov	r3, r7
   2998c:	str	r9, [sp]
   29990:	str	r0, [sp, #24]
   29994:	ldr	r0, [pc, #-2244]	; 290d8 <__assert_fail@plt+0x16d4c>
   29998:	bl	18b24 <__assert_fail@plt+0x6798>
   2999c:	ldr	r1, [sp, #24]
   299a0:	ldr	r2, [pc, #-2300]	; 290ac <__assert_fail@plt+0x16d20>
   299a4:	mov	r3, r0
   299a8:	mov	r0, r1
   299ac:	ldr	r1, [pc, #-2260]	; 290e0 <__assert_fail@plt+0x16d54>
   299b0:	bl	412ac <error@@Base>
   299b4:	ldr	ip, [sp, #344]	; 0x158
   299b8:	ldr	r3, [sp, #348]	; 0x15c
   299bc:	mov	r1, r4
   299c0:	add	ip, ip, r3
   299c4:	mov	r0, ip
   299c8:	mov	r3, sl
   299cc:	mov	r2, #1
   299d0:	str	ip, [sp, #344]	; 0x158
   299d4:	bl	1b3b0 <__assert_fail@plt+0x9024>
   299d8:	ldr	r3, [sp, #344]	; 0x158
   299dc:	ldr	r2, [sp, #348]	; 0x15c
   299e0:	mov	r1, r6
   299e4:	add	r3, r3, r2
   299e8:	str	r3, [sp, #344]	; 0x158
   299ec:	mov	r4, r0
   299f0:	mov	r0, r5
   299f4:	bl	1a56c <__assert_fail@plt+0x81e0>
   299f8:	ldr	r3, [sp, #112]	; 0x70
   299fc:	cmp	r0, #0
   29a00:	blt	2b820 <__assert_fail@plt+0x19494>
   29a04:	ldr	r1, [r3]
   29a08:	cmp	r1, #0
   29a0c:	beq	2bc30 <__assert_fail@plt+0x198a4>
   29a10:	ldr	r3, [r5, #28]
   29a14:	ldr	r1, [r5, #12]
   29a18:	ldr	r2, [r5, #16]
   29a1c:	mul	r3, r4, r3
   29a20:	lsl	r6, r6, #1
   29a24:	mov	r0, #20
   29a28:	strh	r0, [r1, r6]
   29a2c:	ldr	r4, [sp, #344]	; 0x158
   29a30:	str	r3, [r2, r8, lsl #2]
   29a34:	mov	r3, #0
   29a38:	str	r3, [sp, #24]
   29a3c:	b	28914 <__assert_fail@plt+0x16588>
   29a40:	add	r4, sp, #348	; 0x15c
   29a44:	mov	r3, sl
   29a48:	mov	r2, #0
   29a4c:	mov	r1, r4
   29a50:	bl	1b3b0 <__assert_fail@plt+0x9024>
   29a54:	mov	r8, #0
   29a58:	str	r8, [sp, #188]	; 0xbc
   29a5c:	str	r0, [sp, #184]	; 0xb8
   29a60:	ldrd	r2, [sp, #184]	; 0xb8
   29a64:	mov	r6, r0
   29a68:	mov	r7, r1
   29a6c:	cmp	r3, r1
   29a70:	cmpeq	r2, r0
   29a74:	str	r0, [sp, #116]	; 0x74
   29a78:	beq	29ab8 <__assert_fail@plt+0x1772c>
   29a7c:	ldr	r1, [pc, #-2480]	; 290d4 <__assert_fail@plt+0x16d48>
   29a80:	mov	r2, #5
   29a84:	mov	r0, r8
   29a88:	bl	11ea0 <dcgettext@plt>
   29a8c:	mov	r2, r6
   29a90:	mov	r3, r7
   29a94:	str	r8, [sp]
   29a98:	mov	r9, r0
   29a9c:	ldr	r0, [pc, #-2508]	; 290d8 <__assert_fail@plt+0x16d4c>
   29aa0:	bl	18b24 <__assert_fail@plt+0x6798>
   29aa4:	ldr	r2, [pc, #-2556]	; 290b0 <__assert_fail@plt+0x16d24>
   29aa8:	ldr	r1, [pc, #-2512]	; 290e0 <__assert_fail@plt+0x16d54>
   29aac:	mov	r3, r0
   29ab0:	mov	r0, r9
   29ab4:	bl	412ac <error@@Base>
   29ab8:	ldr	ip, [sp, #344]	; 0x158
   29abc:	ldr	r3, [sp, #348]	; 0x15c
   29ac0:	mov	r1, r4
   29ac4:	add	ip, ip, r3
   29ac8:	mov	r2, #0
   29acc:	mov	r3, sl
   29ad0:	mov	r0, ip
   29ad4:	str	ip, [sp, #344]	; 0x158
   29ad8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   29adc:	mov	r4, #0
   29ae0:	str	r4, [sp, #196]	; 0xc4
   29ae4:	str	r0, [sp, #192]	; 0xc0
   29ae8:	ldrd	r2, [sp, #192]	; 0xc0
   29aec:	mov	r8, r0
   29af0:	mov	r9, r1
   29af4:	cmp	r1, r3
   29af8:	cmpeq	r0, r2
   29afc:	beq	29b40 <__assert_fail@plt+0x177b4>
   29b00:	ldr	r1, [pc, #-2612]	; 290d4 <__assert_fail@plt+0x16d48>
   29b04:	mov	r2, #5
   29b08:	mov	r0, r4
   29b0c:	bl	11ea0 <dcgettext@plt>
   29b10:	mov	r2, r8
   29b14:	mov	r3, r9
   29b18:	str	r4, [sp]
   29b1c:	str	r0, [sp, #24]
   29b20:	ldr	r0, [pc, #-2640]	; 290d8 <__assert_fail@plt+0x16d4c>
   29b24:	bl	18b24 <__assert_fail@plt+0x6798>
   29b28:	ldr	r1, [sp, #24]
   29b2c:	ldr	r2, [pc, #-2688]	; 290b4 <__assert_fail@plt+0x16d28>
   29b30:	mov	r3, r0
   29b34:	mov	r0, r1
   29b38:	ldr	r1, [pc, #-2656]	; 290e0 <__assert_fail@plt+0x16d54>
   29b3c:	bl	412ac <error@@Base>
   29b40:	ldr	r3, [r5, #8]
   29b44:	ldr	r4, [sp, #344]	; 0x158
   29b48:	ldr	r2, [sp, #348]	; 0x15c
   29b4c:	cmp	r3, r6
   29b50:	ldr	r3, [sp, #112]	; 0x70
   29b54:	add	r4, r4, r2
   29b58:	str	r4, [sp, #344]	; 0x158
   29b5c:	ldr	r1, [r3]
   29b60:	bhi	2b6f4 <__assert_fail@plt+0x19368>
   29b64:	cmp	r1, #0
   29b68:	beq	29b7c <__assert_fail@plt+0x177f0>
   29b6c:	ldr	r3, [sp, #132]	; 0x84
   29b70:	ldrb	r3, [r3]
   29b74:	cmp	r3, #0
   29b78:	beq	2b6fc <__assert_fail@plt+0x19370>
   29b7c:	mov	r1, #0
   29b80:	mov	r0, r6
   29b84:	bl	1888c <__assert_fail@plt+0x6500>
   29b88:	ldr	r3, [r5, #28]
   29b8c:	ldr	r4, [sp, #132]	; 0x84
   29b90:	mul	r3, r3, r8
   29b94:	mov	r1, r4
   29b98:	mov	r2, r0
   29b9c:	ldr	r0, [pc, #-2796]	; 290b8 <__assert_fail@plt+0x16d2c>
   29ba0:	bl	11dbc <printf@plt>
   29ba4:	ldrb	r3, [r4]
   29ba8:	cmp	r3, #0
   29bac:	bne	294d8 <__assert_fail@plt+0x1714c>
   29bb0:	ldr	r4, [sp, #344]	; 0x158
   29bb4:	b	2b6fc <__assert_fail@plt+0x19370>
   29bb8:	add	r4, r4, #5
   29bbc:	cmp	fp, r4
   29bc0:	bhi	2b6d4 <__assert_fail@plt+0x19348>
   29bc4:	cmp	r0, fp
   29bc8:	bcs	29bdc <__assert_fail@plt+0x17850>
   29bcc:	sub	r1, fp, r0
   29bd0:	sub	r3, r1, #1
   29bd4:	cmp	r3, #7
   29bd8:	bls	2b6d8 <__assert_fail@plt+0x1934c>
   29bdc:	mov	r6, #0
   29be0:	mov	r4, r6
   29be4:	ldr	r3, [sp, #112]	; 0x70
   29be8:	add	r0, r0, #4
   29bec:	str	r0, [sp, #344]	; 0x158
   29bf0:	ldr	ip, [r3]
   29bf4:	cmp	ip, #0
   29bf8:	bne	2abe8 <__assert_fail@plt+0x1885c>
   29bfc:	ldr	r1, [r5, #24]
   29c00:	ldrd	r2, [r5, #32]
   29c04:	ldrb	lr, [r5, #70]	; 0x46
   29c08:	umull	r8, r9, r1, r6
   29c0c:	str	lr, [sp]
   29c10:	mla	r9, r1, r4, r9
   29c14:	adds	r2, r8, r2
   29c18:	mov	r0, ip
   29c1c:	adc	r3, r9, r3
   29c20:	mul	r7, r6, r1
   29c24:	bl	18b24 <__assert_fail@plt+0x6798>
   29c28:	mov	r1, r7
   29c2c:	mov	r2, r0
   29c30:	ldr	r0, [pc, #-2940]	; 290bc <__assert_fail@plt+0x16d30>
   29c34:	bl	11dbc <printf@plt>
   29c38:	b	29764 <__assert_fail@plt+0x173d8>
   29c3c:	mov	r3, sl
   29c40:	mov	r2, #0
   29c44:	add	r1, sp, #348	; 0x15c
   29c48:	bl	1b3b0 <__assert_fail@plt+0x9024>
   29c4c:	add	r3, sp, #264	; 0x108
   29c50:	mov	r4, #0
   29c54:	str	r4, [sp, #268]	; 0x10c
   29c58:	str	r0, [sp, #264]	; 0x108
   29c5c:	ldrd	r2, [r3]
   29c60:	mov	r6, r0
   29c64:	mov	r7, r1
   29c68:	cmp	r3, r1
   29c6c:	cmpeq	r2, r0
   29c70:	str	r0, [r5, #48]	; 0x30
   29c74:	beq	29cb4 <__assert_fail@plt+0x17928>
   29c78:	ldr	r1, [pc, #-2988]	; 290d4 <__assert_fail@plt+0x16d48>
   29c7c:	mov	r2, #5
   29c80:	mov	r0, r4
   29c84:	bl	11ea0 <dcgettext@plt>
   29c88:	mov	r2, r6
   29c8c:	mov	r3, r7
   29c90:	str	r4, [sp]
   29c94:	mov	r8, r0
   29c98:	ldr	r0, [pc, #-3016]	; 290d8 <__assert_fail@plt+0x16d4c>
   29c9c:	bl	18b24 <__assert_fail@plt+0x6798>
   29ca0:	ldr	r2, [pc, #-3048]	; 290c0 <__assert_fail@plt+0x16d34>
   29ca4:	ldr	r1, [pc, #-3020]	; 290e0 <__assert_fail@plt+0x16d54>
   29ca8:	mov	r3, r0
   29cac:	mov	r0, r8
   29cb0:	bl	412ac <error@@Base>
   29cb4:	ldr	r2, [sp, #112]	; 0x70
   29cb8:	ldr	r4, [sp, #344]	; 0x158
   29cbc:	ldr	r3, [sp, #348]	; 0x15c
   29cc0:	ldr	r2, [r2]
   29cc4:	add	r4, r4, r3
   29cc8:	cmp	r2, #0
   29ccc:	mov	r3, #0
   29cd0:	str	r2, [sp, #24]
   29cd4:	str	r4, [sp, #344]	; 0x158
   29cd8:	strb	r3, [r5, #69]	; 0x45
   29cdc:	bne	295cc <__assert_fail@plt+0x17240>
   29ce0:	mov	r1, r2
   29ce4:	ldr	r0, [r5, #48]	; 0x30
   29ce8:	bl	1888c <__assert_fail@plt+0x6500>
   29cec:	mov	r1, r0
   29cf0:	ldr	r0, [pc, #-3124]	; 290c4 <__assert_fail@plt+0x16d38>
   29cf4:	bl	11dbc <printf@plt>
   29cf8:	ldr	r4, [sp, #344]	; 0x158
   29cfc:	b	28914 <__assert_fail@plt+0x16588>
   29d00:	add	r4, sp, #348	; 0x15c
   29d04:	mov	r3, sl
   29d08:	mov	r2, #0
   29d0c:	mov	r1, r4
   29d10:	bl	1b3b0 <__assert_fail@plt+0x9024>
   29d14:	add	r3, sp, #256	; 0x100
   29d18:	mov	r8, #0
   29d1c:	str	r8, [sp, #260]	; 0x104
   29d20:	str	r0, [sp, #256]	; 0x100
   29d24:	ldrd	r2, [r3]
   29d28:	mov	r6, r0
   29d2c:	mov	r7, r1
   29d30:	cmp	r3, r1
   29d34:	cmpeq	r2, r0
   29d38:	str	r0, [r5, #48]	; 0x30
   29d3c:	beq	29d7c <__assert_fail@plt+0x179f0>
   29d40:	ldr	r1, [pc, #-3188]	; 290d4 <__assert_fail@plt+0x16d48>
   29d44:	mov	r2, #5
   29d48:	mov	r0, r8
   29d4c:	bl	11ea0 <dcgettext@plt>
   29d50:	mov	r2, r6
   29d54:	mov	r3, r7
   29d58:	str	r8, [sp]
   29d5c:	mov	r9, r0
   29d60:	ldr	r0, [pc, #-3216]	; 290d8 <__assert_fail@plt+0x16d4c>
   29d64:	bl	18b24 <__assert_fail@plt+0x6798>
   29d68:	ldr	r2, [pc, #-3240]	; 290c8 <__assert_fail@plt+0x16d3c>
   29d6c:	ldr	r1, [pc, #-3220]	; 290e0 <__assert_fail@plt+0x16d54>
   29d70:	mov	r3, r0
   29d74:	mov	r0, r9
   29d78:	bl	412ac <error@@Base>
   29d7c:	ldr	ip, [sp, #344]	; 0x158
   29d80:	ldr	r3, [sp, #348]	; 0x15c
   29d84:	mov	r1, r4
   29d88:	add	ip, ip, r3
   29d8c:	mov	r2, #0
   29d90:	mov	r3, sl
   29d94:	mov	r0, ip
   29d98:	str	ip, [sp, #344]	; 0x158
   29d9c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   29da0:	ldr	r2, [sp, #112]	; 0x70
   29da4:	ldr	r4, [sp, #344]	; 0x158
   29da8:	ldr	r3, [sp, #348]	; 0x15c
   29dac:	ldr	r2, [r2]
   29db0:	add	r4, r4, r3
   29db4:	cmp	r2, #0
   29db8:	mov	r3, #0
   29dbc:	str	r2, [sp, #24]
   29dc0:	str	r4, [sp, #344]	; 0x158
   29dc4:	strb	r3, [r5, #69]	; 0x45
   29dc8:	strd	r0, [r5, #56]	; 0x38
   29dcc:	bne	295cc <__assert_fail@plt+0x17240>
   29dd0:	mov	r1, r2
   29dd4:	ldr	r0, [r5, #48]	; 0x30
   29dd8:	bl	1888c <__assert_fail@plt+0x6500>
   29ddc:	ldr	r2, [r5, #56]	; 0x38
   29de0:	mov	r1, r0
   29de4:	ldr	r0, [pc, #-3360]	; 290cc <__assert_fail@plt+0x16d40>
   29de8:	bl	11dbc <printf@plt>
   29dec:	ldr	r4, [sp, #344]	; 0x158
   29df0:	b	28914 <__assert_fail@plt+0x16588>
   29df4:	ldr	r3, [sp, #112]	; 0x70
   29df8:	ldr	r3, [r3]
   29dfc:	cmp	r3, #0
   29e00:	beq	2b8c8 <__assert_fail@plt+0x1953c>
   29e04:	ldr	r3, [sp, #148]	; 0x94
   29e08:	cmp	r3, #0
   29e0c:	beq	2b8f0 <__assert_fail@plt+0x19564>
   29e10:	ldr	ip, [sp, #148]	; 0x94
   29e14:	ldrd	r2, [ip, #56]	; 0x38
   29e18:	ldr	r0, [ip, #48]	; 0x30
   29e1c:	ldr	r1, [ip, #64]	; 0x40
   29e20:	ldr	r4, [ip]
   29e24:	str	r0, [r5, #48]	; 0x30
   29e28:	str	r1, [r5, #64]	; 0x40
   29e2c:	strd	r2, [r5, #56]	; 0x38
   29e30:	ldrb	r3, [ip, #69]	; 0x45
   29e34:	mov	r0, r5
   29e38:	strb	r3, [r5, #69]	; 0x45
   29e3c:	ldr	r1, [ip, #8]
   29e40:	sub	r1, r1, #1
   29e44:	bl	1a56c <__assert_fail@plt+0x81e0>
   29e48:	cmp	r0, #0
   29e4c:	blt	2b950 <__assert_fail@plt+0x195c4>
   29e50:	ldr	r6, [sp, #148]	; 0x94
   29e54:	ldr	r0, [r5, #12]
   29e58:	ldr	r2, [r6, #8]
   29e5c:	ldr	r1, [r6, #12]
   29e60:	lsl	r2, r2, #1
   29e64:	bl	11e40 <memcpy@plt>
   29e68:	ldr	r2, [r6, #8]
   29e6c:	ldr	r1, [r6, #16]
   29e70:	ldr	r0, [r5, #16]
   29e74:	lsl	r2, r2, #2
   29e78:	bl	11e40 <memcpy@plt>
   29e7c:	ldr	r0, [r6, #12]
   29e80:	bl	11e10 <free@plt>
   29e84:	ldr	r0, [r6, #16]
   29e88:	bl	11e10 <free@plt>
   29e8c:	mov	r0, r6
   29e90:	bl	11e10 <free@plt>
   29e94:	mov	r3, #0
   29e98:	str	r4, [sp, #148]	; 0x94
   29e9c:	str	r3, [sp, #24]
   29ea0:	ldr	r4, [sp, #344]	; 0x158
   29ea4:	b	28914 <__assert_fail@plt+0x16588>
   29ea8:	ldr	r3, [sp, #112]	; 0x70
   29eac:	ldr	r3, [r3]
   29eb0:	cmp	r3, #0
   29eb4:	beq	2b920 <__assert_fail@plt+0x19594>
   29eb8:	mov	r0, #72	; 0x48
   29ebc:	bl	11f3c <xmalloc@plt>
   29ec0:	ldrd	r2, [r5, #56]	; 0x38
   29ec4:	ldr	r1, [r5, #64]	; 0x40
   29ec8:	mov	r6, r0
   29ecc:	ldr	r0, [r5, #48]	; 0x30
   29ed0:	strd	r2, [r6, #56]	; 0x38
   29ed4:	str	r0, [r6, #48]	; 0x30
   29ed8:	str	r1, [r6, #64]	; 0x40
   29edc:	ldrb	r3, [r5, #69]	; 0x45
   29ee0:	mov	r2, #0
   29ee4:	mov	r1, #2
   29ee8:	strb	r3, [r6, #69]	; 0x45
   29eec:	ldr	r3, [r5, #8]
   29ef0:	str	r2, [sp, #24]
   29ef4:	mov	r0, r3
   29ef8:	str	r3, [r6, #8]
   29efc:	bl	28228 <__assert_fail@plt+0x15e9c>
   29f00:	mov	r1, #4
   29f04:	str	r0, [r6, #12]
   29f08:	ldr	r0, [r6, #8]
   29f0c:	bl	28228 <__assert_fail@plt+0x15e9c>
   29f10:	ldr	r2, [r6, #8]
   29f14:	ldr	r1, [r5, #12]
   29f18:	lsl	r2, r2, #1
   29f1c:	str	r0, [r6, #16]
   29f20:	ldr	r0, [r6, #12]
   29f24:	bl	11e40 <memcpy@plt>
   29f28:	ldr	r2, [r6, #8]
   29f2c:	ldr	r0, [r6, #16]
   29f30:	ldr	r1, [r5, #16]
   29f34:	lsl	r2, r2, #2
   29f38:	bl	11e40 <memcpy@plt>
   29f3c:	ldr	r3, [sp, #148]	; 0x94
   29f40:	ldr	r4, [sp, #344]	; 0x158
   29f44:	str	r3, [r6]
   29f48:	str	r6, [sp, #148]	; 0x94
   29f4c:	b	28914 <__assert_fail@plt+0x16588>
   29f50:	add	r4, sp, #348	; 0x15c
   29f54:	mov	r3, sl
   29f58:	mov	r2, #0
   29f5c:	mov	r1, r4
   29f60:	bl	1b3b0 <__assert_fail@plt+0x9024>
   29f64:	mov	r8, #0
   29f68:	str	r8, [sp, #244]	; 0xf4
   29f6c:	str	r0, [sp, #240]	; 0xf0
   29f70:	ldrd	r2, [sp, #240]	; 0xf0
   29f74:	mov	r6, r0
   29f78:	mov	r7, r1
   29f7c:	cmp	r3, r1
   29f80:	cmpeq	r2, r0
   29f84:	str	r0, [sp, #116]	; 0x74
   29f88:	beq	29fc8 <__assert_fail@plt+0x17c3c>
   29f8c:	ldr	r1, [pc, #-3776]	; 290d4 <__assert_fail@plt+0x16d48>
   29f90:	mov	r2, #5
   29f94:	mov	r0, r8
   29f98:	bl	11ea0 <dcgettext@plt>
   29f9c:	mov	r2, r6
   29fa0:	mov	r3, r7
   29fa4:	str	r8, [sp]
   29fa8:	mov	r9, r0
   29fac:	ldr	r0, [pc, #-3804]	; 290d8 <__assert_fail@plt+0x16d4c>
   29fb0:	bl	18b24 <__assert_fail@plt+0x6798>
   29fb4:	ldr	r2, [pc, #-3820]	; 290d0 <__assert_fail@plt+0x16d44>
   29fb8:	ldr	r1, [pc, #-3808]	; 290e0 <__assert_fail@plt+0x16d54>
   29fbc:	mov	r3, r0
   29fc0:	mov	r0, r9
   29fc4:	bl	412ac <error@@Base>
   29fc8:	ldr	ip, [sp, #344]	; 0x158
   29fcc:	ldr	r3, [sp, #348]	; 0x15c
   29fd0:	mov	r1, r4
   29fd4:	add	ip, ip, r3
   29fd8:	mov	r2, #0
   29fdc:	mov	r3, sl
   29fe0:	mov	r0, ip
   29fe4:	str	ip, [sp, #344]	; 0x158
   29fe8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   29fec:	mov	r4, #0
   29ff0:	str	r4, [sp, #252]	; 0xfc
   29ff4:	str	r0, [sp, #248]	; 0xf8
   29ff8:	ldrd	r2, [sp, #248]	; 0xf8
   29ffc:	mov	r8, r0
   2a000:	mov	r9, r1
   2a004:	cmp	r3, r1
   2a008:	cmpeq	r2, r0
   2a00c:	beq	2a050 <__assert_fail@plt+0x17cc4>
   2a010:	ldr	r1, [pc, #-3908]	; 290d4 <__assert_fail@plt+0x16d48>
   2a014:	mov	r2, #5
   2a018:	mov	r0, r4
   2a01c:	bl	11ea0 <dcgettext@plt>
   2a020:	mov	r2, r8
   2a024:	mov	r3, r9
   2a028:	str	r4, [sp]
   2a02c:	str	r0, [sp, #24]
   2a030:	ldr	r0, [pc, #-3936]	; 290d8 <__assert_fail@plt+0x16d4c>
   2a034:	bl	18b24 <__assert_fail@plt+0x6798>
   2a038:	ldr	r1, [sp, #24]
   2a03c:	ldr	r2, [pc, #-3944]	; 290dc <__assert_fail@plt+0x16d50>
   2a040:	mov	r3, r0
   2a044:	mov	r0, r1
   2a048:	ldr	r1, [pc, #-3952]	; 290e0 <__assert_fail@plt+0x16d54>
   2a04c:	bl	412ac <error@@Base>
   2a050:	ldr	r3, [r5, #8]
   2a054:	ldr	r4, [sp, #344]	; 0x158
   2a058:	ldr	r2, [sp, #348]	; 0x15c
   2a05c:	cmp	r3, r6
   2a060:	ldr	r3, [sp, #112]	; 0x70
   2a064:	add	r4, r4, r2
   2a068:	str	r4, [sp, #344]	; 0x158
   2a06c:	ldr	r3, [r3]
   2a070:	bhi	2b5c0 <__assert_fail@plt+0x19234>
   2a074:	cmp	r3, #0
   2a078:	beq	2a08c <__assert_fail@plt+0x17d00>
   2a07c:	ldr	r3, [sp, #132]	; 0x84
   2a080:	ldrb	r3, [r3]
   2a084:	cmp	r3, #0
   2a088:	beq	2b5c8 <__assert_fail@plt+0x1923c>
   2a08c:	mov	r1, #0
   2a090:	mov	r0, r6
   2a094:	bl	1888c <__assert_fail@plt+0x6500>
   2a098:	ldr	r4, [sp, #132]	; 0x84
   2a09c:	mov	r1, r4
   2a0a0:	mov	r2, r0
   2a0a4:	ldr	r0, [pc, #-4040]	; 290e4 <__assert_fail@plt+0x16d58>
   2a0a8:	bl	11dbc <printf@plt>
   2a0ac:	mov	r1, #0
   2a0b0:	mov	r0, r8
   2a0b4:	bl	1888c <__assert_fail@plt+0x6500>
   2a0b8:	bl	11fe4 <puts@plt>
   2a0bc:	ldrb	r3, [r4]
   2a0c0:	cmp	r3, #0
   2a0c4:	bne	294d8 <__assert_fail@plt+0x1714c>
   2a0c8:	b	2ba6c <__assert_fail@plt+0x196e0>
   2a0cc:	add	r4, sp, #348	; 0x15c
   2a0d0:	mov	r3, sl
   2a0d4:	mov	r2, #0
   2a0d8:	mov	r1, r4
   2a0dc:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a0e0:	add	r3, sp, #288	; 0x120
   2a0e4:	mov	r9, #0
   2a0e8:	str	r9, [sp, #292]	; 0x124
   2a0ec:	str	r0, [sp, #288]	; 0x120
   2a0f0:	ldrd	r2, [r3]
   2a0f4:	mov	r6, r0
   2a0f8:	mov	r7, r1
   2a0fc:	cmp	r1, r3
   2a100:	cmpeq	r0, r2
   2a104:	mov	r8, r0
   2a108:	beq	2a14c <__assert_fail@plt+0x17dc0>
   2a10c:	ldr	r1, [pc, #3996]	; 2b0b0 <__assert_fail@plt+0x18d24>
   2a110:	mov	r2, #5
   2a114:	mov	r0, r9
   2a118:	bl	11ea0 <dcgettext@plt>
   2a11c:	mov	r2, r6
   2a120:	mov	r3, r7
   2a124:	str	r9, [sp]
   2a128:	str	r0, [sp, #24]
   2a12c:	ldr	r0, [pc, #3968]	; 2b0b4 <__assert_fail@plt+0x18d28>
   2a130:	bl	18b24 <__assert_fail@plt+0x6798>
   2a134:	ldr	r1, [sp, #24]
   2a138:	ldr	r2, [pc, #3836]	; 2b03c <__assert_fail@plt+0x18cb0>
   2a13c:	mov	r3, r0
   2a140:	mov	r0, r1
   2a144:	ldr	r1, [pc, #3952]	; 2b0bc <__assert_fail@plt+0x18d30>
   2a148:	bl	412ac <error@@Base>
   2a14c:	ldr	ip, [sp, #344]	; 0x158
   2a150:	ldr	r3, [sp, #348]	; 0x15c
   2a154:	mov	r1, r4
   2a158:	add	ip, ip, r3
   2a15c:	mov	r0, ip
   2a160:	mov	r3, sl
   2a164:	mov	r2, #1
   2a168:	str	ip, [sp, #344]	; 0x158
   2a16c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a170:	ldr	r3, [sp, #344]	; 0x158
   2a174:	ldr	r2, [sp, #348]	; 0x15c
   2a178:	mov	r1, r6
   2a17c:	add	r3, r3, r2
   2a180:	str	r3, [sp, #344]	; 0x158
   2a184:	mov	r4, r0
   2a188:	mov	r0, r5
   2a18c:	bl	1a56c <__assert_fail@plt+0x81e0>
   2a190:	ldr	r3, [sp, #112]	; 0x70
   2a194:	cmp	r0, #0
   2a198:	blt	2b874 <__assert_fail@plt+0x194e8>
   2a19c:	ldr	r1, [r3]
   2a1a0:	cmp	r1, #0
   2a1a4:	beq	2bb94 <__assert_fail@plt+0x19808>
   2a1a8:	ldr	r3, [r5, #28]
   2a1ac:	ldr	r1, [r5, #12]
   2a1b0:	lsl	r6, r6, #1
   2a1b4:	mul	r3, r4, r3
   2a1b8:	ldr	r2, [r5, #16]
   2a1bc:	mov	r0, #128	; 0x80
   2a1c0:	b	29a28 <__assert_fail@plt+0x1769c>
   2a1c4:	mov	r3, sl
   2a1c8:	mov	r2, #0
   2a1cc:	add	r1, sp, #348	; 0x15c
   2a1d0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a1d4:	mov	r4, #0
   2a1d8:	str	r4, [sp, #228]	; 0xe4
   2a1dc:	str	r0, [sp, #224]	; 0xe0
   2a1e0:	ldrd	r2, [sp, #224]	; 0xe0
   2a1e4:	mov	r6, r0
   2a1e8:	mov	r7, r1
   2a1ec:	cmp	r3, r1
   2a1f0:	cmpeq	r2, r0
   2a1f4:	mov	r8, r0
   2a1f8:	beq	2a238 <__assert_fail@plt+0x17eac>
   2a1fc:	ldr	r1, [pc, #3756]	; 2b0b0 <__assert_fail@plt+0x18d24>
   2a200:	mov	r2, #5
   2a204:	mov	r0, r4
   2a208:	bl	11ea0 <dcgettext@plt>
   2a20c:	mov	r2, r6
   2a210:	mov	r3, r7
   2a214:	str	r4, [sp]
   2a218:	mov	r9, r0
   2a21c:	ldr	r0, [pc, #3728]	; 2b0b4 <__assert_fail@plt+0x18d28>
   2a220:	bl	18b24 <__assert_fail@plt+0x6798>
   2a224:	mov	r2, #8064	; 0x1f80
   2a228:	ldr	r1, [pc, #3724]	; 2b0bc <__assert_fail@plt+0x18d30>
   2a22c:	mov	r3, r0
   2a230:	mov	r0, r9
   2a234:	bl	412ac <error@@Base>
   2a238:	ldr	r3, [r5, #8]
   2a23c:	ldr	r4, [sp, #344]	; 0x158
   2a240:	ldr	r2, [sp, #348]	; 0x15c
   2a244:	cmp	r3, r6
   2a248:	ldr	r3, [sp, #112]	; 0x70
   2a24c:	add	r4, r4, r2
   2a250:	str	r4, [sp, #344]	; 0x158
   2a254:	ldr	r1, [r3]
   2a258:	bhi	2b598 <__assert_fail@plt+0x1920c>
   2a25c:	cmp	r1, #0
   2a260:	beq	2a274 <__assert_fail@plt+0x17ee8>
   2a264:	ldr	r3, [sp, #132]	; 0x84
   2a268:	ldrb	r3, [r3]
   2a26c:	cmp	r3, #0
   2a270:	beq	2b5a0 <__assert_fail@plt+0x19214>
   2a274:	mov	r1, #0
   2a278:	mov	r0, r6
   2a27c:	bl	1888c <__assert_fail@plt+0x6500>
   2a280:	ldr	r4, [sp, #132]	; 0x84
   2a284:	mov	r1, r4
   2a288:	mov	r2, r0
   2a28c:	ldr	r0, [pc, #3708]	; 2b110 <__assert_fail@plt+0x18d84>
   2a290:	bl	11dbc <printf@plt>
   2a294:	ldrb	r3, [r4]
   2a298:	cmp	r3, #0
   2a29c:	bne	294d8 <__assert_fail@plt+0x1714c>
   2a2a0:	b	2ba8c <__assert_fail@plt+0x19700>
   2a2a4:	mov	r3, sl
   2a2a8:	mov	r2, #0
   2a2ac:	add	r1, sp, #348	; 0x15c
   2a2b0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a2b4:	mov	r4, #0
   2a2b8:	str	r4, [sp, #220]	; 0xdc
   2a2bc:	str	r0, [sp, #216]	; 0xd8
   2a2c0:	ldrd	r2, [sp, #216]	; 0xd8
   2a2c4:	mov	r6, r0
   2a2c8:	mov	r7, r1
   2a2cc:	cmp	r3, r1
   2a2d0:	cmpeq	r2, r0
   2a2d4:	beq	2a314 <__assert_fail@plt+0x17f88>
   2a2d8:	ldr	r1, [pc, #3536]	; 2b0b0 <__assert_fail@plt+0x18d24>
   2a2dc:	mov	r2, #5
   2a2e0:	mov	r0, r4
   2a2e4:	bl	11ea0 <dcgettext@plt>
   2a2e8:	mov	r2, r6
   2a2ec:	mov	r3, r7
   2a2f0:	str	r4, [sp]
   2a2f4:	mov	r8, r0
   2a2f8:	ldr	r0, [pc, #3508]	; 2b0b4 <__assert_fail@plt+0x18d28>
   2a2fc:	bl	18b24 <__assert_fail@plt+0x6798>
   2a300:	ldr	r2, [pc, #3384]	; 2b040 <__assert_fail@plt+0x18cb4>
   2a304:	ldr	r1, [pc, #3504]	; 2b0bc <__assert_fail@plt+0x18d30>
   2a308:	mov	r3, r0
   2a30c:	mov	r0, r8
   2a310:	bl	412ac <error@@Base>
   2a314:	ldr	r3, [r5, #8]
   2a318:	ldr	r4, [sp, #344]	; 0x158
   2a31c:	ldr	r2, [sp, #348]	; 0x15c
   2a320:	cmp	r3, r6
   2a324:	ldr	r3, [sp, #112]	; 0x70
   2a328:	add	r4, r4, r2
   2a32c:	str	r4, [sp, #344]	; 0x158
   2a330:	ldr	r1, [r3]
   2a334:	bhi	2b558 <__assert_fail@plt+0x191cc>
   2a338:	cmp	r1, #0
   2a33c:	beq	2a350 <__assert_fail@plt+0x17fc4>
   2a340:	ldr	r3, [sp, #132]	; 0x84
   2a344:	ldrb	r3, [r3]
   2a348:	cmp	r3, #0
   2a34c:	beq	2b560 <__assert_fail@plt+0x191d4>
   2a350:	mov	r1, #0
   2a354:	mov	r0, r6
   2a358:	bl	1888c <__assert_fail@plt+0x6500>
   2a35c:	ldr	r4, [sp, #132]	; 0x84
   2a360:	mov	r1, r4
   2a364:	mov	r2, r0
   2a368:	ldr	r0, [pc, #3508]	; 2b124 <__assert_fail@plt+0x18d98>
   2a36c:	bl	11dbc <printf@plt>
   2a370:	ldrb	r3, [r4]
   2a374:	ldr	r4, [sp, #344]	; 0x158
   2a378:	cmp	r3, #0
   2a37c:	bne	295c8 <__assert_fail@plt+0x1723c>
   2a380:	b	2b560 <__assert_fail@plt+0x191d4>
   2a384:	mov	r3, sl
   2a388:	mov	r2, #0
   2a38c:	add	r1, sp, #348	; 0x15c
   2a390:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a394:	ldr	ip, [r5, #28]
   2a398:	ldr	r4, [sp, #344]	; 0x158
   2a39c:	ldr	lr, [sp, #348]	; 0x15c
   2a3a0:	asr	r7, ip, #31
   2a3a4:	add	r4, r4, lr
   2a3a8:	ldr	lr, [sp, #112]	; 0x70
   2a3ac:	str	r4, [sp, #344]	; 0x158
   2a3b0:	ldr	lr, [lr]
   2a3b4:	cmp	lr, #0
   2a3b8:	str	lr, [sp, #24]
   2a3bc:	mul	r1, ip, r1
   2a3c0:	umull	r2, r3, ip, r0
   2a3c4:	mla	r1, r0, r7, r1
   2a3c8:	add	r3, r1, r3
   2a3cc:	strd	r2, [r5, #56]	; 0x38
   2a3d0:	bne	295c8 <__assert_fail@plt+0x1723c>
   2a3d4:	mov	r1, r2
   2a3d8:	ldr	r0, [pc, #3172]	; 2b044 <__assert_fail@plt+0x18cb8>
   2a3dc:	bl	11dbc <printf@plt>
   2a3e0:	ldr	r4, [sp, #344]	; 0x158
   2a3e4:	b	28914 <__assert_fail@plt+0x16588>
   2a3e8:	add	r4, sp, #348	; 0x15c
   2a3ec:	mov	r3, sl
   2a3f0:	mov	r2, #0
   2a3f4:	mov	r1, r4
   2a3f8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a3fc:	add	r3, sp, #304	; 0x130
   2a400:	mov	r8, #0
   2a404:	str	r8, [sp, #308]	; 0x134
   2a408:	str	r0, [sp, #304]	; 0x130
   2a40c:	ldrd	r2, [r3]
   2a410:	mov	r6, r0
   2a414:	mov	r7, r1
   2a418:	cmp	r3, r1
   2a41c:	cmpeq	r2, r0
   2a420:	str	r0, [r5, #48]	; 0x30
   2a424:	beq	2a464 <__assert_fail@plt+0x180d8>
   2a428:	ldr	r1, [pc, #3200]	; 2b0b0 <__assert_fail@plt+0x18d24>
   2a42c:	mov	r2, #5
   2a430:	mov	r0, r8
   2a434:	bl	11ea0 <dcgettext@plt>
   2a438:	mov	r2, r6
   2a43c:	mov	r3, r7
   2a440:	str	r8, [sp]
   2a444:	mov	r9, r0
   2a448:	ldr	r0, [pc, #3172]	; 2b0b4 <__assert_fail@plt+0x18d28>
   2a44c:	bl	18b24 <__assert_fail@plt+0x6798>
   2a450:	ldr	r2, [pc, #3056]	; 2b048 <__assert_fail@plt+0x18cbc>
   2a454:	ldr	r1, [pc, #3168]	; 2b0bc <__assert_fail@plt+0x18d30>
   2a458:	mov	r3, r0
   2a45c:	mov	r0, r9
   2a460:	bl	412ac <error@@Base>
   2a464:	ldr	ip, [sp, #344]	; 0x158
   2a468:	ldr	r3, [sp, #348]	; 0x15c
   2a46c:	mov	r1, r4
   2a470:	add	ip, ip, r3
   2a474:	mov	r0, ip
   2a478:	mov	r3, sl
   2a47c:	mov	r2, #0
   2a480:	str	ip, [sp, #344]	; 0x158
   2a484:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a488:	ldr	ip, [r5, #28]
   2a48c:	ldr	r4, [sp, #344]	; 0x158
   2a490:	ldr	lr, [sp, #348]	; 0x15c
   2a494:	asr	r7, ip, #31
   2a498:	add	r4, r4, lr
   2a49c:	ldr	lr, [sp, #112]	; 0x70
   2a4a0:	str	r4, [sp, #344]	; 0x158
   2a4a4:	ldr	lr, [lr]
   2a4a8:	str	lr, [sp, #24]
   2a4ac:	cmp	lr, #0
   2a4b0:	mov	lr, #0
   2a4b4:	strb	lr, [r5, #69]	; 0x45
   2a4b8:	strne	lr, [sp, #24]
   2a4bc:	mul	r1, ip, r1
   2a4c0:	umull	r2, r3, ip, r0
   2a4c4:	mla	r1, r0, r7, r1
   2a4c8:	add	r3, r1, r3
   2a4cc:	strd	r2, [r5, #56]	; 0x38
   2a4d0:	bne	28914 <__assert_fail@plt+0x16588>
   2a4d4:	ldr	r1, [sp, #24]
   2a4d8:	ldr	r0, [r5, #48]	; 0x30
   2a4dc:	bl	1888c <__assert_fail@plt+0x6500>
   2a4e0:	ldr	r2, [r5, #56]	; 0x38
   2a4e4:	mov	r1, r0
   2a4e8:	ldr	r0, [pc, #2908]	; 2b04c <__assert_fail@plt+0x18cc0>
   2a4ec:	bl	11dbc <printf@plt>
   2a4f0:	ldr	r4, [sp, #344]	; 0x158
   2a4f4:	b	28914 <__assert_fail@plt+0x16588>
   2a4f8:	add	r4, sp, #348	; 0x15c
   2a4fc:	mov	r3, sl
   2a500:	mov	r2, #0
   2a504:	mov	r1, r4
   2a508:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a50c:	mov	r8, #0
   2a510:	str	r8, [sp, #204]	; 0xcc
   2a514:	str	r0, [sp, #200]	; 0xc8
   2a518:	ldrd	r2, [sp, #200]	; 0xc8
   2a51c:	mov	r6, r0
   2a520:	mov	r7, r1
   2a524:	cmp	r3, r1
   2a528:	cmpeq	r2, r0
   2a52c:	str	r0, [sp, #116]	; 0x74
   2a530:	beq	2a570 <__assert_fail@plt+0x181e4>
   2a534:	ldr	r1, [pc, #2932]	; 2b0b0 <__assert_fail@plt+0x18d24>
   2a538:	mov	r2, #5
   2a53c:	mov	r0, r8
   2a540:	bl	11ea0 <dcgettext@plt>
   2a544:	mov	r2, r6
   2a548:	mov	r3, r7
   2a54c:	str	r8, [sp]
   2a550:	mov	r9, r0
   2a554:	ldr	r0, [pc, #2904]	; 2b0b4 <__assert_fail@plt+0x18d28>
   2a558:	bl	18b24 <__assert_fail@plt+0x6798>
   2a55c:	ldr	r2, [pc, #2796]	; 2b050 <__assert_fail@plt+0x18cc4>
   2a560:	ldr	r1, [pc, #2900]	; 2b0bc <__assert_fail@plt+0x18d30>
   2a564:	mov	r3, r0
   2a568:	mov	r0, r9
   2a56c:	bl	412ac <error@@Base>
   2a570:	ldr	ip, [sp, #344]	; 0x158
   2a574:	ldr	r3, [sp, #348]	; 0x15c
   2a578:	mov	r1, r4
   2a57c:	add	ip, ip, r3
   2a580:	mov	r2, #0
   2a584:	mov	r3, sl
   2a588:	mov	r0, ip
   2a58c:	str	ip, [sp, #344]	; 0x158
   2a590:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a594:	mov	r4, #0
   2a598:	str	r4, [sp, #212]	; 0xd4
   2a59c:	str	r0, [sp, #208]	; 0xd0
   2a5a0:	ldrd	r2, [sp, #208]	; 0xd0
   2a5a4:	mov	r8, r0
   2a5a8:	mov	r9, r1
   2a5ac:	cmp	r3, r1
   2a5b0:	cmpeq	r2, r0
   2a5b4:	beq	2a5f8 <__assert_fail@plt+0x1826c>
   2a5b8:	ldr	r1, [pc, #2800]	; 2b0b0 <__assert_fail@plt+0x18d24>
   2a5bc:	mov	r2, #5
   2a5c0:	mov	r0, r4
   2a5c4:	bl	11ea0 <dcgettext@plt>
   2a5c8:	mov	r2, r8
   2a5cc:	mov	r3, r9
   2a5d0:	str	r4, [sp]
   2a5d4:	str	r0, [sp, #24]
   2a5d8:	ldr	r0, [pc, #2772]	; 2b0b4 <__assert_fail@plt+0x18d28>
   2a5dc:	bl	18b24 <__assert_fail@plt+0x6798>
   2a5e0:	ldr	r1, [sp, #24]
   2a5e4:	ldr	r2, [pc, #2664]	; 2b054 <__assert_fail@plt+0x18cc8>
   2a5e8:	mov	r3, r0
   2a5ec:	mov	r0, r1
   2a5f0:	ldr	r1, [pc, #2756]	; 2b0bc <__assert_fail@plt+0x18d30>
   2a5f4:	bl	412ac <error@@Base>
   2a5f8:	ldr	r3, [r5, #8]
   2a5fc:	ldr	r4, [sp, #344]	; 0x158
   2a600:	ldr	r2, [sp, #348]	; 0x15c
   2a604:	cmp	r3, r6
   2a608:	ldr	r3, [sp, #112]	; 0x70
   2a60c:	add	r4, r4, r2
   2a610:	str	r4, [sp, #344]	; 0x158
   2a614:	ldr	r1, [r3]
   2a618:	bhi	2b520 <__assert_fail@plt+0x19194>
   2a61c:	cmp	r1, #0
   2a620:	beq	2a634 <__assert_fail@plt+0x182a8>
   2a624:	ldr	r3, [sp, #132]	; 0x84
   2a628:	ldrb	r3, [r3]
   2a62c:	cmp	r3, #0
   2a630:	beq	2b528 <__assert_fail@plt+0x1919c>
   2a634:	mov	r1, #0
   2a638:	mov	r0, r6
   2a63c:	bl	1888c <__assert_fail@plt+0x6500>
   2a640:	ldr	r3, [r5, #28]
   2a644:	ldr	r4, [sp, #132]	; 0x84
   2a648:	mul	r3, r3, r8
   2a64c:	mov	r1, r4
   2a650:	mov	r2, r0
   2a654:	ldr	r0, [pc, #2764]	; 2b128 <__assert_fail@plt+0x18d9c>
   2a658:	bl	11dbc <printf@plt>
   2a65c:	ldrb	r3, [r4]
   2a660:	cmp	r3, #0
   2a664:	bne	294d8 <__assert_fail@plt+0x1714c>
   2a668:	ldr	r4, [sp, #344]	; 0x158
   2a66c:	b	2b528 <__assert_fail@plt+0x1919c>
   2a670:	mov	r3, sl
   2a674:	mov	r2, #0
   2a678:	add	r1, sp, #348	; 0x15c
   2a67c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a680:	mov	r4, #0
   2a684:	str	r4, [sp, #164]	; 0xa4
   2a688:	str	r0, [sp, #160]	; 0xa0
   2a68c:	ldrd	r2, [sp, #160]	; 0xa0
   2a690:	mov	r6, r0
   2a694:	mov	r7, r1
   2a698:	cmp	r3, r1
   2a69c:	cmpeq	r2, r0
   2a6a0:	beq	2a6e0 <__assert_fail@plt+0x18354>
   2a6a4:	ldr	r1, [pc, #2564]	; 2b0b0 <__assert_fail@plt+0x18d24>
   2a6a8:	mov	r2, #5
   2a6ac:	mov	r0, r4
   2a6b0:	bl	11ea0 <dcgettext@plt>
   2a6b4:	mov	r2, r6
   2a6b8:	mov	r3, r7
   2a6bc:	str	r4, [sp]
   2a6c0:	mov	r8, r0
   2a6c4:	ldr	r0, [pc, #2536]	; 2b0b4 <__assert_fail@plt+0x18d28>
   2a6c8:	bl	18b24 <__assert_fail@plt+0x6798>
   2a6cc:	ldr	r2, [pc, #2436]	; 2b058 <__assert_fail@plt+0x18ccc>
   2a6d0:	ldr	r1, [pc, #2532]	; 2b0bc <__assert_fail@plt+0x18d30>
   2a6d4:	mov	r3, r0
   2a6d8:	mov	r0, r8
   2a6dc:	bl	412ac <error@@Base>
   2a6e0:	ldr	r4, [sp, #344]	; 0x158
   2a6e4:	ldr	r3, [sp, #348]	; 0x15c
   2a6e8:	add	r4, r4, r3
   2a6ec:	cmp	r4, fp
   2a6f0:	str	r4, [sp, #344]	; 0x158
   2a6f4:	bcs	2b350 <__assert_fail@plt+0x18fc4>
   2a6f8:	sub	r3, fp, r4
   2a6fc:	cmp	r3, r6
   2a700:	bcc	2b350 <__assert_fail@plt+0x18fc4>
   2a704:	ldr	r3, [sp, #112]	; 0x70
   2a708:	ldr	r8, [r3]
   2a70c:	cmp	r8, #0
   2a710:	beq	2bca4 <__assert_fail@plt+0x19918>
   2a714:	mov	r3, #1
   2a718:	add	r4, r4, r6
   2a71c:	strb	r3, [r5, #69]	; 0x45
   2a720:	mov	r3, #0
   2a724:	str	r4, [sp, #344]	; 0x158
   2a728:	str	r3, [sp, #24]
   2a72c:	b	28914 <__assert_fail@plt+0x16588>
   2a730:	add	r4, sp, #348	; 0x15c
   2a734:	mov	r3, sl
   2a738:	mov	r2, #0
   2a73c:	mov	r1, r4
   2a740:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a744:	add	r3, sp, #272	; 0x110
   2a748:	mov	r6, #0
   2a74c:	str	r6, [sp, #276]	; 0x114
   2a750:	str	r0, [sp, #272]	; 0x110
   2a754:	ldrd	r2, [r3]
   2a758:	mov	r8, r0
   2a75c:	mov	r9, r1
   2a760:	cmp	r1, r3
   2a764:	cmpeq	r0, r2
   2a768:	beq	2a7a8 <__assert_fail@plt+0x1841c>
   2a76c:	ldr	r1, [pc, #2364]	; 2b0b0 <__assert_fail@plt+0x18d24>
   2a770:	mov	r2, #5
   2a774:	mov	r0, r6
   2a778:	bl	11ea0 <dcgettext@plt>
   2a77c:	mov	r2, r8
   2a780:	mov	r3, r9
   2a784:	str	r6, [sp]
   2a788:	mov	r7, r0
   2a78c:	ldr	r0, [pc, #2336]	; 2b0b4 <__assert_fail@plt+0x18d28>
   2a790:	bl	18b24 <__assert_fail@plt+0x6798>
   2a794:	ldr	r2, [pc, #2240]	; 2b05c <__assert_fail@plt+0x18cd0>
   2a798:	ldr	r1, [pc, #2332]	; 2b0bc <__assert_fail@plt+0x18d30>
   2a79c:	mov	r3, r0
   2a7a0:	mov	r0, r7
   2a7a4:	bl	412ac <error@@Base>
   2a7a8:	ldr	ip, [sp, #344]	; 0x158
   2a7ac:	ldr	r3, [sp, #348]	; 0x15c
   2a7b0:	mov	r1, r4
   2a7b4:	add	ip, ip, r3
   2a7b8:	mov	r2, #0
   2a7bc:	mov	r3, sl
   2a7c0:	mov	r0, ip
   2a7c4:	str	ip, [sp, #344]	; 0x158
   2a7c8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a7cc:	mov	r4, #0
   2a7d0:	str	r4, [sp, #172]	; 0xac
   2a7d4:	str	r0, [sp, #168]	; 0xa8
   2a7d8:	ldrd	r2, [sp, #168]	; 0xa8
   2a7dc:	mov	r6, r0
   2a7e0:	mov	r7, r1
   2a7e4:	cmp	r1, r3
   2a7e8:	cmpeq	r0, r2
   2a7ec:	beq	2a830 <__assert_fail@plt+0x184a4>
   2a7f0:	ldr	r1, [pc, #2232]	; 2b0b0 <__assert_fail@plt+0x18d24>
   2a7f4:	mov	r2, #5
   2a7f8:	mov	r0, r4
   2a7fc:	bl	11ea0 <dcgettext@plt>
   2a800:	mov	r2, r6
   2a804:	mov	r3, r7
   2a808:	str	r4, [sp]
   2a80c:	str	r0, [sp, #24]
   2a810:	ldr	r0, [pc, #2204]	; 2b0b4 <__assert_fail@plt+0x18d28>
   2a814:	bl	18b24 <__assert_fail@plt+0x6798>
   2a818:	ldr	r1, [sp, #24]
   2a81c:	ldr	r2, [pc, #2108]	; 2b060 <__assert_fail@plt+0x18cd4>
   2a820:	mov	r3, r0
   2a824:	mov	r0, r1
   2a828:	ldr	r1, [pc, #2188]	; 2b0bc <__assert_fail@plt+0x18d30>
   2a82c:	bl	412ac <error@@Base>
   2a830:	ldr	r3, [sp, #344]	; 0x158
   2a834:	ldr	r2, [sp, #348]	; 0x15c
   2a838:	ldr	r1, [r5, #8]
   2a83c:	ldr	r0, [pc, #2292]	; 2b138 <__assert_fail@plt+0x18dac>
   2a840:	add	r3, r3, r2
   2a844:	cmp	r1, r8
   2a848:	ldr	r2, [sp, #132]	; 0x84
   2a84c:	movhi	r2, r0
   2a850:	adds	r4, r3, r6
   2a854:	str	r2, [sp, #24]
   2a858:	movcs	r2, #1
   2a85c:	movcc	r2, #0
   2a860:	cmp	fp, r4
   2a864:	orrcc	r2, r2, #1
   2a868:	cmp	r3, fp
   2a86c:	orrcs	r2, r2, #1
   2a870:	cmp	r2, #0
   2a874:	str	r3, [sp, #344]	; 0x158
   2a878:	beq	2bae4 <__assert_fail@plt+0x19758>
   2a87c:	ldr	r1, [pc, #2016]	; 2b064 <__assert_fail@plt+0x18cd8>
   2a880:	mov	r2, #5
   2a884:	mov	r0, #0
   2a888:	bl	11ea0 <dcgettext@plt>
   2a88c:	mov	r1, r6
   2a890:	bl	11dbc <printf@plt>
   2a894:	mov	r3, #0
   2a898:	str	r3, [sp, #24]
   2a89c:	ldr	r4, [sp, #344]	; 0x158
   2a8a0:	b	28914 <__assert_fail@plt+0x16588>
   2a8a4:	mov	r3, sl
   2a8a8:	mov	r2, #0
   2a8ac:	add	r1, sp, #348	; 0x15c
   2a8b0:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a8b4:	ldr	r2, [sp, #112]	; 0x70
   2a8b8:	ldr	r4, [sp, #344]	; 0x158
   2a8bc:	ldr	r3, [sp, #348]	; 0x15c
   2a8c0:	ldr	r2, [r2]
   2a8c4:	add	r4, r4, r3
   2a8c8:	cmp	r2, #0
   2a8cc:	str	r2, [sp, #24]
   2a8d0:	str	r4, [sp, #344]	; 0x158
   2a8d4:	str	r0, [r5, #56]	; 0x38
   2a8d8:	str	r1, [r5, #60]	; 0x3c
   2a8dc:	bne	295c8 <__assert_fail@plt+0x1723c>
   2a8e0:	mov	r1, r0
   2a8e4:	ldr	r0, [pc, #1916]	; 2b068 <__assert_fail@plt+0x18cdc>
   2a8e8:	bl	11dbc <printf@plt>
   2a8ec:	ldr	r4, [sp, #344]	; 0x158
   2a8f0:	b	28914 <__assert_fail@plt+0x16588>
   2a8f4:	mov	r3, sl
   2a8f8:	mov	r2, #0
   2a8fc:	add	r1, sp, #348	; 0x15c
   2a900:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2a904:	mov	r4, #0
   2a908:	str	r4, [sp, #236]	; 0xec
   2a90c:	str	r0, [sp, #232]	; 0xe8
   2a910:	ldrd	r2, [sp, #232]	; 0xe8
   2a914:	mov	r6, r0
   2a918:	mov	r7, r1
   2a91c:	cmp	r3, r1
   2a920:	cmpeq	r2, r0
   2a924:	mov	r8, r0
   2a928:	beq	2a968 <__assert_fail@plt+0x185dc>
   2a92c:	ldr	r1, [pc, #1916]	; 2b0b0 <__assert_fail@plt+0x18d24>
   2a930:	mov	r2, #5
   2a934:	mov	r0, r4
   2a938:	bl	11ea0 <dcgettext@plt>
   2a93c:	mov	r2, r6
   2a940:	mov	r3, r7
   2a944:	str	r4, [sp]
   2a948:	mov	r9, r0
   2a94c:	ldr	r0, [pc, #1888]	; 2b0b4 <__assert_fail@plt+0x18d28>
   2a950:	bl	18b24 <__assert_fail@plt+0x6798>
   2a954:	ldr	r2, [pc, #1808]	; 2b06c <__assert_fail@plt+0x18ce0>
   2a958:	ldr	r1, [pc, #1884]	; 2b0bc <__assert_fail@plt+0x18d30>
   2a95c:	mov	r3, r0
   2a960:	mov	r0, r9
   2a964:	bl	412ac <error@@Base>
   2a968:	ldr	r3, [r5, #8]
   2a96c:	ldr	r4, [sp, #344]	; 0x158
   2a970:	ldr	r2, [sp, #348]	; 0x15c
   2a974:	cmp	r3, r6
   2a978:	ldr	r3, [sp, #112]	; 0x70
   2a97c:	add	r4, r4, r2
   2a980:	str	r4, [sp, #344]	; 0x158
   2a984:	ldr	r1, [r3]
   2a988:	bhi	2b494 <__assert_fail@plt+0x19108>
   2a98c:	cmp	r1, #0
   2a990:	beq	2a9a4 <__assert_fail@plt+0x18618>
   2a994:	ldr	r3, [sp, #132]	; 0x84
   2a998:	ldrb	r3, [r3]
   2a99c:	cmp	r3, #0
   2a9a0:	beq	2b49c <__assert_fail@plt+0x19110>
   2a9a4:	mov	r1, #0
   2a9a8:	mov	r0, r6
   2a9ac:	bl	1888c <__assert_fail@plt+0x6500>
   2a9b0:	ldr	r4, [sp, #132]	; 0x84
   2a9b4:	mov	r1, r4
   2a9b8:	mov	r2, r0
   2a9bc:	ldr	r0, [pc, #1904]	; 2b134 <__assert_fail@plt+0x18da8>
   2a9c0:	bl	11dbc <printf@plt>
   2a9c4:	ldrb	r3, [r4]
   2a9c8:	cmp	r3, #0
   2a9cc:	bne	294d8 <__assert_fail@plt+0x1714c>
   2a9d0:	ldr	r4, [sp, #344]	; 0x158
   2a9d4:	b	2b49c <__assert_fail@plt+0x19110>
   2a9d8:	ldr	r2, [sp, #144]	; 0x90
   2a9dc:	ldrb	r1, [r5, #68]	; 0x44
   2a9e0:	add	r3, r2, #24
   2a9e4:	str	fp, [sp]
   2a9e8:	add	r2, r2, #16
   2a9ec:	add	r0, sp, #344	; 0x158
   2a9f0:	bl	1a418 <__assert_fail@plt+0x808c>
   2a9f4:	ldr	r3, [sp, #112]	; 0x70
   2a9f8:	mov	r6, r0
   2a9fc:	ldr	r0, [r3]
   2aa00:	mov	r7, r1
   2aa04:	cmp	r0, #0
   2aa08:	beq	2b6b0 <__assert_fail@plt+0x19324>
   2aa0c:	add	r2, sp, #352	; 0x160
   2aa10:	add	r1, sp, #360	; 0x168
   2aa14:	mov	r0, r5
   2aa18:	bl	18ed8 <__assert_fail@plt+0x6b4c>
   2aa1c:	strd	r6, [r5, #32]
   2aa20:	b	294d8 <__assert_fail@plt+0x1714c>
   2aa24:	add	r4, r4, #3
   2aa28:	cmp	fp, r4
   2aa2c:	bhi	2b690 <__assert_fail@plt+0x19304>
   2aa30:	cmp	r0, fp
   2aa34:	bcs	2aa48 <__assert_fail@plt+0x186bc>
   2aa38:	sub	r1, fp, r0
   2aa3c:	sub	r3, r1, #1
   2aa40:	cmp	r3, #7
   2aa44:	bls	2b694 <__assert_fail@plt+0x19308>
   2aa48:	mov	r6, #0
   2aa4c:	mov	r4, r6
   2aa50:	ldr	r3, [sp, #112]	; 0x70
   2aa54:	add	r0, r0, #2
   2aa58:	str	r0, [sp, #344]	; 0x158
   2aa5c:	ldr	ip, [r3]
   2aa60:	cmp	ip, #0
   2aa64:	bne	2abe8 <__assert_fail@plt+0x1885c>
   2aa68:	ldr	r1, [r5, #24]
   2aa6c:	ldrd	r2, [r5, #32]
   2aa70:	ldrb	lr, [r5, #70]	; 0x46
   2aa74:	umull	r8, r9, r1, r6
   2aa78:	str	lr, [sp]
   2aa7c:	mla	r9, r1, r4, r9
   2aa80:	adds	r2, r8, r2
   2aa84:	mov	r0, ip
   2aa88:	adc	r3, r9, r3
   2aa8c:	mul	r7, r6, r1
   2aa90:	bl	18b24 <__assert_fail@plt+0x6798>
   2aa94:	mov	r1, r7
   2aa98:	mov	r2, r0
   2aa9c:	ldr	r0, [pc, #1484]	; 2b070 <__assert_fail@plt+0x18ce4>
   2aaa0:	bl	11dbc <printf@plt>
   2aaa4:	b	29764 <__assert_fail@plt+0x173d8>
   2aaa8:	ldr	r3, [r5, #8]
   2aaac:	ldr	r2, [sp, #112]	; 0x70
   2aab0:	cmp	r3, r8
   2aab4:	ldr	r1, [r2]
   2aab8:	bhi	2b4bc <__assert_fail@plt+0x19130>
   2aabc:	cmp	r1, #0
   2aac0:	beq	2aad4 <__assert_fail@plt+0x18748>
   2aac4:	ldr	r3, [sp, #132]	; 0x84
   2aac8:	ldrb	r3, [r3]
   2aacc:	cmp	r3, #0
   2aad0:	beq	2b4c4 <__assert_fail@plt+0x19138>
   2aad4:	mov	r1, #0
   2aad8:	mov	r0, r8
   2aadc:	bl	1888c <__assert_fail@plt+0x6500>
   2aae0:	ldr	r4, [sp, #132]	; 0x84
   2aae4:	mov	r1, r4
   2aae8:	mov	r2, r0
   2aaec:	ldr	r0, [pc, #1556]	; 2b108 <__assert_fail@plt+0x18d7c>
   2aaf0:	bl	11dbc <printf@plt>
   2aaf4:	ldrb	r3, [r4]
   2aaf8:	cmp	r3, #0
   2aafc:	bne	294d8 <__assert_fail@plt+0x1714c>
   2ab00:	b	2b9e0 <__assert_fail@plt+0x19654>
   2ab04:	add	r4, r4, #2
   2ab08:	cmp	sl, r4
   2ab0c:	bhi	2b500 <__assert_fail@plt+0x19174>
   2ab10:	cmp	r0, sl
   2ab14:	bcs	2ab28 <__assert_fail@plt+0x1879c>
   2ab18:	sub	r1, sl, r0
   2ab1c:	sub	r3, r1, #1
   2ab20:	cmp	r3, #7
   2ab24:	bls	2b504 <__assert_fail@plt+0x19178>
   2ab28:	mov	r6, #0
   2ab2c:	mov	r4, r6
   2ab30:	ldr	r3, [sp, #112]	; 0x70
   2ab34:	add	r0, r0, #1
   2ab38:	str	r0, [sp, #344]	; 0x158
   2ab3c:	ldr	ip, [r3]
   2ab40:	cmp	ip, #0
   2ab44:	bne	2abe8 <__assert_fail@plt+0x1885c>
   2ab48:	ldr	r1, [r5, #24]
   2ab4c:	ldrd	r2, [r5, #32]
   2ab50:	ldrb	lr, [r5, #70]	; 0x46
   2ab54:	umull	r8, r9, r1, r6
   2ab58:	str	lr, [sp]
   2ab5c:	mla	r9, r1, r4, r9
   2ab60:	adds	r2, r8, r2
   2ab64:	mov	r0, ip
   2ab68:	adc	r3, r9, r3
   2ab6c:	mul	r7, r6, r1
   2ab70:	bl	18b24 <__assert_fail@plt+0x6798>
   2ab74:	mov	r1, r7
   2ab78:	mov	r2, r0
   2ab7c:	ldr	r0, [pc, #1264]	; 2b074 <__assert_fail@plt+0x18ce8>
   2ab80:	bl	11dbc <printf@plt>
   2ab84:	b	29764 <__assert_fail@plt+0x173d8>
   2ab88:	sub	r2, r3, #28
   2ab8c:	cmp	r2, #35	; 0x23
   2ab90:	str	r3, [sp, #24]
   2ab94:	mov	r2, #5
   2ab98:	bhi	2b5d8 <__assert_fail@plt+0x1924c>
   2ab9c:	ldr	r1, [pc, #1236]	; 2b078 <__assert_fail@plt+0x18cec>
   2aba0:	mov	r0, #0
   2aba4:	bl	11ea0 <dcgettext@plt>
   2aba8:	ldr	r3, [sp, #24]
   2abac:	mov	r1, r3
   2abb0:	bl	11dbc <printf@plt>
   2abb4:	mov	r3, #0
   2abb8:	str	fp, [sp, #344]	; 0x158
   2abbc:	mov	r4, fp
   2abc0:	str	r3, [sp, #24]
   2abc4:	b	28914 <__assert_fail@plt+0x16588>
   2abc8:	mov	r2, #5
   2abcc:	ldr	r1, [pc, #1192]	; 2b07c <__assert_fail@plt+0x18cf0>
   2abd0:	mov	r0, #0
   2abd4:	bl	11ea0 <dcgettext@plt>
   2abd8:	mov	r1, r6
   2abdc:	bl	417d0 <warn@@Base>
   2abe0:	str	fp, [sp, #344]	; 0x158
   2abe4:	b	28be8 <__assert_fail@plt+0x1685c>
   2abe8:	add	r2, sp, #352	; 0x160
   2abec:	add	r1, sp, #360	; 0x168
   2abf0:	mov	r0, r5
   2abf4:	bl	18ed8 <__assert_fail@plt+0x6b4c>
   2abf8:	b	29764 <__assert_fail@plt+0x173d8>
   2abfc:	orrs	r3, r2, r3
   2ac00:	beq	284ac <__assert_fail@plt+0x16120>
   2ac04:	lsl	r3, r6, #3
   2ac08:	sub	r2, r3, #1
   2ac0c:	mov	r3, #1
   2ac10:	lsl	r3, r3, r2
   2ac14:	ldr	r2, [sp, #120]	; 0x78
   2ac18:	sub	r4, r3, #4
   2ac1c:	eor	r3, r3, r2
   2ac20:	sub	r3, r4, r3
   2ac24:	add	r4, r0, r3
   2ac28:	cmp	r4, r9
   2ac2c:	bhi	2ae84 <__assert_fail@plt+0x18af8>
   2ac30:	ldr	r5, [sp, #328]	; 0x148
   2ac34:	cmp	r5, #0
   2ac38:	str	r5, [sp, #356]	; 0x164
   2ac3c:	beq	2ac6c <__assert_fail@plt+0x188e0>
   2ac40:	ldr	r3, [r5, #4]
   2ac44:	cmp	r4, r3
   2ac48:	bne	2ac5c <__assert_fail@plt+0x188d0>
   2ac4c:	b	2be70 <__assert_fail@plt+0x19ae4>
   2ac50:	ldr	r3, [r5, #4]
   2ac54:	cmp	r3, r4
   2ac58:	beq	2b160 <__assert_fail@plt+0x18dd4>
   2ac5c:	ldr	r5, [r5]
   2ac60:	cmp	r5, #0
   2ac64:	bne	2ac50 <__assert_fail@plt+0x188c4>
   2ac68:	str	r5, [sp, #356]	; 0x164
   2ac6c:	mov	r2, #72	; 0x48
   2ac70:	mov	r1, #0
   2ac74:	ldr	r0, [pc, #1160]	; 2b104 <__assert_fail@plt+0x18d78>
   2ac78:	bl	12110 <memset@plt>
   2ac7c:	ldrd	r2, [sp, #120]	; 0x78
   2ac80:	str	r6, [sp]
   2ac84:	mov	r0, #0
   2ac88:	bl	18b24 <__assert_fail@plt+0x6798>
   2ac8c:	ldr	r3, [sp, #128]	; 0x80
   2ac90:	ldr	r4, [pc, #1036]	; 2b0a4 <__assert_fail@plt+0x18d18>
   2ac94:	sub	r8, r9, r3
   2ac98:	mov	r2, r8
   2ac9c:	ldr	r7, [pc, #1120]	; 2b104 <__assert_fail@plt+0x18d78>
   2aca0:	mov	r1, r0
   2aca4:	ldr	r0, [pc, #980]	; 2b080 <__assert_fail@plt+0x18cf4>
   2aca8:	bl	417d0 <warn@@Base>
   2acac:	mov	r3, #0
   2acb0:	mov	r0, #2
   2acb4:	str	r3, [r4, #1736]	; 0x6c8
   2acb8:	bl	11f3c <xmalloc@plt>
   2acbc:	str	r0, [r4, #1740]	; 0x6cc
   2acc0:	mov	r0, #4
   2acc4:	bl	11f3c <xmalloc@plt>
   2acc8:	ldr	r1, [sp, #352]	; 0x160
   2accc:	cmp	r1, #0
   2acd0:	subne	r1, r1, #1
   2acd4:	str	r0, [r4, #1744]	; 0x6d0
   2acd8:	mov	r0, r7
   2acdc:	bl	1a56c <__assert_fail@plt+0x81e0>
   2ace0:	cmp	r0, #0
   2ace4:	blt	2beec <__assert_fail@plt+0x19b60>
   2ace8:	ldr	r3, [pc, #1124]	; 2b154 <__assert_fail@plt+0x18dc8>
   2acec:	ldr	r1, [pc, #944]	; 2b0a4 <__assert_fail@plt+0x18d18>
   2acf0:	ldr	r2, [pc, #1088]	; 2b138 <__assert_fail@plt+0x18dac>
   2acf4:	ldr	r3, [r3]
   2acf8:	mov	r9, #0
   2acfc:	strb	r3, [r1, #1798]	; 0x706
   2ad00:	ldr	r3, [sp, #136]	; 0x88
   2ad04:	str	r7, [sp, #356]	; 0x164
   2ad08:	str	r2, [r1, #1748]	; 0x6d4
   2ad0c:	strb	r9, [r1, #1796]	; 0x704
   2ad10:	strb	r9, [r1, #1799]	; 0x707
   2ad14:	str	r3, [sp, #116]	; 0x74
   2ad18:	ldr	r1, [pc, #900]	; 2b0a4 <__assert_fail@plt+0x18d18>
   2ad1c:	ldr	r2, [sp, #144]	; 0x90
   2ad20:	str	sl, [sp]
   2ad24:	add	r3, r2, #24
   2ad28:	ldrb	r1, [r1, #1796]	; 0x704
   2ad2c:	add	r2, r2, #16
   2ad30:	add	r0, sp, #344	; 0x158
   2ad34:	bl	1a418 <__assert_fail@plt+0x808c>
   2ad38:	ldr	r3, [sp, #116]	; 0x74
   2ad3c:	cmp	r3, #8
   2ad40:	strd	r0, [r7, #32]
   2ad44:	bhi	2af60 <__assert_fail@plt+0x18bd4>
   2ad48:	ldr	r3, [sp, #344]	; 0x158
   2ad4c:	ldr	r2, [sp, #116]	; 0x74
   2ad50:	add	r2, r3, r2
   2ad54:	cmp	sl, r2
   2ad58:	bls	2afa0 <__assert_fail@plt+0x18c14>
   2ad5c:	ldr	r1, [sp, #116]	; 0x74
   2ad60:	sub	r2, r1, #1
   2ad64:	cmp	r2, #7
   2ad68:	bhi	2afac <__assert_fail@plt+0x18c20>
   2ad6c:	mov	r0, r3
   2ad70:	ldr	r3, [pc, #996]	; 2b15c <__assert_fail@plt+0x18dd0>
   2ad74:	ldr	r3, [r3]
   2ad78:	blx	r3
   2ad7c:	ldr	r3, [sp, #344]	; 0x158
   2ad80:	strd	r0, [r7, #40]	; 0x28
   2ad84:	ldr	r2, [sp, #356]	; 0x164
   2ad88:	ldr	r1, [sp, #116]	; 0x74
   2ad8c:	add	r0, r3, r1
   2ad90:	ldr	r3, [r2, #20]
   2ad94:	str	r0, [sp, #344]	; 0x158
   2ad98:	ldrb	r3, [r3]
   2ad9c:	cmp	r3, #122	; 0x7a
   2ada0:	beq	2b390 <__assert_fail@plt+0x19004>
   2ada4:	ldr	r5, [pc, #760]	; 2b0a4 <__assert_fail@plt+0x18d18>
   2ada8:	ldrd	r2, [sp, #24]
   2adac:	mov	r0, #0
   2adb0:	ldrb	r1, [r5, #1798]	; 0x706
   2adb4:	str	r1, [sp]
   2adb8:	bl	18b24 <__assert_fail@plt+0x6798>
   2adbc:	ldrd	r2, [sp, #120]	; 0x78
   2adc0:	str	r6, [sp]
   2adc4:	mov	r4, r0
   2adc8:	mov	r0, #0
   2adcc:	bl	18b24 <__assert_fail@plt+0x6798>
   2add0:	ldr	r3, [sp, #356]	; 0x164
   2add4:	ldr	ip, [sp, #128]	; 0x80
   2add8:	mov	r2, r4
   2addc:	ldr	r3, [r3, #4]
   2ade0:	mov	r1, r8
   2ade4:	sub	r3, r3, ip
   2ade8:	str	r3, [sp]
   2adec:	mov	r3, r0
   2adf0:	ldr	r0, [pc, #652]	; 2b084 <__assert_fail@plt+0x18cf8>
   2adf4:	bl	11dbc <printf@plt>
   2adf8:	ldrb	r3, [r5, #1799]	; 0x707
   2adfc:	cmp	r3, #0
   2ae00:	bne	2b320 <__assert_fail@plt+0x18f94>
   2ae04:	ldr	r5, [pc, #664]	; 2b0a4 <__assert_fail@plt+0x18d18>
   2ae08:	ldrd	r2, [r7, #32]
   2ae0c:	mov	r0, #0
   2ae10:	ldrb	r1, [r5, #1798]	; 0x706
   2ae14:	str	r1, [sp]
   2ae18:	bl	18b24 <__assert_fail@plt+0x6798>
   2ae1c:	ldr	r1, [r7, #40]	; 0x28
   2ae20:	ldr	r2, [r7, #32]
   2ae24:	ldr	r3, [r7, #36]	; 0x24
   2ae28:	adds	r2, r2, r1
   2ae2c:	ldr	r1, [r7, #44]	; 0x2c
   2ae30:	adc	r3, r3, r1
   2ae34:	mov	r4, r0
   2ae38:	ldrb	r0, [r5, #1798]	; 0x706
   2ae3c:	str	r0, [sp]
   2ae40:	ldr	r0, [pc, #576]	; 2b088 <__assert_fail@plt+0x18cfc>
   2ae44:	mov	r5, r0
   2ae48:	str	r0, [sp, #112]	; 0x70
   2ae4c:	mov	r0, #0
   2ae50:	bl	18b24 <__assert_fail@plt+0x6798>
   2ae54:	mov	r1, r4
   2ae58:	mov	r2, r0
   2ae5c:	ldr	r0, [pc, #552]	; 2b08c <__assert_fail@plt+0x18d00>
   2ae60:	bl	11dbc <printf@plt>
   2ae64:	ldr	r3, [r5]
   2ae68:	cmp	r3, #0
   2ae6c:	bne	2ae7c <__assert_fail@plt+0x18af0>
   2ae70:	ldr	r1, [sp, #368]	; 0x170
   2ae74:	cmp	r1, #0
   2ae78:	bne	2b784 <__assert_fail@plt+0x193f8>
   2ae7c:	mov	r5, r7
   2ae80:	b	285ac <__assert_fail@plt+0x16220>
   2ae84:	ldr	r5, [sp, #332]	; 0x14c
   2ae88:	cmp	r5, #0
   2ae8c:	str	r5, [sp, #356]	; 0x164
   2ae90:	beq	2aec0 <__assert_fail@plt+0x18b34>
   2ae94:	ldr	r3, [r5, #4]
   2ae98:	cmp	r4, r3
   2ae9c:	bne	2aeb0 <__assert_fail@plt+0x18b24>
   2aea0:	b	2be60 <__assert_fail@plt+0x19ad4>
   2aea4:	ldr	r3, [r5, #4]
   2aea8:	cmp	r3, r4
   2aeac:	beq	2b160 <__assert_fail@plt+0x18dd4>
   2aeb0:	ldr	r5, [r5]
   2aeb4:	cmp	r5, #0
   2aeb8:	bne	2aea4 <__assert_fail@plt+0x18b18>
   2aebc:	str	r5, [sp, #356]	; 0x164
   2aec0:	add	r7, r4, #4
   2aec4:	cmp	r7, sl
   2aec8:	movcc	r1, #4
   2aecc:	bcs	2b97c <__assert_fail@plt+0x195f0>
   2aed0:	ldr	r3, [pc, #644]	; 2b15c <__assert_fail@plt+0x18dd0>
   2aed4:	mov	r0, r4
   2aed8:	ldr	r3, [r3]
   2aedc:	blx	r3
   2aee0:	mov	r3, #0
   2aee4:	mvn	r2, #0
   2aee8:	cmp	r1, r3
   2aeec:	cmpeq	r0, r2
   2aef0:	strd	r0, [sp, #24]
   2aef4:	movne	r5, #4
   2aef8:	beq	2be80 <__assert_fail@plt+0x19af4>
   2aefc:	ldrd	r2, [sp, #24]
   2af00:	orrs	r3, r2, r3
   2af04:	beq	2bc9c <__assert_fail@plt+0x19910>
   2af08:	add	r8, r7, r5
   2af0c:	cmp	r8, sl
   2af10:	bcc	2bc68 <__assert_fail@plt+0x198dc>
   2af14:	cmp	r7, sl
   2af18:	bcs	2af2c <__assert_fail@plt+0x18ba0>
   2af1c:	sub	r1, sl, r7
   2af20:	sub	r3, r1, #1
   2af24:	cmp	r3, #7
   2af28:	bls	2bc6c <__assert_fail@plt+0x198e0>
   2af2c:	ldr	r3, [sp, #140]	; 0x8c
   2af30:	cmp	r3, #0
   2af34:	bne	2bc9c <__assert_fail@plt+0x19910>
   2af38:	mov	r3, #0
   2af3c:	cmp	r8, sl
   2af40:	str	r3, [sp, #356]	; 0x164
   2af44:	bcc	2bdc0 <__assert_fail@plt+0x19a34>
   2af48:	mov	r2, #5
   2af4c:	ldr	r1, [pc, #316]	; 2b090 <__assert_fail@plt+0x18d04>
   2af50:	mov	r0, #0
   2af54:	bl	11ea0 <dcgettext@plt>
   2af58:	bl	417d0 <warn@@Base>
   2af5c:	b	28430 <__assert_fail@plt+0x160a4>
   2af60:	ldr	r4, [sp, #116]	; 0x74
   2af64:	mov	r3, #5
   2af68:	str	r3, [sp]
   2af6c:	ldr	r2, [pc, #288]	; 2b094 <__assert_fail@plt+0x18d08>
   2af70:	mov	r3, r4
   2af74:	ldr	r1, [pc, #284]	; 2b098 <__assert_fail@plt+0x18d0c>
   2af78:	mov	r0, #0
   2af7c:	bl	12368 <dcngettext@plt>
   2af80:	mov	r2, #8
   2af84:	mov	r1, r4
   2af88:	bl	412ac <error@@Base>
   2af8c:	ldr	r3, [sp, #344]	; 0x158
   2af90:	add	r2, r3, #8
   2af94:	cmp	sl, r2
   2af98:	movhi	r1, #8
   2af9c:	bhi	2ad6c <__assert_fail@plt+0x189e0>
   2afa0:	cmp	sl, r3
   2afa4:	subhi	r1, sl, r3
   2afa8:	bhi	2ad60 <__assert_fail@plt+0x189d4>
   2afac:	mov	r0, #0
   2afb0:	mov	r1, #0
   2afb4:	strd	r0, [r7, #40]	; 0x28
   2afb8:	b	2ad84 <__assert_fail@plt+0x189f8>
   2afbc:	add	r1, r1, #12
   2afc0:	cmp	sl, r1
   2afc4:	bhi	2b35c <__assert_fail@plt+0x18fd0>
   2afc8:	cmp	r0, sl
   2afcc:	bcs	2afe0 <__assert_fail@plt+0x18c54>
   2afd0:	sub	r1, sl, r0
   2afd4:	sub	r3, r1, #1
   2afd8:	cmp	r3, #7
   2afdc:	bls	2b360 <__assert_fail@plt+0x18fd4>
   2afe0:	mov	r2, #0
   2afe4:	mov	r3, #0
   2afe8:	mov	fp, #12
   2afec:	strd	r2, [sp, #24]
   2aff0:	mov	r6, #8
   2aff4:	add	r0, r0, r6
   2aff8:	add	fp, r9, fp
   2affc:	cmp	fp, r0
   2b000:	cmpcs	sl, fp
   2b004:	str	r0, [sp, #344]	; 0x158
   2b008:	bcs	283f8 <__assert_fail@plt+0x1606c>
   2b00c:	ldrd	r2, [sp, #24]
   2b010:	str	r6, [sp]
   2b014:	mov	r0, #0
   2b018:	bl	18b24 <__assert_fail@plt+0x6798>
   2b01c:	ldr	r3, [sp, #128]	; 0x80
   2b020:	mov	fp, sl
   2b024:	sub	r2, r9, r3
   2b028:	mov	r1, r0
   2b02c:	ldr	r0, [pc, #104]	; 2b09c <__assert_fail@plt+0x18d10>
   2b030:	bl	417d0 <warn@@Base>
   2b034:	ldr	r0, [sp, #344]	; 0x158
   2b038:	b	283f8 <__assert_fail@plt+0x1606c>
   2b03c:	andeq	r2, r0, ip, lsr r0
   2b040:	andeq	r1, r0, sl, ror #30
   2b044:	andeq	lr, r4, r8, lsr #23
   2b048:	andeq	r2, r0, ip, asr r0
   2b04c:	andeq	lr, r4, r8, lsl #23
   2b050:	andeq	r1, r0, sl, asr pc
   2b054:	andeq	r1, r0, fp, asr pc
   2b058:	strdeq	r1, [r0], -r8
   2b05c:	andeq	r2, r0, sl
   2b060:	andeq	r2, r0, fp
   2b064:	muleq	r4, ip, sl
   2b068:	andeq	lr, r4, ip, lsl sl
   2b06c:	andeq	r1, r0, lr, lsl #31
   2b070:	andeq	lr, r4, ip, asr #16
   2b074:	andeq	lr, r4, r8, lsr #16
   2b078:	andeq	lr, r4, r4, ror #24
   2b07c:	muleq	r4, r0, r7
   2b080:	andeq	lr, r4, ip, lsr #13
   2b084:	andeq	lr, r4, r8, lsr r7
   2b088:	andeq	r9, r6, r8, asr #27
   2b08c:	andeq	lr, r4, r0, ror #14
   2b090:	andeq	lr, r4, r4, ror r6
   2b094:	andeq	sl, r4, r0, lsl #21
   2b098:	andeq	sl, r4, ip, asr #21
   2b09c:	andeq	lr, r4, r4, asr #10
   2b0a0:	ldrdeq	lr, [r4], -r8
   2b0a4:	andeq	r7, r6, r0, lsr r5
   2b0a8:	andeq	lr, r4, r8, asr r7
   2b0ac:	andeq	lr, r4, ip, asr #20
   2b0b0:			; <UNDEFINED> instruction: 0x0004c1b0
   2b0b4:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   2b0b8:	andeq	r1, r0, sp, lsl #28
   2b0bc:	ldrdeq	sl, [r4], -r8
   2b0c0:	andeq	lr, r4, r0, lsl r7
   2b0c4:	andeq	r8, r4, r8, lsr #29
   2b0c8:	muleq	r4, r4, ip
   2b0cc:	muleq	r4, r0, r5
   2b0d0:	muleq	r4, r4, r5
   2b0d4:			; <UNDEFINED> instruction: 0x0004e5b4
   2b0d8:	andeq	lr, r4, r4, lsl r6
   2b0dc:	andeq	lr, r4, r4, lsr r6
   2b0e0:	andeq	lr, r4, r4, asr r6
   2b0e4:	andeq	lr, r4, r0, lsl r8
   2b0e8:			; <UNDEFINED> instruction: 0x0004e7b4
   2b0ec:	andeq	r7, r6, r0, lsr r4
   2b0f0:	andeq	lr, r4, r8, ror r9
   2b0f4:			; <UNDEFINED> instruction: 0x0004e9bc
   2b0f8:	andeq	lr, r4, ip, lsl #24
   2b0fc:	andeq	lr, r4, r0, ror #18
   2b100:	muleq	r4, r0, r9
   2b104:	strdeq	r7, [r6], -r0
   2b108:	strdeq	lr, [r4], -r8
   2b10c:	andeq	lr, r4, r4, asr #18
   2b110:	andeq	lr, r4, ip, lsl #18
   2b114:	ldrdeq	lr, [r4], -r4
   2b118:	strdeq	lr, [r4], -r4
   2b11c:	muleq	r4, r4, r8
   2b120:	ldrdeq	lr, [r4], -r4
   2b124:	andeq	lr, r4, r8, ror #17
   2b128:	andeq	lr, r4, r0, asr #17
   2b12c:	andeq	lr, r4, ip, lsr #22
   2b130:	andeq	lr, r4, ip, lsr #24
   2b134:	andeq	lr, r4, r8, lsr #18
   2b138:	andeq	r9, r4, r4, lsr #5
   2b13c:	andeq	lr, r4, ip, asr fp
   2b140:	andeq	lr, r4, ip, ror sl
   2b144:	andeq	lr, r4, r4, asr #21
   2b148:	andeq	lr, r4, ip, lsl #22
   2b14c:	andeq	ip, r4, r8, asr r6
   2b150:	andeq	r9, r4, ip, ror r7
   2b154:	andeq	r9, r6, ip, lsr #27
   2b158:	muleq	r4, r4, r6
   2b15c:	andeq	r9, r6, r0, ror #27
   2b160:	ldr	r3, [sp, #136]	; 0x88
   2b164:	str	r5, [sp, #356]	; 0x164
   2b168:	str	r3, [sp, #116]	; 0x74
   2b16c:	mov	r2, #72	; 0x48
   2b170:	mov	r1, #0
   2b174:	ldr	r0, [pc, #-120]	; 2b104 <__assert_fail@plt+0x18d78>
   2b178:	bl	12110 <memset@plt>
   2b17c:	ldr	r4, [pc, #-224]	; 2b0a4 <__assert_fail@plt+0x18d18>
   2b180:	ldr	r3, [r5, #8]
   2b184:	mov	r1, #2
   2b188:	mov	r0, r3
   2b18c:	str	r3, [r4, #1736]	; 0x6c8
   2b190:	bl	28228 <__assert_fail@plt+0x15e9c>
   2b194:	mov	r1, #4
   2b198:	add	r7, r4, #1728	; 0x6c0
   2b19c:	str	r0, [r4, #1740]	; 0x6cc
   2b1a0:	ldr	r0, [r4, #1736]	; 0x6c8
   2b1a4:	bl	28228 <__assert_fail@plt+0x15e9c>
   2b1a8:	ldr	r3, [sp, #356]	; 0x164
   2b1ac:	ldr	r2, [r4, #1736]	; 0x6c8
   2b1b0:	ldr	r1, [r3, #12]
   2b1b4:	lsl	r2, r2, #1
   2b1b8:	str	r0, [r4, #1744]	; 0x6d0
   2b1bc:	ldr	r0, [r4, #1740]	; 0x6cc
   2b1c0:	bl	11e40 <memcpy@plt>
   2b1c4:	ldr	r3, [sp, #356]	; 0x164
   2b1c8:	ldr	r2, [r4, #1736]	; 0x6c8
   2b1cc:	ldr	r0, [r4, #1744]	; 0x6d0
   2b1d0:	ldr	r1, [r3, #16]
   2b1d4:	lsl	r2, r2, #2
   2b1d8:	bl	11e40 <memcpy@plt>
   2b1dc:	ldr	r0, [sp, #356]	; 0x164
   2b1e0:	ldr	r1, [sp, #352]	; 0x160
   2b1e4:	ldrb	r3, [r0, #70]	; 0x46
   2b1e8:	ldr	r2, [r0, #20]
   2b1ec:	ldrb	ip, [r0, #71]	; 0x47
   2b1f0:	strb	r3, [r4, #1798]	; 0x706
   2b1f4:	str	r2, [r4, #1748]	; 0x6d4
   2b1f8:	ldrb	r3, [r0, #70]	; 0x46
   2b1fc:	ldr	r2, [pc, #-176]	; 2b154 <__assert_fail@plt+0x18dc8>
   2b200:	strb	ip, [r4, #1799]	; 0x707
   2b204:	ldr	ip, [r0, #24]
   2b208:	ldr	lr, [r0, #28]
   2b20c:	str	r3, [r2]
   2b210:	str	ip, [r4, #1752]	; 0x6d8
   2b214:	ldrd	r2, [r0, #56]	; 0x38
   2b218:	ldr	ip, [r0, #48]	; 0x30
   2b21c:	ldr	r0, [r0, #64]	; 0x40
   2b220:	cmp	r1, #0
   2b224:	str	r0, [r4, #1792]	; 0x700
   2b228:	subne	r1, r1, #1
   2b22c:	ldr	r0, [pc, #-304]	; 2b104 <__assert_fail@plt+0x18d78>
   2b230:	str	lr, [r4, #1756]	; 0x6dc
   2b234:	strd	r2, [r7, #56]	; 0x38
   2b238:	str	ip, [r4, #1776]	; 0x6f0
   2b23c:	bl	1a56c <__assert_fail@plt+0x81e0>
   2b240:	cmp	r0, #0
   2b244:	blt	2beec <__assert_fail@plt+0x19b60>
   2b248:	ldr	r3, [sp, #356]	; 0x164
   2b24c:	ldr	r2, [sp, #128]	; 0x80
   2b250:	ldrb	r3, [r3, #68]	; 0x44
   2b254:	sub	r8, r9, r2
   2b258:	ldr	r2, [pc, #-444]	; 2b0a4 <__assert_fail@plt+0x18d18>
   2b25c:	cmp	r3, #0
   2b260:	ldrb	r9, [r2, #1799]	; 0x707
   2b264:	strb	r3, [r2, #1796]	; 0x704
   2b268:	beq	2b290 <__assert_fail@plt+0x18f04>
   2b26c:	and	r3, r3, #7
   2b270:	sub	r3, r3, #2
   2b274:	cmp	r3, #2
   2b278:	ldrls	r2, [pc, #-304]	; 2b150 <__assert_fail@plt+0x18dc4>
   2b27c:	ldrhi	r3, [pc, #-304]	; 2b154 <__assert_fail@plt+0x18dc8>
   2b280:	addls	r3, r2, r3, lsl #2
   2b284:	ldrhi	r3, [r3]
   2b288:	ldrls	r3, [r3, #1024]	; 0x400
   2b28c:	str	r3, [sp, #116]	; 0x74
   2b290:	cmp	r9, #0
   2b294:	beq	2ad18 <__assert_fail@plt+0x1898c>
   2b298:	cmp	r9, #4
   2b29c:	bls	2b2c4 <__assert_fail@plt+0x18f38>
   2b2a0:	ldr	r4, [pc, #-516]	; 2b0a4 <__assert_fail@plt+0x18d18>
   2b2a4:	mov	r2, #5
   2b2a8:	ldr	r1, [pc, #-528]	; 2b0a0 <__assert_fail@plt+0x18d14>
   2b2ac:	mov	r0, #0
   2b2b0:	bl	11ea0 <dcgettext@plt>
   2b2b4:	mov	r9, #4
   2b2b8:	ldrb	r1, [r4, #1799]	; 0x707
   2b2bc:	bl	417d0 <warn@@Base>
   2b2c0:	strb	r9, [r4, #1799]	; 0x707
   2b2c4:	ldr	r3, [sp, #344]	; 0x158
   2b2c8:	add	r2, r3, r9
   2b2cc:	cmp	sl, r2
   2b2d0:	bhi	2b330 <__assert_fail@plt+0x18fa4>
   2b2d4:	cmp	r3, sl
   2b2d8:	bcs	2b2ec <__assert_fail@plt+0x18f60>
   2b2dc:	sub	r9, sl, r3
   2b2e0:	sub	r2, r9, #1
   2b2e4:	cmp	r2, #7
   2b2e8:	bls	2b330 <__assert_fail@plt+0x18fa4>
   2b2ec:	mov	r9, #0
   2b2f0:	ldr	r2, [pc, #-596]	; 2b0a4 <__assert_fail@plt+0x18d18>
   2b2f4:	ldrb	r2, [r2, #1799]	; 0x707
   2b2f8:	add	r3, r3, r2
   2b2fc:	str	r3, [sp, #344]	; 0x158
   2b300:	b	2ad18 <__assert_fail@plt+0x1898c>
   2b304:	mov	r2, #0
   2b308:	mov	r3, #0
   2b30c:	strd	r2, [sp, #120]	; 0x78
   2b310:	ldr	r3, [sp, #128]	; 0x80
   2b314:	ldr	r2, [sp, #120]	; 0x78
   2b318:	add	r4, r3, r2
   2b31c:	b	2ac28 <__assert_fail@plt+0x1889c>
   2b320:	mov	r1, r9
   2b324:	ldr	r0, [pc, #-644]	; 2b0a8 <__assert_fail@plt+0x18d1c>
   2b328:	bl	11dbc <printf@plt>
   2b32c:	b	2ae04 <__assert_fail@plt+0x18a78>
   2b330:	mov	r0, r3
   2b334:	ldr	r3, [pc, #-480]	; 2b15c <__assert_fail@plt+0x18dd0>
   2b338:	mov	r1, r9
   2b33c:	ldr	r3, [r3]
   2b340:	blx	r3
   2b344:	ldr	r3, [sp, #344]	; 0x158
   2b348:	mov	r9, r0
   2b34c:	b	2b2f0 <__assert_fail@plt+0x18f64>
   2b350:	mov	r2, #5
   2b354:	ldr	r1, [pc, #-688]	; 2b0ac <__assert_fail@plt+0x18d20>
   2b358:	b	2a884 <__assert_fail@plt+0x184f8>
   2b35c:	mov	r1, #8
   2b360:	ldr	r3, [pc, #-524]	; 2b15c <__assert_fail@plt+0x18dd0>
   2b364:	ldr	r3, [r3]
   2b368:	blx	r3
   2b36c:	strd	r0, [sp, #24]
   2b370:	add	fp, r0, #12
   2b374:	ldr	r0, [sp, #344]	; 0x158
   2b378:	b	2aff0 <__assert_fail@plt+0x18c64>
   2b37c:	mov	r0, r5
   2b380:	add	r2, sp, #352	; 0x160
   2b384:	add	r1, sp, #360	; 0x168
   2b388:	bl	18ed8 <__assert_fail@plt+0x6b4c>
   2b38c:	b	2898c <__assert_fail@plt+0x16600>
   2b390:	mov	r3, sl
   2b394:	mov	r2, #0
   2b398:	add	r1, sp, #348	; 0x15c
   2b39c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2b3a0:	add	r2, sp, #336	; 0x150
   2b3a4:	mov	r3, #0
   2b3a8:	str	r3, [sp, #340]	; 0x154
   2b3ac:	mov	r4, r0
   2b3b0:	mov	r5, r1
   2b3b4:	str	r0, [sp, #336]	; 0x150
   2b3b8:	ldrd	r0, [r2]
   2b3bc:	str	r4, [sp, #368]	; 0x170
   2b3c0:	cmp	r1, r5
   2b3c4:	cmpeq	r0, r4
   2b3c8:	mov	r1, r4
   2b3cc:	beq	2b418 <__assert_fail@plt+0x1908c>
   2b3d0:	ldr	r1, [pc, #-808]	; 2b0b0 <__assert_fail@plt+0x18d24>
   2b3d4:	mov	r2, #5
   2b3d8:	mov	r0, r3
   2b3dc:	bl	11ea0 <dcgettext@plt>
   2b3e0:	mov	r3, #0
   2b3e4:	str	r3, [sp]
   2b3e8:	mov	r2, r4
   2b3ec:	mov	r3, r5
   2b3f0:	str	r0, [sp, #112]	; 0x70
   2b3f4:	ldr	r0, [pc, #-840]	; 2b0b4 <__assert_fail@plt+0x18d28>
   2b3f8:	bl	18b24 <__assert_fail@plt+0x6798>
   2b3fc:	ldr	r1, [sp, #112]	; 0x70
   2b400:	ldr	r2, [pc, #-848]	; 2b0b8 <__assert_fail@plt+0x18d2c>
   2b404:	mov	r3, r0
   2b408:	mov	r0, r1
   2b40c:	ldr	r1, [pc, #-856]	; 2b0bc <__assert_fail@plt+0x18d30>
   2b410:	bl	412ac <error@@Base>
   2b414:	ldr	r1, [sp, #368]	; 0x170
   2b418:	ldr	r3, [sp, #344]	; 0x158
   2b41c:	ldr	r2, [sp, #348]	; 0x15c
   2b420:	add	r3, r3, r2
   2b424:	add	r2, r3, r1
   2b428:	cmp	r2, sl
   2b42c:	str	r3, [sp, #364]	; 0x16c
   2b430:	str	r2, [sp, #344]	; 0x158
   2b434:	bcs	2b44c <__assert_fail@plt+0x190c0>
   2b438:	cmp	r3, r2
   2b43c:	movls	r3, #0
   2b440:	movhi	r3, #1
   2b444:	orrs	r3, r3, r1, lsr #31
   2b448:	beq	2ada4 <__assert_fail@plt+0x18a18>
   2b44c:	ldr	r1, [pc, #-916]	; 2b0c0 <__assert_fail@plt+0x18d34>
   2b450:	mov	r2, #5
   2b454:	mov	r0, #0
   2b458:	mov	r4, r0
   2b45c:	bl	11ea0 <dcgettext@plt>
   2b460:	mov	r3, r4
   2b464:	ldr	r2, [sp, #368]	; 0x170
   2b468:	str	r4, [sp]
   2b46c:	mov	r5, r0
   2b470:	ldr	r0, [pc, #-948]	; 2b0c4 <__assert_fail@plt+0x18d38>
   2b474:	bl	18b24 <__assert_fail@plt+0x6798>
   2b478:	mov	r1, r0
   2b47c:	mov	r0, r5
   2b480:	bl	417d0 <warn@@Base>
   2b484:	str	r4, [sp, #364]	; 0x16c
   2b488:	str	r4, [sp, #368]	; 0x170
   2b48c:	str	sl, [sp, #344]	; 0x158
   2b490:	b	2ada4 <__assert_fail@plt+0x18a18>
   2b494:	cmp	r1, #0
   2b498:	beq	2bc10 <__assert_fail@plt+0x19884>
   2b49c:	ldrd	r2, [r5, #12]
   2b4a0:	lsl	r6, r6, #1
   2b4a4:	mov	r9, #0
   2b4a8:	mov	r1, #8
   2b4ac:	strh	r1, [r2, r6]
   2b4b0:	str	r9, [r3, r8, lsl #2]
   2b4b4:	str	r9, [sp, #24]
   2b4b8:	b	28914 <__assert_fail@plt+0x16588>
   2b4bc:	cmp	r1, #0
   2b4c0:	beq	2b9c8 <__assert_fail@plt+0x1963c>
   2b4c4:	ldr	r3, [sp, #356]	; 0x164
   2b4c8:	sxth	r2, r8
   2b4cc:	ldr	r1, [r3, #8]
   2b4d0:	cmp	r8, r1
   2b4d4:	lsl	r1, r2, #1
   2b4d8:	bcc	2bc54 <__assert_fail@plt+0x198c8>
   2b4dc:	ldr	r0, [r5, #12]
   2b4e0:	ldr	r3, [r5, #16]
   2b4e4:	mov	r9, #0
   2b4e8:	mov	ip, #7
   2b4ec:	strh	ip, [r0, r1]
   2b4f0:	str	r9, [sp, #24]
   2b4f4:	str	r9, [r3, r2, lsl #2]
   2b4f8:	ldr	r4, [sp, #344]	; 0x158
   2b4fc:	b	28914 <__assert_fail@plt+0x16588>
   2b500:	mov	r1, #1
   2b504:	ldr	r3, [pc, #-944]	; 2b15c <__assert_fail@plt+0x18dd0>
   2b508:	ldr	r3, [r3]
   2b50c:	blx	r3
   2b510:	mov	r6, r0
   2b514:	mov	r4, r1
   2b518:	ldr	r0, [sp, #344]	; 0x158
   2b51c:	b	2ab30 <__assert_fail@plt+0x187a4>
   2b520:	cmp	r1, #0
   2b524:	beq	2bb6c <__assert_fail@plt+0x197e0>
   2b528:	ldr	r3, [r5, #28]
   2b52c:	ldr	r2, [r5, #12]
   2b530:	lsl	r6, r6, #1
   2b534:	mul	r8, r3, r8
   2b538:	ldr	r3, [r5, #16]
   2b53c:	mov	r1, #20
   2b540:	strh	r1, [r2, r6]
   2b544:	mov	r2, #0
   2b548:	str	r2, [sp, #24]
   2b54c:	ldr	r2, [sp, #116]	; 0x74
   2b550:	str	r8, [r3, r2, lsl #2]
   2b554:	b	28914 <__assert_fail@plt+0x16588>
   2b558:	cmp	r1, #0
   2b55c:	beq	2bb4c <__assert_fail@plt+0x197c0>
   2b560:	ldr	r3, [sp, #356]	; 0x164
   2b564:	lsl	r1, r6, #1
   2b568:	lsl	r2, r6, #2
   2b56c:	ldr	r0, [r3, #8]
   2b570:	ldr	ip, [r5, #12]
   2b574:	cmp	r0, r6
   2b578:	ldr	r0, [r5, #16]
   2b57c:	bhi	2b92c <__assert_fail@plt+0x195a0>
   2b580:	mov	r3, #0
   2b584:	mov	lr, #7
   2b588:	strh	lr, [ip, r1]
   2b58c:	str	r3, [sp, #24]
   2b590:	str	r3, [r0, r2]
   2b594:	b	28914 <__assert_fail@plt+0x16588>
   2b598:	cmp	r1, #0
   2b59c:	beq	2ba74 <__assert_fail@plt+0x196e8>
   2b5a0:	ldrd	r2, [r5, #12]
   2b5a4:	lsl	r6, r6, #1
   2b5a8:	mov	r9, #0
   2b5ac:	mov	r1, #7
   2b5b0:	strh	r1, [r2, r6]
   2b5b4:	str	r9, [r3, r8, lsl #2]
   2b5b8:	str	r9, [sp, #24]
   2b5bc:	b	28914 <__assert_fail@plt+0x16588>
   2b5c0:	cmp	r3, #0
   2b5c4:	beq	2ba38 <__assert_fail@plt+0x196ac>
   2b5c8:	ldrd	r2, [r5, #12]
   2b5cc:	lsl	r6, r6, #1
   2b5d0:	mov	r1, #9
   2b5d4:	b	2b540 <__assert_fail@plt+0x191b4>
   2b5d8:	ldr	r1, [pc, #-1304]	; 2b0c8 <__assert_fail@plt+0x18d3c>
   2b5dc:	mov	r0, #0
   2b5e0:	bl	11ea0 <dcgettext@plt>
   2b5e4:	ldr	r3, [sp, #24]
   2b5e8:	mov	r1, r3
   2b5ec:	bl	417d0 <warn@@Base>
   2b5f0:	b	2abb4 <__assert_fail@plt+0x18828>
   2b5f4:	mov	r1, #8
   2b5f8:	ldr	r3, [pc, #-1188]	; 2b15c <__assert_fail@plt+0x18dd0>
   2b5fc:	ldr	r3, [r3]
   2b600:	blx	r3
   2b604:	mov	r6, r0
   2b608:	mov	r4, r1
   2b60c:	ldr	r0, [sp, #344]	; 0x158
   2b610:	b	29710 <__assert_fail@plt+0x17384>
   2b614:	ldr	r0, [pc, #-1360]	; 2b0cc <__assert_fail@plt+0x18d40>
   2b618:	bl	11fe4 <puts@plt>
   2b61c:	ldr	r1, [sp, #372]	; 0x174
   2b620:	ldr	r0, [pc, #-1368]	; 2b0d0 <__assert_fail@plt+0x18d44>
   2b624:	bl	11dbc <printf@plt>
   2b628:	ldr	r1, [r5, #20]
   2b62c:	ldr	r0, [pc, #-1376]	; 2b0d4 <__assert_fail@plt+0x18d48>
   2b630:	bl	11dbc <printf@plt>
   2b634:	ldr	r3, [sp, #372]	; 0x174
   2b638:	cmp	r3, #3
   2b63c:	bgt	2baa0 <__assert_fail@plt+0x19714>
   2b640:	ldr	r1, [r5, #24]
   2b644:	ldr	r0, [pc, #-1396]	; 2b0d8 <__assert_fail@plt+0x18d4c>
   2b648:	bl	11dbc <printf@plt>
   2b64c:	ldr	r1, [r5, #28]
   2b650:	ldr	r0, [pc, #-1404]	; 2b0dc <__assert_fail@plt+0x18d50>
   2b654:	bl	11dbc <printf@plt>
   2b658:	ldr	r1, [r5, #64]	; 0x40
   2b65c:	ldr	r0, [pc, #-1412]	; 2b0e0 <__assert_fail@plt+0x18d54>
   2b660:	bl	11dbc <printf@plt>
   2b664:	ldr	r1, [sp, #368]	; 0x170
   2b668:	cmp	r1, #0
   2b66c:	bne	2ba94 <__assert_fail@plt+0x19708>
   2b670:	ldr	r3, [pc, #-1420]	; 2b0ec <__assert_fail@plt+0x18d60>
   2b674:	mov	r0, #10
   2b678:	ldr	r1, [r3]
   2b67c:	bl	12254 <putc@plt>
   2b680:	b	285a8 <__assert_fail@plt+0x1621c>
   2b684:	ldr	r3, [sp, #136]	; 0x88
   2b688:	str	r3, [sp, #116]	; 0x74
   2b68c:	b	28550 <__assert_fail@plt+0x161c4>
   2b690:	mov	r1, #2
   2b694:	ldr	r3, [pc, #-1344]	; 2b15c <__assert_fail@plt+0x18dd0>
   2b698:	ldr	r3, [r3]
   2b69c:	blx	r3
   2b6a0:	mov	r6, r0
   2b6a4:	mov	r4, r1
   2b6a8:	ldr	r0, [sp, #344]	; 0x158
   2b6ac:	b	2aa50 <__assert_fail@plt+0x186c4>
   2b6b0:	ldrb	r1, [r5, #70]	; 0x46
   2b6b4:	mov	r2, r6
   2b6b8:	mov	r3, r7
   2b6bc:	str	r1, [sp]
   2b6c0:	bl	18b24 <__assert_fail@plt+0x6798>
   2b6c4:	mov	r1, r0
   2b6c8:	ldr	r0, [pc, #-1516]	; 2b0e4 <__assert_fail@plt+0x18d58>
   2b6cc:	bl	11dbc <printf@plt>
   2b6d0:	b	2aa1c <__assert_fail@plt+0x18690>
   2b6d4:	mov	r1, #4
   2b6d8:	ldr	r3, [pc, #-1412]	; 2b15c <__assert_fail@plt+0x18dd0>
   2b6dc:	ldr	r3, [r3]
   2b6e0:	blx	r3
   2b6e4:	mov	r6, r0
   2b6e8:	mov	r4, r1
   2b6ec:	ldr	r0, [sp, #344]	; 0x158
   2b6f0:	b	29be4 <__assert_fail@plt+0x17858>
   2b6f4:	cmp	r1, #0
   2b6f8:	beq	2babc <__assert_fail@plt+0x19730>
   2b6fc:	ldr	r3, [r5, #28]
   2b700:	ldr	r2, [r5, #12]
   2b704:	lsl	r6, r6, #1
   2b708:	mul	r8, r3, r8
   2b70c:	mov	r1, #128	; 0x80
   2b710:	ldr	r3, [r5, #16]
   2b714:	b	2b540 <__assert_fail@plt+0x191b4>
   2b718:	cmp	r1, #0
   2b71c:	beq	2bb24 <__assert_fail@plt+0x19798>
   2b720:	ldr	r3, [r5, #28]
   2b724:	sxth	r8, r8
   2b728:	ldr	r1, [r5, #12]
   2b72c:	mul	r6, r3, r6
   2b730:	lsl	r2, r8, #1
   2b734:	ldr	r3, [r5, #16]
   2b738:	mov	r0, #128	; 0x80
   2b73c:	strh	r0, [r1, r2]
   2b740:	mov	r2, #0
   2b744:	str	r2, [sp, #24]
   2b748:	str	r6, [r3, r8, lsl #2]
   2b74c:	b	28914 <__assert_fail@plt+0x16588>
   2b750:	ldr	r4, [r5, #24]
   2b754:	ldrd	r6, [r5, #32]
   2b758:	ldrb	r1, [r5, #70]	; 0x46
   2b75c:	mul	r4, r4, r8
   2b760:	str	r1, [sp]
   2b764:	adds	r2, r6, r4
   2b768:	adc	r3, r7, #0
   2b76c:	bl	18b24 <__assert_fail@plt+0x6798>
   2b770:	mov	r1, r4
   2b774:	mov	r2, r0
   2b778:	ldr	r0, [pc, #-1688]	; 2b0e8 <__assert_fail@plt+0x18d5c>
   2b77c:	bl	11dbc <printf@plt>
   2b780:	b	29508 <__assert_fail@plt+0x1717c>
   2b784:	ldr	r0, [sp, #364]	; 0x16c
   2b788:	bl	19f50 <__assert_fail@plt+0x7bc4>
   2b78c:	ldr	r3, [pc, #-1704]	; 2b0ec <__assert_fail@plt+0x18d60>
   2b790:	mov	r0, #10
   2b794:	mov	r5, r7
   2b798:	ldr	r1, [r3]
   2b79c:	bl	12254 <putc@plt>
   2b7a0:	b	285ac <__assert_fail@plt+0x16220>
   2b7a4:	and	r3, r4, r5
   2b7a8:	cmp	r6, #8
   2b7ac:	cmneq	r3, #1
   2b7b0:	mov	r2, r4
   2b7b4:	mvneq	r3, #0
   2b7b8:	mvneq	r2, #0
   2b7bc:	mov	r1, r4
   2b7c0:	strdeq	r2, [sp, #120]	; 0x78
   2b7c4:	bne	2b310 <__assert_fail@plt+0x18f84>
   2b7c8:	b	284ac <__assert_fail@plt+0x16120>
   2b7cc:	ldr	r3, [r3]
   2b7d0:	cmp	r3, #0
   2b7d4:	beq	2b7e8 <__assert_fail@plt+0x1945c>
   2b7d8:	ldr	r3, [sp, #132]	; 0x84
   2b7dc:	ldrb	r3, [r3]
   2b7e0:	cmp	r3, #0
   2b7e4:	beq	296b0 <__assert_fail@plt+0x17324>
   2b7e8:	mov	r1, #0
   2b7ec:	mov	r0, r8
   2b7f0:	bl	1888c <__assert_fail@plt+0x6500>
   2b7f4:	ldr	r3, [r5, #28]
   2b7f8:	ldr	r4, [sp, #132]	; 0x84
   2b7fc:	mul	r3, r3, r6
   2b800:	mov	r1, r4
   2b804:	mov	r2, r0
   2b808:	ldr	r0, [pc, #-1760]	; 2b130 <__assert_fail@plt+0x18da4>
   2b80c:	bl	11dbc <printf@plt>
   2b810:	ldrb	r3, [r4]
   2b814:	cmp	r3, #0
   2b818:	bne	294d8 <__assert_fail@plt+0x1714c>
   2b81c:	b	296b0 <__assert_fail@plt+0x17324>
   2b820:	ldr	r3, [r3]
   2b824:	cmp	r3, #0
   2b828:	beq	2b83c <__assert_fail@plt+0x194b0>
   2b82c:	ldr	r3, [sp, #132]	; 0x84
   2b830:	ldrb	r3, [r3]
   2b834:	cmp	r3, #0
   2b838:	beq	29a10 <__assert_fail@plt+0x17684>
   2b83c:	mov	r1, #0
   2b840:	mov	r0, r6
   2b844:	bl	1888c <__assert_fail@plt+0x6500>
   2b848:	ldr	r3, [r5, #28]
   2b84c:	ldr	r9, [sp, #132]	; 0x84
   2b850:	mul	r3, r3, r4
   2b854:	mov	r1, r9
   2b858:	mov	r2, r0
   2b85c:	ldr	r0, [pc, #-1832]	; 2b13c <__assert_fail@plt+0x18db0>
   2b860:	bl	11dbc <printf@plt>
   2b864:	ldrb	r3, [r9]
   2b868:	cmp	r3, #0
   2b86c:	bne	294d8 <__assert_fail@plt+0x1714c>
   2b870:	b	29a10 <__assert_fail@plt+0x17684>
   2b874:	ldr	r3, [r3]
   2b878:	cmp	r3, #0
   2b87c:	beq	2b890 <__assert_fail@plt+0x19504>
   2b880:	ldr	r3, [sp, #132]	; 0x84
   2b884:	ldrb	r3, [r3]
   2b888:	cmp	r3, #0
   2b88c:	beq	2a1a8 <__assert_fail@plt+0x17e1c>
   2b890:	mov	r1, #0
   2b894:	mov	r0, r6
   2b898:	bl	1888c <__assert_fail@plt+0x6500>
   2b89c:	ldr	r3, [r5, #28]
   2b8a0:	ldr	r9, [sp, #132]	; 0x84
   2b8a4:	mul	r3, r3, r4
   2b8a8:	mov	r1, r9
   2b8ac:	mov	r2, r0
   2b8b0:	ldr	r0, [pc, #-1932]	; 2b12c <__assert_fail@plt+0x18da0>
   2b8b4:	bl	11dbc <printf@plt>
   2b8b8:	ldrb	r3, [r9]
   2b8bc:	cmp	r3, #0
   2b8c0:	bne	294d8 <__assert_fail@plt+0x1714c>
   2b8c4:	b	2a1a8 <__assert_fail@plt+0x17e1c>
   2b8c8:	ldr	r0, [pc, #-2016]	; 2b0f0 <__assert_fail@plt+0x18d64>
   2b8cc:	bl	11fe4 <puts@plt>
   2b8d0:	ldr	r3, [sp, #148]	; 0x94
   2b8d4:	cmp	r3, #0
   2b8d8:	bne	29e10 <__assert_fail@plt+0x17a84>
   2b8dc:	ldr	r3, [sp, #112]	; 0x70
   2b8e0:	ldr	r3, [r3]
   2b8e4:	cmp	r3, #0
   2b8e8:	str	r3, [sp, #24]
   2b8ec:	beq	2a89c <__assert_fail@plt+0x18510>
   2b8f0:	mov	r3, #0
   2b8f4:	mov	r4, r3
   2b8f8:	ldr	r0, [pc, #-2060]	; 2b0f4 <__assert_fail@plt+0x18d68>
   2b8fc:	str	r3, [sp, #24]
   2b900:	bl	11fe4 <puts@plt>
   2b904:	str	r4, [sp, #148]	; 0x94
   2b908:	ldr	r4, [sp, #344]	; 0x158
   2b90c:	b	28914 <__assert_fail@plt+0x16588>
   2b910:	mov	r1, r6
   2b914:	ldr	r0, [pc, #-2084]	; 2b0f8 <__assert_fail@plt+0x18d6c>
   2b918:	bl	11dbc <printf@plt>
   2b91c:	b	2a89c <__assert_fail@plt+0x18510>
   2b920:	ldr	r0, [pc, #-2092]	; 2b0fc <__assert_fail@plt+0x18d70>
   2b924:	bl	11fe4 <puts@plt>
   2b928:	b	29eb8 <__assert_fail@plt+0x17b2c>
   2b92c:	ldr	lr, [r3, #12]
   2b930:	ldr	r3, [r3, #16]
   2b934:	mov	r6, #0
   2b938:	ldrsh	lr, [lr, r1]
   2b93c:	ldr	r3, [r3, r2]
   2b940:	str	r6, [sp, #24]
   2b944:	strh	lr, [ip, r1]
   2b948:	str	r3, [r0, r2]
   2b94c:	b	28914 <__assert_fail@plt+0x16588>
   2b950:	mov	r2, #5
   2b954:	ldr	r1, [pc, #-2140]	; 2b100 <__assert_fail@plt+0x18d74>
   2b958:	mov	r0, #0
   2b95c:	mov	r9, #0
   2b960:	bl	11ea0 <dcgettext@plt>
   2b964:	bl	417d0 <warn@@Base>
   2b968:	str	r4, [sp, #148]	; 0x94
   2b96c:	str	r9, [r5, #8]
   2b970:	str	r9, [sp, #24]
   2b974:	ldr	r4, [sp, #344]	; 0x158
   2b978:	b	28914 <__assert_fail@plt+0x16588>
   2b97c:	cmp	r4, sl
   2b980:	bcs	2b994 <__assert_fail@plt+0x19608>
   2b984:	sub	r1, sl, r4
   2b988:	sub	r3, r1, #1
   2b98c:	cmp	r3, #7
   2b990:	bls	2aed0 <__assert_fail@plt+0x18b44>
   2b994:	ldr	r5, [sp, #356]	; 0x164
   2b998:	mov	r2, #0
   2b99c:	mov	r3, #0
   2b9a0:	strd	r2, [sp, #24]
   2b9a4:	mov	r2, #72	; 0x48
   2b9a8:	mov	r1, #0
   2b9ac:	ldr	r0, [pc, #-2224]	; 2b104 <__assert_fail@plt+0x18d78>
   2b9b0:	bl	12110 <memset@plt>
   2b9b4:	cmp	r5, #0
   2b9b8:	beq	2ac7c <__assert_fail@plt+0x188f0>
   2b9bc:	ldr	r3, [sp, #136]	; 0x88
   2b9c0:	str	r3, [sp, #116]	; 0x74
   2b9c4:	b	2b17c <__assert_fail@plt+0x18df0>
   2b9c8:	mov	r0, r8
   2b9cc:	bl	1888c <__assert_fail@plt+0x6500>
   2b9d0:	ldr	r1, [pc, #-2208]	; 2b138 <__assert_fail@plt+0x18dac>
   2b9d4:	mov	r2, r0
   2b9d8:	ldr	r0, [pc, #-2264]	; 2b108 <__assert_fail@plt+0x18d7c>
   2b9dc:	bl	11dbc <printf@plt>
   2b9e0:	ldr	r3, [sp, #356]	; 0x164
   2b9e4:	sxth	r2, r8
   2b9e8:	ldr	r1, [r3, #8]
   2b9ec:	cmp	r1, r8
   2b9f0:	lsl	r1, r2, #1
   2b9f4:	bls	2b4dc <__assert_fail@plt+0x19150>
   2b9f8:	ldr	ip, [sp, #112]	; 0x70
   2b9fc:	ldr	r0, [r3, #12]
   2ba00:	ldr	ip, [ip]
   2ba04:	ldrsh	r0, [r0, r1]
   2ba08:	cmp	ip, #0
   2ba0c:	bne	2bc5c <__assert_fail@plt+0x198d0>
   2ba10:	ldr	ip, [r3, #16]
   2ba14:	ldr	lr, [r5, #12]
   2ba18:	ldr	r3, [r5, #16]
   2ba1c:	ldr	ip, [ip, r2, lsl #2]
   2ba20:	ldr	r4, [sp, #344]	; 0x158
   2ba24:	strh	r0, [lr, r1]
   2ba28:	str	ip, [r3, r2, lsl #2]
   2ba2c:	mov	r3, #0
   2ba30:	str	r3, [sp, #24]
   2ba34:	b	28914 <__assert_fail@plt+0x16588>
   2ba38:	mov	r1, r3
   2ba3c:	mov	r0, r6
   2ba40:	str	r3, [sp, #24]
   2ba44:	bl	1888c <__assert_fail@plt+0x6500>
   2ba48:	ldr	r1, [pc, #-2328]	; 2b138 <__assert_fail@plt+0x18dac>
   2ba4c:	mov	r2, r0
   2ba50:	ldr	r0, [pc, #-2380]	; 2b10c <__assert_fail@plt+0x18d80>
   2ba54:	bl	11dbc <printf@plt>
   2ba58:	ldr	r3, [sp, #24]
   2ba5c:	mov	r0, r8
   2ba60:	mov	r1, r3
   2ba64:	bl	1888c <__assert_fail@plt+0x6500>
   2ba68:	bl	11fe4 <puts@plt>
   2ba6c:	ldr	r4, [sp, #344]	; 0x158
   2ba70:	b	2b5c8 <__assert_fail@plt+0x1923c>
   2ba74:	mov	r0, r6
   2ba78:	bl	1888c <__assert_fail@plt+0x6500>
   2ba7c:	ldr	r1, [pc, #-2380]	; 2b138 <__assert_fail@plt+0x18dac>
   2ba80:	mov	r2, r0
   2ba84:	ldr	r0, [pc, #-2428]	; 2b110 <__assert_fail@plt+0x18d84>
   2ba88:	bl	11dbc <printf@plt>
   2ba8c:	ldr	r4, [sp, #344]	; 0x158
   2ba90:	b	2b5a0 <__assert_fail@plt+0x19214>
   2ba94:	ldr	r0, [sp, #364]	; 0x16c
   2ba98:	bl	19f50 <__assert_fail@plt+0x7bc4>
   2ba9c:	b	2b670 <__assert_fail@plt+0x192e4>
   2baa0:	ldrb	r1, [r5, #70]	; 0x46
   2baa4:	ldr	r0, [pc, #-2456]	; 2b114 <__assert_fail@plt+0x18d88>
   2baa8:	bl	11dbc <printf@plt>
   2baac:	ldrb	r1, [r5, #71]	; 0x47
   2bab0:	ldr	r0, [pc, #-2464]	; 2b118 <__assert_fail@plt+0x18d8c>
   2bab4:	bl	11dbc <printf@plt>
   2bab8:	b	2b640 <__assert_fail@plt+0x192b4>
   2babc:	mov	r0, r6
   2bac0:	bl	1888c <__assert_fail@plt+0x6500>
   2bac4:	ldr	r3, [r5, #28]
   2bac8:	ldr	r1, [pc, #-2456]	; 2b138 <__assert_fail@plt+0x18dac>
   2bacc:	mul	r3, r3, r8
   2bad0:	mov	r2, r0
   2bad4:	ldr	r0, [pc, #-2496]	; 2b11c <__assert_fail@plt+0x18d90>
   2bad8:	bl	11dbc <printf@plt>
   2badc:	ldr	r4, [sp, #344]	; 0x158
   2bae0:	b	2b6fc <__assert_fail@plt+0x19370>
   2bae4:	ldr	r3, [sp, #112]	; 0x70
   2bae8:	ldr	r3, [r3]
   2baec:	cmp	r3, #0
   2baf0:	beq	2bcf0 <__assert_fail@plt+0x19964>
   2baf4:	ldr	r3, [sp, #24]
   2baf8:	ldrb	r3, [r3]
   2bafc:	cmp	r3, #0
   2bb00:	bne	2bcf0 <__assert_fail@plt+0x19964>
   2bb04:	ldr	r2, [r5, #12]
   2bb08:	lsl	r3, r8, #1
   2bb0c:	mov	r1, #16
   2bb10:	strh	r1, [r2, r3]
   2bb14:	mov	r3, #0
   2bb18:	str	r4, [sp, #344]	; 0x158
   2bb1c:	str	r3, [sp, #24]
   2bb20:	b	28914 <__assert_fail@plt+0x16588>
   2bb24:	mov	r0, r8
   2bb28:	bl	1888c <__assert_fail@plt+0x6500>
   2bb2c:	ldr	r3, [r5, #28]
   2bb30:	ldr	r1, [pc, #-2560]	; 2b138 <__assert_fail@plt+0x18dac>
   2bb34:	mul	r3, r3, r6
   2bb38:	mov	r2, r0
   2bb3c:	ldr	r0, [pc, #-2596]	; 2b120 <__assert_fail@plt+0x18d94>
   2bb40:	bl	11dbc <printf@plt>
   2bb44:	ldr	r4, [sp, #344]	; 0x158
   2bb48:	b	2b720 <__assert_fail@plt+0x19394>
   2bb4c:	mov	r0, r6
   2bb50:	bl	1888c <__assert_fail@plt+0x6500>
   2bb54:	ldr	r1, [pc, #-2596]	; 2b138 <__assert_fail@plt+0x18dac>
   2bb58:	mov	r2, r0
   2bb5c:	ldr	r0, [pc, #-2624]	; 2b124 <__assert_fail@plt+0x18d98>
   2bb60:	bl	11dbc <printf@plt>
   2bb64:	ldr	r4, [sp, #344]	; 0x158
   2bb68:	b	2b560 <__assert_fail@plt+0x191d4>
   2bb6c:	mov	r0, r6
   2bb70:	bl	1888c <__assert_fail@plt+0x6500>
   2bb74:	ldr	r3, [r5, #28]
   2bb78:	ldr	r1, [pc, #-2632]	; 2b138 <__assert_fail@plt+0x18dac>
   2bb7c:	mul	r3, r3, r8
   2bb80:	mov	r2, r0
   2bb84:	ldr	r0, [pc, #-2660]	; 2b128 <__assert_fail@plt+0x18d9c>
   2bb88:	bl	11dbc <printf@plt>
   2bb8c:	ldr	r4, [sp, #344]	; 0x158
   2bb90:	b	2b528 <__assert_fail@plt+0x1919c>
   2bb94:	mov	r0, r6
   2bb98:	bl	1888c <__assert_fail@plt+0x6500>
   2bb9c:	ldr	r3, [r5, #28]
   2bba0:	ldr	r1, [pc, #-2672]	; 2b138 <__assert_fail@plt+0x18dac>
   2bba4:	mul	r3, r3, r4
   2bba8:	mov	r2, r0
   2bbac:	ldr	r0, [pc, #-2696]	; 2b12c <__assert_fail@plt+0x18da0>
   2bbb0:	bl	11dbc <printf@plt>
   2bbb4:	b	2a1a8 <__assert_fail@plt+0x17e1c>
   2bbb8:	ldr	r3, [sp, #112]	; 0x70
   2bbbc:	ldr	r3, [r3]
   2bbc0:	cmp	r3, #0
   2bbc4:	beq	2bd58 <__assert_fail@plt+0x199cc>
   2bbc8:	ldr	r3, [sp, #24]
   2bbcc:	ldrb	r3, [r3]
   2bbd0:	cmp	r3, #0
   2bbd4:	bne	2bd58 <__assert_fail@plt+0x199cc>
   2bbd8:	ldr	r2, [r5, #12]
   2bbdc:	lsl	r3, r8, #1
   2bbe0:	mov	r1, #22
   2bbe4:	strh	r1, [r2, r3]
   2bbe8:	b	2bb14 <__assert_fail@plt+0x19788>
   2bbec:	mov	r0, r8
   2bbf0:	bl	1888c <__assert_fail@plt+0x6500>
   2bbf4:	ldr	r3, [r5, #28]
   2bbf8:	ldr	r1, [pc, #-2760]	; 2b138 <__assert_fail@plt+0x18dac>
   2bbfc:	mul	r3, r3, r6
   2bc00:	mov	r2, r0
   2bc04:	ldr	r0, [pc, #-2780]	; 2b130 <__assert_fail@plt+0x18da4>
   2bc08:	bl	11dbc <printf@plt>
   2bc0c:	b	296b0 <__assert_fail@plt+0x17324>
   2bc10:	mov	r0, r6
   2bc14:	bl	1888c <__assert_fail@plt+0x6500>
   2bc18:	ldr	r1, [pc, #-2792]	; 2b138 <__assert_fail@plt+0x18dac>
   2bc1c:	mov	r2, r0
   2bc20:	ldr	r0, [pc, #-2804]	; 2b134 <__assert_fail@plt+0x18da8>
   2bc24:	bl	11dbc <printf@plt>
   2bc28:	ldr	r4, [sp, #344]	; 0x158
   2bc2c:	b	2b49c <__assert_fail@plt+0x19110>
   2bc30:	mov	r0, r6
   2bc34:	bl	1888c <__assert_fail@plt+0x6500>
   2bc38:	ldr	r3, [r5, #28]
   2bc3c:	ldr	r1, [pc, #-2828]	; 2b138 <__assert_fail@plt+0x18dac>
   2bc40:	mul	r3, r3, r4
   2bc44:	mov	r2, r0
   2bc48:	ldr	r0, [pc, #-2836]	; 2b13c <__assert_fail@plt+0x18db0>
   2bc4c:	bl	11dbc <printf@plt>
   2bc50:	b	29a10 <__assert_fail@plt+0x17684>
   2bc54:	ldr	r0, [r3, #12]
   2bc58:	ldrsh	r0, [r0, r1]
   2bc5c:	cmn	r0, #1
   2bc60:	bne	2ba10 <__assert_fail@plt+0x19684>
   2bc64:	b	2b4dc <__assert_fail@plt+0x19150>
   2bc68:	mov	r1, r5
   2bc6c:	ldr	r3, [pc, #-2840]	; 2b15c <__assert_fail@plt+0x18dd0>
   2bc70:	mov	r0, r7
   2bc74:	ldr	r3, [r3]
   2bc78:	blx	r3
   2bc7c:	ldr	r3, [sp, #140]	; 0x8c
   2bc80:	cmp	r3, #0
   2bc84:	bne	2bea8 <__assert_fail@plt+0x19b1c>
   2bc88:	orrs	r3, r0, r1
   2bc8c:	moveq	r5, #1
   2bc90:	movne	r5, #0
   2bc94:	cmp	r5, #0
   2bc98:	bne	2af38 <__assert_fail@plt+0x18bac>
   2bc9c:	ldr	r5, [sp, #356]	; 0x164
   2bca0:	b	2b9a4 <__assert_fail@plt+0x19618>
   2bca4:	ldr	r0, [pc, #-2924]	; 2b140 <__assert_fail@plt+0x18db4>
   2bca8:	bl	11dbc <printf@plt>
   2bcac:	ldr	r3, [sp, #144]	; 0x90
   2bcb0:	mov	r0, #0
   2bcb4:	mov	r1, #0
   2bcb8:	str	r3, [sp, #16]
   2bcbc:	strd	r0, [sp, #8]
   2bcc0:	ldrd	r2, [sp, #160]	; 0xa0
   2bcc4:	ldr	r1, [pc, #-2936]	; 2b154 <__assert_fail@plt+0x18dc8>
   2bcc8:	ldr	r0, [sp, #344]	; 0x158
   2bccc:	strd	r2, [sp]
   2bcd0:	mov	r2, r8
   2bcd4:	mvn	r3, #0
   2bcd8:	ldr	r1, [r1]
   2bcdc:	bl	1b888 <__assert_fail@plt+0x94fc>
   2bce0:	ldr	r0, [pc, #-2972]	; 2b14c <__assert_fail@plt+0x18dc0>
   2bce4:	bl	11fe4 <puts@plt>
   2bce8:	ldr	r4, [sp, #344]	; 0x158
   2bcec:	b	2a714 <__assert_fail@plt+0x18388>
   2bcf0:	mov	r1, #0
   2bcf4:	mov	r0, r8
   2bcf8:	bl	1888c <__assert_fail@plt+0x6500>
   2bcfc:	ldr	r6, [sp, #24]
   2bd00:	mov	r1, r6
   2bd04:	mov	r2, r0
   2bd08:	ldr	r0, [pc, #-3020]	; 2b144 <__assert_fail@plt+0x18db8>
   2bd0c:	bl	11dbc <printf@plt>
   2bd10:	ldr	r1, [sp, #144]	; 0x90
   2bd14:	mov	r2, #0
   2bd18:	str	r1, [sp, #16]
   2bd1c:	ldrd	r0, [sp, #168]	; 0xa8
   2bd20:	mov	r3, #0
   2bd24:	strd	r0, [sp]
   2bd28:	ldr	r1, [pc, #-3036]	; 2b154 <__assert_fail@plt+0x18dc8>
   2bd2c:	strd	r2, [sp, #8]
   2bd30:	ldr	r0, [sp, #344]	; 0x158
   2bd34:	mvn	r3, #0
   2bd38:	ldr	r1, [r1]
   2bd3c:	bl	1b888 <__assert_fail@plt+0x94fc>
   2bd40:	ldr	r0, [pc, #-3068]	; 2b14c <__assert_fail@plt+0x18dc0>
   2bd44:	bl	11fe4 <puts@plt>
   2bd48:	ldrb	r3, [r6]
   2bd4c:	cmp	r3, #0
   2bd50:	bne	2bb14 <__assert_fail@plt+0x19788>
   2bd54:	b	2bb04 <__assert_fail@plt+0x19778>
   2bd58:	mov	r1, #0
   2bd5c:	mov	r0, r8
   2bd60:	bl	1888c <__assert_fail@plt+0x6500>
   2bd64:	ldr	r6, [sp, #24]
   2bd68:	mov	r1, r6
   2bd6c:	mov	r2, r0
   2bd70:	ldr	r0, [pc, #-3120]	; 2b148 <__assert_fail@plt+0x18dbc>
   2bd74:	bl	11dbc <printf@plt>
   2bd78:	ldr	r1, [sp, #144]	; 0x90
   2bd7c:	mov	r2, #0
   2bd80:	str	r1, [sp, #16]
   2bd84:	ldrd	r0, [sp, #152]	; 0x98
   2bd88:	mov	r3, #0
   2bd8c:	strd	r0, [sp]
   2bd90:	ldr	r1, [pc, #-3140]	; 2b154 <__assert_fail@plt+0x18dc8>
   2bd94:	strd	r2, [sp, #8]
   2bd98:	ldr	r0, [sp, #344]	; 0x158
   2bd9c:	mvn	r3, #0
   2bda0:	ldr	r1, [r1]
   2bda4:	bl	1b888 <__assert_fail@plt+0x94fc>
   2bda8:	ldr	r0, [pc, #-3172]	; 2b14c <__assert_fail@plt+0x18dc0>
   2bdac:	bl	11fe4 <puts@plt>
   2bdb0:	ldrb	r3, [r6]
   2bdb4:	cmp	r3, #0
   2bdb8:	bne	2bb14 <__assert_fail@plt+0x19788>
   2bdbc:	b	2bbd8 <__assert_fail@plt+0x1984c>
   2bdc0:	add	r2, sp, #364	; 0x16c
   2bdc4:	add	r3, sp, #368	; 0x170
   2bdc8:	str	r2, [sp, #4]
   2bdcc:	str	r3, [sp]
   2bdd0:	mov	r0, r8
   2bdd4:	add	r3, sp, #372	; 0x174
   2bdd8:	add	r2, sp, #356	; 0x164
   2bddc:	mov	r1, sl
   2bde0:	bl	1e584 <__assert_fail@plt+0xc1f8>
   2bde4:	ldr	r7, [sp, #356]	; 0x164
   2bde8:	cmp	r7, #0
   2bdec:	beq	2af48 <__assert_fail@plt+0x18bbc>
   2bdf0:	ldr	r3, [sp, #352]	; 0x160
   2bdf4:	ldr	r1, [r7, #64]	; 0x40
   2bdf8:	cmp	r3, #0
   2bdfc:	subne	r3, r3, #1
   2be00:	ldr	r2, [sp, #332]	; 0x14c
   2be04:	cmp	r3, r1
   2be08:	movcs	r1, r3
   2be0c:	str	r2, [r7]
   2be10:	str	r4, [r7, #4]
   2be14:	mov	r0, r7
   2be18:	bl	1a56c <__assert_fail@plt+0x81e0>
   2be1c:	cmp	r0, #0
   2be20:	blt	2beec <__assert_fail@plt+0x19b60>
   2be24:	ldr	r5, [sp, #356]	; 0x164
   2be28:	ldrb	r3, [r5, #68]	; 0x44
   2be2c:	cmp	r3, #0
   2be30:	beq	2bf04 <__assert_fail@plt+0x19b78>
   2be34:	and	r3, r3, #7
   2be38:	sub	r3, r3, #2
   2be3c:	cmp	r3, #2
   2be40:	ldrls	r2, [pc, #-3320]	; 2b150 <__assert_fail@plt+0x18dc4>
   2be44:	ldrhi	r3, [pc, #-3320]	; 2b154 <__assert_fail@plt+0x18dc8>
   2be48:	addls	r3, r2, r3, lsl #2
   2be4c:	ldrhi	r3, [r3]
   2be50:	ldrls	r3, [r3, #1024]	; 0x400
   2be54:	str	r3, [sp, #116]	; 0x74
   2be58:	str	r7, [sp, #332]	; 0x14c
   2be5c:	b	2b16c <__assert_fail@plt+0x18de0>
   2be60:	ldr	r3, [sp, #136]	; 0x88
   2be64:	ldr	r5, [sp, #332]	; 0x14c
   2be68:	str	r3, [sp, #116]	; 0x74
   2be6c:	b	2b16c <__assert_fail@plt+0x18de0>
   2be70:	ldr	r3, [sp, #136]	; 0x88
   2be74:	ldr	r5, [sp, #328]	; 0x148
   2be78:	str	r3, [sp, #116]	; 0x74
   2be7c:	b	2b16c <__assert_fail@plt+0x18de0>
   2be80:	add	r2, r4, #12
   2be84:	cmp	r2, sl
   2be88:	bcc	2bf10 <__assert_fail@plt+0x19b84>
   2be8c:	cmp	r7, sl
   2be90:	bcs	2b994 <__assert_fail@plt+0x19608>
   2be94:	sub	r1, sl, r7
   2be98:	sub	r3, r1, #1
   2be9c:	cmp	r3, #7
   2bea0:	bhi	2b994 <__assert_fail@plt+0x19608>
   2bea4:	b	2bf14 <__assert_fail@plt+0x19b88>
   2bea8:	mov	r3, #0
   2beac:	cmp	r1, r3
   2beb0:	mvn	r2, #0
   2beb4:	cmpeq	r0, r2
   2beb8:	moveq	r3, #1
   2bebc:	movne	r3, #0
   2bec0:	cmp	r5, #4
   2bec4:	movne	r3, #0
   2bec8:	andeq	r3, r3, #1
   2becc:	cmp	r3, #0
   2bed0:	bne	2af38 <__assert_fail@plt+0x18bac>
   2bed4:	and	r0, r0, r1
   2bed8:	cmp	r5, #8
   2bedc:	cmneq	r0, #1
   2bee0:	moveq	r5, #1
   2bee4:	movne	r5, #0
   2bee8:	b	2bc94 <__assert_fail@plt+0x19908>
   2beec:	mov	r2, #5
   2bef0:	ldr	r1, [pc, #-3488]	; 2b158 <__assert_fail@plt+0x18dcc>
   2bef4:	mov	r0, #0
   2bef8:	bl	11ea0 <dcgettext@plt>
   2befc:	bl	417d0 <warn@@Base>
   2bf00:	b	28430 <__assert_fail@plt+0x160a4>
   2bf04:	ldr	r3, [sp, #136]	; 0x88
   2bf08:	str	r3, [sp, #116]	; 0x74
   2bf0c:	b	2be58 <__assert_fail@plt+0x19acc>
   2bf10:	mov	r1, #8
   2bf14:	ldr	r3, [pc, #-3520]	; 2b15c <__assert_fail@plt+0x18dd0>
   2bf18:	mov	r0, r7
   2bf1c:	mov	r7, r2
   2bf20:	ldr	r3, [r3]
   2bf24:	blx	r3
   2bf28:	mov	r5, #8
   2bf2c:	strd	r0, [sp, #24]
   2bf30:	b	2aefc <__assert_fail@plt+0x18b70>
   2bf34:	push	{r4, r5, r6, lr}
   2bf38:	mov	r4, r1
   2bf3c:	mov	r6, r0
   2bf40:	mov	r1, r2
   2bf44:	mvn	r0, #0
   2bf48:	mov	r5, r2
   2bf4c:	bl	47334 <warn@@Base+0x5b64>
   2bf50:	cmp	r0, r4
   2bf54:	bls	2bf68 <__assert_fail@plt+0x19bdc>
   2bf58:	mul	r1, r4, r5
   2bf5c:	mov	r0, r6
   2bf60:	pop	{r4, r5, r6, lr}
   2bf64:	b	11ed0 <xrealloc@plt>
   2bf68:	mov	r0, r4
   2bf6c:	bl	1a540 <__assert_fail@plt+0x81b4>
   2bf70:	push	{r4, r5, r6, lr}
   2bf74:	mov	r4, r0
   2bf78:	mvn	r0, #0
   2bf7c:	mov	r5, r1
   2bf80:	bl	47334 <warn@@Base+0x5b64>
   2bf84:	cmp	r0, r4
   2bf88:	bls	2bf9c <__assert_fail@plt+0x19c10>
   2bf8c:	mov	r1, r5
   2bf90:	mov	r0, r4
   2bf94:	pop	{r4, r5, r6, lr}
   2bf98:	b	1235c <xcalloc@plt>
   2bf9c:	mov	r2, #5
   2bfa0:	ldr	r1, [pc, #20]	; 2bfbc <__assert_fail@plt+0x19c30>
   2bfa4:	mov	r0, #0
   2bfa8:	bl	11ea0 <dcgettext@plt>
   2bfac:	mov	r1, r4
   2bfb0:	bl	412ac <error@@Base>
   2bfb4:	mov	r0, #1
   2bfb8:	bl	12218 <xexit@plt>
   2bfbc:	ldrdeq	lr, [r4], -r8
   2bfc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bfc4:	mov	r7, r0
   2bfc8:	ldr	r6, [r0, #16]
   2bfcc:	sub	sp, sp, #156	; 0x9c
   2bfd0:	cmp	r6, #0
   2bfd4:	ldrd	r8, [r0, #32]
   2bfd8:	moveq	r2, #5
   2bfdc:	ldreq	r1, [pc, #3752]	; 2ce8c <__assert_fail@plt+0x1ab00>
   2bfe0:	beq	2c19c <__assert_fail@plt+0x19e10>
   2bfe4:	cmp	r9, #0
   2bfe8:	cmpeq	r8, #23
   2bfec:	bls	2c194 <__assert_fail@plt+0x19e08>
   2bff0:	add	r4, r6, r8
   2bff4:	add	r3, r6, #4
   2bff8:	cmp	r3, r4
   2bffc:	mov	sl, r1
   2c000:	add	r5, r6, #8
   2c004:	bcs	2c0cc <__assert_fail@plt+0x19d40>
   2c008:	mov	r1, #4
   2c00c:	ldr	fp, [pc, #3708]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2c010:	mov	r0, r6
   2c014:	str	r3, [sp, #12]
   2c018:	ldr	r2, [fp]
   2c01c:	blx	r2
   2c020:	cmp	r0, #1
   2c024:	str	r0, [sp, #16]
   2c028:	bls	2c260 <__assert_fail@plt+0x19ed4>
   2c02c:	cmp	r4, r5
   2c030:	ldr	r3, [sp, #12]
   2c034:	bhi	2c23c <__assert_fail@plt+0x19eb0>
   2c038:	cmp	r3, r4
   2c03c:	bcs	2c050 <__assert_fail@plt+0x19cc4>
   2c040:	sub	r2, r8, #5
   2c044:	cmp	r2, #7
   2c048:	subls	r1, r8, #4
   2c04c:	bls	2c240 <__assert_fail@plt+0x19eb4>
   2c050:	add	r3, r6, #12
   2c054:	mov	r2, #0
   2c058:	cmp	r4, r3
   2c05c:	str	r2, [sp, #20]
   2c060:	bhi	2c0f0 <__assert_fail@plt+0x19d64>
   2c064:	add	r5, r6, #16
   2c068:	cmp	r4, r5
   2c06c:	bhi	2c200 <__assert_fail@plt+0x19e74>
   2c070:	mov	r3, #0
   2c074:	str	r3, [sp, #24]
   2c078:	cmp	r5, r6
   2c07c:	bcc	2c4b8 <__assert_fail@plt+0x1a12c>
   2c080:	mov	fp, #0
   2c084:	str	r5, [sp, #32]
   2c088:	str	r5, [sp, #12]
   2c08c:	cmp	sl, #0
   2c090:	bne	2c26c <__assert_fail@plt+0x19ee0>
   2c094:	ldr	r3, [sp, #12]
   2c098:	cmp	r4, r3
   2c09c:	bcc	2c484 <__assert_fail@plt+0x1a0f8>
   2c0a0:	ldr	r3, [sp, #16]
   2c0a4:	cmp	r3, #1
   2c0a8:	beq	2c2e8 <__assert_fail@plt+0x19f5c>
   2c0ac:	ldr	r3, [sp, #16]
   2c0b0:	cmp	r3, #2
   2c0b4:	beq	2c520 <__assert_fail@plt+0x1a194>
   2c0b8:	cmp	sl, #0
   2c0bc:	bne	2c8a8 <__assert_fail@plt+0x1a51c>
   2c0c0:	mov	r0, #1
   2c0c4:	add	sp, sp, #156	; 0x9c
   2c0c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c0cc:	cmp	r6, r4
   2c0d0:	bcc	2c228 <__assert_fail@plt+0x19e9c>
   2c0d4:	mov	r3, #0
   2c0d8:	str	r3, [sp, #16]
   2c0dc:	str	r3, [sp, #20]
   2c0e0:	add	r3, r6, #12
   2c0e4:	cmp	r3, r4
   2c0e8:	bcs	2c1b8 <__assert_fail@plt+0x19e2c>
   2c0ec:	ldr	fp, [pc, #3484]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2c0f0:	mov	r0, r5
   2c0f4:	ldr	r2, [fp]
   2c0f8:	mov	r1, #4
   2c0fc:	str	r3, [sp, #12]
   2c100:	blx	r2
   2c104:	add	r5, r6, #16
   2c108:	cmp	r5, r4
   2c10c:	ldr	r3, [sp, #12]
   2c110:	movcc	r1, #4
   2c114:	str	r0, [sp, #24]
   2c118:	bcs	2c214 <__assert_fail@plt+0x19e88>
   2c11c:	ldr	r2, [fp]
   2c120:	mov	r0, r3
   2c124:	blx	r2
   2c128:	add	r3, r5, r0, lsl #3
   2c12c:	add	r2, r3, r0, lsl #2
   2c130:	cmp	r6, r2
   2c134:	cmpls	r5, r3
   2c138:	mov	fp, r0
   2c13c:	str	r2, [sp, #12]
   2c140:	bhi	2c160 <__assert_fail@plt+0x19dd4>
   2c144:	cmp	r0, #0
   2c148:	sub	r2, r5, r3
   2c14c:	clz	r2, r2
   2c150:	lsr	r2, r2, #5
   2c154:	moveq	r2, #0
   2c158:	cmp	r2, #0
   2c15c:	beq	2c254 <__assert_fail@plt+0x19ec8>
   2c160:	mov	r3, #5
   2c164:	str	r3, [sp]
   2c168:	ldr	r2, [pc, #3364]	; 2ce94 <__assert_fail@plt+0x1ab08>
   2c16c:	mov	r3, fp
   2c170:	ldr	r1, [pc, #3360]	; 2ce98 <__assert_fail@plt+0x1ab0c>
   2c174:	mov	r0, #0
   2c178:	bl	12368 <dcngettext@plt>
   2c17c:	mov	r2, fp
   2c180:	ldr	r1, [r7, #8]
   2c184:	bl	417d0 <warn@@Base>
   2c188:	mov	r0, #0
   2c18c:	add	sp, sp, #156	; 0x9c
   2c190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c194:	ldr	r1, [pc, #3328]	; 2ce9c <__assert_fail@plt+0x1ab10>
   2c198:	mov	r2, #5
   2c19c:	mov	r0, #0
   2c1a0:	bl	11ea0 <dcgettext@plt>
   2c1a4:	ldr	r1, [r7, #8]
   2c1a8:	bl	417d0 <warn@@Base>
   2c1ac:	mov	r0, #0
   2c1b0:	add	sp, sp, #156	; 0x9c
   2c1b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c1b8:	cmp	r4, r5
   2c1bc:	bls	2c064 <__assert_fail@plt+0x19cd8>
   2c1c0:	sub	r2, r8, #9
   2c1c4:	cmp	r2, #7
   2c1c8:	bhi	2c064 <__assert_fail@plt+0x19cd8>
   2c1cc:	ldr	fp, [pc, #3260]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2c1d0:	mov	r0, r5
   2c1d4:	sub	r1, r8, #8
   2c1d8:	ldr	r2, [fp]
   2c1dc:	str	r3, [sp, #12]
   2c1e0:	blx	r2
   2c1e4:	add	r5, r6, #16
   2c1e8:	cmp	r5, r4
   2c1ec:	movcc	r1, #4
   2c1f0:	ldrcc	r3, [sp, #12]
   2c1f4:	str	r0, [sp, #24]
   2c1f8:	bcc	2c11c <__assert_fail@plt+0x19d90>
   2c1fc:	b	2c078 <__assert_fail@plt+0x19cec>
   2c200:	mov	r2, #0
   2c204:	mov	r1, #4
   2c208:	str	r2, [sp, #24]
   2c20c:	ldr	fp, [pc, #3196]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2c210:	b	2c11c <__assert_fail@plt+0x19d90>
   2c214:	sub	r2, r8, #13
   2c218:	cmp	r2, #7
   2c21c:	bhi	2c078 <__assert_fail@plt+0x19cec>
   2c220:	sub	r1, r8, #12
   2c224:	b	2c11c <__assert_fail@plt+0x19d90>
   2c228:	sub	r2, r8, #1
   2c22c:	cmp	r2, #7
   2c230:	movls	r1, r8
   2c234:	bhi	2c0d4 <__assert_fail@plt+0x19d48>
   2c238:	b	2c00c <__assert_fail@plt+0x19c80>
   2c23c:	mov	r1, #4
   2c240:	ldr	r2, [fp]
   2c244:	mov	r0, r3
   2c248:	blx	r2
   2c24c:	str	r0, [sp, #20]
   2c250:	b	2c0e0 <__assert_fail@plt+0x19d54>
   2c254:	str	r5, [sp, #32]
   2c258:	mov	r5, r3
   2c25c:	b	2c08c <__assert_fail@plt+0x19d00>
   2c260:	mov	r3, #0
   2c264:	str	r3, [sp, #20]
   2c268:	b	2c0e0 <__assert_fail@plt+0x19d54>
   2c26c:	add	r1, r7, #12
   2c270:	add	r0, r7, #8
   2c274:	bl	1a7b4 <__assert_fail@plt+0x8428>
   2c278:	mov	r2, #5
   2c27c:	ldr	r1, [pc, #3100]	; 2cea0 <__assert_fail@plt+0x1ab14>
   2c280:	mov	r0, #0
   2c284:	bl	11ea0 <dcgettext@plt>
   2c288:	ldr	r6, [sp, #16]
   2c28c:	mov	r1, r6
   2c290:	bl	11dbc <printf@plt>
   2c294:	cmp	r6, #1
   2c298:	bls	2c2b4 <__assert_fail@plt+0x19f28>
   2c29c:	ldr	r1, [pc, #3072]	; 2cea4 <__assert_fail@plt+0x1ab18>
   2c2a0:	mov	r2, #5
   2c2a4:	mov	r0, #0
   2c2a8:	bl	11ea0 <dcgettext@plt>
   2c2ac:	ldr	r1, [sp, #20]
   2c2b0:	bl	11dbc <printf@plt>
   2c2b4:	mov	r2, #5
   2c2b8:	ldr	r1, [pc, #3048]	; 2cea8 <__assert_fail@plt+0x1ab1c>
   2c2bc:	mov	r0, #0
   2c2c0:	bl	11ea0 <dcgettext@plt>
   2c2c4:	ldr	r1, [sp, #24]
   2c2c8:	bl	11dbc <printf@plt>
   2c2cc:	mov	r2, #5
   2c2d0:	ldr	r1, [pc, #3028]	; 2ceac <__assert_fail@plt+0x1ab20>
   2c2d4:	mov	r0, #0
   2c2d8:	bl	11ea0 <dcgettext@plt>
   2c2dc:	mov	r1, fp
   2c2e0:	bl	11dbc <printf@plt>
   2c2e4:	b	2c094 <__assert_fail@plt+0x19d08>
   2c2e8:	cmp	sl, #0
   2c2ec:	beq	2c8c4 <__assert_fail@plt+0x1a538>
   2c2f0:	cmp	fp, #0
   2c2f4:	beq	2c35c <__assert_fail@plt+0x19fd0>
   2c2f8:	ldr	r9, [pc, #2960]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2c2fc:	ldr	r8, [pc, #2988]	; 2ceb0 <__assert_fail@plt+0x1ab24>
   2c300:	ldr	r0, [sp, #32]
   2c304:	mov	r3, #0
   2c308:	str	r3, [sp, #16]
   2c30c:	str	fp, [sp, #20]
   2c310:	str	r7, [sp, #24]
   2c314:	add	r7, r0, #8
   2c318:	cmp	r7, r4
   2c31c:	add	fp, r5, #4
   2c320:	bls	2c368 <__assert_fail@plt+0x19fdc>
   2c324:	mov	r2, #0
   2c328:	mov	r3, #0
   2c32c:	strd	r2, [sp, #72]	; 0x48
   2c330:	strd	r2, [sp, #80]	; 0x50
   2c334:	ldr	r3, [sp, #16]
   2c338:	ldr	r2, [sp, #20]
   2c33c:	add	r3, r3, #1
   2c340:	cmp	r3, r2
   2c344:	str	r3, [sp, #16]
   2c348:	mov	r0, r7
   2c34c:	mov	r5, fp
   2c350:	bcc	2c314 <__assert_fail@plt+0x19f88>
   2c354:	cmp	sl, #0
   2c358:	beq	2c0c0 <__assert_fail@plt+0x19d34>
   2c35c:	mov	r0, #10
   2c360:	bl	1211c <putchar@plt>
   2c364:	b	2c0c0 <__assert_fail@plt+0x19d34>
   2c368:	add	r2, sp, #80	; 0x50
   2c36c:	add	r1, sp, #72	; 0x48
   2c370:	bl	41b48 <warn@@Base+0x378>
   2c374:	ldrd	r2, [sp, #72]	; 0x48
   2c378:	orrs	r3, r2, r3
   2c37c:	beq	2c918 <__assert_fail@plt+0x1a58c>
   2c380:	cmp	fp, r4
   2c384:	movcc	r1, #4
   2c388:	bcs	2c460 <__assert_fail@plt+0x1a0d4>
   2c38c:	mov	r0, r5
   2c390:	ldr	r3, [r9]
   2c394:	blx	r3
   2c398:	ldr	r3, [sp, #12]
   2c39c:	add	r5, r3, r0, lsl #2
   2c3a0:	cmp	r5, r3
   2c3a4:	bcc	2cc3c <__assert_fail@plt+0x1a8b0>
   2c3a8:	cmp	sl, #0
   2c3ac:	bne	2c4c0 <__assert_fail@plt+0x1a134>
   2c3b0:	cmp	r4, r5
   2c3b4:	bls	2c4a8 <__assert_fail@plt+0x1a11c>
   2c3b8:	mov	r0, r5
   2c3bc:	b	2c3d4 <__assert_fail@plt+0x1a048>
   2c3c0:	ldr	r0, [pc, #2796]	; 2ceb4 <__assert_fail@plt+0x1ab28>
   2c3c4:	bl	11dbc <printf@plt>
   2c3c8:	cmp	r5, r4
   2c3cc:	mov	r0, r5
   2c3d0:	bcs	2c4a8 <__assert_fail@plt+0x1a11c>
   2c3d4:	add	r5, r0, #4
   2c3d8:	cmp	r5, r4
   2c3dc:	bcc	2c42c <__assert_fail@plt+0x1a0a0>
   2c3e0:	sub	r1, r4, r0
   2c3e4:	sub	r3, r1, #1
   2c3e8:	cmp	r3, #7
   2c3ec:	bhi	2c44c <__assert_fail@plt+0x1a0c0>
   2c3f0:	ldr	r3, [r9]
   2c3f4:	blx	r3
   2c3f8:	subs	r1, r0, #0
   2c3fc:	beq	2c44c <__assert_fail@plt+0x1a0c0>
   2c400:	cmp	sl, #0
   2c404:	bne	2c3c0 <__assert_fail@plt+0x1a034>
   2c408:	ldr	r3, [r8, #1824]	; 0x720
   2c40c:	ldr	r2, [r8, #1820]	; 0x71c
   2c410:	cmp	r3, r2
   2c414:	bcs	2c434 <__assert_fail@plt+0x1a0a8>
   2c418:	ldr	r2, [r8, #1816]	; 0x718
   2c41c:	add	r0, r3, #1
   2c420:	str	r0, [r8, #1824]	; 0x720
   2c424:	str	r1, [r2, r3, lsl #2]
   2c428:	b	2c3c8 <__assert_fail@plt+0x1a03c>
   2c42c:	mov	r1, #4
   2c430:	b	2c3f0 <__assert_fail@plt+0x1a064>
   2c434:	mov	r2, #5
   2c438:	ldr	r1, [pc, #2680]	; 2ceb8 <__assert_fail@plt+0x1ab2c>
   2c43c:	mov	r0, sl
   2c440:	bl	11ea0 <dcgettext@plt>
   2c444:	bl	412ac <error@@Base>
   2c448:	b	2c3c8 <__assert_fail@plt+0x1a03c>
   2c44c:	cmp	sl, #0
   2c450:	beq	2c4fc <__assert_fail@plt+0x1a170>
   2c454:	mov	r0, #10
   2c458:	bl	1211c <putchar@plt>
   2c45c:	b	2c334 <__assert_fail@plt+0x19fa8>
   2c460:	sub	r3, fp, #4
   2c464:	cmp	r4, r3
   2c468:	bls	2c47c <__assert_fail@plt+0x1a0f0>
   2c46c:	sub	r1, r4, r5
   2c470:	sub	r3, r1, #1
   2c474:	cmp	r3, #7
   2c478:	bls	2c38c <__assert_fail@plt+0x1a000>
   2c47c:	ldr	r5, [sp, #12]
   2c480:	b	2c3a8 <__assert_fail@plt+0x1a01c>
   2c484:	mov	r2, #5
   2c488:	ldr	r1, [pc, #2604]	; 2cebc <__assert_fail@plt+0x1ab30>
   2c48c:	mov	r0, #0
   2c490:	bl	11ea0 <dcgettext@plt>
   2c494:	mov	r2, fp
   2c498:	ldr	r1, [r7, #8]
   2c49c:	bl	417d0 <warn@@Base>
   2c4a0:	mov	r0, #0
   2c4a4:	b	2c18c <__assert_fail@plt+0x19e00>
   2c4a8:	ldr	r7, [sp, #24]
   2c4ac:	mov	r2, #5
   2c4b0:	ldr	r1, [pc, #2568]	; 2cec0 <__assert_fail@plt+0x1ab34>
   2c4b4:	b	2c19c <__assert_fail@plt+0x19e10>
   2c4b8:	mov	fp, #0
   2c4bc:	b	2c160 <__assert_fail@plt+0x19dd4>
   2c4c0:	mov	r2, #5
   2c4c4:	ldr	r1, [pc, #2552]	; 2cec4 <__assert_fail@plt+0x1ab38>
   2c4c8:	mov	r0, #0
   2c4cc:	bl	11ea0 <dcgettext@plt>
   2c4d0:	add	r3, sp, #88	; 0x58
   2c4d4:	str	r3, [sp]
   2c4d8:	ldrd	r2, [sp, #80]	; 0x50
   2c4dc:	mov	r6, r0
   2c4e0:	ldrd	r0, [sp, #72]	; 0x48
   2c4e4:	bl	1a73c <__assert_fail@plt+0x83b0>
   2c4e8:	ldr	r1, [sp, #16]
   2c4ec:	mov	r2, r0
   2c4f0:	mov	r0, r6
   2c4f4:	bl	11dbc <printf@plt>
   2c4f8:	b	2c3b0 <__assert_fail@plt+0x1a024>
   2c4fc:	ldr	r3, [r8, #1824]	; 0x720
   2c500:	ldr	r2, [r8, #1820]	; 0x71c
   2c504:	cmp	r3, r2
   2c508:	bcs	2c94c <__assert_fail@plt+0x1a5c0>
   2c50c:	ldr	r2, [r8, #1816]	; 0x718
   2c510:	add	r1, r3, #1
   2c514:	str	r1, [r8, #1824]	; 0x720
   2c518:	str	sl, [r2, r3, lsl #2]
   2c51c:	b	2c334 <__assert_fail@plt+0x19fa8>
   2c520:	ldr	r1, [sp, #20]
   2c524:	ldr	r2, [sp, #12]
   2c528:	lsl	r3, r1, #2
   2c52c:	adds	r2, r2, r3
   2c530:	str	r3, [sp, #40]	; 0x28
   2c534:	str	r2, [sp, #44]	; 0x2c
   2c538:	bcs	2c798 <__assert_fail@plt+0x1a40c>
   2c53c:	mov	r2, r3
   2c540:	cmp	r2, #0
   2c544:	add	r3, r3, #3
   2c548:	movge	r3, r2
   2c54c:	cmp	r1, r3, asr #2
   2c550:	bne	2c798 <__assert_fail@plt+0x1a40c>
   2c554:	ldr	r2, [sp, #40]	; 0x28
   2c558:	ldr	r3, [sp, #24]
   2c55c:	mul	r3, r3, r2
   2c560:	ldr	r2, [sp, #44]	; 0x2c
   2c564:	add	r2, r2, r3
   2c568:	add	r3, r2, r3
   2c56c:	cmp	r4, r3
   2c570:	str	r2, [sp, #64]	; 0x40
   2c574:	bcc	2cd88 <__assert_fail@plt+0x1a9fc>
   2c578:	ldr	r0, [r7, #8]
   2c57c:	ldr	r1, [pc, #2372]	; 2cec8 <__assert_fail@plt+0x1ab3c>
   2c580:	bl	11d98 <strcmp@plt>
   2c584:	cmp	sl, #0
   2c588:	str	r0, [sp, #60]	; 0x3c
   2c58c:	bne	2cc6c <__assert_fail@plt+0x1a8e0>
   2c590:	ldr	r3, [sp, #60]	; 0x3c
   2c594:	ldr	r6, [pc, #2324]	; 2ceb0 <__assert_fail@plt+0x1ab24>
   2c598:	cmp	r3, #0
   2c59c:	ldr	r3, [sp, #24]
   2c5a0:	mov	r1, #104	; 0x68
   2c5a4:	mov	r0, r3
   2c5a8:	bne	2cc58 <__assert_fail@plt+0x1a8cc>
   2c5ac:	str	r3, [r6, #1528]	; 0x5f8
   2c5b0:	bl	2bf70 <__assert_fail@plt+0x19be4>
   2c5b4:	str	r0, [sp, #56]	; 0x38
   2c5b8:	str	r0, [r6, #1524]	; 0x5f4
   2c5bc:	cmp	fp, #0
   2c5c0:	beq	2c974 <__assert_fail@plt+0x1a5e8>
   2c5c4:	ldr	r9, [sp, #32]
   2c5c8:	mov	r3, #0
   2c5cc:	mov	r6, r5
   2c5d0:	str	r3, [sp, #16]
   2c5d4:	str	r5, [sp, #68]	; 0x44
   2c5d8:	mov	r8, r9
   2c5dc:	str	fp, [sp, #36]	; 0x24
   2c5e0:	b	2c61c <__assert_fail@plt+0x1a290>
   2c5e4:	cmp	r4, r6
   2c5e8:	bls	2c5fc <__assert_fail@plt+0x1a270>
   2c5ec:	sub	r1, r4, r6
   2c5f0:	sub	r3, r1, #1
   2c5f4:	cmp	r3, #7
   2c5f8:	bls	2c648 <__assert_fail@plt+0x1a2bc>
   2c5fc:	ldr	r3, [sp, #16]
   2c600:	ldr	r2, [sp, #36]	; 0x24
   2c604:	add	r3, r3, #1
   2c608:	cmp	r3, r2
   2c60c:	str	r3, [sp, #16]
   2c610:	mov	r8, fp
   2c614:	mov	r6, r9
   2c618:	bcs	2c964 <__assert_fail@plt+0x1a5d8>
   2c61c:	add	fp, r8, #8
   2c620:	cmp	fp, r4
   2c624:	bls	2c800 <__assert_fail@plt+0x1a474>
   2c628:	mov	r2, #0
   2c62c:	mov	r3, #0
   2c630:	strd	r2, [sp, #72]	; 0x48
   2c634:	strd	r2, [sp, #80]	; 0x50
   2c638:	add	r9, r6, #4
   2c63c:	cmp	r9, r4
   2c640:	bcs	2c5e4 <__assert_fail@plt+0x1a258>
   2c644:	mov	r1, #4
   2c648:	ldr	r3, [pc, #2112]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2c64c:	mov	r0, r6
   2c650:	ldr	r3, [r3]
   2c654:	blx	r3
   2c658:	subs	r7, r0, #0
   2c65c:	beq	2c5fc <__assert_fail@plt+0x1a270>
   2c660:	ldr	r3, [sp, #24]
   2c664:	cmp	r7, r3
   2c668:	bhi	2ce40 <__assert_fail@plt+0x1aab4>
   2c66c:	cmp	sl, #0
   2c670:	bne	2c830 <__assert_fail@plt+0x1a4a4>
   2c674:	cmp	fp, r4
   2c678:	bcs	2ce64 <__assert_fail@plt+0x1aad8>
   2c67c:	ldr	r2, [sp, #40]	; 0x28
   2c680:	ldr	r0, [sp, #44]	; 0x2c
   2c684:	sub	r5, r7, #-1073741823	; 0xc0000001
   2c688:	add	r3, r7, r7, lsl #1
   2c68c:	mla	r5, r2, r5, r0
   2c690:	add	r3, r7, r3, lsl #2
   2c694:	cmp	r4, r5
   2c698:	cmpcs	r5, r0
   2c69c:	lsl	r3, r3, #3
   2c6a0:	ldr	r0, [sp, #56]	; 0x38
   2c6a4:	sub	r3, r3, #104	; 0x68
   2c6a8:	ldr	r2, [r8, #4]
   2c6ac:	ldr	r1, [r8]
   2c6b0:	add	r8, r0, r3
   2c6b4:	str	r1, [r0, r3]
   2c6b8:	str	r2, [r8, #4]
   2c6bc:	bcc	2c928 <__assert_fail@plt+0x1a59c>
   2c6c0:	ldr	r3, [sp, #20]
   2c6c4:	cmp	r3, #0
   2c6c8:	beq	2c5fc <__assert_fail@plt+0x1a270>
   2c6cc:	ldr	r3, [sp, #12]
   2c6d0:	str	fp, [sp, #48]	; 0x30
   2c6d4:	str	r9, [sp, #52]	; 0x34
   2c6d8:	mov	r6, #0
   2c6dc:	ldr	fp, [sp, #20]
   2c6e0:	mov	r9, r3
   2c6e4:	b	2c754 <__assert_fail@plt+0x1a3c8>
   2c6e8:	cmp	r0, r4
   2c6ec:	bcs	2c700 <__assert_fail@plt+0x1a374>
   2c6f0:	sub	r1, r4, r0
   2c6f4:	sub	r2, r1, #1
   2c6f8:	cmp	r2, #7
   2c6fc:	bls	2c76c <__assert_fail@plt+0x1a3e0>
   2c700:	cmp	sl, #0
   2c704:	mov	r2, #0
   2c708:	bne	2c784 <__assert_fail@plt+0x1a3f8>
   2c70c:	add	r7, r9, #4
   2c710:	cmp	r4, r7
   2c714:	bhi	2c7b8 <__assert_fail@plt+0x1a42c>
   2c718:	cmp	r9, r4
   2c71c:	bcs	2c730 <__assert_fail@plt+0x1a3a4>
   2c720:	sub	r1, r4, r9
   2c724:	sub	r0, r1, #1
   2c728:	cmp	r0, #7
   2c72c:	bls	2c7bc <__assert_fail@plt+0x1a430>
   2c730:	mov	r1, sl
   2c734:	add	r3, r1, #1
   2c738:	mov	r1, #0
   2c73c:	str	r2, [r8, r3, lsl #3]
   2c740:	add	r3, r8, r3, lsl #3
   2c744:	str	r1, [r3, #4]
   2c748:	cmp	r6, fp
   2c74c:	mov	r9, r7
   2c750:	bcs	2c814 <__assert_fail@plt+0x1a488>
   2c754:	mov	r0, r5
   2c758:	add	r5, r5, #4
   2c75c:	cmp	r4, r5
   2c760:	add	r6, r6, #1
   2c764:	bls	2c6e8 <__assert_fail@plt+0x1a35c>
   2c768:	mov	r1, #4
   2c76c:	ldr	r3, [pc, #1820]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2c770:	ldr	r2, [r3]
   2c774:	blx	r2
   2c778:	cmp	sl, #0
   2c77c:	mov	r2, r0
   2c780:	beq	2c70c <__assert_fail@plt+0x1a380>
   2c784:	mov	r1, r2
   2c788:	ldr	r0, [pc, #1852]	; 2cecc <__assert_fail@plt+0x1ab40>
   2c78c:	add	r7, r9, #4
   2c790:	bl	11dbc <printf@plt>
   2c794:	b	2c748 <__assert_fail@plt+0x1a3bc>
   2c798:	mov	r2, #5
   2c79c:	ldr	r1, [pc, #1836]	; 2ced0 <__assert_fail@plt+0x1ab44>
   2c7a0:	mov	r0, #0
   2c7a4:	bl	11ea0 <dcgettext@plt>
   2c7a8:	ldr	r1, [sp, #20]
   2c7ac:	bl	417d0 <warn@@Base>
   2c7b0:	mov	r0, #0
   2c7b4:	b	2c18c <__assert_fail@plt+0x19e00>
   2c7b8:	mov	r1, #4
   2c7bc:	ldr	r3, [pc, #1740]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2c7c0:	mov	r0, r9
   2c7c4:	str	r2, [sp, #28]
   2c7c8:	ldr	r3, [r3]
   2c7cc:	blx	r3
   2c7d0:	ldr	r2, [sp, #28]
   2c7d4:	cmp	r0, #7
   2c7d8:	mov	r9, r0
   2c7dc:	mov	r1, r0
   2c7e0:	bls	2c734 <__assert_fail@plt+0x1a3a8>
   2c7e4:	mov	r2, #5
   2c7e8:	ldr	r1, [pc, #1764]	; 2ced4 <__assert_fail@plt+0x1ab48>
   2c7ec:	mov	r0, #0
   2c7f0:	bl	11ea0 <dcgettext@plt>
   2c7f4:	mov	r1, r9
   2c7f8:	bl	417d0 <warn@@Base>
   2c7fc:	b	2c748 <__assert_fail@plt+0x1a3bc>
   2c800:	add	r2, sp, #80	; 0x50
   2c804:	add	r1, sp, #72	; 0x48
   2c808:	mov	r0, r8
   2c80c:	bl	41b48 <warn@@Base+0x378>
   2c810:	b	2c638 <__assert_fail@plt+0x1a2ac>
   2c814:	cmp	sl, #0
   2c818:	ldr	fp, [sp, #48]	; 0x30
   2c81c:	ldr	r9, [sp, #52]	; 0x34
   2c820:	beq	2c5fc <__assert_fail@plt+0x1a270>
   2c824:	mov	r0, #10
   2c828:	bl	1211c <putchar@plt>
   2c82c:	b	2c5fc <__assert_fail@plt+0x1a270>
   2c830:	ldrd	r2, [sp, #40]	; 0x28
   2c834:	sub	r5, r7, #-1073741823	; 0xc0000001
   2c838:	mla	r5, r2, r5, r3
   2c83c:	cmp	r4, r5
   2c840:	cmpcs	r5, r3
   2c844:	movcc	r0, #1
   2c848:	movcs	r0, #0
   2c84c:	bcc	2c928 <__assert_fail@plt+0x1a59c>
   2c850:	mov	r2, #5
   2c854:	ldr	r1, [pc, #1660]	; 2ced8 <__assert_fail@plt+0x1ab4c>
   2c858:	bl	11ea0 <dcgettext@plt>
   2c85c:	add	r3, sp, #88	; 0x58
   2c860:	str	r3, [sp]
   2c864:	ldrd	r2, [sp, #80]	; 0x50
   2c868:	mov	r6, r0
   2c86c:	ldrd	r0, [sp, #72]	; 0x48
   2c870:	bl	1a73c <__assert_fail@plt+0x83b0>
   2c874:	ldr	r1, [sp, #16]
   2c878:	mov	r2, r0
   2c87c:	mov	r0, r6
   2c880:	bl	11dbc <printf@plt>
   2c884:	ldr	r3, [sp, #20]
   2c888:	cmp	r3, #0
   2c88c:	beq	2c824 <__assert_fail@plt+0x1a498>
   2c890:	add	r8, r7, r7, lsl #1
   2c894:	ldr	r3, [sp, #56]	; 0x38
   2c898:	add	r8, r7, r8, lsl #2
   2c89c:	add	r8, r3, r8, lsl #3
   2c8a0:	sub	r8, r8, #104	; 0x68
   2c8a4:	b	2c6cc <__assert_fail@plt+0x1a340>
   2c8a8:	mov	r2, #5
   2c8ac:	ldr	r1, [pc, #1576]	; 2cedc <__assert_fail@plt+0x1ab50>
   2c8b0:	mov	r0, #0
   2c8b4:	bl	11ea0 <dcgettext@plt>
   2c8b8:	ldr	r1, [sp, #16]
   2c8bc:	bl	11dbc <printf@plt>
   2c8c0:	b	2c35c <__assert_fail@plt+0x19fd0>
   2c8c4:	ldr	r6, [pc, #1508]	; 2ceb0 <__assert_fail@plt+0x1ab24>
   2c8c8:	ldr	r3, [sp, #12]
   2c8cc:	sub	r3, r4, r3
   2c8d0:	cmp	r3, #0
   2c8d4:	add	r1, r3, #3
   2c8d8:	ldr	r0, [r6, #1816]	; 0x718
   2c8dc:	movlt	r3, r1
   2c8e0:	cmp	r0, #0
   2c8e4:	asr	r3, r3, #2
   2c8e8:	beq	2cd6c <__assert_fail@plt+0x1a9e0>
   2c8ec:	ldr	r1, [r6, #1824]	; 0x720
   2c8f0:	add	r1, r3, r1
   2c8f4:	cmn	r1, #-1073741822	; 0xc0000002
   2c8f8:	str	r1, [r6, #1820]	; 0x71c
   2c8fc:	bhi	2ce84 <__assert_fail@plt+0x1aaf8>
   2c900:	lsl	r1, r1, #2
   2c904:	bl	11ed0 <xrealloc@plt>
   2c908:	str	r0, [r6, #1816]	; 0x718
   2c90c:	cmp	fp, #0
   2c910:	bne	2c2f8 <__assert_fail@plt+0x19f6c>
   2c914:	b	2c0c0 <__assert_fail@plt+0x19d34>
   2c918:	ldrd	r2, [sp, #80]	; 0x50
   2c91c:	orrs	r3, r2, r3
   2c920:	bne	2c380 <__assert_fail@plt+0x19ff4>
   2c924:	b	2c334 <__assert_fail@plt+0x19fa8>
   2c928:	mov	r2, #5
   2c92c:	ldr	r1, [pc, #1452]	; 2cee0 <__assert_fail@plt+0x1ab54>
   2c930:	mov	r0, #0
   2c934:	bl	11ea0 <dcgettext@plt>
   2c938:	ldr	r2, [sp, #20]
   2c93c:	mov	r1, r7
   2c940:	bl	417d0 <warn@@Base>
   2c944:	mov	r0, #0
   2c948:	b	2c18c <__assert_fail@plt+0x19e00>
   2c94c:	mov	r2, #5
   2c950:	ldr	r1, [pc, #1376]	; 2ceb8 <__assert_fail@plt+0x1ab2c>
   2c954:	mov	r0, sl
   2c958:	bl	11ea0 <dcgettext@plt>
   2c95c:	bl	412ac <error@@Base>
   2c960:	b	2c334 <__assert_fail@plt+0x19fa8>
   2c964:	cmp	sl, #0
   2c968:	ldr	r5, [sp, #68]	; 0x44
   2c96c:	mov	fp, r2
   2c970:	bne	2cddc <__assert_fail@plt+0x1aa50>
   2c974:	ldr	r3, [sp, #20]
   2c978:	cmp	r3, #0
   2c97c:	beq	2ca3c <__assert_fail@plt+0x1a6b0>
   2c980:	str	r5, [sp, #16]
   2c984:	ldr	r9, [pc, #1368]	; 2cee4 <__assert_fail@plt+0x1ab58>
   2c988:	ldr	r8, [pc, #1280]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2c98c:	ldr	r6, [sp, #12]
   2c990:	mov	r7, #0
   2c994:	ldr	r5, [sp, #20]
   2c998:	b	2c9c4 <__assert_fail@plt+0x1a638>
   2c99c:	cmp	r0, r4
   2c9a0:	bcs	2c9b4 <__assert_fail@plt+0x1a628>
   2c9a4:	sub	r1, r4, r0
   2c9a8:	sub	r3, r1, #1
   2c9ac:	cmp	r3, #7
   2c9b0:	bls	2c9dc <__assert_fail@plt+0x1a650>
   2c9b4:	cmp	sl, #0
   2c9b8:	bne	2ca10 <__assert_fail@plt+0x1a684>
   2c9bc:	cmp	r7, r5
   2c9c0:	bcs	2ca30 <__assert_fail@plt+0x1a6a4>
   2c9c4:	mov	r0, r6
   2c9c8:	add	r6, r6, #4
   2c9cc:	cmp	r4, r6
   2c9d0:	add	r7, r7, #1
   2c9d4:	bls	2c99c <__assert_fail@plt+0x1a610>
   2c9d8:	mov	r1, #4
   2c9dc:	ldr	r3, [r8]
   2c9e0:	blx	r3
   2c9e4:	cmp	sl, #0
   2c9e8:	beq	2c9bc <__assert_fail@plt+0x1a630>
   2c9ec:	sub	r3, r0, #1
   2c9f0:	cmp	r3, #7
   2c9f4:	bhi	2ca14 <__assert_fail@plt+0x1a688>
   2c9f8:	ldr	r2, [pc, #1256]	; 2cee8 <__assert_fail@plt+0x1ab5c>
   2c9fc:	add	r3, r2, r3, lsl #2
   2ca00:	ldr	r1, [r3, #3444]	; 0xd74
   2ca04:	mov	r0, r9
   2ca08:	bl	11dbc <printf@plt>
   2ca0c:	b	2c9bc <__assert_fail@plt+0x1a630>
   2ca10:	mov	r0, #0
   2ca14:	mov	r3, r0
   2ca18:	mov	r1, #16
   2ca1c:	ldr	r2, [pc, #1224]	; 2ceec <__assert_fail@plt+0x1ab60>
   2ca20:	ldr	r0, [pc, #1224]	; 2cef0 <__assert_fail@plt+0x1ab64>
   2ca24:	bl	120f8 <snprintf@plt>
   2ca28:	ldr	r1, [pc, #1216]	; 2cef0 <__assert_fail@plt+0x1ab64>
   2ca2c:	b	2ca04 <__assert_fail@plt+0x1a678>
   2ca30:	cmp	sl, #0
   2ca34:	ldr	r5, [sp, #16]
   2ca38:	bne	2ce2c <__assert_fail@plt+0x1aaa0>
   2ca3c:	cmp	fp, #0
   2ca40:	beq	2c0c0 <__assert_fail@plt+0x19d34>
   2ca44:	mov	r7, #0
   2ca48:	ldr	r0, [sp, #32]
   2ca4c:	str	fp, [sp, #16]
   2ca50:	b	2ca84 <__assert_fail@plt+0x1a6f8>
   2ca54:	cmp	r4, r5
   2ca58:	bls	2ca6c <__assert_fail@plt+0x1a6e0>
   2ca5c:	sub	r1, r4, r5
   2ca60:	sub	r3, r1, #1
   2ca64:	cmp	r3, #7
   2ca68:	bls	2cab0 <__assert_fail@plt+0x1a724>
   2ca6c:	ldr	r3, [sp, #16]
   2ca70:	add	r7, r7, #1
   2ca74:	cmp	r7, r3
   2ca78:	mov	r0, r9
   2ca7c:	mov	r5, r8
   2ca80:	bcs	2c354 <__assert_fail@plt+0x19fc8>
   2ca84:	add	r9, r0, #8
   2ca88:	cmp	r9, r4
   2ca8c:	bls	2cc0c <__assert_fail@plt+0x1a880>
   2ca90:	mov	r2, #0
   2ca94:	mov	r3, #0
   2ca98:	strd	r2, [sp, #72]	; 0x48
   2ca9c:	strd	r2, [sp, #80]	; 0x50
   2caa0:	add	r8, r5, #4
   2caa4:	cmp	r8, r4
   2caa8:	bcs	2ca54 <__assert_fail@plt+0x1a6c8>
   2caac:	mov	r1, #4
   2cab0:	ldr	r3, [pc, #984]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2cab4:	mov	r0, r5
   2cab8:	ldr	r3, [r3]
   2cabc:	blx	r3
   2cac0:	subs	r6, r0, #0
   2cac4:	beq	2ca6c <__assert_fail@plt+0x1a6e0>
   2cac8:	ldr	r3, [sp, #40]	; 0x28
   2cacc:	sub	r5, r6, #-1073741823	; 0xc0000001
   2cad0:	ldr	r2, [sp, #64]	; 0x40
   2cad4:	cmp	sl, #0
   2cad8:	mla	fp, r3, r5, r2
   2cadc:	bne	2cd94 <__assert_fail@plt+0x1aa08>
   2cae0:	ldr	r3, [sp, #20]
   2cae4:	cmp	r3, #0
   2cae8:	beq	2ca6c <__assert_fail@plt+0x1a6e0>
   2caec:	add	r2, r6, r6, lsl #1
   2caf0:	ldr	r1, [sp, #56]	; 0x38
   2caf4:	add	r2, r6, r2, lsl #2
   2caf8:	ldr	r3, [sp, #12]
   2cafc:	add	r2, r1, r2, lsl #3
   2cb00:	sub	r2, r2, #104	; 0x68
   2cb04:	mov	r5, fp
   2cb08:	str	r8, [sp, #32]
   2cb0c:	str	r2, [sp, #24]
   2cb10:	mov	r6, #0
   2cb14:	str	r9, [sp, #28]
   2cb18:	ldr	fp, [sp, #20]
   2cb1c:	str	r7, [sp, #36]	; 0x24
   2cb20:	mov	r8, r3
   2cb24:	b	2cb8c <__assert_fail@plt+0x1a800>
   2cb28:	cmp	r0, r4
   2cb2c:	bcs	2cb40 <__assert_fail@plt+0x1a7b4>
   2cb30:	sub	r1, r4, r0
   2cb34:	sub	r2, r1, #1
   2cb38:	cmp	r2, #7
   2cb3c:	bls	2cba4 <__assert_fail@plt+0x1a818>
   2cb40:	mov	r7, #0
   2cb44:	cmp	sl, #0
   2cb48:	bne	2cbf8 <__assert_fail@plt+0x1a86c>
   2cb4c:	add	r9, r8, #4
   2cb50:	cmp	r4, r9
   2cb54:	bhi	2cbb8 <__assert_fail@plt+0x1a82c>
   2cb58:	cmp	r8, r4
   2cb5c:	bcs	2cb70 <__assert_fail@plt+0x1a7e4>
   2cb60:	sub	r1, r4, r8
   2cb64:	sub	r0, r1, #1
   2cb68:	cmp	r0, #7
   2cb6c:	bls	2cbbc <__assert_fail@plt+0x1a830>
   2cb70:	mov	r1, sl
   2cb74:	ldr	r3, [sp, #24]
   2cb78:	add	r1, r1, #18
   2cb7c:	str	r7, [r3, r1, lsl #2]
   2cb80:	cmp	r6, fp
   2cb84:	mov	r8, r9
   2cb88:	bcs	2cc1c <__assert_fail@plt+0x1a890>
   2cb8c:	mov	r0, r5
   2cb90:	add	r5, r5, #4
   2cb94:	cmp	r4, r5
   2cb98:	add	r6, r6, #1
   2cb9c:	bls	2cb28 <__assert_fail@plt+0x1a79c>
   2cba0:	mov	r1, #4
   2cba4:	ldr	r3, [pc, #740]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2cba8:	ldr	r2, [r3]
   2cbac:	blx	r2
   2cbb0:	mov	r7, r0
   2cbb4:	b	2cb44 <__assert_fail@plt+0x1a7b8>
   2cbb8:	mov	r1, #4
   2cbbc:	ldr	r3, [pc, #716]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2cbc0:	mov	r0, r8
   2cbc4:	ldr	r3, [r3]
   2cbc8:	blx	r3
   2cbcc:	cmp	r0, #7
   2cbd0:	mov	r8, r0
   2cbd4:	mov	r1, r0
   2cbd8:	bls	2cb74 <__assert_fail@plt+0x1a7e8>
   2cbdc:	mov	r2, #5
   2cbe0:	ldr	r1, [pc, #748]	; 2ced4 <__assert_fail@plt+0x1ab48>
   2cbe4:	mov	r0, #0
   2cbe8:	bl	11ea0 <dcgettext@plt>
   2cbec:	mov	r1, r8
   2cbf0:	bl	417d0 <warn@@Base>
   2cbf4:	b	2cb80 <__assert_fail@plt+0x1a7f4>
   2cbf8:	mov	r1, r7
   2cbfc:	ldr	r0, [pc, #712]	; 2cecc <__assert_fail@plt+0x1ab40>
   2cc00:	add	r9, r8, #4
   2cc04:	bl	11dbc <printf@plt>
   2cc08:	b	2cb80 <__assert_fail@plt+0x1a7f4>
   2cc0c:	add	r2, sp, #80	; 0x50
   2cc10:	add	r1, sp, #72	; 0x48
   2cc14:	bl	41b48 <warn@@Base+0x378>
   2cc18:	b	2caa0 <__assert_fail@plt+0x1a714>
   2cc1c:	cmp	sl, #0
   2cc20:	ldr	r9, [sp, #28]
   2cc24:	ldr	r8, [sp, #32]
   2cc28:	ldr	r7, [sp, #36]	; 0x24
   2cc2c:	beq	2ca6c <__assert_fail@plt+0x1a6e0>
   2cc30:	mov	r0, #10
   2cc34:	bl	1211c <putchar@plt>
   2cc38:	b	2ca6c <__assert_fail@plt+0x1a6e0>
   2cc3c:	mov	r2, #5
   2cc40:	ldr	r1, [pc, #684]	; 2cef4 <__assert_fail@plt+0x1ab68>
   2cc44:	mov	r0, #0
   2cc48:	bl	11ea0 <dcgettext@plt>
   2cc4c:	bl	417d0 <warn@@Base>
   2cc50:	mov	r0, #0
   2cc54:	b	2c18c <__assert_fail@plt+0x19e00>
   2cc58:	str	r3, [r6, #1536]	; 0x600
   2cc5c:	bl	2bf70 <__assert_fail@plt+0x19be4>
   2cc60:	str	r0, [sp, #56]	; 0x38
   2cc64:	str	r0, [r6, #1532]	; 0x5fc
   2cc68:	b	2c5bc <__assert_fail@plt+0x1a230>
   2cc6c:	ldr	r1, [pc, #644]	; 2cef8 <__assert_fail@plt+0x1ab6c>
   2cc70:	mov	r2, #5
   2cc74:	mov	r0, #0
   2cc78:	bl	11ea0 <dcgettext@plt>
   2cc7c:	bl	11dbc <printf@plt>
   2cc80:	ldr	r0, [sp, #60]	; 0x3c
   2cc84:	mov	r2, #5
   2cc88:	cmp	r0, #0
   2cc8c:	movne	r0, #0
   2cc90:	ldreq	r1, [pc, #612]	; 2cefc <__assert_fail@plt+0x1ab70>
   2cc94:	ldrne	r1, [pc, #612]	; 2cf00 <__assert_fail@plt+0x1ab74>
   2cc98:	bl	11ea0 <dcgettext@plt>
   2cc9c:	mov	r1, r0
   2cca0:	ldr	r0, [pc, #604]	; 2cf04 <__assert_fail@plt+0x1ab78>
   2cca4:	bl	11dbc <printf@plt>
   2cca8:	ldr	r3, [sp, #20]
   2ccac:	cmp	r3, #0
   2ccb0:	beq	2cd4c <__assert_fail@plt+0x1a9c0>
   2ccb4:	str	r5, [sp, #16]
   2ccb8:	ldr	r7, [pc, #464]	; 2ce90 <__assert_fail@plt+0x1ab04>
   2ccbc:	ldr	r9, [pc, #548]	; 2cee8 <__assert_fail@plt+0x1ab5c>
   2ccc0:	ldr	r8, [pc, #540]	; 2cee4 <__assert_fail@plt+0x1ab58>
   2ccc4:	ldr	r6, [sp, #12]
   2ccc8:	ldr	r5, [sp, #44]	; 0x2c
   2cccc:	b	2cd14 <__assert_fail@plt+0x1a988>
   2ccd0:	cmp	r0, r4
   2ccd4:	bcs	2cce8 <__assert_fail@plt+0x1a95c>
   2ccd8:	sub	r1, r4, r0
   2ccdc:	sub	r3, r1, #1
   2cce0:	cmp	r3, #7
   2cce4:	bls	2cd28 <__assert_fail@plt+0x1a99c>
   2cce8:	mov	r0, #0
   2ccec:	mov	r3, r0
   2ccf0:	mov	r1, #16
   2ccf4:	ldr	r2, [pc, #496]	; 2ceec <__assert_fail@plt+0x1ab60>
   2ccf8:	ldr	r0, [pc, #496]	; 2cef0 <__assert_fail@plt+0x1ab64>
   2ccfc:	bl	120f8 <snprintf@plt>
   2cd00:	ldr	r1, [pc, #488]	; 2cef0 <__assert_fail@plt+0x1ab64>
   2cd04:	mov	r0, r8
   2cd08:	bl	11dbc <printf@plt>
   2cd0c:	cmp	r5, r6
   2cd10:	beq	2cd48 <__assert_fail@plt+0x1a9bc>
   2cd14:	mov	r0, r6
   2cd18:	add	r6, r6, #4
   2cd1c:	cmp	r4, r6
   2cd20:	bls	2ccd0 <__assert_fail@plt+0x1a944>
   2cd24:	mov	r1, #4
   2cd28:	ldr	r3, [r7]
   2cd2c:	blx	r3
   2cd30:	sub	r2, r0, #1
   2cd34:	cmp	r2, #7
   2cd38:	bhi	2ccec <__assert_fail@plt+0x1a960>
   2cd3c:	add	r2, r9, r2, lsl #2
   2cd40:	ldr	r1, [r2, #3444]	; 0xd74
   2cd44:	b	2cd04 <__assert_fail@plt+0x1a978>
   2cd48:	ldr	r5, [sp, #16]
   2cd4c:	mov	r0, #10
   2cd50:	bl	1211c <putchar@plt>
   2cd54:	cmp	fp, #0
   2cd58:	streq	fp, [sp, #56]	; 0x38
   2cd5c:	beq	2cddc <__assert_fail@plt+0x1aa50>
   2cd60:	mov	r3, #0
   2cd64:	str	r3, [sp, #56]	; 0x38
   2cd68:	b	2c5c4 <__assert_fail@plt+0x1a238>
   2cd6c:	mov	r0, r3
   2cd70:	mov	r1, #4
   2cd74:	str	r3, [r6, #1820]	; 0x71c
   2cd78:	str	sl, [r6, #1824]	; 0x720
   2cd7c:	bl	28228 <__assert_fail@plt+0x15e9c>
   2cd80:	str	r0, [r6, #1816]	; 0x718
   2cd84:	b	2c90c <__assert_fail@plt+0x1a580>
   2cd88:	mov	r2, #5
   2cd8c:	ldr	r1, [pc, #372]	; 2cf08 <__assert_fail@plt+0x1ab7c>
   2cd90:	b	2c19c <__assert_fail@plt+0x19e10>
   2cd94:	mov	r2, #5
   2cd98:	ldr	r1, [pc, #312]	; 2ced8 <__assert_fail@plt+0x1ab4c>
   2cd9c:	mov	r0, #0
   2cda0:	bl	11ea0 <dcgettext@plt>
   2cda4:	add	r3, sp, #88	; 0x58
   2cda8:	str	r3, [sp]
   2cdac:	ldrd	r2, [sp, #80]	; 0x50
   2cdb0:	mov	r5, r0
   2cdb4:	ldrd	r0, [sp, #72]	; 0x48
   2cdb8:	bl	1a73c <__assert_fail@plt+0x83b0>
   2cdbc:	mov	r1, r7
   2cdc0:	mov	r2, r0
   2cdc4:	mov	r0, r5
   2cdc8:	bl	11dbc <printf@plt>
   2cdcc:	ldr	r3, [sp, #20]
   2cdd0:	cmp	r3, #0
   2cdd4:	bne	2caec <__assert_fail@plt+0x1a760>
   2cdd8:	b	2cc30 <__assert_fail@plt+0x1a8a4>
   2cddc:	mov	r0, #10
   2cde0:	bl	1211c <putchar@plt>
   2cde4:	ldr	r1, [pc, #288]	; 2cf0c <__assert_fail@plt+0x1ab80>
   2cde8:	mov	r2, #5
   2cdec:	mov	r0, #0
   2cdf0:	bl	11ea0 <dcgettext@plt>
   2cdf4:	bl	11dbc <printf@plt>
   2cdf8:	ldr	r0, [sp, #60]	; 0x3c
   2cdfc:	mov	r2, #5
   2ce00:	cmp	r0, #0
   2ce04:	movne	r0, #0
   2ce08:	ldreq	r1, [pc, #236]	; 2cefc <__assert_fail@plt+0x1ab70>
   2ce0c:	ldrne	r1, [pc, #236]	; 2cf00 <__assert_fail@plt+0x1ab74>
   2ce10:	bl	11ea0 <dcgettext@plt>
   2ce14:	mov	r1, r0
   2ce18:	ldr	r0, [pc, #228]	; 2cf04 <__assert_fail@plt+0x1ab78>
   2ce1c:	bl	11dbc <printf@plt>
   2ce20:	ldr	r3, [sp, #20]
   2ce24:	cmp	r3, #0
   2ce28:	bne	2c980 <__assert_fail@plt+0x1a5f4>
   2ce2c:	mov	r0, #10
   2ce30:	bl	1211c <putchar@plt>
   2ce34:	cmp	fp, #0
   2ce38:	bne	2ca44 <__assert_fail@plt+0x1a6b8>
   2ce3c:	b	2c35c <__assert_fail@plt+0x19fd0>
   2ce40:	mov	r2, #5
   2ce44:	ldr	r1, [pc, #196]	; 2cf10 <__assert_fail@plt+0x1ab84>
   2ce48:	mov	r0, #0
   2ce4c:	bl	11ea0 <dcgettext@plt>
   2ce50:	ldr	r2, [sp, #24]
   2ce54:	mov	r1, r7
   2ce58:	bl	417d0 <warn@@Base>
   2ce5c:	mov	r0, #0
   2ce60:	b	2c18c <__assert_fail@plt+0x19e00>
   2ce64:	mov	r2, #5
   2ce68:	ldr	r1, [pc, #164]	; 2cf14 <__assert_fail@plt+0x1ab88>
   2ce6c:	mov	r0, sl
   2ce70:	bl	11ea0 <dcgettext@plt>
   2ce74:	mov	r1, r8
   2ce78:	bl	417d0 <warn@@Base>
   2ce7c:	mov	r0, sl
   2ce80:	b	2c18c <__assert_fail@plt+0x19e00>
   2ce84:	mov	r0, r1
   2ce88:	bl	1a540 <__assert_fail@plt+0x81b4>
   2ce8c:	andeq	lr, r4, ip, lsr #26
   2ce90:	andeq	r9, r6, r0, ror #27
   2ce94:	andeq	lr, r4, r8, ror sp
   2ce98:	andeq	lr, r4, r0, lsr #27
   2ce9c:	andeq	lr, r4, r4, asr #26
   2cea0:	andeq	lr, r4, r8, asr #27
   2cea4:	andeq	lr, r4, r8, ror #27
   2cea8:	andeq	lr, r4, r8, lsl #28
   2ceac:	andeq	lr, r4, r8, lsr #28
   2ceb0:	andeq	r7, r6, r0, lsr r5
   2ceb4:	strdeq	lr, [r4], -ip
   2ceb8:	andeq	lr, r4, r0, lsl #30
   2cebc:	andeq	lr, r4, r8, asr #28
   2cec0:	ldrdeq	lr, [r4], -r4
   2cec4:	andeq	lr, r4, ip, lsr #29
   2cec8:	andeq	lr, r4, ip, lsl #31
   2cecc:	muleq	r4, ip, r0
   2ced0:	andeq	lr, r4, r4, lsr pc
   2ced4:	andeq	pc, r4, r4, lsr #1
   2ced8:	andeq	pc, r4, ip, lsl #1
   2cedc:	andeq	pc, r4, r0, ror #1
   2cee0:	andeq	pc, r4, ip, asr #32
   2cee4:	ldrdeq	lr, [r4], -r0
   2cee8:	andeq	r9, r4, ip, ror r7
   2ceec:	andeq	r0, r5, r8, asr #30
   2cef0:	andeq	r7, r6, r8, lsr ip
   2cef4:	andeq	lr, r4, r8, ror lr
   2cef8:	muleq	r4, ip, pc	; <UNPREDICTABLE>
   2cefc:	andeq	lr, r4, ip, lsr #31
   2cf00:			; <UNDEFINED> instruction: 0x0004efb8
   2cf04:	andeq	lr, r4, r0, asr #31
   2cf08:	andeq	lr, r4, r8, asr pc
   2cf0c:	ldrdeq	pc, [r4], -r0
   2cf10:	ldrdeq	lr, [r4], -r8
   2cf14:	andeq	pc, r4, r4, lsl r0	; <UNPREDICTABLE>
   2cf18:	push	{r4, r5, r6, lr}
   2cf1c:	mov	r5, r0
   2cf20:	ldr	r4, [pc, #116]	; 2cf9c <__assert_fail@plt+0x1ac10>
   2cf24:	ldr	r0, [r4, #3100]	; 0xc1c
   2cf28:	cmn	r0, #1
   2cf2c:	popne	{r4, r5, r6, pc}
   2cf30:	mov	r3, #1
   2cf34:	mov	r1, r5
   2cf38:	mov	r0, #38	; 0x26
   2cf3c:	str	r3, [r4, #3100]	; 0xc1c
   2cf40:	bl	19dd4 <__assert_fail@plt+0x7a48>
   2cf44:	cmp	r0, #0
   2cf48:	bne	2cf84 <__assert_fail@plt+0x1abf8>
   2cf4c:	mov	r1, r5
   2cf50:	mov	r0, #39	; 0x27
   2cf54:	bl	19dd4 <__assert_fail@plt+0x7a48>
   2cf58:	cmp	r0, #0
   2cf5c:	bne	2cf68 <__assert_fail@plt+0x1abdc>
   2cf60:	ldr	r0, [r4, #3100]	; 0xc1c
   2cf64:	pop	{r4, r5, r6, pc}
   2cf68:	mov	r1, #0
   2cf6c:	ldr	r0, [pc, #44]	; 2cfa0 <__assert_fail@plt+0x1ac14>
   2cf70:	bl	2bfc0 <__assert_fail@plt+0x19c34>
   2cf74:	cmp	r0, #0
   2cf78:	bne	2cf60 <__assert_fail@plt+0x1abd4>
   2cf7c:	str	r0, [r4, #3100]	; 0xc1c
   2cf80:	pop	{r4, r5, r6, pc}
   2cf84:	mov	r1, #0
   2cf88:	add	r0, r4, #2736	; 0xab0
   2cf8c:	bl	2bfc0 <__assert_fail@plt+0x19c34>
   2cf90:	cmp	r0, #0
   2cf94:	streq	r0, [r4, #3100]	; 0xc1c
   2cf98:	b	2cf4c <__assert_fail@plt+0x1abc0>
   2cf9c:	andeq	r6, r6, r0, ror #10
   2cfa0:	andeq	r7, r6, r8, asr r0
   2cfa4:	push	{r4, r5, r6, lr}
   2cfa8:	mov	r6, r1
   2cfac:	bl	2cf18 <__assert_fail@plt+0x1ab8c>
   2cfb0:	cmp	r0, #0
   2cfb4:	popeq	{r4, r5, r6, pc}
   2cfb8:	ldr	r3, [pc, #136]	; 2d048 <__assert_fail@plt+0x1acbc>
   2cfbc:	ldr	r5, [r3, #1824]	; 0x720
   2cfc0:	cmp	r5, #0
   2cfc4:	beq	2d008 <__assert_fail@plt+0x1ac7c>
   2cfc8:	ldr	r0, [r3, #1816]	; 0x718
   2cfcc:	ldr	r3, [r0]
   2cfd0:	cmp	r6, r3
   2cfd4:	popeq	{r4, r5, r6, pc}
   2cfd8:	add	ip, r0, #4
   2cfdc:	mov	r2, #0
   2cfe0:	b	2cff8 <__assert_fail@plt+0x1ac6c>
   2cfe4:	ldr	r4, [lr]
   2cfe8:	add	ip, ip, #4
   2cfec:	cmp	r4, r6
   2cff0:	beq	2d010 <__assert_fail@plt+0x1ac84>
   2cff4:	mov	r2, r3
   2cff8:	add	r3, r2, #1
   2cffc:	cmp	r3, r5
   2d000:	mov	lr, ip
   2d004:	bne	2cfe4 <__assert_fail@plt+0x1ac58>
   2d008:	mov	r0, #0
   2d00c:	pop	{r4, r5, r6, pc}
   2d010:	add	r2, r2, #1073741824	; 0x40000000
   2d014:	ldr	r1, [r0, r2, lsl #2]
   2d018:	cmp	r1, #0
   2d01c:	addne	r2, r0, r2, lsl #2
   2d020:	beq	2d040 <__assert_fail@plt+0x1acb4>
   2d024:	subs	r3, r3, #1
   2d028:	popeq	{r4, r5, r6, pc}
   2d02c:	ldr	r1, [r2, #-4]!
   2d030:	cmp	r1, #0
   2d034:	bne	2d024 <__assert_fail@plt+0x1ac98>
   2d038:	add	r0, r0, r3, lsl #2
   2d03c:	pop	{r4, r5, r6, pc}
   2d040:	mov	r0, lr
   2d044:	pop	{r4, r5, r6, pc}
   2d048:	andeq	r7, r6, r0, lsr r5
   2d04c:	push	{r4, r5, r6, lr}
   2d050:	sub	sp, sp, #8
   2d054:	ldr	r6, [pc, #188]	; 2d118 <__assert_fail@plt+0x1ad8c>
   2d058:	ldr	r4, [r6, #1488]	; 0x5d0
   2d05c:	cmn	r4, #1
   2d060:	moveq	r4, #0
   2d064:	beq	2d070 <__assert_fail@plt+0x1ace4>
   2d068:	cmp	r4, #0
   2d06c:	beq	2d07c <__assert_fail@plt+0x1acf0>
   2d070:	mov	r0, r4
   2d074:	add	sp, sp, #8
   2d078:	pop	{r4, r5, r6, pc}
   2d07c:	mov	r5, r0
   2d080:	bl	2cf18 <__assert_fail@plt+0x1ab8c>
   2d084:	mov	r1, r5
   2d088:	mov	r0, #3
   2d08c:	bl	19dd4 <__assert_fail@plt+0x7a48>
   2d090:	cmp	r0, #0
   2d094:	beq	2d0c8 <__assert_fail@plt+0x1ad3c>
   2d098:	str	r4, [sp]
   2d09c:	mov	r3, #1
   2d0a0:	mov	r2, r4
   2d0a4:	mov	r1, r5
   2d0a8:	ldr	r0, [pc, #108]	; 2d11c <__assert_fail@plt+0x1ad90>
   2d0ac:	bl	217dc <__assert_fail@plt+0xf450>
   2d0b0:	cmp	r0, #0
   2d0b4:	beq	2d0c8 <__assert_fail@plt+0x1ad3c>
   2d0b8:	ldr	r4, [r6, #1488]	; 0x5d0
   2d0bc:	mov	r0, r4
   2d0c0:	add	sp, sp, #8
   2d0c4:	pop	{r4, r5, r6, pc}
   2d0c8:	mov	r1, r5
   2d0cc:	mov	r0, #27
   2d0d0:	bl	19dd4 <__assert_fail@plt+0x7a48>
   2d0d4:	cmp	r0, #0
   2d0d8:	bne	2d0f0 <__assert_fail@plt+0x1ad64>
   2d0dc:	mvn	r3, #0
   2d0e0:	mov	r0, r4
   2d0e4:	str	r3, [r6, #1488]	; 0x5d0
   2d0e8:	add	sp, sp, #8
   2d0ec:	pop	{r4, r5, r6, pc}
   2d0f0:	mov	r3, #0
   2d0f4:	str	r3, [sp]
   2d0f8:	mov	r1, r5
   2d0fc:	mov	r3, #1
   2d100:	mov	r2, #28
   2d104:	ldr	r0, [pc, #20]	; 2d120 <__assert_fail@plt+0x1ad94>
   2d108:	bl	217dc <__assert_fail@plt+0xf450>
   2d10c:	cmp	r0, #0
   2d110:	beq	2d0dc <__assert_fail@plt+0x1ad50>
   2d114:	b	2d0b8 <__assert_fail@plt+0x1ad2c>
   2d118:	andeq	r7, r6, r0, lsr r5
   2d11c:	andeq	r6, r6, r8, lsr r6
   2d120:	strdeq	r6, [r6], -r8
   2d124:	ldrd	r2, [r0, #32]
   2d128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d12c:	sub	sp, sp, #28
   2d130:	orrs	r3, r2, r3
   2d134:	str	r0, [sp, #16]
   2d138:	beq	2d390 <__assert_fail@plt+0x1b004>
   2d13c:	mov	r0, r1
   2d140:	bl	2d04c <__assert_fail@plt+0x1acc0>
   2d144:	subs	r4, r0, #0
   2d148:	beq	2d36c <__assert_fail@plt+0x1afe0>
   2d14c:	ldr	r3, [sp, #16]
   2d150:	ldr	r8, [pc, #660]	; 2d3ec <__assert_fail@plt+0x1b060>
   2d154:	add	r1, r3, #12
   2d158:	add	r0, r3, #8
   2d15c:	bl	1a7b4 <__assert_fail@plt+0x8428>
   2d160:	ldr	r0, [r8, #1488]	; 0x5d0
   2d164:	mov	r1, #4
   2d168:	add	r0, r0, #1
   2d16c:	bl	1235c <xcalloc@plt>
   2d170:	ldr	r4, [r8, #1488]	; 0x5d0
   2d174:	cmp	r4, #0
   2d178:	str	r0, [sp, #20]
   2d17c:	beq	2d3b8 <__assert_fail@plt+0x1b02c>
   2d180:	mov	fp, #0
   2d184:	mvn	sl, #0
   2d188:	mov	r6, #0
   2d18c:	strd	sl, [sp, #8]
   2d190:	ldr	r9, [pc, #600]	; 2d3f0 <__assert_fail@plt+0x1b064>
   2d194:	mov	r4, r6
   2d198:	mov	fp, r0
   2d19c:	b	2d1b0 <__assert_fail@plt+0x1ae24>
   2d1a0:	ldr	r3, [r8, #1488]	; 0x5d0
   2d1a4:	add	r4, r4, #1
   2d1a8:	cmp	r4, r3
   2d1ac:	bcs	2d22c <__assert_fail@plt+0x1aea0>
   2d1b0:	add	r3, r4, r4, lsl #2
   2d1b4:	ldr	r5, [r8, #1440]	; 0x5a0
   2d1b8:	add	r3, r4, r3, lsl #1
   2d1bc:	lsl	ip, r6, #2
   2d1c0:	add	r5, r5, r3, lsl #3
   2d1c4:	ldrd	r2, [sp, #8]
   2d1c8:	ldrd	r0, [r5, #32]
   2d1cc:	add	lr, ip, #4
   2d1d0:	add	r7, fp, ip
   2d1d4:	cmp	r1, r3
   2d1d8:	cmpeq	r0, r2
   2d1dc:	beq	2d1a0 <__assert_fail@plt+0x1ae14>
   2d1e0:	ldr	r3, [sp, #16]
   2d1e4:	ldrd	r2, [r3, #32]
   2d1e8:	cmp	r1, r3
   2d1ec:	cmpeq	r0, r2
   2d1f0:	addcc	r6, r6, #1
   2d1f4:	addcc	r7, fp, lr
   2d1f8:	strcc	r5, [fp, ip]
   2d1fc:	bcc	2d1a0 <__assert_fail@plt+0x1ae14>
   2d200:	mov	r2, #5
   2d204:	mov	r1, r9
   2d208:	mov	r0, #0
   2d20c:	bl	11ea0 <dcgettext@plt>
   2d210:	mov	r2, r4
   2d214:	ldr	r1, [r5, #32]
   2d218:	bl	417d0 <warn@@Base>
   2d21c:	ldr	r3, [r8, #1488]	; 0x5d0
   2d220:	add	r4, r4, #1
   2d224:	cmp	r4, r3
   2d228:	bcc	2d1b0 <__assert_fail@plt+0x1ae24>
   2d22c:	mov	r0, #88	; 0x58
   2d230:	bl	11f3c <xmalloc@plt>
   2d234:	ldr	r3, [sp, #16]
   2d238:	ldr	fp, [sp, #20]
   2d23c:	mov	r2, #4
   2d240:	ldrd	r4, [r3, #32]
   2d244:	mov	r1, r6
   2d248:	ldr	r3, [pc, #420]	; 2d3f4 <__assert_fail@plt+0x1b068>
   2d24c:	str	r0, [r7]
   2d250:	strd	r4, [r0, #32]
   2d254:	mov	r0, fp
   2d258:	bl	12290 <qsort@plt>
   2d25c:	cmp	r6, #0
   2d260:	beq	2d350 <__assert_fail@plt+0x1afc4>
   2d264:	ldr	sl, [pc, #396]	; 2d3f8 <__assert_fail@plt+0x1b06c>
   2d268:	add	r3, fp, r6, lsl #2
   2d26c:	str	r3, [sp, #8]
   2d270:	ldr	r3, [fp]
   2d274:	ldr	r1, [pc, #384]	; 2d3fc <__assert_fail@plt+0x1b070>
   2d278:	mov	r2, #5
   2d27c:	mov	r0, #0
   2d280:	ldr	r5, [r3]
   2d284:	bl	11ea0 <dcgettext@plt>
   2d288:	ldr	r3, [fp], #4
   2d28c:	mov	r4, #0
   2d290:	ldrd	r2, [r3, #16]
   2d294:	str	r4, [sp]
   2d298:	mov	r6, r0
   2d29c:	ldr	r0, [pc, #348]	; 2d400 <__assert_fail@plt+0x1b074>
   2d2a0:	bl	18b24 <__assert_fail@plt+0x6798>
   2d2a4:	mov	r1, r0
   2d2a8:	mov	r0, r6
   2d2ac:	bl	11dbc <printf@plt>
   2d2b0:	mov	r2, #5
   2d2b4:	ldr	r1, [pc, #328]	; 2d404 <__assert_fail@plt+0x1b078>
   2d2b8:	mov	r0, r4
   2d2bc:	bl	11ea0 <dcgettext@plt>
   2d2c0:	bl	11dbc <printf@plt>
   2d2c4:	ldr	r3, [fp, #-4]
   2d2c8:	ldr	r2, [fp]
   2d2cc:	ldr	r1, [sp, #16]
   2d2d0:	ldr	r3, [r3, #32]
   2d2d4:	ldr	r2, [r2, #32]
   2d2d8:	ldr	r8, [r1, #16]
   2d2dc:	add	r9, r8, r3
   2d2e0:	add	r8, r8, r2
   2d2e4:	cmp	r9, r8
   2d2e8:	bcs	2d344 <__assert_fail@plt+0x1afb8>
   2d2ec:	ldr	r3, [sl]
   2d2f0:	mov	r0, r9
   2d2f4:	mov	r1, r5
   2d2f8:	blx	r3
   2d2fc:	mov	r2, #5
   2d300:	add	r9, r9, r5
   2d304:	mov	r6, r0
   2d308:	mov	r7, r1
   2d30c:	mov	r0, #0
   2d310:	ldr	r1, [pc, #240]	; 2d408 <__assert_fail@plt+0x1b07c>
   2d314:	bl	11ea0 <dcgettext@plt>
   2d318:	mov	r1, r4
   2d31c:	bl	11dbc <printf@plt>
   2d320:	mov	r2, r5
   2d324:	mov	r0, r6
   2d328:	mov	r1, r7
   2d32c:	bl	18e4c <__assert_fail@plt+0x6ac0>
   2d330:	mov	r0, #10
   2d334:	bl	1211c <putchar@plt>
   2d338:	cmp	r8, r9
   2d33c:	add	r4, r4, #1
   2d340:	bhi	2d2ec <__assert_fail@plt+0x1af60>
   2d344:	ldr	r3, [sp, #8]
   2d348:	cmp	r3, fp
   2d34c:	bne	2d270 <__assert_fail@plt+0x1aee4>
   2d350:	mov	r0, #10
   2d354:	bl	1211c <putchar@plt>
   2d358:	ldr	r0, [sp, #20]
   2d35c:	bl	11e10 <free@plt>
   2d360:	mov	r0, #1
   2d364:	add	sp, sp, #28
   2d368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d36c:	mov	r2, #5
   2d370:	ldr	r1, [pc, #148]	; 2d40c <__assert_fail@plt+0x1b080>
   2d374:	bl	11ea0 <dcgettext@plt>
   2d378:	ldr	r3, [sp, #16]
   2d37c:	ldr	r1, [r3, #8]
   2d380:	bl	417d0 <warn@@Base>
   2d384:	mov	r0, r4
   2d388:	add	sp, sp, #28
   2d38c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d390:	mov	r2, #5
   2d394:	ldr	r1, [pc, #116]	; 2d410 <__assert_fail@plt+0x1b084>
   2d398:	mov	r0, #0
   2d39c:	bl	11ea0 <dcgettext@plt>
   2d3a0:	ldr	r3, [sp, #16]
   2d3a4:	ldr	r1, [r3, #8]
   2d3a8:	bl	11dbc <printf@plt>
   2d3ac:	mov	r0, #0
   2d3b0:	add	sp, sp, #28
   2d3b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d3b8:	mov	r0, #88	; 0x58
   2d3bc:	bl	11f3c <xmalloc@plt>
   2d3c0:	ldr	r3, [sp, #16]
   2d3c4:	ldr	ip, [sp, #20]
   2d3c8:	mov	r1, r4
   2d3cc:	ldrd	r6, [r3, #32]
   2d3d0:	mov	r2, #4
   2d3d4:	ldr	r3, [pc, #24]	; 2d3f4 <__assert_fail@plt+0x1b068>
   2d3d8:	str	r0, [ip]
   2d3dc:	strd	r6, [r0, #32]
   2d3e0:	mov	r0, ip
   2d3e4:	bl	12290 <qsort@plt>
   2d3e8:	b	2d350 <__assert_fail@plt+0x1afc4>
   2d3ec:	andeq	r7, r6, r0, lsr r5
   2d3f0:	andeq	pc, r4, r0, asr r1	; <UNPREDICTABLE>
   2d3f4:	andeq	r8, r1, r0, lsr #16
   2d3f8:	andeq	r9, r6, r0, ror #27
   2d3fc:	andeq	pc, r4, r8, lsl #3
   2d400:	andeq	r8, r4, r8, lsr #29
   2d404:			; <UNDEFINED> instruction: 0x0004f1b0
   2d408:	andeq	pc, r4, r0, asr #3
   2d40c:	strdeq	pc, [r4], -ip
   2d410:	ldrdeq	sl, [r4], -ip
   2d414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d418:	sub	sp, sp, #52	; 0x34
   2d41c:	ldrd	r4, [r0, #32]
   2d420:	ldr	sl, [r0, #16]
   2d424:	str	r0, [sp, #12]
   2d428:	cmp	r4, #0
   2d42c:	str	r1, [sp, #28]
   2d430:	str	r4, [sp, #32]
   2d434:	add	fp, sl, r4
   2d438:	beq	2d818 <__assert_fail@plt+0x1b48c>
   2d43c:	ldr	r3, [sp, #12]
   2d440:	ldr	r1, [pc, #1652]	; 2dabc <__assert_fail@plt+0x1b730>
   2d444:	ldr	r0, [r3, #8]
   2d448:	bl	11d5c <strstr@plt>
   2d44c:	subs	r3, r0, #0
   2d450:	str	r3, [sp, #24]
   2d454:	beq	2d940 <__assert_fail@plt+0x1b5b4>
   2d458:	add	r6, sl, #4
   2d45c:	cmp	r6, fp
   2d460:	bcs	2d4f4 <__assert_fail@plt+0x1b168>
   2d464:	mov	r1, #4
   2d468:	ldr	r7, [pc, #1616]	; 2dac0 <__assert_fail@plt+0x1b734>
   2d46c:	mov	r0, sl
   2d470:	ldr	r3, [r7]
   2d474:	blx	r3
   2d478:	mov	r3, #0
   2d47c:	mvn	r2, #0
   2d480:	cmp	r1, r3
   2d484:	cmpeq	r0, r2
   2d488:	mov	r8, r0
   2d48c:	beq	2d950 <__assert_fail@plt+0x1b5c4>
   2d490:	adds	r3, r0, #4
   2d494:	str	r3, [sp, #16]
   2d498:	adc	r3, r1, #0
   2d49c:	str	r3, [sp, #20]
   2d4a0:	ldr	r3, [sp, #12]
   2d4a4:	mov	r2, #4
   2d4a8:	ldrd	r4, [r3, #32]
   2d4ac:	ldrd	r0, [sp, #16]
   2d4b0:	cmp	r5, r1
   2d4b4:	cmpeq	r4, r0
   2d4b8:	bcc	2d530 <__assert_fail@plt+0x1b1a4>
   2d4bc:	add	r4, r6, #2
   2d4c0:	cmp	r4, fp
   2d4c4:	bcc	2d568 <__assert_fail@plt+0x1b1dc>
   2d4c8:	cmp	r6, fp
   2d4cc:	bcc	2d840 <__assert_fail@plt+0x1b4b4>
   2d4d0:	mov	r2, #5
   2d4d4:	ldr	r1, [pc, #1512]	; 2dac4 <__assert_fail@plt+0x1b738>
   2d4d8:	mov	r0, #0
   2d4dc:	bl	11ea0 <dcgettext@plt>
   2d4e0:	bl	417d0 <warn@@Base>
   2d4e4:	mov	r4, #0
   2d4e8:	mov	r0, r4
   2d4ec:	add	sp, sp, #52	; 0x34
   2d4f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4f4:	cmp	sl, fp
   2d4f8:	bcs	2d510 <__assert_fail@plt+0x1b184>
   2d4fc:	ldr	r3, [sp, #32]
   2d500:	sub	r3, r3, #1
   2d504:	cmp	r3, #7
   2d508:	movls	r1, r4
   2d50c:	bls	2d468 <__assert_fail@plt+0x1b0dc>
   2d510:	mov	r2, #4
   2d514:	mov	r3, #0
   2d518:	mov	r8, #0
   2d51c:	strd	r2, [sp, #16]
   2d520:	ldrd	r0, [sp, #16]
   2d524:	cmp	r5, r1
   2d528:	cmpeq	r4, r0
   2d52c:	bcs	2d4bc <__assert_fail@plt+0x1b130>
   2d530:	ldr	r0, [sp, #12]
   2d534:	mov	r3, #0
   2d538:	ldr	r1, [r0, #16]
   2d53c:	sub	r1, r6, r1
   2d540:	sub	r2, r1, r2
   2d544:	bl	182d4 <__assert_fail@plt+0x5f48>
   2d548:	subs	r4, r0, #0
   2d54c:	bne	2d4bc <__assert_fail@plt+0x1b130>
   2d550:	mov	r2, #5
   2d554:	ldr	r1, [pc, #1388]	; 2dac8 <__assert_fail@plt+0x1b73c>
   2d558:	bl	11ea0 <dcgettext@plt>
   2d55c:	mov	r1, r8
   2d560:	bl	417d0 <warn@@Base>
   2d564:	b	2d4e8 <__assert_fail@plt+0x1b15c>
   2d568:	mov	r1, #2
   2d56c:	ldr	r7, [pc, #1356]	; 2dac0 <__assert_fail@plt+0x1b734>
   2d570:	mov	r0, r6
   2d574:	ldr	r3, [r7]
   2d578:	blx	r3
   2d57c:	uxth	r0, r0
   2d580:	cmp	r0, #5
   2d584:	bne	2d4d0 <__assert_fail@plt+0x1b144>
   2d588:	add	r5, r6, #3
   2d58c:	cmp	r5, fp
   2d590:	bcs	2d854 <__assert_fail@plt+0x1b4c8>
   2d594:	mov	r0, r4
   2d598:	ldr	r3, [r7]
   2d59c:	mov	r1, #1
   2d5a0:	blx	r3
   2d5a4:	add	r4, r6, #4
   2d5a8:	cmp	fp, r4
   2d5ac:	uxtb	r3, r0
   2d5b0:	str	r3, [sp, #32]
   2d5b4:	bhi	2d880 <__assert_fail@plt+0x1b4f4>
   2d5b8:	sub	r1, fp, r5
   2d5bc:	sub	r3, r1, #1
   2d5c0:	cmp	r3, #7
   2d5c4:	bls	2d884 <__assert_fail@plt+0x1b4f8>
   2d5c8:	add	r3, r6, #8
   2d5cc:	cmp	fp, r3
   2d5d0:	str	r3, [sp, #16]
   2d5d4:	bls	2d5f0 <__assert_fail@plt+0x1b264>
   2d5d8:	mov	r1, #4
   2d5dc:	mov	r0, r4
   2d5e0:	ldr	r3, [r7]
   2d5e4:	blx	r3
   2d5e8:	subs	r4, r0, #0
   2d5ec:	bne	2da70 <__assert_fail@plt+0x1b6e4>
   2d5f0:	ldr	r0, [sp, #28]
   2d5f4:	bl	2d04c <__assert_fail@plt+0x1acc0>
   2d5f8:	subs	r4, r0, #0
   2d5fc:	beq	2d9c4 <__assert_fail@plt+0x1b638>
   2d600:	ldr	r3, [pc, #1220]	; 2dacc <__assert_fail@plt+0x1b740>
   2d604:	ldr	r1, [r3, #1488]	; 0x5d0
   2d608:	cmp	r1, #0
   2d60c:	beq	2d9a8 <__assert_fail@plt+0x1b61c>
   2d610:	ldr	r3, [pc, #1204]	; 2dacc <__assert_fail@plt+0x1b740>
   2d614:	add	r2, r1, r1, lsl #2
   2d618:	mov	r4, #0
   2d61c:	ldr	r3, [r3, #1440]	; 0x5a0
   2d620:	add	r1, r1, r2, lsl #1
   2d624:	add	r1, r3, r1, lsl #3
   2d628:	ldr	r2, [r3, #76]	; 0x4c
   2d62c:	add	r3, r3, #88	; 0x58
   2d630:	cmp	r3, r1
   2d634:	add	r4, r4, r2
   2d638:	bne	2d628 <__assert_fail@plt+0x1b29c>
   2d63c:	cmp	r4, #0
   2d640:	beq	2d9a8 <__assert_fail@plt+0x1b61c>
   2d644:	lsl	r0, r4, #4
   2d648:	bl	11f3c <xmalloc@plt>
   2d64c:	ldr	r3, [pc, #1144]	; 2dacc <__assert_fail@plt+0x1b740>
   2d650:	ldr	r3, [r3, #1488]	; 0x5d0
   2d654:	cmp	r3, #0
   2d658:	str	r0, [sp, #40]	; 0x28
   2d65c:	beq	2d6c0 <__assert_fail@plt+0x1b334>
   2d660:	ldr	r2, [pc, #1124]	; 2dacc <__assert_fail@plt+0x1b740>
   2d664:	add	r7, r3, r3, lsl #2
   2d668:	ldr	r6, [sp, #40]	; 0x28
   2d66c:	ldr	ip, [r2, #1440]	; 0x5a0
   2d670:	add	r3, r3, r7, lsl #1
   2d674:	add	r7, ip, r3, lsl #3
   2d678:	ldr	r5, [ip, #76]	; 0x4c
   2d67c:	cmp	r5, #0
   2d680:	beq	2d6b4 <__assert_fail@plt+0x1b328>
   2d684:	ldr	r2, [ip, #72]	; 0x48
   2d688:	add	r3, r6, #16
   2d68c:	add	lr, r2, r5, lsl #3
   2d690:	sub	lr, lr, #8
   2d694:	sub	r2, r2, #8
   2d698:	ldrd	r0, [r2, #8]!
   2d69c:	add	r3, r3, #16
   2d6a0:	str	ip, [r3, #-24]	; 0xffffffe8
   2d6a4:	cmp	lr, r2
   2d6a8:	strd	r0, [r3, #-32]	; 0xffffffe0
   2d6ac:	bne	2d698 <__assert_fail@plt+0x1b30c>
   2d6b0:	add	r6, r6, r5, lsl #4
   2d6b4:	add	ip, ip, #88	; 0x58
   2d6b8:	cmp	ip, r7
   2d6bc:	bne	2d678 <__assert_fail@plt+0x1b2ec>
   2d6c0:	ldr	r3, [pc, #1032]	; 2dad0 <__assert_fail@plt+0x1b744>
   2d6c4:	mov	r2, #16
   2d6c8:	mov	r1, r4
   2d6cc:	ldr	r0, [sp, #40]	; 0x28
   2d6d0:	bl	12290 <qsort@plt>
   2d6d4:	ldr	r3, [pc, #1008]	; 2dacc <__assert_fail@plt+0x1b740>
   2d6d8:	ldr	r3, [r3, #1828]	; 0x724
   2d6dc:	cmp	r3, #0
   2d6e0:	beq	2d6f4 <__assert_fail@plt+0x1b368>
   2d6e4:	ldr	r3, [sp, #40]	; 0x28
   2d6e8:	ldrd	r2, [r3]
   2d6ec:	orrs	r3, r2, r3
   2d6f0:	bne	2da20 <__assert_fail@plt+0x1b694>
   2d6f4:	ldr	r3, [sp, #12]
   2d6f8:	mov	r7, #0
   2d6fc:	add	r1, r3, #12
   2d700:	add	r0, r3, #8
   2d704:	bl	1a7b4 <__assert_fail@plt+0x8428>
   2d708:	mov	r2, #5
   2d70c:	ldr	r1, [pc, #960]	; 2dad4 <__assert_fail@plt+0x1b748>
   2d710:	mov	r0, #0
   2d714:	bl	11ea0 <dcgettext@plt>
   2d718:	bl	11dbc <printf@plt>
   2d71c:	ldr	r1, [sp, #24]
   2d720:	ldr	r3, [pc, #944]	; 2dad8 <__assert_fail@plt+0x1b74c>
   2d724:	ldr	r2, [pc, #944]	; 2dadc <__assert_fail@plt+0x1b750>
   2d728:	cmp	r1, #0
   2d72c:	moveq	r2, r3
   2d730:	str	r2, [sp, #36]	; 0x24
   2d734:	ldr	r5, [sp, #40]	; 0x28
   2d738:	mov	r3, sl
   2d73c:	str	r4, [sp, #28]
   2d740:	b	2d77c <__assert_fail@plt+0x1b3f0>
   2d744:	mov	r3, r6
   2d748:	str	r9, [sp]
   2d74c:	mov	r2, r8
   2d750:	mov	r1, fp
   2d754:	mov	r0, r4
   2d758:	ldr	ip, [sp, #36]	; 0x24
   2d75c:	blx	ip
   2d760:	mov	r3, r4
   2d764:	str	r4, [sp, #16]
   2d768:	ldr	r2, [sp, #28]
   2d76c:	add	r7, r7, #1
   2d770:	cmp	r2, r7
   2d774:	add	r5, r5, #16
   2d778:	beq	2d918 <__assert_fail@plt+0x1b58c>
   2d77c:	ldr	r2, [sp, #24]
   2d780:	ldr	r1, [r5, #8]
   2d784:	cmp	r2, #0
   2d788:	ldr	r6, [r5]
   2d78c:	ldrne	r8, [sp, #32]
   2d790:	ldreq	r8, [r1]
   2d794:	add	r4, sl, r6
   2d798:	sub	r2, r8, #2
   2d79c:	cmp	r2, #6
   2d7a0:	bhi	2d8c8 <__assert_fail@plt+0x1b53c>
   2d7a4:	cmp	fp, r4
   2d7a8:	movhi	r0, #0
   2d7ac:	movls	r0, #1
   2d7b0:	cmp	sl, r4
   2d7b4:	orrhi	r0, r0, #1
   2d7b8:	cmp	r0, #0
   2d7bc:	bne	2d8f0 <__assert_fail@plt+0x1b564>
   2d7c0:	ldr	r2, [pc, #772]	; 2dacc <__assert_fail@plt+0x1b740>
   2d7c4:	ldr	r9, [r1, #24]
   2d7c8:	ldr	r2, [r2, #1828]	; 0x724
   2d7cc:	cmp	r2, #0
   2d7d0:	cmpne	r7, #0
   2d7d4:	beq	2d744 <__assert_fail@plt+0x1b3b8>
   2d7d8:	ldr	r2, [sp, #16]
   2d7dc:	cmp	r4, r2
   2d7e0:	bhi	2d99c <__assert_fail@plt+0x1b610>
   2d7e4:	bcs	2d744 <__assert_fail@plt+0x1b3b8>
   2d7e8:	cmp	r4, r3
   2d7ec:	beq	2d768 <__assert_fail@plt+0x1b3dc>
   2d7f0:	ldr	r1, [pc, #744]	; 2dae0 <__assert_fail@plt+0x1b754>
   2d7f4:	mov	r2, #5
   2d7f8:	bl	11ea0 <dcgettext@plt>
   2d7fc:	ldr	r3, [sp, #16]
   2d800:	mov	r2, r6
   2d804:	sub	r1, r3, sl
   2d808:	ldr	r3, [sp, #12]
   2d80c:	ldr	r3, [r3, #8]
   2d810:	bl	417d0 <warn@@Base>
   2d814:	b	2d744 <__assert_fail@plt+0x1b3b8>
   2d818:	mov	r2, #5
   2d81c:	ldr	r1, [pc, #704]	; 2dae4 <__assert_fail@plt+0x1b758>
   2d820:	mov	r0, r4
   2d824:	bl	11ea0 <dcgettext@plt>
   2d828:	ldr	r3, [sp, #12]
   2d82c:	ldr	r1, [r3, #8]
   2d830:	bl	11dbc <printf@plt>
   2d834:	mov	r0, r4
   2d838:	add	sp, sp, #52	; 0x34
   2d83c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d840:	sub	r1, fp, r6
   2d844:	sub	r3, r1, #1
   2d848:	cmp	r3, #7
   2d84c:	bls	2d56c <__assert_fail@plt+0x1b1e0>
   2d850:	b	2d4d0 <__assert_fail@plt+0x1b144>
   2d854:	cmp	r4, fp
   2d858:	bcs	2d86c <__assert_fail@plt+0x1b4e0>
   2d85c:	sub	r1, fp, r4
   2d860:	sub	r3, r1, #1
   2d864:	cmp	r3, #7
   2d868:	bls	2da98 <__assert_fail@plt+0x1b70c>
   2d86c:	add	r4, r6, #4
   2d870:	mov	r3, #0
   2d874:	cmp	fp, r4
   2d878:	str	r3, [sp, #32]
   2d87c:	bls	2d5c8 <__assert_fail@plt+0x1b23c>
   2d880:	mov	r1, #1
   2d884:	mov	r0, r5
   2d888:	ldr	r3, [r7]
   2d88c:	blx	r3
   2d890:	uxtb	r5, r0
   2d894:	cmp	r5, #0
   2d898:	bne	2da48 <__assert_fail@plt+0x1b6bc>
   2d89c:	add	r3, r6, #8
   2d8a0:	cmp	r3, fp
   2d8a4:	str	r3, [sp, #16]
   2d8a8:	bcc	2d5d8 <__assert_fail@plt+0x1b24c>
   2d8ac:	cmp	r4, fp
   2d8b0:	bcs	2d5f0 <__assert_fail@plt+0x1b264>
   2d8b4:	sub	r1, fp, r4
   2d8b8:	sub	r3, r1, #1
   2d8bc:	cmp	r3, #7
   2d8c0:	bhi	2d5f0 <__assert_fail@plt+0x1b264>
   2d8c4:	b	2d5dc <__assert_fail@plt+0x1b250>
   2d8c8:	mov	r2, #5
   2d8cc:	ldr	r1, [pc, #532]	; 2dae8 <__assert_fail@plt+0x1b75c>
   2d8d0:	mov	r0, #0
   2d8d4:	str	r3, [sp, #44]	; 0x2c
   2d8d8:	bl	11ea0 <dcgettext@plt>
   2d8dc:	mov	r2, r6
   2d8e0:	mov	r1, r8
   2d8e4:	bl	417d0 <warn@@Base>
   2d8e8:	ldr	r3, [sp, #44]	; 0x2c
   2d8ec:	b	2d768 <__assert_fail@plt+0x1b3dc>
   2d8f0:	mov	r2, #5
   2d8f4:	ldr	r1, [pc, #496]	; 2daec <__assert_fail@plt+0x1b760>
   2d8f8:	mov	r0, #0
   2d8fc:	str	r3, [sp, #44]	; 0x2c
   2d900:	bl	11ea0 <dcgettext@plt>
   2d904:	mov	r2, r7
   2d908:	mov	r1, r6
   2d90c:	bl	417d0 <warn@@Base>
   2d910:	ldr	r3, [sp, #44]	; 0x2c
   2d914:	b	2d768 <__assert_fail@plt+0x1b3dc>
   2d918:	ldr	r3, [pc, #464]	; 2daf0 <__assert_fail@plt+0x1b764>
   2d91c:	mov	r0, #10
   2d920:	mov	r4, #1
   2d924:	ldr	r1, [r3]
   2d928:	bl	12254 <putc@plt>
   2d92c:	ldr	r0, [sp, #40]	; 0x28
   2d930:	bl	11e10 <free@plt>
   2d934:	mov	r0, r4
   2d938:	add	sp, sp, #52	; 0x34
   2d93c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d940:	ldr	r3, [sp, #24]
   2d944:	str	sl, [sp, #16]
   2d948:	str	r3, [sp, #32]
   2d94c:	b	2d5f0 <__assert_fail@plt+0x1b264>
   2d950:	add	r3, sl, #12
   2d954:	cmp	r3, fp
   2d958:	bcc	2d9e0 <__assert_fail@plt+0x1b654>
   2d95c:	cmp	r6, fp
   2d960:	bcs	2d978 <__assert_fail@plt+0x1b5ec>
   2d964:	ldr	r2, [sp, #32]
   2d968:	sub	r2, r2, #5
   2d96c:	cmp	r2, #7
   2d970:	subls	r1, r4, #4
   2d974:	bls	2d9e4 <__assert_fail@plt+0x1b658>
   2d978:	mov	r6, r3
   2d97c:	ldr	r3, [sp, #12]
   2d980:	mov	r2, #12
   2d984:	mov	r8, #0
   2d988:	ldrd	r4, [r3, #32]
   2d98c:	mov	r3, #0
   2d990:	strd	r2, [sp, #16]
   2d994:	mov	r2, #8
   2d998:	b	2d4ac <__assert_fail@plt+0x1b120>
   2d99c:	mov	r2, #5
   2d9a0:	ldr	r1, [pc, #332]	; 2daf4 <__assert_fail@plt+0x1b768>
   2d9a4:	b	2d7f8 <__assert_fail@plt+0x1b46c>
   2d9a8:	mov	r2, #5
   2d9ac:	ldr	r1, [pc, #324]	; 2daf8 <__assert_fail@plt+0x1b76c>
   2d9b0:	mov	r0, #0
   2d9b4:	bl	11ea0 <dcgettext@plt>
   2d9b8:	bl	11dbc <printf@plt>
   2d9bc:	mov	r4, #1
   2d9c0:	b	2d4e8 <__assert_fail@plt+0x1b15c>
   2d9c4:	mov	r2, #5
   2d9c8:	ldr	r1, [pc, #300]	; 2dafc <__assert_fail@plt+0x1b770>
   2d9cc:	bl	11ea0 <dcgettext@plt>
   2d9d0:	ldr	r3, [sp, #12]
   2d9d4:	ldr	r1, [r3, #8]
   2d9d8:	bl	417d0 <warn@@Base>
   2d9dc:	b	2d4e8 <__assert_fail@plt+0x1b15c>
   2d9e0:	mov	r1, #8
   2d9e4:	ldr	r2, [r7]
   2d9e8:	mov	r0, r6
   2d9ec:	str	r3, [sp, #32]
   2d9f0:	blx	r2
   2d9f4:	mov	r2, #8
   2d9f8:	adds	r3, r0, #12
   2d9fc:	str	r3, [sp, #16]
   2da00:	adc	r3, r1, #0
   2da04:	str	r3, [sp, #20]
   2da08:	ldr	r3, [sp, #32]
   2da0c:	mov	r8, r0
   2da10:	mov	r6, r3
   2da14:	ldr	r3, [sp, #12]
   2da18:	ldrd	r4, [r3, #32]
   2da1c:	b	2d4ac <__assert_fail@plt+0x1b120>
   2da20:	mov	r2, #5
   2da24:	ldr	r1, [pc, #212]	; 2db00 <__assert_fail@plt+0x1b774>
   2da28:	mov	r0, #0
   2da2c:	bl	11ea0 <dcgettext@plt>
   2da30:	ldr	r3, [sp, #40]	; 0x28
   2da34:	ldr	r2, [r3]
   2da38:	ldr	r3, [sp, #12]
   2da3c:	ldr	r1, [r3, #8]
   2da40:	bl	417d0 <warn@@Base>
   2da44:	b	2d6f4 <__assert_fail@plt+0x1b368>
   2da48:	mov	r2, #5
   2da4c:	ldr	r1, [pc, #176]	; 2db04 <__assert_fail@plt+0x1b778>
   2da50:	mov	r0, #0
   2da54:	bl	11ea0 <dcgettext@plt>
   2da58:	ldr	r3, [sp, #12]
   2da5c:	mov	r2, r5
   2da60:	mov	r4, #0
   2da64:	ldr	r1, [r3, #8]
   2da68:	bl	417d0 <warn@@Base>
   2da6c:	b	2d4e8 <__assert_fail@plt+0x1b15c>
   2da70:	mov	r2, #5
   2da74:	ldr	r1, [pc, #140]	; 2db08 <__assert_fail@plt+0x1b77c>
   2da78:	mov	r0, #0
   2da7c:	bl	11ea0 <dcgettext@plt>
   2da80:	ldr	r3, [sp, #12]
   2da84:	mov	r2, r4
   2da88:	mov	r4, #0
   2da8c:	ldr	r1, [r3, #8]
   2da90:	bl	417d0 <warn@@Base>
   2da94:	b	2d4e8 <__assert_fail@plt+0x1b15c>
   2da98:	mov	r0, r4
   2da9c:	ldr	r3, [r7]
   2daa0:	blx	r3
   2daa4:	add	r4, r6, #4
   2daa8:	cmp	fp, r4
   2daac:	uxtb	r3, r0
   2dab0:	str	r3, [sp, #32]
   2dab4:	bls	2d5c8 <__assert_fail@plt+0x1b23c>
   2dab8:	b	2d880 <__assert_fail@plt+0x1b4f4>
   2dabc:	andeq	pc, r4, r8, asr #3
   2dac0:	andeq	r9, r6, r0, ror #27
   2dac4:	andeq	pc, r4, r4, lsr r2	; <UNPREDICTABLE>
   2dac8:	ldrdeq	pc, [r4], -r8
   2dacc:	andeq	r7, r6, r0, lsr r5
   2dad0:	andeq	r8, r1, r0, lsr r8
   2dad4:	andeq	pc, r4, ip, lsl #6
   2dad8:	andeq	r9, r1, r4, lsr #22
   2dadc:	andeq	sp, r1, r8, ror #9
   2dae0:	andeq	pc, r4, r0, asr #7
   2dae4:	ldrdeq	sl, [r4], -ip
   2dae8:	andeq	pc, r4, r8, lsr #6
   2daec:	andeq	pc, r4, r4, ror #6
   2daf0:	andeq	r7, r6, r0, lsr r4
   2daf4:	muleq	r4, r0, r3
   2daf8:			; <UNDEFINED> instruction: 0x0004f2b8
   2dafc:	strdeq	pc, [r4], -ip
   2db00:	andeq	pc, r4, r0, ror #5
   2db04:	andeq	sl, r4, r0, asr #20
   2db08:	andeq	pc, r4, r8, ror r2	; <UNPREDICTABLE>
   2db0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2db10:	sub	sp, sp, #252	; 0xfc
   2db14:	ldr	r3, [r0, #16]
   2db18:	ldr	r4, [r0, #8]
   2db1c:	mov	r2, r3
   2db20:	str	r3, [sp, #148]	; 0x94
   2db24:	mov	r3, #0
   2db28:	str	r0, [sp, #80]	; 0x50
   2db2c:	mov	r9, r1
   2db30:	mov	r0, r4
   2db34:	mov	r1, #46	; 0x2e
   2db38:	strd	r2, [sp, #236]	; 0xec
   2db3c:	bl	121e8 <strrchr@plt>
   2db40:	subs	r3, r0, #0
   2db44:	streq	r3, [sp, #180]	; 0xb4
   2db48:	beq	2db60 <__assert_fail@plt+0x1b7d4>
   2db4c:	ldr	r1, [pc, #3712]	; 2e9d4 <__assert_fail@plt+0x1c648>
   2db50:	bl	11d98 <strcmp@plt>
   2db54:	clz	r3, r0
   2db58:	lsr	r3, r3, #5
   2db5c:	str	r3, [sp, #180]	; 0xb4
   2db60:	ldr	r3, [sp, #80]	; 0x50
   2db64:	ldr	r3, [r3, #32]
   2db68:	cmp	r3, #0
   2db6c:	str	r3, [sp, #176]	; 0xb0
   2db70:	beq	2de38 <__assert_fail@plt+0x1baac>
   2db74:	mov	r0, r4
   2db78:	ldr	r1, [pc, #3672]	; 2e9d8 <__assert_fail@plt+0x1c64c>
   2db7c:	bl	11d5c <strstr@plt>
   2db80:	subs	r3, r0, #0
   2db84:	str	r3, [sp, #196]	; 0xc4
   2db88:	beq	2f4a4 <__assert_fail@plt+0x1d118>
   2db8c:	ldr	r3, [sp, #148]	; 0x94
   2db90:	ldr	r2, [sp, #176]	; 0xb0
   2db94:	add	r4, r3, #4
   2db98:	add	r5, r3, r2
   2db9c:	cmp	r4, r5
   2dba0:	bcs	2dbf8 <__assert_fail@plt+0x1b86c>
   2dba4:	mov	r1, #4
   2dba8:	ldr	r6, [pc, #3788]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2dbac:	ldr	r0, [sp, #148]	; 0x94
   2dbb0:	ldr	r3, [r6]
   2dbb4:	blx	r3
   2dbb8:	mov	r3, #0
   2dbbc:	mvn	r2, #0
   2dbc0:	cmp	r1, r3
   2dbc4:	cmpeq	r0, r2
   2dbc8:	beq	2f4d4 <__assert_fail@plt+0x1d148>
   2dbcc:	add	r7, r4, #2
   2dbd0:	cmp	r7, r5
   2dbd4:	bcc	2dee0 <__assert_fail@plt+0x1bb54>
   2dbd8:	cmp	r4, r5
   2dbdc:	bcs	2dbf0 <__assert_fail@plt+0x1b864>
   2dbe0:	sub	r1, r5, r4
   2dbe4:	sub	r3, r1, #1
   2dbe8:	cmp	r3, #7
   2dbec:	bls	2dc14 <__assert_fail@plt+0x1b888>
   2dbf0:	mov	r4, #0
   2dbf4:	b	2dc30 <__assert_fail@plt+0x1b8a4>
   2dbf8:	cmp	r3, r5
   2dbfc:	bcc	2de64 <__assert_fail@plt+0x1bad8>
   2dc00:	add	r7, r4, #2
   2dc04:	cmp	r5, r7
   2dc08:	bls	2dbf0 <__assert_fail@plt+0x1b864>
   2dc0c:	ldr	r6, [pc, #3688]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2dc10:	mov	r1, #2
   2dc14:	ldr	r3, [r6]
   2dc18:	mov	r0, r4
   2dc1c:	blx	r3
   2dc20:	uxth	r0, r0
   2dc24:	cmp	r0, #5
   2dc28:	beq	2dc5c <__assert_fail@plt+0x1b8d0>
   2dc2c:	mov	r4, r0
   2dc30:	mov	r2, #5
   2dc34:	ldr	r1, [pc, #3488]	; 2e9dc <__assert_fail@plt+0x1c650>
   2dc38:	mov	r0, #0
   2dc3c:	bl	11ea0 <dcgettext@plt>
   2dc40:	ldr	r3, [sp, #80]	; 0x50
   2dc44:	mov	r2, r4
   2dc48:	ldr	r1, [r3, #8]
   2dc4c:	bl	417d0 <warn@@Base>
   2dc50:	mov	r0, #0
   2dc54:	add	sp, sp, #252	; 0xfc
   2dc58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc5c:	add	r8, r4, #3
   2dc60:	cmp	r8, r5
   2dc64:	bcs	2de78 <__assert_fail@plt+0x1baec>
   2dc68:	mov	r0, r7
   2dc6c:	ldr	r3, [r6]
   2dc70:	mov	r1, #1
   2dc74:	add	r7, r4, #4
   2dc78:	blx	r3
   2dc7c:	cmp	r5, r7
   2dc80:	bhi	2de9c <__assert_fail@plt+0x1bb10>
   2dc84:	sub	r1, r5, r8
   2dc88:	sub	r3, r1, #1
   2dc8c:	cmp	r3, #7
   2dc90:	bls	2dea0 <__assert_fail@plt+0x1bb14>
   2dc94:	add	r4, r4, #8
   2dc98:	cmp	r5, r4
   2dc9c:	bls	2dcb8 <__assert_fail@plt+0x1b92c>
   2dca0:	mov	r1, #4
   2dca4:	ldr	r3, [r6]
   2dca8:	mov	r0, r7
   2dcac:	blx	r3
   2dcb0:	subs	r5, r0, #0
   2dcb4:	bne	2f690 <__assert_fail@plt+0x1d304>
   2dcb8:	ldr	r3, [sp, #148]	; 0x94
   2dcbc:	sub	r4, r4, r3
   2dcc0:	mov	r2, r4
   2dcc4:	asr	r3, r4, #31
   2dcc8:	strd	r2, [sp, #64]	; 0x40
   2dccc:	mov	r0, r9
   2dcd0:	bl	2d04c <__assert_fail@plt+0x1acc0>
   2dcd4:	subs	r4, r0, #0
   2dcd8:	beq	2f5c4 <__assert_fail@plt+0x1d238>
   2dcdc:	ldr	r3, [pc, #3452]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2dce0:	ldr	r3, [r3, #1488]	; 0x5d0
   2dce4:	cmp	r3, #0
   2dce8:	str	r3, [sp, #40]	; 0x28
   2dcec:	streq	r3, [sp, #24]
   2dcf0:	streq	r3, [sp, #144]	; 0x90
   2dcf4:	moveq	r3, #1
   2dcf8:	streq	r3, [sp, #168]	; 0xa8
   2dcfc:	beq	2f5a0 <__assert_fail@plt+0x1d214>
   2dd00:	ldr	r3, [pc, #3416]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2dd04:	mov	r2, #0
   2dd08:	mov	r6, r2
   2dd0c:	ldr	r3, [r3, #1440]	; 0x5a0
   2dd10:	str	r2, [sp, #144]	; 0x90
   2dd14:	str	r3, [sp, #60]	; 0x3c
   2dd18:	mov	fp, r3
   2dd1c:	mov	sl, r2
   2dd20:	mov	r7, r2
   2dd24:	str	r2, [sp, #24]
   2dd28:	mov	r1, #1
   2dd2c:	b	2dd44 <__assert_fail@plt+0x1b9b8>
   2dd30:	ldr	r3, [sp, #40]	; 0x28
   2dd34:	add	r6, r6, #1
   2dd38:	cmp	r3, r6
   2dd3c:	add	fp, fp, #88	; 0x58
   2dd40:	beq	2dee8 <__assert_fail@plt+0x1bb5c>
   2dd44:	ldr	r3, [sp, #24]
   2dd48:	ldr	r8, [fp, #60]	; 0x3c
   2dd4c:	cmp	r3, r8
   2dd50:	movcc	r3, r8
   2dd54:	cmp	r8, #0
   2dd58:	str	r3, [sp, #24]
   2dd5c:	movne	r3, r1
   2dd60:	moveq	r3, #0
   2dd64:	cmp	r3, #0
   2dd68:	beq	2dd30 <__assert_fail@plt+0x1b9a4>
   2dd6c:	cmp	r2, #0
   2dd70:	movne	ip, #0
   2dd74:	bne	2dd8c <__assert_fail@plt+0x1ba00>
   2dd78:	ldrd	r2, [fp, #48]	; 0x30
   2dd7c:	mov	ip, #1
   2dd80:	str	r6, [sp, #144]	; 0x90
   2dd84:	ldr	r7, [r2]
   2dd88:	ldr	sl, [r3]
   2dd8c:	cmp	r8, ip
   2dd90:	bls	2f6b8 <__assert_fail@plt+0x1d32c>
   2dd94:	ldr	r9, [fp, #48]	; 0x30
   2dd98:	lsl	lr, ip, #3
   2dd9c:	mov	r1, #0
   2dda0:	ldrd	r2, [r9, lr]
   2dda4:	mov	r0, r7
   2dda8:	add	r9, r9, lr
   2ddac:	cmp	r1, r3
   2ddb0:	cmpeq	r7, r2
   2ddb4:	bhi	2f6c4 <__assert_fail@plt+0x1d338>
   2ddb8:	ldr	r4, [fp, #52]	; 0x34
   2ddbc:	sub	lr, lr, #8
   2ddc0:	str	r6, [sp, #52]	; 0x34
   2ddc4:	str	fp, [sp, #56]	; 0x38
   2ddc8:	add	lr, r4, lr
   2ddcc:	mov	fp, r8
   2ddd0:	mov	r6, r9
   2ddd4:	b	2ddf8 <__assert_fail@plt+0x1ba6c>
   2ddd8:	cmp	fp, ip
   2dddc:	mov	r7, r2
   2dde0:	mov	sl, r4
   2dde4:	beq	2f490 <__assert_fail@plt+0x1d104>
   2dde8:	ldrd	r2, [r6, #8]!
   2ddec:	cmp	r3, r1
   2ddf0:	cmpeq	r2, r0
   2ddf4:	bcc	2de24 <__assert_fail@plt+0x1ba98>
   2ddf8:	cmp	r3, r1
   2ddfc:	cmpeq	r2, r0
   2de00:	add	ip, ip, #1
   2de04:	mov	r0, r2
   2de08:	mov	r1, #0
   2de0c:	ldrd	r4, [lr, #8]!
   2de10:	bne	2ddd8 <__assert_fail@plt+0x1ba4c>
   2de14:	mov	r9, #0
   2de18:	cmp	r9, r5
   2de1c:	cmpeq	sl, r4
   2de20:	bls	2ddd8 <__assert_fail@plt+0x1ba4c>
   2de24:	ldr	r6, [sp, #52]	; 0x34
   2de28:	ldr	fp, [sp, #56]	; 0x38
   2de2c:	mov	r1, #0
   2de30:	mov	r2, #1
   2de34:	b	2dd30 <__assert_fail@plt+0x1b9a4>
   2de38:	mov	r2, #5
   2de3c:	ldr	r1, [pc, #2972]	; 2e9e0 <__assert_fail@plt+0x1c654>
   2de40:	mov	r0, r3
   2de44:	mov	r4, r3
   2de48:	bl	11ea0 <dcgettext@plt>
   2de4c:	ldr	r3, [sp, #80]	; 0x50
   2de50:	ldr	r1, [r3, #8]
   2de54:	bl	11dbc <printf@plt>
   2de58:	mov	r0, r4
   2de5c:	add	sp, sp, #252	; 0xfc
   2de60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2de64:	sub	r3, r2, #1
   2de68:	cmp	r3, #7
   2de6c:	movls	r1, r2
   2de70:	bhi	2dc00 <__assert_fail@plt+0x1b874>
   2de74:	b	2dba8 <__assert_fail@plt+0x1b81c>
   2de78:	cmp	r5, r7
   2de7c:	bls	2de90 <__assert_fail@plt+0x1bb04>
   2de80:	sub	r1, r5, r7
   2de84:	sub	r3, r1, #1
   2de88:	cmp	r3, #7
   2de8c:	bls	2f6d0 <__assert_fail@plt+0x1d344>
   2de90:	add	r7, r4, #4
   2de94:	cmp	r5, r7
   2de98:	bls	2dc94 <__assert_fail@plt+0x1b908>
   2de9c:	mov	r1, #1
   2dea0:	mov	r0, r8
   2dea4:	ldr	r3, [r6]
   2dea8:	blx	r3
   2deac:	uxtb	r8, r0
   2deb0:	cmp	r8, #0
   2deb4:	bne	2f668 <__assert_fail@plt+0x1d2dc>
   2deb8:	add	r4, r4, #8
   2debc:	cmp	r4, r5
   2dec0:	bcc	2dca0 <__assert_fail@plt+0x1b914>
   2dec4:	cmp	r5, r7
   2dec8:	bls	2dcb8 <__assert_fail@plt+0x1b92c>
   2decc:	sub	r1, r5, r7
   2ded0:	sub	r3, r1, #1
   2ded4:	cmp	r3, #7
   2ded8:	bhi	2dcb8 <__assert_fail@plt+0x1b92c>
   2dedc:	b	2dca4 <__assert_fail@plt+0x1b918>
   2dee0:	mov	r1, #2
   2dee4:	b	2dc14 <__assert_fail@plt+0x1b888>
   2dee8:	str	r1, [sp, #168]	; 0xa8
   2deec:	ldr	r1, [sp, #144]	; 0x90
   2def0:	cmp	r2, #0
   2def4:	add	r3, r1, r1, lsl #2
   2def8:	add	r3, r1, r3, lsl #1
   2defc:	lsl	r3, r3, #3
   2df00:	str	r3, [sp, #40]	; 0x28
   2df04:	beq	2f5a0 <__assert_fail@plt+0x1d214>
   2df08:	ldr	r3, [sp, #60]	; 0x3c
   2df0c:	ldr	r2, [sp, #40]	; 0x28
   2df10:	add	r5, r3, r2
   2df14:	ldr	r3, [r5, #60]	; 0x3c
   2df18:	cmp	r3, #0
   2df1c:	beq	2df4c <__assert_fail@plt+0x1bbc0>
   2df20:	ldr	r3, [r5, #48]	; 0x30
   2df24:	ldrd	r0, [sp, #64]	; 0x40
   2df28:	ldrd	r2, [r3]
   2df2c:	cmp	r3, r1
   2df30:	cmpeq	r2, r0
   2df34:	beq	2df4c <__assert_fail@plt+0x1bbc0>
   2df38:	ldr	r3, [r5, #52]	; 0x34
   2df3c:	ldrd	r2, [r3]
   2df40:	cmp	r3, r1
   2df44:	cmpeq	r2, r0
   2df48:	bne	2f5fc <__assert_fail@plt+0x1d270>
   2df4c:	ldr	r3, [sp, #168]	; 0xa8
   2df50:	cmp	r3, #0
   2df54:	movne	r3, #0
   2df58:	strne	r3, [sp, #216]	; 0xd8
   2df5c:	beq	2f58c <__assert_fail@plt+0x1d200>
   2df60:	ldr	r4, [sp, #80]	; 0x50
   2df64:	add	r1, r4, #12
   2df68:	add	r0, r4, #8
   2df6c:	bl	1a7b4 <__assert_fail@plt+0x8428>
   2df70:	mov	r2, #0
   2df74:	mov	r3, #0
   2df78:	mov	r0, r4
   2df7c:	bl	182d4 <__assert_fail@plt+0x5f48>
   2df80:	cmp	r0, #0
   2df84:	bne	2f574 <__assert_fail@plt+0x1d1e8>
   2df88:	mov	r2, #5
   2df8c:	ldr	r1, [pc, #2640]	; 2e9e4 <__assert_fail@plt+0x1c658>
   2df90:	mov	r0, #0
   2df94:	bl	11ea0 <dcgettext@plt>
   2df98:	bl	11dbc <printf@plt>
   2df9c:	ldr	r3, [pc, #2748]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2dfa0:	ldr	r2, [sp, #144]	; 0x90
   2dfa4:	ldr	r3, [r3, #1488]	; 0x5d0
   2dfa8:	cmp	r2, r3
   2dfac:	ldr	r3, [pc, #2612]	; 2e9e8 <__assert_fail@plt+0x1c65c>
   2dfb0:	movcc	r7, #0
   2dfb4:	str	r3, [sp, #212]	; 0xd4
   2dfb8:	bcs	2e8a8 <__assert_fail@plt+0x1c51c>
   2dfbc:	ldr	r1, [sp, #144]	; 0x90
   2dfc0:	ldr	r3, [pc, #2712]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2dfc4:	add	r2, r1, r1, lsl #2
   2dfc8:	ldr	r3, [r3, #1440]	; 0x5a0
   2dfcc:	add	r2, r1, r2, lsl #1
   2dfd0:	ldr	r1, [sp, #168]	; 0xa8
   2dfd4:	lsl	r2, r2, #3
   2dfd8:	add	r3, r3, r2
   2dfdc:	cmp	r1, #0
   2dfe0:	str	r2, [sp, #140]	; 0x8c
   2dfe4:	ldr	r1, [r3, #60]	; 0x3c
   2dfe8:	beq	2f2c8 <__assert_fail@plt+0x1cf3c>
   2dfec:	cmp	r1, #0
   2dff0:	beq	2e88c <__assert_fail@plt+0x1c500>
   2dff4:	ldr	r2, [sp, #216]	; 0xd8
   2dff8:	sub	r2, r2, #4
   2dffc:	str	r2, [sp, #60]	; 0x3c
   2e000:	mov	r2, #1
   2e004:	str	r2, [sp, #84]	; 0x54
   2e008:	mov	r2, #0
   2e00c:	str	r2, [sp, #52]	; 0x34
   2e010:	b	2e224 <__assert_fail@plt+0x1be98>
   2e014:	ldr	r2, [sp, #60]	; 0x3c
   2e018:	ldr	r0, [sp, #52]	; 0x34
   2e01c:	ldr	r2, [r2, #4]
   2e020:	cmp	r0, #0
   2e024:	lsl	r0, r2, #3
   2e028:	ldrd	r4, [r1, r0]
   2e02c:	strd	r4, [sp, #24]
   2e030:	ldrd	r4, [ip, r0]
   2e034:	beq	2e058 <__assert_fail@plt+0x1bccc>
   2e038:	ldr	r0, [sp, #60]	; 0x3c
   2e03c:	ldr	lr, [r0]
   2e040:	lsl	lr, lr, #3
   2e044:	ldrd	r0, [r1, lr]
   2e048:	ldrd	r8, [sp, #24]
   2e04c:	cmp	r1, r9
   2e050:	cmpeq	r0, r8
   2e054:	beq	2e854 <__assert_fail@plt+0x1c4c8>
   2e058:	lsl	r2, r2, #2
   2e05c:	ldr	r1, [r3, #56]	; 0x38
   2e060:	mvn	r9, #0
   2e064:	mvn	r8, #0
   2e068:	cmp	r5, r9
   2e06c:	cmpeq	r4, r8
   2e070:	ldrd	r8, [sp, #24]
   2e074:	ldr	r2, [r1, r2]
   2e078:	ldr	r1, [sp, #148]	; 0x94
   2e07c:	ldr	r0, [r3, #24]
   2e080:	ldr	r3, [r3, #28]
   2e084:	str	r2, [sp, #108]	; 0x6c
   2e088:	add	r2, r1, r8
   2e08c:	str	r8, [sp, #136]	; 0x88
   2e090:	str	r2, [sp, #56]	; 0x38
   2e094:	str	r0, [sp, #112]	; 0x70
   2e098:	str	r3, [sp, #64]	; 0x40
   2e09c:	beq	2e260 <__assert_fail@plt+0x1bed4>
   2e0a0:	adds	fp, r1, r4
   2e0a4:	movne	r6, #1
   2e0a8:	moveq	r6, #0
   2e0ac:	str	r6, [sp, #104]	; 0x68
   2e0b0:	cmp	r2, fp
   2e0b4:	movls	r6, #0
   2e0b8:	andhi	r6, r6, #1
   2e0bc:	cmp	r6, #0
   2e0c0:	beq	2e0ec <__assert_fail@plt+0x1bd60>
   2e0c4:	mov	r3, r2
   2e0c8:	add	r1, sp, #240	; 0xf0
   2e0cc:	ldr	r2, [sp, #144]	; 0x90
   2e0d0:	ldr	r0, [sp, #80]	; 0x50
   2e0d4:	str	fp, [sp, #240]	; 0xf0
   2e0d8:	bl	1d9d8 <__assert_fail@plt+0xb64c>
   2e0dc:	ldr	r3, [sp, #236]	; 0xec
   2e0e0:	cmp	r3, fp
   2e0e4:	strne	r6, [sp, #104]	; 0x68
   2e0e8:	beq	2eed4 <__assert_fail@plt+0x1cb48>
   2e0ec:	ldr	r3, [sp, #84]	; 0x54
   2e0f0:	eor	r7, r7, #1
   2e0f4:	eor	r0, r3, #1
   2e0f8:	orrs	r0, r7, r0
   2e0fc:	bne	2e114 <__assert_fail@plt+0x1bd88>
   2e100:	ldr	r3, [sp, #236]	; 0xec
   2e104:	ldr	r2, [sp, #56]	; 0x38
   2e108:	cmp	r3, r2
   2e10c:	bcc	2e868 <__assert_fail@plt+0x1c4dc>
   2e110:	bhi	2e8f8 <__assert_fail@plt+0x1c56c>
   2e114:	ldr	r3, [sp, #176]	; 0xb0
   2e118:	mov	r0, #0
   2e11c:	str	r3, [sp, #32]
   2e120:	str	r0, [sp, #36]	; 0x24
   2e124:	ldrd	r2, [sp, #32]
   2e128:	ldrd	r6, [sp, #24]
   2e12c:	str	fp, [sp, #240]	; 0xf0
   2e130:	cmp	r3, r7
   2e134:	ldr	r3, [sp, #56]	; 0x38
   2e138:	cmpeq	r2, r6
   2e13c:	str	r3, [sp, #236]	; 0xec
   2e140:	mvn	r2, #0
   2e144:	bls	2e838 <__assert_fail@plt+0x1c4ac>
   2e148:	ldrd	r6, [sp, #32]
   2e14c:	cmp	r7, r5
   2e150:	cmpeq	r6, r4
   2e154:	movls	r3, #1
   2e158:	movhi	r3, #0
   2e15c:	cmp	fp, #0
   2e160:	moveq	r3, #0
   2e164:	cmp	r3, #0
   2e168:	bne	2e904 <__assert_fail@plt+0x1c578>
   2e16c:	ldr	r1, [sp, #196]	; 0xc4
   2e170:	cmp	r1, #0
   2e174:	beq	2e760 <__assert_fail@plt+0x1c3d4>
   2e178:	ldr	r2, [sp, #180]	; 0xb4
   2e17c:	cmp	r2, #0
   2e180:	beq	2e28c <__assert_fail@plt+0x1bf00>
   2e184:	mov	r0, r3
   2e188:	mov	r2, #5
   2e18c:	ldr	r1, [pc, #2136]	; 2e9ec <__assert_fail@plt+0x1c660>
   2e190:	bl	11ea0 <dcgettext@plt>
   2e194:	bl	417d0 <warn@@Base>
   2e198:	ldr	r3, [sp, #104]	; 0x68
   2e19c:	ldr	r2, [sp, #84]	; 0x54
   2e1a0:	tst	r3, r2
   2e1a4:	beq	2e254 <__assert_fail@plt+0x1bec8>
   2e1a8:	ldrd	r2, [sp, #236]	; 0xec
   2e1ac:	cmp	r2, fp
   2e1b0:	beq	2e920 <__assert_fail@plt+0x1c594>
   2e1b4:	ldr	r2, [sp, #56]	; 0x38
   2e1b8:	cmp	r2, r3
   2e1bc:	beq	2e8e8 <__assert_fail@plt+0x1c55c>
   2e1c0:	mov	r2, #5
   2e1c4:	ldr	r1, [pc, #2084]	; 2e9f0 <__assert_fail@plt+0x1c664>
   2e1c8:	mov	r0, #0
   2e1cc:	bl	11ea0 <dcgettext@plt>
   2e1d0:	bl	417d0 <warn@@Base>
   2e1d4:	mov	r3, #0
   2e1d8:	str	r3, [sp, #84]	; 0x54
   2e1dc:	ldr	r3, [sp, #236]	; 0xec
   2e1e0:	cmp	r3, fp
   2e1e4:	ldreq	r3, [sp, #240]	; 0xf0
   2e1e8:	beq	2e928 <__assert_fail@plt+0x1c59c>
   2e1ec:	mov	r7, #1
   2e1f0:	ldr	r3, [pc, #2152]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2e1f4:	ldr	r2, [sp, #52]	; 0x34
   2e1f8:	ldr	r3, [r3, #1440]	; 0x5a0
   2e1fc:	add	r1, r2, #1
   2e200:	ldr	r2, [sp, #140]	; 0x8c
   2e204:	str	r1, [sp, #52]	; 0x34
   2e208:	add	r3, r3, r2
   2e20c:	ldr	r2, [sp, #60]	; 0x3c
   2e210:	add	r2, r2, #4
   2e214:	str	r2, [sp, #60]	; 0x3c
   2e218:	ldr	r2, [r3, #60]	; 0x3c
   2e21c:	cmp	r2, r1
   2e220:	bls	2e88c <__assert_fail@plt+0x1c500>
   2e224:	ldr	r2, [sp, #168]	; 0xa8
   2e228:	ldr	r1, [r3, #48]	; 0x30
   2e22c:	cmp	r2, #0
   2e230:	ldr	ip, [r3, #52]	; 0x34
   2e234:	beq	2e014 <__assert_fail@plt+0x1bc88>
   2e238:	ldr	r2, [sp, #52]	; 0x34
   2e23c:	cmp	r2, #0
   2e240:	bne	2e26c <__assert_fail@plt+0x1bee0>
   2e244:	ldrd	r0, [r1]
   2e248:	ldrd	r4, [ip]
   2e24c:	strd	r0, [sp, #24]
   2e250:	b	2e05c <__assert_fail@plt+0x1bcd0>
   2e254:	cmp	fp, #0
   2e258:	beq	2e1ec <__assert_fail@plt+0x1be60>
   2e25c:	b	2e1dc <__assert_fail@plt+0x1be50>
   2e260:	mov	fp, #0
   2e264:	str	fp, [sp, #104]	; 0x68
   2e268:	b	2e0ec <__assert_fail@plt+0x1bd60>
   2e26c:	ldr	r0, [sp, #52]	; 0x34
   2e270:	lsl	r2, r0, #3
   2e274:	sub	lr, r2, #8
   2e278:	ldrd	r4, [r1, r2]
   2e27c:	strd	r4, [sp, #24]
   2e280:	ldrd	r4, [ip, r2]
   2e284:	mov	r2, r0
   2e288:	b	2e044 <__assert_fail@plt+0x1bcb8>
   2e28c:	ldr	r3, [pc, #1996]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2e290:	ldr	r2, [sp, #144]	; 0x90
   2e294:	ldr	r3, [r3, #1488]	; 0x5d0
   2e298:	cmp	r2, r3
   2e29c:	bcs	2f234 <__assert_fail@plt+0x1cea8>
   2e2a0:	ldr	r3, [pc, #1976]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2e2a4:	ldr	r1, [sp, #140]	; 0x8c
   2e2a8:	ldr	r2, [r3, #1440]	; 0x5a0
   2e2ac:	add	r3, r2, r1
   2e2b0:	ldr	r9, [r2, r1]
   2e2b4:	sub	r2, r9, #2
   2e2b8:	cmp	r2, #6
   2e2bc:	bhi	2f214 <__assert_fail@plt+0x1ce88>
   2e2c0:	ldr	r2, [sp, #80]	; 0x50
   2e2c4:	ldr	sl, [sp, #56]	; 0x38
   2e2c8:	mov	r8, fp
   2e2cc:	ldr	r5, [r2, #16]
   2e2d0:	ldr	r2, [r2, #32]
   2e2d4:	str	fp, [sp, #120]	; 0x78
   2e2d8:	add	r5, r5, r2
   2e2dc:	ldr	r2, [r3, #16]
   2e2e0:	ldr	fp, [sp, #112]	; 0x70
   2e2e4:	str	r2, [sp, #200]	; 0xc8
   2e2e8:	ldr	r2, [r3, #4]
   2e2ec:	ldr	r3, [r3, #8]
   2e2f0:	mvn	r0, #0
   2e2f4:	mvn	r1, #0
   2e2f8:	str	r3, [sp, #192]	; 0xc0
   2e2fc:	mov	r3, sl
   2e300:	strd	r0, [sp, #88]	; 0x58
   2e304:	strd	r0, [sp, #40]	; 0x28
   2e308:	str	r2, [sp, #172]	; 0xac
   2e30c:	ldrd	r0, [sp, #24]
   2e310:	sub	r3, sl, r3
   2e314:	add	r4, sl, #1
   2e318:	adds	r0, r0, r3
   2e31c:	cmp	r5, r4
   2e320:	bcc	2f3f0 <__assert_fail@plt+0x1d064>
   2e324:	mov	r1, r0
   2e328:	ldr	r0, [pc, #1768]	; 2ea18 <__assert_fail@plt+0x1c68c>
   2e32c:	bl	11dbc <printf@plt>
   2e330:	cmp	r5, r4
   2e334:	bne	2e3ac <__assert_fail@plt+0x1c020>
   2e338:	cmp	r5, sl
   2e33c:	bhi	2e3ac <__assert_fail@plt+0x1c020>
   2e340:	mov	r2, #5
   2e344:	ldr	r1, [pc, #1748]	; 2ea20 <__assert_fail@plt+0x1c694>
   2e348:	mov	r0, #0
   2e34c:	ldr	fp, [sp, #120]	; 0x78
   2e350:	bl	11ea0 <dcgettext@plt>
   2e354:	bl	11dbc <printf@plt>
   2e358:	ldrd	r0, [sp, #40]	; 0x28
   2e35c:	ldrd	r2, [sp, #88]	; 0x58
   2e360:	mov	ip, r0
   2e364:	and	r1, r1, r3
   2e368:	and	ip, ip, r2
   2e36c:	str	r1, [sp, #228]	; 0xe4
   2e370:	str	ip, [sp, #224]	; 0xe0
   2e374:	ldrd	r2, [sp, #224]	; 0xe0
   2e378:	mvn	r1, #0
   2e37c:	mvn	r0, #0
   2e380:	cmp	r3, r1
   2e384:	cmpeq	r2, r0
   2e388:	beq	2e3a0 <__assert_fail@plt+0x1c014>
   2e38c:	mov	r2, #5
   2e390:	ldr	r1, [pc, #1628]	; 2e9f4 <__assert_fail@plt+0x1c668>
   2e394:	mov	r0, #0
   2e398:	bl	11ea0 <dcgettext@plt>
   2e39c:	bl	11dbc <printf@plt>
   2e3a0:	str	r4, [sp, #236]	; 0xec
   2e3a4:	str	r8, [sp, #240]	; 0xf0
   2e3a8:	b	2e198 <__assert_fail@plt+0x1be0c>
   2e3ac:	ldr	r3, [pc, #1736]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2e3b0:	mov	r0, sl
   2e3b4:	mov	r1, #1
   2e3b8:	ldr	r3, [r3]
   2e3bc:	blx	r3
   2e3c0:	cmp	r8, #0
   2e3c4:	sub	r3, r0, #4
   2e3c8:	clz	r3, r3
   2e3cc:	lsr	r3, r3, #5
   2e3d0:	moveq	r3, #0
   2e3d4:	cmp	r3, #0
   2e3d8:	beq	2e62c <__assert_fail@plt+0x1c2a0>
   2e3dc:	ldr	ip, [sp, #236]	; 0xec
   2e3e0:	ldrd	r6, [sp, #24]
   2e3e4:	add	sl, sp, #244	; 0xf4
   2e3e8:	sub	ip, r8, ip
   2e3ec:	mov	r3, r5
   2e3f0:	mov	r2, #0
   2e3f4:	mov	r0, r8
   2e3f8:	mov	r1, sl
   2e3fc:	adds	r6, r6, ip
   2e400:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2e404:	ldr	r3, [sp, #244]	; 0xf4
   2e408:	mov	r2, r9
   2e40c:	add	r8, r8, r3
   2e410:	strd	r0, [sp, #40]	; 0x28
   2e414:	bl	1a6e4 <__assert_fail@plt+0x8358>
   2e418:	mov	r3, r5
   2e41c:	mov	r0, r8
   2e420:	mov	r2, #0
   2e424:	mov	r1, sl
   2e428:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2e42c:	ldr	r3, [sp, #244]	; 0xf4
   2e430:	mov	r2, r9
   2e434:	add	r8, r8, r3
   2e438:	strd	r0, [sp, #88]	; 0x58
   2e43c:	bl	1a6e4 <__assert_fail@plt+0x8358>
   2e440:	mov	r2, #5
   2e444:	ldr	r1, [pc, #1496]	; 2ea24 <__assert_fail@plt+0x1c698>
   2e448:	mov	r0, #0
   2e44c:	bl	11ea0 <dcgettext@plt>
   2e450:	mov	r1, r6
   2e454:	ldr	r3, [pc, #1484]	; 2ea28 <__assert_fail@plt+0x1c69c>
   2e458:	mov	r2, #8
   2e45c:	bl	11dbc <printf@plt>
   2e460:	mov	r3, r5
   2e464:	mov	r2, #0
   2e468:	mov	r0, r4
   2e46c:	mov	r1, sl
   2e470:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2e474:	ldr	r2, [sp, #244]	; 0xf4
   2e478:	mov	r3, r5
   2e47c:	add	r4, r4, r2
   2e480:	mov	r2, #0
   2e484:	strd	r0, [sp, #112]	; 0x70
   2e488:	mov	r0, r4
   2e48c:	mov	r1, sl
   2e490:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2e494:	ldr	r3, [sp, #244]	; 0xf4
   2e498:	add	r4, r4, r3
   2e49c:	add	r3, r4, #2
   2e4a0:	cmp	r5, r3
   2e4a4:	strd	r0, [sp, #96]	; 0x60
   2e4a8:	bcc	2f4b4 <__assert_fail@plt+0x1d128>
   2e4ac:	mov	r1, sl
   2e4b0:	mov	r3, r5
   2e4b4:	mov	r2, #0
   2e4b8:	mov	r0, r4
   2e4bc:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2e4c0:	ldrd	r2, [sp, #112]	; 0x70
   2e4c4:	ldr	r6, [sp, #64]	; 0x40
   2e4c8:	ldr	ip, [sp, #244]	; 0xf4
   2e4cc:	add	r4, r4, ip
   2e4d0:	mov	sl, r0
   2e4d4:	adds	r0, r2, fp
   2e4d8:	str	r1, [sp, #160]	; 0xa0
   2e4dc:	mov	r2, r9
   2e4e0:	adc	r1, r3, r6
   2e4e4:	bl	18e4c <__assert_fail@plt+0x6ac0>
   2e4e8:	ldr	r3, [sp, #96]	; 0x60
   2e4ec:	mov	r2, r9
   2e4f0:	adds	r0, r3, fp
   2e4f4:	ldr	r3, [sp, #100]	; 0x64
   2e4f8:	adc	r1, r3, r6
   2e4fc:	bl	18e4c <__assert_fail@plt+0x6ac0>
   2e500:	ldr	r6, [sp, #212]	; 0xd4
   2e504:	mov	r0, #40	; 0x28
   2e508:	ldr	r1, [r6]
   2e50c:	bl	12254 <putc@plt>
   2e510:	ldr	r3, [sp, #160]	; 0xa0
   2e514:	ldr	r2, [sp, #172]	; 0xac
   2e518:	str	r3, [sp, #4]
   2e51c:	ldr	r3, [sp, #80]	; 0x50
   2e520:	mov	r1, r9
   2e524:	str	r3, [sp, #16]
   2e528:	ldr	r3, [sp, #200]	; 0xc8
   2e52c:	str	sl, [sp]
   2e530:	str	r3, [sp, #8]
   2e534:	mov	r3, #0
   2e538:	str	r3, [sp, #12]
   2e53c:	mov	r0, r4
   2e540:	ldr	r3, [sp, #192]	; 0xc0
   2e544:	bl	1b888 <__assert_fail@plt+0x94fc>
   2e548:	ldr	r1, [r6]
   2e54c:	str	r0, [sp, #160]	; 0xa0
   2e550:	mov	r0, #41	; 0x29
   2e554:	bl	12254 <putc@plt>
   2e558:	ldr	r3, [sp, #108]	; 0x6c
   2e55c:	clz	r0, r3
   2e560:	ldr	r3, [sp, #160]	; 0xa0
   2e564:	lsr	r0, r0, #5
   2e568:	cmp	r3, #0
   2e56c:	moveq	r0, #0
   2e570:	cmp	r0, #0
   2e574:	bne	2f1f0 <__assert_fail@plt+0x1ce64>
   2e578:	ldrd	r2, [sp, #112]	; 0x70
   2e57c:	ldrd	r0, [sp, #96]	; 0x60
   2e580:	ldrd	r6, [sp, #88]	; 0x58
   2e584:	cmp	r3, r1
   2e588:	cmpeq	r2, r0
   2e58c:	ldrd	r0, [sp, #40]	; 0x28
   2e590:	moveq	r3, #1
   2e594:	movne	r3, #0
   2e598:	cmp	r1, r7
   2e59c:	cmpeq	r0, r6
   2e5a0:	moveq	r2, r3
   2e5a4:	movne	r2, #0
   2e5a8:	cmp	r2, #0
   2e5ac:	bne	2f208 <__assert_fail@plt+0x1ce7c>
   2e5b0:	ldrd	r0, [sp, #112]	; 0x70
   2e5b4:	ldrd	r6, [sp, #96]	; 0x60
   2e5b8:	cmp	r1, r7
   2e5bc:	cmpeq	r0, r6
   2e5c0:	bhi	2e5e4 <__assert_fail@plt+0x1c258>
   2e5c4:	ldrd	r0, [sp, #40]	; 0x28
   2e5c8:	ldrd	r6, [sp, #88]	; 0x58
   2e5cc:	cmp	r1, r7
   2e5d0:	cmpeq	r0, r6
   2e5d4:	movls	r3, #0
   2e5d8:	andhi	r3, r3, #1
   2e5dc:	cmp	r3, #0
   2e5e0:	beq	2e600 <__assert_fail@plt+0x1c274>
   2e5e4:	ldr	r1, [pc, #1064]	; 2ea14 <__assert_fail@plt+0x1c688>
   2e5e8:	mov	r2, #5
   2e5ec:	mov	r0, #0
   2e5f0:	bl	11ea0 <dcgettext@plt>
   2e5f4:	ldr	r3, [sp, #212]	; 0xd4
   2e5f8:	ldr	r1, [r3]
   2e5fc:	bl	12314 <fputs@plt>
   2e600:	ldr	r3, [sp, #212]	; 0xd4
   2e604:	mvn	r6, #0
   2e608:	mvn	r7, #0
   2e60c:	add	sl, r4, sl
   2e610:	ldr	r1, [r3]
   2e614:	mov	r0, #10
   2e618:	strd	r6, [sp, #88]	; 0x58
   2e61c:	bl	12254 <putc@plt>
   2e620:	strd	r6, [sp, #40]	; 0x28
   2e624:	ldr	r3, [sp, #236]	; 0xec
   2e628:	b	2e30c <__assert_fail@plt+0x1bf80>
   2e62c:	cmp	r0, #9
   2e630:	ldrls	pc, [pc, r0, lsl #2]
   2e634:	b	2e73c <__assert_fail@plt+0x1c3b0>
   2e638:	andeq	lr, r2, r0, asr #6
   2e63c:	andeq	lr, r2, ip, lsr r7
   2e640:	andeq	lr, r2, ip, lsr r7
   2e644:	andeq	lr, r2, ip, lsr r7
   2e648:	andeq	pc, r2, r0, lsl r7	; <UNPREDICTABLE>
   2e64c:	andeq	lr, r2, ip, lsr r7
   2e650:	andeq	lr, r2, r8, ror #13
   2e654:	andeq	lr, r2, ip, lsr r7
   2e658:	andeq	lr, r2, ip, lsr r7
   2e65c:	andeq	lr, r2, r0, ror #12
   2e660:	cmp	r8, #0
   2e664:	beq	2e67c <__assert_fail@plt+0x1c2f0>
   2e668:	mov	r2, #5
   2e66c:	ldr	r1, [pc, #900]	; 2e9f8 <__assert_fail@plt+0x1c66c>
   2e670:	mov	r0, #0
   2e674:	bl	11ea0 <dcgettext@plt>
   2e678:	bl	11dbc <printf@plt>
   2e67c:	add	sl, sp, #244	; 0xf4
   2e680:	mov	r3, r5
   2e684:	mov	r1, sl
   2e688:	mov	r2, #0
   2e68c:	mov	r0, r4
   2e690:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2e694:	ldr	r3, [sp, #244]	; 0xf4
   2e698:	mov	r2, r9
   2e69c:	add	r4, r4, r3
   2e6a0:	strd	r0, [sp, #40]	; 0x28
   2e6a4:	bl	1a6e4 <__assert_fail@plt+0x8358>
   2e6a8:	mov	r3, r5
   2e6ac:	mov	r1, sl
   2e6b0:	mov	r0, r4
   2e6b4:	mov	r2, #0
   2e6b8:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2e6bc:	ldr	sl, [sp, #244]	; 0xf4
   2e6c0:	mov	r2, r9
   2e6c4:	add	sl, r4, sl
   2e6c8:	strd	r0, [sp, #88]	; 0x58
   2e6cc:	bl	1a6e4 <__assert_fail@plt+0x8358>
   2e6d0:	mov	r2, #5
   2e6d4:	ldr	r1, [pc, #800]	; 2e9fc <__assert_fail@plt+0x1c670>
   2e6d8:	mov	r0, #0
   2e6dc:	bl	11ea0 <dcgettext@plt>
   2e6e0:	bl	11dbc <printf@plt>
   2e6e4:	b	2e624 <__assert_fail@plt+0x1c298>
   2e6e8:	add	sl, r4, r9
   2e6ec:	cmp	r5, sl
   2e6f0:	bhi	2f1d0 <__assert_fail@plt+0x1ce44>
   2e6f4:	cmp	r5, r4
   2e6f8:	bls	2e70c <__assert_fail@plt+0x1c380>
   2e6fc:	sub	r1, r5, r4
   2e700:	sub	r3, r1, #1
   2e704:	cmp	r3, #7
   2e708:	bls	2f1d4 <__assert_fail@plt+0x1ce48>
   2e70c:	mov	fp, #0
   2e710:	str	fp, [sp, #64]	; 0x40
   2e714:	mov	r2, r9
   2e718:	mov	r0, fp
   2e71c:	ldr	r1, [sp, #64]	; 0x40
   2e720:	bl	18e4c <__assert_fail@plt+0x6ac0>
   2e724:	mov	r2, #5
   2e728:	ldr	r1, [pc, #748]	; 2ea1c <__assert_fail@plt+0x1c690>
   2e72c:	mov	r0, #0
   2e730:	bl	11ea0 <dcgettext@plt>
   2e734:	bl	11dbc <printf@plt>
   2e738:	b	2e624 <__assert_fail@plt+0x1c298>
   2e73c:	mov	r6, r0
   2e740:	mov	r2, #5
   2e744:	ldr	r1, [pc, #692]	; 2ea00 <__assert_fail@plt+0x1c674>
   2e748:	mov	r0, #0
   2e74c:	ldr	fp, [sp, #120]	; 0x78
   2e750:	bl	11ea0 <dcgettext@plt>
   2e754:	mov	r1, r6
   2e758:	bl	412ac <error@@Base>
   2e75c:	b	2e198 <__assert_fail@plt+0x1be0c>
   2e760:	ldr	r3, [sp, #80]	; 0x50
   2e764:	ldr	r0, [sp, #180]	; 0xb4
   2e768:	ldr	r1, [r3, #16]
   2e76c:	ldr	r3, [r3, #32]
   2e770:	cmp	r0, #0
   2e774:	add	r8, r1, r3
   2e778:	ldr	r3, [pc, #736]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2e77c:	ldr	r3, [r3, #1488]	; 0x5d0
   2e780:	beq	2e940 <__assert_fail@plt+0x1c5b4>
   2e784:	ldr	r2, [sp, #144]	; 0x90
   2e788:	cmp	r2, r3
   2e78c:	bcs	2f360 <__assert_fail@plt+0x1cfd4>
   2e790:	ldr	r3, [pc, #712]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2e794:	ldr	r1, [sp, #140]	; 0x8c
   2e798:	ldr	r2, [r3, #1440]	; 0x5a0
   2e79c:	add	r3, r2, r1
   2e7a0:	ldr	r2, [r2, r1]
   2e7a4:	str	r2, [sp, #40]	; 0x28
   2e7a8:	sub	r2, r2, #2
   2e7ac:	cmp	r2, #6
   2e7b0:	bhi	2f414 <__assert_fail@plt+0x1d088>
   2e7b4:	ldr	r2, [r3, #16]
   2e7b8:	ldr	r4, [sp, #56]	; 0x38
   2e7bc:	str	r2, [sp, #96]	; 0x60
   2e7c0:	mov	r1, r4
   2e7c4:	ldr	r2, [r3, #4]
   2e7c8:	mov	r7, fp
   2e7cc:	ldr	r3, [r3, #8]
   2e7d0:	str	r2, [sp, #64]	; 0x40
   2e7d4:	str	r3, [sp, #88]	; 0x58
   2e7d8:	str	fp, [sp, #112]	; 0x70
   2e7dc:	ldr	r3, [sp, #136]	; 0x88
   2e7e0:	sub	r1, r4, r1
   2e7e4:	add	r1, r1, r3
   2e7e8:	ldr	r0, [pc, #552]	; 2ea18 <__assert_fail@plt+0x1c68c>
   2e7ec:	bl	11dbc <printf@plt>
   2e7f0:	cmp	r4, r8
   2e7f4:	bcs	2f50c <__assert_fail@plt+0x1d180>
   2e7f8:	add	r5, r4, #1
   2e7fc:	cmp	r5, r8
   2e800:	bcc	2ef18 <__assert_fail@plt+0x1cb8c>
   2e804:	sub	r1, r8, r4
   2e808:	sub	r3, r1, #1
   2e80c:	cmp	r3, #7
   2e810:	bls	2ef1c <__assert_fail@plt+0x1cb90>
   2e814:	mov	r2, #5
   2e818:	ldr	r1, [pc, #512]	; 2ea20 <__assert_fail@plt+0x1c694>
   2e81c:	mov	r0, #0
   2e820:	ldr	fp, [sp, #112]	; 0x70
   2e824:	str	r5, [sp, #236]	; 0xec
   2e828:	str	r7, [sp, #240]	; 0xf0
   2e82c:	bl	11ea0 <dcgettext@plt>
   2e830:	bl	11dbc <printf@plt>
   2e834:	b	2e198 <__assert_fail@plt+0x1be0c>
   2e838:	mov	r2, #5
   2e83c:	ldr	r1, [pc, #448]	; 2ea04 <__assert_fail@plt+0x1c678>
   2e840:	bl	11ea0 <dcgettext@plt>
   2e844:	ldr	r1, [sp, #136]	; 0x88
   2e848:	bl	417d0 <warn@@Base>
   2e84c:	mov	r7, #1
   2e850:	b	2e1f0 <__assert_fail@plt+0x1be64>
   2e854:	ldrd	r0, [ip, lr]
   2e858:	cmp	r1, r5
   2e85c:	cmpeq	r0, r4
   2e860:	bne	2e058 <__assert_fail@plt+0x1bccc>
   2e864:	b	2e1f0 <__assert_fail@plt+0x1be64>
   2e868:	ldr	r1, [pc, #408]	; 2ea08 <__assert_fail@plt+0x1c67c>
   2e86c:	mov	r2, #5
   2e870:	bl	11ea0 <dcgettext@plt>
   2e874:	ldr	r1, [sp, #236]	; 0xec
   2e878:	ldr	r3, [sp, #148]	; 0x94
   2e87c:	ldr	r2, [sp, #136]	; 0x88
   2e880:	sub	r1, r1, r3
   2e884:	bl	417d0 <warn@@Base>
   2e888:	b	2e114 <__assert_fail@plt+0x1bd88>
   2e88c:	ldr	r3, [pc, #460]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2e890:	ldr	r2, [sp, #144]	; 0x90
   2e894:	ldr	r3, [r3, #1488]	; 0x5d0
   2e898:	add	r2, r2, #1
   2e89c:	cmp	r3, r2
   2e8a0:	str	r2, [sp, #144]	; 0x90
   2e8a4:	bhi	2dfbc <__assert_fail@plt+0x1bc30>
   2e8a8:	ldr	r2, [sp, #80]	; 0x50
   2e8ac:	ldr	r3, [r2, #16]
   2e8b0:	ldr	r1, [r2, #32]
   2e8b4:	ldr	r2, [sp, #236]	; 0xec
   2e8b8:	add	r3, r3, r1
   2e8bc:	cmp	r3, r2
   2e8c0:	bhi	2f534 <__assert_fail@plt+0x1d1a8>
   2e8c4:	ldr	r3, [sp, #212]	; 0xd4
   2e8c8:	mov	r0, #10
   2e8cc:	ldr	r1, [r3]
   2e8d0:	bl	12254 <putc@plt>
   2e8d4:	ldr	r0, [sp, #216]	; 0xd8
   2e8d8:	bl	11e10 <free@plt>
   2e8dc:	mov	r0, #1
   2e8e0:	add	sp, sp, #252	; 0xfc
   2e8e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e8e8:	mov	r3, #1
   2e8ec:	str	r3, [sp, #84]	; 0x54
   2e8f0:	mov	r7, r3
   2e8f4:	b	2e1f0 <__assert_fail@plt+0x1be64>
   2e8f8:	mov	r2, #5
   2e8fc:	ldr	r1, [pc, #264]	; 2ea0c <__assert_fail@plt+0x1c680>
   2e900:	b	2e870 <__assert_fail@plt+0x1c4e4>
   2e904:	mov	r2, #5
   2e908:	ldr	r1, [pc, #256]	; 2ea10 <__assert_fail@plt+0x1c684>
   2e90c:	bl	11ea0 <dcgettext@plt>
   2e910:	mov	r1, r4
   2e914:	bl	417d0 <warn@@Base>
   2e918:	mov	r7, #1
   2e91c:	b	2e1f0 <__assert_fail@plt+0x1be64>
   2e920:	mov	r2, #1
   2e924:	str	r2, [sp, #84]	; 0x54
   2e928:	ldr	r2, [sp, #144]	; 0x90
   2e92c:	add	r1, sp, #236	; 0xec
   2e930:	ldr	r0, [sp, #80]	; 0x50
   2e934:	bl	1d9d8 <__assert_fail@plt+0xb64c>
   2e938:	mov	r7, #1
   2e93c:	b	2e1f0 <__assert_fail@plt+0x1be64>
   2e940:	ldr	r1, [sp, #144]	; 0x90
   2e944:	cmp	r1, r3
   2e948:	bcs	2f344 <__assert_fail@plt+0x1cfb8>
   2e94c:	ldr	r3, [pc, #268]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2e950:	ldr	r0, [sp, #140]	; 0x8c
   2e954:	ldr	r3, [r3, #1440]	; 0x5a0
   2e958:	add	r1, r3, r0
   2e95c:	ldr	r9, [r3, r0]
   2e960:	sub	r3, r9, #2
   2e964:	cmp	r3, #6
   2e968:	bhi	2f214 <__assert_fail@plt+0x1ce88>
   2e96c:	lsl	r3, r9, #3
   2e970:	sub	r0, r3, #1
   2e974:	sub	ip, r3, #33	; 0x21
   2e978:	lsl	r2, r2, r0
   2e97c:	mvn	r3, #1
   2e980:	rsb	lr, r0, #32
   2e984:	orr	r2, r2, r3, lsl ip
   2e988:	mvn	r0, r3, lsl r0
   2e98c:	orr	r2, r2, r3, lsr lr
   2e990:	ldr	r3, [r1, #16]
   2e994:	ldr	sl, [sp, #56]	; 0x38
   2e998:	str	r3, [sp, #208]	; 0xd0
   2e99c:	mvn	r3, r2
   2e9a0:	str	r3, [sp, #156]	; 0x9c
   2e9a4:	ldr	r3, [r1, #4]
   2e9a8:	str	fp, [sp, #88]	; 0x58
   2e9ac:	str	r3, [sp, #200]	; 0xc8
   2e9b0:	ldr	r3, [r1, #8]
   2e9b4:	str	fp, [sp, #220]	; 0xdc
   2e9b8:	str	r3, [sp, #204]	; 0xcc
   2e9bc:	lsl	r3, r9, #1
   2e9c0:	str	r3, [sp, #192]	; 0xc0
   2e9c4:	str	r0, [sp, #152]	; 0x98
   2e9c8:	mov	r3, sl
   2e9cc:	ldr	fp, [sp, #212]	; 0xd4
   2e9d0:	b	2ecf0 <__assert_fail@plt+0x1c964>
   2e9d4:	andeq	r0, r5, r8, asr #3
   2e9d8:	strdeq	pc, [r4], -r4
   2e9dc:	andeq	pc, r4, r4, lsl #8
   2e9e0:	ldrdeq	sl, [r4], -ip
   2e9e4:	andeq	pc, r4, r4, lsr r5	; <UNPREDICTABLE>
   2e9e8:	andeq	r7, r6, r0, lsr r4
   2e9ec:	ldrdeq	pc, [r4], -r0
   2e9f0:			; <UNDEFINED> instruction: 0x0004f8bc
   2e9f4:	muleq	r4, r4, r8
   2e9f8:	andeq	pc, r4, ip, lsr #16
   2e9fc:	andeq	pc, r4, r0, ror #16
   2ea00:	andeq	pc, r4, ip, ror #16
   2ea04:	andeq	pc, r4, r4, ror #11
   2ea08:	andeq	pc, r4, r0, ror r5	; <UNPREDICTABLE>
   2ea0c:	andeq	pc, r4, r8, lsr #11
   2ea10:	andeq	pc, r4, ip, lsl r6	; <UNPREDICTABLE>
   2ea14:	andeq	pc, r4, r0, asr #15
   2ea18:	andeq	sl, r4, ip, ror #22
   2ea1c:	andeq	fp, r4, ip, asr #25
   2ea20:	andeq	sl, r4, r8, ror fp
   2ea24:	andeq	pc, r4, r0, lsl #14
   2ea28:	andeq	r9, r4, r4, lsr #5
   2ea2c:	andeq	pc, r4, r0, lsr #14
   2ea30:	andeq	pc, r4, r4, lsr #14
   2ea34:			; <UNDEFINED> instruction: 0x0004f7b0
   2ea38:	andeq	pc, r4, ip, ror #15
   2ea3c:	andeq	r8, r1, r8, lsr #15
   2ea40:	muleq	r4, r8, ip
   2ea44:	andeq	pc, r4, r4, ror r7	; <UNPREDICTABLE>
   2ea48:	andeq	pc, r4, r8, asr r6	; <UNPREDICTABLE>
   2ea4c:	andeq	pc, r4, ip, lsl #13
   2ea50:	andeq	pc, r4, r4, lsl #18
   2ea54:	andeq	pc, r4, ip, lsr r9	; <UNPREDICTABLE>
   2ea58:	andeq	pc, r4, r0, ror #9
   2ea5c:	andeq	pc, r4, r8, lsl #9
   2ea60:	andeq	r7, r6, r0, lsr r5
   2ea64:	strdeq	pc, [r4], -ip
   2ea68:			; <UNDEFINED> instruction: 0x0004f4b4
   2ea6c:	andeq	r8, r4, r8, lsr #29
   2ea70:	andeq	pc, r4, r4, asr #13
   2ea74:	andeq	sl, r4, r0, asr #20
   2ea78:	andeq	pc, r4, r8, asr #8
   2ea7c:	andeq	r9, r6, r0, ror #27
   2ea80:	andeq	pc, r4, r4, asr #14
   2ea84:	andeq	pc, r4, ip, asr #14
   2ea88:	cmp	sl, r8
   2ea8c:	bcs	2eaa0 <__assert_fail@plt+0x1c714>
   2ea90:	sub	r1, r8, sl
   2ea94:	sub	r3, r1, #1
   2ea98:	cmp	r3, #7
   2ea9c:	bls	2f6ec <__assert_fail@plt+0x1d360>
   2eaa0:	cmp	r7, r8
   2eaa4:	mov	r4, #0
   2eaa8:	mov	r5, #0
   2eaac:	addeq	sl, r6, r9
   2eab0:	strdeq	r4, [sp, #40]	; 0x28
   2eab4:	bne	2ed50 <__assert_fail@plt+0x1c9c4>
   2eab8:	ldrd	r2, [sp, #96]	; 0x60
   2eabc:	ldr	r0, [sp, #80]	; 0x50
   2eac0:	bl	182d4 <__assert_fail@plt+0x5f48>
   2eac4:	cmp	r0, #0
   2eac8:	beq	2eee4 <__assert_fail@plt+0x1cb58>
   2eacc:	ldrd	r2, [sp, #152]	; 0x98
   2ead0:	mov	r1, r2
   2ead4:	and	r1, r1, r4
   2ead8:	str	r1, [sp, #72]	; 0x48
   2eadc:	mov	r1, r3
   2eae0:	and	r1, r1, r5
   2eae4:	str	r1, [sp, #76]	; 0x4c
   2eae8:	ldrd	r0, [sp, #72]	; 0x48
   2eaec:	cmp	r3, r1
   2eaf0:	cmpeq	r2, r0
   2eaf4:	beq	2ee10 <__assert_fail@plt+0x1ca84>
   2eaf8:	ldr	r0, [sp, #88]	; 0x58
   2eafc:	cmp	r0, #0
   2eb00:	beq	2edc8 <__assert_fail@plt+0x1ca3c>
   2eb04:	ldrd	r6, [sp, #24]
   2eb08:	ldr	ip, [sp, #236]	; 0xec
   2eb0c:	add	r3, sp, #244	; 0xf4
   2eb10:	sub	ip, r0, ip
   2eb14:	adds	r6, r6, ip
   2eb18:	adc	r7, r7, ip, asr #31
   2eb1c:	str	r3, [sp, #120]	; 0x78
   2eb20:	mov	r1, r3
   2eb24:	mov	r2, #0
   2eb28:	mov	r3, r8
   2eb2c:	strd	r6, [sp, #160]	; 0xa0
   2eb30:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2eb34:	ldr	r3, [sp, #88]	; 0x58
   2eb38:	ldr	r6, [sp, #244]	; 0xf4
   2eb3c:	mov	r2, r9
   2eb40:	add	r6, r3, r6
   2eb44:	strd	r0, [sp, #96]	; 0x60
   2eb48:	bl	1a6e4 <__assert_fail@plt+0x8358>
   2eb4c:	mov	r3, r8
   2eb50:	mov	r0, r6
   2eb54:	mov	r2, #0
   2eb58:	ldr	r1, [sp, #120]	; 0x78
   2eb5c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2eb60:	ldr	r3, [sp, #244]	; 0xf4
   2eb64:	mov	r2, r9
   2eb68:	add	r3, r6, r3
   2eb6c:	str	r3, [sp, #88]	; 0x58
   2eb70:	add	r6, sl, #2
   2eb74:	strd	r0, [sp, #120]	; 0x78
   2eb78:	bl	1a6e4 <__assert_fail@plt+0x8358>
   2eb7c:	mov	r2, #5
   2eb80:	ldr	r1, [pc, #-356]	; 2ea24 <__assert_fail@plt+0x1c698>
   2eb84:	mov	r0, #0
   2eb88:	bl	11ea0 <dcgettext@plt>
   2eb8c:	ldr	r1, [sp, #160]	; 0xa0
   2eb90:	ldr	r3, [pc, #-368]	; 2ea28 <__assert_fail@plt+0x1c69c>
   2eb94:	mov	r2, #8
   2eb98:	bl	11dbc <printf@plt>
   2eb9c:	cmp	r6, r8
   2eba0:	bhi	2ede4 <__assert_fail@plt+0x1ca58>
   2eba4:	bne	2ed94 <__assert_fail@plt+0x1ca08>
   2eba8:	cmp	sl, r8
   2ebac:	bcc	2ed94 <__assert_fail@plt+0x1ca08>
   2ebb0:	mov	sl, r8
   2ebb4:	mov	r3, #0
   2ebb8:	str	r3, [sp, #160]	; 0xa0
   2ebbc:	str	r3, [sp, #172]	; 0xac
   2ebc0:	ldr	r7, [sp, #112]	; 0x70
   2ebc4:	ldr	r3, [sp, #64]	; 0x40
   2ebc8:	adds	r0, r7, r4
   2ebcc:	adc	r1, r3, r5
   2ebd0:	mov	r2, r9
   2ebd4:	bl	18e4c <__assert_fail@plt+0x6ac0>
   2ebd8:	ldr	r1, [sp, #40]	; 0x28
   2ebdc:	ldr	r3, [sp, #64]	; 0x40
   2ebe0:	adds	r0, r7, r1
   2ebe4:	ldr	r1, [sp, #44]	; 0x2c
   2ebe8:	mov	r2, r9
   2ebec:	adc	r1, r3, r1
   2ebf0:	bl	18e4c <__assert_fail@plt+0x6ac0>
   2ebf4:	ldr	r1, [fp]
   2ebf8:	mov	r0, #40	; 0x28
   2ebfc:	bl	12254 <putc@plt>
   2ec00:	ldr	r3, [sp, #80]	; 0x50
   2ec04:	mov	r7, #0
   2ec08:	str	r3, [sp, #16]
   2ec0c:	ldr	r3, [sp, #208]	; 0xd0
   2ec10:	mov	r0, r6
   2ec14:	str	r3, [sp, #8]
   2ec18:	ldr	r3, [sp, #160]	; 0xa0
   2ec1c:	mov	r1, r9
   2ec20:	str	r3, [sp]
   2ec24:	ldr	r3, [sp, #172]	; 0xac
   2ec28:	str	r7, [sp, #12]
   2ec2c:	str	r3, [sp, #4]
   2ec30:	ldrd	r2, [sp, #200]	; 0xc8
   2ec34:	bl	1b888 <__assert_fail@plt+0x94fc>
   2ec38:	ldr	r1, [fp]
   2ec3c:	mov	r6, r0
   2ec40:	mov	r0, #41	; 0x29
   2ec44:	bl	12254 <putc@plt>
   2ec48:	cmp	r6, r7
   2ec4c:	ldr	r3, [sp, #108]	; 0x6c
   2ec50:	clz	r0, r3
   2ec54:	lsr	r0, r0, #5
   2ec58:	moveq	r0, r7
   2ec5c:	cmp	r0, r7
   2ec60:	bne	2ee98 <__assert_fail@plt+0x1cb0c>
   2ec64:	ldrd	r2, [sp, #40]	; 0x28
   2ec68:	ldrd	r0, [sp, #96]	; 0x60
   2ec6c:	ldrd	r6, [sp, #120]	; 0x78
   2ec70:	cmp	r5, r3
   2ec74:	cmpeq	r4, r2
   2ec78:	moveq	r3, #1
   2ec7c:	movne	r3, #0
   2ec80:	cmp	r1, r7
   2ec84:	cmpeq	r0, r6
   2ec88:	moveq	r2, r3
   2ec8c:	movne	r2, #0
   2ec90:	cmp	r2, #0
   2ec94:	bne	2ee7c <__assert_fail@plt+0x1caf0>
   2ec98:	ldrd	r0, [sp, #40]	; 0x28
   2ec9c:	cmp	r5, r1
   2eca0:	cmpeq	r4, r0
   2eca4:	bhi	2ecc8 <__assert_fail@plt+0x1c93c>
   2eca8:	ldrd	r0, [sp, #96]	; 0x60
   2ecac:	ldrd	r4, [sp, #120]	; 0x78
   2ecb0:	cmp	r1, r5
   2ecb4:	cmpeq	r0, r4
   2ecb8:	movls	r3, #0
   2ecbc:	andhi	r3, r3, #1
   2ecc0:	cmp	r3, #0
   2ecc4:	beq	2ece0 <__assert_fail@plt+0x1c954>
   2ecc8:	ldr	r1, [pc, #-700]	; 2ea14 <__assert_fail@plt+0x1c688>
   2eccc:	mov	r2, #5
   2ecd0:	mov	r0, #0
   2ecd4:	bl	11ea0 <dcgettext@plt>
   2ecd8:	ldr	r1, [fp]
   2ecdc:	bl	12314 <fputs@plt>
   2ece0:	ldr	r1, [fp]
   2ece4:	mov	r0, #10
   2ece8:	bl	12254 <putc@plt>
   2ecec:	ldr	r3, [sp, #236]	; 0xec
   2ecf0:	ldrd	r0, [sp, #24]
   2ecf4:	sub	r3, sl, r3
   2ecf8:	ldr	r2, [sp, #192]	; 0xc0
   2ecfc:	adds	r0, r0, r3
   2ed00:	adc	r1, r1, r3, asr #31
   2ed04:	add	r7, sl, r2
   2ed08:	cmp	r7, r8
   2ed0c:	strd	r0, [sp, #96]	; 0x60
   2ed10:	bhi	2ede4 <__assert_fail@plt+0x1ca58>
   2ed14:	ldr	r1, [sp, #96]	; 0x60
   2ed18:	ldr	r0, [pc, #-776]	; 2ea18 <__assert_fail@plt+0x1c68c>
   2ed1c:	add	r6, sl, r9
   2ed20:	bl	11dbc <printf@plt>
   2ed24:	cmp	r6, r8
   2ed28:	bcs	2ea88 <__assert_fail@plt+0x1c6fc>
   2ed2c:	ldr	r3, [pc, #-696]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2ed30:	mov	r0, sl
   2ed34:	mov	r1, r9
   2ed38:	ldr	r3, [r3]
   2ed3c:	blx	r3
   2ed40:	cmp	r7, r8
   2ed44:	mov	r4, r0
   2ed48:	mov	r5, r1
   2ed4c:	beq	2eeb0 <__assert_fail@plt+0x1cb24>
   2ed50:	mov	r1, r9
   2ed54:	ldr	r3, [pc, #-736]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2ed58:	mov	r0, r6
   2ed5c:	ldr	r3, [r3]
   2ed60:	blx	r3
   2ed64:	mov	r3, r1
   2ed68:	mov	r2, r0
   2ed6c:	orr	r1, r0, r4
   2ed70:	strd	r2, [sp, #40]	; 0x28
   2ed74:	orr	r3, r3, r5
   2ed78:	str	r1, [sp, #128]	; 0x80
   2ed7c:	str	r3, [sp, #132]	; 0x84
   2ed80:	ldrd	r2, [sp, #128]	; 0x80
   2ed84:	add	sl, r6, r9
   2ed88:	orrs	r3, r2, r3
   2ed8c:	bne	2eacc <__assert_fail@plt+0x1c740>
   2ed90:	b	2eab8 <__assert_fail@plt+0x1c72c>
   2ed94:	ldr	r3, [pc, #-800]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2ed98:	mov	r0, sl
   2ed9c:	mov	r1, #2
   2eda0:	ldr	r2, [r3]
   2eda4:	blx	r2
   2eda8:	uxtah	sl, r6, r0
   2edac:	cmp	sl, r8
   2edb0:	bhi	2f3c4 <__assert_fail@plt+0x1d038>
   2edb4:	uxth	r3, r0
   2edb8:	str	r3, [sp, #160]	; 0xa0
   2edbc:	mov	r3, #0
   2edc0:	str	r3, [sp, #172]	; 0xac
   2edc4:	b	2ebc0 <__assert_fail@plt+0x1c834>
   2edc8:	mvn	r2, #0
   2edcc:	mvn	r3, #0
   2edd0:	add	r6, sl, #2
   2edd4:	cmp	r6, r8
   2edd8:	strd	r2, [sp, #120]	; 0x78
   2eddc:	strd	r2, [sp, #96]	; 0x60
   2ede0:	bls	2eba4 <__assert_fail@plt+0x1c818>
   2ede4:	ldr	r1, [pc, #-892]	; 2ea70 <__assert_fail@plt+0x1c6e4>
   2ede8:	mov	r2, #5
   2edec:	mov	r0, #0
   2edf0:	ldr	fp, [sp, #220]	; 0xdc
   2edf4:	bl	11ea0 <dcgettext@plt>
   2edf8:	ldr	r1, [sp, #136]	; 0x88
   2edfc:	bl	417d0 <warn@@Base>
   2ee00:	ldr	r3, [sp, #88]	; 0x58
   2ee04:	str	sl, [sp, #236]	; 0xec
   2ee08:	str	r3, [sp, #240]	; 0xf0
   2ee0c:	b	2e198 <__assert_fail@plt+0x1be0c>
   2ee10:	ldrd	r0, [sp, #40]	; 0x28
   2ee14:	mov	ip, r2
   2ee18:	and	ip, ip, r0
   2ee1c:	and	r1, r3, r1
   2ee20:	str	ip, [sp, #184]	; 0xb8
   2ee24:	str	r1, [sp, #188]	; 0xbc
   2ee28:	ldrd	r0, [sp, #184]	; 0xb8
   2ee2c:	cmp	r3, r1
   2ee30:	cmpeq	r2, r0
   2ee34:	beq	2eaf8 <__assert_fail@plt+0x1c76c>
   2ee38:	mov	r0, r4
   2ee3c:	mov	r1, r5
   2ee40:	mov	r2, r9
   2ee44:	bl	18e4c <__assert_fail@plt+0x6ac0>
   2ee48:	ldrd	r4, [sp, #40]	; 0x28
   2ee4c:	mov	r2, r9
   2ee50:	mov	r0, r4
   2ee54:	mov	r1, r5
   2ee58:	bl	18e4c <__assert_fail@plt+0x6ac0>
   2ee5c:	mov	r2, #5
   2ee60:	ldr	r1, [pc, #-1100]	; 2ea1c <__assert_fail@plt+0x1c690>
   2ee64:	mov	r0, #0
   2ee68:	bl	11ea0 <dcgettext@plt>
   2ee6c:	bl	11dbc <printf@plt>
   2ee70:	str	r4, [sp, #112]	; 0x70
   2ee74:	str	r5, [sp, #64]	; 0x40
   2ee78:	b	2ecec <__assert_fail@plt+0x1c960>
   2ee7c:	mov	r2, #5
   2ee80:	ldr	r1, [pc, #-1108]	; 2ea34 <__assert_fail@plt+0x1c6a8>
   2ee84:	mov	r0, #0
   2ee88:	bl	11ea0 <dcgettext@plt>
   2ee8c:	ldr	r1, [fp]
   2ee90:	bl	12314 <fputs@plt>
   2ee94:	b	2ece0 <__assert_fail@plt+0x1c954>
   2ee98:	mov	r2, #5
   2ee9c:	ldr	r1, [pc, #-1124]	; 2ea40 <__assert_fail@plt+0x1c6b4>
   2eea0:	mov	r0, r7
   2eea4:	bl	11ea0 <dcgettext@plt>
   2eea8:	bl	11dbc <printf@plt>
   2eeac:	b	2ec64 <__assert_fail@plt+0x1c8d8>
   2eeb0:	sub	r1, r8, r6
   2eeb4:	sub	r3, r1, #1
   2eeb8:	cmp	r3, #7
   2eebc:	bls	2ed54 <__assert_fail@plt+0x1c9c8>
   2eec0:	mov	r2, #0
   2eec4:	mov	r3, #0
   2eec8:	strd	r4, [sp, #128]	; 0x80
   2eecc:	strd	r2, [sp, #40]	; 0x28
   2eed0:	b	2ed80 <__assert_fail@plt+0x1c9f4>
   2eed4:	ldr	r3, [sp, #240]	; 0xf0
   2eed8:	str	r6, [sp, #104]	; 0x68
   2eedc:	str	r3, [sp, #236]	; 0xec
   2eee0:	b	2e0ec <__assert_fail@plt+0x1bd60>
   2eee4:	ldrd	r2, [sp, #96]	; 0x60
   2eee8:	ldr	r0, [sp, #80]	; 0x50
   2eeec:	adds	r2, r2, r9
   2eef0:	adc	r3, r3, #0
   2eef4:	bl	182d4 <__assert_fail@plt+0x5f48>
   2eef8:	cmp	r0, #0
   2eefc:	bne	2eacc <__assert_fail@plt+0x1c740>
   2ef00:	mov	r2, #5
   2ef04:	ldr	r1, [pc, #-1260]	; 2ea20 <__assert_fail@plt+0x1c694>
   2ef08:	ldr	fp, [sp, #220]	; 0xdc
   2ef0c:	bl	11ea0 <dcgettext@plt>
   2ef10:	bl	11dbc <printf@plt>
   2ef14:	b	2ee00 <__assert_fail@plt+0x1ca74>
   2ef18:	ldr	r1, [sp, #180]	; 0xb4
   2ef1c:	ldr	r3, [pc, #-1192]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2ef20:	mov	r0, r4
   2ef24:	ldr	r3, [r3]
   2ef28:	blx	r3
   2ef2c:	cmp	r7, #0
   2ef30:	mov	r6, r0
   2ef34:	beq	2f250 <__assert_fail@plt+0x1cec4>
   2ef38:	sub	r3, r0, #2
   2ef3c:	cmp	r3, #2
   2ef40:	bhi	2f37c <__assert_fail@plt+0x1cff0>
   2ef44:	ldr	ip, [sp, #236]	; 0xec
   2ef48:	ldrd	sl, [sp, #24]
   2ef4c:	add	r9, sp, #244	; 0xf4
   2ef50:	sub	ip, r7, ip
   2ef54:	mov	r3, r8
   2ef58:	mov	r2, #0
   2ef5c:	mov	r0, r7
   2ef60:	mov	r1, r9
   2ef64:	adds	sl, sl, ip
   2ef68:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2ef6c:	ldr	r3, [sp, #244]	; 0xf4
   2ef70:	mov	r2, #8
   2ef74:	add	r7, r7, r3
   2ef78:	bl	1a6e4 <__assert_fail@plt+0x8358>
   2ef7c:	mov	r3, r8
   2ef80:	mov	r0, r7
   2ef84:	mov	r2, #0
   2ef88:	mov	r1, r9
   2ef8c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2ef90:	ldr	r3, [sp, #244]	; 0xf4
   2ef94:	mov	r2, #8
   2ef98:	add	r7, r7, r3
   2ef9c:	bl	1a6e4 <__assert_fail@plt+0x8358>
   2efa0:	mov	r2, #5
   2efa4:	ldr	r1, [pc, #-1416]	; 2ea24 <__assert_fail@plt+0x1c698>
   2efa8:	mov	r0, #0
   2efac:	bl	11ea0 <dcgettext@plt>
   2efb0:	ldr	r3, [pc, #-1424]	; 2ea28 <__assert_fail@plt+0x1c69c>
   2efb4:	mov	r1, sl
   2efb8:	mov	r2, #8
   2efbc:	bl	11dbc <printf@plt>
   2efc0:	cmp	r6, #4
   2efc4:	ldrls	pc, [pc, r6, lsl #2]
   2efc8:	b	2f744 <__assert_fail@plt+0x1d3b8>
   2efcc:	andeq	lr, r2, r4, lsl r8
   2efd0:	andeq	pc, r2, r0, lsl #3
   2efd4:	andeq	pc, r2, ip, lsr r1	; <UNPREDICTABLE>
   2efd8:	andeq	pc, r2, ip, ror #1
   2efdc:	andeq	lr, r2, r0, ror #31
   2efe0:	add	r6, r4, #5
   2efe4:	cmp	r6, r8
   2efe8:	bcc	2f450 <__assert_fail@plt+0x1d0c4>
   2efec:	cmp	r5, r8
   2eff0:	bcs	2f004 <__assert_fail@plt+0x1cc78>
   2eff4:	sub	r1, r8, r5
   2eff8:	sub	r3, r1, #1
   2effc:	cmp	r3, #7
   2f000:	bls	2f718 <__assert_fail@plt+0x1d38c>
   2f004:	add	r4, r4, #9
   2f008:	mov	r1, #0
   2f00c:	ldr	r0, [pc, #-1428]	; 2ea80 <__assert_fail@plt+0x1c6f4>
   2f010:	bl	11dbc <printf@plt>
   2f014:	cmp	r8, r4
   2f018:	bls	2f130 <__assert_fail@plt+0x1cda4>
   2f01c:	mov	r1, #4
   2f020:	ldr	r3, [pc, #-1452]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2f024:	mov	r0, r6
   2f028:	ldr	r3, [r3]
   2f02c:	blx	r3
   2f030:	mov	r1, r0
   2f034:	ldr	r0, [pc, #-1468]	; 2ea80 <__assert_fail@plt+0x1c6f4>
   2f038:	bl	11dbc <printf@plt>
   2f03c:	add	r9, r4, #2
   2f040:	cmp	r9, r8
   2f044:	bhi	2f50c <__assert_fail@plt+0x1d180>
   2f048:	bne	2f298 <__assert_fail@plt+0x1cf0c>
   2f04c:	cmp	r4, r8
   2f050:	bcc	2f298 <__assert_fail@plt+0x1cf0c>
   2f054:	mov	r5, #0
   2f058:	mov	fp, r5
   2f05c:	mov	r4, r8
   2f060:	ldr	sl, [sp, #212]	; 0xd4
   2f064:	mov	r0, #40	; 0x28
   2f068:	mov	r6, #0
   2f06c:	ldr	r1, [sl]
   2f070:	bl	12254 <putc@plt>
   2f074:	ldr	r3, [sp, #80]	; 0x50
   2f078:	str	r5, [sp]
   2f07c:	str	r3, [sp, #16]
   2f080:	ldr	r3, [sp, #96]	; 0x60
   2f084:	ldr	r2, [sp, #64]	; 0x40
   2f088:	str	r3, [sp, #8]
   2f08c:	ldr	r1, [sp, #40]	; 0x28
   2f090:	ldr	r3, [sp, #88]	; 0x58
   2f094:	str	fp, [sp, #4]
   2f098:	mov	r0, r9
   2f09c:	str	r6, [sp, #12]
   2f0a0:	bl	1b888 <__assert_fail@plt+0x94fc>
   2f0a4:	ldr	r1, [sl]
   2f0a8:	mov	r5, r0
   2f0ac:	mov	r0, #41	; 0x29
   2f0b0:	bl	12254 <putc@plt>
   2f0b4:	cmp	r5, r6
   2f0b8:	ldr	r3, [sp, #108]	; 0x6c
   2f0bc:	clz	r0, r3
   2f0c0:	lsr	r0, r0, #5
   2f0c4:	moveq	r0, r6
   2f0c8:	cmp	r0, r6
   2f0cc:	bne	2f32c <__assert_fail@plt+0x1cfa0>
   2f0d0:	ldr	r3, [sp, #212]	; 0xd4
   2f0d4:	mov	r0, #10
   2f0d8:	ldr	r1, [r3]
   2f0dc:	bl	12254 <putc@plt>
   2f0e0:	ldr	r1, [sp, #236]	; 0xec
   2f0e4:	b	2e7dc <__assert_fail@plt+0x1c450>
   2f0e8:	add	r9, sp, #244	; 0xf4
   2f0ec:	mov	r3, r8
   2f0f0:	mov	r2, #0
   2f0f4:	mov	r0, r5
   2f0f8:	mov	r1, r9
   2f0fc:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2f100:	ldr	r3, [sp, #244]	; 0xf4
   2f104:	add	r5, r5, r3
   2f108:	add	r4, r5, #4
   2f10c:	bl	1a6a8 <__assert_fail@plt+0x831c>
   2f110:	cmp	r4, r8
   2f114:	bcc	2f434 <__assert_fail@plt+0x1d0a8>
   2f118:	cmp	r5, r8
   2f11c:	bcs	2f130 <__assert_fail@plt+0x1cda4>
   2f120:	sub	r1, r8, r5
   2f124:	sub	r3, r1, #1
   2f128:	cmp	r3, #7
   2f12c:	bls	2f438 <__assert_fail@plt+0x1d0ac>
   2f130:	mov	r1, #0
   2f134:	b	2f034 <__assert_fail@plt+0x1cca8>
   2f138:	add	r9, sp, #244	; 0xf4
   2f13c:	mov	r3, r8
   2f140:	mov	r2, #0
   2f144:	mov	r1, r9
   2f148:	mov	r0, r5
   2f14c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2f150:	ldr	r4, [sp, #244]	; 0xf4
   2f154:	bl	1a6a8 <__assert_fail@plt+0x831c>
   2f158:	add	r4, r5, r4
   2f15c:	mov	r3, r8
   2f160:	mov	r1, r9
   2f164:	mov	r0, r4
   2f168:	mov	r2, #0
   2f16c:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2f170:	ldr	r3, [sp, #244]	; 0xf4
   2f174:	add	r4, r4, r3
   2f178:	bl	1a6a8 <__assert_fail@plt+0x831c>
   2f17c:	b	2f03c <__assert_fail@plt+0x1ccb0>
   2f180:	mov	r3, r8
   2f184:	mov	r2, #0
   2f188:	mov	r1, r9
   2f18c:	mov	r0, r5
   2f190:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2f194:	ldr	r4, [sp, #244]	; 0xf4
   2f198:	bl	1a6a8 <__assert_fail@plt+0x831c>
   2f19c:	cmp	r7, #0
   2f1a0:	add	r4, r5, r4
   2f1a4:	movne	r1, #21
   2f1a8:	moveq	r1, #9
   2f1ac:	ldr	r2, [pc, #-1932]	; 2ea28 <__assert_fail@plt+0x1c69c>
   2f1b0:	ldr	r0, [pc, #-1932]	; 2ea2c <__assert_fail@plt+0x1c6a0>
   2f1b4:	bl	11dbc <printf@plt>
   2f1b8:	mov	r2, #5
   2f1bc:	ldr	r1, [pc, #-1940]	; 2ea30 <__assert_fail@plt+0x1c6a4>
   2f1c0:	mov	r0, #0
   2f1c4:	bl	11ea0 <dcgettext@plt>
   2f1c8:	bl	11dbc <printf@plt>
   2f1cc:	b	2f0e0 <__assert_fail@plt+0x1cd54>
   2f1d0:	mov	r1, r9
   2f1d4:	ldr	r3, [pc, #-1888]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2f1d8:	mov	r0, r4
   2f1dc:	ldr	r3, [r3]
   2f1e0:	blx	r3
   2f1e4:	mov	fp, r0
   2f1e8:	str	r1, [sp, #64]	; 0x40
   2f1ec:	b	2e714 <__assert_fail@plt+0x1c388>
   2f1f0:	mov	r2, #5
   2f1f4:	ldr	r1, [pc, #-1980]	; 2ea40 <__assert_fail@plt+0x1c6b4>
   2f1f8:	mov	r0, #0
   2f1fc:	bl	11ea0 <dcgettext@plt>
   2f200:	bl	11dbc <printf@plt>
   2f204:	b	2e578 <__assert_fail@plt+0x1c1ec>
   2f208:	mov	r2, #5
   2f20c:	ldr	r1, [pc, #-2016]	; 2ea34 <__assert_fail@plt+0x1c6a8>
   2f210:	b	2e5ec <__assert_fail@plt+0x1c260>
   2f214:	mov	r2, #5
   2f218:	ldr	r1, [pc, #-2004]	; 2ea4c <__assert_fail@plt+0x1c6c0>
   2f21c:	ldr	r0, [sp, #180]	; 0xb4
   2f220:	bl	11ea0 <dcgettext@plt>
   2f224:	ldr	r2, [sp, #144]	; 0x90
   2f228:	mov	r1, r9
   2f22c:	bl	417d0 <warn@@Base>
   2f230:	b	2e198 <__assert_fail@plt+0x1be0c>
   2f234:	mov	r2, #5
   2f238:	ldr	r1, [pc, #-2056]	; 2ea38 <__assert_fail@plt+0x1c6ac>
   2f23c:	ldr	r0, [sp, #180]	; 0xb4
   2f240:	bl	11ea0 <dcgettext@plt>
   2f244:	ldr	r1, [sp, #144]	; 0x90
   2f248:	bl	417d0 <warn@@Base>
   2f24c:	b	2e198 <__assert_fail@plt+0x1be0c>
   2f250:	cmp	r0, #4
   2f254:	ldrls	pc, [pc, r0, lsl #2]
   2f258:	b	2f744 <__assert_fail@plt+0x1d3b8>
   2f25c:	andeq	lr, r2, r4, lsl r8
   2f260:	andeq	pc, r2, r0, ror r2	; <UNPREDICTABLE>
   2f264:	andeq	pc, r2, r8, lsr r1	; <UNPREDICTABLE>
   2f268:	andeq	pc, r2, r8, ror #1
   2f26c:	andeq	lr, r2, r0, ror #31
   2f270:	mov	r3, r8
   2f274:	mov	r2, #0
   2f278:	add	r1, sp, #244	; 0xf4
   2f27c:	mov	r0, r5
   2f280:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2f284:	ldr	r4, [sp, #244]	; 0xf4
   2f288:	bl	1a6a8 <__assert_fail@plt+0x831c>
   2f28c:	add	r4, r5, r4
   2f290:	mov	r1, #9
   2f294:	b	2f1ac <__assert_fail@plt+0x1ce20>
   2f298:	ldr	r3, [pc, #-2084]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2f29c:	mov	r0, r4
   2f2a0:	mov	r1, #2
   2f2a4:	ldr	r2, [r3]
   2f2a8:	blx	r2
   2f2ac:	uxtah	r4, r9, r0
   2f2b0:	cmp	r4, r8
   2f2b4:	bhi	2f644 <__assert_fail@plt+0x1d2b8>
   2f2b8:	mov	r3, #0
   2f2bc:	uxth	r5, r0
   2f2c0:	mov	fp, r3
   2f2c4:	b	2f060 <__assert_fail@plt+0x1ccd4>
   2f2c8:	cmp	r1, #0
   2f2cc:	beq	2f2f0 <__assert_fail@plt+0x1cf64>
   2f2d0:	ldr	r2, [sp, #216]	; 0xd8
   2f2d4:	sub	r0, r2, #4
   2f2d8:	ldr	r2, [sp, #168]	; 0xa8
   2f2dc:	str	r2, [r0, #4]!
   2f2e0:	ldr	r1, [r3, #60]	; 0x3c
   2f2e4:	add	r2, r2, #1
   2f2e8:	cmp	r1, r2
   2f2ec:	bhi	2f2dc <__assert_fail@plt+0x1cf50>
   2f2f0:	ldr	lr, [pc, #-2200]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2f2f4:	ldr	r0, [r3, #48]	; 0x30
   2f2f8:	ldr	ip, [r3, #52]	; 0x34
   2f2fc:	mov	r4, lr
   2f300:	ldr	r3, [pc, #-2252]	; 2ea3c <__assert_fail@plt+0x1c6b0>
   2f304:	mov	r2, #4
   2f308:	str	r0, [lr]
   2f30c:	ldr	r0, [sp, #216]	; 0xd8
   2f310:	str	ip, [lr, #4]
   2f314:	bl	12290 <qsort@plt>
   2f318:	ldr	r3, [r4, #1440]	; 0x5a0
   2f31c:	ldr	r2, [sp, #140]	; 0x8c
   2f320:	add	r3, r3, r2
   2f324:	ldr	r1, [r3, #60]	; 0x3c
   2f328:	b	2dfec <__assert_fail@plt+0x1bc60>
   2f32c:	mov	r2, #5
   2f330:	ldr	r1, [pc, #-2296]	; 2ea40 <__assert_fail@plt+0x1c6b4>
   2f334:	mov	r0, r6
   2f338:	bl	11ea0 <dcgettext@plt>
   2f33c:	bl	11dbc <printf@plt>
   2f340:	b	2f0d0 <__assert_fail@plt+0x1cd44>
   2f344:	mov	r2, #5
   2f348:	ldr	r1, [pc, #-2316]	; 2ea44 <__assert_fail@plt+0x1c6b8>
   2f34c:	ldr	r0, [sp, #180]	; 0xb4
   2f350:	bl	11ea0 <dcgettext@plt>
   2f354:	ldr	r1, [sp, #144]	; 0x90
   2f358:	bl	417d0 <warn@@Base>
   2f35c:	b	2e198 <__assert_fail@plt+0x1be0c>
   2f360:	mov	r2, #5
   2f364:	ldr	r1, [pc, #-2340]	; 2ea48 <__assert_fail@plt+0x1c6bc>
   2f368:	ldr	r0, [sp, #196]	; 0xc4
   2f36c:	bl	11ea0 <dcgettext@plt>
   2f370:	ldr	r1, [sp, #144]	; 0x90
   2f374:	bl	417d0 <warn@@Base>
   2f378:	b	2e198 <__assert_fail@plt+0x1be0c>
   2f37c:	cmp	r0, #4
   2f380:	ldrls	pc, [pc, r0, lsl #2]
   2f384:	b	2f744 <__assert_fail@plt+0x1d3b8>
   2f388:	andeq	lr, r2, r4, lsl r8
   2f38c:	muleq	r2, ip, r3
   2f390:	andeq	pc, r2, r8, lsr r1	; <UNPREDICTABLE>
   2f394:	andeq	pc, r2, r8, ror #1
   2f398:	andeq	lr, r2, r0, ror #31
   2f39c:	mov	r3, r8
   2f3a0:	mov	r2, #0
   2f3a4:	add	r1, sp, #244	; 0xf4
   2f3a8:	mov	r0, r5
   2f3ac:	bl	1b3b0 <__assert_fail@plt+0x9024>
   2f3b0:	ldr	r4, [sp, #244]	; 0xf4
   2f3b4:	bl	1a6a8 <__assert_fail@plt+0x831c>
   2f3b8:	add	r4, r5, r4
   2f3bc:	mov	r1, #21
   2f3c0:	b	2f1ac <__assert_fail@plt+0x1ce20>
   2f3c4:	mov	r2, #5
   2f3c8:	ldr	r1, [pc, #-2400]	; 2ea70 <__assert_fail@plt+0x1c6e4>
   2f3cc:	mov	r0, #0
   2f3d0:	ldr	fp, [sp, #220]	; 0xdc
   2f3d4:	str	r6, [sp, #24]
   2f3d8:	bl	11ea0 <dcgettext@plt>
   2f3dc:	ldr	r3, [sp, #24]
   2f3e0:	ldr	r1, [sp, #136]	; 0x88
   2f3e4:	mov	sl, r3
   2f3e8:	bl	417d0 <warn@@Base>
   2f3ec:	b	2ee00 <__assert_fail@plt+0x1ca74>
   2f3f0:	mov	r2, #5
   2f3f4:	ldr	r1, [pc, #-2444]	; 2ea70 <__assert_fail@plt+0x1c6e4>
   2f3f8:	mov	r0, #0
   2f3fc:	ldr	fp, [sp, #120]	; 0x78
   2f400:	bl	11ea0 <dcgettext@plt>
   2f404:	ldr	r1, [sp, #136]	; 0x88
   2f408:	mov	r4, sl
   2f40c:	bl	417d0 <warn@@Base>
   2f410:	b	2e358 <__assert_fail@plt+0x1bfcc>
   2f414:	mov	r2, #5
   2f418:	ldr	r1, [pc, #-2516]	; 2ea4c <__assert_fail@plt+0x1c6c0>
   2f41c:	ldr	r0, [sp, #196]	; 0xc4
   2f420:	bl	11ea0 <dcgettext@plt>
   2f424:	ldr	r2, [sp, #144]	; 0x90
   2f428:	ldr	r1, [sp, #40]	; 0x28
   2f42c:	bl	417d0 <warn@@Base>
   2f430:	b	2e198 <__assert_fail@plt+0x1be0c>
   2f434:	mov	r1, #4
   2f438:	ldr	r3, [pc, #-2500]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2f43c:	mov	r0, r5
   2f440:	ldr	r3, [r3]
   2f444:	blx	r3
   2f448:	mov	r1, r0
   2f44c:	b	2f034 <__assert_fail@plt+0x1cca8>
   2f450:	ldr	r3, [pc, #-2524]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2f454:	mov	r0, r5
   2f458:	mov	r1, #4
   2f45c:	ldr	r3, [r3]
   2f460:	blx	r3
   2f464:	add	r4, r4, #9
   2f468:	mov	r1, r0
   2f46c:	ldr	r0, [pc, #-2548]	; 2ea80 <__assert_fail@plt+0x1c6f4>
   2f470:	bl	11dbc <printf@plt>
   2f474:	cmp	r4, r8
   2f478:	bcc	2f01c <__assert_fail@plt+0x1cc90>
   2f47c:	sub	r1, r8, r6
   2f480:	sub	r3, r1, #1
   2f484:	cmp	r3, #7
   2f488:	bhi	2f130 <__assert_fail@plt+0x1cda4>
   2f48c:	b	2f020 <__assert_fail@plt+0x1cc94>
   2f490:	mov	r1, #1
   2f494:	ldr	r6, [sp, #52]	; 0x34
   2f498:	ldr	fp, [sp, #56]	; 0x38
   2f49c:	mov	r2, r1
   2f4a0:	b	2dd30 <__assert_fail@plt+0x1b9a4>
   2f4a4:	mov	r2, #0
   2f4a8:	mov	r3, #0
   2f4ac:	strd	r2, [sp, #64]	; 0x40
   2f4b0:	b	2dccc <__assert_fail@plt+0x1b940>
   2f4b4:	mov	r2, #5
   2f4b8:	ldr	r1, [pc, #-2640]	; 2ea70 <__assert_fail@plt+0x1c6e4>
   2f4bc:	mov	r0, #0
   2f4c0:	ldr	fp, [sp, #120]	; 0x78
   2f4c4:	bl	11ea0 <dcgettext@plt>
   2f4c8:	ldr	r1, [sp, #136]	; 0x88
   2f4cc:	bl	417d0 <warn@@Base>
   2f4d0:	b	2e358 <__assert_fail@plt+0x1bfcc>
   2f4d4:	ldr	r3, [sp, #148]	; 0x94
   2f4d8:	add	r7, r3, #12
   2f4dc:	cmp	r7, r5
   2f4e0:	bcc	2f5e4 <__assert_fail@plt+0x1d258>
   2f4e4:	cmp	r4, r5
   2f4e8:	bcs	2f504 <__assert_fail@plt+0x1d178>
   2f4ec:	ldr	r3, [sp, #176]	; 0xb0
   2f4f0:	sub	r3, r3, #5
   2f4f4:	cmp	r3, #7
   2f4f8:	ldrls	r3, [sp, #176]	; 0xb0
   2f4fc:	subls	r1, r3, #4
   2f500:	bls	2f5e8 <__assert_fail@plt+0x1d25c>
   2f504:	mov	r4, r7
   2f508:	b	2dc00 <__assert_fail@plt+0x1b874>
   2f50c:	ldr	r1, [pc, #-2724]	; 2ea70 <__assert_fail@plt+0x1c6e4>
   2f510:	mov	r2, #5
   2f514:	mov	r0, #0
   2f518:	ldr	fp, [sp, #112]	; 0x70
   2f51c:	bl	11ea0 <dcgettext@plt>
   2f520:	ldr	r1, [sp, #136]	; 0x88
   2f524:	bl	417d0 <warn@@Base>
   2f528:	str	r4, [sp, #236]	; 0xec
   2f52c:	str	r7, [sp, #240]	; 0xf0
   2f530:	b	2e198 <__assert_fail@plt+0x1be0c>
   2f534:	mov	r1, #5
   2f538:	sub	r3, r3, r2
   2f53c:	str	r1, [sp]
   2f540:	ldr	r2, [pc, #-2808]	; 2ea50 <__assert_fail@plt+0x1c6c4>
   2f544:	ldr	r1, [pc, #-2808]	; 2ea54 <__assert_fail@plt+0x1c6c8>
   2f548:	mov	r0, #0
   2f54c:	bl	12368 <dcngettext@plt>
   2f550:	ldr	ip, [sp, #80]	; 0x50
   2f554:	ldr	r1, [sp, #236]	; 0xec
   2f558:	ldr	r2, [ip, #32]
   2f55c:	ldr	r3, [ip, #16]
   2f560:	add	r3, r3, r2
   2f564:	sub	r1, r3, r1
   2f568:	ldr	r2, [ip, #8]
   2f56c:	bl	417d0 <warn@@Base>
   2f570:	b	2e8c4 <__assert_fail@plt+0x1c538>
   2f574:	mov	r2, #5
   2f578:	ldr	r1, [pc, #-2856]	; 2ea58 <__assert_fail@plt+0x1c6cc>
   2f57c:	mov	r0, #0
   2f580:	bl	11ea0 <dcgettext@plt>
   2f584:	bl	11dbc <printf@plt>
   2f588:	b	2df88 <__assert_fail@plt+0x1bbfc>
   2f58c:	ldr	r0, [sp, #24]
   2f590:	mov	r1, #4
   2f594:	bl	28228 <__assert_fail@plt+0x15e9c>
   2f598:	str	r0, [sp, #216]	; 0xd8
   2f59c:	b	2df60 <__assert_fail@plt+0x1bbd4>
   2f5a0:	mov	r2, #5
   2f5a4:	ldr	r1, [pc, #-2896]	; 2ea5c <__assert_fail@plt+0x1c6d0>
   2f5a8:	mov	r0, #0
   2f5ac:	bl	11ea0 <dcgettext@plt>
   2f5b0:	bl	412ac <error@@Base>
   2f5b4:	ldr	r3, [pc, #-2908]	; 2ea60 <__assert_fail@plt+0x1c6d4>
   2f5b8:	ldr	r3, [r3, #1440]	; 0x5a0
   2f5bc:	str	r3, [sp, #60]	; 0x3c
   2f5c0:	b	2df08 <__assert_fail@plt+0x1bb7c>
   2f5c4:	mov	r2, #5
   2f5c8:	ldr	r1, [pc, #-2924]	; 2ea64 <__assert_fail@plt+0x1c6d8>
   2f5cc:	bl	11ea0 <dcgettext@plt>
   2f5d0:	ldr	r3, [sp, #80]	; 0x50
   2f5d4:	ldr	r1, [r3, #8]
   2f5d8:	bl	417d0 <warn@@Base>
   2f5dc:	mov	r0, r4
   2f5e0:	b	2dc54 <__assert_fail@plt+0x1b8c8>
   2f5e4:	mov	r1, #8
   2f5e8:	mov	r0, r4
   2f5ec:	ldr	r3, [r6]
   2f5f0:	blx	r3
   2f5f4:	mov	r4, r7
   2f5f8:	b	2dbcc <__assert_fail@plt+0x1b840>
   2f5fc:	mov	r2, #5
   2f600:	ldr	r1, [pc, #-2976]	; 2ea68 <__assert_fail@plt+0x1c6dc>
   2f604:	mov	r0, #0
   2f608:	bl	11ea0 <dcgettext@plt>
   2f60c:	ldr	r3, [r5, #48]	; 0x30
   2f610:	ldr	r2, [sp, #80]	; 0x50
   2f614:	mov	r1, #0
   2f618:	ldr	r5, [r2, #8]
   2f61c:	ldrd	r2, [r3]
   2f620:	str	r1, [sp]
   2f624:	mov	r4, r0
   2f628:	ldr	r0, [pc, #-3012]	; 2ea6c <__assert_fail@plt+0x1c6e0>
   2f62c:	bl	18b24 <__assert_fail@plt+0x6798>
   2f630:	mov	r1, r5
   2f634:	mov	r2, r0
   2f638:	mov	r0, r4
   2f63c:	bl	417d0 <warn@@Base>
   2f640:	b	2df4c <__assert_fail@plt+0x1bbc0>
   2f644:	mov	r2, #5
   2f648:	ldr	r1, [pc, #-3040]	; 2ea70 <__assert_fail@plt+0x1c6e4>
   2f64c:	mov	r0, #0
   2f650:	ldr	fp, [sp, #112]	; 0x70
   2f654:	bl	11ea0 <dcgettext@plt>
   2f658:	ldr	r1, [sp, #136]	; 0x88
   2f65c:	mov	r4, r9
   2f660:	bl	417d0 <warn@@Base>
   2f664:	b	2f528 <__assert_fail@plt+0x1d19c>
   2f668:	mov	r2, #5
   2f66c:	ldr	r1, [pc, #-3072]	; 2ea74 <__assert_fail@plt+0x1c6e8>
   2f670:	mov	r0, #0
   2f674:	bl	11ea0 <dcgettext@plt>
   2f678:	ldr	r3, [sp, #80]	; 0x50
   2f67c:	mov	r2, r8
   2f680:	ldr	r1, [r3, #8]
   2f684:	bl	417d0 <warn@@Base>
   2f688:	mov	r0, #0
   2f68c:	b	2dc54 <__assert_fail@plt+0x1b8c8>
   2f690:	mov	r2, #5
   2f694:	ldr	r1, [pc, #-3108]	; 2ea78 <__assert_fail@plt+0x1c6ec>
   2f698:	mov	r0, #0
   2f69c:	bl	11ea0 <dcgettext@plt>
   2f6a0:	ldr	r3, [sp, #80]	; 0x50
   2f6a4:	mov	r2, r5
   2f6a8:	ldr	r1, [r3, #8]
   2f6ac:	bl	417d0 <warn@@Base>
   2f6b0:	mov	r0, #0
   2f6b4:	b	2dc54 <__assert_fail@plt+0x1b8c8>
   2f6b8:	mov	r1, #1
   2f6bc:	mov	r2, r1
   2f6c0:	b	2dd30 <__assert_fail@plt+0x1b9a4>
   2f6c4:	mov	r1, #0
   2f6c8:	mov	r2, #1
   2f6cc:	b	2dd30 <__assert_fail@plt+0x1b9a4>
   2f6d0:	mov	r0, r7
   2f6d4:	ldr	r3, [r6]
   2f6d8:	add	r7, r4, #4
   2f6dc:	blx	r3
   2f6e0:	cmp	r5, r7
   2f6e4:	bls	2dc94 <__assert_fail@plt+0x1b908>
   2f6e8:	b	2de9c <__assert_fail@plt+0x1bb10>
   2f6ec:	ldr	r3, [pc, #-3192]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2f6f0:	mov	r0, sl
   2f6f4:	ldr	r3, [r3]
   2f6f8:	blx	r3
   2f6fc:	cmp	r7, r8
   2f700:	mov	r4, r0
   2f704:	mov	r5, r1
   2f708:	beq	2eec0 <__assert_fail@plt+0x1cb34>
   2f70c:	b	2ed50 <__assert_fail@plt+0x1c9c4>
   2f710:	add	sl, sp, #244	; 0xf4
   2f714:	b	2e460 <__assert_fail@plt+0x1c0d4>
   2f718:	ldr	r3, [pc, #-3236]	; 2ea7c <__assert_fail@plt+0x1c6f0>
   2f71c:	mov	r0, r5
   2f720:	add	r4, r4, #9
   2f724:	ldr	r3, [r3]
   2f728:	blx	r3
   2f72c:	mov	r1, r0
   2f730:	ldr	r0, [pc, #-3256]	; 2ea80 <__assert_fail@plt+0x1c6f4>
   2f734:	bl	11dbc <printf@plt>
   2f738:	cmp	r4, r8
   2f73c:	bcc	2f01c <__assert_fail@plt+0x1cc90>
   2f740:	b	2f130 <__assert_fail@plt+0x1cda4>
   2f744:	mov	r2, #5
   2f748:	ldr	r1, [pc, #-3276]	; 2ea84 <__assert_fail@plt+0x1c6f8>
   2f74c:	mov	r0, #0
   2f750:	ldr	fp, [sp, #112]	; 0x70
   2f754:	bl	11ea0 <dcgettext@plt>
   2f758:	mov	r1, r6
   2f75c:	bl	417d0 <warn@@Base>
   2f760:	str	r5, [sp, #236]	; 0xec
   2f764:	str	r7, [sp, #240]	; 0xf0
   2f768:	b	2e198 <__assert_fail@plt+0x1be0c>
   2f76c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f770:	mov	r4, r0
   2f774:	sub	sp, sp, #44	; 0x2c
   2f778:	ldr	r5, [r4, #16]
   2f77c:	ldr	r3, [r4, #32]
   2f780:	str	r0, [sp, #28]
   2f784:	mov	r0, r1
   2f788:	add	fp, r5, r3
   2f78c:	str	r2, [sp, #24]
   2f790:	str	r5, [sp, #8]
   2f794:	bl	2d04c <__assert_fail@plt+0x1acc0>
   2f798:	add	r1, r4, #12
   2f79c:	add	r0, r4, #8
   2f7a0:	bl	1a7b4 <__assert_fail@plt+0x8428>
   2f7a4:	cmp	r5, fp
   2f7a8:	bcs	2fcbc <__assert_fail@plt+0x1d930>
   2f7ac:	ldr	sl, [pc, #1376]	; 2fd14 <__assert_fail@plt+0x1d988>
   2f7b0:	b	2f918 <__assert_fail@plt+0x1d58c>
   2f7b4:	sub	r1, fp, r3
   2f7b8:	sub	r3, r1, #1
   2f7bc:	cmp	r3, #7
   2f7c0:	movhi	r5, #4
   2f7c4:	movhi	r6, r5
   2f7c8:	bls	2f92c <__assert_fail@plt+0x1d5a0>
   2f7cc:	ldr	r3, [sp, #28]
   2f7d0:	mov	r2, #0
   2f7d4:	mov	r1, #0
   2f7d8:	ldr	r4, [r3, #16]
   2f7dc:	mov	r3, #0
   2f7e0:	sub	r4, r7, r4
   2f7e4:	mov	r0, r4
   2f7e8:	strd	r2, [sp, #16]
   2f7ec:	ldr	r3, [sp, #28]
   2f7f0:	ldrd	r2, [r3, #32]
   2f7f4:	cmp	r3, r1
   2f7f8:	cmpeq	r2, r0
   2f7fc:	bcc	2fc74 <__assert_fail@plt+0x1d8e8>
   2f800:	ldr	r3, [sp, #16]
   2f804:	add	r5, r7, #2
   2f808:	add	r3, r7, r3
   2f80c:	cmp	r5, fp
   2f810:	str	r3, [sp, #8]
   2f814:	bcc	2f9a0 <__assert_fail@plt+0x1d614>
   2f818:	cmp	fp, r7
   2f81c:	bls	2f830 <__assert_fail@plt+0x1d4a4>
   2f820:	sub	r1, fp, r7
   2f824:	sub	r3, r1, #1
   2f828:	cmp	r3, #7
   2f82c:	bls	2fce4 <__assert_fail@plt+0x1d958>
   2f830:	add	r9, r5, r6
   2f834:	cmp	fp, r9
   2f838:	bls	2fbd0 <__assert_fail@plt+0x1d844>
   2f83c:	ldr	r7, [pc, #1236]	; 2fd18 <__assert_fail@plt+0x1d98c>
   2f840:	mov	r4, #0
   2f844:	mov	r1, r6
   2f848:	mov	r0, r5
   2f84c:	ldr	r3, [sl]
   2f850:	blx	r3
   2f854:	mov	r8, r0
   2f858:	ldr	r3, [pc, #1212]	; 2fd1c <__assert_fail@plt+0x1d990>
   2f85c:	ldr	ip, [r3, #1488]	; 0x5d0
   2f860:	sub	r3, ip, #1
   2f864:	cmn	r3, #3
   2f868:	bls	2fb6c <__assert_fail@plt+0x1d7e0>
   2f86c:	add	r5, r9, r6
   2f870:	cmp	r5, fp
   2f874:	bcc	2f988 <__assert_fail@plt+0x1d5fc>
   2f878:	cmp	fp, r9
   2f87c:	bls	2f890 <__assert_fail@plt+0x1d504>
   2f880:	sub	r1, fp, r9
   2f884:	sub	r3, r1, #1
   2f888:	cmp	r3, #7
   2f88c:	bls	2f98c <__assert_fail@plt+0x1d600>
   2f890:	mov	r9, #0
   2f894:	mov	r2, #5
   2f898:	ldr	r1, [pc, #1152]	; 2fd20 <__assert_fail@plt+0x1d994>
   2f89c:	mov	r0, #0
   2f8a0:	bl	11ea0 <dcgettext@plt>
   2f8a4:	ldr	r1, [sp, #16]
   2f8a8:	bl	11dbc <printf@plt>
   2f8ac:	mov	r2, #5
   2f8b0:	ldr	r1, [pc, #1132]	; 2fd24 <__assert_fail@plt+0x1d998>
   2f8b4:	mov	r0, #0
   2f8b8:	bl	11ea0 <dcgettext@plt>
   2f8bc:	mov	r1, r4
   2f8c0:	bl	11dbc <printf@plt>
   2f8c4:	mov	r2, #5
   2f8c8:	ldr	r1, [pc, #1112]	; 2fd28 <__assert_fail@plt+0x1d99c>
   2f8cc:	mov	r0, #0
   2f8d0:	bl	11ea0 <dcgettext@plt>
   2f8d4:	mov	r1, r8
   2f8d8:	bl	11dbc <printf@plt>
   2f8dc:	mov	r2, #5
   2f8e0:	ldr	r1, [pc, #1092]	; 2fd2c <__assert_fail@plt+0x1d9a0>
   2f8e4:	mov	r0, #0
   2f8e8:	bl	11ea0 <dcgettext@plt>
   2f8ec:	mov	r1, r9
   2f8f0:	bl	11dbc <printf@plt>
   2f8f4:	cmp	r7, #1
   2f8f8:	bls	2f9e4 <__assert_fail@plt+0x1d658>
   2f8fc:	ldr	r3, [pc, #1048]	; 2fd1c <__assert_fail@plt+0x1d990>
   2f900:	ldr	r0, [r3, #1832]	; 0x728
   2f904:	cmp	r0, #0
   2f908:	beq	2fbf0 <__assert_fail@plt+0x1d864>
   2f90c:	ldr	r3, [sp, #8]
   2f910:	cmp	fp, r3
   2f914:	bls	2fcbc <__assert_fail@plt+0x1d930>
   2f918:	ldr	r3, [sp, #8]
   2f91c:	add	r7, r3, #4
   2f920:	cmp	r7, fp
   2f924:	bcs	2f7b4 <__assert_fail@plt+0x1d428>
   2f928:	mov	r1, #4
   2f92c:	ldr	r4, [sp, #8]
   2f930:	ldr	r3, [sl]
   2f934:	mov	r0, r4
   2f938:	blx	r3
   2f93c:	mov	r3, #0
   2f940:	mvn	r2, #0
   2f944:	cmp	r1, r3
   2f948:	cmpeq	r0, r2
   2f94c:	strd	r0, [sp, #16]
   2f950:	bne	2fcd0 <__assert_fail@plt+0x1d944>
   2f954:	add	r3, r4, #12
   2f958:	cmp	r3, fp
   2f95c:	bcc	2fc10 <__assert_fail@plt+0x1d884>
   2f960:	cmp	r7, fp
   2f964:	bcs	2f978 <__assert_fail@plt+0x1d5ec>
   2f968:	sub	r1, fp, r7
   2f96c:	sub	r2, r1, #1
   2f970:	cmp	r2, #7
   2f974:	bls	2fc14 <__assert_fail@plt+0x1d888>
   2f978:	mov	r7, r3
   2f97c:	mov	r5, #12
   2f980:	mov	r6, #8
   2f984:	b	2f7cc <__assert_fail@plt+0x1d440>
   2f988:	mov	r1, r6
   2f98c:	mov	r0, r9
   2f990:	ldr	r3, [sl]
   2f994:	blx	r3
   2f998:	mov	r9, r0
   2f99c:	b	2f894 <__assert_fail@plt+0x1d508>
   2f9a0:	mov	r0, r7
   2f9a4:	ldr	r3, [sl]
   2f9a8:	mov	r1, #2
   2f9ac:	blx	r3
   2f9b0:	add	r9, r5, r6
   2f9b4:	cmp	fp, r9
   2f9b8:	uxth	r4, r0
   2f9bc:	bhi	2fbe4 <__assert_fail@plt+0x1d858>
   2f9c0:	sub	r1, fp, r5
   2f9c4:	sub	r3, r1, #1
   2f9c8:	cmp	r3, #7
   2f9cc:	sub	r7, r4, #2
   2f9d0:	movhi	r8, #0
   2f9d4:	uxth	r7, r7
   2f9d8:	movhi	r0, r8
   2f9dc:	bhi	2f858 <__assert_fail@plt+0x1d4cc>
   2f9e0:	b	2f848 <__assert_fail@plt+0x1d4bc>
   2f9e4:	ldr	r3, [sp, #24]
   2f9e8:	mov	r2, #5
   2f9ec:	cmp	r3, #0
   2f9f0:	movne	r0, #0
   2f9f4:	ldrne	r1, [pc, #820]	; 2fd30 <__assert_fail@plt+0x1d9a4>
   2f9f8:	ldreq	r1, [pc, #820]	; 2fd34 <__assert_fail@plt+0x1d9a8>
   2f9fc:	ldreq	r0, [sp, #24]
   2fa00:	bl	11ea0 <dcgettext@plt>
   2fa04:	ldr	r9, [pc, #812]	; 2fd38 <__assert_fail@plt+0x1d9ac>
   2fa08:	bl	11dbc <printf@plt>
   2fa0c:	mov	r0, r5
   2fa10:	add	r7, r0, r6
   2fa14:	cmp	r7, fp
   2fa18:	bcc	2fa44 <__assert_fail@plt+0x1d6b8>
   2fa1c:	cmp	r0, fp
   2fa20:	mov	r5, r0
   2fa24:	bcs	2f90c <__assert_fail@plt+0x1d580>
   2fa28:	sub	r1, fp, r0
   2fa2c:	sub	r3, r1, #1
   2fa30:	cmp	r3, #7
   2fa34:	bhi	2f90c <__assert_fail@plt+0x1d580>
   2fa38:	ldr	r3, [sl]
   2fa3c:	blx	r3
   2fa40:	b	2f90c <__assert_fail@plt+0x1d580>
   2fa44:	ldr	r3, [sl]
   2fa48:	mov	r1, r6
   2fa4c:	blx	r3
   2fa50:	orrs	r3, r0, r1
   2fa54:	mov	r8, r0
   2fa58:	moveq	r0, #1
   2fa5c:	movne	r0, #0
   2fa60:	beq	2f90c <__assert_fail@plt+0x1d580>
   2fa64:	ldr	r3, [sp, #24]
   2fa68:	sub	r1, fp, r7
   2fa6c:	cmp	r3, #0
   2fa70:	beq	2fb4c <__assert_fail@plt+0x1d7c0>
   2fa74:	add	r4, r7, #1
   2fa78:	cmp	r4, fp
   2fa7c:	sub	r5, r1, #2
   2fa80:	bcc	2faec <__assert_fail@plt+0x1d760>
   2fa84:	sub	r3, r1, #1
   2fa88:	cmp	r3, #7
   2fa8c:	bls	2faf0 <__assert_fail@plt+0x1d764>
   2fa90:	mov	r2, #5
   2fa94:	ldr	r1, [pc, #672]	; 2fd3c <__assert_fail@plt+0x1d9b0>
   2fa98:	bl	11ea0 <dcgettext@plt>
   2fa9c:	mov	r7, r0
   2faa0:	mov	r2, #5
   2faa4:	ldr	r1, [pc, #660]	; 2fd40 <__assert_fail@plt+0x1d9b4>
   2faa8:	mov	r0, #0
   2faac:	bl	11ea0 <dcgettext@plt>
   2fab0:	mov	r2, r0
   2fab4:	str	r4, [sp, #4]
   2fab8:	str	r5, [sp]
   2fabc:	mov	r3, r7
   2fac0:	mov	r1, r8
   2fac4:	mov	r0, r9
   2fac8:	bl	11dbc <printf@plt>
   2facc:	mov	r1, r5
   2fad0:	mov	r0, r4
   2fad4:	bl	1217c <strnlen@plt>
   2fad8:	add	r0, r0, #1
   2fadc:	add	r0, r4, r0
   2fae0:	cmp	fp, r0
   2fae4:	bhi	2fa10 <__assert_fail@plt+0x1d684>
   2fae8:	b	2f90c <__assert_fail@plt+0x1d580>
   2faec:	ldr	r1, [sp, #24]
   2faf0:	mov	r0, r7
   2faf4:	ldr	r3, [sl]
   2faf8:	blx	r3
   2fafc:	mov	r2, #5
   2fb00:	lsl	r3, r0, #24
   2fb04:	str	r3, [sp, #16]
   2fb08:	lsr	r1, r3, #26
   2fb0c:	ldr	r3, [pc, #560]	; 2fd44 <__assert_fail@plt+0x1d9b8>
   2fb10:	and	r1, r1, #28
   2fb14:	add	r1, r3, r1
   2fb18:	mov	r0, #0
   2fb1c:	ldr	r1, [r1, #1056]	; 0x420
   2fb20:	bl	11ea0 <dcgettext@plt>
   2fb24:	ldr	r3, [sp, #16]
   2fb28:	cmp	r3, #0
   2fb2c:	mov	r7, r0
   2fb30:	bge	2faa0 <__assert_fail@plt+0x1d714>
   2fb34:	mov	r2, #5
   2fb38:	ldr	r1, [pc, #520]	; 2fd48 <__assert_fail@plt+0x1d9bc>
   2fb3c:	mov	r0, #0
   2fb40:	bl	11ea0 <dcgettext@plt>
   2fb44:	mov	r2, r0
   2fb48:	b	2fab4 <__assert_fail@plt+0x1d728>
   2fb4c:	sub	r5, r1, #1
   2fb50:	mov	r2, r5
   2fb54:	mov	r1, r8
   2fb58:	mov	r3, r7
   2fb5c:	ldr	r0, [pc, #488]	; 2fd4c <__assert_fail@plt+0x1d9c0>
   2fb60:	bl	11dbc <printf@plt>
   2fb64:	mov	r4, r7
   2fb68:	b	2facc <__assert_fail@plt+0x1d740>
   2fb6c:	ldr	r2, [pc, #424]	; 2fd1c <__assert_fail@plt+0x1d990>
   2fb70:	mov	r3, #0
   2fb74:	str	r0, [sp, #32]
   2fb78:	str	r3, [sp, #36]	; 0x24
   2fb7c:	mov	lr, r4
   2fb80:	ldr	r2, [r2, #1440]	; 0x5a0
   2fb84:	ldrd	r4, [sp, #32]
   2fb88:	ldrd	r0, [r2, #16]
   2fb8c:	add	r3, r3, #1
   2fb90:	add	r2, r2, #88	; 0x58
   2fb94:	cmp	r1, r5
   2fb98:	cmpeq	r0, r4
   2fb9c:	beq	2fcdc <__assert_fail@plt+0x1d950>
   2fba0:	cmp	ip, r3
   2fba4:	bne	2fb88 <__assert_fail@plt+0x1d7fc>
   2fba8:	mov	r2, #5
   2fbac:	ldr	r1, [pc, #412]	; 2fd50 <__assert_fail@plt+0x1d9c4>
   2fbb0:	mov	r0, #0
   2fbb4:	mov	r4, lr
   2fbb8:	bl	11ea0 <dcgettext@plt>
   2fbbc:	ldr	r3, [sp, #28]
   2fbc0:	mov	r1, r8
   2fbc4:	ldr	r2, [r3, #8]
   2fbc8:	bl	417d0 <warn@@Base>
   2fbcc:	b	2f86c <__assert_fail@plt+0x1d4e0>
   2fbd0:	mov	r4, #0
   2fbd4:	mov	r8, r4
   2fbd8:	mov	r0, r4
   2fbdc:	ldr	r7, [pc, #308]	; 2fd18 <__assert_fail@plt+0x1d98c>
   2fbe0:	b	2f858 <__assert_fail@plt+0x1d4cc>
   2fbe4:	sub	r7, r4, #2
   2fbe8:	uxth	r7, r7
   2fbec:	b	2f844 <__assert_fail@plt+0x1d4b8>
   2fbf0:	mov	r2, #5
   2fbf4:	ldr	r1, [pc, #344]	; 2fd54 <__assert_fail@plt+0x1d9c8>
   2fbf8:	bl	11ea0 <dcgettext@plt>
   2fbfc:	bl	417d0 <warn@@Base>
   2fc00:	ldr	r2, [pc, #276]	; 2fd1c <__assert_fail@plt+0x1d990>
   2fc04:	mov	r3, #1
   2fc08:	str	r3, [r2, #1832]	; 0x728
   2fc0c:	b	2f90c <__assert_fail@plt+0x1d580>
   2fc10:	mov	r1, #8
   2fc14:	mov	r0, r7
   2fc18:	ldr	r2, [sl]
   2fc1c:	mov	r7, r3
   2fc20:	blx	r2
   2fc24:	mov	r5, #12
   2fc28:	mov	r6, #8
   2fc2c:	strd	r0, [sp, #16]
   2fc30:	ldr	r3, [sp, #28]
   2fc34:	ldrd	r8, [sp, #16]
   2fc38:	mov	r2, #0
   2fc3c:	ldr	r4, [r3, #16]
   2fc40:	mov	r3, #0
   2fc44:	sub	r4, r7, r4
   2fc48:	strd	r2, [sp, #8]
   2fc4c:	adds	r0, r4, r8
   2fc50:	mov	r3, #0
   2fc54:	adcs	r1, r3, r9
   2fc58:	mov	r2, r4
   2fc5c:	movcs	r3, #0
   2fc60:	movcs	r2, #1
   2fc64:	strdcs	r2, [sp, #8]
   2fc68:	ldrd	r2, [sp, #8]
   2fc6c:	orrs	r3, r2, r3
   2fc70:	beq	2f7ec <__assert_fail@plt+0x1d460>
   2fc74:	mov	r2, #5
   2fc78:	ldr	r1, [pc, #216]	; 2fd58 <__assert_fail@plt+0x1d9cc>
   2fc7c:	mov	r0, #0
   2fc80:	bl	11ea0 <dcgettext@plt>
   2fc84:	ldr	r3, [sp, #28]
   2fc88:	mov	r1, #0
   2fc8c:	sub	r4, r4, r5
   2fc90:	ldr	r5, [r3, #8]
   2fc94:	ldrd	r2, [sp, #16]
   2fc98:	str	r1, [sp]
   2fc9c:	mov	r6, r0
   2fca0:	ldr	r0, [pc, #180]	; 2fd5c <__assert_fail@plt+0x1d9d0>
   2fca4:	bl	18b24 <__assert_fail@plt+0x6798>
   2fca8:	mov	r2, r4
   2fcac:	mov	r1, r5
   2fcb0:	mov	r3, r0
   2fcb4:	mov	r0, r6
   2fcb8:	bl	417d0 <warn@@Base>
   2fcbc:	mov	r0, #10
   2fcc0:	bl	1211c <putchar@plt>
   2fcc4:	mov	r0, #1
   2fcc8:	add	sp, sp, #44	; 0x2c
   2fccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fcd0:	mov	r5, #4
   2fcd4:	mov	r6, r5
   2fcd8:	b	2fc30 <__assert_fail@plt+0x1d8a4>
   2fcdc:	mov	r4, lr
   2fce0:	b	2f86c <__assert_fail@plt+0x1d4e0>
   2fce4:	mov	r0, r7
   2fce8:	ldr	r3, [sl]
   2fcec:	blx	r3
   2fcf0:	add	r9, r5, r6
   2fcf4:	cmp	fp, r9
   2fcf8:	uxth	r4, r0
   2fcfc:	bhi	2fbe4 <__assert_fail@plt+0x1d858>
   2fd00:	sub	r7, r4, #2
   2fd04:	mov	r8, #0
   2fd08:	uxth	r7, r7
   2fd0c:	mov	r0, r8
   2fd10:	b	2f858 <__assert_fail@plt+0x1d4cc>
   2fd14:	andeq	r9, r6, r0, ror #27
   2fd18:	strdeq	pc, [r0], -lr
   2fd1c:	andeq	r7, r6, r0, lsr r5
   2fd20:	andeq	pc, r4, r0, ror r9	; <UNPREDICTABLE>
   2fd24:	muleq	r4, ip, r9
   2fd28:	andeq	pc, r4, r8, asr #19
   2fd2c:	strdeq	pc, [r4], -r8
   2fd30:	andeq	pc, r4, ip, asr sl	; <UNPREDICTABLE>
   2fd34:	andeq	pc, r4, r0, lsl #21
   2fd38:	muleq	r4, r4, sl
   2fd3c:	andeq	pc, r4, r0, asr #21
   2fd40:	andeq	fp, r4, r4, lsl #16
   2fd44:	andeq	r9, r4, ip, ror r7
   2fd48:	andeq	fp, r4, r0, lsl r9
   2fd4c:			; <UNDEFINED> instruction: 0x0004fab0
   2fd50:	andeq	pc, r4, r8, asr #21
   2fd54:	andeq	pc, r4, r4, lsr #20
   2fd58:	andeq	ip, r4, r0, ror #31
   2fd5c:	andeq	r8, r4, r8, lsr #29
   2fd60:	mov	r2, #1
   2fd64:	b	2f76c <__assert_fail@plt+0x1d3e0>
   2fd68:	mov	r2, #0
   2fd6c:	b	2f76c <__assert_fail@plt+0x1d3e0>
   2fd70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd74:	sub	sp, sp, #52	; 0x34
   2fd78:	ldr	ip, [r0, #16]
   2fd7c:	ldr	r3, [r0, #32]
   2fd80:	str	r0, [sp, #36]	; 0x24
   2fd84:	mov	r4, r1
   2fd88:	add	r1, r0, #12
   2fd8c:	add	r0, r0, #8
   2fd90:	mov	r5, ip
   2fd94:	add	sl, ip, r3
   2fd98:	str	ip, [sp, #32]
   2fd9c:	bl	1a7b4 <__assert_fail@plt+0x8428>
   2fda0:	mov	r0, r4
   2fda4:	bl	2d04c <__assert_fail@plt+0x1acc0>
   2fda8:	cmp	r5, sl
   2fdac:	bcs	300d8 <__assert_fail@plt+0x1dd4c>
   2fdb0:	ldr	fp, [pc, #1540]	; 303bc <__assert_fail@plt+0x1e030>
   2fdb4:	ldr	r3, [sp, #32]
   2fdb8:	add	r4, r3, #4
   2fdbc:	cmp	r4, sl
   2fdc0:	bcc	300ec <__assert_fail@plt+0x1dd60>
   2fdc4:	sub	r1, sl, r3
   2fdc8:	sub	r3, r1, #1
   2fdcc:	cmp	r3, #7
   2fdd0:	movhi	r3, #4
   2fdd4:	strhi	r3, [sp, #20]
   2fdd8:	movhi	r6, r3
   2fddc:	bls	300f0 <__assert_fail@plt+0x1dd64>
   2fde0:	ldr	r3, [sp, #36]	; 0x24
   2fde4:	mov	r2, #0
   2fde8:	mov	r1, #0
   2fdec:	ldr	r5, [r3, #16]
   2fdf0:	mov	r3, #0
   2fdf4:	sub	r5, r4, r5
   2fdf8:	mov	r0, r5
   2fdfc:	strd	r2, [sp, #8]
   2fe00:	ldr	r3, [sp, #36]	; 0x24
   2fe04:	ldrd	r2, [r3, #32]
   2fe08:	cmp	r3, r1
   2fe0c:	cmpeq	r2, r0
   2fe10:	bcc	30300 <__assert_fail@plt+0x1df74>
   2fe14:	add	r5, r4, #2
   2fe18:	cmp	r5, sl
   2fe1c:	bcc	30150 <__assert_fail@plt+0x1ddc4>
   2fe20:	cmp	sl, r4
   2fe24:	bls	2fe38 <__assert_fail@plt+0x1daac>
   2fe28:	sub	r1, sl, r4
   2fe2c:	sub	r3, r1, #1
   2fe30:	cmp	r3, #7
   2fe34:	bls	30390 <__assert_fail@plt+0x1e004>
   2fe38:	add	r8, r5, r6
   2fe3c:	cmp	sl, r8
   2fe40:	bls	3027c <__assert_fail@plt+0x1def0>
   2fe44:	ldr	r9, [pc, #1396]	; 303c0 <__assert_fail@plt+0x1e034>
   2fe48:	mov	r7, #0
   2fe4c:	mov	r1, r6
   2fe50:	mov	r0, r5
   2fe54:	ldr	r3, [fp]
   2fe58:	blx	r3
   2fe5c:	mov	r6, r0
   2fe60:	ldr	r3, [pc, #1372]	; 303c4 <__assert_fail@plt+0x1e038>
   2fe64:	ldr	ip, [r3, #1488]	; 0x5d0
   2fe68:	sub	r3, ip, #1
   2fe6c:	cmn	r3, #3
   2fe70:	bls	30220 <__assert_fail@plt+0x1de94>
   2fe74:	add	r4, r8, #1
   2fe78:	cmp	r4, sl
   2fe7c:	bcc	30190 <__assert_fail@plt+0x1de04>
   2fe80:	cmp	sl, r8
   2fe84:	bls	2fe98 <__assert_fail@plt+0x1db0c>
   2fe88:	sub	r1, sl, r8
   2fe8c:	sub	r3, r1, #1
   2fe90:	cmp	r3, #7
   2fe94:	bls	301ec <__assert_fail@plt+0x1de60>
   2fe98:	add	r8, r8, #2
   2fe9c:	cmp	sl, r8
   2fea0:	movhi	r1, #1
   2fea4:	movhi	r5, #0
   2fea8:	bhi	3020c <__assert_fail@plt+0x1de80>
   2feac:	mov	r5, #0
   2feb0:	mov	r4, r5
   2feb4:	cmp	r9, #1
   2feb8:	bhi	301cc <__assert_fail@plt+0x1de40>
   2febc:	mov	r2, #5
   2fec0:	ldr	r1, [pc, #1280]	; 303c8 <__assert_fail@plt+0x1e03c>
   2fec4:	mov	r0, #0
   2fec8:	bl	11ea0 <dcgettext@plt>
   2fecc:	ldr	r1, [sp, #8]
   2fed0:	bl	11dbc <printf@plt>
   2fed4:	mov	r2, #5
   2fed8:	ldr	r1, [pc, #1260]	; 303cc <__assert_fail@plt+0x1e040>
   2fedc:	mov	r0, #0
   2fee0:	bl	11ea0 <dcgettext@plt>
   2fee4:	mov	r1, r7
   2fee8:	bl	11dbc <printf@plt>
   2feec:	mov	r2, #5
   2fef0:	ldr	r1, [pc, #1240]	; 303d0 <__assert_fail@plt+0x1e044>
   2fef4:	mov	r0, #0
   2fef8:	bl	11ea0 <dcgettext@plt>
   2fefc:	mov	r1, r6
   2ff00:	bl	11dbc <printf@plt>
   2ff04:	mov	r2, #5
   2ff08:	ldr	r1, [pc, #1220]	; 303d4 <__assert_fail@plt+0x1e048>
   2ff0c:	mov	r0, #0
   2ff10:	bl	11ea0 <dcgettext@plt>
   2ff14:	mov	r1, r5
   2ff18:	bl	11dbc <printf@plt>
   2ff1c:	mov	r2, #5
   2ff20:	ldr	r1, [pc, #1200]	; 303d8 <__assert_fail@plt+0x1e04c>
   2ff24:	mov	r0, #0
   2ff28:	bl	11ea0 <dcgettext@plt>
   2ff2c:	mov	r1, r4
   2ff30:	add	r4, r4, r5
   2ff34:	bl	11dbc <printf@plt>
   2ff38:	uxtb	r4, r4
   2ff3c:	sub	r0, r4, #1
   2ff40:	mov	r2, #5
   2ff44:	uxtb	r3, r0
   2ff48:	cmp	r3, #7
   2ff4c:	bhi	30360 <__assert_fail@plt+0x1dfd4>
   2ff50:	ands	r0, r0, r4
   2ff54:	bne	3037c <__assert_fail@plt+0x1dff0>
   2ff58:	cmp	r4, #4
   2ff5c:	sxth	r7, r4
   2ff60:	ldrhi	r1, [pc, #1140]	; 303dc <__assert_fail@plt+0x1e050>
   2ff64:	ldrls	r1, [pc, #1140]	; 303e0 <__assert_fail@plt+0x1e054>
   2ff68:	bl	11ea0 <dcgettext@plt>
   2ff6c:	bl	11dbc <printf@plt>
   2ff70:	ldr	r3, [sp, #32]
   2ff74:	sub	r0, r8, r3
   2ff78:	lsl	r3, r7, #1
   2ff7c:	mov	r1, r3
   2ff80:	mov	r5, r3
   2ff84:	str	r3, [sp, #24]
   2ff88:	bl	47760 <warn@@Base+0x5f90>
   2ff8c:	ldr	r2, [sp, #8]
   2ff90:	cmp	r1, #0
   2ff94:	movne	r3, r5
   2ff98:	subne	r1, r3, r1
   2ff9c:	ldr	r3, [sp, #20]
   2ffa0:	addne	r8, r8, r1
   2ffa4:	add	r3, r3, r2
   2ffa8:	ldr	r2, [sp, #32]
   2ffac:	add	r2, r2, r3
   2ffb0:	ldr	r3, [sp, #24]
   2ffb4:	str	r2, [sp, #32]
   2ffb8:	add	r3, r8, r3
   2ffbc:	cmp	r2, r3
   2ffc0:	lslcs	r7, r7, #1
   2ffc4:	addcs	r5, r8, r4
   2ffc8:	movcs	r9, r7
   2ffcc:	bcs	3007c <__assert_fail@plt+0x1dcf0>
   2ffd0:	b	300cc <__assert_fail@plt+0x1dd40>
   2ffd4:	sub	r3, r5, r4
   2ffd8:	cmp	sl, r3
   2ffdc:	bls	2fff0 <__assert_fail@plt+0x1dc64>
   2ffe0:	sub	r1, sl, r8
   2ffe4:	sub	r3, r1, #1
   2ffe8:	cmp	r3, #7
   2ffec:	bls	3008c <__assert_fail@plt+0x1dd00>
   2fff0:	mov	r8, #0
   2fff4:	cmp	sl, r6
   2fff8:	mov	r7, r8
   2fffc:	movls	r3, r8
   30000:	strls	r8, [sp, #8]
   30004:	bls	30020 <__assert_fail@plt+0x1dc94>
   30008:	mov	r1, r4
   3000c:	ldr	r3, [fp]
   30010:	mov	r0, r5
   30014:	blx	r3
   30018:	mov	r3, r0
   3001c:	str	r1, [sp, #8]
   30020:	ldr	r0, [pc, #956]	; 303e4 <__assert_fail@plt+0x1e058>
   30024:	str	r3, [sp, #20]
   30028:	bl	11dbc <printf@plt>
   3002c:	mov	r0, r8
   30030:	mov	r2, r4
   30034:	mov	r1, r7
   30038:	bl	18e4c <__assert_fail@plt+0x6ac0>
   3003c:	ldr	r3, [sp, #20]
   30040:	mov	r2, r4
   30044:	mov	r0, r3
   30048:	ldr	r1, [sp, #8]
   3004c:	bl	18e4c <__assert_fail@plt+0x6ac0>
   30050:	ldr	r3, [pc, #912]	; 303e8 <__assert_fail@plt+0x1e05c>
   30054:	mov	r0, #10
   30058:	mov	r8, r6
   3005c:	ldr	r1, [r3]
   30060:	bl	12254 <putc@plt>
   30064:	ldr	r3, [sp, #24]
   30068:	ldr	r2, [sp, #32]
   3006c:	add	r3, r6, r3
   30070:	cmp	r2, r3
   30074:	add	r5, r5, r9
   30078:	bcc	300cc <__assert_fail@plt+0x1dd40>
   3007c:	cmp	r5, sl
   30080:	add	r6, r8, r9
   30084:	bcs	2ffd4 <__assert_fail@plt+0x1dc48>
   30088:	mov	r1, r4
   3008c:	mov	r0, r8
   30090:	ldr	r3, [fp]
   30094:	blx	r3
   30098:	cmp	sl, r6
   3009c:	mov	r8, r0
   300a0:	mov	r7, r1
   300a4:	bhi	30008 <__assert_fail@plt+0x1dc7c>
   300a8:	cmp	r5, sl
   300ac:	bcs	300c0 <__assert_fail@plt+0x1dd34>
   300b0:	sub	r1, sl, r5
   300b4:	sub	r3, r1, #1
   300b8:	cmp	r3, #7
   300bc:	bls	3000c <__assert_fail@plt+0x1dc80>
   300c0:	mov	r3, #0
   300c4:	str	r3, [sp, #8]
   300c8:	b	30020 <__assert_fail@plt+0x1dc94>
   300cc:	ldr	r3, [sp, #32]
   300d0:	cmp	sl, r3
   300d4:	bhi	2fdb4 <__assert_fail@plt+0x1da28>
   300d8:	mov	r0, #10
   300dc:	bl	1211c <putchar@plt>
   300e0:	mov	r0, #1
   300e4:	add	sp, sp, #52	; 0x34
   300e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   300ec:	mov	r1, #4
   300f0:	ldr	r5, [sp, #32]
   300f4:	ldr	r3, [fp]
   300f8:	mov	r0, r5
   300fc:	blx	r3
   30100:	mov	r3, #0
   30104:	mvn	r2, #0
   30108:	cmp	r1, r3
   3010c:	cmpeq	r0, r2
   30110:	strd	r0, [sp, #8]
   30114:	bne	30350 <__assert_fail@plt+0x1dfc4>
   30118:	add	r3, r5, #12
   3011c:	cmp	r3, sl
   30120:	bcc	30298 <__assert_fail@plt+0x1df0c>
   30124:	cmp	r4, sl
   30128:	bcs	3013c <__assert_fail@plt+0x1ddb0>
   3012c:	sub	r1, sl, r4
   30130:	sub	r2, r1, #1
   30134:	cmp	r2, #7
   30138:	bls	3029c <__assert_fail@plt+0x1df10>
   3013c:	mov	r4, r3
   30140:	mov	r3, #12
   30144:	str	r3, [sp, #20]
   30148:	mov	r6, #8
   3014c:	b	2fde0 <__assert_fail@plt+0x1da54>
   30150:	mov	r0, r4
   30154:	ldr	r3, [fp]
   30158:	mov	r1, #2
   3015c:	blx	r3
   30160:	add	r8, r5, r6
   30164:	cmp	r8, sl
   30168:	uxth	r7, r0
   3016c:	bcc	3028c <__assert_fail@plt+0x1df00>
   30170:	sub	r6, sl, r5
   30174:	sub	r3, r6, #1
   30178:	sub	r9, r7, #2
   3017c:	cmp	r3, #7
   30180:	uxth	r9, r9
   30184:	movhi	r6, #0
   30188:	bhi	2fe60 <__assert_fail@plt+0x1dad4>
   3018c:	b	2fe4c <__assert_fail@plt+0x1dac0>
   30190:	mov	r0, r8
   30194:	ldr	r3, [fp]
   30198:	mov	r1, #1
   3019c:	blx	r3
   301a0:	add	r8, r8, #2
   301a4:	cmp	r8, sl
   301a8:	uxtb	r5, r0
   301ac:	bcc	30208 <__assert_fail@plt+0x1de7c>
   301b0:	sub	r1, sl, r4
   301b4:	sub	r3, r1, #1
   301b8:	cmp	r3, #7
   301bc:	bls	3020c <__assert_fail@plt+0x1de80>
   301c0:	cmp	r9, #1
   301c4:	mov	r4, #0
   301c8:	bls	2febc <__assert_fail@plt+0x1db30>
   301cc:	cmp	r7, #0
   301d0:	beq	300d8 <__assert_fail@plt+0x1dd4c>
   301d4:	mov	r2, #5
   301d8:	ldr	r1, [pc, #524]	; 303ec <__assert_fail@plt+0x1e060>
   301dc:	mov	r0, #0
   301e0:	bl	11ea0 <dcgettext@plt>
   301e4:	bl	417d0 <warn@@Base>
   301e8:	b	300d8 <__assert_fail@plt+0x1dd4c>
   301ec:	mov	r0, r8
   301f0:	ldr	r3, [fp]
   301f4:	blx	r3
   301f8:	add	r8, r8, #2
   301fc:	cmp	r8, sl
   30200:	uxtb	r5, r0
   30204:	bcs	301c0 <__assert_fail@plt+0x1de34>
   30208:	mov	r1, #1
   3020c:	mov	r0, r4
   30210:	ldr	r3, [fp]
   30214:	blx	r3
   30218:	uxtb	r4, r0
   3021c:	b	2feb4 <__assert_fail@plt+0x1db28>
   30220:	ldr	r2, [pc, #412]	; 303c4 <__assert_fail@plt+0x1e038>
   30224:	mov	r3, #0
   30228:	str	r6, [sp, #40]	; 0x28
   3022c:	str	r3, [sp, #44]	; 0x2c
   30230:	ldr	r2, [r2, #1440]	; 0x5a0
   30234:	ldrd	r4, [sp, #40]	; 0x28
   30238:	ldrd	r0, [r2, #16]
   3023c:	add	r3, r3, #1
   30240:	add	r2, r2, #88	; 0x58
   30244:	cmp	r1, r5
   30248:	cmpeq	r0, r4
   3024c:	beq	2fe74 <__assert_fail@plt+0x1dae8>
   30250:	cmp	ip, r3
   30254:	bne	30238 <__assert_fail@plt+0x1deac>
   30258:	mov	r2, #5
   3025c:	ldr	r1, [pc, #396]	; 303f0 <__assert_fail@plt+0x1e064>
   30260:	mov	r0, #0
   30264:	bl	11ea0 <dcgettext@plt>
   30268:	ldr	r3, [sp, #36]	; 0x24
   3026c:	mov	r1, r6
   30270:	ldr	r2, [r3, #8]
   30274:	bl	417d0 <warn@@Base>
   30278:	b	2fe74 <__assert_fail@plt+0x1dae8>
   3027c:	mov	r7, #0
   30280:	mov	r6, r7
   30284:	ldr	r9, [pc, #308]	; 303c0 <__assert_fail@plt+0x1e034>
   30288:	b	2fe60 <__assert_fail@plt+0x1dad4>
   3028c:	sub	r9, r7, #2
   30290:	uxth	r9, r9
   30294:	b	2fe4c <__assert_fail@plt+0x1dac0>
   30298:	mov	r1, #8
   3029c:	mov	r0, r4
   302a0:	ldr	r2, [fp]
   302a4:	mov	r4, r3
   302a8:	blx	r2
   302ac:	mov	r6, #8
   302b0:	mov	r3, #12
   302b4:	str	r3, [sp, #20]
   302b8:	strd	r0, [sp, #8]
   302bc:	ldr	r3, [sp, #36]	; 0x24
   302c0:	ldrd	r8, [sp, #8]
   302c4:	mov	r2, #0
   302c8:	ldr	r5, [r3, #16]
   302cc:	mov	r3, #0
   302d0:	sub	r5, r4, r5
   302d4:	strd	r2, [sp, #24]
   302d8:	adds	r0, r5, r8
   302dc:	mov	r3, #0
   302e0:	adcs	r1, r3, r9
   302e4:	mov	r2, r5
   302e8:	movcs	r3, #0
   302ec:	movcs	r2, #1
   302f0:	strdcs	r2, [sp, #24]
   302f4:	ldrd	r2, [sp, #24]
   302f8:	orrs	r3, r2, r3
   302fc:	beq	2fe00 <__assert_fail@plt+0x1da74>
   30300:	mov	r2, #5
   30304:	ldr	r1, [pc, #232]	; 303f4 <__assert_fail@plt+0x1e068>
   30308:	mov	r0, #0
   3030c:	bl	11ea0 <dcgettext@plt>
   30310:	ldr	r3, [sp, #20]
   30314:	mov	r1, #0
   30318:	sub	r5, r5, r3
   3031c:	ldr	r3, [sp, #36]	; 0x24
   30320:	ldr	r6, [r3, #8]
   30324:	ldrd	r2, [sp, #8]
   30328:	str	r1, [sp]
   3032c:	mov	r4, r0
   30330:	ldr	r0, [pc, #192]	; 303f8 <__assert_fail@plt+0x1e06c>
   30334:	bl	18b24 <__assert_fail@plt+0x6798>
   30338:	mov	r2, r5
   3033c:	mov	r1, r6
   30340:	mov	r3, r0
   30344:	mov	r0, r4
   30348:	bl	417d0 <warn@@Base>
   3034c:	b	300d8 <__assert_fail@plt+0x1dd4c>
   30350:	mov	r3, #4
   30354:	str	r3, [sp, #20]
   30358:	mov	r6, r3
   3035c:	b	302bc <__assert_fail@plt+0x1df30>
   30360:	ldr	r1, [pc, #148]	; 303fc <__assert_fail@plt+0x1e070>
   30364:	mov	r0, #0
   30368:	bl	11ea0 <dcgettext@plt>
   3036c:	ldr	r3, [sp, #36]	; 0x24
   30370:	ldr	r1, [r3, #8]
   30374:	bl	412ac <error@@Base>
   30378:	b	300d8 <__assert_fail@plt+0x1dd4c>
   3037c:	ldr	r1, [pc, #124]	; 30400 <__assert_fail@plt+0x1e074>
   30380:	mov	r0, #0
   30384:	bl	11ea0 <dcgettext@plt>
   30388:	bl	417d0 <warn@@Base>
   3038c:	b	300d8 <__assert_fail@plt+0x1dd4c>
   30390:	mov	r0, r4
   30394:	ldr	r3, [fp]
   30398:	blx	r3
   3039c:	add	r8, r5, r6
   303a0:	cmp	r8, sl
   303a4:	uxth	r7, r0
   303a8:	bcc	3028c <__assert_fail@plt+0x1df00>
   303ac:	sub	r9, r7, #2
   303b0:	mov	r6, #0
   303b4:	uxth	r9, r9
   303b8:	b	2fe60 <__assert_fail@plt+0x1dad4>
   303bc:	andeq	r9, r6, r0, ror #27
   303c0:	strdeq	pc, [r0], -lr
   303c4:	andeq	r7, r6, r0, lsr r5
   303c8:	andeq	pc, r4, ip, asr #22
   303cc:	andeq	pc, r4, r0, ror fp	; <UNPREDICTABLE>
   303d0:	muleq	r4, r0, fp
   303d4:			; <UNDEFINED> instruction: 0x0004fbb4
   303d8:	ldrdeq	pc, [r4], -r4
   303dc:	andeq	pc, r4, r0, asr ip	; <UNPREDICTABLE>
   303e0:	andeq	pc, r4, r0, ror ip	; <UNPREDICTABLE>
   303e4:	andeq	r2, r5, r4, asr #14
   303e8:	andeq	r7, r6, r0, lsr r4
   303ec:	andeq	pc, r4, r4, lsl fp	; <UNPREDICTABLE>
   303f0:	andeq	pc, r4, r8, asr #21
   303f4:	andeq	ip, r4, r0, ror #31
   303f8:	andeq	r8, r4, r8, lsr #29
   303fc:	strdeq	pc, [r4], -r4
   30400:	andeq	pc, r4, ip, lsl ip	; <UNPREDICTABLE>
   30404:	mov	r1, #1
   30408:	b	2bfc0 <__assert_fail@plt+0x19c34>
   3040c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   30410:	sub	sp, sp, #16
   30414:	ldr	r5, [pc, #640]	; 3069c <__assert_fail@plt+0x1e310>
   30418:	ldr	r6, [pc, #640]	; 306a0 <__assert_fail@plt+0x1e314>
   3041c:	ldr	r2, [r5]
   30420:	ldr	r3, [r6]
   30424:	orrs	r3, r2, r3
   30428:	beq	304dc <__assert_fail@plt+0x1e150>
   3042c:	mov	r7, r1
   30430:	mov	r4, r0
   30434:	mov	r1, r0
   30438:	mov	r0, #10
   3043c:	bl	185cc <__assert_fail@plt+0x6240>
   30440:	cmp	r0, #0
   30444:	bne	304ec <__assert_fail@plt+0x1e160>
   30448:	ldr	r3, [r5]
   3044c:	cmp	r3, #0
   30450:	beq	304dc <__assert_fail@plt+0x1e150>
   30454:	mov	r1, r4
   30458:	mov	r0, #41	; 0x29
   3045c:	bl	185cc <__assert_fail@plt+0x6240>
   30460:	cmp	r0, #0
   30464:	bne	304b0 <__assert_fail@plt+0x1e124>
   30468:	mov	r1, r4
   3046c:	mov	r0, #40	; 0x28
   30470:	bl	185cc <__assert_fail@plt+0x6240>
   30474:	cmp	r0, #0
   30478:	moveq	r4, r0
   3047c:	streq	r0, [r5]
   30480:	beq	304d0 <__assert_fail@plt+0x1e144>
   30484:	add	r3, sp, #12
   30488:	str	r3, [sp]
   3048c:	mov	r0, r7
   30490:	ldr	r3, [pc, #524]	; 306a4 <__assert_fail@plt+0x1e318>
   30494:	ldr	r2, [pc, #524]	; 306a8 <__assert_fail@plt+0x1e31c>
   30498:	ldr	r1, [pc, #524]	; 306ac <__assert_fail@plt+0x1e320>
   3049c:	bl	1915c <__assert_fail@plt+0x6dd0>
   304a0:	mov	r4, r0
   304a4:	mov	r0, r4
   304a8:	add	sp, sp, #16
   304ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   304b0:	add	r3, sp, #12
   304b4:	str	r3, [sp]
   304b8:	mov	r0, r7
   304bc:	ldr	r3, [pc, #492]	; 306b0 <__assert_fail@plt+0x1e324>
   304c0:	ldr	r2, [pc, #492]	; 306b4 <__assert_fail@plt+0x1e328>
   304c4:	ldr	r1, [pc, #492]	; 306b8 <__assert_fail@plt+0x1e32c>
   304c8:	bl	1915c <__assert_fail@plt+0x6dd0>
   304cc:	mov	r4, r0
   304d0:	mov	r0, r4
   304d4:	add	sp, sp, #16
   304d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   304dc:	mov	r4, #0
   304e0:	mov	r0, r4
   304e4:	add	sp, sp, #16
   304e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   304ec:	mov	r1, r4
   304f0:	mov	r0, #0
   304f4:	bl	185cc <__assert_fail@plt+0x6240>
   304f8:	cmp	r0, #0
   304fc:	beq	30448 <__assert_fail@plt+0x1e0bc>
   30500:	mov	r1, r4
   30504:	mov	r0, #3
   30508:	bl	185cc <__assert_fail@plt+0x6240>
   3050c:	cmp	r0, #0
   30510:	beq	30448 <__assert_fail@plt+0x1e0bc>
   30514:	ldr	r9, [pc, #416]	; 306bc <__assert_fail@plt+0x1e330>
   30518:	ldr	sl, [pc, #416]	; 306c0 <__assert_fail@plt+0x1e334>
   3051c:	mov	r8, #0
   30520:	str	r8, [sp]
   30524:	mov	r2, r8
   30528:	add	r0, sl, #216	; 0xd8
   3052c:	mov	r3, #1
   30530:	mov	r1, r4
   30534:	str	r8, [r9, #1508]	; 0x5e4
   30538:	str	r8, [r9, #1504]	; 0x5e0
   3053c:	str	r8, [r9, #1512]	; 0x5e8
   30540:	str	r8, [r9, #1516]	; 0x5ec
   30544:	bl	217dc <__assert_fail@plt+0xf450>
   30548:	cmp	r0, r8
   3054c:	beq	30448 <__assert_fail@plt+0x1e0bc>
   30550:	ldr	r3, [r9, #1504]	; 0x5e0
   30554:	cmp	r3, r8
   30558:	beq	30448 <__assert_fail@plt+0x1e0bc>
   3055c:	ldr	r3, [r6]
   30560:	cmp	r3, r8
   30564:	bne	305c8 <__assert_fail@plt+0x1e23c>
   30568:	ldr	r3, [r5]
   3056c:	cmp	r3, #0
   30570:	beq	304dc <__assert_fail@plt+0x1e150>
   30574:	ldr	r2, [r9, #1504]	; 0x5e0
   30578:	mov	r3, #0
   3057c:	ldr	r1, [pc, #320]	; 306c4 <__assert_fail@plt+0x1e338>
   30580:	ldr	r0, [r9, #1508]	; 0x5e4
   30584:	bl	11ee8 <concat@plt>
   30588:	mov	r5, r0
   3058c:	bl	18770 <__assert_fail@plt+0x63e4>
   30590:	mov	r2, #5
   30594:	cmp	r0, #0
   30598:	mov	r4, r0
   3059c:	str	r0, [r9, #1116]	; 0x45c
   305a0:	beq	30680 <__assert_fail@plt+0x1e2f4>
   305a4:	ldr	r1, [pc, #284]	; 306c8 <__assert_fail@plt+0x1e33c>
   305a8:	mov	r0, #0
   305ac:	bl	11ea0 <dcgettext@plt>
   305b0:	mov	r2, r5
   305b4:	mov	r1, r7
   305b8:	bl	11dbc <printf@plt>
   305bc:	str	r5, [r9, #1120]	; 0x460
   305c0:	ldr	r4, [r9, #1116]	; 0x45c
   305c4:	b	304d0 <__assert_fail@plt+0x1e144>
   305c8:	mov	r2, #5
   305cc:	ldr	r1, [pc, #248]	; 306cc <__assert_fail@plt+0x1e340>
   305d0:	mov	r0, r8
   305d4:	bl	11ea0 <dcgettext@plt>
   305d8:	ldr	r1, [sl, #216]	; 0xd8
   305dc:	bl	11dbc <printf@plt>
   305e0:	mov	r2, #5
   305e4:	ldr	r1, [pc, #228]	; 306d0 <__assert_fail@plt+0x1e344>
   305e8:	mov	r0, r8
   305ec:	bl	11ea0 <dcgettext@plt>
   305f0:	ldr	r1, [r9, #1504]	; 0x5e0
   305f4:	bl	11dbc <printf@plt>
   305f8:	ldr	r1, [pc, #212]	; 306d4 <__assert_fail@plt+0x1e348>
   305fc:	mov	r0, r8
   30600:	mov	r2, #5
   30604:	bl	11ea0 <dcgettext@plt>
   30608:	ldr	r1, [r9, #1508]	; 0x5e4
   3060c:	cmp	r1, r8
   30610:	mov	r4, r0
   30614:	beq	30668 <__assert_fail@plt+0x1e2dc>
   30618:	mov	r0, r4
   3061c:	bl	11dbc <printf@plt>
   30620:	ldr	r0, [r9, #1512]	; 0x5e8
   30624:	mov	r2, #5
   30628:	cmp	r0, #0
   3062c:	beq	30658 <__assert_fail@plt+0x1e2cc>
   30630:	ldr	r1, [pc, #160]	; 306d8 <__assert_fail@plt+0x1e34c>
   30634:	mov	r0, #0
   30638:	bl	11ea0 <dcgettext@plt>
   3063c:	bl	11dbc <printf@plt>
   30640:	ldr	r2, [r9, #1516]	; 0x5ec
   30644:	ldr	r1, [r9, #1512]	; 0x5e8
   30648:	bl	19e7c <__assert_fail@plt+0x7af0>
   3064c:	ldr	r0, [pc, #136]	; 306dc <__assert_fail@plt+0x1e350>
   30650:	bl	11fe4 <puts@plt>
   30654:	b	30568 <__assert_fail@plt+0x1e1dc>
   30658:	ldr	r1, [pc, #128]	; 306e0 <__assert_fail@plt+0x1e354>
   3065c:	bl	11ea0 <dcgettext@plt>
   30660:	bl	11dbc <printf@plt>
   30664:	b	3064c <__assert_fail@plt+0x1e2c0>
   30668:	mov	r0, r1
   3066c:	mov	r2, #5
   30670:	ldr	r1, [pc, #108]	; 306e4 <__assert_fail@plt+0x1e358>
   30674:	bl	11ea0 <dcgettext@plt>
   30678:	mov	r1, r0
   3067c:	b	30618 <__assert_fail@plt+0x1e28c>
   30680:	ldr	r1, [pc, #96]	; 306e8 <__assert_fail@plt+0x1e35c>
   30684:	bl	11ea0 <dcgettext@plt>
   30688:	mov	r1, r5
   3068c:	bl	417d0 <warn@@Base>
   30690:	mov	r0, r5
   30694:	bl	11e10 <free@plt>
   30698:	b	304d0 <__assert_fail@plt+0x1e144>
   3069c:	muleq	r6, ip, sp
   306a0:	andeq	r9, r6, ip, asr #27
   306a4:	andeq	r8, r1, r8, lsr #18
   306a8:	andeq	r8, r1, r4, asr sl
   306ac:	andeq	r7, r6, r0, lsr #1
   306b0:	andeq	r8, r1, r4, lsl r9
   306b4:			; <UNDEFINED> instruction: 0x00018ab4
   306b8:	andeq	r7, r6, r8, ror #1
   306bc:	andeq	r7, r6, r0, lsr r5
   306c0:	andeq	r6, r6, r0, ror #10
   306c4:	ldrdeq	r1, [r5], -ip
   306c8:	andeq	pc, r4, r0, lsr sp	; <UNPREDICTABLE>
   306cc:	andeq	pc, r4, r8, lsl #25
   306d0:			; <UNDEFINED> instruction: 0x0004fcb8
   306d4:	andeq	pc, r4, ip, asr #25
   306d8:	andeq	pc, r4, ip, ror #25
   306dc:	andeq	sl, r4, r4, ror pc
   306e0:	strdeq	pc, [r4], -ip
   306e4:	andeq	pc, r4, r0, ror #25
   306e8:	andeq	pc, r4, r0, lsl sp	; <UNPREDICTABLE>
   306ec:	push	{r4, r5, r6, r7, r8, lr}
   306f0:	bl	18e80 <__assert_fail@plt+0x6af4>
   306f4:	mov	r4, #0
   306f8:	mov	r0, r4
   306fc:	add	r4, r4, #1
   30700:	bl	18358 <__assert_fail@plt+0x5fcc>
   30704:	cmp	r4, #43	; 0x2b
   30708:	bne	306f8 <__assert_fail@plt+0x1e36c>
   3070c:	ldr	r6, [pc, #192]	; 307d4 <__assert_fail@plt+0x1e448>
   30710:	ldr	r7, [r6, #1440]	; 0x5a0
   30714:	cmp	r7, #0
   30718:	beq	307ac <__assert_fail@plt+0x1e420>
   3071c:	ldr	r3, [r6, #1488]	; 0x5d0
   30720:	sub	r2, r3, #1
   30724:	cmn	r2, #3
   30728:	bhi	30794 <__assert_fail@plt+0x1e408>
   3072c:	add	r5, r3, r3, lsl #2
   30730:	mov	r4, r7
   30734:	add	r3, r3, r5, lsl #1
   30738:	add	r5, r7, r3, lsl #3
   3073c:	b	30758 <__assert_fail@plt+0x1e3cc>
   30740:	ldr	r3, [r4, #80]	; 0x50
   30744:	cmp	r3, #0
   30748:	beq	30780 <__assert_fail@plt+0x1e3f4>
   3074c:	add	r4, r4, #88	; 0x58
   30750:	cmp	r4, r5
   30754:	beq	30794 <__assert_fail@plt+0x1e408>
   30758:	ldr	r3, [r4, #64]	; 0x40
   3075c:	cmp	r3, #0
   30760:	bne	30740 <__assert_fail@plt+0x1e3b4>
   30764:	ldr	r0, [r4, #48]	; 0x30
   30768:	bl	11e10 <free@plt>
   3076c:	ldr	r0, [r4, #56]	; 0x38
   30770:	bl	11e10 <free@plt>
   30774:	ldr	r3, [r4, #80]	; 0x50
   30778:	cmp	r3, #0
   3077c:	bne	3074c <__assert_fail@plt+0x1e3c0>
   30780:	ldr	r0, [r4, #72]	; 0x48
   30784:	add	r4, r4, #88	; 0x58
   30788:	bl	11e10 <free@plt>
   3078c:	cmp	r4, r5
   30790:	bne	30758 <__assert_fail@plt+0x1e3cc>
   30794:	mov	r0, r7
   30798:	bl	11e10 <free@plt>
   3079c:	mov	r3, #0
   307a0:	str	r3, [r6, #1440]	; 0x5a0
   307a4:	str	r3, [r6, #1488]	; 0x5d0
   307a8:	str	r3, [r6, #1520]	; 0x5f0
   307ac:	ldr	r0, [r6, #1116]	; 0x45c
   307b0:	cmp	r0, #0
   307b4:	popeq	{r4, r5, r6, r7, r8, pc}
   307b8:	bl	1876c <__assert_fail@plt+0x63e0>
   307bc:	mov	r4, #0
   307c0:	ldr	r0, [r6, #1120]	; 0x460
   307c4:	str	r4, [r6, #1116]	; 0x45c
   307c8:	bl	11e10 <free@plt>
   307cc:	str	r4, [r6, #1120]	; 0x460
   307d0:	pop	{r4, r5, r6, r7, r8, pc}
   307d4:	andeq	r7, r6, r0, lsr r5
   307d8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   307dc:	mov	r6, r0
   307e0:	ldrb	r3, [r0]
   307e4:	ldr	r8, [pc, #216]	; 308c4 <__assert_fail@plt+0x1e538>
   307e8:	ldr	sl, [pc, #216]	; 308c8 <__assert_fail@plt+0x1e53c>
   307ec:	cmp	r3, #0
   307f0:	ldr	r9, [pc, #212]	; 308cc <__assert_fail@plt+0x1e540>
   307f4:	ldr	fp, [pc, #212]	; 308d0 <__assert_fail@plt+0x1e544>
   307f8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   307fc:	ldr	r7, [pc, #208]	; 308d4 <__assert_fail@plt+0x1e548>
   30800:	mov	r5, #6
   30804:	mov	r4, r8
   30808:	b	30814 <__assert_fail@plt+0x1e488>
   3080c:	bl	12074 <strlen@plt>
   30810:	mov	r5, r0
   30814:	mov	r2, r5
   30818:	mov	r1, r4
   3081c:	mov	r0, r6
   30820:	bl	12320 <strncmp@plt>
   30824:	add	r2, r6, r5
   30828:	cmp	r0, #0
   3082c:	bne	30840 <__assert_fail@plt+0x1e4b4>
   30830:	ldrb	r3, [r6, r5]
   30834:	cmp	r3, #0
   30838:	cmpne	r3, #44	; 0x2c
   3083c:	beq	30894 <__assert_fail@plt+0x1e508>
   30840:	ldr	r4, [r7, #12]!
   30844:	cmp	r4, #0
   30848:	mov	r0, r4
   3084c:	bne	3080c <__assert_fail@plt+0x1e480>
   30850:	mov	r2, #5
   30854:	mov	r1, sl
   30858:	bl	11ea0 <dcgettext@plt>
   3085c:	mov	r1, r6
   30860:	bl	417d0 <warn@@Base>
   30864:	mov	r0, r6
   30868:	mov	r1, #44	; 0x2c
   3086c:	bl	12098 <strchr@plt>
   30870:	subs	r6, r0, #0
   30874:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30878:	ldrb	r3, [r6]
   3087c:	cmp	r3, #44	; 0x2c
   30880:	ldrbeq	r3, [r6, #1]
   30884:	addeq	r6, r6, #1
   30888:	cmp	r3, #0
   3088c:	bne	307fc <__assert_fail@plt+0x1e470>
   30890:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30894:	ldr	r1, [r7, #4]
   30898:	ldr	r0, [r7, #8]
   3089c:	ldr	r3, [r1]
   308a0:	orr	r3, r3, r0
   308a4:	str	r3, [r1]
   308a8:	ldr	r3, [r9]
   308ac:	cmp	r3, #0
   308b0:	moveq	r6, r2
   308b4:	movne	r3, #1
   308b8:	movne	r6, r2
   308bc:	strne	r3, [fp]
   308c0:	b	30878 <__assert_fail@plt+0x1e4ec>
   308c4:	andeq	pc, r4, ip, asr sp	; <UNPREDICTABLE>
   308c8:	andeq	pc, r4, r4, ror #26
   308cc:	andeq	r9, r6, r8, asr #27
   308d0:	andeq	r9, r6, ip, lsl #27
   308d4:	andeq	sl, r4, r0, lsl r5
   308d8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   308dc:	mov	r5, r0
   308e0:	ldr	fp, [pc, #608]	; 30b48 <__assert_fail@plt+0x1e7bc>
   308e4:	ldr	sl, [pc, #608]	; 30b4c <__assert_fail@plt+0x1e7c0>
   308e8:	ldr	r9, [pc, #608]	; 30b50 <__assert_fail@plt+0x1e7c4>
   308ec:	ldr	r8, [pc, #608]	; 30b54 <__assert_fail@plt+0x1e7c8>
   308f0:	ldr	r7, [pc, #608]	; 30b58 <__assert_fail@plt+0x1e7cc>
   308f4:	ldr	r6, [pc, #608]	; 30b5c <__assert_fail@plt+0x1e7d0>
   308f8:	sub	r4, r0, #1
   308fc:	ldrb	r3, [r4, #1]!
   30900:	cmp	r3, #0
   30904:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30908:	sub	r3, r3, #65	; 0x41
   3090c:	cmp	r3, #52	; 0x34
   30910:	ldrls	pc, [pc, r3, lsl #2]
   30914:	b	30b2c <__assert_fail@plt+0x1e7a0>
   30918:	andeq	r0, r3, ip, lsl fp
   3091c:	andeq	r0, r3, ip, lsr #22
   30920:	andeq	r0, r3, ip, lsr #22
   30924:	andeq	r0, r3, ip, lsr #22
   30928:	andeq	r0, r3, ip, lsr #22
   3092c:	andeq	r0, r3, ip, ror #19
   30930:	andeq	r0, r3, ip, lsr #22
   30934:	andeq	r0, r3, ip, lsr #22
   30938:	andeq	r0, r3, ip, lsr #22
   3093c:	andeq	r0, r3, ip, lsr #22
   30940:	andeq	r0, r3, ip, lsl #22
   30944:	strdeq	r0, [r3], -r8
   30948:	andeq	r0, r3, ip, lsr #22
   3094c:	andeq	r0, r3, ip, lsr #22
   30950:	andeq	r0, r3, ip, lsr #22
   30954:	andeq	r0, r3, ip, lsr #22
   30958:	andeq	r0, r3, ip, lsr #22
   3095c:	andeq	r0, r3, r8, ror #21
   30960:	andeq	r0, r3, ip, lsr #22
   30964:	ldrdeq	r0, [r3], -ip
   30968:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3096c:	andeq	r0, r3, ip, lsr #22
   30970:	andeq	r0, r3, ip, lsr #22
   30974:	andeq	r0, r3, ip, lsr #22
   30978:	andeq	r0, r3, ip, lsr #22
   3097c:	andeq	r0, r3, ip, lsr #22
   30980:	andeq	r0, r3, ip, lsr #22
   30984:	andeq	r0, r3, ip, lsr #22
   30988:	andeq	r0, r3, ip, lsr #22
   3098c:	andeq	r0, r3, ip, lsr #22
   30990:	andeq	r0, r3, ip, lsr #22
   30994:	andeq	r0, r3, ip, lsr #22
   30998:	andeq	r0, r3, r0, asr #21
   3099c:	andeq	r0, r3, ip, lsr #22
   309a0:			; <UNDEFINED> instruction: 0x00030ab0
   309a4:	andeq	r0, r3, ip, lsr #22
   309a8:	andeq	r0, r3, ip, lsr #22
   309ac:	strdeq	r0, [r3], -r8
   309b0:	andeq	r0, r3, r0, lsr #21
   309b4:	andeq	r0, r3, ip, lsr #22
   309b8:	muleq	r3, r0, sl
   309bc:	andeq	r0, r3, ip, lsr #22
   309c0:	andeq	r0, r3, r0, lsl #21
   309c4:	andeq	r0, r3, ip, ror #20
   309c8:	andeq	r0, r3, ip, asr sl
   309cc:	andeq	r0, r3, ip, lsr #22
   309d0:	andeq	r0, r3, ip, asr #20
   309d4:	andeq	r0, r3, ip, lsr sl
   309d8:	andeq	r0, r3, ip, lsr #22
   309dc:	andeq	r0, r3, ip, lsr #20
   309e0:	andeq	r0, r3, r0, lsr #20
   309e4:	andeq	r0, r3, r4, lsl sl
   309e8:	andeq	r0, r3, r8, lsl #20
   309ec:	ldr	r3, [pc, #364]	; 30b60 <__assert_fail@plt+0x1e7d4>
   309f0:	mov	r2, #1
   309f4:	str	r2, [r3]
   309f8:	ldr	r3, [pc, #356]	; 30b64 <__assert_fail@plt+0x1e7d8>
   309fc:	mov	r2, #1
   30a00:	str	r2, [r3]
   30a04:	b	308fc <__assert_fail@plt+0x1e570>
   30a08:	mov	r3, #1
   30a0c:	str	r3, [sl]
   30a10:	b	308fc <__assert_fail@plt+0x1e570>
   30a14:	mov	r3, #1
   30a18:	str	r3, [r8]
   30a1c:	b	308fc <__assert_fail@plt+0x1e570>
   30a20:	mov	r3, #1
   30a24:	str	r3, [r6]
   30a28:	b	308fc <__assert_fail@plt+0x1e570>
   30a2c:	ldr	r3, [pc, #308]	; 30b68 <__assert_fail@plt+0x1e7dc>
   30a30:	mov	r2, #1
   30a34:	str	r2, [r3]
   30a38:	b	308fc <__assert_fail@plt+0x1e570>
   30a3c:	ldr	r3, [pc, #296]	; 30b6c <__assert_fail@plt+0x1e7e0>
   30a40:	mov	r2, #1
   30a44:	str	r2, [r3]
   30a48:	b	308fc <__assert_fail@plt+0x1e570>
   30a4c:	ldr	r3, [pc, #284]	; 30b70 <__assert_fail@plt+0x1e7e4>
   30a50:	mov	r2, #1
   30a54:	str	r2, [r3]
   30a58:	b	308fc <__assert_fail@plt+0x1e570>
   30a5c:	ldr	r3, [pc, #272]	; 30b74 <__assert_fail@plt+0x1e7e8>
   30a60:	mov	r2, #1
   30a64:	str	r2, [r3]
   30a68:	b	308fc <__assert_fail@plt+0x1e570>
   30a6c:	ldr	r2, [pc, #260]	; 30b78 <__assert_fail@plt+0x1e7ec>
   30a70:	ldr	r3, [r2]
   30a74:	orr	r3, r3, #1
   30a78:	str	r3, [r2]
   30a7c:	b	308fc <__assert_fail@plt+0x1e570>
   30a80:	ldr	r3, [pc, #244]	; 30b7c <__assert_fail@plt+0x1e7f0>
   30a84:	mov	r2, #1
   30a88:	str	r2, [r3]
   30a8c:	b	308fc <__assert_fail@plt+0x1e570>
   30a90:	ldr	r3, [pc, #232]	; 30b80 <__assert_fail@plt+0x1e7f4>
   30a94:	mov	r2, #1
   30a98:	str	r2, [r3]
   30a9c:	b	308fc <__assert_fail@plt+0x1e570>
   30aa0:	ldr	r3, [pc, #220]	; 30b84 <__assert_fail@plt+0x1e7f8>
   30aa4:	mov	r2, #1
   30aa8:	str	r2, [r3]
   30aac:	b	308fc <__assert_fail@plt+0x1e570>
   30ab0:	ldr	r3, [pc, #208]	; 30b88 <__assert_fail@plt+0x1e7fc>
   30ab4:	mov	r2, #1
   30ab8:	str	r2, [r3]
   30abc:	b	308fc <__assert_fail@plt+0x1e570>
   30ac0:	ldr	r3, [pc, #196]	; 30b8c <__assert_fail@plt+0x1e800>
   30ac4:	mov	r2, #1
   30ac8:	str	r2, [r3]
   30acc:	b	308fc <__assert_fail@plt+0x1e570>
   30ad0:	mov	r3, #1
   30ad4:	str	r3, [r9]
   30ad8:	b	308fc <__assert_fail@plt+0x1e570>
   30adc:	mov	r3, #1
   30ae0:	str	r3, [r7]
   30ae4:	b	308fc <__assert_fail@plt+0x1e570>
   30ae8:	ldr	r3, [pc, #160]	; 30b90 <__assert_fail@plt+0x1e804>
   30aec:	mov	r2, #1
   30af0:	str	r2, [r3]
   30af4:	b	308fc <__assert_fail@plt+0x1e570>
   30af8:	ldr	r2, [pc, #120]	; 30b78 <__assert_fail@plt+0x1e7ec>
   30afc:	ldr	r3, [r2]
   30b00:	orr	r3, r3, #2
   30b04:	str	r3, [r2]
   30b08:	b	308fc <__assert_fail@plt+0x1e570>
   30b0c:	ldr	r3, [pc, #128]	; 30b94 <__assert_fail@plt+0x1e808>
   30b10:	mov	r2, #1
   30b14:	str	r2, [r3]
   30b18:	b	308fc <__assert_fail@plt+0x1e570>
   30b1c:	ldr	r3, [pc, #116]	; 30b98 <__assert_fail@plt+0x1e80c>
   30b20:	mov	r2, #1
   30b24:	str	r2, [r3]
   30b28:	b	308fc <__assert_fail@plt+0x1e570>
   30b2c:	mov	r1, fp
   30b30:	mov	r2, #5
   30b34:	mov	r0, #0
   30b38:	bl	11ea0 <dcgettext@plt>
   30b3c:	mov	r1, r5
   30b40:	bl	417d0 <warn@@Base>
   30b44:	b	308fc <__assert_fail@plt+0x1e570>
   30b48:	andeq	pc, r4, r4, ror #26
   30b4c:			; <UNDEFINED> instruction: 0x00069db0
   30b50:			; <UNDEFINED> instruction: 0x00069dbc
   30b54:	andeq	r9, r6, r0, asr #27
   30b58:	andeq	r9, r6, r4, lsr #27
   30b5c:	andeq	r9, r6, r0, lsl #27
   30b60:	andeq	r9, r6, r8, asr #27
   30b64:	andeq	r9, r6, ip, lsl #27
   30b68:	andeq	r9, r6, r8, lsl #27
   30b6c:	muleq	r6, r0, sp
   30b70:	muleq	r6, r4, sp
   30b74:	andeq	r9, r6, r4, asr #27
   30b78:			; <UNDEFINED> instruction: 0x00069db4
   30b7c:	andeq	r9, r6, ip, asr #27
   30b80:	andeq	r9, r6, r4, lsl #27
   30b84:	ldrdeq	r9, [r6], -r0
   30b88:	ldrdeq	r9, [r6], -r4
   30b8c:	muleq	r6, r8, sp
   30b90:			; <UNDEFINED> instruction: 0x00069db8
   30b94:	muleq	r6, ip, sp
   30b98:	andeq	r9, r6, r0, lsr #27
   30b9c:	ldr	r2, [pc, #156]	; 30c40 <__assert_fail@plt+0x1e8b4>
   30ba0:	mov	r3, #1
   30ba4:	push	{r4, lr}
   30ba8:	ldr	ip, [pc, #148]	; 30c44 <__assert_fail@plt+0x1e8b8>
   30bac:	str	r3, [r2]
   30bb0:	ldr	r4, [pc, #144]	; 30c48 <__assert_fail@plt+0x1e8bc>
   30bb4:	ldr	lr, [pc, #144]	; 30c4c <__assert_fail@plt+0x1e8c0>
   30bb8:	ldr	r0, [pc, #144]	; 30c50 <__assert_fail@plt+0x1e8c4>
   30bbc:	ldr	r1, [pc, #144]	; 30c54 <__assert_fail@plt+0x1e8c8>
   30bc0:	ldr	r2, [pc, #144]	; 30c58 <__assert_fail@plt+0x1e8cc>
   30bc4:	str	r3, [r4]
   30bc8:	str	r3, [lr]
   30bcc:	str	r3, [ip]
   30bd0:	str	r3, [r0]
   30bd4:	str	r3, [r1]
   30bd8:	str	r3, [r2]
   30bdc:	ldr	r4, [pc, #120]	; 30c5c <__assert_fail@plt+0x1e8d0>
   30be0:	ldr	lr, [pc, #120]	; 30c60 <__assert_fail@plt+0x1e8d4>
   30be4:	ldr	ip, [pc, #120]	; 30c64 <__assert_fail@plt+0x1e8d8>
   30be8:	ldr	r0, [pc, #120]	; 30c68 <__assert_fail@plt+0x1e8dc>
   30bec:	ldr	r1, [pc, #120]	; 30c6c <__assert_fail@plt+0x1e8e0>
   30bf0:	ldr	r2, [pc, #120]	; 30c70 <__assert_fail@plt+0x1e8e4>
   30bf4:	str	r3, [r4]
   30bf8:	str	r3, [lr]
   30bfc:	str	r3, [ip]
   30c00:	str	r3, [r0]
   30c04:	str	r3, [r1]
   30c08:	str	r3, [r2]
   30c0c:	ldr	r4, [pc, #96]	; 30c74 <__assert_fail@plt+0x1e8e8>
   30c10:	ldr	lr, [pc, #96]	; 30c78 <__assert_fail@plt+0x1e8ec>
   30c14:	ldr	ip, [pc, #96]	; 30c7c <__assert_fail@plt+0x1e8f0>
   30c18:	ldr	r0, [pc, #96]	; 30c80 <__assert_fail@plt+0x1e8f4>
   30c1c:	ldr	r1, [pc, #96]	; 30c84 <__assert_fail@plt+0x1e8f8>
   30c20:	ldr	r2, [pc, #96]	; 30c88 <__assert_fail@plt+0x1e8fc>
   30c24:	str	r3, [r4]
   30c28:	str	r3, [lr]
   30c2c:	str	r3, [ip]
   30c30:	str	r3, [r0]
   30c34:	str	r3, [r1]
   30c38:	str	r3, [r2]
   30c3c:	pop	{r4, pc}
   30c40:	andeq	r9, r6, r4, lsl #27
   30c44:	muleq	r6, r0, sp
   30c48:	muleq	r6, r8, sp
   30c4c:			; <UNDEFINED> instruction: 0x00069db4
   30c50:	andeq	r9, r6, r0, asr #27
   30c54:	andeq	r9, r6, r8, lsl #27
   30c58:			; <UNDEFINED> instruction: 0x00069db8
   30c5c:	andeq	r9, r6, ip, lsl #27
   30c60:	andeq	r9, r6, r4, asr #27
   30c64:	andeq	r9, r6, r0, lsl #27
   30c68:	muleq	r6, r4, sp
   30c6c:	ldrdeq	r9, [r6], -r0
   30c70:			; <UNDEFINED> instruction: 0x00069dbc
   30c74:			; <UNDEFINED> instruction: 0x00069db0
   30c78:	andeq	r9, r6, r4, lsr #27
   30c7c:	andeq	r9, r6, r0, lsr #27
   30c80:	ldrdeq	r9, [r6], -r4
   30c84:	muleq	r6, ip, sp
   30c88:	andeq	r9, r6, ip, asr #27
   30c8c:	ldr	r3, [r0, #8]
   30c90:	mov	r2, #0
   30c94:	mov	r0, #1
   30c98:	str	r2, [r3, #12]
   30c9c:	bx	lr
   30ca0:	mov	r0, #1
   30ca4:	bx	lr
   30ca8:	mov	r0, #1
   30cac:	bx	lr
   30cb0:	mov	r0, #1
   30cb4:	bx	lr
   30cb8:	push	{r4, r5, r6, lr}
   30cbc:	vpush	{d8}
   30cc0:	ldr	r3, [r0, #4]
   30cc4:	mov	r5, r0
   30cc8:	cmp	r3, #0
   30ccc:	sub	sp, sp, #8
   30cd0:	mov	r6, r1
   30cd4:	vmov.f64	d8, d0
   30cd8:	beq	30cfc <__assert_fail@plt+0x1e970>
   30cdc:	mov	r4, #0
   30ce0:	ldr	r1, [r5]
   30ce4:	mov	r0, #32
   30ce8:	bl	12254 <putc@plt>
   30cec:	ldr	r3, [r5, #4]
   30cf0:	add	r4, r4, #1
   30cf4:	cmp	r4, r3
   30cf8:	bcc	30ce0 <__assert_fail@plt+0x1e954>
   30cfc:	vstr	d8, [sp]
   30d00:	mov	r2, r6
   30d04:	ldr	r1, [pc, #20]	; 30d20 <__assert_fail@plt+0x1e994>
   30d08:	ldr	r0, [r5]
   30d0c:	bl	120b0 <fprintf@plt>
   30d10:	mov	r0, #1
   30d14:	add	sp, sp, #8
   30d18:	vpop	{d8}
   30d1c:	pop	{r4, r5, r6, pc}
   30d20:	strdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   30d24:	push	{r4, r5, r6, lr}
   30d28:	vpush	{d8}
   30d2c:	ldr	r3, [r0, #4]
   30d30:	mov	r5, r0
   30d34:	cmp	r3, #0
   30d38:	sub	sp, sp, #8
   30d3c:	mov	r6, r1
   30d40:	vmov.f64	d8, d0
   30d44:	beq	30d68 <__assert_fail@plt+0x1e9dc>
   30d48:	mov	r4, #0
   30d4c:	ldr	r1, [r5]
   30d50:	mov	r0, #32
   30d54:	bl	12254 <putc@plt>
   30d58:	ldr	r3, [r5, #4]
   30d5c:	add	r4, r4, #1
   30d60:	cmp	r4, r3
   30d64:	bcc	30d4c <__assert_fail@plt+0x1e9c0>
   30d68:	vstr	d8, [sp]
   30d6c:	mov	r2, r6
   30d70:	ldr	r1, [pc, #24]	; 30d90 <__assert_fail@plt+0x1ea04>
   30d74:	ldr	r3, [r5, #16]
   30d78:	ldr	r0, [r5]
   30d7c:	bl	120b0 <fprintf@plt>
   30d80:	mov	r0, #1
   30d84:	add	sp, sp, #8
   30d88:	vpop	{d8}
   30d8c:	pop	{r4, r5, r6, pc}
   30d90:	andeq	r0, r5, r8, lsl #22
   30d94:	push	{r4, r5, r6, r7, r8, lr}
   30d98:	mov	r6, r1
   30d9c:	ldr	r1, [r0, #4]
   30da0:	sub	sp, sp, #32
   30da4:	cmp	r1, #0
   30da8:	mov	r5, r0
   30dac:	mov	r7, r2
   30db0:	mov	r8, r3
   30db4:	beq	30dd8 <__assert_fail@plt+0x1ea4c>
   30db8:	mov	r4, #0
   30dbc:	ldr	r1, [r5]
   30dc0:	mov	r0, #32
   30dc4:	bl	12254 <putc@plt>
   30dc8:	ldr	r3, [r5, #4]
   30dcc:	add	r4, r4, #1
   30dd0:	cmp	r4, r3
   30dd4:	bcc	30dbc <__assert_fail@plt+0x1ea30>
   30dd8:	add	r4, sp, #8
   30ddc:	mov	r2, r8
   30de0:	mov	r0, r4
   30de4:	ldr	r1, [pc, #36]	; 30e10 <__assert_fail@plt+0x1ea84>
   30de8:	bl	1223c <sprintf@plt>
   30dec:	str	r4, [sp]
   30df0:	mov	r3, r7
   30df4:	mov	r2, r6
   30df8:	ldr	r0, [r5]
   30dfc:	ldr	r1, [pc, #16]	; 30e14 <__assert_fail@plt+0x1ea88>
   30e00:	bl	120b0 <fprintf@plt>
   30e04:	mov	r0, #1
   30e08:	add	sp, sp, #32
   30e0c:	pop	{r4, r5, r6, r7, r8, pc}
   30e10:	andeq	r0, r5, r8, lsr fp
   30e14:	andeq	r0, r5, r0, asr #22
   30e18:	ldr	r3, [r0, #4]
   30e1c:	push	{r4, r5, r6, lr}
   30e20:	sub	r3, r3, #2
   30e24:	cmp	r3, #0
   30e28:	sub	sp, sp, #24
   30e2c:	mov	r5, r0
   30e30:	mov	r6, r1
   30e34:	str	r3, [r0, #4]
   30e38:	beq	30e5c <__assert_fail@plt+0x1ead0>
   30e3c:	mov	r4, #0
   30e40:	ldr	r1, [r5]
   30e44:	mov	r0, #32
   30e48:	bl	12254 <putc@plt>
   30e4c:	ldr	r3, [r5, #4]
   30e50:	add	r4, r4, #1
   30e54:	cmp	r4, r3
   30e58:	bcc	30e40 <__assert_fail@plt+0x1eab4>
   30e5c:	mov	r2, r6
   30e60:	mov	r0, sp
   30e64:	ldr	r1, [pc, #28]	; 30e88 <__assert_fail@plt+0x1eafc>
   30e68:	bl	1223c <sprintf@plt>
   30e6c:	mov	r2, sp
   30e70:	ldr	r0, [r5]
   30e74:	ldr	r1, [pc, #16]	; 30e8c <__assert_fail@plt+0x1eb00>
   30e78:	bl	120b0 <fprintf@plt>
   30e7c:	mov	r0, #1
   30e80:	add	sp, sp, #24
   30e84:	pop	{r4, r5, r6, pc}
   30e88:	andeq	r0, r5, r8, lsr fp
   30e8c:	andeq	r0, r5, r0, ror #22
   30e90:	ldr	r3, [r0, #12]
   30e94:	push	{r4, r5, r6, lr}
   30e98:	cmp	r3, #0
   30e9c:	sub	sp, sp, #24
   30ea0:	mov	r5, r0
   30ea4:	mov	r6, r1
   30ea8:	ble	30ec8 <__assert_fail@plt+0x1eb3c>
   30eac:	ldr	r3, [r0]
   30eb0:	mov	r2, #2
   30eb4:	mov	r1, #1
   30eb8:	ldr	r0, [pc, #108]	; 30f2c <__assert_fail@plt+0x1eba0>
   30ebc:	bl	11f24 <fwrite@plt>
   30ec0:	mov	r3, #0
   30ec4:	str	r3, [r5, #12]
   30ec8:	ldr	r3, [r5, #4]
   30ecc:	cmp	r3, #0
   30ed0:	beq	30ef4 <__assert_fail@plt+0x1eb68>
   30ed4:	mov	r4, #0
   30ed8:	ldr	r1, [r5]
   30edc:	mov	r0, #32
   30ee0:	bl	12254 <putc@plt>
   30ee4:	ldr	r3, [r5, #4]
   30ee8:	add	r4, r4, #1
   30eec:	cmp	r4, r3
   30ef0:	bcc	30ed8 <__assert_fail@plt+0x1eb4c>
   30ef4:	mov	r2, r6
   30ef8:	mov	r0, sp
   30efc:	ldr	r1, [pc, #44]	; 30f30 <__assert_fail@plt+0x1eba4>
   30f00:	bl	1223c <sprintf@plt>
   30f04:	mov	r2, sp
   30f08:	ldr	r1, [pc, #36]	; 30f34 <__assert_fail@plt+0x1eba8>
   30f0c:	ldr	r0, [r5]
   30f10:	bl	120b0 <fprintf@plt>
   30f14:	ldr	r3, [r5, #4]
   30f18:	mov	r0, #1
   30f1c:	add	r3, r3, #2
   30f20:	str	r3, [r5, #4]
   30f24:	add	sp, sp, #24
   30f28:	pop	{r4, r5, r6, pc}
   30f2c:	andeq	r9, r4, r0, ror #4
   30f30:	andeq	r0, r5, r8, lsr fp
   30f34:	andeq	r0, r5, ip, ror #22
   30f38:	push	{r4, r5, r6, lr}
   30f3c:	mov	r5, r1
   30f40:	mov	r4, r0
   30f44:	ldr	r0, [r0, #16]
   30f48:	bl	11e10 <free@plt>
   30f4c:	mov	r0, r5
   30f50:	bl	11eb8 <strdup@plt>
   30f54:	str	r0, [r4, #16]
   30f58:	mov	r0, #1
   30f5c:	pop	{r4, r5, r6, pc}
   30f60:	b	30f38 <__assert_fail@plt+0x1ebac>
   30f64:	push	{r4, r5, r6, r7, r8, lr}
   30f68:	sub	sp, sp, #16
   30f6c:	ldr	r4, [pc, #116]	; 30fe8 <__assert_fail@plt+0x1ec5c>
   30f70:	ldr	ip, [r4]
   30f74:	cmp	ip, #0
   30f78:	bne	30fe0 <__assert_fail@plt+0x1ec54>
   30f7c:	ldr	r3, [r1, #20]
   30f80:	tst	r3, #1
   30f84:	beq	30fe0 <__assert_fail@plt+0x1ec54>
   30f88:	ldr	r3, [r1, #28]
   30f8c:	ldr	r6, [r4, #4]
   30f90:	cmp	r3, r6
   30f94:	bhi	30fe0 <__assert_fail@plt+0x1ec54>
   30f98:	ldr	r5, [r1, #36]	; 0x24
   30f9c:	add	r5, r3, r5
   30fa0:	cmp	r6, r5
   30fa4:	bcs	30fe0 <__assert_fail@plt+0x1ec54>
   30fa8:	ldr	lr, [r0, #4]
   30fac:	add	r8, r4, #8
   30fb0:	add	r7, r4, #12
   30fb4:	mov	r5, r2
   30fb8:	str	ip, [sp, #12]
   30fbc:	add	ip, r4, #16
   30fc0:	mov	r2, r1
   30fc4:	stmib	sp, {r7, r8}
   30fc8:	mov	r1, r5
   30fcc:	str	ip, [sp]
   30fd0:	sub	r3, r6, r3
   30fd4:	ldr	r5, [lr, #296]	; 0x128
   30fd8:	blx	r5
   30fdc:	str	r0, [r4]
   30fe0:	add	sp, sp, #16
   30fe4:	pop	{r4, r5, r6, r7, r8, pc}
   30fe8:	andeq	r9, r6, ip, asr ip
   30fec:	ldr	r3, [r0]
   30ff0:	push	{r4, lr}
   30ff4:	cmp	r3, #0
   30ff8:	beq	31014 <__assert_fail@plt+0x1ec88>
   30ffc:	ldm	r3, {r2, r4}
   31000:	str	r2, [r0]
   31004:	mov	r0, r3
   31008:	bl	11e10 <free@plt>
   3100c:	mov	r0, r4
   31010:	pop	{r4, pc}
   31014:	ldr	r3, [pc, #12]	; 31028 <__assert_fail@plt+0x1ec9c>
   31018:	ldr	r2, [pc, #12]	; 3102c <__assert_fail@plt+0x1eca0>
   3101c:	ldr	r1, [pc, #12]	; 31030 <__assert_fail@plt+0x1eca4>
   31020:	ldr	r0, [pc, #12]	; 31034 <__assert_fail@plt+0x1eca8>
   31024:	bl	1238c <__assert_fail@plt>
   31028:	andeq	r0, r5, r4, lsr #15
   3102c:	ldrdeq	r0, [r0], -lr
   31030:	andeq	r0, r5, r8, ror fp
   31034:	muleq	r5, r0, fp
   31038:	push	{r4, r5, r6, lr}
   3103c:	mov	r5, r0
   31040:	add	r0, r0, #8
   31044:	bl	30fec <__assert_fail@plt+0x1ec60>
   31048:	subs	r6, r0, #0
   3104c:	beq	3109c <__assert_fail@plt+0x1ed10>
   31050:	ldr	r3, [r5, #4]
   31054:	cmp	r3, #0
   31058:	beq	3107c <__assert_fail@plt+0x1ecf0>
   3105c:	mov	r4, #0
   31060:	ldr	r1, [r5]
   31064:	mov	r0, #32
   31068:	bl	12254 <putc@plt>
   3106c:	ldr	r3, [r5, #4]
   31070:	add	r4, r4, #1
   31074:	cmp	r4, r3
   31078:	bcc	31060 <__assert_fail@plt+0x1ecd4>
   3107c:	mov	r2, r6
   31080:	ldr	r1, [pc, #28]	; 310a4 <__assert_fail@plt+0x1ed18>
   31084:	ldr	r0, [r5]
   31088:	bl	120b0 <fprintf@plt>
   3108c:	mov	r0, r6
   31090:	bl	11e10 <free@plt>
   31094:	mov	r0, #1
   31098:	pop	{r4, r5, r6, pc}
   3109c:	mov	r0, r6
   310a0:	pop	{r4, r5, r6, pc}
   310a4:	andeq	r0, r5, ip, lsl #29
   310a8:	push	{r4, lr}
   310ac:	add	r0, r0, #8
   310b0:	bl	30fec <__assert_fail@plt+0x1ec60>
   310b4:	subs	r3, r0, #0
   310b8:	beq	310c8 <__assert_fail@plt+0x1ed3c>
   310bc:	bl	11e10 <free@plt>
   310c0:	mov	r0, #1
   310c4:	pop	{r4, pc}
   310c8:	mov	r0, r3
   310cc:	pop	{r4, pc}
   310d0:	push	{r4, r5, r6, lr}
   310d4:	mov	r5, r0
   310d8:	sub	sp, sp, #8
   310dc:	add	r0, r0, #8
   310e0:	mov	r6, r1
   310e4:	bl	30fec <__assert_fail@plt+0x1ec60>
   310e8:	subs	r4, r0, #0
   310ec:	moveq	r0, r4
   310f0:	beq	31118 <__assert_fail@plt+0x1ed8c>
   310f4:	str	r4, [sp]
   310f8:	mov	r2, r6
   310fc:	ldr	r3, [r5, #16]
   31100:	ldr	r1, [pc, #24]	; 31120 <__assert_fail@plt+0x1ed94>
   31104:	ldr	r0, [r5]
   31108:	bl	120b0 <fprintf@plt>
   3110c:	mov	r0, r4
   31110:	bl	11e10 <free@plt>
   31114:	mov	r0, #1
   31118:	add	sp, sp, #8
   3111c:	pop	{r4, r5, r6, pc}
   31120:	andeq	r0, r5, r4, lsr #23
   31124:	push	{r4, r5, r6, r7, r8, lr}
   31128:	mov	r4, r0
   3112c:	sub	sp, sp, #8
   31130:	add	r0, r0, #8
   31134:	mov	r7, r1
   31138:	mov	r6, r2
   3113c:	bl	30fec <__assert_fail@plt+0x1ec60>
   31140:	subs	r5, r0, #0
   31144:	moveq	r0, r5
   31148:	beq	31240 <__assert_fail@plt+0x1eeb4>
   3114c:	ldr	r3, [r4, #28]
   31150:	cmp	r3, #0
   31154:	beq	311e4 <__assert_fail@plt+0x1ee58>
   31158:	mov	r2, #3
   3115c:	mov	r1, r7
   31160:	ldr	r0, [r4, #20]
   31164:	blx	r3
   31168:	subs	r8, r0, #0
   3116c:	beq	311e4 <__assert_fail@plt+0x1ee58>
   31170:	ldr	r1, [pc, #352]	; 312d8 <__assert_fail@plt+0x1ef4c>
   31174:	bl	11d5c <strstr@plt>
   31178:	subs	r2, r0, #0
   3117c:	beq	31278 <__assert_fail@plt+0x1eeec>
   31180:	mov	r3, #0
   31184:	strb	r3, [r2], #2
   31188:	ldr	r1, [pc, #332]	; 312dc <__assert_fail@plt+0x1ef50>
   3118c:	str	r5, [sp]
   31190:	ldr	r3, [r4, #16]
   31194:	ldr	r0, [r4]
   31198:	bl	120b0 <fprintf@plt>
   3119c:	cmp	r6, #2
   311a0:	bcc	311c8 <__assert_fail@plt+0x1ee3c>
   311a4:	cmp	r6, #3
   311a8:	bls	31248 <__assert_fail@plt+0x1eebc>
   311ac:	cmp	r6, #5
   311b0:	bne	311c8 <__assert_fail@plt+0x1ee3c>
   311b4:	ldr	r3, [r4]
   311b8:	mov	r2, #10
   311bc:	mov	r1, #1
   311c0:	ldr	r0, [pc, #280]	; 312e0 <__assert_fail@plt+0x1ef54>
   311c4:	bl	11f24 <fwrite@plt>
   311c8:	mov	r2, r8
   311cc:	ldr	r1, [pc, #272]	; 312e4 <__assert_fail@plt+0x1ef58>
   311d0:	ldr	r0, [r4]
   311d4:	bl	120b0 <fprintf@plt>
   311d8:	mov	r0, r8
   311dc:	bl	11e10 <free@plt>
   311e0:	b	31228 <__assert_fail@plt+0x1ee9c>
   311e4:	str	r5, [sp]
   311e8:	mov	r2, r7
   311ec:	ldr	r3, [r4, #16]
   311f0:	ldr	r1, [pc, #228]	; 312dc <__assert_fail@plt+0x1ef50>
   311f4:	ldr	r0, [r4]
   311f8:	bl	120b0 <fprintf@plt>
   311fc:	cmp	r6, #2
   31200:	bcc	31228 <__assert_fail@plt+0x1ee9c>
   31204:	cmp	r6, #3
   31208:	bls	31260 <__assert_fail@plt+0x1eed4>
   3120c:	cmp	r6, #5
   31210:	bne	31228 <__assert_fail@plt+0x1ee9c>
   31214:	ldr	r3, [r4]
   31218:	mov	r2, #10
   3121c:	mov	r1, #1
   31220:	ldr	r0, [pc, #184]	; 312e0 <__assert_fail@plt+0x1ef54>
   31224:	bl	11f24 <fwrite@plt>
   31228:	ldr	r1, [r4]
   3122c:	mov	r0, #10
   31230:	bl	1220c <fputc@plt>
   31234:	mov	r0, r5
   31238:	bl	11e10 <free@plt>
   3123c:	mov	r0, #1
   31240:	add	sp, sp, #8
   31244:	pop	{r4, r5, r6, r7, r8, pc}
   31248:	ldr	r3, [r4]
   3124c:	mov	r2, #6
   31250:	mov	r1, #1
   31254:	ldr	r0, [pc, #140]	; 312e8 <__assert_fail@plt+0x1ef5c>
   31258:	bl	11f24 <fwrite@plt>
   3125c:	b	311c8 <__assert_fail@plt+0x1ee3c>
   31260:	ldr	r3, [r4]
   31264:	mov	r2, #6
   31268:	mov	r1, #1
   3126c:	ldr	r0, [pc, #116]	; 312e8 <__assert_fail@plt+0x1ef5c>
   31270:	bl	11f24 <fwrite@plt>
   31274:	b	31228 <__assert_fail@plt+0x1ee9c>
   31278:	str	r5, [sp]
   3127c:	mov	r2, r8
   31280:	ldr	r3, [r4, #16]
   31284:	ldr	r1, [pc, #80]	; 312dc <__assert_fail@plt+0x1ef50>
   31288:	ldr	r0, [r4]
   3128c:	bl	120b0 <fprintf@plt>
   31290:	cmp	r6, #2
   31294:	bcc	311d8 <__assert_fail@plt+0x1ee4c>
   31298:	cmp	r6, #3
   3129c:	bls	312c0 <__assert_fail@plt+0x1ef34>
   312a0:	cmp	r6, #5
   312a4:	bne	311d8 <__assert_fail@plt+0x1ee4c>
   312a8:	ldr	r3, [r4]
   312ac:	mov	r2, #10
   312b0:	mov	r1, #1
   312b4:	ldr	r0, [pc, #36]	; 312e0 <__assert_fail@plt+0x1ef54>
   312b8:	bl	11f24 <fwrite@plt>
   312bc:	b	311d8 <__assert_fail@plt+0x1ee4c>
   312c0:	ldr	r3, [r4]
   312c4:	mov	r2, #6
   312c8:	mov	r1, #1
   312cc:	ldr	r0, [pc, #20]	; 312e8 <__assert_fail@plt+0x1ef5c>
   312d0:	bl	11f24 <fwrite@plt>
   312d4:	b	311d8 <__assert_fail@plt+0x1ee4c>
   312d8:	andeq	r9, r4, r4, ror #9
   312dc:	andeq	r0, r5, r0, asr #23
   312e0:	andeq	r0, r5, r4, ror #23
   312e4:	strdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   312e8:	ldrdeq	r0, [r5], -ip
   312ec:	ldr	r3, [r0, #8]
   312f0:	cmp	r3, #0
   312f4:	beq	31304 <__assert_fail@plt+0x1ef78>
   312f8:	str	r1, [r3, #12]
   312fc:	mov	r0, #1
   31300:	bx	lr
   31304:	push	{r4, lr}
   31308:	ldr	r3, [pc, #12]	; 3131c <__assert_fail@plt+0x1ef90>
   3130c:	ldr	r2, [pc, #12]	; 31320 <__assert_fail@plt+0x1ef94>
   31310:	ldr	r1, [pc, #12]	; 31324 <__assert_fail@plt+0x1ef98>
   31314:	ldr	r0, [pc, #12]	; 31328 <__assert_fail@plt+0x1ef9c>
   31318:	bl	1238c <__assert_fail@plt>
   3131c:			; <UNDEFINED> instruction: 0x000507b0
   31320:	muleq	r0, r8, r5
   31324:	andeq	r0, r5, r8, ror fp
   31328:	muleq	r5, r0, fp
   3132c:	ldr	r3, [r0, #4]
   31330:	push	{r4, lr}
   31334:	cmp	r3, #0
   31338:	bne	31354 <__assert_fail@plt+0x1efc8>
   3133c:	mov	r2, r1
   31340:	ldr	r0, [r0]
   31344:	ldr	r1, [pc, #28]	; 31368 <__assert_fail@plt+0x1efdc>
   31348:	bl	120b0 <fprintf@plt>
   3134c:	mov	r0, #1
   31350:	pop	{r4, pc}
   31354:	ldr	r3, [pc, #16]	; 3136c <__assert_fail@plt+0x1efe0>
   31358:	ldr	r2, [pc, #16]	; 31370 <__assert_fail@plt+0x1efe4>
   3135c:	ldr	r1, [pc, #16]	; 31374 <__assert_fail@plt+0x1efe8>
   31360:	ldr	r0, [pc, #16]	; 31378 <__assert_fail@plt+0x1efec>
   31364:	bl	1238c <__assert_fail@plt>
   31368:	andeq	r0, r5, r0, lsl ip
   3136c:	andeq	r0, r5, r8, asr #15
   31370:	andeq	r0, r0, r7, lsr #4
   31374:	andeq	r0, r5, r8, ror fp
   31378:	strdeq	r0, [r5], -ip
   3137c:	ldr	r3, [r0, #4]
   31380:	push	{r4, lr}
   31384:	cmp	r3, #0
   31388:	bne	313a4 <__assert_fail@plt+0x1f018>
   3138c:	mov	r2, r1
   31390:	ldr	r0, [r0]
   31394:	ldr	r1, [pc, #28]	; 313b8 <__assert_fail@plt+0x1f02c>
   31398:	bl	120b0 <fprintf@plt>
   3139c:	mov	r0, #1
   313a0:	pop	{r4, pc}
   313a4:	ldr	r3, [pc, #16]	; 313bc <__assert_fail@plt+0x1f030>
   313a8:	ldr	r2, [pc, #16]	; 313c0 <__assert_fail@plt+0x1f034>
   313ac:	ldr	r1, [pc, #16]	; 313c4 <__assert_fail@plt+0x1f038>
   313b0:	ldr	r0, [pc, #16]	; 313c8 <__assert_fail@plt+0x1f03c>
   313b4:	bl	1238c <__assert_fail@plt>
   313b8:	andeq	lr, r4, r4, asr #4
   313bc:	ldrdeq	r0, [r5], -r8
   313c0:	andeq	r0, r0, r9, lsl r2
   313c4:	andeq	r0, r5, r8, ror fp
   313c8:	strdeq	r0, [r5], -ip
   313cc:	cmp	r0, #0
   313d0:	push	{r4, lr}
   313d4:	beq	313f8 <__assert_fail@plt+0x1f06c>
   313d8:	ldr	r3, [r0, #8]
   313dc:	cmp	r3, r1
   313e0:	beq	313f0 <__assert_fail@plt+0x1f064>
   313e4:	cmp	r3, #3
   313e8:	strne	r1, [r0, #8]
   313ec:	beq	3140c <__assert_fail@plt+0x1f080>
   313f0:	mov	r0, #1
   313f4:	pop	{r4, pc}
   313f8:	ldr	r3, [pc, #32]	; 31420 <__assert_fail@plt+0x1f094>
   313fc:	ldr	r2, [pc, #32]	; 31424 <__assert_fail@plt+0x1f098>
   31400:	ldr	r1, [pc, #32]	; 31428 <__assert_fail@plt+0x1f09c>
   31404:	ldr	r0, [pc, #32]	; 3142c <__assert_fail@plt+0x1f0a0>
   31408:	bl	1238c <__assert_fail@plt>
   3140c:	ldr	r3, [pc, #12]	; 31420 <__assert_fail@plt+0x1f094>
   31410:	ldr	r2, [pc, #24]	; 31430 <__assert_fail@plt+0x1f0a4>
   31414:	ldr	r1, [pc, #12]	; 31428 <__assert_fail@plt+0x1f09c>
   31418:	ldr	r0, [pc, #20]	; 31434 <__assert_fail@plt+0x1f0a8>
   3141c:	bl	1238c <__assert_fail@plt>
   31420:	strdeq	r0, [r5], -r4
   31424:	andeq	r0, r0, sl, lsl #16
   31428:	andeq	r0, r5, r8, ror fp
   3142c:	muleq	r5, r0, fp
   31430:	andeq	r0, r0, pc, lsl #16
   31434:	andeq	r0, r5, r8, lsl ip
   31438:	push	{r4, r5, r6, lr}
   3143c:	mov	r4, r0
   31440:	sub	sp, sp, #16
   31444:	add	r0, r0, #8
   31448:	mov	r5, r1
   3144c:	bl	30fec <__assert_fail@plt+0x1ec60>
   31450:	subs	r6, r0, #0
   31454:	beq	314c8 <__assert_fail@plt+0x1f13c>
   31458:	ldr	r1, [sp, #32]
   3145c:	ldr	r0, [r4, #8]
   31460:	bl	313cc <__assert_fail@plt+0x1f040>
   31464:	cmp	r0, #0
   31468:	beq	314c8 <__assert_fail@plt+0x1f13c>
   3146c:	ldrb	r3, [r5]
   31470:	cmp	r3, #0
   31474:	beq	314d4 <__assert_fail@plt+0x1f148>
   31478:	ldr	r3, [r4, #8]
   3147c:	ldr	r2, [sp, #32]
   31480:	ldr	r0, [r4]
   31484:	cmp	r2, #3
   31488:	ldr	r1, [r3, #16]
   3148c:	ldr	ip, [r3, #4]
   31490:	ldr	r3, [r4, #16]
   31494:	bhi	314e0 <__assert_fail@plt+0x1f154>
   31498:	stmib	sp, {r1, ip}
   3149c:	ldr	r2, [pc, #64]	; 314e4 <__assert_fail@plt+0x1f158>
   314a0:	ldr	r1, [sp, #32]
   314a4:	str	r6, [sp]
   314a8:	ldr	r1, [r2, r1, lsl #2]
   314ac:	mov	r2, r5
   314b0:	str	r1, [sp, #12]
   314b4:	ldr	r1, [pc, #44]	; 314e8 <__assert_fail@plt+0x1f15c>
   314b8:	bl	120b0 <fprintf@plt>
   314bc:	mov	r0, #1
   314c0:	add	sp, sp, #16
   314c4:	pop	{r4, r5, r6, pc}
   314c8:	mov	r0, #0
   314cc:	add	sp, sp, #16
   314d0:	pop	{r4, r5, r6, pc}
   314d4:	mov	r0, #1
   314d8:	add	sp, sp, #16
   314dc:	pop	{r4, r5, r6, pc}
   314e0:	bl	1232c <abort@plt>
   314e4:	andeq	r0, r5, r4, lsl #17
   314e8:	andeq	r0, r5, ip, asr #24
   314ec:	push	{r4, lr}
   314f0:	ldr	r3, [pc, #12]	; 31504 <__assert_fail@plt+0x1f178>
   314f4:	ldr	r2, [pc, #12]	; 31508 <__assert_fail@plt+0x1f17c>
   314f8:	ldr	r1, [pc, #12]	; 3150c <__assert_fail@plt+0x1f180>
   314fc:	ldr	r0, [pc, #12]	; 31510 <__assert_fail@plt+0x1f184>
   31500:	bl	1238c <__assert_fail@plt>
   31504:	andeq	r0, r5, r8, lsl #16
   31508:	andeq	r0, r0, r7, lsr r8
   3150c:	andeq	r0, r5, r8, ror fp
   31510:	andeq	r0, r5, r8, ror ip
   31514:	ldr	r3, [r0, #8]
   31518:	cmp	r3, #0
   3151c:	beq	31528 <__assert_fail@plt+0x1f19c>
   31520:	mov	r0, #1
   31524:	bx	lr
   31528:	push	{r4, lr}
   3152c:	bl	314ec <__assert_fail@plt+0x1f160>
   31530:	ldr	ip, [r0, #8]
   31534:	push	{r4, lr}
   31538:	sub	sp, sp, #8
   3153c:	ldr	r2, [ip, #4]
   31540:	ldr	ip, [ip, #16]
   31544:	mov	r4, r0
   31548:	ldr	r3, [r0, #16]
   3154c:	ldr	r1, [pc, #96]	; 315b4 <__assert_fail@plt+0x1f228>
   31550:	ldr	r0, [r0]
   31554:	str	ip, [sp]
   31558:	bl	120b0 <fprintf@plt>
   3155c:	ldr	r3, [r4, #8]
   31560:	ldr	r2, [r3, #24]
   31564:	cmp	r2, #0
   31568:	bne	31590 <__assert_fail@plt+0x1f204>
   3156c:	ldr	r1, [r4]
   31570:	mov	r0, #10
   31574:	bl	1220c <fputc@plt>
   31578:	ldr	r3, [r4, #8]
   3157c:	cmp	r3, #0
   31580:	beq	315b0 <__assert_fail@plt+0x1f224>
   31584:	mov	r0, #1
   31588:	add	sp, sp, #8
   3158c:	pop	{r4, pc}
   31590:	ldr	r2, [r3, #20]
   31594:	ldr	r1, [pc, #28]	; 315b8 <__assert_fail@plt+0x1f22c>
   31598:	ldr	r0, [r4]
   3159c:	bl	120b0 <fprintf@plt>
   315a0:	ldr	r3, [r4, #8]
   315a4:	ldr	r0, [r3, #20]
   315a8:	bl	11e10 <free@plt>
   315ac:	b	3156c <__assert_fail@plt+0x1f1e0>
   315b0:	bl	314ec <__assert_fail@plt+0x1f160>
   315b4:	andeq	r0, r5, r0, lsr #25
   315b8:			; <UNDEFINED> instruction: 0x00050cbc
   315bc:	ldr	r2, [r0, #8]
   315c0:	push	{r4, lr}
   315c4:	cmp	r2, #0
   315c8:	beq	31654 <__assert_fail@plt+0x1f2c8>
   315cc:	ldr	r3, [r0, #4]
   315d0:	cmp	r3, #1
   315d4:	bls	31640 <__assert_fail@plt+0x1f2b4>
   315d8:	ldr	r4, [r2, #4]
   315dc:	sub	r3, r3, #2
   315e0:	str	r3, [r0, #4]
   315e4:	mov	r0, r4
   315e8:	bl	12074 <strlen@plt>
   315ec:	sub	r0, r0, #2
   315f0:	add	r3, r4, r0
   315f4:	ldrb	r2, [r4, r0]
   315f8:	cmp	r2, #32
   315fc:	bne	3162c <__assert_fail@plt+0x1f2a0>
   31600:	ldrb	r2, [r3, #1]
   31604:	cmp	r2, #32
   31608:	bne	3162c <__assert_fail@plt+0x1f2a0>
   3160c:	ldrb	r2, [r3, #2]
   31610:	cmp	r2, #0
   31614:	bne	3162c <__assert_fail@plt+0x1f2a0>
   31618:	mov	r1, #125	; 0x7d
   3161c:	strb	r1, [r4, r0]
   31620:	mov	r0, #1
   31624:	strb	r2, [r3, #1]
   31628:	pop	{r4, pc}
   3162c:	ldr	r3, [pc, #52]	; 31668 <__assert_fail@plt+0x1f2dc>
   31630:	ldr	r2, [pc, #52]	; 3166c <__assert_fail@plt+0x1f2e0>
   31634:	ldr	r1, [pc, #52]	; 31670 <__assert_fail@plt+0x1f2e4>
   31638:	ldr	r0, [pc, #52]	; 31674 <__assert_fail@plt+0x1f2e8>
   3163c:	bl	1238c <__assert_fail@plt>
   31640:	ldr	r3, [pc, #32]	; 31668 <__assert_fail@plt+0x1f2dc>
   31644:	ldr	r2, [pc, #44]	; 31678 <__assert_fail@plt+0x1f2ec>
   31648:	ldr	r1, [pc, #32]	; 31670 <__assert_fail@plt+0x1f2e4>
   3164c:	ldr	r0, [pc, #40]	; 3167c <__assert_fail@plt+0x1f2f0>
   31650:	bl	1238c <__assert_fail@plt>
   31654:	ldr	r3, [pc, #12]	; 31668 <__assert_fail@plt+0x1f2dc>
   31658:	ldr	r2, [pc, #32]	; 31680 <__assert_fail@plt+0x1f2f4>
   3165c:	ldr	r1, [pc, #12]	; 31670 <__assert_fail@plt+0x1f2e4>
   31660:	ldr	r0, [pc, #28]	; 31684 <__assert_fail@plt+0x1f2f8>
   31664:	bl	1238c <__assert_fail@plt>
   31668:	andeq	r0, r5, ip, lsl r8
   3166c:			; <UNDEFINED> instruction: 0x000004b4
   31670:	andeq	r0, r5, r8, ror fp
   31674:	andeq	r0, r5, r0, ror #25
   31678:	andeq	r0, r0, lr, lsr #9
   3167c:	andeq	r0, r5, ip, asr #25
   31680:	andeq	r0, r0, sp, lsr #9
   31684:	muleq	r5, r0, fp
   31688:	b	315bc <__assert_fail@plt+0x1f230>
   3168c:	push	{r4, r5, r6, r7, r8, lr}
   31690:	ldr	r6, [r0]
   31694:	cmp	r6, #0
   31698:	beq	316f8 <__assert_fail@plt+0x1f36c>
   3169c:	mov	r4, r0
   316a0:	mov	r0, r1
   316a4:	mov	r7, r1
   316a8:	bl	12074 <strlen@plt>
   316ac:	mov	r5, r0
   316b0:	ldr	r0, [r6, #4]
   316b4:	bl	12074 <strlen@plt>
   316b8:	add	r0, r5, r0
   316bc:	add	r0, r0, #1
   316c0:	bl	11f3c <xmalloc@plt>
   316c4:	ldr	r3, [r4]
   316c8:	mov	r2, r7
   316cc:	ldr	r1, [pc, #56]	; 3170c <__assert_fail@plt+0x1f380>
   316d0:	ldr	r3, [r3, #4]
   316d4:	mov	r5, r0
   316d8:	bl	1223c <sprintf@plt>
   316dc:	ldr	r3, [r4]
   316e0:	ldr	r0, [r3, #4]
   316e4:	bl	11e10 <free@plt>
   316e8:	ldr	r3, [r4]
   316ec:	mov	r0, #1
   316f0:	str	r5, [r3, #4]
   316f4:	pop	{r4, r5, r6, r7, r8, pc}
   316f8:	ldr	r3, [pc, #16]	; 31710 <__assert_fail@plt+0x1f384>
   316fc:	mov	r2, #360	; 0x168
   31700:	ldr	r1, [pc, #12]	; 31714 <__assert_fail@plt+0x1f388>
   31704:	ldr	r0, [pc, #12]	; 31718 <__assert_fail@plt+0x1f38c>
   31708:	bl	1238c <__assert_fail@plt>
   3170c:	andeq	sp, r4, r0, asr #31
   31710:	andeq	r0, r5, r0, lsr r8
   31714:	andeq	r0, r5, r8, ror fp
   31718:	muleq	r5, r0, fp
   3171c:	push	{r4, r5, r6, r7, r8, lr}
   31720:	subs	r4, r1, #0
   31724:	beq	31780 <__assert_fail@plt+0x1f3f4>
   31728:	ldr	r6, [r0]
   3172c:	mov	r5, r0
   31730:	cmp	r6, #0
   31734:	beq	31788 <__assert_fail@plt+0x1f3fc>
   31738:	ldr	r8, [r6, #4]
   3173c:	mov	r0, r8
   31740:	bl	12074 <strlen@plt>
   31744:	mov	r7, r0
   31748:	mov	r0, r4
   3174c:	bl	12074 <strlen@plt>
   31750:	add	r1, r7, r0
   31754:	add	r1, r1, #1
   31758:	mov	r0, r8
   3175c:	bl	11ed0 <xrealloc@plt>
   31760:	ldr	r3, [r5]
   31764:	mov	r1, r4
   31768:	str	r0, [r6, #4]
   3176c:	ldr	r0, [r3, #4]
   31770:	add	r0, r0, r7
   31774:	bl	11f6c <strcpy@plt>
   31778:	mov	r0, #1
   3177c:	pop	{r4, r5, r6, r7, r8, pc}
   31780:	mov	r0, r4
   31784:	pop	{r4, r5, r6, r7, r8, pc}
   31788:	ldr	r3, [pc, #12]	; 3179c <__assert_fail@plt+0x1f410>
   3178c:	mov	r2, #380	; 0x17c
   31790:	ldr	r1, [pc, #8]	; 317a0 <__assert_fail@plt+0x1f414>
   31794:	ldr	r0, [pc, #8]	; 317a4 <__assert_fail@plt+0x1f418>
   31798:	bl	1238c <__assert_fail@plt>
   3179c:	andeq	r0, r5, r0, asr #16
   317a0:	andeq	r0, r5, r8, ror fp
   317a4:	muleq	r5, r0, fp
   317a8:	ldr	r3, [r0, #8]
   317ac:	push	{r4, r5, r6, r7, r8, lr}
   317b0:	cmp	r3, #0
   317b4:	beq	318f8 <__assert_fail@plt+0x1f56c>
   317b8:	ldr	r5, [r3, #4]
   317bc:	mov	r4, r0
   317c0:	mov	r6, r1
   317c4:	mov	r0, r5
   317c8:	mov	r1, #124	; 0x7c
   317cc:	bl	12098 <strchr@plt>
   317d0:	subs	r7, r0, #0
   317d4:	bne	31848 <__assert_fail@plt+0x1f4bc>
   317d8:	mov	r1, #124	; 0x7c
   317dc:	mov	r0, r6
   317e0:	bl	12098 <strchr@plt>
   317e4:	cmp	r0, #0
   317e8:	beq	31834 <__assert_fail@plt+0x1f4a8>
   317ec:	mov	r1, #123	; 0x7b
   317f0:	mov	r0, r5
   317f4:	bl	12098 <strchr@plt>
   317f8:	cmp	r0, #0
   317fc:	beq	318b0 <__assert_fail@plt+0x1f524>
   31800:	add	r5, r4, #8
   31804:	mov	r0, r5
   31808:	ldr	r1, [pc, #252]	; 3190c <__assert_fail@plt+0x1f580>
   3180c:	bl	3168c <__assert_fail@plt+0x1f300>
   31810:	cmp	r0, #0
   31814:	bne	31820 <__assert_fail@plt+0x1f494>
   31818:	mov	r0, #0
   3181c:	pop	{r4, r5, r6, r7, r8, pc}
   31820:	mov	r0, r5
   31824:	ldr	r1, [pc, #228]	; 31910 <__assert_fail@plt+0x1f584>
   31828:	bl	3171c <__assert_fail@plt+0x1f390>
   3182c:	cmp	r0, #0
   31830:	beq	31818 <__assert_fail@plt+0x1f48c>
   31834:	ldrb	r3, [r6]
   31838:	cmp	r3, #0
   3183c:	bne	318c8 <__assert_fail@plt+0x1f53c>
   31840:	mov	r0, #1
   31844:	pop	{r4, r5, r6, r7, r8, pc}
   31848:	mov	r0, r5
   3184c:	bl	12074 <strlen@plt>
   31850:	mov	r5, r0
   31854:	mov	r0, r6
   31858:	bl	12074 <strlen@plt>
   3185c:	add	r0, r5, r0
   31860:	bl	11f3c <xmalloc@plt>
   31864:	ldr	r8, [r4, #8]
   31868:	ldr	r1, [r8, #4]
   3186c:	sub	r2, r7, r1
   31870:	mov	r5, r0
   31874:	bl	11e40 <memcpy@plt>
   31878:	ldr	r0, [r8, #4]
   3187c:	mov	r1, r6
   31880:	sub	r0, r7, r0
   31884:	add	r0, r5, r0
   31888:	bl	11f6c <strcpy@plt>
   3188c:	add	r1, r7, #1
   31890:	mov	r0, r5
   31894:	bl	11f30 <strcat@plt>
   31898:	ldr	r0, [r8, #4]
   3189c:	bl	11e10 <free@plt>
   318a0:	ldr	r3, [r4, #8]
   318a4:	mov	r0, #1
   318a8:	str	r5, [r3, #4]
   318ac:	pop	{r4, r5, r6, r7, r8, pc}
   318b0:	mov	r0, r5
   318b4:	mov	r1, #40	; 0x28
   318b8:	bl	12098 <strchr@plt>
   318bc:	cmp	r0, #0
   318c0:	bne	31800 <__assert_fail@plt+0x1f474>
   318c4:	b	31834 <__assert_fail@plt+0x1f4a8>
   318c8:	add	r4, r4, #8
   318cc:	mov	r0, r4
   318d0:	ldr	r1, [pc, #60]	; 31914 <__assert_fail@plt+0x1f588>
   318d4:	bl	3171c <__assert_fail@plt+0x1f390>
   318d8:	cmp	r0, #0
   318dc:	beq	31818 <__assert_fail@plt+0x1f48c>
   318e0:	mov	r1, r6
   318e4:	mov	r0, r4
   318e8:	bl	3171c <__assert_fail@plt+0x1f390>
   318ec:	adds	r0, r0, #0
   318f0:	movne	r0, #1
   318f4:	pop	{r4, r5, r6, r7, r8, pc}
   318f8:	ldr	r3, [pc, #24]	; 31918 <__assert_fail@plt+0x1f58c>
   318fc:	ldr	r2, [pc, #24]	; 3191c <__assert_fail@plt+0x1f590>
   31900:	ldr	r1, [pc, #24]	; 31920 <__assert_fail@plt+0x1f594>
   31904:	ldr	r0, [pc, #24]	; 31924 <__assert_fail@plt+0x1f598>
   31908:	bl	1238c <__assert_fail@plt>
   3190c:	muleq	r5, r8, sp
   31910:	andeq	ip, r4, r8, asr r6
   31914:	andeq	r8, r4, ip, lsl ip
   31918:	andeq	r0, r5, ip, asr #16
   3191c:	andeq	r0, r0, r3, lsr #3
   31920:	andeq	r0, r5, r8, ror fp
   31924:	muleq	r5, r0, fp
   31928:	ldr	r1, [pc]	; 31930 <__assert_fail@plt+0x1f5a4>
   3192c:	b	317a8 <__assert_fail@plt+0x1f41c>
   31930:	andeq	r0, r5, ip, lsl #26
   31934:	ldr	r1, [pc]	; 3193c <__assert_fail@plt+0x1f5b0>
   31938:	b	317a8 <__assert_fail@plt+0x1f41c>
   3193c:	andeq	r0, r5, r8, lsl sp
   31940:	push	{r4, r5, r6, r7, r8, r9, lr}
   31944:	mov	r4, r0
   31948:	sub	sp, sp, #20
   3194c:	mov	r0, r1
   31950:	mov	r6, r1
   31954:	mov	r8, r3
   31958:	bl	12074 <strlen@plt>
   3195c:	ldr	r3, [r4, #8]
   31960:	ldr	r3, [r3]
   31964:	mov	r5, r0
   31968:	ldr	r0, [r3, #4]
   3196c:	bl	12074 <strlen@plt>
   31970:	add	r0, r5, r0
   31974:	add	r0, r0, #3
   31978:	bl	11f3c <xmalloc@plt>
   3197c:	ldr	r2, [r4, #8]
   31980:	mov	r3, r6
   31984:	ldr	r1, [pc, #228]	; 31a70 <__assert_fail@plt+0x1f6e4>
   31988:	ldr	r2, [r2]
   3198c:	ldr	r2, [r2, #4]
   31990:	mov	r7, r0
   31994:	bl	1223c <sprintf@plt>
   31998:	mov	r1, r7
   3199c:	mov	r0, r4
   319a0:	bl	317a8 <__assert_fail@plt+0x1f41c>
   319a4:	subs	r5, r0, #0
   319a8:	beq	31a48 <__assert_fail@plt+0x1f6bc>
   319ac:	add	r9, r4, #8
   319b0:	mov	r0, r9
   319b4:	ldr	r1, [pc, #184]	; 31a74 <__assert_fail@plt+0x1f6e8>
   319b8:	bl	3168c <__assert_fail@plt+0x1f300>
   319bc:	subs	r5, r0, #0
   319c0:	beq	31a48 <__assert_fail@plt+0x1f6bc>
   319c4:	mov	r0, r9
   319c8:	bl	30fec <__assert_fail@plt+0x1ec60>
   319cc:	subs	r9, r0, #0
   319d0:	beq	31a5c <__assert_fail@plt+0x1f6d0>
   319d4:	mov	r1, r8
   319d8:	ldr	r0, [r4, #8]
   319dc:	bl	313cc <__assert_fail@plt+0x1f040>
   319e0:	subs	r5, r0, #0
   319e4:	beq	31a40 <__assert_fail@plt+0x1f6b4>
   319e8:	ldr	r3, [r4, #8]
   319ec:	cmp	r8, #3
   319f0:	ldr	r0, [r4]
   319f4:	ldr	r1, [r3, #4]
   319f8:	ldr	r3, [r4, #16]
   319fc:	bhi	31a6c <__assert_fail@plt+0x1f6e0>
   31a00:	ldr	r2, [pc, #112]	; 31a78 <__assert_fail@plt+0x1f6ec>
   31a04:	str	r1, [sp, #4]
   31a08:	str	r9, [sp]
   31a0c:	ldr	r1, [r2, r8, lsl #2]
   31a10:	mov	r2, r6
   31a14:	str	r1, [sp, #8]
   31a18:	ldr	r1, [pc, #92]	; 31a7c <__assert_fail@plt+0x1f6f0>
   31a1c:	bl	120b0 <fprintf@plt>
   31a20:	mov	r0, r9
   31a24:	bl	11e10 <free@plt>
   31a28:	mov	r0, r7
   31a2c:	bl	11e10 <free@plt>
   31a30:	mov	r5, #1
   31a34:	mov	r0, r5
   31a38:	add	sp, sp, #20
   31a3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   31a40:	mov	r0, r9
   31a44:	bl	11e10 <free@plt>
   31a48:	mov	r0, r7
   31a4c:	bl	11e10 <free@plt>
   31a50:	mov	r0, r5
   31a54:	add	sp, sp, #20
   31a58:	pop	{r4, r5, r6, r7, r8, r9, pc}
   31a5c:	mov	r0, r7
   31a60:	bl	11e10 <free@plt>
   31a64:	mov	r5, r9
   31a68:	b	31a50 <__assert_fail@plt+0x1f6c4>
   31a6c:	bl	1232c <abort@plt>
   31a70:	andeq	r0, r5, r0, lsr #26
   31a74:	andeq	r0, r5, r8, lsr #26
   31a78:	andeq	r0, r5, r4, lsl #17
   31a7c:	andeq	r0, r5, r0, lsr sp
   31a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31a84:	sub	sp, sp, #20
   31a88:	subs	fp, r1, #0
   31a8c:	mov	r5, r2
   31a90:	str	r3, [sp, #8]
   31a94:	mov	r8, r0
   31a98:	streq	fp, [sp, #12]
   31a9c:	moveq	r6, #10
   31aa0:	bne	31c10 <__assert_fail@plt+0x1f884>
   31aa4:	cmp	r5, #0
   31aa8:	bgt	31b9c <__assert_fail@plt+0x1f810>
   31aac:	add	r6, r6, #15
   31ab0:	mov	r3, #0
   31ab4:	str	r3, [sp, #4]
   31ab8:	mov	r0, r6
   31abc:	bl	11f3c <xmalloc@plt>
   31ac0:	cmp	fp, #0
   31ac4:	mov	r4, r0
   31ac8:	strbeq	fp, [r0]
   31acc:	bne	31cf8 <__assert_fail@plt+0x1f96c>
   31ad0:	mov	r0, r4
   31ad4:	bl	12074 <strlen@plt>
   31ad8:	ldr	r2, [pc, #616]	; 31d48 <__assert_fail@plt+0x1f9bc>
   31adc:	cmp	r5, #0
   31ae0:	mov	r3, r0
   31ae4:	add	r1, r4, r0
   31ae8:	ldr	r0, [r2]
   31aec:	ldrh	r2, [r2, #4]
   31af0:	str	r0, [r4, r3]
   31af4:	strh	r2, [r1, #4]
   31af8:	blt	31d04 <__assert_fail@plt+0x1f978>
   31afc:	beq	31d2c <__assert_fail@plt+0x1f9a0>
   31b00:	ldr	r3, [sp, #4]
   31b04:	ldr	r7, [pc, #576]	; 31d4c <__assert_fail@plt+0x1f9c0>
   31b08:	add	r5, r3, r5, lsl #2
   31b0c:	sub	r5, r5, #4
   31b10:	sub	r6, r3, #4
   31b14:	b	31b28 <__assert_fail@plt+0x1f79c>
   31b18:	ldrh	r2, [r7]
   31b1c:	ldrb	r3, [r7, #2]
   31b20:	strh	r2, [r0]
   31b24:	strb	r3, [r0, #2]
   31b28:	mov	r0, r4
   31b2c:	bl	12074 <strlen@plt>
   31b30:	ldr	r1, [r6, #4]!
   31b34:	add	r0, r4, r0
   31b38:	bl	11e7c <stpcpy@plt>
   31b3c:	cmp	r5, r6
   31b40:	bne	31b18 <__assert_fail@plt+0x1f78c>
   31b44:	ldr	r3, [sp, #8]
   31b48:	mov	r1, r0
   31b4c:	cmp	r3, #0
   31b50:	bne	31c4c <__assert_fail@plt+0x1f8c0>
   31b54:	ldr	r0, [sp, #4]
   31b58:	bl	11e10 <free@plt>
   31b5c:	mov	r0, r4
   31b60:	bl	12074 <strlen@plt>
   31b64:	ldr	r3, [pc, #484]	; 31d50 <__assert_fail@plt+0x1f9c4>
   31b68:	mov	r1, r4
   31b6c:	ldrh	r3, [r3]
   31b70:	strh	r3, [r4, r0]
   31b74:	mov	r0, r8
   31b78:	bl	317a8 <__assert_fail@plt+0x1f41c>
   31b7c:	cmp	r0, #0
   31b80:	beq	31c20 <__assert_fail@plt+0x1f894>
   31b84:	mov	r0, r4
   31b88:	bl	11e10 <free@plt>
   31b8c:	mov	r3, #1
   31b90:	mov	r0, r3
   31b94:	add	sp, sp, #20
   31b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31b9c:	lsl	r7, r5, #2
   31ba0:	mov	r0, r7
   31ba4:	bl	11f3c <xmalloc@plt>
   31ba8:	ldr	sl, [pc, #420]	; 31d54 <__assert_fail@plt+0x1f9c8>
   31bac:	sub	r4, r5, #1
   31bb0:	add	r9, r8, #8
   31bb4:	add	r7, r0, r7
   31bb8:	str	r0, [sp, #4]
   31bbc:	mov	r1, sl
   31bc0:	mov	r0, r8
   31bc4:	bl	317a8 <__assert_fail@plt+0x1f41c>
   31bc8:	sub	r4, r4, #1
   31bcc:	subs	r3, r0, #0
   31bd0:	mov	r0, r9
   31bd4:	beq	31c30 <__assert_fail@plt+0x1f8a4>
   31bd8:	bl	30fec <__assert_fail@plt+0x1ec60>
   31bdc:	cmp	r0, #0
   31be0:	mov	r3, r0
   31be4:	str	r0, [r7, #-4]!
   31be8:	beq	31c30 <__assert_fail@plt+0x1f8a4>
   31bec:	bl	12074 <strlen@plt>
   31bf0:	cmn	r4, #1
   31bf4:	add	r0, r0, #2
   31bf8:	add	r6, r6, r0
   31bfc:	bne	31bbc <__assert_fail@plt+0x1f830>
   31c00:	ldr	r3, [sp, #8]
   31c04:	cmp	r3, #0
   31c08:	addne	r6, r6, #5
   31c0c:	b	31ab8 <__assert_fail@plt+0x1f72c>
   31c10:	ldr	r1, [pc, #316]	; 31d54 <__assert_fail@plt+0x1f9c8>
   31c14:	bl	317a8 <__assert_fail@plt+0x1f41c>
   31c18:	cmp	r0, #0
   31c1c:	bne	31c68 <__assert_fail@plt+0x1f8dc>
   31c20:	mov	r3, #0
   31c24:	mov	r0, r3
   31c28:	add	sp, sp, #20
   31c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31c30:	ldr	r0, [sp, #4]
   31c34:	str	r3, [sp, #8]
   31c38:	bl	11e10 <free@plt>
   31c3c:	ldr	r3, [sp, #8]
   31c40:	mov	r0, r3
   31c44:	add	sp, sp, #20
   31c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31c4c:	ldr	r3, [pc, #248]	; 31d4c <__assert_fail@plt+0x1f9c0>
   31c50:	ldr	r2, [pc, #256]	; 31d58 <__assert_fail@plt+0x1f9cc>
   31c54:	ldrh	r3, [r3]
   31c58:	ldr	r0, [r2]
   31c5c:	strh	r3, [r1]
   31c60:	str	r0, [r1, #2]
   31c64:	b	31b54 <__assert_fail@plt+0x1f7c8>
   31c68:	add	r0, r8, #8
   31c6c:	bl	30fec <__assert_fail@plt+0x1ec60>
   31c70:	subs	r3, r0, #0
   31c74:	mov	r4, r3
   31c78:	str	r3, [sp, #12]
   31c7c:	beq	31c20 <__assert_fail@plt+0x1f894>
   31c80:	mov	r2, #6
   31c84:	ldr	r1, [pc, #208]	; 31d5c <__assert_fail@plt+0x1f9d0>
   31c88:	bl	12320 <strncmp@plt>
   31c8c:	cmp	r0, #0
   31c90:	bne	31cb0 <__assert_fail@plt+0x1f924>
   31c94:	add	r4, r4, #6
   31c98:	mov	r0, r4
   31c9c:	mov	r1, #32
   31ca0:	bl	12098 <strchr@plt>
   31ca4:	cmp	r0, #0
   31ca8:	streq	r4, [sp, #12]
   31cac:	beq	31ce8 <__assert_fail@plt+0x1f95c>
   31cb0:	ldr	r6, [sp, #12]
   31cb4:	mov	r2, #12
   31cb8:	ldr	r1, [pc, #160]	; 31d60 <__assert_fail@plt+0x1f9d4>
   31cbc:	mov	r0, r6
   31cc0:	bl	12320 <strncmp@plt>
   31cc4:	cmp	r0, #0
   31cc8:	bne	31ce8 <__assert_fail@plt+0x1f95c>
   31ccc:	add	r4, r6, #12
   31cd0:	mov	r0, r4
   31cd4:	mov	r1, #32
   31cd8:	bl	12098 <strchr@plt>
   31cdc:	cmp	r0, #0
   31ce0:	moveq	r6, r4
   31ce4:	str	r6, [sp, #12]
   31ce8:	ldr	r0, [sp, #12]
   31cec:	bl	12074 <strlen@plt>
   31cf0:	add	r6, r0, #10
   31cf4:	b	31aa4 <__assert_fail@plt+0x1f718>
   31cf8:	ldr	r1, [sp, #12]
   31cfc:	bl	11f6c <strcpy@plt>
   31d00:	b	31ad0 <__assert_fail@plt+0x1f744>
   31d04:	ldr	ip, [pc, #88]	; 31d64 <__assert_fail@plt+0x1f9d8>
   31d08:	add	r3, r3, #5
   31d0c:	add	lr, r4, r3
   31d10:	ldm	ip!, {r0, r1, r2}
   31d14:	ldrh	ip, [ip]
   31d18:	str	r0, [r4, r3]
   31d1c:	str	r1, [lr, #4]
   31d20:	strh	ip, [lr, #12]
   31d24:	str	r2, [lr, #8]
   31d28:	b	31b5c <__assert_fail@plt+0x1f7d0>
   31d2c:	ldr	r2, [sp, #8]
   31d30:	cmp	r2, #0
   31d34:	ldrne	r2, [pc, #28]	; 31d58 <__assert_fail@plt+0x1f9cc>
   31d38:	addne	r3, r3, #5
   31d3c:	ldrne	r0, [r2]
   31d40:	strne	r0, [r4, r3]
   31d44:	b	31b5c <__assert_fail@plt+0x1f7d0>
   31d48:	andeq	r0, r5, r8, ror sp
   31d4c:	andeq	r8, r4, r4, lsl lr
   31d50:	andeq	ip, r4, r8, asr r6
   31d54:	andeq	r9, r4, r4, lsr #5
   31d58:	muleq	r5, r0, sp
   31d5c:	andeq	r0, r5, r0, ror #26
   31d60:	andeq	r0, r5, r8, ror #26
   31d64:	andeq	r0, r5, r0, lsl #27
   31d68:	ldr	r3, [r0, #8]
   31d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31d70:	sub	sp, sp, #12
   31d74:	cmp	r3, #0
   31d78:	str	r2, [sp, #4]
   31d7c:	beq	31f78 <__assert_fail@plt+0x1fbec>
   31d80:	cmp	r1, #0
   31d84:	mov	r7, r0
   31d88:	mov	r8, r1
   31d8c:	ble	31ee8 <__assert_fail@plt+0x1fb5c>
   31d90:	lsl	r5, r1, #2
   31d94:	mov	r0, r5
   31d98:	bl	11f3c <xmalloc@plt>
   31d9c:	ldr	r9, [pc, #488]	; 31f8c <__assert_fail@plt+0x1fc00>
   31da0:	sub	r4, r8, #1
   31da4:	mov	r6, #10
   31da8:	add	sl, r7, #8
   31dac:	mov	fp, r0
   31db0:	add	r5, r0, r5
   31db4:	mov	r1, r9
   31db8:	mov	r0, r7
   31dbc:	bl	317a8 <__assert_fail@plt+0x1f41c>
   31dc0:	subs	r3, r0, #0
   31dc4:	beq	31f38 <__assert_fail@plt+0x1fbac>
   31dc8:	mov	r0, sl
   31dcc:	bl	30fec <__assert_fail@plt+0x1ec60>
   31dd0:	cmp	r0, #0
   31dd4:	mov	r3, r0
   31dd8:	str	r0, [r5, #-4]!
   31ddc:	beq	31f38 <__assert_fail@plt+0x1fbac>
   31de0:	bl	12074 <strlen@plt>
   31de4:	sub	r4, r4, #1
   31de8:	cmn	r4, #1
   31dec:	add	r0, r0, #2
   31df0:	add	r6, r6, r0
   31df4:	bne	31db4 <__assert_fail@plt+0x1fa28>
   31df8:	ldr	r3, [sp, #4]
   31dfc:	mov	r5, #0
   31e00:	cmp	r3, #0
   31e04:	addne	r6, r6, #5
   31e08:	mov	r0, r6
   31e0c:	bl	11f3c <xmalloc@plt>
   31e10:	ldr	r3, [pc, #376]	; 31f90 <__assert_fail@plt+0x1fc04>
   31e14:	sub	r6, fp, #4
   31e18:	ldr	r9, [pc, #372]	; 31f94 <__assert_fail@plt+0x1fc08>
   31e1c:	mov	r4, r0
   31e20:	ldr	r0, [r3]
   31e24:	ldrh	r3, [r3, #4]
   31e28:	str	r0, [r4]
   31e2c:	strh	r3, [r4, #4]
   31e30:	b	31e44 <__assert_fail@plt+0x1fab8>
   31e34:	ldrh	r2, [r9]
   31e38:	ldrb	r3, [r9, #2]
   31e3c:	strh	r2, [r1]
   31e40:	strb	r3, [r1, #2]
   31e44:	mov	r0, r4
   31e48:	bl	12074 <strlen@plt>
   31e4c:	ldr	r1, [r6, #4]!
   31e50:	add	r5, r5, #1
   31e54:	add	r0, r4, r0
   31e58:	bl	11e7c <stpcpy@plt>
   31e5c:	cmp	r8, r5
   31e60:	mov	r1, r0
   31e64:	bne	31e34 <__assert_fail@plt+0x1faa8>
   31e68:	ldr	r3, [sp, #4]
   31e6c:	cmp	r3, #0
   31e70:	beq	31ea0 <__assert_fail@plt+0x1fb14>
   31e74:	ldr	r3, [pc, #280]	; 31f94 <__assert_fail@plt+0x1fc08>
   31e78:	mov	r0, r4
   31e7c:	ldrh	r2, [r3]
   31e80:	ldrb	r3, [r3, #2]
   31e84:	strh	r2, [r1]
   31e88:	strb	r3, [r1, #2]
   31e8c:	bl	12074 <strlen@plt>
   31e90:	ldr	r2, [pc, #256]	; 31f98 <__assert_fail@plt+0x1fc0c>
   31e94:	mov	r3, r0
   31e98:	ldr	r0, [r2]
   31e9c:	str	r0, [r4, r3]
   31ea0:	mov	r0, fp
   31ea4:	bl	11e10 <free@plt>
   31ea8:	mov	r0, r4
   31eac:	bl	12074 <strlen@plt>
   31eb0:	ldr	r3, [pc, #228]	; 31f9c <__assert_fail@plt+0x1fc10>
   31eb4:	mov	r1, r4
   31eb8:	ldrh	r3, [r3]
   31ebc:	strh	r3, [r4, r0]
   31ec0:	mov	r0, r7
   31ec4:	bl	317a8 <__assert_fail@plt+0x1f41c>
   31ec8:	subs	r3, r0, #0
   31ecc:	beq	31edc <__assert_fail@plt+0x1fb50>
   31ed0:	mov	r0, r4
   31ed4:	bl	11e10 <free@plt>
   31ed8:	mov	r3, #1
   31edc:	mov	r0, r3
   31ee0:	add	sp, sp, #12
   31ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31ee8:	mov	r0, #25
   31eec:	bl	11f3c <xmalloc@plt>
   31ef0:	ldr	r3, [pc, #152]	; 31f90 <__assert_fail@plt+0x1fc04>
   31ef4:	cmp	r8, #0
   31ef8:	ldrh	r2, [r3, #4]
   31efc:	mov	r4, r0
   31f00:	ldr	r0, [r3]
   31f04:	strh	r2, [r4, #4]
   31f08:	str	r0, [r4]
   31f0c:	bne	31f54 <__assert_fail@plt+0x1fbc8>
   31f10:	ldr	r3, [sp, #4]
   31f14:	cmp	r3, #0
   31f18:	beq	31ea8 <__assert_fail@plt+0x1fb1c>
   31f1c:	mov	r0, r4
   31f20:	bl	12074 <strlen@plt>
   31f24:	ldr	r2, [pc, #108]	; 31f98 <__assert_fail@plt+0x1fc0c>
   31f28:	mov	r3, r0
   31f2c:	ldr	r0, [r2]
   31f30:	str	r0, [r4, r3]
   31f34:	b	31ea8 <__assert_fail@plt+0x1fb1c>
   31f38:	mov	r0, fp
   31f3c:	str	r3, [sp, #4]
   31f40:	bl	11e10 <free@plt>
   31f44:	ldr	r3, [sp, #4]
   31f48:	mov	r0, r3
   31f4c:	add	sp, sp, #12
   31f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31f54:	ldr	r3, [pc, #68]	; 31fa0 <__assert_fail@plt+0x1fc14>
   31f58:	add	ip, r4, #5
   31f5c:	ldm	r3!, {r0, r1, r2}
   31f60:	ldrh	lr, [r3]
   31f64:	str	r0, [r4, #5]
   31f68:	str	r1, [ip, #4]
   31f6c:	strh	lr, [ip, #12]
   31f70:	str	r2, [ip, #8]
   31f74:	b	31ea8 <__assert_fail@plt+0x1fb1c>
   31f78:	ldr	r3, [pc, #36]	; 31fa4 <__assert_fail@plt+0x1fc18>
   31f7c:	ldr	r2, [pc, #36]	; 31fa8 <__assert_fail@plt+0x1fc1c>
   31f80:	ldr	r1, [pc, #36]	; 31fac <__assert_fail@plt+0x1fc20>
   31f84:	ldr	r0, [pc, #36]	; 31fb0 <__assert_fail@plt+0x1fc24>
   31f88:	bl	1238c <__assert_fail@plt>
   31f8c:	andeq	r9, r4, r4, lsr #5
   31f90:	muleq	r5, r4, sp
   31f94:	andeq	r8, r4, r4, lsl lr
   31f98:	muleq	r5, r0, sp
   31f9c:	andeq	ip, r4, r8, asr r6
   31fa0:	andeq	r0, r5, r0, lsl #27
   31fa4:	andeq	r0, r5, ip, asr r8
   31fa8:	andeq	r0, r0, sp, asr #5
   31fac:	andeq	r0, r5, r8, ror fp
   31fb0:	muleq	r5, r0, fp
   31fb4:	ldr	r2, [r0, #8]
   31fb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31fbc:	cmp	r2, #0
   31fc0:	beq	32098 <__assert_fail@plt+0x1fd0c>
   31fc4:	ldr	r3, [r2, #8]
   31fc8:	mov	r7, r1
   31fcc:	cmp	r3, r1
   31fd0:	beq	32080 <__assert_fail@plt+0x1fcf4>
   31fd4:	cmp	r1, #3
   31fd8:	bhi	320c0 <__assert_fail@plt+0x1fd34>
   31fdc:	ldr	r4, [pc, #224]	; 320c4 <__assert_fail@plt+0x1fd38>
   31fe0:	ldr	r8, [r2, #4]
   31fe4:	add	r3, r4, r1, lsl #2
   31fe8:	mov	r5, r0
   31fec:	mov	r0, r8
   31ff0:	ldr	r9, [r3, #224]	; 0xe0
   31ff4:	bl	12074 <strlen@plt>
   31ff8:	sub	r0, r0, #1
   31ffc:	ldrb	r3, [r8, r0]
   32000:	cmp	r3, #32
   32004:	bne	320ac <__assert_fail@plt+0x1fd20>
   32008:	mov	r4, #0
   3200c:	add	r6, r5, #8
   32010:	strb	r4, [r8, r0]
   32014:	mov	r1, r9
   32018:	mov	r0, r6
   3201c:	bl	3171c <__assert_fail@plt+0x1f390>
   32020:	cmp	r0, r4
   32024:	bne	32030 <__assert_fail@plt+0x1fca4>
   32028:	mov	r0, #0
   3202c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32030:	ldr	r1, [pc, #144]	; 320c8 <__assert_fail@plt+0x1fd3c>
   32034:	mov	r0, r6
   32038:	bl	3171c <__assert_fail@plt+0x1f390>
   3203c:	cmp	r0, #0
   32040:	beq	32028 <__assert_fail@plt+0x1fc9c>
   32044:	ldr	r3, [r5, #4]
   32048:	cmp	r3, #0
   3204c:	beq	32088 <__assert_fail@plt+0x1fcfc>
   32050:	ldr	r8, [pc, #116]	; 320cc <__assert_fail@plt+0x1fd40>
   32054:	b	32068 <__assert_fail@plt+0x1fcdc>
   32058:	ldr	r3, [r5, #4]
   3205c:	add	r4, r4, #1
   32060:	cmp	r4, r3
   32064:	bcs	32088 <__assert_fail@plt+0x1fcfc>
   32068:	mov	r1, r8
   3206c:	mov	r0, r6
   32070:	bl	3171c <__assert_fail@plt+0x1f390>
   32074:	cmp	r0, #0
   32078:	bne	32058 <__assert_fail@plt+0x1fccc>
   3207c:	b	32028 <__assert_fail@plt+0x1fc9c>
   32080:	mov	r0, #1
   32084:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32088:	ldr	r3, [r5, #8]
   3208c:	mov	r0, #1
   32090:	str	r7, [r3, #8]
   32094:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32098:	ldr	r3, [pc, #48]	; 320d0 <__assert_fail@plt+0x1fd44>
   3209c:	ldr	r2, [pc, #48]	; 320d4 <__assert_fail@plt+0x1fd48>
   320a0:	ldr	r1, [pc, #48]	; 320d8 <__assert_fail@plt+0x1fd4c>
   320a4:	ldr	r0, [pc, #48]	; 320dc <__assert_fail@plt+0x1fd50>
   320a8:	bl	1238c <__assert_fail@plt>
   320ac:	add	r3, r4, #204	; 0xcc
   320b0:	ldr	r2, [pc, #40]	; 320e0 <__assert_fail@plt+0x1fd54>
   320b4:	ldr	r1, [pc, #28]	; 320d8 <__assert_fail@plt+0x1fd4c>
   320b8:	ldr	r0, [pc, #36]	; 320e4 <__assert_fail@plt+0x1fd58>
   320bc:	bl	1238c <__assert_fail@plt>
   320c0:	bl	1232c <abort@plt>
   320c4:	andeq	r0, r5, r4, lsr #15
   320c8:	andeq	r8, r4, r8, lsr fp
   320cc:	andeq	r8, r4, ip, lsl ip
   320d0:	andeq	r0, r5, r0, ror r8
   320d4:	andeq	r0, r0, r1, asr r4
   320d8:	andeq	r0, r5, r8, ror fp
   320dc:	muleq	r5, r0, fp
   320e0:	andeq	r0, r0, lr, ror #8
   320e4:	muleq	r5, ip, sp
   320e8:	push	{r4, r5, r6, r7, r8, lr}
   320ec:	mov	r8, r1
   320f0:	ldr	r1, [r0, #8]
   320f4:	cmp	r1, #0
   320f8:	beq	3225c <__assert_fail@plt+0x1fed0>
   320fc:	mov	r7, r2
   32100:	ldr	r2, [r1]
   32104:	cmp	r2, #0
   32108:	beq	32284 <__assert_fail@plt+0x1fef8>
   3210c:	ldr	r2, [r2, #12]
   32110:	cmp	r2, #0
   32114:	beq	32270 <__assert_fail@plt+0x1fee4>
   32118:	mov	r6, r3
   3211c:	ldr	r3, [sp, #24]
   32120:	mov	r4, r0
   32124:	cmp	r3, #0
   32128:	add	r5, r0, #8
   3212c:	bne	32238 <__assert_fail@plt+0x1feac>
   32130:	cmp	r6, #0
   32134:	beq	3214c <__assert_fail@plt+0x1fdc0>
   32138:	ldr	r1, [pc, #344]	; 32298 <__assert_fail@plt+0x1ff0c>
   3213c:	mov	r0, r5
   32140:	bl	3171c <__assert_fail@plt+0x1f390>
   32144:	cmp	r0, #0
   32148:	beq	32160 <__assert_fail@plt+0x1fdd4>
   3214c:	ldr	r1, [pc, #328]	; 3229c <__assert_fail@plt+0x1ff10>
   32150:	mov	r0, r5
   32154:	bl	3168c <__assert_fail@plt+0x1f300>
   32158:	cmp	r0, #0
   3215c:	bne	32168 <__assert_fail@plt+0x1fddc>
   32160:	mov	r0, #0
   32164:	pop	{r4, r5, r6, r7, r8, pc}
   32168:	ldr	r3, [r4, #8]
   3216c:	mov	r0, r4
   32170:	ldr	r3, [r3]
   32174:	ldr	r1, [r3, #12]
   32178:	bl	317a8 <__assert_fail@plt+0x1f41c>
   3217c:	cmp	r0, #0
   32180:	beq	32160 <__assert_fail@plt+0x1fdd4>
   32184:	mov	r0, r5
   32188:	bl	30fec <__assert_fail@plt+0x1ec60>
   3218c:	subs	r6, r0, #0
   32190:	beq	32160 <__assert_fail@plt+0x1fdd4>
   32194:	mov	r1, r7
   32198:	mov	r0, r4
   3219c:	bl	31fb4 <__assert_fail@plt+0x1fc28>
   321a0:	cmp	r0, #0
   321a4:	beq	32160 <__assert_fail@plt+0x1fdd4>
   321a8:	mov	r1, r6
   321ac:	mov	r0, r5
   321b0:	bl	3171c <__assert_fail@plt+0x1f390>
   321b4:	cmp	r0, #0
   321b8:	beq	32160 <__assert_fail@plt+0x1fdd4>
   321bc:	ldr	r1, [pc, #220]	; 322a0 <__assert_fail@plt+0x1ff14>
   321c0:	mov	r0, r5
   321c4:	bl	3171c <__assert_fail@plt+0x1f390>
   321c8:	cmp	r0, #0
   321cc:	beq	32160 <__assert_fail@plt+0x1fdd4>
   321d0:	mov	r1, r8
   321d4:	mov	r0, r5
   321d8:	bl	3171c <__assert_fail@plt+0x1f390>
   321dc:	cmp	r0, #0
   321e0:	beq	32160 <__assert_fail@plt+0x1fdd4>
   321e4:	ldr	r1, [pc, #184]	; 322a4 <__assert_fail@plt+0x1ff18>
   321e8:	mov	r0, r5
   321ec:	bl	3171c <__assert_fail@plt+0x1f390>
   321f0:	cmp	r0, #0
   321f4:	beq	32160 <__assert_fail@plt+0x1fdd4>
   321f8:	ldr	r3, [r4, #4]
   321fc:	cmp	r3, #0
   32200:	movne	r6, #0
   32204:	ldrne	r7, [pc, #156]	; 322a8 <__assert_fail@plt+0x1ff1c>
   32208:	bne	32220 <__assert_fail@plt+0x1fe94>
   3220c:	b	32254 <__assert_fail@plt+0x1fec8>
   32210:	ldr	r3, [r4, #4]
   32214:	add	r6, r6, #1
   32218:	cmp	r6, r3
   3221c:	bcs	32254 <__assert_fail@plt+0x1fec8>
   32220:	mov	r1, r7
   32224:	mov	r0, r5
   32228:	bl	3171c <__assert_fail@plt+0x1f390>
   3222c:	cmp	r0, #0
   32230:	bne	32210 <__assert_fail@plt+0x1fe84>
   32234:	b	32160 <__assert_fail@plt+0x1fdd4>
   32238:	ldr	r1, [pc, #108]	; 322ac <__assert_fail@plt+0x1ff20>
   3223c:	mov	r0, r5
   32240:	bl	3171c <__assert_fail@plt+0x1f390>
   32244:	cmp	r0, #0
   32248:	bne	32130 <__assert_fail@plt+0x1fda4>
   3224c:	mov	r0, #0
   32250:	pop	{r4, r5, r6, r7, r8, pc}
   32254:	mov	r0, #1
   32258:	pop	{r4, r5, r6, r7, r8, pc}
   3225c:	ldr	r3, [pc, #76]	; 322b0 <__assert_fail@plt+0x1ff24>
   32260:	ldr	r2, [pc, #76]	; 322b4 <__assert_fail@plt+0x1ff28>
   32264:	ldr	r1, [pc, #76]	; 322b8 <__assert_fail@plt+0x1ff2c>
   32268:	ldr	r0, [pc, #76]	; 322bc <__assert_fail@plt+0x1ff30>
   3226c:	bl	1238c <__assert_fail@plt>
   32270:	ldr	r3, [pc, #56]	; 322b0 <__assert_fail@plt+0x1ff24>
   32274:	ldr	r2, [pc, #68]	; 322c0 <__assert_fail@plt+0x1ff34>
   32278:	ldr	r1, [pc, #56]	; 322b8 <__assert_fail@plt+0x1ff2c>
   3227c:	ldr	r0, [pc, #64]	; 322c4 <__assert_fail@plt+0x1ff38>
   32280:	bl	1238c <__assert_fail@plt>
   32284:	ldr	r3, [pc, #36]	; 322b0 <__assert_fail@plt+0x1ff24>
   32288:	ldr	r2, [pc, #56]	; 322c8 <__assert_fail@plt+0x1ff3c>
   3228c:	ldr	r1, [pc, #36]	; 322b8 <__assert_fail@plt+0x1ff2c>
   32290:	ldr	r0, [pc, #52]	; 322cc <__assert_fail@plt+0x1ff40>
   32294:	bl	1238c <__assert_fail@plt>
   32298:	strdeq	r0, [r5], -ip
   3229c:	andeq	r0, r5, r8, lsr #26
   322a0:	andeq	r0, r5, r4, lsl #28
   322a4:	andeq	r0, r5, ip, ror lr
   322a8:	andeq	r8, r4, ip, lsl ip
   322ac:	strdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   322b0:	muleq	r5, r4, r8
   322b4:	strdeq	r0, [r0], -r7
   322b8:	andeq	r0, r5, r8, ror fp
   322bc:	muleq	r5, r0, fp
   322c0:	strdeq	r0, [r0], -r9
   322c4:	andeq	r0, r5, ip, asr #27
   322c8:	strdeq	r0, [r0], -r8
   322cc:			; <UNDEFINED> instruction: 0x00050db0
   322d0:	cmp	r2, #0
   322d4:	ldr	r3, [r0, #8]
   322d8:	ldreq	r2, [pc, #264]	; 323e8 <__assert_fail@plt+0x2005c>
   322dc:	movne	r2, #0
   322e0:	push	{r4, r5, r6, r7, r8, lr}
   322e4:	mov	r4, r0
   322e8:	str	r2, [r3, #16]
   322ec:	ldr	r3, [r0, #28]
   322f0:	mov	r6, r1
   322f4:	cmp	r3, #0
   322f8:	beq	32390 <__assert_fail@plt+0x20004>
   322fc:	mov	r2, #3
   32300:	ldr	r0, [r0, #20]
   32304:	blx	r3
   32308:	subs	r5, r0, #0
   3230c:	beq	32390 <__assert_fail@plt+0x20004>
   32310:	mov	r1, r5
   32314:	mov	r0, r4
   32318:	bl	317a8 <__assert_fail@plt+0x1f41c>
   3231c:	cmp	r0, #0
   32320:	beq	323a4 <__assert_fail@plt+0x20018>
   32324:	ldr	r6, [r4, #8]
   32328:	mov	r7, #0
   3232c:	mov	r0, r5
   32330:	ldr	r1, [pc, #180]	; 323ec <__assert_fail@plt+0x20060>
   32334:	str	r7, [r6, #12]
   32338:	bl	11d5c <strstr@plt>
   3233c:	cmp	r0, #0
   32340:	strne	r5, [r6, #12]
   32344:	movne	r5, r0
   32348:	strbne	r7, [r5], #2
   3234c:	beq	323dc <__assert_fail@plt+0x20050>
   32350:	mov	r1, #40	; 0x28
   32354:	mov	r0, r5
   32358:	bl	12098 <strchr@plt>
   3235c:	cmp	r0, #0
   32360:	movne	r3, #0
   32364:	strbne	r3, [r0]
   32368:	ldr	r6, [r4, #8]
   3236c:	mov	r0, r5
   32370:	ldr	r7, [r6, #12]
   32374:	bl	11eb8 <strdup@plt>
   32378:	cmp	r7, #0
   3237c:	str	r0, [r6, #20]
   32380:	beq	323c4 <__assert_fail@plt+0x20038>
   32384:	mov	r0, #1
   32388:	str	r0, [r4, #12]
   3238c:	pop	{r4, r5, r6, r7, r8, pc}
   32390:	mov	r1, r6
   32394:	mov	r0, r4
   32398:	bl	317a8 <__assert_fail@plt+0x1f41c>
   3239c:	cmp	r0, #0
   323a0:	bne	323ac <__assert_fail@plt+0x20020>
   323a4:	mov	r0, #0
   323a8:	pop	{r4, r5, r6, r7, r8, pc}
   323ac:	ldr	r5, [r4, #8]
   323b0:	mov	r3, #0
   323b4:	mov	r0, r6
   323b8:	str	r3, [r5, #12]
   323bc:	bl	11eb8 <strdup@plt>
   323c0:	str	r0, [r5, #20]
   323c4:	ldr	r1, [pc, #36]	; 323f0 <__assert_fail@plt+0x20064>
   323c8:	add	r0, r4, #8
   323cc:	bl	3171c <__assert_fail@plt+0x1f390>
   323d0:	cmp	r0, #0
   323d4:	bne	32384 <__assert_fail@plt+0x1fff8>
   323d8:	b	323a4 <__assert_fail@plt+0x20018>
   323dc:	ldr	r3, [pc, #16]	; 323f4 <__assert_fail@plt+0x20068>
   323e0:	str	r3, [r6, #12]
   323e4:	b	32350 <__assert_fail@plt+0x1ffc4>
   323e8:	andeq	fp, r4, r4, lsl #9
   323ec:	andeq	r9, r4, r4, ror #9
   323f0:	muleq	r5, r8, sp
   323f4:	andeq	r9, r4, r4, lsr #5
   323f8:	push	{r4, r5, r6, r7, r8, lr}
   323fc:	mov	r7, r2
   32400:	ldr	r2, [r0, #8]
   32404:	sub	sp, sp, #16
   32408:	cmp	r2, #0
   3240c:	beq	3256c <__assert_fail@plt+0x201e0>
   32410:	ldr	r2, [r2]
   32414:	cmp	r2, #0
   32418:	beq	32594 <__assert_fail@plt+0x20208>
   3241c:	ldr	r2, [r2, #12]
   32420:	cmp	r2, #0
   32424:	beq	32580 <__assert_fail@plt+0x201f4>
   32428:	mov	r6, r3
   3242c:	ldr	r3, [sp, #40]	; 0x28
   32430:	mov	r4, r0
   32434:	cmp	r3, #0
   32438:	add	r5, r0, #8
   3243c:	bne	32528 <__assert_fail@plt+0x2019c>
   32440:	cmp	r6, #0
   32444:	beq	3245c <__assert_fail@plt+0x200d0>
   32448:	ldr	r1, [pc, #348]	; 325ac <__assert_fail@plt+0x20220>
   3244c:	mov	r0, r5
   32450:	bl	3171c <__assert_fail@plt+0x1f390>
   32454:	cmp	r0, #0
   32458:	beq	32470 <__assert_fail@plt+0x200e4>
   3245c:	ldr	r1, [pc, #332]	; 325b0 <__assert_fail@plt+0x20224>
   32460:	mov	r0, r5
   32464:	bl	3168c <__assert_fail@plt+0x1f300>
   32468:	cmp	r0, #0
   3246c:	bne	32480 <__assert_fail@plt+0x200f4>
   32470:	mov	r6, #0
   32474:	mov	r0, r6
   32478:	add	sp, sp, #16
   3247c:	pop	{r4, r5, r6, r7, r8, pc}
   32480:	ldr	r3, [r4, #8]
   32484:	ldr	r3, [r3]
   32488:	ldr	r6, [r3, #12]
   3248c:	mov	r0, r6
   32490:	bl	11eb8 <strdup@plt>
   32494:	mov	r1, r6
   32498:	mov	r8, r0
   3249c:	mov	r0, r4
   324a0:	bl	317a8 <__assert_fail@plt+0x1f41c>
   324a4:	subs	r6, r0, #0
   324a8:	beq	32548 <__assert_fail@plt+0x201bc>
   324ac:	mov	r0, r5
   324b0:	bl	30fec <__assert_fail@plt+0x1ec60>
   324b4:	subs	r5, r0, #0
   324b8:	beq	3255c <__assert_fail@plt+0x201d0>
   324bc:	mov	r1, r7
   324c0:	ldr	r0, [r4, #8]
   324c4:	bl	313cc <__assert_fail@plt+0x1f040>
   324c8:	subs	r6, r0, #0
   324cc:	beq	32540 <__assert_fail@plt+0x201b4>
   324d0:	ldr	r3, [r4, #8]
   324d4:	cmp	r7, #3
   324d8:	ldr	r0, [r4]
   324dc:	ldr	r1, [r3, #4]
   324e0:	ldr	r3, [r4, #16]
   324e4:	bhi	325a8 <__assert_fail@plt+0x2021c>
   324e8:	ldr	r2, [pc, #196]	; 325b4 <__assert_fail@plt+0x20228>
   324ec:	str	r1, [sp, #4]
   324f0:	str	r5, [sp]
   324f4:	ldr	r2, [r2, r7, lsl #2]
   324f8:	ldr	r1, [pc, #184]	; 325b8 <__assert_fail@plt+0x2022c>
   324fc:	str	r2, [sp, #8]
   32500:	mov	r2, r8
   32504:	bl	120b0 <fprintf@plt>
   32508:	mov	r0, r5
   3250c:	bl	11e10 <free@plt>
   32510:	mov	r0, r8
   32514:	bl	11e10 <free@plt>
   32518:	mov	r6, #1
   3251c:	mov	r0, r6
   32520:	add	sp, sp, #16
   32524:	pop	{r4, r5, r6, r7, r8, pc}
   32528:	ldr	r1, [pc, #140]	; 325bc <__assert_fail@plt+0x20230>
   3252c:	mov	r0, r5
   32530:	bl	3171c <__assert_fail@plt+0x1f390>
   32534:	cmp	r0, #0
   32538:	bne	32440 <__assert_fail@plt+0x200b4>
   3253c:	b	32470 <__assert_fail@plt+0x200e4>
   32540:	mov	r0, r5
   32544:	bl	11e10 <free@plt>
   32548:	mov	r0, r8
   3254c:	bl	11e10 <free@plt>
   32550:	mov	r0, r6
   32554:	add	sp, sp, #16
   32558:	pop	{r4, r5, r6, r7, r8, pc}
   3255c:	mov	r0, r8
   32560:	bl	11e10 <free@plt>
   32564:	mov	r6, r5
   32568:	b	32474 <__assert_fail@plt+0x200e8>
   3256c:	ldr	r3, [pc, #76]	; 325c0 <__assert_fail@plt+0x20234>
   32570:	ldr	r2, [pc, #76]	; 325c4 <__assert_fail@plt+0x20238>
   32574:	ldr	r1, [pc, #76]	; 325c8 <__assert_fail@plt+0x2023c>
   32578:	ldr	r0, [pc, #76]	; 325cc <__assert_fail@plt+0x20240>
   3257c:	bl	1238c <__assert_fail@plt>
   32580:	ldr	r3, [pc, #56]	; 325c0 <__assert_fail@plt+0x20234>
   32584:	ldr	r2, [pc, #68]	; 325d0 <__assert_fail@plt+0x20244>
   32588:	ldr	r1, [pc, #56]	; 325c8 <__assert_fail@plt+0x2023c>
   3258c:	ldr	r0, [pc, #64]	; 325d4 <__assert_fail@plt+0x20248>
   32590:	bl	1238c <__assert_fail@plt>
   32594:	ldr	r3, [pc, #36]	; 325c0 <__assert_fail@plt+0x20234>
   32598:	ldr	r2, [pc, #56]	; 325d8 <__assert_fail@plt+0x2024c>
   3259c:	ldr	r1, [pc, #36]	; 325c8 <__assert_fail@plt+0x2023c>
   325a0:	ldr	r0, [pc, #52]	; 325dc <__assert_fail@plt+0x20250>
   325a4:	bl	1238c <__assert_fail@plt>
   325a8:	bl	1232c <abort@plt>
   325ac:	strdeq	r0, [r5], -ip
   325b0:	andeq	r0, r5, r8, lsr #26
   325b4:	andeq	r0, r5, r4, lsl #17
   325b8:	andeq	r0, r5, ip, lsl #28
   325bc:	strdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   325c0:			; <UNDEFINED> instruction: 0x000508b4
   325c4:	andeq	r0, r0, ip, asr #18
   325c8:	andeq	r0, r5, r8, ror fp
   325cc:	muleq	r5, r0, fp
   325d0:	andeq	r0, r0, lr, asr #18
   325d4:	andeq	r0, r5, ip, asr #27
   325d8:	andeq	r0, r0, sp, asr #18
   325dc:			; <UNDEFINED> instruction: 0x00050db0
   325e0:	push	{r4, r5, r6, r7, r8, r9, lr}
   325e4:	mov	r8, r2
   325e8:	ldr	r2, [r0, #8]
   325ec:	sub	sp, sp, #12
   325f0:	cmp	r2, #0
   325f4:	ldr	r5, [sp, #48]	; 0x30
   325f8:	beq	3279c <__assert_fail@plt+0x20410>
   325fc:	ldr	r2, [r2]
   32600:	cmp	r2, #0
   32604:	beq	32788 <__assert_fail@plt+0x203fc>
   32608:	mov	r6, r3
   3260c:	ldr	r3, [sp, #40]	; 0x28
   32610:	mov	r4, r0
   32614:	cmp	r3, #0
   32618:	bne	326ec <__assert_fail@plt+0x20360>
   3261c:	cmp	r6, #0
   32620:	bne	32710 <__assert_fail@plt+0x20384>
   32624:	ldr	r3, [r4, #8]
   32628:	cmp	r5, #0
   3262c:	ldr	r3, [r3]
   32630:	bne	326e0 <__assert_fail@plt+0x20354>
   32634:	ldr	r0, [r3, #12]
   32638:	bl	11eb8 <strdup@plt>
   3263c:	mov	r1, r0
   32640:	mov	r7, r0
   32644:	mov	r0, r4
   32648:	bl	317a8 <__assert_fail@plt+0x1f41c>
   3264c:	subs	r6, r0, #0
   32650:	beq	32728 <__assert_fail@plt+0x2039c>
   32654:	add	r6, r4, #8
   32658:	mov	r0, r6
   3265c:	bl	30fec <__assert_fail@plt+0x1ec60>
   32660:	subs	r9, r0, #0
   32664:	beq	32760 <__assert_fail@plt+0x203d4>
   32668:	cmp	r5, #0
   3266c:	beq	32680 <__assert_fail@plt+0x202f4>
   32670:	mov	r0, r6
   32674:	bl	30fec <__assert_fail@plt+0x1ec60>
   32678:	subs	r5, r0, #0
   3267c:	beq	32770 <__assert_fail@plt+0x203e4>
   32680:	mov	r1, r8
   32684:	ldr	r0, [r4, #8]
   32688:	bl	313cc <__assert_fail@plt+0x1f040>
   3268c:	subs	r6, r0, #0
   32690:	beq	3273c <__assert_fail@plt+0x203b0>
   32694:	ldr	r2, [r4, #8]
   32698:	ldr	r3, [r4, #16]
   3269c:	ldr	r0, [r4]
   326a0:	ldr	r1, [r2, #4]
   326a4:	mov	r2, r7
   326a8:	str	r1, [sp, #4]
   326ac:	str	r9, [sp]
   326b0:	ldr	r1, [pc, #248]	; 327b0 <__assert_fail@plt+0x20424>
   326b4:	bl	120b0 <fprintf@plt>
   326b8:	mov	r0, r9
   326bc:	bl	11e10 <free@plt>
   326c0:	mov	r0, r7
   326c4:	bl	11e10 <free@plt>
   326c8:	mov	r0, r5
   326cc:	bl	11e10 <free@plt>
   326d0:	mov	r6, #1
   326d4:	mov	r0, r6
   326d8:	add	sp, sp, #12
   326dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   326e0:	ldr	r3, [r3]
   326e4:	ldr	r0, [r3, #12]
   326e8:	b	32638 <__assert_fail@plt+0x202ac>
   326ec:	ldr	r1, [pc, #192]	; 327b4 <__assert_fail@plt+0x20428>
   326f0:	add	r0, r0, #8
   326f4:	bl	3171c <__assert_fail@plt+0x1f390>
   326f8:	cmp	r0, #0
   326fc:	bne	3261c <__assert_fail@plt+0x20290>
   32700:	mov	r6, #0
   32704:	mov	r0, r6
   32708:	add	sp, sp, #12
   3270c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   32710:	ldr	r1, [pc, #160]	; 327b8 <__assert_fail@plt+0x2042c>
   32714:	add	r0, r4, #8
   32718:	bl	3171c <__assert_fail@plt+0x1f390>
   3271c:	cmp	r0, #0
   32720:	bne	32624 <__assert_fail@plt+0x20298>
   32724:	b	32700 <__assert_fail@plt+0x20374>
   32728:	mov	r0, r7
   3272c:	bl	11e10 <free@plt>
   32730:	mov	r0, r6
   32734:	add	sp, sp, #12
   32738:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3273c:	mov	r0, r9
   32740:	bl	11e10 <free@plt>
   32744:	mov	r0, r7
   32748:	bl	11e10 <free@plt>
   3274c:	mov	r0, r5
   32750:	bl	11e10 <free@plt>
   32754:	mov	r0, r6
   32758:	add	sp, sp, #12
   3275c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   32760:	mov	r0, r7
   32764:	bl	11e10 <free@plt>
   32768:	mov	r6, r9
   3276c:	b	326d4 <__assert_fail@plt+0x20348>
   32770:	mov	r0, r9
   32774:	bl	11e10 <free@plt>
   32778:	mov	r0, r7
   3277c:	bl	11e10 <free@plt>
   32780:	mov	r6, r5
   32784:	b	326d4 <__assert_fail@plt+0x20348>
   32788:	ldr	r3, [pc, #44]	; 327bc <__assert_fail@plt+0x20430>
   3278c:	mov	r2, #2304	; 0x900
   32790:	ldr	r1, [pc, #40]	; 327c0 <__assert_fail@plt+0x20434>
   32794:	ldr	r0, [pc, #40]	; 327c4 <__assert_fail@plt+0x20438>
   32798:	bl	1238c <__assert_fail@plt>
   3279c:	ldr	r3, [pc, #24]	; 327bc <__assert_fail@plt+0x20430>
   327a0:	ldr	r2, [pc, #32]	; 327c8 <__assert_fail@plt+0x2043c>
   327a4:	ldr	r1, [pc, #20]	; 327c0 <__assert_fail@plt+0x20434>
   327a8:	ldr	r0, [pc, #28]	; 327cc <__assert_fail@plt+0x20440>
   327ac:	bl	1238c <__assert_fail@plt>
   327b0:	andeq	r0, r5, ip, lsr lr
   327b4:	strdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   327b8:	strdeq	r0, [r5], -ip
   327bc:	ldrdeq	r0, [r5], -r4
   327c0:	andeq	r0, r5, r8, ror fp
   327c4:			; <UNDEFINED> instruction: 0x00050db0
   327c8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   327cc:	muleq	r5, r0, fp
   327d0:	push	{r4, r5, r6, r7, r8, lr}
   327d4:	mov	r6, r2
   327d8:	mov	r5, r0
   327dc:	bl	317a8 <__assert_fail@plt+0x1f41c>
   327e0:	cmp	r0, #0
   327e4:	bne	327f0 <__assert_fail@plt+0x20464>
   327e8:	mov	r0, #0
   327ec:	pop	{r4, r5, r6, r7, r8, pc}
   327f0:	add	r0, r5, #8
   327f4:	bl	30fec <__assert_fail@plt+0x1ec60>
   327f8:	subs	r7, r0, #0
   327fc:	beq	327e8 <__assert_fail@plt+0x2045c>
   32800:	ldr	r3, [r5, #4]
   32804:	cmp	r3, #0
   32808:	movne	r4, #0
   3280c:	beq	3282c <__assert_fail@plt+0x204a0>
   32810:	ldr	r1, [r5]
   32814:	mov	r0, #32
   32818:	bl	12254 <putc@plt>
   3281c:	ldr	r3, [r5, #4]
   32820:	add	r4, r4, #1
   32824:	cmp	r4, r3
   32828:	bcc	32810 <__assert_fail@plt+0x20484>
   3282c:	cmp	r6, #0
   32830:	ldr	r0, [r5]
   32834:	beq	32854 <__assert_fail@plt+0x204c8>
   32838:	mov	r2, r7
   3283c:	ldr	r1, [pc, #44]	; 32870 <__assert_fail@plt+0x204e4>
   32840:	bl	120b0 <fprintf@plt>
   32844:	mov	r3, #1
   32848:	mov	r0, r3
   3284c:	str	r3, [r5, #12]
   32850:	pop	{r4, r5, r6, r7, r8, pc}
   32854:	mov	r3, r0
   32858:	mov	r2, #7
   3285c:	mov	r1, #1
   32860:	ldr	r0, [pc, #12]	; 32874 <__assert_fail@plt+0x204e8>
   32864:	bl	11f24 <fwrite@plt>
   32868:	ldr	r0, [r5]
   3286c:	b	32838 <__assert_fail@plt+0x204ac>
   32870:	andeq	r0, r5, r0, ror #28
   32874:	andeq	r0, r5, r8, lsr #26
   32878:	push	{r4, r5, r6, r7, r8, lr}
   3287c:	sub	sp, sp, #24
   32880:	mov	r7, r2
   32884:	mov	r8, r3
   32888:	mov	r5, r0
   3288c:	bl	317a8 <__assert_fail@plt+0x1f41c>
   32890:	cmp	r0, #0
   32894:	bne	328a0 <__assert_fail@plt+0x20514>
   32898:	add	sp, sp, #24
   3289c:	pop	{r4, r5, r6, r7, r8, pc}
   328a0:	add	r0, r5, #8
   328a4:	bl	30fec <__assert_fail@plt+0x1ec60>
   328a8:	subs	r6, r0, #0
   328ac:	moveq	r0, r6
   328b0:	beq	32898 <__assert_fail@plt+0x2050c>
   328b4:	ldr	r3, [r5, #4]
   328b8:	cmp	r3, #0
   328bc:	beq	328e0 <__assert_fail@plt+0x20554>
   328c0:	mov	r4, #0
   328c4:	ldr	r1, [r5]
   328c8:	mov	r0, #32
   328cc:	bl	12254 <putc@plt>
   328d0:	ldr	r3, [r5, #4]
   328d4:	add	r4, r4, #1
   328d8:	cmp	r4, r3
   328dc:	bcc	328c4 <__assert_fail@plt+0x20538>
   328e0:	cmp	r7, #2
   328e4:	bcc	3290c <__assert_fail@plt+0x20580>
   328e8:	cmp	r7, #3
   328ec:	bls	32944 <__assert_fail@plt+0x205b8>
   328f0:	cmp	r7, #5
   328f4:	bne	3290c <__assert_fail@plt+0x20580>
   328f8:	ldr	r3, [r5]
   328fc:	mov	r2, #9
   32900:	mov	r1, #1
   32904:	ldr	r0, [pc, #80]	; 3295c <__assert_fail@plt+0x205d0>
   32908:	bl	11f24 <fwrite@plt>
   3290c:	mov	r2, r8
   32910:	mov	r0, sp
   32914:	ldr	r1, [pc, #68]	; 32960 <__assert_fail@plt+0x205d4>
   32918:	bl	1223c <sprintf@plt>
   3291c:	mov	r3, sp
   32920:	mov	r2, r6
   32924:	ldr	r1, [pc, #56]	; 32964 <__assert_fail@plt+0x205d8>
   32928:	ldr	r0, [r5]
   3292c:	bl	120b0 <fprintf@plt>
   32930:	mov	r0, r6
   32934:	bl	11e10 <free@plt>
   32938:	mov	r0, #1
   3293c:	add	sp, sp, #24
   32940:	pop	{r4, r5, r6, r7, r8, pc}
   32944:	ldr	r3, [r5]
   32948:	mov	r2, #7
   3294c:	mov	r1, #1
   32950:	ldr	r0, [pc, #16]	; 32968 <__assert_fail@plt+0x205dc>
   32954:	bl	11f24 <fwrite@plt>
   32958:	b	3290c <__assert_fail@plt+0x20580>
   3295c:	andeq	r0, r5, r8, ror #28
   32960:	andeq	r0, r5, r8, lsr fp
   32964:	andeq	r0, r5, r4, ror lr
   32968:	andeq	r0, r5, r8, lsr #26
   3296c:	push	{r4, r5, r6, lr}
   32970:	mov	r5, r0
   32974:	bl	317a8 <__assert_fail@plt+0x1f41c>
   32978:	cmp	r0, #0
   3297c:	bne	32988 <__assert_fail@plt+0x205fc>
   32980:	mov	r0, #0
   32984:	pop	{r4, r5, r6, pc}
   32988:	add	r0, r5, #8
   3298c:	bl	30fec <__assert_fail@plt+0x1ec60>
   32990:	subs	r6, r0, #0
   32994:	beq	32980 <__assert_fail@plt+0x205f4>
   32998:	ldr	r3, [r5, #4]
   3299c:	cmp	r3, #0
   329a0:	beq	329c4 <__assert_fail@plt+0x20638>
   329a4:	mov	r4, #0
   329a8:	ldr	r1, [r5]
   329ac:	mov	r0, #32
   329b0:	bl	12254 <putc@plt>
   329b4:	ldr	r3, [r5, #4]
   329b8:	add	r4, r4, #1
   329bc:	cmp	r4, r3
   329c0:	bcc	329a8 <__assert_fail@plt+0x2061c>
   329c4:	mov	r2, r6
   329c8:	ldr	r1, [pc, #20]	; 329e4 <__assert_fail@plt+0x20658>
   329cc:	ldr	r0, [r5]
   329d0:	bl	120b0 <fprintf@plt>
   329d4:	mov	r0, r6
   329d8:	bl	11e10 <free@plt>
   329dc:	mov	r0, #1
   329e0:	pop	{r4, r5, r6, pc}
   329e4:	andeq	r0, r5, r4, lsl #29
   329e8:	ldr	r3, [r0, #8]
   329ec:	cmp	r3, #0
   329f0:	beq	329fc <__assert_fail@plt+0x20670>
   329f4:	ldr	r1, [pc, #24]	; 32a14 <__assert_fail@plt+0x20688>
   329f8:	b	317a8 <__assert_fail@plt+0x1f41c>
   329fc:	push	{r4, lr}
   32a00:	ldr	r3, [pc, #16]	; 32a18 <__assert_fail@plt+0x2068c>
   32a04:	ldr	r2, [pc, #16]	; 32a1c <__assert_fail@plt+0x20690>
   32a08:	ldr	r1, [pc, #16]	; 32a20 <__assert_fail@plt+0x20694>
   32a0c:	ldr	r0, [pc, #16]	; 32a24 <__assert_fail@plt+0x20698>
   32a10:	bl	1238c <__assert_fail@plt>
   32a14:	muleq	r5, r4, lr
   32a18:	andeq	r0, r5, ip, ror #17
   32a1c:	andeq	r0, r0, sl, lsl r3
   32a20:	andeq	r0, r5, r8, ror fp
   32a24:	muleq	r5, r0, fp
   32a28:	push	{r4, r5, r6, r7, lr}
   32a2c:	mov	r6, r2
   32a30:	sub	r2, r2, #3
   32a34:	cmp	r2, #1
   32a38:	sub	sp, sp, #28
   32a3c:	mov	r5, r1
   32a40:	mov	r7, r3
   32a44:	mov	r4, r0
   32a48:	bls	32adc <__assert_fail@plt+0x20750>
   32a4c:	mov	r1, r5
   32a50:	mov	r0, r4
   32a54:	bl	317a8 <__assert_fail@plt+0x1f41c>
   32a58:	cmp	r0, #0
   32a5c:	bne	32a6c <__assert_fail@plt+0x206e0>
   32a60:	mov	r0, #0
   32a64:	add	sp, sp, #28
   32a68:	pop	{r4, r5, r6, r7, pc}
   32a6c:	add	r0, r4, #8
   32a70:	bl	30fec <__assert_fail@plt+0x1ec60>
   32a74:	subs	r5, r0, #0
   32a78:	moveq	r0, r5
   32a7c:	beq	32a64 <__assert_fail@plt+0x206d8>
   32a80:	ldr	r3, [r4, #12]
   32a84:	cmp	r3, #1
   32a88:	bne	32aec <__assert_fail@plt+0x20760>
   32a8c:	sub	r6, r6, #2
   32a90:	bics	r3, r6, #2
   32a94:	beq	32b0c <__assert_fail@plt+0x20780>
   32a98:	mov	r2, r7
   32a9c:	mov	r0, sp
   32aa0:	ldr	r1, [pc, #124]	; 32b24 <__assert_fail@plt+0x20798>
   32aa4:	bl	1223c <sprintf@plt>
   32aa8:	mov	r3, sp
   32aac:	mov	r2, r5
   32ab0:	ldr	r1, [pc, #112]	; 32b28 <__assert_fail@plt+0x2079c>
   32ab4:	ldr	r0, [r4]
   32ab8:	bl	120b0 <fprintf@plt>
   32abc:	mov	r0, r5
   32ac0:	bl	11e10 <free@plt>
   32ac4:	ldr	r3, [r4, #12]
   32ac8:	mov	r0, #1
   32acc:	add	r3, r3, r0
   32ad0:	str	r3, [r4, #12]
   32ad4:	add	sp, sp, #28
   32ad8:	pop	{r4, r5, r6, r7, pc}
   32adc:	bl	329e8 <__assert_fail@plt+0x2065c>
   32ae0:	cmp	r0, #0
   32ae4:	bne	32a4c <__assert_fail@plt+0x206c0>
   32ae8:	b	32a60 <__assert_fail@plt+0x206d4>
   32aec:	ldr	r3, [r4]
   32af0:	mov	r2, #2
   32af4:	mov	r1, #1
   32af8:	ldr	r0, [pc, #44]	; 32b2c <__assert_fail@plt+0x207a0>
   32afc:	sub	r6, r6, #2
   32b00:	bl	11f24 <fwrite@plt>
   32b04:	bics	r3, r6, #2
   32b08:	bne	32a98 <__assert_fail@plt+0x2070c>
   32b0c:	ldr	r3, [r4]
   32b10:	mov	r2, #9
   32b14:	mov	r1, #1
   32b18:	ldr	r0, [pc, #16]	; 32b30 <__assert_fail@plt+0x207a4>
   32b1c:	bl	11f24 <fwrite@plt>
   32b20:	b	32a98 <__assert_fail@plt+0x2070c>
   32b24:	andeq	r0, r5, r8, lsr fp
   32b28:	muleq	r5, r8, lr
   32b2c:	andeq	r8, r4, r4, lsl lr
   32b30:	andeq	r0, r5, r8, ror #28
   32b34:	ldr	r3, [r0, #8]
   32b38:	push	{r4, lr}
   32b3c:	cmp	r3, #0
   32b40:	beq	32b88 <__assert_fail@plt+0x207fc>
   32b44:	mov	r4, r0
   32b48:	mov	r1, #124	; 0x7c
   32b4c:	ldr	r0, [r3, #4]
   32b50:	bl	12098 <strchr@plt>
   32b54:	cmp	r0, #0
   32b58:	beq	32b68 <__assert_fail@plt+0x207dc>
   32b5c:	ldrb	r3, [r0, #1]
   32b60:	cmp	r3, #91	; 0x5b
   32b64:	beq	32b78 <__assert_fail@plt+0x207ec>
   32b68:	mov	r0, r4
   32b6c:	ldr	r1, [pc, #40]	; 32b9c <__assert_fail@plt+0x20810>
   32b70:	pop	{r4, lr}
   32b74:	b	317a8 <__assert_fail@plt+0x1f41c>
   32b78:	mov	r0, r4
   32b7c:	ldr	r1, [pc, #28]	; 32ba0 <__assert_fail@plt+0x20814>
   32b80:	pop	{r4, lr}
   32b84:	b	317a8 <__assert_fail@plt+0x1f41c>
   32b88:	ldr	r3, [pc, #20]	; 32ba4 <__assert_fail@plt+0x20818>
   32b8c:	ldr	r2, [pc, #20]	; 32ba8 <__assert_fail@plt+0x2081c>
   32b90:	ldr	r1, [pc, #20]	; 32bac <__assert_fail@plt+0x20820>
   32b94:	ldr	r0, [pc, #20]	; 32bb0 <__assert_fail@plt+0x20824>
   32b98:	bl	1238c <__assert_fail@plt>
   32b9c:	andeq	r0, r5, ip, lsr #29
   32ba0:	andeq	r0, r5, r4, lsr #29
   32ba4:	andeq	r0, r5, r0, lsl #18
   32ba8:			; <UNDEFINED> instruction: 0x000002bb
   32bac:	andeq	r0, r5, r8, ror fp
   32bb0:	muleq	r5, r0, fp
   32bb4:	push	{r4, r5, r6, lr}
   32bb8:	mov	r4, r0
   32bbc:	ldr	r1, [pc, #120]	; 32c3c <__assert_fail@plt+0x208b0>
   32bc0:	bl	317a8 <__assert_fail@plt+0x1f41c>
   32bc4:	cmp	r0, #0
   32bc8:	bne	32bd4 <__assert_fail@plt+0x20848>
   32bcc:	mov	r0, #0
   32bd0:	pop	{r4, r5, r6, pc}
   32bd4:	add	r5, r4, #8
   32bd8:	mov	r0, r5
   32bdc:	bl	30fec <__assert_fail@plt+0x1ec60>
   32be0:	subs	r6, r0, #0
   32be4:	beq	32bcc <__assert_fail@plt+0x20840>
   32be8:	mov	r0, r4
   32bec:	ldr	r1, [pc, #72]	; 32c3c <__assert_fail@plt+0x208b0>
   32bf0:	bl	317a8 <__assert_fail@plt+0x1f41c>
   32bf4:	cmp	r0, #0
   32bf8:	beq	32bcc <__assert_fail@plt+0x20840>
   32bfc:	ldr	r1, [pc, #60]	; 32c40 <__assert_fail@plt+0x208b4>
   32c00:	mov	r0, r5
   32c04:	bl	3168c <__assert_fail@plt+0x1f300>
   32c08:	cmp	r0, #0
   32c0c:	beq	32bcc <__assert_fail@plt+0x20840>
   32c10:	mov	r1, r6
   32c14:	mov	r0, r5
   32c18:	bl	3168c <__assert_fail@plt+0x1f300>
   32c1c:	cmp	r0, #0
   32c20:	beq	32bcc <__assert_fail@plt+0x20840>
   32c24:	mov	r0, r5
   32c28:	ldr	r1, [pc, #20]	; 32c44 <__assert_fail@plt+0x208b8>
   32c2c:	bl	3171c <__assert_fail@plt+0x1f390>
   32c30:	adds	r0, r0, #0
   32c34:	movne	r0, #1
   32c38:	pop	{r4, r5, r6, pc}
   32c3c:	andeq	r9, r4, r4, lsr #5
   32c40:	andeq	r8, r4, ip, lsl ip
   32c44:			; <UNDEFINED> instruction: 0x00050eb0
   32c48:	push	{r4, r5, r6, lr}
   32c4c:	mov	r5, r1
   32c50:	ldr	r1, [pc, #104]	; 32cc0 <__assert_fail@plt+0x20934>
   32c54:	mov	r4, r0
   32c58:	bl	317a8 <__assert_fail@plt+0x1f41c>
   32c5c:	cmp	r0, #0
   32c60:	bne	32c6c <__assert_fail@plt+0x208e0>
   32c64:	mov	r0, #0
   32c68:	pop	{r4, r5, r6, pc}
   32c6c:	add	r4, r4, #8
   32c70:	mov	r0, r4
   32c74:	ldr	r1, [pc, #72]	; 32cc4 <__assert_fail@plt+0x20938>
   32c78:	bl	3168c <__assert_fail@plt+0x1f300>
   32c7c:	cmp	r0, #0
   32c80:	beq	32c64 <__assert_fail@plt+0x208d8>
   32c84:	ldr	r1, [pc, #60]	; 32cc8 <__assert_fail@plt+0x2093c>
   32c88:	mov	r0, r4
   32c8c:	bl	3171c <__assert_fail@plt+0x1f390>
   32c90:	cmp	r0, #0
   32c94:	beq	32c64 <__assert_fail@plt+0x208d8>
   32c98:	cmp	r5, #0
   32c9c:	bne	32ca8 <__assert_fail@plt+0x2091c>
   32ca0:	mov	r0, #1
   32ca4:	pop	{r4, r5, r6, pc}
   32ca8:	mov	r0, r4
   32cac:	ldr	r1, [pc, #24]	; 32ccc <__assert_fail@plt+0x20940>
   32cb0:	bl	3171c <__assert_fail@plt+0x1f390>
   32cb4:	adds	r0, r0, #0
   32cb8:	movne	r0, #1
   32cbc:	pop	{r4, r5, r6, pc}
   32cc0:	andeq	r9, r4, r4, lsr #5
   32cc4:			; <UNDEFINED> instruction: 0x00050eb4
   32cc8:			; <UNDEFINED> instruction: 0x00050ebc
   32ccc:	andeq	r0, r5, r0, asr #29
   32cd0:	sub	r3, r2, #3
   32cd4:	cmp	r3, #1
   32cd8:	push	{r4, r5, r6, r7, r8, lr}
   32cdc:	mov	r5, r2
   32ce0:	mov	r6, r1
   32ce4:	mov	r4, r0
   32ce8:	bls	32d48 <__assert_fail@plt+0x209bc>
   32cec:	mov	r1, r6
   32cf0:	mov	r0, r4
   32cf4:	bl	317a8 <__assert_fail@plt+0x1f41c>
   32cf8:	cmp	r0, #0
   32cfc:	bne	32d08 <__assert_fail@plt+0x2097c>
   32d00:	mov	r0, #0
   32d04:	pop	{r4, r5, r6, r7, r8, pc}
   32d08:	add	r6, r4, #8
   32d0c:	mov	r0, r6
   32d10:	bl	30fec <__assert_fail@plt+0x1ec60>
   32d14:	subs	r7, r0, #0
   32d18:	beq	32d00 <__assert_fail@plt+0x20974>
   32d1c:	ldr	r3, [r4, #8]
   32d20:	ldr	r3, [r3, #12]
   32d24:	cmp	r3, #0
   32d28:	beq	32d5c <__assert_fail@plt+0x209d0>
   32d2c:	mov	r0, r7
   32d30:	bl	11e10 <free@plt>
   32d34:	ldr	r3, [r4, #12]
   32d38:	mov	r0, #1
   32d3c:	add	r3, r3, r0
   32d40:	str	r3, [r4, #12]
   32d44:	pop	{r4, r5, r6, r7, r8, pc}
   32d48:	bl	329e8 <__assert_fail@plt+0x2065c>
   32d4c:	cmp	r0, #0
   32d50:	bne	32cec <__assert_fail@plt+0x20960>
   32d54:	mov	r0, #0
   32d58:	pop	{r4, r5, r6, r7, r8, pc}
   32d5c:	ldr	r3, [r4, #12]
   32d60:	cmp	r3, #1
   32d64:	beq	32d7c <__assert_fail@plt+0x209f0>
   32d68:	ldr	r1, [pc, #68]	; 32db4 <__assert_fail@plt+0x20a28>
   32d6c:	mov	r0, r6
   32d70:	bl	3171c <__assert_fail@plt+0x1f390>
   32d74:	cmp	r0, #0
   32d78:	beq	32d00 <__assert_fail@plt+0x20974>
   32d7c:	sub	r5, r5, #2
   32d80:	bics	r3, r5, #2
   32d84:	bne	32d9c <__assert_fail@plt+0x20a10>
   32d88:	ldr	r1, [pc, #40]	; 32db8 <__assert_fail@plt+0x20a2c>
   32d8c:	mov	r0, r6
   32d90:	bl	3171c <__assert_fail@plt+0x1f390>
   32d94:	cmp	r0, #0
   32d98:	beq	32d00 <__assert_fail@plt+0x20974>
   32d9c:	mov	r0, r6
   32da0:	mov	r1, r7
   32da4:	bl	3171c <__assert_fail@plt+0x1f390>
   32da8:	cmp	r0, #0
   32dac:	bne	32d2c <__assert_fail@plt+0x209a0>
   32db0:	b	32d00 <__assert_fail@plt+0x20974>
   32db4:	andeq	r8, r4, r4, lsl lr
   32db8:	andeq	r0, r5, r8, ror #28
   32dbc:	push	{r4, r5, r6, r7, r8, lr}
   32dc0:	subs	r4, r1, #0
   32dc4:	beq	32e2c <__assert_fail@plt+0x20aa0>
   32dc8:	ldr	r6, [r0]
   32dcc:	mov	r5, r0
   32dd0:	cmp	r6, #0
   32dd4:	beq	32e34 <__assert_fail@plt+0x20aa8>
   32dd8:	ldr	r7, [r6, #20]
   32ddc:	cmp	r7, #0
   32de0:	moveq	r8, r7
   32de4:	beq	32df4 <__assert_fail@plt+0x20a68>
   32de8:	mov	r0, r7
   32dec:	bl	12074 <strlen@plt>
   32df0:	mov	r8, r0
   32df4:	mov	r0, r4
   32df8:	bl	12074 <strlen@plt>
   32dfc:	add	r1, r0, r8
   32e00:	add	r1, r1, #1
   32e04:	mov	r0, r7
   32e08:	bl	11ed0 <xrealloc@plt>
   32e0c:	ldr	r3, [r5]
   32e10:	mov	r1, r4
   32e14:	str	r0, [r6, #20]
   32e18:	ldr	r0, [r3, #20]
   32e1c:	add	r0, r0, r8
   32e20:	bl	11f6c <strcpy@plt>
   32e24:	mov	r0, #1
   32e28:	pop	{r4, r5, r6, r7, r8, pc}
   32e2c:	mov	r0, r4
   32e30:	pop	{r4, r5, r6, r7, r8, pc}
   32e34:	ldr	r3, [pc, #12]	; 32e48 <__assert_fail@plt+0x20abc>
   32e38:	mov	r2, #400	; 0x190
   32e3c:	ldr	r1, [pc, #8]	; 32e4c <__assert_fail@plt+0x20ac0>
   32e40:	ldr	r0, [pc, #8]	; 32e50 <__assert_fail@plt+0x20ac4>
   32e44:	bl	1238c <__assert_fail@plt>
   32e48:	andeq	r0, r5, r0, lsl r9
   32e4c:	andeq	r0, r5, r8, ror fp
   32e50:	muleq	r5, r0, fp
   32e54:	push	{r4, r5, r6, r7, r8, lr}
   32e58:	mov	r6, r2
   32e5c:	mov	r7, r3
   32e60:	mov	r4, r0
   32e64:	bl	317a8 <__assert_fail@plt+0x1f41c>
   32e68:	cmp	r0, #0
   32e6c:	bne	32e78 <__assert_fail@plt+0x20aec>
   32e70:	mov	r0, #0
   32e74:	pop	{r4, r5, r6, r7, r8, pc}
   32e78:	add	r5, r4, #8
   32e7c:	mov	r0, r5
   32e80:	ldr	r1, [pc, #176]	; 32f38 <__assert_fail@plt+0x20bac>
   32e84:	bl	3168c <__assert_fail@plt+0x1f300>
   32e88:	cmp	r0, #0
   32e8c:	beq	32e70 <__assert_fail@plt+0x20ae4>
   32e90:	ldr	r1, [pc, #164]	; 32f3c <__assert_fail@plt+0x20bb0>
   32e94:	mov	r0, r5
   32e98:	bl	3171c <__assert_fail@plt+0x1f390>
   32e9c:	cmp	r0, #0
   32ea0:	beq	32e70 <__assert_fail@plt+0x20ae4>
   32ea4:	mov	r1, r6
   32ea8:	mov	r0, r5
   32eac:	bl	3171c <__assert_fail@plt+0x1f390>
   32eb0:	cmp	r0, #0
   32eb4:	beq	32e70 <__assert_fail@plt+0x20ae4>
   32eb8:	ldr	r1, [pc, #128]	; 32f40 <__assert_fail@plt+0x20bb4>
   32ebc:	mov	r0, r5
   32ec0:	bl	3171c <__assert_fail@plt+0x1f390>
   32ec4:	cmp	r0, #0
   32ec8:	beq	32e70 <__assert_fail@plt+0x20ae4>
   32ecc:	ldr	r3, [r4, #4]
   32ed0:	cmp	r3, #0
   32ed4:	beq	32f04 <__assert_fail@plt+0x20b78>
   32ed8:	ldr	r8, [pc, #100]	; 32f44 <__assert_fail@plt+0x20bb8>
   32edc:	mov	r6, #0
   32ee0:	mov	r1, r8
   32ee4:	mov	r0, r5
   32ee8:	bl	3171c <__assert_fail@plt+0x1f390>
   32eec:	add	r6, r6, #1
   32ef0:	cmp	r0, #0
   32ef4:	beq	32e70 <__assert_fail@plt+0x20ae4>
   32ef8:	ldr	r3, [r4, #4]
   32efc:	cmp	r6, r3
   32f00:	bcc	32ee0 <__assert_fail@plt+0x20b54>
   32f04:	mov	r0, r5
   32f08:	bl	30fec <__assert_fail@plt+0x1ec60>
   32f0c:	subs	r6, r0, #0
   32f10:	beq	32e70 <__assert_fail@plt+0x20ae4>
   32f14:	mov	r1, r7
   32f18:	mov	r0, r4
   32f1c:	bl	31fb4 <__assert_fail@plt+0x1fc28>
   32f20:	cmp	r0, #0
   32f24:	beq	32e70 <__assert_fail@plt+0x20ae4>
   32f28:	mov	r1, r6
   32f2c:	mov	r0, r5
   32f30:	pop	{r4, r5, r6, r7, r8, lr}
   32f34:	b	3171c <__assert_fail@plt+0x1f390>
   32f38:	andeq	r0, r5, r8, lsr #26
   32f3c:	ldrdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   32f40:	ldrdeq	r0, [r5], -r8
   32f44:	andeq	r8, r4, ip, lsl ip
   32f48:	push	{r4, r5, r6, r7, r8, lr}
   32f4c:	mov	r6, r0
   32f50:	mov	r0, #28
   32f54:	mov	r7, r1
   32f58:	bl	11f3c <xmalloc@plt>
   32f5c:	mov	r5, #0
   32f60:	mov	r4, r0
   32f64:	mov	r0, r7
   32f68:	str	r5, [r4]
   32f6c:	str	r5, [r4, #4]
   32f70:	str	r5, [r4, #8]
   32f74:	str	r5, [r4, #12]
   32f78:	str	r5, [r4, #16]
   32f7c:	str	r5, [r4, #20]
   32f80:	str	r5, [r4, #24]
   32f84:	bl	11f60 <xstrdup@plt>
   32f88:	ldr	r3, [r6]
   32f8c:	mov	r2, #3
   32f90:	str	r5, [r4, #12]
   32f94:	str	r2, [r4, #8]
   32f98:	str	r3, [r4]
   32f9c:	str	r4, [r6]
   32fa0:	str	r0, [r4, #4]
   32fa4:	mov	r0, #1
   32fa8:	pop	{r4, r5, r6, r7, r8, pc}
   32fac:	sub	ip, r3, #7
   32fb0:	cmp	ip, #4
   32fb4:	push	{r4, r5, r6, r7, lr}
   32fb8:	sub	sp, sp, #28
   32fbc:	bhi	33078 <__assert_fail@plt+0x20cec>
   32fc0:	mov	r5, r3
   32fc4:	ldr	r3, [pc, #176]	; 3307c <__assert_fail@plt+0x20cf0>
   32fc8:	add	r4, r0, #8
   32fcc:	add	r3, r3, ip, lsl #2
   32fd0:	mov	r6, r1
   32fd4:	mov	r0, r4
   32fd8:	ldr	r1, [r3, #380]	; 0x17c
   32fdc:	mov	r7, r2
   32fe0:	bl	32f48 <__assert_fail@plt+0x20bbc>
   32fe4:	cmp	r0, #0
   32fe8:	beq	33040 <__assert_fail@plt+0x20cb4>
   32fec:	cmp	r6, #0
   32ff0:	beq	3301c <__assert_fail@plt+0x20c90>
   32ff4:	mov	r1, r6
   32ff8:	mov	r0, r4
   32ffc:	bl	3171c <__assert_fail@plt+0x1f390>
   33000:	cmp	r0, #0
   33004:	beq	33040 <__assert_fail@plt+0x20cb4>
   33008:	cmp	r5, #11
   3300c:	bne	3304c <__assert_fail@plt+0x20cc0>
   33010:	mov	r0, #1
   33014:	add	sp, sp, #28
   33018:	pop	{r4, r5, r6, r7, pc}
   3301c:	mov	r2, r7
   33020:	ldr	r1, [pc, #88]	; 33080 <__assert_fail@plt+0x20cf4>
   33024:	mov	r0, sp
   33028:	bl	1223c <sprintf@plt>
   3302c:	mov	r1, sp
   33030:	mov	r0, r4
   33034:	bl	3171c <__assert_fail@plt+0x1f390>
   33038:	cmp	r0, #0
   3303c:	bne	33010 <__assert_fail@plt+0x20c84>
   33040:	mov	r0, #0
   33044:	add	sp, sp, #28
   33048:	pop	{r4, r5, r6, r7, pc}
   3304c:	mov	r2, r7
   33050:	mov	r0, sp
   33054:	ldr	r1, [pc, #40]	; 33084 <__assert_fail@plt+0x20cf8>
   33058:	bl	1223c <sprintf@plt>
   3305c:	mov	r1, sp
   33060:	mov	r0, r4
   33064:	bl	3171c <__assert_fail@plt+0x1f390>
   33068:	adds	r0, r0, #0
   3306c:	movne	r0, #1
   33070:	add	sp, sp, #28
   33074:	pop	{r4, r5, r6, r7, pc}
   33078:	bl	1232c <abort@plt>
   3307c:	andeq	r0, r5, r4, lsr #15
   33080:	andeq	r0, r5, r0, ror #29
   33084:	andeq	r0, r5, ip, ror #29
   33088:	subs	r3, r1, #0
   3308c:	beq	33098 <__assert_fail@plt+0x20d0c>
   33090:	add	r0, r0, #8
   33094:	b	32f48 <__assert_fail@plt+0x20bbc>
   33098:	mov	r0, r3
   3309c:	bx	lr
   330a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   330a4:	sub	sp, sp, #36	; 0x24
   330a8:	ldr	ip, [r0, #4]
   330ac:	ldr	r8, [sp, #76]	; 0x4c
   330b0:	mov	r5, r0
   330b4:	cmp	r8, #0
   330b8:	ldr	r9, [sp, #80]	; 0x50
   330bc:	clz	r0, r9
   330c0:	lsr	r0, r0, #5
   330c4:	moveq	r0, #0
   330c8:	add	ip, ip, #2
   330cc:	cmp	r0, #0
   330d0:	mov	r7, r1
   330d4:	mov	sl, r2
   330d8:	mov	fp, r3
   330dc:	str	ip, [r5, #4]
   330e0:	add	r6, r5, #8
   330e4:	moveq	r4, r0
   330e8:	bne	3320c <__assert_fail@plt+0x20e80>
   330ec:	ldr	r3, [pc, #540]	; 33310 <__assert_fail@plt+0x20f84>
   330f0:	cmp	fp, #0
   330f4:	ldr	r1, [pc, #536]	; 33314 <__assert_fail@plt+0x20f88>
   330f8:	mov	r0, r6
   330fc:	moveq	r1, r3
   33100:	bl	32f48 <__assert_fail@plt+0x20bbc>
   33104:	cmp	r0, #0
   33108:	beq	33200 <__assert_fail@plt+0x20e74>
   3310c:	cmp	r7, #0
   33110:	beq	33220 <__assert_fail@plt+0x20e94>
   33114:	mov	r1, r7
   33118:	mov	r0, r6
   3311c:	bl	3171c <__assert_fail@plt+0x1f390>
   33120:	cmp	r0, #0
   33124:	beq	33200 <__assert_fail@plt+0x20e74>
   33128:	ldr	r1, [pc, #488]	; 33318 <__assert_fail@plt+0x20f8c>
   3312c:	mov	r0, r6
   33130:	bl	3171c <__assert_fail@plt+0x1f390>
   33134:	cmp	r0, #0
   33138:	beq	33200 <__assert_fail@plt+0x20e74>
   3313c:	ldr	r3, [sp, #72]	; 0x48
   33140:	orrs	r3, r8, r3
   33144:	bne	33248 <__assert_fail@plt+0x20ebc>
   33148:	orrs	r3, r7, r9
   3314c:	beq	331a4 <__assert_fail@plt+0x20e18>
   33150:	ldr	r1, [pc, #452]	; 3331c <__assert_fail@plt+0x20f90>
   33154:	mov	r0, r6
   33158:	bl	3171c <__assert_fail@plt+0x1f390>
   3315c:	cmp	r0, #0
   33160:	beq	33200 <__assert_fail@plt+0x20e74>
   33164:	cmp	r7, #0
   33168:	beq	33190 <__assert_fail@plt+0x20e04>
   3316c:	mov	r2, sl
   33170:	ldr	r1, [pc, #424]	; 33320 <__assert_fail@plt+0x20f94>
   33174:	mov	r0, sp
   33178:	bl	1223c <sprintf@plt>
   3317c:	mov	r1, sp
   33180:	mov	r0, r6
   33184:	bl	3171c <__assert_fail@plt+0x1f390>
   33188:	cmp	r0, #0
   3318c:	beq	33204 <__assert_fail@plt+0x20e78>
   33190:	ldr	r1, [pc, #396]	; 33324 <__assert_fail@plt+0x20f98>
   33194:	mov	r0, r6
   33198:	bl	3171c <__assert_fail@plt+0x1f390>
   3319c:	cmp	r0, #0
   331a0:	beq	33200 <__assert_fail@plt+0x20e74>
   331a4:	ldr	r3, [r5, #8]
   331a8:	mov	r2, #2
   331ac:	ldr	r1, [pc, #372]	; 33328 <__assert_fail@plt+0x20f9c>
   331b0:	str	r2, [r3, #8]
   331b4:	mov	r0, r6
   331b8:	bl	3171c <__assert_fail@plt+0x1f390>
   331bc:	cmp	r0, #0
   331c0:	beq	33200 <__assert_fail@plt+0x20e74>
   331c4:	ldr	r3, [r5, #4]
   331c8:	cmp	r3, #0
   331cc:	movne	r4, #0
   331d0:	ldrne	r7, [pc, #340]	; 3332c <__assert_fail@plt+0x20fa0>
   331d4:	bne	331e8 <__assert_fail@plt+0x20e5c>
   331d8:	b	332dc <__assert_fail@plt+0x20f50>
   331dc:	ldr	r3, [r5, #4]
   331e0:	cmp	r4, r3
   331e4:	bcs	332dc <__assert_fail@plt+0x20f50>
   331e8:	mov	r1, r7
   331ec:	mov	r0, r6
   331f0:	bl	3171c <__assert_fail@plt+0x1f390>
   331f4:	add	r4, r4, #1
   331f8:	cmp	r0, #0
   331fc:	bne	331dc <__assert_fail@plt+0x20e50>
   33200:	mov	r0, #0
   33204:	add	sp, sp, #36	; 0x24
   33208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3320c:	mov	r0, r6
   33210:	bl	30fec <__assert_fail@plt+0x1ec60>
   33214:	subs	r4, r0, #0
   33218:	bne	330ec <__assert_fail@plt+0x20d60>
   3321c:	b	33200 <__assert_fail@plt+0x20e74>
   33220:	mov	r2, sl
   33224:	ldr	r1, [pc, #260]	; 33330 <__assert_fail@plt+0x20fa4>
   33228:	mov	r0, sp
   3322c:	bl	1223c <sprintf@plt>
   33230:	mov	r1, sp
   33234:	mov	r0, r6
   33238:	bl	3171c <__assert_fail@plt+0x1f390>
   3323c:	cmp	r0, #0
   33240:	bne	33128 <__assert_fail@plt+0x20d9c>
   33244:	b	33204 <__assert_fail@plt+0x20e78>
   33248:	ldr	r1, [pc, #204]	; 3331c <__assert_fail@plt+0x20f90>
   3324c:	mov	r0, r6
   33250:	bl	3171c <__assert_fail@plt+0x1f390>
   33254:	cmp	r0, #0
   33258:	beq	33200 <__assert_fail@plt+0x20e74>
   3325c:	ldr	r3, [sp, #72]	; 0x48
   33260:	cmp	r3, #0
   33264:	beq	332a0 <__assert_fail@plt+0x20f14>
   33268:	mov	r2, r3
   3326c:	ldr	r1, [pc, #192]	; 33334 <__assert_fail@plt+0x20fa8>
   33270:	mov	r0, sp
   33274:	bl	1223c <sprintf@plt>
   33278:	ldr	r1, [pc, #184]	; 33338 <__assert_fail@plt+0x20fac>
   3327c:	mov	r0, r6
   33280:	bl	3171c <__assert_fail@plt+0x1f390>
   33284:	cmp	r0, #0
   33288:	beq	33200 <__assert_fail@plt+0x20e74>
   3328c:	mov	r1, sp
   33290:	mov	r0, r6
   33294:	bl	3171c <__assert_fail@plt+0x1f390>
   33298:	cmp	r0, #0
   3329c:	beq	33200 <__assert_fail@plt+0x20e74>
   332a0:	cmp	r8, #0
   332a4:	beq	33164 <__assert_fail@plt+0x20dd8>
   332a8:	ldr	r1, [pc, #140]	; 3333c <__assert_fail@plt+0x20fb0>
   332ac:	mov	r0, r6
   332b0:	bl	3171c <__assert_fail@plt+0x1f390>
   332b4:	cmp	r0, #0
   332b8:	beq	33200 <__assert_fail@plt+0x20e74>
   332bc:	cmp	r9, #0
   332c0:	beq	332e4 <__assert_fail@plt+0x20f58>
   332c4:	ldr	r1, [pc, #116]	; 33340 <__assert_fail@plt+0x20fb4>
   332c8:	mov	r0, r6
   332cc:	bl	3171c <__assert_fail@plt+0x1f390>
   332d0:	cmp	r0, #0
   332d4:	bne	33164 <__assert_fail@plt+0x20dd8>
   332d8:	b	33200 <__assert_fail@plt+0x20e74>
   332dc:	mov	r0, #1
   332e0:	b	33204 <__assert_fail@plt+0x20e78>
   332e4:	mov	r1, r4
   332e8:	mov	r0, r6
   332ec:	bl	3171c <__assert_fail@plt+0x1f390>
   332f0:	cmp	r0, #0
   332f4:	beq	33200 <__assert_fail@plt+0x20e74>
   332f8:	ldr	r1, [pc, #44]	; 3332c <__assert_fail@plt+0x20fa0>
   332fc:	mov	r0, r6
   33300:	bl	3171c <__assert_fail@plt+0x1f390>
   33304:	cmp	r0, #0
   33308:	bne	33164 <__assert_fail@plt+0x20dd8>
   3330c:	b	33200 <__assert_fail@plt+0x20e74>
   33310:	andeq	r0, r5, r8, ror #26
   33314:	andeq	r0, r5, r0, ror #26
   33318:	strdeq	r0, [r5], -ip
   3331c:	andeq	r0, r5, r0, lsl #30
   33320:	andeq	r0, r5, r0, lsr #30
   33324:	andeq	r1, r5, r8, rrx
   33328:	andeq	sl, r4, r4, ror pc
   3332c:	andeq	r8, r4, ip, lsl ip
   33330:	andeq	r0, r5, r0, ror #29
   33334:	andeq	r0, r5, r4, lsr #30
   33338:	andeq	r0, r5, r4, lsl #30
   3333c:	andeq	r0, r5, ip, lsl #30
   33340:	andeq	r0, r5, r8, lsl pc
   33344:	push	{r4, r5, r6, r7, lr}
   33348:	mov	r4, r0
   3334c:	ldr	r0, [r0, #4]
   33350:	ldr	lr, [pc, #472]	; 33530 <__assert_fail@plt+0x211a4>
   33354:	ldr	ip, [pc, #472]	; 33534 <__assert_fail@plt+0x211a8>
   33358:	cmp	r3, #0
   3335c:	add	r0, r0, #2
   33360:	add	r5, r4, #8
   33364:	mov	r6, r1
   33368:	str	r0, [r4, #4]
   3336c:	movne	r1, lr
   33370:	moveq	r1, ip
   33374:	sub	sp, sp, #36	; 0x24
   33378:	mov	r0, r5
   3337c:	mov	r7, r2
   33380:	bl	32f48 <__assert_fail@plt+0x20bbc>
   33384:	cmp	r0, #0
   33388:	beq	333bc <__assert_fail@plt+0x21030>
   3338c:	cmp	r6, #0
   33390:	beq	333c8 <__assert_fail@plt+0x2103c>
   33394:	mov	r1, r6
   33398:	mov	r0, r5
   3339c:	bl	3171c <__assert_fail@plt+0x1f390>
   333a0:	cmp	r0, #0
   333a4:	beq	333bc <__assert_fail@plt+0x21030>
   333a8:	ldr	r1, [pc, #392]	; 33538 <__assert_fail@plt+0x211ac>
   333ac:	mov	r0, r5
   333b0:	bl	3171c <__assert_fail@plt+0x1f390>
   333b4:	cmp	r0, #0
   333b8:	bne	33464 <__assert_fail@plt+0x210d8>
   333bc:	mov	r0, #0
   333c0:	add	sp, sp, #36	; 0x24
   333c4:	pop	{r4, r5, r6, r7, pc}
   333c8:	mov	r2, r7
   333cc:	ldr	r1, [pc, #360]	; 3353c <__assert_fail@plt+0x211b0>
   333d0:	mov	r0, sp
   333d4:	bl	1223c <sprintf@plt>
   333d8:	mov	r1, sp
   333dc:	mov	r0, r5
   333e0:	bl	3171c <__assert_fail@plt+0x1f390>
   333e4:	cmp	r0, #0
   333e8:	beq	333c0 <__assert_fail@plt+0x21034>
   333ec:	ldr	r1, [pc, #324]	; 33538 <__assert_fail@plt+0x211ac>
   333f0:	mov	r0, r5
   333f4:	bl	3171c <__assert_fail@plt+0x1f390>
   333f8:	cmp	r0, #0
   333fc:	beq	333bc <__assert_fail@plt+0x21030>
   33400:	ldr	r3, [sp, #56]	; 0x38
   33404:	cmp	r3, #0
   33408:	bne	334f4 <__assert_fail@plt+0x21168>
   3340c:	ldr	r1, [pc, #300]	; 33540 <__assert_fail@plt+0x211b4>
   33410:	mov	r0, r5
   33414:	bl	3171c <__assert_fail@plt+0x1f390>
   33418:	cmp	r0, #0
   3341c:	beq	333bc <__assert_fail@plt+0x21030>
   33420:	ldrd	r2, [r4, #4]
   33424:	mov	r6, #0
   33428:	cmp	r2, r6
   3342c:	str	r6, [r3, #8]
   33430:	ldrne	r7, [pc, #268]	; 33544 <__assert_fail@plt+0x211b8>
   33434:	bne	33448 <__assert_fail@plt+0x210bc>
   33438:	b	334c4 <__assert_fail@plt+0x21138>
   3343c:	ldr	r3, [r4, #4]
   33440:	cmp	r6, r3
   33444:	bcs	334c4 <__assert_fail@plt+0x21138>
   33448:	mov	r1, r7
   3344c:	mov	r0, r5
   33450:	bl	3171c <__assert_fail@plt+0x1f390>
   33454:	add	r6, r6, #1
   33458:	cmp	r0, #0
   3345c:	bne	3343c <__assert_fail@plt+0x210b0>
   33460:	b	333bc <__assert_fail@plt+0x21030>
   33464:	ldr	r1, [pc, #220]	; 33548 <__assert_fail@plt+0x211bc>
   33468:	mov	r0, r5
   3346c:	bl	3171c <__assert_fail@plt+0x1f390>
   33470:	cmp	r0, #0
   33474:	beq	333bc <__assert_fail@plt+0x21030>
   33478:	ldr	r3, [sp, #56]	; 0x38
   3347c:	mov	r6, sp
   33480:	cmp	r3, #0
   33484:	bne	334cc <__assert_fail@plt+0x21140>
   33488:	mov	r2, r7
   3348c:	ldr	r1, [pc, #184]	; 3354c <__assert_fail@plt+0x211c0>
   33490:	mov	r0, r6
   33494:	bl	1223c <sprintf@plt>
   33498:	mov	r1, r6
   3349c:	mov	r0, r5
   334a0:	bl	3171c <__assert_fail@plt+0x1f390>
   334a4:	cmp	r0, #0
   334a8:	beq	333bc <__assert_fail@plt+0x21030>
   334ac:	ldr	r1, [pc, #156]	; 33550 <__assert_fail@plt+0x211c4>
   334b0:	mov	r0, r5
   334b4:	bl	3171c <__assert_fail@plt+0x1f390>
   334b8:	cmp	r0, #0
   334bc:	bne	3340c <__assert_fail@plt+0x21080>
   334c0:	b	333bc <__assert_fail@plt+0x21030>
   334c4:	mov	r0, #1
   334c8:	b	333c0 <__assert_fail@plt+0x21034>
   334cc:	ldr	r2, [sp, #56]	; 0x38
   334d0:	ldr	r1, [pc, #124]	; 33554 <__assert_fail@plt+0x211c8>
   334d4:	mov	r0, r6
   334d8:	bl	1223c <sprintf@plt>
   334dc:	mov	r1, r6
   334e0:	mov	r0, r5
   334e4:	bl	3171c <__assert_fail@plt+0x1f390>
   334e8:	cmp	r0, #0
   334ec:	beq	333bc <__assert_fail@plt+0x21030>
   334f0:	b	33488 <__assert_fail@plt+0x210fc>
   334f4:	ldr	r1, [pc, #76]	; 33548 <__assert_fail@plt+0x211bc>
   334f8:	mov	r0, r5
   334fc:	bl	3171c <__assert_fail@plt+0x1f390>
   33500:	cmp	r0, #0
   33504:	beq	333bc <__assert_fail@plt+0x21030>
   33508:	ldr	r2, [sp, #56]	; 0x38
   3350c:	ldr	r1, [pc, #64]	; 33554 <__assert_fail@plt+0x211c8>
   33510:	mov	r0, sp
   33514:	bl	1223c <sprintf@plt>
   33518:	mov	r1, sp
   3351c:	mov	r0, r5
   33520:	bl	3171c <__assert_fail@plt+0x1f390>
   33524:	cmp	r0, #0
   33528:	bne	334ac <__assert_fail@plt+0x21120>
   3352c:	b	333bc <__assert_fail@plt+0x21030>
   33530:	andeq	r0, r5, r8, lsr #30
   33534:	andeq	r0, r5, r0, lsr pc
   33538:	strdeq	r0, [r5], -ip
   3353c:	andeq	r0, r5, r0, ror #29
   33540:	andeq	sl, r4, r4, ror pc
   33544:	andeq	r8, r4, ip, lsl ip
   33548:	andeq	r0, r5, r0, lsl #30
   3354c:	andeq	r0, r5, r0, lsr #30
   33550:	andeq	r1, r5, r8, rrx
   33554:	andeq	r0, r5, r8, lsr pc
   33558:	push	{r4, lr}
   3355c:	sub	sp, sp, #40	; 0x28
   33560:	lsl	r2, r1, #3
   33564:	mov	r4, r0
   33568:	ldr	r1, [pc, #24]	; 33588 <__assert_fail@plt+0x211fc>
   3356c:	mov	r0, sp
   33570:	bl	1223c <sprintf@plt>
   33574:	mov	r1, sp
   33578:	add	r0, r4, #8
   3357c:	bl	32f48 <__assert_fail@plt+0x20bbc>
   33580:	add	sp, sp, #40	; 0x28
   33584:	pop	{r4, pc}
   33588:	andeq	r0, r5, r4, asr #30
   3358c:	push	{r4, lr}
   33590:	cmp	r2, #0
   33594:	ldr	lr, [pc, #52]	; 335d0 <__assert_fail@plt+0x21244>
   33598:	ldr	ip, [pc, #52]	; 335d4 <__assert_fail@plt+0x21248>
   3359c:	sub	sp, sp, #40	; 0x28
   335a0:	lsl	r3, r1, #3
   335a4:	mov	r4, r0
   335a8:	movne	r2, lr
   335ac:	moveq	r2, ip
   335b0:	mov	r0, sp
   335b4:	ldr	r1, [pc, #28]	; 335d8 <__assert_fail@plt+0x2124c>
   335b8:	bl	1223c <sprintf@plt>
   335bc:	mov	r1, sp
   335c0:	add	r0, r4, #8
   335c4:	bl	32f48 <__assert_fail@plt+0x20bbc>
   335c8:	add	sp, sp, #40	; 0x28
   335cc:	pop	{r4, pc}
   335d0:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   335d4:	andeq	r9, r4, r4, lsr #5
   335d8:	andeq	r0, r5, ip, asr #30
   335dc:	add	r0, r0, #8
   335e0:	ldr	r1, [pc]	; 335e8 <__assert_fail@plt+0x2125c>
   335e4:	b	32f48 <__assert_fail@plt+0x20bbc>
   335e8:	andeq	r0, r5, r4, asr pc
   335ec:	add	r0, r0, #8
   335f0:	ldr	r1, [pc]	; 335f8 <__assert_fail@plt+0x2126c>
   335f4:	b	32f48 <__assert_fail@plt+0x20bbc>
   335f8:	andeq	r0, r5, ip, asr pc
   335fc:	sub	r3, r3, #7
   33600:	cmp	r3, #4
   33604:	push	{r4, r5, r6, lr}
   33608:	sub	sp, sp, #24
   3360c:	bhi	33670 <__assert_fail@plt+0x212e4>
   33610:	mov	r6, r2
   33614:	ldr	r2, [pc, #88]	; 33674 <__assert_fail@plt+0x212e8>
   33618:	add	r4, r0, #8
   3361c:	mov	r5, r1
   33620:	mov	r0, r4
   33624:	ldr	r1, [r2, r3, lsl #2]
   33628:	bl	32f48 <__assert_fail@plt+0x20bbc>
   3362c:	cmp	r0, #0
   33630:	beq	33650 <__assert_fail@plt+0x212c4>
   33634:	cmp	r5, #0
   33638:	beq	33658 <__assert_fail@plt+0x212cc>
   3363c:	mov	r1, r5
   33640:	mov	r0, r4
   33644:	bl	3171c <__assert_fail@plt+0x1f390>
   33648:	adds	r0, r0, #0
   3364c:	movne	r0, #1
   33650:	add	sp, sp, #24
   33654:	pop	{r4, r5, r6, pc}
   33658:	mov	r2, r6
   3365c:	add	r0, sp, #4
   33660:	ldr	r1, [pc, #16]	; 33678 <__assert_fail@plt+0x212ec>
   33664:	bl	1223c <sprintf@plt>
   33668:	add	r5, sp, #4
   3366c:	b	3363c <__assert_fail@plt+0x212b0>
   33670:	bl	1232c <abort@plt>
   33674:	andeq	r0, r5, r0, lsr #18
   33678:	andeq	r0, r5, r0, ror #29
   3367c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33680:	sub	sp, sp, #28
   33684:	mov	r4, r0
   33688:	ldr	r7, [sp, #68]	; 0x44
   3368c:	ldr	ip, [r0, #4]
   33690:	ldr	r0, [sp, #72]	; 0x48
   33694:	adds	r5, r7, #0
   33698:	movne	r5, #1
   3369c:	cmp	r0, #0
   336a0:	moveq	r0, r5
   336a4:	movne	r0, #0
   336a8:	add	ip, ip, #2
   336ac:	cmp	r0, #0
   336b0:	mov	r6, r1
   336b4:	mov	r8, r2
   336b8:	mov	r9, r3
   336bc:	str	ip, [r4, #4]
   336c0:	add	sl, r4, #8
   336c4:	moveq	fp, r0
   336c8:	bne	33778 <__assert_fail@plt+0x213ec>
   336cc:	cmp	r6, #0
   336d0:	beq	33790 <__assert_fail@plt+0x21404>
   336d4:	mov	r1, r6
   336d8:	mov	r0, sl
   336dc:	bl	32f48 <__assert_fail@plt+0x20bbc>
   336e0:	cmp	r0, #0
   336e4:	beq	3376c <__assert_fail@plt+0x213e0>
   336e8:	ldr	r2, [pc, #232]	; 337d8 <__assert_fail@plt+0x2144c>
   336ec:	cmp	r9, #0
   336f0:	movne	r9, r2
   336f4:	ldr	r1, [pc, #224]	; 337dc <__assert_fail@plt+0x21450>
   336f8:	ldr	r2, [sp, #64]	; 0x40
   336fc:	ldr	r3, [r4, #8]
   33700:	moveq	r9, r1
   33704:	orrs	r2, r7, r2
   33708:	moveq	r5, #0
   3370c:	mov	r2, #0
   33710:	cmp	r5, #0
   33714:	str	r9, [r3, #16]
   33718:	str	r2, [r3, #20]
   3371c:	str	r2, [r3, #24]
   33720:	bne	33738 <__assert_fail@plt+0x213ac>
   33724:	mov	r2, #2
   33728:	mov	r0, #1
   3372c:	str	r2, [r3, #8]
   33730:	add	sp, sp, #28
   33734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33738:	ldr	r1, [pc, #160]	; 337e0 <__assert_fail@plt+0x21454>
   3373c:	mov	r0, sl
   33740:	bl	3171c <__assert_fail@plt+0x1f390>
   33744:	cmp	r0, #0
   33748:	beq	3376c <__assert_fail@plt+0x213e0>
   3374c:	ldr	r3, [sp, #72]	; 0x48
   33750:	cmp	r3, #0
   33754:	beq	337a8 <__assert_fail@plt+0x2141c>
   33758:	mov	r0, sl
   3375c:	ldr	r1, [pc, #128]	; 337e4 <__assert_fail@plt+0x21458>
   33760:	bl	3171c <__assert_fail@plt+0x1f390>
   33764:	cmp	r0, #0
   33768:	bne	337d0 <__assert_fail@plt+0x21444>
   3376c:	mov	r0, #0
   33770:	add	sp, sp, #28
   33774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33778:	mov	r0, sl
   3377c:	bl	30fec <__assert_fail@plt+0x1ec60>
   33780:	subs	fp, r0, #0
   33784:	beq	3376c <__assert_fail@plt+0x213e0>
   33788:	cmp	r6, #0
   3378c:	bne	336d4 <__assert_fail@plt+0x21348>
   33790:	add	r0, sp, #4
   33794:	mov	r2, r8
   33798:	ldr	r1, [pc, #72]	; 337e8 <__assert_fail@plt+0x2145c>
   3379c:	mov	r6, r0
   337a0:	bl	1223c <sprintf@plt>
   337a4:	b	336d4 <__assert_fail@plt+0x21348>
   337a8:	mov	r1, fp
   337ac:	mov	r0, sl
   337b0:	bl	3171c <__assert_fail@plt+0x1f390>
   337b4:	cmp	r0, #0
   337b8:	beq	3376c <__assert_fail@plt+0x213e0>
   337bc:	mov	r0, sl
   337c0:	ldr	r1, [pc, #36]	; 337ec <__assert_fail@plt+0x21460>
   337c4:	bl	3171c <__assert_fail@plt+0x1f390>
   337c8:	cmp	r0, #0
   337cc:	beq	3376c <__assert_fail@plt+0x213e0>
   337d0:	ldr	r3, [r4, #8]
   337d4:	b	33724 <__assert_fail@plt+0x21398>
   337d8:	ldrdeq	r4, [r5], -ip
   337dc:	andeq	r0, r5, r8, ror #30
   337e0:	andeq	r0, r5, ip, lsl #30
   337e4:	andeq	r0, r5, r8, lsl pc
   337e8:	andeq	r0, r5, r0, ror #29
   337ec:	andeq	r8, r4, ip, lsl ip
   337f0:	push	{r4, r5, r6, r7, lr}
   337f4:	subs	r4, r1, #0
   337f8:	sub	sp, sp, #36	; 0x24
   337fc:	mov	r5, r0
   33800:	mov	r7, r3
   33804:	beq	338b0 <__assert_fail@plt+0x21524>
   33808:	add	r6, r5, #8
   3380c:	mov	r0, r6
   33810:	mov	r1, r4
   33814:	bl	32f48 <__assert_fail@plt+0x20bbc>
   33818:	cmp	r0, #0
   3381c:	beq	33898 <__assert_fail@plt+0x2150c>
   33820:	ldr	r0, [r5, #8]
   33824:	ldr	r2, [pc, #152]	; 338c4 <__assert_fail@plt+0x21538>
   33828:	cmp	r7, #0
   3382c:	ldr	r3, [pc, #148]	; 338c8 <__assert_fail@plt+0x2153c>
   33830:	movne	r1, #115	; 0x73
   33834:	movne	r3, r2
   33838:	moveq	r1, #117	; 0x75
   3383c:	str	r3, [r0, #16]
   33840:	mov	r2, r4
   33844:	ldr	r3, [r5, #16]
   33848:	str	r1, [sp]
   3384c:	ldr	r1, [pc, #120]	; 338cc <__assert_fail@plt+0x21540>
   33850:	ldr	r0, [r5]
   33854:	bl	120b0 <fprintf@plt>
   33858:	ldrd	r2, [r5, #4]
   3385c:	mov	r4, #0
   33860:	cmp	r2, r4
   33864:	str	r4, [r3, #8]
   33868:	ldrne	r7, [pc, #96]	; 338d0 <__assert_fail@plt+0x21544>
   3386c:	bne	33880 <__assert_fail@plt+0x214f4>
   33870:	b	338a4 <__assert_fail@plt+0x21518>
   33874:	ldr	r3, [r5, #4]
   33878:	cmp	r4, r3
   3387c:	bcs	338a4 <__assert_fail@plt+0x21518>
   33880:	mov	r1, r7
   33884:	mov	r0, r6
   33888:	bl	3171c <__assert_fail@plt+0x1f390>
   3388c:	add	r4, r4, #1
   33890:	cmp	r0, #0
   33894:	bne	33874 <__assert_fail@plt+0x214e8>
   33898:	mov	r0, #0
   3389c:	add	sp, sp, #36	; 0x24
   338a0:	pop	{r4, r5, r6, r7, pc}
   338a4:	mov	r0, #1
   338a8:	add	sp, sp, #36	; 0x24
   338ac:	pop	{r4, r5, r6, r7, pc}
   338b0:	add	r0, sp, #12
   338b4:	ldr	r1, [pc, #24]	; 338d4 <__assert_fail@plt+0x21548>
   338b8:	mov	r4, r0
   338bc:	bl	1223c <sprintf@plt>
   338c0:	b	33808 <__assert_fail@plt+0x2147c>
   338c4:	andeq	r0, r5, r4, ror pc
   338c8:	andeq	r0, r5, ip, ror pc
   338cc:	andeq	r0, r5, r4, lsl #31
   338d0:	andeq	r8, r4, ip, lsl ip
   338d4:	andeq	r0, r5, r0, ror #29
   338d8:	push	{r4, r5, r6, r7, r8, lr}
   338dc:	mov	r8, r2
   338e0:	ldr	r2, [r0, #8]
   338e4:	cmp	r2, #0
   338e8:	beq	339fc <__assert_fail@plt+0x21670>
   338ec:	mov	r7, r3
   338f0:	ldr	r3, [r2]
   338f4:	cmp	r3, #0
   338f8:	beq	339fc <__assert_fail@plt+0x21670>
   338fc:	add	r4, r0, #8
   33900:	mov	r5, r0
   33904:	mov	r0, r4
   33908:	bl	30fec <__assert_fail@plt+0x1ec60>
   3390c:	subs	r6, r0, #0
   33910:	beq	33930 <__assert_fail@plt+0x215a4>
   33914:	mov	r2, #6
   33918:	ldr	r1, [pc, #240]	; 33a10 <__assert_fail@plt+0x21684>
   3391c:	bl	12320 <strncmp@plt>
   33920:	cmp	r0, #0
   33924:	bne	33938 <__assert_fail@plt+0x215ac>
   33928:	adds	r6, r6, #6
   3392c:	bne	33938 <__assert_fail@plt+0x215ac>
   33930:	mov	r0, #0
   33934:	pop	{r4, r5, r6, r7, r8, pc}
   33938:	mov	r1, r6
   3393c:	mov	r0, r4
   33940:	bl	32f48 <__assert_fail@plt+0x20bbc>
   33944:	cmp	r0, #0
   33948:	beq	33930 <__assert_fail@plt+0x215a4>
   3394c:	cmp	r8, #0
   33950:	bne	339e4 <__assert_fail@plt+0x21658>
   33954:	cmp	r7, #2
   33958:	bhi	339dc <__assert_fail@plt+0x21650>
   3395c:	ldr	r3, [pc, #176]	; 33a14 <__assert_fail@plt+0x21688>
   33960:	ldr	r1, [r3, r7, lsl #2]
   33964:	mov	r0, r4
   33968:	bl	3168c <__assert_fail@plt+0x1f300>
   3396c:	cmp	r0, #0
   33970:	beq	33930 <__assert_fail@plt+0x215a4>
   33974:	mov	r0, r4
   33978:	bl	30fec <__assert_fail@plt+0x1ec60>
   3397c:	subs	r6, r0, #0
   33980:	beq	33930 <__assert_fail@plt+0x215a4>
   33984:	ldr	r3, [r5, #8]
   33988:	ldr	r3, [r3, #24]
   3398c:	cmp	r3, #0
   33990:	beq	339a8 <__assert_fail@plt+0x2161c>
   33994:	ldr	r1, [pc, #124]	; 33a18 <__assert_fail@plt+0x2168c>
   33998:	mov	r0, r4
   3399c:	bl	32dbc <__assert_fail@plt+0x20a30>
   339a0:	cmp	r0, #0
   339a4:	beq	33930 <__assert_fail@plt+0x215a4>
   339a8:	mov	r0, r4
   339ac:	mov	r1, r6
   339b0:	bl	32dbc <__assert_fail@plt+0x20a30>
   339b4:	cmp	r0, #0
   339b8:	beq	33930 <__assert_fail@plt+0x215a4>
   339bc:	ldr	r2, [r5, #8]
   339c0:	mov	r0, r6
   339c4:	ldr	r3, [r2, #24]
   339c8:	add	r3, r3, #1
   339cc:	str	r3, [r2, #24]
   339d0:	bl	11e10 <free@plt>
   339d4:	mov	r0, #1
   339d8:	pop	{r4, r5, r6, r7, r8, pc}
   339dc:	ldr	r1, [pc, #56]	; 33a1c <__assert_fail@plt+0x21690>
   339e0:	b	33964 <__assert_fail@plt+0x215d8>
   339e4:	ldr	r1, [pc, #52]	; 33a20 <__assert_fail@plt+0x21694>
   339e8:	mov	r0, r4
   339ec:	bl	3168c <__assert_fail@plt+0x1f300>
   339f0:	cmp	r0, #0
   339f4:	bne	33954 <__assert_fail@plt+0x215c8>
   339f8:	b	33930 <__assert_fail@plt+0x215a4>
   339fc:	ldr	r3, [pc, #32]	; 33a24 <__assert_fail@plt+0x21698>
   33a00:	ldr	r2, [pc, #32]	; 33a28 <__assert_fail@plt+0x2169c>
   33a04:	ldr	r1, [pc, #32]	; 33a2c <__assert_fail@plt+0x216a0>
   33a08:	ldr	r0, [pc, #32]	; 33a30 <__assert_fail@plt+0x216a4>
   33a0c:	bl	1238c <__assert_fail@plt>
   33a10:	andeq	r0, r5, r0, ror #26
   33a14:	andeq	r0, r5, ip, asr r9
   33a18:	andeq	r8, r4, r4, lsl lr
   33a1c:	muleq	r5, r8, pc	; <UNPREDICTABLE>
   33a20:	andeq	r0, r5, r8, ror #31
   33a24:	andeq	r0, r5, r4, lsr r9
   33a28:			; <UNDEFINED> instruction: 0x000008ba
   33a2c:	andeq	r0, r5, r8, ror fp
   33a30:			; <UNDEFINED> instruction: 0x00050fb4
   33a34:	cmp	r1, #4
   33a38:	push	{r4, lr}
   33a3c:	add	r4, r0, #8
   33a40:	sub	sp, sp, #40	; 0x28
   33a44:	beq	33a88 <__assert_fail@plt+0x216fc>
   33a48:	cmp	r1, #8
   33a4c:	beq	33a74 <__assert_fail@plt+0x216e8>
   33a50:	lsl	r2, r1, #3
   33a54:	mov	r0, sp
   33a58:	ldr	r1, [pc, #60]	; 33a9c <__assert_fail@plt+0x21710>
   33a5c:	bl	1223c <sprintf@plt>
   33a60:	mov	r1, sp
   33a64:	mov	r0, r4
   33a68:	bl	32f48 <__assert_fail@plt+0x20bbc>
   33a6c:	add	sp, sp, #40	; 0x28
   33a70:	pop	{r4, pc}
   33a74:	mov	r0, r4
   33a78:	ldr	r1, [pc, #32]	; 33aa0 <__assert_fail@plt+0x21714>
   33a7c:	bl	32f48 <__assert_fail@plt+0x20bbc>
   33a80:	add	sp, sp, #40	; 0x28
   33a84:	pop	{r4, pc}
   33a88:	mov	r0, r4
   33a8c:	ldr	r1, [pc, #16]	; 33aa4 <__assert_fail@plt+0x21718>
   33a90:	bl	32f48 <__assert_fail@plt+0x20bbc>
   33a94:	add	sp, sp, #40	; 0x28
   33a98:	pop	{r4, pc}
   33a9c:	andeq	r1, r5, r4
   33aa0:	strdeq	r0, [r5], -ip
   33aa4:	strdeq	r0, [r5], -r4
   33aa8:	push	{r4, lr}
   33aac:	mov	r4, r0
   33ab0:	bl	33a34 <__assert_fail@plt+0x216a8>
   33ab4:	cmp	r0, #0
   33ab8:	popeq	{r4, pc}
   33abc:	add	r0, r4, #8
   33ac0:	ldr	r1, [pc, #4]	; 33acc <__assert_fail@plt+0x21740>
   33ac4:	pop	{r4, lr}
   33ac8:	b	3168c <__assert_fail@plt+0x1f300>
   33acc:	andeq	r1, r5, ip
   33ad0:	ldr	r3, [r0, #12]
   33ad4:	cmp	r3, #0
   33ad8:	bgt	33ae4 <__assert_fail@plt+0x21758>
   33adc:	mov	r0, #1
   33ae0:	bx	lr
   33ae4:	ldr	r3, [r0, #8]
   33ae8:	push	{r4, r5, r6, r7, r8, r9, lr}
   33aec:	mov	r4, r0
   33af0:	mov	r7, #0
   33af4:	sub	sp, sp, #28
   33af8:	ldr	r2, [r3, #20]
   33afc:	mov	r5, r1
   33b00:	ldr	r3, [r0, #16]
   33b04:	ldr	r1, [pc, #360]	; 33c74 <__assert_fail@plt+0x218e8>
   33b08:	str	r7, [r0, #12]
   33b0c:	ldr	r0, [r0]
   33b10:	bl	120b0 <fprintf@plt>
   33b14:	ldr	r3, [r4, #8]
   33b18:	ldr	r6, [pc, #344]	; 33c78 <__assert_fail@plt+0x218ec>
   33b1c:	ldr	r0, [r3, #20]
   33b20:	bl	11e10 <free@plt>
   33b24:	mov	r2, r5
   33b28:	ldr	r1, [pc, #332]	; 33c7c <__assert_fail@plt+0x218f0>
   33b2c:	mov	r0, sp
   33b30:	bl	1223c <sprintf@plt>
   33b34:	mov	r1, r7
   33b38:	mov	r2, #16
   33b3c:	mov	r0, sp
   33b40:	ldr	r8, [r4, #20]
   33b44:	ldr	r9, [r4, #24]
   33b48:	ldr	r5, [r4]
   33b4c:	bl	11d8c <bfd_scan_vma@plt>
   33b50:	mov	r2, r9
   33b54:	ldr	r1, [pc, #292]	; 33c80 <__assert_fail@plt+0x218f4>
   33b58:	str	r7, [r6]
   33b5c:	str	r0, [r6, #4]
   33b60:	mov	r0, r8
   33b64:	bl	122f0 <bfd_map_over_sections@plt>
   33b68:	ldr	r3, [r6]
   33b6c:	cmp	r3, r7
   33b70:	bne	33c28 <__assert_fail@plt+0x2189c>
   33b74:	mov	r3, r5
   33b78:	mov	r2, #2
   33b7c:	mov	r1, #1
   33b80:	ldr	r0, [pc, #252]	; 33c84 <__assert_fail@plt+0x218f8>
   33b84:	bl	11f24 <fwrite@plt>
   33b88:	mov	r6, r4
   33b8c:	ldr	r3, [r6, #8]!
   33b90:	ldr	r5, [r3, #12]
   33b94:	ldr	r7, [r3, #16]
   33b98:	cmp	r5, #0
   33b9c:	beq	33c3c <__assert_fail@plt+0x218b0>
   33ba0:	ldrb	r3, [r5]
   33ba4:	cmp	r3, #0
   33ba8:	movne	r8, #109	; 0x6d
   33bac:	beq	33c50 <__assert_fail@plt+0x218c4>
   33bb0:	mov	r0, r6
   33bb4:	bl	30fec <__assert_fail@plt+0x1ec60>
   33bb8:	subs	r3, r0, #0
   33bbc:	beq	33c68 <__assert_fail@plt+0x218dc>
   33bc0:	mov	r2, r8
   33bc4:	ldr	r1, [pc, #188]	; 33c88 <__assert_fail@plt+0x218fc>
   33bc8:	ldr	r0, [r4]
   33bcc:	bl	120b0 <fprintf@plt>
   33bd0:	cmp	r7, #0
   33bd4:	beq	33bec <__assert_fail@plt+0x21860>
   33bd8:	ldr	r3, [r4]
   33bdc:	mov	r2, #6
   33be0:	mov	r1, #1
   33be4:	ldr	r0, [pc, #160]	; 33c8c <__assert_fail@plt+0x21900>
   33be8:	bl	11f24 <fwrite@plt>
   33bec:	cmp	r5, #0
   33bf0:	ldr	r1, [r4]
   33bf4:	beq	33c14 <__assert_fail@plt+0x21888>
   33bf8:	mov	r0, r1
   33bfc:	mov	r2, r5
   33c00:	ldr	r1, [pc, #136]	; 33c90 <__assert_fail@plt+0x21904>
   33c04:	bl	120b0 <fprintf@plt>
   33c08:	mov	r0, r5
   33c0c:	bl	11e10 <free@plt>
   33c10:	ldr	r1, [r4]
   33c14:	mov	r0, #10
   33c18:	bl	1220c <fputc@plt>
   33c1c:	mov	r0, #1
   33c20:	add	sp, sp, #28
   33c24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33c28:	ldr	r2, [r6, #8]
   33c2c:	mov	r0, r5
   33c30:	ldr	r1, [pc, #92]	; 33c94 <__assert_fail@plt+0x21908>
   33c34:	bl	120b0 <fprintf@plt>
   33c38:	b	33b88 <__assert_fail@plt+0x217fc>
   33c3c:	ldr	r1, [pc, #84]	; 33c98 <__assert_fail@plt+0x2190c>
   33c40:	mov	r0, r6
   33c44:	bl	3171c <__assert_fail@plt+0x1f390>
   33c48:	cmp	r0, #0
   33c4c:	beq	33c68 <__assert_fail@plt+0x218dc>
   33c50:	mov	r0, r6
   33c54:	bl	30fec <__assert_fail@plt+0x1ec60>
   33c58:	mov	r5, #0
   33c5c:	mov	r8, #102	; 0x66
   33c60:	subs	r3, r0, #0
   33c64:	bne	33bc0 <__assert_fail@plt+0x21834>
   33c68:	mov	r0, #0
   33c6c:	add	sp, sp, #28
   33c70:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33c74:	andeq	r1, r5, r8, lsl r0
   33c78:	andeq	r9, r6, ip, asr ip
   33c7c:	andeq	r0, r5, r8, lsr fp
   33c80:	andeq	r0, r3, r4, ror #30
   33c84:	andeq	r1, r5, r0, lsr #32
   33c88:	andeq	r1, r5, r4, lsr #32
   33c8c:	ldrdeq	r0, [r5], -ip
   33c90:	strdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   33c94:	andeq	r0, r5, r4, lsr #30
   33c98:	andeq	ip, r4, r8, asr r6
   33c9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   33ca0:	mov	r8, r1
   33ca4:	ldr	r1, [r0, #8]
   33ca8:	sub	sp, sp, #28
   33cac:	cmp	r1, #0
   33cb0:	beq	33ed4 <__assert_fail@plt+0x21b48>
   33cb4:	mov	r5, r3
   33cb8:	ldr	r3, [r1]
   33cbc:	cmp	r3, #0
   33cc0:	beq	33ed4 <__assert_fail@plt+0x21b48>
   33cc4:	ldr	r1, [pc, #560]	; 33efc <__assert_fail@plt+0x21b70>
   33cc8:	mov	r4, r0
   33ccc:	mov	r7, r2
   33cd0:	bl	317a8 <__assert_fail@plt+0x1f41c>
   33cd4:	cmp	r0, #0
   33cd8:	bne	33ce4 <__assert_fail@plt+0x21958>
   33cdc:	add	sp, sp, #28
   33ce0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33ce4:	add	r6, r4, #8
   33ce8:	mov	r0, r6
   33cec:	bl	30fec <__assert_fail@plt+0x1ec60>
   33cf0:	subs	r9, r0, #0
   33cf4:	beq	33d14 <__assert_fail@plt+0x21988>
   33cf8:	mov	r2, #6
   33cfc:	ldr	r1, [pc, #508]	; 33f00 <__assert_fail@plt+0x21b74>
   33d00:	bl	12320 <strncmp@plt>
   33d04:	cmp	r0, #0
   33d08:	bne	33d20 <__assert_fail@plt+0x21994>
   33d0c:	adds	r9, r9, #6
   33d10:	bne	33d20 <__assert_fail@plt+0x21994>
   33d14:	mov	r0, #0
   33d18:	add	sp, sp, #28
   33d1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33d20:	mov	r1, r9
   33d24:	mov	r0, r6
   33d28:	bl	32f48 <__assert_fail@plt+0x20bbc>
   33d2c:	cmp	r0, #0
   33d30:	beq	33d14 <__assert_fail@plt+0x21988>
   33d34:	cmp	r7, #0
   33d38:	bne	33e64 <__assert_fail@plt+0x21ad8>
   33d3c:	cmp	r5, #2
   33d40:	bls	33e54 <__assert_fail@plt+0x21ac8>
   33d44:	ldr	r1, [pc, #440]	; 33f04 <__assert_fail@plt+0x21b78>
   33d48:	mov	r0, r6
   33d4c:	bl	3168c <__assert_fail@plt+0x1f300>
   33d50:	cmp	r0, #0
   33d54:	beq	33d14 <__assert_fail@plt+0x21988>
   33d58:	cmp	r8, #0
   33d5c:	bne	33e84 <__assert_fail@plt+0x21af8>
   33d60:	ldr	r3, [r4, #8]
   33d64:	mov	r1, #123	; 0x7b
   33d68:	ldr	r3, [r3]
   33d6c:	ldr	r5, [r3, #4]
   33d70:	mov	r0, r5
   33d74:	bl	12098 <strchr@plt>
   33d78:	cmp	r0, #0
   33d7c:	beq	33ee8 <__assert_fail@plt+0x21b5c>
   33d80:	sub	r7, r0, #1
   33d84:	cmp	r5, r7
   33d88:	beq	33db8 <__assert_fail@plt+0x21a2c>
   33d8c:	ldrb	r3, [r5]
   33d90:	cmp	r3, #58	; 0x3a
   33d94:	beq	33e7c <__assert_fail@plt+0x21af0>
   33d98:	mov	r3, r5
   33d9c:	sub	r0, r0, #2
   33da0:	b	33db0 <__assert_fail@plt+0x21a24>
   33da4:	ldrb	r2, [r3, #1]!
   33da8:	cmp	r2, #58	; 0x3a
   33dac:	beq	33e7c <__assert_fail@plt+0x21af0>
   33db0:	cmp	r3, r0
   33db4:	bne	33da4 <__assert_fail@plt+0x21a18>
   33db8:	ldr	r1, [pc, #328]	; 33f08 <__assert_fail@plt+0x21b7c>
   33dbc:	mov	r0, r6
   33dc0:	bl	3168c <__assert_fail@plt+0x1f300>
   33dc4:	cmp	r0, #0
   33dc8:	beq	33d14 <__assert_fail@plt+0x21988>
   33dcc:	mov	r0, r6
   33dd0:	bl	30fec <__assert_fail@plt+0x1ec60>
   33dd4:	subs	r5, r0, #0
   33dd8:	beq	33d14 <__assert_fail@plt+0x21988>
   33ddc:	ldr	r3, [r4, #8]
   33de0:	ldr	r0, [r3, #4]
   33de4:	bl	12074 <strlen@plt>
   33de8:	mov	r6, r0
   33dec:	mov	r0, r5
   33df0:	bl	12074 <strlen@plt>
   33df4:	add	r0, r6, r0
   33df8:	add	r0, r0, #1
   33dfc:	bl	11f3c <xmalloc@plt>
   33e00:	ldr	r8, [r4, #8]
   33e04:	ldr	r1, [r8, #4]
   33e08:	sub	r2, r7, r1
   33e0c:	mov	r6, r0
   33e10:	bl	11e40 <memcpy@plt>
   33e14:	ldr	r0, [r8, #4]
   33e18:	mov	r1, r5
   33e1c:	sub	r0, r7, r0
   33e20:	add	r0, r6, r0
   33e24:	bl	11f6c <strcpy@plt>
   33e28:	mov	r1, r7
   33e2c:	mov	r0, r6
   33e30:	bl	11f30 <strcat@plt>
   33e34:	ldr	r0, [r8, #4]
   33e38:	bl	11e10 <free@plt>
   33e3c:	ldr	r3, [r4, #8]
   33e40:	mov	r0, r5
   33e44:	str	r6, [r3, #4]
   33e48:	bl	11e10 <free@plt>
   33e4c:	mov	r0, #1
   33e50:	b	33cdc <__assert_fail@plt+0x21950>
   33e54:	ldr	r3, [pc, #176]	; 33f0c <__assert_fail@plt+0x21b80>
   33e58:	add	r5, r3, r5, lsl #2
   33e5c:	ldr	r1, [r5, #440]	; 0x1b8
   33e60:	b	33d48 <__assert_fail@plt+0x219bc>
   33e64:	ldr	r1, [pc, #164]	; 33f10 <__assert_fail@plt+0x21b84>
   33e68:	mov	r0, r6
   33e6c:	bl	3168c <__assert_fail@plt+0x1f300>
   33e70:	cmp	r0, #0
   33e74:	bne	33d3c <__assert_fail@plt+0x219b0>
   33e78:	b	33d14 <__assert_fail@plt+0x21988>
   33e7c:	ldr	r1, [pc, #144]	; 33f14 <__assert_fail@plt+0x21b88>
   33e80:	b	33dbc <__assert_fail@plt+0x21a30>
   33e84:	mov	r2, r8
   33e88:	ldr	r1, [pc, #136]	; 33f18 <__assert_fail@plt+0x21b8c>
   33e8c:	mov	r0, sp
   33e90:	bl	1223c <sprintf@plt>
   33e94:	ldr	r1, [pc, #128]	; 33f1c <__assert_fail@plt+0x21b90>
   33e98:	mov	r0, r6
   33e9c:	bl	3171c <__assert_fail@plt+0x1f390>
   33ea0:	cmp	r0, #0
   33ea4:	beq	33d14 <__assert_fail@plt+0x21988>
   33ea8:	mov	r1, sp
   33eac:	mov	r0, r6
   33eb0:	bl	3171c <__assert_fail@plt+0x1f390>
   33eb4:	cmp	r0, #0
   33eb8:	beq	33d14 <__assert_fail@plt+0x21988>
   33ebc:	ldr	r1, [pc, #92]	; 33f20 <__assert_fail@plt+0x21b94>
   33ec0:	mov	r0, r6
   33ec4:	bl	3171c <__assert_fail@plt+0x1f390>
   33ec8:	cmp	r0, #0
   33ecc:	bne	33d60 <__assert_fail@plt+0x219d4>
   33ed0:	b	33d14 <__assert_fail@plt+0x21988>
   33ed4:	ldr	r3, [pc, #72]	; 33f24 <__assert_fail@plt+0x21b98>
   33ed8:	ldr	r2, [pc, #72]	; 33f28 <__assert_fail@plt+0x21b9c>
   33edc:	ldr	r1, [pc, #72]	; 33f2c <__assert_fail@plt+0x21ba0>
   33ee0:	ldr	r0, [pc, #72]	; 33f30 <__assert_fail@plt+0x21ba4>
   33ee4:	bl	1238c <__assert_fail@plt>
   33ee8:	ldr	r3, [pc, #52]	; 33f24 <__assert_fail@plt+0x21b98>
   33eec:	ldr	r2, [pc, #64]	; 33f34 <__assert_fail@plt+0x21ba8>
   33ef0:	ldr	r1, [pc, #52]	; 33f2c <__assert_fail@plt+0x21ba0>
   33ef4:	ldr	r0, [pc, #60]	; 33f38 <__assert_fail@plt+0x21bac>
   33ef8:	bl	1238c <__assert_fail@plt>
   33efc:	andeq	r9, r4, r4, lsr #5
   33f00:	andeq	r0, r5, r0, ror #26
   33f04:	muleq	r5, r8, pc	; <UNPREDICTABLE>
   33f08:	andeq	r1, r5, r8, lsr r0
   33f0c:	andeq	r0, r5, r4, lsr #15
   33f10:	andeq	r0, r5, r8, ror #31
   33f14:	andeq	r8, r4, r4, lsl lr
   33f18:	andeq	fp, r4, r8, lsl r7
   33f1c:	andeq	r1, r5, ip, lsr r0
   33f20:	andeq	r1, r5, r8, rrx
   33f24:	andeq	r0, r5, r8, asr #18
   33f28:	andeq	r0, r0, sp, lsr r5
   33f2c:	andeq	r0, r5, r8, ror fp
   33f30:			; <UNDEFINED> instruction: 0x00050fb4
   33f34:	andeq	r0, r0, r5, ror r5
   33f38:	andeq	r1, r5, r8, asr #32
   33f3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33f40:	add	r4, r0, #8
   33f44:	sub	sp, sp, #24
   33f48:	mov	r5, r1
   33f4c:	mov	r0, r4
   33f50:	ldr	r1, [pc, #304]	; 34088 <__assert_fail@plt+0x21cfc>
   33f54:	mov	r7, r2
   33f58:	mov	r6, r3
   33f5c:	bl	32f48 <__assert_fail@plt+0x20bbc>
   33f60:	cmp	r0, #0
   33f64:	beq	3406c <__assert_fail@plt+0x21ce0>
   33f68:	cmp	r5, #0
   33f6c:	beq	33f98 <__assert_fail@plt+0x21c0c>
   33f70:	mov	r1, r5
   33f74:	mov	r0, r4
   33f78:	bl	3171c <__assert_fail@plt+0x1f390>
   33f7c:	cmp	r0, #0
   33f80:	beq	3406c <__assert_fail@plt+0x21ce0>
   33f84:	ldr	r1, [pc, #256]	; 3408c <__assert_fail@plt+0x21d00>
   33f88:	mov	r0, r4
   33f8c:	bl	3171c <__assert_fail@plt+0x1f390>
   33f90:	cmp	r0, #0
   33f94:	beq	3406c <__assert_fail@plt+0x21ce0>
   33f98:	ldr	r1, [pc, #240]	; 34090 <__assert_fail@plt+0x21d04>
   33f9c:	mov	r0, r4
   33fa0:	bl	3171c <__assert_fail@plt+0x1f390>
   33fa4:	cmp	r0, #0
   33fa8:	beq	3406c <__assert_fail@plt+0x21ce0>
   33fac:	cmp	r7, #0
   33fb0:	beq	34058 <__assert_fail@plt+0x21ccc>
   33fb4:	ldr	r1, [r7]
   33fb8:	cmp	r1, #0
   33fbc:	beq	34078 <__assert_fail@plt+0x21cec>
   33fc0:	ldr	r8, [pc, #204]	; 34094 <__assert_fail@plt+0x21d08>
   33fc4:	ldr	sl, [pc, #204]	; 34098 <__assert_fail@plt+0x21d0c>
   33fc8:	ldr	r9, [pc, #204]	; 3409c <__assert_fail@plt+0x21d10>
   33fcc:	mov	r5, #0
   33fd0:	mov	r0, r4
   33fd4:	bl	3171c <__assert_fail@plt+0x1f390>
   33fd8:	mov	r1, r8
   33fdc:	cmp	r0, #0
   33fe0:	mov	r0, sp
   33fe4:	beq	3406c <__assert_fail@plt+0x21ce0>
   33fe8:	ldr	r3, [r6]
   33fec:	cmp	r3, r5
   33ff0:	mov	r2, r3
   33ff4:	beq	34028 <__assert_fail@plt+0x21c9c>
   33ff8:	bl	1223c <sprintf@plt>
   33ffc:	mov	r1, sl
   34000:	mov	r0, r4
   34004:	bl	3171c <__assert_fail@plt+0x1f390>
   34008:	mov	r1, sp
   3400c:	cmp	r0, #0
   34010:	mov	r0, r4
   34014:	beq	3406c <__assert_fail@plt+0x21ce0>
   34018:	bl	3171c <__assert_fail@plt+0x1f390>
   3401c:	cmp	r0, #0
   34020:	beq	3406c <__assert_fail@plt+0x21ce0>
   34024:	ldr	r5, [r6]
   34028:	ldr	r3, [r7, #4]
   3402c:	mov	r1, r9
   34030:	cmp	r3, #0
   34034:	mov	r0, r4
   34038:	add	r5, r5, #1
   3403c:	beq	34078 <__assert_fail@plt+0x21cec>
   34040:	bl	3171c <__assert_fail@plt+0x1f390>
   34044:	add	r6, r6, #4
   34048:	cmp	r0, #0
   3404c:	beq	3406c <__assert_fail@plt+0x21ce0>
   34050:	ldr	r1, [r7, #4]!
   34054:	b	33fd0 <__assert_fail@plt+0x21c44>
   34058:	ldr	r1, [pc, #64]	; 340a0 <__assert_fail@plt+0x21d14>
   3405c:	mov	r0, r4
   34060:	bl	3171c <__assert_fail@plt+0x1f390>
   34064:	cmp	r0, #0
   34068:	bne	34078 <__assert_fail@plt+0x21cec>
   3406c:	mov	r0, #0
   34070:	add	sp, sp, #24
   34074:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34078:	mov	r0, r4
   3407c:	ldr	r1, [pc, #32]	; 340a4 <__assert_fail@plt+0x21d18>
   34080:	bl	3171c <__assert_fail@plt+0x1f390>
   34084:	b	34070 <__assert_fail@plt+0x21ce4>
   34088:	andeq	r1, r5, r4, asr r0
   3408c:	andeq	r8, r4, ip, lsl ip
   34090:			; <UNDEFINED> instruction: 0x00050eb8
   34094:	andeq	fp, r4, r8, lsl #15
   34098:	andeq	r1, r5, ip, rrx
   3409c:	andeq	r8, r4, r4, lsl lr
   340a0:	andeq	r1, r5, ip, asr r0
   340a4:			; <UNDEFINED> instruction: 0x00050ebc
   340a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   340ac:	sub	sp, sp, #32
   340b0:	mov	r5, r0
   340b4:	mov	r8, r1
   340b8:	mov	r4, r2
   340bc:	mov	r7, r3
   340c0:	bl	33f3c <__assert_fail@plt+0x21bb0>
   340c4:	cmp	r0, #0
   340c8:	beq	34154 <__assert_fail@plt+0x21dc8>
   340cc:	cmp	r8, #0
   340d0:	beq	3415c <__assert_fail@plt+0x21dd0>
   340d4:	ldr	r1, [r5, #8]
   340d8:	ldr	r3, [r5, #16]
   340dc:	mov	r2, r8
   340e0:	ldr	r0, [r1, #4]
   340e4:	ldr	r1, [pc, #120]	; 34164 <__assert_fail@plt+0x21dd8>
   340e8:	str	r0, [sp]
   340ec:	ldr	r0, [r5]
   340f0:	bl	120b0 <fprintf@plt>
   340f4:	cmp	r4, #0
   340f8:	beq	34150 <__assert_fail@plt+0x21dc4>
   340fc:	ldr	r3, [r4]
   34100:	cmp	r3, #0
   34104:	beq	34150 <__assert_fail@plt+0x21dc4>
   34108:	ldr	sl, [pc, #88]	; 34168 <__assert_fail@plt+0x21ddc>
   3410c:	ldr	r9, [pc, #88]	; 3416c <__assert_fail@plt+0x21de0>
   34110:	sub	r7, r7, #4
   34114:	add	r6, sp, #8
   34118:	ldr	r2, [r7, #4]!
   3411c:	mov	r1, sl
   34120:	mov	r0, r6
   34124:	bl	1223c <sprintf@plt>
   34128:	str	r6, [sp, #4]
   3412c:	str	r8, [sp]
   34130:	mov	r1, r9
   34134:	ldr	r3, [r5, #16]
   34138:	ldr	r2, [r4]
   3413c:	ldr	r0, [r5]
   34140:	bl	120b0 <fprintf@plt>
   34144:	ldr	r3, [r4, #4]!
   34148:	cmp	r3, #0
   3414c:	bne	34118 <__assert_fail@plt+0x21d8c>
   34150:	mov	r0, #1
   34154:	add	sp, sp, #32
   34158:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3415c:	ldr	r8, [pc, #12]	; 34170 <__assert_fail@plt+0x21de4>
   34160:	b	340f4 <__assert_fail@plt+0x21d68>
   34164:	muleq	r5, ip, r0
   34168:	andeq	fp, r4, r8, lsl #15
   3416c:	andeq	r1, r5, r8, ror r0
   34170:	andeq	r1, r5, r0, ror r0
   34174:	push	{r4, r5, r6, r7, r8, r9, lr}
   34178:	add	r5, r0, #8
   3417c:	sub	sp, sp, #108	; 0x6c
   34180:	mov	r4, r0
   34184:	mov	r0, r5
   34188:	mov	r7, r1
   3418c:	mov	r6, r2
   34190:	mov	r9, r3
   34194:	bl	30fec <__assert_fail@plt+0x1ec60>
   34198:	subs	r8, r0, #0
   3419c:	beq	3424c <__assert_fail@plt+0x21ec0>
   341a0:	cmp	r7, #0
   341a4:	bne	34258 <__assert_fail@plt+0x21ecc>
   341a8:	cmn	r6, #1
   341ac:	beq	34294 <__assert_fail@plt+0x21f08>
   341b0:	add	r2, r6, #1
   341b4:	ldr	r1, [pc, #232]	; 342a4 <__assert_fail@plt+0x21f18>
   341b8:	add	r0, sp, #28
   341bc:	add	r6, sp, #52	; 0x34
   341c0:	bl	1223c <sprintf@plt>
   341c4:	add	r2, sp, #28
   341c8:	mov	r0, r6
   341cc:	ldr	r1, [pc, #212]	; 342a8 <__assert_fail@plt+0x21f1c>
   341d0:	bl	1223c <sprintf@plt>
   341d4:	mov	r1, r6
   341d8:	mov	r0, r4
   341dc:	bl	317a8 <__assert_fail@plt+0x1f41c>
   341e0:	cmp	r0, #0
   341e4:	beq	3424c <__assert_fail@plt+0x21ec0>
   341e8:	ldr	r1, [pc, #188]	; 342ac <__assert_fail@plt+0x21f20>
   341ec:	mov	r0, r8
   341f0:	bl	11d98 <strcmp@plt>
   341f4:	cmp	r0, #0
   341f8:	bne	34224 <__assert_fail@plt+0x21e98>
   341fc:	cmp	r9, #0
   34200:	moveq	r0, #1
   34204:	beq	34250 <__assert_fail@plt+0x21ec4>
   34208:	mov	r0, r5
   3420c:	ldr	r1, [pc, #156]	; 342b0 <__assert_fail@plt+0x21f24>
   34210:	bl	3171c <__assert_fail@plt+0x1f390>
   34214:	adds	r0, r0, #0
   34218:	movne	r0, #1
   3421c:	add	sp, sp, #108	; 0x6c
   34220:	pop	{r4, r5, r6, r7, r8, r9, pc}
   34224:	ldr	r1, [pc, #136]	; 342b4 <__assert_fail@plt+0x21f28>
   34228:	mov	r0, r5
   3422c:	bl	3171c <__assert_fail@plt+0x1f390>
   34230:	cmp	r0, #0
   34234:	beq	3424c <__assert_fail@plt+0x21ec0>
   34238:	mov	r1, r8
   3423c:	mov	r0, r5
   34240:	bl	3171c <__assert_fail@plt+0x1f390>
   34244:	cmp	r0, #0
   34248:	bne	341fc <__assert_fail@plt+0x21e70>
   3424c:	mov	r0, #0
   34250:	add	sp, sp, #108	; 0x6c
   34254:	pop	{r4, r5, r6, r7, r8, r9, pc}
   34258:	mov	r2, r7
   3425c:	add	r0, sp, #4
   34260:	ldr	r1, [pc, #60]	; 342a4 <__assert_fail@plt+0x21f18>
   34264:	bl	1223c <sprintf@plt>
   34268:	mov	r2, r6
   3426c:	add	r0, sp, #28
   34270:	ldr	r1, [pc, #44]	; 342a4 <__assert_fail@plt+0x21f18>
   34274:	add	r6, sp, #52	; 0x34
   34278:	bl	1223c <sprintf@plt>
   3427c:	add	r3, sp, #28
   34280:	add	r2, sp, #4
   34284:	mov	r0, r6
   34288:	ldr	r1, [pc, #40]	; 342b8 <__assert_fail@plt+0x21f2c>
   3428c:	bl	1223c <sprintf@plt>
   34290:	b	341d4 <__assert_fail@plt+0x21e48>
   34294:	ldr	r3, [pc, #32]	; 342bc <__assert_fail@plt+0x21f30>
   34298:	add	r6, sp, #52	; 0x34
   3429c:	str	r3, [sp, #52]	; 0x34
   342a0:	b	341d4 <__assert_fail@plt+0x21e48>
   342a4:	andeq	fp, r4, r8, lsl #15
   342a8:	strheq	r1, [r5], -r8
   342ac:	andeq	r1, r5, ip, asr #1
   342b0:	ldrdeq	r1, [r5], -r0
   342b4:	andeq	r8, r4, ip, ror sp
   342b8:	andeq	r1, r5, r0, asr #1
   342bc:	subseq	r5, sp, ip, ror fp
   342c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   342c4:	mov	r8, r1
   342c8:	ldr	r1, [r0, #8]
   342cc:	sub	sp, sp, #24
   342d0:	cmp	r1, #0
   342d4:	ldr	r5, [sp, #64]	; 0x40
   342d8:	beq	34508 <__assert_fail@plt+0x2217c>
   342dc:	mov	r7, r2
   342e0:	ldr	r2, [r1]
   342e4:	cmp	r2, #0
   342e8:	beq	344f4 <__assert_fail@plt+0x22168>
   342ec:	mov	r6, r3
   342f0:	ldr	r3, [sp, #56]	; 0x38
   342f4:	mov	r4, r0
   342f8:	cmp	r3, #0
   342fc:	bne	343ac <__assert_fail@plt+0x22020>
   34300:	cmp	r6, #0
   34304:	bne	343c8 <__assert_fail@plt+0x2203c>
   34308:	ldr	r3, [r4, #8]
   3430c:	cmp	r5, #0
   34310:	ldr	r3, [r3]
   34314:	bne	343a0 <__assert_fail@plt+0x22014>
   34318:	ldr	r1, [r3, #12]
   3431c:	mov	r0, r4
   34320:	bl	317a8 <__assert_fail@plt+0x1f41c>
   34324:	cmp	r0, #0
   34328:	beq	34394 <__assert_fail@plt+0x22008>
   3432c:	add	r6, r4, #8
   34330:	mov	r0, r6
   34334:	bl	30fec <__assert_fail@plt+0x1ec60>
   34338:	subs	r9, r0, #0
   3433c:	beq	34394 <__assert_fail@plt+0x22008>
   34340:	cmp	r5, #0
   34344:	beq	343e0 <__assert_fail@plt+0x22054>
   34348:	mov	r0, r6
   3434c:	bl	30fec <__assert_fail@plt+0x1ec60>
   34350:	subs	sl, r0, #0
   34354:	beq	34394 <__assert_fail@plt+0x22008>
   34358:	mov	r1, r7
   3435c:	mov	r0, r4
   34360:	bl	31fb4 <__assert_fail@plt+0x1fc28>
   34364:	cmp	r0, #0
   34368:	beq	34394 <__assert_fail@plt+0x22008>
   3436c:	mov	r1, r9
   34370:	mov	r0, r6
   34374:	bl	3171c <__assert_fail@plt+0x1f390>
   34378:	cmp	r0, #0
   3437c:	beq	34394 <__assert_fail@plt+0x22008>
   34380:	ldr	r1, [pc, #404]	; 3451c <__assert_fail@plt+0x22190>
   34384:	mov	r0, r6
   34388:	bl	3171c <__assert_fail@plt+0x1f390>
   3438c:	cmp	r0, #0
   34390:	bne	343e8 <__assert_fail@plt+0x2205c>
   34394:	mov	r0, #0
   34398:	add	sp, sp, #24
   3439c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   343a0:	ldr	r3, [r3]
   343a4:	ldr	r1, [r3, #12]
   343a8:	b	3431c <__assert_fail@plt+0x21f90>
   343ac:	ldr	r1, [pc, #364]	; 34520 <__assert_fail@plt+0x22194>
   343b0:	add	r0, r0, #8
   343b4:	bl	3171c <__assert_fail@plt+0x1f390>
   343b8:	cmp	r0, #0
   343bc:	beq	34394 <__assert_fail@plt+0x22008>
   343c0:	cmp	r6, #0
   343c4:	beq	34308 <__assert_fail@plt+0x21f7c>
   343c8:	ldr	r1, [pc, #340]	; 34524 <__assert_fail@plt+0x22198>
   343cc:	add	r0, r4, #8
   343d0:	bl	3171c <__assert_fail@plt+0x1f390>
   343d4:	cmp	r0, #0
   343d8:	bne	34308 <__assert_fail@plt+0x21f7c>
   343dc:	b	34394 <__assert_fail@plt+0x22008>
   343e0:	mov	sl, r5
   343e4:	b	34358 <__assert_fail@plt+0x21fcc>
   343e8:	mov	r1, r8
   343ec:	mov	r0, r6
   343f0:	bl	3171c <__assert_fail@plt+0x1f390>
   343f4:	cmp	r0, #0
   343f8:	beq	34394 <__assert_fail@plt+0x22008>
   343fc:	ldr	r1, [pc, #292]	; 34528 <__assert_fail@plt+0x2219c>
   34400:	mov	r0, r6
   34404:	bl	3171c <__assert_fail@plt+0x1f390>
   34408:	cmp	r0, #0
   3440c:	beq	34394 <__assert_fail@plt+0x22008>
   34410:	ldr	r3, [sp, #60]	; 0x3c
   34414:	orrs	r3, r3, r5
   34418:	beq	34498 <__assert_fail@plt+0x2210c>
   3441c:	cmp	r5, #0
   34420:	beq	34460 <__assert_fail@plt+0x220d4>
   34424:	ldr	r1, [pc, #256]	; 3452c <__assert_fail@plt+0x221a0>
   34428:	mov	r0, r6
   3442c:	bl	3171c <__assert_fail@plt+0x1f390>
   34430:	cmp	r0, #0
   34434:	beq	34394 <__assert_fail@plt+0x22008>
   34438:	mov	r1, sl
   3443c:	mov	r0, r6
   34440:	bl	3171c <__assert_fail@plt+0x1f390>
   34444:	cmp	r0, #0
   34448:	beq	34394 <__assert_fail@plt+0x22008>
   3444c:	ldr	r1, [pc, #212]	; 34528 <__assert_fail@plt+0x2219c>
   34450:	mov	r0, r6
   34454:	bl	3171c <__assert_fail@plt+0x1f390>
   34458:	cmp	r0, #0
   3445c:	beq	34394 <__assert_fail@plt+0x22008>
   34460:	ldr	r2, [sp, #60]	; 0x3c
   34464:	ldr	r1, [pc, #196]	; 34530 <__assert_fail@plt+0x221a4>
   34468:	mov	r0, sp
   3446c:	bl	1223c <sprintf@plt>
   34470:	ldr	r1, [pc, #188]	; 34534 <__assert_fail@plt+0x221a8>
   34474:	mov	r0, r6
   34478:	bl	3171c <__assert_fail@plt+0x1f390>
   3447c:	cmp	r0, #0
   34480:	beq	34394 <__assert_fail@plt+0x22008>
   34484:	mov	r1, sp
   34488:	mov	r0, r6
   3448c:	bl	3171c <__assert_fail@plt+0x1f390>
   34490:	cmp	r0, #0
   34494:	beq	34394 <__assert_fail@plt+0x22008>
   34498:	ldr	r1, [pc, #152]	; 34538 <__assert_fail@plt+0x221ac>
   3449c:	mov	r0, r6
   344a0:	bl	3171c <__assert_fail@plt+0x1f390>
   344a4:	cmp	r0, #0
   344a8:	beq	34394 <__assert_fail@plt+0x22008>
   344ac:	ldr	r3, [r4, #4]
   344b0:	cmp	r3, #0
   344b4:	movne	r5, #0
   344b8:	ldrne	r7, [pc, #104]	; 34528 <__assert_fail@plt+0x2219c>
   344bc:	bne	344d4 <__assert_fail@plt+0x22148>
   344c0:	b	344ec <__assert_fail@plt+0x22160>
   344c4:	ldr	r3, [r4, #4]
   344c8:	add	r5, r5, #1
   344cc:	cmp	r5, r3
   344d0:	bcs	344ec <__assert_fail@plt+0x22160>
   344d4:	mov	r1, r7
   344d8:	mov	r0, r6
   344dc:	bl	3171c <__assert_fail@plt+0x1f390>
   344e0:	cmp	r0, #0
   344e4:	bne	344c4 <__assert_fail@plt+0x22138>
   344e8:	b	34394 <__assert_fail@plt+0x22008>
   344ec:	mov	r0, #1
   344f0:	b	34398 <__assert_fail@plt+0x2200c>
   344f4:	ldr	r3, [pc, #64]	; 3453c <__assert_fail@plt+0x221b0>
   344f8:	ldr	r2, [pc, #64]	; 34540 <__assert_fail@plt+0x221b4>
   344fc:	ldr	r1, [pc, #64]	; 34544 <__assert_fail@plt+0x221b8>
   34500:	ldr	r0, [pc, #64]	; 34548 <__assert_fail@plt+0x221bc>
   34504:	bl	1238c <__assert_fail@plt>
   34508:	ldr	r3, [pc, #44]	; 3453c <__assert_fail@plt+0x221b0>
   3450c:	ldr	r2, [pc, #56]	; 3454c <__assert_fail@plt+0x221c0>
   34510:	ldr	r1, [pc, #44]	; 34544 <__assert_fail@plt+0x221b8>
   34514:	ldr	r0, [pc, #52]	; 34550 <__assert_fail@plt+0x221c4>
   34518:	bl	1238c <__assert_fail@plt>
   3451c:	andeq	r0, r5, r4, lsl #28
   34520:	strdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   34524:	strdeq	r0, [r5], -ip
   34528:	andeq	r8, r4, ip, lsl ip
   3452c:	andeq	r1, r5, ip, ror #1
   34530:	andeq	fp, r4, r8, lsl r7
   34534:	andeq	r1, r5, r0, ror #1
   34538:	andeq	r0, r5, ip, ror lr
   3453c:	andeq	r0, r5, r8, ror #18
   34540:	andeq	r0, r0, sl, lsr #11
   34544:	andeq	r0, r5, r8, ror fp
   34548:			; <UNDEFINED> instruction: 0x00050db0
   3454c:	andeq	r0, r0, r9, lsr #11
   34550:	muleq	r5, r0, fp
   34554:	ldr	r3, [r0, #4]
   34558:	push	{r4, r5, r6, r7, lr}
   3455c:	cmp	r3, #0
   34560:	sub	sp, sp, #28
   34564:	mov	r5, r0
   34568:	mov	r6, r1
   3456c:	mov	r7, r2
   34570:	beq	34594 <__assert_fail@plt+0x22208>
   34574:	mov	r4, #0
   34578:	ldr	r1, [r5]
   3457c:	mov	r0, #32
   34580:	bl	12254 <putc@plt>
   34584:	ldr	r3, [r5, #4]
   34588:	add	r4, r4, #1
   3458c:	cmp	r4, r3
   34590:	bcc	34578 <__assert_fail@plt+0x221ec>
   34594:	mov	r2, r7
   34598:	mov	r0, sp
   3459c:	ldr	r1, [pc, #32]	; 345c4 <__assert_fail@plt+0x22238>
   345a0:	bl	1223c <sprintf@plt>
   345a4:	mov	r3, sp
   345a8:	mov	r2, r6
   345ac:	ldr	r0, [r5]
   345b0:	ldr	r1, [pc, #16]	; 345c8 <__assert_fail@plt+0x2223c>
   345b4:	bl	120b0 <fprintf@plt>
   345b8:	mov	r0, #1
   345bc:	add	sp, sp, #28
   345c0:	pop	{r4, r5, r6, r7, pc}
   345c4:	andeq	fp, r4, r8, lsl #15
   345c8:	strdeq	r1, [r5], -r8
   345cc:	push	{r4, r5, r6, r7, r8, lr}
   345d0:	mov	r5, r0
   345d4:	sub	sp, sp, #32
   345d8:	add	r0, r0, #8
   345dc:	mov	r7, r1
   345e0:	mov	r8, r2
   345e4:	bl	30fec <__assert_fail@plt+0x1ec60>
   345e8:	subs	r6, r0, #0
   345ec:	moveq	r0, r6
   345f0:	beq	34658 <__assert_fail@plt+0x222cc>
   345f4:	ldr	r3, [r5, #4]
   345f8:	cmp	r3, #0
   345fc:	beq	34620 <__assert_fail@plt+0x22294>
   34600:	mov	r4, #0
   34604:	ldr	r1, [r5]
   34608:	mov	r0, #32
   3460c:	bl	12254 <putc@plt>
   34610:	ldr	r3, [r5, #4]
   34614:	add	r4, r4, #1
   34618:	cmp	r4, r3
   3461c:	bcc	34604 <__assert_fail@plt+0x22278>
   34620:	add	r4, sp, #8
   34624:	mov	r2, r8
   34628:	ldr	r1, [pc, #48]	; 34660 <__assert_fail@plt+0x222d4>
   3462c:	mov	r0, r4
   34630:	bl	1223c <sprintf@plt>
   34634:	str	r4, [sp]
   34638:	mov	r3, r7
   3463c:	mov	r2, r6
   34640:	ldr	r1, [pc, #28]	; 34664 <__assert_fail@plt+0x222d8>
   34644:	ldr	r0, [r5]
   34648:	bl	120b0 <fprintf@plt>
   3464c:	mov	r0, r6
   34650:	bl	11e10 <free@plt>
   34654:	mov	r0, #1
   34658:	add	sp, sp, #32
   3465c:	pop	{r4, r5, r6, r7, r8, pc}
   34660:	andeq	fp, r4, r8, lsl #15
   34664:	andeq	r1, r5, ip, lsl #2
   34668:	ldr	r3, [r0, #4]
   3466c:	push	{r4, r5, r6, r7, lr}
   34670:	cmp	r3, #0
   34674:	sub	sp, sp, #36	; 0x24
   34678:	mov	r5, r0
   3467c:	mov	r6, r1
   34680:	mov	r7, r2
   34684:	beq	346a8 <__assert_fail@plt+0x2231c>
   34688:	mov	r4, #0
   3468c:	ldr	r1, [r5]
   34690:	mov	r0, #32
   34694:	bl	12254 <putc@plt>
   34698:	ldr	r3, [r5, #4]
   3469c:	add	r4, r4, #1
   346a0:	cmp	r4, r3
   346a4:	bcc	3468c <__assert_fail@plt+0x22300>
   346a8:	add	r4, sp, #8
   346ac:	mov	r2, r7
   346b0:	mov	r0, r4
   346b4:	ldr	r1, [pc, #36]	; 346e0 <__assert_fail@plt+0x22354>
   346b8:	bl	1223c <sprintf@plt>
   346bc:	str	r4, [sp]
   346c0:	mov	r2, r6
   346c4:	ldr	r3, [r5, #16]
   346c8:	ldr	r0, [r5]
   346cc:	ldr	r1, [pc, #16]	; 346e4 <__assert_fail@plt+0x22358>
   346d0:	bl	120b0 <fprintf@plt>
   346d4:	mov	r0, #1
   346d8:	add	sp, sp, #36	; 0x24
   346dc:	pop	{r4, r5, r6, r7, pc}
   346e0:	andeq	fp, r4, r8, lsl #15
   346e4:	andeq	r1, r5, r0, lsr #2
   346e8:	push	{r4, r5, r6, r7, r8, lr}
   346ec:	mov	r5, r0
   346f0:	sub	sp, sp, #32
   346f4:	add	r0, r0, #8
   346f8:	mov	r7, r1
   346fc:	mov	r8, r2
   34700:	bl	30fec <__assert_fail@plt+0x1ec60>
   34704:	subs	r6, r0, #0
   34708:	moveq	r0, r6
   3470c:	beq	34778 <__assert_fail@plt+0x223ec>
   34710:	ldr	r3, [r5, #4]
   34714:	cmp	r3, #0
   34718:	beq	3473c <__assert_fail@plt+0x223b0>
   3471c:	mov	r4, #0
   34720:	ldr	r1, [r5]
   34724:	mov	r0, #32
   34728:	bl	12254 <putc@plt>
   3472c:	ldr	r3, [r5, #4]
   34730:	add	r4, r4, #1
   34734:	cmp	r4, r3
   34738:	bcc	34720 <__assert_fail@plt+0x22394>
   3473c:	add	r4, sp, #8
   34740:	mov	r2, r8
   34744:	ldr	r1, [pc, #52]	; 34780 <__assert_fail@plt+0x223f4>
   34748:	mov	r0, r4
   3474c:	bl	1223c <sprintf@plt>
   34750:	str	r4, [sp, #4]
   34754:	str	r6, [sp]
   34758:	mov	r2, r7
   3475c:	ldr	r3, [r5, #16]
   34760:	ldr	r1, [pc, #28]	; 34784 <__assert_fail@plt+0x223f8>
   34764:	ldr	r0, [r5]
   34768:	bl	120b0 <fprintf@plt>
   3476c:	mov	r0, r6
   34770:	bl	11e10 <free@plt>
   34774:	mov	r0, #1
   34778:	add	sp, sp, #32
   3477c:	pop	{r4, r5, r6, r7, r8, pc}
   34780:	andeq	fp, r4, r8, lsl #15
   34784:	andeq	r1, r5, ip, asr #2
   34788:	ldr	r3, [r0, #8]
   3478c:	push	{r4, r5, r6, lr}
   34790:	cmp	r3, #0
   34794:	sub	sp, sp, #48	; 0x30
   34798:	beq	34858 <__assert_fail@plt+0x224cc>
   3479c:	mov	r6, r1
   347a0:	ldr	r1, [pc, #196]	; 3486c <__assert_fail@plt+0x224e0>
   347a4:	mov	r4, r0
   347a8:	mov	r5, r2
   347ac:	bl	317a8 <__assert_fail@plt+0x1f41c>
   347b0:	cmp	r0, #0
   347b4:	bne	347c0 <__assert_fail@plt+0x22434>
   347b8:	add	sp, sp, #48	; 0x30
   347bc:	pop	{r4, r5, r6, pc}
   347c0:	mov	r2, r6
   347c4:	ldr	r1, [pc, #164]	; 34870 <__assert_fail@plt+0x224e4>
   347c8:	mov	r0, sp
   347cc:	bl	1223c <sprintf@plt>
   347d0:	add	r4, r4, #8
   347d4:	mov	r2, r5
   347d8:	ldr	r1, [pc, #144]	; 34870 <__assert_fail@plt+0x224e4>
   347dc:	add	r0, sp, #24
   347e0:	bl	1223c <sprintf@plt>
   347e4:	mov	r0, r4
   347e8:	ldr	r1, [pc, #132]	; 34874 <__assert_fail@plt+0x224e8>
   347ec:	bl	3168c <__assert_fail@plt+0x1f300>
   347f0:	cmp	r0, #0
   347f4:	bne	34804 <__assert_fail@plt+0x22478>
   347f8:	mov	r0, #0
   347fc:	add	sp, sp, #48	; 0x30
   34800:	pop	{r4, r5, r6, pc}
   34804:	ldr	r1, [pc, #108]	; 34878 <__assert_fail@plt+0x224ec>
   34808:	mov	r0, r4
   3480c:	bl	3171c <__assert_fail@plt+0x1f390>
   34810:	cmp	r0, #0
   34814:	beq	347f8 <__assert_fail@plt+0x2246c>
   34818:	mov	r1, sp
   3481c:	mov	r0, r4
   34820:	bl	3171c <__assert_fail@plt+0x1f390>
   34824:	cmp	r0, #0
   34828:	beq	347f8 <__assert_fail@plt+0x2246c>
   3482c:	ldr	r1, [pc, #72]	; 3487c <__assert_fail@plt+0x224f0>
   34830:	mov	r0, r4
   34834:	bl	3171c <__assert_fail@plt+0x1f390>
   34838:	cmp	r0, #0
   3483c:	beq	347f8 <__assert_fail@plt+0x2246c>
   34840:	add	r1, sp, #24
   34844:	mov	r0, r4
   34848:	bl	3171c <__assert_fail@plt+0x1f390>
   3484c:	adds	r0, r0, #0
   34850:	movne	r0, #1
   34854:	b	347b8 <__assert_fail@plt+0x2242c>
   34858:	ldr	r3, [pc, #32]	; 34880 <__assert_fail@plt+0x224f4>
   3485c:	ldr	r2, [pc, #32]	; 34884 <__assert_fail@plt+0x224f8>
   34860:	ldr	r1, [pc, #32]	; 34888 <__assert_fail@plt+0x224fc>
   34864:	ldr	r0, [pc, #32]	; 3488c <__assert_fail@plt+0x22500>
   34868:	bl	1238c <__assert_fail@plt>
   3486c:	andeq	r9, r4, r4, lsr #5
   34870:	andeq	fp, r4, r8, lsl #15
   34874:	andeq	r1, r5, r8, ror r1
   34878:	andeq	r1, r5, r0, lsl #3
   3487c:	andeq	r8, r4, ip, ror sp
   34880:	andeq	r0, r5, r0, lsl #19
   34884:	andeq	r0, r0, r7, lsr #6
   34888:	andeq	r0, r5, r8, ror fp
   3488c:	muleq	r5, r0, fp
   34890:	push	{r4, r5, r6, r7, r8, lr}
   34894:	sub	sp, sp, #24
   34898:	mov	r7, r2
   3489c:	mov	r6, r3
   348a0:	mov	r5, r0
   348a4:	bl	317a8 <__assert_fail@plt+0x1f41c>
   348a8:	cmp	r0, #0
   348ac:	bne	348b8 <__assert_fail@plt+0x2252c>
   348b0:	add	sp, sp, #24
   348b4:	pop	{r4, r5, r6, r7, r8, pc}
   348b8:	add	r4, r5, #8
   348bc:	mov	r0, r4
   348c0:	ldr	r1, [pc, #300]	; 349f4 <__assert_fail@plt+0x22668>
   348c4:	bl	3171c <__assert_fail@plt+0x1f390>
   348c8:	cmp	r0, #0
   348cc:	beq	34914 <__assert_fail@plt+0x22588>
   348d0:	cmp	r6, #0
   348d4:	mov	r8, sp
   348d8:	beq	34934 <__assert_fail@plt+0x225a8>
   348dc:	mov	r2, r6
   348e0:	ldr	r1, [pc, #272]	; 349f8 <__assert_fail@plt+0x2266c>
   348e4:	mov	r0, r8
   348e8:	bl	1223c <sprintf@plt>
   348ec:	ldr	r1, [pc, #264]	; 349fc <__assert_fail@plt+0x22670>
   348f0:	mov	r0, r4
   348f4:	bl	3171c <__assert_fail@plt+0x1f390>
   348f8:	cmp	r0, #0
   348fc:	beq	34914 <__assert_fail@plt+0x22588>
   34900:	mov	r1, r8
   34904:	mov	r0, r4
   34908:	bl	3171c <__assert_fail@plt+0x1f390>
   3490c:	cmp	r0, #0
   34910:	bne	34920 <__assert_fail@plt+0x22594>
   34914:	mov	r0, #0
   34918:	add	sp, sp, #24
   3491c:	pop	{r4, r5, r6, r7, r8, pc}
   34920:	ldr	r1, [pc, #216]	; 34a00 <__assert_fail@plt+0x22674>
   34924:	mov	r0, r4
   34928:	bl	3171c <__assert_fail@plt+0x1f390>
   3492c:	cmp	r0, #0
   34930:	beq	34914 <__assert_fail@plt+0x22588>
   34934:	mov	r2, r7
   34938:	ldr	r1, [pc, #184]	; 349f8 <__assert_fail@plt+0x2266c>
   3493c:	mov	r0, r8
   34940:	bl	1223c <sprintf@plt>
   34944:	ldr	r1, [pc, #184]	; 34a04 <__assert_fail@plt+0x22678>
   34948:	mov	r0, r4
   3494c:	bl	3171c <__assert_fail@plt+0x1f390>
   34950:	cmp	r0, #0
   34954:	beq	34914 <__assert_fail@plt+0x22588>
   34958:	mov	r1, r8
   3495c:	mov	r0, r4
   34960:	bl	3171c <__assert_fail@plt+0x1f390>
   34964:	cmp	r0, #0
   34968:	beq	34914 <__assert_fail@plt+0x22588>
   3496c:	ldr	r1, [pc, #148]	; 34a08 <__assert_fail@plt+0x2267c>
   34970:	mov	r0, r4
   34974:	bl	3171c <__assert_fail@plt+0x1f390>
   34978:	cmp	r0, #0
   3497c:	beq	34914 <__assert_fail@plt+0x22588>
   34980:	ldr	r3, [r5, #4]
   34984:	cmp	r3, #0
   34988:	beq	349c0 <__assert_fail@plt+0x22634>
   3498c:	ldr	r7, [pc, #120]	; 34a0c <__assert_fail@plt+0x22680>
   34990:	mov	r6, #0
   34994:	b	349a4 <__assert_fail@plt+0x22618>
   34998:	ldr	r3, [r5, #4]
   3499c:	cmp	r6, r3
   349a0:	bcs	349c0 <__assert_fail@plt+0x22634>
   349a4:	mov	r1, r7
   349a8:	mov	r0, r4
   349ac:	bl	3171c <__assert_fail@plt+0x1f390>
   349b0:	add	r6, r6, #1
   349b4:	cmp	r0, #0
   349b8:	bne	34998 <__assert_fail@plt+0x2260c>
   349bc:	b	34914 <__assert_fail@plt+0x22588>
   349c0:	mov	r0, r4
   349c4:	bl	30fec <__assert_fail@plt+0x1ec60>
   349c8:	subs	r6, r0, #0
   349cc:	beq	34914 <__assert_fail@plt+0x22588>
   349d0:	mov	r0, r5
   349d4:	ldr	r1, [sp, #48]	; 0x30
   349d8:	bl	31fb4 <__assert_fail@plt+0x1fc28>
   349dc:	cmp	r0, #0
   349e0:	beq	34914 <__assert_fail@plt+0x22588>
   349e4:	mov	r1, r6
   349e8:	mov	r0, r4
   349ec:	bl	3171c <__assert_fail@plt+0x1f390>
   349f0:	b	348b0 <__assert_fail@plt+0x22524>
   349f4:	ldrdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   349f8:	andeq	fp, r4, r8, lsl r7
   349fc:	andeq	r1, r5, r4, lsl #3
   34a00:	andeq	r8, r4, r4, lsl lr
   34a04:	andeq	r1, r5, r0, asr #32
   34a08:	ldrdeq	r0, [r5], -r8
   34a0c:	andeq	r8, r4, ip, lsl ip
   34a10:	push	{r4, r5, lr}
   34a14:	sub	sp, sp, #36	; 0x24
   34a18:	mov	r4, r0
   34a1c:	ldr	lr, [sp, #52]	; 0x34
   34a20:	ldr	ip, [sp, #48]	; 0x30
   34a24:	mov	r0, #0
   34a28:	cmp	lr, #0
   34a2c:	str	r4, [sp]
   34a30:	mov	r5, r1
   34a34:	strd	r2, [sp, #20]
   34a38:	str	ip, [sp, #28]
   34a3c:	str	r0, [sp, #4]
   34a40:	str	r0, [sp, #8]
   34a44:	str	r0, [sp, #12]
   34a48:	str	r0, [sp, #16]
   34a4c:	bne	34a68 <__assert_fail@plt+0x226dc>
   34a50:	mov	r0, r1
   34a54:	mov	r2, sp
   34a58:	ldr	r1, [pc, #112]	; 34ad0 <__assert_fail@plt+0x22744>
   34a5c:	bl	3855c <__assert_fail@plt+0x261d0>
   34a60:	add	sp, sp, #36	; 0x24
   34a64:	pop	{r4, r5, pc}
   34a68:	mov	r3, r4
   34a6c:	mov	r2, #38	; 0x26
   34a70:	mov	r1, #1
   34a74:	ldr	r0, [pc, #88]	; 34ad4 <__assert_fail@plt+0x22748>
   34a78:	bl	11f24 <fwrite@plt>
   34a7c:	mov	r3, r4
   34a80:	mov	r2, #43	; 0x2b
   34a84:	mov	r1, #1
   34a88:	ldr	r0, [pc, #72]	; 34ad8 <__assert_fail@plt+0x2274c>
   34a8c:	bl	11f24 <fwrite@plt>
   34a90:	mov	r3, r4
   34a94:	mov	r2, #72	; 0x48
   34a98:	mov	r1, #1
   34a9c:	ldr	r0, [pc, #56]	; 34adc <__assert_fail@plt+0x22750>
   34aa0:	bl	11f24 <fwrite@plt>
   34aa4:	mov	r3, r4
   34aa8:	mov	r2, #47	; 0x2f
   34aac:	mov	r1, #1
   34ab0:	ldr	r0, [pc, #40]	; 34ae0 <__assert_fail@plt+0x22754>
   34ab4:	bl	11f24 <fwrite@plt>
   34ab8:	mov	r0, r5
   34abc:	mov	r2, sp
   34ac0:	ldr	r1, [pc, #28]	; 34ae4 <__assert_fail@plt+0x22758>
   34ac4:	bl	3855c <__assert_fail@plt+0x261d0>
   34ac8:	add	sp, sp, #36	; 0x24
   34acc:	pop	{r4, r5, pc}
   34ad0:	andeq	r0, r5, r0, asr #20
   34ad4:	muleq	r5, r0, r1
   34ad8:			; <UNDEFINED> instruction: 0x000511b8
   34adc:	andeq	r1, r5, r4, ror #3
   34ae0:	andeq	r1, r5, r0, lsr r2
   34ae4:	muleq	r5, r0, r9
   34ae8:	push	{r4, r5, r6, r7, r8, lr}
   34aec:	mov	r6, #0
   34af0:	ldr	r7, [pc, #48]	; 34b28 <__assert_fail@plt+0x2279c>
   34af4:	mov	r4, r7
   34af8:	add	r5, r7, #256	; 0x100
   34afc:	ldr	r0, [r4, #12]
   34b00:	cmp	r0, #0
   34b04:	beq	34b10 <__assert_fail@plt+0x22784>
   34b08:	bl	11e10 <free@plt>
   34b0c:	str	r6, [r4, #12]
   34b10:	add	r4, r4, #16
   34b14:	cmp	r4, r5
   34b18:	bne	34afc <__assert_fail@plt+0x22770>
   34b1c:	mov	r3, #0
   34b20:	str	r3, [r7, #256]	; 0x100
   34b24:	pop	{r4, r5, r6, r7, r8, pc}
   34b28:	andeq	r9, r6, r0, ror ip
   34b2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34b30:	mov	sl, r3
   34b34:	ldr	r5, [pc, #96]	; 34b9c <__assert_fail@plt+0x22810>
   34b38:	mov	r7, r0
   34b3c:	mov	r9, r1
   34b40:	ldr	r6, [r5, #256]	; 0x100
   34b44:	mov	r8, r2
   34b48:	lsl	r4, r6, #4
   34b4c:	add	r3, r5, r4
   34b50:	ldr	r0, [r3, #12]
   34b54:	cmp	r0, #0
   34b58:	beq	34b60 <__assert_fail@plt+0x227d4>
   34b5c:	bl	11e10 <free@plt>
   34b60:	add	r4, r5, r4
   34b64:	mov	r0, sl
   34b68:	str	r9, [r4, #4]
   34b6c:	str	r8, [r4, #8]
   34b70:	str	r7, [r5, r6, lsl #4]
   34b74:	bl	11f60 <xstrdup@plt>
   34b78:	ldr	r3, [r5, #256]	; 0x100
   34b7c:	add	r3, r3, #1
   34b80:	rsbs	r2, r3, #0
   34b84:	and	r2, r2, #15
   34b88:	and	r3, r3, #15
   34b8c:	rsbpl	r3, r2, #0
   34b90:	str	r3, [r5, #256]	; 0x100
   34b94:	str	r0, [r4, #12]
   34b98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34b9c:	andeq	r9, r6, r0, ror ip
   34ba0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34ba4:	mov	r2, #5
   34ba8:	ldr	r8, [pc, #280]	; 34cc8 <__assert_fail@plt+0x2293c>
   34bac:	ldr	r1, [pc, #280]	; 34ccc <__assert_fail@plt+0x22940>
   34bb0:	mov	r0, #0
   34bb4:	ldr	r4, [r8]
   34bb8:	bl	11ea0 <dcgettext@plt>
   34bbc:	ldr	r5, [pc, #268]	; 34cd0 <__assert_fail@plt+0x22944>
   34bc0:	ldr	fp, [pc, #268]	; 34cd4 <__assert_fail@plt+0x22948>
   34bc4:	ldr	sl, [pc, #268]	; 34cd8 <__assert_fail@plt+0x2294c>
   34bc8:	ldr	r9, [pc, #268]	; 34cdc <__assert_fail@plt+0x22950>
   34bcc:	mov	r1, r0
   34bd0:	mov	r0, r4
   34bd4:	bl	120b0 <fprintf@plt>
   34bd8:	ldr	r3, [r8]
   34bdc:	mov	r2, #30
   34be0:	mov	r1, #1
   34be4:	ldr	r0, [pc, #244]	; 34ce0 <__assert_fail@plt+0x22954>
   34be8:	bl	11f24 <fwrite@plt>
   34bec:	ldr	r4, [r5, #256]	; 0x100
   34bf0:	b	34c54 <__assert_fail@plt+0x228c8>
   34bf4:	ldr	r0, [r8]
   34bf8:	bl	120b0 <fprintf@plt>
   34bfc:	ldr	r2, [r6, #4]
   34c00:	mov	r1, fp
   34c04:	ldr	r0, [r8]
   34c08:	bl	120b0 <fprintf@plt>
   34c0c:	ldr	r2, [r6, #8]
   34c10:	mov	r1, sl
   34c14:	ldr	r0, [r8]
   34c18:	bl	120b0 <fprintf@plt>
   34c1c:	ldr	r3, [r5, r7]
   34c20:	cmp	r3, #0
   34c24:	bne	34ca4 <__assert_fail@plt+0x22918>
   34c28:	ldr	r1, [r8]
   34c2c:	mov	r0, #10
   34c30:	bl	1220c <fputc@plt>
   34c34:	add	r4, r4, #1
   34c38:	rsbs	r3, r4, #0
   34c3c:	and	r3, r3, #15
   34c40:	ldr	r2, [r5, #256]	; 0x100
   34c44:	and	r4, r4, #15
   34c48:	rsbpl	r4, r3, #0
   34c4c:	cmp	r2, r4
   34c50:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34c54:	lsl	r7, r4, #4
   34c58:	add	r6, r5, r7
   34c5c:	ldr	r3, [r6, #12]
   34c60:	cmp	r3, #0
   34c64:	beq	34c34 <__assert_fail@plt+0x228a8>
   34c68:	ldr	r0, [r5, r4, lsl #4]
   34c6c:	bl	11dc8 <bfd_get_stab_name@plt>
   34c70:	mov	r1, r9
   34c74:	subs	r2, r0, #0
   34c78:	bne	34bf4 <__assert_fail@plt+0x22868>
   34c7c:	ldr	ip, [r5, r7]
   34c80:	ldr	r1, [pc, #92]	; 34ce4 <__assert_fail@plt+0x22958>
   34c84:	cmp	ip, #0
   34c88:	mov	r2, #6
   34c8c:	ldr	r0, [pc, #84]	; 34ce8 <__assert_fail@plt+0x2295c>
   34c90:	ldr	r3, [r8]
   34c94:	bne	34cb8 <__assert_fail@plt+0x2292c>
   34c98:	mov	r1, #1
   34c9c:	bl	11f24 <fwrite@plt>
   34ca0:	b	34bfc <__assert_fail@plt+0x22870>
   34ca4:	ldr	r2, [r6, #12]
   34ca8:	ldr	r1, [pc, #60]	; 34cec <__assert_fail@plt+0x22960>
   34cac:	ldr	r0, [r8]
   34cb0:	bl	120b0 <fprintf@plt>
   34cb4:	b	34c28 <__assert_fail@plt+0x2289c>
   34cb8:	mov	r2, ip
   34cbc:	mov	r0, r3
   34cc0:	bl	120b0 <fprintf@plt>
   34cc4:	b	34bfc <__assert_fail@plt+0x22870>
   34cc8:	andeq	r7, r6, r8, lsl #3
   34ccc:			; <UNDEFINED> instruction: 0x000512bc
   34cd0:	andeq	r9, r6, r0, ror ip
   34cd4:	andeq	r1, r5, r0, lsl #6
   34cd8:	andeq	r1, r5, r8, lsl #6
   34cdc:	andeq	r9, r4, ip, asr r1
   34ce0:	andeq	r1, r5, r0, ror #5
   34ce4:	andeq	r9, r4, r0, lsl #3
   34ce8:	andeq	r9, r4, r8, ror r1
   34cec:	andeq	fp, r4, ip, asr #18
   34cf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34cf4:	sub	sp, sp, #108	; 0x6c
   34cf8:	mov	fp, r0
   34cfc:	str	r3, [sp, #72]	; 0x48
   34d00:	str	r1, [sp, #68]	; 0x44
   34d04:	str	r2, [sp, #56]	; 0x38
   34d08:	bl	36f0c <__assert_fail@plt+0x24b80>
   34d0c:	subs	r3, r0, #0
   34d10:	str	r3, [sp, #16]
   34d14:	beq	34df4 <__assert_fail@plt+0x22a68>
   34d18:	ldr	sl, [pc, #1612]	; 3536c <__assert_fail@plt+0x22fe0>
   34d1c:	ldr	r5, [pc, #1612]	; 35370 <__assert_fail@plt+0x22fe4>
   34d20:	ldr	r3, [pc, #1612]	; 35374 <__assert_fail@plt+0x22fe8>
   34d24:	mov	r9, fp
   34d28:	mov	fp, sl
   34d2c:	mov	r4, #0
   34d30:	str	r3, [sp, #20]
   34d34:	str	r4, [sp, #24]
   34d38:	ldr	r1, [sp, #20]
   34d3c:	mov	r0, r9
   34d40:	bl	11f84 <bfd_get_section_by_name@plt>
   34d44:	mov	r1, r5
   34d48:	mov	r7, r0
   34d4c:	mov	r0, r9
   34d50:	bl	11f84 <bfd_get_section_by_name@plt>
   34d54:	cmp	r7, #0
   34d58:	cmpne	r0, #0
   34d5c:	mov	r6, r0
   34d60:	bne	34e08 <__assert_fail@plt+0x22a7c>
   34d64:	ldr	r3, [pc, #1548]	; 35378 <__assert_fail@plt+0x22fec>
   34d68:	cmp	fp, r3
   34d6c:	beq	34d84 <__assert_fail@plt+0x229f8>
   34d70:	ldr	r3, [fp, #8]
   34d74:	ldr	r5, [fp, #12]
   34d78:	str	r3, [sp, #20]
   34d7c:	add	fp, fp, #8
   34d80:	b	34d38 <__assert_fail@plt+0x229ac>
   34d84:	ldr	r3, [sp, #24]
   34d88:	mov	fp, r9
   34d8c:	cmp	r3, #0
   34d90:	beq	34da8 <__assert_fail@plt+0x22a1c>
   34d94:	ldr	r1, [sp, #24]
   34d98:	ldr	r0, [sp, #16]
   34d9c:	bl	3e22c <__assert_fail@plt+0x2bea0>
   34da0:	cmp	r0, #0
   34da4:	beq	34df4 <__assert_fail@plt+0x22a68>
   34da8:	ldr	r3, [fp, #4]
   34dac:	ldr	r2, [r3, #4]
   34db0:	cmp	r2, #1
   34db4:	beq	35114 <__assert_fail@plt+0x22d88>
   34db8:	cmp	r4, #0
   34dbc:	bne	34dfc <__assert_fail@plt+0x22a70>
   34dc0:	ldr	r3, [fp, #4]
   34dc4:	ldr	r2, [sp, #56]	; 0x38
   34dc8:	ldr	r1, [r3, #4]
   34dcc:	cmp	r2, #0
   34dd0:	sub	r3, r1, #2
   34dd4:	clz	r3, r3
   34dd8:	lsr	r3, r3, #5
   34ddc:	movle	r3, #0
   34de0:	cmp	r3, #0
   34de4:	bne	352e0 <__assert_fail@plt+0x22f54>
   34de8:	ldr	r3, [sp, #72]	; 0x48
   34dec:	cmp	r3, #0
   34df0:	beq	352bc <__assert_fail@plt+0x22f30>
   34df4:	mov	r3, #0
   34df8:	str	r3, [sp, #16]
   34dfc:	ldr	r0, [sp, #16]
   34e00:	add	sp, sp, #108	; 0x6c
   34e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34e08:	ldr	r4, [r7, #36]	; 0x24
   34e0c:	mov	r0, r4
   34e10:	bl	11f3c <xmalloc@plt>
   34e14:	mov	r2, #0
   34e18:	mov	r3, #0
   34e1c:	str	r4, [sp, #8]
   34e20:	strd	r2, [sp]
   34e24:	mov	r1, r7
   34e28:	mov	r2, r0
   34e2c:	mov	sl, r0
   34e30:	mov	r0, r9
   34e34:	bl	11e94 <bfd_get_section_contents@plt>
   34e38:	cmp	r0, #0
   34e3c:	beq	352fc <__assert_fail@plt+0x22f70>
   34e40:	ldr	r7, [r6, #36]	; 0x24
   34e44:	add	r0, r7, #1
   34e48:	str	r7, [sp, #32]
   34e4c:	bl	11f3c <xmalloc@plt>
   34e50:	mov	r2, #0
   34e54:	mov	r3, #0
   34e58:	str	r7, [sp, #8]
   34e5c:	strd	r2, [sp]
   34e60:	mov	r1, r6
   34e64:	str	r0, [sp, #36]	; 0x24
   34e68:	mov	r2, r0
   34e6c:	mov	r0, r9
   34e70:	bl	11e94 <bfd_get_section_contents@plt>
   34e74:	cmp	r0, #0
   34e78:	beq	35330 <__assert_fail@plt+0x22fa4>
   34e7c:	ldr	r3, [sp, #24]
   34e80:	ldr	r2, [sp, #36]	; 0x24
   34e84:	ldr	r1, [sp, #32]
   34e88:	cmp	r3, #0
   34e8c:	mov	r3, #0
   34e90:	strb	r3, [r2, r1]
   34e94:	beq	3526c <__assert_fail@plt+0x22ee0>
   34e98:	sub	r3, r4, #12
   34e9c:	adds	r3, sl, r3
   34ea0:	str	r3, [sp, #60]	; 0x3c
   34ea4:	bcs	35058 <__assert_fail@plt+0x22ccc>
   34ea8:	mov	r3, #0
   34eac:	add	r2, sl, r4
   34eb0:	str	r3, [sp, #28]
   34eb4:	str	r2, [sp, #64]	; 0x40
   34eb8:	str	r3, [sp, #44]	; 0x2c
   34ebc:	mov	r8, sl
   34ec0:	str	fp, [sp, #76]	; 0x4c
   34ec4:	str	sl, [sp, #40]	; 0x28
   34ec8:	b	34eec <__assert_fail@plt+0x22b60>
   34ecc:	ldr	r3, [sp, #44]	; 0x2c
   34ed0:	str	r3, [sp, #28]
   34ed4:	add	r3, r0, r3
   34ed8:	str	r3, [sp, #44]	; 0x2c
   34edc:	ldr	r3, [sp, #60]	; 0x3c
   34ee0:	add	r8, r8, #12
   34ee4:	cmp	r8, r3
   34ee8:	bhi	35050 <__assert_fail@plt+0x22cc4>
   34eec:	ldr	r3, [r9, #4]
   34ef0:	mov	r0, r8
   34ef4:	ldr	r3, [r3, #40]	; 0x28
   34ef8:	blx	r3
   34efc:	ldr	r3, [r9, #4]
   34f00:	ldrb	r6, [r8, #4]
   34f04:	ldr	r3, [r3, #52]	; 0x34
   34f08:	mov	r5, r0
   34f0c:	add	r0, r8, #6
   34f10:	blx	r3
   34f14:	ldr	r3, [r9, #4]
   34f18:	ldr	r3, [r3, #40]	; 0x28
   34f1c:	str	r0, [sp, #48]	; 0x30
   34f20:	add	r0, r8, #8
   34f24:	blx	r3
   34f28:	cmp	r6, #0
   34f2c:	mov	sl, r0
   34f30:	beq	34ecc <__assert_fail@plt+0x22b40>
   34f34:	ldr	r3, [sp, #28]
   34f38:	add	r4, r5, r3
   34f3c:	ldr	r3, [sp, #32]
   34f40:	cmp	r3, r4
   34f44:	bls	34ff0 <__assert_fail@plt+0x22c64>
   34f48:	ldr	r3, [sp, #36]	; 0x24
   34f4c:	mov	r7, #0
   34f50:	add	r4, r3, r4
   34f54:	mov	r0, r4
   34f58:	bl	12074 <strlen@plt>
   34f5c:	add	r3, r8, #12
   34f60:	subs	r5, r0, #0
   34f64:	sub	r5, r5, #1
   34f68:	mov	r0, r3
   34f6c:	beq	350bc <__assert_fail@plt+0x22d30>
   34f70:	ldrb	fp, [r4, r5]
   34f74:	add	r5, r4, r5
   34f78:	cmp	fp, #92	; 0x5c
   34f7c:	bne	350bc <__assert_fail@plt+0x22d30>
   34f80:	ldr	r2, [sp, #64]	; 0x40
   34f84:	cmp	r3, r2
   34f88:	bcs	350bc <__assert_fail@plt+0x22d30>
   34f8c:	ldr	r2, [r9, #4]
   34f90:	mov	r1, #0
   34f94:	strb	r1, [r5]
   34f98:	ldr	r2, [r2, #40]	; 0x28
   34f9c:	mov	r8, r3
   34fa0:	str	r3, [sp, #52]	; 0x34
   34fa4:	blx	r2
   34fa8:	ldr	r3, [sp, #28]
   34fac:	mov	r2, #0
   34fb0:	add	ip, r0, r3
   34fb4:	ldr	r3, [sp, #36]	; 0x24
   34fb8:	mov	r0, r4
   34fbc:	add	r1, r3, ip
   34fc0:	ldr	r3, [sp, #32]
   34fc4:	cmp	r3, ip
   34fc8:	ldr	r3, [sp, #52]	; 0x34
   34fcc:	bls	3506c <__assert_fail@plt+0x22ce0>
   34fd0:	bl	11ee8 <concat@plt>
   34fd4:	strb	fp, [r5]
   34fd8:	mov	r4, r0
   34fdc:	subs	r0, r7, #0
   34fe0:	mov	r7, r4
   34fe4:	beq	34f54 <__assert_fail@plt+0x22bc8>
   34fe8:	bl	11e10 <free@plt>
   34fec:	b	34f54 <__assert_fail@plt+0x22bc8>
   34ff0:	ldr	r3, [pc, #900]	; 3537c <__assert_fail@plt+0x22ff0>
   34ff4:	ldr	r1, [pc, #900]	; 35380 <__assert_fail@plt+0x22ff4>
   34ff8:	mov	r2, #5
   34ffc:	mov	r0, #0
   35000:	ldr	r4, [r3]
   35004:	bl	11ea0 <dcgettext@plt>
   35008:	ldr	r3, [sp, #40]	; 0x28
   3500c:	ldr	r2, [pc, #880]	; 35384 <__assert_fail@plt+0x22ff8>
   35010:	sub	r3, r8, r3
   35014:	str	r6, [sp, #8]
   35018:	smull	r1, r2, r2, r3
   3501c:	str	r5, [sp, #4]
   35020:	asr	r3, r3, #31
   35024:	rsb	r3, r3, r2, asr #1
   35028:	str	r3, [sp]
   3502c:	ldr	r3, [sp, #20]
   35030:	ldr	r2, [r9]
   35034:	add	r8, r8, #12
   35038:	mov	r1, r0
   3503c:	mov	r0, r4
   35040:	bl	120b0 <fprintf@plt>
   35044:	ldr	r3, [sp, #60]	; 0x3c
   35048:	cmp	r8, r3
   3504c:	bls	34eec <__assert_fail@plt+0x22b60>
   35050:	ldr	fp, [sp, #76]	; 0x4c
   35054:	ldr	sl, [sp, #40]	; 0x28
   35058:	bl	34ae8 <__assert_fail@plt+0x2275c>
   3505c:	mov	r0, sl
   35060:	bl	11e10 <free@plt>
   35064:	mov	r4, #1
   35068:	b	34d64 <__assert_fail@plt+0x229d8>
   3506c:	mov	fp, r3
   35070:	ldr	r3, [pc, #772]	; 3537c <__assert_fail@plt+0x22ff0>
   35074:	mov	r2, #5
   35078:	ldr	r1, [pc, #776]	; 35388 <__assert_fail@plt+0x22ffc>
   3507c:	mov	r0, #0
   35080:	ldr	r5, [r3]
   35084:	bl	11ea0 <dcgettext@plt>
   35088:	ldr	r3, [sp, #40]	; 0x28
   3508c:	mov	r8, fp
   35090:	sub	r1, fp, r3
   35094:	ldr	r3, [pc, #744]	; 35384 <__assert_fail@plt+0x22ff8>
   35098:	smull	r2, r3, r3, r1
   3509c:	ldr	r2, [r9]
   350a0:	asr	r1, r1, #31
   350a4:	rsb	r1, r1, r3, asr #1
   350a8:	str	r1, [sp]
   350ac:	ldr	r3, [sp, #20]
   350b0:	mov	r1, r0
   350b4:	mov	r0, r5
   350b8:	bl	120b0 <fprintf@plt>
   350bc:	ldr	r5, [sp, #48]	; 0x30
   350c0:	mov	r3, r4
   350c4:	mov	r2, sl
   350c8:	mov	r1, r5
   350cc:	mov	r0, r6
   350d0:	bl	34b2c <__assert_fail@plt+0x227a0>
   350d4:	str	r4, [sp, #4]
   350d8:	str	sl, [sp]
   350dc:	mov	r3, r5
   350e0:	mov	r2, r6
   350e4:	ldr	r1, [sp, #24]
   350e8:	ldr	r0, [sp, #16]
   350ec:	bl	3e2c4 <__assert_fail@plt+0x2bf38>
   350f0:	cmp	r0, #0
   350f4:	bne	34edc <__assert_fail@plt+0x22b50>
   350f8:	mov	r4, r0
   350fc:	bl	34ba0 <__assert_fail@plt+0x22814>
   35100:	str	r4, [sp, #16]
   35104:	bl	34ae8 <__assert_fail@plt+0x2275c>
   35108:	ldr	r0, [sp, #16]
   3510c:	add	sp, sp, #108	; 0x6c
   35110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35114:	ldr	r2, [sp, #56]	; 0x38
   35118:	ldr	r5, [sp, #68]	; 0x44
   3511c:	add	r7, r5, r2, lsl #2
   35120:	cmp	r5, r7
   35124:	bcs	35364 <__assert_fail@plt+0x22fd8>
   35128:	mov	r6, #0
   3512c:	b	35140 <__assert_fail@plt+0x22db4>
   35130:	add	r5, r5, #4
   35134:	cmp	r7, r5
   35138:	bls	35298 <__assert_fail@plt+0x22f0c>
   3513c:	ldr	r3, [fp, #4]
   35140:	ldr	r3, [r3, #276]	; 0x114
   35144:	add	r2, sp, #84	; 0x54
   35148:	ldr	r1, [r5]
   3514c:	mov	r0, fp
   35150:	blx	r3
   35154:	ldrb	r3, [sp, #88]	; 0x58
   35158:	cmp	r3, #45	; 0x2d
   3515c:	bne	35130 <__assert_fail@plt+0x22da4>
   35160:	cmp	r6, #0
   35164:	beq	35244 <__assert_fail@plt+0x22eb8>
   35168:	ldr	r4, [sp, #92]	; 0x5c
   3516c:	cmp	r4, #0
   35170:	beq	34df4 <__assert_fail@plt+0x22a68>
   35174:	ldrb	r3, [r4]
   35178:	cmp	r3, #0
   3517c:	beq	34df4 <__assert_fail@plt+0x22a68>
   35180:	mov	r8, #0
   35184:	mov	r0, r4
   35188:	bl	12074 <strlen@plt>
   3518c:	add	sl, r5, #4
   35190:	add	r3, r4, r0
   35194:	mov	r0, r4
   35198:	ldrb	r3, [r3, #-1]
   3519c:	cmp	r3, #92	; 0x5c
   351a0:	bne	35204 <__assert_fail@plt+0x22e78>
   351a4:	cmp	r7, sl
   351a8:	bls	35204 <__assert_fail@plt+0x22e78>
   351ac:	bl	11f60 <xstrdup@plt>
   351b0:	mov	r9, r0
   351b4:	bl	12074 <strlen@plt>
   351b8:	ldr	r3, [r5, #4]
   351bc:	mov	ip, #0
   351c0:	mov	r2, #0
   351c4:	mov	r5, sl
   351c8:	add	r1, r9, r0
   351cc:	mov	r0, r9
   351d0:	strb	ip, [r1, #-1]
   351d4:	ldr	r1, [r3, #4]
   351d8:	bl	11ee8 <concat@plt>
   351dc:	mov	r4, r0
   351e0:	mov	r0, r9
   351e4:	bl	11e10 <free@plt>
   351e8:	subs	r0, r8, #0
   351ec:	beq	351f4 <__assert_fail@plt+0x22e68>
   351f0:	bl	11e10 <free@plt>
   351f4:	ldrb	r3, [r4]
   351f8:	mov	r8, r4
   351fc:	cmp	r3, #0
   35200:	bne	35184 <__assert_fail@plt+0x22df8>
   35204:	mov	r3, r4
   35208:	ldr	r2, [sp, #84]	; 0x54
   3520c:	ldrsh	r1, [sp, #98]	; 0x62
   35210:	ldrb	r0, [sp, #96]	; 0x60
   35214:	bl	34b2c <__assert_fail@plt+0x227a0>
   35218:	ldr	r3, [sp, #84]	; 0x54
   3521c:	ldrb	r2, [sp, #96]	; 0x60
   35220:	mov	r1, r6
   35224:	stm	sp, {r3, r4}
   35228:	ldr	r0, [sp, #16]
   3522c:	ldrsh	r3, [sp, #98]	; 0x62
   35230:	bl	3e2c4 <__assert_fail@plt+0x2bf38>
   35234:	cmp	r0, #0
   35238:	beq	350f8 <__assert_fail@plt+0x22d6c>
   3523c:	mov	r4, #1
   35240:	b	35130 <__assert_fail@plt+0x22da4>
   35244:	ldr	r3, [sp, #56]	; 0x38
   35248:	mov	r2, r6
   3524c:	str	r3, [sp]
   35250:	mov	r1, fp
   35254:	ldr	r3, [sp, #68]	; 0x44
   35258:	ldr	r0, [sp, #16]
   3525c:	bl	3e1bc <__assert_fail@plt+0x2be30>
   35260:	subs	r6, r0, #0
   35264:	bne	35168 <__assert_fail@plt+0x22ddc>
   35268:	b	34df4 <__assert_fail@plt+0x22a68>
   3526c:	ldr	r3, [sp, #56]	; 0x38
   35270:	mov	r2, #1
   35274:	str	r3, [sp]
   35278:	mov	r1, r9
   3527c:	ldr	r3, [sp, #68]	; 0x44
   35280:	ldr	r0, [sp, #16]
   35284:	bl	3e1bc <__assert_fail@plt+0x2be30>
   35288:	subs	r3, r0, #0
   3528c:	str	r3, [sp, #24]
   35290:	bne	34e98 <__assert_fail@plt+0x22b0c>
   35294:	b	34df4 <__assert_fail@plt+0x22a68>
   35298:	bl	34ae8 <__assert_fail@plt+0x2275c>
   3529c:	cmp	r6, #0
   352a0:	beq	34db8 <__assert_fail@plt+0x22a2c>
   352a4:	mov	r1, r6
   352a8:	ldr	r0, [sp, #16]
   352ac:	bl	3e22c <__assert_fail@plt+0x2bea0>
   352b0:	cmp	r0, #0
   352b4:	bne	34db8 <__assert_fail@plt+0x22a2c>
   352b8:	b	34df4 <__assert_fail@plt+0x22a68>
   352bc:	ldr	r4, [sp, #72]	; 0x48
   352c0:	mov	r2, #5
   352c4:	ldr	r1, [pc, #192]	; 3538c <__assert_fail@plt+0x23000>
   352c8:	mov	r0, r4
   352cc:	bl	11ea0 <dcgettext@plt>
   352d0:	ldr	r1, [fp]
   352d4:	bl	406c8 <__assert_fail@plt+0x2e33c>
   352d8:	str	r4, [sp, #16]
   352dc:	b	34dfc <__assert_fail@plt+0x22a70>
   352e0:	ldr	r1, [sp, #68]	; 0x44
   352e4:	mov	r0, fp
   352e8:	ldr	r3, [sp, #16]
   352ec:	bl	3fdc8 <__assert_fail@plt+0x2da3c>
   352f0:	cmp	r0, #0
   352f4:	bne	34dfc <__assert_fail@plt+0x22a70>
   352f8:	b	34df4 <__assert_fail@plt+0x22a68>
   352fc:	ldr	r3, [pc, #120]	; 3537c <__assert_fail@plt+0x22ff0>
   35300:	ldr	r5, [r9]
   35304:	str	r0, [sp, #16]
   35308:	ldr	r4, [r3]
   3530c:	bl	11f00 <bfd_get_error@plt>
   35310:	bl	12284 <bfd_errmsg@plt>
   35314:	mov	r2, r5
   35318:	ldr	r3, [sp, #20]
   3531c:	ldr	r1, [pc, #108]	; 35390 <__assert_fail@plt+0x23004>
   35320:	str	r0, [sp]
   35324:	mov	r0, r4
   35328:	bl	120b0 <fprintf@plt>
   3532c:	b	34dfc <__assert_fail@plt+0x22a70>
   35330:	ldr	r3, [pc, #68]	; 3537c <__assert_fail@plt+0x22ff0>
   35334:	ldr	r6, [r9]
   35338:	str	r0, [sp, #16]
   3533c:	ldr	r4, [r3]
   35340:	bl	11f00 <bfd_get_error@plt>
   35344:	bl	12284 <bfd_errmsg@plt>
   35348:	mov	r2, r6
   3534c:	mov	r3, r5
   35350:	ldr	r1, [pc, #56]	; 35390 <__assert_fail@plt+0x23004>
   35354:	str	r0, [sp]
   35358:	mov	r0, r4
   3535c:	bl	120b0 <fprintf@plt>
   35360:	b	34dfc <__assert_fail@plt+0x22a70>
   35364:	bl	34ae8 <__assert_fail@plt+0x2275c>
   35368:	b	34db8 <__assert_fail@plt+0x22a2c>
   3536c:	andeq	r1, r5, r4, lsr #5
   35370:	andeq	r8, r4, r4, lsl #31
   35374:	muleq	r4, r0, pc	; <UNPREDICTABLE>
   35378:			; <UNDEFINED> instruction: 0x000512b4
   3537c:	andeq	r7, r6, r8, lsl #3
   35380:	andeq	r1, r5, ip, lsl r3
   35384:	bcs	feadfe38 <optarg@@GLIBC_2.4+0xfea78a00>
   35388:	andeq	r1, r5, r8, asr r3
   3538c:	andeq	r1, r5, ip, ror r3
   35390:	andeq	r1, r5, r0, lsl r3
   35394:	ldr	ip, [r1]
   35398:	push	{r4, r5, lr}
   3539c:	cmp	ip, #1
   353a0:	sub	sp, sp, #12
   353a4:	mov	r4, r1
   353a8:	beq	353c0 <__assert_fail@plt+0x23034>
   353ac:	cmp	ip, #0
   353b0:	beq	3542c <__assert_fail@plt+0x230a0>
   353b4:	sub	r3, ip, #22
   353b8:	cmp	r3, #1
   353bc:	bhi	3542c <__assert_fail@plt+0x230a0>
   353c0:	cmp	r2, #0
   353c4:	beq	35408 <__assert_fail@plt+0x2307c>
   353c8:	ldr	r3, [r2, #4]
   353cc:	cmp	r3, r4
   353d0:	beq	35438 <__assert_fail@plt+0x230ac>
   353d4:	ldr	r3, [r2]
   353d8:	cmp	r3, r2
   353dc:	bne	35400 <__assert_fail@plt+0x23074>
   353e0:	b	35438 <__assert_fail@plt+0x230ac>
   353e4:	ldr	r1, [r3, #4]
   353e8:	cmp	r1, r4
   353ec:	beq	35438 <__assert_fail@plt+0x230ac>
   353f0:	ldr	r1, [r3]
   353f4:	cmp	r1, r3
   353f8:	mov	r3, r1
   353fc:	beq	35438 <__assert_fail@plt+0x230ac>
   35400:	cmp	r3, #0
   35404:	bne	353e4 <__assert_fail@plt+0x23058>
   35408:	sub	ip, ip, #22
   3540c:	cmp	ip, #1
   35410:	stm	sp, {r2, r4}
   35414:	ldr	r3, [r4, #12]
   35418:	bls	354ac <__assert_fail@plt+0x23120>
   3541c:	ldr	r3, [r3]
   35420:	ldr	r1, [r3]
   35424:	cmp	r1, #0
   35428:	bne	354b0 <__assert_fail@plt+0x23124>
   3542c:	mov	r0, r4
   35430:	add	sp, sp, #12
   35434:	pop	{r4, r5, pc}
   35438:	ldr	r3, [pc, #128]	; 354c0 <__assert_fail@plt+0x23134>
   3543c:	ldr	r1, [pc, #128]	; 354c4 <__assert_fail@plt+0x23138>
   35440:	mov	r2, #5
   35444:	mov	r0, #0
   35448:	ldr	r5, [r3]
   3544c:	bl	11ea0 <dcgettext@plt>
   35450:	mov	r1, r0
   35454:	b	3546c <__assert_fail@plt+0x230e0>
   35458:	ldr	r3, [r4, #12]
   3545c:	ldr	r2, [r3]
   35460:	ldr	r4, [r2]
   35464:	cmp	r4, #0
   35468:	beq	35490 <__assert_fail@plt+0x23104>
   3546c:	ldr	r3, [r4]
   35470:	cmp	r3, #1
   35474:	beq	35458 <__assert_fail@plt+0x230cc>
   35478:	sub	r3, r3, #22
   3547c:	cmp	r3, #1
   35480:	movhi	r2, #0
   35484:	bhi	35494 <__assert_fail@plt+0x23108>
   35488:	ldr	r3, [r4, #12]
   3548c:	ldr	r3, [r3]
   35490:	ldr	r2, [r3, #4]
   35494:	mov	r0, r5
   35498:	bl	120b0 <fprintf@plt>
   3549c:	mov	r4, #0
   354a0:	mov	r0, r4
   354a4:	add	sp, sp, #12
   354a8:	pop	{r4, r5, pc}
   354ac:	ldr	r1, [r3, #4]
   354b0:	mov	r2, sp
   354b4:	bl	35394 <__assert_fail@plt+0x23008>
   354b8:	mov	r4, r0
   354bc:	b	3542c <__assert_fail@plt+0x230a0>
   354c0:	andeq	r7, r6, r8, lsl #3
   354c4:	strdeq	r1, [r5], -r8
   354c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   354cc:	ldr	r4, [r0]
   354d0:	ldr	r8, [sp, #32]
   354d4:	cmp	r4, #0
   354d8:	beq	3557c <__assert_fail@plt+0x231f0>
   354dc:	mov	r7, r3
   354e0:	ldr	r3, [r1]
   354e4:	mov	r6, r2
   354e8:	cmp	r3, #9
   354ec:	mov	r5, r1
   354f0:	mov	r9, r0
   354f4:	bhi	35564 <__assert_fail@plt+0x231d8>
   354f8:	add	r3, r4, r3, lsl #2
   354fc:	ldr	r2, [r3, #8]
   35500:	cmn	r2, #1
   35504:	beq	35564 <__assert_fail@plt+0x231d8>
   35508:	ldr	r3, [r3, #48]	; 0x30
   3550c:	cmp	r8, r3
   35510:	bhi	35530 <__assert_fail@plt+0x231a4>
   35514:	b	3557c <__assert_fail@plt+0x231f0>
   35518:	ldr	r2, [ip, #12]
   3551c:	cmn	r2, #1
   35520:	beq	35564 <__assert_fail@plt+0x231d8>
   35524:	ldr	r3, [ip, #52]	; 0x34
   35528:	cmp	r3, r8
   3552c:	bcs	3557c <__assert_fail@plt+0x231f0>
   35530:	ldr	r1, [r4, #4]
   35534:	ldr	sl, [r6]
   35538:	mov	r0, r7
   3553c:	ldr	r1, [r1, #4]
   35540:	blx	sl
   35544:	cmp	r0, #0
   35548:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3554c:	ldr	ip, [r5]
   35550:	add	r3, ip, #1
   35554:	cmp	r3, #9
   35558:	add	ip, r4, ip, lsl #2
   3555c:	str	r3, [r5]
   35560:	bls	35518 <__assert_fail@plt+0x2318c>
   35564:	ldr	r4, [r4]
   35568:	mov	r3, #0
   3556c:	cmp	r4, r3
   35570:	str	r4, [r9]
   35574:	str	r3, [r5]
   35578:	bne	354f8 <__assert_fail@plt+0x2316c>
   3557c:	mov	r0, #1
   35580:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35584:	push	{r4, r5, r6, r7, r8, lr}
   35588:	mov	r5, r0
   3558c:	mov	r0, #32
   35590:	mov	r8, r1
   35594:	mov	r7, r2
   35598:	mov	r6, r3
   3559c:	bl	11f3c <xmalloc@plt>
   355a0:	mov	r2, #32
   355a4:	mov	r1, #0
   355a8:	mov	r4, r0
   355ac:	bl	12110 <memset@plt>
   355b0:	ldr	r2, [r5]
   355b4:	str	r8, [r4, #4]
   355b8:	cmp	r2, #0
   355bc:	str	r7, [r4, #12]
   355c0:	str	r6, [r4, #16]
   355c4:	beq	355dc <__assert_fail@plt+0x23250>
   355c8:	ldr	r3, [r2, #4]
   355cc:	str	r4, [r3]
   355d0:	mov	r0, r4
   355d4:	str	r4, [r2, #4]
   355d8:	pop	{r4, r5, r6, r7, r8, pc}
   355dc:	mov	r0, #8
   355e0:	bl	11f3c <xmalloc@plt>
   355e4:	mov	r1, #0
   355e8:	mov	r2, r0
   355ec:	mov	r3, r0
   355f0:	str	r0, [r2, #4]
   355f4:	str	r0, [r5]
   355f8:	str	r1, [r0]
   355fc:	b	355cc <__assert_fail@plt+0x23240>
   35600:	push	{r4, r5, r6, lr}
   35604:	mov	r5, r0
   35608:	mov	r0, #16
   3560c:	mov	r4, r1
   35610:	bl	11f3c <xmalloc@plt>
   35614:	mov	r2, #0
   35618:	str	r5, [r0]
   3561c:	str	r4, [r0, #4]
   35620:	str	r2, [r0, #8]
   35624:	str	r2, [r0, #12]
   35628:	pop	{r4, r5, r6, pc}
   3562c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35630:	mov	r6, r0
   35634:	sub	sp, sp, #28
   35638:	mov	r4, r1
   3563c:	mov	r5, r2
   35640:	b	35658 <__assert_fail@plt+0x232cc>
   35644:	ldr	r3, [r4, #12]
   35648:	ldr	r3, [r3]
   3564c:	ldr	r4, [r3]
   35650:	cmp	r4, #0
   35654:	beq	356bc <__assert_fail@plt+0x23330>
   35658:	ldr	r3, [r4]
   3565c:	cmp	r3, #1
   35660:	beq	35644 <__assert_fail@plt+0x232b8>
   35664:	b	3567c <__assert_fail@plt+0x232f0>
   35668:	ldr	r2, [r5, #12]
   3566c:	ldr	r2, [r2]
   35670:	ldr	r5, [r2]
   35674:	cmp	r5, #0
   35678:	beq	356bc <__assert_fail@plt+0x23330>
   3567c:	ldr	r2, [r5]
   35680:	cmp	r2, #1
   35684:	beq	35668 <__assert_fail@plt+0x232dc>
   35688:	cmp	r4, r5
   3568c:	beq	35710 <__assert_fail@plt+0x23384>
   35690:	cmp	r3, #22
   35694:	beq	356c8 <__assert_fail@plt+0x2333c>
   35698:	cmp	r2, #22
   3569c:	cmpeq	r3, #23
   356a0:	beq	35754 <__assert_fail@plt+0x233c8>
   356a4:	cmp	r3, r2
   356a8:	bne	356bc <__assert_fail@plt+0x23330>
   356ac:	ldr	r1, [r4, #4]
   356b0:	ldr	r2, [r5, #4]
   356b4:	cmp	r1, r2
   356b8:	beq	35718 <__assert_fail@plt+0x2338c>
   356bc:	mov	r0, #0
   356c0:	add	sp, sp, #28
   356c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   356c8:	cmp	r2, #23
   356cc:	bne	356a4 <__assert_fail@plt+0x23318>
   356d0:	ldr	r3, [r4, #12]
   356d4:	mov	r2, r5
   356d8:	mov	r0, r6
   356dc:	ldr	r1, [r3, #4]
   356e0:	bl	35e38 <__assert_fail@plt+0x23aac>
   356e4:	b	356c0 <__assert_fail@plt+0x23334>
   356e8:	ldr	r1, [r6, #48]	; 0x30
   356ec:	cmp	r1, #0
   356f0:	beq	35778 <__assert_fail@plt+0x233ec>
   356f4:	mov	r2, r1
   356f8:	ldr	r0, [r2, #4]
   356fc:	cmp	r4, r0
   35700:	bne	3576c <__assert_fail@plt+0x233e0>
   35704:	ldr	r0, [r2, #8]
   35708:	cmp	r5, r0
   3570c:	bne	3576c <__assert_fail@plt+0x233e0>
   35710:	mov	r0, #1
   35714:	b	356c0 <__assert_fail@plt+0x23334>
   35718:	sub	r2, r3, #2
   3571c:	cmp	r2, #4
   35720:	ldrls	pc, [pc, r2, lsl #2]
   35724:	b	356e8 <__assert_fail@plt+0x2335c>
   35728:	andeq	r5, r3, r0, lsl r7
   3572c:	andeq	r5, r3, ip, lsr r7
   35730:	andeq	r5, r3, r0, lsl r7
   35734:	andeq	r5, r3, r0, lsl r7
   35738:	andeq	r5, r3, r0, lsl r7
   3573c:	ldr	r0, [r4, #12]
   35740:	ldr	r4, [r5, #12]
   35744:	sub	r0, r0, r4
   35748:	clz	r0, r0
   3574c:	lsr	r0, r0, #5
   35750:	b	356c0 <__assert_fail@plt+0x23334>
   35754:	ldr	r3, [r5, #12]
   35758:	mov	r1, r4
   3575c:	mov	r0, r6
   35760:	ldr	r2, [r3, #4]
   35764:	bl	35e38 <__assert_fail@plt+0x23aac>
   35768:	b	356c0 <__assert_fail@plt+0x23334>
   3576c:	ldr	r2, [r2]
   35770:	cmp	r2, #0
   35774:	bne	356f8 <__assert_fail@plt+0x2336c>
   35778:	add	r2, sp, #12
   3577c:	sub	r3, r3, #7
   35780:	strd	r4, [sp, #16]
   35784:	str	r1, [sp, #12]
   35788:	str	r2, [r6, #48]	; 0x30
   3578c:	cmp	r3, #16
   35790:	ldrls	pc, [pc, r3, lsl #2]
   35794:	b	35b54 <__assert_fail@plt+0x237c8>
   35798:	andeq	r5, r3, r8, asr #19
   3579c:	andeq	r5, r3, r8, asr #19
   357a0:	andeq	r5, r3, r8, asr #19
   357a4:	andeq	r5, r3, r8, asr #19
   357a8:	andeq	r5, r3, r8, asr fp
   357ac:			; <UNDEFINED> instruction: 0x000359b4
   357b0:	strdeq	r5, [r3], -r8
   357b4:			; <UNDEFINED> instruction: 0x000359b4
   357b8:	andeq	r5, r3, ip, asr #25
   357bc:	andeq	r5, r3, r8, lsr r9
   357c0:	andeq	r5, r3, r8, asr #16
   357c4:	andeq	r5, r3, r4, lsl #16
   357c8:	ldrdeq	r5, [r3], -ip
   357cc:			; <UNDEFINED> instruction: 0x000359b4
   357d0:			; <UNDEFINED> instruction: 0x000359b4
   357d4:	andeq	r5, r3, r4, ror r9
   357d8:	andeq	r5, r3, r4, ror r9
   357dc:	ldr	r3, [r4, #12]
   357e0:	ldr	r2, [r5, #12]
   357e4:	ldr	r0, [r3, #12]
   357e8:	ldr	r1, [r2, #12]
   357ec:	cmp	r0, r1
   357f0:	beq	3587c <__assert_fail@plt+0x234f0>
   357f4:	mov	r0, #0
   357f8:	ldr	r3, [sp, #12]
   357fc:	str	r3, [r6, #48]	; 0x30
   35800:	b	356c0 <__assert_fail@plt+0x23334>
   35804:	ldr	r2, [r5, #12]
   35808:	ldr	r3, [r4, #12]
   3580c:	mov	r0, r6
   35810:	ldr	r2, [r2]
   35814:	ldr	r1, [r3]
   35818:	bl	35e38 <__assert_fail@plt+0x23aac>
   3581c:	cmp	r0, #0
   35820:	beq	357f4 <__assert_fail@plt+0x23468>
   35824:	ldr	r2, [r5, #12]
   35828:	ldr	r3, [r4, #12]
   3582c:	mov	r0, r6
   35830:	ldr	r2, [r2, #4]
   35834:	ldr	r1, [r3, #4]
   35838:	bl	35e38 <__assert_fail@plt+0x23aac>
   3583c:	adds	r0, r0, #0
   35840:	movne	r0, #1
   35844:	b	357f8 <__assert_fail@plt+0x2346c>
   35848:	ldr	r3, [r4, #12]
   3584c:	ldr	r2, [r5, #12]
   35850:	ldr	r0, [r3, #4]
   35854:	ldr	r1, [r2, #4]
   35858:	cmp	r0, r1
   3585c:	bne	357f4 <__assert_fail@plt+0x23468>
   35860:	ldr	r2, [r2]
   35864:	ldr	r1, [r3]
   35868:	mov	r0, r6
   3586c:	bl	35e38 <__assert_fail@plt+0x23aac>
   35870:	adds	r0, r0, #0
   35874:	movne	r0, #1
   35878:	b	357f8 <__assert_fail@plt+0x2346c>
   3587c:	ldr	r2, [r2]
   35880:	ldr	r1, [r3]
   35884:	mov	r0, r6
   35888:	bl	35e38 <__assert_fail@plt+0x23aac>
   3588c:	cmp	r0, #0
   35890:	beq	357f4 <__assert_fail@plt+0x23468>
   35894:	ldr	r2, [r5, #12]
   35898:	ldr	r3, [r4, #12]
   3589c:	mov	r0, r6
   358a0:	ldr	r2, [r2, #4]
   358a4:	ldr	r1, [r3, #4]
   358a8:	bl	35e38 <__assert_fail@plt+0x23aac>
   358ac:	cmp	r0, #0
   358b0:	beq	357f4 <__assert_fail@plt+0x23468>
   358b4:	ldr	r2, [r4, #12]
   358b8:	ldr	r3, [r5, #12]
   358bc:	ldr	r4, [r2, #8]
   358c0:	ldr	r5, [r3, #8]
   358c4:	clz	r2, r4
   358c8:	clz	r3, r5
   358cc:	lsr	r2, r2, #5
   358d0:	lsr	r3, r3, #5
   358d4:	cmp	r2, r3
   358d8:	bne	357f4 <__assert_fail@plt+0x23468>
   358dc:	cmp	r4, #0
   358e0:	beq	35930 <__assert_fail@plt+0x235a4>
   358e4:	mov	r8, r4
   358e8:	ldr	r1, [r4], #4
   358ec:	mov	r7, r5
   358f0:	cmp	r1, #0
   358f4:	ldr	r2, [r5]
   358f8:	add	r5, r5, #4
   358fc:	beq	35924 <__assert_fail@plt+0x23598>
   35900:	cmp	r2, #0
   35904:	beq	357f4 <__assert_fail@plt+0x23468>
   35908:	mov	r0, r6
   3590c:	bl	35e38 <__assert_fail@plt+0x23aac>
   35910:	cmp	r0, #0
   35914:	bne	358e4 <__assert_fail@plt+0x23558>
   35918:	ldr	r3, [r8]
   3591c:	cmp	r3, #0
   35920:	bne	357f4 <__assert_fail@plt+0x23468>
   35924:	ldr	r3, [r7]
   35928:	cmp	r3, #0
   3592c:	bne	357f4 <__assert_fail@plt+0x23468>
   35930:	mov	r0, #1
   35934:	b	357f8 <__assert_fail@plt+0x2346c>
   35938:	ldr	r3, [r4, #12]
   3593c:	ldr	r2, [r5, #12]
   35940:	ldr	r0, [r3, #8]
   35944:	ldr	r1, [r2, #8]
   35948:	cmp	r0, r1
   3594c:	bne	357f4 <__assert_fail@plt+0x23468>
   35950:	ldr	r0, [r3, #12]
   35954:	ldr	r1, [r2, #12]
   35958:	cmp	r0, r1
   3595c:	bne	357f4 <__assert_fail@plt+0x23468>
   35960:	ldr	r0, [r3, #16]
   35964:	ldr	r1, [r2, #16]
   35968:	cmp	r0, r1
   3596c:	bne	357f4 <__assert_fail@plt+0x23468>
   35970:	b	35860 <__assert_fail@plt+0x234d4>
   35974:	ldr	r4, [r4, #12]
   35978:	ldr	r5, [r5, #12]
   3597c:	ldr	r2, [r4]
   35980:	ldr	r3, [r5]
   35984:	ldr	r0, [r2, #4]
   35988:	ldr	r1, [r3, #4]
   3598c:	bl	11d98 <strcmp@plt>
   35990:	cmp	r0, #0
   35994:	bne	357f4 <__assert_fail@plt+0x23468>
   35998:	ldr	r2, [r5, #4]
   3599c:	ldr	r1, [r4, #4]
   359a0:	mov	r0, r6
   359a4:	bl	35e38 <__assert_fail@plt+0x23aac>
   359a8:	adds	r0, r0, #0
   359ac:	movne	r0, #1
   359b0:	b	357f8 <__assert_fail@plt+0x2346c>
   359b4:	ldr	r2, [r5, #12]
   359b8:	ldr	r1, [r4, #12]
   359bc:	mov	r0, r6
   359c0:	bl	35e38 <__assert_fail@plt+0x23aac>
   359c4:	b	357f8 <__assert_fail@plt+0x2346c>
   359c8:	ldr	r7, [r4, #12]
   359cc:	ldr	r4, [r5, #12]
   359d0:	cmp	r7, #0
   359d4:	beq	35b68 <__assert_fail@plt+0x237dc>
   359d8:	cmp	r4, #0
   359dc:	beq	357f4 <__assert_fail@plt+0x23468>
   359e0:	ldr	r3, [r7, #8]
   359e4:	ldr	r2, [r6, #32]
   359e8:	cmp	r3, r2
   359ec:	bls	359fc <__assert_fail@plt+0x23670>
   359f0:	ldr	r2, [r4, #8]
   359f4:	cmp	r3, r2
   359f8:	beq	35930 <__assert_fail@plt+0x235a4>
   359fc:	ldr	r3, [r7]
   35a00:	ldr	r2, [r4]
   35a04:	clz	r0, r3
   35a08:	clz	r1, r2
   35a0c:	lsr	r0, r0, #5
   35a10:	lsr	r1, r1, #5
   35a14:	cmp	r0, r1
   35a18:	bne	357f4 <__assert_fail@plt+0x23468>
   35a1c:	ldr	r0, [r7, #12]
   35a20:	ldr	r1, [r4, #12]
   35a24:	clz	r0, r0
   35a28:	clz	r1, r1
   35a2c:	lsr	r0, r0, #5
   35a30:	lsr	r1, r1, #5
   35a34:	cmp	r0, r1
   35a38:	bne	357f4 <__assert_fail@plt+0x23468>
   35a3c:	ldr	r0, [r7, #16]
   35a40:	ldr	r1, [r4, #16]
   35a44:	clz	r0, r0
   35a48:	clz	r1, r1
   35a4c:	lsr	r0, r0, #5
   35a50:	lsr	r1, r1, #5
   35a54:	cmp	r0, r1
   35a58:	bne	357f4 <__assert_fail@plt+0x23468>
   35a5c:	ldr	r1, [r7, #20]
   35a60:	ldr	r0, [r4, #20]
   35a64:	clz	ip, r1
   35a68:	clz	r0, r0
   35a6c:	lsr	ip, ip, #5
   35a70:	lsr	r0, r0, #5
   35a74:	cmp	ip, r0
   35a78:	bne	357f4 <__assert_fail@plt+0x23468>
   35a7c:	cmp	r3, #0
   35a80:	beq	35c34 <__assert_fail@plt+0x238a8>
   35a84:	sub	sl, r3, #4
   35a88:	sub	r9, r2, #4
   35a8c:	ldr	r8, [sl, #4]!
   35a90:	ldr	r5, [r9, #4]!
   35a94:	cmp	r8, #0
   35a98:	beq	35c28 <__assert_fail@plt+0x2389c>
   35a9c:	cmp	r5, #0
   35aa0:	beq	357f4 <__assert_fail@plt+0x23468>
   35aa4:	ldr	fp, [r8]
   35aa8:	ldr	r3, [r5]
   35aac:	ldrb	r1, [fp]
   35ab0:	ldrb	r2, [r3]
   35ab4:	cmp	r1, r2
   35ab8:	bne	357f4 <__assert_fail@plt+0x23468>
   35abc:	ldr	r1, [r8, #8]
   35ac0:	ldr	r2, [r5, #8]
   35ac4:	cmp	r1, r2
   35ac8:	bne	357f4 <__assert_fail@plt+0x23468>
   35acc:	ldr	r2, [r8, #12]
   35ad0:	ldr	r1, [r5, #12]
   35ad4:	cmp	r2, r1
   35ad8:	bne	357f4 <__assert_fail@plt+0x23468>
   35adc:	cmp	r2, #0
   35ae0:	ldr	r0, [r8, #16]
   35ae4:	ldr	r1, [r5, #16]
   35ae8:	beq	35e1c <__assert_fail@plt+0x23a90>
   35aec:	str	r3, [sp, #4]
   35af0:	bl	11d98 <strcmp@plt>
   35af4:	ldr	r3, [sp, #4]
   35af8:	cmp	r0, #0
   35afc:	bne	357f4 <__assert_fail@plt+0x23468>
   35b00:	mov	r0, fp
   35b04:	mov	r1, r3
   35b08:	bl	11d98 <strcmp@plt>
   35b0c:	subs	fp, r0, #0
   35b10:	bne	357f4 <__assert_fail@plt+0x23468>
   35b14:	ldr	r1, [r8, #4]
   35b18:	mov	r2, fp
   35b1c:	mov	r0, r6
   35b20:	bl	35394 <__assert_fail@plt+0x23008>
   35b24:	mov	r2, fp
   35b28:	ldr	r1, [r5, #4]
   35b2c:	mov	r8, r0
   35b30:	mov	r0, r6
   35b34:	bl	35394 <__assert_fail@plt+0x23008>
   35b38:	mov	r1, r8
   35b3c:	mov	r2, r0
   35b40:	mov	r0, r6
   35b44:	bl	35e38 <__assert_fail@plt+0x23aac>
   35b48:	cmp	r0, #0
   35b4c:	bne	35a8c <__assert_fail@plt+0x23700>
   35b50:	b	357f4 <__assert_fail@plt+0x23468>
   35b54:	bl	1232c <abort@plt>
   35b58:	ldr	r2, [r4, #12]
   35b5c:	ldr	r4, [r5, #12]
   35b60:	cmp	r2, #0
   35b64:	bne	35b74 <__assert_fail@plt+0x237e8>
   35b68:	clz	r0, r4
   35b6c:	lsr	r0, r0, #5
   35b70:	b	357f8 <__assert_fail@plt+0x2346c>
   35b74:	cmp	r4, #0
   35b78:	beq	357f4 <__assert_fail@plt+0x23468>
   35b7c:	ldr	r3, [r2]
   35b80:	ldr	ip, [r4]
   35b84:	ldr	r5, [r2, #4]
   35b88:	ldr	r0, [r3]
   35b8c:	ldr	r4, [r4, #4]
   35b90:	cmp	r0, #0
   35b94:	ldr	r1, [ip]
   35b98:	beq	35c18 <__assert_fail@plt+0x2388c>
   35b9c:	cmp	r1, #0
   35ba0:	beq	357f4 <__assert_fail@plt+0x23468>
   35ba4:	ldrb	lr, [r1]
   35ba8:	ldrb	r2, [r0]
   35bac:	cmp	lr, r2
   35bb0:	bne	357f4 <__assert_fail@plt+0x23468>
   35bb4:	ldr	lr, [r4]
   35bb8:	ldr	r2, [r5]
   35bbc:	cmp	lr, r2
   35bc0:	bne	357f4 <__assert_fail@plt+0x23468>
   35bc4:	mov	r8, r3
   35bc8:	add	r7, ip, #4
   35bcc:	bl	11d98 <strcmp@plt>
   35bd0:	cmp	r0, #0
   35bd4:	bne	357f4 <__assert_fail@plt+0x23468>
   35bd8:	ldr	r0, [r8, #4]!
   35bdc:	mov	ip, r7
   35be0:	cmp	r0, #0
   35be4:	ldr	r1, [r7], #4
   35be8:	beq	35c18 <__assert_fail@plt+0x2388c>
   35bec:	cmp	r1, #0
   35bf0:	beq	357f4 <__assert_fail@plt+0x23468>
   35bf4:	ldrb	r2, [r0]
   35bf8:	ldrb	r3, [r1]
   35bfc:	cmp	r2, r3
   35c00:	bne	357f4 <__assert_fail@plt+0x23468>
   35c04:	ldr	r2, [r5, #4]!
   35c08:	ldr	r3, [r4, #4]!
   35c0c:	cmp	r2, r3
   35c10:	beq	35bcc <__assert_fail@plt+0x23840>
   35c14:	b	357f4 <__assert_fail@plt+0x23468>
   35c18:	ldr	r0, [ip]
   35c1c:	clz	r0, r0
   35c20:	lsr	r0, r0, #5
   35c24:	b	357f8 <__assert_fail@plt+0x2346c>
   35c28:	cmp	r5, #0
   35c2c:	ldreq	r1, [r7, #20]
   35c30:	bne	357f4 <__assert_fail@plt+0x23468>
   35c34:	cmp	r1, #0
   35c38:	beq	35c50 <__assert_fail@plt+0x238c4>
   35c3c:	ldr	r2, [r4, #20]
   35c40:	mov	r0, r6
   35c44:	bl	35e38 <__assert_fail@plt+0x23aac>
   35c48:	cmp	r0, #0
   35c4c:	beq	357f4 <__assert_fail@plt+0x23468>
   35c50:	ldr	r5, [r7, #12]
   35c54:	cmp	r5, #0
   35c58:	subne	r5, r5, #4
   35c5c:	ldrne	r8, [r4, #12]
   35c60:	subne	r8, r8, #4
   35c64:	beq	35d98 <__assert_fail@plt+0x23a0c>
   35c68:	ldr	r1, [r5, #4]!
   35c6c:	ldr	r3, [r8, #4]!
   35c70:	cmp	r1, #0
   35c74:	beq	35d90 <__assert_fail@plt+0x23a04>
   35c78:	cmp	r3, #0
   35c7c:	beq	357f4 <__assert_fail@plt+0x23468>
   35c80:	ldr	r0, [r1, #4]
   35c84:	ldr	r2, [r3, #4]
   35c88:	cmp	r0, r2
   35c8c:	bne	357f4 <__assert_fail@plt+0x23468>
   35c90:	ldr	r0, [r1, #8]
   35c94:	ldr	r2, [r3, #8]
   35c98:	cmp	r0, r2
   35c9c:	bne	357f4 <__assert_fail@plt+0x23468>
   35ca0:	ldr	r0, [r1, #12]
   35ca4:	ldr	r2, [r3, #12]
   35ca8:	cmp	r0, r2
   35cac:	bne	357f4 <__assert_fail@plt+0x23468>
   35cb0:	ldr	r2, [r3]
   35cb4:	ldr	r1, [r1]
   35cb8:	mov	r0, r6
   35cbc:	bl	35e38 <__assert_fail@plt+0x23aac>
   35cc0:	cmp	r0, #0
   35cc4:	bne	35c68 <__assert_fail@plt+0x238dc>
   35cc8:	b	357f4 <__assert_fail@plt+0x23468>
   35ccc:	ldr	r3, [r4, #12]
   35cd0:	ldr	r2, [r5, #12]
   35cd4:	ldr	r0, [r3, #4]
   35cd8:	ldr	r1, [r2, #4]
   35cdc:	cmp	r0, r1
   35ce0:	bne	357f4 <__assert_fail@plt+0x23468>
   35ce4:	ldr	r0, [r3, #8]
   35ce8:	ldr	r1, [r2, #8]
   35cec:	cmp	r0, r1
   35cf0:	bne	357f4 <__assert_fail@plt+0x23468>
   35cf4:	b	35860 <__assert_fail@plt+0x234d4>
   35cf8:	ldr	r3, [r4, #12]
   35cfc:	ldr	r2, [r5, #12]
   35d00:	ldr	r0, [r3, #8]
   35d04:	ldr	r1, [r2, #8]
   35d08:	cmp	r0, r1
   35d0c:	bne	357f4 <__assert_fail@plt+0x23468>
   35d10:	ldr	r2, [r2]
   35d14:	ldr	r1, [r3]
   35d18:	mov	r0, r6
   35d1c:	bl	35e38 <__assert_fail@plt+0x23aac>
   35d20:	cmp	r0, #0
   35d24:	beq	357f4 <__assert_fail@plt+0x23468>
   35d28:	ldr	r2, [r4, #12]
   35d2c:	ldr	r3, [r5, #12]
   35d30:	ldr	r4, [r2, #4]
   35d34:	ldr	r5, [r3, #4]
   35d38:	clz	r2, r4
   35d3c:	clz	r3, r5
   35d40:	lsr	r2, r2, #5
   35d44:	lsr	r3, r3, #5
   35d48:	cmp	r2, r3
   35d4c:	bne	357f4 <__assert_fail@plt+0x23468>
   35d50:	cmp	r4, #0
   35d54:	beq	35930 <__assert_fail@plt+0x235a4>
   35d58:	mov	r8, r4
   35d5c:	ldr	r1, [r4], #4
   35d60:	mov	r7, r5
   35d64:	cmp	r1, #0
   35d68:	ldr	r2, [r5]
   35d6c:	add	r5, r5, #4
   35d70:	beq	35924 <__assert_fail@plt+0x23598>
   35d74:	cmp	r2, #0
   35d78:	beq	357f4 <__assert_fail@plt+0x23468>
   35d7c:	mov	r0, r6
   35d80:	bl	35e38 <__assert_fail@plt+0x23aac>
   35d84:	cmp	r0, #0
   35d88:	bne	35d58 <__assert_fail@plt+0x239cc>
   35d8c:	b	35918 <__assert_fail@plt+0x2358c>
   35d90:	cmp	r3, #0
   35d94:	bne	357f4 <__assert_fail@plt+0x23468>
   35d98:	ldr	r7, [r7, #16]
   35d9c:	cmp	r7, #0
   35da0:	beq	35930 <__assert_fail@plt+0x235a4>
   35da4:	ldr	r8, [r4, #16]
   35da8:	sub	r7, r7, #4
   35dac:	sub	r8, r8, #4
   35db0:	ldr	r5, [r7, #4]!
   35db4:	ldr	r4, [r8, #4]!
   35db8:	cmp	r5, #0
   35dbc:	beq	35b68 <__assert_fail@plt+0x237dc>
   35dc0:	cmp	r4, #0
   35dc4:	beq	357f4 <__assert_fail@plt+0x23468>
   35dc8:	ldr	r0, [r5]
   35dcc:	ldr	r1, [r4]
   35dd0:	ldrb	r2, [r0]
   35dd4:	ldrb	r3, [r1]
   35dd8:	cmp	r2, r3
   35ddc:	bne	357f4 <__assert_fail@plt+0x23468>
   35de0:	bl	11d98 <strcmp@plt>
   35de4:	cmp	r0, #0
   35de8:	bne	357f4 <__assert_fail@plt+0x23468>
   35dec:	ldr	r2, [r5, #4]
   35df0:	ldr	r3, [r4, #4]
   35df4:	clz	r1, r2
   35df8:	clz	r3, r3
   35dfc:	lsr	r1, r1, #5
   35e00:	lsr	r3, r3, #5
   35e04:	cmp	r1, r3
   35e08:	bne	357f4 <__assert_fail@plt+0x23468>
   35e0c:	cmp	r2, #0
   35e10:	bne	35db0 <__assert_fail@plt+0x23a24>
   35e14:	ldr	r3, [r2]
   35e18:	udf	#0
   35e1c:	cmp	r0, r1
   35e20:	bne	357f4 <__assert_fail@plt+0x23468>
   35e24:	ldr	r1, [r8, #20]
   35e28:	ldr	r2, [r5, #20]
   35e2c:	cmp	r1, r2
   35e30:	beq	35b00 <__assert_fail@plt+0x23774>
   35e34:	b	357f4 <__assert_fail@plt+0x23468>
   35e38:	cmp	r1, #0
   35e3c:	beq	35e4c <__assert_fail@plt+0x23ac0>
   35e40:	cmp	r2, #0
   35e44:	beq	35e58 <__assert_fail@plt+0x23acc>
   35e48:	b	3562c <__assert_fail@plt+0x232a0>
   35e4c:	clz	r0, r2
   35e50:	lsr	r0, r0, #5
   35e54:	bx	lr
   35e58:	mov	r0, r2
   35e5c:	bx	lr
   35e60:	ldr	r3, [r2]
   35e64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35e68:	mov	r6, r2
   35e6c:	sub	r2, r3, #7
   35e70:	cmp	r2, #3
   35e74:	bhi	35f54 <__assert_fail@plt+0x23bc8>
   35e78:	ldr	r8, [r6, #12]
   35e7c:	mov	r7, r1
   35e80:	ldr	r2, [r0, #32]
   35e84:	ldr	r1, [r8, #8]
   35e88:	mov	r9, r0
   35e8c:	cmp	r1, r2
   35e90:	bhi	35f38 <__assert_fail@plt+0x23bac>
   35e94:	ldr	r4, [r0, #44]	; 0x2c
   35e98:	cmp	r4, #0
   35e9c:	bne	35ea8 <__assert_fail@plt+0x23b1c>
   35ea0:	b	35f10 <__assert_fail@plt+0x23b84>
   35ea4:	ldr	r3, [r6]
   35ea8:	ldr	r5, [r4, #4]
   35eac:	ldr	r2, [r5]
   35eb0:	cmp	r2, r3
   35eb4:	bne	35f04 <__assert_fail@plt+0x23b78>
   35eb8:	cmp	r7, #0
   35ebc:	ldr	r0, [r4, #8]
   35ec0:	beq	35ee4 <__assert_fail@plt+0x23b58>
   35ec4:	cmp	r0, #0
   35ec8:	beq	35f04 <__assert_fail@plt+0x23b78>
   35ecc:	ldrb	r2, [r0]
   35ed0:	ldrb	r3, [r7]
   35ed4:	cmp	r2, r3
   35ed8:	bne	35f04 <__assert_fail@plt+0x23b78>
   35edc:	mov	r1, r7
   35ee0:	bl	11d98 <strcmp@plt>
   35ee4:	cmp	r0, #0
   35ee8:	bne	35f04 <__assert_fail@plt+0x23b78>
   35eec:	mov	r1, r5
   35ef0:	mov	r2, r6
   35ef4:	mov	r0, r9
   35ef8:	bl	3562c <__assert_fail@plt+0x232a0>
   35efc:	cmp	r0, #0
   35f00:	bne	35f40 <__assert_fail@plt+0x23bb4>
   35f04:	ldr	r4, [r4]
   35f08:	cmp	r4, #0
   35f0c:	bne	35ea4 <__assert_fail@plt+0x23b18>
   35f10:	ldr	r3, [r9, #28]
   35f14:	mov	r0, #12
   35f18:	add	r3, r3, #1
   35f1c:	str	r3, [r9, #28]
   35f20:	str	r3, [r8, #8]
   35f24:	bl	11f3c <xmalloc@plt>
   35f28:	ldr	r3, [r9, #44]	; 0x2c
   35f2c:	strd	r6, [r0, #4]
   35f30:	str	r3, [r0]
   35f34:	str	r0, [r9, #44]	; 0x2c
   35f38:	mov	r0, #1
   35f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35f40:	ldr	r3, [r4, #4]
   35f44:	ldr	r3, [r3, #12]
   35f48:	ldr	r3, [r3, #8]
   35f4c:	str	r3, [r8, #8]
   35f50:	b	35f38 <__assert_fail@plt+0x23bac>
   35f54:	ldr	r3, [pc, #12]	; 35f68 <__assert_fail@plt+0x23bdc>
   35f58:	mov	r2, #2944	; 0xb80
   35f5c:	ldr	r1, [pc, #8]	; 35f6c <__assert_fail@plt+0x23be0>
   35f60:	ldr	r0, [pc, #8]	; 35f70 <__assert_fail@plt+0x23be4>
   35f64:	bl	1238c <__assert_fail@plt>
   35f68:	andeq	r1, r5, r4, lsr #7
   35f6c:	andeq	r1, r5, r0, lsr r4
   35f70:	andeq	r1, r5, r8, asr #8
   35f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35f78:	sub	sp, sp, #28
   35f7c:	mov	r5, r0
   35f80:	ldr	ip, [sp, #64]	; 0x40
   35f84:	mov	r6, r1
   35f88:	mov	r7, r2
   35f8c:	mov	r4, r3
   35f90:	ldr	r3, [r4]
   35f94:	sub	r2, r3, #22
   35f98:	cmp	r2, #1
   35f9c:	mov	r1, r3
   35fa0:	bls	36040 <__assert_fail@plt+0x23cb4>
   35fa4:	cmp	ip, #0
   35fa8:	beq	36074 <__assert_fail@plt+0x23ce8>
   35fac:	ldr	r2, [r5, #24]
   35fb0:	cmp	r3, #22
   35fb4:	str	r2, [ip, #8]
   35fb8:	beq	3607c <__assert_fail@plt+0x23cf0>
   35fbc:	cmp	r3, #23
   35fc0:	beq	366ec <__assert_fail@plt+0x24360>
   35fc4:	ldr	r2, [ip, #12]
   35fc8:	cmp	r2, #1
   35fcc:	bne	36a40 <__assert_fail@plt+0x246b4>
   35fd0:	ldr	r8, [ip, #4]
   35fd4:	cmp	r3, #23
   35fd8:	ldrls	pc, [pc, r3, lsl #2]
   35fdc:	b	36a7c <__assert_fail@plt+0x246f0>
   35fe0:	ldrdeq	r6, [r3], -r4
   35fe4:			; <UNDEFINED> instruction: 0x000363b8
   35fe8:	andeq	r6, r3, r4, lsr #7
   35fec:			; <UNDEFINED> instruction: 0x000366b8
   35ff0:			; <UNDEFINED> instruction: 0x000366b0
   35ff4:	andeq	r6, r3, r8, lsr #13
   35ff8:	muleq	r3, r0, r6
   35ffc:	andeq	r6, r3, r0, lsr #11
   36000:	andeq	r6, r3, r0, lsr #11
   36004:	andeq	r6, r3, ip, asr r4
   36008:	andeq	r6, r3, ip, asr r4
   3600c:	andeq	r6, r3, r0, lsr r4
   36010:	andeq	r6, r3, r4, lsl #8
   36014:	andeq	r6, r3, r8, ror #5
   36018:			; <UNDEFINED> instruction: 0x000362bc
   3601c:	andeq	r6, r3, ip, ror r2
   36020:	andeq	r6, r3, r8, lsl r2
   36024:	ldrdeq	r6, [r3], -ip
   36028:	andeq	r6, r3, r8, lsl #3
   3602c:	strheq	r6, [r3], -r8
   36030:	andeq	r6, r3, ip, lsl #1
   36034:	andeq	r6, r3, r8, ror r3
   36038:	andeq	r6, r3, ip, ror r0
   3603c:	andeq	r6, r3, ip, ror #13
   36040:	ldr	lr, [r4, #12]
   36044:	ldr	r0, [r5, #24]
   36048:	ldr	r2, [lr]
   3604c:	ldr	r8, [r2, #8]
   36050:	cmp	r8, r0
   36054:	beq	367a4 <__assert_fail@plt+0x24418>
   36058:	cmp	r3, #23
   3605c:	bne	35fa4 <__assert_fail@plt+0x23c18>
   36060:	cmp	r2, ip
   36064:	bne	367ac <__assert_fail@plt+0x24420>
   36068:	str	r0, [ip, #8]
   3606c:	ldr	r4, [lr, #4]
   36070:	b	35f90 <__assert_fail@plt+0x23c04>
   36074:	mov	r8, ip
   36078:	b	35fd4 <__assert_fail@plt+0x23c48>
   3607c:	ldr	r3, [r4, #12]
   36080:	mov	ip, #0
   36084:	ldr	r4, [r3, #4]
   36088:	b	35f90 <__assert_fail@plt+0x23c04>
   3608c:	mov	r2, #0
   36090:	ldr	r3, [r4, #12]
   36094:	mov	r0, r5
   36098:	str	r2, [sp]
   3609c:	mov	r1, r6
   360a0:	mov	r2, r7
   360a4:	bl	35f74 <__assert_fail@plt+0x23be8>
   360a8:	cmp	r0, #0
   360ac:	beq	363f8 <__assert_fail@plt+0x2406c>
   360b0:	ldr	r3, [r6, #68]	; 0x44
   360b4:	b	363a8 <__assert_fail@plt+0x2401c>
   360b8:	ldr	r3, [r4, #12]
   360bc:	mov	r8, #0
   360c0:	mov	r2, r7
   360c4:	ldr	r3, [r3]
   360c8:	mov	r1, r6
   360cc:	str	r8, [sp]
   360d0:	mov	r0, r5
   360d4:	bl	35f74 <__assert_fail@plt+0x23be8>
   360d8:	cmp	r0, r8
   360dc:	beq	363f8 <__assert_fail@plt+0x2406c>
   360e0:	ldr	r2, [r4, #12]
   360e4:	ldr	r3, [r2, #8]
   360e8:	cmp	r3, r8
   360ec:	beq	3679c <__assert_fail@plt+0x24410>
   360f0:	ldr	r3, [r3]
   360f4:	cmp	r3, r8
   360f8:	beq	36a28 <__assert_fail@plt+0x2469c>
   360fc:	mov	r9, r8
   36100:	str	r9, [sp]
   36104:	mov	r2, r7
   36108:	mov	r1, r6
   3610c:	mov	r0, r5
   36110:	bl	35f74 <__assert_fail@plt+0x23be8>
   36114:	cmp	r0, #0
   36118:	beq	363f8 <__assert_fail@plt+0x2406c>
   3611c:	ldr	r2, [r4, #12]
   36120:	add	r8, r8, #1
   36124:	ldr	r3, [r2, #8]
   36128:	ldr	r3, [r3, r8, lsl #2]
   3612c:	cmp	r3, #0
   36130:	bne	36100 <__assert_fail@plt+0x23d74>
   36134:	ldr	r1, [r2, #4]
   36138:	cmp	r1, #0
   3613c:	beq	3616c <__assert_fail@plt+0x23de0>
   36140:	mov	r2, #0
   36144:	mov	r3, r1
   36148:	str	r2, [sp]
   3614c:	mov	r0, r5
   36150:	mov	r2, r7
   36154:	mov	r1, r6
   36158:	bl	35f74 <__assert_fail@plt+0x23be8>
   3615c:	cmp	r0, #0
   36160:	beq	363f8 <__assert_fail@plt+0x2406c>
   36164:	ldr	r2, [r4, #12]
   36168:	ldr	r1, [r2, #4]
   3616c:	adds	r1, r1, #0
   36170:	ldr	lr, [r6, #64]	; 0x40
   36174:	ldr	r3, [r2, #12]
   36178:	movne	r1, #1
   3617c:	mov	r2, r8
   36180:	mov	r0, r7
   36184:	b	3644c <__assert_fail@plt+0x240c0>
   36188:	ldr	r3, [r4, #12]
   3618c:	mov	r8, #0
   36190:	mov	r2, r7
   36194:	ldr	r3, [r3]
   36198:	mov	r1, r6
   3619c:	str	r8, [sp]
   361a0:	mov	r0, r5
   361a4:	bl	35f74 <__assert_fail@plt+0x23be8>
   361a8:	cmp	r0, r8
   361ac:	beq	363f8 <__assert_fail@plt+0x2406c>
   361b0:	ldr	r3, [r4, #12]
   361b4:	mov	r0, r5
   361b8:	mov	r2, r7
   361bc:	ldr	r3, [r3, #4]
   361c0:	mov	r1, r6
   361c4:	str	r8, [sp]
   361c8:	bl	35f74 <__assert_fail@plt+0x23be8>
   361cc:	cmp	r0, r8
   361d0:	beq	363f8 <__assert_fail@plt+0x2406c>
   361d4:	ldr	r3, [r6, #60]	; 0x3c
   361d8:	b	363a8 <__assert_fail@plt+0x2401c>
   361dc:	ldr	r3, [r4, #12]
   361e0:	mov	r1, #0
   361e4:	mov	r0, r5
   361e8:	ldr	r3, [r3]
   361ec:	mov	r2, r7
   361f0:	str	r1, [sp]
   361f4:	mov	r1, r6
   361f8:	bl	35f74 <__assert_fail@plt+0x23be8>
   361fc:	cmp	r0, #0
   36200:	beq	363f8 <__assert_fail@plt+0x2406c>
   36204:	ldr	r2, [r4, #12]
   36208:	ldr	r3, [r6, #56]	; 0x38
   3620c:	mov	r0, r7
   36210:	ldr	r1, [r2, #4]
   36214:	b	3669c <__assert_fail@plt+0x24310>
   36218:	ldr	r3, [r4, #12]
   3621c:	mov	r8, #0
   36220:	mov	r2, r7
   36224:	ldr	r3, [r3]
   36228:	mov	r1, r6
   3622c:	str	r8, [sp]
   36230:	mov	r0, r5
   36234:	bl	35f74 <__assert_fail@plt+0x23be8>
   36238:	cmp	r0, r8
   3623c:	beq	363f8 <__assert_fail@plt+0x2406c>
   36240:	ldr	r3, [r4, #12]
   36244:	mov	r0, r5
   36248:	mov	r2, r7
   3624c:	ldr	r3, [r3, #4]
   36250:	mov	r1, r6
   36254:	str	r8, [sp]
   36258:	bl	35f74 <__assert_fail@plt+0x23be8>
   3625c:	cmp	r0, r8
   36260:	beq	363f8 <__assert_fail@plt+0x2406c>
   36264:	ldr	r1, [r4, #12]
   36268:	ldr	lr, [r6, #52]	; 0x34
   3626c:	mov	r0, r7
   36270:	ldrd	r2, [r1, #12]
   36274:	ldr	r1, [r1, #8]
   36278:	b	3644c <__assert_fail@plt+0x240c0>
   3627c:	ldr	r3, [r4, #12]
   36280:	mov	r1, #0
   36284:	mov	r0, r5
   36288:	ldr	r3, [r3]
   3628c:	mov	r2, r7
   36290:	str	r1, [sp]
   36294:	mov	r1, r6
   36298:	bl	35f74 <__assert_fail@plt+0x23be8>
   3629c:	cmp	r0, #0
   362a0:	beq	363f8 <__assert_fail@plt+0x2406c>
   362a4:	ldr	r3, [r4, #12]
   362a8:	ldr	lr, [r6, #48]	; 0x30
   362ac:	mov	r0, r7
   362b0:	ldmib	r3, {r1, r2}
   362b4:	mov	r3, lr
   362b8:	b	366c8 <__assert_fail@plt+0x2433c>
   362bc:	mov	r2, #0
   362c0:	ldr	r3, [r4, #12]
   362c4:	mov	r0, r5
   362c8:	str	r2, [sp]
   362cc:	mov	r1, r6
   362d0:	mov	r2, r7
   362d4:	bl	35f74 <__assert_fail@plt+0x23be8>
   362d8:	cmp	r0, #0
   362dc:	beq	363f8 <__assert_fail@plt+0x2406c>
   362e0:	ldr	r3, [r6, #44]	; 0x2c
   362e4:	b	363a8 <__assert_fail@plt+0x2401c>
   362e8:	ldr	r3, [r4, #12]
   362ec:	mov	r8, #0
   362f0:	mov	r2, r7
   362f4:	ldr	r3, [r3]
   362f8:	mov	r1, r6
   362fc:	str	r8, [sp]
   36300:	mov	r0, r5
   36304:	bl	35f74 <__assert_fail@plt+0x23be8>
   36308:	cmp	r0, r8
   3630c:	beq	363f8 <__assert_fail@plt+0x2406c>
   36310:	ldr	r2, [r4, #12]
   36314:	ldr	r3, [r2, #4]
   36318:	cmp	r3, r8
   3631c:	beq	36794 <__assert_fail@plt+0x24408>
   36320:	ldr	r3, [r3]
   36324:	cmp	r3, r8
   36328:	beq	36a30 <__assert_fail@plt+0x246a4>
   3632c:	mov	r9, r8
   36330:	str	r9, [sp]
   36334:	mov	r2, r7
   36338:	mov	r1, r6
   3633c:	mov	r0, r5
   36340:	bl	35f74 <__assert_fail@plt+0x23be8>
   36344:	cmp	r0, #0
   36348:	beq	363f8 <__assert_fail@plt+0x2406c>
   3634c:	ldr	r2, [r4, #12]
   36350:	add	r8, r8, #1
   36354:	ldr	r3, [r2, #4]
   36358:	ldr	r3, [r3, r8, lsl #2]
   3635c:	cmp	r3, #0
   36360:	bne	36330 <__assert_fail@plt+0x23fa4>
   36364:	ldr	r3, [r6, #40]	; 0x28
   36368:	ldr	r2, [r2, #8]
   3636c:	mov	r1, r8
   36370:	mov	r0, r7
   36374:	b	366c8 <__assert_fail@plt+0x2433c>
   36378:	mov	r2, #0
   3637c:	ldr	r3, [r4, #12]
   36380:	mov	r0, r5
   36384:	str	r2, [sp]
   36388:	mov	r1, r6
   3638c:	mov	r2, r7
   36390:	bl	35f74 <__assert_fail@plt+0x23be8>
   36394:	cmp	r0, #0
   36398:	beq	363f8 <__assert_fail@plt+0x2406c>
   3639c:	ldr	r3, [r6, #72]	; 0x48
   363a0:	b	363a8 <__assert_fail@plt+0x2401c>
   363a4:	ldr	r3, [r6, #12]
   363a8:	mov	r0, r7
   363ac:	add	sp, sp, #28
   363b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   363b4:	bx	r3
   363b8:	ldr	r3, [r4, #12]
   363bc:	ldr	r3, [r3]
   363c0:	ldr	r4, [r3]
   363c4:	cmp	r4, #0
   363c8:	bne	35f90 <__assert_fail@plt+0x23c04>
   363cc:	ldr	r3, [r6, #8]
   363d0:	b	363a8 <__assert_fail@plt+0x2401c>
   363d4:	mov	r2, #5
   363d8:	ldr	r1, [pc, #1696]	; 36a80 <__assert_fail@plt+0x246f4>
   363dc:	mov	r0, #0
   363e0:	bl	11ea0 <dcgettext@plt>
   363e4:	ldr	r3, [pc, #1688]	; 36a84 <__assert_fail@plt+0x246f8>
   363e8:	ldr	r1, [pc, #1688]	; 36a88 <__assert_fail@plt+0x246fc>
   363ec:	mov	r2, r0
   363f0:	ldr	r0, [r3]
   363f4:	bl	120b0 <fprintf@plt>
   363f8:	mov	r0, #0
   363fc:	add	sp, sp, #28
   36400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36404:	mov	r2, #0
   36408:	ldr	r3, [r4, #12]
   3640c:	mov	r0, r5
   36410:	str	r2, [sp]
   36414:	mov	r1, r6
   36418:	mov	r2, r7
   3641c:	bl	35f74 <__assert_fail@plt+0x23be8>
   36420:	cmp	r0, #0
   36424:	beq	363f8 <__assert_fail@plt+0x2406c>
   36428:	ldr	r3, [r6, #36]	; 0x24
   3642c:	b	363a8 <__assert_fail@plt+0x2401c>
   36430:	ldr	r2, [r4, #12]
   36434:	ldr	lr, [r6, #32]
   36438:	cmp	r2, #0
   3643c:	mov	r1, r8
   36440:	ldrdne	r2, [r2]
   36444:	mov	r0, r7
   36448:	moveq	r3, r2
   3644c:	mov	ip, lr
   36450:	add	sp, sp, #28
   36454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36458:	bx	ip
   3645c:	ldr	r9, [r4, #12]
   36460:	cmp	r9, #0
   36464:	beq	366d4 <__assert_fail@plt+0x24348>
   36468:	ldr	sl, [r9, #8]
   3646c:	ldr	r3, [r5, #32]
   36470:	cmp	sl, r3
   36474:	bls	366f8 <__assert_fail@plt+0x2436c>
   36478:	ldr	r3, [r5, #24]
   3647c:	ldr	r2, [r9, #4]
   36480:	cmp	r3, r2
   36484:	beq	36734 <__assert_fail@plt+0x243a8>
   36488:	str	r3, [r9, #4]
   3648c:	ldr	r9, [r9, #20]
   36490:	adds	r3, r9, #0
   36494:	movne	r3, #1
   36498:	cmp	r4, r9
   3649c:	cmpne	r9, #0
   364a0:	bne	369ec <__assert_fail@plt+0x24660>
   364a4:	ldr	r1, [r4]
   364a8:	sub	r9, r4, r9
   364ac:	clz	r9, r9
   364b0:	lsr	r9, r9, #5
   364b4:	mov	r2, sl
   364b8:	stmib	sp, {r3, r9}
   364bc:	ldr	r0, [r4, #4]
   364c0:	sub	r3, r1, #9
   364c4:	str	r0, [sp]
   364c8:	mov	r1, r8
   364cc:	clz	r3, r3
   364d0:	ldr	r8, [r6, #88]	; 0x58
   364d4:	lsr	r3, r3, #5
   364d8:	mov	r0, r7
   364dc:	blx	r8
   364e0:	cmp	r0, #0
   364e4:	beq	363f8 <__assert_fail@plt+0x2406c>
   364e8:	ldr	r3, [r4, #12]
   364ec:	cmp	r3, #0
   364f0:	beq	369e4 <__assert_fail@plt+0x24658>
   364f4:	ldr	r2, [r3]
   364f8:	cmp	r2, #0
   364fc:	beq	36830 <__assert_fail@plt+0x244a4>
   36500:	ldr	r8, [r2]
   36504:	cmp	r8, #0
   36508:	beq	36830 <__assert_fail@plt+0x244a4>
   3650c:	mov	r9, #4
   36510:	mov	sl, #0
   36514:	b	36548 <__assert_fail@plt+0x241bc>
   36518:	mov	r3, r0
   3651c:	ldr	r8, [r6, #92]	; 0x5c
   36520:	mov	r0, r7
   36524:	blx	r8
   36528:	cmp	r0, #0
   3652c:	beq	363f8 <__assert_fail@plt+0x2406c>
   36530:	ldr	r3, [r4, #12]
   36534:	ldr	r2, [r3]
   36538:	ldr	r8, [r2, r9]
   3653c:	add	r9, r9, #4
   36540:	cmp	r8, #0
   36544:	beq	36830 <__assert_fail@plt+0x244a4>
   36548:	ldr	r3, [r8, #4]
   3654c:	mov	r2, r7
   36550:	str	sl, [sp]
   36554:	mov	r1, r6
   36558:	mov	r0, r5
   3655c:	bl	35f74 <__assert_fail@plt+0x23be8>
   36560:	cmp	r0, #0
   36564:	beq	363f8 <__assert_fail@plt+0x2406c>
   36568:	ldr	r3, [r8, #12]
   3656c:	ldr	r1, [r8]
   36570:	cmp	r3, #0
   36574:	ldr	r2, [r8, #16]
   36578:	ldr	r0, [r8, #8]
   3657c:	bne	36518 <__assert_fail@plt+0x2418c>
   36580:	ldr	r3, [r8, #20]
   36584:	str	r0, [sp]
   36588:	ldr	r8, [r6, #80]	; 0x50
   3658c:	mov	r0, r7
   36590:	blx	r8
   36594:	cmp	r0, #0
   36598:	bne	36530 <__assert_fail@plt+0x241a4>
   3659c:	b	363f8 <__assert_fail@plt+0x2406c>
   365a0:	ldr	r1, [r4, #12]
   365a4:	cmp	r1, #0
   365a8:	beq	366e0 <__assert_fail@plt+0x24354>
   365ac:	ldr	r2, [r1, #8]
   365b0:	ldr	r0, [r5, #32]
   365b4:	cmp	r2, r0
   365b8:	bls	36748 <__assert_fail@plt+0x243bc>
   365bc:	ldr	r0, [r5, #24]
   365c0:	ldr	ip, [r1, #4]
   365c4:	cmp	ip, r0
   365c8:	beq	3678c <__assert_fail@plt+0x24400>
   365cc:	ldr	r2, [r1, #8]
   365d0:	ldr	r9, [r6, #76]	; 0x4c
   365d4:	str	r0, [r1, #4]
   365d8:	ldr	r0, [r4, #4]
   365dc:	sub	r3, r3, #7
   365e0:	str	r0, [sp]
   365e4:	clz	r3, r3
   365e8:	mov	r1, r8
   365ec:	lsr	r3, r3, #5
   365f0:	mov	r0, r7
   365f4:	blx	r9
   365f8:	cmp	r0, #0
   365fc:	beq	363f8 <__assert_fail@plt+0x2406c>
   36600:	ldr	r3, [r4, #12]
   36604:	cmp	r3, #0
   36608:	beq	36688 <__assert_fail@plt+0x242fc>
   3660c:	ldr	r3, [r3]
   36610:	cmp	r3, #0
   36614:	beq	36688 <__assert_fail@plt+0x242fc>
   36618:	ldr	r8, [r3]
   3661c:	cmp	r8, #0
   36620:	beq	36688 <__assert_fail@plt+0x242fc>
   36624:	mov	r9, #4
   36628:	mov	sl, #0
   3662c:	ldr	r3, [r8, #4]
   36630:	mov	r2, r7
   36634:	str	sl, [sp]
   36638:	mov	r1, r6
   3663c:	mov	r0, r5
   36640:	bl	35f74 <__assert_fail@plt+0x23be8>
   36644:	cmp	r0, #0
   36648:	beq	363f8 <__assert_fail@plt+0x2406c>
   3664c:	ldr	r0, [r8, #8]
   36650:	ldrd	r2, [r8, #16]
   36654:	ldr	r1, [r8]
   36658:	str	r0, [sp]
   3665c:	ldr	r8, [r6, #80]	; 0x50
   36660:	mov	r0, r7
   36664:	blx	r8
   36668:	cmp	r0, #0
   3666c:	beq	363f8 <__assert_fail@plt+0x2406c>
   36670:	ldr	r3, [r4, #12]
   36674:	ldr	r3, [r3]
   36678:	ldr	r8, [r3, r9]
   3667c:	add	r9, r9, #4
   36680:	cmp	r8, #0
   36684:	bne	3662c <__assert_fail@plt+0x242a0>
   36688:	ldr	r3, [r6, #84]	; 0x54
   3668c:	b	363a8 <__assert_fail@plt+0x2401c>
   36690:	ldr	r3, [r6, #28]
   36694:	ldr	r1, [r4, #4]
   36698:	mov	r0, r7
   3669c:	add	sp, sp, #28
   366a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   366a4:	bx	r3
   366a8:	ldr	r3, [r6, #24]
   366ac:	b	36694 <__assert_fail@plt+0x24308>
   366b0:	ldr	r3, [r6, #20]
   366b4:	b	36694 <__assert_fail@plt+0x24308>
   366b8:	ldr	r3, [r6, #16]
   366bc:	ldr	r2, [r4, #12]
   366c0:	ldr	r1, [r4, #4]
   366c4:	mov	r0, r7
   366c8:	add	sp, sp, #28
   366cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   366d0:	bx	r3
   366d4:	mov	r3, r9
   366d8:	mov	sl, r9
   366dc:	b	364a8 <__assert_fail@plt+0x2411c>
   366e0:	mov	r2, r1
   366e4:	ldr	r9, [r6, #76]	; 0x4c
   366e8:	b	365d8 <__assert_fail@plt+0x2424c>
   366ec:	ldr	lr, [r4, #12]
   366f0:	ldr	ip, [lr]
   366f4:	b	3606c <__assert_fail@plt+0x23ce0>
   366f8:	mov	r2, r4
   366fc:	mov	r1, r8
   36700:	mov	r0, r5
   36704:	bl	35e60 <__assert_fail@plt+0x23ad4>
   36708:	cmp	r0, #0
   3670c:	beq	363f8 <__assert_fail@plt+0x2406c>
   36710:	ldr	r9, [r4, #12]
   36714:	ldr	r3, [r5, #24]
   36718:	ldmib	r9, {r2, sl}
   3671c:	cmp	r3, r2
   36720:	bne	36488 <__assert_fail@plt+0x240fc>
   36724:	ldr	r3, [r5, #32]
   36728:	cmp	r3, sl
   3672c:	ldrcc	r1, [r4]
   36730:	bcs	36a68 <__assert_fail@plt+0x246dc>
   36734:	ldr	lr, [r6, #124]	; 0x7c
   36738:	mov	r3, r1
   3673c:	mov	r2, sl
   36740:	mov	r1, r8
   36744:	b	36180 <__assert_fail@plt+0x23df4>
   36748:	mov	r2, r4
   3674c:	mov	r1, r8
   36750:	mov	r0, r5
   36754:	bl	35e60 <__assert_fail@plt+0x23ad4>
   36758:	cmp	r0, #0
   3675c:	beq	363f8 <__assert_fail@plt+0x2406c>
   36760:	ldr	r1, [r4, #12]
   36764:	ldr	r0, [r5, #24]
   36768:	ldr	r3, [r1, #4]
   3676c:	cmp	r0, r3
   36770:	ldrne	r3, [r4]
   36774:	bne	365cc <__assert_fail@plt+0x24240>
   36778:	ldr	r2, [r1, #8]
   3677c:	ldr	r3, [r5, #32]
   36780:	cmp	r2, r3
   36784:	bls	36a54 <__assert_fail@plt+0x246c8>
   36788:	ldr	r3, [r4]
   3678c:	ldr	lr, [r6, #124]	; 0x7c
   36790:	b	36740 <__assert_fail@plt+0x243b4>
   36794:	mvn	r8, #0
   36798:	b	36364 <__assert_fail@plt+0x23fd8>
   3679c:	mvn	r8, #0
   367a0:	b	36134 <__assert_fail@plt+0x23da8>
   367a4:	cmp	r3, #22
   367a8:	beq	36a1c <__assert_fail@plt+0x24690>
   367ac:	mov	r2, #0
   367b0:	mov	r1, r4
   367b4:	mov	r0, r5
   367b8:	bl	35394 <__assert_fail@plt+0x23008>
   367bc:	subs	r8, r0, #0
   367c0:	beq	363cc <__assert_fail@plt+0x24040>
   367c4:	ldr	r2, [r4, #12]
   367c8:	ldr	r3, [r8]
   367cc:	ldr	r2, [r2]
   367d0:	sub	r1, r3, #7
   367d4:	cmp	r1, #3
   367d8:	ldr	r1, [r2, #4]
   367dc:	bhi	36a38 <__assert_fail@plt+0x246ac>
   367e0:	ldr	r2, [r8, #12]
   367e4:	cmp	r2, #0
   367e8:	beq	36828 <__assert_fail@plt+0x2449c>
   367ec:	ldr	r2, [r2, #8]
   367f0:	ldr	r0, [r5, #32]
   367f4:	cmp	r2, r0
   367f8:	bhi	36828 <__assert_fail@plt+0x2449c>
   367fc:	mov	r0, r5
   36800:	mov	r2, r8
   36804:	bl	35e60 <__assert_fail@plt+0x23ad4>
   36808:	cmp	r0, #0
   3680c:	beq	363f8 <__assert_fail@plt+0x2406c>
   36810:	ldr	r1, [r4, #12]
   36814:	ldr	r2, [r8, #12]
   36818:	ldr	r3, [r8]
   3681c:	ldr	r1, [r1]
   36820:	ldr	r2, [r2, #8]
   36824:	ldr	r1, [r1, #4]
   36828:	ldr	lr, [r6, #124]	; 0x7c
   3682c:	b	36180 <__assert_fail@plt+0x23df4>
   36830:	ldr	r2, [r3, #12]
   36834:	cmp	r2, #0
   36838:	beq	368a4 <__assert_fail@plt+0x24518>
   3683c:	ldr	r8, [r2]
   36840:	cmp	r8, #0
   36844:	beq	368a4 <__assert_fail@plt+0x24518>
   36848:	mov	r9, #4
   3684c:	mov	sl, #0
   36850:	ldr	r3, [r8]
   36854:	mov	r2, r7
   36858:	str	sl, [sp]
   3685c:	mov	r1, r6
   36860:	mov	r0, r5
   36864:	bl	35f74 <__assert_fail@plt+0x23be8>
   36868:	cmp	r0, #0
   3686c:	beq	363f8 <__assert_fail@plt+0x2406c>
   36870:	ldr	fp, [r6, #96]	; 0x60
   36874:	ldrd	r2, [r8, #8]
   36878:	ldr	r1, [r8, #4]
   3687c:	mov	r0, r7
   36880:	blx	fp
   36884:	cmp	r0, #0
   36888:	beq	363f8 <__assert_fail@plt+0x2406c>
   3688c:	ldr	r3, [r4, #12]
   36890:	ldr	r2, [r3, #12]
   36894:	ldr	r8, [r2, r9]
   36898:	add	r9, r9, #4
   3689c:	cmp	r8, #0
   368a0:	bne	36850 <__assert_fail@plt+0x244c4>
   368a4:	ldr	r3, [r3, #16]
   368a8:	cmp	r3, #0
   368ac:	beq	369e4 <__assert_fail@plt+0x24658>
   368b0:	ldr	fp, [r3]
   368b4:	cmp	fp, #0
   368b8:	beq	369e4 <__assert_fail@plt+0x24658>
   368bc:	mov	r3, #0
   368c0:	mov	sl, r3
   368c4:	str	r3, [sp, #20]
   368c8:	ldr	r3, [r6, #100]	; 0x64
   368cc:	ldr	r1, [fp]
   368d0:	mov	r0, r7
   368d4:	blx	r3
   368d8:	cmp	r0, #0
   368dc:	beq	363f8 <__assert_fail@plt+0x2406c>
   368e0:	ldr	r3, [fp, #4]
   368e4:	ldr	r8, [r3]
   368e8:	cmp	r8, #0
   368ec:	movne	r9, #4
   368f0:	bne	36934 <__assert_fail@plt+0x245a8>
   368f4:	b	369b0 <__assert_fail@plt+0x24624>
   368f8:	ldr	ip, [r8, #24]
   368fc:	str	lr, [sp]
   36900:	adds	ip, ip, #0
   36904:	movne	ip, #1
   36908:	ldr	r8, [r6, #104]	; 0x68
   3690c:	stmib	sp, {r0, ip}
   36910:	mov	r0, r7
   36914:	blx	r8
   36918:	cmp	r0, #0
   3691c:	beq	363f8 <__assert_fail@plt+0x2406c>
   36920:	ldr	r3, [fp, #4]
   36924:	ldr	r8, [r3, r9]
   36928:	add	r9, r9, #4
   3692c:	cmp	r8, #0
   36930:	beq	369b0 <__assert_fail@plt+0x24624>
   36934:	ldr	r3, [r8, #24]
   36938:	cmp	r3, #0
   3693c:	beq	3695c <__assert_fail@plt+0x245d0>
   36940:	str	sl, [sp]
   36944:	mov	r2, r7
   36948:	mov	r1, r6
   3694c:	mov	r0, r5
   36950:	bl	35f74 <__assert_fail@plt+0x23be8>
   36954:	cmp	r0, #0
   36958:	beq	363f8 <__assert_fail@plt+0x2406c>
   3695c:	ldr	r3, [r8, #4]
   36960:	mov	r2, r7
   36964:	str	sl, [sp]
   36968:	mov	r1, r6
   3696c:	mov	r0, r5
   36970:	bl	35f74 <__assert_fail@plt+0x23be8>
   36974:	cmp	r0, #0
   36978:	beq	363f8 <__assert_fail@plt+0x2406c>
   3697c:	ldr	r0, [r8, #20]
   36980:	ldr	r1, [r8]
   36984:	cmn	r0, #1
   36988:	ldrd	r2, [r8, #8]
   3698c:	ldr	lr, [r8, #16]
   36990:	bne	368f8 <__assert_fail@plt+0x2456c>
   36994:	str	lr, [sp]
   36998:	ldr	r8, [r6, #108]	; 0x6c
   3699c:	mov	r0, r7
   369a0:	blx	r8
   369a4:	cmp	r0, #0
   369a8:	bne	36920 <__assert_fail@plt+0x24594>
   369ac:	b	363f8 <__assert_fail@plt+0x2406c>
   369b0:	ldr	r3, [r6, #112]	; 0x70
   369b4:	mov	r0, r7
   369b8:	blx	r3
   369bc:	cmp	r0, #0
   369c0:	beq	363f8 <__assert_fail@plt+0x2406c>
   369c4:	ldr	r3, [r4, #12]
   369c8:	ldr	r2, [sp, #20]
   369cc:	ldr	r3, [r3, #16]
   369d0:	add	r2, r2, #1
   369d4:	str	r2, [sp, #20]
   369d8:	ldr	fp, [r3, r2, lsl #2]
   369dc:	cmp	fp, #0
   369e0:	bne	368c8 <__assert_fail@plt+0x2453c>
   369e4:	ldr	r3, [r6, #116]	; 0x74
   369e8:	b	363a8 <__assert_fail@plt+0x2401c>
   369ec:	mov	r3, #0
   369f0:	str	r3, [sp]
   369f4:	mov	r2, r7
   369f8:	mov	r3, r9
   369fc:	mov	r1, r6
   36a00:	mov	r0, r5
   36a04:	bl	35f74 <__assert_fail@plt+0x23be8>
   36a08:	cmp	r0, #0
   36a0c:	beq	363f8 <__assert_fail@plt+0x2406c>
   36a10:	ldr	r1, [r4]
   36a14:	mov	r3, #1
   36a18:	b	364a8 <__assert_fail@plt+0x2411c>
   36a1c:	ldr	r3, [r6, #120]	; 0x78
   36a20:	ldr	r1, [r2, #4]
   36a24:	b	36698 <__assert_fail@plt+0x2430c>
   36a28:	mov	r8, r3
   36a2c:	b	36134 <__assert_fail@plt+0x23da8>
   36a30:	mov	r8, r3
   36a34:	b	36364 <__assert_fail@plt+0x23fd8>
   36a38:	mov	r2, #0
   36a3c:	b	36828 <__assert_fail@plt+0x2449c>
   36a40:	ldr	r3, [pc, #68]	; 36a8c <__assert_fail@plt+0x24700>
   36a44:	ldr	r2, [pc, #68]	; 36a90 <__assert_fail@plt+0x24704>
   36a48:	ldr	r1, [pc, #68]	; 36a94 <__assert_fail@plt+0x24708>
   36a4c:	ldr	r0, [pc, #68]	; 36a98 <__assert_fail@plt+0x2470c>
   36a50:	bl	1238c <__assert_fail@plt>
   36a54:	ldr	r3, [pc, #48]	; 36a8c <__assert_fail@plt+0x24700>
   36a58:	ldr	r2, [pc, #60]	; 36a9c <__assert_fail@plt+0x24710>
   36a5c:	ldr	r1, [pc, #48]	; 36a94 <__assert_fail@plt+0x24708>
   36a60:	ldr	r0, [pc, #56]	; 36aa0 <__assert_fail@plt+0x24714>
   36a64:	bl	1238c <__assert_fail@plt>
   36a68:	ldr	r3, [pc, #52]	; 36aa4 <__assert_fail@plt+0x24718>
   36a6c:	ldr	r2, [pc, #52]	; 36aa8 <__assert_fail@plt+0x2471c>
   36a70:	ldr	r1, [pc, #28]	; 36a94 <__assert_fail@plt+0x24708>
   36a74:	ldr	r0, [pc, #36]	; 36aa0 <__assert_fail@plt+0x24714>
   36a78:	bl	1238c <__assert_fail@plt>
   36a7c:	bl	1232c <abort@plt>
   36a80:	strdeq	r1, [r5], -r4
   36a84:	andeq	r7, r6, r8, lsl #3
   36a88:	andeq	fp, r4, ip, ror #27
   36a8c:			; <UNDEFINED> instruction: 0x000513b8
   36a90:	andeq	r0, r0, sl, lsr #19
   36a94:	andeq	r1, r5, r0, lsr r4
   36a98:	ldrdeq	r1, [r5], -r4
   36a9c:	ldrdeq	r0, [r0], -r1
   36aa0:	andeq	r1, r5, r0, lsr #10
   36aa4:	andeq	r1, r5, ip, asr #7
   36aa8:	andeq	r0, r0, sp, ror sl
   36aac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36ab0:	mov	r4, r3
   36ab4:	ldr	r3, [r3, #12]
   36ab8:	sub	sp, sp, #8
   36abc:	mov	r7, r0
   36ac0:	mov	r6, r1
   36ac4:	mov	r5, r2
   36ac8:	cmp	r3, #6
   36acc:	ldrls	pc, [pc, r3, lsl #2]
   36ad0:	b	36d40 <__assert_fail@plt+0x249b4>
   36ad4:	andeq	r6, r3, r0, lsr fp
   36ad8:	andeq	r6, r3, r4, ror #22
   36adc:	muleq	r3, r0, fp
   36ae0:	ldrdeq	r6, [r3], -r8
   36ae4:			; <UNDEFINED> instruction: 0x00036cb8
   36ae8:	ldrdeq	r6, [r3], -r4
   36aec:	strdeq	r6, [r3], -r0
   36af0:	ldr	r3, [r4, #24]
   36af4:	mov	r1, #0
   36af8:	ldr	r3, [r3]
   36afc:	str	r1, [sp]
   36b00:	mov	r1, r6
   36b04:	bl	35f74 <__assert_fail@plt+0x23be8>
   36b08:	cmp	r0, #0
   36b0c:	beq	36cac <__assert_fail@plt+0x24920>
   36b10:	ldr	r2, [r4, #24]
   36b14:	ldr	r3, [r6, #144]	; 0x90
   36b18:	mov	r0, r5
   36b1c:	ldr	r2, [r2, #4]
   36b20:	ldr	r1, [r4, #4]
   36b24:	add	sp, sp, #8
   36b28:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36b2c:	bx	r3
   36b30:	str	r4, [sp]
   36b34:	ldr	r3, [r4, #24]
   36b38:	bl	35f74 <__assert_fail@plt+0x23be8>
   36b3c:	cmp	r0, #0
   36b40:	beq	36cac <__assert_fail@plt+0x24920>
   36b44:	ldr	r3, [r6, #128]	; 0x80
   36b48:	ldr	r1, [r4, #4]
   36b4c:	mov	r0, r5
   36b50:	blx	r3
   36b54:	adds	r0, r0, #0
   36b58:	movne	r0, #1
   36b5c:	add	sp, sp, #8
   36b60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36b64:	str	r4, [sp]
   36b68:	ldr	r3, [r4, #24]
   36b6c:	bl	35f74 <__assert_fail@plt+0x23be8>
   36b70:	cmp	r0, #0
   36b74:	beq	36cac <__assert_fail@plt+0x24920>
   36b78:	ldr	r3, [r6, #132]	; 0x84
   36b7c:	ldr	r1, [r4, #4]
   36b80:	mov	r0, r5
   36b84:	add	sp, sp, #8
   36b88:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36b8c:	bx	r3
   36b90:	ldr	r3, [r4, #24]
   36b94:	mov	r1, #0
   36b98:	ldr	r3, [r3, #4]
   36b9c:	str	r1, [sp]
   36ba0:	mov	r1, r6
   36ba4:	bl	35f74 <__assert_fail@plt+0x23be8>
   36ba8:	cmp	r0, #0
   36bac:	beq	36cac <__assert_fail@plt+0x24920>
   36bb0:	ldr	r2, [r4, #24]
   36bb4:	ldr	lr, [r6, #148]	; 0x94
   36bb8:	mov	r0, r5
   36bbc:	ldr	r3, [r2, #8]
   36bc0:	ldr	r1, [r4, #4]
   36bc4:	ldr	r2, [r2]
   36bc8:	mov	ip, lr
   36bcc:	add	sp, sp, #8
   36bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36bd4:	bx	ip
   36bd8:	ldr	r9, [r4, #24]
   36bdc:	ldr	r8, [r4, #4]
   36be0:	mov	r3, r2
   36be4:	ldr	ip, [r9, #8]
   36be8:	add	r2, r1, #172	; 0xac
   36bec:	add	r1, r0, #40	; 0x28
   36bf0:	ldr	ip, [ip, #12]
   36bf4:	add	r0, r0, #36	; 0x24
   36bf8:	str	ip, [sp]
   36bfc:	ldr	r4, [r4, #16]
   36c00:	bl	354c8 <__assert_fail@plt+0x2313c>
   36c04:	cmp	r0, #0
   36c08:	beq	36cac <__assert_fail@plt+0x24920>
   36c0c:	mov	sl, #0
   36c10:	ldr	r3, [r9]
   36c14:	mov	r2, r5
   36c18:	str	sl, [sp]
   36c1c:	mov	r1, r6
   36c20:	mov	r0, r7
   36c24:	bl	35f74 <__assert_fail@plt+0x23be8>
   36c28:	cmp	r0, sl
   36c2c:	beq	36cac <__assert_fail@plt+0x24920>
   36c30:	sub	r2, r4, #2
   36c34:	mov	r1, r8
   36c38:	clz	r2, r2
   36c3c:	ldr	r3, [r6, #152]	; 0x98
   36c40:	lsr	r2, r2, #5
   36c44:	mov	r0, r5
   36c48:	blx	r3
   36c4c:	cmp	r0, sl
   36c50:	beq	36cac <__assert_fail@plt+0x24920>
   36c54:	ldr	r4, [r9, #4]
   36c58:	cmp	r4, sl
   36c5c:	bne	36c8c <__assert_fail@plt+0x24900>
   36c60:	b	36cf0 <__assert_fail@plt+0x24964>
   36c64:	ldr	r8, [r6, #156]	; 0x9c
   36c68:	ldrd	r2, [r4, #12]
   36c6c:	ldr	r1, [r4, #4]
   36c70:	mov	r0, r5
   36c74:	blx	r8
   36c78:	cmp	r0, #0
   36c7c:	beq	36cac <__assert_fail@plt+0x24920>
   36c80:	ldr	r4, [r4]
   36c84:	cmp	r4, #0
   36c88:	beq	36cf0 <__assert_fail@plt+0x24964>
   36c8c:	ldr	r3, [r4, #8]
   36c90:	mov	r2, r5
   36c94:	str	sl, [sp]
   36c98:	mov	r1, r6
   36c9c:	mov	r0, r7
   36ca0:	bl	35f74 <__assert_fail@plt+0x23be8>
   36ca4:	cmp	r0, #0
   36ca8:	bne	36c64 <__assert_fail@plt+0x248d8>
   36cac:	mov	r0, #0
   36cb0:	add	sp, sp, #8
   36cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36cb8:	ldr	r3, [r1, #136]	; 0x88
   36cbc:	mov	r0, r2
   36cc0:	ldr	r1, [r4, #4]
   36cc4:	ldr	r2, [r4, #24]
   36cc8:	add	sp, sp, #8
   36ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36cd0:	bx	r3
   36cd4:	vldr	d0, [r4, #24]
   36cd8:	ldr	r3, [r1, #140]	; 0x8c
   36cdc:	mov	r0, r2
   36ce0:	ldr	r1, [r4, #4]
   36ce4:	add	sp, sp, #8
   36ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36cec:	bx	r3
   36cf0:	ldr	r4, [r9, #8]
   36cf4:	cmp	r4, #0
   36cf8:	bne	36d0c <__assert_fail@plt+0x24980>
   36cfc:	b	36d2c <__assert_fail@plt+0x249a0>
   36d00:	ldr	r4, [r4]
   36d04:	cmp	r4, #0
   36d08:	beq	36d2c <__assert_fail@plt+0x249a0>
   36d0c:	mov	r3, r4
   36d10:	mov	r2, r5
   36d14:	mov	r1, r6
   36d18:	mov	r0, r7
   36d1c:	bl	36d44 <__assert_fail@plt+0x249b8>
   36d20:	cmp	r0, #0
   36d24:	bne	36d00 <__assert_fail@plt+0x24974>
   36d28:	b	36cac <__assert_fail@plt+0x24920>
   36d2c:	ldr	r3, [r6, #168]	; 0xa8
   36d30:	mov	r0, r5
   36d34:	add	sp, sp, #8
   36d38:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   36d3c:	bx	r3
   36d40:	bl	1232c <abort@plt>
   36d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36d48:	mov	r8, r3
   36d4c:	sub	sp, sp, #12
   36d50:	ldr	r3, [r3, #12]
   36d54:	mov	r6, r2
   36d58:	add	sl, r0, #40	; 0x28
   36d5c:	add	fp, r1, #172	; 0xac
   36d60:	add	r9, r0, #36	; 0x24
   36d64:	str	r3, [sp]
   36d68:	mov	r5, r0
   36d6c:	mov	r7, r1
   36d70:	mov	r0, r9
   36d74:	mov	r1, sl
   36d78:	mov	r2, fp
   36d7c:	mov	r3, r6
   36d80:	bl	354c8 <__assert_fail@plt+0x2313c>
   36d84:	cmp	r0, #0
   36d88:	beq	36df4 <__assert_fail@plt+0x24a68>
   36d8c:	ldr	r3, [r8, #20]
   36d90:	cmp	r3, #0
   36d94:	beq	36e00 <__assert_fail@plt+0x24a74>
   36d98:	ldr	r3, [r7, #160]	; 0xa0
   36d9c:	ldr	r1, [r8, #12]
   36da0:	mov	r0, r6
   36da4:	blx	r3
   36da8:	cmp	r0, #0
   36dac:	beq	36df4 <__assert_fail@plt+0x24a68>
   36db0:	ldr	r3, [r8, #20]
   36db4:	cmp	r3, #0
   36db8:	beq	36e0c <__assert_fail@plt+0x24a80>
   36dbc:	ldr	r4, [r3]
   36dc0:	cmp	r4, #0
   36dc4:	bne	36dd8 <__assert_fail@plt+0x24a4c>
   36dc8:	b	36e0c <__assert_fail@plt+0x24a80>
   36dcc:	ldr	r4, [r4]
   36dd0:	cmp	r4, #0
   36dd4:	beq	36e0c <__assert_fail@plt+0x24a80>
   36dd8:	mov	r3, r4
   36ddc:	mov	r2, r6
   36de0:	mov	r1, r7
   36de4:	mov	r0, r5
   36de8:	bl	36aac <__assert_fail@plt+0x24720>
   36dec:	cmp	r0, #0
   36df0:	bne	36dcc <__assert_fail@plt+0x24a40>
   36df4:	mov	r0, #0
   36df8:	add	sp, sp, #12
   36dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36e00:	ldr	r3, [r8, #4]
   36e04:	cmp	r3, #0
   36e08:	beq	36d98 <__assert_fail@plt+0x24a0c>
   36e0c:	ldr	r4, [r8, #8]
   36e10:	cmp	r4, #0
   36e14:	beq	36e40 <__assert_fail@plt+0x24ab4>
   36e18:	mov	r3, r4
   36e1c:	mov	r2, r6
   36e20:	mov	r1, r7
   36e24:	mov	r0, r5
   36e28:	bl	36d44 <__assert_fail@plt+0x249b8>
   36e2c:	cmp	r0, #0
   36e30:	beq	36df4 <__assert_fail@plt+0x24a68>
   36e34:	ldr	r4, [r4]
   36e38:	cmp	r4, #0
   36e3c:	bne	36e18 <__assert_fail@plt+0x24a8c>
   36e40:	ldr	r3, [r8, #16]
   36e44:	mov	r2, fp
   36e48:	str	r3, [sp]
   36e4c:	mov	r1, sl
   36e50:	mov	r0, r9
   36e54:	mov	r3, r6
   36e58:	bl	354c8 <__assert_fail@plt+0x2313c>
   36e5c:	cmp	r0, #0
   36e60:	beq	36df4 <__assert_fail@plt+0x24a68>
   36e64:	ldr	r3, [r8, #20]
   36e68:	cmp	r3, #0
   36e6c:	beq	36e8c <__assert_fail@plt+0x24b00>
   36e70:	ldr	r3, [r7, #164]	; 0xa4
   36e74:	ldr	r1, [r8, #16]
   36e78:	mov	r0, r6
   36e7c:	blx	r3
   36e80:	adds	r0, r0, #0
   36e84:	movne	r0, #1
   36e88:	b	36df8 <__assert_fail@plt+0x24a6c>
   36e8c:	ldr	r3, [r8, #4]
   36e90:	cmp	r3, #0
   36e94:	movne	r0, #1
   36e98:	bne	36df8 <__assert_fail@plt+0x24a6c>
   36e9c:	b	36e70 <__assert_fail@plt+0x24ae4>
   36ea0:	ldr	r3, [r0, #4]
   36ea4:	cmp	r3, #0
   36ea8:	beq	36ed0 <__assert_fail@plt+0x24b44>
   36eac:	ldr	r3, [r0, #8]
   36eb0:	cmp	r3, #0
   36eb4:	beq	36ed0 <__assert_fail@plt+0x24b44>
   36eb8:	ldr	r0, [r0, #16]
   36ebc:	cmp	r0, #0
   36ec0:	addeq	r0, r3, #8
   36ec4:	addne	r0, r0, #20
   36ec8:	mov	r3, #3
   36ecc:	b	35584 <__assert_fail@plt+0x231f8>
   36ed0:	push	{r4, lr}
   36ed4:	mov	r2, #5
   36ed8:	ldr	r1, [pc, #32]	; 36f00 <__assert_fail@plt+0x24b74>
   36edc:	mov	r0, #0
   36ee0:	bl	11ea0 <dcgettext@plt>
   36ee4:	ldr	r3, [pc, #24]	; 36f04 <__assert_fail@plt+0x24b78>
   36ee8:	ldr	r1, [pc, #24]	; 36f08 <__assert_fail@plt+0x24b7c>
   36eec:	mov	r2, r0
   36ef0:	ldr	r0, [r3]
   36ef4:	bl	120b0 <fprintf@plt>
   36ef8:	mov	r0, #0
   36efc:	pop	{r4, pc}
   36f00:	andeq	r1, r5, r4, asr #10
   36f04:	andeq	r7, r6, r8, lsl #3
   36f08:	andeq	fp, r4, ip, ror #27
   36f0c:	push	{r4, lr}
   36f10:	mov	r0, #52	; 0x34
   36f14:	bl	11f3c <xmalloc@plt>
   36f18:	mov	r2, #52	; 0x34
   36f1c:	mov	r1, #0
   36f20:	bl	12110 <memset@plt>
   36f24:	pop	{r4, pc}
   36f28:	push	{r4, r5, r6, r7, r8, lr}
   36f2c:	cmp	r1, #0
   36f30:	mov	r4, r0
   36f34:	mov	r0, #12
   36f38:	ldr	r7, [pc, #128]	; 36fc0 <__assert_fail@plt+0x24c34>
   36f3c:	movne	r7, r1
   36f40:	bl	11f3c <xmalloc@plt>
   36f44:	mov	r6, #0
   36f48:	mov	r5, r0
   36f4c:	mov	r0, #12
   36f50:	str	r7, [r5, #4]
   36f54:	str	r6, [r5]
   36f58:	str	r6, [r5, #8]
   36f5c:	bl	11f3c <xmalloc@plt>
   36f60:	ldr	r3, [r4, #4]
   36f64:	str	r5, [r4, #8]
   36f68:	cmp	r3, r6
   36f6c:	str	r6, [r0]
   36f70:	str	r6, [r0, #8]
   36f74:	str	r5, [r0, #4]
   36f78:	strne	r0, [r3]
   36f7c:	beq	36f9c <__assert_fail@plt+0x24c10>
   36f80:	mov	r3, #0
   36f84:	str	r0, [r4, #4]
   36f88:	str	r3, [r4, #12]
   36f8c:	str	r3, [r4, #16]
   36f90:	str	r3, [r4, #20]
   36f94:	mov	r0, #1
   36f98:	pop	{r4, r5, r6, r7, r8, pc}
   36f9c:	ldr	r3, [r4]
   36fa0:	cmp	r3, #0
   36fa4:	streq	r0, [r4]
   36fa8:	beq	36f80 <__assert_fail@plt+0x24bf4>
   36fac:	ldr	r3, [pc, #16]	; 36fc4 <__assert_fail@plt+0x24c38>
   36fb0:	ldr	r2, [pc, #16]	; 36fc8 <__assert_fail@plt+0x24c3c>
   36fb4:	ldr	r1, [pc, #16]	; 36fcc <__assert_fail@plt+0x24c40>
   36fb8:	ldr	r0, [pc, #16]	; 36fd0 <__assert_fail@plt+0x24c44>
   36fbc:	bl	1238c <__assert_fail@plt>
   36fc0:	andeq	r9, r4, r4, lsr #5
   36fc4:	andeq	r1, r5, r4, ror #7
   36fc8:			; <UNDEFINED> instruction: 0x000002bb
   36fcc:	andeq	r1, r5, r0, lsr r4
   36fd0:	andeq	r1, r5, r4, ror r5
   36fd4:	push	{r4, r5, r6, lr}
   36fd8:	cmp	r1, #0
   36fdc:	ldr	r4, [r0, #4]
   36fe0:	ldr	r5, [pc, #204]	; 370b4 <__assert_fail@plt+0x24d28>
   36fe4:	movne	r5, r1
   36fe8:	cmp	r4, #0
   36fec:	beq	37080 <__assert_fail@plt+0x24cf4>
   36ff0:	ldr	r4, [r4, #4]
   36ff4:	mov	r6, r0
   36ff8:	cmp	r4, #0
   36ffc:	bne	37010 <__assert_fail@plt+0x24c84>
   37000:	b	37030 <__assert_fail@plt+0x24ca4>
   37004:	ldr	r4, [r4]
   37008:	cmp	r4, #0
   3700c:	beq	37030 <__assert_fail@plt+0x24ca4>
   37010:	mov	r1, r5
   37014:	ldr	r0, [r4, #4]
   37018:	bl	11e28 <filename_cmp@plt>
   3701c:	cmp	r0, #0
   37020:	bne	37004 <__assert_fail@plt+0x24c78>
   37024:	str	r4, [r6, #8]
   37028:	mov	r0, #1
   3702c:	pop	{r4, r5, r6, pc}
   37030:	mov	r0, #12
   37034:	bl	11f3c <xmalloc@plt>
   37038:	mov	r3, #0
   3703c:	mov	r1, r0
   37040:	ldr	r0, [r6, #8]
   37044:	str	r3, [r1]
   37048:	str	r3, [r1, #8]
   3704c:	ldr	r2, [r0]
   37050:	str	r5, [r1, #4]
   37054:	cmp	r2, r3
   37058:	bne	37064 <__assert_fail@plt+0x24cd8>
   3705c:	b	370ac <__assert_fail@plt+0x24d20>
   37060:	mov	r2, r3
   37064:	ldr	r3, [r2]
   37068:	cmp	r3, #0
   3706c:	bne	37060 <__assert_fail@plt+0x24cd4>
   37070:	str	r1, [r2]
   37074:	mov	r0, #1
   37078:	str	r1, [r6, #8]
   3707c:	pop	{r4, r5, r6, pc}
   37080:	mov	r2, #5
   37084:	ldr	r1, [pc, #44]	; 370b8 <__assert_fail@plt+0x24d2c>
   37088:	mov	r0, r4
   3708c:	bl	11ea0 <dcgettext@plt>
   37090:	ldr	r3, [pc, #36]	; 370bc <__assert_fail@plt+0x24d30>
   37094:	ldr	r1, [pc, #36]	; 370c0 <__assert_fail@plt+0x24d34>
   37098:	mov	r2, r0
   3709c:	ldr	r0, [r3]
   370a0:	bl	120b0 <fprintf@plt>
   370a4:	mov	r0, r4
   370a8:	pop	{r4, r5, r6, pc}
   370ac:	mov	r2, r0
   370b0:	b	37070 <__assert_fail@plt+0x24ce4>
   370b4:	andeq	r9, r4, r4, lsr #5
   370b8:	andeq	r1, r5, r8, lsl #11
   370bc:	andeq	r7, r6, r8, lsl #3
   370c0:	andeq	fp, r4, ip, ror #27
   370c4:	cmp	r1, #0
   370c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   370cc:	ldr	r7, [pc, #216]	; 371ac <__assert_fail@plt+0x24e20>
   370d0:	movne	r7, r1
   370d4:	subs	r9, r2, #0
   370d8:	beq	37178 <__assert_fail@plt+0x24dec>
   370dc:	ldr	r5, [r0, #4]
   370e0:	mov	r8, r3
   370e4:	cmp	r5, #0
   370e8:	mov	r4, r0
   370ec:	beq	37180 <__assert_fail@plt+0x24df4>
   370f0:	mov	r0, #12
   370f4:	bl	11f3c <xmalloc@plt>
   370f8:	mov	r5, #0
   370fc:	mov	r6, r0
   37100:	mov	r0, #24
   37104:	str	r9, [r6]
   37108:	str	r5, [r6, #4]
   3710c:	str	r5, [r6, #8]
   37110:	bl	11f3c <xmalloc@plt>
   37114:	cmp	r8, r5
   37118:	str	r6, [r4, #12]
   3711c:	mvn	lr, #0
   37120:	movne	r3, #2
   37124:	moveq	r3, #1
   37128:	mov	r1, r7
   3712c:	mov	r2, #3
   37130:	mov	ip, r0
   37134:	ldr	r0, [r4, #8]
   37138:	str	ip, [r4, #16]
   3713c:	ldr	r4, [sp, #32]
   37140:	add	r0, r0, #8
   37144:	str	r5, [ip]
   37148:	str	r5, [ip, #4]
   3714c:	str	r5, [ip, #8]
   37150:	str	r5, [ip, #20]
   37154:	str	r4, [ip, #12]
   37158:	str	ip, [r6, #8]
   3715c:	str	lr, [ip, #16]
   37160:	bl	35584 <__assert_fail@plt+0x231f8>
   37164:	subs	r3, r0, #0
   37168:	beq	37178 <__assert_fail@plt+0x24dec>
   3716c:	mov	r0, #1
   37170:	str	r6, [r3, #24]
   37174:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37178:	mov	r0, #0
   3717c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37180:	mov	r2, #5
   37184:	ldr	r1, [pc, #36]	; 371b0 <__assert_fail@plt+0x24e24>
   37188:	mov	r0, r5
   3718c:	bl	11ea0 <dcgettext@plt>
   37190:	ldr	r3, [pc, #28]	; 371b4 <__assert_fail@plt+0x24e28>
   37194:	ldr	r1, [pc, #28]	; 371b8 <__assert_fail@plt+0x24e2c>
   37198:	mov	r2, r0
   3719c:	ldr	r0, [r3]
   371a0:	bl	120b0 <fprintf@plt>
   371a4:	mov	r0, r5
   371a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   371ac:	andeq	r9, r4, r4, lsr #5
   371b0:			; <UNDEFINED> instruction: 0x000515b8
   371b4:	andeq	r7, r6, r8, lsl #3
   371b8:	andeq	fp, r4, ip, ror #27
   371bc:	cmp	r1, #0
   371c0:	clz	ip, r2
   371c4:	lsr	ip, ip, #5
   371c8:	push	{r4, r5, r6, r7, r8, lr}
   371cc:	movne	r4, ip
   371d0:	moveq	r4, #1
   371d4:	cmp	r4, #0
   371d8:	bne	37280 <__assert_fail@plt+0x24ef4>
   371dc:	mov	r6, r3
   371e0:	ldr	r3, [r0, #4]
   371e4:	mov	r8, r2
   371e8:	cmp	r3, #0
   371ec:	mov	r7, r1
   371f0:	mov	r5, r0
   371f4:	beq	37254 <__assert_fail@plt+0x24ec8>
   371f8:	ldr	r3, [r0, #12]
   371fc:	cmp	r3, #0
   37200:	beq	37254 <__assert_fail@plt+0x24ec8>
   37204:	mov	r0, #20
   37208:	bl	11f3c <xmalloc@plt>
   3720c:	ldr	r3, [r5, #12]
   37210:	ldr	r2, [sp, #24]
   37214:	str	r4, [r0]
   37218:	ldr	r1, [r3, #4]
   3721c:	str	r7, [r0, #4]
   37220:	cmp	r1, #0
   37224:	str	r8, [r0, #8]
   37228:	str	r6, [r0, #12]
   3722c:	str	r2, [r0, #16]
   37230:	bne	3723c <__assert_fail@plt+0x24eb0>
   37234:	b	37288 <__assert_fail@plt+0x24efc>
   37238:	mov	r1, r3
   3723c:	ldr	r3, [r1]
   37240:	cmp	r3, #0
   37244:	bne	37238 <__assert_fail@plt+0x24eac>
   37248:	str	r0, [r1]
   3724c:	mov	r0, #1
   37250:	pop	{r4, r5, r6, r7, r8, pc}
   37254:	mov	r2, #5
   37258:	ldr	r1, [pc, #48]	; 37290 <__assert_fail@plt+0x24f04>
   3725c:	mov	r0, #0
   37260:	bl	11ea0 <dcgettext@plt>
   37264:	ldr	r3, [pc, #40]	; 37294 <__assert_fail@plt+0x24f08>
   37268:	ldr	r1, [pc, #40]	; 37298 <__assert_fail@plt+0x24f0c>
   3726c:	mov	r2, r0
   37270:	ldr	r0, [r3]
   37274:	bl	120b0 <fprintf@plt>
   37278:	mov	r0, #0
   3727c:	pop	{r4, r5, r6, r7, r8, pc}
   37280:	mov	r0, #0
   37284:	pop	{r4, r5, r6, r7, r8, pc}
   37288:	add	r1, r3, #4
   3728c:	b	37248 <__assert_fail@plt+0x24ebc>
   37290:	andeq	r1, r5, ip, ror #11
   37294:	andeq	r7, r6, r8, lsl #3
   37298:	andeq	fp, r4, ip, ror #27
   3729c:	ldr	r2, [r0, #4]
   372a0:	push	{r4, lr}
   372a4:	cmp	r2, #0
   372a8:	beq	37314 <__assert_fail@plt+0x24f88>
   372ac:	ldr	r2, [r0, #16]
   372b0:	mov	r3, r0
   372b4:	cmp	r2, #0
   372b8:	beq	37314 <__assert_fail@plt+0x24f88>
   372bc:	ldr	r0, [r0, #12]
   372c0:	cmp	r0, #0
   372c4:	beq	37314 <__assert_fail@plt+0x24f88>
   372c8:	ldr	ip, [r2, #4]
   372cc:	cmp	ip, #0
   372d0:	bne	372e8 <__assert_fail@plt+0x24f5c>
   372d4:	str	r1, [r2, #16]
   372d8:	mov	r0, #1
   372dc:	str	ip, [r3, #12]
   372e0:	str	ip, [r3, #16]
   372e4:	pop	{r4, pc}
   372e8:	ldr	r1, [pc, #48]	; 37320 <__assert_fail@plt+0x24f94>
   372ec:	mov	r2, #5
   372f0:	mov	r0, #0
   372f4:	bl	11ea0 <dcgettext@plt>
   372f8:	ldr	r3, [pc, #36]	; 37324 <__assert_fail@plt+0x24f98>
   372fc:	ldr	r1, [pc, #36]	; 37328 <__assert_fail@plt+0x24f9c>
   37300:	mov	r2, r0
   37304:	ldr	r0, [r3]
   37308:	bl	120b0 <fprintf@plt>
   3730c:	mov	r0, #0
   37310:	pop	{r4, pc}
   37314:	mov	r2, #5
   37318:	ldr	r1, [pc, #12]	; 3732c <__assert_fail@plt+0x24fa0>
   3731c:	b	372f0 <__assert_fail@plt+0x24f64>
   37320:	andeq	r1, r5, r0, asr #12
   37324:	andeq	r7, r6, r8, lsl #3
   37328:	andeq	fp, r4, ip, ror #27
   3732c:	andeq	r1, r5, r8, lsl r6
   37330:	ldr	r3, [r0, #4]
   37334:	push	{r4, r5, r6, lr}
   37338:	cmp	r3, #0
   3733c:	beq	373b4 <__assert_fail@plt+0x25028>
   37340:	ldr	r3, [r0, #16]
   37344:	mov	r4, r0
   37348:	cmp	r3, #0
   3734c:	beq	373b4 <__assert_fail@plt+0x25028>
   37350:	mov	r0, #24
   37354:	mov	r5, r1
   37358:	bl	11f3c <xmalloc@plt>
   3735c:	mov	r3, #0
   37360:	mov	ip, r0
   37364:	ldr	r0, [r4, #16]
   37368:	str	r3, [ip]
   3736c:	str	r3, [ip, #8]
   37370:	str	r3, [ip, #20]
   37374:	str	r0, [ip, #4]
   37378:	ldr	r2, [r0, #8]
   3737c:	mvn	r3, #0
   37380:	cmp	r2, #0
   37384:	str	r5, [ip, #12]
   37388:	str	r3, [ip, #16]
   3738c:	bne	37398 <__assert_fail@plt+0x2500c>
   37390:	b	373e0 <__assert_fail@plt+0x25054>
   37394:	mov	r2, r3
   37398:	ldr	r3, [r2]
   3739c:	cmp	r3, #0
   373a0:	bne	37394 <__assert_fail@plt+0x25008>
   373a4:	str	ip, [r2]
   373a8:	mov	r0, #1
   373ac:	str	ip, [r4, #16]
   373b0:	pop	{r4, r5, r6, pc}
   373b4:	mov	r2, #5
   373b8:	ldr	r1, [pc, #40]	; 373e8 <__assert_fail@plt+0x2505c>
   373bc:	mov	r0, #0
   373c0:	bl	11ea0 <dcgettext@plt>
   373c4:	ldr	r3, [pc, #32]	; 373ec <__assert_fail@plt+0x25060>
   373c8:	ldr	r1, [pc, #32]	; 373f0 <__assert_fail@plt+0x25064>
   373cc:	mov	r2, r0
   373d0:	ldr	r0, [r3]
   373d4:	bl	120b0 <fprintf@plt>
   373d8:	mov	r0, #0
   373dc:	pop	{r4, r5, r6, pc}
   373e0:	add	r2, r0, #8
   373e4:	b	373a4 <__assert_fail@plt+0x25018>
   373e8:	andeq	r1, r5, r0, ror r6
   373ec:	andeq	r7, r6, r8, lsl #3
   373f0:	andeq	fp, r4, ip, ror #27
   373f4:	ldr	r2, [r0, #4]
   373f8:	push	{r4, lr}
   373fc:	cmp	r2, #0
   37400:	beq	37438 <__assert_fail@plt+0x250ac>
   37404:	ldr	r2, [r0, #16]
   37408:	mov	r3, r0
   3740c:	cmp	r2, #0
   37410:	beq	37438 <__assert_fail@plt+0x250ac>
   37414:	ldr	r4, [r2, #4]
   37418:	cmp	r4, #0
   3741c:	moveq	r2, #5
   37420:	ldreq	r1, [pc, #60]	; 37464 <__assert_fail@plt+0x250d8>
   37424:	beq	37440 <__assert_fail@plt+0x250b4>
   37428:	str	r1, [r2, #16]
   3742c:	mov	r0, #1
   37430:	str	r4, [r3, #16]
   37434:	pop	{r4, pc}
   37438:	ldr	r1, [pc, #40]	; 37468 <__assert_fail@plt+0x250dc>
   3743c:	mov	r2, #5
   37440:	mov	r0, #0
   37444:	bl	11ea0 <dcgettext@plt>
   37448:	ldr	r3, [pc, #28]	; 3746c <__assert_fail@plt+0x250e0>
   3744c:	ldr	r1, [pc, #28]	; 37470 <__assert_fail@plt+0x250e4>
   37450:	mov	r2, r0
   37454:	ldr	r0, [r3]
   37458:	bl	120b0 <fprintf@plt>
   3745c:	mov	r0, #0
   37460:	pop	{r4, pc}
   37464:			; <UNDEFINED> instruction: 0x000516b8
   37468:	muleq	r5, r4, r6
   3746c:	andeq	r7, r6, r8, lsl #3
   37470:	andeq	fp, r4, ip, ror #27
   37474:	push	{r4, r5, r6, r7, r8, lr}
   37478:	ldr	r4, [r0, #4]
   3747c:	cmp	r4, #0
   37480:	beq	37544 <__assert_fail@plt+0x251b8>
   37484:	mov	r7, r1
   37488:	ldr	r1, [r0, #20]
   3748c:	mov	r5, r0
   37490:	cmp	r1, #0
   37494:	mov	r6, r2
   37498:	beq	374ac <__assert_fail@plt+0x25120>
   3749c:	ldr	r2, [r1, #4]
   374a0:	ldr	r3, [r0, #8]
   374a4:	cmp	r2, r3
   374a8:	beq	3750c <__assert_fail@plt+0x25180>
   374ac:	mov	r0, #88	; 0x58
   374b0:	bl	11f3c <xmalloc@plt>
   374b4:	mov	r2, #88	; 0x58
   374b8:	mov	r1, #0
   374bc:	mov	r4, r0
   374c0:	bl	12110 <memset@plt>
   374c4:	ldr	r0, [r5, #8]
   374c8:	add	r3, r4, #8
   374cc:	add	r1, r4, #44	; 0x2c
   374d0:	mvn	r2, #0
   374d4:	str	r7, [r4, #8]
   374d8:	str	r6, [r4, #48]	; 0x30
   374dc:	str	r0, [r4, #4]
   374e0:	str	r2, [r3, #4]!
   374e4:	cmp	r3, r1
   374e8:	bne	374e0 <__assert_fail@plt+0x25154>
   374ec:	ldr	r3, [r5, #20]
   374f0:	mov	r0, #1
   374f4:	cmp	r3, #0
   374f8:	strne	r4, [r3]
   374fc:	ldreq	r3, [r5, #4]
   37500:	streq	r4, [r3, #8]
   37504:	str	r4, [r5, #20]
   37508:	pop	{r4, r5, r6, r7, r8, pc}
   3750c:	add	r2, r1, #4
   37510:	mov	r3, #0
   37514:	b	37524 <__assert_fail@plt+0x25198>
   37518:	add	r3, r3, #1
   3751c:	cmp	r3, #10
   37520:	beq	374ac <__assert_fail@plt+0x25120>
   37524:	ldr	r0, [r2, #4]!
   37528:	cmn	r0, #1
   3752c:	bne	37518 <__assert_fail@plt+0x2518c>
   37530:	add	r3, r1, r3, lsl #2
   37534:	mov	r0, #1
   37538:	str	r7, [r3, #8]
   3753c:	str	r6, [r3, #48]	; 0x30
   37540:	pop	{r4, r5, r6, r7, r8, pc}
   37544:	mov	r2, #5
   37548:	ldr	r1, [pc, #32]	; 37570 <__assert_fail@plt+0x251e4>
   3754c:	mov	r0, r4
   37550:	bl	11ea0 <dcgettext@plt>
   37554:	ldr	r3, [pc, #24]	; 37574 <__assert_fail@plt+0x251e8>
   37558:	ldr	r1, [pc, #24]	; 37578 <__assert_fail@plt+0x251ec>
   3755c:	mov	r2, r0
   37560:	ldr	r0, [r3]
   37564:	bl	120b0 <fprintf@plt>
   37568:	mov	r0, r4
   3756c:	pop	{r4, r5, r6, r7, r8, pc}
   37570:	andeq	r1, r5, ip, ror #13
   37574:	andeq	r7, r6, r8, lsl #3
   37578:	andeq	fp, r4, ip, ror #27
   3757c:	push	{r4, lr}
   37580:	mov	r2, #5
   37584:	ldr	r1, [pc, #32]	; 375ac <__assert_fail@plt+0x25220>
   37588:	mov	r0, #0
   3758c:	bl	11ea0 <dcgettext@plt>
   37590:	ldr	r3, [pc, #24]	; 375b0 <__assert_fail@plt+0x25224>
   37594:	ldr	r1, [pc, #24]	; 375b4 <__assert_fail@plt+0x25228>
   37598:	mov	r2, r0
   3759c:	ldr	r0, [r3]
   375a0:	bl	120b0 <fprintf@plt>
   375a4:	mov	r0, #0
   375a8:	pop	{r4, pc}
   375ac:	andeq	r1, r5, r0, lsl r7
   375b0:	andeq	r7, r6, r8, lsl #3
   375b4:	andeq	fp, r4, ip, ror #27
   375b8:	push	{r4, lr}
   375bc:	mov	r2, #5
   375c0:	ldr	r1, [pc, #32]	; 375e8 <__assert_fail@plt+0x2525c>
   375c4:	mov	r0, #0
   375c8:	bl	11ea0 <dcgettext@plt>
   375cc:	ldr	r3, [pc, #24]	; 375ec <__assert_fail@plt+0x25260>
   375d0:	ldr	r1, [pc, #24]	; 375f0 <__assert_fail@plt+0x25264>
   375d4:	mov	r2, r0
   375d8:	ldr	r0, [r3]
   375dc:	bl	120b0 <fprintf@plt>
   375e0:	mov	r0, #0
   375e4:	pop	{r4, pc}
   375e8:	andeq	r1, r5, ip, lsr r7
   375ec:	andeq	r7, r6, r8, lsl #3
   375f0:	andeq	fp, r4, ip, ror #27
   375f4:	cmp	r1, #0
   375f8:	beq	37628 <__assert_fail@plt+0x2529c>
   375fc:	push	{r4, lr}
   37600:	mov	r4, r2
   37604:	mov	r2, #4
   37608:	bl	36ea0 <__assert_fail@plt+0x24b14>
   3760c:	subs	r3, r0, #0
   37610:	beq	37620 <__assert_fail@plt+0x25294>
   37614:	mov	r0, #1
   37618:	str	r4, [r3, #24]
   3761c:	pop	{r4, pc}
   37620:	mov	r0, #0
   37624:	pop	{r4, pc}
   37628:	mov	r0, #0
   3762c:	bx	lr
   37630:	cmp	r1, #0
   37634:	beq	37664 <__assert_fail@plt+0x252d8>
   37638:	push	{r4, r5, r6, lr}
   3763c:	mov	r2, #5
   37640:	vmov	r4, r5, d0
   37644:	bl	36ea0 <__assert_fail@plt+0x24b14>
   37648:	cmp	r0, #0
   3764c:	beq	3765c <__assert_fail@plt+0x252d0>
   37650:	strd	r4, [r0, #24]
   37654:	mov	r0, #1
   37658:	pop	{r4, r5, r6, pc}
   3765c:	mov	r0, #0
   37660:	pop	{r4, r5, r6, pc}
   37664:	mov	r0, #0
   37668:	bx	lr
   3766c:	cmp	r2, #0
   37670:	cmpne	r1, #0
   37674:	bne	37680 <__assert_fail@plt+0x252f4>
   37678:	mov	r0, #0
   3767c:	bx	lr
   37680:	push	{r4, r5, r6, lr}
   37684:	mov	r5, r2
   37688:	mov	r2, #6
   3768c:	mov	r4, r3
   37690:	bl	36ea0 <__assert_fail@plt+0x24b14>
   37694:	subs	r6, r0, #0
   37698:	beq	376bc <__assert_fail@plt+0x25330>
   3769c:	mov	r0, #8
   376a0:	bl	11f3c <xmalloc@plt>
   376a4:	mov	r3, r0
   376a8:	mov	r0, #1
   376ac:	str	r5, [r3]
   376b0:	str	r4, [r3, #4]
   376b4:	str	r3, [r6, #24]
   376b8:	pop	{r4, r5, r6, pc}
   376bc:	mov	r0, #0
   376c0:	pop	{r4, r5, r6, pc}
   376c4:	push	{r4, lr}
   376c8:	mov	r2, #5
   376cc:	ldr	r1, [pc, #32]	; 376f4 <__assert_fail@plt+0x25368>
   376d0:	mov	r0, #0
   376d4:	bl	11ea0 <dcgettext@plt>
   376d8:	ldr	r3, [pc, #24]	; 376f8 <__assert_fail@plt+0x2536c>
   376dc:	ldr	r1, [pc, #24]	; 376fc <__assert_fail@plt+0x25370>
   376e0:	mov	r2, r0
   376e4:	ldr	r0, [r3]
   376e8:	bl	120b0 <fprintf@plt>
   376ec:	mov	r0, #0
   376f0:	pop	{r4, pc}
   376f4:	andeq	r1, r5, r4, ror #14
   376f8:	andeq	r7, r6, r8, lsl #3
   376fc:	andeq	fp, r4, ip, ror #27
   37700:	cmp	r1, #0
   37704:	clz	ip, r2
   37708:	lsr	ip, ip, #5
   3770c:	moveq	ip, #1
   37710:	cmp	ip, #0
   37714:	bne	377d0 <__assert_fail@plt+0x25444>
   37718:	push	{r4, r5, r6, lr}
   3771c:	mov	r4, r3
   37720:	ldr	r3, [r0, #4]
   37724:	mov	r5, r2
   37728:	cmp	r3, #0
   3772c:	beq	37790 <__assert_fail@plt+0x25404>
   37730:	ldr	r2, [r0, #8]
   37734:	cmp	r2, #0
   37738:	beq	37790 <__assert_fail@plt+0x25404>
   3773c:	sub	r3, r4, #1
   37740:	cmp	r3, #1
   37744:	bls	377bc <__assert_fail@plt+0x25430>
   37748:	ldr	r3, [r0, #16]
   3774c:	cmp	r3, #0
   37750:	addne	r0, r3, #20
   37754:	addeq	r0, r2, #8
   37758:	movne	r3, ip
   3775c:	mov	r2, #2
   37760:	bl	35584 <__assert_fail@plt+0x231f8>
   37764:	subs	r6, r0, #0
   37768:	beq	377b4 <__assert_fail@plt+0x25428>
   3776c:	mov	r0, #12
   37770:	bl	11f3c <xmalloc@plt>
   37774:	ldr	r2, [sp, #16]
   37778:	mov	r3, r0
   3777c:	mov	r0, #1
   37780:	strd	r4, [r3]
   37784:	str	r2, [r3, #8]
   37788:	str	r3, [r6, #24]
   3778c:	pop	{r4, r5, r6, pc}
   37790:	mov	r2, #5
   37794:	ldr	r1, [pc, #60]	; 377d8 <__assert_fail@plt+0x2544c>
   37798:	mov	r0, #0
   3779c:	bl	11ea0 <dcgettext@plt>
   377a0:	ldr	r3, [pc, #52]	; 377dc <__assert_fail@plt+0x25450>
   377a4:	ldr	r1, [pc, #52]	; 377e0 <__assert_fail@plt+0x25454>
   377a8:	mov	r2, r0
   377ac:	ldr	r0, [r3]
   377b0:	bl	120b0 <fprintf@plt>
   377b4:	mov	r0, #0
   377b8:	pop	{r4, r5, r6, pc}
   377bc:	cmp	r4, #1
   377c0:	add	r0, r2, #8
   377c4:	moveq	r3, #2
   377c8:	movne	r3, #1
   377cc:	b	3775c <__assert_fail@plt+0x253d0>
   377d0:	mov	r0, #0
   377d4:	bx	lr
   377d8:	andeq	r1, r5, r8, lsl #15
   377dc:	andeq	r7, r6, r8, lsl #3
   377e0:	andeq	fp, r4, ip, ror #27
   377e4:	push	{r4, r5, r6, lr}
   377e8:	mov	r0, #1
   377ec:	mov	r6, r1
   377f0:	mov	r1, #0
   377f4:	mov	r5, r2
   377f8:	bl	35600 <__assert_fail@plt+0x23274>
   377fc:	subs	r4, r0, #0
   37800:	beq	37818 <__assert_fail@plt+0x2548c>
   37804:	mov	r0, #8
   37808:	bl	11f3c <xmalloc@plt>
   3780c:	str	r6, [r0]
   37810:	str	r5, [r0, #4]
   37814:	str	r0, [r4, #12]
   37818:	mov	r0, r4
   3781c:	pop	{r4, r5, r6, pc}
   37820:	mov	r1, #0
   37824:	mov	r0, #2
   37828:	b	35600 <__assert_fail@plt+0x23274>
   3782c:	push	{r4, lr}
   37830:	mov	r0, #3
   37834:	mov	r4, r2
   37838:	bl	35600 <__assert_fail@plt+0x23274>
   3783c:	cmp	r0, #0
   37840:	strne	r4, [r0, #12]
   37844:	pop	{r4, pc}
   37848:	mov	r0, #4
   3784c:	b	35600 <__assert_fail@plt+0x23274>
   37850:	mov	r0, #6
   37854:	b	35600 <__assert_fail@plt+0x23274>
   37858:	mov	r0, #5
   3785c:	b	35600 <__assert_fail@plt+0x23274>
   37860:	cmp	r1, #0
   37864:	push	{r4, r5, r6, lr}
   37868:	movne	r0, #7
   3786c:	moveq	r0, #8
   37870:	mov	r1, r2
   37874:	mov	r5, r3
   37878:	bl	35600 <__assert_fail@plt+0x23274>
   3787c:	subs	r4, r0, #0
   37880:	beq	378ac <__assert_fail@plt+0x25520>
   37884:	mov	r0, #24
   37888:	bl	11f3c <xmalloc@plt>
   3788c:	mov	r3, #0
   37890:	str	r3, [r0, #4]
   37894:	str	r3, [r0, #8]
   37898:	str	r3, [r0, #12]
   3789c:	str	r3, [r0, #16]
   378a0:	str	r3, [r0, #20]
   378a4:	str	r5, [r0]
   378a8:	str	r0, [r4, #12]
   378ac:	mov	r0, r4
   378b0:	pop	{r4, r5, r6, pc}
   378b4:	cmp	r1, #0
   378b8:	push	{r4, r5, r6, lr}
   378bc:	movne	r0, #9
   378c0:	moveq	r0, #10
   378c4:	mov	r1, r2
   378c8:	mov	r6, r3
   378cc:	ldr	r5, [sp, #24]
   378d0:	bl	35600 <__assert_fail@plt+0x23274>
   378d4:	subs	r4, r0, #0
   378d8:	beq	37918 <__assert_fail@plt+0x2558c>
   378dc:	mov	r0, #24
   378e0:	bl	11f3c <xmalloc@plt>
   378e4:	ldr	r3, [sp, #28]
   378e8:	ldr	r2, [sp, #16]
   378ec:	cmp	r3, #0
   378f0:	movne	r5, r4
   378f4:	mov	r3, #0
   378f8:	str	r2, [r0, #12]
   378fc:	ldr	r2, [sp, #20]
   37900:	str	r5, [r0, #20]
   37904:	str	r6, [r0]
   37908:	str	r2, [r0, #16]
   3790c:	str	r3, [r0, #4]
   37910:	str	r3, [r0, #8]
   37914:	str	r0, [r4, #12]
   37918:	mov	r0, r4
   3791c:	pop	{r4, r5, r6, pc}
   37920:	push	{r4, r5, r6, lr}
   37924:	mov	r0, #11
   37928:	mov	r6, r1
   3792c:	mov	r1, #0
   37930:	mov	r5, r2
   37934:	bl	35600 <__assert_fail@plt+0x23274>
   37938:	subs	r4, r0, #0
   3793c:	beq	37954 <__assert_fail@plt+0x255c8>
   37940:	mov	r0, #8
   37944:	bl	11f3c <xmalloc@plt>
   37948:	str	r6, [r0]
   3794c:	str	r5, [r0, #4]
   37950:	str	r0, [r4, #12]
   37954:	mov	r0, r4
   37958:	pop	{r4, r5, r6, pc}
   3795c:	push	{r4, lr}
   37960:	subs	r4, r1, #0
   37964:	beq	37990 <__assert_fail@plt+0x25604>
   37968:	ldr	r0, [r4, #8]
   3796c:	cmp	r0, #0
   37970:	popne	{r4, pc}
   37974:	mov	r1, r0
   37978:	mov	r0, #12
   3797c:	bl	35600 <__assert_fail@plt+0x23274>
   37980:	cmp	r0, #0
   37984:	strne	r4, [r0, #12]
   37988:	strne	r0, [r4, #8]
   3798c:	pop	{r4, pc}
   37990:	mov	r0, r4
   37994:	pop	{r4, pc}
   37998:	push	{r4, r5, r6, r7, r8, lr}
   3799c:	subs	r4, r1, #0
   379a0:	moveq	r7, r4
   379a4:	beq	379d8 <__assert_fail@plt+0x2564c>
   379a8:	mov	r1, #0
   379ac:	mov	r0, #13
   379b0:	mov	r5, r3
   379b4:	mov	r6, r2
   379b8:	bl	35600 <__assert_fail@plt+0x23274>
   379bc:	subs	r7, r0, #0
   379c0:	beq	379d8 <__assert_fail@plt+0x2564c>
   379c4:	mov	r0, #12
   379c8:	bl	11f3c <xmalloc@plt>
   379cc:	stm	r0, {r4, r6}
   379d0:	str	r5, [r0, #8]
   379d4:	str	r0, [r7, #12]
   379d8:	mov	r0, r7
   379dc:	pop	{r4, r5, r6, r7, r8, pc}
   379e0:	push	{r4, lr}
   379e4:	subs	r4, r1, #0
   379e8:	beq	37a04 <__assert_fail@plt+0x25678>
   379ec:	mov	r1, #0
   379f0:	mov	r0, #14
   379f4:	bl	35600 <__assert_fail@plt+0x23274>
   379f8:	cmp	r0, #0
   379fc:	strne	r4, [r0, #12]
   37a00:	pop	{r4, pc}
   37a04:	mov	r0, r4
   37a08:	pop	{r4, pc}
   37a0c:	push	{r4, r5, r6, r7, r8, lr}
   37a10:	subs	r4, r1, #0
   37a14:	moveq	r7, r4
   37a18:	beq	37a4c <__assert_fail@plt+0x256c0>
   37a1c:	mov	r1, #0
   37a20:	mov	r0, #15
   37a24:	mov	r5, r3
   37a28:	mov	r6, r2
   37a2c:	bl	35600 <__assert_fail@plt+0x23274>
   37a30:	subs	r7, r0, #0
   37a34:	beq	37a4c <__assert_fail@plt+0x256c0>
   37a38:	mov	r0, #12
   37a3c:	bl	11f3c <xmalloc@plt>
   37a40:	stm	r0, {r4, r6}
   37a44:	str	r5, [r0, #8]
   37a48:	str	r0, [r7, #12]
   37a4c:	mov	r0, r7
   37a50:	pop	{r4, r5, r6, r7, r8, pc}
   37a54:	cmp	r1, #0
   37a58:	clz	r0, r2
   37a5c:	lsr	r0, r0, #5
   37a60:	moveq	r0, #1
   37a64:	cmp	r0, #0
   37a68:	push	{r4, r5, r6, r7, r8, lr}
   37a6c:	movne	r7, #0
   37a70:	bne	37abc <__assert_fail@plt+0x25730>
   37a74:	mov	r6, r1
   37a78:	mov	r1, r0
   37a7c:	mov	r0, #16
   37a80:	mov	r5, r2
   37a84:	mov	r4, r3
   37a88:	bl	35600 <__assert_fail@plt+0x23274>
   37a8c:	subs	r7, r0, #0
   37a90:	beq	37abc <__assert_fail@plt+0x25730>
   37a94:	mov	r0, #20
   37a98:	bl	11f3c <xmalloc@plt>
   37a9c:	ldr	r3, [sp, #24]
   37aa0:	str	r3, [r0, #12]
   37aa4:	ldr	r3, [sp, #28]
   37aa8:	str	r6, [r0]
   37aac:	str	r5, [r0, #4]
   37ab0:	str	r4, [r0, #8]
   37ab4:	str	r3, [r0, #16]
   37ab8:	str	r0, [r7, #12]
   37abc:	mov	r0, r7
   37ac0:	pop	{r4, r5, r6, r7, r8, pc}
   37ac4:	push	{r4, r5, r6, lr}
   37ac8:	subs	r4, r1, #0
   37acc:	moveq	r6, r4
   37ad0:	beq	37afc <__assert_fail@plt+0x25770>
   37ad4:	mov	r1, #0
   37ad8:	mov	r0, #17
   37adc:	mov	r5, r2
   37ae0:	bl	35600 <__assert_fail@plt+0x23274>
   37ae4:	subs	r6, r0, #0
   37ae8:	beq	37afc <__assert_fail@plt+0x25770>
   37aec:	mov	r0, #8
   37af0:	bl	11f3c <xmalloc@plt>
   37af4:	strd	r4, [r0]
   37af8:	str	r0, [r6, #12]
   37afc:	mov	r0, r6
   37b00:	pop	{r4, r5, r6, pc}
   37b04:	cmp	r1, #0
   37b08:	clz	r3, r2
   37b0c:	lsr	r3, r3, #5
   37b10:	moveq	r3, #1
   37b14:	cmp	r3, #0
   37b18:	push	{r4, r5, r6, lr}
   37b1c:	movne	r6, #0
   37b20:	bne	37b54 <__assert_fail@plt+0x257c8>
   37b24:	mov	r5, r1
   37b28:	mov	r0, #18
   37b2c:	mov	r1, r3
   37b30:	mov	r4, r2
   37b34:	bl	35600 <__assert_fail@plt+0x23274>
   37b38:	subs	r6, r0, #0
   37b3c:	beq	37b54 <__assert_fail@plt+0x257c8>
   37b40:	mov	r0, #8
   37b44:	bl	11f3c <xmalloc@plt>
   37b48:	str	r5, [r0]
   37b4c:	str	r4, [r0, #4]
   37b50:	str	r0, [r6, #12]
   37b54:	mov	r0, r6
   37b58:	pop	{r4, r5, r6, pc}
   37b5c:	push	{r4, r5, r6, r7, r8, lr}
   37b60:	subs	r4, r1, #0
   37b64:	moveq	r7, r4
   37b68:	beq	37ba4 <__assert_fail@plt+0x25818>
   37b6c:	mov	r1, #0
   37b70:	mov	r0, #19
   37b74:	mov	r5, r3
   37b78:	mov	r6, r2
   37b7c:	bl	35600 <__assert_fail@plt+0x23274>
   37b80:	subs	r7, r0, #0
   37b84:	beq	37ba4 <__assert_fail@plt+0x25818>
   37b88:	mov	r0, #16
   37b8c:	bl	11f3c <xmalloc@plt>
   37b90:	ldr	r3, [sp, #24]
   37b94:	stm	r0, {r4, r6}
   37b98:	str	r5, [r0, #8]
   37b9c:	str	r3, [r0, #12]
   37ba0:	str	r0, [r7, #12]
   37ba4:	mov	r0, r7
   37ba8:	pop	{r4, r5, r6, r7, r8, pc}
   37bac:	push	{r4, lr}
   37bb0:	subs	r4, r1, #0
   37bb4:	beq	37bd0 <__assert_fail@plt+0x25844>
   37bb8:	mov	r1, #0
   37bbc:	mov	r0, #20
   37bc0:	bl	35600 <__assert_fail@plt+0x23274>
   37bc4:	cmp	r0, #0
   37bc8:	strne	r4, [r0, #12]
   37bcc:	pop	{r4, pc}
   37bd0:	mov	r0, r4
   37bd4:	pop	{r4, pc}
   37bd8:	push	{r4, lr}
   37bdc:	subs	r4, r1, #0
   37be0:	beq	37bfc <__assert_fail@plt+0x25870>
   37be4:	mov	r1, #0
   37be8:	mov	r0, #21
   37bec:	bl	35600 <__assert_fail@plt+0x23274>
   37bf0:	cmp	r0, #0
   37bf4:	strne	r4, [r0, #12]
   37bf8:	pop	{r4, pc}
   37bfc:	mov	r0, r4
   37c00:	pop	{r4, pc}
   37c04:	push	{r4, r5, r6, r7, r8, lr}
   37c08:	mov	r0, #16
   37c0c:	mov	r7, r1
   37c10:	mov	r6, r2
   37c14:	mov	r5, r3
   37c18:	ldr	r4, [sp, #24]
   37c1c:	bl	11f3c <xmalloc@plt>
   37c20:	str	r7, [r0]
   37c24:	str	r6, [r0, #4]
   37c28:	str	r5, [r0, #8]
   37c2c:	str	r4, [r0, #12]
   37c30:	pop	{r4, r5, r6, r7, r8, pc}
   37c34:	push	{r4, r5, r6, r7, r8, lr}
   37c38:	mov	r0, #24
   37c3c:	mov	r8, r1
   37c40:	mov	r7, r2
   37c44:	mov	r6, r3
   37c48:	ldr	r5, [sp, #24]
   37c4c:	ldr	r4, [sp, #28]
   37c50:	bl	11f3c <xmalloc@plt>
   37c54:	mov	lr, #0
   37c58:	str	r8, [r0]
   37c5c:	str	r7, [r0, #4]
   37c60:	str	r6, [r0, #16]
   37c64:	str	r5, [r0, #20]
   37c68:	str	r4, [r0, #8]
   37c6c:	str	lr, [r0, #12]
   37c70:	pop	{r4, r5, r6, r7, r8, pc}
   37c74:	push	{r4, r5, r6, r7, r8, lr}
   37c78:	mov	r0, #24
   37c7c:	mov	r7, r1
   37c80:	mov	r6, r2
   37c84:	mov	r5, r3
   37c88:	ldr	r4, [sp, #24]
   37c8c:	bl	11f3c <xmalloc@plt>
   37c90:	mov	lr, #0
   37c94:	mov	r1, #1
   37c98:	str	r7, [r0]
   37c9c:	str	r6, [r0, #4]
   37ca0:	str	r5, [r0, #16]
   37ca4:	str	r4, [r0, #8]
   37ca8:	str	lr, [r0, #20]
   37cac:	str	r1, [r0, #12]
   37cb0:	pop	{r4, r5, r6, r7, r8, pc}
   37cb4:	push	{r4, r5, r6, lr}
   37cb8:	mov	r0, #8
   37cbc:	mov	r5, r1
   37cc0:	mov	r4, r2
   37cc4:	bl	11f3c <xmalloc@plt>
   37cc8:	str	r5, [r0]
   37ccc:	str	r4, [r0, #4]
   37cd0:	pop	{r4, r5, r6, pc}
   37cd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37cd8:	mov	r0, #28
   37cdc:	mov	sl, r1
   37ce0:	mov	r9, r2
   37ce4:	mov	r8, r3
   37ce8:	ldr	r7, [sp, #32]
   37cec:	ldr	r6, [sp, #36]	; 0x24
   37cf0:	ldr	r5, [sp, #40]	; 0x28
   37cf4:	ldr	r4, [sp, #44]	; 0x2c
   37cf8:	bl	11f3c <xmalloc@plt>
   37cfc:	str	sl, [r0]
   37d00:	str	r9, [r0, #4]
   37d04:	str	r8, [r0, #8]
   37d08:	str	r7, [r0, #12]
   37d0c:	str	r6, [r0, #16]
   37d10:	str	r5, [r0, #20]
   37d14:	str	r4, [r0, #24]
   37d18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37d1c:	push	{r4, r5, r6, r7, r8, lr}
   37d20:	mov	r0, #28
   37d24:	mov	r8, r1
   37d28:	mov	r7, r2
   37d2c:	mov	r6, r3
   37d30:	ldr	r5, [sp, #24]
   37d34:	ldr	r4, [sp, #28]
   37d38:	bl	11f3c <xmalloc@plt>
   37d3c:	mov	lr, #0
   37d40:	mvn	r1, #0
   37d44:	str	r8, [r0]
   37d48:	str	r7, [r0, #4]
   37d4c:	str	r6, [r0, #8]
   37d50:	str	r5, [r0, #12]
   37d54:	str	r4, [r0, #16]
   37d58:	str	lr, [r0, #24]
   37d5c:	str	r1, [r0, #20]
   37d60:	pop	{r4, r5, r6, r7, r8, pc}
   37d64:	cmp	r1, #0
   37d68:	clz	r3, r2
   37d6c:	lsr	r3, r3, #5
   37d70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37d74:	movne	r5, r3
   37d78:	moveq	r5, #1
   37d7c:	cmp	r5, #0
   37d80:	bne	37e04 <__assert_fail@plt+0x25a78>
   37d84:	ldr	r3, [r0, #4]
   37d88:	mov	r9, r2
   37d8c:	cmp	r3, #0
   37d90:	mov	r8, r1
   37d94:	mov	r4, r0
   37d98:	beq	37e10 <__assert_fail@plt+0x25a84>
   37d9c:	ldr	r3, [r0, #8]
   37da0:	cmp	r3, #0
   37da4:	beq	37e10 <__assert_fail@plt+0x25a84>
   37da8:	mov	r1, r5
   37dac:	mov	r0, #22
   37db0:	bl	35600 <__assert_fail@plt+0x23274>
   37db4:	subs	r6, r0, #0
   37db8:	beq	37e04 <__assert_fail@plt+0x25a78>
   37dbc:	mov	r0, #8
   37dc0:	bl	11f3c <xmalloc@plt>
   37dc4:	mov	r2, r5
   37dc8:	mov	r1, r8
   37dcc:	mov	r3, #3
   37dd0:	mov	r7, r0
   37dd4:	ldr	r0, [r4, #8]
   37dd8:	str	r5, [r7]
   37ddc:	str	r9, [r7, #4]
   37de0:	add	r0, r0, #8
   37de4:	str	r7, [r6, #12]
   37de8:	bl	35584 <__assert_fail@plt+0x231f8>
   37dec:	cmp	r0, #0
   37df0:	beq	37e04 <__assert_fail@plt+0x25a78>
   37df4:	str	r6, [r0, #24]
   37df8:	str	r0, [r7]
   37dfc:	mov	r0, r6
   37e00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37e04:	mov	r6, #0
   37e08:	mov	r0, r6
   37e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37e10:	mov	r2, #5
   37e14:	ldr	r1, [pc, #36]	; 37e40 <__assert_fail@plt+0x25ab4>
   37e18:	mov	r0, #0
   37e1c:	bl	11ea0 <dcgettext@plt>
   37e20:	ldr	r3, [pc, #28]	; 37e44 <__assert_fail@plt+0x25ab8>
   37e24:	ldr	r1, [pc, #28]	; 37e48 <__assert_fail@plt+0x25abc>
   37e28:	mov	r6, #0
   37e2c:	mov	r2, r0
   37e30:	ldr	r0, [r3]
   37e34:	bl	120b0 <fprintf@plt>
   37e38:	mov	r0, r6
   37e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37e40:			; <UNDEFINED> instruction: 0x000517b0
   37e44:	andeq	r7, r6, r8, lsl #3
   37e48:	andeq	fp, r4, ip, ror #27
   37e4c:	cmp	r1, #0
   37e50:	clz	r3, r2
   37e54:	lsr	r3, r3, #5
   37e58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37e5c:	movne	r6, r3
   37e60:	moveq	r6, #1
   37e64:	cmp	r6, #0
   37e68:	bne	37f10 <__assert_fail@plt+0x25b84>
   37e6c:	ldr	r5, [r0, #8]
   37e70:	mov	r4, r2
   37e74:	cmp	r5, #0
   37e78:	mov	r7, r0
   37e7c:	beq	37f48 <__assert_fail@plt+0x25bbc>
   37e80:	ldr	r3, [r2]
   37e84:	cmp	r3, #23
   37e88:	bne	37eb0 <__assert_fail@plt+0x25b24>
   37e8c:	ldr	r3, [r2, #12]
   37e90:	ldr	r3, [r3]
   37e94:	ldr	r0, [r3, #4]
   37e98:	bl	11d98 <strcmp@plt>
   37e9c:	cmp	r0, #0
   37ea0:	moveq	r5, r4
   37ea4:	bne	37f1c <__assert_fail@plt+0x25b90>
   37ea8:	mov	r0, r5
   37eac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37eb0:	mov	r8, r1
   37eb4:	mov	r0, #23
   37eb8:	mov	r1, r6
   37ebc:	bl	35600 <__assert_fail@plt+0x23274>
   37ec0:	subs	r5, r0, #0
   37ec4:	beq	37f10 <__assert_fail@plt+0x25b84>
   37ec8:	mov	r0, #8
   37ecc:	bl	11f3c <xmalloc@plt>
   37ed0:	mov	r1, r8
   37ed4:	mov	r3, #3
   37ed8:	mov	r2, #1
   37edc:	mov	r9, r0
   37ee0:	ldr	r0, [r7, #8]
   37ee4:	str	r6, [r9]
   37ee8:	str	r4, [r9, #4]
   37eec:	add	r0, r0, #8
   37ef0:	str	r9, [r5, #12]
   37ef4:	bl	35584 <__assert_fail@plt+0x231f8>
   37ef8:	cmp	r0, #0
   37efc:	beq	37f10 <__assert_fail@plt+0x25b84>
   37f00:	str	r5, [r0, #24]
   37f04:	str	r0, [r9]
   37f08:	mov	r0, r5
   37f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37f10:	mov	r5, #0
   37f14:	mov	r0, r5
   37f18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37f1c:	mov	r2, #5
   37f20:	ldr	r1, [pc, #72]	; 37f70 <__assert_fail@plt+0x25be4>
   37f24:	mov	r0, r6
   37f28:	bl	11ea0 <dcgettext@plt>
   37f2c:	ldr	r3, [pc, #64]	; 37f74 <__assert_fail@plt+0x25be8>
   37f30:	ldr	r1, [pc, #64]	; 37f78 <__assert_fail@plt+0x25bec>
   37f34:	mov	r5, r6
   37f38:	mov	r2, r0
   37f3c:	ldr	r0, [r3]
   37f40:	bl	120b0 <fprintf@plt>
   37f44:	b	37ea8 <__assert_fail@plt+0x25b1c>
   37f48:	mov	r2, #5
   37f4c:	ldr	r1, [pc, #40]	; 37f7c <__assert_fail@plt+0x25bf0>
   37f50:	mov	r0, r5
   37f54:	bl	11ea0 <dcgettext@plt>
   37f58:	ldr	r3, [pc, #20]	; 37f74 <__assert_fail@plt+0x25be8>
   37f5c:	ldr	r1, [pc, #20]	; 37f78 <__assert_fail@plt+0x25bec>
   37f60:	mov	r2, r0
   37f64:	ldr	r0, [r3]
   37f68:	bl	120b0 <fprintf@plt>
   37f6c:	b	37ea8 <__assert_fail@plt+0x25b1c>
   37f70:	strdeq	r1, [r5], -r4
   37f74:	andeq	r7, r6, r8, lsl #3
   37f78:	andeq	fp, r4, ip, ror #27
   37f7c:	ldrdeq	r1, [r5], -r4
   37f80:	push	{r4, r5, r6, lr}
   37f84:	subs	r5, r1, #0
   37f88:	beq	37fe4 <__assert_fail@plt+0x25c58>
   37f8c:	sub	r3, r2, #7
   37f90:	cmp	r3, #4
   37f94:	mov	r4, r0
   37f98:	bhi	37fc0 <__assert_fail@plt+0x25c34>
   37f9c:	mov	r0, r2
   37fa0:	mov	r1, #0
   37fa4:	bl	35600 <__assert_fail@plt+0x23274>
   37fa8:	subs	r2, r0, #0
   37fac:	beq	37fe4 <__assert_fail@plt+0x25c58>
   37fb0:	mov	r1, r5
   37fb4:	mov	r0, r4
   37fb8:	pop	{r4, r5, r6, lr}
   37fbc:	b	37e4c <__assert_fail@plt+0x25ac0>
   37fc0:	mov	r2, #5
   37fc4:	ldr	r1, [pc, #32]	; 37fec <__assert_fail@plt+0x25c60>
   37fc8:	mov	r0, #0
   37fcc:	bl	11ea0 <dcgettext@plt>
   37fd0:	ldr	r3, [pc, #24]	; 37ff0 <__assert_fail@plt+0x25c64>
   37fd4:	ldr	r1, [pc, #24]	; 37ff4 <__assert_fail@plt+0x25c68>
   37fd8:	mov	r2, r0
   37fdc:	ldr	r0, [r3]
   37fe0:	bl	120b0 <fprintf@plt>
   37fe4:	mov	r0, #0
   37fe8:	pop	{r4, r5, r6, pc}
   37fec:	andeq	r1, r5, r8, lsl r8
   37ff0:	andeq	r7, r6, r8, lsl #3
   37ff4:	andeq	fp, r4, ip, ror #27
   37ff8:	ldr	r3, [r1, #4]
   37ffc:	push	{r4, r5, r6, lr}
   38000:	cmp	r3, r2
   38004:	cmpne	r3, #0
   38008:	mov	r4, r1
   3800c:	mov	r5, r2
   38010:	bne	38020 <__assert_fail@plt+0x25c94>
   38014:	str	r5, [r4, #4]
   38018:	mov	r0, #1
   3801c:	pop	{r4, r5, r6, pc}
   38020:	ldr	r3, [pc, #40]	; 38050 <__assert_fail@plt+0x25cc4>
   38024:	mov	r2, #5
   38028:	ldr	r1, [pc, #36]	; 38054 <__assert_fail@plt+0x25cc8>
   3802c:	mov	r0, #0
   38030:	ldr	r6, [r3]
   38034:	bl	11ea0 <dcgettext@plt>
   38038:	mov	r3, r5
   3803c:	ldr	r2, [r4, #4]
   38040:	mov	r1, r0
   38044:	mov	r0, r6
   38048:	bl	120b0 <fprintf@plt>
   3804c:	b	38014 <__assert_fail@plt+0x25c88>
   38050:	andeq	r7, r6, r8, lsl #3
   38054:	andeq	r1, r5, r4, asr #16
   38058:	push	{r4, r5, r6, r7, r8, lr}
   3805c:	ldr	r6, [r0, #4]
   38060:	cmp	r6, #0
   38064:	beq	38164 <__assert_fail@plt+0x25dd8>
   38068:	ldr	r7, [r0, #16]
   3806c:	mov	r5, r1
   38070:	cmp	r7, #0
   38074:	bne	38088 <__assert_fail@plt+0x25cfc>
   38078:	b	380ec <__assert_fail@plt+0x25d60>
   3807c:	ldr	r7, [r7, #4]
   38080:	cmp	r7, #0
   38084:	beq	380ec <__assert_fail@plt+0x25d60>
   38088:	ldr	r3, [r7, #20]
   3808c:	cmp	r3, #0
   38090:	beq	3807c <__assert_fail@plt+0x25cf0>
   38094:	ldr	r4, [r3]
   38098:	cmp	r4, #0
   3809c:	bne	380b0 <__assert_fail@plt+0x25d24>
   380a0:	b	3807c <__assert_fail@plt+0x25cf0>
   380a4:	ldr	r4, [r4]
   380a8:	cmp	r4, #0
   380ac:	beq	3807c <__assert_fail@plt+0x25cf0>
   380b0:	ldr	r3, [r4, #12]
   380b4:	cmp	r3, #0
   380b8:	bne	380a4 <__assert_fail@plt+0x25d18>
   380bc:	ldr	r0, [r4, #4]
   380c0:	ldrb	r3, [r5]
   380c4:	ldrb	r2, [r0]
   380c8:	cmp	r2, r3
   380cc:	bne	380a4 <__assert_fail@plt+0x25d18>
   380d0:	mov	r1, r5
   380d4:	bl	11d98 <strcmp@plt>
   380d8:	cmp	r0, #0
   380dc:	bne	380a4 <__assert_fail@plt+0x25d18>
   380e0:	ldr	r6, [r4, #24]
   380e4:	mov	r0, r6
   380e8:	pop	{r4, r5, r6, r7, r8, pc}
   380ec:	ldr	r6, [r6, #4]
   380f0:	cmp	r6, #0
   380f4:	bne	38108 <__assert_fail@plt+0x25d7c>
   380f8:	b	380e4 <__assert_fail@plt+0x25d58>
   380fc:	ldr	r6, [r6]
   38100:	cmp	r6, #0
   38104:	beq	380e4 <__assert_fail@plt+0x25d58>
   38108:	ldr	r3, [r6, #8]
   3810c:	cmp	r3, #0
   38110:	beq	380fc <__assert_fail@plt+0x25d70>
   38114:	ldr	r4, [r3]
   38118:	cmp	r4, #0
   3811c:	bne	38130 <__assert_fail@plt+0x25da4>
   38120:	b	380fc <__assert_fail@plt+0x25d70>
   38124:	ldr	r4, [r4]
   38128:	cmp	r4, #0
   3812c:	beq	380fc <__assert_fail@plt+0x25d70>
   38130:	ldr	r3, [r4, #12]
   38134:	cmp	r3, #0
   38138:	bne	38124 <__assert_fail@plt+0x25d98>
   3813c:	ldr	r0, [r4, #4]
   38140:	ldrb	r3, [r5]
   38144:	ldrb	r2, [r0]
   38148:	cmp	r2, r3
   3814c:	bne	38124 <__assert_fail@plt+0x25d98>
   38150:	mov	r1, r5
   38154:	bl	11d98 <strcmp@plt>
   38158:	cmp	r0, #0
   3815c:	bne	38124 <__assert_fail@plt+0x25d98>
   38160:	b	380e0 <__assert_fail@plt+0x25d54>
   38164:	mov	r2, #5
   38168:	ldr	r1, [pc, #28]	; 3818c <__assert_fail@plt+0x25e00>
   3816c:	mov	r0, r6
   38170:	bl	11ea0 <dcgettext@plt>
   38174:	ldr	r3, [pc, #20]	; 38190 <__assert_fail@plt+0x25e04>
   38178:	ldr	r1, [pc, #20]	; 38194 <__assert_fail@plt+0x25e08>
   3817c:	mov	r2, r0
   38180:	ldr	r0, [r3]
   38184:	bl	120b0 <fprintf@plt>
   38188:	b	380e4 <__assert_fail@plt+0x25d58>
   3818c:	andeq	r1, r5, r0, ror r8
   38190:	andeq	r7, r6, r8, lsl #3
   38194:	andeq	fp, r4, ip, ror #27
   38198:	push	{r4, r5, r6, r7, r8, lr}
   3819c:	ldr	r7, [r0]
   381a0:	cmp	r7, #0
   381a4:	beq	38240 <__assert_fail@plt+0x25eb4>
   381a8:	mov	r8, r1
   381ac:	mov	r6, r2
   381b0:	ldr	r5, [r7, #4]
   381b4:	cmp	r5, #0
   381b8:	bne	381cc <__assert_fail@plt+0x25e40>
   381bc:	b	38248 <__assert_fail@plt+0x25ebc>
   381c0:	ldr	r5, [r5]
   381c4:	cmp	r5, #0
   381c8:	beq	38248 <__assert_fail@plt+0x25ebc>
   381cc:	ldr	r3, [r5, #8]
   381d0:	cmp	r3, #0
   381d4:	beq	381c0 <__assert_fail@plt+0x25e34>
   381d8:	ldr	r4, [r3]
   381dc:	cmp	r4, #0
   381e0:	bne	381f4 <__assert_fail@plt+0x25e68>
   381e4:	b	381c0 <__assert_fail@plt+0x25e34>
   381e8:	ldr	r4, [r4]
   381ec:	cmp	r4, #0
   381f0:	beq	381c0 <__assert_fail@plt+0x25e34>
   381f4:	ldr	r3, [r4, #12]
   381f8:	cmp	r3, #1
   381fc:	bne	381e8 <__assert_fail@plt+0x25e5c>
   38200:	cmp	r6, #0
   38204:	beq	38218 <__assert_fail@plt+0x25e8c>
   38208:	ldr	r3, [r4, #24]
   3820c:	ldr	r3, [r3]
   38210:	cmp	r3, r6
   38214:	bne	381e8 <__assert_fail@plt+0x25e5c>
   38218:	ldr	r0, [r4, #4]
   3821c:	ldrb	r3, [r8]
   38220:	ldrb	r2, [r0]
   38224:	cmp	r2, r3
   38228:	bne	381e8 <__assert_fail@plt+0x25e5c>
   3822c:	mov	r1, r8
   38230:	bl	11d98 <strcmp@plt>
   38234:	cmp	r0, #0
   38238:	bne	381e8 <__assert_fail@plt+0x25e5c>
   3823c:	ldr	r7, [r4, #24]
   38240:	mov	r0, r7
   38244:	pop	{r4, r5, r6, r7, r8, pc}
   38248:	ldr	r7, [r7]
   3824c:	cmp	r7, #0
   38250:	bne	381b0 <__assert_fail@plt+0x25e24>
   38254:	b	38240 <__assert_fail@plt+0x25eb4>
   38258:	cmp	r1, #0
   3825c:	beq	38284 <__assert_fail@plt+0x25ef8>
   38260:	push	{r4, lr}
   38264:	mov	r2, #0
   38268:	bl	35394 <__assert_fail@plt+0x23008>
   3826c:	cmp	r0, #0
   38270:	beq	3827c <__assert_fail@plt+0x25ef0>
   38274:	ldr	r0, [r0]
   38278:	pop	{r4, pc}
   3827c:	mov	r0, #0
   38280:	pop	{r4, pc}
   38284:	mov	r0, #0
   38288:	bx	lr
   3828c:	ldr	r3, [r1]
   38290:	cmp	r3, #1
   38294:	bne	382b4 <__assert_fail@plt+0x25f28>
   38298:	ldr	r3, [r1, #12]
   3829c:	ldr	r2, [r3]
   382a0:	ldr	r1, [r2]
   382a4:	cmp	r1, #0
   382a8:	bne	3828c <__assert_fail@plt+0x25f00>
   382ac:	ldr	r0, [r3, #4]
   382b0:	bx	lr
   382b4:	sub	r3, r3, #22
   382b8:	cmp	r3, #1
   382bc:	bls	382c8 <__assert_fail@plt+0x25f3c>
   382c0:	mov	r0, #0
   382c4:	bx	lr
   382c8:	ldr	r3, [r1, #12]
   382cc:	ldr	r3, [r3]
   382d0:	b	382ac <__assert_fail@plt+0x25f20>
   382d4:	cmp	r1, #0
   382d8:	beq	38344 <__assert_fail@plt+0x25fb8>
   382dc:	ldr	r0, [r1, #4]
   382e0:	cmp	r0, #0
   382e4:	bxne	lr
   382e8:	ldr	r3, [r1]
   382ec:	cmp	r3, #1
   382f0:	sub	r2, r3, #22
   382f4:	beq	3832c <__assert_fail@plt+0x25fa0>
   382f8:	cmp	r3, #0
   382fc:	bxeq	lr
   38300:	cmp	r2, #1
   38304:	bxhi	lr
   38308:	ldr	r3, [r1, #12]
   3830c:	ldr	r1, [r3, #4]
   38310:	cmp	r1, #0
   38314:	bxeq	lr
   38318:	ldr	r3, [r1, #4]
   3831c:	cmp	r3, #0
   38320:	beq	382e8 <__assert_fail@plt+0x25f5c>
   38324:	mov	r0, r3
   38328:	bx	lr
   3832c:	ldr	r3, [r1, #12]
   38330:	ldr	r3, [r3]
   38334:	ldr	r1, [r3]
   38338:	cmp	r1, #0
   3833c:	bne	38318 <__assert_fail@plt+0x25f8c>
   38340:	bx	lr
   38344:	mov	r0, r1
   38348:	bx	lr
   3834c:	cmp	r1, #0
   38350:	beq	38390 <__assert_fail@plt+0x26004>
   38354:	push	{r4, lr}
   38358:	mov	r2, #0
   3835c:	bl	35394 <__assert_fail@plt+0x23008>
   38360:	cmp	r0, #0
   38364:	beq	3837c <__assert_fail@plt+0x25ff0>
   38368:	ldr	r3, [r0]
   3836c:	cmp	r3, #13
   38370:	beq	38384 <__assert_fail@plt+0x25ff8>
   38374:	cmp	r3, #19
   38378:	beq	38384 <__assert_fail@plt+0x25ff8>
   3837c:	mov	r0, #0
   38380:	pop	{r4, pc}
   38384:	ldr	r3, [r0, #12]
   38388:	ldr	r0, [r3]
   3838c:	pop	{r4, pc}
   38390:	mov	r0, #0
   38394:	bx	lr
   38398:	cmp	r1, #0
   3839c:	beq	38404 <__assert_fail@plt+0x26078>
   383a0:	push	{r4, lr}
   383a4:	mov	r4, r2
   383a8:	mov	r2, #0
   383ac:	bl	35394 <__assert_fail@plt+0x23008>
   383b0:	cmp	r0, #0
   383b4:	beq	383cc <__assert_fail@plt+0x26040>
   383b8:	ldr	r3, [r0]
   383bc:	cmp	r3, #13
   383c0:	beq	383ec <__assert_fail@plt+0x26060>
   383c4:	cmp	r3, #19
   383c8:	beq	383d4 <__assert_fail@plt+0x26048>
   383cc:	mov	r0, #0
   383d0:	pop	{r4, pc}
   383d4:	ldr	r3, [r0, #12]
   383d8:	ldr	r3, [r3, #12]
   383dc:	str	r3, [r4]
   383e0:	ldr	r3, [r0, #12]
   383e4:	ldr	r0, [r3, #8]
   383e8:	pop	{r4, pc}
   383ec:	ldr	r3, [r0, #12]
   383f0:	ldr	r3, [r3, #8]
   383f4:	str	r3, [r4]
   383f8:	ldr	r3, [r0, #12]
   383fc:	ldr	r0, [r3, #4]
   38400:	pop	{r4, pc}
   38404:	mov	r0, #0
   38408:	bx	lr
   3840c:	cmp	r1, #0
   38410:	beq	38474 <__assert_fail@plt+0x260e8>
   38414:	push	{r4, lr}
   38418:	mov	r2, #0
   3841c:	bl	35394 <__assert_fail@plt+0x23008>
   38420:	cmp	r0, #0
   38424:	beq	3846c <__assert_fail@plt+0x260e0>
   38428:	ldr	r3, [r0]
   3842c:	sub	r3, r3, #12
   38430:	cmp	r3, #9
   38434:	ldrls	pc, [pc, r3, lsl #2]
   38438:	b	3846c <__assert_fail@plt+0x260e0>
   3843c:	andeq	r8, r3, r4, ror #8
   38440:	andeq	r8, r3, ip, ror #8
   38444:	andeq	r8, r3, r4, ror #8
   38448:	andeq	r8, r3, ip, ror #8
   3844c:	andeq	r8, r3, ip, ror #8
   38450:	andeq	r8, r3, ip, ror #8
   38454:	andeq	r8, r3, ip, ror #8
   38458:	andeq	r8, r3, ip, ror #8
   3845c:	andeq	r8, r3, r4, ror #8
   38460:	andeq	r8, r3, r4, ror #8
   38464:	ldr	r0, [r0, #12]
   38468:	pop	{r4, pc}
   3846c:	mov	r0, #0
   38470:	pop	{r4, pc}
   38474:	mov	r0, #0
   38478:	bx	lr
   3847c:	cmp	r1, #0
   38480:	beq	384bc <__assert_fail@plt+0x26130>
   38484:	push	{r4, lr}
   38488:	mov	r2, #0
   3848c:	bl	35394 <__assert_fail@plt+0x23008>
   38490:	cmp	r0, #0
   38494:	beq	384b4 <__assert_fail@plt+0x26128>
   38498:	ldr	r3, [r0]
   3849c:	sub	r3, r3, #7
   384a0:	cmp	r3, #3
   384a4:	bhi	384b4 <__assert_fail@plt+0x26128>
   384a8:	ldr	r3, [r0, #12]
   384ac:	ldr	r0, [r3]
   384b0:	pop	{r4, pc}
   384b4:	mov	r0, #0
   384b8:	pop	{r4, pc}
   384bc:	mov	r0, #0
   384c0:	bx	lr
   384c4:	cmp	r1, #0
   384c8:	ldrne	r0, [r1, #4]
   384cc:	moveq	r0, r1
   384d0:	bx	lr
   384d4:	cmp	r1, #0
   384d8:	ldrne	r0, [r1]
   384dc:	moveq	r0, r1
   384e0:	bx	lr
   384e4:	cmp	r1, #0
   384e8:	beq	38500 <__assert_fail@plt+0x26174>
   384ec:	ldr	r3, [r1, #12]
   384f0:	cmp	r3, #0
   384f4:	bne	38500 <__assert_fail@plt+0x26174>
   384f8:	ldr	r0, [r1, #16]
   384fc:	bx	lr
   38500:	mvn	r0, #0
   38504:	bx	lr
   38508:	cmp	r1, #0
   3850c:	beq	38524 <__assert_fail@plt+0x26198>
   38510:	ldr	r3, [r1, #12]
   38514:	cmp	r3, #0
   38518:	bne	38524 <__assert_fail@plt+0x26198>
   3851c:	ldr	r0, [r1, #20]
   38520:	bx	lr
   38524:	mvn	r0, #0
   38528:	bx	lr
   3852c:	cmp	r1, #0
   38530:	ldrne	r0, [r1, #8]
   38534:	moveq	r0, #3
   38538:	bx	lr
   3853c:	cmp	r1, #0
   38540:	beq	38554 <__assert_fail@plt+0x261c8>
   38544:	ldr	r0, [r1, #12]
   38548:	cmp	r0, #0
   3854c:	ldrne	r0, [r1, #16]
   38550:	bx	lr
   38554:	mov	r0, r1
   38558:	bx	lr
   3855c:	ldr	r3, [r0, #24]
   38560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38564:	add	r3, r3, #1
   38568:	ldr	r9, [r0]
   3856c:	mov	sl, #0
   38570:	str	r3, [r0, #24]
   38574:	ldr	r3, [r0, #28]
   38578:	cmp	r9, sl
   3857c:	sub	sp, sp, #20
   38580:	str	sl, [r0, #44]	; 0x2c
   38584:	str	r3, [r0, #32]
   38588:	beq	3867c <__assert_fail@plt+0x262f0>
   3858c:	mov	r7, r2
   38590:	mov	r6, r1
   38594:	mov	r5, r0
   38598:	add	fp, r1, #172	; 0xac
   3859c:	add	r3, r0, #40	; 0x28
   385a0:	str	r3, [sp, #12]
   385a4:	ldmib	r9, {r1, r2}
   385a8:	ldr	r3, [r6]
   385ac:	mov	r0, r7
   385b0:	ldr	r1, [r1, #4]
   385b4:	str	r2, [r5, #36]	; 0x24
   385b8:	str	sl, [r5, #40]	; 0x28
   385bc:	blx	r3
   385c0:	cmp	r0, #0
   385c4:	beq	38604 <__assert_fail@plt+0x26278>
   385c8:	ldr	r8, [r9, #4]
   385cc:	cmp	r8, #0
   385d0:	beq	3864c <__assert_fail@plt+0x262c0>
   385d4:	ldr	r3, [r8, #8]
   385d8:	cmp	r3, #0
   385dc:	bne	38610 <__assert_fail@plt+0x26284>
   385e0:	ldr	r8, [r8]
   385e4:	cmp	r8, #0
   385e8:	beq	3864c <__assert_fail@plt+0x262c0>
   385ec:	ldr	r3, [r6, #4]
   385f0:	ldr	r1, [r8, #4]
   385f4:	mov	r0, r7
   385f8:	blx	r3
   385fc:	cmp	r0, #0
   38600:	bne	385d4 <__assert_fail@plt+0x26248>
   38604:	mov	r0, #0
   38608:	add	sp, sp, #20
   3860c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38610:	ldr	r4, [r3]
   38614:	cmp	r4, #0
   38618:	bne	3862c <__assert_fail@plt+0x262a0>
   3861c:	b	385e0 <__assert_fail@plt+0x26254>
   38620:	ldr	r4, [r4]
   38624:	cmp	r4, #0
   38628:	beq	385e0 <__assert_fail@plt+0x26254>
   3862c:	mov	r3, r4
   38630:	mov	r2, r7
   38634:	mov	r1, r6
   38638:	mov	r0, r5
   3863c:	bl	36aac <__assert_fail@plt+0x24720>
   38640:	cmp	r0, #0
   38644:	bne	38620 <__assert_fail@plt+0x26294>
   38648:	b	38604 <__assert_fail@plt+0x26278>
   3864c:	mvn	r3, #0
   38650:	str	r3, [sp]
   38654:	mov	r2, fp
   38658:	mov	r3, r7
   3865c:	ldr	r1, [sp, #12]
   38660:	add	r0, r5, #36	; 0x24
   38664:	bl	354c8 <__assert_fail@plt+0x2313c>
   38668:	cmp	r0, #0
   3866c:	beq	38604 <__assert_fail@plt+0x26278>
   38670:	ldr	r9, [r9]
   38674:	cmp	r9, #0
   38678:	bne	385a4 <__assert_fail@plt+0x26218>
   3867c:	mov	r0, #1
   38680:	b	38608 <__assert_fail@plt+0x2627c>
   38684:	push	{r4, r5, lr}
   38688:	ldr	lr, [r0]
   3868c:	ldr	r4, [pc, #136]	; 3871c <__assert_fail@plt+0x26390>
   38690:	ldrb	r3, [lr]
   38694:	lsl	r2, r3, #1
   38698:	ldrh	r2, [r4, r2]
   3869c:	ands	r2, r2, #4
   386a0:	beq	38714 <__assert_fail@plt+0x26388>
   386a4:	add	ip, lr, #1
   386a8:	sub	r3, r3, #48	; 0x30
   386ac:	str	r3, [r1]
   386b0:	str	ip, [r0]
   386b4:	ldrb	r2, [lr, #1]
   386b8:	lsl	lr, r2, #1
   386bc:	ldrh	lr, [r4, lr]
   386c0:	tst	lr, #4
   386c4:	bne	386d4 <__assert_fail@plt+0x26348>
   386c8:	mov	r0, #1
   386cc:	pop	{r4, r5, pc}
   386d0:	mov	ip, r5
   386d4:	add	r3, r3, r3, lsl #2
   386d8:	add	r5, ip, #1
   386dc:	add	r3, r2, r3, lsl #1
   386e0:	ldrb	r2, [ip, #1]
   386e4:	sub	r3, r3, #48	; 0x30
   386e8:	lsl	lr, r2, #1
   386ec:	ldrh	lr, [r4, lr]
   386f0:	tst	lr, #4
   386f4:	bne	386d0 <__assert_fail@plt+0x26344>
   386f8:	cmp	r2, #95	; 0x5f
   386fc:	bne	386c8 <__assert_fail@plt+0x2633c>
   38700:	add	ip, ip, #2
   38704:	str	ip, [r0]
   38708:	mov	r0, #1
   3870c:	str	r3, [r1]
   38710:	pop	{r4, r5, pc}
   38714:	mov	r0, r2
   38718:	pop	{r4, r5, pc}
   3871c:	strdeq	r5, [r6], -r8
   38720:	ldr	r3, [pc, #52]	; 3875c <__assert_fail@plt+0x263d0>
   38724:	push	{r4, r5, r6, lr}
   38728:	mov	r2, #5
   3872c:	mov	r6, r0
   38730:	mov	r5, r1
   38734:	mov	r0, #0
   38738:	ldr	r1, [pc, #32]	; 38760 <__assert_fail@plt+0x263d4>
   3873c:	ldr	r4, [r3]
   38740:	bl	11ea0 <dcgettext@plt>
   38744:	mov	r3, r6
   38748:	mov	r2, r5
   3874c:	mov	r1, r0
   38750:	mov	r0, r4
   38754:	pop	{r4, r5, r6, lr}
   38758:	b	120b0 <fprintf@plt>
   3875c:	andeq	r7, r6, r8, lsl #3
   38760:	andeq	r1, r5, r4, lsr #17
   38764:	ldr	r3, [pc, #44]	; 38798 <__assert_fail@plt+0x2640c>
   38768:	push	{r4, r5, r6, lr}
   3876c:	mov	r2, #5
   38770:	mov	r5, r0
   38774:	ldr	r1, [pc, #32]	; 3879c <__assert_fail@plt+0x26410>
   38778:	mov	r0, #0
   3877c:	ldr	r4, [r3]
   38780:	bl	11ea0 <dcgettext@plt>
   38784:	mov	r2, r5
   38788:	mov	r1, r0
   3878c:	mov	r0, r4
   38790:	pop	{r4, r5, r6, lr}
   38794:	b	120b0 <fprintf@plt>
   38798:	andeq	r7, r6, r8, lsl #3
   3879c:			; <UNDEFINED> instruction: 0x000518b8
   387a0:	ldr	r3, [pc, #44]	; 387d4 <__assert_fail@plt+0x26448>
   387a4:	push	{r4, r5, r6, lr}
   387a8:	mov	r2, #5
   387ac:	mov	r5, r0
   387b0:	ldr	r1, [pc, #32]	; 387d8 <__assert_fail@plt+0x2644c>
   387b4:	mov	r0, #0
   387b8:	ldr	r4, [r3]
   387bc:	bl	11ea0 <dcgettext@plt>
   387c0:	mov	r2, r5
   387c4:	mov	r1, r0
   387c8:	mov	r0, r4
   387cc:	pop	{r4, r5, r6, lr}
   387d0:	b	120b0 <fprintf@plt>
   387d4:	andeq	r7, r6, r8, lsl #3
   387d8:	ldrdeq	r1, [r5], -r0
   387dc:	push	{r4, r5, r6, lr}
   387e0:	mov	r6, r1
   387e4:	ldr	r3, [r0, #20]
   387e8:	ldr	r1, [r0, #24]
   387ec:	mov	r4, r0
   387f0:	cmp	r3, r1
   387f4:	mov	r5, r2
   387f8:	ldr	r0, [r0, #16]
   387fc:	bcs	3881c <__assert_fail@plt+0x26490>
   38800:	add	r1, r0, r3, lsl #3
   38804:	str	r6, [r0, r3, lsl #3]
   38808:	add	r3, r3, #1
   3880c:	str	r5, [r1, #4]
   38810:	mov	r0, #1
   38814:	str	r3, [r4, #20]
   38818:	pop	{r4, r5, r6, pc}
   3881c:	add	r1, r1, #10
   38820:	str	r1, [r4, #24]
   38824:	lsl	r1, r1, #3
   38828:	bl	11ed0 <xrealloc@plt>
   3882c:	ldr	r3, [r4, #20]
   38830:	str	r0, [r4, #16]
   38834:	b	38800 <__assert_fail@plt+0x26474>
   38838:	push	{r4, r5, r6, lr}
   3883c:	mov	r4, r1
   38840:	mov	r5, r0
   38844:	add	r0, r1, #1
   38848:	bl	11f3c <xmalloc@plt>
   3884c:	mov	r2, r4
   38850:	mov	r1, r5
   38854:	bl	11e40 <memcpy@plt>
   38858:	mov	r2, #0
   3885c:	strb	r2, [r0, r4]
   38860:	pop	{r4, r5, r6, pc}
   38864:	push	{r4, r5, r6, r7, r8, lr}
   38868:	subs	r6, r1, #0
   3886c:	ldr	r4, [r0]
   38870:	movne	r3, #0
   38874:	strne	r3, [r6]
   38878:	cmp	r4, r2
   3887c:	bcs	3888c <__assert_fail@plt+0x26500>
   38880:	ldrb	r3, [r4]
   38884:	cmp	r3, #0
   38888:	bne	38894 <__assert_fail@plt+0x26508>
   3888c:	mov	r0, #0
   38890:	pop	{r4, r5, r6, r7, r8, pc}
   38894:	mov	r5, r0
   38898:	bl	120ec <__errno_location@plt>
   3889c:	mov	r7, #0
   388a0:	mov	r1, r5
   388a4:	mov	r2, r7
   388a8:	str	r7, [r0]
   388ac:	mov	r8, r0
   388b0:	mov	r0, r4
   388b4:	bl	12068 <strtoul@plt>
   388b8:	cmn	r0, #1
   388bc:	popne	{r4, r5, r6, r7, r8, pc}
   388c0:	ldr	r3, [r8]
   388c4:	cmp	r3, r7
   388c8:	popeq	{r4, r5, r6, r7, r8, pc}
   388cc:	cmp	r6, r7
   388d0:	beq	388e4 <__assert_fail@plt+0x26558>
   388d4:	mov	r3, #1
   388d8:	mov	r0, r7
   388dc:	str	r3, [r6]
   388e0:	pop	{r4, r5, r6, r7, r8, pc}
   388e4:	mov	r2, #5
   388e8:	ldr	r1, [pc, #24]	; 38908 <__assert_fail@plt+0x2657c>
   388ec:	mov	r0, r6
   388f0:	bl	11ea0 <dcgettext@plt>
   388f4:	mov	r1, r0
   388f8:	mov	r0, r4
   388fc:	bl	38720 <__assert_fail@plt+0x26394>
   38900:	mov	r0, r6
   38904:	pop	{r4, r5, r6, r7, r8, pc}
   38908:	andeq	r1, r5, r0, ror #17
   3890c:	push	{r4, r5, r6, r7, r8, lr}
   38910:	mov	r6, r1
   38914:	ldr	r5, [r0]
   38918:	ldrb	r3, [r5]
   3891c:	cmp	r3, #40	; 0x28
   38920:	beq	38940 <__assert_fail@plt+0x265b4>
   38924:	mov	r1, #0
   38928:	str	r1, [r6]
   3892c:	bl	38864 <__assert_fail@plt+0x264d8>
   38930:	mov	r3, #1
   38934:	str	r0, [r6, #4]
   38938:	mov	r0, r3
   3893c:	pop	{r4, r5, r6, r7, r8, pc}
   38940:	add	r3, r5, #1
   38944:	str	r3, [r0]
   38948:	mov	r1, #0
   3894c:	mov	r4, r0
   38950:	mov	r7, r2
   38954:	bl	38864 <__assert_fail@plt+0x264d8>
   38958:	ldr	r3, [r4]
   3895c:	str	r0, [r6]
   38960:	ldrb	r2, [r3]
   38964:	cmp	r2, #44	; 0x2c
   38968:	bne	389a4 <__assert_fail@plt+0x26618>
   3896c:	add	r3, r3, #1
   38970:	str	r3, [r4]
   38974:	mov	r2, r7
   38978:	mov	r1, #0
   3897c:	mov	r0, r4
   38980:	bl	38864 <__assert_fail@plt+0x264d8>
   38984:	ldr	r2, [r4]
   38988:	str	r0, [r6, #4]
   3898c:	ldrb	r3, [r2]
   38990:	cmp	r3, #41	; 0x29
   38994:	moveq	r3, #1
   38998:	addeq	r2, r2, r3
   3899c:	streq	r2, [r4]
   389a0:	beq	38938 <__assert_fail@plt+0x265ac>
   389a4:	mov	r0, r5
   389a8:	bl	387a0 <__assert_fail@plt+0x26414>
   389ac:	mov	r3, #0
   389b0:	mov	r0, r3
   389b4:	pop	{r4, r5, r6, r7, r8, pc}
   389b8:	push	{r4, r5, r6, r7, r8, lr}
   389bc:	mov	r7, r2
   389c0:	ldr	r5, [sp, #24]
   389c4:	mov	r2, r3
   389c8:	sub	ip, r5, #1
   389cc:	cmp	ip, #1
   389d0:	ldr	r8, [sp, #28]
   389d4:	bls	38a30 <__assert_fail@plt+0x266a4>
   389d8:	ldr	r3, [r1, #52]	; 0x34
   389dc:	cmp	r3, #0
   389e0:	beq	38a30 <__assert_fail@plt+0x266a4>
   389e4:	ldr	r3, [r1, #32]
   389e8:	cmp	r3, #0
   389ec:	bne	389fc <__assert_fail@plt+0x26670>
   389f0:	ldr	r3, [r1, #36]	; 0x24
   389f4:	cmp	r3, #0
   389f8:	bne	38a30 <__assert_fail@plt+0x266a4>
   389fc:	mov	r0, #20
   38a00:	mov	r4, r1
   38a04:	mov	r6, r2
   38a08:	bl	11f3c <xmalloc@plt>
   38a0c:	ldr	r3, [r4, #64]	; 0x40
   38a10:	str	r7, [r0, #4]
   38a14:	str	r6, [r0, #8]
   38a18:	str	r5, [r0, #12]
   38a1c:	str	r8, [r0, #16]
   38a20:	str	r3, [r0]
   38a24:	str	r0, [r4, #64]	; 0x40
   38a28:	mov	r0, #1
   38a2c:	pop	{r4, r5, r6, r7, r8, pc}
   38a30:	str	r8, [sp, #24]
   38a34:	mov	r3, r5
   38a38:	mov	r1, r7
   38a3c:	pop	{r4, r5, r6, r7, r8, lr}
   38a40:	b	37700 <__assert_fail@plt+0x25374>
   38a44:	push	{r4, r5, r6, lr}
   38a48:	mov	r6, r1
   38a4c:	ldr	r4, [r1]
   38a50:	sub	sp, sp, #8
   38a54:	cmp	r4, #0
   38a58:	beq	38aa4 <__assert_fail@plt+0x26718>
   38a5c:	mov	r5, r0
   38a60:	b	38a74 <__assert_fail@plt+0x266e8>
   38a64:	ldr	r4, [r4]
   38a68:	bl	11e10 <free@plt>
   38a6c:	cmp	r4, #0
   38a70:	beq	38aa4 <__assert_fail@plt+0x26718>
   38a74:	ldr	r0, [r4, #16]
   38a78:	ldrd	r2, [r4, #8]
   38a7c:	ldr	r1, [r4, #4]
   38a80:	str	r0, [sp]
   38a84:	mov	r0, r5
   38a88:	bl	37700 <__assert_fail@plt+0x25374>
   38a8c:	subs	r3, r0, #0
   38a90:	mov	r0, r4
   38a94:	bne	38a64 <__assert_fail@plt+0x266d8>
   38a98:	mov	r0, r3
   38a9c:	add	sp, sp, #8
   38aa0:	pop	{r4, r5, r6, pc}
   38aa4:	mov	r3, #1
   38aa8:	mov	r2, #0
   38aac:	mov	r0, r3
   38ab0:	str	r2, [r6]
   38ab4:	add	sp, sp, #8
   38ab8:	pop	{r4, r5, r6, pc}
   38abc:	push	{r4, r5, r6, r7, r8, lr}
   38ac0:	ldr	r4, [r2]
   38ac4:	cmp	r4, #0
   38ac8:	blt	38b5c <__assert_fail@plt+0x267d0>
   38acc:	ldr	r3, [r0]
   38ad0:	cmp	r3, r4
   38ad4:	bls	38b5c <__assert_fail@plt+0x267d0>
   38ad8:	ldr	r7, [r2, #4]
   38adc:	cmp	r7, #0
   38ae0:	blt	38bac <__assert_fail@plt+0x26820>
   38ae4:	ldr	r6, [r1]
   38ae8:	cmp	r7, #15
   38aec:	add	r6, r6, r4, lsl #2
   38af0:	ble	38b44 <__assert_fail@plt+0x267b8>
   38af4:	mov	r5, r7
   38af8:	b	38b08 <__assert_fail@plt+0x2677c>
   38afc:	cmp	r5, #15
   38b00:	mov	r6, r4
   38b04:	ble	38b40 <__assert_fail@plt+0x267b4>
   38b08:	ldr	r4, [r6]
   38b0c:	sub	r5, r5, #16
   38b10:	cmp	r4, #0
   38b14:	bne	38afc <__assert_fail@plt+0x26770>
   38b18:	mov	r0, #68	; 0x44
   38b1c:	bl	11f3c <xmalloc@plt>
   38b20:	mov	r1, r4
   38b24:	mov	r2, #68	; 0x44
   38b28:	str	r0, [r6]
   38b2c:	bl	12110 <memset@plt>
   38b30:	ldr	r4, [r6]
   38b34:	cmp	r5, #15
   38b38:	mov	r6, r4
   38b3c:	bgt	38b08 <__assert_fail@plt+0x2677c>
   38b40:	and	r7, r7, #15
   38b44:	ldr	r4, [r6]
   38b48:	cmp	r4, #0
   38b4c:	beq	38b8c <__assert_fail@plt+0x26800>
   38b50:	add	r0, r4, #4
   38b54:	add	r0, r0, r7, lsl #2
   38b58:	pop	{r4, r5, r6, r7, r8, pc}
   38b5c:	ldr	r3, [pc, #120]	; 38bdc <__assert_fail@plt+0x26850>
   38b60:	mov	r2, #5
   38b64:	ldr	r1, [pc, #116]	; 38be0 <__assert_fail@plt+0x26854>
   38b68:	mov	r0, #0
   38b6c:	ldr	r5, [r3]
   38b70:	bl	11ea0 <dcgettext@plt>
   38b74:	mov	r2, r4
   38b78:	mov	r1, r0
   38b7c:	mov	r0, r5
   38b80:	bl	120b0 <fprintf@plt>
   38b84:	mov	r0, #0
   38b88:	pop	{r4, r5, r6, r7, r8, pc}
   38b8c:	mov	r0, #68	; 0x44
   38b90:	bl	11f3c <xmalloc@plt>
   38b94:	mov	r1, r4
   38b98:	mov	r2, #68	; 0x44
   38b9c:	str	r0, [r6]
   38ba0:	bl	12110 <memset@plt>
   38ba4:	ldr	r4, [r6]
   38ba8:	b	38b50 <__assert_fail@plt+0x267c4>
   38bac:	ldr	r3, [pc, #40]	; 38bdc <__assert_fail@plt+0x26850>
   38bb0:	mov	r2, #5
   38bb4:	ldr	r1, [pc, #40]	; 38be4 <__assert_fail@plt+0x26858>
   38bb8:	mov	r0, #0
   38bbc:	ldr	r4, [r3]
   38bc0:	bl	11ea0 <dcgettext@plt>
   38bc4:	mov	r2, r7
   38bc8:	mov	r1, r0
   38bcc:	mov	r0, r4
   38bd0:	bl	120b0 <fprintf@plt>
   38bd4:	mov	r0, #0
   38bd8:	pop	{r4, r5, r6, r7, r8, pc}
   38bdc:	andeq	r7, r6, r8, lsl #3
   38be0:	strdeq	r1, [r5], -r4
   38be4:	andeq	r1, r5, r8, lsl r9
   38be8:	push	{r4, r5, r6, lr}
   38bec:	mov	r6, r0
   38bf0:	ldr	r4, [r2]
   38bf4:	mov	r0, r1
   38bf8:	cmp	r4, #0
   38bfc:	bne	38c0c <__assert_fail@plt+0x26880>
   38c00:	ldr	r5, [r2, #4]
   38c04:	cmp	r5, #0
   38c08:	blt	38c3c <__assert_fail@plt+0x268b0>
   38c0c:	add	r1, r0, #72	; 0x48
   38c10:	add	r0, r0, #68	; 0x44
   38c14:	bl	38abc <__assert_fail@plt+0x26730>
   38c18:	subs	r1, r0, #0
   38c1c:	beq	38cf4 <__assert_fail@plt+0x26968>
   38c20:	ldr	r0, [r1]
   38c24:	cmp	r0, #0
   38c28:	popne	{r4, r5, r6, pc}
   38c2c:	mov	r2, r0
   38c30:	mov	r0, r6
   38c34:	pop	{r4, r5, r6, lr}
   38c38:	b	377e4 <__assert_fail@plt+0x25458>
   38c3c:	add	r3, r5, #34	; 0x22
   38c40:	cmp	r3, #33	; 0x21
   38c44:	bhi	38fd8 <__assert_fail@plt+0x26c4c>
   38c48:	rsb	r4, r5, r5, lsl #30
   38c4c:	rsb	r5, r5, #0
   38c50:	add	r4, r1, r4, lsl #2
   38c54:	ldr	r0, [r4, #76]	; 0x4c
   38c58:	cmp	r0, #0
   38c5c:	popne	{r4, r5, r6, pc}
   38c60:	sub	r5, r5, #2
   38c64:	cmp	r5, #32
   38c68:	ldrls	pc, [pc, r5, lsl #2]
   38c6c:	b	39008 <__assert_fail@plt+0x26c7c>
   38c70:	andeq	r8, r3, r4, ror lr
   38c74:	andeq	r8, r3, ip, asr lr
   38c78:	andeq	r8, r3, r4, asr #28
   38c7c:	andeq	r8, r3, ip, lsr #28
   38c80:	andeq	r8, r3, r4, lsl lr
   38c84:	strdeq	r8, [r3], -ip
   38c88:	andeq	r8, r3, r4, ror #27
   38c8c:	andeq	r8, r3, ip, asr #27
   38c90:			; <UNDEFINED> instruction: 0x00038db4
   38c94:	andeq	r8, r3, r4, lsr #27
   38c98:	muleq	r3, r0, sp
   38c9c:	andeq	r8, r3, ip, ror sp
   38ca0:	andeq	r8, r3, r8, ror #26
   38ca4:	andeq	r8, r3, r0, asr sp
   38ca8:	andeq	r8, r3, ip, lsr sp
   38cac:	andeq	r8, r3, r8, lsr #26
   38cb0:	andeq	r8, r3, r4, lsl sp
   38cb4:	strdeq	r8, [r3], -ip
   38cb8:	andeq	r8, r3, r0, asr #31
   38cbc:	andeq	r8, r3, ip, lsr #31
   38cc0:	muleq	r3, r8, pc	; <UNPREDICTABLE>
   38cc4:	andeq	r8, r3, r4, lsl #31
   38cc8:	andeq	r8, r3, r0, ror pc
   38ccc:	andeq	r8, r3, ip, asr pc
   38cd0:	andeq	r8, r3, r8, asr #30
   38cd4:	andeq	r8, r3, r0, lsr pc
   38cd8:	andeq	r8, r3, r8, lsl pc
   38cdc:	andeq	r8, r3, r0, lsl #30
   38ce0:	andeq	r8, r3, r8, ror #29
   38ce4:	ldrdeq	r8, [r3], -r0
   38ce8:			; <UNDEFINED> instruction: 0x00038eb8
   38cec:	andeq	r8, r3, r4, lsr #29
   38cf0:	andeq	r8, r3, ip, lsl #29
   38cf4:	mov	r0, r1
   38cf8:	pop	{r4, r5, r6, pc}
   38cfc:	ldr	r1, [pc, #796]	; 39020 <__assert_fail@plt+0x26c94>
   38d00:	mov	r2, r0
   38d04:	mov	r0, r6
   38d08:	bl	37d64 <__assert_fail@plt+0x259d8>
   38d0c:	str	r0, [r4, #76]	; 0x4c
   38d10:	pop	{r4, r5, r6, pc}
   38d14:	mov	r1, #8
   38d18:	mov	r0, r6
   38d1c:	bl	37848 <__assert_fail@plt+0x254bc>
   38d20:	ldr	r1, [pc, #764]	; 39024 <__assert_fail@plt+0x26c98>
   38d24:	b	38d00 <__assert_fail@plt+0x26974>
   38d28:	mov	r1, #4
   38d2c:	mov	r0, r6
   38d30:	bl	37848 <__assert_fail@plt+0x254bc>
   38d34:	ldr	r1, [pc, #748]	; 39028 <__assert_fail@plt+0x26c9c>
   38d38:	b	38d00 <__assert_fail@plt+0x26974>
   38d3c:	mov	r1, #4
   38d40:	mov	r0, r6
   38d44:	bl	37850 <__assert_fail@plt+0x254c4>
   38d48:	ldr	r1, [pc, #732]	; 3902c <__assert_fail@plt+0x26ca0>
   38d4c:	b	38d00 <__assert_fail@plt+0x26974>
   38d50:	mov	r1, #4
   38d54:	mov	r2, #0
   38d58:	mov	r0, r6
   38d5c:	bl	3782c <__assert_fail@plt+0x254a0>
   38d60:	ldr	r1, [pc, #712]	; 39030 <__assert_fail@plt+0x26ca4>
   38d64:	b	38d00 <__assert_fail@plt+0x26974>
   38d68:	mov	r1, #8
   38d6c:	mov	r0, r6
   38d70:	bl	37848 <__assert_fail@plt+0x254bc>
   38d74:	ldr	r1, [pc, #696]	; 39034 <__assert_fail@plt+0x26ca8>
   38d78:	b	38d00 <__assert_fail@plt+0x26974>
   38d7c:	mov	r1, #8
   38d80:	mov	r0, r6
   38d84:	bl	37848 <__assert_fail@plt+0x254bc>
   38d88:	ldr	r1, [pc, #680]	; 39038 <__assert_fail@plt+0x26cac>
   38d8c:	b	38d00 <__assert_fail@plt+0x26974>
   38d90:	mov	r1, #4
   38d94:	mov	r0, r6
   38d98:	bl	37848 <__assert_fail@plt+0x254bc>
   38d9c:	ldr	r1, [pc, #664]	; 3903c <__assert_fail@plt+0x26cb0>
   38da0:	b	38d00 <__assert_fail@plt+0x26974>
   38da4:	mov	r0, r6
   38da8:	bl	37820 <__assert_fail@plt+0x25494>
   38dac:	ldr	r1, [pc, #652]	; 39040 <__assert_fail@plt+0x26cb4>
   38db0:	b	38d00 <__assert_fail@plt+0x26974>
   38db4:	mov	r1, #4
   38db8:	mov	r2, #1
   38dbc:	mov	r0, r6
   38dc0:	bl	3782c <__assert_fail@plt+0x254a0>
   38dc4:	ldr	r1, [pc, #632]	; 39044 <__assert_fail@plt+0x26cb8>
   38dc8:	b	38d00 <__assert_fail@plt+0x26974>
   38dcc:	mov	r1, #4
   38dd0:	mov	r2, #1
   38dd4:	mov	r0, r6
   38dd8:	bl	3782c <__assert_fail@plt+0x254a0>
   38ddc:	ldr	r1, [pc, #612]	; 39048 <__assert_fail@plt+0x26cbc>
   38de0:	b	38d00 <__assert_fail@plt+0x26974>
   38de4:	mov	r1, #4
   38de8:	mov	r2, #1
   38dec:	mov	r0, r6
   38df0:	bl	3782c <__assert_fail@plt+0x254a0>
   38df4:	ldr	r1, [pc, #592]	; 3904c <__assert_fail@plt+0x26cc0>
   38df8:	b	38d00 <__assert_fail@plt+0x26974>
   38dfc:	mov	r1, #2
   38e00:	mov	r2, #1
   38e04:	mov	r0, r6
   38e08:	bl	3782c <__assert_fail@plt+0x254a0>
   38e0c:	ldr	r1, [pc, #572]	; 39050 <__assert_fail@plt+0x26cc4>
   38e10:	b	38d00 <__assert_fail@plt+0x26974>
   38e14:	mov	r1, #1
   38e18:	mov	r2, #0
   38e1c:	mov	r0, r6
   38e20:	bl	3782c <__assert_fail@plt+0x254a0>
   38e24:	ldr	r1, [pc, #552]	; 39054 <__assert_fail@plt+0x26cc8>
   38e28:	b	38d00 <__assert_fail@plt+0x26974>
   38e2c:	mov	r2, #1
   38e30:	mov	r1, r2
   38e34:	mov	r0, r6
   38e38:	bl	3782c <__assert_fail@plt+0x254a0>
   38e3c:	ldr	r1, [pc, #532]	; 39058 <__assert_fail@plt+0x26ccc>
   38e40:	b	38d00 <__assert_fail@plt+0x26974>
   38e44:	mov	r1, #4
   38e48:	mov	r2, #0
   38e4c:	mov	r0, r6
   38e50:	bl	3782c <__assert_fail@plt+0x254a0>
   38e54:	ldr	r1, [pc, #512]	; 3905c <__assert_fail@plt+0x26cd0>
   38e58:	b	38d00 <__assert_fail@plt+0x26974>
   38e5c:	mov	r1, #2
   38e60:	mov	r2, #0
   38e64:	mov	r0, r6
   38e68:	bl	3782c <__assert_fail@plt+0x254a0>
   38e6c:	ldr	r1, [pc, #492]	; 39060 <__assert_fail@plt+0x26cd4>
   38e70:	b	38d00 <__assert_fail@plt+0x26974>
   38e74:	mov	r1, #1
   38e78:	mov	r2, #0
   38e7c:	mov	r0, r6
   38e80:	bl	3782c <__assert_fail@plt+0x254a0>
   38e84:	ldr	r1, [pc, #472]	; 39064 <__assert_fail@plt+0x26cd8>
   38e88:	b	38d00 <__assert_fail@plt+0x26974>
   38e8c:	mov	r1, #8
   38e90:	mov	r2, #0
   38e94:	mov	r0, r6
   38e98:	bl	3782c <__assert_fail@plt+0x254a0>
   38e9c:	ldr	r1, [pc, #452]	; 39068 <__assert_fail@plt+0x26cdc>
   38ea0:	b	38d00 <__assert_fail@plt+0x26974>
   38ea4:	mov	r1, #8
   38ea8:	mov	r0, r6
   38eac:	bl	37850 <__assert_fail@plt+0x254c4>
   38eb0:	ldr	r1, [pc, #436]	; 3906c <__assert_fail@plt+0x26ce0>
   38eb4:	b	38d00 <__assert_fail@plt+0x26974>
   38eb8:	mov	r1, #8
   38ebc:	mov	r2, #1
   38ec0:	mov	r0, r6
   38ec4:	bl	3782c <__assert_fail@plt+0x254a0>
   38ec8:	ldr	r1, [pc, #416]	; 39070 <__assert_fail@plt+0x26ce4>
   38ecc:	b	38d00 <__assert_fail@plt+0x26974>
   38ed0:	mov	r1, #8
   38ed4:	mov	r2, #0
   38ed8:	mov	r0, r6
   38edc:	bl	3782c <__assert_fail@plt+0x254a0>
   38ee0:	ldr	r1, [pc, #396]	; 39074 <__assert_fail@plt+0x26ce8>
   38ee4:	b	38d00 <__assert_fail@plt+0x26974>
   38ee8:	mov	r1, #2
   38eec:	mov	r2, #0
   38ef0:	mov	r0, r6
   38ef4:	bl	3782c <__assert_fail@plt+0x254a0>
   38ef8:	ldr	r1, [pc, #376]	; 39078 <__assert_fail@plt+0x26cec>
   38efc:	b	38d00 <__assert_fail@plt+0x26974>
   38f00:	mov	r1, #4
   38f04:	mov	r2, #0
   38f08:	mov	r0, r6
   38f0c:	bl	3782c <__assert_fail@plt+0x254a0>
   38f10:	ldr	r1, [pc, #356]	; 3907c <__assert_fail@plt+0x26cf0>
   38f14:	b	38d00 <__assert_fail@plt+0x26974>
   38f18:	mov	r1, #2
   38f1c:	mov	r2, #0
   38f20:	mov	r0, r6
   38f24:	bl	3782c <__assert_fail@plt+0x254a0>
   38f28:	ldr	r1, [pc, #336]	; 39080 <__assert_fail@plt+0x26cf4>
   38f2c:	b	38d00 <__assert_fail@plt+0x26974>
   38f30:	mov	r1, #1
   38f34:	mov	r2, #0
   38f38:	mov	r0, r6
   38f3c:	bl	3782c <__assert_fail@plt+0x254a0>
   38f40:	ldr	r1, [pc, #316]	; 39084 <__assert_fail@plt+0x26cf8>
   38f44:	b	38d00 <__assert_fail@plt+0x26974>
   38f48:	mov	r1, #16
   38f4c:	mov	r0, r6
   38f50:	bl	37858 <__assert_fail@plt+0x254cc>
   38f54:	ldr	r1, [pc, #300]	; 39088 <__assert_fail@plt+0x26cfc>
   38f58:	b	38d00 <__assert_fail@plt+0x26974>
   38f5c:	mov	r1, #8
   38f60:	mov	r0, r6
   38f64:	bl	37858 <__assert_fail@plt+0x254cc>
   38f68:	ldr	r1, [pc, #284]	; 3908c <__assert_fail@plt+0x26d00>
   38f6c:	b	38d00 <__assert_fail@plt+0x26974>
   38f70:	mov	r1, #4
   38f74:	mov	r0, r6
   38f78:	bl	37850 <__assert_fail@plt+0x254c4>
   38f7c:	ldr	r1, [pc, #268]	; 39090 <__assert_fail@plt+0x26d04>
   38f80:	b	38d00 <__assert_fail@plt+0x26974>
   38f84:	mov	r1, #4
   38f88:	mov	r0, r6
   38f8c:	bl	37850 <__assert_fail@plt+0x254c4>
   38f90:	ldr	r1, [pc, #252]	; 39094 <__assert_fail@plt+0x26d08>
   38f94:	b	38d00 <__assert_fail@plt+0x26974>
   38f98:	mov	r1, #2
   38f9c:	mov	r0, r6
   38fa0:	bl	37850 <__assert_fail@plt+0x254c4>
   38fa4:	ldr	r1, [pc, #236]	; 39098 <__assert_fail@plt+0x26d0c>
   38fa8:	b	38d00 <__assert_fail@plt+0x26974>
   38fac:	mov	r1, #1
   38fb0:	mov	r0, r6
   38fb4:	bl	37850 <__assert_fail@plt+0x254c4>
   38fb8:	ldr	r1, [pc, #220]	; 3909c <__assert_fail@plt+0x26d10>
   38fbc:	b	38d00 <__assert_fail@plt+0x26974>
   38fc0:	mov	r2, #1
   38fc4:	mov	r1, r2
   38fc8:	mov	r0, r6
   38fcc:	bl	3782c <__assert_fail@plt+0x254a0>
   38fd0:	ldr	r1, [pc, #200]	; 390a0 <__assert_fail@plt+0x26d14>
   38fd4:	b	38d00 <__assert_fail@plt+0x26974>
   38fd8:	ldr	r3, [pc, #196]	; 390a4 <__assert_fail@plt+0x26d18>
   38fdc:	mov	r2, #5
   38fe0:	ldr	r1, [pc, #192]	; 390a8 <__assert_fail@plt+0x26d1c>
   38fe4:	mov	r0, r4
   38fe8:	ldr	r6, [r3]
   38fec:	bl	11ea0 <dcgettext@plt>
   38ff0:	mov	r2, r5
   38ff4:	mov	r1, r0
   38ff8:	mov	r0, r6
   38ffc:	bl	120b0 <fprintf@plt>
   39000:	mov	r0, r4
   39004:	pop	{r4, r5, r6, pc}
   39008:	mov	r1, #4
   3900c:	mov	r2, #0
   39010:	mov	r0, r6
   39014:	bl	3782c <__assert_fail@plt+0x254a0>
   39018:	ldr	r1, [pc, #140]	; 390ac <__assert_fail@plt+0x26d20>
   3901c:	b	38d00 <__assert_fail@plt+0x26974>
   39020:	andeq	r1, r5, r8, lsl #21
   39024:	ldrdeq	r1, [r5], -r8
   39028:	andeq	r1, r5, ip, asr #19
   3902c:	andeq	r1, r5, r4, asr #19
   39030:			; <UNDEFINED> instruction: 0x000519bc
   39034:			; <UNDEFINED> instruction: 0x000519b0
   39038:	strdeq	r0, [r5], -ip
   3903c:	strdeq	r0, [r5], -r4
   39040:	andeq	r0, r5, r4, asr pc
   39044:	andeq	r1, r5, r0, lsr #19
   39048:	muleq	r5, r4, r9
   3904c:	andeq	r1, r5, r4, lsl #19
   39050:	andeq	r1, r5, r4, ror r9
   39054:	andeq	r1, r5, r8, ror #18
   39058:	andeq	r1, r5, r8, asr r9
   3905c:	andeq	r1, r5, r0, asr r9
   39060:	andeq	r1, r5, r8, asr #18
   39064:	andeq	r4, r5, r0, ror lr
   39068:	andeq	r1, r5, ip, lsr r9
   3906c:	andeq	r1, r5, ip, ror sl
   39070:	andeq	r1, r5, r8, ror #20
   39074:	andeq	r1, r5, ip, asr sl
   39078:	andeq	r1, r5, r4, asr sl
   3907c:	andeq	r1, r5, r8, asr #20
   39080:	andeq	r1, r5, ip, lsr sl
   39084:	andeq	r1, r5, r0, lsr sl
   39088:	andeq	r1, r5, r0, lsr #20
   3908c:	andeq	r1, r5, r8, lsl sl
   39090:	andeq	r1, r5, r0, lsl sl
   39094:	andeq	r1, r5, r4, lsl #20
   39098:	strdeq	r1, [r5], -r8
   3909c:	andeq	r1, r5, ip, ror #19
   390a0:	andeq	r1, r5, r0, ror #19
   390a4:	andeq	r7, r6, r8, lsl #3
   390a8:	muleq	r5, r4, sl
   390ac:	andeq	r1, r5, ip, asr #1
   390b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   390b4:	mov	r6, r0
   390b8:	ldr	r7, [r0]
   390bc:	ldr	ip, [pc, #128]	; 39144 <__assert_fail@plt+0x26db8>
   390c0:	mov	r8, r1
   390c4:	ldrb	r3, [r7]
   390c8:	mov	r9, r7
   390cc:	lsl	r2, r3, #1
   390d0:	ldrh	r4, [ip, r2]
   390d4:	ands	r4, r4, #4
   390d8:	beq	39118 <__assert_fail@plt+0x26d8c>
   390dc:	mov	r4, #0
   390e0:	add	r9, r9, #1
   390e4:	add	r4, r4, r4, lsl #2
   390e8:	str	r9, [r6]
   390ec:	add	r4, r3, r4, lsl #1
   390f0:	ldrb	r3, [r9]
   390f4:	sub	r4, r4, #48	; 0x30
   390f8:	lsl	r2, r3, #1
   390fc:	ldrh	r0, [ip, r2]
   39100:	ands	r5, r0, #4
   39104:	bne	390e0 <__assert_fail@plt+0x26d54>
   39108:	mov	r0, r9
   3910c:	bl	12074 <strlen@plt>
   39110:	cmp	r4, r0
   39114:	bhi	39134 <__assert_fail@plt+0x26da8>
   39118:	cmp	r8, #0
   3911c:	strne	r9, [r8]
   39120:	ldr	r3, [r6]
   39124:	mov	r0, #1
   39128:	add	r4, r3, r4
   3912c:	str	r4, [r6]
   39130:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39134:	mov	r0, r7
   39138:	bl	38764 <__assert_fail@plt+0x263d8>
   3913c:	mov	r0, r5
   39140:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39144:	strdeq	r5, [r6], -r8
   39148:	push	{r4, r5, r6, r7, r8, lr}
   3914c:	mov	r7, r0
   39150:	mov	r8, r1
   39154:	mov	r0, r2
   39158:	mov	r1, r3
   3915c:	bl	38838 <__assert_fail@plt+0x264ac>
   39160:	mov	r2, #0
   39164:	mov	r1, r0
   39168:	mov	r6, r0
   3916c:	mov	r0, r7
   39170:	bl	38198 <__assert_fail@plt+0x25e0c>
   39174:	subs	r4, r0, #0
   39178:	bne	391e0 <__assert_fail@plt+0x26e54>
   3917c:	ldr	r4, [r8]
   39180:	cmp	r4, #0
   39184:	beq	391f0 <__assert_fail@plt+0x26e64>
   39188:	ldrb	r5, [r6]
   3918c:	b	3919c <__assert_fail@plt+0x26e10>
   39190:	ldr	r4, [r4]
   39194:	cmp	r4, #0
   39198:	beq	391f0 <__assert_fail@plt+0x26e64>
   3919c:	ldr	r0, [r4, #4]
   391a0:	ldrb	r3, [r0]
   391a4:	cmp	r3, r5
   391a8:	bne	39190 <__assert_fail@plt+0x26e04>
   391ac:	mov	r1, r6
   391b0:	bl	11d98 <strcmp@plt>
   391b4:	cmp	r0, #0
   391b8:	bne	39190 <__assert_fail@plt+0x26e04>
   391bc:	ldr	r3, [r4, #8]
   391c0:	mov	r0, r6
   391c4:	cmp	r3, #0
   391c8:	ldreq	r3, [sp, #24]
   391cc:	streq	r3, [r4, #8]
   391d0:	bl	11e10 <free@plt>
   391d4:	ldr	r4, [r4, #16]
   391d8:	mov	r0, r4
   391dc:	pop	{r4, r5, r6, r7, r8, pc}
   391e0:	mov	r0, r6
   391e4:	bl	11e10 <free@plt>
   391e8:	mov	r0, r4
   391ec:	pop	{r4, r5, r6, r7, r8, pc}
   391f0:	mov	r0, #20
   391f4:	bl	11f3c <xmalloc@plt>
   391f8:	ldr	r2, [sp, #24]
   391fc:	ldr	ip, [r8]
   39200:	mov	r3, #0
   39204:	mov	r5, r0
   39208:	mov	r1, r0
   3920c:	str	r6, [r0, #4]
   39210:	str	r2, [r0, #8]
   39214:	str	ip, [r5]
   39218:	str	r3, [r5, #16]
   3921c:	mov	r2, r6
   39220:	mov	r0, r7
   39224:	str	r3, [r1, #12]!
   39228:	bl	377e4 <__assert_fail@plt+0x25458>
   3922c:	str	r5, [r8]
   39230:	mov	r4, r0
   39234:	str	r0, [r5, #16]
   39238:	mov	r0, r4
   3923c:	pop	{r4, r5, r6, r7, r8, pc}
   39240:	push	{r4, r5, r6, r7, r8, r9, lr}
   39244:	sub	sp, sp, #20
   39248:	mov	r4, r2
   3924c:	ldr	r7, [sp, #48]	; 0x30
   39250:	mov	r5, r0
   39254:	cmp	r7, #0
   39258:	movne	r2, #0
   3925c:	strne	r2, [r7]
   39260:	ldr	r2, [r4]
   39264:	mov	r8, r1
   39268:	cmp	r2, #41	; 0x29
   3926c:	ldrls	pc, [pc, r2, lsl #2]
   39270:	b	396fc <__assert_fail@plt+0x27370>
   39274:	andeq	r9, r3, r4, ror #11
   39278:	andeq	r9, r3, r0, asr #13
   3927c:	strdeq	r9, [r3], -ip
   39280:	strdeq	r9, [r3], -ip
   39284:	andeq	r9, r3, r4, asr #6
   39288:	strdeq	r9, [r3], -ip
   3928c:	strdeq	r9, [r3], -ip
   39290:	strdeq	r9, [r3], -ip
   39294:	strdeq	r9, [r3], -ip
   39298:	strdeq	r9, [r3], -ip
   3929c:	strdeq	r9, [r3], -ip
   392a0:	strdeq	r9, [r3], -ip
   392a4:	strdeq	r9, [r3], -ip
   392a8:	strdeq	r9, [r3], -ip
   392ac:	strdeq	r9, [r3], -ip
   392b0:	strdeq	r9, [r3], -ip
   392b4:	strdeq	r9, [r3], -ip
   392b8:	strdeq	r9, [r3], -ip
   392bc:	strdeq	r9, [r3], -ip
   392c0:	strdeq	r9, [r3], -ip
   392c4:	strdeq	r9, [r3], -ip
   392c8:	strdeq	r9, [r3], -ip
   392cc:	strdeq	r9, [r3], -ip
   392d0:	strdeq	r9, [r3], -ip
   392d4:	andeq	r9, r3, ip, lsl r3
   392d8:	muleq	r3, r8, r3
   392dc:	muleq	r3, r8, r3
   392e0:	muleq	r3, r8, r3
   392e4:	strdeq	r9, [r3], -ip
   392e8:	strdeq	r9, [r3], -ip
   392ec:	strdeq	r9, [r3], -ip
   392f0:	strdeq	r9, [r3], -ip
   392f4:	strdeq	r9, [r3], -ip
   392f8:	strdeq	r9, [r3], -ip
   392fc:	muleq	r3, r8, r3
   39300:	muleq	r3, r8, r3
   39304:	strdeq	r9, [r3], -ip
   39308:	strdeq	r9, [r3], -ip
   3930c:	strdeq	r9, [r3], -ip
   39310:	strdeq	r9, [r3], -r0
   39314:	strdeq	r9, [r3], -ip
   39318:	andeq	r9, r3, r8, ror #12
   3931c:	mov	r3, #0
   39320:	str	r3, [sp]
   39324:	add	r1, r8, #212	; 0xd4
   39328:	mov	r0, r5
   3932c:	ldrd	r2, [r4, #8]
   39330:	bl	39148 <__assert_fail@plt+0x26dbc>
   39334:	mov	r6, r0
   39338:	mov	r0, r6
   3933c:	add	sp, sp, #20
   39340:	pop	{r4, r5, r6, r7, r8, r9, pc}
   39344:	mov	r1, r4
   39348:	add	r3, sp, #12
   3934c:	mov	r2, #20
   39350:	mov	r0, #3
   39354:	bl	11d68 <cplus_demangle_print@plt>
   39358:	subs	r4, r0, #0
   3935c:	beq	397dc <__assert_fail@plt+0x27450>
   39360:	bl	12074 <strlen@plt>
   39364:	mov	r3, #9
   39368:	add	r1, r8, #212	; 0xd4
   3936c:	str	r3, [sp]
   39370:	mov	r2, r4
   39374:	mov	r3, r0
   39378:	mov	r0, r5
   3937c:	bl	39148 <__assert_fail@plt+0x26dbc>
   39380:	mov	r6, r0
   39384:	mov	r0, r4
   39388:	bl	11e10 <free@plt>
   3938c:	mov	r0, r6
   39390:	add	sp, sp, #20
   39394:	pop	{r4, r5, r6, r7, r8, r9, pc}
   39398:	mov	r3, #0
   3939c:	str	r3, [sp]
   393a0:	ldr	r2, [r4, #8]
   393a4:	bl	39240 <__assert_fail@plt+0x26eb4>
   393a8:	subs	r6, r0, #0
   393ac:	beq	3975c <__assert_fail@plt+0x273d0>
   393b0:	ldr	r3, [r4]
   393b4:	sub	r3, r3, #25
   393b8:	cmp	r3, #10
   393bc:	ldrls	pc, [pc, r3, lsl #2]
   393c0:	b	3995c <__assert_fail@plt+0x275d0>
   393c4:	andeq	r9, r3, r8, lsr r3
   393c8:	andeq	r9, r3, r0, lsl #15
   393cc:	andeq	r9, r3, r8, lsr #15
   393d0:	andeq	r9, r3, ip, asr r9
   393d4:	andeq	r9, r3, ip, asr r9
   393d8:	andeq	r9, r3, ip, asr r9
   393dc:	andeq	r9, r3, ip, asr r9
   393e0:	andeq	r9, r3, ip, asr r9
   393e4:	andeq	r9, r3, ip, asr r9
   393e8:	muleq	r3, r4, r7
   393ec:	andeq	r9, r3, ip, ror #14
   393f0:	mov	r1, r4
   393f4:	add	r3, sp, #12
   393f8:	mov	r2, #20
   393fc:	mov	r0, #3
   39400:	bl	11d68 <cplus_demangle_print@plt>
   39404:	subs	r4, r0, #0
   39408:	beq	39818 <__assert_fail@plt+0x2748c>
   3940c:	ldr	r1, [pc, #1356]	; 39960 <__assert_fail@plt+0x275d4>
   39410:	bl	11d98 <strcmp@plt>
   39414:	cmp	r0, #0
   39418:	beq	39734 <__assert_fail@plt+0x273a8>
   3941c:	ldr	r1, [pc, #1344]	; 39964 <__assert_fail@plt+0x275d8>
   39420:	mov	r0, r4
   39424:	bl	11d98 <strcmp@plt>
   39428:	cmp	r0, #0
   3942c:	beq	397c8 <__assert_fail@plt+0x2743c>
   39430:	ldr	r1, [pc, #1328]	; 39968 <__assert_fail@plt+0x275dc>
   39434:	mov	r0, r4
   39438:	bl	11d98 <strcmp@plt>
   3943c:	cmp	r0, #0
   39440:	beq	39734 <__assert_fail@plt+0x273a8>
   39444:	ldr	r1, [pc, #1312]	; 3996c <__assert_fail@plt+0x275e0>
   39448:	mov	r0, r4
   3944c:	bl	11d98 <strcmp@plt>
   39450:	cmp	r0, #0
   39454:	beq	39804 <__assert_fail@plt+0x27478>
   39458:	ldr	r1, [pc, #1296]	; 39970 <__assert_fail@plt+0x275e4>
   3945c:	mov	r0, r4
   39460:	bl	11d98 <strcmp@plt>
   39464:	cmp	r0, #0
   39468:	beq	39804 <__assert_fail@plt+0x27478>
   3946c:	ldr	r1, [pc, #1280]	; 39974 <__assert_fail@plt+0x275e8>
   39470:	mov	r0, r4
   39474:	bl	11d98 <strcmp@plt>
   39478:	cmp	r0, #0
   3947c:	beq	39828 <__assert_fail@plt+0x2749c>
   39480:	ldr	r1, [pc, #1264]	; 39978 <__assert_fail@plt+0x275ec>
   39484:	mov	r0, r4
   39488:	bl	11d98 <strcmp@plt>
   3948c:	cmp	r0, #0
   39490:	beq	3983c <__assert_fail@plt+0x274b0>
   39494:	ldr	r1, [pc, #1248]	; 3997c <__assert_fail@plt+0x275f0>
   39498:	mov	r0, r4
   3949c:	bl	11d98 <strcmp@plt>
   394a0:	cmp	r0, #0
   394a4:	beq	39850 <__assert_fail@plt+0x274c4>
   394a8:	ldr	r1, [pc, #1232]	; 39980 <__assert_fail@plt+0x275f4>
   394ac:	mov	r0, r4
   394b0:	bl	11d98 <strcmp@plt>
   394b4:	cmp	r0, #0
   394b8:	beq	39868 <__assert_fail@plt+0x274dc>
   394bc:	ldr	r1, [pc, #1216]	; 39984 <__assert_fail@plt+0x275f8>
   394c0:	mov	r0, r4
   394c4:	bl	11d98 <strcmp@plt>
   394c8:	cmp	r0, #0
   394cc:	beq	39880 <__assert_fail@plt+0x274f4>
   394d0:	ldr	r1, [pc, #1200]	; 39988 <__assert_fail@plt+0x275fc>
   394d4:	mov	r0, r4
   394d8:	bl	11d98 <strcmp@plt>
   394dc:	cmp	r0, #0
   394e0:	beq	39868 <__assert_fail@plt+0x274dc>
   394e4:	ldr	r1, [pc, #1184]	; 3998c <__assert_fail@plt+0x27600>
   394e8:	mov	r0, r4
   394ec:	bl	11d98 <strcmp@plt>
   394f0:	cmp	r0, #0
   394f4:	beq	39880 <__assert_fail@plt+0x274f4>
   394f8:	ldr	r1, [pc, #1168]	; 39990 <__assert_fail@plt+0x27604>
   394fc:	mov	r0, r4
   39500:	bl	11d98 <strcmp@plt>
   39504:	subs	r2, r0, #0
   39508:	beq	39898 <__assert_fail@plt+0x2750c>
   3950c:	ldr	r1, [pc, #1152]	; 39994 <__assert_fail@plt+0x27608>
   39510:	mov	r0, r4
   39514:	bl	11d98 <strcmp@plt>
   39518:	cmp	r0, #0
   3951c:	beq	398ac <__assert_fail@plt+0x27520>
   39520:	ldr	r1, [pc, #1136]	; 39998 <__assert_fail@plt+0x2760c>
   39524:	mov	r0, r4
   39528:	bl	11d98 <strcmp@plt>
   3952c:	subs	r2, r0, #0
   39530:	beq	398ec <__assert_fail@plt+0x27560>
   39534:	ldr	r1, [pc, #1120]	; 3999c <__assert_fail@plt+0x27610>
   39538:	mov	r0, r4
   3953c:	bl	11d98 <strcmp@plt>
   39540:	cmp	r0, #0
   39544:	beq	398d4 <__assert_fail@plt+0x27548>
   39548:	ldr	r1, [pc, #1104]	; 399a0 <__assert_fail@plt+0x27614>
   3954c:	mov	r0, r4
   39550:	bl	11d98 <strcmp@plt>
   39554:	cmp	r0, #0
   39558:	beq	398c4 <__assert_fail@plt+0x27538>
   3955c:	ldr	r1, [pc, #1088]	; 399a4 <__assert_fail@plt+0x27618>
   39560:	mov	r0, r4
   39564:	bl	11d98 <strcmp@plt>
   39568:	cmp	r0, #0
   3956c:	beq	39880 <__assert_fail@plt+0x274f4>
   39570:	ldr	r1, [pc, #1072]	; 399a8 <__assert_fail@plt+0x2761c>
   39574:	mov	r0, r4
   39578:	bl	11d98 <strcmp@plt>
   3957c:	cmp	r0, #0
   39580:	beq	39944 <__assert_fail@plt+0x275b8>
   39584:	ldr	r1, [pc, #1056]	; 399ac <__assert_fail@plt+0x27620>
   39588:	mov	r0, r4
   3958c:	bl	11d98 <strcmp@plt>
   39590:	cmp	r0, #0
   39594:	beq	3992c <__assert_fail@plt+0x275a0>
   39598:	ldr	r1, [pc, #1040]	; 399b0 <__assert_fail@plt+0x27624>
   3959c:	mov	r0, r4
   395a0:	bl	11d98 <strcmp@plt>
   395a4:	subs	r6, r0, #0
   395a8:	bne	39900 <__assert_fail@plt+0x27574>
   395ac:	cmp	r7, #0
   395b0:	movne	r3, #1
   395b4:	strne	r3, [r7]
   395b8:	bne	39748 <__assert_fail@plt+0x273bc>
   395bc:	ldr	r3, [pc, #1008]	; 399b4 <__assert_fail@plt+0x27628>
   395c0:	mov	r2, #5
   395c4:	ldr	r1, [pc, #1004]	; 399b8 <__assert_fail@plt+0x2762c>
   395c8:	ldr	r5, [r3]
   395cc:	bl	11ea0 <dcgettext@plt>
   395d0:	mov	r6, r7
   395d4:	mov	r1, r0
   395d8:	mov	r0, r5
   395dc:	bl	120b0 <fprintf@plt>
   395e0:	b	39748 <__assert_fail@plt+0x273bc>
   395e4:	cmp	r3, #0
   395e8:	beq	3931c <__assert_fail@plt+0x26f90>
   395ec:	mov	r1, r3
   395f0:	bl	3847c <__assert_fail@plt+0x260f0>
   395f4:	subs	r7, r0, #0
   395f8:	beq	3931c <__assert_fail@plt+0x26f90>
   395fc:	ldr	r1, [r7]
   39600:	cmp	r1, #0
   39604:	bne	39618 <__assert_fail@plt+0x2728c>
   39608:	b	3931c <__assert_fail@plt+0x26f90>
   3960c:	ldr	r1, [r7, #4]!
   39610:	cmp	r1, #0
   39614:	beq	3931c <__assert_fail@plt+0x26f90>
   39618:	mov	r0, r5
   3961c:	bl	384c4 <__assert_fail@plt+0x26138>
   39620:	subs	r6, r0, #0
   39624:	beq	3975c <__assert_fail@plt+0x273d0>
   39628:	mov	r1, r6
   3962c:	mov	r0, r5
   39630:	bl	3828c <__assert_fail@plt+0x25f00>
   39634:	subs	r9, r0, #0
   39638:	beq	3960c <__assert_fail@plt+0x27280>
   3963c:	bl	12074 <strlen@plt>
   39640:	ldr	r3, [r4, #12]
   39644:	cmp	r0, r3
   39648:	bne	3960c <__assert_fail@plt+0x27280>
   3964c:	mov	r2, r0
   39650:	ldr	r1, [r4, #8]
   39654:	mov	r0, r9
   39658:	bl	12320 <strncmp@plt>
   3965c:	cmp	r0, #0
   39660:	bne	3960c <__assert_fail@plt+0x27280>
   39664:	b	39338 <__assert_fail@plt+0x26fac>
   39668:	ldr	r2, [r4, #8]
   3966c:	cmp	r2, #0
   39670:	beq	397bc <__assert_fail@plt+0x27430>
   39674:	mov	r3, #0
   39678:	str	r3, [sp]
   3967c:	bl	39240 <__assert_fail@plt+0x26eb4>
   39680:	mov	r6, r0
   39684:	cmp	r6, #0
   39688:	beq	3975c <__assert_fail@plt+0x273d0>
   3968c:	ldr	r2, [r4, #12]
   39690:	mov	r1, r8
   39694:	add	r3, sp, #12
   39698:	mov	r0, r5
   3969c:	bl	399cc <__assert_fail@plt+0x27640>
   396a0:	subs	r2, r0, #0
   396a4:	beq	3975c <__assert_fail@plt+0x273d0>
   396a8:	mov	r1, r6
   396ac:	mov	r0, r5
   396b0:	ldr	r3, [sp, #12]
   396b4:	bl	37998 <__assert_fail@plt+0x2560c>
   396b8:	mov	r6, r0
   396bc:	b	39338 <__assert_fail@plt+0x26fac>
   396c0:	mov	r6, #0
   396c4:	str	r6, [sp]
   396c8:	ldr	r2, [r4, #8]
   396cc:	bl	39240 <__assert_fail@plt+0x26eb4>
   396d0:	subs	r3, r0, #0
   396d4:	beq	3975c <__assert_fail@plt+0x273d0>
   396d8:	str	r6, [sp]
   396dc:	mov	r1, r8
   396e0:	ldr	r2, [r4, #12]
   396e4:	mov	r0, r5
   396e8:	bl	39240 <__assert_fail@plt+0x26eb4>
   396ec:	mov	r6, r0
   396f0:	mov	r0, r6
   396f4:	add	sp, sp, #20
   396f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   396fc:	ldr	r3, [pc, #688]	; 399b4 <__assert_fail@plt+0x27628>
   39700:	mov	r2, #5
   39704:	ldr	r1, [pc, #688]	; 399bc <__assert_fail@plt+0x27630>
   39708:	mov	r0, #0
   3970c:	ldr	r5, [r3]
   39710:	bl	11ea0 <dcgettext@plt>
   39714:	ldr	r2, [r4]
   39718:	mov	r6, #0
   3971c:	mov	r1, r0
   39720:	mov	r0, r5
   39724:	bl	120b0 <fprintf@plt>
   39728:	mov	r0, r6
   3972c:	add	sp, sp, #20
   39730:	pop	{r4, r5, r6, r7, r8, r9, pc}
   39734:	mov	r0, r5
   39738:	mov	r2, #0
   3973c:	mov	r1, #1
   39740:	bl	3782c <__assert_fail@plt+0x254a0>
   39744:	mov	r6, r0
   39748:	mov	r0, r4
   3974c:	bl	11e10 <free@plt>
   39750:	mov	r0, r6
   39754:	add	sp, sp, #20
   39758:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3975c:	mov	r6, #0
   39760:	mov	r0, r6
   39764:	add	sp, sp, #20
   39768:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3976c:	mov	r1, r6
   39770:	mov	r0, r5
   39774:	bl	379e0 <__assert_fail@plt+0x25654>
   39778:	mov	r6, r0
   3977c:	b	39338 <__assert_fail@plt+0x26fac>
   39780:	mov	r1, r6
   39784:	mov	r0, r5
   39788:	bl	37bd8 <__assert_fail@plt+0x2584c>
   3978c:	mov	r6, r0
   39790:	b	39338 <__assert_fail@plt+0x26fac>
   39794:	mov	r1, r6
   39798:	mov	r0, r5
   3979c:	bl	3795c <__assert_fail@plt+0x255d0>
   397a0:	mov	r6, r0
   397a4:	b	39338 <__assert_fail@plt+0x26fac>
   397a8:	mov	r1, r6
   397ac:	mov	r0, r5
   397b0:	bl	37bac <__assert_fail@plt+0x25820>
   397b4:	mov	r6, r0
   397b8:	b	39338 <__assert_fail@plt+0x26fac>
   397bc:	bl	37820 <__assert_fail@plt+0x25494>
   397c0:	mov	r6, r0
   397c4:	b	39684 <__assert_fail@plt+0x272f8>
   397c8:	mov	r0, r5
   397cc:	mov	r1, #1
   397d0:	bl	37850 <__assert_fail@plt+0x254c4>
   397d4:	mov	r6, r0
   397d8:	b	39748 <__assert_fail@plt+0x273bc>
   397dc:	ldr	r3, [pc, #464]	; 399b4 <__assert_fail@plt+0x27628>
   397e0:	ldr	r1, [pc, #472]	; 399c0 <__assert_fail@plt+0x27634>
   397e4:	mov	r2, #5
   397e8:	ldr	r5, [r3]
   397ec:	bl	11ea0 <dcgettext@plt>
   397f0:	mov	r6, r4
   397f4:	mov	r1, r0
   397f8:	mov	r0, r5
   397fc:	bl	120b0 <fprintf@plt>
   39800:	b	39338 <__assert_fail@plt+0x26fac>
   39804:	mov	r0, r5
   39808:	mov	r1, #8
   3980c:	bl	37848 <__assert_fail@plt+0x254bc>
   39810:	mov	r6, r0
   39814:	b	39748 <__assert_fail@plt+0x273bc>
   39818:	ldr	r3, [pc, #404]	; 399b4 <__assert_fail@plt+0x27628>
   3981c:	mov	r2, #5
   39820:	ldr	r1, [pc, #412]	; 399c4 <__assert_fail@plt+0x27638>
   39824:	b	397e8 <__assert_fail@plt+0x2745c>
   39828:	mov	r0, r5
   3982c:	mov	r1, #4
   39830:	bl	37848 <__assert_fail@plt+0x254bc>
   39834:	mov	r6, r0
   39838:	b	39748 <__assert_fail@plt+0x273bc>
   3983c:	mov	r0, r5
   39840:	mov	r1, #16
   39844:	bl	37848 <__assert_fail@plt+0x254bc>
   39848:	mov	r6, r0
   3984c:	b	39748 <__assert_fail@plt+0x273bc>
   39850:	mov	r2, #1
   39854:	mov	r0, r5
   39858:	mov	r1, r2
   3985c:	bl	3782c <__assert_fail@plt+0x254a0>
   39860:	mov	r6, r0
   39864:	b	39748 <__assert_fail@plt+0x273bc>
   39868:	mov	r0, r5
   3986c:	mov	r2, #0
   39870:	mov	r1, #4
   39874:	bl	3782c <__assert_fail@plt+0x254a0>
   39878:	mov	r6, r0
   3987c:	b	39748 <__assert_fail@plt+0x273bc>
   39880:	mov	r0, r5
   39884:	mov	r2, #1
   39888:	mov	r1, #4
   3988c:	bl	3782c <__assert_fail@plt+0x254a0>
   39890:	mov	r6, r0
   39894:	b	39748 <__assert_fail@plt+0x273bc>
   39898:	mov	r0, r5
   3989c:	mov	r1, #16
   398a0:	bl	3782c <__assert_fail@plt+0x254a0>
   398a4:	mov	r6, r0
   398a8:	b	39748 <__assert_fail@plt+0x273bc>
   398ac:	mov	r0, r5
   398b0:	mov	r2, #1
   398b4:	mov	r1, #16
   398b8:	bl	3782c <__assert_fail@plt+0x254a0>
   398bc:	mov	r6, r0
   398c0:	b	39748 <__assert_fail@plt+0x273bc>
   398c4:	mov	r0, r5
   398c8:	bl	37820 <__assert_fail@plt+0x25494>
   398cc:	mov	r6, r0
   398d0:	b	39748 <__assert_fail@plt+0x273bc>
   398d4:	mov	r0, r5
   398d8:	mov	r2, #1
   398dc:	mov	r1, #2
   398e0:	bl	3782c <__assert_fail@plt+0x254a0>
   398e4:	mov	r6, r0
   398e8:	b	39748 <__assert_fail@plt+0x273bc>
   398ec:	mov	r0, r5
   398f0:	mov	r1, #2
   398f4:	bl	3782c <__assert_fail@plt+0x254a0>
   398f8:	mov	r6, r0
   398fc:	b	39748 <__assert_fail@plt+0x273bc>
   39900:	ldr	r3, [pc, #172]	; 399b4 <__assert_fail@plt+0x27628>
   39904:	mov	r2, #5
   39908:	ldr	r1, [pc, #184]	; 399c8 <__assert_fail@plt+0x2763c>
   3990c:	mov	r0, #0
   39910:	ldr	r5, [r3]
   39914:	bl	11ea0 <dcgettext@plt>
   39918:	mov	r6, #0
   3991c:	mov	r1, r0
   39920:	mov	r0, r5
   39924:	bl	120b0 <fprintf@plt>
   39928:	b	39748 <__assert_fail@plt+0x273bc>
   3992c:	mov	r0, r5
   39930:	mov	r2, #1
   39934:	mov	r1, #8
   39938:	bl	3782c <__assert_fail@plt+0x254a0>
   3993c:	mov	r6, r0
   39940:	b	39748 <__assert_fail@plt+0x273bc>
   39944:	mov	r0, r5
   39948:	mov	r2, #0
   3994c:	mov	r1, #8
   39950:	bl	3782c <__assert_fail@plt+0x254a0>
   39954:	mov	r6, r0
   39958:	b	39748 <__assert_fail@plt+0x273bc>
   3995c:	bl	1232c <abort@plt>
   39960:	andeq	r1, r5, r8, ror #18
   39964:	andeq	r1, r5, r0, lsr #22
   39968:	andeq	r4, r5, r0, ror lr
   3996c:	strdeq	r0, [r5], -ip
   39970:			; <UNDEFINED> instruction: 0x000519b0
   39974:	strdeq	r0, [r5], -r4
   39978:	andeq	r1, r5, r8, lsr #22
   3997c:	andeq	r1, r5, r8, asr r9
   39980:	andeq	r1, r5, ip, asr #1
   39984:	andeq	r1, r5, r4, lsl #19
   39988:	andeq	r1, r5, r0, asr r9
   3998c:	andeq	r1, r5, r0, lsr #19
   39990:	andeq	r1, r5, r4, lsr fp
   39994:	andeq	r1, r5, r0, asr #22
   39998:	andeq	r1, r5, r8, asr #18
   3999c:	andeq	r1, r5, r4, ror r9
   399a0:	andeq	r0, r5, r4, asr pc
   399a4:	andeq	r1, r5, r4, asr fp
   399a8:	andeq	r1, r5, ip, asr sl
   399ac:	andeq	r1, r5, r8, ror #20
   399b0:	muleq	r5, r0, sp
   399b4:	andeq	r7, r6, r8, lsl #3
   399b8:	andeq	r1, r5, ip, asr fp
   399bc:			; <UNDEFINED> instruction: 0x00051ab0
   399c0:	ldrdeq	r1, [r5], -r4
   399c4:	strdeq	r1, [r5], -r8
   399c8:	andeq	r1, r5, ip, ror fp
   399cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   399d0:	mov	r8, r0
   399d4:	sub	sp, sp, #28
   399d8:	mov	r0, #40	; 0x28
   399dc:	mov	r4, r2
   399e0:	mov	fp, r3
   399e4:	mov	r9, r1
   399e8:	bl	11f3c <xmalloc@plt>
   399ec:	mov	r5, #0
   399f0:	cmp	r4, #0
   399f4:	str	r5, [fp]
   399f8:	mov	r6, r0
   399fc:	beq	39b20 <__assert_fail@plt+0x27794>
   39a00:	ldr	r3, [r4]
   39a04:	cmp	r3, #46	; 0x2e
   39a08:	bne	39af0 <__assert_fail@plt+0x27764>
   39a0c:	ldr	r2, [r4, #8]
   39a10:	cmp	r2, r5
   39a14:	beq	39b20 <__assert_fail@plt+0x27794>
   39a18:	mov	r7, #10
   39a1c:	add	sl, sp, #20
   39a20:	str	fp, [sp, #12]
   39a24:	b	39a5c <__assert_fail@plt+0x276d0>
   39a28:	cmp	fp, r7
   39a2c:	bcs	39ab8 <__assert_fail@plt+0x2772c>
   39a30:	ldr	r4, [r4, #12]
   39a34:	str	r2, [r6, r5, lsl #2]
   39a38:	cmp	r4, #0
   39a3c:	mov	r5, fp
   39a40:	beq	39aa0 <__assert_fail@plt+0x27714>
   39a44:	ldr	r3, [r4]
   39a48:	cmp	r3, #46	; 0x2e
   39a4c:	bne	39af0 <__assert_fail@plt+0x27764>
   39a50:	ldr	r2, [r4, #8]
   39a54:	cmp	r2, #0
   39a58:	beq	39aa0 <__assert_fail@plt+0x27714>
   39a5c:	str	sl, [sp]
   39a60:	mov	r3, #0
   39a64:	mov	r1, r9
   39a68:	mov	r0, r8
   39a6c:	bl	39240 <__assert_fail@plt+0x26eb4>
   39a70:	add	fp, r5, #1
   39a74:	subs	r2, r0, #0
   39a78:	bne	39a28 <__assert_fail@plt+0x2769c>
   39a7c:	ldr	r3, [sp, #20]
   39a80:	cmp	r3, #0
   39a84:	beq	39ad8 <__assert_fail@plt+0x2774c>
   39a88:	ldr	r3, [sp, #12]
   39a8c:	mov	r2, #1
   39a90:	str	r2, [r3]
   39a94:	ldr	r4, [r4, #12]
   39a98:	cmp	r4, #0
   39a9c:	bne	39a44 <__assert_fail@plt+0x276b8>
   39aa0:	add	r5, r6, r5, lsl #2
   39aa4:	mov	r3, #0
   39aa8:	mov	r0, r6
   39aac:	str	r3, [r5]
   39ab0:	add	sp, sp, #28
   39ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39ab8:	add	r7, r7, #10
   39abc:	mov	r0, r6
   39ac0:	lsl	r1, r7, #2
   39ac4:	str	r2, [sp, #8]
   39ac8:	bl	11ed0 <xrealloc@plt>
   39acc:	ldr	r2, [sp, #8]
   39ad0:	mov	r6, r0
   39ad4:	b	39a30 <__assert_fail@plt+0x276a4>
   39ad8:	mov	r0, r6
   39adc:	bl	11e10 <free@plt>
   39ae0:	mov	r6, #0
   39ae4:	mov	r0, r6
   39ae8:	add	sp, sp, #28
   39aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39af0:	ldr	r3, [pc, #48]	; 39b28 <__assert_fail@plt+0x2779c>
   39af4:	mov	r2, #5
   39af8:	ldr	r1, [pc, #44]	; 39b2c <__assert_fail@plt+0x277a0>
   39afc:	mov	r0, #0
   39b00:	ldr	r4, [r3]
   39b04:	bl	11ea0 <dcgettext@plt>
   39b08:	mov	r1, r0
   39b0c:	mov	r0, r4
   39b10:	bl	120b0 <fprintf@plt>
   39b14:	mov	r0, r6
   39b18:	bl	11e10 <free@plt>
   39b1c:	b	39ae0 <__assert_fail@plt+0x27754>
   39b20:	mov	r5, r6
   39b24:	b	39aa4 <__assert_fail@plt+0x27718>
   39b28:	andeq	r7, r6, r8, lsl #3
   39b2c:	andeq	r1, r5, r4, lsr #23
   39b30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39b34:	mov	r7, r2
   39b38:	ldr	r6, [r1]
   39b3c:	sub	sp, sp, #24
   39b40:	mov	r4, r1
   39b44:	ldrb	r3, [r6]
   39b48:	mov	r8, r0
   39b4c:	sub	r2, r3, #65	; 0x41
   39b50:	cmp	r2, #47	; 0x2f
   39b54:	ldrls	pc, [pc, r2, lsl #2]
   39b58:	b	39fec <__assert_fail@plt+0x27c60>
   39b5c:	andeq	r9, r3, ip, ror ip
   39b60:	andeq	r9, r3, ip, ror #31
   39b64:			; <UNDEFINED> instruction: 0x00039fb4
   39b68:	andeq	r9, r3, ip, ror #31
   39b6c:	andeq	r9, r3, ip, ror #31
   39b70:	andeq	r9, r3, r8, asr sp
   39b74:	ldrdeq	r9, [r3], -r0
   39b78:	andeq	r9, r3, ip, ror #31
   39b7c:	andeq	r9, r3, ip, ror #31
   39b80:	andeq	r9, r3, ip, ror #31
   39b84:	andeq	r9, r3, ip, ror #31
   39b88:	andeq	r9, r3, ip, ror #31
   39b8c:	strdeq	r9, [r3], -r4
   39b90:	andeq	r9, r3, ip, ror #31
   39b94:	strdeq	r9, [r3], -r4
   39b98:	andeq	r9, r3, r8, lsr #30
   39b9c:	andeq	r9, r3, r0, ror #30
   39ba0:	andeq	r9, r3, ip, ror pc
   39ba4:	andeq	r9, r3, ip, ror #31
   39ba8:	andeq	r9, r3, ip, lsl ip
   39bac:	andeq	r9, r3, ip, ror #31
   39bb0:	andeq	r9, r3, ip, ror #31
   39bb4:	andeq	r9, r3, ip, ror #31
   39bb8:	andeq	r9, r3, ip, ror #31
   39bbc:	andeq	r9, r3, ip, ror #31
   39bc0:	andeq	r9, r3, ip, ror #31
   39bc4:	andeq	r9, r3, ip, ror #31
   39bc8:	andeq	r9, r3, ip, ror #31
   39bcc:	andeq	r9, r3, ip, ror #31
   39bd0:	andeq	r9, r3, ip, ror #31
   39bd4:	andeq	r9, r3, ip, ror #31
   39bd8:	andeq	r9, r3, ip, ror #31
   39bdc:	andeq	r9, r3, ip, ror #31
   39be0:	andeq	r9, r3, ip, ror #31
   39be4:	andeq	r9, r3, ip, ror #31
   39be8:	andeq	r9, r3, ip, ror #31
   39bec:	andeq	r9, r3, ip, ror #31
   39bf0:	andeq	r9, r3, ip, ror #31
   39bf4:	andeq	r9, r3, ip, ror #31
   39bf8:	andeq	r9, r3, ip, ror #31
   39bfc:	andeq	r9, r3, ip, ror #31
   39c00:	andeq	r9, r3, ip, ror #31
   39c04:	andeq	r9, r3, ip, ror #31
   39c08:	andeq	r9, r3, ip, ror #31
   39c0c:	andeq	r9, r3, ip, ror #31
   39c10:	andeq	r9, r3, ip, ror #31
   39c14:	andeq	r9, r3, ip, ror #31
   39c18:	andeq	r9, r3, r8, lsr #30
   39c1c:	add	r3, r6, #1
   39c20:	str	r3, [r1]
   39c24:	mov	r0, r1
   39c28:	add	r1, sp, #16
   39c2c:	bl	38684 <__assert_fail@plt+0x262f8>
   39c30:	cmp	r0, #0
   39c34:	beq	3a2b8 <__assert_fail@plt+0x27f2c>
   39c38:	ldr	r3, [sp, #16]
   39c3c:	ldr	r2, [r8, #20]
   39c40:	cmp	r2, r3
   39c44:	bls	3a2b8 <__assert_fail@plt+0x27f2c>
   39c48:	ldr	r1, [r8, #16]
   39c4c:	mov	r2, r7
   39c50:	mov	r0, r8
   39c54:	ldr	r3, [r1, r3, lsl #3]
   39c58:	add	r1, sp, #20
   39c5c:	str	r3, [sp, #20]
   39c60:	bl	39b30 <__assert_fail@plt+0x277a4>
   39c64:	cmp	r0, #0
   39c68:	beq	3a2c0 <__assert_fail@plt+0x27f34>
   39c6c:	mov	r5, #1
   39c70:	mov	r0, r5
   39c74:	add	sp, sp, #24
   39c78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39c7c:	add	r2, r6, #1
   39c80:	str	r2, [r1]
   39c84:	ldrb	r3, [r6, #1]
   39c88:	subs	r5, r3, #95	; 0x5f
   39c8c:	movne	r5, #1
   39c90:	cmp	r3, #0
   39c94:	moveq	r5, #0
   39c98:	cmp	r5, #0
   39c9c:	beq	39cf0 <__assert_fail@plt+0x27964>
   39ca0:	ldr	r0, [pc, #2692]	; 3a72c <__assert_fail@plt+0x283a0>
   39ca4:	lsl	r1, r3, #1
   39ca8:	ldrh	r1, [r0, r1]
   39cac:	tst	r1, #4
   39cb0:	movne	r5, #0
   39cb4:	bne	39cc8 <__assert_fail@plt+0x2793c>
   39cb8:	b	3a2b8 <__assert_fail@plt+0x27f2c>
   39cbc:	ldrh	r1, [r0, r1]
   39cc0:	tst	r1, #4
   39cc4:	beq	3a2b8 <__assert_fail@plt+0x27f2c>
   39cc8:	add	r2, r2, #1
   39ccc:	add	r5, r5, r5, lsl #2
   39cd0:	str	r2, [r4]
   39cd4:	add	r5, r3, r5, lsl #1
   39cd8:	ldrb	r3, [r2]
   39cdc:	sub	r5, r5, #48	; 0x30
   39ce0:	cmp	r3, #0
   39ce4:	cmpne	r3, #95	; 0x5f
   39ce8:	lsl	r1, r3, #1
   39cec:	bne	39cbc <__assert_fail@plt+0x27930>
   39cf0:	cmp	r3, #95	; 0x5f
   39cf4:	bne	3a2b8 <__assert_fail@plt+0x27f2c>
   39cf8:	add	r2, r2, #1
   39cfc:	str	r2, [r4]
   39d00:	mov	r1, r4
   39d04:	mov	r2, r7
   39d08:	mov	r0, r8
   39d0c:	bl	39b30 <__assert_fail@plt+0x277a4>
   39d10:	cmp	r0, #0
   39d14:	beq	3a2c0 <__assert_fail@plt+0x27f34>
   39d18:	cmp	r7, #0
   39d1c:	beq	39c6c <__assert_fail@plt+0x278e0>
   39d20:	ldr	r1, [pc, #2568]	; 3a730 <__assert_fail@plt+0x283a4>
   39d24:	ldr	r0, [r8]
   39d28:	bl	38058 <__assert_fail@plt+0x25ccc>
   39d2c:	subs	r2, r0, #0
   39d30:	beq	3a6cc <__assert_fail@plt+0x28340>
   39d34:	mov	r3, #0
   39d38:	str	r5, [sp]
   39d3c:	ldr	r0, [r8]
   39d40:	str	r3, [sp, #4]
   39d44:	ldr	r1, [r7]
   39d48:	bl	37a54 <__assert_fail@plt+0x256c8>
   39d4c:	mov	r5, #1
   39d50:	str	r0, [r7]
   39d54:	b	39de8 <__assert_fail@plt+0x27a5c>
   39d58:	cmp	r7, #0
   39d5c:	add	r3, r6, #1
   39d60:	str	r3, [r1]
   39d64:	moveq	r2, r7
   39d68:	moveq	r3, r7
   39d6c:	addne	r2, sp, #16
   39d70:	addne	r3, sp, #20
   39d74:	bl	3b1a8 <__assert_fail@plt+0x28e1c>
   39d78:	cmp	r0, #0
   39d7c:	beq	3a2c0 <__assert_fail@plt+0x27f34>
   39d80:	ldr	r3, [r4]
   39d84:	ldrb	r2, [r3]
   39d88:	cmp	r2, #95	; 0x5f
   39d8c:	bne	3a2b8 <__assert_fail@plt+0x27f2c>
   39d90:	add	r3, r3, #1
   39d94:	str	r3, [r4]
   39d98:	mov	r1, r4
   39d9c:	mov	r2, r7
   39da0:	mov	r0, r8
   39da4:	bl	39b30 <__assert_fail@plt+0x277a4>
   39da8:	cmp	r0, #0
   39dac:	beq	3a2c0 <__assert_fail@plt+0x27f34>
   39db0:	cmp	r7, #0
   39db4:	beq	39c6c <__assert_fail@plt+0x278e0>
   39db8:	ldr	r0, [r8]
   39dbc:	ldrd	r2, [sp, #16]
   39dc0:	ldr	r1, [r7]
   39dc4:	bl	37998 <__assert_fail@plt+0x2560c>
   39dc8:	str	r0, [r7]
   39dcc:	b	39c6c <__assert_fail@plt+0x278e0>
   39dd0:	add	r6, r6, #1
   39dd4:	str	r6, [r1]
   39dd8:	mov	r2, r7
   39ddc:	bl	39b30 <__assert_fail@plt+0x277a4>
   39de0:	adds	r5, r0, #0
   39de4:	movne	r5, #1
   39de8:	mov	r0, r5
   39dec:	add	sp, sp, #24
   39df0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39df4:	mov	sl, r6
   39df8:	mov	r5, #0
   39dfc:	str	r5, [sp, #12]
   39e00:	ldrb	r9, [sl], #1
   39e04:	str	r5, [sp, #16]
   39e08:	str	r5, [sp, #20]
   39e0c:	str	sl, [r1]
   39e10:	ldrb	r2, [r6, #1]
   39e14:	ldr	r0, [pc, #2320]	; 3a72c <__assert_fail@plt+0x283a0>
   39e18:	lsl	r3, r2, #1
   39e1c:	ldrh	r3, [r0, r3]
   39e20:	tst	r3, #4
   39e24:	bne	39e50 <__assert_fail@plt+0x27ac4>
   39e28:	cmp	r2, #81	; 0x51
   39e2c:	bne	3a2b8 <__assert_fail@plt+0x27f2c>
   39e30:	cmp	r7, #0
   39e34:	moveq	r2, r7
   39e38:	addne	r2, sp, #12
   39e3c:	mov	r0, r8
   39e40:	bl	3ada8 <__assert_fail@plt+0x28a1c>
   39e44:	cmp	r0, #0
   39e48:	bne	39ec4 <__assert_fail@plt+0x27b38>
   39e4c:	b	3a2c0 <__assert_fail@plt+0x27f34>
   39e50:	add	sl, sl, #1
   39e54:	add	r5, r5, r5, lsl #2
   39e58:	str	sl, [r4]
   39e5c:	add	r5, r2, r5, lsl #1
   39e60:	ldrb	r2, [sl]
   39e64:	sub	r5, r5, #48	; 0x30
   39e68:	lsl	r3, r2, #1
   39e6c:	ldrh	r3, [r0, r3]
   39e70:	tst	r3, #4
   39e74:	bne	39e50 <__assert_fail@plt+0x27ac4>
   39e78:	mov	r0, sl
   39e7c:	bl	12074 <strlen@plt>
   39e80:	cmp	r0, r5
   39e84:	bcc	3a2b8 <__assert_fail@plt+0x27f2c>
   39e88:	add	r3, sl, r5
   39e8c:	cmp	r7, #0
   39e90:	str	r3, [r4]
   39e94:	beq	39ec8 <__assert_fail@plt+0x27b3c>
   39e98:	ldr	r1, [r8, #4]
   39e9c:	mov	r0, #9
   39ea0:	str	r0, [sp]
   39ea4:	mov	r3, r5
   39ea8:	mov	r2, sl
   39eac:	add	r1, r1, #212	; 0xd4
   39eb0:	ldr	r0, [r8]
   39eb4:	bl	39148 <__assert_fail@plt+0x26dbc>
   39eb8:	cmp	r0, #0
   39ebc:	str	r0, [sp, #12]
   39ec0:	beq	3a2c0 <__assert_fail@plt+0x27f34>
   39ec4:	ldr	r3, [r4]
   39ec8:	cmp	r9, #77	; 0x4d
   39ecc:	ldrb	r2, [r3]
   39ed0:	beq	3a620 <__assert_fail@plt+0x28294>
   39ed4:	cmp	r2, #95	; 0x5f
   39ed8:	bne	3a2b8 <__assert_fail@plt+0x27f2c>
   39edc:	add	r3, r3, #1
   39ee0:	str	r3, [r4]
   39ee4:	mov	r1, r4
   39ee8:	mov	r2, r7
   39eec:	mov	r0, r8
   39ef0:	bl	39b30 <__assert_fail@plt+0x277a4>
   39ef4:	cmp	r0, #0
   39ef8:	beq	3a2c0 <__assert_fail@plt+0x27f34>
   39efc:	cmp	r7, #0
   39f00:	beq	39c6c <__assert_fail@plt+0x278e0>
   39f04:	cmp	r9, #77	; 0x4d
   39f08:	ldr	r0, [r8]
   39f0c:	ldr	r3, [r7]
   39f10:	ldr	r1, [sp, #12]
   39f14:	beq	3a688 <__assert_fail@plt+0x282fc>
   39f18:	mov	r2, r3
   39f1c:	bl	37b04 <__assert_fail@plt+0x25778>
   39f20:	str	r0, [r7]
   39f24:	b	39c6c <__assert_fail@plt+0x278e0>
   39f28:	add	r6, r6, #1
   39f2c:	str	r6, [r1]
   39f30:	mov	r2, r7
   39f34:	bl	39b30 <__assert_fail@plt+0x277a4>
   39f38:	cmp	r0, #0
   39f3c:	beq	3a2c0 <__assert_fail@plt+0x27f34>
   39f40:	cmp	r7, #0
   39f44:	beq	39c6c <__assert_fail@plt+0x278e0>
   39f48:	ldr	r0, [r8]
   39f4c:	ldr	r1, [r7]
   39f50:	bl	3795c <__assert_fail@plt+0x255d0>
   39f54:	mov	r5, #1
   39f58:	str	r0, [r7]
   39f5c:	b	39de8 <__assert_fail@plt+0x27a5c>
   39f60:	mov	r2, r7
   39f64:	bl	3ada8 <__assert_fail@plt+0x28a1c>
   39f68:	adds	r5, r0, #0
   39f6c:	movne	r5, #1
   39f70:	mov	r0, r5
   39f74:	add	sp, sp, #24
   39f78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39f7c:	add	r6, r6, #1
   39f80:	str	r6, [r1]
   39f84:	mov	r2, r7
   39f88:	bl	39b30 <__assert_fail@plt+0x277a4>
   39f8c:	cmp	r0, #0
   39f90:	beq	3a2c0 <__assert_fail@plt+0x27f34>
   39f94:	cmp	r7, #0
   39f98:	beq	39c6c <__assert_fail@plt+0x278e0>
   39f9c:	ldr	r0, [r8]
   39fa0:	ldr	r1, [r7]
   39fa4:	bl	379e0 <__assert_fail@plt+0x25654>
   39fa8:	mov	r5, #1
   39fac:	str	r0, [r7]
   39fb0:	b	39de8 <__assert_fail@plt+0x27a5c>
   39fb4:	add	r6, r6, #1
   39fb8:	str	r6, [r1]
   39fbc:	mov	r2, r7
   39fc0:	bl	39b30 <__assert_fail@plt+0x277a4>
   39fc4:	cmp	r0, #0
   39fc8:	beq	3a2c0 <__assert_fail@plt+0x27f34>
   39fcc:	cmp	r7, #0
   39fd0:	beq	39c6c <__assert_fail@plt+0x278e0>
   39fd4:	ldr	r0, [r8]
   39fd8:	ldr	r1, [r7]
   39fdc:	bl	37bac <__assert_fail@plt+0x25820>
   39fe0:	mov	r5, #1
   39fe4:	str	r0, [r7]
   39fe8:	b	39de8 <__assert_fail@plt+0x27a5c>
   39fec:	mov	r2, #0
   39ff0:	mov	sl, r2
   39ff4:	mov	r5, r2
   39ff8:	mov	r9, r2
   39ffc:	mov	r1, r6
   3a000:	sub	r0, r3, #67	; 0x43
   3a004:	cmp	r0, #19
   3a008:	ldrls	pc, [pc, r0, lsl #2]
   3a00c:	b	3a0a8 <__assert_fail@plt+0x27d1c>
   3a010:	muleq	r3, r8, r0
   3a014:	andeq	sl, r3, r8, lsr #1
   3a018:	andeq	sl, r3, r8, lsr #1
   3a01c:	andeq	sl, r3, r8, lsr #1
   3a020:	andeq	sl, r3, r8, lsr #1
   3a024:	andeq	sl, r3, r8, lsr #1
   3a028:	andeq	sl, r3, r8, lsr #1
   3a02c:	andeq	sl, r3, r8, lsr #1
   3a030:	andeq	sl, r3, r8, lsr #1
   3a034:	andeq	sl, r3, r8, lsr #1
   3a038:	andeq	sl, r3, r8, lsr #1
   3a03c:	andeq	sl, r3, r8, lsr #1
   3a040:	andeq	sl, r3, r8, lsr #1
   3a044:	andeq	sl, r3, r8, lsr #1
   3a048:	andeq	sl, r3, r8, lsr #1
   3a04c:	andeq	sl, r3, r8, lsr #1
   3a050:	andeq	sl, r3, r8, lsl #1
   3a054:	andeq	sl, r3, r8, lsr #1
   3a058:	andeq	sl, r3, r8, ror r0
   3a05c:	andeq	sl, r3, r0, rrx
   3a060:	mov	r5, #1
   3a064:	add	r3, r1, r5
   3a068:	str	r3, [r4]
   3a06c:	ldrb	r3, [r1, #1]
   3a070:	ldr	r1, [r4]
   3a074:	b	3a000 <__assert_fail@plt+0x27c74>
   3a078:	add	r3, r1, #1
   3a07c:	str	r3, [r4]
   3a080:	mov	sl, #1
   3a084:	b	3a06c <__assert_fail@plt+0x27ce0>
   3a088:	add	r3, r1, #1
   3a08c:	str	r3, [r4]
   3a090:	mov	r2, #1
   3a094:	b	3a06c <__assert_fail@plt+0x27ce0>
   3a098:	add	r3, r1, #1
   3a09c:	str	r3, [r4]
   3a0a0:	mov	r9, #1
   3a0a4:	b	3a06c <__assert_fail@plt+0x27ce0>
   3a0a8:	cmp	r3, #120	; 0x78
   3a0ac:	ldrls	pc, [pc, r3, lsl #2]
   3a0b0:	b	3a2b8 <__assert_fail@plt+0x27f2c>
   3a0b4:	andeq	sl, r3, r4, asr r3
   3a0b8:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0bc:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0c0:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0c4:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0c8:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0cc:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0d0:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0d4:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0d8:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0dc:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0e0:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0e4:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0e8:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0ec:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0f0:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0f4:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0f8:			; <UNDEFINED> instruction: 0x0003a2b8
   3a0fc:			; <UNDEFINED> instruction: 0x0003a2b8
   3a100:			; <UNDEFINED> instruction: 0x0003a2b8
   3a104:			; <UNDEFINED> instruction: 0x0003a2b8
   3a108:			; <UNDEFINED> instruction: 0x0003a2b8
   3a10c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a110:			; <UNDEFINED> instruction: 0x0003a2b8
   3a114:			; <UNDEFINED> instruction: 0x0003a2b8
   3a118:			; <UNDEFINED> instruction: 0x0003a2b8
   3a11c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a120:			; <UNDEFINED> instruction: 0x0003a2b8
   3a124:			; <UNDEFINED> instruction: 0x0003a2b8
   3a128:			; <UNDEFINED> instruction: 0x0003a2b8
   3a12c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a130:			; <UNDEFINED> instruction: 0x0003a2b8
   3a134:			; <UNDEFINED> instruction: 0x0003a2b8
   3a138:			; <UNDEFINED> instruction: 0x0003a2b8
   3a13c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a140:			; <UNDEFINED> instruction: 0x0003a2b8
   3a144:			; <UNDEFINED> instruction: 0x0003a2b8
   3a148:			; <UNDEFINED> instruction: 0x0003a2b8
   3a14c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a150:			; <UNDEFINED> instruction: 0x0003a2b8
   3a154:			; <UNDEFINED> instruction: 0x0003a2b8
   3a158:			; <UNDEFINED> instruction: 0x0003a2b8
   3a15c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a160:			; <UNDEFINED> instruction: 0x0003a2b8
   3a164:			; <UNDEFINED> instruction: 0x0003a2b8
   3a168:			; <UNDEFINED> instruction: 0x0003a2b8
   3a16c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a170:			; <UNDEFINED> instruction: 0x0003a2b8
   3a174:	ldrdeq	sl, [r3], -r0
   3a178:	ldrdeq	sl, [r3], -r0
   3a17c:	ldrdeq	sl, [r3], -r0
   3a180:	ldrdeq	sl, [r3], -r0
   3a184:	ldrdeq	sl, [r3], -r0
   3a188:	ldrdeq	sl, [r3], -r0
   3a18c:	ldrdeq	sl, [r3], -r0
   3a190:	ldrdeq	sl, [r3], -r0
   3a194:	ldrdeq	sl, [r3], -r0
   3a198:	ldrdeq	sl, [r3], -r0
   3a19c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1a0:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1a4:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1a8:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1ac:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1b0:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1b4:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1b8:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1bc:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1c0:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1c4:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1c8:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1cc:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1d0:	muleq	r3, r8, r2
   3a1d4:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1d8:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1dc:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1e0:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1e4:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1e8:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1ec:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1f0:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1f4:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1f8:			; <UNDEFINED> instruction: 0x0003a2b8
   3a1fc:			; <UNDEFINED> instruction: 0x0003a2b8
   3a200:			; <UNDEFINED> instruction: 0x0003a2b8
   3a204:			; <UNDEFINED> instruction: 0x0003a2b8
   3a208:			; <UNDEFINED> instruction: 0x0003a2b8
   3a20c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a210:			; <UNDEFINED> instruction: 0x0003a2b8
   3a214:			; <UNDEFINED> instruction: 0x0003a2b8
   3a218:			; <UNDEFINED> instruction: 0x0003a2b8
   3a21c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a220:			; <UNDEFINED> instruction: 0x0003a2b8
   3a224:			; <UNDEFINED> instruction: 0x0003a2b8
   3a228:			; <UNDEFINED> instruction: 0x0003a2b8
   3a22c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a230:	andeq	sl, r3, r4, asr r3
   3a234:			; <UNDEFINED> instruction: 0x0003a2b8
   3a238:			; <UNDEFINED> instruction: 0x0003a2b8
   3a23c:	ldrdeq	sl, [r3], -r4
   3a240:	andeq	sl, r3, r4, lsl #11
   3a244:	andeq	sl, r3, r4, ror r5
   3a248:			; <UNDEFINED> instruction: 0x0003a2b8
   3a24c:	andeq	sl, r3, ip, lsr r5
   3a250:			; <UNDEFINED> instruction: 0x0003a2b8
   3a254:			; <UNDEFINED> instruction: 0x0003a2b8
   3a258:	andeq	sl, r3, r8, lsr #10
   3a25c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a260:			; <UNDEFINED> instruction: 0x0003a2b8
   3a264:	andeq	sl, r3, r0, ror #9
   3a268:			; <UNDEFINED> instruction: 0x0003a2b8
   3a26c:			; <UNDEFINED> instruction: 0x0003a2b8
   3a270:			; <UNDEFINED> instruction: 0x0003a2b8
   3a274:			; <UNDEFINED> instruction: 0x0003a2b8
   3a278:			; <UNDEFINED> instruction: 0x0003a2b8
   3a27c:	andeq	sl, r3, r8, lsr #9
   3a280:	andeq	sl, r3, r4, ror r4
   3a284:	andeq	sl, r3, ip, lsl #8
   3a288:			; <UNDEFINED> instruction: 0x0003a2b8
   3a28c:	ldrdeq	sl, [r3], -r8
   3a290:	muleq	r3, ip, r3
   3a294:	andeq	sl, r3, r0, ror #6
   3a298:	add	r3, r1, #1
   3a29c:	str	r3, [r4]
   3a2a0:	ldrb	r3, [r1, #1]
   3a2a4:	ldr	r2, [pc, #1152]	; 3a72c <__assert_fail@plt+0x283a0>
   3a2a8:	lsl	r3, r3, #1
   3a2ac:	ldrh	r3, [r2, r3]
   3a2b0:	ands	sl, r3, #4
   3a2b4:	bne	3a2d0 <__assert_fail@plt+0x27f44>
   3a2b8:	mov	r0, r6
   3a2bc:	bl	38764 <__assert_fail@plt+0x263d8>
   3a2c0:	mov	r5, #0
   3a2c4:	mov	r0, r5
   3a2c8:	add	sp, sp, #24
   3a2cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a2d0:	add	r1, sp, #20
   3a2d4:	mov	r0, r4
   3a2d8:	bl	390b0 <__assert_fail@plt+0x26d24>
   3a2dc:	cmp	r0, #0
   3a2e0:	beq	3a2c0 <__assert_fail@plt+0x27f34>
   3a2e4:	cmp	r7, #0
   3a2e8:	beq	39c6c <__assert_fail@plt+0x278e0>
   3a2ec:	ldr	r3, [sp, #20]
   3a2f0:	ldr	r1, [r4]
   3a2f4:	mov	r0, r3
   3a2f8:	sub	r1, r1, r3
   3a2fc:	bl	38838 <__assert_fail@plt+0x264ac>
   3a300:	mov	r1, r0
   3a304:	mov	r6, r0
   3a308:	ldr	r0, [r8]
   3a30c:	bl	38058 <__assert_fail@plt+0x25ccc>
   3a310:	str	r0, [r7]
   3a314:	mov	r0, r6
   3a318:	bl	11e10 <free@plt>
   3a31c:	ldr	r0, [r7]
   3a320:	cmp	r0, #0
   3a324:	beq	3a6fc <__assert_fail@plt+0x28370>
   3a328:	cmp	r7, #0
   3a32c:	beq	39c6c <__assert_fail@plt+0x278e0>
   3a330:	cmp	r9, #0
   3a334:	bne	3a60c <__assert_fail@plt+0x28280>
   3a338:	cmp	r5, #0
   3a33c:	beq	39c6c <__assert_fail@plt+0x278e0>
   3a340:	ldr	r0, [r8]
   3a344:	ldr	r1, [r7]
   3a348:	bl	37bd8 <__assert_fail@plt+0x2584c>
   3a34c:	str	r0, [r7]
   3a350:	b	39de8 <__assert_fail@plt+0x27a5c>
   3a354:	mov	r0, r6
   3a358:	bl	38764 <__assert_fail@plt+0x263d8>
   3a35c:	b	3a328 <__assert_fail@plt+0x27f9c>
   3a360:	cmp	r7, #0
   3a364:	beq	3a390 <__assert_fail@plt+0x28004>
   3a368:	ldr	r3, [pc, #964]	; 3a734 <__assert_fail@plt+0x283a8>
   3a36c:	cmp	sl, #0
   3a370:	ldr	r1, [pc, #960]	; 3a738 <__assert_fail@plt+0x283ac>
   3a374:	ldr	r0, [r8]
   3a378:	moveq	r1, r3
   3a37c:	bl	38058 <__assert_fail@plt+0x25ccc>
   3a380:	cmp	r0, #0
   3a384:	str	r0, [r7]
   3a388:	beq	3a6e0 <__assert_fail@plt+0x28354>
   3a38c:	ldr	r1, [r4]
   3a390:	add	r1, r1, #1
   3a394:	str	r1, [r4]
   3a398:	b	3a328 <__assert_fail@plt+0x27f9c>
   3a39c:	cmp	r7, #0
   3a3a0:	beq	3a390 <__assert_fail@plt+0x28004>
   3a3a4:	ldr	r1, [pc, #912]	; 3a73c <__assert_fail@plt+0x283b0>
   3a3a8:	ldr	r0, [r8]
   3a3ac:	bl	38058 <__assert_fail@plt+0x25ccc>
   3a3b0:	cmp	r0, #0
   3a3b4:	str	r0, [r7]
   3a3b8:	bne	3a38c <__assert_fail@plt+0x28000>
   3a3bc:	mov	r2, #1
   3a3c0:	mov	r1, #2
   3a3c4:	ldr	r0, [r8]
   3a3c8:	bl	3782c <__assert_fail@plt+0x254a0>
   3a3cc:	ldr	r1, [r4]
   3a3d0:	str	r0, [r7]
   3a3d4:	b	3a390 <__assert_fail@plt+0x28004>
   3a3d8:	cmp	r7, #0
   3a3dc:	beq	3a390 <__assert_fail@plt+0x28004>
   3a3e0:	ldr	r1, [pc, #856]	; 3a740 <__assert_fail@plt+0x283b4>
   3a3e4:	ldr	r0, [r8]
   3a3e8:	bl	38058 <__assert_fail@plt+0x25ccc>
   3a3ec:	cmp	r0, #0
   3a3f0:	str	r0, [r7]
   3a3f4:	bne	3a38c <__assert_fail@plt+0x28000>
   3a3f8:	ldr	r0, [r8]
   3a3fc:	bl	37820 <__assert_fail@plt+0x25494>
   3a400:	ldr	r1, [r4]
   3a404:	str	r0, [r7]
   3a408:	b	3a390 <__assert_fail@plt+0x28004>
   3a40c:	cmp	r7, #0
   3a410:	beq	3a6b0 <__assert_fail@plt+0x28324>
   3a414:	mov	r1, r4
   3a418:	add	r2, sp, #20
   3a41c:	mov	r0, r8
   3a420:	bl	3a774 <__assert_fail@plt+0x283e8>
   3a424:	cmp	r0, #0
   3a428:	beq	3a2c0 <__assert_fail@plt+0x27f34>
   3a42c:	ldr	r4, [sp, #20]
   3a430:	mov	r0, r4
   3a434:	bl	12074 <strlen@plt>
   3a438:	ldr	r1, [r8, #4]
   3a43c:	mov	r3, #9
   3a440:	str	r3, [sp]
   3a444:	mov	r2, r4
   3a448:	add	r1, r1, #212	; 0xd4
   3a44c:	mov	r3, r0
   3a450:	ldr	r0, [r8]
   3a454:	bl	39148 <__assert_fail@plt+0x26dbc>
   3a458:	str	r0, [r7]
   3a45c:	ldr	r0, [sp, #20]
   3a460:	bl	11e10 <free@plt>
   3a464:	ldr	r3, [r7]
   3a468:	cmp	r3, #0
   3a46c:	bne	3a328 <__assert_fail@plt+0x27f9c>
   3a470:	b	3a2c0 <__assert_fail@plt+0x27f34>
   3a474:	cmp	r7, #0
   3a478:	beq	3a390 <__assert_fail@plt+0x28004>
   3a47c:	ldr	r3, [pc, #704]	; 3a744 <__assert_fail@plt+0x283b8>
   3a480:	cmp	sl, #0
   3a484:	ldr	r1, [pc, #700]	; 3a748 <__assert_fail@plt+0x283bc>
   3a488:	ldr	r0, [r8]
   3a48c:	moveq	r1, r3
   3a490:	bl	38058 <__assert_fail@plt+0x25ccc>
   3a494:	cmp	r0, #0
   3a498:	str	r0, [r7]
   3a49c:	bne	3a38c <__assert_fail@plt+0x28000>
   3a4a0:	mov	r2, sl
   3a4a4:	b	3a3c0 <__assert_fail@plt+0x28034>
   3a4a8:	cmp	r7, #0
   3a4ac:	beq	3a390 <__assert_fail@plt+0x28004>
   3a4b0:	ldr	r1, [pc, #660]	; 3a74c <__assert_fail@plt+0x283c0>
   3a4b4:	ldr	r0, [r8]
   3a4b8:	bl	38058 <__assert_fail@plt+0x25ccc>
   3a4bc:	cmp	r0, #0
   3a4c0:	str	r0, [r7]
   3a4c4:	bne	3a38c <__assert_fail@plt+0x28000>
   3a4c8:	mov	r1, #8
   3a4cc:	ldr	r0, [r8]
   3a4d0:	bl	37848 <__assert_fail@plt+0x254bc>
   3a4d4:	ldr	r1, [r4]
   3a4d8:	str	r0, [r7]
   3a4dc:	b	3a390 <__assert_fail@plt+0x28004>
   3a4e0:	cmp	r7, #0
   3a4e4:	beq	3a390 <__assert_fail@plt+0x28004>
   3a4e8:	ldr	r1, [pc, #608]	; 3a750 <__assert_fail@plt+0x283c4>
   3a4ec:	ldr	r3, [pc, #608]	; 3a754 <__assert_fail@plt+0x283c8>
   3a4f0:	cmp	sl, #0
   3a4f4:	moveq	r1, r3
   3a4f8:	ldr	r0, [r8]
   3a4fc:	bl	38058 <__assert_fail@plt+0x25ccc>
   3a500:	cmp	r0, #0
   3a504:	str	r0, [r7]
   3a508:	bne	3a38c <__assert_fail@plt+0x28000>
   3a50c:	mov	r1, #4
   3a510:	mov	r2, sl
   3a514:	ldr	r0, [r8]
   3a518:	bl	3782c <__assert_fail@plt+0x254a0>
   3a51c:	ldr	r1, [r4]
   3a520:	str	r0, [r7]
   3a524:	b	3a390 <__assert_fail@plt+0x28004>
   3a528:	cmp	r7, #0
   3a52c:	beq	3a390 <__assert_fail@plt+0x28004>
   3a530:	ldr	r1, [pc, #544]	; 3a758 <__assert_fail@plt+0x283cc>
   3a534:	ldr	r3, [pc, #500]	; 3a730 <__assert_fail@plt+0x283a4>
   3a538:	b	3a4f0 <__assert_fail@plt+0x28164>
   3a53c:	cmp	r7, #0
   3a540:	beq	3a390 <__assert_fail@plt+0x28004>
   3a544:	ldr	r1, [pc, #528]	; 3a75c <__assert_fail@plt+0x283d0>
   3a548:	ldr	r0, [r8]
   3a54c:	bl	38058 <__assert_fail@plt+0x25ccc>
   3a550:	cmp	r0, #0
   3a554:	str	r0, [r7]
   3a558:	bne	3a38c <__assert_fail@plt+0x28000>
   3a55c:	mov	r1, #4
   3a560:	ldr	r0, [r8]
   3a564:	bl	37848 <__assert_fail@plt+0x254bc>
   3a568:	ldr	r1, [r4]
   3a56c:	str	r0, [r7]
   3a570:	b	3a390 <__assert_fail@plt+0x28004>
   3a574:	cmp	r7, #0
   3a578:	beq	3a390 <__assert_fail@plt+0x28004>
   3a57c:	ldr	r1, [pc, #476]	; 3a760 <__assert_fail@plt+0x283d4>
   3a580:	b	3a4b4 <__assert_fail@plt+0x28128>
   3a584:	cmp	r7, #0
   3a588:	beq	3a390 <__assert_fail@plt+0x28004>
   3a58c:	cmp	sl, #0
   3a590:	ldr	r0, [r8]
   3a594:	bne	3a6a8 <__assert_fail@plt+0x2831c>
   3a598:	ldr	r3, [pc, #452]	; 3a764 <__assert_fail@plt+0x283d8>
   3a59c:	cmp	r2, #0
   3a5a0:	ldr	r1, [pc, #448]	; 3a768 <__assert_fail@plt+0x283dc>
   3a5a4:	moveq	r1, r3
   3a5a8:	bl	38058 <__assert_fail@plt+0x25ccc>
   3a5ac:	cmp	r0, #0
   3a5b0:	str	r0, [r7]
   3a5b4:	bne	3a38c <__assert_fail@plt+0x28000>
   3a5b8:	mov	r1, #1
   3a5bc:	mov	r2, sl
   3a5c0:	ldr	r0, [r8]
   3a5c4:	bl	3782c <__assert_fail@plt+0x254a0>
   3a5c8:	ldr	r1, [r4]
   3a5cc:	str	r0, [r7]
   3a5d0:	b	3a390 <__assert_fail@plt+0x28004>
   3a5d4:	cmp	r7, #0
   3a5d8:	beq	3a390 <__assert_fail@plt+0x28004>
   3a5dc:	ldr	r1, [pc, #392]	; 3a76c <__assert_fail@plt+0x283e0>
   3a5e0:	ldr	r0, [r8]
   3a5e4:	bl	38058 <__assert_fail@plt+0x25ccc>
   3a5e8:	cmp	r0, #0
   3a5ec:	str	r0, [r7]
   3a5f0:	bne	3a38c <__assert_fail@plt+0x28000>
   3a5f4:	mov	r1, #4
   3a5f8:	ldr	r0, [r8]
   3a5fc:	bl	37850 <__assert_fail@plt+0x254c4>
   3a600:	ldr	r1, [r4]
   3a604:	str	r0, [r7]
   3a608:	b	3a390 <__assert_fail@plt+0x28004>
   3a60c:	ldr	r1, [r7]
   3a610:	ldr	r0, [r8]
   3a614:	bl	37bac <__assert_fail@plt+0x25820>
   3a618:	str	r0, [r7]
   3a61c:	b	3a338 <__assert_fail@plt+0x27fac>
   3a620:	cmp	r2, #67	; 0x43
   3a624:	beq	3a674 <__assert_fail@plt+0x282e8>
   3a628:	cmp	r2, #86	; 0x56
   3a62c:	beq	3a674 <__assert_fail@plt+0x282e8>
   3a630:	cmp	r2, #70	; 0x46
   3a634:	bne	3a2b8 <__assert_fail@plt+0x27f2c>
   3a638:	cmp	r7, #0
   3a63c:	add	r3, r3, #1
   3a640:	str	r3, [r4]
   3a644:	addne	r2, sp, #16
   3a648:	addne	r3, sp, #20
   3a64c:	moveq	r2, r7
   3a650:	moveq	r3, r7
   3a654:	mov	r1, r4
   3a658:	mov	r0, r8
   3a65c:	bl	3b1a8 <__assert_fail@plt+0x28e1c>
   3a660:	cmp	r0, #0
   3a664:	beq	3a2c0 <__assert_fail@plt+0x27f34>
   3a668:	ldr	r3, [r4]
   3a66c:	ldrb	r2, [r3]
   3a670:	b	39ed4 <__assert_fail@plt+0x27b48>
   3a674:	add	r1, r3, #1
   3a678:	str	r1, [r4]
   3a67c:	ldrb	r2, [r3, #1]
   3a680:	mov	r3, r1
   3a684:	b	3a630 <__assert_fail@plt+0x282a4>
   3a688:	ldr	ip, [sp, #20]
   3a68c:	mov	r2, r1
   3a690:	str	ip, [sp]
   3a694:	mov	r1, r3
   3a698:	ldr	r3, [sp, #16]
   3a69c:	bl	37b5c <__assert_fail@plt+0x257d0>
   3a6a0:	str	r0, [r7]
   3a6a4:	b	39c6c <__assert_fail@plt+0x278e0>
   3a6a8:	ldr	r1, [pc, #192]	; 3a770 <__assert_fail@plt+0x283e4>
   3a6ac:	b	3a5a8 <__assert_fail@plt+0x2821c>
   3a6b0:	mov	r2, r7
   3a6b4:	mov	r1, r4
   3a6b8:	mov	r0, r8
   3a6bc:	bl	3a774 <__assert_fail@plt+0x283e8>
   3a6c0:	cmp	r0, #0
   3a6c4:	bne	39c6c <__assert_fail@plt+0x278e0>
   3a6c8:	b	3a2c0 <__assert_fail@plt+0x27f34>
   3a6cc:	mov	r1, #4
   3a6d0:	ldr	r0, [r8]
   3a6d4:	bl	3782c <__assert_fail@plt+0x254a0>
   3a6d8:	mov	r2, r0
   3a6dc:	b	39d34 <__assert_fail@plt+0x279a8>
   3a6e0:	mov	r1, #8
   3a6e4:	mov	r2, sl
   3a6e8:	ldr	r0, [r8]
   3a6ec:	bl	3782c <__assert_fail@plt+0x254a0>
   3a6f0:	ldr	r1, [r4]
   3a6f4:	str	r0, [r7]
   3a6f8:	b	3a390 <__assert_fail@plt+0x28004>
   3a6fc:	ldr	r3, [r4]
   3a700:	ldr	r1, [r8, #4]
   3a704:	ldr	r2, [sp, #20]
   3a708:	str	r0, [sp]
   3a70c:	sub	r3, r3, r2
   3a710:	add	r1, r1, #212	; 0xd4
   3a714:	ldr	r0, [r8]
   3a718:	bl	39148 <__assert_fail@plt+0x26dbc>
   3a71c:	cmp	r0, #0
   3a720:	str	r0, [r7]
   3a724:	bne	3a328 <__assert_fail@plt+0x27f9c>
   3a728:	b	3a2c0 <__assert_fail@plt+0x27f34>
   3a72c:	strdeq	r5, [r6], -r8
   3a730:	andeq	r1, r5, ip, asr #1
   3a734:	andeq	r1, r5, r8, ror #23
   3a738:	ldrdeq	r1, [r5], -r0
   3a73c:	andeq	r1, r5, r8, lsr ip
   3a740:	andeq	r0, r5, r4, asr pc
   3a744:	andeq	r1, r5, ip, lsr #24
   3a748:	andeq	r1, r5, r8, lsl ip
   3a74c:			; <UNDEFINED> instruction: 0x000519b0
   3a750:	strdeq	r1, [r5], -r8
   3a754:	andeq	r1, r5, ip, lsl #24
   3a758:	andeq	r1, r5, r4, lsl #19
   3a75c:	strdeq	r0, [r5], -r4
   3a760:	strdeq	r0, [r5], -ip
   3a764:	andeq	r4, r5, r0, ror lr
   3a768:	andeq	r1, r5, r8, ror #18
   3a76c:	andeq	r1, r5, r0, lsr #22
   3a770:	andeq	r1, r5, r8, asr r9
   3a774:	ldr	r3, [r1]
   3a778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a77c:	sub	sp, sp, #20
   3a780:	add	r9, r3, #1
   3a784:	str	r3, [sp]
   3a788:	str	r9, [r1]
   3a78c:	ldrb	r3, [r3, #1]
   3a790:	ldr	r8, [pc, #1540]	; 3ad9c <__assert_fail@plt+0x28a10>
   3a794:	str	r2, [sp, #4]
   3a798:	lsl	r2, r3, #1
   3a79c:	ldrh	r2, [r8, r2]
   3a7a0:	ands	r2, r2, #4
   3a7a4:	beq	3ad14 <__assert_fail@plt+0x28988>
   3a7a8:	mov	r6, r1
   3a7ac:	mov	r7, r0
   3a7b0:	mov	r4, #0
   3a7b4:	add	r9, r9, #1
   3a7b8:	add	r4, r4, r4, lsl #2
   3a7bc:	str	r9, [r6]
   3a7c0:	add	r4, r3, r4, lsl #1
   3a7c4:	ldrb	r3, [r9]
   3a7c8:	sub	r4, r4, #48	; 0x30
   3a7cc:	lsl	r2, r3, #1
   3a7d0:	ldrh	r2, [r8, r2]
   3a7d4:	ands	r2, r2, #4
   3a7d8:	bne	3a7b4 <__assert_fail@plt+0x28428>
   3a7dc:	cmp	r4, #0
   3a7e0:	mov	r5, r2
   3a7e4:	str	r4, [sp, #12]
   3a7e8:	beq	3a7fc <__assert_fail@plt+0x28470>
   3a7ec:	mov	r0, r9
   3a7f0:	bl	12074 <strlen@plt>
   3a7f4:	cmp	r0, r4
   3a7f8:	bcs	3a814 <__assert_fail@plt+0x28488>
   3a7fc:	ldr	r0, [sp]
   3a800:	bl	38764 <__assert_fail@plt+0x263d8>
   3a804:	mov	r9, #0
   3a808:	mov	r0, r9
   3a80c:	add	sp, sp, #20
   3a810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a814:	add	r4, r9, r4
   3a818:	str	r4, [r6]
   3a81c:	add	r1, sp, #12
   3a820:	mov	r0, r6
   3a824:	bl	38684 <__assert_fail@plt+0x262f8>
   3a828:	subs	r9, r0, #0
   3a82c:	beq	3abfc <__assert_fail@plt+0x28870>
   3a830:	ldr	r3, [sp, #12]
   3a834:	cmp	r3, #0
   3a838:	bne	3a870 <__assert_fail@plt+0x284e4>
   3a83c:	b	3aa44 <__assert_fail@plt+0x286b8>
   3a840:	add	r4, r4, #1
   3a844:	str	r4, [r6]
   3a848:	mov	r2, #0
   3a84c:	mov	r1, r6
   3a850:	mov	r0, r7
   3a854:	bl	39b30 <__assert_fail@plt+0x277a4>
   3a858:	cmp	r0, #0
   3a85c:	beq	3a804 <__assert_fail@plt+0x28478>
   3a860:	ldr	r3, [sp, #12]
   3a864:	add	r5, r5, #1
   3a868:	cmp	r3, r5
   3a86c:	bls	3aa44 <__assert_fail@plt+0x286b8>
   3a870:	ldr	r4, [r6]
   3a874:	ldrb	r3, [r4]
   3a878:	cmp	r3, #90	; 0x5a
   3a87c:	beq	3a840 <__assert_fail@plt+0x284b4>
   3a880:	mov	r2, #0
   3a884:	mov	r1, r6
   3a888:	mov	r0, r7
   3a88c:	bl	39b30 <__assert_fail@plt+0x277a4>
   3a890:	cmp	r0, #0
   3a894:	beq	3a804 <__assert_fail@plt+0x28478>
   3a898:	ldrb	r1, [r4]
   3a89c:	mov	r3, #0
   3a8a0:	mov	fp, r3
   3a8a4:	mov	ip, r3
   3a8a8:	mov	r9, r3
   3a8ac:	mov	lr, r3
   3a8b0:	mov	sl, r3
   3a8b4:	adds	r0, r1, #0
   3a8b8:	movne	r0, #1
   3a8bc:	eor	r3, r3, #1
   3a8c0:	tst	r0, r3
   3a8c4:	sub	r2, r1, #67	; 0x43
   3a8c8:	beq	3a9bc <__assert_fail@plt+0x28630>
   3a8cc:	mov	r3, #1
   3a8d0:	cmp	r2, #51	; 0x33
   3a8d4:	ldrls	pc, [pc, r2, lsl #2]
   3a8d8:	b	3ab50 <__assert_fail@plt+0x287c4>
   3a8dc:	andeq	sl, r3, ip, lsl fp
   3a8e0:	andeq	sl, r3, r0, asr fp
   3a8e4:	andeq	sl, r3, r0, asr fp
   3a8e8:	andeq	sl, r3, ip, lsl fp
   3a8ec:	andeq	sl, r3, r0, asr fp
   3a8f0:	andeq	sl, r3, r0, asr fp
   3a8f4:	andeq	sl, r3, r0, asr fp
   3a8f8:	andeq	sl, r3, r0, asr fp
   3a8fc:	andeq	sl, r3, r0, asr fp
   3a900:	andeq	sl, r3, r0, asr fp
   3a904:	andeq	sl, r3, ip, lsl fp
   3a908:	andeq	sl, r3, r0, asr fp
   3a90c:	andeq	sl, r3, ip, lsl fp
   3a910:	andeq	sl, r3, ip, lsr #19
   3a914:	andeq	sl, r3, r0, asr fp
   3a918:	andeq	sl, r3, ip, lsr #19
   3a91c:	andeq	sl, r3, ip, lsl fp
   3a920:	muleq	r3, r8, sp
   3a924:	andeq	sl, r3, ip, lsl fp
   3a928:	andeq	sl, r3, ip, lsl fp
   3a92c:	andeq	sl, r3, r0, asr fp
   3a930:	andeq	sl, r3, r0, asr fp
   3a934:	andeq	sl, r3, r0, asr fp
   3a938:	andeq	sl, r3, r0, asr fp
   3a93c:	andeq	sl, r3, r0, asr fp
   3a940:	andeq	sl, r3, r0, asr fp
   3a944:	andeq	sl, r3, r0, asr fp
   3a948:	andeq	sl, r3, r0, asr fp
   3a94c:	andeq	sl, r3, r0, asr fp
   3a950:	andeq	sl, r3, r0, asr fp
   3a954:	andeq	sl, r3, r0, asr fp
   3a958:	andeq	sl, r3, r8, lsr fp
   3a95c:	andeq	sl, r3, ip, lsr #22
   3a960:	andeq	sl, r3, r4, asr #22
   3a964:	andeq	sl, r3, r0, asr fp
   3a968:	andeq	sl, r3, r4, asr #22
   3a96c:	andeq	sl, r3, r0, asr fp
   3a970:	andeq	sl, r3, r0, asr fp
   3a974:	andeq	sl, r3, r0, asr fp
   3a978:	andeq	sl, r3, r0, asr fp
   3a97c:	andeq	sl, r3, r0, asr fp
   3a980:	andeq	sl, r3, r0, asr fp
   3a984:	andeq	sl, r3, r0, asr fp
   3a988:	andeq	sl, r3, r0, asr fp
   3a98c:	andeq	sl, r3, r0, asr fp
   3a990:	andeq	sl, r3, ip, lsr #19
   3a994:	andeq	sl, r3, r0, asr fp
   3a998:	andeq	sl, r3, r4, asr #22
   3a99c:	andeq	sl, r3, r0, asr fp
   3a9a0:	andeq	sl, r3, r0, asr fp
   3a9a4:	andeq	sl, r3, r0, asr fp
   3a9a8:	muleq	r3, r8, sp
   3a9ac:	eor	r3, r3, #1
   3a9b0:	tst	r0, r3
   3a9b4:	mov	sl, #1
   3a9b8:	bne	3a8cc <__assert_fail@plt+0x28540>
   3a9bc:	cmp	r9, #0
   3a9c0:	bne	3ab5c <__assert_fail@plt+0x287d0>
   3a9c4:	cmp	ip, #0
   3a9c8:	bne	3aba8 <__assert_fail@plt+0x2881c>
   3a9cc:	cmp	fp, #0
   3a9d0:	bne	3ac10 <__assert_fail@plt+0x28884>
   3a9d4:	cmp	lr, #0
   3a9d8:	bne	3ac60 <__assert_fail@plt+0x288d4>
   3a9dc:	cmp	sl, #0
   3a9e0:	beq	3a860 <__assert_fail@plt+0x284d4>
   3a9e4:	ldr	r3, [r6]
   3a9e8:	ldrb	r2, [r3]
   3a9ec:	lsl	r1, r2, #1
   3a9f0:	ldrh	r1, [r8, r1]
   3a9f4:	tst	r1, #4
   3a9f8:	beq	3a7fc <__assert_fail@plt+0x28470>
   3a9fc:	add	r3, r3, #1
   3aa00:	add	lr, lr, lr, lsl #2
   3aa04:	str	r3, [r6]
   3aa08:	add	lr, r2, lr, lsl #1
   3aa0c:	ldrb	r2, [r3]
   3aa10:	sub	lr, lr, #48	; 0x30
   3aa14:	lsl	r1, r2, #1
   3aa18:	ldrh	r1, [r8, r1]
   3aa1c:	tst	r1, #4
   3aa20:	bne	3a9fc <__assert_fail@plt+0x28670>
   3aa24:	cmp	lr, #0
   3aa28:	beq	3a7fc <__assert_fail@plt+0x28470>
   3aa2c:	add	lr, r3, lr
   3aa30:	ldr	r3, [sp, #12]
   3aa34:	add	r5, r5, #1
   3aa38:	cmp	r3, r5
   3aa3c:	str	lr, [r6]
   3aa40:	bhi	3a870 <__assert_fail@plt+0x284e4>
   3aa44:	ldr	r3, [sp, #4]
   3aa48:	cmp	r3, #0
   3aa4c:	moveq	r9, #1
   3aa50:	beq	3a808 <__assert_fail@plt+0x2847c>
   3aa54:	ldr	r3, [sp]
   3aa58:	ldr	r1, [r6]
   3aa5c:	mov	r0, r3
   3aa60:	sub	r1, r1, r3
   3aa64:	bl	38838 <__assert_fail@plt+0x264ac>
   3aa68:	mov	r2, #0
   3aa6c:	mov	r1, r0
   3aa70:	mov	r4, r0
   3aa74:	ldr	r0, [pc, #804]	; 3ada0 <__assert_fail@plt+0x28a14>
   3aa78:	bl	11ee8 <concat@plt>
   3aa7c:	mov	r5, r0
   3aa80:	mov	r0, r4
   3aa84:	bl	11e10 <free@plt>
   3aa88:	mov	r1, #2
   3aa8c:	mov	r0, r5
   3aa90:	bl	12194 <cplus_demangle@plt>
   3aa94:	mov	r4, r0
   3aa98:	mov	r0, r5
   3aa9c:	bl	11e10 <free@plt>
   3aaa0:	cmp	r4, #0
   3aaa4:	beq	3a7fc <__assert_fail@plt+0x28470>
   3aaa8:	ldr	r1, [pc, #756]	; 3ada4 <__assert_fail@plt+0x28a18>
   3aaac:	mov	r0, r4
   3aab0:	bl	11d5c <strstr@plt>
   3aab4:	subs	r9, r0, #0
   3aab8:	beq	3ad84 <__assert_fail@plt+0x289f8>
   3aabc:	cmp	r4, r9
   3aac0:	beq	3ad7c <__assert_fail@plt+0x289f0>
   3aac4:	sub	r0, r9, #1
   3aac8:	sub	r2, r4, #1
   3aacc:	mov	r3, r4
   3aad0:	b	3aae0 <__assert_fail@plt+0x28754>
   3aad4:	strb	r1, [r3], #1
   3aad8:	cmp	r0, r2
   3aadc:	beq	3ad1c <__assert_fail@plt+0x28990>
   3aae0:	ldrb	r1, [r2, #1]!
   3aae4:	cmp	r1, #32
   3aae8:	bne	3aad4 <__assert_fail@plt+0x28748>
   3aaec:	ldrb	lr, [r2, #1]
   3aaf0:	cmp	r4, r2
   3aaf4:	sub	ip, lr, #62	; 0x3e
   3aaf8:	clz	ip, ip
   3aafc:	lsr	ip, ip, #5
   3ab00:	movcs	ip, #0
   3ab04:	cmp	ip, #0
   3ab08:	beq	3aad8 <__assert_fail@plt+0x2874c>
   3ab0c:	ldrb	ip, [r2, #-1]
   3ab10:	cmp	ip, #62	; 0x3e
   3ab14:	bne	3aad8 <__assert_fail@plt+0x2874c>
   3ab18:	b	3aad4 <__assert_fail@plt+0x28748>
   3ab1c:	ldrb	r1, [r4, #1]
   3ab20:	mov	r3, #0
   3ab24:	add	r4, r4, #1
   3ab28:	b	3a8b4 <__assert_fail@plt+0x28528>
   3ab2c:	mov	r3, #1
   3ab30:	mov	ip, r3
   3ab34:	b	3a8b4 <__assert_fail@plt+0x28528>
   3ab38:	mov	r3, #1
   3ab3c:	mov	fp, r3
   3ab40:	b	3a8b4 <__assert_fail@plt+0x28528>
   3ab44:	mov	r3, #1
   3ab48:	mov	lr, r3
   3ab4c:	b	3a8b4 <__assert_fail@plt+0x28528>
   3ab50:	mov	r3, #1
   3ab54:	mov	r9, r3
   3ab58:	b	3a8b4 <__assert_fail@plt+0x28528>
   3ab5c:	ldr	r3, [r6]
   3ab60:	ldrb	r2, [r3]
   3ab64:	cmp	r2, #109	; 0x6d
   3ab68:	addeq	r1, r3, #1
   3ab6c:	streq	r1, [r6]
   3ab70:	ldrbeq	r2, [r3, #1]
   3ab74:	moveq	r3, r1
   3ab78:	lsl	r2, r2, #1
   3ab7c:	ldrh	r2, [r8, r2]
   3ab80:	tst	r2, #4
   3ab84:	beq	3a860 <__assert_fail@plt+0x284d4>
   3ab88:	add	r3, r3, #1
   3ab8c:	str	r3, [r6]
   3ab90:	ldrb	r2, [r3]
   3ab94:	lsl	r2, r2, #1
   3ab98:	ldrh	r2, [r8, r2]
   3ab9c:	tst	r2, #4
   3aba0:	bne	3ab88 <__assert_fail@plt+0x287fc>
   3aba4:	b	3a860 <__assert_fail@plt+0x284d4>
   3aba8:	ldr	r2, [r6]
   3abac:	ldrb	r1, [r2]
   3abb0:	cmp	r1, #109	; 0x6d
   3abb4:	beq	3acf0 <__assert_fail@plt+0x28964>
   3abb8:	lsl	r3, r1, #1
   3abbc:	ldrh	r3, [r8, r3]
   3abc0:	tst	r3, #4
   3abc4:	beq	3abfc <__assert_fail@plt+0x28870>
   3abc8:	mov	r3, #0
   3abcc:	add	r2, r2, #1
   3abd0:	add	r3, r3, r3, lsl #2
   3abd4:	str	r2, [r6]
   3abd8:	add	r3, r1, r3, lsl #1
   3abdc:	ldrb	r1, [r2]
   3abe0:	sub	r3, r3, #48	; 0x30
   3abe4:	lsl	r0, r1, #1
   3abe8:	ldrh	r0, [r8, r0]
   3abec:	tst	r0, #4
   3abf0:	bne	3abcc <__assert_fail@plt+0x28840>
   3abf4:	cmp	r3, #0
   3abf8:	bne	3a860 <__assert_fail@plt+0x284d4>
   3abfc:	ldr	r0, [sp]
   3ac00:	bl	38764 <__assert_fail@plt+0x263d8>
   3ac04:	mov	r0, r9
   3ac08:	add	sp, sp, #20
   3ac0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ac10:	ldr	r3, [r6]
   3ac14:	ldrb	r1, [r3]
   3ac18:	lsl	r2, r1, #1
   3ac1c:	ldrh	r2, [r8, r2]
   3ac20:	tst	r2, #4
   3ac24:	beq	3a860 <__assert_fail@plt+0x284d4>
   3ac28:	add	r3, r3, #1
   3ac2c:	add	ip, ip, ip, lsl #2
   3ac30:	str	r3, [r6]
   3ac34:	add	ip, r1, ip, lsl #1
   3ac38:	ldrb	r1, [r3]
   3ac3c:	sub	ip, ip, #48	; 0x30
   3ac40:	lsl	r2, r1, #1
   3ac44:	ldrh	r2, [r8, r2]
   3ac48:	ands	r2, r2, #4
   3ac4c:	bne	3ac28 <__assert_fail@plt+0x2889c>
   3ac50:	cmp	ip, #1
   3ac54:	bls	3a860 <__assert_fail@plt+0x284d4>
   3ac58:	mov	r9, r2
   3ac5c:	b	3abfc <__assert_fail@plt+0x28870>
   3ac60:	ldr	r3, [r6]
   3ac64:	ldrb	r2, [r3]
   3ac68:	cmp	r2, #109	; 0x6d
   3ac6c:	addeq	r1, r3, #1
   3ac70:	streq	r1, [r6]
   3ac74:	ldrbeq	r2, [r3, #1]
   3ac78:	moveq	r3, r1
   3ac7c:	b	3ac8c <__assert_fail@plt+0x28900>
   3ac80:	add	r3, r3, #1
   3ac84:	str	r3, [r6]
   3ac88:	ldrb	r2, [r3]
   3ac8c:	lsl	r1, r2, #1
   3ac90:	ldrh	r1, [r8, r1]
   3ac94:	tst	r1, #4
   3ac98:	bne	3ac80 <__assert_fail@plt+0x288f4>
   3ac9c:	cmp	r2, #46	; 0x2e
   3aca0:	beq	3ad40 <__assert_fail@plt+0x289b4>
   3aca4:	ldr	r2, [r6]
   3aca8:	ldrb	r3, [r2]
   3acac:	cmp	r3, #101	; 0x65
   3acb0:	bne	3a860 <__assert_fail@plt+0x284d4>
   3acb4:	add	r3, r2, #1
   3acb8:	str	r3, [r6]
   3acbc:	ldrb	r2, [r2, #1]
   3acc0:	lsl	r2, r2, #1
   3acc4:	ldrh	r2, [r8, r2]
   3acc8:	tst	r2, #4
   3accc:	beq	3a860 <__assert_fail@plt+0x284d4>
   3acd0:	add	r3, r3, #1
   3acd4:	str	r3, [r6]
   3acd8:	ldrb	r2, [r3]
   3acdc:	lsl	r2, r2, #1
   3ace0:	ldrh	r2, [r8, r2]
   3ace4:	tst	r2, #4
   3ace8:	bne	3acd0 <__assert_fail@plt+0x28944>
   3acec:	b	3a860 <__assert_fail@plt+0x284d4>
   3acf0:	add	r3, r2, #1
   3acf4:	str	r3, [r6]
   3acf8:	ldrb	r1, [r2, #1]
   3acfc:	lsl	r2, r1, #1
   3ad00:	ldrh	r2, [r8, r2]
   3ad04:	tst	r2, #4
   3ad08:	beq	3abfc <__assert_fail@plt+0x28870>
   3ad0c:	mov	r2, r3
   3ad10:	b	3abc8 <__assert_fail@plt+0x2883c>
   3ad14:	str	r2, [sp, #12]
   3ad18:	b	3a7fc <__assert_fail@plt+0x28470>
   3ad1c:	sub	r1, r3, r4
   3ad20:	mov	r0, r4
   3ad24:	bl	38838 <__assert_fail@plt+0x264ac>
   3ad28:	ldr	r3, [sp, #4]
   3ad2c:	mov	r9, #1
   3ad30:	str	r0, [r3]
   3ad34:	mov	r0, r4
   3ad38:	bl	11e10 <free@plt>
   3ad3c:	b	3a808 <__assert_fail@plt+0x2847c>
   3ad40:	add	r2, r3, #1
   3ad44:	str	r2, [r6]
   3ad48:	ldrb	r3, [r3, #1]
   3ad4c:	lsl	r1, r3, #1
   3ad50:	ldrh	r1, [r8, r1]
   3ad54:	tst	r1, #4
   3ad58:	beq	3acac <__assert_fail@plt+0x28920>
   3ad5c:	add	r2, r2, #1
   3ad60:	str	r2, [r6]
   3ad64:	ldrb	r3, [r2]
   3ad68:	lsl	r1, r3, #1
   3ad6c:	ldrh	r1, [r8, r1]
   3ad70:	tst	r1, #4
   3ad74:	bne	3ad5c <__assert_fail@plt+0x289d0>
   3ad78:	b	3acac <__assert_fail@plt+0x28920>
   3ad7c:	mov	r1, #0
   3ad80:	b	3ad20 <__assert_fail@plt+0x28994>
   3ad84:	ldr	r0, [sp]
   3ad88:	bl	38764 <__assert_fail@plt+0x263d8>
   3ad8c:	mov	r0, r4
   3ad90:	bl	11e10 <free@plt>
   3ad94:	b	3a808 <__assert_fail@plt+0x2847c>
   3ad98:	bl	1232c <abort@plt>
   3ad9c:	strdeq	r5, [r6], -r8
   3ada0:	andeq	r1, r5, r4, asr #24
   3ada4:	andeq	r1, r5, r4, asr ip
   3ada8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3adac:	mov	r9, r0
   3adb0:	ldr	r0, [r1]
   3adb4:	sub	sp, sp, #28
   3adb8:	ldrb	r7, [r0, #1]
   3adbc:	str	r0, [sp, #12]
   3adc0:	cmp	r7, #49	; 0x31
   3adc4:	bcc	3ae5c <__assert_fail@plt+0x28ad0>
   3adc8:	cmp	r7, #57	; 0x39
   3adcc:	mov	r5, r1
   3add0:	mov	sl, r2
   3add4:	bls	3ae70 <__assert_fail@plt+0x28ae4>
   3add8:	cmp	r7, #95	; 0x5f
   3addc:	bne	3ae5c <__assert_fail@plt+0x28ad0>
   3ade0:	ldrb	r3, [r0, #2]
   3ade4:	ldr	r6, [pc, #752]	; 3b0dc <__assert_fail@plt+0x28d50>
   3ade8:	lsl	r2, r3, #1
   3adec:	ldrh	r1, [r6, r2]
   3adf0:	lsr	r1, r1, #2
   3adf4:	eor	r1, r1, #1
   3adf8:	and	r1, r1, #1
   3adfc:	cmp	r3, #48	; 0x30
   3ae00:	orreq	r1, r1, #1
   3ae04:	cmp	r1, #0
   3ae08:	bne	3b0a8 <__assert_fail@plt+0x28d1c>
   3ae0c:	ldr	r7, [sp, #12]
   3ae10:	mov	r2, #10
   3ae14:	add	r4, r7, #2
   3ae18:	mov	r0, r4
   3ae1c:	bl	11da4 <strtol@plt>
   3ae20:	ldrb	r3, [r7, #2]
   3ae24:	lsl	r2, r3, #1
   3ae28:	ldrh	r2, [r6, r2]
   3ae2c:	tst	r2, #4
   3ae30:	beq	3ae48 <__assert_fail@plt+0x28abc>
   3ae34:	ldrb	r3, [r4, #1]!
   3ae38:	lsl	r2, r3, #1
   3ae3c:	ldrh	r2, [r6, r2]
   3ae40:	tst	r2, #4
   3ae44:	bne	3ae34 <__assert_fail@plt+0x28aa8>
   3ae48:	cmp	r3, #95	; 0x5f
   3ae4c:	addeq	r4, r4, #1
   3ae50:	moveq	r7, r0
   3ae54:	streq	r4, [r5]
   3ae58:	beq	3ae90 <__assert_fail@plt+0x28b04>
   3ae5c:	ldr	r0, [sp, #12]
   3ae60:	bl	38764 <__assert_fail@plt+0x263d8>
   3ae64:	mov	r0, #0
   3ae68:	add	sp, sp, #28
   3ae6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ae70:	ldr	r3, [sp, #12]
   3ae74:	sub	r7, r7, #48	; 0x30
   3ae78:	ldrb	r3, [r3, #2]
   3ae7c:	cmp	r3, #95	; 0x5f
   3ae80:	ldr	r3, [sp, #12]
   3ae84:	addeq	r3, r3, #1
   3ae88:	add	r3, r3, #2
   3ae8c:	str	r3, [r1]
   3ae90:	mov	r8, #0
   3ae94:	ldr	r6, [pc, #576]	; 3b0dc <__assert_fail@plt+0x28d50>
   3ae98:	b	3af00 <__assert_fail@plt+0x28b74>
   3ae9c:	cmp	sl, #0
   3aea0:	beq	3afd4 <__assert_fail@plt+0x28c48>
   3aea4:	add	r2, sp, #20
   3aea8:	mov	r1, r5
   3aeac:	mov	r0, r9
   3aeb0:	bl	3a774 <__assert_fail@plt+0x283e8>
   3aeb4:	cmp	r0, #0
   3aeb8:	beq	3afec <__assert_fail@plt+0x28c60>
   3aebc:	ldr	r4, [sp, #20]
   3aec0:	mov	r0, r4
   3aec4:	bl	12074 <strlen@plt>
   3aec8:	ldr	r1, [r9, #4]
   3aecc:	mov	r3, #9
   3aed0:	str	r3, [sp]
   3aed4:	mov	r2, r4
   3aed8:	add	r1, r1, #212	; 0xd4
   3aedc:	mov	r3, r0
   3aee0:	ldr	r0, [r9]
   3aee4:	bl	39148 <__assert_fail@plt+0x26dbc>
   3aee8:	mov	r8, r0
   3aeec:	ldr	r0, [sp, #20]
   3aef0:	bl	11e10 <free@plt>
   3aef4:	cmp	r8, #0
   3aef8:	beq	3afec <__assert_fail@plt+0x28c60>
   3aefc:	sub	r7, r7, #1
   3af00:	cmp	r7, #0
   3af04:	beq	3b0b4 <__assert_fail@plt+0x28d28>
   3af08:	ldr	r0, [r5]
   3af0c:	ldrb	r3, [r0]
   3af10:	cmp	r3, #95	; 0x5f
   3af14:	addeq	r2, r0, #1
   3af18:	streq	r2, [r5]
   3af1c:	ldrbeq	r3, [r0, #1]
   3af20:	moveq	r0, r2
   3af24:	cmp	r3, #116	; 0x74
   3af28:	beq	3ae9c <__assert_fail@plt+0x28b10>
   3af2c:	lsl	r2, r3, #1
   3af30:	ldrh	r4, [r6, r2]
   3af34:	ands	r4, r4, #4
   3af38:	movne	r4, #0
   3af3c:	beq	3af74 <__assert_fail@plt+0x28be8>
   3af40:	add	r0, r0, #1
   3af44:	add	r4, r4, r4, lsl #2
   3af48:	str	r0, [r5]
   3af4c:	add	r4, r3, r4, lsl #1
   3af50:	ldrb	r3, [r0]
   3af54:	sub	r4, r4, #48	; 0x30
   3af58:	lsl	r2, r3, #1
   3af5c:	ldrh	r2, [r6, r2]
   3af60:	ands	fp, r2, #4
   3af64:	bne	3af40 <__assert_fail@plt+0x28bb4>
   3af68:	bl	12074 <strlen@plt>
   3af6c:	cmp	r0, r4
   3af70:	bcc	3ae5c <__assert_fail@plt+0x28ad0>
   3af74:	cmp	sl, #0
   3af78:	beq	3afc4 <__assert_fail@plt+0x28c38>
   3af7c:	cmp	r8, #0
   3af80:	beq	3af98 <__assert_fail@plt+0x28c0c>
   3af84:	mov	r1, r8
   3af88:	ldr	r0, [r9]
   3af8c:	bl	3847c <__assert_fail@plt+0x260f0>
   3af90:	subs	fp, r0, #0
   3af94:	bne	3aff8 <__assert_fail@plt+0x28c6c>
   3af98:	cmp	r7, #1
   3af9c:	beq	3b06c <__assert_fail@plt+0x28ce0>
   3afa0:	ldrd	r0, [r9]
   3afa4:	ldr	r2, [r5]
   3afa8:	mov	r8, #9
   3afac:	str	r8, [sp]
   3afb0:	add	r1, r1, #212	; 0xd4
   3afb4:	mov	r3, r4
   3afb8:	bl	39148 <__assert_fail@plt+0x26dbc>
   3afbc:	subs	r8, r0, #0
   3afc0:	beq	3afec <__assert_fail@plt+0x28c60>
   3afc4:	ldr	r3, [r5]
   3afc8:	add	r4, r3, r4
   3afcc:	str	r4, [r5]
   3afd0:	b	3aefc <__assert_fail@plt+0x28b70>
   3afd4:	mov	r2, sl
   3afd8:	mov	r1, r5
   3afdc:	mov	r0, r9
   3afe0:	bl	3a774 <__assert_fail@plt+0x283e8>
   3afe4:	cmp	r0, #0
   3afe8:	bne	3aefc <__assert_fail@plt+0x28b70>
   3afec:	mov	r0, #0
   3aff0:	add	sp, sp, #28
   3aff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aff8:	mov	r1, r4
   3affc:	ldr	r0, [r5]
   3b000:	bl	38838 <__assert_fail@plt+0x264ac>
   3b004:	ldr	r1, [fp]
   3b008:	cmp	r1, #0
   3b00c:	str	r0, [sp, #8]
   3b010:	bne	3b044 <__assert_fail@plt+0x28cb8>
   3b014:	b	3b0c4 <__assert_fail@plt+0x28d38>
   3b018:	ldr	r0, [r9]
   3b01c:	bl	3828c <__assert_fail@plt+0x25f00>
   3b020:	ldr	r1, [sp, #8]
   3b024:	cmp	r0, #0
   3b028:	beq	3b038 <__assert_fail@plt+0x28cac>
   3b02c:	bl	11d98 <strcmp@plt>
   3b030:	cmp	r0, #0
   3b034:	beq	3b0d0 <__assert_fail@plt+0x28d44>
   3b038:	ldr	r1, [fp, #4]!
   3b03c:	cmp	r1, #0
   3b040:	beq	3b0c4 <__assert_fail@plt+0x28d38>
   3b044:	ldr	r0, [r9]
   3b048:	bl	384c4 <__assert_fail@plt+0x26138>
   3b04c:	subs	r8, r0, #0
   3b050:	mov	r1, r8
   3b054:	bne	3b018 <__assert_fail@plt+0x28c8c>
   3b058:	ldr	r0, [sp, #8]
   3b05c:	bl	11e10 <free@plt>
   3b060:	mov	r0, r8
   3b064:	add	sp, sp, #28
   3b068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b06c:	mov	r1, r4
   3b070:	ldr	r0, [r5]
   3b074:	bl	38838 <__assert_fail@plt+0x264ac>
   3b078:	mov	r1, r0
   3b07c:	mov	fp, r0
   3b080:	ldr	r0, [r9]
   3b084:	bl	38058 <__assert_fail@plt+0x25ccc>
   3b088:	mov	r8, r0
   3b08c:	mov	r0, fp
   3b090:	bl	11e10 <free@plt>
   3b094:	cmp	r8, #0
   3b098:	bne	3afc4 <__assert_fail@plt+0x28c38>
   3b09c:	ldrd	r0, [r9]
   3b0a0:	ldr	r2, [r5]
   3b0a4:	b	3afac <__assert_fail@plt+0x28c20>
   3b0a8:	bl	38764 <__assert_fail@plt+0x263d8>
   3b0ac:	mov	r0, #0
   3b0b0:	b	3aff0 <__assert_fail@plt+0x28c64>
   3b0b4:	cmp	sl, #0
   3b0b8:	strne	r8, [sl]
   3b0bc:	mov	r0, #1
   3b0c0:	b	3ae68 <__assert_fail@plt+0x28adc>
   3b0c4:	ldr	r0, [sp, #8]
   3b0c8:	bl	11e10 <free@plt>
   3b0cc:	b	3af98 <__assert_fail@plt+0x28c0c>
   3b0d0:	ldr	r0, [sp, #8]
   3b0d4:	bl	11e10 <free@plt>
   3b0d8:	b	3afc4 <__assert_fail@plt+0x28c38>
   3b0dc:	strdeq	r5, [r6], -r8
   3b0e0:	push	{r4, r5, r6, r7, r8, lr}
   3b0e4:	subs	r7, r2, #0
   3b0e8:	sub	sp, sp, #8
   3b0ec:	moveq	r2, r7
   3b0f0:	addne	r2, sp, #4
   3b0f4:	mov	r4, r1
   3b0f8:	mov	r5, r0
   3b0fc:	mov	r8, r3
   3b100:	ldr	r6, [r1]
   3b104:	bl	39b30 <__assert_fail@plt+0x277a4>
   3b108:	cmp	r0, #0
   3b10c:	bne	3b11c <__assert_fail@plt+0x28d90>
   3b110:	mov	r0, #0
   3b114:	add	sp, sp, #8
   3b118:	pop	{r4, r5, r6, r7, r8, pc}
   3b11c:	ldr	r2, [r4]
   3b120:	mov	r0, r5
   3b124:	sub	r2, r2, r6
   3b128:	mov	r1, r6
   3b12c:	bl	387dc <__assert_fail@plt+0x26450>
   3b130:	cmp	r0, #0
   3b134:	beq	3b110 <__assert_fail@plt+0x28d84>
   3b138:	cmp	r7, #0
   3b13c:	moveq	r0, #1
   3b140:	beq	3b114 <__assert_fail@plt+0x28d88>
   3b144:	ldr	r3, [sp, #4]
   3b148:	cmp	r3, #0
   3b14c:	beq	3b110 <__assert_fail@plt+0x28d84>
   3b150:	ldr	r1, [sp, #32]
   3b154:	ldr	r2, [r8]
   3b158:	ldr	r0, [r7]
   3b15c:	ldr	ip, [r1]
   3b160:	add	r1, r2, #1
   3b164:	cmp	r1, ip
   3b168:	bcs	3b180 <__assert_fail@plt+0x28df4>
   3b16c:	str	r3, [r0, r2, lsl #2]
   3b170:	mov	r0, #1
   3b174:	str	r1, [r8]
   3b178:	add	sp, sp, #8
   3b17c:	pop	{r4, r5, r6, r7, r8, pc}
   3b180:	ldr	r3, [sp, #32]
   3b184:	add	r1, ip, #10
   3b188:	str	r1, [r3]
   3b18c:	lsl	r1, r1, #2
   3b190:	bl	11ed0 <xrealloc@plt>
   3b194:	ldr	r2, [r8]
   3b198:	ldr	r3, [sp, #4]
   3b19c:	add	r1, r2, #1
   3b1a0:	str	r0, [r7]
   3b1a4:	b	3b16c <__assert_fail@plt+0x28de0>
   3b1a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   3b1ac:	sub	sp, sp, #36	; 0x24
   3b1b0:	ldr	r9, [r1]
   3b1b4:	subs	r5, r2, #0
   3b1b8:	mov	r2, #10
   3b1bc:	mov	r7, r1
   3b1c0:	mov	r4, r0
   3b1c4:	mov	r8, r3
   3b1c8:	str	r2, [sp, #12]
   3b1cc:	moveq	r1, r9
   3b1d0:	beq	3b1ec <__assert_fail@plt+0x28e60>
   3b1d4:	mov	r0, #40	; 0x28
   3b1d8:	bl	11f3c <xmalloc@plt>
   3b1dc:	mov	r3, #0
   3b1e0:	ldr	r1, [r7]
   3b1e4:	str	r0, [r5]
   3b1e8:	str	r3, [r8]
   3b1ec:	add	r6, sp, #12
   3b1f0:	mov	r3, #0
   3b1f4:	str	r3, [sp, #16]
   3b1f8:	ldrb	r3, [r1]
   3b1fc:	cmp	r3, #95	; 0x5f
   3b200:	cmpne	r3, #0
   3b204:	movne	r2, #1
   3b208:	moveq	r2, #0
   3b20c:	cmp	r3, #101	; 0x65
   3b210:	moveq	r2, #0
   3b214:	andne	r2, r2, #1
   3b218:	cmp	r2, #0
   3b21c:	beq	3b30c <__assert_fail@plt+0x28f80>
   3b220:	cmp	r3, #84	; 0x54
   3b224:	cmpne	r3, #78	; 0x4e
   3b228:	bne	3b2e4 <__assert_fail@plt+0x28f58>
   3b22c:	cmp	r3, #84	; 0x54
   3b230:	add	r1, r1, #1
   3b234:	moveq	r3, #1
   3b238:	str	r1, [r7]
   3b23c:	streq	r3, [sp, #20]
   3b240:	beq	3b258 <__assert_fail@plt+0x28ecc>
   3b244:	add	r1, sp, #20
   3b248:	mov	r0, r7
   3b24c:	bl	38684 <__assert_fail@plt+0x262f8>
   3b250:	cmp	r0, #0
   3b254:	beq	3b338 <__assert_fail@plt+0x28fac>
   3b258:	add	r1, sp, #24
   3b25c:	mov	r0, r7
   3b260:	bl	38684 <__assert_fail@plt+0x262f8>
   3b264:	cmp	r0, #0
   3b268:	beq	3b338 <__assert_fail@plt+0x28fac>
   3b26c:	ldr	r1, [sp, #24]
   3b270:	ldr	r3, [r4, #20]
   3b274:	cmp	r3, r1
   3b278:	bls	3b338 <__assert_fail@plt+0x28fac>
   3b27c:	ldr	r3, [sp, #20]
   3b280:	cmp	r3, #0
   3b284:	sub	r3, r3, #1
   3b288:	str	r3, [sp, #20]
   3b28c:	bne	3b2ac <__assert_fail@plt+0x28f20>
   3b290:	b	3b304 <__assert_fail@plt+0x28f78>
   3b294:	ldr	r3, [sp, #20]
   3b298:	cmp	r3, #0
   3b29c:	sub	r3, r3, #1
   3b2a0:	str	r3, [sp, #20]
   3b2a4:	beq	3b304 <__assert_fail@plt+0x28f78>
   3b2a8:	ldr	r1, [sp, #24]
   3b2ac:	ldr	r0, [r4, #16]
   3b2b0:	add	r3, sp, #16
   3b2b4:	mov	r2, r5
   3b2b8:	ldr	ip, [r0, r1, lsl #3]
   3b2bc:	add	r1, sp, #28
   3b2c0:	str	r6, [sp]
   3b2c4:	mov	r0, r4
   3b2c8:	str	ip, [sp, #28]
   3b2cc:	bl	3b0e0 <__assert_fail@plt+0x28d54>
   3b2d0:	cmp	r0, #0
   3b2d4:	bne	3b294 <__assert_fail@plt+0x28f08>
   3b2d8:	mov	r0, #0
   3b2dc:	add	sp, sp, #36	; 0x24
   3b2e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3b2e4:	str	r6, [sp]
   3b2e8:	add	r3, sp, #16
   3b2ec:	mov	r2, r5
   3b2f0:	mov	r1, r7
   3b2f4:	mov	r0, r4
   3b2f8:	bl	3b0e0 <__assert_fail@plt+0x28d54>
   3b2fc:	cmp	r0, #0
   3b300:	beq	3b2dc <__assert_fail@plt+0x28f50>
   3b304:	ldr	r1, [r7]
   3b308:	b	3b1f8 <__assert_fail@plt+0x28e6c>
   3b30c:	cmp	r5, #0
   3b310:	beq	3b358 <__assert_fail@plt+0x28fcc>
   3b314:	ldr	r3, [r5]
   3b318:	ldr	r0, [sp, #16]
   3b31c:	str	r2, [r3, r0, lsl #2]
   3b320:	ldrb	r3, [r1]
   3b324:	cmp	r3, #101	; 0x65
   3b328:	beq	3b344 <__assert_fail@plt+0x28fb8>
   3b32c:	mov	r0, #1
   3b330:	add	sp, sp, #36	; 0x24
   3b334:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3b338:	mov	r0, r9
   3b33c:	bl	38764 <__assert_fail@plt+0x263d8>
   3b340:	b	3b2d8 <__assert_fail@plt+0x28f4c>
   3b344:	mov	r3, #1
   3b348:	str	r3, [r8]
   3b34c:	add	r1, r1, #1
   3b350:	str	r1, [r7]
   3b354:	b	3b32c <__assert_fail@plt+0x28fa0>
   3b358:	cmp	r3, #101	; 0x65
   3b35c:	bne	3b32c <__assert_fail@plt+0x28fa0>
   3b360:	b	3b34c <__assert_fail@plt+0x28fc0>
   3b364:	push	{r4, r5, lr}
   3b368:	add	r2, r2, #2
   3b36c:	ldr	r4, [r1]
   3b370:	sub	sp, sp, #12
   3b374:	sub	r3, r2, r4
   3b378:	cmp	r3, #4
   3b37c:	mov	r5, r0
   3b380:	str	r2, [r1]
   3b384:	ble	3b3a0 <__assert_fail@plt+0x29014>
   3b388:	mov	r2, #4
   3b38c:	ldr	r1, [pc, #136]	; 3b41c <__assert_fail@plt+0x29090>
   3b390:	mov	r0, r4
   3b394:	bl	12320 <strncmp@plt>
   3b398:	subs	r2, r0, #0
   3b39c:	beq	3b3b8 <__assert_fail@plt+0x2902c>
   3b3a0:	ldrb	r3, [r4]
   3b3a4:	cmp	r3, #95	; 0x5f
   3b3a8:	beq	3b3e8 <__assert_fail@plt+0x2905c>
   3b3ac:	mov	r0, #1
   3b3b0:	add	sp, sp, #12
   3b3b4:	pop	{r4, r5, pc}
   3b3b8:	ldrb	r3, [r4, #4]
   3b3bc:	cmp	r3, #46	; 0x2e
   3b3c0:	cmpne	r3, #36	; 0x24
   3b3c4:	addeq	r4, r4, #5
   3b3c8:	moveq	r0, r5
   3b3cc:	bne	3b3a0 <__assert_fail@plt+0x29014>
   3b3d0:	add	r1, sp, #4
   3b3d4:	str	r4, [sp, #4]
   3b3d8:	bl	39b30 <__assert_fail@plt+0x277a4>
   3b3dc:	adds	r0, r0, #0
   3b3e0:	movne	r0, #1
   3b3e4:	b	3b3b0 <__assert_fail@plt+0x29024>
   3b3e8:	ldrb	r3, [r4, #1]
   3b3ec:	cmp	r3, #95	; 0x5f
   3b3f0:	bne	3b3ac <__assert_fail@plt+0x29020>
   3b3f4:	ldrb	r3, [r4, #2]
   3b3f8:	cmp	r3, #111	; 0x6f
   3b3fc:	bne	3b3ac <__assert_fail@plt+0x29020>
   3b400:	ldrb	r3, [r4, #3]
   3b404:	cmp	r3, #112	; 0x70
   3b408:	bne	3b3ac <__assert_fail@plt+0x29020>
   3b40c:	add	r4, r4, #4
   3b410:	mov	r0, r5
   3b414:	mov	r2, #0
   3b418:	b	3b3d0 <__assert_fail@plt+0x29044>
   3b41c:	andeq	r1, r5, r8, ror sp
   3b420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b424:	sub	sp, sp, #180	; 0xb4
   3b428:	ldr	r5, [r3]
   3b42c:	ldr	r7, [sp, #216]	; 0xd8
   3b430:	cmp	r7, #0
   3b434:	movne	ip, #0
   3b438:	strne	ip, [r7]
   3b43c:	ldr	ip, [sp, #220]	; 0xdc
   3b440:	cmp	r5, ip
   3b444:	bcs	3b5fc <__assert_fail@plt+0x29270>
   3b448:	mov	r6, #0
   3b44c:	mov	r8, r3
   3b450:	str	r6, [r1, #216]	; 0xd8
   3b454:	ldrb	r3, [r5]
   3b458:	ldr	sl, [pc, #4084]	; 3c454 <__assert_fail@plt+0x2a0c8>
   3b45c:	str	r2, [sp, #20]
   3b460:	cmp	r3, #45	; 0x2d
   3b464:	cmpne	r3, #40	; 0x28
   3b468:	lsl	r3, r3, #1
   3b46c:	movne	r2, #1
   3b470:	ldrh	r3, [sl, r3]
   3b474:	moveq	r2, #0
   3b478:	mov	fp, r1
   3b47c:	eor	r3, r3, #4
   3b480:	mov	r9, r0
   3b484:	ands	r3, r2, r3, lsr #2
   3b488:	bne	3b664 <__assert_fail@plt+0x292d8>
   3b48c:	add	r1, sp, #140	; 0x8c
   3b490:	ldr	r2, [sp, #220]	; 0xdc
   3b494:	mov	r0, r8
   3b498:	bl	3890c <__assert_fail@plt+0x26580>
   3b49c:	cmp	r0, #0
   3b4a0:	beq	3b5fc <__assert_fail@plt+0x29270>
   3b4a4:	ldr	r4, [r8]
   3b4a8:	ldrb	r3, [r4]
   3b4ac:	cmp	r3, #61	; 0x3d
   3b4b0:	bne	3b838 <__assert_fail@plt+0x294ac>
   3b4b4:	cmp	r7, #0
   3b4b8:	beq	3b4ec <__assert_fail@plt+0x29160>
   3b4bc:	ldr	r3, [sp, #140]	; 0x8c
   3b4c0:	cmp	r3, #0
   3b4c4:	blt	3b4ec <__assert_fail@plt+0x29160>
   3b4c8:	ldr	r3, [sp, #144]	; 0x90
   3b4cc:	cmp	r3, #0
   3b4d0:	blt	3b4ec <__assert_fail@plt+0x29160>
   3b4d4:	add	r2, sp, #140	; 0x8c
   3b4d8:	add	r1, fp, #72	; 0x48
   3b4dc:	add	r0, fp, #68	; 0x44
   3b4e0:	bl	38abc <__assert_fail@plt+0x26730>
   3b4e4:	ldr	r4, [r8]
   3b4e8:	str	r0, [r7]
   3b4ec:	add	r7, r4, #1
   3b4f0:	mvn	r2, #0
   3b4f4:	mov	r3, #0
   3b4f8:	mov	r0, r7
   3b4fc:	str	r7, [r8]
   3b500:	strd	r2, [sp, #24]
   3b504:	mov	r4, r0
   3b508:	ldrb	r6, [r4], #1
   3b50c:	cmp	r6, #64	; 0x40
   3b510:	bne	3c8b8 <__assert_fail@plt+0x2a52c>
   3b514:	ldrb	r3, [r0, #1]
   3b518:	cmp	r3, #40	; 0x28
   3b51c:	cmpne	r3, #45	; 0x2d
   3b520:	lsl	r2, r3, #1
   3b524:	moveq	r1, #1
   3b528:	ldrh	r2, [sl, r2]
   3b52c:	movne	r1, #0
   3b530:	lsl	r2, r2, #29
   3b534:	orrs	r2, r1, r2, lsr #31
   3b538:	beq	3b54c <__assert_fail@plt+0x291c0>
   3b53c:	b	3c818 <__assert_fail@plt+0x2a48c>
   3b540:	cmp	r3, #0
   3b544:	beq	3b64c <__assert_fail@plt+0x292c0>
   3b548:	ldrb	r3, [r4, #1]!
   3b54c:	cmp	r3, #59	; 0x3b
   3b550:	bne	3b540 <__assert_fail@plt+0x291b4>
   3b554:	add	r3, r4, #1
   3b558:	str	r3, [r8]
   3b55c:	ldrb	r4, [r0, #1]
   3b560:	cmp	r4, #83	; 0x53
   3b564:	beq	3b82c <__assert_fail@plt+0x294a0>
   3b568:	cmp	r4, #115	; 0x73
   3b56c:	beq	3b7fc <__assert_fail@plt+0x29470>
   3b570:	cmp	r4, #0
   3b574:	beq	3b7f0 <__assert_fail@plt+0x29464>
   3b578:	mov	r0, r3
   3b57c:	b	3b504 <__assert_fail@plt+0x29178>
   3b580:	ldr	r3, [sp, #220]	; 0xdc
   3b584:	str	r8, [sp]
   3b588:	str	r3, [sp, #4]
   3b58c:	mov	r2, r8
   3b590:	mov	r3, fp
   3b594:	ldr	r1, [sp, #60]	; 0x3c
   3b598:	ldr	r0, [sp, #32]
   3b59c:	bl	3b420 <__assert_fail@plt+0x29094>
   3b5a0:	subs	r5, r0, #0
   3b5a4:	beq	3cdf4 <__assert_fail@plt+0x2aa68>
   3b5a8:	ldr	r0, [fp]
   3b5ac:	ldrb	r3, [r0]
   3b5b0:	cmp	r3, #58	; 0x3a
   3b5b4:	beq	3c08c <__assert_fail@plt+0x29d00>
   3b5b8:	ldr	r0, [sp, #44]	; 0x2c
   3b5bc:	mov	r8, r9
   3b5c0:	bl	387a0 <__assert_fail@plt+0x26414>
   3b5c4:	ldr	r3, [sp, #28]
   3b5c8:	cmp	r3, #0
   3b5cc:	beq	3d1cc <__assert_fail@plt+0x2ae40>
   3b5d0:	ldr	r0, [sp, #28]
   3b5d4:	bl	11e10 <free@plt>
   3b5d8:	ldr	r3, [sp, #40]	; 0x28
   3b5dc:	cmp	r3, #0
   3b5e0:	bne	3d1cc <__assert_fail@plt+0x2ae40>
   3b5e4:	cmp	r8, #0
   3b5e8:	beq	3b5f4 <__assert_fail@plt+0x29268>
   3b5ec:	mov	r0, r8
   3b5f0:	bl	11e10 <free@plt>
   3b5f4:	ldr	r0, [sp, #36]	; 0x24
   3b5f8:	bl	11e10 <free@plt>
   3b5fc:	mov	r4, #0
   3b600:	mov	r0, r4
   3b604:	add	sp, sp, #180	; 0xb4
   3b608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b60c:	ldrb	r3, [sl]
   3b610:	cmp	r3, #0
   3b614:	beq	3b64c <__assert_fail@plt+0x292c0>
   3b618:	mov	r2, #0
   3b61c:	cmp	r3, #60	; 0x3c
   3b620:	addeq	r2, r2, #1
   3b624:	beq	3b640 <__assert_fail@plt+0x292b4>
   3b628:	cmp	r3, #62	; 0x3e
   3b62c:	subeq	r2, r2, #1
   3b630:	beq	3b640 <__assert_fail@plt+0x292b4>
   3b634:	cmp	r2, #0
   3b638:	cmpeq	r3, #58	; 0x3a
   3b63c:	beq	3dc08 <__assert_fail@plt+0x2b87c>
   3b640:	ldrb	r3, [sl, #1]!
   3b644:	cmp	r3, #0
   3b648:	bne	3b61c <__assert_fail@plt+0x29290>
   3b64c:	mov	r0, r5
   3b650:	bl	387a0 <__assert_fail@plt+0x26414>
   3b654:	mov	r4, #0
   3b658:	mov	r0, r4
   3b65c:	add	sp, sp, #180	; 0xb4
   3b660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b664:	mov	r4, r5
   3b668:	mvn	r3, #0
   3b66c:	str	r6, [sp, #28]
   3b670:	str	r3, [sp, #144]	; 0x90
   3b674:	str	r3, [sp, #140]	; 0x8c
   3b678:	ldrb	r6, [r4], #1
   3b67c:	mov	r7, r5
   3b680:	str	r3, [sp, #24]
   3b684:	sub	r3, r6, #35	; 0x23
   3b688:	str	r4, [r8]
   3b68c:	cmp	r3, #85	; 0x55
   3b690:	ldrls	pc, [pc, r3, lsl #2]
   3b694:	b	3b64c <__assert_fail@plt+0x292c0>
   3b698:	andeq	ip, r3, r4, lsr #6
   3b69c:	andeq	fp, r3, ip, asr #12
   3b6a0:	andeq	fp, r3, ip, asr #12
   3b6a4:	andeq	ip, r3, r0, lsr #8
   3b6a8:	andeq	fp, r3, ip, asr #12
   3b6ac:	andeq	fp, r3, r8, asr r8
   3b6b0:	andeq	fp, r3, ip, asr #12
   3b6b4:	andeq	ip, r3, r0, lsl #3
   3b6b8:	andeq	fp, r3, ip, asr #12
   3b6bc:	andeq	fp, r3, ip, asr #12
   3b6c0:	andeq	fp, r3, r8, asr r8
   3b6c4:	andeq	fp, r3, ip, asr #12
   3b6c8:	andeq	fp, r3, ip, asr #12
   3b6cc:	andeq	fp, r3, r8, asr r8
   3b6d0:	andeq	fp, r3, r8, asr r8
   3b6d4:	andeq	fp, r3, r8, asr r8
   3b6d8:	andeq	fp, r3, r8, asr r8
   3b6dc:	andeq	fp, r3, r8, asr r8
   3b6e0:	andeq	fp, r3, r8, asr r8
   3b6e4:	andeq	fp, r3, r8, asr r8
   3b6e8:	andeq	fp, r3, r8, asr r8
   3b6ec:	andeq	fp, r3, r8, asr r8
   3b6f0:	andeq	fp, r3, r8, asr r8
   3b6f4:	andeq	fp, r3, ip, asr #12
   3b6f8:	andeq	fp, r3, ip, asr #12
   3b6fc:	andeq	fp, r3, ip, asr #12
   3b700:	andeq	fp, r3, ip, asr #12
   3b704:	andeq	fp, r3, ip, asr #12
   3b708:	andeq	fp, r3, ip, asr #12
   3b70c:	andeq	ip, r3, ip, lsl r8
   3b710:	andeq	fp, r3, ip, asr #12
   3b714:			; <UNDEFINED> instruction: 0x0003c1b4
   3b718:	andeq	fp, r3, ip, asr #12
   3b71c:	andeq	fp, r3, ip, asr #12
   3b720:	andeq	fp, r3, ip, asr #12
   3b724:	andeq	fp, r3, ip, asr #12
   3b728:	andeq	fp, r3, ip, asr #12
   3b72c:	andeq	fp, r3, ip, asr #12
   3b730:	andeq	fp, r3, ip, asr #12
   3b734:	andeq	fp, r3, ip, asr #12
   3b738:	andeq	fp, r3, ip, asr #12
   3b73c:	andeq	fp, r3, ip, asr #12
   3b740:	andeq	fp, r3, ip, asr #12
   3b744:	andeq	fp, r3, ip, asr #12
   3b748:	andeq	fp, r3, ip, asr #12
   3b74c:	andeq	fp, r3, ip, asr #12
   3b750:	andeq	fp, r3, ip, asr #12
   3b754:	andeq	ip, r3, r8, ror #3
   3b758:	andeq	fp, r3, r0, asr #18
   3b75c:	andeq	fp, r3, ip, asr #12
   3b760:	andeq	fp, r3, ip, asr #12
   3b764:	andeq	fp, r3, ip, asr #12
   3b768:	andeq	fp, r3, ip, asr #12
   3b76c:	andeq	fp, r3, ip, asr #12
   3b770:	andeq	fp, r3, ip, asr #12
   3b774:	andeq	fp, r3, ip, asr #12
   3b778:	andeq	fp, r3, ip, asr #12
   3b77c:	andeq	fp, r3, ip, asr #12
   3b780:	andeq	fp, r3, ip, asr #12
   3b784:	andeq	fp, r3, ip, asr #12
   3b788:	andeq	fp, r3, ip, asr #12
   3b78c:	andeq	fp, r3, ip, asr #12
   3b790:	andeq	fp, r3, r8, ror r9
   3b794:	andeq	fp, r3, r8, lsl fp
   3b798:	andeq	fp, r3, ip, asr #12
   3b79c:	andeq	fp, r3, ip, asr #12
   3b7a0:	muleq	r3, ip, r4
   3b7a4:	strdeq	fp, [r3], -r0
   3b7a8:	andeq	fp, r3, ip, asr #12
   3b7ac:	andeq	fp, r3, ip, asr #12
   3b7b0:	andeq	fp, r3, ip, asr #12
   3b7b4:	andeq	fp, r3, ip, asr #12
   3b7b8:	andeq	fp, r3, r0, lsr ip
   3b7bc:	andeq	fp, r3, ip, asr #12
   3b7c0:	andeq	fp, r3, ip, asr #12
   3b7c4:	andeq	fp, r3, ip, asr #12
   3b7c8:	andeq	fp, r3, ip, asr #12
   3b7cc:	andeq	fp, r3, ip, asr #12
   3b7d0:	andeq	fp, r3, ip, asr #12
   3b7d4:	andeq	fp, r3, r4, ror #24
   3b7d8:			; <UNDEFINED> instruction: 0x0003bdb4
   3b7dc:	andeq	fp, r3, ip, asr #12
   3b7e0:			; <UNDEFINED> instruction: 0x0003bdb4
   3b7e4:	andeq	fp, r3, ip, asr #12
   3b7e8:	andeq	fp, r3, ip, asr #12
   3b7ec:	andeq	ip, r3, r8, asr r2
   3b7f0:	mov	r0, r5
   3b7f4:	bl	387a0 <__assert_fail@plt+0x26414>
   3b7f8:	b	3b600 <__assert_fail@plt+0x29274>
   3b7fc:	mov	r2, #10
   3b800:	add	r0, r0, #2
   3b804:	mov	r1, #0
   3b808:	bl	11da4 <strtol@plt>
   3b80c:	cmp	r0, #7
   3b810:	asrgt	r3, r0, #3
   3b814:	mvnle	r2, #0
   3b818:	strgt	r3, [sp, #24]
   3b81c:	ldrle	r3, [r8]
   3b820:	ldrgt	r3, [r8]
   3b824:	strle	r2, [sp, #24]
   3b828:	b	3b578 <__assert_fail@plt+0x291ec>
   3b82c:	mov	r2, #1
   3b830:	str	r2, [sp, #28]
   3b834:	b	3b578 <__assert_fail@plt+0x291ec>
   3b838:	add	r2, sp, #140	; 0x8c
   3b83c:	mov	r1, fp
   3b840:	mov	r0, r9
   3b844:	bl	38be8 <__assert_fail@plt+0x2685c>
   3b848:	mov	r4, r0
   3b84c:	mov	r0, r4
   3b850:	add	sp, sp, #180	; 0xb4
   3b854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b858:	str	r7, [r8]
   3b85c:	ldr	r2, [sp, #220]	; 0xdc
   3b860:	add	r1, sp, #148	; 0x94
   3b864:	mov	r0, r8
   3b868:	bl	3890c <__assert_fail@plt+0x26580>
   3b86c:	cmp	r0, #0
   3b870:	beq	3b5fc <__assert_fail@plt+0x29270>
   3b874:	ldr	r2, [sp, #140]	; 0x8c
   3b878:	ldr	r3, [sp, #148]	; 0x94
   3b87c:	cmp	r2, r3
   3b880:	bne	3b894 <__assert_fail@plt+0x29508>
   3b884:	ldr	r2, [sp, #144]	; 0x90
   3b888:	ldr	r3, [sp, #152]	; 0x98
   3b88c:	cmp	r2, r3
   3b890:	beq	3d8cc <__assert_fail@plt+0x2b540>
   3b894:	ldr	r3, [sp, #220]	; 0xdc
   3b898:	mov	r2, #0
   3b89c:	str	r7, [r8]
   3b8a0:	mov	r1, fp
   3b8a4:	str	r3, [sp, #4]
   3b8a8:	str	r2, [sp]
   3b8ac:	mov	r3, r8
   3b8b0:	mov	r0, r9
   3b8b4:	bl	3b420 <__assert_fail@plt+0x29094>
   3b8b8:	subs	r4, r0, #0
   3b8bc:	beq	3b5fc <__assert_fail@plt+0x29270>
   3b8c0:	ldr	r3, [sp, #140]	; 0x8c
   3b8c4:	cmn	r3, #1
   3b8c8:	beq	3b8e8 <__assert_fail@plt+0x2955c>
   3b8cc:	add	r2, sp, #140	; 0x8c
   3b8d0:	add	r1, fp, #72	; 0x48
   3b8d4:	add	r0, fp, #68	; 0x44
   3b8d8:	bl	38abc <__assert_fail@plt+0x26730>
   3b8dc:	cmp	r0, #0
   3b8e0:	strne	r4, [r0]
   3b8e4:	beq	3b5fc <__assert_fail@plt+0x29270>
   3b8e8:	cmp	r4, #0
   3b8ec:	beq	3b5fc <__assert_fail@plt+0x29270>
   3b8f0:	ldr	r3, [sp, #140]	; 0x8c
   3b8f4:	cmn	r3, #1
   3b8f8:	beq	3b918 <__assert_fail@plt+0x2958c>
   3b8fc:	add	r2, sp, #140	; 0x8c
   3b900:	add	r1, fp, #72	; 0x48
   3b904:	add	r0, fp, #68	; 0x44
   3b908:	bl	38abc <__assert_fail@plt+0x26730>
   3b90c:	cmp	r0, #0
   3b910:	beq	3b5fc <__assert_fail@plt+0x29270>
   3b914:	str	r4, [r0]
   3b918:	ldr	r3, [sp, #24]
   3b91c:	cmn	r3, #1
   3b920:	beq	3b600 <__assert_fail@plt+0x29274>
   3b924:	mov	r2, r3
   3b928:	mov	r0, r9
   3b92c:	mov	r1, r4
   3b930:	bl	37ff8 <__assert_fail@plt+0x25c6c>
   3b934:	cmp	r0, #0
   3b938:	bne	3b600 <__assert_fail@plt+0x29274>
   3b93c:	b	3b5fc <__assert_fail@plt+0x29270>
   3b940:	ldr	r3, [sp, #220]	; 0xdc
   3b944:	mov	r2, #0
   3b948:	str	r3, [sp, #4]
   3b94c:	str	r2, [sp]
   3b950:	mov	r3, r8
   3b954:	mov	r1, fp
   3b958:	mov	r0, r9
   3b95c:	bl	3b420 <__assert_fail@plt+0x29094>
   3b960:	ldr	r2, [sp, #28]
   3b964:	mov	r1, r0
   3b968:	mov	r0, r9
   3b96c:	bl	37ac4 <__assert_fail@plt+0x25738>
   3b970:	mov	r4, r0
   3b974:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3b978:	ldrb	r3, [r7, #1]
   3b97c:	cmp	r3, #114	; 0x72
   3b980:	bne	3b64c <__assert_fail@plt+0x292c0>
   3b984:	ldr	r3, [sp, #220]	; 0xdc
   3b988:	add	r4, r7, #2
   3b98c:	cmp	r4, r3
   3b990:	str	r4, [r8]
   3b994:	bcs	3b5fc <__assert_fail@plt+0x29270>
   3b998:	ldr	r2, [sp, #220]	; 0xdc
   3b99c:	add	r1, sp, #148	; 0x94
   3b9a0:	add	r0, sp, #136	; 0x88
   3b9a4:	str	r4, [sp, #136]	; 0x88
   3b9a8:	bl	3890c <__assert_fail@plt+0x26580>
   3b9ac:	cmp	r0, #0
   3b9b0:	beq	3b5fc <__assert_fail@plt+0x29270>
   3b9b4:	ldrd	r2, [sp, #148]	; 0x94
   3b9b8:	orrs	r3, r2, r3
   3b9bc:	bne	3cc2c <__assert_fail@plt+0x2a8a0>
   3b9c0:	ldr	r3, [r8]
   3b9c4:	ldrb	r3, [r3]
   3b9c8:	cmp	r3, #61	; 0x3d
   3b9cc:	beq	3cc2c <__assert_fail@plt+0x2a8a0>
   3b9d0:	ldr	r1, [pc, #2688]	; 3c458 <__assert_fail@plt+0x2a0cc>
   3b9d4:	mov	r0, r9
   3b9d8:	bl	38058 <__assert_fail@plt+0x25ccc>
   3b9dc:	subs	r7, r0, #0
   3b9e0:	beq	3e008 <__assert_fail@plt+0x2bc7c>
   3b9e4:	ldr	r3, [sp, #136]	; 0x88
   3b9e8:	str	r3, [r8]
   3b9ec:	ldrb	r2, [r3]
   3b9f0:	cmp	r2, #59	; 0x3b
   3b9f4:	bne	3c7f0 <__assert_fail@plt+0x2a464>
   3b9f8:	add	r2, r3, #1
   3b9fc:	str	r2, [r8]
   3ba00:	ldrb	r1, [r3, #1]
   3ba04:	subs	r2, r1, #45	; 0x2d
   3ba08:	lsl	r0, r1, #1
   3ba0c:	movne	r2, #1
   3ba10:	ldrh	r5, [sl, r0]
   3ba14:	cmp	r1, #0
   3ba18:	moveq	r2, #0
   3ba1c:	eor	r5, r5, #4
   3ba20:	mov	r1, #0
   3ba24:	ands	r2, r2, r5, lsr #2
   3ba28:	addne	r3, r3, #2
   3ba2c:	strne	r3, [r8]
   3ba30:	moveq	r5, r2
   3ba34:	mov	r0, r8
   3ba38:	ldr	r2, [sp, #220]	; 0xdc
   3ba3c:	movne	r5, #1
   3ba40:	bl	38864 <__assert_fail@plt+0x264d8>
   3ba44:	ldr	r3, [r8]
   3ba48:	ldrb	r2, [r3]
   3ba4c:	cmp	r2, #59	; 0x3b
   3ba50:	mov	r6, r0
   3ba54:	bne	3c7f0 <__assert_fail@plt+0x2a464>
   3ba58:	add	r2, r3, #1
   3ba5c:	str	r2, [r8]
   3ba60:	ldrb	r2, [r3, #1]
   3ba64:	mov	r0, r8
   3ba68:	cmp	r2, #45	; 0x2d
   3ba6c:	cmpne	r2, #0
   3ba70:	lsl	r2, r2, #1
   3ba74:	movne	r1, #1
   3ba78:	ldrh	r2, [sl, r2]
   3ba7c:	moveq	r1, #0
   3ba80:	eor	r2, r2, #4
   3ba84:	ands	r2, r1, r2, lsr #2
   3ba88:	addne	r3, r3, #2
   3ba8c:	strne	r3, [r8]
   3ba90:	ldr	r2, [sp, #220]	; 0xdc
   3ba94:	mov	r1, #0
   3ba98:	movne	r5, #1
   3ba9c:	bl	38864 <__assert_fail@plt+0x264d8>
   3baa0:	ldr	r3, [r8]
   3baa4:	ldrb	r2, [r3]
   3baa8:	cmp	r2, #59	; 0x3b
   3baac:	mov	sl, r0
   3bab0:	bne	3c7f0 <__assert_fail@plt+0x2a464>
   3bab4:	add	r3, r3, #1
   3bab8:	str	r3, [r8]
   3babc:	ldr	r3, [sp, #220]	; 0xdc
   3bac0:	mov	r2, #0
   3bac4:	str	r3, [sp, #4]
   3bac8:	mov	r1, fp
   3bacc:	mov	r3, r8
   3bad0:	str	r2, [sp]
   3bad4:	mov	r0, r9
   3bad8:	bl	3b420 <__assert_fail@plt+0x29094>
   3badc:	subs	r1, r0, #0
   3bae0:	beq	3b5fc <__assert_fail@plt+0x29270>
   3bae4:	cmp	r5, #0
   3bae8:	ldr	r2, [sp, #28]
   3baec:	moveq	r3, sl
   3baf0:	mvnne	r3, #0
   3baf4:	str	r3, [sp]
   3baf8:	str	r2, [sp, #4]
   3bafc:	moveq	r3, r6
   3bb00:	movne	r3, #0
   3bb04:	mov	r2, r7
   3bb08:	mov	r0, r9
   3bb0c:	bl	37a54 <__assert_fail@plt+0x256c8>
   3bb10:	mov	r4, r0
   3bb14:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3bb18:	ldr	r3, [sp, #220]	; 0xdc
   3bb1c:	cmp	r3, r4
   3bb20:	bls	3b5fc <__assert_fail@plt+0x29270>
   3bb24:	ldrb	r3, [r7, #1]
   3bb28:	cmp	r3, #115	; 0x73
   3bb2c:	beq	3ccd4 <__assert_fail@plt+0x2a948>
   3bb30:	cmp	r3, #117	; 0x75
   3bb34:	bne	3c7f0 <__assert_fail@plt+0x2a464>
   3bb38:	mov	r5, #1
   3bb3c:	add	r3, r7, #2
   3bb40:	str	r3, [r8]
   3bb44:	ldrb	r3, [r7, #2]
   3bb48:	mov	r1, #0
   3bb4c:	mov	r0, r8
   3bb50:	sub	r2, r3, #98	; 0x62
   3bb54:	cmp	r3, #118	; 0x76
   3bb58:	cmpne	r2, #1
   3bb5c:	addls	r7, r7, #3
   3bb60:	strls	r7, [r8]
   3bb64:	ldr	r2, [sp, #220]	; 0xdc
   3bb68:	bl	38864 <__assert_fail@plt+0x264d8>
   3bb6c:	ldr	r3, [r8]
   3bb70:	ldrb	r2, [r3]
   3bb74:	cmp	r2, #59	; 0x3b
   3bb78:	bne	3c7f0 <__assert_fail@plt+0x2a464>
   3bb7c:	add	r3, r3, #1
   3bb80:	str	r3, [r8]
   3bb84:	ldr	r2, [sp, #220]	; 0xdc
   3bb88:	mov	r1, #0
   3bb8c:	mov	r0, r8
   3bb90:	bl	38864 <__assert_fail@plt+0x264d8>
   3bb94:	ldr	r3, [r8]
   3bb98:	ldrb	r2, [r3]
   3bb9c:	cmp	r2, #59	; 0x3b
   3bba0:	bne	3c7f0 <__assert_fail@plt+0x2a464>
   3bba4:	add	r3, r3, #1
   3bba8:	str	r3, [r8]
   3bbac:	ldr	r2, [sp, #220]	; 0xdc
   3bbb0:	mov	r1, #0
   3bbb4:	mov	r0, r8
   3bbb8:	bl	38864 <__assert_fail@plt+0x264d8>
   3bbbc:	ldr	r3, [r8]
   3bbc0:	ldrb	r2, [r3]
   3bbc4:	cmp	r2, #59	; 0x3b
   3bbc8:	addeq	r3, r3, #1
   3bbcc:	streq	r3, [r8]
   3bbd0:	cmp	r0, #0
   3bbd4:	beq	3d2d8 <__assert_fail@plt+0x2af4c>
   3bbd8:	lsr	r1, r0, #3
   3bbdc:	mov	r2, r5
   3bbe0:	mov	r0, r9
   3bbe4:	bl	3782c <__assert_fail@plt+0x254a0>
   3bbe8:	mov	r4, r0
   3bbec:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3bbf0:	ldr	r3, [sp, #220]	; 0xdc
   3bbf4:	mov	r4, #0
   3bbf8:	mov	r2, r4
   3bbfc:	str	r3, [sp, #4]
   3bc00:	str	r4, [sp]
   3bc04:	mov	r3, r8
   3bc08:	mov	r1, fp
   3bc0c:	mov	r0, r9
   3bc10:	bl	3b420 <__assert_fail@plt+0x29094>
   3bc14:	mov	r3, r4
   3bc18:	mov	r2, r4
   3bc1c:	mov	r1, r0
   3bc20:	mov	r0, r9
   3bc24:	bl	37998 <__assert_fail@plt+0x2560c>
   3bc28:	mov	r4, r0
   3bc2c:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3bc30:	ldr	r3, [sp, #220]	; 0xdc
   3bc34:	mov	r2, #0
   3bc38:	str	r3, [sp, #4]
   3bc3c:	str	r2, [sp]
   3bc40:	mov	r3, r8
   3bc44:	mov	r1, fp
   3bc48:	mov	r0, r9
   3bc4c:	bl	3b420 <__assert_fail@plt+0x29094>
   3bc50:	mov	r1, r0
   3bc54:	mov	r0, r9
   3bc58:	bl	37bac <__assert_fail@plt+0x25820>
   3bc5c:	mov	r4, r0
   3bc60:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3bc64:	ldr	r3, [sp, #220]	; 0xdc
   3bc68:	cmp	r3, r4
   3bc6c:	bls	3b5fc <__assert_fail@plt+0x29270>
   3bc70:	add	r3, sp, #148	; 0x94
   3bc74:	mov	r1, r3
   3bc78:	ldr	r2, [sp, #220]	; 0xdc
   3bc7c:	mov	r0, r8
   3bc80:	str	r3, [sp, #36]	; 0x24
   3bc84:	bl	3890c <__assert_fail@plt+0x26580>
   3bc88:	cmp	r0, #0
   3bc8c:	beq	3b5fc <__assert_fail@plt+0x29270>
   3bc90:	ldr	r3, [sp, #140]	; 0x8c
   3bc94:	ldr	r2, [sp, #148]	; 0x94
   3bc98:	ldr	sl, [r8]
   3bc9c:	cmp	r2, r3
   3bca0:	movne	r7, #0
   3bca4:	ldreq	r7, [sp, #152]	; 0x98
   3bca8:	ldreq	r3, [sp, #144]	; 0x90
   3bcac:	mov	r2, #0
   3bcb0:	subeq	r7, r7, r3
   3bcb4:	ldrb	r3, [sl]
   3bcb8:	clzeq	r7, r7
   3bcbc:	lsreq	r7, r7, #5
   3bcc0:	cmp	r3, #61	; 0x3d
   3bcc4:	strne	r2, [sp, #28]
   3bcc8:	beq	3d234 <__assert_fail@plt+0x2aea8>
   3bccc:	cmp	r3, #59	; 0x3b
   3bcd0:	addeq	sl, sl, #1
   3bcd4:	streq	sl, [r8]
   3bcd8:	ldr	r2, [sp, #220]	; 0xdc
   3bcdc:	add	r1, sp, #132	; 0x84
   3bce0:	mov	r0, r8
   3bce4:	bl	38864 <__assert_fail@plt+0x264d8>
   3bce8:	ldr	r2, [r8]
   3bcec:	ldrb	r3, [r2]
   3bcf0:	cmp	r3, #59	; 0x3b
   3bcf4:	mov	r6, r0
   3bcf8:	bne	3c7f0 <__assert_fail@plt+0x2a464>
   3bcfc:	add	r3, r2, #1
   3bd00:	str	r3, [r8]
   3bd04:	ldr	r2, [sp, #220]	; 0xdc
   3bd08:	add	r1, sp, #136	; 0x88
   3bd0c:	mov	r0, r8
   3bd10:	str	r3, [sp, #32]
   3bd14:	bl	38864 <__assert_fail@plt+0x264d8>
   3bd18:	ldr	r3, [r8]
   3bd1c:	ldrb	r2, [r3]
   3bd20:	cmp	r2, #59	; 0x3b
   3bd24:	mov	r5, r0
   3bd28:	bne	3c7f0 <__assert_fail@plt+0x2a464>
   3bd2c:	ldr	r1, [sp, #132]	; 0x84
   3bd30:	ldr	r2, [sp, #136]	; 0x88
   3bd34:	add	r3, r3, #1
   3bd38:	orrs	r2, r1, r2
   3bd3c:	str	r1, [sp, #40]	; 0x28
   3bd40:	str	r3, [r8]
   3bd44:	beq	3bd70 <__assert_fail@plt+0x299e4>
   3bd48:	ldr	r3, [sp, #28]
   3bd4c:	cmp	r3, #0
   3bd50:	beq	3d860 <__assert_fail@plt+0x2b4d4>
   3bd54:	ldr	r1, [pc, #1792]	; 3c45c <__assert_fail@plt+0x2a0d0>
   3bd58:	mov	r2, #5
   3bd5c:	mov	r0, #0
   3bd60:	bl	11ea0 <dcgettext@plt>
   3bd64:	mov	r1, r0
   3bd68:	mov	r0, r4
   3bd6c:	bl	38720 <__assert_fail@plt+0x26394>
   3bd70:	ldr	r3, [sp, #28]
   3bd74:	cmp	r3, #0
   3bd78:	beq	3d268 <__assert_fail@plt+0x2aedc>
   3bd7c:	cmp	r7, #0
   3bd80:	bne	3c7f0 <__assert_fail@plt+0x2a464>
   3bd84:	mov	r1, fp
   3bd88:	ldr	r2, [sp, #36]	; 0x24
   3bd8c:	mov	r0, r9
   3bd90:	bl	38be8 <__assert_fail@plt+0x2685c>
   3bd94:	subs	r1, r0, #0
   3bd98:	beq	3dd9c <__assert_fail@plt+0x2ba10>
   3bd9c:	mov	r3, r5
   3bda0:	mov	r2, r6
   3bda4:	mov	r0, r9
   3bda8:	bl	37a0c <__assert_fail@plt+0x25680>
   3bdac:	mov	r4, r0
   3bdb0:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3bdb4:	ldr	r2, [sp, #220]	; 0xdc
   3bdb8:	mov	r1, #0
   3bdbc:	mov	r0, r8
   3bdc0:	bl	38864 <__assert_fail@plt+0x264d8>
   3bdc4:	ldr	r3, [r8]
   3bdc8:	ldr	r2, [sp, #220]	; 0xdc
   3bdcc:	str	r3, [sp, #28]
   3bdd0:	cmp	r2, r3
   3bdd4:	str	r0, [sp, #88]	; 0x58
   3bdd8:	bls	3b5fc <__assert_fail@plt+0x29270>
   3bddc:	ldrb	r3, [r3]
   3bde0:	cmp	r3, #33	; 0x21
   3bde4:	movne	r3, #0
   3bde8:	strne	r3, [sp, #76]	; 0x4c
   3bdec:	beq	3ce20 <__assert_fail@plt+0x2aa94>
   3bdf0:	mov	r3, #0
   3bdf4:	mov	r0, #40	; 0x28
   3bdf8:	mov	r7, r3
   3bdfc:	str	r3, [sp, #108]	; 0x6c
   3be00:	bl	11f3c <xmalloc@plt>
   3be04:	ldr	r5, [r8]
   3be08:	mov	r3, #10
   3be0c:	str	r9, [sp, #40]	; 0x28
   3be10:	mov	r9, r3
   3be14:	ldrb	r3, [r5]
   3be18:	str	fp, [sp, #48]	; 0x30
   3be1c:	str	r6, [sp, #56]	; 0x38
   3be20:	cmp	r3, #59	; 0x3b
   3be24:	ldr	fp, [sp, #220]	; 0xdc
   3be28:	str	r0, [sp, #36]	; 0x24
   3be2c:	beq	3bfb8 <__assert_fail@plt+0x29c2c>
   3be30:	add	r6, r7, #1
   3be34:	cmp	r6, r9
   3be38:	bcs	3c89c <__assert_fail@plt+0x2a510>
   3be3c:	cmp	r3, #46	; 0x2e
   3be40:	cmpne	r3, #36	; 0x24
   3be44:	bne	3c684 <__assert_fail@plt+0x2a2f8>
   3be48:	ldrb	r3, [r5, #1]
   3be4c:	cmp	r3, #95	; 0x5f
   3be50:	beq	3c684 <__assert_fail@plt+0x2a2f8>
   3be54:	ldr	r2, [r8]
   3be58:	ldr	r1, [sp, #36]	; 0x24
   3be5c:	lsl	r3, r6, #2
   3be60:	add	r7, r2, #1
   3be64:	sub	r3, r3, #4
   3be68:	mov	r4, #0
   3be6c:	add	r0, r1, r3
   3be70:	cmp	fp, r7
   3be74:	str	r7, [r8]
   3be78:	str	r0, [sp, #32]
   3be7c:	str	r4, [r1, r3]
   3be80:	bls	3b5f4 <__assert_fail@plt+0x29268>
   3be84:	ldrb	r3, [r2, #1]
   3be88:	cmp	r3, #118	; 0x76
   3be8c:	bne	3ccbc <__assert_fail@plt+0x2a930>
   3be90:	add	r3, r2, #2
   3be94:	str	r3, [r8]
   3be98:	ldrb	r5, [r2, #2]
   3be9c:	cmp	r5, #0
   3bea0:	beq	3ccbc <__assert_fail@plt+0x2a930>
   3bea4:	add	r2, r2, #3
   3bea8:	str	r2, [r8]
   3beac:	ldr	r1, [sp, #48]	; 0x30
   3beb0:	stm	sp, {r4, fp}
   3beb4:	mov	r3, r8
   3beb8:	mov	r2, r4
   3bebc:	ldr	r0, [sp, #40]	; 0x28
   3bec0:	bl	3b420 <__assert_fail@plt+0x29094>
   3bec4:	subs	r1, r0, #0
   3bec8:	beq	3b5f4 <__assert_fail@plt+0x29268>
   3becc:	cmp	r5, #98	; 0x62
   3bed0:	beq	3db84 <__assert_fail@plt+0x2b7f8>
   3bed4:	cmp	r5, #102	; 0x66
   3bed8:	beq	3db7c <__assert_fail@plt+0x2b7f0>
   3bedc:	mov	r2, #5
   3bee0:	ldr	r1, [pc, #1400]	; 3c460 <__assert_fail@plt+0x2a0d4>
   3bee4:	mov	r0, r4
   3bee8:	bl	11ea0 <dcgettext@plt>
   3beec:	ldr	r5, [pc, #1392]	; 3c464 <__assert_fail@plt+0x2a0d8>
   3bef0:	mov	r1, r0
   3bef4:	mov	r0, r7
   3bef8:	bl	38720 <__assert_fail@plt+0x26394>
   3befc:	ldr	r3, [r8]
   3bf00:	ldrb	r2, [r3]
   3bf04:	cmp	r2, #58	; 0x3a
   3bf08:	bne	3ccbc <__assert_fail@plt+0x2a930>
   3bf0c:	mov	r4, #0
   3bf10:	add	r3, r3, #1
   3bf14:	str	r3, [r8]
   3bf18:	mov	r2, r4
   3bf1c:	mov	r3, r8
   3bf20:	stm	sp, {r4, fp}
   3bf24:	ldr	r1, [sp, #48]	; 0x30
   3bf28:	ldr	r0, [sp, #40]	; 0x28
   3bf2c:	bl	3b420 <__assert_fail@plt+0x29094>
   3bf30:	ldr	r3, [r8]
   3bf34:	ldrb	r2, [r3]
   3bf38:	cmp	r2, #44	; 0x2c
   3bf3c:	str	r0, [sp, #44]	; 0x2c
   3bf40:	bne	3ccbc <__assert_fail@plt+0x2a930>
   3bf44:	add	r3, r3, #1
   3bf48:	str	r3, [r8]
   3bf4c:	mov	r2, fp
   3bf50:	mov	r1, r4
   3bf54:	mov	r0, r8
   3bf58:	bl	38864 <__assert_fail@plt+0x264d8>
   3bf5c:	ldr	r2, [r8]
   3bf60:	ldrb	r1, [r2]
   3bf64:	cmp	r1, #59	; 0x3b
   3bf68:	mov	r3, r0
   3bf6c:	bne	3ccbc <__assert_fail@plt+0x2a930>
   3bf70:	add	r2, r2, #1
   3bf74:	mov	ip, #2
   3bf78:	str	r2, [r8]
   3bf7c:	mov	r1, r5
   3bf80:	str	r4, [sp]
   3bf84:	ldr	r2, [sp, #44]	; 0x2c
   3bf88:	str	ip, [sp, #4]
   3bf8c:	ldr	r0, [sp, #40]	; 0x28
   3bf90:	bl	37c34 <__assert_fail@plt+0x258a8>
   3bf94:	ldr	r3, [sp, #32]
   3bf98:	cmp	r0, #0
   3bf9c:	str	r0, [r3]
   3bfa0:	beq	3b5f4 <__assert_fail@plt+0x29268>
   3bfa4:	ldr	r5, [r8]
   3bfa8:	mov	r7, r6
   3bfac:	ldrb	r3, [r5]
   3bfb0:	cmp	r3, #59	; 0x3b
   3bfb4:	bne	3be30 <__assert_fail@plt+0x29aa4>
   3bfb8:	ldr	r3, [sp, #220]	; 0xdc
   3bfbc:	ldr	r2, [sp, #36]	; 0x24
   3bfc0:	cmp	r3, r5
   3bfc4:	mov	r3, #0
   3bfc8:	ldr	r6, [sp, #56]	; 0x38
   3bfcc:	ldr	r9, [sp, #40]	; 0x28
   3bfd0:	ldr	fp, [sp, #48]	; 0x30
   3bfd4:	str	r3, [r2, r7, lsl #2]
   3bfd8:	str	r5, [sp, #44]	; 0x2c
   3bfdc:	bls	3b5f4 <__assert_fail@plt+0x29268>
   3bfe0:	ldrb	r4, [r5]
   3bfe4:	cmp	r4, #59	; 0x3b
   3bfe8:	beq	3d8e4 <__assert_fail@plt+0x2b558>
   3bfec:	str	r9, [sp, #32]
   3bff0:	str	fp, [sp, #60]	; 0x3c
   3bff4:	mov	r9, r3
   3bff8:	mov	fp, r8
   3bffc:	str	r3, [sp, #40]	; 0x28
   3c000:	str	r3, [sp, #28]
   3c004:	str	r3, [sp, #68]	; 0x44
   3c008:	str	r3, [sp, #100]	; 0x64
   3c00c:	str	r3, [sp, #96]	; 0x60
   3c010:	str	r6, [sp, #120]	; 0x78
   3c014:	mov	r1, #58	; 0x3a
   3c018:	mov	r0, r5
   3c01c:	bl	12098 <strchr@plt>
   3c020:	subs	r1, r0, #0
   3c024:	beq	3ca0c <__assert_fail@plt+0x2a680>
   3c028:	ldrb	r3, [r1, #1]
   3c02c:	cmp	r3, #58	; 0x3a
   3c030:	bne	3ca0c <__assert_fail@plt+0x2a680>
   3c034:	cmp	r4, #111	; 0x6f
   3c038:	add	r4, r1, #2
   3c03c:	bne	3c04c <__assert_fail@plt+0x29cc0>
   3c040:	ldrb	r3, [r5, #1]
   3c044:	cmp	r3, #112	; 0x70
   3c048:	beq	3dae4 <__assert_fail@plt+0x2b758>
   3c04c:	sub	r1, r1, r5
   3c050:	mov	r0, r5
   3c054:	bl	38838 <__assert_fail@plt+0x264ac>
   3c058:	str	r4, [fp]
   3c05c:	str	r0, [sp, #28]
   3c060:	mov	r0, #40	; 0x28
   3c064:	bl	11f3c <xmalloc@plt>
   3c068:	mov	r8, #0
   3c06c:	mov	r3, #10
   3c070:	str	r8, [sp, #72]	; 0x48
   3c074:	str	r3, [sp, #92]	; 0x5c
   3c078:	str	r0, [sp, #40]	; 0x28
   3c07c:	cmp	r8, #0
   3c080:	beq	3b580 <__assert_fail@plt+0x291f4>
   3c084:	ldr	r0, [fp]
   3c088:	mov	r5, r8
   3c08c:	add	r0, r0, #1
   3c090:	str	r0, [fp]
   3c094:	mov	r1, #59	; 0x3b
   3c098:	bl	12098 <strchr@plt>
   3c09c:	subs	r4, r0, #0
   3c0a0:	beq	3b5b8 <__assert_fail@plt+0x2922c>
   3c0a4:	mov	r1, r5
   3c0a8:	ldr	r0, [sp, #32]
   3c0ac:	bl	38258 <__assert_fail@plt+0x25ecc>
   3c0b0:	cmp	r0, #19
   3c0b4:	movne	r6, #0
   3c0b8:	beq	3cdfc <__assert_fail@plt+0x2aa70>
   3c0bc:	ldr	r0, [fp]
   3c0c0:	sub	r1, r4, r0
   3c0c4:	bl	38838 <__assert_fail@plt+0x264ac>
   3c0c8:	add	r3, r4, #1
   3c0cc:	str	r3, [fp]
   3c0d0:	ldrb	r3, [r4, #1]
   3c0d4:	cmp	r3, #48	; 0x30
   3c0d8:	mov	r9, r0
   3c0dc:	beq	3ccdc <__assert_fail@plt+0x2a950>
   3c0e0:	cmp	r3, #49	; 0x31
   3c0e4:	beq	3ccc8 <__assert_fail@plt+0x2a93c>
   3c0e8:	cmp	r3, #0
   3c0ec:	beq	3b5b8 <__assert_fail@plt+0x2922c>
   3c0f0:	mov	r3, #0
   3c0f4:	str	r3, [sp, #80]	; 0x50
   3c0f8:	add	r3, r4, #2
   3c0fc:	str	r3, [fp]
   3c100:	ldrb	r2, [r4, #2]
   3c104:	sub	r1, r2, #42	; 0x2a
   3c108:	cmp	r1, #26
   3c10c:	ldrls	pc, [pc, r1, lsl #2]
   3c110:	b	3cb54 <__assert_fail@plt+0x2a7c8>
   3c114:	andeq	ip, r3, r4, lsr #22
   3c118:	andeq	ip, r3, r4, asr fp
   3c11c:	andeq	ip, r3, r4, asr fp
   3c120:	andeq	ip, r3, r4, asr fp
   3c124:	andeq	ip, r3, r4, lsr #22
   3c128:	andeq	ip, r3, r4, asr fp
   3c12c:	andeq	ip, r3, r4, asr fp
   3c130:	andeq	ip, r3, r4, asr fp
   3c134:	andeq	ip, r3, r4, asr fp
   3c138:	andeq	ip, r3, r4, asr fp
   3c13c:	andeq	ip, r3, r4, asr fp
   3c140:	andeq	ip, r3, r4, asr fp
   3c144:	andeq	ip, r3, r4, asr fp
   3c148:	andeq	ip, r3, r4, asr fp
   3c14c:	andeq	ip, r3, r4, asr fp
   3c150:	andeq	ip, r3, r4, asr fp
   3c154:	andeq	ip, r3, r4, asr fp
   3c158:	andeq	ip, r3, r4, asr fp
   3c15c:	andeq	ip, r3, r4, asr fp
   3c160:	andeq	ip, r3, r4, asr fp
   3c164:	andeq	ip, r3, r4, asr fp
   3c168:	andeq	ip, r3, r4, lsr #22
   3c16c:	andeq	ip, r3, r4, asr fp
   3c170:	andeq	ip, r3, r8, lsl #22
   3c174:	andeq	ip, r3, r4, lsr fp
   3c178:	andeq	ip, r3, r8, ror #21
   3c17c:	andeq	ip, r3, r0, asr #17
   3c180:	ldr	r3, [sp, #220]	; 0xdc
   3c184:	mov	r2, #0
   3c188:	str	r3, [sp, #4]
   3c18c:	str	r2, [sp]
   3c190:	mov	r3, r8
   3c194:	mov	r1, fp
   3c198:	mov	r0, r9
   3c19c:	bl	3b420 <__assert_fail@plt+0x29094>
   3c1a0:	mov	r1, r0
   3c1a4:	mov	r0, r9
   3c1a8:	bl	3795c <__assert_fail@plt+0x255d0>
   3c1ac:	mov	r4, r0
   3c1b0:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3c1b4:	ldr	r3, [sp, #220]	; 0xdc
   3c1b8:	mov	r2, #0
   3c1bc:	str	r3, [sp, #4]
   3c1c0:	str	r2, [sp]
   3c1c4:	mov	r3, r8
   3c1c8:	mov	r1, fp
   3c1cc:	mov	r0, r9
   3c1d0:	bl	3b420 <__assert_fail@plt+0x29094>
   3c1d4:	mov	r1, r0
   3c1d8:	mov	r0, r9
   3c1dc:	bl	37bd8 <__assert_fail@plt+0x2584c>
   3c1e0:	mov	r4, r0
   3c1e4:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3c1e8:	ldr	r3, [sp, #220]	; 0xdc
   3c1ec:	cmp	r3, r4
   3c1f0:	bls	3b5fc <__assert_fail@plt+0x29270>
   3c1f4:	mov	r2, r3
   3c1f8:	mov	r1, #0
   3c1fc:	mov	r0, r8
   3c200:	bl	38864 <__assert_fail@plt+0x264d8>
   3c204:	ldr	r3, [r8]
   3c208:	ldrb	r3, [r3]
   3c20c:	cmp	r3, #59	; 0x3b
   3c210:	mov	r5, r0
   3c214:	bne	3c7f0 <__assert_fail@plt+0x2a464>
   3c218:	mov	r1, #0
   3c21c:	ldr	r2, [sp, #220]	; 0xdc
   3c220:	mov	r0, r8
   3c224:	bl	38864 <__assert_fail@plt+0x264d8>
   3c228:	ldr	r3, [r8]
   3c22c:	ldrb	r3, [r3]
   3c230:	cmp	r3, #59	; 0x3b
   3c234:	mov	r1, r0
   3c238:	bne	3c7f0 <__assert_fail@plt+0x2a464>
   3c23c:	sub	r3, r5, #3
   3c240:	cmp	r3, #2
   3c244:	mov	r0, r9
   3c248:	bls	3d1ec <__assert_fail@plt+0x2ae60>
   3c24c:	bl	37848 <__assert_fail@plt+0x254bc>
   3c250:	mov	r4, r0
   3c254:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3c258:	ldrb	r6, [r7, #1]
   3c25c:	cmp	r6, #101	; 0x65
   3c260:	beq	3ce18 <__assert_fail@plt+0x2aa8c>
   3c264:	bls	3c800 <__assert_fail@plt+0x2a474>
   3c268:	cmp	r6, #115	; 0x73
   3c26c:	moveq	r7, #7
   3c270:	beq	3c280 <__assert_fail@plt+0x29ef4>
   3c274:	cmp	r6, #117	; 0x75
   3c278:	moveq	r7, #8
   3c27c:	bne	3d028 <__assert_fail@plt+0x2ac9c>
   3c280:	add	r4, r4, #1
   3c284:	mov	r1, #60	; 0x3c
   3c288:	str	r4, [r8]
   3c28c:	mov	r0, r4
   3c290:	bl	12098 <strchr@plt>
   3c294:	mov	r1, #58	; 0x3a
   3c298:	mov	sl, r0
   3c29c:	mov	r0, r4
   3c2a0:	bl	12098 <strchr@plt>
   3c2a4:	subs	r6, r0, #0
   3c2a8:	beq	3c808 <__assert_fail@plt+0x2a47c>
   3c2ac:	cmp	sl, #0
   3c2b0:	cmpne	sl, r6
   3c2b4:	bcs	3c2c4 <__assert_fail@plt+0x29f38>
   3c2b8:	ldrb	r3, [r6, #1]
   3c2bc:	cmp	r3, #58	; 0x3a
   3c2c0:	beq	3b60c <__assert_fail@plt+0x29280>
   3c2c4:	ldr	sl, [sp, #20]
   3c2c8:	sub	r5, r6, r4
   3c2cc:	cmp	sl, #0
   3c2d0:	beq	3c2fc <__assert_fail@plt+0x29f70>
   3c2d4:	mov	r2, r5
   3c2d8:	mov	r1, r4
   3c2dc:	mov	r0, sl
   3c2e0:	bl	12320 <strncmp@plt>
   3c2e4:	cmp	r0, #0
   3c2e8:	bne	3c2fc <__assert_fail@plt+0x29f70>
   3c2ec:	ldrb	r3, [sl, r5]
   3c2f0:	cmp	r3, #0
   3c2f4:	moveq	r3, #1
   3c2f8:	streq	r3, [fp, #216]	; 0xd8
   3c2fc:	mov	r2, r4
   3c300:	str	r7, [sp]
   3c304:	mov	r3, r5
   3c308:	add	r1, fp, #212	; 0xd4
   3c30c:	mov	r0, r9
   3c310:	bl	39148 <__assert_fail@plt+0x26dbc>
   3c314:	add	r6, r6, #1
   3c318:	str	r6, [r8]
   3c31c:	mov	r4, r0
   3c320:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3c324:	ldrb	r3, [r7, #1]
   3c328:	cmp	r3, #35	; 0x23
   3c32c:	beq	3cc54 <__assert_fail@plt+0x2a8c8>
   3c330:	ldr	r3, [sp, #220]	; 0xdc
   3c334:	mov	r4, #0
   3c338:	str	r3, [sp, #4]
   3c33c:	str	r4, [sp]
   3c340:	mov	r3, r8
   3c344:	mov	r2, r4
   3c348:	mov	r1, fp
   3c34c:	mov	r0, r9
   3c350:	bl	3b420 <__assert_fail@plt+0x29094>
   3c354:	subs	r3, r0, #0
   3c358:	str	r3, [sp, #20]
   3c35c:	beq	3b5fc <__assert_fail@plt+0x29270>
   3c360:	ldr	r3, [r8]
   3c364:	ldrb	r2, [r3]
   3c368:	cmp	r2, #44	; 0x2c
   3c36c:	bne	3b7f0 <__assert_fail@plt+0x29464>
   3c370:	add	r3, r3, #1
   3c374:	str	r3, [r8]
   3c378:	ldr	r3, [sp, #220]	; 0xdc
   3c37c:	str	r4, [sp]
   3c380:	str	r3, [sp, #4]
   3c384:	mov	r2, r4
   3c388:	mov	r3, r8
   3c38c:	mov	r1, fp
   3c390:	mov	r0, r9
   3c394:	bl	3b420 <__assert_fail@plt+0x29094>
   3c398:	subs	r3, r0, #0
   3c39c:	str	r3, [sp, #28]
   3c3a0:	beq	3b5fc <__assert_fail@plt+0x29270>
   3c3a4:	mov	r0, #40	; 0x28
   3c3a8:	bl	11f3c <xmalloc@plt>
   3c3ac:	str	r5, [sp, #32]
   3c3b0:	ldr	r5, [sp, #220]	; 0xdc
   3c3b4:	mov	sl, #10
   3c3b8:	mov	r7, r0
   3c3bc:	ldr	r3, [r8]
   3c3c0:	add	r1, r3, #1
   3c3c4:	ldrb	r2, [r3]
   3c3c8:	cmp	r2, #59	; 0x3b
   3c3cc:	beq	3d1f8 <__assert_fail@plt+0x2ae6c>
   3c3d0:	cmp	r2, #44	; 0x2c
   3c3d4:	add	r4, r4, #1
   3c3d8:	bne	3d1d8 <__assert_fail@plt+0x2ae4c>
   3c3dc:	cmp	r4, sl
   3c3e0:	str	r1, [r8]
   3c3e4:	bcs	3cb88 <__assert_fail@plt+0x2a7fc>
   3c3e8:	mov	r3, #0
   3c3ec:	str	r3, [sp]
   3c3f0:	str	r5, [sp, #4]
   3c3f4:	mov	r3, r8
   3c3f8:	mov	r2, #0
   3c3fc:	mov	r1, fp
   3c400:	mov	r0, r9
   3c404:	bl	3b420 <__assert_fail@plt+0x29094>
   3c408:	lsl	r6, r4, #2
   3c40c:	sub	r6, r6, #4
   3c410:	cmp	r0, #0
   3c414:	str	r0, [r7, r6]
   3c418:	bne	3c3bc <__assert_fail@plt+0x2a030>
   3c41c:	b	3b5fc <__assert_fail@plt+0x29270>
   3c420:	ldr	r3, [sp, #220]	; 0xdc
   3c424:	mov	r2, #0
   3c428:	str	r3, [sp, #4]
   3c42c:	str	r2, [sp]
   3c430:	mov	r3, r8
   3c434:	mov	r1, fp
   3c438:	mov	r0, r9
   3c43c:	bl	3b420 <__assert_fail@plt+0x29094>
   3c440:	mov	r1, r0
   3c444:	mov	r0, r9
   3c448:	bl	379e0 <__assert_fail@plt+0x25654>
   3c44c:	mov	r4, r0
   3c450:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3c454:	strdeq	r5, [r6], -r8
   3c458:	andeq	r1, r5, ip, asr #1
   3c45c:	andeq	r1, r5, r0, ror #17
   3c460:	andeq	r1, r5, r8, lsl #27
   3c464:	andeq	r1, r5, r8, ror #24
   3c468:	strdeq	r1, [r5], -r4
   3c46c:	ldrdeq	r1, [r5], -r0
   3c470:	andeq	r1, r5, r8, lsr #27
   3c474:	andeq	r1, r5, r8, lsl sp
   3c478:	muleq	r5, r0, ip
   3c47c:	andeq	r1, r5, r8, ror #23
   3c480:	ldrdeq	r1, [r5], -r0
   3c484:	muleq	r5, r8, lr
   3c488:	andeq	r1, r5, r4, lsl lr
   3c48c:	andeq	r9, r4, r4, lsr #5
   3c490:	andeq	r8, r4, r0, lsr lr
   3c494:	andeq	r1, r5, ip, lsl #25
   3c498:	andeq	r1, r5, ip, lsl lr
   3c49c:	ldr	r3, [sp, #220]	; 0xdc
   3c4a0:	cmp	r3, r4
   3c4a4:	bls	3b5fc <__assert_fail@plt+0x29270>
   3c4a8:	ldrb	r3, [r7, #1]
   3c4ac:	cmp	r3, #45	; 0x2d
   3c4b0:	moveq	r3, r4
   3c4b4:	beq	3c618 <__assert_fail@plt+0x2a28c>
   3c4b8:	mov	r0, #40	; 0x28
   3c4bc:	bl	11f3c <xmalloc@plt>
   3c4c0:	mov	sl, r0
   3c4c4:	mov	r0, #40	; 0x28
   3c4c8:	bl	11f3c <xmalloc@plt>
   3c4cc:	mov	r1, r0
   3c4d0:	ldr	r0, [r8]
   3c4d4:	ldrb	r6, [r0]
   3c4d8:	subs	r5, r6, #59	; 0x3b
   3c4dc:	movne	r5, #1
   3c4e0:	cmp	r6, #0
   3c4e4:	moveq	r5, #0
   3c4e8:	cmp	r6, #44	; 0x2c
   3c4ec:	moveq	r5, #0
   3c4f0:	andne	r5, r5, #1
   3c4f4:	cmp	r5, #0
   3c4f8:	beq	3c5dc <__assert_fail@plt+0x2a250>
   3c4fc:	str	r4, [sp, #28]
   3c500:	mov	r4, sl
   3c504:	ldr	sl, [sp, #220]	; 0xdc
   3c508:	str	r9, [sp, #32]
   3c50c:	mov	r7, #10
   3c510:	mov	r5, #0
   3c514:	mov	r9, r1
   3c518:	str	fp, [sp, #36]	; 0x24
   3c51c:	cmp	r6, #58	; 0x3a
   3c520:	cmpne	r6, #0
   3c524:	mov	fp, r0
   3c528:	beq	3c53c <__assert_fail@plt+0x2a1b0>
   3c52c:	ldrb	r6, [fp, #1]!
   3c530:	cmp	r6, #58	; 0x3a
   3c534:	cmpne	r6, #0
   3c538:	bne	3c52c <__assert_fail@plt+0x2a1a0>
   3c53c:	cmp	r6, #0
   3c540:	beq	3d188 <__assert_fail@plt+0x2adfc>
   3c544:	sub	r1, fp, r0
   3c548:	bl	38838 <__assert_fail@plt+0x264ac>
   3c54c:	add	r3, fp, #1
   3c550:	mov	r2, sl
   3c554:	mov	r1, #0
   3c558:	str	r3, [r8]
   3c55c:	mov	r6, r0
   3c560:	mov	r0, r8
   3c564:	bl	38864 <__assert_fail@plt+0x264d8>
   3c568:	ldr	r2, [r8]
   3c56c:	ldrb	r1, [r2]
   3c570:	cmp	r1, #44	; 0x2c
   3c574:	mov	fp, r0
   3c578:	bne	3d158 <__assert_fail@plt+0x2adcc>
   3c57c:	add	r5, r5, #1
   3c580:	add	r2, r2, #1
   3c584:	cmp	r5, r7
   3c588:	str	r2, [r8]
   3c58c:	bcs	3c650 <__assert_fail@plt+0x2a2c4>
   3c590:	lsl	r2, r5, #2
   3c594:	sub	r2, r2, #4
   3c598:	str	r6, [r4, r2]
   3c59c:	ldr	r0, [r8]
   3c5a0:	str	fp, [r9, r2]
   3c5a4:	ldrb	r6, [r0]
   3c5a8:	subs	r3, r6, #59	; 0x3b
   3c5ac:	movne	r3, #1
   3c5b0:	cmp	r6, #0
   3c5b4:	moveq	r3, #0
   3c5b8:	cmp	r6, #44	; 0x2c
   3c5bc:	moveq	r3, #0
   3c5c0:	andne	r3, r3, #1
   3c5c4:	cmp	r3, #0
   3c5c8:	bne	3c51c <__assert_fail@plt+0x2a190>
   3c5cc:	mov	r1, r9
   3c5d0:	ldr	fp, [sp, #36]	; 0x24
   3c5d4:	ldr	r9, [sp, #32]
   3c5d8:	mov	sl, r4
   3c5dc:	mov	r2, #0
   3c5e0:	str	r2, [sl, r5, lsl #2]
   3c5e4:	ldr	r3, [r8]
   3c5e8:	str	r2, [r1, r5, lsl #2]
   3c5ec:	mov	r0, r9
   3c5f0:	ldrb	r2, [r3]
   3c5f4:	cmp	r2, #59	; 0x3b
   3c5f8:	addeq	r3, r3, #1
   3c5fc:	mov	r2, r1
   3c600:	streq	r3, [r8]
   3c604:	mov	r1, sl
   3c608:	bl	37920 <__assert_fail@plt+0x25594>
   3c60c:	mov	r4, r0
   3c610:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3c614:	mov	r3, r2
   3c618:	add	r2, r3, #1
   3c61c:	str	r2, [r8]
   3c620:	ldrb	r5, [r3, #1]
   3c624:	cmp	r5, #58	; 0x3a
   3c628:	cmpne	r5, #0
   3c62c:	bne	3c614 <__assert_fail@plt+0x2a288>
   3c630:	cmp	r5, #0
   3c634:	addne	r3, r3, #2
   3c638:	strne	r3, [r8]
   3c63c:	bne	3c4b8 <__assert_fail@plt+0x2a12c>
   3c640:	mov	r0, r4
   3c644:	bl	387a0 <__assert_fail@plt+0x26414>
   3c648:	mov	r4, r5
   3c64c:	b	3b600 <__assert_fail@plt+0x29274>
   3c650:	add	r7, r7, #10
   3c654:	mov	r0, r4
   3c658:	lsl	r2, r7, #2
   3c65c:	mov	r1, r2
   3c660:	str	r2, [sp, #20]
   3c664:	bl	11ed0 <xrealloc@plt>
   3c668:	ldr	r2, [sp, #20]
   3c66c:	mov	r1, r2
   3c670:	mov	r4, r0
   3c674:	mov	r0, r9
   3c678:	bl	11ed0 <xrealloc@plt>
   3c67c:	mov	r9, r0
   3c680:	b	3c590 <__assert_fail@plt+0x2a204>
   3c684:	mov	r0, r5
   3c688:	mov	r1, #58	; 0x3a
   3c68c:	bl	12098 <strchr@plt>
   3c690:	subs	r4, r0, #0
   3c694:	beq	3dc60 <__assert_fail@plt+0x2b8d4>
   3c698:	ldrb	r3, [r4, #1]
   3c69c:	ldr	r5, [r8]
   3c6a0:	cmp	r3, #58	; 0x3a
   3c6a4:	beq	3bfb8 <__assert_fail@plt+0x29c2c>
   3c6a8:	cmp	fp, r5
   3c6ac:	bls	3b5fc <__assert_fail@plt+0x29270>
   3c6b0:	sub	r1, r4, r5
   3c6b4:	mov	r0, r5
   3c6b8:	bl	38838 <__assert_fail@plt+0x264ac>
   3c6bc:	add	r3, r4, #1
   3c6c0:	str	r3, [r8]
   3c6c4:	ldrb	r3, [r4, #1]
   3c6c8:	cmp	r3, #47	; 0x2f
   3c6cc:	str	r0, [sp, #32]
   3c6d0:	bne	3cbbc <__assert_fail@plt+0x2a830>
   3c6d4:	add	r3, r4, #2
   3c6d8:	str	r3, [r8]
   3c6dc:	ldrb	r4, [r4, #2]
   3c6e0:	cmp	r4, #48	; 0x30
   3c6e4:	beq	3da24 <__assert_fail@plt+0x2b698>
   3c6e8:	bls	3cbc8 <__assert_fail@plt+0x2a83c>
   3c6ec:	cmp	r4, #49	; 0x31
   3c6f0:	moveq	r2, #1
   3c6f4:	streq	r2, [sp, #44]	; 0x2c
   3c6f8:	beq	3c70c <__assert_fail@plt+0x2a380>
   3c6fc:	cmp	r4, #50	; 0x32
   3c700:	moveq	r2, #0
   3c704:	streq	r2, [sp, #44]	; 0x2c
   3c708:	bne	3cbd0 <__assert_fail@plt+0x2a844>
   3c70c:	add	r3, r3, #1
   3c710:	str	r3, [r8]
   3c714:	mov	r7, #0
   3c718:	mov	r2, r7
   3c71c:	stm	sp, {r7, fp}
   3c720:	mov	r3, r8
   3c724:	ldr	r1, [sp, #48]	; 0x30
   3c728:	ldr	r0, [sp, #40]	; 0x28
   3c72c:	bl	3b420 <__assert_fail@plt+0x29094>
   3c730:	subs	r4, r0, #0
   3c734:	beq	3d8f4 <__assert_fail@plt+0x2b568>
   3c738:	ldr	r2, [sp, #36]	; 0x24
   3c73c:	ldr	r3, [r8]
   3c740:	add	r2, r2, r6, lsl #2
   3c744:	sub	r2, r2, #4
   3c748:	str	r2, [sp, #52]	; 0x34
   3c74c:	ldrb	r2, [r3]
   3c750:	cmp	r2, #58	; 0x3a
   3c754:	beq	3cfc0 <__assert_fail@plt+0x2ac34>
   3c758:	cmp	r2, #44	; 0x2c
   3c75c:	bne	3cba4 <__assert_fail@plt+0x2a818>
   3c760:	add	r3, r3, #1
   3c764:	mov	r2, fp
   3c768:	mov	r1, r7
   3c76c:	str	r3, [r8]
   3c770:	mov	r0, r8
   3c774:	bl	38864 <__assert_fail@plt+0x264d8>
   3c778:	ldr	r2, [r8]
   3c77c:	ldrb	r1, [r2]
   3c780:	cmp	r1, #44	; 0x2c
   3c784:	bne	3cba4 <__assert_fail@plt+0x2a818>
   3c788:	add	r2, r2, #1
   3c78c:	str	r0, [sp, #60]	; 0x3c
   3c790:	str	r2, [r8]
   3c794:	mov	r1, r7
   3c798:	mov	r2, fp
   3c79c:	mov	r0, r8
   3c7a0:	bl	38864 <__assert_fail@plt+0x264d8>
   3c7a4:	ldr	r2, [r8]
   3c7a8:	ldr	r3, [sp, #60]	; 0x3c
   3c7ac:	ldrb	r1, [r2]
   3c7b0:	cmp	r1, #59	; 0x3b
   3c7b4:	bne	3cba4 <__assert_fail@plt+0x2a818>
   3c7b8:	orrs	r1, r3, r0
   3c7bc:	ldr	r1, [sp, #44]	; 0x2c
   3c7c0:	add	r2, r2, #1
   3c7c4:	moveq	r1, #3
   3c7c8:	str	r1, [sp, #4]
   3c7cc:	str	r2, [r8]
   3c7d0:	ldr	r1, [sp, #32]
   3c7d4:	str	r0, [sp]
   3c7d8:	mov	r2, r4
   3c7dc:	ldr	r0, [sp, #40]	; 0x28
   3c7e0:	bl	37c34 <__assert_fail@plt+0x258a8>
   3c7e4:	ldr	r3, [sp, #52]	; 0x34
   3c7e8:	str	r0, [r3]
   3c7ec:	b	3bfa4 <__assert_fail@plt+0x29c18>
   3c7f0:	mov	r0, r4
   3c7f4:	bl	387a0 <__assert_fail@plt+0x26414>
   3c7f8:	mov	r4, #0
   3c7fc:	b	3b600 <__assert_fail@plt+0x29274>
   3c800:	cmp	r6, #0
   3c804:	bne	3d028 <__assert_fail@plt+0x2ac9c>
   3c808:	mov	r0, r5
   3c80c:	bl	387a0 <__assert_fail@plt+0x26414>
   3c810:	mov	r4, r6
   3c814:	b	3b600 <__assert_fail@plt+0x29274>
   3c818:	str	r4, [r8]
   3c81c:	ldr	r3, [sp, #220]	; 0xdc
   3c820:	mov	r4, #0
   3c824:	str	r3, [sp, #4]
   3c828:	str	r4, [sp]
   3c82c:	mov	r2, r4
   3c830:	mov	r3, r8
   3c834:	mov	r1, fp
   3c838:	mov	r0, r9
   3c83c:	bl	3b420 <__assert_fail@plt+0x29094>
   3c840:	subs	r6, r0, #0
   3c844:	beq	3b5fc <__assert_fail@plt+0x29270>
   3c848:	ldr	r3, [r8]
   3c84c:	ldrb	r2, [r3]
   3c850:	cmp	r2, #44	; 0x2c
   3c854:	bne	3b7f0 <__assert_fail@plt+0x29464>
   3c858:	add	r3, r3, #1
   3c85c:	str	r3, [r8]
   3c860:	ldr	r3, [sp, #220]	; 0xdc
   3c864:	mov	r2, r4
   3c868:	str	r3, [sp, #4]
   3c86c:	str	r4, [sp]
   3c870:	mov	r3, r8
   3c874:	mov	r1, fp
   3c878:	mov	r0, r9
   3c87c:	bl	3b420 <__assert_fail@plt+0x29094>
   3c880:	subs	r2, r0, #0
   3c884:	beq	3b5fc <__assert_fail@plt+0x29270>
   3c888:	mov	r1, r6
   3c88c:	mov	r0, r9
   3c890:	bl	37b04 <__assert_fail@plt+0x25778>
   3c894:	mov	r4, r0
   3c898:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3c89c:	add	r9, r9, #10
   3c8a0:	ldr	r0, [sp, #36]	; 0x24
   3c8a4:	lsl	r1, r9, #2
   3c8a8:	bl	11ed0 <xrealloc@plt>
   3c8ac:	ldrb	r3, [r5]
   3c8b0:	str	r0, [sp, #36]	; 0x24
   3c8b4:	b	3be3c <__assert_fail@plt+0x29ab0>
   3c8b8:	mov	r7, r0
   3c8bc:	b	3b684 <__assert_fail@plt+0x292f8>
   3c8c0:	mov	r2, #1
   3c8c4:	add	r3, r4, #3
   3c8c8:	str	r2, [sp, #52]	; 0x34
   3c8cc:	str	r3, [fp]
   3c8d0:	str	r2, [sp, #48]	; 0x30
   3c8d4:	ldrb	r2, [r4, #3]
   3c8d8:	cmp	r2, #46	; 0x2e
   3c8dc:	beq	3d1b0 <__assert_fail@plt+0x2ae24>
   3c8e0:	cmp	r2, #63	; 0x3f
   3c8e4:	beq	3d114 <__assert_fail@plt+0x2ad88>
   3c8e8:	cmp	r2, #42	; 0x2a
   3c8ec:	beq	3d064 <__assert_fail@plt+0x2acd8>
   3c8f0:	mov	r8, #0
   3c8f4:	ldr	r1, [pc, #-1172]	; 3c468 <__assert_fail@plt+0x2a0dc>
   3c8f8:	ldr	r0, [sp, #44]	; 0x2c
   3c8fc:	str	r8, [sp, #64]	; 0x40
   3c900:	bl	38720 <__assert_fail@plt+0x26394>
   3c904:	str	r8, [sp, #84]	; 0x54
   3c908:	str	r8, [sp, #56]	; 0x38
   3c90c:	cmp	r6, #0
   3c910:	moveq	r4, r9
   3c914:	bne	3cd18 <__assert_fail@plt+0x2a98c>
   3c918:	ldr	r3, [sp, #72]	; 0x48
   3c91c:	ldr	r2, [sp, #92]	; 0x5c
   3c920:	add	r3, r3, #1
   3c924:	cmp	r3, r2
   3c928:	str	r3, [sp, #72]	; 0x48
   3c92c:	bcs	3cce8 <__assert_fail@plt+0x2a95c>
   3c930:	ldr	r3, [sp, #56]	; 0x38
   3c934:	cmp	r3, #0
   3c938:	ldr	r3, [sp, #72]	; 0x48
   3c93c:	lsl	r7, r3, #2
   3c940:	sub	r6, r7, #4
   3c944:	bne	3cbfc <__assert_fail@plt+0x2a870>
   3c948:	ldr	r3, [sp, #64]	; 0x40
   3c94c:	mov	r2, r5
   3c950:	str	r3, [sp, #12]
   3c954:	ldr	r3, [sp, #84]	; 0x54
   3c958:	mov	r1, r4
   3c95c:	str	r3, [sp, #8]
   3c960:	ldr	r3, [sp, #52]	; 0x34
   3c964:	ldr	r0, [sp, #32]
   3c968:	str	r3, [sp, #4]
   3c96c:	ldr	r3, [sp, #48]	; 0x30
   3c970:	str	r3, [sp]
   3c974:	ldr	r3, [sp, #80]	; 0x50
   3c978:	bl	37cd4 <__assert_fail@plt+0x25948>
   3c97c:	ldr	r3, [sp, #40]	; 0x28
   3c980:	str	r0, [r3, r6]
   3c984:	cmp	r0, #0
   3c988:	beq	3cdf4 <__assert_fail@plt+0x2aa68>
   3c98c:	ldr	r2, [fp]
   3c990:	ldrb	r3, [r2]
   3c994:	cmp	r3, #59	; 0x3b
   3c998:	cmpne	r3, #0
   3c99c:	movne	r3, #1
   3c9a0:	moveq	r3, #0
   3c9a4:	bne	3c07c <__assert_fail@plt+0x29cf0>
   3c9a8:	ldr	r1, [sp, #40]	; 0x28
   3c9ac:	str	r3, [r1, r7]
   3c9b0:	ldrb	r3, [r2]
   3c9b4:	cmp	r3, #0
   3c9b8:	addne	r2, r2, #1
   3c9bc:	ldr	r3, [sp, #96]	; 0x60
   3c9c0:	strne	r2, [fp]
   3c9c4:	ldr	r2, [sp, #100]	; 0x64
   3c9c8:	add	r3, r3, #1
   3c9cc:	cmp	r2, r3
   3c9d0:	str	r3, [sp, #96]	; 0x60
   3c9d4:	bls	3dea8 <__assert_fail@plt+0x2bb1c>
   3c9d8:	ldr	r3, [sp, #96]	; 0x60
   3c9dc:	ldr	r2, [sp, #40]	; 0x28
   3c9e0:	ldr	r1, [sp, #28]
   3c9e4:	ldr	r0, [sp, #32]
   3c9e8:	lsl	r4, r3, #2
   3c9ec:	bl	37cb4 <__assert_fail@plt+0x25928>
   3c9f0:	ldr	r5, [fp]
   3c9f4:	ldr	r3, [sp, #68]	; 0x44
   3c9f8:	sub	r4, r4, #4
   3c9fc:	str	r0, [r3, r4]
   3ca00:	ldrb	r4, [r5]
   3ca04:	cmp	r4, #59	; 0x3b
   3ca08:	bne	3c014 <__assert_fail@plt+0x29c88>
   3ca0c:	ldr	r2, [sp, #68]	; 0x44
   3ca10:	mov	r8, fp
   3ca14:	cmp	r2, #0
   3ca18:	ldr	r6, [sp, #120]	; 0x78
   3ca1c:	ldr	r9, [sp, #32]
   3ca20:	ldr	fp, [sp, #60]	; 0x3c
   3ca24:	ldrne	r1, [sp, #96]	; 0x60
   3ca28:	movne	r3, #0
   3ca2c:	strne	r3, [r2, r1, lsl #2]
   3ca30:	ldr	r3, [sp, #220]	; 0xdc
   3ca34:	cmp	r3, r5
   3ca38:	bls	3b5f4 <__assert_fail@plt+0x29268>
   3ca3c:	ldrb	r3, [r5]
   3ca40:	cmp	r3, #59	; 0x3b
   3ca44:	movne	r3, r5
   3ca48:	beq	3d8e8 <__assert_fail@plt+0x2b55c>
   3ca4c:	ldrb	r2, [r3]
   3ca50:	sub	r4, r6, #115	; 0x73
   3ca54:	clz	r4, r4
   3ca58:	cmp	r2, #126	; 0x7e
   3ca5c:	lsr	r4, r4, #5
   3ca60:	bne	3ca90 <__assert_fail@plt+0x2a704>
   3ca64:	add	r2, r3, #1
   3ca68:	str	r2, [r8]
   3ca6c:	ldrb	r1, [r3, #1]
   3ca70:	and	r0, r1, #239	; 0xef
   3ca74:	cmp	r1, #43	; 0x2b
   3ca78:	cmpne	r0, #45	; 0x2d
   3ca7c:	addeq	r2, r3, #2
   3ca80:	streq	r2, [r8]
   3ca84:	ldrb	r3, [r2]
   3ca88:	cmp	r3, #37	; 0x25
   3ca8c:	beq	3de08 <__assert_fail@plt+0x2ba7c>
   3ca90:	mov	r0, #0
   3ca94:	ldr	r2, [sp, #108]	; 0x6c
   3ca98:	ldr	r3, [sp, #76]	; 0x4c
   3ca9c:	orr	r3, r3, r2
   3caa0:	ldr	r2, [sp, #68]	; 0x44
   3caa4:	orr	r3, r2, r3
   3caa8:	orrs	r3, r0, r3
   3caac:	movne	r3, #0
   3cab0:	beq	3e11c <__assert_fail@plt+0x2bd90>
   3cab4:	str	r3, [sp, #12]
   3cab8:	ldr	r3, [sp, #68]	; 0x44
   3cabc:	str	r0, [sp, #8]
   3cac0:	str	r3, [sp, #4]
   3cac4:	ldr	r3, [sp, #76]	; 0x4c
   3cac8:	mov	r1, r4
   3cacc:	str	r3, [sp]
   3cad0:	ldr	r2, [sp, #88]	; 0x58
   3cad4:	ldr	r3, [sp, #36]	; 0x24
   3cad8:	mov	r0, r9
   3cadc:	bl	378b4 <__assert_fail@plt+0x25528>
   3cae0:	mov	r4, r0
   3cae4:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3cae8:	mov	r2, #1
   3caec:	add	r3, r4, #3
   3caf0:	mov	r1, #0
   3caf4:	str	r3, [fp]
   3caf8:	str	r2, [sp, #52]	; 0x34
   3cafc:	str	r1, [sp, #48]	; 0x30
   3cb00:	ldrb	r2, [r4, #3]
   3cb04:	b	3c8d8 <__assert_fail@plt+0x2a54c>
   3cb08:	mov	r2, #0
   3cb0c:	add	r3, r4, #3
   3cb10:	str	r2, [sp, #52]	; 0x34
   3cb14:	str	r3, [fp]
   3cb18:	str	r2, [sp, #48]	; 0x30
   3cb1c:	ldrb	r2, [r4, #3]
   3cb20:	b	3c8d8 <__assert_fail@plt+0x2a54c>
   3cb24:	mov	r1, #0
   3cb28:	str	r1, [sp, #52]	; 0x34
   3cb2c:	str	r1, [sp, #48]	; 0x30
   3cb30:	b	3c8d8 <__assert_fail@plt+0x2a54c>
   3cb34:	mov	r2, #0
   3cb38:	add	r3, r4, #3
   3cb3c:	mov	r1, #1
   3cb40:	str	r3, [fp]
   3cb44:	str	r2, [sp, #52]	; 0x34
   3cb48:	str	r1, [sp, #48]	; 0x30
   3cb4c:	ldrb	r2, [r4, #3]
   3cb50:	b	3c8d8 <__assert_fail@plt+0x2a54c>
   3cb54:	mov	r2, #5
   3cb58:	ldr	r1, [pc, #-1780]	; 3c46c <__assert_fail@plt+0x2a0e0>
   3cb5c:	mov	r0, #0
   3cb60:	bl	11ea0 <dcgettext@plt>
   3cb64:	mov	r1, r0
   3cb68:	ldr	r0, [sp, #44]	; 0x2c
   3cb6c:	bl	38720 <__assert_fail@plt+0x26394>
   3cb70:	ldr	r3, [fp]
   3cb74:	mov	r2, #0
   3cb78:	str	r2, [sp, #52]	; 0x34
   3cb7c:	str	r2, [sp, #48]	; 0x30
   3cb80:	ldrb	r2, [r3]
   3cb84:	b	3c8d8 <__assert_fail@plt+0x2a54c>
   3cb88:	add	sl, sl, #10
   3cb8c:	mov	r0, r7
   3cb90:	lsl	r1, sl, #2
   3cb94:	bl	11ed0 <xrealloc@plt>
   3cb98:	mov	r7, r0
   3cb9c:	b	3c3e8 <__assert_fail@plt+0x2a05c>
   3cba0:	mov	r7, r3
   3cba4:	mov	r0, r5
   3cba8:	bl	387a0 <__assert_fail@plt+0x26414>
   3cbac:	ldr	r0, [sp, #32]
   3cbb0:	bl	11e10 <free@plt>
   3cbb4:	mov	r4, r7
   3cbb8:	b	3b600 <__assert_fail@plt+0x29274>
   3cbbc:	mov	r3, #0
   3cbc0:	str	r3, [sp, #44]	; 0x2c
   3cbc4:	b	3c714 <__assert_fail@plt+0x2a388>
   3cbc8:	cmp	r4, #0
   3cbcc:	beq	3b7f0 <__assert_fail@plt+0x29464>
   3cbd0:	mov	r2, #5
   3cbd4:	ldr	r1, [pc, #-1900]	; 3c470 <__assert_fail@plt+0x2a0e4>
   3cbd8:	mov	r0, #0
   3cbdc:	bl	11ea0 <dcgettext@plt>
   3cbe0:	mov	r1, r0
   3cbe4:	mov	r0, r5
   3cbe8:	bl	38720 <__assert_fail@plt+0x26394>
   3cbec:	mov	r3, #0
   3cbf0:	str	r3, [sp, #44]	; 0x2c
   3cbf4:	ldr	r3, [r8]
   3cbf8:	b	3c70c <__assert_fail@plt+0x2a380>
   3cbfc:	ldr	r3, [sp, #52]	; 0x34
   3cc00:	mov	r2, r5
   3cc04:	str	r3, [sp, #4]
   3cc08:	ldr	r3, [sp, #48]	; 0x30
   3cc0c:	mov	r1, r4
   3cc10:	str	r3, [sp]
   3cc14:	ldr	r0, [sp, #32]
   3cc18:	ldr	r3, [sp, #80]	; 0x50
   3cc1c:	bl	37d1c <__assert_fail@plt+0x25990>
   3cc20:	ldr	r3, [sp, #40]	; 0x28
   3cc24:	str	r0, [r3, r6]
   3cc28:	b	3c984 <__assert_fail@plt+0x2a5f8>
   3cc2c:	ldr	r3, [sp, #220]	; 0xdc
   3cc30:	mov	r2, #0
   3cc34:	mov	r1, fp
   3cc38:	strd	r2, [sp]
   3cc3c:	mov	r0, r9
   3cc40:	mov	r3, r8
   3cc44:	bl	3b420 <__assert_fail@plt+0x29094>
   3cc48:	ldr	r3, [r8]
   3cc4c:	mov	r7, r0
   3cc50:	b	3b9ec <__assert_fail@plt+0x29660>
   3cc54:	ldr	r3, [sp, #220]	; 0xdc
   3cc58:	mov	r4, #0
   3cc5c:	add	r7, r7, #2
   3cc60:	str	r7, [r8]
   3cc64:	mov	r1, fp
   3cc68:	str	r3, [sp, #4]
   3cc6c:	str	r4, [sp]
   3cc70:	mov	r2, r4
   3cc74:	mov	r3, r8
   3cc78:	mov	r0, r9
   3cc7c:	bl	3b420 <__assert_fail@plt+0x29094>
   3cc80:	subs	r1, r0, #0
   3cc84:	beq	3b5fc <__assert_fail@plt+0x29270>
   3cc88:	ldr	r3, [r8]
   3cc8c:	ldrb	r2, [r3]
   3cc90:	cmp	r2, #59	; 0x3b
   3cc94:	bne	3b7f0 <__assert_fail@plt+0x29464>
   3cc98:	add	r3, r3, #1
   3cc9c:	str	r3, [r8]
   3cca0:	mov	r2, r4
   3cca4:	str	r4, [sp]
   3cca8:	mov	r3, r4
   3ccac:	mov	r0, r9
   3ccb0:	bl	37b5c <__assert_fail@plt+0x257d0>
   3ccb4:	mov	r4, r0
   3ccb8:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3ccbc:	mov	r0, r7
   3ccc0:	bl	387a0 <__assert_fail@plt+0x26414>
   3ccc4:	b	3b5f4 <__assert_fail@plt+0x29268>
   3ccc8:	mov	r3, #1
   3cccc:	str	r3, [sp, #80]	; 0x50
   3ccd0:	b	3c0f8 <__assert_fail@plt+0x29d6c>
   3ccd4:	mov	r5, #0
   3ccd8:	b	3bb3c <__assert_fail@plt+0x297b0>
   3ccdc:	mov	r3, #2
   3cce0:	str	r3, [sp, #80]	; 0x50
   3cce4:	b	3c0f8 <__assert_fail@plt+0x29d6c>
   3cce8:	add	r3, r2, #10
   3ccec:	ldr	r0, [sp, #40]	; 0x28
   3ccf0:	lsl	r1, r3, #2
   3ccf4:	str	r3, [sp, #92]	; 0x5c
   3ccf8:	bl	11ed0 <xrealloc@plt>
   3ccfc:	str	r0, [sp, #40]	; 0x28
   3cd00:	b	3c930 <__assert_fail@plt+0x2a5a4>
   3cd04:	mov	r8, #0
   3cd08:	mov	r3, #1
   3cd0c:	str	r8, [sp, #64]	; 0x40
   3cd10:	str	r8, [sp, #84]	; 0x54
   3cd14:	str	r3, [sp, #56]	; 0x38
   3cd18:	ldr	r4, [sp, #32]
   3cd1c:	add	r2, sp, #140	; 0x8c
   3cd20:	ldr	r1, [sp, #60]	; 0x3c
   3cd24:	mov	r0, r4
   3cd28:	bl	38be8 <__assert_fail@plt+0x2685c>
   3cd2c:	subs	r3, r0, #0
   3cd30:	str	r3, [sp, #112]	; 0x70
   3cd34:	beq	3cdf4 <__assert_fail@plt+0x2aa68>
   3cd38:	mov	r1, r5
   3cd3c:	mov	r0, r4
   3cd40:	bl	3834c <__assert_fail@plt+0x25fc0>
   3cd44:	subs	r3, r0, #0
   3cd48:	str	r3, [sp, #116]	; 0x74
   3cd4c:	beq	3b5b8 <__assert_fail@plt+0x2922c>
   3cd50:	ldrb	r6, [r9]
   3cd54:	cmp	r6, #95	; 0x5f
   3cd58:	beq	3d900 <__assert_fail@plt+0x2b574>
   3cd5c:	mov	r2, #4
   3cd60:	ldr	r1, [pc, #-2276]	; 3c484 <__assert_fail@plt+0x2a0f8>
   3cd64:	mov	r0, r9
   3cd68:	bl	12320 <strncmp@plt>
   3cd6c:	cmp	r0, #0
   3cd70:	moveq	r4, #1
   3cd74:	moveq	r7, r4
   3cd78:	beq	3cda0 <__assert_fail@plt+0x2aa14>
   3cd7c:	ldr	r3, [sp, #20]
   3cd80:	cmp	r3, #0
   3cd84:	beq	3dd7c <__assert_fail@plt+0x2b9f0>
   3cd88:	mov	r1, r3
   3cd8c:	ldr	r0, [sp, #28]
   3cd90:	bl	11d98 <strcmp@plt>
   3cd94:	mov	r7, #0
   3cd98:	clz	r4, r0
   3cd9c:	lsr	r4, r4, #5
   3cda0:	mov	r2, #4
   3cda4:	ldr	r1, [pc, #-2340]	; 3c488 <__assert_fail@plt+0x2a0fc>
   3cda8:	mov	r0, r9
   3cdac:	bl	12320 <strncmp@plt>
   3cdb0:	cmp	r0, #0
   3cdb4:	bne	3d32c <__assert_fail@plt+0x2afa0>
   3cdb8:	mov	r4, r9
   3cdbc:	mov	r0, #4
   3cdc0:	bl	11f3c <xmalloc@plt>
   3cdc4:	mov	lr, #0
   3cdc8:	str	lr, [sp]
   3cdcc:	ldr	r2, [sp, #112]	; 0x70
   3cdd0:	ldr	r1, [sp, #116]	; 0x74
   3cdd4:	mov	ip, r0
   3cdd8:	mov	r3, r0
   3cddc:	str	lr, [ip]
   3cde0:	ldr	r0, [sp, #32]
   3cde4:	bl	37b5c <__assert_fail@plt+0x257d0>
   3cde8:	mov	r5, r0
   3cdec:	cmp	r5, #0
   3cdf0:	bne	3c918 <__assert_fail@plt+0x2a58c>
   3cdf4:	mov	r8, r9
   3cdf8:	b	3b5c4 <__assert_fail@plt+0x29238>
   3cdfc:	add	r2, sp, #128	; 0x80
   3ce00:	mov	r1, r5
   3ce04:	ldr	r0, [sp, #32]
   3ce08:	bl	38398 <__assert_fail@plt+0x2600c>
   3ce0c:	clz	r6, r0
   3ce10:	lsr	r6, r6, #5
   3ce14:	b	3c0bc <__assert_fail@plt+0x29d30>
   3ce18:	mov	r7, #11
   3ce1c:	b	3c280 <__assert_fail@plt+0x29ef4>
   3ce20:	ldr	r4, [sp, #28]
   3ce24:	mov	r1, #0
   3ce28:	add	r3, r4, #1
   3ce2c:	str	r3, [r8]
   3ce30:	mov	r0, r8
   3ce34:	bl	38864 <__assert_fail@plt+0x264d8>
   3ce38:	ldr	r3, [r8]
   3ce3c:	ldrb	r2, [r3]
   3ce40:	cmp	r2, #44	; 0x2c
   3ce44:	mov	r5, r0
   3ce48:	bne	3c7f0 <__assert_fail@plt+0x2a464>
   3ce4c:	add	r0, r0, #1
   3ce50:	add	r3, r3, #1
   3ce54:	str	r3, [r8]
   3ce58:	lsl	r0, r0, #2
   3ce5c:	bl	11f3c <xmalloc@plt>
   3ce60:	cmp	r5, #0
   3ce64:	str	r0, [sp, #76]	; 0x4c
   3ce68:	beq	3cf98 <__assert_fail@plt+0x2ac0c>
   3ce6c:	ldr	r3, [r8]
   3ce70:	mov	r7, #0
   3ce74:	str	r6, [sp, #36]	; 0x24
   3ce78:	ldrb	r4, [r3]
   3ce7c:	cmp	r4, #48	; 0x30
   3ce80:	beq	3db3c <__assert_fail@plt+0x2b7b0>
   3ce84:	cmp	r4, #49	; 0x31
   3ce88:	beq	3d8dc <__assert_fail@plt+0x2b550>
   3ce8c:	cmp	r4, #0
   3ce90:	beq	3d058 <__assert_fail@plt+0x2accc>
   3ce94:	mov	r2, #5
   3ce98:	ldr	r1, [pc, #-2604]	; 3c474 <__assert_fail@plt+0x2a0e8>
   3ce9c:	mov	r0, #0
   3cea0:	bl	11ea0 <dcgettext@plt>
   3cea4:	mov	r6, #0
   3cea8:	mov	r1, r0
   3ceac:	ldr	r0, [sp, #28]
   3ceb0:	bl	38720 <__assert_fail@plt+0x26394>
   3ceb4:	ldr	r3, [r8]
   3ceb8:	mov	r2, r3
   3cebc:	add	r3, r3, #1
   3cec0:	str	r3, [r8]
   3cec4:	ldrb	r4, [r2, #1]
   3cec8:	cmp	r4, #48	; 0x30
   3cecc:	beq	3dd88 <__assert_fail@plt+0x2b9fc>
   3ced0:	bls	3d050 <__assert_fail@plt+0x2acc4>
   3ced4:	cmp	r4, #49	; 0x31
   3ced8:	moveq	r4, #1
   3cedc:	beq	3ceec <__assert_fail@plt+0x2ab60>
   3cee0:	cmp	r4, #50	; 0x32
   3cee4:	moveq	r4, #0
   3cee8:	bne	3dc10 <__assert_fail@plt+0x2b884>
   3ceec:	add	r3, r3, #1
   3cef0:	str	r3, [r8]
   3cef4:	ldr	r2, [sp, #220]	; 0xdc
   3cef8:	mov	r1, #0
   3cefc:	mov	r0, r8
   3cf00:	bl	38864 <__assert_fail@plt+0x264d8>
   3cf04:	ldr	r3, [r8]
   3cf08:	ldrb	r2, [r3]
   3cf0c:	cmp	r2, #44	; 0x2c
   3cf10:	str	r0, [sp, #32]
   3cf14:	bne	3ded0 <__assert_fail@plt+0x2bb44>
   3cf18:	add	r3, r3, #1
   3cf1c:	str	r3, [r8]
   3cf20:	ldr	r3, [sp, #220]	; 0xdc
   3cf24:	mov	r1, fp
   3cf28:	str	r3, [sp, #4]
   3cf2c:	mov	r3, #0
   3cf30:	str	r3, [sp]
   3cf34:	mov	r2, #0
   3cf38:	mov	r3, r8
   3cf3c:	mov	r0, r9
   3cf40:	bl	3b420 <__assert_fail@plt+0x29094>
   3cf44:	subs	r1, r0, #0
   3cf48:	beq	3b5fc <__assert_fail@plt+0x29270>
   3cf4c:	mov	r3, r6
   3cf50:	str	r4, [sp]
   3cf54:	ldr	r2, [sp, #32]
   3cf58:	mov	r0, r9
   3cf5c:	bl	37c04 <__assert_fail@plt+0x25878>
   3cf60:	ldr	r3, [sp, #76]	; 0x4c
   3cf64:	cmp	r0, #0
   3cf68:	str	r0, [r3, r7, lsl #2]
   3cf6c:	beq	3b5fc <__assert_fail@plt+0x29270>
   3cf70:	ldr	r3, [r8]
   3cf74:	ldrb	r2, [r3]
   3cf78:	cmp	r2, #59	; 0x3b
   3cf7c:	bne	3b5fc <__assert_fail@plt+0x29270>
   3cf80:	add	r7, r7, #1
   3cf84:	add	r3, r3, #1
   3cf88:	cmp	r5, r7
   3cf8c:	str	r3, [r8]
   3cf90:	bne	3ce78 <__assert_fail@plt+0x2aaec>
   3cf94:	ldr	r6, [sp, #36]	; 0x24
   3cf98:	ldr	r3, [r8]
   3cf9c:	ldr	r1, [sp, #220]	; 0xdc
   3cfa0:	mov	r2, r3
   3cfa4:	cmp	r1, r2
   3cfa8:	ldr	r2, [sp, #76]	; 0x4c
   3cfac:	str	r3, [sp, #28]
   3cfb0:	mov	r3, #0
   3cfb4:	str	r3, [r2, r5, lsl #2]
   3cfb8:	bls	3b5fc <__assert_fail@plt+0x29270>
   3cfbc:	b	3bdf0 <__assert_fail@plt+0x29a64>
   3cfc0:	add	r7, r3, #1
   3cfc4:	str	r7, [r8]
   3cfc8:	mov	r0, r7
   3cfcc:	mov	r1, #59	; 0x3b
   3cfd0:	bl	12098 <strchr@plt>
   3cfd4:	subs	r3, r0, #0
   3cfd8:	beq	3cba0 <__assert_fail@plt+0x2a814>
   3cfdc:	sub	r1, r3, r7
   3cfe0:	mov	r0, r7
   3cfe4:	str	r3, [sp, #60]	; 0x3c
   3cfe8:	bl	38838 <__assert_fail@plt+0x264ac>
   3cfec:	ldr	r3, [sp, #60]	; 0x3c
   3cff0:	mov	r2, r4
   3cff4:	add	r3, r3, #1
   3cff8:	str	r3, [r8]
   3cffc:	ldr	r3, [sp, #44]	; 0x2c
   3d000:	ldr	r1, [sp, #32]
   3d004:	str	r3, [sp]
   3d008:	mov	r3, #1
   3d00c:	str	r3, [sp, #108]	; 0x6c
   3d010:	mov	r3, r0
   3d014:	ldr	r0, [sp, #40]	; 0x28
   3d018:	bl	37c74 <__assert_fail@plt+0x258e8>
   3d01c:	ldr	r3, [sp, #52]	; 0x34
   3d020:	str	r0, [r3]
   3d024:	b	3bfa4 <__assert_fail@plt+0x29c18>
   3d028:	mov	r2, #5
   3d02c:	ldr	r1, [pc, #-3004]	; 3c478 <__assert_fail@plt+0x2a0ec>
   3d030:	mov	r0, #0
   3d034:	bl	11ea0 <dcgettext@plt>
   3d038:	mov	r7, #7
   3d03c:	mov	r1, r0
   3d040:	mov	r0, r5
   3d044:	bl	38720 <__assert_fail@plt+0x26394>
   3d048:	ldr	r4, [r8]
   3d04c:	b	3c280 <__assert_fail@plt+0x29ef4>
   3d050:	cmp	r4, #0
   3d054:	bne	3dc10 <__assert_fail@plt+0x2b884>
   3d058:	ldr	r0, [sp, #28]
   3d05c:	bl	387a0 <__assert_fail@plt+0x26414>
   3d060:	b	3b600 <__assert_fail@plt+0x29274>
   3d064:	add	r3, r3, #1
   3d068:	str	r3, [fp]
   3d06c:	ldr	r2, [sp, #220]	; 0xdc
   3d070:	mov	r1, #0
   3d074:	mov	r0, fp
   3d078:	bl	38864 <__assert_fail@plt+0x264d8>
   3d07c:	ldr	r3, [fp]
   3d080:	ldrb	r2, [r3]
   3d084:	cmp	r2, #59	; 0x3b
   3d088:	bne	3b5b8 <__assert_fail@plt+0x2922c>
   3d08c:	add	r2, r3, #1
   3d090:	str	r2, [fp]
   3d094:	ldrb	r4, [r3, #1]
   3d098:	bic	r3, r0, #-2147483648	; 0x80000000
   3d09c:	str	r3, [sp, #84]	; 0x54
   3d0a0:	cmp	r4, #0
   3d0a4:	cmpne	r4, #59	; 0x3b
   3d0a8:	moveq	r8, #0
   3d0ac:	moveq	r4, #1
   3d0b0:	movne	r4, #0
   3d0b4:	streq	r8, [sp, #64]	; 0x40
   3d0b8:	streq	r8, [sp, #56]	; 0x38
   3d0bc:	beq	3c90c <__assert_fail@plt+0x2a580>
   3d0c0:	ldr	r3, [sp, #220]	; 0xdc
   3d0c4:	mov	r2, r4
   3d0c8:	str	r3, [sp, #4]
   3d0cc:	str	r4, [sp]
   3d0d0:	mov	r3, fp
   3d0d4:	ldr	r1, [sp, #60]	; 0x3c
   3d0d8:	ldr	r0, [sp, #32]
   3d0dc:	bl	3b420 <__assert_fail@plt+0x29094>
   3d0e0:	ldr	r3, [fp]
   3d0e4:	ldrb	r2, [r3]
   3d0e8:	cmp	r2, #58	; 0x3a
   3d0ec:	mov	r8, r0
   3d0f0:	beq	3dd90 <__assert_fail@plt+0x2ba04>
   3d0f4:	cmp	r2, #59	; 0x3b
   3d0f8:	bne	3b5b8 <__assert_fail@plt+0x2922c>
   3d0fc:	add	r3, r3, #1
   3d100:	str	r0, [sp, #64]	; 0x40
   3d104:	mov	r8, r4
   3d108:	str	r3, [fp]
   3d10c:	str	r4, [sp, #56]	; 0x38
   3d110:	b	3c90c <__assert_fail@plt+0x2a580>
   3d114:	ldr	r4, [sp, #28]
   3d118:	add	r3, r3, #1
   3d11c:	str	r3, [fp]
   3d120:	mov	r0, r4
   3d124:	bl	12074 <strlen@plt>
   3d128:	mov	r1, r4
   3d12c:	mov	r2, r0
   3d130:	mov	r0, r9
   3d134:	bl	12320 <strncmp@plt>
   3d138:	cmp	r0, #0
   3d13c:	bne	3cd04 <__assert_fail@plt+0x2a978>
   3d140:	mov	r3, #1
   3d144:	mov	r8, r0
   3d148:	str	r0, [sp, #64]	; 0x40
   3d14c:	str	r0, [sp, #84]	; 0x54
   3d150:	str	r3, [sp, #56]	; 0x38
   3d154:	b	3c90c <__assert_fail@plt+0x2a580>
   3d158:	mov	r5, r4
   3d15c:	ldr	r4, [sp, #28]
   3d160:	mov	r0, r4
   3d164:	bl	387a0 <__assert_fail@plt+0x26414>
   3d168:	mov	r0, r6
   3d16c:	bl	11e10 <free@plt>
   3d170:	mov	r0, r5
   3d174:	bl	11e10 <free@plt>
   3d178:	mov	r0, r9
   3d17c:	bl	11e10 <free@plt>
   3d180:	mov	r4, #0
   3d184:	b	3b600 <__assert_fail@plt+0x29274>
   3d188:	mov	r5, r4
   3d18c:	ldr	r4, [sp, #28]
   3d190:	mov	r0, r4
   3d194:	bl	387a0 <__assert_fail@plt+0x26414>
   3d198:	mov	r0, r5
   3d19c:	bl	11e10 <free@plt>
   3d1a0:	mov	r0, r9
   3d1a4:	bl	11e10 <free@plt>
   3d1a8:	mov	r4, r6
   3d1ac:	b	3b600 <__assert_fail@plt+0x29274>
   3d1b0:	mov	r8, #0
   3d1b4:	add	r3, r3, #1
   3d1b8:	str	r8, [sp, #64]	; 0x40
   3d1bc:	str	r3, [fp]
   3d1c0:	str	r8, [sp, #84]	; 0x54
   3d1c4:	str	r8, [sp, #56]	; 0x38
   3d1c8:	b	3c90c <__assert_fail@plt+0x2a580>
   3d1cc:	ldr	r0, [sp, #40]	; 0x28
   3d1d0:	bl	11e10 <free@plt>
   3d1d4:	b	3b5e4 <__assert_fail@plt+0x29258>
   3d1d8:	ldr	r5, [sp, #32]
   3d1dc:	mov	r4, #0
   3d1e0:	mov	r0, r5
   3d1e4:	bl	387a0 <__assert_fail@plt+0x26414>
   3d1e8:	b	3b600 <__assert_fail@plt+0x29274>
   3d1ec:	bl	37858 <__assert_fail@plt+0x254cc>
   3d1f0:	mov	r4, r0
   3d1f4:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3d1f8:	cmp	r4, #0
   3d1fc:	str	r1, [r8]
   3d200:	moveq	r0, r7
   3d204:	moveq	ip, #1
   3d208:	bne	3da48 <__assert_fail@plt+0x2b6bc>
   3d20c:	mov	lr, #0
   3d210:	str	lr, [r0]
   3d214:	mov	r3, r7
   3d218:	ldr	r2, [sp, #20]
   3d21c:	ldr	r1, [sp, #28]
   3d220:	mov	r0, r9
   3d224:	str	ip, [sp]
   3d228:	bl	37b5c <__assert_fail@plt+0x257d0>
   3d22c:	mov	r4, r0
   3d230:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3d234:	ldr	r3, [sp, #220]	; 0xdc
   3d238:	str	r4, [r8]
   3d23c:	mov	r1, fp
   3d240:	strd	r2, [sp]
   3d244:	mov	r0, r9
   3d248:	mov	r3, r8
   3d24c:	bl	3b420 <__assert_fail@plt+0x29094>
   3d250:	subs	r3, r0, #0
   3d254:	str	r3, [sp, #28]
   3d258:	beq	3b5fc <__assert_fail@plt+0x29270>
   3d25c:	ldr	sl, [r8]
   3d260:	ldrb	r3, [sl]
   3d264:	b	3bccc <__assert_fail@plt+0x29940>
   3d268:	clz	r2, r6
   3d26c:	lsr	r2, r2, #5
   3d270:	tst	r7, r2
   3d274:	mov	r1, r7
   3d278:	beq	3da7c <__assert_fail@plt+0x2b6f0>
   3d27c:	cmp	r5, #0
   3d280:	beq	3d2d8 <__assert_fail@plt+0x2af4c>
   3d284:	cmn	r5, #1
   3d288:	bne	3ddcc <__assert_fail@plt+0x2ba40>
   3d28c:	ldr	r3, [sp, #20]
   3d290:	cmp	r3, #0
   3d294:	beq	3d2c0 <__assert_fail@plt+0x2af34>
   3d298:	ldr	r1, [pc, #-3620]	; 3c47c <__assert_fail@plt+0x2a0f0>
   3d29c:	mov	r0, r3
   3d2a0:	bl	11d98 <strcmp@plt>
   3d2a4:	subs	r2, r0, #0
   3d2a8:	beq	3d8b8 <__assert_fail@plt+0x2b52c>
   3d2ac:	ldr	r0, [sp, #20]
   3d2b0:	ldr	r1, [pc, #-3640]	; 3c480 <__assert_fail@plt+0x2a0f4>
   3d2b4:	bl	11d98 <strcmp@plt>
   3d2b8:	cmp	r0, #0
   3d2bc:	beq	3d8b4 <__assert_fail@plt+0x2b528>
   3d2c0:	mov	r2, #1
   3d2c4:	mov	r1, #4
   3d2c8:	mov	r0, r9
   3d2cc:	bl	3782c <__assert_fail@plt+0x254a0>
   3d2d0:	mov	r4, r0
   3d2d4:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3d2d8:	mov	r0, r9
   3d2dc:	bl	37820 <__assert_fail@plt+0x25494>
   3d2e0:	mov	r4, r0
   3d2e4:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3d2e8:	mov	r2, #4
   3d2ec:	ldr	r1, [pc, #-3696]	; 3c484 <__assert_fail@plt+0x2a0f8>
   3d2f0:	mov	r0, r9
   3d2f4:	bl	12320 <strncmp@plt>
   3d2f8:	cmp	r0, #0
   3d2fc:	beq	3dd5c <__assert_fail@plt+0x2b9d0>
   3d300:	ldr	r3, [sp, #20]
   3d304:	cmp	r3, #0
   3d308:	bne	3d940 <__assert_fail@plt+0x2b5b4>
   3d30c:	mov	r2, #4
   3d310:	ldr	r1, [pc, #-3728]	; 3c488 <__assert_fail@plt+0x2a0fc>
   3d314:	mov	r0, r9
   3d318:	bl	12320 <strncmp@plt>
   3d31c:	cmp	r0, #0
   3d320:	ldrne	r7, [sp, #20]
   3d324:	movne	r4, r7
   3d328:	beq	3da38 <__assert_fail@plt+0x2b6ac>
   3d32c:	cmp	r7, #0
   3d330:	bne	3dd74 <__assert_fail@plt+0x2b9e8>
   3d334:	ldr	r0, [sp, #20]
   3d338:	cmp	r0, #0
   3d33c:	ldreq	r7, [sp, #20]
   3d340:	beq	3d34c <__assert_fail@plt+0x2afc0>
   3d344:	bl	12074 <strlen@plt>
   3d348:	mov	r7, r0
   3d34c:	ldr	r3, [sp, #48]	; 0x30
   3d350:	ldr	r2, [pc, #-3788]	; 3c48c <__assert_fail@plt+0x2a100>
   3d354:	ldr	r1, [sp, #52]	; 0x34
   3d358:	cmp	r3, #0
   3d35c:	ldr	r5, [pc, #-3796]	; 3c490 <__assert_fail@plt+0x2a104>
   3d360:	moveq	r5, r2
   3d364:	cmp	r1, #0
   3d368:	ldr	r3, [pc, #-3804]	; 3c494 <__assert_fail@plt+0x2a108>
   3d36c:	moveq	r3, r2
   3d370:	cmp	r7, #0
   3d374:	beq	3dbc8 <__assert_fail@plt+0x2b83c>
   3d378:	ldr	r0, [sp, #20]
   3d37c:	add	r6, sp, #148	; 0x94
   3d380:	cmp	r0, #0
   3d384:	beq	3dba8 <__assert_fail@plt+0x2b81c>
   3d388:	mov	r1, #60	; 0x3c
   3d38c:	str	r3, [sp, #104]	; 0x68
   3d390:	bl	12098 <strchr@plt>
   3d394:	ldr	r3, [sp, #104]	; 0x68
   3d398:	cmp	r0, #0
   3d39c:	beq	3dba8 <__assert_fail@plt+0x2b81c>
   3d3a0:	mov	r2, r5
   3d3a4:	mov	r0, r6
   3d3a8:	ldr	r1, [pc, #-3864]	; 3c498 <__assert_fail@plt+0x2a10c>
   3d3ac:	mov	r7, #0
   3d3b0:	bl	1223c <sprintf@plt>
   3d3b4:	str	r7, [sp, #104]	; 0x68
   3d3b8:	mov	r0, r6
   3d3bc:	bl	12074 <strlen@plt>
   3d3c0:	mov	r5, r0
   3d3c4:	mov	r0, r9
   3d3c8:	bl	12074 <strlen@plt>
   3d3cc:	cmp	r4, #0
   3d3d0:	add	r4, r7, #1
   3d3d4:	mov	r3, r0
   3d3d8:	ldr	r0, [sp, #28]
   3d3dc:	ldrb	r7, [r0]
   3d3e0:	bne	3db44 <__assert_fail@plt+0x2b7b8>
   3d3e4:	str	r3, [sp, #124]	; 0x7c
   3d3e8:	bl	12074 <strlen@plt>
   3d3ec:	ldr	r3, [sp, #124]	; 0x7c
   3d3f0:	cmp	r7, #111	; 0x6f
   3d3f4:	add	r3, r5, r3
   3d3f8:	add	r4, r3, r4
   3d3fc:	add	r4, r4, r0
   3d400:	bne	3dc74 <__assert_fail@plt+0x2b8e8>
   3d404:	ldr	r3, [sp, #28]
   3d408:	ldrb	r3, [r3, #1]
   3d40c:	cmp	r3, #112	; 0x70
   3d410:	bne	3dc74 <__assert_fail@plt+0x2b8e8>
   3d414:	ldr	r3, [sp, #28]
   3d418:	ldrb	r3, [r3, #2]
   3d41c:	cmp	r3, #46	; 0x2e
   3d420:	cmpne	r3, #36	; 0x24
   3d424:	bne	3dc74 <__assert_fail@plt+0x2b8e8>
   3d428:	ldr	r3, [sp, #28]
   3d42c:	mov	r1, #0
   3d430:	add	r0, r3, #3
   3d434:	bl	120e0 <cplus_mangle_opname@plt>
   3d438:	subs	r5, r0, #0
   3d43c:	beq	3df60 <__assert_fail@plt+0x2bbd4>
   3d440:	bl	12074 <strlen@plt>
   3d444:	add	r0, r0, r4
   3d448:	bl	11f3c <xmalloc@plt>
   3d44c:	ldr	r1, [sp, #28]
   3d450:	mov	r2, #3
   3d454:	mov	r4, r0
   3d458:	bl	12128 <strncpy@plt>
   3d45c:	mov	r1, r5
   3d460:	add	r0, r4, #3
   3d464:	bl	11f6c <strcpy@plt>
   3d468:	mov	r0, r4
   3d46c:	bl	12074 <strlen@plt>
   3d470:	mov	r1, r6
   3d474:	mov	r5, r0
   3d478:	add	r0, r4, r0
   3d47c:	bl	11e7c <stpcpy@plt>
   3d480:	ldr	r3, [sp, #104]	; 0x68
   3d484:	cmp	r3, #0
   3d488:	beq	3d494 <__assert_fail@plt+0x2b108>
   3d48c:	mov	r1, r3
   3d490:	bl	11f6c <strcpy@plt>
   3d494:	mov	r1, r9
   3d498:	mov	r0, r4
   3d49c:	bl	11f30 <strcat@plt>
   3d4a0:	ldrb	r6, [r9]
   3d4a4:	mov	r3, #0
   3d4a8:	cmp	r6, #0
   3d4ac:	moveq	r3, #1
   3d4b0:	cmp	r3, #0
   3d4b4:	bne	3cdbc <__assert_fail@plt+0x2aa30>
   3d4b8:	str	r4, [sp, #136]	; 0x88
   3d4bc:	ldrb	r3, [r4]
   3d4c0:	cmp	r3, #95	; 0x5f
   3d4c4:	bne	3d4d4 <__assert_fail@plt+0x2b148>
   3d4c8:	ldrb	r3, [r4, #1]
   3d4cc:	cmp	r3, #90	; 0x5a
   3d4d0:	beq	3df90 <__assert_fail@plt+0x2bc04>
   3d4d4:	ldr	r2, [sp, #32]
   3d4d8:	mov	r6, #0
   3d4dc:	str	r2, [sp, #148]	; 0x94
   3d4e0:	ldr	r2, [sp, #60]	; 0x3c
   3d4e4:	mov	r3, #10
   3d4e8:	mov	r0, #80	; 0x50
   3d4ec:	str	r6, [sp, #156]	; 0x9c
   3d4f0:	str	r6, [sp, #160]	; 0xa0
   3d4f4:	str	r2, [sp, #152]	; 0x98
   3d4f8:	str	r3, [sp, #172]	; 0xac
   3d4fc:	bl	11f3c <xmalloc@plt>
   3d500:	cmp	r5, r6
   3d504:	str	r6, [sp, #168]	; 0xa8
   3d508:	ldrne	r6, [sp, #136]	; 0x88
   3d50c:	addne	r5, r6, r5
   3d510:	str	r0, [sp, #164]	; 0xa4
   3d514:	beq	3d9e4 <__assert_fail@plt+0x2b658>
   3d518:	cmp	r6, r5
   3d51c:	ldrb	r3, [r5, #2]
   3d520:	beq	3dcc4 <__assert_fail@plt+0x2b938>
   3d524:	cmp	r3, #0
   3d528:	beq	3dcb4 <__assert_fail@plt+0x2b928>
   3d52c:	mov	r2, r5
   3d530:	add	r1, sp, #136	; 0x88
   3d534:	add	r0, sp, #148	; 0x94
   3d538:	bl	3b364 <__assert_fail@plt+0x28fd8>
   3d53c:	cmp	r0, #0
   3d540:	beq	3d7e0 <__assert_fail@plt+0x2b454>
   3d544:	ldr	r3, [sp, #136]	; 0x88
   3d548:	str	r3, [sp, #104]	; 0x68
   3d54c:	ldrb	r2, [r3]
   3d550:	cmp	r2, #0
   3d554:	beq	3d6c4 <__assert_fail@plt+0x2b338>
   3d558:	mov	r3, #0
   3d55c:	ldr	r6, [sp, #104]	; 0x68
   3d560:	mov	r7, r3
   3d564:	mov	r5, r3
   3d568:	str	r4, [sp, #124]	; 0x7c
   3d56c:	sub	r2, r2, #48	; 0x30
   3d570:	cmp	r2, #68	; 0x44
   3d574:	ldrls	pc, [pc, r2, lsl #2]
   3d578:	b	3dc90 <__assert_fail@plt+0x2b904>
   3d57c:	andeq	sp, r3, r8, lsr r7
   3d580:	andeq	sp, r3, r8, lsr r7
   3d584:	andeq	sp, r3, r8, lsr r7
   3d588:	andeq	sp, r3, r8, lsr r7
   3d58c:	andeq	sp, r3, r8, lsr r7
   3d590:	andeq	sp, r3, r8, lsr r7
   3d594:	andeq	sp, r3, r8, lsr r7
   3d598:	andeq	sp, r3, r8, lsr r7
   3d59c:	andeq	sp, r3, r8, lsr r7
   3d5a0:	andeq	sp, r3, r8, lsr r7
   3d5a4:	muleq	r3, r0, ip
   3d5a8:	muleq	r3, r0, ip
   3d5ac:	muleq	r3, r0, ip
   3d5b0:	muleq	r3, r0, ip
   3d5b4:	muleq	r3, r0, ip
   3d5b8:	muleq	r3, r0, ip
   3d5bc:	muleq	r3, r0, ip
   3d5c0:	muleq	r3, r0, ip
   3d5c4:	muleq	r3, r0, ip
   3d5c8:	muleq	r3, r0, r6
   3d5cc:	muleq	r3, r0, ip
   3d5d0:	muleq	r3, r0, ip
   3d5d4:	andeq	sp, r3, r8, ror #15
   3d5d8:	muleq	r3, r0, ip
   3d5dc:	muleq	r3, r0, ip
   3d5e0:	muleq	r3, r0, ip
   3d5e4:	muleq	r3, r0, ip
   3d5e8:	muleq	r3, r0, ip
   3d5ec:	muleq	r3, r0, ip
   3d5f0:	muleq	r3, r0, ip
   3d5f4:	muleq	r3, r0, ip
   3d5f8:	muleq	r3, r0, ip
   3d5fc:	muleq	r3, r0, ip
   3d600:	andeq	sp, r3, r4, lsr #15
   3d604:	muleq	r3, r0, ip
   3d608:	muleq	r3, r0, r6
   3d60c:	muleq	r3, r0, ip
   3d610:	muleq	r3, r0, ip
   3d614:	muleq	r3, r0, ip
   3d618:	muleq	r3, r0, ip
   3d61c:	muleq	r3, r0, ip
   3d620:	muleq	r3, r0, ip
   3d624:	muleq	r3, r0, ip
   3d628:	muleq	r3, r0, ip
   3d62c:	muleq	r3, r0, ip
   3d630:	muleq	r3, r0, ip
   3d634:	muleq	r3, r0, ip
   3d638:	andeq	sp, r3, r8, lsl r7
   3d63c:	muleq	r3, r0, ip
   3d640:	muleq	r3, r0, ip
   3d644:	muleq	r3, r0, ip
   3d648:	muleq	r3, r0, ip
   3d64c:	muleq	r3, r0, ip
   3d650:	muleq	r3, r0, ip
   3d654:	muleq	r3, r0, ip
   3d658:	muleq	r3, r0, ip
   3d65c:	muleq	r3, r0, ip
   3d660:	muleq	r3, r0, ip
   3d664:	muleq	r3, r0, ip
   3d668:	muleq	r3, r0, ip
   3d66c:	muleq	r3, r0, ip
   3d670:	muleq	r3, r0, ip
   3d674:	muleq	r3, r0, ip
   3d678:	muleq	r3, r0, ip
   3d67c:	muleq	r3, r0, ip
   3d680:	muleq	r3, r0, ip
   3d684:	muleq	r3, r0, ip
   3d688:	muleq	r3, r0, ip
   3d68c:	andeq	sp, r3, r8, lsl r8
   3d690:	cmp	r5, #0
   3d694:	moveq	r5, r6
   3d698:	add	r2, r6, #1
   3d69c:	str	r2, [sp, #136]	; 0x88
   3d6a0:	cmp	r7, #0
   3d6a4:	bne	3dee0 <__assert_fail@plt+0x2bb54>
   3d6a8:	ldr	r6, [sp, #136]	; 0x88
   3d6ac:	ldrb	r2, [r6]
   3d6b0:	cmp	r2, #0
   3d6b4:	bne	3d56c <__assert_fail@plt+0x2b1e0>
   3d6b8:	cmp	r3, #0
   3d6bc:	ldr	r4, [sp, #124]	; 0x7c
   3d6c0:	beq	3dfe8 <__assert_fail@plt+0x2bc5c>
   3d6c4:	ldr	r0, [sp, #164]	; 0xa4
   3d6c8:	bl	11e10 <free@plt>
   3d6cc:	ldr	r0, [sp, #156]	; 0x9c
   3d6d0:	mov	r3, #0
   3d6d4:	cmp	r0, r3
   3d6d8:	str	r3, [sp, #164]	; 0xa4
   3d6dc:	beq	3deec <__assert_fail@plt+0x2bb60>
   3d6e0:	ldr	r3, [sp, #160]	; 0xa0
   3d6e4:	mov	r5, r0
   3d6e8:	str	r3, [sp, #132]	; 0x84
   3d6ec:	cmp	r5, #0
   3d6f0:	beq	3cdf4 <__assert_fail@plt+0x2aa68>
   3d6f4:	ldr	r0, [sp, #132]	; 0x84
   3d6f8:	mov	r3, r5
   3d6fc:	str	r0, [sp]
   3d700:	ldr	r2, [sp, #112]	; 0x70
   3d704:	ldr	r1, [sp, #116]	; 0x74
   3d708:	ldr	r0, [sp, #32]
   3d70c:	bl	37b5c <__assert_fail@plt+0x257d0>
   3d710:	mov	r5, r0
   3d714:	b	3cdec <__assert_fail@plt+0x2aa60>
   3d718:	ldr	r0, [sp, #104]	; 0x68
   3d71c:	mov	r8, r9
   3d720:	bl	38764 <__assert_fail@plt+0x263d8>
   3d724:	ldr	r0, [sp, #164]	; 0xa4
   3d728:	cmp	r0, #0
   3d72c:	beq	3b5c4 <__assert_fail@plt+0x29238>
   3d730:	bl	11e10 <free@plt>
   3d734:	b	3b5c4 <__assert_fail@plt+0x29238>
   3d738:	add	r7, sp, #136	; 0x88
   3d73c:	mov	r0, r7
   3d740:	mov	r1, #0
   3d744:	bl	390b0 <__assert_fail@plt+0x26d24>
   3d748:	cmp	r5, #0
   3d74c:	moveq	r5, r6
   3d750:	cmp	r0, #0
   3d754:	beq	3d7e0 <__assert_fail@plt+0x2b454>
   3d758:	ldr	r2, [sp, #136]	; 0x88
   3d75c:	add	r4, sp, #148	; 0x94
   3d760:	sub	r2, r2, r5
   3d764:	mov	r1, r5
   3d768:	mov	r0, r4
   3d76c:	bl	387dc <__assert_fail@plt+0x26450>
   3d770:	cmp	r0, #0
   3d774:	beq	3d7e0 <__assert_fail@plt+0x2b454>
   3d778:	mov	r5, #0
   3d77c:	mov	r1, r7
   3d780:	mov	r0, r4
   3d784:	add	r3, sp, #160	; 0xa0
   3d788:	add	r2, sp, #156	; 0x9c
   3d78c:	bl	3b1a8 <__assert_fail@plt+0x28e1c>
   3d790:	cmp	r0, #0
   3d794:	beq	3d7e0 <__assert_fail@plt+0x2b454>
   3d798:	mov	r3, #1
   3d79c:	mov	r7, r3
   3d7a0:	b	3d6a8 <__assert_fail@plt+0x2b31c>
   3d7a4:	add	r7, sp, #136	; 0x88
   3d7a8:	add	r4, sp, #148	; 0x94
   3d7ac:	mov	r1, r7
   3d7b0:	mov	r0, r4
   3d7b4:	mov	r2, #0
   3d7b8:	bl	3ada8 <__assert_fail@plt+0x28a1c>
   3d7bc:	cmp	r0, #0
   3d7c0:	beq	3d7e0 <__assert_fail@plt+0x2b454>
   3d7c4:	ldr	r2, [sp, #136]	; 0x88
   3d7c8:	mov	r1, r6
   3d7cc:	sub	r2, r2, r6
   3d7d0:	mov	r0, r4
   3d7d4:	bl	387dc <__assert_fail@plt+0x26450>
   3d7d8:	cmp	r0, #0
   3d7dc:	bne	3d778 <__assert_fail@plt+0x2b3ec>
   3d7e0:	mov	r8, r9
   3d7e4:	b	3d724 <__assert_fail@plt+0x2b398>
   3d7e8:	add	r6, r6, #1
   3d7ec:	add	r3, sp, #160	; 0xa0
   3d7f0:	add	r2, sp, #156	; 0x9c
   3d7f4:	add	r1, sp, #136	; 0x88
   3d7f8:	add	r0, sp, #148	; 0x94
   3d7fc:	str	r6, [sp, #136]	; 0x88
   3d800:	bl	3b1a8 <__assert_fail@plt+0x28e1c>
   3d804:	cmp	r0, #0
   3d808:	beq	3d7e0 <__assert_fail@plt+0x2b454>
   3d80c:	mov	r5, #0
   3d810:	mov	r3, #1
   3d814:	b	3d6a0 <__assert_fail@plt+0x2b314>
   3d818:	add	r7, sp, #136	; 0x88
   3d81c:	add	r4, sp, #148	; 0x94
   3d820:	mov	r1, r7
   3d824:	mov	r0, r4
   3d828:	mov	r2, #0
   3d82c:	bl	3a774 <__assert_fail@plt+0x283e8>
   3d830:	cmp	r5, #0
   3d834:	moveq	r5, r6
   3d838:	cmp	r0, #0
   3d83c:	beq	3d7e0 <__assert_fail@plt+0x2b454>
   3d840:	ldr	r2, [sp, #136]	; 0x88
   3d844:	mov	r1, r5
   3d848:	sub	r2, r2, r5
   3d84c:	mov	r0, r4
   3d850:	bl	387dc <__assert_fail@plt+0x26450>
   3d854:	cmp	r0, #0
   3d858:	bne	3d778 <__assert_fail@plt+0x2b3ec>
   3d85c:	b	3d7e0 <__assert_fail@plt+0x2b454>
   3d860:	mov	r0, sl
   3d864:	mov	r2, #24
   3d868:	ldr	r1, [pc, #2296]	; 3e168 <__assert_fail@plt+0x2bddc>
   3d86c:	bl	12320 <strncmp@plt>
   3d870:	cmp	r0, #0
   3d874:	bne	3d890 <__assert_fail@plt+0x2b504>
   3d878:	mov	r2, #23
   3d87c:	ldr	r1, [pc, #2280]	; 3e16c <__assert_fail@plt+0x2bde0>
   3d880:	ldr	r0, [sp, #32]
   3d884:	bl	12320 <strncmp@plt>
   3d888:	cmp	r0, #0
   3d88c:	beq	3e0b8 <__assert_fail@plt+0x2bd2c>
   3d890:	ldr	r3, [sp, #40]	; 0x28
   3d894:	orrs	r3, r6, r3
   3d898:	bne	3bd54 <__assert_fail@plt+0x299c8>
   3d89c:	ldr	r0, [sp, #32]
   3d8a0:	mov	r2, #24
   3d8a4:	ldr	r1, [pc, #2244]	; 3e170 <__assert_fail@plt+0x2bde4>
   3d8a8:	bl	12320 <strncmp@plt>
   3d8ac:	cmp	r0, #0
   3d8b0:	bne	3bd54 <__assert_fail@plt+0x299c8>
   3d8b4:	mov	r2, #1
   3d8b8:	mov	r1, #8
   3d8bc:	mov	r0, r9
   3d8c0:	bl	3782c <__assert_fail@plt+0x254a0>
   3d8c4:	mov	r4, r0
   3d8c8:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3d8cc:	mov	r0, r9
   3d8d0:	bl	37820 <__assert_fail@plt+0x25494>
   3d8d4:	mov	r4, r0
   3d8d8:	b	3b8c0 <__assert_fail@plt+0x29534>
   3d8dc:	mov	r6, #1
   3d8e0:	b	3ceb4 <__assert_fail@plt+0x2ab28>
   3d8e4:	str	r3, [sp, #68]	; 0x44
   3d8e8:	add	r3, r5, #1
   3d8ec:	str	r3, [r8]
   3d8f0:	b	3ca4c <__assert_fail@plt+0x2a6c0>
   3d8f4:	ldr	r0, [sp, #32]
   3d8f8:	bl	11e10 <free@plt>
   3d8fc:	b	3b600 <__assert_fail@plt+0x29274>
   3d900:	ldrb	r5, [r9, #1]
   3d904:	cmp	r5, #95	; 0x5f
   3d908:	beq	3dd34 <__assert_fail@plt+0x2b9a8>
   3d90c:	mov	r2, #4
   3d910:	ldr	r1, [pc, #2140]	; 3e174 <__assert_fail@plt+0x2bde8>
   3d914:	mov	r0, r9
   3d918:	bl	12320 <strncmp@plt>
   3d91c:	cmp	r0, #0
   3d920:	moveq	r4, #1
   3d924:	moveq	r7, r4
   3d928:	beq	3d958 <__assert_fail@plt+0x2b5cc>
   3d92c:	ldr	r3, [sp, #20]
   3d930:	cmp	r3, #0
   3d934:	moveq	r7, r3
   3d938:	moveq	r4, r7
   3d93c:	beq	3d958 <__assert_fail@plt+0x2b5cc>
   3d940:	ldr	r1, [sp, #20]
   3d944:	ldr	r0, [sp, #28]
   3d948:	bl	11d98 <strcmp@plt>
   3d94c:	mov	r7, #0
   3d950:	clz	r4, r0
   3d954:	lsr	r4, r4, #5
   3d958:	cmp	r5, #46	; 0x2e
   3d95c:	cmpne	r5, #36	; 0x24
   3d960:	bne	3d970 <__assert_fail@plt+0x2b5e4>
   3d964:	ldrb	r3, [r9, #2]
   3d968:	cmp	r3, #95	; 0x5f
   3d96c:	beq	3da30 <__assert_fail@plt+0x2b6a4>
   3d970:	mov	r2, #4
   3d974:	ldr	r1, [pc, #2044]	; 3e178 <__assert_fail@plt+0x2bdec>
   3d978:	mov	r0, r9
   3d97c:	bl	12320 <strncmp@plt>
   3d980:	cmp	r0, #0
   3d984:	beq	3da30 <__assert_fail@plt+0x2b6a4>
   3d988:	cmp	r5, #90	; 0x5a
   3d98c:	bne	3d32c <__assert_fail@plt+0x2afa0>
   3d990:	str	r9, [sp, #136]	; 0x88
   3d994:	ldrb	r3, [r9]
   3d998:	cmp	r3, #95	; 0x5f
   3d99c:	bne	3d9ac <__assert_fail@plt+0x2b620>
   3d9a0:	ldrb	r3, [r9, #1]
   3d9a4:	cmp	r3, #90	; 0x5a
   3d9a8:	beq	3df8c <__assert_fail@plt+0x2bc00>
   3d9ac:	ldr	r2, [sp, #32]
   3d9b0:	mov	r4, #0
   3d9b4:	str	r2, [sp, #148]	; 0x94
   3d9b8:	ldr	r2, [sp, #60]	; 0x3c
   3d9bc:	mov	r3, #10
   3d9c0:	mov	r0, #80	; 0x50
   3d9c4:	str	r4, [sp, #156]	; 0x9c
   3d9c8:	str	r4, [sp, #160]	; 0xa0
   3d9cc:	str	r2, [sp, #152]	; 0x98
   3d9d0:	str	r3, [sp, #172]	; 0xac
   3d9d4:	bl	11f3c <xmalloc@plt>
   3d9d8:	str	r4, [sp, #168]	; 0xa8
   3d9dc:	mov	r4, r9
   3d9e0:	str	r0, [sp, #164]	; 0xa4
   3d9e4:	ldr	r6, [sp, #136]	; 0x88
   3d9e8:	mov	r3, r6
   3d9ec:	b	3da00 <__assert_fail@plt+0x2b674>
   3d9f0:	ldrb	r2, [r5, #1]
   3d9f4:	add	r3, r5, #1
   3d9f8:	cmp	r2, #95	; 0x5f
   3d9fc:	beq	3dbe8 <__assert_fail@plt+0x2b85c>
   3da00:	mov	r0, r3
   3da04:	mov	r1, #95	; 0x5f
   3da08:	bl	12098 <strchr@plt>
   3da0c:	subs	r5, r0, #0
   3da10:	bne	3d9f0 <__assert_fail@plt+0x2b664>
   3da14:	mov	r0, r6
   3da18:	mov	r8, r9
   3da1c:	bl	38764 <__assert_fail@plt+0x263d8>
   3da20:	b	3d724 <__assert_fail@plt+0x2b398>
   3da24:	mov	r2, #2
   3da28:	str	r2, [sp, #44]	; 0x2c
   3da2c:	b	3c70c <__assert_fail@plt+0x2a380>
   3da30:	cmp	r5, #90	; 0x5a
   3da34:	beq	3cdb8 <__assert_fail@plt+0x2aa2c>
   3da38:	mov	r3, #1
   3da3c:	mov	r4, r9
   3da40:	mov	r5, #0
   3da44:	b	3d4a8 <__assert_fail@plt+0x2b11c>
   3da48:	sub	r3, r4, #-1073741823	; 0xc0000001
   3da4c:	mov	r0, r9
   3da50:	ldr	r1, [r7, r3, lsl #2]
   3da54:	lsl	r5, r3, #2
   3da58:	bl	38258 <__assert_fail@plt+0x25ecc>
   3da5c:	cmp	r0, #2
   3da60:	subeq	r0, r4, #1
   3da64:	addne	r3, r5, #4
   3da68:	addne	r0, r7, r3
   3da6c:	movne	ip, #1
   3da70:	moveq	ip, #0
   3da74:	addeq	r0, r7, r0, lsl #2
   3da78:	b	3d20c <__assert_fail@plt+0x2ae80>
   3da7c:	clz	r3, r5
   3da80:	lsr	r3, r3, #5
   3da84:	tst	r7, r3
   3da88:	beq	3dc38 <__assert_fail@plt+0x2b8ac>
   3da8c:	cmp	r6, #0
   3da90:	bgt	3df4c <__assert_fail@plt+0x2bbc0>
   3da94:	blt	3e05c <__assert_fail@plt+0x2bcd0>
   3da98:	mvn	r3, r5
   3da9c:	cmp	r6, r3
   3daa0:	beq	3dab0 <__assert_fail@plt+0x2b724>
   3daa4:	add	r3, r5, #1
   3daa8:	cmp	r6, r3
   3daac:	bne	3bd7c <__assert_fail@plt+0x299f0>
   3dab0:	cmp	r5, #127	; 0x7f
   3dab4:	beq	3e104 <__assert_fail@plt+0x2bd78>
   3dab8:	ldr	r3, [pc, #1724]	; 3e17c <__assert_fail@plt+0x2bdf0>
   3dabc:	cmp	r5, r3
   3dac0:	beq	3e0ec <__assert_fail@plt+0x2bd60>
   3dac4:	cmn	r5, #-2147483647	; 0x80000001
   3dac8:	bne	3bd7c <__assert_fail@plt+0x299f0>
   3dacc:	mov	r2, #0
   3dad0:	mov	r1, #4
   3dad4:	mov	r0, r9
   3dad8:	bl	3782c <__assert_fail@plt+0x254a0>
   3dadc:	mov	r4, r0
   3dae0:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3dae4:	ldrb	r3, [r5, #2]
   3dae8:	cmp	r3, #36	; 0x24
   3daec:	bne	3c04c <__assert_fail@plt+0x29cc0>
   3daf0:	str	r4, [fp]
   3daf4:	ldrb	r3, [r1, #2]
   3daf8:	mov	r5, r4
   3dafc:	cmp	r3, #46	; 0x2e
   3db00:	cmpne	r3, #0
   3db04:	beq	3db18 <__assert_fail@plt+0x2b78c>
   3db08:	ldrb	r3, [r5, #1]!
   3db0c:	cmp	r3, #46	; 0x2e
   3db10:	cmpne	r3, #0
   3db14:	bne	3db08 <__assert_fail@plt+0x2b77c>
   3db18:	cmp	r3, #46	; 0x2e
   3db1c:	bne	3e0d0 <__assert_fail@plt+0x2bd44>
   3db20:	sub	r1, r5, r4
   3db24:	mov	r0, r4
   3db28:	bl	38838 <__assert_fail@plt+0x264ac>
   3db2c:	add	r5, r5, #1
   3db30:	str	r5, [fp]
   3db34:	str	r0, [sp, #28]
   3db38:	b	3c060 <__assert_fail@plt+0x29cd4>
   3db3c:	mov	r6, #0
   3db40:	b	3ceb4 <__assert_fail@plt+0x2ab28>
   3db44:	add	r3, r5, r3
   3db48:	cmp	r7, #111	; 0x6f
   3db4c:	add	r4, r3, r4
   3db50:	bne	3db64 <__assert_fail@plt+0x2b7d8>
   3db54:	ldr	r3, [sp, #28]
   3db58:	ldrb	r3, [r3, #1]
   3db5c:	cmp	r3, #112	; 0x70
   3db60:	beq	3df14 <__assert_fail@plt+0x2bb88>
   3db64:	mov	r0, r4
   3db68:	bl	11f3c <xmalloc@plt>
   3db6c:	mov	r3, #0
   3db70:	mov	r4, r0
   3db74:	strb	r3, [r4]
   3db78:	b	3d468 <__assert_fail@plt+0x2b0dc>
   3db7c:	ldr	r5, [pc, #1532]	; 3e180 <__assert_fail@plt+0x2bdf4>
   3db80:	b	3befc <__assert_fail@plt+0x29b70>
   3db84:	ldr	r0, [sp, #40]	; 0x28
   3db88:	bl	3828c <__assert_fail@plt+0x25f00>
   3db8c:	subs	r1, r0, #0
   3db90:	beq	3df2c <__assert_fail@plt+0x2bba0>
   3db94:	mov	r2, #0
   3db98:	ldr	r0, [pc, #1508]	; 3e184 <__assert_fail@plt+0x2bdf8>
   3db9c:	bl	11ee8 <concat@plt>
   3dba0:	mov	r5, r0
   3dba4:	b	3befc <__assert_fail@plt+0x29b70>
   3dba8:	str	r7, [sp]
   3dbac:	mov	r2, r5
   3dbb0:	mov	r0, r6
   3dbb4:	ldr	r1, [pc, #1484]	; 3e188 <__assert_fail@plt+0x2bdfc>
   3dbb8:	bl	1223c <sprintf@plt>
   3dbbc:	ldr	r3, [sp, #20]
   3dbc0:	str	r3, [sp, #104]	; 0x68
   3dbc4:	b	3d3b8 <__assert_fail@plt+0x2b02c>
   3dbc8:	add	r6, sp, #148	; 0x94
   3dbcc:	mov	r2, r5
   3dbd0:	mov	r0, r6
   3dbd4:	ldr	r1, [pc, #1456]	; 3e18c <__assert_fail@plt+0x2be00>
   3dbd8:	bl	1223c <sprintf@plt>
   3dbdc:	ldr	r3, [sp, #20]
   3dbe0:	str	r3, [sp, #104]	; 0x68
   3dbe4:	b	3d3b8 <__assert_fail@plt+0x2b02c>
   3dbe8:	cmp	r3, #0
   3dbec:	beq	3da14 <__assert_fail@plt+0x2b688>
   3dbf0:	ldr	r1, [pc, #1432]	; 3e190 <__assert_fail@plt+0x2be04>
   3dbf4:	bl	12380 <strspn@plt>
   3dbf8:	cmp	r0, #2
   3dbfc:	subhi	r0, r0, #2
   3dc00:	addhi	r5, r5, r0
   3dc04:	b	3d518 <__assert_fail@plt+0x2b18c>
   3dc08:	mov	r6, sl
   3dc0c:	b	3c2c4 <__assert_fail@plt+0x29f38>
   3dc10:	mov	r2, #5
   3dc14:	ldr	r1, [pc, #1400]	; 3e194 <__assert_fail@plt+0x2be08>
   3dc18:	mov	r0, #0
   3dc1c:	bl	11ea0 <dcgettext@plt>
   3dc20:	mov	r4, #0
   3dc24:	mov	r1, r0
   3dc28:	ldr	r0, [sp, #28]
   3dc2c:	bl	38720 <__assert_fail@plt+0x26394>
   3dc30:	ldr	r3, [r8]
   3dc34:	b	3ceec <__assert_fail@plt+0x2ab60>
   3dc38:	cmp	r6, #0
   3dc3c:	movle	r0, #0
   3dc40:	andgt	r0, r3, #1
   3dc44:	cmp	r0, #0
   3dc48:	beq	3e024 <__assert_fail@plt+0x2bc98>
   3dc4c:	mov	r1, r6
   3dc50:	mov	r0, r9
   3dc54:	bl	37848 <__assert_fail@plt+0x254bc>
   3dc58:	mov	r4, r0
   3dc5c:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3dc60:	ldr	r0, [sp, #28]
   3dc64:	bl	387a0 <__assert_fail@plt+0x26414>
   3dc68:	ldr	r0, [sp, #36]	; 0x24
   3dc6c:	bl	11e10 <free@plt>
   3dc70:	b	3b600 <__assert_fail@plt+0x29274>
   3dc74:	mov	r0, r4
   3dc78:	bl	11f3c <xmalloc@plt>
   3dc7c:	ldr	r1, [sp, #28]
   3dc80:	mov	r4, r0
   3dc84:	mov	r0, r4
   3dc88:	bl	11f6c <strcpy@plt>
   3dc8c:	b	3d468 <__assert_fail@plt+0x2b0dc>
   3dc90:	add	r3, sp, #160	; 0xa0
   3dc94:	add	r2, sp, #156	; 0x9c
   3dc98:	add	r1, sp, #136	; 0x88
   3dc9c:	add	r0, sp, #148	; 0x94
   3dca0:	bl	3b1a8 <__assert_fail@plt+0x28e1c>
   3dca4:	cmp	r0, #0
   3dca8:	beq	3d7e0 <__assert_fail@plt+0x2b454>
   3dcac:	mov	r3, #1
   3dcb0:	b	3d6a0 <__assert_fail@plt+0x2b314>
   3dcb4:	mov	r0, r6
   3dcb8:	mov	r8, r9
   3dcbc:	bl	38764 <__assert_fail@plt+0x263d8>
   3dcc0:	b	3d724 <__assert_fail@plt+0x2b398>
   3dcc4:	lsl	r2, r3, #1
   3dcc8:	cmp	r3, #116	; 0x74
   3dccc:	cmpne	r3, #81	; 0x51
   3dcd0:	ldrh	r2, [sl, r2]
   3dcd4:	moveq	r3, #1
   3dcd8:	movne	r3, #0
   3dcdc:	lsl	r2, r2, #29
   3dce0:	orrs	r3, r3, r2, lsr #31
   3dce4:	addne	r6, r6, #2
   3dce8:	moveq	r3, r5
   3dcec:	strne	r6, [sp, #136]	; 0x88
   3dcf0:	bne	3d544 <__assert_fail@plt+0x2b1b8>
   3dcf4:	mov	r0, r3
   3dcf8:	add	r3, r3, #1
   3dcfc:	ldrb	r2, [r0]
   3dd00:	cmp	r2, #95	; 0x5f
   3dd04:	beq	3dcf4 <__assert_fail@plt+0x2b968>
   3dd08:	ldr	r1, [pc, #1160]	; 3e198 <__assert_fail@plt+0x2be0c>
   3dd0c:	bl	11d5c <strstr@plt>
   3dd10:	subs	r2, r0, #0
   3dd14:	beq	3dd24 <__assert_fail@plt+0x2b998>
   3dd18:	ldrb	r3, [r2, #2]
   3dd1c:	cmp	r3, #0
   3dd20:	bne	3d530 <__assert_fail@plt+0x2b1a4>
   3dd24:	mov	r0, r5
   3dd28:	mov	r8, r9
   3dd2c:	bl	38764 <__assert_fail@plt+0x263d8>
   3dd30:	b	3d724 <__assert_fail@plt+0x2b398>
   3dd34:	ldrb	r3, [r9, #2]
   3dd38:	cmp	r3, #116	; 0x74
   3dd3c:	cmpne	r3, #81	; 0x51
   3dd40:	lsl	r3, r3, #1
   3dd44:	moveq	r2, #1
   3dd48:	ldrh	r3, [sl, r3]
   3dd4c:	movne	r2, #0
   3dd50:	lsl	r3, r3, #29
   3dd54:	orrs	r3, r2, r3, lsr #31
   3dd58:	beq	3d2e8 <__assert_fail@plt+0x2af5c>
   3dd5c:	mov	r2, #4
   3dd60:	ldr	r1, [pc, #1040]	; 3e178 <__assert_fail@plt+0x2bdec>
   3dd64:	mov	r0, r9
   3dd68:	bl	12320 <strncmp@plt>
   3dd6c:	cmp	r0, #0
   3dd70:	beq	3da38 <__assert_fail@plt+0x2b6ac>
   3dd74:	mov	r3, #0
   3dd78:	b	3da3c <__assert_fail@plt+0x2b6b0>
   3dd7c:	ldr	r7, [sp, #20]
   3dd80:	mov	r4, r7
   3dd84:	b	3cda0 <__assert_fail@plt+0x2aa14>
   3dd88:	mov	r4, #2
   3dd8c:	b	3ceec <__assert_fail@plt+0x2ab60>
   3dd90:	str	r4, [sp, #64]	; 0x40
   3dd94:	str	r4, [sp, #56]	; 0x38
   3dd98:	b	3c90c <__assert_fail@plt+0x2a580>
   3dd9c:	mov	r2, #5
   3dda0:	ldr	r1, [pc, #1012]	; 3e19c <__assert_fail@plt+0x2be10>
   3dda4:	bl	11ea0 <dcgettext@plt>
   3dda8:	mov	r1, r0
   3ddac:	mov	r0, r4
   3ddb0:	bl	38720 <__assert_fail@plt+0x26394>
   3ddb4:	mov	r1, #4
   3ddb8:	mov	r2, r7
   3ddbc:	mov	r0, r9
   3ddc0:	bl	3782c <__assert_fail@plt+0x254a0>
   3ddc4:	mov	r1, r0
   3ddc8:	b	3bd9c <__assert_fail@plt+0x29a10>
   3ddcc:	cmp	r5, #127	; 0x7f
   3ddd0:	beq	3e104 <__assert_fail@plt+0x2bd78>
   3ddd4:	cmp	r5, #0
   3ddd8:	blt	3e150 <__assert_fail@plt+0x2bdc4>
   3dddc:	cmp	r5, #255	; 0xff
   3dde0:	beq	3e138 <__assert_fail@plt+0x2bdac>
   3dde4:	ldr	r3, [pc, #948]	; 3e1a0 <__assert_fail@plt+0x2be14>
   3dde8:	cmp	r5, r3
   3ddec:	bne	3bd7c <__assert_fail@plt+0x299f0>
   3ddf0:	mov	r2, #1
   3ddf4:	mov	r1, #2
   3ddf8:	mov	r0, r9
   3ddfc:	bl	3782c <__assert_fail@plt+0x254a0>
   3de00:	mov	r4, r0
   3de04:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3de08:	add	r6, r2, #1
   3de0c:	str	r6, [r8]
   3de10:	ldr	r2, [sp, #220]	; 0xdc
   3de14:	add	r1, sp, #148	; 0x94
   3de18:	mov	r0, r8
   3de1c:	bl	3890c <__assert_fail@plt+0x26580>
   3de20:	cmp	r0, #0
   3de24:	beq	3b5f4 <__assert_fail@plt+0x29268>
   3de28:	ldr	r2, [sp, #148]	; 0x94
   3de2c:	ldr	r3, [sp, #140]	; 0x8c
   3de30:	cmp	r2, r3
   3de34:	bne	3de48 <__assert_fail@plt+0x2babc>
   3de38:	ldr	r2, [sp, #152]	; 0x98
   3de3c:	ldr	r3, [sp, #144]	; 0x90
   3de40:	cmp	r2, r3
   3de44:	beq	3dec4 <__assert_fail@plt+0x2bb38>
   3de48:	ldr	r3, [sp, #220]	; 0xdc
   3de4c:	mov	r2, #0
   3de50:	str	r6, [r8]
   3de54:	mov	r1, fp
   3de58:	strd	r2, [sp]
   3de5c:	mov	r0, r9
   3de60:	mov	r3, r8
   3de64:	bl	3b420 <__assert_fail@plt+0x29094>
   3de68:	ldr	r3, [r8]
   3de6c:	ldrb	r2, [r3]
   3de70:	cmp	r2, #0
   3de74:	cmpne	r2, #59	; 0x3b
   3de78:	beq	3de8c <__assert_fail@plt+0x2bb00>
   3de7c:	ldrb	r2, [r3, #1]!
   3de80:	cmp	r2, #59	; 0x3b
   3de84:	cmpne	r2, #0
   3de88:	bne	3de7c <__assert_fail@plt+0x2baf0>
   3de8c:	cmp	r2, #59	; 0x3b
   3de90:	addeq	r3, r3, #1
   3de94:	streq	r3, [r8]
   3de98:	beq	3ca94 <__assert_fail@plt+0x2a708>
   3de9c:	mov	r0, r5
   3dea0:	bl	387a0 <__assert_fail@plt+0x26414>
   3dea4:	b	3b5f4 <__assert_fail@plt+0x29268>
   3dea8:	add	r3, r2, #10
   3deac:	ldr	r0, [sp, #68]	; 0x44
   3deb0:	lsl	r1, r3, #2
   3deb4:	str	r3, [sp, #100]	; 0x64
   3deb8:	bl	11ed0 <xrealloc@plt>
   3debc:	str	r0, [sp, #68]	; 0x44
   3dec0:	b	3c9d8 <__assert_fail@plt+0x2a64c>
   3dec4:	mov	r3, #1
   3dec8:	mov	r0, #0
   3decc:	b	3cab4 <__assert_fail@plt+0x2a728>
   3ded0:	ldr	r0, [sp, #28]
   3ded4:	bl	387a0 <__assert_fail@plt+0x26414>
   3ded8:	mov	r4, #0
   3dedc:	b	3b600 <__assert_fail@plt+0x29274>
   3dee0:	add	r4, sp, #148	; 0x94
   3dee4:	add	r7, sp, #136	; 0x88
   3dee8:	b	3d77c <__assert_fail@plt+0x2b3f0>
   3deec:	ldr	r3, [pc, #688]	; 3e1a4 <__assert_fail@plt+0x2be18>
   3def0:	mov	r2, #5
   3def4:	ldr	r1, [pc, #684]	; 3e1a8 <__assert_fail@plt+0x2be1c>
   3def8:	ldr	r5, [r3]
   3defc:	bl	11ea0 <dcgettext@plt>
   3df00:	mov	r1, r0
   3df04:	mov	r0, r5
   3df08:	bl	120b0 <fprintf@plt>
   3df0c:	ldr	r0, [sp, #156]	; 0x9c
   3df10:	b	3d6e0 <__assert_fail@plt+0x2b354>
   3df14:	ldr	r3, [sp, #28]
   3df18:	ldrb	r3, [r3, #2]
   3df1c:	cmp	r3, #46	; 0x2e
   3df20:	cmpne	r3, #36	; 0x24
   3df24:	bne	3db64 <__assert_fail@plt+0x2b7d8>
   3df28:	b	3d428 <__assert_fail@plt+0x2b09c>
   3df2c:	mov	r2, #5
   3df30:	ldr	r1, [pc, #628]	; 3e1ac <__assert_fail@plt+0x2be20>
   3df34:	bl	11ea0 <dcgettext@plt>
   3df38:	mov	r1, r0
   3df3c:	mov	r0, r7
   3df40:	bl	38720 <__assert_fail@plt+0x26394>
   3df44:	ldr	r1, [pc, #612]	; 3e1b0 <__assert_fail@plt+0x2be24>
   3df48:	b	3db94 <__assert_fail@plt+0x2b808>
   3df4c:	mov	r1, r6
   3df50:	mov	r0, r9
   3df54:	bl	37858 <__assert_fail@plt+0x254cc>
   3df58:	mov	r4, r0
   3df5c:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3df60:	ldr	r3, [pc, #572]	; 3e1a4 <__assert_fail@plt+0x2be18>
   3df64:	mov	r2, #5
   3df68:	ldr	r1, [pc, #580]	; 3e1b4 <__assert_fail@plt+0x2be28>
   3df6c:	ldr	r4, [r3]
   3df70:	bl	11ea0 <dcgettext@plt>
   3df74:	ldr	r2, [sp, #28]
   3df78:	mov	r8, r9
   3df7c:	mov	r1, r0
   3df80:	mov	r0, r4
   3df84:	bl	120b0 <fprintf@plt>
   3df88:	b	3b5d0 <__assert_fail@plt+0x29244>
   3df8c:	mov	r4, r9
   3df90:	add	r2, sp, #148	; 0x94
   3df94:	mov	r1, #3
   3df98:	mov	r0, r4
   3df9c:	bl	42f20 <warn@@Base+0x1750>
   3dfa0:	cmp	r0, #0
   3dfa4:	beq	3e0a8 <__assert_fail@plt+0x2bd1c>
   3dfa8:	ldr	r3, [r0]
   3dfac:	cmp	r3, #3
   3dfb0:	bne	3e074 <__assert_fail@plt+0x2bce8>
   3dfb4:	ldr	r3, [r0, #12]
   3dfb8:	ldr	r2, [r3]
   3dfbc:	cmp	r2, #41	; 0x29
   3dfc0:	bne	3e074 <__assert_fail@plt+0x2bce8>
   3dfc4:	ldr	r2, [r3, #12]
   3dfc8:	ldr	r1, [sp, #60]	; 0x3c
   3dfcc:	add	r3, sp, #132	; 0x84
   3dfd0:	ldr	r0, [sp, #32]
   3dfd4:	bl	399cc <__assert_fail@plt+0x27640>
   3dfd8:	mov	r5, r0
   3dfdc:	ldr	r0, [sp, #148]	; 0x94
   3dfe0:	bl	11e10 <free@plt>
   3dfe4:	b	3d6ec <__assert_fail@plt+0x2b360>
   3dfe8:	add	r3, sp, #160	; 0xa0
   3dfec:	add	r2, sp, #156	; 0x9c
   3dff0:	add	r1, sp, #136	; 0x88
   3dff4:	add	r0, sp, #148	; 0x94
   3dff8:	bl	3b1a8 <__assert_fail@plt+0x28e1c>
   3dffc:	cmp	r0, #0
   3e000:	bne	3d6c4 <__assert_fail@plt+0x2b338>
   3e004:	b	3d7e0 <__assert_fail@plt+0x2b454>
   3e008:	mov	r2, r7
   3e00c:	mov	r1, #4
   3e010:	mov	r0, r9
   3e014:	bl	3782c <__assert_fail@plt+0x254a0>
   3e018:	subs	r7, r0, #0
   3e01c:	bne	3b9e4 <__assert_fail@plt+0x29658>
   3e020:	b	3b5fc <__assert_fail@plt+0x29270>
   3e024:	cmn	r5, #1
   3e028:	movne	r0, #0
   3e02c:	moveq	r0, #1
   3e030:	tst	r2, r0
   3e034:	bne	3d28c <__assert_fail@plt+0x2af00>
   3e038:	cmp	r6, #0
   3e03c:	beq	3ddd4 <__assert_fail@plt+0x2ba48>
   3e040:	ands	r3, r3, r6, lsr #31
   3e044:	beq	3da98 <__assert_fail@plt+0x2b70c>
   3e048:	cmn	r6, #8
   3e04c:	movne	r3, #0
   3e050:	moveq	r3, #1
   3e054:	orrs	r3, r1, r3
   3e058:	beq	3da98 <__assert_fail@plt+0x2b70c>
   3e05c:	rsb	r1, r6, #0
   3e060:	mov	r2, #1
   3e064:	mov	r0, r9
   3e068:	bl	3782c <__assert_fail@plt+0x254a0>
   3e06c:	mov	r4, r0
   3e070:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3e074:	ldr	r3, [pc, #296]	; 3e1a4 <__assert_fail@plt+0x2be18>
   3e078:	mov	r2, #5
   3e07c:	ldr	r1, [pc, #308]	; 3e1b8 <__assert_fail@plt+0x2be2c>
   3e080:	mov	r0, #0
   3e084:	ldr	r4, [r3]
   3e088:	bl	11ea0 <dcgettext@plt>
   3e08c:	mov	r8, r9
   3e090:	mov	r1, r0
   3e094:	mov	r0, r4
   3e098:	bl	120b0 <fprintf@plt>
   3e09c:	ldr	r0, [sp, #148]	; 0x94
   3e0a0:	bl	11e10 <free@plt>
   3e0a4:	b	3b5c4 <__assert_fail@plt+0x29238>
   3e0a8:	mov	r0, r4
   3e0ac:	mov	r8, r9
   3e0b0:	bl	38764 <__assert_fail@plt+0x263d8>
   3e0b4:	b	3b5c4 <__assert_fail@plt+0x29238>
   3e0b8:	ldr	r2, [sp, #28]
   3e0bc:	mov	r1, #8
   3e0c0:	mov	r0, r9
   3e0c4:	bl	3782c <__assert_fail@plt+0x254a0>
   3e0c8:	mov	r4, r0
   3e0cc:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3e0d0:	ldr	r0, [sp, #44]	; 0x2c
   3e0d4:	bl	387a0 <__assert_fail@plt+0x26414>
   3e0d8:	ldr	r3, [sp, #28]
   3e0dc:	mov	r8, r9
   3e0e0:	cmp	r3, #0
   3e0e4:	bne	3b5d0 <__assert_fail@plt+0x29244>
   3e0e8:	b	3b5d8 <__assert_fail@plt+0x2924c>
   3e0ec:	mov	r2, #0
   3e0f0:	mov	r1, #2
   3e0f4:	mov	r0, r9
   3e0f8:	bl	3782c <__assert_fail@plt+0x254a0>
   3e0fc:	mov	r4, r0
   3e100:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3e104:	mov	r2, #0
   3e108:	mov	r1, #1
   3e10c:	mov	r0, r9
   3e110:	bl	3782c <__assert_fail@plt+0x254a0>
   3e114:	mov	r4, r0
   3e118:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3e11c:	mov	r1, r4
   3e120:	ldr	r3, [sp, #36]	; 0x24
   3e124:	ldr	r2, [sp, #88]	; 0x58
   3e128:	mov	r0, r9
   3e12c:	bl	37860 <__assert_fail@plt+0x254d4>
   3e130:	mov	r4, r0
   3e134:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3e138:	mov	r2, #1
   3e13c:	mov	r1, r2
   3e140:	mov	r0, r9
   3e144:	bl	3782c <__assert_fail@plt+0x254a0>
   3e148:	mov	r4, r0
   3e14c:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3e150:	rsb	r1, r5, #0
   3e154:	mov	r2, #1
   3e158:	mov	r0, r9
   3e15c:	bl	3782c <__assert_fail@plt+0x254a0>
   3e160:	mov	r4, r0
   3e164:	b	3b8e8 <__assert_fail@plt+0x2955c>
   3e168:			; <UNDEFINED> instruction: 0x00051cb4
   3e16c:	ldrdeq	r1, [r5], -r0
   3e170:	andeq	r1, r5, r8, ror #25
   3e174:	muleq	r5, r8, lr
   3e178:	andeq	r1, r5, r4, lsl lr
   3e17c:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   3e180:	andeq	r1, r5, r4, lsl #25
   3e184:	andeq	r1, r5, r0, lsl #27
   3e188:	andeq	r1, r5, r4, lsr #28
   3e18c:	andeq	r1, r5, ip, lsl lr
   3e190:	andeq	r1, r5, ip, ror #28
   3e194:	andeq	r1, r5, r0, asr #26
   3e198:	andeq	r1, r5, r0, asr ip
   3e19c:	andeq	r1, r5, r4, lsl #26
   3e1a0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   3e1a4:	andeq	r7, r6, r8, lsl #3
   3e1a8:	andeq	r1, r5, r0, ror lr
   3e1ac:	andeq	r1, r5, ip, ror #26
   3e1b0:	andeq	r1, r5, r4, ror #24
   3e1b4:	andeq	r1, r5, r0, lsr lr
   3e1b8:	andeq	r1, r5, r8, asr #28
   3e1bc:	push	{r4, r5, r6, r7, r8, lr}
   3e1c0:	mov	r0, #220	; 0xdc
   3e1c4:	mov	r6, r3
   3e1c8:	mov	r8, r1
   3e1cc:	mov	r7, r2
   3e1d0:	ldr	r5, [sp, #24]
   3e1d4:	bl	11f3c <xmalloc@plt>
   3e1d8:	mov	r1, #0
   3e1dc:	mov	r2, #204	; 0xcc
   3e1e0:	mov	r4, r0
   3e1e4:	add	r0, r0, #16
   3e1e8:	bl	12110 <memset@plt>
   3e1ec:	mov	r2, #1
   3e1f0:	mov	r0, #4
   3e1f4:	str	r2, [r4, #68]	; 0x44
   3e1f8:	str	r8, [r4]
   3e1fc:	str	r7, [r4, #4]
   3e200:	str	r6, [r4, #8]
   3e204:	str	r5, [r4, #12]
   3e208:	bl	11f3c <xmalloc@plt>
   3e20c:	mvn	r1, #0
   3e210:	mov	r2, #0
   3e214:	str	r1, [r4, #56]	; 0x38
   3e218:	mov	r3, r0
   3e21c:	str	r0, [r4, #72]	; 0x48
   3e220:	str	r2, [r3]
   3e224:	mov	r0, r4
   3e228:	pop	{r4, r5, r6, r7, r8, pc}
   3e22c:	ldr	r3, [r1, #52]	; 0x34
   3e230:	push	{r4, r5, r6, lr}
   3e234:	cmp	r3, #0
   3e238:	mov	r4, r1
   3e23c:	mov	r5, r0
   3e240:	bne	3e290 <__assert_fail@plt+0x2bf04>
   3e244:	ldr	r4, [r4, #212]	; 0xd4
   3e248:	cmp	r4, #0
   3e24c:	bne	3e260 <__assert_fail@plt+0x2bed4>
   3e250:	b	3e288 <__assert_fail@plt+0x2befc>
   3e254:	ldr	r4, [r4]
   3e258:	cmp	r4, #0
   3e25c:	beq	3e288 <__assert_fail@plt+0x2befc>
   3e260:	ldmib	r4, {r1, r2}
   3e264:	mov	r0, r5
   3e268:	cmp	r2, #0
   3e26c:	moveq	r2, #7
   3e270:	bl	37f80 <__assert_fail@plt+0x25bf4>
   3e274:	cmp	r0, #0
   3e278:	str	r0, [r4, #12]
   3e27c:	bne	3e254 <__assert_fail@plt+0x2bec8>
   3e280:	mov	r0, #0
   3e284:	pop	{r4, r5, r6, pc}
   3e288:	mov	r0, #1
   3e28c:	pop	{r4, r5, r6, pc}
   3e290:	add	r1, r1, #64	; 0x40
   3e294:	bl	38a44 <__assert_fail@plt+0x266b8>
   3e298:	cmp	r0, #0
   3e29c:	beq	3e280 <__assert_fail@plt+0x2bef4>
   3e2a0:	ldr	r1, [r4, #56]	; 0x38
   3e2a4:	mov	r0, r5
   3e2a8:	bl	3729c <__assert_fail@plt+0x24f10>
   3e2ac:	cmp	r0, #0
   3e2b0:	beq	3e280 <__assert_fail@plt+0x2bef4>
   3e2b4:	mov	r2, #0
   3e2b8:	mvn	r3, #0
   3e2bc:	strd	r2, [r4, #52]	; 0x34
   3e2c0:	b	3e244 <__assert_fail@plt+0x2beb8>
   3e2c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e2c8:	sub	sp, sp, #28
   3e2cc:	ldr	r9, [r1, #16]
   3e2d0:	mov	r5, r1
   3e2d4:	cmp	r9, #0
   3e2d8:	mov	r8, r0
   3e2dc:	mov	r4, r2
   3e2e0:	mov	r6, r3
   3e2e4:	ldr	r7, [sp, #64]	; 0x40
   3e2e8:	beq	3e3b4 <__assert_fail@plt+0x2c028>
   3e2ec:	cmp	r2, #100	; 0x64
   3e2f0:	bne	3e35c <__assert_fail@plt+0x2bfd0>
   3e2f4:	ldr	r3, [sp, #68]	; 0x44
   3e2f8:	ldrb	r3, [r3]
   3e2fc:	cmp	r3, #0
   3e300:	beq	3e35c <__assert_fail@plt+0x2bfd0>
   3e304:	ldr	r2, [r1, #20]
   3e308:	cmp	r2, r7
   3e30c:	bne	3e35c <__assert_fail@plt+0x2bfd0>
   3e310:	ldr	r2, [r1, #52]	; 0x34
   3e314:	cmp	r2, #0
   3e318:	bne	3ea20 <__assert_fail@plt+0x2c694>
   3e31c:	cmp	r9, #0
   3e320:	beq	3f208 <__assert_fail@plt+0x2ce7c>
   3e324:	cmp	r3, #47	; 0x2f
   3e328:	beq	3f1f8 <__assert_fail@plt+0x2ce6c>
   3e32c:	mov	r2, #0
   3e330:	ldr	r1, [sp, #68]	; 0x44
   3e334:	mov	r0, r9
   3e338:	bl	11ee8 <concat@plt>
   3e33c:	str	r0, [r5, #16]
   3e340:	mov	r0, r9
   3e344:	bl	11e10 <free@plt>
   3e348:	mov	r4, #1
   3e34c:	str	r7, [r5, #20]
   3e350:	mov	r0, r4
   3e354:	add	sp, sp, #28
   3e358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e35c:	mov	r1, r9
   3e360:	mov	r0, r8
   3e364:	bl	36f28 <__assert_fail@plt+0x24b9c>
   3e368:	cmp	r0, #0
   3e36c:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3e370:	ldr	r3, [r5, #4]
   3e374:	ldr	r2, [r5, #16]
   3e378:	cmp	r3, #0
   3e37c:	mov	r3, #0
   3e380:	str	r3, [r5, #32]
   3e384:	str	r3, [r5, #36]	; 0x24
   3e388:	ldreq	r3, [r5, #20]
   3e38c:	str	r2, [r5, #40]	; 0x28
   3e390:	streq	r3, [r5, #24]
   3e394:	mov	r3, #1
   3e398:	str	r3, [r5, #68]	; 0x44
   3e39c:	mov	r0, #4
   3e3a0:	bl	11f3c <xmalloc@plt>
   3e3a4:	mov	r3, #0
   3e3a8:	str	r3, [r5, #16]
   3e3ac:	str	r0, [r5, #72]	; 0x48
   3e3b0:	str	r3, [r0]
   3e3b4:	ldr	r0, [sp, #68]	; 0x44
   3e3b8:	bl	12074 <strlen@plt>
   3e3bc:	cmp	r4, #98	; 0x62
   3e3c0:	mov	r9, r0
   3e3c4:	beq	3e4f4 <__assert_fail@plt+0x2c168>
   3e3c8:	ble	3e504 <__assert_fail@plt+0x2c178>
   3e3cc:	cmp	r4, #192	; 0xc0
   3e3d0:	beq	3e7a8 <__assert_fail@plt+0x2c41c>
   3e3d4:	ble	3e40c <__assert_fail@plt+0x2c080>
   3e3d8:	cmp	r4, #224	; 0xe0
   3e3dc:	beq	3e81c <__assert_fail@plt+0x2c490>
   3e3e0:	ble	3e478 <__assert_fail@plt+0x2c0ec>
   3e3e4:	cmp	r4, #226	; 0xe2
   3e3e8:	beq	3e670 <__assert_fail@plt+0x2c2e4>
   3e3ec:	cmp	r4, #228	; 0xe4
   3e3f0:	bne	3e590 <__assert_fail@plt+0x2c204>
   3e3f4:	mov	r0, r8
   3e3f8:	ldr	r1, [sp, #68]	; 0x44
   3e3fc:	bl	375b8 <__assert_fail@plt+0x2522c>
   3e400:	adds	r4, r0, #0
   3e404:	movne	r4, #1
   3e408:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3e40c:	cmp	r4, #130	; 0x82
   3e410:	beq	3e6c4 <__assert_fail@plt+0x2c338>
   3e414:	ble	3e588 <__assert_fail@plt+0x2c1fc>
   3e418:	cmp	r4, #132	; 0x84
   3e41c:	beq	3e688 <__assert_fail@plt+0x2c2fc>
   3e420:	cmp	r4, #162	; 0xa2
   3e424:	bne	3e590 <__assert_fail@plt+0x2c204>
   3e428:	ldr	r3, [r5, #44]	; 0x2c
   3e42c:	cmp	r3, #0
   3e430:	beq	3ea7c <__assert_fail@plt+0x2c6f0>
   3e434:	ldr	r1, [r3, #16]
   3e438:	ldr	r0, [r5, #68]	; 0x44
   3e43c:	ldr	r2, [r3, #4]
   3e440:	cmp	r1, r0
   3e444:	str	r2, [r5, #44]	; 0x2c
   3e448:	bcs	3ea7c <__assert_fail@plt+0x2c6f0>
   3e44c:	ldr	r0, [r5, #72]	; 0x48
   3e450:	cmp	r2, #0
   3e454:	ldr	r1, [r0, r1, lsl #2]
   3e458:	str	r1, [r3, #20]
   3e45c:	ldrne	r1, [r2, #8]
   3e460:	beq	3ea7c <__assert_fail@plt+0x2c6f0>
   3e464:	mov	r0, r8
   3e468:	bl	36fd4 <__assert_fail@plt+0x24c48>
   3e46c:	adds	r4, r0, #0
   3e470:	movne	r4, #1
   3e474:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3e478:	cmp	r4, #194	; 0xc2
   3e47c:	bne	3e590 <__assert_fail@plt+0x2c204>
   3e480:	ldr	r1, [r5, #68]	; 0x44
   3e484:	ldr	r0, [r5, #72]	; 0x48
   3e488:	add	r1, r1, #1
   3e48c:	str	r1, [r5, #68]	; 0x44
   3e490:	lsl	r1, r1, #2
   3e494:	bl	11ed0 <xrealloc@plt>
   3e498:	ldr	r4, [r5, #48]	; 0x30
   3e49c:	cmp	r4, #0
   3e4a0:	mov	r6, r0
   3e4a4:	str	r0, [r5, #72]	; 0x48
   3e4a8:	beq	3e4c4 <__assert_fail@plt+0x2c138>
   3e4ac:	ldr	r3, [r4, #12]
   3e4b0:	cmp	r7, r3
   3e4b4:	beq	3e634 <__assert_fail@plt+0x2c2a8>
   3e4b8:	ldr	r4, [r4]
   3e4bc:	cmp	r4, #0
   3e4c0:	bne	3e4ac <__assert_fail@plt+0x2c120>
   3e4c4:	mov	r2, #5
   3e4c8:	ldr	r1, [pc, #3552]	; 3f2b0 <__assert_fail@plt+0x2cf24>
   3e4cc:	mov	r0, #0
   3e4d0:	bl	11ea0 <dcgettext@plt>
   3e4d4:	mov	r1, r0
   3e4d8:	ldr	r0, [sp, #68]	; 0x44
   3e4dc:	bl	38720 <__assert_fail@plt+0x26394>
   3e4e0:	ldr	r3, [r5, #68]	; 0x44
   3e4e4:	ldr	r2, [r5, #72]	; 0x48
   3e4e8:	sub	r3, r3, #-1073741823	; 0xc0000001
   3e4ec:	mov	r1, #0
   3e4f0:	str	r1, [r2, r3, lsl #2]
   3e4f4:	mov	r4, #1
   3e4f8:	mov	r0, r4
   3e4fc:	add	sp, sp, #28
   3e500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e504:	cmp	r4, #36	; 0x24
   3e508:	beq	3e740 <__assert_fail@plt+0x2c3b4>
   3e50c:	ble	3e558 <__assert_fail@plt+0x2c1cc>
   3e510:	cmp	r4, #56	; 0x38
   3e514:	beq	3e4f4 <__assert_fail@plt+0x2c168>
   3e518:	ble	3e578 <__assert_fail@plt+0x2c1ec>
   3e51c:	cmp	r4, #60	; 0x3c
   3e520:	beq	3e6a0 <__assert_fail@plt+0x2c314>
   3e524:	cmp	r4, #68	; 0x44
   3e528:	bne	3e590 <__assert_fail@plt+0x2c204>
   3e52c:	ldr	r3, [r5, #52]	; 0x34
   3e530:	mov	r1, r6
   3e534:	cmp	r3, #0
   3e538:	mov	r0, r8
   3e53c:	ldrne	r3, [r5, #28]
   3e540:	addne	r7, r7, r3
   3e544:	mov	r2, r7
   3e548:	bl	37474 <__assert_fail@plt+0x250e8>
   3e54c:	adds	r4, r0, #0
   3e550:	movne	r4, #1
   3e554:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3e558:	cmp	r4, #12
   3e55c:	beq	3e4f4 <__assert_fail@plt+0x2c168>
   3e560:	blt	3e590 <__assert_fail@plt+0x2c204>
   3e564:	sub	r3, r4, #30
   3e568:	cmp	r3, #1
   3e56c:	bhi	3e590 <__assert_fail@plt+0x2c204>
   3e570:	mov	r4, #1
   3e574:	b	3e4f8 <__assert_fail@plt+0x2c16c>
   3e578:	cmp	r4, #42	; 0x2a
   3e57c:	bne	3e590 <__assert_fail@plt+0x2c204>
   3e580:	mov	r4, #1
   3e584:	b	3e4f8 <__assert_fail@plt+0x2c16c>
   3e588:	cmp	r4, #100	; 0x64
   3e58c:	beq	3ea04 <__assert_fail@plt+0x2c678>
   3e590:	mov	r1, #58	; 0x3a
   3e594:	ldr	r0, [sp, #68]	; 0x44
   3e598:	bl	12098 <strchr@plt>
   3e59c:	subs	ip, r0, #0
   3e5a0:	beq	3e4f4 <__assert_fail@plt+0x2c168>
   3e5a4:	ldrb	r3, [ip, #1]
   3e5a8:	and	r2, r3, #223	; 0xdf
   3e5ac:	cmp	r2, #70	; 0x46
   3e5b0:	bne	3e8ac <__assert_fail@plt+0x2c520>
   3e5b4:	ldr	r3, [r5, #52]	; 0x34
   3e5b8:	cmp	r3, #0
   3e5bc:	beq	3e600 <__assert_fail@plt+0x2c274>
   3e5c0:	ldr	r6, [r5, #56]	; 0x38
   3e5c4:	add	r1, r5, #64	; 0x40
   3e5c8:	cmn	r6, #1
   3e5cc:	cmpne	r6, r7
   3e5d0:	mov	r0, r8
   3e5d4:	movcs	r6, r7
   3e5d8:	bl	38a44 <__assert_fail@plt+0x266b8>
   3e5dc:	cmp	r0, #0
   3e5e0:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3e5e4:	mov	r1, r6
   3e5e8:	mov	r0, r8
   3e5ec:	bl	3729c <__assert_fail@plt+0x24f10>
   3e5f0:	cmp	r0, #0
   3e5f4:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3e5f8:	mvn	r3, #0
   3e5fc:	str	r3, [r5, #56]	; 0x38
   3e600:	ldr	r3, [r5, #4]
   3e604:	mov	r1, #58	; 0x3a
   3e608:	cmp	r3, #0
   3e60c:	mov	r3, #1
   3e610:	strne	r7, [r5, #28]
   3e614:	str	r3, [r5, #52]	; 0x34
   3e618:	ldr	r0, [sp, #68]	; 0x44
   3e61c:	bl	12098 <strchr@plt>
   3e620:	cmp	r0, #0
   3e624:	mov	ip, r0
   3e628:	str	r0, [sp, #16]
   3e62c:	bne	3e8cc <__assert_fail@plt+0x2c540>
   3e630:	b	3e4f4 <__assert_fail@plt+0x2c168>
   3e634:	ldr	r1, [sp, #68]	; 0x44
   3e638:	ldr	r0, [r4, #8]
   3e63c:	bl	11d98 <strcmp@plt>
   3e640:	cmp	r0, #0
   3e644:	bne	3e4b8 <__assert_fail@plt+0x2c12c>
   3e648:	ldr	r3, [r5, #68]	; 0x44
   3e64c:	ldr	r2, [r4, #20]
   3e650:	sub	r3, r3, #-1073741823	; 0xc0000001
   3e654:	mov	r4, #1
   3e658:	str	r2, [r6, r3, lsl #2]
   3e65c:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3e660:	ldr	r0, [sp, #68]	; 0x44
   3e664:	bl	387a0 <__assert_fail@plt+0x26414>
   3e668:	mov	r4, #0
   3e66c:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3e670:	mov	r0, r8
   3e674:	ldr	r1, [sp, #68]	; 0x44
   3e678:	bl	3757c <__assert_fail@plt+0x251f0>
   3e67c:	adds	r4, r0, #0
   3e680:	movne	r4, #1
   3e684:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3e688:	mov	r0, r8
   3e68c:	ldr	r1, [sp, #68]	; 0x44
   3e690:	bl	36fd4 <__assert_fail@plt+0x24c48>
   3e694:	adds	r4, r0, #0
   3e698:	movne	r4, #1
   3e69c:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3e6a0:	ldr	r1, [pc, #3084]	; 3f2b4 <__assert_fail@plt+0x2cf28>
   3e6a4:	ldr	r0, [sp, #68]	; 0x44
   3e6a8:	bl	11d98 <strcmp@plt>
   3e6ac:	cmp	r0, #0
   3e6b0:	bne	3e9e4 <__assert_fail@plt+0x2c658>
   3e6b4:	mov	r3, #2
   3e6b8:	str	r3, [r5, #32]
   3e6bc:	mov	r4, #1
   3e6c0:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3e6c4:	mov	r0, #24
   3e6c8:	bl	11f3c <xmalloc@plt>
   3e6cc:	ldr	r3, [r5, #68]	; 0x44
   3e6d0:	ldr	r2, [sp, #68]	; 0x44
   3e6d4:	add	r1, r3, #1
   3e6d8:	mov	r6, #0
   3e6dc:	str	r1, [r5, #68]	; 0x44
   3e6e0:	lsl	r1, r1, #2
   3e6e4:	mov	r4, r0
   3e6e8:	ldr	r0, [r5, #48]	; 0x30
   3e6ec:	str	r2, [r4, #8]
   3e6f0:	ldr	r2, [r5, #44]	; 0x2c
   3e6f4:	str	r0, [r4]
   3e6f8:	str	r2, [r4, #4]
   3e6fc:	str	r3, [r4, #16]
   3e700:	str	r4, [r5, #48]	; 0x30
   3e704:	str	r7, [r4, #12]
   3e708:	str	r4, [r5, #44]	; 0x2c
   3e70c:	str	r6, [r4, #20]
   3e710:	ldr	r0, [r5, #72]	; 0x48
   3e714:	bl	11ed0 <xrealloc@plt>
   3e718:	ldr	r2, [r4, #16]
   3e71c:	ldr	r1, [sp, #68]	; 0x44
   3e720:	mov	r3, r0
   3e724:	str	r0, [r5, #72]	; 0x48
   3e728:	mov	r0, r8
   3e72c:	str	r6, [r3, r2, lsl #2]
   3e730:	bl	36fd4 <__assert_fail@plt+0x24c48>
   3e734:	subs	r4, r0, r6
   3e738:	movne	r4, #1
   3e73c:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3e740:	ldr	r3, [sp, #68]	; 0x44
   3e744:	ldr	r2, [r5, #52]	; 0x34
   3e748:	ldrb	r3, [r3]
   3e74c:	cmp	r3, #0
   3e750:	bne	3e9b8 <__assert_fail@plt+0x2c62c>
   3e754:	cmp	r2, #0
   3e758:	beq	3e4f4 <__assert_fail@plt+0x2c168>
   3e75c:	ldr	r3, [r5, #4]
   3e760:	add	r1, r5, #64	; 0x40
   3e764:	cmp	r3, #0
   3e768:	mov	r0, r8
   3e76c:	ldrne	r3, [r5, #28]
   3e770:	addne	r7, r7, r3
   3e774:	bl	38a44 <__assert_fail@plt+0x266b8>
   3e778:	cmp	r0, #0
   3e77c:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3e780:	mov	r1, r7
   3e784:	mov	r0, r8
   3e788:	bl	3729c <__assert_fail@plt+0x24f10>
   3e78c:	cmp	r0, #0
   3e790:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3e794:	mov	r2, #0
   3e798:	mvn	r3, #0
   3e79c:	mov	r4, #1
   3e7a0:	strd	r2, [r5, #52]	; 0x34
   3e7a4:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3e7a8:	ldr	r3, [r5, #36]	; 0x24
   3e7ac:	sub	r6, r6, #1
   3e7b0:	cmp	r3, #0
   3e7b4:	clz	r6, r6
   3e7b8:	lsr	r6, r6, #5
   3e7bc:	moveq	r6, #0
   3e7c0:	cmp	r6, #0
   3e7c4:	bne	3e4f4 <__assert_fail@plt+0x2c168>
   3e7c8:	ldr	r4, [r5, #52]	; 0x34
   3e7cc:	cmp	r4, #0
   3e7d0:	beq	3ea8c <__assert_fail@plt+0x2c700>
   3e7d4:	ldr	r1, [r5, #24]
   3e7d8:	ldr	r3, [r5, #28]
   3e7dc:	mov	r0, r8
   3e7e0:	add	r1, r1, r3
   3e7e4:	add	r1, r1, r7
   3e7e8:	bl	37330 <__assert_fail@plt+0x24fa4>
   3e7ec:	cmp	r0, #0
   3e7f0:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3e7f4:	mov	r0, r8
   3e7f8:	add	r1, r5, #64	; 0x40
   3e7fc:	bl	38a44 <__assert_fail@plt+0x266b8>
   3e800:	cmp	r0, #0
   3e804:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3e808:	ldr	r3, [r5, #60]	; 0x3c
   3e80c:	mov	r4, #1
   3e810:	add	r3, r3, r4
   3e814:	str	r3, [r5, #60]	; 0x3c
   3e818:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3e81c:	ldr	r3, [r5, #36]	; 0x24
   3e820:	sub	r4, r6, #1
   3e824:	cmp	r3, #0
   3e828:	clz	r4, r4
   3e82c:	lsr	r4, r4, #5
   3e830:	moveq	r4, #0
   3e834:	cmp	r4, #0
   3e838:	bne	3e4f4 <__assert_fail@plt+0x2c168>
   3e83c:	add	r1, r5, #64	; 0x40
   3e840:	mov	r0, r8
   3e844:	bl	38a44 <__assert_fail@plt+0x266b8>
   3e848:	cmp	r0, #0
   3e84c:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3e850:	ldr	r1, [r5, #24]
   3e854:	ldr	r3, [r5, #28]
   3e858:	mov	r0, r8
   3e85c:	add	r1, r1, r3
   3e860:	add	r1, r1, r7
   3e864:	bl	373f4 <__assert_fail@plt+0x25068>
   3e868:	cmp	r0, #0
   3e86c:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3e870:	ldr	r3, [r5, #60]	; 0x3c
   3e874:	sub	r3, r3, #1
   3e878:	cmp	r3, #0
   3e87c:	str	r3, [r5, #60]	; 0x3c
   3e880:	bge	3e4f4 <__assert_fail@plt+0x2c168>
   3e884:	ldr	r3, [pc, #2604]	; 3f2b8 <__assert_fail@plt+0x2cf2c>
   3e888:	ldr	r1, [pc, #2604]	; 3f2bc <__assert_fail@plt+0x2cf30>
   3e88c:	mov	r2, #5
   3e890:	mov	r0, r4
   3e894:	ldr	r5, [r3]
   3e898:	bl	11ea0 <dcgettext@plt>
   3e89c:	mov	r1, r0
   3e8a0:	mov	r0, r5
   3e8a4:	bl	120b0 <fprintf@plt>
   3e8a8:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3e8ac:	str	ip, [sp, #16]
   3e8b0:	b	3e8d0 <__assert_fail@plt+0x2c544>
   3e8b4:	str	r2, [sp, #16]
   3e8b8:	bl	12098 <strchr@plt>
   3e8bc:	cmp	r0, #0
   3e8c0:	mov	ip, r0
   3e8c4:	str	r0, [sp, #16]
   3e8c8:	beq	3e660 <__assert_fail@plt+0x2c2d4>
   3e8cc:	ldrb	r3, [ip, #1]
   3e8d0:	add	r2, ip, #2
   3e8d4:	cmp	r3, #58	; 0x3a
   3e8d8:	mov	r1, r3
   3e8dc:	mov	r0, r2
   3e8e0:	beq	3e8b4 <__assert_fail@plt+0x2c528>
   3e8e4:	ldr	r3, [sp, #68]	; 0x44
   3e8e8:	ldrb	r3, [r3]
   3e8ec:	cmp	r3, #36	; 0x24
   3e8f0:	beq	3eaa4 <__assert_fail@plt+0x2c718>
   3e8f4:	ldr	r3, [sp, #68]	; 0x44
   3e8f8:	cmp	r3, ip
   3e8fc:	beq	3ea9c <__assert_fail@plt+0x2c710>
   3e900:	ldrb	r3, [r3]
   3e904:	cmp	r3, #32
   3e908:	bne	3e91c <__assert_fail@plt+0x2c590>
   3e90c:	ldr	r3, [sp, #68]	; 0x44
   3e910:	add	r3, r3, #1
   3e914:	cmp	ip, r3
   3e918:	beq	3ea9c <__assert_fail@plt+0x2c710>
   3e91c:	ldr	r3, [sp, #68]	; 0x44
   3e920:	sub	r1, ip, r3
   3e924:	mov	r0, r3
   3e928:	bl	38838 <__assert_fail@plt+0x264ac>
   3e92c:	ldr	ip, [sp, #16]
   3e930:	mov	r6, r0
   3e934:	add	r3, ip, #1
   3e938:	str	r3, [sp, #16]
   3e93c:	ldrb	r3, [ip, #1]
   3e940:	ldr	r2, [sp, #68]	; 0x44
   3e944:	ldr	r0, [pc, #2420]	; 3f2c0 <__assert_fail@plt+0x2cf34>
   3e948:	add	r9, r2, r9
   3e94c:	lsl	r2, r3, #1
   3e950:	cmp	r3, #45	; 0x2d
   3e954:	cmpne	r3, #40	; 0x28
   3e958:	ldrh	r2, [r0, r2]
   3e95c:	moveq	r1, #1
   3e960:	movne	r1, #0
   3e964:	lsl	r2, r2, #29
   3e968:	orrs	r2, r1, r2, lsr #31
   3e96c:	beq	3eb6c <__assert_fail@plt+0x2c7e0>
   3e970:	mov	r2, #0
   3e974:	add	r3, sp, #16
   3e978:	stm	sp, {r2, r9}
   3e97c:	mov	r1, r5
   3e980:	mov	r0, r8
   3e984:	bl	3b420 <__assert_fail@plt+0x29094>
   3e988:	subs	r3, r0, #0
   3e98c:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3e990:	mov	ip, #4
   3e994:	str	r7, [sp, #4]
   3e998:	mov	r2, r6
   3e99c:	mov	r1, r5
   3e9a0:	mov	r0, r8
   3e9a4:	str	ip, [sp]
   3e9a8:	bl	389b8 <__assert_fail@plt+0x2662c>
   3e9ac:	cmp	r0, #0
   3e9b0:	bne	3e4f4 <__assert_fail@plt+0x2c168>
   3e9b4:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3e9b8:	cmp	r2, #0
   3e9bc:	beq	3e590 <__assert_fail@plt+0x2c204>
   3e9c0:	ldr	r2, [r5, #56]	; 0x38
   3e9c4:	cmn	r2, #1
   3e9c8:	movne	r3, #0
   3e9cc:	moveq	r3, #1
   3e9d0:	cmp	r2, r7
   3e9d4:	orrhi	r3, r3, #1
   3e9d8:	cmp	r3, #0
   3e9dc:	strne	r7, [r5, #56]	; 0x38
   3e9e0:	b	3e590 <__assert_fail@plt+0x2c204>
   3e9e4:	ldr	r1, [pc, #2264]	; 3f2c4 <__assert_fail@plt+0x2cf38>
   3e9e8:	ldr	r0, [sp, #68]	; 0x44
   3e9ec:	bl	11d98 <strcmp@plt>
   3e9f0:	mov	r4, #1
   3e9f4:	cmp	r0, #0
   3e9f8:	streq	r4, [r5, #32]
   3e9fc:	strne	r4, [r5, #36]	; 0x24
   3ea00:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3ea04:	ldr	r2, [r5, #52]	; 0x34
   3ea08:	ldr	r3, [sp, #68]	; 0x44
   3ea0c:	cmp	r2, #0
   3ea10:	ldrb	r3, [r3]
   3ea14:	beq	3ea6c <__assert_fail@plt+0x2c6e0>
   3ea18:	cmp	r3, #0
   3ea1c:	beq	3ea84 <__assert_fail@plt+0x2c6f8>
   3ea20:	ldr	r4, [r5, #56]	; 0x38
   3ea24:	cmn	r4, #1
   3ea28:	cmpne	r4, r7
   3ea2c:	bcs	3ea84 <__assert_fail@plt+0x2c6f8>
   3ea30:	add	r1, r5, #64	; 0x40
   3ea34:	mov	r0, r8
   3ea38:	bl	38a44 <__assert_fail@plt+0x266b8>
   3ea3c:	cmp	r0, #0
   3ea40:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3ea44:	mov	r1, r4
   3ea48:	mov	r0, r8
   3ea4c:	bl	3729c <__assert_fail@plt+0x24f10>
   3ea50:	cmp	r0, #0
   3ea54:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3ea58:	mvn	r3, #0
   3ea5c:	mov	r2, #0
   3ea60:	strd	r2, [r5, #52]	; 0x34
   3ea64:	ldr	r3, [sp, #68]	; 0x44
   3ea68:	ldrb	r3, [r3]
   3ea6c:	cmp	r3, #0
   3ea70:	beq	3e4f4 <__assert_fail@plt+0x2c168>
   3ea74:	ldr	r9, [r5, #16]
   3ea78:	b	3e31c <__assert_fail@plt+0x2bf90>
   3ea7c:	ldr	r1, [r5, #40]	; 0x28
   3ea80:	b	3e464 <__assert_fail@plt+0x2c0d8>
   3ea84:	mov	r4, r7
   3ea88:	b	3ea30 <__assert_fail@plt+0x2c6a4>
   3ea8c:	ldr	r3, [pc, #2084]	; 3f2b8 <__assert_fail@plt+0x2cf2c>
   3ea90:	mov	r2, #5
   3ea94:	ldr	r1, [pc, #2092]	; 3f2c8 <__assert_fail@plt+0x2cf3c>
   3ea98:	b	3e890 <__assert_fail@plt+0x2c504>
   3ea9c:	mov	r6, #0
   3eaa0:	b	3e934 <__assert_fail@plt+0x2c5a8>
   3eaa4:	ldr	r3, [sp, #68]	; 0x44
   3eaa8:	ldrb	r3, [r3, #1]
   3eaac:	sub	r3, r3, #88	; 0x58
   3eab0:	cmp	r3, #30
   3eab4:	ldrls	pc, [pc, r3, lsl #2]
   3eab8:	b	3eb48 <__assert_fail@plt+0x2c7bc>
   3eabc:	strdeq	lr, [r3], -r4
   3eac0:	andeq	lr, r3, r8, asr #22
   3eac4:	andeq	lr, r3, r8, asr #22
   3eac8:	andeq	lr, r3, r8, asr #22
   3eacc:	andeq	lr, r3, r8, asr #22
   3ead0:	andeq	lr, r3, r8, asr #22
   3ead4:	andeq	lr, r3, r8, asr #22
   3ead8:	strdeq	lr, [r3], -r4
   3eadc:	andeq	lr, r3, r8, asr #22
   3eae0:	andeq	lr, r3, r8, asr #22
   3eae4:	andeq	lr, r3, r8, asr #22
   3eae8:	andeq	lr, r3, r8, asr #22
   3eaec:	andeq	lr, r3, r8, asr #22
   3eaf0:	andeq	lr, r3, r0, asr #22
   3eaf4:	andeq	lr, r3, r8, asr #22
   3eaf8:	andeq	lr, r3, r8, asr #22
   3eafc:	andeq	lr, r3, r8, asr #22
   3eb00:	andeq	lr, r3, r8, asr #22
   3eb04:	andeq	lr, r3, r8, asr #22
   3eb08:	andeq	lr, r3, r8, asr #22
   3eb0c:	andeq	lr, r3, r8, asr #22
   3eb10:	andeq	lr, r3, r8, asr #22
   3eb14:	andeq	lr, r3, r8, asr #22
   3eb18:	andeq	lr, r3, r8, asr #22
   3eb1c:	andeq	lr, r3, r8, asr #22
   3eb20:	andeq	lr, r3, r8, asr #22
   3eb24:	andeq	lr, r3, r8, asr #22
   3eb28:	andeq	lr, r3, r8, asr #22
   3eb2c:	andeq	lr, r3, r8, lsr fp
   3eb30:	andeq	lr, r3, r8, asr #22
   3eb34:	strdeq	lr, [r3], -r4
   3eb38:	ldr	r6, [pc, #1932]	; 3f2cc <__assert_fail@plt+0x2cf40>
   3eb3c:	b	3e934 <__assert_fail@plt+0x2c5a8>
   3eb40:	ldr	r6, [pc, #1928]	; 3f2d0 <__assert_fail@plt+0x2cf44>
   3eb44:	b	3e934 <__assert_fail@plt+0x2c5a8>
   3eb48:	mov	r2, #5
   3eb4c:	ldr	r1, [pc, #1920]	; 3f2d4 <__assert_fail@plt+0x2cf48>
   3eb50:	mov	r0, #0
   3eb54:	bl	11ea0 <dcgettext@plt>
   3eb58:	mov	r1, r0
   3eb5c:	ldr	r0, [sp, #68]	; 0x44
   3eb60:	bl	38720 <__assert_fail@plt+0x26394>
   3eb64:	ldr	ip, [sp, #16]
   3eb68:	b	3e8f4 <__assert_fail@plt+0x2c568>
   3eb6c:	cmp	r3, #0
   3eb70:	beq	3e660 <__assert_fail@plt+0x2c2d4>
   3eb74:	add	r3, ip, #2
   3eb78:	str	r3, [sp, #16]
   3eb7c:	ldrb	sl, [ip, #1]
   3eb80:	sub	r3, sl, #67	; 0x43
   3eb84:	cmp	r3, #51	; 0x33
   3eb88:	ldrls	pc, [pc, r3, lsl #2]
   3eb8c:	b	3e660 <__assert_fail@plt+0x2c2d4>
   3eb90:	andeq	lr, r3, r4, lsr lr
   3eb94:	andeq	lr, r3, r0, ror #12
   3eb98:	andeq	lr, r3, r0, ror #12
   3eb9c:	andeq	lr, r3, r8, lsr #27
   3eba0:	strdeq	lr, [r3], -r0
   3eba4:	andeq	lr, r3, r0, ror #12
   3eba8:	andeq	lr, r3, r0, ror #12
   3ebac:	andeq	lr, r3, r0, ror #12
   3ebb0:	andeq	lr, r3, r0, ror #12
   3ebb4:	andeq	lr, r3, r0, ror #12
   3ebb8:	andeq	lr, r3, r0, ror #12
   3ebbc:	andeq	lr, r3, r0, ror #12
   3ebc0:	andeq	lr, r3, r0, ror #12
   3ebc4:	andeq	lr, r3, r4, lsr #25
   3ebc8:	andeq	lr, r3, r0, ror #12
   3ebcc:	andeq	lr, r3, r0, ror #24
   3ebd0:	strdeq	pc, [r3], -r8
   3ebd4:	andeq	pc, r3, r0
   3ebd8:	andeq	lr, r3, r0, ror #12
   3ebdc:	ldrdeq	lr, [r3], -r8
   3ebe0:	andeq	lr, r3, r0, ror #12
   3ebe4:	andeq	lr, r3, r0, ror r9
   3ebe8:	muleq	r3, r0, pc	; <UNPREDICTABLE>
   3ebec:	andeq	lr, r3, r0, ror #12
   3ebf0:	andeq	lr, r3, r0, ror #12
   3ebf4:	andeq	lr, r3, r0, ror #12
   3ebf8:	andeq	lr, r3, r0, ror #12
   3ebfc:	andeq	lr, r3, r0, ror #12
   3ec00:	andeq	lr, r3, r0, ror #12
   3ec04:	andeq	lr, r3, r0, ror #12
   3ec08:			; <UNDEFINED> instruction: 0x0003f1b4
   3ec0c:	andeq	lr, r3, r0, ror #12
   3ec10:	andeq	pc, r3, r0, lsr #2
   3ec14:	andeq	lr, r3, r0, ror #12
   3ec18:	andeq	lr, r3, r0, ror #12
   3ec1c:	andeq	lr, r3, r8, lsr #27
   3ec20:	andeq	lr, r3, r0, ror #12
   3ec24:	andeq	lr, r3, r0, ror #12
   3ec28:	andeq	lr, r3, r0, ror #12
   3ec2c:	andeq	lr, r3, r0, ror #12
   3ec30:	andeq	lr, r3, r0, ror #12
   3ec34:	andeq	lr, r3, r0, ror r9
   3ec38:	andeq	lr, r3, r0, ror #12
   3ec3c:	andeq	lr, r3, r0, ror #12
   3ec40:	andeq	lr, r3, r0, ror #12
   3ec44:	strdeq	lr, [r3], -r8
   3ec48:	andeq	lr, r3, r0, ror #12
   3ec4c:	ldrdeq	lr, [r3], -r0
   3ec50:	andeq	lr, r3, r0, ror r9
   3ec54:	andeq	lr, r3, r4, ror lr
   3ec58:	andeq	lr, r3, r0, ror #12
   3ec5c:	andeq	lr, r3, ip, asr #30
   3ec60:	mov	r2, #0
   3ec64:	str	r2, [sp]
   3ec68:	str	r9, [sp, #4]
   3ec6c:	mov	r1, r5
   3ec70:	add	r3, sp, #16
   3ec74:	mov	r0, r8
   3ec78:	bl	3b420 <__assert_fail@plt+0x29094>
   3ec7c:	subs	r2, r0, #0
   3ec80:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3ec84:	str	r7, [sp]
   3ec88:	mov	r1, r6
   3ec8c:	mov	r0, r8
   3ec90:	mov	r3, #2
   3ec94:	bl	371bc <__assert_fail@plt+0x24e30>
   3ec98:	cmp	r0, #0
   3ec9c:	bne	3e4f4 <__assert_fail@plt+0x2c168>
   3eca0:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3eca4:	cmp	r4, #36	; 0x24
   3eca8:	moveq	r4, #0
   3ecac:	bne	3ec60 <__assert_fail@plt+0x2c8d4>
   3ecb0:	b	3ecc8 <__assert_fail@plt+0x2c93c>
   3ecb4:	stm	sp, {r4, r9}
   3ecb8:	str	lr, [sp, #16]
   3ecbc:	bl	3b420 <__assert_fail@plt+0x29094>
   3ecc0:	cmp	r0, #0
   3ecc4:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3ecc8:	ldr	ip, [sp, #16]
   3eccc:	add	r3, sp, #16
   3ecd0:	add	lr, ip, #1
   3ecd4:	ldrb	ip, [ip]
   3ecd8:	mov	r2, #0
   3ecdc:	mov	r1, r5
   3ece0:	cmp	ip, #59	; 0x3b
   3ece4:	mov	r0, r8
   3ece8:	beq	3ecb4 <__assert_fail@plt+0x2c928>
   3ecec:	b	3e4f4 <__assert_fail@plt+0x2c168>
   3ecf0:	mov	r2, #0
   3ecf4:	add	r3, sp, #16
   3ecf8:	stm	sp, {r2, r9}
   3ecfc:	mov	r1, r5
   3ed00:	mov	r0, r8
   3ed04:	bl	3b420 <__assert_fail@plt+0x29094>
   3ed08:	subs	r3, r0, #0
   3ed0c:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3ed10:	cmp	r6, #0
   3ed14:	beq	3eda0 <__assert_fail@plt+0x2ca14>
   3ed18:	ldr	r2, [r5]
   3ed1c:	ldr	r4, [r5, #12]
   3ed20:	ldr	r9, [r5, #8]
   3ed24:	ldr	r2, [r2, #4]
   3ed28:	cmp	r4, #0
   3ed2c:	ldrb	fp, [r2, #24]
   3ed30:	ble	3eda0 <__assert_fail@plt+0x2ca14>
   3ed34:	ldrb	r2, [r6]
   3ed38:	sub	r9, r9, #4
   3ed3c:	b	3ed48 <__assert_fail@plt+0x2c9bc>
   3ed40:	subs	r4, r4, #1
   3ed44:	beq	3eda0 <__assert_fail@plt+0x2ca14>
   3ed48:	ldr	sl, [r9, #4]!
   3ed4c:	cmp	fp, #0
   3ed50:	ldr	r0, [sl, #4]
   3ed54:	beq	3ed64 <__assert_fail@plt+0x2c9d8>
   3ed58:	ldrb	r1, [r0]
   3ed5c:	cmp	r1, fp
   3ed60:	addeq	r0, r0, #1
   3ed64:	ldrb	r1, [r0]
   3ed68:	cmp	r1, r2
   3ed6c:	bne	3ed40 <__assert_fail@plt+0x2c9b4>
   3ed70:	mov	r1, r6
   3ed74:	str	r2, [sp, #12]
   3ed78:	str	r3, [sp, #8]
   3ed7c:	bl	11d98 <strcmp@plt>
   3ed80:	ldr	r3, [sp, #8]
   3ed84:	ldr	r2, [sp, #12]
   3ed88:	cmp	r0, #0
   3ed8c:	bne	3ed40 <__assert_fail@plt+0x2c9b4>
   3ed90:	ldr	r1, [sl, #16]
   3ed94:	ldr	r2, [sl, #8]
   3ed98:	ldr	r7, [r1, #28]
   3ed9c:	add	r7, r7, r2
   3eda0:	mov	ip, #1
   3eda4:	b	3e994 <__assert_fail@plt+0x2c608>
   3eda8:	mov	r4, #0
   3edac:	mov	r2, r4
   3edb0:	str	r9, [sp, #4]
   3edb4:	add	r3, sp, #16
   3edb8:	str	r4, [sp]
   3edbc:	mov	r1, r5
   3edc0:	mov	r0, r8
   3edc4:	bl	3b420 <__assert_fail@plt+0x29094>
   3edc8:	subs	r2, r0, #0
   3edcc:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3edd0:	str	r7, [sp]
   3edd4:	sub	r3, sl, #70	; 0x46
   3edd8:	mov	r1, r6
   3eddc:	clz	r3, r3
   3ede0:	mov	r0, r8
   3ede4:	lsr	r3, r3, #5
   3ede8:	bl	370c4 <__assert_fail@plt+0x24d38>
   3edec:	cmp	r0, r4
   3edf0:	bne	3ee0c <__assert_fail@plt+0x2ca80>
   3edf4:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3edf8:	stm	sp, {r4, r9}
   3edfc:	str	lr, [sp, #16]
   3ee00:	bl	3b420 <__assert_fail@plt+0x29094>
   3ee04:	cmp	r0, #0
   3ee08:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3ee0c:	ldr	ip, [sp, #16]
   3ee10:	add	r3, sp, #16
   3ee14:	add	lr, ip, #1
   3ee18:	ldrb	ip, [ip]
   3ee1c:	mov	r2, #0
   3ee20:	mov	r1, r5
   3ee24:	cmp	ip, #59	; 0x3b
   3ee28:	mov	r0, r8
   3ee2c:	beq	3edf8 <__assert_fail@plt+0x2ca6c>
   3ee30:	b	3e4f4 <__assert_fail@plt+0x2c168>
   3ee34:	mov	r2, #0
   3ee38:	str	r2, [sp]
   3ee3c:	str	r9, [sp, #4]
   3ee40:	mov	r1, r5
   3ee44:	add	r3, sp, #16
   3ee48:	mov	r0, r8
   3ee4c:	bl	3b420 <__assert_fail@plt+0x29094>
   3ee50:	subs	r2, r0, #0
   3ee54:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3ee58:	mov	r3, r7
   3ee5c:	mov	r1, r6
   3ee60:	mov	r0, r8
   3ee64:	bl	376c4 <__assert_fail@plt+0x25338>
   3ee68:	cmp	r0, #0
   3ee6c:	bne	3e4f4 <__assert_fail@plt+0x2c168>
   3ee70:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3ee74:	add	r3, sp, #20
   3ee78:	str	r3, [sp]
   3ee7c:	mov	r2, r6
   3ee80:	str	r9, [sp, #4]
   3ee84:	mov	r1, r5
   3ee88:	add	r3, sp, #16
   3ee8c:	mov	r0, r8
   3ee90:	bl	3b420 <__assert_fail@plt+0x29094>
   3ee94:	subs	r2, r0, #0
   3ee98:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3ee9c:	cmp	r6, #0
   3eea0:	beq	3e4f4 <__assert_fail@plt+0x2c168>
   3eea4:	mov	r1, r6
   3eea8:	mov	r0, r8
   3eeac:	bl	37d64 <__assert_fail@plt+0x259d8>
   3eeb0:	cmp	r0, #0
   3eeb4:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3eeb8:	ldr	r3, [sp, #20]
   3eebc:	cmp	r3, #0
   3eec0:	beq	3e4f4 <__assert_fail@plt+0x2c168>
   3eec4:	str	r0, [r3]
   3eec8:	mov	r4, #1
   3eecc:	b	3e350 <__assert_fail@plt+0x2bfc4>
   3eed0:	mov	r2, #0
   3eed4:	add	r3, sp, #16
   3eed8:	stm	sp, {r2, r9}
   3eedc:	mov	r1, r5
   3eee0:	mov	r0, r8
   3eee4:	bl	3b420 <__assert_fail@plt+0x29094>
   3eee8:	subs	r3, r0, #0
   3eeec:	movne	ip, #5
   3eef0:	bne	3e994 <__assert_fail@plt+0x2c608>
   3eef4:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3eef8:	ldrb	r3, [ip, #2]
   3eefc:	cmp	r3, #70	; 0x46
   3ef00:	beq	3f260 <__assert_fail@plt+0x2ced4>
   3ef04:	mov	r2, #0
   3ef08:	str	r9, [sp, #4]
   3ef0c:	mov	r1, r5
   3ef10:	str	r2, [sp]
   3ef14:	add	r3, sp, #16
   3ef18:	mov	r0, r8
   3ef1c:	bl	3b420 <__assert_fail@plt+0x29094>
   3ef20:	cmp	r0, #0
   3ef24:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3ef28:	mov	r2, r0
   3ef2c:	str	r7, [sp]
   3ef30:	mov	r1, r6
   3ef34:	mov	r0, r8
   3ef38:	mov	r3, #1
   3ef3c:	bl	371bc <__assert_fail@plt+0x24e30>
   3ef40:	cmp	r0, #0
   3ef44:	bne	3e4f4 <__assert_fail@plt+0x2c168>
   3ef48:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3ef4c:	mov	r2, #0
   3ef50:	str	r2, [sp]
   3ef54:	str	r9, [sp, #4]
   3ef58:	mov	r1, r5
   3ef5c:	add	r3, sp, #16
   3ef60:	mov	r0, r8
   3ef64:	bl	3b420 <__assert_fail@plt+0x29094>
   3ef68:	subs	r2, r0, #0
   3ef6c:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3ef70:	str	r7, [sp]
   3ef74:	mov	r1, r6
   3ef78:	mov	r0, r8
   3ef7c:	mov	r3, #3
   3ef80:	bl	371bc <__assert_fail@plt+0x24e30>
   3ef84:	cmp	r0, #0
   3ef88:	bne	3e4f4 <__assert_fail@plt+0x2c168>
   3ef8c:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3ef90:	add	r3, ip, #3
   3ef94:	str	r3, [sp, #16]
   3ef98:	ldrb	r3, [ip, #3]
   3ef9c:	cmp	r3, #110	; 0x6e
   3efa0:	bne	3e660 <__assert_fail@plt+0x2c2d4>
   3efa4:	ldrb	r3, [ip, #4]
   3efa8:	add	ip, ip, #4
   3efac:	str	ip, [sp, #16]
   3efb0:	cmp	r3, #48	; 0x30
   3efb4:	bne	3e660 <__assert_fail@plt+0x2c2d4>
   3efb8:	b	3efc0 <__assert_fail@plt+0x2cc34>
   3efbc:	str	r2, [sp, #16]
   3efc0:	ldr	r3, [sp, #16]
   3efc4:	add	r2, r3, #1
   3efc8:	ldrb	r3, [r3]
   3efcc:	cmp	r3, #59	; 0x3b
   3efd0:	bne	3efbc <__assert_fail@plt+0x2cc30>
   3efd4:	b	3e4f4 <__assert_fail@plt+0x2c168>
   3efd8:	mov	r2, #0
   3efdc:	add	r3, sp, #16
   3efe0:	stm	sp, {r2, r9}
   3efe4:	mov	r1, r5
   3efe8:	mov	r0, r8
   3efec:	bl	3b420 <__assert_fail@plt+0x29094>
   3eff0:	subs	r3, r0, #0
   3eff4:	movne	ip, #3
   3eff8:	bne	3e994 <__assert_fail@plt+0x2c608>
   3effc:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3f000:	ldrb	r3, [ip, #2]
   3f004:	mov	r2, r6
   3f008:	mov	r1, r5
   3f00c:	cmp	r3, #116	; 0x74
   3f010:	add	r3, sp, #20
   3f014:	addeq	ip, ip, #3
   3f018:	stm	sp, {r3, r9}
   3f01c:	mov	r0, r8
   3f020:	add	r3, sp, #16
   3f024:	streq	ip, [sp, #16]
   3f028:	moveq	r4, #1
   3f02c:	movne	r4, #0
   3f030:	bl	3b420 <__assert_fail@plt+0x29094>
   3f034:	subs	r2, r0, #0
   3f038:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3f03c:	cmp	r6, #0
   3f040:	beq	3e4f4 <__assert_fail@plt+0x2c168>
   3f044:	mov	r1, r6
   3f048:	mov	r0, r8
   3f04c:	ldr	r7, [r5, #216]	; 0xd8
   3f050:	bl	37e4c <__assert_fail@plt+0x25ac0>
   3f054:	subs	r9, r0, #0
   3f058:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3f05c:	ldr	r3, [sp, #20]
   3f060:	cmp	r3, #0
   3f064:	strne	r9, [r3]
   3f068:	cmp	r7, #0
   3f06c:	bne	3f0c4 <__assert_fail@plt+0x2cd38>
   3f070:	ldr	r7, [r5, #212]	; 0xd4
   3f074:	add	r5, r5, #212	; 0xd4
   3f078:	cmp	r7, #0
   3f07c:	beq	3f0c4 <__assert_fail@plt+0x2cd38>
   3f080:	ldrb	sl, [r6]
   3f084:	b	3f098 <__assert_fail@plt+0x2cd0c>
   3f088:	mov	r5, r7
   3f08c:	ldr	r7, [r7]
   3f090:	cmp	r7, #0
   3f094:	beq	3f0c4 <__assert_fail@plt+0x2cd38>
   3f098:	ldr	r0, [r7, #4]
   3f09c:	ldrb	r3, [r0]
   3f0a0:	cmp	r3, sl
   3f0a4:	bne	3f088 <__assert_fail@plt+0x2ccfc>
   3f0a8:	mov	r1, r6
   3f0ac:	bl	11d98 <strcmp@plt>
   3f0b0:	cmp	r0, #0
   3f0b4:	bne	3f088 <__assert_fail@plt+0x2ccfc>
   3f0b8:	ldr	r3, [r7]
   3f0bc:	str	r9, [r7, #12]
   3f0c0:	str	r3, [r5]
   3f0c4:	cmp	r4, #0
   3f0c8:	beq	3e4f4 <__assert_fail@plt+0x2c168>
   3f0cc:	mov	r2, r9
   3f0d0:	mov	r1, r6
   3f0d4:	mov	r0, r8
   3f0d8:	bl	37d64 <__assert_fail@plt+0x259d8>
   3f0dc:	cmp	r0, #0
   3f0e0:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3f0e4:	ldr	r3, [sp, #20]
   3f0e8:	cmp	r3, #0
   3f0ec:	strne	r0, [r3]
   3f0f0:	bne	3e350 <__assert_fail@plt+0x2bfc4>
   3f0f4:	b	3e4f4 <__assert_fail@plt+0x2c168>
   3f0f8:	mov	r2, #0
   3f0fc:	add	r3, sp, #16
   3f100:	stm	sp, {r2, r9}
   3f104:	mov	r1, r5
   3f108:	mov	r0, r8
   3f10c:	bl	3b420 <__assert_fail@plt+0x29094>
   3f110:	subs	r3, r0, #0
   3f114:	movne	ip, #2
   3f118:	bne	3e994 <__assert_fail@plt+0x2c608>
   3f11c:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3f120:	ldrb	r3, [ip, #2]
   3f124:	cmp	r3, #61	; 0x3d
   3f128:	bne	3e660 <__assert_fail@plt+0x2c2d4>
   3f12c:	add	r0, ip, #4
   3f130:	str	r0, [sp, #16]
   3f134:	ldrb	r3, [ip, #3]
   3f138:	cmp	r3, #105	; 0x69
   3f13c:	beq	3f238 <__assert_fail@plt+0x2ceac>
   3f140:	cmp	r3, #114	; 0x72
   3f144:	beq	3f218 <__assert_fail@plt+0x2ce8c>
   3f148:	cmp	r3, #101	; 0x65
   3f14c:	bne	3e660 <__assert_fail@plt+0x2c2d4>
   3f150:	mov	r4, #0
   3f154:	mov	r1, r5
   3f158:	str	r9, [sp, #4]
   3f15c:	str	r4, [sp]
   3f160:	mov	r2, r4
   3f164:	add	r3, sp, #16
   3f168:	mov	r0, r8
   3f16c:	bl	3b420 <__assert_fail@plt+0x29094>
   3f170:	subs	r5, r0, #0
   3f174:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3f178:	ldr	r0, [sp, #16]
   3f17c:	ldrb	r3, [r0]
   3f180:	cmp	r3, #44	; 0x2c
   3f184:	bne	3e660 <__assert_fail@plt+0x2c2d4>
   3f188:	mov	r1, r4
   3f18c:	mov	r2, #10
   3f190:	bl	11da4 <strtol@plt>
   3f194:	mov	r2, r5
   3f198:	mov	r1, r6
   3f19c:	mov	r3, r0
   3f1a0:	mov	r0, r8
   3f1a4:	bl	3766c <__assert_fail@plt+0x252e0>
   3f1a8:	cmp	r0, r4
   3f1ac:	bne	3e4f4 <__assert_fail@plt+0x2c168>
   3f1b0:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3f1b4:	mov	r2, #0
   3f1b8:	str	r2, [sp]
   3f1bc:	str	r9, [sp, #4]
   3f1c0:	mov	r1, r5
   3f1c4:	add	r3, sp, #16
   3f1c8:	mov	r0, r8
   3f1cc:	bl	3b420 <__assert_fail@plt+0x29094>
   3f1d0:	subs	r2, r0, #0
   3f1d4:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3f1d8:	str	r7, [sp]
   3f1dc:	mov	r1, r6
   3f1e0:	mov	r0, r8
   3f1e4:	mov	r3, #4
   3f1e8:	bl	371bc <__assert_fail@plt+0x24e30>
   3f1ec:	cmp	r0, #0
   3f1f0:	bne	3e4f4 <__assert_fail@plt+0x2c168>
   3f1f4:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3f1f8:	ldr	r0, [sp, #68]	; 0x44
   3f1fc:	bl	11f60 <xstrdup@plt>
   3f200:	str	r0, [r5, #16]
   3f204:	b	3e340 <__assert_fail@plt+0x2bfb4>
   3f208:	ldr	r0, [sp, #68]	; 0x44
   3f20c:	bl	11f60 <xstrdup@plt>
   3f210:	str	r0, [r5, #16]
   3f214:	b	3e348 <__assert_fail@plt+0x2bfbc>
   3f218:	mov	r1, #0
   3f21c:	bl	1214c <strtod@plt>
   3f220:	mov	r1, r6
   3f224:	mov	r0, r8
   3f228:	bl	37630 <__assert_fail@plt+0x252a4>
   3f22c:	cmp	r0, #0
   3f230:	bne	3e4f4 <__assert_fail@plt+0x2c168>
   3f234:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3f238:	mov	r2, #10
   3f23c:	mov	r1, #0
   3f240:	bl	11da4 <strtol@plt>
   3f244:	mov	r1, r6
   3f248:	mov	r2, r0
   3f24c:	mov	r0, r8
   3f250:	bl	375f4 <__assert_fail@plt+0x25268>
   3f254:	cmp	r0, #0
   3f258:	bne	3e4f4 <__assert_fail@plt+0x2c168>
   3f25c:	b	3e668 <__assert_fail@plt+0x2c2dc>
   3f260:	mov	r4, #0
   3f264:	add	ip, ip, #3
   3f268:	mov	r1, r5
   3f26c:	str	r9, [sp, #4]
   3f270:	str	r4, [sp]
   3f274:	mov	r2, r4
   3f278:	add	r3, sp, #16
   3f27c:	mov	r0, r8
   3f280:	str	ip, [sp, #16]
   3f284:	bl	3b420 <__assert_fail@plt+0x29094>
   3f288:	subs	r1, r0, #0
   3f28c:	beq	3e668 <__assert_fail@plt+0x2c2dc>
   3f290:	mov	r3, r4
   3f294:	mov	r2, r4
   3f298:	mov	r0, r8
   3f29c:	bl	37998 <__assert_fail@plt+0x2560c>
   3f2a0:	mov	r1, r0
   3f2a4:	mov	r0, r8
   3f2a8:	bl	3795c <__assert_fail@plt+0x255d0>
   3f2ac:	b	3ef20 <__assert_fail@plt+0x2cb94>
   3f2b0:	andeq	r1, r5, r4, lsr #30
   3f2b4:	andeq	r1, r5, r4, lsl #30
   3f2b8:	andeq	r7, r6, r8, lsl #3
   3f2bc:	ldrdeq	r1, [r5], -r4
   3f2c0:	strdeq	r5, [r6], -r8
   3f2c4:	andeq	r1, r5, r4, lsl pc
   3f2c8:			; <UNDEFINED> instruction: 0x00051eb4
   3f2cc:	andeq	r1, r5, ip, lsr #29
   3f2d0:	andeq	r1, r5, r0, lsr #29
   3f2d4:	andeq	r1, r5, r8, ror #29
   3f2d8:	ldr	r3, [pc, #188]	; 3f39c <__assert_fail@plt+0x2d010>
   3f2dc:	push	{r4, r5, r6, r7, r8, lr}
   3f2e0:	cmp	r1, r3
   3f2e4:	mov	r7, r1
   3f2e8:	bgt	3f384 <__assert_fail@plt+0x2cff8>
   3f2ec:	cmp	r1, #15
   3f2f0:	mov	r6, r0
   3f2f4:	movgt	r5, r1
   3f2f8:	bgt	3f310 <__assert_fail@plt+0x2cf84>
   3f2fc:	b	3f34c <__assert_fail@plt+0x2cfc0>
   3f300:	sub	r5, r5, #16
   3f304:	cmp	r5, #15
   3f308:	mov	r6, r4
   3f30c:	ble	3f348 <__assert_fail@plt+0x2cfbc>
   3f310:	ldr	r4, [r6]
   3f314:	cmp	r4, #0
   3f318:	bne	3f300 <__assert_fail@plt+0x2cf74>
   3f31c:	mov	r0, #68	; 0x44
   3f320:	bl	11f3c <xmalloc@plt>
   3f324:	mov	r1, r4
   3f328:	mov	r2, #68	; 0x44
   3f32c:	sub	r5, r5, #16
   3f330:	str	r0, [r6]
   3f334:	bl	12110 <memset@plt>
   3f338:	ldr	r4, [r6]
   3f33c:	cmp	r5, #15
   3f340:	mov	r6, r4
   3f344:	bgt	3f310 <__assert_fail@plt+0x2cf84>
   3f348:	and	r7, r7, #15
   3f34c:	ldr	r4, [r6]
   3f350:	cmp	r4, #0
   3f354:	beq	3f364 <__assert_fail@plt+0x2cfd8>
   3f358:	add	r0, r4, #4
   3f35c:	add	r0, r0, r7, lsl #2
   3f360:	pop	{r4, r5, r6, r7, r8, pc}
   3f364:	mov	r0, #68	; 0x44
   3f368:	bl	11f3c <xmalloc@plt>
   3f36c:	mov	r1, r4
   3f370:	mov	r2, #68	; 0x44
   3f374:	str	r0, [r6]
   3f378:	bl	12110 <memset@plt>
   3f37c:	ldr	r4, [r6]
   3f380:	b	3f358 <__assert_fail@plt+0x2cfcc>
   3f384:	ldr	r1, [pc, #20]	; 3f3a0 <__assert_fail@plt+0x2d014>
   3f388:	mov	r2, #5
   3f38c:	mov	r0, #0
   3f390:	bl	11ea0 <dcgettext@plt>
   3f394:	mov	r1, r7
   3f398:	bl	406a0 <__assert_fail@plt+0x2e314>
   3f39c:	andeq	r3, r0, pc, lsl #29
   3f3a0:	andeq	r1, r5, r8, lsr pc
   3f3a4:	cmp	r3, #10
   3f3a8:	push	{r4, r5, r6, lr}
   3f3ac:	mov	r4, r0
   3f3b0:	sub	sp, sp, #8
   3f3b4:	mov	r5, r2
   3f3b8:	beq	3f50c <__assert_fail@plt+0x2d180>
   3f3bc:	bhi	3f418 <__assert_fail@plt+0x2d08c>
   3f3c0:	cmp	r3, #3
   3f3c4:	beq	3f540 <__assert_fail@plt+0x2d1b4>
   3f3c8:	bls	3f45c <__assert_fail@plt+0x2d0d0>
   3f3cc:	cmp	r3, #4
   3f3d0:	beq	3f4f4 <__assert_fail@plt+0x2d168>
   3f3d4:	cmp	r3, #9
   3f3d8:	bne	3f44c <__assert_fail@plt+0x2d0c0>
   3f3dc:	ldr	r3, [r1, #16]
   3f3e0:	ldr	r0, [r1, #8]
   3f3e4:	ldr	r1, [r1, #4]
   3f3e8:	ldr	r2, [r3, #28]
   3f3ec:	mov	r3, #1
   3f3f0:	add	r2, r2, r0
   3f3f4:	str	r2, [sp]
   3f3f8:	ldr	r0, [sp, #24]
   3f3fc:	ldr	r2, [sp, #28]
   3f400:	bl	371bc <__assert_fail@plt+0x24e30>
   3f404:	adds	r3, r0, #0
   3f408:	movne	r3, #1
   3f40c:	mov	r0, r3
   3f410:	add	sp, sp, #8
   3f414:	pop	{r4, r5, r6, pc}
   3f418:	cmp	r3, #15
   3f41c:	beq	3f50c <__assert_fail@plt+0x2d180>
   3f420:	bls	3f4c0 <__assert_fail@plt+0x2d134>
   3f424:	cmp	r3, #17
   3f428:	bne	3f4a0 <__assert_fail@plt+0x2d114>
   3f42c:	ldr	r3, [r1, #16]
   3f430:	ldr	r0, [r1, #8]
   3f434:	ldr	r1, [r1, #4]
   3f438:	ldr	r2, [r3, #28]
   3f43c:	mov	r3, #2
   3f440:	b	3f3f0 <__assert_fail@plt+0x2d064>
   3f444:	cmp	r3, #2
   3f448:	beq	3f4a8 <__assert_fail@plt+0x2d11c>
   3f44c:	mov	r3, #1
   3f450:	mov	r0, r3
   3f454:	add	sp, sp, #8
   3f458:	pop	{r4, r5, r6, pc}
   3f45c:	cmp	r3, #1
   3f460:	bne	3f444 <__assert_fail@plt+0x2d0b8>
   3f464:	ldr	r3, [r1, #16]
   3f468:	ldr	r0, [r1, #8]
   3f46c:	ldr	r1, [r1, #4]
   3f470:	ldr	r2, [r3, #28]
   3f474:	mov	r3, #4
   3f478:	add	r2, r2, r0
   3f47c:	str	r2, [sp]
   3f480:	ldr	r2, [sp, #28]
   3f484:	ldr	r0, [sp, #24]
   3f488:	bl	37700 <__assert_fail@plt+0x25374>
   3f48c:	adds	r3, r0, #0
   3f490:	movne	r3, #1
   3f494:	mov	r0, r3
   3f498:	add	sp, sp, #8
   3f49c:	pop	{r4, r5, r6, pc}
   3f4a0:	cmp	r3, #127	; 0x7f
   3f4a4:	bne	3f44c <__assert_fail@plt+0x2d0c0>
   3f4a8:	ldr	r3, [r1, #16]
   3f4ac:	ldr	r0, [r1, #8]
   3f4b0:	ldr	r1, [r1, #4]
   3f4b4:	ldr	r2, [r3, #28]
   3f4b8:	mov	r3, #1
   3f4bc:	b	3f478 <__assert_fail@plt+0x2d0ec>
   3f4c0:	cmp	r3, #12
   3f4c4:	beq	3f50c <__assert_fail@plt+0x2d180>
   3f4c8:	cmp	r3, #13
   3f4cc:	bne	3f44c <__assert_fail@plt+0x2d0c0>
   3f4d0:	ldr	r1, [r1, #4]
   3f4d4:	ldr	r2, [sp, #28]
   3f4d8:	ldr	r0, [sp, #24]
   3f4dc:	bl	37d64 <__assert_fail@plt+0x259d8>
   3f4e0:	adds	r3, r0, #0
   3f4e4:	movne	r3, #1
   3f4e8:	mov	r0, r3
   3f4ec:	add	sp, sp, #8
   3f4f0:	pop	{r4, r5, r6, pc}
   3f4f4:	ldr	r3, [r1, #16]
   3f4f8:	ldr	r0, [r1, #8]
   3f4fc:	ldr	r1, [r1, #4]
   3f500:	ldr	r2, [r3, #28]
   3f504:	mov	r3, #5
   3f508:	b	3f478 <__assert_fail@plt+0x2d0ec>
   3f50c:	ldr	r1, [r1, #4]
   3f510:	ldr	r2, [sp, #28]
   3f514:	ldr	r0, [sp, #24]
   3f518:	bl	37e4c <__assert_fail@plt+0x25ac0>
   3f51c:	subs	r6, r0, #0
   3f520:	moveq	r3, r6
   3f524:	beq	3f450 <__assert_fail@plt+0x2d0c4>
   3f528:	mov	r1, r5
   3f52c:	mov	r0, r4
   3f530:	bl	3f2d8 <__assert_fail@plt+0x2cf4c>
   3f534:	mov	r3, #1
   3f538:	str	r6, [r0]
   3f53c:	b	3f450 <__assert_fail@plt+0x2d0c4>
   3f540:	ldr	r3, [r1, #16]
   3f544:	ldr	r2, [r1, #8]
   3f548:	ldr	r0, [sp, #32]
   3f54c:	ldr	r3, [r3, #28]
   3f550:	cmp	r0, #0
   3f554:	add	r3, r3, r2
   3f558:	ldr	r1, [r1, #4]
   3f55c:	str	r3, [sp]
   3f560:	movne	r3, #3
   3f564:	moveq	r3, #2
   3f568:	b	3f480 <__assert_fail@plt+0x2d0f4>
   3f56c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f570:	sub	sp, sp, #68	; 0x44
   3f574:	ldr	lr, [r0, #160]	; 0xa0
   3f578:	ldr	r4, [sp, #104]	; 0x68
   3f57c:	mov	r8, r0
   3f580:	ldr	r7, [lr, #36]	; 0x24
   3f584:	mov	r9, r1
   3f588:	mov	fp, r2
   3f58c:	bics	ip, r4, r7
   3f590:	str	r3, [sp, #20]
   3f594:	ldr	ip, [sp, #108]	; 0x6c
   3f598:	beq	3f6b0 <__assert_fail@plt+0x2d324>
   3f59c:	ldr	r6, [lr, #48]	; 0x30
   3f5a0:	ldr	r5, [lr, #44]	; 0x2c
   3f5a4:	ldr	sl, [lr, #40]	; 0x28
   3f5a8:	asr	r6, r4, r6
   3f5ac:	mov	lr, #1
   3f5b0:	and	r5, r5, r4
   3f5b4:	cmp	r5, lr, lsl sl
   3f5b8:	eor	lr, r4, r6
   3f5bc:	and	lr, lr, r7
   3f5c0:	eor	lr, lr, r6
   3f5c4:	beq	3f754 <__assert_fail@plt+0x2d3c8>
   3f5c8:	mov	r6, #2
   3f5cc:	cmp	r5, r6, lsl sl
   3f5d0:	beq	3f7d8 <__assert_fail@plt+0x2d44c>
   3f5d4:	mov	r3, #3
   3f5d8:	cmp	r5, r3, lsl sl
   3f5dc:	bne	3f7b0 <__assert_fail@plt+0x2d424>
   3f5e0:	cmp	ip, #0
   3f5e4:	mvneq	r4, #0
   3f5e8:	beq	3f624 <__assert_fail@plt+0x2d298>
   3f5ec:	ldrh	r4, [ip, #8]
   3f5f0:	add	r3, ip, #8
   3f5f4:	cmp	r4, #0
   3f5f8:	beq	3f618 <__assert_fail@plt+0x2d28c>
   3f5fc:	mov	r2, #0
   3f600:	ldrh	r1, [r3, #2]
   3f604:	add	r2, r2, #1
   3f608:	cmp	r1, #0
   3f60c:	cmpne	r2, #3
   3f610:	strh	r1, [r3], #2
   3f614:	bne	3f600 <__assert_fail@plt+0x2d274>
   3f618:	sub	r4, r4, #1
   3f61c:	mov	r2, #0
   3f620:	strh	r2, [r3]
   3f624:	ldr	r3, [sp, #116]	; 0x74
   3f628:	mov	r2, #0
   3f62c:	str	r3, [sp, #12]
   3f630:	str	r2, [sp, #8]
   3f634:	str	ip, [sp, #4]
   3f638:	mov	r2, fp
   3f63c:	str	lr, [sp]
   3f640:	ldr	r3, [sp, #20]
   3f644:	mov	r1, r9
   3f648:	mov	r0, r8
   3f64c:	bl	3f56c <__assert_fail@plt+0x2d1e0>
   3f650:	ldr	r2, [fp, #20]
   3f654:	cmp	r2, #0
   3f658:	mov	r5, r0
   3f65c:	beq	3f688 <__assert_fail@plt+0x2d2fc>
   3f660:	mov	r3, #0
   3f664:	mov	r1, r5
   3f668:	str	r4, [sp]
   3f66c:	str	r3, [sp, #4]
   3f670:	ldr	r0, [sp, #116]	; 0x74
   3f674:	bl	37a54 <__assert_fail@plt+0x256c8>
   3f678:	mov	r5, r0
   3f67c:	mov	r0, r5
   3f680:	add	sp, sp, #68	; 0x44
   3f684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f688:	mov	r1, #4
   3f68c:	ldr	r0, [sp, #116]	; 0x74
   3f690:	bl	3782c <__assert_fail@plt+0x254a0>
   3f694:	ldr	r1, [pc, #1228]	; 3fb68 <__assert_fail@plt+0x2d7dc>
   3f698:	mov	r2, r0
   3f69c:	ldr	r0, [sp, #116]	; 0x74
   3f6a0:	bl	37d64 <__assert_fail@plt+0x259d8>
   3f6a4:	mov	r2, r0
   3f6a8:	str	r0, [fp, #20]
   3f6ac:	b	3f660 <__assert_fail@plt+0x2d2d4>
   3f6b0:	cmp	ip, #0
   3f6b4:	beq	3f6c4 <__assert_fail@plt+0x2d338>
   3f6b8:	ldr	r1, [ip]
   3f6bc:	cmp	r1, #0
   3f6c0:	bgt	3f784 <__assert_fail@plt+0x2d3f8>
   3f6c4:	ldr	r3, [sp, #112]	; 0x70
   3f6c8:	cmp	r3, #0
   3f6cc:	moveq	ip, #0
   3f6d0:	cmp	r4, #16
   3f6d4:	bhi	3f73c <__assert_fail@plt+0x2d3b0>
   3f6d8:	lsl	r6, r4, #2
   3f6dc:	add	r3, fp, r6
   3f6e0:	ldr	r5, [r3, #4]
   3f6e4:	cmp	r5, #0
   3f6e8:	bne	3f67c <__assert_fail@plt+0x2d2f0>
   3f6ec:	cmp	r4, #16
   3f6f0:	ldrls	pc, [pc, r4, lsl #2]
   3f6f4:	b	3fb58 <__assert_fail@plt+0x2d7cc>
   3f6f8:	andeq	pc, r3, r8, lsl sl	; <UNPREDICTABLE>
   3f6fc:	andeq	pc, r3, r8, lsl sl	; <UNPREDICTABLE>
   3f700:	andeq	pc, r3, r0, lsl #20
   3f704:	andeq	pc, r3, r8, ror #19
   3f708:	andeq	pc, r3, r0, asr #20
   3f70c:	andeq	pc, r3, r8, lsr #20
   3f710:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f714:	ldrdeq	pc, [r3], -r4
   3f718:	muleq	r3, r8, r9
   3f71c:	andeq	pc, r3, ip, asr r9	; <UNPREDICTABLE>
   3f720:	muleq	r3, ip, r8
   3f724:	andeq	pc, r3, r8, asr fp	; <UNPREDICTABLE>
   3f728:	andeq	pc, r3, r4, lsl #17
   3f72c:	andeq	pc, r3, ip, ror #16
   3f730:	andeq	pc, r3, r4, asr r8	; <UNPREDICTABLE>
   3f734:	andeq	pc, r3, ip, lsr r8	; <UNPREDICTABLE>
   3f738:	andeq	pc, r3, r0, lsl r8	; <UNPREDICTABLE>
   3f73c:	ldr	r0, [sp, #116]	; 0x74
   3f740:	bl	37820 <__assert_fail@plt+0x25494>
   3f744:	mov	r5, r0
   3f748:	mov	r0, r5
   3f74c:	add	sp, sp, #68	; 0x44
   3f750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f754:	ldr	r4, [sp, #116]	; 0x74
   3f758:	str	ip, [sp, #4]
   3f75c:	str	r4, [sp, #12]
   3f760:	ldr	r4, [sp, #112]	; 0x70
   3f764:	str	lr, [sp]
   3f768:	str	r4, [sp, #8]
   3f76c:	bl	3f56c <__assert_fail@plt+0x2d1e0>
   3f770:	mov	r1, r0
   3f774:	ldr	r0, [sp, #116]	; 0x74
   3f778:	bl	3795c <__assert_fail@plt+0x255d0>
   3f77c:	mov	r5, r0
   3f780:	b	3f67c <__assert_fail@plt+0x2d2f0>
   3f784:	mov	r0, r2
   3f788:	bl	3f2d8 <__assert_fail@plt+0x2cf4c>
   3f78c:	ldr	r5, [r0]
   3f790:	cmp	r5, #0
   3f794:	bne	3f67c <__assert_fail@plt+0x2d2f0>
   3f798:	mov	r2, r5
   3f79c:	mov	r1, r0
   3f7a0:	ldr	r0, [sp, #116]	; 0x74
   3f7a4:	bl	377e4 <__assert_fail@plt+0x25458>
   3f7a8:	mov	r5, r0
   3f7ac:	b	3f67c <__assert_fail@plt+0x2d2f0>
   3f7b0:	mov	r2, #5
   3f7b4:	ldr	r1, [pc, #944]	; 3fb6c <__assert_fail@plt+0x2d7e0>
   3f7b8:	mov	r0, #0
   3f7bc:	bl	11ea0 <dcgettext@plt>
   3f7c0:	mov	r1, r4
   3f7c4:	bl	406c8 <__assert_fail@plt+0x2e33c>
   3f7c8:	mov	r5, #0
   3f7cc:	mov	r0, r5
   3f7d0:	add	sp, sp, #68	; 0x44
   3f7d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f7d8:	ldr	r4, [sp, #116]	; 0x74
   3f7dc:	str	ip, [sp, #4]
   3f7e0:	str	r4, [sp, #12]
   3f7e4:	ldr	r4, [sp, #112]	; 0x70
   3f7e8:	str	lr, [sp]
   3f7ec:	str	r4, [sp, #8]
   3f7f0:	bl	3f56c <__assert_fail@plt+0x2d1e0>
   3f7f4:	mov	r3, #0
   3f7f8:	mov	r2, r3
   3f7fc:	mov	r1, r0
   3f800:	ldr	r0, [sp, #116]	; 0x74
   3f804:	bl	37998 <__assert_fail@plt+0x2560c>
   3f808:	mov	r5, r0
   3f80c:	b	3f67c <__assert_fail@plt+0x2d2f0>
   3f810:	mov	r1, #12
   3f814:	ldr	r0, [sp, #116]	; 0x74
   3f818:	bl	37848 <__assert_fail@plt+0x254bc>
   3f81c:	ldr	r1, [pc, #844]	; 3fb70 <__assert_fail@plt+0x2d7e4>
   3f820:	mov	r2, r0
   3f824:	ldr	r0, [sp, #116]	; 0x74
   3f828:	bl	37d64 <__assert_fail@plt+0x259d8>
   3f82c:	mov	r5, r0
   3f830:	add	r6, fp, r6
   3f834:	str	r5, [r6, #4]
   3f838:	b	3f67c <__assert_fail@plt+0x2d2f0>
   3f83c:	mov	r1, #4
   3f840:	mov	r2, #1
   3f844:	ldr	r0, [sp, #116]	; 0x74
   3f848:	bl	3782c <__assert_fail@plt+0x254a0>
   3f84c:	ldr	r1, [pc, #800]	; 3fb74 <__assert_fail@plt+0x2d7e8>
   3f850:	b	3f820 <__assert_fail@plt+0x2d494>
   3f854:	mov	r1, #4
   3f858:	mov	r2, #1
   3f85c:	ldr	r0, [sp, #116]	; 0x74
   3f860:	bl	3782c <__assert_fail@plt+0x254a0>
   3f864:	ldr	r1, [pc, #780]	; 3fb78 <__assert_fail@plt+0x2d7ec>
   3f868:	b	3f820 <__assert_fail@plt+0x2d494>
   3f86c:	mov	r1, #2
   3f870:	mov	r2, #1
   3f874:	ldr	r0, [sp, #116]	; 0x74
   3f878:	bl	3782c <__assert_fail@plt+0x254a0>
   3f87c:	ldr	r1, [pc, #760]	; 3fb7c <__assert_fail@plt+0x2d7f0>
   3f880:	b	3f820 <__assert_fail@plt+0x2d494>
   3f884:	mov	r2, #1
   3f888:	mov	r1, r2
   3f88c:	ldr	r0, [sp, #116]	; 0x74
   3f890:	bl	3782c <__assert_fail@plt+0x254a0>
   3f894:	ldr	r1, [pc, #740]	; 3fb80 <__assert_fail@plt+0x2d7f4>
   3f898:	b	3f820 <__assert_fail@plt+0x2d494>
   3f89c:	cmp	ip, #0
   3f8a0:	beq	3fafc <__assert_fail@plt+0x2d770>
   3f8a4:	mov	r0, #40	; 0x28
   3f8a8:	ldr	sl, [ip, #12]
   3f8ac:	bl	11f3c <xmalloc@plt>
   3f8b0:	mov	r7, #0
   3f8b4:	str	r0, [sp, #28]
   3f8b8:	mov	r0, #40	; 0x28
   3f8bc:	bl	11f3c <xmalloc@plt>
   3f8c0:	ldr	r3, [r9, #12]
   3f8c4:	str	r0, [sp, #24]
   3f8c8:	cmp	r3, sl
   3f8cc:	add	r2, sp, #40	; 0x28
   3f8d0:	mov	r0, r8
   3f8d4:	bge	3f92c <__assert_fail@plt+0x2d5a0>
   3f8d8:	ldmib	r9, {r1, r3}
   3f8dc:	cmp	r3, r1
   3f8e0:	bge	3f92c <__assert_fail@plt+0x2d5a0>
   3f8e4:	ldr	r1, [r9]
   3f8e8:	ldr	r6, [r1, r3, lsl #2]
   3f8ec:	mov	r1, r6
   3f8f0:	bl	12188 <bfd_coff_get_syment@plt>
   3f8f4:	cmp	r0, #0
   3f8f8:	beq	3fb30 <__assert_fail@plt+0x2d7a4>
   3f8fc:	ldrb	r3, [sp, #61]	; 0x3d
   3f900:	ldr	r2, [r9, #12]
   3f904:	ldrb	r1, [sp, #60]	; 0x3c
   3f908:	add	r3, r3, #1
   3f90c:	add	r3, r3, r2
   3f910:	ldr	r2, [r9, #8]
   3f914:	cmp	r1, #16
   3f918:	add	r2, r2, #1
   3f91c:	strd	r2, [r9, #8]
   3f920:	beq	3fa6c <__assert_fail@plt+0x2d6e0>
   3f924:	cmp	r1, #102	; 0x66
   3f928:	bne	3f8c8 <__assert_fail@plt+0x2d53c>
   3f92c:	ldr	r1, [sp, #28]
   3f930:	mov	r3, #0
   3f934:	ldr	r2, [sp, #24]
   3f938:	str	r3, [r1, r7, lsl #2]
   3f93c:	ldr	r0, [sp, #116]	; 0x74
   3f940:	bl	37920 <__assert_fail@plt+0x25594>
   3f944:	mov	r5, r0
   3f948:	ldr	r1, [sp, #20]
   3f94c:	mov	r0, fp
   3f950:	bl	3f2d8 <__assert_fail@plt+0x2cf4c>
   3f954:	str	r5, [r0]
   3f958:	b	3f67c <__assert_fail@plt+0x2d2f0>
   3f95c:	cmp	ip, #0
   3f960:	beq	3fb14 <__assert_fail@plt+0x2d788>
   3f964:	ldr	r3, [sp, #116]	; 0x74
   3f968:	add	ip, ip, #6
   3f96c:	str	r3, [sp, #8]
   3f970:	ldr	r3, [ip, #6]
   3f974:	mov	r1, r9
   3f978:	str	r3, [sp, #4]
   3f97c:	mov	r0, r8
   3f980:	str	ip, [sp]
   3f984:	mov	r3, #9
   3f988:	mov	r2, fp
   3f98c:	bl	3fba0 <__assert_fail@plt+0x2d814>
   3f990:	mov	r5, r0
   3f994:	b	3f948 <__assert_fail@plt+0x2d5bc>
   3f998:	cmp	ip, #0
   3f99c:	beq	3fae0 <__assert_fail@plt+0x2d754>
   3f9a0:	ldr	r3, [sp, #116]	; 0x74
   3f9a4:	add	ip, ip, #6
   3f9a8:	str	r3, [sp, #8]
   3f9ac:	ldr	r3, [ip, #6]
   3f9b0:	mov	r1, r9
   3f9b4:	str	r3, [sp, #4]
   3f9b8:	mov	r0, r8
   3f9bc:	str	ip, [sp]
   3f9c0:	mov	r3, #8
   3f9c4:	mov	r2, fp
   3f9c8:	bl	3fba0 <__assert_fail@plt+0x2d814>
   3f9cc:	mov	r5, r0
   3f9d0:	b	3f948 <__assert_fail@plt+0x2d5bc>
   3f9d4:	mov	r1, #8
   3f9d8:	ldr	r0, [sp, #116]	; 0x74
   3f9dc:	bl	37848 <__assert_fail@plt+0x254bc>
   3f9e0:	ldr	r1, [pc, #412]	; 3fb84 <__assert_fail@plt+0x2d7f8>
   3f9e4:	b	3f820 <__assert_fail@plt+0x2d494>
   3f9e8:	mov	r1, #2
   3f9ec:	mov	r2, #0
   3f9f0:	ldr	r0, [sp, #116]	; 0x74
   3f9f4:	bl	3782c <__assert_fail@plt+0x254a0>
   3f9f8:	ldr	r1, [pc, #392]	; 3fb88 <__assert_fail@plt+0x2d7fc>
   3f9fc:	b	3f820 <__assert_fail@plt+0x2d494>
   3fa00:	mov	r1, #1
   3fa04:	mov	r2, #0
   3fa08:	ldr	r0, [sp, #116]	; 0x74
   3fa0c:	bl	3782c <__assert_fail@plt+0x254a0>
   3fa10:	ldr	r1, [pc, #372]	; 3fb8c <__assert_fail@plt+0x2d800>
   3fa14:	b	3f820 <__assert_fail@plt+0x2d494>
   3fa18:	ldr	r0, [sp, #116]	; 0x74
   3fa1c:	bl	37820 <__assert_fail@plt+0x25494>
   3fa20:	ldr	r1, [pc, #360]	; 3fb90 <__assert_fail@plt+0x2d804>
   3fa24:	b	3f820 <__assert_fail@plt+0x2d494>
   3fa28:	mov	r1, #4
   3fa2c:	mov	r2, #0
   3fa30:	ldr	r0, [sp, #116]	; 0x74
   3fa34:	bl	3782c <__assert_fail@plt+0x254a0>
   3fa38:	ldr	r1, [pc, #340]	; 3fb94 <__assert_fail@plt+0x2d808>
   3fa3c:	b	3f820 <__assert_fail@plt+0x2d494>
   3fa40:	mov	r1, #4
   3fa44:	mov	r2, #0
   3fa48:	ldr	r0, [sp, #116]	; 0x74
   3fa4c:	bl	3782c <__assert_fail@plt+0x254a0>
   3fa50:	ldr	r1, [pc, #272]	; 3fb68 <__assert_fail@plt+0x2d7dc>
   3fa54:	b	3f820 <__assert_fail@plt+0x2d494>
   3fa58:	mov	r1, #4
   3fa5c:	ldr	r0, [sp, #116]	; 0x74
   3fa60:	bl	37848 <__assert_fail@plt+0x254bc>
   3fa64:	ldr	r1, [pc, #300]	; 3fb98 <__assert_fail@plt+0x2d80c>
   3fa68:	b	3f820 <__assert_fail@plt+0x2d494>
   3fa6c:	add	r2, r7, #1
   3fa70:	cmp	r4, r2
   3fa74:	ble	3faa4 <__assert_fail@plt+0x2d718>
   3fa78:	ldr	r3, [r6, #16]
   3fa7c:	ldrd	r0, [r6, #4]
   3fa80:	ldr	ip, [sp, #28]
   3fa84:	ldr	r3, [r3, #28]
   3fa88:	add	r3, r3, r1
   3fa8c:	ldr	r1, [sp, #24]
   3fa90:	str	r0, [ip, r7, lsl #2]
   3fa94:	str	r3, [r1, r7, lsl #2]
   3fa98:	mov	r7, r2
   3fa9c:	ldr	r3, [r9, #12]
   3faa0:	b	3f8c8 <__assert_fail@plt+0x2d53c>
   3faa4:	add	r4, r4, #10
   3faa8:	ldr	r0, [sp, #28]
   3faac:	lsl	r3, r4, #2
   3fab0:	mov	r1, r3
   3fab4:	str	r2, [sp, #36]	; 0x24
   3fab8:	str	r3, [sp, #32]
   3fabc:	bl	11ed0 <xrealloc@plt>
   3fac0:	ldr	r3, [sp, #32]
   3fac4:	mov	r1, r3
   3fac8:	str	r0, [sp, #28]
   3facc:	ldr	r0, [sp, #24]
   3fad0:	bl	11ed0 <xrealloc@plt>
   3fad4:	ldr	r2, [sp, #36]	; 0x24
   3fad8:	str	r0, [sp, #24]
   3fadc:	b	3fa78 <__assert_fail@plt+0x2d6ec>
   3fae0:	mov	r3, ip
   3fae4:	mov	r2, ip
   3fae8:	mov	r1, #1
   3faec:	ldr	r0, [sp, #116]	; 0x74
   3faf0:	bl	37860 <__assert_fail@plt+0x254d4>
   3faf4:	mov	r5, r0
   3faf8:	b	3f948 <__assert_fail@plt+0x2d5bc>
   3fafc:	mov	r2, ip
   3fb00:	mov	r1, ip
   3fb04:	ldr	r0, [sp, #116]	; 0x74
   3fb08:	bl	37920 <__assert_fail@plt+0x25594>
   3fb0c:	mov	r5, r0
   3fb10:	b	3f948 <__assert_fail@plt+0x2d5bc>
   3fb14:	mov	r3, ip
   3fb18:	mov	r2, ip
   3fb1c:	mov	r1, ip
   3fb20:	ldr	r0, [sp, #116]	; 0x74
   3fb24:	bl	37860 <__assert_fail@plt+0x254d4>
   3fb28:	mov	r5, r0
   3fb2c:	b	3f948 <__assert_fail@plt+0x2d5bc>
   3fb30:	mov	r2, #5
   3fb34:	ldr	r1, [pc, #96]	; 3fb9c <__assert_fail@plt+0x2d810>
   3fb38:	bl	11ea0 <dcgettext@plt>
   3fb3c:	mov	r4, r0
   3fb40:	bl	11f00 <bfd_get_error@plt>
   3fb44:	bl	12284 <bfd_errmsg@plt>
   3fb48:	mov	r1, r0
   3fb4c:	mov	r0, r4
   3fb50:	bl	406c8 <__assert_fail@plt+0x2e33c>
   3fb54:	b	3f948 <__assert_fail@plt+0x2d5bc>
   3fb58:	ldr	r0, [sp, #116]	; 0x74
   3fb5c:	bl	37820 <__assert_fail@plt+0x25494>
   3fb60:	mov	r5, r0
   3fb64:	b	3f830 <__assert_fail@plt+0x2d4a4>
   3fb68:	andeq	r1, r5, ip, asr #1
   3fb6c:	andeq	r1, r5, ip, asr pc
   3fb70:			; <UNDEFINED> instruction: 0x000519b0
   3fb74:	andeq	r1, r5, r0, lsr #19
   3fb78:	andeq	r1, r5, r4, lsl #19
   3fb7c:	andeq	r1, r5, r4, ror r9
   3fb80:	andeq	r1, r5, r8, asr r9
   3fb84:	strdeq	r0, [r5], -ip
   3fb88:	andeq	r1, r5, r8, asr #18
   3fb8c:	andeq	r4, r5, r0, ror lr
   3fb90:	andeq	r0, r5, r4, asr pc
   3fb94:	andeq	r1, r5, r0, asr r9
   3fb98:	strdeq	r0, [r5], -r4
   3fb9c:	andeq	r1, r5, r0, lsl #31
   3fba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fba4:	sub	sp, sp, #84	; 0x54
   3fba8:	mov	r9, r0
   3fbac:	mov	r0, #40	; 0x28
   3fbb0:	strd	r2, [sp, #24]
   3fbb4:	mov	r4, r1
   3fbb8:	ldr	fp, [sp, #124]	; 0x7c
   3fbbc:	bl	11f3c <xmalloc@plt>
   3fbc0:	mov	sl, #0
   3fbc4:	mov	r3, #10
   3fbc8:	str	r3, [sp, #20]
   3fbcc:	str	r0, [sp, #16]
   3fbd0:	ldr	r3, [r4, #12]
   3fbd4:	cmp	r3, fp
   3fbd8:	bge	3fc50 <__assert_fail@plt+0x2d8c4>
   3fbdc:	ldrd	r2, [r4, #4]
   3fbe0:	cmp	r3, r2
   3fbe4:	bge	3fc50 <__assert_fail@plt+0x2d8c4>
   3fbe8:	ldr	r1, [r4]
   3fbec:	add	r2, sp, #56	; 0x38
   3fbf0:	mov	r0, r9
   3fbf4:	ldr	r5, [r1, r3, lsl #2]
   3fbf8:	mov	r1, r5
   3fbfc:	bl	12188 <bfd_coff_get_syment@plt>
   3fc00:	cmp	r0, #0
   3fc04:	beq	3fd84 <__assert_fail@plt+0x2d9f8>
   3fc08:	ldrb	r1, [sp, #77]	; 0x4d
   3fc0c:	ldr	r8, [r4, #12]
   3fc10:	ldr	r3, [r4, #8]
   3fc14:	add	r2, r1, #1
   3fc18:	add	r2, r2, r8
   3fc1c:	add	r3, r3, #1
   3fc20:	cmp	r1, #0
   3fc24:	str	r2, [r4, #12]
   3fc28:	str	r3, [r4, #8]
   3fc2c:	bne	3fd2c <__assert_fail@plt+0x2d9a0>
   3fc30:	ldrb	r3, [sp, #76]	; 0x4c
   3fc34:	cmp	r3, #11
   3fc38:	beq	3fc90 <__assert_fail@plt+0x2d904>
   3fc3c:	bls	3fc88 <__assert_fail@plt+0x2d8fc>
   3fc40:	cmp	r3, #18
   3fc44:	beq	3fd50 <__assert_fail@plt+0x2d9c4>
   3fc48:	cmp	r3, #102	; 0x66
   3fc4c:	bne	3fd20 <__assert_fail@plt+0x2d994>
   3fc50:	ldr	r2, [sp, #28]
   3fc54:	mov	r3, #0
   3fc58:	sub	r1, r2, #8
   3fc5c:	ldr	r2, [sp, #16]
   3fc60:	ldr	r0, [sp, #128]	; 0x80
   3fc64:	clz	r1, r1
   3fc68:	str	r3, [r2, sl, lsl #2]
   3fc6c:	mov	r3, r2
   3fc70:	ldr	r2, [sp, #120]	; 0x78
   3fc74:	lsr	r1, r1, #5
   3fc78:	ldrh	r2, [r2]
   3fc7c:	bl	37860 <__assert_fail@plt+0x254d4>
   3fc80:	add	sp, sp, #84	; 0x54
   3fc84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fc88:	cmp	r3, #8
   3fc8c:	bne	3fd20 <__assert_fail@plt+0x2d994>
   3fc90:	ldr	r2, [r5, #16]
   3fc94:	ldr	r3, [r5, #8]
   3fc98:	mov	r7, #0
   3fc9c:	ldr	r6, [r2, #28]
   3fca0:	add	r6, r6, r3
   3fca4:	lsl	r6, r6, #3
   3fca8:	ldrh	r0, [sp, #74]	; 0x4a
   3fcac:	ldr	r3, [sp, #128]	; 0x80
   3fcb0:	mov	r2, #1
   3fcb4:	str	r3, [sp, #12]
   3fcb8:	str	r1, [sp, #4]
   3fcbc:	mov	r3, r8
   3fcc0:	str	r0, [sp]
   3fcc4:	str	r2, [sp, #8]
   3fcc8:	mov	r1, r4
   3fccc:	ldr	r2, [sp, #24]
   3fcd0:	mov	r0, r9
   3fcd4:	bl	3f56c <__assert_fail@plt+0x2d1e0>
   3fcd8:	mov	r2, #0
   3fcdc:	ldr	r1, [r5, #4]
   3fce0:	mov	r3, r6
   3fce4:	str	r2, [sp, #4]
   3fce8:	str	r7, [sp]
   3fcec:	mov	r2, r0
   3fcf0:	ldr	r0, [sp, #128]	; 0x80
   3fcf4:	bl	37c34 <__assert_fail@plt+0x258a8>
   3fcf8:	subs	r5, r0, #0
   3fcfc:	beq	3fda8 <__assert_fail@plt+0x2da1c>
   3fd00:	ldr	r3, [sp, #20]
   3fd04:	add	sl, sl, #1
   3fd08:	cmp	sl, r3
   3fd0c:	bge	3fd68 <__assert_fail@plt+0x2d9dc>
   3fd10:	ldr	r3, [sp, #16]
   3fd14:	add	r3, r3, sl, lsl #2
   3fd18:	str	r5, [r3, #-4]
   3fd1c:	b	3fbd0 <__assert_fail@plt+0x2d844>
   3fd20:	mov	r7, #0
   3fd24:	mov	r6, r7
   3fd28:	b	3fca8 <__assert_fail@plt+0x2d91c>
   3fd2c:	add	r3, sp, #36	; 0x24
   3fd30:	mov	r2, #0
   3fd34:	mov	r1, r5
   3fd38:	mov	r0, r9
   3fd3c:	bl	120d4 <bfd_coff_get_auxent@plt>
   3fd40:	cmp	r0, #0
   3fd44:	beq	3fdb4 <__assert_fail@plt+0x2da28>
   3fd48:	add	r1, sp, #36	; 0x24
   3fd4c:	b	3fc30 <__assert_fail@plt+0x2d8a4>
   3fd50:	ldr	r2, [r5, #16]
   3fd54:	ldr	r3, [r5, #8]
   3fd58:	ldrh	r7, [sp, #42]	; 0x2a
   3fd5c:	ldr	r6, [r2, #28]
   3fd60:	add	r6, r6, r3
   3fd64:	b	3fca8 <__assert_fail@plt+0x2d91c>
   3fd68:	add	r3, r3, #10
   3fd6c:	ldr	r0, [sp, #16]
   3fd70:	lsl	r1, r3, #2
   3fd74:	str	r3, [sp, #20]
   3fd78:	bl	11ed0 <xrealloc@plt>
   3fd7c:	str	r0, [sp, #16]
   3fd80:	b	3fd10 <__assert_fail@plt+0x2d984>
   3fd84:	ldr	r1, [pc, #52]	; 3fdc0 <__assert_fail@plt+0x2da34>
   3fd88:	mov	r2, #5
   3fd8c:	bl	11ea0 <dcgettext@plt>
   3fd90:	mov	r4, r0
   3fd94:	bl	11f00 <bfd_get_error@plt>
   3fd98:	bl	12284 <bfd_errmsg@plt>
   3fd9c:	mov	r1, r0
   3fda0:	mov	r0, r4
   3fda4:	bl	406c8 <__assert_fail@plt+0x2e33c>
   3fda8:	mov	r0, #0
   3fdac:	add	sp, sp, #84	; 0x54
   3fdb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fdb4:	mov	r2, #5
   3fdb8:	ldr	r1, [pc, #4]	; 3fdc4 <__assert_fail@plt+0x2da38>
   3fdbc:	b	3fd8c <__assert_fail@plt+0x2da00>
   3fdc0:	andeq	r1, r5, r0, lsl #31
   3fdc4:	andeq	r1, r5, r0, lsr #31
   3fdc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fdcc:	mov	lr, #0
   3fdd0:	sub	sp, sp, #188	; 0xbc
   3fdd4:	mov	r5, lr
   3fdd8:	add	ip, sp, #112	; 0x70
   3fddc:	add	r4, sp, #180	; 0xb4
   3fde0:	str	r1, [sp, #52]	; 0x34
   3fde4:	str	r2, [sp, #56]	; 0x38
   3fde8:	str	lr, [sp, #60]	; 0x3c
   3fdec:	str	lr, [sp, #64]	; 0x40
   3fdf0:	str	lr, [sp, #112]	; 0x70
   3fdf4:	str	r5, [ip, #4]!
   3fdf8:	cmp	r4, ip
   3fdfc:	bne	3fdf4 <__assert_fail@plt+0x2da68>
   3fe00:	cmp	r2, #0
   3fe04:	ble	40030 <__assert_fail@plt+0x2dca4>
   3fe08:	mov	r9, r3
   3fe0c:	mov	r3, #0
   3fe10:	str	r2, [sp, #20]
   3fe14:	mov	fp, r1
   3fe18:	mov	r7, r0
   3fe1c:	str	r3, [sp, #24]
   3fe20:	str	r3, [sp, #32]
   3fe24:	str	r3, [sp, #44]	; 0x2c
   3fe28:	str	r3, [sp, #36]	; 0x24
   3fe2c:	str	r3, [sp, #40]	; 0x28
   3fe30:	str	r3, [sp, #28]
   3fe34:	mvn	sl, #0
   3fe38:	b	3fed8 <__assert_fail@plt+0x2db4c>
   3fe3c:	cmp	r3, #5
   3fe40:	beq	3fec8 <__assert_fail@plt+0x2db3c>
   3fe44:	bhi	4003c <__assert_fail@plt+0x2dcb0>
   3fe48:	cmp	r3, #2
   3fe4c:	beq	400c4 <__assert_fail@plt+0x2dd38>
   3fe50:	cmp	r3, #3
   3fe54:	bne	4004c <__assert_fail@plt+0x2dcc0>
   3fe58:	ldrh	ip, [sp, #106]	; 0x6a
   3fe5c:	cmp	ip, #0
   3fe60:	beq	3fec8 <__assert_fail@plt+0x2db3c>
   3fe64:	ldr	r1, [r7, #160]	; 0xa0
   3fe68:	mov	r0, #2
   3fe6c:	ldr	r2, [r1, #44]	; 0x2c
   3fe70:	ldr	r1, [r1, #40]	; 0x28
   3fe74:	and	r2, r2, ip
   3fe78:	cmp	r2, r0, lsl r1
   3fe7c:	bne	4018c <__assert_fail@plt+0x2de00>
   3fe80:	ldrb	r2, [sp, #109]	; 0x6d
   3fe84:	str	r3, [sp, #40]	; 0x28
   3fe88:	str	ip, [sp, #36]	; 0x24
   3fe8c:	cmp	r2, #0
   3fe90:	str	r8, [sp, #28]
   3fe94:	ldrne	r1, [r5, #16]
   3fe98:	ldrne	r2, [r5, #8]
   3fe9c:	ldrne	r0, [sp, #72]	; 0x48
   3fea0:	ldrne	r1, [r1, #28]
   3fea4:	addne	r2, r2, r0
   3fea8:	addne	r2, r2, r1
   3feac:	str	r2, [sp, #44]	; 0x2c
   3feb0:	ldr	r2, [r7, #4]
   3feb4:	mov	r1, r5
   3feb8:	mov	r0, r7
   3febc:	ldr	r2, [r2, #292]	; 0x124
   3fec0:	blx	r2
   3fec4:	str	r0, [sp, #32]
   3fec8:	ldr	r3, [sp, #60]	; 0x3c
   3fecc:	ldr	r2, [sp, #20]
   3fed0:	cmp	r3, r2
   3fed4:	bge	40030 <__assert_fail@plt+0x2dca4>
   3fed8:	ldr	r5, [fp, r3, lsl #2]
   3fedc:	add	r2, sp, #88	; 0x58
   3fee0:	mov	r1, r5
   3fee4:	mov	r0, r7
   3fee8:	bl	12188 <bfd_coff_get_syment@plt>
   3feec:	cmp	r0, #0
   3fef0:	beq	40278 <__assert_fail@plt+0x2deec>
   3fef4:	ldrb	r4, [sp, #109]	; 0x6d
   3fef8:	ldr	r6, [sp, #64]	; 0x40
   3fefc:	ldr	r3, [sp, #60]	; 0x3c
   3ff00:	add	r2, r4, #1
   3ff04:	add	r2, r2, r6
   3ff08:	add	r3, r3, #1
   3ff0c:	cmp	r4, #0
   3ff10:	ldr	r8, [r5, #4]
   3ff14:	str	r2, [sp, #64]	; 0x40
   3ff18:	str	r3, [sp, #60]	; 0x3c
   3ff1c:	bne	400fc <__assert_fail@plt+0x2dd70>
   3ff20:	cmp	r6, sl
   3ff24:	ldrb	r3, [sp, #108]	; 0x6c
   3ff28:	beq	400d8 <__assert_fail@plt+0x2dd4c>
   3ff2c:	cmp	r3, #100	; 0x64
   3ff30:	beq	40140 <__assert_fail@plt+0x2ddb4>
   3ff34:	bls	3fe3c <__assert_fail@plt+0x2dab0>
   3ff38:	cmp	r3, #106	; 0x6a
   3ff3c:	bhi	400bc <__assert_fail@plt+0x2dd30>
   3ff40:	cmp	r3, #104	; 0x68
   3ff44:	bcs	3fec8 <__assert_fail@plt+0x2db3c>
   3ff48:	cmp	r3, #101	; 0x65
   3ff4c:	bne	400b0 <__assert_fail@plt+0x2dd24>
   3ff50:	ldr	r1, [pc, #956]	; 40314 <__assert_fail@plt+0x2df88>
   3ff54:	mov	r0, r8
   3ff58:	bl	11d98 <strcmp@plt>
   3ff5c:	subs	ip, r0, #0
   3ff60:	bne	401a0 <__assert_fail@plt+0x2de14>
   3ff64:	ldr	r3, [sp, #28]
   3ff68:	cmp	r3, #0
   3ff6c:	beq	402e4 <__assert_fail@plt+0x2df58>
   3ff70:	ldr	lr, [r7, #160]	; 0xa0
   3ff74:	mov	r3, r6
   3ff78:	ldr	r6, [sp, #36]	; 0x24
   3ff7c:	ldr	r1, [lr, #48]	; 0x30
   3ff80:	str	r9, [sp, #12]
   3ff84:	str	ip, [sp, #8]
   3ff88:	asr	r0, r6, r1
   3ff8c:	str	r4, [sp, #4]
   3ff90:	ldr	ip, [lr, #36]	; 0x24
   3ff94:	eor	r1, r6, r0
   3ff98:	and	r1, r1, ip
   3ff9c:	eor	r1, r1, r0
   3ffa0:	add	r2, sp, #112	; 0x70
   3ffa4:	str	r1, [sp]
   3ffa8:	mov	r0, r7
   3ffac:	add	r1, sp, #52	; 0x34
   3ffb0:	bl	3f56c <__assert_fail@plt+0x2d1e0>
   3ffb4:	subs	r2, r0, #0
   3ffb8:	beq	400a4 <__assert_fail@plt+0x2dd18>
   3ffbc:	ldr	r1, [r5, #16]
   3ffc0:	ldr	r3, [sp, #40]	; 0x28
   3ffc4:	ldr	r0, [r5, #8]
   3ffc8:	cmp	r3, #2
   3ffcc:	ldr	r1, [r1, #28]
   3ffd0:	subne	r3, r3, #127	; 0x7f
   3ffd4:	add	r0, r1, r0
   3ffd8:	clzne	r3, r3
   3ffdc:	moveq	r3, #1
   3ffe0:	lsrne	r3, r3, #5
   3ffe4:	str	r0, [sp]
   3ffe8:	ldr	r1, [sp, #28]
   3ffec:	mov	r0, r9
   3fff0:	bl	370c4 <__assert_fail@plt+0x24d38>
   3fff4:	cmp	r0, #0
   3fff8:	beq	400a4 <__assert_fail@plt+0x2dd18>
   3fffc:	ldr	r3, [sp, #32]
   40000:	cmp	r3, #0
   40004:	bne	4021c <__assert_fail@plt+0x2de90>
   40008:	ldr	r3, [sp, #32]
   4000c:	ldr	r2, [sp, #20]
   40010:	str	r3, [sp, #36]	; 0x24
   40014:	str	r3, [sp, #40]	; 0x28
   40018:	str	r3, [sp, #28]
   4001c:	mov	r3, #1
   40020:	str	r3, [sp, #24]
   40024:	ldr	r3, [sp, #60]	; 0x3c
   40028:	cmp	r3, r2
   4002c:	blt	3fed8 <__assert_fail@plt+0x2db4c>
   40030:	mov	r0, #1
   40034:	add	sp, sp, #188	; 0xbc
   40038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4003c:	cmp	r3, #7
   40040:	beq	3fec8 <__assert_fail@plt+0x2db3c>
   40044:	cmp	r3, #14
   40048:	beq	3fec8 <__assert_fail@plt+0x2db3c>
   4004c:	ldrh	r2, [sp, #106]	; 0x6a
   40050:	mov	r3, #1
   40054:	str	r9, [sp, #12]
   40058:	stm	sp, {r2, r4}
   4005c:	str	r3, [sp, #8]
   40060:	add	r2, sp, #112	; 0x70
   40064:	mov	r3, r6
   40068:	add	r1, sp, #52	; 0x34
   4006c:	mov	r0, r7
   40070:	bl	3f56c <__assert_fail@plt+0x2d1e0>
   40074:	cmp	r0, #0
   40078:	beq	400a4 <__assert_fail@plt+0x2dd18>
   4007c:	ldr	r3, [sp, #24]
   40080:	str	r9, [sp]
   40084:	mov	r2, r6
   40088:	stmib	sp, {r0, r3}
   4008c:	mov	r1, r5
   40090:	ldrb	r3, [sp, #108]	; 0x6c
   40094:	add	r0, sp, #112	; 0x70
   40098:	bl	3f3a4 <__assert_fail@plt+0x2d018>
   4009c:	cmp	r0, #0
   400a0:	bne	3fec8 <__assert_fail@plt+0x2db3c>
   400a4:	mov	r0, #0
   400a8:	add	sp, sp, #188	; 0xbc
   400ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   400b0:	cmp	r3, #103	; 0x67
   400b4:	bne	4004c <__assert_fail@plt+0x2dcc0>
   400b8:	b	400e0 <__assert_fail@plt+0x2dd54>
   400bc:	cmp	r3, #127	; 0x7f
   400c0:	bne	400cc <__assert_fail@plt+0x2dd40>
   400c4:	ldrh	ip, [sp, #106]	; 0x6a
   400c8:	b	3fe64 <__assert_fail@plt+0x2dad8>
   400cc:	cmp	r3, #255	; 0xff
   400d0:	bne	4004c <__assert_fail@plt+0x2dcc0>
   400d4:	b	3fec8 <__assert_fail@plt+0x2db3c>
   400d8:	cmp	r3, #103	; 0x67
   400dc:	bne	40120 <__assert_fail@plt+0x2dd94>
   400e0:	mov	r1, r8
   400e4:	mov	r0, r9
   400e8:	ldr	sl, [sp, #96]	; 0x60
   400ec:	bl	36f28 <__assert_fail@plt+0x24b9c>
   400f0:	cmp	r0, #0
   400f4:	bne	3fec8 <__assert_fail@plt+0x2db3c>
   400f8:	b	400a4 <__assert_fail@plt+0x2dd18>
   400fc:	add	r3, sp, #68	; 0x44
   40100:	mov	r2, #0
   40104:	mov	r1, r5
   40108:	mov	r0, r7
   4010c:	bl	120d4 <bfd_coff_get_auxent@plt>
   40110:	cmp	r0, #0
   40114:	beq	402bc <__assert_fail@plt+0x2df30>
   40118:	add	r4, sp, #68	; 0x44
   4011c:	b	3ff20 <__assert_fail@plt+0x2db94>
   40120:	ldr	r1, [pc, #496]	; 40318 <__assert_fail@plt+0x2df8c>
   40124:	mov	r0, r9
   40128:	bl	36f28 <__assert_fail@plt+0x24b9c>
   4012c:	cmp	r0, #0
   40130:	beq	400a4 <__assert_fail@plt+0x2dd18>
   40134:	ldrb	r3, [sp, #108]	; 0x6c
   40138:	cmp	r3, #100	; 0x64
   4013c:	bne	3ff34 <__assert_fail@plt+0x2dba8>
   40140:	ldr	r1, [pc, #468]	; 4031c <__assert_fail@plt+0x2df90>
   40144:	mov	r0, r8
   40148:	bl	11d98 <strcmp@plt>
   4014c:	cmp	r0, #0
   40150:	beq	401f8 <__assert_fail@plt+0x2de6c>
   40154:	mov	r0, r8
   40158:	ldr	r1, [pc, #448]	; 40320 <__assert_fail@plt+0x2df94>
   4015c:	bl	11d98 <strcmp@plt>
   40160:	cmp	r0, #0
   40164:	bne	3fec8 <__assert_fail@plt+0x2db3c>
   40168:	ldr	r2, [r5, #16]
   4016c:	ldr	r3, [r5, #8]
   40170:	mov	r0, r9
   40174:	ldr	r1, [r2, #28]
   40178:	add	r1, r1, r3
   4017c:	bl	373f4 <__assert_fail@plt+0x25068>
   40180:	cmp	r0, #0
   40184:	bne	3fec8 <__assert_fail@plt+0x2db3c>
   40188:	b	400a4 <__assert_fail@plt+0x2dd18>
   4018c:	mov	r3, #1
   40190:	str	r9, [sp, #12]
   40194:	str	r4, [sp, #4]
   40198:	str	ip, [sp]
   4019c:	b	4005c <__assert_fail@plt+0x2dcd0>
   401a0:	mov	r0, r8
   401a4:	ldr	r1, [pc, #376]	; 40324 <__assert_fail@plt+0x2df98>
   401a8:	bl	11d98 <strcmp@plt>
   401ac:	subs	r4, r0, #0
   401b0:	bne	3fec8 <__assert_fail@plt+0x2db3c>
   401b4:	ldr	r3, [sp, #24]
   401b8:	cmp	r3, #0
   401bc:	beq	402fc <__assert_fail@plt+0x2df70>
   401c0:	ldr	r2, [r5, #16]
   401c4:	ldr	r3, [r5, #8]
   401c8:	mov	r0, r9
   401cc:	ldr	r1, [r2, #28]
   401d0:	add	r1, r1, r3
   401d4:	ldr	r3, [sp, #44]	; 0x2c
   401d8:	cmp	r1, r3
   401dc:	movcc	r1, r3
   401e0:	bl	3729c <__assert_fail@plt+0x24f10>
   401e4:	cmp	r0, #0
   401e8:	beq	400a4 <__assert_fail@plt+0x2dd18>
   401ec:	str	r4, [sp, #24]
   401f0:	str	r4, [sp, #44]	; 0x2c
   401f4:	b	3fec8 <__assert_fail@plt+0x2db3c>
   401f8:	ldr	r2, [r5, #16]
   401fc:	ldr	r3, [r5, #8]
   40200:	mov	r0, r9
   40204:	ldr	r1, [r2, #28]
   40208:	add	r1, r1, r3
   4020c:	bl	37330 <__assert_fail@plt+0x24fa4>
   40210:	cmp	r0, #0
   40214:	bne	3fec8 <__assert_fail@plt+0x2db3c>
   40218:	b	400a4 <__assert_fail@plt+0x2dd18>
   4021c:	ldrb	r4, [sp, #109]	; 0x6d
   40220:	ldr	r2, [sp, #32]
   40224:	ldr	r3, [r5, #16]
   40228:	cmp	r4, #0
   4022c:	ldr	r1, [r2, #8]
   40230:	ldrhne	r4, [sp, #72]	; 0x48
   40234:	add	r6, r2, #8
   40238:	ldr	r5, [r3, #28]
   4023c:	subne	r4, r4, #1
   40240:	cmp	r1, #0
   40244:	bne	40258 <__assert_fail@plt+0x2decc>
   40248:	b	402c8 <__assert_fail@plt+0x2df3c>
   4024c:	ldr	r1, [r6, #8]!
   40250:	cmp	r1, #0
   40254:	beq	402a0 <__assert_fail@plt+0x2df14>
   40258:	ldr	r2, [r6, #4]
   4025c:	add	r1, r4, r1
   40260:	add	r2, r5, r2
   40264:	mov	r0, r9
   40268:	bl	37474 <__assert_fail@plt+0x250e8>
   4026c:	cmp	r0, #0
   40270:	bne	4024c <__assert_fail@plt+0x2dec0>
   40274:	b	400a4 <__assert_fail@plt+0x2dd18>
   40278:	ldr	r1, [pc, #168]	; 40328 <__assert_fail@plt+0x2df9c>
   4027c:	mov	r2, #5
   40280:	bl	11ea0 <dcgettext@plt>
   40284:	mov	r4, r0
   40288:	bl	11f00 <bfd_get_error@plt>
   4028c:	bl	12284 <bfd_errmsg@plt>
   40290:	mov	r1, r0
   40294:	mov	r0, r4
   40298:	bl	406c8 <__assert_fail@plt+0x2e33c>
   4029c:	b	400a4 <__assert_fail@plt+0x2dd18>
   402a0:	mov	r3, #1
   402a4:	str	r1, [sp, #36]	; 0x24
   402a8:	str	r1, [sp, #40]	; 0x28
   402ac:	str	r1, [sp, #32]
   402b0:	str	r1, [sp, #28]
   402b4:	str	r3, [sp, #24]
   402b8:	b	3fec8 <__assert_fail@plt+0x2db3c>
   402bc:	mov	r2, #5
   402c0:	ldr	r1, [pc, #100]	; 4032c <__assert_fail@plt+0x2dfa0>
   402c4:	b	40280 <__assert_fail@plt+0x2def4>
   402c8:	mov	r3, #1
   402cc:	str	r1, [sp, #36]	; 0x24
   402d0:	str	r1, [sp, #32]
   402d4:	str	r1, [sp, #28]
   402d8:	str	r1, [sp, #40]	; 0x28
   402dc:	str	r3, [sp, #24]
   402e0:	b	3fec8 <__assert_fail@plt+0x2db3c>
   402e4:	mov	r2, #5
   402e8:	ldr	r1, [pc, #64]	; 40330 <__assert_fail@plt+0x2dfa4>
   402ec:	bl	11ea0 <dcgettext@plt>
   402f0:	mov	r1, r6
   402f4:	bl	406c8 <__assert_fail@plt+0x2e33c>
   402f8:	b	400a4 <__assert_fail@plt+0x2dd18>
   402fc:	mov	r2, #5
   40300:	ldr	r1, [pc, #44]	; 40334 <__assert_fail@plt+0x2dfa8>
   40304:	bl	11ea0 <dcgettext@plt>
   40308:	mov	r1, r6
   4030c:	bl	406c8 <__assert_fail@plt+0x2e33c>
   40310:	b	400a4 <__assert_fail@plt+0x2dd18>
   40314:	andeq	r1, r5, ip, asr #31
   40318:	andeq	r1, r5, r0, asr #31
   4031c:	andeq	r2, r5, r0, lsl r0
   40320:	andeq	r2, r5, r4, lsl r0
   40324:	strdeq	r1, [r5], -r4
   40328:	andeq	r1, r5, r0, lsl #31
   4032c:	andeq	r1, r5, r0, lsr #31
   40330:	ldrdeq	r1, [r5], -r0
   40334:	strdeq	r1, [r5], -r8
   40338:	push	{r4, r5, r6, lr}
   4033c:	mov	r1, #47	; 0x2f
   40340:	mov	r6, r0
   40344:	bl	121e8 <strrchr@plt>
   40348:	cmp	r0, #0
   4034c:	beq	4039c <__assert_fail@plt+0x2e010>
   40350:	sub	r4, r0, r6
   40354:	add	r0, r4, #11
   40358:	bl	11f3c <xmalloc@plt>
   4035c:	mov	r2, r4
   40360:	mov	r1, r6
   40364:	mov	r5, r0
   40368:	bl	11e40 <memcpy@plt>
   4036c:	add	r2, r4, #1
   40370:	add	r2, r5, r2
   40374:	mov	r3, #47	; 0x2f
   40378:	strb	r3, [r5, r4]
   4037c:	ldr	r3, [pc, #44]	; 403b0 <__assert_fail@plt+0x2e024>
   40380:	ldm	r3!, {r0, r1}
   40384:	ldrb	r3, [r3]
   40388:	str	r0, [r2]
   4038c:	str	r1, [r2, #4]
   40390:	strb	r3, [r2, #8]
   40394:	mov	r0, r5
   40398:	pop	{r4, r5, r6, pc}
   4039c:	mov	r0, #9
   403a0:	bl	11f3c <xmalloc@plt>
   403a4:	mov	r5, r0
   403a8:	mov	r2, r0
   403ac:	b	4037c <__assert_fail@plt+0x2dff0>
   403b0:	andeq	r2, r5, r4, lsr r0
   403b4:	subs	r3, r0, #0
   403b8:	beq	403d4 <__assert_fail@plt+0x2e048>
   403bc:	cmp	r3, #1
   403c0:	beq	403e0 <__assert_fail@plt+0x2e054>
   403c4:	mov	r2, #5
   403c8:	ldr	r1, [pc, #32]	; 403f0 <__assert_fail@plt+0x2e064>
   403cc:	mov	r0, #0
   403d0:	b	11ea0 <dcgettext@plt>
   403d4:	mov	r2, #5
   403d8:	ldr	r1, [pc, #20]	; 403f4 <__assert_fail@plt+0x2e068>
   403dc:	b	11ea0 <dcgettext@plt>
   403e0:	mov	r2, #5
   403e4:	ldr	r1, [pc, #12]	; 403f8 <__assert_fail@plt+0x2e06c>
   403e8:	mov	r0, #0
   403ec:	b	11ea0 <dcgettext@plt>
   403f0:	andeq	r2, r5, ip, asr r0
   403f4:	andeq	r2, r5, r0, asr #32
   403f8:	andeq	r2, r5, ip, asr #32
   403fc:	push	{r4, r5, lr}
   40400:	sub	sp, sp, #12
   40404:	mov	r4, r0
   40408:	bl	11f00 <bfd_get_error@plt>
   4040c:	bl	12284 <bfd_errmsg@plt>
   40410:	ldr	r3, [pc, #84]	; 4046c <__assert_fail@plt+0x2e0e0>
   40414:	mov	r5, r0
   40418:	ldr	r0, [r3]
   4041c:	bl	11de0 <fflush@plt>
   40420:	cmp	r4, #0
   40424:	ldr	r2, [pc, #68]	; 40470 <__assert_fail@plt+0x2e0e4>
   40428:	ldr	r1, [pc, #68]	; 40474 <__assert_fail@plt+0x2e0e8>
   4042c:	beq	40450 <__assert_fail@plt+0x2e0c4>
   40430:	str	r5, [sp]
   40434:	mov	r3, r4
   40438:	ldr	r2, [r2]
   4043c:	ldr	r0, [r1]
   40440:	ldr	r1, [pc, #48]	; 40478 <__assert_fail@plt+0x2e0ec>
   40444:	bl	120b0 <fprintf@plt>
   40448:	add	sp, sp, #12
   4044c:	pop	{r4, r5, pc}
   40450:	ldr	r0, [r1]
   40454:	mov	r3, r5
   40458:	ldr	r2, [r2]
   4045c:	ldr	r1, [pc, #24]	; 4047c <__assert_fail@plt+0x2e0f0>
   40460:	add	sp, sp, #12
   40464:	pop	{r4, r5, lr}
   40468:	b	120b0 <fprintf@plt>
   4046c:	andeq	r7, r6, r0, lsr r4
   40470:	ldrdeq	r9, [r6], -ip
   40474:	andeq	r7, r6, r8, lsl #3
   40478:	andeq	r1, r5, r0, lsl r3
   4047c:	andeq	r1, r5, r4, lsl r3
   40480:	ldr	r3, [r1, #8]
   40484:	push	{r4, r5, r6, r7, r8, lr}
   40488:	add	r3, r3, #1
   4048c:	mov	r6, r1
   40490:	mov	r4, r0
   40494:	str	r3, [r1, #8]
   40498:	ldr	r0, [r1, #12]
   4049c:	add	r1, r3, r3, lsl #1
   404a0:	rsb	r1, r3, r1, lsl #3
   404a4:	lsl	r2, r1, #2
   404a8:	cmp	r0, r2
   404ac:	bcs	404f4 <__assert_fail@plt+0x2e168>
   404b0:	cmp	r3, #63	; 0x3f
   404b4:	lslgt	r5, r1, #3
   404b8:	movle	r5, #11776	; 0x2e00
   404bc:	mov	r1, r5
   404c0:	ldr	r0, [r6, #16]
   404c4:	bl	11ed0 <xrealloc@plt>
   404c8:	ldr	r2, [r6, #12]
   404cc:	mov	r1, #0
   404d0:	str	r0, [r6, #16]
   404d4:	add	r0, r0, r2
   404d8:	sub	r2, r5, r2
   404dc:	bl	12110 <memset@plt>
   404e0:	ldr	r3, [r6, #8]
   404e4:	str	r5, [r6, #12]
   404e8:	add	r2, r3, r3, lsl #1
   404ec:	rsb	r3, r3, r2, lsl #3
   404f0:	lsl	r2, r3, #2
   404f4:	ldr	r3, [r6, #16]
   404f8:	ldr	r1, [r4]
   404fc:	add	r3, r3, r2
   40500:	mov	r0, #0
   40504:	str	r1, [r3, #-92]	; 0xffffffa4
   40508:	mov	r2, #5
   4050c:	ldr	r1, [pc, #276]	; 40628 <__assert_fail@plt+0x2e29c>
   40510:	bl	11ea0 <dcgettext@plt>
   40514:	ldr	r7, [r4]
   40518:	mov	r5, r0
   4051c:	ldr	r0, [r4, #12]
   40520:	bl	403b4 <__assert_fail@plt+0x2e028>
   40524:	mov	r8, r0
   40528:	ldr	r0, [r4, #8]
   4052c:	bl	403b4 <__assert_fail@plt+0x2e028>
   40530:	mov	r2, r8
   40534:	mov	r1, r7
   40538:	mov	r3, r0
   4053c:	mov	r0, r5
   40540:	bl	11dbc <printf@plt>
   40544:	ldr	r1, [r4]
   40548:	ldr	r0, [r6]
   4054c:	bl	12170 <bfd_openw@plt>
   40550:	subs	r5, r0, #0
   40554:	beq	40614 <__assert_fail@plt+0x2e288>
   40558:	mov	r1, #1
   4055c:	bl	1202c <bfd_set_format@plt>
   40560:	cmp	r0, #0
   40564:	beq	405f4 <__assert_fail@plt+0x2e268>
   40568:	ldr	r8, [pc, #188]	; 4062c <__assert_fail@plt+0x2e2a0>
   4056c:	mov	r4, #2
   40570:	mov	r7, #1
   40574:	b	40584 <__assert_fail@plt+0x2e1f8>
   40578:	add	r4, r4, #1
   4057c:	cmp	r4, #89	; 0x59
   40580:	beq	405e4 <__assert_fail@plt+0x2e258>
   40584:	ldr	r3, [r5, #4]
   40588:	mov	r2, #0
   4058c:	mov	r1, r4
   40590:	ldr	r3, [r3, #340]	; 0x154
   40594:	mov	r0, r5
   40598:	blx	r3
   4059c:	cmp	r0, #0
   405a0:	beq	40578 <__assert_fail@plt+0x2e1ec>
   405a4:	mov	r1, #0
   405a8:	mov	r0, r4
   405ac:	bl	120c8 <bfd_printable_arch_mach@plt>
   405b0:	mov	r1, r0
   405b4:	mov	r0, r8
   405b8:	bl	11dbc <printf@plt>
   405bc:	ldr	r2, [r6, #8]
   405c0:	ldr	r3, [r6, #16]
   405c4:	add	r1, r2, r2, lsl #1
   405c8:	rsb	r2, r2, r1, lsl #3
   405cc:	add	r3, r3, r2, lsl #2
   405d0:	add	r3, r4, r3
   405d4:	add	r4, r4, #1
   405d8:	cmp	r4, #89	; 0x59
   405dc:	strb	r7, [r3, #-90]	; 0xffffffa6
   405e0:	bne	40584 <__assert_fail@plt+0x2e1f8>
   405e4:	mov	r0, r5
   405e8:	bl	12080 <bfd_close_all_done@plt>
   405ec:	ldr	r0, [r6, #4]
   405f0:	pop	{r4, r5, r6, r7, r8, pc}
   405f4:	bl	11f00 <bfd_get_error@plt>
   405f8:	cmp	r0, #5
   405fc:	beq	405e4 <__assert_fail@plt+0x2e258>
   40600:	ldr	r0, [r4]
   40604:	bl	403fc <__assert_fail@plt+0x2e070>
   40608:	mov	r3, #1
   4060c:	str	r3, [r6, #4]
   40610:	b	405e4 <__assert_fail@plt+0x2e258>
   40614:	ldr	r0, [r6]
   40618:	bl	403fc <__assert_fail@plt+0x2e070>
   4061c:	mov	r0, #1
   40620:	str	r0, [r6, #4]
   40624:	pop	{r4, r5, r6, r7, r8, pc}
   40628:	andeq	r2, r5, r0, ror r0
   4062c:	andeq	r2, r5, ip, lsl #1
   40630:	push	{r4, lr}
   40634:	bl	403fc <__assert_fail@plt+0x2e070>
   40638:	mov	r0, #1
   4063c:	bl	12218 <xexit@plt>
   40640:	ldr	r3, [pc, #72]	; 40690 <__assert_fail@plt+0x2e304>
   40644:	push	{r4, r5, r6, lr}
   40648:	mov	r5, r0
   4064c:	ldr	r0, [r3]
   40650:	mov	r6, r1
   40654:	ldr	r4, [pc, #56]	; 40694 <__assert_fail@plt+0x2e308>
   40658:	bl	11de0 <fflush@plt>
   4065c:	ldr	r3, [pc, #52]	; 40698 <__assert_fail@plt+0x2e30c>
   40660:	ldr	r1, [pc, #52]	; 4069c <__assert_fail@plt+0x2e310>
   40664:	ldr	r0, [r4]
   40668:	ldr	r2, [r3]
   4066c:	bl	120b0 <fprintf@plt>
   40670:	mov	r1, r5
   40674:	mov	r2, r6
   40678:	ldr	r0, [r4]
   4067c:	bl	121f4 <vfprintf@plt>
   40680:	ldr	r1, [r4]
   40684:	mov	r0, #10
   40688:	pop	{r4, r5, r6, lr}
   4068c:	b	12254 <putc@plt>
   40690:	andeq	r7, r6, r0, lsr r4
   40694:	andeq	r7, r6, r8, lsl #3
   40698:	ldrdeq	r9, [r6], -ip
   4069c:	muleq	r5, r4, r0
   406a0:	push	{r0, r1, r2, r3}
   406a4:	push	{lr}		; (str lr, [sp, #-4]!)
   406a8:	sub	sp, sp, #12
   406ac:	add	r3, sp, #20
   406b0:	ldr	r0, [sp, #16]
   406b4:	mov	r1, r3
   406b8:	str	r3, [sp, #4]
   406bc:	bl	40640 <__assert_fail@plt+0x2e2b4>
   406c0:	mov	r0, #1
   406c4:	bl	12218 <xexit@plt>
   406c8:	push	{r0, r1, r2, r3}
   406cc:	push	{lr}		; (str lr, [sp, #-4]!)
   406d0:	sub	sp, sp, #12
   406d4:	add	r3, sp, #20
   406d8:	mov	r1, r3
   406dc:	ldr	r0, [sp, #16]
   406e0:	str	r3, [sp, #4]
   406e4:	bl	40640 <__assert_fail@plt+0x2e2b4>
   406e8:	add	sp, sp, #12
   406ec:	pop	{lr}		; (ldr lr, [sp], #4)
   406f0:	add	sp, sp, #16
   406f4:	bx	lr
   406f8:	push	{r4, lr}
   406fc:	ldr	r0, [pc, #48]	; 40734 <__assert_fail@plt+0x2e3a8>
   40700:	bl	11e04 <bfd_set_default_target@plt>
   40704:	cmp	r0, #0
   40708:	popne	{r4, pc}
   4070c:	mov	r2, #5
   40710:	ldr	r1, [pc, #32]	; 40738 <__assert_fail@plt+0x2e3ac>
   40714:	bl	11ea0 <dcgettext@plt>
   40718:	mov	r4, r0
   4071c:	bl	11f00 <bfd_get_error@plt>
   40720:	bl	12284 <bfd_errmsg@plt>
   40724:	ldr	r1, [pc, #8]	; 40734 <__assert_fail@plt+0x2e3a8>
   40728:	mov	r2, r0
   4072c:	mov	r0, r4
   40730:	bl	406a0 <__assert_fail@plt+0x2e314>
   40734:	muleq	r5, ip, r0
   40738:	strheq	r2, [r5], -r8
   4073c:	ldr	r3, [pc, #112]	; 407b4 <__assert_fail@plt+0x2e428>
   40740:	push	{r4, r5, r6, lr}
   40744:	mov	r4, r0
   40748:	ldr	r5, [pc, #104]	; 407b8 <__assert_fail@plt+0x2e42c>
   4074c:	ldr	r0, [r3]
   40750:	bl	11de0 <fflush@plt>
   40754:	mov	r2, #5
   40758:	ldr	r1, [pc, #92]	; 407bc <__assert_fail@plt+0x2e430>
   4075c:	mov	r0, #0
   40760:	ldr	r6, [r5]
   40764:	bl	11ea0 <dcgettext@plt>
   40768:	ldr	r3, [pc, #80]	; 407c0 <__assert_fail@plt+0x2e434>
   4076c:	ldr	r2, [r3]
   40770:	mov	r1, r0
   40774:	mov	r0, r6
   40778:	bl	120b0 <fprintf@plt>
   4077c:	ldr	r2, [r4]
   40780:	cmp	r2, #0
   40784:	beq	407a4 <__assert_fail@plt+0x2e418>
   40788:	ldr	r6, [pc, #52]	; 407c4 <__assert_fail@plt+0x2e438>
   4078c:	mov	r1, r6
   40790:	ldr	r0, [r5]
   40794:	bl	120b0 <fprintf@plt>
   40798:	ldr	r2, [r4, #4]!
   4079c:	cmp	r2, #0
   407a0:	bne	4078c <__assert_fail@plt+0x2e400>
   407a4:	ldr	r1, [r5]
   407a8:	mov	r0, #10
   407ac:	pop	{r4, r5, r6, lr}
   407b0:	b	1220c <fputc@plt>
   407b4:	andeq	r7, r6, r0, lsr r4
   407b8:	andeq	r7, r6, r8, lsl #3
   407bc:	andeq	r2, r5, r4, ror #1
   407c0:	ldrdeq	r9, [r6], -ip
   407c4:	andeq	fp, r4, ip, asr #18
   407c8:	push	{r4, r5, r6, r7, r8, lr}
   407cc:	subs	r4, r0, #0
   407d0:	mov	r2, #5
   407d4:	mov	r5, r1
   407d8:	beq	40844 <__assert_fail@plt+0x2e4b8>
   407dc:	ldr	r1, [pc, #120]	; 4085c <__assert_fail@plt+0x2e4d0>
   407e0:	mov	r0, #0
   407e4:	bl	11ea0 <dcgettext@plt>
   407e8:	mov	r2, r4
   407ec:	mov	r1, r0
   407f0:	mov	r0, r5
   407f4:	bl	120b0 <fprintf@plt>
   407f8:	bl	11ef4 <bfd_target_list@plt>
   407fc:	ldr	r2, [r0]
   40800:	mov	r7, r0
   40804:	cmp	r2, #0
   40808:	beq	4082c <__assert_fail@plt+0x2e4a0>
   4080c:	ldr	r6, [pc, #76]	; 40860 <__assert_fail@plt+0x2e4d4>
   40810:	mov	r4, r0
   40814:	mov	r1, r6
   40818:	mov	r0, r5
   4081c:	bl	120b0 <fprintf@plt>
   40820:	ldr	r2, [r4, #4]!
   40824:	cmp	r2, #0
   40828:	bne	40814 <__assert_fail@plt+0x2e488>
   4082c:	mov	r1, r5
   40830:	mov	r0, #10
   40834:	bl	1220c <fputc@plt>
   40838:	mov	r0, r7
   4083c:	pop	{r4, r5, r6, r7, r8, lr}
   40840:	b	11e10 <free@plt>
   40844:	ldr	r1, [pc, #24]	; 40864 <__assert_fail@plt+0x2e4d8>
   40848:	bl	11ea0 <dcgettext@plt>
   4084c:	mov	r1, r0
   40850:	mov	r0, r5
   40854:	bl	120b0 <fprintf@plt>
   40858:	b	407f8 <__assert_fail@plt+0x2e46c>
   4085c:	andeq	r2, r5, r0, lsl r1
   40860:	andeq	fp, r4, ip, asr #18
   40864:	strdeq	r2, [r5], -ip
   40868:	push	{r4, r5, r6, r7, r8, lr}
   4086c:	subs	r4, r0, #0
   40870:	mov	r2, #5
   40874:	mov	r5, r1
   40878:	beq	408e4 <__assert_fail@plt+0x2e558>
   4087c:	ldr	r1, [pc, #120]	; 408fc <__assert_fail@plt+0x2e570>
   40880:	mov	r0, #0
   40884:	bl	11ea0 <dcgettext@plt>
   40888:	mov	r2, r4
   4088c:	mov	r1, r0
   40890:	mov	r0, r5
   40894:	bl	120b0 <fprintf@plt>
   40898:	bl	11dec <bfd_arch_list@plt>
   4089c:	ldr	r2, [r0]
   408a0:	mov	r7, r0
   408a4:	cmp	r2, #0
   408a8:	beq	408cc <__assert_fail@plt+0x2e540>
   408ac:	ldr	r6, [pc, #76]	; 40900 <__assert_fail@plt+0x2e574>
   408b0:	mov	r4, r0
   408b4:	mov	r1, r6
   408b8:	mov	r0, r5
   408bc:	bl	120b0 <fprintf@plt>
   408c0:	ldr	r2, [r4, #4]!
   408c4:	cmp	r2, #0
   408c8:	bne	408b4 <__assert_fail@plt+0x2e528>
   408cc:	mov	r1, r5
   408d0:	mov	r0, #10
   408d4:	bl	1220c <fputc@plt>
   408d8:	mov	r0, r7
   408dc:	pop	{r4, r5, r6, r7, r8, lr}
   408e0:	b	11e10 <free@plt>
   408e4:	ldr	r1, [pc, #24]	; 40904 <__assert_fail@plt+0x2e578>
   408e8:	bl	11ea0 <dcgettext@plt>
   408ec:	mov	r1, r0
   408f0:	mov	r0, r5
   408f4:	bl	120b0 <fprintf@plt>
   408f8:	b	40898 <__assert_fail@plt+0x2e50c>
   408fc:	andeq	r2, r5, r4, asr #2
   40900:	andeq	fp, r4, ip, asr #18
   40904:	andeq	r2, r5, r8, lsr #2
   40908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4090c:	mov	r2, #5
   40910:	sub	sp, sp, #44	; 0x2c
   40914:	ldr	r1, [pc, #668]	; 40bb8 <__assert_fail@plt+0x2e82c>
   40918:	mov	r0, #0
   4091c:	bl	11ea0 <dcgettext@plt>
   40920:	ldr	r1, [pc, #660]	; 40bbc <__assert_fail@plt+0x2e830>
   40924:	bl	11dbc <printf@plt>
   40928:	mov	r0, #0
   4092c:	bl	47228 <warn@@Base+0x5a58>
   40930:	mov	r3, #0
   40934:	add	r1, sp, #20
   40938:	str	r3, [sp, #24]
   4093c:	str	r3, [sp, #28]
   40940:	str	r3, [sp, #32]
   40944:	str	r3, [sp, #36]	; 0x24
   40948:	str	r0, [sp, #20]
   4094c:	ldr	r0, [pc, #620]	; 40bc0 <__assert_fail@plt+0x2e834>
   40950:	bl	12104 <bfd_iterate_over_targets@plt>
   40954:	ldr	r0, [sp, #20]
   40958:	bl	11ec4 <unlink@plt>
   4095c:	ldr	r0, [sp, #20]
   40960:	bl	11e10 <free@plt>
   40964:	ldr	r4, [sp, #24]
   40968:	cmp	r4, #0
   4096c:	beq	4097c <__assert_fail@plt+0x2e5f0>
   40970:	mov	r0, r4
   40974:	add	sp, sp, #44	; 0x2c
   40978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4097c:	mov	r7, r4
   40980:	mov	r5, #2
   40984:	mov	r1, #0
   40988:	mov	r0, r5
   4098c:	bl	120c8 <bfd_printable_arch_mach@plt>
   40990:	bl	12074 <strlen@plt>
   40994:	add	r5, r5, #1
   40998:	cmp	r7, r0
   4099c:	movlt	r7, r0
   409a0:	cmp	r5, #89	; 0x59
   409a4:	bne	40984 <__assert_fail@plt+0x2e5f8>
   409a8:	ldr	r0, [pc, #532]	; 40bc4 <__assert_fail@plt+0x2e838>
   409ac:	bl	11fcc <getenv@plt>
   409b0:	cmp	r0, #0
   409b4:	beq	409d0 <__assert_fail@plt+0x2e644>
   409b8:	mov	r2, #10
   409bc:	mov	r1, #0
   409c0:	bl	11da4 <strtol@plt>
   409c4:	subs	r3, r0, #0
   409c8:	str	r3, [sp, #12]
   409cc:	bne	409d8 <__assert_fail@plt+0x2e64c>
   409d0:	mov	r3, #80	; 0x50
   409d4:	str	r3, [sp, #12]
   409d8:	ldr	r9, [sp, #28]
   409dc:	ldr	fp, [pc, #484]	; 40bc8 <__assert_fail@plt+0x2e83c>
   409e0:	cmp	r4, r9
   409e4:	bge	40ab0 <__assert_fail@plt+0x2e724>
   409e8:	add	r3, r4, r4, lsl #1
   409ec:	ldr	r2, [sp, #12]
   409f0:	rsb	r3, r4, r3, lsl #3
   409f4:	ldr	r8, [sp, #36]	; 0x24
   409f8:	sub	r6, r2, r7
   409fc:	lsl	sl, r3, #2
   40a00:	add	r8, r8, sl
   40a04:	sub	r6, r6, #1
   40a08:	mov	r5, r4
   40a0c:	ldr	r0, [r8]
   40a10:	bl	12074 <strlen@plt>
   40a14:	sub	r6, r6, #1
   40a18:	add	r8, r8, #92	; 0x5c
   40a1c:	subs	r6, r6, r0
   40a20:	bmi	40ac0 <__assert_fail@plt+0x2e734>
   40a24:	add	r5, r5, #1
   40a28:	cmp	r9, r5
   40a2c:	bne	40a0c <__assert_fail@plt+0x2e680>
   40a30:	ldr	r2, [pc, #404]	; 40bcc <__assert_fail@plt+0x2e840>
   40a34:	add	r1, r7, #1
   40a38:	ldr	r0, [pc, #400]	; 40bd0 <__assert_fail@plt+0x2e844>
   40a3c:	bl	11dbc <printf@plt>
   40a40:	mov	r8, sl
   40a44:	mov	r6, r4
   40a48:	ldr	r3, [sp, #36]	; 0x24
   40a4c:	add	r6, r6, #1
   40a50:	ldr	r0, [pc, #380]	; 40bd4 <__assert_fail@plt+0x2e848>
   40a54:	ldr	r1, [r3, r8]
   40a58:	bl	11dbc <printf@plt>
   40a5c:	cmp	r6, r5
   40a60:	add	r8, r8, #92	; 0x5c
   40a64:	bne	40a48 <__assert_fail@plt+0x2e6bc>
   40a68:	ldr	r1, [fp]
   40a6c:	mov	r0, #10
   40a70:	bl	12254 <putc@plt>
   40a74:	mov	r6, #2
   40a78:	mov	r1, #0
   40a7c:	mov	r0, r6
   40a80:	bl	120c8 <bfd_printable_arch_mach@plt>
   40a84:	ldr	r1, [pc, #332]	; 40bd8 <__assert_fail@plt+0x2e84c>
   40a88:	bl	11d98 <strcmp@plt>
   40a8c:	cmp	r0, #0
   40a90:	bne	40adc <__assert_fail@plt+0x2e750>
   40a94:	add	r6, r6, #1
   40a98:	cmp	r6, #89	; 0x59
   40a9c:	bne	40a78 <__assert_fail@plt+0x2e6ec>
   40aa0:	ldr	r9, [sp, #28]
   40aa4:	mov	r4, r5
   40aa8:	cmp	r4, r9
   40aac:	blt	409e8 <__assert_fail@plt+0x2e65c>
   40ab0:	ldr	r4, [sp, #24]
   40ab4:	mov	r0, r4
   40ab8:	add	sp, sp, #44	; 0x2c
   40abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40ac0:	ldr	r2, [pc, #260]	; 40bcc <__assert_fail@plt+0x2e840>
   40ac4:	add	r1, r7, #1
   40ac8:	ldr	r0, [pc, #256]	; 40bd0 <__assert_fail@plt+0x2e844>
   40acc:	bl	11dbc <printf@plt>
   40ad0:	cmp	r4, r5
   40ad4:	bne	40a40 <__assert_fail@plt+0x2e6b4>
   40ad8:	b	40a68 <__assert_fail@plt+0x2e6dc>
   40adc:	mov	r1, #0
   40ae0:	mov	r0, r6
   40ae4:	bl	120c8 <bfd_printable_arch_mach@plt>
   40ae8:	mov	r1, r7
   40aec:	mov	r2, r0
   40af0:	ldr	r0, [pc, #228]	; 40bdc <__assert_fail@plt+0x2e850>
   40af4:	bl	11dbc <printf@plt>
   40af8:	cmp	r4, r5
   40afc:	beq	40b58 <__assert_fail@plt+0x2e7cc>
   40b00:	mov	r8, sl
   40b04:	mov	r9, r4
   40b08:	sub	r3, r6, #2
   40b0c:	str	r3, [sp, #4]
   40b10:	ldr	r2, [sp, #36]	; 0x24
   40b14:	ldr	r0, [sp, #4]
   40b18:	add	r3, r2, r8
   40b1c:	add	r3, r3, r0
   40b20:	ldr	r1, [fp]
   40b24:	ldrb	r3, [r3, #4]
   40b28:	ldr	r0, [r2, r8]
   40b2c:	cmp	r3, #0
   40b30:	beq	40b68 <__assert_fail@plt+0x2e7dc>
   40b34:	bl	12314 <fputs@plt>
   40b38:	ldr	r1, [fp]
   40b3c:	add	r9, r9, #1
   40b40:	cmp	r5, r9
   40b44:	add	r8, r8, #92	; 0x5c
   40b48:	beq	40b5c <__assert_fail@plt+0x2e7d0>
   40b4c:	mov	r0, #32
   40b50:	bl	12254 <putc@plt>
   40b54:	b	40b10 <__assert_fail@plt+0x2e784>
   40b58:	ldr	r1, [fp]
   40b5c:	mov	r0, #10
   40b60:	bl	12254 <putc@plt>
   40b64:	b	40a94 <__assert_fail@plt+0x2e708>
   40b68:	str	r1, [sp, #8]
   40b6c:	bl	12074 <strlen@plt>
   40b70:	ldr	r1, [sp, #8]
   40b74:	cmp	r0, #0
   40b78:	sub	r3, r0, #1
   40b7c:	beq	40b3c <__assert_fail@plt+0x2e7b0>
   40b80:	str	sl, [sp, #8]
   40b84:	mov	sl, r4
   40b88:	mov	r4, r3
   40b8c:	b	40b94 <__assert_fail@plt+0x2e808>
   40b90:	ldr	r1, [fp]
   40b94:	sub	r4, r4, #1
   40b98:	mov	r0, #45	; 0x2d
   40b9c:	bl	12254 <putc@plt>
   40ba0:	cmn	r4, #1
   40ba4:	bne	40b90 <__assert_fail@plt+0x2e804>
   40ba8:	mov	r4, sl
   40bac:	ldr	r1, [fp]
   40bb0:	ldr	sl, [sp, #8]
   40bb4:	b	40b3c <__assert_fail@plt+0x2e7b0>
   40bb8:	andeq	r2, r5, r4, ror #2
   40bbc:	andeq	r2, r5, r0, lsl #3
   40bc0:	andeq	r0, r4, r0, lsl #9
   40bc4:	andeq	r2, r5, r4, lsr #3
   40bc8:	andeq	r7, r6, r0, lsr r4
   40bcc:	andeq	r8, r4, ip, lsl ip
   40bd0:	andeq	r2, r5, ip, lsr #3
   40bd4:	andeq	fp, r4, r0, ror sl
   40bd8:			; <UNDEFINED> instruction: 0x000521b4
   40bdc:	ldrdeq	sl, [r4], -r0
   40be0:	cmp	r2, #0
   40be4:	push	{r4, r5, r6, r7, lr}
   40be8:	mov	r5, r0
   40bec:	sub	sp, sp, #180	; 0xb4
   40bf0:	mov	r4, r1
   40bf4:	mov	r6, r3
   40bf8:	beq	40c18 <__assert_fail@plt+0x2e88c>
   40bfc:	ldr	r3, [r1, #4]
   40c00:	mov	r0, r4
   40c04:	add	r1, sp, #72	; 0x48
   40c08:	ldr	r3, [r3, #252]	; 0xfc
   40c0c:	blx	r3
   40c10:	cmp	r0, #0
   40c14:	beq	40c74 <__assert_fail@plt+0x2e8e8>
   40c18:	mov	r1, r5
   40c1c:	ldr	r0, [r4]
   40c20:	bl	12314 <fputs@plt>
   40c24:	cmp	r6, #0
   40c28:	beq	40c44 <__assert_fail@plt+0x2e8b8>
   40c2c:	ldrb	r3, [r4, #44]	; 0x2c
   40c30:	tst	r3, #1
   40c34:	beq	40c58 <__assert_fail@plt+0x2e8cc>
   40c38:	ldrd	r2, [r4, #64]	; 0x40
   40c3c:	orrs	r1, r2, r3
   40c40:	bne	40c64 <__assert_fail@plt+0x2e8d8>
   40c44:	mov	r1, r5
   40c48:	mov	r0, #10
   40c4c:	bl	1220c <fputc@plt>
   40c50:	add	sp, sp, #180	; 0xb4
   40c54:	pop	{r4, r5, r6, r7, pc}
   40c58:	ldrd	r2, [r4, #56]	; 0x38
   40c5c:	orrs	r1, r2, r3
   40c60:	beq	40c44 <__assert_fail@plt+0x2e8b8>
   40c64:	ldr	r1, [pc, #148]	; 40d00 <__assert_fail@plt+0x2e974>
   40c68:	mov	r0, r5
   40c6c:	bl	120b0 <fprintf@plt>
   40c70:	b	40c44 <__assert_fail@plt+0x2e8b8>
   40c74:	ldr	r3, [sp, #152]	; 0x98
   40c78:	add	r0, sp, #16
   40c7c:	str	r3, [sp, #16]
   40c80:	bl	11e88 <ctime@plt>
   40c84:	subs	r2, r0, #0
   40c88:	beq	40ce0 <__assert_fail@plt+0x2e954>
   40c8c:	add	r7, sp, #32
   40c90:	add	r3, r2, #20
   40c94:	mov	r0, r7
   40c98:	add	r2, r2, #4
   40c9c:	ldr	r1, [pc, #96]	; 40d04 <__assert_fail@plt+0x2e978>
   40ca0:	bl	1223c <sprintf@plt>
   40ca4:	add	r1, sp, #20
   40ca8:	ldr	r0, [sp, #88]	; 0x58
   40cac:	bl	4117c <__assert_fail@plt+0x2edf0>
   40cb0:	ldr	r2, [sp, #120]	; 0x78
   40cb4:	ldr	r3, [sp, #100]	; 0x64
   40cb8:	mov	ip, #0
   40cbc:	stmib	sp, {r2, r7}
   40cc0:	str	r3, [sp]
   40cc4:	add	r2, sp, #21
   40cc8:	ldr	r3, [sp, #96]	; 0x60
   40ccc:	ldr	r1, [pc, #52]	; 40d08 <__assert_fail@plt+0x2e97c>
   40cd0:	mov	r0, r5
   40cd4:	strb	ip, [sp, #30]
   40cd8:	bl	120b0 <fprintf@plt>
   40cdc:	b	40c18 <__assert_fail@plt+0x2e88c>
   40ce0:	mov	r2, #5
   40ce4:	ldr	r1, [pc, #32]	; 40d0c <__assert_fail@plt+0x2e980>
   40ce8:	bl	11ea0 <dcgettext@plt>
   40cec:	add	r7, sp, #32
   40cf0:	mov	r1, r0
   40cf4:	mov	r0, r7
   40cf8:	bl	1223c <sprintf@plt>
   40cfc:	b	40ca4 <__assert_fail@plt+0x2e918>
   40d00:	strdeq	r2, [r5], -r4
   40d04:	ldrdeq	r2, [r5], -r4
   40d08:	andeq	r2, r5, r0, ror #3
   40d0c:	andeq	r2, r5, r0, asr #3
   40d10:	push	{r4, lr}
   40d14:	bl	40338 <__assert_fail@plt+0x2dfac>
   40d18:	mov	r4, r0
   40d1c:	bl	11fd8 <mkstemp64@plt>
   40d20:	cmn	r0, #1
   40d24:	beq	40d34 <__assert_fail@plt+0x2e9a8>
   40d28:	bl	12350 <close@plt>
   40d2c:	mov	r0, r4
   40d30:	pop	{r4, pc}
   40d34:	mov	r0, r4
   40d38:	bl	11e10 <free@plt>
   40d3c:	mov	r4, #0
   40d40:	b	40d2c <__assert_fail@plt+0x2e9a0>
   40d44:	push	{r4, lr}
   40d48:	bl	40338 <__assert_fail@plt+0x2dfac>
   40d4c:	pop	{r4, lr}
   40d50:	b	12248 <mkdtemp@plt>
   40d54:	push	{r4, r5, lr}
   40d58:	sub	sp, sp, #12
   40d5c:	mov	r4, r1
   40d60:	mov	r2, #0
   40d64:	add	r1, sp, #4
   40d68:	mov	r5, r0
   40d6c:	bl	11d8c <bfd_scan_vma@plt>
   40d70:	ldr	r3, [sp, #4]
   40d74:	ldrb	r3, [r3]
   40d78:	cmp	r3, #0
   40d7c:	bne	40d88 <__assert_fail@plt+0x2e9fc>
   40d80:	add	sp, sp, #12
   40d84:	pop	{r4, r5, pc}
   40d88:	mov	r2, #5
   40d8c:	ldr	r1, [pc, #16]	; 40da4 <__assert_fail@plt+0x2ea18>
   40d90:	mov	r0, #0
   40d94:	bl	11ea0 <dcgettext@plt>
   40d98:	mov	r2, r5
   40d9c:	mov	r1, r4
   40da0:	bl	406a0 <__assert_fail@plt+0x2e314>
   40da4:	strdeq	r2, [r5], -ip
   40da8:	push	{r4, r5, r6, lr}
   40dac:	subs	r4, r0, #0
   40db0:	sub	sp, sp, #104	; 0x68
   40db4:	beq	40e8c <__assert_fail@plt+0x2eb00>
   40db8:	mov	r2, sp
   40dbc:	mov	r1, r4
   40dc0:	mov	r0, #3
   40dc4:	bl	12308 <__xstat64@plt>
   40dc8:	cmp	r0, #0
   40dcc:	blt	40e10 <__assert_fail@plt+0x2ea84>
   40dd0:	ldr	r3, [sp, #16]
   40dd4:	and	r3, r3, #61440	; 0xf000
   40dd8:	cmp	r3, #16384	; 0x4000
   40ddc:	moveq	r2, #5
   40de0:	ldreq	r1, [pc, #176]	; 40e98 <__assert_fail@plt+0x2eb0c>
   40de4:	beq	40e6c <__assert_fail@plt+0x2eae0>
   40de8:	cmp	r3, #32768	; 0x8000
   40dec:	movne	r2, #5
   40df0:	ldrne	r1, [pc, #164]	; 40e9c <__assert_fail@plt+0x2eb10>
   40df4:	bne	40e6c <__assert_fail@plt+0x2eae0>
   40df8:	ldrd	r0, [sp, #48]	; 0x30
   40dfc:	cmp	r0, #0
   40e00:	sbcs	r3, r1, #0
   40e04:	blt	40e64 <__assert_fail@plt+0x2ead8>
   40e08:	add	sp, sp, #104	; 0x68
   40e0c:	pop	{r4, r5, r6, pc}
   40e10:	bl	120ec <__errno_location@plt>
   40e14:	mov	r2, #5
   40e18:	ldr	r3, [r0]
   40e1c:	mov	r5, r0
   40e20:	cmp	r3, #2
   40e24:	ldreq	r1, [pc, #116]	; 40ea0 <__assert_fail@plt+0x2eb14>
   40e28:	beq	40e6c <__assert_fail@plt+0x2eae0>
   40e2c:	ldr	r1, [pc, #112]	; 40ea4 <__assert_fail@plt+0x2eb18>
   40e30:	mov	r0, #0
   40e34:	bl	11ea0 <dcgettext@plt>
   40e38:	mov	r6, r0
   40e3c:	ldr	r0, [r5]
   40e40:	bl	12014 <strerror@plt>
   40e44:	mov	r1, r4
   40e48:	mov	r2, r0
   40e4c:	mov	r0, r6
   40e50:	bl	406c8 <__assert_fail@plt+0x2e33c>
   40e54:	mvn	r0, #0
   40e58:	mvn	r1, #0
   40e5c:	add	sp, sp, #104	; 0x68
   40e60:	pop	{r4, r5, r6, pc}
   40e64:	ldr	r1, [pc, #60]	; 40ea8 <__assert_fail@plt+0x2eb1c>
   40e68:	mov	r2, #5
   40e6c:	mov	r0, #0
   40e70:	bl	11ea0 <dcgettext@plt>
   40e74:	mov	r1, r4
   40e78:	bl	406c8 <__assert_fail@plt+0x2e33c>
   40e7c:	mvn	r0, #0
   40e80:	mvn	r1, #0
   40e84:	add	sp, sp, #104	; 0x68
   40e88:	pop	{r4, r5, r6, pc}
   40e8c:	mvn	r0, #0
   40e90:	mvn	r1, #0
   40e94:	b	40e08 <__assert_fail@plt+0x2ea7c>
   40e98:	andeq	r2, r5, r0, asr r2
   40e9c:	andeq	r2, r5, r0, ror r2
   40ea0:	andeq	r2, r5, r0, lsl r2
   40ea4:	andeq	r2, r5, r4, lsr #4
   40ea8:	muleq	r5, r8, r2
   40eac:	push	{r4, r5, r6, r7, r8, lr}
   40eb0:	subs	r6, r0, #0
   40eb4:	beq	40f5c <__assert_fail@plt+0x2ebd0>
   40eb8:	ldr	r3, [r6, #140]	; 0x8c
   40ebc:	ldr	r5, [r6]
   40ec0:	cmp	r3, #0
   40ec4:	beq	40f1c <__assert_fail@plt+0x2eb90>
   40ec8:	ldrb	r2, [r3, #44]	; 0x2c
   40ecc:	tst	r2, #1
   40ed0:	bne	40f1c <__assert_fail@plt+0x2eb90>
   40ed4:	ldr	r8, [r3]
   40ed8:	ldr	r7, [pc, #144]	; 40f70 <__assert_fail@plt+0x2ebe4>
   40edc:	mov	r0, r8
   40ee0:	bl	12074 <strlen@plt>
   40ee4:	mov	r4, r0
   40ee8:	mov	r0, r5
   40eec:	bl	12074 <strlen@plt>
   40ef0:	ldr	r3, [r7]
   40ef4:	add	r4, r4, r0
   40ef8:	add	r4, r4, #3
   40efc:	cmp	r3, r4
   40f00:	bcc	40f24 <__assert_fail@plt+0x2eb98>
   40f04:	ldr	r0, [r7, #4]
   40f08:	mov	r3, r5
   40f0c:	mov	r2, r8
   40f10:	ldr	r1, [pc, #92]	; 40f74 <__assert_fail@plt+0x2ebe8>
   40f14:	bl	1223c <sprintf@plt>
   40f18:	ldr	r5, [r7, #4]
   40f1c:	mov	r0, r5
   40f20:	pop	{r4, r5, r6, r7, r8, pc}
   40f24:	cmp	r3, #0
   40f28:	bne	40f50 <__assert_fail@plt+0x2ebc4>
   40f2c:	add	r4, r4, r4, lsr #1
   40f30:	mov	r0, r4
   40f34:	str	r4, [r7]
   40f38:	bl	11f3c <xmalloc@plt>
   40f3c:	ldr	r3, [r6, #140]	; 0x8c
   40f40:	ldr	r5, [r6]
   40f44:	ldr	r8, [r3]
   40f48:	str	r0, [r7, #4]
   40f4c:	b	40f08 <__assert_fail@plt+0x2eb7c>
   40f50:	ldr	r0, [r7, #4]
   40f54:	bl	11e10 <free@plt>
   40f58:	b	40f2c <__assert_fail@plt+0x2eba0>
   40f5c:	ldr	r3, [pc, #20]	; 40f78 <__assert_fail@plt+0x2ebec>
   40f60:	ldr	r2, [pc, #20]	; 40f7c <__assert_fail@plt+0x2ebf0>
   40f64:	ldr	r1, [pc, #20]	; 40f80 <__assert_fail@plt+0x2ebf4>
   40f68:	ldr	r0, [pc, #20]	; 40f84 <__assert_fail@plt+0x2ebf8>
   40f6c:	bl	1238c <__assert_fail@plt>
   40f70:	andeq	r9, r6, r4, ror sp
   40f74:	strdeq	r2, [r5], -ip
   40f78:	andeq	r2, r5, r8, lsl r0
   40f7c:	andeq	r0, r0, r9, ror r2
   40f80:	ldrdeq	r2, [r5], -r4
   40f84:	andeq	r2, r5, ip, ror #5
   40f88:	push	{r3}		; (str r3, [sp, #-4]!)
   40f8c:	push	{r4, r5, r6, r7, r8, r9, lr}
   40f90:	sub	sp, sp, #8
   40f94:	mov	r8, r1
   40f98:	mov	r7, r2
   40f9c:	mov	r5, r0
   40fa0:	ldr	r6, [sp, #36]	; 0x24
   40fa4:	bl	11f00 <bfd_get_error@plt>
   40fa8:	bl	12284 <bfd_errmsg@plt>
   40fac:	ldr	r3, [pc, #204]	; 41080 <__assert_fail@plt+0x2ecf4>
   40fb0:	ldr	r4, [pc, #204]	; 41084 <__assert_fail@plt+0x2ecf8>
   40fb4:	mov	r9, r0
   40fb8:	ldr	r0, [r3]
   40fbc:	bl	11de0 <fflush@plt>
   40fc0:	ldr	r2, [pc, #192]	; 41088 <__assert_fail@plt+0x2ecfc>
   40fc4:	add	r3, sp, #40	; 0x28
   40fc8:	ldr	r1, [r4]
   40fcc:	ldr	r0, [r2]
   40fd0:	str	r3, [sp, #4]
   40fd4:	bl	12314 <fputs@plt>
   40fd8:	cmp	r8, #0
   40fdc:	beq	41010 <__assert_fail@plt+0x2ec84>
   40fe0:	cmp	r5, #0
   40fe4:	beq	41070 <__assert_fail@plt+0x2ece4>
   40fe8:	cmp	r7, #0
   40fec:	ldr	r0, [r4]
   40ff0:	beq	41014 <__assert_fail@plt+0x2ec88>
   40ff4:	ldr	r3, [r7]
   40ff8:	cmp	r3, #0
   40ffc:	beq	41014 <__assert_fail@plt+0x2ec88>
   41000:	mov	r2, r5
   41004:	ldr	r1, [pc, #128]	; 4108c <__assert_fail@plt+0x2ed00>
   41008:	bl	120b0 <fprintf@plt>
   4100c:	b	41020 <__assert_fail@plt+0x2ec94>
   41010:	ldr	r0, [r4]
   41014:	mov	r2, r5
   41018:	ldr	r1, [pc, #112]	; 41090 <__assert_fail@plt+0x2ed04>
   4101c:	bl	120b0 <fprintf@plt>
   41020:	cmp	r6, #0
   41024:	ldr	r0, [r4]
   41028:	beq	41054 <__assert_fail@plt+0x2ecc8>
   4102c:	mov	r3, r0
   41030:	mov	r2, #2
   41034:	mov	r1, #1
   41038:	ldr	r0, [pc, #84]	; 41094 <__assert_fail@plt+0x2ed08>
   4103c:	bl	11f24 <fwrite@plt>
   41040:	mov	r1, r6
   41044:	ldr	r2, [sp, #4]
   41048:	ldr	r0, [r4]
   4104c:	bl	121f4 <vfprintf@plt>
   41050:	ldr	r0, [r4]
   41054:	mov	r2, r9
   41058:	ldr	r1, [pc, #56]	; 41098 <__assert_fail@plt+0x2ed0c>
   4105c:	bl	120b0 <fprintf@plt>
   41060:	add	sp, sp, #8
   41064:	pop	{r4, r5, r6, r7, r8, r9, lr}
   41068:	add	sp, sp, #4
   4106c:	bx	lr
   41070:	mov	r0, r8
   41074:	bl	40eac <__assert_fail@plt+0x2eb20>
   41078:	mov	r5, r0
   4107c:	b	40fe8 <__assert_fail@plt+0x2ec5c>
   41080:	andeq	r7, r6, r0, lsr r4
   41084:	andeq	r7, r6, r8, lsl #3
   41088:	ldrdeq	r9, [r6], -ip
   4108c:	andeq	r2, r5, r4, lsl #6
   41090:	andeq	r2, r5, ip, lsl #6
   41094:	andeq	fp, r4, r0, lsr lr
   41098:	andeq	sp, r4, r4, lsl #18
   4109c:	ldrb	r3, [r0]
   410a0:	cmp	r3, #47	; 0x2f
   410a4:	beq	41120 <__assert_fail@plt+0x2ed94>
   410a8:	cmp	r3, #0
   410ac:	beq	410e4 <__assert_fail@plt+0x2ed58>
   410b0:	cmp	r3, #46	; 0x2e
   410b4:	beq	410ec <__assert_fail@plt+0x2ed60>
   410b8:	ldrb	r3, [r0, #1]!
   410bc:	cmp	r3, #0
   410c0:	cmpne	r3, #47	; 0x2f
   410c4:	bne	410b8 <__assert_fail@plt+0x2ed2c>
   410c8:	cmp	r3, #47	; 0x2f
   410cc:	bne	410a8 <__assert_fail@plt+0x2ed1c>
   410d0:	ldrb	r3, [r0, #1]!
   410d4:	cmp	r3, #47	; 0x2f
   410d8:	beq	410d0 <__assert_fail@plt+0x2ed44>
   410dc:	cmp	r3, #0
   410e0:	bne	410b0 <__assert_fail@plt+0x2ed24>
   410e4:	mov	r0, #1
   410e8:	bx	lr
   410ec:	ldrb	r3, [r0, #1]
   410f0:	cmp	r3, #46	; 0x2e
   410f4:	beq	4110c <__assert_fail@plt+0x2ed80>
   410f8:	cmp	r3, #0
   410fc:	cmpne	r3, #47	; 0x2f
   41100:	add	r0, r0, #1
   41104:	bne	410b8 <__assert_fail@plt+0x2ed2c>
   41108:	b	410d4 <__assert_fail@plt+0x2ed48>
   4110c:	ldrb	r3, [r0, #2]
   41110:	add	r0, r0, #2
   41114:	cmp	r3, #0
   41118:	cmpne	r3, #47	; 0x2f
   4111c:	bne	410b8 <__assert_fail@plt+0x2ed2c>
   41120:	mov	r0, #0
   41124:	bx	lr
   41128:	push	{r4, lr}
   4112c:	mov	r1, r0
   41130:	ldr	r2, [pc, #52]	; 4116c <__assert_fail@plt+0x2ede0>
   41134:	ldr	r0, [pc, #52]	; 41170 <__assert_fail@plt+0x2ede4>
   41138:	bl	11dbc <printf@plt>
   4113c:	mov	r2, #5
   41140:	ldr	r1, [pc, #44]	; 41174 <__assert_fail@plt+0x2ede8>
   41144:	mov	r0, #0
   41148:	bl	11ea0 <dcgettext@plt>
   4114c:	bl	11dbc <printf@plt>
   41150:	mov	r2, #5
   41154:	ldr	r1, [pc, #28]	; 41178 <__assert_fail@plt+0x2edec>
   41158:	mov	r0, #0
   4115c:	bl	11ea0 <dcgettext@plt>
   41160:	bl	11dbc <printf@plt>
   41164:	mov	r0, #0
   41168:	bl	12050 <exit@plt>
   4116c:	andeq	r2, r5, r0, lsl #3
   41170:	andeq	r2, r5, r0, lsl r3
   41174:	andeq	r2, r5, ip, lsl r3
   41178:	andeq	r2, r5, r0, asr r3
   4117c:	and	r3, r0, #61440	; 0xf000
   41180:	cmp	r3, #16384	; 0x4000
   41184:	push	{r4, r5, lr}
   41188:	moveq	r2, #100	; 0x64
   4118c:	beq	411cc <__assert_fail@plt+0x2ee40>
   41190:	cmp	r3, #40960	; 0xa000
   41194:	moveq	r2, #108	; 0x6c
   41198:	beq	411cc <__assert_fail@plt+0x2ee40>
   4119c:	cmp	r3, #24576	; 0x6000
   411a0:	moveq	r2, #98	; 0x62
   411a4:	beq	411cc <__assert_fail@plt+0x2ee40>
   411a8:	cmp	r3, #8192	; 0x2000
   411ac:	moveq	r2, #99	; 0x63
   411b0:	beq	411cc <__assert_fail@plt+0x2ee40>
   411b4:	cmp	r3, #49152	; 0xc000
   411b8:	moveq	r2, #115	; 0x73
   411bc:	beq	411cc <__assert_fail@plt+0x2ee40>
   411c0:	cmp	r3, #4096	; 0x1000
   411c4:	moveq	r2, #112	; 0x70
   411c8:	movne	r2, #45	; 0x2d
   411cc:	tst	r0, #256	; 0x100
   411d0:	movne	r5, #114	; 0x72
   411d4:	moveq	r5, #45	; 0x2d
   411d8:	tst	r0, #128	; 0x80
   411dc:	movne	r3, #119	; 0x77
   411e0:	moveq	r3, #45	; 0x2d
   411e4:	tst	r0, #64	; 0x40
   411e8:	movne	ip, #120	; 0x78
   411ec:	moveq	ip, #45	; 0x2d
   411f0:	tst	r0, #32
   411f4:	movne	r4, #114	; 0x72
   411f8:	moveq	r4, #45	; 0x2d
   411fc:	tst	r0, #16
   41200:	movne	lr, #119	; 0x77
   41204:	moveq	lr, #45	; 0x2d
   41208:	tst	r0, #8
   4120c:	strb	r2, [r1]
   41210:	movne	r2, #120	; 0x78
   41214:	moveq	r2, #45	; 0x2d
   41218:	tst	r0, #4
   4121c:	strb	r3, [r1, #2]
   41220:	movne	r3, #114	; 0x72
   41224:	moveq	r3, #45	; 0x2d
   41228:	tst	r0, #2
   4122c:	strb	lr, [r1, #5]
   41230:	movne	lr, #119	; 0x77
   41234:	moveq	lr, #45	; 0x2d
   41238:	tst	r0, #1
   4123c:	strb	r3, [r1, #7]
   41240:	movne	r3, #120	; 0x78
   41244:	moveq	r3, #45	; 0x2d
   41248:	tst	r0, #2048	; 0x800
   4124c:	strb	r5, [r1, #1]
   41250:	strb	ip, [r1, #3]
   41254:	strb	r4, [r1, #4]
   41258:	strb	r2, [r1, #6]
   4125c:	strb	lr, [r1, #8]
   41260:	strb	r3, [r1, #9]
   41264:	beq	41278 <__assert_fail@plt+0x2eeec>
   41268:	cmp	ip, #120	; 0x78
   4126c:	movne	ip, #83	; 0x53
   41270:	moveq	ip, #115	; 0x73
   41274:	strb	ip, [r1, #3]
   41278:	tst	r0, #1024	; 0x400
   4127c:	beq	41290 <__assert_fail@plt+0x2ef04>
   41280:	cmp	r2, #120	; 0x78
   41284:	movne	r2, #83	; 0x53
   41288:	moveq	r2, #115	; 0x73
   4128c:	strb	r2, [r1, #6]
   41290:	tst	r0, #512	; 0x200
   41294:	popeq	{r4, r5, pc}
   41298:	cmp	r3, #120	; 0x78
   4129c:	movne	r3, #84	; 0x54
   412a0:	moveq	r3, #116	; 0x74
   412a4:	strb	r3, [r1, #9]
   412a8:	pop	{r4, r5, pc}

000412ac <error@@Base>:
   412ac:	push	{r0, r1, r2, r3}
   412b0:	ldr	r3, [pc, #96]	; 41318 <error@@Base+0x6c>
   412b4:	push	{r4, r5, lr}
   412b8:	sub	sp, sp, #12
   412bc:	ldr	r4, [pc, #88]	; 4131c <error@@Base+0x70>
   412c0:	ldr	r0, [r3]
   412c4:	bl	11de0 <fflush@plt>
   412c8:	add	r3, sp, #28
   412cc:	mov	r2, #5
   412d0:	ldr	r1, [pc, #72]	; 41320 <error@@Base+0x74>
   412d4:	mov	r0, #0
   412d8:	ldr	r5, [r4]
   412dc:	str	r3, [sp, #4]
   412e0:	bl	11ea0 <dcgettext@plt>
   412e4:	ldr	r3, [pc, #56]	; 41324 <error@@Base+0x78>
   412e8:	ldr	r2, [r3]
   412ec:	mov	r1, r0
   412f0:	mov	r0, r5
   412f4:	bl	120b0 <fprintf@plt>
   412f8:	ldr	r0, [r4]
   412fc:	ldr	r1, [sp, #24]
   41300:	ldr	r2, [sp, #4]
   41304:	bl	121f4 <vfprintf@plt>
   41308:	add	sp, sp, #12
   4130c:	pop	{r4, r5, lr}
   41310:	add	sp, sp, #16
   41314:	bx	lr
   41318:	andeq	r7, r6, r0, lsr r4
   4131c:	andeq	r7, r6, r8, lsl #3
   41320:	andeq	r2, r5, r4, lsl r4
   41324:	ldrdeq	r9, [r6], -ip
   41328:	sub	r3, r1, #1
   4132c:	push	{r4, r5, r6, r7, r8, lr}
   41330:	cmp	r3, #7
   41334:	ldrls	pc, [pc, r3, lsl #2]
   41338:	b	4144c <error@@Base+0x1a0>
   4133c:	andeq	r1, r4, r8, lsr #7
   41340:			; <UNDEFINED> instruction: 0x000413b4
   41344:	andeq	r1, r4, r8, asr #7
   41348:	andeq	r1, r4, r8, ror #7
   4134c:	strdeq	r1, [r4], -r8
   41350:	andeq	r1, r4, r8, lsl #8
   41354:	andeq	r1, r4, r4, lsr #8
   41358:	andeq	r1, r4, ip, asr r3
   4135c:	ldrb	ip, [r0, #5]
   41360:	ldrb	r1, [r0, #1]
   41364:	ldrb	r2, [r0, #4]
   41368:	ldrb	r3, [r0]
   4136c:	ldrb	r4, [r0, #6]
   41370:	ldrb	lr, [r0, #2]
   41374:	orr	r2, r2, ip, lsl #8
   41378:	orr	r3, r3, r1, lsl #8
   4137c:	ldrb	ip, [r0, #7]
   41380:	ldrb	r1, [r0, #3]
   41384:	orr	r2, r2, r4, lsl #16
   41388:	orr	r3, r3, lr, lsl #16
   4138c:	orr	r0, r2, ip, lsl #24
   41390:	orr	r1, r3, r1, lsl #24
   41394:	rev	r2, r0
   41398:	rev	r3, r1
   4139c:	mov	r0, r2
   413a0:	mov	r1, r3
   413a4:	pop	{r4, r5, r6, r7, r8, pc}
   413a8:	ldrb	r2, [r0]
   413ac:	mov	r3, #0
   413b0:	b	4139c <error@@Base+0xf0>
   413b4:	ldrh	r2, [r0]
   413b8:	mov	r3, #0
   413bc:	rev16	r2, r2
   413c0:	uxth	r2, r2
   413c4:	b	4139c <error@@Base+0xf0>
   413c8:	ldrb	r3, [r0]
   413cc:	ldrb	r1, [r0, #1]
   413d0:	ldrb	r0, [r0, #2]
   413d4:	lsl	r2, r3, #16
   413d8:	orr	r2, r2, r1, lsl #8
   413dc:	orr	r2, r2, r0
   413e0:	mov	r3, #0
   413e4:	b	4139c <error@@Base+0xf0>
   413e8:	ldr	r2, [r0]
   413ec:	mov	r3, #0
   413f0:	rev	r2, r2
   413f4:	b	4139c <error@@Base+0xf0>
   413f8:	ldr	r1, [r0, #1]
   413fc:	ldrb	r3, [r0]
   41400:	rev	r2, r1
   41404:	b	4139c <error@@Base+0xf0>
   41408:	ldrb	r4, [r0]
   4140c:	ldr	r1, [r0, #2]
   41410:	ldrb	r0, [r0, #1]
   41414:	mov	r5, #0
   41418:	rev	r2, r1
   4141c:	orr	r3, r0, r4, lsl #8
   41420:	b	4139c <error@@Base+0xf0>
   41424:	ldrb	r6, [r0, #1]
   41428:	ldr	r1, [r0, #3]
   4142c:	ldrb	r4, [r0, #2]
   41430:	ldrb	r0, [r0]
   41434:	mov	r7, #0
   41438:	orr	r4, r4, r6, lsl #8
   4143c:	mov	r5, #0
   41440:	rev	r2, r1
   41444:	orr	r3, r4, r0, lsl #16
   41448:	b	4139c <error@@Base+0xf0>
   4144c:	mov	r4, r1
   41450:	mov	r2, #5
   41454:	ldr	r1, [pc, #16]	; 4146c <error@@Base+0x1c0>
   41458:	mov	r0, #0
   4145c:	bl	11ea0 <dcgettext@plt>
   41460:	mov	r1, r4
   41464:	bl	412ac <error@@Base>
   41468:	bl	1232c <abort@plt>
   4146c:	andeq	r2, r5, r0, lsr #8
   41470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41474:	mov	r5, #0
   41478:	ldrb	r7, [r0, #110]	; 0x6e
   4147c:	mov	r4, r0
   41480:	strb	r5, [r0, #110]	; 0x6e
   41484:	sub	sp, sp, #28
   41488:	mov	r6, r1
   4148c:	mov	r8, r2
   41490:	mov	r1, r5
   41494:	add	r0, r0, #100	; 0x64
   41498:	mov	r2, #10
   4149c:	bl	12068 <strtoul@plt>
   414a0:	strb	r7, [r4, #110]	; 0x6e
   414a4:	subs	r7, r0, #0
   414a8:	blt	415f4 <error@@Base+0x348>
   414ac:	ldr	r3, [r4, #40]	; 0x28
   414b0:	add	r7, r7, #1
   414b4:	bic	r7, r7, #1
   414b8:	add	r3, r3, #60	; 0x3c
   414bc:	add	r3, r3, r7
   414c0:	cmp	r8, #0
   414c4:	str	r3, [r4, #40]	; 0x28
   414c8:	beq	41514 <error@@Base+0x268>
   414cc:	cmp	r7, r6
   414d0:	bcc	4155c <error@@Base+0x2b0>
   414d4:	add	r0, sp, #16
   414d8:	ldr	r3, [r4, #4]
   414dc:	mov	r2, r6
   414e0:	mov	r1, #1
   414e4:	bl	11f78 <fread@plt>
   414e8:	cmp	r6, r0
   414ec:	movne	r0, r5
   414f0:	beq	41578 <error@@Base+0x2cc>
   414f4:	ldr	r1, [pc, #680]	; 417a4 <error@@Base+0x4f8>
   414f8:	mov	r2, #5
   414fc:	bl	11ea0 <dcgettext@plt>
   41500:	ldr	r1, [r4]
   41504:	bl	412ac <error@@Base>
   41508:	mov	r0, #0
   4150c:	add	sp, sp, #28
   41510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41514:	mov	r1, r7
   41518:	mov	r2, #1
   4151c:	ldr	r0, [r4, #4]
   41520:	bl	122fc <fseek@plt>
   41524:	cmp	r0, #0
   41528:	bne	41714 <error@@Base+0x468>
   4152c:	ldr	r3, [r4, #4]
   41530:	mov	r2, #60	; 0x3c
   41534:	mov	r1, #1
   41538:	add	r0, r4, #52	; 0x34
   4153c:	bl	11f78 <fread@plt>
   41540:	cmp	r0, #60	; 0x3c
   41544:	cmpne	r0, #0
   41548:	moveq	r0, #1
   4154c:	beq	4150c <error@@Base+0x260>
   41550:	mov	r2, #5
   41554:	ldr	r1, [pc, #588]	; 417a8 <error@@Base+0x4fc>
   41558:	b	4171c <error@@Base+0x470>
   4155c:	mov	r0, r5
   41560:	mov	r2, #5
   41564:	ldr	r1, [pc, #576]	; 417ac <error@@Base+0x500>
   41568:	bl	11ea0 <dcgettext@plt>
   4156c:	ldr	r1, [r4]
   41570:	bl	412ac <error@@Base>
   41574:	b	41508 <error@@Base+0x25c>
   41578:	add	r0, sp, #16
   4157c:	mov	r1, r6
   41580:	bl	41328 <error@@Base+0x7c>
   41584:	mov	fp, #0
   41588:	sub	r7, r7, r6
   4158c:	mov	sl, r7
   41590:	umull	r2, r3, r6, r0
   41594:	mla	r3, r6, r1, r3
   41598:	mov	r8, r0
   4159c:	cmp	fp, r3
   415a0:	cmpeq	r7, r2
   415a4:	movcc	r3, #1
   415a8:	movcs	r3, #0
   415ac:	cmp	r1, fp
   415b0:	cmpeq	r0, r7
   415b4:	mov	r9, r1
   415b8:	movls	sl, r3
   415bc:	orrhi	sl, r3, #1
   415c0:	cmp	sl, #0
   415c4:	strd	r8, [r4, #8]
   415c8:	beq	4161c <error@@Base+0x370>
   415cc:	mov	r0, r5
   415d0:	mov	r2, #5
   415d4:	ldr	r1, [pc, #468]	; 417b0 <error@@Base+0x504>
   415d8:	bl	11ea0 <dcgettext@plt>
   415dc:	str	r7, [sp]
   415e0:	mov	r3, r6
   415e4:	ldr	r2, [r4, #8]
   415e8:	ldr	r1, [r4]
   415ec:	bl	412ac <error@@Base>
   415f0:	b	41508 <error@@Base+0x25c>
   415f4:	mov	r2, #5
   415f8:	ldr	r1, [pc, #436]	; 417b4 <error@@Base+0x508>
   415fc:	mov	r0, r5
   41600:	bl	11ea0 <dcgettext@plt>
   41604:	mov	r2, r7
   41608:	ldr	r1, [r4]
   4160c:	bl	412ac <error@@Base>
   41610:	mov	r0, r5
   41614:	add	sp, sp, #28
   41618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4161c:	mul	r0, r6, r0
   41620:	bl	11ffc <malloc@plt>
   41624:	subs	r5, r0, #0
   41628:	beq	41740 <error@@Base+0x494>
   4162c:	mov	r2, r8
   41630:	ldr	r3, [r4, #4]
   41634:	mov	r1, r6
   41638:	bl	11f78 <fread@plt>
   4163c:	ldrd	r2, [r4, #8]
   41640:	mov	r9, #0
   41644:	cmp	r9, r3
   41648:	cmpeq	r0, r2
   4164c:	mov	r8, r0
   41650:	bne	41730 <error@@Base+0x484>
   41654:	mul	r3, r6, r0
   41658:	lsl	r0, r0, #3
   4165c:	sub	r3, r7, r3
   41660:	str	r3, [sp, #12]
   41664:	bl	11ffc <malloc@plt>
   41668:	cmp	r0, #0
   4166c:	mov	fp, r0
   41670:	str	r0, [r4, #16]
   41674:	beq	41784 <error@@Base+0x4d8>
   41678:	orrs	r3, r8, r9
   4167c:	beq	416c0 <error@@Base+0x414>
   41680:	mov	r7, sl
   41684:	mov	sl, r5
   41688:	b	41690 <error@@Base+0x3e4>
   4168c:	ldr	fp, [r4, #16]
   41690:	mov	r0, sl
   41694:	mov	r1, r6
   41698:	bl	41328 <error@@Base+0x7c>
   4169c:	lsl	r3, r7, #3
   416a0:	mov	r9, #0
   416a4:	add	r7, r7, #1
   416a8:	add	sl, sl, r6
   416ac:	strd	r0, [fp, r3]
   416b0:	ldrd	r2, [r4, #8]
   416b4:	cmp	r9, r3
   416b8:	cmpeq	r7, r2
   416bc:	bcc	4168c <error@@Base+0x3e0>
   416c0:	mov	r0, r5
   416c4:	bl	11e10 <free@plt>
   416c8:	ldr	r3, [sp, #12]
   416cc:	cmp	r3, #0
   416d0:	beq	41754 <error@@Base+0x4a8>
   416d4:	ldr	r0, [sp, #12]
   416d8:	bl	11ffc <malloc@plt>
   416dc:	cmp	r0, #0
   416e0:	str	r0, [r4, #20]
   416e4:	beq	41770 <error@@Base+0x4c4>
   416e8:	ldr	r5, [sp, #12]
   416ec:	ldr	r3, [r4, #4]
   416f0:	str	r5, [r4, #24]
   416f4:	mov	r2, r5
   416f8:	mov	r1, #1
   416fc:	bl	11f78 <fread@plt>
   41700:	cmp	r5, r0
   41704:	beq	4152c <error@@Base+0x280>
   41708:	mov	r2, #5
   4170c:	ldr	r1, [pc, #164]	; 417b8 <error@@Base+0x50c>
   41710:	b	4171c <error@@Base+0x470>
   41714:	ldr	r1, [pc, #160]	; 417bc <error@@Base+0x510>
   41718:	mov	r2, #5
   4171c:	mov	r0, #0
   41720:	bl	11ea0 <dcgettext@plt>
   41724:	ldr	r1, [r4]
   41728:	bl	412ac <error@@Base>
   4172c:	b	41508 <error@@Base+0x25c>
   41730:	mov	r0, r5
   41734:	bl	11e10 <free@plt>
   41738:	mov	r0, sl
   4173c:	b	414f4 <error@@Base+0x248>
   41740:	mov	r2, #5
   41744:	ldr	r1, [pc, #116]	; 417c0 <error@@Base+0x514>
   41748:	bl	11ea0 <dcgettext@plt>
   4174c:	bl	412ac <error@@Base>
   41750:	b	41508 <error@@Base+0x25c>
   41754:	mov	r0, r3
   41758:	mov	r2, #5
   4175c:	ldr	r1, [pc, #96]	; 417c4 <error@@Base+0x518>
   41760:	bl	11ea0 <dcgettext@plt>
   41764:	ldr	r1, [r4]
   41768:	bl	412ac <error@@Base>
   4176c:	b	41508 <error@@Base+0x25c>
   41770:	mov	r2, #5
   41774:	ldr	r1, [pc, #76]	; 417c8 <error@@Base+0x51c>
   41778:	bl	11ea0 <dcgettext@plt>
   4177c:	bl	412ac <error@@Base>
   41780:	b	41508 <error@@Base+0x25c>
   41784:	mov	r0, r5
   41788:	bl	11e10 <free@plt>
   4178c:	mov	r2, #5
   41790:	ldr	r1, [pc, #52]	; 417cc <error@@Base+0x520>
   41794:	mov	r0, fp
   41798:	bl	11ea0 <dcgettext@plt>
   4179c:	bl	412ac <error@@Base>
   417a0:	b	41508 <error@@Base+0x25c>
   417a4:			; <UNDEFINED> instruction: 0x000524b0
   417a8:	andeq	r2, r5, r8, asr r6
   417ac:	muleq	r5, r0, r4
   417b0:	ldrdeq	r2, [r5], -r4
   417b4:	andeq	r2, r5, ip, lsr r4
   417b8:	andeq	r2, r5, r8, lsr #12
   417bc:	andeq	r2, r5, r4, ror #8
   417c0:	andeq	r2, r5, r8, lsr r5
   417c4:			; <UNDEFINED> instruction: 0x000525b8
   417c8:	andeq	r2, r5, r8, ror #11
   417cc:	andeq	r2, r5, r4, ror r5

000417d0 <warn@@Base>:
   417d0:	push	{r0, r1, r2, r3}
   417d4:	ldr	r3, [pc, #96]	; 4183c <warn@@Base+0x6c>
   417d8:	push	{r4, r5, lr}
   417dc:	sub	sp, sp, #12
   417e0:	ldr	r4, [pc, #88]	; 41840 <warn@@Base+0x70>
   417e4:	ldr	r0, [r3]
   417e8:	bl	11de0 <fflush@plt>
   417ec:	add	r3, sp, #28
   417f0:	mov	r2, #5
   417f4:	ldr	r1, [pc, #72]	; 41844 <warn@@Base+0x74>
   417f8:	mov	r0, #0
   417fc:	ldr	r5, [r4]
   41800:	str	r3, [sp, #4]
   41804:	bl	11ea0 <dcgettext@plt>
   41808:	ldr	r3, [pc, #56]	; 41848 <warn@@Base+0x78>
   4180c:	ldr	r2, [r3]
   41810:	mov	r1, r0
   41814:	mov	r0, r5
   41818:	bl	120b0 <fprintf@plt>
   4181c:	ldr	r0, [r4]
   41820:	ldr	r1, [sp, #24]
   41824:	ldr	r2, [sp, #4]
   41828:	bl	121f4 <vfprintf@plt>
   4182c:	add	sp, sp, #12
   41830:	pop	{r4, r5, lr}
   41834:	add	sp, sp, #16
   41838:	bx	lr
   4183c:	andeq	r7, r6, r0, lsr r4
   41840:	andeq	r7, r6, r8, lsl #3
   41844:	muleq	r5, r4, r6
   41848:	ldrdeq	r9, [r6], -ip
   4184c:	push	{r4, lr}
   41850:	ldr	r4, [sp, #8]
   41854:	sub	r1, r4, #1
   41858:	cmp	r1, #7
   4185c:	ldrls	pc, [pc, r1, lsl #2]
   41860:	b	418c0 <warn@@Base+0xf0>
   41864:			; <UNDEFINED> instruction: 0x000418b8
   41868:			; <UNDEFINED> instruction: 0x000418b0
   4186c:	andeq	r1, r4, r8, lsr #17
   41870:	andeq	r1, r4, r0, lsr #17
   41874:	andeq	r1, r4, r0, asr #17
   41878:	andeq	r1, r4, r0, asr #17
   4187c:	andeq	r1, r4, r0, asr #17
   41880:	andeq	r1, r4, r4, lsl #17
   41884:	lsr	lr, r3, #24
   41888:	lsr	ip, r3, #16
   4188c:	lsr	r1, r3, #8
   41890:	strb	r3, [r0, #4]
   41894:	strb	lr, [r0, #7]
   41898:	strb	ip, [r0, #6]
   4189c:	strb	r1, [r0, #5]
   418a0:	lsr	r3, r2, #24
   418a4:	strb	r3, [r0, #3]
   418a8:	lsr	r3, r2, #16
   418ac:	strb	r3, [r0, #2]
   418b0:	lsr	r3, r2, #8
   418b4:	strb	r3, [r0, #1]
   418b8:	strb	r2, [r0]
   418bc:	pop	{r4, pc}
   418c0:	mov	r2, #5
   418c4:	ldr	r1, [pc, #16]	; 418dc <warn@@Base+0x10c>
   418c8:	mov	r0, #0
   418cc:	bl	11ea0 <dcgettext@plt>
   418d0:	mov	r1, r4
   418d4:	bl	412ac <error@@Base>
   418d8:	bl	1232c <abort@plt>
   418dc:	andeq	r2, r5, r0, lsr #8
   418e0:	push	{r4, lr}
   418e4:	ldr	r4, [sp, #8]
   418e8:	sub	r1, r4, #1
   418ec:	cmp	r1, #7
   418f0:	ldrls	pc, [pc, r1, lsl #2]
   418f4:	b	41970 <warn@@Base+0x1a0>
   418f8:	andeq	r1, r4, r8, ror #18
   418fc:	andeq	r1, r4, ip, asr r9
   41900:	andeq	r1, r4, ip, asr #18
   41904:	andeq	r1, r4, ip, lsr r9
   41908:	andeq	r1, r4, r0, ror r9
   4190c:	andeq	r1, r4, r0, ror r9
   41910:	andeq	r1, r4, r0, ror r9
   41914:	andeq	r1, r4, r8, lsl r9
   41918:	lsr	lr, r2, #8
   4191c:	lsr	ip, r2, #16
   41920:	lsr	r1, r2, #24
   41924:	strb	r2, [r0, #7]
   41928:	mov	r2, r3
   4192c:	mov	r3, #0
   41930:	strb	lr, [r0, #6]
   41934:	strb	ip, [r0, #5]
   41938:	strb	r1, [r0, #4]
   4193c:	lsr	r1, r2, #8
   41940:	strb	r2, [r0, #3]
   41944:	orr	r2, r1, r3, lsl #24
   41948:	lsr	r3, r3, #8
   4194c:	lsr	r1, r2, #8
   41950:	strb	r2, [r0, #2]
   41954:	orr	r2, r1, r3, lsl #24
   41958:	lsr	r3, r3, #8
   4195c:	lsr	r1, r2, #8
   41960:	strb	r2, [r0, #1]
   41964:	orr	r2, r1, r3, lsl #24
   41968:	strb	r2, [r0]
   4196c:	pop	{r4, pc}
   41970:	mov	r2, #5
   41974:	ldr	r1, [pc, #16]	; 4198c <warn@@Base+0x1bc>
   41978:	mov	r0, #0
   4197c:	bl	11ea0 <dcgettext@plt>
   41980:	mov	r1, r4
   41984:	bl	412ac <error@@Base>
   41988:	bl	1232c <abort@plt>
   4198c:	andeq	r2, r5, r0, lsr #8
   41990:	sub	r3, r1, #1
   41994:	push	{r4, r5, r6, r7, r8, lr}
   41998:	cmp	r3, #7
   4199c:	ldrls	pc, [pc, r3, lsl #2]
   419a0:	b	41a94 <warn@@Base+0x2c4>
   419a4:	andeq	r1, r4, r8, lsl #20
   419a8:	andeq	r1, r4, r4, lsl sl
   419ac:	andeq	r1, r4, r0, lsr #20
   419b0:	andeq	r1, r4, r0, asr #20
   419b4:	andeq	r1, r4, ip, asr #20
   419b8:	andeq	r1, r4, r8, asr sl
   419bc:	andeq	r1, r4, r0, ror sl
   419c0:	andeq	r1, r4, r4, asr #19
   419c4:	ldrb	r1, [r0, #1]
   419c8:	ldrb	r3, [r0]
   419cc:	ldrb	r2, [r0, #5]
   419d0:	ldrb	r4, [r0, #6]
   419d4:	orr	r3, r3, r1, lsl #8
   419d8:	ldrb	r5, [r0, #2]
   419dc:	ldrb	r1, [r0, #4]
   419e0:	ldrb	lr, [r0, #3]
   419e4:	ldrb	ip, [r0, #7]
   419e8:	orr	r1, r1, r2, lsl #8
   419ec:	orr	r0, r3, r5, lsl #16
   419f0:	orr	r1, r1, r4, lsl #16
   419f4:	orr	r2, r0, lr, lsl #24
   419f8:	orr	r3, r1, ip, lsl #24
   419fc:	mov	r0, r2
   41a00:	mov	r1, r3
   41a04:	pop	{r4, r5, r6, r7, r8, pc}
   41a08:	ldrb	r2, [r0]
   41a0c:	mov	r3, #0
   41a10:	b	419fc <warn@@Base+0x22c>
   41a14:	ldrh	r2, [r0]
   41a18:	mov	r3, #0
   41a1c:	b	419fc <warn@@Base+0x22c>
   41a20:	ldrb	r3, [r0, #2]
   41a24:	ldrb	r1, [r0, #1]
   41a28:	ldrb	r0, [r0]
   41a2c:	lsl	r2, r3, #16
   41a30:	orr	r2, r2, r1, lsl #8
   41a34:	orr	r2, r2, r0
   41a38:	mov	r3, #0
   41a3c:	b	419fc <warn@@Base+0x22c>
   41a40:	ldr	r2, [r0]
   41a44:	mov	r3, #0
   41a48:	b	419fc <warn@@Base+0x22c>
   41a4c:	ldr	r2, [r0]
   41a50:	ldrb	r3, [r0, #4]
   41a54:	b	419fc <warn@@Base+0x22c>
   41a58:	ldrb	r4, [r0, #5]
   41a5c:	ldr	r2, [r0]
   41a60:	ldrb	r0, [r0, #4]
   41a64:	mov	r5, #0
   41a68:	orr	r3, r0, r4, lsl #8
   41a6c:	b	419fc <warn@@Base+0x22c>
   41a70:	ldrb	r6, [r0, #5]
   41a74:	ldrb	r4, [r0, #4]
   41a78:	ldr	r2, [r0]
   41a7c:	ldrb	r0, [r0, #6]
   41a80:	orr	r4, r4, r6, lsl #8
   41a84:	mov	r7, #0
   41a88:	mov	r5, #0
   41a8c:	orr	r3, r4, r0, lsl #16
   41a90:	b	419fc <warn@@Base+0x22c>
   41a94:	mov	r4, r1
   41a98:	mov	r2, #5
   41a9c:	ldr	r1, [pc, #16]	; 41ab4 <warn@@Base+0x2e4>
   41aa0:	mov	r0, #0
   41aa4:	bl	11ea0 <dcgettext@plt>
   41aa8:	mov	r1, r4
   41aac:	bl	412ac <error@@Base>
   41ab0:	bl	1232c <abort@plt>
   41ab4:	andeq	r2, r5, r0, lsr #8
   41ab8:	ldr	r3, [pc, #132]	; 41b44 <warn@@Base+0x374>
   41abc:	push	{r4, lr}
   41ac0:	mov	r4, r1
   41ac4:	ldr	r3, [r3]
   41ac8:	blx	r3
   41acc:	sub	r3, r4, #1
   41ad0:	cmp	r3, #7
   41ad4:	ldrls	pc, [pc, r3, lsl #2]
   41ad8:	b	41b40 <warn@@Base+0x370>
   41adc:	andeq	r1, r4, r0, lsl fp
   41ae0:	andeq	r1, r4, r0, lsr #22
   41ae4:	andeq	r1, r4, r0, lsr fp
   41ae8:	andeq	r1, r4, r0, lsl #22
   41aec:	strdeq	r1, [r4], -ip
   41af0:	strdeq	r1, [r4], -ip
   41af4:	strdeq	r1, [r4], -ip
   41af8:	strdeq	r1, [r4], -ip
   41afc:	pop	{r4, pc}
   41b00:	add	r0, r0, #-2147483648	; 0x80000000
   41b04:	adds	r0, r0, #-2147483648	; 0x80000000
   41b08:	sbc	r1, r1, #0
   41b0c:	pop	{r4, pc}
   41b10:	eor	r0, r0, #128	; 0x80
   41b14:	subs	r0, r0, #128	; 0x80
   41b18:	sbc	r1, r1, #0
   41b1c:	pop	{r4, pc}
   41b20:	eor	r0, r0, #32768	; 0x8000
   41b24:	subs	r0, r0, #32768	; 0x8000
   41b28:	sbc	r1, r1, #0
   41b2c:	pop	{r4, pc}
   41b30:	eor	r0, r0, #8388608	; 0x800000
   41b34:	subs	r0, r0, #8388608	; 0x800000
   41b38:	sbc	r1, r1, #0
   41b3c:	pop	{r4, pc}
   41b40:	bl	1232c <abort@plt>
   41b44:	andeq	r9, r6, r0, ror #27
   41b48:	ldr	ip, [pc, #100]	; 41bb4 <warn@@Base+0x3e4>
   41b4c:	push	{r4, r5, r6, r7, r8, lr}
   41b50:	mov	r6, r1
   41b54:	ldr	r3, [pc, #92]	; 41bb8 <warn@@Base+0x3e8>
   41b58:	ldr	r1, [ip]
   41b5c:	mov	r5, r2
   41b60:	cmp	r1, r3
   41b64:	add	r7, r0, #4
   41b68:	beq	41b94 <warn@@Base+0x3c4>
   41b6c:	mov	r4, r0
   41b70:	mov	r1, #4
   41b74:	mov	r0, r7
   41b78:	bl	41990 <warn@@Base+0x1c0>
   41b7c:	strd	r0, [r6]
   41b80:	mov	r0, r4
   41b84:	mov	r1, #4
   41b88:	bl	41990 <warn@@Base+0x1c0>
   41b8c:	strd	r0, [r5]
   41b90:	pop	{r4, r5, r6, r7, r8, pc}
   41b94:	mov	r1, #4
   41b98:	bl	41328 <error@@Base+0x7c>
   41b9c:	strd	r0, [r6]
   41ba0:	mov	r0, r7
   41ba4:	mov	r1, #4
   41ba8:	bl	41328 <error@@Base+0x7c>
   41bac:	strd	r0, [r5]
   41bb0:	pop	{r4, r5, r6, r7, r8, pc}
   41bb4:	andeq	r9, r6, r0, ror #27
   41bb8:	andeq	r1, r4, r8, lsr #6
   41bbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   41bc0:	mov	r7, r1
   41bc4:	mov	r8, r0
   41bc8:	mov	r6, r2
   41bcc:	bl	11fa8 <lbasename@plt>
   41bd0:	ldrb	r4, [r7]
   41bd4:	cmp	r8, r0
   41bd8:	cmpne	r4, #47	; 0x2f
   41bdc:	moveq	r4, #1
   41be0:	movne	r4, #0
   41be4:	bne	41c1c <warn@@Base+0x44c>
   41be8:	adds	r0, r6, #1
   41bec:	moveq	r4, r0
   41bf0:	beq	41c14 <warn@@Base+0x444>
   41bf4:	bl	11ffc <malloc@plt>
   41bf8:	subs	r4, r0, #0
   41bfc:	beq	41c8c <warn@@Base+0x4bc>
   41c00:	mov	r1, r7
   41c04:	mov	r2, r6
   41c08:	bl	11e40 <memcpy@plt>
   41c0c:	mov	r3, #0
   41c10:	strb	r3, [r4, r6]
   41c14:	mov	r0, r4
   41c18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   41c1c:	sub	r5, r0, r8
   41c20:	add	r9, r5, r6
   41c24:	add	r0, r9, #1
   41c28:	cmp	r6, r0
   41c2c:	cmpls	r5, r0
   41c30:	movhi	sl, #1
   41c34:	movls	sl, #0
   41c38:	bhi	41c70 <warn@@Base+0x4a0>
   41c3c:	bl	11ffc <malloc@plt>
   41c40:	subs	r4, r0, #0
   41c44:	beq	41c8c <warn@@Base+0x4bc>
   41c48:	mov	r1, r8
   41c4c:	mov	r2, r5
   41c50:	bl	11e40 <memcpy@plt>
   41c54:	mov	r2, r6
   41c58:	mov	r1, r7
   41c5c:	add	r0, r4, r5
   41c60:	bl	11e40 <memcpy@plt>
   41c64:	strb	sl, [r4, r9]
   41c68:	mov	r0, r4
   41c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   41c70:	mov	r2, #5
   41c74:	ldr	r1, [pc, #36]	; 41ca0 <warn@@Base+0x4d0>
   41c78:	mov	r0, r4
   41c7c:	bl	11ea0 <dcgettext@plt>
   41c80:	mov	r1, r6
   41c84:	bl	412ac <error@@Base>
   41c88:	b	41c14 <warn@@Base+0x444>
   41c8c:	mov	r2, #5
   41c90:	ldr	r1, [pc, #12]	; 41ca4 <warn@@Base+0x4d4>
   41c94:	bl	11ea0 <dcgettext@plt>
   41c98:	bl	412ac <error@@Base>
   41c9c:	b	41c14 <warn@@Base+0x444>
   41ca0:			; <UNDEFINED> instruction: 0x000526b4
   41ca4:	andeq	r2, r5, r4, lsr #13
   41ca8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   41cac:	mov	r4, r0
   41cb0:	mov	r0, r1
   41cb4:	mov	r6, r2
   41cb8:	mov	r8, r3
   41cbc:	mov	r9, r1
   41cc0:	bl	11eb8 <strdup@plt>
   41cc4:	mov	r2, #0
   41cc8:	mov	r3, #0
   41ccc:	mov	r5, #0
   41cd0:	mov	r7, #8
   41cd4:	str	r8, [r4, #44]	; 0x2c
   41cd8:	strd	r2, [r4, #8]
   41cdc:	str	r6, [r4, #4]
   41ce0:	str	r5, [r4, #16]
   41ce4:	str	r5, [r4, #20]
   41ce8:	str	r5, [r4, #24]
   41cec:	str	r5, [r4, #28]
   41cf0:	str	r5, [r4, #32]
   41cf4:	str	r5, [r4, #36]	; 0x24
   41cf8:	str	r5, [r4, #48]	; 0x30
   41cfc:	str	r7, [r4, #40]	; 0x28
   41d00:	mov	r2, r5
   41d04:	mov	r1, r7
   41d08:	str	r0, [r4]
   41d0c:	mov	r0, r6
   41d10:	bl	122fc <fseek@plt>
   41d14:	subs	r8, r0, #0
   41d18:	bne	41e30 <warn@@Base+0x660>
   41d1c:	add	r5, r4, #52	; 0x34
   41d20:	mov	r0, r5
   41d24:	mov	r3, r6
   41d28:	mov	r2, #60	; 0x3c
   41d2c:	mov	r1, #1
   41d30:	bl	11f78 <fread@plt>
   41d34:	cmp	r0, #60	; 0x3c
   41d38:	beq	41d4c <warn@@Base+0x57c>
   41d3c:	cmp	r0, #0
   41d40:	bne	41e74 <warn@@Base+0x6a4>
   41d44:	mov	r0, r8
   41d48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   41d4c:	mov	r2, #16
   41d50:	ldr	r1, [pc, #512]	; 41f58 <warn@@Base+0x788>
   41d54:	mov	r0, r5
   41d58:	bl	12320 <strncmp@plt>
   41d5c:	cmp	r0, #0
   41d60:	beq	41e54 <warn@@Base+0x684>
   41d64:	mov	r2, #16
   41d68:	ldr	r1, [pc, #492]	; 41f5c <warn@@Base+0x78c>
   41d6c:	mov	r0, r5
   41d70:	bl	12320 <strncmp@plt>
   41d74:	cmp	r0, #0
   41d78:	beq	41eb8 <warn@@Base+0x6e8>
   41d7c:	ldr	r3, [sp, #32]
   41d80:	cmp	r3, #0
   41d84:	bne	41edc <warn@@Base+0x70c>
   41d88:	mov	r0, r5
   41d8c:	mov	r2, #16
   41d90:	ldr	r1, [pc, #456]	; 41f60 <warn@@Base+0x790>
   41d94:	bl	12320 <strncmp@plt>
   41d98:	subs	r5, r0, #0
   41d9c:	bne	41d44 <warn@@Base+0x574>
   41da0:	ldrb	r8, [r4, #110]	; 0x6e
   41da4:	mov	r2, #10
   41da8:	strb	r5, [r4, #110]	; 0x6e
   41dac:	mov	r1, r5
   41db0:	add	r0, r4, #100	; 0x64
   41db4:	bl	12068 <strtoul@plt>
   41db8:	strb	r8, [r4, #110]	; 0x6e
   41dbc:	cmp	r0, #7
   41dc0:	mov	r7, r0
   41dc4:	str	r0, [r4, #32]
   41dc8:	bls	41e98 <warn@@Base+0x6c8>
   41dcc:	cmp	r0, #0
   41dd0:	blt	41ef8 <warn@@Base+0x728>
   41dd4:	ldr	r3, [r4, #40]	; 0x28
   41dd8:	add	r0, r0, #1
   41ddc:	add	r3, r3, #60	; 0x3c
   41de0:	add	r3, r3, r7
   41de4:	str	r3, [r4, #40]	; 0x28
   41de8:	bl	11ffc <malloc@plt>
   41dec:	cmp	r0, #0
   41df0:	str	r0, [r4, #28]
   41df4:	beq	41f34 <warn@@Base+0x764>
   41df8:	mov	r1, r7
   41dfc:	mov	r3, r6
   41e00:	mov	r2, #1
   41e04:	bl	11f78 <fread@plt>
   41e08:	cmp	r0, #1
   41e0c:	bne	41f08 <warn@@Base+0x738>
   41e10:	ldr	r3, [r4, #32]
   41e14:	tst	r3, #1
   41e18:	bne	41f48 <warn@@Base+0x778>
   41e1c:	ldr	r1, [r4, #28]
   41e20:	mov	r2, #0
   41e24:	mov	r8, r2
   41e28:	strb	r2, [r1, r3]
   41e2c:	b	41d44 <warn@@Base+0x574>
   41e30:	mov	r2, #5
   41e34:	mov	r0, r5
   41e38:	ldr	r1, [pc, #292]	; 41f64 <warn@@Base+0x794>
   41e3c:	bl	11ea0 <dcgettext@plt>
   41e40:	mov	r8, #1
   41e44:	mov	r1, r9
   41e48:	bl	412ac <error@@Base>
   41e4c:	mov	r0, r8
   41e50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   41e54:	ldr	r2, [sp, #32]
   41e58:	mov	r1, #4
   41e5c:	mov	r0, r4
   41e60:	bl	41470 <error@@Base+0x1c4>
   41e64:	cmp	r0, #0
   41e68:	bne	41d88 <warn@@Base+0x5b8>
   41e6c:	mov	r8, #1
   41e70:	b	41d44 <warn@@Base+0x574>
   41e74:	mov	r2, #5
   41e78:	mov	r0, r8
   41e7c:	ldr	r1, [pc, #228]	; 41f68 <warn@@Base+0x798>
   41e80:	bl	11ea0 <dcgettext@plt>
   41e84:	mov	r8, #1
   41e88:	mov	r1, r9
   41e8c:	bl	412ac <error@@Base>
   41e90:	mov	r0, r8
   41e94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   41e98:	ldr	r1, [pc, #204]	; 41f6c <warn@@Base+0x79c>
   41e9c:	mov	r0, r5
   41ea0:	mov	r2, #5
   41ea4:	bl	11ea0 <dcgettext@plt>
   41ea8:	ldr	r2, [r4, #32]
   41eac:	mov	r1, r9
   41eb0:	bl	412ac <error@@Base>
   41eb4:	b	41e6c <warn@@Base+0x69c>
   41eb8:	mov	r3, #1
   41ebc:	mov	r1, r7
   41ec0:	str	r3, [r4, #48]	; 0x30
   41ec4:	ldr	r2, [sp, #32]
   41ec8:	mov	r0, r4
   41ecc:	bl	41470 <error@@Base+0x1c4>
   41ed0:	cmp	r0, #0
   41ed4:	bne	41d88 <warn@@Base+0x5b8>
   41ed8:	b	41e6c <warn@@Base+0x69c>
   41edc:	mov	r2, #5
   41ee0:	ldr	r1, [pc, #136]	; 41f70 <warn@@Base+0x7a0>
   41ee4:	mov	r0, r8
   41ee8:	bl	11ea0 <dcgettext@plt>
   41eec:	mov	r1, r9
   41ef0:	bl	11dbc <printf@plt>
   41ef4:	b	41d88 <warn@@Base+0x5b8>
   41ef8:	mov	r0, r5
   41efc:	mov	r2, #5
   41f00:	ldr	r1, [pc, #108]	; 41f74 <warn@@Base+0x7a4>
   41f04:	b	41ea4 <warn@@Base+0x6d4>
   41f08:	ldr	r0, [r4, #28]
   41f0c:	bl	11e10 <free@plt>
   41f10:	mov	r2, #5
   41f14:	ldr	r1, [pc, #92]	; 41f78 <warn@@Base+0x7a8>
   41f18:	str	r5, [r4, #28]
   41f1c:	mov	r0, r5
   41f20:	bl	11ea0 <dcgettext@plt>
   41f24:	mov	r1, r9
   41f28:	bl	412ac <error@@Base>
   41f2c:	mov	r8, #1
   41f30:	b	41d44 <warn@@Base+0x574>
   41f34:	mov	r2, #5
   41f38:	ldr	r1, [pc, #60]	; 41f7c <warn@@Base+0x7ac>
   41f3c:	bl	11ea0 <dcgettext@plt>
   41f40:	bl	412ac <error@@Base>
   41f44:	b	41e6c <warn@@Base+0x69c>
   41f48:	mov	r0, r6
   41f4c:	bl	12338 <getc@plt>
   41f50:	ldr	r3, [r4, #32]
   41f54:	b	41e1c <warn@@Base+0x64c>
   41f58:	andeq	r2, r5, r8, lsr r7
   41f5c:	andeq	r2, r5, ip, asr #14
   41f60:	andeq	r2, r5, ip, ror r7
   41f64:	andeq	r2, r5, r8, ror #13
   41f68:	andeq	r2, r5, r4, lsl r7
   41f6c:	muleq	r5, r0, r7
   41f70:	andeq	r2, r5, r0, ror #14
   41f74:	andeq	r2, r5, r0, asr #15
   41f78:	andeq	r2, r5, r4, lsr #16
   41f7c:	strdeq	r2, [r5], -r0
   41f80:	push	{r4, lr}
   41f84:	mov	r4, r0
   41f88:	ldr	r0, [r0]
   41f8c:	cmp	r0, #0
   41f90:	beq	41f98 <warn@@Base+0x7c8>
   41f94:	bl	11e10 <free@plt>
   41f98:	ldr	r0, [r4, #16]
   41f9c:	cmp	r0, #0
   41fa0:	beq	41fa8 <warn@@Base+0x7d8>
   41fa4:	bl	11e10 <free@plt>
   41fa8:	ldr	r0, [r4, #20]
   41fac:	cmp	r0, #0
   41fb0:	beq	41fb8 <warn@@Base+0x7e8>
   41fb4:	bl	11e10 <free@plt>
   41fb8:	ldr	r0, [r4, #28]
   41fbc:	cmp	r0, #0
   41fc0:	popeq	{r4, pc}
   41fc4:	pop	{r4, lr}
   41fc8:	b	11e10 <free@plt>
   41fcc:	push	{r4, r5, lr}
   41fd0:	mov	r4, r0
   41fd4:	ldr	r0, [r0]
   41fd8:	sub	sp, sp, #12
   41fdc:	cmp	r0, #0
   41fe0:	mov	r5, r1
   41fe4:	beq	41ff4 <warn@@Base+0x824>
   41fe8:	bl	11d98 <strcmp@plt>
   41fec:	cmp	r0, #0
   41ff0:	beq	42038 <warn@@Base+0x868>
   41ff4:	ldr	r0, [r4, #4]
   41ff8:	cmp	r0, #0
   41ffc:	beq	42004 <warn@@Base+0x834>
   42000:	bl	12164 <fclose@plt>
   42004:	mov	r0, r4
   42008:	bl	41f80 <warn@@Base+0x7b0>
   4200c:	ldr	r1, [pc, #44]	; 42040 <warn@@Base+0x870>
   42010:	mov	r0, r5
   42014:	bl	12278 <fopen64@plt>
   42018:	subs	r2, r0, #0
   4201c:	moveq	r0, #1
   42020:	beq	42038 <warn@@Base+0x868>
   42024:	mov	r3, #0
   42028:	mov	r1, r5
   4202c:	mov	r0, r4
   42030:	str	r3, [sp]
   42034:	bl	41ca8 <warn@@Base+0x4d8>
   42038:	add	sp, sp, #12
   4203c:	pop	{r4, r5, pc}
   42040:	andeq	sl, r4, r4, lsl #13
   42044:	push	{r4, r5, r6, lr}
   42048:	mov	r4, r0
   4204c:	mov	r6, r2
   42050:	ldr	r0, [r0, #4]
   42054:	mov	r2, #0
   42058:	bl	122fc <fseek@plt>
   4205c:	subs	r5, r0, #0
   42060:	bne	420c8 <warn@@Base+0x8f8>
   42064:	ldr	r3, [r4, #4]
   42068:	mov	r2, #60	; 0x3c
   4206c:	mov	r1, #1
   42070:	add	r0, r4, #52	; 0x34
   42074:	bl	11f78 <fread@plt>
   42078:	cmp	r0, #60	; 0x3c
   4207c:	bne	420e8 <warn@@Base+0x918>
   42080:	ldrb	r3, [r4, #110]	; 0x6e
   42084:	cmp	r3, #96	; 0x60
   42088:	beq	420ac <warn@@Base+0x8dc>
   4208c:	mov	r2, #5
   42090:	ldr	r1, [pc, #112]	; 42108 <warn@@Base+0x938>
   42094:	mov	r0, #0
   42098:	bl	11ea0 <dcgettext@plt>
   4209c:	ldr	r1, [r4]
   420a0:	bl	412ac <error@@Base>
   420a4:	mov	r0, #0
   420a8:	pop	{r4, r5, r6, pc}
   420ac:	ldrb	r3, [r4, #111]	; 0x6f
   420b0:	cmp	r3, #10
   420b4:	bne	4208c <warn@@Base+0x8bc>
   420b8:	mov	r1, r6
   420bc:	mov	r0, r4
   420c0:	pop	{r4, r5, r6, lr}
   420c4:	b	42114 <warn@@Base+0x944>
   420c8:	mov	r2, #5
   420cc:	ldr	r1, [pc, #56]	; 4210c <warn@@Base+0x93c>
   420d0:	mov	r0, #0
   420d4:	bl	11ea0 <dcgettext@plt>
   420d8:	ldr	r1, [r4]
   420dc:	bl	412ac <error@@Base>
   420e0:	mov	r0, #0
   420e4:	pop	{r4, r5, r6, pc}
   420e8:	mov	r2, #5
   420ec:	mov	r0, r5
   420f0:	ldr	r1, [pc, #24]	; 42110 <warn@@Base+0x940>
   420f4:	bl	11ea0 <dcgettext@plt>
   420f8:	ldr	r1, [r4]
   420fc:	bl	412ac <error@@Base>
   42100:	mov	r0, #0
   42104:	pop	{r4, r5, r6, pc}
   42108:	andeq	r2, r5, r4, lsl #17
   4210c:	andeq	r2, r5, r8, asr r8
   42110:	andeq	r2, r5, r4, lsl r7
   42114:	push	{r4, r5, r6, r7, r8, lr}
   42118:	mov	r4, r0
   4211c:	ldrb	r3, [r0, #52]	; 0x34
   42120:	sub	sp, sp, #8
   42124:	cmp	r3, #47	; 0x2f
   42128:	addne	r6, r0, #52	; 0x34
   4212c:	movne	r2, r6
   42130:	movne	r3, #0
   42134:	bne	42148 <warn@@Base+0x978>
   42138:	b	42194 <warn@@Base+0x9c4>
   4213c:	ldrb	r1, [r2, #1]!
   42140:	cmp	r1, #47	; 0x2f
   42144:	beq	421d0 <warn@@Base+0xa00>
   42148:	add	r3, r3, #1
   4214c:	cmp	r3, #16
   42150:	bne	4213c <warn@@Base+0x96c>
   42154:	mov	r0, #17
   42158:	bl	11f3c <xmalloc@plt>
   4215c:	ldr	ip, [r6]
   42160:	ldr	r1, [r6, #8]
   42164:	ldr	r2, [r6, #12]
   42168:	mov	r3, #0
   4216c:	mov	r5, r0
   42170:	ldr	r0, [r6, #4]
   42174:	str	ip, [r5]
   42178:	str	r0, [r5, #4]
   4217c:	str	r1, [r5, #8]
   42180:	str	r2, [r5, #12]
   42184:	strb	r3, [r5, #16]
   42188:	mov	r0, r5
   4218c:	add	sp, sp, #8
   42190:	pop	{r4, r5, r6, r7, r8, pc}
   42194:	ldr	r3, [r0, #28]
   42198:	cmp	r3, #0
   4219c:	beq	421ac <warn@@Base+0x9dc>
   421a0:	ldr	r3, [r0, #32]
   421a4:	cmp	r3, #0
   421a8:	bne	421ec <warn@@Base+0xa1c>
   421ac:	mov	r2, #5
   421b0:	ldr	r1, [pc, #476]	; 42394 <warn@@Base+0xbc4>
   421b4:	mov	r0, #0
   421b8:	bl	11ea0 <dcgettext@plt>
   421bc:	bl	412ac <error@@Base>
   421c0:	mov	r5, #0
   421c4:	mov	r0, r5
   421c8:	add	sp, sp, #8
   421cc:	pop	{r4, r5, r6, r7, r8, pc}
   421d0:	add	r3, r4, r3
   421d4:	mov	r2, #0
   421d8:	mov	r5, r6
   421dc:	mov	r0, r5
   421e0:	strb	r2, [r3, #52]	; 0x34
   421e4:	add	sp, sp, #8
   421e8:	pop	{r4, r5, r6, r7, r8, pc}
   421ec:	mov	r5, #0
   421f0:	ldrb	r8, [r0, #110]	; 0x6e
   421f4:	str	r5, [r0, #36]	; 0x24
   421f8:	strb	r5, [r0, #110]	; 0x6e
   421fc:	mov	r6, r1
   42200:	mov	r2, #10
   42204:	add	r1, sp, #4
   42208:	add	r0, r0, #53	; 0x35
   4220c:	bl	12068 <strtoul@plt>
   42210:	ldr	r3, [r4, #44]	; 0x2c
   42214:	cmp	r3, r5
   42218:	mov	r7, r0
   4221c:	beq	42238 <warn@@Base+0xa68>
   42220:	ldr	r0, [sp, #4]
   42224:	cmp	r0, r5
   42228:	beq	42238 <warn@@Base+0xa68>
   4222c:	ldrb	r3, [r0]
   42230:	cmp	r3, #58	; 0x3a
   42234:	beq	42354 <warn@@Base+0xb84>
   42238:	ldr	r5, [r4, #32]
   4223c:	strb	r8, [r4, #110]	; 0x6e
   42240:	cmp	r7, r5
   42244:	bhi	4236c <warn@@Base+0xb9c>
   42248:	ldr	lr, [r4, #28]
   4224c:	bcs	4238c <warn@@Base+0xbbc>
   42250:	ldrb	r2, [lr, r7]
   42254:	add	r3, lr, r7
   42258:	cmp	r2, #0
   4225c:	cmpne	r2, #10
   42260:	subne	r0, r5, #1
   42264:	addne	r0, r0, lr
   42268:	rsbne	ip, lr, #1
   4226c:	beq	4238c <warn@@Base+0xbbc>
   42270:	cmp	r3, r0
   42274:	add	r2, ip, r3
   42278:	beq	4228c <warn@@Base+0xabc>
   4227c:	ldrb	r1, [r3, #1]!
   42280:	cmp	r1, #10
   42284:	cmpne	r1, #0
   42288:	bne	42270 <warn@@Base+0xaa0>
   4228c:	cmp	r2, #0
   42290:	beq	422b0 <warn@@Base+0xae0>
   42294:	sub	r3, r2, #1
   42298:	ldrb	r1, [lr, r3]
   4229c:	cmp	r1, #47	; 0x2f
   422a0:	moveq	r2, r3
   422a4:	cmp	r2, r5
   422a8:	movcs	r2, r5
   422ac:	add	lr, lr, r2
   422b0:	mov	r5, #0
   422b4:	strb	r5, [lr]
   422b8:	ldr	r3, [r4, #44]	; 0x2c
   422bc:	cmp	r3, r5
   422c0:	beq	42330 <warn@@Base+0xb60>
   422c4:	ldr	r3, [r4, #36]	; 0x24
   422c8:	cmp	r3, r5
   422cc:	beq	42330 <warn@@Base+0xb60>
   422d0:	cmp	r7, r2
   422d4:	bcs	4233c <warn@@Base+0xb6c>
   422d8:	ldr	r1, [r4, #28]
   422dc:	sub	r2, r2, r7
   422e0:	add	r1, r1, r7
   422e4:	ldr	r0, [r4]
   422e8:	bl	41bbc <warn@@Base+0x3ec>
   422ec:	subs	r8, r0, #0
   422f0:	beq	42328 <warn@@Base+0xb58>
   422f4:	mov	r1, r8
   422f8:	mov	r0, r6
   422fc:	bl	41fcc <warn@@Base+0x7fc>
   42300:	subs	r2, r0, #0
   42304:	bne	42328 <warn@@Base+0xb58>
   42308:	mov	r0, r6
   4230c:	ldr	r1, [r4, #36]	; 0x24
   42310:	bl	42044 <warn@@Base+0x874>
   42314:	subs	r5, r0, #0
   42318:	beq	42328 <warn@@Base+0xb58>
   4231c:	mov	r0, r8
   42320:	bl	11e10 <free@plt>
   42324:	b	42188 <warn@@Base+0x9b8>
   42328:	mov	r0, r8
   4232c:	bl	11e10 <free@plt>
   42330:	ldr	r5, [r4, #28]
   42334:	add	r5, r5, r7
   42338:	b	42188 <warn@@Base+0x9b8>
   4233c:	mov	r2, #5
   42340:	ldr	r1, [pc, #80]	; 42398 <warn@@Base+0xbc8>
   42344:	mov	r0, r5
   42348:	bl	11ea0 <dcgettext@plt>
   4234c:	bl	412ac <error@@Base>
   42350:	b	42188 <warn@@Base+0x9b8>
   42354:	mov	r1, r5
   42358:	add	r0, r0, #1
   4235c:	mov	r2, #10
   42360:	bl	12068 <strtoul@plt>
   42364:	str	r0, [r4, #36]	; 0x24
   42368:	b	42238 <warn@@Base+0xa68>
   4236c:	mov	r2, #5
   42370:	ldr	r1, [pc, #36]	; 4239c <warn@@Base+0xbcc>
   42374:	mov	r0, #0
   42378:	bl	11ea0 <dcgettext@plt>
   4237c:	mov	r1, r7
   42380:	bl	412ac <error@@Base>
   42384:	mov	r5, #0
   42388:	b	42188 <warn@@Base+0x9b8>
   4238c:	mov	r2, r7
   42390:	b	4228c <warn@@Base+0xabc>
   42394:			; <UNDEFINED> instruction: 0x000528b0
   42398:	andeq	r2, r5, ip, lsr #18
   4239c:	strdeq	r2, [r5], -r0
   423a0:	push	{r4, r5, r6, r7, r8, r9, lr}
   423a4:	mov	r5, r0
   423a8:	sub	sp, sp, #12
   423ac:	mov	r7, r2
   423b0:	mov	r9, r1
   423b4:	mov	r2, #5
   423b8:	ldr	r1, [pc, #324]	; 42504 <warn@@Base+0xd34>
   423bc:	mov	r0, #0
   423c0:	bl	11ea0 <dcgettext@plt>
   423c4:	ldr	r6, [r5]
   423c8:	mov	r8, r0
   423cc:	mov	r0, r6
   423d0:	bl	12074 <strlen@plt>
   423d4:	mov	r4, r0
   423d8:	mov	r0, r7
   423dc:	bl	12074 <strlen@plt>
   423e0:	ldr	r3, [r5, #44]	; 0x2c
   423e4:	cmp	r3, #0
   423e8:	add	r0, r4, r0
   423ec:	add	r4, r0, #3
   423f0:	beq	42430 <warn@@Base+0xc60>
   423f4:	ldr	r3, [r5, #36]	; 0x24
   423f8:	cmp	r3, #0
   423fc:	bne	42460 <warn@@Base+0xc90>
   42400:	mov	r0, r4
   42404:	bl	11ffc <malloc@plt>
   42408:	subs	r5, r0, #0
   4240c:	beq	424e8 <warn@@Base+0xd18>
   42410:	str	r7, [sp]
   42414:	mov	r3, r6
   42418:	mov	r1, r4
   4241c:	ldr	r2, [pc, #228]	; 42508 <warn@@Base+0xd38>
   42420:	bl	120f8 <snprintf@plt>
   42424:	mov	r0, r5
   42428:	add	sp, sp, #12
   4242c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   42430:	mov	r0, r4
   42434:	bl	11ffc <malloc@plt>
   42438:	subs	r5, r0, #0
   4243c:	beq	424e8 <warn@@Base+0xd18>
   42440:	str	r7, [sp]
   42444:	mov	r3, r6
   42448:	mov	r1, r4
   4244c:	ldr	r2, [pc, #184]	; 4250c <warn@@Base+0xd3c>
   42450:	bl	120f8 <snprintf@plt>
   42454:	mov	r0, r5
   42458:	add	sp, sp, #12
   4245c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   42460:	ldr	r9, [r9]
   42464:	add	r4, r0, #5
   42468:	cmp	r9, #0
   4246c:	beq	424b0 <warn@@Base+0xce0>
   42470:	mov	r0, r9
   42474:	bl	12074 <strlen@plt>
   42478:	add	r4, r0, r4
   4247c:	mov	r0, r4
   42480:	bl	11ffc <malloc@plt>
   42484:	subs	r5, r0, #0
   42488:	beq	424e8 <warn@@Base+0xd18>
   4248c:	str	r7, [sp, #4]
   42490:	str	r9, [sp]
   42494:	mov	r3, r6
   42498:	mov	r1, r4
   4249c:	ldr	r2, [pc, #108]	; 42510 <warn@@Base+0xd40>
   424a0:	bl	120f8 <snprintf@plt>
   424a4:	mov	r0, r5
   424a8:	add	sp, sp, #12
   424ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   424b0:	mov	r0, r8
   424b4:	bl	12074 <strlen@plt>
   424b8:	add	r4, r0, r4
   424bc:	mov	r0, r4
   424c0:	bl	11ffc <malloc@plt>
   424c4:	subs	r5, r0, #0
   424c8:	beq	424e8 <warn@@Base+0xd18>
   424cc:	str	r7, [sp, #4]
   424d0:	str	r8, [sp]
   424d4:	mov	r3, r6
   424d8:	mov	r1, r4
   424dc:	ldr	r2, [pc, #44]	; 42510 <warn@@Base+0xd40>
   424e0:	bl	120f8 <snprintf@plt>
   424e4:	b	42454 <warn@@Base+0xc84>
   424e8:	mov	r2, #5
   424ec:	ldr	r1, [pc, #32]	; 42514 <warn@@Base+0xd44>
   424f0:	mov	r0, #0
   424f4:	bl	11ea0 <dcgettext@plt>
   424f8:	bl	412ac <error@@Base>
   424fc:	mov	r5, #0
   42500:	b	42454 <warn@@Base+0xc84>
   42504:	andeq	lr, r4, ip, ror r2
   42508:	andeq	r2, r5, ip, asr r9
   4250c:	strdeq	r2, [r5], -ip
   42510:	andeq	r2, r5, r0, asr r9
   42514:	andeq	r2, r5, r4, lsr #13
   42518:	push	{r4, r5, r6, lr}
   4251c:	subs	r5, r0, #0
   42520:	beq	425b8 <warn@@Base+0xde8>
   42524:	ldr	r3, [r5]
   42528:	cmp	r3, #0
   4252c:	beq	425a8 <warn@@Base+0xdd8>
   42530:	mov	r3, r5
   42534:	mov	r0, #0
   42538:	b	42540 <warn@@Base+0xd70>
   4253c:	mov	r0, r1
   42540:	ldr	r2, [r3, #4]!
   42544:	add	r1, r0, #1
   42548:	cmp	r2, #0
   4254c:	bne	4253c <warn@@Base+0xd6c>
   42550:	add	r0, r0, #2
   42554:	lsl	r0, r0, #2
   42558:	bl	11f3c <xmalloc@plt>
   4255c:	ldr	r2, [r5]
   42560:	cmp	r2, #0
   42564:	mov	r6, r0
   42568:	beq	425b0 <warn@@Base+0xde0>
   4256c:	sub	r4, r0, #4
   42570:	mov	r0, r2
   42574:	bl	11f60 <xstrdup@plt>
   42578:	ldr	r2, [r5, #4]!
   4257c:	add	r3, r4, #8
   42580:	cmp	r2, #0
   42584:	sub	r3, r3, r6
   42588:	add	r4, r4, #4
   4258c:	str	r0, [r4]
   42590:	bne	42570 <warn@@Base+0xda0>
   42594:	add	r3, r6, r3
   42598:	mov	r2, #0
   4259c:	str	r2, [r3]
   425a0:	mov	r0, r6
   425a4:	pop	{r4, r5, r6, pc}
   425a8:	mov	r0, #4
   425ac:	b	42558 <warn@@Base+0xd88>
   425b0:	mov	r3, r0
   425b4:	b	42598 <warn@@Base+0xdc8>
   425b8:	mov	r6, r5
   425bc:	b	425a0 <warn@@Base+0xdd0>
   425c0:	push	{r4, r5, r6, lr}
   425c4:	subs	r5, r0, #0
   425c8:	popeq	{r4, r5, r6, pc}
   425cc:	ldr	r0, [r5]
   425d0:	cmp	r0, #0
   425d4:	beq	425ec <warn@@Base+0xe1c>
   425d8:	mov	r4, r5
   425dc:	bl	11e10 <free@plt>
   425e0:	ldr	r0, [r4, #4]!
   425e4:	cmp	r0, #0
   425e8:	bne	425dc <warn@@Base+0xe0c>
   425ec:	mov	r0, r5
   425f0:	pop	{r4, r5, r6, lr}
   425f4:	b	11e10 <free@plt>
   425f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   425fc:	subs	r4, r0, #0
   42600:	ldr	r6, [pc, #512]	; 42808 <warn@@Base+0x1038>
   42604:	sub	sp, sp, #12
   42608:	add	r6, pc, r6
   4260c:	moveq	r9, r4
   42610:	beq	427ac <warn@@Base+0xfdc>
   42614:	bl	12074 <strlen@plt>
   42618:	mov	r9, #0
   4261c:	mov	fp, r9
   42620:	mov	sl, r9
   42624:	mov	r5, r9
   42628:	mov	r8, r9
   4262c:	mov	r7, r9
   42630:	add	r0, r0, #1
   42634:	bl	11f3c <xmalloc@plt>
   42638:	ldr	r2, [pc, #460]	; 4280c <warn@@Base+0x103c>
   4263c:	str	r0, [sp]
   42640:	ldr	r6, [r6, r2]
   42644:	ldrb	r2, [r4]
   42648:	lsl	r2, r2, #1
   4264c:	ldrh	r2, [r6, r2]
   42650:	tst	r2, #64	; 0x40
   42654:	beq	4266c <warn@@Base+0xe9c>
   42658:	ldrb	r2, [r4, #1]!
   4265c:	lsl	r2, r2, #1
   42660:	ldrh	r2, [r6, r2]
   42664:	tst	r2, #64	; 0x40
   42668:	bne	42658 <warn@@Base+0xe88>
   4266c:	cmp	fp, #0
   42670:	lsl	r2, sl, #2
   42674:	beq	42688 <warn@@Base+0xeb8>
   42678:	sub	r1, fp, #1
   4267c:	cmp	r1, sl
   42680:	addgt	r1, r9, r2
   42684:	bgt	426b8 <warn@@Base+0xee8>
   42688:	cmp	r9, #0
   4268c:	str	r2, [sp, #4]
   42690:	beq	427f0 <warn@@Base+0x1020>
   42694:	lsl	fp, fp, #1
   42698:	mov	r0, r9
   4269c:	lsl	r1, fp, #2
   426a0:	bl	11ed0 <xrealloc@plt>
   426a4:	ldr	r2, [sp, #4]
   426a8:	mov	r9, r0
   426ac:	add	r1, r9, r2
   426b0:	mov	r3, #0
   426b4:	str	r3, [r9, r2]
   426b8:	ldrb	r2, [r4]
   426bc:	ldr	r0, [sp]
   426c0:	cmp	r2, #0
   426c4:	bne	426e8 <warn@@Base+0xf18>
   426c8:	b	4274c <warn@@Base+0xf7c>
   426cc:	cmp	r2, #39	; 0x27
   426d0:	moveq	r7, r5
   426d4:	beq	426dc <warn@@Base+0xf0c>
   426d8:	strb	r2, [r0], #1
   426dc:	ldrb	r2, [r4, #1]!
   426e0:	cmp	r2, #0
   426e4:	beq	4274c <warn@@Base+0xf7c>
   426e8:	lsl	ip, r2, #1
   426ec:	ldrh	ip, [r6, ip]
   426f0:	tst	ip, #64	; 0x40
   426f4:	beq	42704 <warn@@Base+0xf34>
   426f8:	orr	ip, r8, r7
   426fc:	orrs	ip, ip, r5
   42700:	beq	427e0 <warn@@Base+0x1010>
   42704:	cmp	r5, #0
   42708:	movne	r5, #0
   4270c:	strbne	r2, [r0], #1
   42710:	bne	426dc <warn@@Base+0xf0c>
   42714:	cmp	r2, #92	; 0x5c
   42718:	moveq	r5, #1
   4271c:	beq	426dc <warn@@Base+0xf0c>
   42720:	cmp	r7, #0
   42724:	bne	426cc <warn@@Base+0xefc>
   42728:	cmp	r8, #0
   4272c:	beq	427b8 <warn@@Base+0xfe8>
   42730:	cmp	r2, #34	; 0x22
   42734:	mov	r5, r7
   42738:	moveq	r8, r7
   4273c:	bne	426d8 <warn@@Base+0xf08>
   42740:	ldrb	r2, [r4, #1]!
   42744:	cmp	r2, #0
   42748:	bne	426e8 <warn@@Base+0xf18>
   4274c:	mov	r3, #0
   42750:	strb	r3, [r0]
   42754:	ldr	r0, [sp]
   42758:	str	r1, [sp, #4]
   4275c:	bl	11f60 <xstrdup@plt>
   42760:	ldr	r1, [sp, #4]
   42764:	mov	r3, #0
   42768:	add	sl, sl, #1
   4276c:	str	r3, [r1, #4]
   42770:	str	r0, [r1]
   42774:	ldrb	r2, [r4]
   42778:	lsl	r1, r2, #1
   4277c:	ldrh	r1, [r6, r1]
   42780:	tst	r1, #64	; 0x40
   42784:	beq	4279c <warn@@Base+0xfcc>
   42788:	ldrb	r2, [r4, #1]!
   4278c:	lsl	r1, r2, #1
   42790:	ldrh	r1, [r6, r1]
   42794:	tst	r1, #64	; 0x40
   42798:	bne	42788 <warn@@Base+0xfb8>
   4279c:	cmp	r2, #0
   427a0:	bne	42644 <warn@@Base+0xe74>
   427a4:	ldr	r0, [sp]
   427a8:	bl	11e10 <free@plt>
   427ac:	mov	r0, r9
   427b0:	add	sp, sp, #12
   427b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   427b8:	cmp	r2, #39	; 0x27
   427bc:	mov	r5, r8
   427c0:	moveq	r7, #1
   427c4:	beq	426dc <warn@@Base+0xf0c>
   427c8:	cmp	r2, #34	; 0x22
   427cc:	moveq	r7, r8
   427d0:	strbne	r2, [r0], #1
   427d4:	movne	r7, r8
   427d8:	moveq	r8, #1
   427dc:	b	426dc <warn@@Base+0xf0c>
   427e0:	mov	r8, ip
   427e4:	mov	r7, ip
   427e8:	mov	r5, ip
   427ec:	b	4274c <warn@@Base+0xf7c>
   427f0:	mov	r0, #32
   427f4:	bl	11f3c <xmalloc@plt>
   427f8:	mov	fp, #8
   427fc:	ldr	r2, [sp, #4]
   42800:	mov	r9, r0
   42804:	b	426ac <warn@@Base+0xedc>
   42808:	strdeq	r3, [r2], -r0
   4280c:	andeq	r0, r0, r4, lsr #4
   42810:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   42814:	subs	r6, r1, #0
   42818:	ldr	r8, [pc, #192]	; 428e0 <warn@@Base+0x1110>
   4281c:	add	r8, pc, r8
   42820:	beq	428b0 <warn@@Base+0x10e0>
   42824:	ldr	r5, [r0]
   42828:	mov	r9, r0
   4282c:	cmp	r5, #0
   42830:	beq	428d8 <warn@@Base+0x1108>
   42834:	ldrb	r4, [r5]
   42838:	cmp	r4, #0
   4283c:	beq	428b8 <warn@@Base+0x10e8>
   42840:	ldr	r3, [pc, #156]	; 428e4 <warn@@Base+0x1114>
   42844:	ldr	r7, [r8, r3]
   42848:	b	42858 <warn@@Base+0x1088>
   4284c:	ldrb	r4, [r5, #1]!
   42850:	cmp	r4, #0
   42854:	beq	428b8 <warn@@Base+0x10e8>
   42858:	lsl	r3, r4, #1
   4285c:	mov	r1, r6
   42860:	ldrh	r3, [r7, r3]
   42864:	mov	r0, #92	; 0x5c
   42868:	tst	r3, #64	; 0x40
   4286c:	bne	42890 <warn@@Base+0x10c0>
   42870:	cmp	r4, #39	; 0x27
   42874:	cmpne	r4, r0
   42878:	moveq	r3, #1
   4287c:	movne	r3, #0
   42880:	cmp	r4, #34	; 0x22
   42884:	orreq	r3, r3, #1
   42888:	cmp	r3, #0
   4288c:	beq	4289c <warn@@Base+0x10cc>
   42890:	bl	1220c <fputc@plt>
   42894:	cmn	r0, #1
   42898:	beq	428b0 <warn@@Base+0x10e0>
   4289c:	mov	r0, r4
   428a0:	mov	r1, r6
   428a4:	bl	1220c <fputc@plt>
   428a8:	cmn	r0, #1
   428ac:	bne	4284c <warn@@Base+0x107c>
   428b0:	mov	r0, #1
   428b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   428b8:	mov	r1, r6
   428bc:	mov	r0, #10
   428c0:	bl	1220c <fputc@plt>
   428c4:	cmn	r0, #1
   428c8:	beq	428b0 <warn@@Base+0x10e0>
   428cc:	ldr	r5, [r9, #4]!
   428d0:	cmp	r5, #0
   428d4:	bne	42834 <warn@@Base+0x1064>
   428d8:	mov	r0, #0
   428dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   428e0:	ldrdeq	r3, [r2], -ip
   428e4:	andeq	r0, r0, r4, lsr #4
   428e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   428ec:	mov	r7, r1
   428f0:	sub	sp, sp, #140	; 0x8c
   428f4:	ldr	r3, [r7]
   428f8:	ldr	r1, [r0]
   428fc:	str	r3, [sp, #24]
   42900:	ldr	r3, [pc, #824]	; 42c40 <warn@@Base+0x1470>
   42904:	mov	sl, r0
   42908:	add	r3, pc, r3
   4290c:	str	r3, [sp, #28]
   42910:	add	r3, sp, #32
   42914:	str	r3, [sp]
   42918:	ldr	r3, [pc, #804]	; 42c44 <warn@@Base+0x1474>
   4291c:	mov	fp, #2000	; 0x7d0
   42920:	mov	r5, #0
   42924:	add	r3, pc, r3
   42928:	str	r3, [sp, #4]
   4292c:	add	r4, r5, #1
   42930:	cmp	r4, r1
   42934:	bge	42a30 <warn@@Base+0x1260>
   42938:	ldr	r3, [r7]
   4293c:	lsl	r8, r4, #2
   42940:	ldr	r0, [r3, r4, lsl #2]
   42944:	ldrb	r2, [r0]
   42948:	cmp	r2, #64	; 0x40
   4294c:	bne	42a3c <warn@@Base+0x126c>
   42950:	subs	fp, fp, #1
   42954:	beq	42bd0 <warn@@Base+0x1400>
   42958:	add	r6, r0, #1
   4295c:	mov	r1, r6
   42960:	ldr	r2, [sp]
   42964:	mov	r0, #3
   42968:	bl	12308 <__xstat64@plt>
   4296c:	cmp	r0, #0
   42970:	blt	42a38 <warn@@Base+0x1268>
   42974:	ldr	r3, [sp, #48]	; 0x30
   42978:	and	r3, r3, #61440	; 0xf000
   4297c:	cmp	r3, #16384	; 0x4000
   42980:	beq	42bfc <warn@@Base+0x142c>
   42984:	mov	r0, r6
   42988:	ldr	r1, [sp, #4]
   4298c:	bl	12278 <fopen64@plt>
   42990:	subs	r9, r0, #0
   42994:	beq	42a38 <warn@@Base+0x1268>
   42998:	mov	r2, #2
   4299c:	mov	r1, #0
   429a0:	bl	122fc <fseek@plt>
   429a4:	cmn	r0, #1
   429a8:	beq	42a14 <warn@@Base+0x1244>
   429ac:	mov	r0, r9
   429b0:	bl	11e70 <ftell@plt>
   429b4:	cmn	r0, #1
   429b8:	mov	r6, r0
   429bc:	beq	42a14 <warn@@Base+0x1244>
   429c0:	mov	r2, #0
   429c4:	mov	r1, r2
   429c8:	mov	r0, r9
   429cc:	bl	122fc <fseek@plt>
   429d0:	cmn	r0, #1
   429d4:	beq	42a14 <warn@@Base+0x1244>
   429d8:	add	r0, r6, #1
   429dc:	bl	11f3c <xmalloc@plt>
   429e0:	mov	r3, r9
   429e4:	mov	r2, r6
   429e8:	mov	r1, #1
   429ec:	str	r0, [sp, #8]
   429f0:	bl	11f78 <fread@plt>
   429f4:	cmp	r6, r0
   429f8:	mov	r3, r0
   429fc:	beq	42a48 <warn@@Base+0x1278>
   42a00:	str	r0, [sp, #12]
   42a04:	mov	r0, r9
   42a08:	bl	11e1c <ferror@plt>
   42a0c:	cmp	r0, #0
   42a10:	beq	42a44 <warn@@Base+0x1274>
   42a14:	mov	r0, r9
   42a18:	bl	12164 <fclose@plt>
   42a1c:	mov	r5, r4
   42a20:	ldr	r1, [sl]
   42a24:	add	r4, r5, #1
   42a28:	cmp	r4, r1
   42a2c:	blt	42938 <warn@@Base+0x1168>
   42a30:	add	sp, sp, #140	; 0x8c
   42a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42a38:	ldr	r1, [sl]
   42a3c:	mov	r5, r4
   42a40:	b	4292c <warn@@Base+0x115c>
   42a44:	ldr	r3, [sp, #12]
   42a48:	ldr	r1, [sp, #8]
   42a4c:	mov	r2, #0
   42a50:	strb	r2, [r1, r3]
   42a54:	ldrb	r3, [r1]
   42a58:	cmp	r3, r2
   42a5c:	beq	42aa0 <warn@@Base+0x12d0>
   42a60:	ldr	r2, [pc, #480]	; 42c48 <warn@@Base+0x1478>
   42a64:	ldr	r1, [sp, #28]
   42a68:	lsl	r3, r3, #1
   42a6c:	ldr	r1, [r1, r2]
   42a70:	ldrh	r3, [r1, r3]
   42a74:	tst	r3, #64	; 0x40
   42a78:	beq	42ae0 <warn@@Base+0x1310>
   42a7c:	ldr	r2, [sp, #8]
   42a80:	b	42a94 <warn@@Base+0x12c4>
   42a84:	lsl	r3, r3, #1
   42a88:	ldrh	r3, [r1, r3]
   42a8c:	tst	r3, #64	; 0x40
   42a90:	beq	42ae0 <warn@@Base+0x1310>
   42a94:	ldrb	r3, [r2, #1]!
   42a98:	cmp	r3, #0
   42a9c:	bne	42a84 <warn@@Base+0x12b4>
   42aa0:	mov	r0, #4
   42aa4:	bl	11f3c <xmalloc@plt>
   42aa8:	ldr	r2, [sp, #24]
   42aac:	mov	r6, #0
   42ab0:	mov	r3, r0
   42ab4:	str	r0, [sp, #12]
   42ab8:	ldr	r0, [r7]
   42abc:	str	r6, [r3]
   42ac0:	cmp	r2, r0
   42ac4:	bne	42bc4 <warn@@Base+0x13f4>
   42ac8:	mov	r0, r2
   42acc:	bl	42518 <warn@@Base+0xd48>
   42ad0:	mov	r3, r6
   42ad4:	mov	r2, r8
   42ad8:	str	r0, [r7]
   42adc:	b	42b30 <warn@@Base+0x1360>
   42ae0:	ldr	r0, [sp, #8]
   42ae4:	bl	425f8 <warn@@Base+0xe28>
   42ae8:	ldr	r2, [sp, #24]
   42aec:	mov	r3, r0
   42af0:	str	r0, [sp, #12]
   42af4:	ldr	r0, [r7]
   42af8:	cmp	r0, r2
   42afc:	beq	42c28 <warn@@Base+0x1458>
   42b00:	ldr	r6, [r3]
   42b04:	cmp	r6, #0
   42b08:	beq	42bc4 <warn@@Base+0x13f4>
   42b0c:	ldr	r2, [sp, #12]
   42b10:	mov	r6, #0
   42b14:	ldr	r3, [r2, #4]!
   42b18:	add	r6, r6, #1
   42b1c:	cmp	r3, #0
   42b20:	lsl	r3, r6, #2
   42b24:	bne	42b14 <warn@@Base+0x1344>
   42b28:	add	r2, r4, r6
   42b2c:	lsl	r2, r2, #2
   42b30:	ldr	r0, [r0, r8]
   42b34:	str	r3, [sp, #16]
   42b38:	str	r2, [sp, #20]
   42b3c:	bl	11e10 <free@plt>
   42b40:	ldr	r1, [sl]
   42b44:	ldr	r0, [r7]
   42b48:	add	r1, r1, #1
   42b4c:	add	r1, r1, r6
   42b50:	lsl	r1, r1, #2
   42b54:	bl	11ed0 <xrealloc@plt>
   42b58:	ldr	r2, [sp, #20]
   42b5c:	add	ip, r8, #4
   42b60:	mov	r1, r0
   42b64:	ldr	r0, [sl]
   42b68:	str	r1, [r7]
   42b6c:	sub	r4, r0, r4
   42b70:	add	r0, r1, r2
   42b74:	add	r1, r1, ip
   42b78:	lsl	r2, r4, #2
   42b7c:	bl	11df8 <memmove@plt>
   42b80:	ldr	r4, [sp, #12]
   42b84:	ldr	r3, [sp, #16]
   42b88:	ldr	r0, [r7]
   42b8c:	mov	r2, r3
   42b90:	mov	r1, r4
   42b94:	add	r0, r0, r8
   42b98:	bl	11e40 <memcpy@plt>
   42b9c:	ldr	r3, [sl]
   42ba0:	mov	r0, r4
   42ba4:	sub	r3, r3, #1
   42ba8:	add	r6, r3, r6
   42bac:	str	r6, [sl]
   42bb0:	bl	11e10 <free@plt>
   42bb4:	ldr	r0, [sp, #8]
   42bb8:	bl	11e10 <free@plt>
   42bbc:	mov	r4, r5
   42bc0:	b	42a14 <warn@@Base+0x1244>
   42bc4:	mov	r3, r6
   42bc8:	mov	r2, r8
   42bcc:	b	42b30 <warn@@Base+0x1360>
   42bd0:	ldr	r0, [pc, #116]	; 42c4c <warn@@Base+0x147c>
   42bd4:	ldr	r2, [r3]
   42bd8:	mov	r3, r0
   42bdc:	ldr	r0, [sp, #28]
   42be0:	ldr	r1, [pc, #104]	; 42c50 <warn@@Base+0x1480>
   42be4:	ldr	r3, [r0, r3]
   42be8:	add	r1, pc, r1
   42bec:	ldr	r0, [r3]
   42bf0:	bl	120b0 <fprintf@plt>
   42bf4:	mov	r0, #1
   42bf8:	bl	12218 <xexit@plt>
   42bfc:	ldr	r0, [sp, #28]
   42c00:	ldr	r3, [pc, #68]	; 42c4c <warn@@Base+0x147c>
   42c04:	ldr	r2, [r7]
   42c08:	ldr	r1, [pc, #68]	; 42c54 <warn@@Base+0x1484>
   42c0c:	ldr	r3, [r0, r3]
   42c10:	add	r1, pc, r1
   42c14:	ldr	r2, [r2]
   42c18:	ldr	r0, [r3]
   42c1c:	bl	120b0 <fprintf@plt>
   42c20:	mov	r0, #1
   42c24:	bl	12218 <xexit@plt>
   42c28:	ldr	r3, [sp, #12]
   42c2c:	ldr	r0, [sp, #24]
   42c30:	ldr	r6, [r3]
   42c34:	bl	42518 <warn@@Base+0xd48>
   42c38:	str	r0, [r7]
   42c3c:	b	42b04 <warn@@Base+0x1334>
   42c40:	strdeq	r3, [r2], -r0
   42c44:	andeq	pc, r0, r8, lsr r0	; <UNPREDICTABLE>
   42c48:	andeq	r0, r0, r4, lsr #4
   42c4c:	andeq	r0, r0, r8, lsr #4
   42c50:	andeq	pc, r0, r4, ror sp	; <UNPREDICTABLE>
   42c54:	andeq	pc, r0, r8, ror sp	; <UNPREDICTABLE>
   42c58:	subs	r3, r0, #0
   42c5c:	beq	42c84 <warn@@Base+0x14b4>
   42c60:	ldr	r0, [r3]
   42c64:	cmp	r0, #0
   42c68:	bxeq	lr
   42c6c:	mov	r0, #0
   42c70:	ldr	r2, [r3, #4]!
   42c74:	add	r0, r0, #1
   42c78:	cmp	r2, #0
   42c7c:	bne	42c70 <warn@@Base+0x14a0>
   42c80:	bx	lr
   42c84:	mov	r0, r3
   42c88:	bx	lr
   42c8c:	cmp	r0, #0
   42c90:	bxeq	lr
   42c94:	sub	ip, r1, #1
   42c98:	cmp	ip, #60	; 0x3c
   42c9c:	addls	pc, pc, ip, lsl #2
   42ca0:	b	42db8 <warn@@Base+0x15e8>
   42ca4:	b	42da0 <warn@@Base+0x15d0>
   42ca8:	b	42da0 <warn@@Base+0x15d0>
   42cac:	b	42da0 <warn@@Base+0x15d0>
   42cb0:	b	42da0 <warn@@Base+0x15d0>
   42cb4:	b	42db8 <warn@@Base+0x15e8>
   42cb8:	b	42db8 <warn@@Base+0x15e8>
   42cbc:	b	42db8 <warn@@Base+0x15e8>
   42cc0:	b	42db8 <warn@@Base+0x15e8>
   42cc4:	b	42d98 <warn@@Base+0x15c8>
   42cc8:	b	42d98 <warn@@Base+0x15c8>
   42ccc:	b	42da0 <warn@@Base+0x15d0>
   42cd0:	b	42d98 <warn@@Base+0x15c8>
   42cd4:	b	42d98 <warn@@Base+0x15c8>
   42cd8:	b	42d98 <warn@@Base+0x15c8>
   42cdc:	b	42d98 <warn@@Base+0x15c8>
   42ce0:	b	42d98 <warn@@Base+0x15c8>
   42ce4:	b	42d98 <warn@@Base+0x15c8>
   42ce8:	b	42d98 <warn@@Base+0x15c8>
   42cec:	b	42d98 <warn@@Base+0x15c8>
   42cf0:	b	42db8 <warn@@Base+0x15e8>
   42cf4:	b	42db8 <warn@@Base+0x15e8>
   42cf8:	b	42d98 <warn@@Base+0x15c8>
   42cfc:	b	42db8 <warn@@Base+0x15e8>
   42d00:	b	42db8 <warn@@Base+0x15e8>
   42d04:	b	42d98 <warn@@Base+0x15c8>
   42d08:	b	42d98 <warn@@Base+0x15c8>
   42d0c:	b	42d98 <warn@@Base+0x15c8>
   42d10:	b	42d98 <warn@@Base+0x15c8>
   42d14:	b	42d98 <warn@@Base+0x15c8>
   42d18:	b	42d98 <warn@@Base+0x15c8>
   42d1c:	b	42db8 <warn@@Base+0x15e8>
   42d20:	b	42db8 <warn@@Base+0x15e8>
   42d24:	b	42da0 <warn@@Base+0x15d0>
   42d28:	b	42d98 <warn@@Base+0x15c8>
   42d2c:	b	42d98 <warn@@Base+0x15c8>
   42d30:	b	42d98 <warn@@Base+0x15c8>
   42d34:	b	42d98 <warn@@Base+0x15c8>
   42d38:	b	42d98 <warn@@Base+0x15c8>
   42d3c:	b	42db8 <warn@@Base+0x15e8>
   42d40:	b	42d98 <warn@@Base+0x15c8>
   42d44:	b	42da0 <warn@@Base+0x15d0>
   42d48:	b	42da0 <warn@@Base+0x15d0>
   42d4c:	b	42da0 <warn@@Base+0x15d0>
   42d50:	b	42db8 <warn@@Base+0x15e8>
   42d54:	b	42db8 <warn@@Base+0x15e8>
   42d58:	b	42da0 <warn@@Base+0x15d0>
   42d5c:	b	42da0 <warn@@Base+0x15d0>
   42d60:	b	42db8 <warn@@Base+0x15e8>
   42d64:	b	42db8 <warn@@Base+0x15e8>
   42d68:	b	42db8 <warn@@Base+0x15e8>
   42d6c:	b	42d98 <warn@@Base+0x15c8>
   42d70:	b	42d98 <warn@@Base+0x15c8>
   42d74:	b	42db8 <warn@@Base+0x15e8>
   42d78:	b	42da0 <warn@@Base+0x15d0>
   42d7c:	b	42da0 <warn@@Base+0x15d0>
   42d80:	b	42da0 <warn@@Base+0x15d0>
   42d84:	b	42da0 <warn@@Base+0x15d0>
   42d88:	b	42da0 <warn@@Base+0x15d0>
   42d8c:	b	42da0 <warn@@Base+0x15d0>
   42d90:	b	42da0 <warn@@Base+0x15d0>
   42d94:	b	42da0 <warn@@Base+0x15d0>
   42d98:	cmp	r3, #0
   42d9c:	bne	42db8 <warn@@Base+0x15e8>
   42da0:	mov	ip, #0
   42da4:	str	r1, [r0]
   42da8:	strd	r2, [r0, #8]
   42dac:	str	ip, [r0, #4]
   42db0:	mov	r0, #1
   42db4:	bx	lr
   42db8:	mov	r0, #0
   42dbc:	bx	lr
   42dc0:	cmp	r0, #0
   42dc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   42dc8:	clz	r4, r1
   42dcc:	ldr	r5, [pc, #136]	; 42e5c <warn@@Base+0x168c>
   42dd0:	lsr	r4, r4, #5
   42dd4:	moveq	r4, #1
   42dd8:	cmp	r4, #0
   42ddc:	add	r5, pc, r5
   42de0:	bne	42e54 <warn@@Base+0x1684>
   42de4:	mov	r8, r0
   42de8:	mov	r0, r1
   42dec:	mov	r7, r1
   42df0:	bl	12074 <strlen@plt>
   42df4:	ldr	r3, [pc, #100]	; 42e60 <warn@@Base+0x1690>
   42df8:	ldr	r9, [r5, r3]
   42dfc:	mov	r5, r9
   42e00:	mov	r6, r0
   42e04:	b	42e18 <warn@@Base+0x1648>
   42e08:	add	r4, r4, #1
   42e0c:	cmp	r4, #33	; 0x21
   42e10:	add	r5, r5, #20
   42e14:	beq	42e54 <warn@@Base+0x1684>
   42e18:	ldr	r3, [r5, #4]
   42e1c:	cmp	r3, r6
   42e20:	bne	42e08 <warn@@Base+0x1638>
   42e24:	ldr	r1, [r5]
   42e28:	mov	r0, r7
   42e2c:	bl	11d98 <strcmp@plt>
   42e30:	cmp	r0, #0
   42e34:	bne	42e08 <warn@@Base+0x1638>
   42e38:	add	r4, r4, r4, lsl #2
   42e3c:	mov	r3, #39	; 0x27
   42e40:	add	r4, r9, r4, lsl #2
   42e44:	str	r3, [r8]
   42e48:	stmib	r8, {r0, r4}
   42e4c:	mov	r0, #1
   42e50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   42e54:	mov	r0, #0
   42e58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   42e5c:	andeq	r3, r2, ip, lsl r2
   42e60:	andeq	r0, r0, r4, lsr r2
   42e64:	cmp	r0, #0
   42e68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   42e6c:	clz	r5, r1
   42e70:	ldr	r4, [pc, #160]	; 42f18 <warn@@Base+0x1748>
   42e74:	lsr	r5, r5, #5
   42e78:	moveq	r5, #1
   42e7c:	cmp	r5, #0
   42e80:	add	r4, pc, r4
   42e84:	bne	42f10 <warn@@Base+0x1740>
   42e88:	mov	r7, r0
   42e8c:	mov	r0, r1
   42e90:	mov	r6, r1
   42e94:	mov	sl, r2
   42e98:	bl	12074 <strlen@plt>
   42e9c:	ldr	r3, [pc, #120]	; 42f1c <warn@@Base+0x174c>
   42ea0:	ldr	r8, [r4, r3]
   42ea4:	ldr	r1, [r8, #4]
   42ea8:	cmp	r1, #0
   42eac:	mov	r9, r0
   42eb0:	beq	42f10 <warn@@Base+0x1740>
   42eb4:	mov	r4, r8
   42eb8:	b	42ed0 <warn@@Base+0x1700>
   42ebc:	add	r4, r4, #16
   42ec0:	ldr	r1, [r4, #4]
   42ec4:	add	r5, r5, #1
   42ec8:	cmp	r1, #0
   42ecc:	beq	42f10 <warn@@Base+0x1740>
   42ed0:	ldr	r3, [r4, #8]
   42ed4:	cmp	r3, r9
   42ed8:	bne	42ebc <warn@@Base+0x16ec>
   42edc:	ldr	r3, [r4, #12]
   42ee0:	cmp	r3, sl
   42ee4:	bne	42ebc <warn@@Base+0x16ec>
   42ee8:	mov	r0, r6
   42eec:	bl	11d98 <strcmp@plt>
   42ef0:	cmp	r0, #0
   42ef4:	bne	42ebc <warn@@Base+0x16ec>
   42ef8:	add	r5, r8, r5, lsl #4
   42efc:	mov	r3, #49	; 0x31
   42f00:	stmib	r7, {r0, r5}
   42f04:	str	r3, [r7]
   42f08:	mov	r0, #1
   42f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   42f10:	mov	r0, #0
   42f14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   42f18:	andeq	r3, r2, r8, ror r1
   42f1c:	andeq	r0, r0, r0, lsr r2
   42f20:	push	{r4, r5, r6, r7, r8, lr}
   42f24:	mov	r6, r0
   42f28:	sub	sp, sp, #56	; 0x38
   42f2c:	mov	r4, r1
   42f30:	mov	r7, r2
   42f34:	bl	12074 <strlen@plt>
   42f38:	ldrb	r3, [r6]
   42f3c:	cmp	r3, #95	; 0x5f
   42f40:	beq	42ffc <warn@@Base+0x182c>
   42f44:	ands	r5, r4, #16
   42f48:	beq	42fd0 <warn@@Base+0x1800>
   42f4c:	mov	r8, sp
   42f50:	mov	r2, r0
   42f54:	mov	r3, r8
   42f58:	mov	r0, r6
   42f5c:	mov	r1, r4
   42f60:	bl	1205c <cplus_demangle_init_info@plt>
   42f64:	ldr	r0, [sp, #24]
   42f68:	lsl	r0, r0, #4
   42f6c:	bl	11ffc <malloc@plt>
   42f70:	mov	r5, r0
   42f74:	ldr	r0, [sp, #36]	; 0x24
   42f78:	str	r5, [sp, #16]
   42f7c:	lsl	r0, r0, #2
   42f80:	bl	11ffc <malloc@plt>
   42f84:	cmp	r5, #0
   42f88:	cmpne	r0, #0
   42f8c:	mov	r6, r0
   42f90:	str	r0, [sp, #28]
   42f94:	beq	43068 <warn@@Base+0x1898>
   42f98:	mov	r0, r8
   42f9c:	bl	121a0 <cplus_demangle_type@plt>
   42fa0:	mov	r5, r0
   42fa4:	tst	r4, #1
   42fa8:	ldr	r0, [sp, #28]
   42fac:	beq	42fdc <warn@@Base+0x180c>
   42fb0:	ldr	r3, [sp, #12]
   42fb4:	ldrb	r3, [r3]
   42fb8:	cmp	r3, #0
   42fbc:	beq	42fdc <warn@@Base+0x180c>
   42fc0:	bl	11e10 <free@plt>
   42fc4:	ldr	r0, [sp, #16]
   42fc8:	bl	11e10 <free@plt>
   42fcc:	mov	r5, #0
   42fd0:	mov	r0, r5
   42fd4:	add	sp, sp, #56	; 0x38
   42fd8:	pop	{r4, r5, r6, r7, r8, pc}
   42fdc:	bl	11e10 <free@plt>
   42fe0:	cmp	r5, #0
   42fe4:	beq	42fc4 <warn@@Base+0x17f4>
   42fe8:	ldr	r3, [sp, #16]
   42fec:	mov	r0, r5
   42ff0:	str	r3, [r7]
   42ff4:	add	sp, sp, #56	; 0x38
   42ff8:	pop	{r4, r5, r6, r7, r8, pc}
   42ffc:	ldrb	r3, [r6, #1]
   43000:	cmp	r3, #90	; 0x5a
   43004:	bne	42f44 <warn@@Base+0x1774>
   43008:	mov	r8, sp
   4300c:	mov	r2, r0
   43010:	mov	r3, r8
   43014:	mov	r0, r6
   43018:	mov	r1, r4
   4301c:	bl	1205c <cplus_demangle_init_info@plt>
   43020:	ldr	r0, [sp, #24]
   43024:	lsl	r0, r0, #4
   43028:	bl	11ffc <malloc@plt>
   4302c:	mov	r5, r0
   43030:	ldr	r0, [sp, #36]	; 0x24
   43034:	str	r5, [sp, #16]
   43038:	lsl	r0, r0, #2
   4303c:	bl	11ffc <malloc@plt>
   43040:	cmp	r5, #0
   43044:	cmpne	r0, #0
   43048:	mov	r6, r0
   4304c:	str	r0, [sp, #28]
   43050:	beq	43068 <warn@@Base+0x1898>
   43054:	mov	r0, r8
   43058:	mov	r1, #1
   4305c:	bl	121d0 <cplus_demangle_mangled_name@plt>
   43060:	mov	r5, r0
   43064:	b	42fa4 <warn@@Base+0x17d4>
   43068:	mov	r0, r5
   4306c:	bl	11e10 <free@plt>
   43070:	mov	r0, r6
   43074:	bl	11e10 <free@plt>
   43078:	mov	r5, #0
   4307c:	mov	r0, r5
   43080:	add	sp, sp, #56	; 0x38
   43084:	pop	{r4, r5, r6, r7, r8, pc}
   43088:	cmp	r0, #49	; 0x31
   4308c:	beq	438c4 <warn@@Base+0x20f4>
   43090:	bls	430f4 <warn@@Base+0x1924>
   43094:	cmp	r0, #72	; 0x48
   43098:	beq	438b8 <warn@@Base+0x20e8>
   4309c:	bls	43420 <warn@@Base+0x1c50>
   430a0:	ldr	r3, [pc, #2088]	; 438d0 <warn@@Base+0x2100>
   430a4:	cmp	r0, r3
   430a8:	beq	438a0 <warn@@Base+0x20d0>
   430ac:	bls	432b0 <warn@@Base+0x1ae0>
   430b0:	ldr	r3, [pc, #2076]	; 438d4 <warn@@Base+0x2104>
   430b4:	cmp	r0, r3
   430b8:	beq	43870 <warn@@Base+0x20a0>
   430bc:	bhi	433bc <warn@@Base+0x1bec>
   430c0:	sub	r3, r3, #3
   430c4:	cmp	r0, r3
   430c8:	beq	437c8 <warn@@Base+0x1ff8>
   430cc:	bhi	43270 <warn@@Base+0x1aa0>
   430d0:	sub	r3, r3, #2
   430d4:	cmp	r0, r3
   430d8:	beq	435e8 <warn@@Base+0x1e18>
   430dc:	add	r3, r3, #1
   430e0:	cmp	r0, r3
   430e4:	bne	43140 <warn@@Base+0x1970>
   430e8:	ldr	r0, [pc, #2024]	; 438d8 <warn@@Base+0x2108>
   430ec:	add	r0, pc, r0
   430f0:	bx	lr
   430f4:	cmp	r0, #27
   430f8:	beq	438ac <warn@@Base+0x20dc>
   430fc:	bhi	431dc <warn@@Base+0x1a0c>
   43100:	cmp	r0, #15
   43104:	beq	4387c <warn@@Base+0x20ac>
   43108:	bhi	431a8 <warn@@Base+0x19d8>
   4310c:	cmp	r0, #4
   43110:	beq	4384c <warn@@Base+0x207c>
   43114:	bls	4316c <warn@@Base+0x199c>
   43118:	cmp	r0, #10
   4311c:	beq	43804 <warn@@Base+0x2034>
   43120:	bhi	43150 <warn@@Base+0x1980>
   43124:	cmp	r0, #5
   43128:	beq	436c0 <warn@@Base+0x1ef0>
   4312c:	cmp	r0, #8
   43130:	bne	43148 <warn@@Base+0x1978>
   43134:	ldr	r0, [pc, #1952]	; 438dc <warn@@Base+0x210c>
   43138:	add	r0, pc, r0
   4313c:	bx	lr
   43140:	mov	r0, #0
   43144:	bx	lr
   43148:	mov	r0, #0
   4314c:	bx	lr
   43150:	cmp	r0, #11
   43154:	beq	436b4 <warn@@Base+0x1ee4>
   43158:	cmp	r0, #13
   4315c:	bne	43198 <warn@@Base+0x19c8>
   43160:	ldr	r0, [pc, #1912]	; 438e0 <warn@@Base+0x2110>
   43164:	add	r0, pc, r0
   43168:	bx	lr
   4316c:	cmp	r0, #1
   43170:	beq	4375c <warn@@Base+0x1f8c>
   43174:	cmp	r0, #0
   43178:	beq	43738 <warn@@Base+0x1f68>
   4317c:	cmp	r0, #2
   43180:	beq	436f0 <warn@@Base+0x1f20>
   43184:	cmp	r0, #3
   43188:	bne	431a0 <warn@@Base+0x19d0>
   4318c:	ldr	r0, [pc, #1872]	; 438e4 <warn@@Base+0x2114>
   43190:	add	r0, pc, r0
   43194:	bx	lr
   43198:	mov	r0, #0
   4319c:	bx	lr
   431a0:	mov	r0, #0
   431a4:	bx	lr
   431a8:	cmp	r0, #21
   431ac:	beq	43840 <warn@@Base+0x2070>
   431b0:	bls	43328 <warn@@Base+0x1b58>
   431b4:	cmp	r0, #24
   431b8:	beq	437d4 <warn@@Base+0x2004>
   431bc:	bhi	43294 <warn@@Base+0x1ac4>
   431c0:	cmp	r0, #22
   431c4:	beq	436a8 <warn@@Base+0x1ed8>
   431c8:	cmp	r0, #23
   431cc:	bne	4321c <warn@@Base+0x1a4c>
   431d0:	ldr	r0, [pc, #1808]	; 438e8 <warn@@Base+0x2118>
   431d4:	add	r0, pc, r0
   431d8:	bx	lr
   431dc:	cmp	r0, #38	; 0x26
   431e0:	beq	43888 <warn@@Base+0x20b8>
   431e4:	bhi	432f4 <warn@@Base+0x1b24>
   431e8:	cmp	r0, #32
   431ec:	beq	43858 <warn@@Base+0x2088>
   431f0:	bls	43248 <warn@@Base+0x1a78>
   431f4:	cmp	r0, #35	; 0x23
   431f8:	beq	437ec <warn@@Base+0x201c>
   431fc:	bhi	4322c <warn@@Base+0x1a5c>
   43200:	cmp	r0, #33	; 0x21
   43204:	beq	4369c <warn@@Base+0x1ecc>
   43208:	cmp	r0, #34	; 0x22
   4320c:	bne	43224 <warn@@Base+0x1a54>
   43210:	ldr	r0, [pc, #1748]	; 438ec <warn@@Base+0x211c>
   43214:	add	r0, pc, r0
   43218:	bx	lr
   4321c:	mov	r0, #0
   43220:	bx	lr
   43224:	mov	r0, #0
   43228:	bx	lr
   4322c:	cmp	r0, #36	; 0x24
   43230:	beq	43690 <warn@@Base+0x1ec0>
   43234:	cmp	r0, #37	; 0x25
   43238:	bne	43570 <warn@@Base+0x1da0>
   4323c:	ldr	r0, [pc, #1708]	; 438f0 <warn@@Base+0x2120>
   43240:	add	r0, pc, r0
   43244:	bx	lr
   43248:	cmp	r0, #29
   4324c:	beq	437a4 <warn@@Base+0x1fd4>
   43250:	bcc	43720 <warn@@Base+0x1f50>
   43254:	cmp	r0, #30
   43258:	beq	436e4 <warn@@Base+0x1f14>
   4325c:	cmp	r0, #31
   43260:	bne	433f0 <warn@@Base+0x1c20>
   43264:	ldr	r0, [pc, #1672]	; 438f4 <warn@@Base+0x2124>
   43268:	add	r0, pc, r0
   4326c:	bx	lr
   43270:	ldr	r3, [pc, #1664]	; 438f8 <warn@@Base+0x2128>
   43274:	cmp	r0, r3
   43278:	beq	43684 <warn@@Base+0x1eb4>
   4327c:	add	r3, r3, #1
   43280:	cmp	r0, r3
   43284:	bne	43350 <warn@@Base+0x1b80>
   43288:	ldr	r0, [pc, #1644]	; 438fc <warn@@Base+0x212c>
   4328c:	add	r0, pc, r0
   43290:	bx	lr
   43294:	cmp	r0, #25
   43298:	beq	43678 <warn@@Base+0x1ea8>
   4329c:	cmp	r0, #26
   432a0:	bne	43460 <warn@@Base+0x1c90>
   432a4:	ldr	r0, [pc, #1620]	; 43900 <warn@@Base+0x2130>
   432a8:	add	r0, pc, r0
   432ac:	bx	lr
   432b0:	sub	r3, r3, #116	; 0x74
   432b4:	cmp	r0, r3
   432b8:	beq	4381c <warn@@Base+0x204c>
   432bc:	bls	4359c <warn@@Base+0x1dcc>
   432c0:	ldr	r3, [pc, #1596]	; 43904 <warn@@Base+0x2134>
   432c4:	cmp	r0, r3
   432c8:	beq	43810 <warn@@Base+0x2040>
   432cc:	bhi	43578 <warn@@Base+0x1da8>
   432d0:	sub	r3, r3, #112	; 0x70
   432d4:	cmp	r0, r3
   432d8:	beq	4366c <warn@@Base+0x1e9c>
   432dc:	add	r3, r3, #1
   432e0:	cmp	r0, r3
   432e4:	bne	435d8 <warn@@Base+0x1e08>
   432e8:	ldr	r0, [pc, #1560]	; 43908 <warn@@Base+0x2138>
   432ec:	add	r0, pc, r0
   432f0:	bx	lr
   432f4:	cmp	r0, #43	; 0x2b
   432f8:	beq	43828 <warn@@Base+0x2058>
   432fc:	bls	43374 <warn@@Base+0x1ba4>
   43300:	cmp	r0, #46	; 0x2e
   43304:	beq	437b0 <warn@@Base+0x1fe0>
   43308:	bhi	43358 <warn@@Base+0x1b88>
   4330c:	cmp	r0, #44	; 0x2c
   43310:	beq	43660 <warn@@Base+0x1e90>
   43314:	cmp	r0, #45	; 0x2d
   43318:	bne	433ac <warn@@Base+0x1bdc>
   4331c:	ldr	r0, [pc, #1512]	; 4390c <warn@@Base+0x213c>
   43320:	add	r0, pc, r0
   43324:	bx	lr
   43328:	cmp	r0, #17
   4332c:	beq	43768 <warn@@Base+0x1f98>
   43330:	bcc	43744 <warn@@Base+0x1f74>
   43334:	cmp	r0, #18
   43338:	beq	436d8 <warn@@Base+0x1f08>
   4333c:	cmp	r0, #19
   43340:	bne	433b4 <warn@@Base+0x1be4>
   43344:	ldr	r0, [pc, #1476]	; 43910 <warn@@Base+0x2140>
   43348:	add	r0, pc, r0
   4334c:	bx	lr
   43350:	mov	r0, #0
   43354:	bx	lr
   43358:	cmp	r0, #47	; 0x2f
   4335c:	beq	43654 <warn@@Base+0x1e84>
   43360:	cmp	r0, #48	; 0x30
   43364:	bne	4339c <warn@@Base+0x1bcc>
   43368:	ldr	r0, [pc, #1444]	; 43914 <warn@@Base+0x2144>
   4336c:	add	r0, pc, r0
   43370:	bx	lr
   43374:	cmp	r0, #40	; 0x28
   43378:	beq	43780 <warn@@Base+0x1fb0>
   4337c:	bcc	4372c <warn@@Base+0x1f5c>
   43380:	cmp	r0, #41	; 0x29
   43384:	beq	436fc <warn@@Base+0x1f2c>
   43388:	cmp	r0, #42	; 0x2a
   4338c:	bne	433a4 <warn@@Base+0x1bd4>
   43390:	ldr	r0, [pc, #1408]	; 43918 <warn@@Base+0x2148>
   43394:	add	r0, pc, r0
   43398:	bx	lr
   4339c:	mov	r0, #0
   433a0:	bx	lr
   433a4:	mov	r0, #0
   433a8:	bx	lr
   433ac:	mov	r0, #0
   433b0:	bx	lr
   433b4:	mov	r0, #0
   433b8:	bx	lr
   433bc:	ldr	r3, [pc, #1368]	; 4391c <warn@@Base+0x214c>
   433c0:	cmp	r0, r3
   433c4:	beq	437e0 <warn@@Base+0x2010>
   433c8:	bhi	43400 <warn@@Base+0x1c30>
   433cc:	sub	r3, r3, #2
   433d0:	cmp	r0, r3
   433d4:	beq	43648 <warn@@Base+0x1e78>
   433d8:	add	r3, r3, #1
   433dc:	cmp	r0, r3
   433e0:	bne	433f8 <warn@@Base+0x1c28>
   433e4:	ldr	r0, [pc, #1332]	; 43920 <warn@@Base+0x2150>
   433e8:	add	r0, pc, r0
   433ec:	bx	lr
   433f0:	mov	r0, #0
   433f4:	bx	lr
   433f8:	mov	r0, #0
   433fc:	bx	lr
   43400:	cmp	r0, #40960	; 0xa000
   43404:	beq	4363c <warn@@Base+0x1e6c>
   43408:	ldr	r3, [pc, #1300]	; 43924 <warn@@Base+0x2154>
   4340c:	cmp	r0, r3
   43410:	bne	43468 <warn@@Base+0x1c98>
   43414:	ldr	r0, [pc, #1292]	; 43928 <warn@@Base+0x2158>
   43418:	add	r0, pc, r0
   4341c:	bx	lr
   43420:	cmp	r0, #60	; 0x3c
   43424:	beq	43894 <warn@@Base+0x20c4>
   43428:	bhi	434bc <warn@@Base+0x1cec>
   4342c:	cmp	r0, #54	; 0x36
   43430:	beq	43834 <warn@@Base+0x2064>
   43434:	bls	43494 <warn@@Base+0x1cc4>
   43438:	cmp	r0, #57	; 0x39
   4343c:	beq	437f8 <warn@@Base+0x2028>
   43440:	bhi	43478 <warn@@Base+0x1ca8>
   43444:	cmp	r0, #55	; 0x37
   43448:	beq	43630 <warn@@Base+0x1e60>
   4344c:	cmp	r0, #56	; 0x38
   43450:	bne	43470 <warn@@Base+0x1ca0>
   43454:	ldr	r0, [pc, #1232]	; 4392c <warn@@Base+0x215c>
   43458:	add	r0, pc, r0
   4345c:	bx	lr
   43460:	mov	r0, #0
   43464:	bx	lr
   43468:	mov	r0, #0
   4346c:	bx	lr
   43470:	mov	r0, #0
   43474:	bx	lr
   43478:	cmp	r0, #58	; 0x3a
   4347c:	beq	43624 <warn@@Base+0x1e54>
   43480:	cmp	r0, #59	; 0x3b
   43484:	bne	434f0 <warn@@Base+0x1d20>
   43488:	ldr	r0, [pc, #1184]	; 43930 <warn@@Base+0x2160>
   4348c:	add	r0, pc, r0
   43490:	bx	lr
   43494:	cmp	r0, #51	; 0x33
   43498:	beq	43798 <warn@@Base+0x1fc8>
   4349c:	bcc	43750 <warn@@Base+0x1f80>
   434a0:	cmp	r0, #52	; 0x34
   434a4:	beq	436cc <warn@@Base+0x1efc>
   434a8:	cmp	r0, #53	; 0x35
   434ac:	bne	434f8 <warn@@Base+0x1d28>
   434b0:	ldr	r0, [pc, #1148]	; 43934 <warn@@Base+0x2164>
   434b4:	add	r0, pc, r0
   434b8:	bx	lr
   434bc:	cmp	r0, #66	; 0x42
   434c0:	beq	43864 <warn@@Base+0x2094>
   434c4:	bls	43524 <warn@@Base+0x1d54>
   434c8:	cmp	r0, #69	; 0x45
   434cc:	beq	437bc <warn@@Base+0x1fec>
   434d0:	bhi	43508 <warn@@Base+0x1d38>
   434d4:	cmp	r0, #67	; 0x43
   434d8:	beq	43618 <warn@@Base+0x1e48>
   434dc:	cmp	r0, #68	; 0x44
   434e0:	bne	43500 <warn@@Base+0x1d30>
   434e4:	ldr	r0, [pc, #1100]	; 43938 <warn@@Base+0x2168>
   434e8:	add	r0, pc, r0
   434ec:	bx	lr
   434f0:	mov	r0, #0
   434f4:	bx	lr
   434f8:	mov	r0, #0
   434fc:	bx	lr
   43500:	mov	r0, #0
   43504:	bx	lr
   43508:	cmp	r0, #70	; 0x46
   4350c:	beq	4360c <warn@@Base+0x1e3c>
   43510:	cmp	r0, #71	; 0x47
   43514:	bne	4354c <warn@@Base+0x1d7c>
   43518:	ldr	r0, [pc, #1052]	; 4393c <warn@@Base+0x216c>
   4351c:	add	r0, pc, r0
   43520:	bx	lr
   43524:	cmp	r0, #63	; 0x3f
   43528:	beq	4378c <warn@@Base+0x1fbc>
   4352c:	bls	4355c <warn@@Base+0x1d8c>
   43530:	cmp	r0, #64	; 0x40
   43534:	beq	43600 <warn@@Base+0x1e30>
   43538:	cmp	r0, #65	; 0x41
   4353c:	bne	43554 <warn@@Base+0x1d84>
   43540:	ldr	r0, [pc, #1016]	; 43940 <warn@@Base+0x2170>
   43544:	add	r0, pc, r0
   43548:	bx	lr
   4354c:	mov	r0, #0
   43550:	bx	lr
   43554:	mov	r0, #0
   43558:	bx	lr
   4355c:	cmp	r0, #61	; 0x3d
   43560:	bne	435e0 <warn@@Base+0x1e10>
   43564:	ldr	r0, [pc, #984]	; 43944 <warn@@Base+0x2174>
   43568:	add	r0, pc, r0
   4356c:	bx	lr
   43570:	mov	r0, #0
   43574:	bx	lr
   43578:	ldr	r3, [pc, #968]	; 43948 <warn@@Base+0x2178>
   4357c:	cmp	r0, r3
   43580:	beq	435f4 <warn@@Base+0x1e24>
   43584:	add	r3, r3, #1
   43588:	cmp	r0, r3
   4358c:	bne	435c8 <warn@@Base+0x1df8>
   43590:	ldr	r0, [pc, #948]	; 4394c <warn@@Base+0x217c>
   43594:	add	r0, pc, r0
   43598:	bx	lr
   4359c:	cmp	r0, #74	; 0x4a
   435a0:	beq	43774 <warn@@Base+0x1fa4>
   435a4:	bcc	43714 <warn@@Base+0x1f44>
   435a8:	cmp	r0, #75	; 0x4b
   435ac:	beq	43708 <warn@@Base+0x1f38>
   435b0:	sub	r3, r3, #15
   435b4:	cmp	r0, r3
   435b8:	bne	435d0 <warn@@Base+0x1e00>
   435bc:	ldr	r0, [pc, #908]	; 43950 <warn@@Base+0x2180>
   435c0:	add	r0, pc, r0
   435c4:	bx	lr
   435c8:	mov	r0, #0
   435cc:	bx	lr
   435d0:	mov	r0, #0
   435d4:	bx	lr
   435d8:	mov	r0, #0
   435dc:	bx	lr
   435e0:	mov	r0, #0
   435e4:	bx	lr
   435e8:	ldr	r0, [pc, #868]	; 43954 <warn@@Base+0x2184>
   435ec:	add	r0, pc, r0
   435f0:	bx	lr
   435f4:	ldr	r0, [pc, #860]	; 43958 <warn@@Base+0x2188>
   435f8:	add	r0, pc, r0
   435fc:	bx	lr
   43600:	ldr	r0, [pc, #852]	; 4395c <warn@@Base+0x218c>
   43604:	add	r0, pc, r0
   43608:	bx	lr
   4360c:	ldr	r0, [pc, #844]	; 43960 <warn@@Base+0x2190>
   43610:	add	r0, pc, r0
   43614:	bx	lr
   43618:	ldr	r0, [pc, #836]	; 43964 <warn@@Base+0x2194>
   4361c:	add	r0, pc, r0
   43620:	bx	lr
   43624:	ldr	r0, [pc, #828]	; 43968 <warn@@Base+0x2198>
   43628:	add	r0, pc, r0
   4362c:	bx	lr
   43630:	ldr	r0, [pc, #820]	; 4396c <warn@@Base+0x219c>
   43634:	add	r0, pc, r0
   43638:	bx	lr
   4363c:	ldr	r0, [pc, #812]	; 43970 <warn@@Base+0x21a0>
   43640:	add	r0, pc, r0
   43644:	bx	lr
   43648:	ldr	r0, [pc, #804]	; 43974 <warn@@Base+0x21a4>
   4364c:	add	r0, pc, r0
   43650:	bx	lr
   43654:	ldr	r0, [pc, #796]	; 43978 <warn@@Base+0x21a8>
   43658:	add	r0, pc, r0
   4365c:	bx	lr
   43660:	ldr	r0, [pc, #788]	; 4397c <warn@@Base+0x21ac>
   43664:	add	r0, pc, r0
   43668:	bx	lr
   4366c:	ldr	r0, [pc, #780]	; 43980 <warn@@Base+0x21b0>
   43670:	add	r0, pc, r0
   43674:	bx	lr
   43678:	ldr	r0, [pc, #772]	; 43984 <warn@@Base+0x21b4>
   4367c:	add	r0, pc, r0
   43680:	bx	lr
   43684:	ldr	r0, [pc, #764]	; 43988 <warn@@Base+0x21b8>
   43688:	add	r0, pc, r0
   4368c:	bx	lr
   43690:	ldr	r0, [pc, #756]	; 4398c <warn@@Base+0x21bc>
   43694:	add	r0, pc, r0
   43698:	bx	lr
   4369c:	ldr	r0, [pc, #748]	; 43990 <warn@@Base+0x21c0>
   436a0:	add	r0, pc, r0
   436a4:	bx	lr
   436a8:	ldr	r0, [pc, #740]	; 43994 <warn@@Base+0x21c4>
   436ac:	add	r0, pc, r0
   436b0:	bx	lr
   436b4:	ldr	r0, [pc, #732]	; 43998 <warn@@Base+0x21c8>
   436b8:	add	r0, pc, r0
   436bc:	bx	lr
   436c0:	ldr	r0, [pc, #724]	; 4399c <warn@@Base+0x21cc>
   436c4:	add	r0, pc, r0
   436c8:	bx	lr
   436cc:	ldr	r0, [pc, #716]	; 439a0 <warn@@Base+0x21d0>
   436d0:	add	r0, pc, r0
   436d4:	bx	lr
   436d8:	ldr	r0, [pc, #708]	; 439a4 <warn@@Base+0x21d4>
   436dc:	add	r0, pc, r0
   436e0:	bx	lr
   436e4:	ldr	r0, [pc, #700]	; 439a8 <warn@@Base+0x21d8>
   436e8:	add	r0, pc, r0
   436ec:	bx	lr
   436f0:	ldr	r0, [pc, #692]	; 439ac <warn@@Base+0x21dc>
   436f4:	add	r0, pc, r0
   436f8:	bx	lr
   436fc:	ldr	r0, [pc, #684]	; 439b0 <warn@@Base+0x21e0>
   43700:	add	r0, pc, r0
   43704:	bx	lr
   43708:	ldr	r0, [pc, #676]	; 439b4 <warn@@Base+0x21e4>
   4370c:	add	r0, pc, r0
   43710:	bx	lr
   43714:	ldr	r0, [pc, #668]	; 439b8 <warn@@Base+0x21e8>
   43718:	add	r0, pc, r0
   4371c:	bx	lr
   43720:	ldr	r0, [pc, #660]	; 439bc <warn@@Base+0x21ec>
   43724:	add	r0, pc, r0
   43728:	bx	lr
   4372c:	ldr	r0, [pc, #652]	; 439c0 <warn@@Base+0x21f0>
   43730:	add	r0, pc, r0
   43734:	bx	lr
   43738:	ldr	r0, [pc, #644]	; 439c4 <warn@@Base+0x21f4>
   4373c:	add	r0, pc, r0
   43740:	bx	lr
   43744:	ldr	r0, [pc, #636]	; 439c8 <warn@@Base+0x21f8>
   43748:	add	r0, pc, r0
   4374c:	bx	lr
   43750:	ldr	r0, [pc, #628]	; 439cc <warn@@Base+0x21fc>
   43754:	add	r0, pc, r0
   43758:	bx	lr
   4375c:	ldr	r0, [pc, #620]	; 439d0 <warn@@Base+0x2200>
   43760:	add	r0, pc, r0
   43764:	bx	lr
   43768:	ldr	r0, [pc, #612]	; 439d4 <warn@@Base+0x2204>
   4376c:	add	r0, pc, r0
   43770:	bx	lr
   43774:	ldr	r0, [pc, #604]	; 439d8 <warn@@Base+0x2208>
   43778:	add	r0, pc, r0
   4377c:	bx	lr
   43780:	ldr	r0, [pc, #596]	; 439dc <warn@@Base+0x220c>
   43784:	add	r0, pc, r0
   43788:	bx	lr
   4378c:	ldr	r0, [pc, #588]	; 439e0 <warn@@Base+0x2210>
   43790:	add	r0, pc, r0
   43794:	bx	lr
   43798:	ldr	r0, [pc, #580]	; 439e4 <warn@@Base+0x2214>
   4379c:	add	r0, pc, r0
   437a0:	bx	lr
   437a4:	ldr	r0, [pc, #572]	; 439e8 <warn@@Base+0x2218>
   437a8:	add	r0, pc, r0
   437ac:	bx	lr
   437b0:	ldr	r0, [pc, #564]	; 439ec <warn@@Base+0x221c>
   437b4:	add	r0, pc, r0
   437b8:	bx	lr
   437bc:	ldr	r0, [pc, #556]	; 439f0 <warn@@Base+0x2220>
   437c0:	add	r0, pc, r0
   437c4:	bx	lr
   437c8:	ldr	r0, [pc, #548]	; 439f4 <warn@@Base+0x2224>
   437cc:	add	r0, pc, r0
   437d0:	bx	lr
   437d4:	ldr	r0, [pc, #540]	; 439f8 <warn@@Base+0x2228>
   437d8:	add	r0, pc, r0
   437dc:	bx	lr
   437e0:	ldr	r0, [pc, #532]	; 439fc <warn@@Base+0x222c>
   437e4:	add	r0, pc, r0
   437e8:	bx	lr
   437ec:	ldr	r0, [pc, #524]	; 43a00 <warn@@Base+0x2230>
   437f0:	add	r0, pc, r0
   437f4:	bx	lr
   437f8:	ldr	r0, [pc, #516]	; 43a04 <warn@@Base+0x2234>
   437fc:	add	r0, pc, r0
   43800:	bx	lr
   43804:	ldr	r0, [pc, #508]	; 43a08 <warn@@Base+0x2238>
   43808:	add	r0, pc, r0
   4380c:	bx	lr
   43810:	ldr	r0, [pc, #500]	; 43a0c <warn@@Base+0x223c>
   43814:	add	r0, pc, r0
   43818:	bx	lr
   4381c:	ldr	r0, [pc, #492]	; 43a10 <warn@@Base+0x2240>
   43820:	add	r0, pc, r0
   43824:	bx	lr
   43828:	ldr	r0, [pc, #484]	; 43a14 <warn@@Base+0x2244>
   4382c:	add	r0, pc, r0
   43830:	bx	lr
   43834:	ldr	r0, [pc, #476]	; 43a18 <warn@@Base+0x2248>
   43838:	add	r0, pc, r0
   4383c:	bx	lr
   43840:	ldr	r0, [pc, #468]	; 43a1c <warn@@Base+0x224c>
   43844:	add	r0, pc, r0
   43848:	bx	lr
   4384c:	ldr	r0, [pc, #460]	; 43a20 <warn@@Base+0x2250>
   43850:	add	r0, pc, r0
   43854:	bx	lr
   43858:	ldr	r0, [pc, #452]	; 43a24 <warn@@Base+0x2254>
   4385c:	add	r0, pc, r0
   43860:	bx	lr
   43864:	ldr	r0, [pc, #444]	; 43a28 <warn@@Base+0x2258>
   43868:	add	r0, pc, r0
   4386c:	bx	lr
   43870:	ldr	r0, [pc, #436]	; 43a2c <warn@@Base+0x225c>
   43874:	add	r0, pc, r0
   43878:	bx	lr
   4387c:	ldr	r0, [pc, #428]	; 43a30 <warn@@Base+0x2260>
   43880:	add	r0, pc, r0
   43884:	bx	lr
   43888:	ldr	r0, [pc, #420]	; 43a34 <warn@@Base+0x2264>
   4388c:	add	r0, pc, r0
   43890:	bx	lr
   43894:	ldr	r0, [pc, #412]	; 43a38 <warn@@Base+0x2268>
   43898:	add	r0, pc, r0
   4389c:	bx	lr
   438a0:	ldr	r0, [pc, #404]	; 43a3c <warn@@Base+0x226c>
   438a4:	add	r0, pc, r0
   438a8:	bx	lr
   438ac:	ldr	r0, [pc, #396]	; 43a40 <warn@@Base+0x2270>
   438b0:	add	r0, pc, r0
   438b4:	bx	lr
   438b8:	ldr	r0, [pc, #388]	; 43a44 <warn@@Base+0x2274>
   438bc:	add	r0, pc, r0
   438c0:	bx	lr
   438c4:	ldr	r0, [pc, #380]	; 43a48 <warn@@Base+0x2278>
   438c8:	add	r0, pc, r0
   438cc:	bx	lr
   438d0:	andeq	r4, r0, r4, lsl #2
   438d4:	andeq	r4, r0, sl, lsl #2
   438d8:	andeq	pc, r0, r0, ror #30
   438dc:	andeq	pc, r0, r4, ror #17
   438e0:	strdeq	pc, [r0], -ip
   438e4:	andeq	pc, r0, r8, asr #16
   438e8:	andeq	pc, r0, r0, lsr r9	; <UNPREDICTABLE>
   438ec:	andeq	pc, r0, r4, ror #19
   438f0:	strdeq	pc, [r0], -ip
   438f4:	andeq	pc, r0, ip, asr #18
   438f8:	andeq	r4, r0, r8, lsl #2
   438fc:	andeq	pc, r0, ip, lsr #28
   43900:	andeq	pc, r0, r0, lsr #17
   43904:	andeq	r4, r0, r1, lsl #2
   43908:	ldrdeq	pc, [r0], -r4
   4390c:			; <UNDEFINED> instruction: 0x0000f9b4
   43910:	andeq	pc, r0, ip, ror r7	; <UNPREDICTABLE>
   43914:	andeq	pc, r0, ip, lsr #19
   43918:	andeq	pc, r0, r8, lsl #18
   4391c:	andeq	r8, r0, r7, ror #14
   43920:	andeq	pc, r0, r0, lsr #26
   43924:	andeq	sl, r0, r0, lsr #32
   43928:	andeq	pc, r0, r8, lsr sp	; <UNPREDICTABLE>
   4392c:	andeq	pc, r0, r0, ror r9	; <UNPREDICTABLE>
   43930:	andeq	pc, r0, r0, lsl #19
   43934:	andeq	pc, r0, ip, asr #17
   43938:	ldrdeq	pc, [r0], -ip
   4393c:	andeq	pc, r0, r8, ror #19
   43940:	andeq	pc, r0, r4, lsr r9	; <UNPREDICTABLE>
   43944:	ldrdeq	pc, [r0], -r0
   43948:	andeq	r4, r0, r2, lsl #2
   4394c:	andeq	pc, r0, r8, ror sl	; <UNPREDICTABLE>
   43950:			; <UNDEFINED> instruction: 0x0000f9b8
   43954:	andeq	pc, r0, ip, asr #20
   43958:	strdeq	pc, [r0], -r8
   4395c:	andeq	pc, r0, r0, ror #16
   43960:	andeq	pc, r0, r0, ror #17
   43964:	muleq	r0, r0, r8
   43968:	andeq	pc, r0, ip, asr #15
   4396c:	andeq	pc, r0, ip, ror r7	; <UNPREDICTABLE>
   43970:	strdeq	pc, [r0], -r8
   43974:	andeq	pc, r0, r4, lsr #21
   43978:	andeq	pc, r0, r4, lsr #13
   4397c:	andeq	pc, r0, r8, asr r6	; <UNPREDICTABLE>
   43980:	andeq	pc, r0, r8, lsr r9	; <UNPREDICTABLE>
   43984:			; <UNDEFINED> instruction: 0x0000f4bc
   43988:	andeq	pc, r0, ip, lsl #20
   4398c:	muleq	r0, r4, r5
   43990:	andeq	pc, r0, r0, asr #10
   43994:	andeq	pc, r0, r8, asr #8
   43998:	muleq	r0, r0, r3
   4399c:	andeq	pc, r0, r0, asr #6
   439a0:	andeq	pc, r0, r0, lsr #13
   439a4:	ldrdeq	pc, [r0], -r4
   439a8:			; <UNDEFINED> instruction: 0x0000f4bc
   439ac:	ldrdeq	pc, [r0], -r0
   439b0:	andeq	pc, r0, r8, lsl #11
   439b4:	andeq	pc, r0, r4, asr r8	; <UNPREDICTABLE>
   439b8:	andeq	pc, r0, r4, lsl r8	; <UNPREDICTABLE>
   439bc:	andeq	pc, r0, r0, asr r4	; <UNPREDICTABLE>
   439c0:	andeq	pc, r0, r4, lsr r5	; <UNPREDICTABLE>
   439c4:	andeq	pc, r0, r8, ror r2	; <UNPREDICTABLE>
   439c8:	andeq	pc, r0, ip, lsr r3	; <UNPREDICTABLE>
   439cc:	strdeq	pc, [r0], -r4
   439d0:	andeq	pc, r0, ip, lsl #20
   439d4:	andeq	pc, r0, r0, lsr r3	; <UNPREDICTABLE>
   439d8:	ldrdeq	pc, [r0], -r0
   439dc:	strdeq	pc, [r0], -r0
   439e0:	andeq	pc, r0, r0, asr #13
   439e4:	andeq	pc, r0, r0, asr #11
   439e8:	andeq	pc, r0, r0, ror #7
   439ec:	andeq	pc, r0, r4, lsr r5	; <UNPREDICTABLE>
   439f0:	andeq	pc, r0, r8, lsl r7	; <UNPREDICTABLE>
   439f4:	andeq	pc, r0, r4, lsr #17
   439f8:	andeq	pc, r0, r0, asr #6
   439fc:	andeq	pc, r0, ip, lsr r9	; <UNPREDICTABLE>
   43a00:	andeq	pc, r0, ip, lsl r4	; <UNPREDICTABLE>
   43a04:	andeq	pc, r0, r4, ror #11
   43a08:	andeq	pc, r0, r0, lsr r2	; <UNPREDICTABLE>
   43a0c:	andeq	pc, r0, r8, asr #15
   43a10:	andeq	pc, r0, ip, ror #14
   43a14:	andeq	pc, r0, r0, lsl #9
   43a18:	andeq	pc, r0, r0, ror #10
   43a1c:	muleq	r0, r8, r2
   43a20:	muleq	r0, ip, r1
   43a24:	andeq	pc, r0, r4, ror r3	; <UNPREDICTABLE>
   43a28:	andeq	pc, r0, r4, lsr #12
   43a2c:	andeq	pc, r0, ip, asr r8	; <UNPREDICTABLE>
   43a30:	strdeq	pc, [r0], -r0
   43a34:	andeq	pc, r0, r4, asr #7
   43a38:	andeq	pc, r0, ip, lsl #11
   43a3c:	andeq	pc, r0, r0, lsl #15
   43a40:	andeq	pc, r0, ip, lsr #5
   43a44:	andeq	pc, r0, ip, asr r6	; <UNPREDICTABLE>
   43a48:	andeq	pc, r0, ip, ror #8
   43a4c:	cmp	r0, #25
   43a50:	beq	43e40 <warn@@Base+0x2670>
   43a54:	bls	43a98 <warn@@Base+0x22c8>
   43a58:	cmp	r0, #37	; 0x25
   43a5c:	beq	43e34 <warn@@Base+0x2664>
   43a60:	bhi	43b08 <warn@@Base+0x2338>
   43a64:	cmp	r0, #31
   43a68:	beq	43e04 <warn@@Base+0x2634>
   43a6c:	bls	43ae0 <warn@@Base+0x2310>
   43a70:	cmp	r0, #34	; 0x22
   43a74:	beq	43dc8 <warn@@Base+0x25f8>
   43a78:	bhi	43bac <warn@@Base+0x23dc>
   43a7c:	cmp	r0, #32
   43a80:	beq	43cd8 <warn@@Base+0x2508>
   43a84:	cmp	r0, #33	; 0x21
   43a88:	bne	43ad8 <warn@@Base+0x2308>
   43a8c:	ldr	r0, [pc, #952]	; 43e4c <warn@@Base+0x267c>
   43a90:	add	r0, pc, r0
   43a94:	bx	lr
   43a98:	cmp	r0, #13
   43a9c:	beq	43e28 <warn@@Base+0x2658>
   43aa0:	bhi	43bf0 <warn@@Base+0x2420>
   43aa4:	cmp	r0, #7
   43aa8:	beq	43e1c <warn@@Base+0x264c>
   43aac:	bls	43bc8 <warn@@Base+0x23f8>
   43ab0:	cmp	r0, #10
   43ab4:	beq	43d98 <warn@@Base+0x25c8>
   43ab8:	bhi	43c84 <warn@@Base+0x24b4>
   43abc:	cmp	r0, #8
   43ac0:	beq	43d8c <warn@@Base+0x25bc>
   43ac4:	cmp	r0, #9
   43ac8:	bne	43ad8 <warn@@Base+0x2308>
   43acc:	ldr	r0, [pc, #892]	; 43e50 <warn@@Base+0x2680>
   43ad0:	add	r0, pc, r0
   43ad4:	bx	lr
   43ad8:	mov	r0, #0
   43adc:	bx	lr
   43ae0:	cmp	r0, #28
   43ae4:	beq	43de0 <warn@@Base+0x2610>
   43ae8:	bhi	43b44 <warn@@Base+0x2374>
   43aec:	cmp	r0, #26
   43af0:	beq	43d80 <warn@@Base+0x25b0>
   43af4:	cmp	r0, #27
   43af8:	bne	43ad8 <warn@@Base+0x2308>
   43afc:	ldr	r0, [pc, #848]	; 43e54 <warn@@Base+0x2684>
   43b00:	add	r0, pc, r0
   43b04:	bx	lr
   43b08:	cmp	r0, #43	; 0x2b
   43b0c:	beq	43e10 <warn@@Base+0x2640>
   43b10:	bls	43b84 <warn@@Base+0x23b4>
   43b14:	ldr	r3, [pc, #828]	; 43e58 <warn@@Base+0x2688>
   43b18:	cmp	r0, r3
   43b1c:	beq	43dd4 <warn@@Base+0x2604>
   43b20:	bhi	43b60 <warn@@Base+0x2390>
   43b24:	cmp	r0, #44	; 0x2c
   43b28:	beq	43d74 <warn@@Base+0x25a4>
   43b2c:	sub	r3, r3, #1
   43b30:	cmp	r0, r3
   43b34:	bne	43ad8 <warn@@Base+0x2308>
   43b38:	ldr	r0, [pc, #796]	; 43e5c <warn@@Base+0x268c>
   43b3c:	add	r0, pc, r0
   43b40:	bx	lr
   43b44:	cmp	r0, #29
   43b48:	beq	43d68 <warn@@Base+0x2598>
   43b4c:	cmp	r0, #30
   43b50:	bne	43ad8 <warn@@Base+0x2308>
   43b54:	ldr	r0, [pc, #772]	; 43e60 <warn@@Base+0x2690>
   43b58:	add	r0, pc, r0
   43b5c:	bx	lr
   43b60:	ldr	r3, [pc, #764]	; 43e64 <warn@@Base+0x2694>
   43b64:	cmp	r0, r3
   43b68:	beq	43d5c <warn@@Base+0x258c>
   43b6c:	add	r3, r3, #1
   43b70:	cmp	r0, r3
   43b74:	bne	43ad8 <warn@@Base+0x2308>
   43b78:	ldr	r0, [pc, #744]	; 43e68 <warn@@Base+0x2698>
   43b7c:	add	r0, pc, r0
   43b80:	bx	lr
   43b84:	cmp	r0, #40	; 0x28
   43b88:	beq	43dec <warn@@Base+0x261c>
   43b8c:	bhi	43ca0 <warn@@Base+0x24d0>
   43b90:	cmp	r0, #38	; 0x26
   43b94:	beq	43d50 <warn@@Base+0x2580>
   43b98:	cmp	r0, #39	; 0x27
   43b9c:	bne	43ad8 <warn@@Base+0x2308>
   43ba0:	ldr	r0, [pc, #708]	; 43e6c <warn@@Base+0x269c>
   43ba4:	add	r0, pc, r0
   43ba8:	bx	lr
   43bac:	cmp	r0, #35	; 0x23
   43bb0:	beq	43d44 <warn@@Base+0x2574>
   43bb4:	cmp	r0, #36	; 0x24
   43bb8:	bne	43ad8 <warn@@Base+0x2308>
   43bbc:	ldr	r0, [pc, #684]	; 43e70 <warn@@Base+0x26a0>
   43bc0:	add	r0, pc, r0
   43bc4:	bx	lr
   43bc8:	cmp	r0, #4
   43bcc:	beq	43da4 <warn@@Base+0x25d4>
   43bd0:	bhi	43c24 <warn@@Base+0x2454>
   43bd4:	cmp	r0, #1
   43bd8:	beq	43d38 <warn@@Base+0x2568>
   43bdc:	cmp	r0, #3
   43be0:	bne	43ad8 <warn@@Base+0x2308>
   43be4:	ldr	r0, [pc, #648]	; 43e74 <warn@@Base+0x26a4>
   43be8:	add	r0, pc, r0
   43bec:	bx	lr
   43bf0:	cmp	r0, #19
   43bf4:	beq	43df8 <warn@@Base+0x2628>
   43bf8:	bls	43c5c <warn@@Base+0x248c>
   43bfc:	cmp	r0, #22
   43c00:	beq	43dbc <warn@@Base+0x25ec>
   43c04:	bhi	43c40 <warn@@Base+0x2470>
   43c08:	cmp	r0, #20
   43c0c:	beq	43d2c <warn@@Base+0x255c>
   43c10:	cmp	r0, #21
   43c14:	bne	43ad8 <warn@@Base+0x2308>
   43c18:	ldr	r0, [pc, #600]	; 43e78 <warn@@Base+0x26a8>
   43c1c:	add	r0, pc, r0
   43c20:	bx	lr
   43c24:	cmp	r0, #5
   43c28:	beq	43d20 <warn@@Base+0x2550>
   43c2c:	cmp	r0, #6
   43c30:	bne	43ad8 <warn@@Base+0x2308>
   43c34:	ldr	r0, [pc, #576]	; 43e7c <warn@@Base+0x26ac>
   43c38:	add	r0, pc, r0
   43c3c:	bx	lr
   43c40:	cmp	r0, #23
   43c44:	beq	43d14 <warn@@Base+0x2544>
   43c48:	cmp	r0, #24
   43c4c:	bne	43ad8 <warn@@Base+0x2308>
   43c50:	ldr	r0, [pc, #552]	; 43e80 <warn@@Base+0x26b0>
   43c54:	add	r0, pc, r0
   43c58:	bx	lr
   43c5c:	cmp	r0, #16
   43c60:	beq	43db0 <warn@@Base+0x25e0>
   43c64:	bhi	43cbc <warn@@Base+0x24ec>
   43c68:	cmp	r0, #14
   43c6c:	beq	43d08 <warn@@Base+0x2538>
   43c70:	cmp	r0, #15
   43c74:	bne	43ad8 <warn@@Base+0x2308>
   43c78:	ldr	r0, [pc, #516]	; 43e84 <warn@@Base+0x26b4>
   43c7c:	add	r0, pc, r0
   43c80:	bx	lr
   43c84:	cmp	r0, #11
   43c88:	beq	43cfc <warn@@Base+0x252c>
   43c8c:	cmp	r0, #12
   43c90:	bne	43ad8 <warn@@Base+0x2308>
   43c94:	ldr	r0, [pc, #492]	; 43e88 <warn@@Base+0x26b8>
   43c98:	add	r0, pc, r0
   43c9c:	bx	lr
   43ca0:	cmp	r0, #41	; 0x29
   43ca4:	beq	43cf0 <warn@@Base+0x2520>
   43ca8:	cmp	r0, #42	; 0x2a
   43cac:	bne	43ad8 <warn@@Base+0x2308>
   43cb0:	ldr	r0, [pc, #468]	; 43e8c <warn@@Base+0x26bc>
   43cb4:	add	r0, pc, r0
   43cb8:	bx	lr
   43cbc:	cmp	r0, #17
   43cc0:	beq	43ce4 <warn@@Base+0x2514>
   43cc4:	cmp	r0, #18
   43cc8:	bne	43ad8 <warn@@Base+0x2308>
   43ccc:	ldr	r0, [pc, #444]	; 43e90 <warn@@Base+0x26c0>
   43cd0:	add	r0, pc, r0
   43cd4:	bx	lr
   43cd8:	ldr	r0, [pc, #436]	; 43e94 <warn@@Base+0x26c4>
   43cdc:	add	r0, pc, r0
   43ce0:	bx	lr
   43ce4:	ldr	r0, [pc, #428]	; 43e98 <warn@@Base+0x26c8>
   43ce8:	add	r0, pc, r0
   43cec:	bx	lr
   43cf0:	ldr	r0, [pc, #420]	; 43e9c <warn@@Base+0x26cc>
   43cf4:	add	r0, pc, r0
   43cf8:	bx	lr
   43cfc:	ldr	r0, [pc, #412]	; 43ea0 <warn@@Base+0x26d0>
   43d00:	add	r0, pc, r0
   43d04:	bx	lr
   43d08:	ldr	r0, [pc, #404]	; 43ea4 <warn@@Base+0x26d4>
   43d0c:	add	r0, pc, r0
   43d10:	bx	lr
   43d14:	ldr	r0, [pc, #396]	; 43ea8 <warn@@Base+0x26d8>
   43d18:	add	r0, pc, r0
   43d1c:	bx	lr
   43d20:	ldr	r0, [pc, #388]	; 43eac <warn@@Base+0x26dc>
   43d24:	add	r0, pc, r0
   43d28:	bx	lr
   43d2c:	ldr	r0, [pc, #380]	; 43eb0 <warn@@Base+0x26e0>
   43d30:	add	r0, pc, r0
   43d34:	bx	lr
   43d38:	ldr	r0, [pc, #372]	; 43eb4 <warn@@Base+0x26e4>
   43d3c:	add	r0, pc, r0
   43d40:	bx	lr
   43d44:	ldr	r0, [pc, #364]	; 43eb8 <warn@@Base+0x26e8>
   43d48:	add	r0, pc, r0
   43d4c:	bx	lr
   43d50:	ldr	r0, [pc, #356]	; 43ebc <warn@@Base+0x26ec>
   43d54:	add	r0, pc, r0
   43d58:	bx	lr
   43d5c:	ldr	r0, [pc, #348]	; 43ec0 <warn@@Base+0x26f0>
   43d60:	add	r0, pc, r0
   43d64:	bx	lr
   43d68:	ldr	r0, [pc, #340]	; 43ec4 <warn@@Base+0x26f4>
   43d6c:	add	r0, pc, r0
   43d70:	bx	lr
   43d74:	ldr	r0, [pc, #332]	; 43ec8 <warn@@Base+0x26f8>
   43d78:	add	r0, pc, r0
   43d7c:	bx	lr
   43d80:	ldr	r0, [pc, #324]	; 43ecc <warn@@Base+0x26fc>
   43d84:	add	r0, pc, r0
   43d88:	bx	lr
   43d8c:	ldr	r0, [pc, #316]	; 43ed0 <warn@@Base+0x2700>
   43d90:	add	r0, pc, r0
   43d94:	bx	lr
   43d98:	ldr	r0, [pc, #308]	; 43ed4 <warn@@Base+0x2704>
   43d9c:	add	r0, pc, r0
   43da0:	bx	lr
   43da4:	ldr	r0, [pc, #300]	; 43ed8 <warn@@Base+0x2708>
   43da8:	add	r0, pc, r0
   43dac:	bx	lr
   43db0:	ldr	r0, [pc, #292]	; 43edc <warn@@Base+0x270c>
   43db4:	add	r0, pc, r0
   43db8:	bx	lr
   43dbc:	ldr	r0, [pc, #284]	; 43ee0 <warn@@Base+0x2710>
   43dc0:	add	r0, pc, r0
   43dc4:	bx	lr
   43dc8:	ldr	r0, [pc, #276]	; 43ee4 <warn@@Base+0x2714>
   43dcc:	add	r0, pc, r0
   43dd0:	bx	lr
   43dd4:	ldr	r0, [pc, #268]	; 43ee8 <warn@@Base+0x2718>
   43dd8:	add	r0, pc, r0
   43ddc:	bx	lr
   43de0:	ldr	r0, [pc, #260]	; 43eec <warn@@Base+0x271c>
   43de4:	add	r0, pc, r0
   43de8:	bx	lr
   43dec:	ldr	r0, [pc, #252]	; 43ef0 <warn@@Base+0x2720>
   43df0:	add	r0, pc, r0
   43df4:	bx	lr
   43df8:	ldr	r0, [pc, #244]	; 43ef4 <warn@@Base+0x2724>
   43dfc:	add	r0, pc, r0
   43e00:	bx	lr
   43e04:	ldr	r0, [pc, #236]	; 43ef8 <warn@@Base+0x2728>
   43e08:	add	r0, pc, r0
   43e0c:	bx	lr
   43e10:	ldr	r0, [pc, #228]	; 43efc <warn@@Base+0x272c>
   43e14:	add	r0, pc, r0
   43e18:	bx	lr
   43e1c:	ldr	r0, [pc, #220]	; 43f00 <warn@@Base+0x2730>
   43e20:	add	r0, pc, r0
   43e24:	bx	lr
   43e28:	ldr	r0, [pc, #212]	; 43f04 <warn@@Base+0x2734>
   43e2c:	add	r0, pc, r0
   43e30:	bx	lr
   43e34:	ldr	r0, [pc, #204]	; 43f08 <warn@@Base+0x2738>
   43e38:	add	r0, pc, r0
   43e3c:	bx	lr
   43e40:	ldr	r0, [pc, #196]	; 43f0c <warn@@Base+0x273c>
   43e44:	add	r0, pc, r0
   43e48:	bx	lr
   43e4c:	strdeq	pc, [r0], -r8
   43e50:	andeq	pc, r0, r0, lsl r7	; <UNPREDICTABLE>
   43e54:	andeq	pc, r0, ip, lsr #16
   43e58:	andeq	r1, r0, r2, lsl #30
   43e5c:	andeq	pc, r0, r0, lsr #18
   43e60:	andeq	pc, r0, ip, lsl #16
   43e64:	andeq	r1, r0, r0, lsr #30
   43e68:	andeq	pc, r0, r4, lsr #18
   43e6c:	andeq	pc, r0, r8, asr r8	; <UNPREDICTABLE>
   43e70:	andeq	pc, r0, r8, lsl #16
   43e74:	ldrdeq	pc, [r0], -r0
   43e78:	andeq	pc, r0, r8, lsl #13
   43e7c:	andeq	pc, r0, r8, ror r5	; <UNPREDICTABLE>
   43e80:	andeq	pc, r0, ip, lsl #13
   43e84:	andeq	pc, r0, r4, asr #11
   43e88:	andeq	pc, r0, r8, ror r5	; <UNPREDICTABLE>
   43e8c:	andeq	pc, r0, r8, ror r7	; <UNPREDICTABLE>
   43e90:	andeq	pc, r0, r4, lsr #11
   43e94:	andeq	pc, r0, ip, lsr #12
   43e98:	andeq	pc, r0, ip, ror r5	; <UNPREDICTABLE>
   43e9c:	andeq	pc, r0, r8, lsr #14
   43ea0:	andeq	pc, r0, r0, lsl #10
   43ea4:	andeq	pc, r0, r4, lsr #10
   43ea8:			; <UNDEFINED> instruction: 0x0000f5b4
   43eac:	andeq	pc, r0, ip, ror r4	; <UNPREDICTABLE>
   43eb0:	andeq	pc, r0, r4, ror #10
   43eb4:	andeq	pc, r0, r4, asr #8
   43eb8:	andeq	pc, r0, ip, ror #12
   43ebc:	muleq	r0, r8, r6
   43ec0:	andeq	pc, r0, ip, lsr #14
   43ec4:	andeq	pc, r0, r4, ror #11
   43ec8:	ldrdeq	pc, [r0], -r4
   43ecc:	muleq	r0, r8, r5
   43ed0:	andeq	pc, r0, r0, asr #8
   43ed4:	andeq	pc, r0, r4, asr r4	; <UNPREDICTABLE>
   43ed8:	andeq	pc, r0, r8, ror #7
   43edc:	muleq	r0, ip, r4
   43ee0:	strdeq	pc, [r0], -r8
   43ee4:	ldrdeq	pc, [r0], -r4
   43ee8:	muleq	r0, ip, r6
   43eec:	andeq	pc, r0, r8, asr r5	; <UNPREDICTABLE>
   43ef0:	andeq	pc, r0, ip, lsl r6	; <UNPREDICTABLE>
   43ef4:	andeq	pc, r0, r8, lsl #9
   43ef8:	andeq	pc, r0, ip, ror #10
   43efc:	andeq	pc, r0, r8, lsr #12
   43f00:	andeq	pc, r0, r0, lsr #7
   43f04:	strdeq	pc, [r0], -r4
   43f08:	andeq	pc, r0, r4, lsr #11
   43f0c:	andeq	pc, r0, ip, lsr #9
   43f10:	cmp	r0, #122	; 0x7a
   43f14:	beq	45600 <warn@@Base+0x3e30>
   43f18:	bls	43f88 <warn@@Base+0x27b8>
   43f1c:	ldr	r3, [pc, #3164]	; 44b80 <warn@@Base+0x33b0>
   43f20:	cmp	r0, r3
   43f24:	beq	455f4 <warn@@Base+0x3e24>
   43f28:	bls	44560 <warn@@Base+0x2d90>
   43f2c:	ldr	r3, [pc, #3152]	; 44b84 <warn@@Base+0x33b4>
   43f30:	cmp	r0, r3
   43f34:	beq	455dc <warn@@Base+0x3e0c>
   43f38:	bls	44514 <warn@@Base+0x2d44>
   43f3c:	ldr	r3, [pc, #3140]	; 44b88 <warn@@Base+0x33b8>
   43f40:	cmp	r0, r3
   43f44:	beq	455ac <warn@@Base+0x3ddc>
   43f48:	bls	44994 <warn@@Base+0x31c4>
   43f4c:	ldr	r3, [pc, #3128]	; 44b8c <warn@@Base+0x33bc>
   43f50:	cmp	r0, r3
   43f54:	beq	4551c <warn@@Base+0x3d4c>
   43f58:	bhi	440b8 <warn@@Base+0x28e8>
   43f5c:	sub	r3, r3, #4
   43f60:	cmp	r0, r3
   43f64:	beq	453a8 <warn@@Base+0x3bd8>
   43f68:	bls	43fdc <warn@@Base+0x280c>
   43f6c:	ldr	r3, [pc, #3100]	; 44b90 <warn@@Base+0x33c0>
   43f70:	cmp	r0, r3
   43f74:	beq	452d0 <warn@@Base+0x3b00>
   43f78:	bhi	44b5c <warn@@Base+0x338c>
   43f7c:	ldr	r0, [pc, #3088]	; 44b94 <warn@@Base+0x33c4>
   43f80:	add	r0, pc, r0
   43f84:	bx	lr
   43f88:	cmp	r0, #68	; 0x44
   43f8c:	beq	455e8 <warn@@Base+0x3e18>
   43f90:	bls	4412c <warn@@Base+0x295c>
   43f94:	cmp	r0, #94	; 0x5e
   43f98:	beq	455d0 <warn@@Base+0x3e00>
   43f9c:	bls	440f0 <warn@@Base+0x2920>
   43fa0:	cmp	r0, #107	; 0x6b
   43fa4:	beq	455a0 <warn@@Base+0x3dd0>
   43fa8:	bls	44050 <warn@@Base+0x2880>
   43fac:	cmp	r0, #114	; 0x72
   43fb0:	beq	45540 <warn@@Base+0x3d70>
   43fb4:	bhi	4402c <warn@@Base+0x285c>
   43fb8:	cmp	r0, #110	; 0x6e
   43fbc:	beq	453f0 <warn@@Base+0x3c20>
   43fc0:	bls	44000 <warn@@Base+0x2830>
   43fc4:	cmp	r0, #112	; 0x70
   43fc8:	beq	45258 <warn@@Base+0x3a88>
   43fcc:	bhi	45210 <warn@@Base+0x3a40>
   43fd0:	ldr	r0, [pc, #3008]	; 44b98 <warn@@Base+0x33c8>
   43fd4:	add	r0, pc, r0
   43fd8:	bx	lr
   43fdc:	sub	r3, r3, #2
   43fe0:	cmp	r0, r3
   43fe4:	beq	45204 <warn@@Base+0x3a34>
   43fe8:	add	r3, r3, #1
   43fec:	cmp	r0, r3
   43ff0:	bne	4401c <warn@@Base+0x284c>
   43ff4:	ldr	r0, [pc, #2976]	; 44b9c <warn@@Base+0x33cc>
   43ff8:	add	r0, pc, r0
   43ffc:	bx	lr
   44000:	cmp	r0, #108	; 0x6c
   44004:	beq	451f8 <warn@@Base+0x3a28>
   44008:	cmp	r0, #109	; 0x6d
   4400c:	bne	44024 <warn@@Base+0x2854>
   44010:	ldr	r0, [pc, #2952]	; 44ba0 <warn@@Base+0x33d0>
   44014:	add	r0, pc, r0
   44018:	bx	lr
   4401c:	mov	r0, #0
   44020:	bx	lr
   44024:	mov	r0, #0
   44028:	bx	lr
   4402c:	cmp	r0, #118	; 0x76
   44030:	beq	453fc <warn@@Base+0x3c2c>
   44034:	bls	44080 <warn@@Base+0x28b0>
   44038:	cmp	r0, #120	; 0x78
   4403c:	beq	4524c <warn@@Base+0x3a7c>
   44040:	bhi	451ec <warn@@Base+0x3a1c>
   44044:	ldr	r0, [pc, #2904]	; 44ba4 <warn@@Base+0x33d4>
   44048:	add	r0, pc, r0
   4404c:	bx	lr
   44050:	cmp	r0, #100	; 0x64
   44054:	beq	454ec <warn@@Base+0x3d1c>
   44058:	bls	4496c <warn@@Base+0x319c>
   4405c:	cmp	r0, #103	; 0x67
   44060:	beq	45444 <warn@@Base+0x3c74>
   44064:	bls	4409c <warn@@Base+0x28cc>
   44068:	cmp	r0, #105	; 0x69
   4406c:	beq	4521c <warn@@Base+0x3a4c>
   44070:	bhi	451e0 <warn@@Base+0x3a10>
   44074:	ldr	r0, [pc, #2860]	; 44ba8 <warn@@Base+0x33d8>
   44078:	add	r0, pc, r0
   4407c:	bx	lr
   44080:	cmp	r0, #115	; 0x73
   44084:	beq	451d4 <warn@@Base+0x3a04>
   44088:	cmp	r0, #116	; 0x74
   4408c:	bne	44b18 <warn@@Base+0x3348>
   44090:	ldr	r0, [pc, #2836]	; 44bac <warn@@Base+0x33dc>
   44094:	add	r0, pc, r0
   44098:	bx	lr
   4409c:	cmp	r0, #101	; 0x65
   440a0:	beq	451c8 <warn@@Base+0x39f8>
   440a4:	cmp	r0, #102	; 0x66
   440a8:	bne	449d8 <warn@@Base+0x3208>
   440ac:	ldr	r0, [pc, #2812]	; 44bb0 <warn@@Base+0x33e0>
   440b0:	add	r0, pc, r0
   440b4:	bx	lr
   440b8:	ldr	r3, [pc, #2804]	; 44bb4 <warn@@Base+0x33e4>
   440bc:	cmp	r0, r3
   440c0:	beq	45468 <warn@@Base+0x3c98>
   440c4:	bls	44b28 <warn@@Base+0x3358>
   440c8:	ldr	r3, [pc, #2792]	; 44bb8 <warn@@Base+0x33e8>
   440cc:	cmp	r0, r3
   440d0:	beq	4527c <warn@@Base+0x3aac>
   440d4:	bcc	451bc <warn@@Base+0x39ec>
   440d8:	add	r3, r3, #1
   440dc:	cmp	r0, r3
   440e0:	bne	44a74 <warn@@Base+0x32a4>
   440e4:	ldr	r0, [pc, #2768]	; 44bbc <warn@@Base+0x33ec>
   440e8:	add	r0, pc, r0
   440ec:	bx	lr
   440f0:	cmp	r0, #81	; 0x51
   440f4:	beq	45564 <warn@@Base+0x3d94>
   440f8:	bls	44254 <warn@@Base+0x2a84>
   440fc:	cmp	r0, #87	; 0x57
   44100:	beq	45510 <warn@@Base+0x3d40>
   44104:	bls	4422c <warn@@Base+0x2a5c>
   44108:	cmp	r0, #90	; 0x5a
   4410c:	beq	45414 <warn@@Base+0x3c44>
   44110:	bls	44174 <warn@@Base+0x29a4>
   44114:	cmp	r0, #92	; 0x5c
   44118:	beq	452a0 <warn@@Base+0x3ad0>
   4411c:	bhi	451b0 <warn@@Base+0x39e0>
   44120:	ldr	r0, [pc, #2712]	; 44bc0 <warn@@Base+0x33f0>
   44124:	add	r0, pc, r0
   44128:	bx	lr
   4412c:	cmp	r0, #33	; 0x21
   44130:	beq	455c4 <warn@@Base+0x3df4>
   44134:	bls	44320 <warn@@Base+0x2b50>
   44138:	cmp	r0, #54	; 0x36
   4413c:	beq	45588 <warn@@Base+0x3db8>
   44140:	bls	441fc <warn@@Base+0x2a2c>
   44144:	cmp	r0, #61	; 0x3d
   44148:	beq	45528 <warn@@Base+0x3d58>
   4414c:	bhi	441ac <warn@@Base+0x29dc>
   44150:	cmp	r0, #57	; 0x39
   44154:	beq	453c0 <warn@@Base+0x3bf0>
   44158:	bls	44190 <warn@@Base+0x29c0>
   4415c:	cmp	r0, #59	; 0x3b
   44160:	beq	45294 <warn@@Base+0x3ac4>
   44164:	bhi	451a4 <warn@@Base+0x39d4>
   44168:	ldr	r0, [pc, #2644]	; 44bc4 <warn@@Base+0x33f4>
   4416c:	add	r0, pc, r0
   44170:	bx	lr
   44174:	cmp	r0, #88	; 0x58
   44178:	beq	45198 <warn@@Base+0x39c8>
   4417c:	cmp	r0, #89	; 0x59
   44180:	bne	441d0 <warn@@Base+0x2a00>
   44184:	ldr	r0, [pc, #2620]	; 44bc8 <warn@@Base+0x33f8>
   44188:	add	r0, pc, r0
   4418c:	bx	lr
   44190:	cmp	r0, #55	; 0x37
   44194:	beq	4518c <warn@@Base+0x39bc>
   44198:	cmp	r0, #56	; 0x38
   4419c:	bne	441d8 <warn@@Base+0x2a08>
   441a0:	ldr	r0, [pc, #2596]	; 44bcc <warn@@Base+0x33fc>
   441a4:	add	r0, pc, r0
   441a8:	bx	lr
   441ac:	cmp	r0, #64	; 0x40
   441b0:	beq	4539c <warn@@Base+0x3bcc>
   441b4:	bls	441e0 <warn@@Base+0x2a10>
   441b8:	cmp	r0, #66	; 0x42
   441bc:	beq	452ac <warn@@Base+0x3adc>
   441c0:	bhi	45180 <warn@@Base+0x39b0>
   441c4:	ldr	r0, [pc, #2564]	; 44bd0 <warn@@Base+0x3400>
   441c8:	add	r0, pc, r0
   441cc:	bx	lr
   441d0:	mov	r0, #0
   441d4:	bx	lr
   441d8:	mov	r0, #0
   441dc:	bx	lr
   441e0:	cmp	r0, #62	; 0x3e
   441e4:	beq	45174 <warn@@Base+0x39a4>
   441e8:	cmp	r0, #63	; 0x3f
   441ec:	bne	443d4 <warn@@Base+0x2c04>
   441f0:	ldr	r0, [pc, #2524]	; 44bd4 <warn@@Base+0x3404>
   441f4:	add	r0, pc, r0
   441f8:	bx	lr
   441fc:	cmp	r0, #46	; 0x2e
   44200:	beq	454b0 <warn@@Base+0x3ce0>
   44204:	bls	44380 <warn@@Base+0x2bb0>
   44208:	cmp	r0, #50	; 0x32
   4420c:	beq	45474 <warn@@Base+0x3ca4>
   44210:	bls	44364 <warn@@Base+0x2b94>
   44214:	cmp	r0, #52	; 0x34
   44218:	beq	45288 <warn@@Base+0x3ab8>
   4421c:	bhi	45168 <warn@@Base+0x3998>
   44220:	ldr	r0, [pc, #2480]	; 44bd8 <warn@@Base+0x3408>
   44224:	add	r0, pc, r0
   44228:	bx	lr
   4422c:	cmp	r0, #84	; 0x54
   44230:	beq	45348 <warn@@Base+0x3b78>
   44234:	bhi	4428c <warn@@Base+0x2abc>
   44238:	cmp	r0, #82	; 0x52
   4423c:	beq	4515c <warn@@Base+0x398c>
   44240:	cmp	r0, #83	; 0x53
   44244:	bne	44284 <warn@@Base+0x2ab4>
   44248:	ldr	r0, [pc, #2444]	; 44bdc <warn@@Base+0x340c>
   4424c:	add	r0, pc, r0
   44250:	bx	lr
   44254:	cmp	r0, #74	; 0x4a
   44258:	beq	45504 <warn@@Base+0x3d34>
   4425c:	bls	442c4 <warn@@Base+0x2af4>
   44260:	cmp	r0, #77	; 0x4d
   44264:	beq	45408 <warn@@Base+0x3c38>
   44268:	bls	442a8 <warn@@Base+0x2ad8>
   4426c:	cmp	r0, #79	; 0x4f
   44270:	beq	45270 <warn@@Base+0x3aa0>
   44274:	bhi	45150 <warn@@Base+0x3980>
   44278:	ldr	r0, [pc, #2400]	; 44be0 <warn@@Base+0x3410>
   4427c:	add	r0, pc, r0
   44280:	bx	lr
   44284:	mov	r0, #0
   44288:	bx	lr
   4428c:	cmp	r0, #85	; 0x55
   44290:	beq	45144 <warn@@Base+0x3974>
   44294:	cmp	r0, #86	; 0x56
   44298:	bne	442ec <warn@@Base+0x2b1c>
   4429c:	ldr	r0, [pc, #2368]	; 44be4 <warn@@Base+0x3414>
   442a0:	add	r0, pc, r0
   442a4:	bx	lr
   442a8:	cmp	r0, #75	; 0x4b
   442ac:	beq	45138 <warn@@Base+0x3968>
   442b0:	cmp	r0, #76	; 0x4c
   442b4:	bne	442f4 <warn@@Base+0x2b24>
   442b8:	ldr	r0, [pc, #2344]	; 44be8 <warn@@Base+0x3418>
   442bc:	add	r0, pc, r0
   442c0:	bx	lr
   442c4:	cmp	r0, #71	; 0x47
   442c8:	beq	45354 <warn@@Base+0x3b84>
   442cc:	bhi	44304 <warn@@Base+0x2b34>
   442d0:	cmp	r0, #69	; 0x45
   442d4:	beq	4512c <warn@@Base+0x395c>
   442d8:	cmp	r0, #70	; 0x46
   442dc:	bne	442fc <warn@@Base+0x2b2c>
   442e0:	ldr	r0, [pc, #2308]	; 44bec <warn@@Base+0x341c>
   442e4:	add	r0, pc, r0
   442e8:	bx	lr
   442ec:	mov	r0, #0
   442f0:	bx	lr
   442f4:	mov	r0, #0
   442f8:	bx	lr
   442fc:	mov	r0, #0
   44300:	bx	lr
   44304:	cmp	r0, #72	; 0x48
   44308:	beq	45120 <warn@@Base+0x3950>
   4430c:	cmp	r0, #73	; 0x49
   44310:	bne	443dc <warn@@Base+0x2c0c>
   44314:	ldr	r0, [pc, #2260]	; 44bf0 <warn@@Base+0x3420>
   44318:	add	r0, pc, r0
   4431c:	bx	lr
   44320:	cmp	r0, #19
   44324:	beq	45558 <warn@@Base+0x3d88>
   44328:	bls	44438 <warn@@Base+0x2c68>
   4432c:	cmp	r0, #25
   44330:	beq	45498 <warn@@Base+0x3cc8>
   44334:	bls	44410 <warn@@Base+0x2c40>
   44338:	cmp	r0, #28
   4433c:	beq	453e4 <warn@@Base+0x3c14>
   44340:	bls	443f4 <warn@@Base+0x2c24>
   44344:	cmp	r0, #30
   44348:	beq	45264 <warn@@Base+0x3a94>
   4434c:	bcc	45114 <warn@@Base+0x3944>
   44350:	cmp	r0, #32
   44354:	bne	443ec <warn@@Base+0x2c1c>
   44358:	ldr	r0, [pc, #2196]	; 44bf4 <warn@@Base+0x3424>
   4435c:	add	r0, pc, r0
   44360:	bx	lr
   44364:	cmp	r0, #47	; 0x2f
   44368:	beq	45108 <warn@@Base+0x3938>
   4436c:	cmp	r0, #49	; 0x31
   44370:	bne	443a8 <warn@@Base+0x2bd8>
   44374:	ldr	r0, [pc, #2172]	; 44bf8 <warn@@Base+0x3428>
   44378:	add	r0, pc, r0
   4437c:	bx	lr
   44380:	cmp	r0, #39	; 0x27
   44384:	beq	45324 <warn@@Base+0x3b54>
   44388:	bhi	443b8 <warn@@Base+0x2be8>
   4438c:	cmp	r0, #34	; 0x22
   44390:	beq	450fc <warn@@Base+0x392c>
   44394:	cmp	r0, #37	; 0x25
   44398:	bne	443b0 <warn@@Base+0x2be0>
   4439c:	ldr	r0, [pc, #2136]	; 44bfc <warn@@Base+0x342c>
   443a0:	add	r0, pc, r0
   443a4:	bx	lr
   443a8:	mov	r0, #0
   443ac:	bx	lr
   443b0:	mov	r0, #0
   443b4:	bx	lr
   443b8:	cmp	r0, #42	; 0x2a
   443bc:	beq	450f0 <warn@@Base+0x3920>
   443c0:	cmp	r0, #44	; 0x2c
   443c4:	bne	443e4 <warn@@Base+0x2c14>
   443c8:	ldr	r0, [pc, #2096]	; 44c00 <warn@@Base+0x3430>
   443cc:	add	r0, pc, r0
   443d0:	bx	lr
   443d4:	mov	r0, #0
   443d8:	bx	lr
   443dc:	mov	r0, #0
   443e0:	bx	lr
   443e4:	mov	r0, #0
   443e8:	bx	lr
   443ec:	mov	r0, #0
   443f0:	bx	lr
   443f4:	cmp	r0, #26
   443f8:	beq	450e4 <warn@@Base+0x3914>
   443fc:	cmp	r0, #27
   44400:	bne	44468 <warn@@Base+0x2c98>
   44404:	ldr	r0, [pc, #2040]	; 44c04 <warn@@Base+0x3434>
   44408:	add	r0, pc, r0
   4440c:	bx	lr
   44410:	cmp	r0, #22
   44414:	beq	45330 <warn@@Base+0x3b60>
   44418:	bhi	444e8 <warn@@Base+0x2d18>
   4441c:	cmp	r0, #20
   44420:	beq	450d8 <warn@@Base+0x3908>
   44424:	cmp	r0, #21
   44428:	bne	444e0 <warn@@Base+0x2d10>
   4442c:	ldr	r0, [pc, #2004]	; 44c08 <warn@@Base+0x3438>
   44430:	add	r0, pc, r0
   44434:	bx	lr
   44438:	cmp	r0, #11
   4443c:	beq	454a4 <warn@@Base+0x3cd4>
   44440:	bls	4448c <warn@@Base+0x2cbc>
   44444:	cmp	r0, #15
   44448:	beq	45450 <warn@@Base+0x3c80>
   4444c:	bls	44470 <warn@@Base+0x2ca0>
   44450:	cmp	r0, #17
   44454:	beq	45240 <warn@@Base+0x3a70>
   44458:	bhi	450cc <warn@@Base+0x38fc>
   4445c:	ldr	r0, [pc, #1960]	; 44c0c <warn@@Base+0x343c>
   44460:	add	r0, pc, r0
   44464:	bx	lr
   44468:	mov	r0, #0
   4446c:	bx	lr
   44470:	cmp	r0, #12
   44474:	beq	450c0 <warn@@Base+0x38f0>
   44478:	cmp	r0, #13
   4447c:	bne	444b4 <warn@@Base+0x2ce4>
   44480:	ldr	r0, [pc, #1928]	; 44c10 <warn@@Base+0x3440>
   44484:	add	r0, pc, r0
   44488:	bx	lr
   4448c:	cmp	r0, #3
   44490:	beq	4533c <warn@@Base+0x3b6c>
   44494:	bhi	444c4 <warn@@Base+0x2cf4>
   44498:	cmp	r0, #1
   4449c:	beq	450b4 <warn@@Base+0x38e4>
   444a0:	cmp	r0, #2
   444a4:	bne	444bc <warn@@Base+0x2cec>
   444a8:	ldr	r0, [pc, #1892]	; 44c14 <warn@@Base+0x3444>
   444ac:	add	r0, pc, r0
   444b0:	bx	lr
   444b4:	mov	r0, #0
   444b8:	bx	lr
   444bc:	mov	r0, #0
   444c0:	bx	lr
   444c4:	cmp	r0, #9
   444c8:	beq	450a8 <warn@@Base+0x38d8>
   444cc:	cmp	r0, #10
   444d0:	bne	44504 <warn@@Base+0x2d34>
   444d4:	ldr	r0, [pc, #1852]	; 44c18 <warn@@Base+0x3448>
   444d8:	add	r0, pc, r0
   444dc:	bx	lr
   444e0:	mov	r0, #0
   444e4:	bx	lr
   444e8:	cmp	r0, #23
   444ec:	beq	4509c <warn@@Base+0x38cc>
   444f0:	cmp	r0, #24
   444f4:	bne	4450c <warn@@Base+0x2d3c>
   444f8:	ldr	r0, [pc, #1820]	; 44c1c <warn@@Base+0x344c>
   444fc:	add	r0, pc, r0
   44500:	bx	lr
   44504:	mov	r0, #0
   44508:	bx	lr
   4450c:	mov	r0, #0
   44510:	bx	lr
   44514:	sub	r3, r3, #35	; 0x23
   44518:	cmp	r0, r3
   4451c:	beq	45594 <warn@@Base+0x3dc4>
   44520:	bls	448e8 <warn@@Base+0x3118>
   44524:	ldr	r3, [pc, #1780]	; 44c20 <warn@@Base+0x3450>
   44528:	cmp	r0, r3
   4452c:	beq	4554c <warn@@Base+0x3d7c>
   44530:	bhi	448bc <warn@@Base+0x30ec>
   44534:	sub	r3, r3, #4
   44538:	cmp	r0, r3
   4453c:	beq	4545c <warn@@Base+0x3c8c>
   44540:	bls	445c8 <warn@@Base+0x2df8>
   44544:	ldr	r3, [pc, #1752]	; 44c24 <warn@@Base+0x3454>
   44548:	cmp	r0, r3
   4454c:	beq	45234 <warn@@Base+0x3a64>
   44550:	bhi	45090 <warn@@Base+0x38c0>
   44554:	ldr	r0, [pc, #1740]	; 44c28 <warn@@Base+0x3458>
   44558:	add	r0, pc, r0
   4455c:	bx	lr
   44560:	sub	r3, r3, #254	; 0xfe
   44564:	cmp	r0, r3
   44568:	beq	455b8 <warn@@Base+0x3de8>
   4456c:	bls	446b4 <warn@@Base+0x2ee4>
   44570:	ldr	r3, [pc, #1716]	; 44c2c <warn@@Base+0x345c>
   44574:	cmp	r0, r3
   44578:	beq	4557c <warn@@Base+0x3dac>
   4457c:	bls	44678 <warn@@Base+0x2ea8>
   44580:	ldr	r3, [pc, #1704]	; 44c30 <warn@@Base+0x3460>
   44584:	cmp	r0, r3
   44588:	beq	45534 <warn@@Base+0x3d64>
   4458c:	bhi	44620 <warn@@Base+0x2e50>
   44590:	sub	r3, r3, #7
   44594:	cmp	r0, r3
   44598:	beq	4542c <warn@@Base+0x3c5c>
   4459c:	bls	445fc <warn@@Base+0x2e2c>
   445a0:	ldr	r3, [pc, #1676]	; 44c34 <warn@@Base+0x3464>
   445a4:	cmp	r0, r3
   445a8:	beq	45228 <warn@@Base+0x3a58>
   445ac:	bhi	45084 <warn@@Base+0x38b4>
   445b0:	sub	r3, r3, #1
   445b4:	cmp	r0, r3
   445b8:	bne	445ec <warn@@Base+0x2e1c>
   445bc:	ldr	r0, [pc, #1652]	; 44c38 <warn@@Base+0x3468>
   445c0:	add	r0, pc, r0
   445c4:	bx	lr
   445c8:	sub	r3, r3, #2
   445cc:	cmp	r0, r3
   445d0:	beq	45078 <warn@@Base+0x38a8>
   445d4:	add	r3, r3, #1
   445d8:	cmp	r0, r3
   445dc:	bne	445f4 <warn@@Base+0x2e24>
   445e0:	ldr	r0, [pc, #1620]	; 44c3c <warn@@Base+0x346c>
   445e4:	add	r0, pc, r0
   445e8:	bx	lr
   445ec:	mov	r0, #0
   445f0:	bx	lr
   445f4:	mov	r0, #0
   445f8:	bx	lr
   445fc:	sub	r3, r3, #2
   44600:	cmp	r0, r3
   44604:	beq	4506c <warn@@Base+0x389c>
   44608:	add	r3, r3, #1
   4460c:	cmp	r0, r3
   44610:	bne	4464c <warn@@Base+0x2e7c>
   44614:	ldr	r0, [pc, #1572]	; 44c40 <warn@@Base+0x3470>
   44618:	add	r0, pc, r0
   4461c:	bx	lr
   44620:	ldr	r3, [pc, #1564]	; 44c44 <warn@@Base+0x3474>
   44624:	cmp	r0, r3
   44628:	beq	45438 <warn@@Base+0x3c68>
   4462c:	bls	44654 <warn@@Base+0x2e84>
   44630:	ldr	r3, [pc, #1552]	; 44c48 <warn@@Base+0x3478>
   44634:	cmp	r0, r3
   44638:	beq	452f4 <warn@@Base+0x3b24>
   4463c:	bhi	45060 <warn@@Base+0x3890>
   44640:	ldr	r0, [pc, #1540]	; 44c4c <warn@@Base+0x347c>
   44644:	add	r0, pc, r0
   44648:	bx	lr
   4464c:	mov	r0, #0
   44650:	bx	lr
   44654:	sub	r3, r3, #222	; 0xde
   44658:	cmp	r0, r3
   4465c:	beq	45054 <warn@@Base+0x3884>
   44660:	add	r3, r3, #6
   44664:	cmp	r0, r3
   44668:	bne	446f8 <warn@@Base+0x2f28>
   4466c:	ldr	r0, [pc, #1500]	; 44c50 <warn@@Base+0x3480>
   44670:	add	r0, pc, r0
   44674:	bx	lr
   44678:	sub	r3, r3, #7
   4467c:	cmp	r0, r3
   44680:	beq	454d4 <warn@@Base+0x3d04>
   44684:	bls	44770 <warn@@Base+0x2fa0>
   44688:	ldr	r3, [pc, #1476]	; 44c54 <warn@@Base+0x3484>
   4468c:	cmp	r0, r3
   44690:	beq	45420 <warn@@Base+0x3c50>
   44694:	bls	4474c <warn@@Base+0x2f7c>
   44698:	ldr	r3, [pc, #1464]	; 44c58 <warn@@Base+0x3488>
   4469c:	cmp	r0, r3
   446a0:	beq	4530c <warn@@Base+0x3b3c>
   446a4:	bhi	45048 <warn@@Base+0x3878>
   446a8:	ldr	r0, [pc, #1452]	; 44c5c <warn@@Base+0x348c>
   446ac:	add	r0, pc, r0
   446b0:	bx	lr
   446b4:	cmp	r0, #135	; 0x87
   446b8:	beq	45570 <warn@@Base+0x3da0>
   446bc:	bls	447d8 <warn@@Base+0x3008>
   446c0:	cmp	r0, #8192	; 0x2000
   446c4:	beq	454c8 <warn@@Base+0x3cf8>
   446c8:	bls	44724 <warn@@Base+0x2f54>
   446cc:	ldr	r3, [pc, #1420]	; 44c60 <warn@@Base+0x3490>
   446d0:	cmp	r0, r3
   446d4:	beq	45480 <warn@@Base+0x3cb0>
   446d8:	bls	44700 <warn@@Base+0x2f30>
   446dc:	ldr	r3, [pc, #1408]	; 44c64 <warn@@Base+0x3494>
   446e0:	cmp	r0, r3
   446e4:	beq	45300 <warn@@Base+0x3b30>
   446e8:	bhi	4503c <warn@@Base+0x386c>
   446ec:	ldr	r0, [pc, #1396]	; 44c68 <warn@@Base+0x3498>
   446f0:	add	r0, pc, r0
   446f4:	bx	lr
   446f8:	mov	r0, #0
   446fc:	bx	lr
   44700:	sub	r3, r3, #2
   44704:	cmp	r0, r3
   44708:	beq	45030 <warn@@Base+0x3860>
   4470c:	add	r3, r3, #1
   44710:	cmp	r0, r3
   44714:	bne	4482c <warn@@Base+0x305c>
   44718:	ldr	r0, [pc, #1356]	; 44c6c <warn@@Base+0x349c>
   4471c:	add	r0, pc, r0
   44720:	bx	lr
   44724:	cmp	r0, #138	; 0x8a
   44728:	beq	45390 <warn@@Base+0x3bc0>
   4472c:	bhi	44810 <warn@@Base+0x3040>
   44730:	cmp	r0, #136	; 0x88
   44734:	beq	45024 <warn@@Base+0x3854>
   44738:	cmp	r0, #137	; 0x89
   4473c:	bne	44808 <warn@@Base+0x3038>
   44740:	ldr	r0, [pc, #1320]	; 44c70 <warn@@Base+0x34a0>
   44744:	add	r0, pc, r0
   44748:	bx	lr
   4474c:	sub	r3, r3, #2
   44750:	cmp	r0, r3
   44754:	beq	45018 <warn@@Base+0x3848>
   44758:	add	r3, r3, #1
   4475c:	cmp	r0, r3
   44760:	bne	447a4 <warn@@Base+0x2fd4>
   44764:	ldr	r0, [pc, #1288]	; 44c74 <warn@@Base+0x34a4>
   44768:	add	r0, pc, r0
   4476c:	bx	lr
   44770:	sub	r3, r3, #7
   44774:	cmp	r0, r3
   44778:	beq	45318 <warn@@Base+0x3b48>
   4477c:	bhi	447b4 <warn@@Base+0x2fe4>
   44780:	sub	r3, r3, #2
   44784:	cmp	r0, r3
   44788:	beq	4500c <warn@@Base+0x383c>
   4478c:	add	r3, r3, #1
   44790:	cmp	r0, r3
   44794:	bne	447ac <warn@@Base+0x2fdc>
   44798:	ldr	r0, [pc, #1240]	; 44c78 <warn@@Base+0x34a8>
   4479c:	add	r0, pc, r0
   447a0:	bx	lr
   447a4:	mov	r0, #0
   447a8:	bx	lr
   447ac:	mov	r0, #0
   447b0:	bx	lr
   447b4:	ldr	r3, [pc, #1216]	; 44c7c <warn@@Base+0x34ac>
   447b8:	cmp	r0, r3
   447bc:	beq	45000 <warn@@Base+0x3830>
   447c0:	add	r3, r3, #5
   447c4:	cmp	r0, r3
   447c8:	bne	448a4 <warn@@Base+0x30d4>
   447cc:	ldr	r0, [pc, #1196]	; 44c80 <warn@@Base+0x34b0>
   447d0:	add	r0, pc, r0
   447d4:	bx	lr
   447d8:	cmp	r0, #128	; 0x80
   447dc:	beq	454e0 <warn@@Base+0x3d10>
   447e0:	bls	44850 <warn@@Base+0x3080>
   447e4:	cmp	r0, #131	; 0x83
   447e8:	beq	4548c <warn@@Base+0x3cbc>
   447ec:	bls	44834 <warn@@Base+0x3064>
   447f0:	cmp	r0, #133	; 0x85
   447f4:	beq	452e8 <warn@@Base+0x3b18>
   447f8:	bhi	44ff4 <warn@@Base+0x3824>
   447fc:	ldr	r0, [pc, #1152]	; 44c84 <warn@@Base+0x34b4>
   44800:	add	r0, pc, r0
   44804:	bx	lr
   44808:	mov	r0, #0
   4480c:	bx	lr
   44810:	cmp	r0, #139	; 0x8b
   44814:	beq	44fe8 <warn@@Base+0x3818>
   44818:	cmp	r0, #140	; 0x8c
   4481c:	bne	448ac <warn@@Base+0x30dc>
   44820:	ldr	r0, [pc, #1120]	; 44c88 <warn@@Base+0x34b8>
   44824:	add	r0, pc, r0
   44828:	bx	lr
   4482c:	mov	r0, #0
   44830:	bx	lr
   44834:	cmp	r0, #129	; 0x81
   44838:	beq	44fdc <warn@@Base+0x380c>
   4483c:	cmp	r0, #130	; 0x82
   44840:	bne	44878 <warn@@Base+0x30a8>
   44844:	ldr	r0, [pc, #1088]	; 44c8c <warn@@Base+0x34bc>
   44848:	add	r0, pc, r0
   4484c:	bx	lr
   44850:	cmp	r0, #125	; 0x7d
   44854:	beq	45384 <warn@@Base+0x3bb4>
   44858:	bhi	44888 <warn@@Base+0x30b8>
   4485c:	cmp	r0, #123	; 0x7b
   44860:	beq	44fd0 <warn@@Base+0x3800>
   44864:	cmp	r0, #124	; 0x7c
   44868:	bne	44880 <warn@@Base+0x30b0>
   4486c:	ldr	r0, [pc, #1052]	; 44c90 <warn@@Base+0x34c0>
   44870:	add	r0, pc, r0
   44874:	bx	lr
   44878:	mov	r0, #0
   4487c:	bx	lr
   44880:	mov	r0, #0
   44884:	bx	lr
   44888:	cmp	r0, #126	; 0x7e
   4488c:	beq	44fc4 <warn@@Base+0x37f4>
   44890:	cmp	r0, #127	; 0x7f
   44894:	bne	448b4 <warn@@Base+0x30e4>
   44898:	ldr	r0, [pc, #1012]	; 44c94 <warn@@Base+0x34c4>
   4489c:	add	r0, pc, r0
   448a0:	bx	lr
   448a4:	mov	r0, #0
   448a8:	bx	lr
   448ac:	mov	r0, #0
   448b0:	bx	lr
   448b4:	mov	r0, #0
   448b8:	bx	lr
   448bc:	ldr	r3, [pc, #980]	; 44c98 <warn@@Base+0x34c8>
   448c0:	cmp	r0, r3
   448c4:	beq	453cc <warn@@Base+0x3bfc>
   448c8:	bls	44924 <warn@@Base+0x3154>
   448cc:	ldr	r3, [pc, #968]	; 44c9c <warn@@Base+0x34cc>
   448d0:	cmp	r0, r3
   448d4:	beq	452c4 <warn@@Base+0x3af4>
   448d8:	bhi	44fb8 <warn@@Base+0x37e8>
   448dc:	ldr	r0, [pc, #956]	; 44ca0 <warn@@Base+0x34d0>
   448e0:	add	r0, pc, r0
   448e4:	bx	lr
   448e8:	sub	r3, r3, #7
   448ec:	cmp	r0, r3
   448f0:	beq	454bc <warn@@Base+0x3cec>
   448f4:	bls	44a7c <warn@@Base+0x32ac>
   448f8:	ldr	r3, [pc, #932]	; 44ca4 <warn@@Base+0x34d4>
   448fc:	cmp	r0, r3
   44900:	beq	453b4 <warn@@Base+0x3be4>
   44904:	bls	44948 <warn@@Base+0x3178>
   44908:	ldr	r3, [pc, #920]	; 44ca8 <warn@@Base+0x34d8>
   4490c:	cmp	r0, r3
   44910:	beq	452dc <warn@@Base+0x3b0c>
   44914:	bhi	44fac <warn@@Base+0x37dc>
   44918:	ldr	r0, [pc, #908]	; 44cac <warn@@Base+0x34dc>
   4491c:	add	r0, pc, r0
   44920:	bx	lr
   44924:	sub	r3, r3, #23
   44928:	cmp	r0, r3
   4492c:	beq	44fa0 <warn@@Base+0x37d0>
   44930:	add	r3, r3, #22
   44934:	cmp	r0, r3
   44938:	bne	44ab0 <warn@@Base+0x32e0>
   4493c:	ldr	r0, [pc, #876]	; 44cb0 <warn@@Base+0x34e0>
   44940:	add	r0, pc, r0
   44944:	bx	lr
   44948:	sub	r3, r3, #2
   4494c:	cmp	r0, r3
   44950:	beq	44f94 <warn@@Base+0x37c4>
   44954:	add	r3, r3, #1
   44958:	cmp	r0, r3
   4495c:	bne	44b20 <warn@@Base+0x3350>
   44960:	ldr	r0, [pc, #844]	; 44cb4 <warn@@Base+0x34e4>
   44964:	add	r0, pc, r0
   44968:	bx	lr
   4496c:	cmp	r0, #97	; 0x61
   44970:	beq	4536c <warn@@Base+0x3b9c>
   44974:	bhi	44aec <warn@@Base+0x331c>
   44978:	cmp	r0, #95	; 0x5f
   4497c:	beq	44f88 <warn@@Base+0x37b8>
   44980:	cmp	r0, #96	; 0x60
   44984:	bne	44ae4 <warn@@Base+0x3314>
   44988:	ldr	r0, [pc, #808]	; 44cb8 <warn@@Base+0x34e8>
   4498c:	add	r0, pc, r0
   44990:	bx	lr
   44994:	sub	r3, r3, #5888	; 0x1700
   44998:	cmp	r0, r3
   4499c:	beq	454f8 <warn@@Base+0x3d28>
   449a0:	bls	44a0c <warn@@Base+0x323c>
   449a4:	ldr	r3, [pc, #784]	; 44cbc <warn@@Base+0x34ec>
   449a8:	cmp	r0, r3
   449ac:	beq	453d8 <warn@@Base+0x3c08>
   449b0:	bls	449e8 <warn@@Base+0x3218>
   449b4:	cmp	r0, #14848	; 0x3a00
   449b8:	beq	452b8 <warn@@Base+0x3ae8>
   449bc:	bhi	44f7c <warn@@Base+0x37ac>
   449c0:	ldr	r3, [pc, #760]	; 44cc0 <warn@@Base+0x34f0>
   449c4:	cmp	r0, r3
   449c8:	bne	449e0 <warn@@Base+0x3210>
   449cc:	ldr	r0, [pc, #752]	; 44cc4 <warn@@Base+0x34f4>
   449d0:	add	r0, pc, r0
   449d4:	bx	lr
   449d8:	mov	r0, #0
   449dc:	bx	lr
   449e0:	mov	r0, #0
   449e4:	bx	lr
   449e8:	sub	r3, r3, #2
   449ec:	cmp	r0, r3
   449f0:	beq	44f70 <warn@@Base+0x37a0>
   449f4:	add	r3, r3, #1
   449f8:	cmp	r0, r3
   449fc:	bne	44a40 <warn@@Base+0x3270>
   44a00:	ldr	r0, [pc, #704]	; 44cc8 <warn@@Base+0x34f8>
   44a04:	add	r0, pc, r0
   44a08:	bx	lr
   44a0c:	ldr	r3, [pc, #696]	; 44ccc <warn@@Base+0x34fc>
   44a10:	cmp	r0, r3
   44a14:	beq	45360 <warn@@Base+0x3b90>
   44a18:	bhi	44a50 <warn@@Base+0x3280>
   44a1c:	sub	r3, r3, #2
   44a20:	cmp	r0, r3
   44a24:	beq	44f64 <warn@@Base+0x3794>
   44a28:	add	r3, r3, #1
   44a2c:	cmp	r0, r3
   44a30:	bne	44a48 <warn@@Base+0x3278>
   44a34:	ldr	r0, [pc, #660]	; 44cd0 <warn@@Base+0x3500>
   44a38:	add	r0, pc, r0
   44a3c:	bx	lr
   44a40:	mov	r0, #0
   44a44:	bx	lr
   44a48:	mov	r0, #0
   44a4c:	bx	lr
   44a50:	ldr	r3, [pc, #636]	; 44cd4 <warn@@Base+0x3504>
   44a54:	cmp	r0, r3
   44a58:	beq	44f58 <warn@@Base+0x3788>
   44a5c:	add	r3, r3, #256	; 0x100
   44a60:	cmp	r0, r3
   44a64:	bne	44b4c <warn@@Base+0x337c>
   44a68:	ldr	r0, [pc, #616]	; 44cd8 <warn@@Base+0x3508>
   44a6c:	add	r0, pc, r0
   44a70:	bx	lr
   44a74:	mov	r0, #0
   44a78:	bx	lr
   44a7c:	sub	r3, r3, #3
   44a80:	cmp	r0, r3
   44a84:	beq	45378 <warn@@Base+0x3ba8>
   44a88:	bhi	44ac0 <warn@@Base+0x32f0>
   44a8c:	sub	r3, r3, #2
   44a90:	cmp	r0, r3
   44a94:	beq	44f4c <warn@@Base+0x377c>
   44a98:	add	r3, r3, #1
   44a9c:	cmp	r0, r3
   44aa0:	bne	44ab8 <warn@@Base+0x32e8>
   44aa4:	ldr	r0, [pc, #560]	; 44cdc <warn@@Base+0x350c>
   44aa8:	add	r0, pc, r0
   44aac:	bx	lr
   44ab0:	mov	r0, #0
   44ab4:	bx	lr
   44ab8:	mov	r0, #0
   44abc:	bx	lr
   44ac0:	ldr	r3, [pc, #536]	; 44ce0 <warn@@Base+0x3510>
   44ac4:	cmp	r0, r3
   44ac8:	beq	44f40 <warn@@Base+0x3770>
   44acc:	add	r3, r3, #1
   44ad0:	cmp	r0, r3
   44ad4:	bne	44b08 <warn@@Base+0x3338>
   44ad8:	ldr	r0, [pc, #516]	; 44ce4 <warn@@Base+0x3514>
   44adc:	add	r0, pc, r0
   44ae0:	bx	lr
   44ae4:	mov	r0, #0
   44ae8:	bx	lr
   44aec:	cmp	r0, #98	; 0x62
   44af0:	beq	44b74 <warn@@Base+0x33a4>
   44af4:	cmp	r0, #99	; 0x63
   44af8:	bne	44b10 <warn@@Base+0x3340>
   44afc:	ldr	r0, [pc, #484]	; 44ce8 <warn@@Base+0x3518>
   44b00:	add	r0, pc, r0
   44b04:	bx	lr
   44b08:	mov	r0, #0
   44b0c:	bx	lr
   44b10:	mov	r0, #0
   44b14:	bx	lr
   44b18:	mov	r0, #0
   44b1c:	bx	lr
   44b20:	mov	r0, #0
   44b24:	bx	lr
   44b28:	sub	r3, r3, #2
   44b2c:	cmp	r0, r3
   44b30:	beq	44b68 <warn@@Base+0x3398>
   44b34:	add	r3, r3, #1
   44b38:	cmp	r0, r3
   44b3c:	bne	44b54 <warn@@Base+0x3384>
   44b40:	ldr	r0, [pc, #420]	; 44cec <warn@@Base+0x351c>
   44b44:	add	r0, pc, r0
   44b48:	bx	lr
   44b4c:	mov	r0, #0
   44b50:	bx	lr
   44b54:	mov	r0, #0
   44b58:	bx	lr
   44b5c:	ldr	r0, [pc, #396]	; 44cf0 <warn@@Base+0x3520>
   44b60:	add	r0, pc, r0
   44b64:	bx	lr
   44b68:	ldr	r0, [pc, #388]	; 44cf4 <warn@@Base+0x3524>
   44b6c:	add	r0, pc, r0
   44b70:	bx	lr
   44b74:	ldr	r0, [pc, #380]	; 44cf8 <warn@@Base+0x3528>
   44b78:	add	r0, pc, r0
   44b7c:	bx	lr
   44b80:	andeq	r2, r0, r5, lsl #2
   44b84:	andeq	r2, r0, r5, lsr r1
   44b88:	andeq	r3, r0, r2, lsl #20
   44b8c:	andeq	r3, r0, r7, ror #31
   44b90:	andeq	r3, r0, r5, ror #31
   44b94:	andeq	r0, r1, ip, lsl #12
   44b98:	andeq	pc, r0, r0, ror #23
   44b9c:	andeq	r0, r1, r0, ror r5
   44ba0:	andeq	pc, r0, r8, ror fp	; <UNPREDICTABLE>
   44ba4:	andeq	pc, r0, r4, lsl #24
   44ba8:			; <UNDEFINED> instruction: 0x0000fab0
   44bac:	muleq	r0, r4, fp
   44bb0:	andeq	pc, r0, ip, asr sl	; <UNPREDICTABLE>
   44bb4:	andeq	r3, r0, sl, ror #31
   44bb8:	andeq	r3, r0, ip, ror #31
   44bbc:	andeq	r0, r1, r4, lsr #11
   44bc0:	andeq	pc, r0, r4, lsl r9	; <UNPREDICTABLE>
   44bc4:	andeq	pc, r0, r0, ror #12
   44bc8:	andeq	pc, r0, ip, lsl #17
   44bcc:	strdeq	pc, [r0], -r8
   44bd0:	andeq	pc, r0, r0, lsl #13
   44bd4:	andeq	pc, r0, r0, lsr r6	; <UNPREDICTABLE>
   44bd8:	andeq	pc, r0, r4, lsl r5	; <UNPREDICTABLE>
   44bdc:	andeq	pc, r0, r0, ror #14
   44be0:	ldrdeq	pc, [r0], -r4
   44be4:	andeq	pc, r0, ip, lsr r7	; <UNPREDICTABLE>
   44be8:	andeq	pc, r0, r4, ror #12
   44bec:	andeq	pc, r0, r8, asr #11
   44bf0:	andeq	pc, r0, ip, asr #11
   44bf4:	andeq	pc, r0, r4, lsl #6
   44bf8:	muleq	r0, r4, r3
   44bfc:	strdeq	pc, [r0], -r8
   44c00:	andeq	pc, r0, r4, lsl #6
   44c04:	andeq	pc, r0, r8, lsl #4
   44c08:	andeq	pc, r0, r0, ror r1	; <UNPREDICTABLE>
   44c0c:	strdeq	pc, [r0], -r0
   44c10:	andeq	pc, r0, r8, lsr #1
   44c14:	strdeq	r0, [r1], -r8
   44c18:	andeq	pc, r0, ip, lsl r0	; <UNPREDICTABLE>
   44c1c:	ldrdeq	pc, [r0], -r8
   44c20:	andeq	r2, r0, r9, lsl r1
   44c24:	andeq	r2, r0, r7, lsl r1
   44c28:	andeq	pc, r0, ip, asr #27
   44c2c:	andeq	r2, r0, r8, lsl r0
   44c30:	andeq	r2, r0, r2, lsr #32
   44c34:	andeq	r2, r0, r0, lsr #32
   44c38:	ldrdeq	pc, [r0], -r0
   44c3c:	andeq	pc, r0, r4, lsl #26
   44c40:	andeq	pc, r0, ip, asr #20
   44c44:	andeq	r2, r0, r1, lsl #2
   44c48:	andeq	r2, r0, r3, lsl #2
   44c4c:	strdeq	pc, [r0], -r4
   44c50:	muleq	r0, ip, sl
   44c54:	andeq	r2, r0, r4, lsl r0
   44c58:	andeq	r2, r0, r6, lsl r0
   44c5c:	andeq	pc, r0, r8, lsr #18
   44c60:	andeq	r2, r0, r3
   44c64:	andeq	r2, r0, r5
   44c68:	andeq	pc, r0, r8, ror r7	; <UNPREDICTABLE>
   44c6c:	andeq	pc, r0, r8, lsl r7	; <UNPREDICTABLE>
   44c70:	muleq	r0, r4, r6
   44c74:	andeq	pc, r0, ip, lsr r8	; <UNPREDICTABLE>
   44c78:	andeq	pc, r0, r4, asr r7	; <UNPREDICTABLE>
   44c7c:	andeq	r2, r0, fp
   44c80:	andeq	pc, r0, r4, lsl #15
   44c84:	andeq	pc, r0, r8, ror #10
   44c88:	andeq	pc, r0, ip, ror #11
   44c8c:	strdeq	pc, [r0], -r4
   44c90:	andeq	pc, r0, r8, asr #8
   44c94:	andeq	pc, r0, r4, ror #8
   44c98:	andeq	r2, r0, r1, lsr r1
   44c9c:	andeq	r2, r0, r3, lsr r1
   44ca0:	strdeq	pc, [r0], -r0
   44ca4:	andeq	r2, r0, lr, lsl #2
   44ca8:	andeq	r2, r0, r0, lsl r1
   44cac:	andeq	pc, r0, r4, asr #18
   44cb0:	andeq	pc, r0, r8, ror #20
   44cb4:			; <UNDEFINED> instruction: 0x0000f8b8
   44cb8:	andeq	pc, r0, r8, lsl #2
   44cbc:	andeq	r2, r0, r5, lsl #6
   44cc0:	andeq	r3, r0, r0, lsl r2
   44cc4:	andeq	pc, r0, ip, lsr #22
   44cc8:	ldrdeq	pc, [r0], -r0
   44ccc:	andeq	r2, r0, r8, lsr r1
   44cd0:	andeq	pc, r0, r4, lsl #20
   44cd4:	andeq	r2, r0, r1, lsl #4
   44cd8:	andeq	pc, r0, r8, lsl sl	; <UNPREDICTABLE>
   44cdc:	andeq	pc, r0, r8, ror #13
   44ce0:	andeq	r2, r0, r9, lsl #2
   44ce4:	strdeq	pc, [r0], -r8
   44ce8:	ldrdeq	lr, [r0], -r4
   44cec:	ldrdeq	pc, [r0], -r0
   44cf0:	andeq	pc, r0, r0, ror #20
   44cf4:	andeq	pc, r0, ip, lsl #21
   44cf8:	andeq	lr, r0, r4, asr #30
   44cfc:	andeq	pc, r0, r8, ror r2	; <UNPREDICTABLE>
   44d00:	andeq	pc, r0, r0, lsr r2	; <UNPREDICTABLE>
   44d04:	andeq	pc, r0, ip, lsl #10
   44d08:			; <UNDEFINED> instruction: 0x0000f4bc
   44d0c:	andeq	pc, r0, ip, asr #10
   44d10:	andeq	pc, r0, r8, lsr #11
   44d14:	strdeq	lr, [r0], -r4
   44d18:	andeq	pc, r0, r8, ror #4
   44d1c:	strdeq	pc, [r0], -r0
   44d20:	andeq	pc, r0, r0, ror #5
   44d24:	andeq	pc, r0, r0, asr #8
   44d28:	andeq	lr, r0, r4, lsr #26
   44d2c:	andeq	lr, r0, r8, asr #25
   44d30:	andeq	lr, r0, ip, asr #26
   44d34:	andeq	lr, r0, r4, lsl lr
   44d38:	andeq	lr, r0, r8, lsr #27
   44d3c:	andeq	lr, r0, r0, lsr #30
   44d40:	andeq	lr, r0, ip, asr #29
   44d44:	andeq	lr, r0, r0, ror pc
   44d48:	andeq	lr, r0, r0, lsr #27
   44d4c:	strdeq	lr, [r0], -r0
   44d50:	andeq	lr, r0, r0, ror #28
   44d54:			; <UNDEFINED> instruction: 0x0000efb8
   44d58:	muleq	r0, r8, r0
   44d5c:	strdeq	pc, [r0], -r4
   44d60:	ldrdeq	lr, [r0], -r0
   44d64:	andeq	pc, r0, r0, asr r2	; <UNPREDICTABLE>
   44d68:	andeq	pc, r0, r0, lsr r0	; <UNPREDICTABLE>
   44d6c:	andeq	pc, r0, ip, asr #5
   44d70:	andeq	lr, r0, r0, lsr #10
   44d74:	andeq	lr, r0, r8, lsr r4
   44d78:	andeq	lr, r0, r0, lsl r4
   44d7c:	andeq	lr, r0, r4, asr r4
   44d80:	andeq	lr, r0, r0, lsr #9
   44d84:			; <UNDEFINED> instruction: 0x0000e4b4
   44d88:	andeq	lr, r0, r0, lsl r5
   44d8c:	andeq	lr, r0, r8, asr #11
   44d90:	andeq	lr, r0, r4, lsl #11
   44d94:	andeq	lr, r0, ip, ror #11
   44d98:	andeq	lr, r0, ip, lsl r5
   44d9c:	andeq	lr, r0, ip, lsr #15
   44da0:	andeq	lr, r0, ip, ror #14
   44da4:	andeq	lr, r0, r8, asr #15
   44da8:	andeq	lr, r0, r4, lsl #17
   44dac:	andeq	lr, r0, r0, lsr #16
   44db0:	andeq	lr, r0, ip, lsr r8
   44db4:	strdeq	lr, [r0], -r4
   44db8:	muleq	r0, ip, r6
   44dbc:	andeq	lr, r0, ip, ror #13
   44dc0:	andeq	lr, r0, r0, lsl #12
   44dc4:	andeq	lr, r0, r8, ror #16
   44dc8:	andeq	lr, r0, r4, asr #12
   44dcc:	andeq	lr, r0, ip, lsr #17
   44dd0:	andeq	pc, r0, ip, lsl #9
   44dd4:	andeq	lr, r0, r0, lsr r9
   44dd8:	andeq	lr, r0, r0, asr #20
   44ddc:	andeq	lr, r0, r4, ror #18
   44de0:	andeq	lr, r0, r4, lsl #21
   44de4:	andeq	lr, r0, ip, ror r9
   44de8:	andeq	pc, r0, r8, asr #6
   44dec:	andeq	lr, r0, r0, ror #19
   44df0:	andeq	lr, r0, r8, lsl r9
   44df4:	andeq	lr, r0, r8, ror lr
   44df8:	andeq	pc, r0, ip, lsl #2
   44dfc:	andeq	lr, r0, ip, lsl r3
   44e00:	andeq	lr, r0, ip, lsl #20
   44e04:	andeq	lr, r0, r8, ror r9
   44e08:	andeq	lr, r0, r4, ror #7
   44e0c:	andeq	lr, r0, ip, ror #13
   44e10:	andeq	pc, r0, ip, ror #7
   44e14:	andeq	lr, r0, r0, asr #9
   44e18:	andeq	lr, r0, r4, asr #10
   44e1c:	andeq	lr, r0, r8, lsr #15
   44e20:	andeq	lr, r0, r8, lsr #11
   44e24:	andeq	pc, r0, ip, asr r2	; <UNPREDICTABLE>
   44e28:	andeq	pc, r0, r0, lsr #2
   44e2c:	andeq	pc, r0, ip, asr #5
   44e30:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   44e34:	muleq	r0, r8, sl
   44e38:	andeq	lr, r0, r0, asr lr
   44e3c:	andeq	lr, r0, ip, ror fp
   44e40:	andeq	lr, r0, r0, ror #25
   44e44:	strdeq	lr, [r0], -r0
   44e48:	andeq	lr, r0, r0, lsl #7
   44e4c:	andeq	lr, r0, r8, ror r2
   44e50:	muleq	r0, r8, r1
   44e54:	andeq	lr, r0, r0, ror r6
   44e58:	andeq	lr, r0, r4, ror #10
   44e5c:	andeq	pc, r0, ip, ror #1
   44e60:	andeq	lr, r0, ip, lsr r7
   44e64:	andeq	lr, r0, r8, lsr #28
   44e68:	andeq	lr, r0, ip, asr #18
   44e6c:	andeq	lr, r0, ip, asr sl
   44e70:	muleq	r0, r4, r4
   44e74:	ldrdeq	pc, [r0], -r0
   44e78:	andeq	lr, r0, r8, lsl #29
   44e7c:	strdeq	lr, [r0], -r4
   44e80:	andeq	lr, r0, ip, ror #31
   44e84:	andeq	pc, r0, r0, lsl r1	; <UNPREDICTABLE>
   44e88:	andeq	lr, r0, r8, lsr r2
   44e8c:	andeq	lr, r0, ip, lsr #15
   44e90:	andeq	lr, r0, ip, lsr r8
   44e94:	andeq	lr, r0, r8, lsr #10
   44e98:	andeq	lr, r0, ip, lsl #12
   44e9c:	muleq	r0, ip, fp
   44ea0:	andeq	lr, r0, ip, asr #24
   44ea4:	andeq	lr, r0, ip, ror #25
   44ea8:	ldrdeq	lr, [r0], -r4
   44eac:	andeq	lr, r0, r8, ror #1
   44eb0:			; <UNDEFINED> instruction: 0x0000eeb0
   44eb4:	andeq	pc, r0, r4, asr #3
   44eb8:	andeq	lr, r0, ip, lsr #5
   44ebc:	andeq	lr, r0, r8, asr #19
   44ec0:	andeq	lr, r0, r4, asr #17
   44ec4:	andeq	lr, r0, r8, asr #2
   44ec8:	andeq	lr, r0, r0, rrx
   44ecc:	andeq	lr, r0, r0, lsr r2
   44ed0:	andeq	lr, r0, r8, lsr #26
   44ed4:	andeq	lr, r0, r0, ror sl
   44ed8:	muleq	r0, r8, sl
   44edc:	andeq	lr, r0, r0, lsr r8
   44ee0:	strdeq	lr, [r0], -r4
   44ee4:	andeq	lr, r0, r8, lsr #31
   44ee8:	andeq	lr, r0, r8, ror #7
   44eec:	ldrdeq	lr, [r0], -ip
   44ef0:	strheq	pc, [r0], -ip	; <UNPREDICTABLE>
   44ef4:	ldrdeq	lr, [r0], -r4
   44ef8:	muleq	r0, ip, fp
   44efc:			; <UNDEFINED> instruction: 0x0000e6bc
   44f00:	andeq	lr, r0, r0, lsr lr
   44f04:	andeq	lr, r0, r4, lsr #32
   44f08:	andeq	lr, r0, r0, lsr #8
   44f0c:	andeq	lr, r0, r4, asr #16
   44f10:	andeq	lr, r0, r0, lsr #21
   44f14:	andeq	lr, r0, r8, ror #3
   44f18:	andeq	lr, r0, r4, lsl sp
   44f1c:			; <UNDEFINED> instruction: 0x0000e5bc
   44f20:	andeq	lr, r0, ip, lsl #31
   44f24:	andeq	lr, r0, r8, lsl #18
   44f28:	andeq	lr, r0, r8, lsr #1
   44f2c:	muleq	r0, r8, r4
   44f30:	andeq	lr, r0, r0, lsr lr
   44f34:	muleq	r0, r8, r2
   44f38:	andeq	lr, r0, r4, ror fp
   44f3c:	andeq	lr, r0, r0, lsl #13
   44f40:	ldr	r0, [pc, #-588]	; 44cfc <warn@@Base+0x352c>
   44f44:	add	r0, pc, r0
   44f48:	bx	lr
   44f4c:	ldr	r0, [pc, #-596]	; 44d00 <warn@@Base+0x3530>
   44f50:	add	r0, pc, r0
   44f54:	bx	lr
   44f58:	ldr	r0, [pc, #-604]	; 44d04 <warn@@Base+0x3534>
   44f5c:	add	r0, pc, r0
   44f60:	bx	lr
   44f64:	ldr	r0, [pc, #-612]	; 44d08 <warn@@Base+0x3538>
   44f68:	add	r0, pc, r0
   44f6c:	bx	lr
   44f70:	ldr	r0, [pc, #-620]	; 44d0c <warn@@Base+0x353c>
   44f74:	add	r0, pc, r0
   44f78:	bx	lr
   44f7c:	ldr	r0, [pc, #-628]	; 44d10 <warn@@Base+0x3540>
   44f80:	add	r0, pc, r0
   44f84:	bx	lr
   44f88:	ldr	r0, [pc, #-636]	; 44d14 <warn@@Base+0x3544>
   44f8c:	add	r0, pc, r0
   44f90:	bx	lr
   44f94:	ldr	r0, [pc, #-644]	; 44d18 <warn@@Base+0x3548>
   44f98:	add	r0, pc, r0
   44f9c:	bx	lr
   44fa0:	ldr	r0, [pc, #-652]	; 44d1c <warn@@Base+0x354c>
   44fa4:	add	r0, pc, r0
   44fa8:	bx	lr
   44fac:	ldr	r0, [pc, #-660]	; 44d20 <warn@@Base+0x3550>
   44fb0:	add	r0, pc, r0
   44fb4:	bx	lr
   44fb8:	ldr	r0, [pc, #-668]	; 44d24 <warn@@Base+0x3554>
   44fbc:	add	r0, pc, r0
   44fc0:	bx	lr
   44fc4:	ldr	r0, [pc, #-676]	; 44d28 <warn@@Base+0x3558>
   44fc8:	add	r0, pc, r0
   44fcc:	bx	lr
   44fd0:	ldr	r0, [pc, #-684]	; 44d2c <warn@@Base+0x355c>
   44fd4:	add	r0, pc, r0
   44fd8:	bx	lr
   44fdc:	ldr	r0, [pc, #-692]	; 44d30 <warn@@Base+0x3560>
   44fe0:	add	r0, pc, r0
   44fe4:	bx	lr
   44fe8:	ldr	r0, [pc, #-700]	; 44d34 <warn@@Base+0x3564>
   44fec:	add	r0, pc, r0
   44ff0:	bx	lr
   44ff4:	ldr	r0, [pc, #-708]	; 44d38 <warn@@Base+0x3568>
   44ff8:	add	r0, pc, r0
   44ffc:	bx	lr
   45000:	ldr	r0, [pc, #-716]	; 44d3c <warn@@Base+0x356c>
   45004:	add	r0, pc, r0
   45008:	bx	lr
   4500c:	ldr	r0, [pc, #-724]	; 44d40 <warn@@Base+0x3570>
   45010:	add	r0, pc, r0
   45014:	bx	lr
   45018:	ldr	r0, [pc, #-732]	; 44d44 <warn@@Base+0x3574>
   4501c:	add	r0, pc, r0
   45020:	bx	lr
   45024:	ldr	r0, [pc, #-740]	; 44d48 <warn@@Base+0x3578>
   45028:	add	r0, pc, r0
   4502c:	bx	lr
   45030:	ldr	r0, [pc, #-748]	; 44d4c <warn@@Base+0x357c>
   45034:	add	r0, pc, r0
   45038:	bx	lr
   4503c:	ldr	r0, [pc, #-756]	; 44d50 <warn@@Base+0x3580>
   45040:	add	r0, pc, r0
   45044:	bx	lr
   45048:	ldr	r0, [pc, #-764]	; 44d54 <warn@@Base+0x3584>
   4504c:	add	r0, pc, r0
   45050:	bx	lr
   45054:	ldr	r0, [pc, #-772]	; 44d58 <warn@@Base+0x3588>
   45058:	add	r0, pc, r0
   4505c:	bx	lr
   45060:	ldr	r0, [pc, #-780]	; 44d5c <warn@@Base+0x358c>
   45064:	add	r0, pc, r0
   45068:	bx	lr
   4506c:	ldr	r0, [pc, #-788]	; 44d60 <warn@@Base+0x3590>
   45070:	add	r0, pc, r0
   45074:	bx	lr
   45078:	ldr	r0, [pc, #-796]	; 44d64 <warn@@Base+0x3594>
   4507c:	add	r0, pc, r0
   45080:	bx	lr
   45084:	ldr	r0, [pc, #-804]	; 44d68 <warn@@Base+0x3598>
   45088:	add	r0, pc, r0
   4508c:	bx	lr
   45090:	ldr	r0, [pc, #-812]	; 44d6c <warn@@Base+0x359c>
   45094:	add	r0, pc, r0
   45098:	bx	lr
   4509c:	ldr	r0, [pc, #-820]	; 44d70 <warn@@Base+0x35a0>
   450a0:	add	r0, pc, r0
   450a4:	bx	lr
   450a8:	ldr	r0, [pc, #-828]	; 44d74 <warn@@Base+0x35a4>
   450ac:	add	r0, pc, r0
   450b0:	bx	lr
   450b4:	ldr	r0, [pc, #-836]	; 44d78 <warn@@Base+0x35a8>
   450b8:	add	r0, pc, r0
   450bc:	bx	lr
   450c0:	ldr	r0, [pc, #-844]	; 44d7c <warn@@Base+0x35ac>
   450c4:	add	r0, pc, r0
   450c8:	bx	lr
   450cc:	ldr	r0, [pc, #-852]	; 44d80 <warn@@Base+0x35b0>
   450d0:	add	r0, pc, r0
   450d4:	bx	lr
   450d8:	ldr	r0, [pc, #-860]	; 44d84 <warn@@Base+0x35b4>
   450dc:	add	r0, pc, r0
   450e0:	bx	lr
   450e4:	ldr	r0, [pc, #-868]	; 44d88 <warn@@Base+0x35b8>
   450e8:	add	r0, pc, r0
   450ec:	bx	lr
   450f0:	ldr	r0, [pc, #-876]	; 44d8c <warn@@Base+0x35bc>
   450f4:	add	r0, pc, r0
   450f8:	bx	lr
   450fc:	ldr	r0, [pc, #-884]	; 44d90 <warn@@Base+0x35c0>
   45100:	add	r0, pc, r0
   45104:	bx	lr
   45108:	ldr	r0, [pc, #-892]	; 44d94 <warn@@Base+0x35c4>
   4510c:	add	r0, pc, r0
   45110:	bx	lr
   45114:	ldr	r0, [pc, #-900]	; 44d98 <warn@@Base+0x35c8>
   45118:	add	r0, pc, r0
   4511c:	bx	lr
   45120:	ldr	r0, [pc, #-908]	; 44d9c <warn@@Base+0x35cc>
   45124:	add	r0, pc, r0
   45128:	bx	lr
   4512c:	ldr	r0, [pc, #-916]	; 44da0 <warn@@Base+0x35d0>
   45130:	add	r0, pc, r0
   45134:	bx	lr
   45138:	ldr	r0, [pc, #-924]	; 44da4 <warn@@Base+0x35d4>
   4513c:	add	r0, pc, r0
   45140:	bx	lr
   45144:	ldr	r0, [pc, #-932]	; 44da8 <warn@@Base+0x35d8>
   45148:	add	r0, pc, r0
   4514c:	bx	lr
   45150:	ldr	r0, [pc, #-940]	; 44dac <warn@@Base+0x35dc>
   45154:	add	r0, pc, r0
   45158:	bx	lr
   4515c:	ldr	r0, [pc, #-948]	; 44db0 <warn@@Base+0x35e0>
   45160:	add	r0, pc, r0
   45164:	bx	lr
   45168:	ldr	r0, [pc, #-956]	; 44db4 <warn@@Base+0x35e4>
   4516c:	add	r0, pc, r0
   45170:	bx	lr
   45174:	ldr	r0, [pc, #-964]	; 44db8 <warn@@Base+0x35e8>
   45178:	add	r0, pc, r0
   4517c:	bx	lr
   45180:	ldr	r0, [pc, #-972]	; 44dbc <warn@@Base+0x35ec>
   45184:	add	r0, pc, r0
   45188:	bx	lr
   4518c:	ldr	r0, [pc, #-980]	; 44dc0 <warn@@Base+0x35f0>
   45190:	add	r0, pc, r0
   45194:	bx	lr
   45198:	ldr	r0, [pc, #-988]	; 44dc4 <warn@@Base+0x35f4>
   4519c:	add	r0, pc, r0
   451a0:	bx	lr
   451a4:	ldr	r0, [pc, #-996]	; 44dc8 <warn@@Base+0x35f8>
   451a8:	add	r0, pc, r0
   451ac:	bx	lr
   451b0:	ldr	r0, [pc, #-1004]	; 44dcc <warn@@Base+0x35fc>
   451b4:	add	r0, pc, r0
   451b8:	bx	lr
   451bc:	ldr	r0, [pc, #-1012]	; 44dd0 <warn@@Base+0x3600>
   451c0:	add	r0, pc, r0
   451c4:	bx	lr
   451c8:	ldr	r0, [pc, #-1020]	; 44dd4 <warn@@Base+0x3604>
   451cc:	add	r0, pc, r0
   451d0:	bx	lr
   451d4:	ldr	r0, [pc, #-1028]	; 44dd8 <warn@@Base+0x3608>
   451d8:	add	r0, pc, r0
   451dc:	bx	lr
   451e0:	ldr	r0, [pc, #-1036]	; 44ddc <warn@@Base+0x360c>
   451e4:	add	r0, pc, r0
   451e8:	bx	lr
   451ec:	ldr	r0, [pc, #-1044]	; 44de0 <warn@@Base+0x3610>
   451f0:	add	r0, pc, r0
   451f4:	bx	lr
   451f8:	ldr	r0, [pc, #-1052]	; 44de4 <warn@@Base+0x3614>
   451fc:	add	r0, pc, r0
   45200:	bx	lr
   45204:	ldr	r0, [pc, #-1060]	; 44de8 <warn@@Base+0x3618>
   45208:	add	r0, pc, r0
   4520c:	bx	lr
   45210:	ldr	r0, [pc, #-1068]	; 44dec <warn@@Base+0x361c>
   45214:	add	r0, pc, r0
   45218:	bx	lr
   4521c:	ldr	r0, [pc, #-1076]	; 44df0 <warn@@Base+0x3620>
   45220:	add	r0, pc, r0
   45224:	bx	lr
   45228:	ldr	r0, [pc, #-1084]	; 44df4 <warn@@Base+0x3624>
   4522c:	add	r0, pc, r0
   45230:	bx	lr
   45234:	ldr	r0, [pc, #-1092]	; 44df8 <warn@@Base+0x3628>
   45238:	add	r0, pc, r0
   4523c:	bx	lr
   45240:	ldr	r0, [pc, #-1100]	; 44dfc <warn@@Base+0x362c>
   45244:	add	r0, pc, r0
   45248:	bx	lr
   4524c:	ldr	r0, [pc, #-1108]	; 44e00 <warn@@Base+0x3630>
   45250:	add	r0, pc, r0
   45254:	bx	lr
   45258:	ldr	r0, [pc, #-1116]	; 44e04 <warn@@Base+0x3634>
   4525c:	add	r0, pc, r0
   45260:	bx	lr
   45264:	ldr	r0, [pc, #-1124]	; 44e08 <warn@@Base+0x3638>
   45268:	add	r0, pc, r0
   4526c:	bx	lr
   45270:	ldr	r0, [pc, #-1132]	; 44e0c <warn@@Base+0x363c>
   45274:	add	r0, pc, r0
   45278:	bx	lr
   4527c:	ldr	r0, [pc, #-1140]	; 44e10 <warn@@Base+0x3640>
   45280:	add	r0, pc, r0
   45284:	bx	lr
   45288:	ldr	r0, [pc, #-1148]	; 44e14 <warn@@Base+0x3644>
   4528c:	add	r0, pc, r0
   45290:	bx	lr
   45294:	ldr	r0, [pc, #-1156]	; 44e18 <warn@@Base+0x3648>
   45298:	add	r0, pc, r0
   4529c:	bx	lr
   452a0:	ldr	r0, [pc, #-1164]	; 44e1c <warn@@Base+0x364c>
   452a4:	add	r0, pc, r0
   452a8:	bx	lr
   452ac:	ldr	r0, [pc, #-1172]	; 44e20 <warn@@Base+0x3650>
   452b0:	add	r0, pc, r0
   452b4:	bx	lr
   452b8:	ldr	r0, [pc, #-1180]	; 44e24 <warn@@Base+0x3654>
   452bc:	add	r0, pc, r0
   452c0:	bx	lr
   452c4:	ldr	r0, [pc, #-1188]	; 44e28 <warn@@Base+0x3658>
   452c8:	add	r0, pc, r0
   452cc:	bx	lr
   452d0:	ldr	r0, [pc, #-1196]	; 44e2c <warn@@Base+0x365c>
   452d4:	add	r0, pc, r0
   452d8:	bx	lr
   452dc:	ldr	r0, [pc, #-1204]	; 44e30 <warn@@Base+0x3660>
   452e0:	add	r0, pc, r0
   452e4:	bx	lr
   452e8:	ldr	r0, [pc, #-1212]	; 44e34 <warn@@Base+0x3664>
   452ec:	add	r0, pc, r0
   452f0:	bx	lr
   452f4:	ldr	r0, [pc, #-1220]	; 44e38 <warn@@Base+0x3668>
   452f8:	add	r0, pc, r0
   452fc:	bx	lr
   45300:	ldr	r0, [pc, #-1228]	; 44e3c <warn@@Base+0x366c>
   45304:	add	r0, pc, r0
   45308:	bx	lr
   4530c:	ldr	r0, [pc, #-1236]	; 44e40 <warn@@Base+0x3670>
   45310:	add	r0, pc, r0
   45314:	bx	lr
   45318:	ldr	r0, [pc, #-1244]	; 44e44 <warn@@Base+0x3674>
   4531c:	add	r0, pc, r0
   45320:	bx	lr
   45324:	ldr	r0, [pc, #-1252]	; 44e48 <warn@@Base+0x3678>
   45328:	add	r0, pc, r0
   4532c:	bx	lr
   45330:	ldr	r0, [pc, #-1260]	; 44e4c <warn@@Base+0x367c>
   45334:	add	r0, pc, r0
   45338:	bx	lr
   4533c:	ldr	r0, [pc, #-1268]	; 44e50 <warn@@Base+0x3680>
   45340:	add	r0, pc, r0
   45344:	bx	lr
   45348:	ldr	r0, [pc, #-1276]	; 44e54 <warn@@Base+0x3684>
   4534c:	add	r0, pc, r0
   45350:	bx	lr
   45354:	ldr	r0, [pc, #-1284]	; 44e58 <warn@@Base+0x3688>
   45358:	add	r0, pc, r0
   4535c:	bx	lr
   45360:	ldr	r0, [pc, #-1292]	; 44e5c <warn@@Base+0x368c>
   45364:	add	r0, pc, r0
   45368:	bx	lr
   4536c:	ldr	r0, [pc, #-1300]	; 44e60 <warn@@Base+0x3690>
   45370:	add	r0, pc, r0
   45374:	bx	lr
   45378:	ldr	r0, [pc, #-1308]	; 44e64 <warn@@Base+0x3694>
   4537c:	add	r0, pc, r0
   45380:	bx	lr
   45384:	ldr	r0, [pc, #-1316]	; 44e68 <warn@@Base+0x3698>
   45388:	add	r0, pc, r0
   4538c:	bx	lr
   45390:	ldr	r0, [pc, #-1324]	; 44e6c <warn@@Base+0x369c>
   45394:	add	r0, pc, r0
   45398:	bx	lr
   4539c:	ldr	r0, [pc, #-1332]	; 44e70 <warn@@Base+0x36a0>
   453a0:	add	r0, pc, r0
   453a4:	bx	lr
   453a8:	ldr	r0, [pc, #-1340]	; 44e74 <warn@@Base+0x36a4>
   453ac:	add	r0, pc, r0
   453b0:	bx	lr
   453b4:	ldr	r0, [pc, #-1348]	; 44e78 <warn@@Base+0x36a8>
   453b8:	add	r0, pc, r0
   453bc:	bx	lr
   453c0:	ldr	r0, [pc, #-1356]	; 44e7c <warn@@Base+0x36ac>
   453c4:	add	r0, pc, r0
   453c8:	bx	lr
   453cc:	ldr	r0, [pc, #-1364]	; 44e80 <warn@@Base+0x36b0>
   453d0:	add	r0, pc, r0
   453d4:	bx	lr
   453d8:	ldr	r0, [pc, #-1372]	; 44e84 <warn@@Base+0x36b4>
   453dc:	add	r0, pc, r0
   453e0:	bx	lr
   453e4:	ldr	r0, [pc, #-1380]	; 44e88 <warn@@Base+0x36b8>
   453e8:	add	r0, pc, r0
   453ec:	bx	lr
   453f0:	ldr	r0, [pc, #-1388]	; 44e8c <warn@@Base+0x36bc>
   453f4:	add	r0, pc, r0
   453f8:	bx	lr
   453fc:	ldr	r0, [pc, #-1396]	; 44e90 <warn@@Base+0x36c0>
   45400:	add	r0, pc, r0
   45404:	bx	lr
   45408:	ldr	r0, [pc, #-1404]	; 44e94 <warn@@Base+0x36c4>
   4540c:	add	r0, pc, r0
   45410:	bx	lr
   45414:	ldr	r0, [pc, #-1412]	; 44e98 <warn@@Base+0x36c8>
   45418:	add	r0, pc, r0
   4541c:	bx	lr
   45420:	ldr	r0, [pc, #-1420]	; 44e9c <warn@@Base+0x36cc>
   45424:	add	r0, pc, r0
   45428:	bx	lr
   4542c:	ldr	r0, [pc, #-1428]	; 44ea0 <warn@@Base+0x36d0>
   45430:	add	r0, pc, r0
   45434:	bx	lr
   45438:	ldr	r0, [pc, #-1436]	; 44ea4 <warn@@Base+0x36d4>
   4543c:	add	r0, pc, r0
   45440:	bx	lr
   45444:	ldr	r0, [pc, #-1444]	; 44ea8 <warn@@Base+0x36d8>
   45448:	add	r0, pc, r0
   4544c:	bx	lr
   45450:	ldr	r0, [pc, #-1452]	; 44eac <warn@@Base+0x36dc>
   45454:	add	r0, pc, r0
   45458:	bx	lr
   4545c:	ldr	r0, [pc, #-1460]	; 44eb0 <warn@@Base+0x36e0>
   45460:	add	r0, pc, r0
   45464:	bx	lr
   45468:	ldr	r0, [pc, #-1468]	; 44eb4 <warn@@Base+0x36e4>
   4546c:	add	r0, pc, r0
   45470:	bx	lr
   45474:	ldr	r0, [pc, #-1476]	; 44eb8 <warn@@Base+0x36e8>
   45478:	add	r0, pc, r0
   4547c:	bx	lr
   45480:	ldr	r0, [pc, #-1484]	; 44ebc <warn@@Base+0x36ec>
   45484:	add	r0, pc, r0
   45488:	bx	lr
   4548c:	ldr	r0, [pc, #-1492]	; 44ec0 <warn@@Base+0x36f0>
   45490:	add	r0, pc, r0
   45494:	bx	lr
   45498:	ldr	r0, [pc, #-1500]	; 44ec4 <warn@@Base+0x36f4>
   4549c:	add	r0, pc, r0
   454a0:	bx	lr
   454a4:	ldr	r0, [pc, #-1508]	; 44ec8 <warn@@Base+0x36f8>
   454a8:	add	r0, pc, r0
   454ac:	bx	lr
   454b0:	ldr	r0, [pc, #-1516]	; 44ecc <warn@@Base+0x36fc>
   454b4:	add	r0, pc, r0
   454b8:	bx	lr
   454bc:	ldr	r0, [pc, #-1524]	; 44ed0 <warn@@Base+0x3700>
   454c0:	add	r0, pc, r0
   454c4:	bx	lr
   454c8:	ldr	r0, [pc, #-1532]	; 44ed4 <warn@@Base+0x3704>
   454cc:	add	r0, pc, r0
   454d0:	bx	lr
   454d4:	ldr	r0, [pc, #-1540]	; 44ed8 <warn@@Base+0x3708>
   454d8:	add	r0, pc, r0
   454dc:	bx	lr
   454e0:	ldr	r0, [pc, #-1548]	; 44edc <warn@@Base+0x370c>
   454e4:	add	r0, pc, r0
   454e8:	bx	lr
   454ec:	ldr	r0, [pc, #-1556]	; 44ee0 <warn@@Base+0x3710>
   454f0:	add	r0, pc, r0
   454f4:	bx	lr
   454f8:	ldr	r0, [pc, #-1564]	; 44ee4 <warn@@Base+0x3714>
   454fc:	add	r0, pc, r0
   45500:	bx	lr
   45504:	ldr	r0, [pc, #-1572]	; 44ee8 <warn@@Base+0x3718>
   45508:	add	r0, pc, r0
   4550c:	bx	lr
   45510:	ldr	r0, [pc, #-1580]	; 44eec <warn@@Base+0x371c>
   45514:	add	r0, pc, r0
   45518:	bx	lr
   4551c:	ldr	r0, [pc, #-1588]	; 44ef0 <warn@@Base+0x3720>
   45520:	add	r0, pc, r0
   45524:	bx	lr
   45528:	ldr	r0, [pc, #-1596]	; 44ef4 <warn@@Base+0x3724>
   4552c:	add	r0, pc, r0
   45530:	bx	lr
   45534:	ldr	r0, [pc, #-1604]	; 44ef8 <warn@@Base+0x3728>
   45538:	add	r0, pc, r0
   4553c:	bx	lr
   45540:	ldr	r0, [pc, #-1612]	; 44efc <warn@@Base+0x372c>
   45544:	add	r0, pc, r0
   45548:	bx	lr
   4554c:	ldr	r0, [pc, #-1620]	; 44f00 <warn@@Base+0x3730>
   45550:	add	r0, pc, r0
   45554:	bx	lr
   45558:	ldr	r0, [pc, #-1628]	; 44f04 <warn@@Base+0x3734>
   4555c:	add	r0, pc, r0
   45560:	bx	lr
   45564:	ldr	r0, [pc, #-1636]	; 44f08 <warn@@Base+0x3738>
   45568:	add	r0, pc, r0
   4556c:	bx	lr
   45570:	ldr	r0, [pc, #-1644]	; 44f0c <warn@@Base+0x373c>
   45574:	add	r0, pc, r0
   45578:	bx	lr
   4557c:	ldr	r0, [pc, #-1652]	; 44f10 <warn@@Base+0x3740>
   45580:	add	r0, pc, r0
   45584:	bx	lr
   45588:	ldr	r0, [pc, #-1660]	; 44f14 <warn@@Base+0x3744>
   4558c:	add	r0, pc, r0
   45590:	bx	lr
   45594:	ldr	r0, [pc, #-1668]	; 44f18 <warn@@Base+0x3748>
   45598:	add	r0, pc, r0
   4559c:	bx	lr
   455a0:	ldr	r0, [pc, #-1676]	; 44f1c <warn@@Base+0x374c>
   455a4:	add	r0, pc, r0
   455a8:	bx	lr
   455ac:	ldr	r0, [pc, #-1684]	; 44f20 <warn@@Base+0x3750>
   455b0:	add	r0, pc, r0
   455b4:	bx	lr
   455b8:	ldr	r0, [pc, #-1692]	; 44f24 <warn@@Base+0x3754>
   455bc:	add	r0, pc, r0
   455c0:	bx	lr
   455c4:	ldr	r0, [pc, #-1700]	; 44f28 <warn@@Base+0x3758>
   455c8:	add	r0, pc, r0
   455cc:	bx	lr
   455d0:	ldr	r0, [pc, #-1708]	; 44f2c <warn@@Base+0x375c>
   455d4:	add	r0, pc, r0
   455d8:	bx	lr
   455dc:	ldr	r0, [pc, #-1716]	; 44f30 <warn@@Base+0x3760>
   455e0:	add	r0, pc, r0
   455e4:	bx	lr
   455e8:	ldr	r0, [pc, #-1724]	; 44f34 <warn@@Base+0x3764>
   455ec:	add	r0, pc, r0
   455f0:	bx	lr
   455f4:	ldr	r0, [pc, #-1732]	; 44f38 <warn@@Base+0x3768>
   455f8:	add	r0, pc, r0
   455fc:	bx	lr
   45600:	ldr	r0, [pc, #-1740]	; 44f3c <warn@@Base+0x376c>
   45604:	add	r0, pc, r0
   45608:	bx	lr
   4560c:	sub	r0, r0, #3
   45610:	cmp	r0, #250	; 0xfa
   45614:	addls	pc, pc, r0, lsl #2
   45618:	b	462c0 <warn@@Base+0x4af0>
   4561c:	b	45a08 <warn@@Base+0x4238>
   45620:	b	462c0 <warn@@Base+0x4af0>
   45624:	b	462c0 <warn@@Base+0x4af0>
   45628:	b	462b4 <warn@@Base+0x4ae4>
   4562c:	b	462c0 <warn@@Base+0x4af0>
   45630:	b	462a8 <warn@@Base+0x4ad8>
   45634:	b	4629c <warn@@Base+0x4acc>
   45638:	b	46290 <warn@@Base+0x4ac0>
   4563c:	b	46284 <warn@@Base+0x4ab4>
   45640:	b	46278 <warn@@Base+0x4aa8>
   45644:	b	4626c <warn@@Base+0x4a9c>
   45648:	b	46260 <warn@@Base+0x4a90>
   4564c:	b	46254 <warn@@Base+0x4a84>
   45650:	b	46248 <warn@@Base+0x4a78>
   45654:	b	4623c <warn@@Base+0x4a6c>
   45658:	b	46230 <warn@@Base+0x4a60>
   4565c:	b	46224 <warn@@Base+0x4a54>
   45660:	b	46218 <warn@@Base+0x4a48>
   45664:	b	4620c <warn@@Base+0x4a3c>
   45668:	b	46200 <warn@@Base+0x4a30>
   4566c:	b	461f4 <warn@@Base+0x4a24>
   45670:	b	461e8 <warn@@Base+0x4a18>
   45674:	b	461dc <warn@@Base+0x4a0c>
   45678:	b	461d0 <warn@@Base+0x4a00>
   4567c:	b	461c4 <warn@@Base+0x49f4>
   45680:	b	461b8 <warn@@Base+0x49e8>
   45684:	b	461ac <warn@@Base+0x49dc>
   45688:	b	461a0 <warn@@Base+0x49d0>
   4568c:	b	46194 <warn@@Base+0x49c4>
   45690:	b	46188 <warn@@Base+0x49b8>
   45694:	b	4617c <warn@@Base+0x49ac>
   45698:	b	46170 <warn@@Base+0x49a0>
   4569c:	b	46164 <warn@@Base+0x4994>
   456a0:	b	46158 <warn@@Base+0x4988>
   456a4:	b	4614c <warn@@Base+0x497c>
   456a8:	b	46140 <warn@@Base+0x4970>
   456ac:	b	46134 <warn@@Base+0x4964>
   456b0:	b	46128 <warn@@Base+0x4958>
   456b4:	b	4611c <warn@@Base+0x494c>
   456b8:	b	46110 <warn@@Base+0x4940>
   456bc:	b	46104 <warn@@Base+0x4934>
   456c0:	b	460f8 <warn@@Base+0x4928>
   456c4:	b	460ec <warn@@Base+0x491c>
   456c8:	b	460e0 <warn@@Base+0x4910>
   456cc:	b	460d4 <warn@@Base+0x4904>
   456d0:	b	460c8 <warn@@Base+0x48f8>
   456d4:	b	460bc <warn@@Base+0x48ec>
   456d8:	b	460b0 <warn@@Base+0x48e0>
   456dc:	b	460a4 <warn@@Base+0x48d4>
   456e0:	b	46098 <warn@@Base+0x48c8>
   456e4:	b	4608c <warn@@Base+0x48bc>
   456e8:	b	46080 <warn@@Base+0x48b0>
   456ec:	b	46074 <warn@@Base+0x48a4>
   456f0:	b	46068 <warn@@Base+0x4898>
   456f4:	b	4605c <warn@@Base+0x488c>
   456f8:	b	46050 <warn@@Base+0x4880>
   456fc:	b	46044 <warn@@Base+0x4874>
   45700:	b	46038 <warn@@Base+0x4868>
   45704:	b	4602c <warn@@Base+0x485c>
   45708:	b	46020 <warn@@Base+0x4850>
   4570c:	b	46014 <warn@@Base+0x4844>
   45710:	b	46008 <warn@@Base+0x4838>
   45714:	b	45ffc <warn@@Base+0x482c>
   45718:	b	45ff0 <warn@@Base+0x4820>
   4571c:	b	45fe4 <warn@@Base+0x4814>
   45720:	b	45fd8 <warn@@Base+0x4808>
   45724:	b	45fcc <warn@@Base+0x47fc>
   45728:	b	45fc0 <warn@@Base+0x47f0>
   4572c:	b	45fb4 <warn@@Base+0x47e4>
   45730:	b	45fa8 <warn@@Base+0x47d8>
   45734:	b	45f9c <warn@@Base+0x47cc>
   45738:	b	45f90 <warn@@Base+0x47c0>
   4573c:	b	45f84 <warn@@Base+0x47b4>
   45740:	b	45f78 <warn@@Base+0x47a8>
   45744:	b	45f6c <warn@@Base+0x479c>
   45748:	b	45f60 <warn@@Base+0x4790>
   4574c:	b	45f54 <warn@@Base+0x4784>
   45750:	b	45f48 <warn@@Base+0x4778>
   45754:	b	45f3c <warn@@Base+0x476c>
   45758:	b	45f30 <warn@@Base+0x4760>
   4575c:	b	45f24 <warn@@Base+0x4754>
   45760:	b	45f18 <warn@@Base+0x4748>
   45764:	b	45f0c <warn@@Base+0x473c>
   45768:	b	45f00 <warn@@Base+0x4730>
   4576c:	b	45ef4 <warn@@Base+0x4724>
   45770:	b	45ee8 <warn@@Base+0x4718>
   45774:	b	45edc <warn@@Base+0x470c>
   45778:	b	45ed0 <warn@@Base+0x4700>
   4577c:	b	45ec4 <warn@@Base+0x46f4>
   45780:	b	45eb8 <warn@@Base+0x46e8>
   45784:	b	45eac <warn@@Base+0x46dc>
   45788:	b	45ea0 <warn@@Base+0x46d0>
   4578c:	b	45e94 <warn@@Base+0x46c4>
   45790:	b	45e88 <warn@@Base+0x46b8>
   45794:	b	45e7c <warn@@Base+0x46ac>
   45798:	b	45e70 <warn@@Base+0x46a0>
   4579c:	b	45e64 <warn@@Base+0x4694>
   457a0:	b	45e58 <warn@@Base+0x4688>
   457a4:	b	45e4c <warn@@Base+0x467c>
   457a8:	b	45e40 <warn@@Base+0x4670>
   457ac:	b	45e34 <warn@@Base+0x4664>
   457b0:	b	45e28 <warn@@Base+0x4658>
   457b4:	b	45e1c <warn@@Base+0x464c>
   457b8:	b	45e10 <warn@@Base+0x4640>
   457bc:	b	45e04 <warn@@Base+0x4634>
   457c0:	b	45df8 <warn@@Base+0x4628>
   457c4:	b	45dec <warn@@Base+0x461c>
   457c8:	b	45de0 <warn@@Base+0x4610>
   457cc:	b	45dd4 <warn@@Base+0x4604>
   457d0:	b	45dc8 <warn@@Base+0x45f8>
   457d4:	b	45dbc <warn@@Base+0x45ec>
   457d8:	b	45db0 <warn@@Base+0x45e0>
   457dc:	b	45da4 <warn@@Base+0x45d4>
   457e0:	b	45d98 <warn@@Base+0x45c8>
   457e4:	b	45d8c <warn@@Base+0x45bc>
   457e8:	b	45d80 <warn@@Base+0x45b0>
   457ec:	b	45d74 <warn@@Base+0x45a4>
   457f0:	b	45d68 <warn@@Base+0x4598>
   457f4:	b	45d5c <warn@@Base+0x458c>
   457f8:	b	45d50 <warn@@Base+0x4580>
   457fc:	b	45d44 <warn@@Base+0x4574>
   45800:	b	45d38 <warn@@Base+0x4568>
   45804:	b	45d2c <warn@@Base+0x455c>
   45808:	b	45d20 <warn@@Base+0x4550>
   4580c:	b	45d14 <warn@@Base+0x4544>
   45810:	b	45d08 <warn@@Base+0x4538>
   45814:	b	45cfc <warn@@Base+0x452c>
   45818:	b	45cf0 <warn@@Base+0x4520>
   4581c:	b	45ce4 <warn@@Base+0x4514>
   45820:	b	45cd8 <warn@@Base+0x4508>
   45824:	b	45ccc <warn@@Base+0x44fc>
   45828:	b	45cc0 <warn@@Base+0x44f0>
   4582c:	b	45cb4 <warn@@Base+0x44e4>
   45830:	b	45ca8 <warn@@Base+0x44d8>
   45834:	b	45c9c <warn@@Base+0x44cc>
   45838:	b	45c90 <warn@@Base+0x44c0>
   4583c:	b	45c84 <warn@@Base+0x44b4>
   45840:	b	45c78 <warn@@Base+0x44a8>
   45844:	b	45c6c <warn@@Base+0x449c>
   45848:	b	45c60 <warn@@Base+0x4490>
   4584c:	b	45c54 <warn@@Base+0x4484>
   45850:	b	45c48 <warn@@Base+0x4478>
   45854:	b	45c3c <warn@@Base+0x446c>
   45858:	b	45c30 <warn@@Base+0x4460>
   4585c:	b	45c24 <warn@@Base+0x4454>
   45860:	b	45c18 <warn@@Base+0x4448>
   45864:	b	45c0c <warn@@Base+0x443c>
   45868:	b	45c00 <warn@@Base+0x4430>
   4586c:	b	45bf4 <warn@@Base+0x4424>
   45870:	b	45be8 <warn@@Base+0x4418>
   45874:	b	45bdc <warn@@Base+0x440c>
   45878:	b	45bd0 <warn@@Base+0x4400>
   4587c:	b	45bc4 <warn@@Base+0x43f4>
   45880:	b	45bb8 <warn@@Base+0x43e8>
   45884:	b	45bac <warn@@Base+0x43dc>
   45888:	b	45ba0 <warn@@Base+0x43d0>
   4588c:	b	45b94 <warn@@Base+0x43c4>
   45890:	b	45b88 <warn@@Base+0x43b8>
   45894:	b	45b7c <warn@@Base+0x43ac>
   45898:	b	45b70 <warn@@Base+0x43a0>
   4589c:	b	45b64 <warn@@Base+0x4394>
   458a0:	b	45b58 <warn@@Base+0x4388>
   458a4:	b	45b4c <warn@@Base+0x437c>
   458a8:	b	45b40 <warn@@Base+0x4370>
   458ac:	b	45b34 <warn@@Base+0x4364>
   458b0:	b	45b28 <warn@@Base+0x4358>
   458b4:	b	45b1c <warn@@Base+0x434c>
   458b8:	b	462c0 <warn@@Base+0x4af0>
   458bc:	b	462c0 <warn@@Base+0x4af0>
   458c0:	b	462c0 <warn@@Base+0x4af0>
   458c4:	b	462c0 <warn@@Base+0x4af0>
   458c8:	b	462c0 <warn@@Base+0x4af0>
   458cc:	b	462c0 <warn@@Base+0x4af0>
   458d0:	b	462c0 <warn@@Base+0x4af0>
   458d4:	b	462c0 <warn@@Base+0x4af0>
   458d8:	b	462c0 <warn@@Base+0x4af0>
   458dc:	b	462c0 <warn@@Base+0x4af0>
   458e0:	b	462c0 <warn@@Base+0x4af0>
   458e4:	b	462c0 <warn@@Base+0x4af0>
   458e8:	b	462c0 <warn@@Base+0x4af0>
   458ec:	b	462c0 <warn@@Base+0x4af0>
   458f0:	b	462c0 <warn@@Base+0x4af0>
   458f4:	b	462c0 <warn@@Base+0x4af0>
   458f8:	b	462c0 <warn@@Base+0x4af0>
   458fc:	b	462c0 <warn@@Base+0x4af0>
   45900:	b	462c0 <warn@@Base+0x4af0>
   45904:	b	462c0 <warn@@Base+0x4af0>
   45908:	b	462c0 <warn@@Base+0x4af0>
   4590c:	b	462c0 <warn@@Base+0x4af0>
   45910:	b	462c0 <warn@@Base+0x4af0>
   45914:	b	462c0 <warn@@Base+0x4af0>
   45918:	b	462c0 <warn@@Base+0x4af0>
   4591c:	b	462c0 <warn@@Base+0x4af0>
   45920:	b	462c0 <warn@@Base+0x4af0>
   45924:	b	462c0 <warn@@Base+0x4af0>
   45928:	b	462c0 <warn@@Base+0x4af0>
   4592c:	b	462c0 <warn@@Base+0x4af0>
   45930:	b	462c0 <warn@@Base+0x4af0>
   45934:	b	462c0 <warn@@Base+0x4af0>
   45938:	b	462c0 <warn@@Base+0x4af0>
   4593c:	b	462c0 <warn@@Base+0x4af0>
   45940:	b	462c0 <warn@@Base+0x4af0>
   45944:	b	462c0 <warn@@Base+0x4af0>
   45948:	b	462c0 <warn@@Base+0x4af0>
   4594c:	b	462c0 <warn@@Base+0x4af0>
   45950:	b	462c0 <warn@@Base+0x4af0>
   45954:	b	462c0 <warn@@Base+0x4af0>
   45958:	b	462c0 <warn@@Base+0x4af0>
   4595c:	b	462c0 <warn@@Base+0x4af0>
   45960:	b	462c0 <warn@@Base+0x4af0>
   45964:	b	462c0 <warn@@Base+0x4af0>
   45968:	b	462c0 <warn@@Base+0x4af0>
   4596c:	b	462c0 <warn@@Base+0x4af0>
   45970:	b	462c0 <warn@@Base+0x4af0>
   45974:	b	462c0 <warn@@Base+0x4af0>
   45978:	b	462c0 <warn@@Base+0x4af0>
   4597c:	b	462c0 <warn@@Base+0x4af0>
   45980:	b	462c0 <warn@@Base+0x4af0>
   45984:	b	462c0 <warn@@Base+0x4af0>
   45988:	b	462c0 <warn@@Base+0x4af0>
   4598c:	b	462c0 <warn@@Base+0x4af0>
   45990:	b	45b10 <warn@@Base+0x4340>
   45994:	b	45b04 <warn@@Base+0x4334>
   45998:	b	45af8 <warn@@Base+0x4328>
   4599c:	b	45aec <warn@@Base+0x431c>
   459a0:	b	45ae0 <warn@@Base+0x4310>
   459a4:	b	45ad4 <warn@@Base+0x4304>
   459a8:	b	45ac8 <warn@@Base+0x42f8>
   459ac:	b	462c0 <warn@@Base+0x4af0>
   459b0:	b	462c0 <warn@@Base+0x4af0>
   459b4:	b	462c0 <warn@@Base+0x4af0>
   459b8:	b	45abc <warn@@Base+0x42ec>
   459bc:	b	462c0 <warn@@Base+0x4af0>
   459c0:	b	462c0 <warn@@Base+0x4af0>
   459c4:	b	462c0 <warn@@Base+0x4af0>
   459c8:	b	462c0 <warn@@Base+0x4af0>
   459cc:	b	462c0 <warn@@Base+0x4af0>
   459d0:	b	45ab0 <warn@@Base+0x42e0>
   459d4:	b	45aa4 <warn@@Base+0x42d4>
   459d8:	b	45a98 <warn@@Base+0x42c8>
   459dc:	b	45a8c <warn@@Base+0x42bc>
   459e0:	b	45a80 <warn@@Base+0x42b0>
   459e4:	b	45a74 <warn@@Base+0x42a4>
   459e8:	b	45a68 <warn@@Base+0x4298>
   459ec:	b	45a5c <warn@@Base+0x428c>
   459f0:	b	45a50 <warn@@Base+0x4280>
   459f4:	b	45a44 <warn@@Base+0x4274>
   459f8:	b	45a38 <warn@@Base+0x4268>
   459fc:	b	45a2c <warn@@Base+0x425c>
   45a00:	b	45a20 <warn@@Base+0x4250>
   45a04:	b	45a14 <warn@@Base+0x4244>
   45a08:	ldr	r0, [pc, #2232]	; 462c8 <warn@@Base+0x4af8>
   45a0c:	add	r0, pc, r0
   45a10:	bx	lr
   45a14:	ldr	r0, [pc, #2224]	; 462cc <warn@@Base+0x4afc>
   45a18:	add	r0, pc, r0
   45a1c:	bx	lr
   45a20:	ldr	r0, [pc, #2216]	; 462d0 <warn@@Base+0x4b00>
   45a24:	add	r0, pc, r0
   45a28:	bx	lr
   45a2c:	ldr	r0, [pc, #2208]	; 462d4 <warn@@Base+0x4b04>
   45a30:	add	r0, pc, r0
   45a34:	bx	lr
   45a38:	ldr	r0, [pc, #2200]	; 462d8 <warn@@Base+0x4b08>
   45a3c:	add	r0, pc, r0
   45a40:	bx	lr
   45a44:	ldr	r0, [pc, #2192]	; 462dc <warn@@Base+0x4b0c>
   45a48:	add	r0, pc, r0
   45a4c:	bx	lr
   45a50:	ldr	r0, [pc, #2184]	; 462e0 <warn@@Base+0x4b10>
   45a54:	add	r0, pc, r0
   45a58:	bx	lr
   45a5c:	ldr	r0, [pc, #2176]	; 462e4 <warn@@Base+0x4b14>
   45a60:	add	r0, pc, r0
   45a64:	bx	lr
   45a68:	ldr	r0, [pc, #2168]	; 462e8 <warn@@Base+0x4b18>
   45a6c:	add	r0, pc, r0
   45a70:	bx	lr
   45a74:	ldr	r0, [pc, #2160]	; 462ec <warn@@Base+0x4b1c>
   45a78:	add	r0, pc, r0
   45a7c:	bx	lr
   45a80:	ldr	r0, [pc, #2152]	; 462f0 <warn@@Base+0x4b20>
   45a84:	add	r0, pc, r0
   45a88:	bx	lr
   45a8c:	ldr	r0, [pc, #2144]	; 462f4 <warn@@Base+0x4b24>
   45a90:	add	r0, pc, r0
   45a94:	bx	lr
   45a98:	ldr	r0, [pc, #2136]	; 462f8 <warn@@Base+0x4b28>
   45a9c:	add	r0, pc, r0
   45aa0:	bx	lr
   45aa4:	ldr	r0, [pc, #2128]	; 462fc <warn@@Base+0x4b2c>
   45aa8:	add	r0, pc, r0
   45aac:	bx	lr
   45ab0:	ldr	r0, [pc, #2120]	; 46300 <warn@@Base+0x4b30>
   45ab4:	add	r0, pc, r0
   45ab8:	bx	lr
   45abc:	ldr	r0, [pc, #2112]	; 46304 <warn@@Base+0x4b34>
   45ac0:	add	r0, pc, r0
   45ac4:	bx	lr
   45ac8:	ldr	r0, [pc, #2104]	; 46308 <warn@@Base+0x4b38>
   45acc:	add	r0, pc, r0
   45ad0:	bx	lr
   45ad4:	ldr	r0, [pc, #2096]	; 4630c <warn@@Base+0x4b3c>
   45ad8:	add	r0, pc, r0
   45adc:	bx	lr
   45ae0:	ldr	r0, [pc, #2088]	; 46310 <warn@@Base+0x4b40>
   45ae4:	add	r0, pc, r0
   45ae8:	bx	lr
   45aec:	ldr	r0, [pc, #2080]	; 46314 <warn@@Base+0x4b44>
   45af0:	add	r0, pc, r0
   45af4:	bx	lr
   45af8:	ldr	r0, [pc, #2072]	; 46318 <warn@@Base+0x4b48>
   45afc:	add	r0, pc, r0
   45b00:	bx	lr
   45b04:	ldr	r0, [pc, #2064]	; 4631c <warn@@Base+0x4b4c>
   45b08:	add	r0, pc, r0
   45b0c:	bx	lr
   45b10:	ldr	r0, [pc, #2056]	; 46320 <warn@@Base+0x4b50>
   45b14:	add	r0, pc, r0
   45b18:	bx	lr
   45b1c:	ldr	r0, [pc, #2048]	; 46324 <warn@@Base+0x4b54>
   45b20:	add	r0, pc, r0
   45b24:	bx	lr
   45b28:	ldr	r0, [pc, #2040]	; 46328 <warn@@Base+0x4b58>
   45b2c:	add	r0, pc, r0
   45b30:	bx	lr
   45b34:	ldr	r0, [pc, #2032]	; 4632c <warn@@Base+0x4b5c>
   45b38:	add	r0, pc, r0
   45b3c:	bx	lr
   45b40:	ldr	r0, [pc, #2024]	; 46330 <warn@@Base+0x4b60>
   45b44:	add	r0, pc, r0
   45b48:	bx	lr
   45b4c:	ldr	r0, [pc, #2016]	; 46334 <warn@@Base+0x4b64>
   45b50:	add	r0, pc, r0
   45b54:	bx	lr
   45b58:	ldr	r0, [pc, #2008]	; 46338 <warn@@Base+0x4b68>
   45b5c:	add	r0, pc, r0
   45b60:	bx	lr
   45b64:	ldr	r0, [pc, #2000]	; 4633c <warn@@Base+0x4b6c>
   45b68:	add	r0, pc, r0
   45b6c:	bx	lr
   45b70:	ldr	r0, [pc, #1992]	; 46340 <warn@@Base+0x4b70>
   45b74:	add	r0, pc, r0
   45b78:	bx	lr
   45b7c:	ldr	r0, [pc, #1984]	; 46344 <warn@@Base+0x4b74>
   45b80:	add	r0, pc, r0
   45b84:	bx	lr
   45b88:	ldr	r0, [pc, #1976]	; 46348 <warn@@Base+0x4b78>
   45b8c:	add	r0, pc, r0
   45b90:	bx	lr
   45b94:	ldr	r0, [pc, #1968]	; 4634c <warn@@Base+0x4b7c>
   45b98:	add	r0, pc, r0
   45b9c:	bx	lr
   45ba0:	ldr	r0, [pc, #1960]	; 46350 <warn@@Base+0x4b80>
   45ba4:	add	r0, pc, r0
   45ba8:	bx	lr
   45bac:	ldr	r0, [pc, #1952]	; 46354 <warn@@Base+0x4b84>
   45bb0:	add	r0, pc, r0
   45bb4:	bx	lr
   45bb8:	ldr	r0, [pc, #1944]	; 46358 <warn@@Base+0x4b88>
   45bbc:	add	r0, pc, r0
   45bc0:	bx	lr
   45bc4:	ldr	r0, [pc, #1936]	; 4635c <warn@@Base+0x4b8c>
   45bc8:	add	r0, pc, r0
   45bcc:	bx	lr
   45bd0:	ldr	r0, [pc, #1928]	; 46360 <warn@@Base+0x4b90>
   45bd4:	add	r0, pc, r0
   45bd8:	bx	lr
   45bdc:	ldr	r0, [pc, #1920]	; 46364 <warn@@Base+0x4b94>
   45be0:	add	r0, pc, r0
   45be4:	bx	lr
   45be8:	ldr	r0, [pc, #1912]	; 46368 <warn@@Base+0x4b98>
   45bec:	add	r0, pc, r0
   45bf0:	bx	lr
   45bf4:	ldr	r0, [pc, #1904]	; 4636c <warn@@Base+0x4b9c>
   45bf8:	add	r0, pc, r0
   45bfc:	bx	lr
   45c00:	ldr	r0, [pc, #1896]	; 46370 <warn@@Base+0x4ba0>
   45c04:	add	r0, pc, r0
   45c08:	bx	lr
   45c0c:	ldr	r0, [pc, #1888]	; 46374 <warn@@Base+0x4ba4>
   45c10:	add	r0, pc, r0
   45c14:	bx	lr
   45c18:	ldr	r0, [pc, #1880]	; 46378 <warn@@Base+0x4ba8>
   45c1c:	add	r0, pc, r0
   45c20:	bx	lr
   45c24:	ldr	r0, [pc, #1872]	; 4637c <warn@@Base+0x4bac>
   45c28:	add	r0, pc, r0
   45c2c:	bx	lr
   45c30:	ldr	r0, [pc, #1864]	; 46380 <warn@@Base+0x4bb0>
   45c34:	add	r0, pc, r0
   45c38:	bx	lr
   45c3c:	ldr	r0, [pc, #1856]	; 46384 <warn@@Base+0x4bb4>
   45c40:	add	r0, pc, r0
   45c44:	bx	lr
   45c48:	ldr	r0, [pc, #1848]	; 46388 <warn@@Base+0x4bb8>
   45c4c:	add	r0, pc, r0
   45c50:	bx	lr
   45c54:	ldr	r0, [pc, #1840]	; 4638c <warn@@Base+0x4bbc>
   45c58:	add	r0, pc, r0
   45c5c:	bx	lr
   45c60:	ldr	r0, [pc, #1832]	; 46390 <warn@@Base+0x4bc0>
   45c64:	add	r0, pc, r0
   45c68:	bx	lr
   45c6c:	ldr	r0, [pc, #1824]	; 46394 <warn@@Base+0x4bc4>
   45c70:	add	r0, pc, r0
   45c74:	bx	lr
   45c78:	ldr	r0, [pc, #1816]	; 46398 <warn@@Base+0x4bc8>
   45c7c:	add	r0, pc, r0
   45c80:	bx	lr
   45c84:	ldr	r0, [pc, #1808]	; 4639c <warn@@Base+0x4bcc>
   45c88:	add	r0, pc, r0
   45c8c:	bx	lr
   45c90:	ldr	r0, [pc, #1800]	; 463a0 <warn@@Base+0x4bd0>
   45c94:	add	r0, pc, r0
   45c98:	bx	lr
   45c9c:	ldr	r0, [pc, #1792]	; 463a4 <warn@@Base+0x4bd4>
   45ca0:	add	r0, pc, r0
   45ca4:	bx	lr
   45ca8:	ldr	r0, [pc, #1784]	; 463a8 <warn@@Base+0x4bd8>
   45cac:	add	r0, pc, r0
   45cb0:	bx	lr
   45cb4:	ldr	r0, [pc, #1776]	; 463ac <warn@@Base+0x4bdc>
   45cb8:	add	r0, pc, r0
   45cbc:	bx	lr
   45cc0:	ldr	r0, [pc, #1768]	; 463b0 <warn@@Base+0x4be0>
   45cc4:	add	r0, pc, r0
   45cc8:	bx	lr
   45ccc:	ldr	r0, [pc, #1760]	; 463b4 <warn@@Base+0x4be4>
   45cd0:	add	r0, pc, r0
   45cd4:	bx	lr
   45cd8:	ldr	r0, [pc, #1752]	; 463b8 <warn@@Base+0x4be8>
   45cdc:	add	r0, pc, r0
   45ce0:	bx	lr
   45ce4:	ldr	r0, [pc, #1744]	; 463bc <warn@@Base+0x4bec>
   45ce8:	add	r0, pc, r0
   45cec:	bx	lr
   45cf0:	ldr	r0, [pc, #1736]	; 463c0 <warn@@Base+0x4bf0>
   45cf4:	add	r0, pc, r0
   45cf8:	bx	lr
   45cfc:	ldr	r0, [pc, #1728]	; 463c4 <warn@@Base+0x4bf4>
   45d00:	add	r0, pc, r0
   45d04:	bx	lr
   45d08:	ldr	r0, [pc, #1720]	; 463c8 <warn@@Base+0x4bf8>
   45d0c:	add	r0, pc, r0
   45d10:	bx	lr
   45d14:	ldr	r0, [pc, #1712]	; 463cc <warn@@Base+0x4bfc>
   45d18:	add	r0, pc, r0
   45d1c:	bx	lr
   45d20:	ldr	r0, [pc, #1704]	; 463d0 <warn@@Base+0x4c00>
   45d24:	add	r0, pc, r0
   45d28:	bx	lr
   45d2c:	ldr	r0, [pc, #1696]	; 463d4 <warn@@Base+0x4c04>
   45d30:	add	r0, pc, r0
   45d34:	bx	lr
   45d38:	ldr	r0, [pc, #1688]	; 463d8 <warn@@Base+0x4c08>
   45d3c:	add	r0, pc, r0
   45d40:	bx	lr
   45d44:	ldr	r0, [pc, #1680]	; 463dc <warn@@Base+0x4c0c>
   45d48:	add	r0, pc, r0
   45d4c:	bx	lr
   45d50:	ldr	r0, [pc, #1672]	; 463e0 <warn@@Base+0x4c10>
   45d54:	add	r0, pc, r0
   45d58:	bx	lr
   45d5c:	ldr	r0, [pc, #1664]	; 463e4 <warn@@Base+0x4c14>
   45d60:	add	r0, pc, r0
   45d64:	bx	lr
   45d68:	ldr	r0, [pc, #1656]	; 463e8 <warn@@Base+0x4c18>
   45d6c:	add	r0, pc, r0
   45d70:	bx	lr
   45d74:	ldr	r0, [pc, #1648]	; 463ec <warn@@Base+0x4c1c>
   45d78:	add	r0, pc, r0
   45d7c:	bx	lr
   45d80:	ldr	r0, [pc, #1640]	; 463f0 <warn@@Base+0x4c20>
   45d84:	add	r0, pc, r0
   45d88:	bx	lr
   45d8c:	ldr	r0, [pc, #1632]	; 463f4 <warn@@Base+0x4c24>
   45d90:	add	r0, pc, r0
   45d94:	bx	lr
   45d98:	ldr	r0, [pc, #1624]	; 463f8 <warn@@Base+0x4c28>
   45d9c:	add	r0, pc, r0
   45da0:	bx	lr
   45da4:	ldr	r0, [pc, #1616]	; 463fc <warn@@Base+0x4c2c>
   45da8:	add	r0, pc, r0
   45dac:	bx	lr
   45db0:	ldr	r0, [pc, #1608]	; 46400 <warn@@Base+0x4c30>
   45db4:	add	r0, pc, r0
   45db8:	bx	lr
   45dbc:	ldr	r0, [pc, #1600]	; 46404 <warn@@Base+0x4c34>
   45dc0:	add	r0, pc, r0
   45dc4:	bx	lr
   45dc8:	ldr	r0, [pc, #1592]	; 46408 <warn@@Base+0x4c38>
   45dcc:	add	r0, pc, r0
   45dd0:	bx	lr
   45dd4:	ldr	r0, [pc, #1584]	; 4640c <warn@@Base+0x4c3c>
   45dd8:	add	r0, pc, r0
   45ddc:	bx	lr
   45de0:	ldr	r0, [pc, #1576]	; 46410 <warn@@Base+0x4c40>
   45de4:	add	r0, pc, r0
   45de8:	bx	lr
   45dec:	ldr	r0, [pc, #1568]	; 46414 <warn@@Base+0x4c44>
   45df0:	add	r0, pc, r0
   45df4:	bx	lr
   45df8:	ldr	r0, [pc, #1560]	; 46418 <warn@@Base+0x4c48>
   45dfc:	add	r0, pc, r0
   45e00:	bx	lr
   45e04:	ldr	r0, [pc, #1552]	; 4641c <warn@@Base+0x4c4c>
   45e08:	add	r0, pc, r0
   45e0c:	bx	lr
   45e10:	ldr	r0, [pc, #1544]	; 46420 <warn@@Base+0x4c50>
   45e14:	add	r0, pc, r0
   45e18:	bx	lr
   45e1c:	ldr	r0, [pc, #1536]	; 46424 <warn@@Base+0x4c54>
   45e20:	add	r0, pc, r0
   45e24:	bx	lr
   45e28:	ldr	r0, [pc, #1528]	; 46428 <warn@@Base+0x4c58>
   45e2c:	add	r0, pc, r0
   45e30:	bx	lr
   45e34:	ldr	r0, [pc, #1520]	; 4642c <warn@@Base+0x4c5c>
   45e38:	add	r0, pc, r0
   45e3c:	bx	lr
   45e40:	ldr	r0, [pc, #1512]	; 46430 <warn@@Base+0x4c60>
   45e44:	add	r0, pc, r0
   45e48:	bx	lr
   45e4c:	ldr	r0, [pc, #1504]	; 46434 <warn@@Base+0x4c64>
   45e50:	add	r0, pc, r0
   45e54:	bx	lr
   45e58:	ldr	r0, [pc, #1496]	; 46438 <warn@@Base+0x4c68>
   45e5c:	add	r0, pc, r0
   45e60:	bx	lr
   45e64:	ldr	r0, [pc, #1488]	; 4643c <warn@@Base+0x4c6c>
   45e68:	add	r0, pc, r0
   45e6c:	bx	lr
   45e70:	ldr	r0, [pc, #1480]	; 46440 <warn@@Base+0x4c70>
   45e74:	add	r0, pc, r0
   45e78:	bx	lr
   45e7c:	ldr	r0, [pc, #1472]	; 46444 <warn@@Base+0x4c74>
   45e80:	add	r0, pc, r0
   45e84:	bx	lr
   45e88:	ldr	r0, [pc, #1464]	; 46448 <warn@@Base+0x4c78>
   45e8c:	add	r0, pc, r0
   45e90:	bx	lr
   45e94:	ldr	r0, [pc, #1456]	; 4644c <warn@@Base+0x4c7c>
   45e98:	add	r0, pc, r0
   45e9c:	bx	lr
   45ea0:	ldr	r0, [pc, #1448]	; 46450 <warn@@Base+0x4c80>
   45ea4:	add	r0, pc, r0
   45ea8:	bx	lr
   45eac:	ldr	r0, [pc, #1440]	; 46454 <warn@@Base+0x4c84>
   45eb0:	add	r0, pc, r0
   45eb4:	bx	lr
   45eb8:	ldr	r0, [pc, #1432]	; 46458 <warn@@Base+0x4c88>
   45ebc:	add	r0, pc, r0
   45ec0:	bx	lr
   45ec4:	ldr	r0, [pc, #1424]	; 4645c <warn@@Base+0x4c8c>
   45ec8:	add	r0, pc, r0
   45ecc:	bx	lr
   45ed0:	ldr	r0, [pc, #1416]	; 46460 <warn@@Base+0x4c90>
   45ed4:	add	r0, pc, r0
   45ed8:	bx	lr
   45edc:	ldr	r0, [pc, #1408]	; 46464 <warn@@Base+0x4c94>
   45ee0:	add	r0, pc, r0
   45ee4:	bx	lr
   45ee8:	ldr	r0, [pc, #1400]	; 46468 <warn@@Base+0x4c98>
   45eec:	add	r0, pc, r0
   45ef0:	bx	lr
   45ef4:	ldr	r0, [pc, #1392]	; 4646c <warn@@Base+0x4c9c>
   45ef8:	add	r0, pc, r0
   45efc:	bx	lr
   45f00:	ldr	r0, [pc, #1384]	; 46470 <warn@@Base+0x4ca0>
   45f04:	add	r0, pc, r0
   45f08:	bx	lr
   45f0c:	ldr	r0, [pc, #1376]	; 46474 <warn@@Base+0x4ca4>
   45f10:	add	r0, pc, r0
   45f14:	bx	lr
   45f18:	ldr	r0, [pc, #1368]	; 46478 <warn@@Base+0x4ca8>
   45f1c:	add	r0, pc, r0
   45f20:	bx	lr
   45f24:	ldr	r0, [pc, #1360]	; 4647c <warn@@Base+0x4cac>
   45f28:	add	r0, pc, r0
   45f2c:	bx	lr
   45f30:	ldr	r0, [pc, #1352]	; 46480 <warn@@Base+0x4cb0>
   45f34:	add	r0, pc, r0
   45f38:	bx	lr
   45f3c:	ldr	r0, [pc, #1344]	; 46484 <warn@@Base+0x4cb4>
   45f40:	add	r0, pc, r0
   45f44:	bx	lr
   45f48:	ldr	r0, [pc, #1336]	; 46488 <warn@@Base+0x4cb8>
   45f4c:	add	r0, pc, r0
   45f50:	bx	lr
   45f54:	ldr	r0, [pc, #1328]	; 4648c <warn@@Base+0x4cbc>
   45f58:	add	r0, pc, r0
   45f5c:	bx	lr
   45f60:	ldr	r0, [pc, #1320]	; 46490 <warn@@Base+0x4cc0>
   45f64:	add	r0, pc, r0
   45f68:	bx	lr
   45f6c:	ldr	r0, [pc, #1312]	; 46494 <warn@@Base+0x4cc4>
   45f70:	add	r0, pc, r0
   45f74:	bx	lr
   45f78:	ldr	r0, [pc, #1304]	; 46498 <warn@@Base+0x4cc8>
   45f7c:	add	r0, pc, r0
   45f80:	bx	lr
   45f84:	ldr	r0, [pc, #1296]	; 4649c <warn@@Base+0x4ccc>
   45f88:	add	r0, pc, r0
   45f8c:	bx	lr
   45f90:	ldr	r0, [pc, #1288]	; 464a0 <warn@@Base+0x4cd0>
   45f94:	add	r0, pc, r0
   45f98:	bx	lr
   45f9c:	ldr	r0, [pc, #1280]	; 464a4 <warn@@Base+0x4cd4>
   45fa0:	add	r0, pc, r0
   45fa4:	bx	lr
   45fa8:	ldr	r0, [pc, #1272]	; 464a8 <warn@@Base+0x4cd8>
   45fac:	add	r0, pc, r0
   45fb0:	bx	lr
   45fb4:	ldr	r0, [pc, #1264]	; 464ac <warn@@Base+0x4cdc>
   45fb8:	add	r0, pc, r0
   45fbc:	bx	lr
   45fc0:	ldr	r0, [pc, #1256]	; 464b0 <warn@@Base+0x4ce0>
   45fc4:	add	r0, pc, r0
   45fc8:	bx	lr
   45fcc:	ldr	r0, [pc, #1248]	; 464b4 <warn@@Base+0x4ce4>
   45fd0:	add	r0, pc, r0
   45fd4:	bx	lr
   45fd8:	ldr	r0, [pc, #1240]	; 464b8 <warn@@Base+0x4ce8>
   45fdc:	add	r0, pc, r0
   45fe0:	bx	lr
   45fe4:	ldr	r0, [pc, #1232]	; 464bc <warn@@Base+0x4cec>
   45fe8:	add	r0, pc, r0
   45fec:	bx	lr
   45ff0:	ldr	r0, [pc, #1224]	; 464c0 <warn@@Base+0x4cf0>
   45ff4:	add	r0, pc, r0
   45ff8:	bx	lr
   45ffc:	ldr	r0, [pc, #1216]	; 464c4 <warn@@Base+0x4cf4>
   46000:	add	r0, pc, r0
   46004:	bx	lr
   46008:	ldr	r0, [pc, #1208]	; 464c8 <warn@@Base+0x4cf8>
   4600c:	add	r0, pc, r0
   46010:	bx	lr
   46014:	ldr	r0, [pc, #1200]	; 464cc <warn@@Base+0x4cfc>
   46018:	add	r0, pc, r0
   4601c:	bx	lr
   46020:	ldr	r0, [pc, #1192]	; 464d0 <warn@@Base+0x4d00>
   46024:	add	r0, pc, r0
   46028:	bx	lr
   4602c:	ldr	r0, [pc, #1184]	; 464d4 <warn@@Base+0x4d04>
   46030:	add	r0, pc, r0
   46034:	bx	lr
   46038:	ldr	r0, [pc, #1176]	; 464d8 <warn@@Base+0x4d08>
   4603c:	add	r0, pc, r0
   46040:	bx	lr
   46044:	ldr	r0, [pc, #1168]	; 464dc <warn@@Base+0x4d0c>
   46048:	add	r0, pc, r0
   4604c:	bx	lr
   46050:	ldr	r0, [pc, #1160]	; 464e0 <warn@@Base+0x4d10>
   46054:	add	r0, pc, r0
   46058:	bx	lr
   4605c:	ldr	r0, [pc, #1152]	; 464e4 <warn@@Base+0x4d14>
   46060:	add	r0, pc, r0
   46064:	bx	lr
   46068:	ldr	r0, [pc, #1144]	; 464e8 <warn@@Base+0x4d18>
   4606c:	add	r0, pc, r0
   46070:	bx	lr
   46074:	ldr	r0, [pc, #1136]	; 464ec <warn@@Base+0x4d1c>
   46078:	add	r0, pc, r0
   4607c:	bx	lr
   46080:	ldr	r0, [pc, #1128]	; 464f0 <warn@@Base+0x4d20>
   46084:	add	r0, pc, r0
   46088:	bx	lr
   4608c:	ldr	r0, [pc, #1120]	; 464f4 <warn@@Base+0x4d24>
   46090:	add	r0, pc, r0
   46094:	bx	lr
   46098:	ldr	r0, [pc, #1112]	; 464f8 <warn@@Base+0x4d28>
   4609c:	add	r0, pc, r0
   460a0:	bx	lr
   460a4:	ldr	r0, [pc, #1104]	; 464fc <warn@@Base+0x4d2c>
   460a8:	add	r0, pc, r0
   460ac:	bx	lr
   460b0:	ldr	r0, [pc, #1096]	; 46500 <warn@@Base+0x4d30>
   460b4:	add	r0, pc, r0
   460b8:	bx	lr
   460bc:	ldr	r0, [pc, #1088]	; 46504 <warn@@Base+0x4d34>
   460c0:	add	r0, pc, r0
   460c4:	bx	lr
   460c8:	ldr	r0, [pc, #1080]	; 46508 <warn@@Base+0x4d38>
   460cc:	add	r0, pc, r0
   460d0:	bx	lr
   460d4:	ldr	r0, [pc, #1072]	; 4650c <warn@@Base+0x4d3c>
   460d8:	add	r0, pc, r0
   460dc:	bx	lr
   460e0:	ldr	r0, [pc, #1064]	; 46510 <warn@@Base+0x4d40>
   460e4:	add	r0, pc, r0
   460e8:	bx	lr
   460ec:	ldr	r0, [pc, #1056]	; 46514 <warn@@Base+0x4d44>
   460f0:	add	r0, pc, r0
   460f4:	bx	lr
   460f8:	ldr	r0, [pc, #1048]	; 46518 <warn@@Base+0x4d48>
   460fc:	add	r0, pc, r0
   46100:	bx	lr
   46104:	ldr	r0, [pc, #1040]	; 4651c <warn@@Base+0x4d4c>
   46108:	add	r0, pc, r0
   4610c:	bx	lr
   46110:	ldr	r0, [pc, #1032]	; 46520 <warn@@Base+0x4d50>
   46114:	add	r0, pc, r0
   46118:	bx	lr
   4611c:	ldr	r0, [pc, #1024]	; 46524 <warn@@Base+0x4d54>
   46120:	add	r0, pc, r0
   46124:	bx	lr
   46128:	ldr	r0, [pc, #1016]	; 46528 <warn@@Base+0x4d58>
   4612c:	add	r0, pc, r0
   46130:	bx	lr
   46134:	ldr	r0, [pc, #1008]	; 4652c <warn@@Base+0x4d5c>
   46138:	add	r0, pc, r0
   4613c:	bx	lr
   46140:	ldr	r0, [pc, #1000]	; 46530 <warn@@Base+0x4d60>
   46144:	add	r0, pc, r0
   46148:	bx	lr
   4614c:	ldr	r0, [pc, #992]	; 46534 <warn@@Base+0x4d64>
   46150:	add	r0, pc, r0
   46154:	bx	lr
   46158:	ldr	r0, [pc, #984]	; 46538 <warn@@Base+0x4d68>
   4615c:	add	r0, pc, r0
   46160:	bx	lr
   46164:	ldr	r0, [pc, #976]	; 4653c <warn@@Base+0x4d6c>
   46168:	add	r0, pc, r0
   4616c:	bx	lr
   46170:	ldr	r0, [pc, #968]	; 46540 <warn@@Base+0x4d70>
   46174:	add	r0, pc, r0
   46178:	bx	lr
   4617c:	ldr	r0, [pc, #960]	; 46544 <warn@@Base+0x4d74>
   46180:	add	r0, pc, r0
   46184:	bx	lr
   46188:	ldr	r0, [pc, #952]	; 46548 <warn@@Base+0x4d78>
   4618c:	add	r0, pc, r0
   46190:	bx	lr
   46194:	ldr	r0, [pc, #944]	; 4654c <warn@@Base+0x4d7c>
   46198:	add	r0, pc, r0
   4619c:	bx	lr
   461a0:	ldr	r0, [pc, #936]	; 46550 <warn@@Base+0x4d80>
   461a4:	add	r0, pc, r0
   461a8:	bx	lr
   461ac:	ldr	r0, [pc, #928]	; 46554 <warn@@Base+0x4d84>
   461b0:	add	r0, pc, r0
   461b4:	bx	lr
   461b8:	ldr	r0, [pc, #920]	; 46558 <warn@@Base+0x4d88>
   461bc:	add	r0, pc, r0
   461c0:	bx	lr
   461c4:	ldr	r0, [pc, #912]	; 4655c <warn@@Base+0x4d8c>
   461c8:	add	r0, pc, r0
   461cc:	bx	lr
   461d0:	ldr	r0, [pc, #904]	; 46560 <warn@@Base+0x4d90>
   461d4:	add	r0, pc, r0
   461d8:	bx	lr
   461dc:	ldr	r0, [pc, #896]	; 46564 <warn@@Base+0x4d94>
   461e0:	add	r0, pc, r0
   461e4:	bx	lr
   461e8:	ldr	r0, [pc, #888]	; 46568 <warn@@Base+0x4d98>
   461ec:	add	r0, pc, r0
   461f0:	bx	lr
   461f4:	ldr	r0, [pc, #880]	; 4656c <warn@@Base+0x4d9c>
   461f8:	add	r0, pc, r0
   461fc:	bx	lr
   46200:	ldr	r0, [pc, #872]	; 46570 <warn@@Base+0x4da0>
   46204:	add	r0, pc, r0
   46208:	bx	lr
   4620c:	ldr	r0, [pc, #864]	; 46574 <warn@@Base+0x4da4>
   46210:	add	r0, pc, r0
   46214:	bx	lr
   46218:	ldr	r0, [pc, #856]	; 46578 <warn@@Base+0x4da8>
   4621c:	add	r0, pc, r0
   46220:	bx	lr
   46224:	ldr	r0, [pc, #848]	; 4657c <warn@@Base+0x4dac>
   46228:	add	r0, pc, r0
   4622c:	bx	lr
   46230:	ldr	r0, [pc, #840]	; 46580 <warn@@Base+0x4db0>
   46234:	add	r0, pc, r0
   46238:	bx	lr
   4623c:	ldr	r0, [pc, #832]	; 46584 <warn@@Base+0x4db4>
   46240:	add	r0, pc, r0
   46244:	bx	lr
   46248:	ldr	r0, [pc, #824]	; 46588 <warn@@Base+0x4db8>
   4624c:	add	r0, pc, r0
   46250:	bx	lr
   46254:	ldr	r0, [pc, #816]	; 4658c <warn@@Base+0x4dbc>
   46258:	add	r0, pc, r0
   4625c:	bx	lr
   46260:	ldr	r0, [pc, #808]	; 46590 <warn@@Base+0x4dc0>
   46264:	add	r0, pc, r0
   46268:	bx	lr
   4626c:	ldr	r0, [pc, #800]	; 46594 <warn@@Base+0x4dc4>
   46270:	add	r0, pc, r0
   46274:	bx	lr
   46278:	ldr	r0, [pc, #792]	; 46598 <warn@@Base+0x4dc8>
   4627c:	add	r0, pc, r0
   46280:	bx	lr
   46284:	ldr	r0, [pc, #784]	; 4659c <warn@@Base+0x4dcc>
   46288:	add	r0, pc, r0
   4628c:	bx	lr
   46290:	ldr	r0, [pc, #776]	; 465a0 <warn@@Base+0x4dd0>
   46294:	add	r0, pc, r0
   46298:	bx	lr
   4629c:	ldr	r0, [pc, #768]	; 465a4 <warn@@Base+0x4dd4>
   462a0:	add	r0, pc, r0
   462a4:	bx	lr
   462a8:	ldr	r0, [pc, #760]	; 465a8 <warn@@Base+0x4dd8>
   462ac:	add	r0, pc, r0
   462b0:	bx	lr
   462b4:	ldr	r0, [pc, #752]	; 465ac <warn@@Base+0x4ddc>
   462b8:	add	r0, pc, r0
   462bc:	bx	lr
   462c0:	mov	r0, #0
   462c4:	bx	lr
   462c8:	andeq	lr, r0, r8, lsr #25
   462cc:	muleq	r0, r4, r3
   462d0:	andeq	pc, r0, r0, ror r3	; <UNPREDICTABLE>
   462d4:	andeq	pc, r0, ip, asr #6
   462d8:	andeq	pc, r0, r8, lsr #6
   462dc:	andeq	r5, r0, r8, lsl #24
   462e0:	ldrdeq	r6, [r0], -ip
   462e4:	andeq	r5, r0, r8, asr #23
   462e8:	muleq	r0, r4, fp
   462ec:	andeq	r5, r0, ip, asr fp
   462f0:	andeq	r5, r0, r4, lsr #22
   462f4:	andeq	r5, r0, ip, ror #21
   462f8:			; <UNDEFINED> instruction: 0x00005ab0
   462fc:	andeq	pc, r0, r4, lsr #5
   46300:	andeq	r6, r0, r4, lsl r0
   46304:	andeq	pc, r0, r8, lsl #6
   46308:	andeq	r6, r0, r4, asr r1
   4630c:	andeq	r6, r0, r0, lsr r1
   46310:	andeq	r6, r0, r0, lsl r1
   46314:	strdeq	r6, [r0], -r0
   46318:	ldrdeq	r6, [r0], -r0
   4631c:	strheq	r6, [r0], -r0
   46320:	andeq	pc, r0, ip, lsl r2	; <UNPREDICTABLE>
   46324:	andeq	r5, r0, ip, lsl fp
   46328:	andeq	r5, r0, ip, ror #21
   4632c:	andeq	pc, r0, r4, ror #3
   46330:	andeq	r5, r0, r8, lsr #21
   46334:	andeq	r5, r0, r0, ror sl
   46338:	andeq	r5, r0, r8, lsr sl
   4633c:	andeq	r5, r0, r0, lsl #20
   46340:	muleq	r0, r8, r1
   46344:	andeq	pc, r0, r0, lsl #3
   46348:	andeq	r5, r0, r8, lsr #19
   4634c:	ldrdeq	r5, [r0], -r4
   46350:	ldrdeq	r5, [r0], -ip
   46354:	andeq	pc, r0, r0, asr #2
   46358:	andeq	r5, r0, ip, ror #28
   4635c:	andeq	r5, r0, r8, asr #28
   46360:	andeq	pc, r0, ip, lsl #2
   46364:	strdeq	pc, [r0], -r4
   46368:	ldrdeq	pc, [r0], -ip
   4636c:	muleq	r0, ip, sp
   46370:	andeq	r5, r0, r4, lsl #27
   46374:	andeq	pc, r0, r4, lsr #1
   46378:	andeq	pc, r0, r4, lsl #1
   4637c:	andeq	pc, r0, ip, rrx
   46380:	andeq	pc, r0, r4, asr r0	; <UNPREDICTABLE>
   46384:	andeq	pc, r0, ip, lsr r0	; <UNPREDICTABLE>
   46388:	andeq	pc, r0, r4, lsr #32
   4638c:	andeq	pc, r0, r8
   46390:	andeq	lr, r0, ip, ror #31
   46394:	ldrdeq	lr, [r0], -r0
   46398:			; <UNDEFINED> instruction: 0x0000efb4
   4639c:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   463a0:	andeq	lr, r0, ip, ror pc
   463a4:	andeq	lr, r0, r0, ror #30
   463a8:	andeq	lr, r0, r4, asr #30
   463ac:	andeq	lr, r0, r8, lsr #30
   463b0:	andeq	lr, r0, ip, lsl #30
   463b4:	strdeq	lr, [r0], -r0
   463b8:	ldrdeq	lr, [r0], -r4
   463bc:			; <UNDEFINED> instruction: 0x0000eeb8
   463c0:	muleq	r0, ip, lr
   463c4:	andeq	lr, r0, r0, lsl #29
   463c8:	andeq	lr, r0, r4, ror #28
   463cc:	andeq	lr, r0, r8, asr #28
   463d0:	andeq	lr, r0, ip, lsr #28
   463d4:	andeq	lr, r0, r0, lsl lr
   463d8:	strdeq	lr, [r0], -r4
   463dc:	ldrdeq	lr, [r0], -r8
   463e0:			; <UNDEFINED> instruction: 0x0000edbc
   463e4:	andeq	lr, r0, r4, lsr #27
   463e8:	andeq	lr, r0, ip, lsl #27
   463ec:	andeq	lr, r0, r4, ror sp
   463f0:	andeq	lr, r0, ip, asr sp
   463f4:	andeq	lr, r0, r4, asr #26
   463f8:	andeq	lr, r0, ip, lsr #26
   463fc:	andeq	lr, r0, r4, lsl sp
   46400:	strdeq	lr, [r0], -ip
   46404:	andeq	lr, r0, r4, ror #25
   46408:	andeq	lr, r0, ip, asr #25
   4640c:			; <UNDEFINED> instruction: 0x0000ecb4
   46410:	muleq	r0, ip, ip
   46414:	andeq	lr, r0, r4, lsl #25
   46418:	andeq	lr, r0, ip, ror #24
   4641c:	andeq	lr, r0, r4, asr ip
   46420:	andeq	lr, r0, ip, lsr ip
   46424:	andeq	lr, r0, r4, lsr #24
   46428:	andeq	lr, r0, ip, lsl #24
   4642c:	strdeq	lr, [r0], -r4
   46430:	ldrdeq	lr, [r0], -ip
   46434:	andeq	lr, r0, r4, asr #23
   46438:	andeq	lr, r0, ip, lsr #23
   4643c:	muleq	r0, r4, fp
   46440:	andeq	lr, r0, ip, ror fp
   46444:	andeq	lr, r0, r4, ror #22
   46448:	andeq	lr, r0, ip, asr #22
   4644c:	andeq	lr, r0, r4, lsr fp
   46450:	andeq	lr, r0, ip, lsl fp
   46454:	andeq	lr, r0, r4, lsl #22
   46458:	andeq	lr, r0, ip, ror #21
   4645c:	ldrdeq	lr, [r0], -r4
   46460:			; <UNDEFINED> instruction: 0x0000eabc
   46464:	andeq	lr, r0, r4, lsr #21
   46468:	andeq	lr, r0, ip, lsl #21
   4646c:	andeq	lr, r0, r4, ror sl
   46470:	andeq	lr, r0, ip, asr sl
   46474:	andeq	lr, r0, r4, asr #20
   46478:	andeq	lr, r0, ip, lsr #20
   4647c:	andeq	lr, r0, r4, lsl sl
   46480:	strdeq	lr, [r0], -ip
   46484:	andeq	lr, r0, r4, ror #19
   46488:	andeq	lr, r0, ip, asr #19
   4648c:			; <UNDEFINED> instruction: 0x0000e9b4
   46490:	muleq	r0, ip, r9
   46494:	andeq	lr, r0, r4, lsl #19
   46498:	andeq	lr, r0, ip, ror #18
   4649c:	andeq	lr, r0, r4, asr r9
   464a0:	andeq	lr, r0, ip, lsr r9
   464a4:	andeq	lr, r0, r4, lsr #18
   464a8:	andeq	lr, r0, ip, lsl #18
   464ac:	strdeq	lr, [r0], -r4
   464b0:	ldrdeq	lr, [r0], -ip
   464b4:	andeq	lr, r0, r4, asr #17
   464b8:	andeq	lr, r0, ip, lsr #17
   464bc:	muleq	r0, r4, r8
   464c0:	andeq	lr, r0, ip, ror r8
   464c4:	andeq	lr, r0, r4, ror #16
   464c8:	andeq	lr, r0, ip, asr #16
   464cc:	andeq	lr, r0, r4, lsr r8
   464d0:	andeq	lr, r0, ip, lsl r8
   464d4:	andeq	lr, r0, r4, lsl #16
   464d8:	andeq	lr, r0, ip, ror #15
   464dc:	ldrdeq	lr, [r0], -r4
   464e0:			; <UNDEFINED> instruction: 0x0000e7bc
   464e4:	andeq	lr, r0, r4, lsr #15
   464e8:	andeq	lr, r0, ip, lsl #15
   464ec:	andeq	lr, r0, r4, ror r7
   464f0:	andeq	lr, r0, ip, asr r7
   464f4:	andeq	lr, r0, r4, asr #14
   464f8:	andeq	lr, r0, ip, lsr #14
   464fc:	andeq	lr, r0, r4, lsl r7
   46500:	strdeq	lr, [r0], -ip
   46504:	andeq	lr, r0, r4, ror #13
   46508:	andeq	lr, r0, ip, asr #13
   4650c:			; <UNDEFINED> instruction: 0x0000e6b4
   46510:	ldrdeq	r5, [r0], -r4
   46514:			; <UNDEFINED> instruction: 0x000057bc
   46518:	andeq	r5, r0, r4, lsr #15
   4651c:	andeq	r5, r0, ip, lsl #15
   46520:	andeq	r5, r0, r4, ror r7
   46524:	andeq	r5, r0, ip, asr r7
   46528:	andeq	lr, r0, r4, asr r6
   4652c:	andeq	r5, r0, r8, lsr #14
   46530:	andeq	r5, r0, r0, lsl r7
   46534:	strdeq	r5, [r0], -r8
   46538:	andeq	r5, r0, r0, ror #13
   4653c:	andeq	lr, r0, r4, lsl #12
   46540:	andeq	r5, r0, r4, lsr #13
   46544:	andeq	r5, r0, ip, lsl #13
   46548:	andeq	r5, r0, r4, ror r6
   4654c:	andeq	r5, r0, ip, asr r6
   46550:	andeq	r5, r0, r4, asr #12
   46554:	andeq	r5, r0, ip, lsr #12
   46558:	andeq	r5, r0, r4, lsl r6
   4655c:	strdeq	r5, [r0], -ip
   46560:	andeq	r5, r0, r4, ror #11
   46564:	andeq	r5, r0, ip, asr #11
   46568:			; <UNDEFINED> instruction: 0x000055b0
   4656c:	muleq	r0, r8, r5
   46570:	andeq	r5, r0, r0, lsl #11
   46574:	andeq	lr, r0, r0, asr r5
   46578:	andeq	r5, r0, ip, asr #10
   4657c:	andeq	r5, r0, r4, lsr r5
   46580:	andeq	r5, r0, ip, lsl r5
   46584:	andeq	lr, r0, r0, lsl r5
   46588:	strdeq	lr, [r0], -r4
   4658c:	ldrdeq	lr, [r0], -r8
   46590:			; <UNDEFINED> instruction: 0x0000e4bc
   46594:	andeq	lr, r0, r0, lsr #9
   46598:	andeq	lr, r0, r4, lsl #9
   4659c:	andeq	lr, r0, r8, ror #8
   465a0:	andeq	lr, r0, ip, asr #8
   465a4:	andeq	lr, r0, r0, lsr r4
   465a8:	andeq	lr, r0, r4, lsl r4
   465ac:	andeq	r5, r0, r0, asr #7
   465b0:	cmp	r0, #144	; 0x90
   465b4:	addls	pc, pc, r0, lsl #2
   465b8:	b	469a4 <warn@@Base+0x51d4>
   465bc:	b	46800 <warn@@Base+0x5030>
   465c0:	b	46998 <warn@@Base+0x51c8>
   465c4:	b	4698c <warn@@Base+0x51bc>
   465c8:	b	46980 <warn@@Base+0x51b0>
   465cc:	b	46974 <warn@@Base+0x51a4>
   465d0:	b	46968 <warn@@Base+0x5198>
   465d4:	b	4695c <warn@@Base+0x518c>
   465d8:	b	46950 <warn@@Base+0x5180>
   465dc:	b	46944 <warn@@Base+0x5174>
   465e0:	b	46938 <warn@@Base+0x5168>
   465e4:	b	4692c <warn@@Base+0x515c>
   465e8:	b	46920 <warn@@Base+0x5150>
   465ec:	b	46914 <warn@@Base+0x5144>
   465f0:	b	46908 <warn@@Base+0x5138>
   465f4:	b	468fc <warn@@Base+0x512c>
   465f8:	b	468f0 <warn@@Base+0x5120>
   465fc:	b	468e4 <warn@@Base+0x5114>
   46600:	b	468d8 <warn@@Base+0x5108>
   46604:	b	468cc <warn@@Base+0x50fc>
   46608:	b	469a4 <warn@@Base+0x51d4>
   4660c:	b	469a4 <warn@@Base+0x51d4>
   46610:	b	469a4 <warn@@Base+0x51d4>
   46614:	b	469a4 <warn@@Base+0x51d4>
   46618:	b	469a4 <warn@@Base+0x51d4>
   4661c:	b	469a4 <warn@@Base+0x51d4>
   46620:	b	469a4 <warn@@Base+0x51d4>
   46624:	b	469a4 <warn@@Base+0x51d4>
   46628:	b	469a4 <warn@@Base+0x51d4>
   4662c:	b	469a4 <warn@@Base+0x51d4>
   46630:	b	469a4 <warn@@Base+0x51d4>
   46634:	b	469a4 <warn@@Base+0x51d4>
   46638:	b	469a4 <warn@@Base+0x51d4>
   4663c:	b	469a4 <warn@@Base+0x51d4>
   46640:	b	469a4 <warn@@Base+0x51d4>
   46644:	b	469a4 <warn@@Base+0x51d4>
   46648:	b	469a4 <warn@@Base+0x51d4>
   4664c:	b	469a4 <warn@@Base+0x51d4>
   46650:	b	469a4 <warn@@Base+0x51d4>
   46654:	b	469a4 <warn@@Base+0x51d4>
   46658:	b	469a4 <warn@@Base+0x51d4>
   4665c:	b	469a4 <warn@@Base+0x51d4>
   46660:	b	469a4 <warn@@Base+0x51d4>
   46664:	b	469a4 <warn@@Base+0x51d4>
   46668:	b	469a4 <warn@@Base+0x51d4>
   4666c:	b	469a4 <warn@@Base+0x51d4>
   46670:	b	469a4 <warn@@Base+0x51d4>
   46674:	b	469a4 <warn@@Base+0x51d4>
   46678:	b	469a4 <warn@@Base+0x51d4>
   4667c:	b	469a4 <warn@@Base+0x51d4>
   46680:	b	469a4 <warn@@Base+0x51d4>
   46684:	b	469a4 <warn@@Base+0x51d4>
   46688:	b	469a4 <warn@@Base+0x51d4>
   4668c:	b	469a4 <warn@@Base+0x51d4>
   46690:	b	469a4 <warn@@Base+0x51d4>
   46694:	b	469a4 <warn@@Base+0x51d4>
   46698:	b	469a4 <warn@@Base+0x51d4>
   4669c:	b	469a4 <warn@@Base+0x51d4>
   466a0:	b	469a4 <warn@@Base+0x51d4>
   466a4:	b	469a4 <warn@@Base+0x51d4>
   466a8:	b	469a4 <warn@@Base+0x51d4>
   466ac:	b	469a4 <warn@@Base+0x51d4>
   466b0:	b	469a4 <warn@@Base+0x51d4>
   466b4:	b	469a4 <warn@@Base+0x51d4>
   466b8:	b	469a4 <warn@@Base+0x51d4>
   466bc:	b	469a4 <warn@@Base+0x51d4>
   466c0:	b	469a4 <warn@@Base+0x51d4>
   466c4:	b	469a4 <warn@@Base+0x51d4>
   466c8:	b	469a4 <warn@@Base+0x51d4>
   466cc:	b	469a4 <warn@@Base+0x51d4>
   466d0:	b	469a4 <warn@@Base+0x51d4>
   466d4:	b	469a4 <warn@@Base+0x51d4>
   466d8:	b	469a4 <warn@@Base+0x51d4>
   466dc:	b	469a4 <warn@@Base+0x51d4>
   466e0:	b	469a4 <warn@@Base+0x51d4>
   466e4:	b	469a4 <warn@@Base+0x51d4>
   466e8:	b	469a4 <warn@@Base+0x51d4>
   466ec:	b	469a4 <warn@@Base+0x51d4>
   466f0:	b	469a4 <warn@@Base+0x51d4>
   466f4:	b	469a4 <warn@@Base+0x51d4>
   466f8:	b	469a4 <warn@@Base+0x51d4>
   466fc:	b	469a4 <warn@@Base+0x51d4>
   46700:	b	469a4 <warn@@Base+0x51d4>
   46704:	b	469a4 <warn@@Base+0x51d4>
   46708:	b	469a4 <warn@@Base+0x51d4>
   4670c:	b	469a4 <warn@@Base+0x51d4>
   46710:	b	469a4 <warn@@Base+0x51d4>
   46714:	b	469a4 <warn@@Base+0x51d4>
   46718:	b	469a4 <warn@@Base+0x51d4>
   4671c:	b	469a4 <warn@@Base+0x51d4>
   46720:	b	469a4 <warn@@Base+0x51d4>
   46724:	b	469a4 <warn@@Base+0x51d4>
   46728:	b	469a4 <warn@@Base+0x51d4>
   4672c:	b	469a4 <warn@@Base+0x51d4>
   46730:	b	469a4 <warn@@Base+0x51d4>
   46734:	b	469a4 <warn@@Base+0x51d4>
   46738:	b	469a4 <warn@@Base+0x51d4>
   4673c:	b	469a4 <warn@@Base+0x51d4>
   46740:	b	469a4 <warn@@Base+0x51d4>
   46744:	b	469a4 <warn@@Base+0x51d4>
   46748:	b	469a4 <warn@@Base+0x51d4>
   4674c:	b	469a4 <warn@@Base+0x51d4>
   46750:	b	469a4 <warn@@Base+0x51d4>
   46754:	b	469a4 <warn@@Base+0x51d4>
   46758:	b	469a4 <warn@@Base+0x51d4>
   4675c:	b	469a4 <warn@@Base+0x51d4>
   46760:	b	469a4 <warn@@Base+0x51d4>
   46764:	b	469a4 <warn@@Base+0x51d4>
   46768:	b	469a4 <warn@@Base+0x51d4>
   4676c:	b	469a4 <warn@@Base+0x51d4>
   46770:	b	469a4 <warn@@Base+0x51d4>
   46774:	b	469a4 <warn@@Base+0x51d4>
   46778:	b	469a4 <warn@@Base+0x51d4>
   4677c:	b	469a4 <warn@@Base+0x51d4>
   46780:	b	469a4 <warn@@Base+0x51d4>
   46784:	b	469a4 <warn@@Base+0x51d4>
   46788:	b	469a4 <warn@@Base+0x51d4>
   4678c:	b	469a4 <warn@@Base+0x51d4>
   46790:	b	469a4 <warn@@Base+0x51d4>
   46794:	b	469a4 <warn@@Base+0x51d4>
   46798:	b	469a4 <warn@@Base+0x51d4>
   4679c:	b	469a4 <warn@@Base+0x51d4>
   467a0:	b	469a4 <warn@@Base+0x51d4>
   467a4:	b	469a4 <warn@@Base+0x51d4>
   467a8:	b	469a4 <warn@@Base+0x51d4>
   467ac:	b	469a4 <warn@@Base+0x51d4>
   467b0:	b	469a4 <warn@@Base+0x51d4>
   467b4:	b	469a4 <warn@@Base+0x51d4>
   467b8:	b	469a4 <warn@@Base+0x51d4>
   467bc:	b	468c0 <warn@@Base+0x50f0>
   467c0:	b	468b4 <warn@@Base+0x50e4>
   467c4:	b	468a8 <warn@@Base+0x50d8>
   467c8:	b	4689c <warn@@Base+0x50cc>
   467cc:	b	46890 <warn@@Base+0x50c0>
   467d0:	b	46884 <warn@@Base+0x50b4>
   467d4:	b	46878 <warn@@Base+0x50a8>
   467d8:	b	469a4 <warn@@Base+0x51d4>
   467dc:	b	4686c <warn@@Base+0x509c>
   467e0:	b	46860 <warn@@Base+0x5090>
   467e4:	b	46854 <warn@@Base+0x5084>
   467e8:	b	46848 <warn@@Base+0x5078>
   467ec:	b	4683c <warn@@Base+0x506c>
   467f0:	b	46830 <warn@@Base+0x5060>
   467f4:	b	46824 <warn@@Base+0x5054>
   467f8:	b	46818 <warn@@Base+0x5048>
   467fc:	b	4680c <warn@@Base+0x503c>
   46800:	ldr	r0, [pc, #420]	; 469ac <warn@@Base+0x51dc>
   46804:	add	r0, pc, r0
   46808:	bx	lr
   4680c:	ldr	r0, [pc, #412]	; 469b0 <warn@@Base+0x51e0>
   46810:	add	r0, pc, r0
   46814:	bx	lr
   46818:	ldr	r0, [pc, #404]	; 469b4 <warn@@Base+0x51e4>
   4681c:	add	r0, pc, r0
   46820:	bx	lr
   46824:	ldr	r0, [pc, #396]	; 469b8 <warn@@Base+0x51e8>
   46828:	add	r0, pc, r0
   4682c:	bx	lr
   46830:	ldr	r0, [pc, #388]	; 469bc <warn@@Base+0x51ec>
   46834:	add	r0, pc, r0
   46838:	bx	lr
   4683c:	ldr	r0, [pc, #380]	; 469c0 <warn@@Base+0x51f0>
   46840:	add	r0, pc, r0
   46844:	bx	lr
   46848:	ldr	r0, [pc, #372]	; 469c4 <warn@@Base+0x51f4>
   4684c:	add	r0, pc, r0
   46850:	bx	lr
   46854:	ldr	r0, [pc, #364]	; 469c8 <warn@@Base+0x51f8>
   46858:	add	r0, pc, r0
   4685c:	bx	lr
   46860:	ldr	r0, [pc, #356]	; 469cc <warn@@Base+0x51fc>
   46864:	add	r0, pc, r0
   46868:	bx	lr
   4686c:	ldr	r0, [pc, #348]	; 469d0 <warn@@Base+0x5200>
   46870:	add	r0, pc, r0
   46874:	bx	lr
   46878:	ldr	r0, [pc, #340]	; 469d4 <warn@@Base+0x5204>
   4687c:	add	r0, pc, r0
   46880:	bx	lr
   46884:	ldr	r0, [pc, #332]	; 469d8 <warn@@Base+0x5208>
   46888:	add	r0, pc, r0
   4688c:	bx	lr
   46890:	ldr	r0, [pc, #324]	; 469dc <warn@@Base+0x520c>
   46894:	add	r0, pc, r0
   46898:	bx	lr
   4689c:	ldr	r0, [pc, #316]	; 469e0 <warn@@Base+0x5210>
   468a0:	add	r0, pc, r0
   468a4:	bx	lr
   468a8:	ldr	r0, [pc, #308]	; 469e4 <warn@@Base+0x5214>
   468ac:	add	r0, pc, r0
   468b0:	bx	lr
   468b4:	ldr	r0, [pc, #300]	; 469e8 <warn@@Base+0x5218>
   468b8:	add	r0, pc, r0
   468bc:	bx	lr
   468c0:	ldr	r0, [pc, #292]	; 469ec <warn@@Base+0x521c>
   468c4:	add	r0, pc, r0
   468c8:	bx	lr
   468cc:	ldr	r0, [pc, #284]	; 469f0 <warn@@Base+0x5220>
   468d0:	add	r0, pc, r0
   468d4:	bx	lr
   468d8:	ldr	r0, [pc, #276]	; 469f4 <warn@@Base+0x5224>
   468dc:	add	r0, pc, r0
   468e0:	bx	lr
   468e4:	ldr	r0, [pc, #268]	; 469f8 <warn@@Base+0x5228>
   468e8:	add	r0, pc, r0
   468ec:	bx	lr
   468f0:	ldr	r0, [pc, #260]	; 469fc <warn@@Base+0x522c>
   468f4:	add	r0, pc, r0
   468f8:	bx	lr
   468fc:	ldr	r0, [pc, #252]	; 46a00 <warn@@Base+0x5230>
   46900:	add	r0, pc, r0
   46904:	bx	lr
   46908:	ldr	r0, [pc, #244]	; 46a04 <warn@@Base+0x5234>
   4690c:	add	r0, pc, r0
   46910:	bx	lr
   46914:	ldr	r0, [pc, #236]	; 46a08 <warn@@Base+0x5238>
   46918:	add	r0, pc, r0
   4691c:	bx	lr
   46920:	ldr	r0, [pc, #228]	; 46a0c <warn@@Base+0x523c>
   46924:	add	r0, pc, r0
   46928:	bx	lr
   4692c:	ldr	r0, [pc, #220]	; 46a10 <warn@@Base+0x5240>
   46930:	add	r0, pc, r0
   46934:	bx	lr
   46938:	ldr	r0, [pc, #212]	; 46a14 <warn@@Base+0x5244>
   4693c:	add	r0, pc, r0
   46940:	bx	lr
   46944:	ldr	r0, [pc, #204]	; 46a18 <warn@@Base+0x5248>
   46948:	add	r0, pc, r0
   4694c:	bx	lr
   46950:	ldr	r0, [pc, #196]	; 46a1c <warn@@Base+0x524c>
   46954:	add	r0, pc, r0
   46958:	bx	lr
   4695c:	ldr	r0, [pc, #188]	; 46a20 <warn@@Base+0x5250>
   46960:	add	r0, pc, r0
   46964:	bx	lr
   46968:	ldr	r0, [pc, #180]	; 46a24 <warn@@Base+0x5254>
   4696c:	add	r0, pc, r0
   46970:	bx	lr
   46974:	ldr	r0, [pc, #172]	; 46a28 <warn@@Base+0x5258>
   46978:	add	r0, pc, r0
   4697c:	bx	lr
   46980:	ldr	r0, [pc, #164]	; 46a2c <warn@@Base+0x525c>
   46984:	add	r0, pc, r0
   46988:	bx	lr
   4698c:	ldr	r0, [pc, #156]	; 46a30 <warn@@Base+0x5260>
   46990:	add	r0, pc, r0
   46994:	bx	lr
   46998:	ldr	r0, [pc, #148]	; 46a34 <warn@@Base+0x5264>
   4699c:	add	r0, pc, r0
   469a0:	bx	lr
   469a4:	mov	r0, #0
   469a8:	bx	lr
   469ac:	ldrdeq	lr, [r0], -ip
   469b0:	muleq	r0, ip, r8
   469b4:	andeq	lr, r0, r4, ror r8
   469b8:	andeq	lr, r0, ip, asr #16
   469bc:	andeq	lr, r0, r8, lsr #16
   469c0:	andeq	lr, r0, r8, lsl #16
   469c4:	andeq	lr, r0, r4, ror #15
   469c8:			; <UNDEFINED> instruction: 0x0000e7bc
   469cc:	muleq	r0, r8, r7
   469d0:	andeq	lr, r0, r8, ror r7
   469d4:	andeq	lr, r0, ip, asr #14
   469d8:	andeq	lr, r0, r4, lsr #14
   469dc:	andeq	lr, r0, r0, lsl #14
   469e0:	ldrdeq	lr, [r0], -r8
   469e4:			; <UNDEFINED> instruction: 0x0000e6b8
   469e8:	muleq	r0, r0, r6
   469ec:	andeq	lr, r0, r0, ror r6
   469f0:	andeq	lr, r0, r4, asr r6
   469f4:	andeq	lr, r0, ip, lsr r6
   469f8:	andeq	lr, r0, r4, lsr #12
   469fc:	andeq	lr, r0, r0, lsl #12
   46a00:	ldrdeq	lr, [r0], -ip
   46a04:			; <UNDEFINED> instruction: 0x0000e5bc
   46a08:	andeq	lr, r0, r0, lsr #11
   46a0c:	andeq	lr, r0, ip, ror r5
   46a10:	andeq	lr, r0, r8, asr r5
   46a14:	andeq	lr, r0, r4, lsr r5
   46a18:	andeq	lr, r0, r0, lsl r5
   46a1c:	strdeq	lr, [r0], -r4
   46a20:	ldrdeq	lr, [r0], -r4
   46a24:			; <UNDEFINED> instruction: 0x0000e4b8
   46a28:	muleq	r0, ip, r4
   46a2c:	andeq	lr, r0, r8, ror r4
   46a30:	andeq	lr, r0, ip, asr r4
   46a34:	andeq	lr, r0, r0, lsr r7
   46a38:	cmp	r0, #192	; 0xc0
   46a3c:	addls	pc, pc, r0, lsl #2
   46a40:	b	46ec8 <warn@@Base+0x56f8>
   46a44:	b	46ea4 <warn@@Base+0x56d4>
   46a48:	b	46e98 <warn@@Base+0x56c8>
   46a4c:	b	46e8c <warn@@Base+0x56bc>
   46a50:	b	46e80 <warn@@Base+0x56b0>
   46a54:	b	46e74 <warn@@Base+0x56a4>
   46a58:	b	46e68 <warn@@Base+0x5698>
   46a5c:	b	46e5c <warn@@Base+0x568c>
   46a60:	b	46e50 <warn@@Base+0x5680>
   46a64:	b	46e44 <warn@@Base+0x5674>
   46a68:	b	46e38 <warn@@Base+0x5668>
   46a6c:	b	46e2c <warn@@Base+0x565c>
   46a70:	b	46e20 <warn@@Base+0x5650>
   46a74:	b	46e14 <warn@@Base+0x5644>
   46a78:	b	46e08 <warn@@Base+0x5638>
   46a7c:	b	46dfc <warn@@Base+0x562c>
   46a80:	b	46df0 <warn@@Base+0x5620>
   46a84:	b	46de4 <warn@@Base+0x5614>
   46a88:	b	46dd8 <warn@@Base+0x5608>
   46a8c:	b	46dcc <warn@@Base+0x55fc>
   46a90:	b	46dc0 <warn@@Base+0x55f0>
   46a94:	b	46db4 <warn@@Base+0x55e4>
   46a98:	b	46da8 <warn@@Base+0x55d8>
   46a9c:	b	46d9c <warn@@Base+0x55cc>
   46aa0:	b	46ec8 <warn@@Base+0x56f8>
   46aa4:	b	46ec8 <warn@@Base+0x56f8>
   46aa8:	b	46ec8 <warn@@Base+0x56f8>
   46aac:	b	46ec8 <warn@@Base+0x56f8>
   46ab0:	b	46ec8 <warn@@Base+0x56f8>
   46ab4:	b	46d90 <warn@@Base+0x55c0>
   46ab8:	b	46d84 <warn@@Base+0x55b4>
   46abc:	b	46ec8 <warn@@Base+0x56f8>
   46ac0:	b	46ec8 <warn@@Base+0x56f8>
   46ac4:	b	46ec8 <warn@@Base+0x56f8>
   46ac8:	b	46ec8 <warn@@Base+0x56f8>
   46acc:	b	46ec8 <warn@@Base+0x56f8>
   46ad0:	b	46ec8 <warn@@Base+0x56f8>
   46ad4:	b	46ec8 <warn@@Base+0x56f8>
   46ad8:	b	46ec8 <warn@@Base+0x56f8>
   46adc:	b	46ec8 <warn@@Base+0x56f8>
   46ae0:	b	46ec8 <warn@@Base+0x56f8>
   46ae4:	b	46ec8 <warn@@Base+0x56f8>
   46ae8:	b	46ec8 <warn@@Base+0x56f8>
   46aec:	b	46ec8 <warn@@Base+0x56f8>
   46af0:	b	46ec8 <warn@@Base+0x56f8>
   46af4:	b	46ec8 <warn@@Base+0x56f8>
   46af8:	b	46d78 <warn@@Base+0x55a8>
   46afc:	b	46d6c <warn@@Base+0x559c>
   46b00:	b	46d60 <warn@@Base+0x5590>
   46b04:	b	46ec8 <warn@@Base+0x56f8>
   46b08:	b	46ec8 <warn@@Base+0x56f8>
   46b0c:	b	46ec8 <warn@@Base+0x56f8>
   46b10:	b	46ec8 <warn@@Base+0x56f8>
   46b14:	b	46ec8 <warn@@Base+0x56f8>
   46b18:	b	46ec8 <warn@@Base+0x56f8>
   46b1c:	b	46ec8 <warn@@Base+0x56f8>
   46b20:	b	46ec8 <warn@@Base+0x56f8>
   46b24:	b	46ec8 <warn@@Base+0x56f8>
   46b28:	b	46ec8 <warn@@Base+0x56f8>
   46b2c:	b	46ec8 <warn@@Base+0x56f8>
   46b30:	b	46ec8 <warn@@Base+0x56f8>
   46b34:	b	46ec8 <warn@@Base+0x56f8>
   46b38:	b	46ec8 <warn@@Base+0x56f8>
   46b3c:	b	46ec8 <warn@@Base+0x56f8>
   46b40:	b	46d54 <warn@@Base+0x5584>
   46b44:	b	46d48 <warn@@Base+0x5578>
   46b48:	b	46ec8 <warn@@Base+0x56f8>
   46b4c:	b	46ec8 <warn@@Base+0x56f8>
   46b50:	b	46ec8 <warn@@Base+0x56f8>
   46b54:	b	46ec8 <warn@@Base+0x56f8>
   46b58:	b	46ec8 <warn@@Base+0x56f8>
   46b5c:	b	46ec8 <warn@@Base+0x56f8>
   46b60:	b	46ec8 <warn@@Base+0x56f8>
   46b64:	b	46ec8 <warn@@Base+0x56f8>
   46b68:	b	46ec8 <warn@@Base+0x56f8>
   46b6c:	b	46ec8 <warn@@Base+0x56f8>
   46b70:	b	46ec8 <warn@@Base+0x56f8>
   46b74:	b	46ec8 <warn@@Base+0x56f8>
   46b78:	b	46ec8 <warn@@Base+0x56f8>
   46b7c:	b	46ec8 <warn@@Base+0x56f8>
   46b80:	b	46ec8 <warn@@Base+0x56f8>
   46b84:	b	46ec8 <warn@@Base+0x56f8>
   46b88:	b	46ec8 <warn@@Base+0x56f8>
   46b8c:	b	46ec8 <warn@@Base+0x56f8>
   46b90:	b	46ec8 <warn@@Base+0x56f8>
   46b94:	b	46ec8 <warn@@Base+0x56f8>
   46b98:	b	46ec8 <warn@@Base+0x56f8>
   46b9c:	b	46ec8 <warn@@Base+0x56f8>
   46ba0:	b	46ec8 <warn@@Base+0x56f8>
   46ba4:	b	46ec8 <warn@@Base+0x56f8>
   46ba8:	b	46ec8 <warn@@Base+0x56f8>
   46bac:	b	46ec8 <warn@@Base+0x56f8>
   46bb0:	b	46ec8 <warn@@Base+0x56f8>
   46bb4:	b	46ec8 <warn@@Base+0x56f8>
   46bb8:	b	46ec8 <warn@@Base+0x56f8>
   46bbc:	b	46ec8 <warn@@Base+0x56f8>
   46bc0:	b	46ec8 <warn@@Base+0x56f8>
   46bc4:	b	46ec8 <warn@@Base+0x56f8>
   46bc8:	b	46ec8 <warn@@Base+0x56f8>
   46bcc:	b	46ec8 <warn@@Base+0x56f8>
   46bd0:	b	46ec8 <warn@@Base+0x56f8>
   46bd4:	b	46ec8 <warn@@Base+0x56f8>
   46bd8:	b	46ec8 <warn@@Base+0x56f8>
   46bdc:	b	46ec8 <warn@@Base+0x56f8>
   46be0:	b	46ec8 <warn@@Base+0x56f8>
   46be4:	b	46ec8 <warn@@Base+0x56f8>
   46be8:	b	46ec8 <warn@@Base+0x56f8>
   46bec:	b	46ec8 <warn@@Base+0x56f8>
   46bf0:	b	46ec8 <warn@@Base+0x56f8>
   46bf4:	b	46ec8 <warn@@Base+0x56f8>
   46bf8:	b	46ec8 <warn@@Base+0x56f8>
   46bfc:	b	46ec8 <warn@@Base+0x56f8>
   46c00:	b	46ec8 <warn@@Base+0x56f8>
   46c04:	b	46ec8 <warn@@Base+0x56f8>
   46c08:	b	46ec8 <warn@@Base+0x56f8>
   46c0c:	b	46ec8 <warn@@Base+0x56f8>
   46c10:	b	46ec8 <warn@@Base+0x56f8>
   46c14:	b	46ec8 <warn@@Base+0x56f8>
   46c18:	b	46ec8 <warn@@Base+0x56f8>
   46c1c:	b	46ec8 <warn@@Base+0x56f8>
   46c20:	b	46ec8 <warn@@Base+0x56f8>
   46c24:	b	46ec8 <warn@@Base+0x56f8>
   46c28:	b	46ec8 <warn@@Base+0x56f8>
   46c2c:	b	46ec8 <warn@@Base+0x56f8>
   46c30:	b	46ec8 <warn@@Base+0x56f8>
   46c34:	b	46ec8 <warn@@Base+0x56f8>
   46c38:	b	46ec8 <warn@@Base+0x56f8>
   46c3c:	b	46ec8 <warn@@Base+0x56f8>
   46c40:	b	46ec8 <warn@@Base+0x56f8>
   46c44:	b	46ebc <warn@@Base+0x56ec>
   46c48:	b	46ec8 <warn@@Base+0x56f8>
   46c4c:	b	46ec8 <warn@@Base+0x56f8>
   46c50:	b	46ec8 <warn@@Base+0x56f8>
   46c54:	b	46ec8 <warn@@Base+0x56f8>
   46c58:	b	46ec8 <warn@@Base+0x56f8>
   46c5c:	b	46ec8 <warn@@Base+0x56f8>
   46c60:	b	46ec8 <warn@@Base+0x56f8>
   46c64:	b	46ec8 <warn@@Base+0x56f8>
   46c68:	b	46ec8 <warn@@Base+0x56f8>
   46c6c:	b	46ec8 <warn@@Base+0x56f8>
   46c70:	b	46ec8 <warn@@Base+0x56f8>
   46c74:	b	46ec8 <warn@@Base+0x56f8>
   46c78:	b	46ec8 <warn@@Base+0x56f8>
   46c7c:	b	46ec8 <warn@@Base+0x56f8>
   46c80:	b	46ec8 <warn@@Base+0x56f8>
   46c84:	b	46ec8 <warn@@Base+0x56f8>
   46c88:	b	46ec8 <warn@@Base+0x56f8>
   46c8c:	b	46ec8 <warn@@Base+0x56f8>
   46c90:	b	46ec8 <warn@@Base+0x56f8>
   46c94:	b	46ec8 <warn@@Base+0x56f8>
   46c98:	b	46ec8 <warn@@Base+0x56f8>
   46c9c:	b	46ec8 <warn@@Base+0x56f8>
   46ca0:	b	46ec8 <warn@@Base+0x56f8>
   46ca4:	b	46ec8 <warn@@Base+0x56f8>
   46ca8:	b	46ec8 <warn@@Base+0x56f8>
   46cac:	b	46ec8 <warn@@Base+0x56f8>
   46cb0:	b	46ec8 <warn@@Base+0x56f8>
   46cb4:	b	46ec8 <warn@@Base+0x56f8>
   46cb8:	b	46ec8 <warn@@Base+0x56f8>
   46cbc:	b	46ec8 <warn@@Base+0x56f8>
   46cc0:	b	46ec8 <warn@@Base+0x56f8>
   46cc4:	b	46ec8 <warn@@Base+0x56f8>
   46cc8:	b	46ec8 <warn@@Base+0x56f8>
   46ccc:	b	46ec8 <warn@@Base+0x56f8>
   46cd0:	b	46ec8 <warn@@Base+0x56f8>
   46cd4:	b	46ec8 <warn@@Base+0x56f8>
   46cd8:	b	46ec8 <warn@@Base+0x56f8>
   46cdc:	b	46ec8 <warn@@Base+0x56f8>
   46ce0:	b	46ec8 <warn@@Base+0x56f8>
   46ce4:	b	46ec8 <warn@@Base+0x56f8>
   46ce8:	b	46ec8 <warn@@Base+0x56f8>
   46cec:	b	46ec8 <warn@@Base+0x56f8>
   46cf0:	b	46ec8 <warn@@Base+0x56f8>
   46cf4:	b	46ec8 <warn@@Base+0x56f8>
   46cf8:	b	46ec8 <warn@@Base+0x56f8>
   46cfc:	b	46ec8 <warn@@Base+0x56f8>
   46d00:	b	46ec8 <warn@@Base+0x56f8>
   46d04:	b	46ec8 <warn@@Base+0x56f8>
   46d08:	b	46ec8 <warn@@Base+0x56f8>
   46d0c:	b	46ec8 <warn@@Base+0x56f8>
   46d10:	b	46ec8 <warn@@Base+0x56f8>
   46d14:	b	46ec8 <warn@@Base+0x56f8>
   46d18:	b	46ec8 <warn@@Base+0x56f8>
   46d1c:	b	46ec8 <warn@@Base+0x56f8>
   46d20:	b	46ec8 <warn@@Base+0x56f8>
   46d24:	b	46ec8 <warn@@Base+0x56f8>
   46d28:	b	46ec8 <warn@@Base+0x56f8>
   46d2c:	b	46ec8 <warn@@Base+0x56f8>
   46d30:	b	46ec8 <warn@@Base+0x56f8>
   46d34:	b	46ec8 <warn@@Base+0x56f8>
   46d38:	b	46ec8 <warn@@Base+0x56f8>
   46d3c:	b	46ec8 <warn@@Base+0x56f8>
   46d40:	b	46ec8 <warn@@Base+0x56f8>
   46d44:	b	46eb0 <warn@@Base+0x56e0>
   46d48:	ldr	r0, [pc, #384]	; 46ed0 <warn@@Base+0x5700>
   46d4c:	add	r0, pc, r0
   46d50:	bx	lr
   46d54:	ldr	r0, [pc, #376]	; 46ed4 <warn@@Base+0x5704>
   46d58:	add	r0, pc, r0
   46d5c:	bx	lr
   46d60:	ldr	r0, [pc, #368]	; 46ed8 <warn@@Base+0x5708>
   46d64:	add	r0, pc, r0
   46d68:	bx	lr
   46d6c:	ldr	r0, [pc, #360]	; 46edc <warn@@Base+0x570c>
   46d70:	add	r0, pc, r0
   46d74:	bx	lr
   46d78:	ldr	r0, [pc, #352]	; 46ee0 <warn@@Base+0x5710>
   46d7c:	add	r0, pc, r0
   46d80:	bx	lr
   46d84:	ldr	r0, [pc, #344]	; 46ee4 <warn@@Base+0x5714>
   46d88:	add	r0, pc, r0
   46d8c:	bx	lr
   46d90:	ldr	r0, [pc, #336]	; 46ee8 <warn@@Base+0x5718>
   46d94:	add	r0, pc, r0
   46d98:	bx	lr
   46d9c:	ldr	r0, [pc, #328]	; 46eec <warn@@Base+0x571c>
   46da0:	add	r0, pc, r0
   46da4:	bx	lr
   46da8:	ldr	r0, [pc, #320]	; 46ef0 <warn@@Base+0x5720>
   46dac:	add	r0, pc, r0
   46db0:	bx	lr
   46db4:	ldr	r0, [pc, #312]	; 46ef4 <warn@@Base+0x5724>
   46db8:	add	r0, pc, r0
   46dbc:	bx	lr
   46dc0:	ldr	r0, [pc, #304]	; 46ef8 <warn@@Base+0x5728>
   46dc4:	add	r0, pc, r0
   46dc8:	bx	lr
   46dcc:	ldr	r0, [pc, #296]	; 46efc <warn@@Base+0x572c>
   46dd0:	add	r0, pc, r0
   46dd4:	bx	lr
   46dd8:	ldr	r0, [pc, #288]	; 46f00 <warn@@Base+0x5730>
   46ddc:	add	r0, pc, r0
   46de0:	bx	lr
   46de4:	ldr	r0, [pc, #280]	; 46f04 <warn@@Base+0x5734>
   46de8:	add	r0, pc, r0
   46dec:	bx	lr
   46df0:	ldr	r0, [pc, #272]	; 46f08 <warn@@Base+0x5738>
   46df4:	add	r0, pc, r0
   46df8:	bx	lr
   46dfc:	ldr	r0, [pc, #264]	; 46f0c <warn@@Base+0x573c>
   46e00:	add	r0, pc, r0
   46e04:	bx	lr
   46e08:	ldr	r0, [pc, #256]	; 46f10 <warn@@Base+0x5740>
   46e0c:	add	r0, pc, r0
   46e10:	bx	lr
   46e14:	ldr	r0, [pc, #248]	; 46f14 <warn@@Base+0x5744>
   46e18:	add	r0, pc, r0
   46e1c:	bx	lr
   46e20:	ldr	r0, [pc, #240]	; 46f18 <warn@@Base+0x5748>
   46e24:	add	r0, pc, r0
   46e28:	bx	lr
   46e2c:	ldr	r0, [pc, #232]	; 46f1c <warn@@Base+0x574c>
   46e30:	add	r0, pc, r0
   46e34:	bx	lr
   46e38:	ldr	r0, [pc, #224]	; 46f20 <warn@@Base+0x5750>
   46e3c:	add	r0, pc, r0
   46e40:	bx	lr
   46e44:	ldr	r0, [pc, #216]	; 46f24 <warn@@Base+0x5754>
   46e48:	add	r0, pc, r0
   46e4c:	bx	lr
   46e50:	ldr	r0, [pc, #208]	; 46f28 <warn@@Base+0x5758>
   46e54:	add	r0, pc, r0
   46e58:	bx	lr
   46e5c:	ldr	r0, [pc, #200]	; 46f2c <warn@@Base+0x575c>
   46e60:	add	r0, pc, r0
   46e64:	bx	lr
   46e68:	ldr	r0, [pc, #192]	; 46f30 <warn@@Base+0x5760>
   46e6c:	add	r0, pc, r0
   46e70:	bx	lr
   46e74:	ldr	r0, [pc, #184]	; 46f34 <warn@@Base+0x5764>
   46e78:	add	r0, pc, r0
   46e7c:	bx	lr
   46e80:	ldr	r0, [pc, #176]	; 46f38 <warn@@Base+0x5768>
   46e84:	add	r0, pc, r0
   46e88:	bx	lr
   46e8c:	ldr	r0, [pc, #168]	; 46f3c <warn@@Base+0x576c>
   46e90:	add	r0, pc, r0
   46e94:	bx	lr
   46e98:	ldr	r0, [pc, #160]	; 46f40 <warn@@Base+0x5770>
   46e9c:	add	r0, pc, r0
   46ea0:	bx	lr
   46ea4:	ldr	r0, [pc, #152]	; 46f44 <warn@@Base+0x5774>
   46ea8:	add	r0, pc, r0
   46eac:	bx	lr
   46eb0:	ldr	r0, [pc, #144]	; 46f48 <warn@@Base+0x5778>
   46eb4:	add	r0, pc, r0
   46eb8:	bx	lr
   46ebc:	ldr	r0, [pc, #136]	; 46f4c <warn@@Base+0x577c>
   46ec0:	add	r0, pc, r0
   46ec4:	bx	lr
   46ec8:	mov	r0, #0
   46ecc:	bx	lr
   46ed0:	muleq	r0, r0, r3
   46ed4:	andeq	lr, r0, r8, lsr #11
   46ed8:	strdeq	lr, [r0], -r8
   46edc:	ldrdeq	lr, [r0], -r4
   46ee0:			; <UNDEFINED> instruction: 0x0000e5b0
   46ee4:	andeq	lr, r0, r8, lsl #11
   46ee8:	andeq	lr, r0, ip, asr r5
   46eec:	andeq	lr, r0, r8, lsr r5
   46ef0:	andeq	lr, r0, r4, lsl r5
   46ef4:	strdeq	lr, [r0], -r4
   46ef8:	andeq	lr, r0, ip, asr #9
   46efc:	andeq	lr, r0, ip, lsr #9
   46f00:	andeq	lr, r0, r4, lsl #9
   46f04:	andeq	lr, r0, r4, ror #8
   46f08:	andeq	lr, r0, ip, lsr r4
   46f0c:	andeq	lr, r0, r8, lsl r4
   46f10:	strdeq	lr, [r0], -r4
   46f14:	ldrdeq	lr, [r0], -r8
   46f18:			; <UNDEFINED> instruction: 0x0000e3b4
   46f1c:	muleq	r0, r0, r3
   46f20:	andeq	lr, r0, r4, ror r3
   46f24:	andeq	lr, r0, r4, asr r3
   46f28:	andeq	lr, r0, r4, lsr r3
   46f2c:	andeq	lr, r0, r0, lsl r3
   46f30:	andeq	lr, r0, ip, ror #5
   46f34:	andeq	lr, r0, ip, asr #5
   46f38:	andeq	lr, r0, ip, lsr #5
   46f3c:	andeq	lr, r0, ip, lsl #5
   46f40:	andeq	lr, r0, r0, ror r2
   46f44:	andeq	lr, r0, r8, asr r2
   46f48:	andeq	lr, r0, ip, lsr r2
   46f4c:	andeq	lr, r0, r0, asr #9
   46f50:	cmp	r0, #4
   46f54:	beq	46ff8 <warn@@Base+0x5828>
   46f58:	bls	46f8c <warn@@Base+0x57bc>
   46f5c:	cmp	r0, #8192	; 0x2000
   46f60:	beq	46fec <warn@@Base+0x581c>
   46f64:	bls	46fb4 <warn@@Base+0x57e4>
   46f68:	ldr	r3, [pc, #148]	; 47004 <warn@@Base+0x5834>
   46f6c:	cmp	r0, r3
   46f70:	beq	46fc8 <warn@@Base+0x57f8>
   46f74:	ldr	r3, [pc, #140]	; 47008 <warn@@Base+0x5838>
   46f78:	cmp	r0, r3
   46f7c:	bne	46fac <warn@@Base+0x57dc>
   46f80:	ldr	r0, [pc, #132]	; 4700c <warn@@Base+0x583c>
   46f84:	add	r0, pc, r0
   46f88:	bx	lr
   46f8c:	cmp	r0, #2
   46f90:	beq	46fe0 <warn@@Base+0x5810>
   46f94:	bhi	46fd4 <warn@@Base+0x5804>
   46f98:	cmp	r0, #1
   46f9c:	bne	46fac <warn@@Base+0x57dc>
   46fa0:	ldr	r0, [pc, #104]	; 47010 <warn@@Base+0x5840>
   46fa4:	add	r0, pc, r0
   46fa8:	bx	lr
   46fac:	mov	r0, #0
   46fb0:	bx	lr
   46fb4:	cmp	r0, #5
   46fb8:	bne	46fac <warn@@Base+0x57dc>
   46fbc:	ldr	r0, [pc, #80]	; 47014 <warn@@Base+0x5844>
   46fc0:	add	r0, pc, r0
   46fc4:	bx	lr
   46fc8:	ldr	r0, [pc, #72]	; 47018 <warn@@Base+0x5848>
   46fcc:	add	r0, pc, r0
   46fd0:	bx	lr
   46fd4:	ldr	r0, [pc, #64]	; 4701c <warn@@Base+0x584c>
   46fd8:	add	r0, pc, r0
   46fdc:	bx	lr
   46fe0:	ldr	r0, [pc, #56]	; 47020 <warn@@Base+0x5850>
   46fe4:	add	r0, pc, r0
   46fe8:	bx	lr
   46fec:	ldr	r0, [pc, #48]	; 47024 <warn@@Base+0x5854>
   46ff0:	add	r0, pc, r0
   46ff4:	bx	lr
   46ff8:	ldr	r0, [pc, #40]	; 47028 <warn@@Base+0x5858>
   46ffc:	add	r0, pc, r0
   47000:	bx	lr
   47004:	andeq	r2, r0, r1
   47008:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   4700c:	andeq	lr, r0, r8, asr r4
   47010:	andeq	lr, r0, ip, ror #7
   47014:	andeq	lr, r0, r8, lsl #8
   47018:	andeq	lr, r0, r4, lsr r4
   4701c:	andeq	lr, r0, ip, asr #7
   47020:	andeq	lr, r0, r0, lsr r4
   47024:	strdeq	lr, [r0], -ip
   47028:			; <UNDEFINED> instruction: 0x0000e3bc
   4702c:	ldr	r3, [pc, #452]	; 471f8 <warn@@Base+0x5a28>
   47030:	add	r3, pc, r3
   47034:	ldr	r3, [r3]
   47038:	cmp	r3, #0
   4703c:	beq	47048 <warn@@Base+0x5878>
   47040:	mov	r0, r3
   47044:	bx	lr
   47048:	ldr	r0, [pc, #428]	; 471fc <warn@@Base+0x5a2c>
   4704c:	push	{r4, r5, r6, lr}
   47050:	add	r0, pc, r0
   47054:	bl	11fcc <getenv@plt>
   47058:	subs	r4, r0, #0
   4705c:	beq	471d0 <warn@@Base+0x5a00>
   47060:	mov	r1, #7
   47064:	bl	12158 <access@plt>
   47068:	cmp	r0, #0
   4706c:	bne	470d0 <warn@@Base+0x5900>
   47070:	ldr	r0, [pc, #392]	; 47200 <warn@@Base+0x5a30>
   47074:	add	r0, pc, r0
   47078:	bl	11fcc <getenv@plt>
   4707c:	ldr	r0, [pc, #384]	; 47204 <warn@@Base+0x5a34>
   47080:	add	r0, pc, r0
   47084:	bl	11fcc <getenv@plt>
   47088:	mov	r0, r4
   4708c:	bl	12074 <strlen@plt>
   47090:	mov	r5, r0
   47094:	add	r6, r5, #1
   47098:	add	r0, r0, #2
   4709c:	bl	11f3c <xmalloc@plt>
   470a0:	mov	r1, r4
   470a4:	bl	11f6c <strcpy@plt>
   470a8:	ldr	r2, [pc, #344]	; 47208 <warn@@Base+0x5a38>
   470ac:	mov	r1, #0
   470b0:	add	r2, pc, r2
   470b4:	mov	r3, r0
   470b8:	mov	r0, #47	; 0x2f
   470bc:	strb	r0, [r3, r5]
   470c0:	str	r3, [r2]
   470c4:	strb	r1, [r3, r6]
   470c8:	mov	r0, r3
   470cc:	pop	{r4, r5, r6, pc}
   470d0:	ldr	r0, [pc, #308]	; 4720c <warn@@Base+0x5a3c>
   470d4:	add	r0, pc, r0
   470d8:	bl	11fcc <getenv@plt>
   470dc:	mov	r4, r0
   470e0:	cmp	r4, #0
   470e4:	beq	471e4 <warn@@Base+0x5a14>
   470e8:	mov	r1, #7
   470ec:	mov	r0, r4
   470f0:	bl	12158 <access@plt>
   470f4:	cmp	r0, #0
   470f8:	beq	4707c <warn@@Base+0x58ac>
   470fc:	ldr	r0, [pc, #268]	; 47210 <warn@@Base+0x5a40>
   47100:	add	r0, pc, r0
   47104:	bl	11fcc <getenv@plt>
   47108:	mov	r4, r0
   4710c:	cmp	r4, #0
   47110:	beq	47128 <warn@@Base+0x5958>
   47114:	mov	r1, #7
   47118:	mov	r0, r4
   4711c:	bl	12158 <access@plt>
   47120:	cmp	r0, #0
   47124:	beq	47088 <warn@@Base+0x58b8>
   47128:	ldr	r4, [pc, #228]	; 47214 <warn@@Base+0x5a44>
   4712c:	mov	r1, #7
   47130:	add	r4, pc, r4
   47134:	mov	r0, r4
   47138:	bl	12158 <access@plt>
   4713c:	cmp	r0, #0
   47140:	moveq	r6, #5
   47144:	moveq	r0, #6
   47148:	moveq	r5, #4
   4714c:	beq	4709c <warn@@Base+0x58cc>
   47150:	ldr	r4, [pc, #192]	; 47218 <warn@@Base+0x5a48>
   47154:	mov	r1, #7
   47158:	add	r4, pc, r4
   4715c:	add	r6, r4, #20
   47160:	mov	r0, r6
   47164:	bl	12158 <access@plt>
   47168:	cmp	r0, #0
   4716c:	bne	4718c <warn@@Base+0x59bc>
   47170:	mov	r0, r6
   47174:	bl	12074 <strlen@plt>
   47178:	mov	r4, r6
   4717c:	mov	r5, r0
   47180:	add	r6, r5, #1
   47184:	add	r0, r0, #2
   47188:	b	4709c <warn@@Base+0x58cc>
   4718c:	mov	r1, #7
   47190:	mov	r0, r4
   47194:	bl	12158 <access@plt>
   47198:	cmp	r0, #0
   4719c:	beq	47088 <warn@@Base+0x58b8>
   471a0:	add	r4, r4, #12
   471a4:	mov	r0, r4
   471a8:	mov	r1, #7
   471ac:	bl	12158 <access@plt>
   471b0:	cmp	r0, #0
   471b4:	beq	47088 <warn@@Base+0x58b8>
   471b8:	ldr	r4, [pc, #92]	; 4721c <warn@@Base+0x5a4c>
   471bc:	mov	r6, #2
   471c0:	mov	r0, #3
   471c4:	mov	r5, #1
   471c8:	add	r4, pc, r4
   471cc:	b	4709c <warn@@Base+0x58cc>
   471d0:	ldr	r0, [pc, #72]	; 47220 <warn@@Base+0x5a50>
   471d4:	add	r0, pc, r0
   471d8:	bl	11fcc <getenv@plt>
   471dc:	mov	r4, r0
   471e0:	b	470e0 <warn@@Base+0x5910>
   471e4:	ldr	r0, [pc, #56]	; 47224 <warn@@Base+0x5a54>
   471e8:	add	r0, pc, r0
   471ec:	bl	11fcc <getenv@plt>
   471f0:	mov	r4, r0
   471f4:	b	4710c <warn@@Base+0x593c>
   471f8:	andeq	r2, r2, r4, asr #26
   471fc:	andeq	lr, r0, r0, lsl #8
   47200:	andeq	lr, r0, r4, ror #7
   47204:	ldrdeq	lr, [r0], -ip
   47208:	andeq	r2, r2, r4, asr #25
   4720c:	andeq	lr, r0, r4, lsl #7
   47210:	andeq	lr, r0, ip, asr r3
   47214:	andeq	lr, r0, r8, lsl r3
   47218:	ldrdeq	lr, [r0], -r0
   4721c:	andeq	sl, r0, r0, asr sp
   47220:	andeq	lr, r0, r4, lsl #5
   47224:	andeq	lr, r0, r4, ror r2
   47228:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4722c:	mov	r6, r0
   47230:	bl	4702c <warn@@Base+0x585c>
   47234:	ldr	r8, [pc, #228]	; 47320 <warn@@Base+0x5b50>
   47238:	cmp	r6, #0
   4723c:	add	r8, pc, r8
   47240:	mov	r7, r0
   47244:	beq	472d4 <warn@@Base+0x5b04>
   47248:	mov	r0, r6
   4724c:	bl	12074 <strlen@plt>
   47250:	mov	r4, r0
   47254:	mov	r9, r0
   47258:	mov	r0, r7
   4725c:	bl	12074 <strlen@plt>
   47260:	mov	r5, r0
   47264:	add	r0, r0, r4
   47268:	add	r0, r0, #9
   4726c:	bl	11f3c <xmalloc@plt>
   47270:	mov	r1, r7
   47274:	mov	r4, r0
   47278:	bl	11f6c <strcpy@plt>
   4727c:	ldr	r3, [pc, #160]	; 47324 <warn@@Base+0x5b54>
   47280:	add	r2, r4, r5
   47284:	add	r3, pc, r3
   47288:	add	ip, r5, #8
   4728c:	ldm	r3!, {r0, r1}
   47290:	ldrb	r3, [r3]
   47294:	str	r0, [r4, r5]
   47298:	str	r1, [r2, #4]
   4729c:	add	r0, r4, ip
   472a0:	mov	r1, r6
   472a4:	strb	r3, [r2, #8]
   472a8:	bl	11f6c <strcpy@plt>
   472ac:	mov	r1, r9
   472b0:	mov	r0, r4
   472b4:	bl	11fc0 <mkstemps64@plt>
   472b8:	cmn	r0, #1
   472bc:	beq	472e8 <warn@@Base+0x5b18>
   472c0:	bl	12350 <close@plt>
   472c4:	cmp	r0, #0
   472c8:	bne	4731c <warn@@Base+0x5b4c>
   472cc:	mov	r0, r4
   472d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   472d4:	mov	r9, r6
   472d8:	mov	r4, r6
   472dc:	ldr	r6, [pc, #68]	; 47328 <warn@@Base+0x5b58>
   472e0:	add	r6, pc, r6
   472e4:	b	47258 <warn@@Base+0x5a88>
   472e8:	ldr	r3, [pc, #60]	; 4732c <warn@@Base+0x5b5c>
   472ec:	ldr	r3, [r8, r3]
   472f0:	ldr	r4, [r3]
   472f4:	bl	120ec <__errno_location@plt>
   472f8:	ldr	r0, [r0]
   472fc:	bl	12014 <strerror@plt>
   47300:	ldr	r1, [pc, #40]	; 47330 <warn@@Base+0x5b60>
   47304:	mov	r2, r7
   47308:	add	r1, pc, r1
   4730c:	mov	r3, r0
   47310:	mov	r0, r4
   47314:	bl	120b0 <fprintf@plt>
   47318:	bl	1232c <abort@plt>
   4731c:	bl	1232c <abort@plt>
   47320:			; <UNDEFINED> instruction: 0x0001edbc
   47324:	andeq	lr, r0, r0, ror #3
   47328:			; <UNDEFINED> instruction: 0x00001fbc
   4732c:	andeq	r0, r0, r8, lsr #4
   47330:	andeq	lr, r0, r8, ror #2
   47334:	subs	r2, r1, #1
   47338:	bxeq	lr
   4733c:	bcc	47514 <warn@@Base+0x5d44>
   47340:	cmp	r0, r1
   47344:	bls	474f8 <warn@@Base+0x5d28>
   47348:	tst	r1, r2
   4734c:	beq	47504 <warn@@Base+0x5d34>
   47350:	clz	r3, r0
   47354:	clz	r2, r1
   47358:	sub	r3, r2, r3
   4735c:	rsbs	r3, r3, #31
   47360:	addne	r3, r3, r3, lsl #1
   47364:	mov	r2, #0
   47368:	addne	pc, pc, r3, lsl #2
   4736c:	nop			; (mov r0, r0)
   47370:	cmp	r0, r1, lsl #31
   47374:	adc	r2, r2, r2
   47378:	subcs	r0, r0, r1, lsl #31
   4737c:	cmp	r0, r1, lsl #30
   47380:	adc	r2, r2, r2
   47384:	subcs	r0, r0, r1, lsl #30
   47388:	cmp	r0, r1, lsl #29
   4738c:	adc	r2, r2, r2
   47390:	subcs	r0, r0, r1, lsl #29
   47394:	cmp	r0, r1, lsl #28
   47398:	adc	r2, r2, r2
   4739c:	subcs	r0, r0, r1, lsl #28
   473a0:	cmp	r0, r1, lsl #27
   473a4:	adc	r2, r2, r2
   473a8:	subcs	r0, r0, r1, lsl #27
   473ac:	cmp	r0, r1, lsl #26
   473b0:	adc	r2, r2, r2
   473b4:	subcs	r0, r0, r1, lsl #26
   473b8:	cmp	r0, r1, lsl #25
   473bc:	adc	r2, r2, r2
   473c0:	subcs	r0, r0, r1, lsl #25
   473c4:	cmp	r0, r1, lsl #24
   473c8:	adc	r2, r2, r2
   473cc:	subcs	r0, r0, r1, lsl #24
   473d0:	cmp	r0, r1, lsl #23
   473d4:	adc	r2, r2, r2
   473d8:	subcs	r0, r0, r1, lsl #23
   473dc:	cmp	r0, r1, lsl #22
   473e0:	adc	r2, r2, r2
   473e4:	subcs	r0, r0, r1, lsl #22
   473e8:	cmp	r0, r1, lsl #21
   473ec:	adc	r2, r2, r2
   473f0:	subcs	r0, r0, r1, lsl #21
   473f4:	cmp	r0, r1, lsl #20
   473f8:	adc	r2, r2, r2
   473fc:	subcs	r0, r0, r1, lsl #20
   47400:	cmp	r0, r1, lsl #19
   47404:	adc	r2, r2, r2
   47408:	subcs	r0, r0, r1, lsl #19
   4740c:	cmp	r0, r1, lsl #18
   47410:	adc	r2, r2, r2
   47414:	subcs	r0, r0, r1, lsl #18
   47418:	cmp	r0, r1, lsl #17
   4741c:	adc	r2, r2, r2
   47420:	subcs	r0, r0, r1, lsl #17
   47424:	cmp	r0, r1, lsl #16
   47428:	adc	r2, r2, r2
   4742c:	subcs	r0, r0, r1, lsl #16
   47430:	cmp	r0, r1, lsl #15
   47434:	adc	r2, r2, r2
   47438:	subcs	r0, r0, r1, lsl #15
   4743c:	cmp	r0, r1, lsl #14
   47440:	adc	r2, r2, r2
   47444:	subcs	r0, r0, r1, lsl #14
   47448:	cmp	r0, r1, lsl #13
   4744c:	adc	r2, r2, r2
   47450:	subcs	r0, r0, r1, lsl #13
   47454:	cmp	r0, r1, lsl #12
   47458:	adc	r2, r2, r2
   4745c:	subcs	r0, r0, r1, lsl #12
   47460:	cmp	r0, r1, lsl #11
   47464:	adc	r2, r2, r2
   47468:	subcs	r0, r0, r1, lsl #11
   4746c:	cmp	r0, r1, lsl #10
   47470:	adc	r2, r2, r2
   47474:	subcs	r0, r0, r1, lsl #10
   47478:	cmp	r0, r1, lsl #9
   4747c:	adc	r2, r2, r2
   47480:	subcs	r0, r0, r1, lsl #9
   47484:	cmp	r0, r1, lsl #8
   47488:	adc	r2, r2, r2
   4748c:	subcs	r0, r0, r1, lsl #8
   47490:	cmp	r0, r1, lsl #7
   47494:	adc	r2, r2, r2
   47498:	subcs	r0, r0, r1, lsl #7
   4749c:	cmp	r0, r1, lsl #6
   474a0:	adc	r2, r2, r2
   474a4:	subcs	r0, r0, r1, lsl #6
   474a8:	cmp	r0, r1, lsl #5
   474ac:	adc	r2, r2, r2
   474b0:	subcs	r0, r0, r1, lsl #5
   474b4:	cmp	r0, r1, lsl #4
   474b8:	adc	r2, r2, r2
   474bc:	subcs	r0, r0, r1, lsl #4
   474c0:	cmp	r0, r1, lsl #3
   474c4:	adc	r2, r2, r2
   474c8:	subcs	r0, r0, r1, lsl #3
   474cc:	cmp	r0, r1, lsl #2
   474d0:	adc	r2, r2, r2
   474d4:	subcs	r0, r0, r1, lsl #2
   474d8:	cmp	r0, r1, lsl #1
   474dc:	adc	r2, r2, r2
   474e0:	subcs	r0, r0, r1, lsl #1
   474e4:	cmp	r0, r1
   474e8:	adc	r2, r2, r2
   474ec:	subcs	r0, r0, r1
   474f0:	mov	r0, r2
   474f4:	bx	lr
   474f8:	moveq	r0, #1
   474fc:	movne	r0, #0
   47500:	bx	lr
   47504:	clz	r2, r1
   47508:	rsb	r2, r2, #31
   4750c:	lsr	r0, r0, r2
   47510:	bx	lr
   47514:	cmp	r0, #0
   47518:	mvnne	r0, #0
   4751c:	b	477bc <warn@@Base+0x5fec>
   47520:	cmp	r1, #0
   47524:	beq	47514 <warn@@Base+0x5d44>
   47528:	push	{r0, r1, lr}
   4752c:	bl	47334 <warn@@Base+0x5b64>
   47530:	pop	{r1, r2, lr}
   47534:	mul	r3, r2, r0
   47538:	sub	r1, r1, r3
   4753c:	bx	lr
   47540:	cmp	r1, #0
   47544:	beq	47750 <warn@@Base+0x5f80>
   47548:	eor	ip, r0, r1
   4754c:	rsbmi	r1, r1, #0
   47550:	subs	r2, r1, #1
   47554:	beq	4771c <warn@@Base+0x5f4c>
   47558:	movs	r3, r0
   4755c:	rsbmi	r3, r0, #0
   47560:	cmp	r3, r1
   47564:	bls	47728 <warn@@Base+0x5f58>
   47568:	tst	r1, r2
   4756c:	beq	47738 <warn@@Base+0x5f68>
   47570:	clz	r2, r3
   47574:	clz	r0, r1
   47578:	sub	r2, r0, r2
   4757c:	rsbs	r2, r2, #31
   47580:	addne	r2, r2, r2, lsl #1
   47584:	mov	r0, #0
   47588:	addne	pc, pc, r2, lsl #2
   4758c:	nop			; (mov r0, r0)
   47590:	cmp	r3, r1, lsl #31
   47594:	adc	r0, r0, r0
   47598:	subcs	r3, r3, r1, lsl #31
   4759c:	cmp	r3, r1, lsl #30
   475a0:	adc	r0, r0, r0
   475a4:	subcs	r3, r3, r1, lsl #30
   475a8:	cmp	r3, r1, lsl #29
   475ac:	adc	r0, r0, r0
   475b0:	subcs	r3, r3, r1, lsl #29
   475b4:	cmp	r3, r1, lsl #28
   475b8:	adc	r0, r0, r0
   475bc:	subcs	r3, r3, r1, lsl #28
   475c0:	cmp	r3, r1, lsl #27
   475c4:	adc	r0, r0, r0
   475c8:	subcs	r3, r3, r1, lsl #27
   475cc:	cmp	r3, r1, lsl #26
   475d0:	adc	r0, r0, r0
   475d4:	subcs	r3, r3, r1, lsl #26
   475d8:	cmp	r3, r1, lsl #25
   475dc:	adc	r0, r0, r0
   475e0:	subcs	r3, r3, r1, lsl #25
   475e4:	cmp	r3, r1, lsl #24
   475e8:	adc	r0, r0, r0
   475ec:	subcs	r3, r3, r1, lsl #24
   475f0:	cmp	r3, r1, lsl #23
   475f4:	adc	r0, r0, r0
   475f8:	subcs	r3, r3, r1, lsl #23
   475fc:	cmp	r3, r1, lsl #22
   47600:	adc	r0, r0, r0
   47604:	subcs	r3, r3, r1, lsl #22
   47608:	cmp	r3, r1, lsl #21
   4760c:	adc	r0, r0, r0
   47610:	subcs	r3, r3, r1, lsl #21
   47614:	cmp	r3, r1, lsl #20
   47618:	adc	r0, r0, r0
   4761c:	subcs	r3, r3, r1, lsl #20
   47620:	cmp	r3, r1, lsl #19
   47624:	adc	r0, r0, r0
   47628:	subcs	r3, r3, r1, lsl #19
   4762c:	cmp	r3, r1, lsl #18
   47630:	adc	r0, r0, r0
   47634:	subcs	r3, r3, r1, lsl #18
   47638:	cmp	r3, r1, lsl #17
   4763c:	adc	r0, r0, r0
   47640:	subcs	r3, r3, r1, lsl #17
   47644:	cmp	r3, r1, lsl #16
   47648:	adc	r0, r0, r0
   4764c:	subcs	r3, r3, r1, lsl #16
   47650:	cmp	r3, r1, lsl #15
   47654:	adc	r0, r0, r0
   47658:	subcs	r3, r3, r1, lsl #15
   4765c:	cmp	r3, r1, lsl #14
   47660:	adc	r0, r0, r0
   47664:	subcs	r3, r3, r1, lsl #14
   47668:	cmp	r3, r1, lsl #13
   4766c:	adc	r0, r0, r0
   47670:	subcs	r3, r3, r1, lsl #13
   47674:	cmp	r3, r1, lsl #12
   47678:	adc	r0, r0, r0
   4767c:	subcs	r3, r3, r1, lsl #12
   47680:	cmp	r3, r1, lsl #11
   47684:	adc	r0, r0, r0
   47688:	subcs	r3, r3, r1, lsl #11
   4768c:	cmp	r3, r1, lsl #10
   47690:	adc	r0, r0, r0
   47694:	subcs	r3, r3, r1, lsl #10
   47698:	cmp	r3, r1, lsl #9
   4769c:	adc	r0, r0, r0
   476a0:	subcs	r3, r3, r1, lsl #9
   476a4:	cmp	r3, r1, lsl #8
   476a8:	adc	r0, r0, r0
   476ac:	subcs	r3, r3, r1, lsl #8
   476b0:	cmp	r3, r1, lsl #7
   476b4:	adc	r0, r0, r0
   476b8:	subcs	r3, r3, r1, lsl #7
   476bc:	cmp	r3, r1, lsl #6
   476c0:	adc	r0, r0, r0
   476c4:	subcs	r3, r3, r1, lsl #6
   476c8:	cmp	r3, r1, lsl #5
   476cc:	adc	r0, r0, r0
   476d0:	subcs	r3, r3, r1, lsl #5
   476d4:	cmp	r3, r1, lsl #4
   476d8:	adc	r0, r0, r0
   476dc:	subcs	r3, r3, r1, lsl #4
   476e0:	cmp	r3, r1, lsl #3
   476e4:	adc	r0, r0, r0
   476e8:	subcs	r3, r3, r1, lsl #3
   476ec:	cmp	r3, r1, lsl #2
   476f0:	adc	r0, r0, r0
   476f4:	subcs	r3, r3, r1, lsl #2
   476f8:	cmp	r3, r1, lsl #1
   476fc:	adc	r0, r0, r0
   47700:	subcs	r3, r3, r1, lsl #1
   47704:	cmp	r3, r1
   47708:	adc	r0, r0, r0
   4770c:	subcs	r3, r3, r1
   47710:	cmp	ip, #0
   47714:	rsbmi	r0, r0, #0
   47718:	bx	lr
   4771c:	teq	ip, r0
   47720:	rsbmi	r0, r0, #0
   47724:	bx	lr
   47728:	movcc	r0, #0
   4772c:	asreq	r0, ip, #31
   47730:	orreq	r0, r0, #1
   47734:	bx	lr
   47738:	clz	r2, r1
   4773c:	rsb	r2, r2, #31
   47740:	cmp	ip, #0
   47744:	lsr	r0, r3, r2
   47748:	rsbmi	r0, r0, #0
   4774c:	bx	lr
   47750:	cmp	r0, #0
   47754:	mvngt	r0, #-2147483648	; 0x80000000
   47758:	movlt	r0, #-2147483648	; 0x80000000
   4775c:	b	477bc <warn@@Base+0x5fec>
   47760:	cmp	r1, #0
   47764:	beq	47750 <warn@@Base+0x5f80>
   47768:	push	{r0, r1, lr}
   4776c:	bl	47548 <warn@@Base+0x5d78>
   47770:	pop	{r1, r2, lr}
   47774:	mul	r3, r2, r0
   47778:	sub	r1, r1, r3
   4777c:	bx	lr
   47780:	cmp	r3, #0
   47784:	cmpeq	r2, #0
   47788:	bne	477a0 <warn@@Base+0x5fd0>
   4778c:	cmp	r1, #0
   47790:	cmpeq	r0, #0
   47794:	mvnne	r1, #0
   47798:	mvnne	r0, #0
   4779c:	b	477bc <warn@@Base+0x5fec>
   477a0:	sub	sp, sp, #8
   477a4:	push	{sp, lr}
   477a8:	bl	477cc <warn@@Base+0x5ffc>
   477ac:	ldr	lr, [sp, #4]
   477b0:	add	sp, sp, #8
   477b4:	pop	{r2, r3}
   477b8:	bx	lr
   477bc:	push	{r1, lr}
   477c0:	mov	r0, #8
   477c4:	bl	11d74 <raise@plt>
   477c8:	pop	{r1, pc}
   477cc:	cmp	r1, r3
   477d0:	cmpeq	r0, r2
   477d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   477d8:	mov	r4, r0
   477dc:	movcc	r0, #0
   477e0:	mov	r5, r1
   477e4:	ldr	lr, [sp, #36]	; 0x24
   477e8:	movcc	r1, r0
   477ec:	bcc	478e8 <warn@@Base+0x6118>
   477f0:	cmp	r3, #0
   477f4:	clzeq	ip, r2
   477f8:	clzne	ip, r3
   477fc:	addeq	ip, ip, #32
   47800:	cmp	r5, #0
   47804:	clzeq	r1, r4
   47808:	addeq	r1, r1, #32
   4780c:	clzne	r1, r5
   47810:	sub	ip, ip, r1
   47814:	sub	sl, ip, #32
   47818:	lsl	r9, r3, ip
   4781c:	rsb	fp, ip, #32
   47820:	orr	r9, r9, r2, lsl sl
   47824:	orr	r9, r9, r2, lsr fp
   47828:	lsl	r8, r2, ip
   4782c:	cmp	r5, r9
   47830:	cmpeq	r4, r8
   47834:	movcc	r0, #0
   47838:	movcc	r1, r0
   4783c:	bcc	47858 <warn@@Base+0x6088>
   47840:	mov	r0, #1
   47844:	subs	r4, r4, r8
   47848:	lsl	r1, r0, sl
   4784c:	orr	r1, r1, r0, lsr fp
   47850:	lsl	r0, r0, ip
   47854:	sbc	r5, r5, r9
   47858:	cmp	ip, #0
   4785c:	beq	478e8 <warn@@Base+0x6118>
   47860:	lsr	r6, r8, #1
   47864:	orr	r6, r6, r9, lsl #31
   47868:	lsr	r7, r9, #1
   4786c:	mov	r2, ip
   47870:	b	47894 <warn@@Base+0x60c4>
   47874:	subs	r3, r4, r6
   47878:	sbc	r8, r5, r7
   4787c:	adds	r3, r3, r3
   47880:	adc	r8, r8, r8
   47884:	adds	r4, r3, #1
   47888:	adc	r5, r8, #0
   4788c:	subs	r2, r2, #1
   47890:	beq	478b0 <warn@@Base+0x60e0>
   47894:	cmp	r5, r7
   47898:	cmpeq	r4, r6
   4789c:	bcs	47874 <warn@@Base+0x60a4>
   478a0:	adds	r4, r4, r4
   478a4:	adc	r5, r5, r5
   478a8:	subs	r2, r2, #1
   478ac:	bne	47894 <warn@@Base+0x60c4>
   478b0:	lsr	r3, r4, ip
   478b4:	orr	r3, r3, r5, lsl fp
   478b8:	lsr	r2, r5, ip
   478bc:	orr	r3, r3, r5, lsr sl
   478c0:	adds	r0, r0, r4
   478c4:	mov	r4, r3
   478c8:	lsl	r3, r2, ip
   478cc:	orr	r3, r3, r4, lsl sl
   478d0:	lsl	ip, r4, ip
   478d4:	orr	r3, r3, r4, lsr fp
   478d8:	adc	r1, r1, r5
   478dc:	subs	r0, r0, ip
   478e0:	mov	r5, r2
   478e4:	sbc	r1, r1, r3
   478e8:	cmp	lr, #0
   478ec:	strdne	r4, [lr]
   478f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   478f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   478f8:	mov	r7, r0
   478fc:	ldr	r6, [pc, #72]	; 4794c <warn@@Base+0x617c>
   47900:	ldr	r5, [pc, #72]	; 47950 <warn@@Base+0x6180>
   47904:	add	r6, pc, r6
   47908:	add	r5, pc, r5
   4790c:	sub	r6, r6, r5
   47910:	mov	r8, r1
   47914:	mov	r9, r2
   47918:	bl	11d30 <calloc@plt-0x20>
   4791c:	asrs	r6, r6, #2
   47920:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   47924:	mov	r4, #0
   47928:	add	r4, r4, #1
   4792c:	ldr	r3, [r5], #4
   47930:	mov	r2, r9
   47934:	mov	r1, r8
   47938:	mov	r0, r7
   4793c:	blx	r3
   47940:	cmp	r6, r4
   47944:	bne	47928 <warn@@Base+0x6158>
   47948:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4794c:	andeq	lr, r1, r8, ror #7
   47950:	andeq	lr, r1, r0, ror #7
   47954:	bx	lr

Disassembly of section .fini:

00047958 <.fini>:
   47958:	push	{r3, lr}
   4795c:	pop	{r3, pc}
