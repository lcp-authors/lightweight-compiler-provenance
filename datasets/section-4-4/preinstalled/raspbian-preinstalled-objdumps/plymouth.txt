
raspbian-preinstalled/plymouth:     file format elf32-littlearm


Disassembly of section .init:

000111c4 <.init>:
   111c4:	push	{r3, lr}
   111c8:	bl	121a8 <__assert_fail@plt+0xcb8>
   111cc:	pop	{r3, pc}

Disassembly of section .plt:

000111d0 <calloc@plt-0x14>:
   111d0:	push	{lr}		; (str lr, [sp, #-4]!)
   111d4:	ldr	lr, [pc, #4]	; 111e0 <calloc@plt-0x4>
   111d8:	add	lr, pc, lr
   111dc:	ldr	pc, [lr, #8]!
   111e0:	andeq	r5, r1, r0, lsr #28

000111e4 <calloc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #86016	; 0x15000
   111ec:	ldr	pc, [ip, #3616]!	; 0xe20

000111f0 <raise@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #86016	; 0x15000
   111f8:	ldr	pc, [ip, #3608]!	; 0xe18

000111fc <ply_command_parser_get_options@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #86016	; 0x15000
   11204:	ldr	pc, [ip, #3600]!	; 0xe10

00011208 <ply_list_get_length@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #86016	; 0x15000
   11210:	ldr	pc, [ip, #3592]!	; 0xe08

00011214 <ply_event_loop_free@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #86016	; 0x15000
   1121c:	ldr	pc, [ip, #3584]!	; 0xe00

00011220 <ply_list_get_next_node@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #86016	; 0x15000
   11228:	ldr	pc, [ip, #3576]!	; 0xdf8

0001122c <free@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #86016	; 0x15000
   11234:	ldr	pc, [ip, #3568]!	; 0xdf0

00011238 <strndup@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #86016	; 0x15000
   11240:	ldr	pc, [ip, #3560]!	; 0xde8

00011244 <_exit@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #86016	; 0x15000
   1124c:	ldr	pc, [ip, #3552]!	; 0xde0

00011250 <execvp@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #86016	; 0x15000
   11258:	ldr	pc, [ip, #3544]!	; 0xdd8

0001125c <ply_logger_flush@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #86016	; 0x15000
   11264:	ldr	pc, [ip, #3536]!	; 0xdd0

00011268 <signal@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #86016	; 0x15000
   11270:	ldr	pc, [ip, #3528]!	; 0xdc8

00011274 <ply_write@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #86016	; 0x15000
   1127c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011280 <ply_array_add_pointer_element@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #86016	; 0x15000
   11288:	ldr	pc, [ip, #3512]!	; 0xdb8

0001128c <ply_event_loop_process_pending_events@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #86016	; 0x15000
   11294:	ldr	pc, [ip, #3504]!	; 0xdb0

00011298 <ply_list_node_get_data@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #86016	; 0x15000
   112a0:	ldr	pc, [ip, #3496]!	; 0xda8

000112a4 <ply_array_free@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #86016	; 0x15000
   112ac:	ldr	pc, [ip, #3488]!	; 0xda0

000112b0 <strdup@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #86016	; 0x15000
   112b8:	ldr	pc, [ip, #3480]!	; 0xd98

000112bc <__stack_chk_fail@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #86016	; 0x15000
   112c4:	ldr	pc, [ip, #3472]!	; 0xd90

000112c8 <dup2@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #86016	; 0x15000
   112d0:	ldr	pc, [ip, #3464]!	; 0xd88

000112d4 <ply_command_parser_new@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #86016	; 0x15000
   112dc:	ldr	pc, [ip, #3456]!	; 0xd80

000112e0 <ply_logger_toggle_tracing@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #86016	; 0x15000
   112e8:	ldr	pc, [ip, #3448]!	; 0xd78

000112ec <strsignal@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #86016	; 0x15000
   112f4:	ldr	pc, [ip, #3440]!	; 0xd70

000112f8 <ply_event_loop_stop_watching_fd@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #86016	; 0x15000
   11300:	ldr	pc, [ip, #3432]!	; 0xd68

00011304 <ply_kernel_command_line_has_argument@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #86016	; 0x15000
   1130c:	ldr	pc, [ip, #3424]!	; 0xd60

00011310 <waitpid@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #86016	; 0x15000
   11318:	ldr	pc, [ip, #3416]!	; 0xd58

0001131c <ply_event_loop_run@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #86016	; 0x15000
   11324:	ldr	pc, [ip, #3408]!	; 0xd50

00011328 <ply_command_parser_get_help_string@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #86016	; 0x15000
   11330:	ldr	pc, [ip, #3400]!	; 0xd48

00011334 <__asprintf_chk@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #86016	; 0x15000
   1133c:	ldr	pc, [ip, #3392]!	; 0xd40

00011340 <puts@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #86016	; 0x15000
   11348:	ldr	pc, [ip, #3384]!	; 0xd38

0001134c <malloc@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #86016	; 0x15000
   11354:	ldr	pc, [ip, #3376]!	; 0xd30

00011358 <__libc_start_main@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #86016	; 0x15000
   11360:	ldr	pc, [ip, #3368]!	; 0xd28

00011364 <__gmon_start__@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #86016	; 0x15000
   1136c:	ldr	pc, [ip, #3360]!	; 0xd20

00011370 <ply_logger_is_tracing_enabled@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #86016	; 0x15000
   11378:	ldr	pc, [ip, #3352]!	; 0xd18

0001137c <strlen@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #86016	; 0x15000
   11384:	ldr	pc, [ip, #3344]!	; 0xd10

00011388 <ply_event_loop_exit@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #86016	; 0x15000
   11390:	ldr	pc, [ip, #3336]!	; 0xd08

00011394 <ply_list_append_data@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #86016	; 0x15000
   1139c:	ldr	pc, [ip, #3328]!	; 0xd00

000113a0 <__errno_location@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #86016	; 0x15000
   113a8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113ac <ply_array_new@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #86016	; 0x15000
   113b4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113b8 <ply_logger_inject_with_non_literal_format_string@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #86016	; 0x15000
   113c0:	ldr	pc, [ip, #3304]!	; 0xce8

000113c4 <ply_command_parser_add_options@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #86016	; 0x15000
   113cc:	ldr	pc, [ip, #3296]!	; 0xce0

000113d0 <ply_list_remove_node@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #86016	; 0x15000
   113d8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113dc <__printf_chk@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #86016	; 0x15000
   113e4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113e8 <ply_command_parser_get_command_options@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #86016	; 0x15000
   113f0:	ldr	pc, [ip, #3272]!	; 0xcc8

000113f4 <ply_read@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #86016	; 0x15000
   113fc:	ldr	pc, [ip, #3264]!	; 0xcc0

00011400 <write@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #86016	; 0x15000
   11408:	ldr	pc, [ip, #3256]!	; 0xcb8

0001140c <ply_list_get_first_node@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #86016	; 0x15000
   11414:	ldr	pc, [ip, #3248]!	; 0xcb0

00011418 <ply_list_new@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #86016	; 0x15000
   11420:	ldr	pc, [ip, #3240]!	; 0xca8

00011424 <ply_connect_to_unix_socket@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #86016	; 0x15000
   1142c:	ldr	pc, [ip, #3232]!	; 0xca0

00011430 <ply_logger_get_error_default@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #86016	; 0x15000
   11438:	ldr	pc, [ip, #3224]!	; 0xc98

0001143c <ply_event_loop_watch_fd@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #86016	; 0x15000
   11444:	ldr	pc, [ip, #3216]!	; 0xc90

00011448 <fork@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #86016	; 0x15000
   11450:	ldr	pc, [ip, #3208]!	; 0xc88

00011454 <ply_event_loop_watch_for_exit@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #86016	; 0x15000
   1145c:	ldr	pc, [ip, #3200]!	; 0xc80

00011460 <ply_free_string_array@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #86016	; 0x15000
   11468:	ldr	pc, [ip, #3192]!	; 0xc78

0001146c <ply_array_steal_pointer_elements@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #86016	; 0x15000
   11474:	ldr	pc, [ip, #3184]!	; 0xc70

00011478 <ply_command_parser_add_command@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #86016	; 0x15000
   11480:	ldr	pc, [ip, #3176]!	; 0xc68

00011484 <ply_open_unidirectional_pipe@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #86016	; 0x15000
   1148c:	ldr	pc, [ip, #3168]!	; 0xc60

00011490 <ply_list_free@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #86016	; 0x15000
   11498:	ldr	pc, [ip, #3160]!	; 0xc58

0001149c <ply_command_parser_add_command_alias@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #86016	; 0x15000
   114a4:	ldr	pc, [ip, #3152]!	; 0xc50

000114a8 <fputs@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #86016	; 0x15000
   114b0:	ldr	pc, [ip, #3144]!	; 0xc48

000114b4 <abort@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #86016	; 0x15000
   114bc:	ldr	pc, [ip, #3136]!	; 0xc40

000114c0 <ply_command_parser_parse_arguments@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #86016	; 0x15000
   114c8:	ldr	pc, [ip, #3128]!	; 0xc38

000114cc <close@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #86016	; 0x15000
   114d4:	ldr	pc, [ip, #3120]!	; 0xc30

000114d8 <ply_read_uint32@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #86016	; 0x15000
   114e0:	ldr	pc, [ip, #3112]!	; 0xc28

000114e4 <ply_event_loop_new@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #86016	; 0x15000
   114ec:	ldr	pc, [ip, #3104]!	; 0xc20

000114f0 <__assert_fail@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #86016	; 0x15000
   114f8:	ldr	pc, [ip, #3096]!	; 0xc18

Disassembly of section .text:

000114fc <.text>:
   114fc:	ldr	r2, [pc, #2656]	; 11f64 <__assert_fail@plt+0xa74>
   11500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11504:	sub	sp, sp, #252	; 0xfc
   11508:	add	r4, sp, #212	; 0xd4
   1150c:	ldr	r3, [r2]
   11510:	mov	r5, #0
   11514:	str	r0, [sp, #176]	; 0xb0
   11518:	str	r1, [sp, #180]	; 0xb4
   1151c:	mov	r0, #13
   11520:	mov	r1, #1
   11524:	str	r3, [sp, #244]	; 0xf4
   11528:	str	r5, [r4, #4]
   1152c:	str	r5, [sp, #212]	; 0xd4
   11530:	str	r5, [r4, #8]
   11534:	bl	11268 <signal@plt>
   11538:	bl	114e4 <ply_event_loop_new@plt>
   1153c:	ldr	sl, [pc, #2596]	; 11f68 <__assert_fail@plt+0xa78>
   11540:	ldr	r9, [pc, #2596]	; 11f6c <__assert_fail@plt+0xa7c>
   11544:	ldr	r8, [pc, #2596]	; 11f70 <__assert_fail@plt+0xa80>
   11548:	mov	r6, #2
   1154c:	mov	fp, #3
   11550:	ldr	r7, [pc, #2588]	; 11f74 <__assert_fail@plt+0xa84>
   11554:	str	r0, [sp, #212]	; 0xd4
   11558:	bl	12c6c <__assert_fail@plt+0x177c>
   1155c:	ldr	r1, [pc, #2580]	; 11f78 <__assert_fail@plt+0xa88>
   11560:	str	r0, [sp, #216]	; 0xd8
   11564:	ldr	r0, [pc, #2576]	; 11f7c <__assert_fail@plt+0xa8c>
   11568:	bl	112d4 <ply_command_parser_new@plt>
   1156c:	ldr	ip, [pc, #2572]	; 11f80 <__assert_fail@plt+0xa90>
   11570:	ldr	r3, [pc, #2572]	; 11f84 <__assert_fail@plt+0xa94>
   11574:	str	ip, [sp, #156]	; 0x9c
   11578:	ldr	ip, [pc, #2568]	; 11f88 <__assert_fail@plt+0xa98>
   1157c:	ldr	r2, [pc, #2568]	; 11f8c <__assert_fail@plt+0xa9c>
   11580:	str	ip, [sp, #148]	; 0x94
   11584:	ldr	ip, [pc, #2564]	; 11f90 <__assert_fail@plt+0xaa0>
   11588:	ldr	r1, [pc, #2564]	; 11f94 <__assert_fail@plt+0xaa4>
   1158c:	str	ip, [sp, #144]	; 0x90
   11590:	ldr	ip, [pc, #2560]	; 11f98 <__assert_fail@plt+0xaa8>
   11594:	str	r3, [sp, #160]	; 0xa0
   11598:	str	ip, [sp, #124]	; 0x7c
   1159c:	ldr	ip, [pc, #2552]	; 11f9c <__assert_fail@plt+0xaac>
   115a0:	ldr	r3, [pc, #2552]	; 11fa0 <__assert_fail@plt+0xab0>
   115a4:	str	ip, [sp, #108]	; 0x6c
   115a8:	ldr	ip, [pc, #2548]	; 11fa4 <__assert_fail@plt+0xab4>
   115ac:	str	r2, [sp, #136]	; 0x88
   115b0:	str	ip, [sp, #96]	; 0x60
   115b4:	ldr	ip, [pc, #2540]	; 11fa8 <__assert_fail@plt+0xab8>
   115b8:	ldr	r2, [pc, #2540]	; 11fac <__assert_fail@plt+0xabc>
   115bc:	str	ip, [sp, #84]	; 0x54
   115c0:	ldr	ip, [pc, #2536]	; 11fb0 <__assert_fail@plt+0xac0>
   115c4:	str	r1, [sp, #100]	; 0x64
   115c8:	str	ip, [sp, #72]	; 0x48
   115cc:	ldr	ip, [pc, #2528]	; 11fb4 <__assert_fail@plt+0xac4>
   115d0:	ldr	r1, [pc, #2528]	; 11fb8 <__assert_fail@plt+0xac8>
   115d4:	str	ip, [sp, #60]	; 0x3c
   115d8:	ldr	ip, [pc, #2524]	; 11fbc <__assert_fail@plt+0xacc>
   115dc:	str	r3, [sp, #88]	; 0x58
   115e0:	str	ip, [sp, #48]	; 0x30
   115e4:	ldr	r3, [pc, #2516]	; 11fc0 <__assert_fail@plt+0xad0>
   115e8:	ldr	ip, [pc, #2516]	; 11fc4 <__assert_fail@plt+0xad4>
   115ec:	str	r0, [sp, #220]	; 0xdc
   115f0:	str	r2, [sp, #76]	; 0x4c
   115f4:	str	r1, [sp, #64]	; 0x40
   115f8:	str	r3, [sp, #52]	; 0x34
   115fc:	str	sl, [sp, #112]	; 0x70
   11600:	str	r5, [sp, #168]	; 0xa8
   11604:	str	r5, [sp, #164]	; 0xa4
   11608:	str	r5, [sp, #152]	; 0x98
   1160c:	str	r5, [sp, #116]	; 0x74
   11610:	str	r5, [sp, #104]	; 0x68
   11614:	str	r5, [sp, #92]	; 0x5c
   11618:	str	r5, [sp, #80]	; 0x50
   1161c:	str	r5, [sp, #68]	; 0x44
   11620:	str	r5, [sp, #56]	; 0x38
   11624:	str	r6, [sp, #140]	; 0x8c
   11628:	str	r6, [sp, #128]	; 0x80
   1162c:	str	r9, [sp, #132]	; 0x84
   11630:	str	r8, [sp, #120]	; 0x78
   11634:	str	r5, [sp, #44]	; 0x2c
   11638:	str	ip, [sp, #40]	; 0x28
   1163c:	ldr	ip, [pc, #2436]	; 11fc8 <__assert_fail@plt+0xad8>
   11640:	ldr	r2, [pc, #2436]	; 11fcc <__assert_fail@plt+0xadc>
   11644:	str	ip, [sp, #36]	; 0x24
   11648:	ldr	ip, [pc, #2432]	; 11fd0 <__assert_fail@plt+0xae0>
   1164c:	ldr	r1, [pc, #2432]	; 11fd4 <__assert_fail@plt+0xae4>
   11650:	str	ip, [sp, #24]
   11654:	ldr	ip, [pc, #2428]	; 11fd8 <__assert_fail@plt+0xae8>
   11658:	str	r2, [sp, #28]
   1165c:	str	ip, [sp, #12]
   11660:	ldr	r2, [pc, #2420]	; 11fdc <__assert_fail@plt+0xaec>
   11664:	ldr	ip, [pc, #2420]	; 11fe0 <__assert_fail@plt+0xaf0>
   11668:	mov	r3, r5
   1166c:	str	ip, [sp]
   11670:	str	r1, [sp, #16]
   11674:	str	r2, [sp, #4]
   11678:	ldr	r1, [pc, #2404]	; 11fe4 <__assert_fail@plt+0xaf4>
   1167c:	ldr	r2, [pc, #2404]	; 11fe8 <__assert_fail@plt+0xaf8>
   11680:	str	r6, [sp, #32]
   11684:	str	r5, [sp, #20]
   11688:	str	r5, [sp, #8]
   1168c:	bl	113c4 <ply_command_parser_add_options@plt>
   11690:	ldr	r2, [pc, #2388]	; 11fec <__assert_fail@plt+0xafc>
   11694:	ldr	r3, [pc, #2388]	; 11ff0 <__assert_fail@plt+0xb00>
   11698:	ldr	r0, [pc, #2388]	; 11ff4 <__assert_fail@plt+0xb04>
   1169c:	ldr	r1, [pc, #2388]	; 11ff8 <__assert_fail@plt+0xb08>
   116a0:	str	r2, [sp, #32]
   116a4:	str	r3, [sp, #28]
   116a8:	ldr	r2, [pc, #2380]	; 11ffc <__assert_fail@plt+0xb0c>
   116ac:	ldr	r3, [pc, #2380]	; 12000 <__assert_fail@plt+0xb10>
   116b0:	str	r0, [sp, #20]
   116b4:	str	r1, [sp, #16]
   116b8:	str	r2, [sp, #8]
   116bc:	str	r3, [sp, #4]
   116c0:	ldr	r2, [pc, #2364]	; 12004 <__assert_fail@plt+0xb14>
   116c4:	ldr	r3, [pc, #2364]	; 12008 <__assert_fail@plt+0xb18>
   116c8:	ldr	r1, [pc, #2364]	; 1200c <__assert_fail@plt+0xb1c>
   116cc:	ldr	r0, [sp, #220]	; 0xdc
   116d0:	str	r5, [sp, #40]	; 0x28
   116d4:	str	r5, [sp, #36]	; 0x24
   116d8:	str	r5, [sp, #24]
   116dc:	str	r5, [sp, #12]
   116e0:	str	r4, [sp]
   116e4:	bl	11478 <ply_command_parser_add_command@plt>
   116e8:	ldr	r2, [pc, #2336]	; 12010 <__assert_fail@plt+0xb20>
   116ec:	ldr	r3, [pc, #2336]	; 12014 <__assert_fail@plt+0xb24>
   116f0:	str	r2, [sp, #8]
   116f4:	str	r3, [sp, #4]
   116f8:	str	fp, [sp, #12]
   116fc:	ldr	r3, [pc, #2324]	; 12018 <__assert_fail@plt+0xb28>
   11700:	ldr	r2, [pc, #2324]	; 1201c <__assert_fail@plt+0xb2c>
   11704:	ldr	r1, [pc, #2324]	; 12020 <__assert_fail@plt+0xb30>
   11708:	ldr	r0, [sp, #220]	; 0xdc
   1170c:	str	r5, [sp, #16]
   11710:	str	r4, [sp]
   11714:	bl	11478 <ply_command_parser_add_command@plt>
   11718:	ldr	r2, [pc, #2308]	; 12024 <__assert_fail@plt+0xb34>
   1171c:	ldr	r3, [pc, #2308]	; 12028 <__assert_fail@plt+0xb38>
   11720:	mov	r1, r9
   11724:	str	r2, [sp, #8]
   11728:	str	r3, [sp, #4]
   1172c:	ldr	r2, [pc, #2296]	; 1202c <__assert_fail@plt+0xb3c>
   11730:	ldr	r3, [pc, #2296]	; 12030 <__assert_fail@plt+0xb40>
   11734:	ldr	r0, [sp, #220]	; 0xdc
   11738:	str	r5, [sp, #16]
   1173c:	str	r6, [sp, #12]
   11740:	str	r4, [sp]
   11744:	bl	11478 <ply_command_parser_add_command@plt>
   11748:	ldr	r0, [pc, #2276]	; 12034 <__assert_fail@plt+0xb44>
   1174c:	ldr	r1, [pc, #2276]	; 12038 <__assert_fail@plt+0xb48>
   11750:	ldr	r2, [pc, #2276]	; 1203c <__assert_fail@plt+0xb4c>
   11754:	ldr	r3, [pc, #2276]	; 12040 <__assert_fail@plt+0xb50>
   11758:	str	r0, [sp, #20]
   1175c:	str	r1, [sp, #16]
   11760:	str	r2, [sp, #8]
   11764:	str	r3, [sp, #4]
   11768:	ldr	r2, [pc, #2260]	; 12044 <__assert_fail@plt+0xb54>
   1176c:	ldr	r3, [pc, #2260]	; 12048 <__assert_fail@plt+0xb58>
   11770:	ldr	r1, [pc, #2260]	; 1204c <__assert_fail@plt+0xb5c>
   11774:	ldr	r0, [sp, #220]	; 0xdc
   11778:	str	r5, [sp, #28]
   1177c:	str	r5, [sp, #24]
   11780:	str	r6, [sp, #12]
   11784:	str	r4, [sp]
   11788:	bl	11478 <ply_command_parser_add_command@plt>
   1178c:	ldr	r1, [pc, #2068]	; 11fa8 <__assert_fail@plt+0xab8>
   11790:	ldr	r3, [pc, #2232]	; 12050 <__assert_fail@plt+0xb60>
   11794:	ldr	r2, [pc, #2232]	; 12054 <__assert_fail@plt+0xb64>
   11798:	ldr	r0, [sp, #220]	; 0xdc
   1179c:	strd	r4, [sp]
   117a0:	bl	11478 <ply_command_parser_add_command@plt>
   117a4:	ldr	r1, [pc, #2040]	; 11fa4 <__assert_fail@plt+0xab4>
   117a8:	ldr	r3, [pc, #2216]	; 12058 <__assert_fail@plt+0xb68>
   117ac:	ldr	r2, [pc, #2216]	; 1205c <__assert_fail@plt+0xb6c>
   117b0:	ldr	r0, [sp, #220]	; 0xdc
   117b4:	strd	r4, [sp]
   117b8:	bl	11478 <ply_command_parser_add_command@plt>
   117bc:	ldr	r0, [pc, #2204]	; 12060 <__assert_fail@plt+0xb70>
   117c0:	ldr	r3, [pc, #2204]	; 12064 <__assert_fail@plt+0xb74>
   117c4:	mov	r2, sl
   117c8:	ldr	ip, [pc, #2200]	; 12068 <__assert_fail@plt+0xb78>
   117cc:	ldr	sl, [pc, #2200]	; 1206c <__assert_fail@plt+0xb7c>
   117d0:	str	fp, [sp, #36]	; 0x24
   117d4:	str	r0, [sp, #32]
   117d8:	ldr	fp, [pc, #2192]	; 12070 <__assert_fail@plt+0xb80>
   117dc:	ldr	r0, [pc, #2192]	; 12074 <__assert_fail@plt+0xb84>
   117e0:	str	r3, [sp, #28]
   117e4:	ldr	r3, [pc, #2188]	; 12078 <__assert_fail@plt+0xb88>
   117e8:	ldr	r1, [pc, #1964]	; 11f9c <__assert_fail@plt+0xaac>
   117ec:	str	sl, [sp, #44]	; 0x2c
   117f0:	str	fp, [sp, #40]	; 0x28
   117f4:	str	r0, [sp, #20]
   117f8:	str	ip, [sp, #16]
   117fc:	str	r3, [sp, #8]
   11800:	str	r7, [sp, #4]
   11804:	ldr	r3, [pc, #2160]	; 1207c <__assert_fail@plt+0xb8c>
   11808:	ldr	r0, [sp, #220]	; 0xdc
   1180c:	str	r5, [sp, #52]	; 0x34
   11810:	str	r5, [sp, #48]	; 0x30
   11814:	str	r6, [sp, #24]
   11818:	str	r6, [sp, #12]
   1181c:	str	r4, [sp]
   11820:	bl	11478 <ply_command_parser_add_command@plt>
   11824:	ldr	ip, [pc, #2108]	; 12068 <__assert_fail@plt+0xb78>
   11828:	ldr	r2, [pc, #2128]	; 12080 <__assert_fail@plt+0xb90>
   1182c:	ldr	r3, [pc, #2128]	; 12084 <__assert_fail@plt+0xb94>
   11830:	str	sl, [sp, #32]
   11834:	str	fp, [sp, #28]
   11838:	ldr	sl, [pc, #2120]	; 12088 <__assert_fail@plt+0xb98>
   1183c:	ldr	fp, [pc, #2120]	; 1208c <__assert_fail@plt+0xb9c>
   11840:	str	ip, [sp, #16]
   11844:	stm	sp, {r4, r7}
   11848:	str	r2, [sp, #20]
   1184c:	str	r3, [sp, #8]
   11850:	ldr	r2, [pc, #2104]	; 12090 <__assert_fail@plt+0xba0>
   11854:	ldr	r3, [pc, #2104]	; 12094 <__assert_fail@plt+0xba4>
   11858:	ldr	r1, [pc, #2104]	; 12098 <__assert_fail@plt+0xba8>
   1185c:	ldr	r0, [sp, #220]	; 0xdc
   11860:	str	r5, [sp, #40]	; 0x28
   11864:	str	r5, [sp, #36]	; 0x24
   11868:	str	r6, [sp, #24]
   1186c:	str	r6, [sp, #12]
   11870:	bl	11478 <ply_command_parser_add_command@plt>
   11874:	ldr	r3, [pc, #2080]	; 1209c <__assert_fail@plt+0xbac>
   11878:	ldr	r2, [pc, #2080]	; 120a0 <__assert_fail@plt+0xbb0>
   1187c:	ldr	r1, [pc, #2080]	; 120a4 <__assert_fail@plt+0xbb4>
   11880:	ldr	r0, [sp, #220]	; 0xdc
   11884:	str	r5, [sp, #16]
   11888:	str	r6, [sp, #12]
   1188c:	str	r4, [sp]
   11890:	str	sl, [sp, #8]
   11894:	str	fp, [sp, #4]
   11898:	bl	11478 <ply_command_parser_add_command@plt>
   1189c:	ldr	r2, [pc, #2052]	; 120a8 <__assert_fail@plt+0xbb8>
   118a0:	ldr	r1, [pc, #2044]	; 120a4 <__assert_fail@plt+0xbb4>
   118a4:	ldr	r0, [sp, #220]	; 0xdc
   118a8:	bl	1149c <ply_command_parser_add_command_alias@plt>
   118ac:	ldr	r3, [pc, #2040]	; 120ac <__assert_fail@plt+0xbbc>
   118b0:	ldr	r2, [pc, #2040]	; 120b0 <__assert_fail@plt+0xbc0>
   118b4:	ldr	r1, [pc, #2040]	; 120b4 <__assert_fail@plt+0xbc4>
   118b8:	ldr	r0, [sp, #220]	; 0xdc
   118bc:	str	sl, [sp, #8]
   118c0:	str	r5, [sp, #16]
   118c4:	str	r6, [sp, #12]
   118c8:	stm	sp, {r4, fp}
   118cc:	bl	11478 <ply_command_parser_add_command@plt>
   118d0:	ldr	r2, [pc, #2016]	; 120b8 <__assert_fail@plt+0xbc8>
   118d4:	ldr	r3, [pc, #2016]	; 120bc <__assert_fail@plt+0xbcc>
   118d8:	stm	sp, {r4, r7}
   118dc:	ldr	r7, [pc, #2012]	; 120c0 <__assert_fail@plt+0xbd0>
   118e0:	str	r2, [sp, #20]
   118e4:	str	r3, [sp, #8]
   118e8:	ldr	r2, [pc, #2004]	; 120c4 <__assert_fail@plt+0xbd4>
   118ec:	ldr	r3, [pc, #2004]	; 120c8 <__assert_fail@plt+0xbd8>
   118f0:	ldr	r1, [pc, #2004]	; 120cc <__assert_fail@plt+0xbdc>
   118f4:	ldr	r0, [sp, #220]	; 0xdc
   118f8:	str	r5, [sp, #28]
   118fc:	str	r6, [sp, #24]
   11900:	str	r6, [sp, #12]
   11904:	str	r7, [sp, #16]
   11908:	bl	11478 <ply_command_parser_add_command@plt>
   1190c:	ldr	r3, [pc, #1980]	; 120d0 <__assert_fail@plt+0xbe0>
   11910:	ldr	r2, [pc, #1664]	; 11f98 <__assert_fail@plt+0xaa8>
   11914:	mov	r1, r8
   11918:	str	r3, [sp, #8]
   1191c:	ldr	r0, [sp, #220]	; 0xdc
   11920:	ldr	r3, [pc, #1964]	; 120d4 <__assert_fail@plt+0xbe4>
   11924:	str	r5, [sp, #16]
   11928:	str	r6, [sp, #12]
   1192c:	stm	sp, {r4, r7}
   11930:	bl	11478 <ply_command_parser_add_command@plt>
   11934:	ldr	r3, [pc, #1948]	; 120d8 <__assert_fail@plt+0xbe8>
   11938:	ldr	r2, [pc, #1948]	; 120dc <__assert_fail@plt+0xbec>
   1193c:	ldr	r1, [pc, #1948]	; 120e0 <__assert_fail@plt+0xbf0>
   11940:	ldr	r0, [sp, #220]	; 0xdc
   11944:	strd	r4, [sp]
   11948:	bl	11478 <ply_command_parser_add_command@plt>
   1194c:	ldr	r3, [pc, #1936]	; 120e4 <__assert_fail@plt+0xbf4>
   11950:	ldr	r2, [pc, #1936]	; 120e8 <__assert_fail@plt+0xbf8>
   11954:	ldr	r1, [pc, #1936]	; 120ec <__assert_fail@plt+0xbfc>
   11958:	ldr	r0, [sp, #220]	; 0xdc
   1195c:	strd	r4, [sp]
   11960:	bl	11478 <ply_command_parser_add_command@plt>
   11964:	ldr	r2, [pc, #1564]	; 11f88 <__assert_fail@plt+0xa98>
   11968:	ldr	r3, [pc, #1920]	; 120f0 <__assert_fail@plt+0xc00>
   1196c:	ldr	r1, [pc, #1920]	; 120f4 <__assert_fail@plt+0xc04>
   11970:	ldr	r0, [sp, #220]	; 0xdc
   11974:	strd	r4, [sp]
   11978:	bl	11478 <ply_command_parser_add_command@plt>
   1197c:	ldr	r3, [pc, #1908]	; 120f8 <__assert_fail@plt+0xc08>
   11980:	ldr	r2, [pc, #1908]	; 120fc <__assert_fail@plt+0xc0c>
   11984:	ldr	r1, [pc, #1908]	; 12100 <__assert_fail@plt+0xc10>
   11988:	ldr	r0, [sp, #220]	; 0xdc
   1198c:	strd	r4, [sp]
   11990:	bl	11478 <ply_command_parser_add_command@plt>
   11994:	ldr	r3, [pc, #1896]	; 12104 <__assert_fail@plt+0xc14>
   11998:	ldr	r2, [pc, #1896]	; 12108 <__assert_fail@plt+0xc18>
   1199c:	ldr	r1, [pc, #1896]	; 1210c <__assert_fail@plt+0xc1c>
   119a0:	ldr	r0, [sp, #220]	; 0xdc
   119a4:	strd	r4, [sp]
   119a8:	bl	11478 <ply_command_parser_add_command@plt>
   119ac:	ldr	r0, [pc, #1884]	; 12110 <__assert_fail@plt+0xc20>
   119b0:	ldr	r3, [pc, #1884]	; 12114 <__assert_fail@plt+0xc24>
   119b4:	ldr	r2, [pc, #1544]	; 11fc4 <__assert_fail@plt+0xad4>
   119b8:	ldr	r1, [pc, #1544]	; 11fc8 <__assert_fail@plt+0xad8>
   119bc:	str	r0, [sp, #8]
   119c0:	str	r3, [sp, #4]
   119c4:	ldr	r0, [sp, #220]	; 0xdc
   119c8:	ldr	r3, [pc, #1864]	; 12118 <__assert_fail@plt+0xc28>
   119cc:	str	r5, [sp, #16]
   119d0:	str	r5, [sp, #12]
   119d4:	str	r4, [sp]
   119d8:	bl	11478 <ply_command_parser_add_command@plt>
   119dc:	ldr	r3, [sp, #176]	; 0xb0
   119e0:	ldr	r2, [sp, #180]	; 0xb4
   119e4:	ldr	r1, [sp, #212]	; 0xd4
   119e8:	ldr	r0, [sp, #220]	; 0xdc
   119ec:	bl	114c0 <ply_command_parser_parse_arguments@plt>
   119f0:	cmp	r0, r5
   119f4:	beq	11be8 <__assert_fail@plt+0x6f8>
   119f8:	add	r2, sp, #197	; 0xc5
   119fc:	str	r2, [sp]
   11a00:	ldr	r2, [pc, #1416]	; 11f90 <__assert_fail@plt+0xaa0>
   11a04:	add	r1, sp, #199	; 0xc7
   11a08:	str	r2, [sp, #100]	; 0x64
   11a0c:	ldr	r2, [pc, #1388]	; 11f80 <__assert_fail@plt+0xa90>
   11a10:	add	ip, sp, #198	; 0xc6
   11a14:	str	r2, [sp, #92]	; 0x5c
   11a18:	ldr	r2, [pc, #1404]	; 11f9c <__assert_fail@plt+0xaac>
   11a1c:	ldr	r3, [pc, #1460]	; 11fd8 <__assert_fail@plt+0xae8>
   11a20:	str	r2, [sp, #68]	; 0x44
   11a24:	ldr	r2, [pc, #1400]	; 11fa4 <__assert_fail@plt+0xab4>
   11a28:	str	r1, [sp, #8]
   11a2c:	str	r2, [sp, #60]	; 0x3c
   11a30:	ldr	r2, [pc, #1392]	; 11fa8 <__assert_fail@plt+0xab8>
   11a34:	ldr	r1, [pc, #1420]	; 11fc8 <__assert_fail@plt+0xad8>
   11a38:	str	r2, [sp, #52]	; 0x34
   11a3c:	ldr	r2, [pc, #1388]	; 11fb0 <__assert_fail@plt+0xac0>
   11a40:	ldr	r0, [pc, #1416]	; 11fd0 <__assert_fail@plt+0xae0>
   11a44:	str	r2, [sp, #44]	; 0x2c
   11a48:	ldr	r2, [pc, #1380]	; 11fb4 <__assert_fail@plt+0xac4>
   11a4c:	str	ip, [sp, #104]	; 0x68
   11a50:	str	r2, [sp, #36]	; 0x24
   11a54:	add	ip, sp, #196	; 0xc4
   11a58:	ldr	r2, [pc, #1372]	; 11fbc <__assert_fail@plt+0xacc>
   11a5c:	str	ip, [sp, #96]	; 0x60
   11a60:	add	ip, sp, #200	; 0xc8
   11a64:	str	r3, [sp, #4]
   11a68:	str	r5, [sp, #108]	; 0x6c
   11a6c:	ldr	r3, [pc, #1388]	; 11fe0 <__assert_fail@plt+0xaf0>
   11a70:	str	r9, [sp, #84]	; 0x54
   11a74:	str	r8, [sp, #76]	; 0x4c
   11a78:	add	lr, sp, #189	; 0xbd
   11a7c:	str	r2, [sp, #28]
   11a80:	str	r1, [sp, #20]
   11a84:	str	r0, [sp, #12]
   11a88:	str	ip, [sp, #88]	; 0x58
   11a8c:	add	fp, sp, #208	; 0xd0
   11a90:	add	ip, sp, #204	; 0xcc
   11a94:	add	sl, sp, #193	; 0xc1
   11a98:	add	r9, sp, #195	; 0xc3
   11a9c:	add	r8, sp, #194	; 0xc2
   11aa0:	add	r7, sp, #192	; 0xc0
   11aa4:	add	r6, sp, #191	; 0xbf
   11aa8:	add	r5, sp, #190	; 0xbe
   11aac:	add	r2, sp, #188	; 0xbc
   11ab0:	ldr	r1, [pc, #1324]	; 11fe4 <__assert_fail@plt+0xaf4>
   11ab4:	ldr	r0, [sp, #220]	; 0xdc
   11ab8:	str	fp, [sp, #80]	; 0x50
   11abc:	str	sl, [sp, #72]	; 0x48
   11ac0:	str	r9, [sp, #64]	; 0x40
   11ac4:	str	r8, [sp, #56]	; 0x38
   11ac8:	str	r7, [sp, #48]	; 0x30
   11acc:	str	r6, [sp, #40]	; 0x28
   11ad0:	str	r5, [sp, #32]
   11ad4:	str	lr, [sp, #24]
   11ad8:	str	ip, [sp, #16]
   11adc:	bl	111fc <ply_command_parser_get_options@plt>
   11ae0:	ldrb	r3, [sp, #188]	; 0xbc
   11ae4:	cmp	r3, #0
   11ae8:	bne	11c30 <__assert_fail@plt+0x740>
   11aec:	ldr	r3, [sp, #176]	; 0xb0
   11af0:	cmp	r3, #1
   11af4:	ble	11c68 <__assert_fail@plt+0x778>
   11af8:	ldr	r0, [pc, #1564]	; 1211c <__assert_fail@plt+0xc2c>
   11afc:	bl	11304 <ply_kernel_command_line_has_argument@plt>
   11b00:	cmp	r0, #0
   11b04:	bne	11cb4 <__assert_fail@plt+0x7c4>
   11b08:	ldrb	r3, [sp, #197]	; 0xc5
   11b0c:	cmp	r3, #0
   11b10:	bne	11c98 <__assert_fail@plt+0x7a8>
   11b14:	ldrb	r3, [sp, #199]	; 0xc7
   11b18:	cmp	r3, #0
   11b1c:	bne	11c88 <__assert_fail@plt+0x798>
   11b20:	mov	r2, r4
   11b24:	ldr	r1, [pc, #1524]	; 12120 <__assert_fail@plt+0xc30>
   11b28:	ldr	r0, [sp, #216]	; 0xd8
   11b2c:	bl	12cf0 <__assert_fail@plt+0x1800>
   11b30:	cmp	r0, #0
   11b34:	bne	11b78 <__assert_fail@plt+0x688>
   11b38:	bl	113a0 <__errno_location@plt>
   11b3c:	mov	r5, r0
   11b40:	ldr	r6, [r0]
   11b44:	bl	11430 <ply_logger_get_error_default@plt>
   11b48:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   11b4c:	cmp	r0, #0
   11b50:	bne	11d84 <__assert_fail@plt+0x894>
   11b54:	ldrb	r3, [sp, #190]	; 0xbe
   11b58:	cmp	r3, #0
   11b5c:	bne	11dbc <__assert_fail@plt+0x8cc>
   11b60:	ldrb	r6, [sp, #191]	; 0xbf
   11b64:	cmp	r6, #0
   11b68:	bne	11dd8 <__assert_fail@plt+0x8e8>
   11b6c:	ldrb	r3, [sp, #196]	; 0xc4
   11b70:	cmp	r3, #0
   11b74:	bne	11d1c <__assert_fail@plt+0x82c>
   11b78:	ldr	r1, [sp, #212]	; 0xd4
   11b7c:	ldr	r0, [sp, #216]	; 0xd8
   11b80:	bl	136c8 <__assert_fail@plt+0x21d8>
   11b84:	ldrb	r3, [sp, #194]	; 0xc2
   11b88:	cmp	r3, #0
   11b8c:	bne	11cd0 <__assert_fail@plt+0x7e0>
   11b90:	ldrb	r1, [sp, #195]	; 0xc3
   11b94:	cmp	r1, #0
   11b98:	bne	11d6c <__assert_fail@plt+0x87c>
   11b9c:	ldrb	r3, [sp, #189]	; 0xbd
   11ba0:	cmp	r3, #0
   11ba4:	bne	11d04 <__assert_fail@plt+0x814>
   11ba8:	ldrb	r3, [sp, #190]	; 0xbe
   11bac:	cmp	r3, #0
   11bb0:	bne	11e28 <__assert_fail@plt+0x938>
   11bb4:	ldrb	r3, [sp, #191]	; 0xbf
   11bb8:	cmp	r3, #0
   11bbc:	bne	11e40 <__assert_fail@plt+0x950>
   11bc0:	ldr	r2, [sp, #200]	; 0xc8
   11bc4:	cmp	r2, #0
   11bc8:	beq	11e58 <__assert_fail@plt+0x968>
   11bcc:	mov	r1, r2
   11bd0:	str	r4, [sp]
   11bd4:	ldr	r3, [pc, #1352]	; 12124 <__assert_fail@plt+0xc34>
   11bd8:	ldr	r2, [pc, #1352]	; 12128 <__assert_fail@plt+0xc38>
   11bdc:	ldr	r0, [sp, #216]	; 0xd8
   11be0:	bl	12f40 <__assert_fail@plt+0x1a50>
   11be4:	b	11ce4 <__assert_fail@plt+0x7f4>
   11be8:	ldr	r0, [sp, #220]	; 0xdc
   11bec:	bl	11328 <ply_command_parser_get_help_string@plt>
   11bf0:	mov	r4, r0
   11bf4:	bl	11430 <ply_logger_get_error_default@plt>
   11bf8:	mov	r2, r4
   11bfc:	ldr	r1, [pc, #1320]	; 1212c <__assert_fail@plt+0xc3c>
   11c00:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   11c04:	mov	r0, r4
   11c08:	bl	1122c <free@plt>
   11c0c:	mov	r4, #1
   11c10:	ldr	r3, [pc, #844]	; 11f64 <__assert_fail@plt+0xa74>
   11c14:	ldr	r2, [sp, #244]	; 0xf4
   11c18:	mov	r0, r4
   11c1c:	ldr	r3, [r3]
   11c20:	cmp	r2, r3
   11c24:	bne	11f60 <__assert_fail@plt+0xa70>
   11c28:	add	sp, sp, #252	; 0xfc
   11c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c30:	ldr	r0, [sp, #220]	; 0xdc
   11c34:	bl	11328 <ply_command_parser_get_help_string@plt>
   11c38:	ldr	r3, [sp, #176]	; 0xb0
   11c3c:	cmp	r3, #1
   11c40:	mov	r4, r0
   11c44:	ble	11c74 <__assert_fail@plt+0x784>
   11c48:	mov	r2, r0
   11c4c:	ldr	r1, [pc, #1244]	; 12130 <__assert_fail@plt+0xc40>
   11c50:	mov	r0, #1
   11c54:	bl	113dc <__printf_chk@plt>
   11c58:	mov	r0, r4
   11c5c:	bl	1122c <free@plt>
   11c60:	mov	r4, #0
   11c64:	b	11c10 <__assert_fail@plt+0x720>
   11c68:	ldr	r0, [sp, #220]	; 0xdc
   11c6c:	bl	11328 <ply_command_parser_get_help_string@plt>
   11c70:	mov	r4, r0
   11c74:	ldr	r3, [pc, #1208]	; 12134 <__assert_fail@plt+0xc44>
   11c78:	mov	r0, r4
   11c7c:	ldr	r1, [r3]
   11c80:	bl	114a8 <fputs@plt>
   11c84:	b	11c58 <__assert_fail@plt+0x768>
   11c88:	ldr	r0, [pc, #1192]	; 12138 <__assert_fail@plt+0xc48>
   11c8c:	bl	11340 <puts@plt>
   11c90:	mov	r4, #0
   11c94:	b	11c10 <__assert_fail@plt+0x720>
   11c98:	bl	11430 <ply_logger_get_error_default@plt>
   11c9c:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   11ca0:	cmp	r0, #0
   11ca4:	bne	11b14 <__assert_fail@plt+0x624>
   11ca8:	bl	11430 <ply_logger_get_error_default@plt>
   11cac:	bl	112e0 <ply_logger_toggle_tracing@plt>
   11cb0:	b	11b14 <__assert_fail@plt+0x624>
   11cb4:	bl	11430 <ply_logger_get_error_default@plt>
   11cb8:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   11cbc:	cmp	r0, #0
   11cc0:	bne	11b08 <__assert_fail@plt+0x618>
   11cc4:	bl	11430 <ply_logger_get_error_default@plt>
   11cc8:	bl	112e0 <ply_logger_toggle_tracing@plt>
   11ccc:	b	11b08 <__assert_fail@plt+0x618>
   11cd0:	mov	r3, r4
   11cd4:	ldr	r2, [pc, #1096]	; 12124 <__assert_fail@plt+0xc34>
   11cd8:	ldr	r1, [pc, #1096]	; 12128 <__assert_fail@plt+0xc38>
   11cdc:	ldr	r0, [sp, #216]	; 0xd8
   11ce0:	bl	133b4 <__assert_fail@plt+0x1ec4>
   11ce4:	ldr	r0, [sp, #212]	; 0xd4
   11ce8:	bl	1131c <ply_event_loop_run@plt>
   11cec:	mov	r4, r0
   11cf0:	ldr	r0, [sp, #216]	; 0xd8
   11cf4:	bl	12cbc <__assert_fail@plt+0x17cc>
   11cf8:	ldr	r0, [sp, #212]	; 0xd4
   11cfc:	bl	11214 <ply_event_loop_free@plt>
   11d00:	b	11c10 <__assert_fail@plt+0x720>
   11d04:	str	r4, [sp]
   11d08:	ldr	r3, [pc, #1044]	; 12124 <__assert_fail@plt+0xc34>
   11d0c:	ldr	r2, [pc, #1044]	; 12128 <__assert_fail@plt+0xc38>
   11d10:	ldr	r0, [sp, #216]	; 0xd8
   11d14:	bl	13504 <__assert_fail@plt+0x2014>
   11d18:	b	11ce4 <__assert_fail@plt+0x7f4>
   11d1c:	ldr	r7, [r5]
   11d20:	bl	11430 <ply_logger_get_error_default@plt>
   11d24:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   11d28:	subs	r4, r0, #0
   11d2c:	beq	11c10 <__assert_fail@plt+0x720>
   11d30:	bl	11430 <ply_logger_get_error_default@plt>
   11d34:	bl	1125c <ply_logger_flush@plt>
   11d38:	str	r7, [r5]
   11d3c:	bl	11430 <ply_logger_get_error_default@plt>
   11d40:	ldr	r2, [pc, #1012]	; 1213c <__assert_fail@plt+0xc4c>
   11d44:	ldr	r3, [pc, #1012]	; 12140 <__assert_fail@plt+0xc50>
   11d48:	ldr	r1, [pc, #1012]	; 12144 <__assert_fail@plt+0xc54>
   11d4c:	str	r2, [sp]
   11d50:	ldr	r2, [pc, #1008]	; 12148 <__assert_fail@plt+0xc58>
   11d54:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   11d58:	bl	11430 <ply_logger_get_error_default@plt>
   11d5c:	bl	1125c <ply_logger_flush@plt>
   11d60:	mov	r4, r6
   11d64:	str	r7, [r5]
   11d68:	b	11c10 <__assert_fail@plt+0x720>
   11d6c:	mov	r3, r4
   11d70:	ldr	r2, [pc, #940]	; 12124 <__assert_fail@plt+0xc34>
   11d74:	ldr	r1, [pc, #940]	; 12128 <__assert_fail@plt+0xc38>
   11d78:	ldr	r0, [sp, #216]	; 0xd8
   11d7c:	bl	13408 <__assert_fail@plt+0x1f18>
   11d80:	b	11ce4 <__assert_fail@plt+0x7f4>
   11d84:	bl	11430 <ply_logger_get_error_default@plt>
   11d88:	bl	1125c <ply_logger_flush@plt>
   11d8c:	str	r6, [r5]
   11d90:	bl	11430 <ply_logger_get_error_default@plt>
   11d94:	ldr	r2, [pc, #928]	; 1213c <__assert_fail@plt+0xc4c>
   11d98:	ldr	r3, [pc, #940]	; 1214c <__assert_fail@plt+0xc5c>
   11d9c:	ldr	r1, [pc, #940]	; 12150 <__assert_fail@plt+0xc60>
   11da0:	str	r2, [sp]
   11da4:	ldr	r2, [pc, #924]	; 12148 <__assert_fail@plt+0xc58>
   11da8:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   11dac:	bl	11430 <ply_logger_get_error_default@plt>
   11db0:	bl	1125c <ply_logger_flush@plt>
   11db4:	str	r6, [r5]
   11db8:	b	11b54 <__assert_fail@plt+0x664>
   11dbc:	ldr	r6, [r5]
   11dc0:	bl	11430 <ply_logger_get_error_default@plt>
   11dc4:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   11dc8:	cmp	r0, #0
   11dcc:	bne	11e88 <__assert_fail@plt+0x998>
   11dd0:	mov	r4, #1
   11dd4:	b	11c10 <__assert_fail@plt+0x720>
   11dd8:	ldr	r6, [r5]
   11ddc:	bl	11430 <ply_logger_get_error_default@plt>
   11de0:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   11de4:	cmp	r0, #0
   11de8:	beq	11dd0 <__assert_fail@plt+0x8e0>
   11dec:	bl	11430 <ply_logger_get_error_default@plt>
   11df0:	bl	1125c <ply_logger_flush@plt>
   11df4:	str	r6, [r5]
   11df8:	bl	11430 <ply_logger_get_error_default@plt>
   11dfc:	ldr	r2, [pc, #824]	; 1213c <__assert_fail@plt+0xc4c>
   11e00:	ldr	r3, [pc, #844]	; 12154 <__assert_fail@plt+0xc64>
   11e04:	str	r2, [sp]
   11e08:	ldr	r1, [pc, #840]	; 12158 <__assert_fail@plt+0xc68>
   11e0c:	ldr	r2, [pc, #820]	; 12148 <__assert_fail@plt+0xc58>
   11e10:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   11e14:	bl	11430 <ply_logger_get_error_default@plt>
   11e18:	bl	1125c <ply_logger_flush@plt>
   11e1c:	mov	r4, #1
   11e20:	str	r6, [r5]
   11e24:	b	11c10 <__assert_fail@plt+0x720>
   11e28:	mov	r3, r4
   11e2c:	ldr	r2, [pc, #752]	; 12124 <__assert_fail@plt+0xc34>
   11e30:	ldr	r1, [pc, #752]	; 12128 <__assert_fail@plt+0xc38>
   11e34:	ldr	r0, [sp, #216]	; 0xd8
   11e38:	bl	12eec <__assert_fail@plt+0x19fc>
   11e3c:	b	11ce4 <__assert_fail@plt+0x7f4>
   11e40:	mov	r3, r4
   11e44:	ldr	r2, [pc, #728]	; 12124 <__assert_fail@plt+0xc34>
   11e48:	ldr	r1, [pc, #728]	; 12128 <__assert_fail@plt+0xc38>
   11e4c:	ldr	r0, [sp, #216]	; 0xd8
   11e50:	bl	135e0 <__assert_fail@plt+0x20f0>
   11e54:	b	11ce4 <__assert_fail@plt+0x7f4>
   11e58:	ldrb	r3, [sp, #193]	; 0xc1
   11e5c:	cmp	r3, #0
   11e60:	bne	11eb0 <__assert_fail@plt+0x9c0>
   11e64:	ldr	r1, [sp, #208]	; 0xd0
   11e68:	cmp	r1, #0
   11e6c:	beq	11ee8 <__assert_fail@plt+0x9f8>
   11e70:	str	r4, [sp]
   11e74:	ldr	r3, [pc, #680]	; 12124 <__assert_fail@plt+0xc34>
   11e78:	ldr	r2, [pc, #680]	; 12128 <__assert_fail@plt+0xc38>
   11e7c:	ldr	r0, [sp, #216]	; 0xd8
   11e80:	bl	13360 <__assert_fail@plt+0x1e70>
   11e84:	b	11ce4 <__assert_fail@plt+0x7f4>
   11e88:	bl	11430 <ply_logger_get_error_default@plt>
   11e8c:	bl	1125c <ply_logger_flush@plt>
   11e90:	str	r6, [r5]
   11e94:	bl	11430 <ply_logger_get_error_default@plt>
   11e98:	ldr	r2, [pc, #668]	; 1213c <__assert_fail@plt+0xc4c>
   11e9c:	ldr	r3, [pc, #696]	; 1215c <__assert_fail@plt+0xc6c>
   11ea0:	str	r2, [sp]
   11ea4:	ldr	r1, [pc, #692]	; 12160 <__assert_fail@plt+0xc70>
   11ea8:	ldr	r2, [pc, #664]	; 12148 <__assert_fail@plt+0xc58>
   11eac:	b	11e10 <__assert_fail@plt+0x920>
   11eb0:	add	r3, sp, #224	; 0xe0
   11eb4:	str	r3, [sp]
   11eb8:	mov	r1, r2
   11ebc:	mov	ip, #1
   11ec0:	str	r2, [sp, #228]	; 0xe4
   11ec4:	str	r2, [sp, #232]	; 0xe8
   11ec8:	str	r2, [sp, #240]	; 0xf0
   11ecc:	ldr	r3, [pc, #656]	; 12164 <__assert_fail@plt+0xc74>
   11ed0:	ldr	r2, [pc, #656]	; 12168 <__assert_fail@plt+0xc78>
   11ed4:	ldr	r0, [sp, #216]	; 0xd8
   11ed8:	str	r4, [sp, #224]	; 0xe0
   11edc:	str	ip, [sp, #236]	; 0xec
   11ee0:	bl	13208 <__assert_fail@plt+0x1d18>
   11ee4:	b	11ce4 <__assert_fail@plt+0x7f4>
   11ee8:	ldrb	r3, [sp, #192]	; 0xc0
   11eec:	cmp	r3, #0
   11ef0:	bne	11f18 <__assert_fail@plt+0xa28>
   11ef4:	ldr	r1, [sp, #204]	; 0xcc
   11ef8:	cmp	r1, #0
   11efc:	beq	11f30 <__assert_fail@plt+0xa40>
   11f00:	str	r4, [sp]
   11f04:	ldr	r3, [pc, #536]	; 12124 <__assert_fail@plt+0xc34>
   11f08:	ldr	r2, [pc, #536]	; 12128 <__assert_fail@plt+0xc38>
   11f0c:	ldr	r0, [sp, #216]	; 0xd8
   11f10:	bl	13044 <__assert_fail@plt+0x1b54>
   11f14:	b	11ce4 <__assert_fail@plt+0x7f4>
   11f18:	mov	r3, r4
   11f1c:	ldr	r2, [pc, #512]	; 12124 <__assert_fail@plt+0xc34>
   11f20:	ldr	r1, [pc, #512]	; 12128 <__assert_fail@plt+0xc38>
   11f24:	ldr	r0, [sp, #216]	; 0xd8
   11f28:	bl	131b4 <__assert_fail@plt+0x1cc4>
   11f2c:	b	11ce4 <__assert_fail@plt+0x7f4>
   11f30:	ldrb	r3, [sp, #196]	; 0xc4
   11f34:	cmp	r3, #0
   11f38:	bne	11ce4 <__assert_fail@plt+0x7f4>
   11f3c:	ldrb	r3, [sp, #198]	; 0xc6
   11f40:	cmp	r3, #0
   11f44:	beq	11ce4 <__assert_fail@plt+0x7f4>
   11f48:	mov	r3, r4
   11f4c:	ldr	r2, [pc, #464]	; 12124 <__assert_fail@plt+0xc34>
   11f50:	ldr	r1, [pc, #464]	; 12128 <__assert_fail@plt+0xc38>
   11f54:	ldr	r0, [sp, #216]	; 0xd8
   11f58:	bl	13608 <__assert_fail@plt+0x2118>
   11f5c:	b	11ce4 <__assert_fail@plt+0x7f4>
   11f60:	bl	112bc <__stack_chk_fail@plt>
   11f64:	andeq	r6, r2, r0, lsl #30
   11f68:	strdeq	r5, [r1], -r4
   11f6c:			; <UNDEFINED> instruction: 0x00015bb4
   11f70:	andeq	r5, r1, r0, ror #23
   11f74:	andeq	r5, r1, r0, asr #15
   11f78:	andeq	r5, r1, ip, ror #21
   11f7c:	andeq	r5, r1, r4, lsl #22
   11f80:	andeq	r5, r1, r0, lsr r7
   11f84:	andeq	r5, r1, ip, lsr #22
   11f88:	andeq	r5, r1, ip, asr #22
   11f8c:	andeq	r5, r1, r4, lsl #23
   11f90:	andeq	r5, r1, ip, ror fp
   11f94:	andeq	r5, r1, r0, lsr #24
   11f98:			; <UNDEFINED> instruction: 0x00015bbc
   11f9c:	andeq	r5, r1, ip, lsl #24
   11fa0:	andeq	r5, r1, r0, asr #24
   11fa4:	andeq	r5, r1, r4, lsr ip
   11fa8:	andeq	r5, r1, r4, asr ip
   11fac:	andeq	r5, r1, r0, ror #24
   11fb0:	muleq	r1, r8, ip
   11fb4:	andeq	r5, r1, r8, asr #25
   11fb8:	andeq	r5, r1, r0, lsr #25
   11fbc:	strdeq	r5, [r1], -r8
   11fc0:	ldrdeq	r5, [r1], -r8
   11fc4:	andeq	r5, r1, r0, lsl #26
   11fc8:	andeq	r5, r1, r4, lsl sp
   11fcc:	andeq	r5, r1, ip, lsl sp
   11fd0:	andeq	r5, r1, r4, asr sp
   11fd4:	andeq	r5, r1, ip, asr sp
   11fd8:	muleq	r1, r0, sp
   11fdc:	andeq	r5, r1, r8, lsr #27
   11fe0:	andeq	r5, r1, r8, asr #27
   11fe4:	andeq	r5, r1, r4, lsr #22
   11fe8:	andeq	r5, r1, r0, lsl fp
   11fec:	strdeq	r5, [r1], -r8
   11ff0:	andeq	r5, r1, r8, lsl #17
   11ff4:	andeq	r5, r1, ip, lsl #28
   11ff8:	muleq	r1, r0, r8
   11ffc:	andeq	r5, r1, r8, lsr #28
   12000:	andeq	r5, r1, r0, lsl #17
   12004:	ldrdeq	r5, [r1], -r0
   12008:	andeq	r4, r1, r8, lsl #2
   1200c:	andeq	r5, r1, ip, ror #27
   12010:	andeq	r5, r1, r8, ror lr
   12014:	andeq	r6, r1, r8, asr #4
   12018:	andeq	r4, r1, r0, asr #32
   1201c:	andeq	r5, r1, r0, asr #28
   12020:	andeq	r5, r1, r8, ror #28
   12024:	andeq	r5, r1, r8, asr #29
   12028:			; <UNDEFINED> instruction: 0x000157b8
   1202c:	andeq	r5, r1, r0, lsr #29
   12030:	andeq	r3, r1, r0, lsl sl
   12034:	andeq	r5, r1, r8, lsr #30
   12038:	andeq	r5, r1, ip, lsl #25
   1203c:	andeq	r5, r1, r0, asr pc
   12040:	muleq	r1, ip, r8
   12044:	andeq	r5, r1, ip, ror #29
   12048:	andeq	r4, r1, r0, lsl r2
   1204c:	andeq	r5, r1, r8, lsl pc
   12050:	andeq	r3, r1, ip, lsl #15
   12054:	andeq	r5, r1, r4, ror pc
   12058:	andeq	r3, r1, r8, lsr #15
   1205c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12060:	andeq	r5, r1, r8, ror #31
   12064:	andeq	r5, r1, r4, asr #16
   12068:	ldrdeq	r5, [r1], -ip
   1206c:			; <UNDEFINED> instruction: 0x00015fbc
   12070:	andeq	r5, r1, r8, asr #15
   12074:	andeq	r6, r1, r8, lsr #32
   12078:	andeq	r6, r1, r4, asr r0
   1207c:	andeq	r3, r1, ip, lsr #29
   12080:	andeq	r6, r1, r8, lsr #1
   12084:	ldrdeq	r6, [r1], -r4
   12088:	andeq	r6, r1, ip, lsr #2
   1208c:	andeq	r6, r1, r8, lsr r1
   12090:	andeq	r6, r1, r4, lsl #1
   12094:	ldrdeq	r3, [r1], -r4
   12098:	muleq	r1, r8, r0
   1209c:	andeq	r3, r1, r8, lsl ip
   120a0:	andeq	r6, r1, r8, lsl #2
   120a4:	andeq	r6, r1, ip, lsl r1
   120a8:	andeq	r6, r1, r4, lsr #2
   120ac:	muleq	r1, r0, fp
   120b0:	andeq	r6, r1, r0, asr #2
   120b4:	andeq	r6, r1, r0, asr r1
   120b8:	muleq	r1, r0, r1
   120bc:	andeq	r6, r1, ip, lsr #3
   120c0:			; <UNDEFINED> instruction: 0x000157b0
   120c4:	andeq	r6, r1, r0, ror #2
   120c8:	andeq	r3, r1, r4, ror #21
   120cc:	andeq	r6, r1, r0, lsl #3
   120d0:	ldrdeq	r6, [r1], -ip
   120d4:	muleq	r1, r8, r9
   120d8:	andeq	r3, r1, r8, asr #21
   120dc:	strdeq	r6, [r1], -ip
   120e0:	andeq	r6, r1, r4, lsl r2
   120e4:	andeq	r3, r1, r4, lsl #18
   120e8:	andeq	r6, r1, r4, lsr #4
   120ec:	andeq	r6, r1, r0, asr #4
   120f0:	andeq	r3, r1, r4, asr #15
   120f4:	andeq	r6, r1, r4, asr r2
   120f8:	andeq	r3, r1, ip, lsr #21
   120fc:	andeq	r6, r1, r4, ror #4
   12100:	andeq	r6, r1, r8, ror r2
   12104:	muleq	r1, r0, sl
   12108:	andeq	r6, r1, r4, lsl #5
   1210c:	muleq	r1, r8, r2
   12110:	andeq	r6, r1, r4, lsr #5
   12114:	andeq	r5, r1, r0, lsr #15
   12118:	andeq	r3, r1, r0, lsr #18
   1211c:	ldrdeq	r6, [r1], -r8
   12120:	strdeq	r3, [r1], -r8
   12124:	andeq	r3, r1, r0, ror #15
   12128:	andeq	r3, r1, ip, ror #15
   1212c:	ldrdeq	r6, [r1], -r0
   12130:	ldrdeq	r6, [r1], -r4
   12134:	andeq	r7, r2, r0, lsr #2
   12138:	andeq	r6, r1, r8, ror #5
   1213c:	andeq	r5, r1, r8, lsr #14
   12140:	andeq	r0, r0, lr, asr #8
   12144:	andeq	r6, r1, ip, ror r3
   12148:	andeq	r5, r1, r4, ror r7
   1214c:	andeq	r0, r0, r3, asr #8
   12150:	andeq	r6, r1, r0, lsl r3
   12154:	andeq	r0, r0, sl, asr #8
   12158:	andeq	r6, r1, r4, asr r3
   1215c:	andeq	r0, r0, r6, asr #8
   12160:	andeq	r6, r1, r4, lsr r3
   12164:	andeq	r4, r1, r8, ror r5
   12168:	muleq	r1, ip, sl
   1216c:	mov	fp, #0
   12170:	mov	lr, #0
   12174:	pop	{r1}		; (ldr r1, [sp], #4)
   12178:	mov	r2, sp
   1217c:	push	{r2}		; (str r2, [sp, #-4]!)
   12180:	push	{r0}		; (str r0, [sp, #-4]!)
   12184:	ldr	ip, [pc, #16]	; 1219c <__assert_fail@plt+0xcac>
   12188:	push	{ip}		; (str ip, [sp, #-4]!)
   1218c:	ldr	r0, [pc, #12]	; 121a0 <__assert_fail@plt+0xcb0>
   12190:	ldr	r3, [pc, #12]	; 121a4 <__assert_fail@plt+0xcb4>
   12194:	bl	11358 <__libc_start_main@plt>
   12198:	bl	114b4 <abort@plt>
   1219c:	andeq	r4, r1, r4, lsr sp
   121a0:	strdeq	r1, [r1], -ip
   121a4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   121a8:	ldr	r3, [pc, #20]	; 121c4 <__assert_fail@plt+0xcd4>
   121ac:	ldr	r2, [pc, #20]	; 121c8 <__assert_fail@plt+0xcd8>
   121b0:	add	r3, pc, r3
   121b4:	ldr	r2, [r3, r2]
   121b8:	cmp	r2, #0
   121bc:	bxeq	lr
   121c0:	b	11364 <__gmon_start__@plt>
   121c4:	andeq	r4, r1, r8, asr #28
   121c8:	andeq	r0, r0, r4, lsl r1
   121cc:	ldr	r0, [pc, #24]	; 121ec <__assert_fail@plt+0xcfc>
   121d0:	ldr	r3, [pc, #24]	; 121f0 <__assert_fail@plt+0xd00>
   121d4:	cmp	r3, r0
   121d8:	bxeq	lr
   121dc:	ldr	r3, [pc, #16]	; 121f4 <__assert_fail@plt+0xd04>
   121e0:	cmp	r3, #0
   121e4:	bxeq	lr
   121e8:	bx	r3
   121ec:	andeq	r7, r2, r0, lsr #2
   121f0:	andeq	r7, r2, r0, lsr #2
   121f4:	andeq	r0, r0, r0
   121f8:	ldr	r0, [pc, #36]	; 12224 <__assert_fail@plt+0xd34>
   121fc:	ldr	r1, [pc, #36]	; 12228 <__assert_fail@plt+0xd38>
   12200:	sub	r1, r1, r0
   12204:	asr	r1, r1, #2
   12208:	add	r1, r1, r1, lsr #31
   1220c:	asrs	r1, r1, #1
   12210:	bxeq	lr
   12214:	ldr	r3, [pc, #16]	; 1222c <__assert_fail@plt+0xd3c>
   12218:	cmp	r3, #0
   1221c:	bxeq	lr
   12220:	bx	r3
   12224:	andeq	r7, r2, r0, lsr #2
   12228:	andeq	r7, r2, r0, lsr #2
   1222c:	andeq	r0, r0, r0
   12230:	push	{r4, lr}
   12234:	ldr	r4, [pc, #24]	; 12254 <__assert_fail@plt+0xd64>
   12238:	ldrb	r3, [r4]
   1223c:	cmp	r3, #0
   12240:	popne	{r4, pc}
   12244:	bl	121cc <__assert_fail@plt+0xcdc>
   12248:	mov	r3, #1
   1224c:	strb	r3, [r4]
   12250:	pop	{r4, pc}
   12254:	andeq	r7, r2, r4, lsr #2
   12258:	b	121f8 <__assert_fail@plt+0xd08>
   1225c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12260:	sub	sp, sp, #8
   12264:	subs	r4, r0, #0
   12268:	ldr	r7, [sp, #40]	; 0x28
   1226c:	ldr	r8, [sp, #44]	; 0x2c
   12270:	beq	12374 <__assert_fail@plt+0xe84>
   12274:	mov	r9, r3
   12278:	ldr	r3, [r4]
   1227c:	cmp	r3, #0
   12280:	beq	12388 <__assert_fail@plt+0xe98>
   12284:	cmp	r2, #0
   12288:	mov	sl, r1
   1228c:	mov	r5, r2
   12290:	beq	122a4 <__assert_fail@plt+0xdb4>
   12294:	mov	r0, r2
   12298:	bl	1137c <strlen@plt>
   1229c:	cmp	r0, #255	; 0xff
   122a0:	bhi	1239c <__assert_fail@plt+0xeac>
   122a4:	ldr	r3, [r4, #4]
   122a8:	cmp	r3, #0
   122ac:	beq	12338 <__assert_fail@plt+0xe48>
   122b0:	ldrb	r3, [r4, #32]
   122b4:	tst	r3, #1
   122b8:	bne	122e4 <__assert_fail@plt+0xdf4>
   122bc:	cmp	r7, #0
   122c0:	beq	122dc <__assert_fail@plt+0xdec>
   122c4:	mov	r1, r4
   122c8:	mov	r0, r8
   122cc:	mov	r3, r7
   122d0:	add	sp, sp, #8
   122d4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   122d8:	bx	r3
   122dc:	add	sp, sp, #8
   122e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122e4:	mov	r1, #24
   122e8:	mov	r0, #1
   122ec:	bl	111e4 <calloc@plt>
   122f0:	mov	r6, r0
   122f4:	mov	r0, sl
   122f8:	str	r4, [r6]
   122fc:	bl	112b0 <strdup@plt>
   12300:	cmp	r5, #0
   12304:	str	r0, [r6, #4]
   12308:	beq	12318 <__assert_fail@plt+0xe28>
   1230c:	mov	r0, r5
   12310:	bl	112b0 <strdup@plt>
   12314:	str	r0, [r6, #8]
   12318:	ldr	r0, [r4, #12]
   1231c:	mov	r1, r6
   12320:	str	r9, [r6, #12]
   12324:	str	r7, [r6, #16]
   12328:	str	r8, [r6, #20]
   1232c:	add	sp, sp, #8
   12330:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12334:	b	11394 <ply_list_append_data@plt>
   12338:	ldr	r3, [r4, #20]
   1233c:	cmp	r3, #0
   12340:	blt	122b0 <__assert_fail@plt+0xdc0>
   12344:	ldr	r0, [r4, #12]
   12348:	bl	11208 <ply_list_get_length@plt>
   1234c:	cmp	r0, #0
   12350:	bne	123b0 <__assert_fail@plt+0xec0>
   12354:	stm	sp, {r0, r4}
   12358:	ldr	r3, [pc, #100]	; 123c4 <__assert_fail@plt+0xed4>
   1235c:	ldr	r1, [r4, #20]
   12360:	ldr	r0, [r4]
   12364:	mov	r2, #4
   12368:	bl	1143c <ply_event_loop_watch_fd@plt>
   1236c:	str	r0, [r4, #4]
   12370:	b	122b0 <__assert_fail@plt+0xdc0>
   12374:	ldr	r3, [pc, #76]	; 123c8 <__assert_fail@plt+0xed8>
   12378:	ldr	r2, [pc, #76]	; 123cc <__assert_fail@plt+0xedc>
   1237c:	ldr	r1, [pc, #76]	; 123d0 <__assert_fail@plt+0xee0>
   12380:	ldr	r0, [pc, #76]	; 123d4 <__assert_fail@plt+0xee4>
   12384:	bl	114f0 <__assert_fail@plt>
   12388:	ldr	r3, [pc, #56]	; 123c8 <__assert_fail@plt+0xed8>
   1238c:	ldr	r2, [pc, #68]	; 123d8 <__assert_fail@plt+0xee8>
   12390:	ldr	r1, [pc, #56]	; 123d0 <__assert_fail@plt+0xee0>
   12394:	ldr	r0, [pc, #64]	; 123dc <__assert_fail@plt+0xeec>
   12398:	bl	114f0 <__assert_fail@plt>
   1239c:	ldr	r3, [pc, #36]	; 123c8 <__assert_fail@plt+0xed8>
   123a0:	ldr	r2, [pc, #56]	; 123e0 <__assert_fail@plt+0xef0>
   123a4:	ldr	r1, [pc, #36]	; 123d0 <__assert_fail@plt+0xee0>
   123a8:	ldr	r0, [pc, #52]	; 123e4 <__assert_fail@plt+0xef4>
   123ac:	bl	114f0 <__assert_fail@plt>
   123b0:	ldr	r3, [pc, #16]	; 123c8 <__assert_fail@plt+0xed8>
   123b4:	ldr	r2, [pc, #44]	; 123e8 <__assert_fail@plt+0xef8>
   123b8:	ldr	r1, [pc, #16]	; 123d0 <__assert_fail@plt+0xee0>
   123bc:	ldr	r0, [pc, #40]	; 123ec <__assert_fail@plt+0xefc>
   123c0:	bl	114f0 <__assert_fail@plt>
   123c4:	ldrdeq	r2, [r1], -r0
   123c8:	andeq	r4, r1, r4, asr #26
   123cc:	andeq	r0, r0, lr, asr #3
   123d0:	andeq	r5, r1, ip, lsr r2
   123d4:	andeq	r5, r1, r0, asr r2
   123d8:	andeq	r0, r0, pc, asr #3
   123dc:	andeq	r5, r1, r0, ror #4
   123e0:	ldrdeq	r0, [r0], -r1
   123e4:	andeq	r5, r1, r8, ror r2
   123e8:	ldrdeq	r0, [r0], -r5
   123ec:			; <UNDEFINED> instruction: 0x000152bc
   123f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   123f4:	sub	sp, sp, #16
   123f8:	ldr	r5, [pc, #772]	; 12704 <__assert_fail@plt+0x1214>
   123fc:	mov	r2, #0
   12400:	subs	r4, r0, #0
   12404:	ldr	r3, [r5]
   12408:	strh	r2, [sp, #8]
   1240c:	str	r3, [sp, #12]
   12410:	beq	1269c <__assert_fail@plt+0x11ac>
   12414:	ldr	r0, [r4, #16]
   12418:	bl	11208 <ply_list_get_length@plt>
   1241c:	cmp	r0, #0
   12420:	beq	12510 <__assert_fail@plt+0x1020>
   12424:	ldr	r0, [r4, #16]
   12428:	bl	1140c <ply_list_get_first_node@plt>
   1242c:	subs	r7, r0, #0
   12430:	beq	126b4 <__assert_fail@plt+0x11c4>
   12434:	bl	11298 <ply_list_node_get_data@plt>
   12438:	subs	r6, r0, #0
   1243c:	beq	126c8 <__assert_fail@plt+0x11d8>
   12440:	mov	r2, #1
   12444:	add	r1, sp, #8
   12448:	ldr	r0, [r4, #20]
   1244c:	bl	113f4 <ply_read@plt>
   12450:	cmp	r0, #0
   12454:	beq	124a4 <__assert_fail@plt+0xfb4>
   12458:	ldrb	r3, [sp, #8]
   1245c:	cmp	r3, #6
   12460:	beq	12520 <__assert_fail@plt+0x1030>
   12464:	cmp	r3, #2
   12468:	beq	12530 <__assert_fail@plt+0x1040>
   1246c:	cmp	r3, #9
   12470:	beq	1258c <__assert_fail@plt+0x109c>
   12474:	cmp	r3, #5
   12478:	bne	124a4 <__assert_fail@plt+0xfb4>
   1247c:	ldr	r3, [r6, #12]
   12480:	cmp	r3, #0
   12484:	beq	124bc <__assert_fail@plt+0xfcc>
   12488:	ldr	r0, [r6, #20]
   1248c:	mov	r2, r4
   12490:	mov	r1, #0
   12494:	blx	r3
   12498:	b	124bc <__assert_fail@plt+0xfcc>
   1249c:	mov	r0, r9
   124a0:	bl	1122c <free@plt>
   124a4:	ldr	r3, [r6, #16]
   124a8:	cmp	r3, #0
   124ac:	beq	124bc <__assert_fail@plt+0xfcc>
   124b0:	ldr	r0, [r6, #20]
   124b4:	mov	r1, r4
   124b8:	blx	r3
   124bc:	mov	r1, r7
   124c0:	ldr	r0, [r4, #16]
   124c4:	bl	113d0 <ply_list_remove_node@plt>
   124c8:	ldr	r0, [r4, #16]
   124cc:	bl	11208 <ply_list_get_length@plt>
   124d0:	subs	r6, r0, #0
   124d4:	bne	124f8 <__assert_fail@plt+0x1008>
   124d8:	ldr	r1, [r4, #8]
   124dc:	cmp	r1, #0
   124e0:	beq	124f8 <__assert_fail@plt+0x1008>
   124e4:	ldr	r0, [r4]
   124e8:	cmp	r0, #0
   124ec:	beq	126dc <__assert_fail@plt+0x11ec>
   124f0:	bl	112f8 <ply_event_loop_stop_watching_fd@plt>
   124f4:	str	r6, [r4, #8]
   124f8:	ldr	r2, [sp, #12]
   124fc:	ldr	r3, [r5]
   12500:	cmp	r2, r3
   12504:	bne	126b0 <__assert_fail@plt+0x11c0>
   12508:	add	sp, sp, #16
   1250c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12510:	bl	11430 <ply_logger_get_error_default@plt>
   12514:	ldr	r1, [pc, #492]	; 12708 <__assert_fail@plt+0x1218>
   12518:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   1251c:	b	124f8 <__assert_fail@plt+0x1008>
   12520:	ldr	r3, [r6, #12]
   12524:	cmp	r3, #0
   12528:	bne	124b0 <__assert_fail@plt+0xfc0>
   1252c:	b	124bc <__assert_fail@plt+0xfcc>
   12530:	add	r1, sp, #4
   12534:	ldr	r0, [r4, #20]
   12538:	bl	114d8 <ply_read_uint32@plt>
   1253c:	cmp	r0, #0
   12540:	beq	124a4 <__assert_fail@plt+0xfb4>
   12544:	ldr	r8, [sp, #4]
   12548:	add	r0, r8, #1
   1254c:	bl	1134c <malloc@plt>
   12550:	cmp	r8, #0
   12554:	mov	r9, r0
   12558:	bne	1267c <__assert_fail@plt+0x118c>
   1255c:	mov	r3, #0
   12560:	strb	r3, [r9, r8]
   12564:	ldr	r3, [r6, #12]
   12568:	cmp	r3, #0
   1256c:	beq	12580 <__assert_fail@plt+0x1090>
   12570:	ldr	r0, [r6, #20]
   12574:	mov	r2, r4
   12578:	mov	r1, r9
   1257c:	blx	r3
   12580:	mov	r0, r9
   12584:	bl	1122c <free@plt>
   12588:	b	124bc <__assert_fail@plt+0xfcc>
   1258c:	add	r1, sp, #4
   12590:	ldr	r0, [r4, #20]
   12594:	bl	114d8 <ply_read_uint32@plt>
   12598:	cmp	r0, #0
   1259c:	beq	124a4 <__assert_fail@plt+0xfb4>
   125a0:	ldr	r8, [sp, #4]
   125a4:	cmp	r8, #0
   125a8:	beq	126f0 <__assert_fail@plt+0x1200>
   125ac:	mov	r0, r8
   125b0:	bl	1134c <malloc@plt>
   125b4:	mov	r2, r8
   125b8:	mov	r1, r0
   125bc:	mov	sl, r0
   125c0:	ldr	r0, [r4, #20]
   125c4:	bl	113f4 <ply_read@plt>
   125c8:	cmp	r0, #0
   125cc:	beq	12670 <__assert_fail@plt+0x1180>
   125d0:	mov	r0, #0
   125d4:	bl	113ac <ply_array_new@plt>
   125d8:	ldr	r2, [sp, #4]
   125dc:	cmp	r2, #0
   125e0:	movne	r8, sl
   125e4:	mov	r9, r0
   125e8:	movne	r0, sl
   125ec:	bne	12604 <__assert_fail@plt+0x1114>
   125f0:	b	1262c <__assert_fail@plt+0x113c>
   125f4:	sub	r3, r8, sl
   125f8:	uxtb	r3, r3
   125fc:	cmp	r3, r2
   12600:	bcs	1262c <__assert_fail@plt+0x113c>
   12604:	ldrb	r3, [r8], #1
   12608:	cmp	r3, #0
   1260c:	bne	125f4 <__assert_fail@plt+0x1104>
   12610:	bl	112b0 <strdup@plt>
   12614:	mov	r1, r0
   12618:	mov	r0, r9
   1261c:	bl	11280 <ply_array_add_pointer_element@plt>
   12620:	ldr	r2, [sp, #4]
   12624:	mov	r0, r8
   12628:	b	125f4 <__assert_fail@plt+0x1104>
   1262c:	mov	r0, sl
   12630:	bl	1122c <free@plt>
   12634:	mov	r0, r9
   12638:	bl	1146c <ply_array_steal_pointer_elements@plt>
   1263c:	mov	r8, r0
   12640:	mov	r0, r9
   12644:	bl	112a4 <ply_array_free@plt>
   12648:	ldr	r3, [r6, #12]
   1264c:	cmp	r3, #0
   12650:	beq	12664 <__assert_fail@plt+0x1174>
   12654:	ldr	r0, [r6, #20]
   12658:	mov	r2, r4
   1265c:	mov	r1, r8
   12660:	blx	r3
   12664:	mov	r0, r8
   12668:	bl	11460 <ply_free_string_array@plt>
   1266c:	b	124bc <__assert_fail@plt+0xfcc>
   12670:	mov	r0, sl
   12674:	bl	1122c <free@plt>
   12678:	b	124a4 <__assert_fail@plt+0xfb4>
   1267c:	mov	r1, r0
   12680:	mov	r2, r8
   12684:	ldr	r0, [r4, #20]
   12688:	bl	113f4 <ply_read@plt>
   1268c:	cmp	r0, #0
   12690:	beq	1249c <__assert_fail@plt+0xfac>
   12694:	ldr	r8, [sp, #4]
   12698:	b	1255c <__assert_fail@plt+0x106c>
   1269c:	ldr	r3, [pc, #104]	; 1270c <__assert_fail@plt+0x121c>
   126a0:	ldr	r2, [pc, #104]	; 12710 <__assert_fail@plt+0x1220>
   126a4:	ldr	r1, [pc, #104]	; 12714 <__assert_fail@plt+0x1224>
   126a8:	ldr	r0, [pc, #104]	; 12718 <__assert_fail@plt+0x1228>
   126ac:	bl	114f0 <__assert_fail@plt>
   126b0:	bl	112bc <__stack_chk_fail@plt>
   126b4:	ldr	r3, [pc, #80]	; 1270c <__assert_fail@plt+0x121c>
   126b8:	ldr	r2, [pc, #92]	; 1271c <__assert_fail@plt+0x122c>
   126bc:	ldr	r1, [pc, #80]	; 12714 <__assert_fail@plt+0x1224>
   126c0:	ldr	r0, [pc, #88]	; 12720 <__assert_fail@plt+0x1230>
   126c4:	bl	114f0 <__assert_fail@plt>
   126c8:	ldr	r3, [pc, #60]	; 1270c <__assert_fail@plt+0x121c>
   126cc:	ldr	r2, [pc, #80]	; 12724 <__assert_fail@plt+0x1234>
   126d0:	ldr	r1, [pc, #60]	; 12714 <__assert_fail@plt+0x1224>
   126d4:	ldr	r0, [pc, #76]	; 12728 <__assert_fail@plt+0x1238>
   126d8:	bl	114f0 <__assert_fail@plt>
   126dc:	ldr	r3, [pc, #40]	; 1270c <__assert_fail@plt+0x121c>
   126e0:	ldr	r2, [pc, #68]	; 1272c <__assert_fail@plt+0x123c>
   126e4:	ldr	r1, [pc, #40]	; 12714 <__assert_fail@plt+0x1224>
   126e8:	ldr	r0, [pc, #64]	; 12730 <__assert_fail@plt+0x1240>
   126ec:	bl	114f0 <__assert_fail@plt>
   126f0:	ldr	r3, [pc, #20]	; 1270c <__assert_fail@plt+0x121c>
   126f4:	ldr	r2, [pc, #56]	; 12734 <__assert_fail@plt+0x1244>
   126f8:	ldr	r1, [pc, #20]	; 12714 <__assert_fail@plt+0x1224>
   126fc:	ldr	r0, [pc, #52]	; 12738 <__assert_fail@plt+0x1248>
   12700:	bl	114f0 <__assert_fail@plt>
   12704:	andeq	r6, r2, r0, lsl #30
   12708:	strdeq	r5, [r1], -r0
   1270c:	andeq	r4, r1, r4, ror #26
   12710:	andeq	r0, r0, r1, lsl #2
   12714:	andeq	r5, r1, ip, lsr r2
   12718:	andeq	r5, r1, r0, asr r2
   1271c:	andeq	r0, r0, sl, lsl #2
   12720:	andeq	r5, r1, r8, lsr #6
   12724:	andeq	r0, r0, sp, lsl #2
   12728:	andeq	r5, r1, r0, asr #6
   1272c:	andeq	r0, r0, r3, ror #2
   12730:	andeq	r5, r1, r0, ror #4
   12734:	andeq	r0, r0, r5, lsr r1
   12738:	andeq	r5, r1, r0, asr r3
   1273c:	ldr	r3, [r0, #16]
   12740:	push	{r4, lr}
   12744:	cmp	r3, #0
   12748:	mov	r4, r0
   1274c:	beq	1275c <__assert_fail@plt+0x126c>
   12750:	ldr	r1, [r0]
   12754:	ldr	r0, [r0, #20]
   12758:	blx	r3
   1275c:	ldr	r0, [r4, #4]
   12760:	bl	1122c <free@plt>
   12764:	ldr	r0, [r4, #8]
   12768:	cmp	r0, #0
   1276c:	beq	12774 <__assert_fail@plt+0x1284>
   12770:	bl	1122c <free@plt>
   12774:	mov	r0, r4
   12778:	pop	{r4, lr}
   1277c:	b	1122c <free@plt>
   12780:	push	{r4, r5, r6, r7, r8, lr}
   12784:	mov	r6, r0
   12788:	ldr	r0, [r0, #12]
   1278c:	bl	11208 <ply_list_get_length@plt>
   12790:	cmp	r0, #0
   12794:	popeq	{r4, r5, r6, r7, r8, pc}
   12798:	ldr	r0, [r6, #12]
   1279c:	bl	1140c <ply_list_get_first_node@plt>
   127a0:	subs	r4, r0, #0
   127a4:	beq	127e0 <__assert_fail@plt+0x12f0>
   127a8:	mov	r0, r4
   127ac:	bl	11298 <ply_list_node_get_data@plt>
   127b0:	mov	r1, r4
   127b4:	mov	r7, r0
   127b8:	ldr	r0, [r6, #12]
   127bc:	bl	11220 <ply_list_get_next_node@plt>
   127c0:	mov	r5, r0
   127c4:	mov	r0, r7
   127c8:	bl	1273c <__assert_fail@plt+0x124c>
   127cc:	mov	r1, r4
   127d0:	ldr	r0, [r6, #12]
   127d4:	bl	113d0 <ply_list_remove_node@plt>
   127d8:	subs	r4, r5, #0
   127dc:	bne	127a8 <__assert_fail@plt+0x12b8>
   127e0:	ldr	r1, [r6, #4]
   127e4:	cmp	r1, #0
   127e8:	popeq	{r4, r5, r6, r7, r8, pc}
   127ec:	ldr	r0, [r6]
   127f0:	cmp	r0, #0
   127f4:	beq	12808 <__assert_fail@plt+0x1318>
   127f8:	bl	112f8 <ply_event_loop_stop_watching_fd@plt>
   127fc:	mov	r3, #0
   12800:	str	r3, [r6, #4]
   12804:	pop	{r4, r5, r6, r7, r8, pc}
   12808:	ldr	r3, [pc, #12]	; 1281c <__assert_fail@plt+0x132c>
   1280c:	mov	r2, #108	; 0x6c
   12810:	ldr	r1, [pc, #8]	; 12820 <__assert_fail@plt+0x1330>
   12814:	ldr	r0, [pc, #8]	; 12824 <__assert_fail@plt+0x1334>
   12818:	bl	114f0 <__assert_fail@plt>
   1281c:	muleq	r1, r0, sp
   12820:	andeq	r5, r1, ip, lsr r2
   12824:	andeq	r5, r1, r0, ror #4
   12828:	push	{r4, r5, r6, r7, r8, lr}
   1282c:	mov	r6, r0
   12830:	ldr	r0, [r0, #16]
   12834:	bl	11208 <ply_list_get_length@plt>
   12838:	cmp	r0, #0
   1283c:	popeq	{r4, r5, r6, r7, r8, pc}
   12840:	ldr	r0, [r6, #16]
   12844:	bl	1140c <ply_list_get_first_node@plt>
   12848:	subs	r4, r0, #0
   1284c:	beq	12888 <__assert_fail@plt+0x1398>
   12850:	mov	r0, r4
   12854:	bl	11298 <ply_list_node_get_data@plt>
   12858:	mov	r1, r4
   1285c:	mov	r7, r0
   12860:	ldr	r0, [r6, #16]
   12864:	bl	11220 <ply_list_get_next_node@plt>
   12868:	mov	r5, r0
   1286c:	mov	r0, r7
   12870:	bl	1273c <__assert_fail@plt+0x124c>
   12874:	mov	r1, r4
   12878:	ldr	r0, [r6, #16]
   1287c:	bl	113d0 <ply_list_remove_node@plt>
   12880:	subs	r4, r5, #0
   12884:	bne	12850 <__assert_fail@plt+0x1360>
   12888:	ldr	r1, [r6, #8]
   1288c:	cmp	r1, #0
   12890:	popeq	{r4, r5, r6, r7, r8, pc}
   12894:	ldr	r0, [r6]
   12898:	cmp	r0, #0
   1289c:	beq	128b0 <__assert_fail@plt+0x13c0>
   128a0:	bl	112f8 <ply_event_loop_stop_watching_fd@plt>
   128a4:	mov	r3, #0
   128a8:	str	r3, [r6, #8]
   128ac:	pop	{r4, r5, r6, r7, r8, pc}
   128b0:	ldr	r3, [pc, #12]	; 128c4 <__assert_fail@plt+0x13d4>
   128b4:	mov	r2, #139	; 0x8b
   128b8:	ldr	r1, [pc, #8]	; 128c8 <__assert_fail@plt+0x13d8>
   128bc:	ldr	r0, [pc, #8]	; 128cc <__assert_fail@plt+0x13dc>
   128c0:	bl	114f0 <__assert_fail@plt>
   128c4:			; <UNDEFINED> instruction: 0x00014db8
   128c8:	andeq	r5, r1, ip, lsr r2
   128cc:	andeq	r5, r1, r0, ror #4
   128d0:	push	{r4, r5, r6, r7, r8, lr}
   128d4:	sub	sp, sp, #16
   128d8:	ldr	r7, [pc, #568]	; 12b18 <__assert_fail@plt+0x1628>
   128dc:	mov	r4, r0
   128e0:	ldr	r0, [r0, #12]
   128e4:	ldr	r3, [r7]
   128e8:	str	r3, [sp, #12]
   128ec:	bl	11208 <ply_list_get_length@plt>
   128f0:	cmp	r0, #0
   128f4:	beq	12ab0 <__assert_fail@plt+0x15c0>
   128f8:	ldr	r3, [r4, #4]
   128fc:	cmp	r3, #0
   12900:	beq	12a9c <__assert_fail@plt+0x15ac>
   12904:	ldr	r0, [r4, #12]
   12908:	bl	1140c <ply_list_get_first_node@plt>
   1290c:	subs	r5, r0, #0
   12910:	beq	12a88 <__assert_fail@plt+0x1598>
   12914:	bl	11298 <ply_list_node_get_data@plt>
   12918:	subs	r6, r0, #0
   1291c:	beq	12adc <__assert_fail@plt+0x15ec>
   12920:	mov	r1, r5
   12924:	ldr	r0, [r4, #12]
   12928:	bl	113d0 <ply_list_remove_node@plt>
   1292c:	ldr	r8, [r6, #4]
   12930:	cmp	r8, #0
   12934:	beq	12ac8 <__assert_fail@plt+0x15d8>
   12938:	ldr	r5, [r6, #8]
   1293c:	cmp	r5, #0
   12940:	beq	12a58 <__assert_fail@plt+0x1568>
   12944:	mov	r0, r5
   12948:	bl	1137c <strlen@plt>
   1294c:	cmp	r0, #255	; 0xff
   12950:	bhi	12a74 <__assert_fail@plt+0x1584>
   12954:	mov	r3, #0
   12958:	mov	r0, r5
   1295c:	str	r3, [sp, #8]
   12960:	bl	1137c <strlen@plt>
   12964:	mov	r1, #1
   12968:	ldr	r2, [pc, #428]	; 12b1c <__assert_fail@plt+0x162c>
   1296c:	str	r5, [sp, #4]
   12970:	mov	r3, r8
   12974:	add	ip, r0, r1
   12978:	add	r0, sp, #8
   1297c:	uxtb	ip, ip
   12980:	str	ip, [sp]
   12984:	bl	11334 <__asprintf_chk@plt>
   12988:	ldr	r5, [sp, #8]
   1298c:	mov	r0, r5
   12990:	bl	1137c <strlen@plt>
   12994:	add	r2, r0, #1
   12998:	mov	r1, r5
   1299c:	ldr	r0, [r4, #20]
   129a0:	bl	11274 <ply_write@plt>
   129a4:	cmp	r0, #0
   129a8:	mov	r0, r5
   129ac:	beq	12a18 <__assert_fail@plt+0x1528>
   129b0:	bl	1122c <free@plt>
   129b4:	ldr	r3, [r4, #8]
   129b8:	cmp	r3, #0
   129bc:	beq	12a28 <__assert_fail@plt+0x1538>
   129c0:	mov	r1, r6
   129c4:	ldr	r0, [r4, #16]
   129c8:	bl	11394 <ply_list_append_data@plt>
   129cc:	ldr	r0, [r4, #12]
   129d0:	bl	11208 <ply_list_get_length@plt>
   129d4:	subs	r5, r0, #0
   129d8:	bne	12a00 <__assert_fail@plt+0x1510>
   129dc:	ldr	r3, [r4, #8]
   129e0:	cmp	r3, #0
   129e4:	beq	12a00 <__assert_fail@plt+0x1510>
   129e8:	ldr	r0, [r4]
   129ec:	cmp	r0, #0
   129f0:	beq	12af0 <__assert_fail@plt+0x1600>
   129f4:	ldr	r1, [r4, #4]
   129f8:	bl	112f8 <ply_event_loop_stop_watching_fd@plt>
   129fc:	str	r5, [r4, #4]
   12a00:	ldr	r2, [sp, #12]
   12a04:	ldr	r3, [r7]
   12a08:	cmp	r2, r3
   12a0c:	bne	12ac4 <__assert_fail@plt+0x15d4>
   12a10:	add	sp, sp, #16
   12a14:	pop	{r4, r5, r6, r7, r8, pc}
   12a18:	bl	1122c <free@plt>
   12a1c:	mov	r0, r6
   12a20:	bl	1273c <__assert_fail@plt+0x124c>
   12a24:	b	129cc <__assert_fail@plt+0x14dc>
   12a28:	ldr	r0, [r4, #16]
   12a2c:	bl	11208 <ply_list_get_length@plt>
   12a30:	cmp	r0, #0
   12a34:	bne	12b04 <__assert_fail@plt+0x1614>
   12a38:	stm	sp, {r0, r4}
   12a3c:	ldr	r3, [pc, #220]	; 12b20 <__assert_fail@plt+0x1630>
   12a40:	mov	r2, #1
   12a44:	ldr	r1, [r4, #20]
   12a48:	ldr	r0, [r4]
   12a4c:	bl	1143c <ply_event_loop_watch_fd@plt>
   12a50:	str	r0, [r4, #8]
   12a54:	b	129c0 <__assert_fail@plt+0x14d0>
   12a58:	mov	r0, r8
   12a5c:	bl	112b0 <strdup@plt>
   12a60:	mov	r5, r0
   12a64:	str	r0, [sp, #8]
   12a68:	bl	1137c <strlen@plt>
   12a6c:	add	r2, r0, #1
   12a70:	b	12998 <__assert_fail@plt+0x14a8>
   12a74:	ldr	r3, [pc, #168]	; 12b24 <__assert_fail@plt+0x1634>
   12a78:	ldr	r2, [pc, #168]	; 12b28 <__assert_fail@plt+0x1638>
   12a7c:	ldr	r1, [pc, #168]	; 12b2c <__assert_fail@plt+0x163c>
   12a80:	ldr	r0, [pc, #168]	; 12b30 <__assert_fail@plt+0x1640>
   12a84:	bl	114f0 <__assert_fail@plt>
   12a88:	ldr	r3, [pc, #164]	; 12b34 <__assert_fail@plt+0x1644>
   12a8c:	ldr	r2, [pc, #164]	; 12b38 <__assert_fail@plt+0x1648>
   12a90:	ldr	r1, [pc, #148]	; 12b2c <__assert_fail@plt+0x163c>
   12a94:	ldr	r0, [pc, #160]	; 12b3c <__assert_fail@plt+0x164c>
   12a98:	bl	114f0 <__assert_fail@plt>
   12a9c:	ldr	r3, [pc, #144]	; 12b34 <__assert_fail@plt+0x1644>
   12aa0:	ldr	r2, [pc, #152]	; 12b40 <__assert_fail@plt+0x1650>
   12aa4:	ldr	r1, [pc, #128]	; 12b2c <__assert_fail@plt+0x163c>
   12aa8:	ldr	r0, [pc, #148]	; 12b44 <__assert_fail@plt+0x1654>
   12aac:	bl	114f0 <__assert_fail@plt>
   12ab0:	ldr	r3, [pc, #124]	; 12b34 <__assert_fail@plt+0x1644>
   12ab4:	ldr	r2, [pc, #140]	; 12b48 <__assert_fail@plt+0x1658>
   12ab8:	ldr	r1, [pc, #108]	; 12b2c <__assert_fail@plt+0x163c>
   12abc:	ldr	r0, [pc, #136]	; 12b4c <__assert_fail@plt+0x165c>
   12ac0:	bl	114f0 <__assert_fail@plt>
   12ac4:	bl	112bc <__stack_chk_fail@plt>
   12ac8:	ldr	r3, [pc, #84]	; 12b24 <__assert_fail@plt+0x1634>
   12acc:	ldr	r2, [pc, #124]	; 12b50 <__assert_fail@plt+0x1660>
   12ad0:	ldr	r1, [pc, #84]	; 12b2c <__assert_fail@plt+0x163c>
   12ad4:	ldr	r0, [pc, #120]	; 12b54 <__assert_fail@plt+0x1664>
   12ad8:	bl	114f0 <__assert_fail@plt>
   12adc:	ldr	r3, [pc, #80]	; 12b34 <__assert_fail@plt+0x1644>
   12ae0:	mov	r2, #436	; 0x1b4
   12ae4:	ldr	r1, [pc, #64]	; 12b2c <__assert_fail@plt+0x163c>
   12ae8:	ldr	r0, [pc, #104]	; 12b58 <__assert_fail@plt+0x1668>
   12aec:	bl	114f0 <__assert_fail@plt>
   12af0:	ldr	r3, [pc, #60]	; 12b34 <__assert_fail@plt+0x1644>
   12af4:	ldr	r2, [pc, #96]	; 12b5c <__assert_fail@plt+0x166c>
   12af8:	ldr	r1, [pc, #44]	; 12b2c <__assert_fail@plt+0x163c>
   12afc:	ldr	r0, [pc, #92]	; 12b60 <__assert_fail@plt+0x1670>
   12b00:	bl	114f0 <__assert_fail@plt>
   12b04:	ldr	r3, [pc, #88]	; 12b64 <__assert_fail@plt+0x1674>
   12b08:	mov	r2, #412	; 0x19c
   12b0c:	ldr	r1, [pc, #24]	; 12b2c <__assert_fail@plt+0x163c>
   12b10:	ldr	r0, [pc, #80]	; 12b68 <__assert_fail@plt+0x1678>
   12b14:	bl	114f0 <__assert_fail@plt>
   12b18:	andeq	r6, r2, r0, lsl #30
   12b1c:	andeq	r5, r1, r4, lsl #8
   12b20:	strdeq	r2, [r1], -r0
   12b24:	andeq	r4, r1, r8, lsl lr
   12b28:	andeq	r0, r0, lr, ror r1
   12b2c:	andeq	r5, r1, ip, lsr r2
   12b30:	ldrdeq	r5, [r1], -ip
   12b34:	andeq	r4, r1, ip, ror #27
   12b38:			; <UNDEFINED> instruction: 0x000001b1
   12b3c:	andeq	r5, r1, r8, lsr #6
   12b40:	andeq	r0, r0, lr, lsr #3
   12b44:	muleq	r1, r0, r3
   12b48:	andeq	r0, r0, sp, lsr #3
   12b4c:	andeq	r5, r1, ip, asr r3
   12b50:	andeq	r0, r0, r6, ror r1
   12b54:	andeq	r5, r1, r0, asr #7
   12b58:	andeq	r5, r1, r0, asr #6
   12b5c:			; <UNDEFINED> instruction: 0x000001bd
   12b60:	andeq	r5, r1, r0, ror #4
   12b64:	andeq	r4, r1, ip, lsr lr
   12b68:	andeq	r5, r1, ip, lsl #8
   12b6c:	push	{r4, lr}
   12b70:	subs	r4, r0, #0
   12b74:	beq	12ba0 <__assert_fail@plt+0x16b0>
   12b78:	bl	12780 <__assert_fail@plt+0x1290>
   12b7c:	mov	r0, r4
   12b80:	bl	12828 <__assert_fail@plt+0x1338>
   12b84:	ldr	r3, [r4, #24]
   12b88:	cmp	r3, #0
   12b8c:	popeq	{r4, pc}
   12b90:	mov	r1, r4
   12b94:	ldr	r0, [r4, #28]
   12b98:	pop	{r4, lr}
   12b9c:	bx	r3
   12ba0:	ldr	r3, [pc, #12]	; 12bb4 <__assert_fail@plt+0x16c4>
   12ba4:	mov	r2, #804	; 0x324
   12ba8:	ldr	r1, [pc, #8]	; 12bb8 <__assert_fail@plt+0x16c8>
   12bac:	ldr	r0, [pc, #8]	; 12bbc <__assert_fail@plt+0x16cc>
   12bb0:	bl	114f0 <__assert_fail@plt>
   12bb4:	andeq	r4, r1, ip, asr lr
   12bb8:	andeq	r5, r1, ip, lsr r2
   12bbc:	andeq	r5, r1, r0, asr r2
   12bc0:	push	{r4, r5, r6, lr}
   12bc4:	subs	r4, r0, #0
   12bc8:	sub	sp, sp, #8
   12bcc:	beq	12c3c <__assert_fail@plt+0x174c>
   12bd0:	bl	113a0 <__errno_location@plt>
   12bd4:	mov	r5, r0
   12bd8:	ldr	r6, [r0]
   12bdc:	bl	11430 <ply_logger_get_error_default@plt>
   12be0:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   12be4:	cmp	r0, #0
   12be8:	bne	12c04 <__assert_fail@plt+0x1714>
   12bec:	mov	r3, #0
   12bf0:	str	r3, [r4]
   12bf4:	str	r3, [r4, #4]
   12bf8:	str	r3, [r4, #8]
   12bfc:	add	sp, sp, #8
   12c00:	pop	{r4, r5, r6, pc}
   12c04:	bl	11430 <ply_logger_get_error_default@plt>
   12c08:	bl	1125c <ply_logger_flush@plt>
   12c0c:	str	r6, [r5]
   12c10:	bl	11430 <ply_logger_get_error_default@plt>
   12c14:	ldr	r2, [pc, #52]	; 12c50 <__assert_fail@plt+0x1760>
   12c18:	ldr	r3, [pc, #52]	; 12c54 <__assert_fail@plt+0x1764>
   12c1c:	ldr	r1, [pc, #52]	; 12c58 <__assert_fail@plt+0x1768>
   12c20:	str	r2, [sp]
   12c24:	ldr	r2, [pc, #48]	; 12c5c <__assert_fail@plt+0x176c>
   12c28:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   12c2c:	bl	11430 <ply_logger_get_error_default@plt>
   12c30:	bl	1125c <ply_logger_flush@plt>
   12c34:	str	r6, [r5]
   12c38:	b	12bec <__assert_fail@plt+0x16fc>
   12c3c:	ldr	r3, [pc, #28]	; 12c60 <__assert_fail@plt+0x1770>
   12c40:	ldr	r2, [pc, #28]	; 12c64 <__assert_fail@plt+0x1774>
   12c44:	ldr	r1, [pc, #16]	; 12c5c <__assert_fail@plt+0x176c>
   12c48:	ldr	r0, [pc, #24]	; 12c68 <__assert_fail@plt+0x1778>
   12c4c:	bl	114f0 <__assert_fail@plt>
   12c50:	andeq	r4, r1, r0, lsr #29
   12c54:	andeq	r0, r0, fp, lsl r3
   12c58:	andeq	r5, r1, ip, asr #8
   12c5c:	andeq	r5, r1, ip, lsr r2
   12c60:	andeq	r4, r1, r8, ror lr
   12c64:	andeq	r0, r0, sl, lsl r3
   12c68:	andeq	r5, r1, r0, asr r2
   12c6c:	push	{r4, r5, r6, lr}
   12c70:	mov	r1, #36	; 0x24
   12c74:	mov	r0, #1
   12c78:	bl	111e4 <calloc@plt>
   12c7c:	mov	r5, #0
   12c80:	str	r5, [r0, #4]
   12c84:	str	r5, [r0, #8]
   12c88:	mov	r4, r0
   12c8c:	bl	11418 <ply_list_new@plt>
   12c90:	str	r0, [r4, #12]
   12c94:	bl	11418 <ply_list_new@plt>
   12c98:	ldrb	r3, [r4, #32]
   12c9c:	str	r5, [r4]
   12ca0:	str	r5, [r4, #24]
   12ca4:	bic	r3, r3, #1
   12ca8:	str	r5, [r4, #28]
   12cac:	strb	r3, [r4, #32]
   12cb0:	str	r0, [r4, #16]
   12cb4:	mov	r0, r4
   12cb8:	pop	{r4, r5, r6, pc}
   12cbc:	push	{r4, lr}
   12cc0:	subs	r4, r0, #0
   12cc4:	popeq	{r4, pc}
   12cc8:	bl	12780 <__assert_fail@plt+0x1290>
   12ccc:	mov	r0, r4
   12cd0:	bl	12828 <__assert_fail@plt+0x1338>
   12cd4:	ldr	r0, [r4, #12]
   12cd8:	bl	11490 <ply_list_free@plt>
   12cdc:	ldr	r0, [r4, #16]
   12ce0:	bl	11490 <ply_list_free@plt>
   12ce4:	mov	r0, r4
   12ce8:	pop	{r4, lr}
   12cec:	b	1122c <free@plt>
   12cf0:	push	{r4, r5, r6, r7, r8, lr}
   12cf4:	subs	r4, r0, #0
   12cf8:	sub	sp, sp, #8
   12cfc:	beq	12ea8 <__assert_fail@plt+0x19b8>
   12d00:	ldrb	r3, [r4, #32]
   12d04:	tst	r3, #1
   12d08:	bne	12e94 <__assert_fail@plt+0x19a4>
   12d0c:	ldr	r3, [r4, #24]
   12d10:	cmp	r3, #0
   12d14:	bne	12e80 <__assert_fail@plt+0x1990>
   12d18:	ldr	r3, [r4, #28]
   12d1c:	cmp	r3, #0
   12d20:	bne	12e6c <__assert_fail@plt+0x197c>
   12d24:	mov	r6, r1
   12d28:	ldr	r0, [pc, #396]	; 12ebc <__assert_fail@plt+0x19cc>
   12d2c:	mov	r1, #2
   12d30:	mov	r5, r2
   12d34:	bl	11424 <ply_connect_to_unix_socket@plt>
   12d38:	cmp	r0, #0
   12d3c:	str	r0, [r4, #20]
   12d40:	blt	12d64 <__assert_fail@plt+0x1874>
   12d44:	ldrb	r3, [r4, #32]
   12d48:	mov	r0, #1
   12d4c:	str	r6, [r4, #24]
   12d50:	orr	r3, r3, r0
   12d54:	str	r5, [r4, #28]
   12d58:	strb	r3, [r4, #32]
   12d5c:	add	sp, sp, #8
   12d60:	pop	{r4, r5, r6, r7, r8, pc}
   12d64:	bl	113a0 <__errno_location@plt>
   12d68:	mov	r7, r0
   12d6c:	ldr	r8, [r0]
   12d70:	bl	11430 <ply_logger_get_error_default@plt>
   12d74:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   12d78:	cmp	r0, #0
   12d7c:	bne	12dfc <__assert_fail@plt+0x190c>
   12d80:	ldr	r8, [r7]
   12d84:	bl	11430 <ply_logger_get_error_default@plt>
   12d88:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   12d8c:	cmp	r0, #0
   12d90:	bne	12e34 <__assert_fail@plt+0x1944>
   12d94:	mov	r1, #1
   12d98:	ldr	r0, [pc, #288]	; 12ec0 <__assert_fail@plt+0x19d0>
   12d9c:	bl	11424 <ply_connect_to_unix_socket@plt>
   12da0:	cmp	r0, #0
   12da4:	str	r0, [r4, #20]
   12da8:	bge	12d44 <__assert_fail@plt+0x1854>
   12dac:	ldr	r4, [r7]
   12db0:	bl	11430 <ply_logger_get_error_default@plt>
   12db4:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   12db8:	cmp	r0, #0
   12dbc:	beq	12d5c <__assert_fail@plt+0x186c>
   12dc0:	bl	11430 <ply_logger_get_error_default@plt>
   12dc4:	bl	1125c <ply_logger_flush@plt>
   12dc8:	str	r4, [r7]
   12dcc:	bl	11430 <ply_logger_get_error_default@plt>
   12dd0:	ldr	r2, [pc, #236]	; 12ec4 <__assert_fail@plt+0x19d4>
   12dd4:	mov	r3, #190	; 0xbe
   12dd8:	ldr	r1, [pc, #232]	; 12ec8 <__assert_fail@plt+0x19d8>
   12ddc:	str	r2, [sp]
   12de0:	ldr	r2, [pc, #228]	; 12ecc <__assert_fail@plt+0x19dc>
   12de4:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   12de8:	bl	11430 <ply_logger_get_error_default@plt>
   12dec:	bl	1125c <ply_logger_flush@plt>
   12df0:	str	r4, [r7]
   12df4:	mov	r0, #0
   12df8:	b	12d5c <__assert_fail@plt+0x186c>
   12dfc:	bl	11430 <ply_logger_get_error_default@plt>
   12e00:	bl	1125c <ply_logger_flush@plt>
   12e04:	str	r8, [r7]
   12e08:	bl	11430 <ply_logger_get_error_default@plt>
   12e0c:	ldr	r2, [pc, #176]	; 12ec4 <__assert_fail@plt+0x19d4>
   12e10:	mov	r3, #183	; 0xb7
   12e14:	ldr	r1, [pc, #180]	; 12ed0 <__assert_fail@plt+0x19e0>
   12e18:	str	r2, [sp]
   12e1c:	ldr	r2, [pc, #168]	; 12ecc <__assert_fail@plt+0x19dc>
   12e20:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   12e24:	bl	11430 <ply_logger_get_error_default@plt>
   12e28:	bl	1125c <ply_logger_flush@plt>
   12e2c:	str	r8, [r7]
   12e30:	b	12d84 <__assert_fail@plt+0x1894>
   12e34:	bl	11430 <ply_logger_get_error_default@plt>
   12e38:	bl	1125c <ply_logger_flush@plt>
   12e3c:	str	r8, [r7]
   12e40:	bl	11430 <ply_logger_get_error_default@plt>
   12e44:	ldr	r2, [pc, #120]	; 12ec4 <__assert_fail@plt+0x19d4>
   12e48:	mov	r3, #184	; 0xb8
   12e4c:	ldr	r1, [pc, #128]	; 12ed4 <__assert_fail@plt+0x19e4>
   12e50:	str	r2, [sp]
   12e54:	ldr	r2, [pc, #112]	; 12ecc <__assert_fail@plt+0x19dc>
   12e58:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   12e5c:	bl	11430 <ply_logger_get_error_default@plt>
   12e60:	bl	1125c <ply_logger_flush@plt>
   12e64:	str	r8, [r7]
   12e68:	b	12d94 <__assert_fail@plt+0x18a4>
   12e6c:	ldr	r3, [pc, #100]	; 12ed8 <__assert_fail@plt+0x19e8>
   12e70:	mov	r2, #176	; 0xb0
   12e74:	ldr	r1, [pc, #80]	; 12ecc <__assert_fail@plt+0x19dc>
   12e78:	ldr	r0, [pc, #92]	; 12edc <__assert_fail@plt+0x19ec>
   12e7c:	bl	114f0 <__assert_fail@plt>
   12e80:	ldr	r3, [pc, #80]	; 12ed8 <__assert_fail@plt+0x19e8>
   12e84:	mov	r2, #175	; 0xaf
   12e88:	ldr	r1, [pc, #60]	; 12ecc <__assert_fail@plt+0x19dc>
   12e8c:	ldr	r0, [pc, #76]	; 12ee0 <__assert_fail@plt+0x19f0>
   12e90:	bl	114f0 <__assert_fail@plt>
   12e94:	ldr	r3, [pc, #60]	; 12ed8 <__assert_fail@plt+0x19e8>
   12e98:	mov	r2, #174	; 0xae
   12e9c:	ldr	r1, [pc, #40]	; 12ecc <__assert_fail@plt+0x19dc>
   12ea0:	ldr	r0, [pc, #60]	; 12ee4 <__assert_fail@plt+0x19f4>
   12ea4:	bl	114f0 <__assert_fail@plt>
   12ea8:	ldr	r3, [pc, #40]	; 12ed8 <__assert_fail@plt+0x19e8>
   12eac:	mov	r2, #173	; 0xad
   12eb0:	ldr	r1, [pc, #20]	; 12ecc <__assert_fail@plt+0x19dc>
   12eb4:	ldr	r0, [pc, #44]	; 12ee8 <__assert_fail@plt+0x19f8>
   12eb8:	bl	114f0 <__assert_fail@plt>
   12ebc:	andeq	r5, r1, r4, ror #9
   12ec0:	andeq	r5, r1, r8, lsl #11
   12ec4:	andeq	r4, r1, r0, ror #29
   12ec8:	muleq	r1, ip, r5
   12ecc:	andeq	r5, r1, ip, lsr r2
   12ed0:	andeq	r5, r1, r0, lsl #10
   12ed4:	andeq	r5, r1, r8, asr #10
   12ed8:	andeq	r4, r1, r8, asr #29
   12edc:			; <UNDEFINED> instruction: 0x000154b4
   12ee0:	muleq	r1, r0, r4
   12ee4:	andeq	r5, r1, r8, ror r4
   12ee8:	andeq	r5, r1, r0, asr r2
   12eec:	cmp	r0, #0
   12ef0:	push	{lr}		; (str lr, [sp, #-4]!)
   12ef4:	sub	sp, sp, #12
   12ef8:	beq	12f18 <__assert_fail@plt+0x1a28>
   12efc:	strd	r2, [sp]
   12f00:	mov	r3, r1
   12f04:	mov	r2, #0
   12f08:	ldr	r1, [pc, #28]	; 12f2c <__assert_fail@plt+0x1a3c>
   12f0c:	bl	1225c <__assert_fail@plt+0xd6c>
   12f10:	add	sp, sp, #12
   12f14:	pop	{pc}		; (ldr pc, [sp], #4)
   12f18:	ldr	r3, [pc, #16]	; 12f30 <__assert_fail@plt+0x1a40>
   12f1c:	ldr	r2, [pc, #16]	; 12f34 <__assert_fail@plt+0x1a44>
   12f20:	ldr	r1, [pc, #16]	; 12f38 <__assert_fail@plt+0x1a48>
   12f24:	ldr	r0, [pc, #16]	; 12f3c <__assert_fail@plt+0x1a4c>
   12f28:	bl	114f0 <__assert_fail@plt>
   12f2c:	ldrdeq	r5, [r1], -ip
   12f30:	strdeq	r4, [r1], -r8
   12f34:	strdeq	r0, [r0], -r1
   12f38:	andeq	r5, r1, ip, lsr r2
   12f3c:	andeq	r5, r1, r0, asr r2
   12f40:	cmp	r0, #0
   12f44:	push	{lr}		; (str lr, [sp, #-4]!)
   12f48:	sub	sp, sp, #12
   12f4c:	beq	12f70 <__assert_fail@plt+0x1a80>
   12f50:	ldr	ip, [sp, #16]
   12f54:	stm	sp, {r3, ip}
   12f58:	mov	r3, r2
   12f5c:	mov	r2, r1
   12f60:	ldr	r1, [pc, #28]	; 12f84 <__assert_fail@plt+0x1a94>
   12f64:	bl	1225c <__assert_fail@plt+0xd6c>
   12f68:	add	sp, sp, #12
   12f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f70:	ldr	r3, [pc, #16]	; 12f88 <__assert_fail@plt+0x1a98>
   12f74:	ldr	r2, [pc, #16]	; 12f8c <__assert_fail@plt+0x1a9c>
   12f78:	ldr	r1, [pc, #16]	; 12f90 <__assert_fail@plt+0x1aa0>
   12f7c:	ldr	r0, [pc, #16]	; 12f94 <__assert_fail@plt+0x1aa4>
   12f80:	bl	114f0 <__assert_fail@plt>
   12f84:	andeq	r5, r1, r0, ror #11
   12f88:	andeq	r4, r1, r4, lsl pc
   12f8c:	strdeq	r0, [r0], -lr
   12f90:	andeq	r5, r1, ip, lsr r2
   12f94:	andeq	r5, r1, r0, asr r2
   12f98:	cmp	r0, #0
   12f9c:	push	{lr}		; (str lr, [sp, #-4]!)
   12fa0:	sub	sp, sp, #12
   12fa4:	beq	12fc8 <__assert_fail@plt+0x1ad8>
   12fa8:	ldr	ip, [sp, #16]
   12fac:	stm	sp, {r3, ip}
   12fb0:	mov	r3, r2
   12fb4:	mov	r2, r1
   12fb8:	ldr	r1, [pc, #28]	; 12fdc <__assert_fail@plt+0x1aec>
   12fbc:	bl	1225c <__assert_fail@plt+0xd6c>
   12fc0:	add	sp, sp, #12
   12fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fc8:	ldr	r3, [pc, #16]	; 12fe0 <__assert_fail@plt+0x1af0>
   12fcc:	ldr	r2, [pc, #16]	; 12fe4 <__assert_fail@plt+0x1af4>
   12fd0:	ldr	r1, [pc, #16]	; 12fe8 <__assert_fail@plt+0x1af8>
   12fd4:	ldr	r0, [pc, #16]	; 12fec <__assert_fail@plt+0x1afc>
   12fd8:	bl	114f0 <__assert_fail@plt>
   12fdc:	andeq	r5, r1, r4, ror #11
   12fe0:	andeq	r4, r1, r4, lsr pc
   12fe4:	andeq	r0, r0, fp, lsl #4
   12fe8:	andeq	r5, r1, ip, lsr r2
   12fec:	andeq	r5, r1, r0, asr r2
   12ff0:	cmp	r0, #0
   12ff4:	push	{lr}		; (str lr, [sp, #-4]!)
   12ff8:	sub	sp, sp, #12
   12ffc:	beq	13020 <__assert_fail@plt+0x1b30>
   13000:	ldr	ip, [sp, #16]
   13004:	stm	sp, {r3, ip}
   13008:	mov	r3, r2
   1300c:	mov	r2, r1
   13010:	ldr	r1, [pc, #28]	; 13034 <__assert_fail@plt+0x1b44>
   13014:	bl	1225c <__assert_fail@plt+0xd6c>
   13018:	add	sp, sp, #12
   1301c:	pop	{pc}		; (ldr pc, [sp], #4)
   13020:	ldr	r3, [pc, #16]	; 13038 <__assert_fail@plt+0x1b48>
   13024:	mov	r2, #536	; 0x218
   13028:	ldr	r1, [pc, #12]	; 1303c <__assert_fail@plt+0x1b4c>
   1302c:	ldr	r0, [pc, #12]	; 13040 <__assert_fail@plt+0x1b50>
   13030:	bl	114f0 <__assert_fail@plt>
   13034:	andeq	r5, r1, r8, ror #11
   13038:	andeq	r4, r1, r0, asr pc
   1303c:	andeq	r5, r1, ip, lsr r2
   13040:	andeq	r5, r1, r0, asr r2
   13044:	cmp	r0, #0
   13048:	push	{lr}		; (str lr, [sp, #-4]!)
   1304c:	sub	sp, sp, #12
   13050:	beq	1307c <__assert_fail@plt+0x1b8c>
   13054:	cmp	r1, #0
   13058:	beq	13090 <__assert_fail@plt+0x1ba0>
   1305c:	ldr	ip, [sp, #16]
   13060:	stm	sp, {r3, ip}
   13064:	mov	r3, r2
   13068:	mov	r2, r1
   1306c:	ldr	r1, [pc, #48]	; 130a4 <__assert_fail@plt+0x1bb4>
   13070:	bl	1225c <__assert_fail@plt+0xd6c>
   13074:	add	sp, sp, #12
   13078:	pop	{pc}		; (ldr pc, [sp], #4)
   1307c:	ldr	r3, [pc, #36]	; 130a8 <__assert_fail@plt+0x1bb8>
   13080:	ldr	r2, [pc, #36]	; 130ac <__assert_fail@plt+0x1bbc>
   13084:	ldr	r1, [pc, #36]	; 130b0 <__assert_fail@plt+0x1bc0>
   13088:	ldr	r0, [pc, #36]	; 130b4 <__assert_fail@plt+0x1bc4>
   1308c:	bl	114f0 <__assert_fail@plt>
   13090:	ldr	r3, [pc, #16]	; 130a8 <__assert_fail@plt+0x1bb8>
   13094:	ldr	r2, [pc, #28]	; 130b8 <__assert_fail@plt+0x1bc8>
   13098:	ldr	r1, [pc, #16]	; 130b0 <__assert_fail@plt+0x1bc0>
   1309c:	ldr	r0, [pc, #24]	; 130bc <__assert_fail@plt+0x1bcc>
   130a0:	bl	114f0 <__assert_fail@plt>
   130a4:	andeq	r5, r1, r0, lsl #12
   130a8:	andeq	r4, r1, r0, ror pc
   130ac:	andeq	r0, r0, r5, lsr #4
   130b0:	andeq	r5, r1, ip, lsr r2
   130b4:	andeq	r5, r1, r0, asr r2
   130b8:	andeq	r0, r0, r6, lsr #4
   130bc:	andeq	r5, r1, ip, ror #11
   130c0:	cmp	r0, #0
   130c4:	push	{lr}		; (str lr, [sp, #-4]!)
   130c8:	sub	sp, sp, #12
   130cc:	beq	130f8 <__assert_fail@plt+0x1c08>
   130d0:	cmp	r1, #0
   130d4:	beq	1310c <__assert_fail@plt+0x1c1c>
   130d8:	ldr	ip, [sp, #16]
   130dc:	stm	sp, {r3, ip}
   130e0:	mov	r3, r2
   130e4:	mov	r2, r1
   130e8:	ldr	r1, [pc, #48]	; 13120 <__assert_fail@plt+0x1c30>
   130ec:	bl	1225c <__assert_fail@plt+0xd6c>
   130f0:	add	sp, sp, #12
   130f4:	pop	{pc}		; (ldr pc, [sp], #4)
   130f8:	ldr	r3, [pc, #36]	; 13124 <__assert_fail@plt+0x1c34>
   130fc:	ldr	r2, [pc, #36]	; 13128 <__assert_fail@plt+0x1c38>
   13100:	ldr	r1, [pc, #36]	; 1312c <__assert_fail@plt+0x1c3c>
   13104:	ldr	r0, [pc, #36]	; 13130 <__assert_fail@plt+0x1c40>
   13108:	bl	114f0 <__assert_fail@plt>
   1310c:	ldr	r3, [pc, #16]	; 13124 <__assert_fail@plt+0x1c34>
   13110:	mov	r2, #564	; 0x234
   13114:	ldr	r1, [pc, #16]	; 1312c <__assert_fail@plt+0x1c3c>
   13118:	ldr	r0, [pc, #20]	; 13134 <__assert_fail@plt+0x1c44>
   1311c:	bl	114f0 <__assert_fail@plt>
   13120:	andeq	r5, r1, r4, lsl r6
   13124:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13128:	andeq	r0, r0, r3, lsr r2
   1312c:	andeq	r5, r1, ip, lsr r2
   13130:	andeq	r5, r1, r0, asr r2
   13134:	andeq	r5, r1, r4, lsl #12
   13138:	cmp	r0, #0
   1313c:	push	{lr}		; (str lr, [sp, #-4]!)
   13140:	sub	sp, sp, #12
   13144:	beq	13170 <__assert_fail@plt+0x1c80>
   13148:	cmp	r1, #0
   1314c:	beq	13184 <__assert_fail@plt+0x1c94>
   13150:	ldr	ip, [sp, #16]
   13154:	stm	sp, {r3, ip}
   13158:	mov	r3, r2
   1315c:	mov	r2, r1
   13160:	ldr	r1, [pc, #48]	; 13198 <__assert_fail@plt+0x1ca8>
   13164:	bl	1225c <__assert_fail@plt+0xd6c>
   13168:	add	sp, sp, #12
   1316c:	pop	{pc}		; (ldr pc, [sp], #4)
   13170:	ldr	r3, [pc, #36]	; 1319c <__assert_fail@plt+0x1cac>
   13174:	ldr	r2, [pc, #36]	; 131a0 <__assert_fail@plt+0x1cb0>
   13178:	ldr	r1, [pc, #36]	; 131a4 <__assert_fail@plt+0x1cb4>
   1317c:	ldr	r0, [pc, #36]	; 131a8 <__assert_fail@plt+0x1cb8>
   13180:	bl	114f0 <__assert_fail@plt>
   13184:	ldr	r3, [pc, #16]	; 1319c <__assert_fail@plt+0x1cac>
   13188:	ldr	r2, [pc, #28]	; 131ac <__assert_fail@plt+0x1cbc>
   1318c:	ldr	r1, [pc, #16]	; 131a4 <__assert_fail@plt+0x1cb4>
   13190:	ldr	r0, [pc, #24]	; 131b0 <__assert_fail@plt+0x1cc0>
   13194:	bl	114f0 <__assert_fail@plt>
   13198:	andeq	r5, r1, r8, lsl r6
   1319c:	andeq	r4, r1, ip, asr #31
   131a0:	andeq	r0, r0, r1, asr #4
   131a4:	andeq	r5, r1, ip, lsr r2
   131a8:	andeq	r5, r1, r0, asr r2
   131ac:	andeq	r0, r0, r2, asr #4
   131b0:	andeq	r5, r1, r4, lsl #12
   131b4:	cmp	r0, #0
   131b8:	push	{lr}		; (str lr, [sp, #-4]!)
   131bc:	sub	sp, sp, #12
   131c0:	beq	131e0 <__assert_fail@plt+0x1cf0>
   131c4:	strd	r2, [sp]
   131c8:	mov	r3, r1
   131cc:	mov	r2, #0
   131d0:	ldr	r1, [pc, #28]	; 131f4 <__assert_fail@plt+0x1d04>
   131d4:	bl	1225c <__assert_fail@plt+0xd6c>
   131d8:	add	sp, sp, #12
   131dc:	pop	{pc}		; (ldr pc, [sp], #4)
   131e0:	ldr	r3, [pc, #16]	; 131f8 <__assert_fail@plt+0x1d08>
   131e4:	ldr	r2, [pc, #16]	; 131fc <__assert_fail@plt+0x1d0c>
   131e8:	ldr	r1, [pc, #16]	; 13200 <__assert_fail@plt+0x1d10>
   131ec:	ldr	r0, [pc, #16]	; 13204 <__assert_fail@plt+0x1d14>
   131f0:	bl	114f0 <__assert_fail@plt>
   131f4:	andeq	r5, r1, ip, lsl r6
   131f8:	strdeq	r4, [r1], -r8
   131fc:	andeq	r0, r0, lr, asr #4
   13200:	andeq	r5, r1, ip, lsr r2
   13204:	andeq	r5, r1, r0, asr r2
   13208:	cmp	r0, #0
   1320c:	push	{lr}		; (str lr, [sp, #-4]!)
   13210:	sub	sp, sp, #12
   13214:	beq	13238 <__assert_fail@plt+0x1d48>
   13218:	ldr	ip, [sp, #16]
   1321c:	stm	sp, {r3, ip}
   13220:	mov	r3, r2
   13224:	mov	r2, r1
   13228:	ldr	r1, [pc, #28]	; 1324c <__assert_fail@plt+0x1d5c>
   1322c:	bl	1225c <__assert_fail@plt+0xd6c>
   13230:	add	sp, sp, #12
   13234:	pop	{pc}		; (ldr pc, [sp], #4)
   13238:	ldr	r3, [pc, #16]	; 13250 <__assert_fail@plt+0x1d60>
   1323c:	ldr	r2, [pc, #16]	; 13254 <__assert_fail@plt+0x1d64>
   13240:	ldr	r1, [pc, #16]	; 13258 <__assert_fail@plt+0x1d68>
   13244:	ldr	r0, [pc, #16]	; 1325c <__assert_fail@plt+0x1d6c>
   13248:	bl	114f0 <__assert_fail@plt>
   1324c:	andeq	r5, r1, r0, lsr #12
   13250:	andeq	r5, r1, ip, lsr #32
   13254:	andeq	r0, r0, sp, asr r2
   13258:	andeq	r5, r1, ip, lsr r2
   1325c:	andeq	r5, r1, r0, asr r2
   13260:	cmp	r0, #0
   13264:	push	{lr}		; (str lr, [sp, #-4]!)
   13268:	sub	sp, sp, #12
   1326c:	beq	1328c <__assert_fail@plt+0x1d9c>
   13270:	strd	r2, [sp]
   13274:	mov	r3, r1
   13278:	mov	r2, #0
   1327c:	ldr	r1, [pc, #28]	; 132a0 <__assert_fail@plt+0x1db0>
   13280:	bl	1225c <__assert_fail@plt+0xd6c>
   13284:	add	sp, sp, #12
   13288:	pop	{pc}		; (ldr pc, [sp], #4)
   1328c:	ldr	r3, [pc, #16]	; 132a4 <__assert_fail@plt+0x1db4>
   13290:	ldr	r2, [pc, #16]	; 132a8 <__assert_fail@plt+0x1db8>
   13294:	ldr	r1, [pc, #16]	; 132ac <__assert_fail@plt+0x1dbc>
   13298:	ldr	r0, [pc, #16]	; 132b0 <__assert_fail@plt+0x1dc0>
   1329c:	bl	114f0 <__assert_fail@plt>
   132a0:	andeq	r5, r1, r4, lsr #12
   132a4:	andeq	r5, r1, r4, asr r0
   132a8:	andeq	r0, r0, sl, ror #4
   132ac:	andeq	r5, r1, ip, lsr r2
   132b0:	andeq	r5, r1, r0, asr r2
   132b4:	cmp	r0, #0
   132b8:	push	{lr}		; (str lr, [sp, #-4]!)
   132bc:	sub	sp, sp, #12
   132c0:	beq	132e4 <__assert_fail@plt+0x1df4>
   132c4:	ldr	ip, [sp, #16]
   132c8:	stm	sp, {r3, ip}
   132cc:	mov	r3, r2
   132d0:	mov	r2, r1
   132d4:	ldr	r1, [pc, #28]	; 132f8 <__assert_fail@plt+0x1e08>
   132d8:	bl	1225c <__assert_fail@plt+0xd6c>
   132dc:	add	sp, sp, #12
   132e0:	pop	{pc}		; (ldr pc, [sp], #4)
   132e4:	ldr	r3, [pc, #16]	; 132fc <__assert_fail@plt+0x1e0c>
   132e8:	mov	r2, #632	; 0x278
   132ec:	ldr	r1, [pc, #12]	; 13300 <__assert_fail@plt+0x1e10>
   132f0:	ldr	r0, [pc, #12]	; 13304 <__assert_fail@plt+0x1e14>
   132f4:	bl	114f0 <__assert_fail@plt>
   132f8:	andeq	r5, r1, r8, lsr #12
   132fc:	andeq	r5, r1, r4, lsl #1
   13300:	andeq	r5, r1, ip, lsr r2
   13304:	andeq	r5, r1, r0, asr r2
   13308:	cmp	r0, #0
   1330c:	push	{lr}		; (str lr, [sp, #-4]!)
   13310:	sub	sp, sp, #12
   13314:	beq	13338 <__assert_fail@plt+0x1e48>
   13318:	ldr	ip, [sp, #16]
   1331c:	stm	sp, {r3, ip}
   13320:	mov	r3, r2
   13324:	mov	r2, r1
   13328:	ldr	r1, [pc, #28]	; 1334c <__assert_fail@plt+0x1e5c>
   1332c:	bl	1225c <__assert_fail@plt+0xd6c>
   13330:	add	sp, sp, #12
   13334:	pop	{pc}		; (ldr pc, [sp], #4)
   13338:	ldr	r3, [pc, #16]	; 13350 <__assert_fail@plt+0x1e60>
   1333c:	ldr	r2, [pc, #16]	; 13354 <__assert_fail@plt+0x1e64>
   13340:	ldr	r1, [pc, #16]	; 13358 <__assert_fail@plt+0x1e68>
   13344:	ldr	r0, [pc, #16]	; 1335c <__assert_fail@plt+0x1e6c>
   13348:	bl	114f0 <__assert_fail@plt>
   1334c:	andeq	r5, r1, ip, lsr #12
   13350:	andeq	r5, r1, r8, lsr #1
   13354:	andeq	r0, r0, r6, lsl #5
   13358:	andeq	r5, r1, ip, lsr r2
   1335c:	andeq	r5, r1, r0, asr r2
   13360:	cmp	r0, #0
   13364:	push	{lr}		; (str lr, [sp, #-4]!)
   13368:	sub	sp, sp, #12
   1336c:	beq	13390 <__assert_fail@plt+0x1ea0>
   13370:	ldr	ip, [sp, #16]
   13374:	stm	sp, {r3, ip}
   13378:	mov	r3, r2
   1337c:	mov	r2, r1
   13380:	ldr	r1, [pc, #28]	; 133a4 <__assert_fail@plt+0x1eb4>
   13384:	bl	1225c <__assert_fail@plt+0xd6c>
   13388:	add	sp, sp, #12
   1338c:	pop	{pc}		; (ldr pc, [sp], #4)
   13390:	ldr	r3, [pc, #16]	; 133a8 <__assert_fail@plt+0x1eb8>
   13394:	mov	r2, #660	; 0x294
   13398:	ldr	r1, [pc, #12]	; 133ac <__assert_fail@plt+0x1ebc>
   1339c:	ldr	r0, [pc, #12]	; 133b0 <__assert_fail@plt+0x1ec0>
   133a0:	bl	114f0 <__assert_fail@plt>
   133a4:	andeq	r5, r1, r0, lsr sl
   133a8:	ldrdeq	r5, [r1], -ip
   133ac:	andeq	r5, r1, ip, lsr r2
   133b0:	andeq	r5, r1, r0, asr r2
   133b4:	cmp	r0, #0
   133b8:	push	{lr}		; (str lr, [sp, #-4]!)
   133bc:	sub	sp, sp, #12
   133c0:	beq	133e0 <__assert_fail@plt+0x1ef0>
   133c4:	strd	r2, [sp]
   133c8:	mov	r3, r1
   133cc:	mov	r2, #0
   133d0:	ldr	r1, [pc, #28]	; 133f4 <__assert_fail@plt+0x1f04>
   133d4:	bl	1225c <__assert_fail@plt+0xd6c>
   133d8:	add	sp, sp, #12
   133dc:	pop	{pc}		; (ldr pc, [sp], #4)
   133e0:	ldr	r3, [pc, #16]	; 133f8 <__assert_fail@plt+0x1f08>
   133e4:	ldr	r2, [pc, #16]	; 133fc <__assert_fail@plt+0x1f0c>
   133e8:	ldr	r1, [pc, #16]	; 13400 <__assert_fail@plt+0x1f10>
   133ec:	ldr	r0, [pc, #16]	; 13404 <__assert_fail@plt+0x1f14>
   133f0:	bl	114f0 <__assert_fail@plt>
   133f4:	andeq	r5, r1, r0, lsr r6
   133f8:	andeq	r5, r1, ip, lsl #2
   133fc:	andeq	r0, r0, r1, lsr #5
   13400:	andeq	r5, r1, ip, lsr r2
   13404:	andeq	r5, r1, r0, asr r2
   13408:	cmp	r0, #0
   1340c:	push	{lr}		; (str lr, [sp, #-4]!)
   13410:	sub	sp, sp, #12
   13414:	beq	13434 <__assert_fail@plt+0x1f44>
   13418:	strd	r2, [sp]
   1341c:	mov	r3, r1
   13420:	mov	r2, #0
   13424:	ldr	r1, [pc, #28]	; 13448 <__assert_fail@plt+0x1f58>
   13428:	bl	1225c <__assert_fail@plt+0xd6c>
   1342c:	add	sp, sp, #12
   13430:	pop	{pc}		; (ldr pc, [sp], #4)
   13434:	ldr	r3, [pc, #16]	; 1344c <__assert_fail@plt+0x1f5c>
   13438:	ldr	r2, [pc, #16]	; 13450 <__assert_fail@plt+0x1f60>
   1343c:	ldr	r1, [pc, #16]	; 13454 <__assert_fail@plt+0x1f64>
   13440:	ldr	r0, [pc, #16]	; 13458 <__assert_fail@plt+0x1f68>
   13444:	bl	114f0 <__assert_fail@plt>
   13448:	andeq	r5, r1, r4, lsr r6
   1344c:	andeq	r5, r1, r8, lsr r1
   13450:	andeq	r0, r0, sp, lsr #5
   13454:	andeq	r5, r1, ip, lsr r2
   13458:	andeq	r5, r1, r0, asr r2
   1345c:	cmp	r0, #0
   13460:	push	{lr}		; (str lr, [sp, #-4]!)
   13464:	sub	sp, sp, #12
   13468:	beq	13488 <__assert_fail@plt+0x1f98>
   1346c:	strd	r2, [sp]
   13470:	mov	r3, r1
   13474:	mov	r2, #0
   13478:	ldr	r1, [pc, #28]	; 1349c <__assert_fail@plt+0x1fac>
   1347c:	bl	1225c <__assert_fail@plt+0xd6c>
   13480:	add	sp, sp, #12
   13484:	pop	{pc}		; (ldr pc, [sp], #4)
   13488:	ldr	r3, [pc, #16]	; 134a0 <__assert_fail@plt+0x1fb0>
   1348c:	ldr	r2, [pc, #16]	; 134a4 <__assert_fail@plt+0x1fb4>
   13490:	ldr	r1, [pc, #16]	; 134a8 <__assert_fail@plt+0x1fb8>
   13494:	ldr	r0, [pc, #16]	; 134ac <__assert_fail@plt+0x1fbc>
   13498:	bl	114f0 <__assert_fail@plt>
   1349c:	andeq	r5, r1, r8, lsr r6
   134a0:	andeq	r5, r1, r4, ror #2
   134a4:			; <UNDEFINED> instruction: 0x000002b9
   134a8:	andeq	r5, r1, ip, lsr r2
   134ac:	andeq	r5, r1, r0, asr r2
   134b0:	cmp	r0, #0
   134b4:	push	{lr}		; (str lr, [sp, #-4]!)
   134b8:	sub	sp, sp, #12
   134bc:	beq	134dc <__assert_fail@plt+0x1fec>
   134c0:	strd	r2, [sp]
   134c4:	mov	r3, r1
   134c8:	mov	r2, #0
   134cc:	ldr	r1, [pc, #28]	; 134f0 <__assert_fail@plt+0x2000>
   134d0:	bl	1225c <__assert_fail@plt+0xd6c>
   134d4:	add	sp, sp, #12
   134d8:	pop	{pc}		; (ldr pc, [sp], #4)
   134dc:	ldr	r3, [pc, #16]	; 134f4 <__assert_fail@plt+0x2004>
   134e0:	ldr	r2, [pc, #16]	; 134f8 <__assert_fail@plt+0x2008>
   134e4:	ldr	r1, [pc, #16]	; 134fc <__assert_fail@plt+0x200c>
   134e8:	ldr	r0, [pc, #16]	; 13500 <__assert_fail@plt+0x2010>
   134ec:	bl	114f0 <__assert_fail@plt>
   134f0:	andeq	r6, r1, ip, lsr r2
   134f4:	muleq	r1, r0, r1
   134f8:	andeq	r0, r0, r5, asr #5
   134fc:	andeq	r5, r1, ip, lsr r2
   13500:	andeq	r5, r1, r0, asr r2
   13504:	push	{r4, lr}
   13508:	sub	sp, sp, #16
   1350c:	ldr	r4, [pc, #104]	; 1357c <__assert_fail@plt+0x208c>
   13510:	mov	lr, r1
   13514:	cmp	r0, #0
   13518:	ldr	ip, [r4]
   1351c:	mov	r1, #0
   13520:	strh	r1, [sp, #8]
   13524:	str	ip, [sp, #12]
   13528:	ldr	r1, [sp, #24]
   1352c:	beq	13564 <__assert_fail@plt+0x2074>
   13530:	str	r1, [sp, #4]
   13534:	str	r3, [sp]
   13538:	ldr	r1, [pc, #64]	; 13580 <__assert_fail@plt+0x2090>
   1353c:	mov	r3, r2
   13540:	add	r2, sp, #8
   13544:	strb	lr, [sp, #8]
   13548:	bl	1225c <__assert_fail@plt+0xd6c>
   1354c:	ldr	r2, [sp, #12]
   13550:	ldr	r3, [r4]
   13554:	cmp	r2, r3
   13558:	bne	13578 <__assert_fail@plt+0x2088>
   1355c:	add	sp, sp, #16
   13560:	pop	{r4, pc}
   13564:	ldr	r3, [pc, #24]	; 13584 <__assert_fail@plt+0x2094>
   13568:	mov	r2, #724	; 0x2d4
   1356c:	ldr	r1, [pc, #20]	; 13588 <__assert_fail@plt+0x2098>
   13570:	ldr	r0, [pc, #20]	; 1358c <__assert_fail@plt+0x209c>
   13574:	bl	114f0 <__assert_fail@plt>
   13578:	bl	112bc <__stack_chk_fail@plt>
   1357c:	andeq	r6, r2, r0, lsl #30
   13580:	andeq	r5, r1, ip, lsr r6
   13584:			; <UNDEFINED> instruction: 0x000151bc
   13588:	andeq	r5, r1, ip, lsr r2
   1358c:	andeq	r5, r1, r0, asr r2
   13590:	push	{lr}		; (str lr, [sp, #-4]!)
   13594:	sub	sp, sp, #12
   13598:	strd	r2, [sp]
   1359c:	mov	r3, r1
   135a0:	mov	r2, #0
   135a4:	ldr	r1, [pc, #8]	; 135b4 <__assert_fail@plt+0x20c4>
   135a8:	bl	1225c <__assert_fail@plt+0xd6c>
   135ac:	add	sp, sp, #12
   135b0:	pop	{pc}		; (ldr pc, [sp], #4)
   135b4:	andeq	r5, r1, r0, asr #12
   135b8:	push	{lr}		; (str lr, [sp, #-4]!)
   135bc:	sub	sp, sp, #12
   135c0:	strd	r2, [sp]
   135c4:	mov	r3, r1
   135c8:	mov	r2, #0
   135cc:	ldr	r1, [pc, #8]	; 135dc <__assert_fail@plt+0x20ec>
   135d0:	bl	1225c <__assert_fail@plt+0xd6c>
   135d4:	add	sp, sp, #12
   135d8:	pop	{pc}		; (ldr pc, [sp], #4)
   135dc:	andeq	r5, r1, r4, asr #12
   135e0:	push	{lr}		; (str lr, [sp, #-4]!)
   135e4:	sub	sp, sp, #12
   135e8:	strd	r2, [sp]
   135ec:	mov	r3, r1
   135f0:	mov	r2, #0
   135f4:	ldr	r1, [pc, #8]	; 13604 <__assert_fail@plt+0x2114>
   135f8:	bl	1225c <__assert_fail@plt+0xd6c>
   135fc:	add	sp, sp, #12
   13600:	pop	{pc}		; (ldr pc, [sp], #4)
   13604:	andeq	r5, r1, r8, asr #12
   13608:	push	{lr}		; (str lr, [sp, #-4]!)
   1360c:	sub	sp, sp, #12
   13610:	strd	r2, [sp]
   13614:	mov	r3, r1
   13618:	mov	r2, #0
   1361c:	ldr	r1, [pc, #8]	; 1362c <__assert_fail@plt+0x213c>
   13620:	bl	1225c <__assert_fail@plt+0xd6c>
   13624:	add	sp, sp, #12
   13628:	pop	{pc}		; (ldr pc, [sp], #4)
   1362c:	andeq	r5, r1, ip, asr #12
   13630:	push	{r4, lr}
   13634:	subs	r4, r0, #0
   13638:	beq	13658 <__assert_fail@plt+0x2168>
   1363c:	ldr	r0, [r4, #12]
   13640:	bl	11208 <ply_list_get_length@plt>
   13644:	cmp	r0, #0
   13648:	pople	{r4, pc}
   1364c:	ldr	r0, [r4]
   13650:	bl	1128c <ply_event_loop_process_pending_events@plt>
   13654:	b	1363c <__assert_fail@plt+0x214c>
   13658:	ldr	r3, [pc, #12]	; 1366c <__assert_fail@plt+0x217c>
   1365c:	ldr	r2, [pc, #12]	; 13670 <__assert_fail@plt+0x2180>
   13660:	ldr	r1, [pc, #12]	; 13674 <__assert_fail@plt+0x2184>
   13664:	ldr	r0, [pc, #12]	; 13678 <__assert_fail@plt+0x2188>
   13668:	bl	114f0 <__assert_fail@plt>
   1366c:	andeq	r5, r1, r0, ror #3
   13670:	andeq	r0, r0, r6, lsl #6
   13674:	andeq	r5, r1, ip, lsr r2
   13678:	andeq	r5, r1, r0, asr r2
   1367c:	push	{r4, lr}
   13680:	subs	r4, r0, #0
   13684:	beq	136a8 <__assert_fail@plt+0x21b8>
   13688:	ldr	r0, [r4, #20]
   1368c:	bl	114cc <close@plt>
   13690:	ldrb	r3, [r4, #32]
   13694:	mvn	r2, #0
   13698:	str	r2, [r4, #20]
   1369c:	bic	r3, r3, #1
   136a0:	strb	r3, [r4, #32]
   136a4:	pop	{r4, pc}
   136a8:	ldr	r3, [pc, #12]	; 136bc <__assert_fail@plt+0x21cc>
   136ac:	mov	r2, #784	; 0x310
   136b0:	ldr	r1, [pc, #8]	; 136c0 <__assert_fail@plt+0x21d0>
   136b4:	ldr	r0, [pc, #8]	; 136c4 <__assert_fail@plt+0x21d4>
   136b8:	bl	114f0 <__assert_fail@plt>
   136bc:	strdeq	r5, [r1], -r8
   136c0:	andeq	r5, r1, ip, lsr r2
   136c4:	andeq	r5, r1, r0, asr r2
   136c8:	push	{r4, r5, lr}
   136cc:	subs	r4, r0, #0
   136d0:	sub	sp, sp, #12
   136d4:	beq	13754 <__assert_fail@plt+0x2264>
   136d8:	cmp	r1, #0
   136dc:	mov	r5, r1
   136e0:	beq	13740 <__assert_fail@plt+0x2250>
   136e4:	ldr	r3, [r4]
   136e8:	cmp	r3, #0
   136ec:	bne	1372c <__assert_fail@plt+0x223c>
   136f0:	ldr	r1, [r4, #20]
   136f4:	str	r5, [r4]
   136f8:	cmp	r1, #0
   136fc:	blt	13714 <__assert_fail@plt+0x2224>
   13700:	ldr	r2, [pc, #96]	; 13768 <__assert_fail@plt+0x2278>
   13704:	mov	r0, r5
   13708:	stm	sp, {r2, r4}
   1370c:	mov	r2, r3
   13710:	bl	1143c <ply_event_loop_watch_fd@plt>
   13714:	mov	r2, r4
   13718:	mov	r0, r5
   1371c:	ldr	r1, [pc, #72]	; 1376c <__assert_fail@plt+0x227c>
   13720:	add	sp, sp, #12
   13724:	pop	{r4, r5, lr}
   13728:	b	11454 <ply_event_loop_watch_for_exit@plt>
   1372c:	ldr	r3, [pc, #60]	; 13770 <__assert_fail@plt+0x2280>
   13730:	ldr	r2, [pc, #60]	; 13774 <__assert_fail@plt+0x2284>
   13734:	ldr	r1, [pc, #60]	; 13778 <__assert_fail@plt+0x2288>
   13738:	ldr	r0, [pc, #60]	; 1377c <__assert_fail@plt+0x228c>
   1373c:	bl	114f0 <__assert_fail@plt>
   13740:	ldr	r3, [pc, #40]	; 13770 <__assert_fail@plt+0x2280>
   13744:	ldr	r2, [pc, #52]	; 13780 <__assert_fail@plt+0x2290>
   13748:	ldr	r1, [pc, #40]	; 13778 <__assert_fail@plt+0x2288>
   1374c:	ldr	r0, [pc, #48]	; 13784 <__assert_fail@plt+0x2294>
   13750:	bl	114f0 <__assert_fail@plt>
   13754:	ldr	r3, [pc, #20]	; 13770 <__assert_fail@plt+0x2280>
   13758:	mov	r2, #816	; 0x330
   1375c:	ldr	r1, [pc, #20]	; 13778 <__assert_fail@plt+0x2288>
   13760:	ldr	r0, [pc, #32]	; 13788 <__assert_fail@plt+0x2298>
   13764:	bl	114f0 <__assert_fail@plt>
   13768:	andeq	r2, r1, ip, ror #22
   1376c:	andeq	r2, r1, r0, asr #23
   13770:	andeq	r5, r1, r4, lsl r2
   13774:	andeq	r0, r0, r2, lsr r3
   13778:	andeq	r5, r1, ip, lsr r2
   1377c:	andeq	r5, r1, r0, asr r6
   13780:	andeq	r0, r0, r1, lsr r3
   13784:	andeq	r5, r1, r8, ror #4
   13788:	andeq	r5, r1, r0, asr r2
   1378c:	mov	r3, r0
   13790:	ldr	r2, [pc, #8]	; 137a0 <__assert_fail@plt+0x22b0>
   13794:	ldr	r0, [r0, #4]
   13798:	ldr	r1, [pc, #4]	; 137a4 <__assert_fail@plt+0x22b4>
   1379c:	b	133b4 <__assert_fail@plt+0x1ec4>
   137a0:	andeq	r3, r1, r0, ror #15
   137a4:	andeq	r3, r1, ip, ror #15
   137a8:	mov	r3, r0
   137ac:	ldr	r2, [pc, #8]	; 137bc <__assert_fail@plt+0x22cc>
   137b0:	ldr	r0, [r0, #4]
   137b4:	ldr	r1, [pc, #4]	; 137c0 <__assert_fail@plt+0x22d0>
   137b8:	b	13408 <__assert_fail@plt+0x1f18>
   137bc:	andeq	r3, r1, r0, ror #15
   137c0:	andeq	r3, r1, ip, ror #15
   137c4:	mov	r3, r0
   137c8:	ldr	r2, [pc, #8]	; 137d8 <__assert_fail@plt+0x22e8>
   137cc:	ldr	r0, [r0, #4]
   137d0:	ldr	r1, [pc, #4]	; 137dc <__assert_fail@plt+0x22ec>
   137d4:	b	13608 <__assert_fail@plt+0x2118>
   137d8:	andeq	r3, r1, r0, ror #15
   137dc:	andeq	r3, r1, ip, ror #15
   137e0:	ldr	r0, [r0]
   137e4:	mov	r1, #1
   137e8:	b	11388 <ply_event_loop_exit@plt>
   137ec:	ldr	r0, [r0]
   137f0:	mov	r1, #0
   137f4:	b	11388 <ply_event_loop_exit@plt>
   137f8:	push	{r4, r5, r6, r7, r8, lr}
   137fc:	mov	r4, #0
   13800:	ldr	r5, [pc, #192]	; 138c8 <__assert_fail@plt+0x23d8>
   13804:	sub	sp, sp, #16
   13808:	mov	r3, r4
   1380c:	ldr	ip, [r5]
   13810:	mov	r6, r0
   13814:	add	r2, sp, #11
   13818:	ldr	r0, [r0, #8]
   1381c:	ldr	r1, [pc, #168]	; 138cc <__assert_fail@plt+0x23dc>
   13820:	str	ip, [sp, #12]
   13824:	strb	r4, [sp, #11]
   13828:	bl	111fc <ply_command_parser_get_options@plt>
   1382c:	ldrb	r3, [sp, #11]
   13830:	cmp	r3, r4
   13834:	beq	13878 <__assert_fail@plt+0x2388>
   13838:	bl	113a0 <__errno_location@plt>
   1383c:	mov	r7, r0
   13840:	ldr	r8, [r0]
   13844:	bl	11430 <ply_logger_get_error_default@plt>
   13848:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   1384c:	cmp	r0, #0
   13850:	bne	1388c <__assert_fail@plt+0x239c>
   13854:	mov	r1, r4
   13858:	ldr	r0, [r6]
   1385c:	bl	11388 <ply_event_loop_exit@plt>
   13860:	ldr	r2, [sp, #12]
   13864:	ldr	r3, [r5]
   13868:	cmp	r2, r3
   1386c:	bne	138c4 <__assert_fail@plt+0x23d4>
   13870:	add	sp, sp, #16
   13874:	pop	{r4, r5, r6, r7, r8, pc}
   13878:	bl	11430 <ply_logger_get_error_default@plt>
   1387c:	ldr	r1, [pc, #76]	; 138d0 <__assert_fail@plt+0x23e0>
   13880:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   13884:	mov	r4, #2
   13888:	b	13838 <__assert_fail@plt+0x2348>
   1388c:	bl	11430 <ply_logger_get_error_default@plt>
   13890:	bl	1125c <ply_logger_flush@plt>
   13894:	str	r8, [r7]
   13898:	bl	11430 <ply_logger_get_error_default@plt>
   1389c:	ldr	r2, [pc, #48]	; 138d4 <__assert_fail@plt+0x23e4>
   138a0:	ldr	r3, [pc, #48]	; 138d8 <__assert_fail@plt+0x23e8>
   138a4:	ldr	r1, [pc, #48]	; 138dc <__assert_fail@plt+0x23ec>
   138a8:	str	r2, [sp]
   138ac:	ldr	r2, [pc, #44]	; 138e0 <__assert_fail@plt+0x23f0>
   138b0:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   138b4:	bl	11430 <ply_logger_get_error_default@plt>
   138b8:	bl	1125c <ply_logger_flush@plt>
   138bc:	str	r8, [r7]
   138c0:	b	13854 <__assert_fail@plt+0x2364>
   138c4:	bl	112bc <__stack_chk_fail@plt>
   138c8:	andeq	r6, r2, r0, lsl #30
   138cc:	andeq	r5, r1, r0, lsr r7
   138d0:	andeq	r5, r1, r8, lsr r7
   138d4:	andeq	r5, r1, r8, ror #12
   138d8:	muleq	r0, sp, r1
   138dc:	andeq	r5, r1, r4, lsl #15
   138e0:	andeq	r5, r1, r4, ror r7
   138e4:	ldr	r3, [r0]
   138e8:	mov	r1, #1
   138ec:	ldr	r0, [r3]
   138f0:	b	11388 <ply_event_loop_exit@plt>
   138f4:	ldr	r3, [r0]
   138f8:	mov	r1, #1
   138fc:	ldr	r0, [r3]
   13900:	b	11388 <ply_event_loop_exit@plt>
   13904:	mov	r3, r0
   13908:	ldr	r2, [pc, #8]	; 13918 <__assert_fail@plt+0x2428>
   1390c:	ldr	r0, [r0, #4]
   13910:	ldr	r1, [pc, #4]	; 1391c <__assert_fail@plt+0x242c>
   13914:	b	135b8 <__assert_fail@plt+0x20c8>
   13918:	andeq	r3, r1, r0, ror #15
   1391c:	andeq	r3, r1, ip, ror #15
   13920:	push	{r4, r5, lr}
   13924:	sub	sp, sp, #20
   13928:	ldr	r5, [pc, #88]	; 13988 <__assert_fail@plt+0x2498>
   1392c:	mov	ip, #0
   13930:	mov	r4, r0
   13934:	ldr	r2, [r5]
   13938:	ldr	r0, [r0, #8]
   1393c:	add	r3, sp, #11
   13940:	str	ip, [sp]
   13944:	str	r2, [sp, #12]
   13948:	ldr	r2, [pc, #60]	; 1398c <__assert_fail@plt+0x249c>
   1394c:	strb	ip, [sp, #11]
   13950:	bl	113e8 <ply_command_parser_get_command_options@plt>
   13954:	str	r4, [sp]
   13958:	ldr	r3, [pc, #48]	; 13990 <__assert_fail@plt+0x24a0>
   1395c:	ldr	r2, [pc, #48]	; 13994 <__assert_fail@plt+0x24a4>
   13960:	ldr	r0, [r4, #4]
   13964:	ldrb	r1, [sp, #11]
   13968:	bl	13504 <__assert_fail@plt+0x2014>
   1396c:	ldr	r2, [sp, #12]
   13970:	ldr	r3, [r5]
   13974:	cmp	r2, r3
   13978:	bne	13984 <__assert_fail@plt+0x2494>
   1397c:	add	sp, sp, #20
   13980:	pop	{r4, r5, pc}
   13984:	bl	112bc <__stack_chk_fail@plt>
   13988:	andeq	r6, r2, r0, lsl #30
   1398c:	andeq	r5, r1, r0, lsr #15
   13990:	andeq	r3, r1, r0, ror #15
   13994:	andeq	r3, r1, ip, ror #15
   13998:	push	{r4, r5, lr}
   1399c:	sub	sp, sp, #20
   139a0:	ldr	r5, [pc, #88]	; 13a00 <__assert_fail@plt+0x2510>
   139a4:	mov	ip, #0
   139a8:	mov	r4, r0
   139ac:	ldr	r2, [r5]
   139b0:	ldr	r0, [r0, #8]
   139b4:	add	r3, sp, #8
   139b8:	str	ip, [sp]
   139bc:	str	r2, [sp, #12]
   139c0:	ldr	r2, [pc, #60]	; 13a04 <__assert_fail@plt+0x2514>
   139c4:	str	ip, [sp, #8]
   139c8:	bl	113e8 <ply_command_parser_get_command_options@plt>
   139cc:	str	r4, [sp]
   139d0:	ldr	r3, [pc, #48]	; 13a08 <__assert_fail@plt+0x2518>
   139d4:	ldr	r2, [pc, #48]	; 13a0c <__assert_fail@plt+0x251c>
   139d8:	ldr	r0, [r4, #4]
   139dc:	ldr	r1, [sp, #8]
   139e0:	bl	13360 <__assert_fail@plt+0x1e70>
   139e4:	ldr	r2, [sp, #12]
   139e8:	ldr	r3, [r5]
   139ec:	cmp	r2, r3
   139f0:	bne	139fc <__assert_fail@plt+0x250c>
   139f4:	add	sp, sp, #20
   139f8:	pop	{r4, r5, pc}
   139fc:	bl	112bc <__stack_chk_fail@plt>
   13a00:	andeq	r6, r2, r0, lsl #30
   13a04:			; <UNDEFINED> instruction: 0x000157b0
   13a08:	andeq	r3, r1, r0, ror #15
   13a0c:	andeq	r3, r1, ip, ror #15
   13a10:	push	{r4, r5, lr}
   13a14:	sub	sp, sp, #20
   13a18:	ldr	r5, [pc, #96]	; 13a80 <__assert_fail@plt+0x2590>
   13a1c:	mov	ip, #0
   13a20:	mov	r4, r0
   13a24:	ldr	r2, [r5]
   13a28:	ldr	r0, [r0, #8]
   13a2c:	str	r2, [sp, #12]
   13a30:	str	ip, [sp]
   13a34:	add	r3, sp, #8
   13a38:	ldr	r2, [pc, #68]	; 13a84 <__assert_fail@plt+0x2594>
   13a3c:	str	ip, [sp, #8]
   13a40:	bl	113e8 <ply_command_parser_get_command_options@plt>
   13a44:	ldr	r1, [sp, #8]
   13a48:	cmp	r1, #0
   13a4c:	beq	13a64 <__assert_fail@plt+0x2574>
   13a50:	str	r4, [sp]
   13a54:	ldr	r3, [pc, #44]	; 13a88 <__assert_fail@plt+0x2598>
   13a58:	ldr	r0, [r4, #4]
   13a5c:	ldr	r2, [pc, #40]	; 13a8c <__assert_fail@plt+0x259c>
   13a60:	bl	12f40 <__assert_fail@plt+0x1a50>
   13a64:	ldr	r2, [sp, #12]
   13a68:	ldr	r3, [r5]
   13a6c:	cmp	r2, r3
   13a70:	bne	13a7c <__assert_fail@plt+0x258c>
   13a74:	add	sp, sp, #20
   13a78:	pop	{r4, r5, pc}
   13a7c:	bl	112bc <__stack_chk_fail@plt>
   13a80:	andeq	r6, r2, r0, lsl #30
   13a84:			; <UNDEFINED> instruction: 0x000157b8
   13a88:	andeq	r3, r1, r0, ror #15
   13a8c:	andeq	r3, r1, ip, ror #15
   13a90:	mov	r3, r0
   13a94:	ldr	r2, [pc, #8]	; 13aa4 <__assert_fail@plt+0x25b4>
   13a98:	ldr	r0, [r0, #4]
   13a9c:	ldr	r1, [pc, #4]	; 13aa8 <__assert_fail@plt+0x25b8>
   13aa0:	b	134b0 <__assert_fail@plt+0x1fc0>
   13aa4:	andeq	r3, r1, r0, ror #15
   13aa8:	andeq	r3, r1, ip, ror #15
   13aac:	mov	r3, r0
   13ab0:	ldr	r2, [pc, #8]	; 13ac0 <__assert_fail@plt+0x25d0>
   13ab4:	ldr	r0, [r0, #4]
   13ab8:	ldr	r1, [pc, #4]	; 13ac4 <__assert_fail@plt+0x25d4>
   13abc:	b	1345c <__assert_fail@plt+0x1f6c>
   13ac0:	andeq	r3, r1, r0, ror #15
   13ac4:	andeq	r3, r1, ip, ror #15
   13ac8:	mov	r3, r0
   13acc:	ldr	r2, [pc, #8]	; 13adc <__assert_fail@plt+0x25ec>
   13ad0:	ldr	r0, [r0, #4]
   13ad4:	ldr	r1, [pc, #4]	; 13ae0 <__assert_fail@plt+0x25f0>
   13ad8:	b	13590 <__assert_fail@plt+0x20a0>
   13adc:	andeq	r3, r1, r0, ror #15
   13ae0:	andeq	r3, r1, ip, ror #15
   13ae4:	push	{r4, r5, lr}
   13ae8:	mov	r4, r0
   13aec:	ldr	r5, [pc, #136]	; 13b7c <__assert_fail@plt+0x268c>
   13af0:	sub	sp, sp, #36	; 0x24
   13af4:	ldr	r0, [pc, #132]	; 13b80 <__assert_fail@plt+0x2690>
   13af8:	mov	ip, #0
   13afc:	ldr	r2, [r5]
   13b00:	add	r3, sp, #20
   13b04:	str	r2, [sp, #28]
   13b08:	stm	sp, {r0, r3, ip}
   13b0c:	add	r3, sp, #24
   13b10:	ldr	r2, [pc, #108]	; 13b84 <__assert_fail@plt+0x2694>
   13b14:	ldr	r0, [r4, #8]
   13b18:	str	ip, [sp, #20]
   13b1c:	str	ip, [sp, #24]
   13b20:	bl	113e8 <ply_command_parser_get_command_options@plt>
   13b24:	mov	r1, #12
   13b28:	mov	r0, #1
   13b2c:	bl	111e4 <calloc@plt>
   13b30:	ldr	lr, [sp, #20]
   13b34:	ldr	r2, [sp, #24]
   13b38:	ldr	r3, [pc, #72]	; 13b88 <__assert_fail@plt+0x2698>
   13b3c:	mov	r1, lr
   13b40:	mov	ip, r0
   13b44:	str	r0, [sp]
   13b48:	str	r2, [ip, #4]
   13b4c:	ldr	r0, [r4, #4]
   13b50:	ldr	r2, [pc, #52]	; 13b8c <__assert_fail@plt+0x269c>
   13b54:	str	r4, [ip]
   13b58:	str	lr, [ip, #8]
   13b5c:	bl	13308 <__assert_fail@plt+0x1e18>
   13b60:	ldr	r2, [sp, #28]
   13b64:	ldr	r3, [r5]
   13b68:	cmp	r2, r3
   13b6c:	bne	13b78 <__assert_fail@plt+0x2688>
   13b70:	add	sp, sp, #36	; 0x24
   13b74:	pop	{r4, r5, pc}
   13b78:	bl	112bc <__stack_chk_fail@plt>
   13b7c:	andeq	r6, r2, r0, lsl #30
   13b80:			; <UNDEFINED> instruction: 0x000157b0
   13b84:	andeq	r5, r1, r0, asr #15
   13b88:	andeq	r3, r1, r4, ror #17
   13b8c:	andeq	r4, r1, r4, asr #16
   13b90:	push	{r4, r5, lr}
   13b94:	sub	sp, sp, #20
   13b98:	ldr	r5, [pc, #104]	; 13c08 <__assert_fail@plt+0x2718>
   13b9c:	mov	ip, #0
   13ba0:	mov	r4, r0
   13ba4:	ldr	r2, [r5]
   13ba8:	ldr	r0, [r0, #8]
   13bac:	str	r2, [sp, #12]
   13bb0:	str	ip, [sp]
   13bb4:	add	r3, sp, #8
   13bb8:	ldr	r2, [pc, #76]	; 13c0c <__assert_fail@plt+0x271c>
   13bbc:	str	ip, [sp, #8]
   13bc0:	bl	113e8 <ply_command_parser_get_command_options@plt>
   13bc4:	ldr	r1, [sp, #8]
   13bc8:	cmp	r1, #0
   13bcc:	beq	13bec <__assert_fail@plt+0x26fc>
   13bd0:	str	r4, [sp]
   13bd4:	ldr	r3, [pc, #52]	; 13c10 <__assert_fail@plt+0x2720>
   13bd8:	ldr	r0, [r4, #4]
   13bdc:	ldr	r2, [pc, #48]	; 13c14 <__assert_fail@plt+0x2724>
   13be0:	bl	13138 <__assert_fail@plt+0x1c48>
   13be4:	ldr	r0, [sp, #8]
   13be8:	bl	1122c <free@plt>
   13bec:	ldr	r2, [sp, #12]
   13bf0:	ldr	r3, [r5]
   13bf4:	cmp	r2, r3
   13bf8:	bne	13c04 <__assert_fail@plt+0x2714>
   13bfc:	add	sp, sp, #20
   13c00:	pop	{r4, r5, pc}
   13c04:	bl	112bc <__stack_chk_fail@plt>
   13c08:	andeq	r6, r2, r0, lsl #30
   13c0c:	andeq	r6, r1, r8, lsr r1
   13c10:	andeq	r3, r1, r0, ror #15
   13c14:	andeq	r3, r1, ip, ror #15
   13c18:	push	{r4, r5, lr}
   13c1c:	sub	sp, sp, #20
   13c20:	ldr	r5, [pc, #104]	; 13c90 <__assert_fail@plt+0x27a0>
   13c24:	mov	ip, #0
   13c28:	mov	r4, r0
   13c2c:	ldr	r2, [r5]
   13c30:	ldr	r0, [r0, #8]
   13c34:	str	r2, [sp, #12]
   13c38:	str	ip, [sp]
   13c3c:	add	r3, sp, #8
   13c40:	ldr	r2, [pc, #76]	; 13c94 <__assert_fail@plt+0x27a4>
   13c44:	str	ip, [sp, #8]
   13c48:	bl	113e8 <ply_command_parser_get_command_options@plt>
   13c4c:	ldr	r1, [sp, #8]
   13c50:	cmp	r1, #0
   13c54:	beq	13c74 <__assert_fail@plt+0x2784>
   13c58:	str	r4, [sp]
   13c5c:	ldr	r3, [pc, #52]	; 13c98 <__assert_fail@plt+0x27a8>
   13c60:	ldr	r0, [r4, #4]
   13c64:	ldr	r2, [pc, #48]	; 13c9c <__assert_fail@plt+0x27ac>
   13c68:	bl	130c0 <__assert_fail@plt+0x1bd0>
   13c6c:	ldr	r0, [sp, #8]
   13c70:	bl	1122c <free@plt>
   13c74:	ldr	r2, [sp, #12]
   13c78:	ldr	r3, [r5]
   13c7c:	cmp	r2, r3
   13c80:	bne	13c8c <__assert_fail@plt+0x279c>
   13c84:	add	sp, sp, #20
   13c88:	pop	{r4, r5, pc}
   13c8c:	bl	112bc <__stack_chk_fail@plt>
   13c90:	andeq	r6, r2, r0, lsl #30
   13c94:	andeq	r6, r1, r8, lsr r1
   13c98:	andeq	r3, r1, r0, ror #15
   13c9c:	andeq	r3, r1, ip, ror #15
   13ca0:	push	{lr}		; (str lr, [sp, #-4]!)
   13ca4:	mov	r3, r0
   13ca8:	sub	sp, sp, #12
   13cac:	mov	r0, r1
   13cb0:	str	r3, [sp]
   13cb4:	ldr	r2, [pc, #16]	; 13ccc <__assert_fail@plt+0x27dc>
   13cb8:	ldr	r1, [r3, #8]
   13cbc:	ldr	r3, [pc, #12]	; 13cd0 <__assert_fail@plt+0x27e0>
   13cc0:	bl	132b4 <__assert_fail@plt+0x1dc4>
   13cc4:	add	sp, sp, #12
   13cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ccc:	andeq	r4, r1, r4, lsl ip
   13cd0:	strdeq	r3, [r1], -r4
   13cd4:	push	{r4, r5, lr}
   13cd8:	mov	r4, r0
   13cdc:	ldr	r5, [pc, #212]	; 13db8 <__assert_fail@plt+0x28c8>
   13ce0:	sub	sp, sp, #44	; 0x2c
   13ce4:	ldr	r0, [pc, #208]	; 13dbc <__assert_fail@plt+0x28cc>
   13ce8:	ldr	r3, [pc, #208]	; 13dc0 <__assert_fail@plt+0x28d0>
   13cec:	ldr	r2, [r5]
   13cf0:	mov	ip, #0
   13cf4:	str	r0, [sp, #8]
   13cf8:	str	r3, [sp]
   13cfc:	add	r0, sp, #27
   13d00:	add	r3, sp, #28
   13d04:	str	ip, [sp, #16]
   13d08:	str	r3, [sp, #4]
   13d0c:	str	r0, [sp, #12]
   13d10:	add	r3, sp, #32
   13d14:	ldr	r0, [r4, #8]
   13d18:	str	r2, [sp, #36]	; 0x24
   13d1c:	ldr	r2, [pc, #160]	; 13dc4 <__assert_fail@plt+0x28d4>
   13d20:	str	ip, [sp, #28]
   13d24:	str	ip, [sp, #32]
   13d28:	strb	ip, [sp, #27]
   13d2c:	bl	113e8 <ply_command_parser_get_command_options@plt>
   13d30:	mov	r1, #16
   13d34:	mov	r0, #1
   13d38:	bl	111e4 <calloc@plt>
   13d3c:	ldrb	r2, [sp, #27]
   13d40:	ldr	ip, [sp, #32]
   13d44:	ldr	r1, [sp, #28]
   13d48:	eor	r2, r2, #1
   13d4c:	and	r2, r2, #1
   13d50:	ldrb	r3, [r0, #12]
   13d54:	stm	r0, {r4, ip}
   13d58:	str	r1, [r0, #8]
   13d5c:	bic	r3, r3, #1
   13d60:	orr	r2, r2, r3
   13d64:	tst	r2, #1
   13d68:	strb	r2, [r0, #12]
   13d6c:	beq	13d9c <__assert_fail@plt+0x28ac>
   13d70:	mov	r3, r0
   13d74:	ldr	r2, [pc, #76]	; 13dc8 <__assert_fail@plt+0x28d8>
   13d78:	ldr	r0, [r4, #4]
   13d7c:	ldr	r1, [pc, #72]	; 13dcc <__assert_fail@plt+0x28dc>
   13d80:	bl	13590 <__assert_fail@plt+0x20a0>
   13d84:	ldr	r2, [sp, #36]	; 0x24
   13d88:	ldr	r3, [r5]
   13d8c:	cmp	r2, r3
   13d90:	bne	13db4 <__assert_fail@plt+0x28c4>
   13d94:	add	sp, sp, #44	; 0x2c
   13d98:	pop	{r4, r5, pc}
   13d9c:	str	r0, [sp]
   13da0:	ldr	r3, [pc, #32]	; 13dc8 <__assert_fail@plt+0x28d8>
   13da4:	ldr	r0, [r4, #4]
   13da8:	ldr	r2, [pc, #32]	; 13dd0 <__assert_fail@plt+0x28e0>
   13dac:	bl	132b4 <__assert_fail@plt+0x1dc4>
   13db0:	b	13d84 <__assert_fail@plt+0x2894>
   13db4:	bl	112bc <__stack_chk_fail@plt>
   13db8:	andeq	r6, r2, r0, lsl #30
   13dbc:	andeq	r5, r1, r8, asr #15
   13dc0:	ldrdeq	r5, [r1], -ip
   13dc4:	andeq	r5, r1, r0, asr #15
   13dc8:	strdeq	r3, [r1], -r4
   13dcc:	andeq	r3, r1, r0, lsr #25
   13dd0:	andeq	r4, r1, r4, lsl ip
   13dd4:	push	{r4, r5, r6, r7, lr}
   13dd8:	sub	sp, sp, #12
   13ddc:	mov	r6, r1
   13de0:	mov	r4, r0
   13de4:	bl	113a0 <__errno_location@plt>
   13de8:	mov	r5, r0
   13dec:	ldr	r7, [r0]
   13df0:	bl	11430 <ply_logger_get_error_default@plt>
   13df4:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   13df8:	cmp	r0, #0
   13dfc:	bne	13e28 <__assert_fail@plt+0x2938>
   13e00:	ldr	r3, [r4, #4]
   13e04:	cmp	r3, #0
   13e08:	beq	13e70 <__assert_fail@plt+0x2980>
   13e0c:	mov	r3, r4
   13e10:	mov	r0, r6
   13e14:	ldr	r2, [pc, #116]	; 13e90 <__assert_fail@plt+0x29a0>
   13e18:	ldr	r1, [pc, #116]	; 13e94 <__assert_fail@plt+0x29a4>
   13e1c:	add	sp, sp, #12
   13e20:	pop	{r4, r5, r6, r7, lr}
   13e24:	b	13260 <__assert_fail@plt+0x1d70>
   13e28:	bl	11430 <ply_logger_get_error_default@plt>
   13e2c:	bl	1125c <ply_logger_flush@plt>
   13e30:	str	r7, [r5]
   13e34:	bl	11430 <ply_logger_get_error_default@plt>
   13e38:	ldr	r2, [r4, #4]
   13e3c:	ldr	r3, [pc, #84]	; 13e98 <__assert_fail@plt+0x29a8>
   13e40:	ldr	r1, [pc, #84]	; 13e9c <__assert_fail@plt+0x29ac>
   13e44:	str	r2, [sp, #4]
   13e48:	str	r3, [sp]
   13e4c:	ldr	r2, [pc, #76]	; 13ea0 <__assert_fail@plt+0x29b0>
   13e50:	ldr	r3, [pc, #76]	; 13ea4 <__assert_fail@plt+0x29b4>
   13e54:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   13e58:	bl	11430 <ply_logger_get_error_default@plt>
   13e5c:	bl	1125c <ply_logger_flush@plt>
   13e60:	ldr	r3, [r4, #4]
   13e64:	str	r7, [r5]
   13e68:	cmp	r3, #0
   13e6c:	bne	13e0c <__assert_fail@plt+0x291c>
   13e70:	str	r4, [sp]
   13e74:	mov	r0, r6
   13e78:	ldr	r1, [r4, #8]
   13e7c:	ldr	r3, [pc, #12]	; 13e90 <__assert_fail@plt+0x29a0>
   13e80:	ldr	r2, [pc, #32]	; 13ea8 <__assert_fail@plt+0x29b8>
   13e84:	bl	13208 <__assert_fail@plt+0x1d18>
   13e88:	add	sp, sp, #12
   13e8c:	pop	{r4, r5, r6, r7, pc}
   13e90:	andeq	r4, r1, r8, ror r5
   13e94:	andeq	r4, r1, ip, lsr #17
   13e98:	andeq	r5, r1, r8, ror r6
   13e9c:	andeq	r5, r1, r4, ror #15
   13ea0:	andeq	r5, r1, r4, ror r7
   13ea4:	andeq	r0, r0, r6, lsr #3
   13ea8:	muleq	r1, ip, sl
   13eac:	push	{r4, r5, r6, r7, r8, lr}
   13eb0:	sub	sp, sp, #56	; 0x38
   13eb4:	ldr	r5, [pc, #344]	; 14014 <__assert_fail@plt+0x2b24>
   13eb8:	mov	r3, #0
   13ebc:	mov	r7, r1
   13ec0:	ldr	r2, [r5]
   13ec4:	str	r3, [sp, #40]	; 0x28
   13ec8:	str	r2, [sp, #52]	; 0x34
   13ecc:	str	r3, [sp, #44]	; 0x2c
   13ed0:	str	r3, [sp, #48]	; 0x30
   13ed4:	strb	r3, [sp, #39]	; 0x27
   13ed8:	mov	r4, r0
   13edc:	bl	113a0 <__errno_location@plt>
   13ee0:	mov	r6, r0
   13ee4:	ldr	r8, [r0]
   13ee8:	bl	11430 <ply_logger_get_error_default@plt>
   13eec:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   13ef0:	cmp	r0, #0
   13ef4:	bne	13fd8 <__assert_fail@plt+0x2ae8>
   13ef8:	ldr	r0, [pc, #280]	; 14018 <__assert_fail@plt+0x2b28>
   13efc:	ldr	r2, [pc, #280]	; 1401c <__assert_fail@plt+0x2b2c>
   13f00:	ldr	r3, [pc, #280]	; 14020 <__assert_fail@plt+0x2b30>
   13f04:	mov	ip, #0
   13f08:	str	r0, [sp, #16]
   13f0c:	str	r2, [sp, #8]
   13f10:	str	r3, [sp]
   13f14:	add	r0, sp, #39	; 0x27
   13f18:	add	r2, sp, #48	; 0x30
   13f1c:	add	r3, sp, #40	; 0x28
   13f20:	str	ip, [sp, #24]
   13f24:	str	r2, [sp, #12]
   13f28:	str	r3, [sp, #4]
   13f2c:	ldr	r2, [pc, #240]	; 14024 <__assert_fail@plt+0x2b34>
   13f30:	mov	r1, r7
   13f34:	str	r0, [sp, #20]
   13f38:	add	r3, sp, #44	; 0x2c
   13f3c:	ldr	r0, [r4, #8]
   13f40:	bl	113e8 <ply_command_parser_get_command_options@plt>
   13f44:	ldr	r3, [sp, #48]	; 0x30
   13f48:	mov	r1, #20
   13f4c:	cmp	r3, #0
   13f50:	mvnle	r3, #-2147483648	; 0x80000000
   13f54:	mov	r0, #1
   13f58:	strle	r3, [sp, #48]	; 0x30
   13f5c:	bl	111e4 <calloc@plt>
   13f60:	ldrb	r2, [sp, #39]	; 0x27
   13f64:	ldr	ip, [sp, #44]	; 0x2c
   13f68:	ldr	lr, [sp, #40]	; 0x28
   13f6c:	eor	r2, r2, #1
   13f70:	and	r2, r2, #1
   13f74:	ldrb	r1, [r0, #16]
   13f78:	str	ip, [r0, #4]
   13f7c:	ldr	ip, [sp, #48]	; 0x30
   13f80:	bic	r1, r1, #1
   13f84:	orr	r2, r2, r1
   13f88:	tst	r2, #1
   13f8c:	mov	r3, r0
   13f90:	str	r4, [r0]
   13f94:	ldr	r1, [r4, #4]
   13f98:	str	lr, [r0, #8]
   13f9c:	str	ip, [r0, #12]
   13fa0:	strb	r2, [r0, #16]
   13fa4:	beq	13fd0 <__assert_fail@plt+0x2ae0>
   13fa8:	mov	r0, r1
   13fac:	ldr	r2, [pc, #116]	; 14028 <__assert_fail@plt+0x2b38>
   13fb0:	ldr	r1, [pc, #116]	; 1402c <__assert_fail@plt+0x2b3c>
   13fb4:	bl	13590 <__assert_fail@plt+0x20a0>
   13fb8:	ldr	r2, [sp, #52]	; 0x34
   13fbc:	ldr	r3, [r5]
   13fc0:	cmp	r2, r3
   13fc4:	bne	14010 <__assert_fail@plt+0x2b20>
   13fc8:	add	sp, sp, #56	; 0x38
   13fcc:	pop	{r4, r5, r6, r7, r8, pc}
   13fd0:	bl	13dd4 <__assert_fail@plt+0x28e4>
   13fd4:	b	13fb8 <__assert_fail@plt+0x2ac8>
   13fd8:	bl	11430 <ply_logger_get_error_default@plt>
   13fdc:	bl	1125c <ply_logger_flush@plt>
   13fe0:	str	r8, [r6]
   13fe4:	bl	11430 <ply_logger_get_error_default@plt>
   13fe8:	ldr	r2, [pc, #64]	; 14030 <__assert_fail@plt+0x2b40>
   13fec:	ldr	r3, [pc, #64]	; 14034 <__assert_fail@plt+0x2b44>
   13ff0:	ldr	r1, [pc, #64]	; 14038 <__assert_fail@plt+0x2b48>
   13ff4:	str	r2, [sp]
   13ff8:	ldr	r2, [pc, #60]	; 1403c <__assert_fail@plt+0x2b4c>
   13ffc:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   14000:	bl	11430 <ply_logger_get_error_default@plt>
   14004:	bl	1125c <ply_logger_flush@plt>
   14008:	str	r8, [r6]
   1400c:	b	13ef8 <__assert_fail@plt+0x2a08>
   14010:	bl	112bc <__stack_chk_fail@plt>
   14014:	andeq	r6, r2, r0, lsl #30
   14018:	andeq	r5, r1, r8, asr #15
   1401c:	andeq	r5, r1, r4, asr #16
   14020:	ldrdeq	r5, [r1], -ip
   14024:	andeq	r5, r1, r0, asr #15
   14028:	andeq	r4, r1, r8, ror r5
   1402c:	ldrdeq	r3, [r1], -r4
   14030:	muleq	r1, r4, r6
   14034:	andeq	r0, r0, r7, asr #3
   14038:	andeq	r5, r1, r0, lsr #16
   1403c:	andeq	r5, r1, r4, ror r7
   14040:	push	{r4, r5, r6, lr}
   14044:	sub	sp, sp, #24
   14048:	ldr	r6, [pc, #160]	; 140f0 <__assert_fail@plt+0x2c00>
   1404c:	mov	r5, #0
   14050:	add	r3, sp, #12
   14054:	ldr	ip, [r6]
   14058:	mov	r4, r0
   1405c:	ldr	r2, [pc, #144]	; 140f4 <__assert_fail@plt+0x2c04>
   14060:	ldr	r0, [r0, #8]
   14064:	str	r5, [sp]
   14068:	str	ip, [sp, #20]
   1406c:	str	r5, [sp, #12]
   14070:	bl	113e8 <ply_command_parser_get_command_options@plt>
   14074:	ldr	r3, [sp, #12]
   14078:	cmp	r3, #100	; 0x64
   1407c:	bhi	140cc <__assert_fail@plt+0x2bdc>
   14080:	ldr	r2, [pc, #112]	; 140f8 <__assert_fail@plt+0x2c08>
   14084:	mov	r1, #1
   14088:	add	r0, sp, #16
   1408c:	str	r5, [sp, #16]
   14090:	bl	11334 <__asprintf_chk@plt>
   14094:	str	r4, [sp]
   14098:	ldr	r3, [pc, #92]	; 140fc <__assert_fail@plt+0x2c0c>
   1409c:	ldr	r0, [r4, #4]
   140a0:	ldr	r2, [pc, #88]	; 14100 <__assert_fail@plt+0x2c10>
   140a4:	ldr	r1, [sp, #16]
   140a8:	bl	12ff0 <__assert_fail@plt+0x1b00>
   140ac:	ldr	r0, [sp, #16]
   140b0:	bl	1122c <free@plt>
   140b4:	ldr	r2, [sp, #20]
   140b8:	ldr	r3, [r6]
   140bc:	cmp	r2, r3
   140c0:	bne	140ec <__assert_fail@plt+0x2bfc>
   140c4:	add	sp, sp, #24
   140c8:	pop	{r4, r5, r6, pc}
   140cc:	bl	11430 <ply_logger_get_error_default@plt>
   140d0:	ldr	r2, [sp, #12]
   140d4:	ldr	r1, [pc, #40]	; 14104 <__assert_fail@plt+0x2c14>
   140d8:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   140dc:	ldr	r0, [r4]
   140e0:	mov	r1, #1
   140e4:	bl	11388 <ply_event_loop_exit@plt>
   140e8:	b	140b4 <__assert_fail@plt+0x2bc4>
   140ec:	bl	112bc <__stack_chk_fail@plt>
   140f0:	andeq	r6, r2, r0, lsl #30
   140f4:	andeq	r6, r1, r8, asr #4
   140f8:	andeq	r5, r1, r4, asr r8
   140fc:	andeq	r3, r1, r0, ror #15
   14100:	andeq	r3, r1, ip, ror #15
   14104:	andeq	r5, r1, r8, asr r8
   14108:	push	{r4, r5, r6, r7, lr}
   1410c:	mov	r4, r0
   14110:	ldr	r5, [pc, #224]	; 141f8 <__assert_fail@plt+0x2d08>
   14114:	sub	sp, sp, #36	; 0x24
   14118:	ldr	r7, [pc, #220]	; 141fc <__assert_fail@plt+0x2d0c>
   1411c:	ldr	r2, [r5]
   14120:	ldr	r6, [pc, #216]	; 14200 <__assert_fail@plt+0x2d10>
   14124:	mov	ip, #0
   14128:	add	r0, sp, #27
   1412c:	add	r3, sp, #26
   14130:	str	r3, [sp, #4]
   14134:	str	r7, [sp, #8]
   14138:	str	r6, [sp]
   1413c:	str	ip, [sp, #16]
   14140:	str	r0, [sp, #12]
   14144:	add	r3, sp, #25
   14148:	str	r2, [sp, #28]
   1414c:	ldr	r0, [r4, #8]
   14150:	ldr	r2, [pc, #172]	; 14204 <__assert_fail@plt+0x2d14>
   14154:	strb	ip, [sp, #25]
   14158:	strb	ip, [sp, #26]
   1415c:	strb	ip, [sp, #27]
   14160:	bl	113e8 <ply_command_parser_get_command_options@plt>
   14164:	ldrb	r3, [sp, #25]
   14168:	cmp	r3, #0
   1416c:	bne	141bc <__assert_fail@plt+0x2ccc>
   14170:	ldrb	r3, [sp, #26]
   14174:	cmp	r3, #0
   14178:	bne	141a0 <__assert_fail@plt+0x2cb0>
   1417c:	ldrb	r3, [sp, #27]
   14180:	cmp	r3, #0
   14184:	bne	141d8 <__assert_fail@plt+0x2ce8>
   14188:	ldr	r2, [sp, #28]
   1418c:	ldr	r3, [r5]
   14190:	cmp	r2, r3
   14194:	bne	141f4 <__assert_fail@plt+0x2d04>
   14198:	add	sp, sp, #36	; 0x24
   1419c:	pop	{r4, r5, r6, r7, pc}
   141a0:	str	r4, [sp]
   141a4:	mov	r1, r6
   141a8:	ldr	r0, [r4, #4]
   141ac:	ldr	r3, [pc, #84]	; 14208 <__assert_fail@plt+0x2d18>
   141b0:	ldr	r2, [pc, #84]	; 1420c <__assert_fail@plt+0x2d1c>
   141b4:	bl	12f98 <__assert_fail@plt+0x1aa8>
   141b8:	b	14188 <__assert_fail@plt+0x2c98>
   141bc:	str	r4, [sp]
   141c0:	ldr	r3, [pc, #64]	; 14208 <__assert_fail@plt+0x2d18>
   141c4:	ldr	r0, [r4, #4]
   141c8:	ldr	r2, [pc, #60]	; 1420c <__assert_fail@plt+0x2d1c>
   141cc:	ldr	r1, [pc, #48]	; 14204 <__assert_fail@plt+0x2d14>
   141d0:	bl	12f98 <__assert_fail@plt+0x1aa8>
   141d4:	b	14188 <__assert_fail@plt+0x2c98>
   141d8:	str	r4, [sp]
   141dc:	mov	r1, r7
   141e0:	ldr	r0, [r4, #4]
   141e4:	ldr	r3, [pc, #28]	; 14208 <__assert_fail@plt+0x2d18>
   141e8:	ldr	r2, [pc, #28]	; 1420c <__assert_fail@plt+0x2d1c>
   141ec:	bl	12f98 <__assert_fail@plt+0x1aa8>
   141f0:	b	14188 <__assert_fail@plt+0x2c98>
   141f4:	bl	112bc <__stack_chk_fail@plt>
   141f8:	andeq	r6, r2, r0, lsl #30
   141fc:	andeq	r5, r1, r8, lsl #17
   14200:	muleq	r1, r0, r8
   14204:	andeq	r5, r1, r0, lsl #17
   14208:	andeq	r3, r1, r0, ror #15
   1420c:	andeq	r3, r1, ip, ror #15
   14210:	push	{r4, r5, lr}
   14214:	mov	r4, r0
   14218:	ldr	r5, [pc, #144]	; 142b0 <__assert_fail@plt+0x2dc0>
   1421c:	sub	sp, sp, #36	; 0x24
   14220:	ldr	r0, [pc, #140]	; 142b4 <__assert_fail@plt+0x2dc4>
   14224:	mov	ip, #0
   14228:	ldr	r2, [r5]
   1422c:	add	r3, sp, #23
   14230:	str	r2, [sp, #28]
   14234:	stm	sp, {r0, r3, ip}
   14238:	add	r3, sp, #24
   1423c:	ldr	r0, [r4, #8]
   14240:	ldr	r2, [pc, #112]	; 142b8 <__assert_fail@plt+0x2dc8>
   14244:	str	ip, [sp, #24]
   14248:	strb	ip, [sp, #23]
   1424c:	bl	113e8 <ply_command_parser_get_command_options@plt>
   14250:	ldr	r1, [sp, #24]
   14254:	cmp	r1, #0
   14258:	beq	14270 <__assert_fail@plt+0x2d80>
   1425c:	str	r4, [sp]
   14260:	ldr	r3, [pc, #84]	; 142bc <__assert_fail@plt+0x2dcc>
   14264:	ldr	r2, [pc, #84]	; 142c0 <__assert_fail@plt+0x2dd0>
   14268:	ldr	r0, [r4, #4]
   1426c:	bl	13044 <__assert_fail@plt+0x1b54>
   14270:	ldrb	r3, [sp, #23]
   14274:	cmp	r3, #0
   14278:	bne	14294 <__assert_fail@plt+0x2da4>
   1427c:	ldr	r2, [sp, #28]
   14280:	ldr	r3, [r5]
   14284:	cmp	r2, r3
   14288:	bne	142ac <__assert_fail@plt+0x2dbc>
   1428c:	add	sp, sp, #36	; 0x24
   14290:	pop	{r4, r5, pc}
   14294:	mov	r3, r4
   14298:	ldr	r0, [r4, #4]
   1429c:	ldr	r2, [pc, #24]	; 142bc <__assert_fail@plt+0x2dcc>
   142a0:	ldr	r1, [pc, #24]	; 142c0 <__assert_fail@plt+0x2dd0>
   142a4:	bl	131b4 <__assert_fail@plt+0x1cc4>
   142a8:	b	1427c <__assert_fail@plt+0x2d8c>
   142ac:	bl	112bc <__stack_chk_fail@plt>
   142b0:	andeq	r6, r2, r0, lsl #30
   142b4:	andeq	r5, r1, ip, lsl #25
   142b8:	muleq	r1, ip, r8
   142bc:	andeq	r3, r1, r0, ror #15
   142c0:	andeq	r3, r1, ip, ror #15
   142c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   142c8:	sub	sp, sp, #24
   142cc:	ldr	r5, [pc, #644]	; 14558 <__assert_fail@plt+0x3068>
   142d0:	mov	r4, r1
   142d4:	mov	r8, r2
   142d8:	ldr	r3, [r5]
   142dc:	mov	r9, r0
   142e0:	str	r3, [sp, #20]
   142e4:	bl	113a0 <__errno_location@plt>
   142e8:	mov	r6, r0
   142ec:	ldr	r7, [r0]
   142f0:	bl	11430 <ply_logger_get_error_default@plt>
   142f4:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   142f8:	cmp	r0, #0
   142fc:	bne	1439c <__assert_fail@plt+0x2eac>
   14300:	cmp	r4, #0
   14304:	beq	1431c <__assert_fail@plt+0x2e2c>
   14308:	add	r1, sp, #16
   1430c:	add	r0, sp, #12
   14310:	bl	11484 <ply_open_unidirectional_pipe@plt>
   14314:	cmp	r0, #0
   14318:	beq	14394 <__assert_fail@plt+0x2ea4>
   1431c:	bl	11448 <fork@plt>
   14320:	subs	r7, r0, #0
   14324:	blt	14394 <__assert_fail@plt+0x2ea4>
   14328:	beq	143d8 <__assert_fail@plt+0x2ee8>
   1432c:	cmp	r4, #0
   14330:	moveq	r4, #1
   14334:	beq	14368 <__assert_fail@plt+0x2e78>
   14338:	ldr	r0, [sp, #16]
   1433c:	bl	114cc <close@plt>
   14340:	mov	r0, r4
   14344:	bl	1137c <strlen@plt>
   14348:	mov	r1, r4
   1434c:	mov	r2, r0
   14350:	ldr	r0, [sp, #12]
   14354:	bl	11400 <write@plt>
   14358:	mvn	r4, r0
   1435c:	ldr	r0, [sp, #12]
   14360:	lsr	r4, r4, #31
   14364:	bl	114cc <close@plt>
   14368:	mov	r1, r8
   1436c:	mov	r0, r7
   14370:	mov	r2, #0
   14374:	bl	11310 <waitpid@plt>
   14378:	ldr	r2, [sp, #20]
   1437c:	ldr	r3, [r5]
   14380:	mov	r0, r4
   14384:	cmp	r2, r3
   14388:	bne	143d4 <__assert_fail@plt+0x2ee4>
   1438c:	add	sp, sp, #24
   14390:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14394:	mov	r4, #0
   14398:	b	14378 <__assert_fail@plt+0x2e88>
   1439c:	bl	11430 <ply_logger_get_error_default@plt>
   143a0:	bl	1125c <ply_logger_flush@plt>
   143a4:	str	r7, [r6]
   143a8:	bl	11430 <ply_logger_get_error_default@plt>
   143ac:	ldr	r3, [pc, #424]	; 1455c <__assert_fail@plt+0x306c>
   143b0:	ldr	r2, [pc, #424]	; 14560 <__assert_fail@plt+0x3070>
   143b4:	ldr	r1, [pc, #424]	; 14564 <__assert_fail@plt+0x3074>
   143b8:	stm	sp, {r3, r9}
   143bc:	mov	r3, #129	; 0x81
   143c0:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   143c4:	bl	11430 <ply_logger_get_error_default@plt>
   143c8:	bl	1125c <ply_logger_flush@plt>
   143cc:	str	r7, [r6]
   143d0:	b	14300 <__assert_fail@plt+0x2e10>
   143d4:	bl	112bc <__stack_chk_fail@plt>
   143d8:	ldrb	r5, [r9]
   143dc:	cmp	r5, #0
   143e0:	beq	14494 <__assert_fail@plt+0x2fa4>
   143e4:	mov	r2, r9
   143e8:	mov	sl, r7
   143ec:	mov	r3, r5
   143f0:	cmp	r3, #32
   143f4:	ldrb	r3, [r2, #1]!
   143f8:	beq	14484 <__assert_fail@plt+0x2f94>
   143fc:	cmp	r3, #0
   14400:	bne	143f0 <__assert_fail@plt+0x2f00>
   14404:	mov	r1, #4
   14408:	add	r0, sl, #2
   1440c:	bl	111e4 <calloc@plt>
   14410:	mov	r8, r0
   14414:	mov	r0, r9
   14418:	b	14444 <__assert_fail@plt+0x2f54>
   1441c:	ldrb	r3, [r0]
   14420:	cmp	r3, #32
   14424:	beq	14544 <__assert_fail@plt+0x3054>
   14428:	mov	r3, r9
   1442c:	cmp	sl, r7
   14430:	blt	14530 <__assert_fail@plt+0x3040>
   14434:	ldrb	r5, [r3, #1]
   14438:	add	r9, r9, #1
   1443c:	cmp	r5, #0
   14440:	beq	144a8 <__assert_fail@plt+0x2fb8>
   14444:	cmp	r5, #32
   14448:	bne	1441c <__assert_fail@plt+0x2f2c>
   1444c:	sub	r1, r9, r0
   14450:	bl	11238 <strndup@plt>
   14454:	ldrb	r3, [r9]
   14458:	add	r2, r7, #1
   1445c:	cmp	r3, #32
   14460:	str	r0, [r8, r7, lsl #2]
   14464:	bne	14474 <__assert_fail@plt+0x2f84>
   14468:	ldrb	r3, [r9, #1]!
   1446c:	cmp	r3, #32
   14470:	beq	14468 <__assert_fail@plt+0x2f78>
   14474:	mov	r7, r2
   14478:	mov	r3, r9
   1447c:	mov	r0, r9
   14480:	b	1442c <__assert_fail@plt+0x2f3c>
   14484:	cmp	r3, #32
   14488:	beq	143f0 <__assert_fail@plt+0x2f00>
   1448c:	add	sl, sl, #1
   14490:	b	143fc <__assert_fail@plt+0x2f0c>
   14494:	mov	r1, #4
   14498:	mov	r0, #2
   1449c:	bl	111e4 <calloc@plt>
   144a0:	mov	r8, r0
   144a4:	mov	r0, r9
   144a8:	sub	r1, r9, r0
   144ac:	bl	11238 <strndup@plt>
   144b0:	cmp	r4, #0
   144b4:	str	r0, [r8, r7, lsl #2]
   144b8:	beq	144d0 <__assert_fail@plt+0x2fe0>
   144bc:	ldr	r0, [sp, #12]
   144c0:	bl	114cc <close@plt>
   144c4:	mov	r1, #0
   144c8:	ldr	r0, [sp, #16]
   144cc:	bl	112c8 <dup2@plt>
   144d0:	mov	r1, r8
   144d4:	ldr	r0, [r8]
   144d8:	bl	11250 <execvp@plt>
   144dc:	ldr	r4, [r6]
   144e0:	bl	11430 <ply_logger_get_error_default@plt>
   144e4:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   144e8:	cmp	r0, #0
   144ec:	bne	144f8 <__assert_fail@plt+0x3008>
   144f0:	mov	r0, #127	; 0x7f
   144f4:	bl	11244 <_exit@plt>
   144f8:	bl	11430 <ply_logger_get_error_default@plt>
   144fc:	bl	1125c <ply_logger_flush@plt>
   14500:	str	r4, [r6]
   14504:	bl	11430 <ply_logger_get_error_default@plt>
   14508:	ldr	r2, [pc, #76]	; 1455c <__assert_fail@plt+0x306c>
   1450c:	mov	r3, #156	; 0x9c
   14510:	ldr	r1, [pc, #80]	; 14568 <__assert_fail@plt+0x3078>
   14514:	str	r2, [sp]
   14518:	ldr	r2, [pc, #64]	; 14560 <__assert_fail@plt+0x3070>
   1451c:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   14520:	bl	11430 <ply_logger_get_error_default@plt>
   14524:	bl	1125c <ply_logger_flush@plt>
   14528:	str	r4, [r6]
   1452c:	b	144f0 <__assert_fail@plt+0x3000>
   14530:	ldr	r3, [pc, #52]	; 1456c <__assert_fail@plt+0x307c>
   14534:	mov	r2, #111	; 0x6f
   14538:	ldr	r1, [pc, #32]	; 14560 <__assert_fail@plt+0x3070>
   1453c:	ldr	r0, [pc, #44]	; 14570 <__assert_fail@plt+0x3080>
   14540:	bl	114f0 <__assert_fail@plt>
   14544:	ldr	r3, [pc, #32]	; 1456c <__assert_fail@plt+0x307c>
   14548:	mov	r2, #110	; 0x6e
   1454c:	ldr	r1, [pc, #12]	; 14560 <__assert_fail@plt+0x3070>
   14550:	ldr	r0, [pc, #28]	; 14574 <__assert_fail@plt+0x3084>
   14554:	bl	114f0 <__assert_fail@plt>
   14558:	andeq	r6, r2, r0, lsl #30
   1455c:	andeq	r5, r1, r8, lsr #13
   14560:	andeq	r5, r1, r4, ror r7
   14564:	andeq	r5, r1, ip, lsr #17
   14568:	andeq	r5, r1, r0, lsl #18
   1456c:			; <UNDEFINED> instruction: 0x000156bc
   14570:	andeq	r5, r1, r4, ror #17
   14574:	ldrdeq	r5, [r1], -r4
   14578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1457c:	sub	sp, sp, #20
   14580:	ldr	sl, [pc, #668]	; 14824 <__assert_fail@plt+0x3334>
   14584:	mov	r4, r0
   14588:	ldr	r3, [sl]
   1458c:	str	r3, [sp, #12]
   14590:	bl	113a0 <__errno_location@plt>
   14594:	mov	r5, r0
   14598:	ldr	r6, [r0]
   1459c:	bl	11430 <ply_logger_get_error_default@plt>
   145a0:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   145a4:	cmp	r0, #0
   145a8:	bne	146fc <__assert_fail@plt+0x320c>
   145ac:	ldr	r3, [r4, #4]
   145b0:	cmp	r3, #0
   145b4:	beq	1473c <__assert_fail@plt+0x324c>
   145b8:	ldr	r6, [r5]
   145bc:	bl	11430 <ply_logger_get_error_default@plt>
   145c0:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   145c4:	cmp	r0, #0
   145c8:	bne	14678 <__assert_fail@plt+0x3188>
   145cc:	ldr	r2, [r4, #12]
   145d0:	mov	r3, #127	; 0x7f
   145d4:	cmp	r2, #0
   145d8:	str	r3, [sp, #8]
   145dc:	ble	14818 <__assert_fail@plt+0x3328>
   145e0:	ldr	r9, [pc, #576]	; 14828 <__assert_fail@plt+0x3338>
   145e4:	ldr	r8, [pc, #576]	; 1482c <__assert_fail@plt+0x333c>
   145e8:	ldr	r7, [pc, #576]	; 14830 <__assert_fail@plt+0x3340>
   145ec:	b	14604 <__assert_fail@plt+0x3114>
   145f0:	ldr	r3, [r4, #12]
   145f4:	sub	r3, r3, #1
   145f8:	cmp	r3, #0
   145fc:	str	r3, [r4, #12]
   14600:	ble	146b0 <__assert_fail@plt+0x31c0>
   14604:	add	r2, sp, #8
   14608:	mov	r1, #0
   1460c:	ldr	r0, [r4, #4]
   14610:	bl	142c4 <__assert_fail@plt+0x2dd4>
   14614:	subs	r6, r0, #0
   14618:	beq	14630 <__assert_fail@plt+0x3140>
   1461c:	ldr	r3, [sp, #8]
   14620:	and	r2, r3, #127	; 0x7f
   14624:	lsl	r3, r3, #16
   14628:	orrs	r3, r2, r3, lsr #24
   1462c:	beq	14774 <__assert_fail@plt+0x3284>
   14630:	ldr	fp, [r5]
   14634:	bl	11430 <ply_logger_get_error_default@plt>
   14638:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   1463c:	cmp	r0, #0
   14640:	beq	145f0 <__assert_fail@plt+0x3100>
   14644:	bl	11430 <ply_logger_get_error_default@plt>
   14648:	bl	1125c <ply_logger_flush@plt>
   1464c:	str	fp, [r5]
   14650:	bl	11430 <ply_logger_get_error_default@plt>
   14654:	mov	r3, #216	; 0xd8
   14658:	mov	r2, r8
   1465c:	mov	r1, r7
   14660:	str	r9, [sp]
   14664:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   14668:	bl	11430 <ply_logger_get_error_default@plt>
   1466c:	bl	1125c <ply_logger_flush@plt>
   14670:	str	fp, [r5]
   14674:	b	145f0 <__assert_fail@plt+0x3100>
   14678:	bl	11430 <ply_logger_get_error_default@plt>
   1467c:	bl	1125c <ply_logger_flush@plt>
   14680:	str	r6, [r5]
   14684:	bl	11430 <ply_logger_get_error_default@plt>
   14688:	ldr	r2, [pc, #408]	; 14828 <__assert_fail@plt+0x3338>
   1468c:	mov	r3, #202	; 0xca
   14690:	ldr	r1, [pc, #412]	; 14834 <__assert_fail@plt+0x3344>
   14694:	str	r2, [sp]
   14698:	ldr	r2, [pc, #396]	; 1482c <__assert_fail@plt+0x333c>
   1469c:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   146a0:	bl	11430 <ply_logger_get_error_default@plt>
   146a4:	bl	1125c <ply_logger_flush@plt>
   146a8:	str	r6, [r5]
   146ac:	b	145cc <__assert_fail@plt+0x30dc>
   146b0:	cmp	r6, #0
   146b4:	ldr	r3, [sp, #8]
   146b8:	beq	146d0 <__assert_fail@plt+0x31e0>
   146bc:	and	r2, r3, #127	; 0x7f
   146c0:	add	r2, r2, #1
   146c4:	sxtb	r2, r2
   146c8:	cmp	r2, #1
   146cc:	bgt	14750 <__assert_fail@plt+0x3260>
   146d0:	asr	r3, r3, #8
   146d4:	uxtb	r1, r3
   146d8:	ldr	r3, [r4]
   146dc:	ldr	r0, [r3]
   146e0:	bl	11388 <ply_event_loop_exit@plt>
   146e4:	ldr	r2, [sp, #12]
   146e8:	ldr	r3, [sl]
   146ec:	cmp	r2, r3
   146f0:	bne	14820 <__assert_fail@plt+0x3330>
   146f4:	add	sp, sp, #20
   146f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146fc:	bl	11430 <ply_logger_get_error_default@plt>
   14700:	bl	1125c <ply_logger_flush@plt>
   14704:	str	r6, [r5]
   14708:	bl	11430 <ply_logger_get_error_default@plt>
   1470c:	ldr	r2, [pc, #276]	; 14828 <__assert_fail@plt+0x3338>
   14710:	mov	r3, #192	; 0xc0
   14714:	ldr	r1, [pc, #284]	; 14838 <__assert_fail@plt+0x3348>
   14718:	str	r2, [sp]
   1471c:	ldr	r2, [pc, #264]	; 1482c <__assert_fail@plt+0x333c>
   14720:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   14724:	bl	11430 <ply_logger_get_error_default@plt>
   14728:	bl	1125c <ply_logger_flush@plt>
   1472c:	ldr	r3, [r4, #4]
   14730:	str	r6, [r5]
   14734:	cmp	r3, #0
   14738:	bne	145b8 <__assert_fail@plt+0x30c8>
   1473c:	ldr	r3, [r4]
   14740:	mov	r1, #1
   14744:	ldr	r0, [r3]
   14748:	bl	11388 <ply_event_loop_exit@plt>
   1474c:	b	146e4 <__assert_fail@plt+0x31f4>
   14750:	ldr	r4, [r5]
   14754:	bl	11430 <ply_logger_get_error_default@plt>
   14758:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   1475c:	cmp	r0, #0
   14760:	bne	14790 <__assert_fail@plt+0x32a0>
   14764:	ldr	r0, [sp, #8]
   14768:	and	r0, r0, #127	; 0x7f
   1476c:	bl	111f0 <raise@plt>
   14770:	b	146e4 <__assert_fail@plt+0x31f4>
   14774:	ldr	r6, [r5]
   14778:	bl	11430 <ply_logger_get_error_default@plt>
   1477c:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   14780:	cmp	r0, #0
   14784:	bne	147e0 <__assert_fail@plt+0x32f0>
   14788:	ldr	r3, [sp, #8]
   1478c:	b	146bc <__assert_fail@plt+0x31cc>
   14790:	bl	11430 <ply_logger_get_error_default@plt>
   14794:	bl	1125c <ply_logger_flush@plt>
   14798:	str	r4, [r5]
   1479c:	bl	11430 <ply_logger_get_error_default@plt>
   147a0:	mov	r6, r0
   147a4:	ldr	r0, [sp, #8]
   147a8:	and	r0, r0, #127	; 0x7f
   147ac:	bl	112ec <strsignal@plt>
   147b0:	ldr	r2, [pc, #112]	; 14828 <__assert_fail@plt+0x3338>
   147b4:	mov	r3, #221	; 0xdd
   147b8:	ldr	r1, [pc, #124]	; 1483c <__assert_fail@plt+0x334c>
   147bc:	str	r2, [sp]
   147c0:	ldr	r2, [pc, #100]	; 1482c <__assert_fail@plt+0x333c>
   147c4:	str	r0, [sp, #4]
   147c8:	mov	r0, r6
   147cc:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   147d0:	bl	11430 <ply_logger_get_error_default@plt>
   147d4:	bl	1125c <ply_logger_flush@plt>
   147d8:	str	r4, [r5]
   147dc:	b	14764 <__assert_fail@plt+0x3274>
   147e0:	bl	11430 <ply_logger_get_error_default@plt>
   147e4:	bl	1125c <ply_logger_flush@plt>
   147e8:	str	r6, [r5]
   147ec:	bl	11430 <ply_logger_get_error_default@plt>
   147f0:	ldr	r2, [pc, #48]	; 14828 <__assert_fail@plt+0x3338>
   147f4:	mov	r3, #212	; 0xd4
   147f8:	ldr	r1, [pc, #64]	; 14840 <__assert_fail@plt+0x3350>
   147fc:	str	r2, [sp]
   14800:	ldr	r2, [pc, #36]	; 1482c <__assert_fail@plt+0x333c>
   14804:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   14808:	bl	11430 <ply_logger_get_error_default@plt>
   1480c:	bl	1125c <ply_logger_flush@plt>
   14810:	str	r6, [r5]
   14814:	b	14788 <__assert_fail@plt+0x3298>
   14818:	mov	r1, #0
   1481c:	b	146d8 <__assert_fail@plt+0x31e8>
   14820:	bl	112bc <__stack_chk_fail@plt>
   14824:	andeq	r6, r2, r0, lsl #30
   14828:	andeq	r5, r1, ip, asr #13
   1482c:	andeq	r5, r1, r4, ror r7
   14830:	andeq	r5, r1, r4, asr #19
   14834:	andeq	r5, r1, r8, asr r9
   14838:	andeq	r5, r1, ip, lsr #18
   1483c:	andeq	r5, r1, r4, ror #19
   14840:	muleq	r1, ip, r9
   14844:	subs	r3, r1, #0
   14848:	beq	1489c <__assert_fail@plt+0x33ac>
   1484c:	push	{r4, r5, r6, lr}
   14850:	mov	r4, r0
   14854:	ldr	r0, [r0, #4]
   14858:	mov	r5, r3
   1485c:	cmp	r0, #0
   14860:	beq	14880 <__assert_fail@plt+0x3390>
   14864:	mov	r2, #0
   14868:	bl	142c4 <__assert_fail@plt+0x2dd4>
   1486c:	ldr	r3, [r4]
   14870:	mov	r1, #0
   14874:	pop	{r4, r5, r6, lr}
   14878:	ldr	r0, [r3]
   1487c:	b	11388 <ply_event_loop_exit@plt>
   14880:	mov	r0, r3
   14884:	bl	1137c <strlen@plt>
   14888:	mov	r1, r5
   1488c:	mov	r2, r0
   14890:	mov	r0, #1
   14894:	bl	11400 <write@plt>
   14898:	b	1486c <__assert_fail@plt+0x337c>
   1489c:	ldr	r3, [r0]
   148a0:	mov	r1, #1
   148a4:	ldr	r0, [r3]
   148a8:	b	11388 <ply_event_loop_exit@plt>
   148ac:	push	{r4, r5, r6, r7, r8, lr}
   148b0:	sub	sp, sp, #16
   148b4:	ldr	r6, [pc, #432]	; 14a6c <__assert_fail@plt+0x357c>
   148b8:	ldr	r2, [r0, #4]
   148bc:	ldr	r3, [r6]
   148c0:	cmp	r2, #0
   148c4:	str	r3, [sp, #12]
   148c8:	beq	14a58 <__assert_fail@plt+0x3568>
   148cc:	mov	r4, r1
   148d0:	mov	r5, r0
   148d4:	bl	113a0 <__errno_location@plt>
   148d8:	mov	r7, r0
   148dc:	ldr	r8, [r0]
   148e0:	bl	11430 <ply_logger_get_error_default@plt>
   148e4:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   148e8:	cmp	r0, #0
   148ec:	bne	14998 <__assert_fail@plt+0x34a8>
   148f0:	cmp	r4, #0
   148f4:	ldr	r8, [r7]
   148f8:	beq	149d4 <__assert_fail@plt+0x34e4>
   148fc:	bl	11430 <ply_logger_get_error_default@plt>
   14900:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   14904:	cmp	r0, #0
   14908:	bne	14a1c <__assert_fail@plt+0x352c>
   1490c:	ldr	r1, [r4]
   14910:	cmp	r1, #0
   14914:	beq	14954 <__assert_fail@plt+0x3464>
   14918:	mov	r7, #127	; 0x7f
   1491c:	add	r2, sp, #8
   14920:	ldr	r0, [r5, #4]
   14924:	str	r7, [sp, #8]
   14928:	bl	142c4 <__assert_fail@plt+0x2dd4>
   1492c:	cmp	r0, #0
   14930:	beq	14948 <__assert_fail@plt+0x3458>
   14934:	ldr	r1, [sp, #8]
   14938:	and	r3, r1, #127	; 0x7f
   1493c:	lsl	r1, r1, #16
   14940:	orrs	r1, r3, r1, lsr #24
   14944:	beq	14988 <__assert_fail@plt+0x3498>
   14948:	ldr	r1, [r4, #4]!
   1494c:	cmp	r1, #0
   14950:	bne	1491c <__assert_fail@plt+0x342c>
   14954:	ldr	r2, [r5]
   14958:	ldr	r1, [r5, #8]
   1495c:	ldr	r3, [pc, #268]	; 14a70 <__assert_fail@plt+0x3580>
   14960:	ldr	r0, [r2, #4]
   14964:	str	r5, [sp]
   14968:	ldr	r2, [pc, #260]	; 14a74 <__assert_fail@plt+0x3584>
   1496c:	bl	13208 <__assert_fail@plt+0x1d18>
   14970:	ldr	r2, [sp, #12]
   14974:	ldr	r3, [r6]
   14978:	cmp	r2, r3
   1497c:	bne	14a54 <__assert_fail@plt+0x3564>
   14980:	add	sp, sp, #16
   14984:	pop	{r4, r5, r6, r7, r8, pc}
   14988:	ldr	r3, [r5]
   1498c:	ldr	r0, [r3]
   14990:	bl	11388 <ply_event_loop_exit@plt>
   14994:	b	14970 <__assert_fail@plt+0x3480>
   14998:	bl	11430 <ply_logger_get_error_default@plt>
   1499c:	bl	1125c <ply_logger_flush@plt>
   149a0:	str	r8, [r7]
   149a4:	bl	11430 <ply_logger_get_error_default@plt>
   149a8:	ldr	r2, [pc, #200]	; 14a78 <__assert_fail@plt+0x3588>
   149ac:	ldr	r3, [pc, #200]	; 14a7c <__assert_fail@plt+0x358c>
   149b0:	ldr	r1, [pc, #200]	; 14a80 <__assert_fail@plt+0x3590>
   149b4:	str	r2, [sp]
   149b8:	ldr	r2, [pc, #196]	; 14a84 <__assert_fail@plt+0x3594>
   149bc:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   149c0:	bl	11430 <ply_logger_get_error_default@plt>
   149c4:	bl	1125c <ply_logger_flush@plt>
   149c8:	cmp	r4, #0
   149cc:	str	r8, [r7]
   149d0:	bne	148fc <__assert_fail@plt+0x340c>
   149d4:	bl	11430 <ply_logger_get_error_default@plt>
   149d8:	bl	11370 <ply_logger_is_tracing_enabled@plt>
   149dc:	cmp	r0, #0
   149e0:	beq	14954 <__assert_fail@plt+0x3464>
   149e4:	bl	11430 <ply_logger_get_error_default@plt>
   149e8:	bl	1125c <ply_logger_flush@plt>
   149ec:	str	r8, [r7]
   149f0:	bl	11430 <ply_logger_get_error_default@plt>
   149f4:	ldr	r2, [pc, #124]	; 14a78 <__assert_fail@plt+0x3588>
   149f8:	mov	r3, #380	; 0x17c
   149fc:	ldr	r1, [pc, #132]	; 14a88 <__assert_fail@plt+0x3598>
   14a00:	str	r2, [sp]
   14a04:	ldr	r2, [pc, #120]	; 14a84 <__assert_fail@plt+0x3594>
   14a08:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   14a0c:	bl	11430 <ply_logger_get_error_default@plt>
   14a10:	bl	1125c <ply_logger_flush@plt>
   14a14:	str	r8, [r7]
   14a18:	b	14954 <__assert_fail@plt+0x3464>
   14a1c:	bl	11430 <ply_logger_get_error_default@plt>
   14a20:	bl	1125c <ply_logger_flush@plt>
   14a24:	str	r8, [r7]
   14a28:	bl	11430 <ply_logger_get_error_default@plt>
   14a2c:	ldr	r2, [pc, #68]	; 14a78 <__assert_fail@plt+0x3588>
   14a30:	ldr	r3, [pc, #84]	; 14a8c <__assert_fail@plt+0x359c>
   14a34:	ldr	r1, [pc, #84]	; 14a90 <__assert_fail@plt+0x35a0>
   14a38:	str	r2, [sp]
   14a3c:	ldr	r2, [pc, #64]	; 14a84 <__assert_fail@plt+0x3594>
   14a40:	bl	113b8 <ply_logger_inject_with_non_literal_format_string@plt>
   14a44:	bl	11430 <ply_logger_get_error_default@plt>
   14a48:	bl	1125c <ply_logger_flush@plt>
   14a4c:	str	r8, [r7]
   14a50:	b	1490c <__assert_fail@plt+0x341c>
   14a54:	bl	112bc <__stack_chk_fail@plt>
   14a58:	ldr	r3, [pc, #52]	; 14a94 <__assert_fail@plt+0x35a4>
   14a5c:	mov	r2, #360	; 0x168
   14a60:	ldr	r1, [pc, #28]	; 14a84 <__assert_fail@plt+0x3594>
   14a64:	ldr	r0, [pc, #44]	; 14a98 <__assert_fail@plt+0x35a8>
   14a68:	bl	114f0 <__assert_fail@plt>
   14a6c:	andeq	r6, r2, r0, lsl #30
   14a70:	andeq	r4, r1, r8, ror r5
   14a74:	muleq	r1, ip, sl
   14a78:	andeq	r5, r1, r8, lsl #14
   14a7c:	andeq	r0, r0, sl, ror #2
   14a80:	andeq	r5, r1, r4, lsr sl
   14a84:	andeq	r5, r1, r4, ror r7
   14a88:	andeq	r5, r1, r8, lsr #21
   14a8c:	andeq	r0, r0, pc, ror #2
   14a90:	andeq	r5, r1, r4, ror #20
   14a94:	andeq	r5, r1, r8, ror #13
   14a98:	andeq	r5, r1, r4, lsl sl
   14a9c:	push	{r4, r5, r6, r7, r8, lr}
   14aa0:	mov	r6, r2
   14aa4:	ldr	r5, [pc, #340]	; 14c00 <__assert_fail@plt+0x3710>
   14aa8:	sub	sp, sp, #16
   14aac:	mov	r3, #127	; 0x7f
   14ab0:	ldr	r2, [r5]
   14ab4:	subs	r7, r1, #0
   14ab8:	str	r2, [sp, #12]
   14abc:	str	r3, [sp, #8]
   14ac0:	mov	r4, r0
   14ac4:	beq	14be4 <__assert_fail@plt+0x36f4>
   14ac8:	ldrb	r3, [r7]
   14acc:	cmp	r3, #3
   14ad0:	beq	14b60 <__assert_fail@plt+0x3670>
   14ad4:	ldr	r8, [r0, #4]
   14ad8:	cmp	r8, #0
   14adc:	beq	14b44 <__assert_fail@plt+0x3654>
   14ae0:	mov	r0, r8
   14ae4:	add	r2, sp, #8
   14ae8:	bl	142c4 <__assert_fail@plt+0x2dd4>
   14aec:	ldr	r1, [sp, #8]
   14af0:	cmp	r0, #0
   14af4:	and	r0, r1, #127	; 0x7f
   14af8:	bne	14ba4 <__assert_fail@plt+0x36b4>
   14afc:	add	r3, r0, #1
   14b00:	sxtb	r3, r3
   14b04:	cmp	r3, #1
   14b08:	asrle	r1, r1, #8
   14b0c:	uxtble	r1, r1
   14b10:	ble	14b1c <__assert_fail@plt+0x362c>
   14b14:	bl	111f0 <raise@plt>
   14b18:	ldrb	r1, [sp, #9]
   14b1c:	ldrb	r2, [r4, #16]
   14b20:	ldr	r3, [r4]
   14b24:	tst	r2, #1
   14b28:	beq	14b98 <__assert_fail@plt+0x36a8>
   14b2c:	ldr	r2, [pc, #208]	; 14c04 <__assert_fail@plt+0x3714>
   14b30:	ldr	r0, [pc, #208]	; 14c08 <__assert_fail@plt+0x3718>
   14b34:	cmp	r1, #0
   14b38:	movne	r1, r2
   14b3c:	moveq	r1, r0
   14b40:	b	14b74 <__assert_fail@plt+0x3684>
   14b44:	mov	r0, r7
   14b48:	bl	1137c <strlen@plt>
   14b4c:	mov	r1, r7
   14b50:	mov	r2, r0
   14b54:	mov	r0, #1
   14b58:	bl	11400 <write@plt>
   14b5c:	str	r8, [sp, #8]
   14b60:	ldrb	r1, [r4, #16]
   14b64:	ldr	r3, [r4]
   14b68:	ands	r1, r1, #1
   14b6c:	ldrne	r1, [pc, #148]	; 14c08 <__assert_fail@plt+0x3718>
   14b70:	beq	14b98 <__assert_fail@plt+0x36a8>
   14b74:	mov	r0, r6
   14b78:	ldr	r2, [pc, #132]	; 14c04 <__assert_fail@plt+0x3714>
   14b7c:	bl	135b8 <__assert_fail@plt+0x20c8>
   14b80:	ldr	r2, [sp, #12]
   14b84:	ldr	r3, [r5]
   14b88:	cmp	r2, r3
   14b8c:	bne	14bfc <__assert_fail@plt+0x370c>
   14b90:	add	sp, sp, #16
   14b94:	pop	{r4, r5, r6, r7, r8, pc}
   14b98:	ldr	r0, [r3]
   14b9c:	bl	11388 <ply_event_loop_exit@plt>
   14ba0:	b	14b80 <__assert_fail@plt+0x3690>
   14ba4:	lsl	r3, r1, #16
   14ba8:	orrs	r3, r0, r3, lsr #24
   14bac:	beq	14afc <__assert_fail@plt+0x360c>
   14bb0:	ldr	r3, [r4, #12]
   14bb4:	sub	r3, r3, #1
   14bb8:	cmp	r3, #0
   14bbc:	str	r3, [r4, #12]
   14bc0:	ble	14afc <__assert_fail@plt+0x360c>
   14bc4:	ldr	r2, [r4]
   14bc8:	ldr	r1, [r4, #8]
   14bcc:	ldr	r3, [pc, #56]	; 14c0c <__assert_fail@plt+0x371c>
   14bd0:	ldr	r0, [r2, #4]
   14bd4:	str	r4, [sp]
   14bd8:	ldr	r2, [pc, #48]	; 14c10 <__assert_fail@plt+0x3720>
   14bdc:	bl	13208 <__assert_fail@plt+0x1d18>
   14be0:	b	14b80 <__assert_fail@plt+0x3690>
   14be4:	ldr	r3, [r0]
   14be8:	ldr	r1, [r3, #4]
   14bec:	bl	14578 <__assert_fail@plt+0x3088>
   14bf0:	ldr	r1, [sp, #8]
   14bf4:	and	r0, r1, #127	; 0x7f
   14bf8:	b	14afc <__assert_fail@plt+0x360c>
   14bfc:	bl	112bc <__stack_chk_fail@plt>
   14c00:	andeq	r6, r2, r0, lsl #30
   14c04:	andeq	r3, r1, r0, ror #15
   14c08:	andeq	r3, r1, ip, ror #15
   14c0c:	andeq	r4, r1, r8, ror r5
   14c10:	muleq	r1, ip, sl
   14c14:	subs	r3, r1, #0
   14c18:	push	{r4, r5, r6, lr}
   14c1c:	mov	r5, r2
   14c20:	beq	14c98 <__assert_fail@plt+0x37a8>
   14c24:	mov	r4, r0
   14c28:	ldr	r0, [r0, #4]
   14c2c:	mov	r6, r3
   14c30:	cmp	r0, #0
   14c34:	beq	14c64 <__assert_fail@plt+0x3774>
   14c38:	mov	r2, #0
   14c3c:	bl	142c4 <__assert_fail@plt+0x2dd4>
   14c40:	ldrb	r1, [r4, #12]
   14c44:	ldr	r3, [r4]
   14c48:	ands	r1, r1, #1
   14c4c:	beq	14c8c <__assert_fail@plt+0x379c>
   14c50:	mov	r0, r5
   14c54:	ldr	r2, [pc, #112]	; 14ccc <__assert_fail@plt+0x37dc>
   14c58:	ldr	r1, [pc, #112]	; 14cd0 <__assert_fail@plt+0x37e0>
   14c5c:	pop	{r4, r5, r6, lr}
   14c60:	b	135b8 <__assert_fail@plt+0x20c8>
   14c64:	mov	r0, r3
   14c68:	bl	1137c <strlen@plt>
   14c6c:	mov	r1, r6
   14c70:	mov	r2, r0
   14c74:	mov	r0, #1
   14c78:	bl	11400 <write@plt>
   14c7c:	ldrb	r1, [r4, #12]
   14c80:	ldr	r3, [r4]
   14c84:	ands	r1, r1, #1
   14c88:	bne	14c50 <__assert_fail@plt+0x3760>
   14c8c:	ldr	r0, [r3]
   14c90:	pop	{r4, r5, r6, lr}
   14c94:	b	11388 <ply_event_loop_exit@plt>
   14c98:	ldrb	r2, [r0, #12]
   14c9c:	ldr	r3, [r0]
   14ca0:	tst	r2, #1
   14ca4:	beq	14cbc <__assert_fail@plt+0x37cc>
   14ca8:	ldr	r2, [pc, #28]	; 14ccc <__assert_fail@plt+0x37dc>
   14cac:	mov	r0, r5
   14cb0:	mov	r1, r2
   14cb4:	pop	{r4, r5, r6, lr}
   14cb8:	b	135b8 <__assert_fail@plt+0x20c8>
   14cbc:	ldr	r0, [r3]
   14cc0:	mov	r1, #1
   14cc4:	pop	{r4, r5, r6, lr}
   14cc8:	b	11388 <ply_event_loop_exit@plt>
   14ccc:	andeq	r3, r1, r0, ror #15
   14cd0:	andeq	r3, r1, ip, ror #15
   14cd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14cd8:	mov	r7, r0
   14cdc:	ldr	r6, [pc, #72]	; 14d2c <__assert_fail@plt+0x383c>
   14ce0:	ldr	r5, [pc, #72]	; 14d30 <__assert_fail@plt+0x3840>
   14ce4:	add	r6, pc, r6
   14ce8:	add	r5, pc, r5
   14cec:	sub	r6, r6, r5
   14cf0:	mov	r8, r1
   14cf4:	mov	r9, r2
   14cf8:	bl	111c4 <calloc@plt-0x20>
   14cfc:	asrs	r6, r6, #2
   14d00:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d04:	mov	r4, #0
   14d08:	add	r4, r4, #1
   14d0c:	ldr	r3, [r5], #4
   14d10:	mov	r2, r9
   14d14:	mov	r1, r8
   14d18:	mov	r0, r7
   14d1c:	blx	r3
   14d20:	cmp	r6, r4
   14d24:	bne	14d08 <__assert_fail@plt+0x3818>
   14d28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d2c:	andeq	r2, r1, r0, lsl r2
   14d30:	andeq	r2, r1, r8, lsl #4
   14d34:	bx	lr

Disassembly of section .fini:

00014d38 <.fini>:
   14d38:	push	{r3, lr}
   14d3c:	pop	{r3, pc}
