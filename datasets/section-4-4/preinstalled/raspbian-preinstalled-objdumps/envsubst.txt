
raspbian-preinstalled/envsubst:     file format elf32-littlearm


Disassembly of section .init:

00010e9c <.init>:
   10e9c:	push	{r3, lr}
   10ea0:	bl	118d0 <__assert_fail@plt+0x72c>
   10ea4:	pop	{r3, pc}

Disassembly of section .plt:

00010ea8 <fdopen@plt-0x14>:
   10ea8:	push	{lr}		; (str lr, [sp, #-4]!)
   10eac:	ldr	lr, [pc, #4]	; 10eb8 <fdopen@plt-0x4>
   10eb0:	add	lr, pc, lr
   10eb4:	ldr	pc, [lr, #8]!
   10eb8:	andeq	r5, r1, r8, asr #2

00010ebc <fdopen@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #328]!	; 0x148

00010ec8 <calloc@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #320]!	; 0x140

00010ed4 <iconv_close@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #312]!	; 0x138

00010ee0 <iconv@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #304]!	; 0x130

00010eec <strcmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #296]!	; 0x128

00010ef8 <basename@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #288]!	; 0x120

00010f04 <fflush@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #280]!	; 0x118

00010f10 <wcwidth@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #272]!	; 0x110

00010f1c <memmove@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #264]!	; 0x108

00010f28 <free@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #256]!	; 0x100

00010f34 <ferror@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #248]!	; 0xf8

00010f40 <memcpy@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #240]!	; 0xf0

00010f4c <mbsinit@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #232]!	; 0xe8

00010f58 <_IO_getc@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #224]!	; 0xe0

00010f64 <memcmp@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #216]!	; 0xd8

00010f70 <dcgettext@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #208]!	; 0xd0

00010f7c <strdup@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #200]!	; 0xc8

00010f88 <__stack_chk_fail@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #192]!	; 0xc0

00010f94 <realloc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #184]!	; 0xb8

00010fa0 <textdomain@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #176]!	; 0xb0

00010fac <iswcntrl@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #168]!	; 0xa8

00010fb8 <_IO_putc@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #160]!	; 0xa0

00010fc4 <fwrite@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #152]!	; 0x98

00010fd0 <__ctype_get_mb_cur_max@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #144]!	; 0x90

00010fdc <mbrtowc@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #136]!	; 0x88

00010fe8 <error@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #128]!	; 0x80

00010ff4 <open64@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #120]!	; 0x78

00011000 <getenv@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #112]!	; 0x70

0001100c <malloc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #104]!	; 0x68

00011018 <iconv_open@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #96]!	; 0x60

00011024 <__libc_start_main@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #88]!	; 0x58

00011030 <__gmon_start__@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #80]!	; 0x50

0001103c <getopt_long@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #72]!	; 0x48

00011048 <__ctype_b_loc@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #64]!	; 0x40

00011054 <exit@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #56]!	; 0x38

00011060 <iswspace@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #48]!	; 0x30

0001106c <strlen@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #86016	; 0x15000
   11074:	ldr	pc, [ip, #40]!	; 0x28

00011078 <strchr@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #86016	; 0x15000
   11080:	ldr	pc, [ip, #32]!

00011084 <ungetc@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #86016	; 0x15000
   1108c:	ldr	pc, [ip, #24]!

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #86016	; 0x15000
   11098:	ldr	pc, [ip, #16]!

0001109c <iswalnum@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #86016	; 0x15000
   110a4:	ldr	pc, [ip, #8]!

000110a8 <__sprintf_chk@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #86016	; 0x15000
   110b0:	ldr	pc, [ip, #0]!

000110b4 <__cxa_atexit@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #20, 20	; 0x14000
   110bc:	ldr	pc, [ip, #4088]!	; 0xff8

000110c0 <memset@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #20, 20	; 0x14000
   110c8:	ldr	pc, [ip, #4080]!	; 0xff0

000110cc <putchar@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #20, 20	; 0x14000
   110d4:	ldr	pc, [ip, #4072]!	; 0xfe8

000110d8 <fscanf@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #20, 20	; 0x14000
   110e0:	ldr	pc, [ip, #4064]!	; 0xfe0

000110e4 <__printf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #20, 20	; 0x14000
   110ec:	ldr	pc, [ip, #4056]!	; 0xfd8

000110f0 <__fprintf_chk@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #20, 20	; 0x14000
   110f8:	ldr	pc, [ip, #4048]!	; 0xfd0

000110fc <memchr@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #20, 20	; 0x14000
   11104:	ldr	pc, [ip, #4040]!	; 0xfc8

00011108 <fclose@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #20, 20	; 0x14000
   11110:	ldr	pc, [ip, #4032]!	; 0xfc0

00011114 <strnlen@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #20, 20	; 0x14000
   1111c:	ldr	pc, [ip, #4024]!	; 0xfb8

00011120 <__uflow@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #20, 20	; 0x14000
   11128:	ldr	pc, [ip, #4016]!	; 0xfb0

0001112c <setlocale@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #20, 20	; 0x14000
   11134:	ldr	pc, [ip, #4008]!	; 0xfa8

00011138 <strrchr@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #20, 20	; 0x14000
   11140:	ldr	pc, [ip, #4000]!	; 0xfa0

00011144 <nl_langinfo@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #20, 20	; 0x14000
   1114c:	ldr	pc, [ip, #3992]!	; 0xf98

00011150 <fputc@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #20, 20	; 0x14000
   11158:	ldr	pc, [ip, #3984]!	; 0xf90

0001115c <qsort@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #20, 20	; 0x14000
   11164:	ldr	pc, [ip, #3976]!	; 0xf88

00011168 <bindtextdomain@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #20, 20	; 0x14000
   11170:	ldr	pc, [ip, #3968]!	; 0xf80

00011174 <fputs@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #20, 20	; 0x14000
   1117c:	ldr	pc, [ip, #3960]!	; 0xf78

00011180 <strncmp@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #20, 20	; 0x14000
   11188:	ldr	pc, [ip, #3952]!	; 0xf70

0001118c <abort@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #20, 20	; 0x14000
   11194:	ldr	pc, [ip, #3944]!	; 0xf68

00011198 <close@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #20, 20	; 0x14000
   111a0:	ldr	pc, [ip, #3936]!	; 0xf60

000111a4 <__assert_fail@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #20, 20	; 0x14000
   111ac:	ldr	pc, [ip, #3928]!	; 0xf58

Disassembly of section .text:

000111b0 <.text>:
   111b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111b4:	mov	r5, r0
   111b8:	sub	sp, sp, #20
   111bc:	ldr	r0, [r1]
   111c0:	mov	r4, r1
   111c4:	bl	11d58 <__assert_fail@plt+0xbb4>
   111c8:	ldr	r1, [pc, #1596]	; 1180c <__assert_fail@plt+0x668>
   111cc:	mov	r0, #6
   111d0:	bl	1112c <setlocale@plt>
   111d4:	ldr	r1, [pc, #1588]	; 11810 <__assert_fail@plt+0x66c>
   111d8:	ldr	r0, [pc, #1588]	; 11814 <__assert_fail@plt+0x670>
   111dc:	bl	11168 <bindtextdomain@plt>
   111e0:	ldr	r0, [pc, #1580]	; 11814 <__assert_fail@plt+0x670>
   111e4:	bl	10fa0 <textdomain@plt>
   111e8:	ldr	r0, [pc, #1576]	; 11818 <__assert_fail@plt+0x674>
   111ec:	bl	154d0 <__assert_fail@plt+0x432c>
   111f0:	mov	r6, #0
   111f4:	ldr	r8, [pc, #1568]	; 1181c <__assert_fail@plt+0x678>
   111f8:	ldr	r7, [pc, #1568]	; 11820 <__assert_fail@plt+0x67c>
   111fc:	mov	fp, r6
   11200:	mov	sl, r6
   11204:	mov	r9, r6
   11208:	str	r9, [sp]
   1120c:	mov	r3, r8
   11210:	mov	r2, r7
   11214:	mov	r1, r4
   11218:	mov	r0, r5
   1121c:	bl	1103c <getopt_long@plt>
   11220:	cmn	r0, #1
   11224:	beq	1129c <__assert_fail@plt+0xf8>
   11228:	cmp	r0, #86	; 0x56
   1122c:	beq	11294 <__assert_fail@plt+0xf0>
   11230:	ble	1124c <__assert_fail@plt+0xa8>
   11234:	cmp	r0, #104	; 0x68
   11238:	beq	1128c <__assert_fail@plt+0xe8>
   1123c:	cmp	r0, #118	; 0x76
   11240:	bne	11254 <__assert_fail@plt+0xb0>
   11244:	mov	sl, #1
   11248:	b	11208 <__assert_fail@plt+0x64>
   1124c:	cmp	r0, #0
   11250:	beq	11208 <__assert_fail@plt+0x64>
   11254:	ldr	r3, [pc, #1480]	; 11824 <__assert_fail@plt+0x680>
   11258:	mov	r2, #5
   1125c:	ldr	r1, [pc, #1476]	; 11828 <__assert_fail@plt+0x684>
   11260:	mov	r0, #0
   11264:	ldr	r4, [r3]
   11268:	bl	10f70 <dcgettext@plt>
   1126c:	ldr	r3, [pc, #1464]	; 1182c <__assert_fail@plt+0x688>
   11270:	mov	r1, #1
   11274:	ldr	r3, [r3]
   11278:	mov	r2, r0
   1127c:	mov	r0, r4
   11280:	bl	110f0 <__fprintf_chk@plt>
   11284:	mov	r0, #1
   11288:	bl	11054 <exit@plt>
   1128c:	mov	fp, #1
   11290:	b	11208 <__assert_fail@plt+0x64>
   11294:	mov	r6, #1
   11298:	b	11208 <__assert_fail@plt+0x64>
   1129c:	cmp	r6, #0
   112a0:	bne	1131c <__assert_fail@plt+0x178>
   112a4:	cmp	fp, #0
   112a8:	bne	115c8 <__assert_fail@plt+0x424>
   112ac:	ldr	r6, [pc, #1404]	; 11830 <__assert_fail@plt+0x68c>
   112b0:	ldr	r3, [r6]
   112b4:	sub	r3, r5, r3
   112b8:	cmp	r3, #1
   112bc:	ble	112e0 <__assert_fail@plt+0x13c>
   112c0:	mov	r2, #5
   112c4:	ldr	r1, [pc, #1384]	; 11834 <__assert_fail@plt+0x690>
   112c8:	mov	r0, fp
   112cc:	bl	10f70 <dcgettext@plt>
   112d0:	mov	r1, fp
   112d4:	mov	r2, r0
   112d8:	mov	r0, #1
   112dc:	bl	10fe8 <error@plt>
   112e0:	ldr	r3, [r6]
   112e4:	cmp	sl, #0
   112e8:	sub	r5, r5, r3
   112ec:	beq	11398 <__assert_fail@plt+0x1f4>
   112f0:	cmp	r5, #0
   112f4:	beq	117e8 <__assert_fail@plt+0x644>
   112f8:	cmp	r5, #1
   112fc:	bne	11808 <__assert_fail@plt+0x664>
   11300:	ldr	r0, [r4, r3, lsl #2]
   11304:	ldr	r1, [pc, #1324]	; 11838 <__assert_fail@plt+0x694>
   11308:	add	r3, r3, #1
   1130c:	str	r3, [r6]
   11310:	bl	11984 <__assert_fail@plt+0x7e0>
   11314:	mov	r0, #0
   11318:	bl	11054 <exit@plt>
   1131c:	ldr	r3, [pc, #1288]	; 1182c <__assert_fail@plt+0x688>
   11320:	ldr	r0, [r3]
   11324:	bl	10ef8 <basename@plt>
   11328:	ldr	r2, [pc, #1292]	; 1183c <__assert_fail@plt+0x698>
   1132c:	ldr	r3, [pc, #1248]	; 11814 <__assert_fail@plt+0x670>
   11330:	str	r2, [sp]
   11334:	ldr	r1, [pc, #1284]	; 11840 <__assert_fail@plt+0x69c>
   11338:	mov	r2, r0
   1133c:	mov	r0, #1
   11340:	bl	110e4 <__printf_chk@plt>
   11344:	mov	r2, #5
   11348:	ldr	r1, [pc, #1268]	; 11844 <__assert_fail@plt+0x6a0>
   1134c:	mov	r0, #0
   11350:	bl	10f70 <dcgettext@plt>
   11354:	ldr	r2, [pc, #1260]	; 11848 <__assert_fail@plt+0x6a4>
   11358:	mov	r1, r0
   1135c:	mov	r0, #1
   11360:	bl	110e4 <__printf_chk@plt>
   11364:	mov	r2, #5
   11368:	ldr	r1, [pc, #1244]	; 1184c <__assert_fail@plt+0x6a8>
   1136c:	mov	r0, #0
   11370:	bl	10f70 <dcgettext@plt>
   11374:	mov	r4, r0
   11378:	ldr	r0, [pc, #1232]	; 11850 <__assert_fail@plt+0x6ac>
   1137c:	bl	1260c <__assert_fail@plt+0x1468>
   11380:	mov	r1, r4
   11384:	mov	r2, r0
   11388:	mov	r0, #1
   1138c:	bl	110e4 <__printf_chk@plt>
   11390:	mov	r0, #0
   11394:	bl	11054 <exit@plt>
   11398:	cmp	r5, #0
   1139c:	beq	115a4 <__assert_fail@plt+0x400>
   113a0:	cmp	r5, #1
   113a4:	bne	11808 <__assert_fail@plt+0x664>
   113a8:	ldr	r0, [r4, r3, lsl #2]
   113ac:	ldr	r4, [pc, #1184]	; 11854 <__assert_fail@plt+0x6b0>
   113b0:	add	r3, r3, #1
   113b4:	ldr	r1, [pc, #1180]	; 11858 <__assert_fail@plt+0x6b4>
   113b8:	str	r3, [r6]
   113bc:	strb	sl, [r4, #12]
   113c0:	str	sl, [r4]
   113c4:	str	sl, [r4, #4]
   113c8:	str	sl, [r4, #8]
   113cc:	bl	11984 <__assert_fail@plt+0x7e0>
   113d0:	ldr	r1, [r4, #4]
   113d4:	cmp	r1, #0
   113d8:	bne	115b4 <__assert_fail@plt+0x410>
   113dc:	ldr	r6, [pc, #1144]	; 1185c <__assert_fail@plt+0x6b8>
   113e0:	ldr	r8, [pc, #1144]	; 11860 <__assert_fail@plt+0x6bc>
   113e4:	bl	11a6c <__assert_fail@plt+0x8c8>
   113e8:	cmn	r0, #1
   113ec:	beq	11314 <__assert_fail@plt+0x170>
   113f0:	cmp	r0, #36	; 0x24
   113f4:	beq	11404 <__assert_fail@plt+0x260>
   113f8:	ldr	r1, [r6]
   113fc:	bl	10fb8 <_IO_putc@plt>
   11400:	b	113e4 <__assert_fail@plt+0x240>
   11404:	bl	11a6c <__assert_fail@plt+0x8c8>
   11408:	cmp	r0, #123	; 0x7b
   1140c:	mov	r5, r0
   11410:	movne	r7, #0
   11414:	beq	11720 <__assert_fail@plt+0x57c>
   11418:	bic	r3, r5, #32
   1141c:	sub	r3, r3, #65	; 0x41
   11420:	cmp	r5, #95	; 0x5f
   11424:	cmpne	r3, #25
   11428:	bls	11458 <__assert_fail@plt+0x2b4>
   1142c:	cmn	r5, #1
   11430:	bne	1153c <__assert_fail@plt+0x398>
   11434:	ldr	r1, [r6]
   11438:	mov	r0, #36	; 0x24
   1143c:	bl	10fb8 <_IO_putc@plt>
   11440:	cmp	r7, #0
   11444:	beq	113e4 <__assert_fail@plt+0x240>
   11448:	ldr	r1, [r6]
   1144c:	mov	r0, #123	; 0x7b
   11450:	bl	10fb8 <_IO_putc@plt>
   11454:	b	113e4 <__assert_fail@plt+0x240>
   11458:	mov	r3, #0
   1145c:	str	r3, [r4, #16]
   11460:	ldr	r3, [r4, #16]
   11464:	ldr	r2, [r4, #20]
   11468:	ldr	r0, [r4, #24]
   1146c:	cmp	r3, r2
   11470:	bcs	1151c <__assert_fail@plt+0x378>
   11474:	strb	r5, [r0, r3]
   11478:	add	r3, r3, #1
   1147c:	str	r3, [r4, #16]
   11480:	bl	11a6c <__assert_fail@plt+0x8c8>
   11484:	bic	r3, r0, #32
   11488:	sub	r3, r3, #65	; 0x41
   1148c:	cmp	r3, #25
   11490:	mov	r5, r0
   11494:	bls	11460 <__assert_fail@plt+0x2bc>
   11498:	sub	r3, r0, #48	; 0x30
   1149c:	cmp	r3, #9
   114a0:	bls	11460 <__assert_fail@plt+0x2bc>
   114a4:	cmp	r0, #95	; 0x5f
   114a8:	beq	11460 <__assert_fail@plt+0x2bc>
   114ac:	cmp	r7, #0
   114b0:	beq	1154c <__assert_fail@plt+0x3a8>
   114b4:	cmp	r0, #125	; 0x7d
   114b8:	beq	11730 <__assert_fail@plt+0x58c>
   114bc:	cmn	r0, #1
   114c0:	beq	114cc <__assert_fail@plt+0x328>
   114c4:	ldr	r1, [r8]
   114c8:	bl	11084 <ungetc@plt>
   114cc:	ldr	r1, [r6]
   114d0:	mov	r0, #36	; 0x24
   114d4:	bl	10fb8 <_IO_putc@plt>
   114d8:	mov	r3, #0
   114dc:	str	r3, [sp, #12]
   114e0:	ldr	r1, [r6]
   114e4:	mov	r0, #123	; 0x7b
   114e8:	bl	10fb8 <_IO_putc@plt>
   114ec:	ldr	r3, [r6]
   114f0:	mov	r2, #1
   114f4:	ldr	r1, [r4, #16]
   114f8:	ldr	r0, [r4, #24]
   114fc:	bl	10fc4 <fwrite@plt>
   11500:	ldr	r3, [sp, #12]
   11504:	cmp	r3, #0
   11508:	beq	113e4 <__assert_fail@plt+0x240>
   1150c:	ldr	r1, [r6]
   11510:	mov	r0, #125	; 0x7d
   11514:	bl	10fb8 <_IO_putc@plt>
   11518:	b	113e4 <__assert_fail@plt+0x240>
   1151c:	add	r2, r2, #5
   11520:	lsl	r2, r2, #1
   11524:	mov	r1, r2
   11528:	str	r2, [r4, #20]
   1152c:	bl	12f80 <__assert_fail@plt+0x1ddc>
   11530:	ldr	r3, [r4, #16]
   11534:	str	r0, [r4, #24]
   11538:	b	11474 <__assert_fail@plt+0x2d0>
   1153c:	mov	r0, r5
   11540:	ldr	r1, [r8]
   11544:	bl	11084 <ungetc@plt>
   11548:	b	11434 <__assert_fail@plt+0x290>
   1154c:	cmn	r0, #1
   11550:	beq	11730 <__assert_fail@plt+0x58c>
   11554:	ldr	r1, [r8]
   11558:	bl	11084 <ungetc@plt>
   1155c:	str	r7, [sp, #12]
   11560:	ldrd	r2, [r4, #16]
   11564:	cmp	r2, r3
   11568:	bcs	117bc <__assert_fail@plt+0x618>
   1156c:	ldrb	r2, [r4, #12]
   11570:	ldr	r9, [r4, #24]
   11574:	ldr	r3, [r4, #16]
   11578:	mov	r1, #0
   1157c:	cmp	r2, #0
   11580:	strb	r1, [r9, r3]
   11584:	beq	11738 <__assert_fail@plt+0x594>
   11588:	mov	r0, r9
   1158c:	bl	11000 <getenv@plt>
   11590:	cmp	r0, #0
   11594:	beq	113e4 <__assert_fail@plt+0x240>
   11598:	ldr	r1, [r6]
   1159c:	bl	11174 <fputs@plt>
   115a0:	b	113e4 <__assert_fail@plt+0x240>
   115a4:	ldr	r4, [pc, #680]	; 11854 <__assert_fail@plt+0x6b0>
   115a8:	mov	r3, #1
   115ac:	strb	r3, [r4, #12]
   115b0:	b	113dc <__assert_fail@plt+0x238>
   115b4:	ldr	r3, [pc, #680]	; 11864 <__assert_fail@plt+0x6c0>
   115b8:	mov	r2, #4
   115bc:	ldr	r0, [r4]
   115c0:	bl	1115c <qsort@plt>
   115c4:	b	113dc <__assert_fail@plt+0x238>
   115c8:	mov	r2, #5
   115cc:	ldr	r1, [pc, #660]	; 11868 <__assert_fail@plt+0x6c4>
   115d0:	mov	r0, r6
   115d4:	bl	10f70 <dcgettext@plt>
   115d8:	ldr	r3, [pc, #588]	; 1182c <__assert_fail@plt+0x688>
   115dc:	ldr	r2, [r3]
   115e0:	mov	r1, r0
   115e4:	mov	r0, #1
   115e8:	bl	110e4 <__printf_chk@plt>
   115ec:	mov	r0, #10
   115f0:	bl	110cc <putchar@plt>
   115f4:	mov	r2, #5
   115f8:	ldr	r1, [pc, #620]	; 1186c <__assert_fail@plt+0x6c8>
   115fc:	mov	r0, r6
   11600:	bl	10f70 <dcgettext@plt>
   11604:	mov	r1, r0
   11608:	mov	r0, #1
   1160c:	bl	110e4 <__printf_chk@plt>
   11610:	mov	r0, #10
   11614:	bl	110cc <putchar@plt>
   11618:	mov	r2, #5
   1161c:	ldr	r1, [pc, #588]	; 11870 <__assert_fail@plt+0x6cc>
   11620:	mov	r0, r6
   11624:	bl	10f70 <dcgettext@plt>
   11628:	mov	r1, r0
   1162c:	mov	r0, #1
   11630:	bl	110e4 <__printf_chk@plt>
   11634:	mov	r2, #5
   11638:	ldr	r1, [pc, #564]	; 11874 <__assert_fail@plt+0x6d0>
   1163c:	mov	r0, r6
   11640:	bl	10f70 <dcgettext@plt>
   11644:	mov	r1, r0
   11648:	mov	r0, #1
   1164c:	bl	110e4 <__printf_chk@plt>
   11650:	mov	r0, #10
   11654:	bl	110cc <putchar@plt>
   11658:	mov	r2, #5
   1165c:	ldr	r1, [pc, #532]	; 11878 <__assert_fail@plt+0x6d4>
   11660:	mov	r0, r6
   11664:	bl	10f70 <dcgettext@plt>
   11668:	mov	r1, r0
   1166c:	mov	r0, #1
   11670:	bl	110e4 <__printf_chk@plt>
   11674:	mov	r2, #5
   11678:	ldr	r1, [pc, #508]	; 1187c <__assert_fail@plt+0x6d8>
   1167c:	mov	r0, r6
   11680:	bl	10f70 <dcgettext@plt>
   11684:	mov	r1, r0
   11688:	mov	r0, #1
   1168c:	bl	110e4 <__printf_chk@plt>
   11690:	mov	r2, #5
   11694:	ldr	r1, [pc, #484]	; 11880 <__assert_fail@plt+0x6dc>
   11698:	mov	r0, r6
   1169c:	bl	10f70 <dcgettext@plt>
   116a0:	mov	r1, r0
   116a4:	mov	r0, #1
   116a8:	bl	110e4 <__printf_chk@plt>
   116ac:	mov	r0, #10
   116b0:	bl	110cc <putchar@plt>
   116b4:	mov	r2, #5
   116b8:	ldr	r1, [pc, #452]	; 11884 <__assert_fail@plt+0x6e0>
   116bc:	mov	r0, r6
   116c0:	bl	10f70 <dcgettext@plt>
   116c4:	mov	r1, r0
   116c8:	mov	r0, #1
   116cc:	bl	110e4 <__printf_chk@plt>
   116d0:	mov	r0, #10
   116d4:	bl	110cc <putchar@plt>
   116d8:	mov	r2, #5
   116dc:	ldr	r1, [pc, #420]	; 11888 <__assert_fail@plt+0x6e4>
   116e0:	mov	r0, r6
   116e4:	bl	10f70 <dcgettext@plt>
   116e8:	mov	r1, r0
   116ec:	mov	r0, #1
   116f0:	bl	110e4 <__printf_chk@plt>
   116f4:	mov	r0, #10
   116f8:	bl	110cc <putchar@plt>
   116fc:	mov	r2, #5
   11700:	ldr	r1, [pc, #388]	; 1188c <__assert_fail@plt+0x6e8>
   11704:	mov	r0, r6
   11708:	bl	10f70 <dcgettext@plt>
   1170c:	ldr	r3, [pc, #328]	; 1185c <__assert_fail@plt+0x6b8>
   11710:	ldr	r1, [r3]
   11714:	bl	11174 <fputs@plt>
   11718:	mov	r0, r6
   1171c:	bl	11054 <exit@plt>
   11720:	bl	11a6c <__assert_fail@plt+0x8c8>
   11724:	mov	r7, #1
   11728:	mov	r5, r0
   1172c:	b	11418 <__assert_fail@plt+0x274>
   11730:	str	r7, [sp, #12]
   11734:	b	11560 <__assert_fail@plt+0x3bc>
   11738:	ldr	sl, [r4, #4]
   1173c:	cmp	sl, r1
   11740:	beq	117a4 <__assert_fail@plt+0x600>
   11744:	ldr	r3, [r4]
   11748:	mov	fp, r2
   1174c:	str	r3, [sp, #8]
   11750:	b	11778 <__assert_fail@plt+0x5d4>
   11754:	add	r5, sl, fp
   11758:	ldr	r3, [sp, #8]
   1175c:	lsr	r5, r5, #1
   11760:	mov	r1, r9
   11764:	ldr	r0, [r3, r5, lsl #2]
   11768:	bl	10eec <strcmp@plt>
   1176c:	cmp	r0, #0
   11770:	movgt	sl, r5
   11774:	ble	117dc <__assert_fail@plt+0x638>
   11778:	sub	r1, sl, fp
   1177c:	cmp	r1, #1
   11780:	bhi	11754 <__assert_fail@plt+0x5b0>
   11784:	cmp	sl, fp
   11788:	bls	117a4 <__assert_fail@plt+0x600>
   1178c:	ldr	r3, [sp, #8]
   11790:	mov	r1, r9
   11794:	ldr	r0, [r3, fp, lsl #2]
   11798:	bl	10eec <strcmp@plt>
   1179c:	cmp	r0, #0
   117a0:	beq	11588 <__assert_fail@plt+0x3e4>
   117a4:	ldr	r1, [r6]
   117a8:	mov	r0, #36	; 0x24
   117ac:	bl	10fb8 <_IO_putc@plt>
   117b0:	cmp	r7, #0
   117b4:	beq	114ec <__assert_fail@plt+0x348>
   117b8:	b	114e0 <__assert_fail@plt+0x33c>
   117bc:	add	r3, r3, #5
   117c0:	ldr	r0, [r4, #24]
   117c4:	lsl	r3, r3, #1
   117c8:	mov	r1, r3
   117cc:	str	r3, [r4, #20]
   117d0:	bl	12f80 <__assert_fail@plt+0x1ddc>
   117d4:	str	r0, [r4, #24]
   117d8:	b	1156c <__assert_fail@plt+0x3c8>
   117dc:	beq	11588 <__assert_fail@plt+0x3e4>
   117e0:	add	fp, r5, #1
   117e4:	b	11778 <__assert_fail@plt+0x5d4>
   117e8:	mov	r2, #5
   117ec:	ldr	r1, [pc, #156]	; 11890 <__assert_fail@plt+0x6ec>
   117f0:	mov	r0, r5
   117f4:	bl	10f70 <dcgettext@plt>
   117f8:	mov	r1, r5
   117fc:	mov	r2, r0
   11800:	mov	r0, #1
   11804:	bl	10fe8 <error@plt>
   11808:	bl	1118c <abort@plt>
   1180c:	andeq	r5, r1, r8, asr r7
   11810:	andeq	r5, r1, r0, ror #10
   11814:	andeq	r5, r1, r4, ror r5
   11818:	andeq	r1, r1, ip, ror #22
   1181c:	strdeq	r5, [r1], -r4
   11820:	andeq	r5, r1, ip, lsr #11
   11824:	andeq	r6, r2, r8, lsr #2
   11828:	andeq	r5, r1, r4, lsl #11
   1182c:	andeq	r6, r2, ip, asr r1
   11830:	andeq	r6, r2, r0, lsr #2
   11834:	andeq	r5, r1, r4, lsr #21
   11838:	andeq	r1, r1, r8, lsr sl
   1183c:	andeq	r5, r1, r0, asr #11
   11840:			; <UNDEFINED> instruction: 0x000155b0
   11844:	andeq	r5, r1, ip, asr #11
   11848:	andeq	r5, r1, r4, asr #13
   1184c:	ldrdeq	r5, [r1], -r0
   11850:	andeq	r5, r1, r0, ror #13
   11854:	andeq	r6, r2, ip, lsr r1
   11858:	strdeq	r1, [r1], -r0
   1185c:	andeq	r6, r2, r4, lsr r1
   11860:	andeq	r6, r2, r0, lsr r1
   11864:	andeq	r1, r1, r0, ror #20
   11868:	strdeq	r5, [r1], -r0
   1186c:	andeq	r5, r1, r4, lsl r7
   11870:	andeq	r5, r1, r8, asr #14
   11874:	andeq	r5, r1, ip, asr r7
   11878:	andeq	r5, r1, ip, lsr #15
   1187c:	andeq	r5, r1, r4, asr #15
   11880:	andeq	r5, r1, r0, lsl #16
   11884:	andeq	r5, r1, r4, asr #16
   11888:	ldrdeq	r5, [r1], -r8
   1188c:	andeq	r5, r1, r8, ror sl
   11890:			; <UNDEFINED> instruction: 0x00015ab8
   11894:	mov	fp, #0
   11898:	mov	lr, #0
   1189c:	pop	{r1}		; (ldr r1, [sp], #4)
   118a0:	mov	r2, sp
   118a4:	push	{r2}		; (str r2, [sp, #-4]!)
   118a8:	push	{r0}		; (str r0, [sp, #-4]!)
   118ac:	ldr	ip, [pc, #16]	; 118c4 <__assert_fail@plt+0x720>
   118b0:	push	{ip}		; (str ip, [sp, #-4]!)
   118b4:	ldr	r0, [pc, #12]	; 118c8 <__assert_fail@plt+0x724>
   118b8:	ldr	r3, [pc, #12]	; 118cc <__assert_fail@plt+0x728>
   118bc:	bl	11024 <__libc_start_main@plt>
   118c0:	bl	1118c <abort@plt>
   118c4:	andeq	r5, r1, ip, asr #9
   118c8:			; <UNDEFINED> instruction: 0x000111b0
   118cc:	andeq	r5, r1, ip, ror #8
   118d0:	ldr	r3, [pc, #20]	; 118ec <__assert_fail@plt+0x748>
   118d4:	ldr	r2, [pc, #20]	; 118f0 <__assert_fail@plt+0x74c>
   118d8:	add	r3, pc, r3
   118dc:	ldr	r2, [r3, r2]
   118e0:	cmp	r2, #0
   118e4:	bxeq	lr
   118e8:	b	11030 <__gmon_start__@plt>
   118ec:	andeq	r4, r1, r0, lsr #14
   118f0:	andeq	r0, r0, r8, lsl #2
   118f4:	ldr	r0, [pc, #24]	; 11914 <__assert_fail@plt+0x770>
   118f8:	ldr	r3, [pc, #24]	; 11918 <__assert_fail@plt+0x774>
   118fc:	cmp	r3, r0
   11900:	bxeq	lr
   11904:	ldr	r3, [pc, #16]	; 1191c <__assert_fail@plt+0x778>
   11908:	cmp	r3, #0
   1190c:	bxeq	lr
   11910:	bx	r3
   11914:	andeq	r6, r2, r8, lsl r1
   11918:	andeq	r6, r2, r8, lsl r1
   1191c:	andeq	r0, r0, r0
   11920:	ldr	r0, [pc, #36]	; 1194c <__assert_fail@plt+0x7a8>
   11924:	ldr	r1, [pc, #36]	; 11950 <__assert_fail@plt+0x7ac>
   11928:	sub	r1, r1, r0
   1192c:	asr	r1, r1, #2
   11930:	add	r1, r1, r1, lsr #31
   11934:	asrs	r1, r1, #1
   11938:	bxeq	lr
   1193c:	ldr	r3, [pc, #16]	; 11954 <__assert_fail@plt+0x7b0>
   11940:	cmp	r3, #0
   11944:	bxeq	lr
   11948:	bx	r3
   1194c:	andeq	r6, r2, r8, lsl r1
   11950:	andeq	r6, r2, r8, lsl r1
   11954:	andeq	r0, r0, r0
   11958:	push	{r4, lr}
   1195c:	ldr	r4, [pc, #24]	; 1197c <__assert_fail@plt+0x7d8>
   11960:	ldrb	r3, [r4]
   11964:	cmp	r3, #0
   11968:	popne	{r4, pc}
   1196c:	bl	118f4 <__assert_fail@plt+0x750>
   11970:	mov	r3, #1
   11974:	strb	r3, [r4]
   11978:	pop	{r4, pc}
   1197c:	andeq	r6, r2, r8, lsr r1
   11980:	b	11920 <__assert_fail@plt+0x77c>
   11984:	push	{r4, r5, r6, lr}
   11988:	mov	r3, r0
   1198c:	mov	r5, r1
   11990:	mov	r1, r3
   11994:	ldrb	r2, [r3], #1
   11998:	cmp	r2, #0
   1199c:	popeq	{r4, r5, r6, pc}
   119a0:	cmp	r2, #36	; 0x24
   119a4:	mov	r0, r3
   119a8:	bne	11990 <__assert_fail@plt+0x7ec>
   119ac:	ldrb	r3, [r3]
   119b0:	cmp	r3, #123	; 0x7b
   119b4:	addeq	r0, r1, #2
   119b8:	ldrb	r2, [r0]
   119bc:	bic	r3, r2, #32
   119c0:	sub	r3, r3, #65	; 0x41
   119c4:	cmp	r2, #95	; 0x5f
   119c8:	cmpne	r3, #25
   119cc:	movhi	r3, r0
   119d0:	bhi	11990 <__assert_fail@plt+0x7ec>
   119d4:	mov	ip, r0
   119d8:	b	119e0 <__assert_fail@plt+0x83c>
   119dc:	mov	ip, r3
   119e0:	ldrb	r1, [ip, #1]
   119e4:	add	r3, ip, #1
   119e8:	bic	r2, r1, #32
   119ec:	sub	r2, r2, #65	; 0x41
   119f0:	cmp	r2, #25
   119f4:	sub	lr, r1, #48	; 0x30
   119f8:	bls	119dc <__assert_fail@plt+0x838>
   119fc:	cmp	r1, #95	; 0x5f
   11a00:	cmpne	lr, #9
   11a04:	bls	119dc <__assert_fail@plt+0x838>
   11a08:	ldrb	r2, [r0, #-1]
   11a0c:	cmp	r2, #123	; 0x7b
   11a10:	movne	r4, r3
   11a14:	beq	11a28 <__assert_fail@plt+0x884>
   11a18:	sub	r1, r3, r0
   11a1c:	blx	r5
   11a20:	mov	r3, r4
   11a24:	b	11990 <__assert_fail@plt+0x7ec>
   11a28:	cmp	r1, #125	; 0x7d
   11a2c:	addeq	r4, ip, #2
   11a30:	bne	11990 <__assert_fail@plt+0x7ec>
   11a34:	b	11a18 <__assert_fail@plt+0x874>
   11a38:	push	{r4, lr}
   11a3c:	mov	r2, #1
   11a40:	ldr	r4, [pc, #20]	; 11a5c <__assert_fail@plt+0x8b8>
   11a44:	ldr	r3, [r4]
   11a48:	bl	10fc4 <fwrite@plt>
   11a4c:	ldr	r1, [r4]
   11a50:	mov	r0, #10
   11a54:	pop	{r4, lr}
   11a58:	b	10fb8 <_IO_putc@plt>
   11a5c:	andeq	r6, r2, r4, lsr r1
   11a60:	ldr	r1, [r1]
   11a64:	ldr	r0, [r0]
   11a68:	b	10eec <strcmp@plt>
   11a6c:	push	{r4, r5, r6, lr}
   11a70:	ldr	r5, [pc, #108]	; 11ae4 <__assert_fail@plt+0x940>
   11a74:	ldr	r0, [r5]
   11a78:	bl	10f58 <_IO_getc@plt>
   11a7c:	cmn	r0, #1
   11a80:	mov	r4, r0
   11a84:	beq	11a90 <__assert_fail@plt+0x8ec>
   11a88:	mov	r0, r4
   11a8c:	pop	{r4, r5, r6, pc}
   11a90:	ldr	r0, [r5]
   11a94:	bl	10f34 <ferror@plt>
   11a98:	cmp	r0, #0
   11a9c:	beq	11a88 <__assert_fail@plt+0x8e4>
   11aa0:	bl	11090 <__errno_location@plt>
   11aa4:	mov	r2, #5
   11aa8:	ldr	r1, [pc, #56]	; 11ae8 <__assert_fail@plt+0x944>
   11aac:	ldr	r5, [r0]
   11ab0:	mov	r0, #0
   11ab4:	bl	10f70 <dcgettext@plt>
   11ab8:	mov	r2, #5
   11abc:	ldr	r1, [pc, #40]	; 11aec <__assert_fail@plt+0x948>
   11ac0:	mov	r6, r0
   11ac4:	mov	r0, #0
   11ac8:	bl	10f70 <dcgettext@plt>
   11acc:	mov	r2, r6
   11ad0:	mov	r1, r5
   11ad4:	mov	r3, r0
   11ad8:	mov	r0, #1
   11adc:	bl	10fe8 <error@plt>
   11ae0:	b	11a88 <__assert_fail@plt+0x8e4>
   11ae4:	andeq	r6, r2, r0, lsr r1
   11ae8:	andeq	r5, r1, r4, lsr r5
   11aec:	andeq	r5, r1, r0, asr r5
   11af0:	push	{r4, r5, r6, r7, r8, lr}
   11af4:	mov	r7, r0
   11af8:	add	r0, r1, #1
   11afc:	mov	r5, r1
   11b00:	bl	12ef0 <__assert_fail@plt+0x1d4c>
   11b04:	ldr	r4, [pc, #92]	; 11b68 <__assert_fail@plt+0x9c4>
   11b08:	mov	r1, r7
   11b0c:	mov	r2, r5
   11b10:	mov	r6, r0
   11b14:	bl	10f40 <memcpy@plt>
   11b18:	mov	r3, #0
   11b1c:	strb	r3, [r6, r5]
   11b20:	ldr	r3, [r4, #4]
   11b24:	ldr	r1, [r4, #8]
   11b28:	cmp	r3, r1
   11b2c:	bcs	11b44 <__assert_fail@plt+0x9a0>
   11b30:	ldr	r0, [r4]
   11b34:	add	r2, r3, #1
   11b38:	str	r2, [r4, #4]
   11b3c:	str	r6, [r0, r3, lsl #2]
   11b40:	pop	{r4, r5, r6, r7, r8, pc}
   11b44:	add	r1, r1, #2
   11b48:	ldr	r0, [r4]
   11b4c:	lsl	r3, r1, #1
   11b50:	lsl	r1, r1, #3
   11b54:	str	r3, [r4, #8]
   11b58:	bl	12f80 <__assert_fail@plt+0x1ddc>
   11b5c:	ldr	r3, [r4, #4]
   11b60:	str	r0, [r4]
   11b64:	b	11b34 <__assert_fail@plt+0x990>
   11b68:	andeq	r6, r2, ip, lsr r1
   11b6c:	ldr	r3, [pc, #168]	; 11c1c <__assert_fail@plt+0xa78>
   11b70:	push	{r4, r5, r6, lr}
   11b74:	ldr	r0, [r3]
   11b78:	bl	11d50 <__assert_fail@plt+0xbac>
   11b7c:	mov	r4, r0
   11b80:	bl	11090 <__errno_location@plt>
   11b84:	cmp	r4, #0
   11b88:	mov	r5, r0
   11b8c:	bne	11be0 <__assert_fail@plt+0xa3c>
   11b90:	ldr	r4, [pc, #136]	; 11c20 <__assert_fail@plt+0xa7c>
   11b94:	mov	r3, #0
   11b98:	str	r3, [r5]
   11b9c:	ldr	r0, [r4]
   11ba0:	bl	10f34 <ferror@plt>
   11ba4:	cmp	r0, #0
   11ba8:	bne	11c0c <__assert_fail@plt+0xa68>
   11bac:	ldr	r0, [r4]
   11bb0:	bl	10f04 <fflush@plt>
   11bb4:	cmp	r0, #0
   11bb8:	bne	11c0c <__assert_fail@plt+0xa68>
   11bbc:	ldr	r0, [r4]
   11bc0:	bl	11108 <fclose@plt>
   11bc4:	cmp	r0, #0
   11bc8:	popeq	{r4, r5, r6, pc}
   11bcc:	ldr	r3, [r5]
   11bd0:	cmp	r3, #9
   11bd4:	popeq	{r4, r5, r6, pc}
   11bd8:	mov	r0, #1
   11bdc:	bl	11054 <exit@plt>
   11be0:	ldr	r4, [r0]
   11be4:	mov	r2, #5
   11be8:	ldr	r1, [pc, #52]	; 11c24 <__assert_fail@plt+0xa80>
   11bec:	mov	r0, #0
   11bf0:	bl	10f70 <dcgettext@plt>
   11bf4:	mov	r1, r4
   11bf8:	ldr	r2, [pc, #40]	; 11c28 <__assert_fail@plt+0xa84>
   11bfc:	mov	r3, r0
   11c00:	mov	r0, #1
   11c04:	bl	10fe8 <error@plt>
   11c08:	b	11b90 <__assert_fail@plt+0x9ec>
   11c0c:	ldr	r0, [r4]
   11c10:	bl	11108 <fclose@plt>
   11c14:	mov	r0, #1
   11c18:	bl	11054 <exit@plt>
   11c1c:	andeq	r6, r2, r4, lsr r1
   11c20:	andeq	r6, r2, r8, lsr #2
   11c24:	andeq	r5, r1, r8, ror #21
   11c28:	strdeq	r5, [r1], -r4
   11c2c:	ldr	r3, [pc, #268]	; 11d40 <__assert_fail@plt+0xb9c>
   11c30:	push	{r4, r5, r6, r7, r8, lr}
   11c34:	ldr	r3, [r3]
   11c38:	cmp	r3, r0
   11c3c:	beq	11cb8 <__assert_fail@plt+0xb14>
   11c40:	mov	r4, r0
   11c44:	mov	r5, r1
   11c48:	bl	11090 <__errno_location@plt>
   11c4c:	mov	r3, #0
   11c50:	str	r3, [r0]
   11c54:	mov	r6, r0
   11c58:	mov	r0, r4
   11c5c:	bl	10f34 <ferror@plt>
   11c60:	cmp	r0, #0
   11c64:	mov	r0, r4
   11c68:	bne	11cd4 <__assert_fail@plt+0xb30>
   11c6c:	cmp	r5, #0
   11c70:	beq	11ca0 <__assert_fail@plt+0xafc>
   11c74:	bl	10f04 <fflush@plt>
   11c78:	cmp	r0, #0
   11c7c:	beq	11d0c <__assert_fail@plt+0xb68>
   11c80:	ldr	r7, [r6]
   11c84:	subs	r5, r7, #32
   11c88:	mvnne	r5, #0
   11c8c:	mov	r0, r4
   11c90:	bl	11108 <fclose@plt>
   11c94:	str	r7, [r6]
   11c98:	mov	r0, r5
   11c9c:	pop	{r4, r5, r6, r7, r8, pc}
   11ca0:	bl	11108 <fclose@plt>
   11ca4:	cmp	r0, #0
   11ca8:	bne	11d2c <__assert_fail@plt+0xb88>
   11cac:	mov	r5, #0
   11cb0:	mov	r0, r5
   11cb4:	pop	{r4, r5, r6, r7, r8, pc}
   11cb8:	ldr	r3, [pc, #132]	; 11d44 <__assert_fail@plt+0xba0>
   11cbc:	ldrb	r2, [r3]
   11cc0:	cmp	r2, #0
   11cc4:	moveq	r2, #1
   11cc8:	strbeq	r2, [r3]
   11ccc:	beq	11c40 <__assert_fail@plt+0xa9c>
   11cd0:	b	11cac <__assert_fail@plt+0xb08>
   11cd4:	bl	10f04 <fflush@plt>
   11cd8:	cmp	r0, #0
   11cdc:	bne	11c80 <__assert_fail@plt+0xadc>
   11ce0:	mov	r1, r4
   11ce4:	bl	11150 <fputc@plt>
   11ce8:	cmn	r0, #1
   11cec:	beq	11c80 <__assert_fail@plt+0xadc>
   11cf0:	mov	r0, r4
   11cf4:	bl	10f04 <fflush@plt>
   11cf8:	subs	r7, r0, #0
   11cfc:	streq	r7, [r6]
   11d00:	mvneq	r5, #0
   11d04:	beq	11c8c <__assert_fail@plt+0xae8>
   11d08:	b	11c80 <__assert_fail@plt+0xadc>
   11d0c:	mov	r0, r4
   11d10:	bl	11108 <fclose@plt>
   11d14:	cmp	r0, #0
   11d18:	beq	11cac <__assert_fail@plt+0xb08>
   11d1c:	ldr	r5, [r6]
   11d20:	cmp	r5, #9
   11d24:	beq	11cac <__assert_fail@plt+0xb08>
   11d28:	b	11d30 <__assert_fail@plt+0xb8c>
   11d2c:	ldr	r5, [r6]
   11d30:	subs	r5, r5, #32
   11d34:	mvnne	r5, #0
   11d38:	mov	r0, r5
   11d3c:	pop	{r4, r5, r6, r7, r8, pc}
   11d40:	andeq	r6, r2, r4, lsr r1
   11d44:	andeq	r6, r2, r8, asr r1
   11d48:	mov	r1, #0
   11d4c:	b	11c2c <__assert_fail@plt+0xa88>
   11d50:	mov	r1, #1
   11d54:	b	11c2c <__assert_fail@plt+0xa88>
   11d58:	push	{r4, r5, r6, lr}
   11d5c:	subs	r4, r0, #0
   11d60:	beq	11dd4 <__assert_fail@plt+0xc30>
   11d64:	mov	r1, #47	; 0x2f
   11d68:	bl	11138 <strrchr@plt>
   11d6c:	subs	r5, r0, #0
   11d70:	beq	11dc0 <__assert_fail@plt+0xc1c>
   11d74:	add	r6, r5, #1
   11d78:	sub	r3, r6, r4
   11d7c:	cmp	r3, #6
   11d80:	ble	11dc0 <__assert_fail@plt+0xc1c>
   11d84:	mov	r2, #7
   11d88:	ldr	r1, [pc, #96]	; 11df0 <__assert_fail@plt+0xc4c>
   11d8c:	sub	r0, r5, #6
   11d90:	bl	11180 <strncmp@plt>
   11d94:	cmp	r0, #0
   11d98:	bne	11dc0 <__assert_fail@plt+0xc1c>
   11d9c:	mov	r2, #3
   11da0:	ldr	r1, [pc, #76]	; 11df4 <__assert_fail@plt+0xc50>
   11da4:	mov	r0, r6
   11da8:	bl	11180 <strncmp@plt>
   11dac:	cmp	r0, #0
   11db0:	movne	r4, r6
   11db4:	ldreq	r3, [pc, #60]	; 11df8 <__assert_fail@plt+0xc54>
   11db8:	addeq	r4, r5, #4
   11dbc:	streq	r4, [r3]
   11dc0:	ldr	r2, [pc, #52]	; 11dfc <__assert_fail@plt+0xc58>
   11dc4:	ldr	r3, [pc, #52]	; 11e00 <__assert_fail@plt+0xc5c>
   11dc8:	str	r4, [r2]
   11dcc:	str	r4, [r3]
   11dd0:	pop	{r4, r5, r6, pc}
   11dd4:	ldr	r3, [pc, #40]	; 11e04 <__assert_fail@plt+0xc60>
   11dd8:	mov	r2, #55	; 0x37
   11ddc:	mov	r1, #1
   11de0:	ldr	r3, [r3]
   11de4:	ldr	r0, [pc, #28]	; 11e08 <__assert_fail@plt+0xc64>
   11de8:	bl	10fc4 <fwrite@plt>
   11dec:	bl	1118c <abort@plt>
   11df0:	andeq	r5, r1, r0, lsr fp
   11df4:	andeq	r5, r1, r8, lsr fp
   11df8:	andeq	r6, r2, r8, lsl r1
   11dfc:	andeq	r6, r2, ip, asr r1
   11e00:	andeq	r6, r2, ip, lsl r1
   11e04:	andeq	r6, r2, r8, lsr #2
   11e08:	strdeq	r5, [r1], -r8
   11e0c:	push	{r4, lr}
   11e10:	mov	r2, #179	; 0xb3
   11e14:	ldr	r3, [pc, #8]	; 11e24 <__assert_fail@plt+0xc80>
   11e18:	ldr	r1, [pc, #8]	; 11e28 <__assert_fail@plt+0xc84>
   11e1c:	ldr	r0, [pc, #8]	; 11e2c <__assert_fail@plt+0xc88>
   11e20:	bl	111a4 <__assert_fail@plt>
   11e24:	andeq	r5, r1, ip, lsr fp
   11e28:	andeq	r5, r1, r0, asr fp
   11e2c:	andeq	r5, r1, ip, asr fp
   11e30:	ldr	r3, [pc, #1976]	; 125f0 <__assert_fail@plt+0x144c>
   11e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e38:	sub	sp, sp, #124	; 0x7c
   11e3c:	ldr	r3, [r3]
   11e40:	mov	r4, r0
   11e44:	mov	r0, r1
   11e48:	mov	r1, #2
   11e4c:	str	r3, [sp, #116]	; 0x74
   11e50:	bl	1299c <__assert_fail@plt+0x17f8>
   11e54:	ldr	r8, [pc, #1944]	; 125f4 <__assert_fail@plt+0x1450>
   11e58:	mov	r6, #0
   11e5c:	mov	sl, r0
   11e60:	ldrb	r3, [r4]
   11e64:	cmp	r3, #0
   11e68:	beq	11efc <__assert_fail@plt+0xd58>
   11e6c:	mov	r1, sl
   11e70:	mov	r0, r4
   11e74:	bl	13fe4 <__assert_fail@plt+0x2e40>
   11e78:	subs	r9, r0, #0
   11e7c:	beq	11efc <__assert_fail@plt+0xd58>
   11e80:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   11e84:	cmp	r0, #1
   11e88:	bhi	11f28 <__assert_fail@plt+0xd84>
   11e8c:	mov	r0, sl
   11e90:	bl	1106c <strlen@plt>
   11e94:	cmp	r4, r9
   11e98:	mov	r5, r0
   11e9c:	bcs	11ebc <__assert_fail@plt+0xd18>
   11ea0:	bl	11048 <__ctype_b_loc@plt>
   11ea4:	ldrb	r3, [r9, #-1]
   11ea8:	lsl	r3, r3, #1
   11eac:	ldr	r2, [r0]
   11eb0:	ldrh	r3, [r2, r3]
   11eb4:	tst	r3, #8
   11eb8:	bne	11ee0 <__assert_fail@plt+0xd3c>
   11ebc:	ldrb	r4, [r9, r5]
   11ec0:	cmp	r4, #0
   11ec4:	beq	125bc <__assert_fail@plt+0x1418>
   11ec8:	bl	11048 <__ctype_b_loc@plt>
   11ecc:	lsl	r4, r4, #1
   11ed0:	ldr	r3, [r0]
   11ed4:	ldrh	r3, [r3, r4]
   11ed8:	tst	r3, #8
   11edc:	beq	125bc <__assert_fail@plt+0x1418>
   11ee0:	ldrb	r3, [r9]
   11ee4:	cmp	r3, #0
   11ee8:	beq	11efc <__assert_fail@plt+0xd58>
   11eec:	add	r4, r9, #1
   11ef0:	ldrb	r3, [r4]
   11ef4:	cmp	r3, #0
   11ef8:	bne	11e6c <__assert_fail@plt+0xcc8>
   11efc:	mov	fp, #0
   11f00:	mov	r0, sl
   11f04:	bl	10f28 <free@plt>
   11f08:	ldr	r3, [pc, #1760]	; 125f0 <__assert_fail@plt+0x144c>
   11f0c:	ldr	r2, [sp, #116]	; 0x74
   11f10:	mov	r0, fp
   11f14:	ldr	r3, [r3]
   11f18:	cmp	r2, r3
   11f1c:	bne	125ec <__assert_fail@plt+0x1448>
   11f20:	add	sp, sp, #124	; 0x7c
   11f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f28:	cmp	r4, r9
   11f2c:	str	r4, [sp, #20]
   11f30:	strb	r6, [sp, #4]
   11f34:	str	r6, [sp, #8]
   11f38:	strb	r6, [sp, #16]
   11f3c:	str	r6, [sp, #12]
   11f40:	movcc	r5, #1
   11f44:	bcc	11fa4 <__assert_fail@plt+0xe00>
   11f48:	b	12410 <__assert_fail@plt+0x126c>
   11f4c:	ldrb	r3, [r4]
   11f50:	and	r2, r3, #31
   11f54:	lsr	r3, r3, #5
   11f58:	ldr	r3, [r8, r3, lsl #2]
   11f5c:	lsr	r3, r3, r2
   11f60:	tst	r3, #1
   11f64:	beq	12034 <__assert_fail@plt+0xe90>
   11f68:	str	r5, [sp, #24]
   11f6c:	ldrb	r7, [r4]
   11f70:	strb	r5, [sp, #28]
   11f74:	strb	r5, [sp, #16]
   11f78:	cmp	r7, #0
   11f7c:	str	r7, [sp, #32]
   11f80:	beq	12030 <__assert_fail@plt+0xe8c>
   11f84:	ldr	r4, [sp, #20]
   11f88:	ldr	r3, [sp, #24]
   11f8c:	strb	r6, [sp, #16]
   11f90:	add	r4, r4, r3
   11f94:	cmp	r4, r9
   11f98:	str	r4, [sp, #20]
   11f9c:	ldrb	r3, [sp, #28]
   11fa0:	bcs	12084 <__assert_fail@plt+0xee0>
   11fa4:	ldrb	r3, [sp, #4]
   11fa8:	cmp	r3, #0
   11fac:	beq	11f4c <__assert_fail@plt+0xda8>
   11fb0:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   11fb4:	mov	r1, r0
   11fb8:	mov	r0, r4
   11fbc:	bl	1294c <__assert_fail@plt+0x17a8>
   11fc0:	add	r3, sp, #8
   11fc4:	mov	r1, r4
   11fc8:	mov	r2, r0
   11fcc:	add	r0, sp, #32
   11fd0:	bl	13048 <__assert_fail@plt+0x1ea4>
   11fd4:	cmn	r0, #1
   11fd8:	str	r0, [sp, #24]
   11fdc:	beq	1204c <__assert_fail@plt+0xea8>
   11fe0:	cmn	r0, #2
   11fe4:	beq	12060 <__assert_fail@plt+0xebc>
   11fe8:	cmp	r0, #0
   11fec:	bne	1207c <__assert_fail@plt+0xed8>
   11ff0:	ldr	r4, [sp, #20]
   11ff4:	str	r5, [sp, #24]
   11ff8:	ldrb	r3, [r4]
   11ffc:	cmp	r3, #0
   12000:	bne	125d8 <__assert_fail@plt+0x1434>
   12004:	ldr	r7, [sp, #32]
   12008:	cmp	r7, #0
   1200c:	bne	123c0 <__assert_fail@plt+0x121c>
   12010:	add	r0, sp, #8
   12014:	strb	r5, [sp, #28]
   12018:	bl	10f4c <mbsinit@plt>
   1201c:	strb	r5, [sp, #16]
   12020:	cmp	r0, #0
   12024:	strbne	r6, [sp, #4]
   12028:	cmp	r7, #0
   1202c:	bne	11f84 <__assert_fail@plt+0xde0>
   12030:	bl	1118c <abort@plt>
   12034:	add	r0, sp, #8
   12038:	bl	10f4c <mbsinit@plt>
   1203c:	cmp	r0, #0
   12040:	beq	125c4 <__assert_fail@plt+0x1420>
   12044:	strb	r5, [sp, #4]
   12048:	b	11fb0 <__assert_fail@plt+0xe0c>
   1204c:	str	r5, [sp, #24]
   12050:	strb	r6, [sp, #28]
   12054:	ldr	r7, [sp, #32]
   12058:	ldr	r4, [sp, #20]
   1205c:	b	11f88 <__assert_fail@plt+0xde4>
   12060:	ldr	r4, [sp, #20]
   12064:	mov	r0, r4
   12068:	bl	1106c <strlen@plt>
   1206c:	strb	r6, [sp, #28]
   12070:	ldr	r7, [sp, #32]
   12074:	str	r0, [sp, #24]
   12078:	b	11f88 <__assert_fail@plt+0xde4>
   1207c:	ldr	r7, [sp, #32]
   12080:	b	12010 <__assert_fail@plt+0xe6c>
   12084:	cmp	r3, #0
   12088:	beq	12410 <__assert_fail@plt+0x126c>
   1208c:	mov	r0, r7
   12090:	bl	1109c <iswalnum@plt>
   12094:	clz	fp, r0
   12098:	lsr	fp, fp, #5
   1209c:	str	r9, [sp, #20]
   120a0:	strb	r6, [sp, #4]
   120a4:	str	r6, [sp, #8]
   120a8:	str	r6, [sp, #12]
   120ac:	strb	r6, [sp, #16]
   120b0:	str	sl, [sp, #76]	; 0x4c
   120b4:	strb	r6, [sp, #60]	; 0x3c
   120b8:	str	r6, [sp, #64]	; 0x40
   120bc:	strb	r6, [sp, #72]	; 0x48
   120c0:	str	r6, [sp, #68]	; 0x44
   120c4:	mov	r5, sl
   120c8:	mov	r7, #1
   120cc:	b	12184 <__assert_fail@plt+0xfe0>
   120d0:	ldrb	r3, [r5]
   120d4:	and	r2, r3, #31
   120d8:	lsr	r3, r3, #5
   120dc:	ldr	r3, [r8, r3, lsl #2]
   120e0:	lsr	r3, r3, r2
   120e4:	tst	r3, #1
   120e8:	beq	12360 <__assert_fail@plt+0x11bc>
   120ec:	str	r7, [sp, #80]	; 0x50
   120f0:	ldrb	r4, [r5]
   120f4:	strb	r7, [sp, #84]	; 0x54
   120f8:	strb	r7, [sp, #72]	; 0x48
   120fc:	cmp	r4, #0
   12100:	str	r4, [sp, #88]	; 0x58
   12104:	beq	12200 <__assert_fail@plt+0x105c>
   12108:	ldrb	r3, [sp, #16]
   1210c:	cmp	r3, #0
   12110:	bne	1234c <__assert_fail@plt+0x11a8>
   12114:	ldrb	r3, [sp, #4]
   12118:	ldr	r4, [sp, #20]
   1211c:	cmp	r3, #0
   12120:	bne	122ec <__assert_fail@plt+0x1148>
   12124:	ldrb	r3, [r4]
   12128:	and	r2, r3, #31
   1212c:	lsr	r3, r3, #5
   12130:	ldr	r3, [r8, r3, lsl #2]
   12134:	lsr	r3, r3, r2
   12138:	tst	r3, #1
   1213c:	beq	122d8 <__assert_fail@plt+0x1134>
   12140:	str	r7, [sp, #24]
   12144:	ldrb	r4, [r4]
   12148:	strb	r7, [sp, #28]
   1214c:	strb	r7, [sp, #16]
   12150:	str	r4, [sp, #32]
   12154:	cmp	r4, #0
   12158:	beq	12030 <__assert_fail@plt+0xe8c>
   1215c:	ldr	r4, [sp, #20]
   12160:	ldr	r5, [sp, #76]	; 0x4c
   12164:	ldr	r3, [sp, #24]
   12168:	ldr	r2, [sp, #80]	; 0x50
   1216c:	add	r4, r4, r3
   12170:	add	r5, r5, r2
   12174:	strb	r6, [sp, #16]
   12178:	strb	r6, [sp, #72]	; 0x48
   1217c:	str	r4, [sp, #20]
   12180:	str	r5, [sp, #76]	; 0x4c
   12184:	ldrb	r3, [sp, #60]	; 0x3c
   12188:	cmp	r3, #0
   1218c:	beq	120d0 <__assert_fail@plt+0xf2c>
   12190:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   12194:	mov	r1, r0
   12198:	mov	r0, r5
   1219c:	bl	1294c <__assert_fail@plt+0x17a8>
   121a0:	add	r3, sp, #64	; 0x40
   121a4:	mov	r1, r5
   121a8:	mov	r2, r0
   121ac:	add	r0, sp, #88	; 0x58
   121b0:	bl	13048 <__assert_fail@plt+0x1ea4>
   121b4:	cmn	r0, #1
   121b8:	str	r0, [sp, #80]	; 0x50
   121bc:	strbeq	r6, [sp, #84]	; 0x54
   121c0:	streq	r7, [sp, #80]	; 0x50
   121c4:	strbeq	r7, [sp, #72]	; 0x48
   121c8:	beq	12108 <__assert_fail@plt+0xf64>
   121cc:	cmn	r0, #2
   121d0:	beq	12388 <__assert_fail@plt+0x11e4>
   121d4:	cmp	r0, #0
   121d8:	beq	123a0 <__assert_fail@plt+0x11fc>
   121dc:	ldr	r4, [sp, #88]	; 0x58
   121e0:	add	r0, sp, #64	; 0x40
   121e4:	strb	r7, [sp, #84]	; 0x54
   121e8:	bl	10f4c <mbsinit@plt>
   121ec:	strb	r7, [sp, #72]	; 0x48
   121f0:	cmp	r0, #0
   121f4:	strbne	r6, [sp, #60]	; 0x3c
   121f8:	cmp	r4, #0
   121fc:	bne	12108 <__assert_fail@plt+0xf64>
   12200:	ldrb	r3, [sp, #16]
   12204:	cmp	r3, #0
   12208:	bne	12498 <__assert_fail@plt+0x12f4>
   1220c:	ldrb	r3, [sp, #4]
   12210:	ldr	r4, [sp, #20]
   12214:	cmp	r3, #0
   12218:	bne	12430 <__assert_fail@plt+0x128c>
   1221c:	ldrb	r3, [r4]
   12220:	and	r2, r3, #31
   12224:	lsr	r3, r3, #5
   12228:	ldr	r3, [r8, r3, lsl #2]
   1222c:	lsr	r3, r3, r2
   12230:	tst	r3, #1
   12234:	beq	12418 <__assert_fail@plt+0x1274>
   12238:	mov	r3, #1
   1223c:	str	r3, [sp, #24]
   12240:	ldrb	r4, [r4]
   12244:	strb	r3, [sp, #28]
   12248:	strb	r3, [sp, #16]
   1224c:	str	r4, [sp, #32]
   12250:	cmp	r4, #0
   12254:	beq	12274 <__assert_fail@plt+0x10d0>
   12258:	ldrb	r3, [sp, #28]
   1225c:	cmp	r3, #0
   12260:	beq	12274 <__assert_fail@plt+0x10d0>
   12264:	mov	r0, r4
   12268:	bl	1109c <iswalnum@plt>
   1226c:	cmp	r0, #0
   12270:	bne	1227c <__assert_fail@plt+0x10d8>
   12274:	cmp	fp, #0
   12278:	bne	11f00 <__assert_fail@plt+0xd5c>
   1227c:	str	r9, [sp, #20]
   12280:	strb	r6, [sp, #4]
   12284:	str	r6, [sp, #8]
   12288:	str	r6, [sp, #12]
   1228c:	strb	r6, [sp, #16]
   12290:	ldrb	r3, [r9]
   12294:	and	r2, r3, #31
   12298:	lsr	r3, r3, #5
   1229c:	ldr	r3, [r8, r3, lsl #2]
   122a0:	lsr	r3, r3, r2
   122a4:	tst	r3, #1
   122a8:	beq	124ac <__assert_fail@plt+0x1308>
   122ac:	mov	r3, #1
   122b0:	str	r3, [sp, #24]
   122b4:	ldrb	r4, [r9]
   122b8:	strb	r3, [sp, #28]
   122bc:	strb	r3, [sp, #16]
   122c0:	str	r4, [sp, #32]
   122c4:	cmp	r4, #0
   122c8:	beq	11efc <__assert_fail@plt+0xd58>
   122cc:	ldr	r4, [sp, #24]
   122d0:	add	r4, r9, r4
   122d4:	b	11e60 <__assert_fail@plt+0xcbc>
   122d8:	add	r0, sp, #8
   122dc:	bl	10f4c <mbsinit@plt>
   122e0:	cmp	r0, #0
   122e4:	beq	125c4 <__assert_fail@plt+0x1420>
   122e8:	strb	r7, [sp, #4]
   122ec:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   122f0:	mov	r1, r0
   122f4:	mov	r0, r4
   122f8:	bl	1294c <__assert_fail@plt+0x17a8>
   122fc:	add	r3, sp, #8
   12300:	mov	r1, r4
   12304:	mov	r2, r0
   12308:	add	r0, sp, #32
   1230c:	bl	13048 <__assert_fail@plt+0x1ea4>
   12310:	cmn	r0, #1
   12314:	str	r0, [sp, #24]
   12318:	beq	12378 <__assert_fail@plt+0x11d4>
   1231c:	cmn	r0, #2
   12320:	beq	123d4 <__assert_fail@plt+0x1230>
   12324:	cmp	r0, #0
   12328:	beq	123ec <__assert_fail@plt+0x1248>
   1232c:	ldr	r4, [sp, #32]
   12330:	add	r0, sp, #8
   12334:	strb	r7, [sp, #28]
   12338:	bl	10f4c <mbsinit@plt>
   1233c:	strb	r7, [sp, #16]
   12340:	cmp	r0, #0
   12344:	strbne	r6, [sp, #4]
   12348:	b	12154 <__assert_fail@plt+0xfb0>
   1234c:	ldrb	r3, [sp, #28]
   12350:	cmp	r3, #0
   12354:	ldrne	r4, [sp, #32]
   12358:	beq	1215c <__assert_fail@plt+0xfb8>
   1235c:	b	12154 <__assert_fail@plt+0xfb0>
   12360:	add	r0, sp, #64	; 0x40
   12364:	bl	10f4c <mbsinit@plt>
   12368:	cmp	r0, #0
   1236c:	beq	125c4 <__assert_fail@plt+0x1420>
   12370:	strb	r7, [sp, #60]	; 0x3c
   12374:	b	12190 <__assert_fail@plt+0xfec>
   12378:	str	r7, [sp, #24]
   1237c:	strb	r6, [sp, #28]
   12380:	ldr	r4, [sp, #20]
   12384:	b	12160 <__assert_fail@plt+0xfbc>
   12388:	ldr	r0, [sp, #76]	; 0x4c
   1238c:	bl	1106c <strlen@plt>
   12390:	strb	r6, [sp, #84]	; 0x54
   12394:	strb	r7, [sp, #72]	; 0x48
   12398:	str	r0, [sp, #80]	; 0x50
   1239c:	b	12108 <__assert_fail@plt+0xf64>
   123a0:	ldr	r3, [sp, #76]	; 0x4c
   123a4:	str	r7, [sp, #80]	; 0x50
   123a8:	ldrb	r3, [r3]
   123ac:	cmp	r3, #0
   123b0:	bne	125d8 <__assert_fail@plt+0x1434>
   123b4:	ldr	r4, [sp, #88]	; 0x58
   123b8:	cmp	r4, #0
   123bc:	beq	121e0 <__assert_fail@plt+0x103c>
   123c0:	ldr	r3, [pc, #560]	; 125f8 <__assert_fail@plt+0x1454>
   123c4:	mov	r2, #179	; 0xb3
   123c8:	ldr	r1, [pc, #556]	; 125fc <__assert_fail@plt+0x1458>
   123cc:	ldr	r0, [pc, #556]	; 12600 <__assert_fail@plt+0x145c>
   123d0:	bl	111a4 <__assert_fail@plt>
   123d4:	ldr	r4, [sp, #20]
   123d8:	mov	r0, r4
   123dc:	bl	1106c <strlen@plt>
   123e0:	strb	r6, [sp, #28]
   123e4:	str	r0, [sp, #24]
   123e8:	b	12160 <__assert_fail@plt+0xfbc>
   123ec:	ldr	r4, [sp, #20]
   123f0:	str	r7, [sp, #24]
   123f4:	ldrb	r3, [r4]
   123f8:	cmp	r3, #0
   123fc:	bne	125d8 <__assert_fail@plt+0x1434>
   12400:	ldr	r4, [sp, #32]
   12404:	cmp	r4, #0
   12408:	beq	12330 <__assert_fail@plt+0x118c>
   1240c:	b	123c0 <__assert_fail@plt+0x121c>
   12410:	mov	fp, #1
   12414:	b	1209c <__assert_fail@plt+0xef8>
   12418:	add	r0, sp, #8
   1241c:	bl	10f4c <mbsinit@plt>
   12420:	cmp	r0, #0
   12424:	beq	125c4 <__assert_fail@plt+0x1420>
   12428:	mov	r3, #1
   1242c:	strb	r3, [sp, #4]
   12430:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   12434:	mov	r1, r0
   12438:	mov	r0, r4
   1243c:	bl	1294c <__assert_fail@plt+0x17a8>
   12440:	add	r3, sp, #8
   12444:	mov	r1, r4
   12448:	mov	r2, r0
   1244c:	add	r0, sp, #32
   12450:	bl	13048 <__assert_fail@plt+0x1ea4>
   12454:	cmn	r0, #1
   12458:	str	r0, [sp, #24]
   1245c:	beq	1252c <__assert_fail@plt+0x1388>
   12460:	cmn	r0, #2
   12464:	beq	1259c <__assert_fail@plt+0x13f8>
   12468:	cmp	r0, #0
   1246c:	bne	12568 <__assert_fail@plt+0x13c4>
   12470:	ldr	r3, [sp, #20]
   12474:	mov	r2, #1
   12478:	str	r2, [sp, #24]
   1247c:	ldrb	r3, [r3]
   12480:	cmp	r3, #0
   12484:	bne	125d8 <__assert_fail@plt+0x1434>
   12488:	ldr	r4, [sp, #32]
   1248c:	cmp	r4, #0
   12490:	beq	1256c <__assert_fail@plt+0x13c8>
   12494:	bl	11e0c <__assert_fail@plt+0xc68>
   12498:	ldrb	r3, [sp, #28]
   1249c:	ldr	r4, [sp, #32]
   124a0:	cmp	r3, #0
   124a4:	beq	12258 <__assert_fail@plt+0x10b4>
   124a8:	b	12250 <__assert_fail@plt+0x10ac>
   124ac:	add	r0, sp, #8
   124b0:	bl	10f4c <mbsinit@plt>
   124b4:	cmp	r0, #0
   124b8:	beq	125c4 <__assert_fail@plt+0x1420>
   124bc:	mov	r4, #1
   124c0:	strb	r4, [sp, #4]
   124c4:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   124c8:	mov	r1, r0
   124cc:	mov	r0, r9
   124d0:	bl	1294c <__assert_fail@plt+0x17a8>
   124d4:	add	r3, sp, #8
   124d8:	mov	r1, r9
   124dc:	mov	r2, r0
   124e0:	add	r0, sp, #32
   124e4:	bl	13048 <__assert_fail@plt+0x1ea4>
   124e8:	cmn	r0, #1
   124ec:	str	r0, [sp, #24]
   124f0:	streq	r4, [sp, #24]
   124f4:	beq	122cc <__assert_fail@plt+0x1128>
   124f8:	cmn	r0, #2
   124fc:	beq	1258c <__assert_fail@plt+0x13e8>
   12500:	cmp	r0, #0
   12504:	bne	12544 <__assert_fail@plt+0x13a0>
   12508:	ldr	r3, [sp, #20]
   1250c:	str	r4, [sp, #24]
   12510:	ldrb	r3, [r3]
   12514:	cmp	r3, #0
   12518:	bne	125d8 <__assert_fail@plt+0x1434>
   1251c:	ldr	r4, [sp, #32]
   12520:	cmp	r4, #0
   12524:	beq	12548 <__assert_fail@plt+0x13a4>
   12528:	b	12494 <__assert_fail@plt+0x12f0>
   1252c:	mov	r3, #1
   12530:	strb	r6, [sp, #28]
   12534:	str	r3, [sp, #24]
   12538:	strb	r3, [sp, #16]
   1253c:	ldr	r4, [sp, #32]
   12540:	b	12258 <__assert_fail@plt+0x10b4>
   12544:	ldr	r4, [sp, #32]
   12548:	mov	r5, #1
   1254c:	add	r0, sp, #8
   12550:	strb	r5, [sp, #28]
   12554:	bl	10f4c <mbsinit@plt>
   12558:	strb	r5, [sp, #16]
   1255c:	cmp	r0, #0
   12560:	strbne	r6, [sp, #4]
   12564:	b	122c4 <__assert_fail@plt+0x1120>
   12568:	ldr	r4, [sp, #32]
   1256c:	mov	r5, #1
   12570:	add	r0, sp, #8
   12574:	strb	r5, [sp, #28]
   12578:	bl	10f4c <mbsinit@plt>
   1257c:	strb	r5, [sp, #16]
   12580:	cmp	r0, #0
   12584:	strbne	r6, [sp, #4]
   12588:	b	12250 <__assert_fail@plt+0x10ac>
   1258c:	ldr	r0, [sp, #20]
   12590:	bl	1106c <strlen@plt>
   12594:	str	r0, [sp, #24]
   12598:	b	122cc <__assert_fail@plt+0x1128>
   1259c:	ldr	r0, [sp, #20]
   125a0:	bl	1106c <strlen@plt>
   125a4:	mov	r3, #1
   125a8:	strb	r6, [sp, #28]
   125ac:	strb	r3, [sp, #16]
   125b0:	ldr	r4, [sp, #32]
   125b4:	str	r0, [sp, #24]
   125b8:	b	12258 <__assert_fail@plt+0x10b4>
   125bc:	mov	fp, #1
   125c0:	b	11f00 <__assert_fail@plt+0xd5c>
   125c4:	ldr	r3, [pc, #44]	; 125f8 <__assert_fail@plt+0x1454>
   125c8:	mov	r2, #150	; 0x96
   125cc:	ldr	r1, [pc, #40]	; 125fc <__assert_fail@plt+0x1458>
   125d0:	ldr	r0, [pc, #44]	; 12604 <__assert_fail@plt+0x1460>
   125d4:	bl	111a4 <__assert_fail@plt>
   125d8:	ldr	r3, [pc, #24]	; 125f8 <__assert_fail@plt+0x1454>
   125dc:	mov	r2, #178	; 0xb2
   125e0:	ldr	r1, [pc, #20]	; 125fc <__assert_fail@plt+0x1458>
   125e4:	ldr	r0, [pc, #28]	; 12608 <__assert_fail@plt+0x1464>
   125e8:	bl	111a4 <__assert_fail@plt>
   125ec:	bl	10f88 <__stack_chk_fail@plt>
   125f0:	andeq	r5, r2, r8, lsl #30
   125f4:	andeq	r5, r1, r0, asr #24
   125f8:	andeq	r5, r1, ip, lsr fp
   125fc:	andeq	r5, r1, r0, asr fp
   12600:	andeq	r5, r1, ip, asr fp
   12604:	andeq	r5, r1, r0, ror fp
   12608:	andeq	r5, r1, r8, lsl #23
   1260c:	push	{r4, r5, r6, lr}
   12610:	mov	r1, r0
   12614:	mov	r4, r0
   12618:	sub	sp, sp, #8
   1261c:	mov	r2, #5
   12620:	mov	r0, #0
   12624:	bl	10f70 <dcgettext@plt>
   12628:	cmp	r4, r0
   1262c:	mov	r5, r0
   12630:	beq	12644 <__assert_fail@plt+0x14a0>
   12634:	mov	r1, r4
   12638:	bl	11e30 <__assert_fail@plt+0xc8c>
   1263c:	cmp	r0, #0
   12640:	beq	12650 <__assert_fail@plt+0x14ac>
   12644:	mov	r0, r5
   12648:	add	sp, sp, #8
   1264c:	pop	{r4, r5, r6, pc}
   12650:	mov	r0, r5
   12654:	bl	1106c <strlen@plt>
   12658:	mov	r6, r0
   1265c:	mov	r0, r4
   12660:	bl	1106c <strlen@plt>
   12664:	add	r0, r6, r0
   12668:	add	r0, r0, #4
   1266c:	bl	12ef0 <__assert_fail@plt+0x1d4c>
   12670:	str	r5, [sp]
   12674:	str	r4, [sp, #4]
   12678:	ldr	r3, [pc, #28]	; 1269c <__assert_fail@plt+0x14f8>
   1267c:	mvn	r2, #0
   12680:	mov	r1, #1
   12684:	mov	r6, r0
   12688:	bl	110a8 <__sprintf_chk@plt>
   1268c:	mov	r5, r6
   12690:	mov	r0, r5
   12694:	add	sp, sp, #8
   12698:	pop	{r4, r5, r6, pc}
   1269c:	andeq	r5, r1, r0, lsr #23
   126a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   126a4:	mov	r2, #5
   126a8:	sub	sp, sp, #8
   126ac:	mov	r6, r0
   126b0:	mov	r5, r1
   126b4:	mov	r1, r0
   126b8:	mov	r0, #0
   126bc:	bl	10f70 <dcgettext@plt>
   126c0:	mov	r8, r0
   126c4:	bl	13184 <__assert_fail@plt+0x1fe0>
   126c8:	ldr	r1, [pc, #624]	; 12940 <__assert_fail@plt+0x179c>
   126cc:	mov	r9, r0
   126d0:	bl	130c8 <__assert_fail@plt+0x1f24>
   126d4:	subs	r4, r0, #0
   126d8:	bne	127f0 <__assert_fail@plt+0x164c>
   126dc:	subs	r9, r5, #0
   126e0:	movne	r7, r5
   126e4:	beq	12760 <__assert_fail@plt+0x15bc>
   126e8:	mov	r1, r6
   126ec:	mov	r0, r8
   126f0:	bl	10eec <strcmp@plt>
   126f4:	cmp	r0, #0
   126f8:	beq	12754 <__assert_fail@plt+0x15b0>
   126fc:	mov	r1, r6
   12700:	mov	r0, r8
   12704:	bl	11e30 <__assert_fail@plt+0xc8c>
   12708:	subs	r6, r0, #0
   1270c:	bne	1273c <__assert_fail@plt+0x1598>
   12710:	cmp	r5, #0
   12714:	beq	1276c <__assert_fail@plt+0x15c8>
   12718:	mov	r1, r5
   1271c:	mov	r0, r8
   12720:	bl	11e30 <__assert_fail@plt+0xc8c>
   12724:	cmp	r0, #0
   12728:	beq	1276c <__assert_fail@plt+0x15c8>
   1272c:	cmp	r6, #0
   12730:	beq	1273c <__assert_fail@plt+0x1598>
   12734:	mov	r0, r6
   12738:	bl	10f28 <free@plt>
   1273c:	cmp	r4, #0
   12740:	moveq	r7, r8
   12744:	beq	12754 <__assert_fail@plt+0x15b0>
   12748:	mov	r0, r4
   1274c:	bl	10f28 <free@plt>
   12750:	mov	r7, r8
   12754:	mov	r0, r7
   12758:	add	sp, sp, #8
   1275c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12760:	mov	r7, r6
   12764:	mov	r4, r5
   12768:	b	126e8 <__assert_fail@plt+0x1544>
   1276c:	cmp	r9, #0
   12770:	beq	12788 <__assert_fail@plt+0x15e4>
   12774:	mov	r1, r9
   12778:	mov	r0, r8
   1277c:	bl	11e30 <__assert_fail@plt+0xc8c>
   12780:	cmp	r0, #0
   12784:	bne	1272c <__assert_fail@plt+0x1588>
   12788:	mov	r0, r8
   1278c:	bl	1106c <strlen@plt>
   12790:	mov	r5, r0
   12794:	mov	r0, r7
   12798:	bl	1106c <strlen@plt>
   1279c:	add	r0, r5, r0
   127a0:	add	r0, r0, #4
   127a4:	bl	12ef0 <__assert_fail@plt+0x1d4c>
   127a8:	str	r7, [sp, #4]
   127ac:	str	r8, [sp]
   127b0:	ldr	r3, [pc, #396]	; 12944 <__assert_fail@plt+0x17a0>
   127b4:	mvn	r2, #0
   127b8:	mov	r1, #1
   127bc:	mov	r5, r0
   127c0:	bl	110a8 <__sprintf_chk@plt>
   127c4:	cmp	r6, #0
   127c8:	beq	127d4 <__assert_fail@plt+0x1630>
   127cc:	mov	r0, r6
   127d0:	bl	10f28 <free@plt>
   127d4:	cmp	r4, #0
   127d8:	moveq	r7, r5
   127dc:	beq	12754 <__assert_fail@plt+0x15b0>
   127e0:	mov	r0, r4
   127e4:	bl	10f28 <free@plt>
   127e8:	mov	r7, r5
   127ec:	b	12754 <__assert_fail@plt+0x15b0>
   127f0:	mov	r2, r9
   127f4:	ldr	r1, [pc, #324]	; 12940 <__assert_fail@plt+0x179c>
   127f8:	mov	r0, r5
   127fc:	bl	1301c <__assert_fail@plt+0x1e78>
   12800:	mov	r7, r0
   12804:	mov	r0, r9
   12808:	bl	1106c <strlen@plt>
   1280c:	mov	r4, r0
   12810:	add	r0, r0, #11
   12814:	bl	12ef0 <__assert_fail@plt+0x1d4c>
   12818:	mov	r2, r4
   1281c:	mov	r1, r9
   12820:	mov	sl, r0
   12824:	bl	10f40 <memcpy@plt>
   12828:	ldr	r3, [pc, #280]	; 12948 <__assert_fail@plt+0x17a4>
   1282c:	add	ip, sl, r4
   12830:	mov	r2, sl
   12834:	ldm	r3!, {r0, r1}
   12838:	ldrh	lr, [r3]
   1283c:	ldrb	r3, [r3, #2]
   12840:	str	r0, [sl, r4]
   12844:	str	r1, [ip, #4]
   12848:	strh	lr, [ip, #8]
   1284c:	strb	r3, [ip, #10]
   12850:	ldr	r1, [pc, #232]	; 12940 <__assert_fail@plt+0x179c>
   12854:	mov	r0, r5
   12858:	bl	1301c <__assert_fail@plt+0x1e78>
   1285c:	mov	r4, r0
   12860:	mov	r0, sl
   12864:	bl	10f28 <free@plt>
   12868:	cmp	r4, #0
   1286c:	beq	1290c <__assert_fail@plt+0x1768>
   12870:	mov	r1, #63	; 0x3f
   12874:	mov	r0, r4
   12878:	bl	11078 <strchr@plt>
   1287c:	cmp	r0, #0
   12880:	beq	128d0 <__assert_fail@plt+0x172c>
   12884:	mov	r0, r4
   12888:	bl	10f28 <free@plt>
   1288c:	cmp	r7, #0
   12890:	beq	12914 <__assert_fail@plt+0x1770>
   12894:	mov	r1, r6
   12898:	mov	r0, r8
   1289c:	bl	10eec <strcmp@plt>
   128a0:	cmp	r0, #0
   128a4:	beq	12754 <__assert_fail@plt+0x15b0>
   128a8:	mov	r9, #0
   128ac:	mov	r4, r9
   128b0:	mov	r1, r6
   128b4:	mov	r0, r8
   128b8:	bl	11e30 <__assert_fail@plt+0xc8c>
   128bc:	cmp	r0, #0
   128c0:	bne	12938 <__assert_fail@plt+0x1794>
   128c4:	mov	r5, r7
   128c8:	mov	r6, r7
   128cc:	b	12710 <__assert_fail@plt+0x156c>
   128d0:	cmp	r7, #0
   128d4:	beq	12928 <__assert_fail@plt+0x1784>
   128d8:	mov	r1, r6
   128dc:	mov	r0, r8
   128e0:	bl	10eec <strcmp@plt>
   128e4:	cmp	r0, #0
   128e8:	movne	r9, r4
   128ec:	bne	128b0 <__assert_fail@plt+0x170c>
   128f0:	cmp	r7, r4
   128f4:	beq	12754 <__assert_fail@plt+0x15b0>
   128f8:	mov	r0, r4
   128fc:	bl	10f28 <free@plt>
   12900:	mov	r0, r7
   12904:	add	sp, sp, #8
   12908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1290c:	cmp	r7, #0
   12910:	bne	12894 <__assert_fail@plt+0x16f0>
   12914:	mov	r9, #0
   12918:	mov	r5, r9
   1291c:	mov	r4, r9
   12920:	mov	r7, r6
   12924:	b	126e8 <__assert_fail@plt+0x1544>
   12928:	mov	r5, r7
   1292c:	mov	r9, r4
   12930:	mov	r7, r4
   12934:	b	126e8 <__assert_fail@plt+0x1544>
   12938:	mov	r6, r7
   1293c:	b	12734 <__assert_fail@plt+0x1590>
   12940:	andeq	r5, r1, r8, lsr #23
   12944:	andeq	r5, r1, r0, lsr #23
   12948:			; <UNDEFINED> instruction: 0x00015bb0
   1294c:	push	{r4, r5, r6, lr}
   12950:	mov	r2, r1
   12954:	mov	r4, r1
   12958:	mov	r1, #0
   1295c:	mov	r5, r0
   12960:	bl	110fc <memchr@plt>
   12964:	cmp	r0, #0
   12968:	subne	r0, r0, r5
   1296c:	addne	r0, r0, #1
   12970:	moveq	r0, r4
   12974:	pop	{r4, r5, r6, pc}
   12978:	push	{r4, lr}
   1297c:	mov	r2, #170	; 0xaa
   12980:	ldr	r3, [pc, #8]	; 12990 <__assert_fail@plt+0x17ec>
   12984:	ldr	r1, [pc, #8]	; 12994 <__assert_fail@plt+0x17f0>
   12988:	ldr	r0, [pc, #8]	; 12998 <__assert_fail@plt+0x17f4>
   1298c:	bl	111a4 <__assert_fail@plt>
   12990:			; <UNDEFINED> instruction: 0x00015bbc
   12994:	ldrdeq	r5, [r1], -r0
   12998:	andeq	r5, r1, ip, asr fp
   1299c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129a0:	sub	sp, sp, #76	; 0x4c
   129a4:	ldr	r7, [pc, #1232]	; 12e7c <__assert_fail@plt+0x1cd8>
   129a8:	mov	r5, r1
   129ac:	ldr	r3, [r7]
   129b0:	str	r3, [sp, #68]	; 0x44
   129b4:	bl	10f7c <strdup@plt>
   129b8:	subs	r6, r0, #0
   129bc:	beq	12e50 <__assert_fail@plt+0x1cac>
   129c0:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   129c4:	cmp	r0, #1
   129c8:	bls	12be0 <__assert_fail@plt+0x1a3c>
   129cc:	cmp	r5, #0
   129d0:	bne	12cd4 <__assert_fail@plt+0x1b30>
   129d4:	add	r9, sp, #16
   129d8:	mov	r0, r6
   129dc:	str	r6, [sp, #28]
   129e0:	bl	1106c <strlen@plt>
   129e4:	mov	r5, #0
   129e8:	str	r5, [sp, #16]
   129ec:	strb	r5, [sp, #12]
   129f0:	str	r5, [r9, #4]
   129f4:	strb	r5, [sp, #24]
   129f8:	add	sl, r6, r0
   129fc:	cmp	sl, r6
   12a00:	str	sl, [sp, #8]
   12a04:	movhi	r4, r6
   12a08:	movhi	r8, #1
   12a0c:	bhi	12a44 <__assert_fail@plt+0x18a0>
   12a10:	b	12b98 <__assert_fail@plt+0x19f4>
   12a14:	ldrb	r3, [sp, #36]	; 0x24
   12a18:	cmp	r3, #0
   12a1c:	beq	12ac8 <__assert_fail@plt+0x1924>
   12a20:	ldr	r0, [sp, #40]	; 0x28
   12a24:	bl	11060 <iswspace@plt>
   12a28:	clz	r5, r0
   12a2c:	lsr	r5, r5, #5
   12a30:	mov	r3, #0
   12a34:	cmp	r4, sl
   12a38:	str	r4, [sp, #28]
   12a3c:	strb	r3, [sp, #24]
   12a40:	bcs	12ca8 <__assert_fail@plt+0x1b04>
   12a44:	ldrb	r3, [sp, #12]
   12a48:	cmp	r3, #0
   12a4c:	bne	12ae4 <__assert_fail@plt+0x1940>
   12a50:	ldrb	r3, [r4]
   12a54:	ldr	r2, [pc, #1060]	; 12e80 <__assert_fail@plt+0x1cdc>
   12a58:	and	r1, r3, #31
   12a5c:	lsr	r3, r3, #5
   12a60:	ldr	r3, [r2, r3, lsl #2]
   12a64:	lsr	r3, r3, r1
   12a68:	tst	r3, #1
   12a6c:	beq	12ad0 <__assert_fail@plt+0x192c>
   12a70:	ldr	fp, [sp, #28]
   12a74:	str	r8, [sp, #32]
   12a78:	ldr	sl, [sp, #8]
   12a7c:	ldrb	r2, [r4]
   12a80:	add	r4, fp, #1
   12a84:	strb	r8, [sp, #36]	; 0x24
   12a88:	str	r2, [sp, #40]	; 0x28
   12a8c:	cmp	r5, #0
   12a90:	strb	r8, [sp, #24]
   12a94:	beq	12a14 <__assert_fail@plt+0x1870>
   12a98:	cmp	r5, #1
   12a9c:	beq	12bb4 <__assert_fail@plt+0x1a10>
   12aa0:	cmp	r5, #2
   12aa4:	bne	12ac8 <__assert_fail@plt+0x1924>
   12aa8:	ldrb	r3, [sp, #36]	; 0x24
   12aac:	cmp	r3, #0
   12ab0:	beq	12ac8 <__assert_fail@plt+0x1924>
   12ab4:	ldr	r0, [sp, #40]	; 0x28
   12ab8:	bl	11060 <iswspace@plt>
   12abc:	cmp	r0, #0
   12ac0:	moveq	r5, #1
   12ac4:	b	12a30 <__assert_fail@plt+0x188c>
   12ac8:	mov	r5, #1
   12acc:	b	12a30 <__assert_fail@plt+0x188c>
   12ad0:	mov	r0, r9
   12ad4:	bl	10f4c <mbsinit@plt>
   12ad8:	cmp	r0, #0
   12adc:	beq	12e68 <__assert_fail@plt+0x1cc4>
   12ae0:	strb	r8, [sp, #12]
   12ae4:	sub	r2, sl, r4
   12ae8:	mov	r1, r4
   12aec:	mov	r3, r9
   12af0:	add	r0, sp, #40	; 0x28
   12af4:	bl	13048 <__assert_fail@plt+0x1ea4>
   12af8:	cmn	r0, #1
   12afc:	mov	r4, r0
   12b00:	str	r0, [sp, #32]
   12b04:	beq	12c8c <__assert_fail@plt+0x1ae8>
   12b08:	cmn	r0, #2
   12b0c:	ldr	fp, [sp, #28]
   12b10:	beq	12cb8 <__assert_fail@plt+0x1b14>
   12b14:	cmp	r0, #0
   12b18:	bne	12b3c <__assert_fail@plt+0x1998>
   12b1c:	str	r8, [sp, #32]
   12b20:	ldrb	r2, [fp]
   12b24:	cmp	r2, #0
   12b28:	bne	12e54 <__assert_fail@plt+0x1cb0>
   12b2c:	ldr	r2, [sp, #40]	; 0x28
   12b30:	cmp	r2, #0
   12b34:	bne	12e40 <__assert_fail@plt+0x1c9c>
   12b38:	mov	r4, #1
   12b3c:	mov	r0, r9
   12b40:	strb	r8, [sp, #36]	; 0x24
   12b44:	bl	10f4c <mbsinit@plt>
   12b48:	add	r4, fp, r4
   12b4c:	ldr	sl, [sp, #8]
   12b50:	cmp	r0, #0
   12b54:	movne	r1, #0
   12b58:	strbne	r1, [sp, #12]
   12b5c:	b	12a8c <__assert_fail@plt+0x18e8>
   12b60:	ldr	r4, [sp, #28]
   12b64:	mov	r3, #1
   12b68:	mov	r2, #0
   12b6c:	str	r3, [sp, #32]
   12b70:	strb	r3, [sp, #24]
   12b74:	strb	r2, [sp, #36]	; 0x24
   12b78:	mov	r0, r4
   12b7c:	bl	1106c <strlen@plt>
   12b80:	mov	r1, r4
   12b84:	add	r2, r0, #1
   12b88:	mov	r0, r6
   12b8c:	bl	10f1c <memmove@plt>
   12b90:	cmp	r5, #1
   12b94:	bne	129d8 <__assert_fail@plt+0x1834>
   12b98:	ldr	r2, [sp, #68]	; 0x44
   12b9c:	ldr	r3, [r7]
   12ba0:	mov	r0, r6
   12ba4:	cmp	r2, r3
   12ba8:	bne	12e4c <__assert_fail@plt+0x1ca8>
   12bac:	add	sp, sp, #76	; 0x4c
   12bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bb4:	ldrb	r1, [sp, #36]	; 0x24
   12bb8:	cmp	r1, #0
   12bbc:	beq	12a30 <__assert_fail@plt+0x188c>
   12bc0:	ldr	r0, [sp, #40]	; 0x28
   12bc4:	bl	11060 <iswspace@plt>
   12bc8:	ldr	r3, [sp, #4]
   12bcc:	cmp	r0, #0
   12bd0:	movne	r3, fp
   12bd4:	str	r3, [sp, #4]
   12bd8:	movne	r5, #2
   12bdc:	b	12a30 <__assert_fail@plt+0x188c>
   12be0:	cmp	r5, #0
   12be4:	beq	12c40 <__assert_fail@plt+0x1a9c>
   12be8:	ldrb	r4, [r6]
   12bec:	cmp	r4, #0
   12bf0:	beq	12e44 <__assert_fail@plt+0x1ca0>
   12bf4:	bl	11048 <__ctype_b_loc@plt>
   12bf8:	mov	r8, r6
   12bfc:	ldr	r2, [r0]
   12c00:	b	12c10 <__assert_fail@plt+0x1a6c>
   12c04:	ldrb	r4, [r8, #1]!
   12c08:	cmp	r4, #0
   12c0c:	beq	12c20 <__assert_fail@plt+0x1a7c>
   12c10:	lsl	r4, r4, #1
   12c14:	ldrh	r3, [r2, r4]
   12c18:	tst	r3, #8192	; 0x2000
   12c1c:	bne	12c04 <__assert_fail@plt+0x1a60>
   12c20:	mov	r0, r8
   12c24:	bl	1106c <strlen@plt>
   12c28:	mov	r1, r8
   12c2c:	add	r2, r0, #1
   12c30:	mov	r0, r6
   12c34:	bl	10f1c <memmove@plt>
   12c38:	cmp	r5, #1
   12c3c:	beq	12b98 <__assert_fail@plt+0x19f4>
   12c40:	mov	r0, r6
   12c44:	bl	1106c <strlen@plt>
   12c48:	sub	r0, r0, #1
   12c4c:	adds	r4, r6, r0
   12c50:	bcs	12b98 <__assert_fail@plt+0x19f4>
   12c54:	bl	11048 <__ctype_b_loc@plt>
   12c58:	mov	r3, r4
   12c5c:	mov	ip, #0
   12c60:	ldr	r1, [r0]
   12c64:	b	12c74 <__assert_fail@plt+0x1ad0>
   12c68:	cmp	r6, r3
   12c6c:	strb	ip, [r3, #1]
   12c70:	bhi	12b98 <__assert_fail@plt+0x19f4>
   12c74:	ldrb	r2, [r3], #-1
   12c78:	lsl	r2, r2, #1
   12c7c:	ldrh	r2, [r1, r2]
   12c80:	tst	r2, #8192	; 0x2000
   12c84:	bne	12c68 <__assert_fail@plt+0x1ac4>
   12c88:	b	12b98 <__assert_fail@plt+0x19f4>
   12c8c:	ldr	fp, [sp, #28]
   12c90:	mov	r2, #0
   12c94:	str	r8, [sp, #32]
   12c98:	add	r4, fp, #1
   12c9c:	strb	r2, [sp, #36]	; 0x24
   12ca0:	ldr	sl, [sp, #8]
   12ca4:	b	12a8c <__assert_fail@plt+0x18e8>
   12ca8:	cmp	r5, #2
   12cac:	ldreq	r2, [sp, #4]
   12cb0:	strbeq	r3, [r2]
   12cb4:	b	12b98 <__assert_fail@plt+0x19f4>
   12cb8:	ldr	r4, [sp, #8]
   12cbc:	mov	r1, #0
   12cc0:	sub	r2, r4, fp
   12cc4:	str	r2, [sp, #32]
   12cc8:	mov	sl, r4
   12ccc:	strb	r1, [sp, #36]	; 0x24
   12cd0:	b	12a8c <__assert_fail@plt+0x18e8>
   12cd4:	mov	r0, r6
   12cd8:	str	r6, [sp, #28]
   12cdc:	bl	1106c <strlen@plt>
   12ce0:	add	r9, sp, #16
   12ce4:	mov	r3, #0
   12ce8:	str	r3, [sp, #16]
   12cec:	strb	r3, [sp, #12]
   12cf0:	str	r3, [r9, #4]
   12cf4:	strb	r3, [sp, #24]
   12cf8:	add	sl, r6, r0
   12cfc:	cmp	sl, r6
   12d00:	str	sl, [sp, #8]
   12d04:	movls	r4, r6
   12d08:	bls	12b78 <__assert_fail@plt+0x19d4>
   12d0c:	ldr	fp, [pc, #364]	; 12e80 <__assert_fail@plt+0x1cdc>
   12d10:	mov	r4, r6
   12d14:	mov	r8, #1
   12d18:	b	12d84 <__assert_fail@plt+0x1be0>
   12d1c:	ldrb	r3, [r4]
   12d20:	and	r1, r3, #31
   12d24:	lsr	r3, r3, #5
   12d28:	ldr	r3, [fp, r3, lsl #2]
   12d2c:	lsr	r3, r3, r1
   12d30:	tst	r3, #1
   12d34:	beq	12dec <__assert_fail@plt+0x1c48>
   12d38:	str	r8, [sp, #32]
   12d3c:	ldrb	r3, [r4]
   12d40:	ldr	r4, [sp, #28]
   12d44:	strb	r8, [sp, #36]	; 0x24
   12d48:	mov	sl, r3
   12d4c:	strb	r8, [sp, #24]
   12d50:	str	r3, [sp, #40]	; 0x28
   12d54:	mov	r0, sl
   12d58:	bl	11060 <iswspace@plt>
   12d5c:	cmp	r0, #0
   12d60:	beq	12b78 <__assert_fail@plt+0x19d4>
   12d64:	ldr	r3, [sp, #32]
   12d68:	ldr	sl, [sp, #8]
   12d6c:	add	r4, r4, r3
   12d70:	cmp	r4, sl
   12d74:	mov	r3, #0
   12d78:	str	r4, [sp, #28]
   12d7c:	strb	r3, [sp, #24]
   12d80:	bcs	12b78 <__assert_fail@plt+0x19d4>
   12d84:	ldrb	r3, [sp, #12]
   12d88:	cmp	r3, #0
   12d8c:	beq	12d1c <__assert_fail@plt+0x1b78>
   12d90:	sub	r2, sl, r4
   12d94:	mov	r1, r4
   12d98:	mov	r3, r9
   12d9c:	add	r0, sp, #40	; 0x28
   12da0:	bl	13048 <__assert_fail@plt+0x1ea4>
   12da4:	cmn	r0, #1
   12da8:	str	r0, [sp, #32]
   12dac:	beq	12b60 <__assert_fail@plt+0x19bc>
   12db0:	cmn	r0, #2
   12db4:	ldr	r4, [sp, #28]
   12db8:	beq	12e04 <__assert_fail@plt+0x1c60>
   12dbc:	cmp	r0, #0
   12dc0:	beq	12e24 <__assert_fail@plt+0x1c80>
   12dc4:	ldr	sl, [sp, #40]	; 0x28
   12dc8:	mov	r0, r9
   12dcc:	strb	r8, [sp, #36]	; 0x24
   12dd0:	bl	10f4c <mbsinit@plt>
   12dd4:	cmp	r0, #0
   12dd8:	movne	r2, #0
   12ddc:	strbeq	r8, [sp, #24]
   12de0:	strbne	r8, [sp, #24]
   12de4:	strbne	r2, [sp, #12]
   12de8:	b	12d54 <__assert_fail@plt+0x1bb0>
   12dec:	mov	r0, r9
   12df0:	bl	10f4c <mbsinit@plt>
   12df4:	cmp	r0, #0
   12df8:	beq	12e68 <__assert_fail@plt+0x1cc4>
   12dfc:	strb	r8, [sp, #12]
   12e00:	b	12d90 <__assert_fail@plt+0x1bec>
   12e04:	ldr	r3, [sp, #8]
   12e08:	mov	r2, #0
   12e0c:	sub	r3, r3, r4
   12e10:	str	r3, [sp, #32]
   12e14:	mov	r3, #1
   12e18:	strb	r2, [sp, #36]	; 0x24
   12e1c:	strb	r3, [sp, #24]
   12e20:	b	12b78 <__assert_fail@plt+0x19d4>
   12e24:	str	r8, [sp, #32]
   12e28:	ldrb	r3, [r4]
   12e2c:	cmp	r3, #0
   12e30:	bne	12e54 <__assert_fail@plt+0x1cb0>
   12e34:	ldr	sl, [sp, #40]	; 0x28
   12e38:	cmp	sl, #0
   12e3c:	beq	12dc8 <__assert_fail@plt+0x1c24>
   12e40:	bl	12978 <__assert_fail@plt+0x17d4>
   12e44:	mov	r8, r6
   12e48:	b	12c20 <__assert_fail@plt+0x1a7c>
   12e4c:	bl	10f88 <__stack_chk_fail@plt>
   12e50:	bl	12e94 <__assert_fail@plt+0x1cf0>
   12e54:	ldr	r3, [pc, #40]	; 12e84 <__assert_fail@plt+0x1ce0>
   12e58:	mov	r2, #169	; 0xa9
   12e5c:	ldr	r1, [pc, #36]	; 12e88 <__assert_fail@plt+0x1ce4>
   12e60:	ldr	r0, [pc, #36]	; 12e8c <__assert_fail@plt+0x1ce8>
   12e64:	bl	111a4 <__assert_fail@plt>
   12e68:	ldr	r3, [pc, #20]	; 12e84 <__assert_fail@plt+0x1ce0>
   12e6c:	mov	r2, #142	; 0x8e
   12e70:	ldr	r1, [pc, #16]	; 12e88 <__assert_fail@plt+0x1ce4>
   12e74:	ldr	r0, [pc, #20]	; 12e90 <__assert_fail@plt+0x1cec>
   12e78:	bl	111a4 <__assert_fail@plt>
   12e7c:	andeq	r5, r2, r8, lsl #30
   12e80:	andeq	r5, r1, r0, asr #24
   12e84:			; <UNDEFINED> instruction: 0x00015bbc
   12e88:	ldrdeq	r5, [r1], -r0
   12e8c:	andeq	r5, r1, r8, lsl #23
   12e90:	andeq	r5, r1, r0, ror fp
   12e94:	ldr	r3, [pc, #44]	; 12ec8 <__assert_fail@plt+0x1d24>
   12e98:	push	{r4, lr}
   12e9c:	mov	r2, #5
   12ea0:	ldr	r1, [pc, #36]	; 12ecc <__assert_fail@plt+0x1d28>
   12ea4:	mov	r0, #0
   12ea8:	ldr	r4, [r3]
   12eac:	bl	10f70 <dcgettext@plt>
   12eb0:	mov	r1, #0
   12eb4:	mov	r2, r0
   12eb8:	mov	r0, r4
   12ebc:	bl	10fe8 <error@plt>
   12ec0:	mov	r0, #1
   12ec4:	bl	11054 <exit@plt>
   12ec8:	andeq	r6, r2, r4, lsl r1
   12ecc:	ldrdeq	r5, [r1], -ip
   12ed0:	cmp	r0, #0
   12ed4:	push	{r4, lr}
   12ed8:	bne	12eec <__assert_fail@plt+0x1d48>
   12edc:	mov	r0, #1
   12ee0:	bl	1100c <malloc@plt>
   12ee4:	cmp	r0, #0
   12ee8:	popne	{r4, pc}
   12eec:	bl	12e94 <__assert_fail@plt+0x1cf0>
   12ef0:	push	{r4, lr}
   12ef4:	mov	r4, r0
   12ef8:	bl	1100c <malloc@plt>
   12efc:	cmp	r0, #0
   12f00:	popne	{r4, pc}
   12f04:	mov	r0, r4
   12f08:	pop	{r4, lr}
   12f0c:	b	12ed0 <__assert_fail@plt+0x1d2c>
   12f10:	umull	r2, r3, r1, r0
   12f14:	push	{r4, lr}
   12f18:	cmp	r3, #0
   12f1c:	bne	12f40 <__assert_fail@plt+0x1d9c>
   12f20:	mul	r4, r1, r0
   12f24:	mov	r0, r4
   12f28:	bl	1100c <malloc@plt>
   12f2c:	cmp	r0, #0
   12f30:	popne	{r4, pc}
   12f34:	mov	r0, r4
   12f38:	pop	{r4, lr}
   12f3c:	b	12ed0 <__assert_fail@plt+0x1d2c>
   12f40:	bl	12e94 <__assert_fail@plt+0x1cf0>
   12f44:	push	{r4, lr}
   12f48:	mov	r4, r0
   12f4c:	bl	12ef0 <__assert_fail@plt+0x1d4c>
   12f50:	mov	r2, r4
   12f54:	mov	r1, #0
   12f58:	bl	110c0 <memset@plt>
   12f5c:	pop	{r4, pc}
   12f60:	push	{r4, lr}
   12f64:	mov	r4, r0
   12f68:	bl	10ec8 <calloc@plt>
   12f6c:	cmp	r0, #0
   12f70:	popne	{r4, pc}
   12f74:	mov	r0, r4
   12f78:	pop	{r4, lr}
   12f7c:	b	12ed0 <__assert_fail@plt+0x1d2c>
   12f80:	cmp	r0, #0
   12f84:	push	{r4, lr}
   12f88:	mov	r4, r1
   12f8c:	beq	12fa8 <__assert_fail@plt+0x1e04>
   12f90:	bl	10f94 <realloc@plt>
   12f94:	cmp	r0, #0
   12f98:	popne	{r4, pc}
   12f9c:	mov	r0, r4
   12fa0:	pop	{r4, lr}
   12fa4:	b	12ed0 <__assert_fail@plt+0x1d2c>
   12fa8:	mov	r0, r1
   12fac:	pop	{r4, lr}
   12fb0:	b	12ef0 <__assert_fail@plt+0x1d4c>
   12fb4:	push	{r4, lr}
   12fb8:	sub	sp, sp, #8
   12fbc:	ldr	ip, [sp, #16]
   12fc0:	str	ip, [sp]
   12fc4:	bl	14c28 <__assert_fail@plt+0x3a84>
   12fc8:	subs	r4, r0, #0
   12fcc:	blt	12fdc <__assert_fail@plt+0x1e38>
   12fd0:	mov	r0, r4
   12fd4:	add	sp, sp, #8
   12fd8:	pop	{r4, pc}
   12fdc:	bl	11090 <__errno_location@plt>
   12fe0:	ldr	r3, [r0]
   12fe4:	cmp	r3, #12
   12fe8:	bne	12fd0 <__assert_fail@plt+0x1e2c>
   12fec:	bl	12e94 <__assert_fail@plt+0x1cf0>
   12ff0:	push	{r4, lr}
   12ff4:	bl	14ec0 <__assert_fail@plt+0x3d1c>
   12ff8:	subs	r4, r0, #0
   12ffc:	beq	13008 <__assert_fail@plt+0x1e64>
   13000:	mov	r0, r4
   13004:	pop	{r4, pc}
   13008:	bl	11090 <__errno_location@plt>
   1300c:	ldr	r3, [r0]
   13010:	cmp	r3, #12
   13014:	bne	13000 <__assert_fail@plt+0x1e5c>
   13018:	bl	12e94 <__assert_fail@plt+0x1cf0>
   1301c:	push	{r4, lr}
   13020:	bl	150a8 <__assert_fail@plt+0x3f04>
   13024:	subs	r4, r0, #0
   13028:	beq	13034 <__assert_fail@plt+0x1e90>
   1302c:	mov	r0, r4
   13030:	pop	{r4, pc}
   13034:	bl	11090 <__errno_location@plt>
   13038:	ldr	r3, [r0]
   1303c:	cmp	r3, #12
   13040:	bne	1302c <__assert_fail@plt+0x1e88>
   13044:	bl	12e94 <__assert_fail@plt+0x1cf0>
   13048:	push	{r4, r5, r6, r7, r8, lr}
   1304c:	subs	r7, r0, #0
   13050:	ldr	r5, [pc, #108]	; 130c4 <__assert_fail@plt+0x1f20>
   13054:	sub	sp, sp, #8
   13058:	mov	r8, r1
   1305c:	ldr	r1, [r5]
   13060:	moveq	r7, sp
   13064:	str	r1, [sp, #4]
   13068:	mov	r0, r7
   1306c:	mov	r1, r8
   13070:	mov	r6, r2
   13074:	bl	10fdc <mbrtowc@plt>
   13078:	cmp	r6, #0
   1307c:	cmnne	r0, #3
   13080:	mov	r4, r0
   13084:	bhi	130a4 <__assert_fail@plt+0x1f00>
   13088:	ldr	r2, [sp, #4]
   1308c:	ldr	r3, [r5]
   13090:	mov	r0, r4
   13094:	cmp	r2, r3
   13098:	bne	130c0 <__assert_fail@plt+0x1f1c>
   1309c:	add	sp, sp, #8
   130a0:	pop	{r4, r5, r6, r7, r8, pc}
   130a4:	mov	r0, #0
   130a8:	bl	13138 <__assert_fail@plt+0x1f94>
   130ac:	cmp	r0, #0
   130b0:	moveq	r4, #1
   130b4:	ldrbeq	r3, [r8]
   130b8:	streq	r3, [r7]
   130bc:	b	13088 <__assert_fail@plt+0x1ee4>
   130c0:	bl	10f88 <__stack_chk_fail@plt>
   130c4:	andeq	r5, r2, r8, lsl #30
   130c8:	cmp	r0, r1
   130cc:	beq	13130 <__assert_fail@plt+0x1f8c>
   130d0:	push	{lr}		; (str lr, [sp, #-4]!)
   130d4:	sub	r0, r0, #1
   130d8:	sub	r1, r1, #1
   130dc:	b	130e8 <__assert_fail@plt+0x1f44>
   130e0:	cmp	r3, r2
   130e4:	bne	13120 <__assert_fail@plt+0x1f7c>
   130e8:	ldrb	r3, [r0, #1]!
   130ec:	sub	r2, r3, #65	; 0x41
   130f0:	cmp	r2, #25
   130f4:	ldrb	r2, [r1, #1]!
   130f8:	mov	ip, r3
   130fc:	addls	ip, r3, #32
   13100:	sub	lr, r2, #65	; 0x41
   13104:	uxtbls	r3, ip
   13108:	cmp	lr, #25
   1310c:	mov	lr, r2
   13110:	addls	lr, r2, #32
   13114:	uxtbls	r2, lr
   13118:	cmp	r3, #0
   1311c:	bne	130e0 <__assert_fail@plt+0x1f3c>
   13120:	uxtb	ip, ip
   13124:	uxtb	r0, lr
   13128:	sub	r0, ip, r0
   1312c:	pop	{pc}		; (ldr pc, [sp], #4)
   13130:	mov	r0, #0
   13134:	bx	lr
   13138:	push	{r4, lr}
   1313c:	mov	r1, #0
   13140:	bl	1112c <setlocale@plt>
   13144:	subs	r4, r0, #0
   13148:	beq	13174 <__assert_fail@plt+0x1fd0>
   1314c:	ldr	r1, [pc, #40]	; 1317c <__assert_fail@plt+0x1fd8>
   13150:	bl	10eec <strcmp@plt>
   13154:	cmp	r0, #0
   13158:	popeq	{r4, pc}
   1315c:	mov	r0, r4
   13160:	ldr	r1, [pc, #24]	; 13180 <__assert_fail@plt+0x1fdc>
   13164:	bl	10eec <strcmp@plt>
   13168:	adds	r0, r0, #0
   1316c:	movne	r0, #1
   13170:	pop	{r4, pc}
   13174:	mov	r0, #1
   13178:	pop	{r4, pc}
   1317c:	strdeq	r5, [r1], -r0
   13180:	strdeq	r5, [r1], -r4
   13184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13188:	sub	sp, sp, #124	; 0x7c
   1318c:	ldr	r6, [pc, #920]	; 1352c <__assert_fail@plt+0x2388>
   13190:	mov	r0, #14
   13194:	ldr	r7, [pc, #916]	; 13530 <__assert_fail@plt+0x238c>
   13198:	ldr	r3, [r6]
   1319c:	ldr	r5, [pc, #912]	; 13534 <__assert_fail@plt+0x2390>
   131a0:	str	r3, [sp, #116]	; 0x74
   131a4:	bl	11144 <nl_langinfo@plt>
   131a8:	ldr	r4, [r7]
   131ac:	cmp	r0, #0
   131b0:	movne	r5, r0
   131b4:	cmp	r4, #0
   131b8:	beq	1325c <__assert_fail@plt+0x20b8>
   131bc:	ldrb	r7, [r4]
   131c0:	cmp	r7, #0
   131c4:	bne	131f8 <__assert_fail@plt+0x2054>
   131c8:	b	13230 <__assert_fail@plt+0x208c>
   131cc:	mov	r0, r4
   131d0:	bl	1106c <strlen@plt>
   131d4:	add	r0, r0, #1
   131d8:	add	r7, r4, r0
   131dc:	mov	r0, r7
   131e0:	bl	1106c <strlen@plt>
   131e4:	add	r0, r0, #1
   131e8:	add	r4, r7, r0
   131ec:	ldrb	r7, [r7, r0]
   131f0:	cmp	r7, #0
   131f4:	beq	13230 <__assert_fail@plt+0x208c>
   131f8:	mov	r1, r4
   131fc:	mov	r0, r5
   13200:	bl	10eec <strcmp@plt>
   13204:	cmp	r0, #0
   13208:	beq	13220 <__assert_fail@plt+0x207c>
   1320c:	cmp	r7, #42	; 0x2a
   13210:	bne	131cc <__assert_fail@plt+0x2028>
   13214:	ldrb	r3, [r4, #1]
   13218:	cmp	r3, #0
   1321c:	bne	131cc <__assert_fail@plt+0x2028>
   13220:	mov	r0, r4
   13224:	bl	1106c <strlen@plt>
   13228:	add	r0, r0, #1
   1322c:	add	r5, r4, r0
   13230:	ldrb	r0, [r5]
   13234:	ldr	r2, [sp, #116]	; 0x74
   13238:	ldr	r1, [pc, #760]	; 13538 <__assert_fail@plt+0x2394>
   1323c:	ldr	r3, [r6]
   13240:	cmp	r0, #0
   13244:	movne	r0, r5
   13248:	moveq	r0, r1
   1324c:	cmp	r2, r3
   13250:	bne	13518 <__assert_fail@plt+0x2374>
   13254:	add	sp, sp, #124	; 0x7c
   13258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1325c:	ldr	r0, [pc, #728]	; 1353c <__assert_fail@plt+0x2398>
   13260:	bl	11000 <getenv@plt>
   13264:	subs	r4, r0, #0
   13268:	beq	132d4 <__assert_fail@plt+0x2130>
   1326c:	ldrb	r3, [r4]
   13270:	cmp	r3, #0
   13274:	bne	132ac <__assert_fail@plt+0x2108>
   13278:	ldr	r4, [pc, #704]	; 13540 <__assert_fail@plt+0x239c>
   1327c:	mov	r0, #23
   13280:	mov	r8, #9
   13284:	mov	sl, #8
   13288:	bl	1100c <malloc@plt>
   1328c:	subs	r9, r0, #0
   13290:	beq	132c8 <__assert_fail@plt+0x2124>
   13294:	mov	r1, r4
   13298:	mov	r2, sl
   1329c:	bl	10f40 <memcpy@plt>
   132a0:	mov	r3, #47	; 0x2f
   132a4:	strb	r3, [r9, sl]
   132a8:	b	132f4 <__assert_fail@plt+0x2150>
   132ac:	bl	1106c <strlen@plt>
   132b0:	subs	r8, r0, #0
   132b4:	moveq	r0, #14
   132b8:	bne	134d4 <__assert_fail@plt+0x2330>
   132bc:	bl	1100c <malloc@plt>
   132c0:	subs	r9, r0, #0
   132c4:	bne	132e8 <__assert_fail@plt+0x2144>
   132c8:	ldr	r4, [pc, #612]	; 13534 <__assert_fail@plt+0x2390>
   132cc:	str	r4, [r7]
   132d0:	b	131bc <__assert_fail@plt+0x2018>
   132d4:	mov	r0, #23
   132d8:	mov	r8, #9
   132dc:	mov	sl, #8
   132e0:	ldr	r4, [pc, #600]	; 13540 <__assert_fail@plt+0x239c>
   132e4:	b	13288 <__assert_fail@plt+0x20e4>
   132e8:	mov	r1, r4
   132ec:	mov	r2, r8
   132f0:	bl	10f40 <memcpy@plt>
   132f4:	ldr	r3, [pc, #584]	; 13544 <__assert_fail@plt+0x23a0>
   132f8:	add	ip, r9, r8
   132fc:	ldm	r3!, {r0, r1, r2}
   13300:	ldrh	r3, [r3]
   13304:	str	r0, [r9, r8]
   13308:	str	r1, [ip, #4]
   1330c:	strh	r3, [ip, #12]
   13310:	str	r2, [ip, #8]
   13314:	mov	r1, #32768	; 0x8000
   13318:	mov	r0, r9
   1331c:	bl	10ff4 <open64@plt>
   13320:	subs	r4, r0, #0
   13324:	bge	13338 <__assert_fail@plt+0x2194>
   13328:	ldr	r4, [pc, #516]	; 13534 <__assert_fail@plt+0x2390>
   1332c:	mov	r0, r9
   13330:	bl	10f28 <free@plt>
   13334:	b	132cc <__assert_fail@plt+0x2128>
   13338:	ldr	r1, [pc, #520]	; 13548 <__assert_fail@plt+0x23a4>
   1333c:	bl	10ebc <fdopen@plt>
   13340:	subs	r8, r0, #0
   13344:	beq	134ec <__assert_fail@plt+0x2348>
   13348:	mov	fp, #0
   1334c:	mov	r4, fp
   13350:	str	r9, [sp]
   13354:	str	r5, [sp, #4]
   13358:	ldr	r3, [r8, #4]
   1335c:	ldr	r2, [r8, #8]
   13360:	cmp	r3, r2
   13364:	bcs	13430 <__assert_fail@plt+0x228c>
   13368:	add	r2, r3, #1
   1336c:	str	r2, [r8, #4]
   13370:	ldrb	r0, [r3]
   13374:	sub	r3, r0, #9
   13378:	cmp	r0, #32
   1337c:	cmpne	r3, #1
   13380:	bls	13358 <__assert_fail@plt+0x21b4>
   13384:	cmp	r0, #35	; 0x23
   13388:	beq	13444 <__assert_fail@plt+0x22a0>
   1338c:	mov	r1, r8
   13390:	bl	11084 <ungetc@plt>
   13394:	add	r3, sp, #64	; 0x40
   13398:	add	r2, sp, #12
   1339c:	ldr	r1, [pc, #424]	; 1354c <__assert_fail@plt+0x23a8>
   133a0:	mov	r0, r8
   133a4:	bl	110d8 <fscanf@plt>
   133a8:	cmp	r0, #1
   133ac:	ble	13480 <__assert_fail@plt+0x22dc>
   133b0:	add	r0, sp, #12
   133b4:	bl	1106c <strlen@plt>
   133b8:	mov	sl, r0
   133bc:	add	r0, sp, #64	; 0x40
   133c0:	bl	1106c <strlen@plt>
   133c4:	cmp	fp, #0
   133c8:	mov	r9, r0
   133cc:	add	r3, sl, r0
   133d0:	bne	134a4 <__assert_fail@plt+0x2300>
   133d4:	add	r0, r3, #3
   133d8:	add	fp, r3, #2
   133dc:	bl	1100c <malloc@plt>
   133e0:	mov	r5, r0
   133e4:	cmp	r5, #0
   133e8:	beq	134f8 <__assert_fail@plt+0x2354>
   133ec:	sub	r4, fp, r9
   133f0:	sub	r0, r4, sl
   133f4:	sub	r0, r0, #2
   133f8:	add	r1, sp, #12
   133fc:	add	r2, sl, #1
   13400:	add	r0, r5, r0
   13404:	bl	10f40 <memcpy@plt>
   13408:	sub	r0, r4, #1
   1340c:	add	r2, r9, #1
   13410:	add	r0, r5, r0
   13414:	add	r1, sp, #64	; 0x40
   13418:	bl	10f40 <memcpy@plt>
   1341c:	ldr	r3, [r8, #4]
   13420:	ldr	r2, [r8, #8]
   13424:	mov	r4, r5
   13428:	cmp	r3, r2
   1342c:	bcc	13368 <__assert_fail@plt+0x21c4>
   13430:	mov	r0, r8
   13434:	bl	11120 <__uflow@plt>
   13438:	cmn	r0, #1
   1343c:	bne	13374 <__assert_fail@plt+0x21d0>
   13440:	b	13480 <__assert_fail@plt+0x22dc>
   13444:	ldr	r3, [r8, #4]
   13448:	ldr	r2, [r8, #8]
   1344c:	cmp	r3, r2
   13450:	bcs	134c0 <__assert_fail@plt+0x231c>
   13454:	add	r2, r3, #1
   13458:	str	r2, [r8, #4]
   1345c:	ldrb	r0, [r3]
   13460:	mov	r3, #1
   13464:	cmp	r0, #10
   13468:	moveq	r3, #0
   1346c:	andne	r3, r3, #1
   13470:	cmp	r3, #0
   13474:	bne	13444 <__assert_fail@plt+0x22a0>
   13478:	cmn	r0, #1
   1347c:	bne	13358 <__assert_fail@plt+0x21b4>
   13480:	mov	r0, r8
   13484:	ldr	r9, [sp]
   13488:	ldr	r5, [sp, #4]
   1348c:	bl	11108 <fclose@plt>
   13490:	cmp	fp, #0
   13494:	beq	13328 <__assert_fail@plt+0x2184>
   13498:	mov	r3, #0
   1349c:	strb	r3, [r4, fp]
   134a0:	b	1332c <__assert_fail@plt+0x2188>
   134a4:	add	fp, fp, r3
   134a8:	add	r1, fp, #3
   134ac:	mov	r0, r4
   134b0:	bl	10f94 <realloc@plt>
   134b4:	add	fp, fp, #2
   134b8:	mov	r5, r0
   134bc:	b	133e4 <__assert_fail@plt+0x2240>
   134c0:	mov	r0, r8
   134c4:	bl	11120 <__uflow@plt>
   134c8:	adds	r3, r0, #1
   134cc:	movne	r3, #1
   134d0:	b	13464 <__assert_fail@plt+0x22c0>
   134d4:	add	r3, r4, r8
   134d8:	ldrb	r3, [r3, #-1]
   134dc:	cmp	r3, #47	; 0x2f
   134e0:	bne	1351c <__assert_fail@plt+0x2378>
   134e4:	add	r0, r8, #14
   134e8:	b	132bc <__assert_fail@plt+0x2118>
   134ec:	mov	r0, r4
   134f0:	bl	11198 <close@plt>
   134f4:	b	13328 <__assert_fail@plt+0x2184>
   134f8:	mov	r0, r4
   134fc:	ldr	r9, [sp]
   13500:	ldr	r5, [sp, #4]
   13504:	bl	10f28 <free@plt>
   13508:	mov	r0, r8
   1350c:	bl	11108 <fclose@plt>
   13510:	ldr	r4, [pc, #28]	; 13534 <__assert_fail@plt+0x2390>
   13514:	b	1332c <__assert_fail@plt+0x2188>
   13518:	bl	10f88 <__stack_chk_fail@plt>
   1351c:	add	r0, r8, #15
   13520:	mov	sl, r8
   13524:	add	r8, r8, #1
   13528:	b	13288 <__assert_fail@plt+0x20e4>
   1352c:	andeq	r5, r2, r8, lsl #30
   13530:	andeq	r6, r2, r0, ror #2
   13534:	andeq	r5, r1, r8, asr r7
   13538:	strdeq	r5, [r1], -ip
   1353c:	andeq	r5, r1, r0, lsl ip
   13540:	andeq	r5, r1, r4, lsl #24
   13544:	andeq	r5, r1, r0, lsr #24
   13548:	andeq	r5, r1, r0, lsr ip
   1354c:	andeq	r5, r1, r4, lsr ip
   13550:	push	{r4, lr}
   13554:	mov	r4, r0
   13558:	bl	10f10 <wcwidth@plt>
   1355c:	cmp	r0, #0
   13560:	popge	{r4, pc}
   13564:	mov	r0, r4
   13568:	bl	10fac <iswcntrl@plt>
   1356c:	clz	r0, r0
   13570:	lsr	r0, r0, #5
   13574:	pop	{r4, pc}
   13578:	mov	r3, r1
   1357c:	push	{r4, r5, r6, lr}
   13580:	mov	r4, r1
   13584:	ldr	r1, [r3], #16
   13588:	ldr	r2, [r4, #4]
   1358c:	cmp	r1, r3
   13590:	mov	r5, r0
   13594:	strne	r1, [r0]
   13598:	beq	135b8 <__assert_fail@plt+0x2414>
   1359c:	ldrb	r3, [r4, #8]
   135a0:	str	r2, [r5, #4]
   135a4:	cmp	r3, #0
   135a8:	strb	r3, [r5, #8]
   135ac:	ldrne	r3, [r4, #12]
   135b0:	strne	r3, [r5, #12]
   135b4:	pop	{r4, r5, r6, pc}
   135b8:	add	r3, r0, #16
   135bc:	mov	r0, r3
   135c0:	bl	10f40 <memcpy@plt>
   135c4:	ldr	r2, [r4, #4]
   135c8:	str	r0, [r5]
   135cc:	b	1359c <__assert_fail@plt+0x23f8>
   135d0:	ldr	r3, [pc, #20]	; 135ec <__assert_fail@plt+0x2448>
   135d4:	lsr	r2, r0, #5
   135d8:	and	r0, r0, #31
   135dc:	ldr	r3, [r3, r2, lsl #2]
   135e0:	lsr	r0, r3, r0
   135e4:	and	r0, r0, #1
   135e8:	bx	lr
   135ec:	andeq	r5, r1, r0, asr #24
   135f0:	push	{r4, r5, r6, r7, r8, fp, lr}
   135f4:	cmn	r2, #-1073741823	; 0xc0000001
   135f8:	ldr	r6, [pc, #348]	; 1375c <__assert_fail@plt+0x25b8>
   135fc:	add	fp, sp, #24
   13600:	mov	r7, r2
   13604:	sub	sp, sp, #12
   13608:	ldr	r2, [r6]
   1360c:	str	r2, [fp, #-32]	; 0xffffffe0
   13610:	bhi	1371c <__assert_fail@plt+0x2578>
   13614:	mov	r8, r3
   13618:	ldr	r3, [pc, #320]	; 13760 <__assert_fail@plt+0x25bc>
   1361c:	mov	r5, r0
   13620:	lsl	r0, r7, #2
   13624:	cmp	r0, r3
   13628:	mov	r4, r1
   1362c:	bhi	13710 <__assert_fail@plt+0x256c>
   13630:	add	r3, r0, #15
   13634:	bic	r3, r3, #7
   13638:	sub	sp, sp, r3
   1363c:	add	r0, sp, #8
   13640:	cmp	r0, #0
   13644:	beq	1371c <__assert_fail@plt+0x2578>
   13648:	cmp	r7, #2
   1364c:	mov	r3, #1
   13650:	str	r3, [r0, #4]
   13654:	movhi	r1, r4
   13658:	movhi	ip, #0
   1365c:	movhi	r3, #2
   13660:	bls	136a8 <__assert_fail@plt+0x2504>
   13664:	ldrb	r2, [r1, #1]!
   13668:	ldrb	lr, [r4, ip]
   1366c:	cmp	lr, r2
   13670:	bne	1368c <__assert_fail@plt+0x24e8>
   13674:	b	13740 <__assert_fail@plt+0x259c>
   13678:	ldr	lr, [r0, ip, lsl #2]
   1367c:	sub	ip, ip, lr
   13680:	ldrb	lr, [r4, ip]
   13684:	cmp	lr, r2
   13688:	beq	13740 <__assert_fail@plt+0x259c>
   1368c:	cmp	ip, #0
   13690:	bne	13678 <__assert_fail@plt+0x24d4>
   13694:	mov	ip, #0
   13698:	str	r3, [r0, r3, lsl #2]
   1369c:	add	r3, r3, #1
   136a0:	cmp	r7, r3
   136a4:	bne	13664 <__assert_fail@plt+0x24c0>
   136a8:	mov	r3, #0
   136ac:	str	r3, [r8]
   136b0:	ldrb	r2, [r5]
   136b4:	mov	r1, r5
   136b8:	cmp	r2, #0
   136bc:	beq	136f0 <__assert_fail@plt+0x254c>
   136c0:	ldrb	ip, [r4, r3]
   136c4:	cmp	ip, r2
   136c8:	beq	13724 <__assert_fail@plt+0x2580>
   136cc:	cmp	r3, #0
   136d0:	addeq	r5, r5, #1
   136d4:	ldrbeq	r2, [r1, #1]
   136d8:	ldrne	ip, [r0, r3, lsl #2]
   136dc:	addeq	r1, r1, #1
   136e0:	addne	r5, r5, ip
   136e4:	subne	r3, r3, ip
   136e8:	cmp	r2, #0
   136ec:	bne	136c0 <__assert_fail@plt+0x251c>
   136f0:	bl	151ec <__assert_fail@plt+0x4048>
   136f4:	mov	r0, #1
   136f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   136fc:	ldr	r3, [r6]
   13700:	cmp	r2, r3
   13704:	bne	13758 <__assert_fail@plt+0x25b4>
   13708:	sub	sp, fp, #24
   1370c:	pop	{r4, r5, r6, r7, r8, fp, pc}
   13710:	bl	15180 <__assert_fail@plt+0x3fdc>
   13714:	cmp	r0, #0
   13718:	bne	13648 <__assert_fail@plt+0x24a4>
   1371c:	mov	r0, #0
   13720:	b	136f8 <__assert_fail@plt+0x2554>
   13724:	add	r3, r3, #1
   13728:	cmp	r7, r3
   1372c:	add	ip, r1, #1
   13730:	beq	13750 <__assert_fail@plt+0x25ac>
   13734:	ldrb	r2, [r1, #1]
   13738:	mov	r1, ip
   1373c:	b	136b8 <__assert_fail@plt+0x2514>
   13740:	add	ip, ip, #1
   13744:	sub	r2, r3, ip
   13748:	str	r2, [r0, r3, lsl #2]
   1374c:	b	1369c <__assert_fail@plt+0x24f8>
   13750:	str	r5, [r8]
   13754:	b	136f0 <__assert_fail@plt+0x254c>
   13758:	bl	10f88 <__stack_chk_fail@plt>
   1375c:	andeq	r5, r2, r8, lsl #30
   13760:			; <UNDEFINED> instruction: 0x00000fb7
   13764:	push	{r4, lr}
   13768:	mov	r2, #179	; 0xb3
   1376c:	ldr	r3, [pc, #8]	; 1377c <__assert_fail@plt+0x25d8>
   13770:	ldr	r1, [pc, #8]	; 13780 <__assert_fail@plt+0x25dc>
   13774:	ldr	r0, [pc, #8]	; 13784 <__assert_fail@plt+0x25e0>
   13778:	bl	111a4 <__assert_fail@plt>
   1377c:	andeq	r5, r1, r0, ror #24
   13780:	andeq	r5, r1, r0, asr fp
   13784:	andeq	r5, r1, ip, asr fp
   13788:	ldr	r3, [pc, #2096]	; 13fc0 <__assert_fail@plt+0x2e1c>
   1378c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13790:	add	fp, sp, #32
   13794:	sub	sp, sp, #196	; 0xc4
   13798:	ldr	r3, [r3]
   1379c:	str	r0, [fp, #-220]	; 0xffffff24
   137a0:	mov	r0, r1
   137a4:	str	r3, [fp, #-40]	; 0xffffffd8
   137a8:	mov	r4, r1
   137ac:	str	r2, [fp, #-224]	; 0xffffff20
   137b0:	bl	15270 <__assert_fail@plt+0x40cc>
   137b4:	ldr	r3, [pc, #2056]	; 13fc4 <__assert_fail@plt+0x2e20>
   137b8:	cmp	r0, r3
   137bc:	str	r0, [fp, #-216]	; 0xffffff28
   137c0:	bhi	13b70 <__assert_fail@plt+0x29cc>
   137c4:	ldr	r2, [fp, #-216]	; 0xffffff28
   137c8:	ldr	r3, [pc, #2040]	; 13fc8 <__assert_fail@plt+0x2e24>
   137cc:	lsl	r5, r2, #2
   137d0:	add	r0, r5, r2
   137d4:	add	r0, r2, r0, lsl #1
   137d8:	lsl	r0, r0, #2
   137dc:	cmp	r0, r3
   137e0:	bhi	13b90 <__assert_fail@plt+0x29ec>
   137e4:	add	r3, r0, #15
   137e8:	bic	r3, r3, #7
   137ec:	sub	sp, sp, r3
   137f0:	add	r8, sp, #8
   137f4:	cmp	r8, #0
   137f8:	beq	13b70 <__assert_fail@plt+0x29cc>
   137fc:	ldr	r3, [fp, #-216]	; 0xffffff28
   13800:	mov	r6, #0
   13804:	add	r5, r5, r3
   13808:	str	r4, [fp, #-192]	; 0xffffff40
   1380c:	add	r9, r8, r5, lsl #3
   13810:	str	r6, [fp, #-200]	; 0xffffff38
   13814:	strb	r6, [fp, #-208]	; 0xffffff30
   13818:	str	r6, [fp, #-204]	; 0xffffff34
   1381c:	strb	r6, [fp, #-196]	; 0xffffff3c
   13820:	add	r5, r8, #16
   13824:	ldr	r7, [pc, #1952]	; 13fcc <__assert_fail@plt+0x2e28>
   13828:	b	138ac <__assert_fail@plt+0x2708>
   1382c:	ldrb	r3, [r4]
   13830:	and	r2, r3, #31
   13834:	lsr	r3, r3, #5
   13838:	ldr	r3, [r7, r3, lsl #2]
   1383c:	lsr	r3, r3, r2
   13840:	tst	r3, #1
   13844:	beq	13b9c <__assert_fail@plt+0x29f8>
   13848:	mov	r3, #1
   1384c:	str	r3, [fp, #-188]	; 0xffffff44
   13850:	ldrb	r4, [r4]
   13854:	strb	r3, [fp, #-184]	; 0xffffff48
   13858:	strb	r3, [fp, #-196]	; 0xffffff3c
   1385c:	cmp	r4, #0
   13860:	str	r4, [fp, #-180]	; 0xffffff4c
   13864:	beq	13920 <__assert_fail@plt+0x277c>
   13868:	mov	r3, #1
   1386c:	ldr	r1, [fp, #-192]	; 0xffffff40
   13870:	sub	r2, fp, #176	; 0xb0
   13874:	cmp	r1, r2
   13878:	ldr	r2, [fp, #-188]	; 0xffffff44
   1387c:	strne	r1, [r5, #-16]
   13880:	beq	13bb8 <__assert_fail@plt+0x2a14>
   13884:	cmp	r3, #0
   13888:	str	r2, [r5, #-12]
   1388c:	strb	r3, [r5, #-8]
   13890:	ldrne	r3, [fp, #-180]	; 0xffffff4c
   13894:	ldr	r4, [fp, #-192]	; 0xffffff40
   13898:	strne	r3, [r5, #-4]
   1389c:	add	r5, r5, #40	; 0x28
   138a0:	add	r4, r4, r2
   138a4:	strb	r6, [fp, #-196]	; 0xffffff3c
   138a8:	str	r4, [fp, #-192]	; 0xffffff40
   138ac:	ldrb	r3, [fp, #-208]	; 0xffffff30
   138b0:	cmp	r3, #0
   138b4:	beq	1382c <__assert_fail@plt+0x2688>
   138b8:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   138bc:	mov	r1, r0
   138c0:	mov	r0, r4
   138c4:	bl	1294c <__assert_fail@plt+0x17a8>
   138c8:	sub	r3, fp, #204	; 0xcc
   138cc:	mov	r1, r4
   138d0:	mov	r2, r0
   138d4:	sub	r0, fp, #180	; 0xb4
   138d8:	bl	13048 <__assert_fail@plt+0x1ea4>
   138dc:	cmn	r0, #1
   138e0:	str	r0, [fp, #-188]	; 0xffffff44
   138e4:	beq	13bd0 <__assert_fail@plt+0x2a2c>
   138e8:	cmn	r0, #2
   138ec:	beq	13be8 <__assert_fail@plt+0x2a44>
   138f0:	cmp	r0, #0
   138f4:	beq	13c08 <__assert_fail@plt+0x2a64>
   138f8:	ldr	r4, [fp, #-180]	; 0xffffff4c
   138fc:	mov	sl, #1
   13900:	sub	r0, fp, #204	; 0xcc
   13904:	strb	sl, [fp, #-184]	; 0xffffff48
   13908:	bl	10f4c <mbsinit@plt>
   1390c:	strb	sl, [fp, #-196]	; 0xffffff3c
   13910:	cmp	r0, #0
   13914:	strbne	r6, [fp, #-208]	; 0xffffff30
   13918:	cmp	r4, #0
   1391c:	bne	13868 <__assert_fail@plt+0x26c4>
   13920:	ldr	r3, [fp, #-216]	; 0xffffff28
   13924:	cmp	r3, #2
   13928:	mov	r3, #1
   1392c:	str	r3, [r9, #4]
   13930:	bls	139c4 <__assert_fail@plt+0x2820>
   13934:	ldr	sl, [fp, #-216]	; 0xffffff28
   13938:	mov	r5, r8
   1393c:	mov	r7, #2
   13940:	ldrb	r6, [r5, #48]	; 0x30
   13944:	b	13974 <__assert_fail@plt+0x27d0>
   13948:	ldrb	r2, [r3, #8]
   1394c:	cmp	r2, #0
   13950:	beq	13984 <__assert_fail@plt+0x27e0>
   13954:	ldr	r3, [r3, #12]
   13958:	ldr	r2, [r5, #52]	; 0x34
   1395c:	cmp	r2, r3
   13960:	beq	139a8 <__assert_fail@plt+0x2804>
   13964:	cmp	r4, #0
   13968:	beq	13ee4 <__assert_fail@plt+0x2d40>
   1396c:	ldr	r3, [r9, r4, lsl #2]
   13970:	sub	r4, r4, r3
   13974:	add	r3, r4, r4, lsl #2
   13978:	cmp	r6, #0
   1397c:	add	r3, r8, r3, lsl #3
   13980:	bne	13948 <__assert_fail@plt+0x27a4>
   13984:	ldr	r2, [r5, #44]	; 0x2c
   13988:	ldr	r1, [r3, #4]
   1398c:	cmp	r2, r1
   13990:	bne	13964 <__assert_fail@plt+0x27c0>
   13994:	ldr	r1, [r3]
   13998:	ldr	r0, [r5, #40]	; 0x28
   1399c:	bl	10f64 <memcmp@plt>
   139a0:	cmp	r0, #0
   139a4:	bne	13964 <__assert_fail@plt+0x27c0>
   139a8:	add	r4, r4, #1
   139ac:	sub	r3, r7, r4
   139b0:	str	r3, [r9, r7, lsl #2]
   139b4:	add	r7, r7, #1
   139b8:	cmp	sl, r7
   139bc:	add	r5, r5, #40	; 0x28
   139c0:	bne	13940 <__assert_fail@plt+0x279c>
   139c4:	ldr	r1, [fp, #-220]	; 0xffffff24
   139c8:	mov	r2, #0
   139cc:	str	r1, [fp, #-136]	; 0xffffff78
   139d0:	str	r1, [fp, #-80]	; 0xffffffb0
   139d4:	ldr	sl, [pc, #1520]	; 13fcc <__assert_fail@plt+0x2e28>
   139d8:	ldr	r1, [fp, #-224]	; 0xffffff20
   139dc:	mov	r3, r2
   139e0:	mov	r7, r2
   139e4:	mov	r6, #1
   139e8:	str	r2, [r1]
   139ec:	strb	r2, [fp, #-152]	; 0xffffff68
   139f0:	str	r2, [fp, #-148]	; 0xffffff6c
   139f4:	strb	r2, [fp, #-140]	; 0xffffff74
   139f8:	strb	r2, [fp, #-96]	; 0xffffffa0
   139fc:	str	r2, [fp, #-92]	; 0xffffffa4
   13a00:	strb	r2, [fp, #-84]	; 0xffffffac
   13a04:	str	r2, [fp, #-144]	; 0xffffff70
   13a08:	str	r2, [fp, #-88]	; 0xffffffa8
   13a0c:	cmp	r3, #0
   13a10:	ldreq	r5, [fp, #-80]	; 0xffffffb0
   13a14:	beq	13ac8 <__assert_fail@plt+0x2924>
   13a18:	ldrb	r3, [fp, #-72]	; 0xffffffb8
   13a1c:	cmp	r3, #0
   13a20:	ldrne	r4, [fp, #-68]	; 0xffffffbc
   13a24:	bne	13b04 <__assert_fail@plt+0x2960>
   13a28:	add	r3, r7, r7, lsl #2
   13a2c:	add	r3, r8, r3, lsl #3
   13a30:	ldr	r2, [r3, #4]
   13a34:	ldr	r4, [fp, #-76]	; 0xffffffb4
   13a38:	cmp	r2, r4
   13a3c:	beq	13cac <__assert_fail@plt+0x2b08>
   13a40:	cmp	r7, #0
   13a44:	bne	13cd0 <__assert_fail@plt+0x2b2c>
   13a48:	ldrb	r3, [fp, #-140]	; 0xffffff74
   13a4c:	cmp	r3, #0
   13a50:	bne	13f2c <__assert_fail@plt+0x2d88>
   13a54:	ldrb	r3, [fp, #-152]	; 0xffffff68
   13a58:	ldr	r4, [fp, #-136]	; 0xffffff78
   13a5c:	cmp	r3, #0
   13a60:	bne	13e7c <__assert_fail@plt+0x2cd8>
   13a64:	ldrb	r3, [r4]
   13a68:	and	r2, r3, #31
   13a6c:	lsr	r3, r3, #5
   13a70:	ldr	r3, [sl, r3, lsl #2]
   13a74:	lsr	r3, r3, r2
   13a78:	tst	r3, #1
   13a7c:	beq	13e68 <__assert_fail@plt+0x2cc4>
   13a80:	str	r6, [fp, #-132]	; 0xffffff7c
   13a84:	ldrb	r4, [r4]
   13a88:	strb	r6, [fp, #-128]	; 0xffffff80
   13a8c:	strb	r6, [fp, #-140]	; 0xffffff74
   13a90:	str	r4, [fp, #-124]	; 0xffffff84
   13a94:	cmp	r4, #0
   13a98:	beq	13d68 <__assert_fail@plt+0x2bc4>
   13a9c:	ldr	r4, [fp, #-136]	; 0xffffff78
   13aa0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   13aa4:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13aa8:	add	r4, r4, r3
   13aac:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13ab0:	str	r4, [fp, #-136]	; 0xffffff78
   13ab4:	add	r5, r5, r3
   13ab8:	mov	r3, #0
   13abc:	str	r5, [fp, #-80]	; 0xffffffb0
   13ac0:	strb	r3, [fp, #-140]	; 0xffffff74
   13ac4:	strb	r3, [fp, #-84]	; 0xffffffac
   13ac8:	ldrb	r3, [fp, #-96]	; 0xffffffa0
   13acc:	cmp	r3, #0
   13ad0:	bne	13c44 <__assert_fail@plt+0x2aa0>
   13ad4:	ldrb	r3, [r5]
   13ad8:	and	r2, r3, #31
   13adc:	lsr	r3, r3, #5
   13ae0:	ldr	r3, [sl, r3, lsl #2]
   13ae4:	lsr	r3, r3, r2
   13ae8:	tst	r3, #1
   13aec:	beq	13c30 <__assert_fail@plt+0x2a8c>
   13af0:	str	r6, [fp, #-76]	; 0xffffffb4
   13af4:	ldrb	r4, [r5]
   13af8:	strb	r6, [fp, #-72]	; 0xffffffb8
   13afc:	strb	r6, [fp, #-84]	; 0xffffffac
   13b00:	str	r4, [fp, #-68]	; 0xffffffbc
   13b04:	cmp	r4, #0
   13b08:	beq	13b60 <__assert_fail@plt+0x29bc>
   13b0c:	add	r3, r7, r7, lsl #2
   13b10:	add	r3, r8, r3, lsl #3
   13b14:	ldrb	r2, [r3, #8]
   13b18:	cmp	r2, #0
   13b1c:	beq	13a30 <__assert_fail@plt+0x288c>
   13b20:	ldr	r3, [r3, #12]
   13b24:	cmp	r3, r4
   13b28:	bne	13a40 <__assert_fail@plt+0x289c>
   13b2c:	ldr	r4, [fp, #-76]	; 0xffffffb4
   13b30:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13b34:	ldr	r3, [fp, #-216]	; 0xffffff28
   13b38:	add	r7, r7, #1
   13b3c:	cmp	r3, r7
   13b40:	add	r5, r5, r4
   13b44:	mov	r3, #0
   13b48:	str	r5, [fp, #-80]	; 0xffffffb0
   13b4c:	strb	r3, [fp, #-84]	; 0xffffffac
   13b50:	bne	13ac8 <__assert_fail@plt+0x2924>
   13b54:	ldr	r2, [fp, #-224]	; 0xffffff20
   13b58:	ldr	r3, [fp, #-136]	; 0xffffff78
   13b5c:	str	r3, [r2]
   13b60:	mov	r0, r8
   13b64:	bl	151ec <__assert_fail@plt+0x4048>
   13b68:	mov	r0, #1
   13b6c:	b	13b74 <__assert_fail@plt+0x29d0>
   13b70:	mov	r0, #0
   13b74:	ldr	r3, [pc, #1092]	; 13fc0 <__assert_fail@plt+0x2e1c>
   13b78:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13b7c:	ldr	r3, [r3]
   13b80:	cmp	r2, r3
   13b84:	bne	13fbc <__assert_fail@plt+0x2e18>
   13b88:	sub	sp, fp, #32
   13b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b90:	bl	15180 <__assert_fail@plt+0x3fdc>
   13b94:	mov	r8, r0
   13b98:	b	137f4 <__assert_fail@plt+0x2650>
   13b9c:	sub	r0, fp, #204	; 0xcc
   13ba0:	bl	10f4c <mbsinit@plt>
   13ba4:	cmp	r0, #0
   13ba8:	beq	13f94 <__assert_fail@plt+0x2df0>
   13bac:	mov	r3, #1
   13bb0:	strb	r3, [fp, #-208]	; 0xffffff30
   13bb4:	b	138b8 <__assert_fail@plt+0x2714>
   13bb8:	mov	r0, r5
   13bbc:	bl	10f40 <memcpy@plt>
   13bc0:	str	r5, [r5, #-16]
   13bc4:	ldrb	r3, [fp, #-184]	; 0xffffff48
   13bc8:	ldr	r2, [fp, #-188]	; 0xffffff44
   13bcc:	b	13884 <__assert_fail@plt+0x26e0>
   13bd0:	mov	r3, #1
   13bd4:	str	r3, [fp, #-188]	; 0xffffff44
   13bd8:	strb	r3, [fp, #-196]	; 0xffffff3c
   13bdc:	strb	r6, [fp, #-184]	; 0xffffff48
   13be0:	mov	r3, #0
   13be4:	b	1386c <__assert_fail@plt+0x26c8>
   13be8:	ldr	r0, [fp, #-192]	; 0xffffff40
   13bec:	bl	1106c <strlen@plt>
   13bf0:	mov	r3, #1
   13bf4:	strb	r3, [fp, #-196]	; 0xffffff3c
   13bf8:	strb	r6, [fp, #-184]	; 0xffffff48
   13bfc:	mov	r3, #0
   13c00:	str	r0, [fp, #-188]	; 0xffffff44
   13c04:	b	1386c <__assert_fail@plt+0x26c8>
   13c08:	ldr	r3, [fp, #-192]	; 0xffffff40
   13c0c:	mov	r2, #1
   13c10:	str	r2, [fp, #-188]	; 0xffffff44
   13c14:	ldrb	r3, [r3]
   13c18:	cmp	r3, #0
   13c1c:	bne	13fa8 <__assert_fail@plt+0x2e04>
   13c20:	ldr	r4, [fp, #-180]	; 0xffffff4c
   13c24:	cmp	r4, #0
   13c28:	beq	138fc <__assert_fail@plt+0x2758>
   13c2c:	bl	13764 <__assert_fail@plt+0x25c0>
   13c30:	sub	r0, fp, #92	; 0x5c
   13c34:	bl	10f4c <mbsinit@plt>
   13c38:	cmp	r0, #0
   13c3c:	beq	13f94 <__assert_fail@plt+0x2df0>
   13c40:	strb	r6, [fp, #-96]	; 0xffffffa0
   13c44:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   13c48:	mov	r1, r0
   13c4c:	mov	r0, r5
   13c50:	bl	1294c <__assert_fail@plt+0x17a8>
   13c54:	sub	r3, fp, #92	; 0x5c
   13c58:	mov	r1, r5
   13c5c:	mov	r2, r0
   13c60:	sub	r0, fp, #68	; 0x44
   13c64:	bl	13048 <__assert_fail@plt+0x1ea4>
   13c68:	cmn	r0, #1
   13c6c:	str	r0, [fp, #-76]	; 0xffffffb4
   13c70:	beq	13e54 <__assert_fail@plt+0x2cb0>
   13c74:	cmn	r0, #2
   13c78:	beq	13eec <__assert_fail@plt+0x2d48>
   13c7c:	cmp	r0, #0
   13c80:	beq	13f08 <__assert_fail@plt+0x2d64>
   13c84:	ldr	r4, [fp, #-68]	; 0xffffffbc
   13c88:	sub	r0, fp, #92	; 0x5c
   13c8c:	strb	r6, [fp, #-72]	; 0xffffffb8
   13c90:	bl	10f4c <mbsinit@plt>
   13c94:	cmp	r0, #0
   13c98:	movne	r3, #0
   13c9c:	strbeq	r6, [fp, #-84]	; 0xffffffac
   13ca0:	strbne	r6, [fp, #-84]	; 0xffffffac
   13ca4:	strbne	r3, [fp, #-96]	; 0xffffffa0
   13ca8:	b	13b04 <__assert_fail@plt+0x2960>
   13cac:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13cb0:	ldr	r0, [r3]
   13cb4:	mov	r1, r5
   13cb8:	mov	r2, r4
   13cbc:	bl	10f64 <memcmp@plt>
   13cc0:	cmp	r0, #0
   13cc4:	beq	13b34 <__assert_fail@plt+0x2990>
   13cc8:	cmp	r7, #0
   13ccc:	beq	13a48 <__assert_fail@plt+0x28a4>
   13cd0:	ldr	r5, [r9, r7, lsl #2]
   13cd4:	sub	r3, r7, r5
   13cd8:	cmp	r5, #0
   13cdc:	str	r3, [fp, #-220]	; 0xffffff24
   13ce0:	beq	13e4c <__assert_fail@plt+0x2ca8>
   13ce4:	ldrb	r3, [fp, #-140]	; 0xffffff74
   13ce8:	cmp	r3, #0
   13cec:	ldreq	r4, [fp, #-136]	; 0xffffff78
   13cf0:	beq	13d24 <__assert_fail@plt+0x2b80>
   13cf4:	ldrb	r3, [fp, #-128]	; 0xffffff80
   13cf8:	cmp	r3, #0
   13cfc:	ldrne	r4, [fp, #-124]	; 0xffffff84
   13d00:	bne	13d60 <__assert_fail@plt+0x2bbc>
   13d04:	ldr	r4, [fp, #-136]	; 0xffffff78
   13d08:	ldr	r3, [fp, #-132]	; 0xffffff7c
   13d0c:	subs	r5, r5, #1
   13d10:	add	r4, r4, r3
   13d14:	mov	r3, #0
   13d18:	str	r4, [fp, #-136]	; 0xffffff78
   13d1c:	strb	r3, [fp, #-140]	; 0xffffff74
   13d20:	beq	13e48 <__assert_fail@plt+0x2ca4>
   13d24:	ldrb	r3, [fp, #-152]	; 0xffffff68
   13d28:	cmp	r3, #0
   13d2c:	bne	13d80 <__assert_fail@plt+0x2bdc>
   13d30:	ldrb	r3, [r4]
   13d34:	and	r2, r3, #31
   13d38:	lsr	r3, r3, #5
   13d3c:	ldr	r3, [sl, r3, lsl #2]
   13d40:	lsr	r3, r3, r2
   13d44:	tst	r3, #1
   13d48:	beq	13d6c <__assert_fail@plt+0x2bc8>
   13d4c:	str	r6, [fp, #-132]	; 0xffffff7c
   13d50:	ldrb	r4, [r4]
   13d54:	strb	r6, [fp, #-128]	; 0xffffff80
   13d58:	strb	r6, [fp, #-140]	; 0xffffff74
   13d5c:	str	r4, [fp, #-124]	; 0xffffff84
   13d60:	cmp	r4, #0
   13d64:	bne	13d04 <__assert_fail@plt+0x2b60>
   13d68:	bl	1118c <abort@plt>
   13d6c:	sub	r0, fp, #148	; 0x94
   13d70:	bl	10f4c <mbsinit@plt>
   13d74:	cmp	r0, #0
   13d78:	beq	13f94 <__assert_fail@plt+0x2df0>
   13d7c:	strb	r6, [fp, #-152]	; 0xffffff68
   13d80:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   13d84:	mov	r1, r0
   13d88:	mov	r0, r4
   13d8c:	bl	1294c <__assert_fail@plt+0x17a8>
   13d90:	sub	r3, fp, #148	; 0x94
   13d94:	mov	r1, r4
   13d98:	mov	r2, r0
   13d9c:	sub	r0, fp, #124	; 0x7c
   13da0:	bl	13048 <__assert_fail@plt+0x1ea4>
   13da4:	cmn	r0, #1
   13da8:	str	r0, [fp, #-132]	; 0xffffff7c
   13dac:	beq	13de8 <__assert_fail@plt+0x2c44>
   13db0:	cmn	r0, #2
   13db4:	beq	13df8 <__assert_fail@plt+0x2c54>
   13db8:	cmp	r0, #0
   13dbc:	beq	13e14 <__assert_fail@plt+0x2c70>
   13dc0:	ldr	r4, [fp, #-124]	; 0xffffff84
   13dc4:	sub	r0, fp, #148	; 0x94
   13dc8:	strb	r6, [fp, #-128]	; 0xffffff80
   13dcc:	bl	10f4c <mbsinit@plt>
   13dd0:	cmp	r0, #0
   13dd4:	movne	r3, #0
   13dd8:	strbeq	r6, [fp, #-140]	; 0xffffff74
   13ddc:	strbne	r6, [fp, #-140]	; 0xffffff74
   13de0:	strbne	r3, [fp, #-152]	; 0xffffff68
   13de4:	b	13d60 <__assert_fail@plt+0x2bbc>
   13de8:	mov	r3, #0
   13dec:	str	r6, [fp, #-132]	; 0xffffff7c
   13df0:	strb	r3, [fp, #-128]	; 0xffffff80
   13df4:	b	13d04 <__assert_fail@plt+0x2b60>
   13df8:	ldr	r4, [fp, #-136]	; 0xffffff78
   13dfc:	mov	r0, r4
   13e00:	bl	1106c <strlen@plt>
   13e04:	mov	r3, #0
   13e08:	strb	r3, [fp, #-128]	; 0xffffff80
   13e0c:	str	r0, [fp, #-132]	; 0xffffff7c
   13e10:	b	13d08 <__assert_fail@plt+0x2b64>
   13e14:	ldr	r4, [fp, #-136]	; 0xffffff78
   13e18:	str	r6, [fp, #-132]	; 0xffffff7c
   13e1c:	ldrb	r3, [r4]
   13e20:	cmp	r3, #0
   13e24:	bne	13fa8 <__assert_fail@plt+0x2e04>
   13e28:	ldr	r4, [fp, #-124]	; 0xffffff84
   13e2c:	cmp	r4, #0
   13e30:	beq	13dc4 <__assert_fail@plt+0x2c20>
   13e34:	ldr	r3, [pc, #404]	; 13fd0 <__assert_fail@plt+0x2e2c>
   13e38:	mov	r2, #179	; 0xb3
   13e3c:	ldr	r1, [pc, #400]	; 13fd4 <__assert_fail@plt+0x2e30>
   13e40:	ldr	r0, [pc, #400]	; 13fd8 <__assert_fail@plt+0x2e34>
   13e44:	bl	111a4 <__assert_fail@plt>
   13e48:	ldr	r7, [fp, #-220]	; 0xffffff24
   13e4c:	ldrb	r3, [fp, #-84]	; 0xffffffac
   13e50:	b	13a0c <__assert_fail@plt+0x2868>
   13e54:	mov	r3, #0
   13e58:	str	r6, [fp, #-76]	; 0xffffffb4
   13e5c:	strb	r6, [fp, #-84]	; 0xffffffac
   13e60:	strb	r3, [fp, #-72]	; 0xffffffb8
   13e64:	b	13a28 <__assert_fail@plt+0x2884>
   13e68:	sub	r0, fp, #148	; 0x94
   13e6c:	bl	10f4c <mbsinit@plt>
   13e70:	cmp	r0, #0
   13e74:	beq	13f94 <__assert_fail@plt+0x2df0>
   13e78:	strb	r6, [fp, #-152]	; 0xffffff68
   13e7c:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   13e80:	mov	r1, r0
   13e84:	mov	r0, r4
   13e88:	bl	1294c <__assert_fail@plt+0x17a8>
   13e8c:	sub	r3, fp, #148	; 0x94
   13e90:	mov	r1, r4
   13e94:	mov	r2, r0
   13e98:	sub	r0, fp, #124	; 0x7c
   13e9c:	bl	13048 <__assert_fail@plt+0x1ea4>
   13ea0:	cmn	r0, #1
   13ea4:	str	r0, [fp, #-132]	; 0xffffff7c
   13ea8:	beq	13f40 <__assert_fail@plt+0x2d9c>
   13eac:	cmn	r0, #2
   13eb0:	beq	13f54 <__assert_fail@plt+0x2db0>
   13eb4:	cmp	r0, #0
   13eb8:	beq	13f70 <__assert_fail@plt+0x2dcc>
   13ebc:	ldr	r4, [fp, #-124]	; 0xffffff84
   13ec0:	sub	r0, fp, #148	; 0x94
   13ec4:	strb	r6, [fp, #-128]	; 0xffffff80
   13ec8:	bl	10f4c <mbsinit@plt>
   13ecc:	cmp	r0, #0
   13ed0:	movne	r3, #0
   13ed4:	strbeq	r6, [fp, #-140]	; 0xffffff74
   13ed8:	strbne	r6, [fp, #-140]	; 0xffffff74
   13edc:	strbne	r3, [fp, #-152]	; 0xffffff68
   13ee0:	b	13a94 <__assert_fail@plt+0x28f0>
   13ee4:	str	r7, [r9, r7, lsl #2]
   13ee8:	b	139b4 <__assert_fail@plt+0x2810>
   13eec:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13ef0:	bl	1106c <strlen@plt>
   13ef4:	mov	r3, #0
   13ef8:	strb	r6, [fp, #-84]	; 0xffffffac
   13efc:	strb	r3, [fp, #-72]	; 0xffffffb8
   13f00:	str	r0, [fp, #-76]	; 0xffffffb4
   13f04:	b	13a28 <__assert_fail@plt+0x2884>
   13f08:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13f0c:	str	r6, [fp, #-76]	; 0xffffffb4
   13f10:	ldrb	r3, [r5]
   13f14:	cmp	r3, #0
   13f18:	bne	13fa8 <__assert_fail@plt+0x2e04>
   13f1c:	ldr	r4, [fp, #-68]	; 0xffffffbc
   13f20:	cmp	r4, #0
   13f24:	beq	13c88 <__assert_fail@plt+0x2ae4>
   13f28:	b	13c2c <__assert_fail@plt+0x2a88>
   13f2c:	ldrb	r3, [fp, #-128]	; 0xffffff80
   13f30:	cmp	r3, #0
   13f34:	ldrne	r4, [fp, #-124]	; 0xffffff84
   13f38:	beq	13a9c <__assert_fail@plt+0x28f8>
   13f3c:	b	13a94 <__assert_fail@plt+0x28f0>
   13f40:	mov	r3, #0
   13f44:	str	r6, [fp, #-132]	; 0xffffff7c
   13f48:	strb	r3, [fp, #-128]	; 0xffffff80
   13f4c:	ldr	r4, [fp, #-136]	; 0xffffff78
   13f50:	b	13aa0 <__assert_fail@plt+0x28fc>
   13f54:	ldr	r4, [fp, #-136]	; 0xffffff78
   13f58:	mov	r0, r4
   13f5c:	bl	1106c <strlen@plt>
   13f60:	mov	r3, #0
   13f64:	strb	r3, [fp, #-128]	; 0xffffff80
   13f68:	str	r0, [fp, #-132]	; 0xffffff7c
   13f6c:	b	13aa0 <__assert_fail@plt+0x28fc>
   13f70:	ldr	r4, [fp, #-136]	; 0xffffff78
   13f74:	str	r6, [fp, #-132]	; 0xffffff7c
   13f78:	ldrb	r3, [r4]
   13f7c:	cmp	r3, #0
   13f80:	bne	13fa8 <__assert_fail@plt+0x2e04>
   13f84:	ldr	r4, [fp, #-124]	; 0xffffff84
   13f88:	cmp	r4, #0
   13f8c:	beq	13ec0 <__assert_fail@plt+0x2d1c>
   13f90:	b	13c2c <__assert_fail@plt+0x2a88>
   13f94:	ldr	r3, [pc, #52]	; 13fd0 <__assert_fail@plt+0x2e2c>
   13f98:	mov	r2, #150	; 0x96
   13f9c:	ldr	r1, [pc, #48]	; 13fd4 <__assert_fail@plt+0x2e30>
   13fa0:	ldr	r0, [pc, #52]	; 13fdc <__assert_fail@plt+0x2e38>
   13fa4:	bl	111a4 <__assert_fail@plt>
   13fa8:	ldr	r3, [pc, #32]	; 13fd0 <__assert_fail@plt+0x2e2c>
   13fac:	mov	r2, #178	; 0xb2
   13fb0:	ldr	r1, [pc, #28]	; 13fd4 <__assert_fail@plt+0x2e30>
   13fb4:	ldr	r0, [pc, #36]	; 13fe0 <__assert_fail@plt+0x2e3c>
   13fb8:	bl	111a4 <__assert_fail@plt>
   13fbc:	bl	10f88 <__stack_chk_fail@plt>
   13fc0:	andeq	r5, r2, r8, lsl #30
   13fc4:	ldrbeq	r7, [r1, #1117]	; 0x45d
   13fc8:			; <UNDEFINED> instruction: 0x00000fb7
   13fcc:	andeq	r5, r1, r0, asr #24
   13fd0:	andeq	r5, r1, r0, ror #24
   13fd4:	andeq	r5, r1, r0, asr fp
   13fd8:	andeq	r5, r1, ip, asr fp
   13fdc:	andeq	r5, r1, r0, ror fp
   13fe0:	andeq	r5, r1, r8, lsl #23
   13fe4:	ldr	r3, [pc, #3108]	; 14c10 <__assert_fail@plt+0x3a6c>
   13fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fec:	sub	sp, sp, #308	; 0x134
   13ff0:	ldr	r3, [r3]
   13ff4:	str	r0, [sp, #4]
   13ff8:	mov	fp, r1
   13ffc:	str	r3, [sp, #300]	; 0x12c
   14000:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   14004:	cmp	r0, #1
   14008:	bhi	14234 <__assert_fail@plt+0x3090>
   1400c:	ldrb	r7, [fp]
   14010:	cmp	r7, #0
   14014:	beq	141b0 <__assert_fail@plt+0x300c>
   14018:	ldr	r3, [sp, #4]
   1401c:	ldrb	r8, [r3]
   14020:	add	r3, fp, #1
   14024:	str	r3, [sp, #8]
   14028:	cmp	r8, #0
   1402c:	beq	1422c <__assert_fail@plt+0x3088>
   14030:	ldr	sl, [sp, #4]
   14034:	mov	r5, #0
   14038:	mov	ip, r5
   1403c:	str	r5, [sp]
   14040:	mov	r9, fp
   14044:	mov	lr, #1
   14048:	mov	r6, sl
   1404c:	b	140b0 <__assert_fail@plt+0x2f0c>
   14050:	cmp	r9, #0
   14054:	str	r3, [sp, #4]
   14058:	beq	14080 <__assert_fail@plt+0x2edc>
   1405c:	ldr	r3, [sp]
   14060:	mov	r0, r9
   14064:	sub	r1, r4, r3
   14068:	bl	11114 <strnlen@plt>
   1406c:	ldr	r3, [sp, #4]
   14070:	ldrb	r2, [r9, r0]!
   14074:	cmp	r2, #0
   14078:	bne	14960 <__assert_fail@plt+0x37bc>
   1407c:	str	r4, [sp]
   14080:	mov	r0, fp
   14084:	bl	1106c <strlen@plt>
   14088:	add	r3, sp, #16
   1408c:	mov	r1, fp
   14090:	mov	r2, r0
   14094:	mov	r0, r6
   14098:	bl	135f0 <__assert_fail@plt+0x244c>
   1409c:	subs	lr, r0, #0
   140a0:	bne	14b9c <__assert_fail@plt+0x39f8>
   140a4:	ldrb	r8, [sl, r5]
   140a8:	mov	r9, lr
   140ac:	mov	ip, r4
   140b0:	add	r5, r5, #1
   140b4:	mov	r0, r6
   140b8:	cmp	r7, r8
   140bc:	add	r6, r5, sl
   140c0:	mov	r1, r6
   140c4:	add	r4, ip, #1
   140c8:	beq	141d0 <__assert_fail@plt+0x302c>
   140cc:	ldrb	r8, [sl, r5]
   140d0:	cmp	r8, #0
   140d4:	beq	1422c <__assert_fail@plt+0x3088>
   140d8:	cmp	r5, #9
   140dc:	movls	r3, #0
   140e0:	andhi	r3, lr, #1
   140e4:	cmp	r3, #0
   140e8:	beq	140ac <__assert_fail@plt+0x2f08>
   140ec:	add	r2, r5, r5, lsl #2
   140f0:	cmp	r4, r2
   140f4:	bcs	14050 <__assert_fail@plt+0x2eac>
   140f8:	mov	lr, r3
   140fc:	b	140ac <__assert_fail@plt+0x2f08>
   14100:	add	r0, sp, #24
   14104:	bl	10f4c <mbsinit@plt>
   14108:	cmp	r0, #0
   1410c:	beq	14be4 <__assert_fail@plt+0x3a40>
   14110:	mov	r5, #1
   14114:	strb	r5, [sp, #20]
   14118:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   1411c:	mov	r1, r0
   14120:	mov	r0, fp
   14124:	bl	1294c <__assert_fail@plt+0x17a8>
   14128:	add	r3, sp, #24
   1412c:	mov	r1, fp
   14130:	mov	r2, r0
   14134:	add	r0, sp, #48	; 0x30
   14138:	bl	13048 <__assert_fail@plt+0x1ea4>
   1413c:	cmn	r0, #1
   14140:	str	r0, [sp, #40]	; 0x28
   14144:	strbeq	r4, [sp, #44]	; 0x2c
   14148:	streq	r5, [sp, #40]	; 0x28
   1414c:	strbeq	r5, [sp, #32]
   14150:	beq	1429c <__assert_fail@plt+0x30f8>
   14154:	cmn	r0, #2
   14158:	beq	14288 <__assert_fail@plt+0x30e4>
   1415c:	cmp	r0, #0
   14160:	bne	14b7c <__assert_fail@plt+0x39d8>
   14164:	ldr	r3, [sp, #36]	; 0x24
   14168:	str	r5, [sp, #40]	; 0x28
   1416c:	ldrb	r3, [r3]
   14170:	cmp	r3, #0
   14174:	bne	14bf8 <__assert_fail@plt+0x3a54>
   14178:	ldr	r4, [sp, #48]	; 0x30
   1417c:	cmp	r4, #0
   14180:	bne	14bc4 <__assert_fail@plt+0x3a20>
   14184:	mov	r5, #1
   14188:	add	r0, sp, #24
   1418c:	strb	r5, [sp, #44]	; 0x2c
   14190:	bl	10f4c <mbsinit@plt>
   14194:	cmp	r0, #0
   14198:	movne	r3, #0
   1419c:	strbeq	r5, [sp, #32]
   141a0:	strbne	r5, [sp, #32]
   141a4:	strbne	r3, [sp, #20]
   141a8:	cmp	r4, #0
   141ac:	bne	1429c <__assert_fail@plt+0x30f8>
   141b0:	ldr	r0, [sp, #4]
   141b4:	ldr	r3, [pc, #2644]	; 14c10 <__assert_fail@plt+0x3a6c>
   141b8:	ldr	r2, [sp, #300]	; 0x12c
   141bc:	ldr	r3, [r3]
   141c0:	cmp	r2, r3
   141c4:	bne	14c0c <__assert_fail@plt+0x3a68>
   141c8:	add	sp, sp, #308	; 0x134
   141cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141d0:	ldrb	r3, [fp, #1]
   141d4:	cmp	r3, #0
   141d8:	beq	141b4 <__assert_fail@plt+0x3010>
   141dc:	ldrb	r8, [sl, r5]
   141e0:	cmp	r8, #0
   141e4:	beq	1422c <__assert_fail@plt+0x3088>
   141e8:	cmp	r3, r8
   141ec:	add	r4, ip, #2
   141f0:	bne	140d8 <__assert_fail@plt+0x2f34>
   141f4:	ldr	r3, [sp, #8]
   141f8:	add	r3, r3, #1
   141fc:	b	14214 <__assert_fail@plt+0x3070>
   14200:	add	r3, r3, #1
   14204:	cmp	r2, r4
   14208:	sub	r4, r3, fp
   1420c:	add	r4, r4, ip
   14210:	bne	140d8 <__assert_fail@plt+0x2f34>
   14214:	ldrb	r2, [r3]
   14218:	cmp	r2, #0
   1421c:	beq	141b4 <__assert_fail@plt+0x3010>
   14220:	ldrb	r4, [r1, #1]!
   14224:	cmp	r4, #0
   14228:	bne	14200 <__assert_fail@plt+0x305c>
   1422c:	mov	r0, #0
   14230:	b	141b4 <__assert_fail@plt+0x3010>
   14234:	ldrb	r1, [fp]
   14238:	ldr	r8, [pc, #2516]	; 14c14 <__assert_fail@plt+0x3a70>
   1423c:	str	fp, [sp, #36]	; 0x24
   14240:	and	r0, r1, #31
   14244:	lsr	r3, r1, #5
   14248:	ldr	r2, [r8, r3, lsl #2]
   1424c:	mov	r3, #0
   14250:	str	r3, [sp, #28]
   14254:	lsr	r2, r2, r0
   14258:	ands	r4, r2, #1
   1425c:	strb	r3, [sp, #20]
   14260:	str	r3, [sp, #24]
   14264:	strb	r3, [sp, #32]
   14268:	beq	14100 <__assert_fail@plt+0x2f5c>
   1426c:	mov	r3, #1
   14270:	str	r1, [sp, #48]	; 0x30
   14274:	mov	r4, r1
   14278:	str	r3, [sp, #40]	; 0x28
   1427c:	strb	r3, [sp, #44]	; 0x2c
   14280:	strb	r3, [sp, #32]
   14284:	b	141a8 <__assert_fail@plt+0x3004>
   14288:	ldr	r0, [sp, #36]	; 0x24
   1428c:	bl	1106c <strlen@plt>
   14290:	strb	r4, [sp, #44]	; 0x2c
   14294:	strb	r5, [sp, #32]
   14298:	str	r0, [sp, #40]	; 0x28
   1429c:	mov	r3, #0
   142a0:	str	r3, [sp, #12]
   142a4:	mov	r6, r3
   142a8:	mov	r7, r3
   142ac:	str	fp, [sp, #92]	; 0x5c
   142b0:	strb	r3, [sp, #76]	; 0x4c
   142b4:	str	r3, [sp, #80]	; 0x50
   142b8:	strb	r3, [sp, #88]	; 0x58
   142bc:	strb	r3, [sp, #132]	; 0x84
   142c0:	str	r3, [sp, #136]	; 0x88
   142c4:	strb	r3, [sp, #144]	; 0x90
   142c8:	str	r3, [sp, #84]	; 0x54
   142cc:	str	r3, [sp, #140]	; 0x8c
   142d0:	str	fp, [sp, #8]
   142d4:	mov	fp, r3
   142d8:	ldrb	r3, [sp, #132]	; 0x84
   142dc:	mov	r1, #1
   142e0:	str	r1, [sp]
   142e4:	mov	r4, r1
   142e8:	mov	r9, r1
   142ec:	ldr	r1, [sp, #4]
   142f0:	cmp	r3, #0
   142f4:	mov	r5, r1
   142f8:	str	r1, [sp, #148]	; 0x94
   142fc:	bne	145dc <__assert_fail@plt+0x3438>
   14300:	ldrb	r3, [r5]
   14304:	and	r2, r3, #31
   14308:	lsr	r3, r3, #5
   1430c:	ldr	r3, [r8, r3, lsl #2]
   14310:	lsr	r3, r3, r2
   14314:	tst	r3, #1
   14318:	beq	1490c <__assert_fail@plt+0x3768>
   1431c:	str	r9, [sp, #152]	; 0x98
   14320:	ldrb	r5, [r5]
   14324:	strb	r4, [sp, #156]	; 0x9c
   14328:	strb	r4, [sp, #144]	; 0x90
   1432c:	str	r5, [sp, #160]	; 0xa0
   14330:	cmp	r5, #0
   14334:	beq	1422c <__assert_fail@plt+0x3088>
   14338:	ldr	r3, [sp]
   1433c:	cmp	fp, #9
   14340:	movls	r3, #0
   14344:	andhi	r3, r3, #1
   14348:	cmp	r3, #0
   1434c:	addeq	r6, r6, #1
   14350:	beq	14368 <__assert_fail@plt+0x31c4>
   14354:	add	r2, fp, fp, lsl #2
   14358:	cmp	r6, r2
   1435c:	addcc	r6, r6, #1
   14360:	strcc	r3, [sp]
   14364:	bcs	14794 <__assert_fail@plt+0x35f0>
   14368:	ldrb	r3, [sp, #44]	; 0x2c
   1436c:	cmp	r3, #0
   14370:	beq	14724 <__assert_fail@plt+0x3580>
   14374:	ldr	r2, [sp, #160]	; 0xa0
   14378:	ldr	r3, [sp, #48]	; 0x30
   1437c:	cmp	r2, r3
   14380:	bne	145b8 <__assert_fail@plt+0x3414>
   14384:	add	lr, sp, #132	; 0x84
   14388:	add	ip, sp, #188	; 0xbc
   1438c:	ldm	lr!, {r0, r1, r2, r3}
   14390:	stmia	ip!, {r0, r1, r2, r3}
   14394:	ldm	lr!, {r0, r1, r2, r3}
   14398:	strb	r7, [sp, #200]	; 0xc8
   1439c:	stmia	ip!, {r0, r1, r2, r3}
   143a0:	ldm	lr!, {r0, r1, r2, r3}
   143a4:	ldr	r5, [sp, #204]	; 0xcc
   143a8:	stmia	ip!, {r0, r1, r2, r3}
   143ac:	ldm	lr, {r0, r1}
   143b0:	ldr	r3, [sp, #208]	; 0xd0
   143b4:	add	r5, r5, r3
   143b8:	stm	ip, {r0, r1}
   143bc:	str	r5, [sp, #204]	; 0xcc
   143c0:	ldr	r3, [sp, #8]
   143c4:	strb	r7, [sp, #244]	; 0xf4
   143c8:	str	r3, [sp, #260]	; 0x104
   143cc:	ldrb	r3, [r3]
   143d0:	str	r7, [sp, #248]	; 0xf8
   143d4:	strb	r7, [sp, #256]	; 0x100
   143d8:	and	r2, r3, #31
   143dc:	lsr	r1, r3, #5
   143e0:	str	r7, [sp, #252]	; 0xfc
   143e4:	ldr	sl, [r8, r1, lsl #2]
   143e8:	lsr	sl, sl, r2
   143ec:	ands	sl, sl, #1
   143f0:	beq	14a00 <__assert_fail@plt+0x385c>
   143f4:	mov	r5, r3
   143f8:	cmp	r5, #0
   143fc:	str	r9, [sp, #264]	; 0x108
   14400:	str	r3, [sp, #272]	; 0x110
   14404:	strb	r4, [sp, #268]	; 0x10c
   14408:	strb	r4, [sp, #256]	; 0x100
   1440c:	beq	14a7c <__assert_fail@plt+0x38d8>
   14410:	ldr	r5, [sp, #260]	; 0x104
   14414:	ldr	r3, [sp, #264]	; 0x108
   14418:	add	r6, r6, #1
   1441c:	add	r5, r5, r3
   14420:	strb	r7, [sp, #256]	; 0x100
   14424:	str	r5, [sp, #260]	; 0x104
   14428:	b	14510 <__assert_fail@plt+0x336c>
   1442c:	ldrb	r3, [r5]
   14430:	and	r2, r3, #31
   14434:	lsr	r3, r3, #5
   14438:	ldr	r3, [r8, r3, lsl #2]
   1443c:	lsr	r3, r3, r2
   14440:	tst	r3, #1
   14444:	beq	14708 <__assert_fail@plt+0x3564>
   14448:	str	r9, [sp, #264]	; 0x108
   1444c:	ldrb	r5, [r5]
   14450:	strb	r4, [sp, #268]	; 0x10c
   14454:	strb	r4, [sp, #256]	; 0x100
   14458:	cmp	r5, #0
   1445c:	str	r5, [sp, #272]	; 0x110
   14460:	beq	1458c <__assert_fail@plt+0x33e8>
   14464:	ldrb	r3, [sp, #200]	; 0xc8
   14468:	cmp	r3, #0
   1446c:	bne	146d0 <__assert_fail@plt+0x352c>
   14470:	ldrb	r3, [sp, #188]	; 0xbc
   14474:	ldr	r5, [sp, #204]	; 0xcc
   14478:	cmp	r3, #0
   1447c:	addne	sl, sp, #192	; 0xc0
   14480:	bne	14664 <__assert_fail@plt+0x34c0>
   14484:	ldrb	r3, [r5]
   14488:	and	r2, r3, #31
   1448c:	lsr	r3, r3, #5
   14490:	ldr	r3, [r8, r3, lsl #2]
   14494:	lsr	r3, r3, r2
   14498:	tst	r3, #1
   1449c:	beq	1464c <__assert_fail@plt+0x34a8>
   144a0:	str	r9, [sp, #208]	; 0xd0
   144a4:	ldrb	r0, [r5]
   144a8:	strb	r4, [sp, #212]	; 0xd4
   144ac:	strb	r4, [sp, #200]	; 0xc8
   144b0:	mov	r5, r0
   144b4:	str	r0, [sp, #216]	; 0xd8
   144b8:	cmp	r5, #0
   144bc:	beq	1422c <__assert_fail@plt+0x3088>
   144c0:	ldrb	r3, [sp, #268]	; 0x10c
   144c4:	cmp	r3, #0
   144c8:	beq	145a8 <__assert_fail@plt+0x3404>
   144cc:	ldr	r0, [sp, #272]	; 0x110
   144d0:	subs	r0, r0, r5
   144d4:	movne	r0, #1
   144d8:	cmp	r0, #0
   144dc:	add	r1, r6, #1
   144e0:	bne	145b8 <__assert_fail@plt+0x3414>
   144e4:	ldr	r3, [sp, #204]	; 0xcc
   144e8:	ldr	r2, [sp, #208]	; 0xd0
   144ec:	ldr	r5, [sp, #260]	; 0x104
   144f0:	add	r3, r3, r2
   144f4:	ldr	r2, [sp, #264]	; 0x108
   144f8:	mov	r6, r1
   144fc:	add	r5, r5, r2
   14500:	strb	r0, [sp, #200]	; 0xc8
   14504:	strb	r0, [sp, #256]	; 0x100
   14508:	str	r3, [sp, #204]	; 0xcc
   1450c:	str	r5, [sp, #260]	; 0x104
   14510:	ldrb	r3, [sp, #244]	; 0xf4
   14514:	cmp	r3, #0
   14518:	beq	1442c <__assert_fail@plt+0x3288>
   1451c:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   14520:	mov	r1, r0
   14524:	mov	r0, r5
   14528:	bl	1294c <__assert_fail@plt+0x17a8>
   1452c:	add	r3, sp, #248	; 0xf8
   14530:	mov	r1, r5
   14534:	mov	r2, r0
   14538:	add	r0, sp, #272	; 0x110
   1453c:	bl	13048 <__assert_fail@plt+0x1ea4>
   14540:	cmn	r0, #1
   14544:	str	r0, [sp, #264]	; 0x108
   14548:	strbeq	r7, [sp, #268]	; 0x10c
   1454c:	streq	r9, [sp, #264]	; 0x108
   14550:	strbeq	r4, [sp, #256]	; 0x100
   14554:	beq	14464 <__assert_fail@plt+0x32c0>
   14558:	cmn	r0, #2
   1455c:	beq	14888 <__assert_fail@plt+0x36e4>
   14560:	cmp	r0, #0
   14564:	beq	148a0 <__assert_fail@plt+0x36fc>
   14568:	ldr	r5, [sp, #272]	; 0x110
   1456c:	add	r0, sp, #248	; 0xf8
   14570:	strb	r4, [sp, #268]	; 0x10c
   14574:	bl	10f4c <mbsinit@plt>
   14578:	strb	r4, [sp, #256]	; 0x100
   1457c:	cmp	r0, #0
   14580:	strbne	r7, [sp, #244]	; 0xf4
   14584:	cmp	r5, #0
   14588:	bne	14464 <__assert_fail@plt+0x32c0>
   1458c:	ldr	r0, [sp, #148]	; 0x94
   14590:	b	141b4 <__assert_fail@plt+0x3010>
   14594:	ldr	r0, [sp, #204]	; 0xcc
   14598:	bl	1106c <strlen@plt>
   1459c:	strb	r7, [sp, #212]	; 0xd4
   145a0:	strb	r4, [sp, #200]	; 0xc8
   145a4:	str	r0, [sp, #208]	; 0xd0
   145a8:	ldr	r2, [sp, #208]	; 0xd0
   145ac:	ldr	r3, [sp, #264]	; 0x108
   145b0:	cmp	r2, r3
   145b4:	beq	146f0 <__assert_fail@plt+0x354c>
   145b8:	ldr	r5, [sp, #148]	; 0x94
   145bc:	ldr	sl, [sp, #152]	; 0x98
   145c0:	ldrb	r3, [sp, #132]	; 0x84
   145c4:	add	r5, r5, sl
   145c8:	str	r5, [sp, #148]	; 0x94
   145cc:	cmp	r3, #0
   145d0:	strb	r7, [sp, #144]	; 0x90
   145d4:	add	fp, fp, #1
   145d8:	beq	14300 <__assert_fail@plt+0x315c>
   145dc:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   145e0:	mov	r1, r0
   145e4:	mov	r0, r5
   145e8:	bl	1294c <__assert_fail@plt+0x17a8>
   145ec:	add	r3, sp, #136	; 0x88
   145f0:	mov	r1, r5
   145f4:	mov	r2, r0
   145f8:	add	r0, sp, #160	; 0xa0
   145fc:	bl	13048 <__assert_fail@plt+0x1ea4>
   14600:	cmn	r0, #1
   14604:	str	r0, [sp, #152]	; 0x98
   14608:	strbeq	r7, [sp, #156]	; 0x9c
   1460c:	streq	r9, [sp, #152]	; 0x98
   14610:	strbeq	r4, [sp, #144]	; 0x90
   14614:	beq	14768 <__assert_fail@plt+0x35c4>
   14618:	cmn	r0, #2
   1461c:	beq	14754 <__assert_fail@plt+0x35b0>
   14620:	cmp	r0, #0
   14624:	bne	1496c <__assert_fail@plt+0x37c8>
   14628:	ldr	r5, [sp, #148]	; 0x94
   1462c:	str	r9, [sp, #152]	; 0x98
   14630:	ldrb	r3, [r5]
   14634:	cmp	r3, #0
   14638:	bne	14bf8 <__assert_fail@plt+0x3a54>
   1463c:	ldr	r5, [sp, #160]	; 0xa0
   14640:	cmp	r5, #0
   14644:	beq	14970 <__assert_fail@plt+0x37cc>
   14648:	b	14bc4 <__assert_fail@plt+0x3a20>
   1464c:	add	sl, sp, #192	; 0xc0
   14650:	mov	r0, sl
   14654:	bl	10f4c <mbsinit@plt>
   14658:	cmp	r0, #0
   1465c:	beq	14be4 <__assert_fail@plt+0x3a40>
   14660:	strb	r4, [sp, #188]	; 0xbc
   14664:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   14668:	mov	r1, r0
   1466c:	mov	r0, r5
   14670:	bl	1294c <__assert_fail@plt+0x17a8>
   14674:	mov	r3, sl
   14678:	mov	r1, r5
   1467c:	mov	r2, r0
   14680:	add	r0, sp, #216	; 0xd8
   14684:	bl	13048 <__assert_fail@plt+0x1ea4>
   14688:	cmn	r0, #1
   1468c:	str	r0, [sp, #208]	; 0xd0
   14690:	strbeq	r7, [sp, #212]	; 0xd4
   14694:	streq	r9, [sp, #208]	; 0xd0
   14698:	strbeq	r4, [sp, #200]	; 0xc8
   1469c:	beq	145a8 <__assert_fail@plt+0x3404>
   146a0:	cmn	r0, #2
   146a4:	beq	14594 <__assert_fail@plt+0x33f0>
   146a8:	cmp	r0, #0
   146ac:	beq	148c4 <__assert_fail@plt+0x3720>
   146b0:	ldr	r5, [sp, #216]	; 0xd8
   146b4:	mov	r0, sl
   146b8:	strb	r4, [sp, #212]	; 0xd4
   146bc:	bl	10f4c <mbsinit@plt>
   146c0:	strb	r4, [sp, #200]	; 0xc8
   146c4:	cmp	r0, #0
   146c8:	strbne	r7, [sp, #188]	; 0xbc
   146cc:	b	144b8 <__assert_fail@plt+0x3314>
   146d0:	ldrb	r3, [sp, #212]	; 0xd4
   146d4:	cmp	r3, #0
   146d8:	ldrne	r5, [sp, #216]	; 0xd8
   146dc:	bne	144b8 <__assert_fail@plt+0x3314>
   146e0:	ldr	r2, [sp, #208]	; 0xd0
   146e4:	ldr	r3, [sp, #264]	; 0x108
   146e8:	cmp	r2, r3
   146ec:	bne	145b8 <__assert_fail@plt+0x3414>
   146f0:	ldr	r1, [sp, #260]	; 0x104
   146f4:	ldr	r0, [sp, #204]	; 0xcc
   146f8:	bl	10f64 <memcmp@plt>
   146fc:	adds	r0, r0, #0
   14700:	movne	r0, #1
   14704:	b	144d8 <__assert_fail@plt+0x3334>
   14708:	add	r0, sp, #248	; 0xf8
   1470c:	bl	10f4c <mbsinit@plt>
   14710:	cmp	r0, #0
   14714:	beq	14be4 <__assert_fail@plt+0x3a40>
   14718:	strb	r4, [sp, #244]	; 0xf4
   1471c:	b	1451c <__assert_fail@plt+0x3378>
   14720:	add	r6, r6, #1
   14724:	ldr	sl, [sp, #152]	; 0x98
   14728:	ldr	r3, [sp, #40]	; 0x28
   1472c:	ldr	r5, [sp, #148]	; 0x94
   14730:	cmp	sl, r3
   14734:	bne	145c0 <__assert_fail@plt+0x341c>
   14738:	mov	r2, sl
   1473c:	mov	r0, r5
   14740:	ldr	r1, [sp, #36]	; 0x24
   14744:	bl	10f64 <memcmp@plt>
   14748:	cmp	r0, #0
   1474c:	bne	145c0 <__assert_fail@plt+0x341c>
   14750:	b	14384 <__assert_fail@plt+0x31e0>
   14754:	ldr	r0, [sp, #148]	; 0x94
   14758:	bl	1106c <strlen@plt>
   1475c:	strb	r7, [sp, #156]	; 0x9c
   14760:	strb	r4, [sp, #144]	; 0x90
   14764:	str	r0, [sp, #152]	; 0x98
   14768:	ldr	r3, [sp]
   1476c:	cmp	fp, #9
   14770:	movls	r3, #0
   14774:	andhi	r3, r3, #1
   14778:	cmp	r3, #0
   1477c:	beq	14720 <__assert_fail@plt+0x357c>
   14780:	add	r2, fp, fp, lsl #2
   14784:	cmp	r6, r2
   14788:	addcc	r6, r6, #1
   1478c:	strcc	r3, [sp]
   14790:	bcc	14724 <__assert_fail@plt+0x3580>
   14794:	ldr	r3, [sp, #12]
   14798:	subs	sl, r6, r3
   1479c:	ldrb	r3, [sp, #88]	; 0x58
   147a0:	beq	14bc8 <__assert_fail@plt+0x3a24>
   147a4:	cmp	r3, #0
   147a8:	ldreq	r5, [sp, #92]	; 0x5c
   147ac:	beq	1481c <__assert_fail@plt+0x3678>
   147b0:	ldrb	r3, [sp, #100]	; 0x64
   147b4:	cmp	r3, #0
   147b8:	ldrne	r5, [sp, #104]	; 0x68
   147bc:	beq	147fc <__assert_fail@plt+0x3658>
   147c0:	b	147f4 <__assert_fail@plt+0x3650>
   147c4:	ldrb	r3, [r5]
   147c8:	and	r2, r3, #31
   147cc:	lsr	r3, r3, #5
   147d0:	ldr	r3, [r8, r3, lsl #2]
   147d4:	lsr	r3, r3, r2
   147d8:	tst	r3, #1
   147dc:	beq	148e8 <__assert_fail@plt+0x3744>
   147e0:	str	r9, [sp, #96]	; 0x60
   147e4:	ldrb	r5, [r5]
   147e8:	strb	r4, [sp, #100]	; 0x64
   147ec:	strb	r4, [sp, #88]	; 0x58
   147f0:	str	r5, [sp, #104]	; 0x68
   147f4:	cmp	r5, #0
   147f8:	beq	14b14 <__assert_fail@plt+0x3970>
   147fc:	ldr	r5, [sp, #92]	; 0x5c
   14800:	ldr	r3, [sp, #96]	; 0x60
   14804:	subs	sl, sl, #1
   14808:	add	r5, r5, r3
   1480c:	strb	r7, [sp, #88]	; 0x58
   14810:	str	r5, [sp, #92]	; 0x5c
   14814:	str	r5, [sp]
   14818:	beq	14994 <__assert_fail@plt+0x37f0>
   1481c:	ldrb	r3, [sp, #76]	; 0x4c
   14820:	cmp	r3, #0
   14824:	beq	147c4 <__assert_fail@plt+0x3620>
   14828:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   1482c:	mov	r1, r0
   14830:	mov	r0, r5
   14834:	bl	1294c <__assert_fail@plt+0x17a8>
   14838:	add	r3, sp, #80	; 0x50
   1483c:	mov	r1, r5
   14840:	mov	r2, r0
   14844:	add	r0, sp, #104	; 0x68
   14848:	bl	13048 <__assert_fail@plt+0x1ea4>
   1484c:	cmn	r0, #1
   14850:	str	r0, [sp, #96]	; 0x60
   14854:	beq	14900 <__assert_fail@plt+0x375c>
   14858:	cmn	r0, #2
   1485c:	beq	14924 <__assert_fail@plt+0x3780>
   14860:	cmp	r0, #0
   14864:	beq	1493c <__assert_fail@plt+0x3798>
   14868:	ldr	r5, [sp, #104]	; 0x68
   1486c:	add	r0, sp, #80	; 0x50
   14870:	strb	r4, [sp, #100]	; 0x64
   14874:	bl	10f4c <mbsinit@plt>
   14878:	strb	r4, [sp, #88]	; 0x58
   1487c:	cmp	r0, #0
   14880:	strbne	r7, [sp, #76]	; 0x4c
   14884:	b	147f4 <__assert_fail@plt+0x3650>
   14888:	ldr	r0, [sp, #260]	; 0x104
   1488c:	bl	1106c <strlen@plt>
   14890:	strb	r7, [sp, #268]	; 0x10c
   14894:	strb	r4, [sp, #256]	; 0x100
   14898:	str	r0, [sp, #264]	; 0x108
   1489c:	b	14464 <__assert_fail@plt+0x32c0>
   148a0:	ldr	r3, [sp, #260]	; 0x104
   148a4:	str	r9, [sp, #264]	; 0x108
   148a8:	ldrb	r3, [r3]
   148ac:	cmp	r3, #0
   148b0:	bne	14bf8 <__assert_fail@plt+0x3a54>
   148b4:	ldr	r5, [sp, #272]	; 0x110
   148b8:	cmp	r5, #0
   148bc:	beq	1456c <__assert_fail@plt+0x33c8>
   148c0:	b	14bc4 <__assert_fail@plt+0x3a20>
   148c4:	ldr	r3, [sp, #204]	; 0xcc
   148c8:	str	r9, [sp, #208]	; 0xd0
   148cc:	ldrb	r3, [r3]
   148d0:	cmp	r3, #0
   148d4:	bne	14bf8 <__assert_fail@plt+0x3a54>
   148d8:	ldr	r5, [sp, #216]	; 0xd8
   148dc:	cmp	r5, #0
   148e0:	beq	146b4 <__assert_fail@plt+0x3510>
   148e4:	b	14bc4 <__assert_fail@plt+0x3a20>
   148e8:	add	r0, sp, #80	; 0x50
   148ec:	bl	10f4c <mbsinit@plt>
   148f0:	cmp	r0, #0
   148f4:	beq	14be4 <__assert_fail@plt+0x3a40>
   148f8:	strb	r4, [sp, #76]	; 0x4c
   148fc:	b	14828 <__assert_fail@plt+0x3684>
   14900:	str	r9, [sp, #96]	; 0x60
   14904:	strb	r7, [sp, #100]	; 0x64
   14908:	b	147fc <__assert_fail@plt+0x3658>
   1490c:	add	r0, sp, #136	; 0x88
   14910:	bl	10f4c <mbsinit@plt>
   14914:	cmp	r0, #0
   14918:	beq	14be4 <__assert_fail@plt+0x3a40>
   1491c:	strb	r4, [sp, #132]	; 0x84
   14920:	b	145dc <__assert_fail@plt+0x3438>
   14924:	ldr	r5, [sp, #92]	; 0x5c
   14928:	mov	r0, r5
   1492c:	bl	1106c <strlen@plt>
   14930:	strb	r7, [sp, #100]	; 0x64
   14934:	str	r0, [sp, #96]	; 0x60
   14938:	b	14800 <__assert_fail@plt+0x365c>
   1493c:	ldr	r5, [sp, #92]	; 0x5c
   14940:	str	r9, [sp, #96]	; 0x60
   14944:	ldrb	r3, [r5]
   14948:	cmp	r3, #0
   1494c:	bne	14bf8 <__assert_fail@plt+0x3a54>
   14950:	ldr	r5, [sp, #104]	; 0x68
   14954:	cmp	r5, #0
   14958:	beq	1486c <__assert_fail@plt+0x36c8>
   1495c:	b	14bc4 <__assert_fail@plt+0x3a20>
   14960:	mov	lr, r3
   14964:	str	r4, [sp]
   14968:	b	140ac <__assert_fail@plt+0x2f08>
   1496c:	ldr	r5, [sp, #160]	; 0xa0
   14970:	add	r0, sp, #136	; 0x88
   14974:	strb	r4, [sp, #156]	; 0x9c
   14978:	bl	10f4c <mbsinit@plt>
   1497c:	strb	r4, [sp, #144]	; 0x90
   14980:	cmp	r0, #0
   14984:	strbne	r7, [sp, #132]	; 0x84
   14988:	b	14330 <__assert_fail@plt+0x318c>
   1498c:	ldr	r3, [sp, #92]	; 0x5c
   14990:	str	r3, [sp]
   14994:	ldrb	r3, [sp, #76]	; 0x4c
   14998:	cmp	r3, #0
   1499c:	bne	14a94 <__assert_fail@plt+0x38f0>
   149a0:	ldr	r1, [sp]
   149a4:	ldrb	r3, [r1]
   149a8:	and	r2, r3, #31
   149ac:	lsr	r3, r3, #5
   149b0:	ldr	r3, [r8, r3, lsl #2]
   149b4:	lsr	r3, r3, r2
   149b8:	tst	r3, #1
   149bc:	beq	14a80 <__assert_fail@plt+0x38dc>
   149c0:	str	r9, [sp, #96]	; 0x60
   149c4:	ldrb	r5, [r1]
   149c8:	strb	r4, [sp, #100]	; 0x64
   149cc:	strb	r4, [sp, #88]	; 0x58
   149d0:	str	r5, [sp, #104]	; 0x68
   149d4:	cmp	r5, #0
   149d8:	beq	14b20 <__assert_fail@plt+0x397c>
   149dc:	ldrb	r3, [sp, #156]	; 0x9c
   149e0:	mov	r2, #1
   149e4:	str	r2, [sp]
   149e8:	cmp	r3, #0
   149ec:	add	r3, r6, #1
   149f0:	str	r6, [sp, #12]
   149f4:	mov	r6, r3
   149f8:	bne	14368 <__assert_fail@plt+0x31c4>
   149fc:	b	14724 <__assert_fail@plt+0x3580>
   14a00:	add	r0, sp, #248	; 0xf8
   14a04:	bl	10f4c <mbsinit@plt>
   14a08:	cmp	r0, #0
   14a0c:	beq	14be4 <__assert_fail@plt+0x3a40>
   14a10:	strb	r4, [sp, #244]	; 0xf4
   14a14:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   14a18:	ldr	r5, [sp, #8]
   14a1c:	mov	r1, r0
   14a20:	mov	r0, r5
   14a24:	bl	1294c <__assert_fail@plt+0x17a8>
   14a28:	add	r3, sp, #248	; 0xf8
   14a2c:	mov	r1, r5
   14a30:	mov	r2, r0
   14a34:	add	r0, sp, #272	; 0x110
   14a38:	bl	13048 <__assert_fail@plt+0x1ea4>
   14a3c:	cmn	r0, #1
   14a40:	str	r0, [sp, #264]	; 0x108
   14a44:	beq	14b04 <__assert_fail@plt+0x3960>
   14a48:	cmn	r0, #2
   14a4c:	beq	14b40 <__assert_fail@plt+0x399c>
   14a50:	cmp	r0, #0
   14a54:	beq	14b58 <__assert_fail@plt+0x39b4>
   14a58:	ldr	r5, [sp, #272]	; 0x110
   14a5c:	add	r0, sp, #248	; 0xf8
   14a60:	strb	r4, [sp, #268]	; 0x10c
   14a64:	bl	10f4c <mbsinit@plt>
   14a68:	strb	r4, [sp, #256]	; 0x100
   14a6c:	cmp	r0, #0
   14a70:	strbne	r7, [sp, #244]	; 0xf4
   14a74:	cmp	r5, #0
   14a78:	bne	14410 <__assert_fail@plt+0x326c>
   14a7c:	bl	1118c <abort@plt>
   14a80:	add	r0, sp, #80	; 0x50
   14a84:	bl	10f4c <mbsinit@plt>
   14a88:	cmp	r0, #0
   14a8c:	beq	14be4 <__assert_fail@plt+0x3a40>
   14a90:	strb	r4, [sp, #76]	; 0x4c
   14a94:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   14a98:	ldr	r5, [sp]
   14a9c:	mov	r1, r0
   14aa0:	mov	r0, r5
   14aa4:	bl	1294c <__assert_fail@plt+0x17a8>
   14aa8:	add	r3, sp, #80	; 0x50
   14aac:	mov	r1, r5
   14ab0:	mov	r2, r0
   14ab4:	add	r0, sp, #104	; 0x68
   14ab8:	bl	13048 <__assert_fail@plt+0x1ea4>
   14abc:	cmn	r0, #1
   14ac0:	str	r0, [sp, #96]	; 0x60
   14ac4:	strbeq	r7, [sp, #100]	; 0x64
   14ac8:	streq	r9, [sp, #96]	; 0x60
   14acc:	strbeq	r4, [sp, #88]	; 0x58
   14ad0:	beq	149dc <__assert_fail@plt+0x3838>
   14ad4:	cmn	r0, #2
   14ad8:	beq	14b84 <__assert_fail@plt+0x39e0>
   14adc:	cmp	r0, #0
   14ae0:	beq	14ba4 <__assert_fail@plt+0x3a00>
   14ae4:	ldr	r5, [sp, #104]	; 0x68
   14ae8:	add	r0, sp, #80	; 0x50
   14aec:	strb	r4, [sp, #100]	; 0x64
   14af0:	bl	10f4c <mbsinit@plt>
   14af4:	strb	r4, [sp, #88]	; 0x58
   14af8:	cmp	r0, #0
   14afc:	strbne	r7, [sp, #76]	; 0x4c
   14b00:	b	149d4 <__assert_fail@plt+0x3830>
   14b04:	str	r9, [sp, #264]	; 0x108
   14b08:	strb	sl, [sp, #268]	; 0x10c
   14b0c:	ldr	r5, [sp, #260]	; 0x104
   14b10:	b	14414 <__assert_fail@plt+0x3270>
   14b14:	ldrb	r3, [sp, #88]	; 0x58
   14b18:	cmp	r3, #0
   14b1c:	beq	1498c <__assert_fail@plt+0x37e8>
   14b20:	add	r2, sp, #16
   14b24:	ldrd	r0, [sp, #4]
   14b28:	bl	13788 <__assert_fail@plt+0x25e4>
   14b2c:	subs	r3, r0, #0
   14b30:	str	r3, [sp]
   14b34:	bne	14b9c <__assert_fail@plt+0x39f8>
   14b38:	ldrb	r3, [sp, #156]	; 0x9c
   14b3c:	b	149e8 <__assert_fail@plt+0x3844>
   14b40:	ldr	r5, [sp, #260]	; 0x104
   14b44:	mov	r0, r5
   14b48:	bl	1106c <strlen@plt>
   14b4c:	strb	sl, [sp, #268]	; 0x10c
   14b50:	str	r0, [sp, #264]	; 0x108
   14b54:	b	14414 <__assert_fail@plt+0x3270>
   14b58:	ldr	r5, [sp, #260]	; 0x104
   14b5c:	str	r9, [sp, #264]	; 0x108
   14b60:	ldrb	r3, [r5]
   14b64:	cmp	r3, #0
   14b68:	bne	14bf8 <__assert_fail@plt+0x3a54>
   14b6c:	ldr	r5, [sp, #272]	; 0x110
   14b70:	cmp	r5, #0
   14b74:	beq	14a5c <__assert_fail@plt+0x38b8>
   14b78:	b	14bc4 <__assert_fail@plt+0x3a20>
   14b7c:	ldr	r4, [sp, #48]	; 0x30
   14b80:	b	14184 <__assert_fail@plt+0x2fe0>
   14b84:	ldr	r0, [sp, #92]	; 0x5c
   14b88:	bl	1106c <strlen@plt>
   14b8c:	strb	r7, [sp, #100]	; 0x64
   14b90:	strb	r4, [sp, #88]	; 0x58
   14b94:	str	r0, [sp, #96]	; 0x60
   14b98:	b	149dc <__assert_fail@plt+0x3838>
   14b9c:	ldr	r0, [sp, #16]
   14ba0:	b	141b4 <__assert_fail@plt+0x3010>
   14ba4:	ldr	r5, [sp, #92]	; 0x5c
   14ba8:	str	r9, [sp, #96]	; 0x60
   14bac:	ldrb	r3, [r5]
   14bb0:	cmp	r3, #0
   14bb4:	bne	14bf8 <__assert_fail@plt+0x3a54>
   14bb8:	ldr	r5, [sp, #104]	; 0x68
   14bbc:	cmp	r5, #0
   14bc0:	beq	14ae8 <__assert_fail@plt+0x3944>
   14bc4:	bl	13764 <__assert_fail@plt+0x25c0>
   14bc8:	cmp	r3, #0
   14bcc:	beq	1498c <__assert_fail@plt+0x37e8>
   14bd0:	ldrb	r3, [sp, #100]	; 0x64
   14bd4:	cmp	r3, #0
   14bd8:	ldrne	r5, [sp, #104]	; 0x68
   14bdc:	beq	149dc <__assert_fail@plt+0x3838>
   14be0:	b	149d4 <__assert_fail@plt+0x3830>
   14be4:	ldr	r3, [pc, #44]	; 14c18 <__assert_fail@plt+0x3a74>
   14be8:	mov	r2, #150	; 0x96
   14bec:	ldr	r1, [pc, #40]	; 14c1c <__assert_fail@plt+0x3a78>
   14bf0:	ldr	r0, [pc, #40]	; 14c20 <__assert_fail@plt+0x3a7c>
   14bf4:	bl	111a4 <__assert_fail@plt>
   14bf8:	ldr	r3, [pc, #24]	; 14c18 <__assert_fail@plt+0x3a74>
   14bfc:	mov	r2, #178	; 0xb2
   14c00:	ldr	r1, [pc, #20]	; 14c1c <__assert_fail@plt+0x3a78>
   14c04:	ldr	r0, [pc, #24]	; 14c24 <__assert_fail@plt+0x3a80>
   14c08:	bl	111a4 <__assert_fail@plt>
   14c0c:	bl	10f88 <__stack_chk_fail@plt>
   14c10:	andeq	r5, r2, r8, lsl #30
   14c14:	andeq	r5, r1, r0, asr #24
   14c18:	andeq	r5, r1, r0, ror #24
   14c1c:	andeq	r5, r1, r0, asr fp
   14c20:	andeq	r5, r1, r0, ror fp
   14c24:	andeq	r5, r1, r8, lsl #23
   14c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c2c:	mov	r6, r2
   14c30:	sub	sp, sp, #4096	; 0x1000
   14c34:	ldr	r2, [pc, #640]	; 14ebc <__assert_fail@plt+0x3d18>
   14c38:	sub	sp, sp, #44	; 0x2c
   14c3c:	add	lr, sp, #4096	; 0x1000
   14c40:	ldr	ip, [r2]
   14c44:	add	lr, lr, #36	; 0x24
   14c48:	mov	r4, #0
   14c4c:	str	r4, [sp]
   14c50:	str	ip, [lr]
   14c54:	add	ip, sp, #4160	; 0x1040
   14c58:	add	ip, ip, #16
   14c5c:	mov	r9, r1
   14c60:	ldr	ip, [ip]
   14c64:	mov	fp, r0
   14c68:	str	r3, [sp, #8]
   14c6c:	mov	r0, r6
   14c70:	mov	r3, r4
   14c74:	mov	r2, r4
   14c78:	mov	r1, r4
   14c7c:	str	ip, [sp, #12]
   14c80:	bl	10ee0 <iconv@plt>
   14c84:	cmp	r9, r4
   14c88:	str	fp, [sp, #20]
   14c8c:	str	r9, [sp, #24]
   14c90:	beq	14ea0 <__assert_fail@plt+0x3cfc>
   14c94:	add	r5, sp, #36	; 0x24
   14c98:	add	r7, sp, #28
   14c9c:	add	r8, sp, #32
   14ca0:	mov	sl, #4096	; 0x1000
   14ca4:	b	14cbc <__assert_fail@plt+0x3b18>
   14ca8:	ldrd	r2, [sp, #24]
   14cac:	sub	r3, r3, r5
   14cb0:	cmp	r2, #0
   14cb4:	add	r4, r4, r3
   14cb8:	beq	14cfc <__assert_fail@plt+0x3b58>
   14cbc:	str	r8, [sp]
   14cc0:	mov	r3, r7
   14cc4:	add	r2, sp, #24
   14cc8:	add	r1, sp, #20
   14ccc:	mov	r0, r6
   14cd0:	str	r5, [sp, #28]
   14cd4:	str	sl, [sp, #32]
   14cd8:	bl	10ee0 <iconv@plt>
   14cdc:	cmn	r0, #1
   14ce0:	bne	14ca8 <__assert_fail@plt+0x3b04>
   14ce4:	bl	11090 <__errno_location@plt>
   14ce8:	ldr	r3, [r0]
   14cec:	cmp	r3, #7
   14cf0:	beq	14ca8 <__assert_fail@plt+0x3b04>
   14cf4:	cmp	r3, #22
   14cf8:	bne	14e98 <__assert_fail@plt+0x3cf4>
   14cfc:	mov	r2, #0
   14d00:	mov	ip, #4096	; 0x1000
   14d04:	str	r8, [sp]
   14d08:	mov	r1, r2
   14d0c:	mov	r3, r7
   14d10:	mov	r0, r6
   14d14:	str	r5, [sp, #28]
   14d18:	str	ip, [sp, #32]
   14d1c:	bl	10ee0 <iconv@plt>
   14d20:	cmn	r0, #1
   14d24:	beq	14e98 <__assert_fail@plt+0x3cf4>
   14d28:	ldr	r3, [sp, #28]
   14d2c:	sub	r5, r3, r5
   14d30:	adds	r4, r5, r4
   14d34:	beq	14e48 <__assert_fail@plt+0x3ca4>
   14d38:	ldr	r3, [sp, #8]
   14d3c:	ldr	sl, [r3]
   14d40:	cmp	sl, #0
   14d44:	beq	14e24 <__assert_fail@plt+0x3c80>
   14d48:	ldr	r3, [sp, #12]
   14d4c:	ldr	r3, [r3]
   14d50:	cmp	r3, r4
   14d54:	bcc	14e24 <__assert_fail@plt+0x3c80>
   14d58:	mov	r3, #0
   14d5c:	str	r3, [sp]
   14d60:	mov	r2, r3
   14d64:	mov	r1, r3
   14d68:	mov	r0, r6
   14d6c:	bl	10ee0 <iconv@plt>
   14d70:	add	r3, sp, #40	; 0x28
   14d74:	str	fp, [sp, #20]
   14d78:	add	r5, sp, #24
   14d7c:	str	r9, [sp, #24]
   14d80:	str	sl, [sp, #28]
   14d84:	str	r4, [sp, #32]
   14d88:	sub	fp, r3, #20
   14d8c:	b	14db4 <__assert_fail@plt+0x3c10>
   14d90:	str	r8, [sp]
   14d94:	mov	r3, r7
   14d98:	mov	r2, r5
   14d9c:	mov	r1, fp
   14da0:	mov	r0, r6
   14da4:	bl	10ee0 <iconv@plt>
   14da8:	cmn	r0, #1
   14dac:	beq	14e58 <__assert_fail@plt+0x3cb4>
   14db0:	ldr	r9, [sp, #24]
   14db4:	cmp	r9, #0
   14db8:	bne	14d90 <__assert_fail@plt+0x3bec>
   14dbc:	mov	r2, #0
   14dc0:	str	r8, [sp]
   14dc4:	mov	r3, r7
   14dc8:	mov	r0, r6
   14dcc:	mov	r1, r2
   14dd0:	bl	10ee0 <iconv@plt>
   14dd4:	cmn	r0, #1
   14dd8:	beq	14e68 <__assert_fail@plt+0x3cc4>
   14ddc:	ldr	r3, [sp, #32]
   14de0:	cmp	r3, #0
   14de4:	bne	14eb8 <__assert_fail@plt+0x3d14>
   14de8:	ldr	r2, [sp, #8]
   14dec:	str	sl, [r2]
   14df0:	ldr	r2, [sp, #12]
   14df4:	str	r4, [r2]
   14df8:	add	r2, sp, #4096	; 0x1000
   14dfc:	add	r2, r2, #36	; 0x24
   14e00:	ldr	r1, [r2]
   14e04:	ldr	r2, [pc, #176]	; 14ebc <__assert_fail@plt+0x3d18>
   14e08:	mov	r0, r3
   14e0c:	ldr	r2, [r2]
   14e10:	cmp	r1, r2
   14e14:	bne	14eb4 <__assert_fail@plt+0x3d10>
   14e18:	add	sp, sp, #4096	; 0x1000
   14e1c:	add	sp, sp, #44	; 0x2c
   14e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e24:	mov	r0, r4
   14e28:	bl	1100c <malloc@plt>
   14e2c:	subs	sl, r0, #0
   14e30:	bne	14d58 <__assert_fail@plt+0x3bb4>
   14e34:	bl	11090 <__errno_location@plt>
   14e38:	mov	r2, #12
   14e3c:	mvn	r3, #0
   14e40:	str	r2, [r0]
   14e44:	b	14df8 <__assert_fail@plt+0x3c54>
   14e48:	ldr	r3, [sp, #12]
   14e4c:	str	r4, [r3]
   14e50:	mov	r3, r4
   14e54:	b	14df8 <__assert_fail@plt+0x3c54>
   14e58:	bl	11090 <__errno_location@plt>
   14e5c:	ldr	r3, [r0]
   14e60:	cmp	r3, #22
   14e64:	beq	14dbc <__assert_fail@plt+0x3c18>
   14e68:	ldr	r3, [sp, #8]
   14e6c:	ldr	r3, [r3]
   14e70:	cmp	r3, sl
   14e74:	beq	14e98 <__assert_fail@plt+0x3cf4>
   14e78:	bl	11090 <__errno_location@plt>
   14e7c:	mov	r4, r0
   14e80:	mov	r0, sl
   14e84:	ldr	r5, [r4]
   14e88:	bl	10f28 <free@plt>
   14e8c:	str	r5, [r4]
   14e90:	mvn	r3, #0
   14e94:	b	14df8 <__assert_fail@plt+0x3c54>
   14e98:	mvn	r3, #0
   14e9c:	b	14df8 <__assert_fail@plt+0x3c54>
   14ea0:	mov	r4, r9
   14ea4:	add	r5, sp, #36	; 0x24
   14ea8:	add	r7, sp, #28
   14eac:	add	r8, sp, #32
   14eb0:	b	14cfc <__assert_fail@plt+0x3b58>
   14eb4:	bl	10f88 <__stack_chk_fail@plt>
   14eb8:	bl	1118c <abort@plt>
   14ebc:	andeq	r5, r2, r8, lsl #30
   14ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ec4:	sub	sp, sp, #36	; 0x24
   14ec8:	ldr	r9, [pc, #468]	; 150a4 <__assert_fail@plt+0x3f00>
   14ecc:	mov	r7, r1
   14ed0:	str	r0, [sp, #12]
   14ed4:	ldr	r3, [r9]
   14ed8:	str	r3, [sp, #28]
   14edc:	bl	1106c <strlen@plt>
   14ee0:	cmp	r0, #4096	; 0x1000
   14ee4:	mov	r4, r0
   14ee8:	lslcc	r4, r0, #4
   14eec:	add	sl, r4, #1
   14ef0:	str	r0, [sp, #16]
   14ef4:	mov	r0, sl
   14ef8:	bl	1100c <malloc@plt>
   14efc:	subs	r6, r0, #0
   14f00:	beq	15090 <__assert_fail@plt+0x3eec>
   14f04:	mov	r3, #0
   14f08:	str	r3, [sp]
   14f0c:	mov	r2, r3
   14f10:	mov	r1, r3
   14f14:	mov	r0, r7
   14f18:	bl	10ee0 <iconv@plt>
   14f1c:	add	r8, sp, #24
   14f20:	str	r6, [sp, #20]
   14f24:	str	r4, [sp, #24]
   14f28:	b	14f8c <__assert_fail@plt+0x3de8>
   14f2c:	bl	11090 <__errno_location@plt>
   14f30:	ldr	r3, [r0]
   14f34:	mov	fp, r0
   14f38:	cmp	r3, #22
   14f3c:	beq	15008 <__assert_fail@plt+0x3e64>
   14f40:	cmp	r3, #7
   14f44:	bne	15068 <__assert_fail@plt+0x3ec4>
   14f48:	ldr	r4, [sp, #20]
   14f4c:	lsl	r5, sl, #1
   14f50:	cmp	sl, r5
   14f54:	sub	r4, r4, r6
   14f58:	bcs	15060 <__assert_fail@plt+0x3ebc>
   14f5c:	mov	r1, r5
   14f60:	mov	r0, r6
   14f64:	bl	10f94 <realloc@plt>
   14f68:	cmp	r0, #0
   14f6c:	beq	15060 <__assert_fail@plt+0x3ebc>
   14f70:	sub	r3, r5, #1
   14f74:	mov	r6, r0
   14f78:	mov	sl, r5
   14f7c:	sub	r3, r3, r4
   14f80:	add	r4, r0, r4
   14f84:	str	r3, [sp, #24]
   14f88:	str	r4, [sp, #20]
   14f8c:	str	r8, [sp]
   14f90:	add	r3, sp, #20
   14f94:	add	r2, sp, #16
   14f98:	add	r1, sp, #12
   14f9c:	mov	r0, r7
   14fa0:	bl	10ee0 <iconv@plt>
   14fa4:	cmn	r0, #1
   14fa8:	beq	14f2c <__assert_fail@plt+0x3d88>
   14fac:	b	15008 <__assert_fail@plt+0x3e64>
   14fb0:	bl	11090 <__errno_location@plt>
   14fb4:	ldr	r3, [r0]
   14fb8:	mov	fp, r0
   14fbc:	cmp	r3, #7
   14fc0:	bne	15068 <__assert_fail@plt+0x3ec4>
   14fc4:	ldr	r4, [sp, #20]
   14fc8:	lsl	r5, sl, #1
   14fcc:	cmp	sl, r5
   14fd0:	sub	r4, r4, r6
   14fd4:	bcs	15060 <__assert_fail@plt+0x3ebc>
   14fd8:	mov	r1, r5
   14fdc:	mov	r0, r6
   14fe0:	bl	10f94 <realloc@plt>
   14fe4:	cmp	r0, #0
   14fe8:	beq	15060 <__assert_fail@plt+0x3ebc>
   14fec:	sub	r3, r5, #1
   14ff0:	mov	sl, r5
   14ff4:	mov	r6, r0
   14ff8:	sub	r3, r3, r4
   14ffc:	add	r4, r0, r4
   15000:	str	r3, [sp, #24]
   15004:	str	r4, [sp, #20]
   15008:	mov	r2, #0
   1500c:	str	r8, [sp]
   15010:	mov	r1, r2
   15014:	add	r3, sp, #20
   15018:	mov	r0, r7
   1501c:	bl	10ee0 <iconv@plt>
   15020:	cmn	r0, #1
   15024:	beq	14fb0 <__assert_fail@plt+0x3e0c>
   15028:	ldr	r3, [sp, #20]
   1502c:	mov	r2, #0
   15030:	add	r1, r3, #1
   15034:	str	r1, [sp, #20]
   15038:	strb	r2, [r3]
   1503c:	ldr	r1, [sp, #20]
   15040:	sub	r1, r1, r6
   15044:	cmp	sl, r1
   15048:	bls	15074 <__assert_fail@plt+0x3ed0>
   1504c:	mov	r0, r6
   15050:	bl	10f94 <realloc@plt>
   15054:	cmp	r0, #0
   15058:	movne	r6, r0
   1505c:	b	15074 <__assert_fail@plt+0x3ed0>
   15060:	mov	r3, #12
   15064:	str	r3, [fp]
   15068:	mov	r0, r6
   1506c:	bl	10f28 <free@plt>
   15070:	mov	r6, #0
   15074:	ldr	r2, [sp, #28]
   15078:	ldr	r3, [r9]
   1507c:	mov	r0, r6
   15080:	cmp	r2, r3
   15084:	bne	150a0 <__assert_fail@plt+0x3efc>
   15088:	add	sp, sp, #36	; 0x24
   1508c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15090:	bl	11090 <__errno_location@plt>
   15094:	mov	r3, #12
   15098:	str	r3, [r0]
   1509c:	b	15074 <__assert_fail@plt+0x3ed0>
   150a0:	bl	10f88 <__stack_chk_fail@plt>
   150a4:	andeq	r5, r2, r8, lsl #30
   150a8:	push	{r4, r5, r6, lr}
   150ac:	mov	r4, r0
   150b0:	ldrb	r3, [r0]
   150b4:	cmp	r3, #0
   150b8:	beq	150d8 <__assert_fail@plt+0x3f34>
   150bc:	mov	r6, r1
   150c0:	mov	r0, r6
   150c4:	mov	r1, r2
   150c8:	mov	r5, r2
   150cc:	bl	130c8 <__assert_fail@plt+0x1f24>
   150d0:	cmp	r0, #0
   150d4:	bne	150f0 <__assert_fail@plt+0x3f4c>
   150d8:	mov	r0, r4
   150dc:	bl	10f7c <strdup@plt>
   150e0:	subs	r4, r0, #0
   150e4:	beq	15150 <__assert_fail@plt+0x3fac>
   150e8:	mov	r0, r4
   150ec:	pop	{r4, r5, r6, pc}
   150f0:	mov	r0, r5
   150f4:	mov	r1, r6
   150f8:	bl	11018 <iconv_open@plt>
   150fc:	cmn	r0, #1
   15100:	mov	r5, r0
   15104:	moveq	r4, #0
   15108:	beq	150e8 <__assert_fail@plt+0x3f44>
   1510c:	mov	r0, r4
   15110:	mov	r1, r5
   15114:	bl	14ec0 <__assert_fail@plt+0x3d1c>
   15118:	subs	r4, r0, #0
   1511c:	beq	15164 <__assert_fail@plt+0x3fc0>
   15120:	mov	r0, r5
   15124:	bl	10ed4 <iconv_close@plt>
   15128:	cmp	r0, #0
   1512c:	bge	150e8 <__assert_fail@plt+0x3f44>
   15130:	bl	11090 <__errno_location@plt>
   15134:	mov	r5, r0
   15138:	mov	r0, r4
   1513c:	ldr	r6, [r5]
   15140:	mov	r4, #0
   15144:	bl	10f28 <free@plt>
   15148:	str	r6, [r5]
   1514c:	b	150e8 <__assert_fail@plt+0x3f44>
   15150:	bl	11090 <__errno_location@plt>
   15154:	mov	r3, #12
   15158:	str	r3, [r0]
   1515c:	mov	r0, r4
   15160:	pop	{r4, r5, r6, pc}
   15164:	bl	11090 <__errno_location@plt>
   15168:	mov	r6, r0
   1516c:	mov	r0, r5
   15170:	ldr	r5, [r6]
   15174:	bl	10ed4 <iconv_close@plt>
   15178:	str	r5, [r6]
   1517c:	b	150e8 <__assert_fail@plt+0x3f44>
   15180:	mov	r3, #8
   15184:	adds	r0, r0, r3
   15188:	bcs	151d8 <__assert_fail@plt+0x4034>
   1518c:	push	{r4, lr}
   15190:	bl	1100c <malloc@plt>
   15194:	subs	r2, r0, #0
   15198:	beq	151d0 <__assert_fail@plt+0x402c>
   1519c:	ldr	r3, [pc, #60]	; 151e0 <__assert_fail@plt+0x403c>
   151a0:	add	r0, r2, #8
   151a4:	ldr	r1, [pc, #56]	; 151e4 <__assert_fail@plt+0x4040>
   151a8:	umull	ip, r3, r3, r0
   151ac:	ldr	ip, [pc, #52]	; 151e8 <__assert_fail@plt+0x4044>
   151b0:	lsr	r3, r3, #8
   151b4:	str	ip, [r2, #4]
   151b8:	add	r3, r3, r3, lsl #8
   151bc:	sub	r3, r0, r3
   151c0:	ldr	ip, [r1, r3, lsl #2]
   151c4:	str	r0, [r1, r3, lsl #2]
   151c8:	str	ip, [r2]
   151cc:	pop	{r4, pc}
   151d0:	mov	r0, #0
   151d4:	pop	{r4, pc}
   151d8:	mov	r0, #0
   151dc:	bx	lr
   151e0:			; <UNDEFINED> instruction: 0xff00ff01
   151e4:	andeq	r6, r2, r4, ror #2
   151e8:	ldrne	pc, [r5], #-2890	; 0xfffff4b6
   151ec:	cmp	r0, #0
   151f0:	bxeq	lr
   151f4:	ldr	r3, [pc, #104]	; 15264 <__assert_fail@plt+0x40c0>
   151f8:	ldr	r2, [r0, #-4]
   151fc:	cmp	r2, r3
   15200:	bxne	lr
   15204:	ldr	r2, [pc, #92]	; 15268 <__assert_fail@plt+0x40c4>
   15208:	ldr	r1, [pc, #92]	; 1526c <__assert_fail@plt+0x40c8>
   1520c:	umull	r3, r2, r2, r0
   15210:	lsr	r3, r2, #8
   15214:	add	r2, r3, r3, lsl #8
   15218:	sub	r3, r0, r2
   1521c:	ldr	r2, [r1, r3, lsl #2]
   15220:	cmp	r2, #0
   15224:	bxeq	lr
   15228:	cmp	r0, r2
   1522c:	bne	15238 <__assert_fail@plt+0x4094>
   15230:	b	1525c <__assert_fail@plt+0x40b8>
   15234:	mov	r2, r3
   15238:	ldr	r3, [r2, #-8]
   1523c:	cmp	r3, #0
   15240:	bxeq	lr
   15244:	cmp	r0, r3
   15248:	bne	15234 <__assert_fail@plt+0x4090>
   1524c:	sub	r2, r2, #8
   15250:	ldr	r3, [r0, #-8]!
   15254:	str	r3, [r2]
   15258:	b	10f28 <free@plt>
   1525c:	add	r2, r1, r3, lsl #2
   15260:	b	15250 <__assert_fail@plt+0x40ac>
   15264:	ldrne	pc, [r5], #-2890	; 0xfffff4b6
   15268:			; <UNDEFINED> instruction: 0xff00ff01
   1526c:	andeq	r6, r2, r4, ror #2
   15270:	push	{r4, r5, r6, r7, r8, lr}
   15274:	sub	sp, sp, #64	; 0x40
   15278:	ldr	r7, [pc, #464]	; 15450 <__assert_fail@plt+0x42ac>
   1527c:	mov	r4, r0
   15280:	ldr	r3, [r7]
   15284:	str	r3, [sp, #60]	; 0x3c
   15288:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   1528c:	cmp	r0, #1
   15290:	bhi	152bc <__assert_fail@plt+0x4118>
   15294:	mov	r0, r4
   15298:	bl	1106c <strlen@plt>
   1529c:	mov	r5, r0
   152a0:	ldr	r2, [sp, #60]	; 0x3c
   152a4:	ldr	r3, [r7]
   152a8:	mov	r0, r5
   152ac:	cmp	r2, r3
   152b0:	bne	15438 <__assert_fail@plt+0x4294>
   152b4:	add	sp, sp, #64	; 0x40
   152b8:	pop	{r4, r5, r6, r7, r8, pc}
   152bc:	mov	r5, #0
   152c0:	str	r4, [sp, #20]
   152c4:	str	r5, [sp, #12]
   152c8:	strb	r5, [sp, #4]
   152cc:	str	r5, [sp, #8]
   152d0:	strb	r5, [sp, #16]
   152d4:	mov	r6, #1
   152d8:	ldr	r8, [pc, #372]	; 15454 <__assert_fail@plt+0x42b0>
   152dc:	b	15334 <__assert_fail@plt+0x4190>
   152e0:	ldrb	r3, [r4]
   152e4:	and	r2, r3, #31
   152e8:	lsr	r3, r3, #5
   152ec:	ldr	r3, [r8, r3, lsl #2]
   152f0:	lsr	r3, r3, r2
   152f4:	tst	r3, #1
   152f8:	beq	153a8 <__assert_fail@plt+0x4204>
   152fc:	str	r6, [sp, #24]
   15300:	ldrb	r4, [r4]
   15304:	strb	r6, [sp, #28]
   15308:	strb	r6, [sp, #16]
   1530c:	str	r4, [sp, #32]
   15310:	cmp	r4, #0
   15314:	beq	152a0 <__assert_fail@plt+0x40fc>
   15318:	ldr	r4, [sp, #20]
   1531c:	ldr	r3, [sp, #24]
   15320:	add	r5, r5, #1
   15324:	add	r4, r4, r3
   15328:	mov	r3, #0
   1532c:	str	r4, [sp, #20]
   15330:	strb	r3, [sp, #16]
   15334:	ldrb	r3, [sp, #4]
   15338:	cmp	r3, #0
   1533c:	beq	152e0 <__assert_fail@plt+0x413c>
   15340:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   15344:	mov	r1, r0
   15348:	mov	r0, r4
   1534c:	bl	1294c <__assert_fail@plt+0x17a8>
   15350:	add	r3, sp, #8
   15354:	mov	r1, r4
   15358:	mov	r2, r0
   1535c:	add	r0, sp, #32
   15360:	bl	13048 <__assert_fail@plt+0x1ea4>
   15364:	cmn	r0, #1
   15368:	str	r0, [sp, #24]
   1536c:	beq	153c0 <__assert_fail@plt+0x421c>
   15370:	cmn	r0, #2
   15374:	beq	153d4 <__assert_fail@plt+0x4230>
   15378:	cmp	r0, #0
   1537c:	beq	153f0 <__assert_fail@plt+0x424c>
   15380:	ldr	r4, [sp, #32]
   15384:	add	r0, sp, #8
   15388:	strb	r6, [sp, #28]
   1538c:	bl	10f4c <mbsinit@plt>
   15390:	cmp	r0, #0
   15394:	movne	r3, #0
   15398:	strbeq	r6, [sp, #16]
   1539c:	strbne	r6, [sp, #16]
   153a0:	strbne	r3, [sp, #4]
   153a4:	b	15310 <__assert_fail@plt+0x416c>
   153a8:	add	r0, sp, #8
   153ac:	bl	10f4c <mbsinit@plt>
   153b0:	cmp	r0, #0
   153b4:	beq	15424 <__assert_fail@plt+0x4280>
   153b8:	strb	r6, [sp, #4]
   153bc:	b	15340 <__assert_fail@plt+0x419c>
   153c0:	mov	r3, #0
   153c4:	str	r6, [sp, #24]
   153c8:	strb	r3, [sp, #28]
   153cc:	ldr	r4, [sp, #20]
   153d0:	b	1531c <__assert_fail@plt+0x4178>
   153d4:	ldr	r4, [sp, #20]
   153d8:	mov	r0, r4
   153dc:	bl	1106c <strlen@plt>
   153e0:	mov	r3, #0
   153e4:	strb	r3, [sp, #28]
   153e8:	str	r0, [sp, #24]
   153ec:	b	1531c <__assert_fail@plt+0x4178>
   153f0:	ldr	r4, [sp, #20]
   153f4:	str	r6, [sp, #24]
   153f8:	ldrb	r3, [r4]
   153fc:	cmp	r3, #0
   15400:	bne	1543c <__assert_fail@plt+0x4298>
   15404:	ldr	r4, [sp, #32]
   15408:	cmp	r4, #0
   1540c:	beq	15384 <__assert_fail@plt+0x41e0>
   15410:	ldr	r3, [pc, #64]	; 15458 <__assert_fail@plt+0x42b4>
   15414:	mov	r2, #179	; 0xb3
   15418:	ldr	r1, [pc, #60]	; 1545c <__assert_fail@plt+0x42b8>
   1541c:	ldr	r0, [pc, #60]	; 15460 <__assert_fail@plt+0x42bc>
   15420:	bl	111a4 <__assert_fail@plt>
   15424:	ldr	r3, [pc, #44]	; 15458 <__assert_fail@plt+0x42b4>
   15428:	mov	r2, #150	; 0x96
   1542c:	ldr	r1, [pc, #40]	; 1545c <__assert_fail@plt+0x42b8>
   15430:	ldr	r0, [pc, #44]	; 15464 <__assert_fail@plt+0x42c0>
   15434:	bl	111a4 <__assert_fail@plt>
   15438:	bl	10f88 <__stack_chk_fail@plt>
   1543c:	ldr	r3, [pc, #20]	; 15458 <__assert_fail@plt+0x42b4>
   15440:	mov	r2, #178	; 0xb2
   15444:	ldr	r1, [pc, #16]	; 1545c <__assert_fail@plt+0x42b8>
   15448:	ldr	r0, [pc, #24]	; 15468 <__assert_fail@plt+0x42c4>
   1544c:	bl	111a4 <__assert_fail@plt>
   15450:	andeq	r5, r2, r8, lsl #30
   15454:	andeq	r5, r1, r0, asr #24
   15458:	andeq	r5, r1, r4, ror ip
   1545c:	andeq	r5, r1, r0, asr fp
   15460:	andeq	r5, r1, ip, asr fp
   15464:	andeq	r5, r1, r0, ror fp
   15468:	andeq	r5, r1, r8, lsl #23
   1546c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15470:	mov	r7, r0
   15474:	ldr	r6, [pc, #72]	; 154c4 <__assert_fail@plt+0x4320>
   15478:	ldr	r5, [pc, #72]	; 154c8 <__assert_fail@plt+0x4324>
   1547c:	add	r6, pc, r6
   15480:	add	r5, pc, r5
   15484:	sub	r6, r6, r5
   15488:	mov	r8, r1
   1548c:	mov	r9, r2
   15490:	bl	10e9c <fdopen@plt-0x20>
   15494:	asrs	r6, r6, #2
   15498:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1549c:	mov	r4, #0
   154a0:	add	r4, r4, #1
   154a4:	ldr	r3, [r5], #4
   154a8:	mov	r2, r9
   154ac:	mov	r1, r8
   154b0:	mov	r0, r7
   154b4:	blx	r3
   154b8:	cmp	r6, r4
   154bc:	bne	154a0 <__assert_fail@plt+0x42fc>
   154c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154c4:	andeq	r0, r1, r0, lsl #21
   154c8:	andeq	r0, r1, r8, ror sl
   154cc:	bx	lr
   154d0:	ldr	r3, [pc, #12]	; 154e4 <__assert_fail@plt+0x4340>
   154d4:	mov	r1, #0
   154d8:	add	r3, pc, r3
   154dc:	ldr	r2, [r3]
   154e0:	b	110b4 <__cxa_atexit@plt>
   154e4:	andeq	r0, r1, r0, lsr ip

Disassembly of section .fini:

000154e8 <.fini>:
   154e8:	push	{r3, lr}
   154ec:	pop	{r3, pc}
