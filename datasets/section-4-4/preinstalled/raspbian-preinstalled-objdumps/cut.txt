
raspbian-preinstalled/cut:     file format elf32-littlearm


Disassembly of section .init:

00010e6c <.init>:
   10e6c:	push	{r3, lr}
   10e70:	bl	11570 <__assert_fail@plt+0x42c>
   10e74:	pop	{r3, pc}

Disassembly of section .plt:

00010e78 <calloc@plt-0x14>:
   10e78:	push	{lr}		; (str lr, [sp, #-4]!)
   10e7c:	ldr	lr, [pc, #4]	; 10e88 <calloc@plt-0x4>
   10e80:	add	lr, pc, lr
   10e84:	ldr	pc, [lr, #8]!
   10e88:	andeq	r7, r1, r8, ror r1

00010e8c <calloc@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #376]!	; 0x178

00010e98 <fputs_unlocked@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #368]!	; 0x170

00010ea4 <raise@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #360]!	; 0x168

00010eb0 <strcmp@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #352]!	; 0x160

00010ebc <posix_fadvise64@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #344]!	; 0x158

00010ec8 <fflush@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #336]!	; 0x150

00010ed4 <memmove@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #328]!	; 0x148

00010ee0 <free@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #320]!	; 0x140

00010eec <ferror@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #312]!	; 0x138

00010ef8 <strndup@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #304]!	; 0x130

00010f04 <_exit@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #296]!	; 0x128

00010f10 <memcpy@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #288]!	; 0x120

00010f1c <mbsinit@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #280]!	; 0x118

00010f28 <fwrite_unlocked@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #272]!	; 0x110

00010f34 <memcmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #264]!	; 0x108

00010f40 <dcgettext@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #256]!	; 0x100

00010f4c <__stack_chk_fail@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #248]!	; 0xf8

00010f58 <realloc@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #240]!	; 0xf0

00010f64 <textdomain@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #232]!	; 0xe8

00010f70 <iswprint@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #224]!	; 0xe0

00010f7c <fwrite@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #216]!	; 0xd8

00010f88 <lseek64@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #208]!	; 0xd0

00010f94 <__ctype_get_mb_cur_max@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #200]!	; 0xc8

00010fa0 <__fpending@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #192]!	; 0xc0

00010fac <mbrtowc@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #184]!	; 0xb8

00010fb8 <error@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #176]!	; 0xb0

00010fc4 <malloc@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #168]!	; 0xa8

00010fd0 <__libc_start_main@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #160]!	; 0xa0

00010fdc <__freading@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #152]!	; 0x98

00010fe8 <__gmon_start__@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #144]!	; 0x90

00010ff4 <getopt_long@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #136]!	; 0x88

00011000 <__ctype_b_loc@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #128]!	; 0x80

0001100c <exit@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #120]!	; 0x78

00011018 <strlen@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #112]!	; 0x70

00011024 <ungetc@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #104]!	; 0x68

00011030 <__errno_location@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #96]!	; 0x60

0001103c <__cxa_atexit@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #88]!	; 0x58

00011048 <memset@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #80]!	; 0x50

00011054 <fgetc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #72]!	; 0x48

00011060 <__printf_chk@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #94208	; 0x17000
   11068:	ldr	pc, [ip, #64]!	; 0x40

0001106c <fileno@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #94208	; 0x17000
   11074:	ldr	pc, [ip, #56]!	; 0x38

00011078 <__fprintf_chk@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #94208	; 0x17000
   11080:	ldr	pc, [ip, #48]!	; 0x30

00011084 <memchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #94208	; 0x17000
   1108c:	ldr	pc, [ip, #40]!	; 0x28

00011090 <fclose@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #94208	; 0x17000
   11098:	ldr	pc, [ip, #32]!

0001109c <fseeko64@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #94208	; 0x17000
   110a4:	ldr	pc, [ip, #24]!

000110a8 <__fread_chk@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #94208	; 0x17000
   110b0:	ldr	pc, [ip, #16]!

000110b4 <__uflow@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #94208	; 0x17000
   110bc:	ldr	pc, [ip, #8]!

000110c0 <__overflow@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #94208	; 0x17000
   110c8:	ldr	pc, [ip, #0]!

000110cc <setlocale@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #4088]!	; 0xff8

000110d8 <strrchr@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #4080]!	; 0xff0

000110e4 <nl_langinfo@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #4072]!	; 0xfe8

000110f0 <clearerr_unlocked@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #4064]!	; 0xfe0

000110fc <fopen64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #4056]!	; 0xfd8

00011108 <qsort@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #4048]!	; 0xfd0

00011114 <bindtextdomain@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011120 <strncmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #4032]!	; 0xfc0

0001112c <abort@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #4024]!	; 0xfb8

00011138 <strspn@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #4016]!	; 0xfb0

00011144 <__assert_fail@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #90112	; 0x16000
   1114c:	ldr	pc, [ip, #4008]!	; 0xfa8

Disassembly of section .text:

00011150 <.text>:
   11150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11154:	mov	r7, r0
   11158:	sub	sp, sp, #36	; 0x24
   1115c:	ldr	r0, [r1]
   11160:	mov	r5, r1
   11164:	bl	12f30 <__assert_fail@plt+0x1dec>
   11168:	ldr	r1, [pc, #860]	; 114cc <__assert_fail@plt+0x388>
   1116c:	mov	r0, #6
   11170:	bl	110cc <setlocale@plt>
   11174:	ldr	r1, [pc, #852]	; 114d0 <__assert_fail@plt+0x38c>
   11178:	ldr	r0, [pc, #852]	; 114d4 <__assert_fail@plt+0x390>
   1117c:	bl	11114 <bindtextdomain@plt>
   11180:	ldr	r0, [pc, #844]	; 114d4 <__assert_fail@plt+0x390>
   11184:	bl	10f64 <textdomain@plt>
   11188:	ldr	r0, [pc, #840]	; 114d8 <__assert_fail@plt+0x394>
   1118c:	bl	16110 <__assert_fail@plt+0x4fcc>
   11190:	ldr	r4, [pc, #836]	; 114dc <__assert_fail@plt+0x398>
   11194:	mov	r3, #0
   11198:	ldr	r9, [pc, #832]	; 114e0 <__assert_fail@plt+0x39c>
   1119c:	ldr	r8, [pc, #832]	; 114e4 <__assert_fail@plt+0x3a0>
   111a0:	ldr	fp, [pc, #832]	; 114e8 <__assert_fail@plt+0x3a4>
   111a4:	ldr	sl, [pc, #832]	; 114ec <__assert_fail@plt+0x3a8>
   111a8:	mov	r6, r3
   111ac:	str	r3, [sp, #20]
   111b0:	str	r3, [r4, #4]
   111b4:	strb	r3, [r4, #24]
   111b8:	strb	r3, [r4, #36]	; 0x24
   111bc:	strb	r3, [r4]
   111c0:	str	r6, [sp]
   111c4:	mov	r3, r9
   111c8:	mov	r2, r8
   111cc:	mov	r1, r5
   111d0:	mov	r0, r7
   111d4:	bl	10ff4 <getopt_long@plt>
   111d8:	cmn	r0, #1
   111dc:	beq	11358 <__assert_fail@plt+0x214>
   111e0:	cmp	r0, #102	; 0x66
   111e4:	beq	1132c <__assert_fail@plt+0x1e8>
   111e8:	ble	11214 <__assert_fail@plt+0xd0>
   111ec:	cmp	r0, #122	; 0x7a
   111f0:	beq	1134c <__assert_fail@plt+0x208>
   111f4:	bgt	11268 <__assert_fail@plt+0x124>
   111f8:	cmp	r0, #110	; 0x6e
   111fc:	beq	111c0 <__assert_fail@plt+0x7c>
   11200:	cmp	r0, #115	; 0x73
   11204:	bne	114b8 <__assert_fail@plt+0x374>
   11208:	mov	r3, #1
   1120c:	strb	r3, [r4, #24]
   11210:	b	111c0 <__assert_fail@plt+0x7c>
   11214:	cmp	r0, #99	; 0x63
   11218:	bgt	112d8 <__assert_fail@plt+0x194>
   1121c:	cmp	r0, #98	; 0x62
   11220:	bge	1130c <__assert_fail@plt+0x1c8>
   11224:	cmn	r0, #3
   11228:	bne	112c8 <__assert_fail@plt+0x184>
   1122c:	ldr	ip, [pc, #700]	; 114f0 <__assert_fail@plt+0x3ac>
   11230:	ldr	r1, [pc, #700]	; 114f4 <__assert_fail@plt+0x3b0>
   11234:	ldr	r3, [pc, #700]	; 114f8 <__assert_fail@plt+0x3b4>
   11238:	ldr	r0, [pc, #700]	; 114fc <__assert_fail@plt+0x3b8>
   1123c:	ldr	r2, [pc, #700]	; 11500 <__assert_fail@plt+0x3bc>
   11240:	str	r6, [sp, #12]
   11244:	ldr	r0, [r0]
   11248:	ldr	r3, [r3]
   1124c:	stmib	sp, {r1, ip}
   11250:	str	r2, [sp]
   11254:	ldr	r1, [pc, #680]	; 11504 <__assert_fail@plt+0x3c0>
   11258:	ldr	r2, [pc, #680]	; 11508 <__assert_fail@plt+0x3c4>
   1125c:	bl	15600 <__assert_fail@plt+0x44bc>
   11260:	mov	r0, #0
   11264:	bl	1100c <exit@plt>
   11268:	cmp	r0, #256	; 0x100
   1126c:	bne	112b4 <__assert_fail@plt+0x170>
   11270:	ldr	r2, [fp]
   11274:	mov	r0, #1
   11278:	strb	r0, [r4, #12]
   1127c:	ldrb	r3, [r2]
   11280:	cmp	r3, #0
   11284:	moveq	r3, r0
   11288:	beq	112a0 <__assert_fail@plt+0x15c>
   1128c:	mov	r0, r2
   11290:	str	r2, [sp, #28]
   11294:	bl	11018 <strlen@plt>
   11298:	ldr	r2, [sp, #28]
   1129c:	mov	r3, r0
   112a0:	mov	r0, r2
   112a4:	str	r3, [r4, #16]
   112a8:	bl	15930 <__assert_fail@plt+0x47ec>
   112ac:	str	r0, [r4, #20]
   112b0:	b	111c0 <__assert_fail@plt+0x7c>
   112b4:	cmp	r0, sl
   112b8:	bne	114b8 <__assert_fail@plt+0x374>
   112bc:	mov	r3, #1
   112c0:	strb	r3, [r4, #37]	; 0x25
   112c4:	b	111c0 <__assert_fail@plt+0x7c>
   112c8:	cmn	r0, #2
   112cc:	bne	114b8 <__assert_fail@plt+0x374>
   112d0:	mov	r0, #0
   112d4:	bl	11e24 <__assert_fail@plt+0xce0>
   112d8:	cmp	r0, #100	; 0x64
   112dc:	bne	114b8 <__assert_fail@plt+0x374>
   112e0:	ldr	r2, [fp]
   112e4:	ldrb	r3, [r2]
   112e8:	cmp	r3, #0
   112ec:	beq	112fc <__assert_fail@plt+0x1b8>
   112f0:	ldrb	r2, [r2, #1]
   112f4:	cmp	r2, #0
   112f8:	bne	114c0 <__assert_fail@plt+0x37c>
   112fc:	strb	r3, [r4, #36]	; 0x24
   11300:	mov	r3, #1
   11304:	str	r3, [sp, #20]
   11308:	b	111c0 <__assert_fail@plt+0x7c>
   1130c:	ldr	r3, [r4, #4]
   11310:	cmp	r3, #0
   11314:	bne	11498 <__assert_fail@plt+0x354>
   11318:	mov	r3, #1
   1131c:	str	r3, [r4, #4]
   11320:	ldr	r3, [fp]
   11324:	str	r3, [sp, #24]
   11328:	b	111c0 <__assert_fail@plt+0x7c>
   1132c:	ldr	r3, [r4, #4]
   11330:	cmp	r3, #0
   11334:	bne	11498 <__assert_fail@plt+0x354>
   11338:	mov	r3, #2
   1133c:	str	r3, [r4, #4]
   11340:	ldr	r3, [fp]
   11344:	str	r3, [sp, #24]
   11348:	b	111c0 <__assert_fail@plt+0x7c>
   1134c:	ldr	r3, [pc, #440]	; 1150c <__assert_fail@plt+0x3c8>
   11350:	strb	r6, [r3]
   11354:	b	111c0 <__assert_fail@plt+0x7c>
   11358:	ldr	r6, [r4, #4]
   1135c:	cmp	r6, #0
   11360:	moveq	r2, #5
   11364:	ldreq	r1, [pc, #420]	; 11510 <__assert_fail@plt+0x3cc>
   11368:	beq	114a0 <__assert_fail@plt+0x35c>
   1136c:	subs	r3, r6, #2
   11370:	ldr	r2, [sp, #20]
   11374:	movne	r3, #1
   11378:	ands	r8, r3, r2
   1137c:	movne	r2, #5
   11380:	ldrne	r1, [pc, #396]	; 11514 <__assert_fail@plt+0x3d0>
   11384:	bne	114a0 <__assert_fail@plt+0x35c>
   11388:	ldrb	r2, [r4, #24]
   1138c:	tst	r3, r2
   11390:	movne	r2, #5
   11394:	ldrne	r1, [pc, #380]	; 11518 <__assert_fail@plt+0x3d4>
   11398:	bne	114a0 <__assert_fail@plt+0x35c>
   1139c:	ldrb	r3, [r4, #37]	; 0x25
   113a0:	cmp	r6, #2
   113a4:	moveq	r1, #0
   113a8:	movne	r1, #4
   113ac:	cmp	r3, #0
   113b0:	movne	r3, #2
   113b4:	moveq	r3, #0
   113b8:	orr	r1, r1, r3
   113bc:	ldr	r0, [sp, #24]
   113c0:	bl	122ec <__assert_fail@plt+0x11a8>
   113c4:	ldr	r3, [sp, #20]
   113c8:	cmp	r3, #0
   113cc:	moveq	r3, #9
   113d0:	strbeq	r3, [r4, #36]	; 0x24
   113d4:	ldr	r3, [r4, #20]
   113d8:	cmp	r3, #0
   113dc:	beq	11468 <__assert_fail@plt+0x324>
   113e0:	ldr	r8, [pc, #308]	; 1151c <__assert_fail@plt+0x3d8>
   113e4:	ldr	r3, [r8]
   113e8:	cmp	r3, r7
   113ec:	beq	11488 <__assert_fail@plt+0x344>
   113f0:	mov	r6, #1
   113f4:	bge	1141c <__assert_fail@plt+0x2d8>
   113f8:	ldr	r0, [r5, r3, lsl #2]
   113fc:	bl	11624 <__assert_fail@plt+0x4e0>
   11400:	ldr	r3, [r8]
   11404:	add	r3, r3, #1
   11408:	cmp	r3, r7
   1140c:	str	r3, [r8]
   11410:	and	r6, r6, r0
   11414:	uxtb	r6, r6
   11418:	blt	113f8 <__assert_fail@plt+0x2b4>
   1141c:	ldrb	r3, [r4]
   11420:	cmp	r3, #0
   11424:	bne	11438 <__assert_fail@plt+0x2f4>
   11428:	eor	r0, r6, #1
   1142c:	uxtb	r0, r0
   11430:	add	sp, sp, #36	; 0x24
   11434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11438:	ldr	r3, [pc, #224]	; 11520 <__assert_fail@plt+0x3dc>
   1143c:	ldr	r0, [r3]
   11440:	bl	159a0 <__assert_fail@plt+0x485c>
   11444:	cmn	r0, #1
   11448:	bne	11428 <__assert_fail@plt+0x2e4>
   1144c:	bl	11030 <__errno_location@plt>
   11450:	mov	r6, #0
   11454:	ldr	r2, [pc, #200]	; 11524 <__assert_fail@plt+0x3e0>
   11458:	ldr	r1, [r0]
   1145c:	mov	r0, r6
   11460:	bl	10fb8 <error@plt>
   11464:	b	11428 <__assert_fail@plt+0x2e4>
   11468:	ldrb	r1, [r4, #36]	; 0x24
   1146c:	ldr	r2, [pc, #180]	; 11528 <__assert_fail@plt+0x3e4>
   11470:	strb	r3, [r4, #41]	; 0x29
   11474:	mov	r3, #1
   11478:	strb	r1, [r4, #40]	; 0x28
   1147c:	str	r2, [r4, #20]
   11480:	str	r3, [r4, #16]
   11484:	b	113e0 <__assert_fail@plt+0x29c>
   11488:	ldr	r0, [pc, #148]	; 11524 <__assert_fail@plt+0x3e0>
   1148c:	bl	11624 <__assert_fail@plt+0x4e0>
   11490:	mov	r6, r0
   11494:	b	1141c <__assert_fail@plt+0x2d8>
   11498:	ldr	r1, [pc, #140]	; 1152c <__assert_fail@plt+0x3e8>
   1149c:	mov	r2, #5
   114a0:	mov	r0, #0
   114a4:	bl	10f40 <dcgettext@plt>
   114a8:	mov	r1, #0
   114ac:	mov	r2, r0
   114b0:	mov	r0, r1
   114b4:	bl	10fb8 <error@plt>
   114b8:	mov	r0, #1
   114bc:	bl	11e24 <__assert_fail@plt+0xce0>
   114c0:	mov	r2, #5
   114c4:	ldr	r1, [pc, #100]	; 11530 <__assert_fail@plt+0x3ec>
   114c8:	b	114a0 <__assert_fail@plt+0x35c>
   114cc:	andeq	r7, r1, r4, lsr #3
   114d0:			; <UNDEFINED> instruction: 0x000169b0
   114d4:	andeq	r6, r1, r4, lsl #18
   114d8:	andeq	r2, r1, r0, asr #19
   114dc:	andeq	r8, r2, r8, ror r1
   114e0:	andeq	r6, r1, r8, ror r1
   114e4:	andeq	r6, r1, r8, asr #20
   114e8:	andeq	r8, r2, r0, ror r1
   114ec:	andeq	r0, r0, r1, lsl #2
   114f0:	andeq	r6, r1, r8, lsl sl
   114f4:	andeq	r6, r1, r8, lsr #20
   114f8:	andeq	r8, r2, r8, lsl #2
   114fc:	andeq	r8, r2, ip, ror #2
   11500:	andeq	r6, r1, r8, lsr sl
   11504:	andeq	r6, r1, r4, asr #4
   11508:	andeq	r6, r1, r0, lsl #18
   1150c:	andeq	r8, r2, r4, lsl #2
   11510:	andeq	r6, r1, r4, asr sl
   11514:	andeq	r6, r1, ip, lsl #21
   11518:	ldrdeq	r6, [r1], -r0
   1151c:	andeq	r8, r2, r8, asr r1
   11520:	andeq	r8, r2, r8, ror #2
   11524:	muleq	r1, r8, ip
   11528:	andeq	r8, r2, r0, lsr #3
   1152c:	andeq	r6, r1, r4, asr #19
   11530:	andeq	r6, r1, ip, ror #19
   11534:	mov	fp, #0
   11538:	mov	lr, #0
   1153c:	pop	{r1}		; (ldr r1, [sp], #4)
   11540:	mov	r2, sp
   11544:	push	{r2}		; (str r2, [sp, #-4]!)
   11548:	push	{r0}		; (str r0, [sp, #-4]!)
   1154c:	ldr	ip, [pc, #16]	; 11564 <__assert_fail@plt+0x420>
   11550:	push	{ip}		; (str ip, [sp, #-4]!)
   11554:	ldr	r0, [pc, #12]	; 11568 <__assert_fail@plt+0x424>
   11558:	ldr	r3, [pc, #12]	; 1156c <__assert_fail@plt+0x428>
   1155c:	bl	10fd0 <__libc_start_main@plt>
   11560:	bl	1112c <abort@plt>
   11564:	andeq	r6, r1, ip, lsl #2
   11568:	andeq	r1, r1, r0, asr r1
   1156c:	andeq	r6, r1, ip, lsr #1
   11570:	ldr	r3, [pc, #20]	; 1158c <__assert_fail@plt+0x448>
   11574:	ldr	r2, [pc, #20]	; 11590 <__assert_fail@plt+0x44c>
   11578:	add	r3, pc, r3
   1157c:	ldr	r2, [r3, r2]
   11580:	cmp	r2, #0
   11584:	bxeq	lr
   11588:	b	10fe8 <__gmon_start__@plt>
   1158c:	andeq	r6, r1, r0, lsl #21
   11590:	strdeq	r0, [r0], -r8
   11594:	ldr	r0, [pc, #24]	; 115b4 <__assert_fail@plt+0x470>
   11598:	ldr	r3, [pc, #24]	; 115b8 <__assert_fail@plt+0x474>
   1159c:	cmp	r3, r0
   115a0:	bxeq	lr
   115a4:	ldr	r3, [pc, #16]	; 115bc <__assert_fail@plt+0x478>
   115a8:	cmp	r3, #0
   115ac:	bxeq	lr
   115b0:	bx	r3
   115b4:	andeq	r8, r2, r0, asr r1
   115b8:	andeq	r8, r2, r0, asr r1
   115bc:	andeq	r0, r0, r0
   115c0:	ldr	r0, [pc, #36]	; 115ec <__assert_fail@plt+0x4a8>
   115c4:	ldr	r1, [pc, #36]	; 115f0 <__assert_fail@plt+0x4ac>
   115c8:	sub	r1, r1, r0
   115cc:	asr	r1, r1, #2
   115d0:	add	r1, r1, r1, lsr #31
   115d4:	asrs	r1, r1, #1
   115d8:	bxeq	lr
   115dc:	ldr	r3, [pc, #16]	; 115f4 <__assert_fail@plt+0x4b0>
   115e0:	cmp	r3, #0
   115e4:	bxeq	lr
   115e8:	bx	r3
   115ec:	andeq	r8, r2, r0, asr r1
   115f0:	andeq	r8, r2, r0, asr r1
   115f4:	andeq	r0, r0, r0
   115f8:	push	{r4, lr}
   115fc:	ldr	r4, [pc, #24]	; 1161c <__assert_fail@plt+0x4d8>
   11600:	ldrb	r3, [r4]
   11604:	cmp	r3, #0
   11608:	popne	{r4, pc}
   1160c:	bl	11594 <__assert_fail@plt+0x450>
   11610:	mov	r3, #1
   11614:	strb	r3, [r4]
   11618:	pop	{r4, pc}
   1161c:	andeq	r8, r2, r4, ror r1
   11620:	b	115c0 <__assert_fail@plt+0x47c>
   11624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11628:	sub	sp, sp, #36	; 0x24
   1162c:	ldr	r1, [pc, #1980]	; 11df0 <__assert_fail@plt+0xcac>
   11630:	str	r0, [sp, #20]
   11634:	bl	10eb0 <strcmp@plt>
   11638:	cmp	r0, #0
   1163c:	bne	11b68 <__assert_fail@plt+0xa24>
   11640:	ldr	r3, [pc, #1964]	; 11df4 <__assert_fail@plt+0xcb0>
   11644:	ldr	r4, [pc, #1964]	; 11df8 <__assert_fail@plt+0xcb4>
   11648:	mov	r2, #1
   1164c:	ldr	r5, [r3]
   11650:	strb	r2, [r4]
   11654:	mov	r1, #2
   11658:	mov	r0, r5
   1165c:	bl	12a9c <__assert_fail@plt+0x1958>
   11660:	ldr	r3, [r4, #4]
   11664:	cmp	r3, #1
   11668:	ldr	r3, [pc, #1932]	; 11dfc <__assert_fail@plt+0xcb8>
   1166c:	beq	11b84 <__assert_fail@plt+0xa40>
   11670:	mov	r2, r3
   11674:	str	r3, [sp, #16]
   11678:	ldr	r1, [r5, #8]
   1167c:	ldr	r3, [r5, #4]
   11680:	ldr	r2, [r2]
   11684:	cmp	r3, r1
   11688:	str	r2, [r4, #8]
   1168c:	bcs	118f4 <__assert_fail@plt+0x7b0>
   11690:	add	r2, r3, #1
   11694:	str	r2, [r5, #4]
   11698:	ldrb	r0, [r3]
   1169c:	mov	r1, r5
   116a0:	bl	11024 <ungetc@plt>
   116a4:	ldr	r3, [r4, #8]
   116a8:	ldrb	r1, [r4, #24]
   116ac:	mov	r8, #0
   116b0:	ldrd	r2, [r3]
   116b4:	ldr	r6, [pc, #1860]	; 11e00 <__assert_fail@plt+0xcbc>
   116b8:	ldr	sl, [pc, #1860]	; 11e04 <__assert_fail@plt+0xcc0>
   116bc:	cmp	r3, #0
   116c0:	cmpeq	r2, #1
   116c4:	movhi	r3, #1
   116c8:	movls	r3, r8
   116cc:	eor	r3, r3, r1
   116d0:	str	r3, [sp, #28]
   116d4:	mov	fp, r6
   116d8:	mov	r3, r8
   116dc:	mov	r6, #1
   116e0:	mov	r7, #0
   116e4:	cmp	r7, #0
   116e8:	ldr	r2, [sp, #28]
   116ec:	cmpeq	r6, #1
   116f0:	movne	r9, #0
   116f4:	andeq	r9, r2, #1
   116f8:	cmp	r9, #0
   116fc:	bne	11940 <__assert_fail@plt+0x7fc>
   11700:	ldr	r1, [r4, #8]
   11704:	mov	r9, r3
   11708:	ldrd	r2, [r1]
   1170c:	cmp	r3, r7
   11710:	cmpeq	r2, r6
   11714:	bhi	117dc <__assert_fail@plt+0x698>
   11718:	cmp	r8, #0
   1171c:	beq	1178c <__assert_fail@plt+0x648>
   11720:	ldr	r3, [sl]
   11724:	ldr	r2, [r4, #16]
   11728:	mov	r1, #1
   1172c:	ldr	r0, [r4, #20]
   11730:	bl	10f28 <fwrite_unlocked@plt>
   11734:	b	1178c <__assert_fail@plt+0x648>
   11738:	add	r2, r3, #1
   1173c:	str	r2, [r5, #4]
   11740:	ldrb	r8, [r3]
   11744:	ldrb	r0, [r4, #36]	; 0x24
   11748:	ldrb	r3, [fp]
   1174c:	cmp	r8, r0
   11750:	mov	r2, r0
   11754:	beq	11a6c <__assert_fail@plt+0x928>
   11758:	cmp	r8, r3
   1175c:	beq	11a2c <__assert_fail@plt+0x8e8>
   11760:	cmn	r8, #1
   11764:	beq	11858 <__assert_fail@plt+0x714>
   11768:	ldr	r0, [sl]
   1176c:	ldr	r3, [r0, #20]
   11770:	ldr	r2, [r0, #24]
   11774:	cmp	r3, r2
   11778:	addcc	r2, r3, #1
   1177c:	strcc	r2, [r0, #20]
   11780:	strbcc	r8, [r3]
   11784:	bcs	1184c <__assert_fail@plt+0x708>
   11788:	mov	r9, r8
   1178c:	ldr	r3, [r5, #4]
   11790:	ldr	r2, [r5, #8]
   11794:	cmp	r3, r2
   11798:	bcc	11738 <__assert_fail@plt+0x5f4>
   1179c:	mov	r0, r5
   117a0:	bl	110b4 <__uflow@plt>
   117a4:	mov	r8, r0
   117a8:	b	11744 <__assert_fail@plt+0x600>
   117ac:	add	r2, r3, #1
   117b0:	str	r2, [r5, #4]
   117b4:	ldrb	r0, [r4, #36]	; 0x24
   117b8:	ldrb	r2, [r3]
   117bc:	ldrb	r3, [fp]
   117c0:	cmp	r0, r2
   117c4:	beq	11808 <__assert_fail@plt+0x6c4>
   117c8:	cmp	r2, r3
   117cc:	beq	11a30 <__assert_fail@plt+0x8ec>
   117d0:	cmn	r2, #1
   117d4:	beq	1185c <__assert_fail@plt+0x718>
   117d8:	mov	r9, r2
   117dc:	ldr	r3, [r5, #4]
   117e0:	ldr	r2, [r5, #8]
   117e4:	cmp	r3, r2
   117e8:	bcc	117ac <__assert_fail@plt+0x668>
   117ec:	mov	r0, r5
   117f0:	bl	110b4 <__uflow@plt>
   117f4:	ldrb	r3, [fp]
   117f8:	mov	r2, r0
   117fc:	ldrb	r0, [r4, #36]	; 0x24
   11800:	cmp	r0, r2
   11804:	bne	117c8 <__assert_fail@plt+0x684>
   11808:	cmp	r3, r0
   1180c:	beq	11a78 <__assert_fail@plt+0x934>
   11810:	mov	r3, r2
   11814:	cmp	r0, r3
   11818:	beq	11a48 <__assert_fail@plt+0x904>
   1181c:	cmn	r3, #1
   11820:	movne	r2, #0
   11824:	moveq	r2, #1
   11828:	ldrb	r1, [fp]
   1182c:	sub	ip, r1, r3
   11830:	clz	ip, ip
   11834:	lsr	ip, ip, #5
   11838:	orrs	lr, ip, r2
   1183c:	beq	116e4 <__assert_fail@plt+0x5a0>
   11840:	mov	lr, r8
   11844:	mov	r8, r2
   11848:	b	11874 <__assert_fail@plt+0x730>
   1184c:	uxtb	r1, r8
   11850:	bl	110c0 <__overflow@plt>
   11854:	b	11788 <__assert_fail@plt+0x644>
   11858:	mov	r8, #1
   1185c:	ldrb	r0, [r4, #36]	; 0x24
   11860:	ldrb	r1, [fp]
   11864:	mov	lr, r8
   11868:	mvn	r3, #0
   1186c:	mov	ip, #0
   11870:	mov	r8, #1
   11874:	cmp	lr, #0
   11878:	bne	11898 <__assert_fail@plt+0x754>
   1187c:	ldrb	r2, [r4, #24]
   11880:	cmp	r7, #0
   11884:	cmpeq	r6, #1
   11888:	eor	r2, r2, #1
   1188c:	orrne	r2, r2, #1
   11890:	cmp	r2, #0
   11894:	beq	118d4 <__assert_fail@plt+0x790>
   11898:	subs	r9, r9, r1
   1189c:	movne	r9, #1
   118a0:	cmp	r1, r0
   118a4:	movne	r0, r9
   118a8:	orreq	r0, r9, #1
   118ac:	orrs	r2, ip, r0
   118b0:	beq	11904 <__assert_fail@plt+0x7c0>
   118b4:	ldr	r0, [sl]
   118b8:	ldr	r2, [r0, #20]
   118bc:	ldr	ip, [r0, #24]
   118c0:	cmp	r2, ip
   118c4:	addcc	ip, r2, #1
   118c8:	strcc	ip, [r0, #20]
   118cc:	strbcc	r1, [r2]
   118d0:	bcs	11b28 <__assert_fail@plt+0x9e4>
   118d4:	cmp	r8, #0
   118d8:	bne	11904 <__assert_fail@plt+0x7c0>
   118dc:	ldr	r2, [sp, #16]
   118e0:	mov	r6, #1
   118e4:	mov	r7, #0
   118e8:	ldr	r2, [r2]
   118ec:	str	r2, [r4, #8]
   118f0:	b	116e4 <__assert_fail@plt+0x5a0>
   118f4:	mov	r0, r5
   118f8:	bl	110b4 <__uflow@plt>
   118fc:	cmn	r0, #1
   11900:	bne	1169c <__assert_fail@plt+0x558>
   11904:	ldr	r0, [r5]
   11908:	ands	r4, r0, #32
   1190c:	bne	11cb8 <__assert_fail@plt+0xb74>
   11910:	ldr	r1, [pc, #1240]	; 11df0 <__assert_fail@plt+0xcac>
   11914:	ldr	r0, [sp, #20]
   11918:	bl	10eb0 <strcmp@plt>
   1191c:	cmp	r0, #0
   11920:	mov	r0, r5
   11924:	beq	11b18 <__assert_fail@plt+0x9d4>
   11928:	bl	159a0 <__assert_fail@plt+0x485c>
   1192c:	cmn	r0, #1
   11930:	movne	r0, #1
   11934:	beq	11d98 <__assert_fail@plt+0xc54>
   11938:	add	sp, sp, #36	; 0x24
   1193c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11940:	ldrb	r2, [fp]
   11944:	ldrb	r3, [r4, #36]	; 0x24
   11948:	ldr	r1, [pc, #1208]	; 11e08 <__assert_fail@plt+0xcc4>
   1194c:	stmib	sp, {r2, r5}
   11950:	str	r3, [sp]
   11954:	mov	r2, #0
   11958:	mvn	r3, #0
   1195c:	add	r0, r1, #4
   11960:	bl	12ad0 <__assert_fail@plt+0x198c>
   11964:	subs	r2, r0, #0
   11968:	blt	11d2c <__assert_fail@plt+0xbe8>
   1196c:	beq	11ddc <__assert_fail@plt+0xc98>
   11970:	ldr	r0, [r4, #32]
   11974:	sub	r6, r2, #1
   11978:	ldrb	r3, [r4, #36]	; 0x24
   1197c:	ldrb	r1, [r0, r6]
   11980:	cmp	r1, r3
   11984:	beq	119f4 <__assert_fail@plt+0x8b0>
   11988:	ldrb	r3, [r4, #24]
   1198c:	cmp	r3, #0
   11990:	bne	119e4 <__assert_fail@plt+0x8a0>
   11994:	ldr	r3, [sl]
   11998:	mov	r1, #1
   1199c:	bl	10f28 <fwrite_unlocked@plt>
   119a0:	ldr	r2, [r4, #32]
   119a4:	ldrb	r3, [fp]
   119a8:	ldrb	r2, [r2, r6]
   119ac:	cmp	r2, r3
   119b0:	moveq	r3, r2
   119b4:	beq	119d8 <__assert_fail@plt+0x894>
   119b8:	ldr	r0, [sl]
   119bc:	ldr	r2, [r0, #20]
   119c0:	ldr	r1, [r0, #24]
   119c4:	cmp	r2, r1
   119c8:	addcc	r1, r2, #1
   119cc:	strcc	r1, [r0, #20]
   119d0:	strbcc	r3, [r2]
   119d4:	bcs	11d88 <__assert_fail@plt+0xc44>
   119d8:	mov	r6, #1
   119dc:	mov	r7, #0
   119e0:	b	116e4 <__assert_fail@plt+0x5a0>
   119e4:	mov	r6, #1
   119e8:	mov	r7, #0
   119ec:	mov	r3, #0
   119f0:	b	116e4 <__assert_fail@plt+0x5a0>
   119f4:	ldr	r1, [r4, #8]
   119f8:	ldrd	r2, [r1]
   119fc:	cmp	r3, #0
   11a00:	cmpeq	r2, #1
   11a04:	bls	11ab0 <__assert_fail@plt+0x96c>
   11a08:	ldrd	r2, [r1, #8]
   11a0c:	mov	r6, #2
   11a10:	mov	r7, #0
   11a14:	cmp	r3, #0
   11a18:	cmpeq	r2, #1
   11a1c:	addls	r1, r1, #16
   11a20:	strls	r1, [r4, #8]
   11a24:	mov	r9, #0
   11a28:	b	11708 <__assert_fail@plt+0x5c4>
   11a2c:	mov	r8, #1
   11a30:	ldrb	r0, [r4, #36]	; 0x24
   11a34:	ldrb	r2, [fp]
   11a38:	cmp	r2, r0
   11a3c:	beq	11adc <__assert_fail@plt+0x998>
   11a40:	cmp	r0, r3
   11a44:	bne	1181c <__assert_fail@plt+0x6d8>
   11a48:	ldr	r2, [r4, #8]
   11a4c:	adds	r6, r6, #1
   11a50:	adc	r7, r7, #0
   11a54:	ldrd	r0, [r2, #8]
   11a58:	cmp	r7, r1
   11a5c:	cmpeq	r6, r0
   11a60:	addhi	r2, r2, #16
   11a64:	strhi	r2, [r4, #8]
   11a68:	b	116e4 <__assert_fail@plt+0x5a0>
   11a6c:	cmp	r3, r0
   11a70:	mov	r8, #1
   11a74:	bne	11810 <__assert_fail@plt+0x6cc>
   11a78:	ldr	r3, [r5, #4]
   11a7c:	ldr	r1, [r5, #8]
   11a80:	cmp	r3, r1
   11a84:	bcs	11ae4 <__assert_fail@plt+0x9a0>
   11a88:	add	r1, r3, #1
   11a8c:	str	r1, [r5, #4]
   11a90:	ldrb	r3, [r3]
   11a94:	mov	r0, r3
   11a98:	mov	r1, r5
   11a9c:	str	r2, [sp, #24]
   11aa0:	bl	11024 <ungetc@plt>
   11aa4:	ldrb	r0, [r4, #36]	; 0x24
   11aa8:	ldr	r2, [sp, #24]
   11aac:	b	11810 <__assert_fail@plt+0x6cc>
   11ab0:	mov	r2, r6
   11ab4:	ldr	r3, [sl]
   11ab8:	mov	r1, #1
   11abc:	bl	10f28 <fwrite_unlocked@plt>
   11ac0:	ldrb	r2, [r4, #36]	; 0x24
   11ac4:	ldrb	r3, [fp]
   11ac8:	cmp	r2, r3
   11acc:	beq	11b38 <__assert_fail@plt+0x9f4>
   11ad0:	mov	r8, r9
   11ad4:	ldr	r1, [r4, #8]
   11ad8:	b	11a08 <__assert_fail@plt+0x8c4>
   11adc:	mov	r2, #0
   11ae0:	b	11828 <__assert_fail@plt+0x6e4>
   11ae4:	mov	r0, r5
   11ae8:	str	r2, [sp, #24]
   11aec:	bl	110b4 <__uflow@plt>
   11af0:	ldr	r2, [sp, #24]
   11af4:	cmn	r0, #1
   11af8:	mov	r3, r0
   11afc:	bne	11a94 <__assert_fail@plt+0x950>
   11b00:	mov	lr, r8
   11b04:	ldrb	r0, [r4, #36]	; 0x24
   11b08:	ldrb	r1, [fp]
   11b0c:	mov	ip, #0
   11b10:	mov	r8, #1
   11b14:	b	11874 <__assert_fail@plt+0x730>
   11b18:	bl	110f0 <clearerr_unlocked@plt>
   11b1c:	mov	r0, #1
   11b20:	add	sp, sp, #36	; 0x24
   11b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b28:	str	r3, [sp, #24]
   11b2c:	bl	110c0 <__overflow@plt>
   11b30:	ldr	r3, [sp, #24]
   11b34:	b	118d4 <__assert_fail@plt+0x790>
   11b38:	ldr	r3, [r5, #4]
   11b3c:	ldr	r2, [r5, #8]
   11b40:	cmp	r3, r2
   11b44:	bcs	11d4c <__assert_fail@plt+0xc08>
   11b48:	add	r2, r3, #1
   11b4c:	str	r2, [r5, #4]
   11b50:	ldrb	r0, [r3]
   11b54:	mov	r1, r5
   11b58:	bl	11024 <ungetc@plt>
   11b5c:	mov	r8, r9
   11b60:	ldr	r1, [r4, #8]
   11b64:	b	11a08 <__assert_fail@plt+0x8c4>
   11b68:	ldr	r1, [pc, #668]	; 11e0c <__assert_fail@plt+0xcc8>
   11b6c:	ldr	r0, [sp, #20]
   11b70:	bl	110fc <fopen64@plt>
   11b74:	subs	r5, r0, #0
   11b78:	beq	11cb8 <__assert_fail@plt+0xb74>
   11b7c:	ldr	r4, [pc, #628]	; 11df8 <__assert_fail@plt+0xcb4>
   11b80:	b	11654 <__assert_fail@plt+0x510>
   11b84:	ldr	r6, [pc, #628]	; 11e00 <__assert_fail@plt+0xcbc>
   11b88:	ldr	fp, [pc, #628]	; 11e04 <__assert_fail@plt+0xcc0>
   11b8c:	str	r3, [sp, #16]
   11b90:	mov	r8, #0
   11b94:	ldr	r3, [r3]
   11b98:	mov	r9, #0
   11b9c:	mov	sl, #0
   11ba0:	str	r3, [r4, #8]
   11ba4:	ldr	r3, [r5, #4]
   11ba8:	ldr	r2, [r5, #8]
   11bac:	cmp	r3, r2
   11bb0:	bcs	11c5c <__assert_fail@plt+0xb18>
   11bb4:	add	r2, r3, #1
   11bb8:	str	r2, [r5, #4]
   11bbc:	ldrb	r1, [r6]
   11bc0:	ldrb	r7, [r3]
   11bc4:	cmp	r7, r1
   11bc8:	beq	11cf0 <__assert_fail@plt+0xbac>
   11bcc:	ldr	r1, [r4, #8]
   11bd0:	adds	r8, r8, #1
   11bd4:	adc	r9, r9, #0
   11bd8:	ldrd	r2, [r1, #8]
   11bdc:	cmp	r9, r3
   11be0:	cmpeq	r8, r2
   11be4:	addhi	r1, r1, #16
   11be8:	strhi	r1, [r4, #8]
   11bec:	ldrd	r2, [r1]
   11bf0:	cmp	r9, r3
   11bf4:	cmpeq	r8, r2
   11bf8:	bcc	11ba4 <__assert_fail@plt+0xa60>
   11bfc:	ldrb	r1, [r4, #12]
   11c00:	ldr	r0, [fp]
   11c04:	cmp	r1, #0
   11c08:	beq	11c28 <__assert_fail@plt+0xae4>
   11c0c:	cmp	r9, r3
   11c10:	cmpeq	r8, r2
   11c14:	movne	sl, #0
   11c18:	andeq	sl, sl, #1
   11c1c:	cmp	sl, #0
   11c20:	moveq	sl, r1
   11c24:	bne	11d6c <__assert_fail@plt+0xc28>
   11c28:	ldr	r3, [r0, #20]
   11c2c:	ldr	r2, [r0, #24]
   11c30:	cmp	r3, r2
   11c34:	addcc	r2, r3, #1
   11c38:	strcc	r2, [r0, #20]
   11c3c:	strbcc	r7, [r3]
   11c40:	bcc	11ba4 <__assert_fail@plt+0xa60>
   11c44:	uxtb	r1, r7
   11c48:	bl	110c0 <__overflow@plt>
   11c4c:	ldr	r3, [r5, #4]
   11c50:	ldr	r2, [r5, #8]
   11c54:	cmp	r3, r2
   11c58:	bcc	11bb4 <__assert_fail@plt+0xa70>
   11c5c:	mov	r0, r5
   11c60:	bl	110b4 <__uflow@plt>
   11c64:	ldrb	r3, [r6]
   11c68:	mov	r1, r3
   11c6c:	cmp	r0, r3
   11c70:	mov	r7, r0
   11c74:	beq	11cf0 <__assert_fail@plt+0xbac>
   11c78:	cmn	r0, #1
   11c7c:	bne	11bcc <__assert_fail@plt+0xa88>
   11c80:	orrs	r2, r8, r9
   11c84:	beq	11904 <__assert_fail@plt+0x7c0>
   11c88:	ldr	r2, [pc, #372]	; 11e04 <__assert_fail@plt+0xcc0>
   11c8c:	ldr	r0, [r2]
   11c90:	ldr	r2, [r0, #20]
   11c94:	ldr	r1, [r0, #24]
   11c98:	cmp	r2, r1
   11c9c:	bcs	11dcc <__assert_fail@plt+0xc88>
   11ca0:	add	r1, r2, #1
   11ca4:	str	r1, [r0, #20]
   11ca8:	strb	r3, [r2]
   11cac:	ldr	r0, [r5]
   11cb0:	ands	r4, r0, #32
   11cb4:	beq	11910 <__assert_fail@plt+0x7cc>
   11cb8:	bl	11030 <__errno_location@plt>
   11cbc:	ldr	r2, [sp, #20]
   11cc0:	mov	r1, #3
   11cc4:	ldr	r4, [r0]
   11cc8:	mov	r0, #0
   11ccc:	bl	14fc8 <__assert_fail@plt+0x3e84>
   11cd0:	mov	r1, r4
   11cd4:	ldr	r2, [pc, #308]	; 11e10 <__assert_fail@plt+0xccc>
   11cd8:	mov	r3, r0
   11cdc:	mov	r0, #0
   11ce0:	bl	10fb8 <error@plt>
   11ce4:	mov	r0, #0
   11ce8:	add	sp, sp, #36	; 0x24
   11cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cf0:	ldr	r0, [fp]
   11cf4:	ldr	r3, [r0, #20]
   11cf8:	ldr	r2, [r0, #24]
   11cfc:	cmp	r3, r2
   11d00:	addcc	r2, r3, #1
   11d04:	strcc	r2, [r0, #20]
   11d08:	strbcc	r1, [r3]
   11d0c:	bcs	11d64 <__assert_fail@plt+0xc20>
   11d10:	ldr	r3, [sp, #16]
   11d14:	mov	r8, #0
   11d18:	mov	r9, #0
   11d1c:	ldr	r3, [r3]
   11d20:	mov	sl, #0
   11d24:	str	r3, [r4, #8]
   11d28:	b	11ba4 <__assert_fail@plt+0xa60>
   11d2c:	ldr	r0, [r4, #32]
   11d30:	bl	10ee0 <free@plt>
   11d34:	ldr	r0, [r5]
   11d38:	mov	r3, #0
   11d3c:	tst	r0, #48	; 0x30
   11d40:	str	r3, [r4, #32]
   11d44:	bne	11908 <__assert_fail@plt+0x7c4>
   11d48:	bl	1594c <__assert_fail@plt+0x4808>
   11d4c:	mov	r0, r5
   11d50:	bl	110b4 <__uflow@plt>
   11d54:	cmn	r0, #1
   11d58:	bne	11b54 <__assert_fail@plt+0xa10>
   11d5c:	ldr	r1, [r4, #8]
   11d60:	b	11a08 <__assert_fail@plt+0x8c4>
   11d64:	bl	110c0 <__overflow@plt>
   11d68:	b	11d10 <__assert_fail@plt+0xbcc>
   11d6c:	mov	r3, r0
   11d70:	ldr	r2, [r4, #16]
   11d74:	mov	r1, #1
   11d78:	ldr	r0, [r4, #20]
   11d7c:	bl	10f28 <fwrite_unlocked@plt>
   11d80:	ldr	r0, [fp]
   11d84:	b	11c28 <__assert_fail@plt+0xae4>
   11d88:	mov	r1, r3
   11d8c:	bl	110c0 <__overflow@plt>
   11d90:	ldrb	r3, [fp]
   11d94:	b	119d8 <__assert_fail@plt+0x894>
   11d98:	bl	11030 <__errno_location@plt>
   11d9c:	ldr	r2, [sp, #20]
   11da0:	mov	r1, #3
   11da4:	ldr	r5, [r0]
   11da8:	mov	r0, r4
   11dac:	bl	14fc8 <__assert_fail@plt+0x3e84>
   11db0:	mov	r1, r5
   11db4:	ldr	r2, [pc, #84]	; 11e10 <__assert_fail@plt+0xccc>
   11db8:	mov	r3, r0
   11dbc:	mov	r0, r4
   11dc0:	bl	10fb8 <error@plt>
   11dc4:	mov	r0, r4
   11dc8:	b	11938 <__assert_fail@plt+0x7f4>
   11dcc:	mov	r1, r3
   11dd0:	bl	110c0 <__overflow@plt>
   11dd4:	ldr	r0, [r5]
   11dd8:	b	11908 <__assert_fail@plt+0x7c4>
   11ddc:	ldr	r3, [pc, #48]	; 11e14 <__assert_fail@plt+0xcd0>
   11de0:	ldr	r2, [pc, #48]	; 11e18 <__assert_fail@plt+0xcd4>
   11de4:	ldr	r1, [pc, #48]	; 11e1c <__assert_fail@plt+0xcd8>
   11de8:	ldr	r0, [pc, #48]	; 11e20 <__assert_fail@plt+0xcdc>
   11dec:	bl	11144 <__assert_fail@plt>
   11df0:	muleq	r1, r8, ip
   11df4:	andeq	r8, r2, r8, ror #2
   11df8:	andeq	r8, r2, r8, ror r1
   11dfc:	andeq	r8, r2, r8, ror #5
   11e00:	andeq	r8, r2, r4, lsl #2
   11e04:	andeq	r8, r2, ip, ror #2
   11e08:	muleq	r2, r4, r1
   11e0c:	andeq	r6, r1, r4, lsr #23
   11e10:	andeq	r6, r1, r4, lsr #27
   11e14:	andeq	r6, r1, r4, lsr r1
   11e18:	andeq	r0, r0, r9, asr #2
   11e1c:	andeq	r6, r1, r8, lsr #4
   11e20:	andeq	r6, r1, r4, lsr r2
   11e24:	ldr	r3, [pc, #864]	; 1218c <__assert_fail@plt+0x1048>
   11e28:	push	{r7, lr}
   11e2c:	sub	sp, sp, #64	; 0x40
   11e30:	ldr	r3, [r3]
   11e34:	subs	r4, r0, #0
   11e38:	str	r3, [sp, #60]	; 0x3c
   11e3c:	beq	11e78 <__assert_fail@plt+0xd34>
   11e40:	ldr	r3, [pc, #840]	; 12190 <__assert_fail@plt+0x104c>
   11e44:	mov	r2, #5
   11e48:	ldr	r1, [pc, #836]	; 12194 <__assert_fail@plt+0x1050>
   11e4c:	mov	r0, #0
   11e50:	ldr	r5, [r3]
   11e54:	bl	10f40 <dcgettext@plt>
   11e58:	ldr	r3, [pc, #824]	; 12198 <__assert_fail@plt+0x1054>
   11e5c:	mov	r1, #1
   11e60:	ldr	r3, [r3]
   11e64:	mov	r2, r0
   11e68:	mov	r0, r5
   11e6c:	bl	11078 <__fprintf_chk@plt>
   11e70:	mov	r0, r4
   11e74:	bl	1100c <exit@plt>
   11e78:	mov	r2, #5
   11e7c:	ldr	r1, [pc, #792]	; 1219c <__assert_fail@plt+0x1058>
   11e80:	bl	10f40 <dcgettext@plt>
   11e84:	ldr	r3, [pc, #780]	; 12198 <__assert_fail@plt+0x1054>
   11e88:	ldr	r5, [pc, #784]	; 121a0 <__assert_fail@plt+0x105c>
   11e8c:	ldr	r2, [r3]
   11e90:	mov	r1, r0
   11e94:	mov	r0, #1
   11e98:	bl	11060 <__printf_chk@plt>
   11e9c:	mov	r2, #5
   11ea0:	ldr	r1, [pc, #764]	; 121a4 <__assert_fail@plt+0x1060>
   11ea4:	mov	r0, r4
   11ea8:	bl	10f40 <dcgettext@plt>
   11eac:	ldr	r1, [r5]
   11eb0:	bl	10e98 <fputs_unlocked@plt>
   11eb4:	mov	r2, #5
   11eb8:	ldr	r1, [pc, #744]	; 121a8 <__assert_fail@plt+0x1064>
   11ebc:	mov	r0, r4
   11ec0:	bl	10f40 <dcgettext@plt>
   11ec4:	ldr	r1, [r5]
   11ec8:	bl	10e98 <fputs_unlocked@plt>
   11ecc:	mov	r2, #5
   11ed0:	ldr	r1, [pc, #724]	; 121ac <__assert_fail@plt+0x1068>
   11ed4:	mov	r0, r4
   11ed8:	bl	10f40 <dcgettext@plt>
   11edc:	ldr	r1, [r5]
   11ee0:	bl	10e98 <fputs_unlocked@plt>
   11ee4:	mov	r2, #5
   11ee8:	ldr	r1, [pc, #704]	; 121b0 <__assert_fail@plt+0x106c>
   11eec:	mov	r0, r4
   11ef0:	bl	10f40 <dcgettext@plt>
   11ef4:	ldr	r1, [r5]
   11ef8:	bl	10e98 <fputs_unlocked@plt>
   11efc:	mov	r2, #5
   11f00:	ldr	r1, [pc, #684]	; 121b4 <__assert_fail@plt+0x1070>
   11f04:	mov	r0, r4
   11f08:	bl	10f40 <dcgettext@plt>
   11f0c:	ldr	r1, [r5]
   11f10:	bl	10e98 <fputs_unlocked@plt>
   11f14:	mov	r2, #5
   11f18:	ldr	r1, [pc, #664]	; 121b8 <__assert_fail@plt+0x1074>
   11f1c:	mov	r0, r4
   11f20:	bl	10f40 <dcgettext@plt>
   11f24:	ldr	r1, [r5]
   11f28:	bl	10e98 <fputs_unlocked@plt>
   11f2c:	mov	r2, #5
   11f30:	ldr	r1, [pc, #644]	; 121bc <__assert_fail@plt+0x1078>
   11f34:	mov	r0, r4
   11f38:	bl	10f40 <dcgettext@plt>
   11f3c:	ldr	r1, [r5]
   11f40:	bl	10e98 <fputs_unlocked@plt>
   11f44:	mov	r2, #5
   11f48:	ldr	r1, [pc, #624]	; 121c0 <__assert_fail@plt+0x107c>
   11f4c:	mov	r0, r4
   11f50:	bl	10f40 <dcgettext@plt>
   11f54:	ldr	r1, [r5]
   11f58:	bl	10e98 <fputs_unlocked@plt>
   11f5c:	mov	r2, #5
   11f60:	ldr	r1, [pc, #604]	; 121c4 <__assert_fail@plt+0x1080>
   11f64:	mov	r0, r4
   11f68:	bl	10f40 <dcgettext@plt>
   11f6c:	ldr	r1, [r5]
   11f70:	bl	10e98 <fputs_unlocked@plt>
   11f74:	mov	r2, #5
   11f78:	ldr	r1, [pc, #584]	; 121c8 <__assert_fail@plt+0x1084>
   11f7c:	mov	r0, r4
   11f80:	bl	10f40 <dcgettext@plt>
   11f84:	ldr	r1, [r5]
   11f88:	bl	10e98 <fputs_unlocked@plt>
   11f8c:	mov	r2, #5
   11f90:	ldr	r1, [pc, #564]	; 121cc <__assert_fail@plt+0x1088>
   11f94:	mov	r0, r4
   11f98:	bl	10f40 <dcgettext@plt>
   11f9c:	ldr	r1, [r5]
   11fa0:	bl	10e98 <fputs_unlocked@plt>
   11fa4:	mov	r2, #5
   11fa8:	ldr	r1, [pc, #544]	; 121d0 <__assert_fail@plt+0x108c>
   11fac:	mov	r0, r4
   11fb0:	bl	10f40 <dcgettext@plt>
   11fb4:	ldr	r1, [r5]
   11fb8:	bl	10e98 <fputs_unlocked@plt>
   11fbc:	ldr	lr, [pc, #528]	; 121d4 <__assert_fail@plt+0x1090>
   11fc0:	add	ip, sp, #4
   11fc4:	ldm	lr!, {r0, r1, r2, r3}
   11fc8:	stmia	ip!, {r0, r1, r2, r3}
   11fcc:	ldm	lr!, {r0, r1, r2, r3}
   11fd0:	ldr	r6, [sp, #4]
   11fd4:	stmia	ip!, {r0, r1, r2, r3}
   11fd8:	cmp	r6, #0
   11fdc:	ldm	lr!, {r0, r1, r2, r3}
   11fe0:	addeq	r5, sp, #4
   11fe4:	stmia	ip!, {r0, r1, r2, r3}
   11fe8:	ldm	lr, {r0, r1}
   11fec:	stm	ip, {r0, r1}
   11ff0:	beq	12020 <__assert_fail@plt+0xedc>
   11ff4:	ldr	r7, [pc, #476]	; 121d8 <__assert_fail@plt+0x1094>
   11ff8:	add	r5, sp, #4
   11ffc:	b	1200c <__assert_fail@plt+0xec8>
   12000:	ldr	r6, [r5, #8]!
   12004:	cmp	r6, #0
   12008:	beq	12020 <__assert_fail@plt+0xedc>
   1200c:	mov	r1, r6
   12010:	mov	r0, r7
   12014:	bl	10eb0 <strcmp@plt>
   12018:	cmp	r0, #0
   1201c:	bne	12000 <__assert_fail@plt+0xebc>
   12020:	ldr	r5, [r5, #4]
   12024:	mov	r2, #5
   12028:	cmp	r5, #0
   1202c:	ldr	r1, [pc, #424]	; 121dc <__assert_fail@plt+0x1098>
   12030:	beq	120d8 <__assert_fail@plt+0xf94>
   12034:	mov	r0, #0
   12038:	bl	10f40 <dcgettext@plt>
   1203c:	ldr	r3, [pc, #412]	; 121e0 <__assert_fail@plt+0x109c>
   12040:	ldr	r2, [pc, #412]	; 121e4 <__assert_fail@plt+0x10a0>
   12044:	mov	r1, r0
   12048:	mov	r0, #1
   1204c:	bl	11060 <__printf_chk@plt>
   12050:	mov	r1, #0
   12054:	mov	r0, #5
   12058:	bl	110cc <setlocale@plt>
   1205c:	cmp	r0, #0
   12060:	ldreq	r6, [pc, #368]	; 121d8 <__assert_fail@plt+0x1094>
   12064:	beq	12080 <__assert_fail@plt+0xf3c>
   12068:	mov	r2, #3
   1206c:	ldr	r1, [pc, #372]	; 121e8 <__assert_fail@plt+0x10a4>
   12070:	bl	11120 <strncmp@plt>
   12074:	ldr	r6, [pc, #348]	; 121d8 <__assert_fail@plt+0x1094>
   12078:	cmp	r0, #0
   1207c:	bne	12168 <__assert_fail@plt+0x1024>
   12080:	mov	r2, #5
   12084:	ldr	r1, [pc, #352]	; 121ec <__assert_fail@plt+0x10a8>
   12088:	mov	r0, #0
   1208c:	bl	10f40 <dcgettext@plt>
   12090:	ldr	r3, [pc, #320]	; 121d8 <__assert_fail@plt+0x1094>
   12094:	ldr	r2, [pc, #324]	; 121e0 <__assert_fail@plt+0x109c>
   12098:	mov	r1, r0
   1209c:	mov	r0, #1
   120a0:	bl	11060 <__printf_chk@plt>
   120a4:	mov	r2, #5
   120a8:	ldr	r1, [pc, #320]	; 121f0 <__assert_fail@plt+0x10ac>
   120ac:	mov	r0, #0
   120b0:	bl	10f40 <dcgettext@plt>
   120b4:	ldr	r2, [pc, #312]	; 121f4 <__assert_fail@plt+0x10b0>
   120b8:	cmp	r5, r6
   120bc:	ldr	r3, [pc, #308]	; 121f8 <__assert_fail@plt+0x10b4>
   120c0:	movne	r3, r2
   120c4:	mov	r1, r0
   120c8:	mov	r2, r5
   120cc:	mov	r0, #1
   120d0:	bl	11060 <__printf_chk@plt>
   120d4:	b	11e70 <__assert_fail@plt+0xd2c>
   120d8:	mov	r0, r5
   120dc:	bl	10f40 <dcgettext@plt>
   120e0:	ldr	r3, [pc, #248]	; 121e0 <__assert_fail@plt+0x109c>
   120e4:	ldr	r2, [pc, #248]	; 121e4 <__assert_fail@plt+0x10a0>
   120e8:	mov	r1, r0
   120ec:	mov	r0, #1
   120f0:	bl	11060 <__printf_chk@plt>
   120f4:	mov	r1, r5
   120f8:	mov	r0, #5
   120fc:	bl	110cc <setlocale@plt>
   12100:	cmp	r0, #0
   12104:	beq	1211c <__assert_fail@plt+0xfd8>
   12108:	mov	r2, #3
   1210c:	ldr	r1, [pc, #212]	; 121e8 <__assert_fail@plt+0x10a4>
   12110:	bl	11120 <strncmp@plt>
   12114:	cmp	r0, #0
   12118:	bne	12160 <__assert_fail@plt+0x101c>
   1211c:	mov	r2, #5
   12120:	ldr	r1, [pc, #196]	; 121ec <__assert_fail@plt+0x10a8>
   12124:	mov	r0, #0
   12128:	bl	10f40 <dcgettext@plt>
   1212c:	ldr	r3, [pc, #164]	; 121d8 <__assert_fail@plt+0x1094>
   12130:	ldr	r2, [pc, #168]	; 121e0 <__assert_fail@plt+0x109c>
   12134:	mov	r5, r3
   12138:	mov	r1, r0
   1213c:	mov	r0, #1
   12140:	bl	11060 <__printf_chk@plt>
   12144:	ldr	r1, [pc, #164]	; 121f0 <__assert_fail@plt+0x10ac>
   12148:	mov	r2, #5
   1214c:	mov	r0, #0
   12150:	bl	10f40 <dcgettext@plt>
   12154:	ldr	r3, [pc, #156]	; 121f8 <__assert_fail@plt+0x10b4>
   12158:	mov	r1, r0
   1215c:	b	120c8 <__assert_fail@plt+0xf84>
   12160:	ldr	r6, [pc, #112]	; 121d8 <__assert_fail@plt+0x1094>
   12164:	mov	r5, r6
   12168:	mov	r2, #5
   1216c:	ldr	r1, [pc, #136]	; 121fc <__assert_fail@plt+0x10b8>
   12170:	mov	r0, #0
   12174:	bl	10f40 <dcgettext@plt>
   12178:	ldr	r2, [pc, #88]	; 121d8 <__assert_fail@plt+0x1094>
   1217c:	mov	r1, r0
   12180:	mov	r0, #1
   12184:	bl	11060 <__printf_chk@plt>
   12188:	b	12080 <__assert_fail@plt+0xf3c>
   1218c:	andeq	r7, r2, r8, lsl #30
   12190:	andeq	r8, r2, r0, ror #2
   12194:	andeq	r6, r1, r8, asr #4
   12198:			; <UNDEFINED> instruction: 0x000281b4
   1219c:	andeq	r6, r1, r0, ror r2
   121a0:	andeq	r8, r2, ip, ror #2
   121a4:	muleq	r1, r0, r2
   121a8:	ldrdeq	r6, [r1], -r4
   121ac:	andeq	r6, r1, ip, lsl #6
   121b0:	andeq	r6, r1, r8, asr r3
   121b4:	andeq	r6, r1, ip, lsl #8
   121b8:	strdeq	r6, [r1], -ip
   121bc:	andeq	r6, r1, r0, ror r5
   121c0:	andeq	r6, r1, r4, asr #12
   121c4:	andeq	r6, r1, r4, lsl #13
   121c8:			; <UNDEFINED> instruction: 0x000166b4
   121cc:	andeq	r6, r1, ip, ror #13
   121d0:			; <UNDEFINED> instruction: 0x000167b8
   121d4:	andeq	r6, r1, r0, asr #2
   121d8:	andeq	r6, r1, r4, asr #4
   121dc:	andeq	r6, r1, r0, asr #17
   121e0:	ldrdeq	r6, [r1], -r8
   121e4:	andeq	r6, r1, r0, lsl #18
   121e8:	andeq	r6, r1, r0, lsl r9
   121ec:	andeq	r6, r1, ip, asr r9
   121f0:	andeq	r6, r1, ip, ror r9
   121f4:	andeq	r7, r1, r4, lsr #3
   121f8:	andeq	r6, r1, r4, lsr #22
   121fc:	andeq	r6, r1, r4, lsl r9
   12200:	ldr	r2, [r0]
   12204:	ldr	r3, [r1]
   12208:	cmp	r2, r3
   1220c:	blt	1221c <__assert_fail@plt+0x10d8>
   12210:	movgt	r0, #1
   12214:	movle	r0, #0
   12218:	bx	lr
   1221c:	mvn	r0, #0
   12220:	bx	lr
   12224:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12228:	mov	r4, r0
   1222c:	ldr	r8, [pc, #168]	; 122dc <__assert_fail@plt+0x1198>
   12230:	ldr	sl, [pc, #168]	; 122e0 <__assert_fail@plt+0x119c>
   12234:	ldr	r9, [pc, #168]	; 122e4 <__assert_fail@plt+0x11a0>
   12238:	ldr	ip, [r8]
   1223c:	ldr	lr, [sl]
   12240:	mov	r5, r1
   12244:	cmp	ip, lr
   12248:	mov	r6, r2
   1224c:	mov	r7, r3
   12250:	ldr	r0, [r9]
   12254:	beq	12274 <__assert_fail@plt+0x1130>
   12258:	lsl	r3, ip, #4
   1225c:	add	r2, r0, r3
   12260:	add	ip, ip, #1
   12264:	strd	r4, [r0, r3]
   12268:	strd	r6, [r2, #8]
   1226c:	str	ip, [r8]
   12270:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12274:	cmp	r0, #0
   12278:	beq	122a8 <__assert_fail@plt+0x1164>
   1227c:	ldr	r3, [pc, #100]	; 122e8 <__assert_fail@plt+0x11a4>
   12280:	cmp	lr, r3
   12284:	bhi	122cc <__assert_fail@plt+0x1188>
   12288:	add	r3, lr, #1
   1228c:	add	lr, r3, lr, lsr #1
   12290:	lsl	r1, lr, #4
   12294:	str	lr, [sl]
   12298:	bl	15760 <__assert_fail@plt+0x461c>
   1229c:	ldr	ip, [r8]
   122a0:	str	r0, [r9]
   122a4:	b	12258 <__assert_fail@plt+0x1114>
   122a8:	cmp	lr, #0
   122ac:	beq	122d0 <__assert_fail@plt+0x118c>
   122b0:	lsrs	r3, lr, #28
   122b4:	movne	r3, #1
   122b8:	moveq	r3, #0
   122bc:	lsls	r1, lr, #4
   122c0:	bmi	122cc <__assert_fail@plt+0x1188>
   122c4:	cmp	r3, #0
   122c8:	beq	12294 <__assert_fail@plt+0x1150>
   122cc:	bl	1594c <__assert_fail@plt+0x4808>
   122d0:	mov	r1, #64	; 0x40
   122d4:	mov	lr, #4
   122d8:	b	12294 <__assert_fail@plt+0x1150>
   122dc:	andeq	r8, r2, ip, ror #5
   122e0:	andeq	r8, r2, r4, lsr #3
   122e4:	andeq	r8, r2, r8, ror #5
   122e8:	ldrbeq	r5, [r5, #-1364]	; 0xfffffaac
   122ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122f0:	sub	sp, sp, #52	; 0x34
   122f4:	ands	r3, r1, #1
   122f8:	str	r1, [sp, #36]	; 0x24
   122fc:	str	r3, [sp, #32]
   12300:	mov	r5, r0
   12304:	beq	12318 <__assert_fail@plt+0x11d4>
   12308:	ldr	r1, [pc, #1552]	; 12920 <__assert_fail@plt+0x17dc>
   1230c:	bl	10eb0 <strcmp@plt>
   12310:	cmp	r0, #0
   12314:	beq	126c0 <__assert_fail@plt+0x157c>
   12318:	mov	r6, #0
   1231c:	mov	r7, #0
   12320:	mov	fp, #0
   12324:	mov	sl, #0
   12328:	mov	r8, #1
   1232c:	mov	r9, #0
   12330:	mov	r1, sl
   12334:	mov	r2, fp
   12338:	strd	r8, [sp, #8]
   1233c:	mov	r3, r5
   12340:	ldrb	r4, [r5], #1
   12344:	cmp	r4, #45	; 0x2d
   12348:	beq	12400 <__assert_fail@plt+0x12bc>
   1234c:	cmp	r4, #44	; 0x2c
   12350:	str	r3, [sp, #4]
   12354:	beq	12390 <__assert_fail@plt+0x124c>
   12358:	str	r1, [sp, #20]
   1235c:	str	r2, [sp, #16]
   12360:	bl	11000 <__ctype_b_loc@plt>
   12364:	lsl	ip, r4, #1
   12368:	cmp	r4, #0
   1236c:	ldr	r2, [sp, #16]
   12370:	ldr	r1, [sp, #20]
   12374:	ldr	r3, [sp, #4]
   12378:	ldr	r0, [r0]
   1237c:	ldrh	r0, [r0, ip]
   12380:	moveq	r0, #1
   12384:	andne	r0, r0, #1
   12388:	cmp	r0, #0
   1238c:	beq	125f8 <__assert_fail@plt+0x14b4>
   12390:	cmp	r2, #0
   12394:	beq	12438 <__assert_fail@plt+0x12f4>
   12398:	orr	fp, fp, r1
   1239c:	tst	fp, #255	; 0xff
   123a0:	bne	125ac <__assert_fail@plt+0x1468>
   123a4:	ldr	r3, [sp, #32]
   123a8:	cmp	r3, #0
   123ac:	beq	12898 <__assert_fail@plt+0x1754>
   123b0:	mov	r2, #1
   123b4:	mov	r3, #0
   123b8:	strd	r2, [sp, #8]
   123bc:	mvn	r2, #0
   123c0:	mvn	r3, #0
   123c4:	ldrd	r0, [sp, #8]
   123c8:	bl	12224 <__assert_fail@plt+0x10e0>
   123cc:	ldrb	ip, [r5, #-1]
   123d0:	cmp	ip, #0
   123d4:	beq	12460 <__assert_fail@plt+0x131c>
   123d8:	mov	r3, r5
   123dc:	ldrb	r4, [r5], #1
   123e0:	mov	sl, #0
   123e4:	mov	r2, sl
   123e8:	cmp	r4, #45	; 0x2d
   123ec:	mov	r1, sl
   123f0:	mov	fp, sl
   123f4:	mov	r6, #0
   123f8:	mov	r7, #0
   123fc:	bne	1234c <__assert_fail@plt+0x1208>
   12400:	cmp	r2, #0
   12404:	bne	12808 <__assert_fail@plt+0x16c4>
   12408:	orrs	r3, r6, r7
   1240c:	movne	sl, #0
   12410:	andeq	sl, fp, #1
   12414:	cmp	sl, #0
   12418:	bne	127ac <__assert_fail@plt+0x1668>
   1241c:	cmp	fp, #0
   12420:	beq	125d8 <__assert_fail@plt+0x1494>
   12424:	strd	r6, [sp, #8]
   12428:	mov	r2, fp
   1242c:	mov	r6, #0
   12430:	mov	r7, #0
   12434:	b	1233c <__assert_fail@plt+0x11f8>
   12438:	orrs	r3, r6, r7
   1243c:	beq	127ac <__assert_fail@plt+0x1668>
   12440:	mov	r2, r6
   12444:	mov	r3, r7
   12448:	mov	r0, r6
   1244c:	mov	r1, r7
   12450:	bl	12224 <__assert_fail@plt+0x10e0>
   12454:	ldrb	ip, [r5, #-1]
   12458:	cmp	ip, #0
   1245c:	bne	123d8 <__assert_fail@plt+0x1294>
   12460:	ldr	r8, [pc, #1212]	; 12924 <__assert_fail@plt+0x17e0>
   12464:	ldr	r1, [r8]
   12468:	cmp	r1, #0
   1246c:	beq	128a4 <__assert_fail@plt+0x1760>
   12470:	ldr	r4, [pc, #1200]	; 12928 <__assert_fail@plt+0x17e4>
   12474:	ldr	r3, [pc, #1200]	; 1292c <__assert_fail@plt+0x17e8>
   12478:	mov	r2, #16
   1247c:	ldr	r0, [r4]
   12480:	mov	r9, ip
   12484:	bl	11108 <qsort@plt>
   12488:	ldr	sl, [r4]
   1248c:	ldr	fp, [r8]
   12490:	cmp	r9, fp
   12494:	bcs	1255c <__assert_fail@plt+0x1418>
   12498:	add	r9, r9, #1
   1249c:	cmp	r9, fp
   124a0:	bcs	12490 <__assert_fail@plt+0x134c>
   124a4:	lsl	r4, r9, #4
   124a8:	sub	r5, r4, #16
   124ac:	add	r1, sl, r5
   124b0:	ldrd	r6, [sl, r4]
   124b4:	ldrd	r2, [r1, #8]
   124b8:	add	r0, sl, r4
   124bc:	cmp	r3, r7
   124c0:	cmpeq	r2, r6
   124c4:	bcc	12490 <__assert_fail@plt+0x134c>
   124c8:	mvn	lr, #-268435456	; 0xf0000000
   124cc:	add	ip, r4, #16
   124d0:	sub	lr, lr, r9
   124d4:	str	ip, [sp, #4]
   124d8:	mov	ip, r1
   124dc:	mov	r1, sl
   124e0:	mov	sl, r4
   124e4:	mov	r4, lr
   124e8:	b	1250c <__assert_fail@plt+0x13c8>
   124ec:	ldr	r1, [r3]
   124f0:	add	ip, r1, r5
   124f4:	ldrd	r6, [r1, sl]
   124f8:	ldrd	r2, [ip, #8]
   124fc:	add	r0, r1, sl
   12500:	cmp	r7, r3
   12504:	cmpeq	r6, r2
   12508:	bhi	126b8 <__assert_fail@plt+0x1574>
   1250c:	ldrd	r6, [r0, #8]
   12510:	cmp	r7, r3
   12514:	cmpeq	r6, r2
   12518:	movcc	r6, r2
   1251c:	movcc	r7, r3
   12520:	add	r2, fp, r4
   12524:	ldr	r3, [sp, #4]
   12528:	strd	r6, [ip, #8]
   1252c:	add	r1, r1, r3
   12530:	lsl	r2, r2, #4
   12534:	bl	10ed4 <memmove@plt>
   12538:	ldr	fp, [r8]
   1253c:	ldr	r3, [pc, #996]	; 12928 <__assert_fail@plt+0x17e4>
   12540:	sub	fp, fp, #1
   12544:	cmp	fp, r9
   12548:	str	fp, [r8]
   1254c:	bhi	124ec <__assert_fail@plt+0x13a8>
   12550:	cmp	r9, fp
   12554:	ldr	sl, [r3]
   12558:	bcc	12498 <__assert_fail@plt+0x1354>
   1255c:	ldr	r3, [sp, #36]	; 0x24
   12560:	tst	r3, #2
   12564:	bne	126d4 <__assert_fail@plt+0x1590>
   12568:	add	fp, fp, #1
   1256c:	mov	r0, sl
   12570:	lsl	r1, fp, #4
   12574:	str	fp, [r8]
   12578:	bl	15760 <__assert_fail@plt+0x461c>
   1257c:	ldr	r3, [r8]
   12580:	ldr	r2, [pc, #928]	; 12928 <__assert_fail@plt+0x17e4>
   12584:	sub	r3, r3, #-268435455	; 0xf0000001
   12588:	mvn	r4, #0
   1258c:	lsl	r3, r3, #4
   12590:	mvn	r5, #0
   12594:	str	r0, [r2]
   12598:	add	r2, r0, r3
   1259c:	strd	r4, [r2, #8]
   125a0:	strd	r4, [r0, r3]
   125a4:	add	sp, sp, #52	; 0x34
   125a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125ac:	cmp	r1, #0
   125b0:	beq	123bc <__assert_fail@plt+0x1278>
   125b4:	ldrd	r2, [sp, #8]
   125b8:	cmp	r3, r7
   125bc:	cmpeq	r2, r6
   125c0:	bhi	127e0 <__assert_fail@plt+0x169c>
   125c4:	mov	r2, r6
   125c8:	mov	r3, r7
   125cc:	ldrd	r0, [sp, #8]
   125d0:	bl	12224 <__assert_fail@plt+0x10e0>
   125d4:	b	123cc <__assert_fail@plt+0x1288>
   125d8:	mov	r8, #1
   125dc:	mov	r9, #0
   125e0:	mov	sl, fp
   125e4:	mov	r6, #0
   125e8:	mov	r7, #0
   125ec:	mov	r2, #1
   125f0:	strd	r8, [sp, #8]
   125f4:	b	1233c <__assert_fail@plt+0x11f8>
   125f8:	sub	r4, r4, #48	; 0x30
   125fc:	cmp	r4, #9
   12600:	bhi	128c8 <__assert_fail@plt+0x1784>
   12604:	cmp	sl, #0
   12608:	beq	126ac <__assert_fail@plt+0x1568>
   1260c:	ldr	r0, [pc, #796]	; 12930 <__assert_fail@plt+0x17ec>
   12610:	ldr	r0, [r0, #4]
   12614:	cmp	r0, #0
   12618:	beq	126ac <__assert_fail@plt+0x1568>
   1261c:	add	r9, pc, #756	; 0x2f4
   12620:	ldrd	r8, [r9]
   12624:	cmp	r2, #0
   12628:	moveq	fp, #1
   1262c:	movne	r1, r2
   12630:	cmp	r7, r9
   12634:	cmpeq	r6, r8
   12638:	bhi	12828 <__assert_fail@plt+0x16e4>
   1263c:	lsl	r0, r7, #2
   12640:	lsl	r3, r6, #2
   12644:	adds	r3, r3, r6
   12648:	orr	r0, r0, r6, lsr #30
   1264c:	adc	r0, r0, r7
   12650:	adds	r3, r3, r3
   12654:	str	r3, [sp, #24]
   12658:	adc	r3, r0, r0
   1265c:	str	r3, [sp, #28]
   12660:	ldrd	r8, [sp, #24]
   12664:	adds	r8, r8, r4
   12668:	adc	r9, r9, r4, asr #31
   1266c:	cmp	r9, r7
   12670:	mov	r3, r8
   12674:	and	r3, r3, r9
   12678:	cmpeq	r8, r6
   1267c:	mov	r0, r9
   12680:	movcc	r0, #1
   12684:	movcs	r0, #0
   12688:	cmn	r3, #1
   1268c:	movne	r3, #0
   12690:	moveq	r3, #1
   12694:	orrs	r3, r0, r3
   12698:	bne	12828 <__assert_fail@plt+0x16e4>
   1269c:	mov	r6, r8
   126a0:	mov	r7, r9
   126a4:	mov	sl, #1
   126a8:	b	1233c <__assert_fail@plt+0x11f8>
   126ac:	ldr	r0, [pc, #636]	; 12930 <__assert_fail@plt+0x17ec>
   126b0:	str	r3, [r0, #4]
   126b4:	b	1261c <__assert_fail@plt+0x14d8>
   126b8:	mov	sl, r1
   126bc:	b	12490 <__assert_fail@plt+0x134c>
   126c0:	add	r5, r5, #1
   126c4:	mov	r6, #1
   126c8:	mov	r7, #0
   126cc:	mov	fp, #1
   126d0:	b	12324 <__assert_fail@plt+0x11e0>
   126d4:	ldr	r2, [pc, #596]	; 12930 <__assert_fail@plt+0x17ec>
   126d8:	ldrd	r0, [sl]
   126dc:	mov	r3, #0
   126e0:	str	r3, [r2]
   126e4:	ldr	r2, [pc, #572]	; 12928 <__assert_fail@plt+0x17e4>
   126e8:	cmp	r1, #0
   126ec:	cmpeq	r0, #1
   126f0:	str	r3, [r2]
   126f4:	str	r3, [r8]
   126f8:	bhi	12794 <__assert_fail@plt+0x1650>
   126fc:	cmp	fp, #1
   12700:	addhi	r5, sl, fp, lsl #4
   12704:	subhi	r5, r5, #16
   12708:	movhi	r4, sl
   1270c:	bls	12750 <__assert_fail@plt+0x160c>
   12710:	ldr	r3, [r4, #8]
   12714:	ldrd	r0, [r4, #16]
   12718:	ldr	r2, [r4, #12]
   1271c:	adds	r6, r3, #1
   12720:	adc	r7, r2, #0
   12724:	cmp	r7, r1
   12728:	cmpeq	r6, r0
   1272c:	beq	12744 <__assert_fail@plt+0x1600>
   12730:	subs	r2, r0, #1
   12734:	sbc	r3, r1, #0
   12738:	mov	r0, r6
   1273c:	mov	r1, r7
   12740:	bl	12224 <__assert_fail@plt+0x10e0>
   12744:	add	r4, r4, #16
   12748:	cmp	r5, r4
   1274c:	bne	12710 <__assert_fail@plt+0x15cc>
   12750:	add	fp, sl, fp, lsl #4
   12754:	mvn	r3, #0
   12758:	ldrd	r4, [fp, #-8]
   1275c:	mvn	r2, #0
   12760:	cmp	r5, r3
   12764:	cmpeq	r4, r2
   12768:	bne	12784 <__assert_fail@plt+0x1640>
   1276c:	mov	r0, sl
   12770:	bl	10ee0 <free@plt>
   12774:	ldr	r3, [pc, #428]	; 12928 <__assert_fail@plt+0x17e4>
   12778:	ldr	fp, [r8]
   1277c:	ldr	sl, [r3]
   12780:	b	12568 <__assert_fail@plt+0x1424>
   12784:	adds	r0, r4, #1
   12788:	adc	r1, r5, #0
   1278c:	bl	12224 <__assert_fail@plt+0x10e0>
   12790:	b	1276c <__assert_fail@plt+0x1628>
   12794:	subs	r2, r0, #1
   12798:	sbc	r3, r1, #0
   1279c:	mov	r0, #1
   127a0:	mov	r1, #0
   127a4:	bl	12224 <__assert_fail@plt+0x10e0>
   127a8:	b	126fc <__assert_fail@plt+0x15b8>
   127ac:	ldr	r3, [sp, #36]	; 0x24
   127b0:	mov	r0, r2
   127b4:	tst	r3, #4
   127b8:	mov	r2, #5
   127bc:	ldrne	r1, [pc, #368]	; 12934 <__assert_fail@plt+0x17f0>
   127c0:	ldreq	r1, [pc, #368]	; 12938 <__assert_fail@plt+0x17f4>
   127c4:	bl	10f40 <dcgettext@plt>
   127c8:	mov	r1, #0
   127cc:	mov	r2, r0
   127d0:	mov	r0, r1
   127d4:	bl	10fb8 <error@plt>
   127d8:	mov	r0, #1
   127dc:	bl	11e24 <__assert_fail@plt+0xce0>
   127e0:	ldr	r1, [pc, #340]	; 1293c <__assert_fail@plt+0x17f8>
   127e4:	mov	r2, #5
   127e8:	mov	r0, #0
   127ec:	bl	10f40 <dcgettext@plt>
   127f0:	mov	r1, #0
   127f4:	mov	r2, r0
   127f8:	mov	r0, r1
   127fc:	bl	10fb8 <error@plt>
   12800:	mov	r0, #1
   12804:	bl	11e24 <__assert_fail@plt+0xce0>
   12808:	ldr	r3, [sp, #36]	; 0x24
   1280c:	mov	r2, #5
   12810:	ands	r0, r3, #4
   12814:	movne	r0, #0
   12818:	ldrne	r1, [pc, #288]	; 12940 <__assert_fail@plt+0x17fc>
   1281c:	ldreq	r1, [pc, #288]	; 12944 <__assert_fail@plt+0x1800>
   12820:	bl	10f40 <dcgettext@plt>
   12824:	b	127c8 <__assert_fail@plt+0x1684>
   12828:	ldr	r3, [pc, #256]	; 12930 <__assert_fail@plt+0x17ec>
   1282c:	ldr	r1, [pc, #276]	; 12948 <__assert_fail@plt+0x1804>
   12830:	ldr	r4, [r3, #4]
   12834:	mov	r0, r4
   12838:	bl	11138 <strspn@plt>
   1283c:	mov	r1, r0
   12840:	mov	r0, r4
   12844:	bl	1598c <__assert_fail@plt+0x4848>
   12848:	ldr	r3, [sp, #36]	; 0x24
   1284c:	mov	r2, #5
   12850:	mov	r4, r0
   12854:	ands	r0, r3, #4
   12858:	movne	r0, #0
   1285c:	ldrne	r1, [pc, #232]	; 1294c <__assert_fail@plt+0x1808>
   12860:	ldreq	r1, [pc, #232]	; 12950 <__assert_fail@plt+0x180c>
   12864:	bl	10f40 <dcgettext@plt>
   12868:	mov	r5, r0
   1286c:	mov	r0, r4
   12870:	bl	15194 <__assert_fail@plt+0x4050>
   12874:	mov	r1, #0
   12878:	mov	r2, r5
   1287c:	mov	r3, r0
   12880:	mov	r0, r1
   12884:	bl	10fb8 <error@plt>
   12888:	mov	r0, r4
   1288c:	bl	10ee0 <free@plt>
   12890:	mov	r0, #1
   12894:	bl	11e24 <__assert_fail@plt+0xce0>
   12898:	mov	r2, #5
   1289c:	ldr	r1, [pc, #176]	; 12954 <__assert_fail@plt+0x1810>
   128a0:	b	127e8 <__assert_fail@plt+0x16a4>
   128a4:	ldr	r3, [sp, #36]	; 0x24
   128a8:	ands	r0, r3, #4
   128ac:	movne	r0, r1
   128b0:	movne	r2, #5
   128b4:	ldrne	r1, [pc, #156]	; 12958 <__assert_fail@plt+0x1814>
   128b8:	moveq	r2, #5
   128bc:	ldreq	r1, [pc, #152]	; 1295c <__assert_fail@plt+0x1818>
   128c0:	bl	10f40 <dcgettext@plt>
   128c4:	b	127c8 <__assert_fail@plt+0x1684>
   128c8:	ldr	r2, [sp, #36]	; 0x24
   128cc:	str	r3, [sp, #4]
   128d0:	ands	r2, r2, #4
   128d4:	moveq	r0, r2
   128d8:	movne	r2, #5
   128dc:	ldrne	r1, [pc, #124]	; 12960 <__assert_fail@plt+0x181c>
   128e0:	moveq	r2, #5
   128e4:	ldreq	r1, [pc, #120]	; 12964 <__assert_fail@plt+0x1820>
   128e8:	bl	10f40 <dcgettext@plt>
   128ec:	ldr	r3, [sp, #4]
   128f0:	mov	r4, r0
   128f4:	mov	r0, r3
   128f8:	bl	15194 <__assert_fail@plt+0x4050>
   128fc:	mov	r1, #0
   12900:	mov	r2, r4
   12904:	mov	r3, r0
   12908:	mov	r0, r1
   1290c:	bl	10fb8 <error@plt>
   12910:	mov	r0, #1
   12914:	bl	11e24 <__assert_fail@plt+0xce0>
   12918:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1291c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12920:	muleq	r1, r8, ip
   12924:	andeq	r8, r2, ip, ror #5
   12928:	andeq	r8, r2, r8, ror #5
   1292c:	andeq	r2, r1, r0, lsl #4
   12930:	andeq	r8, r2, r4, lsr #3
   12934:	andeq	r6, r1, ip, lsr #24
   12938:	andeq	r6, r1, ip, asr ip
   1293c:	muleq	r1, ip, ip
   12940:	strdeq	r6, [r1], -r8
   12944:	andeq	r6, r1, r8, lsl ip
   12948:			; <UNDEFINED> instruction: 0x00016cb8
   1294c:	andeq	r6, r1, r4, asr #25
   12950:	andeq	r6, r1, ip, ror #25
   12954:	andeq	r6, r1, r8, ror ip
   12958:	andeq	r6, r1, r8, asr #26
   1295c:	andeq	r6, r1, r4, ror sp
   12960:	andeq	r6, r1, ip, lsl #26
   12964:	andeq	r6, r1, r0, lsr sp
   12968:	push	{r4, r5, r6, lr}
   1296c:	mov	r4, #0
   12970:	ldr	r5, [pc, #28]	; 12994 <__assert_fail@plt+0x1850>
   12974:	ldr	r2, [pc, #28]	; 12998 <__assert_fail@plt+0x1854>
   12978:	ldr	r3, [pc, #28]	; 1299c <__assert_fail@plt+0x1858>
   1297c:	ldr	r0, [r5]
   12980:	str	r4, [r2]
   12984:	str	r4, [r3]
   12988:	bl	10ee0 <free@plt>
   1298c:	str	r4, [r5]
   12990:	pop	{r4, r5, r6, pc}
   12994:	andeq	r8, r2, r8, ror #5
   12998:	andeq	r8, r2, ip, ror #5
   1299c:	andeq	r8, r2, r4, lsr #3
   129a0:	ldr	r3, [pc, #4]	; 129ac <__assert_fail@plt+0x1868>
   129a4:	str	r0, [r3]
   129a8:	bx	lr
   129ac:	andeq	r8, r2, ip, lsr #3
   129b0:	ldr	r3, [pc, #4]	; 129bc <__assert_fail@plt+0x1878>
   129b4:	strb	r0, [r3, #4]
   129b8:	bx	lr
   129bc:	andeq	r8, r2, ip, lsr #3
   129c0:	ldr	r3, [pc, #180]	; 12a7c <__assert_fail@plt+0x1938>
   129c4:	push	{r4, r5, r6, lr}
   129c8:	sub	sp, sp, #8
   129cc:	ldr	r0, [r3]
   129d0:	bl	15bf0 <__assert_fail@plt+0x4aac>
   129d4:	cmp	r0, #0
   129d8:	beq	12a00 <__assert_fail@plt+0x18bc>
   129dc:	bl	11030 <__errno_location@plt>
   129e0:	ldr	r5, [pc, #152]	; 12a80 <__assert_fail@plt+0x193c>
   129e4:	ldrb	r3, [r5, #4]
   129e8:	cmp	r3, #0
   129ec:	mov	r4, r0
   129f0:	beq	12a1c <__assert_fail@plt+0x18d8>
   129f4:	ldr	r3, [r0]
   129f8:	cmp	r3, #32
   129fc:	bne	12a1c <__assert_fail@plt+0x18d8>
   12a00:	ldr	r3, [pc, #124]	; 12a84 <__assert_fail@plt+0x1940>
   12a04:	ldr	r0, [r3]
   12a08:	bl	15bf0 <__assert_fail@plt+0x4aac>
   12a0c:	cmp	r0, #0
   12a10:	bne	12a5c <__assert_fail@plt+0x1918>
   12a14:	add	sp, sp, #8
   12a18:	pop	{r4, r5, r6, pc}
   12a1c:	mov	r2, #5
   12a20:	ldr	r1, [pc, #96]	; 12a88 <__assert_fail@plt+0x1944>
   12a24:	mov	r0, #0
   12a28:	bl	10f40 <dcgettext@plt>
   12a2c:	mov	r6, r0
   12a30:	ldr	r0, [r5]
   12a34:	cmp	r0, #0
   12a38:	beq	12a68 <__assert_fail@plt+0x1924>
   12a3c:	ldr	r4, [r4]
   12a40:	bl	14fb4 <__assert_fail@plt+0x3e70>
   12a44:	mov	r1, r4
   12a48:	str	r6, [sp]
   12a4c:	ldr	r2, [pc, #56]	; 12a8c <__assert_fail@plt+0x1948>
   12a50:	mov	r3, r0
   12a54:	mov	r0, #0
   12a58:	bl	10fb8 <error@plt>
   12a5c:	ldr	r3, [pc, #44]	; 12a90 <__assert_fail@plt+0x194c>
   12a60:	ldr	r0, [r3]
   12a64:	bl	10f04 <_exit@plt>
   12a68:	mov	r3, r6
   12a6c:	ldr	r1, [r4]
   12a70:	ldr	r2, [pc, #28]	; 12a94 <__assert_fail@plt+0x1950>
   12a74:	bl	10fb8 <error@plt>
   12a78:	b	12a5c <__assert_fail@plt+0x1918>
   12a7c:	andeq	r8, r2, ip, ror #2
   12a80:	andeq	r8, r2, ip, lsr #3
   12a84:	andeq	r8, r2, r0, ror #2
   12a88:	muleq	r1, r4, sp
   12a8c:	andeq	r6, r1, r0, lsr #27
   12a90:	andeq	r8, r2, ip, lsl #2
   12a94:	andeq	r6, r1, r4, lsr #27
   12a98:	b	10ebc <posix_fadvise64@plt>
   12a9c:	cmp	r0, #0
   12aa0:	bxeq	lr
   12aa4:	push	{r4, lr}
   12aa8:	sub	sp, sp, #16
   12aac:	mov	r4, r1
   12ab0:	bl	1106c <fileno@plt>
   12ab4:	mov	r2, #0
   12ab8:	mov	r3, #0
   12abc:	str	r4, [sp, #8]
   12ac0:	strd	r2, [sp]
   12ac4:	bl	10ebc <posix_fadvise64@plt>
   12ac8:	add	sp, sp, #16
   12acc:	pop	{r4, pc}
   12ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ad4:	sub	sp, sp, #36	; 0x24
   12ad8:	mov	ip, r1
   12adc:	str	r1, [sp, #20]
   12ae0:	ldr	r1, [pc, #728]	; 12dc0 <__assert_fail@plt+0x1c7c>
   12ae4:	str	r0, [sp, #16]
   12ae8:	ldr	r0, [r0]
   12aec:	ldr	r1, [r1]
   12af0:	cmp	r0, #0
   12af4:	str	r0, [sp]
   12af8:	str	r2, [sp, #12]
   12afc:	mov	sl, r3
   12b00:	str	r1, [sp, #28]
   12b04:	ldr	r8, [ip]
   12b08:	ldr	fp, [sp, #72]	; 0x48
   12b0c:	ldr	r9, [sp, #80]	; 0x50
   12b10:	beq	12d90 <__assert_fail@plt+0x1c4c>
   12b14:	ldr	r3, [sp, #12]
   12b18:	cmp	r8, r3
   12b1c:	bcc	12cec <__assert_fail@plt+0x1ba8>
   12b20:	ldr	r3, [sp, #12]
   12b24:	subs	r4, r8, r3
   12b28:	moveq	r3, #1
   12b2c:	movne	r3, #0
   12b30:	cmp	r8, sl
   12b34:	movcc	r3, #0
   12b38:	andcs	r3, r3, #1
   12b3c:	cmp	r3, #0
   12b40:	bne	12cec <__assert_fail@plt+0x1ba8>
   12b44:	cmn	fp, #1
   12b48:	beq	12db4 <__assert_fail@plt+0x1c70>
   12b4c:	ldr	r3, [sp, #76]	; 0x4c
   12b50:	cmn	r3, #1
   12b54:	moveq	r3, fp
   12b58:	str	r3, [sp, #76]	; 0x4c
   12b5c:	ldr	r3, [sp]
   12b60:	ldr	r2, [sp, #12]
   12b64:	add	r6, r3, r2
   12b68:	b	12bf0 <__assert_fail@plt+0x1aac>
   12b6c:	cmn	fp, #1
   12b70:	ldr	r5, [sp, #24]
   12b74:	bne	12d2c <__assert_fail@plt+0x1be8>
   12b78:	add	r2, r5, #1
   12b7c:	mov	r5, #0
   12b80:	cmp	r8, sl
   12b84:	cmpcc	r4, r2
   12b88:	bcc	12c54 <__assert_fail@plt+0x1b10>
   12b8c:	cmp	r4, #1
   12b90:	bls	12bcc <__assert_fail@plt+0x1a88>
   12b94:	ldr	r2, [sp, #24]
   12b98:	sub	r3, r4, #1
   12b9c:	cmp	r3, r2
   12ba0:	movcs	r3, r2
   12ba4:	cmp	r7, #0
   12ba8:	beq	12d20 <__assert_fail@plt+0x1bdc>
   12bac:	mov	r2, r3
   12bb0:	mov	r1, r7
   12bb4:	mov	r0, r6
   12bb8:	str	r3, [sp, #8]
   12bbc:	bl	10f10 <memcpy@plt>
   12bc0:	ldr	r3, [sp, #8]
   12bc4:	add	r6, r6, r3
   12bc8:	sub	r4, r4, r3
   12bcc:	cmp	r7, #0
   12bd0:	beq	12be8 <__assert_fail@plt+0x1aa4>
   12bd4:	ldr	r1, [sp, #24]
   12bd8:	mov	r0, r9
   12bdc:	bl	15c64 <__assert_fail@plt+0x4b20>
   12be0:	cmp	r0, #0
   12be4:	bne	12cec <__assert_fail@plt+0x1ba8>
   12be8:	cmp	r5, #0
   12bec:	bne	12d5c <__assert_fail@plt+0x1c18>
   12bf0:	add	r1, sp, #24
   12bf4:	mov	r0, r9
   12bf8:	bl	15aa0 <__assert_fail@plt+0x495c>
   12bfc:	subs	r7, r0, #0
   12c00:	bne	12b6c <__assert_fail@plt+0x1a28>
   12c04:	ldr	r3, [r9, #4]
   12c08:	ldr	r2, [r9, #8]
   12c0c:	cmp	r3, r2
   12c10:	bcs	12ccc <__assert_fail@plt+0x1b88>
   12c14:	add	r2, r3, #1
   12c18:	str	r2, [r9, #4]
   12c1c:	ldrb	r3, [r3]
   12c20:	str	r3, [sp, #4]
   12c24:	ldr	r3, [sp, #4]
   12c28:	ldr	r2, [sp, #76]	; 0x4c
   12c2c:	cmp	r2, r3
   12c30:	cmpne	fp, r3
   12c34:	mov	r2, #2
   12c38:	moveq	r5, #1
   12c3c:	movne	r5, #0
   12c40:	mov	r3, #1
   12c44:	cmp	r8, sl
   12c48:	cmpcc	r4, r2
   12c4c:	str	r3, [sp, #24]
   12c50:	bcs	12b8c <__assert_fail@plt+0x1a48>
   12c54:	ldr	r1, [sp]
   12c58:	cmp	r8, #63	; 0x3f
   12c5c:	addls	r3, r8, #64	; 0x40
   12c60:	lslhi	r3, r8, #1
   12c64:	sub	r6, r6, r1
   12c68:	sub	r1, r3, r6
   12c6c:	cmp	r1, r2
   12c70:	addcc	r3, r6, r2
   12c74:	cmp	r3, sl
   12c78:	cmpls	r8, r3
   12c7c:	ldr	r1, [sp, #12]
   12c80:	movcs	r3, sl
   12c84:	sub	r2, r3, r1
   12c88:	cmp	r2, #0
   12c8c:	bge	12c9c <__assert_fail@plt+0x1b58>
   12c90:	add	r3, r1, #-2147483648	; 0x80000000
   12c94:	cmp	r8, r3
   12c98:	beq	12cec <__assert_fail@plt+0x1ba8>
   12c9c:	mov	r1, r3
   12ca0:	ldr	r0, [sp]
   12ca4:	str	r3, [sp, #8]
   12ca8:	bl	10f58 <realloc@plt>
   12cac:	ldr	r3, [sp, #8]
   12cb0:	sub	r4, r3, r6
   12cb4:	cmp	r0, #0
   12cb8:	beq	12cec <__assert_fail@plt+0x1ba8>
   12cbc:	add	r6, r0, r6
   12cc0:	mov	r8, r3
   12cc4:	str	r0, [sp]
   12cc8:	b	12b8c <__assert_fail@plt+0x1a48>
   12ccc:	mov	r0, r9
   12cd0:	bl	110b4 <__uflow@plt>
   12cd4:	cmn	r0, #1
   12cd8:	str	r0, [sp, #4]
   12cdc:	bne	12c24 <__assert_fail@plt+0x1ae0>
   12ce0:	ldr	r3, [sp]
   12ce4:	cmp	r6, r3
   12ce8:	bne	12d5c <__assert_fail@plt+0x1c18>
   12cec:	ldr	r3, [sp, #16]
   12cf0:	ldr	r2, [sp]
   12cf4:	mvn	r0, #0
   12cf8:	str	r2, [r3]
   12cfc:	ldr	r3, [sp, #20]
   12d00:	str	r8, [r3]
   12d04:	ldr	r3, [pc, #180]	; 12dc0 <__assert_fail@plt+0x1c7c>
   12d08:	ldr	r2, [sp, #28]
   12d0c:	ldr	r3, [r3]
   12d10:	cmp	r2, r3
   12d14:	bne	12dbc <__assert_fail@plt+0x1c78>
   12d18:	add	sp, sp, #36	; 0x24
   12d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d20:	ldr	r2, [sp, #4]
   12d24:	strb	r2, [r6]
   12d28:	b	12bc4 <__assert_fail@plt+0x1a80>
   12d2c:	mov	r3, r5
   12d30:	ldr	r2, [sp, #76]	; 0x4c
   12d34:	mov	r1, fp
   12d38:	bl	12dc4 <__assert_fail@plt+0x1c80>
   12d3c:	cmp	r0, #0
   12d40:	beq	12b78 <__assert_fail@plt+0x1a34>
   12d44:	sub	r5, r0, r7
   12d48:	add	r3, r5, #1
   12d4c:	add	r2, r5, #2
   12d50:	str	r3, [sp, #24]
   12d54:	mov	r5, #1
   12d58:	b	12b80 <__assert_fail@plt+0x1a3c>
   12d5c:	ldr	r2, [sp]
   12d60:	ldr	r3, [sp, #12]
   12d64:	add	r0, r2, r3
   12d68:	mov	r3, #0
   12d6c:	strb	r3, [r6]
   12d70:	ldr	r3, [sp, #16]
   12d74:	subs	r0, r6, r0
   12d78:	str	r2, [r3]
   12d7c:	ldr	r3, [sp, #20]
   12d80:	str	r8, [r3]
   12d84:	bne	12d04 <__assert_fail@plt+0x1bc0>
   12d88:	mvn	r0, #0
   12d8c:	b	12d04 <__assert_fail@plt+0x1bc0>
   12d90:	cmp	r3, #64	; 0x40
   12d94:	movcc	r8, r3
   12d98:	movcs	r8, #64	; 0x40
   12d9c:	mov	r0, r8
   12da0:	bl	10fc4 <malloc@plt>
   12da4:	subs	r3, r0, #0
   12da8:	str	r3, [sp]
   12dac:	bne	12b14 <__assert_fail@plt+0x19d0>
   12db0:	b	12d88 <__assert_fail@plt+0x1c44>
   12db4:	ldr	fp, [sp, #76]	; 0x4c
   12db8:	b	12b5c <__assert_fail@plt+0x1a18>
   12dbc:	bl	10f4c <__stack_chk_fail@plt>
   12dc0:	andeq	r7, r2, r8, lsl #30
   12dc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12dc8:	uxtb	r4, r1
   12dcc:	uxtb	r5, r2
   12dd0:	cmp	r4, r5
   12dd4:	beq	12f08 <__assert_fail@plt+0x1dc4>
   12dd8:	cmp	r3, #0
   12ddc:	mov	ip, r0
   12de0:	beq	12f18 <__assert_fail@plt+0x1dd4>
   12de4:	tst	r0, #3
   12de8:	beq	12f18 <__assert_fail@plt+0x1dd4>
   12dec:	ldrb	r0, [r0]
   12df0:	cmp	r4, r0
   12df4:	cmpne	r5, r0
   12df8:	beq	12f20 <__assert_fail@plt+0x1ddc>
   12dfc:	add	ip, ip, #1
   12e00:	b	12e1c <__assert_fail@plt+0x1cd8>
   12e04:	tst	ip, #3
   12e08:	beq	12e28 <__assert_fail@plt+0x1ce4>
   12e0c:	ldrb	lr, [ip], #1
   12e10:	cmp	lr, r4
   12e14:	cmpne	lr, r5
   12e18:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e1c:	subs	r3, r3, #1
   12e20:	mov	r0, ip
   12e24:	bne	12e04 <__assert_fail@plt+0x1cc0>
   12e28:	lsl	r1, r1, #8
   12e2c:	lsl	r6, r2, #8
   12e30:	uxth	r1, r1
   12e34:	uxth	r6, r6
   12e38:	orr	lr, r1, r4
   12e3c:	orr	r6, r6, r5
   12e40:	cmp	r3, #3
   12e44:	orr	lr, lr, lr, lsl #16
   12e48:	orr	r6, r6, r6, lsl #16
   12e4c:	bls	12ec0 <__assert_fail@plt+0x1d7c>
   12e50:	ldr	r1, [r0]
   12e54:	ldr	r7, [pc, #204]	; 12f28 <__assert_fail@plt+0x1de4>
   12e58:	eor	r8, lr, r1
   12e5c:	eor	r1, r1, r6
   12e60:	add	r2, r8, r7
   12e64:	add	ip, r1, r7
   12e68:	bic	r2, r2, r8
   12e6c:	bic	r1, ip, r1
   12e70:	ldr	r8, [pc, #180]	; 12f2c <__assert_fail@plt+0x1de8>
   12e74:	orr	r2, r2, r1
   12e78:	tst	r2, r8
   12e7c:	addeq	r1, r0, #4
   12e80:	beq	12eb0 <__assert_fail@plt+0x1d6c>
   12e84:	b	12ec8 <__assert_fail@plt+0x1d84>
   12e88:	ldr	ip, [r1], #4
   12e8c:	eor	sl, ip, lr
   12e90:	eor	ip, ip, r6
   12e94:	add	r2, sl, r7
   12e98:	add	r9, ip, r7
   12e9c:	bic	r2, r2, sl
   12ea0:	bic	ip, r9, ip
   12ea4:	orr	r2, r2, ip
   12ea8:	tst	r2, r8
   12eac:	bne	12ec8 <__assert_fail@plt+0x1d84>
   12eb0:	sub	r3, r3, #4
   12eb4:	cmp	r3, #3
   12eb8:	mov	r0, r1
   12ebc:	bhi	12e88 <__assert_fail@plt+0x1d44>
   12ec0:	cmp	r3, #0
   12ec4:	beq	12f00 <__assert_fail@plt+0x1dbc>
   12ec8:	ldrb	r2, [r0]
   12ecc:	cmp	r4, r2
   12ed0:	cmpne	r5, r2
   12ed4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ed8:	add	r3, r0, r3
   12edc:	add	r2, r0, #1
   12ee0:	b	12ef4 <__assert_fail@plt+0x1db0>
   12ee4:	ldrb	r1, [r2], #1
   12ee8:	cmp	r1, r4
   12eec:	cmpne	r1, r5
   12ef0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ef4:	cmp	r2, r3
   12ef8:	mov	r0, r2
   12efc:	bne	12ee4 <__assert_fail@plt+0x1da0>
   12f00:	mov	r0, #0
   12f04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f08:	mov	r1, r4
   12f0c:	mov	r2, r3
   12f10:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f14:	b	11084 <memchr@plt>
   12f18:	mov	r0, ip
   12f1c:	b	12e28 <__assert_fail@plt+0x1ce4>
   12f20:	mov	r0, ip
   12f24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f28:	mrc2	14, 7, pc, cr14, cr15, {7}
   12f2c:	addhi	r8, r0, r0, lsl #1
   12f30:	push	{r4, r5, r6, lr}
   12f34:	subs	r4, r0, #0
   12f38:	beq	12fac <__assert_fail@plt+0x1e68>
   12f3c:	mov	r1, #47	; 0x2f
   12f40:	bl	110d8 <strrchr@plt>
   12f44:	subs	r5, r0, #0
   12f48:	beq	12f98 <__assert_fail@plt+0x1e54>
   12f4c:	add	r6, r5, #1
   12f50:	sub	r3, r6, r4
   12f54:	cmp	r3, #6
   12f58:	ble	12f98 <__assert_fail@plt+0x1e54>
   12f5c:	mov	r2, #7
   12f60:	ldr	r1, [pc, #96]	; 12fc8 <__assert_fail@plt+0x1e84>
   12f64:	sub	r0, r5, #6
   12f68:	bl	11120 <strncmp@plt>
   12f6c:	cmp	r0, #0
   12f70:	bne	12f98 <__assert_fail@plt+0x1e54>
   12f74:	mov	r2, #3
   12f78:	ldr	r1, [pc, #76]	; 12fcc <__assert_fail@plt+0x1e88>
   12f7c:	mov	r0, r6
   12f80:	bl	11120 <strncmp@plt>
   12f84:	cmp	r0, #0
   12f88:	movne	r4, r6
   12f8c:	ldreq	r3, [pc, #60]	; 12fd0 <__assert_fail@plt+0x1e8c>
   12f90:	addeq	r4, r5, #4
   12f94:	streq	r4, [r3]
   12f98:	ldr	r2, [pc, #52]	; 12fd4 <__assert_fail@plt+0x1e90>
   12f9c:	ldr	r3, [pc, #52]	; 12fd8 <__assert_fail@plt+0x1e94>
   12fa0:	str	r4, [r2]
   12fa4:	str	r4, [r3]
   12fa8:	pop	{r4, r5, r6, pc}
   12fac:	ldr	r3, [pc, #40]	; 12fdc <__assert_fail@plt+0x1e98>
   12fb0:	mov	r2, #55	; 0x37
   12fb4:	mov	r1, #1
   12fb8:	ldr	r3, [r3]
   12fbc:	ldr	r0, [pc, #28]	; 12fe0 <__assert_fail@plt+0x1e9c>
   12fc0:	bl	10f7c <fwrite@plt>
   12fc4:	bl	1112c <abort@plt>
   12fc8:	andeq	r6, r1, r0, ror #27
   12fcc:	andeq	r6, r1, r8, ror #27
   12fd0:	andeq	r8, r2, r0, asr r1
   12fd4:			; <UNDEFINED> instruction: 0x000281b4
   12fd8:	andeq	r8, r2, r4, asr r1
   12fdc:	andeq	r8, r2, r0, ror #2
   12fe0:	andeq	r6, r1, r8, lsr #27
   12fe4:	push	{r4, lr}
   12fe8:	mov	r2, #48	; 0x30
   12fec:	mov	r4, r1
   12ff0:	mov	r1, #0
   12ff4:	bl	11048 <memset@plt>
   12ff8:	cmp	r4, #10
   12ffc:	beq	13008 <__assert_fail@plt+0x1ec4>
   13000:	str	r4, [r0]
   13004:	pop	{r4, pc}
   13008:	bl	1112c <abort@plt>
   1300c:	push	{r4, r5, r6, lr}
   13010:	mov	r2, #5
   13014:	mov	r5, r0
   13018:	mov	r6, r1
   1301c:	mov	r1, r0
   13020:	mov	r0, #0
   13024:	bl	10f40 <dcgettext@plt>
   13028:	cmp	r5, r0
   1302c:	mov	r4, r0
   13030:	beq	1303c <__assert_fail@plt+0x1ef8>
   13034:	mov	r0, r4
   13038:	pop	{r4, r5, r6, pc}
   1303c:	bl	15e20 <__assert_fail@plt+0x4cdc>
   13040:	ldrb	r3, [r0]
   13044:	bic	r3, r3, #32
   13048:	cmp	r3, #85	; 0x55
   1304c:	bne	130ac <__assert_fail@plt+0x1f68>
   13050:	ldrb	r3, [r0, #1]
   13054:	bic	r3, r3, #32
   13058:	cmp	r3, #84	; 0x54
   1305c:	bne	13124 <__assert_fail@plt+0x1fe0>
   13060:	ldrb	r3, [r0, #2]
   13064:	bic	r3, r3, #32
   13068:	cmp	r3, #70	; 0x46
   1306c:	bne	13124 <__assert_fail@plt+0x1fe0>
   13070:	ldrb	r3, [r0, #3]
   13074:	cmp	r3, #45	; 0x2d
   13078:	bne	13124 <__assert_fail@plt+0x1fe0>
   1307c:	ldrb	r3, [r0, #4]
   13080:	cmp	r3, #56	; 0x38
   13084:	bne	13124 <__assert_fail@plt+0x1fe0>
   13088:	ldrb	r3, [r0, #5]
   1308c:	cmp	r3, #0
   13090:	bne	13124 <__assert_fail@plt+0x1fe0>
   13094:	ldrb	r2, [r4]
   13098:	ldr	r3, [pc, #156]	; 1313c <__assert_fail@plt+0x1ff8>
   1309c:	ldr	r4, [pc, #156]	; 13140 <__assert_fail@plt+0x1ffc>
   130a0:	cmp	r2, #96	; 0x60
   130a4:	movne	r4, r3
   130a8:	b	13034 <__assert_fail@plt+0x1ef0>
   130ac:	cmp	r3, #71	; 0x47
   130b0:	bne	13124 <__assert_fail@plt+0x1fe0>
   130b4:	ldrb	r3, [r0, #1]
   130b8:	bic	r3, r3, #32
   130bc:	cmp	r3, #66	; 0x42
   130c0:	bne	13124 <__assert_fail@plt+0x1fe0>
   130c4:	ldrb	r3, [r0, #2]
   130c8:	cmp	r3, #49	; 0x31
   130cc:	bne	13124 <__assert_fail@plt+0x1fe0>
   130d0:	ldrb	r3, [r0, #3]
   130d4:	cmp	r3, #56	; 0x38
   130d8:	bne	13124 <__assert_fail@plt+0x1fe0>
   130dc:	ldrb	r3, [r0, #4]
   130e0:	cmp	r3, #48	; 0x30
   130e4:	bne	13124 <__assert_fail@plt+0x1fe0>
   130e8:	ldrb	r3, [r0, #5]
   130ec:	cmp	r3, #51	; 0x33
   130f0:	bne	13124 <__assert_fail@plt+0x1fe0>
   130f4:	ldrb	r3, [r0, #6]
   130f8:	cmp	r3, #48	; 0x30
   130fc:	bne	13124 <__assert_fail@plt+0x1fe0>
   13100:	ldrb	r3, [r0, #7]
   13104:	cmp	r3, #0
   13108:	bne	13124 <__assert_fail@plt+0x1fe0>
   1310c:	ldrb	r2, [r4]
   13110:	ldr	r3, [pc, #44]	; 13144 <__assert_fail@plt+0x2000>
   13114:	ldr	r4, [pc, #44]	; 13148 <__assert_fail@plt+0x2004>
   13118:	cmp	r2, #96	; 0x60
   1311c:	movne	r4, r3
   13120:	b	13034 <__assert_fail@plt+0x1ef0>
   13124:	ldr	r3, [pc, #32]	; 1314c <__assert_fail@plt+0x2008>
   13128:	ldr	r4, [pc, #32]	; 13150 <__assert_fail@plt+0x200c>
   1312c:	cmp	r6, #9
   13130:	movne	r4, r3
   13134:	mov	r0, r4
   13138:	pop	{r4, r5, r6, pc}
   1313c:	andeq	r6, r1, r4, asr #28
   13140:	andeq	r6, r1, r0, asr lr
   13144:	andeq	r6, r1, r8, asr #28
   13148:	andeq	r6, r1, ip, asr #28
   1314c:	andeq	r6, r1, r4, asr lr
   13150:	andeq	r6, r1, r0, asr #28
   13154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13158:	sub	sp, sp, #124	; 0x7c
   1315c:	ldr	ip, [pc, #3576]	; 13f5c <__assert_fail@plt+0x2e18>
   13160:	str	r3, [sp, #24]
   13164:	ldr	r3, [sp, #168]	; 0xa8
   13168:	ldr	ip, [ip]
   1316c:	str	r3, [sp, #56]	; 0x38
   13170:	ldr	r3, [sp, #172]	; 0xac
   13174:	ldr	r8, [sp, #160]	; 0xa0
   13178:	str	r3, [sp, #80]	; 0x50
   1317c:	ldr	r3, [sp, #176]	; 0xb0
   13180:	mov	fp, r0
   13184:	str	r3, [sp, #76]	; 0x4c
   13188:	mov	sl, r1
   1318c:	str	r2, [sp, #36]	; 0x24
   13190:	str	ip, [sp, #116]	; 0x74
   13194:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   13198:	ldr	r3, [sp, #164]	; 0xa4
   1319c:	ands	r4, r3, #2
   131a0:	movne	r3, #1
   131a4:	moveq	r3, #0
   131a8:	str	r3, [sp, #32]
   131ac:	str	r0, [sp, #64]	; 0x40
   131b0:	cmp	r8, #10
   131b4:	ldrls	pc, [pc, r8, lsl #2]
   131b8:	b	14968 <__assert_fail@plt+0x3824>
   131bc:			; <UNDEFINED> instruction: 0x000135b0
   131c0:	andeq	r3, r1, r8, asr #12
   131c4:	andeq	r3, r1, r8, asr #24
   131c8:	andeq	r3, r1, r8, ror #12
   131cc:	andeq	r3, r1, ip, lsl r5
   131d0:	andeq	r3, r1, r4, ror #10
   131d4:	andeq	r3, r1, r0, ror #11
   131d8:	andeq	r3, r1, r8, lsl r6
   131dc:	andeq	r3, r1, r8, ror #3
   131e0:	andeq	r3, r1, r8, ror #3
   131e4:	andeq	r3, r1, r8, ror #3
   131e8:	cmp	r8, #10
   131ec:	beq	13210 <__assert_fail@plt+0x20cc>
   131f0:	mov	r1, r8
   131f4:	ldr	r0, [pc, #3428]	; 13f60 <__assert_fail@plt+0x2e1c>
   131f8:	bl	1300c <__assert_fail@plt+0x1ec8>
   131fc:	mov	r1, r8
   13200:	str	r0, [sp, #80]	; 0x50
   13204:	ldr	r0, [pc, #3420]	; 13f68 <__assert_fail@plt+0x2e24>
   13208:	bl	1300c <__assert_fail@plt+0x1ec8>
   1320c:	str	r0, [sp, #76]	; 0x4c
   13210:	cmp	r4, #0
   13214:	movne	r4, #0
   13218:	beq	14628 <__assert_fail@plt+0x34e4>
   1321c:	ldr	r7, [sp, #76]	; 0x4c
   13220:	mov	r5, #0
   13224:	mov	r6, #1
   13228:	mov	r0, r7
   1322c:	str	r6, [sp, #40]	; 0x28
   13230:	str	r5, [sp, #68]	; 0x44
   13234:	bl	11018 <strlen@plt>
   13238:	str	r6, [sp, #28]
   1323c:	str	r5, [sp, #44]	; 0x2c
   13240:	str	r5, [sp, #72]	; 0x48
   13244:	str	r7, [sp, #60]	; 0x3c
   13248:	str	r0, [sp, #52]	; 0x34
   1324c:	str	r8, [sp, #160]	; 0xa0
   13250:	mov	r8, fp
   13254:	ldr	fp, [sp, #160]	; 0xa0
   13258:	mov	r9, #0
   1325c:	ldr	r3, [sp, #24]
   13260:	cmn	r3, #1
   13264:	beq	137cc <__assert_fail@plt+0x2688>
   13268:	ldr	r3, [sp, #24]
   1326c:	subs	r6, r3, r9
   13270:	movne	r6, #1
   13274:	cmp	r6, #0
   13278:	beq	137e4 <__assert_fail@plt+0x26a0>
   1327c:	ldr	r7, [sp, #28]
   13280:	ldr	r0, [sp, #36]	; 0x24
   13284:	cmp	fp, #2
   13288:	moveq	r7, #0
   1328c:	andne	r7, r7, #1
   13290:	add	r3, r0, r9
   13294:	cmp	r7, #0
   13298:	str	r3, [sp, #48]	; 0x30
   1329c:	beq	13c88 <__assert_fail@plt+0x2b44>
   132a0:	ldr	r2, [sp, #52]	; 0x34
   132a4:	cmp	r2, #0
   132a8:	beq	13f6c <__assert_fail@plt+0x2e28>
   132ac:	ldr	r1, [sp, #24]
   132b0:	cmp	r2, #1
   132b4:	mov	r3, r2
   132b8:	movls	r3, #0
   132bc:	movhi	r3, #1
   132c0:	cmn	r1, #1
   132c4:	movne	r3, #0
   132c8:	cmp	r3, #0
   132cc:	add	r5, r9, r2
   132d0:	beq	132dc <__assert_fail@plt+0x2198>
   132d4:	bl	11018 <strlen@plt>
   132d8:	str	r0, [sp, #24]
   132dc:	ldr	r3, [sp, #24]
   132e0:	cmp	r5, r3
   132e4:	bhi	13f6c <__assert_fail@plt+0x2e28>
   132e8:	ldr	r2, [sp, #52]	; 0x34
   132ec:	ldr	r1, [sp, #60]	; 0x3c
   132f0:	ldr	r0, [sp, #48]	; 0x30
   132f4:	bl	10f34 <memcmp@plt>
   132f8:	cmp	r0, #0
   132fc:	bne	13f6c <__assert_fail@plt+0x2e28>
   13300:	ldr	r3, [sp, #32]
   13304:	cmp	r3, #0
   13308:	bne	14828 <__assert_fail@plt+0x36e4>
   1330c:	ldr	r3, [sp, #48]	; 0x30
   13310:	ldrb	r5, [r3]
   13314:	cmp	r5, #126	; 0x7e
   13318:	ldrls	pc, [pc, r5, lsl #2]
   1331c:	b	13bec <__assert_fail@plt+0x2aa8>
   13320:	ldrdeq	r3, [r1], -r8
   13324:	andeq	r3, r1, ip, ror #23
   13328:	andeq	r3, r1, ip, ror #23
   1332c:	andeq	r3, r1, ip, ror #23
   13330:	andeq	r3, r1, ip, ror #23
   13334:	andeq	r3, r1, ip, ror #23
   13338:	andeq	r3, r1, ip, ror #23
   1333c:	andeq	r3, r1, r4, lsr #23
   13340:	muleq	r1, r4, fp
   13344:	muleq	r1, r4, sl
   13348:	andeq	r3, r1, ip, asr sl
   1334c:			; <UNDEFINED> instruction: 0x00013ab4
   13350:	muleq	r1, ip, sl
   13354:	andeq	r3, r1, ip, asr #19
   13358:	andeq	r3, r1, ip, ror #23
   1335c:	andeq	r3, r1, ip, ror #23
   13360:	andeq	r3, r1, ip, ror #23
   13364:	andeq	r3, r1, ip, ror #23
   13368:	andeq	r3, r1, ip, ror #23
   1336c:	andeq	r3, r1, ip, ror #23
   13370:	andeq	r3, r1, ip, ror #23
   13374:	andeq	r3, r1, ip, ror #23
   13378:	andeq	r3, r1, ip, ror #23
   1337c:	andeq	r3, r1, ip, ror #23
   13380:	andeq	r3, r1, ip, ror #23
   13384:	andeq	r3, r1, ip, ror #23
   13388:	andeq	r3, r1, ip, ror #23
   1338c:	andeq	r3, r1, ip, ror #23
   13390:	andeq	r3, r1, ip, ror #23
   13394:	andeq	r3, r1, ip, ror #23
   13398:	andeq	r3, r1, ip, ror #23
   1339c:	andeq	r3, r1, ip, ror #23
   133a0:	andeq	r3, r1, ip, lsr #23
   133a4:	andeq	r3, r1, r0, asr #21
   133a8:	andeq	r3, r1, r0, asr #21
   133ac:	andeq	r3, r1, r4, asr #23
   133b0:	andeq	r3, r1, r0, asr #21
   133b4:	andeq	r3, r1, r0, ror #23
   133b8:	andeq	r3, r1, r0, asr #21
   133bc:	andeq	r3, r1, r0, lsl #18
   133c0:	andeq	r3, r1, r0, asr #21
   133c4:	andeq	r3, r1, r0, asr #21
   133c8:	andeq	r3, r1, r0, asr #21
   133cc:	andeq	r3, r1, r0, ror #23
   133d0:	andeq	r3, r1, r0, ror #23
   133d4:	andeq	r3, r1, r0, ror #23
   133d8:	andeq	r3, r1, r0, ror #23
   133dc:	andeq	r3, r1, r0, ror #23
   133e0:	andeq	r3, r1, r0, ror #23
   133e4:	andeq	r3, r1, r0, ror #23
   133e8:	andeq	r3, r1, r0, ror #23
   133ec:	andeq	r3, r1, r0, ror #23
   133f0:	andeq	r3, r1, r0, ror #23
   133f4:	andeq	r3, r1, r0, ror #23
   133f8:	andeq	r3, r1, r0, ror #23
   133fc:	andeq	r3, r1, r0, ror #23
   13400:	andeq	r3, r1, r0, ror #23
   13404:	andeq	r3, r1, r0, ror #23
   13408:	andeq	r3, r1, r0, ror #23
   1340c:	andeq	r3, r1, r0, asr #21
   13410:	andeq	r3, r1, r0, asr #21
   13414:	andeq	r3, r1, r0, asr #21
   13418:	andeq	r3, r1, r0, asr #21
   1341c:	ldrdeq	r3, [r1], -r4
   13420:	andeq	r3, r1, ip, ror #23
   13424:	andeq	r3, r1, r0, ror #23
   13428:	andeq	r3, r1, r0, ror #23
   1342c:	andeq	r3, r1, r0, ror #23
   13430:	andeq	r3, r1, r0, ror #23
   13434:	andeq	r3, r1, r0, ror #23
   13438:	andeq	r3, r1, r0, ror #23
   1343c:	andeq	r3, r1, r0, ror #23
   13440:	andeq	r3, r1, r0, ror #23
   13444:	andeq	r3, r1, r0, ror #23
   13448:	andeq	r3, r1, r0, ror #23
   1344c:	andeq	r3, r1, r0, ror #23
   13450:	andeq	r3, r1, r0, ror #23
   13454:	andeq	r3, r1, r0, ror #23
   13458:	andeq	r3, r1, r0, ror #23
   1345c:	andeq	r3, r1, r0, ror #23
   13460:	andeq	r3, r1, r0, ror #23
   13464:	andeq	r3, r1, r0, ror #23
   13468:	andeq	r3, r1, r0, ror #23
   1346c:	andeq	r3, r1, r0, ror #23
   13470:	andeq	r3, r1, r0, ror #23
   13474:	andeq	r3, r1, r0, ror #23
   13478:	andeq	r3, r1, r0, ror #23
   1347c:	andeq	r3, r1, r0, ror #23
   13480:	andeq	r3, r1, r0, ror #23
   13484:	andeq	r3, r1, r0, ror #23
   13488:	andeq	r3, r1, r0, ror #23
   1348c:	andeq	r3, r1, r0, asr #21
   13490:	andeq	r3, r1, ip, lsl #17
   13494:	andeq	r3, r1, r0, ror #23
   13498:	andeq	r3, r1, r0, asr #21
   1349c:	andeq	r3, r1, r0, ror #23
   134a0:	andeq	r3, r1, r0, asr #21
   134a4:	andeq	r3, r1, r0, ror #23
   134a8:	andeq	r3, r1, r0, ror #23
   134ac:	andeq	r3, r1, r0, ror #23
   134b0:	andeq	r3, r1, r0, ror #23
   134b4:	andeq	r3, r1, r0, ror #23
   134b8:	andeq	r3, r1, r0, ror #23
   134bc:	andeq	r3, r1, r0, ror #23
   134c0:	andeq	r3, r1, r0, ror #23
   134c4:	andeq	r3, r1, r0, ror #23
   134c8:	andeq	r3, r1, r0, ror #23
   134cc:	andeq	r3, r1, r0, ror #23
   134d0:	andeq	r3, r1, r0, ror #23
   134d4:	andeq	r3, r1, r0, ror #23
   134d8:	andeq	r3, r1, r0, ror #23
   134dc:	andeq	r3, r1, r0, ror #23
   134e0:	andeq	r3, r1, r0, ror #23
   134e4:	andeq	r3, r1, r0, ror #23
   134e8:	andeq	r3, r1, r0, ror #23
   134ec:	andeq	r3, r1, r0, ror #23
   134f0:	andeq	r3, r1, r0, ror #23
   134f4:	andeq	r3, r1, r0, ror #23
   134f8:	andeq	r3, r1, r0, ror #23
   134fc:	andeq	r3, r1, r0, ror #23
   13500:	andeq	r3, r1, r0, ror #23
   13504:	andeq	r3, r1, r0, ror #23
   13508:	andeq	r3, r1, r0, ror #23
   1350c:	andeq	r3, r1, r4, lsr #13
   13510:	andeq	r3, r1, r0, asr #21
   13514:	andeq	r3, r1, r4, lsr #13
   13518:	andeq	r3, r1, r4, asr #23
   1351c:	cmp	r4, #0
   13520:	moveq	r3, #1
   13524:	streq	r3, [sp, #28]
   13528:	beq	13c54 <__assert_fail@plt+0x2b10>
   1352c:	mov	r3, #0
   13530:	mov	r4, r3
   13534:	mov	r2, #1
   13538:	str	r2, [sp, #40]	; 0x28
   1353c:	str	r3, [sp, #68]	; 0x44
   13540:	str	r2, [sp, #32]
   13544:	str	r2, [sp, #52]	; 0x34
   13548:	ldr	r3, [pc, #2584]	; 13f68 <__assert_fail@plt+0x2e24>
   1354c:	str	r4, [sp, #44]	; 0x2c
   13550:	str	r4, [sp, #72]	; 0x48
   13554:	str	r4, [sp, #28]
   13558:	str	r3, [sp, #60]	; 0x3c
   1355c:	mov	r8, #2
   13560:	b	1324c <__assert_fail@plt+0x2108>
   13564:	cmp	r4, #0
   13568:	bne	147f4 <__assert_fail@plt+0x36b0>
   1356c:	cmp	sl, #0
   13570:	beq	145b4 <__assert_fail@plt+0x3470>
   13574:	mov	r3, #34	; 0x22
   13578:	strb	r3, [fp]
   1357c:	ldr	r3, [pc, #2528]	; 13f64 <__assert_fail@plt+0x2e20>
   13580:	mov	r1, r4
   13584:	mov	r2, #1
   13588:	str	r4, [sp, #68]	; 0x44
   1358c:	str	r2, [sp, #40]	; 0x28
   13590:	mov	r4, r2
   13594:	str	r1, [sp, #44]	; 0x2c
   13598:	str	r1, [sp, #72]	; 0x48
   1359c:	str	r1, [sp, #32]
   135a0:	str	r2, [sp, #28]
   135a4:	str	r2, [sp, #52]	; 0x34
   135a8:	str	r3, [sp, #60]	; 0x3c
   135ac:	b	1324c <__assert_fail@plt+0x2108>
   135b0:	mov	r3, #0
   135b4:	str	r3, [sp, #68]	; 0x44
   135b8:	str	r3, [sp, #44]	; 0x2c
   135bc:	str	r3, [sp, #32]
   135c0:	str	r3, [sp, #28]
   135c4:	str	r3, [sp, #60]	; 0x3c
   135c8:	mov	r3, #1
   135cc:	str	r8, [sp, #72]	; 0x48
   135d0:	str	r8, [sp, #52]	; 0x34
   135d4:	mov	r4, r8
   135d8:	str	r3, [sp, #40]	; 0x28
   135dc:	b	1324c <__assert_fail@plt+0x2108>
   135e0:	mov	r3, #1
   135e4:	str	r3, [sp, #40]	; 0x28
   135e8:	str	r3, [sp, #32]
   135ec:	str	r3, [sp, #28]
   135f0:	str	r3, [sp, #52]	; 0x34
   135f4:	ldr	r3, [pc, #2408]	; 13f64 <__assert_fail@plt+0x2e20>
   135f8:	mov	r2, #0
   135fc:	mov	r4, r2
   13600:	str	r2, [sp, #68]	; 0x44
   13604:	str	r2, [sp, #44]	; 0x2c
   13608:	str	r2, [sp, #72]	; 0x48
   1360c:	str	r3, [sp, #60]	; 0x3c
   13610:	mov	r8, #5
   13614:	b	1324c <__assert_fail@plt+0x2108>
   13618:	mov	r3, #0
   1361c:	mov	r2, #1
   13620:	str	r2, [sp, #40]	; 0x28
   13624:	mov	r4, r3
   13628:	str	r3, [sp, #68]	; 0x44
   1362c:	str	r2, [sp, #28]
   13630:	str	r3, [sp, #44]	; 0x2c
   13634:	str	r3, [sp, #72]	; 0x48
   13638:	str	r3, [sp, #32]
   1363c:	str	r3, [sp, #52]	; 0x34
   13640:	str	r3, [sp, #60]	; 0x3c
   13644:	b	1324c <__assert_fail@plt+0x2108>
   13648:	mov	r2, #1
   1364c:	mov	r3, #0
   13650:	str	r2, [sp, #40]	; 0x28
   13654:	mov	r4, r3
   13658:	str	r3, [sp, #68]	; 0x44
   1365c:	str	r8, [sp, #52]	; 0x34
   13660:	str	r2, [sp, #32]
   13664:	b	13548 <__assert_fail@plt+0x2404>
   13668:	mov	r3, #1
   1366c:	str	r3, [sp, #40]	; 0x28
   13670:	str	r3, [sp, #32]
   13674:	str	r3, [sp, #28]
   13678:	str	r3, [sp, #52]	; 0x34
   1367c:	ldr	r3, [pc, #2276]	; 13f68 <__assert_fail@plt+0x2e24>
   13680:	mov	r2, #0
   13684:	mov	r4, r2
   13688:	str	r2, [sp, #68]	; 0x44
   1368c:	str	r2, [sp, #44]	; 0x2c
   13690:	str	r2, [sp, #72]	; 0x48
   13694:	str	r3, [sp, #60]	; 0x3c
   13698:	mov	r8, #2
   1369c:	b	1324c <__assert_fail@plt+0x2108>
   136a0:	mov	r7, #0
   136a4:	ldr	r3, [sp, #24]
   136a8:	cmn	r3, #1
   136ac:	beq	141e8 <__assert_fail@plt+0x30a4>
   136b0:	ldr	r3, [sp, #24]
   136b4:	subs	r3, r3, #1
   136b8:	movne	r3, #1
   136bc:	cmp	r3, #0
   136c0:	sub	r2, fp, #2
   136c4:	clz	r2, r2
   136c8:	lsr	r2, r2, #5
   136cc:	bne	138c8 <__assert_fail@plt+0x2784>
   136d0:	cmp	r9, #0
   136d4:	bne	138c8 <__assert_fail@plt+0x2784>
   136d8:	ldr	r3, [sp, #32]
   136dc:	tst	r3, r2
   136e0:	bne	139e8 <__assert_fail@plt+0x28a4>
   136e4:	ldr	r3, [sp, #28]
   136e8:	eor	r3, r3, #1
   136ec:	orr	r3, r2, r3
   136f0:	ldr	r2, [sp, #32]
   136f4:	eor	r3, r3, #1
   136f8:	orrs	r3, r2, r3
   136fc:	beq	1372c <__assert_fail@plt+0x25e8>
   13700:	mov	r3, #0
   13704:	ldr	r1, [sp, #56]	; 0x38
   13708:	cmp	r1, #0
   1370c:	beq	1372c <__assert_fail@plt+0x25e8>
   13710:	lsr	r2, r5, #5
   13714:	and	r0, r5, #31
   13718:	uxtb	r2, r2
   1371c:	ldr	r1, [r1, r2, lsl #2]
   13720:	lsr	r2, r1, r0
   13724:	tst	r2, #1
   13728:	bne	13734 <__assert_fail@plt+0x25f0>
   1372c:	cmp	r7, #0
   13730:	beq	13984 <__assert_fail@plt+0x2840>
   13734:	sub	r2, fp, #2
   13738:	clz	r2, r2
   1373c:	lsr	r2, r2, #5
   13740:	ldr	r3, [sp, #32]
   13744:	cmp	r3, #0
   13748:	bne	13a74 <__assert_fail@plt+0x2930>
   1374c:	ldr	r3, [sp, #44]	; 0x2c
   13750:	eor	r3, r3, #1
   13754:	ands	r3, r2, r3
   13758:	beq	13790 <__assert_fail@plt+0x264c>
   1375c:	cmp	sl, r4
   13760:	movhi	r2, #39	; 0x27
   13764:	strbhi	r2, [r8, r4]
   13768:	add	r2, r4, #1
   1376c:	cmp	r2, sl
   13770:	movcc	r1, #36	; 0x24
   13774:	strbcc	r1, [r8, r2]
   13778:	add	r2, r4, #2
   1377c:	cmp	r2, sl
   13780:	add	r4, r4, #3
   13784:	movcc	r1, #39	; 0x27
   13788:	strbcc	r1, [r8, r2]
   1378c:	str	r3, [sp, #44]	; 0x2c
   13790:	cmp	r4, sl
   13794:	movcc	r3, #92	; 0x5c
   13798:	strbcc	r3, [r8, r4]
   1379c:	add	r9, r9, #1
   137a0:	add	r4, r4, #1
   137a4:	cmp	r4, sl
   137a8:	ldr	r3, [sp, #40]	; 0x28
   137ac:	strbcc	r5, [r8, r4]
   137b0:	cmp	r6, #0
   137b4:	moveq	r3, #0
   137b8:	str	r3, [sp, #40]	; 0x28
   137bc:	ldr	r3, [sp, #24]
   137c0:	add	r4, r4, #1
   137c4:	cmn	r3, #1
   137c8:	bne	13268 <__assert_fail@plt+0x2124>
   137cc:	ldr	r3, [sp, #36]	; 0x24
   137d0:	ldrb	r6, [r3, r9]
   137d4:	adds	r6, r6, #0
   137d8:	movne	r6, #1
   137dc:	cmp	r6, #0
   137e0:	bne	1327c <__assert_fail@plt+0x2138>
   137e4:	str	fp, [sp, #160]	; 0xa0
   137e8:	mov	fp, r8
   137ec:	ldr	r8, [sp, #160]	; 0xa0
   137f0:	ldr	r1, [sp, #32]
   137f4:	cmp	r4, #0
   137f8:	sub	r2, r8, #2
   137fc:	clz	r2, r2
   13800:	lsr	r2, r2, #5
   13804:	andeq	r3, r2, r1
   13808:	movne	r3, #0
   1380c:	cmp	r3, #0
   13810:	bne	148fc <__assert_fail@plt+0x37b8>
   13814:	eor	r3, r1, #1
   13818:	ands	r2, r2, r3
   1381c:	beq	14838 <__assert_fail@plt+0x36f4>
   13820:	ldr	r3, [sp, #68]	; 0x44
   13824:	cmp	r3, #0
   13828:	beq	1483c <__assert_fail@plt+0x36f8>
   1382c:	ldr	r3, [sp, #40]	; 0x28
   13830:	cmp	r3, #0
   13834:	bne	148b8 <__assert_fail@plt+0x3774>
   13838:	ldr	r3, [sp, #72]	; 0x48
   1383c:	adds	r3, r3, #0
   13840:	movne	r3, #1
   13844:	cmp	sl, #0
   13848:	movne	r3, #0
   1384c:	cmp	r3, #0
   13850:	ldreq	r2, [sp, #68]	; 0x44
   13854:	beq	1483c <__assert_fail@plt+0x36f8>
   13858:	ldr	sl, [sp, #72]	; 0x48
   1385c:	str	r3, [sp, #68]	; 0x44
   13860:	ldr	r3, [pc, #1792]	; 13f68 <__assert_fail@plt+0x2e24>
   13864:	mov	r2, #39	; 0x27
   13868:	mov	r4, #1
   1386c:	str	r3, [sp, #60]	; 0x3c
   13870:	mov	r3, #0
   13874:	strb	r2, [fp]
   13878:	str	r4, [sp, #52]	; 0x34
   1387c:	mov	r8, #2
   13880:	str	r3, [sp, #32]
   13884:	b	1324c <__assert_fail@plt+0x2108>
   13888:	mov	r7, #0
   1388c:	cmp	fp, #2
   13890:	beq	141c8 <__assert_fail@plt+0x3084>
   13894:	ldr	r3, [sp, #52]	; 0x34
   13898:	ldr	r2, [sp, #28]
   1389c:	ldr	r1, [sp, #32]
   138a0:	cmp	r3, #0
   138a4:	andne	r2, r2, r1
   138a8:	moveq	r2, #0
   138ac:	cmp	r2, #0
   138b0:	moveq	r5, #92	; 0x5c
   138b4:	moveq	r3, r5
   138b8:	bne	141d4 <__assert_fail@plt+0x3090>
   138bc:	ldr	r1, [sp, #28]
   138c0:	cmp	r1, #0
   138c4:	bne	14944 <__assert_fail@plt+0x3800>
   138c8:	mov	r6, #0
   138cc:	b	136e4 <__assert_fail@plt+0x25a0>
   138d0:	mov	r7, #0
   138d4:	cmp	fp, #2
   138d8:	beq	14238 <__assert_fail@plt+0x30f4>
   138dc:	cmp	fp, #5
   138e0:	beq	141fc <__assert_fail@plt+0x30b8>
   138e4:	sub	r2, fp, #2
   138e8:	mov	r6, #0
   138ec:	clz	r2, r2
   138f0:	mov	r5, #63	; 0x3f
   138f4:	lsr	r2, r2, #5
   138f8:	b	136e4 <__assert_fail@plt+0x25a0>
   138fc:	mov	r7, #0
   13900:	cmp	fp, #2
   13904:	strne	r6, [sp, #68]	; 0x44
   13908:	movne	r2, #0
   1390c:	movne	r5, #39	; 0x27
   13910:	bne	136e4 <__assert_fail@plt+0x25a0>
   13914:	ldr	r3, [sp, #32]
   13918:	cmp	r3, #0
   1391c:	bne	14618 <__assert_fail@plt+0x34d4>
   13920:	cmp	sl, #0
   13924:	ldr	r3, [sp, #72]	; 0x48
   13928:	clz	r3, r3
   1392c:	lsr	r3, r3, #5
   13930:	moveq	r3, #0
   13934:	cmp	r3, #0
   13938:	bne	1454c <__assert_fail@plt+0x3408>
   1393c:	cmp	sl, r4
   13940:	movhi	r3, #39	; 0x27
   13944:	strbhi	r3, [r8, r4]
   13948:	add	r3, r4, #1
   1394c:	cmp	sl, r3
   13950:	movhi	r2, #92	; 0x5c
   13954:	strbhi	r2, [r8, r3]
   13958:	add	r3, r4, #2
   1395c:	cmp	sl, r3
   13960:	movhi	r2, #39	; 0x27
   13964:	strbhi	r2, [r8, r3]
   13968:	mov	r3, #0
   1396c:	cmp	r7, #0
   13970:	add	r4, r4, #3
   13974:	str	r3, [sp, #44]	; 0x2c
   13978:	str	r6, [sp, #68]	; 0x44
   1397c:	mov	r5, #39	; 0x27
   13980:	bne	13734 <__assert_fail@plt+0x25f0>
   13984:	ldr	r2, [sp, #44]	; 0x2c
   13988:	eor	r3, r3, #1
   1398c:	and	r3, r3, r2
   13990:	add	r9, r9, #1
   13994:	uxtb	r3, r3
   13998:	cmp	r3, #0
   1399c:	beq	137a4 <__assert_fail@plt+0x2660>
   139a0:	cmp	sl, r4
   139a4:	movhi	r3, #39	; 0x27
   139a8:	strbhi	r3, [r8, r4]
   139ac:	add	r3, r4, #1
   139b0:	cmp	sl, r3
   139b4:	movhi	r2, #39	; 0x27
   139b8:	strbhi	r2, [r8, r3]
   139bc:	mov	r3, #0
   139c0:	add	r4, r4, #2
   139c4:	str	r3, [sp, #44]	; 0x2c
   139c8:	b	137a4 <__assert_fail@plt+0x2660>
   139cc:	mov	r3, #114	; 0x72
   139d0:	ldr	r1, [sp, #32]
   139d4:	sub	r2, fp, #2
   139d8:	clz	r2, r2
   139dc:	lsr	r2, r2, #5
   139e0:	tst	r2, r1
   139e4:	beq	138bc <__assert_fail@plt+0x2778>
   139e8:	mov	fp, r8
   139ec:	mov	r8, #2
   139f0:	ldr	r3, [sp, #28]
   139f4:	cmp	r3, #0
   139f8:	movne	r8, #4
   139fc:	ldr	r3, [sp, #164]	; 0xa4
   13a00:	mov	ip, #0
   13a04:	bic	r3, r3, #2
   13a08:	str	r3, [sp, #4]
   13a0c:	ldr	r3, [sp, #76]	; 0x4c
   13a10:	str	r8, [sp]
   13a14:	str	r3, [sp, #16]
   13a18:	ldr	r3, [sp, #80]	; 0x50
   13a1c:	ldr	r2, [sp, #36]	; 0x24
   13a20:	str	r3, [sp, #12]
   13a24:	mov	r1, sl
   13a28:	ldr	r3, [sp, #24]
   13a2c:	mov	r0, fp
   13a30:	str	ip, [sp, #8]
   13a34:	bl	13154 <__assert_fail@plt+0x2010>
   13a38:	mov	r4, r0
   13a3c:	ldr	r3, [pc, #1304]	; 13f5c <__assert_fail@plt+0x2e18>
   13a40:	ldr	r2, [sp, #116]	; 0x74
   13a44:	mov	r0, r4
   13a48:	ldr	r3, [r3]
   13a4c:	cmp	r2, r3
   13a50:	bne	14940 <__assert_fail@plt+0x37fc>
   13a54:	add	sp, sp, #124	; 0x7c
   13a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a5c:	mov	r5, #110	; 0x6e
   13a60:	ldr	r3, [sp, #32]
   13a64:	mov	r2, #0
   13a68:	cmp	r3, #0
   13a6c:	mov	r6, r2
   13a70:	beq	1374c <__assert_fail@plt+0x2608>
   13a74:	str	fp, [sp, #160]	; 0xa0
   13a78:	mov	fp, r8
   13a7c:	ldr	r8, [sp, #160]	; 0xa0
   13a80:	mov	r3, r2
   13a84:	ldr	r2, [sp, #28]
   13a88:	and	r2, r2, r3
   13a8c:	str	r2, [sp, #28]
   13a90:	b	139f0 <__assert_fail@plt+0x28ac>
   13a94:	mov	r5, #116	; 0x74
   13a98:	b	13a60 <__assert_fail@plt+0x291c>
   13a9c:	mov	r5, #102	; 0x66
   13aa0:	ldr	r3, [sp, #32]
   13aa4:	cmp	r3, #0
   13aa8:	bne	14654 <__assert_fail@plt+0x3510>
   13aac:	mov	r6, #0
   13ab0:	b	13790 <__assert_fail@plt+0x264c>
   13ab4:	mov	r5, #118	; 0x76
   13ab8:	b	13aa0 <__assert_fail@plt+0x295c>
   13abc:	mov	r7, #0
   13ac0:	mov	r6, #0
   13ac4:	b	13700 <__assert_fail@plt+0x25bc>
   13ac8:	ldr	r3, [sp, #32]
   13acc:	cmp	r3, #0
   13ad0:	bne	14898 <__assert_fail@plt+0x3754>
   13ad4:	mov	r7, r3
   13ad8:	ldr	r3, [sp, #44]	; 0x2c
   13adc:	sub	r2, fp, #2
   13ae0:	eor	r3, r3, #1
   13ae4:	clz	r2, r2
   13ae8:	lsr	r2, r2, #5
   13aec:	ands	r3, r2, r3
   13af0:	beq	14538 <__assert_fail@plt+0x33f4>
   13af4:	cmp	sl, r4
   13af8:	movhi	r1, #39	; 0x27
   13afc:	strbhi	r1, [r8, r4]
   13b00:	add	r1, r4, #1
   13b04:	cmp	sl, r1
   13b08:	movhi	r0, #36	; 0x24
   13b0c:	strbhi	r0, [r8, r1]
   13b10:	add	r1, r4, #2
   13b14:	cmp	sl, r1
   13b18:	movhi	r0, #39	; 0x27
   13b1c:	strbhi	r0, [r8, r1]
   13b20:	add	r1, r4, #3
   13b24:	cmp	sl, r1
   13b28:	bls	14598 <__assert_fail@plt+0x3454>
   13b2c:	mov	r4, r1
   13b30:	mov	r1, #92	; 0x5c
   13b34:	strb	r1, [r8, r4]
   13b38:	mov	r1, r4
   13b3c:	str	r3, [sp, #44]	; 0x2c
   13b40:	cmp	fp, #2
   13b44:	add	r4, r4, #1
   13b48:	beq	145e0 <__assert_fail@plt+0x349c>
   13b4c:	ldr	r0, [sp, #24]
   13b50:	add	r3, r9, #1
   13b54:	cmp	r3, r0
   13b58:	bcs	13b70 <__assert_fail@plt+0x2a2c>
   13b5c:	ldr	r0, [sp, #36]	; 0x24
   13b60:	ldrb	r3, [r0, r3]
   13b64:	sub	r3, r3, #48	; 0x30
   13b68:	cmp	r3, #9
   13b6c:	bls	145f0 <__assert_fail@plt+0x34ac>
   13b70:	mov	r5, #48	; 0x30
   13b74:	ldr	r3, [sp, #28]
   13b78:	eor	r3, r3, #1
   13b7c:	orrs	r2, r2, r3
   13b80:	mov	r3, r6
   13b84:	moveq	r6, r2
   13b88:	beq	13704 <__assert_fail@plt+0x25c0>
   13b8c:	mov	r6, #0
   13b90:	b	1372c <__assert_fail@plt+0x25e8>
   13b94:	mov	r2, #0
   13b98:	mov	r6, r2
   13b9c:	mov	r5, #98	; 0x62
   13ba0:	b	1374c <__assert_fail@plt+0x2608>
   13ba4:	mov	r5, #97	; 0x61
   13ba8:	b	13aac <__assert_fail@plt+0x2968>
   13bac:	mov	r3, r7
   13bb0:	mov	r6, r7
   13bb4:	mov	r2, #0
   13bb8:	mov	r7, r3
   13bbc:	mov	r5, #32
   13bc0:	b	136e4 <__assert_fail@plt+0x25a0>
   13bc4:	cmp	r9, #0
   13bc8:	mov	r3, r7
   13bcc:	bne	14194 <__assert_fail@plt+0x3050>
   13bd0:	mov	r6, r7
   13bd4:	mov	r2, r9
   13bd8:	mov	r7, r3
   13bdc:	b	136e4 <__assert_fail@plt+0x25a0>
   13be0:	mov	r6, r7
   13be4:	b	13700 <__assert_fail@plt+0x25bc>
   13be8:	mov	r7, #0
   13bec:	ldr	r3, [sp, #64]	; 0x40
   13bf0:	cmp	r3, #1
   13bf4:	bne	14250 <__assert_fail@plt+0x310c>
   13bf8:	bl	11000 <__ctype_b_loc@plt>
   13bfc:	ldr	r2, [sp, #64]	; 0x40
   13c00:	sxth	r3, r5
   13c04:	mov	ip, r2
   13c08:	lsl	r3, r3, #1
   13c0c:	ldr	r2, [r0]
   13c10:	ldrh	r3, [r2, r3]
   13c14:	and	r3, r3, #16384	; 0x4000
   13c18:	cmp	r3, #0
   13c1c:	ldr	r3, [sp, #28]
   13c20:	movne	r6, #1
   13c24:	moveq	r6, #0
   13c28:	movne	r2, #0
   13c2c:	andeq	r2, r3, #1
   13c30:	cmp	r2, #0
   13c34:	bne	14560 <__assert_fail@plt+0x341c>
   13c38:	sub	r2, fp, #2
   13c3c:	clz	r2, r2
   13c40:	lsr	r2, r2, #5
   13c44:	b	136e4 <__assert_fail@plt+0x25a0>
   13c48:	cmp	r4, #0
   13c4c:	bne	1490c <__assert_fail@plt+0x37c8>
   13c50:	str	r4, [sp, #28]
   13c54:	cmp	sl, #0
   13c58:	bne	14950 <__assert_fail@plt+0x380c>
   13c5c:	ldr	r3, [pc, #772]	; 13f68 <__assert_fail@plt+0x2e24>
   13c60:	mov	r4, #1
   13c64:	str	r4, [sp, #40]	; 0x28
   13c68:	str	r3, [sp, #60]	; 0x3c
   13c6c:	str	r4, [sp, #52]	; 0x34
   13c70:	str	sl, [sp, #72]	; 0x48
   13c74:	str	sl, [sp, #68]	; 0x44
   13c78:	str	sl, [sp, #44]	; 0x2c
   13c7c:	str	sl, [sp, #32]
   13c80:	mov	r8, #2
   13c84:	b	1324c <__assert_fail@plt+0x2108>
   13c88:	ldr	r3, [sp, #36]	; 0x24
   13c8c:	ldrb	r5, [r3, r9]
   13c90:	cmp	r5, #126	; 0x7e
   13c94:	ldrls	pc, [pc, r5, lsl #2]
   13c98:	b	13bec <__assert_fail@plt+0x2aa8>
   13c9c:	ldrdeq	r3, [r1], -r0
   13ca0:	andeq	r3, r1, ip, ror #23
   13ca4:	andeq	r3, r1, ip, ror #23
   13ca8:	andeq	r3, r1, ip, ror #23
   13cac:	andeq	r3, r1, ip, ror #23
   13cb0:	andeq	r3, r1, ip, ror #23
   13cb4:	andeq	r3, r1, ip, ror #23
   13cb8:			; <UNDEFINED> instruction: 0x00013ebc
   13cbc:	andeq	r3, r1, r8, lsr #29
   13cc0:	andeq	r3, r1, r0, lsr #29
   13cc4:	muleq	r1, r8, lr
   13cc8:	andeq	r3, r1, r8, asr #30
   13ccc:	andeq	r3, r1, r4, lsr pc
   13cd0:	andeq	r3, r1, ip, asr #19
   13cd4:	andeq	r3, r1, ip, ror #23
   13cd8:	andeq	r3, r1, ip, ror #23
   13cdc:	andeq	r3, r1, ip, ror #23
   13ce0:	andeq	r3, r1, ip, ror #23
   13ce4:	andeq	r3, r1, ip, ror #23
   13ce8:	andeq	r3, r1, ip, ror #23
   13cec:	andeq	r3, r1, ip, ror #23
   13cf0:	andeq	r3, r1, ip, ror #23
   13cf4:	andeq	r3, r1, ip, ror #23
   13cf8:	andeq	r3, r1, ip, ror #23
   13cfc:	andeq	r3, r1, ip, ror #23
   13d00:	andeq	r3, r1, ip, ror #23
   13d04:	andeq	r3, r1, ip, ror #23
   13d08:	andeq	r3, r1, ip, ror #23
   13d0c:	andeq	r3, r1, ip, ror #23
   13d10:	andeq	r3, r1, ip, ror #23
   13d14:	andeq	r3, r1, ip, ror #23
   13d18:	andeq	r3, r1, ip, ror #23
   13d1c:	andeq	r3, r1, r4, lsr #30
   13d20:	andeq	r3, r1, r0, lsl pc
   13d24:	andeq	r3, r1, r0, lsl pc
   13d28:	andeq	r3, r1, r0, lsl #30
   13d2c:	andeq	r3, r1, r0, lsl pc
   13d30:	andeq	r3, r1, r8, lsr ip
   13d34:	andeq	r3, r1, r0, lsl pc
   13d38:	andeq	r3, r1, r0, lsl #18
   13d3c:	andeq	r3, r1, r0, lsl pc
   13d40:	andeq	r3, r1, r0, lsl pc
   13d44:	andeq	r3, r1, r0, lsl pc
   13d48:	andeq	r3, r1, r8, lsr ip
   13d4c:	andeq	r3, r1, r8, lsr ip
   13d50:	andeq	r3, r1, r8, lsr ip
   13d54:	andeq	r3, r1, r8, lsr ip
   13d58:	andeq	r3, r1, r8, lsr ip
   13d5c:	andeq	r3, r1, r8, lsr ip
   13d60:	andeq	r3, r1, r8, lsr ip
   13d64:	andeq	r3, r1, r8, lsr ip
   13d68:	andeq	r3, r1, r8, lsr ip
   13d6c:	andeq	r3, r1, r8, lsr ip
   13d70:	andeq	r3, r1, r8, lsr ip
   13d74:	andeq	r3, r1, r8, lsr ip
   13d78:	andeq	r3, r1, r8, lsr ip
   13d7c:	andeq	r3, r1, r8, lsr ip
   13d80:	andeq	r3, r1, r8, lsr ip
   13d84:	andeq	r3, r1, r8, lsr ip
   13d88:	andeq	r3, r1, r0, lsl pc
   13d8c:	andeq	r3, r1, r0, lsl pc
   13d90:	andeq	r3, r1, r0, lsl pc
   13d94:	andeq	r3, r1, r0, lsl pc
   13d98:	ldrdeq	r3, [r1], -r4
   13d9c:	andeq	r3, r1, ip, ror #23
   13da0:	andeq	r3, r1, r8, lsr ip
   13da4:	andeq	r3, r1, r8, lsr ip
   13da8:	andeq	r3, r1, r8, lsr ip
   13dac:	andeq	r3, r1, r8, lsr ip
   13db0:	andeq	r3, r1, r8, lsr ip
   13db4:	andeq	r3, r1, r8, lsr ip
   13db8:	andeq	r3, r1, r8, lsr ip
   13dbc:	andeq	r3, r1, r8, lsr ip
   13dc0:	andeq	r3, r1, r8, lsr ip
   13dc4:	andeq	r3, r1, r8, lsr ip
   13dc8:	andeq	r3, r1, r8, lsr ip
   13dcc:	andeq	r3, r1, r8, lsr ip
   13dd0:	andeq	r3, r1, r8, lsr ip
   13dd4:	andeq	r3, r1, r8, lsr ip
   13dd8:	andeq	r3, r1, r8, lsr ip
   13ddc:	andeq	r3, r1, r8, lsr ip
   13de0:	andeq	r3, r1, r8, lsr ip
   13de4:	andeq	r3, r1, r8, lsr ip
   13de8:	andeq	r3, r1, r8, lsr ip
   13dec:	andeq	r3, r1, r8, lsr ip
   13df0:	andeq	r3, r1, r8, lsr ip
   13df4:	andeq	r3, r1, r8, lsr ip
   13df8:	andeq	r3, r1, r8, lsr ip
   13dfc:	andeq	r3, r1, r8, lsr ip
   13e00:	andeq	r3, r1, r8, lsr ip
   13e04:	andeq	r3, r1, r8, lsr ip
   13e08:	andeq	r3, r1, r0, lsl pc
   13e0c:	andeq	r3, r1, ip, lsl #17
   13e10:	andeq	r3, r1, r8, lsr ip
   13e14:	andeq	r3, r1, r0, lsl pc
   13e18:	andeq	r3, r1, r8, lsr ip
   13e1c:	andeq	r3, r1, r0, lsl pc
   13e20:	andeq	r3, r1, r8, lsr ip
   13e24:	andeq	r3, r1, r8, lsr ip
   13e28:	andeq	r3, r1, r8, lsr ip
   13e2c:	andeq	r3, r1, r8, lsr ip
   13e30:	andeq	r3, r1, r8, lsr ip
   13e34:	andeq	r3, r1, r8, lsr ip
   13e38:	andeq	r3, r1, r8, lsr ip
   13e3c:	andeq	r3, r1, r8, lsr ip
   13e40:	andeq	r3, r1, r8, lsr ip
   13e44:	andeq	r3, r1, r8, lsr ip
   13e48:	andeq	r3, r1, r8, lsr ip
   13e4c:	andeq	r3, r1, r8, lsr ip
   13e50:	andeq	r3, r1, r8, lsr ip
   13e54:	andeq	r3, r1, r8, lsr ip
   13e58:	andeq	r3, r1, r8, lsr ip
   13e5c:	andeq	r3, r1, r8, lsr ip
   13e60:	andeq	r3, r1, r8, lsr ip
   13e64:	andeq	r3, r1, r8, lsr ip
   13e68:	andeq	r3, r1, r8, lsr ip
   13e6c:	andeq	r3, r1, r8, lsr ip
   13e70:	andeq	r3, r1, r8, lsr ip
   13e74:	andeq	r3, r1, r8, lsr ip
   13e78:	andeq	r3, r1, r8, lsr ip
   13e7c:	andeq	r3, r1, r8, lsr ip
   13e80:	andeq	r3, r1, r8, lsr ip
   13e84:	andeq	r3, r1, r8, lsr ip
   13e88:	andeq	r3, r1, r4, lsr #13
   13e8c:	andeq	r3, r1, r0, lsl pc
   13e90:	andeq	r3, r1, r4, lsr #13
   13e94:	andeq	r3, r1, r0, lsl #30
   13e98:	mov	r3, #110	; 0x6e
   13e9c:	b	139d0 <__assert_fail@plt+0x288c>
   13ea0:	mov	r3, #116	; 0x74
   13ea4:	b	139d0 <__assert_fail@plt+0x288c>
   13ea8:	sub	r2, fp, #2
   13eac:	mov	r3, #98	; 0x62
   13eb0:	clz	r2, r2
   13eb4:	lsr	r2, r2, #5
   13eb8:	b	138bc <__assert_fail@plt+0x2778>
   13ebc:	sub	r2, fp, #2
   13ec0:	mov	r3, #97	; 0x61
   13ec4:	clz	r2, r2
   13ec8:	lsr	r2, r2, #5
   13ecc:	b	138bc <__assert_fail@plt+0x2778>
   13ed0:	ldr	r3, [sp, #28]
   13ed4:	cmp	r3, #0
   13ed8:	bne	13ac8 <__assert_fail@plt+0x2984>
   13edc:	ldr	r3, [sp, #164]	; 0xa4
   13ee0:	tst	r3, #1
   13ee4:	bne	14558 <__assert_fail@plt+0x3414>
   13ee8:	ldr	r6, [sp, #28]
   13eec:	sub	r2, fp, #2
   13ef0:	mov	r7, r6
   13ef4:	clz	r2, r2
   13ef8:	lsr	r2, r2, #5
   13efc:	b	136e4 <__assert_fail@plt+0x25a0>
   13f00:	sub	r2, fp, #2
   13f04:	clz	r2, r2
   13f08:	lsr	r2, r2, #5
   13f0c:	b	136d0 <__assert_fail@plt+0x258c>
   13f10:	sub	r2, fp, #2
   13f14:	mov	r6, #0
   13f18:	clz	r2, r2
   13f1c:	lsr	r2, r2, #5
   13f20:	b	136d8 <__assert_fail@plt+0x2594>
   13f24:	sub	r2, fp, #2
   13f28:	clz	r2, r2
   13f2c:	lsr	r2, r2, #5
   13f30:	b	136d8 <__assert_fail@plt+0x2594>
   13f34:	sub	r2, fp, #2
   13f38:	mov	r3, #102	; 0x66
   13f3c:	clz	r2, r2
   13f40:	lsr	r2, r2, #5
   13f44:	b	138bc <__assert_fail@plt+0x2778>
   13f48:	sub	r2, fp, #2
   13f4c:	mov	r3, #118	; 0x76
   13f50:	clz	r2, r2
   13f54:	lsr	r2, r2, #5
   13f58:	b	138bc <__assert_fail@plt+0x2778>
   13f5c:	andeq	r7, r2, r8, lsl #30
   13f60:	andeq	r6, r1, r8, asr lr
   13f64:	andeq	r6, r1, r0, asr #28
   13f68:	andeq	r6, r1, r4, asr lr
   13f6c:	ldr	r3, [sp, #48]	; 0x30
   13f70:	ldrb	r5, [r3]
   13f74:	cmp	r5, #126	; 0x7e
   13f78:	ldrls	pc, [pc, r5, lsl #2]
   13f7c:	b	13be8 <__assert_fail@plt+0x2aa4>
   13f80:	andeq	r3, r1, r8, asr #21
   13f84:	andeq	r3, r1, r8, ror #23
   13f88:	andeq	r3, r1, r8, ror #23
   13f8c:	andeq	r3, r1, r8, ror #23
   13f90:	andeq	r3, r1, r8, ror #23
   13f94:	andeq	r3, r1, r8, ror #23
   13f98:	andeq	r3, r1, r8, ror #23
   13f9c:	andeq	r4, r1, r0, asr #3
   13fa0:			; <UNDEFINED> instruction: 0x000141b8
   13fa4:	muleq	r1, r4, sl
   13fa8:	andeq	r3, r1, ip, asr sl
   13fac:			; <UNDEFINED> instruction: 0x00013ab4
   13fb0:	muleq	r1, ip, sl
   13fb4:	andeq	r4, r1, ip, lsr #3
   13fb8:	andeq	r3, r1, r8, ror #23
   13fbc:	andeq	r3, r1, r8, ror #23
   13fc0:	andeq	r3, r1, r8, ror #23
   13fc4:	andeq	r3, r1, r8, ror #23
   13fc8:	andeq	r3, r1, r8, ror #23
   13fcc:	andeq	r3, r1, r8, ror #23
   13fd0:	andeq	r3, r1, r8, ror #23
   13fd4:	andeq	r3, r1, r8, ror #23
   13fd8:	andeq	r3, r1, r8, ror #23
   13fdc:	andeq	r3, r1, r8, ror #23
   13fe0:	andeq	r3, r1, r8, ror #23
   13fe4:	andeq	r3, r1, r8, ror #23
   13fe8:	andeq	r3, r1, r8, ror #23
   13fec:	andeq	r3, r1, r8, ror #23
   13ff0:	andeq	r3, r1, r8, ror #23
   13ff4:	andeq	r3, r1, r8, ror #23
   13ff8:	andeq	r3, r1, r8, ror #23
   13ffc:	andeq	r3, r1, r8, ror #23
   14000:	andeq	r4, r1, r4, lsr #3
   14004:			; <UNDEFINED> instruction: 0x00013abc
   14008:			; <UNDEFINED> instruction: 0x00013abc
   1400c:	andeq	r4, r1, r8, lsl #3
   14010:			; <UNDEFINED> instruction: 0x00013abc
   14014:	andeq	r4, r1, ip, ror r1
   14018:			; <UNDEFINED> instruction: 0x00013abc
   1401c:	strdeq	r3, [r1], -ip
   14020:			; <UNDEFINED> instruction: 0x00013abc
   14024:			; <UNDEFINED> instruction: 0x00013abc
   14028:			; <UNDEFINED> instruction: 0x00013abc
   1402c:	andeq	r4, r1, ip, ror r1
   14030:	andeq	r4, r1, ip, ror r1
   14034:	andeq	r4, r1, ip, ror r1
   14038:	andeq	r4, r1, ip, ror r1
   1403c:	andeq	r4, r1, ip, ror r1
   14040:	andeq	r4, r1, ip, ror r1
   14044:	andeq	r4, r1, ip, ror r1
   14048:	andeq	r4, r1, ip, ror r1
   1404c:	andeq	r4, r1, ip, ror r1
   14050:	andeq	r4, r1, ip, ror r1
   14054:	andeq	r4, r1, ip, ror r1
   14058:	andeq	r4, r1, ip, ror r1
   1405c:	andeq	r4, r1, ip, ror r1
   14060:	andeq	r4, r1, ip, ror r1
   14064:	andeq	r4, r1, ip, ror r1
   14068:	andeq	r4, r1, ip, ror r1
   1406c:			; <UNDEFINED> instruction: 0x00013abc
   14070:			; <UNDEFINED> instruction: 0x00013abc
   14074:			; <UNDEFINED> instruction: 0x00013abc
   14078:			; <UNDEFINED> instruction: 0x00013abc
   1407c:	ldrdeq	r3, [r1], -r0
   14080:	andeq	r3, r1, r8, ror #23
   14084:	andeq	r4, r1, ip, ror r1
   14088:	andeq	r4, r1, ip, ror r1
   1408c:	andeq	r4, r1, ip, ror r1
   14090:	andeq	r4, r1, ip, ror r1
   14094:	andeq	r4, r1, ip, ror r1
   14098:	andeq	r4, r1, ip, ror r1
   1409c:	andeq	r4, r1, ip, ror r1
   140a0:	andeq	r4, r1, ip, ror r1
   140a4:	andeq	r4, r1, ip, ror r1
   140a8:	andeq	r4, r1, ip, ror r1
   140ac:	andeq	r4, r1, ip, ror r1
   140b0:	andeq	r4, r1, ip, ror r1
   140b4:	andeq	r4, r1, ip, ror r1
   140b8:	andeq	r4, r1, ip, ror r1
   140bc:	andeq	r4, r1, ip, ror r1
   140c0:	andeq	r4, r1, ip, ror r1
   140c4:	andeq	r4, r1, ip, ror r1
   140c8:	andeq	r4, r1, ip, ror r1
   140cc:	andeq	r4, r1, ip, ror r1
   140d0:	andeq	r4, r1, ip, ror r1
   140d4:	andeq	r4, r1, ip, ror r1
   140d8:	andeq	r4, r1, ip, ror r1
   140dc:	andeq	r4, r1, ip, ror r1
   140e0:	andeq	r4, r1, ip, ror r1
   140e4:	andeq	r4, r1, ip, ror r1
   140e8:	andeq	r4, r1, ip, ror r1
   140ec:			; <UNDEFINED> instruction: 0x00013abc
   140f0:	andeq	r3, r1, r8, lsl #17
   140f4:	andeq	r4, r1, ip, ror r1
   140f8:			; <UNDEFINED> instruction: 0x00013abc
   140fc:	andeq	r4, r1, ip, ror r1
   14100:			; <UNDEFINED> instruction: 0x00013abc
   14104:	andeq	r4, r1, ip, ror r1
   14108:	andeq	r4, r1, ip, ror r1
   1410c:	andeq	r4, r1, ip, ror r1
   14110:	andeq	r4, r1, ip, ror r1
   14114:	andeq	r4, r1, ip, ror r1
   14118:	andeq	r4, r1, ip, ror r1
   1411c:	andeq	r4, r1, ip, ror r1
   14120:	andeq	r4, r1, ip, ror r1
   14124:	andeq	r4, r1, ip, ror r1
   14128:	andeq	r4, r1, ip, ror r1
   1412c:	andeq	r4, r1, ip, ror r1
   14130:	andeq	r4, r1, ip, ror r1
   14134:	andeq	r4, r1, ip, ror r1
   14138:	andeq	r4, r1, ip, ror r1
   1413c:	andeq	r4, r1, ip, ror r1
   14140:	andeq	r4, r1, ip, ror r1
   14144:	andeq	r4, r1, ip, ror r1
   14148:	andeq	r4, r1, ip, ror r1
   1414c:	andeq	r4, r1, ip, ror r1
   14150:	andeq	r4, r1, ip, ror r1
   14154:	andeq	r4, r1, ip, ror r1
   14158:	andeq	r4, r1, ip, ror r1
   1415c:	andeq	r4, r1, ip, ror r1
   14160:	andeq	r4, r1, ip, ror r1
   14164:	andeq	r4, r1, ip, ror r1
   14168:	andeq	r4, r1, ip, ror r1
   1416c:	andeq	r3, r1, r0, lsr #13
   14170:			; <UNDEFINED> instruction: 0x00013abc
   14174:	andeq	r3, r1, r0, lsr #13
   14178:	andeq	r4, r1, r8, lsl #3
   1417c:	mov	r6, r7
   14180:	mov	r7, #0
   14184:	b	13700 <__assert_fail@plt+0x25bc>
   14188:	cmp	r9, #0
   1418c:	mov	r3, #0
   14190:	beq	13bd0 <__assert_fail@plt+0x2a8c>
   14194:	mov	r6, #0
   14198:	mov	r7, r3
   1419c:	mov	r3, r6
   141a0:	b	13704 <__assert_fail@plt+0x25c0>
   141a4:	mov	r3, #0
   141a8:	b	13bb0 <__assert_fail@plt+0x2a6c>
   141ac:	mov	r7, #0
   141b0:	mov	r3, #114	; 0x72
   141b4:	b	139d0 <__assert_fail@plt+0x288c>
   141b8:	mov	r5, #98	; 0x62
   141bc:	b	13a60 <__assert_fail@plt+0x291c>
   141c0:	mov	r5, #97	; 0x61
   141c4:	b	13aa0 <__assert_fail@plt+0x295c>
   141c8:	ldr	r3, [sp, #32]
   141cc:	cmp	r3, #0
   141d0:	bne	14618 <__assert_fail@plt+0x34d4>
   141d4:	add	r9, r9, #1
   141d8:	ldr	r3, [sp, #44]	; 0x2c
   141dc:	mov	r6, #0
   141e0:	mov	r5, #92	; 0x5c
   141e4:	b	13998 <__assert_fail@plt+0x2854>
   141e8:	ldr	r3, [sp, #36]	; 0x24
   141ec:	ldrb	r3, [r3, #1]
   141f0:	adds	r3, r3, #0
   141f4:	movne	r3, #1
   141f8:	b	136bc <__assert_fail@plt+0x2578>
   141fc:	ldr	r3, [sp, #164]	; 0xa4
   14200:	ands	r3, r3, #4
   14204:	beq	14228 <__assert_fail@plt+0x30e4>
   14208:	ldr	r2, [sp, #24]
   1420c:	add	r3, r9, #2
   14210:	cmp	r3, r2
   14214:	bcs	14228 <__assert_fail@plt+0x30e4>
   14218:	ldr	r2, [sp, #48]	; 0x30
   1421c:	ldrb	r5, [r2, #1]
   14220:	cmp	r5, #63	; 0x3f
   14224:	beq	1468c <__assert_fail@plt+0x3548>
   14228:	mov	r2, #0
   1422c:	mov	r6, r2
   14230:	mov	r5, #63	; 0x3f
   14234:	b	136e4 <__assert_fail@plt+0x25a0>
   14238:	ldr	r3, [sp, #32]
   1423c:	cmp	r3, #0
   14240:	bne	14618 <__assert_fail@plt+0x34d4>
   14244:	mov	r6, r3
   14248:	mov	r5, #63	; 0x3f
   1424c:	b	1372c <__assert_fail@plt+0x25e8>
   14250:	ldr	r3, [sp, #24]
   14254:	cmn	r3, #1
   14258:	mov	r3, #0
   1425c:	str	r3, [sp, #108]	; 0x6c
   14260:	str	r3, [sp, #112]	; 0x70
   14264:	bne	14274 <__assert_fail@plt+0x3130>
   14268:	ldr	r0, [sp, #36]	; 0x24
   1426c:	bl	11018 <strlen@plt>
   14270:	str	r0, [sp, #24]
   14274:	mov	r3, #0
   14278:	str	sl, [sp, #88]	; 0x58
   1427c:	ldr	sl, [sp, #36]	; 0x24
   14280:	str	r5, [sp, #92]	; 0x5c
   14284:	mov	r5, r3
   14288:	str	r7, [sp, #96]	; 0x60
   1428c:	str	r4, [sp, #100]	; 0x64
   14290:	str	r8, [sp, #84]	; 0x54
   14294:	ldr	r3, [sp, #24]
   14298:	add	r4, r9, r5
   1429c:	add	r7, sl, r4
   142a0:	sub	r2, r3, r4
   142a4:	mov	r1, r7
   142a8:	add	r3, sp, #108	; 0x6c
   142ac:	add	r0, sp, #104	; 0x68
   142b0:	bl	15b70 <__assert_fail@plt+0x4a2c>
   142b4:	subs	r8, r0, #0
   142b8:	beq	14308 <__assert_fail@plt+0x31c4>
   142bc:	cmn	r8, #1
   142c0:	beq	14668 <__assert_fail@plt+0x3524>
   142c4:	cmn	r8, #2
   142c8:	beq	14788 <__assert_fail@plt+0x3644>
   142cc:	ldr	r3, [sp, #32]
   142d0:	cmp	fp, #2
   142d4:	movne	r3, #0
   142d8:	andeq	r3, r3, #1
   142dc:	cmp	r3, #0
   142e0:	bne	14468 <__assert_fail@plt+0x3324>
   142e4:	ldr	r0, [sp, #104]	; 0x68
   142e8:	bl	10f70 <iswprint@plt>
   142ec:	add	r5, r5, r8
   142f0:	cmp	r0, #0
   142f4:	add	r0, sp, #108	; 0x6c
   142f8:	moveq	r6, #0
   142fc:	bl	10f1c <mbsinit@plt>
   14300:	cmp	r0, #0
   14304:	beq	14294 <__assert_fail@plt+0x3150>
   14308:	ldr	r3, [sp, #28]
   1430c:	mov	ip, r5
   14310:	eor	r2, r6, #1
   14314:	ldr	r5, [sp, #92]	; 0x5c
   14318:	ldr	r7, [sp, #96]	; 0x60
   1431c:	ldr	r4, [sp, #100]	; 0x64
   14320:	ldr	r8, [sp, #84]	; 0x54
   14324:	ldr	sl, [sp, #88]	; 0x58
   14328:	and	r2, r2, r3
   1432c:	cmp	ip, #1
   14330:	bls	13c30 <__assert_fail@plt+0x2aec>
   14334:	add	r1, ip, r9
   14338:	ldr	lr, [sp, #48]	; 0x30
   1433c:	mov	r0, #0
   14340:	str	r6, [sp, #48]	; 0x30
   14344:	mov	ip, #39	; 0x27
   14348:	ldr	r6, [sp, #44]	; 0x2c
   1434c:	b	14404 <__assert_fail@plt+0x32c0>
   14350:	ldr	r0, [sp, #32]
   14354:	sub	r3, fp, #2
   14358:	cmp	r0, #0
   1435c:	clz	r3, r3
   14360:	lsr	r3, r3, #5
   14364:	bne	1456c <__assert_fail@plt+0x3428>
   14368:	eor	r0, r6, #1
   1436c:	ands	r3, r3, r0
   14370:	beq	143a0 <__assert_fail@plt+0x325c>
   14374:	add	r0, r4, #1
   14378:	cmp	sl, r4
   1437c:	strbhi	ip, [r8, r4]
   14380:	cmp	sl, r0
   14384:	movhi	r6, #36	; 0x24
   14388:	strbhi	r6, [r8, r0]
   1438c:	add	r0, r4, #2
   14390:	mov	r6, r3
   14394:	add	r4, r4, #3
   14398:	cmp	sl, r0
   1439c:	strbhi	ip, [r8, r0]
   143a0:	cmp	sl, r4
   143a4:	movhi	r3, #92	; 0x5c
   143a8:	strbhi	r3, [r8, r4]
   143ac:	add	r3, r4, #1
   143b0:	cmp	sl, r3
   143b4:	lsrhi	r0, r5, #6
   143b8:	addhi	r0, r0, #48	; 0x30
   143bc:	strbhi	r0, [r8, r3]
   143c0:	add	r0, r4, #2
   143c4:	cmp	sl, r0
   143c8:	lsrhi	r3, r5, #3
   143cc:	andhi	r3, r3, #7
   143d0:	addhi	r3, r3, #48	; 0x30
   143d4:	add	r9, r9, #1
   143d8:	strbhi	r3, [r8, r0]
   143dc:	and	r5, r5, #7
   143e0:	cmp	r9, r1
   143e4:	add	r5, r5, #48	; 0x30
   143e8:	add	r4, r4, #3
   143ec:	bcs	1458c <__assert_fail@plt+0x3448>
   143f0:	mov	r0, r2
   143f4:	cmp	sl, r4
   143f8:	strbhi	r5, [r8, r4]
   143fc:	ldrb	r5, [lr, #1]!
   14400:	add	r4, r4, #1
   14404:	cmp	r2, #0
   14408:	bne	14350 <__assert_fail@plt+0x320c>
   1440c:	eor	r3, r0, #1
   14410:	and	r3, r3, r6
   14414:	cmp	r7, #0
   14418:	uxtb	r3, r3
   1441c:	beq	14430 <__assert_fail@plt+0x32ec>
   14420:	cmp	sl, r4
   14424:	movhi	r7, #92	; 0x5c
   14428:	strbhi	r7, [r8, r4]
   1442c:	add	r4, r4, #1
   14430:	add	r9, r9, #1
   14434:	cmp	r9, r1
   14438:	bcs	14580 <__assert_fail@plt+0x343c>
   1443c:	cmp	r3, #0
   14440:	beq	145ac <__assert_fail@plt+0x3468>
   14444:	cmp	sl, r4
   14448:	add	r3, r4, #1
   1444c:	strbhi	ip, [r8, r4]
   14450:	mov	r7, #0
   14454:	cmp	sl, r3
   14458:	strbhi	ip, [r8, r3]
   1445c:	add	r4, r4, #2
   14460:	mov	r6, r7
   14464:	b	143f4 <__assert_fail@plt+0x32b0>
   14468:	cmp	r8, #1
   1446c:	beq	142e4 <__assert_fail@plt+0x31a0>
   14470:	add	r1, r4, #1
   14474:	add	r3, sl, r8
   14478:	add	r1, sl, r1
   1447c:	add	r4, r3, r4
   14480:	ldrb	r3, [r1], #1
   14484:	sub	r3, r3, #91	; 0x5b
   14488:	cmp	r3, #33	; 0x21
   1448c:	ldrls	pc, [pc, r3, lsl #2]
   14490:	b	1451c <__assert_fail@plt+0x33d8>
   14494:	andeq	r4, r1, r8, lsr #10
   14498:	andeq	r4, r1, r8, lsr #10
   1449c:	andeq	r4, r1, ip, lsl r5
   144a0:	andeq	r4, r1, r8, lsr #10
   144a4:	andeq	r4, r1, ip, lsl r5
   144a8:	andeq	r4, r1, r8, lsr #10
   144ac:	andeq	r4, r1, ip, lsl r5
   144b0:	andeq	r4, r1, ip, lsl r5
   144b4:	andeq	r4, r1, ip, lsl r5
   144b8:	andeq	r4, r1, ip, lsl r5
   144bc:	andeq	r4, r1, ip, lsl r5
   144c0:	andeq	r4, r1, ip, lsl r5
   144c4:	andeq	r4, r1, ip, lsl r5
   144c8:	andeq	r4, r1, ip, lsl r5
   144cc:	andeq	r4, r1, ip, lsl r5
   144d0:	andeq	r4, r1, ip, lsl r5
   144d4:	andeq	r4, r1, ip, lsl r5
   144d8:	andeq	r4, r1, ip, lsl r5
   144dc:	andeq	r4, r1, ip, lsl r5
   144e0:	andeq	r4, r1, ip, lsl r5
   144e4:	andeq	r4, r1, ip, lsl r5
   144e8:	andeq	r4, r1, ip, lsl r5
   144ec:	andeq	r4, r1, ip, lsl r5
   144f0:	andeq	r4, r1, ip, lsl r5
   144f4:	andeq	r4, r1, ip, lsl r5
   144f8:	andeq	r4, r1, ip, lsl r5
   144fc:	andeq	r4, r1, ip, lsl r5
   14500:	andeq	r4, r1, ip, lsl r5
   14504:	andeq	r4, r1, ip, lsl r5
   14508:	andeq	r4, r1, ip, lsl r5
   1450c:	andeq	r4, r1, ip, lsl r5
   14510:	andeq	r4, r1, ip, lsl r5
   14514:	andeq	r4, r1, ip, lsl r5
   14518:	andeq	r4, r1, r8, lsr #10
   1451c:	cmp	r4, r1
   14520:	bne	14480 <__assert_fail@plt+0x333c>
   14524:	b	142e4 <__assert_fail@plt+0x31a0>
   14528:	ldr	fp, [sp, #84]	; 0x54
   1452c:	ldr	sl, [sp, #88]	; 0x58
   14530:	mov	r8, #2
   14534:	b	139f0 <__assert_fail@plt+0x28ac>
   14538:	cmp	sl, r4
   1453c:	movls	r1, r4
   14540:	bls	13b40 <__assert_fail@plt+0x29fc>
   14544:	ldr	r3, [sp, #44]	; 0x2c
   14548:	b	13b30 <__assert_fail@plt+0x29ec>
   1454c:	str	sl, [sp, #72]	; 0x48
   14550:	ldr	sl, [sp, #32]
   14554:	b	13968 <__assert_fail@plt+0x2824>
   14558:	add	r9, r9, #1
   1455c:	b	1325c <__assert_fail@plt+0x2118>
   14560:	ldr	r2, [sp, #28]
   14564:	mov	r6, #0
   14568:	b	14334 <__assert_fail@plt+0x31f0>
   1456c:	str	fp, [sp, #160]	; 0xa0
   14570:	str	r3, [sp, #28]
   14574:	mov	fp, r8
   14578:	ldr	r8, [sp, #160]	; 0xa0
   1457c:	b	139f0 <__assert_fail@plt+0x28ac>
   14580:	str	r6, [sp, #44]	; 0x2c
   14584:	ldr	r6, [sp, #48]	; 0x30
   14588:	b	13998 <__assert_fail@plt+0x2854>
   1458c:	str	r6, [sp, #44]	; 0x2c
   14590:	ldr	r6, [sp, #48]	; 0x30
   14594:	b	137a4 <__assert_fail@plt+0x2660>
   14598:	add	r4, r4, #4
   1459c:	str	r3, [sp, #44]	; 0x2c
   145a0:	mov	r6, #0
   145a4:	mov	r5, #48	; 0x30
   145a8:	b	1372c <__assert_fail@plt+0x25e8>
   145ac:	mov	r7, r3
   145b0:	b	143f4 <__assert_fail@plt+0x32b0>
   145b4:	ldr	r3, [pc, #-1624]	; 13f64 <__assert_fail@plt+0x2e20>
   145b8:	mov	r4, #1
   145bc:	str	r4, [sp, #40]	; 0x28
   145c0:	str	r4, [sp, #28]
   145c4:	str	r4, [sp, #52]	; 0x34
   145c8:	str	sl, [sp, #72]	; 0x48
   145cc:	str	sl, [sp, #68]	; 0x44
   145d0:	str	sl, [sp, #44]	; 0x2c
   145d4:	str	sl, [sp, #32]
   145d8:	str	r3, [sp, #60]	; 0x3c
   145dc:	b	1324c <__assert_fail@plt+0x2108>
   145e0:	mov	r3, r6
   145e4:	mov	r5, #48	; 0x30
   145e8:	mov	r6, #0
   145ec:	b	1372c <__assert_fail@plt+0x25e8>
   145f0:	cmp	sl, r4
   145f4:	movhi	r3, #48	; 0x30
   145f8:	strbhi	r3, [r8, r4]
   145fc:	add	r3, r1, #2
   14600:	cmp	sl, r3
   14604:	movhi	r0, #48	; 0x30
   14608:	strbhi	r0, [r8, r3]
   1460c:	add	r4, r1, #3
   14610:	mov	r5, #48	; 0x30
   14614:	b	13b74 <__assert_fail@plt+0x2a30>
   14618:	str	fp, [sp, #160]	; 0xa0
   1461c:	mov	fp, r8
   14620:	ldr	r8, [sp, #160]	; 0xa0
   14624:	b	139f0 <__assert_fail@plt+0x28ac>
   14628:	ldr	r2, [sp, #80]	; 0x50
   1462c:	ldrb	r3, [r2]
   14630:	cmp	r3, #0
   14634:	beq	1321c <__assert_fail@plt+0x20d8>
   14638:	cmp	sl, r4
   1463c:	strbhi	r3, [fp, r4]
   14640:	ldrb	r3, [r2, #1]!
   14644:	add	r4, r4, #1
   14648:	cmp	r3, #0
   1464c:	bne	14638 <__assert_fail@plt+0x34f4>
   14650:	b	1321c <__assert_fail@plt+0x20d8>
   14654:	str	fp, [sp, #160]	; 0xa0
   14658:	mov	r3, #0
   1465c:	mov	fp, r8
   14660:	ldr	r8, [sp, #160]	; 0xa0
   14664:	b	13a84 <__assert_fail@plt+0x2940>
   14668:	mov	ip, r5
   1466c:	ldr	r7, [sp, #96]	; 0x60
   14670:	ldr	r5, [sp, #92]	; 0x5c
   14674:	ldr	r4, [sp, #100]	; 0x64
   14678:	ldr	r8, [sp, #84]	; 0x54
   1467c:	ldr	sl, [sp, #88]	; 0x58
   14680:	ldr	r2, [sp, #28]
   14684:	mov	r6, #0
   14688:	b	1432c <__assert_fail@plt+0x31e8>
   1468c:	ldr	r2, [sp, #36]	; 0x24
   14690:	ldrb	r1, [r2, r3]
   14694:	sub	r2, r1, #33	; 0x21
   14698:	cmp	r2, #29
   1469c:	ldrls	pc, [pc, r2, lsl #2]
   146a0:	b	1477c <__assert_fail@plt+0x3638>
   146a4:	andeq	r4, r1, ip, lsl r7
   146a8:	andeq	r4, r1, ip, ror r7
   146ac:	andeq	r4, r1, ip, ror r7
   146b0:	andeq	r4, r1, ip, ror r7
   146b4:	andeq	r4, r1, ip, ror r7
   146b8:	andeq	r4, r1, ip, ror r7
   146bc:	andeq	r4, r1, ip, lsl r7
   146c0:	andeq	r4, r1, ip, lsl r7
   146c4:	andeq	r4, r1, ip, lsl r7
   146c8:	andeq	r4, r1, ip, ror r7
   146cc:	andeq	r4, r1, ip, ror r7
   146d0:	andeq	r4, r1, ip, ror r7
   146d4:	andeq	r4, r1, ip, lsl r7
   146d8:	andeq	r4, r1, ip, ror r7
   146dc:	andeq	r4, r1, ip, lsl r7
   146e0:	andeq	r4, r1, ip, ror r7
   146e4:	andeq	r4, r1, ip, ror r7
   146e8:	andeq	r4, r1, ip, ror r7
   146ec:	andeq	r4, r1, ip, ror r7
   146f0:	andeq	r4, r1, ip, ror r7
   146f4:	andeq	r4, r1, ip, ror r7
   146f8:	andeq	r4, r1, ip, ror r7
   146fc:	andeq	r4, r1, ip, ror r7
   14700:	andeq	r4, r1, ip, ror r7
   14704:	andeq	r4, r1, ip, ror r7
   14708:	andeq	r4, r1, ip, ror r7
   1470c:	andeq	r4, r1, ip, ror r7
   14710:	andeq	r4, r1, ip, lsl r7
   14714:	andeq	r4, r1, ip, lsl r7
   14718:	andeq	r4, r1, ip, lsl r7
   1471c:	ldr	r2, [sp, #32]
   14720:	cmp	r2, #0
   14724:	bne	14828 <__assert_fail@plt+0x36e4>
   14728:	cmp	sl, r4
   1472c:	movhi	r2, #63	; 0x3f
   14730:	strbhi	r2, [r8, r4]
   14734:	add	r2, r4, #1
   14738:	cmp	sl, r2
   1473c:	movhi	r0, #34	; 0x22
   14740:	strbhi	r0, [r8, r2]
   14744:	add	r2, r4, #2
   14748:	cmp	sl, r2
   1474c:	movhi	r0, #34	; 0x22
   14750:	strbhi	r0, [r8, r2]
   14754:	add	r2, r4, #3
   14758:	cmp	sl, r2
   1475c:	movhi	r0, #63	; 0x3f
   14760:	strbhi	r0, [r8, r2]
   14764:	mov	r2, #0
   14768:	add	r4, r4, #4
   1476c:	mov	r5, r1
   14770:	mov	r9, r3
   14774:	mov	r6, r2
   14778:	b	13b74 <__assert_fail@plt+0x2a30>
   1477c:	mov	r2, #0
   14780:	mov	r6, r2
   14784:	b	136e4 <__assert_fail@plt+0x25a0>
   14788:	ldr	r0, [sp, #24]
   1478c:	mov	r1, r4
   14790:	cmp	r1, r0
   14794:	mov	r2, r7
   14798:	mov	r3, r5
   1479c:	mov	ip, r5
   147a0:	ldr	r7, [sp, #96]	; 0x60
   147a4:	ldr	r5, [sp, #92]	; 0x5c
   147a8:	ldr	r4, [sp, #100]	; 0x64
   147ac:	ldr	r8, [sp, #84]	; 0x54
   147b0:	ldr	sl, [sp, #88]	; 0x58
   147b4:	bcs	147e8 <__assert_fail@plt+0x36a4>
   147b8:	ldrb	r6, [r2]
   147bc:	cmp	r6, #0
   147c0:	bne	147d4 <__assert_fail@plt+0x3690>
   147c4:	b	14904 <__assert_fail@plt+0x37c0>
   147c8:	ldrb	r6, [r2, #1]!
   147cc:	cmp	r6, #0
   147d0:	beq	1488c <__assert_fail@plt+0x3748>
   147d4:	add	r3, r3, #1
   147d8:	add	r1, r9, r3
   147dc:	cmp	r1, r0
   147e0:	bcc	147c8 <__assert_fail@plt+0x3684>
   147e4:	mov	ip, r3
   147e8:	ldr	r2, [sp, #28]
   147ec:	mov	r6, #0
   147f0:	b	1432c <__assert_fail@plt+0x31e8>
   147f4:	mov	r3, #1
   147f8:	str	r3, [sp, #40]	; 0x28
   147fc:	str	r3, [sp, #32]
   14800:	str	r3, [sp, #28]
   14804:	str	r3, [sp, #52]	; 0x34
   14808:	ldr	r3, [pc, #-2220]	; 13f64 <__assert_fail@plt+0x2e20>
   1480c:	mov	r2, #0
   14810:	str	r2, [sp, #68]	; 0x44
   14814:	str	r2, [sp, #44]	; 0x2c
   14818:	str	r2, [sp, #72]	; 0x48
   1481c:	mov	r4, r2
   14820:	str	r3, [sp, #60]	; 0x3c
   14824:	b	1324c <__assert_fail@plt+0x2108>
   14828:	str	fp, [sp, #160]	; 0xa0
   1482c:	mov	fp, r8
   14830:	ldr	r8, [sp, #160]	; 0xa0
   14834:	b	139fc <__assert_fail@plt+0x28b8>
   14838:	mov	r2, r3
   1483c:	ldr	r3, [sp, #60]	; 0x3c
   14840:	cmp	r3, #0
   14844:	moveq	r2, #0
   14848:	andne	r2, r2, #1
   1484c:	cmp	r2, #0
   14850:	beq	1487c <__assert_fail@plt+0x3738>
   14854:	mov	r2, r3
   14858:	ldrb	r3, [r3]
   1485c:	cmp	r3, #0
   14860:	beq	1487c <__assert_fail@plt+0x3738>
   14864:	cmp	sl, r4
   14868:	strbhi	r3, [fp, r4]
   1486c:	ldrb	r3, [r2, #1]!
   14870:	add	r4, r4, #1
   14874:	cmp	r3, #0
   14878:	bne	14864 <__assert_fail@plt+0x3720>
   1487c:	cmp	sl, r4
   14880:	movhi	r3, #0
   14884:	strbhi	r3, [fp, r4]
   14888:	b	13a3c <__assert_fail@plt+0x28f8>
   1488c:	mov	ip, r3
   14890:	ldr	r2, [sp, #28]
   14894:	b	1432c <__assert_fail@plt+0x31e8>
   14898:	str	fp, [sp, #160]	; 0xa0
   1489c:	mov	fp, r8
   148a0:	ldr	r8, [sp, #160]	; 0xa0
   148a4:	sub	r3, r8, #2
   148a8:	clz	r3, r3
   148ac:	lsr	r3, r3, #5
   148b0:	str	r3, [sp, #28]
   148b4:	b	139f0 <__assert_fail@plt+0x28ac>
   148b8:	ldr	r3, [sp, #76]	; 0x4c
   148bc:	mov	ip, #5
   148c0:	str	r3, [sp, #16]
   148c4:	ldr	r3, [sp, #80]	; 0x50
   148c8:	ldr	r2, [sp, #36]	; 0x24
   148cc:	str	r3, [sp, #12]
   148d0:	ldr	r3, [sp, #56]	; 0x38
   148d4:	ldr	r1, [sp, #72]	; 0x48
   148d8:	str	r3, [sp, #8]
   148dc:	ldr	r3, [sp, #164]	; 0xa4
   148e0:	mov	r0, fp
   148e4:	str	r3, [sp, #4]
   148e8:	str	ip, [sp]
   148ec:	ldr	r3, [sp, #24]
   148f0:	bl	13154 <__assert_fail@plt+0x2010>
   148f4:	mov	r4, r0
   148f8:	b	13a3c <__assert_fail@plt+0x28f8>
   148fc:	mov	r8, #2
   14900:	b	139f0 <__assert_fail@plt+0x28ac>
   14904:	ldr	r2, [sp, #28]
   14908:	b	1432c <__assert_fail@plt+0x31e8>
   1490c:	mov	r3, #0
   14910:	str	r3, [sp, #68]	; 0x44
   14914:	str	r3, [sp, #44]	; 0x2c
   14918:	str	r3, [sp, #72]	; 0x48
   1491c:	str	r3, [sp, #28]
   14920:	mov	r4, r3
   14924:	ldr	r3, [pc, #-2500]	; 13f68 <__assert_fail@plt+0x2e24>
   14928:	mov	r2, #1
   1492c:	str	r2, [sp, #40]	; 0x28
   14930:	str	r2, [sp, #32]
   14934:	str	r2, [sp, #52]	; 0x34
   14938:	str	r3, [sp, #60]	; 0x3c
   1493c:	b	1324c <__assert_fail@plt+0x2108>
   14940:	bl	10f4c <__stack_chk_fail@plt>
   14944:	mov	r5, r3
   14948:	mov	r6, #0
   1494c:	b	13740 <__assert_fail@plt+0x25fc>
   14950:	mov	r3, #0
   14954:	mov	r2, #1
   14958:	str	r3, [sp, #44]	; 0x2c
   1495c:	str	r3, [sp, #72]	; 0x48
   14960:	str	r2, [sp, #40]	; 0x28
   14964:	b	1385c <__assert_fail@plt+0x2718>
   14968:	bl	1112c <abort@plt>
   1496c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14970:	sub	sp, sp, #44	; 0x2c
   14974:	mov	r6, r0
   14978:	mov	r4, r3
   1497c:	mov	sl, r1
   14980:	mov	fp, r2
   14984:	bl	11030 <__errno_location@plt>
   14988:	ldr	r7, [pc, #364]	; 14afc <__assert_fail@plt+0x39b8>
   1498c:	cmp	r6, #0
   14990:	ldr	r5, [r7]
   14994:	ldr	r3, [r0]
   14998:	str	r3, [sp, #24]
   1499c:	blt	14af8 <__assert_fail@plt+0x39b4>
   149a0:	ldr	r3, [r7, #4]
   149a4:	mov	r8, r0
   149a8:	cmp	r3, r6
   149ac:	bgt	149f8 <__assert_fail@plt+0x38b4>
   149b0:	cmn	r6, #-268435454	; 0xf0000002
   149b4:	bgt	14af4 <__assert_fail@plt+0x39b0>
   149b8:	add	r9, r6, #1
   149bc:	add	r3, r7, #8
   149c0:	cmp	r5, r3
   149c4:	lsl	r1, r9, #3
   149c8:	beq	14ad4 <__assert_fail@plt+0x3990>
   149cc:	mov	r0, r5
   149d0:	bl	15760 <__assert_fail@plt+0x461c>
   149d4:	mov	r5, r0
   149d8:	str	r0, [r7]
   149dc:	ldr	r0, [r7, #4]
   149e0:	mov	r1, #0
   149e4:	sub	r2, r9, r0
   149e8:	add	r0, r5, r0, lsl #3
   149ec:	lsl	r2, r2, #3
   149f0:	bl	11048 <memset@plt>
   149f4:	str	r9, [r7, #4]
   149f8:	add	r3, r5, r6, lsl #3
   149fc:	ldr	r1, [r4, #4]
   14a00:	ldr	r7, [r3, #4]
   14a04:	ldr	r9, [r5, r6, lsl #3]
   14a08:	ldr	r2, [r4, #40]	; 0x28
   14a0c:	ldr	ip, [r4, #44]	; 0x2c
   14a10:	str	r3, [sp, #28]
   14a14:	ldr	r3, [r4]
   14a18:	orr	r1, r1, #1
   14a1c:	add	lr, r4, #8
   14a20:	str	r1, [sp, #36]	; 0x24
   14a24:	str	r1, [sp, #4]
   14a28:	str	r2, [sp, #12]
   14a2c:	str	r3, [sp]
   14a30:	mov	r0, r7
   14a34:	mov	r1, r9
   14a38:	str	ip, [sp, #16]
   14a3c:	str	lr, [sp, #8]
   14a40:	mov	r3, fp
   14a44:	mov	r2, sl
   14a48:	str	lr, [sp, #32]
   14a4c:	bl	13154 <__assert_fail@plt+0x2010>
   14a50:	cmp	r9, r0
   14a54:	bhi	14ac0 <__assert_fail@plt+0x397c>
   14a58:	ldr	r3, [pc, #160]	; 14b00 <__assert_fail@plt+0x39bc>
   14a5c:	add	r9, r0, #1
   14a60:	cmp	r7, r3
   14a64:	str	r9, [r5, r6, lsl #3]
   14a68:	beq	14a74 <__assert_fail@plt+0x3930>
   14a6c:	mov	r0, r7
   14a70:	bl	10ee0 <free@plt>
   14a74:	mov	r0, r9
   14a78:	bl	15704 <__assert_fail@plt+0x45c0>
   14a7c:	ldr	lr, [sp, #28]
   14a80:	ldr	ip, [r4, #44]	; 0x2c
   14a84:	ldr	r5, [r4, #40]	; 0x28
   14a88:	mov	r3, fp
   14a8c:	mov	r2, sl
   14a90:	mov	r1, r9
   14a94:	str	r0, [lr, #4]
   14a98:	ldr	lr, [r4]
   14a9c:	ldr	r4, [sp, #32]
   14aa0:	str	ip, [sp, #16]
   14aa4:	str	r4, [sp, #8]
   14aa8:	ldr	r4, [sp, #36]	; 0x24
   14aac:	str	r5, [sp, #12]
   14ab0:	str	r4, [sp, #4]
   14ab4:	str	lr, [sp]
   14ab8:	mov	r7, r0
   14abc:	bl	13154 <__assert_fail@plt+0x2010>
   14ac0:	ldr	r3, [sp, #24]
   14ac4:	mov	r0, r7
   14ac8:	str	r3, [r8]
   14acc:	add	sp, sp, #44	; 0x2c
   14ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ad4:	mov	r0, #0
   14ad8:	bl	15760 <__assert_fail@plt+0x461c>
   14adc:	ldr	r3, [pc, #32]	; 14b04 <__assert_fail@plt+0x39c0>
   14ae0:	mov	r5, r0
   14ae4:	ldm	r3, {r0, r1}
   14ae8:	str	r5, [r7]
   14aec:	stm	r5, {r0, r1}
   14af0:	b	149dc <__assert_fail@plt+0x3898>
   14af4:	bl	1594c <__assert_fail@plt+0x4808>
   14af8:	bl	1112c <abort@plt>
   14afc:	andeq	r8, r2, r0, lsl r1
   14b00:			; <UNDEFINED> instruction: 0x000281b8
   14b04:	andeq	r8, r2, r8, lsl r1
   14b08:	push	{r4, r5, r6, lr}
   14b0c:	mov	r5, r0
   14b10:	bl	11030 <__errno_location@plt>
   14b14:	cmp	r5, #0
   14b18:	mov	r1, #48	; 0x30
   14b1c:	mov	r4, r0
   14b20:	ldr	r0, [pc, #16]	; 14b38 <__assert_fail@plt+0x39f4>
   14b24:	ldr	r6, [r4]
   14b28:	movne	r0, r5
   14b2c:	bl	1590c <__assert_fail@plt+0x47c8>
   14b30:	str	r6, [r4]
   14b34:	pop	{r4, r5, r6, pc}
   14b38:			; <UNDEFINED> instruction: 0x000282b8
   14b3c:	ldr	r3, [pc, #12]	; 14b50 <__assert_fail@plt+0x3a0c>
   14b40:	cmp	r0, #0
   14b44:	moveq	r0, r3
   14b48:	ldr	r0, [r0]
   14b4c:	bx	lr
   14b50:			; <UNDEFINED> instruction: 0x000282b8
   14b54:	ldr	r3, [pc, #12]	; 14b68 <__assert_fail@plt+0x3a24>
   14b58:	cmp	r0, #0
   14b5c:	moveq	r0, r3
   14b60:	str	r1, [r0]
   14b64:	bx	lr
   14b68:			; <UNDEFINED> instruction: 0x000282b8
   14b6c:	ldr	r3, [pc, #52]	; 14ba8 <__assert_fail@plt+0x3a64>
   14b70:	cmp	r0, #0
   14b74:	moveq	r0, r3
   14b78:	add	r3, r0, #8
   14b7c:	push	{lr}		; (str lr, [sp, #-4]!)
   14b80:	lsr	lr, r1, #5
   14b84:	and	r1, r1, #31
   14b88:	ldr	ip, [r3, lr, lsl #2]
   14b8c:	lsr	r0, ip, r1
   14b90:	eor	r2, r2, r0
   14b94:	and	r2, r2, #1
   14b98:	and	r0, r0, #1
   14b9c:	eor	r1, ip, r2, lsl r1
   14ba0:	str	r1, [r3, lr, lsl #2]
   14ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ba8:			; <UNDEFINED> instruction: 0x000282b8
   14bac:	ldr	r3, [pc, #16]	; 14bc4 <__assert_fail@plt+0x3a80>
   14bb0:	cmp	r0, #0
   14bb4:	movne	r3, r0
   14bb8:	ldr	r0, [r3, #4]
   14bbc:	str	r1, [r3, #4]
   14bc0:	bx	lr
   14bc4:			; <UNDEFINED> instruction: 0x000282b8
   14bc8:	ldr	r3, [pc, #44]	; 14bfc <__assert_fail@plt+0x3ab8>
   14bcc:	cmp	r0, #0
   14bd0:	moveq	r0, r3
   14bd4:	mov	ip, #10
   14bd8:	cmp	r2, #0
   14bdc:	cmpne	r1, #0
   14be0:	str	ip, [r0]
   14be4:	beq	14bf4 <__assert_fail@plt+0x3ab0>
   14be8:	str	r1, [r0, #40]	; 0x28
   14bec:	str	r2, [r0, #44]	; 0x2c
   14bf0:	bx	lr
   14bf4:	push	{r4, lr}
   14bf8:	bl	1112c <abort@plt>
   14bfc:			; <UNDEFINED> instruction: 0x000282b8
   14c00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c04:	sub	sp, sp, #24
   14c08:	ldr	ip, [pc, #108]	; 14c7c <__assert_fail@plt+0x3b38>
   14c0c:	ldr	r4, [sp, #56]	; 0x38
   14c10:	mov	r9, r2
   14c14:	cmp	r4, #0
   14c18:	moveq	r4, ip
   14c1c:	mov	sl, r3
   14c20:	mov	r7, r0
   14c24:	mov	r8, r1
   14c28:	bl	11030 <__errno_location@plt>
   14c2c:	ldr	r3, [r4, #44]	; 0x2c
   14c30:	mov	r1, r8
   14c34:	ldr	r6, [r0]
   14c38:	str	r3, [sp, #16]
   14c3c:	ldr	r2, [r4, #40]	; 0x28
   14c40:	add	r3, r4, #8
   14c44:	str	r3, [sp, #8]
   14c48:	str	r2, [sp, #12]
   14c4c:	ldr	r2, [r4, #4]
   14c50:	mov	r5, r0
   14c54:	str	r2, [sp, #4]
   14c58:	ldr	ip, [r4]
   14c5c:	mov	r3, sl
   14c60:	mov	r2, r9
   14c64:	mov	r0, r7
   14c68:	str	ip, [sp]
   14c6c:	bl	13154 <__assert_fail@plt+0x2010>
   14c70:	str	r6, [r5]
   14c74:	add	sp, sp, #24
   14c78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c7c:			; <UNDEFINED> instruction: 0x000282b8
   14c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c84:	cmp	r3, #0
   14c88:	sub	sp, sp, #44	; 0x2c
   14c8c:	ldr	r4, [pc, #192]	; 14d54 <__assert_fail@plt+0x3c10>
   14c90:	mov	r6, r2
   14c94:	movne	r4, r3
   14c98:	mov	r9, r1
   14c9c:	mov	r8, r0
   14ca0:	bl	11030 <__errno_location@plt>
   14ca4:	ldr	r3, [r4, #44]	; 0x2c
   14ca8:	ldr	r5, [r4, #4]
   14cac:	add	sl, r4, #8
   14cb0:	cmp	r6, #0
   14cb4:	orreq	r5, r5, #1
   14cb8:	mov	r1, #0
   14cbc:	ldr	r2, [r0]
   14cc0:	str	r3, [sp, #16]
   14cc4:	ldr	r3, [r4, #40]	; 0x28
   14cc8:	stmib	sp, {r5, sl}
   14ccc:	str	r3, [sp, #12]
   14cd0:	ldr	r3, [r4]
   14cd4:	mov	r7, r0
   14cd8:	str	r2, [sp, #28]
   14cdc:	str	r3, [sp]
   14ce0:	mov	r2, r8
   14ce4:	mov	r3, r9
   14ce8:	mov	r0, r1
   14cec:	bl	13154 <__assert_fail@plt+0x2010>
   14cf0:	add	r1, r0, #1
   14cf4:	mov	fp, r0
   14cf8:	mov	r0, r1
   14cfc:	str	r1, [sp, #36]	; 0x24
   14d00:	bl	15704 <__assert_fail@plt+0x45c0>
   14d04:	ldr	r3, [r4, #44]	; 0x2c
   14d08:	mov	r2, r8
   14d0c:	str	r3, [sp, #16]
   14d10:	ldr	r3, [r4, #40]	; 0x28
   14d14:	str	r5, [sp, #4]
   14d18:	str	r3, [sp, #12]
   14d1c:	str	sl, [sp, #8]
   14d20:	ldr	ip, [r4]
   14d24:	ldr	r1, [sp, #36]	; 0x24
   14d28:	mov	r3, r9
   14d2c:	str	ip, [sp]
   14d30:	str	r0, [sp, #32]
   14d34:	bl	13154 <__assert_fail@plt+0x2010>
   14d38:	ldr	r2, [sp, #28]
   14d3c:	cmp	r6, #0
   14d40:	str	r2, [r7]
   14d44:	ldr	r0, [sp, #32]
   14d48:	strne	fp, [r6]
   14d4c:	add	sp, sp, #44	; 0x2c
   14d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d54:			; <UNDEFINED> instruction: 0x000282b8
   14d58:	mov	r3, r2
   14d5c:	mov	r2, #0
   14d60:	b	14c80 <__assert_fail@plt+0x3b3c>
   14d64:	push	{r4, r5, r6, r7, r8, lr}
   14d68:	ldr	r6, [pc, #112]	; 14de0 <__assert_fail@plt+0x3c9c>
   14d6c:	ldr	r3, [r6, #4]
   14d70:	ldr	r7, [r6]
   14d74:	cmp	r3, #1
   14d78:	ble	14d9c <__assert_fail@plt+0x3c58>
   14d7c:	sub	r5, r7, #8
   14d80:	add	r5, r5, r3, lsl #3
   14d84:	mov	r4, r7
   14d88:	ldr	r0, [r4, #12]
   14d8c:	add	r4, r4, #8
   14d90:	bl	10ee0 <free@plt>
   14d94:	cmp	r4, r5
   14d98:	bne	14d88 <__assert_fail@plt+0x3c44>
   14d9c:	ldr	r0, [r7, #4]
   14da0:	ldr	r4, [pc, #60]	; 14de4 <__assert_fail@plt+0x3ca0>
   14da4:	cmp	r0, r4
   14da8:	beq	14dbc <__assert_fail@plt+0x3c78>
   14dac:	bl	10ee0 <free@plt>
   14db0:	mov	r3, #256	; 0x100
   14db4:	str	r4, [r6, #12]
   14db8:	str	r3, [r6, #8]
   14dbc:	ldr	r4, [pc, #36]	; 14de8 <__assert_fail@plt+0x3ca4>
   14dc0:	cmp	r7, r4
   14dc4:	beq	14dd4 <__assert_fail@plt+0x3c90>
   14dc8:	mov	r0, r7
   14dcc:	bl	10ee0 <free@plt>
   14dd0:	str	r4, [r6]
   14dd4:	mov	r3, #1
   14dd8:	str	r3, [r6, #4]
   14ddc:	pop	{r4, r5, r6, r7, r8, pc}
   14de0:	andeq	r8, r2, r0, lsl r1
   14de4:			; <UNDEFINED> instruction: 0x000281b8
   14de8:	andeq	r8, r2, r8, lsl r1
   14dec:	ldr	r3, [pc, #4]	; 14df8 <__assert_fail@plt+0x3cb4>
   14df0:	mvn	r2, #0
   14df4:	b	1496c <__assert_fail@plt+0x3828>
   14df8:			; <UNDEFINED> instruction: 0x000282b8
   14dfc:	ldr	r3, [pc]	; 14e04 <__assert_fail@plt+0x3cc0>
   14e00:	b	1496c <__assert_fail@plt+0x3828>
   14e04:			; <UNDEFINED> instruction: 0x000282b8
   14e08:	mov	r1, r0
   14e0c:	ldr	r3, [pc, #8]	; 14e1c <__assert_fail@plt+0x3cd8>
   14e10:	mvn	r2, #0
   14e14:	mov	r0, #0
   14e18:	b	1496c <__assert_fail@plt+0x3828>
   14e1c:			; <UNDEFINED> instruction: 0x000282b8
   14e20:	mov	r2, r1
   14e24:	ldr	r3, [pc, #8]	; 14e34 <__assert_fail@plt+0x3cf0>
   14e28:	mov	r1, r0
   14e2c:	mov	r0, #0
   14e30:	b	1496c <__assert_fail@plt+0x3828>
   14e34:			; <UNDEFINED> instruction: 0x000282b8
   14e38:	push	{r4, r5, r6, lr}
   14e3c:	sub	sp, sp, #56	; 0x38
   14e40:	ldr	r4, [pc, #68]	; 14e8c <__assert_fail@plt+0x3d48>
   14e44:	mov	r6, r2
   14e48:	mov	r5, r0
   14e4c:	ldr	r3, [r4]
   14e50:	add	r0, sp, #4
   14e54:	str	r3, [sp, #52]	; 0x34
   14e58:	bl	12fe4 <__assert_fail@plt+0x1ea0>
   14e5c:	add	r3, sp, #4
   14e60:	mvn	r2, #0
   14e64:	mov	r1, r6
   14e68:	mov	r0, r5
   14e6c:	bl	1496c <__assert_fail@plt+0x3828>
   14e70:	ldr	r2, [sp, #52]	; 0x34
   14e74:	ldr	r3, [r4]
   14e78:	cmp	r2, r3
   14e7c:	bne	14e88 <__assert_fail@plt+0x3d44>
   14e80:	add	sp, sp, #56	; 0x38
   14e84:	pop	{r4, r5, r6, pc}
   14e88:	bl	10f4c <__stack_chk_fail@plt>
   14e8c:	andeq	r7, r2, r8, lsl #30
   14e90:	push	{r4, r5, r6, r7, lr}
   14e94:	sub	sp, sp, #60	; 0x3c
   14e98:	ldr	r4, [pc, #72]	; 14ee8 <__assert_fail@plt+0x3da4>
   14e9c:	mov	r6, r2
   14ea0:	mov	r7, r3
   14ea4:	ldr	ip, [r4]
   14ea8:	mov	r5, r0
   14eac:	add	r0, sp, #4
   14eb0:	str	ip, [sp, #52]	; 0x34
   14eb4:	bl	12fe4 <__assert_fail@plt+0x1ea0>
   14eb8:	add	r3, sp, #4
   14ebc:	mov	r2, r7
   14ec0:	mov	r1, r6
   14ec4:	mov	r0, r5
   14ec8:	bl	1496c <__assert_fail@plt+0x3828>
   14ecc:	ldr	r2, [sp, #52]	; 0x34
   14ed0:	ldr	r3, [r4]
   14ed4:	cmp	r2, r3
   14ed8:	bne	14ee4 <__assert_fail@plt+0x3da0>
   14edc:	add	sp, sp, #60	; 0x3c
   14ee0:	pop	{r4, r5, r6, r7, pc}
   14ee4:	bl	10f4c <__stack_chk_fail@plt>
   14ee8:	andeq	r7, r2, r8, lsl #30
   14eec:	mov	r2, r1
   14ef0:	mov	r1, r0
   14ef4:	mov	r0, #0
   14ef8:	b	14e38 <__assert_fail@plt+0x3cf4>
   14efc:	mov	r3, r2
   14f00:	mov	r2, r1
   14f04:	mov	r1, r0
   14f08:	mov	r0, #0
   14f0c:	b	14e90 <__assert_fail@plt+0x3d4c>
   14f10:	push	{r4, r5, r6, r7, r8, r9, lr}
   14f14:	mov	r4, r2
   14f18:	ldr	lr, [pc, #128]	; 14fa0 <__assert_fail@plt+0x3e5c>
   14f1c:	mov	r8, r0
   14f20:	mov	r9, r1
   14f24:	ldm	lr!, {r0, r1, r2, r3}
   14f28:	sub	sp, sp, #60	; 0x3c
   14f2c:	add	ip, sp, #4
   14f30:	lsr	r6, r4, #5
   14f34:	stmia	ip!, {r0, r1, r2, r3}
   14f38:	add	r7, sp, #12
   14f3c:	ldm	lr!, {r0, r1, r2, r3}
   14f40:	and	r4, r4, #31
   14f44:	ldr	r5, [pc, #88]	; 14fa4 <__assert_fail@plt+0x3e60>
   14f48:	stmia	ip!, {r0, r1, r2, r3}
   14f4c:	ldm	lr, {r0, r1, r2, r3}
   14f50:	stm	ip, {r0, r1, r2, r3}
   14f54:	mov	r2, r9
   14f58:	ldr	r3, [r7, r6, lsl #2]
   14f5c:	ldr	ip, [r5]
   14f60:	mov	r1, r8
   14f64:	mvn	r0, r3, lsr r4
   14f68:	and	r0, r0, #1
   14f6c:	str	ip, [sp, #52]	; 0x34
   14f70:	eor	r4, r3, r0, lsl r4
   14f74:	add	r3, sp, #4
   14f78:	mov	r0, #0
   14f7c:	str	r4, [r7, r6, lsl #2]
   14f80:	bl	1496c <__assert_fail@plt+0x3828>
   14f84:	ldr	r2, [sp, #52]	; 0x34
   14f88:	ldr	r3, [r5]
   14f8c:	cmp	r2, r3
   14f90:	bne	14f9c <__assert_fail@plt+0x3e58>
   14f94:	add	sp, sp, #60	; 0x3c
   14f98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14f9c:	bl	10f4c <__stack_chk_fail@plt>
   14fa0:			; <UNDEFINED> instruction: 0x000282b8
   14fa4:	andeq	r7, r2, r8, lsl #30
   14fa8:	mov	r2, r1
   14fac:	mvn	r1, #0
   14fb0:	b	14f10 <__assert_fail@plt+0x3dcc>
   14fb4:	mov	r2, #58	; 0x3a
   14fb8:	mvn	r1, #0
   14fbc:	b	14f10 <__assert_fail@plt+0x3dcc>
   14fc0:	mov	r2, #58	; 0x3a
   14fc4:	b	14f10 <__assert_fail@plt+0x3dcc>
   14fc8:	push	{r4, r5, r6, r7, r8, lr}
   14fcc:	sub	sp, sp, #104	; 0x68
   14fd0:	ldr	r5, [pc, #120]	; 15050 <__assert_fail@plt+0x3f0c>
   14fd4:	mov	r6, r0
   14fd8:	mov	r0, sp
   14fdc:	ldr	r3, [r5]
   14fe0:	mov	r7, r2
   14fe4:	str	r3, [sp, #100]	; 0x64
   14fe8:	bl	12fe4 <__assert_fail@plt+0x1ea0>
   14fec:	mov	ip, sp
   14ff0:	add	lr, sp, #52	; 0x34
   14ff4:	ldm	ip!, {r0, r1, r2, r3}
   14ff8:	stmia	lr!, {r0, r1, r2, r3}
   14ffc:	ldm	ip!, {r0, r1, r2, r3}
   15000:	ldr	r8, [sp, #64]	; 0x40
   15004:	stmia	lr!, {r0, r1, r2, r3}
   15008:	mvn	r4, r8
   1500c:	ldm	ip, {r0, r1, r2, r3}
   15010:	and	ip, r4, #67108864	; 0x4000000
   15014:	eor	ip, ip, r8
   15018:	str	ip, [sp, #64]	; 0x40
   1501c:	stm	lr, {r0, r1, r2, r3}
   15020:	add	r3, sp, #52	; 0x34
   15024:	mvn	r2, #0
   15028:	mov	r1, r7
   1502c:	mov	r0, r6
   15030:	bl	1496c <__assert_fail@plt+0x3828>
   15034:	ldr	r2, [sp, #100]	; 0x64
   15038:	ldr	r3, [r5]
   1503c:	cmp	r2, r3
   15040:	bne	1504c <__assert_fail@plt+0x3f08>
   15044:	add	sp, sp, #104	; 0x68
   15048:	pop	{r4, r5, r6, r7, r8, pc}
   1504c:	bl	10f4c <__stack_chk_fail@plt>
   15050:	andeq	r7, r2, r8, lsl #30
   15054:	push	{r4, r5, r6, r7, r8, r9, lr}
   15058:	mov	r6, r1
   1505c:	ldr	lr, [pc, #132]	; 150e8 <__assert_fail@plt+0x3fa4>
   15060:	mov	r5, r2
   15064:	mov	r8, r0
   15068:	mov	r9, r3
   1506c:	ldm	lr!, {r0, r1, r2, r3}
   15070:	sub	sp, sp, #60	; 0x3c
   15074:	add	ip, sp, #4
   15078:	ldr	r4, [pc, #108]	; 150ec <__assert_fail@plt+0x3fa8>
   1507c:	stmia	ip!, {r0, r1, r2, r3}
   15080:	mov	r7, #10
   15084:	ldm	lr!, {r0, r1, r2, r3}
   15088:	cmp	r5, #0
   1508c:	cmpne	r6, #0
   15090:	str	r7, [sp, #4]
   15094:	stmia	ip!, {r0, r1, r2, r3}
   15098:	ldm	lr, {r0, r1, r2, r3}
   1509c:	ldr	lr, [r4]
   150a0:	stm	ip, {r0, r1, r2, r3}
   150a4:	str	lr, [sp, #52]	; 0x34
   150a8:	beq	150e4 <__assert_fail@plt+0x3fa0>
   150ac:	add	r3, sp, #4
   150b0:	ldr	r2, [sp, #88]	; 0x58
   150b4:	mov	r1, r9
   150b8:	mov	r0, r8
   150bc:	str	r6, [sp, #44]	; 0x2c
   150c0:	str	r5, [sp, #48]	; 0x30
   150c4:	bl	1496c <__assert_fail@plt+0x3828>
   150c8:	ldr	r2, [sp, #52]	; 0x34
   150cc:	ldr	r3, [r4]
   150d0:	cmp	r2, r3
   150d4:	bne	150e0 <__assert_fail@plt+0x3f9c>
   150d8:	add	sp, sp, #60	; 0x3c
   150dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   150e0:	bl	10f4c <__stack_chk_fail@plt>
   150e4:	bl	1112c <abort@plt>
   150e8:			; <UNDEFINED> instruction: 0x000282b8
   150ec:	andeq	r7, r2, r8, lsl #30
   150f0:	push	{lr}		; (str lr, [sp, #-4]!)
   150f4:	sub	sp, sp, #12
   150f8:	mvn	ip, #0
   150fc:	str	ip, [sp]
   15100:	bl	15054 <__assert_fail@plt+0x3f10>
   15104:	add	sp, sp, #12
   15108:	pop	{pc}		; (ldr pc, [sp], #4)
   1510c:	push	{lr}		; (str lr, [sp, #-4]!)
   15110:	sub	sp, sp, #12
   15114:	mvn	ip, #0
   15118:	mov	r3, r2
   1511c:	str	ip, [sp]
   15120:	mov	r2, r1
   15124:	mov	r1, r0
   15128:	mov	r0, #0
   1512c:	bl	15054 <__assert_fail@plt+0x3f10>
   15130:	add	sp, sp, #12
   15134:	pop	{pc}		; (ldr pc, [sp], #4)
   15138:	push	{lr}		; (str lr, [sp, #-4]!)
   1513c:	sub	sp, sp, #12
   15140:	str	r3, [sp]
   15144:	mov	r3, r2
   15148:	mov	r2, r1
   1514c:	mov	r1, r0
   15150:	mov	r0, #0
   15154:	bl	15054 <__assert_fail@plt+0x3f10>
   15158:	add	sp, sp, #12
   1515c:	pop	{pc}		; (ldr pc, [sp], #4)
   15160:	ldr	r3, [pc]	; 15168 <__assert_fail@plt+0x4024>
   15164:	b	1496c <__assert_fail@plt+0x3828>
   15168:	andeq	r8, r2, r0, lsr #2
   1516c:	mov	r2, r1
   15170:	ldr	r3, [pc, #8]	; 15180 <__assert_fail@plt+0x403c>
   15174:	mov	r1, r0
   15178:	mov	r0, #0
   1517c:	b	1496c <__assert_fail@plt+0x3828>
   15180:	andeq	r8, r2, r0, lsr #2
   15184:	ldr	r3, [pc, #4]	; 15190 <__assert_fail@plt+0x404c>
   15188:	mvn	r2, #0
   1518c:	b	1496c <__assert_fail@plt+0x3828>
   15190:	andeq	r8, r2, r0, lsr #2
   15194:	mov	r1, r0
   15198:	ldr	r3, [pc, #8]	; 151a8 <__assert_fail@plt+0x4064>
   1519c:	mvn	r2, #0
   151a0:	mov	r0, #0
   151a4:	b	1496c <__assert_fail@plt+0x3828>
   151a8:	andeq	r8, r2, r0, lsr #2
   151ac:	push	{r4, r5, r6, lr}
   151b0:	sub	sp, sp, #32
   151b4:	cmp	r1, #0
   151b8:	mov	r5, r0
   151bc:	ldr	r4, [sp, #48]	; 0x30
   151c0:	ldr	r6, [sp, #52]	; 0x34
   151c4:	beq	15254 <__assert_fail@plt+0x4110>
   151c8:	strd	r2, [sp]
   151cc:	mov	r3, r1
   151d0:	ldr	r2, [pc, #828]	; 15514 <__assert_fail@plt+0x43d0>
   151d4:	mov	r1, #1
   151d8:	bl	11078 <__fprintf_chk@plt>
   151dc:	mov	r2, #5
   151e0:	ldr	r1, [pc, #816]	; 15518 <__assert_fail@plt+0x43d4>
   151e4:	mov	r0, #0
   151e8:	bl	10f40 <dcgettext@plt>
   151ec:	ldr	r3, [pc, #808]	; 1551c <__assert_fail@plt+0x43d8>
   151f0:	ldr	r2, [pc, #808]	; 15520 <__assert_fail@plt+0x43dc>
   151f4:	str	r3, [sp]
   151f8:	mov	r1, #1
   151fc:	mov	r3, r0
   15200:	mov	r0, r5
   15204:	bl	11078 <__fprintf_chk@plt>
   15208:	ldr	r1, [pc, #788]	; 15524 <__assert_fail@plt+0x43e0>
   1520c:	mov	r2, #5
   15210:	mov	r0, #0
   15214:	bl	10f40 <dcgettext@plt>
   15218:	mov	r1, r5
   1521c:	bl	10e98 <fputs_unlocked@plt>
   15220:	cmp	r6, #9
   15224:	ldrls	pc, [pc, r6, lsl #2]
   15228:	b	15504 <__assert_fail@plt+0x43c0>
   1522c:	andeq	r5, r1, r0, lsl r5
   15230:	ldrdeq	r5, [r1], -r8
   15234:	andeq	r5, r1, r4, lsl #6
   15238:	andeq	r5, r1, r8, lsr r3
   1523c:	andeq	r5, r1, r4, ror r3
   15240:			; <UNDEFINED> instruction: 0x000153b4
   15244:	strdeq	r5, [r1], -ip
   15248:	andeq	r5, r1, ip, asr #8
   1524c:	andeq	r5, r1, r4, lsr #9
   15250:	andeq	r5, r1, ip, ror #4
   15254:	str	r3, [sp]
   15258:	mov	r1, #1
   1525c:	mov	r3, r2
   15260:	ldr	r2, [pc, #704]	; 15528 <__assert_fail@plt+0x43e4>
   15264:	bl	11078 <__fprintf_chk@plt>
   15268:	b	151dc <__assert_fail@plt+0x4098>
   1526c:	ldr	r1, [pc, #696]	; 1552c <__assert_fail@plt+0x43e8>
   15270:	mov	r2, #5
   15274:	mov	r0, #0
   15278:	bl	10f40 <dcgettext@plt>
   1527c:	ldr	r2, [r4, #32]
   15280:	ldr	r3, [r4, #28]
   15284:	ldr	r1, [r4, #24]
   15288:	str	r2, [sp, #28]
   1528c:	ldr	r2, [r4, #20]
   15290:	str	r3, [sp, #24]
   15294:	ldr	r3, [r4, #16]
   15298:	str	r1, [sp, #20]
   1529c:	ldr	r1, [r4, #12]
   152a0:	str	r2, [sp, #16]
   152a4:	ldr	r2, [r4, #8]
   152a8:	str	r3, [sp, #12]
   152ac:	ldr	r3, [r4, #4]
   152b0:	str	r1, [sp, #8]
   152b4:	str	r2, [sp, #4]
   152b8:	str	r3, [sp]
   152bc:	mov	r1, #1
   152c0:	ldr	r3, [r4]
   152c4:	mov	r2, r0
   152c8:	mov	r0, r5
   152cc:	bl	11078 <__fprintf_chk@plt>
   152d0:	add	sp, sp, #32
   152d4:	pop	{r4, r5, r6, pc}
   152d8:	mov	r2, #5
   152dc:	ldr	r1, [pc, #588]	; 15530 <__assert_fail@plt+0x43ec>
   152e0:	mov	r0, #0
   152e4:	bl	10f40 <dcgettext@plt>
   152e8:	ldr	r3, [r4]
   152ec:	mov	r1, #1
   152f0:	mov	r2, r0
   152f4:	mov	r0, r5
   152f8:	add	sp, sp, #32
   152fc:	pop	{r4, r5, r6, lr}
   15300:	b	11078 <__fprintf_chk@plt>
   15304:	mov	r2, #5
   15308:	ldr	r1, [pc, #548]	; 15534 <__assert_fail@plt+0x43f0>
   1530c:	mov	r0, #0
   15310:	bl	10f40 <dcgettext@plt>
   15314:	ldr	r2, [r4, #4]
   15318:	ldr	r3, [r4]
   1531c:	mov	r1, #1
   15320:	str	r2, [sp, #48]	; 0x30
   15324:	mov	r2, r0
   15328:	mov	r0, r5
   1532c:	add	sp, sp, #32
   15330:	pop	{r4, r5, r6, lr}
   15334:	b	11078 <__fprintf_chk@plt>
   15338:	mov	r2, #5
   1533c:	ldr	r1, [pc, #500]	; 15538 <__assert_fail@plt+0x43f4>
   15340:	mov	r0, #0
   15344:	bl	10f40 <dcgettext@plt>
   15348:	ldr	r2, [r4, #8]
   1534c:	ldr	r3, [r4, #4]
   15350:	mov	r1, #1
   15354:	str	r2, [sp, #52]	; 0x34
   15358:	str	r3, [sp, #48]	; 0x30
   1535c:	ldr	r3, [r4]
   15360:	mov	r2, r0
   15364:	mov	r0, r5
   15368:	add	sp, sp, #32
   1536c:	pop	{r4, r5, r6, lr}
   15370:	b	11078 <__fprintf_chk@plt>
   15374:	mov	r2, #5
   15378:	ldr	r1, [pc, #444]	; 1553c <__assert_fail@plt+0x43f8>
   1537c:	mov	r0, #0
   15380:	bl	10f40 <dcgettext@plt>
   15384:	ldr	r1, [r4, #12]
   15388:	ldr	r2, [r4, #8]
   1538c:	ldr	r3, [r4, #4]
   15390:	str	r1, [sp, #8]
   15394:	str	r2, [sp, #4]
   15398:	str	r3, [sp]
   1539c:	mov	r1, #1
   153a0:	ldr	r3, [r4]
   153a4:	mov	r2, r0
   153a8:	mov	r0, r5
   153ac:	bl	11078 <__fprintf_chk@plt>
   153b0:	b	152d0 <__assert_fail@plt+0x418c>
   153b4:	mov	r2, #5
   153b8:	ldr	r1, [pc, #384]	; 15540 <__assert_fail@plt+0x43fc>
   153bc:	mov	r0, #0
   153c0:	bl	10f40 <dcgettext@plt>
   153c4:	ldr	r3, [r4, #16]
   153c8:	ldr	r1, [r4, #12]
   153cc:	ldr	r2, [r4, #8]
   153d0:	str	r3, [sp, #12]
   153d4:	ldr	r3, [r4, #4]
   153d8:	str	r1, [sp, #8]
   153dc:	str	r2, [sp, #4]
   153e0:	str	r3, [sp]
   153e4:	mov	r1, #1
   153e8:	ldr	r3, [r4]
   153ec:	mov	r2, r0
   153f0:	mov	r0, r5
   153f4:	bl	11078 <__fprintf_chk@plt>
   153f8:	b	152d0 <__assert_fail@plt+0x418c>
   153fc:	mov	r2, #5
   15400:	ldr	r1, [pc, #316]	; 15544 <__assert_fail@plt+0x4400>
   15404:	mov	r0, #0
   15408:	bl	10f40 <dcgettext@plt>
   1540c:	ldr	r2, [r4, #20]
   15410:	ldr	r3, [r4, #16]
   15414:	ldr	r1, [r4, #12]
   15418:	str	r2, [sp, #16]
   1541c:	ldr	r2, [r4, #8]
   15420:	str	r3, [sp, #12]
   15424:	ldr	r3, [r4, #4]
   15428:	str	r1, [sp, #8]
   1542c:	str	r2, [sp, #4]
   15430:	str	r3, [sp]
   15434:	mov	r1, #1
   15438:	ldr	r3, [r4]
   1543c:	mov	r2, r0
   15440:	mov	r0, r5
   15444:	bl	11078 <__fprintf_chk@plt>
   15448:	b	152d0 <__assert_fail@plt+0x418c>
   1544c:	mov	r2, #5
   15450:	ldr	r1, [pc, #240]	; 15548 <__assert_fail@plt+0x4404>
   15454:	mov	r0, #0
   15458:	bl	10f40 <dcgettext@plt>
   1545c:	ldr	r1, [r4, #24]
   15460:	ldr	r2, [r4, #20]
   15464:	ldr	r3, [r4, #16]
   15468:	str	r1, [sp, #20]
   1546c:	ldr	r1, [r4, #12]
   15470:	str	r2, [sp, #16]
   15474:	ldr	r2, [r4, #8]
   15478:	str	r3, [sp, #12]
   1547c:	ldr	r3, [r4, #4]
   15480:	str	r1, [sp, #8]
   15484:	str	r2, [sp, #4]
   15488:	str	r3, [sp]
   1548c:	mov	r1, #1
   15490:	ldr	r3, [r4]
   15494:	mov	r2, r0
   15498:	mov	r0, r5
   1549c:	bl	11078 <__fprintf_chk@plt>
   154a0:	b	152d0 <__assert_fail@plt+0x418c>
   154a4:	mov	r2, #5
   154a8:	ldr	r1, [pc, #156]	; 1554c <__assert_fail@plt+0x4408>
   154ac:	mov	r0, #0
   154b0:	bl	10f40 <dcgettext@plt>
   154b4:	ldr	r3, [r4, #28]
   154b8:	ldr	r1, [r4, #24]
   154bc:	ldr	r2, [r4, #20]
   154c0:	str	r3, [sp, #24]
   154c4:	ldr	r3, [r4, #16]
   154c8:	str	r1, [sp, #20]
   154cc:	ldr	r1, [r4, #12]
   154d0:	str	r2, [sp, #16]
   154d4:	ldr	r2, [r4, #8]
   154d8:	str	r3, [sp, #12]
   154dc:	ldr	r3, [r4, #4]
   154e0:	str	r1, [sp, #8]
   154e4:	str	r2, [sp, #4]
   154e8:	str	r3, [sp]
   154ec:	mov	r1, #1
   154f0:	ldr	r3, [r4]
   154f4:	mov	r2, r0
   154f8:	mov	r0, r5
   154fc:	bl	11078 <__fprintf_chk@plt>
   15500:	b	152d0 <__assert_fail@plt+0x418c>
   15504:	mov	r2, #5
   15508:	ldr	r1, [pc, #64]	; 15550 <__assert_fail@plt+0x440c>
   1550c:	b	15274 <__assert_fail@plt+0x4130>
   15510:	bl	1112c <abort@plt>
   15514:	andeq	r6, r1, r0, asr #29
   15518:	ldrdeq	r6, [r1], -r4
   1551c:	andeq	r0, r0, r2, ror #15
   15520:	andeq	r7, r1, r8, lsr #3
   15524:	ldrdeq	r6, [r1], -r8
   15528:	andeq	r6, r1, ip, asr #29
   1552c:	strheq	r7, [r1], -r0
   15530:	andeq	r6, r1, r4, lsr #31
   15534:			; <UNDEFINED> instruction: 0x00016fb4
   15538:	andeq	r6, r1, ip, asr #31
   1553c:	andeq	r6, r1, r8, ror #31
   15540:	andeq	r7, r1, r8
   15544:	andeq	r7, r1, ip, lsr #32
   15548:	andeq	r7, r1, r4, asr r0
   1554c:	andeq	r7, r1, r0, lsl #1
   15550:	andeq	r7, r1, r4, ror #1
   15554:	push	{r4, r5, lr}
   15558:	sub	sp, sp, #12
   1555c:	ldr	r5, [sp, #24]
   15560:	ldr	ip, [r5]
   15564:	cmp	ip, #0
   15568:	beq	15584 <__assert_fail@plt+0x4440>
   1556c:	mov	lr, r5
   15570:	mov	ip, #0
   15574:	ldr	r4, [lr, #4]!
   15578:	add	ip, ip, #1
   1557c:	cmp	r4, #0
   15580:	bne	15574 <__assert_fail@plt+0x4430>
   15584:	stm	sp, {r5, ip}
   15588:	bl	151ac <__assert_fail@plt+0x4068>
   1558c:	add	sp, sp, #12
   15590:	pop	{r4, r5, pc}
   15594:	push	{r4, r5, r6, lr}
   15598:	sub	sp, sp, #56	; 0x38
   1559c:	ldr	r6, [pc, #88]	; 155fc <__assert_fail@plt+0x44b8>
   155a0:	ldr	r5, [sp, #72]	; 0x48
   155a4:	add	r4, sp, #8
   155a8:	ldr	ip, [r6]
   155ac:	str	ip, [sp, #52]	; 0x34
   155b0:	mov	ip, #0
   155b4:	ldr	lr, [r5], #4
   155b8:	cmp	lr, #0
   155bc:	str	lr, [r4, #4]!
   155c0:	beq	155d0 <__assert_fail@plt+0x448c>
   155c4:	add	ip, ip, #1
   155c8:	cmp	ip, #10
   155cc:	bne	155b4 <__assert_fail@plt+0x4470>
   155d0:	add	lr, sp, #12
   155d4:	str	ip, [sp, #4]
   155d8:	str	lr, [sp]
   155dc:	bl	151ac <__assert_fail@plt+0x4068>
   155e0:	ldr	r2, [sp, #52]	; 0x34
   155e4:	ldr	r3, [r6]
   155e8:	cmp	r2, r3
   155ec:	bne	155f8 <__assert_fail@plt+0x44b4>
   155f0:	add	sp, sp, #56	; 0x38
   155f4:	pop	{r4, r5, r6, pc}
   155f8:	bl	10f4c <__stack_chk_fail@plt>
   155fc:	andeq	r7, r2, r8, lsl #30
   15600:	push	{r3}		; (str r3, [sp, #-4]!)
   15604:	mov	ip, #0
   15608:	push	{r4, r5, r6, lr}
   1560c:	sub	sp, sp, #60	; 0x3c
   15610:	ldr	r6, [pc, #100]	; 1567c <__assert_fail@plt+0x4538>
   15614:	add	r5, sp, #8
   15618:	add	r4, sp, #80	; 0x50
   1561c:	ldr	r3, [r6]
   15620:	str	r4, [sp, #8]
   15624:	str	r3, [sp, #52]	; 0x34
   15628:	ldr	r3, [sp, #76]	; 0x4c
   1562c:	ldr	lr, [r4], #4
   15630:	cmp	lr, #0
   15634:	str	lr, [r5, #4]!
   15638:	beq	15648 <__assert_fail@plt+0x4504>
   1563c:	add	ip, ip, #1
   15640:	cmp	ip, #10
   15644:	bne	1562c <__assert_fail@plt+0x44e8>
   15648:	add	lr, sp, #12
   1564c:	str	ip, [sp, #4]
   15650:	str	lr, [sp]
   15654:	bl	151ac <__assert_fail@plt+0x4068>
   15658:	ldr	r2, [sp, #52]	; 0x34
   1565c:	ldr	r3, [r6]
   15660:	cmp	r2, r3
   15664:	bne	15678 <__assert_fail@plt+0x4534>
   15668:	add	sp, sp, #60	; 0x3c
   1566c:	pop	{r4, r5, r6, lr}
   15670:	add	sp, sp, #4
   15674:	bx	lr
   15678:	bl	10f4c <__stack_chk_fail@plt>
   1567c:	andeq	r7, r2, r8, lsl #30
   15680:	push	{r4, lr}
   15684:	mov	r2, #5
   15688:	ldr	r1, [pc, #88]	; 156e8 <__assert_fail@plt+0x45a4>
   1568c:	mov	r0, #0
   15690:	bl	10f40 <dcgettext@plt>
   15694:	ldr	r2, [pc, #80]	; 156ec <__assert_fail@plt+0x45a8>
   15698:	mov	r1, r0
   1569c:	mov	r0, #1
   156a0:	bl	11060 <__printf_chk@plt>
   156a4:	mov	r2, #5
   156a8:	ldr	r1, [pc, #64]	; 156f0 <__assert_fail@plt+0x45ac>
   156ac:	mov	r0, #0
   156b0:	bl	10f40 <dcgettext@plt>
   156b4:	ldr	r3, [pc, #56]	; 156f4 <__assert_fail@plt+0x45b0>
   156b8:	ldr	r2, [pc, #56]	; 156f8 <__assert_fail@plt+0x45b4>
   156bc:	mov	r1, r0
   156c0:	mov	r0, #1
   156c4:	bl	11060 <__printf_chk@plt>
   156c8:	ldr	r1, [pc, #44]	; 156fc <__assert_fail@plt+0x45b8>
   156cc:	mov	r2, #5
   156d0:	mov	r0, #0
   156d4:	bl	10f40 <dcgettext@plt>
   156d8:	ldr	r3, [pc, #32]	; 15700 <__assert_fail@plt+0x45bc>
   156dc:	pop	{r4, lr}
   156e0:	ldr	r1, [r3]
   156e4:	b	10e98 <fputs_unlocked@plt>
   156e8:	andeq	r7, r1, r0, lsr #2
   156ec:	andeq	r7, r1, r8, lsr r1
   156f0:	andeq	r7, r1, r0, asr r1
   156f4:	ldrdeq	r6, [r1], -r8
   156f8:	andeq	r6, r1, r0, lsl #18
   156fc:	andeq	r7, r1, r4, ror #2
   15700:	andeq	r8, r2, ip, ror #2
   15704:	push	{r4, lr}
   15708:	mov	r4, r0
   1570c:	bl	10fc4 <malloc@plt>
   15710:	adds	r4, r4, #0
   15714:	movne	r4, #1
   15718:	cmp	r0, #0
   1571c:	movne	r4, #0
   15720:	cmp	r4, #0
   15724:	popeq	{r4, pc}
   15728:	bl	1594c <__assert_fail@plt+0x4808>
   1572c:	push	{r4, r5, r6, lr}
   15730:	umull	r4, r5, r0, r1
   15734:	adds	r3, r5, #0
   15738:	movne	r3, #1
   1573c:	cmp	r4, #0
   15740:	blt	15758 <__assert_fail@plt+0x4614>
   15744:	cmp	r3, #0
   15748:	bne	15758 <__assert_fail@plt+0x4614>
   1574c:	mul	r0, r1, r0
   15750:	pop	{r4, r5, r6, lr}
   15754:	b	15704 <__assert_fail@plt+0x45c0>
   15758:	bl	1594c <__assert_fail@plt+0x4808>
   1575c:	b	15704 <__assert_fail@plt+0x45c0>
   15760:	adds	r3, r0, #0
   15764:	movne	r3, #1
   15768:	cmp	r1, #0
   1576c:	movne	r3, #0
   15770:	cmp	r3, #0
   15774:	push	{r4, lr}
   15778:	bne	157a0 <__assert_fail@plt+0x465c>
   1577c:	mov	r4, r1
   15780:	bl	10f58 <realloc@plt>
   15784:	adds	r4, r4, #0
   15788:	movne	r4, #1
   1578c:	cmp	r0, #0
   15790:	movne	r4, #0
   15794:	cmp	r4, #0
   15798:	popeq	{r4, pc}
   1579c:	bl	1594c <__assert_fail@plt+0x4808>
   157a0:	bl	10ee0 <free@plt>
   157a4:	mov	r0, #0
   157a8:	pop	{r4, pc}
   157ac:	push	{r4, r5, r6, lr}
   157b0:	umull	r4, r5, r1, r2
   157b4:	adds	r3, r5, #0
   157b8:	movne	r3, #1
   157bc:	cmp	r4, #0
   157c0:	blt	157d8 <__assert_fail@plt+0x4694>
   157c4:	cmp	r3, #0
   157c8:	bne	157d8 <__assert_fail@plt+0x4694>
   157cc:	mul	r1, r2, r1
   157d0:	pop	{r4, r5, r6, lr}
   157d4:	b	15760 <__assert_fail@plt+0x461c>
   157d8:	bl	1594c <__assert_fail@plt+0x4808>
   157dc:	push	{r4, r5, r6, r7, r8, lr}
   157e0:	subs	r7, r0, #0
   157e4:	mov	r6, r1
   157e8:	mov	r5, r2
   157ec:	ldr	r4, [r1]
   157f0:	beq	15824 <__assert_fail@plt+0x46e0>
   157f4:	mov	r1, r2
   157f8:	ldr	r0, [pc, #104]	; 15868 <__assert_fail@plt+0x4724>
   157fc:	bl	15e90 <__assert_fail@plt+0x4d4c>
   15800:	cmp	r0, r4
   15804:	bls	15848 <__assert_fail@plt+0x4704>
   15808:	add	r3, r4, #1
   1580c:	add	r4, r3, r4, lsr #1
   15810:	str	r4, [r6]
   15814:	mul	r1, r5, r4
   15818:	mov	r0, r7
   1581c:	pop	{r4, r5, r6, r7, r8, lr}
   15820:	b	15760 <__assert_fail@plt+0x461c>
   15824:	cmp	r4, #0
   15828:	beq	1584c <__assert_fail@plt+0x4708>
   1582c:	umull	r0, r1, r4, r5
   15830:	adds	r3, r1, #0
   15834:	movne	r3, #1
   15838:	cmp	r0, #0
   1583c:	blt	15848 <__assert_fail@plt+0x4704>
   15840:	cmp	r3, #0
   15844:	beq	15810 <__assert_fail@plt+0x46cc>
   15848:	bl	1594c <__assert_fail@plt+0x4808>
   1584c:	mov	r1, r2
   15850:	mov	r0, #64	; 0x40
   15854:	bl	15e90 <__assert_fail@plt+0x4d4c>
   15858:	cmp	r5, #64	; 0x40
   1585c:	movls	r4, r0
   15860:	addhi	r4, r0, #1
   15864:	b	1582c <__assert_fail@plt+0x46e8>
   15868:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   1586c:	cmp	r0, #0
   15870:	ldr	r3, [r1]
   15874:	beq	15898 <__assert_fail@plt+0x4754>
   15878:	ldr	r2, [pc, #60]	; 158bc <__assert_fail@plt+0x4778>
   1587c:	cmp	r3, r2
   15880:	bhi	158b4 <__assert_fail@plt+0x4770>
   15884:	add	r2, r3, #1
   15888:	add	r3, r2, r3, lsr #1
   1588c:	str	r3, [r1]
   15890:	mov	r1, r3
   15894:	b	15760 <__assert_fail@plt+0x461c>
   15898:	cmp	r3, #0
   1589c:	bne	158b0 <__assert_fail@plt+0x476c>
   158a0:	mov	r3, #64	; 0x40
   158a4:	str	r3, [r1]
   158a8:	mov	r1, r3
   158ac:	b	15760 <__assert_fail@plt+0x461c>
   158b0:	bge	1588c <__assert_fail@plt+0x4748>
   158b4:	push	{r4, lr}
   158b8:	bl	1594c <__assert_fail@plt+0x4808>
   158bc:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   158c0:	push	{r4, lr}
   158c4:	mov	r4, r0
   158c8:	bl	15704 <__assert_fail@plt+0x45c0>
   158cc:	mov	r2, r4
   158d0:	mov	r1, #0
   158d4:	pop	{r4, lr}
   158d8:	b	11048 <memset@plt>
   158dc:	push	{r4, r5, r6, lr}
   158e0:	umull	r4, r5, r0, r1
   158e4:	adds	r3, r5, #0
   158e8:	movne	r3, #1
   158ec:	cmp	r4, #0
   158f0:	blt	15908 <__assert_fail@plt+0x47c4>
   158f4:	cmp	r3, #0
   158f8:	bne	15908 <__assert_fail@plt+0x47c4>
   158fc:	bl	10e8c <calloc@plt>
   15900:	cmp	r0, #0
   15904:	popne	{r4, r5, r6, pc}
   15908:	bl	1594c <__assert_fail@plt+0x4808>
   1590c:	push	{r4, r5, r6, lr}
   15910:	mov	r4, r1
   15914:	mov	r5, r0
   15918:	mov	r0, r1
   1591c:	bl	15704 <__assert_fail@plt+0x45c0>
   15920:	mov	r2, r4
   15924:	mov	r1, r5
   15928:	pop	{r4, r5, r6, lr}
   1592c:	b	10f10 <memcpy@plt>
   15930:	push	{r4, lr}
   15934:	mov	r4, r0
   15938:	bl	11018 <strlen@plt>
   1593c:	add	r1, r0, #1
   15940:	mov	r0, r4
   15944:	pop	{r4, lr}
   15948:	b	1590c <__assert_fail@plt+0x47c8>
   1594c:	ldr	r3, [pc, #44]	; 15980 <__assert_fail@plt+0x483c>
   15950:	push	{r4, lr}
   15954:	mov	r2, #5
   15958:	ldr	r1, [pc, #36]	; 15984 <__assert_fail@plt+0x4840>
   1595c:	mov	r0, #0
   15960:	ldr	r4, [r3]
   15964:	bl	10f40 <dcgettext@plt>
   15968:	ldr	r2, [pc, #24]	; 15988 <__assert_fail@plt+0x4844>
   1596c:	mov	r1, #0
   15970:	mov	r3, r0
   15974:	mov	r0, r4
   15978:	bl	10fb8 <error@plt>
   1597c:	bl	1112c <abort@plt>
   15980:	andeq	r8, r2, ip, lsl #2
   15984:	ldrdeq	r7, [r1], -r8
   15988:	andeq	r6, r1, r4, lsr #27
   1598c:	push	{r4, lr}
   15990:	bl	10ef8 <strndup@plt>
   15994:	cmp	r0, #0
   15998:	popne	{r4, pc}
   1599c:	bl	1594c <__assert_fail@plt+0x4808>
   159a0:	push	{r4, r5, lr}
   159a4:	sub	sp, sp, #12
   159a8:	mov	r4, r0
   159ac:	bl	1106c <fileno@plt>
   159b0:	cmp	r0, #0
   159b4:	mov	r0, r4
   159b8:	blt	15a34 <__assert_fail@plt+0x48f0>
   159bc:	bl	10fdc <__freading@plt>
   159c0:	cmp	r0, #0
   159c4:	bne	15a00 <__assert_fail@plt+0x48bc>
   159c8:	mov	r0, r4
   159cc:	bl	15a40 <__assert_fail@plt+0x48fc>
   159d0:	cmp	r0, #0
   159d4:	beq	15a30 <__assert_fail@plt+0x48ec>
   159d8:	bl	11030 <__errno_location@plt>
   159dc:	mov	r5, r0
   159e0:	mov	r0, r4
   159e4:	ldr	r4, [r5]
   159e8:	bl	11090 <fclose@plt>
   159ec:	cmp	r4, #0
   159f0:	mvnne	r0, #0
   159f4:	strne	r4, [r5]
   159f8:	add	sp, sp, #12
   159fc:	pop	{r4, r5, pc}
   15a00:	mov	r0, r4
   15a04:	bl	1106c <fileno@plt>
   15a08:	mov	r3, #1
   15a0c:	str	r3, [sp]
   15a10:	mov	r2, #0
   15a14:	mov	r3, #0
   15a18:	bl	10f88 <lseek64@plt>
   15a1c:	mvn	r3, #0
   15a20:	mvn	r2, #0
   15a24:	cmp	r1, r3
   15a28:	cmpeq	r0, r2
   15a2c:	bne	159c8 <__assert_fail@plt+0x4884>
   15a30:	mov	r0, r4
   15a34:	add	sp, sp, #12
   15a38:	pop	{r4, r5, lr}
   15a3c:	b	11090 <fclose@plt>
   15a40:	push	{r4, lr}
   15a44:	subs	r4, r0, #0
   15a48:	sub	sp, sp, #8
   15a4c:	beq	15a68 <__assert_fail@plt+0x4924>
   15a50:	bl	10fdc <__freading@plt>
   15a54:	cmp	r0, #0
   15a58:	beq	15a68 <__assert_fail@plt+0x4924>
   15a5c:	ldr	r3, [r4]
   15a60:	tst	r3, #256	; 0x100
   15a64:	bne	15a78 <__assert_fail@plt+0x4934>
   15a68:	mov	r0, r4
   15a6c:	add	sp, sp, #8
   15a70:	pop	{r4, lr}
   15a74:	b	10ec8 <fflush@plt>
   15a78:	mov	r3, #1
   15a7c:	str	r3, [sp]
   15a80:	mov	r2, #0
   15a84:	mov	r3, #0
   15a88:	mov	r0, r4
   15a8c:	bl	15ad0 <__assert_fail@plt+0x498c>
   15a90:	mov	r0, r4
   15a94:	add	sp, sp, #8
   15a98:	pop	{r4, lr}
   15a9c:	b	10ec8 <fflush@plt>
   15aa0:	mov	r3, r0
   15aa4:	ldr	r0, [r0, #20]
   15aa8:	ldr	r2, [r3, #16]
   15aac:	cmp	r0, r2
   15ab0:	bhi	15ac8 <__assert_fail@plt+0x4984>
   15ab4:	ldmib	r3, {r0, r3}
   15ab8:	subs	r3, r3, r0
   15abc:	beq	15ac8 <__assert_fail@plt+0x4984>
   15ac0:	str	r3, [r1]
   15ac4:	bx	lr
   15ac8:	mov	r0, #0
   15acc:	bx	lr
   15ad0:	push	{r4, r5, r6, r7, r8, lr}
   15ad4:	sub	sp, sp, #8
   15ad8:	ldmib	r0, {ip, lr}
   15adc:	mov	r4, r0
   15ae0:	ldr	r5, [sp, #32]
   15ae4:	cmp	lr, ip
   15ae8:	beq	15b00 <__assert_fail@plt+0x49bc>
   15aec:	str	r5, [sp, #32]
   15af0:	mov	r0, r4
   15af4:	add	sp, sp, #8
   15af8:	pop	{r4, r5, r6, r7, r8, lr}
   15afc:	b	1109c <fseeko64@plt>
   15b00:	ldr	lr, [r0, #20]
   15b04:	ldr	ip, [r0, #16]
   15b08:	cmp	lr, ip
   15b0c:	bne	15aec <__assert_fail@plt+0x49a8>
   15b10:	ldr	r8, [r0, #36]	; 0x24
   15b14:	cmp	r8, #0
   15b18:	bne	15aec <__assert_fail@plt+0x49a8>
   15b1c:	mov	r6, r2
   15b20:	mov	r7, r3
   15b24:	bl	1106c <fileno@plt>
   15b28:	mov	r2, r6
   15b2c:	mov	r3, r7
   15b30:	str	r5, [sp]
   15b34:	bl	10f88 <lseek64@plt>
   15b38:	mvn	r3, #0
   15b3c:	mvn	r2, #0
   15b40:	cmp	r1, r3
   15b44:	cmpeq	r0, r2
   15b48:	beq	15b68 <__assert_fail@plt+0x4a24>
   15b4c:	ldr	r3, [r4]
   15b50:	strd	r0, [r4, #80]	; 0x50
   15b54:	mov	r0, r8
   15b58:	bic	r3, r3, #16
   15b5c:	str	r3, [r4]
   15b60:	add	sp, sp, #8
   15b64:	pop	{r4, r5, r6, r7, r8, pc}
   15b68:	mvn	r0, #0
   15b6c:	b	15b60 <__assert_fail@plt+0x4a1c>
   15b70:	push	{r4, r5, r6, r7, r8, lr}
   15b74:	subs	r7, r0, #0
   15b78:	ldr	r5, [pc, #108]	; 15bec <__assert_fail@plt+0x4aa8>
   15b7c:	sub	sp, sp, #8
   15b80:	mov	r8, r1
   15b84:	ldr	r1, [r5]
   15b88:	moveq	r7, sp
   15b8c:	str	r1, [sp, #4]
   15b90:	mov	r0, r7
   15b94:	mov	r1, r8
   15b98:	mov	r6, r2
   15b9c:	bl	10fac <mbrtowc@plt>
   15ba0:	cmp	r6, #0
   15ba4:	cmnne	r0, #3
   15ba8:	mov	r4, r0
   15bac:	bhi	15bcc <__assert_fail@plt+0x4a88>
   15bb0:	ldr	r2, [sp, #4]
   15bb4:	ldr	r3, [r5]
   15bb8:	mov	r0, r4
   15bbc:	cmp	r2, r3
   15bc0:	bne	15be8 <__assert_fail@plt+0x4aa4>
   15bc4:	add	sp, sp, #8
   15bc8:	pop	{r4, r5, r6, r7, r8, pc}
   15bcc:	mov	r0, #0
   15bd0:	bl	15dd4 <__assert_fail@plt+0x4c90>
   15bd4:	cmp	r0, #0
   15bd8:	moveq	r4, #1
   15bdc:	ldrbeq	r3, [r8]
   15be0:	streq	r3, [r7]
   15be4:	b	15bb0 <__assert_fail@plt+0x4a6c>
   15be8:	bl	10f4c <__stack_chk_fail@plt>
   15bec:	andeq	r7, r2, r8, lsl #30
   15bf0:	push	{r4, r5, r6, lr}
   15bf4:	mov	r4, r0
   15bf8:	bl	10fa0 <__fpending@plt>
   15bfc:	ldr	r5, [r4]
   15c00:	and	r5, r5, #32
   15c04:	mov	r6, r0
   15c08:	mov	r0, r4
   15c0c:	bl	159a0 <__assert_fail@plt+0x485c>
   15c10:	cmp	r5, #0
   15c14:	mov	r4, r0
   15c18:	bne	15c44 <__assert_fail@plt+0x4b00>
   15c1c:	cmp	r0, #0
   15c20:	beq	15c3c <__assert_fail@plt+0x4af8>
   15c24:	cmp	r6, #0
   15c28:	bne	15c5c <__assert_fail@plt+0x4b18>
   15c2c:	bl	11030 <__errno_location@plt>
   15c30:	ldr	r4, [r0]
   15c34:	subs	r4, r4, #9
   15c38:	mvnne	r4, #0
   15c3c:	mov	r0, r4
   15c40:	pop	{r4, r5, r6, pc}
   15c44:	cmp	r0, #0
   15c48:	bne	15c5c <__assert_fail@plt+0x4b18>
   15c4c:	bl	11030 <__errno_location@plt>
   15c50:	str	r4, [r0]
   15c54:	mvn	r4, #0
   15c58:	b	15c3c <__assert_fail@plt+0x4af8>
   15c5c:	mvn	r4, #0
   15c60:	b	15c3c <__assert_fail@plt+0x4af8>
   15c64:	push	{r4, r5, r6, r7, lr}
   15c68:	sub	sp, sp, #4096	; 0x1000
   15c6c:	ldr	r7, [pc, #348]	; 15dd0 <__assert_fail@plt+0x4c8c>
   15c70:	sub	sp, sp, #20
   15c74:	add	r2, sp, #4096	; 0x1000
   15c78:	ldr	r3, [r7]
   15c7c:	add	r2, r2, #12
   15c80:	subs	r4, r1, #0
   15c84:	str	r3, [r2]
   15c88:	beq	15d3c <__assert_fail@plt+0x4bf8>
   15c8c:	mov	r6, r0
   15c90:	bl	15e54 <__assert_fail@plt+0x4d10>
   15c94:	subs	r5, r0, #0
   15c98:	bne	15cb0 <__assert_fail@plt+0x4b6c>
   15c9c:	b	15d44 <__assert_fail@plt+0x4c00>
   15ca0:	subs	r4, r4, #1
   15ca4:	beq	15dc4 <__assert_fail@plt+0x4c80>
   15ca8:	subs	r5, r5, #1
   15cac:	beq	15d44 <__assert_fail@plt+0x4c00>
   15cb0:	add	r1, sp, #8
   15cb4:	mov	r0, r6
   15cb8:	bl	15aa0 <__assert_fail@plt+0x495c>
   15cbc:	cmp	r0, #0
   15cc0:	beq	15cf4 <__assert_fail@plt+0x4bb0>
   15cc4:	ldr	r3, [sp, #8]
   15cc8:	cmp	r3, #0
   15ccc:	beq	15cf4 <__assert_fail@plt+0x4bb0>
   15cd0:	cmp	r3, r4
   15cd4:	ldr	r2, [r6, #4]
   15cd8:	movcs	r3, r4
   15cdc:	add	r2, r2, r3
   15ce0:	subs	r4, r4, r3
   15ce4:	str	r2, [r6, #4]
   15ce8:	beq	15dc4 <__assert_fail@plt+0x4c80>
   15cec:	subs	r5, r5, r3
   15cf0:	beq	15d44 <__assert_fail@plt+0x4c00>
   15cf4:	mov	r0, r6
   15cf8:	bl	11054 <fgetc@plt>
   15cfc:	cmn	r0, #1
   15d00:	bne	15ca0 <__assert_fail@plt+0x4b5c>
   15d04:	mov	r0, r6
   15d08:	bl	10eec <ferror@plt>
   15d0c:	adds	r0, r0, #0
   15d10:	movne	r0, #1
   15d14:	rsb	r0, r0, #0
   15d18:	add	r3, sp, #4096	; 0x1000
   15d1c:	add	r3, r3, #12
   15d20:	ldr	r2, [r3]
   15d24:	ldr	r3, [r7]
   15d28:	cmp	r2, r3
   15d2c:	bne	15dcc <__assert_fail@plt+0x4c88>
   15d30:	add	sp, sp, #4096	; 0x1000
   15d34:	add	sp, sp, #20
   15d38:	pop	{r4, r5, r6, r7, pc}
   15d3c:	mov	r0, r4
   15d40:	b	15d18 <__assert_fail@plt+0x4bd4>
   15d44:	mov	r0, r6
   15d48:	bl	1106c <fileno@plt>
   15d4c:	cmp	r0, #0
   15d50:	blt	15d94 <__assert_fail@plt+0x4c50>
   15d54:	mov	r5, #1
   15d58:	mov	r3, #0
   15d5c:	str	r5, [sp]
   15d60:	mov	r2, #0
   15d64:	bl	10f88 <lseek64@plt>
   15d68:	cmp	r0, #0
   15d6c:	sbcs	r3, r1, #0
   15d70:	blt	15d94 <__assert_fail@plt+0x4c50>
   15d74:	str	r5, [sp]
   15d78:	mov	r2, r4
   15d7c:	mov	r0, r6
   15d80:	mov	r3, #0
   15d84:	bl	15ad0 <__assert_fail@plt+0x498c>
   15d88:	b	15d18 <__assert_fail@plt+0x4bd4>
   15d8c:	subs	r4, r4, r5
   15d90:	beq	15d3c <__assert_fail@plt+0x4bf8>
   15d94:	cmp	r4, #4096	; 0x1000
   15d98:	movcc	r5, r4
   15d9c:	movcs	r5, #4096	; 0x1000
   15da0:	str	r6, [sp]
   15da4:	mov	r3, r5
   15da8:	mov	r2, #1
   15dac:	mov	r1, #4096	; 0x1000
   15db0:	add	r0, sp, #12
   15db4:	bl	110a8 <__fread_chk@plt>
   15db8:	cmp	r5, r0
   15dbc:	bls	15d8c <__assert_fail@plt+0x4c48>
   15dc0:	b	15d04 <__assert_fail@plt+0x4bc0>
   15dc4:	mov	r0, #0
   15dc8:	b	15d18 <__assert_fail@plt+0x4bd4>
   15dcc:	bl	10f4c <__stack_chk_fail@plt>
   15dd0:	andeq	r7, r2, r8, lsl #30
   15dd4:	push	{r4, lr}
   15dd8:	mov	r1, #0
   15ddc:	bl	110cc <setlocale@plt>
   15de0:	subs	r4, r0, #0
   15de4:	beq	15e10 <__assert_fail@plt+0x4ccc>
   15de8:	ldr	r1, [pc, #40]	; 15e18 <__assert_fail@plt+0x4cd4>
   15dec:	bl	10eb0 <strcmp@plt>
   15df0:	cmp	r0, #0
   15df4:	popeq	{r4, pc}
   15df8:	mov	r0, r4
   15dfc:	ldr	r1, [pc, #24]	; 15e1c <__assert_fail@plt+0x4cd8>
   15e00:	bl	10eb0 <strcmp@plt>
   15e04:	adds	r0, r0, #0
   15e08:	movne	r0, #1
   15e0c:	pop	{r4, pc}
   15e10:	mov	r0, #1
   15e14:	pop	{r4, pc}
   15e18:	andeq	r7, r1, ip, ror #3
   15e1c:	strdeq	r7, [r1], -r0
   15e20:	push	{r4, lr}
   15e24:	mov	r0, #14
   15e28:	bl	110e4 <nl_langinfo@plt>
   15e2c:	cmp	r0, #0
   15e30:	beq	15e48 <__assert_fail@plt+0x4d04>
   15e34:	ldrb	r2, [r0]
   15e38:	ldr	r3, [pc, #16]	; 15e50 <__assert_fail@plt+0x4d0c>
   15e3c:	cmp	r2, #0
   15e40:	moveq	r0, r3
   15e44:	pop	{r4, pc}
   15e48:	ldr	r0, [pc]	; 15e50 <__assert_fail@plt+0x4d0c>
   15e4c:	pop	{r4, pc}
   15e50:	strdeq	r7, [r1], -r8
   15e54:	ldr	r2, [r0, #20]
   15e58:	ldr	r3, [r0, #16]
   15e5c:	cmp	r2, r3
   15e60:	bhi	15e88 <__assert_fail@plt+0x4d44>
   15e64:	ldm	r0, {r1, r2, r3}
   15e68:	tst	r1, #256	; 0x100
   15e6c:	sub	r3, r3, r2
   15e70:	ldrne	r1, [r0, #36]	; 0x24
   15e74:	ldrne	r2, [r0, #44]	; 0x2c
   15e78:	subne	r2, r2, r1
   15e7c:	addne	r3, r3, r2
   15e80:	mov	r0, r3
   15e84:	bx	lr
   15e88:	mov	r0, #0
   15e8c:	bx	lr
   15e90:	subs	r2, r1, #1
   15e94:	bxeq	lr
   15e98:	bcc	16070 <__assert_fail@plt+0x4f2c>
   15e9c:	cmp	r0, r1
   15ea0:	bls	16054 <__assert_fail@plt+0x4f10>
   15ea4:	tst	r1, r2
   15ea8:	beq	16060 <__assert_fail@plt+0x4f1c>
   15eac:	clz	r3, r0
   15eb0:	clz	r2, r1
   15eb4:	sub	r3, r2, r3
   15eb8:	rsbs	r3, r3, #31
   15ebc:	addne	r3, r3, r3, lsl #1
   15ec0:	mov	r2, #0
   15ec4:	addne	pc, pc, r3, lsl #2
   15ec8:	nop			; (mov r0, r0)
   15ecc:	cmp	r0, r1, lsl #31
   15ed0:	adc	r2, r2, r2
   15ed4:	subcs	r0, r0, r1, lsl #31
   15ed8:	cmp	r0, r1, lsl #30
   15edc:	adc	r2, r2, r2
   15ee0:	subcs	r0, r0, r1, lsl #30
   15ee4:	cmp	r0, r1, lsl #29
   15ee8:	adc	r2, r2, r2
   15eec:	subcs	r0, r0, r1, lsl #29
   15ef0:	cmp	r0, r1, lsl #28
   15ef4:	adc	r2, r2, r2
   15ef8:	subcs	r0, r0, r1, lsl #28
   15efc:	cmp	r0, r1, lsl #27
   15f00:	adc	r2, r2, r2
   15f04:	subcs	r0, r0, r1, lsl #27
   15f08:	cmp	r0, r1, lsl #26
   15f0c:	adc	r2, r2, r2
   15f10:	subcs	r0, r0, r1, lsl #26
   15f14:	cmp	r0, r1, lsl #25
   15f18:	adc	r2, r2, r2
   15f1c:	subcs	r0, r0, r1, lsl #25
   15f20:	cmp	r0, r1, lsl #24
   15f24:	adc	r2, r2, r2
   15f28:	subcs	r0, r0, r1, lsl #24
   15f2c:	cmp	r0, r1, lsl #23
   15f30:	adc	r2, r2, r2
   15f34:	subcs	r0, r0, r1, lsl #23
   15f38:	cmp	r0, r1, lsl #22
   15f3c:	adc	r2, r2, r2
   15f40:	subcs	r0, r0, r1, lsl #22
   15f44:	cmp	r0, r1, lsl #21
   15f48:	adc	r2, r2, r2
   15f4c:	subcs	r0, r0, r1, lsl #21
   15f50:	cmp	r0, r1, lsl #20
   15f54:	adc	r2, r2, r2
   15f58:	subcs	r0, r0, r1, lsl #20
   15f5c:	cmp	r0, r1, lsl #19
   15f60:	adc	r2, r2, r2
   15f64:	subcs	r0, r0, r1, lsl #19
   15f68:	cmp	r0, r1, lsl #18
   15f6c:	adc	r2, r2, r2
   15f70:	subcs	r0, r0, r1, lsl #18
   15f74:	cmp	r0, r1, lsl #17
   15f78:	adc	r2, r2, r2
   15f7c:	subcs	r0, r0, r1, lsl #17
   15f80:	cmp	r0, r1, lsl #16
   15f84:	adc	r2, r2, r2
   15f88:	subcs	r0, r0, r1, lsl #16
   15f8c:	cmp	r0, r1, lsl #15
   15f90:	adc	r2, r2, r2
   15f94:	subcs	r0, r0, r1, lsl #15
   15f98:	cmp	r0, r1, lsl #14
   15f9c:	adc	r2, r2, r2
   15fa0:	subcs	r0, r0, r1, lsl #14
   15fa4:	cmp	r0, r1, lsl #13
   15fa8:	adc	r2, r2, r2
   15fac:	subcs	r0, r0, r1, lsl #13
   15fb0:	cmp	r0, r1, lsl #12
   15fb4:	adc	r2, r2, r2
   15fb8:	subcs	r0, r0, r1, lsl #12
   15fbc:	cmp	r0, r1, lsl #11
   15fc0:	adc	r2, r2, r2
   15fc4:	subcs	r0, r0, r1, lsl #11
   15fc8:	cmp	r0, r1, lsl #10
   15fcc:	adc	r2, r2, r2
   15fd0:	subcs	r0, r0, r1, lsl #10
   15fd4:	cmp	r0, r1, lsl #9
   15fd8:	adc	r2, r2, r2
   15fdc:	subcs	r0, r0, r1, lsl #9
   15fe0:	cmp	r0, r1, lsl #8
   15fe4:	adc	r2, r2, r2
   15fe8:	subcs	r0, r0, r1, lsl #8
   15fec:	cmp	r0, r1, lsl #7
   15ff0:	adc	r2, r2, r2
   15ff4:	subcs	r0, r0, r1, lsl #7
   15ff8:	cmp	r0, r1, lsl #6
   15ffc:	adc	r2, r2, r2
   16000:	subcs	r0, r0, r1, lsl #6
   16004:	cmp	r0, r1, lsl #5
   16008:	adc	r2, r2, r2
   1600c:	subcs	r0, r0, r1, lsl #5
   16010:	cmp	r0, r1, lsl #4
   16014:	adc	r2, r2, r2
   16018:	subcs	r0, r0, r1, lsl #4
   1601c:	cmp	r0, r1, lsl #3
   16020:	adc	r2, r2, r2
   16024:	subcs	r0, r0, r1, lsl #3
   16028:	cmp	r0, r1, lsl #2
   1602c:	adc	r2, r2, r2
   16030:	subcs	r0, r0, r1, lsl #2
   16034:	cmp	r0, r1, lsl #1
   16038:	adc	r2, r2, r2
   1603c:	subcs	r0, r0, r1, lsl #1
   16040:	cmp	r0, r1
   16044:	adc	r2, r2, r2
   16048:	subcs	r0, r0, r1
   1604c:	mov	r0, r2
   16050:	bx	lr
   16054:	moveq	r0, #1
   16058:	movne	r0, #0
   1605c:	bx	lr
   16060:	clz	r2, r1
   16064:	rsb	r2, r2, #31
   16068:	lsr	r0, r0, r2
   1606c:	bx	lr
   16070:	cmp	r0, #0
   16074:	mvnne	r0, #0
   16078:	b	1609c <__assert_fail@plt+0x4f58>
   1607c:	cmp	r1, #0
   16080:	beq	16070 <__assert_fail@plt+0x4f2c>
   16084:	push	{r0, r1, lr}
   16088:	bl	15e90 <__assert_fail@plt+0x4d4c>
   1608c:	pop	{r1, r2, lr}
   16090:	mul	r3, r2, r0
   16094:	sub	r1, r1, r3
   16098:	bx	lr
   1609c:	push	{r1, lr}
   160a0:	mov	r0, #8
   160a4:	bl	10ea4 <raise@plt>
   160a8:	pop	{r1, pc}
   160ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   160b0:	mov	r7, r0
   160b4:	ldr	r6, [pc, #72]	; 16104 <__assert_fail@plt+0x4fc0>
   160b8:	ldr	r5, [pc, #72]	; 16108 <__assert_fail@plt+0x4fc4>
   160bc:	add	r6, pc, r6
   160c0:	add	r5, pc, r5
   160c4:	sub	r6, r6, r5
   160c8:	mov	r8, r1
   160cc:	mov	r9, r2
   160d0:	bl	10e6c <calloc@plt-0x20>
   160d4:	asrs	r6, r6, #2
   160d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   160dc:	mov	r4, #0
   160e0:	add	r4, r4, #1
   160e4:	ldr	r3, [r5], #4
   160e8:	mov	r2, r9
   160ec:	mov	r1, r8
   160f0:	mov	r0, r7
   160f4:	blx	r3
   160f8:	cmp	r6, r4
   160fc:	bne	160e0 <__assert_fail@plt+0x4f9c>
   16100:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16104:	andeq	r1, r1, r0, asr #28
   16108:	andeq	r1, r1, r8, lsr lr
   1610c:	bx	lr
   16110:	ldr	r3, [pc, #12]	; 16124 <__assert_fail@plt+0x4fe0>
   16114:	mov	r1, #0
   16118:	add	r3, pc, r3
   1611c:	ldr	r2, [r3]
   16120:	b	1103c <__cxa_atexit@plt>
   16124:	andeq	r1, r1, r0, ror #31

Disassembly of section .fini:

00016128 <.fini>:
   16128:	push	{r3, lr}
   1612c:	pop	{r3, pc}
