
raspbian-preinstalled/faillog:     file format elf32-littlearm


Disassembly of section .init:

00010b6c <.init>:
   10b6c:	push	{r3, lr}
   10b70:	bl	11820 <__assert_fail@plt+0xa48>
   10b74:	pop	{r3, pc}

Disassembly of section .plt:

00010b78 <raise@plt-0x14>:
   10b78:	push	{lr}		; (str lr, [sp, #-4]!)
   10b7c:	ldr	lr, [pc, #4]	; 10b88 <raise@plt-0x4>
   10b80:	add	lr, pc, lr
   10b84:	ldr	pc, [lr, #8]!
   10b88:	muleq	r1, ip, r3

00010b8c <raise@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #77824	; 0x13000
   10b94:	ldr	pc, [ip, #924]!	; 0x39c

00010b98 <getpwnam@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #77824	; 0x13000
   10ba0:	ldr	pc, [ip, #916]!	; 0x394

00010ba4 <fsync@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #77824	; 0x13000
   10bac:	ldr	pc, [ip, #908]!	; 0x38c

00010bb0 <strcmp@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #77824	; 0x13000
   10bb8:	ldr	pc, [ip, #900]!	; 0x384

00010bbc <strtol@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #77824	; 0x13000
   10bc4:	ldr	pc, [ip, #892]!	; 0x37c

00010bc8 <getpwuid@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #77824	; 0x13000
   10bd0:	ldr	pc, [ip, #884]!	; 0x374

00010bd4 <fflush@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #77824	; 0x13000
   10bdc:	ldr	pc, [ip, #876]!	; 0x36c

00010be0 <getuid@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #77824	; 0x13000
   10be8:	ldr	pc, [ip, #868]!	; 0x364

00010bec <ferror@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #77824	; 0x13000
   10bf4:	ldr	pc, [ip, #860]!	; 0x35c

00010bf8 <time@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #77824	; 0x13000
   10c00:	ldr	pc, [ip, #852]!	; 0x354

00010c04 <dcgettext@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #77824	; 0x13000
   10c0c:	ldr	pc, [ip, #844]!	; 0x34c

00010c10 <getpwent@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #77824	; 0x13000
   10c18:	ldr	pc, [ip, #836]!	; 0x344

00010c1c <__stack_chk_fail@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #77824	; 0x13000
   10c24:	ldr	pc, [ip, #828]!	; 0x33c

00010c28 <textdomain@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #77824	; 0x13000
   10c30:	ldr	pc, [ip, #820]!	; 0x334

00010c34 <chdir@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #77824	; 0x13000
   10c3c:	ldr	pc, [ip, #812]!	; 0x32c

00010c40 <__fxstat64@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #77824	; 0x13000
   10c48:	ldr	pc, [ip, #804]!	; 0x324

00010c4c <_IO_putc@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #77824	; 0x13000
   10c54:	ldr	pc, [ip, #796]!	; 0x31c

00010c58 <fwrite@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #77824	; 0x13000
   10c60:	ldr	pc, [ip, #788]!	; 0x314

00010c64 <chroot@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #77824	; 0x13000
   10c6c:	ldr	pc, [ip, #780]!	; 0x30c

00010c70 <fread@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #77824	; 0x13000
   10c78:	ldr	pc, [ip, #772]!	; 0x304

00010c7c <puts@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #77824	; 0x13000
   10c84:	ldr	pc, [ip, #764]!	; 0x2fc

00010c88 <__libc_start_main@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #77824	; 0x13000
   10c90:	ldr	pc, [ip, #756]!	; 0x2f4

00010c94 <strerror@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #77824	; 0x13000
   10c9c:	ldr	pc, [ip, #748]!	; 0x2ec

00010ca0 <strftime@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #77824	; 0x13000
   10ca8:	ldr	pc, [ip, #740]!	; 0x2e4

00010cac <localtime@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #77824	; 0x13000
   10cb4:	ldr	pc, [ip, #732]!	; 0x2dc

00010cb8 <__gmon_start__@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #77824	; 0x13000
   10cc0:	ldr	pc, [ip, #724]!	; 0x2d4

00010cc4 <getopt_long@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #77824	; 0x13000
   10ccc:	ldr	pc, [ip, #716]!	; 0x2cc

00010cd0 <__ctype_b_loc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #77824	; 0x13000
   10cd8:	ldr	pc, [ip, #708]!	; 0x2c4

00010cdc <exit@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #77824	; 0x13000
   10ce4:	ldr	pc, [ip, #700]!	; 0x2bc

00010ce8 <strtoul@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #77824	; 0x13000
   10cf0:	ldr	pc, [ip, #692]!	; 0x2b4

00010cf4 <setreuid@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #77824	; 0x13000
   10cfc:	ldr	pc, [ip, #684]!	; 0x2ac

00010d00 <setpwent@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #77824	; 0x13000
   10d08:	ldr	pc, [ip, #676]!	; 0x2a4

00010d0c <__errno_location@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #77824	; 0x13000
   10d14:	ldr	pc, [ip, #668]!	; 0x29c

00010d18 <getgid@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #77824	; 0x13000
   10d20:	ldr	pc, [ip, #660]!	; 0x294

00010d24 <__printf_chk@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #77824	; 0x13000
   10d2c:	ldr	pc, [ip, #652]!	; 0x28c

00010d30 <fileno@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #77824	; 0x13000
   10d38:	ldr	pc, [ip, #644]!	; 0x284

00010d3c <__fprintf_chk@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #77824	; 0x13000
   10d44:	ldr	pc, [ip, #636]!	; 0x27c

00010d48 <access@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #77824	; 0x13000
   10d50:	ldr	pc, [ip, #628]!	; 0x274

00010d54 <fclose@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #77824	; 0x13000
   10d5c:	ldr	pc, [ip, #620]!	; 0x26c

00010d60 <fseeko64@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #77824	; 0x13000
   10d68:	ldr	pc, [ip, #612]!	; 0x264

00010d6c <setregid@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #77824	; 0x13000
   10d74:	ldr	pc, [ip, #604]!	; 0x25c

00010d78 <setlocale@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #77824	; 0x13000
   10d80:	ldr	pc, [ip, #596]!	; 0x254

00010d84 <endpwent@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #77824	; 0x13000
   10d8c:	ldr	pc, [ip, #588]!	; 0x24c

00010d90 <strrchr@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #77824	; 0x13000
   10d98:	ldr	pc, [ip, #580]!	; 0x244

00010d9c <fputc@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #77824	; 0x13000
   10da4:	ldr	pc, [ip, #572]!	; 0x23c

00010da8 <fopen64@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #77824	; 0x13000
   10db0:	ldr	pc, [ip, #564]!	; 0x234

00010db4 <bindtextdomain@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #77824	; 0x13000
   10dbc:	ldr	pc, [ip, #556]!	; 0x22c

00010dc0 <fputs@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #77824	; 0x13000
   10dc8:	ldr	pc, [ip, #548]!	; 0x224

00010dcc <abort@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #77824	; 0x13000
   10dd4:	ldr	pc, [ip, #540]!	; 0x21c

00010dd8 <__assert_fail@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #77824	; 0x13000
   10de0:	ldr	pc, [ip, #532]!	; 0x214

Disassembly of section .text:

00010de4 <.text>:
   10de4:	ldr	r3, [pc, #2460]	; 11788 <__assert_fail@plt+0x9b0>
   10de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10dec:	sub	sp, sp, #36	; 0x24
   10df0:	ldr	r3, [r3]
   10df4:	mov	r7, r0
   10df8:	ldr	r0, [r1]
   10dfc:	mov	r6, r1
   10e00:	str	r3, [sp, #28]
   10e04:	bl	12194 <__assert_fail@plt+0x13bc>
   10e08:	ldr	fp, [pc, #2428]	; 1178c <__assert_fail@plt+0x9b4>
   10e0c:	ldr	r5, [pc, #2428]	; 11790 <__assert_fail@plt+0x9b8>
   10e10:	ldr	r1, [pc, #2428]	; 11794 <__assert_fail@plt+0x9bc>
   10e14:	add	r3, r5, #132	; 0x84
   10e18:	str	r3, [sp, #8]
   10e1c:	ldr	r9, [pc, #2420]	; 11798 <__assert_fail@plt+0x9c0>
   10e20:	ldr	r8, [pc, #2420]	; 1179c <__assert_fail@plt+0x9c4>
   10e24:	ldr	sl, [pc, #2420]	; 117a0 <__assert_fail@plt+0x9c8>
   10e28:	str	r0, [fp]
   10e2c:	mov	r0, #6
   10e30:	bl	10d78 <setlocale@plt>
   10e34:	ldr	r1, [pc, #2408]	; 117a4 <__assert_fail@plt+0x9cc>
   10e38:	ldr	r0, [pc, #2408]	; 117a8 <__assert_fail@plt+0x9d0>
   10e3c:	bl	10db4 <bindtextdomain@plt>
   10e40:	ldr	r0, [pc, #2400]	; 117a8 <__assert_fail@plt+0x9d0>
   10e44:	bl	10c28 <textdomain@plt>
   10e48:	mov	r2, r6
   10e4c:	mov	r1, r7
   10e50:	ldr	r0, [pc, #2388]	; 117ac <__assert_fail@plt+0x9d4>
   10e54:	bl	12394 <__assert_fail@plt+0x15bc>
   10e58:	mov	r4, #0
   10e5c:	str	r4, [sp]
   10e60:	mov	r3, r9
   10e64:	mov	r2, r8
   10e68:	mov	r1, r6
   10e6c:	mov	r0, r7
   10e70:	bl	10cc4 <getopt_long@plt>
   10e74:	cmn	r0, #1
   10e78:	beq	10ff8 <__assert_fail@plt+0x220>
   10e7c:	sub	r0, r0, #82	; 0x52
   10e80:	cmp	r0, #35	; 0x23
   10e84:	ldrls	pc, [pc, r0, lsl #2]
   10e88:	b	10ff0 <__assert_fail@plt+0x218>
   10e8c:	andeq	r0, r1, ip, asr lr
   10e90:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e94:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e98:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e9c:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ea0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ea4:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ea8:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10eac:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10eb0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10eb4:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10eb8:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ebc:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ec0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ec4:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ec8:	andeq	r0, r1, r4, ror #31
   10ecc:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ed0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ed4:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ed8:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10edc:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ee0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ee4:	ldrdeq	r0, [r1], -ip
   10ee8:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10eec:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ef0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ef4:			; <UNDEFINED> instruction: 0x00010fbc
   10ef8:	andeq	r0, r1, r8, lsl #31
   10efc:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10f00:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10f04:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10f08:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10f0c:	andeq	r0, r1, ip, ror pc
   10f10:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10f14:	andeq	r0, r1, ip, asr #30
   10f18:	andeq	r0, r1, ip, lsl pc
   10f1c:	mov	r4, #1
   10f20:	ldr	r0, [sl]
   10f24:	strb	r4, [r5, #121]	; 0x79
   10f28:	bl	10b98 <getpwnam@plt>
   10f2c:	cmp	r0, #0
   10f30:	beq	11144 <__assert_fail@plt+0x36c>
   10f34:	ldr	r3, [r0, #8]
   10f38:	strb	r4, [r5, #128]	; 0x80
   10f3c:	str	r3, [r5, #124]	; 0x7c
   10f40:	str	r3, [r5, #132]	; 0x84
   10f44:	strb	r4, [r5, #136]	; 0x88
   10f48:	b	10e58 <__assert_fail@plt+0x80>
   10f4c:	add	r1, sp, #20
   10f50:	ldr	r0, [sl]
   10f54:	bl	12634 <__assert_fail@plt+0x185c>
   10f58:	cmp	r0, #0
   10f5c:	beq	11220 <__assert_fail@plt+0x448>
   10f60:	ldr	r2, [sp, #20]
   10f64:	ldr	r3, [pc, #2116]	; 117b0 <__assert_fail@plt+0x9d8>
   10f68:	mov	r1, #1
   10f6c:	strb	r1, [r5, #108]	; 0x6c
   10f70:	mul	r3, r3, r2
   10f74:	str	r3, [r5, #112]	; 0x70
   10f78:	b	10e58 <__assert_fail@plt+0x80>
   10f7c:	mov	r3, #1
   10f80:	strb	r3, [r5, #120]	; 0x78
   10f84:	b	10e58 <__assert_fail@plt+0x80>
   10f88:	add	r1, sp, #24
   10f8c:	ldr	r0, [sl]
   10f90:	bl	12634 <__assert_fail@plt+0x185c>
   10f94:	cmp	r0, #0
   10f98:	beq	11258 <__assert_fail@plt+0x480>
   10f9c:	ldr	r3, [sp, #24]
   10fa0:	sxth	r2, r3
   10fa4:	cmp	r3, r2
   10fa8:	str	r2, [sp, #12]
   10fac:	bne	11258 <__assert_fail@plt+0x480>
   10fb0:	mov	r3, #1
   10fb4:	strb	r3, [r5, #119]	; 0x77
   10fb8:	b	10e58 <__assert_fail@plt+0x80>
   10fbc:	add	r1, sp, #16
   10fc0:	ldr	r0, [sl]
   10fc4:	bl	12634 <__assert_fail@plt+0x185c>
   10fc8:	cmp	r0, #0
   10fcc:	beq	11220 <__assert_fail@plt+0x448>
   10fd0:	mov	r3, #1
   10fd4:	strb	r3, [r5, #118]	; 0x76
   10fd8:	b	10e58 <__assert_fail@plt+0x80>
   10fdc:	mov	r0, #0
   10fe0:	bl	118d4 <__assert_fail@plt+0xafc>
   10fe4:	mov	r3, #1
   10fe8:	strb	r3, [r5, #117]	; 0x75
   10fec:	b	10e58 <__assert_fail@plt+0x80>
   10ff0:	mov	r0, #2
   10ff4:	bl	118d4 <__assert_fail@plt+0xafc>
   10ff8:	ldr	r4, [pc, #1972]	; 117b4 <__assert_fail@plt+0x9dc>
   10ffc:	ldr	r3, [r4]
   11000:	cmp	r3, r7
   11004:	blt	111e0 <__assert_fail@plt+0x408>
   11008:	ldr	r4, [pc, #1920]	; 11790 <__assert_fail@plt+0x9b8>
   1100c:	ldrb	r3, [r4, #108]	; 0x6c
   11010:	ldrb	r2, [r4, #118]	; 0x76
   11014:	cmp	r3, #0
   11018:	bne	111a0 <__assert_fail@plt+0x3c8>
   1101c:	cmp	r2, #0
   11020:	bne	11030 <__assert_fail@plt+0x258>
   11024:	ldrb	r3, [r4, #119]	; 0x77
   11028:	cmp	r3, #0
   1102c:	beq	111c0 <__assert_fail@plt+0x3e8>
   11030:	ldr	r1, [pc, #1920]	; 117b8 <__assert_fail@plt+0x9e0>
   11034:	ldr	r0, [pc, #1920]	; 117bc <__assert_fail@plt+0x9e4>
   11038:	bl	10da8 <fopen64@plt>
   1103c:	str	r0, [r4, #104]	; 0x68
   11040:	ldr	r0, [r4, #104]	; 0x68
   11044:	cmp	r0, #0
   11048:	beq	1126c <__assert_fail@plt+0x494>
   1104c:	bl	10d30 <fileno@plt>
   11050:	ldr	r2, [pc, #1848]	; 11790 <__assert_fail@plt+0x9b8>
   11054:	mov	r1, r0
   11058:	mov	r0, #3
   1105c:	bl	10c40 <__fxstat64@plt>
   11060:	cmp	r0, #0
   11064:	bne	112bc <__assert_fail@plt+0x4e4>
   11068:	ldrb	r3, [r4, #118]	; 0x76
   1106c:	cmp	r3, #0
   11070:	bne	11374 <__assert_fail@plt+0x59c>
   11074:	ldrb	r3, [r4, #119]	; 0x77
   11078:	cmp	r3, #0
   1107c:	bne	112d0 <__assert_fail@plt+0x4f8>
   11080:	ldrb	r3, [r4, #120]	; 0x78
   11084:	cmp	r3, #0
   11088:	bne	11418 <__assert_fail@plt+0x640>
   1108c:	ldrb	r3, [r4, #118]	; 0x76
   11090:	cmp	r3, #0
   11094:	bne	110bc <__assert_fail@plt+0x2e4>
   11098:	ldrb	r3, [r4, #119]	; 0x77
   1109c:	cmp	r3, #0
   110a0:	bne	110bc <__assert_fail@plt+0x2e4>
   110a4:	ldrb	r3, [r4, #120]	; 0x78
   110a8:	cmp	r3, #0
   110ac:	beq	11680 <__assert_fail@plt+0x8a8>
   110b0:	ldrb	r3, [r4, #120]	; 0x78
   110b4:	cmp	r3, #0
   110b8:	beq	11604 <__assert_fail@plt+0x82c>
   110bc:	ldr	r5, [r4, #104]	; 0x68
   110c0:	mov	r0, r5
   110c4:	bl	10bec <ferror@plt>
   110c8:	cmp	r0, #0
   110cc:	bne	110e0 <__assert_fail@plt+0x308>
   110d0:	mov	r0, r5
   110d4:	bl	10bd4 <fflush@plt>
   110d8:	cmp	r0, #0
   110dc:	beq	114e0 <__assert_fail@plt+0x708>
   110e0:	ldr	r3, [pc, #1752]	; 117c0 <__assert_fail@plt+0x9e8>
   110e4:	mov	r2, #5
   110e8:	ldr	r1, [pc, #1748]	; 117c4 <__assert_fail@plt+0x9ec>
   110ec:	mov	r0, #0
   110f0:	ldr	r5, [r3]
   110f4:	bl	10c04 <dcgettext@plt>
   110f8:	mov	r6, r0
   110fc:	bl	10d0c <__errno_location@plt>
   11100:	ldr	r7, [fp]
   11104:	ldr	r0, [r0]
   11108:	bl	10c94 <strerror@plt>
   1110c:	ldr	r1, [pc, #1704]	; 117bc <__assert_fail@plt+0x9e4>
   11110:	mov	r3, r7
   11114:	mov	r2, r6
   11118:	str	r1, [sp]
   1111c:	mov	r1, #1
   11120:	str	r0, [sp, #4]
   11124:	mov	r0, r5
   11128:	bl	10d3c <__fprintf_chk@plt>
   1112c:	ldr	r0, [r4, #104]	; 0x68
   11130:	bl	10d54 <fclose@plt>
   11134:	mov	r3, #1
   11138:	strb	r3, [r4, #137]	; 0x89
   1113c:	ldrb	r0, [r4, #137]	; 0x89
   11140:	bl	10cdc <exit@plt>
   11144:	ldr	r2, [pc, #1660]	; 117c8 <__assert_fail@plt+0x9f0>
   11148:	ldr	r0, [sl]
   1114c:	add	r3, r2, #8
   11150:	str	r3, [sp]
   11154:	sub	r1, r2, #4
   11158:	ldr	r3, [sp, #8]
   1115c:	bl	121b4 <__assert_fail@plt+0x13dc>
   11160:	cmp	r0, #0
   11164:	bne	10e58 <__assert_fail@plt+0x80>
   11168:	ldr	r3, [pc, #1616]	; 117c0 <__assert_fail@plt+0x9e8>
   1116c:	mov	r2, #5
   11170:	ldr	r1, [pc, #1620]	; 117cc <__assert_fail@plt+0x9f4>
   11174:	ldr	r5, [r3]
   11178:	bl	10c04 <dcgettext@plt>
   1117c:	ldr	r2, [sl]
   11180:	ldr	r3, [fp]
   11184:	mov	r1, r4
   11188:	str	r2, [sp]
   1118c:	mov	r2, r0
   11190:	mov	r0, r5
   11194:	bl	10d3c <__fprintf_chk@plt>
   11198:	mov	r0, #3
   1119c:	bl	10cdc <exit@plt>
   111a0:	cmp	r2, #0
   111a4:	bne	10ff0 <__assert_fail@plt+0x218>
   111a8:	ldrb	r3, [r4, #119]	; 0x77
   111ac:	cmp	r3, #0
   111b0:	bne	10ff0 <__assert_fail@plt+0x218>
   111b4:	ldrb	r3, [r4, #120]	; 0x78
   111b8:	cmp	r3, #0
   111bc:	bne	10ff0 <__assert_fail@plt+0x218>
   111c0:	ldrb	r3, [r4, #120]	; 0x78
   111c4:	cmp	r3, #0
   111c8:	bne	11030 <__assert_fail@plt+0x258>
   111cc:	ldr	r1, [pc, #1532]	; 117d0 <__assert_fail@plt+0x9f8>
   111d0:	ldr	r0, [pc, #1508]	; 117bc <__assert_fail@plt+0x9e4>
   111d4:	bl	10da8 <fopen64@plt>
   111d8:	str	r0, [r4, #104]	; 0x68
   111dc:	b	11040 <__assert_fail@plt+0x268>
   111e0:	ldr	r3, [pc, #1496]	; 117c0 <__assert_fail@plt+0x9e8>
   111e4:	mov	r2, #5
   111e8:	ldr	r1, [pc, #1508]	; 117d4 <__assert_fail@plt+0x9fc>
   111ec:	mov	r0, #0
   111f0:	ldr	r5, [r3]
   111f4:	bl	10c04 <dcgettext@plt>
   111f8:	ldr	r2, [r4]
   111fc:	ldr	r3, [fp]
   11200:	mov	r1, #1
   11204:	ldr	r2, [r6, r2, lsl #2]
   11208:	str	r2, [sp]
   1120c:	mov	r2, r0
   11210:	mov	r0, r5
   11214:	bl	10d3c <__fprintf_chk@plt>
   11218:	mov	r0, #1
   1121c:	bl	118d4 <__assert_fail@plt+0xafc>
   11220:	ldr	r3, [pc, #1432]	; 117c0 <__assert_fail@plt+0x9e8>
   11224:	ldr	r1, [pc, #1452]	; 117d8 <__assert_fail@plt+0xa00>
   11228:	mov	r2, #5
   1122c:	ldr	r4, [r3]
   11230:	bl	10c04 <dcgettext@plt>
   11234:	ldr	r2, [sl]
   11238:	ldr	r3, [fp]
   1123c:	mov	r1, #1
   11240:	str	r2, [sp]
   11244:	mov	r2, r0
   11248:	mov	r0, r4
   1124c:	bl	10d3c <__fprintf_chk@plt>
   11250:	mov	r0, #3
   11254:	bl	10cdc <exit@plt>
   11258:	ldr	r3, [pc, #1376]	; 117c0 <__assert_fail@plt+0x9e8>
   1125c:	mov	r2, #5
   11260:	ldr	r1, [pc, #1392]	; 117d8 <__assert_fail@plt+0xa00>
   11264:	mov	r0, #0
   11268:	b	1122c <__assert_fail@plt+0x454>
   1126c:	ldr	r3, [pc, #1356]	; 117c0 <__assert_fail@plt+0x9e8>
   11270:	ldr	r1, [pc, #1380]	; 117dc <__assert_fail@plt+0xa04>
   11274:	mov	r2, #5
   11278:	ldr	r4, [r3]
   1127c:	bl	10c04 <dcgettext@plt>
   11280:	mov	r5, r0
   11284:	bl	10d0c <__errno_location@plt>
   11288:	ldr	r6, [fp]
   1128c:	ldr	r0, [r0]
   11290:	bl	10c94 <strerror@plt>
   11294:	ldr	r1, [pc, #1312]	; 117bc <__assert_fail@plt+0x9e4>
   11298:	mov	r3, r6
   1129c:	str	r1, [sp]
   112a0:	mov	r2, r5
   112a4:	mov	r1, #1
   112a8:	str	r0, [sp, #4]
   112ac:	mov	r0, r4
   112b0:	bl	10d3c <__fprintf_chk@plt>
   112b4:	mov	r0, #1
   112b8:	bl	10cdc <exit@plt>
   112bc:	ldr	r3, [pc, #1276]	; 117c0 <__assert_fail@plt+0x9e8>
   112c0:	mov	r2, #5
   112c4:	ldr	r1, [pc, #1300]	; 117e0 <__assert_fail@plt+0xa08>
   112c8:	mov	r0, #0
   112cc:	b	11278 <__assert_fail@plt+0x4a0>
   112d0:	ldrb	r3, [r4, #121]	; 0x79
   112d4:	cmp	r3, #0
   112d8:	beq	11304 <__assert_fail@plt+0x52c>
   112dc:	ldrb	r3, [r4, #128]	; 0x80
   112e0:	cmp	r3, #0
   112e4:	beq	11304 <__assert_fail@plt+0x52c>
   112e8:	ldrb	r3, [r4, #136]	; 0x88
   112ec:	cmp	r3, #0
   112f0:	beq	11304 <__assert_fail@plt+0x52c>
   112f4:	ldr	r0, [r4, #124]	; 0x7c
   112f8:	ldr	r3, [r4, #132]	; 0x84
   112fc:	cmp	r0, r3
   11300:	beq	11744 <__assert_fail@plt+0x96c>
   11304:	ldrb	r3, [r4, #117]	; 0x75
   11308:	cmp	r3, #0
   1130c:	beq	11610 <__assert_fail@plt+0x838>
   11310:	mov	r3, #0
   11314:	mov	r2, #24
   11318:	ldrd	r0, [r4, #48]	; 0x30
   1131c:	bl	126cc <__assert_fail@plt+0x18f4>
   11320:	ldrb	r5, [r4, #128]	; 0x80
   11324:	ldrb	r3, [r4, #136]	; 0x88
   11328:	mov	r7, #1
   1132c:	ldr	r8, [sp, #12]
   11330:	cmp	r0, #1
   11334:	mov	r6, r0
   11338:	subhi	r6, r0, #1
   1133c:	cmp	r5, #0
   11340:	ldrne	r5, [r4, #124]	; 0x7c
   11344:	cmp	r3, #0
   11348:	ldrne	r6, [r4, #132]	; 0x84
   1134c:	b	11368 <__assert_fail@plt+0x590>
   11350:	mov	r0, r5
   11354:	mov	r1, r8
   11358:	bl	11bd4 <__assert_fail@plt+0xdfc>
   1135c:	add	r5, r5, #1
   11360:	cmp	r0, #0
   11364:	strbne	r7, [r4, #137]	; 0x89
   11368:	cmp	r5, r6
   1136c:	bls	11350 <__assert_fail@plt+0x578>
   11370:	b	11080 <__assert_fail@plt+0x2a8>
   11374:	ldrb	r3, [r4, #121]	; 0x79
   11378:	ldr	r7, [sp, #16]
   1137c:	cmp	r3, #0
   11380:	beq	113ac <__assert_fail@plt+0x5d4>
   11384:	ldrb	r3, [r4, #128]	; 0x80
   11388:	cmp	r3, #0
   1138c:	beq	113ac <__assert_fail@plt+0x5d4>
   11390:	ldrb	r3, [r4, #136]	; 0x88
   11394:	cmp	r3, #0
   11398:	beq	113ac <__assert_fail@plt+0x5d4>
   1139c:	ldr	r0, [r4, #124]	; 0x7c
   113a0:	ldr	r3, [r4, #132]	; 0x84
   113a4:	cmp	r0, r3
   113a8:	beq	11770 <__assert_fail@plt+0x998>
   113ac:	ldrb	r3, [r4, #117]	; 0x75
   113b0:	cmp	r3, #0
   113b4:	beq	11594 <__assert_fail@plt+0x7bc>
   113b8:	mov	r3, #0
   113bc:	mov	r2, #24
   113c0:	ldrd	r0, [r4, #48]	; 0x30
   113c4:	bl	126cc <__assert_fail@plt+0x18f4>
   113c8:	ldrb	r5, [r4, #128]	; 0x80
   113cc:	ldrb	r3, [r4, #136]	; 0x88
   113d0:	mov	r8, #1
   113d4:	cmp	r0, #1
   113d8:	mov	r6, r0
   113dc:	subhi	r6, r0, #1
   113e0:	cmp	r5, #0
   113e4:	ldrne	r5, [r4, #124]	; 0x7c
   113e8:	cmp	r3, #0
   113ec:	ldrne	r6, [r4, #132]	; 0x84
   113f0:	b	1140c <__assert_fail@plt+0x634>
   113f4:	mov	r0, r5
   113f8:	mov	r1, r7
   113fc:	bl	11a14 <__assert_fail@plt+0xc3c>
   11400:	add	r5, r5, #1
   11404:	cmp	r0, #0
   11408:	strbne	r8, [r4, #137]	; 0x89
   1140c:	cmp	r5, r6
   11410:	bls	113f4 <__assert_fail@plt+0x61c>
   11414:	b	11074 <__assert_fail@plt+0x29c>
   11418:	ldrb	r3, [r4, #121]	; 0x79
   1141c:	ldrb	r5, [r4, #136]	; 0x88
   11420:	cmp	r3, #0
   11424:	beq	114c0 <__assert_fail@plt+0x6e8>
   11428:	ldrb	r3, [r4, #128]	; 0x80
   1142c:	cmp	r3, #0
   11430:	beq	114c0 <__assert_fail@plt+0x6e8>
   11434:	cmp	r5, #0
   11438:	beq	11508 <__assert_fail@plt+0x730>
   1143c:	ldr	r0, [r4, #124]	; 0x7c
   11440:	ldr	r3, [r4, #132]	; 0x84
   11444:	cmp	r0, r3
   11448:	beq	1175c <__assert_fail@plt+0x984>
   1144c:	mov	r2, #24
   11450:	mov	r3, #0
   11454:	ldrd	r0, [r4, #48]	; 0x30
   11458:	bl	126cc <__assert_fail@plt+0x18f4>
   1145c:	cmp	r0, #1
   11460:	mov	r6, r0
   11464:	bls	11474 <__assert_fail@plt+0x69c>
   11468:	sub	r6, r6, #1
   1146c:	cmp	r5, #0
   11470:	beq	11480 <__assert_fail@plt+0x6a8>
   11474:	ldr	r3, [r4, #132]	; 0x84
   11478:	cmp	r6, r3
   1147c:	movcs	r6, r3
   11480:	ldrb	r3, [r4, #117]	; 0x75
   11484:	cmp	r3, #0
   11488:	beq	11538 <__assert_fail@plt+0x760>
   1148c:	ldrb	r5, [r4, #128]	; 0x80
   11490:	cmp	r5, #0
   11494:	bne	11530 <__assert_fail@plt+0x758>
   11498:	mov	r7, #1
   1149c:	b	114b4 <__assert_fail@plt+0x6dc>
   114a0:	mov	r0, r5
   114a4:	bl	11d94 <__assert_fail@plt+0xfbc>
   114a8:	add	r5, r5, #1
   114ac:	cmp	r0, #0
   114b0:	strbne	r7, [r4, #137]	; 0x89
   114b4:	cmp	r5, r6
   114b8:	bls	114a0 <__assert_fail@plt+0x6c8>
   114bc:	b	1108c <__assert_fail@plt+0x2b4>
   114c0:	mov	r2, #24
   114c4:	mov	r3, #0
   114c8:	ldrd	r0, [r4, #48]	; 0x30
   114cc:	bl	126cc <__assert_fail@plt+0x18f4>
   114d0:	cmp	r0, #1
   114d4:	mov	r6, r0
   114d8:	bhi	11468 <__assert_fail@plt+0x690>
   114dc:	b	1146c <__assert_fail@plt+0x694>
   114e0:	ldr	r0, [r4, #104]	; 0x68
   114e4:	bl	10d30 <fileno@plt>
   114e8:	bl	10ba4 <fsync@plt>
   114ec:	cmp	r0, #0
   114f0:	bne	110e0 <__assert_fail@plt+0x308>
   114f4:	ldr	r0, [r4, #104]	; 0x68
   114f8:	bl	10d54 <fclose@plt>
   114fc:	cmp	r0, #0
   11500:	bne	110e0 <__assert_fail@plt+0x308>
   11504:	b	1113c <__assert_fail@plt+0x364>
   11508:	mov	r2, #24
   1150c:	mov	r3, #0
   11510:	ldrd	r0, [r4, #48]	; 0x30
   11514:	bl	126cc <__assert_fail@plt+0x18f4>
   11518:	cmp	r0, #1
   1151c:	mov	r6, r0
   11520:	bhi	11468 <__assert_fail@plt+0x690>
   11524:	ldrb	r3, [r4, #117]	; 0x75
   11528:	cmp	r3, #0
   1152c:	beq	11538 <__assert_fail@plt+0x760>
   11530:	ldr	r5, [r4, #124]	; 0x7c
   11534:	b	11498 <__assert_fail@plt+0x6c0>
   11538:	bl	10d00 <setpwent@plt>
   1153c:	mov	r5, #1
   11540:	bl	10c10 <getpwent@plt>
   11544:	cmp	r0, #0
   11548:	beq	1158c <__assert_fail@plt+0x7b4>
   1154c:	ldrb	r3, [r4, #121]	; 0x79
   11550:	ldr	r0, [r0, #8]
   11554:	cmp	r3, #0
   11558:	beq	1157c <__assert_fail@plt+0x7a4>
   1155c:	ldrb	r3, [r4, #128]	; 0x80
   11560:	cmp	r3, #0
   11564:	beq	11574 <__assert_fail@plt+0x79c>
   11568:	ldr	r3, [r4, #124]	; 0x7c
   1156c:	cmp	r0, r3
   11570:	bcc	11540 <__assert_fail@plt+0x768>
   11574:	cmp	r0, r6
   11578:	bhi	11540 <__assert_fail@plt+0x768>
   1157c:	bl	11d94 <__assert_fail@plt+0xfbc>
   11580:	cmp	r0, #0
   11584:	strbne	r5, [r4, #137]	; 0x89
   11588:	b	11540 <__assert_fail@plt+0x768>
   1158c:	bl	10d84 <endpwent@plt>
   11590:	b	1108c <__assert_fail@plt+0x2b4>
   11594:	bl	10d00 <setpwent@plt>
   11598:	mov	r5, #1
   1159c:	bl	10c10 <getpwent@plt>
   115a0:	cmp	r0, #0
   115a4:	beq	115fc <__assert_fail@plt+0x824>
   115a8:	ldrb	r3, [r4, #121]	; 0x79
   115ac:	ldr	r0, [r0, #8]
   115b0:	cmp	r3, #0
   115b4:	beq	115e8 <__assert_fail@plt+0x810>
   115b8:	ldrb	r3, [r4, #128]	; 0x80
   115bc:	cmp	r3, #0
   115c0:	beq	115d0 <__assert_fail@plt+0x7f8>
   115c4:	ldr	r3, [r4, #124]	; 0x7c
   115c8:	cmp	r3, r0
   115cc:	bhi	1159c <__assert_fail@plt+0x7c4>
   115d0:	ldrb	r3, [r4, #136]	; 0x88
   115d4:	cmp	r3, #0
   115d8:	beq	115e8 <__assert_fail@plt+0x810>
   115dc:	ldr	r3, [r4, #132]	; 0x84
   115e0:	cmp	r3, r0
   115e4:	bcc	1159c <__assert_fail@plt+0x7c4>
   115e8:	mov	r1, r7
   115ec:	bl	11a14 <__assert_fail@plt+0xc3c>
   115f0:	cmp	r0, #0
   115f4:	strbne	r5, [r4, #137]	; 0x89
   115f8:	b	1159c <__assert_fail@plt+0x7c4>
   115fc:	bl	10d84 <endpwent@plt>
   11600:	b	11074 <__assert_fail@plt+0x29c>
   11604:	ldr	r0, [r4, #104]	; 0x68
   11608:	bl	10d54 <fclose@plt>
   1160c:	b	1113c <__assert_fail@plt+0x364>
   11610:	bl	10d00 <setpwent@plt>
   11614:	mov	r5, #1
   11618:	bl	10c10 <getpwent@plt>
   1161c:	cmp	r0, #0
   11620:	beq	11678 <__assert_fail@plt+0x8a0>
   11624:	ldrb	r3, [r4, #121]	; 0x79
   11628:	ldr	r0, [r0, #8]
   1162c:	cmp	r3, #0
   11630:	beq	11664 <__assert_fail@plt+0x88c>
   11634:	ldrb	r3, [r4, #128]	; 0x80
   11638:	cmp	r3, #0
   1163c:	beq	1164c <__assert_fail@plt+0x874>
   11640:	ldr	r3, [r4, #124]	; 0x7c
   11644:	cmp	r3, r0
   11648:	bhi	11618 <__assert_fail@plt+0x840>
   1164c:	ldrb	r3, [r4, #136]	; 0x88
   11650:	cmp	r3, #0
   11654:	beq	11664 <__assert_fail@plt+0x88c>
   11658:	ldr	r3, [r4, #132]	; 0x84
   1165c:	cmp	r3, r0
   11660:	bcc	11618 <__assert_fail@plt+0x840>
   11664:	ldr	r1, [sp, #12]
   11668:	bl	11bd4 <__assert_fail@plt+0xdfc>
   1166c:	cmp	r0, #0
   11670:	strbne	r5, [r4, #137]	; 0x89
   11674:	b	11618 <__assert_fail@plt+0x840>
   11678:	bl	10d84 <endpwent@plt>
   1167c:	b	11080 <__assert_fail@plt+0x2a8>
   11680:	ldrb	r3, [r4, #121]	; 0x79
   11684:	cmp	r3, #0
   11688:	beq	116b4 <__assert_fail@plt+0x8dc>
   1168c:	ldrb	r3, [r4, #128]	; 0x80
   11690:	cmp	r3, #0
   11694:	beq	116b4 <__assert_fail@plt+0x8dc>
   11698:	ldrb	r3, [r4, #136]	; 0x88
   1169c:	cmp	r3, #0
   116a0:	beq	116b4 <__assert_fail@plt+0x8dc>
   116a4:	ldr	r0, [r4, #124]	; 0x7c
   116a8:	ldr	r3, [r4, #132]	; 0x84
   116ac:	cmp	r0, r3
   116b0:	beq	11734 <__assert_fail@plt+0x95c>
   116b4:	bl	10d00 <setpwent@plt>
   116b8:	bl	10c10 <getpwent@plt>
   116bc:	cmp	r0, #0
   116c0:	beq	11714 <__assert_fail@plt+0x93c>
   116c4:	ldrb	r3, [r4, #121]	; 0x79
   116c8:	cmp	r3, #0
   116cc:	beq	11708 <__assert_fail@plt+0x930>
   116d0:	ldrb	r3, [r4, #128]	; 0x80
   116d4:	cmp	r3, #0
   116d8:	beq	116ec <__assert_fail@plt+0x914>
   116dc:	ldr	r2, [r0, #8]
   116e0:	ldr	r3, [r4, #124]	; 0x7c
   116e4:	cmp	r2, r3
   116e8:	bcc	116b8 <__assert_fail@plt+0x8e0>
   116ec:	ldrb	r3, [r4, #136]	; 0x88
   116f0:	cmp	r3, #0
   116f4:	beq	11708 <__assert_fail@plt+0x930>
   116f8:	ldr	r2, [r0, #8]
   116fc:	ldr	r3, [r4, #132]	; 0x84
   11700:	cmp	r2, r3
   11704:	bhi	116b8 <__assert_fail@plt+0x8e0>
   11708:	ldrb	r1, [r4, #117]	; 0x75
   1170c:	bl	11f10 <__assert_fail@plt+0x1138>
   11710:	b	116b8 <__assert_fail@plt+0x8e0>
   11714:	bl	10d84 <endpwent@plt>
   11718:	ldrb	r3, [r4, #118]	; 0x76
   1171c:	cmp	r3, #0
   11720:	bne	110bc <__assert_fail@plt+0x2e4>
   11724:	ldrb	r3, [r4, #119]	; 0x77
   11728:	cmp	r3, #0
   1172c:	beq	110b0 <__assert_fail@plt+0x2d8>
   11730:	b	110bc <__assert_fail@plt+0x2e4>
   11734:	bl	10bc8 <getpwuid@plt>
   11738:	mov	r1, #1
   1173c:	bl	11f10 <__assert_fail@plt+0x1138>
   11740:	b	11718 <__assert_fail@plt+0x940>
   11744:	ldr	r1, [sp, #12]
   11748:	bl	11bd4 <__assert_fail@plt+0xdfc>
   1174c:	cmp	r0, #0
   11750:	movne	r3, #1
   11754:	strbne	r3, [r4, #137]	; 0x89
   11758:	b	11080 <__assert_fail@plt+0x2a8>
   1175c:	bl	11d94 <__assert_fail@plt+0xfbc>
   11760:	cmp	r0, #0
   11764:	movne	r3, #1
   11768:	strbne	r3, [r4, #137]	; 0x89
   1176c:	b	1108c <__assert_fail@plt+0x2b4>
   11770:	mov	r1, r7
   11774:	bl	11a14 <__assert_fail@plt+0xc3c>
   11778:	cmp	r0, #0
   1177c:	movne	r3, #1
   11780:	strbne	r3, [r4, #137]	; 0x89
   11784:	b	11074 <__assert_fail@plt+0x29c>
   11788:	andeq	r3, r2, r0, lsr #28
   1178c:	andeq	r4, r2, ip, lsr r1
   11790:	strheq	r4, [r2], -r0
   11794:	andeq	r3, r1, ip, lsr #32
   11798:	andeq	r4, r2, r8
   1179c:	andeq	r2, r1, ip, asr lr
   117a0:	andeq	r4, r2, r8, lsr #1
   117a4:	strdeq	r2, [r1], -r8
   117a8:	andeq	r2, r1, ip, lsl #28
   117ac:	andeq	r2, r1, r4, lsl lr
   117b0:	andeq	r5, r1, r0, lsl #3
   117b4:	muleq	r2, r8, r0
   117b8:	andeq	r2, r1, ip, lsl #29
   117bc:	muleq	r1, r0, lr
   117c0:	andeq	r4, r2, r0, lsr #1
   117c4:	andeq	r2, r1, r4, ror #29
   117c8:	andeq	r4, r2, r0, lsr r1
   117cc:	andeq	r2, r1, ip, lsr lr
   117d0:	andeq	r2, r1, r4, lsr #29
   117d4:	andeq	r2, r1, ip, ror #28
   117d8:	andeq	r2, r1, r8, lsl lr
   117dc:	andeq	r2, r1, r8, lsr #29
   117e0:	andeq	r2, r1, r0, asr #29
   117e4:	mov	fp, #0
   117e8:	mov	lr, #0
   117ec:	pop	{r1}		; (ldr r1, [sp], #4)
   117f0:	mov	r2, sp
   117f4:	push	{r2}		; (str r2, [sp, #-4]!)
   117f8:	push	{r0}		; (str r0, [sp, #-4]!)
   117fc:	ldr	ip, [pc, #16]	; 11814 <__assert_fail@plt+0xa3c>
   11800:	push	{ip}		; (str ip, [sp, #-4]!)
   11804:	ldr	r0, [pc, #12]	; 11818 <__assert_fail@plt+0xa40>
   11808:	ldr	r3, [pc, #12]	; 1181c <__assert_fail@plt+0xa44>
   1180c:	bl	10c88 <__libc_start_main@plt>
   11810:	bl	10dcc <abort@plt>
   11814:	andeq	r2, r1, r8, ror #18
   11818:	andeq	r0, r1, r4, ror #27
   1181c:	andeq	r2, r1, r8, lsl #18
   11820:	ldr	r3, [pc, #20]	; 1183c <__assert_fail@plt+0xa64>
   11824:	ldr	r2, [pc, #20]	; 11840 <__assert_fail@plt+0xa68>
   11828:	add	r3, pc, r3
   1182c:	ldr	r2, [r3, r2]
   11830:	cmp	r2, #0
   11834:	bxeq	lr
   11838:	b	10cb8 <__gmon_start__@plt>
   1183c:	strdeq	r2, [r1], -r4
   11840:	ldrdeq	r0, [r0], -r4
   11844:	ldr	r0, [pc, #24]	; 11864 <__assert_fail@plt+0xa8c>
   11848:	ldr	r3, [pc, #24]	; 11868 <__assert_fail@plt+0xa90>
   1184c:	cmp	r3, r0
   11850:	bxeq	lr
   11854:	ldr	r3, [pc, #16]	; 1186c <__assert_fail@plt+0xa94>
   11858:	cmp	r3, #0
   1185c:	bxeq	lr
   11860:	bx	r3
   11864:	muleq	r2, r8, r0
   11868:	muleq	r2, r8, r0
   1186c:	andeq	r0, r0, r0
   11870:	ldr	r0, [pc, #36]	; 1189c <__assert_fail@plt+0xac4>
   11874:	ldr	r1, [pc, #36]	; 118a0 <__assert_fail@plt+0xac8>
   11878:	sub	r1, r1, r0
   1187c:	asr	r1, r1, #2
   11880:	add	r1, r1, r1, lsr #31
   11884:	asrs	r1, r1, #1
   11888:	bxeq	lr
   1188c:	ldr	r3, [pc, #16]	; 118a4 <__assert_fail@plt+0xacc>
   11890:	cmp	r3, #0
   11894:	bxeq	lr
   11898:	bx	r3
   1189c:	muleq	r2, r8, r0
   118a0:	muleq	r2, r8, r0
   118a4:	andeq	r0, r0, r0
   118a8:	push	{r4, lr}
   118ac:	ldr	r4, [pc, #24]	; 118cc <__assert_fail@plt+0xaf4>
   118b0:	ldrb	r3, [r4]
   118b4:	cmp	r3, #0
   118b8:	popne	{r4, pc}
   118bc:	bl	11844 <__assert_fail@plt+0xa6c>
   118c0:	mov	r3, #1
   118c4:	strb	r3, [r4]
   118c8:	pop	{r4, pc}
   118cc:	andeq	r4, r2, ip, lsr #1
   118d0:	b	11870 <__assert_fail@plt+0xa98>
   118d4:	push	{r4, r5, r6, lr}
   118d8:	subs	r5, r0, #0
   118dc:	mov	r2, #5
   118e0:	ldrne	r3, [pc, #252]	; 119e4 <__assert_fail@plt+0xc0c>
   118e4:	ldreq	r3, [pc, #252]	; 119e8 <__assert_fail@plt+0xc10>
   118e8:	ldr	r1, [pc, #252]	; 119ec <__assert_fail@plt+0xc14>
   118ec:	mov	r0, #0
   118f0:	ldr	r4, [r3]
   118f4:	bl	10c04 <dcgettext@plt>
   118f8:	ldr	r3, [pc, #240]	; 119f0 <__assert_fail@plt+0xc18>
   118fc:	mov	r1, #1
   11900:	ldr	r3, [r3]
   11904:	mov	r2, r0
   11908:	mov	r0, r4
   1190c:	bl	10d3c <__fprintf_chk@plt>
   11910:	mov	r2, #5
   11914:	ldr	r1, [pc, #216]	; 119f4 <__assert_fail@plt+0xc1c>
   11918:	mov	r0, #0
   1191c:	bl	10c04 <dcgettext@plt>
   11920:	mov	r1, r4
   11924:	bl	10dc0 <fputs@plt>
   11928:	mov	r2, #5
   1192c:	ldr	r1, [pc, #196]	; 119f8 <__assert_fail@plt+0xc20>
   11930:	mov	r0, #0
   11934:	bl	10c04 <dcgettext@plt>
   11938:	mov	r1, r4
   1193c:	bl	10dc0 <fputs@plt>
   11940:	mov	r2, #5
   11944:	ldr	r1, [pc, #176]	; 119fc <__assert_fail@plt+0xc24>
   11948:	mov	r0, #0
   1194c:	bl	10c04 <dcgettext@plt>
   11950:	mov	r1, r4
   11954:	bl	10dc0 <fputs@plt>
   11958:	mov	r2, #5
   1195c:	ldr	r1, [pc, #156]	; 11a00 <__assert_fail@plt+0xc28>
   11960:	mov	r0, #0
   11964:	bl	10c04 <dcgettext@plt>
   11968:	mov	r1, r4
   1196c:	bl	10dc0 <fputs@plt>
   11970:	mov	r2, #5
   11974:	ldr	r1, [pc, #136]	; 11a04 <__assert_fail@plt+0xc2c>
   11978:	mov	r0, #0
   1197c:	bl	10c04 <dcgettext@plt>
   11980:	mov	r1, r4
   11984:	bl	10dc0 <fputs@plt>
   11988:	mov	r2, #5
   1198c:	ldr	r1, [pc, #116]	; 11a08 <__assert_fail@plt+0xc30>
   11990:	mov	r0, #0
   11994:	bl	10c04 <dcgettext@plt>
   11998:	mov	r1, r4
   1199c:	bl	10dc0 <fputs@plt>
   119a0:	mov	r2, #5
   119a4:	ldr	r1, [pc, #96]	; 11a0c <__assert_fail@plt+0xc34>
   119a8:	mov	r0, #0
   119ac:	bl	10c04 <dcgettext@plt>
   119b0:	mov	r1, r4
   119b4:	bl	10dc0 <fputs@plt>
   119b8:	mov	r2, #5
   119bc:	ldr	r1, [pc, #76]	; 11a10 <__assert_fail@plt+0xc38>
   119c0:	mov	r0, #0
   119c4:	bl	10c04 <dcgettext@plt>
   119c8:	mov	r1, r4
   119cc:	bl	10dc0 <fputs@plt>
   119d0:	mov	r1, r4
   119d4:	mov	r0, #10
   119d8:	bl	10d9c <fputc@plt>
   119dc:	mov	r0, r5
   119e0:	bl	10cdc <exit@plt>
   119e4:	andeq	r4, r2, r0, lsr #1
   119e8:	andeq	r4, r2, r4, lsr #1
   119ec:			; <UNDEFINED> instruction: 0x000129b0
   119f0:	andeq	r4, r2, ip, lsr r1
   119f4:	ldrdeq	r2, [r1], -r0
   119f8:	andeq	r2, r1, r8, lsl sl
   119fc:	andeq	r2, r1, ip, asr sl
   11a00:			; <UNDEFINED> instruction: 0x00012ab0
   11a04:	strdeq	r2, [r1], -ip
   11a08:	andeq	r2, r1, r4, asr #22
   11a0c:	andeq	r2, r1, r0, lsl #23
   11a10:	ldrdeq	r2, [r1], -r0
   11a14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a18:	mov	fp, #24
   11a1c:	ldr	r4, [pc, #392]	; 11bac <__assert_fail@plt+0xdd4>
   11a20:	umull	r6, r7, r0, fp
   11a24:	ldrd	r2, [r4, #48]	; 0x30
   11a28:	ldr	r5, [pc, #384]	; 11bb0 <__assert_fail@plt+0xdd8>
   11a2c:	adds	r8, r6, #23
   11a30:	adc	r9, r7, #0
   11a34:	cmp	r8, r2
   11a38:	sub	sp, sp, #52	; 0x34
   11a3c:	sbcs	r3, r9, r3
   11a40:	ldr	r3, [r5]
   11a44:	mov	sl, r0
   11a48:	str	r1, [sp, #12]
   11a4c:	str	r3, [sp, #44]	; 0x2c
   11a50:	bge	11b38 <__assert_fail@plt+0xd60>
   11a54:	mov	r3, #0
   11a58:	ldr	r0, [r4, #104]	; 0x68
   11a5c:	mov	r2, r6
   11a60:	str	r3, [sp]
   11a64:	mov	r3, r7
   11a68:	bl	10d60 <fseeko64@plt>
   11a6c:	subs	r9, r0, #0
   11a70:	bne	11b94 <__assert_fail@plt+0xdbc>
   11a74:	add	r8, sp, #20
   11a78:	mov	r1, fp
   11a7c:	mov	r0, r8
   11a80:	ldr	r3, [r4, #104]	; 0x68
   11a84:	mov	r2, #1
   11a88:	bl	10c70 <fread@plt>
   11a8c:	cmp	r0, #1
   11a90:	bne	11b70 <__assert_fail@plt+0xd98>
   11a94:	ldr	r2, [sp, #40]	; 0x28
   11a98:	ldr	ip, [sp, #12]
   11a9c:	cmp	ip, r2
   11aa0:	moveq	r0, #0
   11aa4:	beq	11b20 <__assert_fail@plt+0xd48>
   11aa8:	mov	r1, #0
   11aac:	ldr	r0, [r4, #104]	; 0x68
   11ab0:	mov	r2, r6
   11ab4:	mov	r3, r7
   11ab8:	str	r1, [sp]
   11abc:	str	ip, [sp, #40]	; 0x28
   11ac0:	bl	10d60 <fseeko64@plt>
   11ac4:	subs	r6, r0, #0
   11ac8:	bne	11ae8 <__assert_fail@plt+0xd10>
   11acc:	mov	r0, r8
   11ad0:	ldr	r3, [r4, #104]	; 0x68
   11ad4:	mov	r2, #1
   11ad8:	mov	r1, #24
   11adc:	bl	10c58 <fwrite@plt>
   11ae0:	cmp	r0, #1
   11ae4:	beq	11b84 <__assert_fail@plt+0xdac>
   11ae8:	ldr	r3, [pc, #196]	; 11bb4 <__assert_fail@plt+0xddc>
   11aec:	ldr	r1, [pc, #196]	; 11bb8 <__assert_fail@plt+0xde0>
   11af0:	mov	r2, #5
   11af4:	mov	r0, #0
   11af8:	ldr	r4, [r3]
   11afc:	bl	10c04 <dcgettext@plt>
   11b00:	ldr	r3, [pc, #180]	; 11bbc <__assert_fail@plt+0xde4>
   11b04:	str	sl, [sp]
   11b08:	mov	r1, #1
   11b0c:	ldr	r3, [r3]
   11b10:	mov	r2, r0
   11b14:	mov	r0, r4
   11b18:	bl	10d3c <__fprintf_chk@plt>
   11b1c:	mov	r0, #1
   11b20:	ldr	r2, [sp, #44]	; 0x2c
   11b24:	ldr	r3, [r5]
   11b28:	cmp	r2, r3
   11b2c:	bne	11ba8 <__assert_fail@plt+0xdd0>
   11b30:	add	sp, sp, #52	; 0x34
   11b34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b38:	mov	r3, #0
   11b3c:	ldr	ip, [sp, #12]
   11b40:	mov	r2, r3
   11b44:	cmp	ip, r2
   11b48:	add	r8, sp, #20
   11b4c:	str	r3, [sp, #20]
   11b50:	str	r3, [sp, #24]
   11b54:	str	r3, [sp, #28]
   11b58:	str	r3, [sp, #32]
   11b5c:	str	r3, [sp, #36]	; 0x24
   11b60:	str	r3, [sp, #40]	; 0x28
   11b64:	moveq	r0, #0
   11b68:	bne	11aa8 <__assert_fail@plt+0xcd0>
   11b6c:	b	11b20 <__assert_fail@plt+0xd48>
   11b70:	ldr	r3, [pc, #60]	; 11bb4 <__assert_fail@plt+0xddc>
   11b74:	mov	r0, r9
   11b78:	mov	r2, #5
   11b7c:	ldr	r1, [pc, #60]	; 11bc0 <__assert_fail@plt+0xde8>
   11b80:	b	11af8 <__assert_fail@plt+0xd20>
   11b84:	ldr	r0, [r4, #104]	; 0x68
   11b88:	bl	10bd4 <fflush@plt>
   11b8c:	mov	r0, r6
   11b90:	b	11b20 <__assert_fail@plt+0xd48>
   11b94:	ldr	r3, [pc, #40]	; 11bc4 <__assert_fail@plt+0xdec>
   11b98:	ldr	r2, [pc, #40]	; 11bc8 <__assert_fail@plt+0xdf0>
   11b9c:	ldr	r1, [pc, #40]	; 11bcc <__assert_fail@plt+0xdf4>
   11ba0:	ldr	r0, [pc, #40]	; 11bd0 <__assert_fail@plt+0xdf8>
   11ba4:	bl	10dd8 <__assert_fail@plt>
   11ba8:	bl	10c1c <__stack_chk_fail@plt>
   11bac:	strheq	r4, [r2], -r0
   11bb0:	andeq	r3, r2, r0, lsr #28
   11bb4:	andeq	r4, r2, r0, lsr #1
   11bb8:	strdeq	r2, [r1], -r4
   11bbc:	andeq	r4, r2, ip, lsr r1
   11bc0:	andeq	r2, r1, r8, asr #25
   11bc4:	andeq	r2, r1, r8, ror r9
   11bc8:	andeq	r0, r0, sl, asr #3
   11bcc:			; <UNDEFINED> instruction: 0x00012cb0
   11bd0:			; <UNDEFINED> instruction: 0x00012cbc
   11bd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bd8:	mov	fp, #24
   11bdc:	ldr	r4, [pc, #392]	; 11d6c <__assert_fail@plt+0xf94>
   11be0:	umull	r6, r7, r0, fp
   11be4:	ldrd	r2, [r4, #48]	; 0x30
   11be8:	ldr	r5, [pc, #384]	; 11d70 <__assert_fail@plt+0xf98>
   11bec:	adds	r8, r6, #23
   11bf0:	adc	r9, r7, #0
   11bf4:	cmp	r8, r2
   11bf8:	sub	sp, sp, #52	; 0x34
   11bfc:	sbcs	r3, r9, r3
   11c00:	ldr	r3, [r5]
   11c04:	mov	sl, r0
   11c08:	str	r1, [sp, #12]
   11c0c:	str	r3, [sp, #44]	; 0x2c
   11c10:	bge	11cf8 <__assert_fail@plt+0xf20>
   11c14:	mov	r3, #0
   11c18:	ldr	r0, [r4, #104]	; 0x68
   11c1c:	mov	r2, r6
   11c20:	str	r3, [sp]
   11c24:	mov	r3, r7
   11c28:	bl	10d60 <fseeko64@plt>
   11c2c:	subs	r9, r0, #0
   11c30:	bne	11d54 <__assert_fail@plt+0xf7c>
   11c34:	add	r8, sp, #20
   11c38:	mov	r1, fp
   11c3c:	mov	r0, r8
   11c40:	ldr	r3, [r4, #104]	; 0x68
   11c44:	mov	r2, #1
   11c48:	bl	10c70 <fread@plt>
   11c4c:	cmp	r0, #1
   11c50:	bne	11d30 <__assert_fail@plt+0xf58>
   11c54:	ldrsh	r2, [sp, #22]
   11c58:	ldr	ip, [sp, #12]
   11c5c:	cmp	ip, r2
   11c60:	moveq	r0, #0
   11c64:	beq	11ce0 <__assert_fail@plt+0xf08>
   11c68:	mov	r1, #0
   11c6c:	ldr	r0, [r4, #104]	; 0x68
   11c70:	mov	r2, r6
   11c74:	mov	r3, r7
   11c78:	str	r1, [sp]
   11c7c:	strh	ip, [sp, #22]
   11c80:	bl	10d60 <fseeko64@plt>
   11c84:	subs	r6, r0, #0
   11c88:	bne	11ca8 <__assert_fail@plt+0xed0>
   11c8c:	mov	r0, r8
   11c90:	ldr	r3, [r4, #104]	; 0x68
   11c94:	mov	r2, #1
   11c98:	mov	r1, #24
   11c9c:	bl	10c58 <fwrite@plt>
   11ca0:	cmp	r0, #1
   11ca4:	beq	11d44 <__assert_fail@plt+0xf6c>
   11ca8:	ldr	r3, [pc, #196]	; 11d74 <__assert_fail@plt+0xf9c>
   11cac:	ldr	r1, [pc, #196]	; 11d78 <__assert_fail@plt+0xfa0>
   11cb0:	mov	r2, #5
   11cb4:	mov	r0, #0
   11cb8:	ldr	r4, [r3]
   11cbc:	bl	10c04 <dcgettext@plt>
   11cc0:	ldr	r3, [pc, #180]	; 11d7c <__assert_fail@plt+0xfa4>
   11cc4:	str	sl, [sp]
   11cc8:	mov	r1, #1
   11ccc:	ldr	r3, [r3]
   11cd0:	mov	r2, r0
   11cd4:	mov	r0, r4
   11cd8:	bl	10d3c <__fprintf_chk@plt>
   11cdc:	mov	r0, #1
   11ce0:	ldr	r2, [sp, #44]	; 0x2c
   11ce4:	ldr	r3, [r5]
   11ce8:	cmp	r2, r3
   11cec:	bne	11d68 <__assert_fail@plt+0xf90>
   11cf0:	add	sp, sp, #52	; 0x34
   11cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cf8:	mov	r3, #0
   11cfc:	ldr	ip, [sp, #12]
   11d00:	mov	r2, r3
   11d04:	cmp	ip, r2
   11d08:	add	r8, sp, #20
   11d0c:	str	r3, [sp, #20]
   11d10:	str	r3, [sp, #24]
   11d14:	str	r3, [sp, #28]
   11d18:	str	r3, [sp, #32]
   11d1c:	str	r3, [sp, #36]	; 0x24
   11d20:	str	r3, [sp, #40]	; 0x28
   11d24:	moveq	r0, #0
   11d28:	bne	11c68 <__assert_fail@plt+0xe90>
   11d2c:	b	11ce0 <__assert_fail@plt+0xf08>
   11d30:	ldr	r3, [pc, #60]	; 11d74 <__assert_fail@plt+0xf9c>
   11d34:	mov	r0, r9
   11d38:	mov	r2, #5
   11d3c:	ldr	r1, [pc, #60]	; 11d80 <__assert_fail@plt+0xfa8>
   11d40:	b	11cb8 <__assert_fail@plt+0xee0>
   11d44:	ldr	r0, [r4, #104]	; 0x68
   11d48:	bl	10bd4 <fflush@plt>
   11d4c:	mov	r0, r6
   11d50:	b	11ce0 <__assert_fail@plt+0xf08>
   11d54:	ldr	r3, [pc, #40]	; 11d84 <__assert_fail@plt+0xfac>
   11d58:	ldr	r2, [pc, #40]	; 11d88 <__assert_fail@plt+0xfb0>
   11d5c:	ldr	r1, [pc, #40]	; 11d8c <__assert_fail@plt+0xfb4>
   11d60:	ldr	r0, [pc, #40]	; 11d90 <__assert_fail@plt+0xfb8>
   11d64:	bl	10dd8 <__assert_fail@plt>
   11d68:	bl	10c1c <__stack_chk_fail@plt>
   11d6c:	strheq	r4, [r2], -r0
   11d70:	andeq	r3, r2, r0, lsr #28
   11d74:	andeq	r4, r2, r0, lsr #1
   11d78:	andeq	r2, r1, ip, lsl sp
   11d7c:	andeq	r4, r2, ip, lsr r1
   11d80:	andeq	r2, r1, r8, asr #25
   11d84:	andeq	r2, r1, ip, lsl #19
   11d88:	andeq	r0, r0, r5, asr r1
   11d8c:			; <UNDEFINED> instruction: 0x00012cb0
   11d90:			; <UNDEFINED> instruction: 0x00012cbc
   11d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d98:	mov	r8, #24
   11d9c:	ldr	r4, [pc, #328]	; 11eec <__assert_fail@plt+0x1114>
   11da0:	umull	r6, r7, r0, r8
   11da4:	ldrd	r2, [r4, #48]	; 0x30
   11da8:	ldr	r5, [pc, #320]	; 11ef0 <__assert_fail@plt+0x1118>
   11dac:	mov	r9, r0
   11db0:	adds	r0, r6, #23
   11db4:	adc	r1, r7, #0
   11db8:	sub	sp, sp, #44	; 0x2c
   11dbc:	ldr	ip, [r5]
   11dc0:	cmp	r0, r2
   11dc4:	sbcs	r3, r1, r3
   11dc8:	str	ip, [sp, #36]	; 0x24
   11dcc:	bge	11e78 <__assert_fail@plt+0x10a0>
   11dd0:	mov	r3, #0
   11dd4:	ldr	r0, [r4, #104]	; 0x68
   11dd8:	mov	r2, r6
   11ddc:	str	r3, [sp]
   11de0:	mov	r3, r7
   11de4:	bl	10d60 <fseeko64@plt>
   11de8:	subs	sl, r0, #0
   11dec:	bne	11ed4 <__assert_fail@plt+0x10fc>
   11df0:	add	r0, sp, #12
   11df4:	ldr	r3, [r4, #104]	; 0x68
   11df8:	mov	r2, #1
   11dfc:	mov	r1, r8
   11e00:	bl	10c70 <fread@plt>
   11e04:	cmp	r0, #1
   11e08:	mov	fp, r0
   11e0c:	bne	11e94 <__assert_fail@plt+0x10bc>
   11e10:	ldrsh	r0, [sp, #12]
   11e14:	cmp	r0, #0
   11e18:	beq	11e7c <__assert_fail@plt+0x10a4>
   11e1c:	ldr	r0, [r4, #104]	; 0x68
   11e20:	mov	r2, r6
   11e24:	str	sl, [sp]
   11e28:	mov	r3, r7
   11e2c:	strh	sl, [sp, #12]
   11e30:	bl	10d60 <fseeko64@plt>
   11e34:	subs	r6, r0, #0
   11e38:	beq	11ea8 <__assert_fail@plt+0x10d0>
   11e3c:	ldr	r3, [pc, #176]	; 11ef4 <__assert_fail@plt+0x111c>
   11e40:	ldr	r1, [pc, #176]	; 11ef8 <__assert_fail@plt+0x1120>
   11e44:	mov	r2, #5
   11e48:	mov	r0, #0
   11e4c:	ldr	r4, [r3]
   11e50:	bl	10c04 <dcgettext@plt>
   11e54:	ldr	r3, [pc, #160]	; 11efc <__assert_fail@plt+0x1124>
   11e58:	str	r9, [sp]
   11e5c:	mov	r1, #1
   11e60:	ldr	r3, [r3]
   11e64:	mov	r2, r0
   11e68:	mov	r0, r4
   11e6c:	bl	10d3c <__fprintf_chk@plt>
   11e70:	mov	r0, #1
   11e74:	b	11e7c <__assert_fail@plt+0x10a4>
   11e78:	mov	r0, #0
   11e7c:	ldr	r2, [sp, #36]	; 0x24
   11e80:	ldr	r3, [r5]
   11e84:	cmp	r2, r3
   11e88:	bne	11ee8 <__assert_fail@plt+0x1110>
   11e8c:	add	sp, sp, #44	; 0x2c
   11e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e94:	ldr	r3, [pc, #88]	; 11ef4 <__assert_fail@plt+0x111c>
   11e98:	mov	r0, sl
   11e9c:	mov	r2, #5
   11ea0:	ldr	r1, [pc, #88]	; 11f00 <__assert_fail@plt+0x1128>
   11ea4:	b	11e4c <__assert_fail@plt+0x1074>
   11ea8:	mov	r2, fp
   11eac:	mov	r1, r8
   11eb0:	add	r0, sp, #12
   11eb4:	ldr	r3, [r4, #104]	; 0x68
   11eb8:	bl	10c58 <fwrite@plt>
   11ebc:	cmp	r0, #1
   11ec0:	bne	11e3c <__assert_fail@plt+0x1064>
   11ec4:	ldr	r0, [r4, #104]	; 0x68
   11ec8:	bl	10bd4 <fflush@plt>
   11ecc:	mov	r0, r6
   11ed0:	b	11e7c <__assert_fail@plt+0x10a4>
   11ed4:	ldr	r3, [pc, #40]	; 11f04 <__assert_fail@plt+0x112c>
   11ed8:	mov	r2, #227	; 0xe3
   11edc:	ldr	r1, [pc, #36]	; 11f08 <__assert_fail@plt+0x1130>
   11ee0:	ldr	r0, [pc, #36]	; 11f0c <__assert_fail@plt+0x1134>
   11ee4:	bl	10dd8 <__assert_fail@plt>
   11ee8:	bl	10c1c <__stack_chk_fail@plt>
   11eec:	strheq	r4, [r2], -r0
   11ef0:	andeq	r3, r2, r0, lsr #28
   11ef4:	andeq	r4, r2, r0, lsr #1
   11ef8:	andeq	r2, r1, r0, asr #26
   11efc:	andeq	r4, r2, ip, lsr r1
   11f00:	andeq	r2, r1, r8, asr #25
   11f04:	muleq	r1, r8, r9
   11f08:			; <UNDEFINED> instruction: 0x00012cb0
   11f0c:			; <UNDEFINED> instruction: 0x00012cbc
   11f10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11f14:	sub	sp, sp, #120	; 0x78
   11f18:	ldr	r4, [pc, #568]	; 12158 <__assert_fail@plt+0x1380>
   11f1c:	subs	r6, r0, #0
   11f20:	ldr	r3, [r4]
   11f24:	str	r3, [sp, #116]	; 0x74
   11f28:	beq	11f88 <__assert_fail@plt+0x11b0>
   11f2c:	ldr	r8, [r6, #8]
   11f30:	mov	sl, #24
   11f34:	ldr	r5, [pc, #544]	; 1215c <__assert_fail@plt+0x1384>
   11f38:	umull	r2, r3, r8, sl
   11f3c:	ldrd	r8, [r5, #48]	; 0x30
   11f40:	adds	r0, r2, #23
   11f44:	mov	r7, r1
   11f48:	adc	r1, r3, #0
   11f4c:	cmp	r0, r8
   11f50:	sbcs	r1, r1, r9
   11f54:	blt	11fa0 <__assert_fail@plt+0x11c8>
   11f58:	mov	r3, #0
   11f5c:	str	r3, [sp, #16]
   11f60:	str	r3, [sp, #12]
   11f64:	str	r3, [sp, #20]
   11f68:	str	r3, [sp, #24]
   11f6c:	str	r3, [sp, #28]
   11f70:	str	r3, [sp, #32]
   11f74:	cmp	r7, #0
   11f78:	bne	12010 <__assert_fail@plt+0x1238>
   11f7c:	ldr	r3, [sp, #28]
   11f80:	cmp	r3, #0
   11f84:	bne	12010 <__assert_fail@plt+0x1238>
   11f88:	ldr	r2, [sp, #116]	; 0x74
   11f8c:	ldr	r3, [r4]
   11f90:	cmp	r2, r3
   11f94:	bne	12140 <__assert_fail@plt+0x1368>
   11f98:	add	sp, sp, #120	; 0x78
   11f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11fa0:	mov	r1, #0
   11fa4:	ldr	r0, [r5, #104]	; 0x68
   11fa8:	str	r1, [sp]
   11fac:	bl	10d60 <fseeko64@plt>
   11fb0:	subs	r8, r0, #0
   11fb4:	bne	12144 <__assert_fail@plt+0x136c>
   11fb8:	mov	r1, sl
   11fbc:	ldr	r3, [r5, #104]	; 0x68
   11fc0:	mov	r2, #1
   11fc4:	add	r0, sp, #12
   11fc8:	bl	10c70 <fread@plt>
   11fcc:	cmp	r0, #1
   11fd0:	beq	11f74 <__assert_fail@plt+0x119c>
   11fd4:	ldr	r3, [pc, #388]	; 12160 <__assert_fail@plt+0x1388>
   11fd8:	mov	r0, r8
   11fdc:	mov	r2, #5
   11fe0:	ldr	r1, [pc, #380]	; 12164 <__assert_fail@plt+0x138c>
   11fe4:	ldr	r5, [r3]
   11fe8:	bl	10c04 <dcgettext@plt>
   11fec:	ldr	r3, [pc, #372]	; 12168 <__assert_fail@plt+0x1390>
   11ff0:	ldr	r2, [r6, #8]
   11ff4:	mov	r1, #1
   11ff8:	ldr	r3, [r3]
   11ffc:	str	r2, [sp]
   12000:	mov	r2, r0
   12004:	mov	r0, r5
   12008:	bl	10d3c <__fprintf_chk@plt>
   1200c:	b	11f88 <__assert_fail@plt+0x11b0>
   12010:	add	r0, sp, #8
   12014:	bl	10bf8 <time@plt>
   12018:	ldrb	r3, [r5, #108]	; 0x6c
   1201c:	cmp	r3, #0
   12020:	beq	1203c <__assert_fail@plt+0x1264>
   12024:	ldr	r3, [sp, #8]
   12028:	ldr	r1, [sp, #28]
   1202c:	ldr	r2, [r5, #112]	; 0x70
   12030:	sub	r3, r3, r1
   12034:	cmp	r3, r2
   12038:	bgt	11f88 <__assert_fail@plt+0x11b0>
   1203c:	ldrb	r0, [r5, #116]	; 0x74
   12040:	cmp	r0, #0
   12044:	beq	120f4 <__assert_fail@plt+0x131c>
   12048:	add	r0, sp, #28
   1204c:	bl	10cac <localtime@plt>
   12050:	ldr	r2, [pc, #276]	; 1216c <__assert_fail@plt+0x1394>
   12054:	mov	r1, #80	; 0x50
   12058:	mov	r3, r0
   1205c:	add	r0, sp, #36	; 0x24
   12060:	bl	10ca0 <strftime@plt>
   12064:	ldrsh	r1, [sp, #14]
   12068:	ldr	r2, [r6]
   1206c:	ldrsh	r3, [sp, #12]
   12070:	str	r1, [sp]
   12074:	mov	r0, #1
   12078:	ldr	r1, [pc, #240]	; 12170 <__assert_fail@plt+0x1398>
   1207c:	bl	10d24 <__printf_chk@plt>
   12080:	add	r3, sp, #16
   12084:	add	r2, sp, #36	; 0x24
   12088:	ldr	r1, [pc, #228]	; 12174 <__assert_fail@plt+0x139c>
   1208c:	mov	r0, #1
   12090:	bl	10d24 <__printf_chk@plt>
   12094:	ldr	r3, [sp, #32]
   12098:	cmp	r3, #0
   1209c:	beq	120e0 <__assert_fail@plt+0x1308>
   120a0:	ldr	r1, [sp, #28]
   120a4:	ldr	r2, [sp, #8]
   120a8:	add	r3, r3, r1
   120ac:	cmp	r3, r2
   120b0:	mov	r2, #5
   120b4:	ble	120c4 <__assert_fail@plt+0x12ec>
   120b8:	ldrsh	r3, [sp, #12]
   120bc:	cmp	r3, #0
   120c0:	bne	12110 <__assert_fail@plt+0x1338>
   120c4:	ldr	r1, [pc, #172]	; 12178 <__assert_fail@plt+0x13a0>
   120c8:	mov	r0, #0
   120cc:	bl	10c04 <dcgettext@plt>
   120d0:	ldr	r2, [sp, #32]
   120d4:	mov	r1, r0
   120d8:	mov	r0, #1
   120dc:	bl	10d24 <__printf_chk@plt>
   120e0:	ldr	r3, [pc, #148]	; 1217c <__assert_fail@plt+0x13a4>
   120e4:	mov	r0, #10
   120e8:	ldr	r1, [r3]
   120ec:	bl	10c4c <_IO_putc@plt>
   120f0:	b	11f88 <__assert_fail@plt+0x11b0>
   120f4:	mov	r2, #5
   120f8:	ldr	r1, [pc, #128]	; 12180 <__assert_fail@plt+0x13a8>
   120fc:	bl	10c04 <dcgettext@plt>
   12100:	bl	10c7c <puts@plt>
   12104:	mov	r3, #1
   12108:	strb	r3, [r5, #116]	; 0x74
   1210c:	b	12048 <__assert_fail@plt+0x1270>
   12110:	ldr	r1, [pc, #108]	; 12184 <__assert_fail@plt+0x13ac>
   12114:	mov	r0, #0
   12118:	bl	10c04 <dcgettext@plt>
   1211c:	ldr	r1, [sp, #32]
   12120:	ldr	r3, [sp, #28]
   12124:	ldr	r2, [sp, #8]
   12128:	add	r3, r3, r1
   1212c:	sub	r2, r3, r2
   12130:	mov	r1, r0
   12134:	mov	r0, #1
   12138:	bl	10d24 <__printf_chk@plt>
   1213c:	b	120e0 <__assert_fail@plt+0x1308>
   12140:	bl	10c1c <__stack_chk_fail@plt>
   12144:	ldr	r3, [pc, #60]	; 12188 <__assert_fail@plt+0x13b0>
   12148:	mov	r2, #127	; 0x7f
   1214c:	ldr	r1, [pc, #56]	; 1218c <__assert_fail@plt+0x13b4>
   12150:	ldr	r0, [pc, #56]	; 12190 <__assert_fail@plt+0x13b8>
   12154:	bl	10dd8 <__assert_fail@plt>
   12158:	andeq	r3, r2, r0, lsr #28
   1215c:	strheq	r4, [r2], -r0
   12160:	andeq	r4, r2, r0, lsr #1
   12164:	andeq	r2, r1, r8, asr #25
   12168:	andeq	r4, r2, ip, lsr r1
   1216c:	andeq	r2, r1, r8, lsr #27
   12170:			; <UNDEFINED> instruction: 0x00012db8
   12174:	ldrdeq	r2, [r1], -r0
   12178:	andeq	r2, r1, r8, ror #27
   1217c:	andeq	r4, r2, r4, lsr #1
   12180:	andeq	r2, r1, ip, ror #26
   12184:	ldrdeq	r2, [r1], -r8
   12188:	andeq	r2, r1, r4, lsr #19
   1218c:			; <UNDEFINED> instruction: 0x00012cb0
   12190:			; <UNDEFINED> instruction: 0x00012cbc
   12194:	push	{r4, lr}
   12198:	mov	r1, #47	; 0x2f
   1219c:	mov	r4, r0
   121a0:	bl	10d90 <strrchr@plt>
   121a4:	cmp	r0, #0
   121a8:	addne	r0, r0, #1
   121ac:	moveq	r0, r4
   121b0:	pop	{r4, pc}
   121b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121b8:	mov	r9, r1
   121bc:	ldr	r4, [pc, #460]	; 12390 <__assert_fail@plt+0x15b8>
   121c0:	sub	sp, sp, #20
   121c4:	subs	fp, r0, #0
   121c8:	ldr	r1, [r4]
   121cc:	ldr	r7, [sp, #56]	; 0x38
   121d0:	str	r1, [sp, #12]
   121d4:	beq	12208 <__assert_fail@plt+0x1430>
   121d8:	mov	r8, r3
   121dc:	ldrb	r3, [fp]
   121e0:	mov	r6, r2
   121e4:	cmp	r3, #45	; 0x2d
   121e8:	bne	12224 <__assert_fail@plt+0x144c>
   121ec:	bl	10cd0 <__ctype_b_loc@plt>
   121f0:	ldrb	r3, [fp, #1]
   121f4:	lsl	r3, r3, #1
   121f8:	ldr	r2, [r0]
   121fc:	ldrh	r3, [r2, r3]
   12200:	tst	r3, #2048	; 0x800
   12204:	bne	122fc <__assert_fail@plt+0x1524>
   12208:	mov	r0, #0
   1220c:	ldr	r2, [sp, #12]
   12210:	ldr	r3, [r4]
   12214:	cmp	r2, r3
   12218:	bne	1238c <__assert_fail@plt+0x15b4>
   1221c:	add	sp, sp, #20
   12220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12224:	bl	10d0c <__errno_location@plt>
   12228:	mov	r5, #0
   1222c:	add	r1, sp, #8
   12230:	mov	r2, #10
   12234:	mov	sl, r0
   12238:	mov	r0, fp
   1223c:	str	r5, [sl]
   12240:	bl	10ce8 <strtoul@plt>
   12244:	ldr	r3, [sl]
   12248:	cmp	r3, #34	; 0x22
   1224c:	mov	fp, r0
   12250:	beq	12208 <__assert_fail@plt+0x1430>
   12254:	ldr	r3, [sp, #8]
   12258:	ldrb	r2, [r3]
   1225c:	cmp	r2, r5
   12260:	beq	12354 <__assert_fail@plt+0x157c>
   12264:	cmp	r2, #45	; 0x2d
   12268:	bne	12370 <__assert_fail@plt+0x1598>
   1226c:	add	r2, r3, #1
   12270:	str	r2, [sp, #8]
   12274:	ldrb	r3, [r3, #1]
   12278:	cmp	r3, #0
   1227c:	beq	12378 <__assert_fail@plt+0x15a0>
   12280:	strd	r2, [sp]
   12284:	bl	10cd0 <__ctype_b_loc@plt>
   12288:	ldr	r3, [sp, #4]
   1228c:	ldr	r2, [sp]
   12290:	lsl	r3, r3, #1
   12294:	ldr	r1, [r0]
   12298:	ldrh	r3, [r1, r3]
   1229c:	tst	r3, #2048	; 0x800
   122a0:	beq	12208 <__assert_fail@plt+0x1430>
   122a4:	mov	r3, #1
   122a8:	strb	r3, [r6]
   122ac:	add	r1, sp, #8
   122b0:	mov	r0, r2
   122b4:	str	fp, [r9]
   122b8:	mov	r2, #10
   122bc:	str	r5, [sl]
   122c0:	str	r3, [sp]
   122c4:	bl	10ce8 <strtoul@plt>
   122c8:	ldr	r2, [sp, #8]
   122cc:	ldrb	r2, [r2]
   122d0:	cmp	r2, #0
   122d4:	mov	r1, r0
   122d8:	bne	12208 <__assert_fail@plt+0x1430>
   122dc:	ldr	r2, [sl]
   122e0:	cmp	r2, #34	; 0x22
   122e4:	beq	12208 <__assert_fail@plt+0x1430>
   122e8:	ldr	r3, [sp]
   122ec:	strb	r3, [r7]
   122f0:	mov	r0, r3
   122f4:	str	r1, [r8]
   122f8:	b	1220c <__assert_fail@plt+0x1434>
   122fc:	bl	10d0c <__errno_location@plt>
   12300:	mov	r3, #0
   12304:	mov	r2, #10
   12308:	add	r1, sp, #8
   1230c:	mov	r5, r0
   12310:	add	r0, fp, #1
   12314:	str	r3, [r5]
   12318:	bl	10ce8 <strtoul@plt>
   1231c:	ldr	r3, [sp, #8]
   12320:	ldrb	r3, [r3]
   12324:	cmp	r3, #0
   12328:	mov	r2, r0
   1232c:	bne	12208 <__assert_fail@plt+0x1430>
   12330:	ldr	r1, [r5]
   12334:	cmp	r1, #34	; 0x22
   12338:	beq	12208 <__assert_fail@plt+0x1430>
   1233c:	mov	r1, #1
   12340:	strb	r3, [r6]
   12344:	mov	r0, r1
   12348:	strb	r1, [r7]
   1234c:	str	r2, [r8]
   12350:	b	1220c <__assert_fail@plt+0x1434>
   12354:	mov	r3, #1
   12358:	strb	r3, [r6]
   1235c:	mov	r0, r3
   12360:	strb	r3, [r7]
   12364:	str	fp, [r9]
   12368:	str	fp, [r8]
   1236c:	b	1220c <__assert_fail@plt+0x1434>
   12370:	mov	r0, r5
   12374:	b	1220c <__assert_fail@plt+0x1434>
   12378:	mov	r0, #1
   1237c:	strb	r0, [r6]
   12380:	strb	r3, [r7]
   12384:	str	fp, [r9]
   12388:	b	1220c <__assert_fail@plt+0x1434>
   1238c:	bl	10c1c <__stack_chk_fail@plt>
   12390:	andeq	r3, r2, r0, lsr #28
   12394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12398:	subs	r7, r1, #0
   1239c:	sub	sp, sp, #12
   123a0:	ble	12498 <__assert_fail@plt+0x16c0>
   123a4:	ldr	r9, [pc, #608]	; 1260c <__assert_fail@plt+0x1834>
   123a8:	mov	sl, r0
   123ac:	mov	r4, r2
   123b0:	mov	r5, #1
   123b4:	mov	r8, #0
   123b8:	mov	fp, r4
   123bc:	ldr	r6, [r4], #4
   123c0:	mov	r1, r9
   123c4:	mov	r0, r6
   123c8:	bl	10bb0 <strcmp@plt>
   123cc:	cmp	r0, #0
   123d0:	beq	123ec <__assert_fail@plt+0x1614>
   123d4:	mov	r0, r6
   123d8:	mov	r1, sl
   123dc:	bl	10bb0 <strcmp@plt>
   123e0:	cmp	r0, #0
   123e4:	movne	r3, r5
   123e8:	bne	12404 <__assert_fail@plt+0x162c>
   123ec:	cmp	r8, #0
   123f0:	bne	124a0 <__assert_fail@plt+0x16c8>
   123f4:	cmp	r5, r7
   123f8:	mov	r3, r5
   123fc:	beq	124d8 <__assert_fail@plt+0x1700>
   12400:	ldr	r8, [r4]
   12404:	cmp	r7, r3
   12408:	add	r5, r5, #1
   1240c:	bgt	123b8 <__assert_fail@plt+0x15e0>
   12410:	cmp	r8, #0
   12414:	beq	12498 <__assert_fail@plt+0x16c0>
   12418:	bl	10d18 <getgid@plt>
   1241c:	mov	r4, r0
   12420:	bl	10d18 <getgid@plt>
   12424:	mov	r1, r0
   12428:	mov	r0, r4
   1242c:	bl	10d6c <setregid@plt>
   12430:	cmp	r0, #0
   12434:	bne	12518 <__assert_fail@plt+0x1740>
   12438:	bl	10be0 <getuid@plt>
   1243c:	mov	r4, r0
   12440:	bl	10be0 <getuid@plt>
   12444:	mov	r1, r0
   12448:	mov	r0, r4
   1244c:	bl	10cf4 <setreuid@plt>
   12450:	subs	r4, r0, #0
   12454:	bne	12518 <__assert_fail@plt+0x1740>
   12458:	ldrb	r3, [r8]
   1245c:	cmp	r3, #47	; 0x2f
   12460:	bne	125e4 <__assert_fail@plt+0x180c>
   12464:	mov	r1, r4
   12468:	mov	r0, r8
   1246c:	bl	10d48 <access@plt>
   12470:	subs	r5, r0, #0
   12474:	bne	125d0 <__assert_fail@plt+0x17f8>
   12478:	mov	r0, r8
   1247c:	bl	10c34 <chdir@plt>
   12480:	subs	r4, r0, #0
   12484:	bne	125bc <__assert_fail@plt+0x17e4>
   12488:	mov	r0, r8
   1248c:	bl	10c64 <chroot@plt>
   12490:	cmp	r0, #0
   12494:	bne	12568 <__assert_fail@plt+0x1790>
   12498:	add	sp, sp, #12
   1249c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124a0:	ldr	r3, [pc, #360]	; 12610 <__assert_fail@plt+0x1838>
   124a4:	mov	r2, #5
   124a8:	ldr	r1, [pc, #356]	; 12614 <__assert_fail@plt+0x183c>
   124ac:	mov	r0, #0
   124b0:	ldr	r4, [r3]
   124b4:	bl	10c04 <dcgettext@plt>
   124b8:	ldr	r3, [pc, #344]	; 12618 <__assert_fail@plt+0x1840>
   124bc:	mov	r1, #1
   124c0:	ldr	r3, [r3]
   124c4:	mov	r2, r0
   124c8:	mov	r0, r4
   124cc:	bl	10d3c <__fprintf_chk@plt>
   124d0:	mov	r0, #3
   124d4:	bl	10cdc <exit@plt>
   124d8:	ldr	r3, [pc, #304]	; 12610 <__assert_fail@plt+0x1838>
   124dc:	mov	r2, #5
   124e0:	ldr	r1, [pc, #308]	; 1261c <__assert_fail@plt+0x1844>
   124e4:	mov	r0, r8
   124e8:	ldr	r4, [r3]
   124ec:	bl	10c04 <dcgettext@plt>
   124f0:	ldr	r3, [pc, #288]	; 12618 <__assert_fail@plt+0x1840>
   124f4:	ldr	r2, [fp]
   124f8:	mov	r1, #1
   124fc:	ldr	r3, [r3]
   12500:	str	r2, [sp]
   12504:	mov	r2, r0
   12508:	mov	r0, r4
   1250c:	bl	10d3c <__fprintf_chk@plt>
   12510:	mov	r0, #3
   12514:	bl	10cdc <exit@plt>
   12518:	ldr	r3, [pc, #240]	; 12610 <__assert_fail@plt+0x1838>
   1251c:	mov	r2, #5
   12520:	ldr	r1, [pc, #248]	; 12620 <__assert_fail@plt+0x1848>
   12524:	mov	r0, #0
   12528:	ldr	r4, [r3]
   1252c:	bl	10c04 <dcgettext@plt>
   12530:	ldr	r3, [pc, #224]	; 12618 <__assert_fail@plt+0x1840>
   12534:	ldr	r6, [r3]
   12538:	mov	r5, r0
   1253c:	bl	10d0c <__errno_location@plt>
   12540:	ldr	r0, [r0]
   12544:	bl	10c94 <strerror@plt>
   12548:	mov	r3, r6
   1254c:	mov	r2, r5
   12550:	mov	r1, #1
   12554:	str	r0, [sp]
   12558:	mov	r0, r4
   1255c:	bl	10d3c <__fprintf_chk@plt>
   12560:	mov	r0, #1
   12564:	bl	10cdc <exit@plt>
   12568:	ldr	r3, [pc, #160]	; 12610 <__assert_fail@plt+0x1838>
   1256c:	ldr	r1, [pc, #176]	; 12624 <__assert_fail@plt+0x184c>
   12570:	mov	r0, r4
   12574:	mov	r2, #5
   12578:	ldr	r4, [r3]
   1257c:	bl	10c04 <dcgettext@plt>
   12580:	ldr	r3, [pc, #144]	; 12618 <__assert_fail@plt+0x1840>
   12584:	ldr	r6, [r3]
   12588:	mov	r5, r0
   1258c:	bl	10d0c <__errno_location@plt>
   12590:	ldr	r0, [r0]
   12594:	bl	10c94 <strerror@plt>
   12598:	mov	r3, r6
   1259c:	mov	r2, r5
   125a0:	str	r8, [sp]
   125a4:	mov	r1, #1
   125a8:	str	r0, [sp, #4]
   125ac:	mov	r0, r4
   125b0:	bl	10d3c <__fprintf_chk@plt>
   125b4:	mov	r0, #3
   125b8:	bl	10cdc <exit@plt>
   125bc:	ldr	r3, [pc, #76]	; 12610 <__assert_fail@plt+0x1838>
   125c0:	mov	r0, r5
   125c4:	mov	r2, #5
   125c8:	ldr	r1, [pc, #88]	; 12628 <__assert_fail@plt+0x1850>
   125cc:	b	12578 <__assert_fail@plt+0x17a0>
   125d0:	ldr	r3, [pc, #56]	; 12610 <__assert_fail@plt+0x1838>
   125d4:	mov	r0, r4
   125d8:	mov	r2, #5
   125dc:	ldr	r1, [pc, #72]	; 1262c <__assert_fail@plt+0x1854>
   125e0:	b	12578 <__assert_fail@plt+0x17a0>
   125e4:	ldr	r3, [pc, #36]	; 12610 <__assert_fail@plt+0x1838>
   125e8:	ldr	r1, [pc, #64]	; 12630 <__assert_fail@plt+0x1858>
   125ec:	mov	r2, #5
   125f0:	ldr	r4, [r3]
   125f4:	bl	10c04 <dcgettext@plt>
   125f8:	ldr	r3, [pc, #24]	; 12618 <__assert_fail@plt+0x1840>
   125fc:	str	r8, [sp]
   12600:	mov	r1, #1
   12604:	ldr	r3, [r3]
   12608:	b	12504 <__assert_fail@plt+0x172c>
   1260c:	andeq	r2, r1, r0, asr #30
   12610:	andeq	r4, r2, r0, lsr #1
   12614:	andeq	r2, r1, r8, asr #30
   12618:	andeq	r4, r2, ip, lsr r1
   1261c:	andeq	r2, r1, r8, ror #30
   12620:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12624:	andeq	r3, r1, r0, lsr r0
   12628:	andeq	r3, r1, r0
   1262c:	ldrdeq	r2, [r1], -r4
   12630:			; <UNDEFINED> instruction: 0x00012fb4
   12634:	push	{r4, r5, r6, r7, r8, lr}
   12638:	sub	sp, sp, #8
   1263c:	ldr	r5, [pc, #132]	; 126c8 <__assert_fail@plt+0x18f0>
   12640:	mov	r6, r0
   12644:	mov	r8, r1
   12648:	ldr	r3, [r5]
   1264c:	mov	r4, #0
   12650:	str	r3, [sp, #4]
   12654:	bl	10d0c <__errno_location@plt>
   12658:	mov	r2, r4
   1265c:	mov	r1, sp
   12660:	str	r4, [r0]
   12664:	mov	r7, r0
   12668:	mov	r0, r6
   1266c:	bl	10bbc <strtol@plt>
   12670:	ldrb	r2, [r6]
   12674:	cmp	r2, r4
   12678:	beq	126bc <__assert_fail@plt+0x18e4>
   1267c:	ldr	r3, [sp]
   12680:	ldrb	r2, [r3]
   12684:	cmp	r2, r4
   12688:	movne	r0, r4
   1268c:	bne	126a4 <__assert_fail@plt+0x18cc>
   12690:	ldr	r3, [r7]
   12694:	cmp	r3, #34	; 0x22
   12698:	beq	126bc <__assert_fail@plt+0x18e4>
   1269c:	str	r0, [r8]
   126a0:	mov	r0, #1
   126a4:	ldr	r2, [sp, #4]
   126a8:	ldr	r3, [r5]
   126ac:	cmp	r2, r3
   126b0:	bne	126c4 <__assert_fail@plt+0x18ec>
   126b4:	add	sp, sp, #8
   126b8:	pop	{r4, r5, r6, r7, r8, pc}
   126bc:	mov	r0, r2
   126c0:	b	126a4 <__assert_fail@plt+0x18cc>
   126c4:	bl	10c1c <__stack_chk_fail@plt>
   126c8:	andeq	r3, r2, r0, lsr #28
   126cc:	cmp	r3, #0
   126d0:	cmpeq	r2, #0
   126d4:	bne	126f8 <__assert_fail@plt+0x1920>
   126d8:	cmp	r1, #0
   126dc:	movlt	r1, #-2147483648	; 0x80000000
   126e0:	movlt	r0, #0
   126e4:	blt	126f4 <__assert_fail@plt+0x191c>
   126e8:	cmpeq	r0, #0
   126ec:	mvnne	r1, #-2147483648	; 0x80000000
   126f0:	mvnne	r0, #0
   126f4:	b	127a0 <__assert_fail@plt+0x19c8>
   126f8:	sub	sp, sp, #8
   126fc:	push	{sp, lr}
   12700:	cmp	r1, #0
   12704:	blt	12724 <__assert_fail@plt+0x194c>
   12708:	cmp	r3, #0
   1270c:	blt	12758 <__assert_fail@plt+0x1980>
   12710:	bl	127b0 <__assert_fail@plt+0x19d8>
   12714:	ldr	lr, [sp, #4]
   12718:	add	sp, sp, #8
   1271c:	pop	{r2, r3}
   12720:	bx	lr
   12724:	rsbs	r0, r0, #0
   12728:	sbc	r1, r1, r1, lsl #1
   1272c:	cmp	r3, #0
   12730:	blt	1277c <__assert_fail@plt+0x19a4>
   12734:	bl	127b0 <__assert_fail@plt+0x19d8>
   12738:	ldr	lr, [sp, #4]
   1273c:	add	sp, sp, #8
   12740:	pop	{r2, r3}
   12744:	rsbs	r0, r0, #0
   12748:	sbc	r1, r1, r1, lsl #1
   1274c:	rsbs	r2, r2, #0
   12750:	sbc	r3, r3, r3, lsl #1
   12754:	bx	lr
   12758:	rsbs	r2, r2, #0
   1275c:	sbc	r3, r3, r3, lsl #1
   12760:	bl	127b0 <__assert_fail@plt+0x19d8>
   12764:	ldr	lr, [sp, #4]
   12768:	add	sp, sp, #8
   1276c:	pop	{r2, r3}
   12770:	rsbs	r0, r0, #0
   12774:	sbc	r1, r1, r1, lsl #1
   12778:	bx	lr
   1277c:	rsbs	r2, r2, #0
   12780:	sbc	r3, r3, r3, lsl #1
   12784:	bl	127b0 <__assert_fail@plt+0x19d8>
   12788:	ldr	lr, [sp, #4]
   1278c:	add	sp, sp, #8
   12790:	pop	{r2, r3}
   12794:	rsbs	r2, r2, #0
   12798:	sbc	r3, r3, r3, lsl #1
   1279c:	bx	lr
   127a0:	push	{r1, lr}
   127a4:	mov	r0, #8
   127a8:	bl	10b8c <raise@plt>
   127ac:	pop	{r1, pc}
   127b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127b4:	cmp	r1, r3
   127b8:	sub	sp, sp, #12
   127bc:	cmpeq	r0, r2
   127c0:	mov	sl, r0
   127c4:	mov	fp, r1
   127c8:	ldr	r8, [sp, #48]	; 0x30
   127cc:	bcc	128c4 <__assert_fail@plt+0x1aec>
   127d0:	cmp	r3, #0
   127d4:	mov	r0, r2
   127d8:	mov	r1, r3
   127dc:	clzne	r2, r3
   127e0:	clzeq	r3, r0
   127e4:	addeq	r2, r3, #32
   127e8:	cmp	fp, #0
   127ec:	clzeq	r3, sl
   127f0:	addeq	r3, r3, #32
   127f4:	clzne	r3, fp
   127f8:	sub	r3, r2, r3
   127fc:	sub	ip, r3, #32
   12800:	lsl	r7, r1, r3
   12804:	rsb	lr, r3, #32
   12808:	orr	r7, r7, r0, lsl ip
   1280c:	orr	r7, r7, r0, lsr lr
   12810:	lsl	r6, r0, r3
   12814:	cmp	fp, r7
   12818:	cmpeq	sl, r6
   1281c:	bcs	128e4 <__assert_fail@plt+0x1b0c>
   12820:	mov	r0, #0
   12824:	mov	r1, #0
   12828:	strd	r0, [sp]
   1282c:	cmp	r3, #0
   12830:	beq	128d0 <__assert_fail@plt+0x1af8>
   12834:	lsrs	r7, r7, #1
   12838:	rrx	r6, r6
   1283c:	mov	r2, r3
   12840:	b	12864 <__assert_fail@plt+0x1a8c>
   12844:	subs	r0, sl, r6
   12848:	sbc	r1, fp, r7
   1284c:	adds	r4, r0, r0
   12850:	adc	r5, r1, r1
   12854:	adds	sl, r4, #1
   12858:	adc	fp, r5, #0
   1285c:	subs	r2, r2, #1
   12860:	beq	12880 <__assert_fail@plt+0x1aa8>
   12864:	cmp	fp, r7
   12868:	cmpeq	sl, r6
   1286c:	bcs	12844 <__assert_fail@plt+0x1a6c>
   12870:	adds	sl, sl, sl
   12874:	adc	fp, fp, fp
   12878:	subs	r2, r2, #1
   1287c:	bne	12864 <__assert_fail@plt+0x1a8c>
   12880:	lsr	r2, sl, r3
   12884:	lsr	r9, fp, r3
   12888:	orr	r2, r2, fp, lsl lr
   1288c:	orr	r2, r2, fp, lsr ip
   12890:	lsl	r1, r9, r3
   12894:	ldrd	r6, [sp]
   12898:	orr	r1, r1, r2, lsl ip
   1289c:	lsl	r0, r2, r3
   128a0:	adds	r6, r6, sl
   128a4:	orr	r1, r1, r2, lsr lr
   128a8:	adc	r7, r7, fp
   128ac:	subs	r6, r6, r0
   128b0:	sbc	r7, r7, r1
   128b4:	mov	sl, r2
   128b8:	mov	fp, r9
   128bc:	strd	r6, [sp]
   128c0:	b	128d0 <__assert_fail@plt+0x1af8>
   128c4:	mov	r2, #0
   128c8:	mov	r3, #0
   128cc:	strd	r2, [sp]
   128d0:	cmp	r8, #0
   128d4:	strdne	sl, [r8]
   128d8:	ldrd	r0, [sp]
   128dc:	add	sp, sp, #12
   128e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128e4:	mov	r2, #1
   128e8:	subs	sl, sl, r6
   128ec:	lsl	r1, r2, ip
   128f0:	orr	r1, r1, r2, lsr lr
   128f4:	lsl	r2, r2, r3
   128f8:	str	r1, [sp, #4]
   128fc:	sbc	fp, fp, r7
   12900:	str	r2, [sp]
   12904:	b	1282c <__assert_fail@plt+0x1a54>
   12908:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1290c:	mov	r7, r0
   12910:	ldr	r6, [pc, #72]	; 12960 <__assert_fail@plt+0x1b88>
   12914:	ldr	r5, [pc, #72]	; 12964 <__assert_fail@plt+0x1b8c>
   12918:	add	r6, pc, r6
   1291c:	add	r5, pc, r5
   12920:	sub	r6, r6, r5
   12924:	mov	r8, r1
   12928:	mov	r9, r2
   1292c:	bl	10b6c <raise@plt-0x20>
   12930:	asrs	r6, r6, #2
   12934:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12938:	mov	r4, #0
   1293c:	add	r4, r4, #1
   12940:	ldr	r3, [r5], #4
   12944:	mov	r2, r9
   12948:	mov	r1, r8
   1294c:	mov	r0, r7
   12950:	blx	r3
   12954:	cmp	r6, r4
   12958:	bne	1293c <__assert_fail@plt+0x1b64>
   1295c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12960:	strdeq	r1, [r1], -ip
   12964:	strdeq	r1, [r1], -r4
   12968:	bx	lr

Disassembly of section .fini:

0001296c <.fini>:
   1296c:	push	{r3, lr}
   12970:	pop	{r3, pc}
