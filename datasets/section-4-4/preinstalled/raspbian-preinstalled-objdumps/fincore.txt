
raspbian-preinstalled/fincore:     file format elf32-littlearm


Disassembly of section .init:

000110b4 <.init>:
   110b4:	push	{r3, lr}
   110b8:	bl	11f68 <__assert_fail@plt+0xb70>
   110bc:	pop	{r3, pc}

Disassembly of section .plt:

000110c0 <scols_column_set_json_type@plt-0x14>:
   110c0:	push	{lr}		; (str lr, [sp, #-4]!)
   110c4:	ldr	lr, [pc, #4]	; 110d0 <scols_column_set_json_type@plt-0x4>
   110c8:	add	lr, pc, lr
   110cc:	ldr	pc, [lr, #8]!
   110d0:	andeq	r3, r1, ip, lsl #28

000110d4 <scols_column_set_json_type@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #77824	; 0x13000
   110dc:	ldr	pc, [ip, #3596]!	; 0xe0c

000110e0 <raise@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #77824	; 0x13000
   110e8:	ldr	pc, [ip, #3588]!	; 0xe04

000110ec <scols_line_set_data@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #77824	; 0x13000
   110f4:	ldr	pc, [ip, #3580]!	; 0xdfc

000110f8 <scols_line_refer_data@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #77824	; 0x13000
   11100:	ldr	pc, [ip, #3572]!	; 0xdf4

00011104 <strcmp@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #77824	; 0x13000
   1110c:	ldr	pc, [ip, #3564]!	; 0xdec

00011110 <strtol@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #77824	; 0x13000
   11118:	ldr	pc, [ip, #3556]!	; 0xde4

0001111c <strcspn@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #77824	; 0x13000
   11124:	ldr	pc, [ip, #3548]!	; 0xddc

00011128 <scols_table_set_name@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #77824	; 0x13000
   11130:	ldr	pc, [ip, #3540]!	; 0xdd4

00011134 <scols_table_enable_noheadings@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #77824	; 0x13000
   1113c:	ldr	pc, [ip, #3532]!	; 0xdcc

00011140 <scols_table_new_column@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #77824	; 0x13000
   11148:	ldr	pc, [ip, #3524]!	; 0xdc4

0001114c <free@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #77824	; 0x13000
   11154:	ldr	pc, [ip, #3516]!	; 0xdbc

00011158 <scols_table_enable_raw@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #77824	; 0x13000
   11160:	ldr	pc, [ip, #3508]!	; 0xdb4

00011164 <ferror@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #77824	; 0x13000
   1116c:	ldr	pc, [ip, #3500]!	; 0xdac

00011170 <strndup@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #77824	; 0x13000
   11178:	ldr	pc, [ip, #3492]!	; 0xda4

0001117c <_exit@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #77824	; 0x13000
   11184:	ldr	pc, [ip, #3484]!	; 0xd9c

00011188 <memcpy@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #77824	; 0x13000
   11190:	ldr	pc, [ip, #3476]!	; 0xd94

00011194 <mmap64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #77824	; 0x13000
   1119c:	ldr	pc, [ip, #3468]!	; 0xd8c

000111a0 <__strtoull_internal@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #77824	; 0x13000
   111a8:	ldr	pc, [ip, #3460]!	; 0xd84

000111ac <dcgettext@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #77824	; 0x13000
   111b4:	ldr	pc, [ip, #3452]!	; 0xd7c

000111b8 <strdup@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #77824	; 0x13000
   111c0:	ldr	pc, [ip, #3444]!	; 0xd74

000111c4 <__stack_chk_fail@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #77824	; 0x13000
   111cc:	ldr	pc, [ip, #3436]!	; 0xd6c

000111d0 <textdomain@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #77824	; 0x13000
   111d8:	ldr	pc, [ip, #3428]!	; 0xd64

000111dc <err@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #77824	; 0x13000
   111e4:	ldr	pc, [ip, #3420]!	; 0xd5c

000111e8 <__fxstat64@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #77824	; 0x13000
   111f0:	ldr	pc, [ip, #3412]!	; 0xd54

000111f4 <scols_new_table@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #77824	; 0x13000
   111fc:	ldr	pc, [ip, #3404]!	; 0xd4c

00011200 <__fpending@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #77824	; 0x13000
   11208:	ldr	pc, [ip, #3396]!	; 0xd44

0001120c <open64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #77824	; 0x13000
   11214:	ldr	pc, [ip, #3388]!	; 0xd3c

00011218 <malloc@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #77824	; 0x13000
   11220:	ldr	pc, [ip, #3380]!	; 0xd34

00011224 <__libc_start_main@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #77824	; 0x13000
   1122c:	ldr	pc, [ip, #3372]!	; 0xd2c

00011230 <scols_table_new_line@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #77824	; 0x13000
   11238:	ldr	pc, [ip, #3364]!	; 0xd24

0001123c <scols_unref_table@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #77824	; 0x13000
   11244:	ldr	pc, [ip, #3356]!	; 0xd1c

00011248 <__gmon_start__@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #77824	; 0x13000
   11250:	ldr	pc, [ip, #3348]!	; 0xd14

00011254 <getopt_long@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #77824	; 0x13000
   1125c:	ldr	pc, [ip, #3340]!	; 0xd0c

00011260 <__ctype_b_loc@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #77824	; 0x13000
   11268:	ldr	pc, [ip, #3332]!	; 0xd04

0001126c <exit@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #77824	; 0x13000
   11274:	ldr	pc, [ip, #3324]!	; 0xcfc

00011278 <strtoul@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #77824	; 0x13000
   11280:	ldr	pc, [ip, #3316]!	; 0xcf4

00011284 <strlen@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #77824	; 0x13000
   1128c:	ldr	pc, [ip, #3308]!	; 0xcec

00011290 <strchr@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #77824	; 0x13000
   11298:	ldr	pc, [ip, #3300]!	; 0xce4

0001129c <warnx@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #77824	; 0x13000
   112a4:	ldr	pc, [ip, #3292]!	; 0xcdc

000112a8 <getpagesize@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #77824	; 0x13000
   112b0:	ldr	pc, [ip, #3284]!	; 0xcd4

000112b4 <__errno_location@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #77824	; 0x13000
   112bc:	ldr	pc, [ip, #3276]!	; 0xccc

000112c0 <strncasecmp@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #77824	; 0x13000
   112c8:	ldr	pc, [ip, #3268]!	; 0xcc4

000112cc <__cxa_atexit@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #77824	; 0x13000
   112d4:	ldr	pc, [ip, #3260]!	; 0xcbc

000112d8 <__vasprintf_chk@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #77824	; 0x13000
   112e0:	ldr	pc, [ip, #3252]!	; 0xcb4

000112e4 <fgetc@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #77824	; 0x13000
   112ec:	ldr	pc, [ip, #3244]!	; 0xcac

000112f0 <__printf_chk@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #77824	; 0x13000
   112f8:	ldr	pc, [ip, #3236]!	; 0xca4

000112fc <strtod@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #77824	; 0x13000
   11304:	ldr	pc, [ip, #3228]!	; 0xc9c

00011308 <scols_table_enable_json@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #77824	; 0x13000
   11310:	ldr	pc, [ip, #3220]!	; 0xc94

00011314 <__fprintf_chk@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #77824	; 0x13000
   1131c:	ldr	pc, [ip, #3212]!	; 0xc8c

00011320 <fclose@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #77824	; 0x13000
   11328:	ldr	pc, [ip, #3204]!	; 0xc84

0001132c <munmap@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #77824	; 0x13000
   11334:	ldr	pc, [ip, #3196]!	; 0xc7c

00011338 <setlocale@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #77824	; 0x13000
   11340:	ldr	pc, [ip, #3188]!	; 0xc74

00011344 <errx@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #77824	; 0x13000
   1134c:	ldr	pc, [ip, #3180]!	; 0xc6c

00011350 <warn@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #77824	; 0x13000
   11358:	ldr	pc, [ip, #3172]!	; 0xc64

0001135c <scols_print_table@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #77824	; 0x13000
   11364:	ldr	pc, [ip, #3164]!	; 0xc5c

00011368 <fputc@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #77824	; 0x13000
   11370:	ldr	pc, [ip, #3156]!	; 0xc54

00011374 <localeconv@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #77824	; 0x13000
   1137c:	ldr	pc, [ip, #3148]!	; 0xc4c

00011380 <__strtoll_internal@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #77824	; 0x13000
   11388:	ldr	pc, [ip, #3140]!	; 0xc44

0001138c <mincore@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #77824	; 0x13000
   11394:	ldr	pc, [ip, #3132]!	; 0xc3c

00011398 <bindtextdomain@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #77824	; 0x13000
   113a0:	ldr	pc, [ip, #3124]!	; 0xc34

000113a4 <fputs@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #77824	; 0x13000
   113ac:	ldr	pc, [ip, #3116]!	; 0xc2c

000113b0 <strncmp@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #77824	; 0x13000
   113b8:	ldr	pc, [ip, #3108]!	; 0xc24

000113bc <abort@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #77824	; 0x13000
   113c4:	ldr	pc, [ip, #3100]!	; 0xc1c

000113c8 <close@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #77824	; 0x13000
   113d0:	ldr	pc, [ip, #3092]!	; 0xc14

000113d4 <__snprintf_chk@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #77824	; 0x13000
   113dc:	ldr	pc, [ip, #3084]!	; 0xc0c

000113e0 <scols_init_debug@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #77824	; 0x13000
   113e8:	ldr	pc, [ip, #3076]!	; 0xc04

000113ec <strspn@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #77824	; 0x13000
   113f4:	ldr	pc, [ip, #3068]!	; 0xbfc

000113f8 <__assert_fail@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #77824	; 0x13000
   11400:	ldr	pc, [ip, #3060]!	; 0xbf4

Disassembly of section .text:

00011408 <.text>:
   11408:	ldr	r3, [pc, #2648]	; 11e68 <__assert_fail@plt+0xa70>
   1140c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11410:	sub	sp, sp, #228	; 0xe4
   11414:	ldr	r3, [r3]
   11418:	mov	r5, #0
   1141c:	str	r1, [sp, #20]
   11420:	mov	sl, r0
   11424:	ldr	r1, [pc, #2624]	; 11e6c <__assert_fail@plt+0xa74>
   11428:	mov	r0, #6
   1142c:	str	r3, [sp, #220]	; 0xdc
   11430:	str	r5, [sp, #108]	; 0x6c
   11434:	str	r5, [sp, #104]	; 0x68
   11438:	bl	11338 <setlocale@plt>
   1143c:	ldr	r1, [pc, #2604]	; 11e70 <__assert_fail@plt+0xa78>
   11440:	ldr	r0, [pc, #2604]	; 11e74 <__assert_fail@plt+0xa7c>
   11444:	bl	11398 <bindtextdomain@plt>
   11448:	ldr	r0, [pc, #2596]	; 11e74 <__assert_fail@plt+0xa7c>
   1144c:	bl	111d0 <textdomain@plt>
   11450:	ldr	r0, [pc, #2592]	; 11e78 <__assert_fail@plt+0xa80>
   11454:	str	r5, [sp, #24]
   11458:	bl	1464c <__assert_fail@plt+0x3254>
   1145c:	ldr	r7, [pc, #2584]	; 11e7c <__assert_fail@plt+0xa84>
   11460:	ldr	r6, [pc, #2584]	; 11e80 <__assert_fail@plt+0xa88>
   11464:	mov	r9, r5
   11468:	mov	fp, r5
   1146c:	mov	r8, r5
   11470:	mov	r4, #0
   11474:	str	r4, [sp]
   11478:	mov	r3, r7
   1147c:	mov	r2, r6
   11480:	ldr	r1, [sp, #20]
   11484:	mov	r0, sl
   11488:	bl	11254 <getopt_long@plt>
   1148c:	cmn	r0, #1
   11490:	beq	115c8 <__assert_fail@plt+0x1d0>
   11494:	sub	r0, r0, #74	; 0x4a
   11498:	cmp	r0, #40	; 0x28
   1149c:	ldrls	pc, [pc, r0, lsl #2]
   114a0:	b	11d4c <__assert_fail@plt+0x954>
   114a4:	andeq	r1, r1, r8, asr #10
   114a8:	andeq	r1, r1, ip, asr #26
   114ac:	andeq	r1, r1, ip, asr #26
   114b0:	andeq	r1, r1, ip, asr #26
   114b4:	andeq	r1, r1, ip, asr #26
   114b8:	andeq	r1, r1, ip, asr #26
   114bc:	andeq	r1, r1, ip, asr #26
   114c0:	andeq	r1, r1, ip, asr #26
   114c4:	andeq	r1, r1, ip, asr #26
   114c8:	andeq	r1, r1, ip, asr #26
   114cc:	andeq	r1, r1, ip, asr #26
   114d0:	andeq	r1, r1, ip, asr #26
   114d4:	andeq	r1, r1, r8, ror r5
   114d8:	andeq	r1, r1, ip, asr #26
   114dc:	andeq	r1, r1, ip, asr #26
   114e0:	andeq	r1, r1, ip, asr #26
   114e4:	andeq	r1, r1, ip, asr #26
   114e8:	andeq	r1, r1, ip, asr #26
   114ec:	andeq	r1, r1, ip, asr #26
   114f0:	andeq	r1, r1, ip, asr #26
   114f4:	andeq	r1, r1, ip, asr #26
   114f8:	andeq	r1, r1, ip, asr #26
   114fc:	andeq	r1, r1, ip, asr #26
   11500:	andeq	r1, r1, ip, asr #26
   11504:	andeq	r1, r1, ip, ror #10
   11508:	andeq	r1, r1, ip, asr #26
   1150c:	andeq	r1, r1, ip, asr #26
   11510:	andeq	r1, r1, ip, asr #26
   11514:	andeq	r1, r1, ip, asr #26
   11518:	andeq	r1, r1, ip, asr #26
   1151c:	muleq	r1, r4, fp
   11520:	andeq	r1, r1, ip, asr #26
   11524:	andeq	r1, r1, ip, asr #26
   11528:	andeq	r1, r1, ip, asr #26
   1152c:	andeq	r1, r1, ip, asr #26
   11530:	andeq	r1, r1, ip, asr #26
   11534:	andeq	r1, r1, r4, ror #10
   11538:	andeq	r1, r1, r8, asr r5
   1153c:	andeq	r1, r1, ip, asr #26
   11540:	andeq	r1, r1, ip, asr #26
   11544:	andeq	r1, r1, r0, asr r5
   11548:	mov	r5, #1
   1154c:	b	11470 <__assert_fail@plt+0x78>
   11550:	mov	r9, #1
   11554:	b	11470 <__assert_fail@plt+0x78>
   11558:	ldr	r3, [pc, #2340]	; 11e84 <__assert_fail@plt+0xa8c>
   1155c:	ldr	r8, [r3]
   11560:	b	11470 <__assert_fail@plt+0x78>
   11564:	mov	fp, #1
   11568:	b	11470 <__assert_fail@plt+0x78>
   1156c:	mov	r3, #1
   11570:	str	r3, [sp, #24]
   11574:	b	11470 <__assert_fail@plt+0x78>
   11578:	mov	r2, #5
   1157c:	ldr	r1, [pc, #2308]	; 11e88 <__assert_fail@plt+0xa90>
   11580:	mov	r0, #0
   11584:	bl	111ac <dcgettext@plt>
   11588:	ldr	r2, [pc, #2300]	; 11e8c <__assert_fail@plt+0xa94>
   1158c:	mov	r1, #0
   11590:	str	r1, [sp, #48]	; 0x30
   11594:	ldr	r3, [pc, #2292]	; 11e90 <__assert_fail@plt+0xa98>
   11598:	ldr	r2, [r2]
   1159c:	mov	r1, r0
   115a0:	mov	r0, #1
   115a4:	bl	112f0 <__printf_chk@plt>
   115a8:	ldr	r3, [pc, #2232]	; 11e68 <__assert_fail@plt+0xa70>
   115ac:	ldr	r2, [sp, #220]	; 0xdc
   115b0:	ldr	r0, [sp, #48]	; 0x30
   115b4:	ldr	r3, [r3]
   115b8:	cmp	r2, r3
   115bc:	bne	11df0 <__assert_fail@plt+0x9f8>
   115c0:	add	sp, sp, #228	; 0xe4
   115c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115c8:	ldr	r3, [pc, #2244]	; 11e94 <__assert_fail@plt+0xa9c>
   115cc:	ldr	r3, [r3]
   115d0:	cmp	r3, sl
   115d4:	beq	11e40 <__assert_fail@plt+0xa48>
   115d8:	ldr	ip, [pc, #2232]	; 11e98 <__assert_fail@plt+0xaa0>
   115dc:	ldr	r3, [ip]
   115e0:	cmp	r3, #0
   115e4:	bne	1160c <__assert_fail@plt+0x214>
   115e8:	ldr	r2, [pc, #2220]	; 11e9c <__assert_fail@plt+0xaa4>
   115ec:	mov	r1, #3
   115f0:	mov	r0, #1
   115f4:	stm	r2, {r1, r3}
   115f8:	mov	r1, #2
   115fc:	mov	r3, #4
   11600:	str	r0, [r2, #8]
   11604:	str	r1, [r2, #12]
   11608:	str	r3, [ip]
   1160c:	cmp	r8, #0
   11610:	beq	11638 <__assert_fail@plt+0x240>
   11614:	ldr	r3, [pc, #2180]	; 11ea0 <__assert_fail@plt+0xaa8>
   11618:	mov	r0, r8
   1161c:	str	r3, [sp]
   11620:	mov	r2, #8
   11624:	ldr	r3, [pc, #2156]	; 11e98 <__assert_fail@plt+0xaa0>
   11628:	ldr	r1, [pc, #2156]	; 11e9c <__assert_fail@plt+0xaa4>
   1162c:	bl	13a5c <__assert_fail@plt+0x2664>
   11630:	cmp	r0, #0
   11634:	blt	11dc4 <__assert_fail@plt+0x9cc>
   11638:	mov	r0, #0
   1163c:	bl	113e0 <scols_init_debug@plt>
   11640:	bl	111f4 <scols_new_table@plt>
   11644:	subs	r3, r0, #0
   11648:	str	r3, [sp, #76]	; 0x4c
   1164c:	beq	11e28 <__assert_fail@plt+0xa30>
   11650:	mov	r1, fp
   11654:	bl	11134 <scols_table_enable_noheadings@plt>
   11658:	ldr	r4, [sp, #76]	; 0x4c
   1165c:	mov	r1, r9
   11660:	mov	r0, r4
   11664:	bl	11158 <scols_table_enable_raw@plt>
   11668:	mov	r1, r5
   1166c:	mov	r0, r4
   11670:	bl	11308 <scols_table_enable_json@plt>
   11674:	ldrb	r3, [sp, #108]	; 0x6c
   11678:	ldr	r2, [sp, #24]
   1167c:	and	r1, fp, #1
   11680:	and	r2, r2, #1
   11684:	and	r3, r3, #252	; 0xfc
   11688:	orr	r3, r3, r2
   1168c:	orr	r3, r3, r1, lsl #1
   11690:	str	r2, [sp, #92]	; 0x5c
   11694:	and	r2, r9, #1
   11698:	bic	r3, r3, #4
   1169c:	str	r1, [sp, #88]	; 0x58
   116a0:	orr	r3, r3, r2, lsl #2
   116a4:	and	r1, r5, #1
   116a8:	bic	r3, r3, #8
   116ac:	orr	r3, r3, r1, lsl #3
   116b0:	ands	r5, r3, #8
   116b4:	str	r2, [sp, #80]	; 0x50
   116b8:	str	r1, [sp, #84]	; 0x54
   116bc:	mov	r6, r3
   116c0:	strb	r3, [sp, #108]	; 0x6c
   116c4:	bne	11db4 <__assert_fail@plt+0x9bc>
   116c8:	ldr	r3, [pc, #1992]	; 11e98 <__assert_fail@plt+0xaa0>
   116cc:	ldr	r3, [r3]
   116d0:	cmp	r3, #0
   116d4:	beq	11780 <__assert_fail@plt+0x388>
   116d8:	ldr	r4, [pc, #1988]	; 11ea4 <__assert_fail@plt+0xaac>
   116dc:	and	r6, r6, #1
   116e0:	mov	r7, #0
   116e4:	ldr	r8, [sp, #76]	; 0x4c
   116e8:	b	11700 <__assert_fail@plt+0x308>
   116ec:	ldr	r3, [pc, #1956]	; 11e98 <__assert_fail@plt+0xaa0>
   116f0:	add	r7, r7, #1
   116f4:	ldr	r3, [r3]
   116f8:	cmp	r3, r7
   116fc:	bls	11780 <__assert_fail@plt+0x388>
   11700:	mov	r0, r7
   11704:	bl	1210c <__assert_fail@plt+0xd14>
   11708:	add	r2, r0, r0, lsl #1
   1170c:	mov	r0, r8
   11710:	add	r3, r4, r2, lsl #3
   11714:	ldr	r1, [r4, r2, lsl #3]
   11718:	vldr	d0, [r3, #8]
   1171c:	ldr	r2, [r3, #16]
   11720:	bl	11140 <scols_table_new_column@plt>
   11724:	subs	r9, r0, #0
   11728:	beq	11dd8 <__assert_fail@plt+0x9e0>
   1172c:	cmp	r5, #0
   11730:	beq	116ec <__assert_fail@plt+0x2f4>
   11734:	mov	r0, r7
   11738:	bl	1210c <__assert_fail@plt+0xd14>
   1173c:	cmp	r0, #2
   11740:	beq	11764 <__assert_fail@plt+0x36c>
   11744:	cmp	r0, #3
   11748:	beq	11774 <__assert_fail@plt+0x37c>
   1174c:	cmp	r0, #1
   11750:	beq	11774 <__assert_fail@plt+0x37c>
   11754:	mov	r0, r9
   11758:	mov	r1, #1
   1175c:	bl	110d4 <scols_column_set_json_type@plt>
   11760:	b	116ec <__assert_fail@plt+0x2f4>
   11764:	mov	r0, r9
   11768:	mov	r1, #0
   1176c:	bl	110d4 <scols_column_set_json_type@plt>
   11770:	b	116ec <__assert_fail@plt+0x2f4>
   11774:	cmp	r6, #0
   11778:	beq	116ec <__assert_fail@plt+0x2f4>
   1177c:	b	11754 <__assert_fail@plt+0x35c>
   11780:	ldr	r3, [pc, #1804]	; 11e94 <__assert_fail@plt+0xa9c>
   11784:	ldr	r4, [r3]
   11788:	cmp	sl, r4
   1178c:	movle	r3, #0
   11790:	strle	r3, [sp, #48]	; 0x30
   11794:	ble	11930 <__assert_fail@plt+0x538>
   11798:	bl	112a8 <getpagesize@plt>
   1179c:	ldr	fp, [pc, #1796]	; 11ea8 <__assert_fail@plt+0xab0>
   117a0:	mov	r1, #0
   117a4:	str	sl, [sp, #72]	; 0x48
   117a8:	lsl	r3, r0, #15
   117ac:	str	r0, [sp, #60]	; 0x3c
   117b0:	mov	r0, r3
   117b4:	mov	r3, #0
   117b8:	strd	r0, [sp, #64]	; 0x40
   117bc:	str	r3, [sp, #48]	; 0x30
   117c0:	ldr	r3, [sp, #20]
   117c4:	mov	r1, #0
   117c8:	ldr	r3, [r3, r4, lsl #2]
   117cc:	mov	r0, r3
   117d0:	str	r3, [sp, #56]	; 0x38
   117d4:	bl	1120c <open64@plt>
   117d8:	subs	r3, r0, #0
   117dc:	str	r3, [sp, #24]
   117e0:	blt	119d8 <__assert_fail@plt+0x5e0>
   117e4:	add	r2, sp, #112	; 0x70
   117e8:	ldr	r1, [sp, #24]
   117ec:	mov	r0, #3
   117f0:	bl	111e8 <__fxstat64@plt>
   117f4:	cmp	r0, #0
   117f8:	blt	11b70 <__assert_fail@plt+0x778>
   117fc:	ldr	r3, [sp, #128]	; 0x80
   11800:	and	r3, r3, #61440	; 0xf000
   11804:	cmp	r3, #16384	; 0x4000
   11808:	beq	11a20 <__assert_fail@plt+0x628>
   1180c:	ldrd	r4, [sp, #160]	; 0xa0
   11810:	orrs	r3, r4, r5
   11814:	strd	r4, [sp, #32]
   11818:	bne	11a2c <__assert_fail@plt+0x634>
   1181c:	ldr	r0, [sp, #24]
   11820:	bl	113c8 <close@plt>
   11824:	ldrd	r2, [sp, #160]	; 0xa0
   11828:	mov	r1, #0
   1182c:	ldr	r0, [sp, #76]	; 0x4c
   11830:	strd	r2, [sp, #32]
   11834:	bl	11230 <scols_table_new_line@plt>
   11838:	subs	r7, r0, #0
   1183c:	beq	11e10 <__assert_fail@plt+0xa18>
   11840:	ldr	r3, [pc, #1616]	; 11e98 <__assert_fail@plt+0xaa0>
   11844:	ldr	r3, [r3]
   11848:	cmp	r3, #0
   1184c:	beq	11914 <__assert_fail@plt+0x51c>
   11850:	ldr	r1, [sp, #60]	; 0x3c
   11854:	ldr	r9, [sp, #92]	; 0x5c
   11858:	mov	r6, #0
   1185c:	umull	r2, r3, r1, r4
   11860:	strd	r2, [sp, #24]
   11864:	mla	r3, r1, r5, r3
   11868:	str	r3, [sp, #28]
   1186c:	ldr	r3, [sp, #88]	; 0x58
   11870:	lsl	sl, r3, #1
   11874:	mov	r3, r5
   11878:	mov	r5, r4
   1187c:	mov	r4, r3
   11880:	mov	r0, r6
   11884:	bl	1210c <__assert_fail@plt+0xd14>
   11888:	cmp	r0, #3
   1188c:	ldrls	pc, [pc, r0, lsl #2]
   11890:	b	11914 <__assert_fail@plt+0x51c>
   11894:	andeq	r1, r1, r4, lsr #19
   11898:	andeq	r1, r1, ip, asr r9
   1189c:	andeq	r1, r1, r8, asr #18
   118a0:	andeq	r1, r1, r4, lsr #17
   118a4:	ldrb	r3, [sp, #108]	; 0x6c
   118a8:	ldr	r2, [sp, #80]	; 0x50
   118ac:	and	r3, r3, #252	; 0xfc
   118b0:	orr	r3, r3, r9
   118b4:	orr	r3, sl, r3
   118b8:	bic	r3, r3, #4
   118bc:	orr	r3, r3, r2, lsl #2
   118c0:	ldr	r2, [sp, #84]	; 0x54
   118c4:	bic	r3, r3, #8
   118c8:	orr	r3, r3, r2, lsl #3
   118cc:	ands	r0, r3, #1
   118d0:	strb	r3, [sp, #108]	; 0x6c
   118d4:	ldrd	r2, [sp, #24]
   118d8:	beq	119cc <__assert_fail@plt+0x5d4>
   118dc:	ldr	r1, [pc, #1480]	; 11eac <__assert_fail@plt+0xab4>
   118e0:	add	r0, sp, #96	; 0x60
   118e4:	bl	1209c <__assert_fail@plt+0xca4>
   118e8:	ldr	r2, [sp, #96]	; 0x60
   118ec:	mov	r1, r6
   118f0:	mov	r0, r7
   118f4:	bl	110f8 <scols_line_refer_data@plt>
   118f8:	cmp	r0, #0
   118fc:	bne	11df4 <__assert_fail@plt+0x9fc>
   11900:	ldr	r3, [pc, #1424]	; 11e98 <__assert_fail@plt+0xaa0>
   11904:	add	r6, r6, #1
   11908:	ldr	r3, [r3]
   1190c:	cmp	r6, r3
   11910:	bcc	11880 <__assert_fail@plt+0x488>
   11914:	ldr	r3, [pc, #1400]	; 11e94 <__assert_fail@plt+0xa9c>
   11918:	ldr	r2, [sp, #72]	; 0x48
   1191c:	ldr	r4, [r3]
   11920:	add	r4, r4, #1
   11924:	cmp	r4, r2
   11928:	str	r4, [r3]
   1192c:	blt	117c0 <__assert_fail@plt+0x3c8>
   11930:	ldr	r4, [sp, #76]	; 0x4c
   11934:	mov	r0, r4
   11938:	bl	1135c <scols_print_table@plt>
   1193c:	mov	r0, r4
   11940:	bl	1123c <scols_unref_table@plt>
   11944:	b	115a8 <__assert_fail@plt+0x1b0>
   11948:	ldr	r2, [sp, #56]	; 0x38
   1194c:	mov	r1, r6
   11950:	mov	r0, r7
   11954:	bl	110ec <scols_line_set_data@plt>
   11958:	b	118f8 <__assert_fail@plt+0x500>
   1195c:	ldrb	r3, [sp, #108]	; 0x6c
   11960:	ldr	r2, [sp, #80]	; 0x50
   11964:	and	r3, r3, #252	; 0xfc
   11968:	orr	r3, r3, r9
   1196c:	orr	r3, sl, r3
   11970:	bic	r3, r3, #4
   11974:	orr	r3, r3, r2, lsl #2
   11978:	ldr	r2, [sp, #84]	; 0x54
   1197c:	bic	r3, r3, #8
   11980:	orr	r3, r3, r2, lsl #3
   11984:	ands	r0, r3, #1
   11988:	strb	r3, [sp, #108]	; 0x6c
   1198c:	ldrd	r2, [sp, #32]
   11990:	beq	119cc <__assert_fail@plt+0x5d4>
   11994:	ldr	r1, [pc, #1300]	; 11eb0 <__assert_fail@plt+0xab8>
   11998:	add	r0, sp, #96	; 0x60
   1199c:	bl	1209c <__assert_fail@plt+0xca4>
   119a0:	b	118e8 <__assert_fail@plt+0x4f0>
   119a4:	mov	r2, r5
   119a8:	mov	r3, r4
   119ac:	ldr	r1, [pc, #1276]	; 11eb0 <__assert_fail@plt+0xab8>
   119b0:	add	r0, sp, #96	; 0x60
   119b4:	bl	1209c <__assert_fail@plt+0xca4>
   119b8:	ldr	r2, [sp, #96]	; 0x60
   119bc:	mov	r1, r6
   119c0:	mov	r0, r7
   119c4:	bl	110f8 <scols_line_refer_data@plt>
   119c8:	b	118f8 <__assert_fail@plt+0x500>
   119cc:	bl	13698 <__assert_fail@plt+0x22a0>
   119d0:	str	r0, [sp, #96]	; 0x60
   119d4:	b	118e8 <__assert_fail@plt+0x4f0>
   119d8:	ldr	r1, [pc, #1236]	; 11eb4 <__assert_fail@plt+0xabc>
   119dc:	mov	r2, #5
   119e0:	mov	r0, #0
   119e4:	bl	111ac <dcgettext@plt>
   119e8:	ldr	r1, [sp, #56]	; 0x38
   119ec:	bl	11350 <warn@plt>
   119f0:	bl	112b4 <__errno_location@plt>
   119f4:	mov	r4, #0
   119f8:	mov	r5, r4
   119fc:	ldr	r6, [r0]
   11a00:	rsb	r6, r6, #0
   11a04:	cmp	r6, #0
   11a08:	beq	11824 <__assert_fail@plt+0x42c>
   11a0c:	ldr	r3, [sp, #48]	; 0x30
   11a10:	cmp	r6, #1
   11a14:	movne	r3, #1
   11a18:	str	r3, [sp, #48]	; 0x30
   11a1c:	b	11914 <__assert_fail@plt+0x51c>
   11a20:	ldr	r0, [sp, #24]
   11a24:	bl	113c8 <close@plt>
   11a28:	b	11914 <__assert_fail@plt+0x51c>
   11a2c:	ldrd	r2, [sp, #32]
   11a30:	mov	r4, #0
   11a34:	mov	r5, r4
   11a38:	cmp	r2, #1
   11a3c:	sbcs	r3, r3, #0
   11a40:	blt	11dd0 <__assert_fail@plt+0x9d8>
   11a44:	mov	r6, r4
   11a48:	mov	r7, r4
   11a4c:	ldrd	r2, [sp, #32]
   11a50:	strd	r6, [sp, #8]
   11a54:	subs	r8, r2, r6
   11a58:	sbc	r9, r3, r7
   11a5c:	ldrd	r2, [sp, #64]	; 0x40
   11a60:	cmp	r2, r8
   11a64:	sbcs	r1, r3, r9
   11a68:	movlt	r9, r3
   11a6c:	ldr	r3, [sp, #24]
   11a70:	movlt	r8, r2
   11a74:	mov	r2, #0
   11a78:	str	r3, [sp]
   11a7c:	mov	r0, r2
   11a80:	mov	r3, #2
   11a84:	mov	r1, r8
   11a88:	bl	11194 <mmap64@plt>
   11a8c:	str	r8, [sp, #40]	; 0x28
   11a90:	cmn	r0, #1
   11a94:	mov	sl, r0
   11a98:	beq	11d84 <__assert_fail@plt+0x98c>
   11a9c:	ldr	r1, [sp, #60]	; 0x3c
   11aa0:	mov	r0, r8
   11aa4:	bl	14454 <__assert_fail@plt+0x305c>
   11aa8:	mov	r2, fp
   11aac:	cmp	r1, #0
   11ab0:	moveq	r3, r0
   11ab4:	addne	r3, r0, #1
   11ab8:	mov	r1, r8
   11abc:	mov	r0, sl
   11ac0:	str	r3, [sp, #52]	; 0x34
   11ac4:	bl	1138c <mincore@plt>
   11ac8:	cmp	r0, #0
   11acc:	blt	11b34 <__assert_fail@plt+0x73c>
   11ad0:	ldr	r3, [sp, #52]	; 0x34
   11ad4:	cmp	r3, #0
   11ad8:	addgt	r3, fp, r3
   11adc:	movgt	r1, #0
   11ae0:	ble	11b04 <__assert_fail@plt+0x70c>
   11ae4:	ldrb	r2, [r3, #-1]!
   11ae8:	tst	r2, #1
   11aec:	beq	11afc <__assert_fail@plt+0x704>
   11af0:	adds	r4, r4, #1
   11af4:	adc	r5, r5, #0
   11af8:	strb	r1, [r3]
   11afc:	cmp	fp, r3
   11b00:	bne	11ae4 <__assert_fail@plt+0x6ec>
   11b04:	ldr	r1, [sp, #40]	; 0x28
   11b08:	mov	r0, sl
   11b0c:	bl	1132c <munmap@plt>
   11b10:	ldrd	r2, [sp, #32]
   11b14:	adds	r6, r6, r8
   11b18:	adc	r7, r7, r9
   11b1c:	cmp	r6, r2
   11b20:	sbcs	r3, r7, r3
   11b24:	blt	11a4c <__assert_fail@plt+0x654>
   11b28:	strd	r8, [sp, #40]	; 0x28
   11b2c:	mov	r6, #0
   11b30:	b	11b64 <__assert_fail@plt+0x76c>
   11b34:	mov	r2, #5
   11b38:	ldr	r1, [pc, #888]	; 11eb8 <__assert_fail@plt+0xac0>
   11b3c:	mov	r0, #0
   11b40:	bl	111ac <dcgettext@plt>
   11b44:	ldr	r1, [sp, #56]	; 0x38
   11b48:	bl	11350 <warn@plt>
   11b4c:	bl	112b4 <__errno_location@plt>
   11b50:	ldr	r3, [r0]
   11b54:	cmp	r3, #0
   11b58:	beq	11b04 <__assert_fail@plt+0x70c>
   11b5c:	rsb	r6, r3, #0
   11b60:	strd	r8, [sp, #40]	; 0x28
   11b64:	ldr	r0, [sp, #24]
   11b68:	bl	113c8 <close@plt>
   11b6c:	b	11a04 <__assert_fail@plt+0x60c>
   11b70:	mov	r2, #5
   11b74:	ldr	r1, [pc, #832]	; 11ebc <__assert_fail@plt+0xac4>
   11b78:	mov	r0, #0
   11b7c:	bl	111ac <dcgettext@plt>
   11b80:	ldr	r1, [sp, #56]	; 0x38
   11b84:	bl	11350 <warn@plt>
   11b88:	ldr	r0, [sp, #24]
   11b8c:	bl	113c8 <close@plt>
   11b90:	b	119f0 <__assert_fail@plt+0x5f8>
   11b94:	ldr	r3, [pc, #804]	; 11ec0 <__assert_fail@plt+0xac8>
   11b98:	mov	r2, #5
   11b9c:	ldr	r1, [pc, #800]	; 11ec4 <__assert_fail@plt+0xacc>
   11ba0:	ldr	r4, [r3]
   11ba4:	mov	r0, #0
   11ba8:	bl	111ac <dcgettext@plt>
   11bac:	mov	r1, r4
   11bb0:	bl	113a4 <fputs@plt>
   11bb4:	mov	r2, #5
   11bb8:	ldr	r1, [pc, #776]	; 11ec8 <__assert_fail@plt+0xad0>
   11bbc:	mov	r0, #0
   11bc0:	bl	111ac <dcgettext@plt>
   11bc4:	ldr	r3, [pc, #704]	; 11e8c <__assert_fail@plt+0xa94>
   11bc8:	mov	r6, #0
   11bcc:	mov	r1, #1
   11bd0:	ldr	r3, [r3]
   11bd4:	ldr	r5, [pc, #712]	; 11ea4 <__assert_fail@plt+0xaac>
   11bd8:	ldr	r8, [pc, #748]	; 11ecc <__assert_fail@plt+0xad4>
   11bdc:	mov	r2, r0
   11be0:	mov	r0, r4
   11be4:	bl	11314 <__fprintf_chk@plt>
   11be8:	mov	r2, #5
   11bec:	ldr	r1, [pc, #732]	; 11ed0 <__assert_fail@plt+0xad8>
   11bf0:	mov	r0, r6
   11bf4:	bl	111ac <dcgettext@plt>
   11bf8:	mov	r1, r4
   11bfc:	bl	113a4 <fputs@plt>
   11c00:	mov	r2, #5
   11c04:	ldr	r1, [pc, #712]	; 11ed4 <__assert_fail@plt+0xadc>
   11c08:	mov	r0, r6
   11c0c:	bl	111ac <dcgettext@plt>
   11c10:	mov	r1, r4
   11c14:	bl	113a4 <fputs@plt>
   11c18:	mov	r2, #5
   11c1c:	ldr	r1, [pc, #692]	; 11ed8 <__assert_fail@plt+0xae0>
   11c20:	mov	r0, r6
   11c24:	bl	111ac <dcgettext@plt>
   11c28:	mov	r1, r4
   11c2c:	bl	113a4 <fputs@plt>
   11c30:	mov	r2, #5
   11c34:	ldr	r1, [pc, #672]	; 11edc <__assert_fail@plt+0xae4>
   11c38:	mov	r0, r6
   11c3c:	bl	111ac <dcgettext@plt>
   11c40:	mov	r1, r4
   11c44:	bl	113a4 <fputs@plt>
   11c48:	mov	r2, #5
   11c4c:	ldr	r1, [pc, #652]	; 11ee0 <__assert_fail@plt+0xae8>
   11c50:	mov	r0, r6
   11c54:	bl	111ac <dcgettext@plt>
   11c58:	mov	r1, r4
   11c5c:	bl	113a4 <fputs@plt>
   11c60:	mov	r2, #5
   11c64:	ldr	r1, [pc, #632]	; 11ee4 <__assert_fail@plt+0xaec>
   11c68:	mov	r0, r6
   11c6c:	bl	111ac <dcgettext@plt>
   11c70:	mov	r1, r4
   11c74:	bl	113a4 <fputs@plt>
   11c78:	mov	r1, r4
   11c7c:	mov	r0, #10
   11c80:	bl	11368 <fputc@plt>
   11c84:	mov	r2, #5
   11c88:	ldr	r1, [pc, #600]	; 11ee8 <__assert_fail@plt+0xaf0>
   11c8c:	mov	r0, r6
   11c90:	bl	111ac <dcgettext@plt>
   11c94:	mov	r2, #5
   11c98:	ldr	r1, [pc, #588]	; 11eec <__assert_fail@plt+0xaf4>
   11c9c:	mov	r7, r0
   11ca0:	mov	r0, r6
   11ca4:	bl	111ac <dcgettext@plt>
   11ca8:	ldr	r2, [pc, #576]	; 11ef0 <__assert_fail@plt+0xaf8>
   11cac:	mov	r3, r7
   11cb0:	str	r2, [sp]
   11cb4:	ldr	r1, [pc, #568]	; 11ef4 <__assert_fail@plt+0xafc>
   11cb8:	ldr	r2, [pc, #568]	; 11ef8 <__assert_fail@plt+0xb00>
   11cbc:	str	r0, [sp, #4]
   11cc0:	mov	r0, #1
   11cc4:	bl	112f0 <__printf_chk@plt>
   11cc8:	mov	r2, #5
   11ccc:	ldr	r1, [pc, #552]	; 11efc <__assert_fail@plt+0xb04>
   11cd0:	mov	r0, r6
   11cd4:	bl	111ac <dcgettext@plt>
   11cd8:	mov	r1, #1
   11cdc:	mov	r2, r0
   11ce0:	mov	r0, r4
   11ce4:	bl	11314 <__fprintf_chk@plt>
   11ce8:	ldr	r1, [r5, #20]
   11cec:	mov	r2, #5
   11cf0:	mov	r0, #0
   11cf4:	ldr	r7, [r5]
   11cf8:	bl	111ac <dcgettext@plt>
   11cfc:	add	r6, r6, #1
   11d00:	mov	r3, r7
   11d04:	mov	r2, r8
   11d08:	mov	r1, #1
   11d0c:	add	r5, r5, #24
   11d10:	str	r0, [sp]
   11d14:	mov	r0, r4
   11d18:	bl	11314 <__fprintf_chk@plt>
   11d1c:	cmp	r6, #4
   11d20:	bne	11ce8 <__assert_fail@plt+0x8f0>
   11d24:	mov	r2, #5
   11d28:	ldr	r1, [pc, #464]	; 11f00 <__assert_fail@plt+0xb08>
   11d2c:	mov	r0, #0
   11d30:	bl	111ac <dcgettext@plt>
   11d34:	ldr	r2, [pc, #456]	; 11f04 <__assert_fail@plt+0xb0c>
   11d38:	mov	r1, r0
   11d3c:	mov	r0, #1
   11d40:	bl	112f0 <__printf_chk@plt>
   11d44:	mov	r0, #0
   11d48:	bl	1126c <exit@plt>
   11d4c:	ldr	r3, [pc, #436]	; 11f08 <__assert_fail@plt+0xb10>
   11d50:	ldr	r1, [pc, #436]	; 11f0c <__assert_fail@plt+0xb14>
   11d54:	mov	r2, #5
   11d58:	mov	r0, #0
   11d5c:	ldr	r4, [r3]
   11d60:	bl	111ac <dcgettext@plt>
   11d64:	ldr	r3, [pc, #288]	; 11e8c <__assert_fail@plt+0xa94>
   11d68:	mov	r1, #1
   11d6c:	ldr	r3, [r3]
   11d70:	mov	r2, r0
   11d74:	mov	r0, r4
   11d78:	bl	11314 <__fprintf_chk@plt>
   11d7c:	mov	r0, #1
   11d80:	bl	1126c <exit@plt>
   11d84:	mov	r2, #5
   11d88:	ldr	r1, [pc, #384]	; 11f10 <__assert_fail@plt+0xb18>
   11d8c:	mov	r0, #0
   11d90:	strd	r8, [sp, #40]	; 0x28
   11d94:	bl	111ac <dcgettext@plt>
   11d98:	ldr	r1, [sp, #56]	; 0x38
   11d9c:	bl	11350 <warn@plt>
   11da0:	ldr	r0, [sp, #24]
   11da4:	bl	113c8 <close@plt>
   11da8:	mov	r3, #1
   11dac:	str	r3, [sp, #48]	; 0x30
   11db0:	b	11914 <__assert_fail@plt+0x51c>
   11db4:	ldr	r1, [pc, #344]	; 11f14 <__assert_fail@plt+0xb1c>
   11db8:	ldr	r0, [sp, #76]	; 0x4c
   11dbc:	bl	11128 <scols_table_set_name@plt>
   11dc0:	b	116c8 <__assert_fail@plt+0x2d0>
   11dc4:	mov	r3, #1
   11dc8:	str	r3, [sp, #48]	; 0x30
   11dcc:	b	115a8 <__assert_fail@plt+0x1b0>
   11dd0:	mov	r6, r4
   11dd4:	b	11b64 <__assert_fail@plt+0x76c>
   11dd8:	ldr	r1, [pc, #312]	; 11f18 <__assert_fail@plt+0xb20>
   11ddc:	mov	r2, #5
   11de0:	bl	111ac <dcgettext@plt>
   11de4:	mov	r1, r0
   11de8:	mov	r0, #1
   11dec:	bl	111dc <err@plt>
   11df0:	bl	111c4 <__stack_chk_fail@plt>
   11df4:	ldr	r1, [pc, #288]	; 11f1c <__assert_fail@plt+0xb24>
   11df8:	mov	r2, #5
   11dfc:	mov	r0, #0
   11e00:	bl	111ac <dcgettext@plt>
   11e04:	mov	r1, r0
   11e08:	mov	r0, #1
   11e0c:	bl	111dc <err@plt>
   11e10:	ldr	r1, [pc, #264]	; 11f20 <__assert_fail@plt+0xb28>
   11e14:	mov	r2, #5
   11e18:	bl	111ac <dcgettext@plt>
   11e1c:	mov	r1, r0
   11e20:	mov	r0, #1
   11e24:	bl	111dc <err@plt>
   11e28:	ldr	r1, [pc, #244]	; 11f24 <__assert_fail@plt+0xb2c>
   11e2c:	mov	r2, #5
   11e30:	bl	111ac <dcgettext@plt>
   11e34:	mov	r1, r0
   11e38:	mov	r0, #1
   11e3c:	bl	111dc <err@plt>
   11e40:	mov	r2, #5
   11e44:	ldr	r1, [pc, #220]	; 11f28 <__assert_fail@plt+0xb30>
   11e48:	mov	r0, r4
   11e4c:	bl	111ac <dcgettext@plt>
   11e50:	bl	1129c <warnx@plt>
   11e54:	ldr	r3, [pc, #172]	; 11f08 <__assert_fail@plt+0xb10>
   11e58:	mov	r0, r4
   11e5c:	mov	r2, #5
   11e60:	ldr	r1, [pc, #164]	; 11f0c <__assert_fail@plt+0xb14>
   11e64:	b	11d5c <__assert_fail@plt+0x964>
   11e68:	ldrdeq	r4, [r2], -r0
   11e6c:	andeq	r4, r1, r4, asr r8
   11e70:	andeq	r4, r1, ip, lsl #16
   11e74:	andeq	r4, r1, r0, lsr #16
   11e78:	muleq	r1, r0, r1
   11e7c:	andeq	r4, r1, r8, ror #13
   11e80:	andeq	r4, r1, r4, asr sl
   11e84:	andeq	r5, r2, r8, asr #32
   11e88:	andeq	r4, r1, ip, lsr #16
   11e8c:	andeq	r5, r2, r0, lsr r0
   11e90:	andeq	r4, r1, r8, lsr r8
   11e94:	andeq	r5, r2, r8, lsr r0
   11e98:	andeq	r5, r2, r0, asr r0
   11e9c:	andeq	r5, r2, r8
   11ea0:	andeq	r2, r1, ip, lsl r0
   11ea4:	andeq	r4, r1, r8, ror r6
   11ea8:	andeq	r5, r2, r4, asr r0
   11eac:	andeq	r4, r1, r4, asr #22
   11eb0:	andeq	r4, r1, r0, asr #22
   11eb4:	andeq	r4, r1, r0, asr #21
   11eb8:	andeq	r4, r1, r4, lsl #22
   11ebc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11ec0:	andeq	r5, r2, r4, asr #32
   11ec4:	andeq	r4, r1, ip, asr #16
   11ec8:	andeq	r4, r1, r8, asr r8
   11ecc:	strdeq	r4, [r1], -r8
   11ed0:	andeq	r4, r1, r0, ror r8
   11ed4:	andeq	r4, r1, ip, ror r8
   11ed8:	andeq	r4, r1, ip, lsr #17
   11edc:	andeq	r4, r1, r0, lsl #18
   11ee0:	andeq	r4, r1, r0, lsr r9
   11ee4:	andeq	r4, r1, r8, asr r9
   11ee8:	andeq	r4, r1, r8, lsl #19
   11eec:	muleq	r1, ip, r9
   11ef0:	andeq	r4, r1, ip, asr #19
   11ef4:			; <UNDEFINED> instruction: 0x000149b8
   11ef8:	andeq	r4, r1, ip, lsr #19
   11efc:	ldrdeq	r4, [r1], -ip
   11f00:	andeq	r4, r1, r4, lsl #20
   11f04:	andeq	r4, r1, r0, lsr #20
   11f08:	andeq	r5, r2, r0, asr #32
   11f0c:	andeq	r4, r1, ip, lsr #20
   11f10:	andeq	r4, r1, ip, ror #21
   11f14:	muleq	r1, r4, sl
   11f18:	muleq	r1, ip, sl
   11f1c:	andeq	r4, r1, r8, asr #22
   11f20:	andeq	r4, r1, r0, lsr #22
   11f24:	andeq	r4, r1, r4, ror sl
   11f28:	andeq	r4, r1, r0, ror #20
   11f2c:	mov	fp, #0
   11f30:	mov	lr, #0
   11f34:	pop	{r1}		; (ldr r1, [sp], #4)
   11f38:	mov	r2, sp
   11f3c:	push	{r2}		; (str r2, [sp, #-4]!)
   11f40:	push	{r0}		; (str r0, [sp, #-4]!)
   11f44:	ldr	ip, [pc, #16]	; 11f5c <__assert_fail@plt+0xb64>
   11f48:	push	{ip}		; (str ip, [sp, #-4]!)
   11f4c:	ldr	r0, [pc, #12]	; 11f60 <__assert_fail@plt+0xb68>
   11f50:	ldr	r3, [pc, #12]	; 11f64 <__assert_fail@plt+0xb6c>
   11f54:	bl	11224 <__libc_start_main@plt>
   11f58:	bl	113bc <abort@plt>
   11f5c:	andeq	r4, r1, r8, asr #12
   11f60:	andeq	r1, r1, r8, lsl #8
   11f64:	andeq	r4, r1, r8, ror #11
   11f68:	ldr	r3, [pc, #20]	; 11f84 <__assert_fail@plt+0xb8c>
   11f6c:	ldr	r2, [pc, #20]	; 11f88 <__assert_fail@plt+0xb90>
   11f70:	add	r3, pc, r3
   11f74:	ldr	r2, [r3, r2]
   11f78:	cmp	r2, #0
   11f7c:	bxeq	lr
   11f80:	b	11248 <__gmon_start__@plt>
   11f84:	andeq	r2, r1, r4, ror #30
   11f88:	andeq	r0, r0, r0, lsr #2
   11f8c:	ldr	r0, [pc, #24]	; 11fac <__assert_fail@plt+0xbb4>
   11f90:	ldr	r3, [pc, #24]	; 11fb0 <__assert_fail@plt+0xbb8>
   11f94:	cmp	r3, r0
   11f98:	bxeq	lr
   11f9c:	ldr	r3, [pc, #16]	; 11fb4 <__assert_fail@plt+0xbbc>
   11fa0:	cmp	r3, #0
   11fa4:	bxeq	lr
   11fa8:	bx	r3
   11fac:	andeq	r5, r2, ip, lsr #32
   11fb0:	andeq	r5, r2, ip, lsr #32
   11fb4:	andeq	r0, r0, r0
   11fb8:	ldr	r0, [pc, #36]	; 11fe4 <__assert_fail@plt+0xbec>
   11fbc:	ldr	r1, [pc, #36]	; 11fe8 <__assert_fail@plt+0xbf0>
   11fc0:	sub	r1, r1, r0
   11fc4:	asr	r1, r1, #2
   11fc8:	add	r1, r1, r1, lsr #31
   11fcc:	asrs	r1, r1, #1
   11fd0:	bxeq	lr
   11fd4:	ldr	r3, [pc, #16]	; 11fec <__assert_fail@plt+0xbf4>
   11fd8:	cmp	r3, #0
   11fdc:	bxeq	lr
   11fe0:	bx	r3
   11fe4:	andeq	r5, r2, ip, lsr #32
   11fe8:	andeq	r5, r2, ip, lsr #32
   11fec:	andeq	r0, r0, r0
   11ff0:	push	{r4, lr}
   11ff4:	ldr	r4, [pc, #24]	; 12014 <__assert_fail@plt+0xc1c>
   11ff8:	ldrb	r3, [r4]
   11ffc:	cmp	r3, #0
   12000:	popne	{r4, pc}
   12004:	bl	11f8c <__assert_fail@plt+0xb94>
   12008:	mov	r3, #1
   1200c:	strb	r3, [r4]
   12010:	pop	{r4, pc}
   12014:	andeq	r5, r2, ip, asr #32
   12018:	b	11fb8 <__assert_fail@plt+0xbc0>
   1201c:	push	{r4, r5, r6, r7, r8, lr}
   12020:	mov	r8, r0
   12024:	ldr	r7, [pc, #100]	; 12090 <__assert_fail@plt+0xc98>
   12028:	ldr	r5, [pc, #100]	; 12094 <__assert_fail@plt+0xc9c>
   1202c:	mov	r6, r1
   12030:	mov	r4, #0
   12034:	mov	r2, r6
   12038:	mov	r1, r5
   1203c:	mov	r0, r8
   12040:	bl	112c0 <strncasecmp@plt>
   12044:	cmp	r0, #0
   12048:	bne	12058 <__assert_fail@plt+0xc60>
   1204c:	ldrsb	r3, [r5, r6]
   12050:	cmp	r3, #0
   12054:	beq	12088 <__assert_fail@plt+0xc90>
   12058:	add	r4, r4, #1
   1205c:	cmp	r4, #4
   12060:	ldrne	r5, [r7, #24]!
   12064:	bne	12034 <__assert_fail@plt+0xc3c>
   12068:	mov	r2, #5
   1206c:	ldr	r1, [pc, #36]	; 12098 <__assert_fail@plt+0xca0>
   12070:	mov	r0, #0
   12074:	bl	111ac <dcgettext@plt>
   12078:	mov	r1, r8
   1207c:	bl	1129c <warnx@plt>
   12080:	mvn	r0, #0
   12084:	pop	{r4, r5, r6, r7, r8, pc}
   12088:	mov	r0, r4
   1208c:	pop	{r4, r5, r6, r7, r8, pc}
   12090:	andeq	r4, r1, r8, ror r6
   12094:	andeq	r4, r1, r8, ror #14
   12098:	andeq	r4, r1, r0, ror r7
   1209c:	push	{r1, r2, r3}
   120a0:	push	{r4, lr}
   120a4:	sub	sp, sp, #12
   120a8:	ldr	r4, [pc, #84]	; 12104 <__assert_fail@plt+0xd0c>
   120ac:	add	ip, sp, #24
   120b0:	mov	r3, ip
   120b4:	ldr	r1, [r4]
   120b8:	ldr	r2, [sp, #20]
   120bc:	str	r1, [sp, #4]
   120c0:	mov	r1, #1
   120c4:	str	ip, [sp]
   120c8:	bl	112d8 <__vasprintf_chk@plt>
   120cc:	cmp	r0, #0
   120d0:	blt	120f4 <__assert_fail@plt+0xcfc>
   120d4:	ldr	r2, [sp, #4]
   120d8:	ldr	r3, [r4]
   120dc:	cmp	r2, r3
   120e0:	bne	12100 <__assert_fail@plt+0xd08>
   120e4:	add	sp, sp, #12
   120e8:	pop	{r4, lr}
   120ec:	add	sp, sp, #12
   120f0:	bx	lr
   120f4:	ldr	r1, [pc, #12]	; 12108 <__assert_fail@plt+0xd10>
   120f8:	mov	r0, #1
   120fc:	bl	111dc <err@plt>
   12100:	bl	111c4 <__stack_chk_fail@plt>
   12104:	ldrdeq	r4, [r2], -r0
   12108:	andeq	r4, r1, r4, lsl #15
   1210c:	cmp	r0, #0
   12110:	push	{r4, lr}
   12114:	blt	12160 <__assert_fail@plt+0xd68>
   12118:	ldr	r3, [pc, #84]	; 12174 <__assert_fail@plt+0xd7c>
   1211c:	ldr	r3, [r3]
   12120:	cmp	r0, r3
   12124:	bcs	1214c <__assert_fail@plt+0xd54>
   12128:	ldr	r3, [pc, #72]	; 12178 <__assert_fail@plt+0xd80>
   1212c:	ldr	r0, [r3, r0, lsl #2]
   12130:	cmp	r0, #3
   12134:	pople	{r4, pc}
   12138:	ldr	r3, [pc, #60]	; 1217c <__assert_fail@plt+0xd84>
   1213c:	mov	r2, #100	; 0x64
   12140:	ldr	r1, [pc, #56]	; 12180 <__assert_fail@plt+0xd88>
   12144:	ldr	r0, [pc, #56]	; 12184 <__assert_fail@plt+0xd8c>
   12148:	bl	113f8 <__assert_fail@plt>
   1214c:	ldr	r3, [pc, #40]	; 1217c <__assert_fail@plt+0xd84>
   12150:	mov	r2, #99	; 0x63
   12154:	ldr	r1, [pc, #36]	; 12180 <__assert_fail@plt+0xd88>
   12158:	ldr	r0, [pc, #40]	; 12188 <__assert_fail@plt+0xd90>
   1215c:	bl	113f8 <__assert_fail@plt>
   12160:	ldr	r3, [pc, #20]	; 1217c <__assert_fail@plt+0xd84>
   12164:	mov	r2, #98	; 0x62
   12168:	ldr	r1, [pc, #16]	; 12180 <__assert_fail@plt+0xd88>
   1216c:	ldr	r0, [pc, #24]	; 1218c <__assert_fail@plt+0xd94>
   12170:	bl	113f8 <__assert_fail@plt>
   12174:	andeq	r5, r2, r0, asr r0
   12178:	andeq	r5, r2, r8
   1217c:	ldrdeq	r4, [r1], -r8
   12180:	muleq	r1, ip, r7
   12184:	ldrdeq	r4, [r1], -r8
   12188:	andeq	r4, r1, r0, asr #15
   1218c:			; <UNDEFINED> instruction: 0x000147b4
   12190:	ldr	r3, [pc, #292]	; 122bc <__assert_fail@plt+0xec4>
   12194:	push	{r4, r5, r6, lr}
   12198:	ldr	r4, [r3]
   1219c:	mov	r0, r4
   121a0:	bl	11200 <__fpending@plt>
   121a4:	mov	r6, r0
   121a8:	mov	r0, r4
   121ac:	bl	11164 <ferror@plt>
   121b0:	mov	r5, r0
   121b4:	mov	r0, r4
   121b8:	bl	11320 <fclose@plt>
   121bc:	cmp	r5, #0
   121c0:	mov	r4, r0
   121c4:	bne	1226c <__assert_fail@plt+0xe74>
   121c8:	cmp	r0, #0
   121cc:	beq	121e8 <__assert_fail@plt+0xdf0>
   121d0:	bl	112b4 <__errno_location@plt>
   121d4:	cmp	r6, #0
   121d8:	ldr	r3, [r0]
   121dc:	bne	12244 <__assert_fail@plt+0xe4c>
   121e0:	cmp	r3, #9
   121e4:	bne	12244 <__assert_fail@plt+0xe4c>
   121e8:	ldr	r3, [pc, #208]	; 122c0 <__assert_fail@plt+0xec8>
   121ec:	ldr	r4, [r3]
   121f0:	mov	r0, r4
   121f4:	bl	11200 <__fpending@plt>
   121f8:	mov	r6, r0
   121fc:	mov	r0, r4
   12200:	bl	11164 <ferror@plt>
   12204:	mov	r5, r0
   12208:	mov	r0, r4
   1220c:	bl	11320 <fclose@plt>
   12210:	cmp	r5, #0
   12214:	mov	r4, r0
   12218:	bne	122a0 <__assert_fail@plt+0xea8>
   1221c:	cmp	r0, #0
   12220:	popeq	{r4, r5, r6, pc}
   12224:	cmp	r6, #0
   12228:	bne	1223c <__assert_fail@plt+0xe44>
   1222c:	bl	112b4 <__errno_location@plt>
   12230:	ldr	r3, [r0]
   12234:	cmp	r3, #9
   12238:	popeq	{r4, r5, r6, pc}
   1223c:	mov	r0, #1
   12240:	bl	1117c <_exit@plt>
   12244:	cmp	r3, #32
   12248:	beq	121e8 <__assert_fail@plt+0xdf0>
   1224c:	cmp	r3, #0
   12250:	beq	12288 <__assert_fail@plt+0xe90>
   12254:	mov	r2, #5
   12258:	ldr	r1, [pc, #100]	; 122c4 <__assert_fail@plt+0xecc>
   1225c:	mov	r0, #0
   12260:	bl	111ac <dcgettext@plt>
   12264:	bl	11350 <warn@plt>
   12268:	b	1223c <__assert_fail@plt+0xe44>
   1226c:	bl	112b4 <__errno_location@plt>
   12270:	cmp	r4, #0
   12274:	ldr	r3, [r0]
   12278:	bne	12244 <__assert_fail@plt+0xe4c>
   1227c:	cmp	r3, #32
   12280:	strne	r4, [r0]
   12284:	beq	121e8 <__assert_fail@plt+0xdf0>
   12288:	mov	r2, #5
   1228c:	ldr	r1, [pc, #48]	; 122c4 <__assert_fail@plt+0xecc>
   12290:	mov	r0, #0
   12294:	bl	111ac <dcgettext@plt>
   12298:	bl	1129c <warnx@plt>
   1229c:	b	1223c <__assert_fail@plt+0xe44>
   122a0:	cmp	r0, #0
   122a4:	bne	1223c <__assert_fail@plt+0xe44>
   122a8:	bl	112b4 <__errno_location@plt>
   122ac:	ldr	r3, [r0]
   122b0:	cmp	r3, #32
   122b4:	strne	r4, [r0]
   122b8:	b	1223c <__assert_fail@plt+0xe44>
   122bc:	andeq	r5, r2, r4, asr #32
   122c0:	andeq	r5, r2, r0, asr #32
   122c4:	andeq	r4, r1, r0, lsl #16
   122c8:	cmp	r0, #0
   122cc:	mov	r3, #0
   122d0:	str	r3, [r1]
   122d4:	bxeq	lr
   122d8:	ldrsb	r2, [r0]
   122dc:	cmp	r2, #47	; 0x2f
   122e0:	bne	1231c <__assert_fail@plt+0xf24>
   122e4:	ldrsb	r3, [r0, #1]
   122e8:	cmp	r3, #47	; 0x2f
   122ec:	bne	12324 <__assert_fail@plt+0xf2c>
   122f0:	add	r3, r0, #1
   122f4:	b	12304 <__assert_fail@plt+0xf0c>
   122f8:	ldrsb	r2, [r3]
   122fc:	cmp	r2, #47	; 0x2f
   12300:	bne	12324 <__assert_fail@plt+0xf2c>
   12304:	cmp	r3, #0
   12308:	mov	r0, r3
   1230c:	bxeq	lr
   12310:	ldrsb	r2, [r3], #1
   12314:	cmp	r2, #47	; 0x2f
   12318:	beq	122f8 <__assert_fail@plt+0xf00>
   1231c:	cmp	r2, #0
   12320:	beq	12360 <__assert_fail@plt+0xf68>
   12324:	mov	r3, #1
   12328:	str	r3, [r1]
   1232c:	ldrsb	r3, [r0, #1]
   12330:	add	r2, r0, #1
   12334:	cmp	r3, #47	; 0x2f
   12338:	cmpne	r3, #0
   1233c:	bxeq	lr
   12340:	rsb	r3, r0, #1
   12344:	add	ip, r2, r3
   12348:	str	ip, [r1]
   1234c:	ldrsb	ip, [r2, #1]!
   12350:	cmp	ip, #0
   12354:	cmpne	ip, #47	; 0x2f
   12358:	bne	12344 <__assert_fail@plt+0xf4c>
   1235c:	bx	lr
   12360:	mov	r0, r2
   12364:	bx	lr
   12368:	push	{r4, r5, r6, r7, r8, lr}
   1236c:	mov	r7, r1
   12370:	ldrsb	r1, [r0]
   12374:	cmp	r1, #0
   12378:	movne	r5, r0
   1237c:	movne	r4, #0
   12380:	beq	123ec <__assert_fail@plt+0xff4>
   12384:	cmp	r1, #92	; 0x5c
   12388:	addne	r6, r5, r4
   1238c:	beq	123bc <__assert_fail@plt+0xfc4>
   12390:	mov	r0, r7
   12394:	bl	11290 <strchr@plt>
   12398:	cmp	r0, #0
   1239c:	bne	123e4 <__assert_fail@plt+0xfec>
   123a0:	ldrsb	r1, [r6, #1]!
   123a4:	add	r4, r4, #1
   123a8:	mov	r0, r4
   123ac:	cmp	r1, #0
   123b0:	popeq	{r4, r5, r6, r7, r8, pc}
   123b4:	cmp	r1, #92	; 0x5c
   123b8:	bne	12390 <__assert_fail@plt+0xf98>
   123bc:	add	r3, r5, r4
   123c0:	ldrsb	r3, [r3, #1]
   123c4:	cmp	r3, #0
   123c8:	beq	123e4 <__assert_fail@plt+0xfec>
   123cc:	add	r4, r4, #2
   123d0:	mov	r0, r4
   123d4:	ldrsb	r1, [r5, r4]
   123d8:	cmp	r1, #0
   123dc:	bne	12384 <__assert_fail@plt+0xf8c>
   123e0:	pop	{r4, r5, r6, r7, r8, pc}
   123e4:	mov	r0, r4
   123e8:	pop	{r4, r5, r6, r7, r8, pc}
   123ec:	mov	r0, r1
   123f0:	pop	{r4, r5, r6, r7, r8, pc}
   123f4:	ldr	ip, [pc, #244]	; 124f0 <__assert_fail@plt+0x10f8>
   123f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   123fc:	add	ip, pc, ip
   12400:	ldr	lr, [pc, #236]	; 124f4 <__assert_fail@plt+0x10fc>
   12404:	sub	sp, sp, #12
   12408:	mov	r5, #0
   1240c:	ldr	r7, [ip, lr]
   12410:	mov	r4, r0
   12414:	mov	r8, r1
   12418:	ldr	r3, [r7]
   1241c:	mov	r0, ip
   12420:	mov	r9, r2
   12424:	str	r5, [sp]
   12428:	str	r3, [sp, #4]
   1242c:	bl	112b4 <__errno_location@plt>
   12430:	cmp	r4, r5
   12434:	str	r5, [r0]
   12438:	beq	12448 <__assert_fail@plt+0x1050>
   1243c:	ldrsb	r3, [r4]
   12440:	cmp	r3, r5
   12444:	bne	12468 <__assert_fail@plt+0x1070>
   12448:	ldr	r1, [pc, #168]	; 124f8 <__assert_fail@plt+0x1100>
   1244c:	mov	r3, r4
   12450:	add	r1, pc, r1
   12454:	mov	r2, r8
   12458:	ldr	r0, [r1]
   1245c:	ldr	r1, [pc, #152]	; 124fc <__assert_fail@plt+0x1104>
   12460:	add	r1, pc, r1
   12464:	bl	11344 <errx@plt>
   12468:	mov	r6, r0
   1246c:	mov	r2, r9
   12470:	mov	r3, r5
   12474:	mov	r1, sp
   12478:	mov	r0, r4
   1247c:	bl	111a0 <__strtoull_internal@plt>
   12480:	ldr	r2, [r6]
   12484:	cmp	r2, r5
   12488:	bne	124c4 <__assert_fail@plt+0x10cc>
   1248c:	ldr	r3, [sp]
   12490:	cmp	r3, r4
   12494:	beq	12448 <__assert_fail@plt+0x1050>
   12498:	cmp	r3, r5
   1249c:	beq	124ac <__assert_fail@plt+0x10b4>
   124a0:	ldrsb	r3, [r3]
   124a4:	cmp	r3, r5
   124a8:	bne	12448 <__assert_fail@plt+0x1050>
   124ac:	ldr	r2, [sp, #4]
   124b0:	ldr	r3, [r7]
   124b4:	cmp	r2, r3
   124b8:	bne	124ec <__assert_fail@plt+0x10f4>
   124bc:	add	sp, sp, #12
   124c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   124c4:	ldr	r3, [pc, #52]	; 12500 <__assert_fail@plt+0x1108>
   124c8:	cmp	r2, #34	; 0x22
   124cc:	add	r3, pc, r3
   124d0:	ldr	r0, [r3]
   124d4:	bne	12448 <__assert_fail@plt+0x1050>
   124d8:	ldr	r1, [pc, #36]	; 12504 <__assert_fail@plt+0x110c>
   124dc:	mov	r3, r4
   124e0:	mov	r2, r8
   124e4:	add	r1, pc, r1
   124e8:	bl	111dc <err@plt>
   124ec:	bl	111c4 <__stack_chk_fail@plt>
   124f0:	ldrdeq	r2, [r1], -r8
   124f4:	andeq	r0, r0, ip, lsl r1
   124f8:	ldrdeq	r2, [r1], -r0
   124fc:	andeq	r2, r0, r8, lsr #15
   12500:	andeq	r2, r1, r4, asr fp
   12504:	andeq	r2, r0, r4, lsr #14
   12508:	push	{r4, lr}
   1250c:	mov	r5, r0
   12510:	mov	r4, r1
   12514:	bl	112b4 <__errno_location@plt>
   12518:	ldr	ip, [pc, #32]	; 12540 <__assert_fail@plt+0x1148>
   1251c:	ldr	r1, [pc, #32]	; 12544 <__assert_fail@plt+0x114c>
   12520:	add	ip, pc, ip
   12524:	mov	lr, #34	; 0x22
   12528:	mov	r3, r5
   1252c:	mov	r2, r4
   12530:	add	r1, pc, r1
   12534:	str	lr, [r0]
   12538:	ldr	r0, [ip]
   1253c:	bl	111dc <err@plt>
   12540:	andeq	r2, r1, r0, lsl #22
   12544:	ldrdeq	r2, [r0], -r8
   12548:	push	{r4, r5, r6, lr}
   1254c:	mov	r4, r0
   12550:	mov	r5, r1
   12554:	bl	123f4 <__assert_fail@plt+0xffc>
   12558:	mov	r3, #0
   1255c:	mvn	r2, #0
   12560:	cmp	r1, r3
   12564:	cmpeq	r0, r2
   12568:	popls	{r4, r5, r6, pc}
   1256c:	mov	r1, r5
   12570:	mov	r0, r4
   12574:	bl	12508 <__assert_fail@plt+0x1110>
   12578:	ldr	r3, [pc, #8]	; 12588 <__assert_fail@plt+0x1190>
   1257c:	add	r3, pc, r3
   12580:	str	r0, [r3]
   12584:	bx	lr
   12588:	andeq	r2, r1, r4, lsr #21
   1258c:	ldr	r3, [pc, #1648]	; 12c04 <__assert_fail@plt+0x180c>
   12590:	ldr	ip, [pc, #1648]	; 12c08 <__assert_fail@plt+0x1810>
   12594:	add	r3, pc, r3
   12598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1259c:	mov	r5, r1
   125a0:	ldr	r1, [r3, ip]
   125a4:	sub	sp, sp, #52	; 0x34
   125a8:	mov	ip, r1
   125ac:	mov	r8, r0
   125b0:	str	r1, [sp, #24]
   125b4:	mov	r0, #0
   125b8:	mov	r1, #0
   125bc:	ldr	r3, [ip]
   125c0:	strd	r0, [r5]
   125c4:	mov	r9, r2
   125c8:	str	r3, [sp, #44]	; 0x2c
   125cc:	bl	112b4 <__errno_location@plt>
   125d0:	cmp	r8, #0
   125d4:	mov	r4, r0
   125d8:	beq	127b8 <__assert_fail@plt+0x13c0>
   125dc:	ldrsb	fp, [r8]
   125e0:	cmp	fp, #0
   125e4:	beq	127b8 <__assert_fail@plt+0x13c0>
   125e8:	bl	11260 <__ctype_b_loc@plt>
   125ec:	mov	r2, r8
   125f0:	ldr	r1, [r0]
   125f4:	b	125fc <__assert_fail@plt+0x1204>
   125f8:	ldrsb	fp, [r2, #1]!
   125fc:	uxtb	r3, fp
   12600:	lsl	r3, r3, #1
   12604:	ldrh	ip, [r1, r3]
   12608:	ands	ip, ip, #8192	; 0x2000
   1260c:	bne	125f8 <__assert_fail@plt+0x1200>
   12610:	cmp	fp, #45	; 0x2d
   12614:	beq	127b8 <__assert_fail@plt+0x13c0>
   12618:	add	fp, sp, #40	; 0x28
   1261c:	mov	r3, ip
   12620:	mov	r2, ip
   12624:	str	ip, [r4]
   12628:	mov	r1, fp
   1262c:	mov	r0, r8
   12630:	str	ip, [sp, #40]	; 0x28
   12634:	bl	111a0 <__strtoull_internal@plt>
   12638:	ldr	sl, [sp, #40]	; 0x28
   1263c:	cmp	sl, r8
   12640:	mov	r2, r0
   12644:	mov	r3, r1
   12648:	ldr	r0, [r4]
   1264c:	strd	r2, [sp, #16]
   12650:	beq	12938 <__assert_fail@plt+0x1540>
   12654:	cmp	r0, #0
   12658:	bne	127e0 <__assert_fail@plt+0x13e8>
   1265c:	cmp	sl, #0
   12660:	beq	1296c <__assert_fail@plt+0x1574>
   12664:	ldrsb	r0, [sl]
   12668:	cmp	r0, #0
   1266c:	beq	12960 <__assert_fail@plt+0x1568>
   12670:	mov	r8, #0
   12674:	mov	r2, #0
   12678:	mov	r3, #0
   1267c:	str	r9, [sp, #32]
   12680:	mov	r6, fp
   12684:	mov	r9, sl
   12688:	mov	r7, r8
   1268c:	mov	sl, r2
   12690:	mov	fp, r3
   12694:	str	r5, [sp, #28]
   12698:	ldrsb	r2, [r9, #1]
   1269c:	cmp	r2, #105	; 0x69
   126a0:	beq	12824 <__assert_fail@plt+0x142c>
   126a4:	bic	r1, r2, #32
   126a8:	cmp	r1, #66	; 0x42
   126ac:	bne	12944 <__assert_fail@plt+0x154c>
   126b0:	ldrsb	r2, [r9, #2]
   126b4:	cmp	r2, #0
   126b8:	beq	12b28 <__assert_fail@plt+0x1730>
   126bc:	bl	11374 <localeconv@plt>
   126c0:	cmp	r0, #0
   126c4:	beq	127b8 <__assert_fail@plt+0x13c0>
   126c8:	ldr	r2, [r0]
   126cc:	cmp	r2, #0
   126d0:	beq	127b8 <__assert_fail@plt+0x13c0>
   126d4:	mov	r0, r2
   126d8:	str	r2, [sp]
   126dc:	bl	11284 <strlen@plt>
   126e0:	orrs	r3, sl, fp
   126e4:	mov	r5, r0
   126e8:	bne	127b8 <__assert_fail@plt+0x13c0>
   126ec:	ldrsb	r1, [r9]
   126f0:	cmp	r1, #0
   126f4:	beq	127b8 <__assert_fail@plt+0x13c0>
   126f8:	ldr	r2, [sp]
   126fc:	mov	r1, r9
   12700:	mov	r0, r2
   12704:	mov	r2, r5
   12708:	bl	113b0 <strncmp@plt>
   1270c:	cmp	r0, #0
   12710:	bne	127b8 <__assert_fail@plt+0x13c0>
   12714:	ldrsb	r2, [r9, r5]
   12718:	add	r5, r9, r5
   1271c:	cmp	r2, #48	; 0x30
   12720:	bne	12740 <__assert_fail@plt+0x1348>
   12724:	add	r8, r8, #1
   12728:	sub	r1, r8, r5
   1272c:	mov	r3, r5
   12730:	add	r8, r3, r1
   12734:	ldrsb	r2, [r3, #1]!
   12738:	cmp	r2, #48	; 0x30
   1273c:	beq	12730 <__assert_fail@plt+0x1338>
   12740:	mov	r3, #0
   12744:	str	r7, [r4]
   12748:	mov	r2, r3
   1274c:	mov	r1, r6
   12750:	mov	r0, r5
   12754:	str	r7, [sp, #40]	; 0x28
   12758:	bl	111a0 <__strtoull_internal@plt>
   1275c:	ldr	r9, [sp, #40]	; 0x28
   12760:	cmp	r9, r5
   12764:	mov	sl, r0
   12768:	mov	fp, r1
   1276c:	beq	12934 <__assert_fail@plt+0x153c>
   12770:	ldr	ip, [r4]
   12774:	cmp	ip, #0
   12778:	beq	12810 <__assert_fail@plt+0x1418>
   1277c:	subs	r3, r0, #1
   12780:	str	r3, [sp, #8]
   12784:	sbc	r3, r1, #0
   12788:	str	r3, [sp, #12]
   1278c:	ldrd	r2, [sp, #8]
   12790:	mvn	r1, #0
   12794:	mvn	r0, #2
   12798:	cmp	r3, r1
   1279c:	cmpeq	r2, r0
   127a0:	bhi	12b64 <__assert_fail@plt+0x176c>
   127a4:	cmp	r9, #0
   127a8:	beq	127b8 <__assert_fail@plt+0x13c0>
   127ac:	ldrsb	r2, [r9]
   127b0:	cmp	r2, #0
   127b4:	bne	12698 <__assert_fail@plt+0x12a0>
   127b8:	mov	r3, #22
   127bc:	mvn	r0, #21
   127c0:	str	r3, [r4]
   127c4:	ldr	r3, [sp, #24]
   127c8:	ldr	r2, [sp, #44]	; 0x2c
   127cc:	ldr	r3, [r3]
   127d0:	cmp	r2, r3
   127d4:	bne	12c00 <__assert_fail@plt+0x1808>
   127d8:	add	sp, sp, #52	; 0x34
   127dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127e0:	subs	r6, r2, #1
   127e4:	sbc	r7, r3, #0
   127e8:	mvn	r3, #0
   127ec:	mvn	r2, #2
   127f0:	cmp	r7, r3
   127f4:	cmpeq	r6, r2
   127f8:	bls	1265c <__assert_fail@plt+0x1264>
   127fc:	rsb	r0, r0, #0
   12800:	cmp	r0, #0
   12804:	bge	127c4 <__assert_fail@plt+0x13cc>
   12808:	rsb	r3, r0, #0
   1280c:	b	127c0 <__assert_fail@plt+0x13c8>
   12810:	orrs	r3, sl, fp
   12814:	bne	127a4 <__assert_fail@plt+0x13ac>
   12818:	ldrsb	r2, [r9, #1]
   1281c:	cmp	r2, #105	; 0x69
   12820:	bne	126a4 <__assert_fail@plt+0x12ac>
   12824:	ldrsb	r2, [r9, #2]
   12828:	bic	r2, r2, #32
   1282c:	cmp	r2, #66	; 0x42
   12830:	bne	126bc <__assert_fail@plt+0x12c4>
   12834:	ldrsb	r2, [r9, #3]
   12838:	cmp	r2, #0
   1283c:	bne	126bc <__assert_fail@plt+0x12c4>
   12840:	strd	sl, [sp]
   12844:	mov	sl, r9
   12848:	ldr	r9, [sp, #32]
   1284c:	mov	r3, #1024	; 0x400
   12850:	ldr	r5, [sp, #28]
   12854:	str	r3, [sp, #28]
   12858:	ldrsb	r7, [sl]
   1285c:	ldr	r6, [pc, #936]	; 12c0c <__assert_fail@plt+0x1814>
   12860:	add	r6, pc, r6
   12864:	mov	r1, r7
   12868:	mov	r0, r6
   1286c:	bl	11290 <strchr@plt>
   12870:	cmp	r0, #0
   12874:	beq	12b44 <__assert_fail@plt+0x174c>
   12878:	sub	ip, r0, r6
   1287c:	add	fp, ip, #1
   12880:	cmp	fp, #0
   12884:	beq	12950 <__assert_fail@plt+0x1558>
   12888:	ldr	r3, [sp, #20]
   1288c:	ldr	r6, [sp, #28]
   12890:	cmp	r3, #0
   12894:	mov	r0, #0
   12898:	asr	r7, r6, #31
   1289c:	mov	r1, #0
   128a0:	bne	12ba0 <__assert_fail@plt+0x17a8>
   128a4:	orrs	r3, r0, r1
   128a8:	bne	12994 <__assert_fail@plt+0x159c>
   128ac:	str	fp, [sp, #32]
   128b0:	sub	ip, ip, #1
   128b4:	str	r8, [sp, #36]	; 0x24
   128b8:	mov	fp, r4
   128bc:	ldrd	r0, [sp, #16]
   128c0:	mov	lr, r5
   128c4:	mov	sl, r9
   128c8:	b	128d8 <__assert_fail@plt+0x14e0>
   128cc:	orrs	r3, r4, r5
   128d0:	sub	ip, ip, #1
   128d4:	bne	1297c <__assert_fail@plt+0x1584>
   128d8:	mul	r2, r0, r7
   128dc:	cmn	ip, #1
   128e0:	mla	r2, r6, r1, r2
   128e4:	umull	r0, r1, r0, r6
   128e8:	add	r2, r2, r1
   128ec:	mov	r1, r2
   128f0:	beq	12b08 <__assert_fail@plt+0x1710>
   128f4:	cmp	r2, #0
   128f8:	mov	r4, #0
   128fc:	mov	r5, #0
   12900:	beq	128cc <__assert_fail@plt+0x14d4>
   12904:	umull	r2, r3, r6, r2
   12908:	umull	r8, r9, r0, r6
   1290c:	strd	r2, [sp, #8]
   12910:	mov	r8, r9
   12914:	ldr	r3, [sp, #12]
   12918:	adds	r8, r2, r8
   1291c:	mov	r2, #0
   12920:	adc	r3, r3, r2
   12924:	cmp	r3, r2
   12928:	movne	r4, #1
   1292c:	movne	r5, #0
   12930:	b	128cc <__assert_fail@plt+0x14d4>
   12934:	ldr	r0, [r4]
   12938:	cmp	r0, #0
   1293c:	beq	127b8 <__assert_fail@plt+0x13c0>
   12940:	b	127fc <__assert_fail@plt+0x1404>
   12944:	cmp	r2, #0
   12948:	bne	126bc <__assert_fail@plt+0x12c4>
   1294c:	b	12840 <__assert_fail@plt+0x1448>
   12950:	cmp	r9, #0
   12954:	movne	r0, fp
   12958:	bne	129a0 <__assert_fail@plt+0x15a8>
   1295c:	mov	r0, r9
   12960:	ldrd	r2, [sp, #16]
   12964:	strd	r2, [r5]
   12968:	b	127c4 <__assert_fail@plt+0x13cc>
   1296c:	ldrd	r2, [sp, #16]
   12970:	mov	r0, sl
   12974:	strd	r2, [r5]
   12978:	b	127c4 <__assert_fail@plt+0x13cc>
   1297c:	mov	r4, fp
   12980:	ldr	r8, [sp, #36]	; 0x24
   12984:	ldr	fp, [sp, #32]
   12988:	mov	r5, lr
   1298c:	mov	r9, sl
   12990:	strd	r0, [sp, #16]
   12994:	mvn	r0, #33	; 0x21
   12998:	cmp	r9, #0
   1299c:	beq	129a4 <__assert_fail@plt+0x15ac>
   129a0:	str	fp, [r9]
   129a4:	ldrd	r2, [sp]
   129a8:	mov	r1, r2
   129ac:	orrs	r3, r1, r3
   129b0:	movne	r3, #1
   129b4:	moveq	r3, #0
   129b8:	cmp	fp, #0
   129bc:	moveq	r3, #0
   129c0:	cmp	r3, #0
   129c4:	beq	12afc <__assert_fail@plt+0x1704>
   129c8:	ldr	r3, [pc, #576]	; 12c10 <__assert_fail@plt+0x1818>
   129cc:	ldr	r1, [pc, #576]	; 12c14 <__assert_fail@plt+0x181c>
   129d0:	umull	ip, r3, r3, r8
   129d4:	smull	ip, r1, r1, r8
   129d8:	lsr	r3, r3, #1
   129dc:	rsb	r1, r1, r8, asr #31
   129e0:	add	r3, r3, r3, lsl #1
   129e4:	add	r1, r1, fp
   129e8:	subs	r3, r8, r3
   129ec:	sub	r6, r1, #1
   129f0:	bne	12b6c <__assert_fail@plt+0x1774>
   129f4:	ldrd	r8, [sp]
   129f8:	adds	r3, r8, r8
   129fc:	adc	r2, r9, r9
   12a00:	adds	r3, r3, r8
   12a04:	adc	r2, r2, r9
   12a08:	lsl	ip, r3, #5
   12a0c:	lsl	lr, r2, #5
   12a10:	orr	lr, lr, r3, lsr #27
   12a14:	adds	r3, r3, ip
   12a18:	adc	r2, r2, lr
   12a1c:	adds	r3, r8, r3
   12a20:	str	r3, [sp]
   12a24:	ldr	r3, [sp, #4]
   12a28:	adc	r3, r3, r2
   12a2c:	str	r3, [sp, #4]
   12a30:	cmp	r6, #0
   12a34:	blt	127b8 <__assert_fail@plt+0x13c0>
   12a38:	beq	12ae0 <__assert_fail@plt+0x16e8>
   12a3c:	ldr	r3, [sp, #4]
   12a40:	ldr	r8, [sp, #28]
   12a44:	cmp	r3, #0
   12a48:	mov	r6, #0
   12a4c:	asr	r9, r8, #31
   12a50:	mov	r7, #0
   12a54:	bne	12bd4 <__assert_fail@plt+0x17dc>
   12a58:	orrs	r3, r6, r7
   12a5c:	bne	12ae0 <__assert_fail@plt+0x16e8>
   12a60:	sub	r1, r1, #3
   12a64:	ldrd	r2, [sp]
   12a68:	mov	lr, r4
   12a6c:	str	r5, [sp, #8]
   12a70:	b	12a80 <__assert_fail@plt+0x1688>
   12a74:	orrs	ip, r6, r7
   12a78:	sub	r1, r1, #1
   12a7c:	bne	12ad4 <__assert_fail@plt+0x16dc>
   12a80:	mul	ip, r2, r9
   12a84:	cmn	r1, #1
   12a88:	mla	ip, r8, r3, ip
   12a8c:	umull	r2, r3, r2, r8
   12a90:	add	ip, ip, r3
   12a94:	mov	r3, ip
   12a98:	beq	12ad4 <__assert_fail@plt+0x16dc>
   12a9c:	cmp	ip, #0
   12aa0:	mov	r6, #0
   12aa4:	mov	r7, #0
   12aa8:	beq	12a74 <__assert_fail@plt+0x167c>
   12aac:	umull	sl, fp, r2, r8
   12ab0:	umull	r4, r5, r8, ip
   12ab4:	mov	ip, fp
   12ab8:	adds	ip, r4, ip
   12abc:	mov	ip, #0
   12ac0:	adc	ip, r5, ip
   12ac4:	cmp	ip, #0
   12ac8:	movne	r6, #1
   12acc:	movne	r7, #0
   12ad0:	b	12a74 <__assert_fail@plt+0x167c>
   12ad4:	ldr	r5, [sp, #8]
   12ad8:	mov	r4, lr
   12adc:	strd	r2, [sp]
   12ae0:	ldrd	r2, [sp]
   12ae4:	ldr	r1, [sp, #16]
   12ae8:	adds	r1, r1, r2
   12aec:	str	r1, [sp, #16]
   12af0:	ldr	r1, [sp, #20]
   12af4:	adc	r3, r1, r3
   12af8:	str	r3, [sp, #20]
   12afc:	ldrd	r2, [sp, #16]
   12b00:	strd	r2, [r5]
   12b04:	b	12800 <__assert_fail@plt+0x1408>
   12b08:	mov	r4, fp
   12b0c:	strd	r0, [sp, #16]
   12b10:	ldr	r8, [sp, #36]	; 0x24
   12b14:	ldr	fp, [sp, #32]
   12b18:	mov	r5, lr
   12b1c:	mov	r9, sl
   12b20:	mov	r0, #0
   12b24:	b	12998 <__assert_fail@plt+0x15a0>
   12b28:	mov	r3, #1000	; 0x3e8
   12b2c:	strd	sl, [sp]
   12b30:	ldr	r5, [sp, #28]
   12b34:	mov	sl, r9
   12b38:	str	r3, [sp, #28]
   12b3c:	ldr	r9, [sp, #32]
   12b40:	b	12858 <__assert_fail@plt+0x1460>
   12b44:	ldr	r6, [pc, #204]	; 12c18 <__assert_fail@plt+0x1820>
   12b48:	mov	r1, r7
   12b4c:	add	r6, pc, r6
   12b50:	mov	r0, r6
   12b54:	bl	11290 <strchr@plt>
   12b58:	cmp	r0, #0
   12b5c:	bne	12878 <__assert_fail@plt+0x1480>
   12b60:	b	127b8 <__assert_fail@plt+0x13c0>
   12b64:	mov	r0, ip
   12b68:	b	127fc <__assert_fail@plt+0x1404>
   12b6c:	cmp	r3, #1
   12b70:	bne	12a30 <__assert_fail@plt+0x1638>
   12b74:	ldrd	r8, [sp]
   12b78:	lsl	r2, r9, #2
   12b7c:	lsl	r3, r8, #2
   12b80:	adds	r3, r3, r8
   12b84:	orr	r2, r2, r8, lsr #30
   12b88:	adc	r2, r2, r9
   12b8c:	adds	r3, r3, r3
   12b90:	str	r3, [sp]
   12b94:	adc	r3, r2, r2
   12b98:	str	r3, [sp, #4]
   12b9c:	b	12a30 <__assert_fail@plt+0x1638>
   12ba0:	ldr	lr, [sp, #28]
   12ba4:	ldr	r3, [sp, #16]
   12ba8:	ldr	sl, [sp, #20]
   12bac:	umull	r2, r3, r3, lr
   12bb0:	str	r3, [sp, #8]
   12bb4:	mov	r3, #0
   12bb8:	str	r3, [sp, #12]
   12bbc:	ldrd	r2, [sp, #8]
   12bc0:	umlal	r2, r3, sl, lr
   12bc4:	cmp	r3, #0
   12bc8:	movne	r0, #1
   12bcc:	movne	r1, #0
   12bd0:	b	128a4 <__assert_fail@plt+0x14ac>
   12bd4:	ldr	r3, [sp]
   12bd8:	ldr	ip, [sp, #28]
   12bdc:	ldr	lr, [sp, #4]
   12be0:	umull	sl, fp, r3, ip
   12be4:	mov	r3, #0
   12be8:	mov	r2, fp
   12bec:	umlal	r2, r3, lr, ip
   12bf0:	cmp	r3, #0
   12bf4:	movne	r6, #1
   12bf8:	movne	r7, #0
   12bfc:	b	12a58 <__assert_fail@plt+0x1660>
   12c00:	bl	111c4 <__stack_chk_fail@plt>
   12c04:	andeq	r2, r1, r0, asr #18
   12c08:	andeq	r0, r0, ip, lsl r1
   12c0c:			; <UNDEFINED> instruction: 0x000023b4
   12c10:	bge	feabd6c4 <optarg@@GLIBC_2.4+0xfea9867c>
   12c14:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   12c18:	ldrdeq	r2, [r0], -r4
   12c1c:	mov	r2, #0
   12c20:	b	1258c <__assert_fail@plt+0x1194>
   12c24:	push	{r4, r5, r6, lr}
   12c28:	subs	r5, r0, #0
   12c2c:	mov	r6, r1
   12c30:	beq	12c9c <__assert_fail@plt+0x18a4>
   12c34:	ldrsb	r4, [r5]
   12c38:	cmp	r4, #0
   12c3c:	beq	12cb0 <__assert_fail@plt+0x18b8>
   12c40:	bl	11260 <__ctype_b_loc@plt>
   12c44:	mov	r3, r5
   12c48:	ldr	r0, [r0]
   12c4c:	b	12c64 <__assert_fail@plt+0x186c>
   12c50:	adds	r3, r3, #1
   12c54:	beq	12c9c <__assert_fail@plt+0x18a4>
   12c58:	ldrsb	r4, [r3]
   12c5c:	cmp	r4, #0
   12c60:	beq	12c78 <__assert_fail@plt+0x1880>
   12c64:	uxtb	r4, r4
   12c68:	lsl	r4, r4, #1
   12c6c:	ldrh	r2, [r0, r4]
   12c70:	tst	r2, #2048	; 0x800
   12c74:	bne	12c50 <__assert_fail@plt+0x1858>
   12c78:	cmp	r6, #0
   12c7c:	strne	r3, [r6]
   12c80:	cmp	r5, r3
   12c84:	bcs	12ca8 <__assert_fail@plt+0x18b0>
   12c88:	ldrsb	r3, [r3]
   12c8c:	cmp	r3, #0
   12c90:	bne	12ca8 <__assert_fail@plt+0x18b0>
   12c94:	mov	r0, #1
   12c98:	pop	{r4, r5, r6, pc}
   12c9c:	cmp	r6, #0
   12ca0:	movne	r3, #0
   12ca4:	strne	r3, [r6]
   12ca8:	mov	r0, #0
   12cac:	pop	{r4, r5, r6, pc}
   12cb0:	cmp	r1, #0
   12cb4:	strne	r5, [r1]
   12cb8:	b	12ca8 <__assert_fail@plt+0x18b0>
   12cbc:	push	{r4, r5, r6, lr}
   12cc0:	subs	r5, r0, #0
   12cc4:	mov	r6, r1
   12cc8:	beq	12d34 <__assert_fail@plt+0x193c>
   12ccc:	ldrsb	r4, [r5]
   12cd0:	cmp	r4, #0
   12cd4:	beq	12d48 <__assert_fail@plt+0x1950>
   12cd8:	bl	11260 <__ctype_b_loc@plt>
   12cdc:	mov	r3, r5
   12ce0:	ldr	r0, [r0]
   12ce4:	b	12cfc <__assert_fail@plt+0x1904>
   12ce8:	adds	r3, r3, #1
   12cec:	beq	12d34 <__assert_fail@plt+0x193c>
   12cf0:	ldrsb	r4, [r3]
   12cf4:	cmp	r4, #0
   12cf8:	beq	12d10 <__assert_fail@plt+0x1918>
   12cfc:	uxtb	r4, r4
   12d00:	lsl	r4, r4, #1
   12d04:	ldrh	r2, [r0, r4]
   12d08:	tst	r2, #4096	; 0x1000
   12d0c:	bne	12ce8 <__assert_fail@plt+0x18f0>
   12d10:	cmp	r6, #0
   12d14:	strne	r3, [r6]
   12d18:	cmp	r5, r3
   12d1c:	bcs	12d40 <__assert_fail@plt+0x1948>
   12d20:	ldrsb	r3, [r3]
   12d24:	cmp	r3, #0
   12d28:	bne	12d40 <__assert_fail@plt+0x1948>
   12d2c:	mov	r0, #1
   12d30:	pop	{r4, r5, r6, pc}
   12d34:	cmp	r6, #0
   12d38:	movne	r3, #0
   12d3c:	strne	r3, [r6]
   12d40:	mov	r0, #0
   12d44:	pop	{r4, r5, r6, pc}
   12d48:	cmp	r1, #0
   12d4c:	strne	r5, [r1]
   12d50:	b	12d40 <__assert_fail@plt+0x1948>
   12d54:	push	{r1, r2, r3}
   12d58:	ldr	r3, [pc, #188]	; 12e1c <__assert_fail@plt+0x1a24>
   12d5c:	ldr	r2, [pc, #188]	; 12e20 <__assert_fail@plt+0x1a28>
   12d60:	add	r3, pc, r3
   12d64:	push	{r4, r5, r6, r7, r8, lr}
   12d68:	sub	sp, sp, #12
   12d6c:	ldr	r7, [r3, r2]
   12d70:	ldr	r8, [sp, #36]	; 0x24
   12d74:	mov	r6, r0
   12d78:	ldr	r3, [r7]
   12d7c:	add	r4, sp, #48	; 0x30
   12d80:	str	r3, [sp, #4]
   12d84:	b	12da0 <__assert_fail@plt+0x19a8>
   12d88:	mov	r1, r5
   12d8c:	mov	r0, r6
   12d90:	bl	11104 <strcmp@plt>
   12d94:	add	r4, r4, #8
   12d98:	cmp	r0, #0
   12d9c:	beq	12dd8 <__assert_fail@plt+0x19e0>
   12da0:	ldr	r1, [r4, #-8]
   12da4:	sub	r3, r4, #4
   12da8:	cmp	r1, #0
   12dac:	str	r3, [sp]
   12db0:	beq	12df8 <__assert_fail@plt+0x1a00>
   12db4:	ldr	r5, [r4, #-4]
   12db8:	str	r4, [sp]
   12dbc:	cmp	r5, #0
   12dc0:	beq	12df8 <__assert_fail@plt+0x1a00>
   12dc4:	mov	r0, r6
   12dc8:	bl	11104 <strcmp@plt>
   12dcc:	cmp	r0, #0
   12dd0:	bne	12d88 <__assert_fail@plt+0x1990>
   12dd4:	mov	r0, #1
   12dd8:	ldr	r2, [sp, #4]
   12ddc:	ldr	r3, [r7]
   12de0:	cmp	r2, r3
   12de4:	bne	12e18 <__assert_fail@plt+0x1a20>
   12de8:	add	sp, sp, #12
   12dec:	pop	{r4, r5, r6, r7, r8, lr}
   12df0:	add	sp, sp, #12
   12df4:	bx	lr
   12df8:	ldr	r1, [pc, #36]	; 12e24 <__assert_fail@plt+0x1a2c>
   12dfc:	mov	r3, r6
   12e00:	add	r1, pc, r1
   12e04:	mov	r2, r8
   12e08:	ldr	r0, [r1]
   12e0c:	ldr	r1, [pc, #20]	; 12e28 <__assert_fail@plt+0x1a30>
   12e10:	add	r1, pc, r1
   12e14:	bl	11344 <errx@plt>
   12e18:	bl	111c4 <__stack_chk_fail@plt>
   12e1c:	andeq	r2, r1, r4, ror r1
   12e20:	andeq	r0, r0, ip, lsl r1
   12e24:	andeq	r2, r1, r0, lsr #4
   12e28:	strdeq	r1, [r0], -r8
   12e2c:	cmp	r1, #0
   12e30:	beq	12e7c <__assert_fail@plt+0x1a84>
   12e34:	ldrsb	r3, [r0]
   12e38:	cmp	r3, #0
   12e3c:	beq	12e7c <__assert_fail@plt+0x1a84>
   12e40:	sxtb	r2, r2
   12e44:	cmp	r3, r2
   12e48:	bxeq	lr
   12e4c:	add	r1, r0, r1
   12e50:	add	r3, r0, #1
   12e54:	b	12e70 <__assert_fail@plt+0x1a78>
   12e58:	ldrsb	ip, [r3]
   12e5c:	add	r3, r3, #1
   12e60:	cmp	ip, #0
   12e64:	beq	12e7c <__assert_fail@plt+0x1a84>
   12e68:	cmp	ip, r2
   12e6c:	bxeq	lr
   12e70:	cmp	r3, r1
   12e74:	mov	r0, r3
   12e78:	bne	12e58 <__assert_fail@plt+0x1a60>
   12e7c:	mov	r0, #0
   12e80:	bx	lr
   12e84:	push	{r4, r5, r6, lr}
   12e88:	mov	r2, #10
   12e8c:	mov	r4, r0
   12e90:	mov	r5, r1
   12e94:	bl	12548 <__assert_fail@plt+0x1150>
   12e98:	cmp	r0, #65536	; 0x10000
   12e9c:	bcs	12ea8 <__assert_fail@plt+0x1ab0>
   12ea0:	uxth	r0, r0
   12ea4:	pop	{r4, r5, r6, pc}
   12ea8:	mov	r1, r5
   12eac:	mov	r0, r4
   12eb0:	bl	12508 <__assert_fail@plt+0x1110>
   12eb4:	push	{r4, r5, r6, lr}
   12eb8:	mov	r2, #16
   12ebc:	mov	r4, r0
   12ec0:	mov	r5, r1
   12ec4:	bl	12548 <__assert_fail@plt+0x1150>
   12ec8:	cmp	r0, #65536	; 0x10000
   12ecc:	bcs	12ed8 <__assert_fail@plt+0x1ae0>
   12ed0:	uxth	r0, r0
   12ed4:	pop	{r4, r5, r6, pc}
   12ed8:	mov	r1, r5
   12edc:	mov	r0, r4
   12ee0:	bl	12508 <__assert_fail@plt+0x1110>
   12ee4:	mov	r2, #10
   12ee8:	b	12548 <__assert_fail@plt+0x1150>
   12eec:	mov	r2, #16
   12ef0:	b	12548 <__assert_fail@plt+0x1150>
   12ef4:	ldr	r2, [pc, #236]	; 12fe8 <__assert_fail@plt+0x1bf0>
   12ef8:	ldr	ip, [pc, #236]	; 12fec <__assert_fail@plt+0x1bf4>
   12efc:	add	r2, pc, r2
   12f00:	push	{r4, r5, r6, r7, r8, lr}
   12f04:	sub	sp, sp, #8
   12f08:	ldr	r7, [r2, ip]
   12f0c:	mov	r5, #0
   12f10:	mov	r4, r0
   12f14:	ldr	r3, [r7]
   12f18:	mov	r8, r1
   12f1c:	str	r5, [sp]
   12f20:	str	r3, [sp, #4]
   12f24:	bl	112b4 <__errno_location@plt>
   12f28:	cmp	r4, r5
   12f2c:	str	r5, [r0]
   12f30:	beq	12f40 <__assert_fail@plt+0x1b48>
   12f34:	ldrsb	r3, [r4]
   12f38:	cmp	r3, r5
   12f3c:	bne	12f60 <__assert_fail@plt+0x1b68>
   12f40:	ldr	r1, [pc, #168]	; 12ff0 <__assert_fail@plt+0x1bf8>
   12f44:	mov	r3, r4
   12f48:	add	r1, pc, r1
   12f4c:	mov	r2, r8
   12f50:	ldr	r0, [r1]
   12f54:	ldr	r1, [pc, #152]	; 12ff4 <__assert_fail@plt+0x1bfc>
   12f58:	add	r1, pc, r1
   12f5c:	bl	11344 <errx@plt>
   12f60:	mov	r6, r0
   12f64:	mov	r2, #10
   12f68:	mov	r3, r5
   12f6c:	mov	r1, sp
   12f70:	mov	r0, r4
   12f74:	bl	11380 <__strtoll_internal@plt>
   12f78:	ldr	r2, [r6]
   12f7c:	cmp	r2, r5
   12f80:	bne	12fbc <__assert_fail@plt+0x1bc4>
   12f84:	ldr	r3, [sp]
   12f88:	cmp	r3, r4
   12f8c:	beq	12f40 <__assert_fail@plt+0x1b48>
   12f90:	cmp	r3, r5
   12f94:	beq	12fa4 <__assert_fail@plt+0x1bac>
   12f98:	ldrsb	r3, [r3]
   12f9c:	cmp	r3, r5
   12fa0:	bne	12f40 <__assert_fail@plt+0x1b48>
   12fa4:	ldr	r2, [sp, #4]
   12fa8:	ldr	r3, [r7]
   12fac:	cmp	r2, r3
   12fb0:	bne	12fe4 <__assert_fail@plt+0x1bec>
   12fb4:	add	sp, sp, #8
   12fb8:	pop	{r4, r5, r6, r7, r8, pc}
   12fbc:	ldr	r3, [pc, #52]	; 12ff8 <__assert_fail@plt+0x1c00>
   12fc0:	cmp	r2, #34	; 0x22
   12fc4:	add	r3, pc, r3
   12fc8:	ldr	r0, [r3]
   12fcc:	bne	12f40 <__assert_fail@plt+0x1b48>
   12fd0:	ldr	r1, [pc, #36]	; 12ffc <__assert_fail@plt+0x1c04>
   12fd4:	mov	r3, r4
   12fd8:	mov	r2, r8
   12fdc:	add	r1, pc, r1
   12fe0:	bl	111dc <err@plt>
   12fe4:	bl	111c4 <__stack_chk_fail@plt>
   12fe8:	ldrdeq	r1, [r1], -r8
   12fec:	andeq	r0, r0, ip, lsl r1
   12ff0:	ldrdeq	r2, [r1], -r8
   12ff4:			; <UNDEFINED> instruction: 0x00001cb0
   12ff8:	andeq	r2, r1, ip, asr r0
   12ffc:	andeq	r1, r0, ip, lsr #24
   13000:	push	{r4, r5, r6, r7, r8, lr}
   13004:	mov	r7, r0
   13008:	mov	r6, r1
   1300c:	bl	12ef4 <__assert_fail@plt+0x1afc>
   13010:	mov	r3, #0
   13014:	mvn	r2, #0
   13018:	adds	r4, r0, #-2147483648	; 0x80000000
   1301c:	adc	r5, r1, #0
   13020:	cmp	r5, r3
   13024:	cmpeq	r4, r2
   13028:	popls	{r4, r5, r6, r7, r8, pc}
   1302c:	bl	112b4 <__errno_location@plt>
   13030:	ldr	ip, [pc, #32]	; 13058 <__assert_fail@plt+0x1c60>
   13034:	ldr	r1, [pc, #32]	; 1305c <__assert_fail@plt+0x1c64>
   13038:	add	ip, pc, ip
   1303c:	mov	lr, #34	; 0x22
   13040:	mov	r3, r7
   13044:	mov	r2, r6
   13048:	add	r1, pc, r1
   1304c:	str	lr, [r0]
   13050:	ldr	r0, [ip]
   13054:	bl	111dc <err@plt>
   13058:	andeq	r1, r1, r8, ror #31
   1305c:	andeq	r1, r0, r0, asr #23
   13060:	push	{r4, r5, r6, lr}
   13064:	mov	r5, r0
   13068:	mov	r4, r1
   1306c:	bl	13000 <__assert_fail@plt+0x1c08>
   13070:	add	r3, r0, #32768	; 0x8000
   13074:	cmp	r3, #65536	; 0x10000
   13078:	bcs	13084 <__assert_fail@plt+0x1c8c>
   1307c:	sxth	r0, r0
   13080:	pop	{r4, r5, r6, pc}
   13084:	bl	112b4 <__errno_location@plt>
   13088:	ldr	ip, [pc, #32]	; 130b0 <__assert_fail@plt+0x1cb8>
   1308c:	ldr	r1, [pc, #32]	; 130b4 <__assert_fail@plt+0x1cbc>
   13090:	add	ip, pc, ip
   13094:	mov	lr, #34	; 0x22
   13098:	mov	r3, r5
   1309c:	mov	r2, r4
   130a0:	add	r1, pc, r1
   130a4:	str	lr, [r0]
   130a8:	ldr	r0, [ip]
   130ac:	bl	111dc <err@plt>
   130b0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   130b4:	andeq	r1, r0, r8, ror #22
   130b8:	mov	r2, #10
   130bc:	b	123f4 <__assert_fail@plt+0xffc>
   130c0:	mov	r2, #16
   130c4:	b	123f4 <__assert_fail@plt+0xffc>
   130c8:	ldr	r2, [pc, #228]	; 131b4 <__assert_fail@plt+0x1dbc>
   130cc:	ldr	r3, [pc, #228]	; 131b8 <__assert_fail@plt+0x1dc0>
   130d0:	add	r2, pc, r2
   130d4:	push	{r4, r5, r6, r7, r8, lr}
   130d8:	sub	sp, sp, #8
   130dc:	ldr	r7, [r2, r3]
   130e0:	mov	r5, #0
   130e4:	mov	r4, r0
   130e8:	ldr	r3, [r7]
   130ec:	mov	r8, r1
   130f0:	str	r5, [sp]
   130f4:	str	r3, [sp, #4]
   130f8:	bl	112b4 <__errno_location@plt>
   130fc:	cmp	r4, r5
   13100:	str	r5, [r0]
   13104:	beq	13114 <__assert_fail@plt+0x1d1c>
   13108:	ldrsb	r3, [r4]
   1310c:	cmp	r3, r5
   13110:	bne	13134 <__assert_fail@plt+0x1d3c>
   13114:	ldr	r1, [pc, #160]	; 131bc <__assert_fail@plt+0x1dc4>
   13118:	mov	r3, r4
   1311c:	add	r1, pc, r1
   13120:	mov	r2, r8
   13124:	ldr	r0, [r1]
   13128:	ldr	r1, [pc, #144]	; 131c0 <__assert_fail@plt+0x1dc8>
   1312c:	add	r1, pc, r1
   13130:	bl	11344 <errx@plt>
   13134:	mov	r6, r0
   13138:	mov	r1, sp
   1313c:	mov	r0, r4
   13140:	bl	112fc <strtod@plt>
   13144:	ldr	r2, [r6]
   13148:	cmp	r2, r5
   1314c:	bne	13188 <__assert_fail@plt+0x1d90>
   13150:	ldr	r3, [sp]
   13154:	cmp	r3, r4
   13158:	beq	13114 <__assert_fail@plt+0x1d1c>
   1315c:	cmp	r3, r5
   13160:	beq	13170 <__assert_fail@plt+0x1d78>
   13164:	ldrsb	r3, [r3]
   13168:	cmp	r3, r5
   1316c:	bne	13114 <__assert_fail@plt+0x1d1c>
   13170:	ldr	r2, [sp, #4]
   13174:	ldr	r3, [r7]
   13178:	cmp	r2, r3
   1317c:	bne	131b0 <__assert_fail@plt+0x1db8>
   13180:	add	sp, sp, #8
   13184:	pop	{r4, r5, r6, r7, r8, pc}
   13188:	ldr	r3, [pc, #52]	; 131c4 <__assert_fail@plt+0x1dcc>
   1318c:	cmp	r2, #34	; 0x22
   13190:	add	r3, pc, r3
   13194:	ldr	r0, [r3]
   13198:	bne	13114 <__assert_fail@plt+0x1d1c>
   1319c:	ldr	r1, [pc, #36]	; 131c8 <__assert_fail@plt+0x1dd0>
   131a0:	mov	r3, r4
   131a4:	mov	r2, r8
   131a8:	add	r1, pc, r1
   131ac:	bl	111dc <err@plt>
   131b0:	bl	111c4 <__stack_chk_fail@plt>
   131b4:	andeq	r1, r1, r4, lsl #28
   131b8:	andeq	r0, r0, ip, lsl r1
   131bc:	andeq	r1, r1, r4, lsl #30
   131c0:	ldrdeq	r1, [r0], -ip
   131c4:	muleq	r1, r0, lr
   131c8:	andeq	r1, r0, r0, ror #20
   131cc:	ldr	r2, [pc, #232]	; 132bc <__assert_fail@plt+0x1ec4>
   131d0:	ldr	r3, [pc, #232]	; 132c0 <__assert_fail@plt+0x1ec8>
   131d4:	add	r2, pc, r2
   131d8:	push	{r4, r5, r6, r7, r8, lr}
   131dc:	sub	sp, sp, #8
   131e0:	ldr	r7, [r2, r3]
   131e4:	mov	r5, #0
   131e8:	mov	r4, r0
   131ec:	ldr	r3, [r7]
   131f0:	mov	r8, r1
   131f4:	str	r5, [sp]
   131f8:	str	r3, [sp, #4]
   131fc:	bl	112b4 <__errno_location@plt>
   13200:	cmp	r4, r5
   13204:	str	r5, [r0]
   13208:	beq	13218 <__assert_fail@plt+0x1e20>
   1320c:	ldrsb	r3, [r4]
   13210:	cmp	r3, r5
   13214:	bne	13238 <__assert_fail@plt+0x1e40>
   13218:	ldr	r1, [pc, #164]	; 132c4 <__assert_fail@plt+0x1ecc>
   1321c:	mov	r3, r4
   13220:	add	r1, pc, r1
   13224:	mov	r2, r8
   13228:	ldr	r0, [r1]
   1322c:	ldr	r1, [pc, #148]	; 132c8 <__assert_fail@plt+0x1ed0>
   13230:	add	r1, pc, r1
   13234:	bl	11344 <errx@plt>
   13238:	mov	r6, r0
   1323c:	mov	r2, #10
   13240:	mov	r1, sp
   13244:	mov	r0, r4
   13248:	bl	11110 <strtol@plt>
   1324c:	ldr	r2, [r6]
   13250:	cmp	r2, r5
   13254:	bne	13290 <__assert_fail@plt+0x1e98>
   13258:	ldr	r3, [sp]
   1325c:	cmp	r3, r4
   13260:	beq	13218 <__assert_fail@plt+0x1e20>
   13264:	cmp	r3, r5
   13268:	beq	13278 <__assert_fail@plt+0x1e80>
   1326c:	ldrsb	r3, [r3]
   13270:	cmp	r3, r5
   13274:	bne	13218 <__assert_fail@plt+0x1e20>
   13278:	ldr	r2, [sp, #4]
   1327c:	ldr	r3, [r7]
   13280:	cmp	r2, r3
   13284:	bne	132b8 <__assert_fail@plt+0x1ec0>
   13288:	add	sp, sp, #8
   1328c:	pop	{r4, r5, r6, r7, r8, pc}
   13290:	ldr	r3, [pc, #52]	; 132cc <__assert_fail@plt+0x1ed4>
   13294:	cmp	r2, #34	; 0x22
   13298:	add	r3, pc, r3
   1329c:	ldr	r0, [r3]
   132a0:	bne	13218 <__assert_fail@plt+0x1e20>
   132a4:	ldr	r1, [pc, #36]	; 132d0 <__assert_fail@plt+0x1ed8>
   132a8:	mov	r3, r4
   132ac:	mov	r2, r8
   132b0:	add	r1, pc, r1
   132b4:	bl	111dc <err@plt>
   132b8:	bl	111c4 <__stack_chk_fail@plt>
   132bc:	andeq	r1, r1, r0, lsl #26
   132c0:	andeq	r0, r0, ip, lsl r1
   132c4:	andeq	r1, r1, r0, lsl #28
   132c8:	ldrdeq	r1, [r0], -r8
   132cc:	andeq	r1, r1, r8, lsl #27
   132d0:	andeq	r1, r0, r8, asr r9
   132d4:	ldr	r2, [pc, #232]	; 133c4 <__assert_fail@plt+0x1fcc>
   132d8:	ldr	r3, [pc, #232]	; 133c8 <__assert_fail@plt+0x1fd0>
   132dc:	add	r2, pc, r2
   132e0:	push	{r4, r5, r6, r7, r8, lr}
   132e4:	sub	sp, sp, #8
   132e8:	ldr	r7, [r2, r3]
   132ec:	mov	r5, #0
   132f0:	mov	r4, r0
   132f4:	ldr	r3, [r7]
   132f8:	mov	r8, r1
   132fc:	str	r5, [sp]
   13300:	str	r3, [sp, #4]
   13304:	bl	112b4 <__errno_location@plt>
   13308:	cmp	r4, r5
   1330c:	str	r5, [r0]
   13310:	beq	13320 <__assert_fail@plt+0x1f28>
   13314:	ldrsb	r3, [r4]
   13318:	cmp	r3, r5
   1331c:	bne	13340 <__assert_fail@plt+0x1f48>
   13320:	ldr	r1, [pc, #164]	; 133cc <__assert_fail@plt+0x1fd4>
   13324:	mov	r3, r4
   13328:	add	r1, pc, r1
   1332c:	mov	r2, r8
   13330:	ldr	r0, [r1]
   13334:	ldr	r1, [pc, #148]	; 133d0 <__assert_fail@plt+0x1fd8>
   13338:	add	r1, pc, r1
   1333c:	bl	11344 <errx@plt>
   13340:	mov	r6, r0
   13344:	mov	r2, #10
   13348:	mov	r1, sp
   1334c:	mov	r0, r4
   13350:	bl	11278 <strtoul@plt>
   13354:	ldr	r2, [r6]
   13358:	cmp	r2, r5
   1335c:	bne	13398 <__assert_fail@plt+0x1fa0>
   13360:	ldr	r3, [sp]
   13364:	cmp	r3, r4
   13368:	beq	13320 <__assert_fail@plt+0x1f28>
   1336c:	cmp	r3, r5
   13370:	beq	13380 <__assert_fail@plt+0x1f88>
   13374:	ldrsb	r3, [r3]
   13378:	cmp	r3, r5
   1337c:	bne	13320 <__assert_fail@plt+0x1f28>
   13380:	ldr	r2, [sp, #4]
   13384:	ldr	r3, [r7]
   13388:	cmp	r2, r3
   1338c:	bne	133c0 <__assert_fail@plt+0x1fc8>
   13390:	add	sp, sp, #8
   13394:	pop	{r4, r5, r6, r7, r8, pc}
   13398:	ldr	r3, [pc, #52]	; 133d4 <__assert_fail@plt+0x1fdc>
   1339c:	cmp	r2, #34	; 0x22
   133a0:	add	r3, pc, r3
   133a4:	ldr	r0, [r3]
   133a8:	bne	13320 <__assert_fail@plt+0x1f28>
   133ac:	ldr	r1, [pc, #36]	; 133d8 <__assert_fail@plt+0x1fe0>
   133b0:	mov	r3, r4
   133b4:	mov	r2, r8
   133b8:	add	r1, pc, r1
   133bc:	bl	111dc <err@plt>
   133c0:	bl	111c4 <__stack_chk_fail@plt>
   133c4:	strdeq	r1, [r1], -r8
   133c8:	andeq	r0, r0, ip, lsl r1
   133cc:	strdeq	r1, [r1], -r8
   133d0:	ldrdeq	r1, [r0], -r0
   133d4:	andeq	r1, r1, r0, lsl #25
   133d8:	andeq	r1, r0, r0, asr r8
   133dc:	ldr	r3, [pc, #140]	; 13470 <__assert_fail@plt+0x2078>
   133e0:	ldr	r2, [pc, #140]	; 13474 <__assert_fail@plt+0x207c>
   133e4:	add	r3, pc, r3
   133e8:	push	{r4, r5, r6, lr}
   133ec:	sub	sp, sp, #16
   133f0:	ldr	r4, [r3, r2]
   133f4:	mov	r5, r1
   133f8:	mov	r1, sp
   133fc:	ldr	r3, [r4]
   13400:	mov	r6, r0
   13404:	str	r3, [sp, #12]
   13408:	bl	12c1c <__assert_fail@plt+0x1824>
   1340c:	cmp	r0, #0
   13410:	beq	13450 <__assert_fail@plt+0x2058>
   13414:	bl	112b4 <__errno_location@plt>
   13418:	ldr	r3, [pc, #88]	; 13478 <__assert_fail@plt+0x2080>
   1341c:	mov	r2, r5
   13420:	ldr	r1, [pc, r3]
   13424:	ldr	r3, [r0]
   13428:	mov	r0, r1
   1342c:	cmp	r3, #0
   13430:	mov	r3, r6
   13434:	beq	13444 <__assert_fail@plt+0x204c>
   13438:	ldr	r1, [pc, #60]	; 1347c <__assert_fail@plt+0x2084>
   1343c:	add	r1, pc, r1
   13440:	bl	111dc <err@plt>
   13444:	ldr	r1, [pc, #52]	; 13480 <__assert_fail@plt+0x2088>
   13448:	add	r1, pc, r1
   1344c:	bl	11344 <errx@plt>
   13450:	ldr	r2, [sp, #12]
   13454:	ldr	r3, [r4]
   13458:	ldrd	r0, [sp]
   1345c:	cmp	r2, r3
   13460:	bne	1346c <__assert_fail@plt+0x2074>
   13464:	add	sp, sp, #16
   13468:	pop	{r4, r5, r6, pc}
   1346c:	bl	111c4 <__stack_chk_fail@plt>
   13470:	strdeq	r1, [r1], -r0
   13474:	andeq	r0, r0, ip, lsl r1
   13478:	andeq	r1, r1, r0, lsl #24
   1347c:	andeq	r1, r0, ip, asr #15
   13480:	andeq	r1, r0, r0, asr #15
   13484:	push	{r4, lr}
   13488:	mov	r4, r1
   1348c:	mov	r1, r2
   13490:	bl	130c8 <__assert_fail@plt+0x1cd0>
   13494:	vldr	d6, [pc, #28]	; 134b8 <__assert_fail@plt+0x20c0>
   13498:	vcvt.s32.f64	s15, d0
   1349c:	vcvt.f64.s32	d5, s15
   134a0:	vstr	s15, [r4]
   134a4:	vsub.f64	d0, d0, d5
   134a8:	vmul.f64	d0, d0, d6
   134ac:	vcvt.s32.f64	s0, d0
   134b0:	vstr	s0, [r4, #4]
   134b4:	pop	{r4, pc}
   134b8:	andeq	r0, r0, r0
   134bc:	smlawbmi	lr, r0, r4, r8
   134c0:	and	r2, r0, #61440	; 0xf000
   134c4:	cmp	r2, #16384	; 0x4000
   134c8:	moveq	r2, r1
   134cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134d0:	moveq	sl, #100	; 0x64
   134d4:	mov	r3, r0
   134d8:	add	r9, r1, #1
   134dc:	add	r8, r1, #2
   134e0:	add	r7, r1, #3
   134e4:	add	r6, r1, #4
   134e8:	add	r5, r1, #5
   134ec:	add	r4, r1, #6
   134f0:	add	lr, r1, #7
   134f4:	add	ip, r1, #8
   134f8:	add	r0, r1, #9
   134fc:	strbeq	sl, [r2], #10
   13500:	beq	135a4 <__assert_fail@plt+0x21ac>
   13504:	cmp	r2, #40960	; 0xa000
   13508:	moveq	r2, r1
   1350c:	moveq	sl, #108	; 0x6c
   13510:	strbeq	sl, [r2], #10
   13514:	beq	135a4 <__assert_fail@plt+0x21ac>
   13518:	cmp	r2, #8192	; 0x2000
   1351c:	moveq	r2, r1
   13520:	moveq	sl, #99	; 0x63
   13524:	strbeq	sl, [r2], #10
   13528:	beq	135a4 <__assert_fail@plt+0x21ac>
   1352c:	cmp	r2, #24576	; 0x6000
   13530:	moveq	r2, r1
   13534:	moveq	sl, #98	; 0x62
   13538:	strbeq	sl, [r2], #10
   1353c:	beq	135a4 <__assert_fail@plt+0x21ac>
   13540:	cmp	r2, #49152	; 0xc000
   13544:	moveq	r2, r1
   13548:	moveq	sl, #115	; 0x73
   1354c:	strbeq	sl, [r2], #10
   13550:	beq	135a4 <__assert_fail@plt+0x21ac>
   13554:	cmp	r2, #4096	; 0x1000
   13558:	moveq	r2, r1
   1355c:	moveq	sl, #112	; 0x70
   13560:	strbeq	sl, [r2], #10
   13564:	beq	135a4 <__assert_fail@plt+0x21ac>
   13568:	cmp	r2, #32768	; 0x8000
   1356c:	moveq	r2, r1
   13570:	moveq	sl, #45	; 0x2d
   13574:	strbeq	sl, [r2], #10
   13578:	beq	135a4 <__assert_fail@plt+0x21ac>
   1357c:	mov	r2, r0
   13580:	mov	r0, ip
   13584:	mov	ip, lr
   13588:	mov	lr, r4
   1358c:	mov	r4, r5
   13590:	mov	r5, r6
   13594:	mov	r6, r7
   13598:	mov	r7, r8
   1359c:	mov	r8, r9
   135a0:	mov	r9, r1
   135a4:	tst	r3, #256	; 0x100
   135a8:	movne	fp, #114	; 0x72
   135ac:	moveq	fp, #45	; 0x2d
   135b0:	tst	r3, #128	; 0x80
   135b4:	movne	sl, #119	; 0x77
   135b8:	moveq	sl, #45	; 0x2d
   135bc:	tst	r3, #2048	; 0x800
   135c0:	strb	fp, [r9]
   135c4:	and	r9, r3, #64	; 0x40
   135c8:	strb	sl, [r8]
   135cc:	beq	13668 <__assert_fail@plt+0x2270>
   135d0:	cmp	r9, #0
   135d4:	movne	r9, #115	; 0x73
   135d8:	moveq	r9, #83	; 0x53
   135dc:	tst	r3, #32
   135e0:	movne	r8, #114	; 0x72
   135e4:	moveq	r8, #45	; 0x2d
   135e8:	tst	r3, #16
   135ec:	strb	r9, [r7]
   135f0:	movne	r7, #119	; 0x77
   135f4:	moveq	r7, #45	; 0x2d
   135f8:	tst	r3, #1024	; 0x400
   135fc:	strb	r8, [r6]
   13600:	and	r6, r3, #8
   13604:	strb	r7, [r5]
   13608:	beq	13678 <__assert_fail@plt+0x2280>
   1360c:	cmp	r6, #0
   13610:	movne	r6, #115	; 0x73
   13614:	moveq	r6, #83	; 0x53
   13618:	tst	r3, #4
   1361c:	movne	r5, #114	; 0x72
   13620:	moveq	r5, #45	; 0x2d
   13624:	tst	r3, #2
   13628:	strb	r6, [r4]
   1362c:	movne	r4, #119	; 0x77
   13630:	moveq	r4, #45	; 0x2d
   13634:	tst	r3, #512	; 0x200
   13638:	strb	r5, [lr]
   1363c:	and	r3, r3, #1
   13640:	strb	r4, [ip]
   13644:	beq	13688 <__assert_fail@plt+0x2290>
   13648:	cmp	r3, #0
   1364c:	movne	ip, #116	; 0x74
   13650:	moveq	ip, #84	; 0x54
   13654:	mov	r3, #0
   13658:	strb	ip, [r0]
   1365c:	mov	r0, r1
   13660:	strb	r3, [r2]
   13664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13668:	cmp	r9, #0
   1366c:	movne	r9, #120	; 0x78
   13670:	moveq	r9, #45	; 0x2d
   13674:	b	135dc <__assert_fail@plt+0x21e4>
   13678:	cmp	r6, #0
   1367c:	movne	r6, #120	; 0x78
   13680:	moveq	r6, #45	; 0x2d
   13684:	b	13618 <__assert_fail@plt+0x2220>
   13688:	cmp	r3, #0
   1368c:	movne	ip, #120	; 0x78
   13690:	moveq	ip, #45	; 0x2d
   13694:	b	13654 <__assert_fail@plt+0x225c>
   13698:	ldr	r1, [pc, #680]	; 13948 <__assert_fail@plt+0x2550>
   1369c:	ldr	ip, [pc, #680]	; 1394c <__assert_fail@plt+0x2554>
   136a0:	add	r1, pc, r1
   136a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136a8:	sub	sp, sp, #108	; 0x6c
   136ac:	ldr	r8, [r1, ip]
   136b0:	tst	r0, #2
   136b4:	strd	r2, [sp, #32]
   136b8:	ldr	r1, [r8]
   136bc:	addeq	r9, sp, #60	; 0x3c
   136c0:	str	r1, [sp, #100]	; 0x64
   136c4:	ldrd	r2, [sp, #32]
   136c8:	movne	r1, #32
   136cc:	strbne	r1, [sp, #60]	; 0x3c
   136d0:	addne	ip, sp, #61	; 0x3d
   136d4:	addne	r9, sp, #60	; 0x3c
   136d8:	moveq	ip, r9
   136dc:	mov	r1, #10
   136e0:	mov	sl, #1
   136e4:	sub	lr, r1, #32
   136e8:	lsl	r4, sl, r1
   136ec:	lsl	r5, sl, lr
   136f0:	rsb	lr, r1, #32
   136f4:	orr	r5, r5, sl, lsr lr
   136f8:	cmp	r3, r5
   136fc:	cmpeq	r2, r4
   13700:	bcc	138bc <__assert_fail@plt+0x24c4>
   13704:	add	r1, r1, #10
   13708:	cmp	r1, #70	; 0x46
   1370c:	bne	136e4 <__assert_fail@plt+0x22ec>
   13710:	mov	lr, ip
   13714:	strd	r2, [sp, #32]
   13718:	mov	r4, r2
   1371c:	tst	r0, #1
   13720:	mov	r2, #69	; 0x45
   13724:	bic	r5, r3, #-268435456	; 0xf0000000
   13728:	lsr	sl, r3, #28
   1372c:	strb	r2, [lr], #1
   13730:	bne	138a4 <__assert_fail@plt+0x24ac>
   13734:	orrs	r3, r4, r5
   13738:	mov	r3, #0
   1373c:	strb	r3, [lr]
   13740:	beq	138e4 <__assert_fail@plt+0x24ec>
   13744:	sub	r2, r1, #20
   13748:	rsb	r0, r2, #32
   1374c:	lsr	r3, r4, r2
   13750:	sub	r1, r1, #52	; 0x34
   13754:	orr	r3, r3, r5, lsl r0
   13758:	orr	r3, r3, r5, lsr r1
   1375c:	lsr	r2, r5, r2
   13760:	adds	r6, r3, #50	; 0x32
   13764:	adc	r7, r2, #0
   13768:	mov	r3, #0
   1376c:	mov	r2, #100	; 0x64
   13770:	mov	r0, r6
   13774:	mov	r1, r7
   13778:	bl	14474 <__assert_fail@plt+0x307c>
   1377c:	cmp	r1, #0
   13780:	cmpeq	r0, #10
   13784:	mov	r2, r0
   13788:	mov	r3, r1
   1378c:	addeq	sl, sl, #1
   13790:	beq	138e4 <__assert_fail@plt+0x24ec>
   13794:	cmp	r7, #0
   13798:	cmpeq	r6, #99	; 0x63
   1379c:	strd	r2, [sp, #32]
   137a0:	bls	138e4 <__assert_fail@plt+0x24ec>
   137a4:	bl	11374 <localeconv@plt>
   137a8:	ldrd	r2, [sp, #32]
   137ac:	cmp	r0, #0
   137b0:	beq	1392c <__assert_fail@plt+0x2534>
   137b4:	ldr	r0, [r0]
   137b8:	cmp	r0, #0
   137bc:	beq	13938 <__assert_fail@plt+0x2540>
   137c0:	ldrsb	r1, [r0]
   137c4:	cmp	r1, #0
   137c8:	ldreq	r0, [pc, #384]	; 13950 <__assert_fail@plt+0x2558>
   137cc:	addeq	r0, pc, r0
   137d0:	ldr	r1, [pc, #380]	; 13954 <__assert_fail@plt+0x255c>
   137d4:	strd	r2, [sp, #16]
   137d8:	add	r1, pc, r1
   137dc:	add	r4, sp, #68	; 0x44
   137e0:	mov	r3, #32
   137e4:	str	r0, [sp, #8]
   137e8:	str	r1, [sp]
   137ec:	str	r9, [sp, #24]
   137f0:	str	sl, [sp, #4]
   137f4:	mov	r0, r4
   137f8:	mov	r1, r3
   137fc:	mov	r2, #1
   13800:	bl	113d4 <__snprintf_chk@plt>
   13804:	b	1390c <__assert_fail@plt+0x2514>
   13808:	ldr	r4, [pc, #328]	; 13958 <__assert_fail@plt+0x2560>
   1380c:	mvn	sl, #0
   13810:	ldr	fp, [pc, #324]	; 1395c <__assert_fail@plt+0x2564>
   13814:	umull	r2, r3, lr, r4
   13818:	sub	r4, r1, #42	; 0x2a
   1381c:	strd	r2, [sp, #40]	; 0x28
   13820:	ldr	r3, [sp, #44]	; 0x2c
   13824:	lsl	r2, sl, lr
   13828:	lsr	r3, r3, #3
   1382c:	str	r3, [sp, #52]	; 0x34
   13830:	ldr	r3, [sp, #32]
   13834:	str	r4, [sp, #48]	; 0x30
   13838:	orr	r4, r2, sl, lsl r4
   1383c:	lsr	r2, r3, lr
   13840:	mov	r3, r2
   13844:	ldr	r2, [sp, #52]	; 0x34
   13848:	add	fp, pc, fp
   1384c:	str	r4, [sp, #40]	; 0x28
   13850:	ldrsb	fp, [fp, r2]
   13854:	mov	r2, r3
   13858:	ldr	r3, [sp, #36]	; 0x24
   1385c:	rsb	r5, lr, #32
   13860:	ldr	r4, [sp, #40]	; 0x28
   13864:	orr	r2, r2, r3, lsl r5
   13868:	orr	r4, r4, sl, lsr r5
   1386c:	ldr	r3, [sp, #32]
   13870:	str	r4, [sp, #40]	; 0x28
   13874:	cmp	r0, #0
   13878:	bic	r4, r3, sl, lsl lr
   1387c:	ldr	r0, [sp, #36]	; 0x24
   13880:	ldr	r3, [sp, #48]	; 0x30
   13884:	mov	lr, ip
   13888:	orr	sl, r2, r0, lsr r3
   1388c:	ldr	r3, [sp, #40]	; 0x28
   13890:	strb	fp, [lr], #1
   13894:	bic	r5, r0, r3
   13898:	beq	13734 <__assert_fail@plt+0x233c>
   1389c:	cmp	fp, #66	; 0x42
   138a0:	beq	13734 <__assert_fail@plt+0x233c>
   138a4:	mov	r3, #105	; 0x69
   138a8:	strb	r3, [ip, #1]
   138ac:	mov	r3, #66	; 0x42
   138b0:	add	lr, ip, #3
   138b4:	strb	r3, [ip, #2]
   138b8:	b	13734 <__assert_fail@plt+0x233c>
   138bc:	subs	lr, r1, #10
   138c0:	strd	r2, [sp, #32]
   138c4:	and	r0, r0, #1
   138c8:	bne	13808 <__assert_fail@plt+0x2410>
   138cc:	ldr	sl, [sp, #32]
   138d0:	cmp	r0, #0
   138d4:	movne	r0, lr
   138d8:	mov	r3, #66	; 0x42
   138dc:	strb	r0, [ip, #1]
   138e0:	strb	r3, [ip]
   138e4:	ldr	r2, [pc, #116]	; 13960 <__assert_fail@plt+0x2568>
   138e8:	add	r4, sp, #68	; 0x44
   138ec:	add	r2, pc, r2
   138f0:	mov	r3, #32
   138f4:	stm	sp, {r2, sl}
   138f8:	str	r9, [sp, #8]
   138fc:	mov	r0, r4
   13900:	mov	r1, r3
   13904:	mov	r2, #1
   13908:	bl	113d4 <__snprintf_chk@plt>
   1390c:	mov	r0, r4
   13910:	bl	111b8 <strdup@plt>
   13914:	ldr	r2, [sp, #100]	; 0x64
   13918:	ldr	r3, [r8]
   1391c:	cmp	r2, r3
   13920:	bne	13944 <__assert_fail@plt+0x254c>
   13924:	add	sp, sp, #108	; 0x6c
   13928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1392c:	ldr	r0, [pc, #48]	; 13964 <__assert_fail@plt+0x256c>
   13930:	add	r0, pc, r0
   13934:	b	137d0 <__assert_fail@plt+0x23d8>
   13938:	ldr	r0, [pc, #40]	; 13968 <__assert_fail@plt+0x2570>
   1393c:	add	r0, pc, r0
   13940:	b	137d0 <__assert_fail@plt+0x23d8>
   13944:	bl	111c4 <__stack_chk_fail@plt>
   13948:	andeq	r1, r1, r4, lsr r8
   1394c:	andeq	r0, r0, ip, lsl r1
   13950:	andeq	r1, r0, r0, ror #8
   13954:	andeq	r1, r0, r0, ror #8
   13958:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1395c:	andeq	r1, r0, r8, ror #7
   13960:	andeq	r1, r0, r8, asr r3
   13964:	strdeq	r1, [r0], -ip
   13968:	strdeq	r1, [r0], -r0
   1396c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13970:	subs	r4, r0, #0
   13974:	beq	13a44 <__assert_fail@plt+0x264c>
   13978:	ldrsb	lr, [r4]
   1397c:	cmp	lr, #0
   13980:	beq	13a44 <__assert_fail@plt+0x264c>
   13984:	cmp	r1, #0
   13988:	clz	ip, r2
   1398c:	lsr	ip, ip, #5
   13990:	moveq	r0, #1
   13994:	movne	r0, ip
   13998:	cmp	r3, #0
   1399c:	moveq	r0, #1
   139a0:	cmp	r0, #0
   139a4:	bne	13a44 <__assert_fail@plt+0x264c>
   139a8:	mov	r8, r3
   139ac:	mov	r7, r2
   139b0:	mov	r9, r1
   139b4:	mov	r5, r0
   139b8:	b	13a14 <__assert_fail@plt+0x261c>
   139bc:	cmp	r3, #0
   139c0:	bne	13a00 <__assert_fail@plt+0x2608>
   139c4:	cmn	r4, #1
   139c8:	add	r6, r4, #1
   139cc:	beq	13a4c <__assert_fail@plt+0x2654>
   139d0:	cmp	r0, r6
   139d4:	bcs	13a44 <__assert_fail@plt+0x264c>
   139d8:	sub	r1, r6, r0
   139dc:	blx	r8
   139e0:	cmn	r0, #1
   139e4:	beq	13a44 <__assert_fail@plt+0x264c>
   139e8:	str	r0, [r9, r5, lsl #2]
   139ec:	ldrsb	r3, [r6]
   139f0:	add	r5, r5, #1
   139f4:	cmp	r3, #0
   139f8:	beq	13a4c <__assert_fail@plt+0x2654>
   139fc:	mov	r0, #0
   13a00:	cmn	r4, #1
   13a04:	beq	13a4c <__assert_fail@plt+0x2654>
   13a08:	ldrsb	lr, [r4, #1]!
   13a0c:	cmp	lr, #0
   13a10:	beq	13a4c <__assert_fail@plt+0x2654>
   13a14:	cmp	r7, r5
   13a18:	mov	r6, r4
   13a1c:	bls	13a54 <__assert_fail@plt+0x265c>
   13a20:	cmp	r0, #0
   13a24:	moveq	r0, r4
   13a28:	cmp	lr, #44	; 0x2c
   13a2c:	ldrsb	r3, [r4, #1]
   13a30:	bne	139bc <__assert_fail@plt+0x25c4>
   13a34:	cmp	r3, #0
   13a38:	beq	139c4 <__assert_fail@plt+0x25cc>
   13a3c:	cmp	r0, r6
   13a40:	bcc	139d8 <__assert_fail@plt+0x25e0>
   13a44:	mvn	r0, #0
   13a48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a4c:	mov	r0, r5
   13a50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a54:	mvn	r0, #1
   13a58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a5c:	cmp	r0, #0
   13a60:	beq	13acc <__assert_fail@plt+0x26d4>
   13a64:	push	{r4, lr}
   13a68:	mov	r4, r3
   13a6c:	cmp	r4, #0
   13a70:	ldrsb	ip, [r0]
   13a74:	clz	r3, ip
   13a78:	lsr	r3, r3, #5
   13a7c:	moveq	r3, #1
   13a80:	cmp	r3, #0
   13a84:	bne	13ac4 <__assert_fail@plt+0x26cc>
   13a88:	ldr	lr, [r4]
   13a8c:	cmp	lr, r2
   13a90:	bhi	13ac4 <__assert_fail@plt+0x26cc>
   13a94:	cmp	ip, #43	; 0x2b
   13a98:	strne	r3, [r4]
   13a9c:	addeq	r0, r0, #1
   13aa0:	ldr	r3, [sp, #8]
   13aa4:	addeq	r1, r1, lr, lsl #2
   13aa8:	subeq	r2, r2, lr
   13aac:	bl	1396c <__assert_fail@plt+0x2574>
   13ab0:	cmp	r0, #0
   13ab4:	ldrgt	r3, [r4]
   13ab8:	addgt	r3, r3, r0
   13abc:	strgt	r3, [r4]
   13ac0:	pop	{r4, pc}
   13ac4:	mvn	r0, #0
   13ac8:	pop	{r4, pc}
   13acc:	mvn	r0, #0
   13ad0:	bx	lr
   13ad4:	cmp	r2, #0
   13ad8:	clz	r3, r1
   13adc:	lsr	r3, r3, #5
   13ae0:	moveq	r3, #1
   13ae4:	cmp	r0, #0
   13ae8:	moveq	r3, #1
   13aec:	cmp	r3, #0
   13af0:	bne	13bbc <__assert_fail@plt+0x27c4>
   13af4:	push	{r4, r5, r6, r7, r8, lr}
   13af8:	mov	r6, r2
   13afc:	mov	r2, r3
   13b00:	ldrsb	r3, [r0]
   13b04:	mov	r8, r1
   13b08:	mov	r4, r0
   13b0c:	mov	r7, #1
   13b10:	cmp	r3, #0
   13b14:	beq	13b84 <__assert_fail@plt+0x278c>
   13b18:	cmp	r2, #0
   13b1c:	moveq	r2, r4
   13b20:	cmp	r3, #44	; 0x2c
   13b24:	mov	r5, r4
   13b28:	ldrsb	r3, [r4, #1]!
   13b2c:	beq	13b8c <__assert_fail@plt+0x2794>
   13b30:	cmp	r3, #0
   13b34:	bne	13bac <__assert_fail@plt+0x27b4>
   13b38:	mov	r5, r4
   13b3c:	cmp	r2, r5
   13b40:	sub	r1, r5, r2
   13b44:	mov	r0, r2
   13b48:	bcs	13ba4 <__assert_fail@plt+0x27ac>
   13b4c:	blx	r6
   13b50:	mov	r2, r4
   13b54:	cmp	r0, #0
   13b58:	and	r1, r0, #7
   13b5c:	poplt	{r4, r5, r6, r7, r8, pc}
   13b60:	ldrb	r3, [r8, r0, asr #3]
   13b64:	orr	r3, r3, r7, lsl r1
   13b68:	strb	r3, [r8, r0, asr #3]
   13b6c:	ldrsb	r3, [r5]
   13b70:	cmp	r3, #0
   13b74:	beq	13b84 <__assert_fail@plt+0x278c>
   13b78:	ldrsb	r3, [r4]
   13b7c:	cmp	r3, #0
   13b80:	bne	13b20 <__assert_fail@plt+0x2728>
   13b84:	mov	r0, #0
   13b88:	pop	{r4, r5, r6, r7, r8, pc}
   13b8c:	cmp	r3, #0
   13b90:	moveq	r5, r4
   13b94:	cmp	r2, r5
   13b98:	sub	r1, r5, r2
   13b9c:	mov	r0, r2
   13ba0:	bcc	13b4c <__assert_fail@plt+0x2754>
   13ba4:	mvn	r0, #0
   13ba8:	pop	{r4, r5, r6, r7, r8, pc}
   13bac:	adds	r4, r5, #1
   13bb0:	bne	13b10 <__assert_fail@plt+0x2718>
   13bb4:	mov	r0, #0
   13bb8:	pop	{r4, r5, r6, r7, r8, pc}
   13bbc:	mvn	r0, #21
   13bc0:	bx	lr
   13bc4:	cmp	r2, #0
   13bc8:	clz	r3, r1
   13bcc:	lsr	r3, r3, #5
   13bd0:	moveq	r3, #1
   13bd4:	cmp	r0, #0
   13bd8:	moveq	r3, #1
   13bdc:	cmp	r3, #0
   13be0:	bne	13ca4 <__assert_fail@plt+0x28ac>
   13be4:	push	{r4, r5, r6, r7, r8, lr}
   13be8:	mov	r6, r2
   13bec:	mov	r2, r3
   13bf0:	ldrsb	r3, [r0]
   13bf4:	mov	r7, r1
   13bf8:	mov	r4, r0
   13bfc:	cmp	r3, #0
   13c00:	beq	13c6c <__assert_fail@plt+0x2874>
   13c04:	cmp	r2, #0
   13c08:	moveq	r2, r4
   13c0c:	cmp	r3, #44	; 0x2c
   13c10:	mov	r5, r4
   13c14:	ldrsb	r3, [r4, #1]!
   13c18:	beq	13c74 <__assert_fail@plt+0x287c>
   13c1c:	cmp	r3, #0
   13c20:	bne	13c94 <__assert_fail@plt+0x289c>
   13c24:	mov	r5, r4
   13c28:	cmp	r2, r5
   13c2c:	sub	r1, r5, r2
   13c30:	mov	r0, r2
   13c34:	bcs	13c8c <__assert_fail@plt+0x2894>
   13c38:	blx	r6
   13c3c:	mov	r2, r4
   13c40:	cmp	r0, #0
   13c44:	poplt	{r4, r5, r6, r7, r8, pc}
   13c48:	ldr	r3, [r7]
   13c4c:	orr	r3, r3, r0
   13c50:	str	r3, [r7]
   13c54:	ldrsb	r3, [r5]
   13c58:	cmp	r3, #0
   13c5c:	beq	13c6c <__assert_fail@plt+0x2874>
   13c60:	ldrsb	r3, [r4]
   13c64:	cmp	r3, #0
   13c68:	bne	13c0c <__assert_fail@plt+0x2814>
   13c6c:	mov	r0, #0
   13c70:	pop	{r4, r5, r6, r7, r8, pc}
   13c74:	cmp	r3, #0
   13c78:	moveq	r5, r4
   13c7c:	cmp	r2, r5
   13c80:	sub	r1, r5, r2
   13c84:	mov	r0, r2
   13c88:	bcc	13c38 <__assert_fail@plt+0x2840>
   13c8c:	mvn	r0, #0
   13c90:	pop	{r4, r5, r6, r7, r8, pc}
   13c94:	adds	r4, r5, #1
   13c98:	bne	13bfc <__assert_fail@plt+0x2804>
   13c9c:	mov	r0, #0
   13ca0:	pop	{r4, r5, r6, r7, r8, pc}
   13ca4:	mvn	r0, #21
   13ca8:	bx	lr
   13cac:	ldr	ip, [pc, #396]	; 13e40 <__assert_fail@plt+0x2a48>
   13cb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cb4:	add	ip, pc, ip
   13cb8:	ldr	lr, [pc, #388]	; 13e44 <__assert_fail@plt+0x2a4c>
   13cbc:	sub	sp, sp, #8
   13cc0:	mov	r9, r3
   13cc4:	ldr	r5, [ip, lr]
   13cc8:	mov	sl, #0
   13ccc:	subs	r4, r0, #0
   13cd0:	ldr	r3, [r5]
   13cd4:	mov	r7, r1
   13cd8:	str	sl, [sp]
   13cdc:	mov	r1, ip
   13ce0:	str	r3, [sp, #4]
   13ce4:	beq	13d58 <__assert_fail@plt+0x2960>
   13ce8:	str	r9, [r7]
   13cec:	str	r9, [r2]
   13cf0:	mov	r6, r2
   13cf4:	bl	112b4 <__errno_location@plt>
   13cf8:	str	sl, [r0]
   13cfc:	ldrsb	r3, [r4]
   13d00:	mov	r8, r0
   13d04:	cmp	r3, #58	; 0x3a
   13d08:	beq	13d74 <__assert_fail@plt+0x297c>
   13d0c:	mov	sl, sp
   13d10:	mov	r1, sl
   13d14:	mov	r2, #10
   13d18:	mov	r0, r4
   13d1c:	bl	11110 <strtol@plt>
   13d20:	str	r0, [r7]
   13d24:	str	r0, [r6]
   13d28:	ldr	r0, [r8]
   13d2c:	cmp	r0, #0
   13d30:	bne	13dc4 <__assert_fail@plt+0x29cc>
   13d34:	ldr	r2, [sp]
   13d38:	cmp	r2, #0
   13d3c:	cmpne	r2, r4
   13d40:	beq	13dc4 <__assert_fail@plt+0x29cc>
   13d44:	ldrsb	r3, [r2]
   13d48:	cmp	r3, #58	; 0x3a
   13d4c:	beq	13dcc <__assert_fail@plt+0x29d4>
   13d50:	cmp	r3, #45	; 0x2d
   13d54:	beq	13ddc <__assert_fail@plt+0x29e4>
   13d58:	mov	r0, #0
   13d5c:	ldr	r2, [sp, #4]
   13d60:	ldr	r3, [r5]
   13d64:	cmp	r2, r3
   13d68:	bne	13e3c <__assert_fail@plt+0x2a44>
   13d6c:	add	sp, sp, #8
   13d70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d74:	add	r4, r4, #1
   13d78:	mov	r0, r4
   13d7c:	mov	r2, #10
   13d80:	mov	r1, sp
   13d84:	bl	11110 <strtol@plt>
   13d88:	str	r0, [r6]
   13d8c:	ldr	r3, [r8]
   13d90:	cmp	r3, #0
   13d94:	bne	13dc4 <__assert_fail@plt+0x29cc>
   13d98:	ldr	r3, [sp]
   13d9c:	cmp	r3, #0
   13da0:	beq	13dc4 <__assert_fail@plt+0x29cc>
   13da4:	ldrsb	r2, [r3]
   13da8:	sub	r3, r3, r4
   13dac:	clz	r3, r3
   13db0:	cmp	r2, #0
   13db4:	lsr	r3, r3, #5
   13db8:	movne	r3, #1
   13dbc:	cmp	r3, #0
   13dc0:	beq	13d58 <__assert_fail@plt+0x2960>
   13dc4:	mvn	r0, #0
   13dc8:	b	13d5c <__assert_fail@plt+0x2964>
   13dcc:	ldrsb	r3, [r2, #1]
   13dd0:	cmp	r3, #0
   13dd4:	streq	r9, [r6]
   13dd8:	beq	13d5c <__assert_fail@plt+0x2964>
   13ddc:	mov	r3, #0
   13de0:	add	r4, r2, #1
   13de4:	str	r3, [r8]
   13de8:	mov	r1, sl
   13dec:	mov	r0, r4
   13df0:	mov	r2, #10
   13df4:	str	r3, [sp]
   13df8:	bl	11110 <strtol@plt>
   13dfc:	str	r0, [r6]
   13e00:	ldr	r3, [r8]
   13e04:	cmp	r3, #0
   13e08:	bne	13dc4 <__assert_fail@plt+0x29cc>
   13e0c:	ldr	r2, [sp]
   13e10:	cmp	r2, #0
   13e14:	beq	13dc4 <__assert_fail@plt+0x29cc>
   13e18:	ldrsb	r3, [r2]
   13e1c:	sub	r2, r2, r4
   13e20:	clz	r2, r2
   13e24:	cmp	r3, #0
   13e28:	lsr	r2, r2, #5
   13e2c:	movne	r2, #1
   13e30:	cmp	r2, #0
   13e34:	beq	13d58 <__assert_fail@plt+0x2960>
   13e38:	b	13dc4 <__assert_fail@plt+0x29cc>
   13e3c:	bl	111c4 <__stack_chk_fail@plt>
   13e40:	andeq	r1, r1, r0, lsr #4
   13e44:	andeq	r0, r0, ip, lsl r1
   13e48:	ldr	r3, [pc, #244]	; 13f44 <__assert_fail@plt+0x2b4c>
   13e4c:	ldr	r2, [pc, #244]	; 13f48 <__assert_fail@plt+0x2b50>
   13e50:	add	r3, pc, r3
   13e54:	push	{r4, r5, r6, r7, r8, r9, lr}
   13e58:	sub	sp, sp, #20
   13e5c:	ldr	r9, [r3, r2]
   13e60:	cmp	r0, #0
   13e64:	cmpne	r1, #0
   13e68:	ldr	r3, [r9]
   13e6c:	str	r3, [sp, #12]
   13e70:	beq	13f38 <__assert_fail@plt+0x2b40>
   13e74:	mov	r4, r1
   13e78:	add	r8, sp, #4
   13e7c:	add	r7, sp, #8
   13e80:	b	13ec0 <__assert_fail@plt+0x2ac8>
   13e84:	cmp	r4, r3
   13e88:	bne	13f38 <__assert_fail@plt+0x2b40>
   13e8c:	mov	r2, r4
   13e90:	mov	r1, r6
   13e94:	mov	r0, r5
   13e98:	bl	113b0 <strncmp@plt>
   13e9c:	cmp	r0, #0
   13ea0:	bne	13f38 <__assert_fail@plt+0x2b40>
   13ea4:	adds	r0, r5, r4
   13ea8:	moveq	r3, #0
   13eac:	movne	r3, #1
   13eb0:	adds	r4, r6, r4
   13eb4:	moveq	r3, #0
   13eb8:	cmp	r3, #0
   13ebc:	beq	13f38 <__assert_fail@plt+0x2b40>
   13ec0:	mov	r1, r8
   13ec4:	bl	122c8 <__assert_fail@plt+0xed0>
   13ec8:	mov	r1, r7
   13ecc:	mov	r5, r0
   13ed0:	mov	r0, r4
   13ed4:	bl	122c8 <__assert_fail@plt+0xed0>
   13ed8:	ldr	r4, [sp, #4]
   13edc:	ldr	r3, [sp, #8]
   13ee0:	mov	r6, r0
   13ee4:	adds	r0, r4, r3
   13ee8:	beq	13f1c <__assert_fail@plt+0x2b24>
   13eec:	cmp	r0, #1
   13ef0:	bne	13e84 <__assert_fail@plt+0x2a8c>
   13ef4:	cmp	r5, #0
   13ef8:	beq	13f08 <__assert_fail@plt+0x2b10>
   13efc:	ldrsb	r2, [r5]
   13f00:	cmp	r2, #47	; 0x2f
   13f04:	beq	13f20 <__assert_fail@plt+0x2b28>
   13f08:	cmp	r6, #0
   13f0c:	beq	13e84 <__assert_fail@plt+0x2a8c>
   13f10:	ldrsb	r2, [r6]
   13f14:	cmp	r2, #47	; 0x2f
   13f18:	bne	13e84 <__assert_fail@plt+0x2a8c>
   13f1c:	mov	r0, #1
   13f20:	ldr	r2, [sp, #12]
   13f24:	ldr	r3, [r9]
   13f28:	cmp	r2, r3
   13f2c:	bne	13f40 <__assert_fail@plt+0x2b48>
   13f30:	add	sp, sp, #20
   13f34:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13f38:	mov	r0, #0
   13f3c:	b	13f20 <__assert_fail@plt+0x2b28>
   13f40:	bl	111c4 <__stack_chk_fail@plt>
   13f44:	andeq	r1, r1, r4, lsl #1
   13f48:	andeq	r0, r0, ip, lsl r1
   13f4c:	orrs	r3, r0, r1
   13f50:	beq	13fcc <__assert_fail@plt+0x2bd4>
   13f54:	cmp	r0, #0
   13f58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f5c:	mov	r4, r1
   13f60:	mov	r5, r0
   13f64:	beq	13fd8 <__assert_fail@plt+0x2be0>
   13f68:	cmp	r1, #0
   13f6c:	beq	13fe8 <__assert_fail@plt+0x2bf0>
   13f70:	mov	r6, r2
   13f74:	bl	11284 <strlen@plt>
   13f78:	mvn	r3, r0
   13f7c:	cmp	r6, r3
   13f80:	mov	r7, r0
   13f84:	movhi	r8, #0
   13f88:	bhi	13fc4 <__assert_fail@plt+0x2bcc>
   13f8c:	add	r9, r6, r0
   13f90:	add	r0, r9, #1
   13f94:	bl	11218 <malloc@plt>
   13f98:	subs	r8, r0, #0
   13f9c:	beq	13fc4 <__assert_fail@plt+0x2bcc>
   13fa0:	mov	r1, r5
   13fa4:	mov	r2, r7
   13fa8:	bl	11188 <memcpy@plt>
   13fac:	mov	r2, r6
   13fb0:	mov	r1, r4
   13fb4:	add	r0, r8, r7
   13fb8:	bl	11188 <memcpy@plt>
   13fbc:	mov	r3, #0
   13fc0:	strb	r3, [r8, r9]
   13fc4:	mov	r0, r8
   13fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13fcc:	ldr	r0, [pc, #28]	; 13ff0 <__assert_fail@plt+0x2bf8>
   13fd0:	add	r0, pc, r0
   13fd4:	b	111b8 <strdup@plt>
   13fd8:	mov	r0, r4
   13fdc:	mov	r1, r2
   13fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13fe4:	b	11170 <strndup@plt>
   13fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13fec:	b	111b8 <strdup@plt>
   13ff0:	andeq	r0, r0, ip, ror r8
   13ff4:	push	{r4, r5, r6, lr}
   13ff8:	subs	r4, r1, #0
   13ffc:	mov	r5, r0
   14000:	moveq	r2, r4
   14004:	beq	14014 <__assert_fail@plt+0x2c1c>
   14008:	mov	r0, r4
   1400c:	bl	11284 <strlen@plt>
   14010:	mov	r2, r0
   14014:	mov	r1, r4
   14018:	mov	r0, r5
   1401c:	pop	{r4, r5, r6, lr}
   14020:	b	13f4c <__assert_fail@plt+0x2b54>
   14024:	push	{r1, r2, r3}
   14028:	ldr	r1, [pc, #132]	; 140b4 <__assert_fail@plt+0x2cbc>
   1402c:	ldr	r3, [pc, #132]	; 140b8 <__assert_fail@plt+0x2cc0>
   14030:	add	r1, pc, r1
   14034:	push	{r4, r5, lr}
   14038:	mov	r5, r0
   1403c:	ldr	r4, [r1, r3]
   14040:	sub	sp, sp, #16
   14044:	add	ip, sp, #32
   14048:	ldr	r0, [r4]
   1404c:	ldr	r2, [sp, #28]
   14050:	str	r0, [sp, #12]
   14054:	mov	r3, ip
   14058:	add	r0, sp, #8
   1405c:	mov	r1, #1
   14060:	str	ip, [sp, #4]
   14064:	bl	112d8 <__vasprintf_chk@plt>
   14068:	subs	r2, r0, #0
   1406c:	movlt	r5, #0
   14070:	blt	1408c <__assert_fail@plt+0x2c94>
   14074:	mov	r0, r5
   14078:	ldr	r1, [sp, #8]
   1407c:	bl	13f4c <__assert_fail@plt+0x2b54>
   14080:	mov	r5, r0
   14084:	ldr	r0, [sp, #8]
   14088:	bl	1114c <free@plt>
   1408c:	ldr	r2, [sp, #12]
   14090:	ldr	r3, [r4]
   14094:	mov	r0, r5
   14098:	cmp	r2, r3
   1409c:	bne	140b0 <__assert_fail@plt+0x2cb8>
   140a0:	add	sp, sp, #16
   140a4:	pop	{r4, r5, lr}
   140a8:	add	sp, sp, #12
   140ac:	bx	lr
   140b0:	bl	111c4 <__stack_chk_fail@plt>
   140b4:	andeq	r0, r1, r4, lsr #29
   140b8:	andeq	r0, r0, ip, lsl r1
   140bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   140c0:	mov	r6, r0
   140c4:	ldr	r0, [pc, #348]	; 14228 <__assert_fail@plt+0x2e30>
   140c8:	ldr	ip, [pc, #348]	; 1422c <__assert_fail@plt+0x2e34>
   140cc:	add	r0, pc, r0
   140d0:	ldr	r5, [r6]
   140d4:	ldr	r8, [r0, ip]
   140d8:	sub	sp, sp, #8
   140dc:	ldrsb	r4, [r5]
   140e0:	mov	r9, r2
   140e4:	ldr	r2, [r8]
   140e8:	cmp	r4, #0
   140ec:	mov	r7, r1
   140f0:	str	r2, [sp, #4]
   140f4:	mov	r1, r0
   140f8:	beq	141a8 <__assert_fail@plt+0x2db0>
   140fc:	mov	r0, r5
   14100:	mov	r1, r9
   14104:	mov	sl, r3
   14108:	bl	113ec <strspn@plt>
   1410c:	add	r4, r5, r0
   14110:	ldrsb	r5, [r5, r0]
   14114:	cmp	r5, #0
   14118:	beq	14210 <__assert_fail@plt+0x2e18>
   1411c:	cmp	sl, #0
   14120:	beq	141c4 <__assert_fail@plt+0x2dcc>
   14124:	ldr	r0, [pc, #260]	; 14230 <__assert_fail@plt+0x2e38>
   14128:	mov	r1, r5
   1412c:	add	r0, pc, r0
   14130:	bl	11290 <strchr@plt>
   14134:	cmp	r0, #0
   14138:	beq	141e0 <__assert_fail@plt+0x2de8>
   1413c:	add	sl, r4, #1
   14140:	mov	r3, #0
   14144:	mov	r0, sl
   14148:	mov	r1, sp
   1414c:	strb	r5, [sp]
   14150:	strb	r3, [sp, #1]
   14154:	bl	12368 <__assert_fail@plt+0xf70>
   14158:	add	r3, r4, r0
   1415c:	str	r0, [r7]
   14160:	ldrsb	r3, [r3, #1]
   14164:	subs	r5, r5, r3
   14168:	movne	r5, #1
   1416c:	cmp	r3, #0
   14170:	moveq	r5, #1
   14174:	cmp	r5, #0
   14178:	bne	14210 <__assert_fail@plt+0x2e18>
   1417c:	add	r0, r0, #2
   14180:	add	r5, r4, r0
   14184:	ldrsb	r1, [r4, r0]
   14188:	cmp	r1, #0
   1418c:	beq	141a0 <__assert_fail@plt+0x2da8>
   14190:	mov	r0, r9
   14194:	bl	11290 <strchr@plt>
   14198:	cmp	r0, #0
   1419c:	beq	14210 <__assert_fail@plt+0x2e18>
   141a0:	mov	r4, sl
   141a4:	str	r5, [r6]
   141a8:	ldr	r2, [sp, #4]
   141ac:	ldr	r3, [r8]
   141b0:	mov	r0, r4
   141b4:	cmp	r2, r3
   141b8:	bne	14224 <__assert_fail@plt+0x2e2c>
   141bc:	add	sp, sp, #8
   141c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   141c4:	mov	r1, r9
   141c8:	mov	r0, r4
   141cc:	bl	1111c <strcspn@plt>
   141d0:	add	r3, r4, r0
   141d4:	str	r0, [r7]
   141d8:	str	r3, [r6]
   141dc:	b	141a8 <__assert_fail@plt+0x2db0>
   141e0:	mov	r1, r9
   141e4:	mov	r0, r4
   141e8:	bl	12368 <__assert_fail@plt+0xf70>
   141ec:	str	r0, [r7]
   141f0:	ldrsb	r1, [r4, r0]
   141f4:	add	r5, r4, r0
   141f8:	cmp	r1, #0
   141fc:	beq	1421c <__assert_fail@plt+0x2e24>
   14200:	mov	r0, r9
   14204:	bl	11290 <strchr@plt>
   14208:	cmp	r0, #0
   1420c:	bne	1421c <__assert_fail@plt+0x2e24>
   14210:	str	r4, [r6]
   14214:	mov	r4, #0
   14218:	b	141a8 <__assert_fail@plt+0x2db0>
   1421c:	str	r5, [r6]
   14220:	b	141a8 <__assert_fail@plt+0x2db0>
   14224:	bl	111c4 <__stack_chk_fail@plt>
   14228:	andeq	r0, r1, r8, lsl #28
   1422c:	andeq	r0, r0, ip, lsl r1
   14230:	andeq	r0, r0, r0, lsr #22
   14234:	push	{r4, lr}
   14238:	mov	r4, r0
   1423c:	b	14248 <__assert_fail@plt+0x2e50>
   14240:	cmp	r0, #10
   14244:	beq	14260 <__assert_fail@plt+0x2e68>
   14248:	mov	r0, r4
   1424c:	bl	112e4 <fgetc@plt>
   14250:	cmn	r0, #1
   14254:	bne	14240 <__assert_fail@plt+0x2e48>
   14258:	mov	r0, #1
   1425c:	pop	{r4, pc}
   14260:	mov	r0, #0
   14264:	pop	{r4, pc}
   14268:	subs	r2, r1, #1
   1426c:	bxeq	lr
   14270:	bcc	14448 <__assert_fail@plt+0x3050>
   14274:	cmp	r0, r1
   14278:	bls	1442c <__assert_fail@plt+0x3034>
   1427c:	tst	r1, r2
   14280:	beq	14438 <__assert_fail@plt+0x3040>
   14284:	clz	r3, r0
   14288:	clz	r2, r1
   1428c:	sub	r3, r2, r3
   14290:	rsbs	r3, r3, #31
   14294:	addne	r3, r3, r3, lsl #1
   14298:	mov	r2, #0
   1429c:	addne	pc, pc, r3, lsl #2
   142a0:	nop			; (mov r0, r0)
   142a4:	cmp	r0, r1, lsl #31
   142a8:	adc	r2, r2, r2
   142ac:	subcs	r0, r0, r1, lsl #31
   142b0:	cmp	r0, r1, lsl #30
   142b4:	adc	r2, r2, r2
   142b8:	subcs	r0, r0, r1, lsl #30
   142bc:	cmp	r0, r1, lsl #29
   142c0:	adc	r2, r2, r2
   142c4:	subcs	r0, r0, r1, lsl #29
   142c8:	cmp	r0, r1, lsl #28
   142cc:	adc	r2, r2, r2
   142d0:	subcs	r0, r0, r1, lsl #28
   142d4:	cmp	r0, r1, lsl #27
   142d8:	adc	r2, r2, r2
   142dc:	subcs	r0, r0, r1, lsl #27
   142e0:	cmp	r0, r1, lsl #26
   142e4:	adc	r2, r2, r2
   142e8:	subcs	r0, r0, r1, lsl #26
   142ec:	cmp	r0, r1, lsl #25
   142f0:	adc	r2, r2, r2
   142f4:	subcs	r0, r0, r1, lsl #25
   142f8:	cmp	r0, r1, lsl #24
   142fc:	adc	r2, r2, r2
   14300:	subcs	r0, r0, r1, lsl #24
   14304:	cmp	r0, r1, lsl #23
   14308:	adc	r2, r2, r2
   1430c:	subcs	r0, r0, r1, lsl #23
   14310:	cmp	r0, r1, lsl #22
   14314:	adc	r2, r2, r2
   14318:	subcs	r0, r0, r1, lsl #22
   1431c:	cmp	r0, r1, lsl #21
   14320:	adc	r2, r2, r2
   14324:	subcs	r0, r0, r1, lsl #21
   14328:	cmp	r0, r1, lsl #20
   1432c:	adc	r2, r2, r2
   14330:	subcs	r0, r0, r1, lsl #20
   14334:	cmp	r0, r1, lsl #19
   14338:	adc	r2, r2, r2
   1433c:	subcs	r0, r0, r1, lsl #19
   14340:	cmp	r0, r1, lsl #18
   14344:	adc	r2, r2, r2
   14348:	subcs	r0, r0, r1, lsl #18
   1434c:	cmp	r0, r1, lsl #17
   14350:	adc	r2, r2, r2
   14354:	subcs	r0, r0, r1, lsl #17
   14358:	cmp	r0, r1, lsl #16
   1435c:	adc	r2, r2, r2
   14360:	subcs	r0, r0, r1, lsl #16
   14364:	cmp	r0, r1, lsl #15
   14368:	adc	r2, r2, r2
   1436c:	subcs	r0, r0, r1, lsl #15
   14370:	cmp	r0, r1, lsl #14
   14374:	adc	r2, r2, r2
   14378:	subcs	r0, r0, r1, lsl #14
   1437c:	cmp	r0, r1, lsl #13
   14380:	adc	r2, r2, r2
   14384:	subcs	r0, r0, r1, lsl #13
   14388:	cmp	r0, r1, lsl #12
   1438c:	adc	r2, r2, r2
   14390:	subcs	r0, r0, r1, lsl #12
   14394:	cmp	r0, r1, lsl #11
   14398:	adc	r2, r2, r2
   1439c:	subcs	r0, r0, r1, lsl #11
   143a0:	cmp	r0, r1, lsl #10
   143a4:	adc	r2, r2, r2
   143a8:	subcs	r0, r0, r1, lsl #10
   143ac:	cmp	r0, r1, lsl #9
   143b0:	adc	r2, r2, r2
   143b4:	subcs	r0, r0, r1, lsl #9
   143b8:	cmp	r0, r1, lsl #8
   143bc:	adc	r2, r2, r2
   143c0:	subcs	r0, r0, r1, lsl #8
   143c4:	cmp	r0, r1, lsl #7
   143c8:	adc	r2, r2, r2
   143cc:	subcs	r0, r0, r1, lsl #7
   143d0:	cmp	r0, r1, lsl #6
   143d4:	adc	r2, r2, r2
   143d8:	subcs	r0, r0, r1, lsl #6
   143dc:	cmp	r0, r1, lsl #5
   143e0:	adc	r2, r2, r2
   143e4:	subcs	r0, r0, r1, lsl #5
   143e8:	cmp	r0, r1, lsl #4
   143ec:	adc	r2, r2, r2
   143f0:	subcs	r0, r0, r1, lsl #4
   143f4:	cmp	r0, r1, lsl #3
   143f8:	adc	r2, r2, r2
   143fc:	subcs	r0, r0, r1, lsl #3
   14400:	cmp	r0, r1, lsl #2
   14404:	adc	r2, r2, r2
   14408:	subcs	r0, r0, r1, lsl #2
   1440c:	cmp	r0, r1, lsl #1
   14410:	adc	r2, r2, r2
   14414:	subcs	r0, r0, r1, lsl #1
   14418:	cmp	r0, r1
   1441c:	adc	r2, r2, r2
   14420:	subcs	r0, r0, r1
   14424:	mov	r0, r2
   14428:	bx	lr
   1442c:	moveq	r0, #1
   14430:	movne	r0, #0
   14434:	bx	lr
   14438:	clz	r2, r1
   1443c:	rsb	r2, r2, #31
   14440:	lsr	r0, r0, r2
   14444:	bx	lr
   14448:	cmp	r0, #0
   1444c:	mvnne	r0, #0
   14450:	b	144b0 <__assert_fail@plt+0x30b8>
   14454:	cmp	r1, #0
   14458:	beq	14448 <__assert_fail@plt+0x3050>
   1445c:	push	{r0, r1, lr}
   14460:	bl	14268 <__assert_fail@plt+0x2e70>
   14464:	pop	{r1, r2, lr}
   14468:	mul	r3, r2, r0
   1446c:	sub	r1, r1, r3
   14470:	bx	lr
   14474:	cmp	r3, #0
   14478:	cmpeq	r2, #0
   1447c:	bne	14494 <__assert_fail@plt+0x309c>
   14480:	cmp	r1, #0
   14484:	cmpeq	r0, #0
   14488:	mvnne	r1, #0
   1448c:	mvnne	r0, #0
   14490:	b	144b0 <__assert_fail@plt+0x30b8>
   14494:	sub	sp, sp, #8
   14498:	push	{sp, lr}
   1449c:	bl	144c0 <__assert_fail@plt+0x30c8>
   144a0:	ldr	lr, [sp, #4]
   144a4:	add	sp, sp, #8
   144a8:	pop	{r2, r3}
   144ac:	bx	lr
   144b0:	push	{r1, lr}
   144b4:	mov	r0, #8
   144b8:	bl	110e0 <raise@plt>
   144bc:	pop	{r1, pc}
   144c0:	cmp	r1, r3
   144c4:	cmpeq	r0, r2
   144c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144cc:	mov	r4, r0
   144d0:	movcc	r0, #0
   144d4:	mov	r5, r1
   144d8:	ldr	lr, [sp, #36]	; 0x24
   144dc:	movcc	r1, r0
   144e0:	bcc	145dc <__assert_fail@plt+0x31e4>
   144e4:	cmp	r3, #0
   144e8:	clzeq	ip, r2
   144ec:	clzne	ip, r3
   144f0:	addeq	ip, ip, #32
   144f4:	cmp	r5, #0
   144f8:	clzeq	r1, r4
   144fc:	addeq	r1, r1, #32
   14500:	clzne	r1, r5
   14504:	sub	ip, ip, r1
   14508:	sub	sl, ip, #32
   1450c:	lsl	r9, r3, ip
   14510:	rsb	fp, ip, #32
   14514:	orr	r9, r9, r2, lsl sl
   14518:	orr	r9, r9, r2, lsr fp
   1451c:	lsl	r8, r2, ip
   14520:	cmp	r5, r9
   14524:	cmpeq	r4, r8
   14528:	movcc	r0, #0
   1452c:	movcc	r1, r0
   14530:	bcc	1454c <__assert_fail@plt+0x3154>
   14534:	mov	r0, #1
   14538:	subs	r4, r4, r8
   1453c:	lsl	r1, r0, sl
   14540:	orr	r1, r1, r0, lsr fp
   14544:	lsl	r0, r0, ip
   14548:	sbc	r5, r5, r9
   1454c:	cmp	ip, #0
   14550:	beq	145dc <__assert_fail@plt+0x31e4>
   14554:	lsr	r6, r8, #1
   14558:	orr	r6, r6, r9, lsl #31
   1455c:	lsr	r7, r9, #1
   14560:	mov	r2, ip
   14564:	b	14588 <__assert_fail@plt+0x3190>
   14568:	subs	r3, r4, r6
   1456c:	sbc	r8, r5, r7
   14570:	adds	r3, r3, r3
   14574:	adc	r8, r8, r8
   14578:	adds	r4, r3, #1
   1457c:	adc	r5, r8, #0
   14580:	subs	r2, r2, #1
   14584:	beq	145a4 <__assert_fail@plt+0x31ac>
   14588:	cmp	r5, r7
   1458c:	cmpeq	r4, r6
   14590:	bcs	14568 <__assert_fail@plt+0x3170>
   14594:	adds	r4, r4, r4
   14598:	adc	r5, r5, r5
   1459c:	subs	r2, r2, #1
   145a0:	bne	14588 <__assert_fail@plt+0x3190>
   145a4:	lsr	r3, r4, ip
   145a8:	orr	r3, r3, r5, lsl fp
   145ac:	lsr	r2, r5, ip
   145b0:	orr	r3, r3, r5, lsr sl
   145b4:	adds	r0, r0, r4
   145b8:	mov	r4, r3
   145bc:	lsl	r3, r2, ip
   145c0:	orr	r3, r3, r4, lsl sl
   145c4:	lsl	ip, r4, ip
   145c8:	orr	r3, r3, r4, lsr fp
   145cc:	adc	r1, r1, r5
   145d0:	subs	r0, r0, ip
   145d4:	mov	r5, r2
   145d8:	sbc	r1, r1, r3
   145dc:	cmp	lr, #0
   145e0:	strdne	r4, [lr]
   145e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   145ec:	mov	r7, r0
   145f0:	ldr	r6, [pc, #72]	; 14640 <__assert_fail@plt+0x3248>
   145f4:	ldr	r5, [pc, #72]	; 14644 <__assert_fail@plt+0x324c>
   145f8:	add	r6, pc, r6
   145fc:	add	r5, pc, r5
   14600:	sub	r6, r6, r5
   14604:	mov	r8, r1
   14608:	mov	r9, r2
   1460c:	bl	110b4 <scols_column_set_json_type@plt-0x20>
   14610:	asrs	r6, r6, #2
   14614:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14618:	mov	r4, #0
   1461c:	add	r4, r4, #1
   14620:	ldr	r3, [r5], #4
   14624:	mov	r2, r9
   14628:	mov	r1, r8
   1462c:	mov	r0, r7
   14630:	blx	r3
   14634:	cmp	r6, r4
   14638:	bne	1461c <__assert_fail@plt+0x3224>
   1463c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14640:	andeq	r0, r1, ip, asr #15
   14644:	andeq	r0, r1, r4, asr #15
   14648:	bx	lr
   1464c:	ldr	r3, [pc, #12]	; 14660 <__assert_fail@plt+0x3268>
   14650:	mov	r1, #0
   14654:	add	r3, pc, r3
   14658:	ldr	r2, [r3]
   1465c:	b	112cc <__cxa_atexit@plt>
   14660:	andeq	r0, r1, r8, lsr #19

Disassembly of section .fini:

00014664 <.fini>:
   14664:	push	{r3, lr}
   14668:	pop	{r3, pc}
