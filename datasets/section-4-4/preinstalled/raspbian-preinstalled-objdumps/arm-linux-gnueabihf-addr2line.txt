
raspbian-preinstalled/arm-linux-gnueabihf-addr2line:     file format elf32-littlearm


Disassembly of section .init:

00011100 <.init>:
   11100:	push	{r3, lr}
   11104:	bl	11e90 <__assert_fail@plt+0x9ec>
   11108:	pop	{r3, pc}

Disassembly of section .plt:

0001110c <cplus_demangle_name_to_style@plt-0x14>:
   1110c:	push	{lr}		; (str lr, [sp, #-4]!)
   11110:	ldr	lr, [pc, #4]	; 1111c <cplus_demangle_name_to_style@plt-0x4>
   11114:	add	lr, pc, lr
   11118:	ldr	pc, [lr, #8]!
   1111c:	andeq	r3, r1, r4, ror #29

00011120 <cplus_demangle_name_to_style@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #77824	; 0x13000
   11128:	ldr	pc, [ip, #3812]!	; 0xee4

0001112c <bfd_scan_vma@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #77824	; 0x13000
   11134:	ldr	pc, [ip, #3804]!	; 0xedc

00011138 <strcmp@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #77824	; 0x13000
   11140:	ldr	pc, [ip, #3796]!	; 0xed4

00011144 <strtol@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #77824	; 0x13000
   1114c:	ldr	pc, [ip, #3788]!	; 0xecc

00011150 <printf@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #77824	; 0x13000
   11158:	ldr	pc, [ip, #3780]!	; 0xec4

0001115c <fflush@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #77824	; 0x13000
   11164:	ldr	pc, [ip, #3772]!	; 0xebc

00011168 <bfd_arch_list@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #77824	; 0x13000
   11170:	ldr	pc, [ip, #3764]!	; 0xeb4

00011174 <memmove@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #77824	; 0x13000
   1117c:	ldr	pc, [ip, #3756]!	; 0xeac

00011180 <bfd_set_default_target@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #77824	; 0x13000
   11188:	ldr	pc, [ip, #3748]!	; 0xea4

0001118c <free@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #77824	; 0x13000
   11194:	ldr	pc, [ip, #3740]!	; 0xe9c

00011198 <fgets@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #77824	; 0x13000
   111a0:	ldr	pc, [ip, #3732]!	; 0xe94

000111a4 <ferror@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #77824	; 0x13000
   111ac:	ldr	pc, [ip, #3724]!	; 0xe8c

000111b0 <cplus_demangle_set_style@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #77824	; 0x13000
   111b8:	ldr	pc, [ip, #3716]!	; 0xe84

000111bc <memcpy@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #77824	; 0x13000
   111c4:	ldr	pc, [ip, #3708]!	; 0xe7c

000111c8 <bfd_openr@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #77824	; 0x13000
   111d0:	ldr	pc, [ip, #3700]!	; 0xe74

000111d4 <ftell@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #77824	; 0x13000
   111dc:	ldr	pc, [ip, #3692]!	; 0xe6c

000111e0 <ctime@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #77824	; 0x13000
   111e8:	ldr	pc, [ip, #3684]!	; 0xe64

000111ec <dcgettext@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #77824	; 0x13000
   111f4:	ldr	pc, [ip, #3676]!	; 0xe5c

000111f8 <unlink@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #77824	; 0x13000
   11200:	ldr	pc, [ip, #3668]!	; 0xe54

00011204 <xrealloc@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #77824	; 0x13000
   1120c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011210 <textdomain@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #77824	; 0x13000
   11218:	ldr	pc, [ip, #3652]!	; 0xe44

0001121c <bfd_target_list@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #77824	; 0x13000
   11224:	ldr	pc, [ip, #3644]!	; 0xe3c

00011228 <bfd_get_error@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #77824	; 0x13000
   11230:	ldr	pc, [ip, #3636]!	; 0xe34

00011234 <fwrite@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #77824	; 0x13000
   1123c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011240 <xmalloc@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #77824	; 0x13000
   11248:	ldr	pc, [ip, #3620]!	; 0xe24

0001124c <xmalloc_set_program_name@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #77824	; 0x13000
   11254:	ldr	pc, [ip, #3612]!	; 0xe1c

00011258 <xstrdup@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #77824	; 0x13000
   11260:	ldr	pc, [ip, #3604]!	; 0xe14

00011264 <strcpy@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #77824	; 0x13000
   1126c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011270 <fread@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #77824	; 0x13000
   11278:	ldr	pc, [ip, #3588]!	; 0xe04

0001127c <bfd_get_section_by_name@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #77824	; 0x13000
   11284:	ldr	pc, [ip, #3580]!	; 0xdfc

00011288 <bfd_init@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #77824	; 0x13000
   11290:	ldr	pc, [ip, #3572]!	; 0xdf4

00011294 <mkstemps64@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #77824	; 0x13000
   1129c:	ldr	pc, [ip, #3564]!	; 0xdec

000112a0 <getenv@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #77824	; 0x13000
   112a8:	ldr	pc, [ip, #3556]!	; 0xde4

000112ac <mkstemp64@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #77824	; 0x13000
   112b4:	ldr	pc, [ip, #3548]!	; 0xddc

000112b8 <puts@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #77824	; 0x13000
   112c0:	ldr	pc, [ip, #3540]!	; 0xdd4

000112c4 <__libc_start_main@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #77824	; 0x13000
   112cc:	ldr	pc, [ip, #3532]!	; 0xdcc

000112d0 <strerror@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #77824	; 0x13000
   112d8:	ldr	pc, [ip, #3524]!	; 0xdc4

000112dc <__gmon_start__@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #77824	; 0x13000
   112e4:	ldr	pc, [ip, #3516]!	; 0xdbc

000112e8 <bfd_set_format@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #77824	; 0x13000
   112f0:	ldr	pc, [ip, #3508]!	; 0xdb4

000112f4 <getopt_long@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #77824	; 0x13000
   112fc:	ldr	pc, [ip, #3500]!	; 0xdac

00011300 <exit@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #77824	; 0x13000
   11308:	ldr	pc, [ip, #3492]!	; 0xda4

0001130c <strlen@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #77824	; 0x13000
   11314:	ldr	pc, [ip, #3484]!	; 0xd9c

00011318 <bfd_close_all_done@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #77824	; 0x13000
   11320:	ldr	pc, [ip, #3476]!	; 0xd94

00011324 <fprintf@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #77824	; 0x13000
   1132c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011330 <bfd_printable_arch_mach@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #77824	; 0x13000
   11338:	ldr	pc, [ip, #3460]!	; 0xd84

0001133c <__errno_location@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #77824	; 0x13000
   11344:	ldr	pc, [ip, #3452]!	; 0xd7c

00011348 <bfd_iterate_over_targets@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #77824	; 0x13000
   11350:	ldr	pc, [ip, #3444]!	; 0xd74

00011354 <memset@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #77824	; 0x13000
   1135c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011360 <putchar@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #77824	; 0x13000
   11368:	ldr	pc, [ip, #3428]!	; 0xd64

0001136c <access@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #77824	; 0x13000
   11374:	ldr	pc, [ip, #3420]!	; 0xd5c

00011378 <fclose@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #77824	; 0x13000
   11380:	ldr	pc, [ip, #3412]!	; 0xd54

00011384 <bfd_openw@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #77824	; 0x13000
   1138c:	ldr	pc, [ip, #3404]!	; 0xd4c

00011390 <bfd_set_error_program_name@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #77824	; 0x13000
   11398:	ldr	pc, [ip, #3396]!	; 0xd44

0001139c <bfd_demangle@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #77824	; 0x13000
   113a4:	ldr	pc, [ip, #3388]!	; 0xd3c

000113a8 <setlocale@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #77824	; 0x13000
   113b0:	ldr	pc, [ip, #3380]!	; 0xd34

000113b4 <strrchr@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #77824	; 0x13000
   113bc:	ldr	pc, [ip, #3372]!	; 0xd2c

000113c0 <vfprintf@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #77824	; 0x13000
   113c8:	ldr	pc, [ip, #3364]!	; 0xd24

000113cc <fputc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #77824	; 0x13000
   113d4:	ldr	pc, [ip, #3356]!	; 0xd1c

000113d8 <xexit@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #77824	; 0x13000
   113e0:	ldr	pc, [ip, #3348]!	; 0xd14

000113e4 <bfd_close@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #77824	; 0x13000
   113ec:	ldr	pc, [ip, #3340]!	; 0xd0c

000113f0 <sprintf@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #77824	; 0x13000
   113f8:	ldr	pc, [ip, #3332]!	; 0xd04

000113fc <mkdtemp@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #77824	; 0x13000
   11404:	ldr	pc, [ip, #3324]!	; 0xcfc

00011408 <putc@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #77824	; 0x13000
   11410:	ldr	pc, [ip, #3316]!	; 0xcf4

00011414 <bfd_check_format_matches@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #77824	; 0x13000
   1141c:	ldr	pc, [ip, #3308]!	; 0xcec

00011420 <fopen64@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #77824	; 0x13000
   11428:	ldr	pc, [ip, #3300]!	; 0xce4

0001142c <bfd_errmsg@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #77824	; 0x13000
   11434:	ldr	pc, [ip, #3292]!	; 0xcdc

00011438 <bindtextdomain@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #77824	; 0x13000
   11440:	ldr	pc, [ip, #3284]!	; 0xcd4

00011444 <bfd_check_format@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #77824	; 0x13000
   1144c:	ldr	pc, [ip, #3276]!	; 0xccc

00011450 <bfd_fprintf_vma@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #77824	; 0x13000
   11458:	ldr	pc, [ip, #3268]!	; 0xcc4

0001145c <bfd_map_over_sections@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #77824	; 0x13000
   11464:	ldr	pc, [ip, #3260]!	; 0xcbc

00011468 <fseek@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #77824	; 0x13000
   11470:	ldr	pc, [ip, #3252]!	; 0xcb4

00011474 <__xstat64@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #77824	; 0x13000
   1147c:	ldr	pc, [ip, #3244]!	; 0xcac

00011480 <fputs@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #77824	; 0x13000
   11488:	ldr	pc, [ip, #3236]!	; 0xca4

0001148c <abort@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #77824	; 0x13000
   11494:	ldr	pc, [ip, #3228]!	; 0xc9c

00011498 <close@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #77824	; 0x13000
   114a0:	ldr	pc, [ip, #3220]!	; 0xc94

000114a4 <__assert_fail@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #77824	; 0x13000
   114ac:	ldr	pc, [ip, #3212]!	; 0xc8c

Disassembly of section .text:

000114b0 <.text>:
   114b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114b4:	sub	sp, sp, #140	; 0x8c
   114b8:	ldr	r4, [pc, #2324]	; 11dd4 <__assert_fail@plt+0x930>
   114bc:	str	r0, [sp, #28]
   114c0:	str	r1, [sp, #24]
   114c4:	mov	r0, #5
   114c8:	ldr	r1, [pc, #2312]	; 11dd8 <__assert_fail@plt+0x934>
   114cc:	bl	113a8 <setlocale@plt>
   114d0:	ldr	r1, [pc, #2304]	; 11dd8 <__assert_fail@plt+0x934>
   114d4:	mov	r0, #0
   114d8:	bl	113a8 <setlocale@plt>
   114dc:	ldr	r1, [pc, #2296]	; 11ddc <__assert_fail@plt+0x938>
   114e0:	ldr	r0, [pc, #2296]	; 11de0 <__assert_fail@plt+0x93c>
   114e4:	bl	11438 <bindtextdomain@plt>
   114e8:	ldr	r0, [pc, #2288]	; 11de0 <__assert_fail@plt+0x93c>
   114ec:	bl	11210 <textdomain@plt>
   114f0:	ldr	r3, [sp, #24]
   114f4:	mov	fp, #0
   114f8:	ldr	r5, [pc, #2276]	; 11de4 <__assert_fail@plt+0x940>
   114fc:	ldr	r3, [r3]
   11500:	ldr	r8, [pc, #2272]	; 11de8 <__assert_fail@plt+0x944>
   11504:	mov	r0, r3
   11508:	str	r3, [r4]
   1150c:	bl	1124c <xmalloc_set_program_name@plt>
   11510:	ldr	r0, [r4]
   11514:	bl	11390 <bfd_set_error_program_name@plt>
   11518:	add	r1, sp, #24
   1151c:	add	r0, sp, #28
   11520:	bl	133f0 <__assert_fail@plt+0x1f4c>
   11524:	bl	11288 <bfd_init@plt>
   11528:	bl	1246c <__assert_fail@plt+0xfc8>
   1152c:	ldr	r4, [pc, #2232]	; 11dec <__assert_fail@plt+0x948>
   11530:	ldr	r7, [pc, #2232]	; 11df0 <__assert_fail@plt+0x94c>
   11534:	mov	sl, fp
   11538:	mov	r9, fp
   1153c:	mov	r6, fp
   11540:	str	r6, [sp]
   11544:	mov	r3, r5
   11548:	mov	r2, r4
   1154c:	ldr	r1, [sp, #24]
   11550:	ldr	r0, [sp, #28]
   11554:	bl	112f4 <getopt_long@plt>
   11558:	cmn	r0, #1
   1155c:	beq	117d0 <__assert_fail@plt+0x32c>
   11560:	cmp	r0, #118	; 0x76
   11564:	ldrls	pc, [pc, r0, lsl #2]
   11568:	b	11d40 <__assert_fail@plt+0x89c>
   1156c:	andeq	r1, r1, r0, asr #10
   11570:	andeq	r1, r1, r0, asr #26
   11574:	andeq	r1, r1, r0, asr #26
   11578:	andeq	r1, r1, r0, asr #26
   1157c:	andeq	r1, r1, r0, asr #26
   11580:	andeq	r1, r1, r0, asr #26
   11584:	andeq	r1, r1, r0, asr #26
   11588:	andeq	r1, r1, r0, asr #26
   1158c:	andeq	r1, r1, r0, asr #26
   11590:	andeq	r1, r1, r0, asr #26
   11594:	andeq	r1, r1, r0, asr #26
   11598:	andeq	r1, r1, r0, asr #26
   1159c:	andeq	r1, r1, r0, asr #26
   115a0:	andeq	r1, r1, r0, asr #26
   115a4:	andeq	r1, r1, r0, asr #26
   115a8:	andeq	r1, r1, r0, asr #26
   115ac:	andeq	r1, r1, r0, asr #26
   115b0:	andeq	r1, r1, r0, asr #26
   115b4:	andeq	r1, r1, r0, asr #26
   115b8:	andeq	r1, r1, r0, asr #26
   115bc:	andeq	r1, r1, r0, asr #26
   115c0:	andeq	r1, r1, r0, asr #26
   115c4:	andeq	r1, r1, r0, asr #26
   115c8:	andeq	r1, r1, r0, asr #26
   115cc:	andeq	r1, r1, r0, asr #26
   115d0:	andeq	r1, r1, r0, asr #26
   115d4:	andeq	r1, r1, r0, asr #26
   115d8:	andeq	r1, r1, r0, asr #26
   115dc:	andeq	r1, r1, r0, asr #26
   115e0:	andeq	r1, r1, r0, asr #26
   115e4:	andeq	r1, r1, r0, asr #26
   115e8:	andeq	r1, r1, r0, asr #26
   115ec:	andeq	r1, r1, r0, asr #26
   115f0:	andeq	r1, r1, r0, asr #26
   115f4:	andeq	r1, r1, r0, asr #26
   115f8:	andeq	r1, r1, r0, asr #26
   115fc:	andeq	r1, r1, r0, asr #26
   11600:	andeq	r1, r1, r0, asr #26
   11604:	andeq	r1, r1, r0, asr #26
   11608:	andeq	r1, r1, r0, asr #26
   1160c:	andeq	r1, r1, r0, asr #26
   11610:	andeq	r1, r1, r0, asr #26
   11614:	andeq	r1, r1, r0, asr #26
   11618:	andeq	r1, r1, r0, asr #26
   1161c:	andeq	r1, r1, r0, asr #26
   11620:	andeq	r1, r1, r0, asr #26
   11624:	andeq	r1, r1, r0, asr #26
   11628:	andeq	r1, r1, r0, asr #26
   1162c:	andeq	r1, r1, r0, asr #26
   11630:	andeq	r1, r1, r0, asr #26
   11634:	andeq	r1, r1, r0, asr #26
   11638:	andeq	r1, r1, r0, asr #26
   1163c:	andeq	r1, r1, r0, asr #26
   11640:	andeq	r1, r1, r0, asr #26
   11644:	andeq	r1, r1, r0, asr #26
   11648:	andeq	r1, r1, r0, asr #26
   1164c:	andeq	r1, r1, r0, asr #26
   11650:	andeq	r1, r1, r0, asr #26
   11654:	andeq	r1, r1, r0, asr #26
   11658:	andeq	r1, r1, r0, asr #26
   1165c:	andeq	r1, r1, r0, asr #26
   11660:	andeq	r1, r1, r0, asr #26
   11664:	andeq	r1, r1, r0, asr #26
   11668:	andeq	r1, r1, r0, asr #26
   1166c:	andeq	r1, r1, r0, asr #26
   11670:	andeq	r1, r1, r0, asr #26
   11674:	andeq	r1, r1, r0, asr #26
   11678:	andeq	r1, r1, r8, lsr #15
   1167c:	andeq	r1, r1, r0, asr #26
   11680:	andeq	r1, r1, r0, asr #26
   11684:	andeq	r1, r1, r0, asr #26
   11688:	andeq	r1, r1, r0, asr #26
   1168c:	andeq	r1, r1, r0, lsr sp
   11690:	andeq	r1, r1, r0, asr #26
   11694:	andeq	r1, r1, r0, asr #26
   11698:	andeq	r1, r1, r0, asr #26
   1169c:	andeq	r1, r1, r0, asr #26
   116a0:	andeq	r1, r1, r0, asr #26
   116a4:	andeq	r1, r1, r0, asr #26
   116a8:	andeq	r1, r1, r0, asr #26
   116ac:	andeq	r1, r1, r0, asr #26
   116b0:	andeq	r1, r1, r0, asr #26
   116b4:	andeq	r1, r1, r0, asr #26
   116b8:	andeq	r1, r1, r0, asr #26
   116bc:	andeq	r1, r1, r0, asr #26
   116c0:	andeq	r1, r1, r0, asr #26
   116c4:	muleq	r1, ip, r7
   116c8:	andeq	r1, r1, r0, asr #26
   116cc:	andeq	r1, r1, r0, asr #26
   116d0:	andeq	r1, r1, r0, asr #26
   116d4:	andeq	r1, r1, r0, asr #26
   116d8:	andeq	r1, r1, r0, asr #26
   116dc:	andeq	r1, r1, r0, asr #26
   116e0:	andeq	r1, r1, r0, asr #26
   116e4:	andeq	r1, r1, r0, asr #26
   116e8:	andeq	r1, r1, r0, asr #26
   116ec:	andeq	r1, r1, r0, asr #26
   116f0:	muleq	r1, r0, r7
   116f4:	andeq	r1, r1, r8, lsl #15
   116f8:	andeq	r1, r1, r0, asr #26
   116fc:	andeq	r1, r1, r0, asr #26
   11700:	andeq	r1, r1, r0, lsl #15
   11704:	andeq	r1, r1, r4, ror r7
   11708:	andeq	r1, r1, r0, asr #26
   1170c:	andeq	r1, r1, r0, lsr sp
   11710:	andeq	r1, r1, r8, ror #14
   11714:	andeq	r1, r1, r0, ror #14
   11718:	andeq	r1, r1, r0, asr #26
   1171c:	andeq	r1, r1, r0, asr #26
   11720:	andeq	r1, r1, r0, asr #26
   11724:	andeq	r1, r1, r0, asr #26
   11728:	andeq	r1, r1, r0, asr #26
   1172c:	andeq	r1, r1, r4, asr r7
   11730:	andeq	r1, r1, r0, asr #26
   11734:	andeq	r1, r1, r0, asr #26
   11738:	andeq	r1, r1, r8, asr #14
   1173c:	andeq	r1, r1, r0, asr #26
   11740:	andeq	r1, r1, r0, asr #26
   11744:	muleq	r1, ip, r7
   11748:	mov	r3, #1
   1174c:	str	r3, [r7, #36]	; 0x24
   11750:	b	11540 <__assert_fail@plt+0x9c>
   11754:	mov	r3, #1
   11758:	str	r3, [r7, #44]	; 0x2c
   1175c:	b	11540 <__assert_fail@plt+0x9c>
   11760:	ldr	sl, [r8]
   11764:	b	11540 <__assert_fail@plt+0x9c>
   11768:	mov	r3, #1
   1176c:	str	r3, [r7, #48]	; 0x30
   11770:	b	11540 <__assert_fail@plt+0x9c>
   11774:	mov	r3, #1
   11778:	str	r3, [r7, #40]	; 0x28
   1177c:	b	11540 <__assert_fail@plt+0x9c>
   11780:	ldr	r9, [r8]
   11784:	b	11540 <__assert_fail@plt+0x9c>
   11788:	ldr	fp, [r8]
   1178c:	b	11540 <__assert_fail@plt+0x9c>
   11790:	mov	r3, #1
   11794:	str	r3, [r7, #28]
   11798:	b	11540 <__assert_fail@plt+0x9c>
   1179c:	ldr	r0, [pc, #1616]	; 11df4 <__assert_fail@plt+0x950>
   117a0:	bl	12e9c <__assert_fail@plt+0x19f8>
   117a4:	b	11540 <__assert_fail@plt+0x9c>
   117a8:	ldr	r0, [r8]
   117ac:	mov	r3, #1
   117b0:	cmp	r0, #0
   117b4:	str	r3, [r7, #32]
   117b8:	beq	11540 <__assert_fail@plt+0x9c>
   117bc:	bl	11120 <cplus_demangle_name_to_style@plt>
   117c0:	cmp	r0, #0
   117c4:	beq	11dac <__assert_fail@plt+0x908>
   117c8:	bl	111b0 <cplus_demangle_set_style@plt>
   117cc:	b	11540 <__assert_fail@plt+0x9c>
   117d0:	ldr	r1, [pc, #1568]	; 11df8 <__assert_fail@plt+0x954>
   117d4:	ldr	r3, [pc, #1568]	; 11dfc <__assert_fail@plt+0x958>
   117d8:	cmp	r9, #0
   117dc:	ldr	r1, [r1]
   117e0:	moveq	r9, r3
   117e4:	ldr	r2, [sp, #24]
   117e8:	ldr	r3, [sp, #28]
   117ec:	ldr	r4, [pc, #1532]	; 11df0 <__assert_fail@plt+0x94c>
   117f0:	sub	r3, r3, r1
   117f4:	add	r2, r2, r1, lsl #2
   117f8:	mov	r0, r9
   117fc:	strd	r2, [r4, #52]	; 0x34
   11800:	bl	12b1c <__assert_fail@plt+0x1678>
   11804:	cmp	r0, #1
   11808:	sbcs	r3, r1, #0
   1180c:	blt	11ca8 <__assert_fail@plt+0x804>
   11810:	mov	r1, fp
   11814:	mov	r0, r9
   11818:	bl	111c8 <bfd_openr@plt>
   1181c:	subs	fp, r0, #0
   11820:	beq	11d68 <__assert_fail@plt+0x8c4>
   11824:	ldr	r3, [fp, #40]	; 0x28
   11828:	mov	r1, #2
   1182c:	orr	r3, r3, #1048576	; 0x100000
   11830:	str	r3, [fp, #40]	; 0x28
   11834:	bl	11444 <bfd_check_format@plt>
   11838:	subs	r3, r0, #0
   1183c:	str	r3, [sp, #20]
   11840:	bne	11d50 <__assert_fail@plt+0x8ac>
   11844:	add	r2, sp, #32
   11848:	mov	r1, #1
   1184c:	mov	r0, fp
   11850:	bl	11414 <bfd_check_format_matches@plt>
   11854:	cmp	r0, #0
   11858:	beq	11d90 <__assert_fail@plt+0x8ec>
   1185c:	cmp	sl, #0
   11860:	beq	1187c <__assert_fail@plt+0x3d8>
   11864:	mov	r1, sl
   11868:	mov	r0, fp
   1186c:	bl	1127c <bfd_get_section_by_name@plt>
   11870:	subs	r3, r0, #0
   11874:	movne	sl, r3
   11878:	beq	11d78 <__assert_fail@plt+0x8d4>
   1187c:	ldr	r3, [fp, #40]	; 0x28
   11880:	tst	r3, #512	; 0x200
   11884:	beq	118f8 <__assert_fail@plt+0x454>
   11888:	ldr	r3, [fp, #4]
   1188c:	mov	r0, fp
   11890:	ldr	r3, [r3, #260]	; 0x104
   11894:	blx	r3
   11898:	cmp	r0, #0
   1189c:	beq	11cb4 <__assert_fail@plt+0x810>
   118a0:	blt	11d70 <__assert_fail@plt+0x8cc>
   118a4:	bl	11240 <xmalloc@plt>
   118a8:	ldr	r2, [fp, #4]
   118ac:	ldr	r2, [r2, #264]	; 0x108
   118b0:	mov	r3, r0
   118b4:	mov	r1, r0
   118b8:	mov	r0, fp
   118bc:	str	r3, [r4, #8]
   118c0:	blx	r2
   118c4:	cmp	r0, #0
   118c8:	blt	11d70 <__assert_fail@plt+0x8cc>
   118cc:	bne	11cf4 <__assert_fail@plt+0x850>
   118d0:	ldr	r3, [fp, #4]
   118d4:	mov	r0, fp
   118d8:	ldr	r3, [r3, #424]	; 0x1a8
   118dc:	blx	r3
   118e0:	subs	r5, r0, #0
   118e4:	bgt	11d00 <__assert_fail@plt+0x85c>
   118e8:	ldr	r0, [r4, #8]
   118ec:	bl	1118c <free@plt>
   118f0:	mov	r3, #0
   118f4:	str	r3, [r4, #8]
   118f8:	ldr	r3, [r4, #56]	; 0x38
   118fc:	ldr	r9, [pc, #1276]	; 11e00 <__assert_fail@plt+0x95c>
   11900:	str	r3, [sp, #16]
   11904:	b	11a38 <__assert_fail@plt+0x594>
   11908:	ldr	r3, [r4, #56]	; 0x38
   1190c:	cmp	r3, #0
   11910:	ble	11c7c <__assert_fail@plt+0x7d8>
   11914:	ldr	r2, [r4, #52]	; 0x34
   11918:	sub	r3, r3, #1
   1191c:	add	ip, r2, #4
   11920:	ldr	r0, [r2]
   11924:	mov	r1, #0
   11928:	mov	r2, #16
   1192c:	str	r3, [r4, #56]	; 0x38
   11930:	str	ip, [r4, #52]	; 0x34
   11934:	bl	1112c <bfd_scan_vma@plt>
   11938:	str	r0, [r4, #4]
   1193c:	ldr	r3, [fp, #4]
   11940:	ldr	r2, [r3, #4]
   11944:	cmp	r2, #5
   11948:	bne	1198c <__assert_fail@plt+0x4e8>
   1194c:	ldr	r1, [r3, #448]	; 0x1c0
   11950:	mov	r2, #1
   11954:	ldr	r0, [r4, #4]
   11958:	ldr	r3, [r1, #396]	; 0x18c
   1195c:	ldrb	r1, [r1, #469]	; 0x1d5
   11960:	ldrb	r3, [r3, #10]
   11964:	tst	r1, #1
   11968:	sub	r3, r3, #1
   1196c:	lsl	r2, r2, r3
   11970:	lsl	r3, r2, #1
   11974:	sub	r3, r3, #1
   11978:	and	r3, r3, r0
   1197c:	str	r3, [r4, #4]
   11980:	eorne	r3, r3, r2
   11984:	subne	r3, r3, r2
   11988:	strne	r3, [r4, #4]
   1198c:	ldr	r3, [r4, #28]
   11990:	ldr	r8, [pc, #1132]	; 11e04 <__assert_fail@plt+0x960>
   11994:	cmp	r3, #0
   11998:	bne	11a78 <__assert_fail@plt+0x5d4>
   1199c:	mov	r3, #0
   119a0:	cmp	sl, #0
   119a4:	str	r3, [r4]
   119a8:	beq	11ab4 <__assert_fail@plt+0x610>
   119ac:	ldr	r3, [sl, #20]
   119b0:	tst	r3, #1
   119b4:	beq	11a08 <__assert_fail@plt+0x564>
   119b8:	ldr	r3, [r4, #4]
   119bc:	ldr	r2, [sl, #36]	; 0x24
   119c0:	cmp	r2, r3
   119c4:	bls	11a08 <__assert_fail@plt+0x564>
   119c8:	ldr	r2, [pc, #1080]	; 11e08 <__assert_fail@plt+0x964>
   119cc:	ldr	r1, [fp, #4]
   119d0:	add	r0, r2, #4
   119d4:	stm	sp, {r0, r2}
   119d8:	sub	r2, r2, #8
   119dc:	str	r2, [sp, #12]
   119e0:	add	r2, r2, #4
   119e4:	str	r2, [sp, #8]
   119e8:	mov	r0, fp
   119ec:	ldr	r5, [r1, #296]	; 0x128
   119f0:	mov	r2, sl
   119f4:	ldr	r1, [r4, #8]
   119f8:	blx	r5
   119fc:	cmp	r0, #0
   11a00:	str	r0, [r4]
   11a04:	bne	11ad0 <__assert_fail@plt+0x62c>
   11a08:	ldr	r3, [r4, #40]	; 0x28
   11a0c:	cmp	r3, #0
   11a10:	beq	11a28 <__assert_fail@plt+0x584>
   11a14:	ldr	r3, [r4, #44]	; 0x2c
   11a18:	cmp	r3, #0
   11a1c:	beq	11c64 <__assert_fail@plt+0x7c0>
   11a20:	ldr	r0, [pc, #996]	; 11e0c <__assert_fail@plt+0x968>
   11a24:	bl	11150 <printf@plt>
   11a28:	ldr	r0, [pc, #992]	; 11e10 <__assert_fail@plt+0x96c>
   11a2c:	bl	112b8 <puts@plt>
   11a30:	ldr	r0, [r8]
   11a34:	bl	1115c <fflush@plt>
   11a38:	ldr	r3, [sp, #16]
   11a3c:	cmp	r3, #0
   11a40:	bne	11908 <__assert_fail@plt+0x464>
   11a44:	ldr	r3, [pc, #968]	; 11e14 <__assert_fail@plt+0x970>
   11a48:	add	r0, sp, #36	; 0x24
   11a4c:	mov	r1, #100	; 0x64
   11a50:	ldr	r2, [r3]
   11a54:	bl	11198 <fgets@plt>
   11a58:	cmp	r0, #0
   11a5c:	beq	11c7c <__assert_fail@plt+0x7d8>
   11a60:	add	r0, sp, #36	; 0x24
   11a64:	mov	r2, #16
   11a68:	ldr	r1, [sp, #16]
   11a6c:	bl	1112c <bfd_scan_vma@plt>
   11a70:	str	r0, [r4, #4]
   11a74:	b	1193c <__assert_fail@plt+0x498>
   11a78:	ldr	r0, [pc, #920]	; 11e18 <__assert_fail@plt+0x974>
   11a7c:	bl	11150 <printf@plt>
   11a80:	ldr	r1, [r8]
   11a84:	ldr	r2, [r4, #4]
   11a88:	mov	r0, fp
   11a8c:	bl	11450 <bfd_fprintf_vma@plt>
   11a90:	ldr	r3, [r4, #44]	; 0x2c
   11a94:	cmp	r3, #0
   11a98:	beq	11c70 <__assert_fail@plt+0x7cc>
   11a9c:	ldr	r0, [pc, #888]	; 11e1c <__assert_fail@plt+0x978>
   11aa0:	bl	11150 <printf@plt>
   11aa4:	mov	r3, #0
   11aa8:	cmp	sl, #0
   11aac:	str	r3, [r4]
   11ab0:	bne	119ac <__assert_fail@plt+0x508>
   11ab4:	mov	r0, fp
   11ab8:	mov	r2, sl
   11abc:	ldr	r1, [pc, #860]	; 11e20 <__assert_fail@plt+0x97c>
   11ac0:	bl	1145c <bfd_map_over_sections@plt>
   11ac4:	ldr	r0, [r4]
   11ac8:	cmp	r0, #0
   11acc:	beq	11a08 <__assert_fail@plt+0x564>
   11ad0:	ldr	r7, [pc, #844]	; 11e24 <__assert_fail@plt+0x980>
   11ad4:	ldr	r6, [pc, #844]	; 11e28 <__assert_fail@plt+0x984>
   11ad8:	ldr	r3, [r4, #40]	; 0x28
   11adc:	cmp	r3, #0
   11ae0:	beq	11b48 <__assert_fail@plt+0x6a4>
   11ae4:	ldr	r5, [r4, #20]
   11ae8:	cmp	r5, #0
   11aec:	beq	11c28 <__assert_fail@plt+0x784>
   11af0:	ldrb	r3, [r5]
   11af4:	cmp	r3, #0
   11af8:	beq	11c24 <__assert_fail@plt+0x780>
   11afc:	ldr	r3, [r4, #32]
   11b00:	cmp	r3, #0
   11b04:	bne	11c44 <__assert_fail@plt+0x7a0>
   11b08:	mov	r1, r5
   11b0c:	mov	r5, #0
   11b10:	mov	r0, r7
   11b14:	bl	11150 <printf@plt>
   11b18:	ldr	r3, [r4, #44]	; 0x2c
   11b1c:	cmp	r3, #0
   11b20:	beq	11c38 <__assert_fail@plt+0x794>
   11b24:	mov	r2, #5
   11b28:	ldr	r1, [pc, #764]	; 11e2c <__assert_fail@plt+0x988>
   11b2c:	mov	r0, #0
   11b30:	bl	111ec <dcgettext@plt>
   11b34:	bl	11150 <printf@plt>
   11b38:	cmp	r5, #0
   11b3c:	beq	11b48 <__assert_fail@plt+0x6a4>
   11b40:	mov	r0, r5
   11b44:	bl	1118c <free@plt>
   11b48:	ldr	r3, [r4, #36]	; 0x24
   11b4c:	ldr	r5, [r4, #24]
   11b50:	cmp	r3, #0
   11b54:	beq	11b7c <__assert_fail@plt+0x6d8>
   11b58:	cmp	r5, #0
   11b5c:	beq	11c30 <__assert_fail@plt+0x78c>
   11b60:	mov	r1, #47	; 0x2f
   11b64:	mov	r0, r5
   11b68:	bl	113b4 <strrchr@plt>
   11b6c:	cmp	r0, #0
   11b70:	beq	11b84 <__assert_fail@plt+0x6e0>
   11b74:	add	r5, r0, #1
   11b78:	str	r5, [r4, #24]
   11b7c:	cmp	r5, #0
   11b80:	beq	11c30 <__assert_fail@plt+0x78c>
   11b84:	mov	r1, r5
   11b88:	mov	r0, r6
   11b8c:	bl	11150 <printf@plt>
   11b90:	ldr	r1, [r4, #16]
   11b94:	cmp	r1, #0
   11b98:	beq	11c18 <__assert_fail@plt+0x774>
   11b9c:	ldr	r2, [r4, #12]
   11ba0:	cmp	r2, #0
   11ba4:	beq	11c0c <__assert_fail@plt+0x768>
   11ba8:	ldr	r0, [pc, #640]	; 11e30 <__assert_fail@plt+0x98c>
   11bac:	bl	11150 <printf@plt>
   11bb0:	ldr	r3, [r4, #48]	; 0x30
   11bb4:	cmp	r3, #0
   11bb8:	streq	r3, [r4]
   11bbc:	beq	11a30 <__assert_fail@plt+0x58c>
   11bc0:	ldr	r2, [fp, #4]
   11bc4:	ldr	r3, [pc, #616]	; 11e34 <__assert_fail@plt+0x990>
   11bc8:	mov	r0, fp
   11bcc:	ldr	r5, [r2, #304]	; 0x130
   11bd0:	add	r1, r3, #8
   11bd4:	add	r2, r3, #4
   11bd8:	blx	r5
   11bdc:	cmp	r0, #0
   11be0:	str	r0, [r4]
   11be4:	beq	11a30 <__assert_fail@plt+0x58c>
   11be8:	ldr	r3, [r4, #44]	; 0x2c
   11bec:	cmp	r3, #0
   11bf0:	beq	11ad8 <__assert_fail@plt+0x634>
   11bf4:	mov	r2, #5
   11bf8:	ldr	r1, [pc, #568]	; 11e38 <__assert_fail@plt+0x994>
   11bfc:	mov	r0, #0
   11c00:	bl	111ec <dcgettext@plt>
   11c04:	bl	11150 <printf@plt>
   11c08:	b	11ad8 <__assert_fail@plt+0x634>
   11c0c:	ldr	r0, [pc, #552]	; 11e3c <__assert_fail@plt+0x998>
   11c10:	bl	11150 <printf@plt>
   11c14:	b	11bb0 <__assert_fail@plt+0x70c>
   11c18:	ldr	r0, [pc, #544]	; 11e40 <__assert_fail@plt+0x99c>
   11c1c:	bl	112b8 <puts@plt>
   11c20:	b	11bb0 <__assert_fail@plt+0x70c>
   11c24:	mov	r5, r3
   11c28:	mov	r1, r9
   11c2c:	b	11b10 <__assert_fail@plt+0x66c>
   11c30:	mov	r5, r9
   11c34:	b	11b84 <__assert_fail@plt+0x6e0>
   11c38:	mov	r0, #10
   11c3c:	bl	11360 <putchar@plt>
   11c40:	b	11b38 <__assert_fail@plt+0x694>
   11c44:	mov	r1, r5
   11c48:	mov	r2, #3
   11c4c:	mov	r0, fp
   11c50:	bl	1139c <bfd_demangle@plt>
   11c54:	subs	r1, r0, #0
   11c58:	movne	r5, r1
   11c5c:	bne	11b10 <__assert_fail@plt+0x66c>
   11c60:	b	11b08 <__assert_fail@plt+0x664>
   11c64:	mov	r0, r9
   11c68:	bl	112b8 <puts@plt>
   11c6c:	b	11a28 <__assert_fail@plt+0x584>
   11c70:	mov	r0, #10
   11c74:	bl	11360 <putchar@plt>
   11c78:	b	1199c <__assert_fail@plt+0x4f8>
   11c7c:	ldr	r0, [r4, #8]
   11c80:	cmp	r0, #0
   11c84:	beq	11c94 <__assert_fail@plt+0x7f0>
   11c88:	bl	1118c <free@plt>
   11c8c:	mov	r3, #0
   11c90:	str	r3, [r4, #8]
   11c94:	mov	r0, fp
   11c98:	bl	113e4 <bfd_close@plt>
   11c9c:	ldr	r0, [sp, #20]
   11ca0:	add	sp, sp, #140	; 0x8c
   11ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ca8:	mov	r3, #1
   11cac:	str	r3, [sp, #20]
   11cb0:	b	11c9c <__assert_fail@plt+0x7f8>
   11cb4:	ldr	r3, [fp, #4]
   11cb8:	mov	r0, fp
   11cbc:	ldr	r3, [r3, #424]	; 0x1a8
   11cc0:	blx	r3
   11cc4:	cmp	r0, #0
   11cc8:	blt	11d70 <__assert_fail@plt+0x8cc>
   11ccc:	bl	11240 <xmalloc@plt>
   11cd0:	ldr	r2, [fp, #4]
   11cd4:	ldr	r2, [r2, #428]	; 0x1ac
   11cd8:	mov	r3, r0
   11cdc:	mov	r1, r0
   11ce0:	mov	r0, fp
   11ce4:	str	r3, [r4, #8]
   11ce8:	blx	r2
   11cec:	cmp	r0, #0
   11cf0:	blt	11d70 <__assert_fail@plt+0x8cc>
   11cf4:	cmp	r0, #0
   11cf8:	bgt	118f8 <__assert_fail@plt+0x454>
   11cfc:	b	118e8 <__assert_fail@plt+0x444>
   11d00:	ldr	r0, [r4, #8]
   11d04:	bl	1118c <free@plt>
   11d08:	mov	r0, r5
   11d0c:	bl	11240 <xmalloc@plt>
   11d10:	ldr	r2, [fp, #4]
   11d14:	ldr	r2, [r2, #428]	; 0x1ac
   11d18:	mov	r3, r0
   11d1c:	mov	r1, r0
   11d20:	mov	r0, fp
   11d24:	str	r3, [r4, #8]
   11d28:	blx	r2
   11d2c:	b	11cf4 <__assert_fail@plt+0x850>
   11d30:	ldr	r3, [pc, #204]	; 11e04 <__assert_fail@plt+0x960>
   11d34:	mov	r1, #0
   11d38:	ldr	r0, [r3]
   11d3c:	bl	11f44 <__assert_fail@plt+0xaa0>
   11d40:	ldr	r3, [pc, #252]	; 11e44 <__assert_fail@plt+0x9a0>
   11d44:	mov	r1, #1
   11d48:	ldr	r0, [r3]
   11d4c:	bl	11f44 <__assert_fail@plt+0xaa0>
   11d50:	ldr	r1, [pc, #240]	; 11e48 <__assert_fail@plt+0x9a4>
   11d54:	mov	r2, #5
   11d58:	mov	r0, #0
   11d5c:	bl	111ec <dcgettext@plt>
   11d60:	mov	r1, r9
   11d64:	bl	12414 <__assert_fail@plt+0xf70>
   11d68:	mov	r0, r9
   11d6c:	bl	123a4 <__assert_fail@plt+0xf00>
   11d70:	ldr	r0, [fp]
   11d74:	bl	123a4 <__assert_fail@plt+0xf00>
   11d78:	mov	r2, #5
   11d7c:	ldr	r1, [pc, #200]	; 11e4c <__assert_fail@plt+0x9a8>
   11d80:	bl	111ec <dcgettext@plt>
   11d84:	mov	r2, sl
   11d88:	mov	r1, r9
   11d8c:	bl	12414 <__assert_fail@plt+0xf70>
   11d90:	ldr	r0, [fp]
   11d94:	bl	12170 <__assert_fail@plt+0xccc>
   11d98:	bl	11228 <bfd_get_error@plt>
   11d9c:	cmp	r0, #13
   11da0:	beq	11dc0 <__assert_fail@plt+0x91c>
   11da4:	mov	r0, #1
   11da8:	bl	113d8 <xexit@plt>
   11dac:	ldr	r1, [pc, #156]	; 11e50 <__assert_fail@plt+0x9ac>
   11db0:	mov	r2, #5
   11db4:	bl	111ec <dcgettext@plt>
   11db8:	ldr	r1, [r8]
   11dbc:	bl	12414 <__assert_fail@plt+0xf70>
   11dc0:	ldr	r0, [sp, #32]
   11dc4:	bl	124b0 <__assert_fail@plt+0x100c>
   11dc8:	ldr	r0, [sp, #32]
   11dcc:	bl	1118c <free@plt>
   11dd0:	b	11da4 <__assert_fail@plt+0x900>
   11dd4:	andeq	r5, r2, r8, ror r2
   11dd8:	andeq	r3, r1, r8, asr lr
   11ddc:	andeq	r3, r1, r4, lsr #29
   11de0:			; <UNDEFINED> instruction: 0x00013eb8
   11de4:	andeq	r5, r2, r0, asr r1
   11de8:	andeq	r5, r2, r8, lsr #4
   11dec:	strdeq	r3, [r1], -r0
   11df0:	andeq	r5, r2, r0, lsr r2
   11df4:	andeq	r3, r1, r4, ror #29
   11df8:	andeq	r5, r2, r0, lsl r2
   11dfc:	muleq	r1, r8, lr
   11e00:	andeq	r3, r1, r0, lsr #29
   11e04:	andeq	r5, r2, r4, lsr #4
   11e08:	andeq	r5, r2, r4, asr #4
   11e0c:	andeq	r3, r1, r0, asr pc
   11e10:	andeq	r3, r1, r4, asr pc
   11e14:	andeq	r5, r2, r0, lsr #4
   11e18:	andeq	r3, r1, r8, asr #30
   11e1c:	andeq	r3, r1, ip, asr #30
   11e20:	andeq	r2, r1, r4, lsr #32
   11e24:	andeq	r4, r1, r0, lsl r2
   11e28:	andeq	r3, r1, r4, ror #30
   11e2c:	andeq	r3, r1, ip, asr pc
   11e30:	andeq	r3, r1, r8, ror #30
   11e34:	andeq	r5, r2, r0, asr #4
   11e38:	andeq	r3, r1, r8, lsl #31
   11e3c:	andeq	r3, r1, r0, lsl #31
   11e40:	andeq	r3, r1, r4, lsl #31
   11e44:	andeq	r5, r2, r8, lsl r2
   11e48:	andeq	r3, r1, r4, lsl #30
   11e4c:	andeq	r3, r1, ip, lsr #30
   11e50:	andeq	r3, r1, r4, asr #29
   11e54:	mov	fp, #0
   11e58:	mov	lr, #0
   11e5c:	pop	{r1}		; (ldr r1, [sp], #4)
   11e60:	mov	r2, sp
   11e64:	push	{r2}		; (str r2, [sp, #-4]!)
   11e68:	push	{r0}		; (str r0, [sp, #-4]!)
   11e6c:	ldr	ip, [pc, #16]	; 11e84 <__assert_fail@plt+0x9e0>
   11e70:	push	{ip}		; (str ip, [sp, #-4]!)
   11e74:	ldr	r0, [pc, #12]	; 11e88 <__assert_fail@plt+0x9e4>
   11e78:	ldr	r3, [pc, #12]	; 11e8c <__assert_fail@plt+0x9e8>
   11e7c:	bl	112c4 <__libc_start_main@plt>
   11e80:	bl	1148c <abort@plt>
   11e84:	strdeq	r3, [r1], -ip
   11e88:			; <UNDEFINED> instruction: 0x000114b0
   11e8c:	muleq	r1, ip, sl
   11e90:	ldr	r3, [pc, #20]	; 11eac <__assert_fail@plt+0xa08>
   11e94:	ldr	r2, [pc, #20]	; 11eb0 <__assert_fail@plt+0xa0c>
   11e98:	add	r3, pc, r3
   11e9c:	ldr	r2, [r3, r2]
   11ea0:	cmp	r2, #0
   11ea4:	bxeq	lr
   11ea8:	b	112dc <__gmon_start__@plt>
   11eac:	andeq	r3, r1, r0, ror #2
   11eb0:	andeq	r0, r0, r4, asr #2
   11eb4:	ldr	r0, [pc, #24]	; 11ed4 <__assert_fail@plt+0xa30>
   11eb8:	ldr	r3, [pc, #24]	; 11ed8 <__assert_fail@plt+0xa34>
   11ebc:	cmp	r3, r0
   11ec0:	bxeq	lr
   11ec4:	ldr	r3, [pc, #16]	; 11edc <__assert_fail@plt+0xa38>
   11ec8:	cmp	r3, #0
   11ecc:	bxeq	lr
   11ed0:	bx	r3
   11ed4:	andeq	r5, r2, r0, lsl r2
   11ed8:	andeq	r5, r2, r0, lsl r2
   11edc:	andeq	r0, r0, r0
   11ee0:	ldr	r0, [pc, #36]	; 11f0c <__assert_fail@plt+0xa68>
   11ee4:	ldr	r1, [pc, #36]	; 11f10 <__assert_fail@plt+0xa6c>
   11ee8:	sub	r1, r1, r0
   11eec:	asr	r1, r1, #2
   11ef0:	add	r1, r1, r1, lsr #31
   11ef4:	asrs	r1, r1, #1
   11ef8:	bxeq	lr
   11efc:	ldr	r3, [pc, #16]	; 11f14 <__assert_fail@plt+0xa70>
   11f00:	cmp	r3, #0
   11f04:	bxeq	lr
   11f08:	bx	r3
   11f0c:	andeq	r5, r2, r0, lsl r2
   11f10:	andeq	r5, r2, r0, lsl r2
   11f14:	andeq	r0, r0, r0
   11f18:	push	{r4, lr}
   11f1c:	ldr	r4, [pc, #24]	; 11f3c <__assert_fail@plt+0xa98>
   11f20:	ldrb	r3, [r4]
   11f24:	cmp	r3, #0
   11f28:	popne	{r4, pc}
   11f2c:	bl	11eb4 <__assert_fail@plt+0xa10>
   11f30:	mov	r3, #1
   11f34:	strb	r3, [r4]
   11f38:	pop	{r4, pc}
   11f3c:	andeq	r5, r2, ip, lsr #4
   11f40:	b	11ee0 <__assert_fail@plt+0xa3c>
   11f44:	push	{r4, lr}
   11f48:	mov	r5, r1
   11f4c:	mov	r4, r0
   11f50:	mov	r2, #5
   11f54:	ldr	r1, [pc, #172]	; 12008 <__assert_fail@plt+0xb64>
   11f58:	mov	r0, #0
   11f5c:	bl	111ec <dcgettext@plt>
   11f60:	ldr	r6, [pc, #164]	; 1200c <__assert_fail@plt+0xb68>
   11f64:	ldr	r2, [r6]
   11f68:	mov	r1, r0
   11f6c:	mov	r0, r4
   11f70:	bl	11324 <fprintf@plt>
   11f74:	mov	r2, #5
   11f78:	ldr	r1, [pc, #144]	; 12010 <__assert_fail@plt+0xb6c>
   11f7c:	mov	r0, #0
   11f80:	bl	111ec <dcgettext@plt>
   11f84:	mov	r1, r0
   11f88:	mov	r0, r4
   11f8c:	bl	11324 <fprintf@plt>
   11f90:	mov	r2, #5
   11f94:	ldr	r1, [pc, #120]	; 12014 <__assert_fail@plt+0xb70>
   11f98:	mov	r0, #0
   11f9c:	bl	111ec <dcgettext@plt>
   11fa0:	mov	r1, r0
   11fa4:	mov	r0, r4
   11fa8:	bl	11324 <fprintf@plt>
   11fac:	mov	r2, #5
   11fb0:	ldr	r1, [pc, #96]	; 12018 <__assert_fail@plt+0xb74>
   11fb4:	mov	r0, #0
   11fb8:	bl	111ec <dcgettext@plt>
   11fbc:	mov	r1, r0
   11fc0:	mov	r0, r4
   11fc4:	bl	11324 <fprintf@plt>
   11fc8:	mov	r1, r4
   11fcc:	ldr	r0, [r6]
   11fd0:	bl	1253c <__assert_fail@plt+0x1098>
   11fd4:	cmp	r5, #0
   11fd8:	beq	11fe4 <__assert_fail@plt+0xb40>
   11fdc:	mov	r0, r5
   11fe0:	bl	11300 <exit@plt>
   11fe4:	mov	r2, #5
   11fe8:	ldr	r1, [pc, #44]	; 1201c <__assert_fail@plt+0xb78>
   11fec:	mov	r0, r5
   11ff0:	bl	111ec <dcgettext@plt>
   11ff4:	ldr	r2, [pc, #36]	; 12020 <__assert_fail@plt+0xb7c>
   11ff8:	mov	r1, r0
   11ffc:	mov	r0, r4
   12000:	bl	11324 <fprintf@plt>
   12004:	b	11fdc <__assert_fail@plt+0xb38>
   12008:	andeq	r3, r1, ip, lsl #22
   1200c:	andeq	r5, r2, r8, ror r2
   12010:	andeq	r3, r1, r0, lsr fp
   12014:	andeq	r3, r1, r8, ror #22
   12018:			; <UNDEFINED> instruction: 0x00013bbc
   1201c:	andeq	r3, r1, ip, asr lr
   12020:	andeq	r3, r1, r0, ror lr
   12024:	push	{r4, r5, lr}
   12028:	sub	sp, sp, #20
   1202c:	ldr	r4, [pc, #116]	; 120a8 <__assert_fail@plt+0xc04>
   12030:	ldr	r3, [r4]
   12034:	cmp	r3, #0
   12038:	bne	120a0 <__assert_fail@plt+0xbfc>
   1203c:	ldr	r3, [r1, #20]
   12040:	tst	r3, #1
   12044:	beq	120a0 <__assert_fail@plt+0xbfc>
   12048:	ldr	r3, [r1, #28]
   1204c:	ldr	lr, [r4, #4]
   12050:	cmp	r3, lr
   12054:	bhi	120a0 <__assert_fail@plt+0xbfc>
   12058:	ldr	ip, [r1, #36]	; 0x24
   1205c:	add	ip, r3, ip
   12060:	cmp	lr, ip
   12064:	bcs	120a0 <__assert_fail@plt+0xbfc>
   12068:	ldr	ip, [r0, #4]
   1206c:	mov	r2, r1
   12070:	add	r1, r4, #16
   12074:	str	r1, [sp, #8]
   12078:	sub	r3, lr, r3
   1207c:	add	r1, r4, #24
   12080:	add	lr, r4, #20
   12084:	add	r5, r4, #12
   12088:	stm	sp, {r1, lr}
   1208c:	str	r5, [sp, #12]
   12090:	ldr	r1, [r4, #8]
   12094:	ldr	r5, [ip, #296]	; 0x128
   12098:	blx	r5
   1209c:	str	r0, [r4]
   120a0:	add	sp, sp, #20
   120a4:	pop	{r4, r5, pc}
   120a8:	andeq	r5, r2, r0, lsr r2
   120ac:	push	{r4, r5, r6, lr}
   120b0:	mov	r1, #47	; 0x2f
   120b4:	mov	r6, r0
   120b8:	bl	113b4 <strrchr@plt>
   120bc:	cmp	r0, #0
   120c0:	beq	12110 <__assert_fail@plt+0xc6c>
   120c4:	sub	r4, r0, r6
   120c8:	add	r0, r4, #11
   120cc:	bl	11240 <xmalloc@plt>
   120d0:	mov	r2, r4
   120d4:	mov	r1, r6
   120d8:	mov	r5, r0
   120dc:	bl	111bc <memcpy@plt>
   120e0:	add	r2, r4, #1
   120e4:	add	r2, r5, r2
   120e8:	mov	r3, #47	; 0x2f
   120ec:	strb	r3, [r5, r4]
   120f0:	ldr	r3, [pc, #44]	; 12124 <__assert_fail@plt+0xc80>
   120f4:	ldm	r3!, {r0, r1}
   120f8:	ldrb	r3, [r3]
   120fc:	str	r0, [r2]
   12100:	str	r1, [r2, #4]
   12104:	strb	r3, [r2, #8]
   12108:	mov	r0, r5
   1210c:	pop	{r4, r5, r6, pc}
   12110:	mov	r0, #9
   12114:	bl	11240 <xmalloc@plt>
   12118:	mov	r5, r0
   1211c:	mov	r2, r0
   12120:	b	120f0 <__assert_fail@plt+0xc4c>
   12124:	andeq	r4, r1, r0, lsr #32
   12128:	subs	r3, r0, #0
   1212c:	beq	12148 <__assert_fail@plt+0xca4>
   12130:	cmp	r3, #1
   12134:	beq	12154 <__assert_fail@plt+0xcb0>
   12138:	mov	r2, #5
   1213c:	ldr	r1, [pc, #32]	; 12164 <__assert_fail@plt+0xcc0>
   12140:	mov	r0, #0
   12144:	b	111ec <dcgettext@plt>
   12148:	mov	r2, #5
   1214c:	ldr	r1, [pc, #20]	; 12168 <__assert_fail@plt+0xcc4>
   12150:	b	111ec <dcgettext@plt>
   12154:	mov	r2, #5
   12158:	ldr	r1, [pc, #12]	; 1216c <__assert_fail@plt+0xcc8>
   1215c:	mov	r0, #0
   12160:	b	111ec <dcgettext@plt>
   12164:	andeq	r4, r1, r8, asr #32
   12168:	andeq	r4, r1, ip, lsr #32
   1216c:	andeq	r4, r1, r8, lsr r0
   12170:	push	{r4, r5, lr}
   12174:	sub	sp, sp, #12
   12178:	mov	r4, r0
   1217c:	bl	11228 <bfd_get_error@plt>
   12180:	bl	1142c <bfd_errmsg@plt>
   12184:	ldr	r3, [pc, #84]	; 121e0 <__assert_fail@plt+0xd3c>
   12188:	mov	r5, r0
   1218c:	ldr	r0, [r3]
   12190:	bl	1115c <fflush@plt>
   12194:	cmp	r4, #0
   12198:	ldr	r2, [pc, #68]	; 121e4 <__assert_fail@plt+0xd40>
   1219c:	ldr	r1, [pc, #68]	; 121e8 <__assert_fail@plt+0xd44>
   121a0:	beq	121c4 <__assert_fail@plt+0xd20>
   121a4:	str	r5, [sp]
   121a8:	mov	r3, r4
   121ac:	ldr	r2, [r2]
   121b0:	ldr	r0, [r1]
   121b4:	ldr	r1, [pc, #48]	; 121ec <__assert_fail@plt+0xd48>
   121b8:	bl	11324 <fprintf@plt>
   121bc:	add	sp, sp, #12
   121c0:	pop	{r4, r5, pc}
   121c4:	ldr	r0, [r1]
   121c8:	mov	r3, r5
   121cc:	ldr	r2, [r2]
   121d0:	ldr	r1, [pc, #24]	; 121f0 <__assert_fail@plt+0xd4c>
   121d4:	add	sp, sp, #12
   121d8:	pop	{r4, r5, lr}
   121dc:	b	11324 <fprintf@plt>
   121e0:	andeq	r5, r2, r4, lsr #4
   121e4:	andeq	r5, r2, r8, ror r2
   121e8:	andeq	r5, r2, r8, lsl r2
   121ec:	andeq	r4, r1, ip, asr r0
   121f0:	andeq	r4, r1, r0, rrx
   121f4:	ldr	r3, [r1, #8]
   121f8:	push	{r4, r5, r6, r7, r8, lr}
   121fc:	add	r3, r3, #1
   12200:	mov	r6, r1
   12204:	mov	r4, r0
   12208:	str	r3, [r1, #8]
   1220c:	ldr	r0, [r1, #12]
   12210:	add	r1, r3, r3, lsl #1
   12214:	rsb	r1, r3, r1, lsl #3
   12218:	lsl	r2, r1, #2
   1221c:	cmp	r0, r2
   12220:	bcs	12268 <__assert_fail@plt+0xdc4>
   12224:	cmp	r3, #63	; 0x3f
   12228:	lslgt	r5, r1, #3
   1222c:	movle	r5, #11776	; 0x2e00
   12230:	mov	r1, r5
   12234:	ldr	r0, [r6, #16]
   12238:	bl	11204 <xrealloc@plt>
   1223c:	ldr	r2, [r6, #12]
   12240:	mov	r1, #0
   12244:	str	r0, [r6, #16]
   12248:	add	r0, r0, r2
   1224c:	sub	r2, r5, r2
   12250:	bl	11354 <memset@plt>
   12254:	ldr	r3, [r6, #8]
   12258:	str	r5, [r6, #12]
   1225c:	add	r2, r3, r3, lsl #1
   12260:	rsb	r3, r3, r2, lsl #3
   12264:	lsl	r2, r3, #2
   12268:	ldr	r3, [r6, #16]
   1226c:	ldr	r1, [r4]
   12270:	add	r3, r3, r2
   12274:	mov	r0, #0
   12278:	str	r1, [r3, #-92]	; 0xffffffa4
   1227c:	mov	r2, #5
   12280:	ldr	r1, [pc, #276]	; 1239c <__assert_fail@plt+0xef8>
   12284:	bl	111ec <dcgettext@plt>
   12288:	ldr	r7, [r4]
   1228c:	mov	r5, r0
   12290:	ldr	r0, [r4, #12]
   12294:	bl	12128 <__assert_fail@plt+0xc84>
   12298:	mov	r8, r0
   1229c:	ldr	r0, [r4, #8]
   122a0:	bl	12128 <__assert_fail@plt+0xc84>
   122a4:	mov	r2, r8
   122a8:	mov	r1, r7
   122ac:	mov	r3, r0
   122b0:	mov	r0, r5
   122b4:	bl	11150 <printf@plt>
   122b8:	ldr	r1, [r4]
   122bc:	ldr	r0, [r6]
   122c0:	bl	11384 <bfd_openw@plt>
   122c4:	subs	r5, r0, #0
   122c8:	beq	12388 <__assert_fail@plt+0xee4>
   122cc:	mov	r1, #1
   122d0:	bl	112e8 <bfd_set_format@plt>
   122d4:	cmp	r0, #0
   122d8:	beq	12368 <__assert_fail@plt+0xec4>
   122dc:	ldr	r8, [pc, #188]	; 123a0 <__assert_fail@plt+0xefc>
   122e0:	mov	r4, #2
   122e4:	mov	r7, #1
   122e8:	b	122f8 <__assert_fail@plt+0xe54>
   122ec:	add	r4, r4, #1
   122f0:	cmp	r4, #89	; 0x59
   122f4:	beq	12358 <__assert_fail@plt+0xeb4>
   122f8:	ldr	r3, [r5, #4]
   122fc:	mov	r2, #0
   12300:	mov	r1, r4
   12304:	ldr	r3, [r3, #340]	; 0x154
   12308:	mov	r0, r5
   1230c:	blx	r3
   12310:	cmp	r0, #0
   12314:	beq	122ec <__assert_fail@plt+0xe48>
   12318:	mov	r1, #0
   1231c:	mov	r0, r4
   12320:	bl	11330 <bfd_printable_arch_mach@plt>
   12324:	mov	r1, r0
   12328:	mov	r0, r8
   1232c:	bl	11150 <printf@plt>
   12330:	ldr	r2, [r6, #8]
   12334:	ldr	r3, [r6, #16]
   12338:	add	r1, r2, r2, lsl #1
   1233c:	rsb	r2, r2, r1, lsl #3
   12340:	add	r3, r3, r2, lsl #2
   12344:	add	r3, r4, r3
   12348:	add	r4, r4, #1
   1234c:	cmp	r4, #89	; 0x59
   12350:	strb	r7, [r3, #-90]	; 0xffffffa6
   12354:	bne	122f8 <__assert_fail@plt+0xe54>
   12358:	mov	r0, r5
   1235c:	bl	11318 <bfd_close_all_done@plt>
   12360:	ldr	r0, [r6, #4]
   12364:	pop	{r4, r5, r6, r7, r8, pc}
   12368:	bl	11228 <bfd_get_error@plt>
   1236c:	cmp	r0, #5
   12370:	beq	12358 <__assert_fail@plt+0xeb4>
   12374:	ldr	r0, [r4]
   12378:	bl	12170 <__assert_fail@plt+0xccc>
   1237c:	mov	r3, #1
   12380:	str	r3, [r6, #4]
   12384:	b	12358 <__assert_fail@plt+0xeb4>
   12388:	ldr	r0, [r6]
   1238c:	bl	12170 <__assert_fail@plt+0xccc>
   12390:	mov	r0, #1
   12394:	str	r0, [r6, #4]
   12398:	pop	{r4, r5, r6, r7, r8, pc}
   1239c:	andeq	r4, r1, r8, rrx
   123a0:	andeq	r4, r1, r4, lsl #1
   123a4:	push	{r4, lr}
   123a8:	bl	12170 <__assert_fail@plt+0xccc>
   123ac:	mov	r0, #1
   123b0:	bl	113d8 <xexit@plt>
   123b4:	ldr	r3, [pc, #72]	; 12404 <__assert_fail@plt+0xf60>
   123b8:	push	{r4, r5, r6, lr}
   123bc:	mov	r5, r0
   123c0:	ldr	r0, [r3]
   123c4:	mov	r6, r1
   123c8:	ldr	r4, [pc, #56]	; 12408 <__assert_fail@plt+0xf64>
   123cc:	bl	1115c <fflush@plt>
   123d0:	ldr	r3, [pc, #52]	; 1240c <__assert_fail@plt+0xf68>
   123d4:	ldr	r1, [pc, #52]	; 12410 <__assert_fail@plt+0xf6c>
   123d8:	ldr	r0, [r4]
   123dc:	ldr	r2, [r3]
   123e0:	bl	11324 <fprintf@plt>
   123e4:	mov	r1, r5
   123e8:	mov	r2, r6
   123ec:	ldr	r0, [r4]
   123f0:	bl	113c0 <vfprintf@plt>
   123f4:	ldr	r1, [r4]
   123f8:	mov	r0, #10
   123fc:	pop	{r4, r5, r6, lr}
   12400:	b	11408 <putc@plt>
   12404:	andeq	r5, r2, r4, lsr #4
   12408:	andeq	r5, r2, r8, lsl r2
   1240c:	andeq	r5, r2, r8, ror r2
   12410:	andeq	r4, r1, ip, lsl #1
   12414:	push	{r0, r1, r2, r3}
   12418:	push	{lr}		; (str lr, [sp, #-4]!)
   1241c:	sub	sp, sp, #12
   12420:	add	r3, sp, #20
   12424:	ldr	r0, [sp, #16]
   12428:	mov	r1, r3
   1242c:	str	r3, [sp, #4]
   12430:	bl	123b4 <__assert_fail@plt+0xf10>
   12434:	mov	r0, #1
   12438:	bl	113d8 <xexit@plt>
   1243c:	push	{r0, r1, r2, r3}
   12440:	push	{lr}		; (str lr, [sp, #-4]!)
   12444:	sub	sp, sp, #12
   12448:	add	r3, sp, #20
   1244c:	mov	r1, r3
   12450:	ldr	r0, [sp, #16]
   12454:	str	r3, [sp, #4]
   12458:	bl	123b4 <__assert_fail@plt+0xf10>
   1245c:	add	sp, sp, #12
   12460:	pop	{lr}		; (ldr lr, [sp], #4)
   12464:	add	sp, sp, #16
   12468:	bx	lr
   1246c:	push	{r4, lr}
   12470:	ldr	r0, [pc, #48]	; 124a8 <__assert_fail@plt+0x1004>
   12474:	bl	11180 <bfd_set_default_target@plt>
   12478:	cmp	r0, #0
   1247c:	popne	{r4, pc}
   12480:	mov	r2, #5
   12484:	ldr	r1, [pc, #32]	; 124ac <__assert_fail@plt+0x1008>
   12488:	bl	111ec <dcgettext@plt>
   1248c:	mov	r4, r0
   12490:	bl	11228 <bfd_get_error@plt>
   12494:	bl	1142c <bfd_errmsg@plt>
   12498:	ldr	r1, [pc, #8]	; 124a8 <__assert_fail@plt+0x1004>
   1249c:	mov	r2, r0
   124a0:	mov	r0, r4
   124a4:	bl	12414 <__assert_fail@plt+0xf70>
   124a8:	muleq	r1, r4, r0
   124ac:	strheq	r4, [r1], -r0
   124b0:	ldr	r3, [pc, #112]	; 12528 <__assert_fail@plt+0x1084>
   124b4:	push	{r4, r5, r6, lr}
   124b8:	mov	r4, r0
   124bc:	ldr	r5, [pc, #104]	; 1252c <__assert_fail@plt+0x1088>
   124c0:	ldr	r0, [r3]
   124c4:	bl	1115c <fflush@plt>
   124c8:	mov	r2, #5
   124cc:	ldr	r1, [pc, #92]	; 12530 <__assert_fail@plt+0x108c>
   124d0:	mov	r0, #0
   124d4:	ldr	r6, [r5]
   124d8:	bl	111ec <dcgettext@plt>
   124dc:	ldr	r3, [pc, #80]	; 12534 <__assert_fail@plt+0x1090>
   124e0:	ldr	r2, [r3]
   124e4:	mov	r1, r0
   124e8:	mov	r0, r6
   124ec:	bl	11324 <fprintf@plt>
   124f0:	ldr	r2, [r4]
   124f4:	cmp	r2, #0
   124f8:	beq	12518 <__assert_fail@plt+0x1074>
   124fc:	ldr	r6, [pc, #52]	; 12538 <__assert_fail@plt+0x1094>
   12500:	mov	r1, r6
   12504:	ldr	r0, [r5]
   12508:	bl	11324 <fprintf@plt>
   1250c:	ldr	r2, [r4, #4]!
   12510:	cmp	r2, #0
   12514:	bne	12500 <__assert_fail@plt+0x105c>
   12518:	ldr	r1, [r5]
   1251c:	mov	r0, #10
   12520:	pop	{r4, r5, r6, lr}
   12524:	b	113cc <fputc@plt>
   12528:	andeq	r5, r2, r4, lsr #4
   1252c:	andeq	r5, r2, r8, lsl r2
   12530:	ldrdeq	r4, [r1], -ip
   12534:	andeq	r5, r2, r8, ror r2
   12538:	andeq	r4, r1, r0, asr r2
   1253c:	push	{r4, r5, r6, r7, r8, lr}
   12540:	subs	r4, r0, #0
   12544:	mov	r2, #5
   12548:	mov	r5, r1
   1254c:	beq	125b8 <__assert_fail@plt+0x1114>
   12550:	ldr	r1, [pc, #120]	; 125d0 <__assert_fail@plt+0x112c>
   12554:	mov	r0, #0
   12558:	bl	111ec <dcgettext@plt>
   1255c:	mov	r2, r4
   12560:	mov	r1, r0
   12564:	mov	r0, r5
   12568:	bl	11324 <fprintf@plt>
   1256c:	bl	1121c <bfd_target_list@plt>
   12570:	ldr	r2, [r0]
   12574:	mov	r7, r0
   12578:	cmp	r2, #0
   1257c:	beq	125a0 <__assert_fail@plt+0x10fc>
   12580:	ldr	r6, [pc, #76]	; 125d4 <__assert_fail@plt+0x1130>
   12584:	mov	r4, r0
   12588:	mov	r1, r6
   1258c:	mov	r0, r5
   12590:	bl	11324 <fprintf@plt>
   12594:	ldr	r2, [r4, #4]!
   12598:	cmp	r2, #0
   1259c:	bne	12588 <__assert_fail@plt+0x10e4>
   125a0:	mov	r1, r5
   125a4:	mov	r0, #10
   125a8:	bl	113cc <fputc@plt>
   125ac:	mov	r0, r7
   125b0:	pop	{r4, r5, r6, r7, r8, lr}
   125b4:	b	1118c <free@plt>
   125b8:	ldr	r1, [pc, #24]	; 125d8 <__assert_fail@plt+0x1134>
   125bc:	bl	111ec <dcgettext@plt>
   125c0:	mov	r1, r0
   125c4:	mov	r0, r5
   125c8:	bl	11324 <fprintf@plt>
   125cc:	b	1256c <__assert_fail@plt+0x10c8>
   125d0:	andeq	r4, r1, r8, lsl #2
   125d4:	andeq	r4, r1, r0, asr r2
   125d8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   125dc:	push	{r4, r5, r6, r7, r8, lr}
   125e0:	subs	r4, r0, #0
   125e4:	mov	r2, #5
   125e8:	mov	r5, r1
   125ec:	beq	12658 <__assert_fail@plt+0x11b4>
   125f0:	ldr	r1, [pc, #120]	; 12670 <__assert_fail@plt+0x11cc>
   125f4:	mov	r0, #0
   125f8:	bl	111ec <dcgettext@plt>
   125fc:	mov	r2, r4
   12600:	mov	r1, r0
   12604:	mov	r0, r5
   12608:	bl	11324 <fprintf@plt>
   1260c:	bl	11168 <bfd_arch_list@plt>
   12610:	ldr	r2, [r0]
   12614:	mov	r7, r0
   12618:	cmp	r2, #0
   1261c:	beq	12640 <__assert_fail@plt+0x119c>
   12620:	ldr	r6, [pc, #76]	; 12674 <__assert_fail@plt+0x11d0>
   12624:	mov	r4, r0
   12628:	mov	r1, r6
   1262c:	mov	r0, r5
   12630:	bl	11324 <fprintf@plt>
   12634:	ldr	r2, [r4, #4]!
   12638:	cmp	r2, #0
   1263c:	bne	12628 <__assert_fail@plt+0x1184>
   12640:	mov	r1, r5
   12644:	mov	r0, #10
   12648:	bl	113cc <fputc@plt>
   1264c:	mov	r0, r7
   12650:	pop	{r4, r5, r6, r7, r8, lr}
   12654:	b	1118c <free@plt>
   12658:	ldr	r1, [pc, #24]	; 12678 <__assert_fail@plt+0x11d4>
   1265c:	bl	111ec <dcgettext@plt>
   12660:	mov	r1, r0
   12664:	mov	r0, r5
   12668:	bl	11324 <fprintf@plt>
   1266c:	b	1260c <__assert_fail@plt+0x1168>
   12670:	andeq	r4, r1, ip, lsr r1
   12674:	andeq	r4, r1, r0, asr r2
   12678:	andeq	r4, r1, r0, lsr #2
   1267c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12680:	mov	r2, #5
   12684:	sub	sp, sp, #44	; 0x2c
   12688:	ldr	r1, [pc, #668]	; 1292c <__assert_fail@plt+0x1488>
   1268c:	mov	r0, #0
   12690:	bl	111ec <dcgettext@plt>
   12694:	ldr	r1, [pc, #660]	; 12930 <__assert_fail@plt+0x148c>
   12698:	bl	11150 <printf@plt>
   1269c:	mov	r0, #0
   126a0:	bl	13990 <__assert_fail@plt+0x24ec>
   126a4:	mov	r3, #0
   126a8:	add	r1, sp, #20
   126ac:	str	r3, [sp, #24]
   126b0:	str	r3, [sp, #28]
   126b4:	str	r3, [sp, #32]
   126b8:	str	r3, [sp, #36]	; 0x24
   126bc:	str	r0, [sp, #20]
   126c0:	ldr	r0, [pc, #620]	; 12934 <__assert_fail@plt+0x1490>
   126c4:	bl	11348 <bfd_iterate_over_targets@plt>
   126c8:	ldr	r0, [sp, #20]
   126cc:	bl	111f8 <unlink@plt>
   126d0:	ldr	r0, [sp, #20]
   126d4:	bl	1118c <free@plt>
   126d8:	ldr	r4, [sp, #24]
   126dc:	cmp	r4, #0
   126e0:	beq	126f0 <__assert_fail@plt+0x124c>
   126e4:	mov	r0, r4
   126e8:	add	sp, sp, #44	; 0x2c
   126ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126f0:	mov	r7, r4
   126f4:	mov	r5, #2
   126f8:	mov	r1, #0
   126fc:	mov	r0, r5
   12700:	bl	11330 <bfd_printable_arch_mach@plt>
   12704:	bl	1130c <strlen@plt>
   12708:	add	r5, r5, #1
   1270c:	cmp	r7, r0
   12710:	movlt	r7, r0
   12714:	cmp	r5, #89	; 0x59
   12718:	bne	126f8 <__assert_fail@plt+0x1254>
   1271c:	ldr	r0, [pc, #532]	; 12938 <__assert_fail@plt+0x1494>
   12720:	bl	112a0 <getenv@plt>
   12724:	cmp	r0, #0
   12728:	beq	12744 <__assert_fail@plt+0x12a0>
   1272c:	mov	r2, #10
   12730:	mov	r1, #0
   12734:	bl	11144 <strtol@plt>
   12738:	subs	r3, r0, #0
   1273c:	str	r3, [sp, #12]
   12740:	bne	1274c <__assert_fail@plt+0x12a8>
   12744:	mov	r3, #80	; 0x50
   12748:	str	r3, [sp, #12]
   1274c:	ldr	r9, [sp, #28]
   12750:	ldr	fp, [pc, #484]	; 1293c <__assert_fail@plt+0x1498>
   12754:	cmp	r4, r9
   12758:	bge	12824 <__assert_fail@plt+0x1380>
   1275c:	add	r3, r4, r4, lsl #1
   12760:	ldr	r2, [sp, #12]
   12764:	rsb	r3, r4, r3, lsl #3
   12768:	ldr	r8, [sp, #36]	; 0x24
   1276c:	sub	r6, r2, r7
   12770:	lsl	sl, r3, #2
   12774:	add	r8, r8, sl
   12778:	sub	r6, r6, #1
   1277c:	mov	r5, r4
   12780:	ldr	r0, [r8]
   12784:	bl	1130c <strlen@plt>
   12788:	sub	r6, r6, #1
   1278c:	add	r8, r8, #92	; 0x5c
   12790:	subs	r6, r6, r0
   12794:	bmi	12834 <__assert_fail@plt+0x1390>
   12798:	add	r5, r5, #1
   1279c:	cmp	r9, r5
   127a0:	bne	12780 <__assert_fail@plt+0x12dc>
   127a4:	ldr	r2, [pc, #404]	; 12940 <__assert_fail@plt+0x149c>
   127a8:	add	r1, r7, #1
   127ac:	ldr	r0, [pc, #400]	; 12944 <__assert_fail@plt+0x14a0>
   127b0:	bl	11150 <printf@plt>
   127b4:	mov	r8, sl
   127b8:	mov	r6, r4
   127bc:	ldr	r3, [sp, #36]	; 0x24
   127c0:	add	r6, r6, #1
   127c4:	ldr	r0, [pc, #380]	; 12948 <__assert_fail@plt+0x14a4>
   127c8:	ldr	r1, [r3, r8]
   127cc:	bl	11150 <printf@plt>
   127d0:	cmp	r6, r5
   127d4:	add	r8, r8, #92	; 0x5c
   127d8:	bne	127bc <__assert_fail@plt+0x1318>
   127dc:	ldr	r1, [fp]
   127e0:	mov	r0, #10
   127e4:	bl	11408 <putc@plt>
   127e8:	mov	r6, #2
   127ec:	mov	r1, #0
   127f0:	mov	r0, r6
   127f4:	bl	11330 <bfd_printable_arch_mach@plt>
   127f8:	ldr	r1, [pc, #332]	; 1294c <__assert_fail@plt+0x14a8>
   127fc:	bl	11138 <strcmp@plt>
   12800:	cmp	r0, #0
   12804:	bne	12850 <__assert_fail@plt+0x13ac>
   12808:	add	r6, r6, #1
   1280c:	cmp	r6, #89	; 0x59
   12810:	bne	127ec <__assert_fail@plt+0x1348>
   12814:	ldr	r9, [sp, #28]
   12818:	mov	r4, r5
   1281c:	cmp	r4, r9
   12820:	blt	1275c <__assert_fail@plt+0x12b8>
   12824:	ldr	r4, [sp, #24]
   12828:	mov	r0, r4
   1282c:	add	sp, sp, #44	; 0x2c
   12830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12834:	ldr	r2, [pc, #260]	; 12940 <__assert_fail@plt+0x149c>
   12838:	add	r1, r7, #1
   1283c:	ldr	r0, [pc, #256]	; 12944 <__assert_fail@plt+0x14a0>
   12840:	bl	11150 <printf@plt>
   12844:	cmp	r4, r5
   12848:	bne	127b4 <__assert_fail@plt+0x1310>
   1284c:	b	127dc <__assert_fail@plt+0x1338>
   12850:	mov	r1, #0
   12854:	mov	r0, r6
   12858:	bl	11330 <bfd_printable_arch_mach@plt>
   1285c:	mov	r1, r7
   12860:	mov	r2, r0
   12864:	ldr	r0, [pc, #228]	; 12950 <__assert_fail@plt+0x14ac>
   12868:	bl	11150 <printf@plt>
   1286c:	cmp	r4, r5
   12870:	beq	128cc <__assert_fail@plt+0x1428>
   12874:	mov	r8, sl
   12878:	mov	r9, r4
   1287c:	sub	r3, r6, #2
   12880:	str	r3, [sp, #4]
   12884:	ldr	r2, [sp, #36]	; 0x24
   12888:	ldr	r0, [sp, #4]
   1288c:	add	r3, r2, r8
   12890:	add	r3, r3, r0
   12894:	ldr	r1, [fp]
   12898:	ldrb	r3, [r3, #4]
   1289c:	ldr	r0, [r2, r8]
   128a0:	cmp	r3, #0
   128a4:	beq	128dc <__assert_fail@plt+0x1438>
   128a8:	bl	11480 <fputs@plt>
   128ac:	ldr	r1, [fp]
   128b0:	add	r9, r9, #1
   128b4:	cmp	r5, r9
   128b8:	add	r8, r8, #92	; 0x5c
   128bc:	beq	128d0 <__assert_fail@plt+0x142c>
   128c0:	mov	r0, #32
   128c4:	bl	11408 <putc@plt>
   128c8:	b	12884 <__assert_fail@plt+0x13e0>
   128cc:	ldr	r1, [fp]
   128d0:	mov	r0, #10
   128d4:	bl	11408 <putc@plt>
   128d8:	b	12808 <__assert_fail@plt+0x1364>
   128dc:	str	r1, [sp, #8]
   128e0:	bl	1130c <strlen@plt>
   128e4:	ldr	r1, [sp, #8]
   128e8:	cmp	r0, #0
   128ec:	sub	r3, r0, #1
   128f0:	beq	128b0 <__assert_fail@plt+0x140c>
   128f4:	str	sl, [sp, #8]
   128f8:	mov	sl, r4
   128fc:	mov	r4, r3
   12900:	b	12908 <__assert_fail@plt+0x1464>
   12904:	ldr	r1, [fp]
   12908:	sub	r4, r4, #1
   1290c:	mov	r0, #45	; 0x2d
   12910:	bl	11408 <putc@plt>
   12914:	cmn	r4, #1
   12918:	bne	12904 <__assert_fail@plt+0x1460>
   1291c:	mov	r4, sl
   12920:	ldr	r1, [fp]
   12924:	ldr	sl, [sp, #8]
   12928:	b	128b0 <__assert_fail@plt+0x140c>
   1292c:	andeq	r4, r1, ip, asr r1
   12930:	andeq	r4, r1, r8, ror r1
   12934:	strdeq	r2, [r1], -r4
   12938:	muleq	r1, ip, r1
   1293c:	andeq	r5, r2, r4, lsr #4
   12940:	andeq	r4, r1, r4, lsr #3
   12944:	andeq	r4, r1, r8, lsr #3
   12948:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1294c:			; <UNDEFINED> instruction: 0x000141b0
   12950:			; <UNDEFINED> instruction: 0x000141bc
   12954:	cmp	r2, #0
   12958:	push	{r4, r5, r6, r7, lr}
   1295c:	mov	r5, r0
   12960:	sub	sp, sp, #180	; 0xb4
   12964:	mov	r4, r1
   12968:	mov	r6, r3
   1296c:	beq	1298c <__assert_fail@plt+0x14e8>
   12970:	ldr	r3, [r1, #4]
   12974:	mov	r0, r4
   12978:	add	r1, sp, #72	; 0x48
   1297c:	ldr	r3, [r3, #252]	; 0xfc
   12980:	blx	r3
   12984:	cmp	r0, #0
   12988:	beq	129e8 <__assert_fail@plt+0x1544>
   1298c:	mov	r1, r5
   12990:	ldr	r0, [r4]
   12994:	bl	11480 <fputs@plt>
   12998:	cmp	r6, #0
   1299c:	beq	129b8 <__assert_fail@plt+0x1514>
   129a0:	ldrb	r3, [r4, #44]	; 0x2c
   129a4:	tst	r3, #1
   129a8:	beq	129cc <__assert_fail@plt+0x1528>
   129ac:	ldrd	r2, [r4, #64]	; 0x40
   129b0:	orrs	r1, r2, r3
   129b4:	bne	129d8 <__assert_fail@plt+0x1534>
   129b8:	mov	r1, r5
   129bc:	mov	r0, #10
   129c0:	bl	113cc <fputc@plt>
   129c4:	add	sp, sp, #180	; 0xb4
   129c8:	pop	{r4, r5, r6, r7, pc}
   129cc:	ldrd	r2, [r4, #56]	; 0x38
   129d0:	orrs	r1, r2, r3
   129d4:	beq	129b8 <__assert_fail@plt+0x1514>
   129d8:	ldr	r1, [pc, #148]	; 12a74 <__assert_fail@plt+0x15d0>
   129dc:	mov	r0, r5
   129e0:	bl	11324 <fprintf@plt>
   129e4:	b	129b8 <__assert_fail@plt+0x1514>
   129e8:	ldr	r3, [sp, #152]	; 0x98
   129ec:	add	r0, sp, #16
   129f0:	str	r3, [sp, #16]
   129f4:	bl	111e0 <ctime@plt>
   129f8:	subs	r2, r0, #0
   129fc:	beq	12a54 <__assert_fail@plt+0x15b0>
   12a00:	add	r7, sp, #32
   12a04:	add	r3, r2, #20
   12a08:	mov	r0, r7
   12a0c:	add	r2, r2, #4
   12a10:	ldr	r1, [pc, #96]	; 12a78 <__assert_fail@plt+0x15d4>
   12a14:	bl	113f0 <sprintf@plt>
   12a18:	add	r1, sp, #20
   12a1c:	ldr	r0, [sp, #88]	; 0x58
   12a20:	bl	12ef0 <__assert_fail@plt+0x1a4c>
   12a24:	ldr	r2, [sp, #120]	; 0x78
   12a28:	ldr	r3, [sp, #100]	; 0x64
   12a2c:	mov	ip, #0
   12a30:	stmib	sp, {r2, r7}
   12a34:	str	r3, [sp]
   12a38:	add	r2, sp, #21
   12a3c:	ldr	r3, [sp, #96]	; 0x60
   12a40:	ldr	r1, [pc, #52]	; 12a7c <__assert_fail@plt+0x15d8>
   12a44:	mov	r0, r5
   12a48:	strb	ip, [sp, #30]
   12a4c:	bl	11324 <fprintf@plt>
   12a50:	b	1298c <__assert_fail@plt+0x14e8>
   12a54:	mov	r2, #5
   12a58:	ldr	r1, [pc, #32]	; 12a80 <__assert_fail@plt+0x15dc>
   12a5c:	bl	111ec <dcgettext@plt>
   12a60:	add	r7, sp, #32
   12a64:	mov	r1, r0
   12a68:	mov	r0, r7
   12a6c:	bl	113f0 <sprintf@plt>
   12a70:	b	12a18 <__assert_fail@plt+0x1574>
   12a74:	strdeq	r4, [r1], -r8
   12a78:	ldrdeq	r4, [r1], -r8
   12a7c:	andeq	r4, r1, r4, ror #3
   12a80:	andeq	r4, r1, r4, asr #3
   12a84:	push	{r4, lr}
   12a88:	bl	120ac <__assert_fail@plt+0xc08>
   12a8c:	mov	r4, r0
   12a90:	bl	112ac <mkstemp64@plt>
   12a94:	cmn	r0, #1
   12a98:	beq	12aa8 <__assert_fail@plt+0x1604>
   12a9c:	bl	11498 <close@plt>
   12aa0:	mov	r0, r4
   12aa4:	pop	{r4, pc}
   12aa8:	mov	r0, r4
   12aac:	bl	1118c <free@plt>
   12ab0:	mov	r4, #0
   12ab4:	b	12aa0 <__assert_fail@plt+0x15fc>
   12ab8:	push	{r4, lr}
   12abc:	bl	120ac <__assert_fail@plt+0xc08>
   12ac0:	pop	{r4, lr}
   12ac4:	b	113fc <mkdtemp@plt>
   12ac8:	push	{r4, r5, lr}
   12acc:	sub	sp, sp, #12
   12ad0:	mov	r4, r1
   12ad4:	mov	r2, #0
   12ad8:	add	r1, sp, #4
   12adc:	mov	r5, r0
   12ae0:	bl	1112c <bfd_scan_vma@plt>
   12ae4:	ldr	r3, [sp, #4]
   12ae8:	ldrb	r3, [r3]
   12aec:	cmp	r3, #0
   12af0:	bne	12afc <__assert_fail@plt+0x1658>
   12af4:	add	sp, sp, #12
   12af8:	pop	{r4, r5, pc}
   12afc:	mov	r2, #5
   12b00:	ldr	r1, [pc, #16]	; 12b18 <__assert_fail@plt+0x1674>
   12b04:	mov	r0, #0
   12b08:	bl	111ec <dcgettext@plt>
   12b0c:	mov	r2, r5
   12b10:	mov	r1, r4
   12b14:	bl	12414 <__assert_fail@plt+0xf70>
   12b18:	andeq	r4, r1, r0, lsl #4
   12b1c:	push	{r4, r5, r6, lr}
   12b20:	subs	r4, r0, #0
   12b24:	sub	sp, sp, #104	; 0x68
   12b28:	beq	12c00 <__assert_fail@plt+0x175c>
   12b2c:	mov	r2, sp
   12b30:	mov	r1, r4
   12b34:	mov	r0, #3
   12b38:	bl	11474 <__xstat64@plt>
   12b3c:	cmp	r0, #0
   12b40:	blt	12b84 <__assert_fail@plt+0x16e0>
   12b44:	ldr	r3, [sp, #16]
   12b48:	and	r3, r3, #61440	; 0xf000
   12b4c:	cmp	r3, #16384	; 0x4000
   12b50:	moveq	r2, #5
   12b54:	ldreq	r1, [pc, #176]	; 12c0c <__assert_fail@plt+0x1768>
   12b58:	beq	12be0 <__assert_fail@plt+0x173c>
   12b5c:	cmp	r3, #32768	; 0x8000
   12b60:	movne	r2, #5
   12b64:	ldrne	r1, [pc, #164]	; 12c10 <__assert_fail@plt+0x176c>
   12b68:	bne	12be0 <__assert_fail@plt+0x173c>
   12b6c:	ldrd	r0, [sp, #48]	; 0x30
   12b70:	cmp	r0, #0
   12b74:	sbcs	r3, r1, #0
   12b78:	blt	12bd8 <__assert_fail@plt+0x1734>
   12b7c:	add	sp, sp, #104	; 0x68
   12b80:	pop	{r4, r5, r6, pc}
   12b84:	bl	1133c <__errno_location@plt>
   12b88:	mov	r2, #5
   12b8c:	ldr	r3, [r0]
   12b90:	mov	r5, r0
   12b94:	cmp	r3, #2
   12b98:	ldreq	r1, [pc, #116]	; 12c14 <__assert_fail@plt+0x1770>
   12b9c:	beq	12be0 <__assert_fail@plt+0x173c>
   12ba0:	ldr	r1, [pc, #112]	; 12c18 <__assert_fail@plt+0x1774>
   12ba4:	mov	r0, #0
   12ba8:	bl	111ec <dcgettext@plt>
   12bac:	mov	r6, r0
   12bb0:	ldr	r0, [r5]
   12bb4:	bl	112d0 <strerror@plt>
   12bb8:	mov	r1, r4
   12bbc:	mov	r2, r0
   12bc0:	mov	r0, r6
   12bc4:	bl	1243c <__assert_fail@plt+0xf98>
   12bc8:	mvn	r0, #0
   12bcc:	mvn	r1, #0
   12bd0:	add	sp, sp, #104	; 0x68
   12bd4:	pop	{r4, r5, r6, pc}
   12bd8:	ldr	r1, [pc, #60]	; 12c1c <__assert_fail@plt+0x1778>
   12bdc:	mov	r2, #5
   12be0:	mov	r0, #0
   12be4:	bl	111ec <dcgettext@plt>
   12be8:	mov	r1, r4
   12bec:	bl	1243c <__assert_fail@plt+0xf98>
   12bf0:	mvn	r0, #0
   12bf4:	mvn	r1, #0
   12bf8:	add	sp, sp, #104	; 0x68
   12bfc:	pop	{r4, r5, r6, pc}
   12c00:	mvn	r0, #0
   12c04:	mvn	r1, #0
   12c08:	b	12b7c <__assert_fail@plt+0x16d8>
   12c0c:	andeq	r4, r1, r4, asr r2
   12c10:	andeq	r4, r1, r4, ror r2
   12c14:	andeq	r4, r1, r4, lsl r2
   12c18:	andeq	r4, r1, r8, lsr #4
   12c1c:	muleq	r1, ip, r2
   12c20:	push	{r4, r5, r6, r7, r8, lr}
   12c24:	subs	r6, r0, #0
   12c28:	beq	12cd0 <__assert_fail@plt+0x182c>
   12c2c:	ldr	r3, [r6, #140]	; 0x8c
   12c30:	ldr	r5, [r6]
   12c34:	cmp	r3, #0
   12c38:	beq	12c90 <__assert_fail@plt+0x17ec>
   12c3c:	ldrb	r2, [r3, #44]	; 0x2c
   12c40:	tst	r2, #1
   12c44:	bne	12c90 <__assert_fail@plt+0x17ec>
   12c48:	ldr	r8, [r3]
   12c4c:	ldr	r7, [pc, #144]	; 12ce4 <__assert_fail@plt+0x1840>
   12c50:	mov	r0, r8
   12c54:	bl	1130c <strlen@plt>
   12c58:	mov	r4, r0
   12c5c:	mov	r0, r5
   12c60:	bl	1130c <strlen@plt>
   12c64:	ldr	r3, [r7]
   12c68:	add	r4, r4, r0
   12c6c:	add	r4, r4, #3
   12c70:	cmp	r3, r4
   12c74:	bcc	12c98 <__assert_fail@plt+0x17f4>
   12c78:	ldr	r0, [r7, #4]
   12c7c:	mov	r3, r5
   12c80:	mov	r2, r8
   12c84:	ldr	r1, [pc, #92]	; 12ce8 <__assert_fail@plt+0x1844>
   12c88:	bl	113f0 <sprintf@plt>
   12c8c:	ldr	r5, [r7, #4]
   12c90:	mov	r0, r5
   12c94:	pop	{r4, r5, r6, r7, r8, pc}
   12c98:	cmp	r3, #0
   12c9c:	bne	12cc4 <__assert_fail@plt+0x1820>
   12ca0:	add	r4, r4, r4, lsr #1
   12ca4:	mov	r0, r4
   12ca8:	str	r4, [r7]
   12cac:	bl	11240 <xmalloc@plt>
   12cb0:	ldr	r3, [r6, #140]	; 0x8c
   12cb4:	ldr	r5, [r6]
   12cb8:	ldr	r8, [r3]
   12cbc:	str	r0, [r7, #4]
   12cc0:	b	12c7c <__assert_fail@plt+0x17d8>
   12cc4:	ldr	r0, [r7, #4]
   12cc8:	bl	1118c <free@plt>
   12ccc:	b	12ca0 <__assert_fail@plt+0x17fc>
   12cd0:	ldr	r3, [pc, #20]	; 12cec <__assert_fail@plt+0x1848>
   12cd4:	ldr	r2, [pc, #20]	; 12cf0 <__assert_fail@plt+0x184c>
   12cd8:	ldr	r1, [pc, #20]	; 12cf4 <__assert_fail@plt+0x1850>
   12cdc:	ldr	r0, [pc, #20]	; 12cf8 <__assert_fail@plt+0x1854>
   12ce0:	bl	114a4 <__assert_fail@plt>
   12ce4:	andeq	r5, r2, ip, ror #4
   12ce8:	andeq	r4, r1, r0, lsl #6
   12cec:	andeq	r4, r1, r4
   12cf0:	andeq	r0, r0, r9, ror r2
   12cf4:	ldrdeq	r4, [r1], -r8
   12cf8:	strdeq	r4, [r1], -r0
   12cfc:	push	{r3}		; (str r3, [sp, #-4]!)
   12d00:	push	{r4, r5, r6, r7, r8, r9, lr}
   12d04:	sub	sp, sp, #8
   12d08:	mov	r8, r1
   12d0c:	mov	r7, r2
   12d10:	mov	r5, r0
   12d14:	ldr	r6, [sp, #36]	; 0x24
   12d18:	bl	11228 <bfd_get_error@plt>
   12d1c:	bl	1142c <bfd_errmsg@plt>
   12d20:	ldr	r3, [pc, #204]	; 12df4 <__assert_fail@plt+0x1950>
   12d24:	ldr	r4, [pc, #204]	; 12df8 <__assert_fail@plt+0x1954>
   12d28:	mov	r9, r0
   12d2c:	ldr	r0, [r3]
   12d30:	bl	1115c <fflush@plt>
   12d34:	ldr	r2, [pc, #192]	; 12dfc <__assert_fail@plt+0x1958>
   12d38:	add	r3, sp, #40	; 0x28
   12d3c:	ldr	r1, [r4]
   12d40:	ldr	r0, [r2]
   12d44:	str	r3, [sp, #4]
   12d48:	bl	11480 <fputs@plt>
   12d4c:	cmp	r8, #0
   12d50:	beq	12d84 <__assert_fail@plt+0x18e0>
   12d54:	cmp	r5, #0
   12d58:	beq	12de4 <__assert_fail@plt+0x1940>
   12d5c:	cmp	r7, #0
   12d60:	ldr	r0, [r4]
   12d64:	beq	12d88 <__assert_fail@plt+0x18e4>
   12d68:	ldr	r3, [r7]
   12d6c:	cmp	r3, #0
   12d70:	beq	12d88 <__assert_fail@plt+0x18e4>
   12d74:	mov	r2, r5
   12d78:	ldr	r1, [pc, #128]	; 12e00 <__assert_fail@plt+0x195c>
   12d7c:	bl	11324 <fprintf@plt>
   12d80:	b	12d94 <__assert_fail@plt+0x18f0>
   12d84:	ldr	r0, [r4]
   12d88:	mov	r2, r5
   12d8c:	ldr	r1, [pc, #112]	; 12e04 <__assert_fail@plt+0x1960>
   12d90:	bl	11324 <fprintf@plt>
   12d94:	cmp	r6, #0
   12d98:	ldr	r0, [r4]
   12d9c:	beq	12dc8 <__assert_fail@plt+0x1924>
   12da0:	mov	r3, r0
   12da4:	mov	r2, #2
   12da8:	mov	r1, #1
   12dac:	ldr	r0, [pc, #84]	; 12e08 <__assert_fail@plt+0x1964>
   12db0:	bl	11234 <fwrite@plt>
   12db4:	mov	r1, r6
   12db8:	ldr	r2, [sp, #4]
   12dbc:	ldr	r0, [r4]
   12dc0:	bl	113c0 <vfprintf@plt>
   12dc4:	ldr	r0, [r4]
   12dc8:	mov	r2, r9
   12dcc:	ldr	r1, [pc, #56]	; 12e0c <__assert_fail@plt+0x1968>
   12dd0:	bl	11324 <fprintf@plt>
   12dd4:	add	sp, sp, #8
   12dd8:	pop	{r4, r5, r6, r7, r8, r9, lr}
   12ddc:	add	sp, sp, #4
   12de0:	bx	lr
   12de4:	mov	r0, r8
   12de8:	bl	12c20 <__assert_fail@plt+0x177c>
   12dec:	mov	r5, r0
   12df0:	b	12d5c <__assert_fail@plt+0x18b8>
   12df4:	andeq	r5, r2, r4, lsr #4
   12df8:	andeq	r5, r2, r8, lsl r2
   12dfc:	andeq	r5, r2, r8, ror r2
   12e00:	andeq	r4, r1, r8, lsl #6
   12e04:	andeq	r4, r1, r0, lsl r3
   12e08:	andeq	r3, r1, ip, asr #30
   12e0c:	andeq	r4, r1, r4, lsl r3
   12e10:	ldrb	r3, [r0]
   12e14:	cmp	r3, #47	; 0x2f
   12e18:	beq	12e94 <__assert_fail@plt+0x19f0>
   12e1c:	cmp	r3, #0
   12e20:	beq	12e58 <__assert_fail@plt+0x19b4>
   12e24:	cmp	r3, #46	; 0x2e
   12e28:	beq	12e60 <__assert_fail@plt+0x19bc>
   12e2c:	ldrb	r3, [r0, #1]!
   12e30:	cmp	r3, #0
   12e34:	cmpne	r3, #47	; 0x2f
   12e38:	bne	12e2c <__assert_fail@plt+0x1988>
   12e3c:	cmp	r3, #47	; 0x2f
   12e40:	bne	12e1c <__assert_fail@plt+0x1978>
   12e44:	ldrb	r3, [r0, #1]!
   12e48:	cmp	r3, #47	; 0x2f
   12e4c:	beq	12e44 <__assert_fail@plt+0x19a0>
   12e50:	cmp	r3, #0
   12e54:	bne	12e24 <__assert_fail@plt+0x1980>
   12e58:	mov	r0, #1
   12e5c:	bx	lr
   12e60:	ldrb	r3, [r0, #1]
   12e64:	cmp	r3, #46	; 0x2e
   12e68:	beq	12e80 <__assert_fail@plt+0x19dc>
   12e6c:	cmp	r3, #0
   12e70:	cmpne	r3, #47	; 0x2f
   12e74:	add	r0, r0, #1
   12e78:	bne	12e2c <__assert_fail@plt+0x1988>
   12e7c:	b	12e48 <__assert_fail@plt+0x19a4>
   12e80:	ldrb	r3, [r0, #2]
   12e84:	add	r0, r0, #2
   12e88:	cmp	r3, #0
   12e8c:	cmpne	r3, #47	; 0x2f
   12e90:	bne	12e2c <__assert_fail@plt+0x1988>
   12e94:	mov	r0, #0
   12e98:	bx	lr
   12e9c:	push	{r4, lr}
   12ea0:	mov	r1, r0
   12ea4:	ldr	r2, [pc, #52]	; 12ee0 <__assert_fail@plt+0x1a3c>
   12ea8:	ldr	r0, [pc, #52]	; 12ee4 <__assert_fail@plt+0x1a40>
   12eac:	bl	11150 <printf@plt>
   12eb0:	mov	r2, #5
   12eb4:	ldr	r1, [pc, #44]	; 12ee8 <__assert_fail@plt+0x1a44>
   12eb8:	mov	r0, #0
   12ebc:	bl	111ec <dcgettext@plt>
   12ec0:	bl	11150 <printf@plt>
   12ec4:	mov	r2, #5
   12ec8:	ldr	r1, [pc, #28]	; 12eec <__assert_fail@plt+0x1a48>
   12ecc:	mov	r0, #0
   12ed0:	bl	111ec <dcgettext@plt>
   12ed4:	bl	11150 <printf@plt>
   12ed8:	mov	r0, #0
   12edc:	bl	11300 <exit@plt>
   12ee0:	andeq	r4, r1, r8, ror r1
   12ee4:	andeq	r4, r1, ip, lsl r3
   12ee8:	andeq	r4, r1, r8, lsr #6
   12eec:	andeq	r4, r1, ip, asr r3
   12ef0:	and	r3, r0, #61440	; 0xf000
   12ef4:	cmp	r3, #16384	; 0x4000
   12ef8:	push	{r4, r5, lr}
   12efc:	moveq	r2, #100	; 0x64
   12f00:	beq	12f40 <__assert_fail@plt+0x1a9c>
   12f04:	cmp	r3, #40960	; 0xa000
   12f08:	moveq	r2, #108	; 0x6c
   12f0c:	beq	12f40 <__assert_fail@plt+0x1a9c>
   12f10:	cmp	r3, #24576	; 0x6000
   12f14:	moveq	r2, #98	; 0x62
   12f18:	beq	12f40 <__assert_fail@plt+0x1a9c>
   12f1c:	cmp	r3, #8192	; 0x2000
   12f20:	moveq	r2, #99	; 0x63
   12f24:	beq	12f40 <__assert_fail@plt+0x1a9c>
   12f28:	cmp	r3, #49152	; 0xc000
   12f2c:	moveq	r2, #115	; 0x73
   12f30:	beq	12f40 <__assert_fail@plt+0x1a9c>
   12f34:	cmp	r3, #4096	; 0x1000
   12f38:	moveq	r2, #112	; 0x70
   12f3c:	movne	r2, #45	; 0x2d
   12f40:	tst	r0, #256	; 0x100
   12f44:	movne	r5, #114	; 0x72
   12f48:	moveq	r5, #45	; 0x2d
   12f4c:	tst	r0, #128	; 0x80
   12f50:	movne	r3, #119	; 0x77
   12f54:	moveq	r3, #45	; 0x2d
   12f58:	tst	r0, #64	; 0x40
   12f5c:	movne	ip, #120	; 0x78
   12f60:	moveq	ip, #45	; 0x2d
   12f64:	tst	r0, #32
   12f68:	movne	r4, #114	; 0x72
   12f6c:	moveq	r4, #45	; 0x2d
   12f70:	tst	r0, #16
   12f74:	movne	lr, #119	; 0x77
   12f78:	moveq	lr, #45	; 0x2d
   12f7c:	tst	r0, #8
   12f80:	strb	r2, [r1]
   12f84:	movne	r2, #120	; 0x78
   12f88:	moveq	r2, #45	; 0x2d
   12f8c:	tst	r0, #4
   12f90:	strb	r3, [r1, #2]
   12f94:	movne	r3, #114	; 0x72
   12f98:	moveq	r3, #45	; 0x2d
   12f9c:	tst	r0, #2
   12fa0:	strb	lr, [r1, #5]
   12fa4:	movne	lr, #119	; 0x77
   12fa8:	moveq	lr, #45	; 0x2d
   12fac:	tst	r0, #1
   12fb0:	strb	r3, [r1, #7]
   12fb4:	movne	r3, #120	; 0x78
   12fb8:	moveq	r3, #45	; 0x2d
   12fbc:	tst	r0, #2048	; 0x800
   12fc0:	strb	r5, [r1, #1]
   12fc4:	strb	ip, [r1, #3]
   12fc8:	strb	r4, [r1, #4]
   12fcc:	strb	r2, [r1, #6]
   12fd0:	strb	lr, [r1, #8]
   12fd4:	strb	r3, [r1, #9]
   12fd8:	beq	12fec <__assert_fail@plt+0x1b48>
   12fdc:	cmp	ip, #120	; 0x78
   12fe0:	movne	ip, #83	; 0x53
   12fe4:	moveq	ip, #115	; 0x73
   12fe8:	strb	ip, [r1, #3]
   12fec:	tst	r0, #1024	; 0x400
   12ff0:	beq	13004 <__assert_fail@plt+0x1b60>
   12ff4:	cmp	r2, #120	; 0x78
   12ff8:	movne	r2, #83	; 0x53
   12ffc:	moveq	r2, #115	; 0x73
   13000:	strb	r2, [r1, #6]
   13004:	tst	r0, #512	; 0x200
   13008:	popeq	{r4, r5, pc}
   1300c:	cmp	r3, #120	; 0x78
   13010:	movne	r3, #84	; 0x54
   13014:	moveq	r3, #116	; 0x74
   13018:	strb	r3, [r1, #9]
   1301c:	pop	{r4, r5, pc}
   13020:	push	{r4, r5, r6, lr}
   13024:	subs	r5, r0, #0
   13028:	beq	130c0 <__assert_fail@plt+0x1c1c>
   1302c:	ldr	r3, [r5]
   13030:	cmp	r3, #0
   13034:	beq	130b0 <__assert_fail@plt+0x1c0c>
   13038:	mov	r3, r5
   1303c:	mov	r0, #0
   13040:	b	13048 <__assert_fail@plt+0x1ba4>
   13044:	mov	r0, r1
   13048:	ldr	r2, [r3, #4]!
   1304c:	add	r1, r0, #1
   13050:	cmp	r2, #0
   13054:	bne	13044 <__assert_fail@plt+0x1ba0>
   13058:	add	r0, r0, #2
   1305c:	lsl	r0, r0, #2
   13060:	bl	11240 <xmalloc@plt>
   13064:	ldr	r2, [r5]
   13068:	cmp	r2, #0
   1306c:	mov	r6, r0
   13070:	beq	130b8 <__assert_fail@plt+0x1c14>
   13074:	sub	r4, r0, #4
   13078:	mov	r0, r2
   1307c:	bl	11258 <xstrdup@plt>
   13080:	ldr	r2, [r5, #4]!
   13084:	add	r3, r4, #8
   13088:	cmp	r2, #0
   1308c:	sub	r3, r3, r6
   13090:	add	r4, r4, #4
   13094:	str	r0, [r4]
   13098:	bne	13078 <__assert_fail@plt+0x1bd4>
   1309c:	add	r3, r6, r3
   130a0:	mov	r2, #0
   130a4:	str	r2, [r3]
   130a8:	mov	r0, r6
   130ac:	pop	{r4, r5, r6, pc}
   130b0:	mov	r0, #4
   130b4:	b	13060 <__assert_fail@plt+0x1bbc>
   130b8:	mov	r3, r0
   130bc:	b	130a0 <__assert_fail@plt+0x1bfc>
   130c0:	mov	r6, r5
   130c4:	b	130a8 <__assert_fail@plt+0x1c04>
   130c8:	push	{r4, r5, r6, lr}
   130cc:	subs	r5, r0, #0
   130d0:	popeq	{r4, r5, r6, pc}
   130d4:	ldr	r0, [r5]
   130d8:	cmp	r0, #0
   130dc:	beq	130f4 <__assert_fail@plt+0x1c50>
   130e0:	mov	r4, r5
   130e4:	bl	1118c <free@plt>
   130e8:	ldr	r0, [r4, #4]!
   130ec:	cmp	r0, #0
   130f0:	bne	130e4 <__assert_fail@plt+0x1c40>
   130f4:	mov	r0, r5
   130f8:	pop	{r4, r5, r6, lr}
   130fc:	b	1118c <free@plt>
   13100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13104:	subs	r4, r0, #0
   13108:	ldr	r6, [pc, #512]	; 13310 <__assert_fail@plt+0x1e6c>
   1310c:	sub	sp, sp, #12
   13110:	add	r6, pc, r6
   13114:	moveq	r9, r4
   13118:	beq	132b4 <__assert_fail@plt+0x1e10>
   1311c:	bl	1130c <strlen@plt>
   13120:	mov	r9, #0
   13124:	mov	fp, r9
   13128:	mov	sl, r9
   1312c:	mov	r5, r9
   13130:	mov	r8, r9
   13134:	mov	r7, r9
   13138:	add	r0, r0, #1
   1313c:	bl	11240 <xmalloc@plt>
   13140:	ldr	r2, [pc, #460]	; 13314 <__assert_fail@plt+0x1e70>
   13144:	str	r0, [sp]
   13148:	ldr	r6, [r6, r2]
   1314c:	ldrb	r2, [r4]
   13150:	lsl	r2, r2, #1
   13154:	ldrh	r2, [r6, r2]
   13158:	tst	r2, #64	; 0x40
   1315c:	beq	13174 <__assert_fail@plt+0x1cd0>
   13160:	ldrb	r2, [r4, #1]!
   13164:	lsl	r2, r2, #1
   13168:	ldrh	r2, [r6, r2]
   1316c:	tst	r2, #64	; 0x40
   13170:	bne	13160 <__assert_fail@plt+0x1cbc>
   13174:	cmp	fp, #0
   13178:	lsl	r2, sl, #2
   1317c:	beq	13190 <__assert_fail@plt+0x1cec>
   13180:	sub	r1, fp, #1
   13184:	cmp	r1, sl
   13188:	addgt	r1, r9, r2
   1318c:	bgt	131c0 <__assert_fail@plt+0x1d1c>
   13190:	cmp	r9, #0
   13194:	str	r2, [sp, #4]
   13198:	beq	132f8 <__assert_fail@plt+0x1e54>
   1319c:	lsl	fp, fp, #1
   131a0:	mov	r0, r9
   131a4:	lsl	r1, fp, #2
   131a8:	bl	11204 <xrealloc@plt>
   131ac:	ldr	r2, [sp, #4]
   131b0:	mov	r9, r0
   131b4:	add	r1, r9, r2
   131b8:	mov	r3, #0
   131bc:	str	r3, [r9, r2]
   131c0:	ldrb	r2, [r4]
   131c4:	ldr	r0, [sp]
   131c8:	cmp	r2, #0
   131cc:	bne	131f0 <__assert_fail@plt+0x1d4c>
   131d0:	b	13254 <__assert_fail@plt+0x1db0>
   131d4:	cmp	r2, #39	; 0x27
   131d8:	moveq	r7, r5
   131dc:	beq	131e4 <__assert_fail@plt+0x1d40>
   131e0:	strb	r2, [r0], #1
   131e4:	ldrb	r2, [r4, #1]!
   131e8:	cmp	r2, #0
   131ec:	beq	13254 <__assert_fail@plt+0x1db0>
   131f0:	lsl	ip, r2, #1
   131f4:	ldrh	ip, [r6, ip]
   131f8:	tst	ip, #64	; 0x40
   131fc:	beq	1320c <__assert_fail@plt+0x1d68>
   13200:	orr	ip, r8, r7
   13204:	orrs	ip, ip, r5
   13208:	beq	132e8 <__assert_fail@plt+0x1e44>
   1320c:	cmp	r5, #0
   13210:	movne	r5, #0
   13214:	strbne	r2, [r0], #1
   13218:	bne	131e4 <__assert_fail@plt+0x1d40>
   1321c:	cmp	r2, #92	; 0x5c
   13220:	moveq	r5, #1
   13224:	beq	131e4 <__assert_fail@plt+0x1d40>
   13228:	cmp	r7, #0
   1322c:	bne	131d4 <__assert_fail@plt+0x1d30>
   13230:	cmp	r8, #0
   13234:	beq	132c0 <__assert_fail@plt+0x1e1c>
   13238:	cmp	r2, #34	; 0x22
   1323c:	mov	r5, r7
   13240:	moveq	r8, r7
   13244:	bne	131e0 <__assert_fail@plt+0x1d3c>
   13248:	ldrb	r2, [r4, #1]!
   1324c:	cmp	r2, #0
   13250:	bne	131f0 <__assert_fail@plt+0x1d4c>
   13254:	mov	r3, #0
   13258:	strb	r3, [r0]
   1325c:	ldr	r0, [sp]
   13260:	str	r1, [sp, #4]
   13264:	bl	11258 <xstrdup@plt>
   13268:	ldr	r1, [sp, #4]
   1326c:	mov	r3, #0
   13270:	add	sl, sl, #1
   13274:	str	r3, [r1, #4]
   13278:	str	r0, [r1]
   1327c:	ldrb	r2, [r4]
   13280:	lsl	r1, r2, #1
   13284:	ldrh	r1, [r6, r1]
   13288:	tst	r1, #64	; 0x40
   1328c:	beq	132a4 <__assert_fail@plt+0x1e00>
   13290:	ldrb	r2, [r4, #1]!
   13294:	lsl	r1, r2, #1
   13298:	ldrh	r1, [r6, r1]
   1329c:	tst	r1, #64	; 0x40
   132a0:	bne	13290 <__assert_fail@plt+0x1dec>
   132a4:	cmp	r2, #0
   132a8:	bne	1314c <__assert_fail@plt+0x1ca8>
   132ac:	ldr	r0, [sp]
   132b0:	bl	1118c <free@plt>
   132b4:	mov	r0, r9
   132b8:	add	sp, sp, #12
   132bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132c0:	cmp	r2, #39	; 0x27
   132c4:	mov	r5, r8
   132c8:	moveq	r7, #1
   132cc:	beq	131e4 <__assert_fail@plt+0x1d40>
   132d0:	cmp	r2, #34	; 0x22
   132d4:	moveq	r7, r8
   132d8:	strbne	r2, [r0], #1
   132dc:	movne	r7, r8
   132e0:	moveq	r8, #1
   132e4:	b	131e4 <__assert_fail@plt+0x1d40>
   132e8:	mov	r8, ip
   132ec:	mov	r7, ip
   132f0:	mov	r5, ip
   132f4:	b	13254 <__assert_fail@plt+0x1db0>
   132f8:	mov	r0, #32
   132fc:	bl	11240 <xmalloc@plt>
   13300:	mov	fp, #8
   13304:	ldr	r2, [sp, #4]
   13308:	mov	r9, r0
   1330c:	b	131b4 <__assert_fail@plt+0x1d10>
   13310:	andeq	r1, r1, r8, ror #29
   13314:	andeq	r0, r0, ip, lsr r1
   13318:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1331c:	subs	r6, r1, #0
   13320:	ldr	r8, [pc, #192]	; 133e8 <__assert_fail@plt+0x1f44>
   13324:	add	r8, pc, r8
   13328:	beq	133b8 <__assert_fail@plt+0x1f14>
   1332c:	ldr	r5, [r0]
   13330:	mov	r9, r0
   13334:	cmp	r5, #0
   13338:	beq	133e0 <__assert_fail@plt+0x1f3c>
   1333c:	ldrb	r4, [r5]
   13340:	cmp	r4, #0
   13344:	beq	133c0 <__assert_fail@plt+0x1f1c>
   13348:	ldr	r3, [pc, #156]	; 133ec <__assert_fail@plt+0x1f48>
   1334c:	ldr	r7, [r8, r3]
   13350:	b	13360 <__assert_fail@plt+0x1ebc>
   13354:	ldrb	r4, [r5, #1]!
   13358:	cmp	r4, #0
   1335c:	beq	133c0 <__assert_fail@plt+0x1f1c>
   13360:	lsl	r3, r4, #1
   13364:	mov	r1, r6
   13368:	ldrh	r3, [r7, r3]
   1336c:	mov	r0, #92	; 0x5c
   13370:	tst	r3, #64	; 0x40
   13374:	bne	13398 <__assert_fail@plt+0x1ef4>
   13378:	cmp	r4, #39	; 0x27
   1337c:	cmpne	r4, r0
   13380:	moveq	r3, #1
   13384:	movne	r3, #0
   13388:	cmp	r4, #34	; 0x22
   1338c:	orreq	r3, r3, #1
   13390:	cmp	r3, #0
   13394:	beq	133a4 <__assert_fail@plt+0x1f00>
   13398:	bl	113cc <fputc@plt>
   1339c:	cmn	r0, #1
   133a0:	beq	133b8 <__assert_fail@plt+0x1f14>
   133a4:	mov	r0, r4
   133a8:	mov	r1, r6
   133ac:	bl	113cc <fputc@plt>
   133b0:	cmn	r0, #1
   133b4:	bne	13354 <__assert_fail@plt+0x1eb0>
   133b8:	mov	r0, #1
   133bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133c0:	mov	r1, r6
   133c4:	mov	r0, #10
   133c8:	bl	113cc <fputc@plt>
   133cc:	cmn	r0, #1
   133d0:	beq	133b8 <__assert_fail@plt+0x1f14>
   133d4:	ldr	r5, [r9, #4]!
   133d8:	cmp	r5, #0
   133dc:	bne	1333c <__assert_fail@plt+0x1e98>
   133e0:	mov	r0, #0
   133e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133e8:	ldrdeq	r1, [r1], -r4
   133ec:	andeq	r0, r0, ip, lsr r1
   133f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133f4:	mov	r7, r1
   133f8:	sub	sp, sp, #140	; 0x8c
   133fc:	ldr	r3, [r7]
   13400:	ldr	r1, [r0]
   13404:	str	r3, [sp, #24]
   13408:	ldr	r3, [pc, #824]	; 13748 <__assert_fail@plt+0x22a4>
   1340c:	mov	sl, r0
   13410:	add	r3, pc, r3
   13414:	str	r3, [sp, #28]
   13418:	add	r3, sp, #32
   1341c:	str	r3, [sp]
   13420:	ldr	r3, [pc, #804]	; 1374c <__assert_fail@plt+0x22a8>
   13424:	mov	fp, #2000	; 0x7d0
   13428:	mov	r5, #0
   1342c:	add	r3, pc, r3
   13430:	str	r3, [sp, #4]
   13434:	add	r4, r5, #1
   13438:	cmp	r4, r1
   1343c:	bge	13538 <__assert_fail@plt+0x2094>
   13440:	ldr	r3, [r7]
   13444:	lsl	r8, r4, #2
   13448:	ldr	r0, [r3, r4, lsl #2]
   1344c:	ldrb	r2, [r0]
   13450:	cmp	r2, #64	; 0x40
   13454:	bne	13544 <__assert_fail@plt+0x20a0>
   13458:	subs	fp, fp, #1
   1345c:	beq	136d8 <__assert_fail@plt+0x2234>
   13460:	add	r6, r0, #1
   13464:	mov	r1, r6
   13468:	ldr	r2, [sp]
   1346c:	mov	r0, #3
   13470:	bl	11474 <__xstat64@plt>
   13474:	cmp	r0, #0
   13478:	blt	13540 <__assert_fail@plt+0x209c>
   1347c:	ldr	r3, [sp, #48]	; 0x30
   13480:	and	r3, r3, #61440	; 0xf000
   13484:	cmp	r3, #16384	; 0x4000
   13488:	beq	13704 <__assert_fail@plt+0x2260>
   1348c:	mov	r0, r6
   13490:	ldr	r1, [sp, #4]
   13494:	bl	11420 <fopen64@plt>
   13498:	subs	r9, r0, #0
   1349c:	beq	13540 <__assert_fail@plt+0x209c>
   134a0:	mov	r2, #2
   134a4:	mov	r1, #0
   134a8:	bl	11468 <fseek@plt>
   134ac:	cmn	r0, #1
   134b0:	beq	1351c <__assert_fail@plt+0x2078>
   134b4:	mov	r0, r9
   134b8:	bl	111d4 <ftell@plt>
   134bc:	cmn	r0, #1
   134c0:	mov	r6, r0
   134c4:	beq	1351c <__assert_fail@plt+0x2078>
   134c8:	mov	r2, #0
   134cc:	mov	r1, r2
   134d0:	mov	r0, r9
   134d4:	bl	11468 <fseek@plt>
   134d8:	cmn	r0, #1
   134dc:	beq	1351c <__assert_fail@plt+0x2078>
   134e0:	add	r0, r6, #1
   134e4:	bl	11240 <xmalloc@plt>
   134e8:	mov	r3, r9
   134ec:	mov	r2, r6
   134f0:	mov	r1, #1
   134f4:	str	r0, [sp, #8]
   134f8:	bl	11270 <fread@plt>
   134fc:	cmp	r6, r0
   13500:	mov	r3, r0
   13504:	beq	13550 <__assert_fail@plt+0x20ac>
   13508:	str	r0, [sp, #12]
   1350c:	mov	r0, r9
   13510:	bl	111a4 <ferror@plt>
   13514:	cmp	r0, #0
   13518:	beq	1354c <__assert_fail@plt+0x20a8>
   1351c:	mov	r0, r9
   13520:	bl	11378 <fclose@plt>
   13524:	mov	r5, r4
   13528:	ldr	r1, [sl]
   1352c:	add	r4, r5, #1
   13530:	cmp	r4, r1
   13534:	blt	13440 <__assert_fail@plt+0x1f9c>
   13538:	add	sp, sp, #140	; 0x8c
   1353c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13540:	ldr	r1, [sl]
   13544:	mov	r5, r4
   13548:	b	13434 <__assert_fail@plt+0x1f90>
   1354c:	ldr	r3, [sp, #12]
   13550:	ldr	r1, [sp, #8]
   13554:	mov	r2, #0
   13558:	strb	r2, [r1, r3]
   1355c:	ldrb	r3, [r1]
   13560:	cmp	r3, r2
   13564:	beq	135a8 <__assert_fail@plt+0x2104>
   13568:	ldr	r2, [pc, #480]	; 13750 <__assert_fail@plt+0x22ac>
   1356c:	ldr	r1, [sp, #28]
   13570:	lsl	r3, r3, #1
   13574:	ldr	r1, [r1, r2]
   13578:	ldrh	r3, [r1, r3]
   1357c:	tst	r3, #64	; 0x40
   13580:	beq	135e8 <__assert_fail@plt+0x2144>
   13584:	ldr	r2, [sp, #8]
   13588:	b	1359c <__assert_fail@plt+0x20f8>
   1358c:	lsl	r3, r3, #1
   13590:	ldrh	r3, [r1, r3]
   13594:	tst	r3, #64	; 0x40
   13598:	beq	135e8 <__assert_fail@plt+0x2144>
   1359c:	ldrb	r3, [r2, #1]!
   135a0:	cmp	r3, #0
   135a4:	bne	1358c <__assert_fail@plt+0x20e8>
   135a8:	mov	r0, #4
   135ac:	bl	11240 <xmalloc@plt>
   135b0:	ldr	r2, [sp, #24]
   135b4:	mov	r6, #0
   135b8:	mov	r3, r0
   135bc:	str	r0, [sp, #12]
   135c0:	ldr	r0, [r7]
   135c4:	str	r6, [r3]
   135c8:	cmp	r2, r0
   135cc:	bne	136cc <__assert_fail@plt+0x2228>
   135d0:	mov	r0, r2
   135d4:	bl	13020 <__assert_fail@plt+0x1b7c>
   135d8:	mov	r3, r6
   135dc:	mov	r2, r8
   135e0:	str	r0, [r7]
   135e4:	b	13638 <__assert_fail@plt+0x2194>
   135e8:	ldr	r0, [sp, #8]
   135ec:	bl	13100 <__assert_fail@plt+0x1c5c>
   135f0:	ldr	r2, [sp, #24]
   135f4:	mov	r3, r0
   135f8:	str	r0, [sp, #12]
   135fc:	ldr	r0, [r7]
   13600:	cmp	r0, r2
   13604:	beq	13730 <__assert_fail@plt+0x228c>
   13608:	ldr	r6, [r3]
   1360c:	cmp	r6, #0
   13610:	beq	136cc <__assert_fail@plt+0x2228>
   13614:	ldr	r2, [sp, #12]
   13618:	mov	r6, #0
   1361c:	ldr	r3, [r2, #4]!
   13620:	add	r6, r6, #1
   13624:	cmp	r3, #0
   13628:	lsl	r3, r6, #2
   1362c:	bne	1361c <__assert_fail@plt+0x2178>
   13630:	add	r2, r4, r6
   13634:	lsl	r2, r2, #2
   13638:	ldr	r0, [r0, r8]
   1363c:	str	r3, [sp, #16]
   13640:	str	r2, [sp, #20]
   13644:	bl	1118c <free@plt>
   13648:	ldr	r1, [sl]
   1364c:	ldr	r0, [r7]
   13650:	add	r1, r1, #1
   13654:	add	r1, r1, r6
   13658:	lsl	r1, r1, #2
   1365c:	bl	11204 <xrealloc@plt>
   13660:	ldr	r2, [sp, #20]
   13664:	add	ip, r8, #4
   13668:	mov	r1, r0
   1366c:	ldr	r0, [sl]
   13670:	str	r1, [r7]
   13674:	sub	r4, r0, r4
   13678:	add	r0, r1, r2
   1367c:	add	r1, r1, ip
   13680:	lsl	r2, r4, #2
   13684:	bl	11174 <memmove@plt>
   13688:	ldr	r4, [sp, #12]
   1368c:	ldr	r3, [sp, #16]
   13690:	ldr	r0, [r7]
   13694:	mov	r2, r3
   13698:	mov	r1, r4
   1369c:	add	r0, r0, r8
   136a0:	bl	111bc <memcpy@plt>
   136a4:	ldr	r3, [sl]
   136a8:	mov	r0, r4
   136ac:	sub	r3, r3, #1
   136b0:	add	r6, r3, r6
   136b4:	str	r6, [sl]
   136b8:	bl	1118c <free@plt>
   136bc:	ldr	r0, [sp, #8]
   136c0:	bl	1118c <free@plt>
   136c4:	mov	r4, r5
   136c8:	b	1351c <__assert_fail@plt+0x2078>
   136cc:	mov	r3, r6
   136d0:	mov	r2, r8
   136d4:	b	13638 <__assert_fail@plt+0x2194>
   136d8:	ldr	r0, [pc, #116]	; 13754 <__assert_fail@plt+0x22b0>
   136dc:	ldr	r2, [r3]
   136e0:	mov	r3, r0
   136e4:	ldr	r0, [sp, #28]
   136e8:	ldr	r1, [pc, #104]	; 13758 <__assert_fail@plt+0x22b4>
   136ec:	ldr	r3, [r0, r3]
   136f0:	add	r1, pc, r1
   136f4:	ldr	r0, [r3]
   136f8:	bl	11324 <fprintf@plt>
   136fc:	mov	r0, #1
   13700:	bl	113d8 <xexit@plt>
   13704:	ldr	r0, [sp, #28]
   13708:	ldr	r3, [pc, #68]	; 13754 <__assert_fail@plt+0x22b0>
   1370c:	ldr	r2, [r7]
   13710:	ldr	r1, [pc, #68]	; 1375c <__assert_fail@plt+0x22b8>
   13714:	ldr	r3, [r0, r3]
   13718:	add	r1, pc, r1
   1371c:	ldr	r2, [r2]
   13720:	ldr	r0, [r3]
   13724:	bl	11324 <fprintf@plt>
   13728:	mov	r0, #1
   1372c:	bl	113d8 <xexit@plt>
   13730:	ldr	r3, [sp, #12]
   13734:	ldr	r0, [sp, #24]
   13738:	ldr	r6, [r3]
   1373c:	bl	13020 <__assert_fail@plt+0x1b7c>
   13740:	str	r0, [r7]
   13744:	b	1360c <__assert_fail@plt+0x2168>
   13748:	andeq	r1, r1, r8, ror #23
   1374c:	andeq	r1, r0, r4, asr #32
   13750:	andeq	r0, r0, ip, lsr r1
   13754:	andeq	r0, r0, r0, asr #2
   13758:	andeq	r0, r0, r8, lsr #26
   1375c:	andeq	r0, r0, ip, lsr #26
   13760:	subs	r3, r0, #0
   13764:	beq	1378c <__assert_fail@plt+0x22e8>
   13768:	ldr	r0, [r3]
   1376c:	cmp	r0, #0
   13770:	bxeq	lr
   13774:	mov	r0, #0
   13778:	ldr	r2, [r3, #4]!
   1377c:	add	r0, r0, #1
   13780:	cmp	r2, #0
   13784:	bne	13778 <__assert_fail@plt+0x22d4>
   13788:	bx	lr
   1378c:	mov	r0, r3
   13790:	bx	lr
   13794:	ldr	r3, [pc, #452]	; 13960 <__assert_fail@plt+0x24bc>
   13798:	add	r3, pc, r3
   1379c:	ldr	r3, [r3]
   137a0:	cmp	r3, #0
   137a4:	beq	137b0 <__assert_fail@plt+0x230c>
   137a8:	mov	r0, r3
   137ac:	bx	lr
   137b0:	ldr	r0, [pc, #428]	; 13964 <__assert_fail@plt+0x24c0>
   137b4:	push	{r4, r5, r6, lr}
   137b8:	add	r0, pc, r0
   137bc:	bl	112a0 <getenv@plt>
   137c0:	subs	r4, r0, #0
   137c4:	beq	13938 <__assert_fail@plt+0x2494>
   137c8:	mov	r1, #7
   137cc:	bl	1136c <access@plt>
   137d0:	cmp	r0, #0
   137d4:	bne	13838 <__assert_fail@plt+0x2394>
   137d8:	ldr	r0, [pc, #392]	; 13968 <__assert_fail@plt+0x24c4>
   137dc:	add	r0, pc, r0
   137e0:	bl	112a0 <getenv@plt>
   137e4:	ldr	r0, [pc, #384]	; 1396c <__assert_fail@plt+0x24c8>
   137e8:	add	r0, pc, r0
   137ec:	bl	112a0 <getenv@plt>
   137f0:	mov	r0, r4
   137f4:	bl	1130c <strlen@plt>
   137f8:	mov	r5, r0
   137fc:	add	r6, r5, #1
   13800:	add	r0, r0, #2
   13804:	bl	11240 <xmalloc@plt>
   13808:	mov	r1, r4
   1380c:	bl	11264 <strcpy@plt>
   13810:	ldr	r2, [pc, #344]	; 13970 <__assert_fail@plt+0x24cc>
   13814:	mov	r1, #0
   13818:	add	r2, pc, r2
   1381c:	mov	r3, r0
   13820:	mov	r0, #47	; 0x2f
   13824:	strb	r0, [r3, r5]
   13828:	str	r3, [r2]
   1382c:	strb	r1, [r3, r6]
   13830:	mov	r0, r3
   13834:	pop	{r4, r5, r6, pc}
   13838:	ldr	r0, [pc, #308]	; 13974 <__assert_fail@plt+0x24d0>
   1383c:	add	r0, pc, r0
   13840:	bl	112a0 <getenv@plt>
   13844:	mov	r4, r0
   13848:	cmp	r4, #0
   1384c:	beq	1394c <__assert_fail@plt+0x24a8>
   13850:	mov	r1, #7
   13854:	mov	r0, r4
   13858:	bl	1136c <access@plt>
   1385c:	cmp	r0, #0
   13860:	beq	137e4 <__assert_fail@plt+0x2340>
   13864:	ldr	r0, [pc, #268]	; 13978 <__assert_fail@plt+0x24d4>
   13868:	add	r0, pc, r0
   1386c:	bl	112a0 <getenv@plt>
   13870:	mov	r4, r0
   13874:	cmp	r4, #0
   13878:	beq	13890 <__assert_fail@plt+0x23ec>
   1387c:	mov	r1, #7
   13880:	mov	r0, r4
   13884:	bl	1136c <access@plt>
   13888:	cmp	r0, #0
   1388c:	beq	137f0 <__assert_fail@plt+0x234c>
   13890:	ldr	r4, [pc, #228]	; 1397c <__assert_fail@plt+0x24d8>
   13894:	mov	r1, #7
   13898:	add	r4, pc, r4
   1389c:	mov	r0, r4
   138a0:	bl	1136c <access@plt>
   138a4:	cmp	r0, #0
   138a8:	moveq	r6, #5
   138ac:	moveq	r0, #6
   138b0:	moveq	r5, #4
   138b4:	beq	13804 <__assert_fail@plt+0x2360>
   138b8:	ldr	r4, [pc, #192]	; 13980 <__assert_fail@plt+0x24dc>
   138bc:	mov	r1, #7
   138c0:	add	r4, pc, r4
   138c4:	add	r6, r4, #20
   138c8:	mov	r0, r6
   138cc:	bl	1136c <access@plt>
   138d0:	cmp	r0, #0
   138d4:	bne	138f4 <__assert_fail@plt+0x2450>
   138d8:	mov	r0, r6
   138dc:	bl	1130c <strlen@plt>
   138e0:	mov	r4, r6
   138e4:	mov	r5, r0
   138e8:	add	r6, r5, #1
   138ec:	add	r0, r0, #2
   138f0:	b	13804 <__assert_fail@plt+0x2360>
   138f4:	mov	r1, #7
   138f8:	mov	r0, r4
   138fc:	bl	1136c <access@plt>
   13900:	cmp	r0, #0
   13904:	beq	137f0 <__assert_fail@plt+0x234c>
   13908:	add	r4, r4, #12
   1390c:	mov	r0, r4
   13910:	mov	r1, #7
   13914:	bl	1136c <access@plt>
   13918:	cmp	r0, #0
   1391c:	beq	137f0 <__assert_fail@plt+0x234c>
   13920:	ldr	r4, [pc, #92]	; 13984 <__assert_fail@plt+0x24e0>
   13924:	mov	r6, #2
   13928:	mov	r0, #3
   1392c:	mov	r5, #1
   13930:	add	r4, pc, r4
   13934:	b	13804 <__assert_fail@plt+0x2360>
   13938:	ldr	r0, [pc, #72]	; 13988 <__assert_fail@plt+0x24e4>
   1393c:	add	r0, pc, r0
   13940:	bl	112a0 <getenv@plt>
   13944:	mov	r4, r0
   13948:	b	13848 <__assert_fail@plt+0x23a4>
   1394c:	ldr	r0, [pc, #56]	; 1398c <__assert_fail@plt+0x24e8>
   13950:	add	r0, pc, r0
   13954:	bl	112a0 <getenv@plt>
   13958:	mov	r4, r0
   1395c:	b	13874 <__assert_fail@plt+0x23d0>
   13960:	ldrdeq	r1, [r1], -r4
   13964:	andeq	r0, r0, r8, ror #25
   13968:	andeq	r0, r0, ip, asr #25
   1396c:	andeq	r0, r0, r4, asr #25
   13970:	andeq	r1, r1, r4, asr sl
   13974:	andeq	r0, r0, ip, ror #24
   13978:	andeq	r0, r0, r4, asr #24
   1397c:	strdeq	r0, [r0], -ip
   13980:			; <UNDEFINED> instruction: 0x00000bb4
   13984:	andeq	r0, r0, ip, ror #22
   13988:	andeq	r0, r0, ip, ror #22
   1398c:	andeq	r0, r0, ip, asr fp
   13990:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13994:	mov	r6, r0
   13998:	bl	13794 <__assert_fail@plt+0x22f0>
   1399c:	ldr	r8, [pc, #228]	; 13a88 <__assert_fail@plt+0x25e4>
   139a0:	cmp	r6, #0
   139a4:	add	r8, pc, r8
   139a8:	mov	r7, r0
   139ac:	beq	13a3c <__assert_fail@plt+0x2598>
   139b0:	mov	r0, r6
   139b4:	bl	1130c <strlen@plt>
   139b8:	mov	r4, r0
   139bc:	mov	r9, r0
   139c0:	mov	r0, r7
   139c4:	bl	1130c <strlen@plt>
   139c8:	mov	r5, r0
   139cc:	add	r0, r0, r4
   139d0:	add	r0, r0, #9
   139d4:	bl	11240 <xmalloc@plt>
   139d8:	mov	r1, r7
   139dc:	mov	r4, r0
   139e0:	bl	11264 <strcpy@plt>
   139e4:	ldr	r3, [pc, #160]	; 13a8c <__assert_fail@plt+0x25e8>
   139e8:	add	r2, r4, r5
   139ec:	add	r3, pc, r3
   139f0:	add	ip, r5, #8
   139f4:	ldm	r3!, {r0, r1}
   139f8:	ldrb	r3, [r3]
   139fc:	str	r0, [r4, r5]
   13a00:	str	r1, [r2, #4]
   13a04:	add	r0, r4, ip
   13a08:	mov	r1, r6
   13a0c:	strb	r3, [r2, #8]
   13a10:	bl	11264 <strcpy@plt>
   13a14:	mov	r1, r9
   13a18:	mov	r0, r4
   13a1c:	bl	11294 <mkstemps64@plt>
   13a20:	cmn	r0, #1
   13a24:	beq	13a50 <__assert_fail@plt+0x25ac>
   13a28:	bl	11498 <close@plt>
   13a2c:	cmp	r0, #0
   13a30:	bne	13a84 <__assert_fail@plt+0x25e0>
   13a34:	mov	r0, r4
   13a38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a3c:	mov	r9, r6
   13a40:	mov	r4, r6
   13a44:	ldr	r6, [pc, #68]	; 13a90 <__assert_fail@plt+0x25ec>
   13a48:	add	r6, pc, r6
   13a4c:	b	139c0 <__assert_fail@plt+0x251c>
   13a50:	ldr	r3, [pc, #60]	; 13a94 <__assert_fail@plt+0x25f0>
   13a54:	ldr	r3, [r8, r3]
   13a58:	ldr	r4, [r3]
   13a5c:	bl	1133c <__errno_location@plt>
   13a60:	ldr	r0, [r0]
   13a64:	bl	112d0 <strerror@plt>
   13a68:	ldr	r1, [pc, #40]	; 13a98 <__assert_fail@plt+0x25f4>
   13a6c:	mov	r2, r7
   13a70:	add	r1, pc, r1
   13a74:	mov	r3, r0
   13a78:	mov	r0, r4
   13a7c:	bl	11324 <fprintf@plt>
   13a80:	bl	1148c <abort@plt>
   13a84:	bl	1148c <abort@plt>
   13a88:	andeq	r1, r1, r4, asr r6
   13a8c:	andeq	r0, r0, r8, asr #21
   13a90:	andeq	r0, r0, r8, lsl #8
   13a94:	andeq	r0, r0, r0, asr #2
   13a98:	andeq	r0, r0, r0, asr sl
   13a9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13aa0:	mov	r7, r0
   13aa4:	ldr	r6, [pc, #72]	; 13af4 <__assert_fail@plt+0x2650>
   13aa8:	ldr	r5, [pc, #72]	; 13af8 <__assert_fail@plt+0x2654>
   13aac:	add	r6, pc, r6
   13ab0:	add	r5, pc, r5
   13ab4:	sub	r6, r6, r5
   13ab8:	mov	r8, r1
   13abc:	mov	r9, r2
   13ac0:	bl	11100 <cplus_demangle_name_to_style@plt-0x20>
   13ac4:	asrs	r6, r6, #2
   13ac8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13acc:	mov	r4, #0
   13ad0:	add	r4, r4, #1
   13ad4:	ldr	r3, [r5], #4
   13ad8:	mov	r2, r9
   13adc:	mov	r1, r8
   13ae0:	mov	r0, r7
   13ae4:	blx	r3
   13ae8:	cmp	r6, r4
   13aec:	bne	13ad0 <__assert_fail@plt+0x262c>
   13af0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13af4:	andeq	r1, r1, r8, asr #8
   13af8:	andeq	r1, r1, r0, asr #8
   13afc:	bx	lr

Disassembly of section .fini:

00013b00 <.fini>:
   13b00:	push	{r3, lr}
   13b04:	pop	{r3, pc}
