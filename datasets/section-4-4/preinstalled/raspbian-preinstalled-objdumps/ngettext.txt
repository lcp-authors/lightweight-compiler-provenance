
raspbian-preinstalled/ngettext:     file format elf32-littlearm


Disassembly of section .init:

00010e78 <.init>:
   10e78:	push	{r3, lr}
   10e7c:	bl	11674 <__assert_fail@plt+0x500>
   10e80:	pop	{r3, pc}

Disassembly of section .plt:

00010e84 <fdopen@plt-0x14>:
   10e84:	push	{lr}		; (str lr, [sp, #-4]!)
   10e88:	ldr	lr, [pc, #4]	; 10e94 <fdopen@plt-0x4>
   10e8c:	add	lr, pc, lr
   10e90:	ldr	pc, [lr, #8]!
   10e94:	andeq	r5, r1, ip, ror #2

00010e98 <fdopen@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #364]!	; 0x16c

00010ea4 <calloc@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #356]!	; 0x164

00010eb0 <iconv_close@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #348]!	; 0x15c

00010ebc <iconv@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #340]!	; 0x154

00010ec8 <strcmp@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #332]!	; 0x14c

00010ed4 <basename@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #324]!	; 0x144

00010ee0 <fflush@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #316]!	; 0x13c

00010eec <wcwidth@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #308]!	; 0x134

00010ef8 <memmove@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #300]!	; 0x12c

00010f04 <free@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #292]!	; 0x124

00010f10 <ferror@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #284]!	; 0x11c

00010f1c <memcpy@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #276]!	; 0x114

00010f28 <mbsinit@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #268]!	; 0x10c

00010f34 <memcmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #260]!	; 0x104

00010f40 <dcgettext@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #252]!	; 0xfc

00010f4c <strdup@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #244]!	; 0xf4

00010f58 <__stack_chk_fail@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #236]!	; 0xec

00010f64 <realloc@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #228]!	; 0xe4

00010f70 <textdomain@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #220]!	; 0xdc

00010f7c <iswcntrl@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #212]!	; 0xd4

00010f88 <fwrite@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #204]!	; 0xcc

00010f94 <__ctype_get_mb_cur_max@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #196]!	; 0xc4

00010fa0 <mbrtowc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #188]!	; 0xbc

00010fac <error@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #180]!	; 0xb4

00010fb8 <open64@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #172]!	; 0xac

00010fc4 <getenv@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #164]!	; 0xa4

00010fd0 <malloc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #156]!	; 0x9c

00010fdc <iconv_open@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #148]!	; 0x94

00010fe8 <__libc_start_main@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #140]!	; 0x8c

00010ff4 <__gmon_start__@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #132]!	; 0x84

00011000 <getopt_long@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #124]!	; 0x7c

0001100c <__ctype_b_loc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #116]!	; 0x74

00011018 <exit@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #108]!	; 0x6c

00011024 <iswspace@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #100]!	; 0x64

00011030 <strtoul@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #92]!	; 0x5c

0001103c <strlen@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #84]!	; 0x54

00011048 <strchr@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #76]!	; 0x4c

00011054 <ungetc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #68]!	; 0x44

00011060 <__errno_location@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #60]!	; 0x3c

0001106c <iswalnum@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #86016	; 0x15000
   11074:	ldr	pc, [ip, #52]!	; 0x34

00011078 <__sprintf_chk@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #86016	; 0x15000
   11080:	ldr	pc, [ip, #44]!	; 0x2c

00011084 <__cxa_atexit@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #86016	; 0x15000
   1108c:	ldr	pc, [ip, #36]!	; 0x24

00011090 <memset@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #86016	; 0x15000
   11098:	ldr	pc, [ip, #28]!

0001109c <putchar@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #86016	; 0x15000
   110a4:	ldr	pc, [ip, #20]!

000110a8 <fscanf@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #86016	; 0x15000
   110b0:	ldr	pc, [ip, #12]!

000110b4 <__printf_chk@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #86016	; 0x15000
   110bc:	ldr	pc, [ip, #4]!

000110c0 <__fprintf_chk@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #20, 20	; 0x14000
   110c8:	ldr	pc, [ip, #4092]!	; 0xffc

000110cc <memchr@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #20, 20	; 0x14000
   110d4:	ldr	pc, [ip, #4084]!	; 0xff4

000110d8 <fclose@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #20, 20	; 0x14000
   110e0:	ldr	pc, [ip, #4076]!	; 0xfec

000110e4 <strnlen@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #20, 20	; 0x14000
   110ec:	ldr	pc, [ip, #4068]!	; 0xfe4

000110f0 <__uflow@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #20, 20	; 0x14000
   110f8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110fc <setlocale@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #20, 20	; 0x14000
   11104:	ldr	pc, [ip, #4052]!	; 0xfd4

00011108 <strrchr@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #20, 20	; 0x14000
   11110:	ldr	pc, [ip, #4044]!	; 0xfcc

00011114 <nl_langinfo@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #20, 20	; 0x14000
   1111c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011120 <fputc@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #20, 20	; 0x14000
   11128:	ldr	pc, [ip, #4028]!	; 0xfbc

0001112c <bindtextdomain@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #20, 20	; 0x14000
   11134:	ldr	pc, [ip, #4020]!	; 0xfb4

00011138 <fputs@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #20, 20	; 0x14000
   11140:	ldr	pc, [ip, #4012]!	; 0xfac

00011144 <strncmp@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #20, 20	; 0x14000
   1114c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011150 <abort@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #20, 20	; 0x14000
   11158:	ldr	pc, [ip, #3996]!	; 0xf9c

0001115c <close@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #20, 20	; 0x14000
   11164:	ldr	pc, [ip, #3988]!	; 0xf94

00011168 <dcngettext@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #20, 20	; 0x14000
   11170:	ldr	pc, [ip, #3980]!	; 0xf8c

00011174 <__assert_fail@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #20, 20	; 0x14000
   1117c:	ldr	pc, [ip, #3972]!	; 0xf84

Disassembly of section .text:

00011180 <.text>:
   11180:	ldr	r3, [pc, #1076]	; 115bc <__assert_fail@plt+0x448>
   11184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11188:	sub	sp, sp, #28
   1118c:	ldr	r3, [r3]
   11190:	mov	r7, r0
   11194:	ldr	r0, [pc, #1060]	; 115c0 <__assert_fail@plt+0x44c>
   11198:	str	r3, [sp, #20]
   1119c:	mov	r5, r1
   111a0:	bl	10fc4 <getenv@plt>
   111a4:	ldr	fp, [pc, #1048]	; 115c4 <__assert_fail@plt+0x450>
   111a8:	mov	r6, #0
   111ac:	ldr	r9, [pc, #1044]	; 115c8 <__assert_fail@plt+0x454>
   111b0:	ldr	r8, [pc, #1044]	; 115cc <__assert_fail@plt+0x458>
   111b4:	mov	sl, r6
   111b8:	str	r0, [sp, #8]
   111bc:	ldr	r0, [pc, #1036]	; 115d0 <__assert_fail@plt+0x45c>
   111c0:	bl	10fc4 <getenv@plt>
   111c4:	str	r6, [fp]
   111c8:	str	r0, [sp, #12]
   111cc:	ldr	r0, [r5]
   111d0:	bl	11bcc <__assert_fail@plt+0xa58>
   111d4:	ldr	r1, [pc, #1016]	; 115d4 <__assert_fail@plt+0x460>
   111d8:	mov	r0, #6
   111dc:	bl	110fc <setlocale@plt>
   111e0:	ldr	r1, [pc, #1008]	; 115d8 <__assert_fail@plt+0x464>
   111e4:	ldr	r0, [pc, #1008]	; 115dc <__assert_fail@plt+0x468>
   111e8:	bl	1112c <bindtextdomain@plt>
   111ec:	ldr	r0, [pc, #1000]	; 115dc <__assert_fail@plt+0x468>
   111f0:	bl	10f70 <textdomain@plt>
   111f4:	ldr	r0, [pc, #996]	; 115e0 <__assert_fail@plt+0x46c>
   111f8:	bl	15344 <__assert_fail@plt+0x41d0>
   111fc:	mov	r4, #0
   11200:	str	r4, [sp]
   11204:	mov	r3, r9
   11208:	mov	r2, r8
   1120c:	mov	r1, r5
   11210:	mov	r0, r7
   11214:	bl	11000 <getopt_long@plt>
   11218:	cmn	r0, #1
   1121c:	beq	112bc <__assert_fail@plt+0x148>
   11220:	cmp	r0, #86	; 0x56
   11224:	beq	112a4 <__assert_fail@plt+0x130>
   11228:	ble	1127c <__assert_fail@plt+0x108>
   1122c:	cmp	r0, #101	; 0x65
   11230:	beq	11298 <__assert_fail@plt+0x124>
   11234:	cmp	r0, #104	; 0x68
   11238:	beq	11290 <__assert_fail@plt+0x11c>
   1123c:	cmp	r0, #100	; 0x64
   11240:	beq	112ac <__assert_fail@plt+0x138>
   11244:	ldr	r3, [pc, #920]	; 115e4 <__assert_fail@plt+0x470>
   11248:	mov	r2, #5
   1124c:	ldr	r1, [pc, #916]	; 115e8 <__assert_fail@plt+0x474>
   11250:	mov	r0, #0
   11254:	ldr	r4, [r3]
   11258:	bl	10f40 <dcgettext@plt>
   1125c:	ldr	r3, [pc, #904]	; 115ec <__assert_fail@plt+0x478>
   11260:	mov	r1, #1
   11264:	ldr	r3, [r3]
   11268:	mov	r2, r0
   1126c:	mov	r0, r4
   11270:	bl	110c0 <__fprintf_chk@plt>
   11274:	mov	r0, #1
   11278:	bl	11018 <exit@plt>
   1127c:	cmp	r0, #0
   11280:	beq	111fc <__assert_fail@plt+0x88>
   11284:	cmp	r0, #69	; 0x45
   11288:	beq	111fc <__assert_fail@plt+0x88>
   1128c:	b	11244 <__assert_fail@plt+0xd0>
   11290:	mov	sl, #1
   11294:	b	111fc <__assert_fail@plt+0x88>
   11298:	mov	r3, #1
   1129c:	str	r3, [fp]
   112a0:	b	111fc <__assert_fail@plt+0x88>
   112a4:	mov	r6, #1
   112a8:	b	111fc <__assert_fail@plt+0x88>
   112ac:	ldr	r3, [pc, #828]	; 115f0 <__assert_fail@plt+0x47c>
   112b0:	ldr	r3, [r3]
   112b4:	str	r3, [sp, #8]
   112b8:	b	111fc <__assert_fail@plt+0x88>
   112bc:	cmp	r6, r4
   112c0:	bne	112f8 <__assert_fail@plt+0x184>
   112c4:	cmp	sl, #0
   112c8:	bne	114a8 <__assert_fail@plt+0x334>
   112cc:	ldr	r4, [pc, #800]	; 115f4 <__assert_fail@plt+0x480>
   112d0:	ldr	r3, [r4]
   112d4:	sub	r3, r7, r3
   112d8:	cmp	r3, #4
   112dc:	ldrls	pc, [pc, r3, lsl #2]
   112e0:	b	11450 <__assert_fail@plt+0x2dc>
   112e4:	andeq	r1, r1, r4, ror r3
   112e8:	andeq	r1, r1, r4, ror r3
   112ec:	andeq	r1, r1, r4, ror r3
   112f0:	muleq	r1, r4, r3
   112f4:	andeq	r1, r1, r0, ror r4
   112f8:	ldr	r3, [pc, #748]	; 115ec <__assert_fail@plt+0x478>
   112fc:	ldr	r0, [r3]
   11300:	bl	10ed4 <basename@plt>
   11304:	ldr	r2, [pc, #748]	; 115f8 <__assert_fail@plt+0x484>
   11308:	ldr	r3, [pc, #716]	; 115dc <__assert_fail@plt+0x468>
   1130c:	str	r2, [sp]
   11310:	ldr	r1, [pc, #740]	; 115fc <__assert_fail@plt+0x488>
   11314:	mov	r2, r0
   11318:	mov	r0, #1
   1131c:	bl	110b4 <__printf_chk@plt>
   11320:	mov	r2, #5
   11324:	ldr	r1, [pc, #724]	; 11600 <__assert_fail@plt+0x48c>
   11328:	mov	r0, r4
   1132c:	bl	10f40 <dcgettext@plt>
   11330:	ldr	r2, [pc, #716]	; 11604 <__assert_fail@plt+0x490>
   11334:	mov	r1, r0
   11338:	mov	r0, #1
   1133c:	bl	110b4 <__printf_chk@plt>
   11340:	mov	r2, #5
   11344:	ldr	r1, [pc, #700]	; 11608 <__assert_fail@plt+0x494>
   11348:	mov	r0, r4
   1134c:	bl	10f40 <dcgettext@plt>
   11350:	mov	r5, r0
   11354:	ldr	r0, [pc, #688]	; 1160c <__assert_fail@plt+0x498>
   11358:	bl	12480 <__assert_fail@plt+0x130c>
   1135c:	mov	r1, r5
   11360:	mov	r2, r0
   11364:	mov	r0, #1
   11368:	bl	110b4 <__printf_chk@plt>
   1136c:	mov	r0, r4
   11370:	bl	11018 <exit@plt>
   11374:	mov	r2, #5
   11378:	ldr	r1, [pc, #656]	; 11610 <__assert_fail@plt+0x49c>
   1137c:	mov	r0, #0
   11380:	bl	10f40 <dcgettext@plt>
   11384:	mov	r1, #0
   11388:	mov	r2, r0
   1138c:	mov	r0, #1
   11390:	bl	10fac <error@plt>
   11394:	ldr	r3, [r4]
   11398:	add	r2, r3, #3
   1139c:	add	r1, r5, r3, lsl #2
   113a0:	cmp	r2, r7
   113a4:	ldr	r5, [r5, r3, lsl #2]
   113a8:	ldrd	r6, [r1, #4]
   113ac:	str	r2, [r4]
   113b0:	bne	115b8 <__assert_fail@plt+0x444>
   113b4:	bl	11060 <__errno_location@plt>
   113b8:	mov	r3, #0
   113bc:	mov	r2, #10
   113c0:	add	r1, sp, #16
   113c4:	str	r3, [r0]
   113c8:	mov	r8, r0
   113cc:	mov	r0, r7
   113d0:	bl	11030 <strtoul@plt>
   113d4:	ldr	r3, [r8]
   113d8:	cmp	r3, #0
   113dc:	mov	r4, r0
   113e0:	bne	113f0 <__assert_fail@plt+0x27c>
   113e4:	ldrb	r3, [r7]
   113e8:	cmp	r3, #0
   113ec:	bne	1157c <__assert_fail@plt+0x408>
   113f0:	mov	r4, #99	; 0x63
   113f4:	ldr	r3, [fp]
   113f8:	cmp	r3, #0
   113fc:	bne	11590 <__assert_fail@plt+0x41c>
   11400:	ldr	r3, [sp, #8]
   11404:	cmp	r3, #0
   11408:	beq	11488 <__assert_fail@plt+0x314>
   1140c:	ldrb	r3, [r3]
   11410:	cmp	r3, #0
   11414:	beq	11488 <__assert_fail@plt+0x314>
   11418:	ldr	r3, [sp, #12]
   1141c:	cmp	r3, #0
   11420:	beq	11430 <__assert_fail@plt+0x2bc>
   11424:	ldrb	r3, [r3]
   11428:	cmp	r3, #0
   1142c:	bne	115ac <__assert_fail@plt+0x438>
   11430:	mov	ip, #5
   11434:	mov	r3, r4
   11438:	mov	r2, r6
   1143c:	mov	r1, r5
   11440:	ldr	r0, [sp, #8]
   11444:	str	ip, [sp]
   11448:	bl	11168 <dcngettext@plt>
   1144c:	b	1156c <__assert_fail@plt+0x3f8>
   11450:	mov	r2, #5
   11454:	ldr	r1, [pc, #440]	; 11614 <__assert_fail@plt+0x4a0>
   11458:	mov	r0, #0
   1145c:	bl	10f40 <dcgettext@plt>
   11460:	mov	r1, #0
   11464:	mov	r2, r0
   11468:	mov	r0, #1
   1146c:	bl	10fac <error@plt>
   11470:	ldr	r3, [r4]
   11474:	add	r2, r3, #1
   11478:	ldr	r3, [r5, r3, lsl #2]
   1147c:	str	r2, [r4]
   11480:	str	r3, [sp, #8]
   11484:	b	11394 <__assert_fail@plt+0x220>
   11488:	ldr	r3, [pc, #392]	; 11618 <__assert_fail@plt+0x4a4>
   1148c:	cmp	r4, #1
   11490:	moveq	r0, r5
   11494:	movne	r0, r6
   11498:	ldr	r1, [r3]
   1149c:	bl	11138 <fputs@plt>
   114a0:	mov	r0, #0
   114a4:	bl	11018 <exit@plt>
   114a8:	mov	r2, #5
   114ac:	ldr	r1, [pc, #360]	; 1161c <__assert_fail@plt+0x4a8>
   114b0:	mov	r0, r6
   114b4:	bl	10f40 <dcgettext@plt>
   114b8:	ldr	r3, [pc, #300]	; 115ec <__assert_fail@plt+0x478>
   114bc:	ldr	r2, [r3]
   114c0:	mov	r1, r0
   114c4:	mov	r0, #1
   114c8:	bl	110b4 <__printf_chk@plt>
   114cc:	mov	r0, #10
   114d0:	bl	1109c <putchar@plt>
   114d4:	mov	r2, #5
   114d8:	ldr	r1, [pc, #320]	; 11620 <__assert_fail@plt+0x4ac>
   114dc:	mov	r0, r6
   114e0:	bl	10f40 <dcgettext@plt>
   114e4:	mov	r1, r0
   114e8:	mov	r0, #1
   114ec:	bl	110b4 <__printf_chk@plt>
   114f0:	mov	r0, #10
   114f4:	bl	1109c <putchar@plt>
   114f8:	mov	r2, #5
   114fc:	ldr	r1, [pc, #288]	; 11624 <__assert_fail@plt+0x4b0>
   11500:	mov	r0, r6
   11504:	bl	10f40 <dcgettext@plt>
   11508:	mov	r1, r0
   1150c:	mov	r0, #1
   11510:	bl	110b4 <__printf_chk@plt>
   11514:	mov	r0, #10
   11518:	bl	1109c <putchar@plt>
   1151c:	mov	r2, #5
   11520:	ldr	r1, [pc, #256]	; 11628 <__assert_fail@plt+0x4b4>
   11524:	mov	r0, r6
   11528:	bl	10f40 <dcgettext@plt>
   1152c:	mov	r4, r0
   11530:	ldr	r0, [pc, #244]	; 1162c <__assert_fail@plt+0x4b8>
   11534:	bl	10fc4 <getenv@plt>
   11538:	ldr	r3, [pc, #240]	; 11630 <__assert_fail@plt+0x4bc>
   1153c:	ldr	r2, [pc, #148]	; 115d8 <__assert_fail@plt+0x464>
   11540:	mov	r1, r4
   11544:	cmp	r0, #0
   11548:	movne	r2, r3
   1154c:	mov	r0, #1
   11550:	bl	110b4 <__printf_chk@plt>
   11554:	mov	r0, #10
   11558:	bl	1109c <putchar@plt>
   1155c:	mov	r2, #5
   11560:	ldr	r1, [pc, #204]	; 11634 <__assert_fail@plt+0x4c0>
   11564:	mov	r0, r6
   11568:	bl	10f40 <dcgettext@plt>
   1156c:	ldr	r3, [pc, #164]	; 11618 <__assert_fail@plt+0x4a4>
   11570:	ldr	r1, [r3]
   11574:	bl	11138 <fputs@plt>
   11578:	b	114a0 <__assert_fail@plt+0x32c>
   1157c:	ldr	r3, [sp, #16]
   11580:	ldrb	r3, [r3]
   11584:	cmp	r3, #0
   11588:	movne	r4, #99	; 0x63
   1158c:	b	113f4 <__assert_fail@plt+0x280>
   11590:	mov	r0, r5
   11594:	bl	11728 <__assert_fail@plt+0x5b4>
   11598:	mov	r5, r0
   1159c:	mov	r0, r6
   115a0:	bl	11728 <__assert_fail@plt+0x5b4>
   115a4:	mov	r6, r0
   115a8:	b	11400 <__assert_fail@plt+0x28c>
   115ac:	ldrd	r0, [sp, #8]
   115b0:	bl	1112c <bindtextdomain@plt>
   115b4:	b	11430 <__assert_fail@plt+0x2bc>
   115b8:	bl	11150 <abort@plt>
   115bc:	andeq	r5, r2, r8, lsl #30
   115c0:	ldrdeq	r5, [r1], -ip
   115c4:	andeq	r6, r2, r8, lsr r1
   115c8:	andeq	r5, r1, r8, ror #6
   115cc:	andeq	r5, r1, r0, lsr r4
   115d0:	andeq	r5, r1, r8, ror #7
   115d4:	andeq	r5, r1, r0, asr r4
   115d8:			; <UNDEFINED> instruction: 0x000153bc
   115dc:	strdeq	r5, [r1], -r8
   115e0:	andeq	r1, r1, r0, ror #19
   115e4:	andeq	r6, r2, r8, lsr #2
   115e8:	andeq	r5, r1, r8, lsl #8
   115ec:	andeq	r6, r2, r0, asr #2
   115f0:	andeq	r6, r2, r0, lsr r1
   115f4:	andeq	r6, r2, r0, lsr #2
   115f8:	andeq	r5, r1, r8, asr #8
   115fc:	andeq	r5, r1, r8, lsr r4
   11600:	andeq	r5, r1, r4, asr r4
   11604:	andeq	r5, r1, ip, asr #10
   11608:	andeq	r5, r1, r4, ror #10
   1160c:	andeq	r5, r1, r4, ror r5
   11610:			; <UNDEFINED> instruction: 0x000159b4
   11614:	andeq	r5, r1, r0, lsr #19
   11618:	andeq	r6, r2, ip, lsr #2
   1161c:	andeq	r5, r1, r4, lsl #11
   11620:	andeq	r5, r1, r0, asr #11
   11624:	andeq	r5, r1, r8, lsr #12
   11628:	andeq	r5, r1, ip, asr #16
   1162c:	andeq	r5, r1, r8, ror #18
   11630:	ldrdeq	r5, [r1], -r0
   11634:	andeq	r5, r1, r4, ror r9
   11638:	mov	fp, #0
   1163c:	mov	lr, #0
   11640:	pop	{r1}		; (ldr r1, [sp], #4)
   11644:	mov	r2, sp
   11648:	push	{r2}		; (str r2, [sp, #-4]!)
   1164c:	push	{r0}		; (str r0, [sp, #-4]!)
   11650:	ldr	ip, [pc, #16]	; 11668 <__assert_fail@plt+0x4f4>
   11654:	push	{ip}		; (str ip, [sp, #-4]!)
   11658:	ldr	r0, [pc, #12]	; 1166c <__assert_fail@plt+0x4f8>
   1165c:	ldr	r3, [pc, #12]	; 11670 <__assert_fail@plt+0x4fc>
   11660:	bl	10fe8 <__libc_start_main@plt>
   11664:	bl	11150 <abort@plt>
   11668:	andeq	r5, r1, r0, asr #6
   1166c:	andeq	r1, r1, r0, lsl #3
   11670:	andeq	r5, r1, r0, ror #5
   11674:	ldr	r3, [pc, #20]	; 11690 <__assert_fail@plt+0x51c>
   11678:	ldr	r2, [pc, #20]	; 11694 <__assert_fail@plt+0x520>
   1167c:	add	r3, pc, r3
   11680:	ldr	r2, [r3, r2]
   11684:	cmp	r2, #0
   11688:	bxeq	lr
   1168c:	b	10ff4 <__gmon_start__@plt>
   11690:	andeq	r4, r1, ip, ror r9
   11694:	andeq	r0, r0, r4, lsl #2
   11698:	ldr	r0, [pc, #24]	; 116b8 <__assert_fail@plt+0x544>
   1169c:	ldr	r3, [pc, #24]	; 116bc <__assert_fail@plt+0x548>
   116a0:	cmp	r3, r0
   116a4:	bxeq	lr
   116a8:	ldr	r3, [pc, #16]	; 116c0 <__assert_fail@plt+0x54c>
   116ac:	cmp	r3, #0
   116b0:	bxeq	lr
   116b4:	bx	r3
   116b8:	andeq	r6, r2, r4, lsl r1
   116bc:	andeq	r6, r2, r4, lsl r1
   116c0:	andeq	r0, r0, r0
   116c4:	ldr	r0, [pc, #36]	; 116f0 <__assert_fail@plt+0x57c>
   116c8:	ldr	r1, [pc, #36]	; 116f4 <__assert_fail@plt+0x580>
   116cc:	sub	r1, r1, r0
   116d0:	asr	r1, r1, #2
   116d4:	add	r1, r1, r1, lsr #31
   116d8:	asrs	r1, r1, #1
   116dc:	bxeq	lr
   116e0:	ldr	r3, [pc, #16]	; 116f8 <__assert_fail@plt+0x584>
   116e4:	cmp	r3, #0
   116e8:	bxeq	lr
   116ec:	bx	r3
   116f0:	andeq	r6, r2, r4, lsl r1
   116f4:	andeq	r6, r2, r4, lsl r1
   116f8:	andeq	r0, r0, r0
   116fc:	push	{r4, lr}
   11700:	ldr	r4, [pc, #24]	; 11720 <__assert_fail@plt+0x5ac>
   11704:	ldrb	r3, [r4]
   11708:	cmp	r3, #0
   1170c:	popne	{r4, pc}
   11710:	bl	11698 <__assert_fail@plt+0x524>
   11714:	mov	r3, #1
   11718:	strb	r3, [r4]
   1171c:	pop	{r4, pc}
   11720:	andeq	r6, r2, r4, lsr r1
   11724:	b	116c4 <__assert_fail@plt+0x550>
   11728:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1172c:	mov	r7, r0
   11730:	ldr	r6, [pc, #676]	; 119dc <__assert_fail@plt+0x868>
   11734:	mov	r5, r0
   11738:	ldrb	r3, [r5]
   1173c:	mov	r4, r5
   11740:	mov	r0, r6
   11744:	cmp	r3, #0
   11748:	cmpne	r3, #92	; 0x5c
   1174c:	add	r5, r5, #1
   11750:	bne	11738 <__assert_fail@plt+0x5c4>
   11754:	cmp	r3, #0
   11758:	beq	118e8 <__assert_fail@plt+0x774>
   1175c:	ldrb	r3, [r5]
   11760:	subs	r1, r3, #0
   11764:	beq	118e8 <__assert_fail@plt+0x774>
   11768:	bl	11048 <strchr@plt>
   1176c:	cmp	r0, #0
   11770:	beq	11738 <__assert_fail@plt+0x5c4>
   11774:	mov	r0, r7
   11778:	bl	1103c <strlen@plt>
   1177c:	bl	12d64 <__assert_fail@plt+0x1bf0>
   11780:	sub	r5, r4, r7
   11784:	mov	r1, r7
   11788:	mov	r2, r5
   1178c:	mov	sl, #11
   11790:	mov	r9, #9
   11794:	mov	r8, #13
   11798:	mov	r7, #10
   1179c:	mov	r6, r0
   117a0:	add	r5, r0, r5
   117a4:	bl	10f1c <memcpy@plt>
   117a8:	mov	r1, #92	; 0x5c
   117ac:	mov	lr, #12
   117b0:	mov	ip, #8
   117b4:	mov	r0, #7
   117b8:	ldrb	r3, [r4, #1]
   117bc:	sub	r3, r3, #48	; 0x30
   117c0:	cmp	r3, #70	; 0x46
   117c4:	ldrls	pc, [pc, r3, lsl #2]
   117c8:	b	119ac <__assert_fail@plt+0x838>
   117cc:	andeq	r1, r1, ip, lsl #19
   117d0:	andeq	r1, r1, ip, lsl #19
   117d4:	andeq	r1, r1, ip, lsl #19
   117d8:	andeq	r1, r1, ip, lsl #19
   117dc:	andeq	r1, r1, ip, lsl #19
   117e0:	andeq	r1, r1, ip, lsl #19
   117e4:	andeq	r1, r1, ip, lsl #19
   117e8:	andeq	r1, r1, ip, lsl #19
   117ec:	andeq	r1, r1, ip, lsr #19
   117f0:	andeq	r1, r1, ip, lsr #19
   117f4:	andeq	r1, r1, ip, lsr #19
   117f8:	andeq	r1, r1, ip, lsr #19
   117fc:	andeq	r1, r1, ip, lsr #19
   11800:	andeq	r1, r1, ip, lsr #19
   11804:	andeq	r1, r1, ip, lsr #19
   11808:	andeq	r1, r1, ip, lsr #19
   1180c:	andeq	r1, r1, ip, lsr #19
   11810:	andeq	r1, r1, ip, lsr #19
   11814:	andeq	r1, r1, ip, lsr #19
   11818:	andeq	r1, r1, ip, lsr #19
   1181c:	andeq	r1, r1, ip, lsr #19
   11820:	andeq	r1, r1, ip, lsr #19
   11824:	andeq	r1, r1, ip, lsr #19
   11828:	andeq	r1, r1, ip, lsr #19
   1182c:	andeq	r1, r1, ip, lsr #19
   11830:	andeq	r1, r1, ip, lsr #19
   11834:	andeq	r1, r1, ip, lsr #19
   11838:	andeq	r1, r1, ip, lsr #19
   1183c:	andeq	r1, r1, ip, lsr #19
   11840:	andeq	r1, r1, ip, lsr #19
   11844:	andeq	r1, r1, ip, lsr #19
   11848:	andeq	r1, r1, ip, lsr #19
   1184c:	andeq	r1, r1, ip, lsr #19
   11850:	andeq	r1, r1, ip, lsr #19
   11854:	andeq	r1, r1, ip, lsr #19
   11858:	andeq	r1, r1, ip, lsr #19
   1185c:	andeq	r1, r1, ip, lsr #19
   11860:	andeq	r1, r1, ip, lsr #19
   11864:	andeq	r1, r1, ip, lsr #19
   11868:	andeq	r1, r1, ip, lsr #19
   1186c:	andeq	r1, r1, ip, lsr #19
   11870:	andeq	r1, r1, ip, lsr #19
   11874:	andeq	r1, r1, ip, lsr #19
   11878:	andeq	r1, r1, ip, lsr #19
   1187c:	andeq	r1, r1, r0, lsl #19
   11880:	andeq	r1, r1, ip, lsr #19
   11884:	andeq	r1, r1, ip, lsr #19
   11888:	andeq	r1, r1, ip, lsr #19
   1188c:	andeq	r1, r1, ip, lsr #19
   11890:	andeq	r1, r1, r4, ror r9
   11894:	andeq	r1, r1, r8, ror #18
   11898:	andeq	r1, r1, ip, lsr #19
   1189c:	andeq	r1, r1, ip, lsr #19
   118a0:	andeq	r1, r1, ip, lsr #19
   118a4:	andeq	r1, r1, ip, asr r9
   118a8:	andeq	r1, r1, ip, lsr #19
   118ac:	andeq	r1, r1, ip, lsr #19
   118b0:	andeq	r1, r1, ip, lsr #19
   118b4:	andeq	r1, r1, ip, lsr #19
   118b8:	andeq	r1, r1, ip, lsr #19
   118bc:	andeq	r1, r1, ip, lsr #19
   118c0:	andeq	r1, r1, ip, lsr #19
   118c4:	andeq	r1, r1, r0, asr r9
   118c8:	andeq	r1, r1, ip, lsr #19
   118cc:	andeq	r1, r1, ip, lsr #19
   118d0:	andeq	r1, r1, ip, lsr #19
   118d4:	andeq	r1, r1, r4, asr #18
   118d8:	andeq	r1, r1, ip, lsr #19
   118dc:	andeq	r1, r1, r8, lsr r9
   118e0:	andeq	r1, r1, ip, lsr #19
   118e4:	strdeq	r1, [r1], -r4
   118e8:	mov	r6, r7
   118ec:	mov	r0, r6
   118f0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118f4:	add	r4, r4, #2
   118f8:	strb	sl, [r5], #1
   118fc:	ldrb	r3, [r4]
   11900:	cmp	r3, #0
   11904:	cmpne	r3, #92	; 0x5c
   11908:	addne	r2, r4, #1
   1190c:	beq	11928 <__assert_fail@plt+0x7b4>
   11910:	strb	r3, [r5], #1
   11914:	mov	r4, r2
   11918:	ldrb	r3, [r2], #1
   1191c:	cmp	r3, #0
   11920:	cmpne	r3, #92	; 0x5c
   11924:	bne	11910 <__assert_fail@plt+0x79c>
   11928:	cmp	r3, #0
   1192c:	bne	117b8 <__assert_fail@plt+0x644>
   11930:	strb	r3, [r5]
   11934:	b	118ec <__assert_fail@plt+0x778>
   11938:	add	r4, r4, #2
   1193c:	strb	r9, [r5], #1
   11940:	b	118fc <__assert_fail@plt+0x788>
   11944:	add	r4, r4, #2
   11948:	strb	r8, [r5], #1
   1194c:	b	118fc <__assert_fail@plt+0x788>
   11950:	add	r4, r4, #2
   11954:	strb	r7, [r5], #1
   11958:	b	118fc <__assert_fail@plt+0x788>
   1195c:	add	r4, r4, #2
   11960:	strb	lr, [r5], #1
   11964:	b	118fc <__assert_fail@plt+0x788>
   11968:	add	r4, r4, #2
   1196c:	strb	ip, [r5], #1
   11970:	b	118fc <__assert_fail@plt+0x788>
   11974:	add	r4, r4, #2
   11978:	strb	r0, [r5], #1
   1197c:	b	118fc <__assert_fail@plt+0x788>
   11980:	strb	r1, [r5]
   11984:	add	r4, r4, #2
   11988:	b	118fc <__assert_fail@plt+0x788>
   1198c:	ldrb	r2, [r4, #2]
   11990:	sub	r2, r2, #48	; 0x30
   11994:	uxtb	fp, r2
   11998:	cmp	fp, #7
   1199c:	addhi	r4, r4, #2
   119a0:	bls	119b8 <__assert_fail@plt+0x844>
   119a4:	strb	r3, [r5]
   119a8:	b	118fc <__assert_fail@plt+0x788>
   119ac:	add	r4, r4, #1
   119b0:	strb	r1, [r5]
   119b4:	b	118fc <__assert_fail@plt+0x788>
   119b8:	ldrb	fp, [r4, #3]
   119bc:	add	r3, r2, r3, lsl #3
   119c0:	sub	r2, fp, #48	; 0x30
   119c4:	uxtb	fp, r2
   119c8:	cmp	fp, #7
   119cc:	addhi	r4, r4, #3
   119d0:	addls	r4, r4, #4
   119d4:	addls	r3, r2, r3, lsl #3
   119d8:	b	119a4 <__assert_fail@plt+0x830>
   119dc:	andeq	r5, r1, r8, lsr #7
   119e0:	ldr	r3, [pc, #168]	; 11a90 <__assert_fail@plt+0x91c>
   119e4:	push	{r4, r5, r6, lr}
   119e8:	ldr	r0, [r3]
   119ec:	bl	11bc4 <__assert_fail@plt+0xa50>
   119f0:	mov	r4, r0
   119f4:	bl	11060 <__errno_location@plt>
   119f8:	cmp	r4, #0
   119fc:	mov	r5, r0
   11a00:	bne	11a54 <__assert_fail@plt+0x8e0>
   11a04:	ldr	r4, [pc, #136]	; 11a94 <__assert_fail@plt+0x920>
   11a08:	mov	r3, #0
   11a0c:	str	r3, [r5]
   11a10:	ldr	r0, [r4]
   11a14:	bl	10f10 <ferror@plt>
   11a18:	cmp	r0, #0
   11a1c:	bne	11a80 <__assert_fail@plt+0x90c>
   11a20:	ldr	r0, [r4]
   11a24:	bl	10ee0 <fflush@plt>
   11a28:	cmp	r0, #0
   11a2c:	bne	11a80 <__assert_fail@plt+0x90c>
   11a30:	ldr	r0, [r4]
   11a34:	bl	110d8 <fclose@plt>
   11a38:	cmp	r0, #0
   11a3c:	popeq	{r4, r5, r6, pc}
   11a40:	ldr	r3, [r5]
   11a44:	cmp	r3, #9
   11a48:	popeq	{r4, r5, r6, pc}
   11a4c:	mov	r0, #1
   11a50:	bl	11018 <exit@plt>
   11a54:	ldr	r4, [r0]
   11a58:	mov	r2, #5
   11a5c:	ldr	r1, [pc, #52]	; 11a98 <__assert_fail@plt+0x924>
   11a60:	mov	r0, #0
   11a64:	bl	10f40 <dcgettext@plt>
   11a68:	mov	r1, r4
   11a6c:	ldr	r2, [pc, #40]	; 11a9c <__assert_fail@plt+0x928>
   11a70:	mov	r3, r0
   11a74:	mov	r0, #1
   11a78:	bl	10fac <error@plt>
   11a7c:	b	11a04 <__assert_fail@plt+0x890>
   11a80:	ldr	r0, [r4]
   11a84:	bl	110d8 <fclose@plt>
   11a88:	mov	r0, #1
   11a8c:	bl	11018 <exit@plt>
   11a90:	andeq	r6, r2, ip, lsr #2
   11a94:	andeq	r6, r2, r8, lsr #2
   11a98:	andeq	r5, r1, r0, ror #19
   11a9c:	andeq	r5, r1, ip, ror #19
   11aa0:	ldr	r3, [pc, #268]	; 11bb4 <__assert_fail@plt+0xa40>
   11aa4:	push	{r4, r5, r6, r7, r8, lr}
   11aa8:	ldr	r3, [r3]
   11aac:	cmp	r3, r0
   11ab0:	beq	11b2c <__assert_fail@plt+0x9b8>
   11ab4:	mov	r4, r0
   11ab8:	mov	r5, r1
   11abc:	bl	11060 <__errno_location@plt>
   11ac0:	mov	r3, #0
   11ac4:	str	r3, [r0]
   11ac8:	mov	r6, r0
   11acc:	mov	r0, r4
   11ad0:	bl	10f10 <ferror@plt>
   11ad4:	cmp	r0, #0
   11ad8:	mov	r0, r4
   11adc:	bne	11b48 <__assert_fail@plt+0x9d4>
   11ae0:	cmp	r5, #0
   11ae4:	beq	11b14 <__assert_fail@plt+0x9a0>
   11ae8:	bl	10ee0 <fflush@plt>
   11aec:	cmp	r0, #0
   11af0:	beq	11b80 <__assert_fail@plt+0xa0c>
   11af4:	ldr	r7, [r6]
   11af8:	subs	r5, r7, #32
   11afc:	mvnne	r5, #0
   11b00:	mov	r0, r4
   11b04:	bl	110d8 <fclose@plt>
   11b08:	str	r7, [r6]
   11b0c:	mov	r0, r5
   11b10:	pop	{r4, r5, r6, r7, r8, pc}
   11b14:	bl	110d8 <fclose@plt>
   11b18:	cmp	r0, #0
   11b1c:	bne	11ba0 <__assert_fail@plt+0xa2c>
   11b20:	mov	r5, #0
   11b24:	mov	r0, r5
   11b28:	pop	{r4, r5, r6, r7, r8, pc}
   11b2c:	ldr	r3, [pc, #132]	; 11bb8 <__assert_fail@plt+0xa44>
   11b30:	ldrb	r2, [r3]
   11b34:	cmp	r2, #0
   11b38:	moveq	r2, #1
   11b3c:	strbeq	r2, [r3]
   11b40:	beq	11ab4 <__assert_fail@plt+0x940>
   11b44:	b	11b20 <__assert_fail@plt+0x9ac>
   11b48:	bl	10ee0 <fflush@plt>
   11b4c:	cmp	r0, #0
   11b50:	bne	11af4 <__assert_fail@plt+0x980>
   11b54:	mov	r1, r4
   11b58:	bl	11120 <fputc@plt>
   11b5c:	cmn	r0, #1
   11b60:	beq	11af4 <__assert_fail@plt+0x980>
   11b64:	mov	r0, r4
   11b68:	bl	10ee0 <fflush@plt>
   11b6c:	subs	r7, r0, #0
   11b70:	streq	r7, [r6]
   11b74:	mvneq	r5, #0
   11b78:	beq	11b00 <__assert_fail@plt+0x98c>
   11b7c:	b	11af4 <__assert_fail@plt+0x980>
   11b80:	mov	r0, r4
   11b84:	bl	110d8 <fclose@plt>
   11b88:	cmp	r0, #0
   11b8c:	beq	11b20 <__assert_fail@plt+0x9ac>
   11b90:	ldr	r5, [r6]
   11b94:	cmp	r5, #9
   11b98:	beq	11b20 <__assert_fail@plt+0x9ac>
   11b9c:	b	11ba4 <__assert_fail@plt+0xa30>
   11ba0:	ldr	r5, [r6]
   11ba4:	subs	r5, r5, #32
   11ba8:	mvnne	r5, #0
   11bac:	mov	r0, r5
   11bb0:	pop	{r4, r5, r6, r7, r8, pc}
   11bb4:	andeq	r6, r2, ip, lsr #2
   11bb8:	andeq	r6, r2, ip, lsr r1
   11bbc:	mov	r1, #0
   11bc0:	b	11aa0 <__assert_fail@plt+0x92c>
   11bc4:	mov	r1, #1
   11bc8:	b	11aa0 <__assert_fail@plt+0x92c>
   11bcc:	push	{r4, r5, r6, lr}
   11bd0:	subs	r4, r0, #0
   11bd4:	beq	11c48 <__assert_fail@plt+0xad4>
   11bd8:	mov	r1, #47	; 0x2f
   11bdc:	bl	11108 <strrchr@plt>
   11be0:	subs	r5, r0, #0
   11be4:	beq	11c34 <__assert_fail@plt+0xac0>
   11be8:	add	r6, r5, #1
   11bec:	sub	r3, r6, r4
   11bf0:	cmp	r3, #6
   11bf4:	ble	11c34 <__assert_fail@plt+0xac0>
   11bf8:	mov	r2, #7
   11bfc:	ldr	r1, [pc, #96]	; 11c64 <__assert_fail@plt+0xaf0>
   11c00:	sub	r0, r5, #6
   11c04:	bl	11144 <strncmp@plt>
   11c08:	cmp	r0, #0
   11c0c:	bne	11c34 <__assert_fail@plt+0xac0>
   11c10:	mov	r2, #3
   11c14:	ldr	r1, [pc, #76]	; 11c68 <__assert_fail@plt+0xaf4>
   11c18:	mov	r0, r6
   11c1c:	bl	11144 <strncmp@plt>
   11c20:	cmp	r0, #0
   11c24:	movne	r4, r6
   11c28:	ldreq	r3, [pc, #60]	; 11c6c <__assert_fail@plt+0xaf8>
   11c2c:	addeq	r4, r5, #4
   11c30:	streq	r4, [r3]
   11c34:	ldr	r2, [pc, #52]	; 11c70 <__assert_fail@plt+0xafc>
   11c38:	ldr	r3, [pc, #52]	; 11c74 <__assert_fail@plt+0xb00>
   11c3c:	str	r4, [r2]
   11c40:	str	r4, [r3]
   11c44:	pop	{r4, r5, r6, pc}
   11c48:	ldr	r3, [pc, #40]	; 11c78 <__assert_fail@plt+0xb04>
   11c4c:	mov	r2, #55	; 0x37
   11c50:	mov	r1, #1
   11c54:	ldr	r3, [r3]
   11c58:	ldr	r0, [pc, #28]	; 11c7c <__assert_fail@plt+0xb08>
   11c5c:	bl	10f88 <fwrite@plt>
   11c60:	bl	11150 <abort@plt>
   11c64:	andeq	r5, r1, r8, lsr #20
   11c68:	andeq	r5, r1, r0, lsr sl
   11c6c:	andeq	r6, r2, r8, lsl r1
   11c70:	andeq	r6, r2, r0, asr #2
   11c74:	andeq	r6, r2, ip, lsl r1
   11c78:	andeq	r6, r2, r8, lsr #2
   11c7c:	strdeq	r5, [r1], -r0
   11c80:	push	{r4, lr}
   11c84:	mov	r2, #179	; 0xb3
   11c88:	ldr	r3, [pc, #8]	; 11c98 <__assert_fail@plt+0xb24>
   11c8c:	ldr	r1, [pc, #8]	; 11c9c <__assert_fail@plt+0xb28>
   11c90:	ldr	r0, [pc, #8]	; 11ca0 <__assert_fail@plt+0xb2c>
   11c94:	bl	11174 <__assert_fail@plt>
   11c98:	andeq	r5, r1, r4, lsr sl
   11c9c:	andeq	r5, r1, r8, asr #20
   11ca0:	andeq	r5, r1, r4, asr sl
   11ca4:	ldr	r3, [pc, #1976]	; 12464 <__assert_fail@plt+0x12f0>
   11ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cac:	sub	sp, sp, #124	; 0x7c
   11cb0:	ldr	r3, [r3]
   11cb4:	mov	r4, r0
   11cb8:	mov	r0, r1
   11cbc:	mov	r1, #2
   11cc0:	str	r3, [sp, #116]	; 0x74
   11cc4:	bl	12810 <__assert_fail@plt+0x169c>
   11cc8:	ldr	r8, [pc, #1944]	; 12468 <__assert_fail@plt+0x12f4>
   11ccc:	mov	r6, #0
   11cd0:	mov	sl, r0
   11cd4:	ldrb	r3, [r4]
   11cd8:	cmp	r3, #0
   11cdc:	beq	11d70 <__assert_fail@plt+0xbfc>
   11ce0:	mov	r1, sl
   11ce4:	mov	r0, r4
   11ce8:	bl	13e58 <__assert_fail@plt+0x2ce4>
   11cec:	subs	r9, r0, #0
   11cf0:	beq	11d70 <__assert_fail@plt+0xbfc>
   11cf4:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   11cf8:	cmp	r0, #1
   11cfc:	bhi	11d9c <__assert_fail@plt+0xc28>
   11d00:	mov	r0, sl
   11d04:	bl	1103c <strlen@plt>
   11d08:	cmp	r4, r9
   11d0c:	mov	r5, r0
   11d10:	bcs	11d30 <__assert_fail@plt+0xbbc>
   11d14:	bl	1100c <__ctype_b_loc@plt>
   11d18:	ldrb	r3, [r9, #-1]
   11d1c:	lsl	r3, r3, #1
   11d20:	ldr	r2, [r0]
   11d24:	ldrh	r3, [r2, r3]
   11d28:	tst	r3, #8
   11d2c:	bne	11d54 <__assert_fail@plt+0xbe0>
   11d30:	ldrb	r4, [r9, r5]
   11d34:	cmp	r4, #0
   11d38:	beq	12430 <__assert_fail@plt+0x12bc>
   11d3c:	bl	1100c <__ctype_b_loc@plt>
   11d40:	lsl	r4, r4, #1
   11d44:	ldr	r3, [r0]
   11d48:	ldrh	r3, [r3, r4]
   11d4c:	tst	r3, #8
   11d50:	beq	12430 <__assert_fail@plt+0x12bc>
   11d54:	ldrb	r3, [r9]
   11d58:	cmp	r3, #0
   11d5c:	beq	11d70 <__assert_fail@plt+0xbfc>
   11d60:	add	r4, r9, #1
   11d64:	ldrb	r3, [r4]
   11d68:	cmp	r3, #0
   11d6c:	bne	11ce0 <__assert_fail@plt+0xb6c>
   11d70:	mov	fp, #0
   11d74:	mov	r0, sl
   11d78:	bl	10f04 <free@plt>
   11d7c:	ldr	r3, [pc, #1760]	; 12464 <__assert_fail@plt+0x12f0>
   11d80:	ldr	r2, [sp, #116]	; 0x74
   11d84:	mov	r0, fp
   11d88:	ldr	r3, [r3]
   11d8c:	cmp	r2, r3
   11d90:	bne	12460 <__assert_fail@plt+0x12ec>
   11d94:	add	sp, sp, #124	; 0x7c
   11d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d9c:	cmp	r4, r9
   11da0:	str	r4, [sp, #20]
   11da4:	strb	r6, [sp, #4]
   11da8:	str	r6, [sp, #8]
   11dac:	strb	r6, [sp, #16]
   11db0:	str	r6, [sp, #12]
   11db4:	movcc	r5, #1
   11db8:	bcc	11e18 <__assert_fail@plt+0xca4>
   11dbc:	b	12284 <__assert_fail@plt+0x1110>
   11dc0:	ldrb	r3, [r4]
   11dc4:	and	r2, r3, #31
   11dc8:	lsr	r3, r3, #5
   11dcc:	ldr	r3, [r8, r3, lsl #2]
   11dd0:	lsr	r3, r3, r2
   11dd4:	tst	r3, #1
   11dd8:	beq	11ea8 <__assert_fail@plt+0xd34>
   11ddc:	str	r5, [sp, #24]
   11de0:	ldrb	r7, [r4]
   11de4:	strb	r5, [sp, #28]
   11de8:	strb	r5, [sp, #16]
   11dec:	cmp	r7, #0
   11df0:	str	r7, [sp, #32]
   11df4:	beq	11ea4 <__assert_fail@plt+0xd30>
   11df8:	ldr	r4, [sp, #20]
   11dfc:	ldr	r3, [sp, #24]
   11e00:	strb	r6, [sp, #16]
   11e04:	add	r4, r4, r3
   11e08:	cmp	r4, r9
   11e0c:	str	r4, [sp, #20]
   11e10:	ldrb	r3, [sp, #28]
   11e14:	bcs	11ef8 <__assert_fail@plt+0xd84>
   11e18:	ldrb	r3, [sp, #4]
   11e1c:	cmp	r3, #0
   11e20:	beq	11dc0 <__assert_fail@plt+0xc4c>
   11e24:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   11e28:	mov	r1, r0
   11e2c:	mov	r0, r4
   11e30:	bl	127c0 <__assert_fail@plt+0x164c>
   11e34:	add	r3, sp, #8
   11e38:	mov	r1, r4
   11e3c:	mov	r2, r0
   11e40:	add	r0, sp, #32
   11e44:	bl	12ebc <__assert_fail@plt+0x1d48>
   11e48:	cmn	r0, #1
   11e4c:	str	r0, [sp, #24]
   11e50:	beq	11ec0 <__assert_fail@plt+0xd4c>
   11e54:	cmn	r0, #2
   11e58:	beq	11ed4 <__assert_fail@plt+0xd60>
   11e5c:	cmp	r0, #0
   11e60:	bne	11ef0 <__assert_fail@plt+0xd7c>
   11e64:	ldr	r4, [sp, #20]
   11e68:	str	r5, [sp, #24]
   11e6c:	ldrb	r3, [r4]
   11e70:	cmp	r3, #0
   11e74:	bne	1244c <__assert_fail@plt+0x12d8>
   11e78:	ldr	r7, [sp, #32]
   11e7c:	cmp	r7, #0
   11e80:	bne	12234 <__assert_fail@plt+0x10c0>
   11e84:	add	r0, sp, #8
   11e88:	strb	r5, [sp, #28]
   11e8c:	bl	10f28 <mbsinit@plt>
   11e90:	strb	r5, [sp, #16]
   11e94:	cmp	r0, #0
   11e98:	strbne	r6, [sp, #4]
   11e9c:	cmp	r7, #0
   11ea0:	bne	11df8 <__assert_fail@plt+0xc84>
   11ea4:	bl	11150 <abort@plt>
   11ea8:	add	r0, sp, #8
   11eac:	bl	10f28 <mbsinit@plt>
   11eb0:	cmp	r0, #0
   11eb4:	beq	12438 <__assert_fail@plt+0x12c4>
   11eb8:	strb	r5, [sp, #4]
   11ebc:	b	11e24 <__assert_fail@plt+0xcb0>
   11ec0:	str	r5, [sp, #24]
   11ec4:	strb	r6, [sp, #28]
   11ec8:	ldr	r7, [sp, #32]
   11ecc:	ldr	r4, [sp, #20]
   11ed0:	b	11dfc <__assert_fail@plt+0xc88>
   11ed4:	ldr	r4, [sp, #20]
   11ed8:	mov	r0, r4
   11edc:	bl	1103c <strlen@plt>
   11ee0:	strb	r6, [sp, #28]
   11ee4:	ldr	r7, [sp, #32]
   11ee8:	str	r0, [sp, #24]
   11eec:	b	11dfc <__assert_fail@plt+0xc88>
   11ef0:	ldr	r7, [sp, #32]
   11ef4:	b	11e84 <__assert_fail@plt+0xd10>
   11ef8:	cmp	r3, #0
   11efc:	beq	12284 <__assert_fail@plt+0x1110>
   11f00:	mov	r0, r7
   11f04:	bl	1106c <iswalnum@plt>
   11f08:	clz	fp, r0
   11f0c:	lsr	fp, fp, #5
   11f10:	str	r9, [sp, #20]
   11f14:	strb	r6, [sp, #4]
   11f18:	str	r6, [sp, #8]
   11f1c:	str	r6, [sp, #12]
   11f20:	strb	r6, [sp, #16]
   11f24:	str	sl, [sp, #76]	; 0x4c
   11f28:	strb	r6, [sp, #60]	; 0x3c
   11f2c:	str	r6, [sp, #64]	; 0x40
   11f30:	strb	r6, [sp, #72]	; 0x48
   11f34:	str	r6, [sp, #68]	; 0x44
   11f38:	mov	r5, sl
   11f3c:	mov	r7, #1
   11f40:	b	11ff8 <__assert_fail@plt+0xe84>
   11f44:	ldrb	r3, [r5]
   11f48:	and	r2, r3, #31
   11f4c:	lsr	r3, r3, #5
   11f50:	ldr	r3, [r8, r3, lsl #2]
   11f54:	lsr	r3, r3, r2
   11f58:	tst	r3, #1
   11f5c:	beq	121d4 <__assert_fail@plt+0x1060>
   11f60:	str	r7, [sp, #80]	; 0x50
   11f64:	ldrb	r4, [r5]
   11f68:	strb	r7, [sp, #84]	; 0x54
   11f6c:	strb	r7, [sp, #72]	; 0x48
   11f70:	cmp	r4, #0
   11f74:	str	r4, [sp, #88]	; 0x58
   11f78:	beq	12074 <__assert_fail@plt+0xf00>
   11f7c:	ldrb	r3, [sp, #16]
   11f80:	cmp	r3, #0
   11f84:	bne	121c0 <__assert_fail@plt+0x104c>
   11f88:	ldrb	r3, [sp, #4]
   11f8c:	ldr	r4, [sp, #20]
   11f90:	cmp	r3, #0
   11f94:	bne	12160 <__assert_fail@plt+0xfec>
   11f98:	ldrb	r3, [r4]
   11f9c:	and	r2, r3, #31
   11fa0:	lsr	r3, r3, #5
   11fa4:	ldr	r3, [r8, r3, lsl #2]
   11fa8:	lsr	r3, r3, r2
   11fac:	tst	r3, #1
   11fb0:	beq	1214c <__assert_fail@plt+0xfd8>
   11fb4:	str	r7, [sp, #24]
   11fb8:	ldrb	r4, [r4]
   11fbc:	strb	r7, [sp, #28]
   11fc0:	strb	r7, [sp, #16]
   11fc4:	str	r4, [sp, #32]
   11fc8:	cmp	r4, #0
   11fcc:	beq	11ea4 <__assert_fail@plt+0xd30>
   11fd0:	ldr	r4, [sp, #20]
   11fd4:	ldr	r5, [sp, #76]	; 0x4c
   11fd8:	ldr	r3, [sp, #24]
   11fdc:	ldr	r2, [sp, #80]	; 0x50
   11fe0:	add	r4, r4, r3
   11fe4:	add	r5, r5, r2
   11fe8:	strb	r6, [sp, #16]
   11fec:	strb	r6, [sp, #72]	; 0x48
   11ff0:	str	r4, [sp, #20]
   11ff4:	str	r5, [sp, #76]	; 0x4c
   11ff8:	ldrb	r3, [sp, #60]	; 0x3c
   11ffc:	cmp	r3, #0
   12000:	beq	11f44 <__assert_fail@plt+0xdd0>
   12004:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   12008:	mov	r1, r0
   1200c:	mov	r0, r5
   12010:	bl	127c0 <__assert_fail@plt+0x164c>
   12014:	add	r3, sp, #64	; 0x40
   12018:	mov	r1, r5
   1201c:	mov	r2, r0
   12020:	add	r0, sp, #88	; 0x58
   12024:	bl	12ebc <__assert_fail@plt+0x1d48>
   12028:	cmn	r0, #1
   1202c:	str	r0, [sp, #80]	; 0x50
   12030:	strbeq	r6, [sp, #84]	; 0x54
   12034:	streq	r7, [sp, #80]	; 0x50
   12038:	strbeq	r7, [sp, #72]	; 0x48
   1203c:	beq	11f7c <__assert_fail@plt+0xe08>
   12040:	cmn	r0, #2
   12044:	beq	121fc <__assert_fail@plt+0x1088>
   12048:	cmp	r0, #0
   1204c:	beq	12214 <__assert_fail@plt+0x10a0>
   12050:	ldr	r4, [sp, #88]	; 0x58
   12054:	add	r0, sp, #64	; 0x40
   12058:	strb	r7, [sp, #84]	; 0x54
   1205c:	bl	10f28 <mbsinit@plt>
   12060:	strb	r7, [sp, #72]	; 0x48
   12064:	cmp	r0, #0
   12068:	strbne	r6, [sp, #60]	; 0x3c
   1206c:	cmp	r4, #0
   12070:	bne	11f7c <__assert_fail@plt+0xe08>
   12074:	ldrb	r3, [sp, #16]
   12078:	cmp	r3, #0
   1207c:	bne	1230c <__assert_fail@plt+0x1198>
   12080:	ldrb	r3, [sp, #4]
   12084:	ldr	r4, [sp, #20]
   12088:	cmp	r3, #0
   1208c:	bne	122a4 <__assert_fail@plt+0x1130>
   12090:	ldrb	r3, [r4]
   12094:	and	r2, r3, #31
   12098:	lsr	r3, r3, #5
   1209c:	ldr	r3, [r8, r3, lsl #2]
   120a0:	lsr	r3, r3, r2
   120a4:	tst	r3, #1
   120a8:	beq	1228c <__assert_fail@plt+0x1118>
   120ac:	mov	r3, #1
   120b0:	str	r3, [sp, #24]
   120b4:	ldrb	r4, [r4]
   120b8:	strb	r3, [sp, #28]
   120bc:	strb	r3, [sp, #16]
   120c0:	str	r4, [sp, #32]
   120c4:	cmp	r4, #0
   120c8:	beq	120e8 <__assert_fail@plt+0xf74>
   120cc:	ldrb	r3, [sp, #28]
   120d0:	cmp	r3, #0
   120d4:	beq	120e8 <__assert_fail@plt+0xf74>
   120d8:	mov	r0, r4
   120dc:	bl	1106c <iswalnum@plt>
   120e0:	cmp	r0, #0
   120e4:	bne	120f0 <__assert_fail@plt+0xf7c>
   120e8:	cmp	fp, #0
   120ec:	bne	11d74 <__assert_fail@plt+0xc00>
   120f0:	str	r9, [sp, #20]
   120f4:	strb	r6, [sp, #4]
   120f8:	str	r6, [sp, #8]
   120fc:	str	r6, [sp, #12]
   12100:	strb	r6, [sp, #16]
   12104:	ldrb	r3, [r9]
   12108:	and	r2, r3, #31
   1210c:	lsr	r3, r3, #5
   12110:	ldr	r3, [r8, r3, lsl #2]
   12114:	lsr	r3, r3, r2
   12118:	tst	r3, #1
   1211c:	beq	12320 <__assert_fail@plt+0x11ac>
   12120:	mov	r3, #1
   12124:	str	r3, [sp, #24]
   12128:	ldrb	r4, [r9]
   1212c:	strb	r3, [sp, #28]
   12130:	strb	r3, [sp, #16]
   12134:	str	r4, [sp, #32]
   12138:	cmp	r4, #0
   1213c:	beq	11d70 <__assert_fail@plt+0xbfc>
   12140:	ldr	r4, [sp, #24]
   12144:	add	r4, r9, r4
   12148:	b	11cd4 <__assert_fail@plt+0xb60>
   1214c:	add	r0, sp, #8
   12150:	bl	10f28 <mbsinit@plt>
   12154:	cmp	r0, #0
   12158:	beq	12438 <__assert_fail@plt+0x12c4>
   1215c:	strb	r7, [sp, #4]
   12160:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   12164:	mov	r1, r0
   12168:	mov	r0, r4
   1216c:	bl	127c0 <__assert_fail@plt+0x164c>
   12170:	add	r3, sp, #8
   12174:	mov	r1, r4
   12178:	mov	r2, r0
   1217c:	add	r0, sp, #32
   12180:	bl	12ebc <__assert_fail@plt+0x1d48>
   12184:	cmn	r0, #1
   12188:	str	r0, [sp, #24]
   1218c:	beq	121ec <__assert_fail@plt+0x1078>
   12190:	cmn	r0, #2
   12194:	beq	12248 <__assert_fail@plt+0x10d4>
   12198:	cmp	r0, #0
   1219c:	beq	12260 <__assert_fail@plt+0x10ec>
   121a0:	ldr	r4, [sp, #32]
   121a4:	add	r0, sp, #8
   121a8:	strb	r7, [sp, #28]
   121ac:	bl	10f28 <mbsinit@plt>
   121b0:	strb	r7, [sp, #16]
   121b4:	cmp	r0, #0
   121b8:	strbne	r6, [sp, #4]
   121bc:	b	11fc8 <__assert_fail@plt+0xe54>
   121c0:	ldrb	r3, [sp, #28]
   121c4:	cmp	r3, #0
   121c8:	ldrne	r4, [sp, #32]
   121cc:	beq	11fd0 <__assert_fail@plt+0xe5c>
   121d0:	b	11fc8 <__assert_fail@plt+0xe54>
   121d4:	add	r0, sp, #64	; 0x40
   121d8:	bl	10f28 <mbsinit@plt>
   121dc:	cmp	r0, #0
   121e0:	beq	12438 <__assert_fail@plt+0x12c4>
   121e4:	strb	r7, [sp, #60]	; 0x3c
   121e8:	b	12004 <__assert_fail@plt+0xe90>
   121ec:	str	r7, [sp, #24]
   121f0:	strb	r6, [sp, #28]
   121f4:	ldr	r4, [sp, #20]
   121f8:	b	11fd4 <__assert_fail@plt+0xe60>
   121fc:	ldr	r0, [sp, #76]	; 0x4c
   12200:	bl	1103c <strlen@plt>
   12204:	strb	r6, [sp, #84]	; 0x54
   12208:	strb	r7, [sp, #72]	; 0x48
   1220c:	str	r0, [sp, #80]	; 0x50
   12210:	b	11f7c <__assert_fail@plt+0xe08>
   12214:	ldr	r3, [sp, #76]	; 0x4c
   12218:	str	r7, [sp, #80]	; 0x50
   1221c:	ldrb	r3, [r3]
   12220:	cmp	r3, #0
   12224:	bne	1244c <__assert_fail@plt+0x12d8>
   12228:	ldr	r4, [sp, #88]	; 0x58
   1222c:	cmp	r4, #0
   12230:	beq	12054 <__assert_fail@plt+0xee0>
   12234:	ldr	r3, [pc, #560]	; 1246c <__assert_fail@plt+0x12f8>
   12238:	mov	r2, #179	; 0xb3
   1223c:	ldr	r1, [pc, #556]	; 12470 <__assert_fail@plt+0x12fc>
   12240:	ldr	r0, [pc, #556]	; 12474 <__assert_fail@plt+0x1300>
   12244:	bl	11174 <__assert_fail@plt>
   12248:	ldr	r4, [sp, #20]
   1224c:	mov	r0, r4
   12250:	bl	1103c <strlen@plt>
   12254:	strb	r6, [sp, #28]
   12258:	str	r0, [sp, #24]
   1225c:	b	11fd4 <__assert_fail@plt+0xe60>
   12260:	ldr	r4, [sp, #20]
   12264:	str	r7, [sp, #24]
   12268:	ldrb	r3, [r4]
   1226c:	cmp	r3, #0
   12270:	bne	1244c <__assert_fail@plt+0x12d8>
   12274:	ldr	r4, [sp, #32]
   12278:	cmp	r4, #0
   1227c:	beq	121a4 <__assert_fail@plt+0x1030>
   12280:	b	12234 <__assert_fail@plt+0x10c0>
   12284:	mov	fp, #1
   12288:	b	11f10 <__assert_fail@plt+0xd9c>
   1228c:	add	r0, sp, #8
   12290:	bl	10f28 <mbsinit@plt>
   12294:	cmp	r0, #0
   12298:	beq	12438 <__assert_fail@plt+0x12c4>
   1229c:	mov	r3, #1
   122a0:	strb	r3, [sp, #4]
   122a4:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   122a8:	mov	r1, r0
   122ac:	mov	r0, r4
   122b0:	bl	127c0 <__assert_fail@plt+0x164c>
   122b4:	add	r3, sp, #8
   122b8:	mov	r1, r4
   122bc:	mov	r2, r0
   122c0:	add	r0, sp, #32
   122c4:	bl	12ebc <__assert_fail@plt+0x1d48>
   122c8:	cmn	r0, #1
   122cc:	str	r0, [sp, #24]
   122d0:	beq	123a0 <__assert_fail@plt+0x122c>
   122d4:	cmn	r0, #2
   122d8:	beq	12410 <__assert_fail@plt+0x129c>
   122dc:	cmp	r0, #0
   122e0:	bne	123dc <__assert_fail@plt+0x1268>
   122e4:	ldr	r3, [sp, #20]
   122e8:	mov	r2, #1
   122ec:	str	r2, [sp, #24]
   122f0:	ldrb	r3, [r3]
   122f4:	cmp	r3, #0
   122f8:	bne	1244c <__assert_fail@plt+0x12d8>
   122fc:	ldr	r4, [sp, #32]
   12300:	cmp	r4, #0
   12304:	beq	123e0 <__assert_fail@plt+0x126c>
   12308:	bl	11c80 <__assert_fail@plt+0xb0c>
   1230c:	ldrb	r3, [sp, #28]
   12310:	ldr	r4, [sp, #32]
   12314:	cmp	r3, #0
   12318:	beq	120cc <__assert_fail@plt+0xf58>
   1231c:	b	120c4 <__assert_fail@plt+0xf50>
   12320:	add	r0, sp, #8
   12324:	bl	10f28 <mbsinit@plt>
   12328:	cmp	r0, #0
   1232c:	beq	12438 <__assert_fail@plt+0x12c4>
   12330:	mov	r4, #1
   12334:	strb	r4, [sp, #4]
   12338:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   1233c:	mov	r1, r0
   12340:	mov	r0, r9
   12344:	bl	127c0 <__assert_fail@plt+0x164c>
   12348:	add	r3, sp, #8
   1234c:	mov	r1, r9
   12350:	mov	r2, r0
   12354:	add	r0, sp, #32
   12358:	bl	12ebc <__assert_fail@plt+0x1d48>
   1235c:	cmn	r0, #1
   12360:	str	r0, [sp, #24]
   12364:	streq	r4, [sp, #24]
   12368:	beq	12140 <__assert_fail@plt+0xfcc>
   1236c:	cmn	r0, #2
   12370:	beq	12400 <__assert_fail@plt+0x128c>
   12374:	cmp	r0, #0
   12378:	bne	123b8 <__assert_fail@plt+0x1244>
   1237c:	ldr	r3, [sp, #20]
   12380:	str	r4, [sp, #24]
   12384:	ldrb	r3, [r3]
   12388:	cmp	r3, #0
   1238c:	bne	1244c <__assert_fail@plt+0x12d8>
   12390:	ldr	r4, [sp, #32]
   12394:	cmp	r4, #0
   12398:	beq	123bc <__assert_fail@plt+0x1248>
   1239c:	b	12308 <__assert_fail@plt+0x1194>
   123a0:	mov	r3, #1
   123a4:	strb	r6, [sp, #28]
   123a8:	str	r3, [sp, #24]
   123ac:	strb	r3, [sp, #16]
   123b0:	ldr	r4, [sp, #32]
   123b4:	b	120cc <__assert_fail@plt+0xf58>
   123b8:	ldr	r4, [sp, #32]
   123bc:	mov	r5, #1
   123c0:	add	r0, sp, #8
   123c4:	strb	r5, [sp, #28]
   123c8:	bl	10f28 <mbsinit@plt>
   123cc:	strb	r5, [sp, #16]
   123d0:	cmp	r0, #0
   123d4:	strbne	r6, [sp, #4]
   123d8:	b	12138 <__assert_fail@plt+0xfc4>
   123dc:	ldr	r4, [sp, #32]
   123e0:	mov	r5, #1
   123e4:	add	r0, sp, #8
   123e8:	strb	r5, [sp, #28]
   123ec:	bl	10f28 <mbsinit@plt>
   123f0:	strb	r5, [sp, #16]
   123f4:	cmp	r0, #0
   123f8:	strbne	r6, [sp, #4]
   123fc:	b	120c4 <__assert_fail@plt+0xf50>
   12400:	ldr	r0, [sp, #20]
   12404:	bl	1103c <strlen@plt>
   12408:	str	r0, [sp, #24]
   1240c:	b	12140 <__assert_fail@plt+0xfcc>
   12410:	ldr	r0, [sp, #20]
   12414:	bl	1103c <strlen@plt>
   12418:	mov	r3, #1
   1241c:	strb	r6, [sp, #28]
   12420:	strb	r3, [sp, #16]
   12424:	ldr	r4, [sp, #32]
   12428:	str	r0, [sp, #24]
   1242c:	b	120cc <__assert_fail@plt+0xf58>
   12430:	mov	fp, #1
   12434:	b	11d74 <__assert_fail@plt+0xc00>
   12438:	ldr	r3, [pc, #44]	; 1246c <__assert_fail@plt+0x12f8>
   1243c:	mov	r2, #150	; 0x96
   12440:	ldr	r1, [pc, #40]	; 12470 <__assert_fail@plt+0x12fc>
   12444:	ldr	r0, [pc, #44]	; 12478 <__assert_fail@plt+0x1304>
   12448:	bl	11174 <__assert_fail@plt>
   1244c:	ldr	r3, [pc, #24]	; 1246c <__assert_fail@plt+0x12f8>
   12450:	mov	r2, #178	; 0xb2
   12454:	ldr	r1, [pc, #20]	; 12470 <__assert_fail@plt+0x12fc>
   12458:	ldr	r0, [pc, #28]	; 1247c <__assert_fail@plt+0x1308>
   1245c:	bl	11174 <__assert_fail@plt>
   12460:	bl	10f58 <__stack_chk_fail@plt>
   12464:	andeq	r5, r2, r8, lsl #30
   12468:	andeq	r5, r1, r8, lsr fp
   1246c:	andeq	r5, r1, r4, lsr sl
   12470:	andeq	r5, r1, r8, asr #20
   12474:	andeq	r5, r1, r4, asr sl
   12478:	andeq	r5, r1, r8, ror #20
   1247c:	andeq	r5, r1, r0, lsl #21
   12480:	push	{r4, r5, r6, lr}
   12484:	mov	r1, r0
   12488:	mov	r4, r0
   1248c:	sub	sp, sp, #8
   12490:	mov	r2, #5
   12494:	mov	r0, #0
   12498:	bl	10f40 <dcgettext@plt>
   1249c:	cmp	r4, r0
   124a0:	mov	r5, r0
   124a4:	beq	124b8 <__assert_fail@plt+0x1344>
   124a8:	mov	r1, r4
   124ac:	bl	11ca4 <__assert_fail@plt+0xb30>
   124b0:	cmp	r0, #0
   124b4:	beq	124c4 <__assert_fail@plt+0x1350>
   124b8:	mov	r0, r5
   124bc:	add	sp, sp, #8
   124c0:	pop	{r4, r5, r6, pc}
   124c4:	mov	r0, r5
   124c8:	bl	1103c <strlen@plt>
   124cc:	mov	r6, r0
   124d0:	mov	r0, r4
   124d4:	bl	1103c <strlen@plt>
   124d8:	add	r0, r6, r0
   124dc:	add	r0, r0, #4
   124e0:	bl	12d64 <__assert_fail@plt+0x1bf0>
   124e4:	str	r5, [sp]
   124e8:	str	r4, [sp, #4]
   124ec:	ldr	r3, [pc, #28]	; 12510 <__assert_fail@plt+0x139c>
   124f0:	mvn	r2, #0
   124f4:	mov	r1, #1
   124f8:	mov	r6, r0
   124fc:	bl	11078 <__sprintf_chk@plt>
   12500:	mov	r5, r6
   12504:	mov	r0, r5
   12508:	add	sp, sp, #8
   1250c:	pop	{r4, r5, r6, pc}
   12510:	muleq	r1, r8, sl
   12514:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12518:	mov	r2, #5
   1251c:	sub	sp, sp, #8
   12520:	mov	r6, r0
   12524:	mov	r5, r1
   12528:	mov	r1, r0
   1252c:	mov	r0, #0
   12530:	bl	10f40 <dcgettext@plt>
   12534:	mov	r8, r0
   12538:	bl	12ff8 <__assert_fail@plt+0x1e84>
   1253c:	ldr	r1, [pc, #624]	; 127b4 <__assert_fail@plt+0x1640>
   12540:	mov	r9, r0
   12544:	bl	12f3c <__assert_fail@plt+0x1dc8>
   12548:	subs	r4, r0, #0
   1254c:	bne	12664 <__assert_fail@plt+0x14f0>
   12550:	subs	r9, r5, #0
   12554:	movne	r7, r5
   12558:	beq	125d4 <__assert_fail@plt+0x1460>
   1255c:	mov	r1, r6
   12560:	mov	r0, r8
   12564:	bl	10ec8 <strcmp@plt>
   12568:	cmp	r0, #0
   1256c:	beq	125c8 <__assert_fail@plt+0x1454>
   12570:	mov	r1, r6
   12574:	mov	r0, r8
   12578:	bl	11ca4 <__assert_fail@plt+0xb30>
   1257c:	subs	r6, r0, #0
   12580:	bne	125b0 <__assert_fail@plt+0x143c>
   12584:	cmp	r5, #0
   12588:	beq	125e0 <__assert_fail@plt+0x146c>
   1258c:	mov	r1, r5
   12590:	mov	r0, r8
   12594:	bl	11ca4 <__assert_fail@plt+0xb30>
   12598:	cmp	r0, #0
   1259c:	beq	125e0 <__assert_fail@plt+0x146c>
   125a0:	cmp	r6, #0
   125a4:	beq	125b0 <__assert_fail@plt+0x143c>
   125a8:	mov	r0, r6
   125ac:	bl	10f04 <free@plt>
   125b0:	cmp	r4, #0
   125b4:	moveq	r7, r8
   125b8:	beq	125c8 <__assert_fail@plt+0x1454>
   125bc:	mov	r0, r4
   125c0:	bl	10f04 <free@plt>
   125c4:	mov	r7, r8
   125c8:	mov	r0, r7
   125cc:	add	sp, sp, #8
   125d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   125d4:	mov	r7, r6
   125d8:	mov	r4, r5
   125dc:	b	1255c <__assert_fail@plt+0x13e8>
   125e0:	cmp	r9, #0
   125e4:	beq	125fc <__assert_fail@plt+0x1488>
   125e8:	mov	r1, r9
   125ec:	mov	r0, r8
   125f0:	bl	11ca4 <__assert_fail@plt+0xb30>
   125f4:	cmp	r0, #0
   125f8:	bne	125a0 <__assert_fail@plt+0x142c>
   125fc:	mov	r0, r8
   12600:	bl	1103c <strlen@plt>
   12604:	mov	r5, r0
   12608:	mov	r0, r7
   1260c:	bl	1103c <strlen@plt>
   12610:	add	r0, r5, r0
   12614:	add	r0, r0, #4
   12618:	bl	12d64 <__assert_fail@plt+0x1bf0>
   1261c:	str	r7, [sp, #4]
   12620:	str	r8, [sp]
   12624:	ldr	r3, [pc, #396]	; 127b8 <__assert_fail@plt+0x1644>
   12628:	mvn	r2, #0
   1262c:	mov	r1, #1
   12630:	mov	r5, r0
   12634:	bl	11078 <__sprintf_chk@plt>
   12638:	cmp	r6, #0
   1263c:	beq	12648 <__assert_fail@plt+0x14d4>
   12640:	mov	r0, r6
   12644:	bl	10f04 <free@plt>
   12648:	cmp	r4, #0
   1264c:	moveq	r7, r5
   12650:	beq	125c8 <__assert_fail@plt+0x1454>
   12654:	mov	r0, r4
   12658:	bl	10f04 <free@plt>
   1265c:	mov	r7, r5
   12660:	b	125c8 <__assert_fail@plt+0x1454>
   12664:	mov	r2, r9
   12668:	ldr	r1, [pc, #324]	; 127b4 <__assert_fail@plt+0x1640>
   1266c:	mov	r0, r5
   12670:	bl	12e90 <__assert_fail@plt+0x1d1c>
   12674:	mov	r7, r0
   12678:	mov	r0, r9
   1267c:	bl	1103c <strlen@plt>
   12680:	mov	r4, r0
   12684:	add	r0, r0, #11
   12688:	bl	12d64 <__assert_fail@plt+0x1bf0>
   1268c:	mov	r2, r4
   12690:	mov	r1, r9
   12694:	mov	sl, r0
   12698:	bl	10f1c <memcpy@plt>
   1269c:	ldr	r3, [pc, #280]	; 127bc <__assert_fail@plt+0x1648>
   126a0:	add	ip, sl, r4
   126a4:	mov	r2, sl
   126a8:	ldm	r3!, {r0, r1}
   126ac:	ldrh	lr, [r3]
   126b0:	ldrb	r3, [r3, #2]
   126b4:	str	r0, [sl, r4]
   126b8:	str	r1, [ip, #4]
   126bc:	strh	lr, [ip, #8]
   126c0:	strb	r3, [ip, #10]
   126c4:	ldr	r1, [pc, #232]	; 127b4 <__assert_fail@plt+0x1640>
   126c8:	mov	r0, r5
   126cc:	bl	12e90 <__assert_fail@plt+0x1d1c>
   126d0:	mov	r4, r0
   126d4:	mov	r0, sl
   126d8:	bl	10f04 <free@plt>
   126dc:	cmp	r4, #0
   126e0:	beq	12780 <__assert_fail@plt+0x160c>
   126e4:	mov	r1, #63	; 0x3f
   126e8:	mov	r0, r4
   126ec:	bl	11048 <strchr@plt>
   126f0:	cmp	r0, #0
   126f4:	beq	12744 <__assert_fail@plt+0x15d0>
   126f8:	mov	r0, r4
   126fc:	bl	10f04 <free@plt>
   12700:	cmp	r7, #0
   12704:	beq	12788 <__assert_fail@plt+0x1614>
   12708:	mov	r1, r6
   1270c:	mov	r0, r8
   12710:	bl	10ec8 <strcmp@plt>
   12714:	cmp	r0, #0
   12718:	beq	125c8 <__assert_fail@plt+0x1454>
   1271c:	mov	r9, #0
   12720:	mov	r4, r9
   12724:	mov	r1, r6
   12728:	mov	r0, r8
   1272c:	bl	11ca4 <__assert_fail@plt+0xb30>
   12730:	cmp	r0, #0
   12734:	bne	127ac <__assert_fail@plt+0x1638>
   12738:	mov	r5, r7
   1273c:	mov	r6, r7
   12740:	b	12584 <__assert_fail@plt+0x1410>
   12744:	cmp	r7, #0
   12748:	beq	1279c <__assert_fail@plt+0x1628>
   1274c:	mov	r1, r6
   12750:	mov	r0, r8
   12754:	bl	10ec8 <strcmp@plt>
   12758:	cmp	r0, #0
   1275c:	movne	r9, r4
   12760:	bne	12724 <__assert_fail@plt+0x15b0>
   12764:	cmp	r7, r4
   12768:	beq	125c8 <__assert_fail@plt+0x1454>
   1276c:	mov	r0, r4
   12770:	bl	10f04 <free@plt>
   12774:	mov	r0, r7
   12778:	add	sp, sp, #8
   1277c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12780:	cmp	r7, #0
   12784:	bne	12708 <__assert_fail@plt+0x1594>
   12788:	mov	r9, #0
   1278c:	mov	r5, r9
   12790:	mov	r4, r9
   12794:	mov	r7, r6
   12798:	b	1255c <__assert_fail@plt+0x13e8>
   1279c:	mov	r5, r7
   127a0:	mov	r9, r4
   127a4:	mov	r7, r4
   127a8:	b	1255c <__assert_fail@plt+0x13e8>
   127ac:	mov	r6, r7
   127b0:	b	125a8 <__assert_fail@plt+0x1434>
   127b4:	andeq	r5, r1, r0, lsr #21
   127b8:	muleq	r1, r8, sl
   127bc:	andeq	r5, r1, r8, lsr #21
   127c0:	push	{r4, r5, r6, lr}
   127c4:	mov	r2, r1
   127c8:	mov	r4, r1
   127cc:	mov	r1, #0
   127d0:	mov	r5, r0
   127d4:	bl	110cc <memchr@plt>
   127d8:	cmp	r0, #0
   127dc:	subne	r0, r0, r5
   127e0:	addne	r0, r0, #1
   127e4:	moveq	r0, r4
   127e8:	pop	{r4, r5, r6, pc}
   127ec:	push	{r4, lr}
   127f0:	mov	r2, #170	; 0xaa
   127f4:	ldr	r3, [pc, #8]	; 12804 <__assert_fail@plt+0x1690>
   127f8:	ldr	r1, [pc, #8]	; 12808 <__assert_fail@plt+0x1694>
   127fc:	ldr	r0, [pc, #8]	; 1280c <__assert_fail@plt+0x1698>
   12800:	bl	11174 <__assert_fail@plt>
   12804:			; <UNDEFINED> instruction: 0x00015ab4
   12808:	andeq	r5, r1, r8, asr #21
   1280c:	andeq	r5, r1, r4, asr sl
   12810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12814:	sub	sp, sp, #76	; 0x4c
   12818:	ldr	r7, [pc, #1232]	; 12cf0 <__assert_fail@plt+0x1b7c>
   1281c:	mov	r5, r1
   12820:	ldr	r3, [r7]
   12824:	str	r3, [sp, #68]	; 0x44
   12828:	bl	10f4c <strdup@plt>
   1282c:	subs	r6, r0, #0
   12830:	beq	12cc4 <__assert_fail@plt+0x1b50>
   12834:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   12838:	cmp	r0, #1
   1283c:	bls	12a54 <__assert_fail@plt+0x18e0>
   12840:	cmp	r5, #0
   12844:	bne	12b48 <__assert_fail@plt+0x19d4>
   12848:	add	r9, sp, #16
   1284c:	mov	r0, r6
   12850:	str	r6, [sp, #28]
   12854:	bl	1103c <strlen@plt>
   12858:	mov	r5, #0
   1285c:	str	r5, [sp, #16]
   12860:	strb	r5, [sp, #12]
   12864:	str	r5, [r9, #4]
   12868:	strb	r5, [sp, #24]
   1286c:	add	sl, r6, r0
   12870:	cmp	sl, r6
   12874:	str	sl, [sp, #8]
   12878:	movhi	r4, r6
   1287c:	movhi	r8, #1
   12880:	bhi	128b8 <__assert_fail@plt+0x1744>
   12884:	b	12a0c <__assert_fail@plt+0x1898>
   12888:	ldrb	r3, [sp, #36]	; 0x24
   1288c:	cmp	r3, #0
   12890:	beq	1293c <__assert_fail@plt+0x17c8>
   12894:	ldr	r0, [sp, #40]	; 0x28
   12898:	bl	11024 <iswspace@plt>
   1289c:	clz	r5, r0
   128a0:	lsr	r5, r5, #5
   128a4:	mov	r3, #0
   128a8:	cmp	r4, sl
   128ac:	str	r4, [sp, #28]
   128b0:	strb	r3, [sp, #24]
   128b4:	bcs	12b1c <__assert_fail@plt+0x19a8>
   128b8:	ldrb	r3, [sp, #12]
   128bc:	cmp	r3, #0
   128c0:	bne	12958 <__assert_fail@plt+0x17e4>
   128c4:	ldrb	r3, [r4]
   128c8:	ldr	r2, [pc, #1060]	; 12cf4 <__assert_fail@plt+0x1b80>
   128cc:	and	r1, r3, #31
   128d0:	lsr	r3, r3, #5
   128d4:	ldr	r3, [r2, r3, lsl #2]
   128d8:	lsr	r3, r3, r1
   128dc:	tst	r3, #1
   128e0:	beq	12944 <__assert_fail@plt+0x17d0>
   128e4:	ldr	fp, [sp, #28]
   128e8:	str	r8, [sp, #32]
   128ec:	ldr	sl, [sp, #8]
   128f0:	ldrb	r2, [r4]
   128f4:	add	r4, fp, #1
   128f8:	strb	r8, [sp, #36]	; 0x24
   128fc:	str	r2, [sp, #40]	; 0x28
   12900:	cmp	r5, #0
   12904:	strb	r8, [sp, #24]
   12908:	beq	12888 <__assert_fail@plt+0x1714>
   1290c:	cmp	r5, #1
   12910:	beq	12a28 <__assert_fail@plt+0x18b4>
   12914:	cmp	r5, #2
   12918:	bne	1293c <__assert_fail@plt+0x17c8>
   1291c:	ldrb	r3, [sp, #36]	; 0x24
   12920:	cmp	r3, #0
   12924:	beq	1293c <__assert_fail@plt+0x17c8>
   12928:	ldr	r0, [sp, #40]	; 0x28
   1292c:	bl	11024 <iswspace@plt>
   12930:	cmp	r0, #0
   12934:	moveq	r5, #1
   12938:	b	128a4 <__assert_fail@plt+0x1730>
   1293c:	mov	r5, #1
   12940:	b	128a4 <__assert_fail@plt+0x1730>
   12944:	mov	r0, r9
   12948:	bl	10f28 <mbsinit@plt>
   1294c:	cmp	r0, #0
   12950:	beq	12cdc <__assert_fail@plt+0x1b68>
   12954:	strb	r8, [sp, #12]
   12958:	sub	r2, sl, r4
   1295c:	mov	r1, r4
   12960:	mov	r3, r9
   12964:	add	r0, sp, #40	; 0x28
   12968:	bl	12ebc <__assert_fail@plt+0x1d48>
   1296c:	cmn	r0, #1
   12970:	mov	r4, r0
   12974:	str	r0, [sp, #32]
   12978:	beq	12b00 <__assert_fail@plt+0x198c>
   1297c:	cmn	r0, #2
   12980:	ldr	fp, [sp, #28]
   12984:	beq	12b2c <__assert_fail@plt+0x19b8>
   12988:	cmp	r0, #0
   1298c:	bne	129b0 <__assert_fail@plt+0x183c>
   12990:	str	r8, [sp, #32]
   12994:	ldrb	r2, [fp]
   12998:	cmp	r2, #0
   1299c:	bne	12cc8 <__assert_fail@plt+0x1b54>
   129a0:	ldr	r2, [sp, #40]	; 0x28
   129a4:	cmp	r2, #0
   129a8:	bne	12cb4 <__assert_fail@plt+0x1b40>
   129ac:	mov	r4, #1
   129b0:	mov	r0, r9
   129b4:	strb	r8, [sp, #36]	; 0x24
   129b8:	bl	10f28 <mbsinit@plt>
   129bc:	add	r4, fp, r4
   129c0:	ldr	sl, [sp, #8]
   129c4:	cmp	r0, #0
   129c8:	movne	r1, #0
   129cc:	strbne	r1, [sp, #12]
   129d0:	b	12900 <__assert_fail@plt+0x178c>
   129d4:	ldr	r4, [sp, #28]
   129d8:	mov	r3, #1
   129dc:	mov	r2, #0
   129e0:	str	r3, [sp, #32]
   129e4:	strb	r3, [sp, #24]
   129e8:	strb	r2, [sp, #36]	; 0x24
   129ec:	mov	r0, r4
   129f0:	bl	1103c <strlen@plt>
   129f4:	mov	r1, r4
   129f8:	add	r2, r0, #1
   129fc:	mov	r0, r6
   12a00:	bl	10ef8 <memmove@plt>
   12a04:	cmp	r5, #1
   12a08:	bne	1284c <__assert_fail@plt+0x16d8>
   12a0c:	ldr	r2, [sp, #68]	; 0x44
   12a10:	ldr	r3, [r7]
   12a14:	mov	r0, r6
   12a18:	cmp	r2, r3
   12a1c:	bne	12cc0 <__assert_fail@plt+0x1b4c>
   12a20:	add	sp, sp, #76	; 0x4c
   12a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a28:	ldrb	r1, [sp, #36]	; 0x24
   12a2c:	cmp	r1, #0
   12a30:	beq	128a4 <__assert_fail@plt+0x1730>
   12a34:	ldr	r0, [sp, #40]	; 0x28
   12a38:	bl	11024 <iswspace@plt>
   12a3c:	ldr	r3, [sp, #4]
   12a40:	cmp	r0, #0
   12a44:	movne	r3, fp
   12a48:	str	r3, [sp, #4]
   12a4c:	movne	r5, #2
   12a50:	b	128a4 <__assert_fail@plt+0x1730>
   12a54:	cmp	r5, #0
   12a58:	beq	12ab4 <__assert_fail@plt+0x1940>
   12a5c:	ldrb	r4, [r6]
   12a60:	cmp	r4, #0
   12a64:	beq	12cb8 <__assert_fail@plt+0x1b44>
   12a68:	bl	1100c <__ctype_b_loc@plt>
   12a6c:	mov	r8, r6
   12a70:	ldr	r2, [r0]
   12a74:	b	12a84 <__assert_fail@plt+0x1910>
   12a78:	ldrb	r4, [r8, #1]!
   12a7c:	cmp	r4, #0
   12a80:	beq	12a94 <__assert_fail@plt+0x1920>
   12a84:	lsl	r4, r4, #1
   12a88:	ldrh	r3, [r2, r4]
   12a8c:	tst	r3, #8192	; 0x2000
   12a90:	bne	12a78 <__assert_fail@plt+0x1904>
   12a94:	mov	r0, r8
   12a98:	bl	1103c <strlen@plt>
   12a9c:	mov	r1, r8
   12aa0:	add	r2, r0, #1
   12aa4:	mov	r0, r6
   12aa8:	bl	10ef8 <memmove@plt>
   12aac:	cmp	r5, #1
   12ab0:	beq	12a0c <__assert_fail@plt+0x1898>
   12ab4:	mov	r0, r6
   12ab8:	bl	1103c <strlen@plt>
   12abc:	sub	r0, r0, #1
   12ac0:	adds	r4, r6, r0
   12ac4:	bcs	12a0c <__assert_fail@plt+0x1898>
   12ac8:	bl	1100c <__ctype_b_loc@plt>
   12acc:	mov	r3, r4
   12ad0:	mov	ip, #0
   12ad4:	ldr	r1, [r0]
   12ad8:	b	12ae8 <__assert_fail@plt+0x1974>
   12adc:	cmp	r6, r3
   12ae0:	strb	ip, [r3, #1]
   12ae4:	bhi	12a0c <__assert_fail@plt+0x1898>
   12ae8:	ldrb	r2, [r3], #-1
   12aec:	lsl	r2, r2, #1
   12af0:	ldrh	r2, [r1, r2]
   12af4:	tst	r2, #8192	; 0x2000
   12af8:	bne	12adc <__assert_fail@plt+0x1968>
   12afc:	b	12a0c <__assert_fail@plt+0x1898>
   12b00:	ldr	fp, [sp, #28]
   12b04:	mov	r2, #0
   12b08:	str	r8, [sp, #32]
   12b0c:	add	r4, fp, #1
   12b10:	strb	r2, [sp, #36]	; 0x24
   12b14:	ldr	sl, [sp, #8]
   12b18:	b	12900 <__assert_fail@plt+0x178c>
   12b1c:	cmp	r5, #2
   12b20:	ldreq	r2, [sp, #4]
   12b24:	strbeq	r3, [r2]
   12b28:	b	12a0c <__assert_fail@plt+0x1898>
   12b2c:	ldr	r4, [sp, #8]
   12b30:	mov	r1, #0
   12b34:	sub	r2, r4, fp
   12b38:	str	r2, [sp, #32]
   12b3c:	mov	sl, r4
   12b40:	strb	r1, [sp, #36]	; 0x24
   12b44:	b	12900 <__assert_fail@plt+0x178c>
   12b48:	mov	r0, r6
   12b4c:	str	r6, [sp, #28]
   12b50:	bl	1103c <strlen@plt>
   12b54:	add	r9, sp, #16
   12b58:	mov	r3, #0
   12b5c:	str	r3, [sp, #16]
   12b60:	strb	r3, [sp, #12]
   12b64:	str	r3, [r9, #4]
   12b68:	strb	r3, [sp, #24]
   12b6c:	add	sl, r6, r0
   12b70:	cmp	sl, r6
   12b74:	str	sl, [sp, #8]
   12b78:	movls	r4, r6
   12b7c:	bls	129ec <__assert_fail@plt+0x1878>
   12b80:	ldr	fp, [pc, #364]	; 12cf4 <__assert_fail@plt+0x1b80>
   12b84:	mov	r4, r6
   12b88:	mov	r8, #1
   12b8c:	b	12bf8 <__assert_fail@plt+0x1a84>
   12b90:	ldrb	r3, [r4]
   12b94:	and	r1, r3, #31
   12b98:	lsr	r3, r3, #5
   12b9c:	ldr	r3, [fp, r3, lsl #2]
   12ba0:	lsr	r3, r3, r1
   12ba4:	tst	r3, #1
   12ba8:	beq	12c60 <__assert_fail@plt+0x1aec>
   12bac:	str	r8, [sp, #32]
   12bb0:	ldrb	r3, [r4]
   12bb4:	ldr	r4, [sp, #28]
   12bb8:	strb	r8, [sp, #36]	; 0x24
   12bbc:	mov	sl, r3
   12bc0:	strb	r8, [sp, #24]
   12bc4:	str	r3, [sp, #40]	; 0x28
   12bc8:	mov	r0, sl
   12bcc:	bl	11024 <iswspace@plt>
   12bd0:	cmp	r0, #0
   12bd4:	beq	129ec <__assert_fail@plt+0x1878>
   12bd8:	ldr	r3, [sp, #32]
   12bdc:	ldr	sl, [sp, #8]
   12be0:	add	r4, r4, r3
   12be4:	cmp	r4, sl
   12be8:	mov	r3, #0
   12bec:	str	r4, [sp, #28]
   12bf0:	strb	r3, [sp, #24]
   12bf4:	bcs	129ec <__assert_fail@plt+0x1878>
   12bf8:	ldrb	r3, [sp, #12]
   12bfc:	cmp	r3, #0
   12c00:	beq	12b90 <__assert_fail@plt+0x1a1c>
   12c04:	sub	r2, sl, r4
   12c08:	mov	r1, r4
   12c0c:	mov	r3, r9
   12c10:	add	r0, sp, #40	; 0x28
   12c14:	bl	12ebc <__assert_fail@plt+0x1d48>
   12c18:	cmn	r0, #1
   12c1c:	str	r0, [sp, #32]
   12c20:	beq	129d4 <__assert_fail@plt+0x1860>
   12c24:	cmn	r0, #2
   12c28:	ldr	r4, [sp, #28]
   12c2c:	beq	12c78 <__assert_fail@plt+0x1b04>
   12c30:	cmp	r0, #0
   12c34:	beq	12c98 <__assert_fail@plt+0x1b24>
   12c38:	ldr	sl, [sp, #40]	; 0x28
   12c3c:	mov	r0, r9
   12c40:	strb	r8, [sp, #36]	; 0x24
   12c44:	bl	10f28 <mbsinit@plt>
   12c48:	cmp	r0, #0
   12c4c:	movne	r2, #0
   12c50:	strbeq	r8, [sp, #24]
   12c54:	strbne	r8, [sp, #24]
   12c58:	strbne	r2, [sp, #12]
   12c5c:	b	12bc8 <__assert_fail@plt+0x1a54>
   12c60:	mov	r0, r9
   12c64:	bl	10f28 <mbsinit@plt>
   12c68:	cmp	r0, #0
   12c6c:	beq	12cdc <__assert_fail@plt+0x1b68>
   12c70:	strb	r8, [sp, #12]
   12c74:	b	12c04 <__assert_fail@plt+0x1a90>
   12c78:	ldr	r3, [sp, #8]
   12c7c:	mov	r2, #0
   12c80:	sub	r3, r3, r4
   12c84:	str	r3, [sp, #32]
   12c88:	mov	r3, #1
   12c8c:	strb	r2, [sp, #36]	; 0x24
   12c90:	strb	r3, [sp, #24]
   12c94:	b	129ec <__assert_fail@plt+0x1878>
   12c98:	str	r8, [sp, #32]
   12c9c:	ldrb	r3, [r4]
   12ca0:	cmp	r3, #0
   12ca4:	bne	12cc8 <__assert_fail@plt+0x1b54>
   12ca8:	ldr	sl, [sp, #40]	; 0x28
   12cac:	cmp	sl, #0
   12cb0:	beq	12c3c <__assert_fail@plt+0x1ac8>
   12cb4:	bl	127ec <__assert_fail@plt+0x1678>
   12cb8:	mov	r8, r6
   12cbc:	b	12a94 <__assert_fail@plt+0x1920>
   12cc0:	bl	10f58 <__stack_chk_fail@plt>
   12cc4:	bl	12d08 <__assert_fail@plt+0x1b94>
   12cc8:	ldr	r3, [pc, #40]	; 12cf8 <__assert_fail@plt+0x1b84>
   12ccc:	mov	r2, #169	; 0xa9
   12cd0:	ldr	r1, [pc, #36]	; 12cfc <__assert_fail@plt+0x1b88>
   12cd4:	ldr	r0, [pc, #36]	; 12d00 <__assert_fail@plt+0x1b8c>
   12cd8:	bl	11174 <__assert_fail@plt>
   12cdc:	ldr	r3, [pc, #20]	; 12cf8 <__assert_fail@plt+0x1b84>
   12ce0:	mov	r2, #142	; 0x8e
   12ce4:	ldr	r1, [pc, #16]	; 12cfc <__assert_fail@plt+0x1b88>
   12ce8:	ldr	r0, [pc, #20]	; 12d04 <__assert_fail@plt+0x1b90>
   12cec:	bl	11174 <__assert_fail@plt>
   12cf0:	andeq	r5, r2, r8, lsl #30
   12cf4:	andeq	r5, r1, r8, lsr fp
   12cf8:			; <UNDEFINED> instruction: 0x00015ab4
   12cfc:	andeq	r5, r1, r8, asr #21
   12d00:	andeq	r5, r1, r0, lsl #21
   12d04:	andeq	r5, r1, r8, ror #20
   12d08:	ldr	r3, [pc, #44]	; 12d3c <__assert_fail@plt+0x1bc8>
   12d0c:	push	{r4, lr}
   12d10:	mov	r2, #5
   12d14:	ldr	r1, [pc, #36]	; 12d40 <__assert_fail@plt+0x1bcc>
   12d18:	mov	r0, #0
   12d1c:	ldr	r4, [r3]
   12d20:	bl	10f40 <dcgettext@plt>
   12d24:	mov	r1, #0
   12d28:	mov	r2, r0
   12d2c:	mov	r0, r4
   12d30:	bl	10fac <error@plt>
   12d34:	mov	r0, #1
   12d38:	bl	11018 <exit@plt>
   12d3c:	andeq	r6, r2, r0, lsl r1
   12d40:	ldrdeq	r5, [r1], -r4
   12d44:	cmp	r0, #0
   12d48:	push	{r4, lr}
   12d4c:	bne	12d60 <__assert_fail@plt+0x1bec>
   12d50:	mov	r0, #1
   12d54:	bl	10fd0 <malloc@plt>
   12d58:	cmp	r0, #0
   12d5c:	popne	{r4, pc}
   12d60:	bl	12d08 <__assert_fail@plt+0x1b94>
   12d64:	push	{r4, lr}
   12d68:	mov	r4, r0
   12d6c:	bl	10fd0 <malloc@plt>
   12d70:	cmp	r0, #0
   12d74:	popne	{r4, pc}
   12d78:	mov	r0, r4
   12d7c:	pop	{r4, lr}
   12d80:	b	12d44 <__assert_fail@plt+0x1bd0>
   12d84:	umull	r2, r3, r1, r0
   12d88:	push	{r4, lr}
   12d8c:	cmp	r3, #0
   12d90:	bne	12db4 <__assert_fail@plt+0x1c40>
   12d94:	mul	r4, r1, r0
   12d98:	mov	r0, r4
   12d9c:	bl	10fd0 <malloc@plt>
   12da0:	cmp	r0, #0
   12da4:	popne	{r4, pc}
   12da8:	mov	r0, r4
   12dac:	pop	{r4, lr}
   12db0:	b	12d44 <__assert_fail@plt+0x1bd0>
   12db4:	bl	12d08 <__assert_fail@plt+0x1b94>
   12db8:	push	{r4, lr}
   12dbc:	mov	r4, r0
   12dc0:	bl	12d64 <__assert_fail@plt+0x1bf0>
   12dc4:	mov	r2, r4
   12dc8:	mov	r1, #0
   12dcc:	bl	11090 <memset@plt>
   12dd0:	pop	{r4, pc}
   12dd4:	push	{r4, lr}
   12dd8:	mov	r4, r0
   12ddc:	bl	10ea4 <calloc@plt>
   12de0:	cmp	r0, #0
   12de4:	popne	{r4, pc}
   12de8:	mov	r0, r4
   12dec:	pop	{r4, lr}
   12df0:	b	12d44 <__assert_fail@plt+0x1bd0>
   12df4:	cmp	r0, #0
   12df8:	push	{r4, lr}
   12dfc:	mov	r4, r1
   12e00:	beq	12e1c <__assert_fail@plt+0x1ca8>
   12e04:	bl	10f64 <realloc@plt>
   12e08:	cmp	r0, #0
   12e0c:	popne	{r4, pc}
   12e10:	mov	r0, r4
   12e14:	pop	{r4, lr}
   12e18:	b	12d44 <__assert_fail@plt+0x1bd0>
   12e1c:	mov	r0, r1
   12e20:	pop	{r4, lr}
   12e24:	b	12d64 <__assert_fail@plt+0x1bf0>
   12e28:	push	{r4, lr}
   12e2c:	sub	sp, sp, #8
   12e30:	ldr	ip, [sp, #16]
   12e34:	str	ip, [sp]
   12e38:	bl	14a9c <__assert_fail@plt+0x3928>
   12e3c:	subs	r4, r0, #0
   12e40:	blt	12e50 <__assert_fail@plt+0x1cdc>
   12e44:	mov	r0, r4
   12e48:	add	sp, sp, #8
   12e4c:	pop	{r4, pc}
   12e50:	bl	11060 <__errno_location@plt>
   12e54:	ldr	r3, [r0]
   12e58:	cmp	r3, #12
   12e5c:	bne	12e44 <__assert_fail@plt+0x1cd0>
   12e60:	bl	12d08 <__assert_fail@plt+0x1b94>
   12e64:	push	{r4, lr}
   12e68:	bl	14d34 <__assert_fail@plt+0x3bc0>
   12e6c:	subs	r4, r0, #0
   12e70:	beq	12e7c <__assert_fail@plt+0x1d08>
   12e74:	mov	r0, r4
   12e78:	pop	{r4, pc}
   12e7c:	bl	11060 <__errno_location@plt>
   12e80:	ldr	r3, [r0]
   12e84:	cmp	r3, #12
   12e88:	bne	12e74 <__assert_fail@plt+0x1d00>
   12e8c:	bl	12d08 <__assert_fail@plt+0x1b94>
   12e90:	push	{r4, lr}
   12e94:	bl	14f1c <__assert_fail@plt+0x3da8>
   12e98:	subs	r4, r0, #0
   12e9c:	beq	12ea8 <__assert_fail@plt+0x1d34>
   12ea0:	mov	r0, r4
   12ea4:	pop	{r4, pc}
   12ea8:	bl	11060 <__errno_location@plt>
   12eac:	ldr	r3, [r0]
   12eb0:	cmp	r3, #12
   12eb4:	bne	12ea0 <__assert_fail@plt+0x1d2c>
   12eb8:	bl	12d08 <__assert_fail@plt+0x1b94>
   12ebc:	push	{r4, r5, r6, r7, r8, lr}
   12ec0:	subs	r7, r0, #0
   12ec4:	ldr	r5, [pc, #108]	; 12f38 <__assert_fail@plt+0x1dc4>
   12ec8:	sub	sp, sp, #8
   12ecc:	mov	r8, r1
   12ed0:	ldr	r1, [r5]
   12ed4:	moveq	r7, sp
   12ed8:	str	r1, [sp, #4]
   12edc:	mov	r0, r7
   12ee0:	mov	r1, r8
   12ee4:	mov	r6, r2
   12ee8:	bl	10fa0 <mbrtowc@plt>
   12eec:	cmp	r6, #0
   12ef0:	cmnne	r0, #3
   12ef4:	mov	r4, r0
   12ef8:	bhi	12f18 <__assert_fail@plt+0x1da4>
   12efc:	ldr	r2, [sp, #4]
   12f00:	ldr	r3, [r5]
   12f04:	mov	r0, r4
   12f08:	cmp	r2, r3
   12f0c:	bne	12f34 <__assert_fail@plt+0x1dc0>
   12f10:	add	sp, sp, #8
   12f14:	pop	{r4, r5, r6, r7, r8, pc}
   12f18:	mov	r0, #0
   12f1c:	bl	12fac <__assert_fail@plt+0x1e38>
   12f20:	cmp	r0, #0
   12f24:	moveq	r4, #1
   12f28:	ldrbeq	r3, [r8]
   12f2c:	streq	r3, [r7]
   12f30:	b	12efc <__assert_fail@plt+0x1d88>
   12f34:	bl	10f58 <__stack_chk_fail@plt>
   12f38:	andeq	r5, r2, r8, lsl #30
   12f3c:	cmp	r0, r1
   12f40:	beq	12fa4 <__assert_fail@plt+0x1e30>
   12f44:	push	{lr}		; (str lr, [sp, #-4]!)
   12f48:	sub	r0, r0, #1
   12f4c:	sub	r1, r1, #1
   12f50:	b	12f5c <__assert_fail@plt+0x1de8>
   12f54:	cmp	r3, r2
   12f58:	bne	12f94 <__assert_fail@plt+0x1e20>
   12f5c:	ldrb	r3, [r0, #1]!
   12f60:	sub	r2, r3, #65	; 0x41
   12f64:	cmp	r2, #25
   12f68:	ldrb	r2, [r1, #1]!
   12f6c:	mov	ip, r3
   12f70:	addls	ip, r3, #32
   12f74:	sub	lr, r2, #65	; 0x41
   12f78:	uxtbls	r3, ip
   12f7c:	cmp	lr, #25
   12f80:	mov	lr, r2
   12f84:	addls	lr, r2, #32
   12f88:	uxtbls	r2, lr
   12f8c:	cmp	r3, #0
   12f90:	bne	12f54 <__assert_fail@plt+0x1de0>
   12f94:	uxtb	ip, ip
   12f98:	uxtb	r0, lr
   12f9c:	sub	r0, ip, r0
   12fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fa4:	mov	r0, #0
   12fa8:	bx	lr
   12fac:	push	{r4, lr}
   12fb0:	mov	r1, #0
   12fb4:	bl	110fc <setlocale@plt>
   12fb8:	subs	r4, r0, #0
   12fbc:	beq	12fe8 <__assert_fail@plt+0x1e74>
   12fc0:	ldr	r1, [pc, #40]	; 12ff0 <__assert_fail@plt+0x1e7c>
   12fc4:	bl	10ec8 <strcmp@plt>
   12fc8:	cmp	r0, #0
   12fcc:	popeq	{r4, pc}
   12fd0:	mov	r0, r4
   12fd4:	ldr	r1, [pc, #24]	; 12ff4 <__assert_fail@plt+0x1e80>
   12fd8:	bl	10ec8 <strcmp@plt>
   12fdc:	adds	r0, r0, #0
   12fe0:	movne	r0, #1
   12fe4:	pop	{r4, pc}
   12fe8:	mov	r0, #1
   12fec:	pop	{r4, pc}
   12ff0:	andeq	r5, r1, r8, ror #21
   12ff4:	andeq	r5, r1, ip, ror #21
   12ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ffc:	sub	sp, sp, #124	; 0x7c
   13000:	ldr	r6, [pc, #920]	; 133a0 <__assert_fail@plt+0x222c>
   13004:	mov	r0, #14
   13008:	ldr	r7, [pc, #916]	; 133a4 <__assert_fail@plt+0x2230>
   1300c:	ldr	r3, [r6]
   13010:	ldr	r5, [pc, #912]	; 133a8 <__assert_fail@plt+0x2234>
   13014:	str	r3, [sp, #116]	; 0x74
   13018:	bl	11114 <nl_langinfo@plt>
   1301c:	ldr	r4, [r7]
   13020:	cmp	r0, #0
   13024:	movne	r5, r0
   13028:	cmp	r4, #0
   1302c:	beq	130d0 <__assert_fail@plt+0x1f5c>
   13030:	ldrb	r7, [r4]
   13034:	cmp	r7, #0
   13038:	bne	1306c <__assert_fail@plt+0x1ef8>
   1303c:	b	130a4 <__assert_fail@plt+0x1f30>
   13040:	mov	r0, r4
   13044:	bl	1103c <strlen@plt>
   13048:	add	r0, r0, #1
   1304c:	add	r7, r4, r0
   13050:	mov	r0, r7
   13054:	bl	1103c <strlen@plt>
   13058:	add	r0, r0, #1
   1305c:	add	r4, r7, r0
   13060:	ldrb	r7, [r7, r0]
   13064:	cmp	r7, #0
   13068:	beq	130a4 <__assert_fail@plt+0x1f30>
   1306c:	mov	r1, r4
   13070:	mov	r0, r5
   13074:	bl	10ec8 <strcmp@plt>
   13078:	cmp	r0, #0
   1307c:	beq	13094 <__assert_fail@plt+0x1f20>
   13080:	cmp	r7, #42	; 0x2a
   13084:	bne	13040 <__assert_fail@plt+0x1ecc>
   13088:	ldrb	r3, [r4, #1]
   1308c:	cmp	r3, #0
   13090:	bne	13040 <__assert_fail@plt+0x1ecc>
   13094:	mov	r0, r4
   13098:	bl	1103c <strlen@plt>
   1309c:	add	r0, r0, #1
   130a0:	add	r5, r4, r0
   130a4:	ldrb	r0, [r5]
   130a8:	ldr	r2, [sp, #116]	; 0x74
   130ac:	ldr	r1, [pc, #760]	; 133ac <__assert_fail@plt+0x2238>
   130b0:	ldr	r3, [r6]
   130b4:	cmp	r0, #0
   130b8:	movne	r0, r5
   130bc:	moveq	r0, r1
   130c0:	cmp	r2, r3
   130c4:	bne	1338c <__assert_fail@plt+0x2218>
   130c8:	add	sp, sp, #124	; 0x7c
   130cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130d0:	ldr	r0, [pc, #728]	; 133b0 <__assert_fail@plt+0x223c>
   130d4:	bl	10fc4 <getenv@plt>
   130d8:	subs	r4, r0, #0
   130dc:	beq	13148 <__assert_fail@plt+0x1fd4>
   130e0:	ldrb	r3, [r4]
   130e4:	cmp	r3, #0
   130e8:	bne	13120 <__assert_fail@plt+0x1fac>
   130ec:	ldr	r4, [pc, #704]	; 133b4 <__assert_fail@plt+0x2240>
   130f0:	mov	r0, #23
   130f4:	mov	r8, #9
   130f8:	mov	sl, #8
   130fc:	bl	10fd0 <malloc@plt>
   13100:	subs	r9, r0, #0
   13104:	beq	1313c <__assert_fail@plt+0x1fc8>
   13108:	mov	r1, r4
   1310c:	mov	r2, sl
   13110:	bl	10f1c <memcpy@plt>
   13114:	mov	r3, #47	; 0x2f
   13118:	strb	r3, [r9, sl]
   1311c:	b	13168 <__assert_fail@plt+0x1ff4>
   13120:	bl	1103c <strlen@plt>
   13124:	subs	r8, r0, #0
   13128:	moveq	r0, #14
   1312c:	bne	13348 <__assert_fail@plt+0x21d4>
   13130:	bl	10fd0 <malloc@plt>
   13134:	subs	r9, r0, #0
   13138:	bne	1315c <__assert_fail@plt+0x1fe8>
   1313c:	ldr	r4, [pc, #612]	; 133a8 <__assert_fail@plt+0x2234>
   13140:	str	r4, [r7]
   13144:	b	13030 <__assert_fail@plt+0x1ebc>
   13148:	mov	r0, #23
   1314c:	mov	r8, #9
   13150:	mov	sl, #8
   13154:	ldr	r4, [pc, #600]	; 133b4 <__assert_fail@plt+0x2240>
   13158:	b	130fc <__assert_fail@plt+0x1f88>
   1315c:	mov	r1, r4
   13160:	mov	r2, r8
   13164:	bl	10f1c <memcpy@plt>
   13168:	ldr	r3, [pc, #584]	; 133b8 <__assert_fail@plt+0x2244>
   1316c:	add	ip, r9, r8
   13170:	ldm	r3!, {r0, r1, r2}
   13174:	ldrh	r3, [r3]
   13178:	str	r0, [r9, r8]
   1317c:	str	r1, [ip, #4]
   13180:	strh	r3, [ip, #12]
   13184:	str	r2, [ip, #8]
   13188:	mov	r1, #32768	; 0x8000
   1318c:	mov	r0, r9
   13190:	bl	10fb8 <open64@plt>
   13194:	subs	r4, r0, #0
   13198:	bge	131ac <__assert_fail@plt+0x2038>
   1319c:	ldr	r4, [pc, #516]	; 133a8 <__assert_fail@plt+0x2234>
   131a0:	mov	r0, r9
   131a4:	bl	10f04 <free@plt>
   131a8:	b	13140 <__assert_fail@plt+0x1fcc>
   131ac:	ldr	r1, [pc, #520]	; 133bc <__assert_fail@plt+0x2248>
   131b0:	bl	10e98 <fdopen@plt>
   131b4:	subs	r8, r0, #0
   131b8:	beq	13360 <__assert_fail@plt+0x21ec>
   131bc:	mov	fp, #0
   131c0:	mov	r4, fp
   131c4:	str	r9, [sp]
   131c8:	str	r5, [sp, #4]
   131cc:	ldr	r3, [r8, #4]
   131d0:	ldr	r2, [r8, #8]
   131d4:	cmp	r3, r2
   131d8:	bcs	132a4 <__assert_fail@plt+0x2130>
   131dc:	add	r2, r3, #1
   131e0:	str	r2, [r8, #4]
   131e4:	ldrb	r0, [r3]
   131e8:	sub	r3, r0, #9
   131ec:	cmp	r0, #32
   131f0:	cmpne	r3, #1
   131f4:	bls	131cc <__assert_fail@plt+0x2058>
   131f8:	cmp	r0, #35	; 0x23
   131fc:	beq	132b8 <__assert_fail@plt+0x2144>
   13200:	mov	r1, r8
   13204:	bl	11054 <ungetc@plt>
   13208:	add	r3, sp, #64	; 0x40
   1320c:	add	r2, sp, #12
   13210:	ldr	r1, [pc, #424]	; 133c0 <__assert_fail@plt+0x224c>
   13214:	mov	r0, r8
   13218:	bl	110a8 <fscanf@plt>
   1321c:	cmp	r0, #1
   13220:	ble	132f4 <__assert_fail@plt+0x2180>
   13224:	add	r0, sp, #12
   13228:	bl	1103c <strlen@plt>
   1322c:	mov	sl, r0
   13230:	add	r0, sp, #64	; 0x40
   13234:	bl	1103c <strlen@plt>
   13238:	cmp	fp, #0
   1323c:	mov	r9, r0
   13240:	add	r3, sl, r0
   13244:	bne	13318 <__assert_fail@plt+0x21a4>
   13248:	add	r0, r3, #3
   1324c:	add	fp, r3, #2
   13250:	bl	10fd0 <malloc@plt>
   13254:	mov	r5, r0
   13258:	cmp	r5, #0
   1325c:	beq	1336c <__assert_fail@plt+0x21f8>
   13260:	sub	r4, fp, r9
   13264:	sub	r0, r4, sl
   13268:	sub	r0, r0, #2
   1326c:	add	r1, sp, #12
   13270:	add	r2, sl, #1
   13274:	add	r0, r5, r0
   13278:	bl	10f1c <memcpy@plt>
   1327c:	sub	r0, r4, #1
   13280:	add	r2, r9, #1
   13284:	add	r0, r5, r0
   13288:	add	r1, sp, #64	; 0x40
   1328c:	bl	10f1c <memcpy@plt>
   13290:	ldr	r3, [r8, #4]
   13294:	ldr	r2, [r8, #8]
   13298:	mov	r4, r5
   1329c:	cmp	r3, r2
   132a0:	bcc	131dc <__assert_fail@plt+0x2068>
   132a4:	mov	r0, r8
   132a8:	bl	110f0 <__uflow@plt>
   132ac:	cmn	r0, #1
   132b0:	bne	131e8 <__assert_fail@plt+0x2074>
   132b4:	b	132f4 <__assert_fail@plt+0x2180>
   132b8:	ldr	r3, [r8, #4]
   132bc:	ldr	r2, [r8, #8]
   132c0:	cmp	r3, r2
   132c4:	bcs	13334 <__assert_fail@plt+0x21c0>
   132c8:	add	r2, r3, #1
   132cc:	str	r2, [r8, #4]
   132d0:	ldrb	r0, [r3]
   132d4:	mov	r3, #1
   132d8:	cmp	r0, #10
   132dc:	moveq	r3, #0
   132e0:	andne	r3, r3, #1
   132e4:	cmp	r3, #0
   132e8:	bne	132b8 <__assert_fail@plt+0x2144>
   132ec:	cmn	r0, #1
   132f0:	bne	131cc <__assert_fail@plt+0x2058>
   132f4:	mov	r0, r8
   132f8:	ldr	r9, [sp]
   132fc:	ldr	r5, [sp, #4]
   13300:	bl	110d8 <fclose@plt>
   13304:	cmp	fp, #0
   13308:	beq	1319c <__assert_fail@plt+0x2028>
   1330c:	mov	r3, #0
   13310:	strb	r3, [r4, fp]
   13314:	b	131a0 <__assert_fail@plt+0x202c>
   13318:	add	fp, fp, r3
   1331c:	add	r1, fp, #3
   13320:	mov	r0, r4
   13324:	bl	10f64 <realloc@plt>
   13328:	add	fp, fp, #2
   1332c:	mov	r5, r0
   13330:	b	13258 <__assert_fail@plt+0x20e4>
   13334:	mov	r0, r8
   13338:	bl	110f0 <__uflow@plt>
   1333c:	adds	r3, r0, #1
   13340:	movne	r3, #1
   13344:	b	132d8 <__assert_fail@plt+0x2164>
   13348:	add	r3, r4, r8
   1334c:	ldrb	r3, [r3, #-1]
   13350:	cmp	r3, #47	; 0x2f
   13354:	bne	13390 <__assert_fail@plt+0x221c>
   13358:	add	r0, r8, #14
   1335c:	b	13130 <__assert_fail@plt+0x1fbc>
   13360:	mov	r0, r4
   13364:	bl	1115c <close@plt>
   13368:	b	1319c <__assert_fail@plt+0x2028>
   1336c:	mov	r0, r4
   13370:	ldr	r9, [sp]
   13374:	ldr	r5, [sp, #4]
   13378:	bl	10f04 <free@plt>
   1337c:	mov	r0, r8
   13380:	bl	110d8 <fclose@plt>
   13384:	ldr	r4, [pc, #28]	; 133a8 <__assert_fail@plt+0x2234>
   13388:	b	131a0 <__assert_fail@plt+0x202c>
   1338c:	bl	10f58 <__stack_chk_fail@plt>
   13390:	add	r0, r8, #15
   13394:	mov	sl, r8
   13398:	add	r8, r8, #1
   1339c:	b	130fc <__assert_fail@plt+0x1f88>
   133a0:	andeq	r5, r2, r8, lsl #30
   133a4:	andeq	r6, r2, r4, asr #2
   133a8:	andeq	r5, r1, r0, asr r4
   133ac:	strdeq	r5, [r1], -r4
   133b0:	andeq	r5, r1, r8, lsl #22
   133b4:	strdeq	r5, [r1], -ip
   133b8:	andeq	r5, r1, r8, lsl fp
   133bc:	andeq	r5, r1, r8, lsr #22
   133c0:	andeq	r5, r1, ip, lsr #22
   133c4:	push	{r4, lr}
   133c8:	mov	r4, r0
   133cc:	bl	10eec <wcwidth@plt>
   133d0:	cmp	r0, #0
   133d4:	popge	{r4, pc}
   133d8:	mov	r0, r4
   133dc:	bl	10f7c <iswcntrl@plt>
   133e0:	clz	r0, r0
   133e4:	lsr	r0, r0, #5
   133e8:	pop	{r4, pc}
   133ec:	mov	r3, r1
   133f0:	push	{r4, r5, r6, lr}
   133f4:	mov	r4, r1
   133f8:	ldr	r1, [r3], #16
   133fc:	ldr	r2, [r4, #4]
   13400:	cmp	r1, r3
   13404:	mov	r5, r0
   13408:	strne	r1, [r0]
   1340c:	beq	1342c <__assert_fail@plt+0x22b8>
   13410:	ldrb	r3, [r4, #8]
   13414:	str	r2, [r5, #4]
   13418:	cmp	r3, #0
   1341c:	strb	r3, [r5, #8]
   13420:	ldrne	r3, [r4, #12]
   13424:	strne	r3, [r5, #12]
   13428:	pop	{r4, r5, r6, pc}
   1342c:	add	r3, r0, #16
   13430:	mov	r0, r3
   13434:	bl	10f1c <memcpy@plt>
   13438:	ldr	r2, [r4, #4]
   1343c:	str	r0, [r5]
   13440:	b	13410 <__assert_fail@plt+0x229c>
   13444:	ldr	r3, [pc, #20]	; 13460 <__assert_fail@plt+0x22ec>
   13448:	lsr	r2, r0, #5
   1344c:	and	r0, r0, #31
   13450:	ldr	r3, [r3, r2, lsl #2]
   13454:	lsr	r0, r3, r0
   13458:	and	r0, r0, #1
   1345c:	bx	lr
   13460:	andeq	r5, r1, r8, lsr fp
   13464:	push	{r4, r5, r6, r7, r8, fp, lr}
   13468:	cmn	r2, #-1073741823	; 0xc0000001
   1346c:	ldr	r6, [pc, #348]	; 135d0 <__assert_fail@plt+0x245c>
   13470:	add	fp, sp, #24
   13474:	mov	r7, r2
   13478:	sub	sp, sp, #12
   1347c:	ldr	r2, [r6]
   13480:	str	r2, [fp, #-32]	; 0xffffffe0
   13484:	bhi	13590 <__assert_fail@plt+0x241c>
   13488:	mov	r8, r3
   1348c:	ldr	r3, [pc, #320]	; 135d4 <__assert_fail@plt+0x2460>
   13490:	mov	r5, r0
   13494:	lsl	r0, r7, #2
   13498:	cmp	r0, r3
   1349c:	mov	r4, r1
   134a0:	bhi	13584 <__assert_fail@plt+0x2410>
   134a4:	add	r3, r0, #15
   134a8:	bic	r3, r3, #7
   134ac:	sub	sp, sp, r3
   134b0:	add	r0, sp, #8
   134b4:	cmp	r0, #0
   134b8:	beq	13590 <__assert_fail@plt+0x241c>
   134bc:	cmp	r7, #2
   134c0:	mov	r3, #1
   134c4:	str	r3, [r0, #4]
   134c8:	movhi	r1, r4
   134cc:	movhi	ip, #0
   134d0:	movhi	r3, #2
   134d4:	bls	1351c <__assert_fail@plt+0x23a8>
   134d8:	ldrb	r2, [r1, #1]!
   134dc:	ldrb	lr, [r4, ip]
   134e0:	cmp	lr, r2
   134e4:	bne	13500 <__assert_fail@plt+0x238c>
   134e8:	b	135b4 <__assert_fail@plt+0x2440>
   134ec:	ldr	lr, [r0, ip, lsl #2]
   134f0:	sub	ip, ip, lr
   134f4:	ldrb	lr, [r4, ip]
   134f8:	cmp	lr, r2
   134fc:	beq	135b4 <__assert_fail@plt+0x2440>
   13500:	cmp	ip, #0
   13504:	bne	134ec <__assert_fail@plt+0x2378>
   13508:	mov	ip, #0
   1350c:	str	r3, [r0, r3, lsl #2]
   13510:	add	r3, r3, #1
   13514:	cmp	r7, r3
   13518:	bne	134d8 <__assert_fail@plt+0x2364>
   1351c:	mov	r3, #0
   13520:	str	r3, [r8]
   13524:	ldrb	r2, [r5]
   13528:	mov	r1, r5
   1352c:	cmp	r2, #0
   13530:	beq	13564 <__assert_fail@plt+0x23f0>
   13534:	ldrb	ip, [r4, r3]
   13538:	cmp	ip, r2
   1353c:	beq	13598 <__assert_fail@plt+0x2424>
   13540:	cmp	r3, #0
   13544:	addeq	r5, r5, #1
   13548:	ldrbeq	r2, [r1, #1]
   1354c:	ldrne	ip, [r0, r3, lsl #2]
   13550:	addeq	r1, r1, #1
   13554:	addne	r5, r5, ip
   13558:	subne	r3, r3, ip
   1355c:	cmp	r2, #0
   13560:	bne	13534 <__assert_fail@plt+0x23c0>
   13564:	bl	15060 <__assert_fail@plt+0x3eec>
   13568:	mov	r0, #1
   1356c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13570:	ldr	r3, [r6]
   13574:	cmp	r2, r3
   13578:	bne	135cc <__assert_fail@plt+0x2458>
   1357c:	sub	sp, fp, #24
   13580:	pop	{r4, r5, r6, r7, r8, fp, pc}
   13584:	bl	14ff4 <__assert_fail@plt+0x3e80>
   13588:	cmp	r0, #0
   1358c:	bne	134bc <__assert_fail@plt+0x2348>
   13590:	mov	r0, #0
   13594:	b	1356c <__assert_fail@plt+0x23f8>
   13598:	add	r3, r3, #1
   1359c:	cmp	r7, r3
   135a0:	add	ip, r1, #1
   135a4:	beq	135c4 <__assert_fail@plt+0x2450>
   135a8:	ldrb	r2, [r1, #1]
   135ac:	mov	r1, ip
   135b0:	b	1352c <__assert_fail@plt+0x23b8>
   135b4:	add	ip, ip, #1
   135b8:	sub	r2, r3, ip
   135bc:	str	r2, [r0, r3, lsl #2]
   135c0:	b	13510 <__assert_fail@plt+0x239c>
   135c4:	str	r5, [r8]
   135c8:	b	13564 <__assert_fail@plt+0x23f0>
   135cc:	bl	10f58 <__stack_chk_fail@plt>
   135d0:	andeq	r5, r2, r8, lsl #30
   135d4:			; <UNDEFINED> instruction: 0x00000fb7
   135d8:	push	{r4, lr}
   135dc:	mov	r2, #179	; 0xb3
   135e0:	ldr	r3, [pc, #8]	; 135f0 <__assert_fail@plt+0x247c>
   135e4:	ldr	r1, [pc, #8]	; 135f4 <__assert_fail@plt+0x2480>
   135e8:	ldr	r0, [pc, #8]	; 135f8 <__assert_fail@plt+0x2484>
   135ec:	bl	11174 <__assert_fail@plt>
   135f0:	andeq	r5, r1, r8, asr fp
   135f4:	andeq	r5, r1, r8, asr #20
   135f8:	andeq	r5, r1, r4, asr sl
   135fc:	ldr	r3, [pc, #2096]	; 13e34 <__assert_fail@plt+0x2cc0>
   13600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13604:	add	fp, sp, #32
   13608:	sub	sp, sp, #196	; 0xc4
   1360c:	ldr	r3, [r3]
   13610:	str	r0, [fp, #-220]	; 0xffffff24
   13614:	mov	r0, r1
   13618:	str	r3, [fp, #-40]	; 0xffffffd8
   1361c:	mov	r4, r1
   13620:	str	r2, [fp, #-224]	; 0xffffff20
   13624:	bl	150e4 <__assert_fail@plt+0x3f70>
   13628:	ldr	r3, [pc, #2056]	; 13e38 <__assert_fail@plt+0x2cc4>
   1362c:	cmp	r0, r3
   13630:	str	r0, [fp, #-216]	; 0xffffff28
   13634:	bhi	139e4 <__assert_fail@plt+0x2870>
   13638:	ldr	r2, [fp, #-216]	; 0xffffff28
   1363c:	ldr	r3, [pc, #2040]	; 13e3c <__assert_fail@plt+0x2cc8>
   13640:	lsl	r5, r2, #2
   13644:	add	r0, r5, r2
   13648:	add	r0, r2, r0, lsl #1
   1364c:	lsl	r0, r0, #2
   13650:	cmp	r0, r3
   13654:	bhi	13a04 <__assert_fail@plt+0x2890>
   13658:	add	r3, r0, #15
   1365c:	bic	r3, r3, #7
   13660:	sub	sp, sp, r3
   13664:	add	r8, sp, #8
   13668:	cmp	r8, #0
   1366c:	beq	139e4 <__assert_fail@plt+0x2870>
   13670:	ldr	r3, [fp, #-216]	; 0xffffff28
   13674:	mov	r6, #0
   13678:	add	r5, r5, r3
   1367c:	str	r4, [fp, #-192]	; 0xffffff40
   13680:	add	r9, r8, r5, lsl #3
   13684:	str	r6, [fp, #-200]	; 0xffffff38
   13688:	strb	r6, [fp, #-208]	; 0xffffff30
   1368c:	str	r6, [fp, #-204]	; 0xffffff34
   13690:	strb	r6, [fp, #-196]	; 0xffffff3c
   13694:	add	r5, r8, #16
   13698:	ldr	r7, [pc, #1952]	; 13e40 <__assert_fail@plt+0x2ccc>
   1369c:	b	13720 <__assert_fail@plt+0x25ac>
   136a0:	ldrb	r3, [r4]
   136a4:	and	r2, r3, #31
   136a8:	lsr	r3, r3, #5
   136ac:	ldr	r3, [r7, r3, lsl #2]
   136b0:	lsr	r3, r3, r2
   136b4:	tst	r3, #1
   136b8:	beq	13a10 <__assert_fail@plt+0x289c>
   136bc:	mov	r3, #1
   136c0:	str	r3, [fp, #-188]	; 0xffffff44
   136c4:	ldrb	r4, [r4]
   136c8:	strb	r3, [fp, #-184]	; 0xffffff48
   136cc:	strb	r3, [fp, #-196]	; 0xffffff3c
   136d0:	cmp	r4, #0
   136d4:	str	r4, [fp, #-180]	; 0xffffff4c
   136d8:	beq	13794 <__assert_fail@plt+0x2620>
   136dc:	mov	r3, #1
   136e0:	ldr	r1, [fp, #-192]	; 0xffffff40
   136e4:	sub	r2, fp, #176	; 0xb0
   136e8:	cmp	r1, r2
   136ec:	ldr	r2, [fp, #-188]	; 0xffffff44
   136f0:	strne	r1, [r5, #-16]
   136f4:	beq	13a2c <__assert_fail@plt+0x28b8>
   136f8:	cmp	r3, #0
   136fc:	str	r2, [r5, #-12]
   13700:	strb	r3, [r5, #-8]
   13704:	ldrne	r3, [fp, #-180]	; 0xffffff4c
   13708:	ldr	r4, [fp, #-192]	; 0xffffff40
   1370c:	strne	r3, [r5, #-4]
   13710:	add	r5, r5, #40	; 0x28
   13714:	add	r4, r4, r2
   13718:	strb	r6, [fp, #-196]	; 0xffffff3c
   1371c:	str	r4, [fp, #-192]	; 0xffffff40
   13720:	ldrb	r3, [fp, #-208]	; 0xffffff30
   13724:	cmp	r3, #0
   13728:	beq	136a0 <__assert_fail@plt+0x252c>
   1372c:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   13730:	mov	r1, r0
   13734:	mov	r0, r4
   13738:	bl	127c0 <__assert_fail@plt+0x164c>
   1373c:	sub	r3, fp, #204	; 0xcc
   13740:	mov	r1, r4
   13744:	mov	r2, r0
   13748:	sub	r0, fp, #180	; 0xb4
   1374c:	bl	12ebc <__assert_fail@plt+0x1d48>
   13750:	cmn	r0, #1
   13754:	str	r0, [fp, #-188]	; 0xffffff44
   13758:	beq	13a44 <__assert_fail@plt+0x28d0>
   1375c:	cmn	r0, #2
   13760:	beq	13a5c <__assert_fail@plt+0x28e8>
   13764:	cmp	r0, #0
   13768:	beq	13a7c <__assert_fail@plt+0x2908>
   1376c:	ldr	r4, [fp, #-180]	; 0xffffff4c
   13770:	mov	sl, #1
   13774:	sub	r0, fp, #204	; 0xcc
   13778:	strb	sl, [fp, #-184]	; 0xffffff48
   1377c:	bl	10f28 <mbsinit@plt>
   13780:	strb	sl, [fp, #-196]	; 0xffffff3c
   13784:	cmp	r0, #0
   13788:	strbne	r6, [fp, #-208]	; 0xffffff30
   1378c:	cmp	r4, #0
   13790:	bne	136dc <__assert_fail@plt+0x2568>
   13794:	ldr	r3, [fp, #-216]	; 0xffffff28
   13798:	cmp	r3, #2
   1379c:	mov	r3, #1
   137a0:	str	r3, [r9, #4]
   137a4:	bls	13838 <__assert_fail@plt+0x26c4>
   137a8:	ldr	sl, [fp, #-216]	; 0xffffff28
   137ac:	mov	r5, r8
   137b0:	mov	r7, #2
   137b4:	ldrb	r6, [r5, #48]	; 0x30
   137b8:	b	137e8 <__assert_fail@plt+0x2674>
   137bc:	ldrb	r2, [r3, #8]
   137c0:	cmp	r2, #0
   137c4:	beq	137f8 <__assert_fail@plt+0x2684>
   137c8:	ldr	r3, [r3, #12]
   137cc:	ldr	r2, [r5, #52]	; 0x34
   137d0:	cmp	r2, r3
   137d4:	beq	1381c <__assert_fail@plt+0x26a8>
   137d8:	cmp	r4, #0
   137dc:	beq	13d58 <__assert_fail@plt+0x2be4>
   137e0:	ldr	r3, [r9, r4, lsl #2]
   137e4:	sub	r4, r4, r3
   137e8:	add	r3, r4, r4, lsl #2
   137ec:	cmp	r6, #0
   137f0:	add	r3, r8, r3, lsl #3
   137f4:	bne	137bc <__assert_fail@plt+0x2648>
   137f8:	ldr	r2, [r5, #44]	; 0x2c
   137fc:	ldr	r1, [r3, #4]
   13800:	cmp	r2, r1
   13804:	bne	137d8 <__assert_fail@plt+0x2664>
   13808:	ldr	r1, [r3]
   1380c:	ldr	r0, [r5, #40]	; 0x28
   13810:	bl	10f34 <memcmp@plt>
   13814:	cmp	r0, #0
   13818:	bne	137d8 <__assert_fail@plt+0x2664>
   1381c:	add	r4, r4, #1
   13820:	sub	r3, r7, r4
   13824:	str	r3, [r9, r7, lsl #2]
   13828:	add	r7, r7, #1
   1382c:	cmp	sl, r7
   13830:	add	r5, r5, #40	; 0x28
   13834:	bne	137b4 <__assert_fail@plt+0x2640>
   13838:	ldr	r1, [fp, #-220]	; 0xffffff24
   1383c:	mov	r2, #0
   13840:	str	r1, [fp, #-136]	; 0xffffff78
   13844:	str	r1, [fp, #-80]	; 0xffffffb0
   13848:	ldr	sl, [pc, #1520]	; 13e40 <__assert_fail@plt+0x2ccc>
   1384c:	ldr	r1, [fp, #-224]	; 0xffffff20
   13850:	mov	r3, r2
   13854:	mov	r7, r2
   13858:	mov	r6, #1
   1385c:	str	r2, [r1]
   13860:	strb	r2, [fp, #-152]	; 0xffffff68
   13864:	str	r2, [fp, #-148]	; 0xffffff6c
   13868:	strb	r2, [fp, #-140]	; 0xffffff74
   1386c:	strb	r2, [fp, #-96]	; 0xffffffa0
   13870:	str	r2, [fp, #-92]	; 0xffffffa4
   13874:	strb	r2, [fp, #-84]	; 0xffffffac
   13878:	str	r2, [fp, #-144]	; 0xffffff70
   1387c:	str	r2, [fp, #-88]	; 0xffffffa8
   13880:	cmp	r3, #0
   13884:	ldreq	r5, [fp, #-80]	; 0xffffffb0
   13888:	beq	1393c <__assert_fail@plt+0x27c8>
   1388c:	ldrb	r3, [fp, #-72]	; 0xffffffb8
   13890:	cmp	r3, #0
   13894:	ldrne	r4, [fp, #-68]	; 0xffffffbc
   13898:	bne	13978 <__assert_fail@plt+0x2804>
   1389c:	add	r3, r7, r7, lsl #2
   138a0:	add	r3, r8, r3, lsl #3
   138a4:	ldr	r2, [r3, #4]
   138a8:	ldr	r4, [fp, #-76]	; 0xffffffb4
   138ac:	cmp	r2, r4
   138b0:	beq	13b20 <__assert_fail@plt+0x29ac>
   138b4:	cmp	r7, #0
   138b8:	bne	13b44 <__assert_fail@plt+0x29d0>
   138bc:	ldrb	r3, [fp, #-140]	; 0xffffff74
   138c0:	cmp	r3, #0
   138c4:	bne	13da0 <__assert_fail@plt+0x2c2c>
   138c8:	ldrb	r3, [fp, #-152]	; 0xffffff68
   138cc:	ldr	r4, [fp, #-136]	; 0xffffff78
   138d0:	cmp	r3, #0
   138d4:	bne	13cf0 <__assert_fail@plt+0x2b7c>
   138d8:	ldrb	r3, [r4]
   138dc:	and	r2, r3, #31
   138e0:	lsr	r3, r3, #5
   138e4:	ldr	r3, [sl, r3, lsl #2]
   138e8:	lsr	r3, r3, r2
   138ec:	tst	r3, #1
   138f0:	beq	13cdc <__assert_fail@plt+0x2b68>
   138f4:	str	r6, [fp, #-132]	; 0xffffff7c
   138f8:	ldrb	r4, [r4]
   138fc:	strb	r6, [fp, #-128]	; 0xffffff80
   13900:	strb	r6, [fp, #-140]	; 0xffffff74
   13904:	str	r4, [fp, #-124]	; 0xffffff84
   13908:	cmp	r4, #0
   1390c:	beq	13bdc <__assert_fail@plt+0x2a68>
   13910:	ldr	r4, [fp, #-136]	; 0xffffff78
   13914:	ldr	r3, [fp, #-132]	; 0xffffff7c
   13918:	ldr	r5, [fp, #-80]	; 0xffffffb0
   1391c:	add	r4, r4, r3
   13920:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13924:	str	r4, [fp, #-136]	; 0xffffff78
   13928:	add	r5, r5, r3
   1392c:	mov	r3, #0
   13930:	str	r5, [fp, #-80]	; 0xffffffb0
   13934:	strb	r3, [fp, #-140]	; 0xffffff74
   13938:	strb	r3, [fp, #-84]	; 0xffffffac
   1393c:	ldrb	r3, [fp, #-96]	; 0xffffffa0
   13940:	cmp	r3, #0
   13944:	bne	13ab8 <__assert_fail@plt+0x2944>
   13948:	ldrb	r3, [r5]
   1394c:	and	r2, r3, #31
   13950:	lsr	r3, r3, #5
   13954:	ldr	r3, [sl, r3, lsl #2]
   13958:	lsr	r3, r3, r2
   1395c:	tst	r3, #1
   13960:	beq	13aa4 <__assert_fail@plt+0x2930>
   13964:	str	r6, [fp, #-76]	; 0xffffffb4
   13968:	ldrb	r4, [r5]
   1396c:	strb	r6, [fp, #-72]	; 0xffffffb8
   13970:	strb	r6, [fp, #-84]	; 0xffffffac
   13974:	str	r4, [fp, #-68]	; 0xffffffbc
   13978:	cmp	r4, #0
   1397c:	beq	139d4 <__assert_fail@plt+0x2860>
   13980:	add	r3, r7, r7, lsl #2
   13984:	add	r3, r8, r3, lsl #3
   13988:	ldrb	r2, [r3, #8]
   1398c:	cmp	r2, #0
   13990:	beq	138a4 <__assert_fail@plt+0x2730>
   13994:	ldr	r3, [r3, #12]
   13998:	cmp	r3, r4
   1399c:	bne	138b4 <__assert_fail@plt+0x2740>
   139a0:	ldr	r4, [fp, #-76]	; 0xffffffb4
   139a4:	ldr	r5, [fp, #-80]	; 0xffffffb0
   139a8:	ldr	r3, [fp, #-216]	; 0xffffff28
   139ac:	add	r7, r7, #1
   139b0:	cmp	r3, r7
   139b4:	add	r5, r5, r4
   139b8:	mov	r3, #0
   139bc:	str	r5, [fp, #-80]	; 0xffffffb0
   139c0:	strb	r3, [fp, #-84]	; 0xffffffac
   139c4:	bne	1393c <__assert_fail@plt+0x27c8>
   139c8:	ldr	r2, [fp, #-224]	; 0xffffff20
   139cc:	ldr	r3, [fp, #-136]	; 0xffffff78
   139d0:	str	r3, [r2]
   139d4:	mov	r0, r8
   139d8:	bl	15060 <__assert_fail@plt+0x3eec>
   139dc:	mov	r0, #1
   139e0:	b	139e8 <__assert_fail@plt+0x2874>
   139e4:	mov	r0, #0
   139e8:	ldr	r3, [pc, #1092]	; 13e34 <__assert_fail@plt+0x2cc0>
   139ec:	ldr	r2, [fp, #-40]	; 0xffffffd8
   139f0:	ldr	r3, [r3]
   139f4:	cmp	r2, r3
   139f8:	bne	13e30 <__assert_fail@plt+0x2cbc>
   139fc:	sub	sp, fp, #32
   13a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a04:	bl	14ff4 <__assert_fail@plt+0x3e80>
   13a08:	mov	r8, r0
   13a0c:	b	13668 <__assert_fail@plt+0x24f4>
   13a10:	sub	r0, fp, #204	; 0xcc
   13a14:	bl	10f28 <mbsinit@plt>
   13a18:	cmp	r0, #0
   13a1c:	beq	13e08 <__assert_fail@plt+0x2c94>
   13a20:	mov	r3, #1
   13a24:	strb	r3, [fp, #-208]	; 0xffffff30
   13a28:	b	1372c <__assert_fail@plt+0x25b8>
   13a2c:	mov	r0, r5
   13a30:	bl	10f1c <memcpy@plt>
   13a34:	str	r5, [r5, #-16]
   13a38:	ldrb	r3, [fp, #-184]	; 0xffffff48
   13a3c:	ldr	r2, [fp, #-188]	; 0xffffff44
   13a40:	b	136f8 <__assert_fail@plt+0x2584>
   13a44:	mov	r3, #1
   13a48:	str	r3, [fp, #-188]	; 0xffffff44
   13a4c:	strb	r3, [fp, #-196]	; 0xffffff3c
   13a50:	strb	r6, [fp, #-184]	; 0xffffff48
   13a54:	mov	r3, #0
   13a58:	b	136e0 <__assert_fail@plt+0x256c>
   13a5c:	ldr	r0, [fp, #-192]	; 0xffffff40
   13a60:	bl	1103c <strlen@plt>
   13a64:	mov	r3, #1
   13a68:	strb	r3, [fp, #-196]	; 0xffffff3c
   13a6c:	strb	r6, [fp, #-184]	; 0xffffff48
   13a70:	mov	r3, #0
   13a74:	str	r0, [fp, #-188]	; 0xffffff44
   13a78:	b	136e0 <__assert_fail@plt+0x256c>
   13a7c:	ldr	r3, [fp, #-192]	; 0xffffff40
   13a80:	mov	r2, #1
   13a84:	str	r2, [fp, #-188]	; 0xffffff44
   13a88:	ldrb	r3, [r3]
   13a8c:	cmp	r3, #0
   13a90:	bne	13e1c <__assert_fail@plt+0x2ca8>
   13a94:	ldr	r4, [fp, #-180]	; 0xffffff4c
   13a98:	cmp	r4, #0
   13a9c:	beq	13770 <__assert_fail@plt+0x25fc>
   13aa0:	bl	135d8 <__assert_fail@plt+0x2464>
   13aa4:	sub	r0, fp, #92	; 0x5c
   13aa8:	bl	10f28 <mbsinit@plt>
   13aac:	cmp	r0, #0
   13ab0:	beq	13e08 <__assert_fail@plt+0x2c94>
   13ab4:	strb	r6, [fp, #-96]	; 0xffffffa0
   13ab8:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   13abc:	mov	r1, r0
   13ac0:	mov	r0, r5
   13ac4:	bl	127c0 <__assert_fail@plt+0x164c>
   13ac8:	sub	r3, fp, #92	; 0x5c
   13acc:	mov	r1, r5
   13ad0:	mov	r2, r0
   13ad4:	sub	r0, fp, #68	; 0x44
   13ad8:	bl	12ebc <__assert_fail@plt+0x1d48>
   13adc:	cmn	r0, #1
   13ae0:	str	r0, [fp, #-76]	; 0xffffffb4
   13ae4:	beq	13cc8 <__assert_fail@plt+0x2b54>
   13ae8:	cmn	r0, #2
   13aec:	beq	13d60 <__assert_fail@plt+0x2bec>
   13af0:	cmp	r0, #0
   13af4:	beq	13d7c <__assert_fail@plt+0x2c08>
   13af8:	ldr	r4, [fp, #-68]	; 0xffffffbc
   13afc:	sub	r0, fp, #92	; 0x5c
   13b00:	strb	r6, [fp, #-72]	; 0xffffffb8
   13b04:	bl	10f28 <mbsinit@plt>
   13b08:	cmp	r0, #0
   13b0c:	movne	r3, #0
   13b10:	strbeq	r6, [fp, #-84]	; 0xffffffac
   13b14:	strbne	r6, [fp, #-84]	; 0xffffffac
   13b18:	strbne	r3, [fp, #-96]	; 0xffffffa0
   13b1c:	b	13978 <__assert_fail@plt+0x2804>
   13b20:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13b24:	ldr	r0, [r3]
   13b28:	mov	r1, r5
   13b2c:	mov	r2, r4
   13b30:	bl	10f34 <memcmp@plt>
   13b34:	cmp	r0, #0
   13b38:	beq	139a8 <__assert_fail@plt+0x2834>
   13b3c:	cmp	r7, #0
   13b40:	beq	138bc <__assert_fail@plt+0x2748>
   13b44:	ldr	r5, [r9, r7, lsl #2]
   13b48:	sub	r3, r7, r5
   13b4c:	cmp	r5, #0
   13b50:	str	r3, [fp, #-220]	; 0xffffff24
   13b54:	beq	13cc0 <__assert_fail@plt+0x2b4c>
   13b58:	ldrb	r3, [fp, #-140]	; 0xffffff74
   13b5c:	cmp	r3, #0
   13b60:	ldreq	r4, [fp, #-136]	; 0xffffff78
   13b64:	beq	13b98 <__assert_fail@plt+0x2a24>
   13b68:	ldrb	r3, [fp, #-128]	; 0xffffff80
   13b6c:	cmp	r3, #0
   13b70:	ldrne	r4, [fp, #-124]	; 0xffffff84
   13b74:	bne	13bd4 <__assert_fail@plt+0x2a60>
   13b78:	ldr	r4, [fp, #-136]	; 0xffffff78
   13b7c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   13b80:	subs	r5, r5, #1
   13b84:	add	r4, r4, r3
   13b88:	mov	r3, #0
   13b8c:	str	r4, [fp, #-136]	; 0xffffff78
   13b90:	strb	r3, [fp, #-140]	; 0xffffff74
   13b94:	beq	13cbc <__assert_fail@plt+0x2b48>
   13b98:	ldrb	r3, [fp, #-152]	; 0xffffff68
   13b9c:	cmp	r3, #0
   13ba0:	bne	13bf4 <__assert_fail@plt+0x2a80>
   13ba4:	ldrb	r3, [r4]
   13ba8:	and	r2, r3, #31
   13bac:	lsr	r3, r3, #5
   13bb0:	ldr	r3, [sl, r3, lsl #2]
   13bb4:	lsr	r3, r3, r2
   13bb8:	tst	r3, #1
   13bbc:	beq	13be0 <__assert_fail@plt+0x2a6c>
   13bc0:	str	r6, [fp, #-132]	; 0xffffff7c
   13bc4:	ldrb	r4, [r4]
   13bc8:	strb	r6, [fp, #-128]	; 0xffffff80
   13bcc:	strb	r6, [fp, #-140]	; 0xffffff74
   13bd0:	str	r4, [fp, #-124]	; 0xffffff84
   13bd4:	cmp	r4, #0
   13bd8:	bne	13b78 <__assert_fail@plt+0x2a04>
   13bdc:	bl	11150 <abort@plt>
   13be0:	sub	r0, fp, #148	; 0x94
   13be4:	bl	10f28 <mbsinit@plt>
   13be8:	cmp	r0, #0
   13bec:	beq	13e08 <__assert_fail@plt+0x2c94>
   13bf0:	strb	r6, [fp, #-152]	; 0xffffff68
   13bf4:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   13bf8:	mov	r1, r0
   13bfc:	mov	r0, r4
   13c00:	bl	127c0 <__assert_fail@plt+0x164c>
   13c04:	sub	r3, fp, #148	; 0x94
   13c08:	mov	r1, r4
   13c0c:	mov	r2, r0
   13c10:	sub	r0, fp, #124	; 0x7c
   13c14:	bl	12ebc <__assert_fail@plt+0x1d48>
   13c18:	cmn	r0, #1
   13c1c:	str	r0, [fp, #-132]	; 0xffffff7c
   13c20:	beq	13c5c <__assert_fail@plt+0x2ae8>
   13c24:	cmn	r0, #2
   13c28:	beq	13c6c <__assert_fail@plt+0x2af8>
   13c2c:	cmp	r0, #0
   13c30:	beq	13c88 <__assert_fail@plt+0x2b14>
   13c34:	ldr	r4, [fp, #-124]	; 0xffffff84
   13c38:	sub	r0, fp, #148	; 0x94
   13c3c:	strb	r6, [fp, #-128]	; 0xffffff80
   13c40:	bl	10f28 <mbsinit@plt>
   13c44:	cmp	r0, #0
   13c48:	movne	r3, #0
   13c4c:	strbeq	r6, [fp, #-140]	; 0xffffff74
   13c50:	strbne	r6, [fp, #-140]	; 0xffffff74
   13c54:	strbne	r3, [fp, #-152]	; 0xffffff68
   13c58:	b	13bd4 <__assert_fail@plt+0x2a60>
   13c5c:	mov	r3, #0
   13c60:	str	r6, [fp, #-132]	; 0xffffff7c
   13c64:	strb	r3, [fp, #-128]	; 0xffffff80
   13c68:	b	13b78 <__assert_fail@plt+0x2a04>
   13c6c:	ldr	r4, [fp, #-136]	; 0xffffff78
   13c70:	mov	r0, r4
   13c74:	bl	1103c <strlen@plt>
   13c78:	mov	r3, #0
   13c7c:	strb	r3, [fp, #-128]	; 0xffffff80
   13c80:	str	r0, [fp, #-132]	; 0xffffff7c
   13c84:	b	13b7c <__assert_fail@plt+0x2a08>
   13c88:	ldr	r4, [fp, #-136]	; 0xffffff78
   13c8c:	str	r6, [fp, #-132]	; 0xffffff7c
   13c90:	ldrb	r3, [r4]
   13c94:	cmp	r3, #0
   13c98:	bne	13e1c <__assert_fail@plt+0x2ca8>
   13c9c:	ldr	r4, [fp, #-124]	; 0xffffff84
   13ca0:	cmp	r4, #0
   13ca4:	beq	13c38 <__assert_fail@plt+0x2ac4>
   13ca8:	ldr	r3, [pc, #404]	; 13e44 <__assert_fail@plt+0x2cd0>
   13cac:	mov	r2, #179	; 0xb3
   13cb0:	ldr	r1, [pc, #400]	; 13e48 <__assert_fail@plt+0x2cd4>
   13cb4:	ldr	r0, [pc, #400]	; 13e4c <__assert_fail@plt+0x2cd8>
   13cb8:	bl	11174 <__assert_fail@plt>
   13cbc:	ldr	r7, [fp, #-220]	; 0xffffff24
   13cc0:	ldrb	r3, [fp, #-84]	; 0xffffffac
   13cc4:	b	13880 <__assert_fail@plt+0x270c>
   13cc8:	mov	r3, #0
   13ccc:	str	r6, [fp, #-76]	; 0xffffffb4
   13cd0:	strb	r6, [fp, #-84]	; 0xffffffac
   13cd4:	strb	r3, [fp, #-72]	; 0xffffffb8
   13cd8:	b	1389c <__assert_fail@plt+0x2728>
   13cdc:	sub	r0, fp, #148	; 0x94
   13ce0:	bl	10f28 <mbsinit@plt>
   13ce4:	cmp	r0, #0
   13ce8:	beq	13e08 <__assert_fail@plt+0x2c94>
   13cec:	strb	r6, [fp, #-152]	; 0xffffff68
   13cf0:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   13cf4:	mov	r1, r0
   13cf8:	mov	r0, r4
   13cfc:	bl	127c0 <__assert_fail@plt+0x164c>
   13d00:	sub	r3, fp, #148	; 0x94
   13d04:	mov	r1, r4
   13d08:	mov	r2, r0
   13d0c:	sub	r0, fp, #124	; 0x7c
   13d10:	bl	12ebc <__assert_fail@plt+0x1d48>
   13d14:	cmn	r0, #1
   13d18:	str	r0, [fp, #-132]	; 0xffffff7c
   13d1c:	beq	13db4 <__assert_fail@plt+0x2c40>
   13d20:	cmn	r0, #2
   13d24:	beq	13dc8 <__assert_fail@plt+0x2c54>
   13d28:	cmp	r0, #0
   13d2c:	beq	13de4 <__assert_fail@plt+0x2c70>
   13d30:	ldr	r4, [fp, #-124]	; 0xffffff84
   13d34:	sub	r0, fp, #148	; 0x94
   13d38:	strb	r6, [fp, #-128]	; 0xffffff80
   13d3c:	bl	10f28 <mbsinit@plt>
   13d40:	cmp	r0, #0
   13d44:	movne	r3, #0
   13d48:	strbeq	r6, [fp, #-140]	; 0xffffff74
   13d4c:	strbne	r6, [fp, #-140]	; 0xffffff74
   13d50:	strbne	r3, [fp, #-152]	; 0xffffff68
   13d54:	b	13908 <__assert_fail@plt+0x2794>
   13d58:	str	r7, [r9, r7, lsl #2]
   13d5c:	b	13828 <__assert_fail@plt+0x26b4>
   13d60:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13d64:	bl	1103c <strlen@plt>
   13d68:	mov	r3, #0
   13d6c:	strb	r6, [fp, #-84]	; 0xffffffac
   13d70:	strb	r3, [fp, #-72]	; 0xffffffb8
   13d74:	str	r0, [fp, #-76]	; 0xffffffb4
   13d78:	b	1389c <__assert_fail@plt+0x2728>
   13d7c:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13d80:	str	r6, [fp, #-76]	; 0xffffffb4
   13d84:	ldrb	r3, [r5]
   13d88:	cmp	r3, #0
   13d8c:	bne	13e1c <__assert_fail@plt+0x2ca8>
   13d90:	ldr	r4, [fp, #-68]	; 0xffffffbc
   13d94:	cmp	r4, #0
   13d98:	beq	13afc <__assert_fail@plt+0x2988>
   13d9c:	b	13aa0 <__assert_fail@plt+0x292c>
   13da0:	ldrb	r3, [fp, #-128]	; 0xffffff80
   13da4:	cmp	r3, #0
   13da8:	ldrne	r4, [fp, #-124]	; 0xffffff84
   13dac:	beq	13910 <__assert_fail@plt+0x279c>
   13db0:	b	13908 <__assert_fail@plt+0x2794>
   13db4:	mov	r3, #0
   13db8:	str	r6, [fp, #-132]	; 0xffffff7c
   13dbc:	strb	r3, [fp, #-128]	; 0xffffff80
   13dc0:	ldr	r4, [fp, #-136]	; 0xffffff78
   13dc4:	b	13914 <__assert_fail@plt+0x27a0>
   13dc8:	ldr	r4, [fp, #-136]	; 0xffffff78
   13dcc:	mov	r0, r4
   13dd0:	bl	1103c <strlen@plt>
   13dd4:	mov	r3, #0
   13dd8:	strb	r3, [fp, #-128]	; 0xffffff80
   13ddc:	str	r0, [fp, #-132]	; 0xffffff7c
   13de0:	b	13914 <__assert_fail@plt+0x27a0>
   13de4:	ldr	r4, [fp, #-136]	; 0xffffff78
   13de8:	str	r6, [fp, #-132]	; 0xffffff7c
   13dec:	ldrb	r3, [r4]
   13df0:	cmp	r3, #0
   13df4:	bne	13e1c <__assert_fail@plt+0x2ca8>
   13df8:	ldr	r4, [fp, #-124]	; 0xffffff84
   13dfc:	cmp	r4, #0
   13e00:	beq	13d34 <__assert_fail@plt+0x2bc0>
   13e04:	b	13aa0 <__assert_fail@plt+0x292c>
   13e08:	ldr	r3, [pc, #52]	; 13e44 <__assert_fail@plt+0x2cd0>
   13e0c:	mov	r2, #150	; 0x96
   13e10:	ldr	r1, [pc, #48]	; 13e48 <__assert_fail@plt+0x2cd4>
   13e14:	ldr	r0, [pc, #52]	; 13e50 <__assert_fail@plt+0x2cdc>
   13e18:	bl	11174 <__assert_fail@plt>
   13e1c:	ldr	r3, [pc, #32]	; 13e44 <__assert_fail@plt+0x2cd0>
   13e20:	mov	r2, #178	; 0xb2
   13e24:	ldr	r1, [pc, #28]	; 13e48 <__assert_fail@plt+0x2cd4>
   13e28:	ldr	r0, [pc, #36]	; 13e54 <__assert_fail@plt+0x2ce0>
   13e2c:	bl	11174 <__assert_fail@plt>
   13e30:	bl	10f58 <__stack_chk_fail@plt>
   13e34:	andeq	r5, r2, r8, lsl #30
   13e38:	ldrbeq	r7, [r1, #1117]	; 0x45d
   13e3c:			; <UNDEFINED> instruction: 0x00000fb7
   13e40:	andeq	r5, r1, r8, lsr fp
   13e44:	andeq	r5, r1, r8, asr fp
   13e48:	andeq	r5, r1, r8, asr #20
   13e4c:	andeq	r5, r1, r4, asr sl
   13e50:	andeq	r5, r1, r8, ror #20
   13e54:	andeq	r5, r1, r0, lsl #21
   13e58:	ldr	r3, [pc, #3108]	; 14a84 <__assert_fail@plt+0x3910>
   13e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e60:	sub	sp, sp, #308	; 0x134
   13e64:	ldr	r3, [r3]
   13e68:	str	r0, [sp, #4]
   13e6c:	mov	fp, r1
   13e70:	str	r3, [sp, #300]	; 0x12c
   13e74:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   13e78:	cmp	r0, #1
   13e7c:	bhi	140a8 <__assert_fail@plt+0x2f34>
   13e80:	ldrb	r7, [fp]
   13e84:	cmp	r7, #0
   13e88:	beq	14024 <__assert_fail@plt+0x2eb0>
   13e8c:	ldr	r3, [sp, #4]
   13e90:	ldrb	r8, [r3]
   13e94:	add	r3, fp, #1
   13e98:	str	r3, [sp, #8]
   13e9c:	cmp	r8, #0
   13ea0:	beq	140a0 <__assert_fail@plt+0x2f2c>
   13ea4:	ldr	sl, [sp, #4]
   13ea8:	mov	r5, #0
   13eac:	mov	ip, r5
   13eb0:	str	r5, [sp]
   13eb4:	mov	r9, fp
   13eb8:	mov	lr, #1
   13ebc:	mov	r6, sl
   13ec0:	b	13f24 <__assert_fail@plt+0x2db0>
   13ec4:	cmp	r9, #0
   13ec8:	str	r3, [sp, #4]
   13ecc:	beq	13ef4 <__assert_fail@plt+0x2d80>
   13ed0:	ldr	r3, [sp]
   13ed4:	mov	r0, r9
   13ed8:	sub	r1, r4, r3
   13edc:	bl	110e4 <strnlen@plt>
   13ee0:	ldr	r3, [sp, #4]
   13ee4:	ldrb	r2, [r9, r0]!
   13ee8:	cmp	r2, #0
   13eec:	bne	147d4 <__assert_fail@plt+0x3660>
   13ef0:	str	r4, [sp]
   13ef4:	mov	r0, fp
   13ef8:	bl	1103c <strlen@plt>
   13efc:	add	r3, sp, #16
   13f00:	mov	r1, fp
   13f04:	mov	r2, r0
   13f08:	mov	r0, r6
   13f0c:	bl	13464 <__assert_fail@plt+0x22f0>
   13f10:	subs	lr, r0, #0
   13f14:	bne	14a10 <__assert_fail@plt+0x389c>
   13f18:	ldrb	r8, [sl, r5]
   13f1c:	mov	r9, lr
   13f20:	mov	ip, r4
   13f24:	add	r5, r5, #1
   13f28:	mov	r0, r6
   13f2c:	cmp	r7, r8
   13f30:	add	r6, r5, sl
   13f34:	mov	r1, r6
   13f38:	add	r4, ip, #1
   13f3c:	beq	14044 <__assert_fail@plt+0x2ed0>
   13f40:	ldrb	r8, [sl, r5]
   13f44:	cmp	r8, #0
   13f48:	beq	140a0 <__assert_fail@plt+0x2f2c>
   13f4c:	cmp	r5, #9
   13f50:	movls	r3, #0
   13f54:	andhi	r3, lr, #1
   13f58:	cmp	r3, #0
   13f5c:	beq	13f20 <__assert_fail@plt+0x2dac>
   13f60:	add	r2, r5, r5, lsl #2
   13f64:	cmp	r4, r2
   13f68:	bcs	13ec4 <__assert_fail@plt+0x2d50>
   13f6c:	mov	lr, r3
   13f70:	b	13f20 <__assert_fail@plt+0x2dac>
   13f74:	add	r0, sp, #24
   13f78:	bl	10f28 <mbsinit@plt>
   13f7c:	cmp	r0, #0
   13f80:	beq	14a58 <__assert_fail@plt+0x38e4>
   13f84:	mov	r5, #1
   13f88:	strb	r5, [sp, #20]
   13f8c:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   13f90:	mov	r1, r0
   13f94:	mov	r0, fp
   13f98:	bl	127c0 <__assert_fail@plt+0x164c>
   13f9c:	add	r3, sp, #24
   13fa0:	mov	r1, fp
   13fa4:	mov	r2, r0
   13fa8:	add	r0, sp, #48	; 0x30
   13fac:	bl	12ebc <__assert_fail@plt+0x1d48>
   13fb0:	cmn	r0, #1
   13fb4:	str	r0, [sp, #40]	; 0x28
   13fb8:	strbeq	r4, [sp, #44]	; 0x2c
   13fbc:	streq	r5, [sp, #40]	; 0x28
   13fc0:	strbeq	r5, [sp, #32]
   13fc4:	beq	14110 <__assert_fail@plt+0x2f9c>
   13fc8:	cmn	r0, #2
   13fcc:	beq	140fc <__assert_fail@plt+0x2f88>
   13fd0:	cmp	r0, #0
   13fd4:	bne	149f0 <__assert_fail@plt+0x387c>
   13fd8:	ldr	r3, [sp, #36]	; 0x24
   13fdc:	str	r5, [sp, #40]	; 0x28
   13fe0:	ldrb	r3, [r3]
   13fe4:	cmp	r3, #0
   13fe8:	bne	14a6c <__assert_fail@plt+0x38f8>
   13fec:	ldr	r4, [sp, #48]	; 0x30
   13ff0:	cmp	r4, #0
   13ff4:	bne	14a38 <__assert_fail@plt+0x38c4>
   13ff8:	mov	r5, #1
   13ffc:	add	r0, sp, #24
   14000:	strb	r5, [sp, #44]	; 0x2c
   14004:	bl	10f28 <mbsinit@plt>
   14008:	cmp	r0, #0
   1400c:	movne	r3, #0
   14010:	strbeq	r5, [sp, #32]
   14014:	strbne	r5, [sp, #32]
   14018:	strbne	r3, [sp, #20]
   1401c:	cmp	r4, #0
   14020:	bne	14110 <__assert_fail@plt+0x2f9c>
   14024:	ldr	r0, [sp, #4]
   14028:	ldr	r3, [pc, #2644]	; 14a84 <__assert_fail@plt+0x3910>
   1402c:	ldr	r2, [sp, #300]	; 0x12c
   14030:	ldr	r3, [r3]
   14034:	cmp	r2, r3
   14038:	bne	14a80 <__assert_fail@plt+0x390c>
   1403c:	add	sp, sp, #308	; 0x134
   14040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14044:	ldrb	r3, [fp, #1]
   14048:	cmp	r3, #0
   1404c:	beq	14028 <__assert_fail@plt+0x2eb4>
   14050:	ldrb	r8, [sl, r5]
   14054:	cmp	r8, #0
   14058:	beq	140a0 <__assert_fail@plt+0x2f2c>
   1405c:	cmp	r3, r8
   14060:	add	r4, ip, #2
   14064:	bne	13f4c <__assert_fail@plt+0x2dd8>
   14068:	ldr	r3, [sp, #8]
   1406c:	add	r3, r3, #1
   14070:	b	14088 <__assert_fail@plt+0x2f14>
   14074:	add	r3, r3, #1
   14078:	cmp	r2, r4
   1407c:	sub	r4, r3, fp
   14080:	add	r4, r4, ip
   14084:	bne	13f4c <__assert_fail@plt+0x2dd8>
   14088:	ldrb	r2, [r3]
   1408c:	cmp	r2, #0
   14090:	beq	14028 <__assert_fail@plt+0x2eb4>
   14094:	ldrb	r4, [r1, #1]!
   14098:	cmp	r4, #0
   1409c:	bne	14074 <__assert_fail@plt+0x2f00>
   140a0:	mov	r0, #0
   140a4:	b	14028 <__assert_fail@plt+0x2eb4>
   140a8:	ldrb	r1, [fp]
   140ac:	ldr	r8, [pc, #2516]	; 14a88 <__assert_fail@plt+0x3914>
   140b0:	str	fp, [sp, #36]	; 0x24
   140b4:	and	r0, r1, #31
   140b8:	lsr	r3, r1, #5
   140bc:	ldr	r2, [r8, r3, lsl #2]
   140c0:	mov	r3, #0
   140c4:	str	r3, [sp, #28]
   140c8:	lsr	r2, r2, r0
   140cc:	ands	r4, r2, #1
   140d0:	strb	r3, [sp, #20]
   140d4:	str	r3, [sp, #24]
   140d8:	strb	r3, [sp, #32]
   140dc:	beq	13f74 <__assert_fail@plt+0x2e00>
   140e0:	mov	r3, #1
   140e4:	str	r1, [sp, #48]	; 0x30
   140e8:	mov	r4, r1
   140ec:	str	r3, [sp, #40]	; 0x28
   140f0:	strb	r3, [sp, #44]	; 0x2c
   140f4:	strb	r3, [sp, #32]
   140f8:	b	1401c <__assert_fail@plt+0x2ea8>
   140fc:	ldr	r0, [sp, #36]	; 0x24
   14100:	bl	1103c <strlen@plt>
   14104:	strb	r4, [sp, #44]	; 0x2c
   14108:	strb	r5, [sp, #32]
   1410c:	str	r0, [sp, #40]	; 0x28
   14110:	mov	r3, #0
   14114:	str	r3, [sp, #12]
   14118:	mov	r6, r3
   1411c:	mov	r7, r3
   14120:	str	fp, [sp, #92]	; 0x5c
   14124:	strb	r3, [sp, #76]	; 0x4c
   14128:	str	r3, [sp, #80]	; 0x50
   1412c:	strb	r3, [sp, #88]	; 0x58
   14130:	strb	r3, [sp, #132]	; 0x84
   14134:	str	r3, [sp, #136]	; 0x88
   14138:	strb	r3, [sp, #144]	; 0x90
   1413c:	str	r3, [sp, #84]	; 0x54
   14140:	str	r3, [sp, #140]	; 0x8c
   14144:	str	fp, [sp, #8]
   14148:	mov	fp, r3
   1414c:	ldrb	r3, [sp, #132]	; 0x84
   14150:	mov	r1, #1
   14154:	str	r1, [sp]
   14158:	mov	r4, r1
   1415c:	mov	r9, r1
   14160:	ldr	r1, [sp, #4]
   14164:	cmp	r3, #0
   14168:	mov	r5, r1
   1416c:	str	r1, [sp, #148]	; 0x94
   14170:	bne	14450 <__assert_fail@plt+0x32dc>
   14174:	ldrb	r3, [r5]
   14178:	and	r2, r3, #31
   1417c:	lsr	r3, r3, #5
   14180:	ldr	r3, [r8, r3, lsl #2]
   14184:	lsr	r3, r3, r2
   14188:	tst	r3, #1
   1418c:	beq	14780 <__assert_fail@plt+0x360c>
   14190:	str	r9, [sp, #152]	; 0x98
   14194:	ldrb	r5, [r5]
   14198:	strb	r4, [sp, #156]	; 0x9c
   1419c:	strb	r4, [sp, #144]	; 0x90
   141a0:	str	r5, [sp, #160]	; 0xa0
   141a4:	cmp	r5, #0
   141a8:	beq	140a0 <__assert_fail@plt+0x2f2c>
   141ac:	ldr	r3, [sp]
   141b0:	cmp	fp, #9
   141b4:	movls	r3, #0
   141b8:	andhi	r3, r3, #1
   141bc:	cmp	r3, #0
   141c0:	addeq	r6, r6, #1
   141c4:	beq	141dc <__assert_fail@plt+0x3068>
   141c8:	add	r2, fp, fp, lsl #2
   141cc:	cmp	r6, r2
   141d0:	addcc	r6, r6, #1
   141d4:	strcc	r3, [sp]
   141d8:	bcs	14608 <__assert_fail@plt+0x3494>
   141dc:	ldrb	r3, [sp, #44]	; 0x2c
   141e0:	cmp	r3, #0
   141e4:	beq	14598 <__assert_fail@plt+0x3424>
   141e8:	ldr	r2, [sp, #160]	; 0xa0
   141ec:	ldr	r3, [sp, #48]	; 0x30
   141f0:	cmp	r2, r3
   141f4:	bne	1442c <__assert_fail@plt+0x32b8>
   141f8:	add	lr, sp, #132	; 0x84
   141fc:	add	ip, sp, #188	; 0xbc
   14200:	ldm	lr!, {r0, r1, r2, r3}
   14204:	stmia	ip!, {r0, r1, r2, r3}
   14208:	ldm	lr!, {r0, r1, r2, r3}
   1420c:	strb	r7, [sp, #200]	; 0xc8
   14210:	stmia	ip!, {r0, r1, r2, r3}
   14214:	ldm	lr!, {r0, r1, r2, r3}
   14218:	ldr	r5, [sp, #204]	; 0xcc
   1421c:	stmia	ip!, {r0, r1, r2, r3}
   14220:	ldm	lr, {r0, r1}
   14224:	ldr	r3, [sp, #208]	; 0xd0
   14228:	add	r5, r5, r3
   1422c:	stm	ip, {r0, r1}
   14230:	str	r5, [sp, #204]	; 0xcc
   14234:	ldr	r3, [sp, #8]
   14238:	strb	r7, [sp, #244]	; 0xf4
   1423c:	str	r3, [sp, #260]	; 0x104
   14240:	ldrb	r3, [r3]
   14244:	str	r7, [sp, #248]	; 0xf8
   14248:	strb	r7, [sp, #256]	; 0x100
   1424c:	and	r2, r3, #31
   14250:	lsr	r1, r3, #5
   14254:	str	r7, [sp, #252]	; 0xfc
   14258:	ldr	sl, [r8, r1, lsl #2]
   1425c:	lsr	sl, sl, r2
   14260:	ands	sl, sl, #1
   14264:	beq	14874 <__assert_fail@plt+0x3700>
   14268:	mov	r5, r3
   1426c:	cmp	r5, #0
   14270:	str	r9, [sp, #264]	; 0x108
   14274:	str	r3, [sp, #272]	; 0x110
   14278:	strb	r4, [sp, #268]	; 0x10c
   1427c:	strb	r4, [sp, #256]	; 0x100
   14280:	beq	148f0 <__assert_fail@plt+0x377c>
   14284:	ldr	r5, [sp, #260]	; 0x104
   14288:	ldr	r3, [sp, #264]	; 0x108
   1428c:	add	r6, r6, #1
   14290:	add	r5, r5, r3
   14294:	strb	r7, [sp, #256]	; 0x100
   14298:	str	r5, [sp, #260]	; 0x104
   1429c:	b	14384 <__assert_fail@plt+0x3210>
   142a0:	ldrb	r3, [r5]
   142a4:	and	r2, r3, #31
   142a8:	lsr	r3, r3, #5
   142ac:	ldr	r3, [r8, r3, lsl #2]
   142b0:	lsr	r3, r3, r2
   142b4:	tst	r3, #1
   142b8:	beq	1457c <__assert_fail@plt+0x3408>
   142bc:	str	r9, [sp, #264]	; 0x108
   142c0:	ldrb	r5, [r5]
   142c4:	strb	r4, [sp, #268]	; 0x10c
   142c8:	strb	r4, [sp, #256]	; 0x100
   142cc:	cmp	r5, #0
   142d0:	str	r5, [sp, #272]	; 0x110
   142d4:	beq	14400 <__assert_fail@plt+0x328c>
   142d8:	ldrb	r3, [sp, #200]	; 0xc8
   142dc:	cmp	r3, #0
   142e0:	bne	14544 <__assert_fail@plt+0x33d0>
   142e4:	ldrb	r3, [sp, #188]	; 0xbc
   142e8:	ldr	r5, [sp, #204]	; 0xcc
   142ec:	cmp	r3, #0
   142f0:	addne	sl, sp, #192	; 0xc0
   142f4:	bne	144d8 <__assert_fail@plt+0x3364>
   142f8:	ldrb	r3, [r5]
   142fc:	and	r2, r3, #31
   14300:	lsr	r3, r3, #5
   14304:	ldr	r3, [r8, r3, lsl #2]
   14308:	lsr	r3, r3, r2
   1430c:	tst	r3, #1
   14310:	beq	144c0 <__assert_fail@plt+0x334c>
   14314:	str	r9, [sp, #208]	; 0xd0
   14318:	ldrb	r0, [r5]
   1431c:	strb	r4, [sp, #212]	; 0xd4
   14320:	strb	r4, [sp, #200]	; 0xc8
   14324:	mov	r5, r0
   14328:	str	r0, [sp, #216]	; 0xd8
   1432c:	cmp	r5, #0
   14330:	beq	140a0 <__assert_fail@plt+0x2f2c>
   14334:	ldrb	r3, [sp, #268]	; 0x10c
   14338:	cmp	r3, #0
   1433c:	beq	1441c <__assert_fail@plt+0x32a8>
   14340:	ldr	r0, [sp, #272]	; 0x110
   14344:	subs	r0, r0, r5
   14348:	movne	r0, #1
   1434c:	cmp	r0, #0
   14350:	add	r1, r6, #1
   14354:	bne	1442c <__assert_fail@plt+0x32b8>
   14358:	ldr	r3, [sp, #204]	; 0xcc
   1435c:	ldr	r2, [sp, #208]	; 0xd0
   14360:	ldr	r5, [sp, #260]	; 0x104
   14364:	add	r3, r3, r2
   14368:	ldr	r2, [sp, #264]	; 0x108
   1436c:	mov	r6, r1
   14370:	add	r5, r5, r2
   14374:	strb	r0, [sp, #200]	; 0xc8
   14378:	strb	r0, [sp, #256]	; 0x100
   1437c:	str	r3, [sp, #204]	; 0xcc
   14380:	str	r5, [sp, #260]	; 0x104
   14384:	ldrb	r3, [sp, #244]	; 0xf4
   14388:	cmp	r3, #0
   1438c:	beq	142a0 <__assert_fail@plt+0x312c>
   14390:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   14394:	mov	r1, r0
   14398:	mov	r0, r5
   1439c:	bl	127c0 <__assert_fail@plt+0x164c>
   143a0:	add	r3, sp, #248	; 0xf8
   143a4:	mov	r1, r5
   143a8:	mov	r2, r0
   143ac:	add	r0, sp, #272	; 0x110
   143b0:	bl	12ebc <__assert_fail@plt+0x1d48>
   143b4:	cmn	r0, #1
   143b8:	str	r0, [sp, #264]	; 0x108
   143bc:	strbeq	r7, [sp, #268]	; 0x10c
   143c0:	streq	r9, [sp, #264]	; 0x108
   143c4:	strbeq	r4, [sp, #256]	; 0x100
   143c8:	beq	142d8 <__assert_fail@plt+0x3164>
   143cc:	cmn	r0, #2
   143d0:	beq	146fc <__assert_fail@plt+0x3588>
   143d4:	cmp	r0, #0
   143d8:	beq	14714 <__assert_fail@plt+0x35a0>
   143dc:	ldr	r5, [sp, #272]	; 0x110
   143e0:	add	r0, sp, #248	; 0xf8
   143e4:	strb	r4, [sp, #268]	; 0x10c
   143e8:	bl	10f28 <mbsinit@plt>
   143ec:	strb	r4, [sp, #256]	; 0x100
   143f0:	cmp	r0, #0
   143f4:	strbne	r7, [sp, #244]	; 0xf4
   143f8:	cmp	r5, #0
   143fc:	bne	142d8 <__assert_fail@plt+0x3164>
   14400:	ldr	r0, [sp, #148]	; 0x94
   14404:	b	14028 <__assert_fail@plt+0x2eb4>
   14408:	ldr	r0, [sp, #204]	; 0xcc
   1440c:	bl	1103c <strlen@plt>
   14410:	strb	r7, [sp, #212]	; 0xd4
   14414:	strb	r4, [sp, #200]	; 0xc8
   14418:	str	r0, [sp, #208]	; 0xd0
   1441c:	ldr	r2, [sp, #208]	; 0xd0
   14420:	ldr	r3, [sp, #264]	; 0x108
   14424:	cmp	r2, r3
   14428:	beq	14564 <__assert_fail@plt+0x33f0>
   1442c:	ldr	r5, [sp, #148]	; 0x94
   14430:	ldr	sl, [sp, #152]	; 0x98
   14434:	ldrb	r3, [sp, #132]	; 0x84
   14438:	add	r5, r5, sl
   1443c:	str	r5, [sp, #148]	; 0x94
   14440:	cmp	r3, #0
   14444:	strb	r7, [sp, #144]	; 0x90
   14448:	add	fp, fp, #1
   1444c:	beq	14174 <__assert_fail@plt+0x3000>
   14450:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   14454:	mov	r1, r0
   14458:	mov	r0, r5
   1445c:	bl	127c0 <__assert_fail@plt+0x164c>
   14460:	add	r3, sp, #136	; 0x88
   14464:	mov	r1, r5
   14468:	mov	r2, r0
   1446c:	add	r0, sp, #160	; 0xa0
   14470:	bl	12ebc <__assert_fail@plt+0x1d48>
   14474:	cmn	r0, #1
   14478:	str	r0, [sp, #152]	; 0x98
   1447c:	strbeq	r7, [sp, #156]	; 0x9c
   14480:	streq	r9, [sp, #152]	; 0x98
   14484:	strbeq	r4, [sp, #144]	; 0x90
   14488:	beq	145dc <__assert_fail@plt+0x3468>
   1448c:	cmn	r0, #2
   14490:	beq	145c8 <__assert_fail@plt+0x3454>
   14494:	cmp	r0, #0
   14498:	bne	147e0 <__assert_fail@plt+0x366c>
   1449c:	ldr	r5, [sp, #148]	; 0x94
   144a0:	str	r9, [sp, #152]	; 0x98
   144a4:	ldrb	r3, [r5]
   144a8:	cmp	r3, #0
   144ac:	bne	14a6c <__assert_fail@plt+0x38f8>
   144b0:	ldr	r5, [sp, #160]	; 0xa0
   144b4:	cmp	r5, #0
   144b8:	beq	147e4 <__assert_fail@plt+0x3670>
   144bc:	b	14a38 <__assert_fail@plt+0x38c4>
   144c0:	add	sl, sp, #192	; 0xc0
   144c4:	mov	r0, sl
   144c8:	bl	10f28 <mbsinit@plt>
   144cc:	cmp	r0, #0
   144d0:	beq	14a58 <__assert_fail@plt+0x38e4>
   144d4:	strb	r4, [sp, #188]	; 0xbc
   144d8:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   144dc:	mov	r1, r0
   144e0:	mov	r0, r5
   144e4:	bl	127c0 <__assert_fail@plt+0x164c>
   144e8:	mov	r3, sl
   144ec:	mov	r1, r5
   144f0:	mov	r2, r0
   144f4:	add	r0, sp, #216	; 0xd8
   144f8:	bl	12ebc <__assert_fail@plt+0x1d48>
   144fc:	cmn	r0, #1
   14500:	str	r0, [sp, #208]	; 0xd0
   14504:	strbeq	r7, [sp, #212]	; 0xd4
   14508:	streq	r9, [sp, #208]	; 0xd0
   1450c:	strbeq	r4, [sp, #200]	; 0xc8
   14510:	beq	1441c <__assert_fail@plt+0x32a8>
   14514:	cmn	r0, #2
   14518:	beq	14408 <__assert_fail@plt+0x3294>
   1451c:	cmp	r0, #0
   14520:	beq	14738 <__assert_fail@plt+0x35c4>
   14524:	ldr	r5, [sp, #216]	; 0xd8
   14528:	mov	r0, sl
   1452c:	strb	r4, [sp, #212]	; 0xd4
   14530:	bl	10f28 <mbsinit@plt>
   14534:	strb	r4, [sp, #200]	; 0xc8
   14538:	cmp	r0, #0
   1453c:	strbne	r7, [sp, #188]	; 0xbc
   14540:	b	1432c <__assert_fail@plt+0x31b8>
   14544:	ldrb	r3, [sp, #212]	; 0xd4
   14548:	cmp	r3, #0
   1454c:	ldrne	r5, [sp, #216]	; 0xd8
   14550:	bne	1432c <__assert_fail@plt+0x31b8>
   14554:	ldr	r2, [sp, #208]	; 0xd0
   14558:	ldr	r3, [sp, #264]	; 0x108
   1455c:	cmp	r2, r3
   14560:	bne	1442c <__assert_fail@plt+0x32b8>
   14564:	ldr	r1, [sp, #260]	; 0x104
   14568:	ldr	r0, [sp, #204]	; 0xcc
   1456c:	bl	10f34 <memcmp@plt>
   14570:	adds	r0, r0, #0
   14574:	movne	r0, #1
   14578:	b	1434c <__assert_fail@plt+0x31d8>
   1457c:	add	r0, sp, #248	; 0xf8
   14580:	bl	10f28 <mbsinit@plt>
   14584:	cmp	r0, #0
   14588:	beq	14a58 <__assert_fail@plt+0x38e4>
   1458c:	strb	r4, [sp, #244]	; 0xf4
   14590:	b	14390 <__assert_fail@plt+0x321c>
   14594:	add	r6, r6, #1
   14598:	ldr	sl, [sp, #152]	; 0x98
   1459c:	ldr	r3, [sp, #40]	; 0x28
   145a0:	ldr	r5, [sp, #148]	; 0x94
   145a4:	cmp	sl, r3
   145a8:	bne	14434 <__assert_fail@plt+0x32c0>
   145ac:	mov	r2, sl
   145b0:	mov	r0, r5
   145b4:	ldr	r1, [sp, #36]	; 0x24
   145b8:	bl	10f34 <memcmp@plt>
   145bc:	cmp	r0, #0
   145c0:	bne	14434 <__assert_fail@plt+0x32c0>
   145c4:	b	141f8 <__assert_fail@plt+0x3084>
   145c8:	ldr	r0, [sp, #148]	; 0x94
   145cc:	bl	1103c <strlen@plt>
   145d0:	strb	r7, [sp, #156]	; 0x9c
   145d4:	strb	r4, [sp, #144]	; 0x90
   145d8:	str	r0, [sp, #152]	; 0x98
   145dc:	ldr	r3, [sp]
   145e0:	cmp	fp, #9
   145e4:	movls	r3, #0
   145e8:	andhi	r3, r3, #1
   145ec:	cmp	r3, #0
   145f0:	beq	14594 <__assert_fail@plt+0x3420>
   145f4:	add	r2, fp, fp, lsl #2
   145f8:	cmp	r6, r2
   145fc:	addcc	r6, r6, #1
   14600:	strcc	r3, [sp]
   14604:	bcc	14598 <__assert_fail@plt+0x3424>
   14608:	ldr	r3, [sp, #12]
   1460c:	subs	sl, r6, r3
   14610:	ldrb	r3, [sp, #88]	; 0x58
   14614:	beq	14a3c <__assert_fail@plt+0x38c8>
   14618:	cmp	r3, #0
   1461c:	ldreq	r5, [sp, #92]	; 0x5c
   14620:	beq	14690 <__assert_fail@plt+0x351c>
   14624:	ldrb	r3, [sp, #100]	; 0x64
   14628:	cmp	r3, #0
   1462c:	ldrne	r5, [sp, #104]	; 0x68
   14630:	beq	14670 <__assert_fail@plt+0x34fc>
   14634:	b	14668 <__assert_fail@plt+0x34f4>
   14638:	ldrb	r3, [r5]
   1463c:	and	r2, r3, #31
   14640:	lsr	r3, r3, #5
   14644:	ldr	r3, [r8, r3, lsl #2]
   14648:	lsr	r3, r3, r2
   1464c:	tst	r3, #1
   14650:	beq	1475c <__assert_fail@plt+0x35e8>
   14654:	str	r9, [sp, #96]	; 0x60
   14658:	ldrb	r5, [r5]
   1465c:	strb	r4, [sp, #100]	; 0x64
   14660:	strb	r4, [sp, #88]	; 0x58
   14664:	str	r5, [sp, #104]	; 0x68
   14668:	cmp	r5, #0
   1466c:	beq	14988 <__assert_fail@plt+0x3814>
   14670:	ldr	r5, [sp, #92]	; 0x5c
   14674:	ldr	r3, [sp, #96]	; 0x60
   14678:	subs	sl, sl, #1
   1467c:	add	r5, r5, r3
   14680:	strb	r7, [sp, #88]	; 0x58
   14684:	str	r5, [sp, #92]	; 0x5c
   14688:	str	r5, [sp]
   1468c:	beq	14808 <__assert_fail@plt+0x3694>
   14690:	ldrb	r3, [sp, #76]	; 0x4c
   14694:	cmp	r3, #0
   14698:	beq	14638 <__assert_fail@plt+0x34c4>
   1469c:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   146a0:	mov	r1, r0
   146a4:	mov	r0, r5
   146a8:	bl	127c0 <__assert_fail@plt+0x164c>
   146ac:	add	r3, sp, #80	; 0x50
   146b0:	mov	r1, r5
   146b4:	mov	r2, r0
   146b8:	add	r0, sp, #104	; 0x68
   146bc:	bl	12ebc <__assert_fail@plt+0x1d48>
   146c0:	cmn	r0, #1
   146c4:	str	r0, [sp, #96]	; 0x60
   146c8:	beq	14774 <__assert_fail@plt+0x3600>
   146cc:	cmn	r0, #2
   146d0:	beq	14798 <__assert_fail@plt+0x3624>
   146d4:	cmp	r0, #0
   146d8:	beq	147b0 <__assert_fail@plt+0x363c>
   146dc:	ldr	r5, [sp, #104]	; 0x68
   146e0:	add	r0, sp, #80	; 0x50
   146e4:	strb	r4, [sp, #100]	; 0x64
   146e8:	bl	10f28 <mbsinit@plt>
   146ec:	strb	r4, [sp, #88]	; 0x58
   146f0:	cmp	r0, #0
   146f4:	strbne	r7, [sp, #76]	; 0x4c
   146f8:	b	14668 <__assert_fail@plt+0x34f4>
   146fc:	ldr	r0, [sp, #260]	; 0x104
   14700:	bl	1103c <strlen@plt>
   14704:	strb	r7, [sp, #268]	; 0x10c
   14708:	strb	r4, [sp, #256]	; 0x100
   1470c:	str	r0, [sp, #264]	; 0x108
   14710:	b	142d8 <__assert_fail@plt+0x3164>
   14714:	ldr	r3, [sp, #260]	; 0x104
   14718:	str	r9, [sp, #264]	; 0x108
   1471c:	ldrb	r3, [r3]
   14720:	cmp	r3, #0
   14724:	bne	14a6c <__assert_fail@plt+0x38f8>
   14728:	ldr	r5, [sp, #272]	; 0x110
   1472c:	cmp	r5, #0
   14730:	beq	143e0 <__assert_fail@plt+0x326c>
   14734:	b	14a38 <__assert_fail@plt+0x38c4>
   14738:	ldr	r3, [sp, #204]	; 0xcc
   1473c:	str	r9, [sp, #208]	; 0xd0
   14740:	ldrb	r3, [r3]
   14744:	cmp	r3, #0
   14748:	bne	14a6c <__assert_fail@plt+0x38f8>
   1474c:	ldr	r5, [sp, #216]	; 0xd8
   14750:	cmp	r5, #0
   14754:	beq	14528 <__assert_fail@plt+0x33b4>
   14758:	b	14a38 <__assert_fail@plt+0x38c4>
   1475c:	add	r0, sp, #80	; 0x50
   14760:	bl	10f28 <mbsinit@plt>
   14764:	cmp	r0, #0
   14768:	beq	14a58 <__assert_fail@plt+0x38e4>
   1476c:	strb	r4, [sp, #76]	; 0x4c
   14770:	b	1469c <__assert_fail@plt+0x3528>
   14774:	str	r9, [sp, #96]	; 0x60
   14778:	strb	r7, [sp, #100]	; 0x64
   1477c:	b	14670 <__assert_fail@plt+0x34fc>
   14780:	add	r0, sp, #136	; 0x88
   14784:	bl	10f28 <mbsinit@plt>
   14788:	cmp	r0, #0
   1478c:	beq	14a58 <__assert_fail@plt+0x38e4>
   14790:	strb	r4, [sp, #132]	; 0x84
   14794:	b	14450 <__assert_fail@plt+0x32dc>
   14798:	ldr	r5, [sp, #92]	; 0x5c
   1479c:	mov	r0, r5
   147a0:	bl	1103c <strlen@plt>
   147a4:	strb	r7, [sp, #100]	; 0x64
   147a8:	str	r0, [sp, #96]	; 0x60
   147ac:	b	14674 <__assert_fail@plt+0x3500>
   147b0:	ldr	r5, [sp, #92]	; 0x5c
   147b4:	str	r9, [sp, #96]	; 0x60
   147b8:	ldrb	r3, [r5]
   147bc:	cmp	r3, #0
   147c0:	bne	14a6c <__assert_fail@plt+0x38f8>
   147c4:	ldr	r5, [sp, #104]	; 0x68
   147c8:	cmp	r5, #0
   147cc:	beq	146e0 <__assert_fail@plt+0x356c>
   147d0:	b	14a38 <__assert_fail@plt+0x38c4>
   147d4:	mov	lr, r3
   147d8:	str	r4, [sp]
   147dc:	b	13f20 <__assert_fail@plt+0x2dac>
   147e0:	ldr	r5, [sp, #160]	; 0xa0
   147e4:	add	r0, sp, #136	; 0x88
   147e8:	strb	r4, [sp, #156]	; 0x9c
   147ec:	bl	10f28 <mbsinit@plt>
   147f0:	strb	r4, [sp, #144]	; 0x90
   147f4:	cmp	r0, #0
   147f8:	strbne	r7, [sp, #132]	; 0x84
   147fc:	b	141a4 <__assert_fail@plt+0x3030>
   14800:	ldr	r3, [sp, #92]	; 0x5c
   14804:	str	r3, [sp]
   14808:	ldrb	r3, [sp, #76]	; 0x4c
   1480c:	cmp	r3, #0
   14810:	bne	14908 <__assert_fail@plt+0x3794>
   14814:	ldr	r1, [sp]
   14818:	ldrb	r3, [r1]
   1481c:	and	r2, r3, #31
   14820:	lsr	r3, r3, #5
   14824:	ldr	r3, [r8, r3, lsl #2]
   14828:	lsr	r3, r3, r2
   1482c:	tst	r3, #1
   14830:	beq	148f4 <__assert_fail@plt+0x3780>
   14834:	str	r9, [sp, #96]	; 0x60
   14838:	ldrb	r5, [r1]
   1483c:	strb	r4, [sp, #100]	; 0x64
   14840:	strb	r4, [sp, #88]	; 0x58
   14844:	str	r5, [sp, #104]	; 0x68
   14848:	cmp	r5, #0
   1484c:	beq	14994 <__assert_fail@plt+0x3820>
   14850:	ldrb	r3, [sp, #156]	; 0x9c
   14854:	mov	r2, #1
   14858:	str	r2, [sp]
   1485c:	cmp	r3, #0
   14860:	add	r3, r6, #1
   14864:	str	r6, [sp, #12]
   14868:	mov	r6, r3
   1486c:	bne	141dc <__assert_fail@plt+0x3068>
   14870:	b	14598 <__assert_fail@plt+0x3424>
   14874:	add	r0, sp, #248	; 0xf8
   14878:	bl	10f28 <mbsinit@plt>
   1487c:	cmp	r0, #0
   14880:	beq	14a58 <__assert_fail@plt+0x38e4>
   14884:	strb	r4, [sp, #244]	; 0xf4
   14888:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   1488c:	ldr	r5, [sp, #8]
   14890:	mov	r1, r0
   14894:	mov	r0, r5
   14898:	bl	127c0 <__assert_fail@plt+0x164c>
   1489c:	add	r3, sp, #248	; 0xf8
   148a0:	mov	r1, r5
   148a4:	mov	r2, r0
   148a8:	add	r0, sp, #272	; 0x110
   148ac:	bl	12ebc <__assert_fail@plt+0x1d48>
   148b0:	cmn	r0, #1
   148b4:	str	r0, [sp, #264]	; 0x108
   148b8:	beq	14978 <__assert_fail@plt+0x3804>
   148bc:	cmn	r0, #2
   148c0:	beq	149b4 <__assert_fail@plt+0x3840>
   148c4:	cmp	r0, #0
   148c8:	beq	149cc <__assert_fail@plt+0x3858>
   148cc:	ldr	r5, [sp, #272]	; 0x110
   148d0:	add	r0, sp, #248	; 0xf8
   148d4:	strb	r4, [sp, #268]	; 0x10c
   148d8:	bl	10f28 <mbsinit@plt>
   148dc:	strb	r4, [sp, #256]	; 0x100
   148e0:	cmp	r0, #0
   148e4:	strbne	r7, [sp, #244]	; 0xf4
   148e8:	cmp	r5, #0
   148ec:	bne	14284 <__assert_fail@plt+0x3110>
   148f0:	bl	11150 <abort@plt>
   148f4:	add	r0, sp, #80	; 0x50
   148f8:	bl	10f28 <mbsinit@plt>
   148fc:	cmp	r0, #0
   14900:	beq	14a58 <__assert_fail@plt+0x38e4>
   14904:	strb	r4, [sp, #76]	; 0x4c
   14908:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   1490c:	ldr	r5, [sp]
   14910:	mov	r1, r0
   14914:	mov	r0, r5
   14918:	bl	127c0 <__assert_fail@plt+0x164c>
   1491c:	add	r3, sp, #80	; 0x50
   14920:	mov	r1, r5
   14924:	mov	r2, r0
   14928:	add	r0, sp, #104	; 0x68
   1492c:	bl	12ebc <__assert_fail@plt+0x1d48>
   14930:	cmn	r0, #1
   14934:	str	r0, [sp, #96]	; 0x60
   14938:	strbeq	r7, [sp, #100]	; 0x64
   1493c:	streq	r9, [sp, #96]	; 0x60
   14940:	strbeq	r4, [sp, #88]	; 0x58
   14944:	beq	14850 <__assert_fail@plt+0x36dc>
   14948:	cmn	r0, #2
   1494c:	beq	149f8 <__assert_fail@plt+0x3884>
   14950:	cmp	r0, #0
   14954:	beq	14a18 <__assert_fail@plt+0x38a4>
   14958:	ldr	r5, [sp, #104]	; 0x68
   1495c:	add	r0, sp, #80	; 0x50
   14960:	strb	r4, [sp, #100]	; 0x64
   14964:	bl	10f28 <mbsinit@plt>
   14968:	strb	r4, [sp, #88]	; 0x58
   1496c:	cmp	r0, #0
   14970:	strbne	r7, [sp, #76]	; 0x4c
   14974:	b	14848 <__assert_fail@plt+0x36d4>
   14978:	str	r9, [sp, #264]	; 0x108
   1497c:	strb	sl, [sp, #268]	; 0x10c
   14980:	ldr	r5, [sp, #260]	; 0x104
   14984:	b	14288 <__assert_fail@plt+0x3114>
   14988:	ldrb	r3, [sp, #88]	; 0x58
   1498c:	cmp	r3, #0
   14990:	beq	14800 <__assert_fail@plt+0x368c>
   14994:	add	r2, sp, #16
   14998:	ldrd	r0, [sp, #4]
   1499c:	bl	135fc <__assert_fail@plt+0x2488>
   149a0:	subs	r3, r0, #0
   149a4:	str	r3, [sp]
   149a8:	bne	14a10 <__assert_fail@plt+0x389c>
   149ac:	ldrb	r3, [sp, #156]	; 0x9c
   149b0:	b	1485c <__assert_fail@plt+0x36e8>
   149b4:	ldr	r5, [sp, #260]	; 0x104
   149b8:	mov	r0, r5
   149bc:	bl	1103c <strlen@plt>
   149c0:	strb	sl, [sp, #268]	; 0x10c
   149c4:	str	r0, [sp, #264]	; 0x108
   149c8:	b	14288 <__assert_fail@plt+0x3114>
   149cc:	ldr	r5, [sp, #260]	; 0x104
   149d0:	str	r9, [sp, #264]	; 0x108
   149d4:	ldrb	r3, [r5]
   149d8:	cmp	r3, #0
   149dc:	bne	14a6c <__assert_fail@plt+0x38f8>
   149e0:	ldr	r5, [sp, #272]	; 0x110
   149e4:	cmp	r5, #0
   149e8:	beq	148d0 <__assert_fail@plt+0x375c>
   149ec:	b	14a38 <__assert_fail@plt+0x38c4>
   149f0:	ldr	r4, [sp, #48]	; 0x30
   149f4:	b	13ff8 <__assert_fail@plt+0x2e84>
   149f8:	ldr	r0, [sp, #92]	; 0x5c
   149fc:	bl	1103c <strlen@plt>
   14a00:	strb	r7, [sp, #100]	; 0x64
   14a04:	strb	r4, [sp, #88]	; 0x58
   14a08:	str	r0, [sp, #96]	; 0x60
   14a0c:	b	14850 <__assert_fail@plt+0x36dc>
   14a10:	ldr	r0, [sp, #16]
   14a14:	b	14028 <__assert_fail@plt+0x2eb4>
   14a18:	ldr	r5, [sp, #92]	; 0x5c
   14a1c:	str	r9, [sp, #96]	; 0x60
   14a20:	ldrb	r3, [r5]
   14a24:	cmp	r3, #0
   14a28:	bne	14a6c <__assert_fail@plt+0x38f8>
   14a2c:	ldr	r5, [sp, #104]	; 0x68
   14a30:	cmp	r5, #0
   14a34:	beq	1495c <__assert_fail@plt+0x37e8>
   14a38:	bl	135d8 <__assert_fail@plt+0x2464>
   14a3c:	cmp	r3, #0
   14a40:	beq	14800 <__assert_fail@plt+0x368c>
   14a44:	ldrb	r3, [sp, #100]	; 0x64
   14a48:	cmp	r3, #0
   14a4c:	ldrne	r5, [sp, #104]	; 0x68
   14a50:	beq	14850 <__assert_fail@plt+0x36dc>
   14a54:	b	14848 <__assert_fail@plt+0x36d4>
   14a58:	ldr	r3, [pc, #44]	; 14a8c <__assert_fail@plt+0x3918>
   14a5c:	mov	r2, #150	; 0x96
   14a60:	ldr	r1, [pc, #40]	; 14a90 <__assert_fail@plt+0x391c>
   14a64:	ldr	r0, [pc, #40]	; 14a94 <__assert_fail@plt+0x3920>
   14a68:	bl	11174 <__assert_fail@plt>
   14a6c:	ldr	r3, [pc, #24]	; 14a8c <__assert_fail@plt+0x3918>
   14a70:	mov	r2, #178	; 0xb2
   14a74:	ldr	r1, [pc, #20]	; 14a90 <__assert_fail@plt+0x391c>
   14a78:	ldr	r0, [pc, #24]	; 14a98 <__assert_fail@plt+0x3924>
   14a7c:	bl	11174 <__assert_fail@plt>
   14a80:	bl	10f58 <__stack_chk_fail@plt>
   14a84:	andeq	r5, r2, r8, lsl #30
   14a88:	andeq	r5, r1, r8, lsr fp
   14a8c:	andeq	r5, r1, r8, asr fp
   14a90:	andeq	r5, r1, r8, asr #20
   14a94:	andeq	r5, r1, r8, ror #20
   14a98:	andeq	r5, r1, r0, lsl #21
   14a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14aa0:	mov	r6, r2
   14aa4:	sub	sp, sp, #4096	; 0x1000
   14aa8:	ldr	r2, [pc, #640]	; 14d30 <__assert_fail@plt+0x3bbc>
   14aac:	sub	sp, sp, #44	; 0x2c
   14ab0:	add	lr, sp, #4096	; 0x1000
   14ab4:	ldr	ip, [r2]
   14ab8:	add	lr, lr, #36	; 0x24
   14abc:	mov	r4, #0
   14ac0:	str	r4, [sp]
   14ac4:	str	ip, [lr]
   14ac8:	add	ip, sp, #4160	; 0x1040
   14acc:	add	ip, ip, #16
   14ad0:	mov	r9, r1
   14ad4:	ldr	ip, [ip]
   14ad8:	mov	fp, r0
   14adc:	str	r3, [sp, #8]
   14ae0:	mov	r0, r6
   14ae4:	mov	r3, r4
   14ae8:	mov	r2, r4
   14aec:	mov	r1, r4
   14af0:	str	ip, [sp, #12]
   14af4:	bl	10ebc <iconv@plt>
   14af8:	cmp	r9, r4
   14afc:	str	fp, [sp, #20]
   14b00:	str	r9, [sp, #24]
   14b04:	beq	14d14 <__assert_fail@plt+0x3ba0>
   14b08:	add	r5, sp, #36	; 0x24
   14b0c:	add	r7, sp, #28
   14b10:	add	r8, sp, #32
   14b14:	mov	sl, #4096	; 0x1000
   14b18:	b	14b30 <__assert_fail@plt+0x39bc>
   14b1c:	ldrd	r2, [sp, #24]
   14b20:	sub	r3, r3, r5
   14b24:	cmp	r2, #0
   14b28:	add	r4, r4, r3
   14b2c:	beq	14b70 <__assert_fail@plt+0x39fc>
   14b30:	str	r8, [sp]
   14b34:	mov	r3, r7
   14b38:	add	r2, sp, #24
   14b3c:	add	r1, sp, #20
   14b40:	mov	r0, r6
   14b44:	str	r5, [sp, #28]
   14b48:	str	sl, [sp, #32]
   14b4c:	bl	10ebc <iconv@plt>
   14b50:	cmn	r0, #1
   14b54:	bne	14b1c <__assert_fail@plt+0x39a8>
   14b58:	bl	11060 <__errno_location@plt>
   14b5c:	ldr	r3, [r0]
   14b60:	cmp	r3, #7
   14b64:	beq	14b1c <__assert_fail@plt+0x39a8>
   14b68:	cmp	r3, #22
   14b6c:	bne	14d0c <__assert_fail@plt+0x3b98>
   14b70:	mov	r2, #0
   14b74:	mov	ip, #4096	; 0x1000
   14b78:	str	r8, [sp]
   14b7c:	mov	r1, r2
   14b80:	mov	r3, r7
   14b84:	mov	r0, r6
   14b88:	str	r5, [sp, #28]
   14b8c:	str	ip, [sp, #32]
   14b90:	bl	10ebc <iconv@plt>
   14b94:	cmn	r0, #1
   14b98:	beq	14d0c <__assert_fail@plt+0x3b98>
   14b9c:	ldr	r3, [sp, #28]
   14ba0:	sub	r5, r3, r5
   14ba4:	adds	r4, r5, r4
   14ba8:	beq	14cbc <__assert_fail@plt+0x3b48>
   14bac:	ldr	r3, [sp, #8]
   14bb0:	ldr	sl, [r3]
   14bb4:	cmp	sl, #0
   14bb8:	beq	14c98 <__assert_fail@plt+0x3b24>
   14bbc:	ldr	r3, [sp, #12]
   14bc0:	ldr	r3, [r3]
   14bc4:	cmp	r3, r4
   14bc8:	bcc	14c98 <__assert_fail@plt+0x3b24>
   14bcc:	mov	r3, #0
   14bd0:	str	r3, [sp]
   14bd4:	mov	r2, r3
   14bd8:	mov	r1, r3
   14bdc:	mov	r0, r6
   14be0:	bl	10ebc <iconv@plt>
   14be4:	add	r3, sp, #40	; 0x28
   14be8:	str	fp, [sp, #20]
   14bec:	add	r5, sp, #24
   14bf0:	str	r9, [sp, #24]
   14bf4:	str	sl, [sp, #28]
   14bf8:	str	r4, [sp, #32]
   14bfc:	sub	fp, r3, #20
   14c00:	b	14c28 <__assert_fail@plt+0x3ab4>
   14c04:	str	r8, [sp]
   14c08:	mov	r3, r7
   14c0c:	mov	r2, r5
   14c10:	mov	r1, fp
   14c14:	mov	r0, r6
   14c18:	bl	10ebc <iconv@plt>
   14c1c:	cmn	r0, #1
   14c20:	beq	14ccc <__assert_fail@plt+0x3b58>
   14c24:	ldr	r9, [sp, #24]
   14c28:	cmp	r9, #0
   14c2c:	bne	14c04 <__assert_fail@plt+0x3a90>
   14c30:	mov	r2, #0
   14c34:	str	r8, [sp]
   14c38:	mov	r3, r7
   14c3c:	mov	r0, r6
   14c40:	mov	r1, r2
   14c44:	bl	10ebc <iconv@plt>
   14c48:	cmn	r0, #1
   14c4c:	beq	14cdc <__assert_fail@plt+0x3b68>
   14c50:	ldr	r3, [sp, #32]
   14c54:	cmp	r3, #0
   14c58:	bne	14d2c <__assert_fail@plt+0x3bb8>
   14c5c:	ldr	r2, [sp, #8]
   14c60:	str	sl, [r2]
   14c64:	ldr	r2, [sp, #12]
   14c68:	str	r4, [r2]
   14c6c:	add	r2, sp, #4096	; 0x1000
   14c70:	add	r2, r2, #36	; 0x24
   14c74:	ldr	r1, [r2]
   14c78:	ldr	r2, [pc, #176]	; 14d30 <__assert_fail@plt+0x3bbc>
   14c7c:	mov	r0, r3
   14c80:	ldr	r2, [r2]
   14c84:	cmp	r1, r2
   14c88:	bne	14d28 <__assert_fail@plt+0x3bb4>
   14c8c:	add	sp, sp, #4096	; 0x1000
   14c90:	add	sp, sp, #44	; 0x2c
   14c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c98:	mov	r0, r4
   14c9c:	bl	10fd0 <malloc@plt>
   14ca0:	subs	sl, r0, #0
   14ca4:	bne	14bcc <__assert_fail@plt+0x3a58>
   14ca8:	bl	11060 <__errno_location@plt>
   14cac:	mov	r2, #12
   14cb0:	mvn	r3, #0
   14cb4:	str	r2, [r0]
   14cb8:	b	14c6c <__assert_fail@plt+0x3af8>
   14cbc:	ldr	r3, [sp, #12]
   14cc0:	str	r4, [r3]
   14cc4:	mov	r3, r4
   14cc8:	b	14c6c <__assert_fail@plt+0x3af8>
   14ccc:	bl	11060 <__errno_location@plt>
   14cd0:	ldr	r3, [r0]
   14cd4:	cmp	r3, #22
   14cd8:	beq	14c30 <__assert_fail@plt+0x3abc>
   14cdc:	ldr	r3, [sp, #8]
   14ce0:	ldr	r3, [r3]
   14ce4:	cmp	r3, sl
   14ce8:	beq	14d0c <__assert_fail@plt+0x3b98>
   14cec:	bl	11060 <__errno_location@plt>
   14cf0:	mov	r4, r0
   14cf4:	mov	r0, sl
   14cf8:	ldr	r5, [r4]
   14cfc:	bl	10f04 <free@plt>
   14d00:	str	r5, [r4]
   14d04:	mvn	r3, #0
   14d08:	b	14c6c <__assert_fail@plt+0x3af8>
   14d0c:	mvn	r3, #0
   14d10:	b	14c6c <__assert_fail@plt+0x3af8>
   14d14:	mov	r4, r9
   14d18:	add	r5, sp, #36	; 0x24
   14d1c:	add	r7, sp, #28
   14d20:	add	r8, sp, #32
   14d24:	b	14b70 <__assert_fail@plt+0x39fc>
   14d28:	bl	10f58 <__stack_chk_fail@plt>
   14d2c:	bl	11150 <abort@plt>
   14d30:	andeq	r5, r2, r8, lsl #30
   14d34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d38:	sub	sp, sp, #36	; 0x24
   14d3c:	ldr	r9, [pc, #468]	; 14f18 <__assert_fail@plt+0x3da4>
   14d40:	mov	r7, r1
   14d44:	str	r0, [sp, #12]
   14d48:	ldr	r3, [r9]
   14d4c:	str	r3, [sp, #28]
   14d50:	bl	1103c <strlen@plt>
   14d54:	cmp	r0, #4096	; 0x1000
   14d58:	mov	r4, r0
   14d5c:	lslcc	r4, r0, #4
   14d60:	add	sl, r4, #1
   14d64:	str	r0, [sp, #16]
   14d68:	mov	r0, sl
   14d6c:	bl	10fd0 <malloc@plt>
   14d70:	subs	r6, r0, #0
   14d74:	beq	14f04 <__assert_fail@plt+0x3d90>
   14d78:	mov	r3, #0
   14d7c:	str	r3, [sp]
   14d80:	mov	r2, r3
   14d84:	mov	r1, r3
   14d88:	mov	r0, r7
   14d8c:	bl	10ebc <iconv@plt>
   14d90:	add	r8, sp, #24
   14d94:	str	r6, [sp, #20]
   14d98:	str	r4, [sp, #24]
   14d9c:	b	14e00 <__assert_fail@plt+0x3c8c>
   14da0:	bl	11060 <__errno_location@plt>
   14da4:	ldr	r3, [r0]
   14da8:	mov	fp, r0
   14dac:	cmp	r3, #22
   14db0:	beq	14e7c <__assert_fail@plt+0x3d08>
   14db4:	cmp	r3, #7
   14db8:	bne	14edc <__assert_fail@plt+0x3d68>
   14dbc:	ldr	r4, [sp, #20]
   14dc0:	lsl	r5, sl, #1
   14dc4:	cmp	sl, r5
   14dc8:	sub	r4, r4, r6
   14dcc:	bcs	14ed4 <__assert_fail@plt+0x3d60>
   14dd0:	mov	r1, r5
   14dd4:	mov	r0, r6
   14dd8:	bl	10f64 <realloc@plt>
   14ddc:	cmp	r0, #0
   14de0:	beq	14ed4 <__assert_fail@plt+0x3d60>
   14de4:	sub	r3, r5, #1
   14de8:	mov	r6, r0
   14dec:	mov	sl, r5
   14df0:	sub	r3, r3, r4
   14df4:	add	r4, r0, r4
   14df8:	str	r3, [sp, #24]
   14dfc:	str	r4, [sp, #20]
   14e00:	str	r8, [sp]
   14e04:	add	r3, sp, #20
   14e08:	add	r2, sp, #16
   14e0c:	add	r1, sp, #12
   14e10:	mov	r0, r7
   14e14:	bl	10ebc <iconv@plt>
   14e18:	cmn	r0, #1
   14e1c:	beq	14da0 <__assert_fail@plt+0x3c2c>
   14e20:	b	14e7c <__assert_fail@plt+0x3d08>
   14e24:	bl	11060 <__errno_location@plt>
   14e28:	ldr	r3, [r0]
   14e2c:	mov	fp, r0
   14e30:	cmp	r3, #7
   14e34:	bne	14edc <__assert_fail@plt+0x3d68>
   14e38:	ldr	r4, [sp, #20]
   14e3c:	lsl	r5, sl, #1
   14e40:	cmp	sl, r5
   14e44:	sub	r4, r4, r6
   14e48:	bcs	14ed4 <__assert_fail@plt+0x3d60>
   14e4c:	mov	r1, r5
   14e50:	mov	r0, r6
   14e54:	bl	10f64 <realloc@plt>
   14e58:	cmp	r0, #0
   14e5c:	beq	14ed4 <__assert_fail@plt+0x3d60>
   14e60:	sub	r3, r5, #1
   14e64:	mov	sl, r5
   14e68:	mov	r6, r0
   14e6c:	sub	r3, r3, r4
   14e70:	add	r4, r0, r4
   14e74:	str	r3, [sp, #24]
   14e78:	str	r4, [sp, #20]
   14e7c:	mov	r2, #0
   14e80:	str	r8, [sp]
   14e84:	mov	r1, r2
   14e88:	add	r3, sp, #20
   14e8c:	mov	r0, r7
   14e90:	bl	10ebc <iconv@plt>
   14e94:	cmn	r0, #1
   14e98:	beq	14e24 <__assert_fail@plt+0x3cb0>
   14e9c:	ldr	r3, [sp, #20]
   14ea0:	mov	r2, #0
   14ea4:	add	r1, r3, #1
   14ea8:	str	r1, [sp, #20]
   14eac:	strb	r2, [r3]
   14eb0:	ldr	r1, [sp, #20]
   14eb4:	sub	r1, r1, r6
   14eb8:	cmp	sl, r1
   14ebc:	bls	14ee8 <__assert_fail@plt+0x3d74>
   14ec0:	mov	r0, r6
   14ec4:	bl	10f64 <realloc@plt>
   14ec8:	cmp	r0, #0
   14ecc:	movne	r6, r0
   14ed0:	b	14ee8 <__assert_fail@plt+0x3d74>
   14ed4:	mov	r3, #12
   14ed8:	str	r3, [fp]
   14edc:	mov	r0, r6
   14ee0:	bl	10f04 <free@plt>
   14ee4:	mov	r6, #0
   14ee8:	ldr	r2, [sp, #28]
   14eec:	ldr	r3, [r9]
   14ef0:	mov	r0, r6
   14ef4:	cmp	r2, r3
   14ef8:	bne	14f14 <__assert_fail@plt+0x3da0>
   14efc:	add	sp, sp, #36	; 0x24
   14f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f04:	bl	11060 <__errno_location@plt>
   14f08:	mov	r3, #12
   14f0c:	str	r3, [r0]
   14f10:	b	14ee8 <__assert_fail@plt+0x3d74>
   14f14:	bl	10f58 <__stack_chk_fail@plt>
   14f18:	andeq	r5, r2, r8, lsl #30
   14f1c:	push	{r4, r5, r6, lr}
   14f20:	mov	r4, r0
   14f24:	ldrb	r3, [r0]
   14f28:	cmp	r3, #0
   14f2c:	beq	14f4c <__assert_fail@plt+0x3dd8>
   14f30:	mov	r6, r1
   14f34:	mov	r0, r6
   14f38:	mov	r1, r2
   14f3c:	mov	r5, r2
   14f40:	bl	12f3c <__assert_fail@plt+0x1dc8>
   14f44:	cmp	r0, #0
   14f48:	bne	14f64 <__assert_fail@plt+0x3df0>
   14f4c:	mov	r0, r4
   14f50:	bl	10f4c <strdup@plt>
   14f54:	subs	r4, r0, #0
   14f58:	beq	14fc4 <__assert_fail@plt+0x3e50>
   14f5c:	mov	r0, r4
   14f60:	pop	{r4, r5, r6, pc}
   14f64:	mov	r0, r5
   14f68:	mov	r1, r6
   14f6c:	bl	10fdc <iconv_open@plt>
   14f70:	cmn	r0, #1
   14f74:	mov	r5, r0
   14f78:	moveq	r4, #0
   14f7c:	beq	14f5c <__assert_fail@plt+0x3de8>
   14f80:	mov	r0, r4
   14f84:	mov	r1, r5
   14f88:	bl	14d34 <__assert_fail@plt+0x3bc0>
   14f8c:	subs	r4, r0, #0
   14f90:	beq	14fd8 <__assert_fail@plt+0x3e64>
   14f94:	mov	r0, r5
   14f98:	bl	10eb0 <iconv_close@plt>
   14f9c:	cmp	r0, #0
   14fa0:	bge	14f5c <__assert_fail@plt+0x3de8>
   14fa4:	bl	11060 <__errno_location@plt>
   14fa8:	mov	r5, r0
   14fac:	mov	r0, r4
   14fb0:	ldr	r6, [r5]
   14fb4:	mov	r4, #0
   14fb8:	bl	10f04 <free@plt>
   14fbc:	str	r6, [r5]
   14fc0:	b	14f5c <__assert_fail@plt+0x3de8>
   14fc4:	bl	11060 <__errno_location@plt>
   14fc8:	mov	r3, #12
   14fcc:	str	r3, [r0]
   14fd0:	mov	r0, r4
   14fd4:	pop	{r4, r5, r6, pc}
   14fd8:	bl	11060 <__errno_location@plt>
   14fdc:	mov	r6, r0
   14fe0:	mov	r0, r5
   14fe4:	ldr	r5, [r6]
   14fe8:	bl	10eb0 <iconv_close@plt>
   14fec:	str	r5, [r6]
   14ff0:	b	14f5c <__assert_fail@plt+0x3de8>
   14ff4:	mov	r3, #8
   14ff8:	adds	r0, r0, r3
   14ffc:	bcs	1504c <__assert_fail@plt+0x3ed8>
   15000:	push	{r4, lr}
   15004:	bl	10fd0 <malloc@plt>
   15008:	subs	r2, r0, #0
   1500c:	beq	15044 <__assert_fail@plt+0x3ed0>
   15010:	ldr	r3, [pc, #60]	; 15054 <__assert_fail@plt+0x3ee0>
   15014:	add	r0, r2, #8
   15018:	ldr	r1, [pc, #56]	; 15058 <__assert_fail@plt+0x3ee4>
   1501c:	umull	ip, r3, r3, r0
   15020:	ldr	ip, [pc, #52]	; 1505c <__assert_fail@plt+0x3ee8>
   15024:	lsr	r3, r3, #8
   15028:	str	ip, [r2, #4]
   1502c:	add	r3, r3, r3, lsl #8
   15030:	sub	r3, r0, r3
   15034:	ldr	ip, [r1, r3, lsl #2]
   15038:	str	r0, [r1, r3, lsl #2]
   1503c:	str	ip, [r2]
   15040:	pop	{r4, pc}
   15044:	mov	r0, #0
   15048:	pop	{r4, pc}
   1504c:	mov	r0, #0
   15050:	bx	lr
   15054:			; <UNDEFINED> instruction: 0xff00ff01
   15058:	andeq	r6, r2, r8, asr #2
   1505c:	ldrne	pc, [r5], #-2890	; 0xfffff4b6
   15060:	cmp	r0, #0
   15064:	bxeq	lr
   15068:	ldr	r3, [pc, #104]	; 150d8 <__assert_fail@plt+0x3f64>
   1506c:	ldr	r2, [r0, #-4]
   15070:	cmp	r2, r3
   15074:	bxne	lr
   15078:	ldr	r2, [pc, #92]	; 150dc <__assert_fail@plt+0x3f68>
   1507c:	ldr	r1, [pc, #92]	; 150e0 <__assert_fail@plt+0x3f6c>
   15080:	umull	r3, r2, r2, r0
   15084:	lsr	r3, r2, #8
   15088:	add	r2, r3, r3, lsl #8
   1508c:	sub	r3, r0, r2
   15090:	ldr	r2, [r1, r3, lsl #2]
   15094:	cmp	r2, #0
   15098:	bxeq	lr
   1509c:	cmp	r0, r2
   150a0:	bne	150ac <__assert_fail@plt+0x3f38>
   150a4:	b	150d0 <__assert_fail@plt+0x3f5c>
   150a8:	mov	r2, r3
   150ac:	ldr	r3, [r2, #-8]
   150b0:	cmp	r3, #0
   150b4:	bxeq	lr
   150b8:	cmp	r0, r3
   150bc:	bne	150a8 <__assert_fail@plt+0x3f34>
   150c0:	sub	r2, r2, #8
   150c4:	ldr	r3, [r0, #-8]!
   150c8:	str	r3, [r2]
   150cc:	b	10f04 <free@plt>
   150d0:	add	r2, r1, r3, lsl #2
   150d4:	b	150c4 <__assert_fail@plt+0x3f50>
   150d8:	ldrne	pc, [r5], #-2890	; 0xfffff4b6
   150dc:			; <UNDEFINED> instruction: 0xff00ff01
   150e0:	andeq	r6, r2, r8, asr #2
   150e4:	push	{r4, r5, r6, r7, r8, lr}
   150e8:	sub	sp, sp, #64	; 0x40
   150ec:	ldr	r7, [pc, #464]	; 152c4 <__assert_fail@plt+0x4150>
   150f0:	mov	r4, r0
   150f4:	ldr	r3, [r7]
   150f8:	str	r3, [sp, #60]	; 0x3c
   150fc:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   15100:	cmp	r0, #1
   15104:	bhi	15130 <__assert_fail@plt+0x3fbc>
   15108:	mov	r0, r4
   1510c:	bl	1103c <strlen@plt>
   15110:	mov	r5, r0
   15114:	ldr	r2, [sp, #60]	; 0x3c
   15118:	ldr	r3, [r7]
   1511c:	mov	r0, r5
   15120:	cmp	r2, r3
   15124:	bne	152ac <__assert_fail@plt+0x4138>
   15128:	add	sp, sp, #64	; 0x40
   1512c:	pop	{r4, r5, r6, r7, r8, pc}
   15130:	mov	r5, #0
   15134:	str	r4, [sp, #20]
   15138:	str	r5, [sp, #12]
   1513c:	strb	r5, [sp, #4]
   15140:	str	r5, [sp, #8]
   15144:	strb	r5, [sp, #16]
   15148:	mov	r6, #1
   1514c:	ldr	r8, [pc, #372]	; 152c8 <__assert_fail@plt+0x4154>
   15150:	b	151a8 <__assert_fail@plt+0x4034>
   15154:	ldrb	r3, [r4]
   15158:	and	r2, r3, #31
   1515c:	lsr	r3, r3, #5
   15160:	ldr	r3, [r8, r3, lsl #2]
   15164:	lsr	r3, r3, r2
   15168:	tst	r3, #1
   1516c:	beq	1521c <__assert_fail@plt+0x40a8>
   15170:	str	r6, [sp, #24]
   15174:	ldrb	r4, [r4]
   15178:	strb	r6, [sp, #28]
   1517c:	strb	r6, [sp, #16]
   15180:	str	r4, [sp, #32]
   15184:	cmp	r4, #0
   15188:	beq	15114 <__assert_fail@plt+0x3fa0>
   1518c:	ldr	r4, [sp, #20]
   15190:	ldr	r3, [sp, #24]
   15194:	add	r5, r5, #1
   15198:	add	r4, r4, r3
   1519c:	mov	r3, #0
   151a0:	str	r4, [sp, #20]
   151a4:	strb	r3, [sp, #16]
   151a8:	ldrb	r3, [sp, #4]
   151ac:	cmp	r3, #0
   151b0:	beq	15154 <__assert_fail@plt+0x3fe0>
   151b4:	bl	10f94 <__ctype_get_mb_cur_max@plt>
   151b8:	mov	r1, r0
   151bc:	mov	r0, r4
   151c0:	bl	127c0 <__assert_fail@plt+0x164c>
   151c4:	add	r3, sp, #8
   151c8:	mov	r1, r4
   151cc:	mov	r2, r0
   151d0:	add	r0, sp, #32
   151d4:	bl	12ebc <__assert_fail@plt+0x1d48>
   151d8:	cmn	r0, #1
   151dc:	str	r0, [sp, #24]
   151e0:	beq	15234 <__assert_fail@plt+0x40c0>
   151e4:	cmn	r0, #2
   151e8:	beq	15248 <__assert_fail@plt+0x40d4>
   151ec:	cmp	r0, #0
   151f0:	beq	15264 <__assert_fail@plt+0x40f0>
   151f4:	ldr	r4, [sp, #32]
   151f8:	add	r0, sp, #8
   151fc:	strb	r6, [sp, #28]
   15200:	bl	10f28 <mbsinit@plt>
   15204:	cmp	r0, #0
   15208:	movne	r3, #0
   1520c:	strbeq	r6, [sp, #16]
   15210:	strbne	r6, [sp, #16]
   15214:	strbne	r3, [sp, #4]
   15218:	b	15184 <__assert_fail@plt+0x4010>
   1521c:	add	r0, sp, #8
   15220:	bl	10f28 <mbsinit@plt>
   15224:	cmp	r0, #0
   15228:	beq	15298 <__assert_fail@plt+0x4124>
   1522c:	strb	r6, [sp, #4]
   15230:	b	151b4 <__assert_fail@plt+0x4040>
   15234:	mov	r3, #0
   15238:	str	r6, [sp, #24]
   1523c:	strb	r3, [sp, #28]
   15240:	ldr	r4, [sp, #20]
   15244:	b	15190 <__assert_fail@plt+0x401c>
   15248:	ldr	r4, [sp, #20]
   1524c:	mov	r0, r4
   15250:	bl	1103c <strlen@plt>
   15254:	mov	r3, #0
   15258:	strb	r3, [sp, #28]
   1525c:	str	r0, [sp, #24]
   15260:	b	15190 <__assert_fail@plt+0x401c>
   15264:	ldr	r4, [sp, #20]
   15268:	str	r6, [sp, #24]
   1526c:	ldrb	r3, [r4]
   15270:	cmp	r3, #0
   15274:	bne	152b0 <__assert_fail@plt+0x413c>
   15278:	ldr	r4, [sp, #32]
   1527c:	cmp	r4, #0
   15280:	beq	151f8 <__assert_fail@plt+0x4084>
   15284:	ldr	r3, [pc, #64]	; 152cc <__assert_fail@plt+0x4158>
   15288:	mov	r2, #179	; 0xb3
   1528c:	ldr	r1, [pc, #60]	; 152d0 <__assert_fail@plt+0x415c>
   15290:	ldr	r0, [pc, #60]	; 152d4 <__assert_fail@plt+0x4160>
   15294:	bl	11174 <__assert_fail@plt>
   15298:	ldr	r3, [pc, #44]	; 152cc <__assert_fail@plt+0x4158>
   1529c:	mov	r2, #150	; 0x96
   152a0:	ldr	r1, [pc, #40]	; 152d0 <__assert_fail@plt+0x415c>
   152a4:	ldr	r0, [pc, #44]	; 152d8 <__assert_fail@plt+0x4164>
   152a8:	bl	11174 <__assert_fail@plt>
   152ac:	bl	10f58 <__stack_chk_fail@plt>
   152b0:	ldr	r3, [pc, #20]	; 152cc <__assert_fail@plt+0x4158>
   152b4:	mov	r2, #178	; 0xb2
   152b8:	ldr	r1, [pc, #16]	; 152d0 <__assert_fail@plt+0x415c>
   152bc:	ldr	r0, [pc, #24]	; 152dc <__assert_fail@plt+0x4168>
   152c0:	bl	11174 <__assert_fail@plt>
   152c4:	andeq	r5, r2, r8, lsl #30
   152c8:	andeq	r5, r1, r8, lsr fp
   152cc:	andeq	r5, r1, ip, ror #22
   152d0:	andeq	r5, r1, r8, asr #20
   152d4:	andeq	r5, r1, r4, asr sl
   152d8:	andeq	r5, r1, r8, ror #20
   152dc:	andeq	r5, r1, r0, lsl #21
   152e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   152e4:	mov	r7, r0
   152e8:	ldr	r6, [pc, #72]	; 15338 <__assert_fail@plt+0x41c4>
   152ec:	ldr	r5, [pc, #72]	; 1533c <__assert_fail@plt+0x41c8>
   152f0:	add	r6, pc, r6
   152f4:	add	r5, pc, r5
   152f8:	sub	r6, r6, r5
   152fc:	mov	r8, r1
   15300:	mov	r9, r2
   15304:	bl	10e78 <fdopen@plt-0x20>
   15308:	asrs	r6, r6, #2
   1530c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15310:	mov	r4, #0
   15314:	add	r4, r4, #1
   15318:	ldr	r3, [r5], #4
   1531c:	mov	r2, r9
   15320:	mov	r1, r8
   15324:	mov	r0, r7
   15328:	blx	r3
   1532c:	cmp	r6, r4
   15330:	bne	15314 <__assert_fail@plt+0x41a0>
   15334:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15338:	andeq	r0, r1, ip, lsl #24
   1533c:	andeq	r0, r1, r4, lsl #24
   15340:	bx	lr
   15344:	ldr	r3, [pc, #12]	; 15358 <__assert_fail@plt+0x41e4>
   15348:	mov	r1, #0
   1534c:	add	r3, pc, r3
   15350:	ldr	r2, [r3]
   15354:	b	11084 <__cxa_atexit@plt>
   15358:			; <UNDEFINED> instruction: 0x00010db8

Disassembly of section .fini:

0001535c <.fini>:
   1535c:	push	{r3, lr}
   15360:	pop	{r3, pc}
