
raspbian-preinstalled/expiry:     file format elf32-littlearm


Disassembly of section .init:

00010eac <.init>:
   10eac:	push	{r3, lr}
   10eb0:	bl	11530 <__assert_fail@plt+0x388>
   10eb4:	pop	{r3, pc}

Disassembly of section .plt:

00010eb8 <calloc@plt-0x14>:
   10eb8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ebc:	ldr	lr, [pc, #4]	; 10ec8 <calloc@plt-0x4>
   10ec0:	add	lr, pc, lr
   10ec4:	ldr	pc, [lr, #8]!
   10ec8:	andeq	r3, r1, ip, lsr #32

00010ecc <calloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #77824	; 0x13000
   10ed4:	ldr	pc, [ip, #44]!	; 0x2c

00010ed8 <endgrent@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #77824	; 0x13000
   10ee0:	ldr	pc, [ip, #36]!	; 0x24

00010ee4 <getpwuid_r@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #77824	; 0x13000
   10eec:	ldr	pc, [ip, #28]!

00010ef0 <strcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #77824	; 0x13000
   10ef8:	ldr	pc, [ip, #20]!

00010efc <getlogin@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #77824	; 0x13000
   10f04:	ldr	pc, [ip, #12]!

00010f08 <fflush@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #77824	; 0x13000
   10f10:	ldr	pc, [ip, #4]!

00010f14 <getuid@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #73728	; 0x12000
   10f1c:	ldr	pc, [ip, #4092]!	; 0xffc

00010f20 <getspnam@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #73728	; 0x12000
   10f28:	ldr	pc, [ip, #4084]!	; 0xff4

00010f2c <free@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #73728	; 0x12000
   10f34:	ldr	pc, [ip, #4076]!	; 0xfec

00010f38 <fgets@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #73728	; 0x12000
   10f40:	ldr	pc, [ip, #4068]!	; 0xfe4

00010f44 <_exit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #73728	; 0x12000
   10f4c:	ldr	pc, [ip, #4060]!	; 0xfdc

00010f50 <memcpy@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #73728	; 0x12000
   10f58:	ldr	pc, [ip, #4052]!	; 0xfd4

00010f5c <signal@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #73728	; 0x12000
   10f64:	ldr	pc, [ip, #4044]!	; 0xfcc

00010f68 <time@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #73728	; 0x12000
   10f70:	ldr	pc, [ip, #4036]!	; 0xfc4

00010f74 <stpcpy@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #73728	; 0x12000
   10f7c:	ldr	pc, [ip, #4028]!	; 0xfbc

00010f80 <dcgettext@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #73728	; 0x12000
   10f88:	ldr	pc, [ip, #4020]!	; 0xfb4

00010f8c <__strncpy_chk@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #73728	; 0x12000
   10f94:	ldr	pc, [ip, #4012]!	; 0xfac

00010f98 <strdup@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #73728	; 0x12000
   10fa0:	ldr	pc, [ip, #4004]!	; 0xfa4

00010fa4 <__stack_chk_fail@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #73728	; 0x12000
   10fac:	ldr	pc, [ip, #3996]!	; 0xf9c

00010fb0 <rewind@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #73728	; 0x12000
   10fb8:	ldr	pc, [ip, #3988]!	; 0xf94

00010fbc <realloc@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #73728	; 0x12000
   10fc4:	ldr	pc, [ip, #3980]!	; 0xf8c

00010fc8 <initgroups@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #73728	; 0x12000
   10fd0:	ldr	pc, [ip, #3972]!	; 0xf84

00010fd4 <wait@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #73728	; 0x12000
   10fdc:	ldr	pc, [ip, #3964]!	; 0xf7c

00010fe0 <textdomain@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #73728	; 0x12000
   10fe8:	ldr	pc, [ip, #3956]!	; 0xf74

00010fec <perror@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #73728	; 0x12000
   10ff4:	ldr	pc, [ip, #3948]!	; 0xf6c

00010ff8 <_IO_putc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #73728	; 0x12000
   11000:	ldr	pc, [ip, #3940]!	; 0xf64

00011004 <puts@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #73728	; 0x12000
   1100c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011010 <setgid@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #73728	; 0x12000
   11018:	ldr	pc, [ip, #3924]!	; 0xf54

0001101c <malloc@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #73728	; 0x12000
   11024:	ldr	pc, [ip, #3916]!	; 0xf4c

00011028 <__libc_start_main@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #73728	; 0x12000
   11030:	ldr	pc, [ip, #3908]!	; 0xf44

00011034 <strerror@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #73728	; 0x12000
   1103c:	ldr	pc, [ip, #3900]!	; 0xf3c

00011040 <closelog@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #73728	; 0x12000
   11048:	ldr	pc, [ip, #3892]!	; 0xf34

0001104c <__gmon_start__@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #73728	; 0x12000
   11054:	ldr	pc, [ip, #3884]!	; 0xf2c

00011058 <getopt_long@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #73728	; 0x12000
   11060:	ldr	pc, [ip, #3876]!	; 0xf24

00011064 <exit@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #73728	; 0x12000
   1106c:	ldr	pc, [ip, #3868]!	; 0xf1c

00011070 <feof@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #73728	; 0x12000
   11078:	ldr	pc, [ip, #3860]!	; 0xf14

0001107c <strlen@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #73728	; 0x12000
   11084:	ldr	pc, [ip, #3852]!	; 0xf0c

00011088 <strchr@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #73728	; 0x12000
   11090:	ldr	pc, [ip, #3844]!	; 0xf04

00011094 <getpwnam_r@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #73728	; 0x12000
   1109c:	ldr	pc, [ip, #3836]!	; 0xefc

000110a0 <__errno_location@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #73728	; 0x12000
   110a8:	ldr	pc, [ip, #3828]!	; 0xef4

000110ac <memset@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #73728	; 0x12000
   110b4:	ldr	pc, [ip, #3820]!	; 0xeec

000110b8 <strncpy@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #73728	; 0x12000
   110c0:	ldr	pc, [ip, #3812]!	; 0xee4

000110c4 <__printf_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #73728	; 0x12000
   110cc:	ldr	pc, [ip, #3804]!	; 0xedc

000110d0 <endspent@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #73728	; 0x12000
   110d8:	ldr	pc, [ip, #3796]!	; 0xed4

000110dc <__fprintf_chk@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #73728	; 0x12000
   110e4:	ldr	pc, [ip, #3788]!	; 0xecc

000110e8 <fclose@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #73728	; 0x12000
   110f0:	ldr	pc, [ip, #3780]!	; 0xec4

000110f4 <__syslog_chk@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #73728	; 0x12000
   110fc:	ldr	pc, [ip, #3772]!	; 0xebc

00011100 <setlocale@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #73728	; 0x12000
   11108:	ldr	pc, [ip, #3764]!	; 0xeb4

0001110c <fork@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #73728	; 0x12000
   11114:	ldr	pc, [ip, #3756]!	; 0xeac

00011118 <endpwent@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #73728	; 0x12000
   11120:	ldr	pc, [ip, #3748]!	; 0xea4

00011124 <execl@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #73728	; 0x12000
   1112c:	ldr	pc, [ip, #3740]!	; 0xe9c

00011130 <strrchr@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #73728	; 0x12000
   11138:	ldr	pc, [ip, #3732]!	; 0xe94

0001113c <fputc@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #73728	; 0x12000
   11144:	ldr	pc, [ip, #3724]!	; 0xe8c

00011148 <setuid@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #73728	; 0x12000
   11150:	ldr	pc, [ip, #3716]!	; 0xe84

00011154 <openlog@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #73728	; 0x12000
   1115c:	ldr	pc, [ip, #3708]!	; 0xe7c

00011160 <fopen64@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #73728	; 0x12000
   11168:	ldr	pc, [ip, #3700]!	; 0xe74

0001116c <bindtextdomain@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #73728	; 0x12000
   11174:	ldr	pc, [ip, #3692]!	; 0xe6c

00011178 <fputs@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #73728	; 0x12000
   11180:	ldr	pc, [ip, #3684]!	; 0xe64

00011184 <strncmp@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #73728	; 0x12000
   1118c:	ldr	pc, [ip, #3676]!	; 0xe5c

00011190 <abort@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #73728	; 0x12000
   11198:	ldr	pc, [ip, #3668]!	; 0xe54

0001119c <__snprintf_chk@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #73728	; 0x12000
   111a4:	ldr	pc, [ip, #3660]!	; 0xe4c

000111a8 <__assert_fail@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #73728	; 0x12000
   111b0:	ldr	pc, [ip, #3652]!	; 0xe44

Disassembly of section .text:

000111b4 <setsgent@@Base-0x1430>:
   111b4:	ldr	r3, [pc, #80]	; 1120c <__assert_fail@plt+0x64>
   111b8:	push	{lr}		; (str lr, [sp, #-4]!)
   111bc:	mov	r2, #5
   111c0:	sub	sp, sp, #12
   111c4:	ldr	r1, [pc, #68]	; 11210 <__assert_fail@plt+0x68>
   111c8:	mov	r0, #0
   111cc:	ldr	r4, [r3]
   111d0:	bl	10f80 <dcgettext@plt>
   111d4:	ldr	r3, [pc, #56]	; 11214 <__assert_fail@plt+0x6c>
   111d8:	ldr	r6, [r3]
   111dc:	mov	r5, r0
   111e0:	bl	110a0 <__errno_location@plt>
   111e4:	ldr	r0, [r0]
   111e8:	bl	11034 <strerror@plt>
   111ec:	mov	r3, r6
   111f0:	mov	r2, r5
   111f4:	mov	r1, #1
   111f8:	str	r0, [sp]
   111fc:	mov	r0, r4
   11200:	bl	110dc <__fprintf_chk@plt>
   11204:	mov	r0, #13
   11208:	bl	11064 <exit@plt>
   1120c:	andeq	r4, r2, r0, lsr #1
   11210:	andeq	r3, r1, ip, lsl #5
   11214:	andeq	r4, r2, r8, ror #1
   11218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1121c:	mov	r6, r0
   11220:	sub	sp, sp, #20
   11224:	ldr	r0, [r1]
   11228:	mov	r5, r1
   1122c:	bl	11968 <__assert_fail@plt+0x7c0>
   11230:	ldr	fp, [pc, #628]	; 114ac <__assert_fail@plt+0x304>
   11234:	mov	r9, #0
   11238:	ldr	r8, [pc, #624]	; 114b0 <__assert_fail@plt+0x308>
   1123c:	ldr	r7, [pc, #624]	; 114b4 <__assert_fail@plt+0x30c>
   11240:	ldr	sl, [pc, #624]	; 114b8 <__assert_fail@plt+0x310>
   11244:	str	r0, [fp]
   11248:	bl	11d04 <__assert_fail@plt+0xb5c>
   1124c:	ldr	r1, [pc, #616]	; 114bc <__assert_fail@plt+0x314>
   11250:	mov	r0, #1
   11254:	bl	10f5c <signal@plt>
   11258:	ldr	r1, [pc, #604]	; 114bc <__assert_fail@plt+0x314>
   1125c:	mov	r0, #2
   11260:	bl	10f5c <signal@plt>
   11264:	ldr	r1, [pc, #592]	; 114bc <__assert_fail@plt+0x314>
   11268:	mov	r0, #3
   1126c:	bl	10f5c <signal@plt>
   11270:	ldr	r1, [pc, #580]	; 114bc <__assert_fail@plt+0x314>
   11274:	mov	r0, #20
   11278:	bl	10f5c <signal@plt>
   1127c:	ldr	r1, [pc, #572]	; 114c0 <__assert_fail@plt+0x318>
   11280:	mov	r0, #6
   11284:	bl	11100 <setlocale@plt>
   11288:	ldr	r1, [pc, #564]	; 114c4 <__assert_fail@plt+0x31c>
   1128c:	ldr	r0, [pc, #564]	; 114c8 <__assert_fail@plt+0x320>
   11290:	bl	1116c <bindtextdomain@plt>
   11294:	ldr	r0, [pc, #556]	; 114c8 <__assert_fail@plt+0x320>
   11298:	bl	10fe0 <textdomain@plt>
   1129c:	mov	r2, #80	; 0x50
   112a0:	mov	r1, #1
   112a4:	ldr	r0, [pc, #544]	; 114cc <__assert_fail@plt+0x324>
   112a8:	bl	11154 <openlog@plt>
   112ac:	b	112c4 <__assert_fail@plt+0x11c>
   112b0:	cmp	r0, #104	; 0x68
   112b4:	beq	113a8 <__assert_fail@plt+0x200>
   112b8:	cmp	r0, #99	; 0x63
   112bc:	bne	113a0 <__assert_fail@plt+0x1f8>
   112c0:	strb	r3, [sl]
   112c4:	mov	r4, #0
   112c8:	str	r4, [sp]
   112cc:	mov	r3, r8
   112d0:	mov	r2, r7
   112d4:	mov	r1, r5
   112d8:	mov	r0, r6
   112dc:	bl	11058 <getopt_long@plt>
   112e0:	cmn	r0, #1
   112e4:	beq	112fc <__assert_fail@plt+0x154>
   112e8:	cmp	r0, #102	; 0x66
   112ec:	mov	r3, #1
   112f0:	bne	112b0 <__assert_fail@plt+0x108>
   112f4:	mov	r9, r3
   112f8:	b	112c8 <__assert_fail@plt+0x120>
   112fc:	ldr	r7, [pc, #436]	; 114b8 <__assert_fail@plt+0x310>
   11300:	ldrb	r3, [r7]
   11304:	cmp	r3, #0
   11308:	bne	1135c <__assert_fail@plt+0x1b4>
   1130c:	cmp	r9, #0
   11310:	beq	113a0 <__assert_fail@plt+0x1f8>
   11314:	ldr	r4, [pc, #436]	; 114d0 <__assert_fail@plt+0x328>
   11318:	ldr	r3, [r4]
   1131c:	cmp	r6, r3
   11320:	bne	113b0 <__assert_fail@plt+0x208>
   11324:	bl	11f64 <__assert_fail@plt+0xdbc>
   11328:	subs	r4, r0, #0
   1132c:	beq	113f0 <__assert_fail@plt+0x248>
   11330:	ldr	r0, [r4]
   11334:	bl	10f20 <getspnam@plt>
   11338:	ldrb	r5, [r7]
   1133c:	cmp	r5, #0
   11340:	mov	r1, r0
   11344:	bne	11478 <__assert_fail@plt+0x2d0>
   11348:	mov	r0, r4
   1134c:	bl	116a4 <__assert_fail@plt+0x4fc>
   11350:	mov	r0, r5
   11354:	add	sp, sp, #20
   11358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1135c:	cmp	r9, #0
   11360:	beq	11314 <__assert_fail@plt+0x16c>
   11364:	ldr	r3, [pc, #360]	; 114d4 <__assert_fail@plt+0x32c>
   11368:	mov	r2, #5
   1136c:	ldr	r1, [pc, #356]	; 114d8 <__assert_fail@plt+0x330>
   11370:	mov	r0, #0
   11374:	ldr	r4, [r3]
   11378:	bl	10f80 <dcgettext@plt>
   1137c:	ldr	r1, [pc, #344]	; 114dc <__assert_fail@plt+0x334>
   11380:	ldr	r2, [pc, #344]	; 114e0 <__assert_fail@plt+0x338>
   11384:	ldr	r3, [fp]
   11388:	str	r1, [sp, #4]
   1138c:	str	r2, [sp]
   11390:	mov	r1, #1
   11394:	mov	r2, r0
   11398:	mov	r0, r4
   1139c:	bl	110dc <__fprintf_chk@plt>
   113a0:	mov	r0, #2
   113a4:	bl	115f0 <__assert_fail@plt+0x448>
   113a8:	mov	r0, #0
   113ac:	bl	115f0 <__assert_fail@plt+0x448>
   113b0:	ldr	r3, [pc, #284]	; 114d4 <__assert_fail@plt+0x32c>
   113b4:	mov	r2, #5
   113b8:	ldr	r1, [pc, #292]	; 114e4 <__assert_fail@plt+0x33c>
   113bc:	mov	r0, #0
   113c0:	ldr	r6, [r3]
   113c4:	bl	10f80 <dcgettext@plt>
   113c8:	ldr	r2, [r4]
   113cc:	ldr	r3, [fp]
   113d0:	mov	r1, #1
   113d4:	ldr	r2, [r5, r2, lsl #2]
   113d8:	str	r2, [sp]
   113dc:	mov	r2, r0
   113e0:	mov	r0, r6
   113e4:	bl	110dc <__fprintf_chk@plt>
   113e8:	mov	r0, #2
   113ec:	bl	115f0 <__assert_fail@plt+0x448>
   113f0:	ldr	r3, [pc, #220]	; 114d4 <__assert_fail@plt+0x32c>
   113f4:	mov	r2, #5
   113f8:	ldr	r1, [pc, #232]	; 114e8 <__assert_fail@plt+0x340>
   113fc:	ldr	r5, [r3]
   11400:	bl	10f80 <dcgettext@plt>
   11404:	ldr	r3, [fp]
   11408:	mov	r1, #1
   1140c:	mov	r2, r0
   11410:	mov	r0, r5
   11414:	bl	110dc <__fprintf_chk@plt>
   11418:	mov	r1, r4
   1141c:	mov	r0, #6
   11420:	bl	11100 <setlocale@plt>
   11424:	cmp	r0, #0
   11428:	beq	11490 <__assert_fail@plt+0x2e8>
   1142c:	bl	10f98 <strdup@plt>
   11430:	subs	r4, r0, #0
   11434:	beq	11490 <__assert_fail@plt+0x2e8>
   11438:	ldr	r1, [pc, #172]	; 114ec <__assert_fail@plt+0x344>
   1143c:	mov	r0, #6
   11440:	bl	11100 <setlocale@plt>
   11444:	bl	10f14 <getuid@plt>
   11448:	ldr	r2, [pc, #160]	; 114f0 <__assert_fail@plt+0x348>
   1144c:	mov	r1, #1
   11450:	mov	r3, r0
   11454:	mov	r0, #4
   11458:	bl	110f4 <__syslog_chk@plt>
   1145c:	mov	r1, r4
   11460:	mov	r0, #6
   11464:	bl	11100 <setlocale@plt>
   11468:	mov	r0, r4
   1146c:	bl	10f2c <free@plt>
   11470:	mov	r0, #10
   11474:	bl	11064 <exit@plt>
   11478:	str	r0, [sp, #12]
   1147c:	bl	1186c <__assert_fail@plt+0x6c4>
   11480:	ldr	r1, [sp, #12]
   11484:	mov	r0, r4
   11488:	bl	11e54 <__assert_fail@plt+0xcac>
   1148c:	bl	11064 <exit@plt>
   11490:	bl	10f14 <getuid@plt>
   11494:	ldr	r2, [pc, #84]	; 114f0 <__assert_fail@plt+0x348>
   11498:	mov	r1, #1
   1149c:	mov	r3, r0
   114a0:	mov	r0, #4
   114a4:	bl	110f4 <__syslog_chk@plt>
   114a8:	b	11470 <__assert_fail@plt+0x2c8>
   114ac:	andeq	r4, r2, r8, ror #1
   114b0:	andeq	r4, r2, r8
   114b4:			; <UNDEFINED> instruction: 0x00012eb8
   114b8:	andeq	r4, r2, r9, lsr #1
   114bc:	andeq	r1, r1, r4, ror #11
   114c0:	andeq	r2, r1, ip, asr #28
   114c4:	muleq	r1, r4, lr
   114c8:	andeq	r2, r1, r8, lsr #29
   114cc:			; <UNDEFINED> instruction: 0x00012eb0
   114d0:	muleq	r2, r8, r0
   114d4:	andeq	r4, r2, r0, lsr #1
   114d8:			; <UNDEFINED> instruction: 0x00012ebc
   114dc:	ldrdeq	r2, [r1], -ip
   114e0:	andeq	r2, r1, r0, ror #29
   114e4:	andeq	r2, r1, r4, ror #29
   114e8:	andeq	r2, r1, r4, lsl #30
   114ec:	andeq	r2, r1, ip, lsr #30
   114f0:	andeq	r2, r1, r0, lsr pc
   114f4:	mov	fp, #0
   114f8:	mov	lr, #0
   114fc:	pop	{r1}		; (ldr r1, [sp], #4)
   11500:	mov	r2, sp
   11504:	push	{r2}		; (str r2, [sp, #-4]!)
   11508:	push	{r0}		; (str r0, [sp, #-4]!)
   1150c:	ldr	ip, [pc, #16]	; 11524 <__assert_fail@plt+0x37c>
   11510:	push	{ip}		; (str ip, [sp, #-4]!)
   11514:	ldr	r0, [pc, #12]	; 11528 <__assert_fail@plt+0x380>
   11518:	ldr	r3, [pc, #12]	; 1152c <__assert_fail@plt+0x384>
   1151c:	bl	11028 <__libc_start_main@plt>
   11520:	bl	11190 <abort@plt>
   11524:	andeq	r2, r1, ip, asr sp
   11528:	andeq	r1, r1, r8, lsl r2
   1152c:	strdeq	r2, [r1], -ip
   11530:	ldr	r3, [pc, #20]	; 1154c <__assert_fail@plt+0x3a4>
   11534:	ldr	r2, [pc, #20]	; 11550 <__assert_fail@plt+0x3a8>
   11538:	add	r3, pc, r3
   1153c:	ldr	r2, [r3, r2]
   11540:	cmp	r2, #0
   11544:	bxeq	lr
   11548:	b	1104c <__gmon_start__@plt>
   1154c:			; <UNDEFINED> instruction: 0x000129b4
   11550:	andeq	r0, r0, r4, lsl #2
   11554:	ldr	r0, [pc, #24]	; 11574 <__assert_fail@plt+0x3cc>
   11558:	ldr	r3, [pc, #24]	; 11578 <__assert_fail@plt+0x3d0>
   1155c:	cmp	r3, r0
   11560:	bxeq	lr
   11564:	ldr	r3, [pc, #16]	; 1157c <__assert_fail@plt+0x3d4>
   11568:	cmp	r3, #0
   1156c:	bxeq	lr
   11570:	bx	r3
   11574:	muleq	r2, r0, r0
   11578:	muleq	r2, r0, r0
   1157c:	andeq	r0, r0, r0
   11580:	ldr	r0, [pc, #36]	; 115ac <__assert_fail@plt+0x404>
   11584:	ldr	r1, [pc, #36]	; 115b0 <__assert_fail@plt+0x408>
   11588:	sub	r1, r1, r0
   1158c:	asr	r1, r1, #2
   11590:	add	r1, r1, r1, lsr #31
   11594:	asrs	r1, r1, #1
   11598:	bxeq	lr
   1159c:	ldr	r3, [pc, #16]	; 115b4 <__assert_fail@plt+0x40c>
   115a0:	cmp	r3, #0
   115a4:	bxeq	lr
   115a8:	bx	r3
   115ac:	muleq	r2, r0, r0
   115b0:	muleq	r2, r0, r0
   115b4:	andeq	r0, r0, r0
   115b8:	push	{r4, lr}
   115bc:	ldr	r4, [pc, #24]	; 115dc <__assert_fail@plt+0x434>
   115c0:	ldrb	r3, [r4]
   115c4:	cmp	r3, #0
   115c8:	popne	{r4, pc}
   115cc:	bl	11554 <__assert_fail@plt+0x3ac>
   115d0:	mov	r3, #1
   115d4:	strb	r3, [r4]
   115d8:	pop	{r4, pc}
   115dc:	andeq	r4, r2, r8, lsr #1
   115e0:	b	11580 <__assert_fail@plt+0x3d8>
   115e4:	push	{r4, lr}
   115e8:	mov	r0, #10
   115ec:	bl	10f44 <_exit@plt>
   115f0:	push	{r4, r5, r6, lr}
   115f4:	subs	r5, r0, #0
   115f8:	mov	r2, #5
   115fc:	ldrne	r3, [pc, #132]	; 11688 <__assert_fail@plt+0x4e0>
   11600:	ldreq	r3, [pc, #132]	; 1168c <__assert_fail@plt+0x4e4>
   11604:	ldr	r1, [pc, #132]	; 11690 <__assert_fail@plt+0x4e8>
   11608:	mov	r0, #0
   1160c:	ldr	r4, [r3]
   11610:	bl	10f80 <dcgettext@plt>
   11614:	ldr	r3, [pc, #120]	; 11694 <__assert_fail@plt+0x4ec>
   11618:	mov	r1, #1
   1161c:	ldr	r3, [r3]
   11620:	mov	r2, r0
   11624:	mov	r0, r4
   11628:	bl	110dc <__fprintf_chk@plt>
   1162c:	mov	r2, #5
   11630:	ldr	r1, [pc, #96]	; 11698 <__assert_fail@plt+0x4f0>
   11634:	mov	r0, #0
   11638:	bl	10f80 <dcgettext@plt>
   1163c:	mov	r1, r4
   11640:	bl	11178 <fputs@plt>
   11644:	mov	r2, #5
   11648:	ldr	r1, [pc, #76]	; 1169c <__assert_fail@plt+0x4f4>
   1164c:	mov	r0, #0
   11650:	bl	10f80 <dcgettext@plt>
   11654:	mov	r1, r4
   11658:	bl	11178 <fputs@plt>
   1165c:	mov	r2, #5
   11660:	ldr	r1, [pc, #56]	; 116a0 <__assert_fail@plt+0x4f8>
   11664:	mov	r0, #0
   11668:	bl	10f80 <dcgettext@plt>
   1166c:	mov	r1, r4
   11670:	bl	11178 <fputs@plt>
   11674:	mov	r1, r4
   11678:	mov	r0, #10
   1167c:	bl	1113c <fputc@plt>
   11680:	mov	r0, r5
   11684:	bl	11064 <exit@plt>
   11688:	andeq	r4, r2, r0, lsr #1
   1168c:	andeq	r4, r2, r4, lsr #1
   11690:	andeq	r2, r1, ip, ror #26
   11694:	andeq	r4, r2, r8, ror #1
   11698:	andeq	r2, r1, ip, lsl #27
   1169c:	ldrdeq	r2, [r1], -r4
   116a0:	andeq	r2, r1, r0, asr lr
   116a4:	push	{r4, r5, r6, lr}
   116a8:	sub	sp, sp, #8
   116ac:	ldr	r5, [pc, #400]	; 11844 <__assert_fail@plt+0x69c>
   116b0:	subs	r4, r1, #0
   116b4:	ldr	r3, [r5]
   116b8:	str	r3, [sp, #4]
   116bc:	beq	116e8 <__assert_fail@plt+0x540>
   116c0:	mov	r6, r0
   116c4:	bl	11e54 <__assert_fail@plt+0xcac>
   116c8:	str	r0, [sp]
   116cc:	cmp	r0, #3
   116d0:	ldrls	pc, [pc, r0, lsl #2]
   116d4:	b	11724 <__assert_fail@plt+0x57c>
   116d8:	andeq	r1, r1, ip, ror #13
   116dc:			; <UNDEFINED> instruction: 0x000117b4
   116e0:	andeq	r1, r1, r0, asr #15
   116e4:	andeq	r1, r1, r4, lsl #14
   116e8:	mov	r0, r4
   116ec:	ldr	r2, [sp, #4]
   116f0:	ldr	r3, [r5]
   116f4:	cmp	r2, r3
   116f8:	bne	11814 <__assert_fail@plt+0x66c>
   116fc:	add	sp, sp, #8
   11700:	pop	{r4, r5, r6, pc}
   11704:	ldr	r1, [pc, #316]	; 11848 <__assert_fail@plt+0x6a0>
   11708:	mov	r2, #5
   1170c:	mov	r0, #0
   11710:	bl	10f80 <dcgettext@plt>
   11714:	ldr	r3, [pc, #304]	; 1184c <__assert_fail@plt+0x6a4>
   11718:	ldr	r1, [r3]
   1171c:	bl	11178 <fputs@plt>
   11720:	ldr	r0, [sp]
   11724:	cmp	r0, #1
   11728:	bgt	11818 <__assert_fail@plt+0x670>
   1172c:	ldr	r2, [r4, #16]
   11730:	ldr	r3, [r4, #12]
   11734:	cmp	r2, r3
   11738:	blt	11818 <__assert_fail@plt+0x670>
   1173c:	mov	r2, #5
   11740:	ldr	r1, [pc, #264]	; 11850 <__assert_fail@plt+0x6a8>
   11744:	mov	r0, #0
   11748:	bl	10f80 <dcgettext@plt>
   1174c:	bl	11004 <puts@plt>
   11750:	ldr	r3, [pc, #244]	; 1184c <__assert_fail@plt+0x6a4>
   11754:	ldr	r0, [r3]
   11758:	bl	10f08 <fflush@plt>
   1175c:	bl	110d0 <endspent@plt>
   11760:	bl	11118 <endpwent@plt>
   11764:	bl	12620 <endsgent@@Base>
   11768:	bl	10ed8 <endgrent@plt>
   1176c:	bl	1110c <fork@plt>
   11770:	subs	r4, r0, #0
   11774:	beq	117cc <__assert_fail@plt+0x624>
   11778:	cmn	r4, #1
   1177c:	bne	1178c <__assert_fail@plt+0x5e4>
   11780:	b	11834 <__assert_fail@plt+0x68c>
   11784:	cmn	r0, #1
   11788:	beq	117ac <__assert_fail@plt+0x604>
   1178c:	mov	r0, sp
   11790:	bl	10fd4 <wait@plt>
   11794:	cmp	r4, r0
   11798:	bne	11784 <__assert_fail@plt+0x5dc>
   1179c:	ldr	r3, [sp]
   117a0:	cmp	r3, #0
   117a4:	moveq	r0, #1
   117a8:	beq	116ec <__assert_fail@plt+0x544>
   117ac:	mov	r0, #1
   117b0:	bl	11064 <exit@plt>
   117b4:	mov	r2, #5
   117b8:	ldr	r1, [pc, #148]	; 11854 <__assert_fail@plt+0x6ac>
   117bc:	b	1170c <__assert_fail@plt+0x564>
   117c0:	mov	r2, #5
   117c4:	ldr	r1, [pc, #140]	; 11858 <__assert_fail@plt+0x6b0>
   117c8:	b	1170c <__assert_fail@plt+0x564>
   117cc:	mov	r0, r6
   117d0:	bl	1223c <__assert_fail@plt+0x1094>
   117d4:	subs	r3, r0, #0
   117d8:	beq	117e4 <__assert_fail@plt+0x63c>
   117dc:	mov	r0, #126	; 0x7e
   117e0:	bl	10f44 <_exit@plt>
   117e4:	ldr	r1, [pc, #112]	; 1185c <__assert_fail@plt+0x6b4>
   117e8:	ldr	r2, [r6]
   117ec:	mov	r0, r1
   117f0:	bl	11124 <execl@plt>
   117f4:	bl	110a0 <__errno_location@plt>
   117f8:	ldr	r4, [r0]
   117fc:	ldr	r0, [pc, #92]	; 11860 <__assert_fail@plt+0x6b8>
   11800:	bl	10fec <perror@plt>
   11804:	cmp	r4, #2
   11808:	movne	r0, #126	; 0x7e
   1180c:	moveq	r0, #127	; 0x7f
   11810:	bl	10f44 <_exit@plt>
   11814:	bl	10fa4 <__stack_chk_fail@plt>
   11818:	mov	r2, #5
   1181c:	ldr	r1, [pc, #64]	; 11864 <__assert_fail@plt+0x6bc>
   11820:	mov	r0, #0
   11824:	bl	10f80 <dcgettext@plt>
   11828:	bl	11004 <puts@plt>
   1182c:	mov	r0, #1
   11830:	bl	11064 <exit@plt>
   11834:	ldr	r0, [pc, #44]	; 11868 <__assert_fail@plt+0x6c0>
   11838:	bl	10fec <perror@plt>
   1183c:	mov	r0, #1
   11840:	bl	11064 <exit@plt>
   11844:	strdeq	r3, [r2], -r0
   11848:			; <UNDEFINED> instruction: 0x00012fb8
   1184c:	andeq	r4, r2, r4, lsr #1
   11850:	strdeq	r2, [r1], -r4
   11854:	andeq	r2, r1, r0, lsl #31
   11858:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1185c:	andeq	r3, r1, r0, lsl r0
   11860:	andeq	r3, r1, r0, lsr #32
   11864:	ldrdeq	r2, [r1], -r0
   11868:	andeq	r3, r1, r0, asr #32
   1186c:	push	{r4, r6, r7, lr}
   11870:	mov	r4, r0
   11874:	mov	r0, #0
   11878:	bl	10f68 <time@plt>
   1187c:	cmp	r4, #0
   11880:	popeq	{r4, r6, r7, pc}
   11884:	ldr	r3, [r4, #8]
   11888:	cmn	r3, #1
   1188c:	popeq	{r4, r6, r7, pc}
   11890:	ldr	r2, [r4, #16]
   11894:	cmn	r2, #1
   11898:	popeq	{r4, r6, r7, pc}
   1189c:	ldr	r1, [r4, #20]
   118a0:	cmn	r1, #1
   118a4:	popeq	{r4, r6, r7, pc}
   118a8:	cmp	r3, #0
   118ac:	beq	11900 <__assert_fail@plt+0x758>
   118b0:	ldr	r6, [pc, #156]	; 11954 <__assert_fail@plt+0x7ac>
   118b4:	asr	r4, r0, #31
   118b8:	add	r3, r3, r2
   118bc:	smull	r6, r7, r0, r6
   118c0:	add	r0, r0, r7
   118c4:	rsb	r0, r4, r0, asr #16
   118c8:	sub	r4, r3, r0
   118cc:	cmp	r1, r4
   118d0:	poplt	{r4, r6, r7, pc}
   118d4:	cmp	r4, #1
   118d8:	bgt	11930 <__assert_fail@plt+0x788>
   118dc:	beq	11918 <__assert_fail@plt+0x770>
   118e0:	cmp	r4, #0
   118e4:	popne	{r4, r6, r7, pc}
   118e8:	mov	r0, r4
   118ec:	mov	r2, #5
   118f0:	ldr	r1, [pc, #96]	; 11958 <__assert_fail@plt+0x7b0>
   118f4:	bl	10f80 <dcgettext@plt>
   118f8:	pop	{r4, r6, r7, lr}
   118fc:	b	11004 <puts@plt>
   11900:	mov	r0, r3
   11904:	mov	r2, #5
   11908:	ldr	r1, [pc, #76]	; 1195c <__assert_fail@plt+0x7b4>
   1190c:	bl	10f80 <dcgettext@plt>
   11910:	pop	{r4, r6, r7, lr}
   11914:	b	11004 <puts@plt>
   11918:	mov	r2, #5
   1191c:	ldr	r1, [pc, #60]	; 11960 <__assert_fail@plt+0x7b8>
   11920:	mov	r0, #0
   11924:	bl	10f80 <dcgettext@plt>
   11928:	pop	{r4, r6, r7, lr}
   1192c:	b	11004 <puts@plt>
   11930:	mov	r2, #5
   11934:	ldr	r1, [pc, #40]	; 11964 <__assert_fail@plt+0x7bc>
   11938:	mov	r0, #0
   1193c:	bl	10f80 <dcgettext@plt>
   11940:	mov	r2, r4
   11944:	pop	{r4, r6, r7, lr}
   11948:	mov	r1, r0
   1194c:	mov	r0, #1
   11950:	b	110c4 <__printf_chk@plt>
   11954:	eorgt	r4, lr, #29360128	; 0x1c00000
   11958:	strheq	r3, [r1], -r4
   1195c:	andeq	r3, r1, r8, asr #32
   11960:	muleq	r1, r0, r0
   11964:	andeq	r3, r1, r8, rrx
   11968:	push	{r4, lr}
   1196c:	mov	r1, #47	; 0x2f
   11970:	mov	r4, r0
   11974:	bl	11130 <strrchr@plt>
   11978:	cmp	r0, #0
   1197c:	addne	r0, r0, #1
   11980:	moveq	r0, r4
   11984:	pop	{r4, pc}
   11988:	push	{r4, lr}
   1198c:	mov	r0, #64	; 0x40
   11990:	bl	124e8 <__assert_fail@plt+0x1340>
   11994:	ldr	r2, [pc, #12]	; 119a8 <__assert_fail@plt+0x800>
   11998:	mov	r3, #0
   1199c:	str	r0, [r2]
   119a0:	str	r3, [r0]
   119a4:	pop	{r4, pc}
   119a8:	andeq	r4, r2, ip, lsr #1
   119ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119b0:	subs	r5, r1, #0
   119b4:	sub	sp, sp, #28
   119b8:	beq	11ab0 <__assert_fail@plt+0x908>
   119bc:	mov	r8, r0
   119c0:	bl	1107c <strlen@plt>
   119c4:	mov	r4, r0
   119c8:	mov	r0, r5
   119cc:	bl	1107c <strlen@plt>
   119d0:	add	r4, r4, r0
   119d4:	add	r7, r4, #2
   119d8:	mov	r0, r7
   119dc:	bl	124e8 <__assert_fail@plt+0x1340>
   119e0:	ldr	r3, [pc, #416]	; 11b88 <__assert_fail@plt+0x9e0>
   119e4:	mov	r1, r7
   119e8:	str	r5, [sp, #8]
   119ec:	stm	sp, {r3, r8}
   119f0:	mov	r2, #1
   119f4:	mvn	r3, #0
   119f8:	add	r4, r4, #1
   119fc:	mov	r6, r0
   11a00:	bl	1119c <__snprintf_chk@plt>
   11a04:	cmp	r4, r0
   11a08:	bne	11b74 <__assert_fail@plt+0x9cc>
   11a0c:	mov	r1, #61	; 0x3d
   11a10:	mov	r0, r6
   11a14:	bl	11088 <strchr@plt>
   11a18:	cmp	r0, #0
   11a1c:	beq	11b14 <__assert_fail@plt+0x96c>
   11a20:	ldr	r8, [pc, #356]	; 11b8c <__assert_fail@plt+0x9e4>
   11a24:	sub	sl, r0, r6
   11a28:	ldr	r7, [r8, #4]
   11a2c:	ldr	r9, [r8]
   11a30:	cmp	r7, #0
   11a34:	beq	11b24 <__assert_fail@plt+0x97c>
   11a38:	sub	fp, r9, #4
   11a3c:	mov	r4, #0
   11a40:	b	11a48 <__assert_fail@plt+0x8a0>
   11a44:	mov	r4, r3
   11a48:	ldr	r5, [fp, #4]!
   11a4c:	mov	r2, sl
   11a50:	mov	r1, r5
   11a54:	mov	r0, r6
   11a58:	bl	11184 <strncmp@plt>
   11a5c:	lsl	r2, r4, #2
   11a60:	cmp	r0, #0
   11a64:	bne	11a78 <__assert_fail@plt+0x8d0>
   11a68:	ldrb	r3, [r5, sl]
   11a6c:	cmp	r3, #0
   11a70:	cmpne	r3, #61	; 0x3d
   11a74:	beq	11abc <__assert_fail@plt+0x914>
   11a78:	add	r3, r4, #1
   11a7c:	cmp	r3, r7
   11a80:	bne	11a44 <__assert_fail@plt+0x89c>
   11a84:	add	r4, r4, #2
   11a88:	tst	r4, #15
   11a8c:	lsl	r1, r7, #2
   11a90:	str	r4, [r8, #4]
   11a94:	addne	r1, r1, #4
   11a98:	str	r6, [r9, r7, lsl #2]
   11a9c:	beq	11adc <__assert_fail@plt+0x934>
   11aa0:	mov	r3, #0
   11aa4:	str	r3, [r9, r1]
   11aa8:	add	sp, sp, #28
   11aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ab0:	bl	124fc <__assert_fail@plt+0x1354>
   11ab4:	mov	r6, r0
   11ab8:	b	11a0c <__assert_fail@plt+0x864>
   11abc:	mov	r0, r5
   11ac0:	str	r2, [sp, #20]
   11ac4:	bl	10f2c <free@plt>
   11ac8:	ldr	r3, [r8]
   11acc:	ldr	r2, [sp, #20]
   11ad0:	str	r6, [r3, r2]
   11ad4:	add	sp, sp, #28
   11ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11adc:	mov	r0, r9
   11ae0:	add	r1, r1, #68	; 0x44
   11ae4:	bl	10fbc <realloc@plt>
   11ae8:	subs	r9, r0, #0
   11aec:	beq	11b38 <__assert_fail@plt+0x990>
   11af0:	ldr	r3, [pc, #152]	; 11b90 <__assert_fail@plt+0x9e8>
   11af4:	ldr	r2, [r8]
   11af8:	str	r9, [r8]
   11afc:	ldr	r1, [r3]
   11b00:	cmp	r1, r2
   11b04:	ldr	r1, [r8, #4]
   11b08:	streq	r9, [r3]
   11b0c:	lsl	r1, r1, #2
   11b10:	b	11aa0 <__assert_fail@plt+0x8f8>
   11b14:	mov	r0, r6
   11b18:	add	sp, sp, #28
   11b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b20:	b	10f2c <free@plt>
   11b24:	mov	r3, #1
   11b28:	str	r3, [r8, #4]
   11b2c:	mov	r1, #4
   11b30:	str	r6, [r9]
   11b34:	b	11aa0 <__assert_fail@plt+0x8f8>
   11b38:	mov	r2, #5
   11b3c:	ldr	r1, [pc, #80]	; 11b94 <__assert_fail@plt+0x9ec>
   11b40:	bl	10f80 <dcgettext@plt>
   11b44:	ldr	r3, [pc, #76]	; 11b98 <__assert_fail@plt+0x9f0>
   11b48:	ldr	r1, [r3]
   11b4c:	bl	11178 <fputs@plt>
   11b50:	ldrd	r2, [r8]
   11b54:	sub	r3, r3, #1
   11b58:	str	r3, [r8, #4]
   11b5c:	ldr	r0, [r2, r3, lsl #2]
   11b60:	bl	10f2c <free@plt>
   11b64:	ldr	r1, [r8, #4]
   11b68:	ldr	r9, [r8]
   11b6c:	lsl	r1, r1, #2
   11b70:	b	11aa0 <__assert_fail@plt+0x8f8>
   11b74:	ldr	r3, [pc, #32]	; 11b9c <__assert_fail@plt+0x9f4>
   11b78:	mov	r2, #100	; 0x64
   11b7c:	ldr	r1, [pc, #28]	; 11ba0 <__assert_fail@plt+0x9f8>
   11b80:	ldr	r0, [pc, #28]	; 11ba4 <__assert_fail@plt+0x9fc>
   11b84:	bl	111a8 <__assert_fail@plt>
   11b88:	andeq	r3, r1, r0, ror #1
   11b8c:	andeq	r4, r2, ip, lsr #1
   11b90:	muleq	r2, r0, r0
   11b94:	andeq	r3, r1, r8, lsl #2
   11b98:	andeq	r4, r2, r0, lsr #1
   11b9c:	ldrdeq	r3, [r1], -r8
   11ba0:	andeq	r3, r1, r8, ror #1
   11ba4:	strdeq	r3, [r1], -r0
   11ba8:	ldr	r3, [pc, #324]	; 11cf4 <__assert_fail@plt+0xb4c>
   11bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bb0:	sub	sp, sp, #1040	; 0x410
   11bb4:	sub	sp, sp, #4
   11bb8:	ldr	r3, [r3]
   11bbc:	subs	r7, r0, #0
   11bc0:	str	r3, [sp, #1036]	; 0x40c
   11bc4:	ble	11c8c <__assert_fail@plt+0xae4>
   11bc8:	ldr	fp, [pc, #296]	; 11cf8 <__assert_fail@plt+0xb50>
   11bcc:	sub	r8, r1, #4
   11bd0:	mov	sl, #1
   11bd4:	ldr	r5, [r8, #4]!
   11bd8:	mov	r0, r5
   11bdc:	bl	1107c <strlen@plt>
   11be0:	cmp	r0, #1024	; 0x400
   11be4:	bcs	11c84 <__assert_fail@plt+0xadc>
   11be8:	mov	r1, #61	; 0x3d
   11bec:	mov	r0, r5
   11bf0:	bl	11088 <strchr@plt>
   11bf4:	subs	r9, r0, #0
   11bf8:	beq	11cbc <__assert_fail@plt+0xb14>
   11bfc:	ldr	r4, [fp]
   11c00:	cmp	r4, #0
   11c04:	ldrne	r6, [pc, #236]	; 11cf8 <__assert_fail@plt+0xb50>
   11c08:	bne	11c1c <__assert_fail@plt+0xa74>
   11c0c:	b	11cac <__assert_fail@plt+0xb04>
   11c10:	ldr	r4, [r6, #4]!
   11c14:	cmp	r4, #0
   11c18:	beq	11cac <__assert_fail@plt+0xb04>
   11c1c:	mov	r0, r4
   11c20:	bl	1107c <strlen@plt>
   11c24:	mov	r1, r4
   11c28:	mov	r2, r0
   11c2c:	mov	r0, r5
   11c30:	bl	11184 <strncmp@plt>
   11c34:	cmp	r0, #0
   11c38:	bne	11c10 <__assert_fail@plt+0xa68>
   11c3c:	sub	r9, r9, r5
   11c40:	mov	r4, r0
   11c44:	mov	r2, r9
   11c48:	mov	r1, r5
   11c4c:	mov	r3, #1024	; 0x400
   11c50:	add	r0, sp, #12
   11c54:	bl	10f8c <__strncpy_chk@plt>
   11c58:	add	r3, sp, #1040	; 0x410
   11c5c:	add	r9, r3, r9
   11c60:	mov	r2, #5
   11c64:	ldr	r1, [pc, #144]	; 11cfc <__assert_fail@plt+0xb54>
   11c68:	mov	r0, r4
   11c6c:	strb	r4, [r9, #-1028]	; 0xfffffbfc
   11c70:	bl	10f80 <dcgettext@plt>
   11c74:	add	r2, sp, #12
   11c78:	mov	r1, r0
   11c7c:	mov	r0, #1
   11c80:	bl	110c4 <__printf_chk@plt>
   11c84:	subs	r7, r7, #1
   11c88:	bne	11bd4 <__assert_fail@plt+0xa2c>
   11c8c:	ldr	r3, [pc, #96]	; 11cf4 <__assert_fail@plt+0xb4c>
   11c90:	ldr	r2, [sp, #1036]	; 0x40c
   11c94:	ldr	r3, [r3]
   11c98:	cmp	r2, r3
   11c9c:	bne	11cf0 <__assert_fail@plt+0xb48>
   11ca0:	add	sp, sp, #1040	; 0x410
   11ca4:	add	sp, sp, #4
   11ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cac:	mov	r0, r5
   11cb0:	mov	r1, #0
   11cb4:	bl	119ac <__assert_fail@plt+0x804>
   11cb8:	b	11c84 <__assert_fail@plt+0xadc>
   11cbc:	ldr	r2, [pc, #60]	; 11d00 <__assert_fail@plt+0xb58>
   11cc0:	mov	r3, #1024	; 0x400
   11cc4:	str	sl, [sp, #4]
   11cc8:	str	r2, [sp]
   11ccc:	mov	r1, r3
   11cd0:	add	r0, sp, #12
   11cd4:	mov	r2, #1
   11cd8:	bl	1119c <__snprintf_chk@plt>
   11cdc:	add	r0, sp, #12
   11ce0:	ldr	r1, [r8]
   11ce4:	add	sl, sl, #1
   11ce8:	bl	119ac <__assert_fail@plt+0x804>
   11cec:	b	11c84 <__assert_fail@plt+0xadc>
   11cf0:	bl	10fa4 <__stack_chk_fail@plt>
   11cf4:	strdeq	r3, [r2], -r0
   11cf8:	andeq	r4, r2, r8, asr #32
   11cfc:	andeq	r3, r1, r4, lsr #2
   11d00:	andeq	r3, r1, r0, lsr #2
   11d04:	ldr	r3, [pc, #316]	; 11e48 <__assert_fail@plt+0xca0>
   11d08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11d0c:	ldr	r7, [r3]
   11d10:	ldr	r6, [r7]
   11d14:	cmp	r6, #0
   11d18:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d1c:	ldr	r8, [pc, #296]	; 11e4c <__assert_fail@plt+0xca4>
   11d20:	mov	r9, r7
   11d24:	ldr	r4, [r8]
   11d28:	cmp	r4, #0
   11d2c:	ldrne	r5, [pc, #280]	; 11e4c <__assert_fail@plt+0xca4>
   11d30:	bne	11d44 <__assert_fail@plt+0xb9c>
   11d34:	b	11e40 <__assert_fail@plt+0xc98>
   11d38:	ldr	r4, [r5, #4]!
   11d3c:	cmp	r4, #0
   11d40:	beq	11e40 <__assert_fail@plt+0xc98>
   11d44:	mov	r0, r4
   11d48:	bl	1107c <strlen@plt>
   11d4c:	mov	r1, r4
   11d50:	mov	r2, r0
   11d54:	mov	r0, r6
   11d58:	bl	11184 <strncmp@plt>
   11d5c:	cmp	r0, #0
   11d60:	bne	11d38 <__assert_fail@plt+0xb90>
   11d64:	ldr	r3, [r9]
   11d68:	cmp	r3, #0
   11d6c:	beq	11d94 <__assert_fail@plt+0xbec>
   11d70:	mov	r3, r9
   11d74:	ldr	r2, [r3, #4]
   11d78:	cmp	r2, #0
   11d7c:	str	r2, [r3], #4
   11d80:	bne	11d74 <__assert_fail@plt+0xbcc>
   11d84:	ldr	r6, [r9], #-4
   11d88:	cmp	r6, #0
   11d8c:	add	r9, r9, #4
   11d90:	bne	11d24 <__assert_fail@plt+0xb7c>
   11d94:	ldr	r5, [r7]
   11d98:	cmp	r5, #0
   11d9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11da0:	ldr	r4, [r8, #56]	; 0x38
   11da4:	cmp	r4, #0
   11da8:	ldrne	r6, [pc, #160]	; 11e50 <__assert_fail@plt+0xca8>
   11dac:	beq	11e24 <__assert_fail@plt+0xc7c>
   11db0:	mov	r0, r4
   11db4:	bl	1107c <strlen@plt>
   11db8:	mov	r1, r4
   11dbc:	mov	r2, r0
   11dc0:	mov	r0, r5
   11dc4:	bl	11184 <strncmp@plt>
   11dc8:	mov	r1, #47	; 0x2f
   11dcc:	cmp	r0, #0
   11dd0:	mov	r0, r5
   11dd4:	bne	11e2c <__assert_fail@plt+0xc84>
   11dd8:	bl	11088 <strchr@plt>
   11ddc:	cmp	r0, #0
   11de0:	beq	11e2c <__assert_fail@plt+0xc84>
   11de4:	ldr	r3, [r7]
   11de8:	cmp	r3, #0
   11dec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11df0:	mov	r3, r7
   11df4:	ldr	r2, [r3, #4]
   11df8:	cmp	r2, #0
   11dfc:	str	r2, [r3], #4
   11e00:	bne	11df4 <__assert_fail@plt+0xc4c>
   11e04:	ldr	r5, [r7], #-4
   11e08:	cmp	r5, #0
   11e0c:	add	r7, r7, #4
   11e10:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e14:	ldr	r4, [r8, #56]	; 0x38
   11e18:	cmp	r4, #0
   11e1c:	ldrne	r6, [pc, #44]	; 11e50 <__assert_fail@plt+0xca8>
   11e20:	bne	11db0 <__assert_fail@plt+0xc08>
   11e24:	ldr	r5, [r7, #4]
   11e28:	b	11e08 <__assert_fail@plt+0xc60>
   11e2c:	ldr	r4, [r6, #4]!
   11e30:	cmp	r4, #0
   11e34:	bne	11db0 <__assert_fail@plt+0xc08>
   11e38:	ldr	r5, [r7, #4]
   11e3c:	b	11e08 <__assert_fail@plt+0xc60>
   11e40:	ldr	r6, [r9, #4]
   11e44:	b	11d88 <__assert_fail@plt+0xbe0>
   11e48:	muleq	r2, r0, r0
   11e4c:	andeq	r4, r2, r8, asr #32
   11e50:	andeq	r4, r2, r0, lsl #1
   11e54:	push	{r4, r5, r6, r7, r8, lr}
   11e58:	mov	r4, r1
   11e5c:	mov	r6, r0
   11e60:	mov	r0, #0
   11e64:	bl	10f68 <time@plt>
   11e68:	cmp	r4, #0
   11e6c:	beq	11efc <__assert_fail@plt+0xd54>
   11e70:	ldr	r2, [pc, #224]	; 11f58 <__assert_fail@plt+0xdb0>
   11e74:	asr	r5, r0, #31
   11e78:	smull	r2, r3, r0, r2
   11e7c:	add	r0, r0, r3
   11e80:	ldr	r3, [r4, #28]
   11e84:	rsb	r5, r5, r0, asr #16
   11e88:	cmp	r3, #0
   11e8c:	movgt	r0, #1
   11e90:	movle	r0, #0
   11e94:	cmp	r3, r5
   11e98:	movgt	r0, #0
   11e9c:	cmp	r0, #0
   11ea0:	bne	11f3c <__assert_fail@plt+0xd94>
   11ea4:	ldr	r7, [r4, #8]
   11ea8:	cmp	r7, #0
   11eac:	beq	11f04 <__assert_fail@plt+0xd5c>
   11eb0:	ble	11f4c <__assert_fail@plt+0xda4>
   11eb4:	ldr	r0, [r4, #16]
   11eb8:	cmp	r0, #0
   11ebc:	blt	11edc <__assert_fail@plt+0xd34>
   11ec0:	ldr	r3, [r4, #24]
   11ec4:	cmp	r3, #0
   11ec8:	blt	11edc <__assert_fail@plt+0xd34>
   11ecc:	add	r2, r7, r0
   11ed0:	add	r3, r2, r3
   11ed4:	cmp	r3, r5
   11ed8:	ble	11f44 <__assert_fail@plt+0xd9c>
   11edc:	cmn	r0, #1
   11ee0:	ldr	r2, [pc, #116]	; 11f5c <__assert_fail@plt+0xdb4>
   11ee4:	movne	r3, #0
   11ee8:	moveq	r3, #1
   11eec:	cmp	r0, r2
   11ef0:	orrgt	r3, r3, #1
   11ef4:	cmp	r3, #0
   11ef8:	beq	11f28 <__assert_fail@plt+0xd80>
   11efc:	mov	r0, #0
   11f00:	pop	{r4, r5, r6, r7, r8, pc}
   11f04:	ldr	r0, [r6, #4]
   11f08:	ldr	r1, [pc, #80]	; 11f60 <__assert_fail@plt+0xdb8>
   11f0c:	bl	10ef0 <strcmp@plt>
   11f10:	cmp	r0, #0
   11f14:	beq	11f20 <__assert_fail@plt+0xd78>
   11f18:	ldr	r0, [r4, #16]
   11f1c:	b	11edc <__assert_fail@plt+0xd34>
   11f20:	mov	r0, #1
   11f24:	pop	{r4, r5, r6, r7, r8, pc}
   11f28:	add	r0, r7, r0
   11f2c:	cmp	r0, r5
   11f30:	movgt	r0, #0
   11f34:	movle	r0, #1
   11f38:	pop	{r4, r5, r6, r7, r8, pc}
   11f3c:	mov	r0, #3
   11f40:	pop	{r4, r5, r6, r7, r8, pc}
   11f44:	mov	r0, #2
   11f48:	pop	{r4, r5, r6, r7, r8, pc}
   11f4c:	cmn	r7, #1
   11f50:	popeq	{r4, r5, r6, r7, r8, pc}
   11f54:	b	11f18 <__assert_fail@plt+0xd70>
   11f58:	eorgt	r4, lr, #29360128	; 0x1c00000
   11f5c:	andeq	r2, r0, pc, lsl #14
   11f60:	andeq	r3, r1, ip, asr #3
   11f64:	push	{r4, r5, r6, lr}
   11f68:	bl	10efc <getlogin@plt>
   11f6c:	mov	r4, r0
   11f70:	bl	10f14 <getuid@plt>
   11f74:	cmp	r4, #0
   11f78:	mov	r5, r0
   11f7c:	beq	11f8c <__assert_fail@plt+0xde4>
   11f80:	ldrb	r3, [r4]
   11f84:	cmp	r3, #0
   11f88:	bne	11f98 <__assert_fail@plt+0xdf0>
   11f8c:	mov	r0, r5
   11f90:	pop	{r4, r5, r6, lr}
   11f94:	b	123a8 <__assert_fail@plt+0x1200>
   11f98:	mov	r0, r4
   11f9c:	bl	12268 <__assert_fail@plt+0x10c0>
   11fa0:	subs	r3, r0, #0
   11fa4:	beq	11f8c <__assert_fail@plt+0xde4>
   11fa8:	ldr	r3, [r3, #8]
   11fac:	cmp	r3, r5
   11fb0:	popeq	{r4, r5, r6, pc}
   11fb4:	mov	r0, r5
   11fb8:	pop	{r4, r5, r6, lr}
   11fbc:	b	123a8 <__assert_fail@plt+0x1200>
   11fc0:	push	{r4, r5, r6, lr}
   11fc4:	mov	r4, r0
   11fc8:	sub	sp, sp, #8
   11fcc:	ldr	r0, [r0, #12]
   11fd0:	bl	11010 <setgid@plt>
   11fd4:	cmn	r0, #1
   11fd8:	beq	11ffc <__assert_fail@plt+0xe54>
   11fdc:	ldr	r1, [r4, #12]
   11fe0:	ldr	r0, [r4]
   11fe4:	bl	10fc8 <initgroups@plt>
   11fe8:	cmn	r0, #1
   11fec:	movne	r0, #0
   11ff0:	beq	120b4 <__assert_fail@plt+0xf0c>
   11ff4:	add	sp, sp, #8
   11ff8:	pop	{r4, r5, r6, pc}
   11ffc:	bl	110a0 <__errno_location@plt>
   12000:	ldr	r5, [r0]
   12004:	ldr	r0, [pc, #308]	; 12140 <__assert_fail@plt+0xf98>
   12008:	bl	10fec <perror@plt>
   1200c:	mov	r1, #0
   12010:	mov	r0, #6
   12014:	bl	11100 <setlocale@plt>
   12018:	cmp	r0, #0
   1201c:	beq	12084 <__assert_fail@plt+0xedc>
   12020:	bl	10f98 <strdup@plt>
   12024:	subs	r6, r0, #0
   12028:	beq	12084 <__assert_fail@plt+0xedc>
   1202c:	ldr	r1, [pc, #272]	; 12144 <__assert_fail@plt+0xf9c>
   12030:	mov	r0, #6
   12034:	bl	11100 <setlocale@plt>
   12038:	mov	r0, r5
   1203c:	ldr	r5, [r4, #12]
   12040:	ldr	r4, [r4]
   12044:	bl	11034 <strerror@plt>
   12048:	str	r4, [sp]
   1204c:	mov	r3, r5
   12050:	ldr	r2, [pc, #240]	; 12148 <__assert_fail@plt+0xfa0>
   12054:	mov	r1, #1
   12058:	str	r0, [sp, #4]
   1205c:	mov	r0, #3
   12060:	bl	110f4 <__syslog_chk@plt>
   12064:	mov	r1, r6
   12068:	mov	r0, #6
   1206c:	bl	11100 <setlocale@plt>
   12070:	mov	r0, r6
   12074:	bl	10f2c <free@plt>
   12078:	bl	11040 <closelog@plt>
   1207c:	mvn	r0, #0
   12080:	b	11ff4 <__assert_fail@plt+0xe4c>
   12084:	mov	r0, r5
   12088:	ldr	r5, [r4, #12]
   1208c:	ldr	r4, [r4]
   12090:	bl	11034 <strerror@plt>
   12094:	str	r4, [sp]
   12098:	mov	r3, r5
   1209c:	ldr	r2, [pc, #164]	; 12148 <__assert_fail@plt+0xfa0>
   120a0:	mov	r1, #1
   120a4:	str	r0, [sp, #4]
   120a8:	mov	r0, #3
   120ac:	bl	110f4 <__syslog_chk@plt>
   120b0:	b	12078 <__assert_fail@plt+0xed0>
   120b4:	bl	110a0 <__errno_location@plt>
   120b8:	ldr	r5, [r0]
   120bc:	ldr	r0, [pc, #136]	; 1214c <__assert_fail@plt+0xfa4>
   120c0:	bl	10fec <perror@plt>
   120c4:	mov	r1, #0
   120c8:	mov	r0, #6
   120cc:	bl	11100 <setlocale@plt>
   120d0:	cmp	r0, #0
   120d4:	beq	12118 <__assert_fail@plt+0xf70>
   120d8:	bl	10f98 <strdup@plt>
   120dc:	subs	r6, r0, #0
   120e0:	beq	12118 <__assert_fail@plt+0xf70>
   120e4:	ldr	r1, [pc, #88]	; 12144 <__assert_fail@plt+0xf9c>
   120e8:	mov	r0, #6
   120ec:	bl	11100 <setlocale@plt>
   120f0:	mov	r0, r5
   120f4:	ldr	r4, [r4]
   120f8:	bl	11034 <strerror@plt>
   120fc:	mov	r3, r4
   12100:	ldr	r2, [pc, #72]	; 12150 <__assert_fail@plt+0xfa8>
   12104:	mov	r1, #1
   12108:	str	r0, [sp]
   1210c:	mov	r0, #3
   12110:	bl	110f4 <__syslog_chk@plt>
   12114:	b	12064 <__assert_fail@plt+0xebc>
   12118:	mov	r0, r5
   1211c:	ldr	r4, [r4]
   12120:	bl	11034 <strerror@plt>
   12124:	mov	r3, r4
   12128:	ldr	r2, [pc, #32]	; 12150 <__assert_fail@plt+0xfa8>
   1212c:	mov	r1, #1
   12130:	str	r0, [sp]
   12134:	mov	r0, #3
   12138:	bl	110f4 <__syslog_chk@plt>
   1213c:	b	12078 <__assert_fail@plt+0xed0>
   12140:	ldrdeq	r3, [r1], -r0
   12144:	andeq	r2, r1, ip, lsr #30
   12148:	ldrdeq	r3, [r1], -r8
   1214c:	andeq	r3, r1, r0, lsl #4
   12150:	andeq	r3, r1, ip, lsl #4
   12154:	push	{r4, r5, r6, lr}
   12158:	mov	r4, r0
   1215c:	sub	sp, sp, #8
   12160:	ldr	r0, [r0, #8]
   12164:	bl	11148 <setuid@plt>
   12168:	cmp	r0, #0
   1216c:	bne	12178 <__assert_fail@plt+0xfd0>
   12170:	add	sp, sp, #8
   12174:	pop	{r4, r5, r6, pc}
   12178:	bl	110a0 <__errno_location@plt>
   1217c:	ldr	r5, [r0]
   12180:	ldr	r0, [pc, #168]	; 12230 <__assert_fail@plt+0x1088>
   12184:	bl	10fec <perror@plt>
   12188:	mov	r1, #0
   1218c:	mov	r0, #6
   12190:	bl	11100 <setlocale@plt>
   12194:	cmp	r0, #0
   12198:	beq	12200 <__assert_fail@plt+0x1058>
   1219c:	bl	10f98 <strdup@plt>
   121a0:	subs	r6, r0, #0
   121a4:	beq	12200 <__assert_fail@plt+0x1058>
   121a8:	ldr	r1, [pc, #132]	; 12234 <__assert_fail@plt+0x108c>
   121ac:	mov	r0, #6
   121b0:	bl	11100 <setlocale@plt>
   121b4:	mov	r0, r5
   121b8:	ldr	r5, [r4, #8]
   121bc:	ldr	r4, [r4]
   121c0:	bl	11034 <strerror@plt>
   121c4:	mov	r3, r5
   121c8:	ldr	r2, [pc, #104]	; 12238 <__assert_fail@plt+0x1090>
   121cc:	mov	r1, #1
   121d0:	str	r4, [sp]
   121d4:	str	r0, [sp, #4]
   121d8:	mov	r0, #3
   121dc:	bl	110f4 <__syslog_chk@plt>
   121e0:	mov	r1, r6
   121e4:	mov	r0, #6
   121e8:	bl	11100 <setlocale@plt>
   121ec:	mov	r0, r6
   121f0:	bl	10f2c <free@plt>
   121f4:	bl	11040 <closelog@plt>
   121f8:	mvn	r0, #0
   121fc:	b	12170 <__assert_fail@plt+0xfc8>
   12200:	mov	r0, r5
   12204:	ldr	r5, [r4, #8]
   12208:	ldr	r4, [r4]
   1220c:	bl	11034 <strerror@plt>
   12210:	str	r4, [sp]
   12214:	mov	r3, r5
   12218:	ldr	r2, [pc, #24]	; 12238 <__assert_fail@plt+0x1090>
   1221c:	mov	r1, #1
   12220:	str	r0, [sp, #4]
   12224:	mov	r0, #3
   12228:	bl	110f4 <__syslog_chk@plt>
   1222c:	b	121f4 <__assert_fail@plt+0x104c>
   12230:	andeq	r3, r1, r4, lsr r2
   12234:	andeq	r2, r1, ip, lsr #30
   12238:	andeq	r3, r1, ip, lsr r2
   1223c:	push	{r4, lr}
   12240:	mov	r4, r0
   12244:	bl	11fc0 <__assert_fail@plt+0xe18>
   12248:	cmp	r0, #0
   1224c:	blt	12260 <__assert_fail@plt+0x10b8>
   12250:	mov	r0, r4
   12254:	bl	12154 <__assert_fail@plt+0xfac>
   12258:	asr	r0, r0, #31
   1225c:	pop	{r4, pc}
   12260:	mvn	r0, #0
   12264:	pop	{r4, pc}
   12268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1226c:	sub	sp, sp, #20
   12270:	ldr	fp, [pc, #288]	; 12398 <__assert_fail@plt+0x11f0>
   12274:	mov	sl, r0
   12278:	mov	r0, #28
   1227c:	ldr	r3, [fp]
   12280:	str	r3, [sp, #12]
   12284:	bl	1101c <malloc@plt>
   12288:	subs	r8, r0, #0
   1228c:	movne	r5, #0
   12290:	movne	r7, r5
   12294:	movne	r4, #256	; 0x100
   12298:	addne	r9, sp, #8
   1229c:	beq	12364 <__assert_fail@plt+0x11bc>
   122a0:	mov	r0, r5
   122a4:	mov	r1, r4
   122a8:	str	r7, [sp, #8]
   122ac:	bl	10fbc <realloc@plt>
   122b0:	subs	r5, r0, #0
   122b4:	beq	12364 <__assert_fail@plt+0x11bc>
   122b8:	bl	110a0 <__errno_location@plt>
   122bc:	mov	r3, r4
   122c0:	mov	r2, r5
   122c4:	mov	r1, r8
   122c8:	str	r7, [r0]
   122cc:	mov	r6, r0
   122d0:	str	r9, [sp]
   122d4:	mov	r0, sl
   122d8:	bl	11094 <getpwnam_r@plt>
   122dc:	cmp	r0, #0
   122e0:	bne	122f0 <__assert_fail@plt+0x1148>
   122e4:	ldr	r3, [sp, #8]
   122e8:	cmp	r3, r8
   122ec:	beq	12344 <__assert_fail@plt+0x119c>
   122f0:	ldr	r3, [r6]
   122f4:	cmp	r3, #34	; 0x22
   122f8:	bne	12314 <__assert_fail@plt+0x116c>
   122fc:	cmn	r4, #-1073741823	; 0xc0000001
   12300:	lslls	r4, r4, #2
   12304:	bls	122a0 <__assert_fail@plt+0x10f8>
   12308:	cmn	r4, #1
   1230c:	mvnne	r4, #0
   12310:	bne	122a0 <__assert_fail@plt+0x10f8>
   12314:	mov	r0, r5
   12318:	bl	10f2c <free@plt>
   1231c:	mov	r0, r8
   12320:	bl	10f2c <free@plt>
   12324:	mov	r4, #0
   12328:	ldr	r2, [sp, #12]
   1232c:	ldr	r3, [fp]
   12330:	mov	r0, r4
   12334:	cmp	r2, r3
   12338:	bne	12394 <__assert_fail@plt+0x11ec>
   1233c:	add	sp, sp, #20
   12340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12344:	mov	r0, r8
   12348:	bl	12b7c <putsgent@@Base+0x214>
   1234c:	mov	r4, r0
   12350:	mov	r0, r5
   12354:	bl	10f2c <free@plt>
   12358:	mov	r0, r8
   1235c:	bl	10f2c <free@plt>
   12360:	b	12328 <__assert_fail@plt+0x1180>
   12364:	ldr	r3, [pc, #48]	; 1239c <__assert_fail@plt+0x11f4>
   12368:	mov	r2, #5
   1236c:	ldr	r1, [pc, #44]	; 123a0 <__assert_fail@plt+0x11f8>
   12370:	ldr	r4, [r3]
   12374:	bl	10f80 <dcgettext@plt>
   12378:	ldr	r3, [pc, #36]	; 123a4 <__assert_fail@plt+0x11fc>
   1237c:	mov	r1, #1
   12380:	mov	r2, r0
   12384:	mov	r0, r4
   12388:	bl	110dc <__fprintf_chk@plt>
   1238c:	mov	r0, #13
   12390:	bl	11064 <exit@plt>
   12394:	bl	10fa4 <__stack_chk_fail@plt>
   12398:	strdeq	r3, [r2], -r0
   1239c:	andeq	r4, r2, r0, lsr #1
   123a0:	andeq	r3, r1, r0, ror #4
   123a4:	andeq	r3, r1, r4, ror r2
   123a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123ac:	sub	sp, sp, #20
   123b0:	ldr	fp, [pc, #288]	; 124d8 <__assert_fail@plt+0x1330>
   123b4:	mov	sl, r0
   123b8:	mov	r0, #28
   123bc:	ldr	r3, [fp]
   123c0:	str	r3, [sp, #12]
   123c4:	bl	1101c <malloc@plt>
   123c8:	subs	r8, r0, #0
   123cc:	movne	r5, #0
   123d0:	movne	r7, r5
   123d4:	movne	r4, #256	; 0x100
   123d8:	addne	r9, sp, #8
   123dc:	beq	124a4 <__assert_fail@plt+0x12fc>
   123e0:	mov	r0, r5
   123e4:	mov	r1, r4
   123e8:	str	r7, [sp, #8]
   123ec:	bl	10fbc <realloc@plt>
   123f0:	subs	r5, r0, #0
   123f4:	beq	124a4 <__assert_fail@plt+0x12fc>
   123f8:	bl	110a0 <__errno_location@plt>
   123fc:	mov	r3, r4
   12400:	mov	r2, r5
   12404:	mov	r1, r8
   12408:	str	r7, [r0]
   1240c:	mov	r6, r0
   12410:	str	r9, [sp]
   12414:	mov	r0, sl
   12418:	bl	10ee4 <getpwuid_r@plt>
   1241c:	cmp	r0, #0
   12420:	bne	12430 <__assert_fail@plt+0x1288>
   12424:	ldr	r3, [sp, #8]
   12428:	cmp	r3, r8
   1242c:	beq	12484 <__assert_fail@plt+0x12dc>
   12430:	ldr	r3, [r6]
   12434:	cmp	r3, #34	; 0x22
   12438:	bne	12454 <__assert_fail@plt+0x12ac>
   1243c:	cmn	r4, #-1073741823	; 0xc0000001
   12440:	lslls	r4, r4, #2
   12444:	bls	123e0 <__assert_fail@plt+0x1238>
   12448:	cmn	r4, #1
   1244c:	mvnne	r4, #0
   12450:	bne	123e0 <__assert_fail@plt+0x1238>
   12454:	mov	r0, r5
   12458:	bl	10f2c <free@plt>
   1245c:	mov	r0, r8
   12460:	bl	10f2c <free@plt>
   12464:	mov	r4, #0
   12468:	ldr	r2, [sp, #12]
   1246c:	ldr	r3, [fp]
   12470:	mov	r0, r4
   12474:	cmp	r2, r3
   12478:	bne	124d4 <__assert_fail@plt+0x132c>
   1247c:	add	sp, sp, #20
   12480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12484:	mov	r0, r8
   12488:	bl	12b7c <putsgent@@Base+0x214>
   1248c:	mov	r4, r0
   12490:	mov	r0, r5
   12494:	bl	10f2c <free@plt>
   12498:	mov	r0, r8
   1249c:	bl	10f2c <free@plt>
   124a0:	b	12468 <__assert_fail@plt+0x12c0>
   124a4:	ldr	r3, [pc, #48]	; 124dc <__assert_fail@plt+0x1334>
   124a8:	mov	r2, #5
   124ac:	ldr	r1, [pc, #44]	; 124e0 <__assert_fail@plt+0x1338>
   124b0:	ldr	r4, [r3]
   124b4:	bl	10f80 <dcgettext@plt>
   124b8:	ldr	r3, [pc, #36]	; 124e4 <__assert_fail@plt+0x133c>
   124bc:	mov	r1, #1
   124c0:	mov	r2, r0
   124c4:	mov	r0, r4
   124c8:	bl	110dc <__fprintf_chk@plt>
   124cc:	mov	r0, #13
   124d0:	bl	11064 <exit@plt>
   124d4:	bl	10fa4 <__stack_chk_fail@plt>
   124d8:	strdeq	r3, [r2], -r0
   124dc:	andeq	r4, r2, r0, lsr #1
   124e0:	andeq	r3, r1, r0, ror #4
   124e4:	andeq	r3, r1, r0, lsl #5
   124e8:	push	{r4, lr}
   124ec:	bl	1101c <malloc@plt>
   124f0:	cmp	r0, #0
   124f4:	popne	{r4, pc}
   124f8:	bl	111b4 <__assert_fail@plt+0xc>
   124fc:	push	{r4, r5, r6, lr}
   12500:	mov	r5, r0
   12504:	bl	1107c <strlen@plt>
   12508:	add	r4, r0, #1
   1250c:	mov	r0, r4
   12510:	bl	1101c <malloc@plt>
   12514:	cmp	r0, #0
   12518:	beq	1252c <__assert_fail@plt+0x1384>
   1251c:	mov	r2, r4
   12520:	mov	r1, r5
   12524:	pop	{r4, r5, r6, lr}
   12528:	b	10f50 <memcpy@plt>
   1252c:	bl	111b4 <__assert_fail@plt+0xc>
   12530:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12534:	mov	r9, r2
   12538:	ldr	r8, [r2]
   1253c:	mov	r4, r0
   12540:	add	r7, r8, #1
   12544:	mov	r6, r1
   12548:	mov	sl, #0
   1254c:	lsl	r5, r7, #2
   12550:	cmp	r4, #0
   12554:	bne	12570 <__assert_fail@plt+0x13c8>
   12558:	b	1257c <__assert_fail@plt+0x13d4>
   1255c:	mov	r1, r5
   12560:	ldr	r0, [r6]
   12564:	bl	10fbc <realloc@plt>
   12568:	subs	fp, r0, #0
   1256c:	bne	125a0 <__assert_fail@plt+0x13f8>
   12570:	ldrb	r3, [r4]
   12574:	cmp	r3, #0
   12578:	bne	1255c <__assert_fail@plt+0x13b4>
   1257c:	ldr	fp, [r6]
   12580:	mov	r1, r5
   12584:	mov	r0, fp
   12588:	bl	10fbc <realloc@plt>
   1258c:	cmp	r0, #0
   12590:	movne	r3, #0
   12594:	strne	r3, [r0, r8, lsl #2]
   12598:	strne	r0, [r6]
   1259c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125a0:	add	r3, fp, r5
   125a4:	mov	r0, r4
   125a8:	str	r4, [r3, #-4]
   125ac:	mov	r1, #44	; 0x2c
   125b0:	str	fp, [r6]
   125b4:	str	r7, [r9]
   125b8:	bl	11088 <strchr@plt>
   125bc:	add	r5, r5, #4
   125c0:	subs	r4, r0, #0
   125c4:	movne	r8, r7
   125c8:	strbne	sl, [r4], #1
   125cc:	addne	r7, r7, #1
   125d0:	bne	12550 <__assert_fail@plt+0x13a8>
   125d4:	add	r5, r8, #2
   125d8:	mov	r8, r7
   125dc:	lsl	r5, r5, #2
   125e0:	b	12580 <__assert_fail@plt+0x13d8>

000125e4 <setsgent@@Base>:
   125e4:	push	{r4, lr}
   125e8:	ldr	r4, [pc, #36]	; 12614 <setsgent@@Base+0x30>
   125ec:	ldr	r0, [r4]
   125f0:	cmp	r0, #0
   125f4:	beq	12600 <setsgent@@Base+0x1c>
   125f8:	pop	{r4, lr}
   125fc:	b	10fb0 <rewind@plt>
   12600:	ldr	r1, [pc, #16]	; 12618 <setsgent@@Base+0x34>
   12604:	ldr	r0, [pc, #16]	; 1261c <setsgent@@Base+0x38>
   12608:	bl	11160 <fopen64@plt>
   1260c:	str	r0, [r4]
   12610:	pop	{r4, pc}
   12614:	strheq	r4, [r2], -r4	; <UNPREDICTABLE>
   12618:			; <UNDEFINED> instruction: 0x000132b0
   1261c:			; <UNDEFINED> instruction: 0x000132b4

00012620 <endsgent@@Base>:
   12620:	push	{r4, lr}
   12624:	ldr	r4, [pc, #24]	; 12644 <endsgent@@Base+0x24>
   12628:	ldr	r0, [r4]
   1262c:	cmp	r0, #0
   12630:	beq	12638 <endsgent@@Base+0x18>
   12634:	bl	110e8 <fclose@plt>
   12638:	mov	r3, #0
   1263c:	str	r3, [r4]
   12640:	pop	{r4, pc}
   12644:	strheq	r4, [r2], -r4	; <UNPREDICTABLE>

00012648 <sgetsgent@@Base>:
   12648:	push	{r4, r5, r6, r7, r8, r9, lr}
   1264c:	sub	sp, sp, #28
   12650:	ldr	r8, [pc, #388]	; 127dc <sgetsgent@@Base+0x194>
   12654:	mov	r9, r0
   12658:	ldr	r6, [pc, #384]	; 127e0 <sgetsgent@@Base+0x198>
   1265c:	ldr	r3, [r8]
   12660:	str	r3, [sp, #20]
   12664:	bl	1107c <strlen@plt>
   12668:	ldr	r3, [r6, #24]
   1266c:	ldr	r4, [r6, #20]
   12670:	add	r5, r0, #1
   12674:	cmp	r3, r5
   12678:	mov	r7, r0
   1267c:	bcs	126a4 <sgetsgent@@Base+0x5c>
   12680:	mov	r0, r4
   12684:	mov	r1, r5
   12688:	bl	10fbc <realloc@plt>
   1268c:	subs	r4, r0, #0
   12690:	beq	127a4 <sgetsgent@@Base+0x15c>
   12694:	mov	r1, r9
   12698:	mov	r2, r5
   1269c:	strd	r4, [r6, #20]
   126a0:	b	126b0 <sgetsgent@@Base+0x68>
   126a4:	mov	r2, r5
   126a8:	mov	r1, r9
   126ac:	mov	r0, r4
   126b0:	bl	110b8 <strncpy@plt>
   126b4:	mov	r3, #0
   126b8:	strb	r3, [r4, r7]
   126bc:	mov	r1, #10
   126c0:	mov	r0, r4
   126c4:	bl	11130 <strrchr@plt>
   126c8:	mov	r5, #0
   126cc:	mov	r9, r5
   126d0:	add	r7, sp, #4
   126d4:	cmp	r0, #0
   126d8:	movne	r3, #0
   126dc:	strbne	r3, [r0]
   126e0:	str	r4, [r7, r5, lsl #2]
   126e4:	mov	r0, r4
   126e8:	mov	r1, #58	; 0x3a
   126ec:	bl	11088 <strchr@plt>
   126f0:	add	r5, r5, #1
   126f4:	cmp	r0, #0
   126f8:	beq	12724 <sgetsgent@@Base+0xdc>
   126fc:	adds	r3, r0, #1
   12700:	movne	r3, #1
   12704:	cmp	r5, #3
   12708:	movgt	r2, #0
   1270c:	andle	r2, r3, #1
   12710:	cmp	r2, #0
   12714:	strb	r9, [r0]
   12718:	add	r4, r0, #1
   1271c:	bne	126e0 <sgetsgent@@Base+0x98>
   12720:	b	12728 <sgetsgent@@Base+0xe0>
   12724:	mov	r3, r0
   12728:	cmp	r5, #4
   1272c:	moveq	r5, r3
   12730:	orrne	r5, r3, #1
   12734:	cmp	r5, #0
   12738:	bne	127a4 <sgetsgent@@Base+0x15c>
   1273c:	ldr	r1, [r6, #28]
   12740:	ldrd	r2, [sp, #4]
   12744:	cmp	r1, #0
   12748:	strd	r2, [r6, #4]
   1274c:	bne	127c4 <sgetsgent@@Base+0x17c>
   12750:	ldr	r3, [r6, #36]	; 0x24
   12754:	cmp	r3, #0
   12758:	bne	127ac <sgetsgent@@Base+0x164>
   1275c:	ldr	r2, [pc, #128]	; 127e4 <sgetsgent@@Base+0x19c>
   12760:	ldr	r0, [sp, #12]
   12764:	add	r1, r2, #4
   12768:	bl	12530 <__assert_fail@plt+0x1388>
   1276c:	ldr	r2, [pc, #116]	; 127e8 <sgetsgent@@Base+0x1a0>
   12770:	add	r1, r2, #4
   12774:	str	r0, [r6, #12]
   12778:	ldr	r0, [sp, #16]
   1277c:	bl	12530 <__assert_fail@plt+0x1388>
   12780:	ldr	r3, [pc, #100]	; 127ec <sgetsgent@@Base+0x1a4>
   12784:	str	r0, [r6, #16]
   12788:	ldr	r1, [sp, #20]
   1278c:	ldr	r2, [r8]
   12790:	mov	r0, r3
   12794:	cmp	r1, r2
   12798:	bne	127d8 <sgetsgent@@Base+0x190>
   1279c:	add	sp, sp, #28
   127a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   127a4:	mov	r3, #0
   127a8:	b	12788 <sgetsgent@@Base+0x140>
   127ac:	mov	r4, #0
   127b0:	ldr	r0, [r6, #40]	; 0x28
   127b4:	str	r4, [r6, #36]	; 0x24
   127b8:	bl	10f2c <free@plt>
   127bc:	str	r4, [r6, #40]	; 0x28
   127c0:	b	1275c <sgetsgent@@Base+0x114>
   127c4:	ldr	r0, [r6, #32]
   127c8:	str	r5, [r6, #28]
   127cc:	bl	10f2c <free@plt>
   127d0:	str	r5, [r6, #32]
   127d4:	b	12750 <sgetsgent@@Base+0x108>
   127d8:	bl	10fa4 <__stack_chk_fail@plt>
   127dc:	strdeq	r3, [r2], -r0
   127e0:	strheq	r4, [r2], -r4	; <UNPREDICTABLE>
   127e4:	ldrdeq	r4, [r2], -r0
   127e8:	ldrdeq	r4, [r2], -r8
   127ec:	strheq	r4, [r2], -r8

000127f0 <fgetsgent@@Base>:
   127f0:	push	{r4, r5, r6, r7, r8, lr}
   127f4:	mov	r8, r0
   127f8:	ldr	r6, [pc, #252]	; 128fc <fgetsgent@@Base+0x10c>
   127fc:	ldr	r3, [r6, #44]	; 0x2c
   12800:	cmp	r3, #0
   12804:	beq	128c0 <fgetsgent@@Base+0xd0>
   12808:	cmp	r8, #0
   1280c:	beq	128b8 <fgetsgent@@Base+0xc8>
   12810:	mov	r2, r8
   12814:	ldr	r1, [r6, #44]	; 0x2c
   12818:	ldr	r0, [r6, #48]	; 0x30
   1281c:	bl	12c44 <putsgent@@Base+0x2dc>
   12820:	ldr	r3, [r6, #48]	; 0x30
   12824:	cmp	r0, r3
   12828:	mov	r4, r0
   1282c:	beq	1288c <fgetsgent@@Base+0x9c>
   12830:	b	128b8 <fgetsgent@@Base+0xc8>
   12834:	bl	11070 <feof@plt>
   12838:	cmp	r0, #0
   1283c:	mov	r0, r4
   12840:	bne	128e0 <fgetsgent@@Base+0xf0>
   12844:	ldr	r4, [r6, #44]	; 0x2c
   12848:	lsl	r4, r4, #1
   1284c:	mov	r1, r4
   12850:	bl	10fbc <realloc@plt>
   12854:	subs	r7, r0, #0
   12858:	beq	128b8 <fgetsgent@@Base+0xc8>
   1285c:	str	r4, [r6, #44]	; 0x2c
   12860:	str	r7, [r6, #48]	; 0x30
   12864:	bl	1107c <strlen@plt>
   12868:	mov	r2, r8
   1286c:	sub	r1, r4, r0
   12870:	mov	r5, r0
   12874:	add	r0, r7, r0
   12878:	bl	12c44 <putsgent@@Base+0x2dc>
   1287c:	ldr	r4, [r6, #48]	; 0x30
   12880:	add	r5, r4, r5
   12884:	cmp	r0, r5
   12888:	bne	128b8 <fgetsgent@@Base+0xc8>
   1288c:	mov	r1, #10
   12890:	mov	r0, r4
   12894:	bl	11130 <strrchr@plt>
   12898:	subs	r3, r0, #0
   1289c:	mov	r0, r8
   128a0:	beq	12834 <fgetsgent@@Base+0x44>
   128a4:	mov	r2, #0
   128a8:	strb	r2, [r3]
   128ac:	mov	r0, r4
   128b0:	pop	{r4, r5, r6, r7, r8, lr}
   128b4:	b	12648 <sgetsgent@@Base>
   128b8:	mov	r0, #0
   128bc:	pop	{r4, r5, r6, r7, r8, pc}
   128c0:	mov	r0, #8192	; 0x2000
   128c4:	bl	1101c <malloc@plt>
   128c8:	cmp	r0, #0
   128cc:	str	r0, [r6, #48]	; 0x30
   128d0:	beq	128b8 <fgetsgent@@Base+0xc8>
   128d4:	mov	r3, #8192	; 0x2000
   128d8:	str	r3, [r6, #44]	; 0x2c
   128dc:	b	12808 <fgetsgent@@Base+0x18>
   128e0:	mov	r1, #10
   128e4:	bl	11130 <strrchr@plt>
   128e8:	subs	r3, r0, #0
   128ec:	bne	128a4 <fgetsgent@@Base+0xb4>
   128f0:	mov	r0, r4
   128f4:	pop	{r4, r5, r6, r7, r8, lr}
   128f8:	b	12648 <sgetsgent@@Base>
   128fc:	strheq	r4, [r2], -r4	; <UNPREDICTABLE>

00012900 <getsgent@@Base>:
   12900:	push	{r4, lr}
   12904:	ldr	r4, [pc, #32]	; 1292c <getsgent@@Base+0x2c>
   12908:	ldr	r0, [r4]
   1290c:	cmp	r0, #0
   12910:	beq	1291c <getsgent@@Base+0x1c>
   12914:	pop	{r4, lr}
   12918:	b	127f0 <fgetsgent@@Base>
   1291c:	bl	125e4 <setsgent@@Base>
   12920:	ldr	r0, [r4]
   12924:	pop	{r4, lr}
   12928:	b	127f0 <fgetsgent@@Base>
   1292c:	strheq	r4, [r2], -r4	; <UNPREDICTABLE>

00012930 <getsgnam@@Base>:
   12930:	push	{r4, r5, r6, lr}
   12934:	mov	r5, r0
   12938:	bl	125e4 <setsgent@@Base>
   1293c:	b	12950 <getsgnam@@Base+0x20>
   12940:	ldr	r1, [r4]
   12944:	bl	10ef0 <strcmp@plt>
   12948:	cmp	r0, #0
   1294c:	beq	12960 <getsgnam@@Base+0x30>
   12950:	bl	12900 <getsgent@@Base>
   12954:	subs	r4, r0, #0
   12958:	mov	r0, r5
   1295c:	bne	12940 <getsgnam@@Base+0x10>
   12960:	mov	r0, r4
   12964:	pop	{r4, r5, r6, pc}

00012968 <putsgent@@Base>:
   12968:	cmp	r0, #0
   1296c:	cmpne	r1, #0
   12970:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12974:	beq	12b0c <putsgent@@Base+0x1a4>
   12978:	ldr	fp, [r0]
   1297c:	mov	r5, r0
   12980:	mov	r0, fp
   12984:	mov	r7, r1
   12988:	bl	1107c <strlen@plt>
   1298c:	ldr	sl, [r5, #4]
   12990:	mov	r9, r0
   12994:	mov	r0, sl
   12998:	bl	1107c <strlen@plt>
   1299c:	ldr	r6, [r5, #8]
   129a0:	cmp	r6, #0
   129a4:	add	r0, r9, r0
   129a8:	add	r4, r0, #10
   129ac:	beq	129dc <putsgent@@Base+0x74>
   129b0:	ldr	r3, [r6]
   129b4:	cmp	r3, #0
   129b8:	beq	129dc <putsgent@@Base+0x74>
   129bc:	mov	r8, r6
   129c0:	mov	r0, r3
   129c4:	bl	1107c <strlen@plt>
   129c8:	ldr	r3, [r8, #4]!
   129cc:	cmp	r3, #0
   129d0:	add	r0, r0, #1
   129d4:	add	r4, r4, r0
   129d8:	bne	129c0 <putsgent@@Base+0x58>
   129dc:	ldr	r5, [r5, #12]
   129e0:	cmp	r5, #0
   129e4:	beq	12a14 <putsgent@@Base+0xac>
   129e8:	ldr	r3, [r5]
   129ec:	cmp	r3, #0
   129f0:	beq	12a14 <putsgent@@Base+0xac>
   129f4:	mov	r8, r5
   129f8:	mov	r0, r3
   129fc:	bl	1107c <strlen@plt>
   12a00:	ldr	r3, [r8, #4]!
   12a04:	cmp	r3, #0
   12a08:	add	r0, r0, #1
   12a0c:	add	r4, r4, r0
   12a10:	bne	129f8 <putsgent@@Base+0x90>
   12a14:	mov	r0, r4
   12a18:	bl	1101c <malloc@plt>
   12a1c:	subs	r8, r0, #0
   12a20:	beq	12b0c <putsgent@@Base+0x1a4>
   12a24:	mov	r1, fp
   12a28:	mov	r2, r9
   12a2c:	bl	10f50 <memcpy@plt>
   12a30:	mov	r4, #58	; 0x3a
   12a34:	add	r0, r8, r9
   12a38:	mov	r1, sl
   12a3c:	add	r0, r0, #1
   12a40:	strb	r4, [r8, r9]
   12a44:	bl	10f74 <stpcpy@plt>
   12a48:	mov	r3, r0
   12a4c:	add	r0, r0, #1
   12a50:	strb	r4, [r3]
   12a54:	ldr	r1, [r6]
   12a58:	cmp	r1, #0
   12a5c:	moveq	r3, r0
   12a60:	beq	12a94 <putsgent@@Base+0x12c>
   12a64:	mov	r4, r6
   12a68:	mov	r6, #44	; 0x2c
   12a6c:	b	12a78 <putsgent@@Base+0x110>
   12a70:	strb	r6, [r2]
   12a74:	ldr	r1, [r4]
   12a78:	bl	10f74 <stpcpy@plt>
   12a7c:	ldr	r3, [r4, #4]!
   12a80:	cmp	r3, #0
   12a84:	mov	r2, r0
   12a88:	mov	r3, r2
   12a8c:	add	r0, r0, #1
   12a90:	bne	12a70 <putsgent@@Base+0x108>
   12a94:	mov	r0, r3
   12a98:	mov	r3, #58	; 0x3a
   12a9c:	strb	r3, [r0], #1
   12aa0:	ldr	r1, [r5]
   12aa4:	cmp	r1, #0
   12aa8:	beq	12ad0 <putsgent@@Base+0x168>
   12aac:	mov	r4, r5
   12ab0:	mov	r5, #44	; 0x2c
   12ab4:	b	12ac0 <putsgent@@Base+0x158>
   12ab8:	strb	r5, [r0], #1
   12abc:	ldr	r1, [r4]
   12ac0:	bl	10f74 <stpcpy@plt>
   12ac4:	ldr	r3, [r4, #4]!
   12ac8:	cmp	r3, #0
   12acc:	bne	12ab8 <putsgent@@Base+0x150>
   12ad0:	mov	r3, #10
   12ad4:	mov	r5, #0
   12ad8:	strb	r3, [r0]
   12adc:	strb	r5, [r0, #1]
   12ae0:	mov	r1, r7
   12ae4:	mov	r0, r8
   12ae8:	bl	12cc0 <putsgent@@Base+0x358>
   12aec:	mov	r4, r0
   12af0:	cmn	r4, #1
   12af4:	mov	r0, r8
   12af8:	beq	12b14 <putsgent@@Base+0x1ac>
   12afc:	bl	10f2c <free@plt>
   12b00:	mov	r4, r5
   12b04:	mov	r0, r4
   12b08:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b0c:	mvn	r4, #0
   12b10:	b	12b04 <putsgent@@Base+0x19c>
   12b14:	bl	10f2c <free@plt>
   12b18:	b	12b04 <putsgent@@Base+0x19c>
   12b1c:	push	{r4, r5, r6, lr}
   12b20:	mov	r4, r0
   12b24:	ldr	r0, [r0]
   12b28:	bl	10f2c <free@plt>
   12b2c:	ldr	r5, [r4, #4]
   12b30:	cmp	r5, #0
   12b34:	beq	12b58 <putsgent@@Base+0x1f0>
   12b38:	mov	r0, r5
   12b3c:	bl	1107c <strlen@plt>
   12b40:	mov	r1, #0
   12b44:	mov	r2, r0
   12b48:	mov	r0, r5
   12b4c:	bl	110ac <memset@plt>
   12b50:	ldr	r0, [r4, #4]
   12b54:	bl	10f2c <free@plt>
   12b58:	ldr	r0, [r4, #16]
   12b5c:	bl	10f2c <free@plt>
   12b60:	ldr	r0, [r4, #20]
   12b64:	bl	10f2c <free@plt>
   12b68:	ldr	r0, [r4, #24]
   12b6c:	bl	10f2c <free@plt>
   12b70:	mov	r0, r4
   12b74:	pop	{r4, r5, r6, lr}
   12b78:	b	10f2c <free@plt>
   12b7c:	push	{r4, r5, r6, lr}
   12b80:	mov	r1, #1
   12b84:	mov	r5, r0
   12b88:	mov	r0, #28
   12b8c:	bl	10ecc <calloc@plt>
   12b90:	subs	r4, r0, #0
   12b94:	beq	12c18 <putsgent@@Base+0x2b0>
   12b98:	ldrd	r2, [r5, #8]
   12b9c:	ldr	r0, [r5]
   12ba0:	strd	r2, [r4, #8]
   12ba4:	bl	10f98 <strdup@plt>
   12ba8:	cmp	r0, #0
   12bac:	mov	r6, r0
   12bb0:	str	r0, [r4]
   12bb4:	beq	12c20 <putsgent@@Base+0x2b8>
   12bb8:	ldr	r0, [r5, #4]
   12bbc:	bl	10f98 <strdup@plt>
   12bc0:	cmp	r0, #0
   12bc4:	mov	r6, r0
   12bc8:	str	r0, [r4, #4]
   12bcc:	beq	12c20 <putsgent@@Base+0x2b8>
   12bd0:	ldr	r0, [r5, #16]
   12bd4:	bl	10f98 <strdup@plt>
   12bd8:	cmp	r0, #0
   12bdc:	mov	r6, r0
   12be0:	str	r0, [r4, #16]
   12be4:	beq	12c20 <putsgent@@Base+0x2b8>
   12be8:	ldr	r0, [r5, #20]
   12bec:	bl	10f98 <strdup@plt>
   12bf0:	cmp	r0, #0
   12bf4:	mov	r6, r0
   12bf8:	str	r0, [r4, #20]
   12bfc:	beq	12c20 <putsgent@@Base+0x2b8>
   12c00:	ldr	r0, [r5, #24]
   12c04:	bl	10f98 <strdup@plt>
   12c08:	cmp	r0, #0
   12c0c:	mov	r5, r0
   12c10:	str	r0, [r4, #24]
   12c14:	beq	12c34 <putsgent@@Base+0x2cc>
   12c18:	mov	r0, r4
   12c1c:	pop	{r4, r5, r6, pc}
   12c20:	mov	r0, r4
   12c24:	mov	r4, r6
   12c28:	bl	12b1c <putsgent@@Base+0x1b4>
   12c2c:	mov	r0, r4
   12c30:	pop	{r4, r5, r6, pc}
   12c34:	mov	r0, r4
   12c38:	bl	12b1c <putsgent@@Base+0x1b4>
   12c3c:	mov	r4, r5
   12c40:	b	12c18 <putsgent@@Base+0x2b0>
   12c44:	push	{r4, r5, r6, r7, r8, lr}
   12c48:	subs	r5, r1, #0
   12c4c:	mov	r8, r0
   12c50:	ble	12cb8 <putsgent@@Base+0x350>
   12c54:	mov	r6, r2
   12c58:	mov	r4, r0
   12c5c:	mov	r7, #0
   12c60:	mov	r1, r5
   12c64:	mov	r2, r6
   12c68:	mov	r0, r4
   12c6c:	bl	10f38 <fgets@plt>
   12c70:	mov	r1, #92	; 0x5c
   12c74:	cmp	r4, r0
   12c78:	bne	12cb0 <putsgent@@Base+0x348>
   12c7c:	bl	11130 <strrchr@plt>
   12c80:	cmp	r0, #0
   12c84:	sub	r4, r0, r4
   12c88:	sub	r5, r5, r4
   12c8c:	beq	12cb8 <putsgent@@Base+0x350>
   12c90:	ldrb	r3, [r0, #1]
   12c94:	mov	r4, r0
   12c98:	cmp	r3, #10
   12c9c:	bne	12cb8 <putsgent@@Base+0x350>
   12ca0:	cmp	r5, #0
   12ca4:	ble	12cb8 <putsgent@@Base+0x350>
   12ca8:	strb	r7, [r0]
   12cac:	b	12c60 <putsgent@@Base+0x2f8>
   12cb0:	cmp	r8, r4
   12cb4:	moveq	r8, #0
   12cb8:	mov	r0, r8
   12cbc:	pop	{r4, r5, r6, r7, r8, pc}
   12cc0:	push	{r4, r5, r6, lr}
   12cc4:	mov	r4, r0
   12cc8:	ldrb	r0, [r0]
   12ccc:	cmp	r0, #0
   12cd0:	beq	12cf4 <putsgent@@Base+0x38c>
   12cd4:	mov	r5, r1
   12cd8:	mov	r1, r5
   12cdc:	bl	10ff8 <_IO_putc@plt>
   12ce0:	cmn	r0, #1
   12ce4:	popeq	{r4, r5, r6, pc}
   12ce8:	ldrb	r0, [r4, #1]!
   12cec:	cmp	r0, #0
   12cf0:	bne	12cd8 <putsgent@@Base+0x370>
   12cf4:	mov	r0, #0
   12cf8:	pop	{r4, r5, r6, pc}
   12cfc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d00:	mov	r7, r0
   12d04:	ldr	r6, [pc, #72]	; 12d54 <putsgent@@Base+0x3ec>
   12d08:	ldr	r5, [pc, #72]	; 12d58 <putsgent@@Base+0x3f0>
   12d0c:	add	r6, pc, r6
   12d10:	add	r5, pc, r5
   12d14:	sub	r6, r6, r5
   12d18:	mov	r8, r1
   12d1c:	mov	r9, r2
   12d20:	bl	10eac <calloc@plt-0x20>
   12d24:	asrs	r6, r6, #2
   12d28:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d2c:	mov	r4, #0
   12d30:	add	r4, r4, #1
   12d34:	ldr	r3, [r5], #4
   12d38:	mov	r2, r9
   12d3c:	mov	r1, r8
   12d40:	mov	r0, r7
   12d44:	blx	r3
   12d48:	cmp	r6, r4
   12d4c:	bne	12d30 <putsgent@@Base+0x3c8>
   12d50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d54:	ldrdeq	r1, [r1], -r8
   12d58:	ldrdeq	r1, [r1], -r0
   12d5c:	bx	lr

Disassembly of section .fini:

00012d60 <.fini>:
   12d60:	push	{r3, lr}
   12d64:	pop	{r3, pc}
