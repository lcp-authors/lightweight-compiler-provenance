
raspbian-preinstalled/newgrp:     file format elf32-littlearm


Disassembly of section .init:

00011460 <_init@@Base>:
   11460:	push	{r3, lr}
   11464:	bl	12b30 <__assert_fail@plt+0x12c0>
   11468:	pop	{r3, pc}

Disassembly of section .plt:

0001146c <calloc@plt-0x14>:
   1146c:	push	{lr}		; (str lr, [sp, #-4]!)
   11470:	ldr	lr, [pc, #4]	; 1147c <_init@@Base+0x1c>
   11474:	add	lr, pc, lr
   11478:	ldr	pc, [lr, #8]!
   1147c:	andeq	r5, r1, r0, lsr #20

00011480 <calloc@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #86016	; 0x15000
   11488:	ldr	pc, [ip, #2592]!	; 0xa20

0001148c <endgrent@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #86016	; 0x15000
   11494:	ldr	pc, [ip, #2584]!	; 0xa18

00011498 <getpwuid_r@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #86016	; 0x15000
   114a0:	ldr	pc, [ip, #2576]!	; 0xa10

000114a4 <strcmp@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #86016	; 0x15000
   114ac:	ldr	pc, [ip, #2568]!	; 0xa08

000114b0 <getlogin@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #86016	; 0x15000
   114b8:	ldr	pc, [ip, #2560]!	; 0xa00

000114bc <strtol@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #86016	; 0x15000
   114c4:	ldr	pc, [ip, #2552]!	; 0x9f8

000114c8 <strcspn@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #86016	; 0x15000
   114d0:	ldr	pc, [ip, #2544]!	; 0x9f0

000114d4 <getuid@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #86016	; 0x15000
   114dc:	ldr	pc, [ip, #2536]!	; 0x9e8

000114e0 <free@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #86016	; 0x15000
   114e8:	ldr	pc, [ip, #2528]!	; 0x9e0

000114ec <fgets@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #86016	; 0x15000
   114f4:	ldr	pc, [ip, #2520]!	; 0x9d8

000114f8 <ferror@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #86016	; 0x15000
   11500:	ldr	pc, [ip, #2512]!	; 0x9d0

00011504 <memcpy@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #86016	; 0x15000
   1150c:	ldr	pc, [ip, #2504]!	; 0x9c8

00011510 <signal@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #86016	; 0x15000
   11518:	ldr	pc, [ip, #2496]!	; 0x9c0

0001151c <sleep@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #86016	; 0x15000
   11524:	ldr	pc, [ip, #2488]!	; 0x9b8

00011528 <stpcpy@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #86016	; 0x15000
   11530:	ldr	pc, [ip, #2480]!	; 0x9b0

00011534 <dcgettext@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #86016	; 0x15000
   1153c:	ldr	pc, [ip, #2472]!	; 0x9a8

00011540 <__strncpy_chk@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #86016	; 0x15000
   11548:	ldr	pc, [ip, #2464]!	; 0x9a0

0001154c <strdup@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #86016	; 0x15000
   11554:	ldr	pc, [ip, #2456]!	; 0x998

00011558 <__stack_chk_fail@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #86016	; 0x15000
   11560:	ldr	pc, [ip, #2448]!	; 0x990

00011564 <rewind@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #86016	; 0x15000
   1156c:	ldr	pc, [ip, #2440]!	; 0x988

00011570 <sysconf@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #86016	; 0x15000
   11578:	ldr	pc, [ip, #2432]!	; 0x980

0001157c <realloc@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #86016	; 0x15000
   11584:	ldr	pc, [ip, #2424]!	; 0x978

00011588 <audit_open@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #86016	; 0x15000
   11590:	ldr	pc, [ip, #2416]!	; 0x970

00011594 <textdomain@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #86016	; 0x15000
   1159c:	ldr	pc, [ip, #2408]!	; 0x968

000115a0 <chdir@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #86016	; 0x15000
   115a8:	ldr	pc, [ip, #2400]!	; 0x960

000115ac <strcasecmp@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #86016	; 0x15000
   115b4:	ldr	pc, [ip, #2392]!	; 0x958

000115b8 <perror@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #86016	; 0x15000
   115c0:	ldr	pc, [ip, #2384]!	; 0x950

000115c4 <setgroups@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #86016	; 0x15000
   115cc:	ldr	pc, [ip, #2376]!	; 0x948

000115d0 <_IO_putc@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #86016	; 0x15000
   115d8:	ldr	pc, [ip, #2368]!	; 0x940

000115dc <waitpid@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #86016	; 0x15000
   115e4:	ldr	pc, [ip, #2360]!	; 0x938

000115e8 <getenv@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #86016	; 0x15000
   115f0:	ldr	pc, [ip, #2352]!	; 0x930

000115f4 <setgid@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #86016	; 0x15000
   115fc:	ldr	pc, [ip, #2344]!	; 0x928

00011600 <malloc@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #86016	; 0x15000
   11608:	ldr	pc, [ip, #2336]!	; 0x920

0001160c <__libc_start_main@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #86016	; 0x15000
   11614:	ldr	pc, [ip, #2328]!	; 0x918

00011618 <strerror@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #86016	; 0x15000
   11620:	ldr	pc, [ip, #2320]!	; 0x910

00011624 <closelog@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #86016	; 0x15000
   1162c:	ldr	pc, [ip, #2312]!	; 0x908

00011630 <__gmon_start__@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #86016	; 0x15000
   11638:	ldr	pc, [ip, #2304]!	; 0x900

0001163c <kill@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #86016	; 0x15000
   11644:	ldr	pc, [ip, #2296]!	; 0x8f8

00011648 <__ctype_b_loc@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #86016	; 0x15000
   11650:	ldr	pc, [ip, #2288]!	; 0x8f0

00011654 <getpid@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #86016	; 0x15000
   1165c:	ldr	pc, [ip, #2280]!	; 0x8e8

00011660 <exit@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #86016	; 0x15000
   11668:	ldr	pc, [ip, #2272]!	; 0x8e0

0001166c <feof@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #86016	; 0x15000
   11674:	ldr	pc, [ip, #2264]!	; 0x8d8

00011678 <strtoul@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #86016	; 0x15000
   11680:	ldr	pc, [ip, #2256]!	; 0x8d0

00011684 <ttyname@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #86016	; 0x15000
   1168c:	ldr	pc, [ip, #2248]!	; 0x8c8

00011690 <strlen@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #86016	; 0x15000
   11698:	ldr	pc, [ip, #2240]!	; 0x8c0

0001169c <strchr@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #86016	; 0x15000
   116a4:	ldr	pc, [ip, #2232]!	; 0x8b8

000116a8 <getpass@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #86016	; 0x15000
   116b0:	ldr	pc, [ip, #2224]!	; 0x8b0

000116b4 <getpwnam_r@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #86016	; 0x15000
   116bc:	ldr	pc, [ip, #2216]!	; 0x8a8

000116c0 <getgrnam_r@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #86016	; 0x15000
   116c8:	ldr	pc, [ip, #2208]!	; 0x8a0

000116cc <__errno_location@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #86016	; 0x15000
   116d4:	ldr	pc, [ip, #2200]!	; 0x898

000116d8 <getgid@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #86016	; 0x15000
   116e0:	ldr	pc, [ip, #2192]!	; 0x890

000116e4 <memset@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #86016	; 0x15000
   116ec:	ldr	pc, [ip, #2184]!	; 0x888

000116f0 <strncpy@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #86016	; 0x15000
   116f8:	ldr	pc, [ip, #2176]!	; 0x880

000116fc <setgrent@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #86016	; 0x15000
   11704:	ldr	pc, [ip, #2168]!	; 0x878

00011708 <getgrent@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #86016	; 0x15000
   11710:	ldr	pc, [ip, #2160]!	; 0x870

00011714 <__printf_chk@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #86016	; 0x15000
   1171c:	ldr	pc, [ip, #2152]!	; 0x868

00011720 <endspent@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #86016	; 0x15000
   11728:	ldr	pc, [ip, #2144]!	; 0x860

0001172c <getgrgid_r@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #86016	; 0x15000
   11734:	ldr	pc, [ip, #2136]!	; 0x858

00011738 <__fprintf_chk@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #86016	; 0x15000
   11740:	ldr	pc, [ip, #2128]!	; 0x850

00011744 <access@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #86016	; 0x15000
   1174c:	ldr	pc, [ip, #2120]!	; 0x848

00011750 <fclose@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #86016	; 0x15000
   11758:	ldr	pc, [ip, #2112]!	; 0x840

0001175c <__syslog_chk@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #86016	; 0x15000
   11764:	ldr	pc, [ip, #2104]!	; 0x838

00011768 <setlocale@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #86016	; 0x15000
   11770:	ldr	pc, [ip, #2096]!	; 0x830

00011774 <fork@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #86016	; 0x15000
   1177c:	ldr	pc, [ip, #2088]!	; 0x828

00011780 <execle@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #86016	; 0x15000
   11788:	ldr	pc, [ip, #2080]!	; 0x820

0001178c <endpwent@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #86016	; 0x15000
   11794:	ldr	pc, [ip, #2072]!	; 0x818

00011798 <execl@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #86016	; 0x15000
   117a0:	ldr	pc, [ip, #2064]!	; 0x810

000117a4 <strrchr@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #86016	; 0x15000
   117ac:	ldr	pc, [ip, #2056]!	; 0x808

000117b0 <crypt@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #86016	; 0x15000
   117b8:	ldr	pc, [ip, #2048]!	; 0x800

000117bc <setuid@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #86016	; 0x15000
   117c4:	ldr	pc, [ip, #2040]!	; 0x7f8

000117c8 <openlog@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #86016	; 0x15000
   117d0:	ldr	pc, [ip, #2032]!	; 0x7f0

000117d4 <getgroups@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #86016	; 0x15000
   117dc:	ldr	pc, [ip, #2024]!	; 0x7e8

000117e0 <fopen64@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #86016	; 0x15000
   117e8:	ldr	pc, [ip, #2016]!	; 0x7e0

000117ec <bindtextdomain@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #86016	; 0x15000
   117f4:	ldr	pc, [ip, #2008]!	; 0x7d8

000117f8 <audit_log_user_message@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #86016	; 0x15000
   11800:	ldr	pc, [ip, #2000]!	; 0x7d0

00011804 <audit_log_acct_message@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #86016	; 0x15000
   1180c:	ldr	pc, [ip, #1992]!	; 0x7c8

00011810 <getspnam_r@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #86016	; 0x15000
   11818:	ldr	pc, [ip, #1984]!	; 0x7c0

0001181c <fputs@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #86016	; 0x15000
   11824:	ldr	pc, [ip, #1976]!	; 0x7b8

00011828 <strncmp@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #86016	; 0x15000
   11830:	ldr	pc, [ip, #1968]!	; 0x7b0

00011834 <abort@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #86016	; 0x15000
   1183c:	ldr	pc, [ip, #1960]!	; 0x7a8

00011840 <getgrgid@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #86016	; 0x15000
   11848:	ldr	pc, [ip, #1952]!	; 0x7a0

0001184c <getgrnam@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #86016	; 0x15000
   11854:	ldr	pc, [ip, #1944]!	; 0x798

00011858 <__snprintf_chk@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #86016	; 0x15000
   11860:	ldr	pc, [ip, #1936]!	; 0x790

00011864 <strspn@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #86016	; 0x15000
   1186c:	ldr	pc, [ip, #1928]!	; 0x788

00011870 <__assert_fail@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #86016	; 0x15000
   11878:	ldr	pc, [ip, #1920]!	; 0x780

Disassembly of section .text:

0001187c <setsgent@@Base-0x3310>:
   1187c:	ldr	r3, [pc, #80]	; 118d4 <__assert_fail@plt+0x64>
   11880:	push	{lr}		; (str lr, [sp, #-4]!)
   11884:	mov	r2, #5
   11888:	sub	sp, sp, #12
   1188c:	ldr	r1, [pc, #68]	; 118d8 <__assert_fail@plt+0x68>
   11890:	mov	r0, #0
   11894:	ldr	r4, [r3]
   11898:	bl	11534 <dcgettext@plt>
   1189c:	ldr	r3, [pc, #56]	; 118dc <__assert_fail@plt+0x6c>
   118a0:	ldr	r6, [r3]
   118a4:	mov	r5, r0
   118a8:	bl	116cc <__errno_location@plt>
   118ac:	ldr	r0, [r0]
   118b0:	bl	11618 <strerror@plt>
   118b4:	mov	r3, r6
   118b8:	mov	r2, r5
   118bc:	mov	r1, #1
   118c0:	str	r0, [sp]
   118c4:	mov	r0, r4
   118c8:	bl	11738 <__fprintf_chk@plt>
   118cc:	mov	r0, #13
   118d0:	bl	11660 <exit@plt>
   118d4:	ldrdeq	r7, [r2], -r0
   118d8:	ldrdeq	r5, [r1], -r0
   118dc:	strdeq	r7, [r2], -r4
   118e0:	ldr	r2, [pc, #4052]	; 128bc <__assert_fail@plt+0x104c>
   118e4:	ldr	r3, [pc, #4052]	; 128c0 <__assert_fail@plt+0x1050>
   118e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118ec:	sub	sp, sp, #60	; 0x3c
   118f0:	ldr	r2, [r2]
   118f4:	ldr	r3, [r3]
   118f8:	str	r2, [sp, #52]	; 0x34
   118fc:	str	r3, [sp, #24]
   11900:	mov	sl, r1
   11904:	mov	fp, r0
   11908:	bl	12c28 <__assert_fail@plt+0x13b8>
   1190c:	ldr	r1, [pc, #4016]	; 128c4 <__assert_fail@plt+0x1054>
   11910:	mov	r0, #6
   11914:	bl	11768 <setlocale@plt>
   11918:	mov	r5, sl
   1191c:	ldr	r1, [pc, #4004]	; 128c8 <__assert_fail@plt+0x1058>
   11920:	ldr	r0, [pc, #4004]	; 128cc <__assert_fail@plt+0x105c>
   11924:	bl	117ec <bindtextdomain@plt>
   11928:	ldr	r0, [pc, #3996]	; 128cc <__assert_fail@plt+0x105c>
   1192c:	bl	11594 <textdomain@plt>
   11930:	ldr	r0, [r5], #4
   11934:	bl	12d34 <__assert_fail@plt+0x14c4>
   11938:	ldr	r9, [pc, #3984]	; 128d0 <__assert_fail@plt+0x1060>
   1193c:	ldr	r1, [pc, #3984]	; 128d4 <__assert_fail@plt+0x1064>
   11940:	ldr	r4, [pc, #3984]	; 128d8 <__assert_fail@plt+0x1068>
   11944:	str	r0, [r9]
   11948:	bl	114a4 <strcmp@plt>
   1194c:	ldr	r3, [pc, #3968]	; 128d4 <__assert_fail@plt+0x1064>
   11950:	ldr	ip, [pc, #3972]	; 128dc <__assert_fail@plt+0x106c>
   11954:	mov	r1, #1
   11958:	mov	r2, #80	; 0x50
   1195c:	cmp	r0, #0
   11960:	moveq	r0, r3
   11964:	movne	r3, #0
   11968:	moveq	r3, r1
   1196c:	movne	r0, ip
   11970:	strb	r3, [r4]
   11974:	bl	117c8 <openlog@plt>
   11978:	bl	116d8 <getgid@plt>
   1197c:	bl	12d54 <__assert_fail@plt+0x14e4>
   11980:	bl	13610 <__assert_fail@plt+0x1da0>
   11984:	subs	r8, r0, #0
   11988:	beq	11f64 <__assert_fail@plt+0x6f4>
   1198c:	ldrb	r3, [r4]
   11990:	sub	r7, fp, #1
   11994:	cmp	r7, #0
   11998:	ldr	r6, [r8]
   1199c:	str	r3, [sp, #20]
   119a0:	ble	11aa4 <__assert_fail@plt+0x234>
   119a4:	ldr	r3, [sl, #4]
   119a8:	ldr	r1, [pc, #3888]	; 128e0 <__assert_fail@plt+0x1070>
   119ac:	mov	r0, r3
   119b0:	str	r3, [sp, #28]
   119b4:	bl	114a4 <strcmp@plt>
   119b8:	cmp	r0, #0
   119bc:	bne	11a38 <__assert_fail@plt+0x1c8>
   119c0:	ldr	r3, [sp, #20]
   119c4:	sub	r7, fp, #2
   119c8:	cmp	r3, #0
   119cc:	add	r5, sl, #8
   119d0:	bne	1200c <__assert_fail@plt+0x79c>
   119d4:	cmp	r7, #0
   119d8:	ble	11d10 <__assert_fail@plt+0x4a0>
   119dc:	mov	r3, #1
   119e0:	str	r3, [sp, #20]
   119e4:	ldr	sl, [r5]
   119e8:	ldrb	r3, [sl]
   119ec:	cmp	r3, #45	; 0x2d
   119f0:	beq	11d10 <__assert_fail@plt+0x4a0>
   119f4:	subs	r7, r7, #1
   119f8:	beq	11ac4 <__assert_fail@plt+0x254>
   119fc:	ldr	r0, [r5, #4]
   11a00:	cmp	r7, #1
   11a04:	str	r0, [sp, #28]
   11a08:	streq	r7, [sp, #32]
   11a0c:	beq	11ad0 <__assert_fail@plt+0x260>
   11a10:	ldr	r1, [pc, #3788]	; 128e4 <__assert_fail@plt+0x1074>
   11a14:	bl	114a4 <strcmp@plt>
   11a18:	cmp	r0, #0
   11a1c:	movne	r3, #1
   11a20:	strne	r3, [sp, #32]
   11a24:	ldreq	r3, [r5, #8]
   11a28:	streq	r3, [sp, #28]
   11a2c:	moveq	r3, #1
   11a30:	streq	r3, [sp, #32]
   11a34:	b	11ad0 <__assert_fail@plt+0x260>
   11a38:	ldr	r3, [sp, #28]
   11a3c:	ldr	r1, [pc, #3748]	; 128e8 <__assert_fail@plt+0x1078>
   11a40:	mov	r0, r3
   11a44:	bl	114a4 <strcmp@plt>
   11a48:	cmp	r0, #0
   11a4c:	beq	119c0 <__assert_fail@plt+0x150>
   11a50:	ldr	r3, [sp, #20]
   11a54:	cmp	r3, #0
   11a58:	beq	119e4 <__assert_fail@plt+0x174>
   11a5c:	mov	r3, #0
   11a60:	str	r3, [sp, #20]
   11a64:	ldr	r3, [r5]
   11a68:	ldrb	r3, [r3]
   11a6c:	cmp	r3, #45	; 0x2d
   11a70:	bne	11ab8 <__assert_fail@plt+0x248>
   11a74:	bl	12be4 <__assert_fail@plt+0x1374>
   11a78:	bl	11624 <closelog@plt>
   11a7c:	ldr	r4, [r9]
   11a80:	bl	114d4 <getuid@plt>
   11a84:	mov	r3, #0
   11a88:	mov	r1, r4
   11a8c:	str	r3, [sp, #4]
   11a90:	ldr	r2, [pc, #3668]	; 128ec <__assert_fail@plt+0x107c>
   11a94:	str	r0, [sp]
   11a98:	ldr	r0, [pc, #3664]	; 128f0 <__assert_fail@plt+0x1080>
   11a9c:	bl	12c90 <__assert_fail@plt+0x1420>
   11aa0:	b	11bf0 <__assert_fail@plt+0x380>
   11aa4:	ldr	r3, [sp, #20]
   11aa8:	cmp	r3, #0
   11aac:	movne	r3, #0
   11ab0:	strne	r3, [sp, #20]
   11ab4:	beq	11d10 <__assert_fail@plt+0x4a0>
   11ab8:	ldr	sl, [r5]
   11abc:	cmp	sl, #0
   11ac0:	beq	11bf8 <__assert_fail@plt+0x388>
   11ac4:	mov	r3, #0
   11ac8:	str	r3, [sp, #28]
   11acc:	str	r3, [sp, #32]
   11ad0:	mov	r5, #16
   11ad4:	b	11af4 <__assert_fail@plt+0x284>
   11ad8:	bl	116cc <__errno_location@plt>
   11adc:	ldr	r3, [r0]
   11ae0:	cmp	r3, #22
   11ae4:	bne	11ba0 <__assert_fail@plt+0x330>
   11ae8:	mov	r0, r7
   11aec:	bl	114e0 <free@plt>
   11af0:	lsl	r5, r5, #1
   11af4:	lsl	r0, r5, #2
   11af8:	bl	13dec <__assert_fail@plt+0x257c>
   11afc:	mov	r7, r0
   11b00:	mov	r1, r0
   11b04:	mov	r0, r5
   11b08:	str	r7, [r4, #4]
   11b0c:	bl	117d4 <getgroups@plt>
   11b10:	cmp	r5, r0
   11b14:	str	r0, [r4, #8]
   11b18:	ble	11ae8 <__assert_fail@plt+0x278>
   11b1c:	cmn	r0, #1
   11b20:	beq	11ad8 <__assert_fail@plt+0x268>
   11b24:	cmp	r0, #0
   11b28:	blt	11ba0 <__assert_fail@plt+0x330>
   11b2c:	mov	r0, sl
   11b30:	bl	1184c <getgrnam@plt>
   11b34:	subs	r5, r0, #0
   11b38:	beq	1214c <__assert_fail@plt+0x8dc>
   11b3c:	ldr	r7, [r5, #8]
   11b40:	bl	116fc <setgrent@plt>
   11b44:	bl	11708 <getgrent@plt>
   11b48:	subs	r5, r0, #0
   11b4c:	beq	11d1c <__assert_fail@plt+0x4ac>
   11b50:	ldr	r3, [r5, #8]
   11b54:	cmp	r7, r3
   11b58:	bne	11b44 <__assert_fail@plt+0x2d4>
   11b5c:	ldr	fp, [r5, #12]
   11b60:	ldr	r3, [fp]
   11b64:	cmp	r3, #0
   11b68:	bne	11b78 <__assert_fail@plt+0x308>
   11b6c:	b	11b44 <__assert_fail@plt+0x2d4>
   11b70:	cmp	r0, #0
   11b74:	beq	11b98 <__assert_fail@plt+0x328>
   11b78:	mov	r0, r3
   11b7c:	mov	r1, r6
   11b80:	bl	114a4 <strcmp@plt>
   11b84:	ldr	r3, [fp, #4]!
   11b88:	cmp	r3, #0
   11b8c:	bne	11b70 <__assert_fail@plt+0x300>
   11b90:	cmp	r0, #0
   11b94:	bne	11b44 <__assert_fail@plt+0x2d4>
   11b98:	bl	1148c <endgrent@plt>
   11b9c:	b	11d30 <__assert_fail@plt+0x4c0>
   11ba0:	ldr	r0, [pc, #3404]	; 128f4 <__assert_fail@plt+0x1084>
   11ba4:	bl	115b8 <perror@plt>
   11ba8:	cmp	sl, #0
   11bac:	beq	11ce8 <__assert_fail@plt+0x478>
   11bb0:	ldr	r2, [pc, #3392]	; 128f8 <__assert_fail@plt+0x1088>
   11bb4:	mov	r3, #80	; 0x50
   11bb8:	mov	r1, r3
   11bbc:	stm	sp, {r2, sl}
   11bc0:	ldr	r0, [pc, #3380]	; 128fc <__assert_fail@plt+0x108c>
   11bc4:	mov	r2, #1
   11bc8:	bl	11858 <__snprintf_chk@plt>
   11bcc:	ldr	r4, [r9]
   11bd0:	bl	114d4 <getuid@plt>
   11bd4:	mov	r3, #0
   11bd8:	mov	r1, r4
   11bdc:	str	r3, [sp, #4]
   11be0:	ldr	r2, [pc, #3348]	; 128fc <__assert_fail@plt+0x108c>
   11be4:	str	r0, [sp]
   11be8:	ldr	r0, [pc, #3328]	; 128f0 <__assert_fail@plt+0x1080>
   11bec:	bl	12c90 <__assert_fail@plt+0x1420>
   11bf0:	mov	r0, #1
   11bf4:	bl	11660 <exit@plt>
   11bf8:	ldr	r0, [r8, #12]
   11bfc:	bl	13b6c <__assert_fail@plt+0x22fc>
   11c00:	subs	r5, r0, #0
   11c04:	beq	125c8 <__assert_fail@plt+0xd58>
   11c08:	str	sl, [sp, #28]
   11c0c:	str	sl, [sp, #32]
   11c10:	ldr	sl, [r5]
   11c14:	b	11ad0 <__assert_fail@plt+0x260>
   11c18:	ldr	r2, [pc, #3296]	; 12900 <__assert_fail@plt+0x1090>
   11c1c:	mov	r3, #80	; 0x50
   11c20:	mov	r1, r3
   11c24:	stm	sp, {r2, fp}
   11c28:	ldr	r0, [pc, #3276]	; 128fc <__assert_fail@plt+0x108c>
   11c2c:	mov	r2, #1
   11c30:	bl	11858 <__snprintf_chk@plt>
   11c34:	ldr	r5, [r9]
   11c38:	bl	114d4 <getuid@plt>
   11c3c:	mov	r4, #0
   11c40:	mov	r1, r5
   11c44:	mov	r3, r4
   11c48:	ldr	r2, [pc, #3244]	; 128fc <__assert_fail@plt+0x108c>
   11c4c:	str	r4, [sp, #4]
   11c50:	str	r0, [sp]
   11c54:	ldr	r0, [pc, #3240]	; 12904 <__assert_fail@plt+0x1094>
   11c58:	bl	12c90 <__assert_fail@plt+0x1420>
   11c5c:	mov	r1, r4
   11c60:	mov	r0, #6
   11c64:	bl	11768 <setlocale@plt>
   11c68:	cmp	r0, r4
   11c6c:	beq	127cc <__assert_fail@plt+0xf5c>
   11c70:	bl	1154c <strdup@plt>
   11c74:	subs	r4, r0, #0
   11c78:	beq	127cc <__assert_fail@plt+0xf5c>
   11c7c:	ldr	r1, [pc, #3344]	; 12994 <__assert_fail@plt+0x1124>
   11c80:	mov	r0, #6
   11c84:	bl	11768 <setlocale@plt>
   11c88:	ldr	r2, [r8]
   11c8c:	mov	r3, sl
   11c90:	str	r2, [sp]
   11c94:	mov	r1, #1
   11c98:	ldr	r2, [pc, #3176]	; 12908 <__assert_fail@plt+0x1098>
   11c9c:	mov	r0, #6
   11ca0:	bl	1175c <__syslog_chk@plt>
   11ca4:	mov	r1, r4
   11ca8:	mov	r0, #6
   11cac:	bl	11768 <setlocale@plt>
   11cb0:	mov	r0, r4
   11cb4:	bl	114e0 <free@plt>
   11cb8:	mov	r0, #1
   11cbc:	bl	1151c <sleep@plt>
   11cc0:	ldr	r1, [pc, #3140]	; 1290c <__assert_fail@plt+0x109c>
   11cc4:	mov	r2, #5
   11cc8:	mov	r0, #0
   11ccc:	bl	11534 <dcgettext@plt>
   11cd0:	ldr	r3, [pc, #3128]	; 12910 <__assert_fail@plt+0x10a0>
   11cd4:	ldr	r1, [r3]
   11cd8:	bl	1181c <fputs@plt>
   11cdc:	bl	11624 <closelog@plt>
   11ce0:	cmp	sl, #0
   11ce4:	bne	11bb0 <__assert_fail@plt+0x340>
   11ce8:	ldr	r4, [r9]
   11cec:	bl	114d4 <getuid@plt>
   11cf0:	mov	r1, r4
   11cf4:	str	sl, [sp, #4]
   11cf8:	mov	r3, sl
   11cfc:	ldr	r2, [pc, #3048]	; 128ec <__assert_fail@plt+0x107c>
   11d00:	str	r0, [sp]
   11d04:	ldr	r0, [pc, #3044]	; 128f0 <__assert_fail@plt+0x1080>
   11d08:	bl	12c90 <__assert_fail@plt+0x1420>
   11d0c:	b	11bf0 <__assert_fail@plt+0x380>
   11d10:	bl	12be4 <__assert_fail@plt+0x1374>
   11d14:	bl	11624 <closelog@plt>
   11d18:	b	11bf0 <__assert_fail@plt+0x380>
   11d1c:	bl	1148c <endgrent@plt>
   11d20:	mov	r0, sl
   11d24:	bl	13a2c <__assert_fail@plt+0x21bc>
   11d28:	subs	r5, r0, #0
   11d2c:	beq	12578 <__assert_fail@plt+0xd08>
   11d30:	mov	r0, sl
   11d34:	bl	14ed8 <getsgnam@@Base>
   11d38:	cmp	r0, #0
   11d3c:	ldrne	r2, [r0, #4]
   11d40:	ldrne	r3, [r0, #12]
   11d44:	strne	r2, [r5, #4]
   11d48:	strne	r3, [r5, #12]
   11d4c:	ldr	r2, [r5, #8]
   11d50:	ldr	r3, [r8, #12]
   11d54:	cmp	r2, r3
   11d58:	moveq	r7, #0
   11d5c:	beq	11d74 <__assert_fail@plt+0x504>
   11d60:	ldr	r1, [r8]
   11d64:	ldr	r0, [r5, #12]
   11d68:	bl	134e0 <__assert_fail@plt+0x1c70>
   11d6c:	eor	r0, r0, #1
   11d70:	uxtb	r7, r0
   11d74:	ldr	r0, [r8]
   11d78:	bl	13cac <__assert_fail@plt+0x243c>
   11d7c:	cmp	r0, #0
   11d80:	ldrne	r3, [r0, #4]
   11d84:	strne	r3, [r8, #4]
   11d88:	ldr	r3, [r8, #4]
   11d8c:	ldrb	r3, [r3]
   11d90:	cmp	r3, #0
   11d94:	bne	11f48 <__assert_fail@plt+0x6d8>
   11d98:	ldr	r3, [r5, #4]
   11d9c:	ldrb	r3, [r3]
   11da0:	cmp	r3, #0
   11da4:	beq	11f48 <__assert_fail@plt+0x6d8>
   11da8:	bl	114d4 <getuid@plt>
   11dac:	cmp	r0, #0
   11db0:	beq	11e60 <__assert_fail@plt+0x5f0>
   11db4:	mov	r2, #5
   11db8:	ldr	r1, [pc, #2900]	; 12914 <__assert_fail@plt+0x10a4>
   11dbc:	mov	r0, #0
   11dc0:	bl	11534 <dcgettext@plt>
   11dc4:	bl	116a8 <getpass@plt>
   11dc8:	subs	fp, r0, #0
   11dcc:	beq	11cdc <__assert_fail@plt+0x46c>
   11dd0:	ldr	r1, [r5, #4]
   11dd4:	bl	13e34 <__assert_fail@plt+0x25c4>
   11dd8:	mov	r7, r0
   11ddc:	mov	r0, fp
   11de0:	bl	11690 <strlen@plt>
   11de4:	mov	r1, #0
   11de8:	mov	r2, r0
   11dec:	mov	r0, fp
   11df0:	bl	116e4 <memset@plt>
   11df4:	cmp	r7, #0
   11df8:	beq	127ec <__assert_fail@plt+0xf7c>
   11dfc:	ldmib	r5, {r1, fp}
   11e00:	ldrb	r3, [r1]
   11e04:	cmp	r3, #0
   11e08:	beq	11c18 <__assert_fail@plt+0x3a8>
   11e0c:	mov	r0, r7
   11e10:	bl	114a4 <strcmp@plt>
   11e14:	subs	r7, r0, #0
   11e18:	bne	11c18 <__assert_fail@plt+0x3a8>
   11e1c:	ldr	r2, [pc, #2780]	; 12900 <__assert_fail@plt+0x1090>
   11e20:	mov	r3, #80	; 0x50
   11e24:	mov	r1, r3
   11e28:	stm	sp, {r2, fp}
   11e2c:	ldr	r0, [pc, #2760]	; 128fc <__assert_fail@plt+0x108c>
   11e30:	mov	r2, #1
   11e34:	bl	11858 <__snprintf_chk@plt>
   11e38:	ldr	fp, [r9]
   11e3c:	bl	114d4 <getuid@plt>
   11e40:	mov	r2, #1
   11e44:	str	r2, [sp, #4]
   11e48:	mov	r1, fp
   11e4c:	mov	r3, r7
   11e50:	ldr	r2, [pc, #2724]	; 128fc <__assert_fail@plt+0x108c>
   11e54:	str	r0, [sp]
   11e58:	ldr	r0, [pc, #2724]	; 12904 <__assert_fail@plt+0x1094>
   11e5c:	bl	12c90 <__assert_fail@plt+0x1420>
   11e60:	ldr	r0, [pc, #2736]	; 12918 <__assert_fail@plt+0x10a8>
   11e64:	bl	14484 <__assert_fail@plt+0x2c14>
   11e68:	cmp	r0, #0
   11e6c:	bne	121c8 <__assert_fail@plt+0x958>
   11e70:	ldr	r6, [r4, #8]
   11e74:	ldr	r5, [r5, #8]
   11e78:	cmp	r6, #0
   11e7c:	ble	12524 <__assert_fail@plt+0xcb4>
   11e80:	ldr	r2, [r4, #4]
   11e84:	ldr	r3, [r2]
   11e88:	cmp	r5, r3
   11e8c:	beq	11edc <__assert_fail@plt+0x66c>
   11e90:	mov	r3, #0
   11e94:	b	11ea4 <__assert_fail@plt+0x634>
   11e98:	ldr	r1, [r2, #4]!
   11e9c:	cmp	r1, r5
   11ea0:	beq	11edc <__assert_fail@plt+0x66c>
   11ea4:	add	r3, r3, #1
   11ea8:	cmp	r3, r6
   11eac:	bne	11e98 <__assert_fail@plt+0x628>
   11eb0:	mov	r0, #3
   11eb4:	bl	11570 <sysconf@plt>
   11eb8:	cmp	r0, r6
   11ebc:	bgt	124fc <__assert_fail@plt+0xc8c>
   11ec0:	ldr	r1, [pc, #2644]	; 1291c <__assert_fail@plt+0x10ac>
   11ec4:	mov	r2, #5
   11ec8:	mov	r0, #0
   11ecc:	bl	11534 <dcgettext@plt>
   11ed0:	ldr	r3, [pc, #2616]	; 12910 <__assert_fail@plt+0x10a0>
   11ed4:	ldr	r1, [r3]
   11ed8:	bl	1181c <fputs@plt>
   11edc:	bl	11720 <endspent@plt>
   11ee0:	bl	14bc8 <endsgent@@Base>
   11ee4:	bl	1178c <endpwent@plt>
   11ee8:	bl	1148c <endgrent@plt>
   11eec:	mov	r0, r5
   11ef0:	bl	115f4 <setgid@plt>
   11ef4:	subs	r4, r0, #0
   11ef8:	beq	12034 <__assert_fail@plt+0x7c4>
   11efc:	ldr	r0, [pc, #2588]	; 12920 <__assert_fail@plt+0x10b0>
   11f00:	bl	115b8 <perror@plt>
   11f04:	ldr	r2, [pc, #2584]	; 12924 <__assert_fail@plt+0x10b4>
   11f08:	mov	r3, #80	; 0x50
   11f0c:	mov	r1, r3
   11f10:	stm	sp, {r2, r5}
   11f14:	ldr	r0, [pc, #2528]	; 128fc <__assert_fail@plt+0x108c>
   11f18:	mov	r2, #1
   11f1c:	bl	11858 <__snprintf_chk@plt>
   11f20:	ldr	r4, [r9]
   11f24:	bl	114d4 <getuid@plt>
   11f28:	mov	r1, r4
   11f2c:	mov	r3, #0
   11f30:	str	r3, [sp, #4]
   11f34:	str	r0, [sp]
   11f38:	ldr	r2, [pc, #2492]	; 128fc <__assert_fail@plt+0x108c>
   11f3c:	ldr	r0, [pc, #2476]	; 128f0 <__assert_fail@plt+0x1080>
   11f40:	bl	12c90 <__assert_fail@plt+0x1420>
   11f44:	b	11bf0 <__assert_fail@plt+0x380>
   11f48:	bl	114d4 <getuid@plt>
   11f4c:	cmp	r0, #0
   11f50:	moveq	r0, #0
   11f54:	andne	r0, r7, #1
   11f58:	cmp	r0, #0
   11f5c:	beq	11e60 <__assert_fail@plt+0x5f0>
   11f60:	b	11db4 <__assert_fail@plt+0x544>
   11f64:	ldr	r3, [pc, #2468]	; 12910 <__assert_fail@plt+0x10a0>
   11f68:	mov	r2, #5
   11f6c:	ldr	r1, [pc, #2484]	; 12928 <__assert_fail@plt+0x10b8>
   11f70:	ldr	r4, [r3]
   11f74:	bl	11534 <dcgettext@plt>
   11f78:	ldr	r3, [r9]
   11f7c:	mov	r1, #1
   11f80:	mov	r2, r0
   11f84:	mov	r0, r4
   11f88:	bl	11738 <__fprintf_chk@plt>
   11f8c:	ldr	r4, [r9]
   11f90:	bl	114d4 <getuid@plt>
   11f94:	mov	r1, r4
   11f98:	mov	r3, r8
   11f9c:	ldr	r2, [pc, #2376]	; 128ec <__assert_fail@plt+0x107c>
   11fa0:	str	r8, [sp, #4]
   11fa4:	str	r0, [sp]
   11fa8:	ldr	r0, [pc, #2368]	; 128f0 <__assert_fail@plt+0x1080>
   11fac:	bl	12c90 <__assert_fail@plt+0x1420>
   11fb0:	mov	r1, r8
   11fb4:	mov	r0, #6
   11fb8:	bl	11768 <setlocale@plt>
   11fbc:	cmp	r0, #0
   11fc0:	beq	12018 <__assert_fail@plt+0x7a8>
   11fc4:	bl	1154c <strdup@plt>
   11fc8:	subs	r4, r0, #0
   11fcc:	beq	12018 <__assert_fail@plt+0x7a8>
   11fd0:	ldr	r1, [pc, #2492]	; 12994 <__assert_fail@plt+0x1124>
   11fd4:	mov	r0, #6
   11fd8:	bl	11768 <setlocale@plt>
   11fdc:	bl	114d4 <getuid@plt>
   11fe0:	ldr	r2, [pc, #2372]	; 1292c <__assert_fail@plt+0x10bc>
   11fe4:	mov	r1, #1
   11fe8:	mov	r3, r0
   11fec:	mov	r0, #4
   11ff0:	bl	1175c <__syslog_chk@plt>
   11ff4:	mov	r1, r4
   11ff8:	mov	r0, #6
   11ffc:	bl	11768 <setlocale@plt>
   12000:	mov	r0, r4
   12004:	bl	114e0 <free@plt>
   12008:	b	11d14 <__assert_fail@plt+0x4a4>
   1200c:	cmp	r7, #0
   12010:	bgt	11a64 <__assert_fail@plt+0x1f4>
   12014:	b	11ab8 <__assert_fail@plt+0x248>
   12018:	bl	114d4 <getuid@plt>
   1201c:	ldr	r2, [pc, #2312]	; 1292c <__assert_fail@plt+0x10bc>
   12020:	mov	r1, #1
   12024:	mov	r3, r0
   12028:	mov	r0, #4
   1202c:	bl	1175c <__syslog_chk@plt>
   12030:	b	11d14 <__assert_fail@plt+0x4a4>
   12034:	bl	114d4 <getuid@plt>
   12038:	bl	117bc <setuid@plt>
   1203c:	subs	r6, r0, #0
   12040:	bne	1242c <__assert_fail@plt+0xbbc>
   12044:	ldr	r3, [sp, #32]
   12048:	cmp	r3, #0
   1204c:	bne	12368 <__assert_fail@plt+0xaf8>
   12050:	ldr	r0, [pc, #2264]	; 12930 <__assert_fail@plt+0x10c0>
   12054:	bl	115e8 <getenv@plt>
   12058:	ldr	r3, [sp, #20]
   1205c:	eor	r3, r3, #1
   12060:	cmp	r0, #0
   12064:	moveq	r3, #0
   12068:	andne	r3, r3, #1
   1206c:	cmp	r3, #0
   12070:	mov	r6, r0
   12074:	bne	12468 <__assert_fail@plt+0xbf8>
   12078:	ldr	r6, [r8, #24]
   1207c:	cmp	r6, #0
   12080:	beq	12670 <__assert_fail@plt+0xe00>
   12084:	ldrb	r2, [r6]
   12088:	ldr	r3, [pc, #2212]	; 12934 <__assert_fail@plt+0x10c4>
   1208c:	cmp	r2, #0
   12090:	moveq	r6, r3
   12094:	mov	r0, r6
   12098:	bl	12d34 <__assert_fail@plt+0x14c4>
   1209c:	ldr	r3, [sp, #20]
   120a0:	cmp	r3, #0
   120a4:	mov	r7, r0
   120a8:	beq	12470 <__assert_fail@plt+0xc00>
   120ac:	ldr	r0, [r8, #20]
   120b0:	bl	115a0 <chdir@plt>
   120b4:	cmp	r0, #0
   120b8:	bne	12678 <__assert_fail@plt+0xe08>
   120bc:	ldr	r3, [sp, #24]
   120c0:	ldr	r7, [pc, #2160]	; 12938 <__assert_fail@plt+0x10c8>
   120c4:	ldr	r8, [pc, #2160]	; 1293c <__assert_fail@plt+0x10cc>
   120c8:	ldr	sl, [pc, #2160]	; 12940 <__assert_fail@plt+0x10d0>
   120cc:	sub	fp, r3, #4
   120d0:	ldr	r4, [fp, #4]!
   120d4:	cmp	r4, #0
   120d8:	beq	1252c <__assert_fail@plt+0xcbc>
   120dc:	mov	r2, #5
   120e0:	mov	r1, r7
   120e4:	mov	r0, r4
   120e8:	bl	11828 <strncmp@plt>
   120ec:	cmp	r0, #0
   120f0:	beq	1213c <__assert_fail@plt+0x8cc>
   120f4:	mov	r2, #5
   120f8:	mov	r1, r8
   120fc:	mov	r0, r4
   12100:	bl	11828 <strncmp@plt>
   12104:	cmp	r0, #0
   12108:	beq	1213c <__assert_fail@plt+0x8cc>
   1210c:	mov	r2, #6
   12110:	mov	r1, sl
   12114:	mov	r0, r4
   12118:	bl	11828 <strncmp@plt>
   1211c:	cmp	r0, #0
   12120:	beq	1213c <__assert_fail@plt+0x8cc>
   12124:	mov	r2, #5
   12128:	ldr	r1, [pc, #2068]	; 12944 <__assert_fail@plt+0x10d4>
   1212c:	mov	r0, r4
   12130:	bl	11828 <strncmp@plt>
   12134:	cmp	r0, #0
   12138:	bne	120d0 <__assert_fail@plt+0x860>
   1213c:	mov	r0, r4
   12140:	mov	r1, #0
   12144:	bl	12d78 <__assert_fail@plt+0x1508>
   12148:	b	120d0 <__assert_fail@plt+0x860>
   1214c:	ldr	r3, [pc, #1980]	; 12910 <__assert_fail@plt+0x10a0>
   12150:	mov	r2, #5
   12154:	ldr	r1, [pc, #2028]	; 12948 <__assert_fail@plt+0x10d8>
   12158:	ldr	r4, [r3]
   1215c:	bl	11534 <dcgettext@plt>
   12160:	str	sl, [sp]
   12164:	mov	r1, #1
   12168:	ldr	r3, [r9]
   1216c:	mov	r2, r0
   12170:	mov	r0, r4
   12174:	bl	11738 <__fprintf_chk@plt>
   12178:	bl	11624 <closelog@plt>
   1217c:	cmp	sl, #0
   12180:	beq	11a7c <__assert_fail@plt+0x20c>
   12184:	ldr	r2, [pc, #1900]	; 128f8 <__assert_fail@plt+0x1088>
   12188:	mov	r3, #80	; 0x50
   1218c:	mov	r1, r3
   12190:	stm	sp, {r2, sl}
   12194:	ldr	r0, [pc, #1888]	; 128fc <__assert_fail@plt+0x108c>
   12198:	mov	r2, #1
   1219c:	bl	11858 <__snprintf_chk@plt>
   121a0:	ldr	r4, [r9]
   121a4:	bl	114d4 <getuid@plt>
   121a8:	mov	r1, r4
   121ac:	str	r5, [sp, #4]
   121b0:	mov	r3, r5
   121b4:	ldr	r2, [pc, #1856]	; 128fc <__assert_fail@plt+0x108c>
   121b8:	str	r0, [sp]
   121bc:	ldr	r0, [pc, #1836]	; 128f0 <__assert_fail@plt+0x1080>
   121c0:	bl	12c90 <__assert_fail@plt+0x1420>
   121c4:	b	11bf0 <__assert_fail@plt+0x380>
   121c8:	bl	114b0 <getlogin@plt>
   121cc:	mov	r7, r0
   121d0:	str	r0, [sp, #36]	; 0x24
   121d4:	mov	r0, #0
   121d8:	bl	11684 <ttyname@plt>
   121dc:	cmp	r7, #0
   121e0:	mov	fp, r0
   121e4:	beq	123e4 <__assert_fail@plt+0xb74>
   121e8:	mov	r0, r7
   121ec:	bl	13e00 <__assert_fail@plt+0x2590>
   121f0:	cmp	fp, #0
   121f4:	mov	r7, r0
   121f8:	str	r0, [sp, #36]	; 0x24
   121fc:	beq	1258c <__assert_fail@plt+0xd1c>
   12200:	mov	r0, fp
   12204:	bl	13e00 <__assert_fail@plt+0x2590>
   12208:	ldr	r3, [pc, #1852]	; 1294c <__assert_fail@plt+0x10dc>
   1220c:	cmp	r7, #0
   12210:	movne	r3, r7
   12214:	str	r3, [sp, #44]	; 0x2c
   12218:	mov	fp, r0
   1221c:	cmp	fp, #0
   12220:	beq	12684 <__assert_fail@plt+0xe14>
   12224:	mov	r2, #5
   12228:	ldr	r1, [pc, #1824]	; 12950 <__assert_fail@plt+0x10e0>
   1222c:	mov	r0, fp
   12230:	bl	11828 <strncmp@plt>
   12234:	cmp	r0, #0
   12238:	addeq	r3, fp, #5
   1223c:	streq	r3, [sp, #40]	; 0x28
   12240:	strne	fp, [sp, #40]	; 0x28
   12244:	mov	r1, #0
   12248:	mov	r0, #6
   1224c:	bl	11768 <setlocale@plt>
   12250:	cmp	r0, #0
   12254:	beq	12400 <__assert_fail@plt+0xb90>
   12258:	bl	1154c <strdup@plt>
   1225c:	subs	r7, r0, #0
   12260:	beq	12400 <__assert_fail@plt+0xb90>
   12264:	ldr	r1, [pc, #1832]	; 12994 <__assert_fail@plt+0x1124>
   12268:	mov	r0, #6
   1226c:	bl	11768 <setlocale@plt>
   12270:	ldr	r3, [sp, #40]	; 0x28
   12274:	ldr	r2, [pc, #1752]	; 12954 <__assert_fail@plt+0x10e4>
   12278:	str	r3, [sp, #4]
   1227c:	ldr	r3, [sp, #44]	; 0x2c
   12280:	mov	r1, #1
   12284:	str	r3, [sp]
   12288:	mov	r0, #6
   1228c:	mov	r3, r6
   12290:	str	sl, [sp, #8]
   12294:	bl	1175c <__syslog_chk@plt>
   12298:	mov	r1, r7
   1229c:	mov	r0, #6
   122a0:	bl	11768 <setlocale@plt>
   122a4:	mov	r0, r7
   122a8:	bl	114e0 <free@plt>
   122ac:	mov	r1, #1
   122b0:	mov	r0, #2
   122b4:	bl	11510 <signal@plt>
   122b8:	mov	r1, #1
   122bc:	mov	r0, #3
   122c0:	bl	11510 <signal@plt>
   122c4:	mov	r1, #1
   122c8:	mov	r0, r1
   122cc:	bl	11510 <signal@plt>
   122d0:	mov	r1, #1
   122d4:	mov	r0, #20
   122d8:	bl	11510 <signal@plt>
   122dc:	mov	r1, #1
   122e0:	mov	r0, #21
   122e4:	bl	11510 <signal@plt>
   122e8:	mov	r1, #1
   122ec:	mov	r0, #22
   122f0:	bl	11510 <signal@plt>
   122f4:	bl	11774 <fork@plt>
   122f8:	cmn	r0, #1
   122fc:	mov	r7, r0
   12300:	beq	1276c <__assert_fail@plt+0xefc>
   12304:	cmp	r0, #0
   12308:	bne	12690 <__assert_fail@plt+0xe20>
   1230c:	mov	r1, r0
   12310:	mov	r0, #2
   12314:	bl	11510 <signal@plt>
   12318:	mov	r1, r7
   1231c:	mov	r0, #3
   12320:	bl	11510 <signal@plt>
   12324:	mov	r1, r7
   12328:	mov	r0, #1
   1232c:	bl	11510 <signal@plt>
   12330:	mov	r1, r7
   12334:	mov	r0, #20
   12338:	bl	11510 <signal@plt>
   1233c:	mov	r1, r7
   12340:	mov	r0, #21
   12344:	bl	11510 <signal@plt>
   12348:	mov	r1, r7
   1234c:	mov	r0, #22
   12350:	bl	11510 <signal@plt>
   12354:	ldr	r0, [sp, #36]	; 0x24
   12358:	bl	114e0 <free@plt>
   1235c:	mov	r0, fp
   12360:	bl	114e0 <free@plt>
   12364:	b	11e70 <__assert_fail@plt+0x600>
   12368:	bl	11624 <closelog@plt>
   1236c:	ldr	r3, [sp, #28]
   12370:	ldr	r2, [pc, #1388]	; 128e4 <__assert_fail@plt+0x1074>
   12374:	ldr	r1, [pc, #1500]	; 12958 <__assert_fail@plt+0x10e8>
   12378:	str	r6, [sp]
   1237c:	ldr	r0, [pc, #1456]	; 12934 <__assert_fail@plt+0x10c4>
   12380:	bl	11798 <execl@plt>
   12384:	ldr	r2, [pc, #1432]	; 12924 <__assert_fail@plt+0x10b4>
   12388:	mov	r3, #80	; 0x50
   1238c:	mov	r1, r3
   12390:	stm	sp, {r2, r5}
   12394:	ldr	r0, [pc, #1376]	; 128fc <__assert_fail@plt+0x108c>
   12398:	mov	r2, #1
   1239c:	bl	11858 <__snprintf_chk@plt>
   123a0:	ldr	r4, [r9]
   123a4:	bl	114d4 <getuid@plt>
   123a8:	mov	r3, r6
   123ac:	mov	r1, r4
   123b0:	ldr	r2, [pc, #1348]	; 128fc <__assert_fail@plt+0x108c>
   123b4:	str	r6, [sp, #4]
   123b8:	str	r0, [sp]
   123bc:	ldr	r0, [pc, #1324]	; 128f0 <__assert_fail@plt+0x1080>
   123c0:	bl	12c90 <__assert_fail@plt+0x1420>
   123c4:	ldr	r0, [pc, #1384]	; 12934 <__assert_fail@plt+0x10c4>
   123c8:	bl	115b8 <perror@plt>
   123cc:	bl	116cc <__errno_location@plt>
   123d0:	ldr	r3, [r0]
   123d4:	cmp	r3, #2
   123d8:	movne	r0, #126	; 0x7e
   123dc:	moveq	r0, #127	; 0x7f
   123e0:	bl	11660 <exit@plt>
   123e4:	cmp	r0, #0
   123e8:	bne	125b4 <__assert_fail@plt+0xd44>
   123ec:	ldr	r3, [pc, #1368]	; 1294c <__assert_fail@plt+0x10dc>
   123f0:	str	r0, [sp, #36]	; 0x24
   123f4:	str	r3, [sp, #44]	; 0x2c
   123f8:	str	r3, [sp, #40]	; 0x28
   123fc:	b	12244 <__assert_fail@plt+0x9d4>
   12400:	ldr	r3, [sp, #40]	; 0x28
   12404:	str	sl, [sp, #8]
   12408:	str	r3, [sp, #4]
   1240c:	ldr	r3, [sp, #44]	; 0x2c
   12410:	ldr	r2, [pc, #1340]	; 12954 <__assert_fail@plt+0x10e4>
   12414:	str	r3, [sp]
   12418:	mov	r1, #1
   1241c:	mov	r3, r6
   12420:	mov	r0, #6
   12424:	bl	1175c <__syslog_chk@plt>
   12428:	b	122ac <__assert_fail@plt+0xa3c>
   1242c:	ldr	r0, [pc, #1320]	; 1295c <__assert_fail@plt+0x10ec>
   12430:	bl	115b8 <perror@plt>
   12434:	ldr	r2, [pc, #1256]	; 12924 <__assert_fail@plt+0x10b4>
   12438:	mov	r3, #80	; 0x50
   1243c:	mov	r1, r3
   12440:	stm	sp, {r2, r5}
   12444:	ldr	r0, [pc, #1200]	; 128fc <__assert_fail@plt+0x108c>
   12448:	mov	r2, #1
   1244c:	bl	11858 <__snprintf_chk@plt>
   12450:	ldr	r5, [r9]
   12454:	bl	114d4 <getuid@plt>
   12458:	mov	r1, r5
   1245c:	str	r4, [sp, #4]
   12460:	mov	r3, r4
   12464:	b	11f34 <__assert_fail@plt+0x6c4>
   12468:	bl	12d34 <__assert_fail@plt+0x14c4>
   1246c:	mov	r7, r0
   12470:	ldr	r3, [sp, #24]
   12474:	sub	r8, r3, #4
   12478:	b	12484 <__assert_fail@plt+0xc14>
   1247c:	mov	r1, #0
   12480:	bl	12d78 <__assert_fail@plt+0x1508>
   12484:	ldr	r0, [r8, #4]!
   12488:	cmp	r0, #0
   1248c:	bne	1247c <__assert_fail@plt+0xc0c>
   12490:	ldr	r2, [pc, #1164]	; 12924 <__assert_fail@plt+0x10b4>
   12494:	mov	r3, #80	; 0x50
   12498:	mov	r1, r3
   1249c:	stm	sp, {r2, r5}
   124a0:	mov	r4, r0
   124a4:	mov	r2, #1
   124a8:	ldr	r0, [pc, #1100]	; 128fc <__assert_fail@plt+0x108c>
   124ac:	bl	11858 <__snprintf_chk@plt>
   124b0:	ldr	r5, [r9]
   124b4:	bl	114d4 <getuid@plt>
   124b8:	mov	r2, #1
   124bc:	str	r2, [sp, #4]
   124c0:	mov	r1, r5
   124c4:	mov	r3, r4
   124c8:	ldr	r2, [pc, #1068]	; 128fc <__assert_fail@plt+0x108c>
   124cc:	str	r0, [sp]
   124d0:	ldr	r0, [pc, #1048]	; 128f0 <__assert_fail@plt+0x1080>
   124d4:	bl	12c90 <__assert_fail@plt+0x1420>
   124d8:	ldr	r3, [pc, #1152]	; 12960 <__assert_fail@plt+0x10f0>
   124dc:	mov	r1, r7
   124e0:	mov	r0, r6
   124e4:	ldr	r2, [r3]
   124e8:	bl	1366c <__assert_fail@plt+0x1dfc>
   124ec:	cmp	r0, #2
   124f0:	movne	r0, #126	; 0x7e
   124f4:	moveq	r0, #127	; 0x7f
   124f8:	b	11bf4 <__assert_fail@plt+0x384>
   124fc:	ldr	r1, [r4, #4]
   12500:	add	r0, r6, #1
   12504:	str	r0, [r4, #8]
   12508:	str	r5, [r1, r6, lsl #2]
   1250c:	bl	115c4 <setgroups@plt>
   12510:	cmp	r0, #0
   12514:	beq	11edc <__assert_fail@plt+0x66c>
   12518:	ldr	r0, [pc, #1092]	; 12964 <__assert_fail@plt+0x10f4>
   1251c:	bl	115b8 <perror@plt>
   12520:	b	11edc <__assert_fail@plt+0x66c>
   12524:	bne	11edc <__assert_fail@plt+0x66c>
   12528:	b	11eb0 <__assert_fail@plt+0x640>
   1252c:	ldr	r2, [pc, #1008]	; 12924 <__assert_fail@plt+0x10b4>
   12530:	mov	r3, #80	; 0x50
   12534:	mov	r1, r3
   12538:	stm	sp, {r2, r5}
   1253c:	ldr	r0, [pc, #952]	; 128fc <__assert_fail@plt+0x108c>
   12540:	mov	r2, #1
   12544:	bl	11858 <__snprintf_chk@plt>
   12548:	ldr	r5, [r9]
   1254c:	bl	114d4 <getuid@plt>
   12550:	mov	r3, #1
   12554:	str	r3, [sp, #4]
   12558:	mov	r1, r5
   1255c:	mov	r3, r4
   12560:	ldr	r2, [pc, #916]	; 128fc <__assert_fail@plt+0x108c>
   12564:	mov	r7, r4
   12568:	str	r0, [sp]
   1256c:	ldr	r0, [pc, #892]	; 128f0 <__assert_fail@plt+0x1080>
   12570:	bl	12c90 <__assert_fail@plt+0x1420>
   12574:	b	124d8 <__assert_fail@plt+0xc68>
   12578:	ldr	r3, [pc, #1000]	; 12968 <__assert_fail@plt+0x10f8>
   1257c:	ldr	r2, [pc, #1000]	; 1296c <__assert_fail@plt+0x10fc>
   12580:	ldr	r1, [pc, #1000]	; 12970 <__assert_fail@plt+0x1100>
   12584:	ldr	r0, [pc, #1000]	; 12974 <__assert_fail@plt+0x1104>
   12588:	bl	11870 <__assert_fail@plt>
   1258c:	ldr	r3, [sp, #36]	; 0x24
   12590:	cmp	r3, #0
   12594:	ldr	r3, [pc, #944]	; 1294c <__assert_fail@plt+0x10dc>
   12598:	strne	r3, [sp, #40]	; 0x28
   1259c:	ldrne	r3, [sp, #36]	; 0x24
   125a0:	strne	r3, [sp, #44]	; 0x2c
   125a4:	streq	r3, [sp, #44]	; 0x2c
   125a8:	ldreq	fp, [sp, #36]	; 0x24
   125ac:	streq	r3, [sp, #40]	; 0x28
   125b0:	b	12244 <__assert_fail@plt+0x9d4>
   125b4:	bl	13e00 <__assert_fail@plt+0x2590>
   125b8:	ldr	r3, [pc, #908]	; 1294c <__assert_fail@plt+0x10dc>
   125bc:	str	r3, [sp, #44]	; 0x2c
   125c0:	mov	fp, r0
   125c4:	b	1221c <__assert_fail@plt+0x9ac>
   125c8:	ldr	r3, [pc, #832]	; 12910 <__assert_fail@plt+0x10a0>
   125cc:	mov	r2, #5
   125d0:	ldr	r1, [pc, #928]	; 12978 <__assert_fail@plt+0x1108>
   125d4:	ldr	r4, [r3]
   125d8:	bl	11534 <dcgettext@plt>
   125dc:	ldr	r2, [r8, #12]
   125e0:	ldr	r3, [r9]
   125e4:	mov	r1, #1
   125e8:	str	r2, [sp]
   125ec:	mov	r2, r0
   125f0:	mov	r0, r4
   125f4:	bl	11738 <__fprintf_chk@plt>
   125f8:	mov	r1, r5
   125fc:	mov	r0, #6
   12600:	bl	11768 <setlocale@plt>
   12604:	cmp	r0, #0
   12608:	beq	12654 <__assert_fail@plt+0xde4>
   1260c:	bl	1154c <strdup@plt>
   12610:	subs	r4, r0, #0
   12614:	beq	12654 <__assert_fail@plt+0xde4>
   12618:	ldr	r1, [pc, #884]	; 12994 <__assert_fail@plt+0x1124>
   1261c:	mov	r0, #6
   12620:	bl	11768 <setlocale@plt>
   12624:	ldr	r3, [r8, #12]
   12628:	ldr	r2, [pc, #844]	; 1297c <__assert_fail@plt+0x110c>
   1262c:	mov	r1, #1
   12630:	mov	r0, #2
   12634:	bl	1175c <__syslog_chk@plt>
   12638:	mov	r1, r4
   1263c:	mov	r0, #6
   12640:	bl	11768 <setlocale@plt>
   12644:	mov	r0, r4
   12648:	bl	114e0 <free@plt>
   1264c:	bl	11624 <closelog@plt>
   12650:	b	11a7c <__assert_fail@plt+0x20c>
   12654:	ldr	r3, [r8, #12]
   12658:	ldr	r2, [pc, #796]	; 1297c <__assert_fail@plt+0x110c>
   1265c:	mov	r1, #1
   12660:	mov	r0, #2
   12664:	bl	1175c <__syslog_chk@plt>
   12668:	bl	11624 <closelog@plt>
   1266c:	b	11a7c <__assert_fail@plt+0x20c>
   12670:	ldr	r6, [pc, #700]	; 12934 <__assert_fail@plt+0x10c4>
   12674:	b	12094 <__assert_fail@plt+0x824>
   12678:	ldr	r0, [pc, #768]	; 12980 <__assert_fail@plt+0x1110>
   1267c:	bl	115b8 <perror@plt>
   12680:	b	120bc <__assert_fail@plt+0x84c>
   12684:	ldr	r3, [pc, #704]	; 1294c <__assert_fail@plt+0x10dc>
   12688:	str	r3, [sp, #40]	; 0x28
   1268c:	b	12244 <__assert_fail@plt+0x9d4>
   12690:	add	r9, sp, #56	; 0x38
   12694:	mov	r8, #0
   12698:	str	r8, [r9, #-8]!
   1269c:	bl	116d8 <getgid@plt>
   126a0:	mov	r4, r0
   126a4:	bl	11840 <getgrgid@plt>
   126a8:	mov	r5, r0
   126ac:	bl	116cc <__errno_location@plt>
   126b0:	mov	sl, r0
   126b4:	str	r8, [sl]
   126b8:	mov	r2, #2
   126bc:	mov	r1, r9
   126c0:	mov	r0, r7
   126c4:	bl	115dc <waitpid@plt>
   126c8:	cmp	r7, r0
   126cc:	beq	12888 <__assert_fail@plt+0x1018>
   126d0:	ldr	r3, [sl]
   126d4:	cmp	r3, #4
   126d8:	beq	126b4 <__assert_fail@plt+0xe44>
   126dc:	cmp	r5, #0
   126e0:	beq	129e8 <__assert_fail@plt+0x1178>
   126e4:	mov	r1, #0
   126e8:	mov	r0, #6
   126ec:	bl	11768 <setlocale@plt>
   126f0:	cmp	r0, #0
   126f4:	beq	129b8 <__assert_fail@plt+0x1148>
   126f8:	bl	1154c <strdup@plt>
   126fc:	subs	r4, r0, #0
   12700:	beq	129b8 <__assert_fail@plt+0x1148>
   12704:	ldr	r1, [pc, #648]	; 12994 <__assert_fail@plt+0x1124>
   12708:	mov	r0, #6
   1270c:	bl	11768 <setlocale@plt>
   12710:	ldr	r2, [r5]
   12714:	mov	r3, r6
   12718:	str	r2, [sp, #8]
   1271c:	ldr	r2, [sp, #40]	; 0x28
   12720:	mov	r1, #1
   12724:	str	r2, [sp, #4]
   12728:	ldr	r2, [sp, #44]	; 0x2c
   1272c:	mov	r0, #6
   12730:	str	r2, [sp]
   12734:	ldr	r2, [pc, #596]	; 12990 <__assert_fail@plt+0x1120>
   12738:	bl	1175c <__syslog_chk@plt>
   1273c:	mov	r1, r4
   12740:	mov	r0, #6
   12744:	bl	11768 <setlocale@plt>
   12748:	mov	r0, r4
   1274c:	bl	114e0 <free@plt>
   12750:	bl	11624 <closelog@plt>
   12754:	ldr	r3, [sp, #48]	; 0x30
   12758:	ands	r2, r3, #127	; 0x7f
   1275c:	asreq	r3, r3, #8
   12760:	addne	r0, r2, #128	; 0x80
   12764:	uxtbeq	r0, r3
   12768:	b	11bf4 <__assert_fail@plt+0x384>
   1276c:	ldr	r3, [pc, #412]	; 12910 <__assert_fail@plt+0x10a0>
   12770:	ldr	r1, [pc, #524]	; 12984 <__assert_fail@plt+0x1114>
   12774:	mov	r2, #5
   12778:	mov	r0, #0
   1277c:	ldr	r5, [r3]
   12780:	bl	11534 <dcgettext@plt>
   12784:	ldrb	r2, [r4]
   12788:	ldr	r3, [pc, #324]	; 128d4 <__assert_fail@plt+0x1064>
   1278c:	ldr	r4, [pc, #328]	; 128dc <__assert_fail@plt+0x106c>
   12790:	cmp	r2, #0
   12794:	movne	r4, r3
   12798:	mov	r6, r0
   1279c:	bl	116cc <__errno_location@plt>
   127a0:	ldr	r0, [r0]
   127a4:	bl	11618 <strerror@plt>
   127a8:	mov	r3, r4
   127ac:	mov	r2, r6
   127b0:	mov	r1, #1
   127b4:	str	r0, [sp]
   127b8:	mov	r0, r5
   127bc:	bl	11738 <__fprintf_chk@plt>
   127c0:	cmp	sl, #0
   127c4:	bne	11bb0 <__assert_fail@plt+0x340>
   127c8:	b	11ce8 <__assert_fail@plt+0x478>
   127cc:	ldr	r2, [r8]
   127d0:	mov	r3, sl
   127d4:	str	r2, [sp]
   127d8:	mov	r1, #1
   127dc:	ldr	r2, [pc, #292]	; 12908 <__assert_fail@plt+0x1098>
   127e0:	mov	r0, #6
   127e4:	bl	1175c <__syslog_chk@plt>
   127e8:	b	11cb8 <__assert_fail@plt+0x448>
   127ec:	ldr	r3, [pc, #284]	; 12910 <__assert_fail@plt+0x10a0>
   127f0:	mov	r2, #5
   127f4:	ldr	r1, [pc, #396]	; 12988 <__assert_fail@plt+0x1118>
   127f8:	mov	r0, r7
   127fc:	ldr	r4, [r3]
   12800:	bl	11534 <dcgettext@plt>
   12804:	mov	r5, r0
   12808:	bl	116cc <__errno_location@plt>
   1280c:	ldr	r6, [r9]
   12810:	ldr	r0, [r0]
   12814:	bl	11618 <strerror@plt>
   12818:	mov	r3, r6
   1281c:	mov	r2, r5
   12820:	mov	r1, #1
   12824:	str	r0, [sp]
   12828:	mov	r0, r4
   1282c:	bl	11738 <__fprintf_chk@plt>
   12830:	mov	r1, r7
   12834:	mov	r0, #6
   12838:	bl	11768 <setlocale@plt>
   1283c:	cmp	r0, #0
   12840:	beq	129a0 <__assert_fail@plt+0x1130>
   12844:	bl	1154c <strdup@plt>
   12848:	subs	r4, r0, #0
   1284c:	beq	129a0 <__assert_fail@plt+0x1130>
   12850:	ldr	r1, [pc, #316]	; 12994 <__assert_fail@plt+0x1124>
   12854:	mov	r0, #6
   12858:	bl	11768 <setlocale@plt>
   1285c:	mov	r3, sl
   12860:	ldr	r2, [pc, #292]	; 1298c <__assert_fail@plt+0x111c>
   12864:	mov	r1, #1
   12868:	mov	r0, #6
   1286c:	bl	1175c <__syslog_chk@plt>
   12870:	mov	r1, r4
   12874:	mov	r0, #6
   12878:	bl	11768 <setlocale@plt>
   1287c:	mov	r0, r4
   12880:	bl	114e0 <free@plt>
   12884:	b	11cdc <__assert_fail@plt+0x46c>
   12888:	ldrb	r3, [sp, #48]	; 0x30
   1288c:	cmp	r3, #127	; 0x7f
   12890:	bne	126dc <__assert_fail@plt+0xe6c>
   12894:	bl	11654 <getpid@plt>
   12898:	mov	r1, #19
   1289c:	bl	1163c <kill@plt>
   128a0:	mov	r1, #18
   128a4:	mov	r0, r7
   128a8:	bl	1163c <kill@plt>
   128ac:	ldrb	r3, [sp, #48]	; 0x30
   128b0:	cmp	r3, #127	; 0x7f
   128b4:	bne	126dc <__assert_fail@plt+0xe6c>
   128b8:	b	126b4 <__assert_fail@plt+0xe44>
   128bc:	andeq	r6, r2, r8, lsl #27
   128c0:	andeq	r7, r2, r8, asr #5
   128c4:	andeq	r5, r1, r0, lsl r8
   128c8:	andeq	r5, r1, r8, ror #8
   128cc:	andeq	r5, r1, ip, ror r4
   128d0:	strdeq	r7, [r2], -r4
   128d4:	andeq	r5, r1, r0, asr r4
   128d8:	ldrdeq	r7, [r2], -r8
   128dc:	andeq	r5, r1, r8, asr r4
   128e0:	strdeq	r5, [r1], -r4
   128e4:	strdeq	r5, [r1], -ip
   128e8:	strdeq	r5, [r1], -r8
   128ec:	andeq	r5, r1, ip, lsr #9
   128f0:	andeq	r0, r0, pc, asr r4
   128f4:	andeq	r5, r1, ip, lsr r5
   128f8:	andeq	r5, r1, r8, asr #10
   128fc:	andeq	r7, r2, r4, ror #5
   12900:	andeq	r5, r1, r8, lsl r6
   12904:	andeq	r0, r0, r6, ror #8
   12908:	andeq	r5, r1, r4, lsr r6
   1290c:	andeq	r5, r1, r0, ror #12
   12910:	ldrdeq	r7, [r2], -r0
   12914:	muleq	r1, r8, r5
   12918:	andeq	r5, r1, r4, ror r6
   1291c:	andeq	r5, r1, ip, ror #14
   12920:	andeq	r5, r1, ip, lsl #15
   12924:	muleq	r1, r4, r7
   12928:	andeq	r5, r1, r4, lsl #9
   1292c:			; <UNDEFINED> instruction: 0x000154bc
   12930:			; <UNDEFINED> instruction: 0x000157b8
   12934:	andeq	r5, r1, r0, ror #8
   12938:	andeq	r5, r1, r8, asr #15
   1293c:	ldrdeq	r5, [r1], -r0
   12940:	ldrdeq	r5, [r1], -r8
   12944:	andeq	r5, r1, r0, ror #15
   12948:	andeq	r5, r1, r0, ror #10
   1294c:	andeq	r5, r1, ip, asr r4
   12950:	andeq	r5, r1, r4, lsl #13
   12954:	andeq	r5, r1, ip, lsl #13
   12958:			; <UNDEFINED> instruction: 0x000157b4
   1295c:	andeq	r5, r1, ip, lsr #15
   12960:	andeq	r7, r2, r4, lsr r3
   12964:	andeq	r5, r1, r0, lsl #15
   12968:	andeq	r5, r1, ip, lsl #8
   1296c:	andeq	r0, r0, r3, lsl #5
   12970:	andeq	r5, r1, r0, lsl #11
   12974:	andeq	r5, r1, ip, lsl #11
   12978:	andeq	r5, r1, r0, lsl #10
   1297c:	andeq	r5, r1, r0, lsr #10
   12980:	andeq	r5, r1, r0, asr #15
   12984:	andeq	r5, r1, r0, asr #13
   12988:	andeq	r5, r1, r4, lsr #11
   1298c:	ldrdeq	r5, [r1], -ip
   12990:	ldrdeq	r5, [r1], -ip
   12994:			; <UNDEFINED> instruction: 0x000154b8
   12998:	andeq	r5, r1, r0, lsl r7
   1299c:	andeq	r5, r1, r8, asr #14
   129a0:	mov	r3, sl
   129a4:	ldr	r2, [pc, #-32]	; 1298c <__assert_fail@plt+0x111c>
   129a8:	mov	r1, #1
   129ac:	mov	r0, #6
   129b0:	bl	1175c <__syslog_chk@plt>
   129b4:	b	11cdc <__assert_fail@plt+0x46c>
   129b8:	ldr	r2, [r5]
   129bc:	mov	r3, r6
   129c0:	str	r2, [sp, #8]
   129c4:	ldr	r2, [sp, #40]	; 0x28
   129c8:	mov	r1, #1
   129cc:	str	r2, [sp, #4]
   129d0:	ldr	r2, [sp, #44]	; 0x2c
   129d4:	mov	r0, #6
   129d8:	str	r2, [sp]
   129dc:	ldr	r2, [pc, #-84]	; 12990 <__assert_fail@plt+0x1120>
   129e0:	bl	1175c <__syslog_chk@plt>
   129e4:	b	12750 <__assert_fail@plt+0xee0>
   129e8:	mov	r1, r5
   129ec:	mov	r0, #6
   129f0:	bl	11768 <setlocale@plt>
   129f4:	cmp	r0, #0
   129f8:	beq	12aac <__assert_fail@plt+0x123c>
   129fc:	bl	1154c <strdup@plt>
   12a00:	subs	r5, r0, #0
   12a04:	beq	12aac <__assert_fail@plt+0x123c>
   12a08:	ldr	r1, [pc, #-124]	; 12994 <__assert_fail@plt+0x1124>
   12a0c:	mov	r0, #6
   12a10:	bl	11768 <setlocale@plt>
   12a14:	ldr	r3, [sp, #40]	; 0x28
   12a18:	ldr	r2, [pc, #-136]	; 12998 <__assert_fail@plt+0x1128>
   12a1c:	str	r3, [sp, #4]
   12a20:	ldr	r3, [sp, #44]	; 0x2c
   12a24:	mov	r1, #1
   12a28:	str	r3, [sp]
   12a2c:	mov	r0, #6
   12a30:	mov	r3, r6
   12a34:	str	r4, [sp, #8]
   12a38:	bl	1175c <__syslog_chk@plt>
   12a3c:	mov	r1, r5
   12a40:	mov	r0, #6
   12a44:	bl	11768 <setlocale@plt>
   12a48:	mov	r0, r5
   12a4c:	bl	114e0 <free@plt>
   12a50:	mov	r1, #0
   12a54:	mov	r0, #6
   12a58:	bl	11768 <setlocale@plt>
   12a5c:	cmp	r0, #0
   12a60:	beq	12ad8 <__assert_fail@plt+0x1268>
   12a64:	bl	1154c <strdup@plt>
   12a68:	subs	r5, r0, #0
   12a6c:	beq	12ad8 <__assert_fail@plt+0x1268>
   12a70:	ldr	r1, [pc, #-228]	; 12994 <__assert_fail@plt+0x1124>
   12a74:	mov	r0, #6
   12a78:	bl	11768 <setlocale@plt>
   12a7c:	mov	r3, r4
   12a80:	ldr	r2, [pc, #-236]	; 1299c <__assert_fail@plt+0x112c>
   12a84:	str	r6, [sp]
   12a88:	mov	r1, #1
   12a8c:	mov	r0, #4
   12a90:	bl	1175c <__syslog_chk@plt>
   12a94:	mov	r1, r5
   12a98:	mov	r0, #6
   12a9c:	bl	11768 <setlocale@plt>
   12aa0:	mov	r0, r5
   12aa4:	bl	114e0 <free@plt>
   12aa8:	b	12750 <__assert_fail@plt+0xee0>
   12aac:	ldr	r3, [sp, #40]	; 0x28
   12ab0:	str	r4, [sp, #8]
   12ab4:	str	r3, [sp, #4]
   12ab8:	ldr	r3, [sp, #44]	; 0x2c
   12abc:	ldr	r2, [pc, #-300]	; 12998 <__assert_fail@plt+0x1128>
   12ac0:	str	r3, [sp]
   12ac4:	mov	r1, #1
   12ac8:	mov	r3, r6
   12acc:	mov	r0, #6
   12ad0:	bl	1175c <__syslog_chk@plt>
   12ad4:	b	12a50 <__assert_fail@plt+0x11e0>
   12ad8:	str	r6, [sp]
   12adc:	mov	r3, r4
   12ae0:	ldr	r2, [pc, #-332]	; 1299c <__assert_fail@plt+0x112c>
   12ae4:	mov	r1, #1
   12ae8:	mov	r0, #4
   12aec:	bl	1175c <__syslog_chk@plt>
   12af0:	b	12750 <__assert_fail@plt+0xee0>
   12af4:	mov	fp, #0
   12af8:	mov	lr, #0
   12afc:	pop	{r1}		; (ldr r1, [sp], #4)
   12b00:	mov	r2, sp
   12b04:	push	{r2}		; (str r2, [sp, #-4]!)
   12b08:	push	{r0}		; (str r0, [sp, #-4]!)
   12b0c:	ldr	ip, [pc, #16]	; 12b24 <__assert_fail@plt+0x12b4>
   12b10:	push	{ip}		; (str ip, [sp, #-4]!)
   12b14:	ldr	r0, [pc, #12]	; 12b28 <__assert_fail@plt+0x12b8>
   12b18:	ldr	r3, [pc, #12]	; 12b2c <__assert_fail@plt+0x12bc>
   12b1c:	bl	1160c <__libc_start_main@plt>
   12b20:	bl	11834 <abort@plt>
   12b24:	strdeq	r5, [r1], -ip
   12b28:	andeq	r1, r1, r0, ror #17
   12b2c:	muleq	r1, ip, r3
   12b30:	ldr	r3, [pc, #20]	; 12b4c <__assert_fail@plt+0x12dc>
   12b34:	ldr	r2, [pc, #20]	; 12b50 <__assert_fail@plt+0x12e0>
   12b38:	add	r3, pc, r3
   12b3c:	ldr	r2, [r3, r2]
   12b40:	cmp	r2, #0
   12b44:	bxeq	lr
   12b48:	b	11630 <__gmon_start__@plt>
   12b4c:	andeq	r4, r1, ip, asr r3
   12b50:	andeq	r0, r0, r0, ror #2
   12b54:	ldr	r0, [pc, #24]	; 12b74 <__assert_fail@plt+0x1304>
   12b58:	ldr	r3, [pc, #24]	; 12b78 <__assert_fail@plt+0x1308>
   12b5c:	cmp	r3, r0
   12b60:	bxeq	lr
   12b64:	ldr	r3, [pc, #16]	; 12b7c <__assert_fail@plt+0x130c>
   12b68:	cmp	r3, #0
   12b6c:	bxeq	lr
   12b70:	bx	r3
   12b74:	andeq	r7, r2, r4, asr #5
   12b78:	andeq	r7, r2, r4, asr #5
   12b7c:	andeq	r0, r0, r0
   12b80:	ldr	r0, [pc, #36]	; 12bac <__assert_fail@plt+0x133c>
   12b84:	ldr	r1, [pc, #36]	; 12bb0 <__assert_fail@plt+0x1340>
   12b88:	sub	r1, r1, r0
   12b8c:	asr	r1, r1, #2
   12b90:	add	r1, r1, r1, lsr #31
   12b94:	asrs	r1, r1, #1
   12b98:	bxeq	lr
   12b9c:	ldr	r3, [pc, #16]	; 12bb4 <__assert_fail@plt+0x1344>
   12ba0:	cmp	r3, #0
   12ba4:	bxeq	lr
   12ba8:	bx	r3
   12bac:	andeq	r7, r2, r4, asr #5
   12bb0:	andeq	r7, r2, r4, asr #5
   12bb4:	andeq	r0, r0, r0
   12bb8:	push	{r4, lr}
   12bbc:	ldr	r4, [pc, #24]	; 12bdc <__assert_fail@plt+0x136c>
   12bc0:	ldrb	r3, [r4]
   12bc4:	cmp	r3, #0
   12bc8:	popne	{r4, pc}
   12bcc:	bl	12b54 <__assert_fail@plt+0x12e4>
   12bd0:	mov	r3, #1
   12bd4:	strb	r3, [r4]
   12bd8:	pop	{r4, pc}
   12bdc:	ldrdeq	r7, [r2], -r4
   12be0:	b	12b80 <__assert_fail@plt+0x1310>
   12be4:	ldr	r3, [pc, #44]	; 12c18 <__assert_fail@plt+0x13a8>
   12be8:	push	{r4, lr}
   12bec:	mov	r2, #5
   12bf0:	ldrb	r0, [r3]
   12bf4:	cmp	r0, #0
   12bf8:	movne	r0, #0
   12bfc:	ldrne	r1, [pc, #24]	; 12c1c <__assert_fail@plt+0x13ac>
   12c00:	ldreq	r1, [pc, #24]	; 12c20 <__assert_fail@plt+0x13b0>
   12c04:	bl	11534 <dcgettext@plt>
   12c08:	ldr	r3, [pc, #20]	; 12c24 <__assert_fail@plt+0x13b4>
   12c0c:	pop	{r4, lr}
   12c10:	ldr	r1, [r3]
   12c14:	b	1181c <fputs@plt>
   12c18:	ldrdeq	r7, [r2], -r8
   12c1c:	andeq	r5, r1, r4, lsl r4
   12c20:	andeq	r5, r1, r0, lsr r4
   12c24:	ldrdeq	r7, [r2], -r0
   12c28:	push	{r4, lr}
   12c2c:	bl	11588 <audit_open@plt>
   12c30:	ldr	r3, [pc, #76]	; 12c84 <__assert_fail@plt+0x1414>
   12c34:	cmp	r0, #0
   12c38:	str	r0, [r3]
   12c3c:	popge	{r4, pc}
   12c40:	bl	116cc <__errno_location@plt>
   12c44:	ldr	r0, [r0]
   12c48:	sub	r3, r0, #93	; 0x5d
   12c4c:	bic	r3, r3, #4
   12c50:	cmp	r3, #0
   12c54:	cmpne	r0, #22
   12c58:	moveq	r0, #1
   12c5c:	movne	r0, #0
   12c60:	popeq	{r4, pc}
   12c64:	mov	r2, #5
   12c68:	ldr	r1, [pc, #24]	; 12c88 <__assert_fail@plt+0x1418>
   12c6c:	bl	11534 <dcgettext@plt>
   12c70:	ldr	r3, [pc, #20]	; 12c8c <__assert_fail@plt+0x141c>
   12c74:	ldr	r1, [r3]
   12c78:	bl	1181c <fputs@plt>
   12c7c:	mov	r0, #1
   12c80:	bl	11660 <exit@plt>
   12c84:	strdeq	r7, [r2], -r8
   12c88:	andeq	r5, r1, r8, ror #15
   12c8c:	ldrdeq	r7, [r2], -r0
   12c90:	ldr	r1, [pc, #80]	; 12ce8 <__assert_fail@plt+0x1478>
   12c94:	push	{lr}		; (str lr, [sp, #-4]!)
   12c98:	sub	sp, sp, #28
   12c9c:	ldr	lr, [r1]
   12ca0:	cmp	lr, #0
   12ca4:	blt	12ce0 <__assert_fail@plt+0x1470>
   12ca8:	mov	r1, r0
   12cac:	ldr	r0, [sp, #36]	; 0x24
   12cb0:	mov	ip, r3
   12cb4:	str	r0, [sp, #20]
   12cb8:	ldr	r0, [sp, #32]
   12cbc:	mov	r3, r2
   12cc0:	mov	r2, #0
   12cc4:	str	r0, [sp, #4]
   12cc8:	str	ip, [sp]
   12ccc:	mov	r0, lr
   12cd0:	str	r2, [sp, #16]
   12cd4:	str	r2, [sp, #12]
   12cd8:	str	r2, [sp, #8]
   12cdc:	bl	11804 <audit_log_acct_message@plt>
   12ce0:	add	sp, sp, #28
   12ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ce8:	strdeq	r7, [r2], -r8
   12cec:	ldr	r3, [pc, #56]	; 12d2c <__assert_fail@plt+0x14bc>
   12cf0:	ldr	ip, [r3]
   12cf4:	cmp	ip, #0
   12cf8:	bxlt	lr
   12cfc:	push	{lr}		; (str lr, [sp, #-4]!)
   12d00:	sub	sp, sp, #20
   12d04:	mov	r3, #0
   12d08:	mov	r2, r0
   12d0c:	str	r1, [sp, #8]
   12d10:	mov	r0, ip
   12d14:	str	r3, [sp, #4]
   12d18:	str	r3, [sp]
   12d1c:	ldr	r1, [pc, #12]	; 12d30 <__assert_fail@plt+0x14c0>
   12d20:	bl	117f8 <audit_log_user_message@plt>
   12d24:	add	sp, sp, #20
   12d28:	pop	{pc}		; (ldr pc, [sp], #4)
   12d2c:	strdeq	r7, [r2], -r8
   12d30:	andeq	r0, r0, r7, asr r4
   12d34:	push	{r4, lr}
   12d38:	mov	r1, #47	; 0x2f
   12d3c:	mov	r4, r0
   12d40:	bl	117a4 <strrchr@plt>
   12d44:	cmp	r0, #0
   12d48:	addne	r0, r0, #1
   12d4c:	moveq	r0, r4
   12d50:	pop	{r4, pc}
   12d54:	push	{r4, lr}
   12d58:	mov	r0, #64	; 0x40
   12d5c:	bl	13dec <__assert_fail@plt+0x257c>
   12d60:	ldr	r2, [pc, #12]	; 12d74 <__assert_fail@plt+0x1504>
   12d64:	mov	r3, #0
   12d68:	str	r0, [r2]
   12d6c:	str	r3, [r0]
   12d70:	pop	{r4, pc}
   12d74:	andeq	r7, r2, r4, lsr r3
   12d78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d7c:	subs	r5, r1, #0
   12d80:	sub	sp, sp, #28
   12d84:	beq	12e7c <__assert_fail@plt+0x160c>
   12d88:	mov	r8, r0
   12d8c:	bl	11690 <strlen@plt>
   12d90:	mov	r4, r0
   12d94:	mov	r0, r5
   12d98:	bl	11690 <strlen@plt>
   12d9c:	add	r4, r4, r0
   12da0:	add	r7, r4, #2
   12da4:	mov	r0, r7
   12da8:	bl	13dec <__assert_fail@plt+0x257c>
   12dac:	ldr	r3, [pc, #416]	; 12f54 <__assert_fail@plt+0x16e4>
   12db0:	mov	r1, r7
   12db4:	str	r5, [sp, #8]
   12db8:	stm	sp, {r3, r8}
   12dbc:	mov	r2, #1
   12dc0:	mvn	r3, #0
   12dc4:	add	r4, r4, #1
   12dc8:	mov	r6, r0
   12dcc:	bl	11858 <__snprintf_chk@plt>
   12dd0:	cmp	r4, r0
   12dd4:	bne	12f40 <__assert_fail@plt+0x16d0>
   12dd8:	mov	r1, #61	; 0x3d
   12ddc:	mov	r0, r6
   12de0:	bl	1169c <strchr@plt>
   12de4:	cmp	r0, #0
   12de8:	beq	12ee0 <__assert_fail@plt+0x1670>
   12dec:	ldr	r8, [pc, #356]	; 12f58 <__assert_fail@plt+0x16e8>
   12df0:	sub	sl, r0, r6
   12df4:	ldr	r7, [r8, #4]
   12df8:	ldr	r9, [r8]
   12dfc:	cmp	r7, #0
   12e00:	beq	12ef0 <__assert_fail@plt+0x1680>
   12e04:	sub	fp, r9, #4
   12e08:	mov	r4, #0
   12e0c:	b	12e14 <__assert_fail@plt+0x15a4>
   12e10:	mov	r4, r3
   12e14:	ldr	r5, [fp, #4]!
   12e18:	mov	r2, sl
   12e1c:	mov	r1, r5
   12e20:	mov	r0, r6
   12e24:	bl	11828 <strncmp@plt>
   12e28:	lsl	r2, r4, #2
   12e2c:	cmp	r0, #0
   12e30:	bne	12e44 <__assert_fail@plt+0x15d4>
   12e34:	ldrb	r3, [r5, sl]
   12e38:	cmp	r3, #0
   12e3c:	cmpne	r3, #61	; 0x3d
   12e40:	beq	12e88 <__assert_fail@plt+0x1618>
   12e44:	add	r3, r4, #1
   12e48:	cmp	r3, r7
   12e4c:	bne	12e10 <__assert_fail@plt+0x15a0>
   12e50:	add	r4, r4, #2
   12e54:	tst	r4, #15
   12e58:	lsl	r1, r7, #2
   12e5c:	str	r4, [r8, #4]
   12e60:	addne	r1, r1, #4
   12e64:	str	r6, [r9, r7, lsl #2]
   12e68:	beq	12ea8 <__assert_fail@plt+0x1638>
   12e6c:	mov	r3, #0
   12e70:	str	r3, [r9, r1]
   12e74:	add	sp, sp, #28
   12e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e7c:	bl	13e00 <__assert_fail@plt+0x2590>
   12e80:	mov	r6, r0
   12e84:	b	12dd8 <__assert_fail@plt+0x1568>
   12e88:	mov	r0, r5
   12e8c:	str	r2, [sp, #20]
   12e90:	bl	114e0 <free@plt>
   12e94:	ldr	r3, [r8]
   12e98:	ldr	r2, [sp, #20]
   12e9c:	str	r6, [r3, r2]
   12ea0:	add	sp, sp, #28
   12ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ea8:	mov	r0, r9
   12eac:	add	r1, r1, #68	; 0x44
   12eb0:	bl	1157c <realloc@plt>
   12eb4:	subs	r9, r0, #0
   12eb8:	beq	12f04 <__assert_fail@plt+0x1694>
   12ebc:	ldr	r3, [pc, #152]	; 12f5c <__assert_fail@plt+0x16ec>
   12ec0:	ldr	r2, [r8]
   12ec4:	str	r9, [r8]
   12ec8:	ldr	r1, [r3]
   12ecc:	cmp	r1, r2
   12ed0:	ldr	r1, [r8, #4]
   12ed4:	streq	r9, [r3]
   12ed8:	lsl	r1, r1, #2
   12edc:	b	12e6c <__assert_fail@plt+0x15fc>
   12ee0:	mov	r0, r6
   12ee4:	add	sp, sp, #28
   12ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eec:	b	114e0 <free@plt>
   12ef0:	mov	r3, #1
   12ef4:	str	r3, [r8, #4]
   12ef8:	mov	r1, #4
   12efc:	str	r6, [r9]
   12f00:	b	12e6c <__assert_fail@plt+0x15fc>
   12f04:	mov	r2, #5
   12f08:	ldr	r1, [pc, #80]	; 12f60 <__assert_fail@plt+0x16f0>
   12f0c:	bl	11534 <dcgettext@plt>
   12f10:	ldr	r3, [pc, #76]	; 12f64 <__assert_fail@plt+0x16f4>
   12f14:	ldr	r1, [r3]
   12f18:	bl	1181c <fputs@plt>
   12f1c:	ldrd	r2, [r8]
   12f20:	sub	r3, r3, #1
   12f24:	str	r3, [r8, #4]
   12f28:	ldr	r0, [r2, r3, lsl #2]
   12f2c:	bl	114e0 <free@plt>
   12f30:	ldr	r1, [r8, #4]
   12f34:	ldr	r9, [r8]
   12f38:	lsl	r1, r1, #2
   12f3c:	b	12e6c <__assert_fail@plt+0x15fc>
   12f40:	ldr	r3, [pc, #32]	; 12f68 <__assert_fail@plt+0x16f8>
   12f44:	mov	r2, #100	; 0x64
   12f48:	ldr	r1, [pc, #28]	; 12f6c <__assert_fail@plt+0x16fc>
   12f4c:	ldr	r0, [pc, #28]	; 12f70 <__assert_fail@plt+0x1700>
   12f50:	bl	11870 <__assert_fail@plt>
   12f54:	andeq	r5, r1, ip, lsl r8
   12f58:	andeq	r7, r2, r4, lsr r3
   12f5c:	andeq	r7, r2, r8, asr #5
   12f60:	andeq	r5, r1, r4, asr #16
   12f64:	ldrdeq	r7, [r2], -r0
   12f68:	andeq	r5, r1, r4, lsl r8
   12f6c:	andeq	r5, r1, r4, lsr #16
   12f70:	andeq	r5, r1, ip, lsr #16
   12f74:	ldr	r3, [pc, #324]	; 130c0 <__assert_fail@plt+0x1850>
   12f78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f7c:	sub	sp, sp, #1040	; 0x410
   12f80:	sub	sp, sp, #4
   12f84:	ldr	r3, [r3]
   12f88:	subs	r7, r0, #0
   12f8c:	str	r3, [sp, #1036]	; 0x40c
   12f90:	ble	13058 <__assert_fail@plt+0x17e8>
   12f94:	ldr	fp, [pc, #296]	; 130c4 <__assert_fail@plt+0x1854>
   12f98:	sub	r8, r1, #4
   12f9c:	mov	sl, #1
   12fa0:	ldr	r5, [r8, #4]!
   12fa4:	mov	r0, r5
   12fa8:	bl	11690 <strlen@plt>
   12fac:	cmp	r0, #1024	; 0x400
   12fb0:	bcs	13050 <__assert_fail@plt+0x17e0>
   12fb4:	mov	r1, #61	; 0x3d
   12fb8:	mov	r0, r5
   12fbc:	bl	1169c <strchr@plt>
   12fc0:	subs	r9, r0, #0
   12fc4:	beq	13088 <__assert_fail@plt+0x1818>
   12fc8:	ldr	r4, [fp]
   12fcc:	cmp	r4, #0
   12fd0:	ldrne	r6, [pc, #236]	; 130c4 <__assert_fail@plt+0x1854>
   12fd4:	bne	12fe8 <__assert_fail@plt+0x1778>
   12fd8:	b	13078 <__assert_fail@plt+0x1808>
   12fdc:	ldr	r4, [r6, #4]!
   12fe0:	cmp	r4, #0
   12fe4:	beq	13078 <__assert_fail@plt+0x1808>
   12fe8:	mov	r0, r4
   12fec:	bl	11690 <strlen@plt>
   12ff0:	mov	r1, r4
   12ff4:	mov	r2, r0
   12ff8:	mov	r0, r5
   12ffc:	bl	11828 <strncmp@plt>
   13000:	cmp	r0, #0
   13004:	bne	12fdc <__assert_fail@plt+0x176c>
   13008:	sub	r9, r9, r5
   1300c:	mov	r4, r0
   13010:	mov	r2, r9
   13014:	mov	r1, r5
   13018:	mov	r3, #1024	; 0x400
   1301c:	add	r0, sp, #12
   13020:	bl	11540 <__strncpy_chk@plt>
   13024:	add	r3, sp, #1040	; 0x410
   13028:	add	r9, r3, r9
   1302c:	mov	r2, #5
   13030:	ldr	r1, [pc, #144]	; 130c8 <__assert_fail@plt+0x1858>
   13034:	mov	r0, r4
   13038:	strb	r4, [r9, #-1028]	; 0xfffffbfc
   1303c:	bl	11534 <dcgettext@plt>
   13040:	add	r2, sp, #12
   13044:	mov	r1, r0
   13048:	mov	r0, #1
   1304c:	bl	11714 <__printf_chk@plt>
   13050:	subs	r7, r7, #1
   13054:	bne	12fa0 <__assert_fail@plt+0x1730>
   13058:	ldr	r3, [pc, #96]	; 130c0 <__assert_fail@plt+0x1850>
   1305c:	ldr	r2, [sp, #1036]	; 0x40c
   13060:	ldr	r3, [r3]
   13064:	cmp	r2, r3
   13068:	bne	130bc <__assert_fail@plt+0x184c>
   1306c:	add	sp, sp, #1040	; 0x410
   13070:	add	sp, sp, #4
   13074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13078:	mov	r0, r5
   1307c:	mov	r1, #0
   13080:	bl	12d78 <__assert_fail@plt+0x1508>
   13084:	b	13050 <__assert_fail@plt+0x17e0>
   13088:	ldr	r2, [pc, #60]	; 130cc <__assert_fail@plt+0x185c>
   1308c:	mov	r3, #1024	; 0x400
   13090:	str	sl, [sp, #4]
   13094:	str	r2, [sp]
   13098:	mov	r1, r3
   1309c:	add	r0, sp, #12
   130a0:	mov	r2, #1
   130a4:	bl	11858 <__snprintf_chk@plt>
   130a8:	add	r0, sp, #12
   130ac:	ldr	r1, [r8]
   130b0:	add	sl, sl, #1
   130b4:	bl	12d78 <__assert_fail@plt+0x1508>
   130b8:	b	13050 <__assert_fail@plt+0x17e0>
   130bc:	bl	11558 <__stack_chk_fail@plt>
   130c0:	andeq	r6, r2, r8, lsl #27
   130c4:	andeq	r7, r2, r8
   130c8:	andeq	r5, r1, r0, ror #16
   130cc:	andeq	r5, r1, ip, asr r8
   130d0:	ldr	r3, [pc, #316]	; 13214 <__assert_fail@plt+0x19a4>
   130d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   130d8:	ldr	r7, [r3]
   130dc:	ldr	r6, [r7]
   130e0:	cmp	r6, #0
   130e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   130e8:	ldr	r8, [pc, #296]	; 13218 <__assert_fail@plt+0x19a8>
   130ec:	mov	r9, r7
   130f0:	ldr	r4, [r8]
   130f4:	cmp	r4, #0
   130f8:	ldrne	r5, [pc, #280]	; 13218 <__assert_fail@plt+0x19a8>
   130fc:	bne	13110 <__assert_fail@plt+0x18a0>
   13100:	b	1320c <__assert_fail@plt+0x199c>
   13104:	ldr	r4, [r5, #4]!
   13108:	cmp	r4, #0
   1310c:	beq	1320c <__assert_fail@plt+0x199c>
   13110:	mov	r0, r4
   13114:	bl	11690 <strlen@plt>
   13118:	mov	r1, r4
   1311c:	mov	r2, r0
   13120:	mov	r0, r6
   13124:	bl	11828 <strncmp@plt>
   13128:	cmp	r0, #0
   1312c:	bne	13104 <__assert_fail@plt+0x1894>
   13130:	ldr	r3, [r9]
   13134:	cmp	r3, #0
   13138:	beq	13160 <__assert_fail@plt+0x18f0>
   1313c:	mov	r3, r9
   13140:	ldr	r2, [r3, #4]
   13144:	cmp	r2, #0
   13148:	str	r2, [r3], #4
   1314c:	bne	13140 <__assert_fail@plt+0x18d0>
   13150:	ldr	r6, [r9], #-4
   13154:	cmp	r6, #0
   13158:	add	r9, r9, #4
   1315c:	bne	130f0 <__assert_fail@plt+0x1880>
   13160:	ldr	r5, [r7]
   13164:	cmp	r5, #0
   13168:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1316c:	ldr	r4, [r8, #56]	; 0x38
   13170:	cmp	r4, #0
   13174:	ldrne	r6, [pc, #160]	; 1321c <__assert_fail@plt+0x19ac>
   13178:	beq	131f0 <__assert_fail@plt+0x1980>
   1317c:	mov	r0, r4
   13180:	bl	11690 <strlen@plt>
   13184:	mov	r1, r4
   13188:	mov	r2, r0
   1318c:	mov	r0, r5
   13190:	bl	11828 <strncmp@plt>
   13194:	mov	r1, #47	; 0x2f
   13198:	cmp	r0, #0
   1319c:	mov	r0, r5
   131a0:	bne	131f8 <__assert_fail@plt+0x1988>
   131a4:	bl	1169c <strchr@plt>
   131a8:	cmp	r0, #0
   131ac:	beq	131f8 <__assert_fail@plt+0x1988>
   131b0:	ldr	r3, [r7]
   131b4:	cmp	r3, #0
   131b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   131bc:	mov	r3, r7
   131c0:	ldr	r2, [r3, #4]
   131c4:	cmp	r2, #0
   131c8:	str	r2, [r3], #4
   131cc:	bne	131c0 <__assert_fail@plt+0x1950>
   131d0:	ldr	r5, [r7], #-4
   131d4:	cmp	r5, #0
   131d8:	add	r7, r7, #4
   131dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   131e0:	ldr	r4, [r8, #56]	; 0x38
   131e4:	cmp	r4, #0
   131e8:	ldrne	r6, [pc, #44]	; 1321c <__assert_fail@plt+0x19ac>
   131ec:	bne	1317c <__assert_fail@plt+0x190c>
   131f0:	ldr	r5, [r7, #4]
   131f4:	b	131d4 <__assert_fail@plt+0x1964>
   131f8:	ldr	r4, [r6, #4]!
   131fc:	cmp	r4, #0
   13200:	bne	1317c <__assert_fail@plt+0x190c>
   13204:	ldr	r5, [r7, #4]
   13208:	b	131d4 <__assert_fail@plt+0x1964>
   1320c:	ldr	r6, [r9, #4]
   13210:	b	13154 <__assert_fail@plt+0x18e4>
   13214:	andeq	r7, r2, r8, asr #5
   13218:	andeq	r7, r2, r8
   1321c:	andeq	r7, r2, r0, asr #32
   13220:	push	{r4, r5, r6, r7, r8, lr}
   13224:	subs	r6, r1, #0
   13228:	beq	13304 <__assert_fail@plt+0x1a94>
   1322c:	cmp	r0, #0
   13230:	mov	r4, r0
   13234:	beq	132f0 <__assert_fail@plt+0x1a80>
   13238:	ldr	r0, [r0]
   1323c:	cmp	r0, #0
   13240:	moveq	r0, #8
   13244:	beq	13288 <__assert_fail@plt+0x1a18>
   13248:	mov	r5, #0
   1324c:	b	13264 <__assert_fail@plt+0x19f4>
   13250:	add	r3, r5, #1
   13254:	ldr	r0, [r4, r3, lsl #2]
   13258:	cmp	r0, #0
   1325c:	beq	13280 <__assert_fail@plt+0x1a10>
   13260:	mov	r5, r3
   13264:	mov	r1, r6
   13268:	bl	114a4 <strcmp@plt>
   1326c:	cmp	r0, #0
   13270:	bne	13250 <__assert_fail@plt+0x19e0>
   13274:	mov	r7, r4
   13278:	mov	r0, r7
   1327c:	pop	{r4, r5, r6, r7, r8, pc}
   13280:	add	r0, r5, #3
   13284:	lsl	r0, r0, #2
   13288:	bl	13dec <__assert_fail@plt+0x257c>
   1328c:	ldr	r2, [r4]
   13290:	cmp	r2, #0
   13294:	mov	r7, r0
   13298:	beq	132e4 <__assert_fail@plt+0x1a74>
   1329c:	sub	r1, r0, #4
   132a0:	mov	r3, #0
   132a4:	str	r2, [r1, #4]!
   132a8:	ldr	r2, [r4, #4]!
   132ac:	add	r3, r3, #1
   132b0:	cmp	r2, #0
   132b4:	lsl	r0, r3, #2
   132b8:	bne	132a4 <__assert_fail@plt+0x1a34>
   132bc:	add	r3, r3, #1
   132c0:	add	r5, r7, r0
   132c4:	lsl	r4, r3, #2
   132c8:	mov	r0, r6
   132cc:	bl	13e00 <__assert_fail@plt+0x2590>
   132d0:	mov	r3, #0
   132d4:	str	r0, [r5]
   132d8:	str	r3, [r7, r4]
   132dc:	mov	r0, r7
   132e0:	pop	{r4, r5, r6, r7, r8, pc}
   132e4:	mov	r5, r0
   132e8:	mov	r4, #4
   132ec:	b	132c8 <__assert_fail@plt+0x1a58>
   132f0:	ldr	r3, [pc, #32]	; 13318 <__assert_fail@plt+0x1aa8>
   132f4:	mov	r2, #52	; 0x34
   132f8:	ldr	r1, [pc, #28]	; 1331c <__assert_fail@plt+0x1aac>
   132fc:	ldr	r0, [pc, #28]	; 13320 <__assert_fail@plt+0x1ab0>
   13300:	bl	11870 <__assert_fail@plt>
   13304:	ldr	r3, [pc, #12]	; 13318 <__assert_fail@plt+0x1aa8>
   13308:	mov	r2, #51	; 0x33
   1330c:	ldr	r1, [pc, #8]	; 1331c <__assert_fail@plt+0x1aac>
   13310:	ldr	r0, [pc, #12]	; 13324 <__assert_fail@plt+0x1ab4>
   13314:	bl	11870 <__assert_fail@plt>
   13318:	strdeq	r5, [r1], -r0
   1331c:	andeq	r5, r1, r0, lsr r9
   13320:	andeq	r5, r1, r8, asr #18
   13324:	andeq	r5, r1, r8, lsr r9
   13328:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1332c:	subs	r7, r1, #0
   13330:	beq	1340c <__assert_fail@plt+0x1b9c>
   13334:	cmp	r0, #0
   13338:	mov	sl, r0
   1333c:	beq	133f8 <__assert_fail@plt+0x1b88>
   13340:	ldr	r4, [r0]
   13344:	cmp	r4, #0
   13348:	beq	133ec <__assert_fail@plt+0x1b7c>
   1334c:	mov	r9, #0
   13350:	mov	r5, r9
   13354:	mov	r8, r0
   13358:	mov	r6, r0
   1335c:	mov	r0, r4
   13360:	mov	r1, r7
   13364:	bl	114a4 <strcmp@plt>
   13368:	ldr	r4, [r6, #4]!
   1336c:	add	r5, r5, #1
   13370:	cmp	r0, #0
   13374:	addne	r9, r9, #1
   13378:	cmp	r4, #0
   1337c:	bne	1335c <__assert_fail@plt+0x1aec>
   13380:	cmp	r9, r5
   13384:	beq	133ec <__assert_fail@plt+0x1b7c>
   13388:	add	r0, r9, #1
   1338c:	lsl	r0, r0, #2
   13390:	bl	13dec <__assert_fail@plt+0x257c>
   13394:	ldr	r5, [sl]
   13398:	cmp	r5, #0
   1339c:	mov	r6, r0
   133a0:	moveq	r2, r0
   133a4:	beq	133dc <__assert_fail@plt+0x1b6c>
   133a8:	mov	r0, r5
   133ac:	mov	r1, r7
   133b0:	bl	114a4 <strcmp@plt>
   133b4:	lsl	r3, r4, #2
   133b8:	add	r2, r6, r3
   133bc:	cmp	r0, #0
   133c0:	strne	r5, [r6, r4, lsl #2]
   133c4:	ldr	r5, [r8, #4]!
   133c8:	addne	r3, r3, #4
   133cc:	addne	r2, r6, r3
   133d0:	addne	r4, r4, #1
   133d4:	cmp	r5, #0
   133d8:	bne	133a8 <__assert_fail@plt+0x1b38>
   133dc:	mov	r3, #0
   133e0:	str	r3, [r2]
   133e4:	mov	r0, r6
   133e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133ec:	mov	r6, sl
   133f0:	mov	r0, r6
   133f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133f8:	ldr	r3, [pc, #32]	; 13420 <__assert_fail@plt+0x1bb0>
   133fc:	mov	r2, #102	; 0x66
   13400:	ldr	r1, [pc, #28]	; 13424 <__assert_fail@plt+0x1bb4>
   13404:	ldr	r0, [pc, #28]	; 13428 <__assert_fail@plt+0x1bb8>
   13408:	bl	11870 <__assert_fail@plt>
   1340c:	ldr	r3, [pc, #12]	; 13420 <__assert_fail@plt+0x1bb0>
   13410:	mov	r2, #101	; 0x65
   13414:	ldr	r1, [pc, #8]	; 13424 <__assert_fail@plt+0x1bb4>
   13418:	ldr	r0, [pc, #12]	; 1342c <__assert_fail@plt+0x1bbc>
   1341c:	bl	11870 <__assert_fail@plt>
   13420:	strdeq	r5, [r1], -ip
   13424:	andeq	r5, r1, r0, lsr r9
   13428:	andeq	r5, r1, r8, asr #18
   1342c:	andeq	r5, r1, r8, lsr r9
   13430:	push	{r4, r5, r6, r7, r8, lr}
   13434:	subs	r4, r0, #0
   13438:	beq	134c0 <__assert_fail@plt+0x1c50>
   1343c:	ldr	r3, [r4]
   13440:	cmp	r3, #0
   13444:	moveq	r0, #4
   13448:	beq	13474 <__assert_fail@plt+0x1c04>
   1344c:	mov	r3, r4
   13450:	mov	r0, #0
   13454:	b	1345c <__assert_fail@plt+0x1bec>
   13458:	mov	r0, r1
   1345c:	ldr	r2, [r3, #4]!
   13460:	add	r1, r0, #1
   13464:	cmp	r2, #0
   13468:	bne	13458 <__assert_fail@plt+0x1be8>
   1346c:	add	r0, r0, #2
   13470:	lsl	r0, r0, #2
   13474:	bl	13dec <__assert_fail@plt+0x257c>
   13478:	mov	r7, r0
   1347c:	ldr	r0, [r4]
   13480:	cmp	r0, #0
   13484:	moveq	r5, r7
   13488:	beq	134b0 <__assert_fail@plt+0x1c40>
   1348c:	sub	r6, r7, #4
   13490:	mov	r5, #0
   13494:	bl	13e00 <__assert_fail@plt+0x2590>
   13498:	add	r5, r5, #1
   1349c:	str	r0, [r6, #4]!
   134a0:	ldr	r0, [r4, #4]!
   134a4:	cmp	r0, #0
   134a8:	bne	13494 <__assert_fail@plt+0x1c24>
   134ac:	add	r5, r7, r5, lsl #2
   134b0:	mov	r3, #0
   134b4:	mov	r0, r7
   134b8:	str	r3, [r5]
   134bc:	pop	{r4, r5, r6, r7, r8, pc}
   134c0:	ldr	r3, [pc, #12]	; 134d4 <__assert_fail@plt+0x1c64>
   134c4:	mov	r2, #155	; 0x9b
   134c8:	ldr	r1, [pc, #8]	; 134d8 <__assert_fail@plt+0x1c68>
   134cc:	ldr	r0, [pc, #8]	; 134dc <__assert_fail@plt+0x1c6c>
   134d0:	bl	11870 <__assert_fail@plt>
   134d4:	andeq	r5, r1, r8, lsl #18
   134d8:	andeq	r5, r1, r0, lsr r9
   134dc:	andeq	r5, r1, r8, asr #18
   134e0:	push	{r4, r5, r6, lr}
   134e4:	subs	r5, r1, #0
   134e8:	beq	13540 <__assert_fail@plt+0x1cd0>
   134ec:	cmp	r0, #0
   134f0:	mov	r4, r0
   134f4:	beq	1352c <__assert_fail@plt+0x1cbc>
   134f8:	ldr	r0, [r0]
   134fc:	cmp	r0, #0
   13500:	bne	13514 <__assert_fail@plt+0x1ca4>
   13504:	pop	{r4, r5, r6, pc}
   13508:	ldr	r0, [r4, #4]!
   1350c:	cmp	r0, #0
   13510:	popeq	{r4, r5, r6, pc}
   13514:	mov	r1, r5
   13518:	bl	114a4 <strcmp@plt>
   1351c:	cmp	r0, #0
   13520:	bne	13508 <__assert_fail@plt+0x1c98>
   13524:	mov	r0, #1
   13528:	pop	{r4, r5, r6, pc}
   1352c:	ldr	r3, [pc, #32]	; 13554 <__assert_fail@plt+0x1ce4>
   13530:	mov	r2, #181	; 0xb5
   13534:	ldr	r1, [pc, #28]	; 13558 <__assert_fail@plt+0x1ce8>
   13538:	ldr	r0, [pc, #28]	; 1355c <__assert_fail@plt+0x1cec>
   1353c:	bl	11870 <__assert_fail@plt>
   13540:	ldr	r3, [pc, #12]	; 13554 <__assert_fail@plt+0x1ce4>
   13544:	mov	r2, #180	; 0xb4
   13548:	ldr	r1, [pc, #8]	; 13558 <__assert_fail@plt+0x1ce8>
   1354c:	ldr	r0, [pc, #12]	; 13560 <__assert_fail@plt+0x1cf0>
   13550:	bl	11870 <__assert_fail@plt>
   13554:	andeq	r5, r1, r4, lsl r9
   13558:	andeq	r5, r1, r0, lsr r9
   1355c:	andeq	r5, r1, r8, asr #18
   13560:	andeq	r5, r1, r8, lsr r9
   13564:	cmp	r0, #0
   13568:	push	{r4, r5, r6, r7, r8, lr}
   1356c:	beq	135f0 <__assert_fail@plt+0x1d80>
   13570:	bl	13e00 <__assert_fail@plt+0x2590>
   13574:	mov	r6, #0
   13578:	mov	r5, r0
   1357c:	b	13588 <__assert_fail@plt+0x1d18>
   13580:	add	r0, r4, #1
   13584:	add	r6, r6, #1
   13588:	mov	r1, #44	; 0x2c
   1358c:	bl	1169c <strchr@plt>
   13590:	subs	r4, r0, #0
   13594:	bne	13580 <__assert_fail@plt+0x1d10>
   13598:	add	r0, r6, #2
   1359c:	lsl	r0, r0, #2
   135a0:	bl	13dec <__assert_fail@plt+0x257c>
   135a4:	ldrb	r3, [r5]
   135a8:	cmp	r3, #0
   135ac:	movne	r7, r4
   135b0:	mov	r8, r0
   135b4:	subne	r6, r0, #4
   135b8:	streq	r3, [r0]
   135bc:	bne	135c8 <__assert_fail@plt+0x1d58>
   135c0:	b	135e8 <__assert_fail@plt+0x1d78>
   135c4:	strb	r7, [r5], #1
   135c8:	str	r5, [r6, #4]!
   135cc:	mov	r0, r5
   135d0:	mov	r1, #44	; 0x2c
   135d4:	bl	1169c <strchr@plt>
   135d8:	add	r4, r4, #1
   135dc:	subs	r5, r0, #0
   135e0:	bne	135c4 <__assert_fail@plt+0x1d54>
   135e4:	str	r5, [r8, r4, lsl #2]
   135e8:	mov	r0, r8
   135ec:	pop	{r4, r5, r6, r7, r8, pc}
   135f0:	ldr	r3, [pc, #12]	; 13604 <__assert_fail@plt+0x1d94>
   135f4:	mov	r2, #205	; 0xcd
   135f8:	ldr	r1, [pc, #8]	; 13608 <__assert_fail@plt+0x1d98>
   135fc:	ldr	r0, [pc, #8]	; 1360c <__assert_fail@plt+0x1d9c>
   13600:	bl	11870 <__assert_fail@plt>
   13604:	andeq	r5, r1, r0, lsr #18
   13608:	andeq	r5, r1, r0, lsr r9
   1360c:	andeq	r5, r1, r8, asr r9
   13610:	push	{r4, r5, r6, lr}
   13614:	bl	114b0 <getlogin@plt>
   13618:	mov	r4, r0
   1361c:	bl	114d4 <getuid@plt>
   13620:	cmp	r4, #0
   13624:	mov	r5, r0
   13628:	beq	13638 <__assert_fail@plt+0x1dc8>
   1362c:	ldrb	r3, [r4]
   13630:	cmp	r3, #0
   13634:	bne	13644 <__assert_fail@plt+0x1dd4>
   13638:	mov	r0, r5
   1363c:	pop	{r4, r5, r6, lr}
   13640:	b	138ec <__assert_fail@plt+0x207c>
   13644:	mov	r0, r4
   13648:	bl	137ac <__assert_fail@plt+0x1f3c>
   1364c:	subs	r3, r0, #0
   13650:	beq	13638 <__assert_fail@plt+0x1dc8>
   13654:	ldr	r3, [r3, #8]
   13658:	cmp	r3, r5
   1365c:	popeq	{r4, r5, r6, pc}
   13660:	mov	r0, r5
   13664:	pop	{r4, r5, r6, lr}
   13668:	b	138ec <__assert_fail@plt+0x207c>
   1366c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13670:	sub	sp, sp, #1040	; 0x410
   13674:	ldr	r7, [pc, #280]	; 13794 <__assert_fail@plt+0x1f24>
   13678:	sub	sp, sp, #4
   1367c:	mov	r5, r1
   13680:	ldr	r3, [r7]
   13684:	mov	r4, r0
   13688:	mov	r9, r2
   1368c:	str	r3, [sp, #1036]	; 0x40c
   13690:	bl	116cc <__errno_location@plt>
   13694:	cmp	r4, #0
   13698:	moveq	r5, #22
   1369c:	mov	r6, r0
   136a0:	streq	r5, [r0]
   136a4:	beq	13718 <__assert_fail@plt+0x1ea8>
   136a8:	cmp	r5, #0
   136ac:	addne	r8, sp, #12
   136b0:	beq	13758 <__assert_fail@plt+0x1ee8>
   136b4:	mov	r1, r5
   136b8:	mov	r3, r9
   136bc:	mov	r2, #0
   136c0:	mov	r0, r4
   136c4:	bl	11780 <execle@plt>
   136c8:	mov	r1, #5
   136cc:	mov	r0, r4
   136d0:	ldr	r5, [r6]
   136d4:	bl	11744 <access@plt>
   136d8:	cmp	r0, #0
   136dc:	beq	13738 <__assert_fail@plt+0x1ec8>
   136e0:	mov	r2, #5
   136e4:	ldr	r1, [pc, #172]	; 13798 <__assert_fail@plt+0x1f28>
   136e8:	mov	r0, #0
   136ec:	bl	11534 <dcgettext@plt>
   136f0:	mov	r3, #1024	; 0x400
   136f4:	str	r4, [sp, #4]
   136f8:	mov	r1, r3
   136fc:	mov	r2, #1
   13700:	str	r0, [sp]
   13704:	mov	r0, r8
   13708:	bl	11858 <__snprintf_chk@plt>
   1370c:	str	r5, [r6]
   13710:	mov	r0, r8
   13714:	bl	115b8 <perror@plt>
   13718:	ldr	r2, [sp, #1036]	; 0x40c
   1371c:	ldr	r3, [r7]
   13720:	mov	r0, r5
   13724:	cmp	r2, r3
   13728:	bne	13790 <__assert_fail@plt+0x1f20>
   1372c:	add	sp, sp, #1040	; 0x410
   13730:	add	sp, sp, #4
   13734:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13738:	stm	sp, {r0, r9}
   1373c:	mov	r3, r4
   13740:	ldr	r2, [pc, #84]	; 1379c <__assert_fail@plt+0x1f2c>
   13744:	ldr	r1, [pc, #84]	; 137a0 <__assert_fail@plt+0x1f30>
   13748:	ldr	r0, [pc, #84]	; 137a4 <__assert_fail@plt+0x1f34>
   1374c:	bl	11780 <execle@plt>
   13750:	ldr	r5, [r6]
   13754:	b	136e0 <__assert_fail@plt+0x1e70>
   13758:	mov	r0, r4
   1375c:	bl	12d34 <__assert_fail@plt+0x14c4>
   13760:	ldr	r2, [pc, #64]	; 137a8 <__assert_fail@plt+0x1f38>
   13764:	add	r8, sp, #12
   13768:	mov	r3, #1024	; 0x400
   1376c:	str	r2, [sp]
   13770:	mov	r1, r3
   13774:	mov	r2, #1
   13778:	str	r0, [sp, #4]
   1377c:	mov	r0, r8
   13780:	bl	11858 <__snprintf_chk@plt>
   13784:	strb	r5, [sp, #1035]	; 0x40b
   13788:	mov	r5, r8
   1378c:	b	136b4 <__assert_fail@plt+0x1e44>
   13790:	bl	11558 <__stack_chk_fail@plt>
   13794:	andeq	r6, r2, r8, lsl #27
   13798:	andeq	r5, r1, ip, ror #18
   1379c:	strdeq	r5, [r1], -r4
   137a0:			; <UNDEFINED> instruction: 0x000157b4
   137a4:	andeq	r5, r1, r0, ror #8
   137a8:	andeq	r5, r1, r8, ror #18
   137ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137b0:	sub	sp, sp, #20
   137b4:	ldr	fp, [pc, #288]	; 138dc <__assert_fail@plt+0x206c>
   137b8:	mov	sl, r0
   137bc:	mov	r0, #28
   137c0:	ldr	r3, [fp]
   137c4:	str	r3, [sp, #12]
   137c8:	bl	11600 <malloc@plt>
   137cc:	subs	r8, r0, #0
   137d0:	movne	r5, #0
   137d4:	movne	r7, r5
   137d8:	movne	r4, #256	; 0x100
   137dc:	addne	r9, sp, #8
   137e0:	beq	138a8 <__assert_fail@plt+0x2038>
   137e4:	mov	r0, r5
   137e8:	mov	r1, r4
   137ec:	str	r7, [sp, #8]
   137f0:	bl	1157c <realloc@plt>
   137f4:	subs	r5, r0, #0
   137f8:	beq	138a8 <__assert_fail@plt+0x2038>
   137fc:	bl	116cc <__errno_location@plt>
   13800:	mov	r3, r4
   13804:	mov	r2, r5
   13808:	mov	r1, r8
   1380c:	str	r7, [r0]
   13810:	mov	r6, r0
   13814:	str	r9, [sp]
   13818:	mov	r0, sl
   1381c:	bl	116b4 <getpwnam_r@plt>
   13820:	cmp	r0, #0
   13824:	bne	13834 <__assert_fail@plt+0x1fc4>
   13828:	ldr	r3, [sp, #8]
   1382c:	cmp	r3, r8
   13830:	beq	13888 <__assert_fail@plt+0x2018>
   13834:	ldr	r3, [r6]
   13838:	cmp	r3, #34	; 0x22
   1383c:	bne	13858 <__assert_fail@plt+0x1fe8>
   13840:	cmn	r4, #-1073741823	; 0xc0000001
   13844:	lslls	r4, r4, #2
   13848:	bls	137e4 <__assert_fail@plt+0x1f74>
   1384c:	cmn	r4, #1
   13850:	mvnne	r4, #0
   13854:	bne	137e4 <__assert_fail@plt+0x1f74>
   13858:	mov	r0, r5
   1385c:	bl	114e0 <free@plt>
   13860:	mov	r0, r8
   13864:	bl	114e0 <free@plt>
   13868:	mov	r4, #0
   1386c:	ldr	r2, [sp, #12]
   13870:	ldr	r3, [fp]
   13874:	mov	r0, r4
   13878:	cmp	r2, r3
   1387c:	bne	138d8 <__assert_fail@plt+0x2068>
   13880:	add	sp, sp, #20
   13884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13888:	mov	r0, r8
   1388c:	bl	15124 <putsgent@@Base+0x214>
   13890:	mov	r4, r0
   13894:	mov	r0, r5
   13898:	bl	114e0 <free@plt>
   1389c:	mov	r0, r8
   138a0:	bl	114e0 <free@plt>
   138a4:	b	1386c <__assert_fail@plt+0x1ffc>
   138a8:	ldr	r3, [pc, #48]	; 138e0 <__assert_fail@plt+0x2070>
   138ac:	mov	r2, #5
   138b0:	ldr	r1, [pc, #44]	; 138e4 <__assert_fail@plt+0x2074>
   138b4:	ldr	r4, [r3]
   138b8:	bl	11534 <dcgettext@plt>
   138bc:	ldr	r3, [pc, #36]	; 138e8 <__assert_fail@plt+0x2078>
   138c0:	mov	r1, #1
   138c4:	mov	r2, r0
   138c8:	mov	r0, r4
   138cc:	bl	11738 <__fprintf_chk@plt>
   138d0:	mov	r0, #13
   138d4:	bl	11660 <exit@plt>
   138d8:	bl	11558 <__stack_chk_fail@plt>
   138dc:	andeq	r6, r2, r8, lsl #27
   138e0:	ldrdeq	r7, [r2], -r0
   138e4:	andeq	r5, r1, r0, lsl #19
   138e8:	muleq	r1, r4, r9
   138ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138f0:	sub	sp, sp, #20
   138f4:	ldr	fp, [pc, #288]	; 13a1c <__assert_fail@plt+0x21ac>
   138f8:	mov	sl, r0
   138fc:	mov	r0, #28
   13900:	ldr	r3, [fp]
   13904:	str	r3, [sp, #12]
   13908:	bl	11600 <malloc@plt>
   1390c:	subs	r8, r0, #0
   13910:	movne	r5, #0
   13914:	movne	r7, r5
   13918:	movne	r4, #256	; 0x100
   1391c:	addne	r9, sp, #8
   13920:	beq	139e8 <__assert_fail@plt+0x2178>
   13924:	mov	r0, r5
   13928:	mov	r1, r4
   1392c:	str	r7, [sp, #8]
   13930:	bl	1157c <realloc@plt>
   13934:	subs	r5, r0, #0
   13938:	beq	139e8 <__assert_fail@plt+0x2178>
   1393c:	bl	116cc <__errno_location@plt>
   13940:	mov	r3, r4
   13944:	mov	r2, r5
   13948:	mov	r1, r8
   1394c:	str	r7, [r0]
   13950:	mov	r6, r0
   13954:	str	r9, [sp]
   13958:	mov	r0, sl
   1395c:	bl	11498 <getpwuid_r@plt>
   13960:	cmp	r0, #0
   13964:	bne	13974 <__assert_fail@plt+0x2104>
   13968:	ldr	r3, [sp, #8]
   1396c:	cmp	r3, r8
   13970:	beq	139c8 <__assert_fail@plt+0x2158>
   13974:	ldr	r3, [r6]
   13978:	cmp	r3, #34	; 0x22
   1397c:	bne	13998 <__assert_fail@plt+0x2128>
   13980:	cmn	r4, #-1073741823	; 0xc0000001
   13984:	lslls	r4, r4, #2
   13988:	bls	13924 <__assert_fail@plt+0x20b4>
   1398c:	cmn	r4, #1
   13990:	mvnne	r4, #0
   13994:	bne	13924 <__assert_fail@plt+0x20b4>
   13998:	mov	r0, r5
   1399c:	bl	114e0 <free@plt>
   139a0:	mov	r0, r8
   139a4:	bl	114e0 <free@plt>
   139a8:	mov	r4, #0
   139ac:	ldr	r2, [sp, #12]
   139b0:	ldr	r3, [fp]
   139b4:	mov	r0, r4
   139b8:	cmp	r2, r3
   139bc:	bne	13a18 <__assert_fail@plt+0x21a8>
   139c0:	add	sp, sp, #20
   139c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139c8:	mov	r0, r8
   139cc:	bl	15124 <putsgent@@Base+0x214>
   139d0:	mov	r4, r0
   139d4:	mov	r0, r5
   139d8:	bl	114e0 <free@plt>
   139dc:	mov	r0, r8
   139e0:	bl	114e0 <free@plt>
   139e4:	b	139ac <__assert_fail@plt+0x213c>
   139e8:	ldr	r3, [pc, #48]	; 13a20 <__assert_fail@plt+0x21b0>
   139ec:	mov	r2, #5
   139f0:	ldr	r1, [pc, #44]	; 13a24 <__assert_fail@plt+0x21b4>
   139f4:	ldr	r4, [r3]
   139f8:	bl	11534 <dcgettext@plt>
   139fc:	ldr	r3, [pc, #36]	; 13a28 <__assert_fail@plt+0x21b8>
   13a00:	mov	r1, #1
   13a04:	mov	r2, r0
   13a08:	mov	r0, r4
   13a0c:	bl	11738 <__fprintf_chk@plt>
   13a10:	mov	r0, #13
   13a14:	bl	11660 <exit@plt>
   13a18:	bl	11558 <__stack_chk_fail@plt>
   13a1c:	andeq	r6, r2, r8, lsl #27
   13a20:	ldrdeq	r7, [r2], -r0
   13a24:	andeq	r5, r1, r0, lsl #19
   13a28:	andeq	r5, r1, r0, lsr #19
   13a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a30:	sub	sp, sp, #20
   13a34:	ldr	fp, [pc, #288]	; 13b5c <__assert_fail@plt+0x22ec>
   13a38:	mov	sl, r0
   13a3c:	mov	r0, #16
   13a40:	ldr	r3, [fp]
   13a44:	str	r3, [sp, #12]
   13a48:	bl	11600 <malloc@plt>
   13a4c:	subs	r8, r0, #0
   13a50:	movne	r5, #0
   13a54:	movne	r7, r5
   13a58:	movne	r4, #256	; 0x100
   13a5c:	addne	r9, sp, #8
   13a60:	beq	13b28 <__assert_fail@plt+0x22b8>
   13a64:	mov	r0, r5
   13a68:	mov	r1, r4
   13a6c:	str	r7, [sp, #8]
   13a70:	bl	1157c <realloc@plt>
   13a74:	subs	r5, r0, #0
   13a78:	beq	13b28 <__assert_fail@plt+0x22b8>
   13a7c:	bl	116cc <__errno_location@plt>
   13a80:	mov	r3, r4
   13a84:	mov	r2, r5
   13a88:	mov	r1, r8
   13a8c:	str	r7, [r0]
   13a90:	mov	r6, r0
   13a94:	str	r9, [sp]
   13a98:	mov	r0, sl
   13a9c:	bl	116c0 <getgrnam_r@plt>
   13aa0:	cmp	r0, #0
   13aa4:	bne	13ab4 <__assert_fail@plt+0x2244>
   13aa8:	ldr	r3, [sp, #8]
   13aac:	cmp	r3, r8
   13ab0:	beq	13b08 <__assert_fail@plt+0x2298>
   13ab4:	ldr	r3, [r6]
   13ab8:	cmp	r3, #34	; 0x22
   13abc:	bne	13ad8 <__assert_fail@plt+0x2268>
   13ac0:	cmn	r4, #-1073741823	; 0xc0000001
   13ac4:	lslls	r4, r4, #2
   13ac8:	bls	13a64 <__assert_fail@plt+0x21f4>
   13acc:	cmn	r4, #1
   13ad0:	mvnne	r4, #0
   13ad4:	bne	13a64 <__assert_fail@plt+0x21f4>
   13ad8:	mov	r0, r5
   13adc:	bl	114e0 <free@plt>
   13ae0:	mov	r0, r8
   13ae4:	bl	114e0 <free@plt>
   13ae8:	mov	r4, #0
   13aec:	ldr	r2, [sp, #12]
   13af0:	ldr	r3, [fp]
   13af4:	mov	r0, r4
   13af8:	cmp	r2, r3
   13afc:	bne	13b58 <__assert_fail@plt+0x22e8>
   13b00:	add	sp, sp, #20
   13b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b08:	mov	r0, r8
   13b0c:	bl	149c8 <__assert_fail@plt+0x3158>
   13b10:	mov	r4, r0
   13b14:	mov	r0, r5
   13b18:	bl	114e0 <free@plt>
   13b1c:	mov	r0, r8
   13b20:	bl	114e0 <free@plt>
   13b24:	b	13aec <__assert_fail@plt+0x227c>
   13b28:	ldr	r3, [pc, #48]	; 13b60 <__assert_fail@plt+0x22f0>
   13b2c:	mov	r2, #5
   13b30:	ldr	r1, [pc, #44]	; 13b64 <__assert_fail@plt+0x22f4>
   13b34:	ldr	r4, [r3]
   13b38:	bl	11534 <dcgettext@plt>
   13b3c:	ldr	r3, [pc, #36]	; 13b68 <__assert_fail@plt+0x22f8>
   13b40:	mov	r1, #1
   13b44:	mov	r2, r0
   13b48:	mov	r0, r4
   13b4c:	bl	11738 <__fprintf_chk@plt>
   13b50:	mov	r0, #13
   13b54:	bl	11660 <exit@plt>
   13b58:	bl	11558 <__stack_chk_fail@plt>
   13b5c:	andeq	r6, r2, r8, lsl #27
   13b60:	ldrdeq	r7, [r2], -r0
   13b64:	andeq	r5, r1, r0, lsl #19
   13b68:	andeq	r5, r1, ip, lsr #19
   13b6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b70:	sub	sp, sp, #20
   13b74:	ldr	fp, [pc, #288]	; 13c9c <__assert_fail@plt+0x242c>
   13b78:	mov	sl, r0
   13b7c:	mov	r0, #16
   13b80:	ldr	r3, [fp]
   13b84:	str	r3, [sp, #12]
   13b88:	bl	11600 <malloc@plt>
   13b8c:	subs	r8, r0, #0
   13b90:	movne	r5, #0
   13b94:	movne	r7, r5
   13b98:	movne	r4, #256	; 0x100
   13b9c:	addne	r9, sp, #8
   13ba0:	beq	13c68 <__assert_fail@plt+0x23f8>
   13ba4:	mov	r0, r5
   13ba8:	mov	r1, r4
   13bac:	str	r7, [sp, #8]
   13bb0:	bl	1157c <realloc@plt>
   13bb4:	subs	r5, r0, #0
   13bb8:	beq	13c68 <__assert_fail@plt+0x23f8>
   13bbc:	bl	116cc <__errno_location@plt>
   13bc0:	mov	r3, r4
   13bc4:	mov	r2, r5
   13bc8:	mov	r1, r8
   13bcc:	str	r7, [r0]
   13bd0:	mov	r6, r0
   13bd4:	str	r9, [sp]
   13bd8:	mov	r0, sl
   13bdc:	bl	1172c <getgrgid_r@plt>
   13be0:	cmp	r0, #0
   13be4:	bne	13bf4 <__assert_fail@plt+0x2384>
   13be8:	ldr	r3, [sp, #8]
   13bec:	cmp	r3, r8
   13bf0:	beq	13c48 <__assert_fail@plt+0x23d8>
   13bf4:	ldr	r3, [r6]
   13bf8:	cmp	r3, #34	; 0x22
   13bfc:	bne	13c18 <__assert_fail@plt+0x23a8>
   13c00:	cmn	r4, #-1073741823	; 0xc0000001
   13c04:	lslls	r4, r4, #2
   13c08:	bls	13ba4 <__assert_fail@plt+0x2334>
   13c0c:	cmn	r4, #1
   13c10:	mvnne	r4, #0
   13c14:	bne	13ba4 <__assert_fail@plt+0x2334>
   13c18:	mov	r0, r5
   13c1c:	bl	114e0 <free@plt>
   13c20:	mov	r0, r8
   13c24:	bl	114e0 <free@plt>
   13c28:	mov	r4, #0
   13c2c:	ldr	r2, [sp, #12]
   13c30:	ldr	r3, [fp]
   13c34:	mov	r0, r4
   13c38:	cmp	r2, r3
   13c3c:	bne	13c98 <__assert_fail@plt+0x2428>
   13c40:	add	sp, sp, #20
   13c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c48:	mov	r0, r8
   13c4c:	bl	149c8 <__assert_fail@plt+0x3158>
   13c50:	mov	r4, r0
   13c54:	mov	r0, r5
   13c58:	bl	114e0 <free@plt>
   13c5c:	mov	r0, r8
   13c60:	bl	114e0 <free@plt>
   13c64:	b	13c2c <__assert_fail@plt+0x23bc>
   13c68:	ldr	r3, [pc, #48]	; 13ca0 <__assert_fail@plt+0x2430>
   13c6c:	mov	r2, #5
   13c70:	ldr	r1, [pc, #44]	; 13ca4 <__assert_fail@plt+0x2434>
   13c74:	ldr	r4, [r3]
   13c78:	bl	11534 <dcgettext@plt>
   13c7c:	ldr	r3, [pc, #36]	; 13ca8 <__assert_fail@plt+0x2438>
   13c80:	mov	r1, #1
   13c84:	mov	r2, r0
   13c88:	mov	r0, r4
   13c8c:	bl	11738 <__fprintf_chk@plt>
   13c90:	mov	r0, #13
   13c94:	bl	11660 <exit@plt>
   13c98:	bl	11558 <__stack_chk_fail@plt>
   13c9c:	andeq	r6, r2, r8, lsl #27
   13ca0:	ldrdeq	r7, [r2], -r0
   13ca4:	andeq	r5, r1, r0, lsl #19
   13ca8:			; <UNDEFINED> instruction: 0x000159b8
   13cac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cb0:	sub	sp, sp, #20
   13cb4:	ldr	fp, [pc, #288]	; 13ddc <__assert_fail@plt+0x256c>
   13cb8:	mov	sl, r0
   13cbc:	mov	r0, #36	; 0x24
   13cc0:	ldr	r3, [fp]
   13cc4:	str	r3, [sp, #12]
   13cc8:	bl	11600 <malloc@plt>
   13ccc:	subs	r8, r0, #0
   13cd0:	movne	r5, #0
   13cd4:	movne	r7, r5
   13cd8:	movne	r4, #256	; 0x100
   13cdc:	addne	r9, sp, #8
   13ce0:	beq	13da8 <__assert_fail@plt+0x2538>
   13ce4:	mov	r0, r5
   13ce8:	mov	r1, r4
   13cec:	str	r7, [sp, #8]
   13cf0:	bl	1157c <realloc@plt>
   13cf4:	subs	r5, r0, #0
   13cf8:	beq	13da8 <__assert_fail@plt+0x2538>
   13cfc:	bl	116cc <__errno_location@plt>
   13d00:	mov	r3, r4
   13d04:	mov	r2, r5
   13d08:	mov	r1, r8
   13d0c:	str	r7, [r0]
   13d10:	mov	r6, r0
   13d14:	str	r9, [sp]
   13d18:	mov	r0, sl
   13d1c:	bl	11810 <getspnam_r@plt>
   13d20:	cmp	r0, #0
   13d24:	bne	13d34 <__assert_fail@plt+0x24c4>
   13d28:	ldr	r3, [sp, #8]
   13d2c:	cmp	r3, r8
   13d30:	beq	13d88 <__assert_fail@plt+0x2518>
   13d34:	ldr	r3, [r6]
   13d38:	cmp	r3, #34	; 0x22
   13d3c:	bne	13d58 <__assert_fail@plt+0x24e8>
   13d40:	cmn	r4, #-1073741823	; 0xc0000001
   13d44:	lslls	r4, r4, #2
   13d48:	bls	13ce4 <__assert_fail@plt+0x2474>
   13d4c:	cmn	r4, #1
   13d50:	mvnne	r4, #0
   13d54:	bne	13ce4 <__assert_fail@plt+0x2474>
   13d58:	mov	r0, r5
   13d5c:	bl	114e0 <free@plt>
   13d60:	mov	r0, r8
   13d64:	bl	114e0 <free@plt>
   13d68:	mov	r4, #0
   13d6c:	ldr	r2, [sp, #12]
   13d70:	ldr	r3, [fp]
   13d74:	mov	r0, r4
   13d78:	cmp	r2, r3
   13d7c:	bne	13dd8 <__assert_fail@plt+0x2568>
   13d80:	add	sp, sp, #20
   13d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d88:	mov	r0, r8
   13d8c:	bl	151ec <putsgent@@Base+0x2dc>
   13d90:	mov	r4, r0
   13d94:	mov	r0, r5
   13d98:	bl	114e0 <free@plt>
   13d9c:	mov	r0, r8
   13da0:	bl	114e0 <free@plt>
   13da4:	b	13d6c <__assert_fail@plt+0x24fc>
   13da8:	ldr	r3, [pc, #48]	; 13de0 <__assert_fail@plt+0x2570>
   13dac:	mov	r2, #5
   13db0:	ldr	r1, [pc, #44]	; 13de4 <__assert_fail@plt+0x2574>
   13db4:	ldr	r4, [r3]
   13db8:	bl	11534 <dcgettext@plt>
   13dbc:	ldr	r3, [pc, #36]	; 13de8 <__assert_fail@plt+0x2578>
   13dc0:	mov	r1, #1
   13dc4:	mov	r2, r0
   13dc8:	mov	r0, r4
   13dcc:	bl	11738 <__fprintf_chk@plt>
   13dd0:	mov	r0, #13
   13dd4:	bl	11660 <exit@plt>
   13dd8:	bl	11558 <__stack_chk_fail@plt>
   13ddc:	andeq	r6, r2, r8, lsl #27
   13de0:	ldrdeq	r7, [r2], -r0
   13de4:	andeq	r5, r1, r0, lsl #19
   13de8:	andeq	r5, r1, r4, asr #19
   13dec:	push	{r4, lr}
   13df0:	bl	11600 <malloc@plt>
   13df4:	cmp	r0, #0
   13df8:	popne	{r4, pc}
   13dfc:	bl	1187c <__assert_fail@plt+0xc>
   13e00:	push	{r4, r5, r6, lr}
   13e04:	mov	r5, r0
   13e08:	bl	11690 <strlen@plt>
   13e0c:	add	r4, r0, #1
   13e10:	mov	r0, r4
   13e14:	bl	11600 <malloc@plt>
   13e18:	cmp	r0, #0
   13e1c:	beq	13e30 <__assert_fail@plt+0x25c0>
   13e20:	mov	r2, r4
   13e24:	mov	r1, r5
   13e28:	pop	{r4, r5, r6, lr}
   13e2c:	b	11504 <memcpy@plt>
   13e30:	bl	1187c <__assert_fail@plt+0xc>
   13e34:	push	{r4, r5, r6, lr}
   13e38:	mov	r5, r1
   13e3c:	bl	117b0 <crypt@plt>
   13e40:	subs	r4, r0, #0
   13e44:	beq	13e60 <__assert_fail@plt+0x25f0>
   13e48:	bl	11690 <strlen@plt>
   13e4c:	ldrb	r3, [r5]
   13e50:	cmp	r3, #36	; 0x24
   13e54:	beq	13e90 <__assert_fail@plt+0x2620>
   13e58:	cmp	r0, #13
   13e5c:	beq	13e68 <__assert_fail@plt+0x25f8>
   13e60:	mov	r0, r4
   13e64:	pop	{r4, r5, r6, pc}
   13e68:	ldr	r0, [r4]
   13e6c:	ldr	r2, [r4, #8]
   13e70:	ldr	r1, [r4, #4]
   13e74:	ldr	r3, [pc, #136]	; 13f04 <__assert_fail@plt+0x2694>
   13e78:	stmia	r3!, {r0, r1, r2}
   13e7c:	ldrh	r2, [r4, #12]
   13e80:	mov	r4, r3
   13e84:	strh	r2, [r4], #-12
   13e88:	mov	r0, r4
   13e8c:	pop	{r4, r5, r6, pc}
   13e90:	cmp	r0, #13
   13e94:	bhi	13e60 <__assert_fail@plt+0x25f0>
   13e98:	ldrb	r3, [r5, #1]
   13e9c:	cmp	r3, #53	; 0x35
   13ea0:	beq	13efc <__assert_fail@plt+0x268c>
   13ea4:	cmp	r3, #54	; 0x36
   13ea8:	beq	13ef4 <__assert_fail@plt+0x2684>
   13eac:	cmp	r3, #49	; 0x31
   13eb0:	ldreq	r4, [pc, #80]	; 13f08 <__assert_fail@plt+0x2698>
   13eb4:	ldrne	r2, [pc, #80]	; 13f0c <__assert_fail@plt+0x269c>
   13eb8:	movne	r4, r2
   13ebc:	strbne	r3, [r2, #1]
   13ec0:	ldr	r3, [pc, #72]	; 13f10 <__assert_fail@plt+0x26a0>
   13ec4:	mov	r2, #5
   13ec8:	ldr	r1, [pc, #68]	; 13f14 <__assert_fail@plt+0x26a4>
   13ecc:	mov	r0, #0
   13ed0:	ldr	r5, [r3]
   13ed4:	bl	11534 <dcgettext@plt>
   13ed8:	mov	r3, r4
   13edc:	mov	r1, #1
   13ee0:	mov	r2, r0
   13ee4:	mov	r0, r5
   13ee8:	bl	11738 <__fprintf_chk@plt>
   13eec:	mov	r0, #1
   13ef0:	bl	11660 <exit@plt>
   13ef4:	ldr	r4, [pc, #28]	; 13f18 <__assert_fail@plt+0x26a8>
   13ef8:	b	13ec0 <__assert_fail@plt+0x2650>
   13efc:	ldr	r4, [pc, #24]	; 13f1c <__assert_fail@plt+0x26ac>
   13f00:	b	13ec0 <__assert_fail@plt+0x2650>
   13f04:	andeq	r7, r2, ip, lsr r3
   13f08:	strdeq	r5, [r1], -r4
   13f0c:	andeq	r7, r2, r0, asr r0
   13f10:	ldrdeq	r7, [r2], -r0
   13f14:	andeq	r5, r1, r8, lsl #20
   13f18:	andeq	r5, r1, r0, lsl #20
   13f1c:	strdeq	r5, [r1], -r8
   13f20:	push	{r4, r5, r6, lr}
   13f24:	mov	r5, r0
   13f28:	ldr	r6, [pc, #288]	; 14050 <__assert_fail@plt+0x27e0>
   13f2c:	ldr	r0, [r6]
   13f30:	cmp	r0, #0
   13f34:	beq	13f68 <__assert_fail@plt+0x26f8>
   13f38:	mov	r4, r6
   13f3c:	b	13f4c <__assert_fail@plt+0x26dc>
   13f40:	ldr	r0, [r4, #8]!
   13f44:	cmp	r0, #0
   13f48:	beq	13f68 <__assert_fail@plt+0x26f8>
   13f4c:	mov	r1, r5
   13f50:	bl	114a4 <strcmp@plt>
   13f54:	mov	r3, r4
   13f58:	cmp	r0, #0
   13f5c:	bne	13f40 <__assert_fail@plt+0x26d0>
   13f60:	mov	r0, r3
   13f64:	pop	{r4, r5, r6, pc}
   13f68:	ldr	r0, [r6, #424]	; 0x1a8
   13f6c:	cmp	r0, #0
   13f70:	beq	13fa4 <__assert_fail@plt+0x2734>
   13f74:	ldr	r4, [pc, #216]	; 14054 <__assert_fail@plt+0x27e4>
   13f78:	b	13f88 <__assert_fail@plt+0x2718>
   13f7c:	ldr	r0, [r4, #8]!
   13f80:	cmp	r0, #0
   13f84:	beq	13fa4 <__assert_fail@plt+0x2734>
   13f88:	mov	r1, r5
   13f8c:	bl	114a4 <strcmp@plt>
   13f90:	cmp	r0, #0
   13f94:	bne	13f7c <__assert_fail@plt+0x270c>
   13f98:	mov	r3, r0
   13f9c:	mov	r0, r3
   13fa0:	pop	{r4, r5, r6, pc}
   13fa4:	ldr	r3, [pc, #172]	; 14058 <__assert_fail@plt+0x27e8>
   13fa8:	mov	r2, #5
   13fac:	ldr	r1, [pc, #168]	; 1405c <__assert_fail@plt+0x27ec>
   13fb0:	mov	r0, #0
   13fb4:	ldr	r4, [r3]
   13fb8:	bl	11534 <dcgettext@plt>
   13fbc:	mov	r3, r5
   13fc0:	mov	r1, #1
   13fc4:	mov	r2, r0
   13fc8:	mov	r0, r4
   13fcc:	bl	11738 <__fprintf_chk@plt>
   13fd0:	mov	r1, #0
   13fd4:	mov	r0, #6
   13fd8:	bl	11768 <setlocale@plt>
   13fdc:	cmp	r0, #0
   13fe0:	beq	14030 <__assert_fail@plt+0x27c0>
   13fe4:	bl	1154c <strdup@plt>
   13fe8:	subs	r4, r0, #0
   13fec:	beq	14030 <__assert_fail@plt+0x27c0>
   13ff0:	ldr	r1, [pc, #104]	; 14060 <__assert_fail@plt+0x27f0>
   13ff4:	mov	r0, #6
   13ff8:	bl	11768 <setlocale@plt>
   13ffc:	mov	r3, r5
   14000:	ldr	r2, [pc, #92]	; 14064 <__assert_fail@plt+0x27f4>
   14004:	mov	r1, #1
   14008:	mov	r0, #2
   1400c:	bl	1175c <__syslog_chk@plt>
   14010:	mov	r1, r4
   14014:	mov	r0, #6
   14018:	bl	11768 <setlocale@plt>
   1401c:	mov	r0, r4
   14020:	bl	114e0 <free@plt>
   14024:	mov	r3, #0
   14028:	mov	r0, r3
   1402c:	pop	{r4, r5, r6, pc}
   14030:	mov	r3, r5
   14034:	ldr	r2, [pc, #40]	; 14064 <__assert_fail@plt+0x27f4>
   14038:	mov	r1, #1
   1403c:	mov	r0, #2
   14040:	bl	1175c <__syslog_chk@plt>
   14044:	mov	r3, #0
   14048:	mov	r0, r3
   1404c:	pop	{r4, r5, r6, pc}
   14050:	andeq	r7, r2, r4, asr r0
   14054:	strdeq	r7, [r2], -ip
   14058:	ldrdeq	r7, [r2], -r0
   1405c:	andeq	r5, r1, r8, lsr sl
   14060:			; <UNDEFINED> instruction: 0x000154b8
   14064:	andeq	r5, r1, r8, ror sl
   14068:	ldr	r3, [pc, #244]	; 14164 <__assert_fail@plt+0x28f4>
   1406c:	push	{r4, r5, lr}
   14070:	mov	r5, r1
   14074:	ldrb	r3, [r3]
   14078:	sub	sp, sp, #12
   1407c:	cmp	r3, #0
   14080:	beq	140c0 <__assert_fail@plt+0x2850>
   14084:	bl	13f20 <__assert_fail@plt+0x26b0>
   14088:	subs	r4, r0, #0
   1408c:	beq	1415c <__assert_fail@plt+0x28ec>
   14090:	mov	r0, r5
   14094:	bl	1154c <strdup@plt>
   14098:	subs	r5, r0, #0
   1409c:	beq	140d0 <__assert_fail@plt+0x2860>
   140a0:	ldr	r0, [r4, #4]
   140a4:	cmp	r0, #0
   140a8:	beq	140b0 <__assert_fail@plt+0x2840>
   140ac:	bl	114e0 <free@plt>
   140b0:	mov	r0, #0
   140b4:	str	r5, [r4, #4]
   140b8:	add	sp, sp, #12
   140bc:	pop	{r4, r5, pc}
   140c0:	str	r0, [sp, #4]
   140c4:	bl	14178 <__assert_fail@plt+0x2908>
   140c8:	ldr	r0, [sp, #4]
   140cc:	b	14084 <__assert_fail@plt+0x2814>
   140d0:	mov	r2, #5
   140d4:	ldr	r1, [pc, #140]	; 14168 <__assert_fail@plt+0x28f8>
   140d8:	bl	11534 <dcgettext@plt>
   140dc:	ldr	r3, [pc, #136]	; 1416c <__assert_fail@plt+0x28fc>
   140e0:	ldr	r1, [r3]
   140e4:	bl	1181c <fputs@plt>
   140e8:	mov	r1, r5
   140ec:	mov	r0, #6
   140f0:	bl	11768 <setlocale@plt>
   140f4:	cmp	r0, #0
   140f8:	beq	14140 <__assert_fail@plt+0x28d0>
   140fc:	bl	1154c <strdup@plt>
   14100:	subs	r4, r0, #0
   14104:	beq	14140 <__assert_fail@plt+0x28d0>
   14108:	ldr	r1, [pc, #96]	; 14170 <__assert_fail@plt+0x2900>
   1410c:	mov	r0, #6
   14110:	bl	11768 <setlocale@plt>
   14114:	ldr	r2, [pc, #88]	; 14174 <__assert_fail@plt+0x2904>
   14118:	mov	r1, #1
   1411c:	mov	r0, #3
   14120:	bl	1175c <__syslog_chk@plt>
   14124:	mov	r1, r4
   14128:	mov	r0, #6
   1412c:	bl	11768 <setlocale@plt>
   14130:	mov	r0, r4
   14134:	bl	114e0 <free@plt>
   14138:	mvn	r0, #0
   1413c:	b	140b8 <__assert_fail@plt+0x2848>
   14140:	ldr	r2, [pc, #44]	; 14174 <__assert_fail@plt+0x2904>
   14144:	mov	r1, #1
   14148:	mov	r0, #3
   1414c:	bl	1175c <__syslog_chk@plt>
   14150:	mvn	r0, #0
   14154:	add	sp, sp, #12
   14158:	pop	{r4, r5, pc}
   1415c:	mvn	r0, #0
   14160:	b	140b8 <__assert_fail@plt+0x2848>
   14164:			; <UNDEFINED> instruction: 0x000273bc
   14168:	muleq	r1, r8, sl
   1416c:	ldrdeq	r7, [r2], -r0
   14170:			; <UNDEFINED> instruction: 0x000154b8
   14174:	andeq	r5, r1, r4, asr #21
   14178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1417c:	sub	sp, sp, #1040	; 0x410
   14180:	ldr	r7, [pc, #660]	; 1441c <__assert_fail@plt+0x2bac>
   14184:	ldr	r3, [pc, #660]	; 14420 <__assert_fail@plt+0x2bb0>
   14188:	sub	sp, sp, #4
   1418c:	ldr	r2, [r7]
   14190:	mov	r4, #1
   14194:	ldr	r1, [pc, #648]	; 14424 <__assert_fail@plt+0x2bb4>
   14198:	ldr	r0, [pc, #648]	; 14428 <__assert_fail@plt+0x2bb8>
   1419c:	str	r2, [sp, #1036]	; 0x40c
   141a0:	strb	r4, [r3]
   141a4:	bl	117e0 <fopen64@plt>
   141a8:	subs	r6, r0, #0
   141ac:	beq	142ec <__assert_fail@plt+0x2a7c>
   141b0:	ldr	r5, [pc, #628]	; 1442c <__assert_fail@plt+0x2bbc>
   141b4:	ldr	r9, [pc, #628]	; 14430 <__assert_fail@plt+0x2bc0>
   141b8:	add	r4, sp, #12
   141bc:	mov	r2, r6
   141c0:	mov	r1, #1024	; 0x400
   141c4:	mov	r0, r4
   141c8:	bl	114ec <fgets@plt>
   141cc:	subs	sl, r0, #0
   141d0:	beq	142b8 <__assert_fail@plt+0x2a48>
   141d4:	mov	r0, r4
   141d8:	bl	11690 <strlen@plt>
   141dc:	subs	sl, r0, #1
   141e0:	mov	fp, r0
   141e4:	bcc	142b0 <__assert_fail@plt+0x2a40>
   141e8:	bl	11648 <__ctype_b_loc@plt>
   141ec:	add	r2, r4, fp
   141f0:	ldr	r1, [r0]
   141f4:	b	14200 <__assert_fail@plt+0x2990>
   141f8:	subs	sl, sl, #1
   141fc:	bcc	142b0 <__assert_fail@plt+0x2a40>
   14200:	ldrb	r3, [r2, #-1]!
   14204:	lsl	r3, r3, #1
   14208:	ldrh	r3, [r1, r3]
   1420c:	tst	r3, #8192	; 0x2000
   14210:	bne	141f8 <__assert_fail@plt+0x2988>
   14214:	add	sl, sl, #1
   14218:	add	r3, sp, #1040	; 0x410
   1421c:	add	sl, r3, sl
   14220:	mov	r1, r5
   14224:	mov	r3, #0
   14228:	mov	r0, r4
   1422c:	strb	r3, [sl, #-1028]	; 0xfffffbfc
   14230:	bl	11864 <strspn@plt>
   14234:	ldrb	r3, [r4, r0]
   14238:	add	fp, r4, r0
   1423c:	cmp	r3, #0
   14240:	sub	sl, r3, #35	; 0x23
   14244:	clz	sl, sl
   14248:	lsr	sl, sl, #5
   1424c:	moveq	sl, #1
   14250:	cmp	sl, #0
   14254:	bne	141bc <__assert_fail@plt+0x294c>
   14258:	mov	r1, r5
   1425c:	mov	r0, fp
   14260:	bl	114c8 <strcspn@plt>
   14264:	ldrb	r1, [fp, r0]
   14268:	mov	r2, r0
   1426c:	add	r3, fp, r0
   14270:	cmp	r1, #0
   14274:	beq	141bc <__assert_fail@plt+0x294c>
   14278:	add	r8, r3, #1
   1427c:	mov	r1, r9
   14280:	strb	sl, [fp, r2]
   14284:	mov	r0, r8
   14288:	bl	11864 <strspn@plt>
   1428c:	ldr	r1, [pc, #416]	; 14434 <__assert_fail@plt+0x2bc4>
   14290:	add	r8, r8, r0
   14294:	mov	r0, r8
   14298:	bl	114c8 <strcspn@plt>
   1429c:	mov	r1, r8
   142a0:	strb	sl, [r8, r0]
   142a4:	mov	r0, fp
   142a8:	bl	14068 <__assert_fail@plt+0x27f8>
   142ac:	b	141bc <__assert_fail@plt+0x294c>
   142b0:	mov	sl, #0
   142b4:	b	14218 <__assert_fail@plt+0x29a8>
   142b8:	mov	r0, r6
   142bc:	bl	114f8 <ferror@plt>
   142c0:	cmp	r0, #0
   142c4:	bne	14368 <__assert_fail@plt+0x2af8>
   142c8:	mov	r0, r6
   142cc:	bl	11750 <fclose@plt>
   142d0:	ldr	r2, [sp, #1036]	; 0x40c
   142d4:	ldr	r3, [r7]
   142d8:	cmp	r2, r3
   142dc:	bne	14364 <__assert_fail@plt+0x2af4>
   142e0:	add	sp, sp, #1040	; 0x410
   142e4:	add	sp, sp, #4
   142e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142ec:	bl	116cc <__errno_location@plt>
   142f0:	ldr	r5, [r0]
   142f4:	cmp	r5, #2
   142f8:	beq	142d0 <__assert_fail@plt+0x2a60>
   142fc:	mov	r1, r6
   14300:	mov	r0, #6
   14304:	bl	11768 <setlocale@plt>
   14308:	cmp	r0, #0
   1430c:	beq	143d4 <__assert_fail@plt+0x2b64>
   14310:	bl	1154c <strdup@plt>
   14314:	subs	r6, r0, #0
   14318:	beq	143d4 <__assert_fail@plt+0x2b64>
   1431c:	ldr	r1, [pc, #276]	; 14438 <__assert_fail@plt+0x2bc8>
   14320:	mov	r0, #6
   14324:	bl	11768 <setlocale@plt>
   14328:	mov	r0, r5
   1432c:	bl	11618 <strerror@plt>
   14330:	mov	r1, r4
   14334:	ldr	r3, [pc, #236]	; 14428 <__assert_fail@plt+0x2bb8>
   14338:	ldr	r2, [pc, #252]	; 1443c <__assert_fail@plt+0x2bcc>
   1433c:	str	r0, [sp]
   14340:	mov	r0, #2
   14344:	bl	1175c <__syslog_chk@plt>
   14348:	mov	r1, r6
   1434c:	mov	r0, #6
   14350:	bl	11768 <setlocale@plt>
   14354:	mov	r0, r6
   14358:	bl	114e0 <free@plt>
   1435c:	mov	r0, #1
   14360:	bl	11660 <exit@plt>
   14364:	bl	11558 <__stack_chk_fail@plt>
   14368:	bl	116cc <__errno_location@plt>
   1436c:	mov	r1, sl
   14370:	ldr	r4, [r0]
   14374:	mov	r0, #6
   14378:	bl	11768 <setlocale@plt>
   1437c:	cmp	r0, #0
   14380:	beq	143f8 <__assert_fail@plt+0x2b88>
   14384:	bl	1154c <strdup@plt>
   14388:	subs	r5, r0, #0
   1438c:	beq	143f8 <__assert_fail@plt+0x2b88>
   14390:	ldr	r1, [pc, #160]	; 14438 <__assert_fail@plt+0x2bc8>
   14394:	mov	r0, #6
   14398:	bl	11768 <setlocale@plt>
   1439c:	mov	r0, r4
   143a0:	bl	11618 <strerror@plt>
   143a4:	ldr	r3, [pc, #124]	; 14428 <__assert_fail@plt+0x2bb8>
   143a8:	ldr	r2, [pc, #144]	; 14440 <__assert_fail@plt+0x2bd0>
   143ac:	mov	r1, #1
   143b0:	str	r0, [sp]
   143b4:	mov	r0, #2
   143b8:	bl	1175c <__syslog_chk@plt>
   143bc:	mov	r1, r5
   143c0:	mov	r0, #6
   143c4:	bl	11768 <setlocale@plt>
   143c8:	mov	r0, r5
   143cc:	bl	114e0 <free@plt>
   143d0:	b	1435c <__assert_fail@plt+0x2aec>
   143d4:	mov	r0, r5
   143d8:	bl	11618 <strerror@plt>
   143dc:	ldr	r3, [pc, #68]	; 14428 <__assert_fail@plt+0x2bb8>
   143e0:	ldr	r2, [pc, #84]	; 1443c <__assert_fail@plt+0x2bcc>
   143e4:	mov	r1, #1
   143e8:	str	r0, [sp]
   143ec:	mov	r0, #2
   143f0:	bl	1175c <__syslog_chk@plt>
   143f4:	b	1435c <__assert_fail@plt+0x2aec>
   143f8:	mov	r0, r4
   143fc:	bl	11618 <strerror@plt>
   14400:	ldr	r3, [pc, #32]	; 14428 <__assert_fail@plt+0x2bb8>
   14404:	ldr	r2, [pc, #52]	; 14440 <__assert_fail@plt+0x2bd0>
   14408:	mov	r1, #1
   1440c:	str	r0, [sp]
   14410:	mov	r0, #2
   14414:	bl	1175c <__syslog_chk@plt>
   14418:	b	1435c <__assert_fail@plt+0x2aec>
   1441c:	andeq	r6, r2, r8, lsl #27
   14420:			; <UNDEFINED> instruction: 0x000273bc
   14424:	andeq	r5, r1, r4, asr #15
   14428:			; <UNDEFINED> instruction: 0x000272b4
   1442c:	andeq	r5, r1, r8, lsl fp
   14430:	andeq	r5, r1, ip, lsl fp
   14434:	andeq	r5, r1, r0, lsr #22
   14438:			; <UNDEFINED> instruction: 0x000154b8
   1443c:	strdeq	r5, [r1], -r0
   14440:	andeq	r5, r1, r4, lsr #22
   14444:	ldr	r3, [pc, #52]	; 14480 <__assert_fail@plt+0x2c10>
   14448:	push	{lr}		; (str lr, [sp, #-4]!)
   1444c:	sub	sp, sp, #12
   14450:	ldrb	r3, [r3]
   14454:	cmp	r3, #0
   14458:	beq	14470 <__assert_fail@plt+0x2c00>
   1445c:	bl	13f20 <__assert_fail@plt+0x26b0>
   14460:	cmp	r0, #0
   14464:	ldrne	r0, [r0, #4]
   14468:	add	sp, sp, #12
   1446c:	pop	{pc}		; (ldr pc, [sp], #4)
   14470:	str	r0, [sp, #4]
   14474:	bl	14178 <__assert_fail@plt+0x2908>
   14478:	ldr	r0, [sp, #4]
   1447c:	b	1445c <__assert_fail@plt+0x2bec>
   14480:			; <UNDEFINED> instruction: 0x000273bc
   14484:	ldr	r3, [pc, #80]	; 144dc <__assert_fail@plt+0x2c6c>
   14488:	push	{lr}		; (str lr, [sp, #-4]!)
   1448c:	sub	sp, sp, #12
   14490:	ldrb	r3, [r3]
   14494:	cmp	r3, #0
   14498:	beq	144cc <__assert_fail@plt+0x2c5c>
   1449c:	bl	13f20 <__assert_fail@plt+0x26b0>
   144a0:	cmp	r0, #0
   144a4:	beq	144c4 <__assert_fail@plt+0x2c54>
   144a8:	ldr	r0, [r0, #4]
   144ac:	cmp	r0, #0
   144b0:	beq	144c4 <__assert_fail@plt+0x2c54>
   144b4:	ldr	r1, [pc, #36]	; 144e0 <__assert_fail@plt+0x2c70>
   144b8:	bl	115ac <strcasecmp@plt>
   144bc:	clz	r0, r0
   144c0:	lsr	r0, r0, #5
   144c4:	add	sp, sp, #12
   144c8:	pop	{pc}		; (ldr pc, [sp], #4)
   144cc:	str	r0, [sp, #4]
   144d0:	bl	14178 <__assert_fail@plt+0x2908>
   144d4:	ldr	r0, [sp, #4]
   144d8:	b	1449c <__assert_fail@plt+0x2c2c>
   144dc:			; <UNDEFINED> instruction: 0x000273bc
   144e0:	andeq	r5, r1, ip, asr #22
   144e4:	ldr	r3, [pc, #176]	; 1459c <__assert_fail@plt+0x2d2c>
   144e8:	push	{r4, r5, r6, r7, r8, lr}
   144ec:	sub	sp, sp, #16
   144f0:	ldr	r4, [pc, #168]	; 145a0 <__assert_fail@plt+0x2d30>
   144f4:	ldrb	r2, [r3]
   144f8:	mov	r6, r0
   144fc:	ldr	r3, [r4]
   14500:	cmp	r2, #0
   14504:	mov	r5, r1
   14508:	str	r3, [sp, #12]
   1450c:	beq	1455c <__assert_fail@plt+0x2cec>
   14510:	mov	r0, r6
   14514:	bl	13f20 <__assert_fail@plt+0x26b0>
   14518:	subs	r7, r0, #0
   1451c:	beq	14540 <__assert_fail@plt+0x2cd0>
   14520:	ldr	r0, [r7, #4]
   14524:	cmp	r0, #0
   14528:	beq	14540 <__assert_fail@plt+0x2cd0>
   1452c:	add	r1, sp, #8
   14530:	bl	14814 <__assert_fail@plt+0x2fa4>
   14534:	cmp	r0, #0
   14538:	ldrne	r5, [sp, #8]
   1453c:	beq	14564 <__assert_fail@plt+0x2cf4>
   14540:	ldr	r2, [sp, #12]
   14544:	ldr	r3, [r4]
   14548:	mov	r0, r5
   1454c:	cmp	r2, r3
   14550:	bne	14598 <__assert_fail@plt+0x2d28>
   14554:	add	sp, sp, #16
   14558:	pop	{r4, r5, r6, r7, r8, pc}
   1455c:	bl	14178 <__assert_fail@plt+0x2908>
   14560:	b	14510 <__assert_fail@plt+0x2ca0>
   14564:	ldr	r3, [pc, #56]	; 145a4 <__assert_fail@plt+0x2d34>
   14568:	mov	r2, #5
   1456c:	ldr	r1, [pc, #52]	; 145a8 <__assert_fail@plt+0x2d38>
   14570:	ldr	r8, [r3]
   14574:	bl	11534 <dcgettext@plt>
   14578:	ldr	r2, [r7, #4]
   1457c:	mov	r3, r6
   14580:	str	r2, [sp]
   14584:	mov	r1, #1
   14588:	mov	r2, r0
   1458c:	mov	r0, r8
   14590:	bl	11738 <__fprintf_chk@plt>
   14594:	b	14540 <__assert_fail@plt+0x2cd0>
   14598:	bl	11558 <__stack_chk_fail@plt>
   1459c:			; <UNDEFINED> instruction: 0x000273bc
   145a0:	andeq	r6, r2, r8, lsl #27
   145a4:	ldrdeq	r7, [r2], -r0
   145a8:	andeq	r5, r1, r0, asr fp
   145ac:	ldr	r3, [pc, #192]	; 14674 <__assert_fail@plt+0x2e04>
   145b0:	push	{r4, r5, r6, r7, r8, lr}
   145b4:	sub	sp, sp, #16
   145b8:	ldr	r4, [pc, #184]	; 14678 <__assert_fail@plt+0x2e08>
   145bc:	ldrb	r2, [r3]
   145c0:	mov	r5, r0
   145c4:	ldr	r3, [r4]
   145c8:	cmp	r2, #0
   145cc:	mov	r6, r1
   145d0:	str	r3, [sp, #12]
   145d4:	beq	14668 <__assert_fail@plt+0x2df8>
   145d8:	mov	r0, r5
   145dc:	bl	13f20 <__assert_fail@plt+0x26b0>
   145e0:	subs	r7, r0, #0
   145e4:	beq	14614 <__assert_fail@plt+0x2da4>
   145e8:	ldr	r0, [r7, #4]
   145ec:	cmp	r0, #0
   145f0:	beq	14614 <__assert_fail@plt+0x2da4>
   145f4:	add	r1, sp, #8
   145f8:	bl	14814 <__assert_fail@plt+0x2fa4>
   145fc:	cmp	r0, #0
   14600:	beq	14630 <__assert_fail@plt+0x2dc0>
   14604:	ldr	r3, [sp, #8]
   14608:	cmp	r3, #0
   1460c:	movge	r6, r3
   14610:	blt	14630 <__assert_fail@plt+0x2dc0>
   14614:	ldr	r2, [sp, #12]
   14618:	ldr	r3, [r4]
   1461c:	mov	r0, r6
   14620:	cmp	r2, r3
   14624:	bne	14670 <__assert_fail@plt+0x2e00>
   14628:	add	sp, sp, #16
   1462c:	pop	{r4, r5, r6, r7, r8, pc}
   14630:	ldr	r3, [pc, #68]	; 1467c <__assert_fail@plt+0x2e0c>
   14634:	mov	r2, #5
   14638:	ldr	r1, [pc, #64]	; 14680 <__assert_fail@plt+0x2e10>
   1463c:	mov	r0, #0
   14640:	ldr	r8, [r3]
   14644:	bl	11534 <dcgettext@plt>
   14648:	ldr	r2, [r7, #4]
   1464c:	mov	r3, r5
   14650:	str	r2, [sp]
   14654:	mov	r1, #1
   14658:	mov	r2, r0
   1465c:	mov	r0, r8
   14660:	bl	11738 <__fprintf_chk@plt>
   14664:	b	14614 <__assert_fail@plt+0x2da4>
   14668:	bl	14178 <__assert_fail@plt+0x2908>
   1466c:	b	145d8 <__assert_fail@plt+0x2d68>
   14670:	bl	11558 <__stack_chk_fail@plt>
   14674:			; <UNDEFINED> instruction: 0x000273bc
   14678:	andeq	r6, r2, r8, lsl #27
   1467c:	ldrdeq	r7, [r2], -r0
   14680:	andeq	r5, r1, r0, asr fp
   14684:	ldr	r3, [pc, #176]	; 1473c <__assert_fail@plt+0x2ecc>
   14688:	push	{r4, r5, r6, r7, r8, lr}
   1468c:	sub	sp, sp, #16
   14690:	ldr	r4, [pc, #168]	; 14740 <__assert_fail@plt+0x2ed0>
   14694:	ldrb	r2, [r3]
   14698:	mov	r6, r0
   1469c:	ldr	r3, [r4]
   146a0:	cmp	r2, #0
   146a4:	mov	r5, r1
   146a8:	str	r3, [sp, #12]
   146ac:	beq	146fc <__assert_fail@plt+0x2e8c>
   146b0:	mov	r0, r6
   146b4:	bl	13f20 <__assert_fail@plt+0x26b0>
   146b8:	subs	r7, r0, #0
   146bc:	beq	146e0 <__assert_fail@plt+0x2e70>
   146c0:	ldr	r0, [r7, #4]
   146c4:	cmp	r0, #0
   146c8:	beq	146e0 <__assert_fail@plt+0x2e70>
   146cc:	add	r1, sp, #8
   146d0:	bl	14814 <__assert_fail@plt+0x2fa4>
   146d4:	cmp	r0, #0
   146d8:	ldrne	r5, [sp, #8]
   146dc:	beq	14704 <__assert_fail@plt+0x2e94>
   146e0:	ldr	r2, [sp, #12]
   146e4:	ldr	r3, [r4]
   146e8:	mov	r0, r5
   146ec:	cmp	r2, r3
   146f0:	bne	14738 <__assert_fail@plt+0x2ec8>
   146f4:	add	sp, sp, #16
   146f8:	pop	{r4, r5, r6, r7, r8, pc}
   146fc:	bl	14178 <__assert_fail@plt+0x2908>
   14700:	b	146b0 <__assert_fail@plt+0x2e40>
   14704:	ldr	r3, [pc, #56]	; 14744 <__assert_fail@plt+0x2ed4>
   14708:	mov	r2, #5
   1470c:	ldr	r1, [pc, #52]	; 14748 <__assert_fail@plt+0x2ed8>
   14710:	ldr	r8, [r3]
   14714:	bl	11534 <dcgettext@plt>
   14718:	ldr	r2, [r7, #4]
   1471c:	mov	r3, r6
   14720:	str	r2, [sp]
   14724:	mov	r1, #1
   14728:	mov	r2, r0
   1472c:	mov	r0, r8
   14730:	bl	11738 <__fprintf_chk@plt>
   14734:	b	146e0 <__assert_fail@plt+0x2e70>
   14738:	bl	11558 <__stack_chk_fail@plt>
   1473c:			; <UNDEFINED> instruction: 0x000273bc
   14740:	andeq	r6, r2, r8, lsl #27
   14744:	ldrdeq	r7, [r2], -r0
   14748:	andeq	r5, r1, r0, asr fp
   1474c:	ldr	r3, [pc, #176]	; 14804 <__assert_fail@plt+0x2f94>
   14750:	push	{r4, r5, r6, r7, r8, lr}
   14754:	sub	sp, sp, #16
   14758:	ldr	r4, [pc, #168]	; 14808 <__assert_fail@plt+0x2f98>
   1475c:	ldrb	r2, [r3]
   14760:	mov	r6, r0
   14764:	ldr	r3, [r4]
   14768:	cmp	r2, #0
   1476c:	mov	r5, r1
   14770:	str	r3, [sp, #12]
   14774:	beq	147c4 <__assert_fail@plt+0x2f54>
   14778:	mov	r0, r6
   1477c:	bl	13f20 <__assert_fail@plt+0x26b0>
   14780:	subs	r7, r0, #0
   14784:	beq	147a8 <__assert_fail@plt+0x2f38>
   14788:	ldr	r0, [r7, #4]
   1478c:	cmp	r0, #0
   14790:	beq	147a8 <__assert_fail@plt+0x2f38>
   14794:	add	r1, sp, #8
   14798:	bl	148ac <__assert_fail@plt+0x303c>
   1479c:	cmp	r0, #0
   147a0:	ldrne	r5, [sp, #8]
   147a4:	beq	147cc <__assert_fail@plt+0x2f5c>
   147a8:	ldr	r2, [sp, #12]
   147ac:	ldr	r3, [r4]
   147b0:	mov	r0, r5
   147b4:	cmp	r2, r3
   147b8:	bne	14800 <__assert_fail@plt+0x2f90>
   147bc:	add	sp, sp, #16
   147c0:	pop	{r4, r5, r6, r7, r8, pc}
   147c4:	bl	14178 <__assert_fail@plt+0x2908>
   147c8:	b	14778 <__assert_fail@plt+0x2f08>
   147cc:	ldr	r3, [pc, #56]	; 1480c <__assert_fail@plt+0x2f9c>
   147d0:	mov	r2, #5
   147d4:	ldr	r1, [pc, #52]	; 14810 <__assert_fail@plt+0x2fa0>
   147d8:	ldr	r8, [r3]
   147dc:	bl	11534 <dcgettext@plt>
   147e0:	ldr	r2, [r7, #4]
   147e4:	mov	r3, r6
   147e8:	str	r2, [sp]
   147ec:	mov	r1, #1
   147f0:	mov	r2, r0
   147f4:	mov	r0, r8
   147f8:	bl	11738 <__fprintf_chk@plt>
   147fc:	b	147a8 <__assert_fail@plt+0x2f38>
   14800:	bl	11558 <__stack_chk_fail@plt>
   14804:			; <UNDEFINED> instruction: 0x000273bc
   14808:	andeq	r6, r2, r8, lsl #27
   1480c:	ldrdeq	r7, [r2], -r0
   14810:	andeq	r5, r1, r0, asr fp
   14814:	push	{r4, r5, r6, r7, r8, lr}
   14818:	sub	sp, sp, #8
   1481c:	ldr	r5, [pc, #132]	; 148a8 <__assert_fail@plt+0x3038>
   14820:	mov	r6, r0
   14824:	mov	r8, r1
   14828:	ldr	r3, [r5]
   1482c:	mov	r4, #0
   14830:	str	r3, [sp, #4]
   14834:	bl	116cc <__errno_location@plt>
   14838:	mov	r2, r4
   1483c:	mov	r1, sp
   14840:	str	r4, [r0]
   14844:	mov	r7, r0
   14848:	mov	r0, r6
   1484c:	bl	114bc <strtol@plt>
   14850:	ldrb	r2, [r6]
   14854:	cmp	r2, r4
   14858:	beq	1489c <__assert_fail@plt+0x302c>
   1485c:	ldr	r3, [sp]
   14860:	ldrb	r2, [r3]
   14864:	cmp	r2, r4
   14868:	movne	r0, r4
   1486c:	bne	14884 <__assert_fail@plt+0x3014>
   14870:	ldr	r3, [r7]
   14874:	cmp	r3, #34	; 0x22
   14878:	beq	1489c <__assert_fail@plt+0x302c>
   1487c:	str	r0, [r8]
   14880:	mov	r0, #1
   14884:	ldr	r2, [sp, #4]
   14888:	ldr	r3, [r5]
   1488c:	cmp	r2, r3
   14890:	bne	148a4 <__assert_fail@plt+0x3034>
   14894:	add	sp, sp, #8
   14898:	pop	{r4, r5, r6, r7, r8, pc}
   1489c:	mov	r0, r2
   148a0:	b	14884 <__assert_fail@plt+0x3014>
   148a4:	bl	11558 <__stack_chk_fail@plt>
   148a8:	andeq	r6, r2, r8, lsl #27
   148ac:	push	{r4, r5, r6, r7, r8, lr}
   148b0:	sub	sp, sp, #8
   148b4:	ldr	r5, [pc, #132]	; 14940 <__assert_fail@plt+0x30d0>
   148b8:	mov	r6, r0
   148bc:	mov	r8, r1
   148c0:	ldr	r3, [r5]
   148c4:	mov	r4, #0
   148c8:	str	r3, [sp, #4]
   148cc:	bl	116cc <__errno_location@plt>
   148d0:	mov	r2, r4
   148d4:	mov	r1, sp
   148d8:	str	r4, [r0]
   148dc:	mov	r7, r0
   148e0:	mov	r0, r6
   148e4:	bl	11678 <strtoul@plt>
   148e8:	ldrb	r2, [r6]
   148ec:	cmp	r2, r4
   148f0:	beq	14934 <__assert_fail@plt+0x30c4>
   148f4:	ldr	r3, [sp]
   148f8:	ldrb	r2, [r3]
   148fc:	cmp	r2, r4
   14900:	movne	r0, r4
   14904:	bne	1491c <__assert_fail@plt+0x30ac>
   14908:	ldr	r3, [r7]
   1490c:	cmp	r3, #34	; 0x22
   14910:	beq	14934 <__assert_fail@plt+0x30c4>
   14914:	str	r0, [r8]
   14918:	mov	r0, #1
   1491c:	ldr	r2, [sp, #4]
   14920:	ldr	r3, [r5]
   14924:	cmp	r2, r3
   14928:	bne	1493c <__assert_fail@plt+0x30cc>
   1492c:	add	sp, sp, #8
   14930:	pop	{r4, r5, r6, r7, r8, pc}
   14934:	mov	r0, r2
   14938:	b	1491c <__assert_fail@plt+0x30ac>
   1493c:	bl	11558 <__stack_chk_fail@plt>
   14940:	andeq	r6, r2, r8, lsl #27
   14944:	push	{r4, r5, r6, lr}
   14948:	mov	r5, r0
   1494c:	ldr	r0, [r0]
   14950:	bl	114e0 <free@plt>
   14954:	ldr	r4, [r5, #4]
   14958:	cmp	r4, #0
   1495c:	beq	14980 <__assert_fail@plt+0x3110>
   14960:	mov	r0, r4
   14964:	bl	11690 <strlen@plt>
   14968:	mov	r1, #0
   1496c:	mov	r2, r0
   14970:	mov	r0, r4
   14974:	bl	116e4 <memset@plt>
   14978:	ldr	r0, [r5, #4]
   1497c:	bl	114e0 <free@plt>
   14980:	ldr	r3, [r5, #12]
   14984:	cmp	r3, #0
   14988:	beq	149bc <__assert_fail@plt+0x314c>
   1498c:	ldr	r0, [r3]
   14990:	cmp	r0, #0
   14994:	beq	149b4 <__assert_fail@plt+0x3144>
   14998:	mov	r4, #4
   1499c:	bl	114e0 <free@plt>
   149a0:	ldr	r3, [r5, #12]
   149a4:	ldr	r0, [r3, r4]
   149a8:	add	r4, r4, #4
   149ac:	cmp	r0, #0
   149b0:	bne	1499c <__assert_fail@plt+0x312c>
   149b4:	mov	r0, r3
   149b8:	bl	114e0 <free@plt>
   149bc:	mov	r0, r5
   149c0:	pop	{r4, r5, r6, lr}
   149c4:	b	114e0 <free@plt>
   149c8:	push	{r4, r5, r6, r7, r8, lr}
   149cc:	mov	r1, #1
   149d0:	mov	r4, r0
   149d4:	mov	r0, #16
   149d8:	bl	11480 <calloc@plt>
   149dc:	subs	r7, r0, #0
   149e0:	beq	14aa4 <__assert_fail@plt+0x3234>
   149e4:	ldr	r3, [r4, #8]
   149e8:	ldr	r0, [r4]
   149ec:	str	r3, [r7, #8]
   149f0:	bl	1154c <strdup@plt>
   149f4:	cmp	r0, #0
   149f8:	mov	r5, r0
   149fc:	str	r0, [r7]
   14a00:	beq	14a98 <__assert_fail@plt+0x3228>
   14a04:	ldr	r0, [r4, #4]
   14a08:	bl	1154c <strdup@plt>
   14a0c:	cmp	r0, #0
   14a10:	mov	r5, r0
   14a14:	str	r0, [r7, #4]
   14a18:	beq	14a98 <__assert_fail@plt+0x3228>
   14a1c:	ldr	r6, [r4, #12]
   14a20:	ldr	r4, [r6]
   14a24:	cmp	r4, #0
   14a28:	movne	r3, r6
   14a2c:	movne	r0, #0
   14a30:	bne	14a3c <__assert_fail@plt+0x31cc>
   14a34:	b	14ac0 <__assert_fail@plt+0x3250>
   14a38:	mov	r0, r1
   14a3c:	ldr	r2, [r3, #4]!
   14a40:	add	r1, r0, #1
   14a44:	cmp	r2, #0
   14a48:	bne	14a38 <__assert_fail@plt+0x31c8>
   14a4c:	add	r0, r0, #2
   14a50:	lsl	r0, r0, #2
   14a54:	bl	11600 <malloc@plt>
   14a58:	cmp	r0, #0
   14a5c:	mov	r8, r0
   14a60:	str	r0, [r7, #12]
   14a64:	movne	r5, r0
   14a68:	bne	14a80 <__assert_fail@plt+0x3210>
   14a6c:	b	14a98 <__assert_fail@plt+0x3228>
   14a70:	ldr	r4, [r6, #4]!
   14a74:	sub	r0, r5, r8
   14a78:	cmp	r4, #0
   14a7c:	beq	14aac <__assert_fail@plt+0x323c>
   14a80:	mov	r0, r4
   14a84:	bl	1154c <strdup@plt>
   14a88:	cmp	r0, #0
   14a8c:	mov	r4, r0
   14a90:	str	r0, [r5], #4
   14a94:	bne	14a70 <__assert_fail@plt+0x3200>
   14a98:	mov	r0, r7
   14a9c:	bl	14944 <__assert_fail@plt+0x30d4>
   14aa0:	mov	r7, #0
   14aa4:	mov	r0, r7
   14aa8:	pop	{r4, r5, r6, r7, r8, pc}
   14aac:	add	r0, r8, r0
   14ab0:	mov	r3, #0
   14ab4:	str	r3, [r0]
   14ab8:	mov	r0, r7
   14abc:	pop	{r4, r5, r6, r7, r8, pc}
   14ac0:	mov	r0, #4
   14ac4:	bl	11600 <malloc@plt>
   14ac8:	cmp	r0, #0
   14acc:	str	r0, [r7, #12]
   14ad0:	beq	14a98 <__assert_fail@plt+0x3228>
   14ad4:	b	14ab0 <__assert_fail@plt+0x3240>
   14ad8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14adc:	mov	r9, r2
   14ae0:	ldr	r8, [r2]
   14ae4:	mov	r4, r0
   14ae8:	add	r7, r8, #1
   14aec:	mov	r6, r1
   14af0:	mov	sl, #0
   14af4:	lsl	r5, r7, #2
   14af8:	cmp	r4, #0
   14afc:	bne	14b18 <__assert_fail@plt+0x32a8>
   14b00:	b	14b24 <__assert_fail@plt+0x32b4>
   14b04:	mov	r1, r5
   14b08:	ldr	r0, [r6]
   14b0c:	bl	1157c <realloc@plt>
   14b10:	subs	fp, r0, #0
   14b14:	bne	14b48 <__assert_fail@plt+0x32d8>
   14b18:	ldrb	r3, [r4]
   14b1c:	cmp	r3, #0
   14b20:	bne	14b04 <__assert_fail@plt+0x3294>
   14b24:	ldr	fp, [r6]
   14b28:	mov	r1, r5
   14b2c:	mov	r0, fp
   14b30:	bl	1157c <realloc@plt>
   14b34:	cmp	r0, #0
   14b38:	movne	r3, #0
   14b3c:	strne	r3, [r0, r8, lsl #2]
   14b40:	strne	r0, [r6]
   14b44:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b48:	add	r3, fp, r5
   14b4c:	mov	r0, r4
   14b50:	str	r4, [r3, #-4]
   14b54:	mov	r1, #44	; 0x2c
   14b58:	str	fp, [r6]
   14b5c:	str	r7, [r9]
   14b60:	bl	1169c <strchr@plt>
   14b64:	add	r5, r5, #4
   14b68:	subs	r4, r0, #0
   14b6c:	movne	r8, r7
   14b70:	strbne	sl, [r4], #1
   14b74:	addne	r7, r7, #1
   14b78:	bne	14af8 <__assert_fail@plt+0x3288>
   14b7c:	add	r5, r8, #2
   14b80:	mov	r8, r7
   14b84:	lsl	r5, r5, #2
   14b88:	b	14b28 <__assert_fail@plt+0x32b8>

00014b8c <setsgent@@Base>:
   14b8c:	push	{r4, lr}
   14b90:	ldr	r4, [pc, #36]	; 14bbc <setsgent@@Base+0x30>
   14b94:	ldr	r0, [r4]
   14b98:	cmp	r0, #0
   14b9c:	beq	14ba8 <setsgent@@Base+0x1c>
   14ba0:	pop	{r4, lr}
   14ba4:	b	11564 <rewind@plt>
   14ba8:	ldr	r1, [pc, #16]	; 14bc0 <setsgent@@Base+0x34>
   14bac:	ldr	r0, [pc, #16]	; 14bc4 <setsgent@@Base+0x38>
   14bb0:	bl	117e0 <fopen64@plt>
   14bb4:	str	r0, [r4]
   14bb8:	pop	{r4, pc}
   14bbc:	andeq	r7, r2, r0, asr #7
   14bc0:	andeq	r5, r1, r4, asr #15
   14bc4:	andeq	r5, r1, ip, asr pc

00014bc8 <endsgent@@Base>:
   14bc8:	push	{r4, lr}
   14bcc:	ldr	r4, [pc, #24]	; 14bec <endsgent@@Base+0x24>
   14bd0:	ldr	r0, [r4]
   14bd4:	cmp	r0, #0
   14bd8:	beq	14be0 <endsgent@@Base+0x18>
   14bdc:	bl	11750 <fclose@plt>
   14be0:	mov	r3, #0
   14be4:	str	r3, [r4]
   14be8:	pop	{r4, pc}
   14bec:	andeq	r7, r2, r0, asr #7

00014bf0 <sgetsgent@@Base>:
   14bf0:	push	{r4, r5, r6, r7, r8, r9, lr}
   14bf4:	sub	sp, sp, #28
   14bf8:	ldr	r8, [pc, #388]	; 14d84 <sgetsgent@@Base+0x194>
   14bfc:	mov	r9, r0
   14c00:	ldr	r6, [pc, #384]	; 14d88 <sgetsgent@@Base+0x198>
   14c04:	ldr	r3, [r8]
   14c08:	str	r3, [sp, #20]
   14c0c:	bl	11690 <strlen@plt>
   14c10:	ldr	r3, [r6, #24]
   14c14:	ldr	r4, [r6, #20]
   14c18:	add	r5, r0, #1
   14c1c:	cmp	r3, r5
   14c20:	mov	r7, r0
   14c24:	bcs	14c4c <sgetsgent@@Base+0x5c>
   14c28:	mov	r0, r4
   14c2c:	mov	r1, r5
   14c30:	bl	1157c <realloc@plt>
   14c34:	subs	r4, r0, #0
   14c38:	beq	14d4c <sgetsgent@@Base+0x15c>
   14c3c:	mov	r1, r9
   14c40:	mov	r2, r5
   14c44:	strd	r4, [r6, #20]
   14c48:	b	14c58 <sgetsgent@@Base+0x68>
   14c4c:	mov	r2, r5
   14c50:	mov	r1, r9
   14c54:	mov	r0, r4
   14c58:	bl	116f0 <strncpy@plt>
   14c5c:	mov	r3, #0
   14c60:	strb	r3, [r4, r7]
   14c64:	mov	r1, #10
   14c68:	mov	r0, r4
   14c6c:	bl	117a4 <strrchr@plt>
   14c70:	mov	r5, #0
   14c74:	mov	r9, r5
   14c78:	add	r7, sp, #4
   14c7c:	cmp	r0, #0
   14c80:	movne	r3, #0
   14c84:	strbne	r3, [r0]
   14c88:	str	r4, [r7, r5, lsl #2]
   14c8c:	mov	r0, r4
   14c90:	mov	r1, #58	; 0x3a
   14c94:	bl	1169c <strchr@plt>
   14c98:	add	r5, r5, #1
   14c9c:	cmp	r0, #0
   14ca0:	beq	14ccc <sgetsgent@@Base+0xdc>
   14ca4:	adds	r3, r0, #1
   14ca8:	movne	r3, #1
   14cac:	cmp	r5, #3
   14cb0:	movgt	r2, #0
   14cb4:	andle	r2, r3, #1
   14cb8:	cmp	r2, #0
   14cbc:	strb	r9, [r0]
   14cc0:	add	r4, r0, #1
   14cc4:	bne	14c88 <sgetsgent@@Base+0x98>
   14cc8:	b	14cd0 <sgetsgent@@Base+0xe0>
   14ccc:	mov	r3, r0
   14cd0:	cmp	r5, #4
   14cd4:	moveq	r5, r3
   14cd8:	orrne	r5, r3, #1
   14cdc:	cmp	r5, #0
   14ce0:	bne	14d4c <sgetsgent@@Base+0x15c>
   14ce4:	ldr	r1, [r6, #28]
   14ce8:	ldrd	r2, [sp, #4]
   14cec:	cmp	r1, #0
   14cf0:	strd	r2, [r6, #4]
   14cf4:	bne	14d6c <sgetsgent@@Base+0x17c>
   14cf8:	ldr	r3, [r6, #36]	; 0x24
   14cfc:	cmp	r3, #0
   14d00:	bne	14d54 <sgetsgent@@Base+0x164>
   14d04:	ldr	r2, [pc, #128]	; 14d8c <sgetsgent@@Base+0x19c>
   14d08:	ldr	r0, [sp, #12]
   14d0c:	add	r1, r2, #4
   14d10:	bl	14ad8 <__assert_fail@plt+0x3268>
   14d14:	ldr	r2, [pc, #116]	; 14d90 <sgetsgent@@Base+0x1a0>
   14d18:	add	r1, r2, #4
   14d1c:	str	r0, [r6, #12]
   14d20:	ldr	r0, [sp, #16]
   14d24:	bl	14ad8 <__assert_fail@plt+0x3268>
   14d28:	ldr	r3, [pc, #100]	; 14d94 <sgetsgent@@Base+0x1a4>
   14d2c:	str	r0, [r6, #16]
   14d30:	ldr	r1, [sp, #20]
   14d34:	ldr	r2, [r8]
   14d38:	mov	r0, r3
   14d3c:	cmp	r1, r2
   14d40:	bne	14d80 <sgetsgent@@Base+0x190>
   14d44:	add	sp, sp, #28
   14d48:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14d4c:	mov	r3, #0
   14d50:	b	14d30 <sgetsgent@@Base+0x140>
   14d54:	mov	r4, #0
   14d58:	ldr	r0, [r6, #40]	; 0x28
   14d5c:	str	r4, [r6, #36]	; 0x24
   14d60:	bl	114e0 <free@plt>
   14d64:	str	r4, [r6, #40]	; 0x28
   14d68:	b	14d04 <sgetsgent@@Base+0x114>
   14d6c:	ldr	r0, [r6, #32]
   14d70:	str	r5, [r6, #28]
   14d74:	bl	114e0 <free@plt>
   14d78:	str	r5, [r6, #32]
   14d7c:	b	14cf8 <sgetsgent@@Base+0x108>
   14d80:	bl	11558 <__stack_chk_fail@plt>
   14d84:	andeq	r6, r2, r8, lsl #27
   14d88:	andeq	r7, r2, r0, asr #7
   14d8c:	ldrdeq	r7, [r2], -ip
   14d90:	andeq	r7, r2, r4, ror #7
   14d94:	andeq	r7, r2, r4, asr #7

00014d98 <fgetsgent@@Base>:
   14d98:	push	{r4, r5, r6, r7, r8, lr}
   14d9c:	mov	r8, r0
   14da0:	ldr	r6, [pc, #252]	; 14ea4 <fgetsgent@@Base+0x10c>
   14da4:	ldr	r3, [r6, #44]	; 0x2c
   14da8:	cmp	r3, #0
   14dac:	beq	14e68 <fgetsgent@@Base+0xd0>
   14db0:	cmp	r8, #0
   14db4:	beq	14e60 <fgetsgent@@Base+0xc8>
   14db8:	mov	r2, r8
   14dbc:	ldr	r1, [r6, #44]	; 0x2c
   14dc0:	ldr	r0, [r6, #48]	; 0x30
   14dc4:	bl	152e4 <putsgent@@Base+0x3d4>
   14dc8:	ldr	r3, [r6, #48]	; 0x30
   14dcc:	cmp	r0, r3
   14dd0:	mov	r4, r0
   14dd4:	beq	14e34 <fgetsgent@@Base+0x9c>
   14dd8:	b	14e60 <fgetsgent@@Base+0xc8>
   14ddc:	bl	1166c <feof@plt>
   14de0:	cmp	r0, #0
   14de4:	mov	r0, r4
   14de8:	bne	14e88 <fgetsgent@@Base+0xf0>
   14dec:	ldr	r4, [r6, #44]	; 0x2c
   14df0:	lsl	r4, r4, #1
   14df4:	mov	r1, r4
   14df8:	bl	1157c <realloc@plt>
   14dfc:	subs	r7, r0, #0
   14e00:	beq	14e60 <fgetsgent@@Base+0xc8>
   14e04:	str	r4, [r6, #44]	; 0x2c
   14e08:	str	r7, [r6, #48]	; 0x30
   14e0c:	bl	11690 <strlen@plt>
   14e10:	mov	r2, r8
   14e14:	sub	r1, r4, r0
   14e18:	mov	r5, r0
   14e1c:	add	r0, r7, r0
   14e20:	bl	152e4 <putsgent@@Base+0x3d4>
   14e24:	ldr	r4, [r6, #48]	; 0x30
   14e28:	add	r5, r4, r5
   14e2c:	cmp	r0, r5
   14e30:	bne	14e60 <fgetsgent@@Base+0xc8>
   14e34:	mov	r1, #10
   14e38:	mov	r0, r4
   14e3c:	bl	117a4 <strrchr@plt>
   14e40:	subs	r3, r0, #0
   14e44:	mov	r0, r8
   14e48:	beq	14ddc <fgetsgent@@Base+0x44>
   14e4c:	mov	r2, #0
   14e50:	strb	r2, [r3]
   14e54:	mov	r0, r4
   14e58:	pop	{r4, r5, r6, r7, r8, lr}
   14e5c:	b	14bf0 <sgetsgent@@Base>
   14e60:	mov	r0, #0
   14e64:	pop	{r4, r5, r6, r7, r8, pc}
   14e68:	mov	r0, #8192	; 0x2000
   14e6c:	bl	11600 <malloc@plt>
   14e70:	cmp	r0, #0
   14e74:	str	r0, [r6, #48]	; 0x30
   14e78:	beq	14e60 <fgetsgent@@Base+0xc8>
   14e7c:	mov	r3, #8192	; 0x2000
   14e80:	str	r3, [r6, #44]	; 0x2c
   14e84:	b	14db0 <fgetsgent@@Base+0x18>
   14e88:	mov	r1, #10
   14e8c:	bl	117a4 <strrchr@plt>
   14e90:	subs	r3, r0, #0
   14e94:	bne	14e4c <fgetsgent@@Base+0xb4>
   14e98:	mov	r0, r4
   14e9c:	pop	{r4, r5, r6, r7, r8, lr}
   14ea0:	b	14bf0 <sgetsgent@@Base>
   14ea4:	andeq	r7, r2, r0, asr #7

00014ea8 <getsgent@@Base>:
   14ea8:	push	{r4, lr}
   14eac:	ldr	r4, [pc, #32]	; 14ed4 <getsgent@@Base+0x2c>
   14eb0:	ldr	r0, [r4]
   14eb4:	cmp	r0, #0
   14eb8:	beq	14ec4 <getsgent@@Base+0x1c>
   14ebc:	pop	{r4, lr}
   14ec0:	b	14d98 <fgetsgent@@Base>
   14ec4:	bl	14b8c <setsgent@@Base>
   14ec8:	ldr	r0, [r4]
   14ecc:	pop	{r4, lr}
   14ed0:	b	14d98 <fgetsgent@@Base>
   14ed4:	andeq	r7, r2, r0, asr #7

00014ed8 <getsgnam@@Base>:
   14ed8:	push	{r4, r5, r6, lr}
   14edc:	mov	r5, r0
   14ee0:	bl	14b8c <setsgent@@Base>
   14ee4:	b	14ef8 <getsgnam@@Base+0x20>
   14ee8:	ldr	r1, [r4]
   14eec:	bl	114a4 <strcmp@plt>
   14ef0:	cmp	r0, #0
   14ef4:	beq	14f08 <getsgnam@@Base+0x30>
   14ef8:	bl	14ea8 <getsgent@@Base>
   14efc:	subs	r4, r0, #0
   14f00:	mov	r0, r5
   14f04:	bne	14ee8 <getsgnam@@Base+0x10>
   14f08:	mov	r0, r4
   14f0c:	pop	{r4, r5, r6, pc}

00014f10 <putsgent@@Base>:
   14f10:	cmp	r0, #0
   14f14:	cmpne	r1, #0
   14f18:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f1c:	beq	150b4 <putsgent@@Base+0x1a4>
   14f20:	ldr	fp, [r0]
   14f24:	mov	r5, r0
   14f28:	mov	r0, fp
   14f2c:	mov	r7, r1
   14f30:	bl	11690 <strlen@plt>
   14f34:	ldr	sl, [r5, #4]
   14f38:	mov	r9, r0
   14f3c:	mov	r0, sl
   14f40:	bl	11690 <strlen@plt>
   14f44:	ldr	r6, [r5, #8]
   14f48:	cmp	r6, #0
   14f4c:	add	r0, r9, r0
   14f50:	add	r4, r0, #10
   14f54:	beq	14f84 <putsgent@@Base+0x74>
   14f58:	ldr	r3, [r6]
   14f5c:	cmp	r3, #0
   14f60:	beq	14f84 <putsgent@@Base+0x74>
   14f64:	mov	r8, r6
   14f68:	mov	r0, r3
   14f6c:	bl	11690 <strlen@plt>
   14f70:	ldr	r3, [r8, #4]!
   14f74:	cmp	r3, #0
   14f78:	add	r0, r0, #1
   14f7c:	add	r4, r4, r0
   14f80:	bne	14f68 <putsgent@@Base+0x58>
   14f84:	ldr	r5, [r5, #12]
   14f88:	cmp	r5, #0
   14f8c:	beq	14fbc <putsgent@@Base+0xac>
   14f90:	ldr	r3, [r5]
   14f94:	cmp	r3, #0
   14f98:	beq	14fbc <putsgent@@Base+0xac>
   14f9c:	mov	r8, r5
   14fa0:	mov	r0, r3
   14fa4:	bl	11690 <strlen@plt>
   14fa8:	ldr	r3, [r8, #4]!
   14fac:	cmp	r3, #0
   14fb0:	add	r0, r0, #1
   14fb4:	add	r4, r4, r0
   14fb8:	bne	14fa0 <putsgent@@Base+0x90>
   14fbc:	mov	r0, r4
   14fc0:	bl	11600 <malloc@plt>
   14fc4:	subs	r8, r0, #0
   14fc8:	beq	150b4 <putsgent@@Base+0x1a4>
   14fcc:	mov	r1, fp
   14fd0:	mov	r2, r9
   14fd4:	bl	11504 <memcpy@plt>
   14fd8:	mov	r4, #58	; 0x3a
   14fdc:	add	r0, r8, r9
   14fe0:	mov	r1, sl
   14fe4:	add	r0, r0, #1
   14fe8:	strb	r4, [r8, r9]
   14fec:	bl	11528 <stpcpy@plt>
   14ff0:	mov	r3, r0
   14ff4:	add	r0, r0, #1
   14ff8:	strb	r4, [r3]
   14ffc:	ldr	r1, [r6]
   15000:	cmp	r1, #0
   15004:	moveq	r3, r0
   15008:	beq	1503c <putsgent@@Base+0x12c>
   1500c:	mov	r4, r6
   15010:	mov	r6, #44	; 0x2c
   15014:	b	15020 <putsgent@@Base+0x110>
   15018:	strb	r6, [r2]
   1501c:	ldr	r1, [r4]
   15020:	bl	11528 <stpcpy@plt>
   15024:	ldr	r3, [r4, #4]!
   15028:	cmp	r3, #0
   1502c:	mov	r2, r0
   15030:	mov	r3, r2
   15034:	add	r0, r0, #1
   15038:	bne	15018 <putsgent@@Base+0x108>
   1503c:	mov	r0, r3
   15040:	mov	r3, #58	; 0x3a
   15044:	strb	r3, [r0], #1
   15048:	ldr	r1, [r5]
   1504c:	cmp	r1, #0
   15050:	beq	15078 <putsgent@@Base+0x168>
   15054:	mov	r4, r5
   15058:	mov	r5, #44	; 0x2c
   1505c:	b	15068 <putsgent@@Base+0x158>
   15060:	strb	r5, [r0], #1
   15064:	ldr	r1, [r4]
   15068:	bl	11528 <stpcpy@plt>
   1506c:	ldr	r3, [r4, #4]!
   15070:	cmp	r3, #0
   15074:	bne	15060 <putsgent@@Base+0x150>
   15078:	mov	r3, #10
   1507c:	mov	r5, #0
   15080:	strb	r3, [r0]
   15084:	strb	r5, [r0, #1]
   15088:	mov	r1, r7
   1508c:	mov	r0, r8
   15090:	bl	15360 <putsgent@@Base+0x450>
   15094:	mov	r4, r0
   15098:	cmn	r4, #1
   1509c:	mov	r0, r8
   150a0:	beq	150bc <putsgent@@Base+0x1ac>
   150a4:	bl	114e0 <free@plt>
   150a8:	mov	r4, r5
   150ac:	mov	r0, r4
   150b0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150b4:	mvn	r4, #0
   150b8:	b	150ac <putsgent@@Base+0x19c>
   150bc:	bl	114e0 <free@plt>
   150c0:	b	150ac <putsgent@@Base+0x19c>
   150c4:	push	{r4, r5, r6, lr}
   150c8:	mov	r4, r0
   150cc:	ldr	r0, [r0]
   150d0:	bl	114e0 <free@plt>
   150d4:	ldr	r5, [r4, #4]
   150d8:	cmp	r5, #0
   150dc:	beq	15100 <putsgent@@Base+0x1f0>
   150e0:	mov	r0, r5
   150e4:	bl	11690 <strlen@plt>
   150e8:	mov	r1, #0
   150ec:	mov	r2, r0
   150f0:	mov	r0, r5
   150f4:	bl	116e4 <memset@plt>
   150f8:	ldr	r0, [r4, #4]
   150fc:	bl	114e0 <free@plt>
   15100:	ldr	r0, [r4, #16]
   15104:	bl	114e0 <free@plt>
   15108:	ldr	r0, [r4, #20]
   1510c:	bl	114e0 <free@plt>
   15110:	ldr	r0, [r4, #24]
   15114:	bl	114e0 <free@plt>
   15118:	mov	r0, r4
   1511c:	pop	{r4, r5, r6, lr}
   15120:	b	114e0 <free@plt>
   15124:	push	{r4, r5, r6, lr}
   15128:	mov	r1, #1
   1512c:	mov	r5, r0
   15130:	mov	r0, #28
   15134:	bl	11480 <calloc@plt>
   15138:	subs	r4, r0, #0
   1513c:	beq	151c0 <putsgent@@Base+0x2b0>
   15140:	ldrd	r2, [r5, #8]
   15144:	ldr	r0, [r5]
   15148:	strd	r2, [r4, #8]
   1514c:	bl	1154c <strdup@plt>
   15150:	cmp	r0, #0
   15154:	mov	r6, r0
   15158:	str	r0, [r4]
   1515c:	beq	151c8 <putsgent@@Base+0x2b8>
   15160:	ldr	r0, [r5, #4]
   15164:	bl	1154c <strdup@plt>
   15168:	cmp	r0, #0
   1516c:	mov	r6, r0
   15170:	str	r0, [r4, #4]
   15174:	beq	151c8 <putsgent@@Base+0x2b8>
   15178:	ldr	r0, [r5, #16]
   1517c:	bl	1154c <strdup@plt>
   15180:	cmp	r0, #0
   15184:	mov	r6, r0
   15188:	str	r0, [r4, #16]
   1518c:	beq	151c8 <putsgent@@Base+0x2b8>
   15190:	ldr	r0, [r5, #20]
   15194:	bl	1154c <strdup@plt>
   15198:	cmp	r0, #0
   1519c:	mov	r6, r0
   151a0:	str	r0, [r4, #20]
   151a4:	beq	151c8 <putsgent@@Base+0x2b8>
   151a8:	ldr	r0, [r5, #24]
   151ac:	bl	1154c <strdup@plt>
   151b0:	cmp	r0, #0
   151b4:	mov	r5, r0
   151b8:	str	r0, [r4, #24]
   151bc:	beq	151dc <putsgent@@Base+0x2cc>
   151c0:	mov	r0, r4
   151c4:	pop	{r4, r5, r6, pc}
   151c8:	mov	r0, r4
   151cc:	mov	r4, r6
   151d0:	bl	150c4 <putsgent@@Base+0x1b4>
   151d4:	mov	r0, r4
   151d8:	pop	{r4, r5, r6, pc}
   151dc:	mov	r0, r4
   151e0:	bl	150c4 <putsgent@@Base+0x1b4>
   151e4:	mov	r4, r5
   151e8:	b	151c0 <putsgent@@Base+0x2b0>
   151ec:	push	{r4, r5, r6, lr}
   151f0:	mov	r5, r0
   151f4:	mov	r0, #36	; 0x24
   151f8:	bl	11600 <malloc@plt>
   151fc:	subs	r4, r0, #0
   15200:	beq	1526c <putsgent@@Base+0x35c>
   15204:	ldrd	r0, [r5, #8]
   15208:	ldrd	r2, [r5, #16]
   1520c:	str	r0, [r4, #8]
   15210:	str	r1, [r4, #12]
   15214:	ldr	r0, [r5, #24]
   15218:	ldr	r1, [r5, #28]
   1521c:	str	r2, [r4, #16]
   15220:	ldr	r2, [r5, #32]
   15224:	str	r3, [r4, #20]
   15228:	mov	r3, #0
   1522c:	strd	r0, [r4, #24]
   15230:	str	r2, [r4, #32]
   15234:	str	r3, [r4]
   15238:	str	r3, [r4, #4]
   1523c:	ldr	r0, [r5]
   15240:	bl	1154c <strdup@plt>
   15244:	cmp	r0, #0
   15248:	mov	r6, r0
   1524c:	str	r0, [r4]
   15250:	beq	15274 <putsgent@@Base+0x364>
   15254:	ldr	r0, [r5, #4]
   15258:	bl	1154c <strdup@plt>
   1525c:	cmp	r0, #0
   15260:	mov	r5, r0
   15264:	str	r0, [r4, #4]
   15268:	beq	15284 <putsgent@@Base+0x374>
   1526c:	mov	r0, r4
   15270:	pop	{r4, r5, r6, pc}
   15274:	mov	r0, r4
   15278:	bl	114e0 <free@plt>
   1527c:	mov	r4, r6
   15280:	b	1526c <putsgent@@Base+0x35c>
   15284:	mov	r0, r6
   15288:	bl	114e0 <free@plt>
   1528c:	mov	r0, r4
   15290:	bl	114e0 <free@plt>
   15294:	mov	r4, r5
   15298:	b	1526c <putsgent@@Base+0x35c>
   1529c:	push	{r4, r5, r6, lr}
   152a0:	mov	r4, r0
   152a4:	ldr	r0, [r0]
   152a8:	bl	114e0 <free@plt>
   152ac:	ldr	r5, [r4, #4]
   152b0:	cmp	r5, #0
   152b4:	beq	152d8 <putsgent@@Base+0x3c8>
   152b8:	mov	r0, r5
   152bc:	bl	11690 <strlen@plt>
   152c0:	mov	r1, #0
   152c4:	mov	r2, r0
   152c8:	mov	r0, r5
   152cc:	bl	116e4 <memset@plt>
   152d0:	ldr	r0, [r4, #4]
   152d4:	bl	114e0 <free@plt>
   152d8:	mov	r0, r4
   152dc:	pop	{r4, r5, r6, lr}
   152e0:	b	114e0 <free@plt>
   152e4:	push	{r4, r5, r6, r7, r8, lr}
   152e8:	subs	r5, r1, #0
   152ec:	mov	r8, r0
   152f0:	ble	15358 <putsgent@@Base+0x448>
   152f4:	mov	r6, r2
   152f8:	mov	r4, r0
   152fc:	mov	r7, #0
   15300:	mov	r1, r5
   15304:	mov	r2, r6
   15308:	mov	r0, r4
   1530c:	bl	114ec <fgets@plt>
   15310:	mov	r1, #92	; 0x5c
   15314:	cmp	r4, r0
   15318:	bne	15350 <putsgent@@Base+0x440>
   1531c:	bl	117a4 <strrchr@plt>
   15320:	cmp	r0, #0
   15324:	sub	r4, r0, r4
   15328:	sub	r5, r5, r4
   1532c:	beq	15358 <putsgent@@Base+0x448>
   15330:	ldrb	r3, [r0, #1]
   15334:	mov	r4, r0
   15338:	cmp	r3, #10
   1533c:	bne	15358 <putsgent@@Base+0x448>
   15340:	cmp	r5, #0
   15344:	ble	15358 <putsgent@@Base+0x448>
   15348:	strb	r7, [r0]
   1534c:	b	15300 <putsgent@@Base+0x3f0>
   15350:	cmp	r8, r4
   15354:	moveq	r8, #0
   15358:	mov	r0, r8
   1535c:	pop	{r4, r5, r6, r7, r8, pc}
   15360:	push	{r4, r5, r6, lr}
   15364:	mov	r4, r0
   15368:	ldrb	r0, [r0]
   1536c:	cmp	r0, #0
   15370:	beq	15394 <putsgent@@Base+0x484>
   15374:	mov	r5, r1
   15378:	mov	r1, r5
   1537c:	bl	115d0 <_IO_putc@plt>
   15380:	cmn	r0, #1
   15384:	popeq	{r4, r5, r6, pc}
   15388:	ldrb	r0, [r4, #1]!
   1538c:	cmp	r0, #0
   15390:	bne	15378 <putsgent@@Base+0x468>
   15394:	mov	r0, #0
   15398:	pop	{r4, r5, r6, pc}
   1539c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   153a0:	mov	r7, r0
   153a4:	ldr	r6, [pc, #72]	; 153f4 <putsgent@@Base+0x4e4>
   153a8:	ldr	r5, [pc, #72]	; 153f8 <putsgent@@Base+0x4e8>
   153ac:	add	r6, pc, r6
   153b0:	add	r5, pc, r5
   153b4:	sub	r6, r6, r5
   153b8:	mov	r8, r1
   153bc:	mov	r9, r2
   153c0:	bl	11460 <_init@@Base>
   153c4:	asrs	r6, r6, #2
   153c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   153cc:	mov	r4, #0
   153d0:	add	r4, r4, #1
   153d4:	ldr	r3, [r5], #4
   153d8:	mov	r2, r9
   153dc:	mov	r1, r8
   153e0:	mov	r0, r7
   153e4:	blx	r3
   153e8:	cmp	r6, r4
   153ec:	bne	153d0 <putsgent@@Base+0x4c0>
   153f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153f4:	ldrdeq	r1, [r1], -r0
   153f8:	andeq	r1, r1, r8, asr #19
   153fc:	bx	lr

Disassembly of section .fini:

00015400 <_fini@@Base>:
   15400:	push	{r3, lr}
   15404:	pop	{r3, pc}
