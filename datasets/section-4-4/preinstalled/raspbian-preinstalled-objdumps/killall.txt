
raspbian-preinstalled/killall:     file format elf32-littlearm


Disassembly of section .init:

0001104c <_init@@Base>:
   1104c:	push	{r3, lr}
   11050:	bl	12a24 <__assert_fail@plt+0x16ac>
   11054:	pop	{r3, pc}

Disassembly of section .plt:

00011058 <calloc@plt-0x14>:
   11058:	push	{lr}		; (str lr, [sp, #-4]!)
   1105c:	ldr	lr, [pc, #4]	; 11068 <_init@@Base+0x1c>
   11060:	add	lr, pc, lr
   11064:	ldr	pc, [lr, #8]!
   11068:	muleq	r1, r8, pc	; <UNPREDICTABLE>

0001106c <calloc@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #77824	; 0x13000
   11074:	ldr	pc, [ip, #3992]!	; 0xf98

00011078 <__getdelim@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #77824	; 0x13000
   11080:	ldr	pc, [ip, #3984]!	; 0xf90

00011084 <getpwnam@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #77824	; 0x13000
   1108c:	ldr	pc, [ip, #3976]!	; 0xf88

00011090 <is_selinux_enabled@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #77824	; 0x13000
   11098:	ldr	pc, [ip, #3968]!	; 0xf80

0001109c <strcmp@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #77824	; 0x13000
   110a4:	ldr	pc, [ip, #3960]!	; 0xf78

000110a8 <strtol@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #77824	; 0x13000
   110b0:	ldr	pc, [ip, #3952]!	; 0xf70

000110b4 <fflush@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #77824	; 0x13000
   110bc:	ldr	pc, [ip, #3944]!	; 0xf68

000110c0 <free@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #77824	; 0x13000
   110c8:	ldr	pc, [ip, #3936]!	; 0xf60

000110cc <fgets@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #77824	; 0x13000
   110d4:	ldr	pc, [ip, #3928]!	; 0xf58

000110d8 <memcpy@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #77824	; 0x13000
   110e0:	ldr	pc, [ip, #3920]!	; 0xf50

000110e4 <memcmp@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #77824	; 0x13000
   110ec:	ldr	pc, [ip, #3912]!	; 0xf48

000110f0 <sleep@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #77824	; 0x13000
   110f8:	ldr	pc, [ip, #3904]!	; 0xf40

000110fc <dcgettext@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #77824	; 0x13000
   11104:	ldr	pc, [ip, #3896]!	; 0xf38

00011108 <__strncpy_chk@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #77824	; 0x13000
   11110:	ldr	pc, [ip, #3888]!	; 0xf30

00011114 <strdup@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #77824	; 0x13000
   1111c:	ldr	pc, [ip, #3880]!	; 0xf28

00011120 <__stack_chk_fail@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #77824	; 0x13000
   11128:	ldr	pc, [ip, #3872]!	; 0xf20

0001112c <sysconf@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #77824	; 0x13000
   11134:	ldr	pc, [ip, #3864]!	; 0xf18

00011138 <realloc@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #77824	; 0x13000
   11140:	ldr	pc, [ip, #3856]!	; 0xf10

00011144 <regexec@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #77824	; 0x13000
   1114c:	ldr	pc, [ip, #3848]!	; 0xf08

00011150 <textdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #77824	; 0x13000
   11158:	ldr	pc, [ip, #3840]!	; 0xf00

0001115c <strcasecmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #77824	; 0x13000
   11164:	ldr	pc, [ip, #3832]!	; 0xef8

00011168 <perror@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #77824	; 0x13000
   11170:	ldr	pc, [ip, #3824]!	; 0xef0

00011174 <readlink@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #77824	; 0x13000
   1117c:	ldr	pc, [ip, #3816]!	; 0xee8

00011180 <_IO_putc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #77824	; 0x13000
   11188:	ldr	pc, [ip, #3808]!	; 0xee0

0001118c <fwrite@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #77824	; 0x13000
   11194:	ldr	pc, [ip, #3800]!	; 0xed8

00011198 <regfree@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #77824	; 0x13000
   111a0:	ldr	pc, [ip, #3792]!	; 0xed0

000111a4 <opendir@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #77824	; 0x13000
   111ac:	ldr	pc, [ip, #3784]!	; 0xec8

000111b0 <__asprintf_chk@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #77824	; 0x13000
   111b8:	ldr	pc, [ip, #3776]!	; 0xec0

000111bc <malloc@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #77824	; 0x13000
   111c4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111c8 <__libc_start_main@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #77824	; 0x13000
   111d0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d4 <strerror@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #77824	; 0x13000
   111dc:	ldr	pc, [ip, #3752]!	; 0xea8

000111e0 <__gmon_start__@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #77824	; 0x13000
   111e8:	ldr	pc, [ip, #3744]!	; 0xea0

000111ec <kill@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #77824	; 0x13000
   111f4:	ldr	pc, [ip, #3736]!	; 0xe98

000111f8 <__ctype_b_loc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #77824	; 0x13000
   11200:	ldr	pc, [ip, #3728]!	; 0xe90

00011204 <getpid@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #77824	; 0x13000
   1120c:	ldr	pc, [ip, #3720]!	; 0xe88

00011210 <exit@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #77824	; 0x13000
   11218:	ldr	pc, [ip, #3712]!	; 0xe80

0001121c <strlen@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #77824	; 0x13000
   11224:	ldr	pc, [ip, #3704]!	; 0xe78

00011228 <strchr@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #77824	; 0x13000
   11230:	ldr	pc, [ip, #3696]!	; 0xe70

00011234 <__errno_location@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #77824	; 0x13000
   1123c:	ldr	pc, [ip, #3688]!	; 0xe68

00011240 <strncasecmp@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #77824	; 0x13000
   11248:	ldr	pc, [ip, #3680]!	; 0xe60

0001124c <strncpy@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #77824	; 0x13000
   11254:	ldr	pc, [ip, #3672]!	; 0xe58

00011258 <fscanf@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #77824	; 0x13000
   11260:	ldr	pc, [ip, #3664]!	; 0xe50

00011264 <fgetc@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #77824	; 0x13000
   1126c:	ldr	pc, [ip, #3656]!	; 0xe48

00011270 <__printf_chk@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #77824	; 0x13000
   11278:	ldr	pc, [ip, #3648]!	; 0xe40

0001127c <strtod@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #77824	; 0x13000
   11284:	ldr	pc, [ip, #3640]!	; 0xe38

00011288 <getopt_long_only@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #77824	; 0x13000
   11290:	ldr	pc, [ip, #3632]!	; 0xe30

00011294 <__fprintf_chk@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #77824	; 0x13000
   1129c:	ldr	pc, [ip, #3624]!	; 0xe28

000112a0 <fclose@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #77824	; 0x13000
   112a8:	ldr	pc, [ip, #3616]!	; 0xe20

000112ac <getpgid@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #77824	; 0x13000
   112b4:	ldr	pc, [ip, #3608]!	; 0xe18

000112b8 <rpmatch@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #77824	; 0x13000
   112c0:	ldr	pc, [ip, #3600]!	; 0xe10

000112c4 <setlocale@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #77824	; 0x13000
   112cc:	ldr	pc, [ip, #3592]!	; 0xe08

000112d0 <strrchr@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #77824	; 0x13000
   112d8:	ldr	pc, [ip, #3584]!	; 0xe00

000112dc <fputc@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #77824	; 0x13000
   112e4:	ldr	pc, [ip, #3576]!	; 0xdf8

000112e8 <sscanf@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #77824	; 0x13000
   112f0:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f4 <readdir64@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #77824	; 0x13000
   112fc:	ldr	pc, [ip, #3560]!	; 0xde8

00011300 <regcomp@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #77824	; 0x13000
   11308:	ldr	pc, [ip, #3552]!	; 0xde0

0001130c <fopen64@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #77824	; 0x13000
   11314:	ldr	pc, [ip, #3544]!	; 0xdd8

00011318 <freecon@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #77824	; 0x13000
   11320:	ldr	pc, [ip, #3536]!	; 0xdd0

00011324 <bindtextdomain@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #77824	; 0x13000
   1132c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011330 <__xstat64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #77824	; 0x13000
   11338:	ldr	pc, [ip, #3520]!	; 0xdc0

0001133c <getpidcon@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #77824	; 0x13000
   11344:	ldr	pc, [ip, #3512]!	; 0xdb8

00011348 <strncmp@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #77824	; 0x13000
   11350:	ldr	pc, [ip, #3504]!	; 0xdb0

00011354 <abort@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #77824	; 0x13000
   1135c:	ldr	pc, [ip, #3496]!	; 0xda8

00011360 <closedir@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #77824	; 0x13000
   11368:	ldr	pc, [ip, #3488]!	; 0xda0

0001136c <__snprintf_chk@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #77824	; 0x13000
   11374:	ldr	pc, [ip, #3480]!	; 0xd98

00011378 <__assert_fail@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #77824	; 0x13000
   11380:	ldr	pc, [ip, #3472]!	; 0xd90

Disassembly of section .text:

00011388 <.text>:
   11388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1138c:	vpush	{d8-d10}
   11390:	ldr	r3, [pc, #2480]	; 11d48 <__assert_fail@plt+0x9d0>
   11394:	mov	r2, #272	; 0x110
   11398:	mov	r6, r0
   1139c:	sub	sp, sp, #3792	; 0xed0
   113a0:	sub	sp, sp, #12
   113a4:	ldr	r3, [r3]
   113a8:	mov	r5, r1
   113ac:	add	r0, sp, #260	; 0x104
   113b0:	ldr	r1, [pc, #2452]	; 11d4c <__assert_fail@plt+0x9d4>
   113b4:	str	r3, [sp, #3796]	; 0xed4
   113b8:	bl	110d8 <memcpy@plt>
   113bc:	ldr	r1, [pc, #2588]	; 11de0 <__assert_fail@plt+0xa68>
   113c0:	mov	r0, #6
   113c4:	bl	112c4 <setlocale@plt>
   113c8:	ldr	r1, [pc, #2432]	; 11d50 <__assert_fail@plt+0x9d8>
   113cc:	ldr	r0, [pc, #2432]	; 11d54 <__assert_fail@plt+0x9dc>
   113d0:	bl	11324 <bindtextdomain@plt>
   113d4:	ldr	r0, [pc, #2424]	; 11d54 <__assert_fail@plt+0x9dc>
   113d8:	bl	11150 <textdomain@plt>
   113dc:	cmp	r6, #1
   113e0:	ble	11a0c <__assert_fail@plt+0x694>
   113e4:	ldr	r2, [pc, #2412]	; 11d58 <__assert_fail@plt+0x9e0>
   113e8:	ldr	r7, [pc, #2412]	; 11d5c <__assert_fail@plt+0x9e4>
   113ec:	ldr	r9, [pc, #2412]	; 11d60 <__assert_fail@plt+0x9e8>
   113f0:	ldr	fp, [pc, #2412]	; 11d64 <__assert_fail@plt+0x9ec>
   113f4:	mov	r3, #0
   113f8:	mov	r8, r3
   113fc:	str	r3, [r2]
   11400:	str	r3, [sp, #32]
   11404:	mov	sl, r3
   11408:	mov	r3, #15
   1140c:	str	r3, [sp, #36]	; 0x24
   11410:	mov	r4, #0
   11414:	str	r4, [sp]
   11418:	add	r3, sp, #260	; 0x104
   1141c:	mov	r2, r7
   11420:	mov	r1, r5
   11424:	mov	r0, r6
   11428:	bl	11288 <getopt_long_only@plt>
   1142c:	cmn	r0, #1
   11430:	beq	11880 <__assert_fail@plt+0x508>
   11434:	sub	r0, r0, #63	; 0x3f
   11438:	cmp	r0, #58	; 0x3a
   1143c:	ldrls	pc, [pc, r0, lsl #2]
   11440:	b	11410 <__assert_fail@plt+0x98>
   11444:	andeq	r1, r1, r0, lsl #16
   11448:	andeq	r1, r1, r0, lsl r4
   1144c:	andeq	r1, r1, r0, lsl r4
   11450:	andeq	r1, r1, r0, lsl r4
   11454:	andeq	r1, r1, r0, lsl r4
   11458:	andeq	r1, r1, r0, lsl r4
   1145c:	andeq	r1, r1, r0, lsl r4
   11460:	andeq	r1, r1, r0, lsl r4
   11464:	andeq	r1, r1, r0, lsl r4
   11468:	andeq	r1, r1, r0, lsl r4
   1146c:	andeq	r1, r1, r8, asr #15
   11470:	andeq	r1, r1, r0, lsl r4
   11474:	andeq	r1, r1, r0, lsl r4
   11478:	andeq	r1, r1, r0, lsl r4
   1147c:	andeq	r1, r1, r0, lsl r4
   11480:	andeq	r1, r1, r0, lsl r4
   11484:	andeq	r1, r1, r0, lsl r4
   11488:	andeq	r1, r1, r0, lsl r4
   1148c:	andeq	r1, r1, r0, lsl r4
   11490:	andeq	r1, r1, r0, lsl r4
   11494:	andeq	r1, r1, r0, lsl r4
   11498:	andeq	r1, r1, r0, lsl r4
   1149c:	andeq	r1, r1, r0, lsl r4
   114a0:	andeq	r1, r1, ip, ror #14
   114a4:	andeq	r1, r1, r0, lsl r4
   114a8:	andeq	r1, r1, r0, lsl r4
   114ac:	andeq	r1, r1, r0, lsl r4
   114b0:	andeq	r1, r1, ip, lsl #14
   114b4:	andeq	r1, r1, r0, lsl r4
   114b8:	andeq	r1, r1, r0, lsl r4
   114bc:	andeq	r1, r1, r0, lsl r4
   114c0:	andeq	r1, r1, r0, lsl r4
   114c4:	andeq	r1, r1, r0, lsl r4
   114c8:	andeq	r1, r1, r0, lsl r4
   114cc:	andeq	r1, r1, r0, lsl r4
   114d0:	andeq	r1, r1, r0, lsl r4
   114d4:	andeq	r1, r1, r0, lsl r4
   114d8:	andeq	r1, r1, r0, lsl r4
   114dc:	strdeq	r1, [r1], -ip
   114e0:	andeq	r1, r1, r0, lsl r4
   114e4:	andeq	r1, r1, ip, ror #13
   114e8:	andeq	r1, r1, r0, lsl r4
   114ec:	ldrdeq	r1, [r1], -ip
   114f0:	andeq	r1, r1, r0, lsl r4
   114f4:	andeq	r1, r1, r0, lsl r4
   114f8:	andeq	r1, r1, ip, lsr #13
   114fc:	andeq	r1, r1, r0, lsl r4
   11500:	andeq	r1, r1, r0, asr r6
   11504:	andeq	r1, r1, r8, lsl r6
   11508:	andeq	r1, r1, r0, lsl r4
   1150c:	andeq	r1, r1, r8, lsl #12
   11510:	strdeq	r1, [r1], -r8
   11514:	andeq	r1, r1, r0, ror #11
   11518:	andeq	r1, r1, r0, lsl r4
   1151c:	muleq	r1, r8, r5
   11520:	andeq	r1, r1, r8, lsl #11
   11524:	andeq	r1, r1, r8, ror r5
   11528:	andeq	r1, r1, r0, lsl r4
   1152c:	andeq	r1, r1, r0, lsr r5
   11530:	ldr	r3, [pc, #2096]	; 11d68 <__assert_fail@plt+0x9f0>
   11534:	mov	r2, #63	; 0x3f
   11538:	add	r0, sp, #532	; 0x214
   1153c:	ldr	r1, [r3]
   11540:	bl	1124c <strncpy@plt>
   11544:	mov	r4, #0
   11548:	add	r0, sp, #532	; 0x214
   1154c:	strb	r4, [sp, #595]	; 0x253
   11550:	bl	12c08 <__assert_fail@plt+0x1890>
   11554:	ldr	r3, [pc, #2064]	; 11d6c <__assert_fail@plt+0x9f4>
   11558:	cmp	r0, r4
   1155c:	str	r0, [r3, #8]
   11560:	bgt	11410 <__assert_fail@plt+0x98>
   11564:	mov	r2, #5
   11568:	ldr	r1, [pc, #2048]	; 11d70 <__assert_fail@plt+0x9f8>
   1156c:	mov	r0, r4
   11570:	bl	110fc <dcgettext@plt>
   11574:	bl	12ad8 <__assert_fail@plt+0x1760>
   11578:	ldr	r3, [pc, #2028]	; 11d6c <__assert_fail@plt+0x9f4>
   1157c:	mov	r2, #1
   11580:	str	r2, [r3, #32]
   11584:	b	11410 <__assert_fail@plt+0x98>
   11588:	ldr	r3, [pc, #2012]	; 11d6c <__assert_fail@plt+0x9f4>
   1158c:	mov	r2, #1
   11590:	str	r2, [r3, #28]
   11594:	b	11410 <__assert_fail@plt+0x98>
   11598:	ldr	r4, [pc, #1992]	; 11d68 <__assert_fail@plt+0x9f0>
   1159c:	ldr	r0, [r4]
   115a0:	bl	11084 <getpwnam@plt>
   115a4:	subs	r3, r0, #0
   115a8:	str	r3, [sp, #32]
   115ac:	bne	11410 <__assert_fail@plt+0x98>
   115b0:	ldr	r3, [pc, #2136]	; 11e10 <__assert_fail@plt+0xa98>
   115b4:	mov	r2, #5
   115b8:	ldr	r1, [pc, #1972]	; 11d74 <__assert_fail@plt+0x9fc>
   115bc:	ldr	r5, [r3]
   115c0:	bl	110fc <dcgettext@plt>
   115c4:	ldr	r3, [r4]
   115c8:	mov	r1, #1
   115cc:	mov	r2, r0
   115d0:	mov	r0, r5
   115d4:	bl	11294 <__fprintf_chk@plt>
   115d8:	mov	r0, #1
   115dc:	bl	11210 <exit@plt>
   115e0:	ldr	r3, [pc, #1920]	; 11d68 <__assert_fail@plt+0x9f0>
   115e4:	ldr	r1, [pc, #1932]	; 11d78 <__assert_fail@plt+0xa00>
   115e8:	ldr	r0, [r3]
   115ec:	bl	12ee8 <__assert_fail@plt+0x1b70>
   115f0:	str	r0, [sp, #36]	; 0x24
   115f4:	b	11410 <__assert_fail@plt+0x98>
   115f8:	ldr	r3, [pc, #1900]	; 11d6c <__assert_fail@plt+0x9f4>
   115fc:	mov	r2, #1
   11600:	str	r2, [r3, #24]
   11604:	b	11410 <__assert_fail@plt+0x98>
   11608:	ldr	r3, [pc, #1884]	; 11d6c <__assert_fail@plt+0x9f4>
   1160c:	mov	r2, #1
   11610:	str	r2, [r3, #20]
   11614:	b	11410 <__assert_fail@plt+0x98>
   11618:	ldr	r3, [pc, #1864]	; 11d68 <__assert_fail@plt+0x9f0>
   1161c:	mov	r2, #63	; 0x3f
   11620:	add	r0, sp, #596	; 0x254
   11624:	ldr	r1, [r3]
   11628:	bl	1124c <strncpy@plt>
   1162c:	mov	r4, #0
   11630:	add	r0, sp, #596	; 0x254
   11634:	strb	r4, [sp, #659]	; 0x293
   11638:	bl	12c08 <__assert_fail@plt+0x1890>
   1163c:	ldr	r3, [pc, #1832]	; 11d6c <__assert_fail@plt+0x9f4>
   11640:	cmp	r0, r4
   11644:	str	r0, [r3, #12]
   11648:	bgt	11410 <__assert_fail@plt+0x98>
   1164c:	b	11564 <__assert_fail@plt+0x1ec>
   11650:	mov	r1, #0
   11654:	str	r1, [sp, #152]	; 0x98
   11658:	bl	11234 <__errno_location@plt>
   1165c:	ldr	r4, [pc, #1796]	; 11d68 <__assert_fail@plt+0x9f0>
   11660:	mov	r1, #0
   11664:	mov	r2, #10
   11668:	str	r1, [r0]
   1166c:	str	r0, [sp, #16]
   11670:	add	r1, sp, #152	; 0x98
   11674:	ldr	r0, [r4]
   11678:	bl	110a8 <strtol@plt>
   1167c:	ldr	r3, [sp, #16]
   11680:	ldr	r3, [r3]
   11684:	cmp	r3, #0
   11688:	bne	12894 <__assert_fail@plt+0x151c>
   1168c:	ldr	r2, [r4]
   11690:	ldr	r3, [sp, #152]	; 0x98
   11694:	cmp	r3, #0
   11698:	cmpne	r2, r3
   1169c:	beq	12894 <__assert_fail@plt+0x151c>
   116a0:	ldr	r3, [pc, #1732]	; 11d6c <__assert_fail@plt+0x9f4>
   116a4:	str	r0, [r3, #40]	; 0x28
   116a8:	b	11410 <__assert_fail@plt+0x98>
   116ac:	bl	12e2c <__assert_fail@plt+0x1ab4>
   116b0:	mov	r8, #0
   116b4:	ldr	r3, [pc, #1676]	; 11d48 <__assert_fail@plt+0x9d0>
   116b8:	ldr	r2, [sp, #3796]	; 0xed4
   116bc:	mov	r0, r8
   116c0:	ldr	r3, [r3]
   116c4:	cmp	r2, r3
   116c8:	bne	12910 <__assert_fail@plt+0x1598>
   116cc:	add	sp, sp, #3792	; 0xed0
   116d0:	add	sp, sp, #12
   116d4:	vpop	{d8-d10}
   116d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116dc:	ldr	r3, [pc, #1672]	; 11d6c <__assert_fail@plt+0x9f4>
   116e0:	mov	r2, #1
   116e4:	str	r2, [r3, #16]
   116e8:	b	11410 <__assert_fail@plt+0x98>
   116ec:	ldr	r3, [pc, #1656]	; 11d6c <__assert_fail@plt+0x9f4>
   116f0:	mov	r2, #1
   116f4:	str	r2, [r3, #4]
   116f8:	b	11410 <__assert_fail@plt+0x98>
   116fc:	ldr	r3, [pc, #1640]	; 11d6c <__assert_fail@plt+0x9f4>
   11700:	mov	r2, #1
   11704:	str	r2, [r3]
   11708:	b	11410 <__assert_fail@plt+0x98>
   1170c:	bl	11090 <is_selinux_enabled@plt>
   11710:	cmp	r0, #0
   11714:	ble	11864 <__assert_fail@plt+0x4ec>
   11718:	ldr	r3, [pc, #1608]	; 11d68 <__assert_fail@plt+0x9f0>
   1171c:	mov	r2, #9
   11720:	add	r0, sp, #120	; 0x78
   11724:	ldr	r8, [r3]
   11728:	mov	r1, r8
   1172c:	bl	11300 <regcomp@plt>
   11730:	cmp	r0, #0
   11734:	beq	11410 <__assert_fail@plt+0x98>
   11738:	ldr	r3, [pc, #1744]	; 11e10 <__assert_fail@plt+0xa98>
   1173c:	mov	r2, #5
   11740:	ldr	r1, [pc, #1588]	; 11d7c <__assert_fail@plt+0xa04>
   11744:	mov	r0, #0
   11748:	ldr	r4, [r3]
   1174c:	bl	110fc <dcgettext@plt>
   11750:	mov	r3, r8
   11754:	mov	r1, #1
   11758:	mov	r2, r0
   1175c:	mov	r0, r4
   11760:	bl	11294 <__fprintf_chk@plt>
   11764:	mov	r0, #1
   11768:	bl	11210 <exit@plt>
   1176c:	ldr	r3, [r9]
   11770:	ldr	r1, [pc, #1544]	; 11d80 <__assert_fail@plt+0xa08>
   11774:	sub	r3, r3, #-1073741823	; 0xc0000001
   11778:	ldr	sl, [r5, r3, lsl #2]
   1177c:	lsl	r4, r3, #2
   11780:	mov	r0, sl
   11784:	bl	1109c <strcmp@plt>
   11788:	cmp	r0, #0
   1178c:	beq	127d8 <__assert_fail@plt+0x1460>
   11790:	mov	r0, sl
   11794:	mov	r2, #2
   11798:	mov	r1, fp
   1179c:	bl	11348 <strncmp@plt>
   117a0:	cmp	r0, #0
   117a4:	beq	127d8 <__assert_fail@plt+0x1460>
   117a8:	add	r3, r5, r4
   117ac:	ldr	r0, [r3, #4]
   117b0:	ldr	r1, [pc, #1472]	; 11d78 <__assert_fail@plt+0xa00>
   117b4:	add	r0, r0, #1
   117b8:	bl	12ee8 <__assert_fail@plt+0x1b70>
   117bc:	ldr	sl, [r9]
   117c0:	str	r0, [sp, #36]	; 0x24
   117c4:	b	11410 <__assert_fail@plt+0x98>
   117c8:	ldr	r3, [r9]
   117cc:	ldr	r1, [pc, #1456]	; 11d84 <__assert_fail@plt+0xa0c>
   117d0:	sub	r3, r3, #-1073741823	; 0xc0000001
   117d4:	ldr	r4, [r5, r3, lsl #2]
   117d8:	lsl	r3, r3, #2
   117dc:	mov	r0, r4
   117e0:	str	r3, [sp, #16]
   117e4:	bl	1109c <strcmp@plt>
   117e8:	cmp	r0, #0
   117ec:	bne	11840 <__assert_fail@plt+0x4c8>
   117f0:	ldr	r3, [pc, #1396]	; 11d6c <__assert_fail@plt+0x9f4>
   117f4:	mov	r2, #1
   117f8:	str	r2, [r3, #36]	; 0x24
   117fc:	b	11410 <__assert_fail@plt+0x98>
   11800:	ldr	r3, [r9]
   11804:	cmp	r3, sl
   11808:	beq	11410 <__assert_fail@plt+0x98>
   1180c:	sub	r3, r3, #-1073741823	; 0xc0000001
   11810:	mov	r2, #3
   11814:	ldr	r4, [r5, r3, lsl #2]
   11818:	ldr	r1, [pc, #1384]	; 11d88 <__assert_fail@plt+0xa10>
   1181c:	mov	r0, r4
   11820:	bl	11348 <strncmp@plt>
   11824:	cmp	r0, #0
   11828:	bne	119cc <__assert_fail@plt+0x654>
   1182c:	ldr	r3, [pc, #1336]	; 11d6c <__assert_fail@plt+0x9f4>
   11830:	mov	r2, #1
   11834:	str	r2, [r3, #28]
   11838:	str	r2, [r3]
   1183c:	b	11410 <__assert_fail@plt+0x98>
   11840:	mov	r0, r4
   11844:	mov	r2, #2
   11848:	mov	r1, fp
   1184c:	bl	11348 <strncmp@plt>
   11850:	cmp	r0, #0
   11854:	beq	117f0 <__assert_fail@plt+0x478>
   11858:	ldr	r3, [sp, #16]
   1185c:	add	r3, r5, r3
   11860:	b	117ac <__assert_fail@plt+0x434>
   11864:	ldr	r3, [pc, #1444]	; 11e10 <__assert_fail@plt+0xa98>
   11868:	mov	r2, #68	; 0x44
   1186c:	mov	r1, #1
   11870:	ldr	r3, [r3]
   11874:	ldr	r0, [pc, #1296]	; 11d8c <__assert_fail@plt+0xa14>
   11878:	bl	1118c <fwrite@plt>
   1187c:	b	11410 <__assert_fail@plt+0x98>
   11880:	ldr	r3, [pc, #1240]	; 11d60 <__assert_fail@plt+0x9e8>
   11884:	ldr	r7, [r3]
   11888:	sub	r3, r6, r7
   1188c:	cmp	r3, r4
   11890:	str	r3, [sp, #20]
   11894:	ble	11a00 <__assert_fail@plt+0x688>
   11898:	ldr	r3, [sp, #20]
   1189c:	cmp	r3, #32
   118a0:	bgt	129b0 <__assert_fail@plt+0x1638>
   118a4:	bl	11204 <getpid@plt>
   118a8:	ldr	r2, [pc, #1264]	; 11da0 <__assert_fail@plt+0xa28>
   118ac:	mov	r3, #128	; 0x80
   118b0:	mov	r1, r3
   118b4:	str	r2, [sp]
   118b8:	mov	r2, #1
   118bc:	str	r0, [sp, #4]
   118c0:	add	r0, sp, #1744	; 0x6d0
   118c4:	add	r0, r0, #4
   118c8:	bl	1136c <__snprintf_chk@plt>
   118cc:	add	r1, sp, #1744	; 0x6d0
   118d0:	add	r1, r1, #4
   118d4:	add	r2, sp, #152	; 0x98
   118d8:	mov	r0, #3
   118dc:	bl	11330 <__xstat64@plt>
   118e0:	cmp	r0, #0
   118e4:	bne	128dc <__assert_fail@plt+0x1564>
   118e8:	ldr	sl, [pc, #1148]	; 11d6c <__assert_fail@plt+0x9f4>
   118ec:	cmp	r8, #0
   118f0:	add	r3, r5, r7, lsl #2
   118f4:	str	r3, [sp, #56]	; 0x38
   118f8:	ldr	r0, [sl, #40]	; 0x28
   118fc:	addne	r3, sp, #120	; 0x78
   11900:	strne	r3, [sp, #44]	; 0x2c
   11904:	mov	r3, #0
   11908:	streq	r8, [sp, #44]	; 0x2c
   1190c:	cmp	r0, r3
   11910:	str	r3, [sp, #104]	; 0x68
   11914:	streq	r0, [sp, #48]	; 0x30
   11918:	bne	125b0 <__assert_fail@plt+0x1238>
   1191c:	ldr	r3, [sp, #20]
   11920:	cmp	r3, #0
   11924:	beq	1258c <__assert_fail@plt+0x1214>
   11928:	ldr	r6, [sl, #24]
   1192c:	cmp	r6, #0
   11930:	bne	12650 <__assert_fail@plt+0x12d8>
   11934:	ldr	r4, [sp, #20]
   11938:	mov	r0, #112	; 0x70
   1193c:	mul	r0, r0, r4
   11940:	bl	111bc <malloc@plt>
   11944:	subs	r3, r0, #0
   11948:	str	r3, [sp, #68]	; 0x44
   1194c:	beq	125a8 <__assert_fail@plt+0x1230>
   11950:	cmp	r4, #0
   11954:	ble	129e0 <__assert_fail@plt+0x1668>
   11958:	ldr	r7, [sp, #56]	; 0x38
   1195c:	add	r9, r3, #8
   11960:	mov	r4, #0
   11964:	mov	r5, #0
   11968:	b	11998 <__assert_fail@plt+0x620>
   1196c:	mov	r1, fp
   11970:	mov	r2, r9
   11974:	mov	r0, #3
   11978:	bl	11330 <__xstat64@plt>
   1197c:	cmp	r0, #0
   11980:	blt	1263c <__assert_fail@plt+0x12c4>
   11984:	ldr	r3, [sp, #20]
   11988:	add	r6, r6, #1
   1198c:	cmp	r3, r6
   11990:	add	r9, r9, #112	; 0x70
   11994:	beq	11a28 <__assert_fail@plt+0x6b0>
   11998:	mov	r8, r7
   1199c:	ldr	fp, [r7], #4
   119a0:	strd	r4, [r9]
   119a4:	str	fp, [r9, #-8]
   119a8:	mov	r0, fp
   119ac:	mov	r1, #47	; 0x2f
   119b0:	bl	11228 <strchr@plt>
   119b4:	cmp	r0, #0
   119b8:	bne	1196c <__assert_fail@plt+0x5f4>
   119bc:	mov	r0, fp
   119c0:	bl	1121c <strlen@plt>
   119c4:	str	r0, [r9, #-4]
   119c8:	b	11984 <__assert_fail@plt+0x60c>
   119cc:	ldrb	r3, [r4, #1]
   119d0:	sub	r2, r3, #65	; 0x41
   119d4:	cmp	r2, #25
   119d8:	bls	11a14 <__assert_fail@plt+0x69c>
   119dc:	sub	r3, r3, #48	; 0x30
   119e0:	cmp	r3, #9
   119e4:	bhi	11a0c <__assert_fail@plt+0x694>
   119e8:	add	r0, r4, #1
   119ec:	mov	r2, #10
   119f0:	mov	r1, #0
   119f4:	bl	110a8 <strtol@plt>
   119f8:	str	r0, [sp, #36]	; 0x24
   119fc:	b	11410 <__assert_fail@plt+0x98>
   11a00:	ldr	r3, [sp, #32]
   11a04:	orrs	r3, r3, r8
   11a08:	bne	118a4 <__assert_fail@plt+0x52c>
   11a0c:	mov	r0, #0
   11a10:	bl	12ad8 <__assert_fail@plt+0x1760>
   11a14:	add	r0, r4, #1
   11a18:	ldr	r1, [pc, #856]	; 11d78 <__assert_fail@plt+0xa00>
   11a1c:	bl	12ee8 <__assert_fail@plt+0x1b70>
   11a20:	str	r0, [sp, #36]	; 0x24
   11a24:	b	11410 <__assert_fail@plt+0x98>
   11a28:	mov	r3, #0
   11a2c:	str	r3, [sp, #60]	; 0x3c
   11a30:	bl	11204 <getpid@plt>
   11a34:	mov	r5, r0
   11a38:	ldr	r0, [pc, #984]	; 11e18 <__assert_fail@plt+0xaa0>
   11a3c:	bl	111a4 <opendir@plt>
   11a40:	subs	r4, r0, #0
   11a44:	beq	129d0 <__assert_fail@plt+0x1658>
   11a48:	mov	r0, #1024	; 0x400
   11a4c:	bl	111bc <malloc@plt>
   11a50:	subs	r3, r0, #0
   11a54:	str	r3, [sp, #28]
   11a58:	beq	125d4 <__assert_fail@plt+0x125c>
   11a5c:	mov	r8, #0
   11a60:	mov	r6, #256	; 0x100
   11a64:	mov	r0, r4
   11a68:	bl	112f4 <readdir64@plt>
   11a6c:	cmp	r0, #0
   11a70:	beq	11ab8 <__assert_fail@plt+0x740>
   11a74:	add	r0, r0, #19
   11a78:	mov	r2, #10
   11a7c:	mov	r1, #0
   11a80:	bl	110a8 <strtol@plt>
   11a84:	cmp	r0, #0
   11a88:	cmpne	r5, r0
   11a8c:	mov	r7, r0
   11a90:	beq	11a64 <__assert_fail@plt+0x6ec>
   11a94:	cmp	r6, r8
   11a98:	beq	120e0 <__assert_fail@plt+0xd68>
   11a9c:	ldr	r3, [sp, #28]
   11aa0:	mov	r0, r4
   11aa4:	str	r7, [r3, r8, lsl #2]
   11aa8:	bl	112f4 <readdir64@plt>
   11aac:	add	r8, r8, #1
   11ab0:	cmp	r0, #0
   11ab4:	bne	11a74 <__assert_fail@plt+0x6fc>
   11ab8:	mov	r0, r4
   11abc:	str	r8, [sp, #40]	; 0x28
   11ac0:	bl	11360 <closedir@plt>
   11ac4:	lsl	r0, r6, #2
   11ac8:	bl	111bc <malloc@plt>
   11acc:	subs	r3, r0, #0
   11ad0:	str	r3, [sp, #72]	; 0x48
   11ad4:	beq	125d4 <__assert_fail@plt+0x125c>
   11ad8:	ldr	r3, [sl, #4]
   11adc:	cmp	r3, #0
   11ae0:	streq	r3, [sp, #84]	; 0x54
   11ae4:	bne	125bc <__assert_fail@plt+0x1244>
   11ae8:	ldr	r3, [sp, #40]	; 0x28
   11aec:	cmp	r3, #0
   11af0:	beq	127cc <__assert_fail@plt+0x1454>
   11af4:	vldr	d9, [pc, #580]	; 11d40 <__assert_fail@plt+0x9c8>
   11af8:	mov	r6, #0
   11afc:	ldr	r3, [sp, #28]
   11b00:	ldr	r4, [pc, #648]	; 11d90 <__assert_fail@plt+0xa18>
   11b04:	mov	fp, r6
   11b08:	sub	r3, r3, #4
   11b0c:	str	r6, [sp, #16]
   11b10:	str	r6, [sp, #80]	; 0x50
   11b14:	str	r3, [sp, #24]
   11b18:	str	r6, [sp, #76]	; 0x4c
   11b1c:	ldr	r3, [sp, #24]
   11b20:	ldr	r2, [sp, #32]
   11b24:	ldr	r6, [r3, #4]!
   11b28:	cmp	r2, #0
   11b2c:	str	r3, [sp, #24]
   11b30:	beq	11e30 <__assert_fail@plt+0xab8>
   11b34:	ldr	r0, [pc, #600]	; 11d94 <__assert_fail@plt+0xa1c>
   11b38:	ldr	r8, [r2, #8]
   11b3c:	mov	r3, #128	; 0x80
   11b40:	str	r0, [sp]
   11b44:	add	r0, sp, #1744	; 0x6d0
   11b48:	mov	r1, r3
   11b4c:	mov	r2, #1
   11b50:	str	r6, [sp, #4]
   11b54:	add	r0, r0, #4
   11b58:	bl	1136c <__snprintf_chk@plt>
   11b5c:	add	r0, sp, #1744	; 0x6d0
   11b60:	ldr	r1, [pc, #612]	; 11dcc <__assert_fail@plt+0xa54>
   11b64:	add	r0, r0, #4
   11b68:	bl	1130c <fopen64@plt>
   11b6c:	subs	r5, r0, #0
   11b70:	bne	11b94 <__assert_fail@plt+0x81c>
   11b74:	b	11c5c <__assert_fail@plt+0x8e4>
   11b78:	add	r0, sp, #1744	; 0x6d0
   11b7c:	add	r2, sp, #112	; 0x70
   11b80:	mov	r1, r4
   11b84:	add	r0, r0, #4
   11b88:	bl	112e8 <sscanf@plt>
   11b8c:	cmp	r0, #0
   11b90:	bne	11e1c <__assert_fail@plt+0xaa4>
   11b94:	add	r0, sp, #1744	; 0x6d0
   11b98:	mov	r2, r5
   11b9c:	mov	r1, #128	; 0x80
   11ba0:	add	r0, r0, #4
   11ba4:	bl	110cc <fgets@plt>
   11ba8:	cmp	r0, #0
   11bac:	bne	11b78 <__assert_fail@plt+0x800>
   11bb0:	mov	r7, r0
   11bb4:	mov	r0, r5
   11bb8:	bl	112a0 <fclose@plt>
   11bbc:	ldr	r3, [pc, #588]	; 11e10 <__assert_fail@plt+0xa98>
   11bc0:	mov	r2, #5
   11bc4:	ldr	r1, [pc, #460]	; 11d98 <__assert_fail@plt+0xa20>
   11bc8:	mov	r0, r7
   11bcc:	ldr	r4, [r3]
   11bd0:	bl	110fc <dcgettext@plt>
   11bd4:	mov	r1, #1
   11bd8:	mov	r2, r0
   11bdc:	mov	r0, r4
   11be0:	bl	11294 <__fprintf_chk@plt>
   11be4:	mov	r0, #1
   11be8:	bl	11210 <exit@plt>
   11bec:	ldr	r9, [sp, #52]	; 0x34
   11bf0:	str	r0, [sp, #52]	; 0x34
   11bf4:	ldr	r0, [sp, #112]	; 0x70
   11bf8:	bl	110c0 <free@plt>
   11bfc:	ldr	r3, [sp, #52]	; 0x34
   11c00:	cmp	r3, #0
   11c04:	beq	11c5c <__assert_fail@plt+0x8e4>
   11c08:	ldr	r8, [sl, #4]
   11c0c:	cmp	r8, #0
   11c10:	rsbne	r6, r7, #0
   11c14:	moveq	r6, r7
   11c18:	mov	r0, r6
   11c1c:	ldr	r1, [sp, #36]	; 0x24
   11c20:	bl	111ec <kill@plt>
   11c24:	cmp	r0, #0
   11c28:	blt	12544 <__assert_fail@plt+0x11cc>
   11c2c:	ldr	r3, [sl, #28]
   11c30:	cmp	r3, #0
   11c34:	bne	126c4 <__assert_fail@plt+0x134c>
   11c38:	cmn	r9, #1
   11c3c:	movne	r3, #1
   11c40:	ldrne	r2, [sp, #80]	; 0x50
   11c44:	orrne	r3, r2, r3, lsl r9
   11c48:	strne	r3, [sp, #80]	; 0x50
   11c4c:	ldrd	r2, [sp, #72]	; 0x48
   11c50:	str	r7, [r2, r3, lsl #2]
   11c54:	add	r3, r3, #1
   11c58:	str	r3, [sp, #76]	; 0x4c
   11c5c:	ldr	r3, [sp, #16]
   11c60:	ldr	r2, [sp, #40]	; 0x28
   11c64:	add	r3, r3, #1
   11c68:	cmp	r3, r2
   11c6c:	str	r3, [sp, #16]
   11c70:	bne	11b1c <__assert_fail@plt+0x7a4>
   11c74:	cmp	fp, #0
   11c78:	ldr	r6, [sp, #76]	; 0x4c
   11c7c:	beq	11c88 <__assert_fail@plt+0x910>
   11c80:	mov	r0, fp
   11c84:	bl	110c0 <free@plt>
   11c88:	ldr	r3, [sp, #60]	; 0x3c
   11c8c:	cmp	r3, #0
   11c90:	beq	11ccc <__assert_fail@plt+0x954>
   11c94:	ldr	r3, [sp, #20]
   11c98:	cmp	r3, #0
   11c9c:	ldrgt	r2, [sp, #20]
   11ca0:	ldrgt	r3, [sp, #60]	; 0x3c
   11ca4:	movgt	r5, r3
   11ca8:	addgt	r4, r3, r2, lsl #5
   11cac:	ble	11cc4 <__assert_fail@plt+0x94c>
   11cb0:	mov	r0, r5
   11cb4:	add	r5, r5, #32
   11cb8:	bl	11198 <regfree@plt>
   11cbc:	cmp	r4, r5
   11cc0:	bne	11cb0 <__assert_fail@plt+0x938>
   11cc4:	ldr	r0, [sp, #60]	; 0x3c
   11cc8:	bl	110c0 <free@plt>
   11ccc:	ldr	r0, [sp, #84]	; 0x54
   11cd0:	bl	110c0 <free@plt>
   11cd4:	ldr	r4, [sl, #20]
   11cd8:	cmp	r4, #0
   11cdc:	bne	1235c <__assert_fail@plt+0xfe4>
   11ce0:	ldr	r5, [sp, #20]
   11ce4:	cmp	r5, #0
   11ce8:	ble	1235c <__assert_fail@plt+0xfe4>
   11cec:	ldr	r7, [pc, #284]	; 11e10 <__assert_fail@plt+0xa98>
   11cf0:	ldr	r8, [pc, #164]	; 11d9c <__assert_fail@plt+0xa24>
   11cf4:	ldr	r9, [sp, #80]	; 0x50
   11cf8:	b	11d08 <__assert_fail@plt+0x990>
   11cfc:	add	r4, r4, #1
   11d00:	cmp	r5, r4
   11d04:	beq	12428 <__assert_fail@plt+0x10b0>
   11d08:	lsr	r0, r9, r4
   11d0c:	ands	r0, r0, #1
   11d10:	bne	11cfc <__assert_fail@plt+0x984>
   11d14:	mov	r1, r8
   11d18:	mov	r2, #5
   11d1c:	ldr	fp, [r7]
   11d20:	bl	110fc <dcgettext@plt>
   11d24:	ldr	r3, [sp, #56]	; 0x38
   11d28:	mov	r1, #1
   11d2c:	ldr	r3, [r3, r4, lsl #2]
   11d30:	mov	r2, r0
   11d34:	mov	r0, fp
   11d38:	bl	11294 <__fprintf_chk@plt>
   11d3c:	b	11cfc <__assert_fail@plt+0x984>
	...
   11d48:	andeq	r4, r2, r0, lsl #30
   11d4c:	andeq	r3, r1, r4, lsl r4
   11d50:	andeq	r3, r1, ip, lsr fp
   11d54:	andeq	r3, r1, r0, asr fp
   11d58:	andeq	r5, r2, r8, lsr r2
   11d5c:	andeq	r3, r1, r8, lsl ip
   11d60:	andeq	r5, r2, r0, lsr #4
   11d64:	muleq	r1, r0, fp
   11d68:	andeq	r5, r2, r0, asr #4
   11d6c:	andeq	r5, r2, r8, asr #4
   11d70:	andeq	r3, r1, r8, asr fp
   11d74:	andeq	r3, r1, r4, ror fp
   11d78:	andeq	r3, r1, ip, ror #22
   11d7c:			; <UNDEFINED> instruction: 0x00013bb0
   11d80:	muleq	r1, r4, fp
   11d84:	andeq	r3, r1, ip, lsl #23
   11d88:	andeq	r3, r1, r4, lsl ip
   11d8c:	andeq	r3, r1, ip, asr #23
   11d90:	strdeq	r3, [r1], -r0
   11d94:	ldrdeq	r3, [r1], -ip
   11d98:	muleq	r1, r0, lr
   11d9c:	andeq	r3, r1, r8, ror lr
   11da0:	andeq	r3, r1, r8, asr ip
   11da4:	andeq	r3, r1, ip, ror #27
   11da8:	andeq	r3, r1, r8, lsl lr
   11dac:	andeq	r3, r1, r0, lsr lr
   11db0:	andeq	r5, r2, r4, lsr r2
   11db4:	andeq	r5, r2, r0, lsr r2
   11db8:	strdeq	r3, [r1], -r8
   11dbc:	andeq	r3, r1, r8, ror #26
   11dc0:	muleq	r1, ip, sp
   11dc4:	andeq	r3, r1, r0, lsr #27
   11dc8:			; <UNDEFINED> instruction: 0x00013db0
   11dcc:	andeq	r3, r1, ip, ror #25
   11dd0:	andeq	r3, r1, ip, ror #28
   11dd4:	andeq	r3, r1, r4, lsr #25
   11dd8:	andeq	r3, r1, r8, lsr #27
   11ddc:	andeq	r3, r1, ip, asr #28
   11de0:	andeq	r3, r1, ip, asr #20
   11de4:	andeq	r3, r1, r4, lsr fp
   11de8:	strdeq	r3, [r1], -ip
   11dec:	muleq	r1, r8, fp
   11df0:	andeq	r3, r1, r4, asr #27
   11df4:	andeq	r3, r1, r8, ror #24
   11df8:	andeq	r3, r1, ip, lsr #25
   11dfc:	ldrdeq	r3, [r1], -r4
   11e00:	andeq	r3, r1, r8, ror sp
   11e04:	andeq	r3, r1, r4, lsr #10
   11e08:	andeq	r3, r1, r8, asr #26
   11e0c:	andeq	r3, r1, r8, asr sp
   11e10:	andeq	r5, r2, r8, lsr #4
   11e14:	andeq	r3, r1, r0, lsr ip
   11e18:	muleq	r1, ip, ip
   11e1c:	ldr	r7, [sp, #112]	; 0x70
   11e20:	mov	r0, r5
   11e24:	bl	112a0 <fclose@plt>
   11e28:	cmp	r8, r7
   11e2c:	bne	11c5c <__assert_fail@plt+0x8e4>
   11e30:	ldr	r3, [sl, #40]	; 0x28
   11e34:	ldr	r2, [sp, #48]	; 0x30
   11e38:	cmp	r3, #0
   11e3c:	cmpne	r2, #0
   11e40:	bne	1222c <__assert_fail@plt+0xeb4>
   11e44:	ldr	r3, [sp, #44]	; 0x2c
   11e48:	cmp	r3, #0
   11e4c:	beq	11e8c <__assert_fail@plt+0xb14>
   11e50:	add	r1, sp, #104	; 0x68
   11e54:	mov	r0, r6
   11e58:	bl	1133c <getpidcon@plt>
   11e5c:	cmp	r0, #0
   11e60:	blt	11c5c <__assert_fail@plt+0x8e4>
   11e64:	mov	r3, #0
   11e68:	str	r3, [sp]
   11e6c:	mov	r2, r3
   11e70:	ldr	r1, [sp, #104]	; 0x68
   11e74:	ldr	r0, [sp, #44]	; 0x2c
   11e78:	bl	11144 <regexec@plt>
   11e7c:	cmp	r0, #0
   11e80:	ldr	r0, [sp, #104]	; 0x68
   11e84:	bne	12354 <__assert_fail@plt+0xfdc>
   11e88:	bl	11318 <freecon@plt>
   11e8c:	ldr	r8, [sl, #8]
   11e90:	ldr	ip, [sl, #12]
   11e94:	add	r0, sp, #108	; 0x6c
   11e98:	mov	r3, r6
   11e9c:	ldr	r2, [pc, #-260]	; 11da0 <__assert_fail@plt+0xa28>
   11ea0:	mov	r1, #1
   11ea4:	orr	r8, r8, ip
   11ea8:	bl	111b0 <__asprintf_chk@plt>
   11eac:	cmp	r0, #0
   11eb0:	blt	11c5c <__assert_fail@plt+0x8e4>
   11eb4:	ldr	r1, [pc, #-240]	; 11dcc <__assert_fail@plt+0xa54>
   11eb8:	ldr	r0, [sp, #108]	; 0x6c
   11ebc:	bl	1130c <fopen64@plt>
   11ec0:	subs	r5, r0, #0
   11ec4:	ldr	r0, [sp, #108]	; 0x6c
   11ec8:	beq	127b4 <__assert_fail@plt+0x143c>
   11ecc:	bl	110c0 <free@plt>
   11ed0:	add	r0, sp, #724	; 0x2d4
   11ed4:	mov	r2, r5
   11ed8:	mov	r1, #1024	; 0x400
   11edc:	bl	110cc <fgets@plt>
   11ee0:	cmp	r0, #0
   11ee4:	mov	r0, r5
   11ee8:	beq	12878 <__assert_fail@plt+0x1500>
   11eec:	bl	112a0 <fclose@plt>
   11ef0:	mov	r1, #40	; 0x28
   11ef4:	add	r0, sp, #724	; 0x2d4
   11ef8:	bl	11228 <strchr@plt>
   11efc:	mov	r1, #41	; 0x29
   11f00:	add	r9, r0, #1
   11f04:	mov	r0, r9
   11f08:	bl	112d0 <strrchr@plt>
   11f0c:	mov	r1, r9
   11f10:	sub	r3, r0, r9
   11f14:	cmp	r3, #63	; 0x3f
   11f18:	movcc	r5, r3
   11f1c:	movcs	r5, #63	; 0x3f
   11f20:	str	r3, [sp, #52]	; 0x34
   11f24:	mov	r2, r5
   11f28:	mov	r3, #64	; 0x40
   11f2c:	mov	r7, r0
   11f30:	add	r0, sp, #660	; 0x294
   11f34:	bl	11108 <__strncpy_chk@plt>
   11f38:	add	r3, sp, #3792	; 0xed0
   11f3c:	add	r3, r3, #8
   11f40:	add	r5, r3, r5
   11f44:	cmp	r8, #0
   11f48:	mov	r3, #0
   11f4c:	strb	r3, [r5, #-3140]	; 0xfffff3bc
   11f50:	bne	12100 <__assert_fail@plt+0xd88>
   11f54:	vmov.f64	d0, d9
   11f58:	ldr	r3, [sl, #8]
   11f5c:	cmp	r3, #0
   11f60:	beq	11f78 <__assert_fail@plt+0xc00>
   11f64:	vmov	s15, r3
   11f68:	vcvt.f64.s32	d7, s15
   11f6c:	vcmpe.f64	d7, d0
   11f70:	vmrs	APSR_nzcv, fpscr
   11f74:	bmi	11c5c <__assert_fail@plt+0x8e4>
   11f78:	ldr	r3, [sl, #12]
   11f7c:	cmp	r3, #0
   11f80:	beq	11f98 <__assert_fail@plt+0xc20>
   11f84:	vmov	s15, r3
   11f88:	vcvt.f64.s32	d7, s15
   11f8c:	vcmpe.f64	d7, d0
   11f90:	vmrs	APSR_nzcv, fpscr
   11f94:	bgt	11c5c <__assert_fail@plt+0x8e4>
   11f98:	cmp	fp, #0
   11f9c:	beq	11fa8 <__assert_fail@plt+0xc30>
   11fa0:	mov	r0, fp
   11fa4:	bl	110c0 <free@plt>
   11fa8:	ldr	r3, [sp, #52]	; 0x34
   11fac:	cmp	r3, #62	; 0x3e
   11fb0:	movls	r3, #0
   11fb4:	strls	r3, [sp, #64]	; 0x40
   11fb8:	bhi	12244 <__assert_fail@plt+0xecc>
   11fbc:	mov	fp, r3
   11fc0:	ldr	r3, [sp, #20]
   11fc4:	cmp	r3, #0
   11fc8:	ble	1241c <__assert_fail@plt+0x10a4>
   11fcc:	ldr	r3, [sp, #64]	; 0x40
   11fd0:	ldr	r7, [pc, #-564]	; 11da4 <__assert_fail@plt+0xa2c>
   11fd4:	cmp	r3, #0
   11fd8:	ldr	r3, [sp, #68]	; 0x44
   11fdc:	add	r8, sp, #660	; 0x294
   11fe0:	add	r5, r3, #4
   11fe4:	movne	r8, fp
   11fe8:	mov	r9, #0
   11fec:	ldr	r3, [sl, #24]
   11ff0:	cmp	r3, #0
   11ff4:	beq	121d8 <__assert_fail@plt+0xe60>
   11ff8:	ldr	r0, [sp, #60]	; 0x3c
   11ffc:	mov	r3, #0
   12000:	str	r3, [sp]
   12004:	mov	r2, r3
   12008:	mov	r1, r8
   1200c:	add	r0, r0, r9, lsl #5
   12010:	bl	11144 <regexec@plt>
   12014:	cmp	r0, #0
   12018:	bne	12214 <__assert_fail@plt+0xe9c>
   1201c:	ldr	r3, [sl, #4]
   12020:	cmp	r3, #0
   12024:	bne	12724 <__assert_fail@plt+0x13ac>
   12028:	ldr	r8, [sl, #16]
   1202c:	mov	r7, r6
   12030:	cmp	r8, #0
   12034:	beq	11c18 <__assert_fail@plt+0x8a0>
   12038:	mov	r3, #0
   1203c:	ldr	r8, [pc, #-608]	; 11de4 <__assert_fail@plt+0xa6c>
   12040:	add	r5, sp, #112	; 0x70
   12044:	str	r3, [sp, #112]	; 0x70
   12048:	str	r3, [sp, #108]	; 0x6c
   1204c:	ldr	r6, [sp, #36]	; 0x24
   12050:	str	r9, [sp, #52]	; 0x34
   12054:	b	12074 <__assert_fail@plt+0xcfc>
   12058:	ldr	r0, [sp, #112]	; 0x70
   1205c:	ldrb	r3, [r0]
   12060:	cmp	r3, #10
   12064:	beq	127b4 <__assert_fail@plt+0x143c>
   12068:	bl	112b8 <rpmatch@plt>
   1206c:	cmp	r0, #0
   12070:	bge	11bec <__assert_fail@plt+0x874>
   12074:	cmp	r6, #15
   12078:	mov	r2, #5
   1207c:	ldreq	r1, [pc, #-732]	; 11da8 <__assert_fail@plt+0xa30>
   12080:	ldrne	r1, [pc, #-732]	; 11dac <__assert_fail@plt+0xa34>
   12084:	mov	r0, #0
   12088:	ldr	r9, [sl, #4]
   1208c:	bl	110fc <dcgettext@plt>
   12090:	cmp	r9, #0
   12094:	ldr	r3, [pc, #-700]	; 11de0 <__assert_fail@plt+0xa68>
   12098:	add	r2, sp, #660	; 0x294
   1209c:	movne	r3, r8
   120a0:	str	r7, [sp]
   120a4:	mov	r1, r0
   120a8:	mov	r0, #1
   120ac:	bl	11270 <__printf_chk@plt>
   120b0:	ldr	r3, [pc, #-776]	; 11db0 <__assert_fail@plt+0xa38>
   120b4:	ldr	r0, [r3]
   120b8:	bl	110b4 <fflush@plt>
   120bc:	ldr	r3, [pc, #-784]	; 11db4 <__assert_fail@plt+0xa3c>
   120c0:	mov	r2, #10
   120c4:	add	r1, sp, #108	; 0x6c
   120c8:	ldr	r3, [r3]
   120cc:	mov	r0, r5
   120d0:	bl	11078 <__getdelim@plt>
   120d4:	cmp	r0, #0
   120d8:	bge	12058 <__assert_fail@plt+0xce0>
   120dc:	b	11c5c <__assert_fail@plt+0x8e4>
   120e0:	ldr	r0, [sp, #28]
   120e4:	lsl	r1, r6, #3
   120e8:	bl	11138 <realloc@plt>
   120ec:	subs	r3, r0, #0
   120f0:	str	r3, [sp, #28]
   120f4:	beq	1296c <__assert_fail@plt+0x15f4>
   120f8:	lsl	r6, r6, #1
   120fc:	b	11a9c <__assert_fail@plt+0x724>
   12100:	mov	r2, #0
   12104:	mov	r3, #0
   12108:	add	r5, sp, #120	; 0x78
   1210c:	add	r0, r7, #2
   12110:	strd	r2, [r5, #-8]!
   12114:	ldr	r1, [pc, #-868]	; 11db8 <__assert_fail@plt+0xa40>
   12118:	mov	r2, r5
   1211c:	bl	112e8 <sscanf@plt>
   12120:	cmp	r0, #1
   12124:	mov	r7, r0
   12128:	bne	11c5c <__assert_fail@plt+0x8e4>
   1212c:	mov	r0, #2
   12130:	ldrd	r8, [sp, #112]	; 0x70
   12134:	bl	1112c <sysconf@plt>
   12138:	vmov	s15, r0
   1213c:	cmp	r0, #0
   12140:	vcvt.f64.s32	d10, s15
   12144:	ble	1299c <__assert_fail@plt+0x1624>
   12148:	ldr	r1, [pc, #-900]	; 11dcc <__assert_fail@plt+0xa54>
   1214c:	ldr	r0, [pc, #-920]	; 11dbc <__assert_fail@plt+0xa44>
   12150:	bl	1130c <fopen64@plt>
   12154:	subs	r5, r0, #0
   12158:	beq	1297c <__assert_fail@plt+0x1604>
   1215c:	mov	r0, r7
   12160:	ldr	r1, [pc, #-936]	; 11dc0 <__assert_fail@plt+0xa48>
   12164:	bl	112c4 <setlocale@plt>
   12168:	add	r2, sp, #1744	; 0x6d0
   1216c:	add	r2, r2, #4
   12170:	ldr	r1, [pc, #-948]	; 11dc4 <__assert_fail@plt+0xa4c>
   12174:	mov	r7, r0
   12178:	mov	r0, r5
   1217c:	bl	11258 <fscanf@plt>
   12180:	cmn	r0, #1
   12184:	beq	12620 <__assert_fail@plt+0x12a8>
   12188:	mov	r0, r5
   1218c:	bl	112a0 <fclose@plt>
   12190:	mov	r1, r7
   12194:	mov	r0, #1
   12198:	bl	112c4 <setlocale@plt>
   1219c:	add	r0, sp, #1744	; 0x6d0
   121a0:	mov	r1, #0
   121a4:	add	r0, r0, #4
   121a8:	bl	1127c <strtod@plt>
   121ac:	mov	r0, r8
   121b0:	mov	r1, r9
   121b4:	vmov.f64	d8, d0
   121b8:	bl	13318 <__assert_fail@plt+0x1fa0>
   121bc:	vmov	d7, r0, r1
   121c0:	vdiv.f64	d0, d7, d10
   121c4:	vsub.f64	d0, d8, d0
   121c8:	vcmpe.f64	d0, #0.0
   121cc:	vmrs	APSR_nzcv, fpscr
   121d0:	bpl	11f58 <__assert_fail@plt+0xbe0>
   121d4:	b	11f54 <__assert_fail@plt+0xbdc>
   121d8:	ldrd	r2, [r5, #4]
   121dc:	orrs	r3, r2, r3
   121e0:	bne	12450 <__assert_fail@plt+0x10d8>
   121e4:	ldr	r3, [sp, #52]	; 0x34
   121e8:	ldr	r2, [sp, #56]	; 0x38
   121ec:	cmp	r3, #62	; 0x3e
   121f0:	ldr	r3, [sl, #36]	; 0x24
   121f4:	ldr	r0, [r2, r9, lsl #2]
   121f8:	bhi	125e4 <__assert_fail@plt+0x126c>
   121fc:	cmp	r3, #1
   12200:	add	r1, sp, #660	; 0x294
   12204:	beq	1262c <__assert_fail@plt+0x12b4>
   12208:	bl	1109c <strcmp@plt>
   1220c:	cmp	r0, #0
   12210:	beq	1201c <__assert_fail@plt+0xca4>
   12214:	ldr	r3, [sp, #20]
   12218:	add	r9, r9, #1
   1221c:	cmp	r3, r9
   12220:	add	r5, r5, #112	; 0x70
   12224:	bne	11fec <__assert_fail@plt+0xc74>
   12228:	b	11c5c <__assert_fail@plt+0x8e4>
   1222c:	mov	r0, r6
   12230:	bl	12b8c <__assert_fail@plt+0x1814>
   12234:	ldr	r3, [sp, #48]	; 0x30
   12238:	cmp	r3, r0
   1223c:	beq	11e44 <__assert_fail@plt+0xacc>
   12240:	b	11c5c <__assert_fail@plt+0x8e4>
   12244:	add	r0, sp, #112	; 0x70
   12248:	mov	r3, r6
   1224c:	ldr	r2, [pc, #-1164]	; 11dc8 <__assert_fail@plt+0xa50>
   12250:	mov	r1, #1
   12254:	bl	111b0 <__asprintf_chk@plt>
   12258:	cmp	r0, #0
   1225c:	blt	1253c <__assert_fail@plt+0x11c4>
   12260:	ldr	r1, [pc, #-1180]	; 11dcc <__assert_fail@plt+0xa54>
   12264:	ldr	r0, [sp, #112]	; 0x70
   12268:	bl	1130c <fopen64@plt>
   1226c:	subs	r7, r0, #0
   12270:	ldr	r0, [sp, #112]	; 0x70
   12274:	beq	1288c <__assert_fail@plt+0x1514>
   12278:	bl	110c0 <free@plt>
   1227c:	mov	r0, #128	; 0x80
   12280:	bl	111bc <malloc@plt>
   12284:	subs	r8, r0, #0
   12288:	beq	125a8 <__assert_fail@plt+0x1230>
   1228c:	mov	r5, #128	; 0x80
   12290:	mov	r9, r8
   12294:	b	122b0 <__assert_fail@plt+0xf38>
   12298:	mov	r0, r7
   1229c:	bl	11264 <fgetc@plt>
   122a0:	add	r3, r0, #1
   122a4:	cmp	r3, #1
   122a8:	bls	122e4 <__assert_fail@plt+0xf6c>
   122ac:	strb	r0, [r9], #1
   122b0:	add	r3, r8, r5
   122b4:	cmp	r9, r3
   122b8:	mov	fp, r5
   122bc:	bne	12298 <__assert_fail@plt+0xf20>
   122c0:	lsl	r5, r5, #1
   122c4:	mov	r1, r5
   122c8:	mov	r0, r8
   122cc:	bl	11138 <realloc@plt>
   122d0:	cmp	r0, #0
   122d4:	beq	12860 <__assert_fail@plt+0x14e8>
   122d8:	add	r9, r0, fp
   122dc:	mov	r8, r0
   122e0:	b	12298 <__assert_fail@plt+0xf20>
   122e4:	mov	r3, #0
   122e8:	strb	r3, [r9]
   122ec:	ldrb	fp, [r8]
   122f0:	cmp	fp, #0
   122f4:	beq	12510 <__assert_fail@plt+0x1198>
   122f8:	mov	r1, #47	; 0x2f
   122fc:	mov	r0, r8
   12300:	bl	112d0 <strrchr@plt>
   12304:	mov	r2, #63	; 0x3f
   12308:	add	r1, sp, #660	; 0x294
   1230c:	cmp	r0, #0
   12310:	addne	fp, r0, #1
   12314:	moveq	fp, r8
   12318:	mov	r0, fp
   1231c:	bl	11348 <strncmp@plt>
   12320:	cmp	r0, #0
   12324:	bne	12290 <__assert_fail@plt+0xf18>
   12328:	mov	r0, fp
   1232c:	bl	11114 <strdup@plt>
   12330:	subs	fp, r0, #0
   12334:	beq	12860 <__assert_fail@plt+0x14e8>
   12338:	mov	r0, r7
   1233c:	bl	112a0 <fclose@plt>
   12340:	mov	r0, r8
   12344:	bl	110c0 <free@plt>
   12348:	mov	r3, #1
   1234c:	str	r3, [sp, #64]	; 0x40
   12350:	b	11fc0 <__assert_fail@plt+0xc48>
   12354:	bl	11318 <freecon@plt>
   12358:	b	11c5c <__assert_fail@plt+0x8e4>
   1235c:	ldr	r3, [sp, #20]
   12360:	cmp	r3, #0
   12364:	bne	12428 <__assert_fail@plt+0x10b0>
   12368:	clz	r8, r6
   1236c:	lsr	r8, r8, #5
   12370:	cmp	r6, #0
   12374:	beq	12400 <__assert_fail@plt+0x1088>
   12378:	ldr	r3, [sl, #32]
   1237c:	cmp	r3, #0
   12380:	ldrne	r5, [sp, #72]	; 0x48
   12384:	beq	12400 <__assert_fail@plt+0x1088>
   12388:	ldr	r7, [sl, #4]
   1238c:	mov	r4, #0
   12390:	b	123a0 <__assert_fail@plt+0x1028>
   12394:	add	r4, r4, #1
   12398:	cmp	r6, r4
   1239c:	ble	123e4 <__assert_fail@plt+0x106c>
   123a0:	ldr	r0, [r5, r4, lsl #2]
   123a4:	cmp	r7, #0
   123a8:	rsbne	r0, r0, #0
   123ac:	mov	r1, #0
   123b0:	bl	111ec <kill@plt>
   123b4:	lsl	r9, r4, #2
   123b8:	cmp	r0, #0
   123bc:	bge	12394 <__assert_fail@plt+0x101c>
   123c0:	bl	11234 <__errno_location@plt>
   123c4:	ldr	r3, [r0]
   123c8:	cmp	r3, #3
   123cc:	bne	12394 <__assert_fail@plt+0x101c>
   123d0:	sub	r6, r6, #1
   123d4:	cmp	r6, r4
   123d8:	ldr	r3, [r5, r6, lsl #2]
   123dc:	str	r3, [r5, r9]
   123e0:	bgt	123a0 <__assert_fail@plt+0x1028>
   123e4:	mov	r0, #1
   123e8:	bl	110f0 <sleep@plt>
   123ec:	cmp	r6, #0
   123f0:	beq	12400 <__assert_fail@plt+0x1088>
   123f4:	ldr	r3, [sl, #32]
   123f8:	cmp	r3, #0
   123fc:	bne	12388 <__assert_fail@plt+0x1010>
   12400:	ldr	r0, [sp, #72]	; 0x48
   12404:	bl	110c0 <free@plt>
   12408:	ldr	r0, [sp, #28]
   1240c:	bl	110c0 <free@plt>
   12410:	ldr	r0, [sp, #68]	; 0x44
   12414:	bl	110c0 <free@plt>
   12418:	b	116b4 <__assert_fail@plt+0x33c>
   1241c:	bne	11c5c <__assert_fail@plt+0x8e4>
   12420:	mvn	r9, #0
   12424:	b	1201c <__assert_fail@plt+0xca4>
   12428:	ldr	r3, [sp, #20]
   1242c:	sub	r2, r3, #1
   12430:	mov	r3, #1
   12434:	lsl	r3, r3, r2
   12438:	sub	r2, r3, #1
   1243c:	orr	r3, r2, r3
   12440:	ldr	r2, [sp, #80]	; 0x50
   12444:	subs	r8, r3, r2
   12448:	movne	r8, #1
   1244c:	b	12370 <__assert_fail@plt+0xff8>
   12450:	mov	r3, r6
   12454:	mov	r2, r7
   12458:	mov	r1, #1
   1245c:	add	r0, sp, #100	; 0x64
   12460:	bl	111b0 <__asprintf_chk@plt>
   12464:	cmp	r0, #0
   12468:	blt	12214 <__assert_fail@plt+0xe9c>
   1246c:	add	r2, sp, #152	; 0x98
   12470:	ldr	r1, [sp, #100]	; 0x64
   12474:	mov	r0, #3
   12478:	bl	11330 <__xstat64@plt>
   1247c:	cmp	r0, #0
   12480:	blt	12504 <__assert_fail@plt+0x118c>
   12484:	ldrd	r0, [r5, #4]
   12488:	ldrd	r2, [sp, #152]	; 0x98
   1248c:	cmp	r1, r3
   12490:	cmpeq	r0, r2
   12494:	bne	124ac <__assert_fail@plt+0x1134>
   12498:	ldrd	r0, [r5, #100]	; 0x64
   1249c:	ldrd	r2, [sp, #248]	; 0xf8
   124a0:	cmp	r1, r3
   124a4:	cmpeq	r0, r2
   124a8:	beq	1286c <__assert_fail@plt+0x14f4>
   124ac:	ldr	r3, [sp, #56]	; 0x38
   124b0:	ldr	r0, [r3, r9, lsl #2]
   124b4:	bl	1121c <strlen@plt>
   124b8:	add	r2, r0, #1
   124bc:	str	r0, [sp, #88]	; 0x58
   124c0:	mov	r0, r2
   124c4:	str	r2, [sp, #92]	; 0x5c
   124c8:	bl	111bc <malloc@plt>
   124cc:	subs	r3, r0, #0
   124d0:	beq	124fc <__assert_fail@plt+0x1184>
   124d4:	ldr	r2, [sp, #92]	; 0x5c
   124d8:	mov	r1, r3
   124dc:	ldr	r0, [sp, #100]	; 0x64
   124e0:	str	r3, [sp, #92]	; 0x5c
   124e4:	bl	11174 <readlink@plt>
   124e8:	ldr	r3, [sp, #88]	; 0x58
   124ec:	cmp	r0, r3
   124f0:	mov	r2, r0
   124f4:	ldr	r3, [sp, #92]	; 0x5c
   124f8:	beq	1277c <__assert_fail@plt+0x1404>
   124fc:	mov	r0, r3
   12500:	bl	110c0 <free@plt>
   12504:	ldr	r0, [sp, #100]	; 0x64
   12508:	bl	110c0 <free@plt>
   1250c:	b	12214 <__assert_fail@plt+0xe9c>
   12510:	mov	r0, r7
   12514:	bl	112a0 <fclose@plt>
   12518:	mov	r0, r8
   1251c:	bl	110c0 <free@plt>
   12520:	ldr	r3, [sl]
   12524:	cmp	r3, #0
   12528:	str	r3, [sp, #64]	; 0x40
   1252c:	beq	11fbc <__assert_fail@plt+0xc44>
   12530:	ldr	r3, [sl, #28]
   12534:	cmp	r3, #0
   12538:	bne	128a8 <__assert_fail@plt+0x1530>
   1253c:	mov	fp, #0
   12540:	b	11c5c <__assert_fail@plt+0x8e4>
   12544:	bl	11234 <__errno_location@plt>
   12548:	ldr	r0, [r0]
   1254c:	cmp	r0, #3
   12550:	beq	127bc <__assert_fail@plt+0x1444>
   12554:	ldr	r3, [pc, #-1868]	; 11e10 <__assert_fail@plt+0xa98>
   12558:	ldr	r5, [r3]
   1255c:	bl	111d4 <strerror@plt>
   12560:	ldr	r2, [sp, #64]	; 0x40
   12564:	add	r3, sp, #660	; 0x294
   12568:	cmp	r2, #0
   1256c:	movne	r3, fp
   12570:	str	r7, [sp]
   12574:	ldr	r2, [pc, #-1964]	; 11dd0 <__assert_fail@plt+0xa58>
   12578:	mov	r1, #1
   1257c:	str	r0, [sp, #4]
   12580:	mov	r0, r5
   12584:	bl	11294 <__fprintf_chk@plt>
   12588:	b	11c5c <__assert_fail@plt+0x8e4>
   1258c:	ldr	r0, [sp, #20]
   12590:	bl	111bc <malloc@plt>
   12594:	subs	r3, r0, #0
   12598:	str	r3, [sp, #68]	; 0x44
   1259c:	ldrne	r3, [sp, #20]
   125a0:	strne	r3, [sp, #60]	; 0x3c
   125a4:	bne	11a30 <__assert_fail@plt+0x6b8>
   125a8:	mov	r0, #1
   125ac:	bl	11210 <exit@plt>
   125b0:	bl	12b8c <__assert_fail@plt+0x1814>
   125b4:	str	r0, [sp, #48]	; 0x30
   125b8:	b	1191c <__assert_fail@plt+0x5a4>
   125bc:	mov	r1, #4
   125c0:	ldr	r0, [sp, #40]	; 0x28
   125c4:	bl	1106c <calloc@plt>
   125c8:	subs	r3, r0, #0
   125cc:	str	r3, [sp, #84]	; 0x54
   125d0:	bne	11ae8 <__assert_fail@plt+0x770>
   125d4:	ldr	r0, [pc, #-2056]	; 11dd4 <__assert_fail@plt+0xa5c>
   125d8:	bl	11168 <perror@plt>
   125dc:	mov	r0, #1
   125e0:	bl	11210 <exit@plt>
   125e4:	ldr	r2, [r5]
   125e8:	cmp	r2, #62	; 0x3e
   125ec:	ble	121fc <__assert_fail@plt+0xe84>
   125f0:	cmp	r3, #1
   125f4:	ldr	r3, [sp, #64]	; 0x40
   125f8:	beq	127fc <__assert_fail@plt+0x1484>
   125fc:	cmp	r3, #0
   12600:	beq	127e4 <__assert_fail@plt+0x146c>
   12604:	mov	r1, fp
   12608:	bl	1109c <strcmp@plt>
   1260c:	adds	r0, r0, #0
   12610:	movne	r0, #1
   12614:	cmp	r0, #0
   12618:	beq	1201c <__assert_fail@plt+0xca4>
   1261c:	b	12214 <__assert_fail@plt+0xe9c>
   12620:	ldr	r0, [pc, #-2128]	; 11dd8 <__assert_fail@plt+0xa60>
   12624:	bl	11168 <perror@plt>
   12628:	b	12188 <__assert_fail@plt+0xe10>
   1262c:	bl	1115c <strcasecmp@plt>
   12630:	cmp	r0, #0
   12634:	beq	1201c <__assert_fail@plt+0xca4>
   12638:	b	12214 <__assert_fail@plt+0xe9c>
   1263c:	ldr	r0, [r8]
   12640:	bl	11168 <perror@plt>
   12644:	ldr	r0, [sp, #68]	; 0x44
   12648:	bl	110c0 <free@plt>
   1264c:	b	125a8 <__assert_fail@plt+0x1230>
   12650:	lsl	r0, r3, #5
   12654:	bl	111bc <malloc@plt>
   12658:	subs	r3, r0, #0
   1265c:	str	r3, [sp, #60]	; 0x3c
   12660:	beq	125d4 <__assert_fail@plt+0x125c>
   12664:	ldr	r3, [sl, #36]	; 0x24
   12668:	ldr	r7, [sp, #20]
   1266c:	cmp	r3, #0
   12670:	moveq	r8, #9
   12674:	movne	r8, #11
   12678:	cmp	r7, #0
   1267c:	ble	12880 <__assert_fail@plt+0x1508>
   12680:	ldr	r9, [sp, #56]	; 0x38
   12684:	ldr	fp, [sp, #60]	; 0x3c
   12688:	mov	r4, #0
   1268c:	add	r6, fp, r4, lsl #5
   12690:	ldr	r1, [r9]
   12694:	mov	r0, r6
   12698:	mov	r2, r8
   1269c:	bl	11300 <regcomp@plt>
   126a0:	mov	r5, r9
   126a4:	add	r9, r9, #4
   126a8:	cmp	r0, #0
   126ac:	bne	12914 <__assert_fail@plt+0x159c>
   126b0:	add	r4, r4, #1
   126b4:	cmp	r7, r4
   126b8:	bne	1268c <__assert_fail@plt+0x1314>
   126bc:	str	r0, [sp, #68]	; 0x44
   126c0:	b	11a30 <__assert_fail@plt+0x6b8>
   126c4:	ldr	r3, [pc, #-2236]	; 11e10 <__assert_fail@plt+0xa98>
   126c8:	mov	r2, #5
   126cc:	ldr	r1, [pc, #-2296]	; 11ddc <__assert_fail@plt+0xa64>
   126d0:	mov	r0, #0
   126d4:	ldr	r5, [r3]
   126d8:	bl	110fc <dcgettext@plt>
   126dc:	ldr	r2, [pc, #-2308]	; 11de0 <__assert_fail@plt+0xa68>
   126e0:	cmp	r8, #0
   126e4:	moveq	r8, r2
   126e8:	ldr	r3, [pc, #-2316]	; 11de4 <__assert_fail@plt+0xa6c>
   126ec:	ldr	r2, [sp, #64]	; 0x40
   126f0:	ldr	r1, [sp, #36]	; 0x24
   126f4:	movne	r8, r3
   126f8:	cmp	r2, #0
   126fc:	str	r1, [sp, #8]
   12700:	add	r3, sp, #660	; 0x294
   12704:	str	r7, [sp, #4]
   12708:	movne	r3, fp
   1270c:	str	r8, [sp]
   12710:	mov	r1, #1
   12714:	mov	r2, r0
   12718:	mov	r0, r5
   1271c:	bl	11294 <__fprintf_chk@plt>
   12720:	b	11c38 <__assert_fail@plt+0x8c0>
   12724:	mov	r0, r6
   12728:	bl	112ac <getpgid@plt>
   1272c:	ldr	r3, [sp, #84]	; 0x54
   12730:	ldr	r2, [sp, #16]
   12734:	cmp	r0, #0
   12738:	mov	r7, r0
   1273c:	str	r0, [r3, r2, lsl #2]
   12740:	blt	12818 <__assert_fail@plt+0x14a0>
   12744:	mov	r3, #0
   12748:	ldr	r0, [sp, #84]	; 0x54
   1274c:	ldr	r1, [sp, #16]
   12750:	b	12764 <__assert_fail@plt+0x13ec>
   12754:	ldr	r2, [r0, r3, lsl #2]
   12758:	cmp	r7, r2
   1275c:	beq	11c5c <__assert_fail@plt+0x8e4>
   12760:	add	r3, r3, #1
   12764:	cmp	r1, r3
   12768:	bne	12754 <__assert_fail@plt+0x13dc>
   1276c:	ldr	r3, [sl, #16]
   12770:	cmp	r3, #0
   12774:	beq	11c08 <__assert_fail@plt+0x890>
   12778:	b	12038 <__assert_fail@plt+0xcc0>
   1277c:	mov	r1, r3
   12780:	ldr	r3, [sp, #56]	; 0x38
   12784:	ldr	r0, [r3, r9, lsl #2]
   12788:	bl	110e4 <memcmp@plt>
   1278c:	ldr	r3, [sp, #92]	; 0x5c
   12790:	str	r0, [sp, #88]	; 0x58
   12794:	mov	r0, r3
   12798:	bl	110c0 <free@plt>
   1279c:	ldr	r0, [sp, #100]	; 0x64
   127a0:	bl	110c0 <free@plt>
   127a4:	ldr	r2, [sp, #88]	; 0x58
   127a8:	cmp	r2, #0
   127ac:	beq	1201c <__assert_fail@plt+0xca4>
   127b0:	b	12214 <__assert_fail@plt+0xe9c>
   127b4:	bl	110c0 <free@plt>
   127b8:	b	11c5c <__assert_fail@plt+0x8e4>
   127bc:	ldr	r3, [sl, #16]
   127c0:	cmp	r3, #0
   127c4:	beq	11c5c <__assert_fail@plt+0x8e4>
   127c8:	b	12554 <__assert_fail@plt+0x11dc>
   127cc:	ldr	r6, [sp, #40]	; 0x28
   127d0:	str	r6, [sp, #80]	; 0x50
   127d4:	b	11c88 <__assert_fail@plt+0x910>
   127d8:	bl	12db0 <__assert_fail@plt+0x1a38>
   127dc:	mov	r8, #0
   127e0:	b	116b4 <__assert_fail@plt+0x33c>
   127e4:	mov	r2, #63	; 0x3f
   127e8:	add	r1, sp, #660	; 0x294
   127ec:	bl	11348 <strncmp@plt>
   127f0:	adds	r0, r0, #0
   127f4:	movne	r0, #1
   127f8:	b	12614 <__assert_fail@plt+0x129c>
   127fc:	cmp	r3, #0
   12800:	beq	12848 <__assert_fail@plt+0x14d0>
   12804:	mov	r1, fp
   12808:	bl	1115c <strcasecmp@plt>
   1280c:	adds	r0, r0, #0
   12810:	movne	r0, #1
   12814:	b	12614 <__assert_fail@plt+0x129c>
   12818:	bl	11234 <__errno_location@plt>
   1281c:	ldr	r3, [pc, #-2580]	; 11e10 <__assert_fail@plt+0xa98>
   12820:	ldr	r5, [r3]
   12824:	ldr	r0, [r0]
   12828:	bl	111d4 <strerror@plt>
   1282c:	mov	r3, r6
   12830:	ldr	r2, [pc, #-2640]	; 11de8 <__assert_fail@plt+0xa70>
   12834:	mov	r1, #1
   12838:	str	r0, [sp]
   1283c:	mov	r0, r5
   12840:	bl	11294 <__fprintf_chk@plt>
   12844:	b	12744 <__assert_fail@plt+0x13cc>
   12848:	mov	r2, #63	; 0x3f
   1284c:	add	r1, sp, #660	; 0x294
   12850:	bl	11240 <strncasecmp@plt>
   12854:	adds	r0, r0, #0
   12858:	movne	r0, #1
   1285c:	b	12614 <__assert_fail@plt+0x129c>
   12860:	mov	r0, r8
   12864:	bl	110c0 <free@plt>
   12868:	b	125a8 <__assert_fail@plt+0x1230>
   1286c:	ldr	r0, [sp, #100]	; 0x64
   12870:	bl	110c0 <free@plt>
   12874:	b	1201c <__assert_fail@plt+0xca4>
   12878:	bl	112a0 <fclose@plt>
   1287c:	b	11c5c <__assert_fail@plt+0x8e4>
   12880:	mov	r3, #0
   12884:	str	r3, [sp, #68]	; 0x44
   12888:	b	11a30 <__assert_fail@plt+0x6b8>
   1288c:	bl	110c0 <free@plt>
   12890:	b	1253c <__assert_fail@plt+0x11c4>
   12894:	mov	r2, #5
   12898:	ldr	r1, [pc, #-2740]	; 11dec <__assert_fail@plt+0xa74>
   1289c:	mov	r0, #0
   128a0:	bl	110fc <dcgettext@plt>
   128a4:	bl	12ad8 <__assert_fail@plt+0x1760>
   128a8:	ldr	r3, [pc, #-2720]	; 11e10 <__assert_fail@plt+0xa98>
   128ac:	mov	r0, fp
   128b0:	mov	r2, #5
   128b4:	ldr	r1, [pc, #-2764]	; 11df0 <__assert_fail@plt+0xa78>
   128b8:	ldr	r5, [r3]
   128bc:	bl	110fc <dcgettext@plt>
   128c0:	str	r6, [sp]
   128c4:	add	r3, sp, #660	; 0x294
   128c8:	mov	r1, #1
   128cc:	mov	r2, r0
   128d0:	mov	r0, r5
   128d4:	bl	11294 <__fprintf_chk@plt>
   128d8:	b	1253c <__assert_fail@plt+0x11c4>
   128dc:	ldr	r3, [pc, #-2772]	; 11e10 <__assert_fail@plt+0xa98>
   128e0:	mov	r2, #5
   128e4:	ldr	r1, [pc, #-2808]	; 11df4 <__assert_fail@plt+0xa7c>
   128e8:	mov	r0, #0
   128ec:	ldr	r4, [r3]
   128f0:	bl	110fc <dcgettext@plt>
   128f4:	ldr	r3, [pc, #-2788]	; 11e18 <__assert_fail@plt+0xaa0>
   128f8:	mov	r2, r0
   128fc:	mov	r1, #1
   12900:	mov	r0, r4
   12904:	bl	11294 <__fprintf_chk@plt>
   12908:	mov	r0, #1
   1290c:	bl	11210 <exit@plt>
   12910:	bl	11120 <__stack_chk_fail@plt>
   12914:	ldr	r3, [pc, #-2828]	; 11e10 <__assert_fail@plt+0xa98>
   12918:	mov	r2, #5
   1291c:	ldr	r1, [pc, #-2860]	; 11df8 <__assert_fail@plt+0xa80>
   12920:	mov	r0, #0
   12924:	ldr	r4, [r3]
   12928:	bl	110fc <dcgettext@plt>
   1292c:	ldr	r3, [r5]
   12930:	mov	r1, #1
   12934:	mov	r7, fp
   12938:	mov	r2, r0
   1293c:	mov	r0, r4
   12940:	bl	11294 <__fprintf_chk@plt>
   12944:	b	12954 <__assert_fail@plt+0x15dc>
   12948:	mov	r0, r7
   1294c:	bl	11198 <regfree@plt>
   12950:	add	r7, r7, #32
   12954:	cmp	r7, r6
   12958:	bne	12948 <__assert_fail@plt+0x15d0>
   1295c:	ldr	r0, [sp, #60]	; 0x3c
   12960:	bl	110c0 <free@plt>
   12964:	mov	r0, #1
   12968:	bl	11210 <exit@plt>
   1296c:	ldr	r0, [pc, #-2936]	; 11dfc <__assert_fail@plt+0xa84>
   12970:	bl	11168 <perror@plt>
   12974:	mov	r0, #1
   12978:	bl	11210 <exit@plt>
   1297c:	ldr	r3, [pc, #-2932]	; 11e10 <__assert_fail@plt+0xa98>
   12980:	mov	r2, #35	; 0x23
   12984:	mov	r1, r7
   12988:	ldr	r3, [r3]
   1298c:	ldr	r0, [pc, #-2964]	; 11e00 <__assert_fail@plt+0xa88>
   12990:	bl	1118c <fwrite@plt>
   12994:	mov	r0, r7
   12998:	bl	11210 <exit@plt>
   1299c:	ldr	r3, [pc, #-2976]	; 11e04 <__assert_fail@plt+0xa8c>
   129a0:	mov	r2, #154	; 0x9a
   129a4:	ldr	r1, [pc, #-2980]	; 11e08 <__assert_fail@plt+0xa90>
   129a8:	ldr	r0, [pc, #-2980]	; 11e0c <__assert_fail@plt+0xa94>
   129ac:	bl	11378 <__assert_fail@plt>
   129b0:	ldr	r3, [pc, #-2984]	; 11e10 <__assert_fail@plt+0xa98>
   129b4:	mov	r0, r4
   129b8:	mov	r2, #5
   129bc:	ldr	r1, [pc, #-2992]	; 11e14 <__assert_fail@plt+0xa9c>
   129c0:	ldr	r4, [r3]
   129c4:	bl	110fc <dcgettext@plt>
   129c8:	mov	r3, #32
   129cc:	b	128f8 <__assert_fail@plt+0x1580>
   129d0:	ldr	r0, [pc, #-3008]	; 11e18 <__assert_fail@plt+0xaa0>
   129d4:	bl	11168 <perror@plt>
   129d8:	mov	r0, #1
   129dc:	bl	11210 <exit@plt>
   129e0:	str	r6, [sp, #60]	; 0x3c
   129e4:	b	11a30 <__assert_fail@plt+0x6b8>
   129e8:	mov	fp, #0
   129ec:	mov	lr, #0
   129f0:	pop	{r1}		; (ldr r1, [sp], #4)
   129f4:	mov	r2, sp
   129f8:	push	{r2}		; (str r2, [sp, #-4]!)
   129fc:	push	{r0}		; (str r0, [sp, #-4]!)
   12a00:	ldr	ip, [pc, #16]	; 12a18 <__assert_fail@plt+0x16a0>
   12a04:	push	{ip}		; (str ip, [sp, #-4]!)
   12a08:	ldr	r0, [pc, #12]	; 12a1c <__assert_fail@plt+0x16a4>
   12a0c:	ldr	r3, [pc, #12]	; 12a20 <__assert_fail@plt+0x16a8>
   12a10:	bl	111c8 <__libc_start_main@plt>
   12a14:	bl	11354 <abort@plt>
   12a18:	andeq	r3, r1, ip, ror #7
   12a1c:	andeq	r1, r1, r8, lsl #7
   12a20:	andeq	r3, r1, ip, lsl #7
   12a24:	ldr	r3, [pc, #20]	; 12a40 <__assert_fail@plt+0x16c8>
   12a28:	ldr	r2, [pc, #20]	; 12a44 <__assert_fail@plt+0x16cc>
   12a2c:	add	r3, pc, r3
   12a30:	ldr	r2, [r3, r2]
   12a34:	cmp	r2, #0
   12a38:	bxeq	lr
   12a3c:	b	111e0 <__gmon_start__@plt>
   12a40:	andeq	r2, r1, ip, asr #11
   12a44:	andeq	r0, r0, r4, lsl r1
   12a48:	ldr	r0, [pc, #24]	; 12a68 <__assert_fail@plt+0x16f0>
   12a4c:	ldr	r3, [pc, #24]	; 12a6c <__assert_fail@plt+0x16f4>
   12a50:	cmp	r3, r0
   12a54:	bxeq	lr
   12a58:	ldr	r3, [pc, #16]	; 12a70 <__assert_fail@plt+0x16f8>
   12a5c:	cmp	r3, #0
   12a60:	bxeq	lr
   12a64:	bx	r3
   12a68:	andeq	r5, r2, r0, lsr #4
   12a6c:	andeq	r5, r2, r0, lsr #4
   12a70:	andeq	r0, r0, r0
   12a74:	ldr	r0, [pc, #36]	; 12aa0 <__assert_fail@plt+0x1728>
   12a78:	ldr	r1, [pc, #36]	; 12aa4 <__assert_fail@plt+0x172c>
   12a7c:	sub	r1, r1, r0
   12a80:	asr	r1, r1, #2
   12a84:	add	r1, r1, r1, lsr #31
   12a88:	asrs	r1, r1, #1
   12a8c:	bxeq	lr
   12a90:	ldr	r3, [pc, #16]	; 12aa8 <__assert_fail@plt+0x1730>
   12a94:	cmp	r3, #0
   12a98:	bxeq	lr
   12a9c:	bx	r3
   12aa0:	andeq	r5, r2, r0, lsr #4
   12aa4:	andeq	r5, r2, r0, lsr #4
   12aa8:	andeq	r0, r0, r0
   12aac:	push	{r4, lr}
   12ab0:	ldr	r4, [pc, #24]	; 12ad0 <__assert_fail@plt+0x1758>
   12ab4:	ldrb	r3, [r4]
   12ab8:	cmp	r3, #0
   12abc:	popne	{r4, pc}
   12ac0:	bl	12a48 <__assert_fail@plt+0x16d0>
   12ac4:	mov	r3, #1
   12ac8:	strb	r3, [r4]
   12acc:	pop	{r4, pc}
   12ad0:	andeq	r5, r2, r4, asr #4
   12ad4:	b	12a74 <__assert_fail@plt+0x16fc>
   12ad8:	subs	r3, r0, #0
   12adc:	push	{r4, lr}
   12ae0:	ldr	r4, [pc, #144]	; 12b78 <__assert_fail@plt+0x1800>
   12ae4:	beq	12af8 <__assert_fail@plt+0x1780>
   12ae8:	ldr	r2, [pc, #140]	; 12b7c <__assert_fail@plt+0x1804>
   12aec:	ldr	r0, [r4]
   12af0:	mov	r1, #1
   12af4:	bl	11294 <__fprintf_chk@plt>
   12af8:	mov	r2, #5
   12afc:	ldr	r1, [pc, #124]	; 12b80 <__assert_fail@plt+0x1808>
   12b00:	mov	r0, #0
   12b04:	ldr	r5, [r4]
   12b08:	bl	110fc <dcgettext@plt>
   12b0c:	mov	r1, #1
   12b10:	mov	r2, r0
   12b14:	mov	r0, r5
   12b18:	bl	11294 <__fprintf_chk@plt>
   12b1c:	mov	r2, #5
   12b20:	ldr	r1, [pc, #92]	; 12b84 <__assert_fail@plt+0x180c>
   12b24:	mov	r0, #0
   12b28:	ldr	r5, [r4]
   12b2c:	bl	110fc <dcgettext@plt>
   12b30:	mov	r1, #1
   12b34:	mov	r2, r0
   12b38:	mov	r0, r5
   12b3c:	bl	11294 <__fprintf_chk@plt>
   12b40:	mov	r2, #5
   12b44:	ldr	r1, [pc, #60]	; 12b88 <__assert_fail@plt+0x1810>
   12b48:	mov	r0, #0
   12b4c:	ldr	r5, [r4]
   12b50:	bl	110fc <dcgettext@plt>
   12b54:	mov	r1, #1
   12b58:	mov	r2, r0
   12b5c:	mov	r0, r5
   12b60:	bl	11294 <__fprintf_chk@plt>
   12b64:	ldr	r1, [r4]
   12b68:	mov	r0, #10
   12b6c:	bl	112dc <fputc@plt>
   12b70:	mov	r0, #1
   12b74:	bl	11210 <exit@plt>
   12b78:	andeq	r5, r2, r8, lsr #4
   12b7c:	andeq	r3, r1, r4, ror lr
   12b80:	andeq	r3, r1, r0, lsr r5
   12b84:			; <UNDEFINED> instruction: 0x000135b0
   12b88:	andeq	r3, r1, r8, ror #18
   12b8c:	push	{r4, lr}
   12b90:	sub	sp, sp, #176	; 0xb0
   12b94:	ldr	r4, [pc, #96]	; 12bfc <__assert_fail@plt+0x1884>
   12b98:	ldr	r1, [pc, #96]	; 12c00 <__assert_fail@plt+0x1888>
   12b9c:	ldr	r2, [pc, #96]	; 12c04 <__assert_fail@plt+0x188c>
   12ba0:	mov	r3, #50	; 0x32
   12ba4:	ldr	ip, [r4]
   12ba8:	strd	r0, [sp, #4]
   12bac:	str	r2, [sp]
   12bb0:	mov	r1, r3
   12bb4:	mov	r2, #1
   12bb8:	add	r0, sp, #120	; 0x78
   12bbc:	str	ip, [sp, #172]	; 0xac
   12bc0:	bl	1136c <__snprintf_chk@plt>
   12bc4:	add	r2, sp, #16
   12bc8:	add	r1, sp, #120	; 0x78
   12bcc:	mov	r0, #3
   12bd0:	bl	11330 <__xstat64@plt>
   12bd4:	ldr	r2, [sp, #172]	; 0xac
   12bd8:	ldr	r3, [r4]
   12bdc:	cmp	r0, #0
   12be0:	movne	r0, #0
   12be4:	ldreq	r0, [sp, #112]	; 0x70
   12be8:	cmp	r2, r3
   12bec:	bne	12bf8 <__assert_fail@plt+0x1880>
   12bf0:	add	sp, sp, #176	; 0xb0
   12bf4:	pop	{r4, pc}
   12bf8:	bl	11120 <__stack_chk_fail@plt>
   12bfc:	andeq	r4, r2, r0, lsl #30
   12c00:	ldrdeq	r3, [r1], -ip
   12c04:	andeq	r3, r1, r0, ror #19
   12c08:	push	{r4, r5, lr}
   12c0c:	sub	sp, sp, #12
   12c10:	ldr	r4, [pc, #380]	; 12d94 <__assert_fail@plt+0x1a1c>
   12c14:	mov	r2, #10
   12c18:	mov	r1, sp
   12c1c:	ldr	r3, [r4]
   12c20:	mov	r5, r0
   12c24:	str	r3, [sp, #4]
   12c28:	bl	110a8 <strtol@plt>
   12c2c:	ldr	r3, [sp]
   12c30:	cmp	r5, r3
   12c34:	beq	12d08 <__assert_fail@plt+0x1990>
   12c38:	ldrb	r3, [r3]
   12c3c:	cmp	r3, #0
   12c40:	beq	12d08 <__assert_fail@plt+0x1990>
   12c44:	sub	r3, r3, #77	; 0x4d
   12c48:	cmp	r3, #44	; 0x2c
   12c4c:	ldrls	pc, [pc, r3, lsl #2]
   12c50:	b	12d08 <__assert_fail@plt+0x1990>
   12c54:	andeq	r2, r1, r8, lsr sp
   12c58:	andeq	r2, r1, r8, lsl #26
   12c5c:	andeq	r2, r1, r8, lsl #26
   12c60:	andeq	r2, r1, r8, lsl #26
   12c64:	andeq	r2, r1, r8, lsl #26
   12c68:	andeq	r2, r1, r8, lsl #26
   12c6c:	andeq	r2, r1, r8, lsl #26
   12c70:	andeq	r2, r1, r8, lsl #26
   12c74:	andeq	r2, r1, r8, lsl #26
   12c78:	andeq	r2, r1, r8, lsl #26
   12c7c:	andeq	r2, r1, r8, lsl #26
   12c80:	andeq	r2, r1, r8, lsl #26
   12c84:	andeq	r2, r1, r8, lsl #26
   12c88:	andeq	r2, r1, r8, lsl #26
   12c8c:	andeq	r2, r1, r8, lsl #26
   12c90:	andeq	r2, r1, r8, lsl #26
   12c94:	andeq	r2, r1, r8, lsl #26
   12c98:	andeq	r2, r1, r8, lsl #26
   12c9c:	andeq	r2, r1, r8, lsl #26
   12ca0:	andeq	r2, r1, r8, lsl #26
   12ca4:	andeq	r2, r1, r8, lsl #26
   12ca8:	andeq	r2, r1, r8, lsl #26
   12cac:	andeq	r2, r1, r8, lsl #26
   12cb0:	andeq	r2, r1, ip, asr #26
   12cb4:	andeq	r2, r1, r8, lsl #26
   12cb8:	andeq	r2, r1, r8, lsl #26
   12cbc:	andeq	r2, r1, r8, lsl #26
   12cc0:	andeq	r2, r1, r0, ror #26
   12cc4:	andeq	r2, r1, r8, lsl #26
   12cc8:	andeq	r2, r1, r8, lsl #26
   12ccc:	andeq	r2, r1, r8, lsl #26
   12cd0:	andeq	r2, r1, r8, lsl #26
   12cd4:	andeq	r2, r1, r0, ror sp
   12cd8:	andeq	r2, r1, r8, lsl #26
   12cdc:	andeq	r2, r1, r8, lsl #26
   12ce0:	andeq	r2, r1, r8, lsl #26
   12ce4:	andeq	r2, r1, r8, lsl #26
   12ce8:	andeq	r2, r1, r8, lsl #26
   12cec:	andeq	r2, r1, ip, lsl #26
   12cf0:	andeq	r2, r1, r8, lsl #26
   12cf4:	andeq	r2, r1, r8, lsl #26
   12cf8:	andeq	r2, r1, r8, lsl #26
   12cfc:	andeq	r2, r1, ip, ror sp
   12d00:	andeq	r2, r1, r8, lsl #26
   12d04:	andeq	r2, r1, r4, lsr #26
   12d08:	mvn	r0, #0
   12d0c:	ldr	r2, [sp, #4]
   12d10:	ldr	r3, [r4]
   12d14:	cmp	r2, r3
   12d18:	bne	12d90 <__assert_fail@plt+0x1a18>
   12d1c:	add	sp, sp, #12
   12d20:	pop	{r4, r5, pc}
   12d24:	rsb	r0, r0, r0, lsl #4
   12d28:	rsb	r0, r0, r0, lsl #4
   12d2c:	rsb	r0, r0, r0, lsl #6
   12d30:	lsl	r0, r0, #11
   12d34:	b	12d0c <__assert_fail@plt+0x1994>
   12d38:	add	r0, r0, r0, lsl #2
   12d3c:	rsb	r0, r0, r0, lsl #4
   12d40:	rsb	r0, r0, r0, lsl #6
   12d44:	lsl	r0, r0, #9
   12d48:	b	12d0c <__assert_fail@plt+0x1994>
   12d4c:	add	r0, r0, r0, lsl #1
   12d50:	rsb	r0, r0, r0, lsl #4
   12d54:	rsb	r0, r0, r0, lsl #4
   12d58:	lsl	r0, r0, #7
   12d5c:	b	12d0c <__assert_fail@plt+0x1994>
   12d60:	rsb	r0, r0, r0, lsl #4
   12d64:	rsb	r0, r0, r0, lsl #4
   12d68:	lsl	r0, r0, #4
   12d6c:	b	12d0c <__assert_fail@plt+0x1994>
   12d70:	rsb	r0, r0, r0, lsl #4
   12d74:	lsl	r0, r0, #2
   12d78:	b	12d0c <__assert_fail@plt+0x1994>
   12d7c:	add	r0, r0, r0, lsl #2
   12d80:	rsb	r0, r0, r0, lsl #4
   12d84:	rsb	r0, r0, r0, lsl #6
   12d88:	lsl	r0, r0, #7
   12d8c:	b	12d0c <__assert_fail@plt+0x1994>
   12d90:	bl	11120 <__stack_chk_fail@plt>
   12d94:	andeq	r4, r2, r0, lsl #30
   12d98:	cmp	r0, #5
   12d9c:	ldrle	r3, [pc, #8]	; 12dac <__assert_fail@plt+0x1a34>
   12da0:	ldrle	r0, [r3, r0, lsl #2]
   12da4:	movgt	r0, #0
   12da8:	bx	lr
   12dac:	strdeq	r3, [r1], -ip
   12db0:	push	{r4, r5, r6, lr}
   12db4:	mov	r1, #1
   12db8:	ldr	r4, [pc, #88]	; 12e18 <__assert_fail@plt+0x1aa0>
   12dbc:	ldr	r3, [pc, #88]	; 12e1c <__assert_fail@plt+0x1aa4>
   12dc0:	ldr	r2, [pc, #88]	; 12e20 <__assert_fail@plt+0x1aa8>
   12dc4:	ldr	r0, [r4]
   12dc8:	bl	11294 <__fprintf_chk@plt>
   12dcc:	mov	r2, #5
   12dd0:	ldr	r1, [pc, #76]	; 12e24 <__assert_fail@plt+0x1aac>
   12dd4:	mov	r0, #0
   12dd8:	ldr	r5, [r4]
   12ddc:	bl	110fc <dcgettext@plt>
   12de0:	mov	r1, #1
   12de4:	mov	r2, r0
   12de8:	mov	r0, r5
   12dec:	bl	11294 <__fprintf_chk@plt>
   12df0:	mov	r2, #5
   12df4:	ldr	r1, [pc, #44]	; 12e28 <__assert_fail@plt+0x1ab0>
   12df8:	mov	r0, #0
   12dfc:	ldr	r4, [r4]
   12e00:	bl	110fc <dcgettext@plt>
   12e04:	mov	r1, #1
   12e08:	mov	r2, r0
   12e0c:	mov	r0, r4
   12e10:	pop	{r4, r5, r6, lr}
   12e14:	b	11294 <__fprintf_chk@plt>
   12e18:	andeq	r5, r2, r8, lsr #4
   12e1c:	strdeq	r3, [r1], -r0
   12e20:	strdeq	r3, [r1], -r8
   12e24:	andeq	r3, r1, r0, lsl sl
   12e28:	andeq	r3, r1, r0, asr sl
   12e2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e30:	ldr	r5, [pc, #156]	; 12ed4 <__assert_fail@plt+0x1b5c>
   12e34:	ldr	r9, [pc, #156]	; 12ed8 <__assert_fail@plt+0x1b60>
   12e38:	ldr	r3, [r5, #4]
   12e3c:	cmp	r3, #0
   12e40:	beq	12ec4 <__assert_fail@plt+0x1b4c>
   12e44:	ldr	r8, [pc, #144]	; 12edc <__assert_fail@plt+0x1b64>
   12e48:	ldr	r7, [pc, #144]	; 12ee0 <__assert_fail@plt+0x1b68>
   12e4c:	ldr	r6, [pc, #144]	; 12ee4 <__assert_fail@plt+0x1b6c>
   12e50:	mov	r4, #0
   12e54:	b	12e94 <__assert_fail@plt+0x1b1c>
   12e58:	cmp	r4, #0
   12e5c:	movne	r2, r8
   12e60:	moveq	r2, r7
   12e64:	ldr	r3, [r5, #4]
   12e68:	mov	r1, r6
   12e6c:	mov	r0, #1
   12e70:	bl	11270 <__printf_chk@plt>
   12e74:	ldr	r0, [r5, #4]
   12e78:	bl	1121c <strlen@plt>
   12e7c:	add	r5, r5, #8
   12e80:	ldr	r3, [r5, #4]
   12e84:	cmp	r3, #0
   12e88:	add	r4, r0, r4
   12e8c:	add	r4, r4, #1
   12e90:	beq	12ec4 <__assert_fail@plt+0x1b4c>
   12e94:	mov	r0, r3
   12e98:	bl	1121c <strlen@plt>
   12e9c:	add	r0, r0, #1
   12ea0:	add	r0, r0, r4
   12ea4:	cmp	r0, #80	; 0x50
   12ea8:	bls	12e58 <__assert_fail@plt+0x1ae0>
   12eac:	ldr	r1, [r9]
   12eb0:	mov	r0, #10
   12eb4:	bl	11180 <_IO_putc@plt>
   12eb8:	mov	r4, #0
   12ebc:	mov	r2, r7
   12ec0:	b	12e64 <__assert_fail@plt+0x1aec>
   12ec4:	ldr	r1, [r9]
   12ec8:	mov	r0, #10
   12ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12ed0:	b	11180 <_IO_putc@plt>
   12ed4:	andeq	r5, r2, r0, lsr #2
   12ed8:	andeq	r5, r2, r4, lsr r2
   12edc:	andeq	r3, r1, r8, lsr fp
   12ee0:	andeq	r3, r1, ip, asr #20
   12ee4:	andeq	r3, r1, r0, ror pc
   12ee8:	push	{r4, r5, r6, lr}
   12eec:	sub	sp, sp, #8
   12ef0:	mov	r5, r0
   12ef4:	mov	r6, r1
   12ef8:	bl	111f8 <__ctype_b_loc@plt>
   12efc:	ldrb	r3, [r5]
   12f00:	lsl	r3, r3, #1
   12f04:	ldr	r2, [r0]
   12f08:	ldrh	r3, [r2, r3]
   12f0c:	tst	r3, #2048	; 0x800
   12f10:	bne	12f6c <__assert_fail@plt+0x1bf4>
   12f14:	mov	r1, r5
   12f18:	mov	r2, #3
   12f1c:	ldr	r0, [pc, #152]	; 12fbc <__assert_fail@plt+0x1c44>
   12f20:	bl	11348 <strncmp@plt>
   12f24:	ldr	r4, [pc, #148]	; 12fc0 <__assert_fail@plt+0x1c48>
   12f28:	cmp	r0, #0
   12f2c:	ldr	r0, [r4, #4]
   12f30:	addeq	r5, r5, #3
   12f34:	cmp	r0, #0
   12f38:	bne	12f50 <__assert_fail@plt+0x1bd8>
   12f3c:	b	12f84 <__assert_fail@plt+0x1c0c>
   12f40:	add	r4, r4, #8
   12f44:	ldr	r0, [r4, #4]
   12f48:	cmp	r0, #0
   12f4c:	beq	12f84 <__assert_fail@plt+0x1c0c>
   12f50:	mov	r1, r5
   12f54:	bl	1109c <strcmp@plt>
   12f58:	cmp	r0, #0
   12f5c:	bne	12f40 <__assert_fail@plt+0x1bc8>
   12f60:	ldr	r0, [r4]
   12f64:	add	sp, sp, #8
   12f68:	pop	{r4, r5, r6, pc}
   12f6c:	mov	r0, r5
   12f70:	mov	r2, #10
   12f74:	mov	r1, #0
   12f78:	add	sp, sp, #8
   12f7c:	pop	{r4, r5, r6, lr}
   12f80:	b	110a8 <strtol@plt>
   12f84:	ldr	r3, [pc, #56]	; 12fc4 <__assert_fail@plt+0x1c4c>
   12f88:	mov	r2, #5
   12f8c:	ldr	r1, [pc, #52]	; 12fc8 <__assert_fail@plt+0x1c50>
   12f90:	mov	r0, #0
   12f94:	ldr	r4, [r3]
   12f98:	bl	110fc <dcgettext@plt>
   12f9c:	str	r6, [sp]
   12fa0:	mov	r3, r5
   12fa4:	mov	r1, #1
   12fa8:	mov	r2, r0
   12fac:	mov	r0, r4
   12fb0:	bl	11294 <__fprintf_chk@plt>
   12fb4:	mov	r0, #1
   12fb8:	bl	11210 <exit@plt>
   12fbc:	andeq	r3, r1, r8, ror pc
   12fc0:	andeq	r5, r2, r0, lsr #2
   12fc4:	andeq	r5, r2, r8, lsr #4
   12fc8:	andeq	r3, r1, ip, ror pc
   12fcc:	eor	r1, r1, #-2147483648	; 0x80000000
   12fd0:	b	12fd8 <__assert_fail@plt+0x1c60>
   12fd4:	eor	r3, r3, #-2147483648	; 0x80000000
   12fd8:	push	{r4, r5, lr}
   12fdc:	lsl	r4, r1, #1
   12fe0:	lsl	r5, r3, #1
   12fe4:	teq	r4, r5
   12fe8:	teqeq	r0, r2
   12fec:	orrsne	ip, r4, r0
   12ff0:	orrsne	ip, r5, r2
   12ff4:	mvnsne	ip, r4, asr #21
   12ff8:	mvnsne	ip, r5, asr #21
   12ffc:	beq	131e8 <__assert_fail@plt+0x1e70>
   13000:	lsr	r4, r4, #21
   13004:	rsbs	r5, r4, r5, lsr #21
   13008:	rsblt	r5, r5, #0
   1300c:	ble	1302c <__assert_fail@plt+0x1cb4>
   13010:	add	r4, r4, r5
   13014:	eor	r2, r0, r2
   13018:	eor	r3, r1, r3
   1301c:	eor	r0, r2, r0
   13020:	eor	r1, r3, r1
   13024:	eor	r2, r0, r2
   13028:	eor	r3, r1, r3
   1302c:	cmp	r5, #54	; 0x36
   13030:	pophi	{r4, r5, pc}
   13034:	tst	r1, #-2147483648	; 0x80000000
   13038:	lsl	r1, r1, #12
   1303c:	mov	ip, #1048576	; 0x100000
   13040:	orr	r1, ip, r1, lsr #12
   13044:	beq	13050 <__assert_fail@plt+0x1cd8>
   13048:	rsbs	r0, r0, #0
   1304c:	rsc	r1, r1, #0
   13050:	tst	r3, #-2147483648	; 0x80000000
   13054:	lsl	r3, r3, #12
   13058:	orr	r3, ip, r3, lsr #12
   1305c:	beq	13068 <__assert_fail@plt+0x1cf0>
   13060:	rsbs	r2, r2, #0
   13064:	rsc	r3, r3, #0
   13068:	teq	r4, r5
   1306c:	beq	131d0 <__assert_fail@plt+0x1e58>
   13070:	sub	r4, r4, #1
   13074:	rsbs	lr, r5, #32
   13078:	blt	13094 <__assert_fail@plt+0x1d1c>
   1307c:	lsl	ip, r2, lr
   13080:	adds	r0, r0, r2, lsr r5
   13084:	adc	r1, r1, #0
   13088:	adds	r0, r0, r3, lsl lr
   1308c:	adcs	r1, r1, r3, asr r5
   13090:	b	130b0 <__assert_fail@plt+0x1d38>
   13094:	sub	r5, r5, #32
   13098:	add	lr, lr, #32
   1309c:	cmp	r2, #1
   130a0:	lsl	ip, r3, lr
   130a4:	orrcs	ip, ip, #2
   130a8:	adds	r0, r0, r3, asr r5
   130ac:	adcs	r1, r1, r3, asr #31
   130b0:	and	r5, r1, #-2147483648	; 0x80000000
   130b4:	bpl	130c4 <__assert_fail@plt+0x1d4c>
   130b8:	rsbs	ip, ip, #0
   130bc:	rscs	r0, r0, #0
   130c0:	rsc	r1, r1, #0
   130c4:	cmp	r1, #1048576	; 0x100000
   130c8:	bcc	13108 <__assert_fail@plt+0x1d90>
   130cc:	cmp	r1, #2097152	; 0x200000
   130d0:	bcc	130f0 <__assert_fail@plt+0x1d78>
   130d4:	lsrs	r1, r1, #1
   130d8:	rrxs	r0, r0
   130dc:	rrx	ip, ip
   130e0:	add	r4, r4, #1
   130e4:	lsl	r2, r4, #21
   130e8:	cmn	r2, #4194304	; 0x400000
   130ec:	bcs	13248 <__assert_fail@plt+0x1ed0>
   130f0:	cmp	ip, #-2147483648	; 0x80000000
   130f4:	lsrseq	ip, r0, #1
   130f8:	adcs	r0, r0, #0
   130fc:	adc	r1, r1, r4, lsl #20
   13100:	orr	r1, r1, r5
   13104:	pop	{r4, r5, pc}
   13108:	lsls	ip, ip, #1
   1310c:	adcs	r0, r0, r0
   13110:	adc	r1, r1, r1
   13114:	tst	r1, #1048576	; 0x100000
   13118:	sub	r4, r4, #1
   1311c:	bne	130f0 <__assert_fail@plt+0x1d78>
   13120:	teq	r1, #0
   13124:	moveq	r1, r0
   13128:	moveq	r0, #0
   1312c:	clz	r3, r1
   13130:	addeq	r3, r3, #32
   13134:	sub	r3, r3, #11
   13138:	subs	r2, r3, #32
   1313c:	bge	13160 <__assert_fail@plt+0x1de8>
   13140:	adds	r2, r2, #12
   13144:	ble	1315c <__assert_fail@plt+0x1de4>
   13148:	add	ip, r2, #20
   1314c:	rsb	r2, r2, #12
   13150:	lsl	r0, r1, ip
   13154:	lsr	r1, r1, r2
   13158:	b	13170 <__assert_fail@plt+0x1df8>
   1315c:	add	r2, r2, #20
   13160:	rsble	ip, r2, #32
   13164:	lsl	r1, r1, r2
   13168:	orrle	r1, r1, r0, lsr ip
   1316c:	lslle	r0, r0, r2
   13170:	subs	r4, r4, r3
   13174:	addge	r1, r1, r4, lsl #20
   13178:	orrge	r1, r1, r5
   1317c:	popge	{r4, r5, pc}
   13180:	mvn	r4, r4
   13184:	subs	r4, r4, #31
   13188:	bge	131c4 <__assert_fail@plt+0x1e4c>
   1318c:	adds	r4, r4, #12
   13190:	bgt	131ac <__assert_fail@plt+0x1e34>
   13194:	add	r4, r4, #20
   13198:	rsb	r2, r4, #32
   1319c:	lsr	r0, r0, r4
   131a0:	orr	r0, r0, r1, lsl r2
   131a4:	orr	r1, r5, r1, lsr r4
   131a8:	pop	{r4, r5, pc}
   131ac:	rsb	r4, r4, #12
   131b0:	rsb	r2, r4, #32
   131b4:	lsr	r0, r0, r2
   131b8:	orr	r0, r0, r1, lsl r4
   131bc:	mov	r1, r5
   131c0:	pop	{r4, r5, pc}
   131c4:	lsr	r0, r1, r4
   131c8:	mov	r1, r5
   131cc:	pop	{r4, r5, pc}
   131d0:	teq	r4, #0
   131d4:	eor	r3, r3, #1048576	; 0x100000
   131d8:	eoreq	r1, r1, #1048576	; 0x100000
   131dc:	addeq	r4, r4, #1
   131e0:	subne	r5, r5, #1
   131e4:	b	13070 <__assert_fail@plt+0x1cf8>
   131e8:	mvns	ip, r4, asr #21
   131ec:	mvnsne	ip, r5, asr #21
   131f0:	beq	13258 <__assert_fail@plt+0x1ee0>
   131f4:	teq	r4, r5
   131f8:	teqeq	r0, r2
   131fc:	beq	13210 <__assert_fail@plt+0x1e98>
   13200:	orrs	ip, r4, r0
   13204:	moveq	r1, r3
   13208:	moveq	r0, r2
   1320c:	pop	{r4, r5, pc}
   13210:	teq	r1, r3
   13214:	movne	r1, #0
   13218:	movne	r0, #0
   1321c:	popne	{r4, r5, pc}
   13220:	lsrs	ip, r4, #21
   13224:	bne	13238 <__assert_fail@plt+0x1ec0>
   13228:	lsls	r0, r0, #1
   1322c:	adcs	r1, r1, r1
   13230:	orrcs	r1, r1, #-2147483648	; 0x80000000
   13234:	pop	{r4, r5, pc}
   13238:	adds	r4, r4, #4194304	; 0x400000
   1323c:	addcc	r1, r1, #1048576	; 0x100000
   13240:	popcc	{r4, r5, pc}
   13244:	and	r5, r1, #-2147483648	; 0x80000000
   13248:	orr	r1, r5, #2130706432	; 0x7f000000
   1324c:	orr	r1, r1, #15728640	; 0xf00000
   13250:	mov	r0, #0
   13254:	pop	{r4, r5, pc}
   13258:	mvns	ip, r4, asr #21
   1325c:	movne	r1, r3
   13260:	movne	r0, r2
   13264:	mvnseq	ip, r5, asr #21
   13268:	movne	r3, r1
   1326c:	movne	r2, r0
   13270:	orrs	r4, r0, r1, lsl #12
   13274:	orrseq	r5, r2, r3, lsl #12
   13278:	teqeq	r1, r3
   1327c:	orrne	r1, r1, #524288	; 0x80000
   13280:	pop	{r4, r5, pc}
   13284:	teq	r0, #0
   13288:	moveq	r1, #0
   1328c:	bxeq	lr
   13290:	push	{r4, r5, lr}
   13294:	mov	r4, #1024	; 0x400
   13298:	add	r4, r4, #50	; 0x32
   1329c:	mov	r5, #0
   132a0:	mov	r1, #0
   132a4:	b	13120 <__assert_fail@plt+0x1da8>
   132a8:	teq	r0, #0
   132ac:	moveq	r1, #0
   132b0:	bxeq	lr
   132b4:	push	{r4, r5, lr}
   132b8:	mov	r4, #1024	; 0x400
   132bc:	add	r4, r4, #50	; 0x32
   132c0:	ands	r5, r0, #-2147483648	; 0x80000000
   132c4:	rsbmi	r0, r0, #0
   132c8:	mov	r1, #0
   132cc:	b	13120 <__assert_fail@plt+0x1da8>
   132d0:	lsls	r2, r0, #1
   132d4:	asr	r1, r2, #3
   132d8:	rrx	r1, r1
   132dc:	lsl	r0, r2, #28
   132e0:	andsne	r3, r2, #-16777216	; 0xff000000
   132e4:	teqne	r3, #-16777216	; 0xff000000
   132e8:	eorne	r1, r1, #939524096	; 0x38000000
   132ec:	bxne	lr
   132f0:	bics	r2, r2, #-16777216	; 0xff000000
   132f4:	bxeq	lr
   132f8:	teq	r3, #-16777216	; 0xff000000
   132fc:	orreq	r1, r1, #524288	; 0x80000
   13300:	bxeq	lr
   13304:	push	{r4, r5, lr}
   13308:	mov	r4, #896	; 0x380
   1330c:	and	r5, r1, #-2147483648	; 0x80000000
   13310:	bic	r1, r1, #-2147483648	; 0x80000000
   13314:	b	13120 <__assert_fail@plt+0x1da8>
   13318:	orrs	r2, r0, r1
   1331c:	bxeq	lr
   13320:	push	{r4, r5, lr}
   13324:	mov	r5, #0
   13328:	b	13348 <__assert_fail@plt+0x1fd0>
   1332c:	orrs	r2, r0, r1
   13330:	bxeq	lr
   13334:	push	{r4, r5, lr}
   13338:	ands	r5, r1, #-2147483648	; 0x80000000
   1333c:	bpl	13348 <__assert_fail@plt+0x1fd0>
   13340:	rsbs	r0, r0, #0
   13344:	rsc	r1, r1, #0
   13348:	mov	r4, #1024	; 0x400
   1334c:	add	r4, r4, #50	; 0x32
   13350:	lsrs	ip, r1, #22
   13354:	beq	130c4 <__assert_fail@plt+0x1d4c>
   13358:	mov	r2, #3
   1335c:	lsrs	ip, ip, #3
   13360:	addne	r2, r2, #3
   13364:	lsrs	ip, ip, #3
   13368:	addne	r2, r2, #3
   1336c:	add	r2, r2, ip, lsr #3
   13370:	rsb	r3, r2, #32
   13374:	lsl	ip, r0, r3
   13378:	lsr	r0, r0, r2
   1337c:	orr	r0, r0, r1, lsl r3
   13380:	lsr	r1, r1, r2
   13384:	add	r4, r4, r2
   13388:	b	130c4 <__assert_fail@plt+0x1d4c>
   1338c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13390:	mov	r7, r0
   13394:	ldr	r6, [pc, #72]	; 133e4 <__assert_fail@plt+0x206c>
   13398:	ldr	r5, [pc, #72]	; 133e8 <__assert_fail@plt+0x2070>
   1339c:	add	r6, pc, r6
   133a0:	add	r5, pc, r5
   133a4:	sub	r6, r6, r5
   133a8:	mov	r8, r1
   133ac:	mov	r9, r2
   133b0:	bl	1104c <_init@@Base>
   133b4:	asrs	r6, r6, #2
   133b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   133bc:	mov	r4, #0
   133c0:	add	r4, r4, #1
   133c4:	ldr	r3, [r5], #4
   133c8:	mov	r2, r9
   133cc:	mov	r1, r8
   133d0:	mov	r0, r7
   133d4:	blx	r3
   133d8:	cmp	r6, r4
   133dc:	bne	133c0 <__assert_fail@plt+0x2048>
   133e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133e4:	andeq	r1, r1, r8, asr fp
   133e8:	andeq	r1, r1, r0, asr fp
   133ec:	bx	lr

Disassembly of section .fini:

000133f0 <_fini@@Base>:
   133f0:	push	{r3, lr}
   133f4:	pop	{r3, pc}
