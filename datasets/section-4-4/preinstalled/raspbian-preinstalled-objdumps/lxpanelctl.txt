
raspbian-preinstalled/lxpanelctl:     file format elf32-littlearm


Disassembly of section .init:

00010748 <.init>:
   10748:	push	{r3, lr}
   1074c:	bl	10bc8 <__snprintf_chk@plt+0x394>
   10750:	pop	{r3, pc}

Disassembly of section .plt:

00010754 <XSendEvent@plt-0x14>:
   10754:	push	{lr}		; (str lr, [sp, #-4]!)
   10758:	ldr	lr, [pc, #4]	; 10764 <XSendEvent@plt-0x4>
   1075c:	add	lr, pc, lr
   10760:	ldr	pc, [lr, #8]!
   10764:	andeq	r1, r1, r0, asr #16

00010768 <XSendEvent@plt>:
   10768:	add	ip, pc, #0, 12
   1076c:	add	ip, ip, #69632	; 0x11000
   10770:	ldr	pc, [ip, #2112]!	; 0x840

00010774 <strcmp@plt>:
   10774:	add	ip, pc, #0, 12
   10778:	add	ip, ip, #69632	; 0x11000
   1077c:	ldr	pc, [ip, #2104]!	; 0x838

00010780 <__stack_chk_fail@plt>:
   10780:	add	ip, pc, #0, 12
   10784:	add	ip, ip, #69632	; 0x11000
   10788:	ldr	pc, [ip, #2096]!	; 0x830

0001078c <getenv@plt>:
   1078c:	add	ip, pc, #0, 12
   10790:	add	ip, ip, #69632	; 0x11000
   10794:	ldr	pc, [ip, #2088]!	; 0x828

00010798 <puts@plt>:
   10798:	add	ip, pc, #0, 12
   1079c:	add	ip, ip, #69632	; 0x11000
   107a0:	ldr	pc, [ip, #2080]!	; 0x820

000107a4 <__libc_start_main@plt>:
   107a4:	add	ip, pc, #0, 12
   107a8:	add	ip, ip, #69632	; 0x11000
   107ac:	ldr	pc, [ip, #2072]!	; 0x818

000107b0 <XOpenDisplay@plt>:
   107b0:	add	ip, pc, #0, 12
   107b4:	add	ip, ip, #69632	; 0x11000
   107b8:	ldr	pc, [ip, #2064]!	; 0x810

000107bc <__gmon_start__@plt>:
   107bc:	add	ip, pc, #0, 12
   107c0:	add	ip, ip, #69632	; 0x11000
   107c4:	ldr	pc, [ip, #2056]!	; 0x808

000107c8 <exit@plt>:
   107c8:	add	ip, pc, #0, 12
   107cc:	add	ip, ip, #69632	; 0x11000
   107d0:	ldr	pc, [ip, #2048]!	; 0x800

000107d4 <strtoul@plt>:
   107d4:	add	ip, pc, #0, 12
   107d8:	add	ip, ip, #69632	; 0x11000
   107dc:	ldr	pc, [ip, #2040]!	; 0x7f8

000107e0 <XInternAtom@plt>:
   107e0:	add	ip, pc, #0, 12
   107e4:	add	ip, ip, #69632	; 0x11000
   107e8:	ldr	pc, [ip, #2032]!	; 0x7f0

000107ec <memset@plt>:
   107ec:	add	ip, pc, #0, 12
   107f0:	add	ip, ip, #69632	; 0x11000
   107f4:	ldr	pc, [ip, #2024]!	; 0x7e8

000107f8 <XSync@plt>:
   107f8:	add	ip, pc, #0, 12
   107fc:	add	ip, ip, #69632	; 0x11000
   10800:	ldr	pc, [ip, #2016]!	; 0x7e0

00010804 <__printf_chk@plt>:
   10804:	add	ip, pc, #0, 12
   10808:	add	ip, ip, #69632	; 0x11000
   1080c:	ldr	pc, [ip, #2008]!	; 0x7d8

00010810 <XCloseDisplay@plt>:
   10810:	add	ip, pc, #0, 12
   10814:	add	ip, ip, #69632	; 0x11000
   10818:	ldr	pc, [ip, #2000]!	; 0x7d0

0001081c <strncmp@plt>:
   1081c:	add	ip, pc, #0, 12
   10820:	add	ip, ip, #69632	; 0x11000
   10824:	ldr	pc, [ip, #1992]!	; 0x7c8

00010828 <abort@plt>:
   10828:	add	ip, pc, #0, 12
   1082c:	add	ip, ip, #69632	; 0x11000
   10830:	ldr	pc, [ip, #1984]!	; 0x7c0

00010834 <__snprintf_chk@plt>:
   10834:	add	ip, pc, #0, 12
   10838:	add	ip, ip, #69632	; 0x11000
   1083c:	ldr	pc, [ip, #1976]!	; 0x7b8

Disassembly of section .text:

00010840 <.text>:
   10840:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10844:	sub	sp, sp, #120	; 0x78
   10848:	ldr	r5, [pc, #748]	; 10b3c <__snprintf_chk@plt+0x308>
   1084c:	mov	r6, r0
   10850:	ldr	r0, [pc, #744]	; 10b40 <__snprintf_chk@plt+0x30c>
   10854:	ldr	r3, [r5]
   10858:	mov	r7, r1
   1085c:	str	r3, [sp, #116]	; 0x74
   10860:	bl	1078c <getenv@plt>
   10864:	cmp	r6, #1
   10868:	ble	109d0 <__snprintf_chk@plt+0x19c>
   1086c:	ldr	r4, [r7, #4]
   10870:	mov	r9, r0
   10874:	ldr	r1, [pc, #712]	; 10b44 <__snprintf_chk@plt+0x310>
   10878:	mov	r0, r4
   1087c:	bl	10774 <strcmp@plt>
   10880:	cmp	r0, #0
   10884:	beq	109f4 <__snprintf_chk@plt+0x1c0>
   10888:	ldr	r1, [pc, #696]	; 10b48 <__snprintf_chk@plt+0x314>
   1088c:	mov	r0, r4
   10890:	bl	10774 <strcmp@plt>
   10894:	cmp	r0, #0
   10898:	beq	109fc <__snprintf_chk@plt+0x1c8>
   1089c:	ldr	r1, [pc, #680]	; 10b4c <__snprintf_chk@plt+0x318>
   108a0:	mov	r0, r4
   108a4:	bl	10774 <strcmp@plt>
   108a8:	cmp	r0, #0
   108ac:	beq	10a64 <__snprintf_chk@plt+0x230>
   108b0:	ldr	r1, [pc, #664]	; 10b50 <__snprintf_chk@plt+0x31c>
   108b4:	mov	r0, r4
   108b8:	bl	10774 <strcmp@plt>
   108bc:	cmp	r0, #0
   108c0:	beq	10a6c <__snprintf_chk@plt+0x238>
   108c4:	ldr	r1, [pc, #648]	; 10b54 <__snprintf_chk@plt+0x320>
   108c8:	mov	r0, r4
   108cc:	bl	10774 <strcmp@plt>
   108d0:	cmp	r0, #0
   108d4:	beq	10a74 <__snprintf_chk@plt+0x240>
   108d8:	ldr	r1, [pc, #632]	; 10b58 <__snprintf_chk@plt+0x324>
   108dc:	mov	r0, r4
   108e0:	bl	10774 <strcmp@plt>
   108e4:	cmp	r0, #0
   108e8:	beq	109c4 <__snprintf_chk@plt+0x190>
   108ec:	ldr	r1, [pc, #616]	; 10b5c <__snprintf_chk@plt+0x328>
   108f0:	mov	r0, r4
   108f4:	bl	10774 <strcmp@plt>
   108f8:	cmp	r0, #0
   108fc:	beq	10a7c <__snprintf_chk@plt+0x248>
   10900:	mov	r0, r4
   10904:	ldr	r1, [pc, #596]	; 10b60 <__snprintf_chk@plt+0x32c>
   10908:	bl	10774 <strcmp@plt>
   1090c:	cmp	r0, #0
   10910:	movne	r0, #1
   10914:	bne	109dc <__snprintf_chk@plt+0x1a8>
   10918:	mov	r8, #8
   1091c:	mov	r0, r9
   10920:	bl	107b0 <XOpenDisplay@plt>
   10924:	ldr	r4, [pc, #568]	; 10b64 <__snprintf_chk@plt+0x330>
   10928:	cmp	r0, #0
   1092c:	str	r0, [r4]
   10930:	beq	10b24 <__snprintf_chk@plt+0x2f0>
   10934:	ldr	r1, [r0, #132]	; 0x84
   10938:	mov	ip, #80	; 0x50
   1093c:	ldr	r3, [r0, #140]	; 0x8c
   10940:	mov	r2, #0
   10944:	mla	r3, ip, r1, r3
   10948:	ldr	r1, [pc, #536]	; 10b68 <__snprintf_chk@plt+0x334>
   1094c:	ldr	r9, [r3, #8]
   10950:	bl	107e0 <XInternAtom@plt>
   10954:	mov	r2, #92	; 0x5c
   10958:	mov	r1, #0
   1095c:	mov	sl, r0
   10960:	add	r0, sp, #24
   10964:	bl	107ec <memset@plt>
   10968:	mov	r3, #33	; 0x21
   1096c:	mov	r2, #8
   10970:	cmp	r8, #6
   10974:	str	sl, [sp, #40]	; 0x28
   10978:	str	r9, [sp, #36]	; 0x24
   1097c:	strb	r8, [sp, #48]	; 0x30
   10980:	str	r3, [sp, #20]
   10984:	str	r2, [sp, #44]	; 0x2c
   10988:	beq	10a04 <__snprintf_chk@plt+0x1d0>
   1098c:	add	r3, sp, #20
   10990:	str	r3, [sp]
   10994:	mov	r2, #0
   10998:	mov	r3, #1572864	; 0x180000
   1099c:	mov	r1, r9
   109a0:	ldr	r0, [r4]
   109a4:	bl	10768 <XSendEvent@plt>
   109a8:	mov	r1, #0
   109ac:	ldr	r0, [r4]
   109b0:	bl	107f8 <XSync@plt>
   109b4:	ldr	r0, [r4]
   109b8:	bl	10810 <XCloseDisplay@plt>
   109bc:	mov	r0, #0
   109c0:	b	109dc <__snprintf_chk@plt+0x1a8>
   109c4:	cmp	r6, #3
   109c8:	movgt	r8, #6
   109cc:	bgt	1091c <__snprintf_chk@plt+0xe8>
   109d0:	ldr	r0, [pc, #404]	; 10b6c <__snprintf_chk@plt+0x338>
   109d4:	bl	10798 <puts@plt>
   109d8:	mov	r0, #1
   109dc:	ldr	r2, [sp, #116]	; 0x74
   109e0:	ldr	r3, [r5]
   109e4:	cmp	r2, r3
   109e8:	bne	10b20 <__snprintf_chk@plt+0x2ec>
   109ec:	add	sp, sp, #120	; 0x78
   109f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109f4:	mov	r8, #1
   109f8:	b	1091c <__snprintf_chk@plt+0xe8>
   109fc:	mov	r8, #2
   10a00:	b	1091c <__snprintf_chk@plt+0xe8>
   10a04:	cmp	r6, #4
   10a08:	ble	10a24 <__snprintf_chk@plt+0x1f0>
   10a0c:	ldr	sl, [r7, #8]
   10a10:	ldr	r1, [pc, #344]	; 10b70 <__snprintf_chk@plt+0x33c>
   10a14:	mov	r0, sl
   10a18:	bl	1081c <strncmp@plt>
   10a1c:	subs	r8, r0, #0
   10a20:	beq	10a84 <__snprintf_chk@plt+0x250>
   10a24:	mov	r3, #2
   10a28:	mov	ip, #0
   10a2c:	add	r2, r7, r3, lsl #2
   10a30:	ldr	r1, [r7, r3, lsl #2]
   10a34:	ldr	r0, [r2, #4]
   10a38:	ldr	r2, [pc, #308]	; 10b74 <__snprintf_chk@plt+0x340>
   10a3c:	mov	r3, #18
   10a40:	str	r0, [sp, #8]
   10a44:	str	r1, [sp, #4]
   10a48:	str	r2, [sp]
   10a4c:	mov	r1, r3
   10a50:	mov	r2, #1
   10a54:	add	r0, sp, #50	; 0x32
   10a58:	strb	ip, [sp, #49]	; 0x31
   10a5c:	bl	10834 <__snprintf_chk@plt>
   10a60:	b	1098c <__snprintf_chk@plt+0x158>
   10a64:	mov	r8, #3
   10a68:	b	1091c <__snprintf_chk@plt+0xe8>
   10a6c:	mov	r8, #4
   10a70:	b	1091c <__snprintf_chk@plt+0xe8>
   10a74:	mov	r8, #5
   10a78:	b	1091c <__snprintf_chk@plt+0xe8>
   10a7c:	mov	r8, #7
   10a80:	b	1091c <__snprintf_chk@plt+0xe8>
   10a84:	add	sl, sl, #8
   10a88:	mov	r0, sl
   10a8c:	mov	r2, #10
   10a90:	add	r1, sp, #16
   10a94:	bl	107d4 <strtoul@plt>
   10a98:	ldr	r3, [sp, #16]
   10a9c:	ldr	r1, [pc, #212]	; 10b78 <__snprintf_chk@plt+0x344>
   10aa0:	ldrb	r2, [r3]
   10aa4:	cmp	r2, #58	; 0x3a
   10aa8:	addeq	sl, r3, #1
   10aac:	movne	r6, r8
   10ab0:	moveq	r6, r0
   10ab4:	mov	r0, sl
   10ab8:	bl	10774 <strcmp@plt>
   10abc:	cmp	r0, #0
   10ac0:	moveq	r8, #3
   10ac4:	beq	10b0c <__snprintf_chk@plt+0x2d8>
   10ac8:	ldr	r1, [pc, #172]	; 10b7c <__snprintf_chk@plt+0x348>
   10acc:	mov	r0, sl
   10ad0:	bl	10774 <strcmp@plt>
   10ad4:	cmp	r0, #0
   10ad8:	moveq	r8, #4
   10adc:	beq	10b0c <__snprintf_chk@plt+0x2d8>
   10ae0:	ldr	r1, [pc, #152]	; 10b80 <__snprintf_chk@plt+0x34c>
   10ae4:	mov	r0, sl
   10ae8:	bl	10774 <strcmp@plt>
   10aec:	cmp	r0, #0
   10af0:	moveq	r8, #1
   10af4:	beq	10b0c <__snprintf_chk@plt+0x2d8>
   10af8:	mov	r0, sl
   10afc:	ldr	r1, [pc, #128]	; 10b84 <__snprintf_chk@plt+0x350>
   10b00:	bl	10774 <strcmp@plt>
   10b04:	cmp	r0, #0
   10b08:	moveq	r8, #2
   10b0c:	and	ip, r6, #15
   10b10:	orr	ip, ip, r8, lsl #4
   10b14:	mov	r3, #3
   10b18:	uxtb	ip, ip
   10b1c:	b	10a2c <__snprintf_chk@plt+0x1f8>
   10b20:	bl	10780 <__stack_chk_fail@plt>
   10b24:	mov	r2, r9
   10b28:	ldr	r1, [pc, #88]	; 10b88 <__snprintf_chk@plt+0x354>
   10b2c:	mov	r0, #1
   10b30:	bl	10804 <__printf_chk@plt>
   10b34:	mov	r0, #1
   10b38:	bl	107c8 <exit@plt>
   10b3c:	muleq	r2, r8, lr
   10b40:	andeq	r0, r1, ip, ror #25
   10b44:	andeq	r0, r1, r4, lsr lr
   10b48:	andeq	r0, r1, ip, lsr lr
   10b4c:	andeq	r0, r1, r0, asr #28
   10b50:	andeq	r0, r1, r8, asr #28
   10b54:	andeq	r0, r1, r0, asr lr
   10b58:	andeq	r0, r1, r8, asr lr
   10b5c:	andeq	r0, r1, r0, ror #28
   10b60:	andeq	r0, r1, r8, ror #28
   10b64:	andeq	r2, r2, ip
   10b68:	muleq	r1, r0, lr
   10b6c:	strdeq	r0, [r1], -r4
   10b70:	andeq	r0, r1, r0, lsr #29
   10b74:	andeq	r0, r1, r8, asr #29
   10b78:	andeq	r0, r1, ip, lsr #29
   10b7c:			; <UNDEFINED> instruction: 0x00010eb0
   10b80:			; <UNDEFINED> instruction: 0x00010eb8
   10b84:	andeq	r0, r1, r0, asr #29
   10b88:	andeq	r0, r1, r0, ror lr
   10b8c:	mov	fp, #0
   10b90:	mov	lr, #0
   10b94:	pop	{r1}		; (ldr r1, [sp], #4)
   10b98:	mov	r2, sp
   10b9c:	push	{r2}		; (str r2, [sp, #-4]!)
   10ba0:	push	{r0}		; (str r0, [sp, #-4]!)
   10ba4:	ldr	ip, [pc, #16]	; 10bbc <__snprintf_chk@plt+0x388>
   10ba8:	push	{ip}		; (str ip, [sp, #-4]!)
   10bac:	ldr	r0, [pc, #12]	; 10bc0 <__snprintf_chk@plt+0x38c>
   10bb0:	ldr	r3, [pc, #12]	; 10bc4 <__snprintf_chk@plt+0x390>
   10bb4:	bl	107a4 <__libc_start_main@plt>
   10bb8:	bl	10828 <abort@plt>
   10bbc:	ldrdeq	r0, [r1], -ip
   10bc0:	andeq	r0, r1, r0, asr #16
   10bc4:	andeq	r0, r1, ip, ror ip
   10bc8:	ldr	r3, [pc, #20]	; 10be4 <__snprintf_chk@plt+0x3b0>
   10bcc:	ldr	r2, [pc, #20]	; 10be8 <__snprintf_chk@plt+0x3b4>
   10bd0:	add	r3, pc, r3
   10bd4:	ldr	r2, [r3, r2]
   10bd8:	cmp	r2, #0
   10bdc:	bxeq	lr
   10be0:	b	107bc <__gmon_start__@plt>
   10be4:	andeq	r1, r1, ip, asr #7
   10be8:	andeq	r0, r0, r4, asr r0
   10bec:	ldr	r0, [pc, #24]	; 10c0c <__snprintf_chk@plt+0x3d8>
   10bf0:	ldr	r3, [pc, #24]	; 10c10 <__snprintf_chk@plt+0x3dc>
   10bf4:	cmp	r3, r0
   10bf8:	bxeq	lr
   10bfc:	ldr	r3, [pc, #16]	; 10c14 <__snprintf_chk@plt+0x3e0>
   10c00:	cmp	r3, #0
   10c04:	bxeq	lr
   10c08:	bx	r3
   10c0c:	andeq	r2, r2, r8
   10c10:	andeq	r2, r2, r8
   10c14:	andeq	r0, r0, r0
   10c18:	ldr	r0, [pc, #36]	; 10c44 <__snprintf_chk@plt+0x410>
   10c1c:	ldr	r1, [pc, #36]	; 10c48 <__snprintf_chk@plt+0x414>
   10c20:	sub	r1, r1, r0
   10c24:	asr	r1, r1, #2
   10c28:	add	r1, r1, r1, lsr #31
   10c2c:	asrs	r1, r1, #1
   10c30:	bxeq	lr
   10c34:	ldr	r3, [pc, #16]	; 10c4c <__snprintf_chk@plt+0x418>
   10c38:	cmp	r3, #0
   10c3c:	bxeq	lr
   10c40:	bx	r3
   10c44:	andeq	r2, r2, r8
   10c48:	andeq	r2, r2, r8
   10c4c:	andeq	r0, r0, r0
   10c50:	push	{r4, lr}
   10c54:	ldr	r4, [pc, #24]	; 10c74 <__snprintf_chk@plt+0x440>
   10c58:	ldrb	r3, [r4]
   10c5c:	cmp	r3, #0
   10c60:	popne	{r4, pc}
   10c64:	bl	10bec <__snprintf_chk@plt+0x3b8>
   10c68:	mov	r3, #1
   10c6c:	strb	r3, [r4]
   10c70:	pop	{r4, pc}
   10c74:	andeq	r2, r2, r8
   10c78:	b	10c18 <__snprintf_chk@plt+0x3e4>
   10c7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10c80:	mov	r7, r0
   10c84:	ldr	r6, [pc, #72]	; 10cd4 <__snprintf_chk@plt+0x4a0>
   10c88:	ldr	r5, [pc, #72]	; 10cd8 <__snprintf_chk@plt+0x4a4>
   10c8c:	add	r6, pc, r6
   10c90:	add	r5, pc, r5
   10c94:	sub	r6, r6, r5
   10c98:	mov	r8, r1
   10c9c:	mov	r9, r2
   10ca0:	bl	10748 <XSendEvent@plt-0x20>
   10ca4:	asrs	r6, r6, #2
   10ca8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10cac:	mov	r4, #0
   10cb0:	add	r4, r4, #1
   10cb4:	ldr	r3, [r5], #4
   10cb8:	mov	r2, r9
   10cbc:	mov	r1, r8
   10cc0:	mov	r0, r7
   10cc4:	blx	r3
   10cc8:	cmp	r6, r4
   10ccc:	bne	10cb0 <__snprintf_chk@plt+0x47c>
   10cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10cd4:	andeq	r1, r1, r0, lsl #4
   10cd8:	strdeq	r1, [r1], -r8
   10cdc:	bx	lr

Disassembly of section .fini:

00010ce0 <.fini>:
   10ce0:	push	{r3, lr}
   10ce4:	pop	{r3, pc}
