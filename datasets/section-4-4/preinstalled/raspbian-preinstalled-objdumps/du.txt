
raspbian-preinstalled/du:     file format elf32-littlearm


Disassembly of section .init:

00011670 <.init>:
   11670:	push	{r3, lr}
   11674:	bl	1364c <__assert_fail@plt+0x1af4>
   11678:	pop	{r3, pc}

Disassembly of section .plt:

0001167c <fstatfs64@plt-0x14>:
   1167c:	push	{lr}		; (str lr, [sp, #-4]!)
   11680:	ldr	lr, [pc, #4]	; 1168c <fstatfs64@plt-0x4>
   11684:	add	lr, pc, lr
   11688:	ldr	pc, [lr, #8]!
   1168c:	andeq	r3, r2, r4, ror r9

00011690 <fstatfs64@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #143360	; 0x23000
   11698:	ldr	pc, [ip, #2420]!	; 0x974

0001169c <calloc@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #143360	; 0x23000
   116a4:	ldr	pc, [ip, #2412]!	; 0x96c

000116a8 <fputs_unlocked@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #143360	; 0x23000
   116b0:	ldr	pc, [ip, #2404]!	; 0x964

000116b4 <strstr@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #143360	; 0x23000
   116bc:	ldr	pc, [ip, #2396]!	; 0x95c

000116c0 <raise@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #143360	; 0x23000
   116c8:	ldr	pc, [ip, #2388]!	; 0x954

000116cc <gmtime_r@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #143360	; 0x23000
   116d4:	ldr	pc, [ip, #2380]!	; 0x94c

000116d8 <__getdelim@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #143360	; 0x23000
   116e0:	ldr	pc, [ip, #2372]!	; 0x944

000116e4 <strcmp@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #143360	; 0x23000
   116ec:	ldr	pc, [ip, #2364]!	; 0x93c

000116f0 <mktime@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #143360	; 0x23000
   116f8:	ldr	pc, [ip, #2356]!	; 0x934

000116fc <fflush@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #143360	; 0x23000
   11704:	ldr	pc, [ip, #2348]!	; 0x92c

00011708 <wcwidth@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #143360	; 0x23000
   11710:	ldr	pc, [ip, #2340]!	; 0x924

00011714 <memmove@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #143360	; 0x23000
   1171c:	ldr	pc, [ip, #2332]!	; 0x91c

00011720 <free@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #143360	; 0x23000
   11728:	ldr	pc, [ip, #2324]!	; 0x914

0001172c <_exit@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #143360	; 0x23000
   11734:	ldr	pc, [ip, #2316]!	; 0x90c

00011738 <memcpy@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #143360	; 0x23000
   11740:	ldr	pc, [ip, #2308]!	; 0x904

00011744 <__strtoull_internal@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #143360	; 0x23000
   1174c:	ldr	pc, [ip, #2300]!	; 0x8fc

00011750 <towlower@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #143360	; 0x23000
   11758:	ldr	pc, [ip, #2292]!	; 0x8f4

0001175c <mbsinit@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #143360	; 0x23000
   11764:	ldr	pc, [ip, #2284]!	; 0x8ec

00011768 <memcmp@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #143360	; 0x23000
   11770:	ldr	pc, [ip, #2276]!	; 0x8e4

00011774 <dcgettext@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #143360	; 0x23000
   1177c:	ldr	pc, [ip, #2268]!	; 0x8dc

00011780 <__stack_chk_fail@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #143360	; 0x23000
   11788:	ldr	pc, [ip, #2260]!	; 0x8d4

0001178c <dup2@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #143360	; 0x23000
   11794:	ldr	pc, [ip, #2252]!	; 0x8cc

00011798 <realloc@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #143360	; 0x23000
   117a0:	ldr	pc, [ip, #2244]!	; 0x8c4

000117a4 <regexec@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #143360	; 0x23000
   117ac:	ldr	pc, [ip, #2236]!	; 0x8bc

000117b0 <localtime_r@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #143360	; 0x23000
   117b8:	ldr	pc, [ip, #2228]!	; 0x8b4

000117bc <textdomain@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #143360	; 0x23000
   117c4:	ldr	pc, [ip, #2220]!	; 0x8ac

000117c8 <iswcntrl@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #143360	; 0x23000
   117d0:	ldr	pc, [ip, #2212]!	; 0x8a4

000117d4 <__fxstatat64@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #143360	; 0x23000
   117dc:	ldr	pc, [ip, #2204]!	; 0x89c

000117e0 <fflush_unlocked@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #143360	; 0x23000
   117e8:	ldr	pc, [ip, #2196]!	; 0x894

000117ec <iswprint@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #143360	; 0x23000
   117f4:	ldr	pc, [ip, #2188]!	; 0x88c

000117f8 <tzset@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #143360	; 0x23000
   11800:	ldr	pc, [ip, #2180]!	; 0x884

00011804 <__fxstat64@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #143360	; 0x23000
   1180c:	ldr	pc, [ip, #2172]!	; 0x87c

00011810 <__memcpy_chk@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #143360	; 0x23000
   11818:	ldr	pc, [ip, #2164]!	; 0x874

0001181c <fwrite@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #143360	; 0x23000
   11824:	ldr	pc, [ip, #2156]!	; 0x86c

00011828 <lseek64@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #143360	; 0x23000
   11830:	ldr	pc, [ip, #2148]!	; 0x864

00011834 <regfree@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #143360	; 0x23000
   1183c:	ldr	pc, [ip, #2140]!	; 0x85c

00011840 <__ctype_get_mb_cur_max@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #143360	; 0x23000
   11848:	ldr	pc, [ip, #2132]!	; 0x854

0001184c <hasmntopt@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #143360	; 0x23000
   11854:	ldr	pc, [ip, #2124]!	; 0x84c

00011858 <strcpy@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #143360	; 0x23000
   11860:	ldr	pc, [ip, #2116]!	; 0x844

00011864 <__fpending@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #143360	; 0x23000
   1186c:	ldr	pc, [ip, #2108]!	; 0x83c

00011870 <mbrtowc@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #143360	; 0x23000
   11878:	ldr	pc, [ip, #2100]!	; 0x834

0001187c <error@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #143360	; 0x23000
   11884:	ldr	pc, [ip, #2092]!	; 0x82c

00011888 <getmntent@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #143360	; 0x23000
   11890:	ldr	pc, [ip, #2084]!	; 0x824

00011894 <fnmatch@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #143360	; 0x23000
   1189c:	ldr	pc, [ip, #2076]!	; 0x81c

000118a0 <open64@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #143360	; 0x23000
   118a8:	ldr	pc, [ip, #2068]!	; 0x814

000118ac <getenv@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #143360	; 0x23000
   118b4:	ldr	pc, [ip, #2060]!	; 0x80c

000118b8 <malloc@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #143360	; 0x23000
   118c0:	ldr	pc, [ip, #2052]!	; 0x804

000118c4 <__libc_start_main@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #143360	; 0x23000
   118cc:	ldr	pc, [ip, #2044]!	; 0x7fc

000118d0 <strftime@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #143360	; 0x23000
   118d8:	ldr	pc, [ip, #2036]!	; 0x7f4

000118dc <__freading@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #143360	; 0x23000
   118e4:	ldr	pc, [ip, #2028]!	; 0x7ec

000118e8 <__ctype_tolower_loc@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #143360	; 0x23000
   118f0:	ldr	pc, [ip, #2020]!	; 0x7e4

000118f4 <__ctype_toupper_loc@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #143360	; 0x23000
   118fc:	ldr	pc, [ip, #2012]!	; 0x7dc

00011900 <__gmon_start__@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #143360	; 0x23000
   11908:	ldr	pc, [ip, #2004]!	; 0x7d4

0001190c <freopen64@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #143360	; 0x23000
   11914:	ldr	pc, [ip, #1996]!	; 0x7cc

00011918 <getopt_long@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #143360	; 0x23000
   11920:	ldr	pc, [ip, #1988]!	; 0x7c4

00011924 <__ctype_b_loc@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #143360	; 0x23000
   1192c:	ldr	pc, [ip, #1980]!	; 0x7bc

00011930 <exit@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #143360	; 0x23000
   11938:	ldr	pc, [ip, #1972]!	; 0x7b4

0001193c <feof@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #143360	; 0x23000
   11944:	ldr	pc, [ip, #1964]!	; 0x7ac

00011948 <strtoul@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #143360	; 0x23000
   11950:	ldr	pc, [ip, #1956]!	; 0x7a4

00011954 <strlen@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #143360	; 0x23000
   1195c:	ldr	pc, [ip, #1948]!	; 0x79c

00011960 <strchr@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #143360	; 0x23000
   11968:	ldr	pc, [ip, #1940]!	; 0x794

0001196c <setenv@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #143360	; 0x23000
   11974:	ldr	pc, [ip, #1932]!	; 0x78c

00011978 <openat64@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #143360	; 0x23000
   11980:	ldr	pc, [ip, #1924]!	; 0x784

00011984 <__errno_location@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #143360	; 0x23000
   1198c:	ldr	pc, [ip, #1916]!	; 0x77c

00011990 <__sprintf_chk@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #143360	; 0x23000
   11998:	ldr	pc, [ip, #1908]!	; 0x774

0001199c <__cxa_atexit@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #143360	; 0x23000
   119a4:	ldr	pc, [ip, #1900]!	; 0x76c

000119a8 <memset@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #143360	; 0x23000
   119b0:	ldr	pc, [ip, #1892]!	; 0x764

000119b4 <__printf_chk@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #143360	; 0x23000
   119bc:	ldr	pc, [ip, #1884]!	; 0x75c

000119c0 <fileno@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #143360	; 0x23000
   119c8:	ldr	pc, [ip, #1876]!	; 0x754

000119cc <__fprintf_chk@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #143360	; 0x23000
   119d4:	ldr	pc, [ip, #1868]!	; 0x74c

000119d8 <memchr@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #143360	; 0x23000
   119e0:	ldr	pc, [ip, #1860]!	; 0x744

000119e4 <fclose@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #143360	; 0x23000
   119ec:	ldr	pc, [ip, #1852]!	; 0x73c

000119f0 <fseeko64@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #143360	; 0x23000
   119f8:	ldr	pc, [ip, #1844]!	; 0x734

000119fc <endmntent@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #143360	; 0x23000
   11a04:	ldr	pc, [ip, #1836]!	; 0x72c

00011a08 <fcntl64@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #143360	; 0x23000
   11a10:	ldr	pc, [ip, #1828]!	; 0x724

00011a14 <__uflow@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #143360	; 0x23000
   11a1c:	ldr	pc, [ip, #1820]!	; 0x71c

00011a20 <__overflow@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #143360	; 0x23000
   11a28:	ldr	pc, [ip, #1812]!	; 0x714

00011a2c <setlocale@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #143360	; 0x23000
   11a34:	ldr	pc, [ip, #1804]!	; 0x70c

00011a38 <strrchr@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #143360	; 0x23000
   11a40:	ldr	pc, [ip, #1796]!	; 0x704

00011a44 <nl_langinfo@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #143360	; 0x23000
   11a4c:	ldr	pc, [ip, #1788]!	; 0x6fc

00011a50 <fputc@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #143360	; 0x23000
   11a58:	ldr	pc, [ip, #1780]!	; 0x6f4

00011a5c <sscanf@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #143360	; 0x23000
   11a64:	ldr	pc, [ip, #1772]!	; 0x6ec

00011a68 <localeconv@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #143360	; 0x23000
   11a70:	ldr	pc, [ip, #1764]!	; 0x6e4

00011a74 <readdir64@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #143360	; 0x23000
   11a7c:	ldr	pc, [ip, #1756]!	; 0x6dc

00011a80 <fdopendir@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #143360	; 0x23000
   11a88:	ldr	pc, [ip, #1748]!	; 0x6d4

00011a8c <timegm@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #143360	; 0x23000
   11a94:	ldr	pc, [ip, #1740]!	; 0x6cc

00011a98 <regcomp@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #143360	; 0x23000
   11aa0:	ldr	pc, [ip, #1732]!	; 0x6c4

00011aa4 <dirfd@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #143360	; 0x23000
   11aac:	ldr	pc, [ip, #1724]!	; 0x6bc

00011ab0 <fchdir@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #143360	; 0x23000
   11ab8:	ldr	pc, [ip, #1716]!	; 0x6b4

00011abc <__strtoll_internal@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #143360	; 0x23000
   11ac4:	ldr	pc, [ip, #1708]!	; 0x6ac

00011ac8 <fopen64@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #143360	; 0x23000
   11ad0:	ldr	pc, [ip, #1700]!	; 0x6a4

00011ad4 <qsort@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #143360	; 0x23000
   11adc:	ldr	pc, [ip, #1692]!	; 0x69c

00011ae0 <setmntent@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #143360	; 0x23000
   11ae8:	ldr	pc, [ip, #1684]!	; 0x694

00011aec <bindtextdomain@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #143360	; 0x23000
   11af4:	ldr	pc, [ip, #1676]!	; 0x68c

00011af8 <getdelim@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #143360	; 0x23000
   11b00:	ldr	pc, [ip, #1668]!	; 0x684

00011b04 <__xstat64@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #143360	; 0x23000
   11b0c:	ldr	pc, [ip, #1660]!	; 0x67c

00011b10 <unsetenv@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #143360	; 0x23000
   11b18:	ldr	pc, [ip, #1652]!	; 0x674

00011b1c <strncmp@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #143360	; 0x23000
   11b24:	ldr	pc, [ip, #1644]!	; 0x66c

00011b28 <abort@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #143360	; 0x23000
   11b30:	ldr	pc, [ip, #1636]!	; 0x664

00011b34 <close@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #143360	; 0x23000
   11b3c:	ldr	pc, [ip, #1628]!	; 0x65c

00011b40 <__lxstat64@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #143360	; 0x23000
   11b48:	ldr	pc, [ip, #1620]!	; 0x654

00011b4c <closedir@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #143360	; 0x23000
   11b54:	ldr	pc, [ip, #1612]!	; 0x64c

00011b58 <__assert_fail@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #143360	; 0x23000
   11b60:	ldr	pc, [ip, #1604]!	; 0x644

Disassembly of section .text:

00011b68 <fts_open@@Base-0xd88c>:
   11b68:	ldr	r2, [pc, #3976]	; 12af8 <__assert_fail@plt+0xfa0>
   11b6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b70:	sub	sp, sp, #252	; 0xfc
   11b74:	ldr	r2, [r2]
   11b78:	ldr	r3, [pc, #3964]	; 12afc <__assert_fail@plt+0xfa4>
   11b7c:	mov	fp, #0
   11b80:	mov	r6, r0
   11b84:	ldr	r0, [r1]
   11b88:	str	r2, [sp, #244]	; 0xf4
   11b8c:	str	r3, [sp, #236]	; 0xec
   11b90:	mov	r5, r1
   11b94:	str	fp, [sp, #240]	; 0xf0
   11b98:	bl	19670 <__assert_fail@plt+0x7b18>
   11b9c:	ldr	r1, [pc, #3932]	; 12b00 <__assert_fail@plt+0xfa8>
   11ba0:	mov	r0, #6
   11ba4:	bl	11a2c <setlocale@plt>
   11ba8:	ldr	r1, [pc, #3924]	; 12b04 <__assert_fail@plt+0xfac>
   11bac:	ldr	r0, [pc, #3924]	; 12b08 <__assert_fail@plt+0xfb0>
   11bb0:	bl	11aec <bindtextdomain@plt>
   11bb4:	ldr	r0, [pc, #3916]	; 12b08 <__assert_fail@plt+0xfb0>
   11bb8:	bl	117bc <textdomain@plt>
   11bbc:	ldr	r0, [pc, #3912]	; 12b0c <__assert_fail@plt+0xfb4>
   11bc0:	bl	21f54 <fts_children@@Base+0x1ec8>
   11bc4:	bl	14b0c <__assert_fail@plt+0x2fb4>
   11bc8:	ldr	r4, [pc, #3904]	; 12b10 <__assert_fail@plt+0xfb8>
   11bcc:	mov	r3, fp
   11bd0:	ldr	sl, [pc, #3900]	; 12b14 <__assert_fail@plt+0xfbc>
   11bd4:	str	r3, [sp, #28]
   11bd8:	str	r3, [sp, #48]	; 0x30
   11bdc:	add	r3, r4, #416	; 0x1a0
   11be0:	str	r3, [sp, #56]	; 0x38
   11be4:	mov	r3, #16
   11be8:	str	r3, [sp, #32]
   11bec:	mov	r3, #8
   11bf0:	str	r3, [sp, #44]	; 0x2c
   11bf4:	mov	r3, #1
   11bf8:	str	fp, [sp, #40]	; 0x28
   11bfc:	str	r3, [sp, #52]	; 0x34
   11c00:	ldr	r7, [pc, #3856]	; 12b18 <__assert_fail@plt+0xfc0>
   11c04:	ldr	r8, [pc, #3856]	; 12b1c <__assert_fail@plt+0xfc4>
   11c08:	ldr	fp, [pc, #3856]	; 12b20 <__assert_fail@plt+0xfc8>
   11c0c:	add	r9, sp, #104	; 0x68
   11c10:	str	r0, [sl, #32]
   11c14:	ldr	r0, [pc, #3848]	; 12b24 <__assert_fail@plt+0xfcc>
   11c18:	bl	118ac <getenv@plt>
   11c1c:	add	r2, sl, #8
   11c20:	mov	r1, sl
   11c24:	bl	18b40 <__assert_fail@plt+0x6fe8>
   11c28:	mvn	ip, #0
   11c2c:	str	r9, [sp]
   11c30:	mov	r3, r4
   11c34:	mov	r2, r7
   11c38:	mov	r1, r5
   11c3c:	mov	r0, r6
   11c40:	str	ip, [sp, #104]	; 0x68
   11c44:	bl	11918 <getopt_long@plt>
   11c48:	cmn	r0, #1
   11c4c:	beq	123dc <__assert_fail@plt+0x884>
   11c50:	add	r0, r0, #3
   11c54:	cmp	r0, r8
   11c58:	ldrls	pc, [pc, r0, lsl #2]
   11c5c:	b	12394 <__assert_fail@plt+0x83c>
   11c60:	andeq	r2, r1, ip, lsr #4
   11c64:	andeq	r3, r1, r0, lsr #7
   11c68:	muleq	r1, r4, r3
   11c6c:	muleq	r1, r4, r3
   11c70:	muleq	r1, r4, r3
   11c74:	muleq	r1, r4, r3
   11c78:	muleq	r1, r4, r3
   11c7c:	muleq	r1, r4, r3
   11c80:	muleq	r1, r4, r3
   11c84:	muleq	r1, r4, r3
   11c88:	muleq	r1, r4, r3
   11c8c:	muleq	r1, r4, r3
   11c90:	muleq	r1, r4, r3
   11c94:	muleq	r1, r4, r3
   11c98:	muleq	r1, r4, r3
   11c9c:	muleq	r1, r4, r3
   11ca0:	muleq	r1, r4, r3
   11ca4:	muleq	r1, r4, r3
   11ca8:	muleq	r1, r4, r3
   11cac:	muleq	r1, r4, r3
   11cb0:	muleq	r1, r4, r3
   11cb4:	muleq	r1, r4, r3
   11cb8:	muleq	r1, r4, r3
   11cbc:	muleq	r1, r4, r3
   11cc0:	muleq	r1, r4, r3
   11cc4:	muleq	r1, r4, r3
   11cc8:	muleq	r1, r4, r3
   11ccc:	muleq	r1, r4, r3
   11cd0:	muleq	r1, r4, r3
   11cd4:	muleq	r1, r4, r3
   11cd8:	muleq	r1, r4, r3
   11cdc:	muleq	r1, r4, r3
   11ce0:	muleq	r1, r4, r3
   11ce4:	muleq	r1, r4, r3
   11ce8:	muleq	r1, r4, r3
   11cec:	muleq	r1, r4, r3
   11cf0:	muleq	r1, r4, r3
   11cf4:	muleq	r1, r4, r3
   11cf8:	muleq	r1, r4, r3
   11cfc:	muleq	r1, r4, r3
   11d00:	muleq	r1, r4, r3
   11d04:	muleq	r1, r4, r3
   11d08:	muleq	r1, r4, r3
   11d0c:	muleq	r1, r4, r3
   11d10:	muleq	r1, r4, r3
   11d14:	muleq	r1, r4, r3
   11d18:	muleq	r1, r4, r3
   11d1c:	muleq	r1, r4, r3
   11d20:	muleq	r1, r4, r3
   11d24:	muleq	r1, r4, r3
   11d28:	muleq	r1, r4, r3
   11d2c:	andeq	r2, r1, r0, lsr #4
   11d30:	muleq	r1, r4, r3
   11d34:	muleq	r1, r4, r3
   11d38:	muleq	r1, r4, r3
   11d3c:	muleq	r1, r4, r3
   11d40:	muleq	r1, r4, r3
   11d44:	muleq	r1, r4, r3
   11d48:	muleq	r1, r4, r3
   11d4c:	muleq	r1, r4, r3
   11d50:	muleq	r1, r4, r3
   11d54:	muleq	r1, r4, r3
   11d58:	muleq	r1, r4, r3
   11d5c:	muleq	r1, r4, r3
   11d60:	muleq	r1, r4, r3
   11d64:	muleq	r1, r4, r3
   11d68:	muleq	r1, r4, r3
   11d6c:	muleq	r1, r4, r3
   11d70:	muleq	r1, r4, r3
   11d74:	strdeq	r2, [r1], -r0
   11d78:	muleq	r1, r4, r3
   11d7c:	andeq	r2, r1, r4, ror #3
   11d80:	muleq	r1, r4, r3
   11d84:	muleq	r1, r4, r3
   11d88:	muleq	r1, r4, r3
   11d8c:	andeq	r2, r1, r4, ror #3
   11d90:	muleq	r1, r4, r3
   11d94:	muleq	r1, r4, r3
   11d98:	muleq	r1, r4, r3
   11d9c:	ldrdeq	r2, [r1], -r8
   11da0:	muleq	r1, r4, r3
   11da4:	muleq	r1, r4, r3
   11da8:	muleq	r1, r4, r3
   11dac:	andeq	r2, r1, ip, asr #3
   11db0:	muleq	r1, r4, r3
   11db4:	muleq	r1, r4, r3
   11db8:	andeq	r2, r1, r0, asr #3
   11dbc:	muleq	r1, r4, r3
   11dc0:	muleq	r1, r4, r3
   11dc4:	muleq	r1, r4, r3
   11dc8:	muleq	r1, r4, r3
   11dcc:	andeq	r2, r1, r0, ror #2
   11dd0:	muleq	r1, r4, r3
   11dd4:	muleq	r1, r4, r3
   11dd8:	muleq	r1, r4, r3
   11ddc:	muleq	r1, r4, r3
   11de0:	muleq	r1, r4, r3
   11de4:	muleq	r1, r4, r3
   11de8:	muleq	r1, r4, r3
   11dec:	muleq	r1, r4, r3
   11df0:	andeq	r2, r1, r4, asr r1
   11df4:	andeq	r2, r1, r4, lsr r1
   11df8:	andeq	r2, r1, r8, lsr #2
   11dfc:	andeq	r2, r1, ip, ror #1
   11e00:	muleq	r1, r4, r3
   11e04:	muleq	r1, r4, r3
   11e08:	muleq	r1, r4, r3
   11e0c:	ldrdeq	r2, [r1], -r4
   11e10:	muleq	r1, r4, r3
   11e14:	muleq	r1, r4, r3
   11e18:	strheq	r2, [r1], -ip
   11e1c:	strheq	r2, [r1], -r0
   11e20:	muleq	r1, r8, r0
   11e24:	muleq	r1, r4, r3
   11e28:	muleq	r1, r4, r3
   11e2c:	muleq	r1, r4, r3
   11e30:	muleq	r1, r4, r3
   11e34:	muleq	r1, r4, r3
   11e38:	andeq	r2, r1, ip, lsl #1
   11e3c:	andeq	r2, r1, r4, lsr r3
   11e40:	muleq	r1, r4, r3
   11e44:	muleq	r1, r4, r3
   11e48:	muleq	r1, r4, r3
   11e4c:	andeq	r2, r1, r8, lsr #6
   11e50:	muleq	r1, r4, r3
   11e54:	muleq	r1, r4, r3
   11e58:	muleq	r1, r4, r3
   11e5c:	muleq	r1, r4, r3
   11e60:	muleq	r1, r4, r3
   11e64:	muleq	r1, r4, r3
   11e68:	muleq	r1, r4, r3
   11e6c:	muleq	r1, r4, r3
   11e70:	muleq	r1, r4, r3
   11e74:	muleq	r1, r4, r3
   11e78:	muleq	r1, r4, r3
   11e7c:	muleq	r1, r4, r3
   11e80:	muleq	r1, r4, r3
   11e84:	muleq	r1, r4, r3
   11e88:	muleq	r1, r4, r3
   11e8c:	muleq	r1, r4, r3
   11e90:	muleq	r1, r4, r3
   11e94:	muleq	r1, r4, r3
   11e98:	muleq	r1, r4, r3
   11e9c:	muleq	r1, r4, r3
   11ea0:	muleq	r1, r4, r3
   11ea4:	muleq	r1, r4, r3
   11ea8:	muleq	r1, r4, r3
   11eac:	muleq	r1, r4, r3
   11eb0:	muleq	r1, r4, r3
   11eb4:	muleq	r1, r4, r3
   11eb8:	muleq	r1, r4, r3
   11ebc:	muleq	r1, r4, r3
   11ec0:	muleq	r1, r4, r3
   11ec4:	muleq	r1, r4, r3
   11ec8:	muleq	r1, r4, r3
   11ecc:	muleq	r1, r4, r3
   11ed0:	muleq	r1, r4, r3
   11ed4:	muleq	r1, r4, r3
   11ed8:	muleq	r1, r4, r3
   11edc:	muleq	r1, r4, r3
   11ee0:	muleq	r1, r4, r3
   11ee4:	muleq	r1, r4, r3
   11ee8:	muleq	r1, r4, r3
   11eec:	muleq	r1, r4, r3
   11ef0:	muleq	r1, r4, r3
   11ef4:	muleq	r1, r4, r3
   11ef8:	muleq	r1, r4, r3
   11efc:	muleq	r1, r4, r3
   11f00:	muleq	r1, r4, r3
   11f04:	muleq	r1, r4, r3
   11f08:	muleq	r1, r4, r3
   11f0c:	muleq	r1, r4, r3
   11f10:	muleq	r1, r4, r3
   11f14:	muleq	r1, r4, r3
   11f18:	muleq	r1, r4, r3
   11f1c:	muleq	r1, r4, r3
   11f20:	muleq	r1, r4, r3
   11f24:	muleq	r1, r4, r3
   11f28:	muleq	r1, r4, r3
   11f2c:	muleq	r1, r4, r3
   11f30:	muleq	r1, r4, r3
   11f34:	muleq	r1, r4, r3
   11f38:	muleq	r1, r4, r3
   11f3c:	muleq	r1, r4, r3
   11f40:	muleq	r1, r4, r3
   11f44:	muleq	r1, r4, r3
   11f48:	muleq	r1, r4, r3
   11f4c:	muleq	r1, r4, r3
   11f50:	muleq	r1, r4, r3
   11f54:	muleq	r1, r4, r3
   11f58:	muleq	r1, r4, r3
   11f5c:	muleq	r1, r4, r3
   11f60:	muleq	r1, r4, r3
   11f64:	muleq	r1, r4, r3
   11f68:	muleq	r1, r4, r3
   11f6c:	muleq	r1, r4, r3
   11f70:	muleq	r1, r4, r3
   11f74:	muleq	r1, r4, r3
   11f78:	muleq	r1, r4, r3
   11f7c:	muleq	r1, r4, r3
   11f80:	muleq	r1, r4, r3
   11f84:	muleq	r1, r4, r3
   11f88:	muleq	r1, r4, r3
   11f8c:	muleq	r1, r4, r3
   11f90:	muleq	r1, r4, r3
   11f94:	muleq	r1, r4, r3
   11f98:	muleq	r1, r4, r3
   11f9c:	muleq	r1, r4, r3
   11fa0:	muleq	r1, r4, r3
   11fa4:	muleq	r1, r4, r3
   11fa8:	muleq	r1, r4, r3
   11fac:	muleq	r1, r4, r3
   11fb0:	muleq	r1, r4, r3
   11fb4:	muleq	r1, r4, r3
   11fb8:	muleq	r1, r4, r3
   11fbc:	muleq	r1, r4, r3
   11fc0:	muleq	r1, r4, r3
   11fc4:	muleq	r1, r4, r3
   11fc8:	muleq	r1, r4, r3
   11fcc:	muleq	r1, r4, r3
   11fd0:	muleq	r1, r4, r3
   11fd4:	muleq	r1, r4, r3
   11fd8:	muleq	r1, r4, r3
   11fdc:	muleq	r1, r4, r3
   11fe0:	muleq	r1, r4, r3
   11fe4:	muleq	r1, r4, r3
   11fe8:	muleq	r1, r4, r3
   11fec:	muleq	r1, r4, r3
   11ff0:	muleq	r1, r4, r3
   11ff4:	muleq	r1, r4, r3
   11ff8:	muleq	r1, r4, r3
   11ffc:	muleq	r1, r4, r3
   12000:	muleq	r1, r4, r3
   12004:	muleq	r1, r4, r3
   12008:	muleq	r1, r4, r3
   1200c:	muleq	r1, r4, r3
   12010:	muleq	r1, r4, r3
   12014:	muleq	r1, r4, r3
   12018:	muleq	r1, r4, r3
   1201c:	muleq	r1, r4, r3
   12020:	muleq	r1, r4, r3
   12024:	muleq	r1, r4, r3
   12028:	muleq	r1, r4, r3
   1202c:	muleq	r1, r4, r3
   12030:	muleq	r1, r4, r3
   12034:	muleq	r1, r4, r3
   12038:	muleq	r1, r4, r3
   1203c:	muleq	r1, r4, r3
   12040:	muleq	r1, r4, r3
   12044:	muleq	r1, r4, r3
   12048:	muleq	r1, r4, r3
   1204c:	muleq	r1, r4, r3
   12050:	muleq	r1, r4, r3
   12054:	muleq	r1, r4, r3
   12058:	muleq	r1, r4, r3
   1205c:	muleq	r1, r4, r3
   12060:	muleq	r1, r4, r3
   12064:	muleq	r1, r4, r3
   12068:	muleq	r1, r4, r3
   1206c:	andeq	r2, r1, ip, lsl r3
   12070:	andeq	r2, r1, r8, lsl #6
   12074:	strdeq	r2, [r1], -ip
   12078:	andeq	r2, r1, r4, ror #5
   1207c:	muleq	r1, r4, r3
   12080:	andeq	r2, r1, ip, lsl #5
   12084:	andeq	r2, r1, r0, lsl #5
   12088:	andeq	r2, r1, r4, ror r2
   1208c:	mov	r3, #1
   12090:	str	r3, [sp, #40]	; 0x28
   12094:	b	11c28 <__assert_fail@plt+0xd0>
   12098:	mov	r0, #1048576	; 0x100000
   1209c:	mov	r1, #0
   120a0:	mov	r3, #0
   120a4:	strd	r0, [sl, #8]
   120a8:	str	r3, [sl]
   120ac:	b	11c28 <__assert_fail@plt+0xd0>
   120b0:	mov	r3, #1
   120b4:	strb	r3, [sl, #39]	; 0x27
   120b8:	b	11c28 <__assert_fail@plt+0xd0>
   120bc:	mov	r0, #1024	; 0x400
   120c0:	mov	r1, #0
   120c4:	mov	r3, #0
   120c8:	strd	r0, [sl, #8]
   120cc:	str	r3, [sl]
   120d0:	b	11c28 <__assert_fail@plt+0xd0>
   120d4:	mov	r0, #1
   120d8:	mov	r1, #0
   120dc:	mov	r3, #176	; 0xb0
   120e0:	strd	r0, [sl, #8]
   120e4:	str	r3, [sl]
   120e8:	b	11c28 <__assert_fail@plt+0xd0>
   120ec:	mov	r3, #0
   120f0:	str	r3, [sp]
   120f4:	mov	r2, r3
   120f8:	mov	r1, r3
   120fc:	ldr	r0, [fp]
   12100:	add	r3, sp, #128	; 0x80
   12104:	bl	1cc6c <__assert_fail@plt+0xb114>
   12108:	cmp	r0, #0
   1210c:	bne	123a0 <__assert_fail@plt+0x848>
   12110:	ldr	r3, [pc, #2836]	; 12c2c <__assert_fail@plt+0x10d4>
   12114:	ldr	r2, [sp, #128]	; 0x80
   12118:	mov	r1, #1
   1211c:	str	r1, [sp, #48]	; 0x30
   12120:	str	r2, [r3]
   12124:	b	11c28 <__assert_fail@plt+0xd0>
   12128:	mov	r3, #1
   1212c:	strb	r3, [sl, #38]	; 0x26
   12130:	b	11c28 <__assert_fail@plt+0xd0>
   12134:	mov	r0, #1
   12138:	mov	r1, #0
   1213c:	mov	r2, #1
   12140:	mov	r3, #0
   12144:	strd	r0, [sl, #8]
   12148:	strb	r2, [sl, #37]	; 0x25
   1214c:	str	r3, [sl]
   12150:	b	11c28 <__assert_fail@plt+0xd0>
   12154:	mov	r3, #1
   12158:	strb	r3, [sl, #36]	; 0x24
   1215c:	b	11c28 <__assert_fail@plt+0xd0>
   12160:	mov	r3, #10
   12164:	str	r3, [sp]
   12168:	ldr	r2, [fp]
   1216c:	mov	r3, #268435456	; 0x10000000
   12170:	ldr	r1, [sl, #32]
   12174:	ldr	r0, [pc, #2476]	; 12b28 <__assert_fail@plt+0xfd0>
   12178:	bl	153ac <__assert_fail@plt+0x3854>
   1217c:	cmp	r0, #0
   12180:	beq	11c28 <__assert_fail@plt+0xd0>
   12184:	bl	11984 <__errno_location@plt>
   12188:	mov	r3, #0
   1218c:	str	r3, [sp, #52]	; 0x34
   12190:	ldr	r2, [fp]
   12194:	mov	r1, #3
   12198:	ldr	r3, [r0]
   1219c:	mov	r0, #0
   121a0:	str	r3, [sp, #60]	; 0x3c
   121a4:	bl	1b708 <__assert_fail@plt+0x9bb0>
   121a8:	ldr	r1, [sp, #60]	; 0x3c
   121ac:	ldr	r2, [pc, #2596]	; 12bd8 <__assert_fail@plt+0x1080>
   121b0:	mov	r3, r0
   121b4:	mov	r0, #0
   121b8:	bl	1187c <error@plt>
   121bc:	b	11c28 <__assert_fail@plt+0xd0>
   121c0:	mov	r3, #1
   121c4:	strb	r3, [sl, #48]	; 0x30
   121c8:	b	11c28 <__assert_fail@plt+0xd0>
   121cc:	mov	r3, #16
   121d0:	str	r3, [sp, #32]
   121d4:	b	11c28 <__assert_fail@plt+0xd0>
   121d8:	mov	r3, #2
   121dc:	str	r3, [sp, #32]
   121e0:	b	11c28 <__assert_fail@plt+0xd0>
   121e4:	mov	r3, #17
   121e8:	str	r3, [sp, #32]
   121ec:	b	11c28 <__assert_fail@plt+0xd0>
   121f0:	ldr	r2, [pc, #2356]	; 12b2c <__assert_fail@plt+0xfd4>
   121f4:	ldr	r0, [fp]
   121f8:	sub	r1, r2, #8
   121fc:	bl	18b40 <__assert_fail@plt+0x6fe8>
   12200:	cmp	r0, #0
   12204:	beq	11c28 <__assert_fail@plt+0xd0>
   12208:	ldr	r2, [fp]
   1220c:	ldr	r3, [pc, #2300]	; 12b10 <__assert_fail@plt+0xfb8>
   12210:	str	r2, [sp]
   12214:	ldr	r1, [sp, #104]	; 0x68
   12218:	mov	r2, #66	; 0x42
   1221c:	bl	1d2b8 <__assert_fail@plt+0xb760>
   12220:	mov	r3, #1
   12224:	strb	r3, [sl, #28]
   12228:	b	11c28 <__assert_fail@plt+0xd0>
   1222c:	ldr	ip, [pc, #2300]	; 12b30 <__assert_fail@plt+0xfd8>
   12230:	ldr	r1, [pc, #2300]	; 12b34 <__assert_fail@plt+0xfdc>
   12234:	ldr	r3, [pc, #2300]	; 12b38 <__assert_fail@plt+0xfe0>
   12238:	ldr	r0, [pc, #2300]	; 12b3c <__assert_fail@plt+0xfe4>
   1223c:	ldr	lr, [pc, #2300]	; 12b40 <__assert_fail@plt+0xfe8>
   12240:	ldr	r2, [pc, #2300]	; 12b44 <__assert_fail@plt+0xfec>
   12244:	mov	r4, #0
   12248:	ldr	r0, [r0]
   1224c:	ldr	r3, [r3]
   12250:	stmib	sp, {r1, ip}
   12254:	str	r2, [sp]
   12258:	str	lr, [sp, #12]
   1225c:	str	r4, [sp, #16]
   12260:	ldr	r2, [pc, #2272]	; 12b48 <__assert_fail@plt+0xff0>
   12264:	ldr	r1, [pc, #2272]	; 12b4c <__assert_fail@plt+0xff4>
   12268:	bl	1bd6c <__assert_fail@plt+0xa214>
   1226c:	mov	r0, r4
   12270:	bl	11930 <exit@plt>
   12274:	mov	r3, #1
   12278:	strb	r3, [sl, #16]
   1227c:	b	11c28 <__assert_fail@plt+0xd0>
   12280:	ldr	r3, [fp]
   12284:	str	r3, [sl, #56]	; 0x38
   12288:	b	11c28 <__assert_fail@plt+0xd0>
   1228c:	ldr	r1, [fp]
   12290:	mov	r3, #1
   12294:	cmp	r1, #0
   12298:	strb	r3, [sl, #17]
   1229c:	beq	122cc <__assert_fail@plt+0x774>
   122a0:	ldr	r3, [pc, #2324]	; 12bbc <__assert_fail@plt+0x1064>
   122a4:	mov	r2, #4
   122a8:	ldr	r0, [pc, #2208]	; 12b50 <__assert_fail@plt+0xff8>
   122ac:	ldr	r3, [r3]
   122b0:	strd	r2, [sp]
   122b4:	ldr	r3, [sp, #56]	; 0x38
   122b8:	ldr	r2, [pc, #2196]	; 12b54 <__assert_fail@plt+0xffc>
   122bc:	bl	13f7c <__assert_fail@plt+0x2424>
   122c0:	ldr	r3, [pc, #2296]	; 12bc0 <__assert_fail@plt+0x1068>
   122c4:	add	r0, r3, r0, lsl #2
   122c8:	ldr	r1, [r0, #472]	; 0x1d8
   122cc:	ldr	r0, [pc, #2180]	; 12b58 <__assert_fail@plt+0x1000>
   122d0:	str	r1, [sl, #52]	; 0x34
   122d4:	bl	118ac <getenv@plt>
   122d8:	bl	20ae8 <fts_children@@Base+0xa5c>
   122dc:	str	r0, [sl, #24]
   122e0:	b	11c28 <__assert_fail@plt+0xd0>
   122e4:	mov	r0, #1
   122e8:	mov	r1, #0
   122ec:	mov	r3, #144	; 0x90
   122f0:	strd	r0, [sl, #8]
   122f4:	str	r3, [sl]
   122f8:	b	11c28 <__assert_fail@plt+0xd0>
   122fc:	ldr	r3, [fp]
   12300:	str	r3, [sp, #28]
   12304:	b	11c28 <__assert_fail@plt+0xd0>
   12308:	mov	r2, #268435456	; 0x10000000
   1230c:	ldr	r1, [fp]
   12310:	ldr	r0, [sl, #32]
   12314:	bl	14e44 <__assert_fail@plt+0x32ec>
   12318:	b	11c28 <__assert_fail@plt+0xd0>
   1231c:	mov	r3, #1
   12320:	strb	r3, [sl, #37]	; 0x25
   12324:	b	11c28 <__assert_fail@plt+0xd0>
   12328:	mov	r3, #72	; 0x48
   1232c:	str	r3, [sp, #44]	; 0x2c
   12330:	b	11c28 <__assert_fail@plt+0xd0>
   12334:	ldr	r3, [pc, #2080]	; 12b5c <__assert_fail@plt+0x1004>
   12338:	mov	r2, #0
   1233c:	str	r3, [sp]
   12340:	mov	r1, r2
   12344:	ldr	r3, [pc, #2068]	; 12b60 <__assert_fail@plt+0x1008>
   12348:	ldr	r0, [fp]
   1234c:	bl	1c178 <__assert_fail@plt+0xa620>
   12350:	subs	r1, r0, #0
   12354:	bne	135f8 <__assert_fail@plt+0x1aa0>
   12358:	ldrd	r2, [sl, #40]	; 0x28
   1235c:	orrs	r3, r2, r3
   12360:	bne	11c28 <__assert_fail@plt+0xd0>
   12364:	ldr	r3, [fp]
   12368:	ldrb	r3, [r3]
   1236c:	cmp	r3, #45	; 0x2d
   12370:	bne	11c28 <__assert_fail@plt+0xd0>
   12374:	mov	r4, r1
   12378:	mov	r2, #5
   1237c:	ldr	r1, [pc, #2016]	; 12b64 <__assert_fail@plt+0x100c>
   12380:	bl	11774 <dcgettext@plt>
   12384:	mov	r1, r4
   12388:	mov	r2, r0
   1238c:	mov	r0, #1
   12390:	bl	1187c <error@plt>
   12394:	mov	r3, #0
   12398:	str	r3, [sp, #52]	; 0x34
   1239c:	b	11c28 <__assert_fail@plt+0xd0>
   123a0:	mov	r2, #5
   123a4:	ldr	r1, [pc, #1980]	; 12b68 <__assert_fail@plt+0x1010>
   123a8:	mov	r0, #0
   123ac:	bl	11774 <dcgettext@plt>
   123b0:	str	r0, [sp, #52]	; 0x34
   123b4:	ldr	r0, [fp]
   123b8:	bl	1b8d4 <__assert_fail@plt+0x9d7c>
   123bc:	mov	r1, #0
   123c0:	ldr	r2, [sp, #52]	; 0x34
   123c4:	mov	r3, r0
   123c8:	mov	r0, r1
   123cc:	bl	1187c <error@plt>
   123d0:	mov	r3, #0
   123d4:	str	r3, [sp, #52]	; 0x34
   123d8:	b	11c28 <__assert_fail@plt+0xd0>
   123dc:	ldr	r3, [sp, #52]	; 0x34
   123e0:	cmp	r3, #0
   123e4:	beq	135c8 <__assert_fail@plt+0x1a70>
   123e8:	ldrb	r3, [sl, #36]	; 0x24
   123ec:	cmp	r3, #0
   123f0:	beq	128f8 <__assert_fail@plt+0xda0>
   123f4:	ldr	r3, [sp, #40]	; 0x28
   123f8:	cmp	r3, #0
   123fc:	bne	135a8 <__assert_fail@plt+0x1a50>
   12400:	ldrb	r3, [sl, #16]
   12404:	cmp	r3, #0
   12408:	beq	12424 <__assert_fail@plt+0x8cc>
   1240c:	ldrb	r3, [sl, #37]	; 0x25
   12410:	cmp	r3, #0
   12414:	bne	1337c <__assert_fail@plt+0x1824>
   12418:	mov	r2, #1
   1241c:	mov	r3, #0
   12420:	strd	r2, [sl, #8]
   12424:	ldrb	r3, [sl, #17]
   12428:	cmp	r3, #0
   1242c:	beq	12454 <__assert_fail@plt+0x8fc>
   12430:	ldr	r4, [sl, #56]	; 0x38
   12434:	cmp	r4, #0
   12438:	beq	133a8 <__assert_fail@plt+0x1850>
   1243c:	ldr	r7, [sl, #56]	; 0x38
   12440:	ldrb	r3, [r7]
   12444:	cmp	r3, #43	; 0x2b
   12448:	bne	1313c <__assert_fail@plt+0x15e4>
   1244c:	add	r7, r7, #1
   12450:	str	r7, [sl, #20]
   12454:	ldr	r3, [sp, #28]
   12458:	ldr	r4, [pc, #1804]	; 12b6c <__assert_fail@plt+0x1014>
   1245c:	cmp	r3, #0
   12460:	ldr	r3, [r4]
   12464:	beq	13058 <__assert_fail@plt+0x1500>
   12468:	cmp	r3, r6
   1246c:	blt	134b8 <__assert_fail@plt+0x1960>
   12470:	ldr	r1, [pc, #1784]	; 12b70 <__assert_fail@plt+0x1018>
   12474:	ldr	r0, [sp, #28]
   12478:	bl	116e4 <strcmp@plt>
   1247c:	ldr	r4, [pc, #1808]	; 12b94 <__assert_fail@plt+0x103c>
   12480:	cmp	r0, #0
   12484:	beq	124a0 <__assert_fail@plt+0x948>
   12488:	ldr	r1, [pc, #1764]	; 12b74 <__assert_fail@plt+0x101c>
   1248c:	ldr	r0, [sp, #28]
   12490:	ldr	r2, [r4]
   12494:	bl	16f08 <__assert_fail@plt+0x53b0>
   12498:	subs	r5, r0, #0
   1249c:	beq	1356c <__assert_fail@plt+0x1a14>
   124a0:	ldr	r0, [r4]
   124a4:	bl	14058 <__assert_fail@plt+0x2500>
   124a8:	mov	r3, #1
   124ac:	strb	r3, [sl, #60]	; 0x3c
   124b0:	str	r0, [sp, #40]	; 0x28
   124b4:	ldr	r3, [sp, #40]	; 0x28
   124b8:	cmp	r3, #0
   124bc:	beq	13498 <__assert_fail@plt+0x1940>
   124c0:	bl	143f4 <__assert_fail@plt+0x289c>
   124c4:	cmp	r0, #0
   124c8:	str	r0, [sl, #64]	; 0x40
   124cc:	beq	13498 <__assert_fail@plt+0x1940>
   124d0:	ldrb	r3, [sl, #39]	; 0x27
   124d4:	cmp	r3, #0
   124d8:	bne	124e8 <__assert_fail@plt+0x990>
   124dc:	ldrb	r3, [sl, #60]	; 0x3c
   124e0:	cmp	r3, #0
   124e4:	bne	124f4 <__assert_fail@plt+0x99c>
   124e8:	ldr	r3, [sp, #44]	; 0x2c
   124ec:	orr	r3, r3, #256	; 0x100
   124f0:	str	r3, [sp, #44]	; 0x2c
   124f4:	ldr	r3, [sp, #44]	; 0x2c
   124f8:	ldr	r2, [sp, #32]
   124fc:	orr	r3, r3, r2
   12500:	str	r3, [sp, #84]	; 0x54
   12504:	ldr	r3, [sp, #52]	; 0x34
   12508:	str	r3, [sp, #68]	; 0x44
   1250c:	add	r1, sp, #100	; 0x64
   12510:	ldr	r0, [sp, #40]	; 0x28
   12514:	bl	1408c <__assert_fail@plt+0x2534>
   12518:	subs	r4, r0, #0
   1251c:	beq	12c34 <__assert_fail@plt+0x10dc>
   12520:	ldr	r3, [sp, #28]
   12524:	cmp	r3, #0
   12528:	beq	129ec <__assert_fail@plt+0xe94>
   1252c:	ldr	r1, [pc, #1596]	; 12b70 <__assert_fail@plt+0x1018>
   12530:	ldr	r0, [sp, #28]
   12534:	bl	116e4 <strcmp@plt>
   12538:	cmp	r0, #0
   1253c:	bne	12554 <__assert_fail@plt+0x9fc>
   12540:	ldr	r1, [pc, #1576]	; 12b70 <__assert_fail@plt+0x1018>
   12544:	mov	r0, r4
   12548:	bl	116e4 <strcmp@plt>
   1254c:	subs	r5, r0, #0
   12550:	beq	12958 <__assert_fail@plt+0xe00>
   12554:	ldrb	r3, [r4]
   12558:	cmp	r3, #0
   1255c:	beq	12998 <__assert_fail@plt+0xe40>
   12560:	mov	r2, #0
   12564:	ldr	r1, [sp, #84]	; 0x54
   12568:	ldr	r0, [pc, #1544]	; 12b78 <__assert_fail@plt+0x1020>
   1256c:	str	r4, [sl, #68]	; 0x44
   12570:	bl	1c0f8 <__assert_fail@plt+0xa5a0>
   12574:	ldr	r3, [sp, #52]	; 0x34
   12578:	str	r9, [sp, #80]	; 0x50
   1257c:	str	r3, [sp, #44]	; 0x2c
   12580:	str	r0, [sp, #64]	; 0x40
   12584:	b	12610 <__assert_fail@plt+0xab8>
   12588:	ldr	r1, [sp, #60]	; 0x3c
   1258c:	ldr	r0, [sl, #32]
   12590:	bl	14cc0 <__assert_fail@plt+0x3168>
   12594:	cmp	r0, #0
   12598:	bne	125ec <__assert_fail@plt+0xa94>
   1259c:	cmp	r7, #11
   125a0:	beq	13280 <__assert_fail@plt+0x1728>
   125a4:	cmp	r7, #13
   125a8:	cmpne	r7, #10
   125ac:	moveq	r3, #1
   125b0:	movne	r3, #0
   125b4:	str	r3, [sp, #56]	; 0x38
   125b8:	beq	1323c <__assert_fail@plt+0x16e4>
   125bc:	ldr	r2, [sp, #64]	; 0x40
   125c0:	ldr	r3, [r2, #48]	; 0x30
   125c4:	tst	r3, #64	; 0x40
   125c8:	beq	12d28 <__assert_fail@plt+0x11d0>
   125cc:	ldr	r3, [r4, #48]	; 0x30
   125d0:	cmp	r3, #0
   125d4:	ble	12d28 <__assert_fail@plt+0x11d0>
   125d8:	ldrd	r0, [r2, #16]
   125dc:	ldrd	r2, [r4, #72]	; 0x48
   125e0:	cmp	r1, r3
   125e4:	cmpeq	r0, r2
   125e8:	beq	12d28 <__assert_fail@plt+0x11d0>
   125ec:	cmp	r7, #1
   125f0:	beq	13000 <__assert_fail@plt+0x14a8>
   125f4:	ldr	r3, [sp, #52]	; 0x34
   125f8:	str	r3, [sp, #56]	; 0x38
   125fc:	ldr	r3, [sp, #44]	; 0x2c
   12600:	ldr	r2, [sp, #56]	; 0x38
   12604:	and	r3, r3, r2
   12608:	uxtb	r3, r3
   1260c:	str	r3, [sp, #44]	; 0x2c
   12610:	ldr	r0, [sp, #64]	; 0x40
   12614:	bl	1f910 <fts_read@@Base>
   12618:	subs	r4, r0, #0
   1261c:	beq	12f80 <__assert_fail@plt+0x1428>
   12620:	ldrh	r7, [r4, #60]	; 0x3c
   12624:	ldr	r3, [r4, #28]
   12628:	cmp	r7, #4
   1262c:	str	r3, [sp, #60]	; 0x3c
   12630:	beq	12a88 <__assert_fail@plt+0xf30>
   12634:	cmp	r7, #6
   12638:	bne	12588 <__assert_fail@plt+0xa30>
   1263c:	ldr	r3, [sp, #52]	; 0x34
   12640:	str	r3, [sp, #56]	; 0x38
   12644:	ldrb	r3, [sl, #37]	; 0x25
   12648:	cmp	r3, #0
   1264c:	beq	12a28 <__assert_fail@plt+0xed0>
   12650:	ldrd	r2, [r4, #120]	; 0x78
   12654:	cmp	r2, #0
   12658:	strd	r2, [sp, #32]
   1265c:	sbcs	r3, r3, #0
   12660:	movlt	r2, #0
   12664:	movlt	r3, #0
   12668:	strdlt	r2, [sp, #32]
   1266c:	ldr	r3, [sl, #52]	; 0x34
   12670:	cmp	r3, #0
   12674:	bne	12a50 <__assert_fail@plt+0xef8>
   12678:	ldr	fp, [r4, #152]	; 0x98
   1267c:	ldr	r3, [r4, #156]	; 0x9c
   12680:	str	r3, [sp, #48]	; 0x30
   12684:	ldrd	r0, [sp, #32]
   12688:	ldr	r3, [sl, #84]	; 0x54
   1268c:	ldr	r6, [r4, #48]	; 0x30
   12690:	ldr	r2, [sp, #48]	; 0x30
   12694:	strd	r0, [sp, #104]	; 0x68
   12698:	mov	r0, #1
   1269c:	mov	r1, #0
   126a0:	cmp	r3, #0
   126a4:	strd	r0, [sp, #112]	; 0x70
   126a8:	str	fp, [sp, #120]	; 0x78
   126ac:	str	r2, [sp, #124]	; 0x7c
   126b0:	beq	12a6c <__assert_fail@plt+0xf14>
   126b4:	ldr	ip, [sl, #76]	; 0x4c
   126b8:	cmp	r6, ip
   126bc:	beq	12768 <__assert_fail@plt+0xc10>
   126c0:	bls	12da0 <__assert_fail@plt+0x1248>
   126c4:	cmp	r6, r3
   126c8:	bcc	12704 <__assert_fail@plt+0xbac>
   126cc:	mov	r1, #96	; 0x60
   126d0:	ldr	r0, [sl, #88]	; 0x58
   126d4:	umull	r4, r5, r6, r1
   126d8:	adds	r3, r5, #0
   126dc:	movne	r3, #1
   126e0:	cmp	r4, #0
   126e4:	blt	13498 <__assert_fail@plt+0x1940>
   126e8:	cmp	r3, #0
   126ec:	bne	13498 <__assert_fail@plt+0x1940>
   126f0:	mul	r1, r1, r6
   126f4:	bl	1becc <__assert_fail@plt+0xa374>
   126f8:	lsl	r3, r6, #1
   126fc:	str	r3, [sl, #84]	; 0x54
   12700:	str	r0, [sl, #88]	; 0x58
   12704:	ldr	r3, [sl, #76]	; 0x4c
   12708:	add	r2, r3, #1
   1270c:	cmp	r6, r2
   12710:	bcc	12768 <__assert_fail@plt+0xc10>
   12714:	ldr	r0, [sl, #88]	; 0x58
   12718:	mov	ip, #48	; 0x30
   1271c:	ldrd	r8, [sp, #32]
   12720:	mla	r3, ip, r3, r0
   12724:	mov	r1, #-2147483648	; 0x80000000
   12728:	mvn	r0, #0
   1272c:	mov	r4, #0
   12730:	mov	r5, #0
   12734:	add	r2, r2, #1
   12738:	cmp	r6, r2
   1273c:	strd	r4, [r3, #48]	; 0x30
   12740:	strd	r4, [r3, #56]	; 0x38
   12744:	str	r1, [r3, #64]	; 0x40
   12748:	str	r0, [r3, #68]	; 0x44
   1274c:	strd	r4, [r3, #72]	; 0x48
   12750:	strd	r4, [r3, #80]	; 0x50
   12754:	str	r1, [r3, #88]	; 0x58
   12758:	str	r0, [r3, #92]	; 0x5c
   1275c:	add	r3, r3, #48	; 0x30
   12760:	bcs	1272c <__assert_fail@plt+0xbd4>
   12764:	strd	r8, [sp, #32]
   12768:	ldrb	r3, [sl, #48]	; 0x30
   1276c:	str	r6, [sl, #76]	; 0x4c
   12770:	bic	ip, r7, #2
   12774:	cmp	r3, #0
   12778:	beq	12784 <__assert_fail@plt+0xc2c>
   1277c:	cmp	ip, #4
   12780:	beq	1281c <__assert_fail@plt+0xcc4>
   12784:	add	lr, r6, r6, lsl #1
   12788:	ldr	r4, [sl, #88]	; 0x58
   1278c:	lsl	lr, lr, #4
   12790:	mov	r2, #0
   12794:	mov	r3, #0
   12798:	ldrd	r8, [sp, #32]
   1279c:	strd	r2, [sp, #72]	; 0x48
   127a0:	ldrd	r2, [r4, lr]
   127a4:	add	r7, r4, lr
   127a8:	adds	r0, r8, r2
   127ac:	adcs	r1, r9, r3
   127b0:	movcs	r2, #1
   127b4:	movcs	r3, #0
   127b8:	strdcs	r2, [sp, #72]	; 0x48
   127bc:	ldrd	r2, [sp, #72]	; 0x48
   127c0:	orrs	r3, r2, r3
   127c4:	mov	r2, r0
   127c8:	mov	r3, r1
   127cc:	mvnne	r2, #0
   127d0:	add	r1, r4, lr
   127d4:	movne	r3, r2
   127d8:	str	r2, [r4, lr]
   127dc:	str	r3, [r1, #4]
   127e0:	ldr	r3, [r7, #8]
   127e4:	ldr	r2, [r7, #12]
   127e8:	ldr	r1, [r7, #16]
   127ec:	adds	r3, r3, #1
   127f0:	adc	r2, r2, #0
   127f4:	cmp	fp, r1
   127f8:	str	r3, [r7, #8]
   127fc:	str	r2, [r7, #12]
   12800:	bgt	12f70 <__assert_fail@plt+0x1418>
   12804:	blt	1281c <__assert_fail@plt+0xcc4>
   12808:	ldr	r3, [r7, #20]
   1280c:	ldr	r2, [sp, #48]	; 0x30
   12810:	sub	r3, r3, r2
   12814:	cmp	r3, #0
   12818:	blt	12f70 <__assert_fail@plt+0x1418>
   1281c:	ldrd	r2, [sl, #96]	; 0x60
   12820:	ldrd	r0, [sp, #32]
   12824:	mov	r4, #0
   12828:	mov	r5, #0
   1282c:	adds	r8, r0, r2
   12830:	adcs	r9, r1, r3
   12834:	movcs	r4, #1
   12838:	movcs	r5, #0
   1283c:	orrs	r3, r4, r5
   12840:	mov	r0, r8
   12844:	ldr	r3, [sl, #104]	; 0x68
   12848:	mvnne	r0, #0
   1284c:	mov	r2, r9
   12850:	ldr	r1, [sl, #108]	; 0x6c
   12854:	movne	r2, r0
   12858:	str	r0, [sl, #96]	; 0x60
   1285c:	ldr	r0, [sl, #112]	; 0x70
   12860:	adds	r3, r3, #1
   12864:	adc	r1, r1, #0
   12868:	cmp	fp, r0
   1286c:	str	r2, [sl, #100]	; 0x64
   12870:	str	r3, [sl, #104]	; 0x68
   12874:	str	r1, [sl, #108]	; 0x6c
   12878:	bgt	12ae8 <__assert_fail@plt+0xf90>
   1287c:	blt	12894 <__assert_fail@plt+0xd3c>
   12880:	ldr	r3, [sl, #116]	; 0x74
   12884:	ldr	r2, [sp, #48]	; 0x30
   12888:	sub	r3, r3, r2
   1288c:	cmp	r3, #0
   12890:	blt	12ae8 <__assert_fail@plt+0xf90>
   12894:	cmp	ip, #4
   12898:	beq	12944 <__assert_fail@plt+0xdec>
   1289c:	ldrb	r3, [sl, #36]	; 0x24
   128a0:	cmp	r3, #0
   128a4:	bne	12944 <__assert_fail@plt+0xdec>
   128a8:	cmp	r6, #0
   128ac:	bne	125fc <__assert_fail@plt+0xaa4>
   128b0:	ldrb	r3, [sl, #16]
   128b4:	cmp	r3, #0
   128b8:	ldrd	r2, [sl, #40]	; 0x28
   128bc:	ldrdne	r0, [sp, #112]	; 0x70
   128c0:	ldrdeq	r0, [sp, #104]	; 0x68
   128c4:	cmp	r2, #0
   128c8:	sbcs	ip, r3, #0
   128cc:	blt	12acc <__assert_fail@plt+0xf74>
   128d0:	cmp	r1, r3
   128d4:	cmpeq	r0, r2
   128d8:	movcs	r3, #1
   128dc:	movcc	r3, #0
   128e0:	cmp	r3, #0
   128e4:	beq	125fc <__assert_fail@plt+0xaa4>
   128e8:	ldr	r1, [sp, #60]	; 0x3c
   128ec:	ldr	r0, [sp, #80]	; 0x50
   128f0:	bl	13798 <__assert_fail@plt+0x1c40>
   128f4:	b	125fc <__assert_fail@plt+0xaa4>
   128f8:	ldr	r3, [sp, #48]	; 0x30
   128fc:	ldr	r2, [sp, #40]	; 0x28
   12900:	tst	r3, r2
   12904:	beq	135e4 <__assert_fail@plt+0x1a8c>
   12908:	ldr	r7, [pc, #796]	; 12c2c <__assert_fail@plt+0x10d4>
   1290c:	ldr	r4, [r7]
   12910:	cmp	r4, #0
   12914:	beq	12fc8 <__assert_fail@plt+0x1470>
   12918:	mov	r2, #5
   1291c:	ldr	r1, [pc, #600]	; 12b7c <__assert_fail@plt+0x1024>
   12920:	mov	r0, #0
   12924:	bl	11774 <dcgettext@plt>
   12928:	mov	r1, #0
   1292c:	mov	r3, r4
   12930:	mov	r2, r0
   12934:	mov	r0, r1
   12938:	bl	1187c <error@plt>
   1293c:	mov	r0, #1
   12940:	bl	13904 <__assert_fail@plt+0x1dac>
   12944:	ldr	r3, [pc, #736]	; 12c2c <__assert_fail@plt+0x10d4>
   12948:	ldr	r3, [r3]
   1294c:	cmp	r6, r3
   12950:	bls	128b0 <__assert_fail@plt+0xd58>
   12954:	b	128a8 <__assert_fail@plt+0xd50>
   12958:	mov	r2, #5
   1295c:	ldr	r1, [pc, #540]	; 12b80 <__assert_fail@plt+0x1028>
   12960:	bl	11774 <dcgettext@plt>
   12964:	mov	r1, r4
   12968:	mov	r6, r0
   1296c:	mov	r0, #4
   12970:	bl	1b62c <__assert_fail@plt+0x9ad4>
   12974:	mov	r2, r6
   12978:	mov	r1, r5
   1297c:	mov	r3, r0
   12980:	mov	r0, r5
   12984:	bl	1187c <error@plt>
   12988:	ldrb	r3, [r4]
   1298c:	cmp	r3, #0
   12990:	strne	r5, [sp, #68]	; 0x44
   12994:	bne	1250c <__assert_fail@plt+0x9b4>
   12998:	ldr	r0, [sp, #40]	; 0x28
   1299c:	bl	14128 <__assert_fail@plt+0x25d0>
   129a0:	ldr	r2, [sp, #28]
   129a4:	mov	r1, #3
   129a8:	mov	r5, r0
   129ac:	mov	r0, #0
   129b0:	bl	1b708 <__assert_fail@plt+0x9bb0>
   129b4:	mov	r2, #5
   129b8:	ldr	r1, [pc, #452]	; 12b84 <__assert_fail@plt+0x102c>
   129bc:	mov	r4, r0
   129c0:	mov	r0, #0
   129c4:	bl	11774 <dcgettext@plt>
   129c8:	mov	r1, #0
   129cc:	str	r5, [sp]
   129d0:	mov	r3, r4
   129d4:	ldr	r2, [pc, #428]	; 12b88 <__assert_fail@plt+0x1030>
   129d8:	str	r1, [sp, #68]	; 0x44
   129dc:	str	r0, [sp, #4]
   129e0:	mov	r0, r1
   129e4:	bl	1187c <error@plt>
   129e8:	b	1250c <__assert_fail@plt+0x9b4>
   129ec:	ldrb	r3, [r4]
   129f0:	cmp	r3, #0
   129f4:	bne	12560 <__assert_fail@plt+0xa08>
   129f8:	ldr	r4, [sp, #28]
   129fc:	mov	r2, #5
   12a00:	ldr	r1, [pc, #380]	; 12b84 <__assert_fail@plt+0x102c>
   12a04:	mov	r0, r4
   12a08:	bl	11774 <dcgettext@plt>
   12a0c:	ldr	r2, [pc, #452]	; 12bd8 <__assert_fail@plt+0x1080>
   12a10:	mov	r1, r4
   12a14:	mov	r3, r0
   12a18:	mov	r0, r4
   12a1c:	bl	1187c <error@plt>
   12a20:	str	r4, [sp, #68]	; 0x44
   12a24:	b	1250c <__assert_fail@plt+0x9b4>
   12a28:	ldr	r2, [r4, #140]	; 0x8c
   12a2c:	ldr	r3, [r4, #136]	; 0x88
   12a30:	lsl	r2, r2, #9
   12a34:	orr	r2, r2, r3, lsr #23
   12a38:	lsl	r3, r3, #9
   12a3c:	str	r3, [sp, #32]
   12a40:	ldr	r3, [sl, #52]	; 0x34
   12a44:	str	r2, [sp, #36]	; 0x24
   12a48:	cmp	r3, #0
   12a4c:	beq	12678 <__assert_fail@plt+0xb20>
   12a50:	cmp	r3, #2
   12a54:	ldreq	r3, [r4, #148]	; 0x94
   12a58:	ldrne	r3, [r4, #164]	; 0xa4
   12a5c:	ldreq	fp, [r4, #144]	; 0x90
   12a60:	ldrne	fp, [r4, #160]	; 0xa0
   12a64:	str	r3, [sp, #48]	; 0x30
   12a68:	b	12684 <__assert_fail@plt+0xb2c>
   12a6c:	add	r3, r6, #10
   12a70:	mov	r0, r3
   12a74:	mov	r1, #48	; 0x30
   12a78:	str	r3, [sl, #84]	; 0x54
   12a7c:	bl	1c048 <__assert_fail@plt+0xa4f0>
   12a80:	str	r0, [sl, #88]	; 0x58
   12a84:	b	12768 <__assert_fail@plt+0xc10>
   12a88:	mov	r2, #5
   12a8c:	ldr	r1, [pc, #248]	; 12b8c <__assert_fail@plt+0x1034>
   12a90:	mov	r0, #0
   12a94:	ldr	r5, [r4, #32]
   12a98:	bl	11774 <dcgettext@plt>
   12a9c:	ldr	r1, [sp, #60]	; 0x3c
   12aa0:	mov	r6, r0
   12aa4:	mov	r0, r7
   12aa8:	bl	1b62c <__assert_fail@plt+0x9ad4>
   12aac:	mov	r2, r6
   12ab0:	mov	r1, r5
   12ab4:	mov	r3, r0
   12ab8:	mov	r0, #0
   12abc:	bl	1187c <error@plt>
   12ac0:	mov	r3, #0
   12ac4:	str	r3, [sp, #56]	; 0x38
   12ac8:	b	12644 <__assert_fail@plt+0xaec>
   12acc:	rsbs	r2, r2, #0
   12ad0:	rsc	r3, r3, #0
   12ad4:	cmp	r3, r1
   12ad8:	cmpeq	r2, r0
   12adc:	movcs	r3, #1
   12ae0:	movcc	r3, #0
   12ae4:	b	128e0 <__assert_fail@plt+0xd88>
   12ae8:	ldr	r3, [sp, #48]	; 0x30
   12aec:	str	fp, [sl, #112]	; 0x70
   12af0:	str	r3, [sl, #116]	; 0x74
   12af4:	b	12894 <__assert_fail@plt+0xd3c>
   12af8:	andeq	r4, r3, r8, lsl #30
   12afc:	andeq	r3, r2, r4, lsl #2
   12b00:	andeq	r3, r2, r8, lsr #17
   12b04:	andeq	r3, r2, r8, lsl #2
   12b08:	andeq	r3, r2, ip, asr #32
   12b0c:	muleq	r1, r0, r1
   12b10:			; <UNDEFINED> instruction: 0x00021fb0
   12b14:	andeq	r5, r3, r0, lsr r2
   12b18:	andeq	r3, r2, ip, lsr #2
   12b1c:	andeq	r0, r0, sl, lsl #2
   12b20:	andeq	r5, r3, r8, lsr #4
   12b24:	andeq	r3, r2, ip, lsl r1
   12b28:	andeq	r4, r1, r4, asr #28
   12b2c:	andeq	r5, r3, r8, lsr r2
   12b30:	andeq	r3, r2, ip, lsr #3
   12b34:			; <UNDEFINED> instruction: 0x000231b8
   12b38:			; <UNDEFINED> instruction: 0x000351b8
   12b3c:	andeq	r5, r3, r4, lsr #4
   12b40:	muleq	r2, ip, r1
   12b44:	andeq	r3, r2, r8, asr #3
   12b48:	andeq	r3, r2, r8, asr #32
   12b4c:	andeq	r2, r2, r4, ror #3
   12b50:	muleq	r2, r0, r1
   12b54:	andeq	r2, r2, r4, ror #2
   12b58:	muleq	r2, r8, r1
   12b5c:	andeq	r3, r2, r0, ror #2
   12b60:	andeq	r5, r3, r8, asr r2
   12b64:	andeq	r3, r2, ip, ror #2
   12b68:	andeq	r3, r2, r4, asr #2
   12b6c:	andeq	r5, r3, r0, lsl r2
   12b70:	andeq	r3, r2, r8, asr r3
   12b74:	andeq	r3, r2, ip, asr r3
   12b78:	andeq	r5, r3, r4, ror r2
   12b7c:	andeq	r3, r2, r0, asr #4
   12b80:	andeq	r3, r2, r0, asr #7
   12b84:	muleq	r2, r8, r4
   12b88:			; <UNDEFINED> instruction: 0x000234b8
   12b8c:	andeq	r3, r2, r4, lsl r4
   12b90:	andeq	r3, r2, ip, ror r3
   12b94:	andeq	r5, r3, r0, lsr #4
   12b98:	andeq	r4, r3, r8, lsl #30
   12b9c:	andeq	r2, r2, r0, lsr #3
   12ba0:	andeq	r0, r0, r8, lsr r4
   12ba4:	muleq	r2, r8, r3
   12ba8:	andeq	r3, r2, r8, lsl #4
   12bac:	andeq	r0, r0, pc, lsr #4
   12bb0:	muleq	r2, r0, r4
   12bb4:	muleq	r3, r0, r2
   12bb8:	strdeq	r3, [r2], -r8
   12bbc:			; <UNDEFINED> instruction: 0x000351bc
   12bc0:	andeq	r1, r2, r8, ror pc
   12bc4:	ldrdeq	r3, [r2], -r0
   12bc8:	andeq	r3, r2, r4, lsl #6
   12bcc:	andeq	r3, r2, r8, ror #8
   12bd0:	andeq	r3, r2, r0, lsl #8
   12bd4:	andeq	r3, r2, ip, lsr r4
   12bd8:	andeq	r3, r2, r4, lsr #15
   12bdc:	andeq	r3, r2, r4, asr #9
   12be0:	andeq	r3, r2, r4, ror r2
   12be4:			; <UNDEFINED> instruction: 0x000232bc
   12be8:	andeq	r3, r2, r8, asr #5
   12bec:	andeq	r2, r2, ip, ror r1
   12bf0:	ldrdeq	r3, [r2], -ip
   12bf4:	strdeq	r3, [r2], -r4
   12bf8:	andeq	r3, r2, r0, lsl r3
   12bfc:	andeq	r5, r3, r8, lsl r2
   12c00:	andeq	r3, r2, r4, lsr #6
   12c04:	andeq	r3, r2, r8, ror sl
   12c08:	andeq	r0, r0, sp, ror r2
   12c0c:	andeq	r3, r2, r0, asr r4
   12c10:	andeq	r3, r2, ip, ror r4
   12c14:	andeq	r3, r2, r0, ror #6
   12c18:	ldrdeq	r3, [r2], -ip
   12c1c:	andeq	r2, r2, r8, lsr #3
   12c20:	andeq	r0, r0, lr, lsl #4
   12c24:	andeq	r3, r2, r0, lsr r4
   12c28:	andeq	r3, r2, ip, lsl #7
   12c2c:			; <UNDEFINED> instruction: 0x000351b4
   12c30:			; <UNDEFINED> instruction: 0x00021fb0
   12c34:	ldr	r3, [sp, #100]	; 0x64
   12c38:	cmp	r3, #3
   12c3c:	beq	13498 <__assert_fail@plt+0x1940>
   12c40:	cmp	r3, #4
   12c44:	bne	12d0c <__assert_fail@plt+0x11b4>
   12c48:	bl	11984 <__errno_location@plt>
   12c4c:	mov	r2, #5
   12c50:	ldr	r1, [pc, #-200]	; 12b90 <__assert_fail@plt+0x1038>
   12c54:	str	r4, [sp, #68]	; 0x44
   12c58:	ldr	r5, [r0]
   12c5c:	mov	r0, r4
   12c60:	bl	11774 <dcgettext@plt>
   12c64:	ldr	r2, [sp, #28]
   12c68:	mov	r1, #3
   12c6c:	mov	r6, r0
   12c70:	mov	r0, r4
   12c74:	bl	1b708 <__assert_fail@plt+0x9bb0>
   12c78:	mov	r2, r6
   12c7c:	mov	r1, r5
   12c80:	mov	r3, r0
   12c84:	mov	r0, r4
   12c88:	bl	1187c <error@plt>
   12c8c:	ldr	r0, [sp, #40]	; 0x28
   12c90:	bl	14148 <__assert_fail@plt+0x25f0>
   12c94:	ldr	r0, [sl, #64]	; 0x40
   12c98:	bl	1446c <__assert_fail@plt+0x2914>
   12c9c:	ldr	r0, [sl, #80]	; 0x50
   12ca0:	cmp	r0, #0
   12ca4:	beq	12cac <__assert_fail@plt+0x1154>
   12ca8:	bl	1446c <__assert_fail@plt+0x2914>
   12cac:	ldr	r3, [sp, #28]
   12cb0:	cmp	r3, #0
   12cb4:	beq	12cd8 <__assert_fail@plt+0x1180>
   12cb8:	ldr	r3, [pc, #-300]	; 12b94 <__assert_fail@plt+0x103c>
   12cbc:	ldr	r0, [r3]
   12cc0:	ldr	r3, [r0]
   12cc4:	tst	r3, #32
   12cc8:	beq	131bc <__assert_fail@plt+0x1664>
   12ccc:	ldr	r3, [sp, #68]	; 0x44
   12cd0:	cmp	r3, #0
   12cd4:	bne	13538 <__assert_fail@plt+0x19e0>
   12cd8:	ldrb	r3, [sl, #38]	; 0x26
   12cdc:	cmp	r3, #0
   12ce0:	bne	13038 <__assert_fail@plt+0x14e0>
   12ce4:	ldr	r3, [pc, #-340]	; 12b98 <__assert_fail@plt+0x1040>
   12ce8:	ldr	r1, [sp, #68]	; 0x44
   12cec:	ldr	r2, [sp, #244]	; 0xf4
   12cf0:	ldr	r3, [r3]
   12cf4:	eor	r0, r1, #1
   12cf8:	cmp	r2, r3
   12cfc:	uxtb	r0, r0
   12d00:	bne	13534 <__assert_fail@plt+0x19dc>
   12d04:	add	sp, sp, #252	; 0xfc
   12d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d0c:	cmp	r3, #2
   12d10:	beq	12c8c <__assert_fail@plt+0x1134>
   12d14:	ldr	r3, [pc, #-384]	; 12b9c <__assert_fail@plt+0x1044>
   12d18:	ldr	r2, [pc, #-384]	; 12ba0 <__assert_fail@plt+0x1048>
   12d1c:	ldr	r1, [pc, #-252]	; 12c28 <__assert_fail@plt+0x10d0>
   12d20:	ldr	r0, [pc, #-388]	; 12ba4 <__assert_fail@plt+0x104c>
   12d24:	bl	11b58 <__assert_fail@plt>
   12d28:	ldrb	r3, [sl, #39]	; 0x27
   12d2c:	cmp	r3, #0
   12d30:	bne	12d7c <__assert_fail@plt+0x1224>
   12d34:	ldrb	r3, [sl, #60]	; 0x3c
   12d38:	cmp	r3, #0
   12d3c:	bne	12d5c <__assert_fail@plt+0x1204>
   12d40:	ldr	r3, [r4, #88]	; 0x58
   12d44:	and	r3, r3, #61440	; 0xf000
   12d48:	cmp	r3, #16384	; 0x4000
   12d4c:	beq	12d7c <__assert_fail@plt+0x1224>
   12d50:	ldr	r3, [r4, #92]	; 0x5c
   12d54:	cmp	r3, #1
   12d58:	bls	12d7c <__assert_fail@plt+0x1224>
   12d5c:	ldrd	r2, [r4, #168]	; 0xa8
   12d60:	ldr	r0, [sl, #64]	; 0x40
   12d64:	strd	r2, [sp]
   12d68:	ldrd	r2, [r4, #72]	; 0x48
   12d6c:	bl	14498 <__assert_fail@plt+0x2940>
   12d70:	cmp	r0, #0
   12d74:	blt	13498 <__assert_fail@plt+0x1940>
   12d78:	beq	125ec <__assert_fail@plt+0xa94>
   12d7c:	cmp	r7, #2
   12d80:	beq	132d8 <__assert_fail@plt+0x1780>
   12d84:	cmp	r7, #7
   12d88:	beq	132ac <__assert_fail@plt+0x1754>
   12d8c:	ldr	r3, [sp, #52]	; 0x34
   12d90:	cmp	r7, #1
   12d94:	str	r3, [sp, #56]	; 0x38
   12d98:	bne	12644 <__assert_fail@plt+0xaec>
   12d9c:	b	125fc <__assert_fail@plt+0xaa4>
   12da0:	sub	r3, ip, #1
   12da4:	cmp	r6, r3
   12da8:	bne	13520 <__assert_fail@plt+0x19c8>
   12dac:	mov	r2, #48	; 0x30
   12db0:	ldr	r3, [sl, #88]	; 0x58
   12db4:	mul	ip, r2, ip
   12db8:	mov	r0, #0
   12dbc:	mov	r1, #0
   12dc0:	ldrd	r8, [sp, #32]
   12dc4:	strd	r0, [sp, #72]	; 0x48
   12dc8:	ldrd	r0, [r3, ip]
   12dcc:	add	r2, r3, ip
   12dd0:	adds	r4, r8, r0
   12dd4:	adcs	r5, r9, r1
   12dd8:	movcs	r0, #1
   12ddc:	movcs	r1, #0
   12de0:	ldr	lr, [r2, #8]
   12de4:	strdcs	r0, [sp, #72]	; 0x48
   12de8:	ldrd	r0, [sp, #72]	; 0x48
   12dec:	orrs	r1, r0, r1
   12df0:	ldr	r1, [r2, #12]
   12df4:	mvnne	r4, #0
   12df8:	mvnne	r5, #0
   12dfc:	adds	lr, lr, #1
   12e00:	adc	r1, r1, #0
   12e04:	str	r1, [sp, #72]	; 0x48
   12e08:	strd	r4, [sp, #104]	; 0x68
   12e0c:	str	r1, [sp, #116]	; 0x74
   12e10:	str	lr, [sp, #112]	; 0x70
   12e14:	ldr	r1, [r2, #16]
   12e18:	cmp	fp, r1
   12e1c:	blt	13190 <__assert_fail@plt+0x1638>
   12e20:	bgt	12e38 <__assert_fail@plt+0x12e0>
   12e24:	ldr	r1, [r2, #20]
   12e28:	ldr	r0, [sp, #48]	; 0x30
   12e2c:	sub	r1, r0, r1
   12e30:	cmp	r1, #0
   12e34:	blt	13190 <__assert_fail@plt+0x1638>
   12e38:	ldrb	r1, [sl, #48]	; 0x30
   12e3c:	cmp	r1, #0
   12e40:	beq	13098 <__assert_fail@plt+0x1540>
   12e44:	mov	r1, #48	; 0x30
   12e48:	ldrd	r4, [r3, ip]
   12e4c:	mla	r3, r1, r6, r3
   12e50:	mov	r0, #0
   12e54:	mov	r1, #0
   12e58:	ldrd	r8, [r3, #24]
   12e5c:	strd	r0, [sp, #72]	; 0x48
   12e60:	mov	r0, r4
   12e64:	adds	r4, r8, r4
   12e68:	mov	r1, r5
   12e6c:	adcs	r5, r9, r5
   12e70:	movcs	r0, #1
   12e74:	movcs	r1, #0
   12e78:	ldr	ip, [r3, #32]
   12e7c:	strdcs	r0, [sp, #72]	; 0x48
   12e80:	ldrd	r0, [sp, #72]	; 0x48
   12e84:	ldr	lr, [r3, #36]	; 0x24
   12e88:	orrs	r1, r0, r1
   12e8c:	ldr	r1, [r2, #8]
   12e90:	ldr	r0, [r2, #12]
   12e94:	mvnne	r4, #0
   12e98:	mvnne	r5, #0
   12e9c:	adds	ip, ip, r1
   12ea0:	adc	r1, lr, r0
   12ea4:	str	r1, [sp, #88]	; 0x58
   12ea8:	strd	r4, [r3, #24]
   12eac:	str	r1, [r3, #36]	; 0x24
   12eb0:	str	ip, [r3, #32]
   12eb4:	ldr	lr, [r3, #40]	; 0x28
   12eb8:	ldr	r1, [r2, #16]
   12ebc:	cmp	lr, r1
   12ec0:	blt	131a4 <__assert_fail@plt+0x164c>
   12ec4:	bgt	12edc <__assert_fail@plt+0x1384>
   12ec8:	ldr	r1, [r3, #44]	; 0x2c
   12ecc:	ldr	r0, [r2, #20]
   12ed0:	sub	r1, r1, r0
   12ed4:	cmp	r1, #0
   12ed8:	blt	131a4 <__assert_fail@plt+0x164c>
   12edc:	ldrd	r8, [r2, #24]
   12ee0:	mov	r0, #0
   12ee4:	mov	r1, #0
   12ee8:	strd	r0, [sp, #72]	; 0x48
   12eec:	adds	r0, r8, r4
   12ef0:	adcs	r1, r9, r5
   12ef4:	movcs	r4, #1
   12ef8:	movcs	r5, #0
   12efc:	strdcs	r4, [sp, #72]	; 0x48
   12f00:	ldrd	r4, [sp, #72]	; 0x48
   12f04:	orrs	r4, r4, r5
   12f08:	mov	r4, r0
   12f0c:	mvnne	r4, #0
   12f10:	mov	r0, r1
   12f14:	movne	r0, r4
   12f18:	str	r0, [r3, #28]
   12f1c:	ldrd	r0, [r2, #32]
   12f20:	str	r4, [r3, #24]
   12f24:	adds	ip, r0, ip
   12f28:	ldr	r0, [sp, #88]	; 0x58
   12f2c:	str	ip, [r3, #32]
   12f30:	adc	r1, r1, r0
   12f34:	str	r1, [r3, #36]	; 0x24
   12f38:	ldr	r1, [r2, #40]	; 0x28
   12f3c:	cmp	lr, r1
   12f40:	blt	12f5c <__assert_fail@plt+0x1404>
   12f44:	bgt	12768 <__assert_fail@plt+0xc10>
   12f48:	ldr	r1, [r3, #44]	; 0x2c
   12f4c:	ldr	r0, [r2, #44]	; 0x2c
   12f50:	sub	r1, r1, r0
   12f54:	cmp	r1, #0
   12f58:	bge	12768 <__assert_fail@plt+0xc10>
   12f5c:	add	r2, r2, #40	; 0x28
   12f60:	add	r3, r3, #40	; 0x28
   12f64:	ldm	r2, {r0, r1}
   12f68:	stm	r3, {r0, r1}
   12f6c:	b	12768 <__assert_fail@plt+0xc10>
   12f70:	ldr	r3, [sp, #48]	; 0x30
   12f74:	str	fp, [r7, #16]
   12f78:	str	r3, [r7, #20]
   12f7c:	b	1281c <__assert_fail@plt+0xcc4>
   12f80:	bl	11984 <__errno_location@plt>
   12f84:	ldr	r9, [sp, #80]	; 0x50
   12f88:	ldr	r6, [r0]
   12f8c:	mov	r5, r0
   12f90:	cmp	r6, #0
   12f94:	bne	131f8 <__assert_fail@plt+0x16a0>
   12f98:	mov	r4, #0
   12f9c:	ldr	r0, [sp, #64]	; 0x40
   12fa0:	str	r4, [sl, #76]	; 0x4c
   12fa4:	bl	1f790 <fts_close@@Base>
   12fa8:	cmp	r0, r4
   12fac:	bne	131cc <__assert_fail@plt+0x1674>
   12fb0:	ldr	fp, [sp, #68]	; 0x44
   12fb4:	ldr	r3, [sp, #44]	; 0x2c
   12fb8:	and	fp, fp, r3
   12fbc:	uxtb	r3, fp
   12fc0:	str	r3, [sp, #68]	; 0x44
   12fc4:	b	1250c <__assert_fail@plt+0x9b4>
   12fc8:	mov	r2, #5
   12fcc:	ldr	r1, [pc, #-1068]	; 12ba8 <__assert_fail@plt+0x1050>
   12fd0:	mov	r0, r4
   12fd4:	bl	11774 <dcgettext@plt>
   12fd8:	mov	r1, r4
   12fdc:	mov	r2, r0
   12fe0:	mov	r0, r4
   12fe4:	bl	1187c <error@plt>
   12fe8:	ldr	r4, [r7]
   12fec:	cmp	r4, #0
   12ff0:	bne	12918 <__assert_fail@plt+0xdc0>
   12ff4:	mov	r3, #0
   12ff8:	str	r3, [r7]
   12ffc:	b	12400 <__assert_fail@plt+0x8a8>
   13000:	ldr	r5, [sp, #64]	; 0x40
   13004:	mov	r2, #4
   13008:	mov	r1, r4
   1300c:	mov	r0, r5
   13010:	bl	20058 <fts_set@@Base>
   13014:	mov	r0, r5
   13018:	bl	1f910 <fts_read@@Base>
   1301c:	cmp	r4, r0
   13020:	beq	125f4 <__assert_fail@plt+0xa9c>
   13024:	ldr	r3, [pc, #-1040]	; 12c1c <__assert_fail@plt+0x10c4>
   13028:	ldr	r2, [pc, #-1156]	; 12bac <__assert_fail@plt+0x1054>
   1302c:	ldr	r1, [pc, #-1036]	; 12c28 <__assert_fail@plt+0x10d0>
   13030:	ldr	r0, [pc, #-1044]	; 12c24 <__assert_fail@plt+0x10cc>
   13034:	bl	11b58 <__assert_fail@plt>
   13038:	mov	r2, #5
   1303c:	ldr	r1, [pc, #-1172]	; 12bb0 <__assert_fail@plt+0x1058>
   13040:	mov	r0, #0
   13044:	bl	11774 <dcgettext@plt>
   13048:	mov	r1, r0
   1304c:	ldr	r0, [pc, #-1184]	; 12bb4 <__assert_fail@plt+0x105c>
   13050:	bl	13798 <__assert_fail@plt+0x1c40>
   13054:	b	12ce4 <__assert_fail@plt+0x118c>
   13058:	cmp	r3, r6
   1305c:	addlt	r0, r5, r3, lsl #2
   13060:	addge	r0, sp, #236	; 0xec
   13064:	bl	14030 <__assert_fail@plt+0x24d8>
   13068:	ldr	r2, [r4]
   1306c:	ldr	r3, [sp, #32]
   13070:	add	r2, r2, #1
   13074:	sub	r3, r3, #2
   13078:	clz	r3, r3
   1307c:	lsr	r3, r3, #5
   13080:	cmp	r2, r6
   13084:	movge	r6, r3
   13088:	orrlt	r6, r3, #1
   1308c:	strb	r6, [sl, #60]	; 0x3c
   13090:	str	r0, [sp, #40]	; 0x28
   13094:	b	124b4 <__assert_fail@plt+0x95c>
   13098:	ldrd	r8, [r2, #24]
   1309c:	mov	r0, #0
   130a0:	mov	r1, #0
   130a4:	strd	r0, [sp, #88]	; 0x58
   130a8:	adds	r0, r4, r8
   130ac:	adcs	r1, r5, r9
   130b0:	movcs	r4, #1
   130b4:	movcs	r5, #0
   130b8:	strdcs	r4, [sp, #88]	; 0x58
   130bc:	ldrd	r4, [sp, #88]	; 0x58
   130c0:	orrs	r4, r4, r5
   130c4:	mov	r5, r0
   130c8:	mov	r0, r1
   130cc:	ldr	r1, [r2, #32]
   130d0:	mvnne	r5, #0
   130d4:	movne	r0, r5
   130d8:	str	r5, [sp, #104]	; 0x68
   130dc:	adds	r1, r1, lr
   130e0:	ldr	r5, [r2, #36]	; 0x24
   130e4:	ldr	lr, [sp, #72]	; 0x48
   130e8:	str	r0, [sp, #108]	; 0x6c
   130ec:	adc	r4, r5, lr
   130f0:	str	r4, [sp, #116]	; 0x74
   130f4:	str	r1, [sp, #112]	; 0x70
   130f8:	ldr	r0, [sp, #120]	; 0x78
   130fc:	ldr	r1, [r2, #40]	; 0x28
   13100:	cmp	r0, r1
   13104:	blt	13120 <__assert_fail@plt+0x15c8>
   13108:	bgt	12e44 <__assert_fail@plt+0x12ec>
   1310c:	ldr	r1, [sp, #124]	; 0x7c
   13110:	ldr	r0, [r2, #44]	; 0x2c
   13114:	sub	r1, r1, r0
   13118:	cmp	r1, #0
   1311c:	bge	12e44 <__assert_fail@plt+0x12ec>
   13120:	add	r1, r2, #40	; 0x28
   13124:	add	lr, sp, #120	; 0x78
   13128:	ldm	r1, {r0, r1}
   1312c:	stm	lr, {r0, r1}
   13130:	b	12e44 <__assert_fail@plt+0x12ec>
   13134:	ldr	r7, [pc, #-1412]	; 12bb8 <__assert_fail@plt+0x1060>
   13138:	str	r7, [sl, #56]	; 0x38
   1313c:	ldr	r3, [pc, #-1416]	; 12bbc <__assert_fail@plt+0x1064>
   13140:	ldr	r4, [pc, #-1416]	; 12bc0 <__assert_fail@plt+0x1068>
   13144:	mov	r0, #4
   13148:	ldr	r3, [r3]
   1314c:	mov	r1, r7
   13150:	str	r3, [sp, #4]
   13154:	str	r0, [sp]
   13158:	add	r3, r4, #524	; 0x20c
   1315c:	add	r2, r4, #536	; 0x218
   13160:	ldr	r0, [pc, #-1444]	; 12bc4 <__assert_fail@plt+0x106c>
   13164:	bl	13f7c <__assert_fail@plt+0x2424>
   13168:	add	r0, r4, r0, lsl #2
   1316c:	ldr	r3, [r0, #524]	; 0x20c
   13170:	cmp	r3, #1
   13174:	beq	13418 <__assert_fail@plt+0x18c0>
   13178:	cmp	r3, #0
   1317c:	beq	1340c <__assert_fail@plt+0x18b4>
   13180:	cmp	r3, #2
   13184:	ldreq	r3, [pc, #-1476]	; 12bc8 <__assert_fail@plt+0x1070>
   13188:	streq	r3, [sl, #20]
   1318c:	b	12454 <__assert_fail@plt+0x8fc>
   13190:	add	r1, r2, #16
   13194:	add	r8, sp, #120	; 0x78
   13198:	ldm	r1, {r0, r1}
   1319c:	stm	r8, {r0, r1}
   131a0:	b	12e38 <__assert_fail@plt+0x12e0>
   131a4:	add	r1, r2, #16
   131a8:	add	lr, r3, #40	; 0x28
   131ac:	ldm	r1, {r0, r1}
   131b0:	stm	lr, {r0, r1}
   131b4:	mov	lr, r0
   131b8:	b	12edc <__assert_fail@plt+0x1384>
   131bc:	bl	1dd58 <__assert_fail@plt+0xc200>
   131c0:	cmp	r0, #0
   131c4:	bne	12ccc <__assert_fail@plt+0x1174>
   131c8:	b	12cd8 <__assert_fail@plt+0x1180>
   131cc:	mov	r2, #5
   131d0:	ldr	r1, [pc, #-1548]	; 12bcc <__assert_fail@plt+0x1074>
   131d4:	mov	r0, r4
   131d8:	ldr	r5, [r5]
   131dc:	bl	11774 <dcgettext@plt>
   131e0:	mov	r1, r5
   131e4:	mov	r2, r0
   131e8:	mov	r0, r4
   131ec:	bl	1187c <error@plt>
   131f0:	str	r4, [sp, #44]	; 0x2c
   131f4:	b	12fb0 <__assert_fail@plt+0x1458>
   131f8:	mov	r2, #5
   131fc:	ldr	r1, [pc, #-1588]	; 12bd0 <__assert_fail@plt+0x1078>
   13200:	mov	r0, r4
   13204:	bl	11774 <dcgettext@plt>
   13208:	ldr	r3, [sp, #64]	; 0x40
   1320c:	mov	r1, #3
   13210:	ldr	r2, [r3, #24]
   13214:	mov	r7, r0
   13218:	mov	r0, r4
   1321c:	bl	1b708 <__assert_fail@plt+0x9bb0>
   13220:	mov	r2, r7
   13224:	mov	r1, r6
   13228:	mov	r3, r0
   1322c:	mov	r0, r4
   13230:	bl	1187c <error@plt>
   13234:	str	r4, [sp, #44]	; 0x2c
   13238:	b	12f98 <__assert_fail@plt+0x1440>
   1323c:	mov	r2, #5
   13240:	ldr	r1, [pc, #-1652]	; 12bd4 <__assert_fail@plt+0x107c>
   13244:	mov	r0, #0
   13248:	ldr	r4, [r4, #32]
   1324c:	bl	11774 <dcgettext@plt>
   13250:	ldr	r1, [sp, #60]	; 0x3c
   13254:	mov	r5, r0
   13258:	mov	r0, #4
   1325c:	bl	1b62c <__assert_fail@plt+0x9ad4>
   13260:	mov	r2, r5
   13264:	mov	r1, r4
   13268:	mov	r3, r0
   1326c:	mov	r0, #0
   13270:	bl	1187c <error@plt>
   13274:	mov	r3, #0
   13278:	str	r3, [sp, #56]	; 0x38
   1327c:	b	125fc <__assert_fail@plt+0xaa4>
   13280:	ldr	r5, [sp, #64]	; 0x40
   13284:	mov	r2, #1
   13288:	mov	r1, r4
   1328c:	mov	r0, r5
   13290:	bl	20058 <fts_set@@Base>
   13294:	mov	r0, r5
   13298:	bl	1f910 <fts_read@@Base>
   1329c:	cmp	r4, r0
   132a0:	bne	135d0 <__assert_fail@plt+0x1a78>
   132a4:	ldrh	r7, [r4, #60]	; 0x3c
   132a8:	b	125a4 <__assert_fail@plt+0xa4c>
   132ac:	ldr	r2, [sp, #60]	; 0x3c
   132b0:	mov	r1, #3
   132b4:	mov	r0, #0
   132b8:	ldr	r5, [r4, #32]
   132bc:	bl	1b708 <__assert_fail@plt+0x9bb0>
   132c0:	mov	r1, r5
   132c4:	ldr	r2, [pc, #-1780]	; 12bd8 <__assert_fail@plt+0x1080>
   132c8:	mov	r3, r0
   132cc:	mov	r0, #0
   132d0:	bl	1187c <error@plt>
   132d4:	b	12644 <__assert_fail@plt+0xaec>
   132d8:	mov	r1, r4
   132dc:	ldr	r0, [sp, #64]	; 0x40
   132e0:	bl	1c140 <__assert_fail@plt+0xa5e8>
   132e4:	cmp	r0, #0
   132e8:	beq	125f4 <__assert_fail@plt+0xa9c>
   132ec:	ldr	r6, [sl, #80]	; 0x50
   132f0:	ldr	r5, [r4]
   132f4:	cmp	r6, #0
   132f8:	bne	13320 <__assert_fail@plt+0x17c8>
   132fc:	b	13424 <__assert_fail@plt+0x18cc>
   13300:	ldrd	r2, [r4, #168]	; 0xa8
   13304:	ldr	r0, [sl, #80]	; 0x50
   13308:	strd	r2, [sp]
   1330c:	ldrd	r2, [r4, #72]	; 0x48
   13310:	bl	144ec <__assert_fail@plt+0x2994>
   13314:	cmp	r0, #0
   13318:	bgt	125f4 <__assert_fail@plt+0xa9c>
   1331c:	ldr	r4, [r4, #4]
   13320:	subs	r3, r5, r4
   13324:	movne	r3, #1
   13328:	cmp	r4, #0
   1332c:	moveq	r3, #0
   13330:	cmp	r3, #0
   13334:	bne	13300 <__assert_fail@plt+0x17a8>
   13338:	mov	r0, r3
   1333c:	mov	r2, #5
   13340:	ldr	r1, [pc, #-1900]	; 12bdc <__assert_fail@plt+0x1084>
   13344:	mov	r5, r3
   13348:	str	r3, [sp, #56]	; 0x38
   1334c:	bl	11774 <dcgettext@plt>
   13350:	ldr	r2, [sp, #60]	; 0x3c
   13354:	mov	r1, #3
   13358:	mov	r4, r0
   1335c:	mov	r0, r5
   13360:	bl	1b708 <__assert_fail@plt+0x9bb0>
   13364:	mov	r2, r4
   13368:	mov	r1, r5
   1336c:	mov	r3, r0
   13370:	mov	r0, r5
   13374:	bl	1187c <error@plt>
   13378:	b	125fc <__assert_fail@plt+0xaa4>
   1337c:	mov	r2, #5
   13380:	ldr	r1, [pc, #-1960]	; 12be0 <__assert_fail@plt+0x1088>
   13384:	mov	r0, #0
   13388:	bl	11774 <dcgettext@plt>
   1338c:	mov	r1, #0
   13390:	mov	r2, r0
   13394:	mov	r0, r1
   13398:	bl	1187c <error@plt>
   1339c:	b	12418 <__assert_fail@plt+0x8c0>
   133a0:	mov	r0, #0
   133a4:	bl	13904 <__assert_fail@plt+0x1dac>
   133a8:	ldr	r0, [pc, #-1996]	; 12be4 <__assert_fail@plt+0x108c>
   133ac:	bl	118ac <getenv@plt>
   133b0:	cmp	r0, #0
   133b4:	mov	r7, r0
   133b8:	str	r0, [sl, #56]	; 0x38
   133bc:	beq	13134 <__assert_fail@plt+0x15dc>
   133c0:	ldr	r1, [pc, #-2016]	; 12be8 <__assert_fail@plt+0x1090>
   133c4:	bl	116e4 <strcmp@plt>
   133c8:	cmp	r0, #0
   133cc:	beq	13134 <__assert_fail@plt+0x15dc>
   133d0:	ldrb	r3, [r7]
   133d4:	cmp	r3, #43	; 0x2b
   133d8:	beq	1349c <__assert_fail@plt+0x1944>
   133dc:	ldr	r4, [pc, #-2040]	; 12bec <__assert_fail@plt+0x1094>
   133e0:	b	133ec <__assert_fail@plt+0x1894>
   133e4:	add	r7, r7, #6
   133e8:	str	r7, [sl, #56]	; 0x38
   133ec:	ldr	r7, [sl, #56]	; 0x38
   133f0:	mov	r2, #6
   133f4:	mov	r0, r7
   133f8:	mov	r1, r4
   133fc:	bl	11b1c <strncmp@plt>
   13400:	cmp	r0, #0
   13404:	beq	133e4 <__assert_fail@plt+0x188c>
   13408:	b	1243c <__assert_fail@plt+0x8e4>
   1340c:	ldr	r3, [pc, #-2084]	; 12bf0 <__assert_fail@plt+0x1098>
   13410:	str	r3, [sl, #20]
   13414:	b	12454 <__assert_fail@plt+0x8fc>
   13418:	ldr	r3, [pc, #-2092]	; 12bf4 <__assert_fail@plt+0x109c>
   1341c:	str	r3, [sl, #20]
   13420:	b	12454 <__assert_fail@plt+0x8fc>
   13424:	bl	143f4 <__assert_fail@plt+0x289c>
   13428:	cmp	r0, #0
   1342c:	str	r0, [sl, #80]	; 0x50
   13430:	beq	13498 <__assert_fail@plt+0x1940>
   13434:	mov	r0, r6
   13438:	bl	20340 <fts_children@@Base+0x2b4>
   1343c:	mov	r6, r0
   13440:	b	13450 <__assert_fail@plt+0x18f8>
   13444:	mov	r0, r6
   13448:	ldr	r6, [r6, #28]
   1344c:	bl	202f4 <fts_children@@Base+0x268>
   13450:	cmp	r6, #0
   13454:	beq	13320 <__assert_fail@plt+0x17c8>
   13458:	ldrb	r3, [r6, #24]
   1345c:	tst	r3, #3
   13460:	bne	13444 <__assert_fail@plt+0x18ec>
   13464:	add	r2, sp, #128	; 0x80
   13468:	ldr	r1, [r6, #4]
   1346c:	mov	r0, #3
   13470:	bl	11b04 <__xstat64@plt>
   13474:	cmp	r0, #0
   13478:	bne	13444 <__assert_fail@plt+0x18ec>
   1347c:	ldrd	r8, [sp, #224]	; 0xe0
   13480:	ldr	r0, [sl, #80]	; 0x50
   13484:	ldrd	r2, [sp, #128]	; 0x80
   13488:	strd	r8, [sp]
   1348c:	bl	14498 <__assert_fail@plt+0x2940>
   13490:	cmp	r0, #0
   13494:	bge	13444 <__assert_fail@plt+0x18ec>
   13498:	bl	1c0b8 <__assert_fail@plt+0xa560>
   1349c:	mov	r1, #10
   134a0:	mov	r0, r7
   134a4:	bl	11960 <strchr@plt>
   134a8:	cmp	r0, #0
   134ac:	strbne	r4, [r0]
   134b0:	bne	1243c <__assert_fail@plt+0x8e4>
   134b4:	b	1244c <__assert_fail@plt+0x8f4>
   134b8:	mov	r2, #5
   134bc:	ldr	r1, [pc, #-2252]	; 12bf8 <__assert_fail@plt+0x10a0>
   134c0:	mov	r0, #0
   134c4:	bl	11774 <dcgettext@plt>
   134c8:	ldr	r3, [r4]
   134cc:	mov	r6, r0
   134d0:	ldr	r0, [r5, r3, lsl #2]
   134d4:	bl	1b8d4 <__assert_fail@plt+0x9d7c>
   134d8:	mov	r1, #0
   134dc:	mov	r2, r6
   134e0:	mov	r3, r0
   134e4:	mov	r0, r1
   134e8:	bl	1187c <error@plt>
   134ec:	ldr	r3, [pc, #-2296]	; 12bfc <__assert_fail@plt+0x10a4>
   134f0:	mov	r2, #5
   134f4:	ldr	r1, [pc, #-2300]	; 12c00 <__assert_fail@plt+0x10a8>
   134f8:	mov	r0, #0
   134fc:	ldr	r4, [r3]
   13500:	bl	11774 <dcgettext@plt>
   13504:	ldr	r2, [pc, #-2312]	; 12c04 <__assert_fail@plt+0x10ac>
   13508:	mov	r1, #1
   1350c:	mov	r3, r0
   13510:	mov	r0, r4
   13514:	bl	119cc <__fprintf_chk@plt>
   13518:	mov	r0, #1
   1351c:	bl	13904 <__assert_fail@plt+0x1dac>
   13520:	ldr	r3, [pc, #-2316]	; 12c1c <__assert_fail@plt+0x10c4>
   13524:	ldr	r2, [pc, #-2340]	; 12c08 <__assert_fail@plt+0x10b0>
   13528:	ldr	r1, [pc, #-2312]	; 12c28 <__assert_fail@plt+0x10d0>
   1352c:	ldr	r0, [pc, #-2344]	; 12c0c <__assert_fail@plt+0x10b4>
   13530:	bl	11b58 <__assert_fail@plt>
   13534:	bl	11780 <__stack_chk_fail@plt>
   13538:	mov	r2, #5
   1353c:	ldr	r1, [pc, #-2356]	; 12c10 <__assert_fail@plt+0x10b8>
   13540:	mov	r0, #0
   13544:	bl	11774 <dcgettext@plt>
   13548:	ldr	r1, [sp, #28]
   1354c:	mov	r4, r0
   13550:	mov	r0, #4
   13554:	bl	1b62c <__assert_fail@plt+0x9ad4>
   13558:	mov	r2, r4
   1355c:	mov	r1, #0
   13560:	mov	r3, r0
   13564:	mov	r0, #1
   13568:	bl	1187c <error@plt>
   1356c:	bl	11984 <__errno_location@plt>
   13570:	mov	r2, #5
   13574:	ldr	r1, [pc, #-2408]	; 12c14 <__assert_fail@plt+0x10bc>
   13578:	ldr	r4, [r0]
   1357c:	mov	r0, r5
   13580:	bl	11774 <dcgettext@plt>
   13584:	ldr	r1, [sp, #28]
   13588:	mov	r5, r0
   1358c:	mov	r0, #4
   13590:	bl	1b62c <__assert_fail@plt+0x9ad4>
   13594:	mov	r2, r5
   13598:	mov	r1, r4
   1359c:	mov	r3, r0
   135a0:	mov	r0, #1
   135a4:	bl	1187c <error@plt>
   135a8:	mov	r2, #5
   135ac:	ldr	r1, [pc, #-2460]	; 12c18 <__assert_fail@plt+0x10c0>
   135b0:	mov	r0, #0
   135b4:	bl	11774 <dcgettext@plt>
   135b8:	mov	r1, #0
   135bc:	mov	r2, r0
   135c0:	mov	r0, r1
   135c4:	bl	1187c <error@plt>
   135c8:	mov	r0, #1
   135cc:	bl	13904 <__assert_fail@plt+0x1dac>
   135d0:	ldr	r3, [pc, #-2492]	; 12c1c <__assert_fail@plt+0x10c4>
   135d4:	ldr	r2, [pc, #-2492]	; 12c20 <__assert_fail@plt+0x10c8>
   135d8:	ldr	r1, [pc, #-2488]	; 12c28 <__assert_fail@plt+0x10d0>
   135dc:	ldr	r0, [pc, #-2496]	; 12c24 <__assert_fail@plt+0x10cc>
   135e0:	bl	11b58 <__assert_fail@plt>
   135e4:	ldr	r3, [sp, #40]	; 0x28
   135e8:	cmp	r3, #0
   135ec:	beq	12400 <__assert_fail@plt+0x8a8>
   135f0:	ldr	r7, [pc, #-2508]	; 12c2c <__assert_fail@plt+0x10d4>
   135f4:	b	12ff4 <__assert_fail@plt+0x149c>
   135f8:	ldr	r2, [fp]
   135fc:	ldr	r3, [pc, #-2516]	; 12c30 <__assert_fail@plt+0x10d8>
   13600:	str	r2, [sp]
   13604:	ldr	r1, [sp, #104]	; 0x68
   13608:	mov	r2, #116	; 0x74
   1360c:	bl	1d2b8 <__assert_fail@plt+0xb760>
   13610:	mov	fp, #0
   13614:	mov	lr, #0
   13618:	pop	{r1}		; (ldr r1, [sp], #4)
   1361c:	mov	r2, sp
   13620:	push	{r2}		; (str r2, [sp, #-4]!)
   13624:	push	{r0}		; (str r0, [sp, #-4]!)
   13628:	ldr	ip, [pc, #16]	; 13640 <__assert_fail@plt+0x1ae8>
   1362c:	push	{ip}		; (str ip, [sp, #-4]!)
   13630:	ldr	r0, [pc, #12]	; 13644 <__assert_fail@plt+0x1aec>
   13634:	ldr	r3, [pc, #12]	; 13648 <__assert_fail@plt+0x1af0>
   13638:	bl	118c4 <__libc_start_main@plt>
   1363c:	bl	11b28 <abort@plt>
   13640:	andeq	r1, r2, r0, asr pc
   13644:	andeq	r1, r1, r8, ror #22
   13648:	strdeq	r1, [r2], -r0
   1364c:	ldr	r3, [pc, #20]	; 13668 <__assert_fail@plt+0x1b10>
   13650:	ldr	r2, [pc, #20]	; 1366c <__assert_fail@plt+0x1b14>
   13654:	add	r3, pc, r3
   13658:	ldr	r2, [r3, r2]
   1365c:	cmp	r2, #0
   13660:	bxeq	lr
   13664:	b	11900 <__gmon_start__@plt>
   13668:	andeq	r1, r2, r4, lsr #19
   1366c:	andeq	r0, r0, r8, lsr #3
   13670:	ldr	r0, [pc, #24]	; 13690 <__assert_fail@plt+0x1b38>
   13674:	ldr	r3, [pc, #24]	; 13694 <__assert_fail@plt+0x1b3c>
   13678:	cmp	r3, r0
   1367c:	bxeq	lr
   13680:	ldr	r3, [pc, #16]	; 13698 <__assert_fail@plt+0x1b40>
   13684:	cmp	r3, #0
   13688:	bxeq	lr
   1368c:	bx	r3
   13690:	andeq	r5, r3, r4, lsl #4
   13694:	andeq	r5, r3, r4, lsl #4
   13698:	andeq	r0, r0, r0
   1369c:	ldr	r0, [pc, #36]	; 136c8 <__assert_fail@plt+0x1b70>
   136a0:	ldr	r1, [pc, #36]	; 136cc <__assert_fail@plt+0x1b74>
   136a4:	sub	r1, r1, r0
   136a8:	asr	r1, r1, #2
   136ac:	add	r1, r1, r1, lsr #31
   136b0:	asrs	r1, r1, #1
   136b4:	bxeq	lr
   136b8:	ldr	r3, [pc, #16]	; 136d0 <__assert_fail@plt+0x1b78>
   136bc:	cmp	r3, #0
   136c0:	bxeq	lr
   136c4:	bx	r3
   136c8:	andeq	r5, r3, r4, lsl #4
   136cc:	andeq	r5, r3, r4, lsl #4
   136d0:	andeq	r0, r0, r0
   136d4:	push	{r4, lr}
   136d8:	ldr	r4, [pc, #24]	; 136f8 <__assert_fail@plt+0x1ba0>
   136dc:	ldrb	r3, [r4]
   136e0:	cmp	r3, #0
   136e4:	popne	{r4, pc}
   136e8:	bl	13670 <__assert_fail@plt+0x1b18>
   136ec:	mov	r3, #1
   136f0:	strb	r3, [r4]
   136f4:	pop	{r4, pc}
   136f8:	andeq	r5, r3, ip, lsr #4
   136fc:	b	1369c <__assert_fail@plt+0x1b44>
   13700:	push	{r4, r6, r7, r8, r9, lr}
   13704:	mvn	r3, #0
   13708:	ldr	r4, [pc, #120]	; 13788 <__assert_fail@plt+0x1c30>
   1370c:	cmp	r1, r3
   13710:	sub	sp, sp, #672	; 0x2a0
   13714:	mvn	r2, #0
   13718:	ldr	r3, [r4]
   1371c:	cmpeq	r0, r2
   13720:	str	r3, [sp, #668]	; 0x29c
   13724:	beq	13770 <__assert_fail@plt+0x1c18>
   13728:	ldr	r3, [pc, #92]	; 1378c <__assert_fail@plt+0x1c34>
   1372c:	mov	r8, #1
   13730:	mov	r9, #0
   13734:	ldrd	r6, [r3, #8]
   13738:	add	r2, sp, #16
   1373c:	ldr	r3, [r3]
   13740:	strd	r8, [sp]
   13744:	strd	r6, [sp, #8]
   13748:	bl	18158 <__assert_fail@plt+0x6600>
   1374c:	ldr	r3, [pc, #60]	; 13790 <__assert_fail@plt+0x1c38>
   13750:	ldr	r1, [r3]
   13754:	bl	116a8 <fputs_unlocked@plt>
   13758:	ldr	r2, [sp, #668]	; 0x29c
   1375c:	ldr	r3, [r4]
   13760:	cmp	r2, r3
   13764:	bne	13784 <__assert_fail@plt+0x1c2c>
   13768:	add	sp, sp, #672	; 0x2a0
   1376c:	pop	{r4, r6, r7, r8, r9, pc}
   13770:	mov	r2, #5
   13774:	ldr	r1, [pc, #24]	; 13794 <__assert_fail@plt+0x1c3c>
   13778:	mov	r0, #0
   1377c:	bl	11774 <dcgettext@plt>
   13780:	b	1374c <__assert_fail@plt+0x1bf4>
   13784:	bl	11780 <__stack_chk_fail@plt>
   13788:	andeq	r4, r3, r8, lsl #30
   1378c:	andeq	r5, r3, r0, lsr r2
   13790:	andeq	r5, r3, r4, lsr #4
   13794:			; <UNDEFINED> instruction: 0x000221b8
   13798:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1379c:	mov	r5, r0
   137a0:	ldr	r4, [pc, #328]	; 138f0 <__assert_fail@plt+0x1d98>
   137a4:	ldr	r6, [pc, #328]	; 138f4 <__assert_fail@plt+0x1d9c>
   137a8:	sub	sp, sp, #88	; 0x58
   137ac:	ldrb	r2, [r4, #16]
   137b0:	ldr	r3, [r6]
   137b4:	mov	r8, r1
   137b8:	cmp	r2, #0
   137bc:	str	r3, [sp, #84]	; 0x54
   137c0:	ldrdne	r0, [r0, #8]
   137c4:	ldrdeq	r0, [r5]
   137c8:	bl	13700 <__assert_fail@plt+0x1ba8>
   137cc:	ldrb	r3, [r4, #17]
   137d0:	ldr	r7, [pc, #288]	; 138f8 <__assert_fail@plt+0x1da0>
   137d4:	cmp	r3, #0
   137d8:	beq	1384c <__assert_fail@plt+0x1cf4>
   137dc:	ldr	r0, [r7]
   137e0:	ldr	r3, [r0, #20]
   137e4:	ldr	r2, [r0, #24]
   137e8:	cmp	r3, r2
   137ec:	addcc	r1, r3, #1
   137f0:	movcc	r2, #9
   137f4:	strcc	r1, [r0, #20]
   137f8:	strbcc	r2, [r3]
   137fc:	bcs	1388c <__assert_fail@plt+0x1d34>
   13800:	add	r5, r5, #16
   13804:	add	ip, sp, #8
   13808:	ldm	r5, {r0, r1}
   1380c:	ldr	r5, [r4, #24]
   13810:	add	r2, sp, #16
   13814:	stm	ip, {r0, r1}
   13818:	mov	r1, ip
   1381c:	mov	r0, r5
   13820:	ldr	r9, [r4, #20]
   13824:	bl	20d74 <fts_children@@Base+0xce8>
   13828:	subs	sl, r0, #0
   1382c:	beq	13898 <__assert_fail@plt+0x1d40>
   13830:	ldr	r0, [sp, #12]
   13834:	mov	r3, r5
   13838:	str	r0, [sp]
   1383c:	add	r2, sp, #16
   13840:	mov	r1, r9
   13844:	ldr	r0, [r7]
   13848:	bl	16e58 <__assert_fail@plt+0x5300>
   1384c:	ldrb	r3, [r4, #28]
   13850:	mov	r2, r8
   13854:	ldr	r1, [pc, #160]	; 138fc <__assert_fail@plt+0x1da4>
   13858:	cmp	r3, #0
   1385c:	moveq	r3, #10
   13860:	movne	r3, #0
   13864:	mov	r0, #1
   13868:	bl	119b4 <__printf_chk@plt>
   1386c:	ldr	r0, [r7]
   13870:	bl	117e0 <fflush_unlocked@plt>
   13874:	ldr	r2, [sp, #84]	; 0x54
   13878:	ldr	r3, [r6]
   1387c:	cmp	r2, r3
   13880:	bne	138ec <__assert_fail@plt+0x1d94>
   13884:	add	sp, sp, #88	; 0x58
   13888:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1388c:	mov	r1, #9
   13890:	bl	11a20 <__overflow@plt>
   13894:	b	13800 <__assert_fail@plt+0x1ca8>
   13898:	ldr	r0, [sp, #8]
   1389c:	add	r2, sp, #60	; 0x3c
   138a0:	asr	r1, r0, #31
   138a4:	bl	18e84 <__assert_fail@plt+0x732c>
   138a8:	mov	r2, #5
   138ac:	ldr	r1, [pc, #76]	; 13900 <__assert_fail@plt+0x1da8>
   138b0:	mov	r5, r0
   138b4:	mov	r0, sl
   138b8:	bl	11774 <dcgettext@plt>
   138bc:	mov	r9, r0
   138c0:	mov	r0, r5
   138c4:	bl	1b8d4 <__assert_fail@plt+0x9d7c>
   138c8:	mov	r1, sl
   138cc:	mov	r2, r9
   138d0:	mov	r3, r0
   138d4:	mov	r0, sl
   138d8:	bl	1187c <error@plt>
   138dc:	mov	r0, r5
   138e0:	ldr	r1, [r7]
   138e4:	bl	116a8 <fputs_unlocked@plt>
   138e8:	b	1384c <__assert_fail@plt+0x1cf4>
   138ec:	bl	11780 <__stack_chk_fail@plt>
   138f0:	andeq	r5, r3, r0, lsr r2
   138f4:	andeq	r4, r3, r8, lsl #30
   138f8:	andeq	r5, r3, r4, lsr #4
   138fc:	ldrdeq	r2, [r2], -ip
   13900:	andeq	r2, r2, r4, asr #3
   13904:	ldr	r3, [pc, #900]	; 13c90 <__assert_fail@plt+0x2138>
   13908:	push	{r7, lr}
   1390c:	sub	sp, sp, #64	; 0x40
   13910:	ldr	r3, [r3]
   13914:	subs	r4, r0, #0
   13918:	str	r3, [sp, #60]	; 0x3c
   1391c:	beq	13958 <__assert_fail@plt+0x1e00>
   13920:	ldr	r3, [pc, #876]	; 13c94 <__assert_fail@plt+0x213c>
   13924:	mov	r2, #5
   13928:	ldr	r1, [pc, #872]	; 13c98 <__assert_fail@plt+0x2140>
   1392c:	mov	r0, #0
   13930:	ldr	r5, [r3]
   13934:	bl	11774 <dcgettext@plt>
   13938:	ldr	r3, [pc, #860]	; 13c9c <__assert_fail@plt+0x2144>
   1393c:	mov	r1, #1
   13940:	ldr	r3, [r3]
   13944:	mov	r2, r0
   13948:	mov	r0, r5
   1394c:	bl	119cc <__fprintf_chk@plt>
   13950:	mov	r0, r4
   13954:	bl	11930 <exit@plt>
   13958:	mov	r2, #5
   1395c:	ldr	r1, [pc, #828]	; 13ca0 <__assert_fail@plt+0x2148>
   13960:	bl	11774 <dcgettext@plt>
   13964:	ldr	r3, [pc, #816]	; 13c9c <__assert_fail@plt+0x2144>
   13968:	ldr	r5, [pc, #820]	; 13ca4 <__assert_fail@plt+0x214c>
   1396c:	ldr	r3, [r3]
   13970:	mov	r2, r3
   13974:	mov	r1, r0
   13978:	mov	r0, #1
   1397c:	bl	119b4 <__printf_chk@plt>
   13980:	mov	r2, #5
   13984:	ldr	r1, [pc, #796]	; 13ca8 <__assert_fail@plt+0x2150>
   13988:	mov	r0, r4
   1398c:	bl	11774 <dcgettext@plt>
   13990:	ldr	r1, [r5]
   13994:	bl	116a8 <fputs_unlocked@plt>
   13998:	mov	r2, #5
   1399c:	ldr	r1, [pc, #776]	; 13cac <__assert_fail@plt+0x2154>
   139a0:	mov	r0, r4
   139a4:	bl	11774 <dcgettext@plt>
   139a8:	ldr	r1, [r5]
   139ac:	bl	116a8 <fputs_unlocked@plt>
   139b0:	mov	r2, #5
   139b4:	ldr	r1, [pc, #756]	; 13cb0 <__assert_fail@plt+0x2158>
   139b8:	mov	r0, r4
   139bc:	bl	11774 <dcgettext@plt>
   139c0:	ldr	r1, [r5]
   139c4:	bl	116a8 <fputs_unlocked@plt>
   139c8:	mov	r2, #5
   139cc:	ldr	r1, [pc, #736]	; 13cb4 <__assert_fail@plt+0x215c>
   139d0:	mov	r0, r4
   139d4:	bl	11774 <dcgettext@plt>
   139d8:	ldr	r1, [r5]
   139dc:	bl	116a8 <fputs_unlocked@plt>
   139e0:	mov	r2, #5
   139e4:	ldr	r1, [pc, #716]	; 13cb8 <__assert_fail@plt+0x2160>
   139e8:	mov	r0, r4
   139ec:	bl	11774 <dcgettext@plt>
   139f0:	ldr	r1, [r5]
   139f4:	bl	116a8 <fputs_unlocked@plt>
   139f8:	mov	r2, #5
   139fc:	ldr	r1, [pc, #696]	; 13cbc <__assert_fail@plt+0x2164>
   13a00:	mov	r0, r4
   13a04:	bl	11774 <dcgettext@plt>
   13a08:	ldr	r1, [r5]
   13a0c:	bl	116a8 <fputs_unlocked@plt>
   13a10:	mov	r2, #5
   13a14:	ldr	r1, [pc, #676]	; 13cc0 <__assert_fail@plt+0x2168>
   13a18:	mov	r0, r4
   13a1c:	bl	11774 <dcgettext@plt>
   13a20:	ldr	r1, [r5]
   13a24:	bl	116a8 <fputs_unlocked@plt>
   13a28:	mov	r2, #5
   13a2c:	ldr	r1, [pc, #656]	; 13cc4 <__assert_fail@plt+0x216c>
   13a30:	mov	r0, r4
   13a34:	bl	11774 <dcgettext@plt>
   13a38:	ldr	r1, [r5]
   13a3c:	bl	116a8 <fputs_unlocked@plt>
   13a40:	mov	r2, #5
   13a44:	ldr	r1, [pc, #636]	; 13cc8 <__assert_fail@plt+0x2170>
   13a48:	mov	r0, r4
   13a4c:	bl	11774 <dcgettext@plt>
   13a50:	ldr	r1, [r5]
   13a54:	bl	116a8 <fputs_unlocked@plt>
   13a58:	mov	r2, #5
   13a5c:	ldr	r1, [pc, #616]	; 13ccc <__assert_fail@plt+0x2174>
   13a60:	mov	r0, r4
   13a64:	bl	11774 <dcgettext@plt>
   13a68:	ldr	r1, [r5]
   13a6c:	bl	116a8 <fputs_unlocked@plt>
   13a70:	mov	r2, #5
   13a74:	ldr	r1, [pc, #596]	; 13cd0 <__assert_fail@plt+0x2178>
   13a78:	mov	r0, r4
   13a7c:	bl	11774 <dcgettext@plt>
   13a80:	ldr	r1, [r5]
   13a84:	bl	116a8 <fputs_unlocked@plt>
   13a88:	mov	r2, #5
   13a8c:	ldr	r1, [pc, #576]	; 13cd4 <__assert_fail@plt+0x217c>
   13a90:	mov	r0, r4
   13a94:	bl	11774 <dcgettext@plt>
   13a98:	ldr	r2, [pc, #568]	; 13cd8 <__assert_fail@plt+0x2180>
   13a9c:	mov	r1, r0
   13aa0:	mov	r0, #1
   13aa4:	bl	119b4 <__printf_chk@plt>
   13aa8:	mov	r2, #5
   13aac:	ldr	r1, [pc, #552]	; 13cdc <__assert_fail@plt+0x2184>
   13ab0:	mov	r0, r4
   13ab4:	bl	11774 <dcgettext@plt>
   13ab8:	ldr	r1, [r5]
   13abc:	bl	116a8 <fputs_unlocked@plt>
   13ac0:	ldr	lr, [pc, #536]	; 13ce0 <__assert_fail@plt+0x2188>
   13ac4:	add	ip, sp, #4
   13ac8:	ldm	lr!, {r0, r1, r2, r3}
   13acc:	stmia	ip!, {r0, r1, r2, r3}
   13ad0:	ldm	lr!, {r0, r1, r2, r3}
   13ad4:	ldr	r6, [sp, #4]
   13ad8:	stmia	ip!, {r0, r1, r2, r3}
   13adc:	cmp	r6, #0
   13ae0:	ldm	lr!, {r0, r1, r2, r3}
   13ae4:	addeq	r5, sp, #4
   13ae8:	stmia	ip!, {r0, r1, r2, r3}
   13aec:	ldm	lr, {r0, r1}
   13af0:	stm	ip, {r0, r1}
   13af4:	beq	13b24 <__assert_fail@plt+0x1fcc>
   13af8:	ldr	r7, [pc, #484]	; 13ce4 <__assert_fail@plt+0x218c>
   13afc:	add	r5, sp, #4
   13b00:	b	13b10 <__assert_fail@plt+0x1fb8>
   13b04:	ldr	r6, [r5, #8]!
   13b08:	cmp	r6, #0
   13b0c:	beq	13b24 <__assert_fail@plt+0x1fcc>
   13b10:	mov	r1, r6
   13b14:	mov	r0, r7
   13b18:	bl	116e4 <strcmp@plt>
   13b1c:	cmp	r0, #0
   13b20:	bne	13b04 <__assert_fail@plt+0x1fac>
   13b24:	ldr	r5, [r5, #4]
   13b28:	mov	r2, #5
   13b2c:	cmp	r5, #0
   13b30:	ldr	r1, [pc, #432]	; 13ce8 <__assert_fail@plt+0x2190>
   13b34:	beq	13bdc <__assert_fail@plt+0x2084>
   13b38:	mov	r0, #0
   13b3c:	bl	11774 <dcgettext@plt>
   13b40:	ldr	r3, [pc, #420]	; 13cec <__assert_fail@plt+0x2194>
   13b44:	ldr	r2, [pc, #420]	; 13cf0 <__assert_fail@plt+0x2198>
   13b48:	mov	r1, r0
   13b4c:	mov	r0, #1
   13b50:	bl	119b4 <__printf_chk@plt>
   13b54:	mov	r1, #0
   13b58:	mov	r0, #5
   13b5c:	bl	11a2c <setlocale@plt>
   13b60:	cmp	r0, #0
   13b64:	ldreq	r6, [pc, #376]	; 13ce4 <__assert_fail@plt+0x218c>
   13b68:	beq	13b84 <__assert_fail@plt+0x202c>
   13b6c:	mov	r2, #3
   13b70:	ldr	r1, [pc, #380]	; 13cf4 <__assert_fail@plt+0x219c>
   13b74:	bl	11b1c <strncmp@plt>
   13b78:	ldr	r6, [pc, #356]	; 13ce4 <__assert_fail@plt+0x218c>
   13b7c:	cmp	r0, #0
   13b80:	bne	13c6c <__assert_fail@plt+0x2114>
   13b84:	mov	r2, #5
   13b88:	ldr	r1, [pc, #360]	; 13cf8 <__assert_fail@plt+0x21a0>
   13b8c:	mov	r0, #0
   13b90:	bl	11774 <dcgettext@plt>
   13b94:	ldr	r3, [pc, #328]	; 13ce4 <__assert_fail@plt+0x218c>
   13b98:	ldr	r2, [pc, #332]	; 13cec <__assert_fail@plt+0x2194>
   13b9c:	mov	r1, r0
   13ba0:	mov	r0, #1
   13ba4:	bl	119b4 <__printf_chk@plt>
   13ba8:	mov	r2, #5
   13bac:	ldr	r1, [pc, #328]	; 13cfc <__assert_fail@plt+0x21a4>
   13bb0:	mov	r0, #0
   13bb4:	bl	11774 <dcgettext@plt>
   13bb8:	ldr	r2, [pc, #320]	; 13d00 <__assert_fail@plt+0x21a8>
   13bbc:	cmp	r5, r6
   13bc0:	ldr	r3, [pc, #316]	; 13d04 <__assert_fail@plt+0x21ac>
   13bc4:	movne	r3, r2
   13bc8:	mov	r1, r0
   13bcc:	mov	r2, r5
   13bd0:	mov	r0, #1
   13bd4:	bl	119b4 <__printf_chk@plt>
   13bd8:	b	13950 <__assert_fail@plt+0x1df8>
   13bdc:	mov	r0, r5
   13be0:	bl	11774 <dcgettext@plt>
   13be4:	ldr	r3, [pc, #256]	; 13cec <__assert_fail@plt+0x2194>
   13be8:	ldr	r2, [pc, #256]	; 13cf0 <__assert_fail@plt+0x2198>
   13bec:	mov	r1, r0
   13bf0:	mov	r0, #1
   13bf4:	bl	119b4 <__printf_chk@plt>
   13bf8:	mov	r1, r5
   13bfc:	mov	r0, #5
   13c00:	bl	11a2c <setlocale@plt>
   13c04:	cmp	r0, #0
   13c08:	beq	13c20 <__assert_fail@plt+0x20c8>
   13c0c:	mov	r2, #3
   13c10:	ldr	r1, [pc, #220]	; 13cf4 <__assert_fail@plt+0x219c>
   13c14:	bl	11b1c <strncmp@plt>
   13c18:	cmp	r0, #0
   13c1c:	bne	13c64 <__assert_fail@plt+0x210c>
   13c20:	mov	r2, #5
   13c24:	ldr	r1, [pc, #204]	; 13cf8 <__assert_fail@plt+0x21a0>
   13c28:	mov	r0, #0
   13c2c:	bl	11774 <dcgettext@plt>
   13c30:	ldr	r3, [pc, #172]	; 13ce4 <__assert_fail@plt+0x218c>
   13c34:	ldr	r2, [pc, #176]	; 13cec <__assert_fail@plt+0x2194>
   13c38:	mov	r5, r3
   13c3c:	mov	r1, r0
   13c40:	mov	r0, #1
   13c44:	bl	119b4 <__printf_chk@plt>
   13c48:	ldr	r1, [pc, #172]	; 13cfc <__assert_fail@plt+0x21a4>
   13c4c:	mov	r2, #5
   13c50:	mov	r0, #0
   13c54:	bl	11774 <dcgettext@plt>
   13c58:	ldr	r3, [pc, #164]	; 13d04 <__assert_fail@plt+0x21ac>
   13c5c:	mov	r1, r0
   13c60:	b	13bcc <__assert_fail@plt+0x2074>
   13c64:	ldr	r6, [pc, #120]	; 13ce4 <__assert_fail@plt+0x218c>
   13c68:	mov	r5, r6
   13c6c:	mov	r2, #5
   13c70:	ldr	r1, [pc, #144]	; 13d08 <__assert_fail@plt+0x21b0>
   13c74:	mov	r0, #0
   13c78:	bl	11774 <dcgettext@plt>
   13c7c:	ldr	r2, [pc, #96]	; 13ce4 <__assert_fail@plt+0x218c>
   13c80:	mov	r1, r0
   13c84:	mov	r0, #1
   13c88:	bl	119b4 <__printf_chk@plt>
   13c8c:	b	13b84 <__assert_fail@plt+0x202c>
   13c90:	andeq	r4, r3, r8, lsl #30
   13c94:	andeq	r5, r3, r8, lsl r2
   13c98:	andeq	r2, r2, r8, ror #3
   13c9c:			; <UNDEFINED> instruction: 0x000352b0
   13ca0:	andeq	r2, r2, r0, lsl r2
   13ca4:	andeq	r5, r3, r4, lsr #4
   13ca8:	andeq	r2, r2, r8, asr r2
   13cac:	andeq	r2, r2, r0, lsr #5
   13cb0:	andeq	r2, r2, ip, ror #5
   13cb4:	andeq	r2, r2, r8, lsr #9
   13cb8:	andeq	r2, r2, ip, asr r7
   13cbc:	andeq	r2, r2, r0, lsl #18
   13cc0:	ldrdeq	r2, [r2], -r0
   13cc4:	strdeq	r2, [r2], -r0
   13cc8:	andeq	r2, r2, r4, asr sp
   13ccc:	andeq	r2, r2, r0, lsr #28
   13cd0:	andeq	r2, r2, r0, asr lr
   13cd4:	andeq	r2, r2, r8, lsl #29
   13cd8:	andeq	r2, r2, r8, ror #30
   13cdc:	andeq	r2, r2, ip, ror #30
   13ce0:	andeq	r1, r2, r8, ror pc
   13ce4:	andeq	r2, r2, r4, ror #3
   13ce8:	andeq	r3, r2, r8
   13cec:	andeq	r3, r2, r0, lsr #32
   13cf0:	andeq	r3, r2, r8, asr #32
   13cf4:	andeq	r3, r2, r8, asr r0
   13cf8:	andeq	r3, r2, r4, lsr #1
   13cfc:	andeq	r3, r2, r4, asr #1
   13d00:	andeq	r3, r2, r8, lsr #17
   13d04:	andeq	r3, r2, r8, lsl #11
   13d08:	andeq	r3, r2, ip, asr r0
   13d0c:	mov	r0, #1
   13d10:	b	13904 <__assert_fail@plt+0x1dac>
   13d14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d18:	mov	r5, r1
   13d1c:	sub	sp, sp, #12
   13d20:	mov	r4, r2
   13d24:	str	r2, [sp]
   13d28:	mov	r7, r3
   13d2c:	mov	sl, r0
   13d30:	bl	11954 <strlen@plt>
   13d34:	ldr	fp, [r5]
   13d38:	cmp	fp, #0
   13d3c:	beq	13e00 <__assert_fail@plt+0x22a8>
   13d40:	mov	r6, #0
   13d44:	mov	r8, r0
   13d48:	str	r6, [sp, #4]
   13d4c:	mvn	r9, #0
   13d50:	b	13d7c <__assert_fail@plt+0x2224>
   13d54:	bl	11768 <memcmp@plt>
   13d58:	ldr	r3, [sp, #4]
   13d5c:	cmp	r0, #0
   13d60:	movne	r3, #1
   13d64:	str	r3, [sp, #4]
   13d68:	ldr	fp, [r5, #4]!
   13d6c:	add	r6, r6, #1
   13d70:	cmp	fp, #0
   13d74:	add	r4, r4, r7
   13d78:	beq	13dd8 <__assert_fail@plt+0x2280>
   13d7c:	mov	r2, r8
   13d80:	mov	r1, sl
   13d84:	mov	r0, fp
   13d88:	bl	11b1c <strncmp@plt>
   13d8c:	cmp	r0, #0
   13d90:	mov	r0, fp
   13d94:	bne	13d68 <__assert_fail@plt+0x2210>
   13d98:	bl	11954 <strlen@plt>
   13d9c:	ldr	r3, [sp]
   13da0:	mov	r2, r7
   13da4:	mov	r1, r4
   13da8:	cmp	r0, r8
   13dac:	mla	r0, r7, r9, r3
   13db0:	beq	13df0 <__assert_fail@plt+0x2298>
   13db4:	cmn	r9, #1
   13db8:	moveq	r9, r6
   13dbc:	beq	13d68 <__assert_fail@plt+0x2210>
   13dc0:	ldr	r3, [sp]
   13dc4:	cmp	r3, #0
   13dc8:	bne	13d54 <__assert_fail@plt+0x21fc>
   13dcc:	mov	r3, #1
   13dd0:	str	r3, [sp, #4]
   13dd4:	b	13d68 <__assert_fail@plt+0x2210>
   13dd8:	ldr	r3, [sp, #4]
   13ddc:	cmp	r3, #0
   13de0:	mvnne	r9, #1
   13de4:	mov	r0, r9
   13de8:	add	sp, sp, #12
   13dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df0:	mov	r9, r6
   13df4:	mov	r0, r9
   13df8:	add	sp, sp, #12
   13dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e00:	mvn	r9, #0
   13e04:	b	13de4 <__assert_fail@plt+0x228c>
   13e08:	cmn	r2, #1
   13e0c:	push	{r4, r5, r6, lr}
   13e10:	mov	r2, #5
   13e14:	sub	sp, sp, #8
   13e18:	mov	r5, r1
   13e1c:	mov	r6, r0
   13e20:	ldreq	r1, [pc, #76]	; 13e74 <__assert_fail@plt+0x231c>
   13e24:	ldrne	r1, [pc, #76]	; 13e78 <__assert_fail@plt+0x2320>
   13e28:	mov	r0, #0
   13e2c:	bl	11774 <dcgettext@plt>
   13e30:	mov	r2, r5
   13e34:	mov	r1, #8
   13e38:	mov	r4, r0
   13e3c:	mov	r0, #0
   13e40:	bl	1b578 <__assert_fail@plt+0x9a20>
   13e44:	mov	r1, r6
   13e48:	mov	r5, r0
   13e4c:	mov	r0, #1
   13e50:	bl	1b8c4 <__assert_fail@plt+0x9d6c>
   13e54:	mov	r1, #0
   13e58:	mov	r3, r5
   13e5c:	mov	r2, r4
   13e60:	str	r0, [sp]
   13e64:	mov	r0, r1
   13e68:	bl	1187c <error@plt>
   13e6c:	add	sp, sp, #8
   13e70:	pop	{r4, r5, r6, pc}
   13e74:	andeq	r3, r2, r0, lsr r7
   13e78:	andeq	r3, r2, ip, asr #14
   13e7c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e80:	mov	r6, r0
   13e84:	ldr	sl, [pc, #224]	; 13f6c <__assert_fail@plt+0x2414>
   13e88:	mov	r4, r1
   13e8c:	mov	r7, r2
   13e90:	ldr	r1, [pc, #216]	; 13f70 <__assert_fail@plt+0x2418>
   13e94:	mov	r2, #5
   13e98:	mov	r0, #0
   13e9c:	bl	11774 <dcgettext@plt>
   13ea0:	ldr	r1, [sl]
   13ea4:	bl	116a8 <fputs_unlocked@plt>
   13ea8:	ldr	fp, [r6]
   13eac:	cmp	fp, #0
   13eb0:	movne	r9, #0
   13eb4:	movne	r5, r9
   13eb8:	bne	13ef4 <__assert_fail@plt+0x239c>
   13ebc:	b	13f38 <__assert_fail@plt+0x23e0>
   13ec0:	mov	r0, fp
   13ec4:	bl	1b8d4 <__assert_fail@plt+0x9d7c>
   13ec8:	ldr	r2, [pc, #164]	; 13f74 <__assert_fail@plt+0x241c>
   13ecc:	mov	r1, #1
   13ed0:	mov	r9, r4
   13ed4:	mov	r3, r0
   13ed8:	mov	r0, r8
   13edc:	bl	119cc <__fprintf_chk@plt>
   13ee0:	ldr	fp, [r6, #4]!
   13ee4:	add	r5, r5, #1
   13ee8:	cmp	fp, #0
   13eec:	add	r4, r4, r7
   13ef0:	beq	13f38 <__assert_fail@plt+0x23e0>
   13ef4:	cmp	r5, #0
   13ef8:	mov	r1, r4
   13efc:	mov	r2, r7
   13f00:	mov	r0, r9
   13f04:	ldr	r8, [sl]
   13f08:	beq	13ec0 <__assert_fail@plt+0x2368>
   13f0c:	bl	11768 <memcmp@plt>
   13f10:	cmp	r0, #0
   13f14:	bne	13ec0 <__assert_fail@plt+0x2368>
   13f18:	mov	r0, fp
   13f1c:	bl	1b8d4 <__assert_fail@plt+0x9d7c>
   13f20:	ldr	r2, [pc, #80]	; 13f78 <__assert_fail@plt+0x2420>
   13f24:	mov	r1, #1
   13f28:	mov	r3, r0
   13f2c:	mov	r0, r8
   13f30:	bl	119cc <__fprintf_chk@plt>
   13f34:	b	13ee0 <__assert_fail@plt+0x2388>
   13f38:	ldr	r0, [sl]
   13f3c:	ldr	r3, [r0, #20]
   13f40:	ldr	r2, [r0, #24]
   13f44:	cmp	r3, r2
   13f48:	bcs	13f60 <__assert_fail@plt+0x2408>
   13f4c:	add	r1, r3, #1
   13f50:	mov	r2, #10
   13f54:	str	r1, [r0, #20]
   13f58:	strb	r2, [r3]
   13f5c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f60:	mov	r1, #10
   13f64:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f68:	b	11a20 <__overflow@plt>
   13f6c:	andeq	r5, r3, r8, lsl r2
   13f70:	andeq	r3, r2, ip, ror #14
   13f74:	andeq	r3, r2, r4, lsl #15
   13f78:	andeq	r3, r2, ip, lsl #15
   13f7c:	push	{r4, r5, r6, r7, r8, lr}
   13f80:	mov	r6, r1
   13f84:	mov	r4, r2
   13f88:	mov	r5, r3
   13f8c:	mov	r7, r0
   13f90:	ldr	r3, [sp, #24]
   13f94:	mov	r2, r5
   13f98:	mov	r1, r4
   13f9c:	mov	r0, r6
   13fa0:	bl	13d14 <__assert_fail@plt+0x21bc>
   13fa4:	cmp	r0, #0
   13fa8:	popge	{r4, r5, r6, r7, r8, pc}
   13fac:	mov	r2, r0
   13fb0:	mov	r1, r6
   13fb4:	mov	r0, r7
   13fb8:	bl	13e08 <__assert_fail@plt+0x22b0>
   13fbc:	mov	r0, r4
   13fc0:	ldr	r2, [sp, #24]
   13fc4:	mov	r1, r5
   13fc8:	bl	13e7c <__assert_fail@plt+0x2324>
   13fcc:	ldr	r3, [sp, #28]
   13fd0:	blx	r3
   13fd4:	mvn	r0, #0
   13fd8:	pop	{r4, r5, r6, r7, r8, pc}
   13fdc:	push	{r4, r5, r6, r7, r8, lr}
   13fe0:	ldr	r7, [r1]
   13fe4:	cmp	r7, #0
   13fe8:	beq	14028 <__assert_fail@plt+0x24d0>
   13fec:	mov	r6, r3
   13ff0:	mov	r8, r0
   13ff4:	mov	r4, r2
   13ff8:	mov	r5, r1
   13ffc:	b	1400c <__assert_fail@plt+0x24b4>
   14000:	ldr	r7, [r5, #4]!
   14004:	cmp	r7, #0
   14008:	beq	14028 <__assert_fail@plt+0x24d0>
   1400c:	mov	r1, r4
   14010:	mov	r2, r6
   14014:	mov	r0, r8
   14018:	bl	11768 <memcmp@plt>
   1401c:	add	r4, r4, r6
   14020:	cmp	r0, #0
   14024:	bne	14000 <__assert_fail@plt+0x24a8>
   14028:	mov	r0, r7
   1402c:	pop	{r4, r5, r6, r7, r8, pc}
   14030:	push	{r4, lr}
   14034:	mov	r4, r0
   14038:	mov	r0, #24
   1403c:	bl	118b8 <malloc@plt>
   14040:	cmp	r0, #0
   14044:	movne	r3, #0
   14048:	strne	r4, [r0, #16]
   1404c:	strne	r4, [r0, #20]
   14050:	strne	r3, [r0]
   14054:	pop	{r4, pc}
   14058:	push	{r4, lr}
   1405c:	mov	r4, r0
   14060:	mov	r0, #24
   14064:	bl	118b8 <malloc@plt>
   14068:	cmp	r0, #0
   1406c:	popeq	{r4, pc}
   14070:	mov	r3, #0
   14074:	str	r4, [r0]
   14078:	str	r3, [r0, #8]
   1407c:	str	r3, [r0, #12]
   14080:	str	r3, [r0, #4]
   14084:	str	r3, [r0, #16]
   14088:	pop	{r4, pc}
   1408c:	ldr	r3, [r0]
   14090:	cmp	r3, #0
   14094:	beq	140dc <__assert_fail@plt+0x2584>
   14098:	push	{r4, r5, r6, lr}
   1409c:	mov	r2, #0
   140a0:	mov	r5, r1
   140a4:	mov	r4, r0
   140a8:	add	r1, r0, #12
   140ac:	add	r0, r0, #8
   140b0:	bl	11af8 <getdelim@plt>
   140b4:	cmp	r0, #0
   140b8:	blt	14108 <__assert_fail@plt+0x25b0>
   140bc:	ldr	r2, [r4, #4]
   140c0:	mov	r3, #1
   140c4:	add	r2, r2, r3
   140c8:	str	r3, [r5]
   140cc:	ldr	r3, [r4, #8]
   140d0:	str	r2, [r4, #4]
   140d4:	mov	r0, r3
   140d8:	pop	{r4, r5, r6, pc}
   140dc:	ldr	r2, [r0, #20]
   140e0:	ldr	r3, [r2]
   140e4:	cmp	r3, #0
   140e8:	moveq	r2, #2
   140ec:	addne	r2, r2, #4
   140f0:	movne	ip, #1
   140f4:	strne	ip, [r1]
   140f8:	streq	r2, [r1]
   140fc:	strne	r2, [r0, #20]
   14100:	mov	r0, r3
   14104:	bx	lr
   14108:	ldr	r0, [r4]
   1410c:	bl	1193c <feof@plt>
   14110:	mov	r3, #0
   14114:	cmp	r0, r3
   14118:	movne	r2, #2
   1411c:	moveq	r2, #4
   14120:	str	r2, [r5]
   14124:	b	140d4 <__assert_fail@plt+0x257c>
   14128:	ldr	r3, [r0]
   1412c:	cmp	r3, #0
   14130:	ldreq	r3, [r0, #20]
   14134:	ldrne	r0, [r0, #4]
   14138:	ldreq	r0, [r0, #16]
   1413c:	subeq	r0, r3, r0
   14140:	asreq	r0, r0, #2
   14144:	bx	lr
   14148:	ldr	r3, [r0]
   1414c:	push	{r4, lr}
   14150:	cmp	r3, #0
   14154:	mov	r4, r0
   14158:	beq	14164 <__assert_fail@plt+0x260c>
   1415c:	ldr	r0, [r0, #8]
   14160:	bl	11720 <free@plt>
   14164:	mov	r0, r4
   14168:	pop	{r4, lr}
   1416c:	b	11720 <free@plt>
   14170:	ldr	r3, [pc, #4]	; 1417c <__assert_fail@plt+0x2624>
   14174:	str	r0, [r3]
   14178:	bx	lr
   1417c:	andeq	r5, r3, r8, lsr #5
   14180:	ldr	r3, [pc, #4]	; 1418c <__assert_fail@plt+0x2634>
   14184:	strb	r0, [r3, #4]
   14188:	bx	lr
   1418c:	andeq	r5, r3, r8, lsr #5
   14190:	ldr	r3, [pc, #180]	; 1424c <__assert_fail@plt+0x26f4>
   14194:	push	{r4, r5, r6, lr}
   14198:	sub	sp, sp, #8
   1419c:	ldr	r0, [r3]
   141a0:	bl	20f5c <fts_children@@Base+0xed0>
   141a4:	cmp	r0, #0
   141a8:	beq	141d0 <__assert_fail@plt+0x2678>
   141ac:	bl	11984 <__errno_location@plt>
   141b0:	ldr	r5, [pc, #152]	; 14250 <__assert_fail@plt+0x26f8>
   141b4:	ldrb	r3, [r5, #4]
   141b8:	cmp	r3, #0
   141bc:	mov	r4, r0
   141c0:	beq	141ec <__assert_fail@plt+0x2694>
   141c4:	ldr	r3, [r0]
   141c8:	cmp	r3, #32
   141cc:	bne	141ec <__assert_fail@plt+0x2694>
   141d0:	ldr	r3, [pc, #124]	; 14254 <__assert_fail@plt+0x26fc>
   141d4:	ldr	r0, [r3]
   141d8:	bl	20f5c <fts_children@@Base+0xed0>
   141dc:	cmp	r0, #0
   141e0:	bne	1422c <__assert_fail@plt+0x26d4>
   141e4:	add	sp, sp, #8
   141e8:	pop	{r4, r5, r6, pc}
   141ec:	mov	r2, #5
   141f0:	ldr	r1, [pc, #96]	; 14258 <__assert_fail@plt+0x2700>
   141f4:	mov	r0, #0
   141f8:	bl	11774 <dcgettext@plt>
   141fc:	mov	r6, r0
   14200:	ldr	r0, [r5]
   14204:	cmp	r0, #0
   14208:	beq	14238 <__assert_fail@plt+0x26e0>
   1420c:	ldr	r4, [r4]
   14210:	bl	1b6f4 <__assert_fail@plt+0x9b9c>
   14214:	mov	r1, r4
   14218:	str	r6, [sp]
   1421c:	ldr	r2, [pc, #56]	; 1425c <__assert_fail@plt+0x2704>
   14220:	mov	r3, r0
   14224:	mov	r0, #0
   14228:	bl	1187c <error@plt>
   1422c:	ldr	r3, [pc, #44]	; 14260 <__assert_fail@plt+0x2708>
   14230:	ldr	r0, [r3]
   14234:	bl	1172c <_exit@plt>
   14238:	mov	r3, r6
   1423c:	ldr	r1, [r4]
   14240:	ldr	r2, [pc, #28]	; 14264 <__assert_fail@plt+0x270c>
   14244:	bl	1187c <error@plt>
   14248:	b	1422c <__assert_fail@plt+0x26d4>
   1424c:	andeq	r5, r3, r4, lsr #4
   14250:	andeq	r5, r3, r8, lsr #5
   14254:	andeq	r5, r3, r8, lsl r2
   14258:	muleq	r2, r4, r7
   1425c:	andeq	r3, r2, r0, lsr #15
   14260:	andeq	r5, r3, r0, asr #3
   14264:	andeq	r3, r2, r4, lsr #15
   14268:	ldm	r0, {r0, r2}
   1426c:	push	{r4, lr}
   14270:	eor	r0, r0, r2
   14274:	bl	21648 <fts_children@@Base+0x15bc>
   14278:	mov	r0, r1
   1427c:	pop	{r4, pc}
   14280:	push	{r4, r5}
   14284:	ldrd	r2, [r1]
   14288:	ldrd	r4, [r0]
   1428c:	cmp	r5, r3
   14290:	cmpeq	r4, r2
   14294:	moveq	r0, #1
   14298:	movne	r0, #0
   1429c:	pop	{r4, r5}
   142a0:	bx	lr
   142a4:	push	{r4, lr}
   142a8:	bl	21648 <fts_children@@Base+0x15bc>
   142ac:	mov	r0, r1
   142b0:	pop	{r4, pc}
   142b4:	push	{r4, lr}
   142b8:	mov	r4, r0
   142bc:	ldr	r0, [r0, #8]
   142c0:	bl	17ba8 <__assert_fail@plt+0x6050>
   142c4:	mov	r0, r4
   142c8:	pop	{r4, lr}
   142cc:	b	11720 <free@plt>
   142d0:	push	{r4, r5, r6, lr}
   142d4:	mov	r5, r1
   142d8:	ldr	r4, [r1]
   142dc:	sub	sp, sp, #16
   142e0:	cmp	r4, #0
   142e4:	mov	r6, r0
   142e8:	beq	14330 <__assert_fail@plt+0x27d8>
   142ec:	ldrd	r0, [r4]
   142f0:	cmp	r1, r3
   142f4:	cmpeq	r0, r2
   142f8:	ldreq	r0, [r4, #8]
   142fc:	beq	14328 <__assert_fail@plt+0x27d0>
   14300:	strd	r2, [r4]
   14304:	mov	r0, r6
   14308:	mov	r1, r4
   1430c:	bl	17fd4 <__assert_fail@plt+0x647c>
   14310:	cmp	r0, #0
   14314:	beq	14350 <__assert_fail@plt+0x27f8>
   14318:	cmp	r4, r0
   1431c:	beq	14358 <__assert_fail@plt+0x2800>
   14320:	ldr	r0, [r0, #8]
   14324:	str	r0, [r4, #8]
   14328:	add	sp, sp, #16
   1432c:	pop	{r4, r5, r6, pc}
   14330:	mov	r0, #16
   14334:	strd	r2, [sp, #8]
   14338:	bl	118b8 <malloc@plt>
   1433c:	ldrd	r2, [sp, #8]
   14340:	cmp	r0, #0
   14344:	mov	r4, r0
   14348:	str	r0, [r5]
   1434c:	bne	14300 <__assert_fail@plt+0x27a8>
   14350:	mov	r0, #0
   14354:	b	14328 <__assert_fail@plt+0x27d0>
   14358:	mov	r3, #0
   1435c:	str	r3, [r5]
   14360:	mov	r1, r3
   14364:	str	r3, [sp]
   14368:	ldr	r2, [pc, #16]	; 14380 <__assert_fail@plt+0x2828>
   1436c:	ldr	r0, [pc, #16]	; 14384 <__assert_fail@plt+0x282c>
   14370:	bl	179a8 <__assert_fail@plt+0x5e50>
   14374:	str	r0, [r4, #8]
   14378:	add	sp, sp, #16
   1437c:	pop	{r4, r5, r6, pc}
   14380:	andeq	r4, r1, r4, lsr #5
   14384:	strdeq	r0, [r0], -sp
   14388:	push	{r4, r5, r6, r7, r8, lr}
   1438c:	subs	r4, r2, #1
   14390:	sbc	r5, r3, #0
   14394:	mov	r7, #0
   14398:	mvn	r6, #-2147483646	; 0x80000002
   1439c:	cmp	r5, r7
   143a0:	cmpeq	r4, r6
   143a4:	bls	143d0 <__assert_fail@plt+0x2878>
   143a8:	mov	r4, r0
   143ac:	ldr	r0, [r0]
   143b0:	mov	r5, r3
   143b4:	cmp	r0, #0
   143b8:	mov	r6, r2
   143bc:	beq	143d8 <__assert_fail@plt+0x2880>
   143c0:	mov	r2, r6
   143c4:	mov	r3, r5
   143c8:	pop	{r4, r5, r6, r7, r8, lr}
   143cc:	b	18df0 <__assert_fail@plt+0x7298>
   143d0:	mov	r0, r2
   143d4:	pop	{r4, r5, r6, r7, r8, pc}
   143d8:	mvn	r0, #-2147483648	; 0x80000000
   143dc:	bl	18d4c <__assert_fail@plt+0x71f4>
   143e0:	cmp	r0, #0
   143e4:	str	r0, [r4]
   143e8:	bne	143c0 <__assert_fail@plt+0x2868>
   143ec:	mvn	r0, #0
   143f0:	pop	{r4, r5, r6, r7, r8, pc}
   143f4:	push	{r4, r5, lr}
   143f8:	mov	r0, #12
   143fc:	sub	sp, sp, #12
   14400:	bl	118b8 <malloc@plt>
   14404:	subs	r4, r0, #0
   14408:	beq	14444 <__assert_fail@plt+0x28ec>
   1440c:	ldr	r2, [pc, #76]	; 14460 <__assert_fail@plt+0x2908>
   14410:	ldr	r3, [pc, #76]	; 14464 <__assert_fail@plt+0x290c>
   14414:	str	r2, [sp]
   14418:	mov	r1, #0
   1441c:	ldr	r2, [pc, #68]	; 14468 <__assert_fail@plt+0x2910>
   14420:	mov	r0, #11
   14424:	bl	179a8 <__assert_fail@plt+0x5e50>
   14428:	cmp	r0, #0
   1442c:	movne	r3, #0
   14430:	mov	r5, r0
   14434:	str	r0, [r4]
   14438:	strne	r3, [r4, #4]
   1443c:	strne	r3, [r4, #8]
   14440:	beq	14450 <__assert_fail@plt+0x28f8>
   14444:	mov	r0, r4
   14448:	add	sp, sp, #12
   1444c:	pop	{r4, r5, pc}
   14450:	mov	r0, r4
   14454:	bl	11720 <free@plt>
   14458:	mov	r4, r5
   1445c:	b	14444 <__assert_fail@plt+0x28ec>
   14460:			; <UNDEFINED> instruction: 0x000142b4
   14464:	andeq	r4, r1, r0, lsl #5
   14468:	andeq	r4, r1, r8, ror #4
   1446c:	push	{r4, lr}
   14470:	mov	r4, r0
   14474:	ldr	r0, [r0]
   14478:	bl	17ba8 <__assert_fail@plt+0x6050>
   1447c:	ldr	r0, [r4, #4]
   14480:	bl	11720 <free@plt>
   14484:	ldr	r0, [r4, #8]
   14488:	bl	11720 <free@plt>
   1448c:	mov	r0, r4
   14490:	pop	{r4, lr}
   14494:	b	11720 <free@plt>
   14498:	mov	r1, r0
   1449c:	push	{r4, r5, r6, r7, r8, lr}
   144a0:	mov	r4, r0
   144a4:	ldr	r0, [r1], #8
   144a8:	ldrd	r6, [sp, #24]
   144ac:	bl	142d0 <__assert_fail@plt+0x2778>
   144b0:	subs	r5, r0, #0
   144b4:	beq	144e4 <__assert_fail@plt+0x298c>
   144b8:	mov	r2, r6
   144bc:	mov	r3, r7
   144c0:	add	r0, r4, #4
   144c4:	bl	14388 <__assert_fail@plt+0x2830>
   144c8:	cmn	r0, #1
   144cc:	beq	144e4 <__assert_fail@plt+0x298c>
   144d0:	mov	r1, r0
   144d4:	mov	r2, #0
   144d8:	mov	r0, r5
   144dc:	pop	{r4, r5, r6, r7, r8, lr}
   144e0:	b	17e2c <__assert_fail@plt+0x62d4>
   144e4:	mvn	r0, #0
   144e8:	pop	{r4, r5, r6, r7, r8, pc}
   144ec:	mov	r1, r0
   144f0:	push	{r4, r5, r6, lr}
   144f4:	mov	r4, r0
   144f8:	ldr	r0, [r1], #8
   144fc:	bl	142d0 <__assert_fail@plt+0x2778>
   14500:	subs	r5, r0, #0
   14504:	beq	14534 <__assert_fail@plt+0x29dc>
   14508:	add	r0, r4, #4
   1450c:	ldrd	r2, [sp, #16]
   14510:	bl	14388 <__assert_fail@plt+0x2830>
   14514:	cmn	r0, #1
   14518:	beq	14534 <__assert_fail@plt+0x29dc>
   1451c:	mov	r1, r0
   14520:	mov	r0, r5
   14524:	bl	176f0 <__assert_fail@plt+0x5b98>
   14528:	adds	r0, r0, #0
   1452c:	movne	r0, #1
   14530:	pop	{r4, r5, r6, pc}
   14534:	mvn	r0, #0
   14538:	pop	{r4, r5, r6, pc}
   1453c:	ldr	r3, [r3]
   14540:	bx	r3
   14544:	b	11720 <free@plt>
   14548:	push	{r4, lr}
   1454c:	bl	19010 <__assert_fail@plt+0x74b8>
   14550:	clz	r0, r0
   14554:	lsr	r0, r0, #5
   14558:	pop	{r4, pc}
   1455c:	push	{r4, lr}
   14560:	bl	116e4 <strcmp@plt>
   14564:	clz	r0, r0
   14568:	lsr	r0, r0, #5
   1456c:	pop	{r4, pc}
   14570:	b	17938 <__assert_fail@plt+0x5de0>
   14574:	tst	r2, #8
   14578:	and	r2, r2, #16
   1457c:	beq	14630 <__assert_fail@plt+0x2ad8>
   14580:	cmp	r2, #0
   14584:	push	{r4, r5, r6, r7, r8, lr}
   14588:	mov	r5, r0
   1458c:	mov	r6, r1
   14590:	bne	145c8 <__assert_fail@plt+0x2a70>
   14594:	bl	11954 <strlen@plt>
   14598:	mov	r1, r6
   1459c:	mov	r2, r0
   145a0:	mov	r7, r0
   145a4:	mov	r0, r5
   145a8:	bl	11b1c <strncmp@plt>
   145ac:	subs	r4, r0, #0
   145b0:	bne	145c0 <__assert_fail@plt+0x2a68>
   145b4:	ldrb	r3, [r6, r7]
   145b8:	cmp	r3, #47	; 0x2f
   145bc:	movne	r4, r3
   145c0:	mov	r0, r4
   145c4:	pop	{r4, r5, r6, r7, r8, pc}
   145c8:	mov	r0, r1
   145cc:	bl	1c09c <__assert_fail@plt+0xa544>
   145d0:	mov	r8, #47	; 0x2f
   145d4:	mov	r7, #0
   145d8:	mov	r6, r0
   145dc:	mov	r3, r0
   145e0:	b	145fc <__assert_fail@plt+0x2aa4>
   145e4:	strb	r7, [r4]
   145e8:	bl	19010 <__assert_fail@plt+0x74b8>
   145ec:	mov	r3, r4
   145f0:	subs	r4, r0, #0
   145f4:	ble	14620 <__assert_fail@plt+0x2ac8>
   145f8:	strb	r8, [r3], #1
   145fc:	mov	r1, #47	; 0x2f
   14600:	mov	r0, r3
   14604:	bl	11960 <strchr@plt>
   14608:	mov	r1, r6
   1460c:	subs	r4, r0, #0
   14610:	mov	r0, r5
   14614:	bne	145e4 <__assert_fail@plt+0x2a8c>
   14618:	bl	19010 <__assert_fail@plt+0x74b8>
   1461c:	mov	r4, r0
   14620:	mov	r0, r6
   14624:	bl	11720 <free@plt>
   14628:	mov	r0, r4
   1462c:	pop	{r4, r5, r6, r7, r8, pc}
   14630:	cmp	r2, #0
   14634:	beq	1463c <__assert_fail@plt+0x2ae4>
   14638:	b	19010 <__assert_fail@plt+0x74b8>
   1463c:	b	116e4 <strcmp@plt>
   14640:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14644:	sub	sp, sp, #64	; 0x40
   14648:	ldr	r9, [pc, #500]	; 14844 <__assert_fail@plt+0x2cec>
   1464c:	mov	r4, #0
   14650:	mov	r7, r1
   14654:	ldr	r3, [r9]
   14658:	str	r0, [sp, #20]
   1465c:	str	r3, [sp, #60]	; 0x3c
   14660:	str	r4, [sp, #12]
   14664:	strb	r4, [sp, #4]
   14668:	str	r4, [sp, #8]
   1466c:	strb	r4, [sp, #16]
   14670:	mov	r6, #1
   14674:	ldr	r8, [pc, #460]	; 14848 <__assert_fail@plt+0x2cf0>
   14678:	b	146ac <__assert_fail@plt+0x2b54>
   1467c:	mov	r0, sl
   14680:	bl	11750 <towlower@plt>
   14684:	rsb	r4, r4, r4, lsl #5
   14688:	add	r0, r4, r0
   1468c:	mov	r1, r7
   14690:	bl	21648 <fts_children@@Base+0x15bc>
   14694:	ldr	r2, [sp, #24]
   14698:	mov	r3, #0
   1469c:	add	r5, r5, r2
   146a0:	str	r5, [sp, #20]
   146a4:	strb	r3, [sp, #16]
   146a8:	mov	r4, r1
   146ac:	ldrb	r3, [sp, #4]
   146b0:	ldr	r5, [sp, #20]
   146b4:	cmp	r3, #0
   146b8:	bne	14720 <__assert_fail@plt+0x2bc8>
   146bc:	ldrb	r3, [r5]
   146c0:	and	r2, r3, #31
   146c4:	lsr	r3, r3, #5
   146c8:	ldr	r3, [r8, r3, lsl #2]
   146cc:	lsr	r3, r3, r2
   146d0:	tst	r3, #1
   146d4:	beq	1470c <__assert_fail@plt+0x2bb4>
   146d8:	str	r6, [sp, #24]
   146dc:	ldrb	sl, [r5]
   146e0:	strb	r6, [sp, #28]
   146e4:	strb	r6, [sp, #16]
   146e8:	cmp	sl, #0
   146ec:	str	sl, [sp, #32]
   146f0:	beq	147a8 <__assert_fail@plt+0x2c50>
   146f4:	ldrb	r3, [sp, #28]
   146f8:	ldr	r5, [sp, #20]
   146fc:	cmp	r3, #0
   14700:	bne	1467c <__assert_fail@plt+0x2b24>
   14704:	ldrb	r0, [r5]
   14708:	b	14684 <__assert_fail@plt+0x2b2c>
   1470c:	add	r0, sp, #8
   14710:	bl	1175c <mbsinit@plt>
   14714:	cmp	r0, #0
   14718:	beq	14804 <__assert_fail@plt+0x2cac>
   1471c:	strb	r6, [sp, #4]
   14720:	bl	11840 <__ctype_get_mb_cur_max@plt>
   14724:	mov	r1, r0
   14728:	mov	r0, r5
   1472c:	bl	1b8ec <__assert_fail@plt+0x9d94>
   14730:	add	r3, sp, #8
   14734:	mov	r1, r5
   14738:	mov	r2, r0
   1473c:	add	r0, sp, #32
   14740:	bl	201d8 <fts_children@@Base+0x14c>
   14744:	cmn	r0, #1
   14748:	str	r0, [sp, #24]
   1474c:	beq	147c4 <__assert_fail@plt+0x2c6c>
   14750:	cmn	r0, #2
   14754:	beq	147dc <__assert_fail@plt+0x2c84>
   14758:	cmp	r0, #0
   1475c:	bne	147fc <__assert_fail@plt+0x2ca4>
   14760:	ldr	r3, [sp, #20]
   14764:	str	r6, [sp, #24]
   14768:	ldrb	r3, [r3]
   1476c:	cmp	r3, #0
   14770:	bne	1482c <__assert_fail@plt+0x2cd4>
   14774:	ldr	sl, [sp, #32]
   14778:	cmp	sl, #0
   1477c:	bne	14818 <__assert_fail@plt+0x2cc0>
   14780:	add	r0, sp, #8
   14784:	strb	r6, [sp, #28]
   14788:	bl	1175c <mbsinit@plt>
   1478c:	cmp	r0, #0
   14790:	movne	r3, #0
   14794:	strbeq	r6, [sp, #16]
   14798:	strbne	r6, [sp, #16]
   1479c:	strbne	r3, [sp, #4]
   147a0:	cmp	sl, #0
   147a4:	bne	146f4 <__assert_fail@plt+0x2b9c>
   147a8:	ldr	r2, [sp, #60]	; 0x3c
   147ac:	ldr	r3, [r9]
   147b0:	mov	r0, r4
   147b4:	cmp	r2, r3
   147b8:	bne	14840 <__assert_fail@plt+0x2ce8>
   147bc:	add	sp, sp, #64	; 0x40
   147c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   147c4:	mov	r3, #0
   147c8:	str	r6, [sp, #24]
   147cc:	strb	r6, [sp, #16]
   147d0:	strb	r3, [sp, #28]
   147d4:	ldr	sl, [sp, #32]
   147d8:	b	146f4 <__assert_fail@plt+0x2b9c>
   147dc:	ldr	r0, [sp, #20]
   147e0:	bl	11954 <strlen@plt>
   147e4:	mov	r3, #0
   147e8:	strb	r6, [sp, #16]
   147ec:	strb	r3, [sp, #28]
   147f0:	ldr	sl, [sp, #32]
   147f4:	str	r0, [sp, #24]
   147f8:	b	146f4 <__assert_fail@plt+0x2b9c>
   147fc:	ldr	sl, [sp, #32]
   14800:	b	14780 <__assert_fail@plt+0x2c28>
   14804:	ldr	r3, [pc, #64]	; 1484c <__assert_fail@plt+0x2cf4>
   14808:	mov	r2, #150	; 0x96
   1480c:	ldr	r1, [pc, #60]	; 14850 <__assert_fail@plt+0x2cf8>
   14810:	ldr	r0, [pc, #60]	; 14854 <__assert_fail@plt+0x2cfc>
   14814:	bl	11b58 <__assert_fail@plt>
   14818:	ldr	r3, [pc, #44]	; 1484c <__assert_fail@plt+0x2cf4>
   1481c:	mov	r2, #179	; 0xb3
   14820:	ldr	r1, [pc, #40]	; 14850 <__assert_fail@plt+0x2cf8>
   14824:	ldr	r0, [pc, #44]	; 14858 <__assert_fail@plt+0x2d00>
   14828:	bl	11b58 <__assert_fail@plt>
   1482c:	ldr	r3, [pc, #24]	; 1484c <__assert_fail@plt+0x2cf4>
   14830:	mov	r2, #178	; 0xb2
   14834:	ldr	r1, [pc, #20]	; 14850 <__assert_fail@plt+0x2cf8>
   14838:	ldr	r0, [pc, #28]	; 1485c <__assert_fail@plt+0x2d04>
   1483c:	bl	11b58 <__assert_fail@plt>
   14840:	bl	11780 <__stack_chk_fail@plt>
   14844:	andeq	r4, r3, r8, lsl #30
   14848:	andeq	r3, r2, r0, lsr r9
   1484c:	andeq	r3, r2, r8, lsr #15
   14850:			; <UNDEFINED> instruction: 0x000237bc
   14854:	andeq	r3, r2, ip, asr #15
   14858:	strdeq	r3, [r2], -ip
   1485c:	andeq	r3, r2, r4, ror #15
   14860:	push	{lr}		; (str lr, [sp, #-4]!)
   14864:	and	ip, r1, #134217728	; 0x8000000
   14868:	ldrb	r3, [r0]
   1486c:	and	lr, r1, #32
   14870:	and	r1, r1, #2
   14874:	add	r2, r0, #1
   14878:	cmp	r3, #125	; 0x7d
   1487c:	ldrls	pc, [pc, r3, lsl #2]
   14880:	b	14a8c <__assert_fail@plt+0x2f34>
   14884:	ldrdeq	r4, [r1], -ip
   14888:	andeq	r4, r1, ip, lsl #21
   1488c:	andeq	r4, r1, ip, lsl #21
   14890:	andeq	r4, r1, ip, lsl #21
   14894:	andeq	r4, r1, ip, lsl #21
   14898:	andeq	r4, r1, ip, lsl #21
   1489c:	andeq	r4, r1, ip, lsl #21
   148a0:	andeq	r4, r1, ip, lsl #21
   148a4:	andeq	r4, r1, ip, lsl #21
   148a8:	andeq	r4, r1, ip, lsl #21
   148ac:	andeq	r4, r1, ip, lsl #21
   148b0:	andeq	r4, r1, ip, lsl #21
   148b4:	andeq	r4, r1, ip, lsl #21
   148b8:	andeq	r4, r1, ip, lsl #21
   148bc:	andeq	r4, r1, ip, lsl #21
   148c0:	andeq	r4, r1, ip, lsl #21
   148c4:	andeq	r4, r1, ip, lsl #21
   148c8:	andeq	r4, r1, ip, lsl #21
   148cc:	andeq	r4, r1, ip, lsl #21
   148d0:	andeq	r4, r1, ip, lsl #21
   148d4:	andeq	r4, r1, ip, lsl #21
   148d8:	andeq	r4, r1, ip, lsl #21
   148dc:	andeq	r4, r1, ip, lsl #21
   148e0:	andeq	r4, r1, ip, lsl #21
   148e4:	andeq	r4, r1, ip, lsl #21
   148e8:	andeq	r4, r1, ip, lsl #21
   148ec:	andeq	r4, r1, ip, lsl #21
   148f0:	andeq	r4, r1, ip, lsl #21
   148f4:	andeq	r4, r1, ip, lsl #21
   148f8:	andeq	r4, r1, ip, lsl #21
   148fc:	andeq	r4, r1, ip, lsl #21
   14900:	andeq	r4, r1, ip, lsl #21
   14904:	andeq	r4, r1, ip, lsl #21
   14908:	andeq	r4, r1, r0, asr #21
   1490c:	andeq	r4, r1, ip, lsl #21
   14910:	andeq	r4, r1, ip, lsl #21
   14914:	andeq	r4, r1, ip, lsl #21
   14918:	andeq	r4, r1, ip, lsl #21
   1491c:	andeq	r4, r1, ip, lsl #21
   14920:	andeq	r4, r1, ip, lsl #21
   14924:	andeq	r4, r1, ip, ror sl
   14928:	andeq	r4, r1, ip, ror sl
   1492c:	andeq	r4, r1, r4, lsl #21
   14930:	andeq	r4, r1, r0, asr #21
   14934:	andeq	r4, r1, ip, lsl #21
   14938:	andeq	r4, r1, ip, lsl #21
   1493c:	andeq	r4, r1, ip, ror sl
   14940:	andeq	r4, r1, ip, lsl #21
   14944:	andeq	r4, r1, ip, lsl #21
   14948:	andeq	r4, r1, ip, lsl #21
   1494c:	andeq	r4, r1, ip, lsl #21
   14950:	andeq	r4, r1, ip, lsl #21
   14954:	andeq	r4, r1, ip, lsl #21
   14958:	andeq	r4, r1, ip, lsl #21
   1495c:	andeq	r4, r1, ip, lsl #21
   14960:	andeq	r4, r1, ip, lsl #21
   14964:	andeq	r4, r1, ip, lsl #21
   14968:	andeq	r4, r1, ip, lsl #21
   1496c:	andeq	r4, r1, ip, lsl #21
   14970:	andeq	r4, r1, ip, lsl #21
   14974:	andeq	r4, r1, ip, lsl #21
   14978:	andeq	r4, r1, ip, lsl #21
   1497c:	andeq	r4, r1, ip, lsl #21
   14980:	andeq	r4, r1, r4, lsl #21
   14984:	andeq	r4, r1, r0, asr #21
   14988:	andeq	r4, r1, ip, lsl #21
   1498c:	andeq	r4, r1, ip, lsl #21
   14990:	andeq	r4, r1, ip, lsl #21
   14994:	andeq	r4, r1, ip, lsl #21
   14998:	andeq	r4, r1, ip, lsl #21
   1499c:	andeq	r4, r1, ip, lsl #21
   149a0:	andeq	r4, r1, ip, lsl #21
   149a4:	andeq	r4, r1, ip, lsl #21
   149a8:	andeq	r4, r1, ip, lsl #21
   149ac:	andeq	r4, r1, ip, lsl #21
   149b0:	andeq	r4, r1, ip, lsl #21
   149b4:	andeq	r4, r1, ip, lsl #21
   149b8:	andeq	r4, r1, ip, lsl #21
   149bc:	andeq	r4, r1, ip, lsl #21
   149c0:	andeq	r4, r1, ip, lsl #21
   149c4:	andeq	r4, r1, ip, lsl #21
   149c8:	andeq	r4, r1, ip, lsl #21
   149cc:	andeq	r4, r1, ip, lsl #21
   149d0:	andeq	r4, r1, ip, lsl #21
   149d4:	andeq	r4, r1, ip, lsl #21
   149d8:	andeq	r4, r1, ip, lsl #21
   149dc:	andeq	r4, r1, ip, lsl #21
   149e0:	andeq	r4, r1, ip, lsl #21
   149e4:	andeq	r4, r1, ip, lsl #21
   149e8:	andeq	r4, r1, ip, lsl #21
   149ec:	andeq	r4, r1, ip, lsl #21
   149f0:	andeq	r4, r1, r4, lsl #21
   149f4:	muleq	r1, r8, sl
   149f8:	andeq	r4, r1, ip, lsl #21
   149fc:	andeq	r4, r1, ip, lsl #21
   14a00:	andeq	r4, r1, ip, lsl #21
   14a04:	andeq	r4, r1, ip, lsl #21
   14a08:	andeq	r4, r1, ip, lsl #21
   14a0c:	andeq	r4, r1, ip, lsl #21
   14a10:	andeq	r4, r1, ip, lsl #21
   14a14:	andeq	r4, r1, ip, lsl #21
   14a18:	andeq	r4, r1, ip, lsl #21
   14a1c:	andeq	r4, r1, ip, lsl #21
   14a20:	andeq	r4, r1, ip, lsl #21
   14a24:	andeq	r4, r1, ip, lsl #21
   14a28:	andeq	r4, r1, ip, lsl #21
   14a2c:	andeq	r4, r1, ip, lsl #21
   14a30:	andeq	r4, r1, ip, lsl #21
   14a34:	andeq	r4, r1, ip, lsl #21
   14a38:	andeq	r4, r1, ip, lsl #21
   14a3c:	andeq	r4, r1, ip, lsl #21
   14a40:	andeq	r4, r1, ip, lsl #21
   14a44:	andeq	r4, r1, ip, lsl #21
   14a48:	andeq	r4, r1, ip, lsl #21
   14a4c:	andeq	r4, r1, ip, lsl #21
   14a50:	andeq	r4, r1, ip, lsl #21
   14a54:	andeq	r4, r1, ip, lsl #21
   14a58:	andeq	r4, r1, ip, lsl #21
   14a5c:	andeq	r4, r1, ip, lsl #21
   14a60:	andeq	r4, r1, ip, lsl #21
   14a64:	andeq	r4, r1, ip, lsl #21
   14a68:	andeq	r4, r1, ip, lsl #21
   14a6c:	andeq	r4, r1, ip, lsl #21
   14a70:	andeq	r4, r1, ip, ror sl
   14a74:	andeq	r4, r1, ip, lsl #21
   14a78:	andeq	r4, r1, ip, ror sl
   14a7c:	cmp	ip, #0
   14a80:	beq	14a8c <__assert_fail@plt+0x2f34>
   14a84:	mov	r0, #1
   14a88:	pop	{pc}		; (ldr pc, [sp], #4)
   14a8c:	ldrb	r3, [r0, #1]
   14a90:	mov	r0, r2
   14a94:	b	14874 <__assert_fail@plt+0x2d1c>
   14a98:	cmp	ip, #0
   14a9c:	bne	14a8c <__assert_fail@plt+0x2f34>
   14aa0:	cmp	r1, #0
   14aa4:	bne	14ab4 <__assert_fail@plt+0x2f5c>
   14aa8:	ldrb	r3, [r0, #1]
   14aac:	cmp	r3, #0
   14ab0:	addne	r2, r0, #2
   14ab4:	ldrb	r3, [r2]
   14ab8:	mov	r0, r2
   14abc:	b	14874 <__assert_fail@plt+0x2d1c>
   14ac0:	cmp	lr, #0
   14ac4:	beq	14a8c <__assert_fail@plt+0x2f34>
   14ac8:	ldrb	r3, [r0, #1]
   14acc:	cmp	r3, #40	; 0x28
   14ad0:	beq	14a84 <__assert_fail@plt+0x2f2c>
   14ad4:	mov	r0, r2
   14ad8:	b	14874 <__assert_fail@plt+0x2d1c>
   14adc:	mov	r0, #0
   14ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ae4:	push	{r4, r5, r6, lr}
   14ae8:	mov	r4, r0
   14aec:	mov	r0, #8
   14af0:	mov	r5, r1
   14af4:	bl	1be70 <__assert_fail@plt+0xa318>
   14af8:	ldr	r3, [r4, #4]
   14afc:	str	r0, [r4, #4]
   14b00:	stm	r0, {r3, r5}
   14b04:	pop	{r4, r5, r6, pc}
   14b08:	b	14860 <__assert_fail@plt+0x2d08>
   14b0c:	mov	r0, #8
   14b10:	b	1c02c <__assert_fail@plt+0xa4d4>
   14b14:	push	{r4, r5, r6, r7, r8, lr}
   14b18:	mov	r6, r0
   14b1c:	ldr	r4, [r0]
   14b20:	cmp	r4, #0
   14b24:	beq	14ba4 <__assert_fail@plt+0x304c>
   14b28:	ldr	r3, [r4, #4]
   14b2c:	ldr	r7, [r4]
   14b30:	cmp	r3, #0
   14b34:	beq	14bd8 <__assert_fail@plt+0x3080>
   14b38:	cmp	r3, #1
   14b3c:	bne	14b94 <__assert_fail@plt+0x303c>
   14b40:	ldr	r2, [r4, #20]
   14b44:	ldr	r0, [r4, #12]
   14b48:	cmp	r2, #0
   14b4c:	beq	14b90 <__assert_fail@plt+0x3038>
   14b50:	mov	r5, #0
   14b54:	b	14b60 <__assert_fail@plt+0x3008>
   14b58:	cmp	r5, r2
   14b5c:	bcs	14b90 <__assert_fail@plt+0x3038>
   14b60:	add	r3, r5, r5, lsl #3
   14b64:	add	r5, r5, #1
   14b68:	ldr	r1, [r0, r3, lsl #2]
   14b6c:	add	r3, r0, r3, lsl #2
   14b70:	tst	r1, #134217728	; 0x8000000
   14b74:	beq	14b58 <__assert_fail@plt+0x3000>
   14b78:	add	r0, r3, #4
   14b7c:	bl	11834 <regfree@plt>
   14b80:	ldr	r2, [r4, #20]
   14b84:	ldr	r0, [r4, #12]
   14b88:	cmp	r5, r2
   14b8c:	bcc	14b60 <__assert_fail@plt+0x3008>
   14b90:	bl	11720 <free@plt>
   14b94:	mov	r0, r4
   14b98:	bl	11720 <free@plt>
   14b9c:	subs	r4, r7, #0
   14ba0:	bne	14b28 <__assert_fail@plt+0x2fd0>
   14ba4:	ldr	r4, [r6, #4]
   14ba8:	cmp	r4, #0
   14bac:	beq	14bcc <__assert_fail@plt+0x3074>
   14bb0:	ldr	r0, [r4, #4]
   14bb4:	ldr	r5, [r4]
   14bb8:	bl	11720 <free@plt>
   14bbc:	mov	r0, r4
   14bc0:	bl	11720 <free@plt>
   14bc4:	subs	r4, r5, #0
   14bc8:	bne	14bb0 <__assert_fail@plt+0x3058>
   14bcc:	mov	r0, r6
   14bd0:	pop	{r4, r5, r6, r7, r8, lr}
   14bd4:	b	11720 <free@plt>
   14bd8:	ldr	r0, [r4, #12]
   14bdc:	bl	17ba8 <__assert_fail@plt+0x6050>
   14be0:	mov	r0, r4
   14be4:	bl	11720 <free@plt>
   14be8:	subs	r4, r7, #0
   14bec:	bne	14b28 <__assert_fail@plt+0x2fd0>
   14bf0:	b	14ba4 <__assert_fail@plt+0x304c>
   14bf4:	ldr	r3, [pc, #188]	; 14cb8 <__assert_fail@plt+0x3160>
   14bf8:	tst	r2, #268435456	; 0x10000000
   14bfc:	push	{r4, r5, r6, r7, r8, lr}
   14c00:	mov	r8, r2
   14c04:	ldr	r6, [pc, #176]	; 14cbc <__assert_fail@plt+0x3164>
   14c08:	moveq	r6, r3
   14c0c:	mov	r7, r0
   14c10:	mov	r4, r1
   14c14:	blx	r6
   14c18:	tst	r8, #1073741824	; 0x40000000
   14c1c:	clz	r2, r0
   14c20:	lsr	r2, r2, #5
   14c24:	bne	14c5c <__assert_fail@plt+0x3104>
   14c28:	ldrb	r3, [r4]
   14c2c:	cmp	r3, #0
   14c30:	beq	14c5c <__assert_fail@plt+0x3104>
   14c34:	cmp	r0, #0
   14c38:	beq	14ca0 <__assert_fail@plt+0x3148>
   14c3c:	cmp	r3, #47	; 0x2f
   14c40:	add	r5, r4, #1
   14c44:	ldrb	r3, [r4, #1]
   14c48:	beq	14c70 <__assert_fail@plt+0x3118>
   14c4c:	cmp	r3, #0
   14c50:	mov	r4, r5
   14c54:	bne	14c3c <__assert_fail@plt+0x30e4>
   14c58:	mov	r2, r3
   14c5c:	mov	r0, r2
   14c60:	pop	{r4, r5, r6, r7, r8, pc}
   14c64:	ldrb	r3, [r5, #1]
   14c68:	mov	r4, r5
   14c6c:	add	r5, r5, #1
   14c70:	cmp	r3, #47	; 0x2f
   14c74:	beq	14c64 <__assert_fail@plt+0x310c>
   14c78:	mov	r2, r8
   14c7c:	mov	r1, r5
   14c80:	mov	r0, r7
   14c84:	blx	r6
   14c88:	ldrb	r3, [r4, #1]
   14c8c:	cmp	r3, #0
   14c90:	beq	14cac <__assert_fail@plt+0x3154>
   14c94:	cmp	r0, #0
   14c98:	mov	r4, r5
   14c9c:	bne	14c3c <__assert_fail@plt+0x30e4>
   14ca0:	mov	r2, #1
   14ca4:	mov	r0, r2
   14ca8:	pop	{r4, r5, r6, r7, r8, pc}
   14cac:	clz	r2, r0
   14cb0:	lsr	r2, r2, #5
   14cb4:	b	14c5c <__assert_fail@plt+0x3104>
   14cb8:	andeq	r4, r1, r4, ror r5
   14cbc:	muleq	r1, r4, r8
   14cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cc4:	sub	sp, sp, #12
   14cc8:	ldr	r6, [r0]
   14ccc:	cmp	r6, #0
   14cd0:	moveq	r0, r6
   14cd4:	beq	14e1c <__assert_fail@plt+0x32c4>
   14cd8:	ldr	r3, [r6, #4]
   14cdc:	mov	r7, r1
   14ce0:	cmp	r3, #0
   14ce4:	mov	r5, #0
   14ce8:	bne	14d84 <__assert_fail@plt+0x322c>
   14cec:	cmp	r5, #0
   14cf0:	beq	14e24 <__assert_fail@plt+0x32cc>
   14cf4:	ldr	r8, [r6, #8]
   14cf8:	ldr	sl, [r6, #12]
   14cfc:	and	r9, r8, #8
   14d00:	mov	r4, r7
   14d04:	mov	r1, r4
   14d08:	mov	r0, r5
   14d0c:	bl	11858 <strcpy@plt>
   14d10:	mov	r1, r5
   14d14:	mov	r0, sl
   14d18:	bl	176f0 <__assert_fail@plt+0x5b98>
   14d1c:	mov	r1, #47	; 0x2f
   14d20:	subs	fp, r0, #0
   14d24:	mov	r0, r5
   14d28:	bne	14dfc <__assert_fail@plt+0x32a4>
   14d2c:	cmp	r9, #0
   14d30:	beq	14d44 <__assert_fail@plt+0x31ec>
   14d34:	bl	11a38 <strrchr@plt>
   14d38:	cmp	r0, #0
   14d3c:	strbne	fp, [r0]
   14d40:	bne	14d10 <__assert_fail@plt+0x31b8>
   14d44:	tst	r8, #1073741824	; 0x40000000
   14d48:	bne	14d68 <__assert_fail@plt+0x3210>
   14d4c:	mov	r0, r4
   14d50:	mov	r1, #47	; 0x2f
   14d54:	bl	11960 <strchr@plt>
   14d58:	cmp	r0, #0
   14d5c:	beq	14d68 <__assert_fail@plt+0x3210>
   14d60:	adds	r4, r0, #1
   14d64:	bne	14d04 <__assert_fail@plt+0x31ac>
   14d68:	ldr	r3, [r6]
   14d6c:	cmp	r3, #0
   14d70:	beq	14e3c <__assert_fail@plt+0x32e4>
   14d74:	mov	r6, r3
   14d78:	ldr	r3, [r6, #4]
   14d7c:	cmp	r3, #0
   14d80:	beq	14cec <__assert_fail@plt+0x3194>
   14d84:	ldr	r9, [r6, #20]
   14d88:	ldr	r4, [r6, #12]
   14d8c:	cmp	r9, #0
   14d90:	beq	14d68 <__assert_fail@plt+0x3210>
   14d94:	add	r4, r4, #4
   14d98:	mov	r8, #0
   14d9c:	b	14dc8 <__assert_fail@plt+0x3270>
   14da0:	str	r3, [sp]
   14da4:	bl	117a4 <regexec@plt>
   14da8:	add	r8, r8, #1
   14dac:	clz	r0, r0
   14db0:	lsr	r0, r0, #5
   14db4:	cmp	r0, #0
   14db8:	bne	14dfc <__assert_fail@plt+0x32a4>
   14dbc:	cmp	r9, r8
   14dc0:	add	r4, r4, #36	; 0x24
   14dc4:	beq	14d68 <__assert_fail@plt+0x3210>
   14dc8:	ldr	ip, [r4, #-4]
   14dcc:	mov	r3, #0
   14dd0:	tst	ip, #134217728	; 0x8000000
   14dd4:	mov	r2, r3
   14dd8:	mov	r1, r7
   14ddc:	mov	r0, r4
   14de0:	bne	14da0 <__assert_fail@plt+0x3248>
   14de4:	mov	r2, ip
   14de8:	ldr	r0, [r4]
   14dec:	bl	14bf4 <__assert_fail@plt+0x309c>
   14df0:	add	r8, r8, #1
   14df4:	cmp	r0, #0
   14df8:	beq	14dbc <__assert_fail@plt+0x3264>
   14dfc:	mov	r4, #0
   14e00:	mov	r0, r5
   14e04:	bl	11720 <free@plt>
   14e08:	ldr	r0, [r6, #8]
   14e0c:	lsr	r0, r0, #29
   14e10:	eor	r0, r0, #1
   14e14:	and	r0, r0, #1
   14e18:	eor	r0, r0, r4
   14e1c:	add	sp, sp, #12
   14e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e24:	mov	r0, r7
   14e28:	bl	11954 <strlen@plt>
   14e2c:	add	r0, r0, #1
   14e30:	bl	1be70 <__assert_fail@plt+0xa318>
   14e34:	mov	r5, r0
   14e38:	b	14cf4 <__assert_fail@plt+0x319c>
   14e3c:	mov	r4, #1
   14e40:	b	14e00 <__assert_fail@plt+0x32a8>
   14e44:	tst	r2, #402653184	; 0x18000000
   14e48:	push	{r4, r5, r6, r7, r8, r9, lr}
   14e4c:	mov	r6, r0
   14e50:	sub	sp, sp, #12
   14e54:	mov	r5, r2
   14e58:	mov	r7, r1
   14e5c:	ldr	r4, [r0]
   14e60:	beq	14f44 <__assert_fail@plt+0x33ec>
   14e64:	mov	r1, r2
   14e68:	mov	r0, r7
   14e6c:	bl	14860 <__assert_fail@plt+0x2d08>
   14e70:	cmp	r0, #0
   14e74:	beq	14f44 <__assert_fail@plt+0x33ec>
   14e78:	cmp	r4, #0
   14e7c:	beq	14e8c <__assert_fail@plt+0x3334>
   14e80:	ldr	r3, [r4, #4]
   14e84:	cmp	r3, #1
   14e88:	beq	15058 <__assert_fail@plt+0x3500>
   14e8c:	mov	r0, #24
   14e90:	bl	1c02c <__assert_fail@plt+0xa4d4>
   14e94:	ldr	r3, [r6]
   14e98:	mov	r2, #1
   14e9c:	mov	r4, r0
   14ea0:	stmib	r0, {r2, r5}
   14ea4:	str	r3, [r0]
   14ea8:	str	r0, [r6]
   14eac:	ldr	r8, [r4, #20]
   14eb0:	ldr	ip, [r4, #16]
   14eb4:	ldr	r0, [r4, #12]
   14eb8:	cmp	r8, ip
   14ebc:	beq	1506c <__assert_fail@plt+0x3514>
   14ec0:	add	r3, r8, r8, lsl #3
   14ec4:	add	r2, r8, #1
   14ec8:	lsl	r3, r3, #2
   14ecc:	tst	r5, #134217728	; 0x8000000
   14ed0:	str	r2, [r4, #20]
   14ed4:	add	r9, r0, r3
   14ed8:	str	r5, [r0, r3]
   14edc:	beq	15044 <__assert_fail@plt+0x34ec>
   14ee0:	asr	r6, r5, #3
   14ee4:	and	r6, r6, #2
   14ee8:	tst	r5, #8
   14eec:	orr	r6, r6, #9
   14ef0:	beq	150d0 <__assert_fail@plt+0x3578>
   14ef4:	mov	r0, r7
   14ef8:	bl	11954 <strlen@plt>
   14efc:	cmp	r0, #0
   14f00:	beq	14f38 <__assert_fail@plt+0x33e0>
   14f04:	sub	r5, r0, #1
   14f08:	add	r3, r7, r5
   14f0c:	ldrb	r2, [r7, r5]
   14f10:	cmp	r2, #47	; 0x2f
   14f14:	beq	14f30 <__assert_fail@plt+0x33d8>
   14f18:	b	1511c <__assert_fail@plt+0x35c4>
   14f1c:	ldrb	r2, [r3, #-1]!
   14f20:	sub	r1, r5, #1
   14f24:	cmp	r2, #47	; 0x2f
   14f28:	bne	15120 <__assert_fail@plt+0x35c8>
   14f2c:	mov	r5, r1
   14f30:	cmp	r5, #0
   14f34:	bne	14f1c <__assert_fail@plt+0x33c4>
   14f38:	str	r8, [r4, #20]
   14f3c:	add	sp, sp, #12
   14f40:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14f44:	cmp	r4, #0
   14f48:	beq	14f58 <__assert_fail@plt+0x3400>
   14f4c:	ldr	r3, [r4, #4]
   14f50:	cmp	r3, #0
   14f54:	beq	14fe8 <__assert_fail@plt+0x3490>
   14f58:	mov	r0, #24
   14f5c:	bl	1c02c <__assert_fail@plt+0xa4d4>
   14f60:	ldr	r8, [pc, #540]	; 15184 <__assert_fail@plt+0x362c>
   14f64:	mov	r1, #0
   14f68:	ldr	lr, [pc, #536]	; 15188 <__assert_fail@plt+0x3630>
   14f6c:	ldr	ip, [pc, #536]	; 1518c <__assert_fail@plt+0x3634>
   14f70:	ldr	r3, [pc, #536]	; 15190 <__assert_fail@plt+0x3638>
   14f74:	ldr	r2, [pc, #536]	; 15194 <__assert_fail@plt+0x363c>
   14f78:	mov	r4, r0
   14f7c:	and	r0, r5, #16
   14f80:	cmp	r0, r1
   14f84:	stmib	r4, {r1, r5}
   14f88:	movne	r3, r8
   14f8c:	movne	r2, lr
   14f90:	mov	r0, r1
   14f94:	str	ip, [sp]
   14f98:	bl	179a8 <__assert_fail@plt+0x5e50>
   14f9c:	ldr	r3, [r6]
   14fa0:	str	r4, [r6]
   14fa4:	str	r3, [r4]
   14fa8:	str	r0, [r4, #12]
   14fac:	mov	r0, r7
   14fb0:	bl	1c09c <__assert_fail@plt+0xa544>
   14fb4:	and	r5, r5, #268435458	; 0x10000002
   14fb8:	cmp	r5, #268435456	; 0x10000000
   14fbc:	mov	r6, r0
   14fc0:	beq	15000 <__assert_fail@plt+0x34a8>
   14fc4:	ldr	r0, [r4, #12]
   14fc8:	mov	r1, r6
   14fcc:	bl	17fd4 <__assert_fail@plt+0x647c>
   14fd0:	cmp	r6, r0
   14fd4:	beq	14f3c <__assert_fail@plt+0x33e4>
   14fd8:	mov	r0, r6
   14fdc:	add	sp, sp, #12
   14fe0:	pop	{r4, r5, r6, r7, r8, r9, lr}
   14fe4:	b	11720 <free@plt>
   14fe8:	ldr	r3, [r4, #8]
   14fec:	ldr	r2, [pc, #420]	; 15198 <__assert_fail@plt+0x3640>
   14ff0:	eor	r3, r3, r5
   14ff4:	tst	r3, r2
   14ff8:	beq	14fac <__assert_fail@plt+0x3454>
   14ffc:	b	14f58 <__assert_fail@plt+0x3400>
   15000:	mov	r1, r0
   15004:	b	15018 <__assert_fail@plt+0x34c0>
   15008:	cmp	r2, #0
   1500c:	strb	r2, [r0], #1
   15010:	beq	14fc4 <__assert_fail@plt+0x346c>
   15014:	mov	r1, r3
   15018:	mov	r3, r1
   1501c:	ldrb	r2, [r3], #1
   15020:	cmp	r2, #92	; 0x5c
   15024:	bne	15008 <__assert_fail@plt+0x34b0>
   15028:	ldrb	ip, [r1, #1]
   1502c:	cmp	ip, #0
   15030:	movne	r2, ip
   15034:	addne	r3, r1, #2
   15038:	bne	15008 <__assert_fail@plt+0x34b0>
   1503c:	strb	r2, [r0], #1
   15040:	b	15014 <__assert_fail@plt+0x34bc>
   15044:	tst	r5, #67108864	; 0x4000000
   15048:	bne	150f8 <__assert_fail@plt+0x35a0>
   1504c:	str	r7, [r9, #4]
   15050:	add	sp, sp, #12
   15054:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15058:	ldr	r3, [r4, #8]
   1505c:	eor	r3, r3, r5
   15060:	tst	r3, #536870912	; 0x20000000
   15064:	beq	14eac <__assert_fail@plt+0x3354>
   15068:	b	14e8c <__assert_fail@plt+0x3334>
   1506c:	cmp	r0, #0
   15070:	beq	150a4 <__assert_fail@plt+0x354c>
   15074:	ldr	r3, [pc, #288]	; 1519c <__assert_fail@plt+0x3644>
   15078:	cmp	ip, r3
   1507c:	bhi	150cc <__assert_fail@plt+0x3574>
   15080:	add	r3, ip, #1
   15084:	add	ip, r3, ip, lsr #1
   15088:	add	r1, ip, ip, lsl #3
   1508c:	lsl	r1, r1, #2
   15090:	str	ip, [r4, #16]
   15094:	bl	1becc <__assert_fail@plt+0xa374>
   15098:	ldr	r8, [r4, #20]
   1509c:	str	r0, [r4, #12]
   150a0:	b	14ec0 <__assert_fail@plt+0x3368>
   150a4:	cmp	ip, #0
   150a8:	beq	15178 <__assert_fail@plt+0x3620>
   150ac:	mov	r2, #36	; 0x24
   150b0:	umull	r8, r9, ip, r2
   150b4:	adds	r3, r9, #0
   150b8:	movne	r3, #1
   150bc:	cmp	r8, #0
   150c0:	blt	150cc <__assert_fail@plt+0x3574>
   150c4:	cmp	r3, #0
   150c8:	beq	15088 <__assert_fail@plt+0x3530>
   150cc:	bl	1c0b8 <__assert_fail@plt+0xa560>
   150d0:	mov	r2, r6
   150d4:	mov	r1, r7
   150d8:	add	r0, r9, #4
   150dc:	bl	11a98 <regcomp@plt>
   150e0:	mov	r5, r0
   150e4:	cmp	r5, #0
   150e8:	beq	14f3c <__assert_fail@plt+0x33e4>
   150ec:	ldr	r8, [r4, #20]
   150f0:	sub	r8, r8, #1
   150f4:	b	14f38 <__assert_fail@plt+0x33e0>
   150f8:	mov	r0, r7
   150fc:	bl	1c09c <__assert_fail@plt+0xa544>
   15100:	mov	r7, r0
   15104:	mov	r0, #8
   15108:	bl	1be70 <__assert_fail@plt+0xa318>
   1510c:	ldr	r3, [r6, #4]
   15110:	str	r0, [r6, #4]
   15114:	stm	r0, {r3, r7}
   15118:	b	1504c <__assert_fail@plt+0x34f4>
   1511c:	mov	r5, r0
   15120:	add	r0, r5, #7
   15124:	bl	1be70 <__assert_fail@plt+0xa318>
   15128:	mov	r2, r5
   1512c:	mov	r1, r7
   15130:	mov	r8, r0
   15134:	bl	11738 <memcpy@plt>
   15138:	ldr	r3, [pc, #96]	; 151a0 <__assert_fail@plt+0x3648>
   1513c:	add	ip, r8, r5
   15140:	mov	r2, r6
   15144:	ldr	r0, [r3]
   15148:	ldrh	lr, [r3, #4]
   1514c:	ldrb	r3, [r3, #6]
   15150:	str	r0, [r8, r5]
   15154:	mov	r1, r8
   15158:	add	r0, r9, #4
   1515c:	strh	lr, [ip, #4]
   15160:	strb	r3, [ip, #6]
   15164:	bl	11a98 <regcomp@plt>
   15168:	mov	r5, r0
   1516c:	mov	r0, r8
   15170:	bl	11720 <free@plt>
   15174:	b	150e4 <__assert_fail@plt+0x358c>
   15178:	mov	r1, #36	; 0x24
   1517c:	mov	ip, #1
   15180:	b	15090 <__assert_fail@plt+0x3538>
   15184:	andeq	r4, r1, r8, asr #10
   15188:	andeq	r4, r1, r0, asr #12
   1518c:	andeq	r4, r1, r4, asr #10
   15190:	andeq	r4, r1, ip, asr r5
   15194:	andeq	r4, r1, r0, ror r5
   15198:	andvs	r0, r0, r8, lsl r0
   1519c:	subseq	sp, lr, #150	; 0x96
   151a0:	andeq	r3, r2, r0, lsl r8
   151a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151a8:	sub	sp, sp, #36	; 0x24
   151ac:	ldr	lr, [pc, #500]	; 153a8 <__assert_fail@plt+0x3850>
   151b0:	str	r3, [sp, #8]
   151b4:	ldr	r3, [sp, #76]	; 0x4c
   151b8:	ldr	lr, [lr]
   151bc:	mov	ip, #0
   151c0:	mov	r4, ip
   151c4:	str	r0, [sp, #4]
   151c8:	mov	r8, r1
   151cc:	mov	r5, r2
   151d0:	str	lr, [sp, #28]
   151d4:	str	ip, [sp, #24]
   151d8:	mov	r9, ip
   151dc:	ldrb	r6, [sp, #72]	; 0x48
   151e0:	str	r3, [sp, #12]
   151e4:	b	151f0 <__assert_fail@plt+0x3698>
   151e8:	strb	r7, [r9, r4]
   151ec:	add	r4, r4, #1
   151f0:	ldr	r3, [r5, #4]
   151f4:	ldr	r2, [r5, #8]
   151f8:	cmp	r3, r2
   151fc:	bcs	1522c <__assert_fail@plt+0x36d4>
   15200:	add	r2, r3, #1
   15204:	str	r2, [r5, #4]
   15208:	ldrb	r7, [r3]
   1520c:	ldr	r3, [sp, #24]
   15210:	cmp	r3, r4
   15214:	bne	151e8 <__assert_fail@plt+0x3690>
   15218:	mov	r0, r9
   1521c:	add	r1, sp, #24
   15220:	bl	1bfd8 <__assert_fail@plt+0xa480>
   15224:	mov	r9, r0
   15228:	b	151e8 <__assert_fail@plt+0x3690>
   1522c:	mov	r0, r5
   15230:	bl	11a14 <__uflow@plt>
   15234:	cmn	r0, #1
   15238:	bne	1539c <__assert_fail@plt+0x3844>
   1523c:	bl	11984 <__errno_location@plt>
   15240:	ldr	r7, [r5]
   15244:	and	r7, r7, #32
   15248:	cmp	r7, #0
   1524c:	streq	r7, [sp, #20]
   15250:	str	r0, [sp, #16]
   15254:	beq	1526c <__assert_fail@plt+0x3714>
   15258:	ldr	r7, [r0]
   1525c:	adds	r3, r7, #0
   15260:	movne	r3, #1
   15264:	rsb	r3, r3, #0
   15268:	str	r3, [sp, #20]
   1526c:	mov	r0, r9
   15270:	add	r1, r4, #1
   15274:	bl	1becc <__assert_fail@plt+0xa374>
   15278:	cmp	r4, #0
   1527c:	mov	sl, r0
   15280:	strb	r6, [r0, r4]
   15284:	bne	152c4 <__assert_fail@plt+0x376c>
   15288:	mov	r0, #8
   1528c:	bl	1be70 <__assert_fail@plt+0xa318>
   15290:	ldr	r2, [r8, #4]
   15294:	str	r0, [r8, #4]
   15298:	stm	r0, {r2, sl}
   1529c:	ldr	r3, [pc, #260]	; 153a8 <__assert_fail@plt+0x3850>
   152a0:	ldr	r2, [sp, #28]
   152a4:	ldr	r1, [sp, #16]
   152a8:	ldr	r3, [r3]
   152ac:	ldr	r0, [sp, #20]
   152b0:	cmp	r2, r3
   152b4:	str	r7, [r1]
   152b8:	bne	153a4 <__assert_fail@plt+0x384c>
   152bc:	add	sp, sp, #36	; 0x24
   152c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152c4:	add	r2, r0, r4
   152c8:	mov	r0, #8
   152cc:	ldrb	r2, [r2, #-1]
   152d0:	cmp	r2, r6
   152d4:	addne	r4, r4, #1
   152d8:	bl	1be70 <__assert_fail@plt+0xa318>
   152dc:	ldr	r2, [r8, #4]
   152e0:	add	r4, sl, r4
   152e4:	cmp	sl, r4
   152e8:	stm	r0, {r2, sl}
   152ec:	str	r0, [r8, #4]
   152f0:	bcs	1529c <__assert_fail@plt+0x3744>
   152f4:	lsl	r9, r6, #1
   152f8:	mov	fp, sl
   152fc:	b	1530c <__assert_fail@plt+0x37b4>
   15300:	cmp	r4, r5
   15304:	mov	sl, r5
   15308:	beq	1529c <__assert_fail@plt+0x3744>
   1530c:	mov	r5, sl
   15310:	ldrb	r2, [r5], #1
   15314:	cmp	r2, r6
   15318:	bne	15300 <__assert_fail@plt+0x37a8>
   1531c:	bl	11924 <__ctype_b_loc@plt>
   15320:	ldr	ip, [r0]
   15324:	ldrh	r2, [ip, r9]
   15328:	tst	r2, #8192	; 0x2000
   1532c:	bne	15354 <__assert_fail@plt+0x37fc>
   15330:	mov	r3, #0
   15334:	strb	r3, [sl]
   15338:	mov	r1, fp
   1533c:	ldrd	r2, [sp, #8]
   15340:	mov	r0, r8
   15344:	ldr	ip, [sp, #4]
   15348:	blx	ip
   1534c:	mov	fp, r5
   15350:	b	15300 <__assert_fail@plt+0x37a8>
   15354:	cmp	fp, sl
   15358:	beq	1534c <__assert_fail@plt+0x37f4>
   1535c:	ldrb	r2, [r5, #-2]
   15360:	lsl	r2, r2, #1
   15364:	ldrh	r2, [ip, r2]
   15368:	tst	r2, #8192	; 0x2000
   1536c:	beq	15330 <__assert_fail@plt+0x37d8>
   15370:	sub	r2, sl, #1
   15374:	b	1538c <__assert_fail@plt+0x3834>
   15378:	ldrb	r3, [r2, #-1]!
   1537c:	lsl	r3, r3, #1
   15380:	ldrh	r3, [ip, r3]
   15384:	tst	r3, #8192	; 0x2000
   15388:	beq	15330 <__assert_fail@plt+0x37d8>
   1538c:	cmp	fp, r2
   15390:	mov	sl, r2
   15394:	bne	15378 <__assert_fail@plt+0x3820>
   15398:	b	1534c <__assert_fail@plt+0x37f4>
   1539c:	uxtb	r7, r0
   153a0:	b	1520c <__assert_fail@plt+0x36b4>
   153a4:	bl	11780 <__stack_chk_fail@plt>
   153a8:	andeq	r4, r3, r8, lsl #30
   153ac:	push	{r4, r5, r6, r7, lr}
   153b0:	sub	sp, sp, #20
   153b4:	mov	r5, r1
   153b8:	str	r0, [sp, #12]
   153bc:	ldrb	r0, [r2]
   153c0:	mov	r6, r3
   153c4:	ldrb	r4, [sp, #40]	; 0x28
   153c8:	cmp	r0, #45	; 0x2d
   153cc:	beq	15424 <__assert_fail@plt+0x38cc>
   153d0:	mov	r0, r2
   153d4:	ldr	r1, [pc, #136]	; 15464 <__assert_fail@plt+0x390c>
   153d8:	bl	11ac8 <fopen64@plt>
   153dc:	subs	r7, r0, #0
   153e0:	beq	1545c <__assert_fail@plt+0x3904>
   153e4:	add	r2, sp, #12
   153e8:	str	r4, [sp]
   153ec:	mov	r3, r6
   153f0:	mov	r1, r5
   153f4:	str	r2, [sp, #4]
   153f8:	ldr	r0, [pc, #104]	; 15468 <__assert_fail@plt+0x3910>
   153fc:	mov	r2, r7
   15400:	bl	151a4 <__assert_fail@plt+0x364c>
   15404:	mov	r4, r0
   15408:	mov	r0, r7
   1540c:	bl	1dd58 <__assert_fail@plt+0xc200>
   15410:	cmp	r0, #0
   15414:	bne	1545c <__assert_fail@plt+0x3904>
   15418:	mov	r0, r4
   1541c:	add	sp, sp, #20
   15420:	pop	{r4, r5, r6, r7, pc}
   15424:	ldrb	r0, [r2, #1]
   15428:	cmp	r0, #0
   1542c:	bne	153d0 <__assert_fail@plt+0x3878>
   15430:	ldr	r2, [pc, #52]	; 1546c <__assert_fail@plt+0x3914>
   15434:	add	r0, sp, #12
   15438:	str	r4, [sp]
   1543c:	ldr	r2, [r2]
   15440:	str	r0, [sp, #4]
   15444:	ldr	r0, [pc, #28]	; 15468 <__assert_fail@plt+0x3910>
   15448:	bl	151a4 <__assert_fail@plt+0x364c>
   1544c:	mov	r4, r0
   15450:	mov	r0, r4
   15454:	add	sp, sp, #20
   15458:	pop	{r4, r5, r6, r7, pc}
   1545c:	mvn	r4, #0
   15460:	b	15418 <__assert_fail@plt+0x38c0>
   15464:	andeq	r3, r2, ip, asr r3
   15468:	andeq	r4, r1, ip, lsr r5
   1546c:	andeq	r5, r3, r0, lsr #4
   15470:	cmp	r2, #0
   15474:	bxeq	lr
   15478:	push	{r4, r5, r6, r7, r8, lr}
   1547c:	mov	r6, r0
   15480:	mov	r4, r1
   15484:	add	r5, r1, r2
   15488:	bl	118e8 <__ctype_tolower_loc@plt>
   1548c:	mov	r7, r0
   15490:	ldrb	r2, [r4], #1
   15494:	ldr	r3, [r7]
   15498:	mov	r1, r6
   1549c:	ldr	r0, [r3, r2, lsl #2]
   154a0:	bl	11a50 <fputc@plt>
   154a4:	cmp	r4, r5
   154a8:	bne	15490 <__assert_fail@plt+0x3938>
   154ac:	pop	{r4, r5, r6, r7, r8, pc}
   154b0:	cmp	r2, #0
   154b4:	bxeq	lr
   154b8:	push	{r4, r5, r6, r7, r8, lr}
   154bc:	mov	r6, r0
   154c0:	mov	r4, r1
   154c4:	add	r5, r1, r2
   154c8:	bl	118f4 <__ctype_toupper_loc@plt>
   154cc:	mov	r7, r0
   154d0:	ldrb	r2, [r4], #1
   154d4:	ldr	r3, [r7]
   154d8:	mov	r1, r6
   154dc:	ldr	r0, [r3, r2, lsl #2]
   154e0:	bl	11a50 <fputc@plt>
   154e4:	cmp	r4, r5
   154e8:	bne	154d0 <__assert_fail@plt+0x3978>
   154ec:	pop	{r4, r5, r6, r7, r8, pc}
   154f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154f4:	sub	sp, sp, #1152	; 0x480
   154f8:	sub	sp, sp, #4
   154fc:	ldr	sl, [r2, #40]	; 0x28
   15500:	ldr	fp, [r2, #8]
   15504:	str	r2, [sp, #28]
   15508:	ldr	r2, [pc, #4068]	; 164f4 <__assert_fail@plt+0x499c>
   1550c:	str	r3, [sp, #24]
   15510:	ldr	r3, [sp, #1192]	; 0x4a8
   15514:	ldr	ip, [pc, #4060]	; 164f8 <__assert_fail@plt+0x49a0>
   15518:	cmp	sl, #0
   1551c:	ldr	r2, [r2]
   15520:	str	r3, [sp, #36]	; 0x24
   15524:	ldr	r3, [sp, #1196]	; 0x4ac
   15528:	moveq	sl, ip
   1552c:	cmp	fp, #12
   15530:	mov	r7, r0
   15534:	mov	r6, r1
   15538:	str	r2, [sp, #1148]	; 0x47c
   1553c:	str	r3, [sp, #32]
   15540:	subgt	fp, fp, #12
   15544:	bgt	15550 <__assert_fail@plt+0x39f8>
   15548:	cmp	fp, #0
   1554c:	moveq	fp, #12
   15550:	ldrb	r0, [r6]
   15554:	cmp	r0, #0
   15558:	beq	155d0 <__assert_fail@plt+0x3a78>
   1555c:	mov	r8, #0
   15560:	strd	sl, [sp, #40]	; 0x28
   15564:	cmp	r0, #37	; 0x25
   15568:	beq	155d8 <__assert_fail@plt+0x3a80>
   1556c:	cmn	r8, #3
   15570:	bhi	155d0 <__assert_fail@plt+0x3a78>
   15574:	cmp	r7, #0
   15578:	beq	15584 <__assert_fail@plt+0x3a2c>
   1557c:	mov	r1, r7
   15580:	bl	11a50 <fputc@plt>
   15584:	add	r8, r8, #1
   15588:	ldrb	r0, [r6, #1]
   1558c:	add	r6, r6, #1
   15590:	cmp	r0, #0
   15594:	bne	15564 <__assert_fail@plt+0x3a0c>
   15598:	ldr	r3, [pc, #3924]	; 164f4 <__assert_fail@plt+0x499c>
   1559c:	ldr	r2, [sp, #1148]	; 0x47c
   155a0:	mov	r0, r8
   155a4:	ldr	r3, [r3]
   155a8:	cmp	r2, r3
   155ac:	bne	16e28 <__assert_fail@plt+0x52d0>
   155b0:	add	sp, sp, #1152	; 0x480
   155b4:	add	sp, sp, #4
   155b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155bc:	cmp	r9, #95	; 0x5f
   155c0:	beq	169f4 <__assert_fail@plt+0x4e9c>
   155c4:	ldr	r3, [sp, #52]	; 0x34
   155c8:	cmp	r3, r2
   155cc:	bcc	15f20 <__assert_fail@plt+0x43c8>
   155d0:	mov	r8, #0
   155d4:	b	15598 <__assert_fail@plt+0x3a40>
   155d8:	mov	sl, #0
   155dc:	ldr	r3, [sp, #24]
   155e0:	mov	r9, sl
   155e4:	str	r3, [sp, #20]
   155e8:	ldrb	r4, [r6, #1]!
   155ec:	cmp	r4, #48	; 0x30
   155f0:	mov	r0, r4
   155f4:	beq	15844 <__assert_fail@plt+0x3cec>
   155f8:	bhi	1582c <__assert_fail@plt+0x3cd4>
   155fc:	cmp	r4, #35	; 0x23
   15600:	moveq	sl, #1
   15604:	beq	155e8 <__assert_fail@plt+0x3a90>
   15608:	cmp	r4, #45	; 0x2d
   1560c:	beq	15844 <__assert_fail@plt+0x3cec>
   15610:	sub	r3, r4, #48	; 0x30
   15614:	cmp	r3, #9
   15618:	mvnhi	r5, #0
   1561c:	bls	15860 <__assert_fail@plt+0x3d08>
   15620:	cmp	r4, #69	; 0x45
   15624:	beq	1584c <__assert_fail@plt+0x3cf4>
   15628:	cmp	r4, #79	; 0x4f
   1562c:	movne	fp, #0
   15630:	beq	1584c <__assert_fail@plt+0x3cf4>
   15634:	cmp	r4, #122	; 0x7a
   15638:	ldrls	pc, [pc, r4, lsl #2]
   1563c:	b	16334 <__assert_fail@plt+0x47dc>
   15640:			; <UNDEFINED> instruction: 0x00015bbc
   15644:	andeq	r6, r1, r4, lsr r3
   15648:	andeq	r6, r1, r4, lsr r3
   1564c:	andeq	r6, r1, r4, lsr r3
   15650:	andeq	r6, r1, r4, lsr r3
   15654:	andeq	r6, r1, r4, lsr r3
   15658:	andeq	r6, r1, r4, lsr r3
   1565c:	andeq	r6, r1, r4, lsr r3
   15660:	andeq	r6, r1, r4, lsr r3
   15664:	andeq	r6, r1, r4, lsr r3
   15668:	andeq	r6, r1, r4, lsr r3
   1566c:	andeq	r6, r1, r4, lsr r3
   15670:	andeq	r6, r1, r4, lsr r3
   15674:	andeq	r6, r1, r4, lsr r3
   15678:	andeq	r6, r1, r4, lsr r3
   1567c:	andeq	r6, r1, r4, lsr r3
   15680:	andeq	r6, r1, r4, lsr r3
   15684:	andeq	r6, r1, r4, lsr r3
   15688:	andeq	r6, r1, r4, lsr r3
   1568c:	andeq	r6, r1, r4, lsr r3
   15690:	andeq	r6, r1, r4, lsr r3
   15694:	andeq	r6, r1, r4, lsr r3
   15698:	andeq	r6, r1, r4, lsr r3
   1569c:	andeq	r6, r1, r4, lsr r3
   156a0:	andeq	r6, r1, r4, lsr r3
   156a4:	andeq	r6, r1, r4, lsr r3
   156a8:	andeq	r6, r1, r4, lsr r3
   156ac:	andeq	r6, r1, r4, lsr r3
   156b0:	andeq	r6, r1, r4, lsr r3
   156b4:	andeq	r6, r1, r4, lsr r3
   156b8:	andeq	r6, r1, r4, lsr r3
   156bc:	andeq	r6, r1, r4, lsr r3
   156c0:	andeq	r6, r1, r4, lsr r3
   156c4:	andeq	r6, r1, r4, lsr r3
   156c8:	andeq	r6, r1, r4, lsr r3
   156cc:	andeq	r6, r1, r4, lsr r3
   156d0:	andeq	r6, r1, r4, lsr r3
   156d4:			; <UNDEFINED> instruction: 0x000162b4
   156d8:	andeq	r6, r1, r4, lsr r3
   156dc:	andeq	r6, r1, r4, lsr r3
   156e0:	andeq	r6, r1, r4, lsr r3
   156e4:	andeq	r6, r1, r4, lsr r3
   156e8:	andeq	r6, r1, r4, lsr r3
   156ec:	andeq	r6, r1, r4, lsr r3
   156f0:	andeq	r6, r1, r4, lsr r3
   156f4:	andeq	r6, r1, r4, lsr r3
   156f8:	andeq	r6, r1, r4, lsr r3
   156fc:	andeq	r6, r1, r4, lsr r3
   15700:	andeq	r6, r1, r4, lsr r3
   15704:	andeq	r6, r1, r4, lsr r3
   15708:	andeq	r6, r1, r4, lsr r3
   1570c:	andeq	r6, r1, r4, lsr r3
   15710:	andeq	r6, r1, r4, lsr r3
   15714:	andeq	r6, r1, r4, lsr r3
   15718:	andeq	r6, r1, r4, lsr r3
   1571c:	andeq	r6, r1, r4, lsr r3
   15720:	andeq	r6, r1, r4, lsr r3
   15724:	andeq	r6, r1, r4, lsr r3
   15728:	strdeq	r6, [r1], -r0
   1572c:	andeq	r6, r1, r4, lsr r3
   15730:	andeq	r6, r1, r4, lsr r3
   15734:	andeq	r6, r1, r4, lsr r3
   15738:	andeq	r6, r1, r4, lsr r3
   1573c:	andeq	r6, r1, r4, lsr r3
   15740:	andeq	r6, r1, r4, lsr r3
   15744:	ldrdeq	r5, [r1], -ip
   15748:	andeq	r5, r1, r0, lsl #26
   1574c:	ldrdeq	r6, [r1], -r8
   15750:	andeq	r6, r1, r0, asr #2
   15754:	andeq	r6, r1, r4, lsr r3
   15758:	andeq	r6, r1, r0, asr r1
   1575c:	andeq	r6, r1, r0, ror #2
   15760:	andeq	r5, r1, r4, lsr #26
   15764:	andeq	r5, r1, r0, asr #26
   15768:	andeq	r6, r1, r4, lsr r3
   1576c:	andeq	r6, r1, r4, lsr r3
   15770:	andeq	r6, r1, r4, lsr r3
   15774:	andeq	r5, r1, r8, asr sp
   15778:	andeq	r5, r1, r4, lsl sl
   1577c:	andeq	r6, r1, r4, lsr r3
   15780:	andeq	r6, r1, r8, lsl r7
   15784:	andeq	r6, r1, r4, lsr r3
   15788:	andeq	r5, r1, r0, lsl #21
   1578c:	andeq	r5, r1, r8, asr ip
   15790:	andeq	r6, r1, r4, lsr #14
   15794:	andeq	r6, r1, r0, ror #12
   15798:	andeq	r6, r1, r0, ror #2
   1579c:	andeq	r6, r1, r4, asr r4
   157a0:	andeq	r5, r1, r4, asr #17
   157a4:	andeq	r6, r1, r8, lsr #9
   157a8:	andeq	r6, r1, r8, lsr r5
   157ac:	andeq	r6, r1, r4, lsr r3
   157b0:	andeq	r6, r1, r4, lsr r3
   157b4:	andeq	r6, r1, r4, lsr r3
   157b8:	andeq	r6, r1, r4, lsr r3
   157bc:	andeq	r6, r1, r4, lsr r3
   157c0:	andeq	r6, r1, r4, lsr r3
   157c4:	ldrdeq	r5, [r1], -ip
   157c8:	andeq	r6, r1, ip, lsl r3
   157cc:	andeq	r5, r1, r4, asr #17
   157d0:	andeq	r6, r1, r0, lsl r4
   157d4:	andeq	r6, r1, ip, lsr #8
   157d8:	andeq	r6, r1, r4, lsr r3
   157dc:	andeq	r6, r1, r0, ror #2
   157e0:	andeq	r6, r1, ip, lsl r3
   157e4:	andeq	r6, r1, r4, lsr r3
   157e8:	andeq	r6, r1, ip, lsr #12
   157ec:	ldrdeq	r6, [r1], -ip
   157f0:	muleq	r1, r8, r6
   157f4:	andeq	r6, r1, r8, lsr #13
   157f8:	andeq	r5, r1, r4, ror ip
   157fc:	andeq	r6, r1, r4, lsr r3
   15800:	ldrdeq	r5, [r1], -r4
   15804:	andeq	r5, r1, r4, ror sp
   15808:	andeq	r5, r1, ip, asr #17
   1580c:	andeq	r5, r1, r0, asr #30
   15810:	andeq	r5, r1, r0, asr #22
   15814:	andeq	r6, r1, r0, lsr #1
   15818:	andeq	r6, r1, r4, lsr r3
   1581c:	andeq	r5, r1, r0, lsr #23
   15820:	andeq	r5, r1, r4, asr #17
   15824:	andeq	r6, r1, r0, ror #11
   15828:	andeq	r6, r1, ip, ror #6
   1582c:	cmp	r4, #94	; 0x5e
   15830:	moveq	r3, #1
   15834:	streq	r3, [sp, #20]
   15838:	beq	155e8 <__assert_fail@plt+0x3a90>
   1583c:	cmp	r4, #95	; 0x5f
   15840:	bne	15610 <__assert_fail@plt+0x3ab8>
   15844:	mov	r9, r4
   15848:	b	155e8 <__assert_fail@plt+0x3a90>
   1584c:	ldrb	r4, [r6, #1]
   15850:	mov	fp, r0
   15854:	add	r6, r6, #1
   15858:	mov	r0, r4
   1585c:	b	15634 <__assert_fail@plt+0x3adc>
   15860:	ldr	r0, [pc, #3220]	; 164fc <__assert_fail@plt+0x49a4>
   15864:	mov	r5, #0
   15868:	mov	r3, r6
   1586c:	cmp	r5, r0
   15870:	ldrb	r4, [r3, #1]!
   15874:	sub	r2, r4, #48	; 0x30
   15878:	bgt	158ac <__assert_fail@plt+0x3d54>
   1587c:	ldrb	r1, [r6]
   15880:	beq	158a4 <__assert_fail@plt+0x3d4c>
   15884:	add	r5, r5, r5, lsl #2
   15888:	sub	r1, r1, #48	; 0x30
   1588c:	add	r5, r1, r5, lsl #1
   15890:	mov	r6, r3
   15894:	cmp	r2, #9
   15898:	bls	15868 <__assert_fail@plt+0x3d10>
   1589c:	mov	r0, r4
   158a0:	b	15620 <__assert_fail@plt+0x3ac8>
   158a4:	cmp	r1, #55	; 0x37
   158a8:	bls	15884 <__assert_fail@plt+0x3d2c>
   158ac:	cmp	r2, #9
   158b0:	bhi	16824 <__assert_fail@plt+0x4ccc>
   158b4:	ldrb	r4, [r6, #2]!
   158b8:	mvn	r5, #-2147483648	; 0x80000000
   158bc:	sub	r2, r4, #48	; 0x30
   158c0:	b	15894 <__assert_fail@plt+0x3d3c>
   158c4:	cmp	fp, #79	; 0x4f
   158c8:	beq	16334 <__assert_fail@plt+0x47dc>
   158cc:	mov	r3, #0
   158d0:	str	r3, [sp, #56]	; 0x38
   158d4:	add	r3, sp, #128	; 0x80
   158d8:	mov	r2, r3
   158dc:	str	r3, [sp, #48]	; 0x30
   158e0:	cmp	fp, #0
   158e4:	ldr	r3, [pc, #3092]	; 16500 <__assert_fail@plt+0x49a8>
   158e8:	strh	r3, [r2, #-12]
   158ec:	ldreq	r3, [sp, #48]	; 0x30
   158f0:	subeq	ip, r3, #10
   158f4:	bne	16e40 <__assert_fail@plt+0x52e8>
   158f8:	ldr	r0, [sp, #48]	; 0x30
   158fc:	mov	sl, #0
   15900:	sub	r2, r0, #12
   15904:	ldr	r3, [sp, #28]
   15908:	mov	r1, #1024	; 0x400
   1590c:	strb	r4, [ip]
   15910:	sub	r0, r0, #4
   15914:	strb	sl, [ip, #1]
   15918:	bl	118d0 <strftime@plt>
   1591c:	cmp	r0, #0
   15920:	beq	15588 <__assert_fail@plt+0x3a30>
   15924:	bic	r3, r5, r5, asr #31
   15928:	sub	r4, r0, #1
   1592c:	cmp	r4, r3
   15930:	movcs	r2, r4
   15934:	movcc	r2, r3
   15938:	mov	r1, r2
   1593c:	str	r2, [sp, #52]	; 0x34
   15940:	mvn	r2, r8
   15944:	cmp	r2, r1
   15948:	bls	155d0 <__assert_fail@plt+0x3a78>
   1594c:	cmp	r7, sl
   15950:	beq	159d0 <__assert_fail@plt+0x3e78>
   15954:	cmp	r4, r3
   15958:	movcs	r3, #0
   1595c:	movcc	r3, #1
   15960:	cmp	fp, sl
   15964:	moveq	fp, r3
   15968:	movne	fp, sl
   1596c:	cmp	fp, sl
   15970:	beq	159a4 <__assert_fail@plt+0x3e4c>
   15974:	cmp	r9, #48	; 0x30
   15978:	sub	r5, r5, r4
   1597c:	beq	16918 <__assert_fail@plt+0x4dc0>
   15980:	cmp	r5, #0
   15984:	movne	r9, sl
   15988:	beq	159a4 <__assert_fail@plt+0x3e4c>
   1598c:	add	r9, r9, #1
   15990:	mov	r1, r7
   15994:	mov	r0, #32
   15998:	bl	11a50 <fputc@plt>
   1599c:	cmp	r5, r9
   159a0:	bne	1598c <__assert_fail@plt+0x3e34>
   159a4:	ldr	r3, [sp, #56]	; 0x38
   159a8:	cmp	r3, #0
   159ac:	bne	16900 <__assert_fail@plt+0x4da8>
   159b0:	ldr	r3, [sp, #20]
   159b4:	cmp	r3, #0
   159b8:	beq	168e4 <__assert_fail@plt+0x4d8c>
   159bc:	ldr	r3, [sp, #48]	; 0x30
   159c0:	mov	r2, r4
   159c4:	sub	r1, r3, #3
   159c8:	mov	r0, r7
   159cc:	bl	154b0 <__assert_fail@plt+0x3958>
   159d0:	ldr	r3, [sp, #52]	; 0x34
   159d4:	add	r8, r8, r3
   159d8:	b	15588 <__assert_fail@plt+0x3a30>
   159dc:	cmp	fp, #0
   159e0:	bne	16334 <__assert_fail@plt+0x47dc>
   159e4:	ldr	r3, [sp, #20]
   159e8:	cmp	sl, #0
   159ec:	movne	r3, sl
   159f0:	str	r3, [sp, #20]
   159f4:	ldr	r3, [pc, #2820]	; 16500 <__assert_fail@plt+0x49a8>
   159f8:	add	r2, sp, #128	; 0x80
   159fc:	mov	fp, #0
   15a00:	str	r2, [sp, #48]	; 0x30
   15a04:	str	fp, [sp, #56]	; 0x38
   15a08:	strh	r3, [sp, #116]	; 0x74
   15a0c:	add	ip, sp, #118	; 0x76
   15a10:	b	158f8 <__assert_fail@plt+0x3da0>
   15a14:	cmp	fp, #69	; 0x45
   15a18:	beq	16334 <__assert_fail@plt+0x47dc>
   15a1c:	cmn	r5, #1
   15a20:	bne	16c0c <__assert_fail@plt+0x50b4>
   15a24:	ldr	r3, [sp, #1200]	; 0x4b0
   15a28:	mov	r5, #9
   15a2c:	str	r5, [sp, #52]	; 0x34
   15a30:	lsr	sl, r3, #31
   15a34:	mov	r0, #0
   15a38:	str	r0, [sp, #56]	; 0x38
   15a3c:	eor	r2, sl, #1
   15a40:	cmp	fp, #79	; 0x4f
   15a44:	movne	r2, #0
   15a48:	andeq	r2, r2, #1
   15a4c:	cmp	r2, #0
   15a50:	beq	164e8 <__assert_fail@plt+0x4990>
   15a54:	ldr	r3, [pc, #2724]	; 16500 <__assert_fail@plt+0x49a8>
   15a58:	add	r2, sp, #128	; 0x80
   15a5c:	mov	r1, #0
   15a60:	str	r2, [sp, #48]	; 0x30
   15a64:	str	r1, [sp, #56]	; 0x38
   15a68:	strh	r3, [sp, #116]	; 0x74
   15a6c:	ldr	r3, [sp, #48]	; 0x30
   15a70:	strb	fp, [sp, #118]	; 0x76
   15a74:	sub	ip, r3, #9
   15a78:	ldr	fp, [sp, #52]	; 0x34
   15a7c:	b	158f8 <__assert_fail@plt+0x3da0>
   15a80:	ldr	fp, [pc, #2684]	; 16504 <__assert_fail@plt+0x49ac>
   15a84:	ldr	r3, [sp, #1200]	; 0x4b0
   15a88:	ldr	r2, [sp, #28]
   15a8c:	str	r3, [sp, #8]
   15a90:	ldr	r3, [sp, #32]
   15a94:	mov	r1, fp
   15a98:	str	r3, [sp, #4]
   15a9c:	ldr	r3, [sp, #36]	; 0x24
   15aa0:	mov	r0, #0
   15aa4:	str	r3, [sp]
   15aa8:	ldr	r3, [sp, #20]
   15aac:	bl	154f0 <__assert_fail@plt+0x3998>
   15ab0:	bic	r3, r5, r5, asr #31
   15ab4:	mvn	r2, r8
   15ab8:	cmp	r0, r3
   15abc:	movcs	r4, r0
   15ac0:	movcc	r4, r3
   15ac4:	cmp	r2, r4
   15ac8:	bls	155d0 <__assert_fail@plt+0x3a78>
   15acc:	cmp	r7, #0
   15ad0:	beq	15b38 <__assert_fail@plt+0x3fe0>
   15ad4:	cmp	r0, r3
   15ad8:	bcs	15b0c <__assert_fail@plt+0x3fb4>
   15adc:	cmp	r9, #48	; 0x30
   15ae0:	sub	r5, r5, r0
   15ae4:	beq	16b50 <__assert_fail@plt+0x4ff8>
   15ae8:	cmp	r5, #0
   15aec:	movne	sl, #0
   15af0:	beq	15b0c <__assert_fail@plt+0x3fb4>
   15af4:	add	sl, sl, #1
   15af8:	mov	r1, r7
   15afc:	mov	r0, #32
   15b00:	bl	11a50 <fputc@plt>
   15b04:	cmp	r5, sl
   15b08:	bne	15af4 <__assert_fail@plt+0x3f9c>
   15b0c:	ldr	r3, [sp, #1200]	; 0x4b0
   15b10:	mov	r1, fp
   15b14:	str	r3, [sp, #8]
   15b18:	ldr	r3, [sp, #32]
   15b1c:	ldr	r2, [sp, #28]
   15b20:	str	r3, [sp, #4]
   15b24:	ldr	r3, [sp, #36]	; 0x24
   15b28:	mov	r0, r7
   15b2c:	str	r3, [sp]
   15b30:	ldr	r3, [sp, #20]
   15b34:	bl	154f0 <__assert_fail@plt+0x3998>
   15b38:	add	r8, r8, r4
   15b3c:	b	15588 <__assert_fail@plt+0x3a30>
   15b40:	bic	r4, r5, r5, asr #31
   15b44:	cmp	r4, #1
   15b48:	movcc	r4, #1
   15b4c:	mvn	r3, r8
   15b50:	cmp	r3, r4
   15b54:	bls	155d0 <__assert_fail@plt+0x3a78>
   15b58:	cmp	r7, #0
   15b5c:	beq	15b38 <__assert_fail@plt+0x3fe0>
   15b60:	cmp	r5, #1
   15b64:	ble	15b90 <__assert_fail@plt+0x4038>
   15b68:	cmp	r9, #48	; 0x30
   15b6c:	sub	r9, r5, #1
   15b70:	mov	r5, #0
   15b74:	beq	1672c <__assert_fail@plt+0x4bd4>
   15b78:	add	r5, r5, #1
   15b7c:	mov	r1, r7
   15b80:	mov	r0, #32
   15b84:	bl	11a50 <fputc@plt>
   15b88:	cmp	r9, r5
   15b8c:	bne	15b78 <__assert_fail@plt+0x4020>
   15b90:	mov	r1, r7
   15b94:	mov	r0, #9
   15b98:	bl	11a50 <fputc@plt>
   15b9c:	b	15b38 <__assert_fail@plt+0x3fe0>
   15ba0:	cmp	fp, #69	; 0x45
   15ba4:	beq	16334 <__assert_fail@plt+0x47dc>
   15ba8:	ldr	r3, [sp, #28]
   15bac:	mov	r2, #1
   15bb0:	str	r2, [sp, #52]	; 0x34
   15bb4:	ldr	r3, [r3, #24]
   15bb8:	b	15a30 <__assert_fail@plt+0x3ed8>
   15bbc:	ldrb	r3, [r6, #-1]
   15bc0:	sub	r2, r6, #1
   15bc4:	str	r2, [sp, #48]	; 0x30
   15bc8:	cmp	r3, #37	; 0x25
   15bcc:	mvn	r2, r8
   15bd0:	bic	r3, r5, r5, asr #31
   15bd4:	bne	16e38 <__assert_fail@plt+0x52e0>
   15bd8:	cmp	r3, #1
   15bdc:	ldr	r6, [sp, #48]	; 0x30
   15be0:	movcs	sl, r3
   15be4:	movcc	sl, #1
   15be8:	mov	r4, #1
   15bec:	cmp	r2, sl
   15bf0:	bls	155d0 <__assert_fail@plt+0x3a78>
   15bf4:	cmp	r7, #0
   15bf8:	beq	15c50 <__assert_fail@plt+0x40f8>
   15bfc:	cmp	r4, r3
   15c00:	bcs	15c34 <__assert_fail@plt+0x40dc>
   15c04:	cmp	r9, #48	; 0x30
   15c08:	sub	r5, r5, r4
   15c0c:	beq	16a98 <__assert_fail@plt+0x4f40>
   15c10:	cmp	r5, #0
   15c14:	movne	fp, #0
   15c18:	beq	15c34 <__assert_fail@plt+0x40dc>
   15c1c:	add	fp, fp, #1
   15c20:	mov	r1, r7
   15c24:	mov	r0, #32
   15c28:	bl	11a50 <fputc@plt>
   15c2c:	cmp	r5, fp
   15c30:	bne	15c1c <__assert_fail@plt+0x40c4>
   15c34:	ldr	r3, [sp, #20]
   15c38:	cmp	r3, #0
   15c3c:	beq	168cc <__assert_fail@plt+0x4d74>
   15c40:	mov	r2, r4
   15c44:	ldr	r1, [sp, #48]	; 0x30
   15c48:	mov	r0, r7
   15c4c:	bl	154b0 <__assert_fail@plt+0x3958>
   15c50:	add	r8, r8, sl
   15c54:	b	15588 <__assert_fail@plt+0x3a30>
   15c58:	cmp	fp, #69	; 0x45
   15c5c:	beq	16334 <__assert_fail@plt+0x47dc>
   15c60:	ldr	r3, [sp, #28]
   15c64:	mov	r2, #2
   15c68:	str	r2, [sp, #52]	; 0x34
   15c6c:	ldr	r3, [r3]
   15c70:	b	15a30 <__assert_fail@plt+0x3ed8>
   15c74:	bic	r4, r5, r5, asr #31
   15c78:	cmp	r4, #1
   15c7c:	movcc	r4, #1
   15c80:	mvn	r3, r8
   15c84:	cmp	r3, r4
   15c88:	bls	155d0 <__assert_fail@plt+0x3a78>
   15c8c:	cmp	r7, #0
   15c90:	beq	15b38 <__assert_fail@plt+0x3fe0>
   15c94:	cmp	r5, #1
   15c98:	ble	15cc4 <__assert_fail@plt+0x416c>
   15c9c:	cmp	r9, #48	; 0x30
   15ca0:	sub	r9, r5, #1
   15ca4:	mov	r5, #0
   15ca8:	beq	16748 <__assert_fail@plt+0x4bf0>
   15cac:	add	r5, r5, #1
   15cb0:	mov	r1, r7
   15cb4:	mov	r0, #32
   15cb8:	bl	11a50 <fputc@plt>
   15cbc:	cmp	r9, r5
   15cc0:	bne	15cac <__assert_fail@plt+0x4154>
   15cc4:	mov	r1, r7
   15cc8:	mov	r0, #10
   15ccc:	bl	11a50 <fputc@plt>
   15cd0:	b	15b38 <__assert_fail@plt+0x3fe0>
   15cd4:	mov	r3, #0
   15cd8:	str	r3, [sp, #56]	; 0x38
   15cdc:	ldr	r3, [sp, #56]	; 0x38
   15ce0:	cmp	sl, #0
   15ce4:	movne	r3, sl
   15ce8:	str	r3, [sp, #56]	; 0x38
   15cec:	ldr	r3, [sp, #20]
   15cf0:	movne	r3, #0
   15cf4:	str	r3, [sp, #20]
   15cf8:	mov	r4, #112	; 0x70
   15cfc:	b	158d4 <__assert_fail@plt+0x3d7c>
   15d00:	cmp	fp, #69	; 0x45
   15d04:	beq	16334 <__assert_fail@plt+0x47dc>
   15d08:	ldr	r3, [sp, #20]
   15d0c:	cmp	sl, #0
   15d10:	movne	r3, sl
   15d14:	str	r3, [sp, #20]
   15d18:	mov	r3, #0
   15d1c:	str	r3, [sp, #56]	; 0x38
   15d20:	b	158d4 <__assert_fail@plt+0x3d7c>
   15d24:	cmp	fp, #69	; 0x45
   15d28:	beq	16334 <__assert_fail@plt+0x47dc>
   15d2c:	ldr	r3, [sp, #28]
   15d30:	mov	r2, #2
   15d34:	str	r2, [sp, #52]	; 0x34
   15d38:	ldr	r3, [r3, #8]
   15d3c:	b	15a30 <__assert_fail@plt+0x3ed8>
   15d40:	cmp	fp, #69	; 0x45
   15d44:	beq	16334 <__assert_fail@plt+0x47dc>
   15d48:	mov	r2, #2
   15d4c:	ldr	r3, [sp, #44]	; 0x2c
   15d50:	str	r2, [sp, #52]	; 0x34
   15d54:	b	15a30 <__assert_fail@plt+0x3ed8>
   15d58:	cmp	fp, #69	; 0x45
   15d5c:	beq	16334 <__assert_fail@plt+0x47dc>
   15d60:	ldr	r3, [sp, #28]
   15d64:	mov	r2, #2
   15d68:	str	r2, [sp, #52]	; 0x34
   15d6c:	ldr	r3, [r3, #4]
   15d70:	b	15a30 <__assert_fail@plt+0x3ed8>
   15d74:	ldr	r3, [sp, #28]
   15d78:	cmp	fp, #79	; 0x4f
   15d7c:	ldr	r3, [r3, #16]
   15d80:	moveq	r3, #1
   15d84:	streq	r3, [sp, #52]	; 0x34
   15d88:	beq	15a54 <__assert_fail@plt+0x3efc>
   15d8c:	add	r2, r3, r3, lsl #2
   15d90:	mov	r0, #0
   15d94:	add	r3, r3, r2, lsl #1
   15d98:	mov	sl, r0
   15d9c:	asr	r3, r3, #5
   15da0:	add	r3, r3, #1
   15da4:	mov	r2, #1
   15da8:	str	r0, [sp, #56]	; 0x38
   15dac:	str	r2, [sp, #52]	; 0x34
   15db0:	add	r2, sp, #128	; 0x80
   15db4:	str	r2, [sp, #48]	; 0x30
   15db8:	add	ip, sp, #138	; 0x8a
   15dbc:	mov	fp, #58	; 0x3a
   15dc0:	mov	lr, r3
   15dc4:	b	15dcc <__assert_fail@plt+0x4274>
   15dc8:	mov	lr, r2
   15dcc:	tst	r0, #1
   15dd0:	subne	r3, ip, #2
   15dd4:	sub	r4, ip, #1
   15dd8:	strbne	fp, [ip, #-1]
   15ddc:	movne	ip, r4
   15de0:	movne	r4, r3
   15de4:	ldr	r3, [pc, #1820]	; 16508 <__assert_fail@plt+0x49b0>
   15de8:	asrs	r0, r0, #1
   15dec:	movne	r1, #1
   15df0:	umull	r3, r2, r3, lr
   15df4:	moveq	r1, #0
   15df8:	lsr	r2, r2, #3
   15dfc:	cmp	lr, #9
   15e00:	orrhi	r1, r1, #1
   15e04:	add	r3, r2, r2, lsl #2
   15e08:	cmp	r1, #0
   15e0c:	sub	r3, lr, r3, lsl #1
   15e10:	add	r3, r3, #48	; 0x30
   15e14:	strb	r3, [ip, #-1]
   15e18:	mov	ip, r4
   15e1c:	bne	15dc8 <__assert_fail@plt+0x4270>
   15e20:	ldr	r3, [sp, #52]	; 0x34
   15e24:	cmp	r3, r5
   15e28:	movlt	r3, r5
   15e2c:	cmp	sl, #0
   15e30:	str	r3, [sp, #52]	; 0x34
   15e34:	bne	16834 <__assert_fail@plt+0x4cdc>
   15e38:	ldr	r3, [sp, #56]	; 0x38
   15e3c:	cmp	r3, #0
   15e40:	beq	15fd0 <__assert_fail@plt+0x4478>
   15e44:	cmp	r9, #45	; 0x2d
   15e48:	beq	16ac0 <__assert_fail@plt+0x4f68>
   15e4c:	mov	r3, #43	; 0x2b
   15e50:	str	r3, [sp, #60]	; 0x3c
   15e54:	ldr	r3, [sp, #48]	; 0x30
   15e58:	mvn	r2, r8
   15e5c:	add	sl, r3, #10
   15e60:	ldr	r3, [sp, #52]	; 0x34
   15e64:	sub	sl, sl, r4
   15e68:	sub	r3, r3, sl
   15e6c:	sub	fp, r3, #1
   15e70:	cmp	fp, #0
   15e74:	ble	1693c <__assert_fail@plt+0x4de4>
   15e78:	cmp	r9, #95	; 0x5f
   15e7c:	beq	169fc <__assert_fail@plt+0x4ea4>
   15e80:	ldr	r1, [sp, #52]	; 0x34
   15e84:	cmp	r1, r2
   15e88:	bcs	155d0 <__assert_fail@plt+0x3a78>
   15e8c:	bic	r3, r5, r5, asr #31
   15e90:	cmp	r3, #1
   15e94:	movcs	r0, r3
   15e98:	movcc	r0, #1
   15e9c:	cmp	r0, r2
   15ea0:	str	r0, [sp, #48]	; 0x30
   15ea4:	bcs	155d0 <__assert_fail@plt+0x3a78>
   15ea8:	cmp	r7, #0
   15eac:	beq	15f18 <__assert_fail@plt+0x43c0>
   15eb0:	cmp	r3, #1
   15eb4:	movls	r3, #0
   15eb8:	movhi	r3, #1
   15ebc:	cmp	r1, #0
   15ec0:	movne	r3, #0
   15ec4:	cmp	r3, #0
   15ec8:	beq	15f0c <__assert_fail@plt+0x43b4>
   15ecc:	sub	r3, r5, #1
   15ed0:	cmp	r9, #48	; 0x30
   15ed4:	str	r3, [sp, #56]	; 0x38
   15ed8:	beq	16de8 <__assert_fail@plt+0x5290>
   15edc:	cmp	r3, #0
   15ee0:	beq	15f0c <__assert_fail@plt+0x43b4>
   15ee4:	str	r4, [sp, #64]	; 0x40
   15ee8:	ldr	r4, [sp, #56]	; 0x38
   15eec:	mov	r5, #0
   15ef0:	add	r5, r5, #1
   15ef4:	mov	r1, r7
   15ef8:	mov	r0, #32
   15efc:	bl	11a50 <fputc@plt>
   15f00:	cmp	r4, r5
   15f04:	bne	15ef0 <__assert_fail@plt+0x4398>
   15f08:	ldr	r4, [sp, #64]	; 0x40
   15f0c:	ldr	r0, [sp, #60]	; 0x3c
   15f10:	mov	r1, r7
   15f14:	bl	11a50 <fputc@plt>
   15f18:	ldr	r3, [sp, #48]	; 0x30
   15f1c:	add	r8, r8, r3
   15f20:	cmp	r7, #0
   15f24:	bne	16a6c <__assert_fail@plt+0x4f14>
   15f28:	mov	r3, #0
   15f2c:	add	r8, r8, fp
   15f30:	str	r3, [sp, #56]	; 0x38
   15f34:	mvn	r2, r8
   15f38:	mov	r5, r3
   15f3c:	b	16000 <__assert_fail@plt+0x44a8>
   15f40:	ldr	lr, [sp, #28]
   15f44:	add	ip, sp, #72	; 0x48
   15f48:	add	r4, sp, #128	; 0x80
   15f4c:	ldm	lr!, {r0, r1, r2, r3}
   15f50:	str	r4, [sp, #48]	; 0x30
   15f54:	add	r4, sp, #138	; 0x8a
   15f58:	stmia	ip!, {r0, r1, r2, r3}
   15f5c:	ldm	lr!, {r0, r1, r2, r3}
   15f60:	stmia	ip!, {r0, r1, r2, r3}
   15f64:	ldm	lr, {r0, r1, r2}
   15f68:	stm	ip, {r0, r1, r2}
   15f6c:	add	r1, sp, #72	; 0x48
   15f70:	ldr	r0, [sp, #32]
   15f74:	bl	20e10 <fts_children@@Base+0xd84>
   15f78:	mov	r1, r0
   15f7c:	ldr	r3, [pc, #1448]	; 1652c <__assert_fail@plt+0x49d4>
   15f80:	cmp	r0, #0
   15f84:	smull	r2, r3, r3, r1
   15f88:	asr	r2, r1, #31
   15f8c:	rsb	r2, r2, r3, asr #2
   15f90:	add	r3, r2, r2, lsl #2
   15f94:	sub	r3, r1, r3, lsl #1
   15f98:	mov	r1, r2
   15f9c:	uxtb	r3, r3
   15fa0:	rsblt	r3, r3, #48	; 0x30
   15fa4:	addge	r3, r3, #48	; 0x30
   15fa8:	cmp	r2, #0
   15fac:	uxtb	r3, r3
   15fb0:	strb	r3, [r4, #-1]!
   15fb4:	bne	15f7c <__assert_fail@plt+0x4424>
   15fb8:	cmp	r5, #1
   15fbc:	movge	r3, r5
   15fc0:	movlt	r3, #1
   15fc4:	cmp	r0, #0
   15fc8:	str	r3, [sp, #52]	; 0x34
   15fcc:	blt	16834 <__assert_fail@plt+0x4cdc>
   15fd0:	ldr	r3, [sp, #48]	; 0x30
   15fd4:	cmp	r9, #45	; 0x2d
   15fd8:	add	sl, r3, #10
   15fdc:	sub	sl, sl, r4
   15fe0:	mvn	r2, r8
   15fe4:	beq	15ff8 <__assert_fail@plt+0x44a0>
   15fe8:	ldr	r3, [sp, #52]	; 0x34
   15fec:	sub	fp, r3, sl
   15ff0:	cmp	fp, #0
   15ff4:	bgt	155bc <__assert_fail@plt+0x3a64>
   15ff8:	bic	r3, r5, r5, asr #31
   15ffc:	str	r3, [sp, #56]	; 0x38
   16000:	ldr	r3, [sp, #56]	; 0x38
   16004:	cmp	sl, r3
   16008:	movcs	r1, sl
   1600c:	movcc	r1, r3
   16010:	cmp	r1, r2
   16014:	str	r1, [sp, #48]	; 0x30
   16018:	bcs	155d0 <__assert_fail@plt+0x3a78>
   1601c:	cmp	r7, #0
   16020:	beq	16094 <__assert_fail@plt+0x453c>
   16024:	ldr	r2, [sp, #52]	; 0x34
   16028:	cmp	sl, r3
   1602c:	movcs	r3, #0
   16030:	movcc	r3, #1
   16034:	cmp	r2, #0
   16038:	moveq	fp, r3
   1603c:	movne	fp, #0
   16040:	cmp	fp, #0
   16044:	beq	16078 <__assert_fail@plt+0x4520>
   16048:	cmp	r9, #48	; 0x30
   1604c:	sub	r5, r5, sl
   16050:	beq	16a44 <__assert_fail@plt+0x4eec>
   16054:	cmp	r5, #0
   16058:	movne	fp, #0
   1605c:	beq	16078 <__assert_fail@plt+0x4520>
   16060:	add	fp, fp, #1
   16064:	mov	r1, r7
   16068:	mov	r0, #32
   1606c:	bl	11a50 <fputc@plt>
   16070:	cmp	r5, fp
   16074:	bne	16060 <__assert_fail@plt+0x4508>
   16078:	ldr	r3, [sp, #20]
   1607c:	cmp	r3, #0
   16080:	beq	168b4 <__assert_fail@plt+0x4d5c>
   16084:	mov	r2, sl
   16088:	mov	r1, r4
   1608c:	mov	r0, r7
   16090:	bl	154b0 <__assert_fail@plt+0x3958>
   16094:	ldr	r3, [sp, #48]	; 0x30
   16098:	add	r8, r8, r3
   1609c:	b	15588 <__assert_fail@plt+0x3a30>
   160a0:	ldr	r3, [sp, #28]
   160a4:	mov	r2, #1
   160a8:	str	r2, [sp, #52]	; 0x34
   160ac:	ldr	r3, [r3, #24]
   160b0:	ldr	r2, [pc, #1144]	; 16530 <__assert_fail@plt+0x49d8>
   160b4:	add	r3, r3, #6
   160b8:	smull	r1, r2, r2, r3
   160bc:	add	r1, r2, r3
   160c0:	asr	r2, r3, #31
   160c4:	rsb	r2, r2, r1, asr #2
   160c8:	rsb	r2, r2, r2, lsl #3
   160cc:	sub	r3, r3, r2
   160d0:	add	r3, r3, #1
   160d4:	b	15a30 <__assert_fail@plt+0x3ed8>
   160d8:	cmp	fp, #69	; 0x45
   160dc:	beq	16a8c <__assert_fail@plt+0x4f34>
   160e0:	ldr	r3, [sp, #28]
   160e4:	mov	r0, #0
   160e8:	ldr	lr, [pc, #1092]	; 16534 <__assert_fail@plt+0x49dc>
   160ec:	ldr	ip, [r3, #20]
   160f0:	ldr	r3, [pc, #1064]	; 16520 <__assert_fail@plt+0x49c8>
   160f4:	str	r0, [sp, #56]	; 0x38
   160f8:	smull	r2, r3, r3, ip
   160fc:	asr	r2, ip, #31
   16100:	rsb	r2, r2, r3, asr #5
   16104:	add	r3, r2, #19
   16108:	add	r2, r2, r2, lsl #2
   1610c:	cmp	r3, r0
   16110:	add	r2, r2, r2, lsl #2
   16114:	movle	r1, #0
   16118:	sub	r2, ip, r2, lsl #2
   1611c:	movgt	r1, #1
   16120:	and	r2, r1, r2, lsr #31
   16124:	cmp	ip, lr
   16128:	sub	r3, r3, r2
   1612c:	mov	r2, #2
   16130:	movge	sl, #0
   16134:	movlt	sl, #1
   16138:	str	r2, [sp, #52]	; 0x34
   1613c:	b	15a3c <__assert_fail@plt+0x3ee4>
   16140:	cmp	fp, #0
   16144:	bne	16334 <__assert_fail@plt+0x47dc>
   16148:	ldr	fp, [pc, #956]	; 1650c <__assert_fail@plt+0x49b4>
   1614c:	b	15a84 <__assert_fail@plt+0x3f2c>
   16150:	cmp	fp, #0
   16154:	bne	16334 <__assert_fail@plt+0x47dc>
   16158:	ldr	fp, [pc, #944]	; 16510 <__assert_fail@plt+0x49b8>
   1615c:	b	15a84 <__assert_fail@plt+0x3f2c>
   16160:	cmp	fp, #69	; 0x45
   16164:	beq	16334 <__assert_fail@plt+0x47dc>
   16168:	ldr	r3, [sp, #28]
   1616c:	ldr	r0, [r3, #28]
   16170:	ldr	r2, [r3, #24]
   16174:	ldr	sl, [r3, #20]
   16178:	sub	r3, r0, r2
   1617c:	str	r2, [sp, #52]	; 0x34
   16180:	add	r3, r3, #380	; 0x17c
   16184:	ldr	r2, [pc, #932]	; 16530 <__assert_fail@plt+0x49d8>
   16188:	add	r3, r3, #2
   1618c:	cmp	sl, #0
   16190:	smull	r1, r2, r2, r3
   16194:	str	r0, [sp, #48]	; 0x30
   16198:	add	r1, r2, r3
   1619c:	asr	r2, r3, #31
   161a0:	rsb	r2, r2, r1, asr #2
   161a4:	movlt	r1, #300	; 0x12c
   161a8:	rsb	r2, r2, r2, lsl #3
   161ac:	sub	r3, r3, r2
   161b0:	sub	r3, r0, r3
   161b4:	mvnge	r1, #99	; 0x63
   161b8:	adds	r3, r3, #3
   161bc:	add	r1, sl, r1
   161c0:	bmi	16b78 <__assert_fail@plt+0x5020>
   161c4:	tst	r1, #3
   161c8:	ldrne	r2, [pc, #852]	; 16524 <__assert_fail@plt+0x49cc>
   161cc:	bne	16210 <__assert_fail@plt+0x46b8>
   161d0:	ldr	r2, [pc, #840]	; 16520 <__assert_fail@plt+0x49c8>
   161d4:	smull	r2, ip, r2, r1
   161d8:	asr	r2, r1, #31
   161dc:	rsb	r0, r2, ip, asr #5
   161e0:	add	r0, r0, r0, lsl #2
   161e4:	add	r0, r0, r0, lsl #2
   161e8:	cmp	r1, r0, lsl #2
   161ec:	ldrne	r2, [pc, #820]	; 16528 <__assert_fail@plt+0x49d0>
   161f0:	bne	16210 <__assert_fail@plt+0x46b8>
   161f4:	rsb	r0, r2, ip, asr #7
   161f8:	ldr	ip, [pc, #808]	; 16528 <__assert_fail@plt+0x49d0>
   161fc:	add	r0, r0, r0, lsl #2
   16200:	ldr	r2, [pc, #796]	; 16524 <__assert_fail@plt+0x49cc>
   16204:	add	r0, r0, r0, lsl #2
   16208:	cmp	r1, r0, lsl #4
   1620c:	moveq	r2, ip
   16210:	ldr	r1, [sp, #48]	; 0x30
   16214:	sub	ip, r1, r2
   16218:	ldr	r2, [sp, #52]	; 0x34
   1621c:	ldr	r1, [pc, #780]	; 16530 <__assert_fail@plt+0x49d8>
   16220:	sub	r2, ip, r2
   16224:	add	r2, r2, #380	; 0x17c
   16228:	add	r2, r2, #2
   1622c:	smull	r0, r1, r1, r2
   16230:	add	r0, r1, r2
   16234:	asr	r1, r2, #31
   16238:	rsb	r1, r1, r0, asr #2
   1623c:	rsb	r1, r1, r1, lsl #3
   16240:	sub	r2, r2, r1
   16244:	sub	r2, ip, r2
   16248:	add	r2, r2, #3
   1624c:	cmp	r2, #0
   16250:	movge	r3, r2
   16254:	movlt	r2, #0
   16258:	movge	r2, #1
   1625c:	cmp	r4, #71	; 0x47
   16260:	beq	16c64 <__assert_fail@plt+0x510c>
   16264:	cmp	r4, #103	; 0x67
   16268:	bne	16c40 <__assert_fail@plt+0x50e8>
   1626c:	ldr	r0, [pc, #684]	; 16520 <__assert_fail@plt+0x49c8>
   16270:	smull	r3, r1, r0, sl
   16274:	asr	r3, sl, #31
   16278:	rsb	r3, r3, r1, asr #5
   1627c:	add	r3, r3, r3, lsl #2
   16280:	add	r3, r3, r3, lsl #2
   16284:	sub	r1, sl, r3, lsl #2
   16288:	add	r1, r1, r2
   1628c:	smull	r3, r0, r0, r1
   16290:	asr	r3, r1, #31
   16294:	rsb	r3, r3, r0, asr #5
   16298:	add	r3, r3, r3, lsl #2
   1629c:	add	r3, r3, r3, lsl #2
   162a0:	subs	r3, r1, r3, lsl #2
   162a4:	bmi	16d30 <__assert_fail@plt+0x51d8>
   162a8:	mov	r2, #2
   162ac:	str	r2, [sp, #52]	; 0x34
   162b0:	b	15a30 <__assert_fail@plt+0x3ed8>
   162b4:	bic	r3, r5, r5, asr #31
   162b8:	cmp	r3, #1
   162bc:	movcs	sl, r3
   162c0:	movcc	sl, #1
   162c4:	cmp	fp, #0
   162c8:	mvn	r2, r8
   162cc:	bne	16d50 <__assert_fail@plt+0x51f8>
   162d0:	cmp	sl, r2
   162d4:	bcs	155d0 <__assert_fail@plt+0x3a78>
   162d8:	cmp	r7, #0
   162dc:	beq	15c50 <__assert_fail@plt+0x40f8>
   162e0:	cmp	r5, #1
   162e4:	ble	16310 <__assert_fail@plt+0x47b8>
   162e8:	cmp	r9, #48	; 0x30
   162ec:	sub	r5, r5, #1
   162f0:	beq	16764 <__assert_fail@plt+0x4c0c>
   162f4:	add	fp, fp, #1
   162f8:	mov	r1, r7
   162fc:	mov	r0, #32
   16300:	bl	11a50 <fputc@plt>
   16304:	cmp	r5, fp
   16308:	bne	162f4 <__assert_fail@plt+0x479c>
   1630c:	ldrb	r0, [r6]
   16310:	mov	r1, r7
   16314:	bl	11a50 <fputc@plt>
   16318:	b	15c50 <__assert_fail@plt+0x40f8>
   1631c:	cmp	sl, #0
   16320:	ldr	r3, [sp, #20]
   16324:	movne	r3, sl
   16328:	cmp	fp, #69	; 0x45
   1632c:	str	r3, [sp, #20]
   16330:	bne	158cc <__assert_fail@plt+0x3d74>
   16334:	sub	r3, r6, #1
   16338:	add	r1, r6, #1
   1633c:	mov	r2, r3
   16340:	sub	r4, r1, r3
   16344:	ldrb	r0, [r3], #-1
   16348:	cmp	r0, #37	; 0x25
   1634c:	bne	1633c <__assert_fail@plt+0x47e4>
   16350:	bic	r3, r5, r5, asr #31
   16354:	cmp	r4, r3
   16358:	str	r2, [sp, #48]	; 0x30
   1635c:	movcs	sl, r4
   16360:	movcc	sl, r3
   16364:	mvn	r2, r8
   16368:	b	15bec <__assert_fail@plt+0x4094>
   1636c:	mov	r3, #0
   16370:	str	r3, [sp, #48]	; 0x30
   16374:	ldr	r2, [sp, #28]
   16378:	ldr	r3, [r2, #32]
   1637c:	cmp	r3, #0
   16380:	blt	15588 <__assert_fail@plt+0x3a30>
   16384:	ldr	r1, [r2, #36]	; 0x24
   16388:	cmp	r1, #0
   1638c:	movlt	sl, #1
   16390:	blt	163ac <__assert_fail@plt+0x4854>
   16394:	ldreq	r3, [sp, #40]	; 0x28
   16398:	movne	sl, #0
   1639c:	ldrbeq	r3, [r3]
   163a0:	subeq	sl, r3, #45	; 0x2d
   163a4:	clzeq	sl, sl
   163a8:	lsreq	sl, sl, #5
   163ac:	ldr	r0, [pc, #352]	; 16514 <__assert_fail@plt+0x49bc>
   163b0:	smull	r3, r2, r0, r1
   163b4:	ldr	r3, [pc, #348]	; 16518 <__assert_fail@plt+0x49c0>
   163b8:	add	r2, r2, r1
   163bc:	smull	r3, ip, r3, r1
   163c0:	asr	r3, r1, #31
   163c4:	rsb	r2, r3, r2, asr #5
   163c8:	add	ip, ip, r1
   163cc:	smull	lr, r0, r0, r2
   163d0:	add	r0, r0, r2
   163d4:	asr	lr, r2, #31
   163d8:	rsb	r0, lr, r0, asr #5
   163dc:	rsb	lr, r2, r2, lsl #4
   163e0:	rsb	r0, r0, r0, lsl #4
   163e4:	rsb	r3, r3, ip, asr #11
   163e8:	sub	r0, r2, r0, lsl #2
   163ec:	ldr	r2, [sp, #48]	; 0x30
   163f0:	sub	r1, r1, lr, lsl #2
   163f4:	cmp	r2, #3
   163f8:	ldrls	pc, [pc, r2, lsl #2]
   163fc:	b	16e4c <__assert_fail@plt+0x52f4>
   16400:	ldrdeq	r6, [r1], -ip
   16404:			; <UNDEFINED> instruction: 0x000167b8
   16408:	andeq	r6, r1, r0, lsl #15
   1640c:	andeq	r6, r1, r0, lsl #16
   16410:	cmp	fp, #69	; 0x45
   16414:	beq	16334 <__assert_fail@plt+0x47dc>
   16418:	ldr	r3, [sp, #28]
   1641c:	mov	r2, #2
   16420:	str	r2, [sp, #52]	; 0x34
   16424:	ldr	r3, [r3, #12]
   16428:	b	15a30 <__assert_fail@plt+0x3ed8>
   1642c:	cmp	fp, #69	; 0x45
   16430:	beq	16334 <__assert_fail@plt+0x47dc>
   16434:	ldr	r3, [sp, #28]
   16438:	ldr	r3, [r3, #12]
   1643c:	cmp	r9, #48	; 0x30
   16440:	cmpne	r9, #45	; 0x2d
   16444:	mov	r2, #2
   16448:	movne	r9, #95	; 0x5f
   1644c:	str	r2, [sp, #52]	; 0x34
   16450:	b	15a30 <__assert_fail@plt+0x3ed8>
   16454:	cmp	fp, #69	; 0x45
   16458:	beq	16334 <__assert_fail@plt+0x47dc>
   1645c:	ldr	r3, [sp, #28]
   16460:	ldr	ip, [pc, #200]	; 16530 <__assert_fail@plt+0x49d8>
   16464:	ldrd	r2, [r3, #24]
   16468:	add	r2, r2, #6
   1646c:	smull	r0, r1, ip, r2
   16470:	add	r0, r1, r2
   16474:	asr	r1, r2, #31
   16478:	rsb	r1, r1, r0, asr #2
   1647c:	mov	r0, #2
   16480:	rsb	r1, r1, r1, lsl #3
   16484:	sub	r2, r2, r1
   16488:	sub	r3, r3, r2
   1648c:	add	r3, r3, #7
   16490:	str	r0, [sp, #52]	; 0x34
   16494:	smull	r1, r2, ip, r3
   16498:	add	r2, r2, r3
   1649c:	asr	r3, r3, #31
   164a0:	rsb	r3, r3, r2, asr r0
   164a4:	b	15a30 <__assert_fail@plt+0x3ed8>
   164a8:	cmp	fp, #69	; 0x45
   164ac:	beq	16a8c <__assert_fail@plt+0x4f34>
   164b0:	cmp	fp, #79	; 0x4f
   164b4:	beq	16334 <__assert_fail@plt+0x47dc>
   164b8:	ldr	r3, [sp, #28]
   164bc:	ldr	r2, [pc, #112]	; 16534 <__assert_fail@plt+0x49dc>
   164c0:	mov	r0, #0
   164c4:	ldr	r1, [r3, #20]
   164c8:	str	r0, [sp, #56]	; 0x38
   164cc:	cmp	r1, r2
   164d0:	add	r3, r1, #1888	; 0x760
   164d4:	add	r3, r3, #12
   164d8:	movge	sl, #0
   164dc:	movlt	sl, #1
   164e0:	mov	r2, #4
   164e4:	str	r2, [sp, #52]	; 0x34
   164e8:	cmp	sl, #0
   164ec:	rsbne	r3, r3, #0
   164f0:	b	15db0 <__assert_fail@plt+0x4258>
   164f4:	andeq	r4, r3, r8, lsl #30
   164f8:	andeq	r3, r2, r8, lsr #17
   164fc:	stcleq	12, cr12, [ip], {204}	; 0xcc
   16500:	andeq	r2, r0, r0, lsr #10
   16504:	andeq	r3, r2, r0, lsr r8
   16508:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1650c:	andeq	r3, r2, r4, lsr #16
   16510:	andeq	r3, r2, r4, lsl #6
   16514:	stmhi	r8, {r0, r3, r7, fp, pc}
   16518:			; <UNDEFINED> instruction: 0x91a2b3c5
   1651c:	andeq	r3, r2, r8, lsl r8
   16520:	mvnpl	r8, pc, lsl r5
   16524:	andeq	r0, r0, sp, ror #2
   16528:	andeq	r0, r0, lr, ror #2
   1652c:	strbtvs	r6, [r6], -r7, ror #12
   16530:	subls	r2, r9, #-1828716544	; 0x93000000
   16534:			; <UNDEFINED> instruction: 0xfffff894
   16538:	ldr	r3, [sp, #20]
   1653c:	cmp	sl, #0
   16540:	movne	r3, #0
   16544:	ldr	r0, [sp, #40]	; 0x28
   16548:	str	r3, [sp, #20]
   1654c:	bl	11954 <strlen@plt>
   16550:	bic	r3, r5, r5, asr #31
   16554:	cmp	r0, r3
   16558:	movcs	r2, r0
   1655c:	movcc	r2, r3
   16560:	mov	r1, r2
   16564:	str	r2, [sp, #48]	; 0x30
   16568:	mvn	r2, r8
   1656c:	cmp	r2, r1
   16570:	mov	r4, r0
   16574:	bls	155d0 <__assert_fail@plt+0x3a78>
   16578:	cmp	r7, #0
   1657c:	beq	16094 <__assert_fail@plt+0x453c>
   16580:	cmp	r0, r3
   16584:	bcs	165b8 <__assert_fail@plt+0x4a60>
   16588:	cmp	r9, #48	; 0x30
   1658c:	sub	r5, r5, r0
   16590:	beq	16dc0 <__assert_fail@plt+0x5268>
   16594:	cmp	r5, #0
   16598:	movne	fp, #0
   1659c:	beq	165b8 <__assert_fail@plt+0x4a60>
   165a0:	add	fp, fp, #1
   165a4:	mov	r1, r7
   165a8:	mov	r0, #32
   165ac:	bl	11a50 <fputc@plt>
   165b0:	cmp	r5, fp
   165b4:	bne	165a0 <__assert_fail@plt+0x4a48>
   165b8:	cmp	sl, #0
   165bc:	bne	16cf8 <__assert_fail@plt+0x51a0>
   165c0:	ldr	r3, [sp, #20]
   165c4:	cmp	r3, #0
   165c8:	beq	16ce0 <__assert_fail@plt+0x5188>
   165cc:	mov	r2, r4
   165d0:	ldr	r1, [sp, #40]	; 0x28
   165d4:	mov	r0, r7
   165d8:	bl	154b0 <__assert_fail@plt+0x3958>
   165dc:	b	16094 <__assert_fail@plt+0x453c>
   165e0:	cmp	fp, #69	; 0x45
   165e4:	beq	16a8c <__assert_fail@plt+0x4f34>
   165e8:	ldr	r3, [sp, #28]
   165ec:	ldr	r2, [r3, #20]
   165f0:	ldr	r3, [pc, #-216]	; 16520 <__assert_fail@plt+0x49c8>
   165f4:	smull	r3, r1, r3, r2
   165f8:	asr	r3, r2, #31
   165fc:	rsb	r3, r3, r1, asr #5
   16600:	add	r3, r3, r3, lsl #2
   16604:	add	r3, r3, r3, lsl #2
   16608:	subs	r3, r2, r3, lsl #2
   1660c:	bpl	162a8 <__assert_fail@plt+0x4750>
   16610:	ldr	r1, [pc, #-228]	; 16534 <__assert_fail@plt+0x49dc>
   16614:	cmp	r2, r1
   16618:	bge	16d40 <__assert_fail@plt+0x51e8>
   1661c:	mov	r2, #2
   16620:	rsb	r3, r3, #0
   16624:	str	r2, [sp, #52]	; 0x34
   16628:	b	15a30 <__assert_fail@plt+0x3ed8>
   1662c:	cmp	fp, #69	; 0x45
   16630:	beq	16334 <__assert_fail@plt+0x47dc>
   16634:	ldr	r3, [sp, #28]
   16638:	mov	r0, #0
   1663c:	mov	r2, #3
   16640:	ldr	r3, [r3, #28]
   16644:	str	r0, [sp, #56]	; 0x38
   16648:	cmn	r3, #1
   1664c:	movge	sl, #0
   16650:	movlt	sl, #1
   16654:	add	r3, r3, #1
   16658:	str	r2, [sp, #52]	; 0x34
   1665c:	b	15a3c <__assert_fail@plt+0x3ee4>
   16660:	cmp	fp, #69	; 0x45
   16664:	beq	16334 <__assert_fail@plt+0x47dc>
   16668:	ldr	r2, [sp, #28]
   1666c:	mov	r1, #2
   16670:	str	r1, [sp, #52]	; 0x34
   16674:	ldrd	r2, [r2, #24]
   16678:	sub	r3, r3, r2
   1667c:	ldr	r2, [pc, #-340]	; 16530 <__assert_fail@plt+0x49d8>
   16680:	add	r3, r3, #7
   16684:	smull	r1, r2, r2, r3
   16688:	add	r2, r2, r3
   1668c:	asr	r3, r3, #31
   16690:	rsb	r3, r3, r2, asr #2
   16694:	b	15a30 <__assert_fail@plt+0x3ed8>
   16698:	cmp	fp, #69	; 0x45
   1669c:	beq	16334 <__assert_fail@plt+0x47dc>
   166a0:	ldr	r3, [sp, #44]	; 0x2c
   166a4:	b	1643c <__assert_fail@plt+0x48e4>
   166a8:	cmp	fp, #69	; 0x45
   166ac:	beq	16334 <__assert_fail@plt+0x47dc>
   166b0:	ldr	r3, [sp, #28]
   166b4:	mov	r0, #0
   166b8:	mov	r2, #2
   166bc:	ldr	r3, [r3, #16]
   166c0:	str	r0, [sp, #56]	; 0x38
   166c4:	cmn	r3, #1
   166c8:	movge	sl, #0
   166cc:	movlt	sl, #1
   166d0:	add	r3, r3, #1
   166d4:	str	r2, [sp, #52]	; 0x34
   166d8:	b	15a3c <__assert_fail@plt+0x3ee4>
   166dc:	cmp	fp, #69	; 0x45
   166e0:	beq	16334 <__assert_fail@plt+0x47dc>
   166e4:	ldr	r3, [sp, #28]
   166e8:	ldr	r3, [r3, #8]
   166ec:	b	1643c <__assert_fail@plt+0x48e4>
   166f0:	ldrb	r3, [r6, #1]
   166f4:	add	r2, r6, #1
   166f8:	cmp	r3, #58	; 0x3a
   166fc:	beq	16d0c <__assert_fail@plt+0x51b4>
   16700:	mov	r1, #1
   16704:	str	r1, [sp, #48]	; 0x30
   16708:	cmp	r3, #122	; 0x7a
   1670c:	moveq	r6, r2
   16710:	beq	16374 <__assert_fail@plt+0x481c>
   16714:	b	16334 <__assert_fail@plt+0x47dc>
   16718:	mov	r3, #1
   1671c:	str	r3, [sp, #56]	; 0x38
   16720:	b	15cdc <__assert_fail@plt+0x4184>
   16724:	ldr	fp, [pc, #-528]	; 1651c <__assert_fail@plt+0x49c4>
   16728:	b	15a84 <__assert_fail@plt+0x3f2c>
   1672c:	add	r5, r5, #1
   16730:	mov	r1, r7
   16734:	mov	r0, #48	; 0x30
   16738:	bl	11a50 <fputc@plt>
   1673c:	cmp	r9, r5
   16740:	bne	1672c <__assert_fail@plt+0x4bd4>
   16744:	b	15b90 <__assert_fail@plt+0x4038>
   16748:	add	r5, r5, #1
   1674c:	mov	r1, r7
   16750:	mov	r0, #48	; 0x30
   16754:	bl	11a50 <fputc@plt>
   16758:	cmp	r9, r5
   1675c:	bne	16748 <__assert_fail@plt+0x4bf0>
   16760:	b	15cc4 <__assert_fail@plt+0x416c>
   16764:	add	fp, fp, #1
   16768:	mov	r1, r7
   1676c:	mov	r0, #48	; 0x30
   16770:	bl	11a50 <fputc@plt>
   16774:	cmp	r5, fp
   16778:	bne	16764 <__assert_fail@plt+0x4c0c>
   1677c:	b	1630c <__assert_fail@plt+0x47b4>
   16780:	rsb	r2, r3, r3, lsl #5
   16784:	add	r0, r0, r0, lsl #2
   16788:	add	r3, r3, r2, lsl #2
   1678c:	add	r0, r0, r0, lsl #2
   16790:	add	ip, r3, r3, lsl #2
   16794:	mov	r2, #1
   16798:	lsl	r3, r0, #2
   1679c:	add	r3, r3, ip, lsl #4
   167a0:	str	r2, [sp, #56]	; 0x38
   167a4:	mov	r2, #9
   167a8:	add	r3, r3, r1
   167ac:	mov	r0, #20
   167b0:	str	r2, [sp, #52]	; 0x34
   167b4:	b	15a3c <__assert_fail@plt+0x3ee4>
   167b8:	add	r3, r3, r3, lsl #2
   167bc:	mov	r2, #1
   167c0:	add	r3, r3, r3, lsl #2
   167c4:	str	r2, [sp, #56]	; 0x38
   167c8:	mov	r2, #6
   167cc:	add	r3, r0, r3, lsl #2
   167d0:	str	r2, [sp, #52]	; 0x34
   167d4:	mov	r0, #4
   167d8:	b	15a3c <__assert_fail@plt+0x3ee4>
   167dc:	add	r3, r3, r3, lsl #2
   167e0:	mov	r2, #1
   167e4:	add	r3, r3, r3, lsl #2
   167e8:	str	r2, [sp, #56]	; 0x38
   167ec:	mov	r2, #5
   167f0:	add	r3, r0, r3, lsl #2
   167f4:	str	r2, [sp, #52]	; 0x34
   167f8:	mov	r0, #0
   167fc:	b	15a3c <__assert_fail@plt+0x3ee4>
   16800:	cmp	r1, #0
   16804:	bne	16780 <__assert_fail@plt+0x4c28>
   16808:	cmp	r0, #0
   1680c:	bne	167b8 <__assert_fail@plt+0x4c60>
   16810:	mov	r2, #1
   16814:	str	r2, [sp, #56]	; 0x38
   16818:	mov	r2, #3
   1681c:	str	r2, [sp, #52]	; 0x34
   16820:	b	15a3c <__assert_fail@plt+0x3ee4>
   16824:	mov	r6, r3
   16828:	mov	r0, r4
   1682c:	mvn	r5, #-2147483648	; 0x80000000
   16830:	b	15620 <__assert_fail@plt+0x3ac8>
   16834:	cmp	r9, #45	; 0x2d
   16838:	movne	r3, #45	; 0x2d
   1683c:	strne	r3, [sp, #60]	; 0x3c
   16840:	bne	15e54 <__assert_fail@plt+0x42fc>
   16844:	bic	r3, r5, r5, asr #31
   16848:	cmp	r3, #1
   1684c:	movcs	sl, r3
   16850:	movcc	sl, #1
   16854:	mvn	r2, r8
   16858:	cmp	r2, sl
   1685c:	str	r3, [sp, #56]	; 0x38
   16860:	bls	155d0 <__assert_fail@plt+0x3a78>
   16864:	cmp	r7, #0
   16868:	beq	16898 <__assert_fail@plt+0x4d40>
   1686c:	cmp	r3, #1
   16870:	ldr	r3, [sp, #52]	; 0x34
   16874:	movls	r2, #0
   16878:	movhi	r2, #1
   1687c:	cmp	r3, #0
   16880:	movne	r2, #0
   16884:	cmp	r2, #0
   16888:	bne	16c98 <__assert_fail@plt+0x5140>
   1688c:	mov	r0, r9
   16890:	mov	r1, r7
   16894:	bl	11a50 <fputc@plt>
   16898:	ldr	r3, [sp, #48]	; 0x30
   1689c:	add	r8, r8, sl
   168a0:	add	r3, r3, #10
   168a4:	sub	sl, r3, r4
   168a8:	mvn	r2, r8
   168ac:	mov	r9, #45	; 0x2d
   168b0:	b	16000 <__assert_fail@plt+0x44a8>
   168b4:	mov	r1, sl
   168b8:	mov	r0, r4
   168bc:	mov	r3, r7
   168c0:	mov	r2, #1
   168c4:	bl	1181c <fwrite@plt>
   168c8:	b	16094 <__assert_fail@plt+0x453c>
   168cc:	mov	r1, r4
   168d0:	ldr	r0, [sp, #48]	; 0x30
   168d4:	mov	r3, r7
   168d8:	mov	r2, #1
   168dc:	bl	1181c <fwrite@plt>
   168e0:	b	15c50 <__assert_fail@plt+0x40f8>
   168e4:	ldr	r3, [sp, #48]	; 0x30
   168e8:	mov	r1, r4
   168ec:	sub	r0, r3, #3
   168f0:	mov	r2, #1
   168f4:	mov	r3, r7
   168f8:	bl	1181c <fwrite@plt>
   168fc:	b	159d0 <__assert_fail@plt+0x3e78>
   16900:	ldr	r3, [sp, #48]	; 0x30
   16904:	mov	r2, r4
   16908:	sub	r1, r3, #3
   1690c:	mov	r0, r7
   16910:	bl	15470 <__assert_fail@plt+0x3918>
   16914:	b	159d0 <__assert_fail@plt+0x3e78>
   16918:	cmp	r5, #0
   1691c:	beq	159a4 <__assert_fail@plt+0x3e4c>
   16920:	add	sl, sl, #1
   16924:	mov	r1, r7
   16928:	mov	r0, #48	; 0x30
   1692c:	bl	11a50 <fputc@plt>
   16930:	cmp	r5, sl
   16934:	bne	16920 <__assert_fail@plt+0x4dc8>
   16938:	b	159a4 <__assert_fail@plt+0x3e4c>
   1693c:	bic	r3, r5, r5, asr #31
   16940:	cmp	r3, #1
   16944:	movcs	r1, r3
   16948:	movcc	r1, #1
   1694c:	cmp	r1, r2
   16950:	str	r3, [sp, #56]	; 0x38
   16954:	str	r1, [sp, #48]	; 0x30
   16958:	bcs	155d0 <__assert_fail@plt+0x3a78>
   1695c:	cmp	r7, #0
   16960:	beq	169e4 <__assert_fail@plt+0x4e8c>
   16964:	cmp	r3, #1
   16968:	ldr	r3, [sp, #52]	; 0x34
   1696c:	movls	r2, #0
   16970:	movhi	r2, #1
   16974:	cmp	r3, #0
   16978:	movne	r2, #0
   1697c:	cmp	r2, #0
   16980:	beq	169d8 <__assert_fail@plt+0x4e80>
   16984:	sub	r3, r5, #1
   16988:	cmp	r9, #48	; 0x30
   1698c:	str	r3, [sp, #64]	; 0x40
   16990:	beq	16d5c <__assert_fail@plt+0x5204>
   16994:	cmp	r3, #0
   16998:	beq	169d8 <__assert_fail@plt+0x4e80>
   1699c:	mov	fp, #0
   169a0:	str	r5, [sp, #68]	; 0x44
   169a4:	mov	r5, fp
   169a8:	mov	fp, r6
   169ac:	mov	r6, r4
   169b0:	ldr	r4, [sp, #64]	; 0x40
   169b4:	add	r5, r5, #1
   169b8:	mov	r1, r7
   169bc:	mov	r0, #32
   169c0:	bl	11a50 <fputc@plt>
   169c4:	cmp	r4, r5
   169c8:	bne	169b4 <__assert_fail@plt+0x4e5c>
   169cc:	ldr	r5, [sp, #68]	; 0x44
   169d0:	mov	r4, r6
   169d4:	mov	r6, fp
   169d8:	ldr	r0, [sp, #60]	; 0x3c
   169dc:	mov	r1, r7
   169e0:	bl	11a50 <fputc@plt>
   169e4:	ldr	r3, [sp, #48]	; 0x30
   169e8:	add	r8, r8, r3
   169ec:	mvn	r2, r8
   169f0:	b	16000 <__assert_fail@plt+0x44a8>
   169f4:	mov	r3, #0
   169f8:	str	r3, [sp, #60]	; 0x3c
   169fc:	cmp	fp, r2
   16a00:	bcs	155d0 <__assert_fail@plt+0x3a78>
   16a04:	cmp	r7, #0
   16a08:	bne	16b30 <__assert_fail@plt+0x4fd8>
   16a0c:	cmp	fp, r5
   16a10:	add	r8, r8, fp
   16a14:	movge	r5, #0
   16a18:	sublt	r5, r5, fp
   16a1c:	ldr	r3, [sp, #60]	; 0x3c
   16a20:	mvn	r2, r8
   16a24:	cmp	r3, #0
   16a28:	bne	16ac8 <__assert_fail@plt+0x4f70>
   16a2c:	ldr	r3, [sp, #48]	; 0x30
   16a30:	str	r5, [sp, #56]	; 0x38
   16a34:	add	r3, r3, #10
   16a38:	sub	sl, r3, r4
   16a3c:	mov	r9, #95	; 0x5f
   16a40:	b	16000 <__assert_fail@plt+0x44a8>
   16a44:	cmp	r5, #0
   16a48:	beq	16078 <__assert_fail@plt+0x4520>
   16a4c:	mov	fp, #0
   16a50:	add	fp, fp, #1
   16a54:	mov	r1, r7
   16a58:	mov	r0, #48	; 0x30
   16a5c:	bl	11a50 <fputc@plt>
   16a60:	cmp	r5, fp
   16a64:	bne	16a50 <__assert_fail@plt+0x4ef8>
   16a68:	b	16078 <__assert_fail@plt+0x4520>
   16a6c:	mov	r5, #0
   16a70:	add	r5, r5, #1
   16a74:	mov	r1, r7
   16a78:	mov	r0, #48	; 0x30
   16a7c:	bl	11a50 <fputc@plt>
   16a80:	cmp	r5, fp
   16a84:	bcc	16a70 <__assert_fail@plt+0x4f18>
   16a88:	b	15f28 <__assert_fail@plt+0x43d0>
   16a8c:	mov	r3, #0
   16a90:	str	r3, [sp, #52]	; 0x34
   16a94:	b	15a54 <__assert_fail@plt+0x3efc>
   16a98:	cmp	r5, #0
   16a9c:	beq	15c34 <__assert_fail@plt+0x40dc>
   16aa0:	mov	fp, #0
   16aa4:	add	fp, fp, #1
   16aa8:	mov	r1, r7
   16aac:	mov	r0, #48	; 0x30
   16ab0:	bl	11a50 <fputc@plt>
   16ab4:	cmp	r5, fp
   16ab8:	bne	16aa4 <__assert_fail@plt+0x4f4c>
   16abc:	b	15c34 <__assert_fail@plt+0x40dc>
   16ac0:	mov	r9, #43	; 0x2b
   16ac4:	b	16844 <__assert_fail@plt+0x4cec>
   16ac8:	cmp	r5, #1
   16acc:	movcs	sl, r5
   16ad0:	movcc	sl, #1
   16ad4:	cmp	sl, r2
   16ad8:	bcs	155d0 <__assert_fail@plt+0x3a78>
   16adc:	cmp	r7, #0
   16ae0:	beq	16b10 <__assert_fail@plt+0x4fb8>
   16ae4:	ldr	r2, [sp, #52]	; 0x34
   16ae8:	cmp	r5, #1
   16aec:	movls	r3, #0
   16af0:	movhi	r3, #1
   16af4:	cmp	r2, #0
   16af8:	movne	r3, #0
   16afc:	cmp	r3, #0
   16b00:	bne	16d9c <__assert_fail@plt+0x5244>
   16b04:	ldr	r0, [sp, #60]	; 0x3c
   16b08:	mov	r1, r7
   16b0c:	bl	11a50 <fputc@plt>
   16b10:	ldr	r3, [sp, #48]	; 0x30
   16b14:	add	r8, r8, sl
   16b18:	add	r3, r3, #10
   16b1c:	sub	sl, r3, r4
   16b20:	mvn	r2, r8
   16b24:	str	r5, [sp, #56]	; 0x38
   16b28:	mov	r9, #95	; 0x5f
   16b2c:	b	16000 <__assert_fail@plt+0x44a8>
   16b30:	mov	sl, #0
   16b34:	add	sl, sl, #1
   16b38:	mov	r1, r7
   16b3c:	mov	r0, #32
   16b40:	bl	11a50 <fputc@plt>
   16b44:	cmp	fp, sl
   16b48:	bhi	16b34 <__assert_fail@plt+0x4fdc>
   16b4c:	b	16a0c <__assert_fail@plt+0x4eb4>
   16b50:	cmp	r5, #0
   16b54:	beq	15b0c <__assert_fail@plt+0x3fb4>
   16b58:	mov	sl, #0
   16b5c:	add	sl, sl, #1
   16b60:	mov	r1, r7
   16b64:	mov	r0, #48	; 0x30
   16b68:	bl	11a50 <fputc@plt>
   16b6c:	cmp	r5, sl
   16b70:	bne	16b5c <__assert_fail@plt+0x5004>
   16b74:	b	15b0c <__assert_fail@plt+0x3fb4>
   16b78:	sub	r0, r1, #1
   16b7c:	tst	r0, #3
   16b80:	ldrne	r1, [pc, #-1636]	; 16524 <__assert_fail@plt+0x49cc>
   16b84:	bne	16bc8 <__assert_fail@plt+0x5070>
   16b88:	ldr	r3, [pc, #-1648]	; 16520 <__assert_fail@plt+0x49c8>
   16b8c:	smull	r3, r2, r3, r0
   16b90:	asr	r3, r0, #31
   16b94:	rsb	r3, r3, r2, asr #5
   16b98:	add	r3, r3, r3, lsl #2
   16b9c:	add	r3, r3, r3, lsl #2
   16ba0:	cmp	r0, r3, lsl #2
   16ba4:	ldrne	r1, [pc, #-1668]	; 16528 <__assert_fail@plt+0x49d0>
   16ba8:	bne	16bc8 <__assert_fail@plt+0x5070>
   16bac:	mov	r1, #400	; 0x190
   16bb0:	bl	21888 <fts_children@@Base+0x17fc>
   16bb4:	ldr	r3, [pc, #-1688]	; 16524 <__assert_fail@plt+0x49cc>
   16bb8:	ldr	r2, [pc, #-1688]	; 16528 <__assert_fail@plt+0x49d0>
   16bbc:	cmp	r1, #0
   16bc0:	movne	r1, r3
   16bc4:	moveq	r1, r2
   16bc8:	ldr	r3, [sp, #48]	; 0x30
   16bcc:	mvn	r2, #0
   16bd0:	add	ip, r3, r1
   16bd4:	ldr	r3, [sp, #52]	; 0x34
   16bd8:	ldr	r1, [pc, #-1712]	; 16530 <__assert_fail@plt+0x49d8>
   16bdc:	sub	r3, ip, r3
   16be0:	add	r3, r3, #380	; 0x17c
   16be4:	add	r3, r3, #2
   16be8:	smull	r0, r1, r1, r3
   16bec:	add	r0, r1, r3
   16bf0:	asr	r1, r3, #31
   16bf4:	rsb	r1, r1, r0, asr #2
   16bf8:	rsb	r1, r1, r1, lsl #3
   16bfc:	sub	r3, r3, r1
   16c00:	sub	r3, ip, r3
   16c04:	add	r3, r3, #3
   16c08:	b	1625c <__assert_fail@plt+0x4704>
   16c0c:	cmp	r5, #8
   16c10:	bgt	16e2c <__assert_fail@plt+0x52d4>
   16c14:	ldr	r3, [sp, #1200]	; 0x4b0
   16c18:	mov	r2, r5
   16c1c:	ldr	r1, [pc, #-1784]	; 1652c <__assert_fail@plt+0x49d4>
   16c20:	add	r2, r2, #1
   16c24:	cmp	r2, #9
   16c28:	smull	r0, r1, r1, r3
   16c2c:	asr	r3, r3, #31
   16c30:	rsb	r3, r3, r1, asr #2
   16c34:	bne	16c1c <__assert_fail@plt+0x50c4>
   16c38:	str	r5, [sp, #52]	; 0x34
   16c3c:	b	15a30 <__assert_fail@plt+0x3ed8>
   16c40:	ldr	r2, [pc, #-1816]	; 16530 <__assert_fail@plt+0x49d8>
   16c44:	smull	r1, r2, r2, r3
   16c48:	add	r2, r2, r3
   16c4c:	asr	r3, r3, #31
   16c50:	rsb	r3, r3, r2, asr #2
   16c54:	mov	r2, #2
   16c58:	add	r3, r3, #1
   16c5c:	str	r2, [sp, #52]	; 0x34
   16c60:	b	15a30 <__assert_fail@plt+0x3ed8>
   16c64:	ldr	r1, [pc, #-1848]	; 16534 <__assert_fail@plt+0x49dc>
   16c68:	add	r3, sl, #1888	; 0x760
   16c6c:	sub	r1, r1, r2
   16c70:	add	r3, r3, #12
   16c74:	cmp	sl, r1
   16c78:	mov	r0, #0
   16c7c:	add	r3, r3, r2
   16c80:	mov	r2, #4
   16c84:	movge	sl, #0
   16c88:	movlt	sl, #1
   16c8c:	str	r0, [sp, #56]	; 0x38
   16c90:	str	r2, [sp, #52]	; 0x34
   16c94:	b	15a3c <__assert_fail@plt+0x3ee4>
   16c98:	subs	r3, r5, #1
   16c9c:	beq	1688c <__assert_fail@plt+0x4d34>
   16ca0:	mov	fp, #0
   16ca4:	str	r5, [sp, #60]	; 0x3c
   16ca8:	mov	r5, fp
   16cac:	mov	fp, r6
   16cb0:	mov	r6, r4
   16cb4:	mov	r4, r3
   16cb8:	add	r5, r5, #1
   16cbc:	mov	r1, r7
   16cc0:	mov	r0, #32
   16cc4:	bl	11a50 <fputc@plt>
   16cc8:	cmp	r4, r5
   16ccc:	bne	16cb8 <__assert_fail@plt+0x5160>
   16cd0:	mov	r4, r6
   16cd4:	ldr	r5, [sp, #60]	; 0x3c
   16cd8:	mov	r6, fp
   16cdc:	b	1688c <__assert_fail@plt+0x4d34>
   16ce0:	mov	r1, r4
   16ce4:	mov	r3, r7
   16ce8:	mov	r2, #1
   16cec:	ldr	r0, [sp, #40]	; 0x28
   16cf0:	bl	1181c <fwrite@plt>
   16cf4:	b	16094 <__assert_fail@plt+0x453c>
   16cf8:	mov	r2, r4
   16cfc:	ldr	r1, [sp, #40]	; 0x28
   16d00:	mov	r0, r7
   16d04:	bl	15470 <__assert_fail@plt+0x3918>
   16d08:	b	16094 <__assert_fail@plt+0x453c>
   16d0c:	add	r1, r6, #2
   16d10:	mov	r0, #1
   16d14:	mov	r2, r1
   16d18:	ldrb	r3, [r1], #1
   16d1c:	add	r0, r0, #1
   16d20:	cmp	r3, #58	; 0x3a
   16d24:	beq	16d14 <__assert_fail@plt+0x51bc>
   16d28:	str	r0, [sp, #48]	; 0x30
   16d2c:	b	16708 <__assert_fail@plt+0x4bb0>
   16d30:	ldr	r1, [pc, #-2052]	; 16534 <__assert_fail@plt+0x49dc>
   16d34:	sub	r1, r1, r2
   16d38:	cmp	r1, sl
   16d3c:	bgt	1661c <__assert_fail@plt+0x4ac4>
   16d40:	mov	r2, #2
   16d44:	add	r3, r3, #100	; 0x64
   16d48:	str	r2, [sp, #52]	; 0x34
   16d4c:	b	15a30 <__assert_fail@plt+0x3ed8>
   16d50:	str	r6, [sp, #48]	; 0x30
   16d54:	mov	r4, #1
   16d58:	b	15bec <__assert_fail@plt+0x4094>
   16d5c:	ldr	r3, [sp, #64]	; 0x40
   16d60:	cmp	r3, #0
   16d64:	beq	169d8 <__assert_fail@plt+0x4e80>
   16d68:	mov	fp, #0
   16d6c:	mov	r3, r6
   16d70:	mov	r6, r4
   16d74:	mov	r4, fp
   16d78:	mov	fp, r3
   16d7c:	mov	r1, r7
   16d80:	mov	r0, #48	; 0x30
   16d84:	bl	11a50 <fputc@plt>
   16d88:	ldr	r3, [sp, #64]	; 0x40
   16d8c:	add	r4, r4, #1
   16d90:	cmp	r3, r4
   16d94:	bne	16d7c <__assert_fail@plt+0x5224>
   16d98:	b	169d0 <__assert_fail@plt+0x4e78>
   16d9c:	sub	r9, r5, #1
   16da0:	mov	fp, #0
   16da4:	add	fp, fp, #1
   16da8:	mov	r1, r7
   16dac:	mov	r0, #32
   16db0:	bl	11a50 <fputc@plt>
   16db4:	cmp	r9, fp
   16db8:	bhi	16da4 <__assert_fail@plt+0x524c>
   16dbc:	b	16b04 <__assert_fail@plt+0x4fac>
   16dc0:	cmp	r5, #0
   16dc4:	beq	165b8 <__assert_fail@plt+0x4a60>
   16dc8:	mov	fp, #0
   16dcc:	add	fp, fp, #1
   16dd0:	mov	r1, r7
   16dd4:	mov	r0, #48	; 0x30
   16dd8:	bl	11a50 <fputc@plt>
   16ddc:	cmp	r5, fp
   16de0:	bne	16dcc <__assert_fail@plt+0x5274>
   16de4:	b	165b8 <__assert_fail@plt+0x4a60>
   16de8:	ldr	r3, [sp, #56]	; 0x38
   16dec:	cmp	r3, #0
   16df0:	beq	15f0c <__assert_fail@plt+0x43b4>
   16df4:	mov	r5, #0
   16df8:	mov	r3, r4
   16dfc:	mov	r4, r5
   16e00:	mov	r5, r3
   16e04:	mov	r1, r7
   16e08:	mov	r0, #48	; 0x30
   16e0c:	bl	11a50 <fputc@plt>
   16e10:	ldr	r3, [sp, #56]	; 0x38
   16e14:	add	r4, r4, #1
   16e18:	cmp	r3, r4
   16e1c:	bne	16e04 <__assert_fail@plt+0x52ac>
   16e20:	mov	r4, r5
   16e24:	b	15f0c <__assert_fail@plt+0x43b4>
   16e28:	bl	11780 <__stack_chk_fail@plt>
   16e2c:	ldr	r3, [sp, #1200]	; 0x4b0
   16e30:	str	r5, [sp, #52]	; 0x34
   16e34:	b	15a30 <__assert_fail@plt+0x3ed8>
   16e38:	ldr	r6, [sp, #48]	; 0x30
   16e3c:	b	16334 <__assert_fail@plt+0x47dc>
   16e40:	mov	r3, #0
   16e44:	str	r3, [sp, #52]	; 0x34
   16e48:	b	15a6c <__assert_fail@plt+0x3f14>
   16e4c:	ldrb	r3, [r6]
   16e50:	str	r6, [sp, #48]	; 0x30
   16e54:	b	15bc8 <__assert_fail@plt+0x4070>
   16e58:	push	{r4, r5, lr}
   16e5c:	sub	sp, sp, #28
   16e60:	ldr	r4, [pc, #68]	; 16eac <__assert_fail@plt+0x5354>
   16e64:	ldr	r5, [sp, #40]	; 0x28
   16e68:	mov	ip, #0
   16e6c:	str	r3, [sp, #4]
   16e70:	ldr	lr, [r4]
   16e74:	add	r3, sp, #19
   16e78:	str	r3, [sp]
   16e7c:	str	r5, [sp, #8]
   16e80:	mov	r3, ip
   16e84:	str	lr, [sp, #20]
   16e88:	strb	ip, [sp, #19]
   16e8c:	bl	154f0 <__assert_fail@plt+0x3998>
   16e90:	ldr	r2, [sp, #20]
   16e94:	ldr	r3, [r4]
   16e98:	cmp	r2, r3
   16e9c:	bne	16ea8 <__assert_fail@plt+0x5350>
   16ea0:	add	sp, sp, #28
   16ea4:	pop	{r4, r5, pc}
   16ea8:	bl	11780 <__stack_chk_fail@plt>
   16eac:	andeq	r4, r3, r8, lsl #30
   16eb0:	push	{r4, lr}
   16eb4:	mov	r1, #0
   16eb8:	mov	r4, r0
   16ebc:	ldr	r0, [pc, #64]	; 16f04 <__assert_fail@plt+0x53ac>
   16ec0:	bl	118a0 <open64@plt>
   16ec4:	cmp	r4, r0
   16ec8:	moveq	r3, #1
   16ecc:	beq	16ee0 <__assert_fail@plt+0x5388>
   16ed0:	cmp	r0, #0
   16ed4:	mov	r3, r0
   16ed8:	movlt	r3, #0
   16edc:	bge	16ee8 <__assert_fail@plt+0x5390>
   16ee0:	mov	r0, r3
   16ee4:	pop	{r4, pc}
   16ee8:	bl	11b34 <close@plt>
   16eec:	bl	11984 <__errno_location@plt>
   16ef0:	mov	r2, #9
   16ef4:	mov	r3, #0
   16ef8:	str	r2, [r0]
   16efc:	mov	r0, r3
   16f00:	pop	{r4, pc}
   16f04:	andeq	r3, r2, r8, lsr r8
   16f08:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f0c:	mov	sl, r0
   16f10:	mov	r0, r2
   16f14:	mov	r8, r2
   16f18:	mov	fp, r1
   16f1c:	bl	119c0 <fileno@plt>
   16f20:	mov	r4, r0
   16f24:	bl	11984 <__errno_location@plt>
   16f28:	cmp	r4, #1
   16f2c:	mov	r9, r0
   16f30:	beq	17064 <__assert_fail@plt+0x550c>
   16f34:	cmp	r4, #2
   16f38:	beq	17004 <__assert_fail@plt+0x54ac>
   16f3c:	cmp	r4, #0
   16f40:	beq	16ff8 <__assert_fail@plt+0x54a0>
   16f44:	mov	r1, #2
   16f48:	mov	r0, r1
   16f4c:	bl	1178c <dup2@plt>
   16f50:	subs	r4, r0, #2
   16f54:	movne	r4, #1
   16f58:	mov	r1, #1
   16f5c:	mov	r0, r1
   16f60:	bl	1178c <dup2@plt>
   16f64:	subs	r7, r0, #1
   16f68:	movne	r7, #1
   16f6c:	mov	r1, #0
   16f70:	mov	r0, r1
   16f74:	bl	1178c <dup2@plt>
   16f78:	subs	r5, r0, #0
   16f7c:	beq	16f98 <__assert_fail@plt+0x5440>
   16f80:	mov	r0, #0
   16f84:	bl	16eb0 <__assert_fail@plt+0x5358>
   16f88:	cmp	r0, #0
   16f8c:	mov	r5, r0
   16f90:	mov	r6, r0
   16f94:	beq	17070 <__assert_fail@plt+0x5518>
   16f98:	cmp	r7, #0
   16f9c:	bne	17018 <__assert_fail@plt+0x54c0>
   16fa0:	cmp	r4, #0
   16fa4:	beq	16fb8 <__assert_fail@plt+0x5460>
   16fa8:	mov	r0, #2
   16fac:	bl	16eb0 <__assert_fail@plt+0x5358>
   16fb0:	subs	r4, r0, #0
   16fb4:	beq	17050 <__assert_fail@plt+0x54f8>
   16fb8:	mov	r2, r8
   16fbc:	mov	r1, fp
   16fc0:	mov	r0, sl
   16fc4:	bl	1190c <freopen64@plt>
   16fc8:	mov	r6, r0
   16fcc:	cmp	r4, #0
   16fd0:	ldr	r8, [r9]
   16fd4:	bne	17058 <__assert_fail@plt+0x5500>
   16fd8:	cmp	r7, #0
   16fdc:	bne	17044 <__assert_fail@plt+0x54ec>
   16fe0:	cmp	r5, #0
   16fe4:	bne	1700c <__assert_fail@plt+0x54b4>
   16fe8:	cmp	r6, #0
   16fec:	streq	r8, [r9]
   16ff0:	mov	r0, r6
   16ff4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ff8:	mov	r7, r4
   16ffc:	mov	r5, r4
   17000:	b	16fb8 <__assert_fail@plt+0x5460>
   17004:	mov	r4, #0
   17008:	b	16f58 <__assert_fail@plt+0x5400>
   1700c:	mov	r0, #0
   17010:	bl	11b34 <close@plt>
   17014:	b	16fe8 <__assert_fail@plt+0x5490>
   17018:	mov	r0, #1
   1701c:	bl	16eb0 <__assert_fail@plt+0x5358>
   17020:	subs	r7, r0, #0
   17024:	bne	16fa0 <__assert_fail@plt+0x5448>
   17028:	cmp	r4, #0
   1702c:	ldr	r8, [r9]
   17030:	moveq	r6, r4
   17034:	beq	17044 <__assert_fail@plt+0x54ec>
   17038:	mov	r0, #2
   1703c:	mov	r6, r7
   17040:	bl	11b34 <close@plt>
   17044:	mov	r0, #1
   17048:	bl	11b34 <close@plt>
   1704c:	b	16fe0 <__assert_fail@plt+0x5488>
   17050:	ldr	r8, [r9]
   17054:	mov	r6, r4
   17058:	mov	r0, #2
   1705c:	bl	11b34 <close@plt>
   17060:	b	16fd8 <__assert_fail@plt+0x5480>
   17064:	mov	r4, #0
   17068:	mov	r7, r4
   1706c:	b	16f6c <__assert_fail@plt+0x5414>
   17070:	mov	r5, #1
   17074:	b	16fcc <__assert_fail@plt+0x5474>
   17078:	cmp	r0, #10
   1707c:	movcc	r0, #10
   17080:	push	{r4, r5, r6, r7, r8, lr}
   17084:	orr	r7, r0, #1
   17088:	cmn	r7, #1
   1708c:	beq	17104 <__assert_fail@plt+0x55ac>
   17090:	ldr	r8, [pc, #116]	; 1710c <__assert_fail@plt+0x55b4>
   17094:	umull	r2, r3, r8, r7
   17098:	cmp	r7, #9
   1709c:	lsr	r3, r3, #1
   170a0:	add	r3, r3, r3, lsl #1
   170a4:	sub	r3, r7, r3
   170a8:	bls	170f0 <__assert_fail@plt+0x5598>
   170ac:	cmp	r3, #0
   170b0:	beq	170f8 <__assert_fail@plt+0x55a0>
   170b4:	mov	r6, #16
   170b8:	mov	r5, #9
   170bc:	mov	r4, #3
   170c0:	b	170d0 <__assert_fail@plt+0x5578>
   170c4:	cmp	r1, #0
   170c8:	add	r6, r6, #8
   170cc:	beq	170f8 <__assert_fail@plt+0x55a0>
   170d0:	add	r4, r4, #2
   170d4:	mov	r1, r4
   170d8:	mov	r0, r7
   170dc:	bl	21648 <fts_children@@Base+0x15bc>
   170e0:	add	r5, r5, r6
   170e4:	cmp	r5, r7
   170e8:	mov	r3, r1
   170ec:	bcc	170c4 <__assert_fail@plt+0x556c>
   170f0:	cmp	r3, #0
   170f4:	bne	17104 <__assert_fail@plt+0x55ac>
   170f8:	add	r7, r7, #2
   170fc:	cmn	r7, #1
   17100:	bne	17094 <__assert_fail@plt+0x553c>
   17104:	mov	r0, r7
   17108:	pop	{r4, r5, r6, r7, r8, pc}
   1710c:	bge	feac1bc0 <optarg@@GLIBC_2.4+0xfea8c998>
   17110:	push	{r4, lr}
   17114:	ror	r0, r0, #3
   17118:	bl	21648 <fts_children@@Base+0x15bc>
   1711c:	mov	r0, r1
   17120:	pop	{r4, pc}
   17124:	sub	r0, r1, r0
   17128:	clz	r0, r0
   1712c:	lsr	r0, r0, #5
   17130:	bx	lr
   17134:	push	{r4, lr}
   17138:	mov	r4, r0
   1713c:	mov	r0, r1
   17140:	ldr	r3, [r4, #24]
   17144:	ldr	r1, [r4, #8]
   17148:	blx	r3
   1714c:	ldr	r3, [r4, #8]
   17150:	cmp	r3, r0
   17154:	bls	17164 <__assert_fail@plt+0x560c>
   17158:	ldr	r3, [r4]
   1715c:	add	r0, r3, r0, lsl #3
   17160:	pop	{r4, pc}
   17164:	bl	11b28 <abort@plt>
   17168:	push	{r4, r5, r6, r7, r8, lr}
   1716c:	mov	r8, r2
   17170:	mov	r5, r1
   17174:	mov	r7, r3
   17178:	mov	r6, r0
   1717c:	bl	17134 <__assert_fail@plt+0x55dc>
   17180:	str	r0, [r8]
   17184:	ldr	r1, [r0]
   17188:	cmp	r1, #0
   1718c:	beq	17274 <__assert_fail@plt+0x571c>
   17190:	cmp	r1, r5
   17194:	mov	r4, r0
   17198:	beq	17238 <__assert_fail@plt+0x56e0>
   1719c:	ldr	r3, [r6, #28]
   171a0:	mov	r0, r5
   171a4:	blx	r3
   171a8:	cmp	r0, #0
   171ac:	ldrne	r3, [r4]
   171b0:	bne	1723c <__assert_fail@plt+0x56e4>
   171b4:	ldr	r2, [r4, #4]
   171b8:	cmp	r2, #0
   171bc:	beq	17274 <__assert_fail@plt+0x571c>
   171c0:	ldr	r3, [r2]
   171c4:	cmp	r5, r3
   171c8:	bne	171ec <__assert_fail@plt+0x5694>
   171cc:	b	1720c <__assert_fail@plt+0x56b4>
   171d0:	ldr	r4, [r4, #4]
   171d4:	ldr	r2, [r4, #4]
   171d8:	cmp	r2, #0
   171dc:	beq	17274 <__assert_fail@plt+0x571c>
   171e0:	ldr	r3, [r2]
   171e4:	cmp	r3, r5
   171e8:	beq	1720c <__assert_fail@plt+0x56b4>
   171ec:	mov	r1, r3
   171f0:	mov	r0, r5
   171f4:	ldr	r3, [r6, #28]
   171f8:	blx	r3
   171fc:	cmp	r0, #0
   17200:	beq	171d0 <__assert_fail@plt+0x5678>
   17204:	ldr	r2, [r4, #4]
   17208:	ldr	r3, [r2]
   1720c:	cmp	r7, #0
   17210:	beq	1726c <__assert_fail@plt+0x5714>
   17214:	ldr	r0, [r2, #4]
   17218:	mov	r1, #0
   1721c:	str	r0, [r4, #4]
   17220:	str	r1, [r2]
   17224:	ldr	r1, [r6, #36]	; 0x24
   17228:	mov	r0, r3
   1722c:	str	r1, [r2, #4]
   17230:	str	r2, [r6, #36]	; 0x24
   17234:	pop	{r4, r5, r6, r7, r8, pc}
   17238:	mov	r3, r1
   1723c:	cmp	r7, #0
   17240:	beq	1726c <__assert_fail@plt+0x5714>
   17244:	ldr	r2, [r4, #4]
   17248:	cmp	r2, #0
   1724c:	movne	ip, #0
   17250:	ldmne	r2, {r0, r1}
   17254:	streq	r2, [r4]
   17258:	stmne	r4, {r0, r1}
   1725c:	strne	ip, [r2]
   17260:	ldrne	r1, [r6, #36]	; 0x24
   17264:	strne	r1, [r2, #4]
   17268:	strne	r2, [r6, #36]	; 0x24
   1726c:	mov	r0, r3
   17270:	pop	{r4, r5, r6, r7, r8, pc}
   17274:	mov	r3, #0
   17278:	mov	r0, r3
   1727c:	pop	{r4, r5, r6, r7, r8, pc}
   17280:	ldr	r2, [pc, #164]	; 1732c <__assert_fail@plt+0x57d4>
   17284:	ldr	r3, [r0]
   17288:	cmp	r3, r2
   1728c:	beq	17314 <__assert_fail@plt+0x57bc>
   17290:	vldr	s15, [r3, #8]
   17294:	vldr	s14, [pc, #128]	; 1731c <__assert_fail@plt+0x57c4>
   17298:	vcmpe.f32	s15, s14
   1729c:	vmrs	APSR_nzcv, fpscr
   172a0:	ble	17308 <__assert_fail@plt+0x57b0>
   172a4:	vldr	s13, [pc, #116]	; 17320 <__assert_fail@plt+0x57c8>
   172a8:	vcmpe.f32	s15, s13
   172ac:	vmrs	APSR_nzcv, fpscr
   172b0:	bpl	17308 <__assert_fail@plt+0x57b0>
   172b4:	vldr	s13, [pc, #104]	; 17324 <__assert_fail@plt+0x57cc>
   172b8:	vldr	s12, [r3, #12]
   172bc:	vcmpe.f32	s12, s13
   172c0:	vmrs	APSR_nzcv, fpscr
   172c4:	ble	17308 <__assert_fail@plt+0x57b0>
   172c8:	vldr	s13, [r3]
   172cc:	vcmpe.f32	s13, #0.0
   172d0:	vmrs	APSR_nzcv, fpscr
   172d4:	blt	17308 <__assert_fail@plt+0x57b0>
   172d8:	vadd.f32	s14, s13, s14
   172dc:	vldr	s13, [r3, #4]
   172e0:	vcmpe.f32	s14, s13
   172e4:	vmrs	APSR_nzcv, fpscr
   172e8:	bpl	17308 <__assert_fail@plt+0x57b0>
   172ec:	vldr	s12, [pc, #52]	; 17328 <__assert_fail@plt+0x57d0>
   172f0:	vcmpe.f32	s13, s12
   172f4:	vmrs	APSR_nzcv, fpscr
   172f8:	bhi	17308 <__assert_fail@plt+0x57b0>
   172fc:	vcmpe.f32	s15, s14
   17300:	vmrs	APSR_nzcv, fpscr
   17304:	bgt	17314 <__assert_fail@plt+0x57bc>
   17308:	str	r2, [r0]
   1730c:	mov	r0, #0
   17310:	bx	lr
   17314:	mov	r0, #1
   17318:	bx	lr
   1731c:	stclcc	12, cr12, [ip, #820]	; 0x334
   17320:	svccc	0x00666666
   17324:	svccc	0x008ccccd
   17328:	svccc	0x00800000
   1732c:	andeq	r3, r2, r4, asr #16
   17330:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17334:	ldr	r3, [r1, #4]
   17338:	ldr	r6, [r1]
   1733c:	cmp	r6, r3
   17340:	bcs	17408 <__assert_fail@plt+0x58b0>
   17344:	mov	r8, r2
   17348:	mov	r5, r0
   1734c:	mov	r7, r1
   17350:	add	r6, r6, #8
   17354:	mov	r9, #0
   17358:	b	17368 <__assert_fail@plt+0x5810>
   1735c:	cmp	r3, r6
   17360:	add	r6, r6, #8
   17364:	bls	17408 <__assert_fail@plt+0x58b0>
   17368:	ldr	sl, [r6, #-8]
   1736c:	cmp	sl, #0
   17370:	beq	1735c <__assert_fail@plt+0x5804>
   17374:	ldr	r4, [r6, #-4]
   17378:	cmp	r4, #0
   1737c:	bne	1739c <__assert_fail@plt+0x5844>
   17380:	b	173ec <__assert_fail@plt+0x5894>
   17384:	ldr	r2, [r0, #4]
   17388:	cmp	r3, #0
   1738c:	str	r2, [r4, #4]
   17390:	str	r4, [r0, #4]
   17394:	mov	r4, r3
   17398:	beq	173e8 <__assert_fail@plt+0x5890>
   1739c:	ldr	sl, [r4]
   173a0:	mov	r0, r5
   173a4:	mov	r1, sl
   173a8:	bl	17134 <__assert_fail@plt+0x55dc>
   173ac:	ldr	r3, [r4, #4]
   173b0:	ldr	r2, [r0]
   173b4:	cmp	r2, #0
   173b8:	bne	17384 <__assert_fail@plt+0x582c>
   173bc:	ldr	r1, [r5, #12]
   173c0:	str	sl, [r0]
   173c4:	add	r1, r1, #1
   173c8:	str	r1, [r5, #12]
   173cc:	str	r2, [r4]
   173d0:	ldr	r2, [r5, #36]	; 0x24
   173d4:	cmp	r3, #0
   173d8:	str	r2, [r4, #4]
   173dc:	str	r4, [r5, #36]	; 0x24
   173e0:	mov	r4, r3
   173e4:	bne	1739c <__assert_fail@plt+0x5844>
   173e8:	ldr	sl, [r6, #-8]
   173ec:	cmp	r8, #0
   173f0:	str	r9, [r6, #-4]
   173f4:	beq	17410 <__assert_fail@plt+0x58b8>
   173f8:	ldr	r3, [r7, #4]
   173fc:	cmp	r3, r6
   17400:	add	r6, r6, #8
   17404:	bhi	17368 <__assert_fail@plt+0x5810>
   17408:	mov	r0, #1
   1740c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17410:	mov	r1, sl
   17414:	mov	r0, r5
   17418:	bl	17134 <__assert_fail@plt+0x55dc>
   1741c:	ldr	r3, [r0]
   17420:	mov	r4, r0
   17424:	cmp	r3, #0
   17428:	beq	17468 <__assert_fail@plt+0x5910>
   1742c:	ldr	r0, [r5, #36]	; 0x24
   17430:	cmp	r0, #0
   17434:	beq	1747c <__assert_fail@plt+0x5924>
   17438:	ldr	r3, [r0, #4]
   1743c:	str	r3, [r5, #36]	; 0x24
   17440:	ldr	r3, [r4, #4]
   17444:	str	sl, [r0]
   17448:	str	r3, [r0, #4]
   1744c:	str	r0, [r4, #4]
   17450:	ldr	r2, [r7, #12]
   17454:	str	r9, [r6, #-8]
   17458:	sub	r2, r2, #1
   1745c:	ldr	r3, [r7, #4]
   17460:	str	r2, [r7, #12]
   17464:	b	1735c <__assert_fail@plt+0x5804>
   17468:	ldr	r3, [r5, #12]
   1746c:	str	sl, [r0]
   17470:	add	r3, r3, #1
   17474:	str	r3, [r5, #12]
   17478:	b	17450 <__assert_fail@plt+0x58f8>
   1747c:	mov	r0, #8
   17480:	bl	118b8 <malloc@plt>
   17484:	cmp	r0, #0
   17488:	bne	17440 <__assert_fail@plt+0x58e8>
   1748c:	mov	r0, r8
   17490:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17494:	ldr	r0, [r0, #8]
   17498:	bx	lr
   1749c:	ldr	r0, [r0, #12]
   174a0:	bx	lr
   174a4:	ldr	r0, [r0, #16]
   174a8:	bx	lr
   174ac:	ldm	r0, {r1, r3}
   174b0:	cmp	r1, r3
   174b4:	bcs	1751c <__assert_fail@plt+0x59c4>
   174b8:	sub	ip, r3, #1
   174bc:	sub	ip, ip, r1
   174c0:	add	r3, r1, #16
   174c4:	bic	ip, ip, #7
   174c8:	add	ip, ip, r3
   174cc:	add	r1, r1, #8
   174d0:	mov	r0, #0
   174d4:	b	174e4 <__assert_fail@plt+0x598c>
   174d8:	add	r1, r1, #8
   174dc:	cmp	r1, ip
   174e0:	bxeq	lr
   174e4:	ldr	r3, [r1, #-8]
   174e8:	cmp	r3, #0
   174ec:	beq	174d8 <__assert_fail@plt+0x5980>
   174f0:	ldr	r3, [r1, #-4]
   174f4:	mov	r2, #1
   174f8:	cmp	r3, #0
   174fc:	beq	17510 <__assert_fail@plt+0x59b8>
   17500:	ldr	r3, [r3, #4]
   17504:	add	r2, r2, #1
   17508:	cmp	r3, #0
   1750c:	bne	17500 <__assert_fail@plt+0x59a8>
   17510:	cmp	r0, r2
   17514:	movcc	r0, r2
   17518:	b	174d8 <__assert_fail@plt+0x5980>
   1751c:	mov	r0, #0
   17520:	bx	lr
   17524:	ldm	r0, {r1, r3}
   17528:	push	{lr}		; (str lr, [sp, #-4]!)
   1752c:	cmp	r1, r3
   17530:	bcs	175c0 <__assert_fail@plt+0x5a68>
   17534:	sub	ip, r3, #1
   17538:	sub	ip, ip, r1
   1753c:	add	r3, r1, #16
   17540:	bic	ip, ip, #7
   17544:	mov	r2, #0
   17548:	add	ip, ip, r3
   1754c:	add	r1, r1, #8
   17550:	mov	lr, r2
   17554:	b	17564 <__assert_fail@plt+0x5a0c>
   17558:	add	r1, r1, #8
   1755c:	cmp	r1, ip
   17560:	beq	175a0 <__assert_fail@plt+0x5a48>
   17564:	ldr	r3, [r1, #-8]
   17568:	cmp	r3, #0
   1756c:	beq	17558 <__assert_fail@plt+0x5a00>
   17570:	ldr	r3, [r1, #-4]
   17574:	add	lr, lr, #1
   17578:	cmp	r3, #0
   1757c:	add	r2, r2, #1
   17580:	beq	17558 <__assert_fail@plt+0x5a00>
   17584:	ldr	r3, [r3, #4]
   17588:	add	r2, r2, #1
   1758c:	cmp	r3, #0
   17590:	bne	17584 <__assert_fail@plt+0x5a2c>
   17594:	add	r1, r1, #8
   17598:	cmp	r1, ip
   1759c:	bne	17564 <__assert_fail@plt+0x5a0c>
   175a0:	ldr	r3, [r0, #12]
   175a4:	cmp	r3, lr
   175a8:	ldreq	r0, [r0, #16]
   175ac:	subeq	r0, r0, r2
   175b0:	clzeq	r0, r0
   175b4:	lsreq	r0, r0, #5
   175b8:	movne	r0, #0
   175bc:	pop	{pc}		; (ldr pc, [sp], #4)
   175c0:	mov	r2, #0
   175c4:	mov	lr, r2
   175c8:	b	175a0 <__assert_fail@plt+0x5a48>
   175cc:	push	{r4, r5, r6, r7, lr}
   175d0:	mov	r4, r1
   175d4:	ldr	r2, [r0]
   175d8:	ldr	r1, [r0, #4]
   175dc:	sub	sp, sp, #12
   175e0:	cmp	r2, r1
   175e4:	ldr	r3, [r0, #16]
   175e8:	ldrd	r6, [r0, #8]
   175ec:	bcs	176d0 <__assert_fail@plt+0x5b78>
   175f0:	sub	ip, r1, #1
   175f4:	sub	ip, ip, r2
   175f8:	bic	ip, ip, #7
   175fc:	add	r1, r2, #16
   17600:	add	ip, ip, r1
   17604:	add	r0, r2, #8
   17608:	mov	r5, #0
   1760c:	b	1761c <__assert_fail@plt+0x5ac4>
   17610:	add	r0, r0, #8
   17614:	cmp	r0, ip
   17618:	beq	1765c <__assert_fail@plt+0x5b04>
   1761c:	ldr	r2, [r0, #-8]
   17620:	cmp	r2, #0
   17624:	beq	17610 <__assert_fail@plt+0x5ab8>
   17628:	ldr	r2, [r0, #-4]
   1762c:	mov	r1, #1
   17630:	cmp	r2, #0
   17634:	beq	17648 <__assert_fail@plt+0x5af0>
   17638:	ldr	r2, [r2, #4]
   1763c:	add	r1, r1, #1
   17640:	cmp	r2, #0
   17644:	bne	17638 <__assert_fail@plt+0x5ae0>
   17648:	cmp	r5, r1
   1764c:	add	r0, r0, #8
   17650:	movcc	r5, r1
   17654:	cmp	r0, ip
   17658:	bne	1761c <__assert_fail@plt+0x5ac4>
   1765c:	ldr	r2, [pc, #124]	; 176e0 <__assert_fail@plt+0x5b88>
   17660:	mov	r1, #1
   17664:	mov	r0, r4
   17668:	bl	119cc <__fprintf_chk@plt>
   1766c:	mov	r3, r6
   17670:	ldr	r2, [pc, #108]	; 176e4 <__assert_fail@plt+0x5b8c>
   17674:	mov	r1, #1
   17678:	mov	r0, r4
   1767c:	bl	119cc <__fprintf_chk@plt>
   17680:	vmov	s15, r7
   17684:	vldr	d5, [pc, #76]	; 176d8 <__assert_fail@plt+0x5b80>
   17688:	mov	r3, r7
   1768c:	ldr	r2, [pc, #84]	; 176e8 <__assert_fail@plt+0x5b90>
   17690:	vcvt.f64.u32	d6, s15
   17694:	vmov	s15, r6
   17698:	mov	r1, #1
   1769c:	mov	r0, r4
   176a0:	vcvt.f64.u32	d7, s15
   176a4:	vmul.f64	d6, d6, d5
   176a8:	vdiv.f64	d5, d6, d7
   176ac:	vstr	d5, [sp]
   176b0:	bl	119cc <__fprintf_chk@plt>
   176b4:	mov	r3, r5
   176b8:	mov	r0, r4
   176bc:	ldr	r2, [pc, #40]	; 176ec <__assert_fail@plt+0x5b94>
   176c0:	mov	r1, #1
   176c4:	add	sp, sp, #12
   176c8:	pop	{r4, r5, r6, r7, lr}
   176cc:	b	119cc <__fprintf_chk@plt>
   176d0:	mov	r5, #0
   176d4:	b	1765c <__assert_fail@plt+0x5b04>
   176d8:	andeq	r0, r0, r0
   176dc:	subsmi	r0, r9, r0
   176e0:	andeq	r3, r2, r8, asr r8
   176e4:	andeq	r3, r2, r0, ror r8
   176e8:	andeq	r3, r2, r8, lsl #17
   176ec:	andeq	r3, r2, ip, lsr #17
   176f0:	push	{r4, r5, r6, lr}
   176f4:	mov	r6, r0
   176f8:	mov	r5, r1
   176fc:	bl	17134 <__assert_fail@plt+0x55dc>
   17700:	ldr	r3, [r0]
   17704:	cmp	r3, #0
   17708:	beq	17744 <__assert_fail@plt+0x5bec>
   1770c:	mov	r4, r0
   17710:	b	17718 <__assert_fail@plt+0x5bc0>
   17714:	ldr	r3, [r4]
   17718:	cmp	r3, r5
   1771c:	mov	r1, r3
   17720:	mov	r0, r5
   17724:	beq	17750 <__assert_fail@plt+0x5bf8>
   17728:	ldr	r3, [r6, #28]
   1772c:	blx	r3
   17730:	cmp	r0, #0
   17734:	bne	1774c <__assert_fail@plt+0x5bf4>
   17738:	ldr	r4, [r4, #4]
   1773c:	cmp	r4, #0
   17740:	bne	17714 <__assert_fail@plt+0x5bbc>
   17744:	mov	r0, #0
   17748:	pop	{r4, r5, r6, pc}
   1774c:	ldr	r5, [r4]
   17750:	mov	r0, r5
   17754:	pop	{r4, r5, r6, pc}
   17758:	ldr	r3, [r0, #16]
   1775c:	cmp	r3, #0
   17760:	beq	177b0 <__assert_fail@plt+0x5c58>
   17764:	ldr	r3, [r0]
   17768:	ldr	r2, [r0, #4]
   1776c:	cmp	r3, r2
   17770:	bcs	177a8 <__assert_fail@plt+0x5c50>
   17774:	ldr	r0, [r3]
   17778:	cmp	r0, #0
   1777c:	bxne	lr
   17780:	sub	r2, r2, #1
   17784:	sub	r2, r2, r3
   17788:	bic	r2, r2, #7
   1778c:	add	r2, r3, r2
   17790:	b	177a0 <__assert_fail@plt+0x5c48>
   17794:	ldr	r0, [r3, #8]!
   17798:	cmp	r0, #0
   1779c:	bxne	lr
   177a0:	cmp	r3, r2
   177a4:	bne	17794 <__assert_fail@plt+0x5c3c>
   177a8:	push	{r4, lr}
   177ac:	bl	11b28 <abort@plt>
   177b0:	mov	r0, r3
   177b4:	bx	lr
   177b8:	push	{r4, r5, r6, lr}
   177bc:	mov	r5, r0
   177c0:	mov	r4, r1
   177c4:	bl	17134 <__assert_fail@plt+0x55dc>
   177c8:	mov	r2, r0
   177cc:	mov	r3, r0
   177d0:	b	177dc <__assert_fail@plt+0x5c84>
   177d4:	cmp	r3, #0
   177d8:	beq	177f0 <__assert_fail@plt+0x5c98>
   177dc:	ldm	r3, {r1, r3}
   177e0:	cmp	r1, r4
   177e4:	bne	177d4 <__assert_fail@plt+0x5c7c>
   177e8:	cmp	r3, #0
   177ec:	bne	17818 <__assert_fail@plt+0x5cc0>
   177f0:	ldr	r3, [r5, #4]
   177f4:	b	17804 <__assert_fail@plt+0x5cac>
   177f8:	ldr	r0, [r2]
   177fc:	cmp	r0, #0
   17800:	popne	{r4, r5, r6, pc}
   17804:	add	r2, r2, #8
   17808:	cmp	r3, r2
   1780c:	bhi	177f8 <__assert_fail@plt+0x5ca0>
   17810:	mov	r0, #0
   17814:	pop	{r4, r5, r6, pc}
   17818:	ldr	r0, [r3]
   1781c:	pop	{r4, r5, r6, pc}
   17820:	push	{r4, r5, lr}
   17824:	ldm	r0, {r5, lr}
   17828:	cmp	lr, r5
   1782c:	bls	178b0 <__assert_fail@plt+0x5d58>
   17830:	mov	ip, #0
   17834:	ldr	r3, [r5]
   17838:	cmp	r3, #0
   1783c:	bne	17858 <__assert_fail@plt+0x5d00>
   17840:	add	r5, r5, #8
   17844:	cmp	lr, r5
   17848:	bhi	17834 <__assert_fail@plt+0x5cdc>
   1784c:	mov	r2, ip
   17850:	mov	r0, r2
   17854:	pop	{r4, r5, pc}
   17858:	cmp	r2, ip
   1785c:	bls	1784c <__assert_fail@plt+0x5cf4>
   17860:	str	r3, [r1, ip, lsl #2]
   17864:	ldr	r3, [r5, #4]
   17868:	add	r4, ip, #1
   1786c:	cmp	r3, #0
   17870:	add	lr, r1, ip, lsl #2
   17874:	beq	178a4 <__assert_fail@plt+0x5d4c>
   17878:	mov	ip, r4
   1787c:	cmp	r2, ip
   17880:	beq	17850 <__assert_fail@plt+0x5cf8>
   17884:	ldr	r4, [r3]
   17888:	add	ip, ip, #1
   1788c:	str	r4, [lr, #4]!
   17890:	ldr	r3, [r3, #4]
   17894:	cmp	r3, #0
   17898:	bne	1787c <__assert_fail@plt+0x5d24>
   1789c:	ldr	lr, [r0, #4]
   178a0:	b	17840 <__assert_fail@plt+0x5ce8>
   178a4:	ldr	lr, [r0, #4]
   178a8:	mov	ip, r4
   178ac:	b	17840 <__assert_fail@plt+0x5ce8>
   178b0:	mov	r2, #0
   178b4:	b	17850 <__assert_fail@plt+0x5cf8>
   178b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   178bc:	ldr	r3, [r0, #4]
   178c0:	ldr	r8, [r0]
   178c4:	cmp	r3, r8
   178c8:	bls	17930 <__assert_fail@plt+0x5dd8>
   178cc:	mov	r7, r2
   178d0:	mov	r6, r1
   178d4:	mov	r9, r0
   178d8:	mov	r5, #0
   178dc:	ldr	r0, [r8]
   178e0:	cmp	r0, #0
   178e4:	bne	178fc <__assert_fail@plt+0x5da4>
   178e8:	add	r8, r8, #8
   178ec:	cmp	r3, r8
   178f0:	bhi	178dc <__assert_fail@plt+0x5d84>
   178f4:	mov	r0, r5
   178f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   178fc:	mov	r4, r8
   17900:	b	17908 <__assert_fail@plt+0x5db0>
   17904:	ldr	r0, [r4]
   17908:	mov	r1, r7
   1790c:	blx	r6
   17910:	cmp	r0, #0
   17914:	beq	178f4 <__assert_fail@plt+0x5d9c>
   17918:	ldr	r4, [r4, #4]
   1791c:	add	r5, r5, #1
   17920:	cmp	r4, #0
   17924:	bne	17904 <__assert_fail@plt+0x5dac>
   17928:	ldr	r3, [r9, #4]
   1792c:	b	178e8 <__assert_fail@plt+0x5d90>
   17930:	mov	r5, #0
   17934:	b	178f4 <__assert_fail@plt+0x5d9c>
   17938:	push	{r4, r5, r6, lr}
   1793c:	mov	r4, r0
   17940:	ldrb	r0, [r0]
   17944:	cmp	r0, #0
   17948:	beq	17978 <__assert_fail@plt+0x5e20>
   1794c:	mov	r5, r1
   17950:	mov	r1, #0
   17954:	rsb	r1, r1, r1, lsl #5
   17958:	add	r0, r1, r0
   1795c:	mov	r1, r5
   17960:	bl	21648 <fts_children@@Base+0x15bc>
   17964:	ldrb	r0, [r4, #1]!
   17968:	cmp	r0, #0
   1796c:	bne	17954 <__assert_fail@plt+0x5dfc>
   17970:	mov	r0, r1
   17974:	pop	{r4, r5, r6, pc}
   17978:	mov	r1, r0
   1797c:	mov	r0, r1
   17980:	pop	{r4, r5, r6, pc}
   17984:	push	{lr}		; (str lr, [sp, #-4]!)
   17988:	mov	ip, r0
   1798c:	ldr	lr, [pc, #16]	; 179a4 <__assert_fail@plt+0x5e4c>
   17990:	ldm	lr!, {r0, r1, r2, r3}
   17994:	ldr	lr, [lr]
   17998:	stmia	ip!, {r0, r1, r2, r3}
   1799c:	str	lr, [ip]
   179a0:	pop	{pc}		; (ldr pc, [sp], #4)
   179a4:	andeq	r3, r2, r4, asr #16
   179a8:	push	{r4, r5, r6, r7, r8, lr}
   179ac:	sub	sp, sp, #8
   179b0:	cmp	r2, #0
   179b4:	ldr	ip, [pc, #300]	; 17ae8 <__assert_fail@plt+0x5f90>
   179b8:	str	r0, [sp, #4]
   179bc:	ldr	r5, [pc, #296]	; 17aec <__assert_fail@plt+0x5f94>
   179c0:	mov	r0, #40	; 0x28
   179c4:	movne	r5, r2
   179c8:	cmp	r3, #0
   179cc:	movne	r8, r3
   179d0:	moveq	r8, ip
   179d4:	mov	r6, r1
   179d8:	bl	118b8 <malloc@plt>
   179dc:	subs	r4, r0, #0
   179e0:	beq	17aac <__assert_fail@plt+0x5f54>
   179e4:	cmp	r6, #0
   179e8:	add	r0, r4, #20
   179ec:	beq	17a88 <__assert_fail@plt+0x5f30>
   179f0:	str	r6, [r4, #20]
   179f4:	bl	17280 <__assert_fail@plt+0x5728>
   179f8:	cmp	r0, #0
   179fc:	beq	17aa0 <__assert_fail@plt+0x5f48>
   17a00:	ldrb	r3, [r6, #16]
   17a04:	cmp	r3, #0
   17a08:	vldreq	s13, [r6, #8]
   17a0c:	beq	17ab8 <__assert_fail@plt+0x5f60>
   17a10:	ldr	r0, [sp, #4]
   17a14:	bl	17078 <__assert_fail@plt+0x5520>
   17a18:	lsrs	r3, r0, #30
   17a1c:	movne	r7, #1
   17a20:	moveq	r7, #0
   17a24:	tst	r0, #536870912	; 0x20000000
   17a28:	mov	r6, r0
   17a2c:	bne	17aa0 <__assert_fail@plt+0x5f48>
   17a30:	cmp	r7, #0
   17a34:	bne	17aa0 <__assert_fail@plt+0x5f48>
   17a38:	cmp	r0, #0
   17a3c:	str	r0, [r4, #8]
   17a40:	beq	17aa0 <__assert_fail@plt+0x5f48>
   17a44:	mov	r1, #8
   17a48:	bl	1169c <calloc@plt>
   17a4c:	cmp	r0, #0
   17a50:	str	r0, [r4]
   17a54:	beq	17aa0 <__assert_fail@plt+0x5f48>
   17a58:	ldr	r3, [sp, #32]
   17a5c:	add	r0, r0, r6, lsl #3
   17a60:	str	r0, [r4, #4]
   17a64:	str	r7, [r4, #12]
   17a68:	mov	r0, r4
   17a6c:	str	r7, [r4, #16]
   17a70:	str	r5, [r4, #24]
   17a74:	str	r8, [r4, #28]
   17a78:	str	r3, [r4, #32]
   17a7c:	str	r7, [r4, #36]	; 0x24
   17a80:	add	sp, sp, #8
   17a84:	pop	{r4, r5, r6, r7, r8, pc}
   17a88:	ldr	r3, [pc, #96]	; 17af0 <__assert_fail@plt+0x5f98>
   17a8c:	str	r3, [r4, #20]
   17a90:	bl	17280 <__assert_fail@plt+0x5728>
   17a94:	cmp	r0, #0
   17a98:	vldrne	s13, [pc, #64]	; 17ae0 <__assert_fail@plt+0x5f88>
   17a9c:	bne	17ab8 <__assert_fail@plt+0x5f60>
   17aa0:	mov	r0, r4
   17aa4:	bl	11720 <free@plt>
   17aa8:	mov	r4, #0
   17aac:	mov	r0, r4
   17ab0:	add	sp, sp, #8
   17ab4:	pop	{r4, r5, r6, r7, r8, pc}
   17ab8:	vldr	s15, [sp, #4]
   17abc:	vldr	s14, [pc, #32]	; 17ae4 <__assert_fail@plt+0x5f8c>
   17ac0:	vcvt.f32.u32	s12, s15
   17ac4:	vdiv.f32	s15, s12, s13
   17ac8:	vcmpe.f32	s15, s14
   17acc:	vmrs	APSR_nzcv, fpscr
   17ad0:	bge	17aa0 <__assert_fail@plt+0x5f48>
   17ad4:	vcvt.u32.f32	s15, s15
   17ad8:	vstr	s15, [sp, #4]
   17adc:	b	17a10 <__assert_fail@plt+0x5eb8>
   17ae0:	svccc	0x004ccccd
   17ae4:	svcmi	0x00800000
   17ae8:	andeq	r7, r1, r4, lsr #2
   17aec:	andeq	r7, r1, r0, lsl r1
   17af0:	andeq	r3, r2, r4, asr #16
   17af4:	push	{r4, r5, r6, r7, r8, lr}
   17af8:	mov	r5, r0
   17afc:	ldr	r6, [r0]
   17b00:	ldr	r2, [r0, #4]
   17b04:	cmp	r6, r2
   17b08:	addcc	r6, r6, #8
   17b0c:	movcc	r7, #0
   17b10:	bcc	17b24 <__assert_fail@plt+0x5fcc>
   17b14:	b	17b98 <__assert_fail@plt+0x6040>
   17b18:	cmp	r2, r6
   17b1c:	add	r6, r6, #8
   17b20:	bls	17b98 <__assert_fail@plt+0x6040>
   17b24:	ldr	r3, [r6, #-8]
   17b28:	cmp	r3, #0
   17b2c:	beq	17b18 <__assert_fail@plt+0x5fc0>
   17b30:	ldr	r4, [r6, #-4]
   17b34:	ldr	r2, [r5, #32]
   17b38:	cmp	r4, #0
   17b3c:	beq	17b70 <__assert_fail@plt+0x6018>
   17b40:	cmp	r2, #0
   17b44:	beq	17b54 <__assert_fail@plt+0x5ffc>
   17b48:	ldr	r0, [r4]
   17b4c:	blx	r2
   17b50:	ldr	r2, [r5, #32]
   17b54:	ldr	r3, [r4, #4]
   17b58:	ldr	r1, [r5, #36]	; 0x24
   17b5c:	str	r7, [r4]
   17b60:	str	r1, [r4, #4]
   17b64:	str	r4, [r5, #36]	; 0x24
   17b68:	subs	r4, r3, #0
   17b6c:	bne	17b40 <__assert_fail@plt+0x5fe8>
   17b70:	cmp	r2, #0
   17b74:	beq	17b80 <__assert_fail@plt+0x6028>
   17b78:	ldr	r0, [r6, #-8]
   17b7c:	blx	r2
   17b80:	str	r7, [r6, #-8]
   17b84:	str	r7, [r6, #-4]
   17b88:	ldr	r2, [r5, #4]
   17b8c:	cmp	r2, r6
   17b90:	add	r6, r6, #8
   17b94:	bhi	17b24 <__assert_fail@plt+0x5fcc>
   17b98:	mov	r3, #0
   17b9c:	str	r3, [r5, #12]
   17ba0:	str	r3, [r5, #16]
   17ba4:	pop	{r4, r5, r6, r7, r8, pc}
   17ba8:	ldr	r3, [r0, #32]
   17bac:	push	{r4, r5, r6, lr}
   17bb0:	cmp	r3, #0
   17bb4:	mov	r6, r0
   17bb8:	ldr	r5, [r0]
   17bbc:	ldr	r3, [r0, #4]
   17bc0:	beq	17c28 <__assert_fail@plt+0x60d0>
   17bc4:	ldr	r2, [r0, #16]
   17bc8:	cmp	r2, #0
   17bcc:	beq	17c28 <__assert_fail@plt+0x60d0>
   17bd0:	cmp	r5, r3
   17bd4:	bcc	17be8 <__assert_fail@plt+0x6090>
   17bd8:	b	17c5c <__assert_fail@plt+0x6104>
   17bdc:	add	r5, r5, #8
   17be0:	cmp	r3, r5
   17be4:	bls	17c24 <__assert_fail@plt+0x60cc>
   17be8:	ldr	r0, [r5]
   17bec:	cmp	r0, #0
   17bf0:	beq	17bdc <__assert_fail@plt+0x6084>
   17bf4:	mov	r4, r5
   17bf8:	b	17c00 <__assert_fail@plt+0x60a8>
   17bfc:	ldr	r0, [r4]
   17c00:	ldr	r3, [r6, #32]
   17c04:	blx	r3
   17c08:	ldr	r4, [r4, #4]
   17c0c:	cmp	r4, #0
   17c10:	bne	17bfc <__assert_fail@plt+0x60a4>
   17c14:	ldr	r3, [r6, #4]
   17c18:	add	r5, r5, #8
   17c1c:	cmp	r3, r5
   17c20:	bhi	17be8 <__assert_fail@plt+0x6090>
   17c24:	ldr	r5, [r6]
   17c28:	cmp	r5, r3
   17c2c:	bcs	17c5c <__assert_fail@plt+0x6104>
   17c30:	ldr	r0, [r5, #4]
   17c34:	cmp	r0, #0
   17c38:	beq	17c50 <__assert_fail@plt+0x60f8>
   17c3c:	ldr	r4, [r0, #4]
   17c40:	bl	11720 <free@plt>
   17c44:	subs	r0, r4, #0
   17c48:	bne	17c3c <__assert_fail@plt+0x60e4>
   17c4c:	ldr	r3, [r6, #4]
   17c50:	add	r5, r5, #8
   17c54:	cmp	r3, r5
   17c58:	bhi	17c30 <__assert_fail@plt+0x60d8>
   17c5c:	ldr	r0, [r6, #36]	; 0x24
   17c60:	cmp	r0, #0
   17c64:	beq	17c78 <__assert_fail@plt+0x6120>
   17c68:	ldr	r4, [r0, #4]
   17c6c:	bl	11720 <free@plt>
   17c70:	subs	r0, r4, #0
   17c74:	bne	17c68 <__assert_fail@plt+0x6110>
   17c78:	ldr	r0, [r6]
   17c7c:	bl	11720 <free@plt>
   17c80:	mov	r0, r6
   17c84:	pop	{r4, r5, r6, lr}
   17c88:	b	11720 <free@plt>
   17c8c:	push	{r4, r5, r6, r7, r8, lr}
   17c90:	sub	sp, sp, #56	; 0x38
   17c94:	ldr	r8, [r0, #20]
   17c98:	ldr	r7, [pc, #392]	; 17e28 <__assert_fail@plt+0x62d0>
   17c9c:	mov	r6, r0
   17ca0:	ldrb	r3, [r8, #16]
   17ca4:	ldr	r2, [r7]
   17ca8:	str	r1, [sp, #4]
   17cac:	cmp	r3, #0
   17cb0:	str	r2, [sp, #52]	; 0x34
   17cb4:	bne	17ce0 <__assert_fail@plt+0x6188>
   17cb8:	vmov	s15, r1
   17cbc:	vldr	s13, [r8, #8]
   17cc0:	vldr	s14, [pc, #348]	; 17e24 <__assert_fail@plt+0x62cc>
   17cc4:	vcvt.f32.u32	s12, s15
   17cc8:	vdiv.f32	s15, s12, s13
   17ccc:	vcmpe.f32	s15, s14
   17cd0:	vmrs	APSR_nzcv, fpscr
   17cd4:	vcvtlt.u32.f32	s15, s15
   17cd8:	vstrlt	s15, [sp, #4]
   17cdc:	bge	17d10 <__assert_fail@plt+0x61b8>
   17ce0:	ldr	r0, [sp, #4]
   17ce4:	bl	17078 <__assert_fail@plt+0x5520>
   17ce8:	lsrs	r3, r0, #30
   17cec:	movne	r4, #1
   17cf0:	moveq	r4, #0
   17cf4:	tst	r0, #536870912	; 0x20000000
   17cf8:	movne	r4, #1
   17cfc:	cmp	r0, #0
   17d00:	moveq	r4, #1
   17d04:	cmp	r4, #0
   17d08:	mov	r5, r0
   17d0c:	beq	17d30 <__assert_fail@plt+0x61d8>
   17d10:	mov	r4, #0
   17d14:	ldr	r2, [sp, #52]	; 0x34
   17d18:	ldr	r3, [r7]
   17d1c:	mov	r0, r4
   17d20:	cmp	r2, r3
   17d24:	bne	17e1c <__assert_fail@plt+0x62c4>
   17d28:	add	sp, sp, #56	; 0x38
   17d2c:	pop	{r4, r5, r6, r7, r8, pc}
   17d30:	ldr	r3, [r6, #8]
   17d34:	cmp	r3, r0
   17d38:	beq	17de4 <__assert_fail@plt+0x628c>
   17d3c:	mov	r1, #8
   17d40:	bl	1169c <calloc@plt>
   17d44:	cmp	r0, #0
   17d48:	str	r0, [sp, #12]
   17d4c:	beq	17d10 <__assert_fail@plt+0x61b8>
   17d50:	add	r0, r0, r5, lsl #3
   17d54:	ldr	r1, [r6, #32]
   17d58:	str	r0, [sp, #16]
   17d5c:	ldr	r0, [r6, #28]
   17d60:	ldr	ip, [r6, #24]
   17d64:	ldr	r3, [r6, #36]	; 0x24
   17d68:	mov	r2, r4
   17d6c:	str	r0, [sp, #40]	; 0x28
   17d70:	str	r1, [sp, #44]	; 0x2c
   17d74:	add	r0, sp, #12
   17d78:	mov	r1, r6
   17d7c:	str	r4, [sp, #24]
   17d80:	str	r4, [sp, #28]
   17d84:	str	r5, [sp, #20]
   17d88:	str	r8, [sp, #32]
   17d8c:	str	ip, [sp, #36]	; 0x24
   17d90:	str	r3, [sp, #48]	; 0x30
   17d94:	bl	17330 <__assert_fail@plt+0x57d8>
   17d98:	subs	r4, r0, #0
   17d9c:	bne	17dec <__assert_fail@plt+0x6294>
   17da0:	ldr	r3, [sp, #48]	; 0x30
   17da4:	mov	r2, #1
   17da8:	str	r3, [r6, #36]	; 0x24
   17dac:	add	r1, sp, #12
   17db0:	mov	r0, r6
   17db4:	bl	17330 <__assert_fail@plt+0x57d8>
   17db8:	cmp	r0, #0
   17dbc:	beq	17e20 <__assert_fail@plt+0x62c8>
   17dc0:	add	r1, sp, #12
   17dc4:	mov	r0, r6
   17dc8:	mov	r2, r4
   17dcc:	bl	17330 <__assert_fail@plt+0x57d8>
   17dd0:	cmp	r0, #0
   17dd4:	beq	17e20 <__assert_fail@plt+0x62c8>
   17dd8:	ldr	r0, [sp, #12]
   17ddc:	bl	11720 <free@plt>
   17de0:	b	17d14 <__assert_fail@plt+0x61bc>
   17de4:	mov	r4, #1
   17de8:	b	17d14 <__assert_fail@plt+0x61bc>
   17dec:	ldr	r0, [r6]
   17df0:	bl	11720 <free@plt>
   17df4:	ldrd	r2, [sp, #12]
   17df8:	ldr	r1, [sp, #20]
   17dfc:	str	r2, [r6]
   17e00:	str	r3, [r6, #4]
   17e04:	ldr	r2, [sp, #24]
   17e08:	ldr	r3, [sp, #48]	; 0x30
   17e0c:	str	r1, [r6, #8]
   17e10:	str	r2, [r6, #12]
   17e14:	str	r3, [r6, #36]	; 0x24
   17e18:	b	17d14 <__assert_fail@plt+0x61bc>
   17e1c:	bl	11780 <__stack_chk_fail@plt>
   17e20:	bl	11b28 <abort@plt>
   17e24:	svcmi	0x00800000
   17e28:	andeq	r4, r3, r8, lsl #30
   17e2c:	push	{r4, r5, r6, r7, lr}
   17e30:	sub	sp, sp, #12
   17e34:	ldr	r6, [pc, #404]	; 17fd0 <__assert_fail@plt+0x6478>
   17e38:	subs	r7, r1, #0
   17e3c:	ldr	r3, [r6]
   17e40:	str	r3, [sp, #4]
   17e44:	beq	17fc4 <__assert_fail@plt+0x646c>
   17e48:	mov	r5, r2
   17e4c:	mov	r3, #0
   17e50:	mov	r2, sp
   17e54:	mov	r4, r0
   17e58:	bl	17168 <__assert_fail@plt+0x5610>
   17e5c:	cmp	r0, #0
   17e60:	beq	17e8c <__assert_fail@plt+0x6334>
   17e64:	cmp	r5, #0
   17e68:	moveq	r0, r5
   17e6c:	strne	r0, [r5]
   17e70:	movne	r0, #0
   17e74:	ldr	r2, [sp, #4]
   17e78:	ldr	r3, [r6]
   17e7c:	cmp	r2, r3
   17e80:	bne	17fc8 <__assert_fail@plt+0x6470>
   17e84:	add	sp, sp, #12
   17e88:	pop	{r4, r5, r6, r7, pc}
   17e8c:	vldr	s15, [r4, #8]
   17e90:	ldr	r3, [r4, #20]
   17e94:	vldr	s14, [r4, #12]
   17e98:	vcvt.f32.u32	s15, s15
   17e9c:	vldr	s13, [r3, #8]
   17ea0:	vcvt.f32.u32	s14, s14
   17ea4:	vmul.f32	s15, s15, s13
   17ea8:	vcmpe.f32	s14, s15
   17eac:	vmrs	APSR_nzcv, fpscr
   17eb0:	bgt	17efc <__assert_fail@plt+0x63a4>
   17eb4:	ldr	r5, [sp]
   17eb8:	ldr	r3, [r5]
   17ebc:	cmp	r3, #0
   17ec0:	beq	17f58 <__assert_fail@plt+0x6400>
   17ec4:	ldr	r0, [r4, #36]	; 0x24
   17ec8:	cmp	r0, #0
   17ecc:	beq	17f7c <__assert_fail@plt+0x6424>
   17ed0:	ldr	r3, [r0, #4]
   17ed4:	str	r3, [r4, #36]	; 0x24
   17ed8:	ldr	r3, [r4, #16]
   17edc:	ldr	r2, [r5, #4]
   17ee0:	add	r3, r3, #1
   17ee4:	str	r7, [r0]
   17ee8:	str	r2, [r0, #4]
   17eec:	str	r0, [r5, #4]
   17ef0:	mov	r0, #1
   17ef4:	str	r3, [r4, #16]
   17ef8:	b	17e74 <__assert_fail@plt+0x631c>
   17efc:	add	r0, r4, #20
   17f00:	bl	17280 <__assert_fail@plt+0x5728>
   17f04:	vldr	s15, [r4, #8]
   17f08:	ldr	r3, [r4, #20]
   17f0c:	vldr	s14, [r4, #12]
   17f10:	vcvt.f32.u32	s15, s15
   17f14:	vldr	s13, [r3, #8]
   17f18:	vcvt.f32.u32	s14, s14
   17f1c:	vmul.f32	s12, s13, s15
   17f20:	vcmpe.f32	s14, s12
   17f24:	vmrs	APSR_nzcv, fpscr
   17f28:	ble	17eb4 <__assert_fail@plt+0x635c>
   17f2c:	vldr	s14, [r3, #12]
   17f30:	ldrb	r3, [r3, #16]
   17f34:	vmul.f32	s15, s15, s14
   17f38:	cmp	r3, #0
   17f3c:	vldr	s14, [pc, #136]	; 17fcc <__assert_fail@plt+0x6474>
   17f40:	vmuleq.f32	s15, s15, s13
   17f44:	vcmpe.f32	s15, s14
   17f48:	vmrs	APSR_nzcv, fpscr
   17f4c:	blt	17f90 <__assert_fail@plt+0x6438>
   17f50:	mvn	r0, #0
   17f54:	b	17e74 <__assert_fail@plt+0x631c>
   17f58:	ldr	r2, [r4, #16]
   17f5c:	ldr	r3, [r4, #12]
   17f60:	add	r2, r2, #1
   17f64:	add	r3, r3, #1
   17f68:	str	r7, [r5]
   17f6c:	mov	r0, #1
   17f70:	str	r2, [r4, #16]
   17f74:	str	r3, [r4, #12]
   17f78:	b	17e74 <__assert_fail@plt+0x631c>
   17f7c:	mov	r0, #8
   17f80:	bl	118b8 <malloc@plt>
   17f84:	cmp	r0, #0
   17f88:	beq	17f50 <__assert_fail@plt+0x63f8>
   17f8c:	b	17ed8 <__assert_fail@plt+0x6380>
   17f90:	vcvt.u32.f32	s15, s15
   17f94:	mov	r0, r4
   17f98:	vmov	r1, s15
   17f9c:	bl	17c8c <__assert_fail@plt+0x6134>
   17fa0:	cmp	r0, #0
   17fa4:	beq	17f50 <__assert_fail@plt+0x63f8>
   17fa8:	mov	r2, sp
   17fac:	mov	r3, #0
   17fb0:	mov	r1, r7
   17fb4:	mov	r0, r4
   17fb8:	bl	17168 <__assert_fail@plt+0x5610>
   17fbc:	cmp	r0, #0
   17fc0:	beq	17eb4 <__assert_fail@plt+0x635c>
   17fc4:	bl	11b28 <abort@plt>
   17fc8:	bl	11780 <__stack_chk_fail@plt>
   17fcc:	svcmi	0x00800000
   17fd0:	andeq	r4, r3, r8, lsl #30
   17fd4:	push	{r4, r5, lr}
   17fd8:	sub	sp, sp, #12
   17fdc:	ldr	r5, [pc, #68]	; 18028 <__assert_fail@plt+0x64d0>
   17fe0:	mov	r2, sp
   17fe4:	mov	r4, r1
   17fe8:	ldr	r3, [r5]
   17fec:	str	r3, [sp, #4]
   17ff0:	bl	17e2c <__assert_fail@plt+0x62d4>
   17ff4:	cmn	r0, #1
   17ff8:	moveq	r0, #0
   17ffc:	beq	1800c <__assert_fail@plt+0x64b4>
   18000:	cmp	r0, #0
   18004:	movne	r0, r4
   18008:	ldreq	r0, [sp]
   1800c:	ldr	r2, [sp, #4]
   18010:	ldr	r3, [r5]
   18014:	cmp	r2, r3
   18018:	bne	18024 <__assert_fail@plt+0x64cc>
   1801c:	add	sp, sp, #12
   18020:	pop	{r4, r5, pc}
   18024:	bl	11780 <__stack_chk_fail@plt>
   18028:	andeq	r4, r3, r8, lsl #30
   1802c:	push	{r4, r5, r6, r7, lr}
   18030:	sub	sp, sp, #12
   18034:	ldr	r5, [pc, #276]	; 18150 <__assert_fail@plt+0x65f8>
   18038:	mov	r3, #1
   1803c:	mov	r2, sp
   18040:	ldr	ip, [r5]
   18044:	mov	r4, r0
   18048:	str	ip, [sp, #4]
   1804c:	bl	17168 <__assert_fail@plt+0x5610>
   18050:	subs	r6, r0, #0
   18054:	beq	18074 <__assert_fail@plt+0x651c>
   18058:	ldr	r2, [sp]
   1805c:	ldr	r3, [r4, #16]
   18060:	ldr	r2, [r2]
   18064:	sub	r3, r3, #1
   18068:	cmp	r2, #0
   1806c:	str	r3, [r4, #16]
   18070:	beq	18090 <__assert_fail@plt+0x6538>
   18074:	ldr	r2, [sp, #4]
   18078:	ldr	r3, [r5]
   1807c:	mov	r0, r6
   18080:	cmp	r2, r3
   18084:	bne	1814c <__assert_fail@plt+0x65f4>
   18088:	add	sp, sp, #12
   1808c:	pop	{r4, r5, r6, r7, pc}
   18090:	vldr	s15, [r4, #8]
   18094:	ldr	r3, [r4, #12]
   18098:	ldr	r2, [r4, #20]
   1809c:	sub	r3, r3, #1
   180a0:	vcvt.f32.u32	s14, s15
   180a4:	vldr	s13, [r2]
   180a8:	vmov	s15, r3
   180ac:	str	r3, [r4, #12]
   180b0:	vcvt.f32.u32	s15, s15
   180b4:	vmul.f32	s14, s14, s13
   180b8:	vcmpe.f32	s15, s14
   180bc:	vmrs	APSR_nzcv, fpscr
   180c0:	bpl	18074 <__assert_fail@plt+0x651c>
   180c4:	add	r0, r4, #20
   180c8:	bl	17280 <__assert_fail@plt+0x5728>
   180cc:	vldr	s15, [r4, #8]
   180d0:	ldr	r3, [r4, #20]
   180d4:	vldr	s13, [r4, #12]
   180d8:	vcvt.f32.u32	s15, s15
   180dc:	vldr	s14, [r3]
   180e0:	vcvt.f32.u32	s13, s13
   180e4:	vmul.f32	s14, s15, s14
   180e8:	vcmpe.f32	s13, s14
   180ec:	vmrs	APSR_nzcv, fpscr
   180f0:	bpl	18074 <__assert_fail@plt+0x651c>
   180f4:	vldr	s14, [r3, #4]
   180f8:	ldrb	r2, [r3, #16]
   180fc:	mov	r0, r4
   18100:	vmul.f32	s15, s15, s14
   18104:	cmp	r2, #0
   18108:	vldreq	s14, [r3, #8]
   1810c:	vmuleq.f32	s15, s15, s14
   18110:	vcvt.u32.f32	s15, s15
   18114:	vmov	r1, s15
   18118:	bl	17c8c <__assert_fail@plt+0x6134>
   1811c:	cmp	r0, #0
   18120:	bne	18074 <__assert_fail@plt+0x651c>
   18124:	ldr	r0, [r4, #36]	; 0x24
   18128:	cmp	r0, #0
   1812c:	beq	18140 <__assert_fail@plt+0x65e8>
   18130:	ldr	r7, [r0, #4]
   18134:	bl	11720 <free@plt>
   18138:	subs	r0, r7, #0
   1813c:	bne	18130 <__assert_fail@plt+0x65d8>
   18140:	mov	r3, #0
   18144:	str	r3, [r4, #36]	; 0x24
   18148:	b	18074 <__assert_fail@plt+0x651c>
   1814c:	bl	11780 <__stack_chk_fail@plt>
   18150:	andeq	r4, r3, r8, lsl #30
   18154:	andeq	r0, r0, r0
   18158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1815c:	vpush	{d8-d9}
   18160:	mov	r8, r3
   18164:	ands	r3, r3, #32
   18168:	mov	r5, r2
   1816c:	sub	sp, sp, #124	; 0x7c
   18170:	mov	r7, r1
   18174:	str	r3, [sp, #32]
   18178:	ldr	r3, [pc, #1360]	; 186d0 <__assert_fail@plt+0x6b78>
   1817c:	str	r2, [sp, #24]
   18180:	movne	r2, #1024	; 0x400
   18184:	ldr	r3, [r3]
   18188:	moveq	r2, #1000	; 0x3e8
   1818c:	str	r2, [sp, #28]
   18190:	str	r3, [sp, #116]	; 0x74
   18194:	mov	r6, r0
   18198:	bl	11a68 <localeconv@plt>
   1819c:	add	r3, r5, #644	; 0x284
   181a0:	str	r3, [sp, #48]	; 0x30
   181a4:	add	r3, r3, #3
   181a8:	str	r3, [sp, #12]
   181ac:	ldr	r2, [r0]
   181b0:	mov	r4, r0
   181b4:	mov	r0, r2
   181b8:	mov	r5, r2
   181bc:	bl	11954 <strlen@plt>
   181c0:	ldr	r9, [r4, #4]
   181c4:	ldr	r3, [pc, #1288]	; 186d4 <__assert_fail@plt+0x6b7c>
   181c8:	sub	r2, r0, #1
   181cc:	cmp	r2, #16
   181d0:	movcc	r3, r5
   181d4:	mov	fp, r0
   181d8:	mov	r0, r9
   181dc:	movcs	fp, #1
   181e0:	str	r3, [sp, #36]	; 0x24
   181e4:	bl	11954 <strlen@plt>
   181e8:	ldr	r3, [pc, #1256]	; 186d8 <__assert_fail@plt+0x6b80>
   181ec:	and	r2, r8, #3
   181f0:	str	r2, [sp, #16]
   181f4:	ldr	sl, [r4, #8]
   181f8:	cmp	r0, #16
   181fc:	movhi	r9, r3
   18200:	ldrd	r0, [sp, #176]	; 0xb0
   18204:	ldrd	r2, [sp, #184]	; 0xb8
   18208:	cmp	r3, r1
   1820c:	cmpeq	r2, r0
   18210:	bhi	184a8 <__assert_fail@plt+0x6950>
   18214:	bl	21d3c <fts_children@@Base+0x1cb0>
   18218:	orrs	r3, r2, r3
   1821c:	bne	18250 <__assert_fail@plt+0x66f8>
   18220:	mul	r2, r0, r7
   18224:	umull	r4, r5, r0, r6
   18228:	mla	r2, r6, r1, r2
   1822c:	mov	r3, r1
   18230:	add	r5, r2, r5
   18234:	mov	r1, r5
   18238:	mov	r2, r0
   1823c:	mov	r0, r4
   18240:	bl	21d3c <fts_children@@Base+0x1cb0>
   18244:	cmp	r1, r7
   18248:	cmpeq	r0, r6
   1824c:	beq	1880c <__assert_fail@plt+0x6cb4>
   18250:	ldrd	r0, [sp, #176]	; 0xb0
   18254:	bl	21bf4 <fts_children@@Base+0x1b68>
   18258:	vmov	d9, r0, r1
   1825c:	ldrd	r0, [sp, #184]	; 0xb8
   18260:	bl	21bf4 <fts_children@@Base+0x1b68>
   18264:	vmov	d7, r0, r1
   18268:	mov	r0, r6
   1826c:	mov	r1, r7
   18270:	vdiv.f64	d8, d9, d7
   18274:	bl	21bf4 <fts_children@@Base+0x1b68>
   18278:	tst	r8, #16
   1827c:	vmov	d7, r0, r1
   18280:	vmul.f64	d8, d8, d7
   18284:	beq	183f0 <__assert_fail@plt+0x6898>
   18288:	vldr	s15, [sp, #28]
   1828c:	mov	r6, #0
   18290:	vcvt.f64.s32	d6, s15
   18294:	vmov.f64	d7, d6
   18298:	vmov.f64	d5, d7
   1829c:	vmul.f64	d7, d7, d6
   182a0:	add	r6, r6, #1
   182a4:	vcmpe.f64	d7, d8
   182a8:	vmrs	APSR_nzcv, fpscr
   182ac:	bhi	182b8 <__assert_fail@plt+0x6760>
   182b0:	cmp	r6, #8
   182b4:	bne	18298 <__assert_fail@plt+0x6740>
   182b8:	ldr	r3, [sp, #32]
   182bc:	clz	r4, r3
   182c0:	ldr	r3, [sp, #16]
   182c4:	lsr	r4, r4, #5
   182c8:	add	fp, fp, #1
   182cc:	add	r4, r4, #1
   182d0:	cmp	r3, #1
   182d4:	vdiv.f64	d9, d8, d5
   182d8:	add	r4, r4, fp
   182dc:	beq	188c8 <__assert_fail@plt+0x6d70>
   182e0:	vldr	d7, [pc, #984]	; 186c0 <__assert_fail@plt+0x6b68>
   182e4:	vcmpe.f64	d9, d7
   182e8:	vmrs	APSR_nzcv, fpscr
   182ec:	vmovpl.f64	d7, d9
   182f0:	bpl	18334 <__assert_fail@plt+0x67dc>
   182f4:	vmov	r0, r1, d9
   182f8:	bl	21d88 <fts_children@@Base+0x1cfc>
   182fc:	mov	r5, r0
   18300:	mov	r7, r1
   18304:	bl	21bf4 <fts_children@@Base+0x1b68>
   18308:	ldr	r3, [sp, #16]
   1830c:	cmp	r3, #0
   18310:	vmov	d7, r0, r1
   18314:	bne	18334 <__assert_fail@plt+0x67dc>
   18318:	vcmp.f64	d9, d7
   1831c:	vmrs	APSR_nzcv, fpscr
   18320:	beq	18334 <__assert_fail@plt+0x67dc>
   18324:	adds	r0, r5, #1
   18328:	adc	r1, r7, #0
   1832c:	bl	21bf4 <fts_children@@Base+0x1b68>
   18330:	vmov	d7, r0, r1
   18334:	ldr	r5, [sp, #24]
   18338:	vstr	d7, [sp]
   1833c:	ldr	r3, [pc, #928]	; 186e4 <__assert_fail@plt+0x6b8c>
   18340:	mvn	r2, #0
   18344:	mov	r1, #1
   18348:	mov	r0, r5
   1834c:	bl	11990 <__sprintf_chk@plt>
   18350:	mov	r0, r5
   18354:	bl	11954 <strlen@plt>
   18358:	cmp	r0, r4
   1835c:	bls	187a4 <__assert_fail@plt+0x6c4c>
   18360:	vldr	d7, [pc, #864]	; 186c8 <__assert_fail@plt+0x6b70>
   18364:	vmul.f64	d9, d9, d7
   18368:	vldr	d7, [pc, #848]	; 186c0 <__assert_fail@plt+0x6b68>
   1836c:	vcmpe.f64	d9, d7
   18370:	vmrs	APSR_nzcv, fpscr
   18374:	bpl	183bc <__assert_fail@plt+0x6864>
   18378:	vmov	r0, r1, d9
   1837c:	bl	21d88 <fts_children@@Base+0x1cfc>
   18380:	mov	r4, r0
   18384:	mov	r5, r1
   18388:	bl	21bf4 <fts_children@@Base+0x1b68>
   1838c:	ldr	r3, [sp, #16]
   18390:	cmp	r3, #0
   18394:	vmov	d7, r0, r1
   18398:	bne	183b8 <__assert_fail@plt+0x6860>
   1839c:	vcmp.f64	d9, d7
   183a0:	vmrs	APSR_nzcv, fpscr
   183a4:	beq	183b8 <__assert_fail@plt+0x6860>
   183a8:	adds	r0, r4, #1
   183ac:	adc	r1, r5, #0
   183b0:	bl	21bf4 <fts_children@@Base+0x1b68>
   183b4:	vmov	d7, r0, r1
   183b8:	vmov.f64	d9, d7
   183bc:	vldr	d6, [pc, #772]	; 186c8 <__assert_fail@plt+0x6b70>
   183c0:	ldr	r4, [sp, #24]
   183c4:	ldr	r3, [pc, #784]	; 186dc <__assert_fail@plt+0x6b84>
   183c8:	mvn	r2, #0
   183cc:	vdiv.f64	d7, d9, d6
   183d0:	mov	r1, #1
   183d4:	mov	r0, r4
   183d8:	vstr	d7, [sp]
   183dc:	bl	11990 <__sprintf_chk@plt>
   183e0:	mov	r0, r4
   183e4:	bl	11954 <strlen@plt>
   183e8:	mov	r7, r0
   183ec:	b	18438 <__assert_fail@plt+0x68e0>
   183f0:	and	r6, r8, #3
   183f4:	cmp	r6, #1
   183f8:	beq	1840c <__assert_fail@plt+0x68b4>
   183fc:	vldr	d7, [pc, #700]	; 186c0 <__assert_fail@plt+0x6b68>
   18400:	vcmpe.f64	d8, d7
   18404:	vmrs	APSR_nzcv, fpscr
   18408:	bmi	187c8 <__assert_fail@plt+0x6c70>
   1840c:	ldr	r4, [sp, #24]
   18410:	ldr	r3, [pc, #708]	; 186dc <__assert_fail@plt+0x6b84>
   18414:	mvn	r2, #0
   18418:	mov	r1, #1
   1841c:	vstr	d8, [sp]
   18420:	mov	r0, r4
   18424:	bl	11990 <__sprintf_chk@plt>
   18428:	mov	r0, r4
   1842c:	bl	11954 <strlen@plt>
   18430:	mvn	r6, #0
   18434:	mov	r7, r0
   18438:	ldr	r3, [sp, #12]
   1843c:	mov	r2, r0
   18440:	sub	fp, r3, r0
   18444:	mov	r0, fp
   18448:	ldr	r1, [sp, #24]
   1844c:	add	r7, fp, r7
   18450:	bl	11714 <memmove@plt>
   18454:	tst	r8, #4
   18458:	bne	18618 <__assert_fail@plt+0x6ac0>
   1845c:	tst	r8, #128	; 0x80
   18460:	beq	18478 <__assert_fail@plt+0x6920>
   18464:	cmn	r6, #1
   18468:	beq	186e8 <__assert_fail@plt+0x6b90>
   1846c:	and	r3, r8, #256	; 0x100
   18470:	orrs	r2, r3, r6
   18474:	bne	18950 <__assert_fail@plt+0x6df8>
   18478:	ldr	r2, [sp, #12]
   1847c:	mov	r3, #0
   18480:	mov	r0, fp
   18484:	strb	r3, [r2]
   18488:	ldr	r3, [pc, #576]	; 186d0 <__assert_fail@plt+0x6b78>
   1848c:	ldr	r2, [sp, #116]	; 0x74
   18490:	ldr	r3, [r3]
   18494:	cmp	r2, r3
   18498:	bne	18b1c <__assert_fail@plt+0x6fc4>
   1849c:	add	sp, sp, #124	; 0x7c
   184a0:	vpop	{d8-d9}
   184a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184a8:	ldrd	r2, [sp, #176]	; 0xb0
   184ac:	orrs	r3, r2, r3
   184b0:	beq	18250 <__assert_fail@plt+0x66f8>
   184b4:	ldrd	r2, [sp, #176]	; 0xb0
   184b8:	ldrd	r0, [sp, #184]	; 0xb8
   184bc:	bl	21d3c <fts_children@@Base+0x1cb0>
   184c0:	orrs	r3, r2, r3
   184c4:	mov	r4, r0
   184c8:	mov	r5, r1
   184cc:	bne	18250 <__assert_fail@plt+0x66f8>
   184d0:	mov	r0, r6
   184d4:	mov	r1, r7
   184d8:	mov	r2, r4
   184dc:	mov	r3, r5
   184e0:	bl	21d3c <fts_children@@Base+0x1cb0>
   184e4:	strd	r0, [sp, #52]	; 0x34
   184e8:	lsl	r0, r2, #2
   184ec:	lsl	r1, r3, #2
   184f0:	adds	r0, r0, r2
   184f4:	orr	r1, r1, r2, lsr #30
   184f8:	adc	r1, r1, r3
   184fc:	adds	r0, r0, r0
   18500:	adc	r1, r1, r1
   18504:	mov	r2, r4
   18508:	mov	r3, r5
   1850c:	bl	21d3c <fts_children@@Base+0x1cb0>
   18510:	adds	r1, r2, r2
   18514:	adc	r3, r3, r3
   18518:	str	r3, [sp, #44]	; 0x2c
   1851c:	str	r1, [sp, #40]	; 0x28
   18520:	ldrd	r6, [sp, #40]	; 0x28
   18524:	mov	r3, r5
   18528:	mov	lr, r0
   1852c:	cmp	r5, r7
   18530:	cmpeq	r4, r6
   18534:	ldrd	r4, [sp, #52]	; 0x34
   18538:	bls	1893c <__assert_fail@plt+0x6de4>
   1853c:	mov	r3, r6
   18540:	orrs	r3, r3, r7
   18544:	movne	r3, #1
   18548:	moveq	r3, #0
   1854c:	mov	ip, r3
   18550:	ands	r3, r8, #16
   18554:	str	r3, [sp, #52]	; 0x34
   18558:	beq	18824 <__assert_fail@plt+0x6ccc>
   1855c:	ldr	r1, [sp, #28]
   18560:	mov	r3, #0
   18564:	mov	r2, r1
   18568:	cmp	r3, r5
   1856c:	cmpeq	r1, r4
   18570:	strd	r2, [sp, #40]	; 0x28
   18574:	mov	r6, #0
   18578:	bhi	18828 <__assert_fail@plt+0x6cd0>
   1857c:	str	r9, [sp, #56]	; 0x38
   18580:	str	r8, [sp, #68]	; 0x44
   18584:	mov	r7, ip
   18588:	str	fp, [sp, #60]	; 0x3c
   1858c:	mov	r9, r1
   18590:	str	sl, [sp, #64]	; 0x40
   18594:	mov	r8, lr
   18598:	b	185c0 <__assert_fail@plt+0x6a68>
   1859c:	adds	r7, r7, #0
   185a0:	movne	r7, #1
   185a4:	ldrd	r2, [sp, #40]	; 0x28
   185a8:	add	r6, r6, #1
   185ac:	cmp	r3, fp
   185b0:	cmpeq	r2, sl
   185b4:	bhi	189c0 <__assert_fail@plt+0x6e68>
   185b8:	cmp	r6, #8
   185bc:	beq	18988 <__assert_fail@plt+0x6e30>
   185c0:	mov	r0, r4
   185c4:	mov	r1, r5
   185c8:	ldrd	r2, [sp, #40]	; 0x28
   185cc:	bl	21d3c <fts_children@@Base+0x1cb0>
   185d0:	add	r2, r2, r2, lsl #2
   185d4:	mov	sl, r0
   185d8:	mov	fp, r1
   185dc:	add	r0, r8, r2, lsl #1
   185e0:	mov	r1, r9
   185e4:	bl	21648 <fts_children@@Base+0x15bc>
   185e8:	asr	r3, r7, #1
   185ec:	mov	r4, sl
   185f0:	mov	r5, fp
   185f4:	add	r1, r3, r1, lsl #1
   185f8:	cmp	r9, r1
   185fc:	mov	r8, r0
   18600:	add	r7, r7, r1
   18604:	bhi	1859c <__assert_fail@plt+0x6a44>
   18608:	cmp	r9, r7
   1860c:	movcc	r7, #3
   18610:	movcs	r7, #2
   18614:	b	185a4 <__assert_fail@plt+0x6a4c>
   18618:	mov	r0, r9
   1861c:	bl	11954 <strlen@plt>
   18620:	sub	r4, r7, fp
   18624:	add	r3, sp, #72	; 0x48
   18628:	mov	r1, fp
   1862c:	mov	r2, r4
   18630:	mvn	r5, #0
   18634:	str	r0, [sp, #16]
   18638:	mov	r0, r3
   1863c:	mov	r3, #41	; 0x29
   18640:	bl	11810 <__memcpy_chk@plt>
   18644:	ldr	fp, [sp, #16]
   18648:	ldrb	r3, [sl]
   1864c:	cmp	r3, #0
   18650:	beq	18664 <__assert_fail@plt+0x6b0c>
   18654:	cmp	r3, #255	; 0xff
   18658:	movne	r5, r3
   1865c:	moveq	r5, r4
   18660:	add	sl, sl, #1
   18664:	cmp	r5, r4
   18668:	bls	18684 <__assert_fail@plt+0x6b2c>
   1866c:	sub	fp, r7, r4
   18670:	mov	r2, r4
   18674:	add	r1, sp, #72	; 0x48
   18678:	mov	r0, fp
   1867c:	bl	11738 <memcpy@plt>
   18680:	b	1845c <__assert_fail@plt+0x6904>
   18684:	sub	r4, r4, r5
   18688:	add	r3, sp, #72	; 0x48
   1868c:	sub	r7, r7, r5
   18690:	add	r1, r3, r4
   18694:	mov	r0, r7
   18698:	mov	r2, r5
   1869c:	bl	11738 <memcpy@plt>
   186a0:	cmp	r4, #0
   186a4:	beq	18b20 <__assert_fail@plt+0x6fc8>
   186a8:	sub	r7, r7, fp
   186ac:	mov	r0, r7
   186b0:	mov	r2, fp
   186b4:	mov	r1, r9
   186b8:	bl	11738 <memcpy@plt>
   186bc:	b	18648 <__assert_fail@plt+0x6af0>
   186c0:	andeq	r0, r0, r0
   186c4:	mvnsmi	r0, #0
   186c8:	andeq	r0, r0, r0
   186cc:	eormi	r0, r4, r0
   186d0:	andeq	r4, r3, r8, lsl #30
   186d4:	andeq	r3, r2, r4, lsl #2
   186d8:	andeq	r3, r2, r8, lsr #17
   186dc:	andeq	r3, r2, r4, ror #17
   186e0:	andeq	r3, r2, r4, asr #17
   186e4:	andeq	r3, r2, ip, ror #17
   186e8:	ldrd	r2, [sp, #184]	; 0xb8
   186ec:	cmp	r3, #0
   186f0:	cmpeq	r2, #1
   186f4:	bls	18980 <__assert_fail@plt+0x6e28>
   186f8:	ldr	r1, [sp, #28]
   186fc:	ldrd	r4, [sp, #184]	; 0xb8
   18700:	mov	r6, #1
   18704:	mov	r2, #1
   18708:	mov	r3, #0
   1870c:	mul	r0, r1, r3
   18710:	umull	r2, r3, r2, r1
   18714:	add	r3, r0, r3
   18718:	cmp	r5, r3
   1871c:	cmpeq	r4, r2
   18720:	bls	18730 <__assert_fail@plt+0x6bd8>
   18724:	add	r6, r6, #1
   18728:	cmp	r6, #8
   1872c:	bne	1870c <__assert_fail@plt+0x6bb4>
   18730:	tst	r8, #64	; 0x40
   18734:	and	r3, r8, #256	; 0x100
   18738:	beq	18758 <__assert_fail@plt+0x6c00>
   1873c:	ldr	r1, [sp, #24]
   18740:	add	r2, r1, #648	; 0x288
   18744:	str	r2, [sp, #12]
   18748:	mov	r2, #32
   1874c:	strb	r2, [r1, #647]	; 0x287
   18750:	cmp	r6, #0
   18754:	beq	18b28 <__assert_fail@plt+0x6fd0>
   18758:	ldr	r0, [sp, #32]
   1875c:	cmp	r6, #1
   18760:	cmpeq	r0, #0
   18764:	beq	189a4 <__assert_fail@plt+0x6e4c>
   18768:	ldr	r1, [pc, #-144]	; 186e0 <__assert_fail@plt+0x6b88>
   1876c:	cmp	r3, #0
   18770:	ldr	r2, [sp, #12]
   18774:	ldrb	r3, [r1, r6]
   18778:	strb	r3, [r2], #1
   1877c:	beq	189b8 <__assert_fail@plt+0x6e60>
   18780:	cmp	r0, #0
   18784:	movne	r3, #105	; 0x69
   18788:	ldrne	r2, [sp, #12]
   1878c:	strbne	r3, [r2, #1]
   18790:	addne	r2, r2, #2
   18794:	mov	r3, #66	; 0x42
   18798:	strb	r3, [r2], #1
   1879c:	str	r2, [sp, #12]
   187a0:	b	18478 <__assert_fail@plt+0x6920>
   187a4:	tst	r8, #8
   187a8:	beq	187c0 <__assert_fail@plt+0x6c68>
   187ac:	ldr	r3, [sp, #24]
   187b0:	add	r3, r3, r0
   187b4:	ldrb	r3, [r3, #-1]
   187b8:	cmp	r3, #48	; 0x30
   187bc:	beq	18a78 <__assert_fail@plt+0x6f20>
   187c0:	sub	r7, r0, fp
   187c4:	b	18438 <__assert_fail@plt+0x68e0>
   187c8:	vmov	r0, r1, d8
   187cc:	bl	21d88 <fts_children@@Base+0x1cfc>
   187d0:	mov	r4, r0
   187d4:	mov	r5, r1
   187d8:	bl	21bf4 <fts_children@@Base+0x1b68>
   187dc:	cmp	r6, #0
   187e0:	vmov	d7, r0, r1
   187e4:	bne	18804 <__assert_fail@plt+0x6cac>
   187e8:	vcmp.f64	d8, d7
   187ec:	vmrs	APSR_nzcv, fpscr
   187f0:	beq	18804 <__assert_fail@plt+0x6cac>
   187f4:	adds	r0, r4, #1
   187f8:	adc	r1, r5, #0
   187fc:	bl	21bf4 <fts_children@@Base+0x1b68>
   18800:	vmov	d7, r0, r1
   18804:	vmov.f64	d8, d7
   18808:	b	1840c <__assert_fail@plt+0x68b4>
   1880c:	mov	r3, #0
   18810:	mov	ip, r3
   18814:	mov	lr, r3
   18818:	ands	r3, r8, #16
   1881c:	str	r3, [sp, #52]	; 0x34
   18820:	bne	1855c <__assert_fail@plt+0x6a04>
   18824:	mvn	r6, #0
   18828:	ldr	r3, [sp, #16]
   1882c:	cmp	r3, #1
   18830:	ldrne	r7, [sp, #12]
   18834:	beq	18900 <__assert_fail@plt+0x6da8>
   18838:	ldr	r3, [sp, #16]
   1883c:	cmp	r3, #0
   18840:	bne	18878 <__assert_fail@plt+0x6d20>
   18844:	add	r3, lr, ip
   18848:	cmp	r3, #0
   1884c:	ble	18878 <__assert_fail@plt+0x6d20>
   18850:	ldr	r3, [sp, #52]	; 0x34
   18854:	adds	r4, r4, #1
   18858:	adc	r5, r5, #0
   1885c:	cmp	r3, #0
   18860:	beq	18878 <__assert_fail@plt+0x6d20>
   18864:	ldr	r2, [sp, #28]
   18868:	mov	r3, #0
   1886c:	cmp	r3, r5
   18870:	cmpeq	r2, r4
   18874:	beq	1895c <__assert_fail@plt+0x6e04>
   18878:	mov	fp, r7
   1887c:	b	18888 <__assert_fail@plt+0x6d30>
   18880:	mov	r4, r0
   18884:	mov	r5, r1
   18888:	mov	r2, #10
   1888c:	mov	r3, #0
   18890:	mov	r0, r4
   18894:	mov	r1, r5
   18898:	bl	21d3c <fts_children@@Base+0x1cb0>
   1889c:	mov	r0, r4
   188a0:	mov	r1, r5
   188a4:	mov	r3, #0
   188a8:	add	r2, r2, #48	; 0x30
   188ac:	strb	r2, [fp, #-1]!
   188b0:	mov	r2, #10
   188b4:	bl	21d3c <fts_children@@Base+0x1cb0>
   188b8:	cmp	r5, #0
   188bc:	cmpeq	r4, #9
   188c0:	bhi	18880 <__assert_fail@plt+0x6d28>
   188c4:	b	18454 <__assert_fail@plt+0x68fc>
   188c8:	ldr	r5, [sp, #24]
   188cc:	ldr	r3, [pc, #-496]	; 186e4 <__assert_fail@plt+0x6b8c>
   188d0:	mvn	r2, #0
   188d4:	ldr	r1, [sp, #16]
   188d8:	vstr	d9, [sp]
   188dc:	mov	r0, r5
   188e0:	bl	11990 <__sprintf_chk@plt>
   188e4:	mov	r0, r5
   188e8:	bl	11954 <strlen@plt>
   188ec:	cmp	r0, r4
   188f0:	bls	187a4 <__assert_fail@plt+0x6c4c>
   188f4:	vldr	d7, [pc, #572]	; 18b38 <__assert_fail@plt+0x6fe0>
   188f8:	vmul.f64	d9, d9, d7
   188fc:	b	183bc <__assert_fail@plt+0x6864>
   18900:	and	r3, r4, #1
   18904:	str	r3, [sp, #16]
   18908:	mov	r3, #0
   1890c:	str	r3, [sp, #20]
   18910:	ldrd	r2, [sp, #16]
   18914:	ldr	r7, [sp, #12]
   18918:	adds	r2, r2, ip
   1891c:	adc	r3, r3, ip, asr #31
   18920:	orr	r2, r2, r3
   18924:	mov	r3, lr
   18928:	cmp	r2, #0
   1892c:	addne	r3, r3, #1
   18930:	cmp	r3, #5
   18934:	bgt	18850 <__assert_fail@plt+0x6cf8>
   18938:	b	18878 <__assert_fail@plt+0x6d20>
   1893c:	movcs	r3, #2
   18940:	movcs	ip, r3
   18944:	movcc	r3, #3
   18948:	movcc	ip, r3
   1894c:	b	18550 <__assert_fail@plt+0x69f8>
   18950:	tst	r8, #64	; 0x40
   18954:	beq	18750 <__assert_fail@plt+0x6bf8>
   18958:	b	1873c <__assert_fail@plt+0x6be4>
   1895c:	cmp	r6, #8
   18960:	beq	18878 <__assert_fail@plt+0x6d20>
   18964:	tst	r8, #8
   18968:	add	r6, r6, #1
   1896c:	beq	18ae8 <__assert_fail@plt+0x6f90>
   18970:	mov	r3, #49	; 0x31
   18974:	strb	r3, [r7, #-1]
   18978:	sub	fp, r7, #1
   1897c:	b	18454 <__assert_fail@plt+0x68fc>
   18980:	mov	r6, #0
   18984:	b	1846c <__assert_fail@plt+0x6914>
   18988:	mov	lr, r8
   1898c:	ldr	r9, [sp, #56]	; 0x38
   18990:	mov	ip, r7
   18994:	ldr	fp, [sp, #60]	; 0x3c
   18998:	ldr	sl, [sp, #64]	; 0x40
   1899c:	ldr	r8, [sp, #68]	; 0x44
   189a0:	b	18828 <__assert_fail@plt+0x6cd0>
   189a4:	ldr	r2, [sp, #12]
   189a8:	cmp	r3, #0
   189ac:	mov	r3, #107	; 0x6b
   189b0:	strb	r3, [r2], #1
   189b4:	bne	18794 <__assert_fail@plt+0x6c3c>
   189b8:	str	r2, [sp, #12]
   189bc:	b	18478 <__assert_fail@plt+0x6920>
   189c0:	mov	r3, fp
   189c4:	mov	r2, sl
   189c8:	cmp	r3, #0
   189cc:	cmpeq	r2, #9
   189d0:	mov	lr, r8
   189d4:	ldr	r9, [sp, #56]	; 0x38
   189d8:	mov	ip, r7
   189dc:	strd	r2, [sp, #40]	; 0x28
   189e0:	ldr	fp, [sp, #60]	; 0x3c
   189e4:	ldr	sl, [sp, #64]	; 0x40
   189e8:	ldr	r8, [sp, #68]	; 0x44
   189ec:	bhi	18828 <__assert_fail@plt+0x6cd0>
   189f0:	ldr	r3, [sp, #16]
   189f4:	cmp	r3, #1
   189f8:	beq	18aa4 <__assert_fail@plt+0x6f4c>
   189fc:	ldr	r2, [sp, #16]
   18a00:	adds	r3, r7, #0
   18a04:	movne	r3, #1
   18a08:	cmp	r2, #0
   18a0c:	movne	r3, #0
   18a10:	cmp	r3, #0
   18a14:	bne	18a90 <__assert_fail@plt+0x6f38>
   18a18:	cmp	r0, #0
   18a1c:	addne	r3, r0, #48	; 0x30
   18a20:	uxtbne	r3, r3
   18a24:	bne	18a34 <__assert_fail@plt+0x6edc>
   18a28:	tst	r8, #8
   18a2c:	bne	18abc <__assert_fail@plt+0x6f64>
   18a30:	mov	r3, #48	; 0x30
   18a34:	ldr	r2, [sp, #48]	; 0x30
   18a38:	ldr	r1, [sp, #36]	; 0x24
   18a3c:	add	r7, r2, #2
   18a40:	ldr	r2, [sp, #24]
   18a44:	sub	r7, r7, fp
   18a48:	mov	r0, r7
   18a4c:	strb	r3, [r2, #646]	; 0x286
   18a50:	mov	r2, fp
   18a54:	bl	11738 <memcpy@plt>
   18a58:	mov	r3, #0
   18a5c:	mov	ip, r3
   18a60:	ldr	r3, [sp, #16]
   18a64:	cmp	r3, #1
   18a68:	beq	18878 <__assert_fail@plt+0x6d20>
   18a6c:	mov	r3, #0
   18a70:	mov	lr, r3
   18a74:	b	18838 <__assert_fail@plt+0x6ce0>
   18a78:	vldr	d7, [pc, #184]	; 18b38 <__assert_fail@plt+0x6fe0>
   18a7c:	ldr	r3, [sp, #16]
   18a80:	cmp	r3, #1
   18a84:	vmul.f64	d9, d9, d7
   18a88:	bne	18368 <__assert_fail@plt+0x6810>
   18a8c:	b	183bc <__assert_fail@plt+0x6864>
   18a90:	cmp	r0, #9
   18a94:	beq	18ac4 <__assert_fail@plt+0x6f6c>
   18a98:	add	r3, r0, #49	; 0x31
   18a9c:	uxtb	r3, r3
   18aa0:	b	18a34 <__assert_fail@plt+0x6edc>
   18aa4:	and	r3, r0, #1
   18aa8:	add	r3, r3, r7
   18aac:	cmp	r3, #2
   18ab0:	movle	r3, #0
   18ab4:	movgt	r3, #1
   18ab8:	b	18a10 <__assert_fail@plt+0x6eb8>
   18abc:	ldr	r7, [sp, #12]
   18ac0:	b	18a60 <__assert_fail@plt+0x6f08>
   18ac4:	ldrd	r2, [sp, #40]	; 0x28
   18ac8:	adds	r4, r2, #1
   18acc:	adc	r5, r3, #0
   18ad0:	cmp	r5, #0
   18ad4:	cmpeq	r4, #10
   18ad8:	beq	18b0c <__assert_fail@plt+0x6fb4>
   18adc:	mov	r3, #0
   18ae0:	mov	ip, r3
   18ae4:	b	18a28 <__assert_fail@plt+0x6ed0>
   18ae8:	mov	r2, #48	; 0x30
   18aec:	mvn	r3, fp
   18af0:	strb	r2, [r7, #-1]
   18af4:	add	r7, r7, r3
   18af8:	ldr	r1, [sp, #36]	; 0x24
   18afc:	mov	r2, fp
   18b00:	mov	r0, r7
   18b04:	bl	11738 <memcpy@plt>
   18b08:	b	18970 <__assert_fail@plt+0x6e18>
   18b0c:	mov	r3, #0
   18b10:	ldr	r7, [sp, #12]
   18b14:	mov	ip, r3
   18b18:	b	18a60 <__assert_fail@plt+0x6f08>
   18b1c:	bl	11780 <__stack_chk_fail@plt>
   18b20:	mov	fp, r7
   18b24:	b	1845c <__assert_fail@plt+0x6904>
   18b28:	cmp	r3, #0
   18b2c:	ldrne	r2, [sp, #12]
   18b30:	bne	18794 <__assert_fail@plt+0x6c3c>
   18b34:	b	18478 <__assert_fail@plt+0x6920>
   18b38:	andeq	r0, r0, r0
   18b3c:	eormi	r0, r4, r0
   18b40:	push	{r4, r5, r6, r7, r8, r9, lr}
   18b44:	sub	sp, sp, #20
   18b48:	ldr	r6, [pc, #424]	; 18cf8 <__assert_fail@plt+0x71a0>
   18b4c:	subs	r4, r0, #0
   18b50:	mov	r9, r1
   18b54:	ldr	r3, [r6]
   18b58:	mov	r7, r2
   18b5c:	str	r3, [sp, #12]
   18b60:	beq	18c70 <__assert_fail@plt+0x7118>
   18b64:	ldrb	r3, [r4]
   18b68:	ldr	r5, [pc, #396]	; 18cfc <__assert_fail@plt+0x71a4>
   18b6c:	cmp	r3, #39	; 0x27
   18b70:	addeq	r4, r4, #1
   18b74:	mov	r3, #4
   18b78:	add	r2, r5, #12
   18b7c:	add	r1, r5, #20
   18b80:	mov	r0, r4
   18b84:	moveq	r8, #4
   18b88:	movne	r8, #0
   18b8c:	bl	13d14 <__assert_fail@plt+0x21bc>
   18b90:	cmp	r0, #0
   18b94:	blt	18bd0 <__assert_fail@plt+0x7078>
   18b98:	add	r5, r5, r0, lsl #2
   18b9c:	mov	r2, #1
   18ba0:	ldr	r1, [r5, #12]
   18ba4:	mov	r3, #0
   18ba8:	mov	r0, #0
   18bac:	orr	r8, r8, r1
   18bb0:	strd	r2, [r7]
   18bb4:	str	r8, [r9]
   18bb8:	ldr	r2, [sp, #12]
   18bbc:	ldr	r3, [r6]
   18bc0:	cmp	r2, r3
   18bc4:	bne	18cf4 <__assert_fail@plt+0x719c>
   18bc8:	add	sp, sp, #20
   18bcc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18bd0:	ldr	r2, [pc, #296]	; 18d00 <__assert_fail@plt+0x71a8>
   18bd4:	mov	r3, r7
   18bd8:	str	r2, [sp]
   18bdc:	add	r1, sp, #8
   18be0:	mov	r2, #0
   18be4:	mov	r0, r4
   18be8:	bl	1d350 <__assert_fail@plt+0xb7f8>
   18bec:	cmp	r0, #0
   18bf0:	bne	18c38 <__assert_fail@plt+0x70e0>
   18bf4:	ldrb	r3, [r4]
   18bf8:	sub	r3, r3, #48	; 0x30
   18bfc:	cmp	r3, #9
   18c00:	bls	18c2c <__assert_fail@plt+0x70d4>
   18c04:	ldr	r2, [sp, #8]
   18c08:	cmp	r4, r2
   18c0c:	bne	18c1c <__assert_fail@plt+0x70c4>
   18c10:	b	18cc8 <__assert_fail@plt+0x7170>
   18c14:	cmp	r2, r4
   18c18:	beq	18cc8 <__assert_fail@plt+0x7170>
   18c1c:	ldrb	r3, [r4, #1]!
   18c20:	sub	r3, r3, #48	; 0x30
   18c24:	cmp	r3, #9
   18c28:	bhi	18c14 <__assert_fail@plt+0x70bc>
   18c2c:	ldrd	r2, [r7]
   18c30:	str	r8, [r9]
   18c34:	b	18c44 <__assert_fail@plt+0x70ec>
   18c38:	mov	r3, #0
   18c3c:	str	r3, [r9]
   18c40:	ldrd	r2, [r7]
   18c44:	orrs	r3, r2, r3
   18c48:	bne	18bb8 <__assert_fail@plt+0x7060>
   18c4c:	ldr	r0, [pc, #176]	; 18d04 <__assert_fail@plt+0x71ac>
   18c50:	bl	118ac <getenv@plt>
   18c54:	mov	r3, #0
   18c58:	cmp	r0, #0
   18c5c:	moveq	r2, #1024	; 0x400
   18c60:	movne	r2, #512	; 0x200
   18c64:	mov	r0, #4
   18c68:	strd	r2, [r7]
   18c6c:	b	18bb8 <__assert_fail@plt+0x7060>
   18c70:	ldr	r0, [pc, #144]	; 18d08 <__assert_fail@plt+0x71b0>
   18c74:	bl	118ac <getenv@plt>
   18c78:	subs	r4, r0, #0
   18c7c:	bne	18b64 <__assert_fail@plt+0x700c>
   18c80:	ldr	r0, [pc, #132]	; 18d0c <__assert_fail@plt+0x71b4>
   18c84:	bl	118ac <getenv@plt>
   18c88:	subs	r4, r0, #0
   18c8c:	bne	18b64 <__assert_fail@plt+0x700c>
   18c90:	ldr	r0, [pc, #108]	; 18d04 <__assert_fail@plt+0x71ac>
   18c94:	bl	118ac <getenv@plt>
   18c98:	subs	r3, r0, #0
   18c9c:	moveq	r4, #1024	; 0x400
   18ca0:	moveq	r5, #0
   18ca4:	movne	r2, #512	; 0x200
   18ca8:	movne	r3, #0
   18cac:	strdeq	r4, [r7]
   18cb0:	strdne	r2, [r7]
   18cb4:	moveq	r0, r3
   18cb8:	streq	r3, [r9]
   18cbc:	movne	r0, r4
   18cc0:	strne	r4, [r9]
   18cc4:	b	18bb8 <__assert_fail@plt+0x7060>
   18cc8:	ldrb	r3, [r2, #-1]
   18ccc:	cmp	r3, #66	; 0x42
   18cd0:	orrne	r8, r8, #128	; 0x80
   18cd4:	beq	18ce0 <__assert_fail@plt+0x7188>
   18cd8:	orr	r8, r8, #32
   18cdc:	b	18c2c <__assert_fail@plt+0x70d4>
   18ce0:	ldrb	r3, [r2, #-2]
   18ce4:	orr	r8, r8, #384	; 0x180
   18ce8:	cmp	r3, #105	; 0x69
   18cec:	bne	18c2c <__assert_fail@plt+0x70d4>
   18cf0:	b	18cd8 <__assert_fail@plt+0x7180>
   18cf4:	bl	11780 <__stack_chk_fail@plt>
   18cf8:	andeq	r4, r3, r8, lsl #30
   18cfc:	andeq	r3, r2, r4, asr #17
   18d00:	andeq	r3, r2, ip, lsl r9
   18d04:	andeq	r3, r2, ip, lsl #18
   18d08:	strdeq	r3, [r2], -r4
   18d0c:	andeq	r3, r2, r0, lsl #18
   18d10:	ldm	r0, {r0, r2}
   18d14:	push	{r4, lr}
   18d18:	eor	r0, r0, r2
   18d1c:	bl	21648 <fts_children@@Base+0x15bc>
   18d20:	mov	r0, r1
   18d24:	pop	{r4, pc}
   18d28:	push	{r4, r5}
   18d2c:	ldrd	r2, [r1]
   18d30:	ldrd	r4, [r0]
   18d34:	cmp	r5, r3
   18d38:	cmpeq	r4, r2
   18d3c:	moveq	r0, #1
   18d40:	movne	r0, #0
   18d44:	pop	{r4, r5}
   18d48:	bx	lr
   18d4c:	push	{r4, r5, r6, lr}
   18d50:	mov	r6, r0
   18d54:	sub	sp, sp, #8
   18d58:	mov	r0, #12
   18d5c:	bl	118b8 <malloc@plt>
   18d60:	subs	r4, r0, #0
   18d64:	beq	18da0 <__assert_fail@plt+0x7248>
   18d68:	ldr	r2, [pc, #76]	; 18dbc <__assert_fail@plt+0x7264>
   18d6c:	ldr	r3, [pc, #76]	; 18dc0 <__assert_fail@plt+0x7268>
   18d70:	str	r2, [sp]
   18d74:	mov	r1, #0
   18d78:	ldr	r2, [pc, #68]	; 18dc4 <__assert_fail@plt+0x726c>
   18d7c:	ldr	r0, [pc, #68]	; 18dc8 <__assert_fail@plt+0x7270>
   18d80:	bl	179a8 <__assert_fail@plt+0x5e50>
   18d84:	cmp	r0, #0
   18d88:	movne	r3, #0
   18d8c:	mov	r5, r0
   18d90:	str	r0, [r4]
   18d94:	strne	r6, [r4, #4]
   18d98:	strne	r3, [r4, #8]
   18d9c:	beq	18dac <__assert_fail@plt+0x7254>
   18da0:	mov	r0, r4
   18da4:	add	sp, sp, #8
   18da8:	pop	{r4, r5, r6, pc}
   18dac:	mov	r0, r4
   18db0:	bl	11720 <free@plt>
   18db4:	mov	r4, r5
   18db8:	b	18da0 <__assert_fail@plt+0x7248>
   18dbc:	andeq	r1, r1, r0, lsr #14
   18dc0:	andeq	r8, r1, r8, lsr #26
   18dc4:	andeq	r8, r1, r0, lsl sp
   18dc8:	strdeq	r0, [r0], -sp
   18dcc:	push	{r4, lr}
   18dd0:	mov	r4, r0
   18dd4:	ldr	r0, [r0]
   18dd8:	bl	17ba8 <__assert_fail@plt+0x6050>
   18ddc:	ldr	r0, [r4, #8]
   18de0:	bl	11720 <free@plt>
   18de4:	mov	r0, r4
   18de8:	pop	{r4, lr}
   18dec:	b	11720 <free@plt>
   18df0:	push	{r4, r5, lr}
   18df4:	mov	r5, r0
   18df8:	ldr	r4, [r0, #8]
   18dfc:	sub	sp, sp, #12
   18e00:	cmp	r4, #0
   18e04:	beq	18e58 <__assert_fail@plt+0x7300>
   18e08:	ldrd	r0, [r4]
   18e0c:	cmp	r1, r3
   18e10:	cmpeq	r0, r2
   18e14:	ldreq	r0, [r4, #8]
   18e18:	beq	18e50 <__assert_fail@plt+0x72f8>
   18e1c:	strd	r2, [r4]
   18e20:	mov	r1, r4
   18e24:	ldr	r0, [r5]
   18e28:	bl	17fd4 <__assert_fail@plt+0x647c>
   18e2c:	cmp	r0, #0
   18e30:	beq	18e78 <__assert_fail@plt+0x7320>
   18e34:	cmp	r4, r0
   18e38:	moveq	r3, #0
   18e3c:	ldreq	r0, [r5, #4]
   18e40:	ldrne	r0, [r0, #8]
   18e44:	addeq	r2, r0, #1
   18e48:	strdeq	r2, [r5, #4]
   18e4c:	str	r0, [r4, #8]
   18e50:	add	sp, sp, #12
   18e54:	pop	{r4, r5, pc}
   18e58:	mov	r0, #16
   18e5c:	strd	r2, [sp]
   18e60:	bl	118b8 <malloc@plt>
   18e64:	ldrd	r2, [sp]
   18e68:	cmp	r0, #0
   18e6c:	mov	r4, r0
   18e70:	str	r0, [r5, #8]
   18e74:	bne	18e1c <__assert_fail@plt+0x72c4>
   18e78:	mvn	r0, #0
   18e7c:	add	sp, sp, #12
   18e80:	pop	{r4, r5, pc}
   18e84:	cmp	r0, #0
   18e88:	sbcs	r3, r1, #0
   18e8c:	mov	r3, #0
   18e90:	push	{r4, r5, r6, r7, r8, lr}
   18e94:	mov	r4, r0
   18e98:	mov	r5, r1
   18e9c:	strb	r3, [r2, #20]
   18ea0:	add	r6, r2, #20
   18ea4:	blt	18ef4 <__assert_fail@plt+0x739c>
   18ea8:	mov	r0, r4
   18eac:	mov	r1, r5
   18eb0:	mov	r2, #10
   18eb4:	mov	r3, #0
   18eb8:	bl	21c68 <fts_children@@Base+0x1bdc>
   18ebc:	mov	r0, r4
   18ec0:	mov	r1, r5
   18ec4:	mov	r3, #0
   18ec8:	add	r2, r2, #48	; 0x30
   18ecc:	strb	r2, [r6, #-1]!
   18ed0:	mov	r2, #10
   18ed4:	bl	21c68 <fts_children@@Base+0x1bdc>
   18ed8:	mov	r4, r0
   18edc:	mov	r5, r1
   18ee0:	orrs	r3, r4, r5
   18ee4:	bne	18ea8 <__assert_fail@plt+0x7350>
   18ee8:	mov	r0, r6
   18eec:	pop	{r4, r5, r6, r7, r8, pc}
   18ef0:	mov	r6, r7
   18ef4:	mov	r0, r4
   18ef8:	mov	r1, r5
   18efc:	mov	r2, #10
   18f00:	mov	r3, #0
   18f04:	bl	21c68 <fts_children@@Base+0x1bdc>
   18f08:	mov	r0, r4
   18f0c:	mov	r1, r5
   18f10:	mov	r3, #0
   18f14:	sub	r7, r6, #1
   18f18:	rsb	r2, r2, #48	; 0x30
   18f1c:	strb	r2, [r6, #-1]
   18f20:	mov	r2, #10
   18f24:	bl	21c68 <fts_children@@Base+0x1bdc>
   18f28:	mov	r4, r0
   18f2c:	mov	r5, r1
   18f30:	orrs	r3, r4, r5
   18f34:	bne	18ef0 <__assert_fail@plt+0x7398>
   18f38:	mov	r3, #45	; 0x2d
   18f3c:	sub	r6, r6, #2
   18f40:	strb	r3, [r7, #-1]
   18f44:	mov	r0, r6
   18f48:	pop	{r4, r5, r6, r7, r8, pc}
   18f4c:	push	{r4, lr}
   18f50:	mov	r4, r0
   18f54:	bl	11708 <wcwidth@plt>
   18f58:	cmp	r0, #0
   18f5c:	popge	{r4, pc}
   18f60:	mov	r0, r4
   18f64:	bl	117c8 <iswcntrl@plt>
   18f68:	clz	r0, r0
   18f6c:	lsr	r0, r0, #5
   18f70:	pop	{r4, pc}
   18f74:	mov	r3, r1
   18f78:	push	{r4, r5, r6, lr}
   18f7c:	mov	r4, r1
   18f80:	ldr	r1, [r3], #16
   18f84:	ldr	r2, [r4, #4]
   18f88:	cmp	r1, r3
   18f8c:	mov	r5, r0
   18f90:	strne	r1, [r0]
   18f94:	beq	18fb4 <__assert_fail@plt+0x745c>
   18f98:	ldrb	r3, [r4, #8]
   18f9c:	str	r2, [r5, #4]
   18fa0:	cmp	r3, #0
   18fa4:	strb	r3, [r5, #8]
   18fa8:	ldrne	r3, [r4, #12]
   18fac:	strne	r3, [r5, #12]
   18fb0:	pop	{r4, r5, r6, pc}
   18fb4:	add	r3, r0, #16
   18fb8:	mov	r0, r3
   18fbc:	bl	11738 <memcpy@plt>
   18fc0:	ldr	r2, [r4, #4]
   18fc4:	str	r0, [r5]
   18fc8:	b	18f98 <__assert_fail@plt+0x7440>
   18fcc:	ldr	r3, [pc, #20]	; 18fe8 <__assert_fail@plt+0x7490>
   18fd0:	lsr	r2, r0, #5
   18fd4:	and	r0, r0, #31
   18fd8:	ldr	r3, [r3, r2, lsl #2]
   18fdc:	lsr	r0, r3, r0
   18fe0:	and	r0, r0, #1
   18fe4:	bx	lr
   18fe8:	andeq	r3, r2, r0, lsr r9
   18fec:	push	{r4, lr}
   18ff0:	mov	r2, #179	; 0xb3
   18ff4:	ldr	r3, [pc, #8]	; 19004 <__assert_fail@plt+0x74ac>
   18ff8:	ldr	r1, [pc, #8]	; 19008 <__assert_fail@plt+0x74b0>
   18ffc:	ldr	r0, [pc, #8]	; 1900c <__assert_fail@plt+0x74b4>
   19000:	bl	11b58 <__assert_fail@plt>
   19004:	andeq	r3, r2, r0, asr r9
   19008:			; <UNDEFINED> instruction: 0x000237bc
   1900c:	strdeq	r3, [r2], -ip
   19010:	push	{r4, r5, r6, r7, r8, r9, lr}
   19014:	sub	sp, sp, #124	; 0x7c
   19018:	ldr	r6, [pc, #1592]	; 19658 <__assert_fail@plt+0x7b00>
   1901c:	cmp	r0, r1
   19020:	ldr	r3, [r6]
   19024:	str	r3, [sp, #116]	; 0x74
   19028:	beq	194f0 <__assert_fail@plt+0x7998>
   1902c:	mov	r4, r0
   19030:	mov	r7, r1
   19034:	bl	11840 <__ctype_get_mb_cur_max@plt>
   19038:	cmp	r0, #1
   1903c:	bls	191d0 <__assert_fail@plt+0x7678>
   19040:	mov	r3, #0
   19044:	str	r7, [sp, #76]	; 0x4c
   19048:	str	r4, [sp, #20]
   1904c:	str	r3, [sp, #12]
   19050:	strb	r3, [sp, #4]
   19054:	str	r3, [sp, #8]
   19058:	strb	r3, [sp, #16]
   1905c:	strb	r3, [sp, #60]	; 0x3c
   19060:	str	r3, [sp, #64]	; 0x40
   19064:	strb	r3, [sp, #72]	; 0x48
   19068:	str	r3, [sp, #68]	; 0x44
   1906c:	mov	r5, #1
   19070:	ldr	r7, [pc, #1508]	; 1965c <__assert_fail@plt+0x7b04>
   19074:	b	1915c <__assert_fail@plt+0x7604>
   19078:	ldrb	r3, [r4]
   1907c:	and	r2, r3, #31
   19080:	lsr	r3, r3, #5
   19084:	ldr	r3, [r7, r3, lsl #2]
   19088:	lsr	r3, r3, r2
   1908c:	tst	r3, #1
   19090:	beq	19310 <__assert_fail@plt+0x77b8>
   19094:	str	r5, [sp, #24]
   19098:	ldrb	r4, [r4]
   1909c:	strb	r5, [sp, #28]
   190a0:	strb	r5, [sp, #16]
   190a4:	str	r4, [sp, #32]
   190a8:	cmp	r4, #0
   190ac:	beq	193d0 <__assert_fail@plt+0x7878>
   190b0:	ldrb	r3, [sp, #72]	; 0x48
   190b4:	cmp	r3, #0
   190b8:	bne	192d4 <__assert_fail@plt+0x777c>
   190bc:	ldrb	r3, [sp, #60]	; 0x3c
   190c0:	ldr	r4, [sp, #76]	; 0x4c
   190c4:	cmp	r3, #0
   190c8:	bne	1926c <__assert_fail@plt+0x7714>
   190cc:	ldrb	r3, [r4]
   190d0:	and	r2, r3, #31
   190d4:	lsr	r3, r3, #5
   190d8:	ldr	r3, [r7, r3, lsl #2]
   190dc:	lsr	r3, r3, r2
   190e0:	tst	r3, #1
   190e4:	beq	19258 <__assert_fail@plt+0x7700>
   190e8:	str	r5, [sp, #80]	; 0x50
   190ec:	ldrb	r0, [r4]
   190f0:	strb	r5, [sp, #84]	; 0x54
   190f4:	strb	r5, [sp, #72]	; 0x48
   190f8:	mov	r8, r0
   190fc:	str	r0, [sp, #88]	; 0x58
   19100:	cmp	r8, #0
   19104:	beq	19528 <__assert_fail@plt+0x79d0>
   19108:	ldrb	r3, [sp, #28]
   1910c:	cmp	r3, #0
   19110:	beq	19508 <__assert_fail@plt+0x79b0>
   19114:	ldr	r0, [sp, #32]
   19118:	bl	11750 <towlower@plt>
   1911c:	mov	r4, r0
   19120:	mov	r0, r8
   19124:	bl	11750 <towlower@plt>
   19128:	sub	r0, r4, r0
   1912c:	cmp	r0, #0
   19130:	bne	19240 <__assert_fail@plt+0x76e8>
   19134:	ldr	r4, [sp, #20]
   19138:	ldr	r3, [sp, #76]	; 0x4c
   1913c:	ldr	r1, [sp, #24]
   19140:	ldr	r2, [sp, #80]	; 0x50
   19144:	add	r4, r4, r1
   19148:	add	r3, r3, r2
   1914c:	strb	r0, [sp, #16]
   19150:	strb	r0, [sp, #72]	; 0x48
   19154:	str	r4, [sp, #20]
   19158:	str	r3, [sp, #76]	; 0x4c
   1915c:	ldrb	r3, [sp, #4]
   19160:	cmp	r3, #0
   19164:	beq	19078 <__assert_fail@plt+0x7520>
   19168:	bl	11840 <__ctype_get_mb_cur_max@plt>
   1916c:	mov	r1, r0
   19170:	mov	r0, r4
   19174:	bl	1b8ec <__assert_fail@plt+0x9d94>
   19178:	add	r3, sp, #8
   1917c:	mov	r1, r4
   19180:	mov	r2, r0
   19184:	add	r0, sp, #32
   19188:	bl	201d8 <fts_children@@Base+0x14c>
   1918c:	cmn	r0, #1
   19190:	str	r0, [sp, #24]
   19194:	beq	19328 <__assert_fail@plt+0x77d0>
   19198:	cmn	r0, #2
   1919c:	beq	19350 <__assert_fail@plt+0x77f8>
   191a0:	cmp	r0, #0
   191a4:	beq	19388 <__assert_fail@plt+0x7830>
   191a8:	ldr	r4, [sp, #32]
   191ac:	add	r0, sp, #8
   191b0:	strb	r5, [sp, #28]
   191b4:	bl	1175c <mbsinit@plt>
   191b8:	cmp	r0, #0
   191bc:	movne	r3, #0
   191c0:	strbeq	r5, [sp, #16]
   191c4:	strbne	r5, [sp, #16]
   191c8:	strbne	r3, [sp, #4]
   191cc:	b	190a8 <__assert_fail@plt+0x7550>
   191d0:	bl	11924 <__ctype_b_loc@plt>
   191d4:	sub	r5, r4, #1
   191d8:	sub	r7, r7, #1
   191dc:	ldr	r9, [r0]
   191e0:	b	191ec <__assert_fail@plt+0x7694>
   191e4:	cmp	r4, r0
   191e8:	bne	1923c <__assert_fail@plt+0x76e4>
   191ec:	ldrb	r4, [r5, #1]!
   191f0:	sxth	r8, r4
   191f4:	lsl	r3, r8, #1
   191f8:	ldrh	r3, [r9, r3]
   191fc:	tst	r3, #256	; 0x100
   19200:	beq	19210 <__assert_fail@plt+0x76b8>
   19204:	bl	118e8 <__ctype_tolower_loc@plt>
   19208:	ldr	r3, [r0]
   1920c:	ldrb	r4, [r3, r8, lsl #2]
   19210:	ldrb	r0, [r7, #1]!
   19214:	sxth	r8, r0
   19218:	lsl	r3, r8, #1
   1921c:	ldrh	r3, [r9, r3]
   19220:	tst	r3, #256	; 0x100
   19224:	beq	19234 <__assert_fail@plt+0x76dc>
   19228:	bl	118e8 <__ctype_tolower_loc@plt>
   1922c:	ldr	r3, [r0]
   19230:	ldrb	r0, [r3, r8, lsl #2]
   19234:	cmp	r4, #0
   19238:	bne	191e4 <__assert_fail@plt+0x768c>
   1923c:	sub	r0, r4, r0
   19240:	ldr	r2, [sp, #116]	; 0x74
   19244:	ldr	r3, [r6]
   19248:	cmp	r2, r3
   1924c:	bne	19654 <__assert_fail@plt+0x7afc>
   19250:	add	sp, sp, #124	; 0x7c
   19254:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19258:	add	r0, sp, #64	; 0x40
   1925c:	bl	1175c <mbsinit@plt>
   19260:	cmp	r0, #0
   19264:	beq	1962c <__assert_fail@plt+0x7ad4>
   19268:	strb	r5, [sp, #60]	; 0x3c
   1926c:	bl	11840 <__ctype_get_mb_cur_max@plt>
   19270:	mov	r1, r0
   19274:	mov	r0, r4
   19278:	bl	1b8ec <__assert_fail@plt+0x9d94>
   1927c:	add	r3, sp, #64	; 0x40
   19280:	mov	r1, r4
   19284:	mov	r2, r0
   19288:	add	r0, sp, #88	; 0x58
   1928c:	bl	201d8 <fts_children@@Base+0x14c>
   19290:	cmn	r0, #1
   19294:	str	r0, [sp, #80]	; 0x50
   19298:	beq	1933c <__assert_fail@plt+0x77e4>
   1929c:	cmn	r0, #2
   192a0:	beq	1936c <__assert_fail@plt+0x7814>
   192a4:	cmp	r0, #0
   192a8:	beq	193ac <__assert_fail@plt+0x7854>
   192ac:	ldr	r8, [sp, #88]	; 0x58
   192b0:	add	r0, sp, #64	; 0x40
   192b4:	strb	r5, [sp, #84]	; 0x54
   192b8:	bl	1175c <mbsinit@plt>
   192bc:	cmp	r0, #0
   192c0:	movne	r3, #0
   192c4:	strbeq	r5, [sp, #72]	; 0x48
   192c8:	strbne	r5, [sp, #72]	; 0x48
   192cc:	strbne	r3, [sp, #60]	; 0x3c
   192d0:	b	19100 <__assert_fail@plt+0x75a8>
   192d4:	ldrb	r3, [sp, #84]	; 0x54
   192d8:	cmp	r3, #0
   192dc:	ldrne	r8, [sp, #88]	; 0x58
   192e0:	bne	19100 <__assert_fail@plt+0x75a8>
   192e4:	ldrb	r3, [sp, #28]
   192e8:	cmp	r3, #0
   192ec:	bne	19520 <__assert_fail@plt+0x79c8>
   192f0:	ldr	r2, [sp, #24]
   192f4:	ldr	r3, [sp, #80]	; 0x50
   192f8:	ldr	r0, [sp, #20]
   192fc:	cmp	r2, r3
   19300:	ldr	r1, [sp, #76]	; 0x4c
   19304:	bne	194f8 <__assert_fail@plt+0x79a0>
   19308:	bl	11768 <memcmp@plt>
   1930c:	b	1912c <__assert_fail@plt+0x75d4>
   19310:	add	r0, sp, #8
   19314:	bl	1175c <mbsinit@plt>
   19318:	cmp	r0, #0
   1931c:	beq	1962c <__assert_fail@plt+0x7ad4>
   19320:	strb	r5, [sp, #4]
   19324:	b	19168 <__assert_fail@plt+0x7610>
   19328:	mov	r3, #0
   1932c:	str	r5, [sp, #24]
   19330:	strb	r5, [sp, #16]
   19334:	strb	r3, [sp, #28]
   19338:	b	190b0 <__assert_fail@plt+0x7558>
   1933c:	mov	r3, #0
   19340:	str	r5, [sp, #80]	; 0x50
   19344:	strb	r5, [sp, #72]	; 0x48
   19348:	strb	r3, [sp, #84]	; 0x54
   1934c:	b	192e4 <__assert_fail@plt+0x778c>
   19350:	ldr	r0, [sp, #20]
   19354:	bl	11954 <strlen@plt>
   19358:	mov	r3, #0
   1935c:	strb	r5, [sp, #16]
   19360:	strb	r3, [sp, #28]
   19364:	str	r0, [sp, #24]
   19368:	b	190b0 <__assert_fail@plt+0x7558>
   1936c:	ldr	r0, [sp, #76]	; 0x4c
   19370:	bl	11954 <strlen@plt>
   19374:	mov	r3, #0
   19378:	strb	r5, [sp, #72]	; 0x48
   1937c:	strb	r3, [sp, #84]	; 0x54
   19380:	str	r0, [sp, #80]	; 0x50
   19384:	b	192e4 <__assert_fail@plt+0x778c>
   19388:	ldr	r3, [sp, #20]
   1938c:	str	r5, [sp, #24]
   19390:	ldrb	r3, [r3]
   19394:	cmp	r3, #0
   19398:	bne	19640 <__assert_fail@plt+0x7ae8>
   1939c:	ldr	r4, [sp, #32]
   193a0:	cmp	r4, #0
   193a4:	beq	191ac <__assert_fail@plt+0x7654>
   193a8:	b	19600 <__assert_fail@plt+0x7aa8>
   193ac:	ldr	r3, [sp, #76]	; 0x4c
   193b0:	str	r5, [sp, #80]	; 0x50
   193b4:	ldrb	r3, [r3]
   193b8:	cmp	r3, #0
   193bc:	bne	19640 <__assert_fail@plt+0x7ae8>
   193c0:	ldr	r8, [sp, #88]	; 0x58
   193c4:	cmp	r8, #0
   193c8:	beq	192b0 <__assert_fail@plt+0x7758>
   193cc:	b	19600 <__assert_fail@plt+0x7aa8>
   193d0:	ldrb	r3, [sp, #16]
   193d4:	cmp	r3, #0
   193d8:	bne	19494 <__assert_fail@plt+0x793c>
   193dc:	ldrb	r3, [sp, #4]
   193e0:	ldr	r4, [sp, #20]
   193e4:	cmp	r3, #0
   193e8:	bne	19424 <__assert_fail@plt+0x78cc>
   193ec:	ldrb	r3, [r4]
   193f0:	ldr	r1, [pc, #612]	; 1965c <__assert_fail@plt+0x7b04>
   193f4:	and	r2, r3, #31
   193f8:	lsr	r3, r3, #5
   193fc:	ldr	r3, [r1, r3, lsl #2]
   19400:	lsr	r3, r3, r2
   19404:	tst	r3, #1
   19408:	bne	19548 <__assert_fail@plt+0x79f0>
   1940c:	add	r0, sp, #8
   19410:	bl	1175c <mbsinit@plt>
   19414:	cmp	r0, #0
   19418:	beq	1962c <__assert_fail@plt+0x7ad4>
   1941c:	mov	r3, #1
   19420:	strb	r3, [sp, #4]
   19424:	bl	11840 <__ctype_get_mb_cur_max@plt>
   19428:	mov	r1, r0
   1942c:	mov	r0, r4
   19430:	bl	1b8ec <__assert_fail@plt+0x9d94>
   19434:	add	r3, sp, #8
   19438:	mov	r1, r4
   1943c:	mov	r2, r0
   19440:	add	r0, sp, #32
   19444:	bl	201d8 <fts_children@@Base+0x14c>
   19448:	cmn	r0, #1
   1944c:	str	r0, [sp, #24]
   19450:	beq	19508 <__assert_fail@plt+0x79b0>
   19454:	cmn	r0, #2
   19458:	beq	19508 <__assert_fail@plt+0x79b0>
   1945c:	cmp	r0, #0
   19460:	beq	195dc <__assert_fail@plt+0x7a84>
   19464:	ldr	r4, [sp, #32]
   19468:	mov	r5, #1
   1946c:	add	r0, sp, #8
   19470:	strb	r5, [sp, #28]
   19474:	bl	1175c <mbsinit@plt>
   19478:	cmp	r0, #0
   1947c:	movne	r3, #0
   19480:	strbeq	r5, [sp, #16]
   19484:	strbne	r5, [sp, #16]
   19488:	strbne	r3, [sp, #4]
   1948c:	cmp	r4, #0
   19490:	bne	19508 <__assert_fail@plt+0x79b0>
   19494:	ldrb	r3, [sp, #72]	; 0x48
   19498:	cmp	r3, #0
   1949c:	bne	195c8 <__assert_fail@plt+0x7a70>
   194a0:	ldrb	r3, [sp, #60]	; 0x3c
   194a4:	ldr	r4, [sp, #76]	; 0x4c
   194a8:	cmp	r3, #0
   194ac:	bne	1957c <__assert_fail@plt+0x7a24>
   194b0:	ldrb	r3, [r4]
   194b4:	ldr	r1, [pc, #416]	; 1965c <__assert_fail@plt+0x7b04>
   194b8:	and	r2, r3, #31
   194bc:	lsr	r3, r3, #5
   194c0:	ldr	r3, [r1, r3, lsl #2]
   194c4:	lsr	r3, r3, r2
   194c8:	tst	r3, #1
   194cc:	beq	19564 <__assert_fail@plt+0x7a0c>
   194d0:	mov	r3, #1
   194d4:	str	r3, [sp, #80]	; 0x50
   194d8:	ldrb	r0, [r4]
   194dc:	strb	r3, [sp, #84]	; 0x54
   194e0:	mov	r8, r0
   194e4:	str	r0, [sp, #88]	; 0x58
   194e8:	cmp	r8, #0
   194ec:	bne	19520 <__assert_fail@plt+0x79c8>
   194f0:	mov	r0, #0
   194f4:	b	19240 <__assert_fail@plt+0x76e8>
   194f8:	bcs	19510 <__assert_fail@plt+0x79b8>
   194fc:	bl	11768 <memcmp@plt>
   19500:	cmp	r0, #0
   19504:	ble	19520 <__assert_fail@plt+0x79c8>
   19508:	mov	r0, #1
   1950c:	b	19240 <__assert_fail@plt+0x76e8>
   19510:	mov	r2, r3
   19514:	bl	11768 <memcmp@plt>
   19518:	cmp	r0, #0
   1951c:	bge	19508 <__assert_fail@plt+0x79b0>
   19520:	mvn	r0, #0
   19524:	b	19240 <__assert_fail@plt+0x76e8>
   19528:	ldrb	r3, [sp, #16]
   1952c:	cmp	r3, #0
   19530:	beq	193dc <__assert_fail@plt+0x7884>
   19534:	ldrb	r3, [sp, #28]
   19538:	cmp	r3, #0
   1953c:	beq	19508 <__assert_fail@plt+0x79b0>
   19540:	ldr	r4, [sp, #32]
   19544:	b	1948c <__assert_fail@plt+0x7934>
   19548:	mov	r3, #1
   1954c:	str	r3, [sp, #24]
   19550:	ldrb	r4, [r4]
   19554:	strb	r3, [sp, #28]
   19558:	strb	r3, [sp, #16]
   1955c:	str	r4, [sp, #32]
   19560:	b	1948c <__assert_fail@plt+0x7934>
   19564:	add	r0, sp, #64	; 0x40
   19568:	bl	1175c <mbsinit@plt>
   1956c:	cmp	r0, #0
   19570:	beq	1962c <__assert_fail@plt+0x7ad4>
   19574:	mov	r3, #1
   19578:	strb	r3, [sp, #60]	; 0x3c
   1957c:	bl	11840 <__ctype_get_mb_cur_max@plt>
   19580:	mov	r1, r0
   19584:	mov	r0, r4
   19588:	bl	1b8ec <__assert_fail@plt+0x9d94>
   1958c:	add	r3, sp, #64	; 0x40
   19590:	mov	r1, r4
   19594:	mov	r2, r0
   19598:	add	r0, sp, #88	; 0x58
   1959c:	bl	201d8 <fts_children@@Base+0x14c>
   195a0:	add	r3, r0, #2
   195a4:	cmp	r3, #1
   195a8:	str	r0, [sp, #80]	; 0x50
   195ac:	bls	19520 <__assert_fail@plt+0x79c8>
   195b0:	cmp	r0, #0
   195b4:	beq	19604 <__assert_fail@plt+0x7aac>
   195b8:	ldr	r8, [sp, #88]	; 0x58
   195bc:	mov	r3, #1
   195c0:	strb	r3, [sp, #84]	; 0x54
   195c4:	b	194e8 <__assert_fail@plt+0x7990>
   195c8:	ldrb	r3, [sp, #84]	; 0x54
   195cc:	cmp	r3, #0
   195d0:	beq	19520 <__assert_fail@plt+0x79c8>
   195d4:	ldr	r8, [sp, #88]	; 0x58
   195d8:	b	194e8 <__assert_fail@plt+0x7990>
   195dc:	ldr	r3, [sp, #20]
   195e0:	mov	r2, #1
   195e4:	str	r2, [sp, #24]
   195e8:	ldrb	r3, [r3]
   195ec:	cmp	r3, #0
   195f0:	bne	19640 <__assert_fail@plt+0x7ae8>
   195f4:	ldr	r4, [sp, #32]
   195f8:	cmp	r4, #0
   195fc:	beq	19468 <__assert_fail@plt+0x7910>
   19600:	bl	18fec <__assert_fail@plt+0x7494>
   19604:	ldr	r3, [sp, #76]	; 0x4c
   19608:	mov	r2, #1
   1960c:	str	r2, [sp, #80]	; 0x50
   19610:	ldrb	r3, [r3]
   19614:	cmp	r3, #0
   19618:	bne	19640 <__assert_fail@plt+0x7ae8>
   1961c:	ldr	r8, [sp, #88]	; 0x58
   19620:	cmp	r8, #0
   19624:	beq	195bc <__assert_fail@plt+0x7a64>
   19628:	b	19600 <__assert_fail@plt+0x7aa8>
   1962c:	ldr	r3, [pc, #44]	; 19660 <__assert_fail@plt+0x7b08>
   19630:	mov	r2, #150	; 0x96
   19634:	ldr	r1, [pc, #40]	; 19664 <__assert_fail@plt+0x7b0c>
   19638:	ldr	r0, [pc, #40]	; 19668 <__assert_fail@plt+0x7b10>
   1963c:	bl	11b58 <__assert_fail@plt>
   19640:	ldr	r3, [pc, #24]	; 19660 <__assert_fail@plt+0x7b08>
   19644:	mov	r2, #178	; 0xb2
   19648:	ldr	r1, [pc, #20]	; 19664 <__assert_fail@plt+0x7b0c>
   1964c:	ldr	r0, [pc, #24]	; 1966c <__assert_fail@plt+0x7b14>
   19650:	bl	11b58 <__assert_fail@plt>
   19654:	bl	11780 <__stack_chk_fail@plt>
   19658:	andeq	r4, r3, r8, lsl #30
   1965c:	andeq	r3, r2, r0, lsr r9
   19660:	andeq	r3, r2, r0, asr r9
   19664:			; <UNDEFINED> instruction: 0x000237bc
   19668:	andeq	r3, r2, ip, asr #15
   1966c:	andeq	r3, r2, r4, ror #15
   19670:	push	{r4, r5, r6, lr}
   19674:	subs	r4, r0, #0
   19678:	beq	196ec <__assert_fail@plt+0x7b94>
   1967c:	mov	r1, #47	; 0x2f
   19680:	bl	11a38 <strrchr@plt>
   19684:	subs	r5, r0, #0
   19688:	beq	196d8 <__assert_fail@plt+0x7b80>
   1968c:	add	r6, r5, #1
   19690:	sub	r3, r6, r4
   19694:	cmp	r3, #6
   19698:	ble	196d8 <__assert_fail@plt+0x7b80>
   1969c:	mov	r2, #7
   196a0:	ldr	r1, [pc, #96]	; 19708 <__assert_fail@plt+0x7bb0>
   196a4:	sub	r0, r5, #6
   196a8:	bl	11b1c <strncmp@plt>
   196ac:	cmp	r0, #0
   196b0:	bne	196d8 <__assert_fail@plt+0x7b80>
   196b4:	mov	r2, #3
   196b8:	ldr	r1, [pc, #76]	; 1970c <__assert_fail@plt+0x7bb4>
   196bc:	mov	r0, r6
   196c0:	bl	11b1c <strncmp@plt>
   196c4:	cmp	r0, #0
   196c8:	movne	r4, r6
   196cc:	ldreq	r3, [pc, #60]	; 19710 <__assert_fail@plt+0x7bb8>
   196d0:	addeq	r4, r5, #4
   196d4:	streq	r4, [r3]
   196d8:	ldr	r2, [pc, #52]	; 19714 <__assert_fail@plt+0x7bbc>
   196dc:	ldr	r3, [pc, #52]	; 19718 <__assert_fail@plt+0x7bc0>
   196e0:	str	r4, [r2]
   196e4:	str	r4, [r3]
   196e8:	pop	{r4, r5, r6, pc}
   196ec:	ldr	r3, [pc, #40]	; 1971c <__assert_fail@plt+0x7bc4>
   196f0:	mov	r2, #55	; 0x37
   196f4:	mov	r1, #1
   196f8:	ldr	r3, [r3]
   196fc:	ldr	r0, [pc, #28]	; 19720 <__assert_fail@plt+0x7bc8>
   19700:	bl	1181c <fwrite@plt>
   19704:	bl	11b28 <abort@plt>
   19708:	muleq	r2, ip, r9
   1970c:	andeq	r3, r2, r4, lsr #19
   19710:	andeq	r5, r3, r8, lsl #4
   19714:			; <UNDEFINED> instruction: 0x000352b0
   19718:	andeq	r5, r3, ip, lsl #4
   1971c:	andeq	r5, r3, r8, lsl r2
   19720:	andeq	r3, r2, r4, ror #18
   19724:	push	{r4, lr}
   19728:	mov	r2, #48	; 0x30
   1972c:	mov	r4, r1
   19730:	mov	r1, #0
   19734:	bl	119a8 <memset@plt>
   19738:	cmp	r4, #10
   1973c:	beq	19748 <__assert_fail@plt+0x7bf0>
   19740:	str	r4, [r0]
   19744:	pop	{r4, pc}
   19748:	bl	11b28 <abort@plt>
   1974c:	push	{r4, r5, r6, lr}
   19750:	mov	r2, #5
   19754:	mov	r5, r0
   19758:	mov	r6, r1
   1975c:	mov	r1, r0
   19760:	mov	r0, #0
   19764:	bl	11774 <dcgettext@plt>
   19768:	cmp	r5, r0
   1976c:	mov	r4, r0
   19770:	beq	1977c <__assert_fail@plt+0x7c24>
   19774:	mov	r0, r4
   19778:	pop	{r4, r5, r6, pc}
   1977c:	bl	21230 <fts_children@@Base+0x11a4>
   19780:	ldrb	r3, [r0]
   19784:	bic	r3, r3, #32
   19788:	cmp	r3, #85	; 0x55
   1978c:	bne	197ec <__assert_fail@plt+0x7c94>
   19790:	ldrb	r3, [r0, #1]
   19794:	bic	r3, r3, #32
   19798:	cmp	r3, #84	; 0x54
   1979c:	bne	19864 <__assert_fail@plt+0x7d0c>
   197a0:	ldrb	r3, [r0, #2]
   197a4:	bic	r3, r3, #32
   197a8:	cmp	r3, #70	; 0x46
   197ac:	bne	19864 <__assert_fail@plt+0x7d0c>
   197b0:	ldrb	r3, [r0, #3]
   197b4:	cmp	r3, #45	; 0x2d
   197b8:	bne	19864 <__assert_fail@plt+0x7d0c>
   197bc:	ldrb	r3, [r0, #4]
   197c0:	cmp	r3, #56	; 0x38
   197c4:	bne	19864 <__assert_fail@plt+0x7d0c>
   197c8:	ldrb	r3, [r0, #5]
   197cc:	cmp	r3, #0
   197d0:	bne	19864 <__assert_fail@plt+0x7d0c>
   197d4:	ldrb	r2, [r4]
   197d8:	ldr	r3, [pc, #156]	; 1987c <__assert_fail@plt+0x7d24>
   197dc:	ldr	r4, [pc, #156]	; 19880 <__assert_fail@plt+0x7d28>
   197e0:	cmp	r2, #96	; 0x60
   197e4:	movne	r4, r3
   197e8:	b	19774 <__assert_fail@plt+0x7c1c>
   197ec:	cmp	r3, #71	; 0x47
   197f0:	bne	19864 <__assert_fail@plt+0x7d0c>
   197f4:	ldrb	r3, [r0, #1]
   197f8:	bic	r3, r3, #32
   197fc:	cmp	r3, #66	; 0x42
   19800:	bne	19864 <__assert_fail@plt+0x7d0c>
   19804:	ldrb	r3, [r0, #2]
   19808:	cmp	r3, #49	; 0x31
   1980c:	bne	19864 <__assert_fail@plt+0x7d0c>
   19810:	ldrb	r3, [r0, #3]
   19814:	cmp	r3, #56	; 0x38
   19818:	bne	19864 <__assert_fail@plt+0x7d0c>
   1981c:	ldrb	r3, [r0, #4]
   19820:	cmp	r3, #48	; 0x30
   19824:	bne	19864 <__assert_fail@plt+0x7d0c>
   19828:	ldrb	r3, [r0, #5]
   1982c:	cmp	r3, #51	; 0x33
   19830:	bne	19864 <__assert_fail@plt+0x7d0c>
   19834:	ldrb	r3, [r0, #6]
   19838:	cmp	r3, #48	; 0x30
   1983c:	bne	19864 <__assert_fail@plt+0x7d0c>
   19840:	ldrb	r3, [r0, #7]
   19844:	cmp	r3, #0
   19848:	bne	19864 <__assert_fail@plt+0x7d0c>
   1984c:	ldrb	r2, [r4]
   19850:	ldr	r3, [pc, #44]	; 19884 <__assert_fail@plt+0x7d2c>
   19854:	ldr	r4, [pc, #44]	; 19888 <__assert_fail@plt+0x7d30>
   19858:	cmp	r2, #96	; 0x60
   1985c:	movne	r4, r3
   19860:	b	19774 <__assert_fail@plt+0x7c1c>
   19864:	ldr	r3, [pc, #32]	; 1988c <__assert_fail@plt+0x7d34>
   19868:	ldr	r4, [pc, #32]	; 19890 <__assert_fail@plt+0x7d38>
   1986c:	cmp	r6, #9
   19870:	movne	r4, r3
   19874:	mov	r0, r4
   19878:	pop	{r4, r5, r6, pc}
   1987c:	andeq	r3, r2, r0, lsl #20
   19880:	andeq	r3, r2, ip, lsl #20
   19884:	andeq	r3, r2, r4, lsl #20
   19888:	andeq	r3, r2, r8, lsl #20
   1988c:	andeq	r3, r2, ip, lsl #3
   19890:	strdeq	r3, [r2], -ip
   19894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19898:	sub	sp, sp, #124	; 0x7c
   1989c:	ldr	ip, [pc, #3576]	; 1a69c <__assert_fail@plt+0x8b44>
   198a0:	str	r3, [sp, #24]
   198a4:	ldr	r3, [sp, #168]	; 0xa8
   198a8:	ldr	ip, [ip]
   198ac:	str	r3, [sp, #56]	; 0x38
   198b0:	ldr	r3, [sp, #172]	; 0xac
   198b4:	ldr	r8, [sp, #160]	; 0xa0
   198b8:	str	r3, [sp, #80]	; 0x50
   198bc:	ldr	r3, [sp, #176]	; 0xb0
   198c0:	mov	fp, r0
   198c4:	str	r3, [sp, #76]	; 0x4c
   198c8:	mov	sl, r1
   198cc:	str	r2, [sp, #36]	; 0x24
   198d0:	str	ip, [sp, #116]	; 0x74
   198d4:	bl	11840 <__ctype_get_mb_cur_max@plt>
   198d8:	ldr	r3, [sp, #164]	; 0xa4
   198dc:	ands	r4, r3, #2
   198e0:	movne	r3, #1
   198e4:	moveq	r3, #0
   198e8:	str	r3, [sp, #32]
   198ec:	str	r0, [sp, #64]	; 0x40
   198f0:	cmp	r8, #10
   198f4:	ldrls	pc, [pc, r8, lsl #2]
   198f8:	b	1b0a8 <__assert_fail@plt+0x9550>
   198fc:	strdeq	r9, [r1], -r0
   19900:	andeq	r9, r1, r8, lsl #27
   19904:	andeq	sl, r1, r8, lsl #7
   19908:	andeq	r9, r1, r8, lsr #27
   1990c:	andeq	r9, r1, ip, asr ip
   19910:	andeq	r9, r1, r4, lsr #25
   19914:	andeq	r9, r1, r0, lsr #26
   19918:	andeq	r9, r1, r8, asr sp
   1991c:	andeq	r9, r1, r8, lsr #18
   19920:	andeq	r9, r1, r8, lsr #18
   19924:	andeq	r9, r1, r8, lsr #18
   19928:	cmp	r8, #10
   1992c:	beq	19950 <__assert_fail@plt+0x7df8>
   19930:	mov	r1, r8
   19934:	ldr	r0, [pc, #3428]	; 1a6a0 <__assert_fail@plt+0x8b48>
   19938:	bl	1974c <__assert_fail@plt+0x7bf4>
   1993c:	mov	r1, r8
   19940:	str	r0, [sp, #80]	; 0x50
   19944:	ldr	r0, [pc, #3420]	; 1a6a8 <__assert_fail@plt+0x8b50>
   19948:	bl	1974c <__assert_fail@plt+0x7bf4>
   1994c:	str	r0, [sp, #76]	; 0x4c
   19950:	cmp	r4, #0
   19954:	movne	r4, #0
   19958:	beq	1ad68 <__assert_fail@plt+0x9210>
   1995c:	ldr	r7, [sp, #76]	; 0x4c
   19960:	mov	r5, #0
   19964:	mov	r6, #1
   19968:	mov	r0, r7
   1996c:	str	r6, [sp, #40]	; 0x28
   19970:	str	r5, [sp, #68]	; 0x44
   19974:	bl	11954 <strlen@plt>
   19978:	str	r6, [sp, #28]
   1997c:	str	r5, [sp, #44]	; 0x2c
   19980:	str	r5, [sp, #72]	; 0x48
   19984:	str	r7, [sp, #60]	; 0x3c
   19988:	str	r0, [sp, #52]	; 0x34
   1998c:	str	r8, [sp, #160]	; 0xa0
   19990:	mov	r8, fp
   19994:	ldr	fp, [sp, #160]	; 0xa0
   19998:	mov	r9, #0
   1999c:	ldr	r3, [sp, #24]
   199a0:	cmn	r3, #1
   199a4:	beq	19f0c <__assert_fail@plt+0x83b4>
   199a8:	ldr	r3, [sp, #24]
   199ac:	subs	r6, r3, r9
   199b0:	movne	r6, #1
   199b4:	cmp	r6, #0
   199b8:	beq	19f24 <__assert_fail@plt+0x83cc>
   199bc:	ldr	r7, [sp, #28]
   199c0:	ldr	r0, [sp, #36]	; 0x24
   199c4:	cmp	fp, #2
   199c8:	moveq	r7, #0
   199cc:	andne	r7, r7, #1
   199d0:	add	r3, r0, r9
   199d4:	cmp	r7, #0
   199d8:	str	r3, [sp, #48]	; 0x30
   199dc:	beq	1a3c8 <__assert_fail@plt+0x8870>
   199e0:	ldr	r2, [sp, #52]	; 0x34
   199e4:	cmp	r2, #0
   199e8:	beq	1a6ac <__assert_fail@plt+0x8b54>
   199ec:	ldr	r1, [sp, #24]
   199f0:	cmp	r2, #1
   199f4:	mov	r3, r2
   199f8:	movls	r3, #0
   199fc:	movhi	r3, #1
   19a00:	cmn	r1, #1
   19a04:	movne	r3, #0
   19a08:	cmp	r3, #0
   19a0c:	add	r5, r9, r2
   19a10:	beq	19a1c <__assert_fail@plt+0x7ec4>
   19a14:	bl	11954 <strlen@plt>
   19a18:	str	r0, [sp, #24]
   19a1c:	ldr	r3, [sp, #24]
   19a20:	cmp	r5, r3
   19a24:	bhi	1a6ac <__assert_fail@plt+0x8b54>
   19a28:	ldr	r2, [sp, #52]	; 0x34
   19a2c:	ldr	r1, [sp, #60]	; 0x3c
   19a30:	ldr	r0, [sp, #48]	; 0x30
   19a34:	bl	11768 <memcmp@plt>
   19a38:	cmp	r0, #0
   19a3c:	bne	1a6ac <__assert_fail@plt+0x8b54>
   19a40:	ldr	r3, [sp, #32]
   19a44:	cmp	r3, #0
   19a48:	bne	1af68 <__assert_fail@plt+0x9410>
   19a4c:	ldr	r3, [sp, #48]	; 0x30
   19a50:	ldrb	r5, [r3]
   19a54:	cmp	r5, #126	; 0x7e
   19a58:	ldrls	pc, [pc, r5, lsl #2]
   19a5c:	b	1a32c <__assert_fail@plt+0x87d4>
   19a60:	andeq	sl, r1, r8, lsl r2
   19a64:	andeq	sl, r1, ip, lsr #6
   19a68:	andeq	sl, r1, ip, lsr #6
   19a6c:	andeq	sl, r1, ip, lsr #6
   19a70:	andeq	sl, r1, ip, lsr #6
   19a74:	andeq	sl, r1, ip, lsr #6
   19a78:	andeq	sl, r1, ip, lsr #6
   19a7c:	andeq	sl, r1, r4, ror #5
   19a80:	ldrdeq	sl, [r1], -r4
   19a84:	ldrdeq	sl, [r1], -r4
   19a88:	muleq	r1, ip, r1
   19a8c:	strdeq	sl, [r1], -r4
   19a90:	ldrdeq	sl, [r1], -ip
   19a94:	andeq	sl, r1, ip, lsl #2
   19a98:	andeq	sl, r1, ip, lsr #6
   19a9c:	andeq	sl, r1, ip, lsr #6
   19aa0:	andeq	sl, r1, ip, lsr #6
   19aa4:	andeq	sl, r1, ip, lsr #6
   19aa8:	andeq	sl, r1, ip, lsr #6
   19aac:	andeq	sl, r1, ip, lsr #6
   19ab0:	andeq	sl, r1, ip, lsr #6
   19ab4:	andeq	sl, r1, ip, lsr #6
   19ab8:	andeq	sl, r1, ip, lsr #6
   19abc:	andeq	sl, r1, ip, lsr #6
   19ac0:	andeq	sl, r1, ip, lsr #6
   19ac4:	andeq	sl, r1, ip, lsr #6
   19ac8:	andeq	sl, r1, ip, lsr #6
   19acc:	andeq	sl, r1, ip, lsr #6
   19ad0:	andeq	sl, r1, ip, lsr #6
   19ad4:	andeq	sl, r1, ip, lsr #6
   19ad8:	andeq	sl, r1, ip, lsr #6
   19adc:	andeq	sl, r1, ip, lsr #6
   19ae0:	andeq	sl, r1, ip, ror #5
   19ae4:	andeq	sl, r1, r0, lsl #4
   19ae8:	andeq	sl, r1, r0, lsl #4
   19aec:	andeq	sl, r1, r4, lsl #6
   19af0:	andeq	sl, r1, r0, lsl #4
   19af4:	andeq	sl, r1, r0, lsr #6
   19af8:	andeq	sl, r1, r0, lsl #4
   19afc:	andeq	sl, r1, r0, asr #32
   19b00:	andeq	sl, r1, r0, lsl #4
   19b04:	andeq	sl, r1, r0, lsl #4
   19b08:	andeq	sl, r1, r0, lsl #4
   19b0c:	andeq	sl, r1, r0, lsr #6
   19b10:	andeq	sl, r1, r0, lsr #6
   19b14:	andeq	sl, r1, r0, lsr #6
   19b18:	andeq	sl, r1, r0, lsr #6
   19b1c:	andeq	sl, r1, r0, lsr #6
   19b20:	andeq	sl, r1, r0, lsr #6
   19b24:	andeq	sl, r1, r0, lsr #6
   19b28:	andeq	sl, r1, r0, lsr #6
   19b2c:	andeq	sl, r1, r0, lsr #6
   19b30:	andeq	sl, r1, r0, lsr #6
   19b34:	andeq	sl, r1, r0, lsr #6
   19b38:	andeq	sl, r1, r0, lsr #6
   19b3c:	andeq	sl, r1, r0, lsr #6
   19b40:	andeq	sl, r1, r0, lsr #6
   19b44:	andeq	sl, r1, r0, lsr #6
   19b48:	andeq	sl, r1, r0, lsr #6
   19b4c:	andeq	sl, r1, r0, lsl #4
   19b50:	andeq	sl, r1, r0, lsl #4
   19b54:	andeq	sl, r1, r0, lsl #4
   19b58:	andeq	sl, r1, r0, lsl #4
   19b5c:	andeq	sl, r1, r4, lsl r0
   19b60:	andeq	sl, r1, ip, lsr #6
   19b64:	andeq	sl, r1, r0, lsr #6
   19b68:	andeq	sl, r1, r0, lsr #6
   19b6c:	andeq	sl, r1, r0, lsr #6
   19b70:	andeq	sl, r1, r0, lsr #6
   19b74:	andeq	sl, r1, r0, lsr #6
   19b78:	andeq	sl, r1, r0, lsr #6
   19b7c:	andeq	sl, r1, r0, lsr #6
   19b80:	andeq	sl, r1, r0, lsr #6
   19b84:	andeq	sl, r1, r0, lsr #6
   19b88:	andeq	sl, r1, r0, lsr #6
   19b8c:	andeq	sl, r1, r0, lsr #6
   19b90:	andeq	sl, r1, r0, lsr #6
   19b94:	andeq	sl, r1, r0, lsr #6
   19b98:	andeq	sl, r1, r0, lsr #6
   19b9c:	andeq	sl, r1, r0, lsr #6
   19ba0:	andeq	sl, r1, r0, lsr #6
   19ba4:	andeq	sl, r1, r0, lsr #6
   19ba8:	andeq	sl, r1, r0, lsr #6
   19bac:	andeq	sl, r1, r0, lsr #6
   19bb0:	andeq	sl, r1, r0, lsr #6
   19bb4:	andeq	sl, r1, r0, lsr #6
   19bb8:	andeq	sl, r1, r0, lsr #6
   19bbc:	andeq	sl, r1, r0, lsr #6
   19bc0:	andeq	sl, r1, r0, lsr #6
   19bc4:	andeq	sl, r1, r0, lsr #6
   19bc8:	andeq	sl, r1, r0, lsr #6
   19bcc:	andeq	sl, r1, r0, lsl #4
   19bd0:	andeq	r9, r1, ip, asr #31
   19bd4:	andeq	sl, r1, r0, lsr #6
   19bd8:	andeq	sl, r1, r0, lsl #4
   19bdc:	andeq	sl, r1, r0, lsr #6
   19be0:	andeq	sl, r1, r0, lsl #4
   19be4:	andeq	sl, r1, r0, lsr #6
   19be8:	andeq	sl, r1, r0, lsr #6
   19bec:	andeq	sl, r1, r0, lsr #6
   19bf0:	andeq	sl, r1, r0, lsr #6
   19bf4:	andeq	sl, r1, r0, lsr #6
   19bf8:	andeq	sl, r1, r0, lsr #6
   19bfc:	andeq	sl, r1, r0, lsr #6
   19c00:	andeq	sl, r1, r0, lsr #6
   19c04:	andeq	sl, r1, r0, lsr #6
   19c08:	andeq	sl, r1, r0, lsr #6
   19c0c:	andeq	sl, r1, r0, lsr #6
   19c10:	andeq	sl, r1, r0, lsr #6
   19c14:	andeq	sl, r1, r0, lsr #6
   19c18:	andeq	sl, r1, r0, lsr #6
   19c1c:	andeq	sl, r1, r0, lsr #6
   19c20:	andeq	sl, r1, r0, lsr #6
   19c24:	andeq	sl, r1, r0, lsr #6
   19c28:	andeq	sl, r1, r0, lsr #6
   19c2c:	andeq	sl, r1, r0, lsr #6
   19c30:	andeq	sl, r1, r0, lsr #6
   19c34:	andeq	sl, r1, r0, lsr #6
   19c38:	andeq	sl, r1, r0, lsr #6
   19c3c:	andeq	sl, r1, r0, lsr #6
   19c40:	andeq	sl, r1, r0, lsr #6
   19c44:	andeq	sl, r1, r0, lsr #6
   19c48:	andeq	sl, r1, r0, lsr #6
   19c4c:	andeq	r9, r1, r4, ror #27
   19c50:	andeq	sl, r1, r0, lsl #4
   19c54:	andeq	r9, r1, r4, ror #27
   19c58:	andeq	sl, r1, r4, lsl #6
   19c5c:	cmp	r4, #0
   19c60:	moveq	r3, #1
   19c64:	streq	r3, [sp, #28]
   19c68:	beq	1a394 <__assert_fail@plt+0x883c>
   19c6c:	mov	r3, #0
   19c70:	mov	r4, r3
   19c74:	mov	r2, #1
   19c78:	str	r2, [sp, #40]	; 0x28
   19c7c:	str	r3, [sp, #68]	; 0x44
   19c80:	str	r2, [sp, #32]
   19c84:	str	r2, [sp, #52]	; 0x34
   19c88:	ldr	r3, [pc, #2584]	; 1a6a8 <__assert_fail@plt+0x8b50>
   19c8c:	str	r4, [sp, #44]	; 0x2c
   19c90:	str	r4, [sp, #72]	; 0x48
   19c94:	str	r4, [sp, #28]
   19c98:	str	r3, [sp, #60]	; 0x3c
   19c9c:	mov	r8, #2
   19ca0:	b	1998c <__assert_fail@plt+0x7e34>
   19ca4:	cmp	r4, #0
   19ca8:	bne	1af34 <__assert_fail@plt+0x93dc>
   19cac:	cmp	sl, #0
   19cb0:	beq	1acf4 <__assert_fail@plt+0x919c>
   19cb4:	mov	r3, #34	; 0x22
   19cb8:	strb	r3, [fp]
   19cbc:	ldr	r3, [pc, #2528]	; 1a6a4 <__assert_fail@plt+0x8b4c>
   19cc0:	mov	r1, r4
   19cc4:	mov	r2, #1
   19cc8:	str	r4, [sp, #68]	; 0x44
   19ccc:	str	r2, [sp, #40]	; 0x28
   19cd0:	mov	r4, r2
   19cd4:	str	r1, [sp, #44]	; 0x2c
   19cd8:	str	r1, [sp, #72]	; 0x48
   19cdc:	str	r1, [sp, #32]
   19ce0:	str	r2, [sp, #28]
   19ce4:	str	r2, [sp, #52]	; 0x34
   19ce8:	str	r3, [sp, #60]	; 0x3c
   19cec:	b	1998c <__assert_fail@plt+0x7e34>
   19cf0:	mov	r3, #0
   19cf4:	str	r3, [sp, #68]	; 0x44
   19cf8:	str	r3, [sp, #44]	; 0x2c
   19cfc:	str	r3, [sp, #32]
   19d00:	str	r3, [sp, #28]
   19d04:	str	r3, [sp, #60]	; 0x3c
   19d08:	mov	r3, #1
   19d0c:	str	r8, [sp, #72]	; 0x48
   19d10:	str	r8, [sp, #52]	; 0x34
   19d14:	mov	r4, r8
   19d18:	str	r3, [sp, #40]	; 0x28
   19d1c:	b	1998c <__assert_fail@plt+0x7e34>
   19d20:	mov	r3, #1
   19d24:	str	r3, [sp, #40]	; 0x28
   19d28:	str	r3, [sp, #32]
   19d2c:	str	r3, [sp, #28]
   19d30:	str	r3, [sp, #52]	; 0x34
   19d34:	ldr	r3, [pc, #2408]	; 1a6a4 <__assert_fail@plt+0x8b4c>
   19d38:	mov	r2, #0
   19d3c:	mov	r4, r2
   19d40:	str	r2, [sp, #68]	; 0x44
   19d44:	str	r2, [sp, #44]	; 0x2c
   19d48:	str	r2, [sp, #72]	; 0x48
   19d4c:	str	r3, [sp, #60]	; 0x3c
   19d50:	mov	r8, #5
   19d54:	b	1998c <__assert_fail@plt+0x7e34>
   19d58:	mov	r3, #0
   19d5c:	mov	r2, #1
   19d60:	str	r2, [sp, #40]	; 0x28
   19d64:	mov	r4, r3
   19d68:	str	r3, [sp, #68]	; 0x44
   19d6c:	str	r2, [sp, #28]
   19d70:	str	r3, [sp, #44]	; 0x2c
   19d74:	str	r3, [sp, #72]	; 0x48
   19d78:	str	r3, [sp, #32]
   19d7c:	str	r3, [sp, #52]	; 0x34
   19d80:	str	r3, [sp, #60]	; 0x3c
   19d84:	b	1998c <__assert_fail@plt+0x7e34>
   19d88:	mov	r2, #1
   19d8c:	mov	r3, #0
   19d90:	str	r2, [sp, #40]	; 0x28
   19d94:	mov	r4, r3
   19d98:	str	r3, [sp, #68]	; 0x44
   19d9c:	str	r8, [sp, #52]	; 0x34
   19da0:	str	r2, [sp, #32]
   19da4:	b	19c88 <__assert_fail@plt+0x8130>
   19da8:	mov	r3, #1
   19dac:	str	r3, [sp, #40]	; 0x28
   19db0:	str	r3, [sp, #32]
   19db4:	str	r3, [sp, #28]
   19db8:	str	r3, [sp, #52]	; 0x34
   19dbc:	ldr	r3, [pc, #2276]	; 1a6a8 <__assert_fail@plt+0x8b50>
   19dc0:	mov	r2, #0
   19dc4:	mov	r4, r2
   19dc8:	str	r2, [sp, #68]	; 0x44
   19dcc:	str	r2, [sp, #44]	; 0x2c
   19dd0:	str	r2, [sp, #72]	; 0x48
   19dd4:	str	r3, [sp, #60]	; 0x3c
   19dd8:	mov	r8, #2
   19ddc:	b	1998c <__assert_fail@plt+0x7e34>
   19de0:	mov	r7, #0
   19de4:	ldr	r3, [sp, #24]
   19de8:	cmn	r3, #1
   19dec:	beq	1a928 <__assert_fail@plt+0x8dd0>
   19df0:	ldr	r3, [sp, #24]
   19df4:	subs	r3, r3, #1
   19df8:	movne	r3, #1
   19dfc:	cmp	r3, #0
   19e00:	sub	r2, fp, #2
   19e04:	clz	r2, r2
   19e08:	lsr	r2, r2, #5
   19e0c:	bne	1a008 <__assert_fail@plt+0x84b0>
   19e10:	cmp	r9, #0
   19e14:	bne	1a008 <__assert_fail@plt+0x84b0>
   19e18:	ldr	r3, [sp, #32]
   19e1c:	tst	r3, r2
   19e20:	bne	1a128 <__assert_fail@plt+0x85d0>
   19e24:	ldr	r3, [sp, #28]
   19e28:	eor	r3, r3, #1
   19e2c:	orr	r3, r2, r3
   19e30:	ldr	r2, [sp, #32]
   19e34:	eor	r3, r3, #1
   19e38:	orrs	r3, r2, r3
   19e3c:	beq	19e6c <__assert_fail@plt+0x8314>
   19e40:	mov	r3, #0
   19e44:	ldr	r1, [sp, #56]	; 0x38
   19e48:	cmp	r1, #0
   19e4c:	beq	19e6c <__assert_fail@plt+0x8314>
   19e50:	lsr	r2, r5, #5
   19e54:	and	r0, r5, #31
   19e58:	uxtb	r2, r2
   19e5c:	ldr	r1, [r1, r2, lsl #2]
   19e60:	lsr	r2, r1, r0
   19e64:	tst	r2, #1
   19e68:	bne	19e74 <__assert_fail@plt+0x831c>
   19e6c:	cmp	r7, #0
   19e70:	beq	1a0c4 <__assert_fail@plt+0x856c>
   19e74:	sub	r2, fp, #2
   19e78:	clz	r2, r2
   19e7c:	lsr	r2, r2, #5
   19e80:	ldr	r3, [sp, #32]
   19e84:	cmp	r3, #0
   19e88:	bne	1a1b4 <__assert_fail@plt+0x865c>
   19e8c:	ldr	r3, [sp, #44]	; 0x2c
   19e90:	eor	r3, r3, #1
   19e94:	ands	r3, r2, r3
   19e98:	beq	19ed0 <__assert_fail@plt+0x8378>
   19e9c:	cmp	sl, r4
   19ea0:	movhi	r2, #39	; 0x27
   19ea4:	strbhi	r2, [r8, r4]
   19ea8:	add	r2, r4, #1
   19eac:	cmp	r2, sl
   19eb0:	movcc	r1, #36	; 0x24
   19eb4:	strbcc	r1, [r8, r2]
   19eb8:	add	r2, r4, #2
   19ebc:	cmp	r2, sl
   19ec0:	add	r4, r4, #3
   19ec4:	movcc	r1, #39	; 0x27
   19ec8:	strbcc	r1, [r8, r2]
   19ecc:	str	r3, [sp, #44]	; 0x2c
   19ed0:	cmp	r4, sl
   19ed4:	movcc	r3, #92	; 0x5c
   19ed8:	strbcc	r3, [r8, r4]
   19edc:	add	r9, r9, #1
   19ee0:	add	r4, r4, #1
   19ee4:	cmp	r4, sl
   19ee8:	ldr	r3, [sp, #40]	; 0x28
   19eec:	strbcc	r5, [r8, r4]
   19ef0:	cmp	r6, #0
   19ef4:	moveq	r3, #0
   19ef8:	str	r3, [sp, #40]	; 0x28
   19efc:	ldr	r3, [sp, #24]
   19f00:	add	r4, r4, #1
   19f04:	cmn	r3, #1
   19f08:	bne	199a8 <__assert_fail@plt+0x7e50>
   19f0c:	ldr	r3, [sp, #36]	; 0x24
   19f10:	ldrb	r6, [r3, r9]
   19f14:	adds	r6, r6, #0
   19f18:	movne	r6, #1
   19f1c:	cmp	r6, #0
   19f20:	bne	199bc <__assert_fail@plt+0x7e64>
   19f24:	str	fp, [sp, #160]	; 0xa0
   19f28:	mov	fp, r8
   19f2c:	ldr	r8, [sp, #160]	; 0xa0
   19f30:	ldr	r1, [sp, #32]
   19f34:	cmp	r4, #0
   19f38:	sub	r2, r8, #2
   19f3c:	clz	r2, r2
   19f40:	lsr	r2, r2, #5
   19f44:	andeq	r3, r2, r1
   19f48:	movne	r3, #0
   19f4c:	cmp	r3, #0
   19f50:	bne	1b03c <__assert_fail@plt+0x94e4>
   19f54:	eor	r3, r1, #1
   19f58:	ands	r2, r2, r3
   19f5c:	beq	1af78 <__assert_fail@plt+0x9420>
   19f60:	ldr	r3, [sp, #68]	; 0x44
   19f64:	cmp	r3, #0
   19f68:	beq	1af7c <__assert_fail@plt+0x9424>
   19f6c:	ldr	r3, [sp, #40]	; 0x28
   19f70:	cmp	r3, #0
   19f74:	bne	1aff8 <__assert_fail@plt+0x94a0>
   19f78:	ldr	r3, [sp, #72]	; 0x48
   19f7c:	adds	r3, r3, #0
   19f80:	movne	r3, #1
   19f84:	cmp	sl, #0
   19f88:	movne	r3, #0
   19f8c:	cmp	r3, #0
   19f90:	ldreq	r2, [sp, #68]	; 0x44
   19f94:	beq	1af7c <__assert_fail@plt+0x9424>
   19f98:	ldr	sl, [sp, #72]	; 0x48
   19f9c:	str	r3, [sp, #68]	; 0x44
   19fa0:	ldr	r3, [pc, #1792]	; 1a6a8 <__assert_fail@plt+0x8b50>
   19fa4:	mov	r2, #39	; 0x27
   19fa8:	mov	r4, #1
   19fac:	str	r3, [sp, #60]	; 0x3c
   19fb0:	mov	r3, #0
   19fb4:	strb	r2, [fp]
   19fb8:	str	r4, [sp, #52]	; 0x34
   19fbc:	mov	r8, #2
   19fc0:	str	r3, [sp, #32]
   19fc4:	b	1998c <__assert_fail@plt+0x7e34>
   19fc8:	mov	r7, #0
   19fcc:	cmp	fp, #2
   19fd0:	beq	1a908 <__assert_fail@plt+0x8db0>
   19fd4:	ldr	r3, [sp, #52]	; 0x34
   19fd8:	ldr	r2, [sp, #28]
   19fdc:	ldr	r1, [sp, #32]
   19fe0:	cmp	r3, #0
   19fe4:	andne	r2, r2, r1
   19fe8:	moveq	r2, #0
   19fec:	cmp	r2, #0
   19ff0:	moveq	r5, #92	; 0x5c
   19ff4:	moveq	r3, r5
   19ff8:	bne	1a914 <__assert_fail@plt+0x8dbc>
   19ffc:	ldr	r1, [sp, #28]
   1a000:	cmp	r1, #0
   1a004:	bne	1b084 <__assert_fail@plt+0x952c>
   1a008:	mov	r6, #0
   1a00c:	b	19e24 <__assert_fail@plt+0x82cc>
   1a010:	mov	r7, #0
   1a014:	cmp	fp, #2
   1a018:	beq	1a978 <__assert_fail@plt+0x8e20>
   1a01c:	cmp	fp, #5
   1a020:	beq	1a93c <__assert_fail@plt+0x8de4>
   1a024:	sub	r2, fp, #2
   1a028:	mov	r6, #0
   1a02c:	clz	r2, r2
   1a030:	mov	r5, #63	; 0x3f
   1a034:	lsr	r2, r2, #5
   1a038:	b	19e24 <__assert_fail@plt+0x82cc>
   1a03c:	mov	r7, #0
   1a040:	cmp	fp, #2
   1a044:	strne	r6, [sp, #68]	; 0x44
   1a048:	movne	r2, #0
   1a04c:	movne	r5, #39	; 0x27
   1a050:	bne	19e24 <__assert_fail@plt+0x82cc>
   1a054:	ldr	r3, [sp, #32]
   1a058:	cmp	r3, #0
   1a05c:	bne	1ad58 <__assert_fail@plt+0x9200>
   1a060:	cmp	sl, #0
   1a064:	ldr	r3, [sp, #72]	; 0x48
   1a068:	clz	r3, r3
   1a06c:	lsr	r3, r3, #5
   1a070:	moveq	r3, #0
   1a074:	cmp	r3, #0
   1a078:	bne	1ac8c <__assert_fail@plt+0x9134>
   1a07c:	cmp	sl, r4
   1a080:	movhi	r3, #39	; 0x27
   1a084:	strbhi	r3, [r8, r4]
   1a088:	add	r3, r4, #1
   1a08c:	cmp	sl, r3
   1a090:	movhi	r2, #92	; 0x5c
   1a094:	strbhi	r2, [r8, r3]
   1a098:	add	r3, r4, #2
   1a09c:	cmp	sl, r3
   1a0a0:	movhi	r2, #39	; 0x27
   1a0a4:	strbhi	r2, [r8, r3]
   1a0a8:	mov	r3, #0
   1a0ac:	cmp	r7, #0
   1a0b0:	add	r4, r4, #3
   1a0b4:	str	r3, [sp, #44]	; 0x2c
   1a0b8:	str	r6, [sp, #68]	; 0x44
   1a0bc:	mov	r5, #39	; 0x27
   1a0c0:	bne	19e74 <__assert_fail@plt+0x831c>
   1a0c4:	ldr	r2, [sp, #44]	; 0x2c
   1a0c8:	eor	r3, r3, #1
   1a0cc:	and	r3, r3, r2
   1a0d0:	add	r9, r9, #1
   1a0d4:	uxtb	r3, r3
   1a0d8:	cmp	r3, #0
   1a0dc:	beq	19ee4 <__assert_fail@plt+0x838c>
   1a0e0:	cmp	sl, r4
   1a0e4:	movhi	r3, #39	; 0x27
   1a0e8:	strbhi	r3, [r8, r4]
   1a0ec:	add	r3, r4, #1
   1a0f0:	cmp	sl, r3
   1a0f4:	movhi	r2, #39	; 0x27
   1a0f8:	strbhi	r2, [r8, r3]
   1a0fc:	mov	r3, #0
   1a100:	add	r4, r4, #2
   1a104:	str	r3, [sp, #44]	; 0x2c
   1a108:	b	19ee4 <__assert_fail@plt+0x838c>
   1a10c:	mov	r3, #114	; 0x72
   1a110:	ldr	r1, [sp, #32]
   1a114:	sub	r2, fp, #2
   1a118:	clz	r2, r2
   1a11c:	lsr	r2, r2, #5
   1a120:	tst	r2, r1
   1a124:	beq	19ffc <__assert_fail@plt+0x84a4>
   1a128:	mov	fp, r8
   1a12c:	mov	r8, #2
   1a130:	ldr	r3, [sp, #28]
   1a134:	cmp	r3, #0
   1a138:	movne	r8, #4
   1a13c:	ldr	r3, [sp, #164]	; 0xa4
   1a140:	mov	ip, #0
   1a144:	bic	r3, r3, #2
   1a148:	str	r3, [sp, #4]
   1a14c:	ldr	r3, [sp, #76]	; 0x4c
   1a150:	str	r8, [sp]
   1a154:	str	r3, [sp, #16]
   1a158:	ldr	r3, [sp, #80]	; 0x50
   1a15c:	ldr	r2, [sp, #36]	; 0x24
   1a160:	str	r3, [sp, #12]
   1a164:	mov	r1, sl
   1a168:	ldr	r3, [sp, #24]
   1a16c:	mov	r0, fp
   1a170:	str	ip, [sp, #8]
   1a174:	bl	19894 <__assert_fail@plt+0x7d3c>
   1a178:	mov	r4, r0
   1a17c:	ldr	r3, [pc, #1304]	; 1a69c <__assert_fail@plt+0x8b44>
   1a180:	ldr	r2, [sp, #116]	; 0x74
   1a184:	mov	r0, r4
   1a188:	ldr	r3, [r3]
   1a18c:	cmp	r2, r3
   1a190:	bne	1b080 <__assert_fail@plt+0x9528>
   1a194:	add	sp, sp, #124	; 0x7c
   1a198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a19c:	mov	r5, #110	; 0x6e
   1a1a0:	ldr	r3, [sp, #32]
   1a1a4:	mov	r2, #0
   1a1a8:	cmp	r3, #0
   1a1ac:	mov	r6, r2
   1a1b0:	beq	19e8c <__assert_fail@plt+0x8334>
   1a1b4:	str	fp, [sp, #160]	; 0xa0
   1a1b8:	mov	fp, r8
   1a1bc:	ldr	r8, [sp, #160]	; 0xa0
   1a1c0:	mov	r3, r2
   1a1c4:	ldr	r2, [sp, #28]
   1a1c8:	and	r2, r2, r3
   1a1cc:	str	r2, [sp, #28]
   1a1d0:	b	1a130 <__assert_fail@plt+0x85d8>
   1a1d4:	mov	r5, #116	; 0x74
   1a1d8:	b	1a1a0 <__assert_fail@plt+0x8648>
   1a1dc:	mov	r5, #102	; 0x66
   1a1e0:	ldr	r3, [sp, #32]
   1a1e4:	cmp	r3, #0
   1a1e8:	bne	1ad94 <__assert_fail@plt+0x923c>
   1a1ec:	mov	r6, #0
   1a1f0:	b	19ed0 <__assert_fail@plt+0x8378>
   1a1f4:	mov	r5, #118	; 0x76
   1a1f8:	b	1a1e0 <__assert_fail@plt+0x8688>
   1a1fc:	mov	r7, #0
   1a200:	mov	r6, #0
   1a204:	b	19e40 <__assert_fail@plt+0x82e8>
   1a208:	ldr	r3, [sp, #32]
   1a20c:	cmp	r3, #0
   1a210:	bne	1afd8 <__assert_fail@plt+0x9480>
   1a214:	mov	r7, r3
   1a218:	ldr	r3, [sp, #44]	; 0x2c
   1a21c:	sub	r2, fp, #2
   1a220:	eor	r3, r3, #1
   1a224:	clz	r2, r2
   1a228:	lsr	r2, r2, #5
   1a22c:	ands	r3, r2, r3
   1a230:	beq	1ac78 <__assert_fail@plt+0x9120>
   1a234:	cmp	sl, r4
   1a238:	movhi	r1, #39	; 0x27
   1a23c:	strbhi	r1, [r8, r4]
   1a240:	add	r1, r4, #1
   1a244:	cmp	sl, r1
   1a248:	movhi	r0, #36	; 0x24
   1a24c:	strbhi	r0, [r8, r1]
   1a250:	add	r1, r4, #2
   1a254:	cmp	sl, r1
   1a258:	movhi	r0, #39	; 0x27
   1a25c:	strbhi	r0, [r8, r1]
   1a260:	add	r1, r4, #3
   1a264:	cmp	sl, r1
   1a268:	bls	1acd8 <__assert_fail@plt+0x9180>
   1a26c:	mov	r4, r1
   1a270:	mov	r1, #92	; 0x5c
   1a274:	strb	r1, [r8, r4]
   1a278:	mov	r1, r4
   1a27c:	str	r3, [sp, #44]	; 0x2c
   1a280:	cmp	fp, #2
   1a284:	add	r4, r4, #1
   1a288:	beq	1ad20 <__assert_fail@plt+0x91c8>
   1a28c:	ldr	r0, [sp, #24]
   1a290:	add	r3, r9, #1
   1a294:	cmp	r3, r0
   1a298:	bcs	1a2b0 <__assert_fail@plt+0x8758>
   1a29c:	ldr	r0, [sp, #36]	; 0x24
   1a2a0:	ldrb	r3, [r0, r3]
   1a2a4:	sub	r3, r3, #48	; 0x30
   1a2a8:	cmp	r3, #9
   1a2ac:	bls	1ad30 <__assert_fail@plt+0x91d8>
   1a2b0:	mov	r5, #48	; 0x30
   1a2b4:	ldr	r3, [sp, #28]
   1a2b8:	eor	r3, r3, #1
   1a2bc:	orrs	r2, r2, r3
   1a2c0:	mov	r3, r6
   1a2c4:	moveq	r6, r2
   1a2c8:	beq	19e44 <__assert_fail@plt+0x82ec>
   1a2cc:	mov	r6, #0
   1a2d0:	b	19e6c <__assert_fail@plt+0x8314>
   1a2d4:	mov	r2, #0
   1a2d8:	mov	r6, r2
   1a2dc:	mov	r5, #98	; 0x62
   1a2e0:	b	19e8c <__assert_fail@plt+0x8334>
   1a2e4:	mov	r5, #97	; 0x61
   1a2e8:	b	1a1ec <__assert_fail@plt+0x8694>
   1a2ec:	mov	r3, r7
   1a2f0:	mov	r6, r7
   1a2f4:	mov	r2, #0
   1a2f8:	mov	r7, r3
   1a2fc:	mov	r5, #32
   1a300:	b	19e24 <__assert_fail@plt+0x82cc>
   1a304:	cmp	r9, #0
   1a308:	mov	r3, r7
   1a30c:	bne	1a8d4 <__assert_fail@plt+0x8d7c>
   1a310:	mov	r6, r7
   1a314:	mov	r2, r9
   1a318:	mov	r7, r3
   1a31c:	b	19e24 <__assert_fail@plt+0x82cc>
   1a320:	mov	r6, r7
   1a324:	b	19e40 <__assert_fail@plt+0x82e8>
   1a328:	mov	r7, #0
   1a32c:	ldr	r3, [sp, #64]	; 0x40
   1a330:	cmp	r3, #1
   1a334:	bne	1a990 <__assert_fail@plt+0x8e38>
   1a338:	bl	11924 <__ctype_b_loc@plt>
   1a33c:	ldr	r2, [sp, #64]	; 0x40
   1a340:	sxth	r3, r5
   1a344:	mov	ip, r2
   1a348:	lsl	r3, r3, #1
   1a34c:	ldr	r2, [r0]
   1a350:	ldrh	r3, [r2, r3]
   1a354:	and	r3, r3, #16384	; 0x4000
   1a358:	cmp	r3, #0
   1a35c:	ldr	r3, [sp, #28]
   1a360:	movne	r6, #1
   1a364:	moveq	r6, #0
   1a368:	movne	r2, #0
   1a36c:	andeq	r2, r3, #1
   1a370:	cmp	r2, #0
   1a374:	bne	1aca0 <__assert_fail@plt+0x9148>
   1a378:	sub	r2, fp, #2
   1a37c:	clz	r2, r2
   1a380:	lsr	r2, r2, #5
   1a384:	b	19e24 <__assert_fail@plt+0x82cc>
   1a388:	cmp	r4, #0
   1a38c:	bne	1b04c <__assert_fail@plt+0x94f4>
   1a390:	str	r4, [sp, #28]
   1a394:	cmp	sl, #0
   1a398:	bne	1b090 <__assert_fail@plt+0x9538>
   1a39c:	ldr	r3, [pc, #772]	; 1a6a8 <__assert_fail@plt+0x8b50>
   1a3a0:	mov	r4, #1
   1a3a4:	str	r4, [sp, #40]	; 0x28
   1a3a8:	str	r3, [sp, #60]	; 0x3c
   1a3ac:	str	r4, [sp, #52]	; 0x34
   1a3b0:	str	sl, [sp, #72]	; 0x48
   1a3b4:	str	sl, [sp, #68]	; 0x44
   1a3b8:	str	sl, [sp, #44]	; 0x2c
   1a3bc:	str	sl, [sp, #32]
   1a3c0:	mov	r8, #2
   1a3c4:	b	1998c <__assert_fail@plt+0x7e34>
   1a3c8:	ldr	r3, [sp, #36]	; 0x24
   1a3cc:	ldrb	r5, [r3, r9]
   1a3d0:	cmp	r5, #126	; 0x7e
   1a3d4:	ldrls	pc, [pc, r5, lsl #2]
   1a3d8:	b	1a32c <__assert_fail@plt+0x87d4>
   1a3dc:	andeq	sl, r1, r0, lsl r6
   1a3e0:	andeq	sl, r1, ip, lsr #6
   1a3e4:	andeq	sl, r1, ip, lsr #6
   1a3e8:	andeq	sl, r1, ip, lsr #6
   1a3ec:	andeq	sl, r1, ip, lsr #6
   1a3f0:	andeq	sl, r1, ip, lsr #6
   1a3f4:	andeq	sl, r1, ip, lsr #6
   1a3f8:	strdeq	sl, [r1], -ip
   1a3fc:	andeq	sl, r1, r8, ror #11
   1a400:	andeq	sl, r1, r0, ror #11
   1a404:	ldrdeq	sl, [r1], -r8
   1a408:	andeq	sl, r1, r8, lsl #13
   1a40c:	andeq	sl, r1, r4, ror r6
   1a410:	andeq	sl, r1, ip, lsl #2
   1a414:	andeq	sl, r1, ip, lsr #6
   1a418:	andeq	sl, r1, ip, lsr #6
   1a41c:	andeq	sl, r1, ip, lsr #6
   1a420:	andeq	sl, r1, ip, lsr #6
   1a424:	andeq	sl, r1, ip, lsr #6
   1a428:	andeq	sl, r1, ip, lsr #6
   1a42c:	andeq	sl, r1, ip, lsr #6
   1a430:	andeq	sl, r1, ip, lsr #6
   1a434:	andeq	sl, r1, ip, lsr #6
   1a438:	andeq	sl, r1, ip, lsr #6
   1a43c:	andeq	sl, r1, ip, lsr #6
   1a440:	andeq	sl, r1, ip, lsr #6
   1a444:	andeq	sl, r1, ip, lsr #6
   1a448:	andeq	sl, r1, ip, lsr #6
   1a44c:	andeq	sl, r1, ip, lsr #6
   1a450:	andeq	sl, r1, ip, lsr #6
   1a454:	andeq	sl, r1, ip, lsr #6
   1a458:	andeq	sl, r1, ip, lsr #6
   1a45c:	andeq	sl, r1, r4, ror #12
   1a460:	andeq	sl, r1, r0, asr r6
   1a464:	andeq	sl, r1, r0, asr r6
   1a468:	andeq	sl, r1, r0, asr #12
   1a46c:	andeq	sl, r1, r0, asr r6
   1a470:	andeq	sl, r1, r8, ror r3
   1a474:	andeq	sl, r1, r0, asr r6
   1a478:	andeq	sl, r1, r0, asr #32
   1a47c:	andeq	sl, r1, r0, asr r6
   1a480:	andeq	sl, r1, r0, asr r6
   1a484:	andeq	sl, r1, r0, asr r6
   1a488:	andeq	sl, r1, r8, ror r3
   1a48c:	andeq	sl, r1, r8, ror r3
   1a490:	andeq	sl, r1, r8, ror r3
   1a494:	andeq	sl, r1, r8, ror r3
   1a498:	andeq	sl, r1, r8, ror r3
   1a49c:	andeq	sl, r1, r8, ror r3
   1a4a0:	andeq	sl, r1, r8, ror r3
   1a4a4:	andeq	sl, r1, r8, ror r3
   1a4a8:	andeq	sl, r1, r8, ror r3
   1a4ac:	andeq	sl, r1, r8, ror r3
   1a4b0:	andeq	sl, r1, r8, ror r3
   1a4b4:	andeq	sl, r1, r8, ror r3
   1a4b8:	andeq	sl, r1, r8, ror r3
   1a4bc:	andeq	sl, r1, r8, ror r3
   1a4c0:	andeq	sl, r1, r8, ror r3
   1a4c4:	andeq	sl, r1, r8, ror r3
   1a4c8:	andeq	sl, r1, r0, asr r6
   1a4cc:	andeq	sl, r1, r0, asr r6
   1a4d0:	andeq	sl, r1, r0, asr r6
   1a4d4:	andeq	sl, r1, r0, asr r6
   1a4d8:	andeq	sl, r1, r4, lsl r0
   1a4dc:	andeq	sl, r1, ip, lsr #6
   1a4e0:	andeq	sl, r1, r8, ror r3
   1a4e4:	andeq	sl, r1, r8, ror r3
   1a4e8:	andeq	sl, r1, r8, ror r3
   1a4ec:	andeq	sl, r1, r8, ror r3
   1a4f0:	andeq	sl, r1, r8, ror r3
   1a4f4:	andeq	sl, r1, r8, ror r3
   1a4f8:	andeq	sl, r1, r8, ror r3
   1a4fc:	andeq	sl, r1, r8, ror r3
   1a500:	andeq	sl, r1, r8, ror r3
   1a504:	andeq	sl, r1, r8, ror r3
   1a508:	andeq	sl, r1, r8, ror r3
   1a50c:	andeq	sl, r1, r8, ror r3
   1a510:	andeq	sl, r1, r8, ror r3
   1a514:	andeq	sl, r1, r8, ror r3
   1a518:	andeq	sl, r1, r8, ror r3
   1a51c:	andeq	sl, r1, r8, ror r3
   1a520:	andeq	sl, r1, r8, ror r3
   1a524:	andeq	sl, r1, r8, ror r3
   1a528:	andeq	sl, r1, r8, ror r3
   1a52c:	andeq	sl, r1, r8, ror r3
   1a530:	andeq	sl, r1, r8, ror r3
   1a534:	andeq	sl, r1, r8, ror r3
   1a538:	andeq	sl, r1, r8, ror r3
   1a53c:	andeq	sl, r1, r8, ror r3
   1a540:	andeq	sl, r1, r8, ror r3
   1a544:	andeq	sl, r1, r8, ror r3
   1a548:	andeq	sl, r1, r0, asr r6
   1a54c:	andeq	r9, r1, ip, asr #31
   1a550:	andeq	sl, r1, r8, ror r3
   1a554:	andeq	sl, r1, r0, asr r6
   1a558:	andeq	sl, r1, r8, ror r3
   1a55c:	andeq	sl, r1, r0, asr r6
   1a560:	andeq	sl, r1, r8, ror r3
   1a564:	andeq	sl, r1, r8, ror r3
   1a568:	andeq	sl, r1, r8, ror r3
   1a56c:	andeq	sl, r1, r8, ror r3
   1a570:	andeq	sl, r1, r8, ror r3
   1a574:	andeq	sl, r1, r8, ror r3
   1a578:	andeq	sl, r1, r8, ror r3
   1a57c:	andeq	sl, r1, r8, ror r3
   1a580:	andeq	sl, r1, r8, ror r3
   1a584:	andeq	sl, r1, r8, ror r3
   1a588:	andeq	sl, r1, r8, ror r3
   1a58c:	andeq	sl, r1, r8, ror r3
   1a590:	andeq	sl, r1, r8, ror r3
   1a594:	andeq	sl, r1, r8, ror r3
   1a598:	andeq	sl, r1, r8, ror r3
   1a59c:	andeq	sl, r1, r8, ror r3
   1a5a0:	andeq	sl, r1, r8, ror r3
   1a5a4:	andeq	sl, r1, r8, ror r3
   1a5a8:	andeq	sl, r1, r8, ror r3
   1a5ac:	andeq	sl, r1, r8, ror r3
   1a5b0:	andeq	sl, r1, r8, ror r3
   1a5b4:	andeq	sl, r1, r8, ror r3
   1a5b8:	andeq	sl, r1, r8, ror r3
   1a5bc:	andeq	sl, r1, r8, ror r3
   1a5c0:	andeq	sl, r1, r8, ror r3
   1a5c4:	andeq	sl, r1, r8, ror r3
   1a5c8:	andeq	r9, r1, r4, ror #27
   1a5cc:	andeq	sl, r1, r0, asr r6
   1a5d0:	andeq	r9, r1, r4, ror #27
   1a5d4:	andeq	sl, r1, r0, asr #12
   1a5d8:	mov	r3, #110	; 0x6e
   1a5dc:	b	1a110 <__assert_fail@plt+0x85b8>
   1a5e0:	mov	r3, #116	; 0x74
   1a5e4:	b	1a110 <__assert_fail@plt+0x85b8>
   1a5e8:	sub	r2, fp, #2
   1a5ec:	mov	r3, #98	; 0x62
   1a5f0:	clz	r2, r2
   1a5f4:	lsr	r2, r2, #5
   1a5f8:	b	19ffc <__assert_fail@plt+0x84a4>
   1a5fc:	sub	r2, fp, #2
   1a600:	mov	r3, #97	; 0x61
   1a604:	clz	r2, r2
   1a608:	lsr	r2, r2, #5
   1a60c:	b	19ffc <__assert_fail@plt+0x84a4>
   1a610:	ldr	r3, [sp, #28]
   1a614:	cmp	r3, #0
   1a618:	bne	1a208 <__assert_fail@plt+0x86b0>
   1a61c:	ldr	r3, [sp, #164]	; 0xa4
   1a620:	tst	r3, #1
   1a624:	bne	1ac98 <__assert_fail@plt+0x9140>
   1a628:	ldr	r6, [sp, #28]
   1a62c:	sub	r2, fp, #2
   1a630:	mov	r7, r6
   1a634:	clz	r2, r2
   1a638:	lsr	r2, r2, #5
   1a63c:	b	19e24 <__assert_fail@plt+0x82cc>
   1a640:	sub	r2, fp, #2
   1a644:	clz	r2, r2
   1a648:	lsr	r2, r2, #5
   1a64c:	b	19e10 <__assert_fail@plt+0x82b8>
   1a650:	sub	r2, fp, #2
   1a654:	mov	r6, #0
   1a658:	clz	r2, r2
   1a65c:	lsr	r2, r2, #5
   1a660:	b	19e18 <__assert_fail@plt+0x82c0>
   1a664:	sub	r2, fp, #2
   1a668:	clz	r2, r2
   1a66c:	lsr	r2, r2, #5
   1a670:	b	19e18 <__assert_fail@plt+0x82c0>
   1a674:	sub	r2, fp, #2
   1a678:	mov	r3, #102	; 0x66
   1a67c:	clz	r2, r2
   1a680:	lsr	r2, r2, #5
   1a684:	b	19ffc <__assert_fail@plt+0x84a4>
   1a688:	sub	r2, fp, #2
   1a68c:	mov	r3, #118	; 0x76
   1a690:	clz	r2, r2
   1a694:	lsr	r2, r2, #5
   1a698:	b	19ffc <__assert_fail@plt+0x84a4>
   1a69c:	andeq	r4, r3, r8, lsl #30
   1a6a0:	andeq	r3, r2, r0, lsl sl
   1a6a4:	strdeq	r3, [r2], -ip
   1a6a8:	andeq	r3, r2, ip, lsl #3
   1a6ac:	ldr	r3, [sp, #48]	; 0x30
   1a6b0:	ldrb	r5, [r3]
   1a6b4:	cmp	r5, #126	; 0x7e
   1a6b8:	ldrls	pc, [pc, r5, lsl #2]
   1a6bc:	b	1a328 <__assert_fail@plt+0x87d0>
   1a6c0:	andeq	sl, r1, r8, lsl #4
   1a6c4:	andeq	sl, r1, r8, lsr #6
   1a6c8:	andeq	sl, r1, r8, lsr #6
   1a6cc:	andeq	sl, r1, r8, lsr #6
   1a6d0:	andeq	sl, r1, r8, lsr #6
   1a6d4:	andeq	sl, r1, r8, lsr #6
   1a6d8:	andeq	sl, r1, r8, lsr #6
   1a6dc:	andeq	sl, r1, r0, lsl #18
   1a6e0:	strdeq	sl, [r1], -r8
   1a6e4:	ldrdeq	sl, [r1], -r4
   1a6e8:	muleq	r1, ip, r1
   1a6ec:	strdeq	sl, [r1], -r4
   1a6f0:	ldrdeq	sl, [r1], -ip
   1a6f4:	andeq	sl, r1, ip, ror #17
   1a6f8:	andeq	sl, r1, r8, lsr #6
   1a6fc:	andeq	sl, r1, r8, lsr #6
   1a700:	andeq	sl, r1, r8, lsr #6
   1a704:	andeq	sl, r1, r8, lsr #6
   1a708:	andeq	sl, r1, r8, lsr #6
   1a70c:	andeq	sl, r1, r8, lsr #6
   1a710:	andeq	sl, r1, r8, lsr #6
   1a714:	andeq	sl, r1, r8, lsr #6
   1a718:	andeq	sl, r1, r8, lsr #6
   1a71c:	andeq	sl, r1, r8, lsr #6
   1a720:	andeq	sl, r1, r8, lsr #6
   1a724:	andeq	sl, r1, r8, lsr #6
   1a728:	andeq	sl, r1, r8, lsr #6
   1a72c:	andeq	sl, r1, r8, lsr #6
   1a730:	andeq	sl, r1, r8, lsr #6
   1a734:	andeq	sl, r1, r8, lsr #6
   1a738:	andeq	sl, r1, r8, lsr #6
   1a73c:	andeq	sl, r1, r8, lsr #6
   1a740:	andeq	sl, r1, r4, ror #17
   1a744:	strdeq	sl, [r1], -ip
   1a748:	strdeq	sl, [r1], -ip
   1a74c:	andeq	sl, r1, r8, asr #17
   1a750:	strdeq	sl, [r1], -ip
   1a754:			; <UNDEFINED> instruction: 0x0001a8bc
   1a758:	strdeq	sl, [r1], -ip
   1a75c:	andeq	sl, r1, ip, lsr r0
   1a760:	strdeq	sl, [r1], -ip
   1a764:	strdeq	sl, [r1], -ip
   1a768:	strdeq	sl, [r1], -ip
   1a76c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a770:			; <UNDEFINED> instruction: 0x0001a8bc
   1a774:			; <UNDEFINED> instruction: 0x0001a8bc
   1a778:			; <UNDEFINED> instruction: 0x0001a8bc
   1a77c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a780:			; <UNDEFINED> instruction: 0x0001a8bc
   1a784:			; <UNDEFINED> instruction: 0x0001a8bc
   1a788:			; <UNDEFINED> instruction: 0x0001a8bc
   1a78c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a790:			; <UNDEFINED> instruction: 0x0001a8bc
   1a794:			; <UNDEFINED> instruction: 0x0001a8bc
   1a798:			; <UNDEFINED> instruction: 0x0001a8bc
   1a79c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7a0:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7a4:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7a8:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7ac:	strdeq	sl, [r1], -ip
   1a7b0:	strdeq	sl, [r1], -ip
   1a7b4:	strdeq	sl, [r1], -ip
   1a7b8:	strdeq	sl, [r1], -ip
   1a7bc:	andeq	sl, r1, r0, lsl r0
   1a7c0:	andeq	sl, r1, r8, lsr #6
   1a7c4:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7c8:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7cc:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7d0:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7d4:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7d8:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7dc:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7e0:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7e4:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7e8:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7ec:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7f0:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7f4:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7f8:			; <UNDEFINED> instruction: 0x0001a8bc
   1a7fc:			; <UNDEFINED> instruction: 0x0001a8bc
   1a800:			; <UNDEFINED> instruction: 0x0001a8bc
   1a804:			; <UNDEFINED> instruction: 0x0001a8bc
   1a808:			; <UNDEFINED> instruction: 0x0001a8bc
   1a80c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a810:			; <UNDEFINED> instruction: 0x0001a8bc
   1a814:			; <UNDEFINED> instruction: 0x0001a8bc
   1a818:			; <UNDEFINED> instruction: 0x0001a8bc
   1a81c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a820:			; <UNDEFINED> instruction: 0x0001a8bc
   1a824:			; <UNDEFINED> instruction: 0x0001a8bc
   1a828:			; <UNDEFINED> instruction: 0x0001a8bc
   1a82c:	strdeq	sl, [r1], -ip
   1a830:	andeq	r9, r1, r8, asr #31
   1a834:			; <UNDEFINED> instruction: 0x0001a8bc
   1a838:	strdeq	sl, [r1], -ip
   1a83c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a840:	strdeq	sl, [r1], -ip
   1a844:			; <UNDEFINED> instruction: 0x0001a8bc
   1a848:			; <UNDEFINED> instruction: 0x0001a8bc
   1a84c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a850:			; <UNDEFINED> instruction: 0x0001a8bc
   1a854:			; <UNDEFINED> instruction: 0x0001a8bc
   1a858:			; <UNDEFINED> instruction: 0x0001a8bc
   1a85c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a860:			; <UNDEFINED> instruction: 0x0001a8bc
   1a864:			; <UNDEFINED> instruction: 0x0001a8bc
   1a868:			; <UNDEFINED> instruction: 0x0001a8bc
   1a86c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a870:			; <UNDEFINED> instruction: 0x0001a8bc
   1a874:			; <UNDEFINED> instruction: 0x0001a8bc
   1a878:			; <UNDEFINED> instruction: 0x0001a8bc
   1a87c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a880:			; <UNDEFINED> instruction: 0x0001a8bc
   1a884:			; <UNDEFINED> instruction: 0x0001a8bc
   1a888:			; <UNDEFINED> instruction: 0x0001a8bc
   1a88c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a890:			; <UNDEFINED> instruction: 0x0001a8bc
   1a894:			; <UNDEFINED> instruction: 0x0001a8bc
   1a898:			; <UNDEFINED> instruction: 0x0001a8bc
   1a89c:			; <UNDEFINED> instruction: 0x0001a8bc
   1a8a0:			; <UNDEFINED> instruction: 0x0001a8bc
   1a8a4:			; <UNDEFINED> instruction: 0x0001a8bc
   1a8a8:			; <UNDEFINED> instruction: 0x0001a8bc
   1a8ac:	andeq	r9, r1, r0, ror #27
   1a8b0:	strdeq	sl, [r1], -ip
   1a8b4:	andeq	r9, r1, r0, ror #27
   1a8b8:	andeq	sl, r1, r8, asr #17
   1a8bc:	mov	r6, r7
   1a8c0:	mov	r7, #0
   1a8c4:	b	19e40 <__assert_fail@plt+0x82e8>
   1a8c8:	cmp	r9, #0
   1a8cc:	mov	r3, #0
   1a8d0:	beq	1a310 <__assert_fail@plt+0x87b8>
   1a8d4:	mov	r6, #0
   1a8d8:	mov	r7, r3
   1a8dc:	mov	r3, r6
   1a8e0:	b	19e44 <__assert_fail@plt+0x82ec>
   1a8e4:	mov	r3, #0
   1a8e8:	b	1a2f0 <__assert_fail@plt+0x8798>
   1a8ec:	mov	r7, #0
   1a8f0:	mov	r3, #114	; 0x72
   1a8f4:	b	1a110 <__assert_fail@plt+0x85b8>
   1a8f8:	mov	r5, #98	; 0x62
   1a8fc:	b	1a1a0 <__assert_fail@plt+0x8648>
   1a900:	mov	r5, #97	; 0x61
   1a904:	b	1a1e0 <__assert_fail@plt+0x8688>
   1a908:	ldr	r3, [sp, #32]
   1a90c:	cmp	r3, #0
   1a910:	bne	1ad58 <__assert_fail@plt+0x9200>
   1a914:	add	r9, r9, #1
   1a918:	ldr	r3, [sp, #44]	; 0x2c
   1a91c:	mov	r6, #0
   1a920:	mov	r5, #92	; 0x5c
   1a924:	b	1a0d8 <__assert_fail@plt+0x8580>
   1a928:	ldr	r3, [sp, #36]	; 0x24
   1a92c:	ldrb	r3, [r3, #1]
   1a930:	adds	r3, r3, #0
   1a934:	movne	r3, #1
   1a938:	b	19dfc <__assert_fail@plt+0x82a4>
   1a93c:	ldr	r3, [sp, #164]	; 0xa4
   1a940:	ands	r3, r3, #4
   1a944:	beq	1a968 <__assert_fail@plt+0x8e10>
   1a948:	ldr	r2, [sp, #24]
   1a94c:	add	r3, r9, #2
   1a950:	cmp	r3, r2
   1a954:	bcs	1a968 <__assert_fail@plt+0x8e10>
   1a958:	ldr	r2, [sp, #48]	; 0x30
   1a95c:	ldrb	r5, [r2, #1]
   1a960:	cmp	r5, #63	; 0x3f
   1a964:	beq	1adcc <__assert_fail@plt+0x9274>
   1a968:	mov	r2, #0
   1a96c:	mov	r6, r2
   1a970:	mov	r5, #63	; 0x3f
   1a974:	b	19e24 <__assert_fail@plt+0x82cc>
   1a978:	ldr	r3, [sp, #32]
   1a97c:	cmp	r3, #0
   1a980:	bne	1ad58 <__assert_fail@plt+0x9200>
   1a984:	mov	r6, r3
   1a988:	mov	r5, #63	; 0x3f
   1a98c:	b	19e6c <__assert_fail@plt+0x8314>
   1a990:	ldr	r3, [sp, #24]
   1a994:	cmn	r3, #1
   1a998:	mov	r3, #0
   1a99c:	str	r3, [sp, #108]	; 0x6c
   1a9a0:	str	r3, [sp, #112]	; 0x70
   1a9a4:	bne	1a9b4 <__assert_fail@plt+0x8e5c>
   1a9a8:	ldr	r0, [sp, #36]	; 0x24
   1a9ac:	bl	11954 <strlen@plt>
   1a9b0:	str	r0, [sp, #24]
   1a9b4:	mov	r3, #0
   1a9b8:	str	sl, [sp, #88]	; 0x58
   1a9bc:	ldr	sl, [sp, #36]	; 0x24
   1a9c0:	str	r5, [sp, #92]	; 0x5c
   1a9c4:	mov	r5, r3
   1a9c8:	str	r7, [sp, #96]	; 0x60
   1a9cc:	str	r4, [sp, #100]	; 0x64
   1a9d0:	str	r8, [sp, #84]	; 0x54
   1a9d4:	ldr	r3, [sp, #24]
   1a9d8:	add	r4, r9, r5
   1a9dc:	add	r7, sl, r4
   1a9e0:	sub	r2, r3, r4
   1a9e4:	mov	r1, r7
   1a9e8:	add	r3, sp, #108	; 0x6c
   1a9ec:	add	r0, sp, #104	; 0x68
   1a9f0:	bl	201d8 <fts_children@@Base+0x14c>
   1a9f4:	subs	r8, r0, #0
   1a9f8:	beq	1aa48 <__assert_fail@plt+0x8ef0>
   1a9fc:	cmn	r8, #1
   1aa00:	beq	1ada8 <__assert_fail@plt+0x9250>
   1aa04:	cmn	r8, #2
   1aa08:	beq	1aec8 <__assert_fail@plt+0x9370>
   1aa0c:	ldr	r3, [sp, #32]
   1aa10:	cmp	fp, #2
   1aa14:	movne	r3, #0
   1aa18:	andeq	r3, r3, #1
   1aa1c:	cmp	r3, #0
   1aa20:	bne	1aba8 <__assert_fail@plt+0x9050>
   1aa24:	ldr	r0, [sp, #104]	; 0x68
   1aa28:	bl	117ec <iswprint@plt>
   1aa2c:	add	r5, r5, r8
   1aa30:	cmp	r0, #0
   1aa34:	add	r0, sp, #108	; 0x6c
   1aa38:	moveq	r6, #0
   1aa3c:	bl	1175c <mbsinit@plt>
   1aa40:	cmp	r0, #0
   1aa44:	beq	1a9d4 <__assert_fail@plt+0x8e7c>
   1aa48:	ldr	r3, [sp, #28]
   1aa4c:	mov	ip, r5
   1aa50:	eor	r2, r6, #1
   1aa54:	ldr	r5, [sp, #92]	; 0x5c
   1aa58:	ldr	r7, [sp, #96]	; 0x60
   1aa5c:	ldr	r4, [sp, #100]	; 0x64
   1aa60:	ldr	r8, [sp, #84]	; 0x54
   1aa64:	ldr	sl, [sp, #88]	; 0x58
   1aa68:	and	r2, r2, r3
   1aa6c:	cmp	ip, #1
   1aa70:	bls	1a370 <__assert_fail@plt+0x8818>
   1aa74:	add	r1, ip, r9
   1aa78:	ldr	lr, [sp, #48]	; 0x30
   1aa7c:	mov	r0, #0
   1aa80:	str	r6, [sp, #48]	; 0x30
   1aa84:	mov	ip, #39	; 0x27
   1aa88:	ldr	r6, [sp, #44]	; 0x2c
   1aa8c:	b	1ab44 <__assert_fail@plt+0x8fec>
   1aa90:	ldr	r0, [sp, #32]
   1aa94:	sub	r3, fp, #2
   1aa98:	cmp	r0, #0
   1aa9c:	clz	r3, r3
   1aaa0:	lsr	r3, r3, #5
   1aaa4:	bne	1acac <__assert_fail@plt+0x9154>
   1aaa8:	eor	r0, r6, #1
   1aaac:	ands	r3, r3, r0
   1aab0:	beq	1aae0 <__assert_fail@plt+0x8f88>
   1aab4:	add	r0, r4, #1
   1aab8:	cmp	sl, r4
   1aabc:	strbhi	ip, [r8, r4]
   1aac0:	cmp	sl, r0
   1aac4:	movhi	r6, #36	; 0x24
   1aac8:	strbhi	r6, [r8, r0]
   1aacc:	add	r0, r4, #2
   1aad0:	mov	r6, r3
   1aad4:	add	r4, r4, #3
   1aad8:	cmp	sl, r0
   1aadc:	strbhi	ip, [r8, r0]
   1aae0:	cmp	sl, r4
   1aae4:	movhi	r3, #92	; 0x5c
   1aae8:	strbhi	r3, [r8, r4]
   1aaec:	add	r3, r4, #1
   1aaf0:	cmp	sl, r3
   1aaf4:	lsrhi	r0, r5, #6
   1aaf8:	addhi	r0, r0, #48	; 0x30
   1aafc:	strbhi	r0, [r8, r3]
   1ab00:	add	r0, r4, #2
   1ab04:	cmp	sl, r0
   1ab08:	lsrhi	r3, r5, #3
   1ab0c:	andhi	r3, r3, #7
   1ab10:	addhi	r3, r3, #48	; 0x30
   1ab14:	add	r9, r9, #1
   1ab18:	strbhi	r3, [r8, r0]
   1ab1c:	and	r5, r5, #7
   1ab20:	cmp	r9, r1
   1ab24:	add	r5, r5, #48	; 0x30
   1ab28:	add	r4, r4, #3
   1ab2c:	bcs	1accc <__assert_fail@plt+0x9174>
   1ab30:	mov	r0, r2
   1ab34:	cmp	sl, r4
   1ab38:	strbhi	r5, [r8, r4]
   1ab3c:	ldrb	r5, [lr, #1]!
   1ab40:	add	r4, r4, #1
   1ab44:	cmp	r2, #0
   1ab48:	bne	1aa90 <__assert_fail@plt+0x8f38>
   1ab4c:	eor	r3, r0, #1
   1ab50:	and	r3, r3, r6
   1ab54:	cmp	r7, #0
   1ab58:	uxtb	r3, r3
   1ab5c:	beq	1ab70 <__assert_fail@plt+0x9018>
   1ab60:	cmp	sl, r4
   1ab64:	movhi	r7, #92	; 0x5c
   1ab68:	strbhi	r7, [r8, r4]
   1ab6c:	add	r4, r4, #1
   1ab70:	add	r9, r9, #1
   1ab74:	cmp	r9, r1
   1ab78:	bcs	1acc0 <__assert_fail@plt+0x9168>
   1ab7c:	cmp	r3, #0
   1ab80:	beq	1acec <__assert_fail@plt+0x9194>
   1ab84:	cmp	sl, r4
   1ab88:	add	r3, r4, #1
   1ab8c:	strbhi	ip, [r8, r4]
   1ab90:	mov	r7, #0
   1ab94:	cmp	sl, r3
   1ab98:	strbhi	ip, [r8, r3]
   1ab9c:	add	r4, r4, #2
   1aba0:	mov	r6, r7
   1aba4:	b	1ab34 <__assert_fail@plt+0x8fdc>
   1aba8:	cmp	r8, #1
   1abac:	beq	1aa24 <__assert_fail@plt+0x8ecc>
   1abb0:	add	r1, r4, #1
   1abb4:	add	r3, sl, r8
   1abb8:	add	r1, sl, r1
   1abbc:	add	r4, r3, r4
   1abc0:	ldrb	r3, [r1], #1
   1abc4:	sub	r3, r3, #91	; 0x5b
   1abc8:	cmp	r3, #33	; 0x21
   1abcc:	ldrls	pc, [pc, r3, lsl #2]
   1abd0:	b	1ac5c <__assert_fail@plt+0x9104>
   1abd4:	andeq	sl, r1, r8, ror #24
   1abd8:	andeq	sl, r1, r8, ror #24
   1abdc:	andeq	sl, r1, ip, asr ip
   1abe0:	andeq	sl, r1, r8, ror #24
   1abe4:	andeq	sl, r1, ip, asr ip
   1abe8:	andeq	sl, r1, r8, ror #24
   1abec:	andeq	sl, r1, ip, asr ip
   1abf0:	andeq	sl, r1, ip, asr ip
   1abf4:	andeq	sl, r1, ip, asr ip
   1abf8:	andeq	sl, r1, ip, asr ip
   1abfc:	andeq	sl, r1, ip, asr ip
   1ac00:	andeq	sl, r1, ip, asr ip
   1ac04:	andeq	sl, r1, ip, asr ip
   1ac08:	andeq	sl, r1, ip, asr ip
   1ac0c:	andeq	sl, r1, ip, asr ip
   1ac10:	andeq	sl, r1, ip, asr ip
   1ac14:	andeq	sl, r1, ip, asr ip
   1ac18:	andeq	sl, r1, ip, asr ip
   1ac1c:	andeq	sl, r1, ip, asr ip
   1ac20:	andeq	sl, r1, ip, asr ip
   1ac24:	andeq	sl, r1, ip, asr ip
   1ac28:	andeq	sl, r1, ip, asr ip
   1ac2c:	andeq	sl, r1, ip, asr ip
   1ac30:	andeq	sl, r1, ip, asr ip
   1ac34:	andeq	sl, r1, ip, asr ip
   1ac38:	andeq	sl, r1, ip, asr ip
   1ac3c:	andeq	sl, r1, ip, asr ip
   1ac40:	andeq	sl, r1, ip, asr ip
   1ac44:	andeq	sl, r1, ip, asr ip
   1ac48:	andeq	sl, r1, ip, asr ip
   1ac4c:	andeq	sl, r1, ip, asr ip
   1ac50:	andeq	sl, r1, ip, asr ip
   1ac54:	andeq	sl, r1, ip, asr ip
   1ac58:	andeq	sl, r1, r8, ror #24
   1ac5c:	cmp	r4, r1
   1ac60:	bne	1abc0 <__assert_fail@plt+0x9068>
   1ac64:	b	1aa24 <__assert_fail@plt+0x8ecc>
   1ac68:	ldr	fp, [sp, #84]	; 0x54
   1ac6c:	ldr	sl, [sp, #88]	; 0x58
   1ac70:	mov	r8, #2
   1ac74:	b	1a130 <__assert_fail@plt+0x85d8>
   1ac78:	cmp	sl, r4
   1ac7c:	movls	r1, r4
   1ac80:	bls	1a280 <__assert_fail@plt+0x8728>
   1ac84:	ldr	r3, [sp, #44]	; 0x2c
   1ac88:	b	1a270 <__assert_fail@plt+0x8718>
   1ac8c:	str	sl, [sp, #72]	; 0x48
   1ac90:	ldr	sl, [sp, #32]
   1ac94:	b	1a0a8 <__assert_fail@plt+0x8550>
   1ac98:	add	r9, r9, #1
   1ac9c:	b	1999c <__assert_fail@plt+0x7e44>
   1aca0:	ldr	r2, [sp, #28]
   1aca4:	mov	r6, #0
   1aca8:	b	1aa74 <__assert_fail@plt+0x8f1c>
   1acac:	str	fp, [sp, #160]	; 0xa0
   1acb0:	str	r3, [sp, #28]
   1acb4:	mov	fp, r8
   1acb8:	ldr	r8, [sp, #160]	; 0xa0
   1acbc:	b	1a130 <__assert_fail@plt+0x85d8>
   1acc0:	str	r6, [sp, #44]	; 0x2c
   1acc4:	ldr	r6, [sp, #48]	; 0x30
   1acc8:	b	1a0d8 <__assert_fail@plt+0x8580>
   1accc:	str	r6, [sp, #44]	; 0x2c
   1acd0:	ldr	r6, [sp, #48]	; 0x30
   1acd4:	b	19ee4 <__assert_fail@plt+0x838c>
   1acd8:	add	r4, r4, #4
   1acdc:	str	r3, [sp, #44]	; 0x2c
   1ace0:	mov	r6, #0
   1ace4:	mov	r5, #48	; 0x30
   1ace8:	b	19e6c <__assert_fail@plt+0x8314>
   1acec:	mov	r7, r3
   1acf0:	b	1ab34 <__assert_fail@plt+0x8fdc>
   1acf4:	ldr	r3, [pc, #-1624]	; 1a6a4 <__assert_fail@plt+0x8b4c>
   1acf8:	mov	r4, #1
   1acfc:	str	r4, [sp, #40]	; 0x28
   1ad00:	str	r4, [sp, #28]
   1ad04:	str	r4, [sp, #52]	; 0x34
   1ad08:	str	sl, [sp, #72]	; 0x48
   1ad0c:	str	sl, [sp, #68]	; 0x44
   1ad10:	str	sl, [sp, #44]	; 0x2c
   1ad14:	str	sl, [sp, #32]
   1ad18:	str	r3, [sp, #60]	; 0x3c
   1ad1c:	b	1998c <__assert_fail@plt+0x7e34>
   1ad20:	mov	r3, r6
   1ad24:	mov	r5, #48	; 0x30
   1ad28:	mov	r6, #0
   1ad2c:	b	19e6c <__assert_fail@plt+0x8314>
   1ad30:	cmp	sl, r4
   1ad34:	movhi	r3, #48	; 0x30
   1ad38:	strbhi	r3, [r8, r4]
   1ad3c:	add	r3, r1, #2
   1ad40:	cmp	sl, r3
   1ad44:	movhi	r0, #48	; 0x30
   1ad48:	strbhi	r0, [r8, r3]
   1ad4c:	add	r4, r1, #3
   1ad50:	mov	r5, #48	; 0x30
   1ad54:	b	1a2b4 <__assert_fail@plt+0x875c>
   1ad58:	str	fp, [sp, #160]	; 0xa0
   1ad5c:	mov	fp, r8
   1ad60:	ldr	r8, [sp, #160]	; 0xa0
   1ad64:	b	1a130 <__assert_fail@plt+0x85d8>
   1ad68:	ldr	r2, [sp, #80]	; 0x50
   1ad6c:	ldrb	r3, [r2]
   1ad70:	cmp	r3, #0
   1ad74:	beq	1995c <__assert_fail@plt+0x7e04>
   1ad78:	cmp	sl, r4
   1ad7c:	strbhi	r3, [fp, r4]
   1ad80:	ldrb	r3, [r2, #1]!
   1ad84:	add	r4, r4, #1
   1ad88:	cmp	r3, #0
   1ad8c:	bne	1ad78 <__assert_fail@plt+0x9220>
   1ad90:	b	1995c <__assert_fail@plt+0x7e04>
   1ad94:	str	fp, [sp, #160]	; 0xa0
   1ad98:	mov	r3, #0
   1ad9c:	mov	fp, r8
   1ada0:	ldr	r8, [sp, #160]	; 0xa0
   1ada4:	b	1a1c4 <__assert_fail@plt+0x866c>
   1ada8:	mov	ip, r5
   1adac:	ldr	r7, [sp, #96]	; 0x60
   1adb0:	ldr	r5, [sp, #92]	; 0x5c
   1adb4:	ldr	r4, [sp, #100]	; 0x64
   1adb8:	ldr	r8, [sp, #84]	; 0x54
   1adbc:	ldr	sl, [sp, #88]	; 0x58
   1adc0:	ldr	r2, [sp, #28]
   1adc4:	mov	r6, #0
   1adc8:	b	1aa6c <__assert_fail@plt+0x8f14>
   1adcc:	ldr	r2, [sp, #36]	; 0x24
   1add0:	ldrb	r1, [r2, r3]
   1add4:	sub	r2, r1, #33	; 0x21
   1add8:	cmp	r2, #29
   1addc:	ldrls	pc, [pc, r2, lsl #2]
   1ade0:	b	1aebc <__assert_fail@plt+0x9364>
   1ade4:	andeq	sl, r1, ip, asr lr
   1ade8:			; <UNDEFINED> instruction: 0x0001aebc
   1adec:			; <UNDEFINED> instruction: 0x0001aebc
   1adf0:			; <UNDEFINED> instruction: 0x0001aebc
   1adf4:			; <UNDEFINED> instruction: 0x0001aebc
   1adf8:			; <UNDEFINED> instruction: 0x0001aebc
   1adfc:	andeq	sl, r1, ip, asr lr
   1ae00:	andeq	sl, r1, ip, asr lr
   1ae04:	andeq	sl, r1, ip, asr lr
   1ae08:			; <UNDEFINED> instruction: 0x0001aebc
   1ae0c:			; <UNDEFINED> instruction: 0x0001aebc
   1ae10:			; <UNDEFINED> instruction: 0x0001aebc
   1ae14:	andeq	sl, r1, ip, asr lr
   1ae18:			; <UNDEFINED> instruction: 0x0001aebc
   1ae1c:	andeq	sl, r1, ip, asr lr
   1ae20:			; <UNDEFINED> instruction: 0x0001aebc
   1ae24:			; <UNDEFINED> instruction: 0x0001aebc
   1ae28:			; <UNDEFINED> instruction: 0x0001aebc
   1ae2c:			; <UNDEFINED> instruction: 0x0001aebc
   1ae30:			; <UNDEFINED> instruction: 0x0001aebc
   1ae34:			; <UNDEFINED> instruction: 0x0001aebc
   1ae38:			; <UNDEFINED> instruction: 0x0001aebc
   1ae3c:			; <UNDEFINED> instruction: 0x0001aebc
   1ae40:			; <UNDEFINED> instruction: 0x0001aebc
   1ae44:			; <UNDEFINED> instruction: 0x0001aebc
   1ae48:			; <UNDEFINED> instruction: 0x0001aebc
   1ae4c:			; <UNDEFINED> instruction: 0x0001aebc
   1ae50:	andeq	sl, r1, ip, asr lr
   1ae54:	andeq	sl, r1, ip, asr lr
   1ae58:	andeq	sl, r1, ip, asr lr
   1ae5c:	ldr	r2, [sp, #32]
   1ae60:	cmp	r2, #0
   1ae64:	bne	1af68 <__assert_fail@plt+0x9410>
   1ae68:	cmp	sl, r4
   1ae6c:	movhi	r2, #63	; 0x3f
   1ae70:	strbhi	r2, [r8, r4]
   1ae74:	add	r2, r4, #1
   1ae78:	cmp	sl, r2
   1ae7c:	movhi	r0, #34	; 0x22
   1ae80:	strbhi	r0, [r8, r2]
   1ae84:	add	r2, r4, #2
   1ae88:	cmp	sl, r2
   1ae8c:	movhi	r0, #34	; 0x22
   1ae90:	strbhi	r0, [r8, r2]
   1ae94:	add	r2, r4, #3
   1ae98:	cmp	sl, r2
   1ae9c:	movhi	r0, #63	; 0x3f
   1aea0:	strbhi	r0, [r8, r2]
   1aea4:	mov	r2, #0
   1aea8:	add	r4, r4, #4
   1aeac:	mov	r5, r1
   1aeb0:	mov	r9, r3
   1aeb4:	mov	r6, r2
   1aeb8:	b	1a2b4 <__assert_fail@plt+0x875c>
   1aebc:	mov	r2, #0
   1aec0:	mov	r6, r2
   1aec4:	b	19e24 <__assert_fail@plt+0x82cc>
   1aec8:	ldr	r0, [sp, #24]
   1aecc:	mov	r1, r4
   1aed0:	cmp	r1, r0
   1aed4:	mov	r2, r7
   1aed8:	mov	r3, r5
   1aedc:	mov	ip, r5
   1aee0:	ldr	r7, [sp, #96]	; 0x60
   1aee4:	ldr	r5, [sp, #92]	; 0x5c
   1aee8:	ldr	r4, [sp, #100]	; 0x64
   1aeec:	ldr	r8, [sp, #84]	; 0x54
   1aef0:	ldr	sl, [sp, #88]	; 0x58
   1aef4:	bcs	1af28 <__assert_fail@plt+0x93d0>
   1aef8:	ldrb	r6, [r2]
   1aefc:	cmp	r6, #0
   1af00:	bne	1af14 <__assert_fail@plt+0x93bc>
   1af04:	b	1b044 <__assert_fail@plt+0x94ec>
   1af08:	ldrb	r6, [r2, #1]!
   1af0c:	cmp	r6, #0
   1af10:	beq	1afcc <__assert_fail@plt+0x9474>
   1af14:	add	r3, r3, #1
   1af18:	add	r1, r9, r3
   1af1c:	cmp	r1, r0
   1af20:	bcc	1af08 <__assert_fail@plt+0x93b0>
   1af24:	mov	ip, r3
   1af28:	ldr	r2, [sp, #28]
   1af2c:	mov	r6, #0
   1af30:	b	1aa6c <__assert_fail@plt+0x8f14>
   1af34:	mov	r3, #1
   1af38:	str	r3, [sp, #40]	; 0x28
   1af3c:	str	r3, [sp, #32]
   1af40:	str	r3, [sp, #28]
   1af44:	str	r3, [sp, #52]	; 0x34
   1af48:	ldr	r3, [pc, #-2220]	; 1a6a4 <__assert_fail@plt+0x8b4c>
   1af4c:	mov	r2, #0
   1af50:	str	r2, [sp, #68]	; 0x44
   1af54:	str	r2, [sp, #44]	; 0x2c
   1af58:	str	r2, [sp, #72]	; 0x48
   1af5c:	mov	r4, r2
   1af60:	str	r3, [sp, #60]	; 0x3c
   1af64:	b	1998c <__assert_fail@plt+0x7e34>
   1af68:	str	fp, [sp, #160]	; 0xa0
   1af6c:	mov	fp, r8
   1af70:	ldr	r8, [sp, #160]	; 0xa0
   1af74:	b	1a13c <__assert_fail@plt+0x85e4>
   1af78:	mov	r2, r3
   1af7c:	ldr	r3, [sp, #60]	; 0x3c
   1af80:	cmp	r3, #0
   1af84:	moveq	r2, #0
   1af88:	andne	r2, r2, #1
   1af8c:	cmp	r2, #0
   1af90:	beq	1afbc <__assert_fail@plt+0x9464>
   1af94:	mov	r2, r3
   1af98:	ldrb	r3, [r3]
   1af9c:	cmp	r3, #0
   1afa0:	beq	1afbc <__assert_fail@plt+0x9464>
   1afa4:	cmp	sl, r4
   1afa8:	strbhi	r3, [fp, r4]
   1afac:	ldrb	r3, [r2, #1]!
   1afb0:	add	r4, r4, #1
   1afb4:	cmp	r3, #0
   1afb8:	bne	1afa4 <__assert_fail@plt+0x944c>
   1afbc:	cmp	sl, r4
   1afc0:	movhi	r3, #0
   1afc4:	strbhi	r3, [fp, r4]
   1afc8:	b	1a17c <__assert_fail@plt+0x8624>
   1afcc:	mov	ip, r3
   1afd0:	ldr	r2, [sp, #28]
   1afd4:	b	1aa6c <__assert_fail@plt+0x8f14>
   1afd8:	str	fp, [sp, #160]	; 0xa0
   1afdc:	mov	fp, r8
   1afe0:	ldr	r8, [sp, #160]	; 0xa0
   1afe4:	sub	r3, r8, #2
   1afe8:	clz	r3, r3
   1afec:	lsr	r3, r3, #5
   1aff0:	str	r3, [sp, #28]
   1aff4:	b	1a130 <__assert_fail@plt+0x85d8>
   1aff8:	ldr	r3, [sp, #76]	; 0x4c
   1affc:	mov	ip, #5
   1b000:	str	r3, [sp, #16]
   1b004:	ldr	r3, [sp, #80]	; 0x50
   1b008:	ldr	r2, [sp, #36]	; 0x24
   1b00c:	str	r3, [sp, #12]
   1b010:	ldr	r3, [sp, #56]	; 0x38
   1b014:	ldr	r1, [sp, #72]	; 0x48
   1b018:	str	r3, [sp, #8]
   1b01c:	ldr	r3, [sp, #164]	; 0xa4
   1b020:	mov	r0, fp
   1b024:	str	r3, [sp, #4]
   1b028:	str	ip, [sp]
   1b02c:	ldr	r3, [sp, #24]
   1b030:	bl	19894 <__assert_fail@plt+0x7d3c>
   1b034:	mov	r4, r0
   1b038:	b	1a17c <__assert_fail@plt+0x8624>
   1b03c:	mov	r8, #2
   1b040:	b	1a130 <__assert_fail@plt+0x85d8>
   1b044:	ldr	r2, [sp, #28]
   1b048:	b	1aa6c <__assert_fail@plt+0x8f14>
   1b04c:	mov	r3, #0
   1b050:	str	r3, [sp, #68]	; 0x44
   1b054:	str	r3, [sp, #44]	; 0x2c
   1b058:	str	r3, [sp, #72]	; 0x48
   1b05c:	str	r3, [sp, #28]
   1b060:	mov	r4, r3
   1b064:	ldr	r3, [pc, #-2500]	; 1a6a8 <__assert_fail@plt+0x8b50>
   1b068:	mov	r2, #1
   1b06c:	str	r2, [sp, #40]	; 0x28
   1b070:	str	r2, [sp, #32]
   1b074:	str	r2, [sp, #52]	; 0x34
   1b078:	str	r3, [sp, #60]	; 0x3c
   1b07c:	b	1998c <__assert_fail@plt+0x7e34>
   1b080:	bl	11780 <__stack_chk_fail@plt>
   1b084:	mov	r5, r3
   1b088:	mov	r6, #0
   1b08c:	b	19e80 <__assert_fail@plt+0x8328>
   1b090:	mov	r3, #0
   1b094:	mov	r2, #1
   1b098:	str	r3, [sp, #44]	; 0x2c
   1b09c:	str	r3, [sp, #72]	; 0x48
   1b0a0:	str	r2, [sp, #40]	; 0x28
   1b0a4:	b	19f9c <__assert_fail@plt+0x8444>
   1b0a8:	bl	11b28 <abort@plt>
   1b0ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0b0:	sub	sp, sp, #44	; 0x2c
   1b0b4:	mov	r6, r0
   1b0b8:	mov	r4, r3
   1b0bc:	mov	sl, r1
   1b0c0:	mov	fp, r2
   1b0c4:	bl	11984 <__errno_location@plt>
   1b0c8:	ldr	r7, [pc, #364]	; 1b23c <__assert_fail@plt+0x96e4>
   1b0cc:	cmp	r6, #0
   1b0d0:	ldr	r5, [r7]
   1b0d4:	ldr	r3, [r0]
   1b0d8:	str	r3, [sp, #24]
   1b0dc:	blt	1b238 <__assert_fail@plt+0x96e0>
   1b0e0:	ldr	r3, [r7, #4]
   1b0e4:	mov	r8, r0
   1b0e8:	cmp	r3, r6
   1b0ec:	bgt	1b138 <__assert_fail@plt+0x95e0>
   1b0f0:	cmn	r6, #-268435454	; 0xf0000002
   1b0f4:	bgt	1b234 <__assert_fail@plt+0x96dc>
   1b0f8:	add	r9, r6, #1
   1b0fc:	add	r3, r7, #8
   1b100:	cmp	r5, r3
   1b104:	lsl	r1, r9, #3
   1b108:	beq	1b214 <__assert_fail@plt+0x96bc>
   1b10c:	mov	r0, r5
   1b110:	bl	1becc <__assert_fail@plt+0xa374>
   1b114:	mov	r5, r0
   1b118:	str	r0, [r7]
   1b11c:	ldr	r0, [r7, #4]
   1b120:	mov	r1, #0
   1b124:	sub	r2, r9, r0
   1b128:	add	r0, r5, r0, lsl #3
   1b12c:	lsl	r2, r2, #3
   1b130:	bl	119a8 <memset@plt>
   1b134:	str	r9, [r7, #4]
   1b138:	add	r3, r5, r6, lsl #3
   1b13c:	ldr	r1, [r4, #4]
   1b140:	ldr	r7, [r3, #4]
   1b144:	ldr	r9, [r5, r6, lsl #3]
   1b148:	ldr	r2, [r4, #40]	; 0x28
   1b14c:	ldr	ip, [r4, #44]	; 0x2c
   1b150:	str	r3, [sp, #28]
   1b154:	ldr	r3, [r4]
   1b158:	orr	r1, r1, #1
   1b15c:	add	lr, r4, #8
   1b160:	str	r1, [sp, #36]	; 0x24
   1b164:	str	r1, [sp, #4]
   1b168:	str	r2, [sp, #12]
   1b16c:	str	r3, [sp]
   1b170:	mov	r0, r7
   1b174:	mov	r1, r9
   1b178:	str	ip, [sp, #16]
   1b17c:	str	lr, [sp, #8]
   1b180:	mov	r3, fp
   1b184:	mov	r2, sl
   1b188:	str	lr, [sp, #32]
   1b18c:	bl	19894 <__assert_fail@plt+0x7d3c>
   1b190:	cmp	r9, r0
   1b194:	bhi	1b200 <__assert_fail@plt+0x96a8>
   1b198:	ldr	r3, [pc, #160]	; 1b240 <__assert_fail@plt+0x96e8>
   1b19c:	add	r9, r0, #1
   1b1a0:	cmp	r7, r3
   1b1a4:	str	r9, [r5, r6, lsl #3]
   1b1a8:	beq	1b1b4 <__assert_fail@plt+0x965c>
   1b1ac:	mov	r0, r7
   1b1b0:	bl	11720 <free@plt>
   1b1b4:	mov	r0, r9
   1b1b8:	bl	1be70 <__assert_fail@plt+0xa318>
   1b1bc:	ldr	lr, [sp, #28]
   1b1c0:	ldr	ip, [r4, #44]	; 0x2c
   1b1c4:	ldr	r5, [r4, #40]	; 0x28
   1b1c8:	mov	r3, fp
   1b1cc:	mov	r2, sl
   1b1d0:	mov	r1, r9
   1b1d4:	str	r0, [lr, #4]
   1b1d8:	ldr	lr, [r4]
   1b1dc:	ldr	r4, [sp, #32]
   1b1e0:	str	ip, [sp, #16]
   1b1e4:	str	r4, [sp, #8]
   1b1e8:	ldr	r4, [sp, #36]	; 0x24
   1b1ec:	str	r5, [sp, #12]
   1b1f0:	str	r4, [sp, #4]
   1b1f4:	str	lr, [sp]
   1b1f8:	mov	r7, r0
   1b1fc:	bl	19894 <__assert_fail@plt+0x7d3c>
   1b200:	ldr	r3, [sp, #24]
   1b204:	mov	r0, r7
   1b208:	str	r3, [r8]
   1b20c:	add	sp, sp, #44	; 0x2c
   1b210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b214:	mov	r0, #0
   1b218:	bl	1becc <__assert_fail@plt+0xa374>
   1b21c:	ldr	r3, [pc, #32]	; 1b244 <__assert_fail@plt+0x96ec>
   1b220:	mov	r5, r0
   1b224:	ldm	r3, {r0, r1}
   1b228:	str	r5, [r7]
   1b22c:	stm	r5, {r0, r1}
   1b230:	b	1b11c <__assert_fail@plt+0x95c4>
   1b234:	bl	1c0b8 <__assert_fail@plt+0xa560>
   1b238:	bl	11b28 <abort@plt>
   1b23c:	andeq	r5, r3, r4, asr #3
   1b240:			; <UNDEFINED> instruction: 0x000352b4
   1b244:	andeq	r5, r3, ip, asr #3
   1b248:	push	{r4, r5, r6, lr}
   1b24c:	mov	r5, r0
   1b250:	bl	11984 <__errno_location@plt>
   1b254:	cmp	r5, #0
   1b258:	mov	r1, #48	; 0x30
   1b25c:	mov	r4, r0
   1b260:	ldr	r0, [pc, #16]	; 1b278 <__assert_fail@plt+0x9720>
   1b264:	ldr	r6, [r4]
   1b268:	movne	r0, r5
   1b26c:	bl	1c078 <__assert_fail@plt+0xa520>
   1b270:	str	r6, [r4]
   1b274:	pop	{r4, r5, r6, pc}
   1b278:			; <UNDEFINED> instruction: 0x000353b4
   1b27c:	ldr	r3, [pc, #12]	; 1b290 <__assert_fail@plt+0x9738>
   1b280:	cmp	r0, #0
   1b284:	moveq	r0, r3
   1b288:	ldr	r0, [r0]
   1b28c:	bx	lr
   1b290:			; <UNDEFINED> instruction: 0x000353b4
   1b294:	ldr	r3, [pc, #12]	; 1b2a8 <__assert_fail@plt+0x9750>
   1b298:	cmp	r0, #0
   1b29c:	moveq	r0, r3
   1b2a0:	str	r1, [r0]
   1b2a4:	bx	lr
   1b2a8:			; <UNDEFINED> instruction: 0x000353b4
   1b2ac:	ldr	r3, [pc, #52]	; 1b2e8 <__assert_fail@plt+0x9790>
   1b2b0:	cmp	r0, #0
   1b2b4:	moveq	r0, r3
   1b2b8:	add	r3, r0, #8
   1b2bc:	push	{lr}		; (str lr, [sp, #-4]!)
   1b2c0:	lsr	lr, r1, #5
   1b2c4:	and	r1, r1, #31
   1b2c8:	ldr	ip, [r3, lr, lsl #2]
   1b2cc:	lsr	r0, ip, r1
   1b2d0:	eor	r2, r2, r0
   1b2d4:	and	r2, r2, #1
   1b2d8:	and	r0, r0, #1
   1b2dc:	eor	r1, ip, r2, lsl r1
   1b2e0:	str	r1, [r3, lr, lsl #2]
   1b2e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2e8:			; <UNDEFINED> instruction: 0x000353b4
   1b2ec:	ldr	r3, [pc, #16]	; 1b304 <__assert_fail@plt+0x97ac>
   1b2f0:	cmp	r0, #0
   1b2f4:	movne	r3, r0
   1b2f8:	ldr	r0, [r3, #4]
   1b2fc:	str	r1, [r3, #4]
   1b300:	bx	lr
   1b304:			; <UNDEFINED> instruction: 0x000353b4
   1b308:	ldr	r3, [pc, #44]	; 1b33c <__assert_fail@plt+0x97e4>
   1b30c:	cmp	r0, #0
   1b310:	moveq	r0, r3
   1b314:	mov	ip, #10
   1b318:	cmp	r2, #0
   1b31c:	cmpne	r1, #0
   1b320:	str	ip, [r0]
   1b324:	beq	1b334 <__assert_fail@plt+0x97dc>
   1b328:	str	r1, [r0, #40]	; 0x28
   1b32c:	str	r2, [r0, #44]	; 0x2c
   1b330:	bx	lr
   1b334:	push	{r4, lr}
   1b338:	bl	11b28 <abort@plt>
   1b33c:			; <UNDEFINED> instruction: 0x000353b4
   1b340:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b344:	sub	sp, sp, #24
   1b348:	ldr	ip, [pc, #108]	; 1b3bc <__assert_fail@plt+0x9864>
   1b34c:	ldr	r4, [sp, #56]	; 0x38
   1b350:	mov	r9, r2
   1b354:	cmp	r4, #0
   1b358:	moveq	r4, ip
   1b35c:	mov	sl, r3
   1b360:	mov	r7, r0
   1b364:	mov	r8, r1
   1b368:	bl	11984 <__errno_location@plt>
   1b36c:	ldr	r3, [r4, #44]	; 0x2c
   1b370:	mov	r1, r8
   1b374:	ldr	r6, [r0]
   1b378:	str	r3, [sp, #16]
   1b37c:	ldr	r2, [r4, #40]	; 0x28
   1b380:	add	r3, r4, #8
   1b384:	str	r3, [sp, #8]
   1b388:	str	r2, [sp, #12]
   1b38c:	ldr	r2, [r4, #4]
   1b390:	mov	r5, r0
   1b394:	str	r2, [sp, #4]
   1b398:	ldr	ip, [r4]
   1b39c:	mov	r3, sl
   1b3a0:	mov	r2, r9
   1b3a4:	mov	r0, r7
   1b3a8:	str	ip, [sp]
   1b3ac:	bl	19894 <__assert_fail@plt+0x7d3c>
   1b3b0:	str	r6, [r5]
   1b3b4:	add	sp, sp, #24
   1b3b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b3bc:			; <UNDEFINED> instruction: 0x000353b4
   1b3c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3c4:	cmp	r3, #0
   1b3c8:	sub	sp, sp, #44	; 0x2c
   1b3cc:	ldr	r4, [pc, #192]	; 1b494 <__assert_fail@plt+0x993c>
   1b3d0:	mov	r6, r2
   1b3d4:	movne	r4, r3
   1b3d8:	mov	r9, r1
   1b3dc:	mov	r8, r0
   1b3e0:	bl	11984 <__errno_location@plt>
   1b3e4:	ldr	r3, [r4, #44]	; 0x2c
   1b3e8:	ldr	r5, [r4, #4]
   1b3ec:	add	sl, r4, #8
   1b3f0:	cmp	r6, #0
   1b3f4:	orreq	r5, r5, #1
   1b3f8:	mov	r1, #0
   1b3fc:	ldr	r2, [r0]
   1b400:	str	r3, [sp, #16]
   1b404:	ldr	r3, [r4, #40]	; 0x28
   1b408:	stmib	sp, {r5, sl}
   1b40c:	str	r3, [sp, #12]
   1b410:	ldr	r3, [r4]
   1b414:	mov	r7, r0
   1b418:	str	r2, [sp, #28]
   1b41c:	str	r3, [sp]
   1b420:	mov	r2, r8
   1b424:	mov	r3, r9
   1b428:	mov	r0, r1
   1b42c:	bl	19894 <__assert_fail@plt+0x7d3c>
   1b430:	add	r1, r0, #1
   1b434:	mov	fp, r0
   1b438:	mov	r0, r1
   1b43c:	str	r1, [sp, #36]	; 0x24
   1b440:	bl	1be70 <__assert_fail@plt+0xa318>
   1b444:	ldr	r3, [r4, #44]	; 0x2c
   1b448:	mov	r2, r8
   1b44c:	str	r3, [sp, #16]
   1b450:	ldr	r3, [r4, #40]	; 0x28
   1b454:	str	r5, [sp, #4]
   1b458:	str	r3, [sp, #12]
   1b45c:	str	sl, [sp, #8]
   1b460:	ldr	ip, [r4]
   1b464:	ldr	r1, [sp, #36]	; 0x24
   1b468:	mov	r3, r9
   1b46c:	str	ip, [sp]
   1b470:	str	r0, [sp, #32]
   1b474:	bl	19894 <__assert_fail@plt+0x7d3c>
   1b478:	ldr	r2, [sp, #28]
   1b47c:	cmp	r6, #0
   1b480:	str	r2, [r7]
   1b484:	ldr	r0, [sp, #32]
   1b488:	strne	fp, [r6]
   1b48c:	add	sp, sp, #44	; 0x2c
   1b490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b494:			; <UNDEFINED> instruction: 0x000353b4
   1b498:	mov	r3, r2
   1b49c:	mov	r2, #0
   1b4a0:	b	1b3c0 <__assert_fail@plt+0x9868>
   1b4a4:	push	{r4, r5, r6, r7, r8, lr}
   1b4a8:	ldr	r6, [pc, #112]	; 1b520 <__assert_fail@plt+0x99c8>
   1b4ac:	ldr	r3, [r6, #4]
   1b4b0:	ldr	r7, [r6]
   1b4b4:	cmp	r3, #1
   1b4b8:	ble	1b4dc <__assert_fail@plt+0x9984>
   1b4bc:	sub	r5, r7, #8
   1b4c0:	add	r5, r5, r3, lsl #3
   1b4c4:	mov	r4, r7
   1b4c8:	ldr	r0, [r4, #12]
   1b4cc:	add	r4, r4, #8
   1b4d0:	bl	11720 <free@plt>
   1b4d4:	cmp	r4, r5
   1b4d8:	bne	1b4c8 <__assert_fail@plt+0x9970>
   1b4dc:	ldr	r0, [r7, #4]
   1b4e0:	ldr	r4, [pc, #60]	; 1b524 <__assert_fail@plt+0x99cc>
   1b4e4:	cmp	r0, r4
   1b4e8:	beq	1b4fc <__assert_fail@plt+0x99a4>
   1b4ec:	bl	11720 <free@plt>
   1b4f0:	mov	r3, #256	; 0x100
   1b4f4:	str	r4, [r6, #12]
   1b4f8:	str	r3, [r6, #8]
   1b4fc:	ldr	r4, [pc, #36]	; 1b528 <__assert_fail@plt+0x99d0>
   1b500:	cmp	r7, r4
   1b504:	beq	1b514 <__assert_fail@plt+0x99bc>
   1b508:	mov	r0, r7
   1b50c:	bl	11720 <free@plt>
   1b510:	str	r4, [r6]
   1b514:	mov	r3, #1
   1b518:	str	r3, [r6, #4]
   1b51c:	pop	{r4, r5, r6, r7, r8, pc}
   1b520:	andeq	r5, r3, r4, asr #3
   1b524:			; <UNDEFINED> instruction: 0x000352b4
   1b528:	andeq	r5, r3, ip, asr #3
   1b52c:	ldr	r3, [pc, #4]	; 1b538 <__assert_fail@plt+0x99e0>
   1b530:	mvn	r2, #0
   1b534:	b	1b0ac <__assert_fail@plt+0x9554>
   1b538:			; <UNDEFINED> instruction: 0x000353b4
   1b53c:	ldr	r3, [pc]	; 1b544 <__assert_fail@plt+0x99ec>
   1b540:	b	1b0ac <__assert_fail@plt+0x9554>
   1b544:			; <UNDEFINED> instruction: 0x000353b4
   1b548:	mov	r1, r0
   1b54c:	ldr	r3, [pc, #8]	; 1b55c <__assert_fail@plt+0x9a04>
   1b550:	mvn	r2, #0
   1b554:	mov	r0, #0
   1b558:	b	1b0ac <__assert_fail@plt+0x9554>
   1b55c:			; <UNDEFINED> instruction: 0x000353b4
   1b560:	mov	r2, r1
   1b564:	ldr	r3, [pc, #8]	; 1b574 <__assert_fail@plt+0x9a1c>
   1b568:	mov	r1, r0
   1b56c:	mov	r0, #0
   1b570:	b	1b0ac <__assert_fail@plt+0x9554>
   1b574:			; <UNDEFINED> instruction: 0x000353b4
   1b578:	push	{r4, r5, r6, lr}
   1b57c:	sub	sp, sp, #56	; 0x38
   1b580:	ldr	r4, [pc, #68]	; 1b5cc <__assert_fail@plt+0x9a74>
   1b584:	mov	r6, r2
   1b588:	mov	r5, r0
   1b58c:	ldr	r3, [r4]
   1b590:	add	r0, sp, #4
   1b594:	str	r3, [sp, #52]	; 0x34
   1b598:	bl	19724 <__assert_fail@plt+0x7bcc>
   1b59c:	add	r3, sp, #4
   1b5a0:	mvn	r2, #0
   1b5a4:	mov	r1, r6
   1b5a8:	mov	r0, r5
   1b5ac:	bl	1b0ac <__assert_fail@plt+0x9554>
   1b5b0:	ldr	r2, [sp, #52]	; 0x34
   1b5b4:	ldr	r3, [r4]
   1b5b8:	cmp	r2, r3
   1b5bc:	bne	1b5c8 <__assert_fail@plt+0x9a70>
   1b5c0:	add	sp, sp, #56	; 0x38
   1b5c4:	pop	{r4, r5, r6, pc}
   1b5c8:	bl	11780 <__stack_chk_fail@plt>
   1b5cc:	andeq	r4, r3, r8, lsl #30
   1b5d0:	push	{r4, r5, r6, r7, lr}
   1b5d4:	sub	sp, sp, #60	; 0x3c
   1b5d8:	ldr	r4, [pc, #72]	; 1b628 <__assert_fail@plt+0x9ad0>
   1b5dc:	mov	r6, r2
   1b5e0:	mov	r7, r3
   1b5e4:	ldr	ip, [r4]
   1b5e8:	mov	r5, r0
   1b5ec:	add	r0, sp, #4
   1b5f0:	str	ip, [sp, #52]	; 0x34
   1b5f4:	bl	19724 <__assert_fail@plt+0x7bcc>
   1b5f8:	add	r3, sp, #4
   1b5fc:	mov	r2, r7
   1b600:	mov	r1, r6
   1b604:	mov	r0, r5
   1b608:	bl	1b0ac <__assert_fail@plt+0x9554>
   1b60c:	ldr	r2, [sp, #52]	; 0x34
   1b610:	ldr	r3, [r4]
   1b614:	cmp	r2, r3
   1b618:	bne	1b624 <__assert_fail@plt+0x9acc>
   1b61c:	add	sp, sp, #60	; 0x3c
   1b620:	pop	{r4, r5, r6, r7, pc}
   1b624:	bl	11780 <__stack_chk_fail@plt>
   1b628:	andeq	r4, r3, r8, lsl #30
   1b62c:	mov	r2, r1
   1b630:	mov	r1, r0
   1b634:	mov	r0, #0
   1b638:	b	1b578 <__assert_fail@plt+0x9a20>
   1b63c:	mov	r3, r2
   1b640:	mov	r2, r1
   1b644:	mov	r1, r0
   1b648:	mov	r0, #0
   1b64c:	b	1b5d0 <__assert_fail@plt+0x9a78>
   1b650:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b654:	mov	r4, r2
   1b658:	ldr	lr, [pc, #128]	; 1b6e0 <__assert_fail@plt+0x9b88>
   1b65c:	mov	r8, r0
   1b660:	mov	r9, r1
   1b664:	ldm	lr!, {r0, r1, r2, r3}
   1b668:	sub	sp, sp, #60	; 0x3c
   1b66c:	add	ip, sp, #4
   1b670:	lsr	r6, r4, #5
   1b674:	stmia	ip!, {r0, r1, r2, r3}
   1b678:	add	r7, sp, #12
   1b67c:	ldm	lr!, {r0, r1, r2, r3}
   1b680:	and	r4, r4, #31
   1b684:	ldr	r5, [pc, #88]	; 1b6e4 <__assert_fail@plt+0x9b8c>
   1b688:	stmia	ip!, {r0, r1, r2, r3}
   1b68c:	ldm	lr, {r0, r1, r2, r3}
   1b690:	stm	ip, {r0, r1, r2, r3}
   1b694:	mov	r2, r9
   1b698:	ldr	r3, [r7, r6, lsl #2]
   1b69c:	ldr	ip, [r5]
   1b6a0:	mov	r1, r8
   1b6a4:	mvn	r0, r3, lsr r4
   1b6a8:	and	r0, r0, #1
   1b6ac:	str	ip, [sp, #52]	; 0x34
   1b6b0:	eor	r4, r3, r0, lsl r4
   1b6b4:	add	r3, sp, #4
   1b6b8:	mov	r0, #0
   1b6bc:	str	r4, [r7, r6, lsl #2]
   1b6c0:	bl	1b0ac <__assert_fail@plt+0x9554>
   1b6c4:	ldr	r2, [sp, #52]	; 0x34
   1b6c8:	ldr	r3, [r5]
   1b6cc:	cmp	r2, r3
   1b6d0:	bne	1b6dc <__assert_fail@plt+0x9b84>
   1b6d4:	add	sp, sp, #60	; 0x3c
   1b6d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b6dc:	bl	11780 <__stack_chk_fail@plt>
   1b6e0:			; <UNDEFINED> instruction: 0x000353b4
   1b6e4:	andeq	r4, r3, r8, lsl #30
   1b6e8:	mov	r2, r1
   1b6ec:	mvn	r1, #0
   1b6f0:	b	1b650 <__assert_fail@plt+0x9af8>
   1b6f4:	mov	r2, #58	; 0x3a
   1b6f8:	mvn	r1, #0
   1b6fc:	b	1b650 <__assert_fail@plt+0x9af8>
   1b700:	mov	r2, #58	; 0x3a
   1b704:	b	1b650 <__assert_fail@plt+0x9af8>
   1b708:	push	{r4, r5, r6, r7, r8, lr}
   1b70c:	sub	sp, sp, #104	; 0x68
   1b710:	ldr	r5, [pc, #120]	; 1b790 <__assert_fail@plt+0x9c38>
   1b714:	mov	r6, r0
   1b718:	mov	r0, sp
   1b71c:	ldr	r3, [r5]
   1b720:	mov	r7, r2
   1b724:	str	r3, [sp, #100]	; 0x64
   1b728:	bl	19724 <__assert_fail@plt+0x7bcc>
   1b72c:	mov	ip, sp
   1b730:	add	lr, sp, #52	; 0x34
   1b734:	ldm	ip!, {r0, r1, r2, r3}
   1b738:	stmia	lr!, {r0, r1, r2, r3}
   1b73c:	ldm	ip!, {r0, r1, r2, r3}
   1b740:	ldr	r8, [sp, #64]	; 0x40
   1b744:	stmia	lr!, {r0, r1, r2, r3}
   1b748:	mvn	r4, r8
   1b74c:	ldm	ip, {r0, r1, r2, r3}
   1b750:	and	ip, r4, #67108864	; 0x4000000
   1b754:	eor	ip, ip, r8
   1b758:	str	ip, [sp, #64]	; 0x40
   1b75c:	stm	lr, {r0, r1, r2, r3}
   1b760:	add	r3, sp, #52	; 0x34
   1b764:	mvn	r2, #0
   1b768:	mov	r1, r7
   1b76c:	mov	r0, r6
   1b770:	bl	1b0ac <__assert_fail@plt+0x9554>
   1b774:	ldr	r2, [sp, #100]	; 0x64
   1b778:	ldr	r3, [r5]
   1b77c:	cmp	r2, r3
   1b780:	bne	1b78c <__assert_fail@plt+0x9c34>
   1b784:	add	sp, sp, #104	; 0x68
   1b788:	pop	{r4, r5, r6, r7, r8, pc}
   1b78c:	bl	11780 <__stack_chk_fail@plt>
   1b790:	andeq	r4, r3, r8, lsl #30
   1b794:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b798:	mov	r6, r1
   1b79c:	ldr	lr, [pc, #132]	; 1b828 <__assert_fail@plt+0x9cd0>
   1b7a0:	mov	r5, r2
   1b7a4:	mov	r8, r0
   1b7a8:	mov	r9, r3
   1b7ac:	ldm	lr!, {r0, r1, r2, r3}
   1b7b0:	sub	sp, sp, #60	; 0x3c
   1b7b4:	add	ip, sp, #4
   1b7b8:	ldr	r4, [pc, #108]	; 1b82c <__assert_fail@plt+0x9cd4>
   1b7bc:	stmia	ip!, {r0, r1, r2, r3}
   1b7c0:	mov	r7, #10
   1b7c4:	ldm	lr!, {r0, r1, r2, r3}
   1b7c8:	cmp	r5, #0
   1b7cc:	cmpne	r6, #0
   1b7d0:	str	r7, [sp, #4]
   1b7d4:	stmia	ip!, {r0, r1, r2, r3}
   1b7d8:	ldm	lr, {r0, r1, r2, r3}
   1b7dc:	ldr	lr, [r4]
   1b7e0:	stm	ip, {r0, r1, r2, r3}
   1b7e4:	str	lr, [sp, #52]	; 0x34
   1b7e8:	beq	1b824 <__assert_fail@plt+0x9ccc>
   1b7ec:	add	r3, sp, #4
   1b7f0:	ldr	r2, [sp, #88]	; 0x58
   1b7f4:	mov	r1, r9
   1b7f8:	mov	r0, r8
   1b7fc:	str	r6, [sp, #44]	; 0x2c
   1b800:	str	r5, [sp, #48]	; 0x30
   1b804:	bl	1b0ac <__assert_fail@plt+0x9554>
   1b808:	ldr	r2, [sp, #52]	; 0x34
   1b80c:	ldr	r3, [r4]
   1b810:	cmp	r2, r3
   1b814:	bne	1b820 <__assert_fail@plt+0x9cc8>
   1b818:	add	sp, sp, #60	; 0x3c
   1b81c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b820:	bl	11780 <__stack_chk_fail@plt>
   1b824:	bl	11b28 <abort@plt>
   1b828:			; <UNDEFINED> instruction: 0x000353b4
   1b82c:	andeq	r4, r3, r8, lsl #30
   1b830:	push	{lr}		; (str lr, [sp, #-4]!)
   1b834:	sub	sp, sp, #12
   1b838:	mvn	ip, #0
   1b83c:	str	ip, [sp]
   1b840:	bl	1b794 <__assert_fail@plt+0x9c3c>
   1b844:	add	sp, sp, #12
   1b848:	pop	{pc}		; (ldr pc, [sp], #4)
   1b84c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b850:	sub	sp, sp, #12
   1b854:	mvn	ip, #0
   1b858:	mov	r3, r2
   1b85c:	str	ip, [sp]
   1b860:	mov	r2, r1
   1b864:	mov	r1, r0
   1b868:	mov	r0, #0
   1b86c:	bl	1b794 <__assert_fail@plt+0x9c3c>
   1b870:	add	sp, sp, #12
   1b874:	pop	{pc}		; (ldr pc, [sp], #4)
   1b878:	push	{lr}		; (str lr, [sp, #-4]!)
   1b87c:	sub	sp, sp, #12
   1b880:	str	r3, [sp]
   1b884:	mov	r3, r2
   1b888:	mov	r2, r1
   1b88c:	mov	r1, r0
   1b890:	mov	r0, #0
   1b894:	bl	1b794 <__assert_fail@plt+0x9c3c>
   1b898:	add	sp, sp, #12
   1b89c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8a0:	ldr	r3, [pc]	; 1b8a8 <__assert_fail@plt+0x9d50>
   1b8a4:	b	1b0ac <__assert_fail@plt+0x9554>
   1b8a8:	ldrdeq	r5, [r3], -r4
   1b8ac:	mov	r2, r1
   1b8b0:	ldr	r3, [pc, #8]	; 1b8c0 <__assert_fail@plt+0x9d68>
   1b8b4:	mov	r1, r0
   1b8b8:	mov	r0, #0
   1b8bc:	b	1b0ac <__assert_fail@plt+0x9554>
   1b8c0:	ldrdeq	r5, [r3], -r4
   1b8c4:	ldr	r3, [pc, #4]	; 1b8d0 <__assert_fail@plt+0x9d78>
   1b8c8:	mvn	r2, #0
   1b8cc:	b	1b0ac <__assert_fail@plt+0x9554>
   1b8d0:	ldrdeq	r5, [r3], -r4
   1b8d4:	mov	r1, r0
   1b8d8:	ldr	r3, [pc, #8]	; 1b8e8 <__assert_fail@plt+0x9d90>
   1b8dc:	mvn	r2, #0
   1b8e0:	mov	r0, #0
   1b8e4:	b	1b0ac <__assert_fail@plt+0x9554>
   1b8e8:	ldrdeq	r5, [r3], -r4
   1b8ec:	push	{r4, r5, r6, lr}
   1b8f0:	mov	r2, r1
   1b8f4:	mov	r4, r1
   1b8f8:	mov	r1, #0
   1b8fc:	mov	r5, r0
   1b900:	bl	119d8 <memchr@plt>
   1b904:	cmp	r0, #0
   1b908:	subne	r0, r0, r5
   1b90c:	addne	r0, r0, #1
   1b910:	moveq	r0, r4
   1b914:	pop	{r4, r5, r6, pc}
   1b918:	push	{r4, r5, r6, lr}
   1b91c:	sub	sp, sp, #32
   1b920:	cmp	r1, #0
   1b924:	mov	r5, r0
   1b928:	ldr	r4, [sp, #48]	; 0x30
   1b92c:	ldr	r6, [sp, #52]	; 0x34
   1b930:	beq	1b9c0 <__assert_fail@plt+0x9e68>
   1b934:	strd	r2, [sp]
   1b938:	mov	r3, r1
   1b93c:	ldr	r2, [pc, #828]	; 1bc80 <__assert_fail@plt+0xa128>
   1b940:	mov	r1, #1
   1b944:	bl	119cc <__fprintf_chk@plt>
   1b948:	mov	r2, #5
   1b94c:	ldr	r1, [pc, #816]	; 1bc84 <__assert_fail@plt+0xa12c>
   1b950:	mov	r0, #0
   1b954:	bl	11774 <dcgettext@plt>
   1b958:	ldr	r3, [pc, #808]	; 1bc88 <__assert_fail@plt+0xa130>
   1b95c:	ldr	r2, [pc, #808]	; 1bc8c <__assert_fail@plt+0xa134>
   1b960:	str	r3, [sp]
   1b964:	mov	r1, #1
   1b968:	mov	r3, r0
   1b96c:	mov	r0, r5
   1b970:	bl	119cc <__fprintf_chk@plt>
   1b974:	ldr	r1, [pc, #788]	; 1bc90 <__assert_fail@plt+0xa138>
   1b978:	mov	r2, #5
   1b97c:	mov	r0, #0
   1b980:	bl	11774 <dcgettext@plt>
   1b984:	mov	r1, r5
   1b988:	bl	116a8 <fputs_unlocked@plt>
   1b98c:	cmp	r6, #9
   1b990:	ldrls	pc, [pc, r6, lsl #2]
   1b994:	b	1bc70 <__assert_fail@plt+0xa118>
   1b998:	andeq	fp, r1, ip, ror ip
   1b99c:	andeq	fp, r1, r4, asr #20
   1b9a0:	andeq	fp, r1, r0, ror sl
   1b9a4:	andeq	fp, r1, r4, lsr #21
   1b9a8:	andeq	fp, r1, r0, ror #21
   1b9ac:	andeq	fp, r1, r0, lsr #22
   1b9b0:	andeq	fp, r1, r8, ror #22
   1b9b4:			; <UNDEFINED> instruction: 0x0001bbb8
   1b9b8:	andeq	fp, r1, r0, lsl ip
   1b9bc:	ldrdeq	fp, [r1], -r8
   1b9c0:	str	r3, [sp]
   1b9c4:	mov	r1, #1
   1b9c8:	mov	r3, r2
   1b9cc:	ldr	r2, [pc, #704]	; 1bc94 <__assert_fail@plt+0xa13c>
   1b9d0:	bl	119cc <__fprintf_chk@plt>
   1b9d4:	b	1b948 <__assert_fail@plt+0x9df0>
   1b9d8:	ldr	r1, [pc, #696]	; 1bc98 <__assert_fail@plt+0xa140>
   1b9dc:	mov	r2, #5
   1b9e0:	mov	r0, #0
   1b9e4:	bl	11774 <dcgettext@plt>
   1b9e8:	ldr	r2, [r4, #32]
   1b9ec:	ldr	r3, [r4, #28]
   1b9f0:	ldr	r1, [r4, #24]
   1b9f4:	str	r2, [sp, #28]
   1b9f8:	ldr	r2, [r4, #20]
   1b9fc:	str	r3, [sp, #24]
   1ba00:	ldr	r3, [r4, #16]
   1ba04:	str	r1, [sp, #20]
   1ba08:	ldr	r1, [r4, #12]
   1ba0c:	str	r2, [sp, #16]
   1ba10:	ldr	r2, [r4, #8]
   1ba14:	str	r3, [sp, #12]
   1ba18:	ldr	r3, [r4, #4]
   1ba1c:	str	r1, [sp, #8]
   1ba20:	str	r2, [sp, #4]
   1ba24:	str	r3, [sp]
   1ba28:	mov	r1, #1
   1ba2c:	ldr	r3, [r4]
   1ba30:	mov	r2, r0
   1ba34:	mov	r0, r5
   1ba38:	bl	119cc <__fprintf_chk@plt>
   1ba3c:	add	sp, sp, #32
   1ba40:	pop	{r4, r5, r6, pc}
   1ba44:	mov	r2, #5
   1ba48:	ldr	r1, [pc, #588]	; 1bc9c <__assert_fail@plt+0xa144>
   1ba4c:	mov	r0, #0
   1ba50:	bl	11774 <dcgettext@plt>
   1ba54:	ldr	r3, [r4]
   1ba58:	mov	r1, #1
   1ba5c:	mov	r2, r0
   1ba60:	mov	r0, r5
   1ba64:	add	sp, sp, #32
   1ba68:	pop	{r4, r5, r6, lr}
   1ba6c:	b	119cc <__fprintf_chk@plt>
   1ba70:	mov	r2, #5
   1ba74:	ldr	r1, [pc, #548]	; 1bca0 <__assert_fail@plt+0xa148>
   1ba78:	mov	r0, #0
   1ba7c:	bl	11774 <dcgettext@plt>
   1ba80:	ldr	r2, [r4, #4]
   1ba84:	ldr	r3, [r4]
   1ba88:	mov	r1, #1
   1ba8c:	str	r2, [sp, #48]	; 0x30
   1ba90:	mov	r2, r0
   1ba94:	mov	r0, r5
   1ba98:	add	sp, sp, #32
   1ba9c:	pop	{r4, r5, r6, lr}
   1baa0:	b	119cc <__fprintf_chk@plt>
   1baa4:	mov	r2, #5
   1baa8:	ldr	r1, [pc, #500]	; 1bca4 <__assert_fail@plt+0xa14c>
   1baac:	mov	r0, #0
   1bab0:	bl	11774 <dcgettext@plt>
   1bab4:	ldr	r2, [r4, #8]
   1bab8:	ldr	r3, [r4, #4]
   1babc:	mov	r1, #1
   1bac0:	str	r2, [sp, #52]	; 0x34
   1bac4:	str	r3, [sp, #48]	; 0x30
   1bac8:	ldr	r3, [r4]
   1bacc:	mov	r2, r0
   1bad0:	mov	r0, r5
   1bad4:	add	sp, sp, #32
   1bad8:	pop	{r4, r5, r6, lr}
   1badc:	b	119cc <__fprintf_chk@plt>
   1bae0:	mov	r2, #5
   1bae4:	ldr	r1, [pc, #444]	; 1bca8 <__assert_fail@plt+0xa150>
   1bae8:	mov	r0, #0
   1baec:	bl	11774 <dcgettext@plt>
   1baf0:	ldr	r1, [r4, #12]
   1baf4:	ldr	r2, [r4, #8]
   1baf8:	ldr	r3, [r4, #4]
   1bafc:	str	r1, [sp, #8]
   1bb00:	str	r2, [sp, #4]
   1bb04:	str	r3, [sp]
   1bb08:	mov	r1, #1
   1bb0c:	ldr	r3, [r4]
   1bb10:	mov	r2, r0
   1bb14:	mov	r0, r5
   1bb18:	bl	119cc <__fprintf_chk@plt>
   1bb1c:	b	1ba3c <__assert_fail@plt+0x9ee4>
   1bb20:	mov	r2, #5
   1bb24:	ldr	r1, [pc, #384]	; 1bcac <__assert_fail@plt+0xa154>
   1bb28:	mov	r0, #0
   1bb2c:	bl	11774 <dcgettext@plt>
   1bb30:	ldr	r3, [r4, #16]
   1bb34:	ldr	r1, [r4, #12]
   1bb38:	ldr	r2, [r4, #8]
   1bb3c:	str	r3, [sp, #12]
   1bb40:	ldr	r3, [r4, #4]
   1bb44:	str	r1, [sp, #8]
   1bb48:	str	r2, [sp, #4]
   1bb4c:	str	r3, [sp]
   1bb50:	mov	r1, #1
   1bb54:	ldr	r3, [r4]
   1bb58:	mov	r2, r0
   1bb5c:	mov	r0, r5
   1bb60:	bl	119cc <__fprintf_chk@plt>
   1bb64:	b	1ba3c <__assert_fail@plt+0x9ee4>
   1bb68:	mov	r2, #5
   1bb6c:	ldr	r1, [pc, #316]	; 1bcb0 <__assert_fail@plt+0xa158>
   1bb70:	mov	r0, #0
   1bb74:	bl	11774 <dcgettext@plt>
   1bb78:	ldr	r2, [r4, #20]
   1bb7c:	ldr	r3, [r4, #16]
   1bb80:	ldr	r1, [r4, #12]
   1bb84:	str	r2, [sp, #16]
   1bb88:	ldr	r2, [r4, #8]
   1bb8c:	str	r3, [sp, #12]
   1bb90:	ldr	r3, [r4, #4]
   1bb94:	str	r1, [sp, #8]
   1bb98:	str	r2, [sp, #4]
   1bb9c:	str	r3, [sp]
   1bba0:	mov	r1, #1
   1bba4:	ldr	r3, [r4]
   1bba8:	mov	r2, r0
   1bbac:	mov	r0, r5
   1bbb0:	bl	119cc <__fprintf_chk@plt>
   1bbb4:	b	1ba3c <__assert_fail@plt+0x9ee4>
   1bbb8:	mov	r2, #5
   1bbbc:	ldr	r1, [pc, #240]	; 1bcb4 <__assert_fail@plt+0xa15c>
   1bbc0:	mov	r0, #0
   1bbc4:	bl	11774 <dcgettext@plt>
   1bbc8:	ldr	r1, [r4, #24]
   1bbcc:	ldr	r2, [r4, #20]
   1bbd0:	ldr	r3, [r4, #16]
   1bbd4:	str	r1, [sp, #20]
   1bbd8:	ldr	r1, [r4, #12]
   1bbdc:	str	r2, [sp, #16]
   1bbe0:	ldr	r2, [r4, #8]
   1bbe4:	str	r3, [sp, #12]
   1bbe8:	ldr	r3, [r4, #4]
   1bbec:	str	r1, [sp, #8]
   1bbf0:	str	r2, [sp, #4]
   1bbf4:	str	r3, [sp]
   1bbf8:	mov	r1, #1
   1bbfc:	ldr	r3, [r4]
   1bc00:	mov	r2, r0
   1bc04:	mov	r0, r5
   1bc08:	bl	119cc <__fprintf_chk@plt>
   1bc0c:	b	1ba3c <__assert_fail@plt+0x9ee4>
   1bc10:	mov	r2, #5
   1bc14:	ldr	r1, [pc, #156]	; 1bcb8 <__assert_fail@plt+0xa160>
   1bc18:	mov	r0, #0
   1bc1c:	bl	11774 <dcgettext@plt>
   1bc20:	ldr	r3, [r4, #28]
   1bc24:	ldr	r1, [r4, #24]
   1bc28:	ldr	r2, [r4, #20]
   1bc2c:	str	r3, [sp, #24]
   1bc30:	ldr	r3, [r4, #16]
   1bc34:	str	r1, [sp, #20]
   1bc38:	ldr	r1, [r4, #12]
   1bc3c:	str	r2, [sp, #16]
   1bc40:	ldr	r2, [r4, #8]
   1bc44:	str	r3, [sp, #12]
   1bc48:	ldr	r3, [r4, #4]
   1bc4c:	str	r1, [sp, #8]
   1bc50:	str	r2, [sp, #4]
   1bc54:	str	r3, [sp]
   1bc58:	mov	r1, #1
   1bc5c:	ldr	r3, [r4]
   1bc60:	mov	r2, r0
   1bc64:	mov	r0, r5
   1bc68:	bl	119cc <__fprintf_chk@plt>
   1bc6c:	b	1ba3c <__assert_fail@plt+0x9ee4>
   1bc70:	mov	r2, #5
   1bc74:	ldr	r1, [pc, #64]	; 1bcbc <__assert_fail@plt+0xa164>
   1bc78:	b	1b9e0 <__assert_fail@plt+0x9e88>
   1bc7c:	bl	11b28 <abort@plt>
   1bc80:	andeq	r3, r2, r0, ror sl
   1bc84:	andeq	r3, r2, r4, lsl #21
   1bc88:	andeq	r0, r0, r2, ror #15
   1bc8c:	andeq	r3, r2, r8, asr sp
   1bc90:	andeq	r3, r2, r8, lsl #21
   1bc94:	andeq	r3, r2, ip, ror sl
   1bc98:	andeq	r3, r2, r0, ror #24
   1bc9c:	andeq	r3, r2, r4, asr fp
   1bca0:	andeq	r3, r2, r4, ror #22
   1bca4:	andeq	r3, r2, ip, ror fp
   1bca8:	muleq	r2, r8, fp
   1bcac:			; <UNDEFINED> instruction: 0x00023bb8
   1bcb0:	ldrdeq	r3, [r2], -ip
   1bcb4:	andeq	r3, r2, r4, lsl #24
   1bcb8:	andeq	r3, r2, r0, lsr ip
   1bcbc:	muleq	r2, r4, ip
   1bcc0:	push	{r4, r5, lr}
   1bcc4:	sub	sp, sp, #12
   1bcc8:	ldr	r5, [sp, #24]
   1bccc:	ldr	ip, [r5]
   1bcd0:	cmp	ip, #0
   1bcd4:	beq	1bcf0 <__assert_fail@plt+0xa198>
   1bcd8:	mov	lr, r5
   1bcdc:	mov	ip, #0
   1bce0:	ldr	r4, [lr, #4]!
   1bce4:	add	ip, ip, #1
   1bce8:	cmp	r4, #0
   1bcec:	bne	1bce0 <__assert_fail@plt+0xa188>
   1bcf0:	stm	sp, {r5, ip}
   1bcf4:	bl	1b918 <__assert_fail@plt+0x9dc0>
   1bcf8:	add	sp, sp, #12
   1bcfc:	pop	{r4, r5, pc}
   1bd00:	push	{r4, r5, r6, lr}
   1bd04:	sub	sp, sp, #56	; 0x38
   1bd08:	ldr	r6, [pc, #88]	; 1bd68 <__assert_fail@plt+0xa210>
   1bd0c:	ldr	r5, [sp, #72]	; 0x48
   1bd10:	add	r4, sp, #8
   1bd14:	ldr	ip, [r6]
   1bd18:	str	ip, [sp, #52]	; 0x34
   1bd1c:	mov	ip, #0
   1bd20:	ldr	lr, [r5], #4
   1bd24:	cmp	lr, #0
   1bd28:	str	lr, [r4, #4]!
   1bd2c:	beq	1bd3c <__assert_fail@plt+0xa1e4>
   1bd30:	add	ip, ip, #1
   1bd34:	cmp	ip, #10
   1bd38:	bne	1bd20 <__assert_fail@plt+0xa1c8>
   1bd3c:	add	lr, sp, #12
   1bd40:	str	ip, [sp, #4]
   1bd44:	str	lr, [sp]
   1bd48:	bl	1b918 <__assert_fail@plt+0x9dc0>
   1bd4c:	ldr	r2, [sp, #52]	; 0x34
   1bd50:	ldr	r3, [r6]
   1bd54:	cmp	r2, r3
   1bd58:	bne	1bd64 <__assert_fail@plt+0xa20c>
   1bd5c:	add	sp, sp, #56	; 0x38
   1bd60:	pop	{r4, r5, r6, pc}
   1bd64:	bl	11780 <__stack_chk_fail@plt>
   1bd68:	andeq	r4, r3, r8, lsl #30
   1bd6c:	push	{r3}		; (str r3, [sp, #-4]!)
   1bd70:	mov	ip, #0
   1bd74:	push	{r4, r5, r6, lr}
   1bd78:	sub	sp, sp, #60	; 0x3c
   1bd7c:	ldr	r6, [pc, #100]	; 1bde8 <__assert_fail@plt+0xa290>
   1bd80:	add	r5, sp, #8
   1bd84:	add	r4, sp, #80	; 0x50
   1bd88:	ldr	r3, [r6]
   1bd8c:	str	r4, [sp, #8]
   1bd90:	str	r3, [sp, #52]	; 0x34
   1bd94:	ldr	r3, [sp, #76]	; 0x4c
   1bd98:	ldr	lr, [r4], #4
   1bd9c:	cmp	lr, #0
   1bda0:	str	lr, [r5, #4]!
   1bda4:	beq	1bdb4 <__assert_fail@plt+0xa25c>
   1bda8:	add	ip, ip, #1
   1bdac:	cmp	ip, #10
   1bdb0:	bne	1bd98 <__assert_fail@plt+0xa240>
   1bdb4:	add	lr, sp, #12
   1bdb8:	str	ip, [sp, #4]
   1bdbc:	str	lr, [sp]
   1bdc0:	bl	1b918 <__assert_fail@plt+0x9dc0>
   1bdc4:	ldr	r2, [sp, #52]	; 0x34
   1bdc8:	ldr	r3, [r6]
   1bdcc:	cmp	r2, r3
   1bdd0:	bne	1bde4 <__assert_fail@plt+0xa28c>
   1bdd4:	add	sp, sp, #60	; 0x3c
   1bdd8:	pop	{r4, r5, r6, lr}
   1bddc:	add	sp, sp, #4
   1bde0:	bx	lr
   1bde4:	bl	11780 <__stack_chk_fail@plt>
   1bde8:	andeq	r4, r3, r8, lsl #30
   1bdec:	push	{r4, lr}
   1bdf0:	mov	r2, #5
   1bdf4:	ldr	r1, [pc, #88]	; 1be54 <__assert_fail@plt+0xa2fc>
   1bdf8:	mov	r0, #0
   1bdfc:	bl	11774 <dcgettext@plt>
   1be00:	ldr	r2, [pc, #80]	; 1be58 <__assert_fail@plt+0xa300>
   1be04:	mov	r1, r0
   1be08:	mov	r0, #1
   1be0c:	bl	119b4 <__printf_chk@plt>
   1be10:	mov	r2, #5
   1be14:	ldr	r1, [pc, #64]	; 1be5c <__assert_fail@plt+0xa304>
   1be18:	mov	r0, #0
   1be1c:	bl	11774 <dcgettext@plt>
   1be20:	ldr	r3, [pc, #56]	; 1be60 <__assert_fail@plt+0xa308>
   1be24:	ldr	r2, [pc, #56]	; 1be64 <__assert_fail@plt+0xa30c>
   1be28:	mov	r1, r0
   1be2c:	mov	r0, #1
   1be30:	bl	119b4 <__printf_chk@plt>
   1be34:	ldr	r1, [pc, #44]	; 1be68 <__assert_fail@plt+0xa310>
   1be38:	mov	r2, #5
   1be3c:	mov	r0, #0
   1be40:	bl	11774 <dcgettext@plt>
   1be44:	ldr	r3, [pc, #32]	; 1be6c <__assert_fail@plt+0xa314>
   1be48:	pop	{r4, lr}
   1be4c:	ldr	r1, [r3]
   1be50:	b	116a8 <fputs_unlocked@plt>
   1be54:	ldrdeq	r3, [r2], -r0
   1be58:	andeq	r3, r2, r8, ror #25
   1be5c:	andeq	r3, r2, r0, lsl #26
   1be60:	andeq	r3, r2, r0, lsr #32
   1be64:	andeq	r3, r2, r8, asr #32
   1be68:	andeq	r3, r2, r4, lsl sp
   1be6c:	andeq	r5, r3, r4, lsr #4
   1be70:	push	{r4, lr}
   1be74:	mov	r4, r0
   1be78:	bl	118b8 <malloc@plt>
   1be7c:	adds	r4, r4, #0
   1be80:	movne	r4, #1
   1be84:	cmp	r0, #0
   1be88:	movne	r4, #0
   1be8c:	cmp	r4, #0
   1be90:	popeq	{r4, pc}
   1be94:	bl	1c0b8 <__assert_fail@plt+0xa560>
   1be98:	push	{r4, r5, r6, lr}
   1be9c:	umull	r4, r5, r0, r1
   1bea0:	adds	r3, r5, #0
   1bea4:	movne	r3, #1
   1bea8:	cmp	r4, #0
   1beac:	blt	1bec4 <__assert_fail@plt+0xa36c>
   1beb0:	cmp	r3, #0
   1beb4:	bne	1bec4 <__assert_fail@plt+0xa36c>
   1beb8:	mul	r0, r1, r0
   1bebc:	pop	{r4, r5, r6, lr}
   1bec0:	b	1be70 <__assert_fail@plt+0xa318>
   1bec4:	bl	1c0b8 <__assert_fail@plt+0xa560>
   1bec8:	b	1be70 <__assert_fail@plt+0xa318>
   1becc:	adds	r3, r0, #0
   1bed0:	movne	r3, #1
   1bed4:	cmp	r1, #0
   1bed8:	movne	r3, #0
   1bedc:	cmp	r3, #0
   1bee0:	push	{r4, lr}
   1bee4:	bne	1bf0c <__assert_fail@plt+0xa3b4>
   1bee8:	mov	r4, r1
   1beec:	bl	11798 <realloc@plt>
   1bef0:	adds	r4, r4, #0
   1bef4:	movne	r4, #1
   1bef8:	cmp	r0, #0
   1befc:	movne	r4, #0
   1bf00:	cmp	r4, #0
   1bf04:	popeq	{r4, pc}
   1bf08:	bl	1c0b8 <__assert_fail@plt+0xa560>
   1bf0c:	bl	11720 <free@plt>
   1bf10:	mov	r0, #0
   1bf14:	pop	{r4, pc}
   1bf18:	push	{r4, r5, r6, lr}
   1bf1c:	umull	r4, r5, r1, r2
   1bf20:	adds	r3, r5, #0
   1bf24:	movne	r3, #1
   1bf28:	cmp	r4, #0
   1bf2c:	blt	1bf44 <__assert_fail@plt+0xa3ec>
   1bf30:	cmp	r3, #0
   1bf34:	bne	1bf44 <__assert_fail@plt+0xa3ec>
   1bf38:	mul	r1, r2, r1
   1bf3c:	pop	{r4, r5, r6, lr}
   1bf40:	b	1becc <__assert_fail@plt+0xa374>
   1bf44:	bl	1c0b8 <__assert_fail@plt+0xa560>
   1bf48:	push	{r4, r5, r6, r7, r8, lr}
   1bf4c:	subs	r7, r0, #0
   1bf50:	mov	r6, r1
   1bf54:	mov	r5, r2
   1bf58:	ldr	r4, [r1]
   1bf5c:	beq	1bf90 <__assert_fail@plt+0xa438>
   1bf60:	mov	r1, r2
   1bf64:	ldr	r0, [pc, #104]	; 1bfd4 <__assert_fail@plt+0xa47c>
   1bf68:	bl	2145c <fts_children@@Base+0x13d0>
   1bf6c:	cmp	r0, r4
   1bf70:	bls	1bfb4 <__assert_fail@plt+0xa45c>
   1bf74:	add	r3, r4, #1
   1bf78:	add	r4, r3, r4, lsr #1
   1bf7c:	str	r4, [r6]
   1bf80:	mul	r1, r5, r4
   1bf84:	mov	r0, r7
   1bf88:	pop	{r4, r5, r6, r7, r8, lr}
   1bf8c:	b	1becc <__assert_fail@plt+0xa374>
   1bf90:	cmp	r4, #0
   1bf94:	beq	1bfb8 <__assert_fail@plt+0xa460>
   1bf98:	umull	r0, r1, r4, r5
   1bf9c:	adds	r3, r1, #0
   1bfa0:	movne	r3, #1
   1bfa4:	cmp	r0, #0
   1bfa8:	blt	1bfb4 <__assert_fail@plt+0xa45c>
   1bfac:	cmp	r3, #0
   1bfb0:	beq	1bf7c <__assert_fail@plt+0xa424>
   1bfb4:	bl	1c0b8 <__assert_fail@plt+0xa560>
   1bfb8:	mov	r1, r2
   1bfbc:	mov	r0, #64	; 0x40
   1bfc0:	bl	2145c <fts_children@@Base+0x13d0>
   1bfc4:	cmp	r5, #64	; 0x40
   1bfc8:	movls	r4, r0
   1bfcc:	addhi	r4, r0, #1
   1bfd0:	b	1bf98 <__assert_fail@plt+0xa440>
   1bfd4:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   1bfd8:	cmp	r0, #0
   1bfdc:	ldr	r3, [r1]
   1bfe0:	beq	1c004 <__assert_fail@plt+0xa4ac>
   1bfe4:	ldr	r2, [pc, #60]	; 1c028 <__assert_fail@plt+0xa4d0>
   1bfe8:	cmp	r3, r2
   1bfec:	bhi	1c020 <__assert_fail@plt+0xa4c8>
   1bff0:	add	r2, r3, #1
   1bff4:	add	r3, r2, r3, lsr #1
   1bff8:	str	r3, [r1]
   1bffc:	mov	r1, r3
   1c000:	b	1becc <__assert_fail@plt+0xa374>
   1c004:	cmp	r3, #0
   1c008:	bne	1c01c <__assert_fail@plt+0xa4c4>
   1c00c:	mov	r3, #64	; 0x40
   1c010:	str	r3, [r1]
   1c014:	mov	r1, r3
   1c018:	b	1becc <__assert_fail@plt+0xa374>
   1c01c:	bge	1bff8 <__assert_fail@plt+0xa4a0>
   1c020:	push	{r4, lr}
   1c024:	bl	1c0b8 <__assert_fail@plt+0xa560>
   1c028:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   1c02c:	push	{r4, lr}
   1c030:	mov	r4, r0
   1c034:	bl	1be70 <__assert_fail@plt+0xa318>
   1c038:	mov	r2, r4
   1c03c:	mov	r1, #0
   1c040:	pop	{r4, lr}
   1c044:	b	119a8 <memset@plt>
   1c048:	push	{r4, r5, r6, lr}
   1c04c:	umull	r4, r5, r0, r1
   1c050:	adds	r3, r5, #0
   1c054:	movne	r3, #1
   1c058:	cmp	r4, #0
   1c05c:	blt	1c074 <__assert_fail@plt+0xa51c>
   1c060:	cmp	r3, #0
   1c064:	bne	1c074 <__assert_fail@plt+0xa51c>
   1c068:	bl	1169c <calloc@plt>
   1c06c:	cmp	r0, #0
   1c070:	popne	{r4, r5, r6, pc}
   1c074:	bl	1c0b8 <__assert_fail@plt+0xa560>
   1c078:	push	{r4, r5, r6, lr}
   1c07c:	mov	r4, r1
   1c080:	mov	r5, r0
   1c084:	mov	r0, r1
   1c088:	bl	1be70 <__assert_fail@plt+0xa318>
   1c08c:	mov	r2, r4
   1c090:	mov	r1, r5
   1c094:	pop	{r4, r5, r6, lr}
   1c098:	b	11738 <memcpy@plt>
   1c09c:	push	{r4, lr}
   1c0a0:	mov	r4, r0
   1c0a4:	bl	11954 <strlen@plt>
   1c0a8:	add	r1, r0, #1
   1c0ac:	mov	r0, r4
   1c0b0:	pop	{r4, lr}
   1c0b4:	b	1c078 <__assert_fail@plt+0xa520>
   1c0b8:	ldr	r3, [pc, #44]	; 1c0ec <__assert_fail@plt+0xa594>
   1c0bc:	push	{r4, lr}
   1c0c0:	mov	r2, #5
   1c0c4:	ldr	r1, [pc, #36]	; 1c0f0 <__assert_fail@plt+0xa598>
   1c0c8:	mov	r0, #0
   1c0cc:	ldr	r4, [r3]
   1c0d0:	bl	11774 <dcgettext@plt>
   1c0d4:	ldr	r2, [pc, #24]	; 1c0f4 <__assert_fail@plt+0xa59c>
   1c0d8:	mov	r1, #0
   1c0dc:	mov	r3, r0
   1c0e0:	mov	r0, r4
   1c0e4:	bl	1187c <error@plt>
   1c0e8:	bl	11b28 <abort@plt>
   1c0ec:	andeq	r5, r3, r0, asr #3
   1c0f0:	andeq	r3, r2, r8, lsl #27
   1c0f4:	andeq	r3, r2, r4, lsr #15
   1c0f8:	push	{r4, lr}
   1c0fc:	orr	r1, r1, #512	; 0x200
   1c100:	bl	1f3f4 <fts_open@@Base>
   1c104:	cmp	r0, #0
   1c108:	popne	{r4, pc}
   1c10c:	bl	11984 <__errno_location@plt>
   1c110:	ldr	r3, [r0]
   1c114:	cmp	r3, #22
   1c118:	beq	1c120 <__assert_fail@plt+0xa5c8>
   1c11c:	bl	1c0b8 <__assert_fail@plt+0xa560>
   1c120:	ldr	r3, [pc, #12]	; 1c134 <__assert_fail@plt+0xa5dc>
   1c124:	mov	r2, #41	; 0x29
   1c128:	ldr	r1, [pc, #8]	; 1c138 <__assert_fail@plt+0xa5e0>
   1c12c:	ldr	r0, [pc, #8]	; 1c13c <__assert_fail@plt+0xa5e4>
   1c130:	bl	11b58 <__assert_fail@plt>
   1c134:	muleq	r2, ip, sp
   1c138:	andeq	r3, r2, r8, lsr #27
   1c13c:			; <UNDEFINED> instruction: 0x00023db4
   1c140:	ldr	r3, [r0, #48]	; 0x30
   1c144:	and	r3, r3, #17
   1c148:	cmp	r3, #16
   1c14c:	beq	1c170 <__assert_fail@plt+0xa618>
   1c150:	cmp	r3, #17
   1c154:	beq	1c160 <__assert_fail@plt+0xa608>
   1c158:	mov	r0, #0
   1c15c:	bx	lr
   1c160:	ldr	r0, [r1, #48]	; 0x30
   1c164:	adds	r0, r0, #0
   1c168:	movne	r0, #1
   1c16c:	bx	lr
   1c170:	mov	r0, #1
   1c174:	bx	lr
   1c178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c17c:	cmp	r2, #36	; 0x24
   1c180:	mov	r6, r2
   1c184:	ldr	r2, [pc, #2760]	; 1cc54 <__assert_fail@plt+0xb0fc>
   1c188:	sub	sp, sp, #36	; 0x24
   1c18c:	ldr	r2, [r2]
   1c190:	ldr	r9, [sp, #72]	; 0x48
   1c194:	str	r2, [sp, #28]
   1c198:	bhi	1cc3c <__assert_fail@plt+0xb0e4>
   1c19c:	cmp	r1, #0
   1c1a0:	mov	r5, r1
   1c1a4:	mov	r8, r0
   1c1a8:	addeq	r5, sp, #24
   1c1ac:	mov	sl, r3
   1c1b0:	bl	11984 <__errno_location@plt>
   1c1b4:	mov	r4, #0
   1c1b8:	mov	r2, r6
   1c1bc:	mov	r3, r4
   1c1c0:	mov	r1, r5
   1c1c4:	str	r4, [r0]
   1c1c8:	mov	fp, r0
   1c1cc:	mov	r0, r8
   1c1d0:	bl	11abc <__strtoll_internal@plt>
   1c1d4:	ldr	r3, [r5]
   1c1d8:	cmp	r3, r8
   1c1dc:	str	r3, [sp, #8]
   1c1e0:	mov	r6, r0
   1c1e4:	mov	r7, r1
   1c1e8:	beq	1c240 <__assert_fail@plt+0xa6e8>
   1c1ec:	ldr	r4, [fp]
   1c1f0:	cmp	r4, #0
   1c1f4:	beq	1c204 <__assert_fail@plt+0xa6ac>
   1c1f8:	cmp	r4, #34	; 0x22
   1c1fc:	bne	1c340 <__assert_fail@plt+0xa7e8>
   1c200:	mov	r4, #1
   1c204:	cmp	r9, #0
   1c208:	beq	1c21c <__assert_fail@plt+0xa6c4>
   1c20c:	ldr	r3, [sp, #8]
   1c210:	ldrb	r8, [r3]
   1c214:	cmp	r8, #0
   1c218:	bne	1c448 <__assert_fail@plt+0xa8f0>
   1c21c:	strd	r6, [sl]
   1c220:	ldr	r3, [pc, #2604]	; 1cc54 <__assert_fail@plt+0xb0fc>
   1c224:	ldr	r2, [sp, #28]
   1c228:	mov	r0, r4
   1c22c:	ldr	r3, [r3]
   1c230:	cmp	r2, r3
   1c234:	bne	1cc50 <__assert_fail@plt+0xb0f8>
   1c238:	add	sp, sp, #36	; 0x24
   1c23c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c240:	cmp	r9, r4
   1c244:	beq	1c340 <__assert_fail@plt+0xa7e8>
   1c248:	ldrb	r8, [r8]
   1c24c:	cmp	r8, r4
   1c250:	beq	1c340 <__assert_fail@plt+0xa7e8>
   1c254:	mov	r1, r8
   1c258:	mov	r0, r9
   1c25c:	bl	11960 <strchr@plt>
   1c260:	cmp	r0, r4
   1c264:	movne	r6, #1
   1c268:	movne	r7, #0
   1c26c:	beq	1c340 <__assert_fail@plt+0xa7e8>
   1c270:	sub	fp, r8, #69	; 0x45
   1c274:	cmp	fp, #47	; 0x2f
   1c278:	ldrls	pc, [pc, fp, lsl #2]
   1c27c:	b	1c468 <__assert_fail@plt+0xa910>
   1c280:	andeq	ip, r1, r8, asr #6
   1c284:	andeq	ip, r1, r8, ror #8
   1c288:	andeq	ip, r1, r8, asr #6
   1c28c:	andeq	ip, r1, r8, ror #8
   1c290:	andeq	ip, r1, r8, ror #8
   1c294:	andeq	ip, r1, r8, ror #8
   1c298:	andeq	ip, r1, r8, asr #6
   1c29c:	andeq	ip, r1, r8, ror #8
   1c2a0:	andeq	ip, r1, r8, asr #6
   1c2a4:	andeq	ip, r1, r8, ror #8
   1c2a8:	andeq	ip, r1, r8, ror #8
   1c2ac:	andeq	ip, r1, r8, asr #6
   1c2b0:	andeq	ip, r1, r8, ror #8
   1c2b4:	andeq	ip, r1, r8, ror #8
   1c2b8:	andeq	ip, r1, r8, ror #8
   1c2bc:	andeq	ip, r1, r8, asr #6
   1c2c0:	andeq	ip, r1, r8, ror #8
   1c2c4:	andeq	ip, r1, r8, ror #8
   1c2c8:	andeq	ip, r1, r8, ror #8
   1c2cc:	andeq	ip, r1, r8, ror #8
   1c2d0:	andeq	ip, r1, r8, asr #6
   1c2d4:	andeq	ip, r1, r8, asr #6
   1c2d8:	andeq	ip, r1, r8, ror #8
   1c2dc:	andeq	ip, r1, r8, ror #8
   1c2e0:	andeq	ip, r1, r8, ror #8
   1c2e4:	andeq	ip, r1, r8, ror #8
   1c2e8:	andeq	ip, r1, r8, ror #8
   1c2ec:	andeq	ip, r1, r8, ror #8
   1c2f0:	andeq	ip, r1, r8, ror #8
   1c2f4:	andeq	ip, r1, r8, ror #8
   1c2f8:	andeq	ip, r1, r8, ror #8
   1c2fc:	andeq	ip, r1, r8, ror #8
   1c300:	andeq	ip, r1, r8, ror #8
   1c304:	andeq	ip, r1, r8, ror #8
   1c308:	andeq	ip, r1, r8, asr #6
   1c30c:	andeq	ip, r1, r8, ror #8
   1c310:	andeq	ip, r1, r8, ror #8
   1c314:	andeq	ip, r1, r8, ror #8
   1c318:	andeq	ip, r1, r8, asr #6
   1c31c:	andeq	ip, r1, r8, ror #8
   1c320:	andeq	ip, r1, r8, asr #6
   1c324:	andeq	ip, r1, r8, ror #8
   1c328:	andeq	ip, r1, r8, ror #8
   1c32c:	andeq	ip, r1, r8, ror #8
   1c330:	andeq	ip, r1, r8, ror #8
   1c334:	andeq	ip, r1, r8, ror #8
   1c338:	andeq	ip, r1, r8, ror #8
   1c33c:	andeq	ip, r1, r8, asr #6
   1c340:	mov	r4, #4
   1c344:	b	1c220 <__assert_fail@plt+0xa6c8>
   1c348:	mov	r0, r9
   1c34c:	mov	r1, #48	; 0x30
   1c350:	bl	11960 <strchr@plt>
   1c354:	cmp	r0, #0
   1c358:	beq	1c468 <__assert_fail@plt+0xa910>
   1c35c:	ldr	r3, [sp, #8]
   1c360:	ldrb	r3, [r3, #1]
   1c364:	cmp	r3, #68	; 0x44
   1c368:	beq	1cc14 <__assert_fail@plt+0xb0bc>
   1c36c:	cmp	r3, #105	; 0x69
   1c370:	beq	1cc20 <__assert_fail@plt+0xb0c8>
   1c374:	cmp	r3, #66	; 0x42
   1c378:	beq	1cc14 <__assert_fail@plt+0xb0bc>
   1c37c:	cmp	fp, #47	; 0x2f
   1c380:	ldrls	pc, [pc, fp, lsl #2]
   1c384:	b	1c45c <__assert_fail@plt+0xa904>
   1c388:	andeq	ip, r1, r4, asr fp
   1c38c:	andeq	ip, r1, ip, asr r4
   1c390:	andeq	ip, r1, r0, lsr fp
   1c394:	andeq	ip, r1, ip, asr r4
   1c398:	andeq	ip, r1, ip, asr r4
   1c39c:	andeq	ip, r1, ip, asr r4
   1c3a0:	andeq	ip, r1, r8, lsl fp
   1c3a4:	andeq	ip, r1, ip, asr r4
   1c3a8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3ac:	andeq	ip, r1, ip, asr r4
   1c3b0:	andeq	ip, r1, ip, asr r4
   1c3b4:	ldrdeq	ip, [r1], -r8
   1c3b8:	andeq	ip, r1, ip, asr r4
   1c3bc:	andeq	ip, r1, ip, asr r4
   1c3c0:	andeq	ip, r1, ip, asr r4
   1c3c4:			; <UNDEFINED> instruction: 0x0001cab4
   1c3c8:	andeq	ip, r1, ip, asr r4
   1c3cc:	andeq	ip, r1, ip, asr r4
   1c3d0:	andeq	ip, r1, ip, asr r4
   1c3d4:	andeq	ip, r1, ip, asr r4
   1c3d8:	muleq	r1, r0, sl
   1c3dc:	andeq	ip, r1, ip, ror #20
   1c3e0:	andeq	ip, r1, ip, asr r4
   1c3e4:	andeq	ip, r1, ip, asr r4
   1c3e8:	andeq	ip, r1, ip, asr r4
   1c3ec:	andeq	ip, r1, ip, asr r4
   1c3f0:	andeq	ip, r1, ip, asr r4
   1c3f4:	andeq	ip, r1, ip, asr r4
   1c3f8:	andeq	ip, r1, ip, asr r4
   1c3fc:	andeq	ip, r1, r4, lsr #12
   1c400:	andeq	ip, r1, r8, ror fp
   1c404:	andeq	ip, r1, ip, asr r4
   1c408:	andeq	ip, r1, ip, asr r4
   1c40c:	andeq	ip, r1, ip, asr r4
   1c410:	andeq	ip, r1, r0, lsr fp
   1c414:	andeq	ip, r1, ip, asr r4
   1c418:	andeq	ip, r1, ip, asr r4
   1c41c:	andeq	ip, r1, ip, asr r4
   1c420:	andeq	ip, r1, r8, lsl fp
   1c424:	andeq	ip, r1, ip, asr r4
   1c428:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c42c:	andeq	ip, r1, ip, asr r4
   1c430:	andeq	ip, r1, ip, asr r4
   1c434:	andeq	ip, r1, ip, asr r4
   1c438:	andeq	ip, r1, ip, asr r4
   1c43c:	andeq	ip, r1, ip, asr r4
   1c440:	andeq	ip, r1, ip, asr r4
   1c444:			; <UNDEFINED> instruction: 0x0001cab4
   1c448:	mov	r1, r8
   1c44c:	mov	r0, r9
   1c450:	bl	11960 <strchr@plt>
   1c454:	cmp	r0, #0
   1c458:	bne	1c270 <__assert_fail@plt+0xa718>
   1c45c:	strd	r6, [sl]
   1c460:	orr	r4, r4, #2
   1c464:	b	1c220 <__assert_fail@plt+0xa6c8>
   1c468:	mov	fp, #1
   1c46c:	mov	r3, #1024	; 0x400
   1c470:	sub	r8, r8, #66	; 0x42
   1c474:	cmp	r8, #53	; 0x35
   1c478:	ldrls	pc, [pc, r8, lsl #2]
   1c47c:	b	1c45c <__assert_fail@plt+0xa904>
   1c480:	andeq	ip, r1, r0, ror #12
   1c484:	andeq	ip, r1, ip, asr r4
   1c488:	andeq	ip, r1, ip, asr r4
   1c48c:	ldrdeq	ip, [r1], -r8
   1c490:	andeq	ip, r1, ip, asr r4
   1c494:	andeq	ip, r1, ip, lsl r8
   1c498:	andeq	ip, r1, ip, asr r4
   1c49c:	andeq	ip, r1, ip, asr r4
   1c4a0:	andeq	ip, r1, ip, asr r4
   1c4a4:	andeq	ip, r1, r0, asr #15
   1c4a8:	andeq	ip, r1, ip, asr r4
   1c4ac:	andeq	ip, r1, r8, asr r5
   1c4b0:	andeq	ip, r1, ip, asr r4
   1c4b4:	andeq	ip, r1, ip, asr r4
   1c4b8:	muleq	r1, r8, r6
   1c4bc:	andeq	ip, r1, ip, asr r4
   1c4c0:	andeq	ip, r1, ip, asr r4
   1c4c4:	andeq	ip, r1, ip, asr r4
   1c4c8:			; <UNDEFINED> instruction: 0x0001c8b0
   1c4cc:	andeq	ip, r1, ip, asr r4
   1c4d0:	andeq	ip, r1, ip, asr r4
   1c4d4:	andeq	ip, r1, ip, asr r4
   1c4d8:	andeq	ip, r1, ip, asr r4
   1c4dc:	andeq	ip, r1, ip, lsr #14
   1c4e0:	andeq	ip, r1, r4, asr #18
   1c4e4:	andeq	ip, r1, ip, asr r4
   1c4e8:	andeq	ip, r1, ip, asr r4
   1c4ec:	andeq	ip, r1, ip, asr r4
   1c4f0:	andeq	ip, r1, ip, asr r4
   1c4f4:	andeq	ip, r1, ip, asr r4
   1c4f8:	andeq	ip, r1, ip, asr r4
   1c4fc:	andeq	ip, r1, ip, asr r4
   1c500:	andeq	ip, r1, r8, lsr #12
   1c504:	andeq	ip, r1, r4, ror #11
   1c508:	andeq	ip, r1, ip, asr r4
   1c50c:	andeq	ip, r1, ip, asr r4
   1c510:	andeq	ip, r1, ip, asr r4
   1c514:	andeq	ip, r1, ip, lsl r8
   1c518:	andeq	ip, r1, ip, asr r4
   1c51c:	andeq	ip, r1, ip, asr r4
   1c520:	andeq	ip, r1, ip, asr r4
   1c524:	andeq	ip, r1, r0, asr #15
   1c528:	andeq	ip, r1, ip, asr r4
   1c52c:	andeq	ip, r1, r8, asr r5
   1c530:	andeq	ip, r1, ip, asr r4
   1c534:	andeq	ip, r1, ip, asr r4
   1c538:	andeq	ip, r1, ip, asr r4
   1c53c:	andeq	ip, r1, ip, asr r4
   1c540:	andeq	ip, r1, ip, asr r4
   1c544:	andeq	ip, r1, ip, asr r4
   1c548:			; <UNDEFINED> instruction: 0x0001c8b0
   1c54c:	andeq	ip, r1, ip, asr r4
   1c550:	andeq	ip, r1, ip, asr r4
   1c554:	andeq	ip, r1, r0, lsl #12
   1c558:	asr	r9, r3, #31
   1c55c:	mov	r2, r3
   1c560:	mov	r8, r3
   1c564:	mov	r0, #0
   1c568:	mov	r3, r9
   1c56c:	mov	r1, #-2147483648	; 0x80000000
   1c570:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c574:	strd	r0, [sp]
   1c578:	ldrd	r2, [sp]
   1c57c:	cmp	r6, r2
   1c580:	sbcs	r3, r7, r3
   1c584:	blt	1cb94 <__assert_fail@plt+0xb03c>
   1c588:	mov	r3, r9
   1c58c:	mov	r2, r8
   1c590:	mvn	r0, #0
   1c594:	mvn	r1, #-2147483648	; 0x80000000
   1c598:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c59c:	cmp	r0, r6
   1c5a0:	sbcs	r3, r1, r7
   1c5a4:	blt	1cba4 <__assert_fail@plt+0xb04c>
   1c5a8:	mul	ip, r6, r9
   1c5ac:	umull	r2, r3, r6, r8
   1c5b0:	mla	ip, r8, r7, ip
   1c5b4:	ldrd	r6, [sp]
   1c5b8:	add	r3, ip, r3
   1c5bc:	cmp	r2, r6
   1c5c0:	sbcs	ip, r3, r7
   1c5c4:	blt	1cb94 <__assert_fail@plt+0xb03c>
   1c5c8:	cmp	r0, r2
   1c5cc:	sbcs	r1, r1, r3
   1c5d0:	blt	1cba4 <__assert_fail@plt+0xb04c>
   1c5d4:	mul	r1, r2, r9
   1c5d8:	umull	r6, r7, r2, r8
   1c5dc:	mla	r8, r8, r3, r1
   1c5e0:	add	r7, r8, r7
   1c5e4:	ldr	r2, [sp, #8]
   1c5e8:	add	r3, r2, fp
   1c5ec:	str	r3, [r5]
   1c5f0:	ldrb	r3, [r2, fp]
   1c5f4:	cmp	r3, #0
   1c5f8:	orrne	r4, r4, #2
   1c5fc:	b	1c21c <__assert_fail@plt+0xa6c4>
   1c600:	cmp	r6, #0
   1c604:	sbcs	r3, r7, #-1073741824	; 0xc0000000
   1c608:	blt	1cb94 <__assert_fail@plt+0xb03c>
   1c60c:	cmp	r6, #0
   1c610:	sbcs	r3, r7, #1073741824	; 0x40000000
   1c614:	bge	1cba4 <__assert_fail@plt+0xb04c>
   1c618:	adds	r6, r6, r6
   1c61c:	adc	r7, r7, r7
   1c620:	b	1c5e4 <__assert_fail@plt+0xaa8c>
   1c624:	mov	fp, #1
   1c628:	mov	r2, #0
   1c62c:	ldr	r3, [pc, #1572]	; 1cc58 <__assert_fail@plt+0xb100>
   1c630:	cmp	r6, r2
   1c634:	sbcs	r3, r7, r3
   1c638:	blt	1cb94 <__assert_fail@plt+0xb03c>
   1c63c:	cmp	r6, #0
   1c640:	sbcs	r3, r7, #4194304	; 0x400000
   1c644:	bge	1cba4 <__assert_fail@plt+0xb04c>
   1c648:	lsl	r3, r7, #9
   1c64c:	orr	r3, r3, r6, lsr #23
   1c650:	lsl	r2, r6, #9
   1c654:	mov	r6, r2
   1c658:	mov	r7, r3
   1c65c:	b	1c5e4 <__assert_fail@plt+0xaa8c>
   1c660:	mov	r2, #0
   1c664:	ldr	r3, [pc, #1520]	; 1cc5c <__assert_fail@plt+0xb104>
   1c668:	cmp	r6, r2
   1c66c:	sbcs	r3, r7, r3
   1c670:	blt	1cb94 <__assert_fail@plt+0xb03c>
   1c674:	cmp	r6, #0
   1c678:	sbcs	r3, r7, #2097152	; 0x200000
   1c67c:	bge	1cba4 <__assert_fail@plt+0xb04c>
   1c680:	lsl	r3, r7, #10
   1c684:	orr	r3, r3, r6, lsr #22
   1c688:	lsl	r2, r6, #10
   1c68c:	mov	r6, r2
   1c690:	mov	r7, r3
   1c694:	b	1c5e4 <__assert_fail@plt+0xaa8c>
   1c698:	asr	r1, r3, #31
   1c69c:	mov	r2, r3
   1c6a0:	mov	r3, r1
   1c6a4:	mov	r0, #0
   1c6a8:	mov	r1, #-2147483648	; 0x80000000
   1c6ac:	strd	r2, [sp]
   1c6b0:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c6b4:	str	fp, [sp, #12]
   1c6b8:	strd	r4, [sp, #16]
   1c6bc:	mov	r8, #5
   1c6c0:	ldrd	r4, [sp]
   1c6c4:	mov	r9, #0
   1c6c8:	str	sl, [sp]
   1c6cc:	mov	fp, r1
   1c6d0:	mov	sl, r0
   1c6d4:	b	1c710 <__assert_fail@plt+0xabb8>
   1c6d8:	mov	r3, r5
   1c6dc:	mov	r2, r4
   1c6e0:	mvn	r0, #0
   1c6e4:	mvn	r1, #-2147483648	; 0x80000000
   1c6e8:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c6ec:	cmp	r0, r6
   1c6f0:	sbcs	r3, r1, r7
   1c6f4:	blt	1cbe4 <__assert_fail@plt+0xb08c>
   1c6f8:	mul	r3, r6, r5
   1c6fc:	mla	r3, r4, r7, r3
   1c700:	umull	r6, r7, r6, r4
   1c704:	add	r7, r3, r7
   1c708:	subs	r8, r8, #1
   1c70c:	beq	1cb80 <__assert_fail@plt+0xb028>
   1c710:	cmp	r6, sl
   1c714:	sbcs	r3, r7, fp
   1c718:	bge	1c6d8 <__assert_fail@plt+0xab80>
   1c71c:	mov	r9, #1
   1c720:	mov	r6, #0
   1c724:	mov	r7, #-2147483648	; 0x80000000
   1c728:	b	1c708 <__assert_fail@plt+0xabb0>
   1c72c:	asr	r1, r3, #31
   1c730:	mov	r2, r3
   1c734:	mov	r3, r1
   1c738:	mov	r0, #0
   1c73c:	mov	r1, #-2147483648	; 0x80000000
   1c740:	strd	r2, [sp]
   1c744:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c748:	str	fp, [sp, #12]
   1c74c:	strd	r4, [sp, #16]
   1c750:	mov	r8, #8
   1c754:	ldrd	r4, [sp]
   1c758:	mov	r9, #0
   1c75c:	str	sl, [sp]
   1c760:	mov	fp, r1
   1c764:	mov	sl, r0
   1c768:	b	1c7a4 <__assert_fail@plt+0xac4c>
   1c76c:	mov	r3, r5
   1c770:	mov	r2, r4
   1c774:	mvn	r0, #0
   1c778:	mvn	r1, #-2147483648	; 0x80000000
   1c77c:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c780:	cmp	r0, r6
   1c784:	sbcs	r3, r1, r7
   1c788:	blt	1cbc4 <__assert_fail@plt+0xb06c>
   1c78c:	mul	r3, r6, r5
   1c790:	mla	r3, r4, r7, r3
   1c794:	umull	r6, r7, r6, r4
   1c798:	add	r7, r3, r7
   1c79c:	subs	r8, r8, #1
   1c7a0:	beq	1cb80 <__assert_fail@plt+0xb028>
   1c7a4:	cmp	r6, sl
   1c7a8:	sbcs	r3, r7, fp
   1c7ac:	bge	1c76c <__assert_fail@plt+0xac14>
   1c7b0:	mov	r9, #1
   1c7b4:	mov	r6, #0
   1c7b8:	mov	r7, #-2147483648	; 0x80000000
   1c7bc:	b	1c79c <__assert_fail@plt+0xac44>
   1c7c0:	asr	r9, r3, #31
   1c7c4:	mov	r8, r3
   1c7c8:	mov	r2, r3
   1c7cc:	mov	r0, #0
   1c7d0:	mov	r3, r9
   1c7d4:	mov	r1, #-2147483648	; 0x80000000
   1c7d8:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c7dc:	cmp	r6, r0
   1c7e0:	sbcs	r3, r7, r1
   1c7e4:	blt	1cb94 <__assert_fail@plt+0xb03c>
   1c7e8:	mov	r3, r9
   1c7ec:	mov	r2, r8
   1c7f0:	mvn	r0, #0
   1c7f4:	mvn	r1, #-2147483648	; 0x80000000
   1c7f8:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c7fc:	cmp	r0, r6
   1c800:	sbcs	r3, r1, r7
   1c804:	blt	1cba4 <__assert_fail@plt+0xb04c>
   1c808:	mul	r3, r6, r9
   1c80c:	mla	r3, r8, r7, r3
   1c810:	umull	r6, r7, r6, r8
   1c814:	add	r7, r3, r7
   1c818:	b	1c5e4 <__assert_fail@plt+0xaa8c>
   1c81c:	asr	r1, r3, #31
   1c820:	mov	r2, r3
   1c824:	mov	r3, r1
   1c828:	mov	r0, #0
   1c82c:	mov	r1, #-2147483648	; 0x80000000
   1c830:	strd	r2, [sp]
   1c834:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c838:	str	fp, [sp, #12]
   1c83c:	strd	r4, [sp, #16]
   1c840:	mov	r8, #3
   1c844:	ldrd	r4, [sp]
   1c848:	mov	r9, #0
   1c84c:	str	sl, [sp]
   1c850:	mov	fp, r1
   1c854:	mov	sl, r0
   1c858:	b	1c894 <__assert_fail@plt+0xad3c>
   1c85c:	mov	r3, r5
   1c860:	mov	r2, r4
   1c864:	mvn	r0, #0
   1c868:	mvn	r1, #-2147483648	; 0x80000000
   1c86c:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c870:	cmp	r0, r6
   1c874:	sbcs	r3, r1, r7
   1c878:	blt	1cbb4 <__assert_fail@plt+0xb05c>
   1c87c:	mul	r3, r6, r5
   1c880:	mla	r3, r4, r7, r3
   1c884:	umull	r6, r7, r6, r4
   1c888:	add	r7, r3, r7
   1c88c:	subs	r8, r8, #1
   1c890:	beq	1cb80 <__assert_fail@plt+0xb028>
   1c894:	cmp	r6, sl
   1c898:	sbcs	r3, r7, fp
   1c89c:	bge	1c85c <__assert_fail@plt+0xad04>
   1c8a0:	mov	r9, #1
   1c8a4:	mov	r6, #0
   1c8a8:	mov	r7, #-2147483648	; 0x80000000
   1c8ac:	b	1c88c <__assert_fail@plt+0xad34>
   1c8b0:	asr	r1, r3, #31
   1c8b4:	mov	r2, r3
   1c8b8:	mov	r3, r1
   1c8bc:	mov	r0, #0
   1c8c0:	mov	r1, #-2147483648	; 0x80000000
   1c8c4:	strd	r2, [sp]
   1c8c8:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c8cc:	str	fp, [sp, #12]
   1c8d0:	strd	r4, [sp, #16]
   1c8d4:	mov	r8, #4
   1c8d8:	ldrd	r4, [sp]
   1c8dc:	mov	r9, #0
   1c8e0:	str	sl, [sp]
   1c8e4:	mov	fp, r1
   1c8e8:	mov	sl, r0
   1c8ec:	b	1c928 <__assert_fail@plt+0xadd0>
   1c8f0:	mov	r3, r5
   1c8f4:	mov	r2, r4
   1c8f8:	mvn	r0, #0
   1c8fc:	mvn	r1, #-2147483648	; 0x80000000
   1c900:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c904:	cmp	r0, r6
   1c908:	sbcs	r3, r1, r7
   1c90c:	blt	1cc04 <__assert_fail@plt+0xb0ac>
   1c910:	mul	r3, r6, r5
   1c914:	mla	r3, r4, r7, r3
   1c918:	umull	r6, r7, r6, r4
   1c91c:	add	r7, r3, r7
   1c920:	subs	r8, r8, #1
   1c924:	beq	1cb80 <__assert_fail@plt+0xb028>
   1c928:	cmp	r6, sl
   1c92c:	sbcs	r3, r7, fp
   1c930:	bge	1c8f0 <__assert_fail@plt+0xad98>
   1c934:	mov	r9, #1
   1c938:	mov	r6, #0
   1c93c:	mov	r7, #-2147483648	; 0x80000000
   1c940:	b	1c920 <__assert_fail@plt+0xadc8>
   1c944:	asr	r1, r3, #31
   1c948:	mov	r2, r3
   1c94c:	mov	r3, r1
   1c950:	mov	r0, #0
   1c954:	mov	r1, #-2147483648	; 0x80000000
   1c958:	strd	r2, [sp]
   1c95c:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c960:	str	fp, [sp, #12]
   1c964:	strd	r4, [sp, #16]
   1c968:	mov	r8, #7
   1c96c:	ldrd	r4, [sp]
   1c970:	mov	r9, #0
   1c974:	str	sl, [sp]
   1c978:	mov	fp, r1
   1c97c:	mov	sl, r0
   1c980:	b	1c9bc <__assert_fail@plt+0xae64>
   1c984:	mov	r3, r5
   1c988:	mov	r2, r4
   1c98c:	mvn	r0, #0
   1c990:	mvn	r1, #-2147483648	; 0x80000000
   1c994:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c998:	cmp	r0, r6
   1c99c:	sbcs	r3, r1, r7
   1c9a0:	blt	1cbf4 <__assert_fail@plt+0xb09c>
   1c9a4:	mul	r3, r6, r5
   1c9a8:	mla	r3, r4, r7, r3
   1c9ac:	umull	r6, r7, r6, r4
   1c9b0:	add	r7, r3, r7
   1c9b4:	subs	r8, r8, #1
   1c9b8:	beq	1cb80 <__assert_fail@plt+0xb028>
   1c9bc:	cmp	r6, sl
   1c9c0:	sbcs	r3, r7, fp
   1c9c4:	bge	1c984 <__assert_fail@plt+0xae2c>
   1c9c8:	mov	r9, #1
   1c9cc:	mov	r6, #0
   1c9d0:	mov	r7, #-2147483648	; 0x80000000
   1c9d4:	b	1c9b4 <__assert_fail@plt+0xae5c>
   1c9d8:	asr	r1, r3, #31
   1c9dc:	mov	r2, r3
   1c9e0:	mov	r3, r1
   1c9e4:	mov	r0, #0
   1c9e8:	mov	r1, #-2147483648	; 0x80000000
   1c9ec:	strd	r2, [sp]
   1c9f0:	bl	21c68 <fts_children@@Base+0x1bdc>
   1c9f4:	str	fp, [sp, #12]
   1c9f8:	strd	r4, [sp, #16]
   1c9fc:	mov	r8, #6
   1ca00:	ldrd	r4, [sp]
   1ca04:	mov	r9, #0
   1ca08:	str	sl, [sp]
   1ca0c:	mov	fp, r1
   1ca10:	mov	sl, r0
   1ca14:	b	1ca50 <__assert_fail@plt+0xaef8>
   1ca18:	mov	r3, r5
   1ca1c:	mov	r2, r4
   1ca20:	mvn	r0, #0
   1ca24:	mvn	r1, #-2147483648	; 0x80000000
   1ca28:	bl	21c68 <fts_children@@Base+0x1bdc>
   1ca2c:	cmp	r0, r6
   1ca30:	sbcs	r3, r1, r7
   1ca34:	blt	1cbd4 <__assert_fail@plt+0xb07c>
   1ca38:	mul	r3, r6, r5
   1ca3c:	mla	r3, r4, r7, r3
   1ca40:	umull	r6, r7, r6, r4
   1ca44:	add	r7, r3, r7
   1ca48:	subs	r8, r8, #1
   1ca4c:	beq	1cb80 <__assert_fail@plt+0xb028>
   1ca50:	cmp	r6, sl
   1ca54:	sbcs	r3, r7, fp
   1ca58:	bge	1ca18 <__assert_fail@plt+0xaec0>
   1ca5c:	mov	r9, #1
   1ca60:	mov	r6, #0
   1ca64:	mov	r7, #-2147483648	; 0x80000000
   1ca68:	b	1ca48 <__assert_fail@plt+0xaef0>
   1ca6c:	ldr	r3, [pc, #488]	; 1cc5c <__assert_fail@plt+0xb104>
   1ca70:	mov	r2, #0
   1ca74:	mov	r0, r2
   1ca78:	mov	r1, r3
   1ca7c:	mov	r2, #1024	; 0x400
   1ca80:	mov	r3, #0
   1ca84:	mov	fp, #1
   1ca88:	strd	r2, [sp]
   1ca8c:	b	1c960 <__assert_fail@plt+0xae08>
   1ca90:	ldr	r3, [pc, #452]	; 1cc5c <__assert_fail@plt+0xb104>
   1ca94:	mov	r2, #0
   1ca98:	mov	r0, r2
   1ca9c:	mov	r1, r3
   1caa0:	mov	r2, #1024	; 0x400
   1caa4:	mov	r3, #0
   1caa8:	mov	fp, #1
   1caac:	strd	r2, [sp]
   1cab0:	b	1c748 <__assert_fail@plt+0xabf0>
   1cab4:	ldr	r3, [pc, #416]	; 1cc5c <__assert_fail@plt+0xb104>
   1cab8:	mov	r2, #0
   1cabc:	mov	r0, r2
   1cac0:	mov	r1, r3
   1cac4:	mov	r2, #1024	; 0x400
   1cac8:	mov	r3, #0
   1cacc:	mov	fp, #1
   1cad0:	strd	r2, [sp]
   1cad4:	b	1c8cc <__assert_fail@plt+0xad74>
   1cad8:	ldr	r3, [pc, #380]	; 1cc5c <__assert_fail@plt+0xb104>
   1cadc:	mov	r2, #0
   1cae0:	mov	r0, r2
   1cae4:	mov	r1, r3
   1cae8:	mov	r2, #1024	; 0x400
   1caec:	mov	r3, #0
   1caf0:	mov	fp, #1
   1caf4:	strd	r2, [sp]
   1caf8:	b	1c6b4 <__assert_fail@plt+0xab5c>
   1cafc:	ldr	r3, [pc, #344]	; 1cc5c <__assert_fail@plt+0xb104>
   1cb00:	mov	r2, #0
   1cb04:	mov	fp, #1
   1cb08:	strd	r2, [sp]
   1cb0c:	mov	r8, #1024	; 0x400
   1cb10:	mov	r9, #0
   1cb14:	b	1c578 <__assert_fail@plt+0xaa20>
   1cb18:	mov	fp, #1
   1cb1c:	mov	r0, #0
   1cb20:	ldr	r1, [pc, #308]	; 1cc5c <__assert_fail@plt+0xb104>
   1cb24:	mov	r8, #1024	; 0x400
   1cb28:	mov	r9, #0
   1cb2c:	b	1c7dc <__assert_fail@plt+0xac84>
   1cb30:	ldr	r3, [pc, #292]	; 1cc5c <__assert_fail@plt+0xb104>
   1cb34:	mov	r2, #0
   1cb38:	mov	r0, r2
   1cb3c:	mov	r1, r3
   1cb40:	mov	r2, #1024	; 0x400
   1cb44:	mov	r3, #0
   1cb48:	mov	fp, #1
   1cb4c:	strd	r2, [sp]
   1cb50:	b	1c838 <__assert_fail@plt+0xace0>
   1cb54:	ldr	r3, [pc, #256]	; 1cc5c <__assert_fail@plt+0xb104>
   1cb58:	mov	r2, #0
   1cb5c:	mov	r0, r2
   1cb60:	mov	r1, r3
   1cb64:	mov	r2, #1024	; 0x400
   1cb68:	mov	r3, #0
   1cb6c:	mov	fp, #1
   1cb70:	strd	r2, [sp]
   1cb74:	b	1c9f4 <__assert_fail@plt+0xae9c>
   1cb78:	mov	fp, #1
   1cb7c:	b	1c5e4 <__assert_fail@plt+0xaa8c>
   1cb80:	ldrd	r4, [sp, #16]
   1cb84:	ldr	fp, [sp, #12]
   1cb88:	ldr	sl, [sp]
   1cb8c:	orr	r4, r4, r9
   1cb90:	b	1c5e4 <__assert_fail@plt+0xaa8c>
   1cb94:	mov	r4, #1
   1cb98:	mov	r6, #0
   1cb9c:	mov	r7, #-2147483648	; 0x80000000
   1cba0:	b	1c5e4 <__assert_fail@plt+0xaa8c>
   1cba4:	mov	r4, #1
   1cba8:	mvn	r6, #0
   1cbac:	mvn	r7, #-2147483648	; 0x80000000
   1cbb0:	b	1c5e4 <__assert_fail@plt+0xaa8c>
   1cbb4:	mov	r9, #1
   1cbb8:	mvn	r6, #0
   1cbbc:	mvn	r7, #-2147483648	; 0x80000000
   1cbc0:	b	1c88c <__assert_fail@plt+0xad34>
   1cbc4:	mov	r9, #1
   1cbc8:	mvn	r6, #0
   1cbcc:	mvn	r7, #-2147483648	; 0x80000000
   1cbd0:	b	1c79c <__assert_fail@plt+0xac44>
   1cbd4:	mov	r9, #1
   1cbd8:	mvn	r6, #0
   1cbdc:	mvn	r7, #-2147483648	; 0x80000000
   1cbe0:	b	1ca48 <__assert_fail@plt+0xaef0>
   1cbe4:	mov	r9, #1
   1cbe8:	mvn	r6, #0
   1cbec:	mvn	r7, #-2147483648	; 0x80000000
   1cbf0:	b	1c708 <__assert_fail@plt+0xabb0>
   1cbf4:	mov	r9, #1
   1cbf8:	mvn	r6, #0
   1cbfc:	mvn	r7, #-2147483648	; 0x80000000
   1cc00:	b	1c9b4 <__assert_fail@plt+0xae5c>
   1cc04:	mov	r9, #1
   1cc08:	mvn	r6, #0
   1cc0c:	mvn	r7, #-2147483648	; 0x80000000
   1cc10:	b	1c920 <__assert_fail@plt+0xadc8>
   1cc14:	mov	fp, #2
   1cc18:	mov	r3, #1000	; 0x3e8
   1cc1c:	b	1c470 <__assert_fail@plt+0xa918>
   1cc20:	ldr	r3, [sp, #8]
   1cc24:	ldrb	r2, [r3, #2]
   1cc28:	mov	r3, #1024	; 0x400
   1cc2c:	cmp	r2, #66	; 0x42
   1cc30:	movne	fp, #1
   1cc34:	moveq	fp, #3
   1cc38:	b	1c470 <__assert_fail@plt+0xa918>
   1cc3c:	ldr	r3, [pc, #28]	; 1cc60 <__assert_fail@plt+0xb108>
   1cc40:	mov	r2, #96	; 0x60
   1cc44:	ldr	r1, [pc, #24]	; 1cc64 <__assert_fail@plt+0xb10c>
   1cc48:	ldr	r0, [pc, #24]	; 1cc68 <__assert_fail@plt+0xb110>
   1cc4c:	bl	11b58 <__assert_fail@plt>
   1cc50:	bl	11780 <__stack_chk_fail@plt>
   1cc54:	andeq	r4, r3, r8, lsl #30
   1cc58:			; <UNDEFINED> instruction: 0xffc00000
   1cc5c:			; <UNDEFINED> instruction: 0xffe00000
   1cc60:	andeq	r3, r2, r4, asr #27
   1cc64:	ldrdeq	r3, [r2], -r0
   1cc68:	andeq	r3, r2, r0, ror #27
   1cc6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc70:	cmp	r2, #36	; 0x24
   1cc74:	ldr	r7, [pc, #1580]	; 1d2a8 <__assert_fail@plt+0xb750>
   1cc78:	sub	sp, sp, #20
   1cc7c:	mov	fp, r2
   1cc80:	ldr	r2, [r7]
   1cc84:	ldr	r9, [sp, #56]	; 0x38
   1cc88:	str	r2, [sp, #12]
   1cc8c:	bhi	1d290 <__assert_fail@plt+0xb738>
   1cc90:	cmp	r1, #0
   1cc94:	mov	r6, r1
   1cc98:	mov	r5, r0
   1cc9c:	mov	sl, r3
   1cca0:	addeq	r6, sp, #8
   1cca4:	bl	11984 <__errno_location@plt>
   1cca8:	mov	r3, #0
   1ccac:	str	r3, [r0]
   1ccb0:	mov	r8, r0
   1ccb4:	bl	11924 <__ctype_b_loc@plt>
   1ccb8:	ldrb	r3, [r5]
   1ccbc:	mov	r1, r5
   1ccc0:	ldr	ip, [r0]
   1ccc4:	b	1cccc <__assert_fail@plt+0xb174>
   1ccc8:	ldrb	r3, [r1, #1]!
   1cccc:	lsl	r2, r3, #1
   1ccd0:	ldrh	r0, [ip, r2]
   1ccd4:	ands	r4, r0, #8192	; 0x2000
   1ccd8:	bne	1ccc8 <__assert_fail@plt+0xb170>
   1ccdc:	cmp	r3, #45	; 0x2d
   1cce0:	beq	1cd6c <__assert_fail@plt+0xb214>
   1cce4:	mov	r2, fp
   1cce8:	mov	r1, r6
   1ccec:	mov	r0, r5
   1ccf0:	bl	11948 <strtoul@plt>
   1ccf4:	ldr	r3, [r6]
   1ccf8:	cmp	r3, r5
   1ccfc:	mov	fp, r0
   1cd00:	beq	1cd54 <__assert_fail@plt+0xb1fc>
   1cd04:	ldr	r4, [r8]
   1cd08:	cmp	r4, #0
   1cd0c:	bne	1cd44 <__assert_fail@plt+0xb1ec>
   1cd10:	cmp	r9, #0
   1cd14:	beq	1cd24 <__assert_fail@plt+0xb1cc>
   1cd18:	ldrb	r5, [r3]
   1cd1c:	cmp	r5, #0
   1cd20:	bne	1d0dc <__assert_fail@plt+0xb584>
   1cd24:	str	fp, [sl]
   1cd28:	ldr	r2, [sp, #12]
   1cd2c:	ldr	r3, [r7]
   1cd30:	mov	r0, r4
   1cd34:	cmp	r2, r3
   1cd38:	bne	1d2a4 <__assert_fail@plt+0xb74c>
   1cd3c:	add	sp, sp, #20
   1cd40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd44:	cmp	r4, #34	; 0x22
   1cd48:	bne	1cd6c <__assert_fail@plt+0xb214>
   1cd4c:	mov	r4, #1
   1cd50:	b	1cd10 <__assert_fail@plt+0xb1b8>
   1cd54:	cmp	r9, #0
   1cd58:	str	r3, [sp, #4]
   1cd5c:	beq	1cd6c <__assert_fail@plt+0xb214>
   1cd60:	ldrb	r5, [r5]
   1cd64:	cmp	r5, #0
   1cd68:	bne	1cd74 <__assert_fail@plt+0xb21c>
   1cd6c:	mov	r4, #4
   1cd70:	b	1cd28 <__assert_fail@plt+0xb1d0>
   1cd74:	mov	r1, r5
   1cd78:	mov	r0, r9
   1cd7c:	bl	11960 <strchr@plt>
   1cd80:	ldr	r3, [sp, #4]
   1cd84:	cmp	r0, #0
   1cd88:	movne	fp, #1
   1cd8c:	beq	1cd6c <__assert_fail@plt+0xb214>
   1cd90:	sub	r8, r5, #69	; 0x45
   1cd94:	cmp	r8, #47	; 0x2f
   1cd98:	ldrls	pc, [pc, r8, lsl #2]
   1cd9c:	b	1cf64 <__assert_fail@plt+0xb40c>
   1cda0:	andeq	ip, r1, r0, ror #28
   1cda4:	andeq	ip, r1, r4, ror #30
   1cda8:	andeq	ip, r1, r0, ror #28
   1cdac:	andeq	ip, r1, r4, ror #30
   1cdb0:	andeq	ip, r1, r4, ror #30
   1cdb4:	andeq	ip, r1, r4, ror #30
   1cdb8:	andeq	ip, r1, r0, ror #28
   1cdbc:	andeq	ip, r1, r4, ror #30
   1cdc0:	andeq	ip, r1, r0, ror #28
   1cdc4:	andeq	ip, r1, r4, ror #30
   1cdc8:	andeq	ip, r1, r4, ror #30
   1cdcc:	andeq	ip, r1, r0, ror #28
   1cdd0:	andeq	ip, r1, r4, ror #30
   1cdd4:	andeq	ip, r1, r4, ror #30
   1cdd8:	andeq	ip, r1, r4, ror #30
   1cddc:	andeq	ip, r1, r0, ror #28
   1cde0:	andeq	ip, r1, r4, ror #30
   1cde4:	andeq	ip, r1, r4, ror #30
   1cde8:	andeq	ip, r1, r4, ror #30
   1cdec:	andeq	ip, r1, r4, ror #30
   1cdf0:	andeq	ip, r1, r0, ror #28
   1cdf4:	andeq	ip, r1, r0, ror #28
   1cdf8:	andeq	ip, r1, r4, ror #30
   1cdfc:	andeq	ip, r1, r4, ror #30
   1ce00:	andeq	ip, r1, r4, ror #30
   1ce04:	andeq	ip, r1, r4, ror #30
   1ce08:	andeq	ip, r1, r4, ror #30
   1ce0c:	andeq	ip, r1, r4, ror #30
   1ce10:	andeq	ip, r1, r4, ror #30
   1ce14:	andeq	ip, r1, r4, ror #30
   1ce18:	andeq	ip, r1, r4, ror #30
   1ce1c:	andeq	ip, r1, r4, ror #30
   1ce20:	andeq	ip, r1, r4, ror #30
   1ce24:	andeq	ip, r1, r4, ror #30
   1ce28:	andeq	ip, r1, r0, ror #28
   1ce2c:	andeq	ip, r1, r4, ror #30
   1ce30:	andeq	ip, r1, r4, ror #30
   1ce34:	andeq	ip, r1, r4, ror #30
   1ce38:	andeq	ip, r1, r0, ror #28
   1ce3c:	andeq	ip, r1, r4, ror #30
   1ce40:	andeq	ip, r1, r0, ror #28
   1ce44:	andeq	ip, r1, r4, ror #30
   1ce48:	andeq	ip, r1, r4, ror #30
   1ce4c:	andeq	ip, r1, r4, ror #30
   1ce50:	andeq	ip, r1, r4, ror #30
   1ce54:	andeq	ip, r1, r4, ror #30
   1ce58:	andeq	ip, r1, r4, ror #30
   1ce5c:	andeq	ip, r1, r0, ror #28
   1ce60:	mov	r0, r9
   1ce64:	mov	r1, #48	; 0x30
   1ce68:	str	r3, [sp, #4]
   1ce6c:	bl	11960 <strchr@plt>
   1ce70:	ldr	r3, [sp, #4]
   1ce74:	cmp	r0, #0
   1ce78:	beq	1cf64 <__assert_fail@plt+0xb40c>
   1ce7c:	ldrb	r2, [r3, #1]
   1ce80:	cmp	r2, #68	; 0x44
   1ce84:	beq	1d27c <__assert_fail@plt+0xb724>
   1ce88:	cmp	r2, #105	; 0x69
   1ce8c:	beq	1d104 <__assert_fail@plt+0xb5ac>
   1ce90:	cmp	r2, #66	; 0x42
   1ce94:	beq	1d27c <__assert_fail@plt+0xb724>
   1ce98:	cmp	r8, #47	; 0x2f
   1ce9c:	ldrls	pc, [pc, r8, lsl #2]
   1cea0:	b	1d0f8 <__assert_fail@plt+0xb5a0>
   1cea4:	andeq	sp, r1, r4, lsr r2
   1cea8:	strdeq	sp, [r1], -r8
   1ceac:	andeq	sp, r1, r4, asr r0
   1ceb0:	strdeq	sp, [r1], -r8
   1ceb4:	strdeq	sp, [r1], -r8
   1ceb8:	strdeq	sp, [r1], -r8
   1cebc:	andeq	sp, r1, r0, asr #1
   1cec0:	strdeq	sp, [r1], -r8
   1cec4:	andeq	sp, r1, r4, lsl #4
   1cec8:	strdeq	sp, [r1], -r8
   1cecc:	strdeq	sp, [r1], -r8
   1ced0:	ldrdeq	sp, [r1], -r4
   1ced4:	strdeq	sp, [r1], -r8
   1ced8:	strdeq	sp, [r1], -r8
   1cedc:	strdeq	sp, [r1], -r8
   1cee0:	andeq	sp, r1, r4, lsr #3
   1cee4:	strdeq	sp, [r1], -r8
   1cee8:	strdeq	sp, [r1], -r8
   1ceec:	strdeq	sp, [r1], -r8
   1cef0:	strdeq	sp, [r1], -r8
   1cef4:	andeq	sp, r1, r4, ror r1
   1cef8:	andeq	sp, r1, r0, asr #2
   1cefc:	strdeq	sp, [r1], -r8
   1cf00:	strdeq	sp, [r1], -r8
   1cf04:	strdeq	sp, [r1], -r8
   1cf08:	strdeq	sp, [r1], -r8
   1cf0c:	strdeq	sp, [r1], -r8
   1cf10:	strdeq	sp, [r1], -r8
   1cf14:	strdeq	sp, [r1], -r8
   1cf18:	andeq	sp, r1, ip, lsr #2
   1cf1c:	andeq	sp, r1, r4, ror r2
   1cf20:	strdeq	sp, [r1], -r8
   1cf24:	strdeq	sp, [r1], -r8
   1cf28:	strdeq	sp, [r1], -r8
   1cf2c:	andeq	sp, r1, r4, asr r0
   1cf30:	strdeq	sp, [r1], -r8
   1cf34:	strdeq	sp, [r1], -r8
   1cf38:	strdeq	sp, [r1], -r8
   1cf3c:	andeq	sp, r1, r0, asr #1
   1cf40:	strdeq	sp, [r1], -r8
   1cf44:	andeq	sp, r1, r4, lsl #4
   1cf48:	strdeq	sp, [r1], -r8
   1cf4c:	strdeq	sp, [r1], -r8
   1cf50:	strdeq	sp, [r1], -r8
   1cf54:	strdeq	sp, [r1], -r8
   1cf58:	strdeq	sp, [r1], -r8
   1cf5c:	strdeq	sp, [r1], -r8
   1cf60:	andeq	sp, r1, r4, lsr #3
   1cf64:	mov	r1, #1
   1cf68:	mov	r2, #1024	; 0x400
   1cf6c:	sub	r5, r5, #66	; 0x42
   1cf70:	cmp	r5, #53	; 0x35
   1cf74:	ldrls	pc, [pc, r5, lsl #2]
   1cf78:	b	1d0f8 <__assert_fail@plt+0xb5a0>
   1cf7c:	andeq	sp, r1, r4, ror #4
   1cf80:	strdeq	sp, [r1], -r8
   1cf84:	strdeq	sp, [r1], -r8
   1cf88:	andeq	sp, r1, ip, lsr r2
   1cf8c:	strdeq	sp, [r1], -r8
   1cf90:	andeq	sp, r1, ip, asr r0
   1cf94:	strdeq	sp, [r1], -r8
   1cf98:	strdeq	sp, [r1], -r8
   1cf9c:	strdeq	sp, [r1], -r8
   1cfa0:	andeq	sp, r1, r8, asr #1
   1cfa4:	strdeq	sp, [r1], -r8
   1cfa8:	andeq	sp, r1, ip, lsl #4
   1cfac:	strdeq	sp, [r1], -r8
   1cfb0:	strdeq	sp, [r1], -r8
   1cfb4:	ldrdeq	sp, [r1], -ip
   1cfb8:	strdeq	sp, [r1], -r8
   1cfbc:	strdeq	sp, [r1], -r8
   1cfc0:	strdeq	sp, [r1], -r8
   1cfc4:	andeq	sp, r1, ip, lsr #3
   1cfc8:	strdeq	sp, [r1], -r8
   1cfcc:	strdeq	sp, [r1], -r8
   1cfd0:	strdeq	sp, [r1], -r8
   1cfd4:	strdeq	sp, [r1], -r8
   1cfd8:	andeq	sp, r1, ip, ror r1
   1cfdc:	andeq	sp, r1, r8, asr #2
   1cfe0:	strdeq	sp, [r1], -r8
   1cfe4:	strdeq	sp, [r1], -r8
   1cfe8:	strdeq	sp, [r1], -r8
   1cfec:	strdeq	sp, [r1], -r8
   1cff0:	strdeq	sp, [r1], -r8
   1cff4:	strdeq	sp, [r1], -r8
   1cff8:	strdeq	sp, [r1], -r8
   1cffc:	andeq	sp, r1, r0, lsr r1
   1d000:	andeq	sp, r1, r8, lsr #1
   1d004:	strdeq	sp, [r1], -r8
   1d008:	strdeq	sp, [r1], -r8
   1d00c:	strdeq	sp, [r1], -r8
   1d010:	andeq	sp, r1, ip, asr r0
   1d014:	strdeq	sp, [r1], -r8
   1d018:	strdeq	sp, [r1], -r8
   1d01c:	strdeq	sp, [r1], -r8
   1d020:	andeq	sp, r1, r8, asr #1
   1d024:	strdeq	sp, [r1], -r8
   1d028:	andeq	sp, r1, ip, lsl #4
   1d02c:	strdeq	sp, [r1], -r8
   1d030:	strdeq	sp, [r1], -r8
   1d034:	strdeq	sp, [r1], -r8
   1d038:	strdeq	sp, [r1], -r8
   1d03c:	strdeq	sp, [r1], -r8
   1d040:	strdeq	sp, [r1], -r8
   1d044:	andeq	sp, r1, ip, lsr #3
   1d048:	strdeq	sp, [r1], -r8
   1d04c:	strdeq	sp, [r1], -r8
   1d050:	andeq	sp, r1, ip, lsl r1
   1d054:	mov	r1, #1
   1d058:	mov	r2, #1024	; 0x400
   1d05c:	umull	ip, r0, r2, fp
   1d060:	adds	r0, r0, #0
   1d064:	movne	r0, #1
   1d068:	cmp	r0, #0
   1d06c:	bne	1d288 <__assert_fail@plt+0xb730>
   1d070:	mul	fp, r2, fp
   1d074:	umull	ip, r0, r2, fp
   1d078:	adds	r0, r0, #0
   1d07c:	movne	r0, #1
   1d080:	cmp	r0, #0
   1d084:	bne	1d288 <__assert_fail@plt+0xb730>
   1d088:	mul	fp, r2, fp
   1d08c:	umull	ip, r0, r2, fp
   1d090:	adds	r0, r0, #0
   1d094:	movne	r0, #1
   1d098:	cmp	r0, #0
   1d09c:	muleq	fp, r2, fp
   1d0a0:	bne	1d288 <__assert_fail@plt+0xb730>
   1d0a4:	orr	r4, r4, r0
   1d0a8:	add	r2, r3, r1
   1d0ac:	str	r2, [r6]
   1d0b0:	ldrb	r3, [r3, r1]
   1d0b4:	cmp	r3, #0
   1d0b8:	orrne	r4, r4, #2
   1d0bc:	b	1cd24 <__assert_fail@plt+0xb1cc>
   1d0c0:	mov	r1, #1
   1d0c4:	mov	r2, #1024	; 0x400
   1d0c8:	umull	ip, r0, r2, fp
   1d0cc:	cmp	r0, #0
   1d0d0:	bne	1d228 <__assert_fail@plt+0xb6d0>
   1d0d4:	mul	fp, r2, fp
   1d0d8:	b	1d0a8 <__assert_fail@plt+0xb550>
   1d0dc:	mov	r1, r5
   1d0e0:	mov	r0, r9
   1d0e4:	str	r3, [sp, #4]
   1d0e8:	bl	11960 <strchr@plt>
   1d0ec:	ldr	r3, [sp, #4]
   1d0f0:	cmp	r0, #0
   1d0f4:	bne	1cd90 <__assert_fail@plt+0xb238>
   1d0f8:	str	fp, [sl]
   1d0fc:	orr	r4, r4, #2
   1d100:	b	1cd28 <__assert_fail@plt+0xb1d0>
   1d104:	ldrb	r1, [r3, #2]
   1d108:	mov	r2, #1024	; 0x400
   1d10c:	cmp	r1, #66	; 0x42
   1d110:	movne	r1, #1
   1d114:	moveq	r1, #3
   1d118:	b	1cf6c <__assert_fail@plt+0xb414>
   1d11c:	cmp	fp, #0
   1d120:	blt	1d228 <__assert_fail@plt+0xb6d0>
   1d124:	lsl	fp, fp, #1
   1d128:	b	1d0a8 <__assert_fail@plt+0xb550>
   1d12c:	mov	r1, #1
   1d130:	lsrs	r2, fp, #23
   1d134:	bne	1d228 <__assert_fail@plt+0xb6d0>
   1d138:	lsl	fp, fp, #9
   1d13c:	b	1d0a8 <__assert_fail@plt+0xb550>
   1d140:	mov	r1, #1
   1d144:	mov	r2, #1024	; 0x400
   1d148:	mov	r0, #7
   1d14c:	mov	lr, #0
   1d150:	umull	r5, ip, r2, fp
   1d154:	cmp	ip, #0
   1d158:	movne	lr, #1
   1d15c:	muleq	fp, r2, fp
   1d160:	mvnne	fp, #0
   1d164:	subs	r0, r0, #1
   1d168:	bne	1d150 <__assert_fail@plt+0xb5f8>
   1d16c:	orr	r4, r4, lr
   1d170:	b	1d0a8 <__assert_fail@plt+0xb550>
   1d174:	mov	r1, #1
   1d178:	mov	r2, #1024	; 0x400
   1d17c:	mov	r0, #8
   1d180:	mov	lr, #0
   1d184:	umull	r5, ip, r2, fp
   1d188:	cmp	ip, #0
   1d18c:	movne	lr, #1
   1d190:	muleq	fp, r2, fp
   1d194:	mvnne	fp, #0
   1d198:	subs	r0, r0, #1
   1d19c:	bne	1d184 <__assert_fail@plt+0xb62c>
   1d1a0:	b	1d16c <__assert_fail@plt+0xb614>
   1d1a4:	mov	r1, #1
   1d1a8:	mov	r2, #1024	; 0x400
   1d1ac:	mov	r0, #4
   1d1b0:	mov	lr, #0
   1d1b4:	umull	r5, ip, r2, fp
   1d1b8:	cmp	ip, #0
   1d1bc:	movne	lr, #1
   1d1c0:	muleq	fp, r2, fp
   1d1c4:	mvnne	fp, #0
   1d1c8:	subs	r0, r0, #1
   1d1cc:	bne	1d1b4 <__assert_fail@plt+0xb65c>
   1d1d0:	b	1d16c <__assert_fail@plt+0xb614>
   1d1d4:	mov	r1, #1
   1d1d8:	mov	r2, #1024	; 0x400
   1d1dc:	mov	r0, #5
   1d1e0:	mov	lr, #0
   1d1e4:	umull	r5, ip, r2, fp
   1d1e8:	cmp	ip, #0
   1d1ec:	movne	lr, #1
   1d1f0:	muleq	fp, r2, fp
   1d1f4:	mvnne	fp, #0
   1d1f8:	subs	r0, r0, #1
   1d1fc:	bne	1d1e4 <__assert_fail@plt+0xb68c>
   1d200:	b	1d16c <__assert_fail@plt+0xb614>
   1d204:	mov	r1, #1
   1d208:	mov	r2, #1024	; 0x400
   1d20c:	umull	ip, r0, r2, fp
   1d210:	cmp	r0, #0
   1d214:	bne	1d228 <__assert_fail@plt+0xb6d0>
   1d218:	mul	fp, r2, fp
   1d21c:	umull	ip, r0, r2, fp
   1d220:	cmp	r0, #0
   1d224:	beq	1d0d4 <__assert_fail@plt+0xb57c>
   1d228:	mov	r4, #1
   1d22c:	mvn	fp, #0
   1d230:	b	1d0a8 <__assert_fail@plt+0xb550>
   1d234:	mov	r1, #1
   1d238:	mov	r2, #1024	; 0x400
   1d23c:	mov	r0, #6
   1d240:	mov	lr, #0
   1d244:	umull	r5, ip, r2, fp
   1d248:	cmp	ip, #0
   1d24c:	movne	lr, #1
   1d250:	muleq	fp, r2, fp
   1d254:	mvnne	fp, #0
   1d258:	subs	r0, r0, #1
   1d25c:	bne	1d244 <__assert_fail@plt+0xb6ec>
   1d260:	b	1d16c <__assert_fail@plt+0xb614>
   1d264:	lsrs	r2, fp, #22
   1d268:	bne	1d228 <__assert_fail@plt+0xb6d0>
   1d26c:	lsl	fp, fp, #10
   1d270:	b	1d0a8 <__assert_fail@plt+0xb550>
   1d274:	mov	r1, #1
   1d278:	b	1d0a8 <__assert_fail@plt+0xb550>
   1d27c:	mov	r1, #2
   1d280:	mov	r2, #1000	; 0x3e8
   1d284:	b	1cf6c <__assert_fail@plt+0xb414>
   1d288:	mvn	fp, #0
   1d28c:	b	1d0a4 <__assert_fail@plt+0xb54c>
   1d290:	ldr	r3, [pc, #20]	; 1d2ac <__assert_fail@plt+0xb754>
   1d294:	mov	r2, #96	; 0x60
   1d298:	ldr	r1, [pc, #16]	; 1d2b0 <__assert_fail@plt+0xb758>
   1d29c:	ldr	r0, [pc, #16]	; 1d2b4 <__assert_fail@plt+0xb75c>
   1d2a0:	bl	11b58 <__assert_fail@plt>
   1d2a4:	bl	11780 <__stack_chk_fail@plt>
   1d2a8:	andeq	r4, r3, r8, lsl #30
   1d2ac:	andeq	r3, r2, r8, lsl #28
   1d2b0:	ldrdeq	r3, [r2], -r0
   1d2b4:	andeq	r3, r2, r0, ror #27
   1d2b8:	ldr	ip, [pc, #128]	; 1d340 <__assert_fail@plt+0xb7e8>
   1d2bc:	push	{r7, lr}
   1d2c0:	sub	r0, r0, #1
   1d2c4:	ldr	lr, [pc, #120]	; 1d344 <__assert_fail@plt+0xb7ec>
   1d2c8:	sub	sp, sp, #16
   1d2cc:	ldr	r4, [ip]
   1d2d0:	cmp	r0, #3
   1d2d4:	str	r4, [sp, #12]
   1d2d8:	ldr	r6, [sp, #24]
   1d2dc:	ldr	r5, [lr]
   1d2e0:	bhi	1d33c <__assert_fail@plt+0xb7e4>
   1d2e4:	mov	ip, r1
   1d2e8:	cmp	ip, #0
   1d2ec:	ldr	r1, [pc, #84]	; 1d348 <__assert_fail@plt+0xb7f0>
   1d2f0:	ldrlt	r4, [pc, #84]	; 1d34c <__assert_fail@plt+0xb7f4>
   1d2f4:	movlt	r3, #0
   1d2f8:	ldr	r1, [r1, r0, lsl #2]
   1d2fc:	strblt	r2, [sp, #8]
   1d300:	mov	r0, #0
   1d304:	mov	r2, #5
   1d308:	ldrge	r7, [r3, ip, lsl #4]
   1d30c:	sublt	r4, r4, ip
   1d310:	strblt	r3, [sp, #9]
   1d314:	addlt	r7, sp, #8
   1d318:	ldrge	r4, [pc, #44]	; 1d34c <__assert_fail@plt+0xb7f4>
   1d31c:	bl	11774 <dcgettext@plt>
   1d320:	str	r6, [sp, #4]
   1d324:	str	r7, [sp]
   1d328:	mov	r3, r4
   1d32c:	mov	r1, #0
   1d330:	mov	r2, r0
   1d334:	mov	r0, r5
   1d338:	bl	1187c <error@plt>
   1d33c:	bl	11b28 <abort@plt>
   1d340:	andeq	r4, r3, r8, lsl #30
   1d344:	andeq	r5, r3, r0, asr #3
   1d348:	andeq	r3, r2, r4, lsl lr
   1d34c:	andeq	r3, r2, r4, lsr #28
   1d350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d354:	sub	sp, sp, #36	; 0x24
   1d358:	ldr	r5, [pc, #2536]	; 1dd48 <__assert_fail@plt+0xc1f0>
   1d35c:	mov	r9, r2
   1d360:	cmp	r2, #36	; 0x24
   1d364:	str	r3, [sp, #12]
   1d368:	ldr	r2, [r5]
   1d36c:	ldr	r3, [sp, #72]	; 0x48
   1d370:	str	r2, [sp, #28]
   1d374:	str	r3, [sp]
   1d378:	bhi	1dd34 <__assert_fail@plt+0xc1dc>
   1d37c:	cmp	r1, #0
   1d380:	mov	r4, r1
   1d384:	mov	r6, r0
   1d388:	addeq	r4, sp, #24
   1d38c:	bl	11984 <__errno_location@plt>
   1d390:	mov	r3, #0
   1d394:	str	r3, [r0]
   1d398:	mov	r7, r0
   1d39c:	bl	11924 <__ctype_b_loc@plt>
   1d3a0:	ldrb	r3, [r6]
   1d3a4:	mov	r1, r6
   1d3a8:	ldr	r0, [r0]
   1d3ac:	b	1d3b4 <__assert_fail@plt+0xb85c>
   1d3b0:	ldrb	r3, [r1, #1]!
   1d3b4:	lsl	r2, r3, #1
   1d3b8:	ldrh	r8, [r0, r2]
   1d3bc:	ands	r8, r8, #8192	; 0x2000
   1d3c0:	bne	1d3b0 <__assert_fail@plt+0xb858>
   1d3c4:	cmp	r3, #45	; 0x2d
   1d3c8:	beq	1d464 <__assert_fail@plt+0xb90c>
   1d3cc:	mov	r2, r9
   1d3d0:	mov	r3, r8
   1d3d4:	mov	r1, r4
   1d3d8:	mov	r0, r6
   1d3dc:	bl	11744 <__strtoull_internal@plt>
   1d3e0:	ldr	r9, [r4]
   1d3e4:	cmp	r9, r6
   1d3e8:	mov	sl, r0
   1d3ec:	mov	fp, r1
   1d3f0:	beq	1d44c <__assert_fail@plt+0xb8f4>
   1d3f4:	ldr	r8, [r7]
   1d3f8:	cmp	r8, #0
   1d3fc:	bne	1d43c <__assert_fail@plt+0xb8e4>
   1d400:	ldr	r3, [sp]
   1d404:	cmp	r3, #0
   1d408:	beq	1d418 <__assert_fail@plt+0xb8c0>
   1d40c:	ldrb	r6, [r9]
   1d410:	cmp	r6, #0
   1d414:	bne	1d7ec <__assert_fail@plt+0xbc94>
   1d418:	ldr	r3, [sp, #12]
   1d41c:	strd	sl, [r3]
   1d420:	ldr	r2, [sp, #28]
   1d424:	ldr	r3, [r5]
   1d428:	mov	r0, r8
   1d42c:	cmp	r2, r3
   1d430:	bne	1dd30 <__assert_fail@plt+0xc1d8>
   1d434:	add	sp, sp, #36	; 0x24
   1d438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d43c:	cmp	r8, #34	; 0x22
   1d440:	bne	1d464 <__assert_fail@plt+0xb90c>
   1d444:	mov	r8, #1
   1d448:	b	1d400 <__assert_fail@plt+0xb8a8>
   1d44c:	ldr	r0, [sp]
   1d450:	cmp	r0, #0
   1d454:	beq	1d464 <__assert_fail@plt+0xb90c>
   1d458:	ldrb	r6, [r6]
   1d45c:	cmp	r6, #0
   1d460:	bne	1d46c <__assert_fail@plt+0xb914>
   1d464:	mov	r8, #4
   1d468:	b	1d420 <__assert_fail@plt+0xb8c8>
   1d46c:	mov	r1, r6
   1d470:	bl	11960 <strchr@plt>
   1d474:	cmp	r0, #0
   1d478:	movne	sl, #1
   1d47c:	movne	fp, #0
   1d480:	beq	1d464 <__assert_fail@plt+0xb90c>
   1d484:	sub	r7, r6, #69	; 0x45
   1d488:	cmp	r7, #47	; 0x2f
   1d48c:	ldrls	pc, [pc, r7, lsl #2]
   1d490:	b	1d650 <__assert_fail@plt+0xbaf8>
   1d494:	andeq	sp, r1, r4, asr r5
   1d498:	andeq	sp, r1, r0, asr r6
   1d49c:	andeq	sp, r1, r4, asr r5
   1d4a0:	andeq	sp, r1, r0, asr r6
   1d4a4:	andeq	sp, r1, r0, asr r6
   1d4a8:	andeq	sp, r1, r0, asr r6
   1d4ac:	andeq	sp, r1, r4, asr r5
   1d4b0:	andeq	sp, r1, r0, asr r6
   1d4b4:	andeq	sp, r1, r4, asr r5
   1d4b8:	andeq	sp, r1, r0, asr r6
   1d4bc:	andeq	sp, r1, r0, asr r6
   1d4c0:	andeq	sp, r1, r4, asr r5
   1d4c4:	andeq	sp, r1, r0, asr r6
   1d4c8:	andeq	sp, r1, r0, asr r6
   1d4cc:	andeq	sp, r1, r0, asr r6
   1d4d0:	andeq	sp, r1, r4, asr r5
   1d4d4:	andeq	sp, r1, r0, asr r6
   1d4d8:	andeq	sp, r1, r0, asr r6
   1d4dc:	andeq	sp, r1, r0, asr r6
   1d4e0:	andeq	sp, r1, r0, asr r6
   1d4e4:	andeq	sp, r1, r4, asr r5
   1d4e8:	andeq	sp, r1, r4, asr r5
   1d4ec:	andeq	sp, r1, r0, asr r6
   1d4f0:	andeq	sp, r1, r0, asr r6
   1d4f4:	andeq	sp, r1, r0, asr r6
   1d4f8:	andeq	sp, r1, r0, asr r6
   1d4fc:	andeq	sp, r1, r0, asr r6
   1d500:	andeq	sp, r1, r0, asr r6
   1d504:	andeq	sp, r1, r0, asr r6
   1d508:	andeq	sp, r1, r0, asr r6
   1d50c:	andeq	sp, r1, r0, asr r6
   1d510:	andeq	sp, r1, r0, asr r6
   1d514:	andeq	sp, r1, r0, asr r6
   1d518:	andeq	sp, r1, r0, asr r6
   1d51c:	andeq	sp, r1, r4, asr r5
   1d520:	andeq	sp, r1, r0, asr r6
   1d524:	andeq	sp, r1, r0, asr r6
   1d528:	andeq	sp, r1, r0, asr r6
   1d52c:	andeq	sp, r1, r4, asr r5
   1d530:	andeq	sp, r1, r0, asr r6
   1d534:	andeq	sp, r1, r4, asr r5
   1d538:	andeq	sp, r1, r0, asr r6
   1d53c:	andeq	sp, r1, r0, asr r6
   1d540:	andeq	sp, r1, r0, asr r6
   1d544:	andeq	sp, r1, r0, asr r6
   1d548:	andeq	sp, r1, r0, asr r6
   1d54c:	andeq	sp, r1, r0, asr r6
   1d550:	andeq	sp, r1, r4, asr r5
   1d554:	ldr	r0, [sp]
   1d558:	mov	r1, #48	; 0x30
   1d55c:	bl	11960 <strchr@plt>
   1d560:	cmp	r0, #0
   1d564:	beq	1d650 <__assert_fail@plt+0xbaf8>
   1d568:	ldrb	r3, [r9, #1]
   1d56c:	cmp	r3, #68	; 0x44
   1d570:	beq	1dc30 <__assert_fail@plt+0xc0d8>
   1d574:	cmp	r3, #105	; 0x69
   1d578:	beq	1d810 <__assert_fail@plt+0xbcb8>
   1d57c:	cmp	r3, #66	; 0x42
   1d580:	beq	1dc30 <__assert_fail@plt+0xc0d8>
   1d584:	cmp	r7, #47	; 0x2f
   1d588:	ldrls	pc, [pc, r7, lsl #2]
   1d58c:	b	1d800 <__assert_fail@plt+0xbca8>
   1d590:	andeq	sp, r1, r4, lsl ip
   1d594:	andeq	sp, r1, r0, lsl #16
   1d598:	andeq	sp, r1, r4, lsl #24
   1d59c:	andeq	sp, r1, r0, lsl #16
   1d5a0:	andeq	sp, r1, r0, lsl #16
   1d5a4:	andeq	sp, r1, r0, lsl #16
   1d5a8:	strdeq	sp, [r1], -r4
   1d5ac:	andeq	sp, r1, r0, lsl #16
   1d5b0:	andeq	sp, r1, r4, ror #23
   1d5b4:	andeq	sp, r1, r0, lsl #16
   1d5b8:	andeq	sp, r1, r0, lsl #16
   1d5bc:	ldrdeq	sp, [r1], -r4
   1d5c0:	andeq	sp, r1, r0, lsl #16
   1d5c4:	andeq	sp, r1, r0, lsl #16
   1d5c8:	andeq	sp, r1, r0, lsl #16
   1d5cc:	andeq	sp, r1, r4, asr #23
   1d5d0:	andeq	sp, r1, r0, lsl #16
   1d5d4:	andeq	sp, r1, r0, lsl #16
   1d5d8:	andeq	sp, r1, r0, lsl #16
   1d5dc:	andeq	sp, r1, r0, lsl #16
   1d5e0:			; <UNDEFINED> instruction: 0x0001dbb4
   1d5e4:	andeq	sp, r1, r4, lsr #23
   1d5e8:	andeq	sp, r1, r0, lsl #16
   1d5ec:	andeq	sp, r1, r0, lsl #16
   1d5f0:	andeq	sp, r1, r0, lsl #16
   1d5f4:	andeq	sp, r1, r0, lsl #16
   1d5f8:	andeq	sp, r1, r0, lsl #16
   1d5fc:	andeq	sp, r1, r0, lsl #16
   1d600:	andeq	sp, r1, r0, lsl #16
   1d604:	andeq	sp, r1, ip, asr #16
   1d608:	muleq	r1, ip, fp
   1d60c:	andeq	sp, r1, r0, lsl #16
   1d610:	andeq	sp, r1, r0, lsl #16
   1d614:	andeq	sp, r1, r0, lsl #16
   1d618:	andeq	sp, r1, r4, lsl #24
   1d61c:	andeq	sp, r1, r0, lsl #16
   1d620:	andeq	sp, r1, r0, lsl #16
   1d624:	andeq	sp, r1, r0, lsl #16
   1d628:	strdeq	sp, [r1], -r4
   1d62c:	andeq	sp, r1, r0, lsl #16
   1d630:	andeq	sp, r1, r4, ror #23
   1d634:	andeq	sp, r1, r0, lsl #16
   1d638:	andeq	sp, r1, r0, lsl #16
   1d63c:	andeq	sp, r1, r0, lsl #16
   1d640:	andeq	sp, r1, r0, lsl #16
   1d644:	andeq	sp, r1, r0, lsl #16
   1d648:	andeq	sp, r1, r0, lsl #16
   1d64c:	andeq	sp, r1, r4, asr #23
   1d650:	mov	lr, #1
   1d654:	mov	r0, #1024	; 0x400
   1d658:	sub	r6, r6, #66	; 0x42
   1d65c:	cmp	r6, #53	; 0x35
   1d660:	ldrls	pc, [pc, r6, lsl #2]
   1d664:	b	1d800 <__assert_fail@plt+0xbca8>
   1d668:	andeq	sp, r1, r4, ror r8
   1d66c:	andeq	sp, r1, r0, lsl #16
   1d670:	andeq	sp, r1, r0, lsl #16
   1d674:	muleq	r1, r8, r8
   1d678:	andeq	sp, r1, r0, lsl #16
   1d67c:	andeq	sp, r1, r0, asr #14
   1d680:	andeq	sp, r1, r0, lsl #16
   1d684:	andeq	sp, r1, r0, lsl #16
   1d688:	andeq	sp, r1, r0, lsl #16
   1d68c:	muleq	r1, r0, r9
   1d690:	andeq	sp, r1, r0, lsl #16
   1d694:	andeq	sp, r1, r4, lsr fp
   1d698:	andeq	sp, r1, r0, lsl #16
   1d69c:	andeq	sp, r1, r0, lsl #16
   1d6a0:			; <UNDEFINED> instruction: 0x0001dab8
   1d6a4:	andeq	sp, r1, r0, lsl #16
   1d6a8:	andeq	sp, r1, r0, lsl #16
   1d6ac:	andeq	sp, r1, r0, lsl #16
   1d6b0:	andeq	sp, r1, ip, lsr sl
   1d6b4:	andeq	sp, r1, r0, lsl #16
   1d6b8:	andeq	sp, r1, r0, lsl #16
   1d6bc:	andeq	sp, r1, r0, lsl #16
   1d6c0:	andeq	sp, r1, r0, lsl #16
   1d6c4:	andeq	sp, r1, r0, asr #19
   1d6c8:	andeq	sp, r1, r4, lsl r9
   1d6cc:	andeq	sp, r1, r0, lsl #16
   1d6d0:	andeq	sp, r1, r0, lsl #16
   1d6d4:	andeq	sp, r1, r0, lsl #16
   1d6d8:	andeq	sp, r1, r0, lsl #16
   1d6dc:	andeq	sp, r1, r0, lsl #16
   1d6e0:	andeq	sp, r1, r0, lsl #16
   1d6e4:	andeq	sp, r1, r0, lsl #16
   1d6e8:	andeq	sp, r1, r0, asr r8
   1d6ec:	ldrdeq	sp, [r1], -r4
   1d6f0:	andeq	sp, r1, r0, lsl #16
   1d6f4:	andeq	sp, r1, r0, lsl #16
   1d6f8:	andeq	sp, r1, r0, lsl #16
   1d6fc:	andeq	sp, r1, r0, asr #14
   1d700:	andeq	sp, r1, r0, lsl #16
   1d704:	andeq	sp, r1, r0, lsl #16
   1d708:	andeq	sp, r1, r0, lsl #16
   1d70c:	muleq	r1, r0, r9
   1d710:	andeq	sp, r1, r0, lsl #16
   1d714:	andeq	sp, r1, r4, lsr fp
   1d718:	andeq	sp, r1, r0, lsl #16
   1d71c:	andeq	sp, r1, r0, lsl #16
   1d720:	andeq	sp, r1, r0, lsl #16
   1d724:	andeq	sp, r1, r0, lsl #16
   1d728:	andeq	sp, r1, r0, lsl #16
   1d72c:	andeq	sp, r1, r0, lsl #16
   1d730:	andeq	sp, r1, ip, lsr sl
   1d734:	andeq	sp, r1, r0, lsl #16
   1d738:	andeq	sp, r1, r0, lsl #16
   1d73c:	andeq	sp, r1, r8, lsr #16
   1d740:	asr	r1, r0, #31
   1d744:	mov	r2, #0
   1d748:	mov	r3, #0
   1d74c:	cmp	fp, #0
   1d750:	strd	r2, [sp]
   1d754:	bne	1dc74 <__assert_fail@plt+0xc11c>
   1d758:	ldrd	r2, [sp]
   1d75c:	orrs	r3, r2, r3
   1d760:	bne	1dc64 <__assert_fail@plt+0xc10c>
   1d764:	mul	r3, sl, r1
   1d768:	umull	r6, r7, sl, r0
   1d76c:	mla	r3, r0, fp, r3
   1d770:	ldrd	sl, [sp]
   1d774:	add	ip, r3, r7
   1d778:	cmp	ip, #0
   1d77c:	mov	r7, ip
   1d780:	bne	1dd08 <__assert_fail@plt+0xc1b0>
   1d784:	orrs	r3, sl, fp
   1d788:	bne	1dc64 <__assert_fail@plt+0xc10c>
   1d78c:	umull	r2, r3, r6, r0
   1d790:	mul	ip, r6, r1
   1d794:	strd	r2, [sp]
   1d798:	mla	r3, r0, r7, ip
   1d79c:	ldr	r2, [sp, #4]
   1d7a0:	add	ip, r3, r2
   1d7a4:	cmp	ip, #0
   1d7a8:	str	ip, [sp, #4]
   1d7ac:	bne	1dce4 <__assert_fail@plt+0xc18c>
   1d7b0:	orrs	r3, sl, fp
   1d7b4:	bne	1dc64 <__assert_fail@plt+0xc10c>
   1d7b8:	ldrd	r6, [sp]
   1d7bc:	mov	r3, #0
   1d7c0:	mul	r2, r6, r1
   1d7c4:	umull	sl, fp, r6, r0
   1d7c8:	mla	r2, r0, r7, r2
   1d7cc:	add	fp, r2, fp
   1d7d0:	orr	r8, r8, r3
   1d7d4:	add	r3, r9, lr
   1d7d8:	str	r3, [r4]
   1d7dc:	ldrb	r3, [r9, lr]
   1d7e0:	cmp	r3, #0
   1d7e4:	orrne	r8, r8, #2
   1d7e8:	b	1d418 <__assert_fail@plt+0xb8c0>
   1d7ec:	mov	r1, r6
   1d7f0:	ldr	r0, [sp]
   1d7f4:	bl	11960 <strchr@plt>
   1d7f8:	cmp	r0, #0
   1d7fc:	bne	1d484 <__assert_fail@plt+0xb92c>
   1d800:	ldr	r3, [sp, #12]
   1d804:	orr	r8, r8, #2
   1d808:	strd	sl, [r3]
   1d80c:	b	1d420 <__assert_fail@plt+0xb8c8>
   1d810:	ldrb	r3, [r9, #2]
   1d814:	mov	r0, #1024	; 0x400
   1d818:	cmp	r3, #66	; 0x42
   1d81c:	movne	lr, #1
   1d820:	moveq	lr, #3
   1d824:	b	1d658 <__assert_fail@plt+0xbb00>
   1d828:	lsr	r3, fp, #31
   1d82c:	adds	sl, sl, sl
   1d830:	adc	fp, fp, fp
   1d834:	cmp	r3, #0
   1d838:	beq	1d7d4 <__assert_fail@plt+0xbc7c>
   1d83c:	mov	r8, #1
   1d840:	mvn	sl, #0
   1d844:	mvn	fp, #0
   1d848:	b	1d7d4 <__assert_fail@plt+0xbc7c>
   1d84c:	mov	lr, #1
   1d850:	lsr	r3, fp, #23
   1d854:	cmp	r3, #0
   1d858:	bne	1d83c <__assert_fail@plt+0xbce4>
   1d85c:	lsl	r3, fp, #9
   1d860:	orr	r3, r3, sl, lsr #23
   1d864:	lsl	r2, sl, #9
   1d868:	mov	sl, r2
   1d86c:	mov	fp, r3
   1d870:	b	1d7d4 <__assert_fail@plt+0xbc7c>
   1d874:	lsr	r3, fp, #22
   1d878:	cmp	r3, #0
   1d87c:	bne	1d83c <__assert_fail@plt+0xbce4>
   1d880:	lsl	r3, fp, #10
   1d884:	orr	r3, r3, sl, lsr #22
   1d888:	lsl	r2, sl, #10
   1d88c:	mov	sl, r2
   1d890:	mov	fp, r3
   1d894:	b	1d7d4 <__assert_fail@plt+0xbc7c>
   1d898:	mov	r6, r0
   1d89c:	asr	r7, r0, #31
   1d8a0:	mov	r3, #0
   1d8a4:	mov	ip, #6
   1d8a8:	str	r3, [sp]
   1d8ac:	strd	r4, [sp, #16]
   1d8b0:	b	1d8e0 <__assert_fail@plt+0xbd88>
   1d8b4:	orrs	r3, r2, r3
   1d8b8:	movne	r3, #1
   1d8bc:	muleq	r3, sl, r7
   1d8c0:	strne	r3, [sp]
   1d8c4:	mlaeq	r3, r6, fp, r3
   1d8c8:	umulleq	sl, fp, sl, r6
   1d8cc:	mvnne	sl, #0
   1d8d0:	addeq	fp, r3, fp
   1d8d4:	mvnne	fp, #0
   1d8d8:	subs	ip, ip, #1
   1d8dc:	beq	1dc24 <__assert_fail@plt+0xc0cc>
   1d8e0:	cmp	fp, #0
   1d8e4:	mov	r2, #0
   1d8e8:	mov	r3, #0
   1d8ec:	beq	1d8b4 <__assert_fail@plt+0xbd5c>
   1d8f0:	umull	r0, r1, sl, r6
   1d8f4:	mov	r5, #0
   1d8f8:	mov	r0, r1
   1d8fc:	mov	r1, r5
   1d900:	umlal	r0, r1, fp, r6
   1d904:	cmp	r1, r5
   1d908:	movne	r2, #1
   1d90c:	movne	r3, #0
   1d910:	b	1d8b4 <__assert_fail@plt+0xbd5c>
   1d914:	mov	r6, r0
   1d918:	asr	r7, r0, #31
   1d91c:	mov	r3, #0
   1d920:	mov	ip, #7
   1d924:	str	r3, [sp]
   1d928:	strd	r4, [sp, #16]
   1d92c:	b	1d95c <__assert_fail@plt+0xbe04>
   1d930:	orrs	r3, r2, r3
   1d934:	movne	r3, #1
   1d938:	muleq	r3, sl, r7
   1d93c:	strne	r3, [sp]
   1d940:	mlaeq	r3, r6, fp, r3
   1d944:	umulleq	sl, fp, sl, r6
   1d948:	mvnne	sl, #0
   1d94c:	addeq	fp, r3, fp
   1d950:	mvnne	fp, #0
   1d954:	subs	ip, ip, #1
   1d958:	beq	1dc24 <__assert_fail@plt+0xc0cc>
   1d95c:	cmp	fp, #0
   1d960:	mov	r2, #0
   1d964:	mov	r3, #0
   1d968:	beq	1d930 <__assert_fail@plt+0xbdd8>
   1d96c:	umull	r0, r1, sl, r6
   1d970:	mov	r5, #0
   1d974:	mov	r0, r1
   1d978:	mov	r1, r5
   1d97c:	umlal	r0, r1, fp, r6
   1d980:	cmp	r1, r5
   1d984:	movne	r2, #1
   1d988:	movne	r3, #0
   1d98c:	b	1d930 <__assert_fail@plt+0xbdd8>
   1d990:	asr	r1, r0, #31
   1d994:	cmp	fp, #0
   1d998:	mov	r6, #0
   1d99c:	mov	r7, #0
   1d9a0:	bne	1dc3c <__assert_fail@plt+0xc0e4>
   1d9a4:	orrs	r3, r6, r7
   1d9a8:	bne	1d83c <__assert_fail@plt+0xbce4>
   1d9ac:	mul	r3, sl, r1
   1d9b0:	mla	r3, r0, fp, r3
   1d9b4:	umull	sl, fp, sl, r0
   1d9b8:	add	fp, r3, fp
   1d9bc:	b	1d7d4 <__assert_fail@plt+0xbc7c>
   1d9c0:	mov	r6, r0
   1d9c4:	asr	r7, r0, #31
   1d9c8:	mov	r3, #0
   1d9cc:	mov	ip, #8
   1d9d0:	str	r3, [sp]
   1d9d4:	strd	r4, [sp, #16]
   1d9d8:	b	1da08 <__assert_fail@plt+0xbeb0>
   1d9dc:	orrs	r3, r2, r3
   1d9e0:	movne	r3, #1
   1d9e4:	muleq	r3, sl, r7
   1d9e8:	strne	r3, [sp]
   1d9ec:	mlaeq	r3, r6, fp, r3
   1d9f0:	umulleq	sl, fp, sl, r6
   1d9f4:	mvnne	sl, #0
   1d9f8:	addeq	fp, r3, fp
   1d9fc:	mvnne	fp, #0
   1da00:	subs	ip, ip, #1
   1da04:	beq	1dc24 <__assert_fail@plt+0xc0cc>
   1da08:	cmp	fp, #0
   1da0c:	mov	r2, #0
   1da10:	mov	r3, #0
   1da14:	beq	1d9dc <__assert_fail@plt+0xbe84>
   1da18:	umull	r0, r1, sl, r6
   1da1c:	mov	r5, #0
   1da20:	mov	r0, r1
   1da24:	mov	r1, r5
   1da28:	umlal	r0, r1, fp, r6
   1da2c:	cmp	r1, r5
   1da30:	movne	r2, #1
   1da34:	movne	r3, #0
   1da38:	b	1d9dc <__assert_fail@plt+0xbe84>
   1da3c:	mov	r6, r0
   1da40:	asr	r7, r0, #31
   1da44:	mov	r3, #0
   1da48:	mov	ip, #4
   1da4c:	str	r3, [sp]
   1da50:	strd	r4, [sp, #16]
   1da54:	b	1da84 <__assert_fail@plt+0xbf2c>
   1da58:	orrs	r3, r2, r3
   1da5c:	movne	r3, #1
   1da60:	muleq	r3, sl, r7
   1da64:	strne	r3, [sp]
   1da68:	mlaeq	r3, r6, fp, r3
   1da6c:	umulleq	sl, fp, sl, r6
   1da70:	mvnne	sl, #0
   1da74:	addeq	fp, r3, fp
   1da78:	mvnne	fp, #0
   1da7c:	subs	ip, ip, #1
   1da80:	beq	1dc24 <__assert_fail@plt+0xc0cc>
   1da84:	cmp	fp, #0
   1da88:	mov	r2, #0
   1da8c:	mov	r3, #0
   1da90:	beq	1da58 <__assert_fail@plt+0xbf00>
   1da94:	umull	r0, r1, sl, r6
   1da98:	mov	r5, #0
   1da9c:	mov	r0, r1
   1daa0:	mov	r1, r5
   1daa4:	umlal	r0, r1, fp, r6
   1daa8:	cmp	r1, r5
   1daac:	movne	r2, #1
   1dab0:	movne	r3, #0
   1dab4:	b	1da58 <__assert_fail@plt+0xbf00>
   1dab8:	mov	r6, r0
   1dabc:	asr	r7, r0, #31
   1dac0:	mov	r3, #0
   1dac4:	mov	ip, #5
   1dac8:	str	r3, [sp]
   1dacc:	strd	r4, [sp, #16]
   1dad0:	b	1db00 <__assert_fail@plt+0xbfa8>
   1dad4:	orrs	r3, r2, r3
   1dad8:	movne	r3, #1
   1dadc:	muleq	r3, sl, r7
   1dae0:	strne	r3, [sp]
   1dae4:	mlaeq	r3, r6, fp, r3
   1dae8:	umulleq	sl, fp, sl, r6
   1daec:	mvnne	sl, #0
   1daf0:	addeq	fp, r3, fp
   1daf4:	mvnne	fp, #0
   1daf8:	subs	ip, ip, #1
   1dafc:	beq	1dc24 <__assert_fail@plt+0xc0cc>
   1db00:	cmp	fp, #0
   1db04:	mov	r2, #0
   1db08:	mov	r3, #0
   1db0c:	beq	1dad4 <__assert_fail@plt+0xbf7c>
   1db10:	umull	r0, r1, sl, r6
   1db14:	mov	r5, #0
   1db18:	mov	r0, r1
   1db1c:	mov	r1, r5
   1db20:	umlal	r0, r1, fp, r6
   1db24:	cmp	r1, r5
   1db28:	movne	r2, #1
   1db2c:	movne	r3, #0
   1db30:	b	1dad4 <__assert_fail@plt+0xbf7c>
   1db34:	asr	r1, r0, #31
   1db38:	cmp	fp, #0
   1db3c:	mov	r6, #0
   1db40:	mov	r7, #0
   1db44:	bne	1dc98 <__assert_fail@plt+0xc140>
   1db48:	orrs	r3, r6, r7
   1db4c:	bne	1d83c <__assert_fail@plt+0xbce4>
   1db50:	umull	r2, r3, sl, r0
   1db54:	mul	ip, sl, r1
   1db58:	strd	r2, [sp]
   1db5c:	mla	r3, r0, fp, ip
   1db60:	ldr	r2, [sp, #4]
   1db64:	mov	sl, r6
   1db68:	add	ip, r3, r2
   1db6c:	cmp	ip, #0
   1db70:	mov	fp, r7
   1db74:	str	ip, [sp, #4]
   1db78:	bne	1dcc0 <__assert_fail@plt+0xc168>
   1db7c:	orrs	r3, sl, fp
   1db80:	bne	1d83c <__assert_fail@plt+0xbce4>
   1db84:	ldrd	r6, [sp]
   1db88:	mul	r3, r6, r1
   1db8c:	umull	sl, fp, r6, r0
   1db90:	mla	r0, r0, r7, r3
   1db94:	add	fp, r0, fp
   1db98:	b	1d7d4 <__assert_fail@plt+0xbc7c>
   1db9c:	mov	lr, #1
   1dba0:	b	1d7d4 <__assert_fail@plt+0xbc7c>
   1dba4:	mov	lr, #1
   1dba8:	mov	r6, #1024	; 0x400
   1dbac:	mov	r7, #0
   1dbb0:	b	1d91c <__assert_fail@plt+0xbdc4>
   1dbb4:	mov	lr, #1
   1dbb8:	mov	r6, #1024	; 0x400
   1dbbc:	mov	r7, #0
   1dbc0:	b	1d9c8 <__assert_fail@plt+0xbe70>
   1dbc4:	mov	lr, #1
   1dbc8:	mov	r6, #1024	; 0x400
   1dbcc:	mov	r7, #0
   1dbd0:	b	1da44 <__assert_fail@plt+0xbeec>
   1dbd4:	mov	lr, #1
   1dbd8:	mov	r6, #1024	; 0x400
   1dbdc:	mov	r7, #0
   1dbe0:	b	1dac0 <__assert_fail@plt+0xbf68>
   1dbe4:	mov	lr, #1
   1dbe8:	mov	r0, #1024	; 0x400
   1dbec:	mov	r1, #0
   1dbf0:	b	1db38 <__assert_fail@plt+0xbfe0>
   1dbf4:	mov	lr, #1
   1dbf8:	mov	r0, #1024	; 0x400
   1dbfc:	mov	r1, #0
   1dc00:	b	1d994 <__assert_fail@plt+0xbe3c>
   1dc04:	mov	lr, #1
   1dc08:	mov	r0, #1024	; 0x400
   1dc0c:	mov	r1, #0
   1dc10:	b	1d744 <__assert_fail@plt+0xbbec>
   1dc14:	mov	lr, #1
   1dc18:	mov	r6, #1024	; 0x400
   1dc1c:	mov	r7, #0
   1dc20:	b	1d8a0 <__assert_fail@plt+0xbd48>
   1dc24:	ldrd	r4, [sp, #16]
   1dc28:	ldr	r3, [sp]
   1dc2c:	b	1d7d0 <__assert_fail@plt+0xbc78>
   1dc30:	mov	lr, #2
   1dc34:	mov	r0, #1000	; 0x3e8
   1dc38:	b	1d658 <__assert_fail@plt+0xbb00>
   1dc3c:	umull	r2, r3, sl, r0
   1dc40:	str	r3, [sp]
   1dc44:	mov	r3, #0
   1dc48:	str	r3, [sp, #4]
   1dc4c:	ldrd	r2, [sp]
   1dc50:	umlal	r2, r3, fp, r0
   1dc54:	cmp	r3, #0
   1dc58:	movne	r6, #1
   1dc5c:	movne	r7, #0
   1dc60:	b	1d9a4 <__assert_fail@plt+0xbe4c>
   1dc64:	mov	r3, #1
   1dc68:	mvn	sl, #0
   1dc6c:	mvn	fp, #0
   1dc70:	b	1d7d0 <__assert_fail@plt+0xbc78>
   1dc74:	umull	r2, r3, sl, r0
   1dc78:	mov	r7, #0
   1dc7c:	mov	r6, r3
   1dc80:	umlal	r6, r7, fp, r0
   1dc84:	cmp	r7, #0
   1dc88:	movne	r2, #1
   1dc8c:	movne	r3, #0
   1dc90:	strdne	r2, [sp]
   1dc94:	b	1d758 <__assert_fail@plt+0xbc00>
   1dc98:	umull	r2, r3, sl, r0
   1dc9c:	str	r3, [sp]
   1dca0:	mov	r3, #0
   1dca4:	str	r3, [sp, #4]
   1dca8:	ldrd	r2, [sp]
   1dcac:	umlal	r2, r3, fp, r0
   1dcb0:	cmp	r3, #0
   1dcb4:	movne	r6, #1
   1dcb8:	movne	r7, #0
   1dcbc:	b	1db48 <__assert_fail@plt+0xbff0>
   1dcc0:	ldr	r3, [sp]
   1dcc4:	mov	r7, #0
   1dcc8:	umull	r2, r3, r3, r0
   1dccc:	mov	r6, r3
   1dcd0:	umlal	r6, r7, ip, r0
   1dcd4:	cmp	r7, #0
   1dcd8:	movne	sl, #1
   1dcdc:	movne	fp, #0
   1dce0:	b	1db7c <__assert_fail@plt+0xc024>
   1dce4:	ldr	r3, [sp]
   1dce8:	mov	r7, #0
   1dcec:	umull	r2, r3, r3, r0
   1dcf0:	mov	r6, r3
   1dcf4:	umlal	r6, r7, ip, r0
   1dcf8:	cmp	r7, #0
   1dcfc:	movne	sl, #1
   1dd00:	movne	fp, #0
   1dd04:	b	1d7b0 <__assert_fail@plt+0xbc58>
   1dd08:	umull	r2, r3, r6, r0
   1dd0c:	str	r3, [sp]
   1dd10:	mov	r3, #0
   1dd14:	str	r3, [sp, #4]
   1dd18:	ldrd	r2, [sp]
   1dd1c:	umlal	r2, r3, ip, r0
   1dd20:	cmp	r3, #0
   1dd24:	movne	sl, #1
   1dd28:	movne	fp, #0
   1dd2c:	b	1d784 <__assert_fail@plt+0xbc2c>
   1dd30:	bl	11780 <__stack_chk_fail@plt>
   1dd34:	ldr	r3, [pc, #16]	; 1dd4c <__assert_fail@plt+0xc1f4>
   1dd38:	mov	r2, #96	; 0x60
   1dd3c:	ldr	r1, [pc, #12]	; 1dd50 <__assert_fail@plt+0xc1f8>
   1dd40:	ldr	r0, [pc, #12]	; 1dd54 <__assert_fail@plt+0xc1fc>
   1dd44:	bl	11b58 <__assert_fail@plt>
   1dd48:	andeq	r4, r3, r8, lsl #30
   1dd4c:	andeq	r3, r2, ip, lsl #29
   1dd50:	ldrdeq	r3, [r2], -r0
   1dd54:	andeq	r3, r2, r0, ror #27
   1dd58:	push	{r4, r5, lr}
   1dd5c:	sub	sp, sp, #12
   1dd60:	mov	r4, r0
   1dd64:	bl	119c0 <fileno@plt>
   1dd68:	cmp	r0, #0
   1dd6c:	mov	r0, r4
   1dd70:	blt	1ddec <__assert_fail@plt+0xc294>
   1dd74:	bl	118dc <__freading@plt>
   1dd78:	cmp	r0, #0
   1dd7c:	bne	1ddb8 <__assert_fail@plt+0xc260>
   1dd80:	mov	r0, r4
   1dd84:	bl	1ddf8 <__assert_fail@plt+0xc2a0>
   1dd88:	cmp	r0, #0
   1dd8c:	beq	1dde8 <__assert_fail@plt+0xc290>
   1dd90:	bl	11984 <__errno_location@plt>
   1dd94:	mov	r5, r0
   1dd98:	mov	r0, r4
   1dd9c:	ldr	r4, [r5]
   1dda0:	bl	119e4 <fclose@plt>
   1dda4:	cmp	r4, #0
   1dda8:	mvnne	r0, #0
   1ddac:	strne	r4, [r5]
   1ddb0:	add	sp, sp, #12
   1ddb4:	pop	{r4, r5, pc}
   1ddb8:	mov	r0, r4
   1ddbc:	bl	119c0 <fileno@plt>
   1ddc0:	mov	r3, #1
   1ddc4:	str	r3, [sp]
   1ddc8:	mov	r2, #0
   1ddcc:	mov	r3, #0
   1ddd0:	bl	11828 <lseek64@plt>
   1ddd4:	mvn	r3, #0
   1ddd8:	mvn	r2, #0
   1dddc:	cmp	r1, r3
   1dde0:	cmpeq	r0, r2
   1dde4:	bne	1dd80 <__assert_fail@plt+0xc228>
   1dde8:	mov	r0, r4
   1ddec:	add	sp, sp, #12
   1ddf0:	pop	{r4, r5, lr}
   1ddf4:	b	119e4 <fclose@plt>
   1ddf8:	push	{r4, lr}
   1ddfc:	subs	r4, r0, #0
   1de00:	sub	sp, sp, #8
   1de04:	beq	1de20 <__assert_fail@plt+0xc2c8>
   1de08:	bl	118dc <__freading@plt>
   1de0c:	cmp	r0, #0
   1de10:	beq	1de20 <__assert_fail@plt+0xc2c8>
   1de14:	ldr	r3, [r4]
   1de18:	tst	r3, #256	; 0x100
   1de1c:	bne	1de30 <__assert_fail@plt+0xc2d8>
   1de20:	mov	r0, r4
   1de24:	add	sp, sp, #8
   1de28:	pop	{r4, lr}
   1de2c:	b	116fc <fflush@plt>
   1de30:	mov	r3, #1
   1de34:	str	r3, [sp]
   1de38:	mov	r2, #0
   1de3c:	mov	r3, #0
   1de40:	mov	r0, r4
   1de44:	bl	1de58 <__assert_fail@plt+0xc300>
   1de48:	mov	r0, r4
   1de4c:	add	sp, sp, #8
   1de50:	pop	{r4, lr}
   1de54:	b	116fc <fflush@plt>
   1de58:	push	{r4, r5, r6, r7, r8, lr}
   1de5c:	sub	sp, sp, #8
   1de60:	ldmib	r0, {ip, lr}
   1de64:	mov	r4, r0
   1de68:	ldr	r5, [sp, #32]
   1de6c:	cmp	lr, ip
   1de70:	beq	1de88 <__assert_fail@plt+0xc330>
   1de74:	str	r5, [sp, #32]
   1de78:	mov	r0, r4
   1de7c:	add	sp, sp, #8
   1de80:	pop	{r4, r5, r6, r7, r8, lr}
   1de84:	b	119f0 <fseeko64@plt>
   1de88:	ldr	lr, [r0, #20]
   1de8c:	ldr	ip, [r0, #16]
   1de90:	cmp	lr, ip
   1de94:	bne	1de74 <__assert_fail@plt+0xc31c>
   1de98:	ldr	r8, [r0, #36]	; 0x24
   1de9c:	cmp	r8, #0
   1dea0:	bne	1de74 <__assert_fail@plt+0xc31c>
   1dea4:	mov	r6, r2
   1dea8:	mov	r7, r3
   1deac:	bl	119c0 <fileno@plt>
   1deb0:	mov	r2, r6
   1deb4:	mov	r3, r7
   1deb8:	str	r5, [sp]
   1debc:	bl	11828 <lseek64@plt>
   1dec0:	mvn	r3, #0
   1dec4:	mvn	r2, #0
   1dec8:	cmp	r1, r3
   1decc:	cmpeq	r0, r2
   1ded0:	beq	1def0 <__assert_fail@plt+0xc398>
   1ded4:	ldr	r3, [r4]
   1ded8:	strd	r0, [r4, #80]	; 0x50
   1dedc:	mov	r0, r8
   1dee0:	bic	r3, r3, #16
   1dee4:	str	r3, [r4]
   1dee8:	add	sp, sp, #8
   1deec:	pop	{r4, r5, r6, r7, r8, pc}
   1def0:	mvn	r0, #0
   1def4:	b	1dee8 <__assert_fail@plt+0xc390>
   1def8:	ldrd	r2, [r1, #8]
   1defc:	push	{r4, r5}
   1df00:	ldrd	r4, [r0, #8]
   1df04:	cmp	r5, r3
   1df08:	cmpeq	r4, r2
   1df0c:	movne	r0, #0
   1df10:	bne	1df2c <__assert_fail@plt+0xc3d4>
   1df14:	ldrd	r4, [r0]
   1df18:	ldrd	r2, [r1]
   1df1c:	cmp	r5, r3
   1df20:	cmpeq	r4, r2
   1df24:	moveq	r0, #1
   1df28:	movne	r0, #0
   1df2c:	pop	{r4, r5}
   1df30:	bx	lr
   1df34:	push	{r4, lr}
   1df38:	mov	r2, r1
   1df3c:	mov	r3, #0
   1df40:	ldrd	r0, [r0, #8]
   1df44:	bl	21d3c <fts_children@@Base+0x1cb0>
   1df48:	mov	r0, r2
   1df4c:	pop	{r4, pc}
   1df50:	push	{r4, lr}
   1df54:	mov	r2, r1
   1df58:	mov	r3, #0
   1df5c:	ldrd	r0, [r0]
   1df60:	bl	21d3c <fts_children@@Base+0x1cb0>
   1df64:	mov	r0, r2
   1df68:	pop	{r4, pc}
   1df6c:	push	{r4, r5}
   1df70:	ldrd	r2, [r1]
   1df74:	ldrd	r4, [r0]
   1df78:	cmp	r5, r3
   1df7c:	cmpeq	r4, r2
   1df80:	moveq	r0, #1
   1df84:	movne	r0, #0
   1df88:	pop	{r4, r5}
   1df8c:	bx	lr
   1df90:	ldr	r2, [r0]
   1df94:	ldr	r3, [r1]
   1df98:	ldrd	r0, [r2, #168]	; 0xa8
   1df9c:	ldrd	r2, [r3, #168]	; 0xa8
   1dfa0:	cmp	r1, r3
   1dfa4:	cmpeq	r0, r2
   1dfa8:	bcc	1dfb8 <__assert_fail@plt+0xc460>
   1dfac:	movhi	r0, #1
   1dfb0:	movls	r0, #0
   1dfb4:	bx	lr
   1dfb8:	mvn	r0, #0
   1dfbc:	bx	lr
   1dfc0:	ldr	r3, [r0, #40]	; 0x28
   1dfc4:	push	{r4, r5, r6, r7, r8, lr}
   1dfc8:	cmp	r3, r2
   1dfcc:	mov	r6, r0
   1dfd0:	ldr	r7, [r0, #44]	; 0x2c
   1dfd4:	mov	r5, r2
   1dfd8:	mov	r4, r1
   1dfdc:	ldr	r0, [r0, #8]
   1dfe0:	bcs	1e008 <__assert_fail@plt+0xc4b0>
   1dfe4:	add	r1, r2, #40	; 0x28
   1dfe8:	cmn	r1, #-1073741823	; 0xc0000001
   1dfec:	str	r1, [r6, #40]	; 0x28
   1dff0:	bhi	1e080 <__assert_fail@plt+0xc528>
   1dff4:	lsl	r1, r1, #2
   1dff8:	bl	11798 <realloc@plt>
   1dffc:	cmp	r0, #0
   1e000:	strne	r0, [r6, #8]
   1e004:	beq	1e07c <__assert_fail@plt+0xc524>
   1e008:	cmp	r4, #0
   1e00c:	movne	r2, r0
   1e010:	beq	1e024 <__assert_fail@plt+0xc4cc>
   1e014:	str	r4, [r2], #4
   1e018:	ldr	r4, [r4, #8]
   1e01c:	cmp	r4, #0
   1e020:	bne	1e014 <__assert_fail@plt+0xc4bc>
   1e024:	mov	r3, r7
   1e028:	mov	r2, #4
   1e02c:	mov	r1, r5
   1e030:	bl	11ad4 <qsort@plt>
   1e034:	ldr	lr, [r6, #8]
   1e038:	subs	r3, r5, #1
   1e03c:	ldr	r0, [lr]
   1e040:	moveq	r2, r0
   1e044:	beq	1e070 <__assert_fail@plt+0xc518>
   1e048:	mov	ip, r0
   1e04c:	mov	r2, lr
   1e050:	b	1e058 <__assert_fail@plt+0xc500>
   1e054:	ldr	ip, [r2]
   1e058:	ldr	r1, [r2, #4]!
   1e05c:	subs	r3, r3, #1
   1e060:	str	r1, [ip, #8]
   1e064:	bne	1e054 <__assert_fail@plt+0xc4fc>
   1e068:	add	r5, lr, r5, lsl #2
   1e06c:	ldr	r2, [r5, #-4]
   1e070:	mov	r3, #0
   1e074:	str	r3, [r2, #8]
   1e078:	pop	{r4, r5, r6, r7, r8, pc}
   1e07c:	ldr	r0, [r6, #8]
   1e080:	bl	11720 <free@plt>
   1e084:	mov	r3, #0
   1e088:	mov	r0, r4
   1e08c:	str	r3, [r6, #8]
   1e090:	str	r3, [r6, #40]	; 0x28
   1e094:	pop	{r4, r5, r6, r7, r8, pc}
   1e098:	add	r3, r2, #184	; 0xb8
   1e09c:	push	{r4, r5, r6, r7, r8, lr}
   1e0a0:	mov	r6, r0
   1e0a4:	bic	r0, r3, #7
   1e0a8:	mov	r5, r2
   1e0ac:	mov	r7, r1
   1e0b0:	bl	118b8 <malloc@plt>
   1e0b4:	subs	r4, r0, #0
   1e0b8:	beq	1e104 <__assert_fail@plt+0xc5ac>
   1e0bc:	mov	r1, r7
   1e0c0:	mov	r2, r5
   1e0c4:	add	r0, r4, #176	; 0xb0
   1e0c8:	bl	11738 <memcpy@plt>
   1e0cc:	add	r0, r4, r5
   1e0d0:	ldr	r1, [r6, #24]
   1e0d4:	mov	r3, #0
   1e0d8:	mov	r2, #3
   1e0dc:	strb	r3, [r0, #176]	; 0xb0
   1e0e0:	str	r3, [r4, #32]
   1e0e4:	str	r3, [r4, #12]
   1e0e8:	strh	r3, [r4, #62]	; 0x3e
   1e0ec:	str	r3, [r4, #16]
   1e0f0:	str	r3, [r4, #20]
   1e0f4:	str	r5, [r4, #52]	; 0x34
   1e0f8:	str	r6, [r4, #44]	; 0x2c
   1e0fc:	str	r1, [r4, #28]
   1e100:	strh	r2, [r4, #64]	; 0x40
   1e104:	mov	r0, r4
   1e108:	pop	{r4, r5, r6, r7, r8, pc}
   1e10c:	push	{r4, r5, r6, lr}
   1e110:	subs	r4, r0, #0
   1e114:	popeq	{r4, r5, r6, pc}
   1e118:	ldr	r3, [r4, #12]
   1e11c:	ldr	r5, [r4, #8]
   1e120:	subs	r0, r3, #0
   1e124:	beq	1e12c <__assert_fail@plt+0xc5d4>
   1e128:	bl	11b4c <closedir@plt>
   1e12c:	mov	r0, r4
   1e130:	bl	11720 <free@plt>
   1e134:	subs	r4, r5, #0
   1e138:	bne	1e118 <__assert_fail@plt+0xc5c0>
   1e13c:	pop	{r4, r5, r6, pc}
   1e140:	push	{r4, lr}
   1e144:	mov	r4, r0
   1e148:	mov	r0, r4
   1e14c:	bl	2119c <fts_children@@Base+0x1110>
   1e150:	cmp	r0, #0
   1e154:	mov	r0, r4
   1e158:	popne	{r4, pc}
   1e15c:	bl	211e8 <fts_children@@Base+0x115c>
   1e160:	cmp	r0, #0
   1e164:	blt	1e148 <__assert_fail@plt+0xc5f0>
   1e168:	bl	11b34 <close@plt>
   1e16c:	b	1e148 <__assert_fail@plt+0xc5f0>
   1e170:	push	{r4, r5, r6, r7, r8, lr}
   1e174:	sub	sp, sp, #120	; 0x78
   1e178:	ldr	r6, [r0, #44]	; 0x2c
   1e17c:	ldr	r5, [pc, #272]	; 1e294 <__assert_fail@plt+0xc73c>
   1e180:	ldr	r3, [r6, #48]	; 0x30
   1e184:	ldr	r2, [r5]
   1e188:	tst	r3, #512	; 0x200
   1e18c:	str	r2, [sp, #116]	; 0x74
   1e190:	beq	1e214 <__assert_fail@plt+0xc6bc>
   1e194:	ldr	r4, [r6, #52]	; 0x34
   1e198:	mov	r7, r0
   1e19c:	cmp	r4, #0
   1e1a0:	mov	r8, r1
   1e1a4:	beq	1e1cc <__assert_fail@plt+0xc674>
   1e1a8:	ldrd	r2, [r7, #72]	; 0x48
   1e1ac:	add	r1, sp, #8
   1e1b0:	mov	r0, r4
   1e1b4:	strd	r2, [sp, #8]
   1e1b8:	bl	176f0 <__assert_fail@plt+0x5b98>
   1e1bc:	cmp	r0, #0
   1e1c0:	beq	1e1f8 <__assert_fail@plt+0xc6a0>
   1e1c4:	ldr	r6, [r0, #8]
   1e1c8:	b	1e218 <__assert_fail@plt+0xc6c0>
   1e1cc:	ldr	r3, [pc, #196]	; 1e298 <__assert_fail@plt+0xc740>
   1e1d0:	mov	r1, r4
   1e1d4:	str	r3, [sp]
   1e1d8:	ldr	r2, [pc, #188]	; 1e29c <__assert_fail@plt+0xc744>
   1e1dc:	ldr	r3, [pc, #188]	; 1e2a0 <__assert_fail@plt+0xc748>
   1e1e0:	mov	r0, #13
   1e1e4:	bl	179a8 <__assert_fail@plt+0x5e50>
   1e1e8:	cmp	r0, #0
   1e1ec:	mov	r4, r0
   1e1f0:	str	r0, [r6, #52]	; 0x34
   1e1f4:	bne	1e1a8 <__assert_fail@plt+0xc650>
   1e1f8:	cmp	r8, #0
   1e1fc:	blt	1e214 <__assert_fail@plt+0xc6bc>
   1e200:	mov	r0, r8
   1e204:	add	r1, sp, #24
   1e208:	bl	11690 <fstatfs64@plt>
   1e20c:	cmp	r0, #0
   1e210:	beq	1e234 <__assert_fail@plt+0xc6dc>
   1e214:	mov	r6, #0
   1e218:	ldr	r2, [sp, #116]	; 0x74
   1e21c:	ldr	r3, [r5]
   1e220:	mov	r0, r6
   1e224:	cmp	r2, r3
   1e228:	bne	1e28c <__assert_fail@plt+0xc734>
   1e22c:	add	sp, sp, #120	; 0x78
   1e230:	pop	{r4, r5, r6, r7, r8, pc}
   1e234:	cmp	r4, #0
   1e238:	ldr	r6, [sp, #24]
   1e23c:	beq	1e218 <__assert_fail@plt+0xc6c0>
   1e240:	mov	r0, #16
   1e244:	bl	118b8 <malloc@plt>
   1e248:	subs	r8, r0, #0
   1e24c:	beq	1e218 <__assert_fail@plt+0xc6c0>
   1e250:	ldrd	r2, [r7, #72]	; 0x48
   1e254:	str	r6, [r8, #8]
   1e258:	mov	r0, r4
   1e25c:	strd	r2, [r8]
   1e260:	mov	r1, r8
   1e264:	bl	17fd4 <__assert_fail@plt+0x647c>
   1e268:	cmp	r0, #0
   1e26c:	beq	1e280 <__assert_fail@plt+0xc728>
   1e270:	cmp	r8, r0
   1e274:	bne	1e290 <__assert_fail@plt+0xc738>
   1e278:	ldr	r6, [sp, #24]
   1e27c:	b	1e218 <__assert_fail@plt+0xc6c0>
   1e280:	mov	r0, r8
   1e284:	bl	11720 <free@plt>
   1e288:	b	1e278 <__assert_fail@plt+0xc720>
   1e28c:	bl	11780 <__stack_chk_fail@plt>
   1e290:	bl	11b28 <abort@plt>
   1e294:	andeq	r4, r3, r8, lsl #30
   1e298:	andeq	r1, r1, r0, lsr #14
   1e29c:	andeq	sp, r1, r0, asr pc
   1e2a0:	andeq	sp, r1, ip, ror #30
   1e2a4:	push	{r4, lr}
   1e2a8:	bl	1e170 <__assert_fail@plt+0xc618>
   1e2ac:	ldr	r3, [pc, #112]	; 1e324 <__assert_fail@plt+0xc7cc>
   1e2b0:	cmp	r0, r3
   1e2b4:	beq	1e314 <__assert_fail@plt+0xc7bc>
   1e2b8:	ble	1e2f0 <__assert_fail@plt+0xc798>
   1e2bc:	ldr	r3, [pc, #100]	; 1e328 <__assert_fail@plt+0xc7d0>
   1e2c0:	cmp	r0, r3
   1e2c4:	beq	1e314 <__assert_fail@plt+0xc7bc>
   1e2c8:	add	r3, r3, #83886080	; 0x5000000
   1e2cc:	add	r3, r3, #4544	; 0x11c0
   1e2d0:	add	r3, r3, #51	; 0x33
   1e2d4:	cmp	r0, r3
   1e2d8:	beq	1e31c <__assert_fail@plt+0xc7c4>
   1e2dc:	ldr	r3, [pc, #72]	; 1e32c <__assert_fail@plt+0xc7d4>
   1e2e0:	cmp	r0, r3
   1e2e4:	moveq	r0, #2
   1e2e8:	movne	r0, #1
   1e2ec:	pop	{r4, pc}
   1e2f0:	cmp	r0, #0
   1e2f4:	popeq	{r4, pc}
   1e2f8:	ldr	r3, [pc, #48]	; 1e330 <__assert_fail@plt+0xc7d8>
   1e2fc:	cmp	r0, r3
   1e300:	beq	1e314 <__assert_fail@plt+0xc7bc>
   1e304:	ldr	r3, [pc, #40]	; 1e334 <__assert_fail@plt+0xc7dc>
   1e308:	subs	r0, r0, r3
   1e30c:	movne	r0, #1
   1e310:	pop	{r4, pc}
   1e314:	mov	r0, #0
   1e318:	pop	{r4, pc}
   1e31c:	mov	r0, #2
   1e320:	pop	{r4, pc}
   1e324:	andeq	r9, r0, r0, lsr #31
   1e328:	movtpl	r4, #24911	; 0x614f
   1e32c:	rsbpl	r4, r5, #1884160	; 0x1cc000
   1e330:	andeq	r6, r0, r9, ror #18
   1e334:			; <UNDEFINED> instruction: 0xff534d42
   1e338:	push	{r4, r5, r6, lr}
   1e33c:	mov	r5, r1
   1e340:	ldr	r1, [r0, #32]
   1e344:	cmn	r1, #100	; 0x64
   1e348:	sub	r3, r1, r5
   1e34c:	clz	r3, r3
   1e350:	lsr	r3, r3, #5
   1e354:	moveq	r3, #0
   1e358:	cmp	r3, #0
   1e35c:	bne	1e3bc <__assert_fail@plt+0xc864>
   1e360:	cmp	r2, #0
   1e364:	mov	r4, r0
   1e368:	bne	1e394 <__assert_fail@plt+0xc83c>
   1e36c:	ldr	r3, [r0, #48]	; 0x30
   1e370:	lsr	r3, r3, #2
   1e374:	eor	r3, r3, #1
   1e378:	cmp	r1, #0
   1e37c:	movlt	r3, #0
   1e380:	andge	r3, r3, #1
   1e384:	cmp	r3, #0
   1e388:	bne	1e3b0 <__assert_fail@plt+0xc858>
   1e38c:	str	r5, [r4, #32]
   1e390:	pop	{r4, r5, r6, pc}
   1e394:	add	r0, r0, #60	; 0x3c
   1e398:	bl	211a4 <fts_children@@Base+0x1118>
   1e39c:	cmp	r0, #0
   1e3a0:	blt	1e38c <__assert_fail@plt+0xc834>
   1e3a4:	bl	11b34 <close@plt>
   1e3a8:	str	r5, [r4, #32]
   1e3ac:	pop	{r4, r5, r6, pc}
   1e3b0:	mov	r0, r1
   1e3b4:	bl	11b34 <close@plt>
   1e3b8:	b	1e3a8 <__assert_fail@plt+0xc850>
   1e3bc:	bl	11b28 <abort@plt>
   1e3c0:	ldr	r3, [r0, #48]	; 0x30
   1e3c4:	push	{r4, r5, r6, lr}
   1e3c8:	ands	r5, r3, #4
   1e3cc:	mov	r4, r0
   1e3d0:	movne	r5, #0
   1e3d4:	bne	1e3ec <__assert_fail@plt+0xc894>
   1e3d8:	tst	r3, #512	; 0x200
   1e3dc:	beq	1e3fc <__assert_fail@plt+0xc8a4>
   1e3e0:	mov	r2, #1
   1e3e4:	mvn	r1, #99	; 0x63
   1e3e8:	bl	1e338 <__assert_fail@plt+0xc7e0>
   1e3ec:	add	r0, r4, #60	; 0x3c
   1e3f0:	bl	1e140 <__assert_fail@plt+0xc5e8>
   1e3f4:	mov	r0, r5
   1e3f8:	pop	{r4, r5, r6, pc}
   1e3fc:	ldr	r0, [r0, #28]
   1e400:	bl	11ab0 <fchdir@plt>
   1e404:	adds	r5, r0, #0
   1e408:	movne	r5, #1
   1e40c:	b	1e3ec <__assert_fail@plt+0xc894>
   1e410:	push	{r4, r5, r6, lr}
   1e414:	mov	r4, r2
   1e418:	ldr	r2, [r2, #48]	; 0x30
   1e41c:	mov	r6, r1
   1e420:	cmp	r2, #0
   1e424:	ldr	ip, [r1]
   1e428:	sub	sp, sp, #8
   1e42c:	add	r5, r4, #72	; 0x48
   1e430:	ldr	r1, [r4, #24]
   1e434:	bne	1e494 <__assert_fail@plt+0xc93c>
   1e438:	tst	ip, #1
   1e43c:	beq	1e494 <__assert_fail@plt+0xc93c>
   1e440:	mov	r2, r5
   1e444:	mov	r0, #3
   1e448:	bl	11b04 <__xstat64@plt>
   1e44c:	cmp	r0, #0
   1e450:	beq	1e4c4 <__assert_fail@plt+0xc96c>
   1e454:	bl	11984 <__errno_location@plt>
   1e458:	ldr	r3, [r0]
   1e45c:	mov	r6, r0
   1e460:	cmp	r3, #2
   1e464:	bne	1e4f8 <__assert_fail@plt+0xc9a0>
   1e468:	mov	r2, r5
   1e46c:	ldr	r1, [r4, #24]
   1e470:	mov	r0, #3
   1e474:	bl	11b40 <__lxstat64@plt>
   1e478:	cmp	r0, #0
   1e47c:	ldrne	r3, [r6]
   1e480:	bne	1e4f8 <__assert_fail@plt+0xc9a0>
   1e484:	str	r0, [r6]
   1e488:	mov	r0, #13
   1e48c:	add	sp, sp, #8
   1e490:	pop	{r4, r5, r6, pc}
   1e494:	lsl	ip, ip, #30
   1e498:	orrs	r3, r3, ip, lsr #31
   1e49c:	bne	1e440 <__assert_fail@plt+0xc8e8>
   1e4a0:	mov	r3, #256	; 0x100
   1e4a4:	mov	r2, r1
   1e4a8:	str	r3, [sp]
   1e4ac:	mov	r1, r0
   1e4b0:	mov	r3, r5
   1e4b4:	mov	r0, #3
   1e4b8:	bl	117d4 <__fxstatat64@plt>
   1e4bc:	cmp	r0, #0
   1e4c0:	bne	1e4f0 <__assert_fail@plt+0xc998>
   1e4c4:	ldr	r3, [r4, #88]	; 0x58
   1e4c8:	and	r3, r3, #61440	; 0xf000
   1e4cc:	cmp	r3, #16384	; 0x4000
   1e4d0:	beq	1e518 <__assert_fail@plt+0xc9c0>
   1e4d4:	cmp	r3, #40960	; 0xa000
   1e4d8:	beq	1e594 <__assert_fail@plt+0xca3c>
   1e4dc:	cmp	r3, #32768	; 0x8000
   1e4e0:	movne	r0, #3
   1e4e4:	moveq	r0, #8
   1e4e8:	add	sp, sp, #8
   1e4ec:	pop	{r4, r5, r6, pc}
   1e4f0:	bl	11984 <__errno_location@plt>
   1e4f4:	ldr	r3, [r0]
   1e4f8:	str	r3, [r4, #32]
   1e4fc:	mov	r0, r5
   1e500:	mov	r2, #104	; 0x68
   1e504:	mov	r1, #0
   1e508:	bl	119a8 <memset@plt>
   1e50c:	mov	r0, #10
   1e510:	add	sp, sp, #8
   1e514:	pop	{r4, r5, r6, pc}
   1e518:	ldr	r3, [r4, #92]	; 0x5c
   1e51c:	cmp	r3, #1
   1e520:	bls	1e58c <__assert_fail@plt+0xca34>
   1e524:	ldr	r2, [r4, #48]	; 0x30
   1e528:	cmp	r2, #0
   1e52c:	ble	1e58c <__assert_fail@plt+0xca34>
   1e530:	ldr	r2, [r6]
   1e534:	tst	r2, #32
   1e538:	subeq	r3, r3, #2
   1e53c:	ldrb	r2, [r4, #176]	; 0xb0
   1e540:	str	r3, [r4, #56]	; 0x38
   1e544:	cmp	r2, #46	; 0x2e
   1e548:	bne	1e56c <__assert_fail@plt+0xca14>
   1e54c:	ldrb	r3, [r4, #177]	; 0xb1
   1e550:	cmp	r3, #0
   1e554:	beq	1e578 <__assert_fail@plt+0xca20>
   1e558:	ldr	r3, [r4, #176]	; 0xb0
   1e55c:	bic	r3, r3, #-16777216	; 0xff000000
   1e560:	bic	r3, r3, #255	; 0xff
   1e564:	cmp	r3, #11776	; 0x2e00
   1e568:	beq	1e578 <__assert_fail@plt+0xca20>
   1e56c:	mov	r0, #1
   1e570:	add	sp, sp, #8
   1e574:	pop	{r4, r5, r6, pc}
   1e578:	ldr	r3, [r4, #48]	; 0x30
   1e57c:	cmp	r3, #0
   1e580:	moveq	r0, #1
   1e584:	movne	r0, #5
   1e588:	b	1e4e8 <__assert_fail@plt+0xc990>
   1e58c:	mvn	r3, #0
   1e590:	b	1e53c <__assert_fail@plt+0xc9e4>
   1e594:	mov	r0, #12
   1e598:	b	1e4e8 <__assert_fail@plt+0xc990>
   1e59c:	ldr	ip, [r1]
   1e5a0:	push	{r4, r5, r6, lr}
   1e5a4:	add	r3, ip, #256	; 0x100
   1e5a8:	add	r2, r3, r2
   1e5ac:	cmp	ip, r2
   1e5b0:	mov	r4, r0
   1e5b4:	ldr	r0, [r0]
   1e5b8:	bhi	1e5e0 <__assert_fail@plt+0xca88>
   1e5bc:	str	r2, [r1]
   1e5c0:	mov	r1, r2
   1e5c4:	bl	11798 <realloc@plt>
   1e5c8:	subs	r5, r0, #0
   1e5cc:	movne	r3, #1
   1e5d0:	strne	r5, [r4]
   1e5d4:	beq	1e604 <__assert_fail@plt+0xcaac>
   1e5d8:	mov	r0, r3
   1e5dc:	pop	{r4, r5, r6, pc}
   1e5e0:	mov	r5, #0
   1e5e4:	bl	11720 <free@plt>
   1e5e8:	str	r5, [r4]
   1e5ec:	bl	11984 <__errno_location@plt>
   1e5f0:	mov	r2, #36	; 0x24
   1e5f4:	mov	r3, r5
   1e5f8:	str	r2, [r0]
   1e5fc:	mov	r0, r3
   1e600:	pop	{r4, r5, r6, pc}
   1e604:	ldr	r0, [r4]
   1e608:	bl	11720 <free@plt>
   1e60c:	str	r5, [r4]
   1e610:	mov	r3, r5
   1e614:	b	1e5d8 <__assert_fail@plt+0xca80>
   1e618:	ldr	r3, [pc, #104]	; 1e688 <__assert_fail@plt+0xcb30>
   1e61c:	push	{r4, lr}
   1e620:	and	r3, r3, r0
   1e624:	cmp	r3, #0
   1e628:	sub	sp, sp, #8
   1e62c:	mov	r4, r1
   1e630:	beq	1e664 <__assert_fail@plt+0xcb0c>
   1e634:	ldr	r2, [pc, #80]	; 1e68c <__assert_fail@plt+0xcb34>
   1e638:	ldr	r3, [pc, #80]	; 1e690 <__assert_fail@plt+0xcb38>
   1e63c:	str	r2, [sp]
   1e640:	mov	r1, #0
   1e644:	ldr	r2, [pc, #72]	; 1e694 <__assert_fail@plt+0xcb3c>
   1e648:	mov	r0, #31
   1e64c:	bl	179a8 <__assert_fail@plt+0x5e50>
   1e650:	str	r0, [r4]
   1e654:	adds	r0, r0, #0
   1e658:	movne	r0, #1
   1e65c:	add	sp, sp, #8
   1e660:	pop	{r4, pc}
   1e664:	mov	r0, #32
   1e668:	bl	118b8 <malloc@plt>
   1e66c:	cmp	r0, #0
   1e670:	str	r0, [r4]
   1e674:	beq	1e65c <__assert_fail@plt+0xcb04>
   1e678:	bl	20fd0 <fts_children@@Base+0xf44>
   1e67c:	mov	r0, #1
   1e680:	add	sp, sp, #8
   1e684:	pop	{r4, pc}
   1e688:	andeq	r0, r0, r2, lsl #2
   1e68c:	andeq	r1, r1, r0, lsr #14
   1e690:	strdeq	sp, [r1], -r8
   1e694:	andeq	sp, r1, r4, lsr pc
   1e698:	lsl	r3, r1, #11
   1e69c:	lsl	ip, r1, #7
   1e6a0:	tst	r1, #512	; 0x200
   1e6a4:	and	r1, r3, #32768	; 0x8000
   1e6a8:	and	r3, ip, #262144	; 0x40000
   1e6ac:	orr	r1, r1, r3
   1e6b0:	orr	r1, r1, #540672	; 0x84000
   1e6b4:	mov	r3, r2
   1e6b8:	orr	r1, r1, #2304	; 0x900
   1e6bc:	beq	1e6cc <__assert_fail@plt+0xcb74>
   1e6c0:	mov	r2, r1
   1e6c4:	mov	r1, r3
   1e6c8:	b	21264 <fts_children@@Base+0x11d8>
   1e6cc:	mov	r0, r2
   1e6d0:	b	210c8 <fts_children@@Base+0x103c>
   1e6d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6d8:	subs	fp, r3, #0
   1e6dc:	ldr	r5, [pc, #500]	; 1e8d8 <__assert_fail@plt+0xcd80>
   1e6e0:	sub	sp, sp, #116	; 0x74
   1e6e4:	ldr	sl, [r0, #48]	; 0x30
   1e6e8:	ldr	r3, [r5]
   1e6ec:	mov	r6, r0
   1e6f0:	mov	r7, r1
   1e6f4:	mov	r4, r2
   1e6f8:	and	r9, sl, #4
   1e6fc:	str	r3, [sp, #108]	; 0x6c
   1e700:	beq	1e7d4 <__assert_fail@plt+0xcc7c>
   1e704:	ldr	r1, [pc, #464]	; 1e8dc <__assert_fail@plt+0xcd84>
   1e708:	mov	r0, fp
   1e70c:	bl	116e4 <strcmp@plt>
   1e710:	cmp	r0, #0
   1e714:	bne	1e7d4 <__assert_fail@plt+0xcc7c>
   1e718:	cmp	r9, #0
   1e71c:	bne	1e810 <__assert_fail@plt+0xccb8>
   1e720:	cmp	r4, #0
   1e724:	bge	1e8c4 <__assert_fail@plt+0xcd6c>
   1e728:	tst	sl, #512	; 0x200
   1e72c:	bne	1e850 <__assert_fail@plt+0xccf8>
   1e730:	mov	r9, #1
   1e734:	mov	r1, sl
   1e738:	mov	r2, fp
   1e73c:	ldr	r0, [r6, #32]
   1e740:	bl	1e698 <__assert_fail@plt+0xcb40>
   1e744:	subs	r8, r0, #0
   1e748:	blt	1e8b8 <__assert_fail@plt+0xcd60>
   1e74c:	ldr	sl, [r6, #48]	; 0x30
   1e750:	tst	sl, #2
   1e754:	beq	1e7f0 <__assert_fail@plt+0xcc98>
   1e758:	mov	r2, sp
   1e75c:	mov	r1, r8
   1e760:	mov	r0, #3
   1e764:	bl	11804 <__fxstat64@plt>
   1e768:	cmp	r0, #0
   1e76c:	bne	1e848 <__assert_fail@plt+0xccf0>
   1e770:	ldrd	r0, [r7, #72]	; 0x48
   1e774:	ldrd	r2, [sp]
   1e778:	cmp	r1, r3
   1e77c:	cmpeq	r0, r2
   1e780:	bne	1e83c <__assert_fail@plt+0xcce4>
   1e784:	ldrd	r0, [r7, #168]	; 0xa8
   1e788:	ldrd	r2, [sp, #96]	; 0x60
   1e78c:	cmp	r1, r3
   1e790:	cmpeq	r0, r2
   1e794:	bne	1e83c <__assert_fail@plt+0xcce4>
   1e798:	ldr	sl, [r6, #48]	; 0x30
   1e79c:	tst	sl, #512	; 0x200
   1e7a0:	bne	1e88c <__assert_fail@plt+0xcd34>
   1e7a4:	mov	r0, r8
   1e7a8:	bl	11ab0 <fchdir@plt>
   1e7ac:	mov	sl, r0
   1e7b0:	cmp	r4, #0
   1e7b4:	bge	1e820 <__assert_fail@plt+0xccc8>
   1e7b8:	bl	11984 <__errno_location@plt>
   1e7bc:	mov	r4, r0
   1e7c0:	mov	r0, r8
   1e7c4:	ldr	r6, [r4]
   1e7c8:	bl	11b34 <close@plt>
   1e7cc:	str	r6, [r4]
   1e7d0:	b	1e820 <__assert_fail@plt+0xccc8>
   1e7d4:	cmp	r9, #0
   1e7d8:	bne	1e810 <__assert_fail@plt+0xccb8>
   1e7dc:	cmp	r4, #0
   1e7e0:	movge	r8, r4
   1e7e4:	blt	1e734 <__assert_fail@plt+0xcbdc>
   1e7e8:	tst	sl, #2
   1e7ec:	bne	1e758 <__assert_fail@plt+0xcc00>
   1e7f0:	cmp	fp, #0
   1e7f4:	beq	1e79c <__assert_fail@plt+0xcc44>
   1e7f8:	mov	r0, fp
   1e7fc:	ldr	r1, [pc, #216]	; 1e8dc <__assert_fail@plt+0xcd84>
   1e800:	bl	116e4 <strcmp@plt>
   1e804:	cmp	r0, #0
   1e808:	bne	1e79c <__assert_fail@plt+0xcc44>
   1e80c:	b	1e758 <__assert_fail@plt+0xcc00>
   1e810:	mvn	r3, r4
   1e814:	lsr	r3, r3, #31
   1e818:	ands	sl, r3, sl, lsr #9
   1e81c:	bne	1e8a8 <__assert_fail@plt+0xcd50>
   1e820:	ldr	r2, [sp, #108]	; 0x6c
   1e824:	ldr	r3, [r5]
   1e828:	mov	r0, sl
   1e82c:	cmp	r2, r3
   1e830:	bne	1e8c0 <__assert_fail@plt+0xcd68>
   1e834:	add	sp, sp, #116	; 0x74
   1e838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e83c:	bl	11984 <__errno_location@plt>
   1e840:	mov	r3, #2
   1e844:	str	r3, [r0]
   1e848:	mvn	sl, #0
   1e84c:	b	1e7b0 <__assert_fail@plt+0xcc58>
   1e850:	add	r8, r6, #60	; 0x3c
   1e854:	mov	r0, r8
   1e858:	bl	2119c <fts_children@@Base+0x1110>
   1e85c:	subs	r9, r0, #0
   1e860:	bne	1e734 <__assert_fail@plt+0xcbdc>
   1e864:	mov	r0, r8
   1e868:	bl	211e8 <fts_children@@Base+0x115c>
   1e86c:	ldr	sl, [r6, #48]	; 0x30
   1e870:	subs	r8, r0, #0
   1e874:	blt	1e730 <__assert_fail@plt+0xcbd8>
   1e878:	tst	sl, #2
   1e87c:	mov	r4, r8
   1e880:	mov	r9, #1
   1e884:	beq	1e79c <__assert_fail@plt+0xcc44>
   1e888:	b	1e758 <__assert_fail@plt+0xcc00>
   1e88c:	eor	r2, r9, #1
   1e890:	mov	r1, r8
   1e894:	uxtb	r2, r2
   1e898:	mov	r0, r6
   1e89c:	bl	1e338 <__assert_fail@plt+0xc7e0>
   1e8a0:	mov	sl, #0
   1e8a4:	b	1e820 <__assert_fail@plt+0xccc8>
   1e8a8:	mov	r0, r4
   1e8ac:	bl	11b34 <close@plt>
   1e8b0:	mov	sl, #0
   1e8b4:	b	1e820 <__assert_fail@plt+0xccc8>
   1e8b8:	mvn	sl, #0
   1e8bc:	b	1e820 <__assert_fail@plt+0xccc8>
   1e8c0:	bl	11780 <__stack_chk_fail@plt>
   1e8c4:	tst	sl, #2
   1e8c8:	mov	r8, r4
   1e8cc:	mov	r9, #1
   1e8d0:	beq	1e7f8 <__assert_fail@plt+0xcca0>
   1e8d4:	b	1e758 <__assert_fail@plt+0xcc00>
   1e8d8:	andeq	r4, r3, r8, lsl #30
   1e8dc:	andeq	r3, r2, r8, asr #29
   1e8e0:	ldr	r3, [pc, #164]	; 1e98c <__assert_fail@plt+0xce34>
   1e8e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e8e8:	and	r3, r3, r0
   1e8ec:	cmp	r3, #0
   1e8f0:	mov	sl, r1
   1e8f4:	mov	r8, r2
   1e8f8:	beq	1e960 <__assert_fail@plt+0xce08>
   1e8fc:	mov	r0, #24
   1e900:	bl	118b8 <malloc@plt>
   1e904:	subs	r9, r0, #0
   1e908:	beq	1e984 <__assert_fail@plt+0xce2c>
   1e90c:	ldrd	r4, [r8, #168]	; 0xa8
   1e910:	ldrd	r6, [r8, #72]	; 0x48
   1e914:	str	r8, [r9, #16]
   1e918:	strd	r4, [r9, #8]
   1e91c:	ldr	r0, [sl]
   1e920:	strd	r6, [r9]
   1e924:	mov	r1, r9
   1e928:	bl	17fd4 <__assert_fail@plt+0x647c>
   1e92c:	cmp	r9, r0
   1e930:	mov	r4, r0
   1e934:	beq	1e958 <__assert_fail@plt+0xce00>
   1e938:	mov	r0, r9
   1e93c:	bl	11720 <free@plt>
   1e940:	cmp	r4, #0
   1e944:	beq	1e984 <__assert_fail@plt+0xce2c>
   1e948:	ldr	r2, [r4, #16]
   1e94c:	mov	r3, #2
   1e950:	str	r2, [r8]
   1e954:	strh	r3, [r8, #60]	; 0x3c
   1e958:	mov	r0, #1
   1e95c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e960:	ldr	r0, [r1]
   1e964:	add	r1, r2, #72	; 0x48
   1e968:	bl	20ff4 <fts_children@@Base+0xf68>
   1e96c:	cmp	r0, #0
   1e970:	beq	1e958 <__assert_fail@plt+0xce00>
   1e974:	mov	r3, #2
   1e978:	str	r8, [r8]
   1e97c:	strh	r3, [r8, #60]	; 0x3c
   1e980:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e984:	mov	r0, #0
   1e988:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e98c:	andeq	r0, r0, r2, lsl #2
   1e990:	push	{r4, r5, r6, lr}
   1e994:	sub	sp, sp, #32
   1e998:	ldr	r6, [pc, #192]	; 1ea60 <__assert_fail@plt+0xcf08>
   1e99c:	ldr	r3, [pc, #192]	; 1ea64 <__assert_fail@plt+0xcf0c>
   1e9a0:	ldr	ip, [r6]
   1e9a4:	and	r3, r3, r0
   1e9a8:	cmp	r3, #0
   1e9ac:	str	ip, [sp, #28]
   1e9b0:	bne	1ea08 <__assert_fail@plt+0xceb0>
   1e9b4:	ldr	r3, [r2, #4]
   1e9b8:	cmp	r3, #0
   1e9bc:	beq	1e9f0 <__assert_fail@plt+0xce98>
   1e9c0:	ldr	r0, [r3, #48]	; 0x30
   1e9c4:	cmp	r0, #0
   1e9c8:	blt	1e9f0 <__assert_fail@plt+0xce98>
   1e9cc:	ldr	ip, [r1]
   1e9d0:	ldrd	r0, [ip, #16]
   1e9d4:	orrs	r1, r0, r1
   1e9d8:	beq	1ea5c <__assert_fail@plt+0xcf04>
   1e9dc:	ldrd	r4, [ip]
   1e9e0:	ldrd	r0, [r2, #168]	; 0xa8
   1e9e4:	cmp	r5, r1
   1e9e8:	cmpeq	r4, r0
   1e9ec:	beq	1ea34 <__assert_fail@plt+0xcedc>
   1e9f0:	ldr	r2, [sp, #28]
   1e9f4:	ldr	r3, [r6]
   1e9f8:	cmp	r2, r3
   1e9fc:	bne	1ea58 <__assert_fail@plt+0xcf00>
   1ea00:	add	sp, sp, #32
   1ea04:	pop	{r4, r5, r6, pc}
   1ea08:	ldrd	r4, [r2, #72]	; 0x48
   1ea0c:	ldrd	r2, [r2, #168]	; 0xa8
   1ea10:	ldr	r0, [r1]
   1ea14:	mov	r1, sp
   1ea18:	strd	r4, [sp]
   1ea1c:	strd	r2, [sp, #8]
   1ea20:	bl	1802c <__assert_fail@plt+0x64d4>
   1ea24:	cmp	r0, #0
   1ea28:	beq	1ea5c <__assert_fail@plt+0xcf04>
   1ea2c:	bl	11720 <free@plt>
   1ea30:	b	1e9f0 <__assert_fail@plt+0xce98>
   1ea34:	ldrd	r4, [r2, #72]	; 0x48
   1ea38:	ldrd	r0, [ip, #8]
   1ea3c:	cmp	r1, r5
   1ea40:	cmpeq	r0, r4
   1ea44:	ldrdeq	r0, [r3, #72]	; 0x48
   1ea48:	ldrdeq	r2, [r3, #168]	; 0xa8
   1ea4c:	strdeq	r0, [ip, #8]
   1ea50:	strdeq	r2, [ip]
   1ea54:	b	1e9f0 <__assert_fail@plt+0xce98>
   1ea58:	bl	11780 <__stack_chk_fail@plt>
   1ea5c:	bl	11b28 <abort@plt>
   1ea60:	andeq	r4, r3, r8, lsl #30
   1ea64:	andeq	r0, r0, r2, lsl #2
   1ea68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea6c:	mov	r5, r0
   1ea70:	ldr	r9, [r0]
   1ea74:	sub	sp, sp, #60	; 0x3c
   1ea78:	ldr	r0, [r9, #12]
   1ea7c:	str	r1, [sp, #36]	; 0x24
   1ea80:	cmp	r0, #0
   1ea84:	str	r0, [sp, #48]	; 0x30
   1ea88:	beq	1ed84 <__assert_fail@plt+0xd22c>
   1ea8c:	bl	11aa4 <dirfd@plt>
   1ea90:	subs	r3, r0, #0
   1ea94:	str	r3, [sp, #44]	; 0x2c
   1ea98:	blt	1f314 <__assert_fail@plt+0xd7bc>
   1ea9c:	ldr	r3, [r5, #44]	; 0x2c
   1eaa0:	cmp	r3, #0
   1eaa4:	beq	1f05c <__assert_fail@plt+0xd504>
   1eaa8:	ldr	r0, [r5, #48]	; 0x30
   1eaac:	mvn	r3, #0
   1eab0:	str	r3, [sp, #20]
   1eab4:	mov	r3, #1
   1eab8:	str	r3, [sp, #52]	; 0x34
   1eabc:	ldr	r2, [r9, #40]	; 0x28
   1eac0:	ldr	r3, [r9, #28]
   1eac4:	sub	r1, r2, #1
   1eac8:	str	r2, [sp, #4]
   1eacc:	ldrb	r3, [r3, r1]
   1ead0:	str	r1, [sp, #32]
   1ead4:	mov	sl, #0
   1ead8:	cmp	r3, #47	; 0x2f
   1eadc:	addne	r3, r2, #1
   1eae0:	strne	r3, [sp, #4]
   1eae4:	strne	r2, [sp, #32]
   1eae8:	ands	r0, r0, #4
   1eaec:	movne	r1, #47	; 0x2f
   1eaf0:	ldrne	r3, [r5, #24]
   1eaf4:	ldrne	r0, [sp, #32]
   1eaf8:	streq	r0, [sp, #24]
   1eafc:	addne	r2, r3, r0
   1eb00:	strbne	r1, [r3, r0]
   1eb04:	addne	r3, r2, #1
   1eb08:	strne	r3, [sp, #24]
   1eb0c:	ldr	r3, [r9, #48]	; 0x30
   1eb10:	ldr	fp, [r5, #36]	; 0x24
   1eb14:	ldr	r2, [sp, #4]
   1eb18:	add	r3, r3, #1
   1eb1c:	str	sl, [sp, #40]	; 0x28
   1eb20:	sub	fp, fp, r2
   1eb24:	str	r3, [sp, #16]
   1eb28:	str	sl, [sp, #28]
   1eb2c:	mov	r7, sl
   1eb30:	str	sl, [sp, #8]
   1eb34:	str	r9, [sp, #12]
   1eb38:	b	1eb88 <__assert_fail@plt+0xd030>
   1eb3c:	mov	r3, #0
   1eb40:	str	r3, [r4, #88]	; 0x58
   1eb44:	mov	r2, #2
   1eb48:	mov	r3, #0
   1eb4c:	strd	r2, [r4, #120]	; 0x78
   1eb50:	ldr	r3, [sp, #8]
   1eb54:	cmp	r3, #0
   1eb58:	mov	r3, #0
   1eb5c:	str	r3, [r4, #8]
   1eb60:	ldr	r3, [pc, #2148]	; 1f3cc <__assert_fail@plt+0xd874>
   1eb64:	strne	r4, [sl, #8]
   1eb68:	streq	r4, [sp, #8]
   1eb6c:	cmp	r7, r3
   1eb70:	beq	1ec8c <__assert_fail@plt+0xd134>
   1eb74:	ldr	r3, [sp, #20]
   1eb78:	add	r7, r7, #1
   1eb7c:	cmp	r7, r3
   1eb80:	bcs	1ef18 <__assert_fail@plt+0xd3c0>
   1eb84:	mov	sl, r4
   1eb88:	ldr	r3, [sp, #12]
   1eb8c:	ldr	r4, [r3, #12]
   1eb90:	cmp	r4, #0
   1eb94:	beq	1f074 <__assert_fail@plt+0xd51c>
   1eb98:	bl	11984 <__errno_location@plt>
   1eb9c:	mov	r3, #0
   1eba0:	mov	r8, r0
   1eba4:	mov	r0, r4
   1eba8:	str	r3, [r8]
   1ebac:	bl	11a74 <readdir64@plt>
   1ebb0:	subs	r9, r0, #0
   1ebb4:	beq	1f13c <__assert_fail@plt+0xd5e4>
   1ebb8:	ldr	r3, [r5, #48]	; 0x30
   1ebbc:	tst	r3, #32
   1ebc0:	bne	1ebd0 <__assert_fail@plt+0xd078>
   1ebc4:	ldrb	r3, [r9, #19]
   1ebc8:	cmp	r3, #46	; 0x2e
   1ebcc:	beq	1ed18 <__assert_fail@plt+0xd1c0>
   1ebd0:	add	r4, r9, #19
   1ebd4:	mov	r0, r4
   1ebd8:	bl	11954 <strlen@plt>
   1ebdc:	mov	r1, r4
   1ebe0:	mov	r2, r0
   1ebe4:	mov	r6, r0
   1ebe8:	mov	r0, r5
   1ebec:	bl	1e098 <__assert_fail@plt+0xc540>
   1ebf0:	subs	r4, r0, #0
   1ebf4:	beq	1efc4 <__assert_fail@plt+0xd46c>
   1ebf8:	cmp	fp, r6
   1ebfc:	bls	1eca0 <__assert_fail@plt+0xd148>
   1ec00:	ldr	r3, [sp, #4]
   1ec04:	adds	r6, r3, r6
   1ec08:	bcs	1f384 <__assert_fail@plt+0xd82c>
   1ec0c:	ldr	r0, [r5, #48]	; 0x30
   1ec10:	ldr	r1, [r5]
   1ec14:	ldrd	r2, [r9]
   1ec18:	ldr	ip, [sp, #16]
   1ec1c:	tst	r0, #4
   1ec20:	str	r1, [r4, #4]
   1ec24:	add	r1, r4, #176	; 0xb0
   1ec28:	str	ip, [r4, #48]	; 0x30
   1ec2c:	strd	r2, [r4, #168]	; 0xa8
   1ec30:	str	r6, [r4, #40]	; 0x28
   1ec34:	streq	r1, [r4, #24]
   1ec38:	bne	1ecf8 <__assert_fail@plt+0xd1a0>
   1ec3c:	ldr	r3, [r5, #44]	; 0x2c
   1ec40:	cmp	r3, #0
   1ec44:	beq	1ec50 <__assert_fail@plt+0xd0f8>
   1ec48:	ands	r3, r0, #1024	; 0x400
   1ec4c:	beq	1ed64 <__assert_fail@plt+0xd20c>
   1ec50:	ldrb	r2, [r9, #18]
   1ec54:	and	r0, r0, #24
   1ec58:	cmp	r0, #24
   1ec5c:	sub	r3, r2, #1
   1ec60:	beq	1ed38 <__assert_fail@plt+0xd1e0>
   1ec64:	mov	r2, #11
   1ec68:	cmp	r3, #11
   1ec6c:	strh	r2, [r4, #60]	; 0x3c
   1ec70:	bhi	1eb3c <__assert_fail@plt+0xcfe4>
   1ec74:	ldr	r2, [pc, #1876]	; 1f3d0 <__assert_fail@plt+0xd878>
   1ec78:	ldr	r1, [r2, r3, lsl #2]
   1ec7c:	mov	r2, #2
   1ec80:	mov	r3, #0
   1ec84:	str	r1, [r4, #88]	; 0x58
   1ec88:	b	1eb4c <__assert_fail@plt+0xcff4>
   1ec8c:	ldr	r6, [r5, #44]	; 0x2c
   1ec90:	cmp	r6, #0
   1ec94:	beq	1eecc <__assert_fail@plt+0xd374>
   1ec98:	ldr	r7, [pc, #1844]	; 1f3d4 <__assert_fail@plt+0xd87c>
   1ec9c:	b	1eb84 <__assert_fail@plt+0xd02c>
   1eca0:	ldr	r3, [sp, #32]
   1eca4:	add	r1, r5, #36	; 0x24
   1eca8:	add	r2, r3, #2
   1ecac:	add	r2, r2, r6
   1ecb0:	add	r0, r5, #24
   1ecb4:	ldr	fp, [r5, #24]
   1ecb8:	bl	1e59c <__assert_fail@plt+0xca44>
   1ecbc:	cmp	r0, #0
   1ecc0:	beq	1efc4 <__assert_fail@plt+0xd46c>
   1ecc4:	ldr	r3, [r5, #24]
   1ecc8:	cmp	r3, fp
   1eccc:	beq	1ed7c <__assert_fail@plt+0xd224>
   1ecd0:	ldr	r2, [r5, #48]	; 0x30
   1ecd4:	tst	r2, #4
   1ecd8:	ldrne	r2, [sp, #4]
   1ecdc:	addne	r3, r3, r2
   1ece0:	strne	r3, [sp, #24]
   1ece4:	ldr	fp, [r5, #36]	; 0x24
   1ece8:	ldr	r3, [sp, #4]
   1ecec:	str	r0, [sp, #28]
   1ecf0:	sub	fp, fp, r3
   1ecf4:	b	1ec00 <__assert_fail@plt+0xd0a8>
   1ecf8:	ldr	r3, [r4, #28]
   1ecfc:	ldr	r2, [r4, #52]	; 0x34
   1ed00:	str	r3, [r4, #24]
   1ed04:	add	r2, r2, #1
   1ed08:	ldr	r0, [sp, #24]
   1ed0c:	bl	11714 <memmove@plt>
   1ed10:	ldr	r0, [r5, #48]	; 0x30
   1ed14:	b	1ec3c <__assert_fail@plt+0xd0e4>
   1ed18:	ldrb	r3, [r9, #20]
   1ed1c:	cmp	r3, #0
   1ed20:	beq	1ed30 <__assert_fail@plt+0xd1d8>
   1ed24:	ldrh	r3, [r9, #20]
   1ed28:	cmp	r3, #46	; 0x2e
   1ed2c:	bne	1ebd0 <__assert_fail@plt+0xd078>
   1ed30:	mov	r4, sl
   1ed34:	b	1eb84 <__assert_fail@plt+0xd02c>
   1ed38:	tst	r2, #251	; 0xfb
   1ed3c:	beq	1ec64 <__assert_fail@plt+0xd10c>
   1ed40:	mov	r2, #11
   1ed44:	cmp	r3, #11
   1ed48:	strh	r2, [r4, #60]	; 0x3c
   1ed4c:	bls	1efac <__assert_fail@plt+0xd454>
   1ed50:	mov	r3, #0
   1ed54:	str	r3, [r4, #88]	; 0x58
   1ed58:	mov	r2, #1
   1ed5c:	mov	r3, #0
   1ed60:	b	1eb4c <__assert_fail@plt+0xcff4>
   1ed64:	mov	r2, r4
   1ed68:	add	r1, r5, #48	; 0x30
   1ed6c:	ldr	r0, [r5, #32]
   1ed70:	bl	1e410 <__assert_fail@plt+0xc8b8>
   1ed74:	strh	r0, [r4, #60]	; 0x3c
   1ed78:	b	1eb50 <__assert_fail@plt+0xcff8>
   1ed7c:	ldr	r0, [sp, #28]
   1ed80:	b	1ece4 <__assert_fail@plt+0xd18c>
   1ed84:	ldr	r3, [r5, #48]	; 0x30
   1ed88:	ldr	r1, [r9, #24]
   1ed8c:	and	r2, r3, #516	; 0x204
   1ed90:	cmp	r2, #512	; 0x200
   1ed94:	mvnne	r0, #99	; 0x63
   1ed98:	ldreq	r0, [r5, #32]
   1ed9c:	ands	ip, r3, #16
   1eda0:	beq	1edb0 <__assert_fail@plt+0xd258>
   1eda4:	tst	r3, #1
   1eda8:	moveq	ip, #32768	; 0x8000
   1edac:	bne	1f014 <__assert_fail@plt+0xd4bc>
   1edb0:	lsl	r2, r3, #7
   1edb4:	and	r2, r2, #262144	; 0x40000
   1edb8:	orr	r2, r2, ip
   1edbc:	orr	r2, r2, #540672	; 0x84000
   1edc0:	orr	r2, r2, #2304	; 0x900
   1edc4:	bl	21264 <fts_children@@Base+0x11d8>
   1edc8:	subs	r3, r0, #0
   1edcc:	str	r3, [sp, #44]	; 0x2c
   1edd0:	movlt	r3, #0
   1edd4:	strlt	r3, [r9, #12]
   1edd8:	blt	1f2e8 <__assert_fail@plt+0xd790>
   1eddc:	bl	11a80 <fdopendir@plt>
   1ede0:	subs	r4, r0, #0
   1ede4:	beq	1f2cc <__assert_fail@plt+0xd774>
   1ede8:	ldrh	r3, [r9, #60]	; 0x3c
   1edec:	str	r4, [r9, #12]
   1edf0:	cmp	r3, #11
   1edf4:	beq	1f24c <__assert_fail@plt+0xd6f4>
   1edf8:	ldr	r0, [r5, #48]	; 0x30
   1edfc:	tst	r0, #256	; 0x100
   1ee00:	bne	1f1c0 <__assert_fail@plt+0xd668>
   1ee04:	ldr	r2, [r5, #44]	; 0x2c
   1ee08:	ldr	r3, [pc, #1480]	; 1f3d8 <__assert_fail@plt+0xd880>
   1ee0c:	cmp	r2, #0
   1ee10:	mvnne	r3, #0
   1ee14:	str	r3, [sp, #20]
   1ee18:	ldr	r3, [sp, #36]	; 0x24
   1ee1c:	cmp	r3, #2
   1ee20:	beq	1f1b0 <__assert_fail@plt+0xd658>
   1ee24:	ldr	r3, [r5, #48]	; 0x30
   1ee28:	and	r3, r3, #56	; 0x38
   1ee2c:	cmp	r3, #24
   1ee30:	beq	1f024 <__assert_fail@plt+0xd4cc>
   1ee34:	ldr	r3, [sp, #36]	; 0x24
   1ee38:	mov	r6, #1
   1ee3c:	sub	r7, r3, #3
   1ee40:	clz	r7, r7
   1ee44:	lsr	r7, r7, #5
   1ee48:	ldr	r3, [r5, #48]	; 0x30
   1ee4c:	tst	r3, #512	; 0x200
   1ee50:	bne	1f268 <__assert_fail@plt+0xd710>
   1ee54:	mov	r3, #0
   1ee58:	ldr	r2, [sp, #44]	; 0x2c
   1ee5c:	mov	r1, r9
   1ee60:	mov	r0, r5
   1ee64:	bl	1e6d4 <__assert_fail@plt+0xcb7c>
   1ee68:	cmp	r0, #0
   1ee6c:	beq	1f064 <__assert_fail@plt+0xd50c>
   1ee70:	ldrh	r4, [r9, #62]	; 0x3e
   1ee74:	tst	r7, r6
   1ee78:	ldr	r6, [r9, #12]
   1ee7c:	orr	r4, r4, #1
   1ee80:	beq	1ee90 <__assert_fail@plt+0xd338>
   1ee84:	bl	11984 <__errno_location@plt>
   1ee88:	ldr	r3, [r0]
   1ee8c:	str	r3, [r9, #32]
   1ee90:	strh	r4, [r9, #62]	; 0x3e
   1ee94:	mov	r0, r6
   1ee98:	bl	11b4c <closedir@plt>
   1ee9c:	ldr	r3, [sp, #44]	; 0x2c
   1eea0:	ldr	r0, [r5, #48]	; 0x30
   1eea4:	mvn	r2, r3
   1eea8:	mov	r3, #0
   1eeac:	lsr	r2, r2, #31
   1eeb0:	ands	r2, r2, r0, lsr #9
   1eeb4:	str	r3, [r9, #12]
   1eeb8:	bne	1f34c <__assert_fail@plt+0xd7f4>
   1eebc:	mov	r3, #0
   1eec0:	str	r3, [r9, #12]
   1eec4:	str	r3, [sp, #52]	; 0x34
   1eec8:	b	1eabc <__assert_fail@plt+0xcf64>
   1eecc:	ldr	r1, [sp, #44]	; 0x2c
   1eed0:	ldr	r0, [sp, #12]
   1eed4:	bl	1e170 <__assert_fail@plt+0xc618>
   1eed8:	ldr	r3, [pc, #1276]	; 1f3dc <__assert_fail@plt+0xd884>
   1eedc:	cmp	r0, r3
   1eee0:	beq	1ef04 <__assert_fail@plt+0xd3ac>
   1eee4:	ldr	r3, [pc, #1268]	; 1f3e0 <__assert_fail@plt+0xd888>
   1eee8:	cmp	r0, r3
   1eeec:	beq	1ef04 <__assert_fail@plt+0xd3ac>
   1eef0:	ldr	r3, [pc, #1260]	; 1f3e4 <__assert_fail@plt+0xd88c>
   1eef4:	cmp	r0, r3
   1eef8:	movne	r3, #1
   1eefc:	strne	r3, [sp, #40]	; 0x28
   1ef00:	bne	1ec98 <__assert_fail@plt+0xd140>
   1ef04:	ldr	r3, [sp, #20]
   1ef08:	add	r7, r7, #1
   1ef0c:	cmp	r7, r3
   1ef10:	str	r6, [sp, #40]	; 0x28
   1ef14:	bcc	1eb84 <__assert_fail@plt+0xd02c>
   1ef18:	ldr	r3, [sp, #28]
   1ef1c:	ldr	r9, [sp, #12]
   1ef20:	cmp	r3, #0
   1ef24:	beq	1f084 <__assert_fail@plt+0xd52c>
   1ef28:	ldr	r3, [r5, #4]
   1ef2c:	ldr	r1, [r5, #24]
   1ef30:	cmp	r3, #0
   1ef34:	beq	1ef64 <__assert_fail@plt+0xd40c>
   1ef38:	ldr	r2, [r3, #24]
   1ef3c:	add	r0, r3, #176	; 0xb0
   1ef40:	cmp	r2, r0
   1ef44:	ldrne	r0, [r3, #28]
   1ef48:	str	r1, [r3, #28]
   1ef4c:	subne	r2, r2, r0
   1ef50:	addne	r2, r1, r2
   1ef54:	strne	r2, [r3, #24]
   1ef58:	ldr	r3, [r3, #8]
   1ef5c:	cmp	r3, #0
   1ef60:	bne	1ef38 <__assert_fail@plt+0xd3e0>
   1ef64:	ldr	r3, [sp, #8]
   1ef68:	b	1ef98 <__assert_fail@plt+0xd440>
   1ef6c:	ldr	r2, [r3, #24]
   1ef70:	cmp	r2, r0
   1ef74:	ldrne	r0, [r3, #28]
   1ef78:	str	r1, [r3, #28]
   1ef7c:	subne	r2, r2, r0
   1ef80:	addne	r2, r1, r2
   1ef84:	strne	r2, [r3, #24]
   1ef88:	ldr	r2, [r3, #8]
   1ef8c:	cmp	r2, #0
   1ef90:	ldreq	r2, [r3, #4]
   1ef94:	mov	r3, r2
   1ef98:	ldr	r2, [r3, #48]	; 0x30
   1ef9c:	add	r0, r3, #176	; 0xb0
   1efa0:	cmp	r2, #0
   1efa4:	bge	1ef6c <__assert_fail@plt+0xd414>
   1efa8:	b	1f084 <__assert_fail@plt+0xd52c>
   1efac:	ldr	r2, [pc, #1052]	; 1f3d0 <__assert_fail@plt+0xd878>
   1efb0:	ldr	r1, [r2, r3, lsl #2]
   1efb4:	mov	r2, #1
   1efb8:	mov	r3, #0
   1efbc:	str	r1, [r4, #88]	; 0x58
   1efc0:	b	1eb4c <__assert_fail@plt+0xcff4>
   1efc4:	ldr	r9, [sp, #12]
   1efc8:	mov	r0, r4
   1efcc:	ldr	r4, [r8]
   1efd0:	bl	11720 <free@plt>
   1efd4:	ldr	r0, [sp, #8]
   1efd8:	bl	1e10c <__assert_fail@plt+0xc5b4>
   1efdc:	ldr	r0, [r9, #12]
   1efe0:	bl	11b4c <closedir@plt>
   1efe4:	ldr	r3, [r5, #48]	; 0x30
   1efe8:	mov	r2, #0
   1efec:	orr	r3, r3, #16384	; 0x4000
   1eff0:	mov	r1, #7
   1eff4:	str	r2, [r9, #12]
   1eff8:	strh	r1, [r9, #60]	; 0x3c
   1effc:	str	r2, [sp, #8]
   1f000:	str	r3, [r5, #48]	; 0x30
   1f004:	str	r4, [r8]
   1f008:	ldr	r0, [sp, #8]
   1f00c:	add	sp, sp, #60	; 0x3c
   1f010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f014:	ldr	ip, [r9, #48]	; 0x30
   1f018:	cmp	ip, #0
   1f01c:	movne	ip, #32768	; 0x8000
   1f020:	b	1edb0 <__assert_fail@plt+0xd258>
   1f024:	ldr	r3, [r9, #92]	; 0x5c
   1f028:	cmp	r3, #2
   1f02c:	bne	1ee34 <__assert_fail@plt+0xd2dc>
   1f030:	ldr	r1, [sp, #44]	; 0x2c
   1f034:	mov	r0, r9
   1f038:	bl	1e2a4 <__assert_fail@plt+0xc74c>
   1f03c:	cmp	r0, #0
   1f040:	beq	1ee34 <__assert_fail@plt+0xd2dc>
   1f044:	ldr	r3, [sp, #36]	; 0x24
   1f048:	cmp	r3, #3
   1f04c:	bne	1f1b0 <__assert_fail@plt+0xd658>
   1f050:	mov	r6, #0
   1f054:	mov	r7, #1
   1f058:	b	1ee48 <__assert_fail@plt+0xd2f0>
   1f05c:	ldr	r3, [pc, #884]	; 1f3d8 <__assert_fail@plt+0xd880>
   1f060:	str	r3, [sp, #20]
   1f064:	mov	r3, #1
   1f068:	str	r3, [sp, #52]	; 0x34
   1f06c:	ldr	r0, [r5, #48]	; 0x30
   1f070:	b	1eabc <__assert_fail@plt+0xcf64>
   1f074:	mov	r9, r3
   1f078:	ldr	r3, [sp, #28]
   1f07c:	cmp	r3, #0
   1f080:	bne	1ef28 <__assert_fail@plt+0xd3d0>
   1f084:	ldr	r3, [r5, #48]	; 0x30
   1f088:	tst	r3, #4
   1f08c:	beq	1f0b8 <__assert_fail@plt+0xd560>
   1f090:	ldr	r3, [r5, #36]	; 0x24
   1f094:	ldr	r2, [sp, #4]
   1f098:	cmp	r7, #0
   1f09c:	cmpne	r3, r2
   1f0a0:	ldreq	r3, [sp, #24]
   1f0a4:	subeq	r3, r3, #1
   1f0a8:	streq	r3, [sp, #24]
   1f0ac:	ldr	r2, [sp, #24]
   1f0b0:	mov	r3, #0
   1f0b4:	strb	r3, [r2]
   1f0b8:	ldrd	r2, [sp, #48]	; 0x30
   1f0bc:	cmp	r2, #0
   1f0c0:	movne	r3, #0
   1f0c4:	cmp	r3, #0
   1f0c8:	beq	1f100 <__assert_fail@plt+0xd5a8>
   1f0cc:	ldr	r3, [sp, #36]	; 0x24
   1f0d0:	cmp	r7, #0
   1f0d4:	cmpne	r3, #1
   1f0d8:	bne	1f108 <__assert_fail@plt+0xd5b0>
   1f0dc:	ldr	r3, [r9, #48]	; 0x30
   1f0e0:	cmp	r3, #0
   1f0e4:	bne	1f2ac <__assert_fail@plt+0xd754>
   1f0e8:	mov	r0, r5
   1f0ec:	bl	1e3c0 <__assert_fail@plt+0xc868>
   1f0f0:	adds	r0, r0, #0
   1f0f4:	movne	r0, #1
   1f0f8:	cmp	r0, #0
   1f0fc:	bne	1f35c <__assert_fail@plt+0xd804>
   1f100:	cmp	r7, #0
   1f104:	beq	1f210 <__assert_fail@plt+0xd6b8>
   1f108:	ldr	r3, [sp, #40]	; 0x28
   1f10c:	cmp	r3, #0
   1f110:	bne	1f180 <__assert_fail@plt+0xd628>
   1f114:	ldr	r3, [r5, #44]	; 0x2c
   1f118:	cmp	r3, #0
   1f11c:	cmpne	r7, #1
   1f120:	beq	1f008 <__assert_fail@plt+0xd4b0>
   1f124:	mov	r2, r7
   1f128:	ldr	r1, [sp, #8]
   1f12c:	mov	r0, r5
   1f130:	add	sp, sp, #60	; 0x3c
   1f134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f138:	b	1dfc0 <__assert_fail@plt+0xc468>
   1f13c:	ldr	r3, [r8]
   1f140:	ldr	r9, [sp, #12]
   1f144:	cmp	r3, #0
   1f148:	beq	1f164 <__assert_fail@plt+0xd60c>
   1f14c:	ldr	r2, [sp, #48]	; 0x30
   1f150:	str	r3, [r9, #32]
   1f154:	orrs	r2, r2, r7
   1f158:	moveq	r2, #4
   1f15c:	movne	r2, #7
   1f160:	strh	r2, [r9, #60]	; 0x3c
   1f164:	ldr	r0, [r9, #12]
   1f168:	cmp	r0, #0
   1f16c:	beq	1f078 <__assert_fail@plt+0xd520>
   1f170:	bl	11b4c <closedir@plt>
   1f174:	mov	r3, #0
   1f178:	str	r3, [r9, #12]
   1f17c:	b	1f078 <__assert_fail@plt+0xd520>
   1f180:	ldr	r3, [pc, #608]	; 1f3e8 <__assert_fail@plt+0xd890>
   1f184:	mov	r2, r7
   1f188:	str	r3, [r5, #44]	; 0x2c
   1f18c:	ldr	r1, [sp, #8]
   1f190:	mov	r0, r5
   1f194:	bl	1dfc0 <__assert_fail@plt+0xc468>
   1f198:	mov	r3, #0
   1f19c:	str	r3, [r5, #44]	; 0x2c
   1f1a0:	str	r0, [sp, #8]
   1f1a4:	ldr	r0, [sp, #8]
   1f1a8:	add	sp, sp, #60	; 0x3c
   1f1ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1b0:	mov	r3, #0
   1f1b4:	str	r3, [sp, #52]	; 0x34
   1f1b8:	ldr	r0, [r5, #48]	; 0x30
   1f1bc:	b	1eabc <__assert_fail@plt+0xcf64>
   1f1c0:	add	r4, r5, #56	; 0x38
   1f1c4:	mov	r1, r4
   1f1c8:	mov	r2, r9
   1f1cc:	bl	1e990 <__assert_fail@plt+0xce38>
   1f1d0:	mov	r3, #0
   1f1d4:	mov	r2, r9
   1f1d8:	add	r1, r5, #48	; 0x30
   1f1dc:	ldr	r0, [r5, #32]
   1f1e0:	bl	1e410 <__assert_fail@plt+0xc8b8>
   1f1e4:	mov	r1, r4
   1f1e8:	mov	r2, r9
   1f1ec:	ldr	r0, [r5, #48]	; 0x30
   1f1f0:	bl	1e8e0 <__assert_fail@plt+0xcd88>
   1f1f4:	subs	r4, r0, #0
   1f1f8:	bne	1ee04 <__assert_fail@plt+0xd2ac>
   1f1fc:	bl	11984 <__errno_location@plt>
   1f200:	mov	r3, #12
   1f204:	str	r4, [sp, #8]
   1f208:	str	r3, [r0]
   1f20c:	b	1f008 <__assert_fail@plt+0xd4b0>
   1f210:	ldr	r3, [sp, #36]	; 0x24
   1f214:	cmp	r3, #3
   1f218:	bne	1f230 <__assert_fail@plt+0xd6d8>
   1f21c:	ldrh	r3, [r9, #60]	; 0x3c
   1f220:	cmp	r3, #4
   1f224:	cmpne	r3, #7
   1f228:	movne	r3, #6
   1f22c:	strhne	r3, [r9, #60]	; 0x3c
   1f230:	ldr	r0, [sp, #8]
   1f234:	bl	1e10c <__assert_fail@plt+0xc5b4>
   1f238:	mov	r3, #0
   1f23c:	str	r3, [sp, #8]
   1f240:	ldr	r0, [sp, #8]
   1f244:	add	sp, sp, #60	; 0x3c
   1f248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f24c:	mov	r3, #0
   1f250:	mov	r2, r9
   1f254:	add	r1, r5, #48	; 0x30
   1f258:	ldr	r0, [r5, #32]
   1f25c:	bl	1e410 <__assert_fail@plt+0xc8b8>
   1f260:	strh	r0, [r9, #60]	; 0x3c
   1f264:	b	1ee04 <__assert_fail@plt+0xd2ac>
   1f268:	ldr	r0, [sp, #44]	; 0x2c
   1f26c:	mov	r2, #3
   1f270:	ldr	r1, [pc, #372]	; 1f3ec <__assert_fail@plt+0xd894>
   1f274:	bl	21304 <fts_children@@Base+0x1278>
   1f278:	subs	r3, r0, #0
   1f27c:	str	r3, [sp, #44]	; 0x2c
   1f280:	bge	1ee54 <__assert_fail@plt+0xd2fc>
   1f284:	ldrh	r4, [r9, #62]	; 0x3e
   1f288:	tst	r7, r6
   1f28c:	ldr	r6, [r9, #12]
   1f290:	orr	r4, r4, #1
   1f294:	bne	1ee84 <__assert_fail@plt+0xd32c>
   1f298:	strh	r4, [r9, #62]	; 0x3e
   1f29c:	mov	r0, r6
   1f2a0:	bl	11b4c <closedir@plt>
   1f2a4:	ldr	r0, [r5, #48]	; 0x30
   1f2a8:	b	1eebc <__assert_fail@plt+0xd364>
   1f2ac:	ldr	r3, [pc, #316]	; 1f3f0 <__assert_fail@plt+0xd898>
   1f2b0:	mvn	r2, #0
   1f2b4:	ldr	r1, [r9, #4]
   1f2b8:	mov	r0, r5
   1f2bc:	bl	1e6d4 <__assert_fail@plt+0xcb7c>
   1f2c0:	adds	r0, r0, #0
   1f2c4:	movne	r0, #1
   1f2c8:	b	1f0f8 <__assert_fail@plt+0xd5a0>
   1f2cc:	bl	11984 <__errno_location@plt>
   1f2d0:	mov	r5, r0
   1f2d4:	ldr	r0, [sp, #44]	; 0x2c
   1f2d8:	ldr	r6, [r5]
   1f2dc:	bl	11b34 <close@plt>
   1f2e0:	str	r6, [r5]
   1f2e4:	str	r4, [r9, #12]
   1f2e8:	ldr	r3, [sp, #36]	; 0x24
   1f2ec:	cmp	r3, #3
   1f2f0:	bne	1f238 <__assert_fail@plt+0xd6e0>
   1f2f4:	mov	r3, #4
   1f2f8:	strh	r3, [r9, #60]	; 0x3c
   1f2fc:	bl	11984 <__errno_location@plt>
   1f300:	mov	r3, #0
   1f304:	str	r3, [sp, #8]
   1f308:	ldr	r3, [r0]
   1f30c:	str	r3, [r9, #32]
   1f310:	b	1f008 <__assert_fail@plt+0xd4b0>
   1f314:	ldr	r0, [r9, #12]
   1f318:	bl	11b4c <closedir@plt>
   1f31c:	ldr	r3, [sp, #36]	; 0x24
   1f320:	mov	r4, #0
   1f324:	cmp	r3, #3
   1f328:	str	r4, [r9, #12]
   1f32c:	bne	1f238 <__assert_fail@plt+0xd6e0>
   1f330:	mov	r3, #4
   1f334:	strh	r3, [r9, #60]	; 0x3c
   1f338:	bl	11984 <__errno_location@plt>
   1f33c:	str	r4, [sp, #8]
   1f340:	ldr	r3, [r0]
   1f344:	str	r3, [r9, #32]
   1f348:	b	1f008 <__assert_fail@plt+0xd4b0>
   1f34c:	ldr	r0, [sp, #44]	; 0x2c
   1f350:	bl	11b34 <close@plt>
   1f354:	ldr	r0, [r5, #48]	; 0x30
   1f358:	b	1eebc <__assert_fail@plt+0xd364>
   1f35c:	ldr	r3, [r5, #48]	; 0x30
   1f360:	mov	r2, #7
   1f364:	orr	r3, r3, #16384	; 0x4000
   1f368:	strh	r2, [r9, #60]	; 0x3c
   1f36c:	ldr	r0, [sp, #8]
   1f370:	str	r3, [r5, #48]	; 0x30
   1f374:	bl	1e10c <__assert_fail@plt+0xc5b4>
   1f378:	mov	r3, #0
   1f37c:	str	r3, [sp, #8]
   1f380:	b	1f008 <__assert_fail@plt+0xd4b0>
   1f384:	ldr	r9, [sp, #12]
   1f388:	mov	r0, r4
   1f38c:	bl	11720 <free@plt>
   1f390:	ldr	r0, [sp, #8]
   1f394:	bl	1e10c <__assert_fail@plt+0xc5b4>
   1f398:	ldr	r0, [r9, #12]
   1f39c:	bl	11b4c <closedir@plt>
   1f3a0:	ldr	r3, [r5, #48]	; 0x30
   1f3a4:	mov	r2, #0
   1f3a8:	orr	r3, r3, #16384	; 0x4000
   1f3ac:	mov	r0, #7
   1f3b0:	mov	r1, #36	; 0x24
   1f3b4:	str	r2, [r9, #12]
   1f3b8:	strh	r0, [r9, #60]	; 0x3c
   1f3bc:	str	r2, [sp, #8]
   1f3c0:	str	r3, [r5, #48]	; 0x30
   1f3c4:	str	r1, [r8]
   1f3c8:	b	1f008 <__assert_fail@plt+0xd4b0>
   1f3cc:	andeq	r2, r0, r0, lsl r7
   1f3d0:	muleq	r2, r8, lr
   1f3d4:	andeq	r2, r0, r1, lsl r7
   1f3d8:	andeq	r8, r1, r0, lsr #13
   1f3dc:	andeq	r6, r0, r9, ror #18
   1f3e0:			; <UNDEFINED> instruction: 0x01021994
   1f3e4:			; <UNDEFINED> instruction: 0xff534d42
   1f3e8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1f3ec:	andeq	r0, r0, r6, lsl #8
   1f3f0:	andeq	r3, r2, r8, asr #29

0001f3f4 <fts_open@@Base>:
   1f3f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3f8:	bic	r5, r1, #8128	; 0x1fc0
   1f3fc:	bic	r5, r5, #63	; 0x3f
   1f400:	cmp	r5, #0
   1f404:	sub	sp, sp, #20
   1f408:	bne	1f730 <fts_open@@Base+0x33c>
   1f40c:	and	r3, r1, #516	; 0x204
   1f410:	cmp	r3, #516	; 0x204
   1f414:	mov	r7, r1
   1f418:	beq	1f6c4 <fts_open@@Base+0x2d0>
   1f41c:	ands	r5, r1, #18
   1f420:	beq	1f6c4 <fts_open@@Base+0x2d0>
   1f424:	mov	r6, r0
   1f428:	mov	r1, #1
   1f42c:	mov	r0, #96	; 0x60
   1f430:	mov	r9, r2
   1f434:	bl	1169c <calloc@plt>
   1f438:	subs	r5, r0, #0
   1f43c:	beq	1f688 <fts_open@@Base+0x294>
   1f440:	tst	r7, #2
   1f444:	bicne	r3, r7, #512	; 0x200
   1f448:	orrne	r3, r3, #4
   1f44c:	strne	r3, [r5, #48]	; 0x30
   1f450:	ldr	r3, [r6]
   1f454:	streq	r7, [r5, #48]	; 0x30
   1f458:	mvn	r2, #99	; 0x63
   1f45c:	cmp	r3, #0
   1f460:	str	r9, [r5, #44]	; 0x2c
   1f464:	str	r2, [r5, #32]
   1f468:	beq	1f74c <fts_open@@Base+0x358>
   1f46c:	mov	r8, r6
   1f470:	mov	r4, #0
   1f474:	mov	r0, r3
   1f478:	bl	11954 <strlen@plt>
   1f47c:	ldr	r3, [r8, #4]!
   1f480:	cmp	r4, r0
   1f484:	movcc	r4, r0
   1f488:	cmp	r3, #0
   1f48c:	bne	1f474 <fts_open@@Base+0x80>
   1f490:	add	r2, r4, #1
   1f494:	cmp	r2, #4096	; 0x1000
   1f498:	movcc	r2, #4096	; 0x1000
   1f49c:	add	r1, r5, #36	; 0x24
   1f4a0:	add	r0, r5, #24
   1f4a4:	bl	1e59c <__assert_fail@plt+0xca44>
   1f4a8:	subs	fp, r0, #0
   1f4ac:	beq	1f6ac <fts_open@@Base+0x2b8>
   1f4b0:	ldr	sl, [r6]
   1f4b4:	cmp	sl, #0
   1f4b8:	beq	1f6dc <fts_open@@Base+0x2e8>
   1f4bc:	mov	r2, #0
   1f4c0:	ldr	r1, [pc, #704]	; 1f788 <fts_open@@Base+0x394>
   1f4c4:	mov	r0, r5
   1f4c8:	bl	1e098 <__assert_fail@plt+0xc540>
   1f4cc:	subs	sl, r0, #0
   1f4d0:	beq	1f6a4 <fts_open@@Base+0x2b0>
   1f4d4:	mvn	r3, #0
   1f4d8:	cmp	r9, #0
   1f4dc:	str	r3, [sl, #48]	; 0x30
   1f4e0:	str	r3, [sl, #56]	; 0x38
   1f4e4:	ldr	r4, [r6]
   1f4e8:	beq	1f4f8 <fts_open@@Base+0x104>
   1f4ec:	ldr	fp, [r5, #48]	; 0x30
   1f4f0:	lsr	fp, fp, #10
   1f4f4:	and	fp, fp, #1
   1f4f8:	cmp	r4, #0
   1f4fc:	beq	1f780 <fts_open@@Base+0x38c>
   1f500:	lsr	r7, r7, #12
   1f504:	mov	r3, #0
   1f508:	eor	r7, r7, #1
   1f50c:	and	r2, r7, #1
   1f510:	str	r3, [sp, #8]
   1f514:	mov	r8, r3
   1f518:	mov	r7, r3
   1f51c:	add	r3, r5, #48	; 0x30
   1f520:	str	r2, [sp, #4]
   1f524:	str	r3, [sp, #12]
   1f528:	b	1f560 <fts_open@@Base+0x16c>
   1f52c:	cmp	r9, r1
   1f530:	mov	r0, #2
   1f534:	mov	r1, #0
   1f538:	mov	r3, #11
   1f53c:	strd	r0, [r4, #120]	; 0x78
   1f540:	strh	r3, [r4, #60]	; 0x3c
   1f544:	beq	1f71c <fts_open@@Base+0x328>
   1f548:	str	r7, [r4, #8]
   1f54c:	mov	r7, r4
   1f550:	ldr	r4, [r6, #4]!
   1f554:	add	r8, r8, #1
   1f558:	cmp	r4, #0
   1f55c:	beq	1f60c <fts_open@@Base+0x218>
   1f560:	mov	r0, r4
   1f564:	bl	11954 <strlen@plt>
   1f568:	ldr	r3, [sp, #4]
   1f56c:	cmp	r0, #2
   1f570:	movls	r3, #0
   1f574:	andhi	r3, r3, #1
   1f578:	cmp	r3, #0
   1f57c:	mov	r2, r0
   1f580:	bne	1f6ec <fts_open@@Base+0x2f8>
   1f584:	mov	r1, r4
   1f588:	mov	r0, r5
   1f58c:	bl	1e098 <__assert_fail@plt+0xc540>
   1f590:	subs	r4, r0, #0
   1f594:	beq	1f694 <fts_open@@Base+0x2a0>
   1f598:	cmp	r7, #0
   1f59c:	moveq	r3, #0
   1f5a0:	andne	r3, fp, #1
   1f5a4:	add	r2, r4, #176	; 0xb0
   1f5a8:	mov	r1, #0
   1f5ac:	cmp	r3, #0
   1f5b0:	str	r1, [r4, #48]	; 0x30
   1f5b4:	str	sl, [r4, #4]
   1f5b8:	str	r2, [r4, #24]
   1f5bc:	bne	1f52c <fts_open@@Base+0x138>
   1f5c0:	mov	r2, r4
   1f5c4:	ldr	r1, [sp, #12]
   1f5c8:	ldr	r0, [r5, #32]
   1f5cc:	bl	1e410 <__assert_fail@plt+0xc8b8>
   1f5d0:	cmp	r9, #0
   1f5d4:	strh	r0, [r4, #60]	; 0x3c
   1f5d8:	bne	1f548 <fts_open@@Base+0x154>
   1f5dc:	cmp	r7, #0
   1f5e0:	str	r9, [r4, #8]
   1f5e4:	streq	r4, [sp, #8]
   1f5e8:	moveq	r7, r4
   1f5ec:	beq	1f550 <fts_open@@Base+0x15c>
   1f5f0:	ldr	r3, [sp, #8]
   1f5f4:	str	r4, [sp, #8]
   1f5f8:	str	r4, [r3, #8]
   1f5fc:	ldr	r4, [r6, #4]!
   1f600:	add	r8, r8, #1
   1f604:	cmp	r4, #0
   1f608:	bne	1f560 <fts_open@@Base+0x16c>
   1f60c:	cmp	r9, #0
   1f610:	cmpne	r8, #1
   1f614:	bls	1f62c <fts_open@@Base+0x238>
   1f618:	mov	r1, r7
   1f61c:	mov	r2, r8
   1f620:	mov	r0, r5
   1f624:	bl	1dfc0 <__assert_fail@plt+0xc468>
   1f628:	mov	r7, r0
   1f62c:	mov	r2, #0
   1f630:	ldr	r1, [pc, #336]	; 1f788 <fts_open@@Base+0x394>
   1f634:	mov	r0, r5
   1f638:	bl	1e098 <__assert_fail@plt+0xc540>
   1f63c:	cmp	r0, #0
   1f640:	str	r0, [r5]
   1f644:	beq	1f694 <fts_open@@Base+0x2a0>
   1f648:	mov	r2, #1
   1f64c:	mov	r3, #9
   1f650:	str	r7, [r0, #8]
   1f654:	str	r2, [r0, #48]	; 0x30
   1f658:	strh	r3, [r0, #60]	; 0x3c
   1f65c:	add	r1, r5, #56	; 0x38
   1f660:	ldr	r0, [r5, #48]	; 0x30
   1f664:	bl	1e618 <__assert_fail@plt+0xcac0>
   1f668:	cmp	r0, #0
   1f66c:	beq	1f694 <fts_open@@Base+0x2a0>
   1f670:	ldr	r1, [r5, #48]	; 0x30
   1f674:	tst	r1, #516	; 0x204
   1f678:	beq	1f754 <fts_open@@Base+0x360>
   1f67c:	mvn	r1, #0
   1f680:	add	r0, r5, #60	; 0x3c
   1f684:	bl	21170 <fts_children@@Base+0x10e4>
   1f688:	mov	r0, r5
   1f68c:	add	sp, sp, #20
   1f690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f694:	mov	r0, r7
   1f698:	bl	1e10c <__assert_fail@plt+0xc5b4>
   1f69c:	mov	r0, sl
   1f6a0:	bl	11720 <free@plt>
   1f6a4:	ldr	r0, [r5, #24]
   1f6a8:	bl	11720 <free@plt>
   1f6ac:	mov	r0, r5
   1f6b0:	bl	11720 <free@plt>
   1f6b4:	mov	r5, #0
   1f6b8:	mov	r0, r5
   1f6bc:	add	sp, sp, #20
   1f6c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f6c4:	bl	11984 <__errno_location@plt>
   1f6c8:	mov	r3, #22
   1f6cc:	str	r3, [r0]
   1f6d0:	mov	r0, r5
   1f6d4:	add	sp, sp, #20
   1f6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f6dc:	cmp	r9, #0
   1f6e0:	beq	1f778 <fts_open@@Base+0x384>
   1f6e4:	mov	r4, sl
   1f6e8:	b	1f4ec <fts_open@@Base+0xf8>
   1f6ec:	sub	r1, r0, #1
   1f6f0:	add	r3, r4, r1
   1f6f4:	ldrb	r1, [r4, r1]
   1f6f8:	cmp	r1, #47	; 0x2f
   1f6fc:	bne	1f584 <fts_open@@Base+0x190>
   1f700:	ldrb	r1, [r3, #-1]!
   1f704:	cmp	r1, #47	; 0x2f
   1f708:	bne	1f584 <fts_open@@Base+0x190>
   1f70c:	sub	r2, r2, #1
   1f710:	cmp	r2, #1
   1f714:	bne	1f700 <fts_open@@Base+0x30c>
   1f718:	b	1f584 <fts_open@@Base+0x190>
   1f71c:	ldr	r3, [sp, #8]
   1f720:	str	r9, [r4, #8]
   1f724:	str	r4, [sp, #8]
   1f728:	str	r4, [r3, #8]
   1f72c:	b	1f5fc <fts_open@@Base+0x208>
   1f730:	bl	11984 <__errno_location@plt>
   1f734:	mov	r5, #0
   1f738:	mov	r3, #22
   1f73c:	str	r3, [r0]
   1f740:	mov	r0, r5
   1f744:	add	sp, sp, #20
   1f748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f74c:	mov	r2, #4096	; 0x1000
   1f750:	b	1f49c <fts_open@@Base+0xa8>
   1f754:	ldr	r2, [pc, #48]	; 1f78c <fts_open@@Base+0x398>
   1f758:	ldr	r0, [r5, #32]
   1f75c:	bl	1e698 <__assert_fail@plt+0xcb40>
   1f760:	cmp	r0, #0
   1f764:	str	r0, [r5, #28]
   1f768:	ldrlt	r3, [r5, #48]	; 0x30
   1f76c:	orrlt	r3, r3, #4
   1f770:	strlt	r3, [r5, #48]	; 0x30
   1f774:	b	1f67c <fts_open@@Base+0x288>
   1f778:	mov	r7, sl
   1f77c:	b	1f62c <fts_open@@Base+0x238>
   1f780:	mov	r7, r4
   1f784:	b	1f62c <fts_open@@Base+0x238>
   1f788:	andeq	r3, r2, r8, lsr #17
   1f78c:	andeq	r3, r2, r4, lsl #2

0001f790 <fts_close@@Base>:
   1f790:	ldr	r3, [r0]
   1f794:	push	{r4, r5, r6, lr}
   1f798:	cmp	r3, #0
   1f79c:	mov	r5, r0
   1f7a0:	beq	1f7dc <fts_close@@Base+0x4c>
   1f7a4:	ldr	r2, [r3, #48]	; 0x30
   1f7a8:	cmp	r2, #0
   1f7ac:	blt	1f8f4 <fts_close@@Base+0x164>
   1f7b0:	ldr	r4, [r3, #8]
   1f7b4:	mov	r0, r3
   1f7b8:	cmp	r4, #0
   1f7bc:	ldreq	r4, [r3, #4]
   1f7c0:	bl	11720 <free@plt>
   1f7c4:	mov	r3, r4
   1f7c8:	ldr	r2, [r4, #48]	; 0x30
   1f7cc:	cmp	r2, #0
   1f7d0:	bge	1f7b0 <fts_close@@Base+0x20>
   1f7d4:	mov	r0, r4
   1f7d8:	bl	11720 <free@plt>
   1f7dc:	ldr	r0, [r5, #4]
   1f7e0:	cmp	r0, #0
   1f7e4:	beq	1f7ec <fts_close@@Base+0x5c>
   1f7e8:	bl	1e10c <__assert_fail@plt+0xc5b4>
   1f7ec:	ldr	r0, [r5, #8]
   1f7f0:	bl	11720 <free@plt>
   1f7f4:	ldr	r0, [r5, #24]
   1f7f8:	bl	11720 <free@plt>
   1f7fc:	ldr	r3, [r5, #48]	; 0x30
   1f800:	tst	r3, #512	; 0x200
   1f804:	bne	1f868 <fts_close@@Base+0xd8>
   1f808:	tst	r3, #4
   1f80c:	beq	1f894 <fts_close@@Base+0x104>
   1f810:	mov	r4, #0
   1f814:	add	r0, r5, #60	; 0x3c
   1f818:	bl	1e140 <__assert_fail@plt+0xc5e8>
   1f81c:	ldr	r0, [r5, #52]	; 0x34
   1f820:	cmp	r0, #0
   1f824:	beq	1f82c <fts_close@@Base+0x9c>
   1f828:	bl	17ba8 <__assert_fail@plt+0x6050>
   1f82c:	ldr	r2, [r5, #48]	; 0x30
   1f830:	ldr	r3, [pc, #212]	; 1f90c <fts_close@@Base+0x17c>
   1f834:	ldr	r0, [r5, #56]	; 0x38
   1f838:	and	r3, r3, r2
   1f83c:	cmp	r3, #0
   1f840:	beq	1f88c <fts_close@@Base+0xfc>
   1f844:	cmp	r0, #0
   1f848:	beq	1f850 <fts_close@@Base+0xc0>
   1f84c:	bl	17ba8 <__assert_fail@plt+0x6050>
   1f850:	mov	r0, r5
   1f854:	bl	11720 <free@plt>
   1f858:	cmp	r4, #0
   1f85c:	bne	1f8fc <fts_close@@Base+0x16c>
   1f860:	mov	r0, r4
   1f864:	pop	{r4, r5, r6, pc}
   1f868:	ldr	r0, [r5, #32]
   1f86c:	cmp	r0, #0
   1f870:	blt	1f810 <fts_close@@Base+0x80>
   1f874:	bl	11b34 <close@plt>
   1f878:	cmp	r0, #0
   1f87c:	beq	1f810 <fts_close@@Base+0x80>
   1f880:	bl	11984 <__errno_location@plt>
   1f884:	ldr	r4, [r0]
   1f888:	b	1f814 <fts_close@@Base+0x84>
   1f88c:	bl	11720 <free@plt>
   1f890:	b	1f850 <fts_close@@Base+0xc0>
   1f894:	ldr	r0, [r5, #28]
   1f898:	bl	11ab0 <fchdir@plt>
   1f89c:	cmp	r0, #0
   1f8a0:	bne	1f8c4 <fts_close@@Base+0x134>
   1f8a4:	ldr	r0, [r5, #28]
   1f8a8:	bl	11b34 <close@plt>
   1f8ac:	cmp	r0, #0
   1f8b0:	beq	1f810 <fts_close@@Base+0x80>
   1f8b4:	bl	11984 <__errno_location@plt>
   1f8b8:	mov	r6, r0
   1f8bc:	ldr	r4, [r6]
   1f8c0:	b	1f814 <fts_close@@Base+0x84>
   1f8c4:	bl	11984 <__errno_location@plt>
   1f8c8:	mov	r6, r0
   1f8cc:	ldr	r0, [r5, #28]
   1f8d0:	ldr	r4, [r6]
   1f8d4:	bl	11b34 <close@plt>
   1f8d8:	clz	r3, r4
   1f8dc:	lsr	r3, r3, #5
   1f8e0:	cmp	r0, #0
   1f8e4:	moveq	r3, #0
   1f8e8:	cmp	r3, #0
   1f8ec:	beq	1f814 <fts_close@@Base+0x84>
   1f8f0:	b	1f8bc <fts_close@@Base+0x12c>
   1f8f4:	mov	r4, r3
   1f8f8:	b	1f7d4 <fts_close@@Base+0x44>
   1f8fc:	bl	11984 <__errno_location@plt>
   1f900:	str	r4, [r0]
   1f904:	mvn	r4, #0
   1f908:	b	1f860 <fts_close@@Base+0xd0>
   1f90c:	andeq	r0, r0, r2, lsl #2

0001f910 <fts_read@@Base>:
   1f910:	push	{r4, r5, r6, r7, r8, lr}
   1f914:	ldr	r4, [r0]
   1f918:	cmp	r4, #0
   1f91c:	beq	1fa3c <fts_read@@Base+0x12c>
   1f920:	ldr	r1, [r0, #48]	; 0x30
   1f924:	ands	r3, r1, #16384	; 0x4000
   1f928:	bne	1fa3c <fts_read@@Base+0x12c>
   1f92c:	ldrh	r2, [r4, #64]	; 0x40
   1f930:	mov	r8, r0
   1f934:	mov	r0, #3
   1f938:	cmp	r2, #1
   1f93c:	strh	r0, [r4, #64]	; 0x40
   1f940:	beq	1fcf8 <fts_read@@Base+0x3e8>
   1f944:	cmp	r2, #2
   1f948:	ldrh	r3, [r4, #60]	; 0x3c
   1f94c:	beq	1fa48 <fts_read@@Base+0x138>
   1f950:	cmp	r3, #1
   1f954:	bne	1f984 <fts_read@@Base+0x74>
   1f958:	b	1faf4 <fts_read@@Base+0x1e4>
   1f95c:	mov	r0, r4
   1f960:	str	r5, [r8]
   1f964:	bl	11720 <free@plt>
   1f968:	ldr	r4, [r5, #48]	; 0x30
   1f96c:	cmp	r4, #0
   1f970:	beq	1fb3c <fts_read@@Base+0x22c>
   1f974:	ldrh	r3, [r5, #64]	; 0x40
   1f978:	mov	r4, r5
   1f97c:	cmp	r3, #4
   1f980:	bne	1fbec <fts_read@@Base+0x2dc>
   1f984:	ldr	r5, [r4, #8]
   1f988:	cmp	r5, #0
   1f98c:	bne	1f95c <fts_read@@Base+0x4c>
   1f990:	ldr	r6, [r4, #4]
   1f994:	ldr	r3, [r6, #12]
   1f998:	cmp	r3, #0
   1f99c:	bne	1fe90 <fts_read@@Base+0x580>
   1f9a0:	str	r6, [r8]
   1f9a4:	mov	r0, r4
   1f9a8:	bl	11720 <free@plt>
   1f9ac:	ldr	r3, [r6, #48]	; 0x30
   1f9b0:	cmn	r3, #1
   1f9b4:	beq	1fdc4 <fts_read@@Base+0x4b4>
   1f9b8:	ldrh	r3, [r6, #60]	; 0x3c
   1f9bc:	cmp	r3, #11
   1f9c0:	beq	20048 <fts_read@@Base+0x738>
   1f9c4:	ldr	r3, [r6, #40]	; 0x28
   1f9c8:	ldr	r2, [r8, #24]
   1f9cc:	mov	r1, #0
   1f9d0:	strb	r1, [r2, r3]
   1f9d4:	ldr	r3, [r6, #48]	; 0x30
   1f9d8:	cmp	r3, r1
   1f9dc:	beq	1fde4 <fts_read@@Base+0x4d4>
   1f9e0:	ldrh	r3, [r6, #62]	; 0x3e
   1f9e4:	tst	r3, #2
   1f9e8:	bne	1fd78 <fts_read@@Base+0x468>
   1f9ec:	tst	r3, #1
   1f9f0:	beq	1ff18 <fts_read@@Base+0x608>
   1f9f4:	ldrh	r3, [r6, #60]	; 0x3c
   1f9f8:	ldr	r0, [r8, #48]	; 0x30
   1f9fc:	cmp	r3, #2
   1fa00:	beq	1fa30 <fts_read@@Base+0x120>
   1fa04:	ldr	r3, [r6, #32]
   1fa08:	cmp	r3, #0
   1fa0c:	movne	r3, #7
   1fa10:	strhne	r3, [r6, #60]	; 0x3c
   1fa14:	bne	1fa30 <fts_read@@Base+0x120>
   1fa18:	mov	r3, #6
   1fa1c:	strh	r3, [r6, #60]	; 0x3c
   1fa20:	mov	r2, r6
   1fa24:	add	r1, r8, #56	; 0x38
   1fa28:	bl	1e990 <__assert_fail@plt+0xce38>
   1fa2c:	ldr	r0, [r8, #48]	; 0x30
   1fa30:	tst	r0, #16384	; 0x4000
   1fa34:	moveq	r4, r6
   1fa38:	beq	1fa40 <fts_read@@Base+0x130>
   1fa3c:	mov	r4, #0
   1fa40:	mov	r0, r4
   1fa44:	pop	{r4, r5, r6, r7, r8, pc}
   1fa48:	sub	r2, r3, #12
   1fa4c:	cmp	r2, #1
   1fa50:	bls	1fc88 <fts_read@@Base+0x378>
   1fa54:	cmp	r3, #1
   1fa58:	bne	1f984 <fts_read@@Base+0x74>
   1fa5c:	tst	r1, #64	; 0x40
   1fa60:	beq	1fa78 <fts_read@@Base+0x168>
   1fa64:	ldrd	r6, [r4, #72]	; 0x48
   1fa68:	ldrd	r2, [r8, #16]
   1fa6c:	cmp	r7, r3
   1fa70:	cmpeq	r6, r2
   1fa74:	bne	1fafc <fts_read@@Base+0x1ec>
   1fa78:	ldr	r0, [r8, #4]
   1fa7c:	cmp	r0, #0
   1fa80:	beq	1fd24 <fts_read@@Base+0x414>
   1fa84:	tst	r1, #8192	; 0x2000
   1fa88:	bne	1fd10 <fts_read@@Base+0x400>
   1fa8c:	ldr	r3, [r4, #24]
   1fa90:	mvn	r2, #0
   1fa94:	mov	r1, r4
   1fa98:	mov	r0, r8
   1fa9c:	bl	1e6d4 <__assert_fail@plt+0xcb7c>
   1faa0:	cmp	r0, #0
   1faa4:	beq	1fdac <fts_read@@Base+0x49c>
   1faa8:	bl	11984 <__errno_location@plt>
   1faac:	ldrh	r3, [r4, #62]	; 0x3e
   1fab0:	ldr	r5, [r8, #4]
   1fab4:	orr	r3, r3, #1
   1fab8:	cmp	r5, #0
   1fabc:	ldr	r2, [r0]
   1fac0:	strh	r3, [r4, #62]	; 0x3e
   1fac4:	str	r2, [r4, #32]
   1fac8:	beq	1fae8 <fts_read@@Base+0x1d8>
   1facc:	mov	r3, r5
   1fad0:	ldr	r2, [r3, #4]
   1fad4:	ldr	r2, [r2, #24]
   1fad8:	str	r2, [r3, #24]
   1fadc:	ldr	r3, [r3, #8]
   1fae0:	cmp	r3, #0
   1fae4:	bne	1fad0 <fts_read@@Base+0x1c0>
   1fae8:	mov	r3, #0
   1faec:	str	r3, [r8, #4]
   1faf0:	b	1fbf4 <fts_read@@Base+0x2e4>
   1faf4:	cmp	r2, #4
   1faf8:	bne	1fa5c <fts_read@@Base+0x14c>
   1fafc:	ldrh	r3, [r4, #62]	; 0x3e
   1fb00:	tst	r3, #2
   1fb04:	bne	1fee0 <fts_read@@Base+0x5d0>
   1fb08:	ldr	r0, [r8, #4]
   1fb0c:	cmp	r0, #0
   1fb10:	beq	1fb20 <fts_read@@Base+0x210>
   1fb14:	bl	1e10c <__assert_fail@plt+0xc5b4>
   1fb18:	mov	r3, #0
   1fb1c:	str	r3, [r8, #4]
   1fb20:	mov	r3, #6
   1fb24:	strh	r3, [r4, #60]	; 0x3c
   1fb28:	mov	r2, r4
   1fb2c:	add	r1, r8, #56	; 0x38
   1fb30:	ldr	r0, [r8, #48]	; 0x30
   1fb34:	bl	1e990 <__assert_fail@plt+0xce38>
   1fb38:	b	1fa40 <fts_read@@Base+0x130>
   1fb3c:	mov	r0, r8
   1fb40:	bl	1e3c0 <__assert_fail@plt+0xc868>
   1fb44:	cmp	r0, #0
   1fb48:	bne	1fec8 <fts_read@@Base+0x5b8>
   1fb4c:	ldr	r2, [r8, #48]	; 0x30
   1fb50:	ldr	r3, [pc, #1268]	; 2004c <fts_read@@Base+0x73c>
   1fb54:	ldr	r0, [r8, #56]	; 0x38
   1fb58:	and	r3, r3, r2
   1fb5c:	cmp	r3, #0
   1fb60:	beq	1fed8 <fts_read@@Base+0x5c8>
   1fb64:	cmp	r0, #0
   1fb68:	beq	1fb70 <fts_read@@Base+0x260>
   1fb6c:	bl	17ba8 <__assert_fail@plt+0x6050>
   1fb70:	ldr	r2, [r5, #52]	; 0x34
   1fb74:	add	r4, r5, #176	; 0xb0
   1fb78:	str	r2, [r5, #40]	; 0x28
   1fb7c:	mov	r1, r4
   1fb80:	add	r2, r2, #1
   1fb84:	ldr	r0, [r8, #24]
   1fb88:	bl	11714 <memmove@plt>
   1fb8c:	mov	r0, r4
   1fb90:	mov	r1, #47	; 0x2f
   1fb94:	bl	11a38 <strrchr@plt>
   1fb98:	cmp	r0, #0
   1fb9c:	beq	1fbcc <fts_read@@Base+0x2bc>
   1fba0:	cmp	r4, r0
   1fba4:	beq	1fdb4 <fts_read@@Base+0x4a4>
   1fba8:	add	r6, r0, #1
   1fbac:	mov	r0, r6
   1fbb0:	bl	11954 <strlen@plt>
   1fbb4:	mov	r1, r6
   1fbb8:	mov	r7, r0
   1fbbc:	add	r2, r7, #1
   1fbc0:	mov	r0, r4
   1fbc4:	bl	11714 <memmove@plt>
   1fbc8:	str	r7, [r5, #52]	; 0x34
   1fbcc:	ldr	r3, [r8, #24]
   1fbd0:	add	r1, r8, #56	; 0x38
   1fbd4:	str	r3, [r5, #28]
   1fbd8:	str	r3, [r5, #24]
   1fbdc:	ldr	r0, [r8, #48]	; 0x30
   1fbe0:	bl	1e618 <__assert_fail@plt+0xcac0>
   1fbe4:	ldrh	r0, [r5, #60]	; 0x3c
   1fbe8:	b	1fc38 <fts_read@@Base+0x328>
   1fbec:	cmp	r3, #2
   1fbf0:	beq	1feec <fts_read@@Base+0x5dc>
   1fbf4:	ldr	r3, [r5, #4]
   1fbf8:	mov	ip, #47	; 0x2f
   1fbfc:	ldr	r2, [r8, #24]
   1fc00:	ldr	r1, [r3, #40]	; 0x28
   1fc04:	ldr	r0, [r3, #28]
   1fc08:	sub	r3, r1, #1
   1fc0c:	ldrb	r0, [r0, r3]
   1fc10:	cmp	r0, ip
   1fc14:	movne	r3, r1
   1fc18:	add	r0, r2, r3
   1fc1c:	strb	ip, [r2, r3]
   1fc20:	ldr	r2, [r5, #52]	; 0x34
   1fc24:	add	r0, r0, #1
   1fc28:	add	r2, r2, #1
   1fc2c:	add	r1, r5, #176	; 0xb0
   1fc30:	bl	11714 <memmove@plt>
   1fc34:	ldrh	r0, [r5, #60]	; 0x3c
   1fc38:	cmp	r0, #11
   1fc3c:	str	r5, [r8]
   1fc40:	beq	1fcb8 <fts_read@@Base+0x3a8>
   1fc44:	cmp	r0, #1
   1fc48:	bne	1fcd4 <fts_read@@Base+0x3c4>
   1fc4c:	ldr	r3, [r5, #48]	; 0x30
   1fc50:	cmp	r3, #0
   1fc54:	beq	1fce8 <fts_read@@Base+0x3d8>
   1fc58:	mov	r4, r5
   1fc5c:	mov	r2, r5
   1fc60:	add	r1, r8, #56	; 0x38
   1fc64:	ldr	r0, [r8, #48]	; 0x30
   1fc68:	bl	1e8e0 <__assert_fail@plt+0xcd88>
   1fc6c:	subs	r5, r0, #0
   1fc70:	bne	1fa40 <fts_read@@Base+0x130>
   1fc74:	bl	11984 <__errno_location@plt>
   1fc78:	mov	r3, #12
   1fc7c:	mov	r4, r5
   1fc80:	str	r3, [r0]
   1fc84:	b	1fa40 <fts_read@@Base+0x130>
   1fc88:	mov	r3, #1
   1fc8c:	mov	r2, r4
   1fc90:	add	r1, r8, #48	; 0x30
   1fc94:	ldr	r0, [r8, #32]
   1fc98:	bl	1e410 <__assert_fail@plt+0xc8b8>
   1fc9c:	cmp	r0, #1
   1fca0:	strh	r0, [r4, #60]	; 0x3c
   1fca4:	beq	1ff5c <fts_read@@Base+0x64c>
   1fca8:	cmp	r0, #11
   1fcac:	str	r4, [r8]
   1fcb0:	bne	1fa40 <fts_read@@Base+0x130>
   1fcb4:	mov	r5, r4
   1fcb8:	ldrd	r2, [r5, #120]	; 0x78
   1fcbc:	cmp	r3, #0
   1fcc0:	cmpeq	r2, #2
   1fcc4:	beq	1fe20 <fts_read@@Base+0x510>
   1fcc8:	cmp	r3, #0
   1fccc:	cmpeq	r2, #1
   1fcd0:	bne	20048 <fts_read@@Base+0x738>
   1fcd4:	mov	r4, r5
   1fcd8:	mov	r0, r4
   1fcdc:	pop	{r4, r5, r6, r7, r8, pc}
   1fce0:	cmp	r0, #1
   1fce4:	bne	1fcd4 <fts_read@@Base+0x3c4>
   1fce8:	ldrd	r2, [r5, #72]	; 0x48
   1fcec:	mov	r4, r5
   1fcf0:	strd	r2, [r8, #16]
   1fcf4:	b	1fc5c <fts_read@@Base+0x34c>
   1fcf8:	mov	r2, r4
   1fcfc:	add	r1, r8, #48	; 0x30
   1fd00:	ldr	r0, [r8, #32]
   1fd04:	bl	1e410 <__assert_fail@plt+0xc8b8>
   1fd08:	strh	r0, [r4, #60]	; 0x3c
   1fd0c:	b	1fa40 <fts_read@@Base+0x130>
   1fd10:	bic	r1, r1, #8192	; 0x2000
   1fd14:	str	r1, [r8, #48]	; 0x30
   1fd18:	bl	1e10c <__assert_fail@plt+0xc5b4>
   1fd1c:	mov	r3, #0
   1fd20:	str	r3, [r8, #4]
   1fd24:	mov	r1, #3
   1fd28:	mov	r0, r8
   1fd2c:	bl	1ea68 <__assert_fail@plt+0xcf10>
   1fd30:	cmp	r0, #0
   1fd34:	mov	r5, r0
   1fd38:	str	r0, [r8, #4]
   1fd3c:	bne	1fae8 <fts_read@@Base+0x1d8>
   1fd40:	ldr	r0, [r8, #48]	; 0x30
   1fd44:	tst	r0, #16384	; 0x4000
   1fd48:	bne	1fa3c <fts_read@@Base+0x12c>
   1fd4c:	ldr	r3, [r4, #32]
   1fd50:	cmp	r3, #0
   1fd54:	beq	1fd68 <fts_read@@Base+0x458>
   1fd58:	ldrh	r3, [r4, #60]	; 0x3c
   1fd5c:	cmp	r3, #4
   1fd60:	movne	r3, #7
   1fd64:	strhne	r3, [r4, #60]	; 0x3c
   1fd68:	add	r1, r8, #56	; 0x38
   1fd6c:	mov	r2, r4
   1fd70:	bl	1e990 <__assert_fail@plt+0xce38>
   1fd74:	b	1fa40 <fts_read@@Base+0x130>
   1fd78:	ldr	r3, [r8, #48]	; 0x30
   1fd7c:	ldr	r1, [r6, #36]	; 0x24
   1fd80:	tst	r3, #4
   1fd84:	bne	1fda0 <fts_read@@Base+0x490>
   1fd88:	tst	r3, #512	; 0x200
   1fd8c:	beq	1ff44 <fts_read@@Base+0x634>
   1fd90:	mov	r2, #1
   1fd94:	mov	r0, r8
   1fd98:	bl	1e338 <__assert_fail@plt+0xc7e0>
   1fd9c:	ldr	r1, [r6, #36]	; 0x24
   1fda0:	mov	r0, r1
   1fda4:	bl	11b34 <close@plt>
   1fda8:	b	1f9f4 <fts_read@@Base+0xe4>
   1fdac:	ldr	r5, [r8, #4]
   1fdb0:	b	1fae8 <fts_read@@Base+0x1d8>
   1fdb4:	ldrb	r3, [r4, #1]
   1fdb8:	cmp	r3, #0
   1fdbc:	beq	1fbcc <fts_read@@Base+0x2bc>
   1fdc0:	b	1fba8 <fts_read@@Base+0x298>
   1fdc4:	mov	r0, r6
   1fdc8:	bl	11720 <free@plt>
   1fdcc:	bl	11984 <__errno_location@plt>
   1fdd0:	mov	r3, #0
   1fdd4:	mov	r4, r3
   1fdd8:	str	r3, [r0]
   1fddc:	str	r3, [r8]
   1fde0:	b	1fa40 <fts_read@@Base+0x130>
   1fde4:	mov	r0, r8
   1fde8:	bl	1e3c0 <__assert_fail@plt+0xc868>
   1fdec:	cmp	r0, #0
   1fdf0:	beq	1f9f4 <fts_read@@Base+0xe4>
   1fdf4:	bl	11984 <__errno_location@plt>
   1fdf8:	ldr	r3, [r8, #48]	; 0x30
   1fdfc:	orr	r3, r3, #16384	; 0x4000
   1fe00:	ldr	r2, [r0]
   1fe04:	str	r2, [r6, #32]
   1fe08:	str	r3, [r8, #48]	; 0x30
   1fe0c:	ldrh	r3, [r6, #60]	; 0x3c
   1fe10:	cmp	r3, #2
   1fe14:	beq	1fa3c <fts_read@@Base+0x12c>
   1fe18:	ldr	r0, [r8, #48]	; 0x30
   1fe1c:	b	1fa04 <fts_read@@Base+0xf4>
   1fe20:	ldr	r4, [r5, #4]
   1fe24:	ldr	r0, [r8, #32]
   1fe28:	ldr	r3, [r4, #56]	; 0x38
   1fe2c:	cmp	r3, #0
   1fe30:	bne	1fe44 <fts_read@@Base+0x534>
   1fe34:	ldr	r3, [r8, #48]	; 0x30
   1fe38:	and	r3, r3, #24
   1fe3c:	cmp	r3, #24
   1fe40:	beq	1ffd4 <fts_read@@Base+0x6c4>
   1fe44:	mov	r3, #0
   1fe48:	mov	r2, r5
   1fe4c:	add	r1, r8, #48	; 0x30
   1fe50:	bl	1e410 <__assert_fail@plt+0xc8b8>
   1fe54:	ldr	r3, [r5, #88]	; 0x58
   1fe58:	and	r3, r3, #61440	; 0xf000
   1fe5c:	cmp	r3, #16384	; 0x4000
   1fe60:	strh	r0, [r5, #60]	; 0x3c
   1fe64:	bne	1fc44 <fts_read@@Base+0x334>
   1fe68:	ldr	r3, [r5, #48]	; 0x30
   1fe6c:	cmp	r3, #0
   1fe70:	beq	1fce0 <fts_read@@Base+0x3d0>
   1fe74:	ldr	r3, [r4, #56]	; 0x38
   1fe78:	sub	r3, r3, #1
   1fe7c:	cmn	r3, #3
   1fe80:	strls	r3, [r4, #56]	; 0x38
   1fe84:	cmp	r0, #1
   1fe88:	beq	1fc58 <fts_read@@Base+0x348>
   1fe8c:	b	1fcd4 <fts_read@@Base+0x3c4>
   1fe90:	ldr	r3, [r6, #40]	; 0x28
   1fe94:	ldr	r2, [r8, #24]
   1fe98:	str	r6, [r8]
   1fe9c:	mov	r1, #3
   1fea0:	strb	r5, [r2, r3]
   1fea4:	mov	r0, r8
   1fea8:	bl	1ea68 <__assert_fail@plt+0xcf10>
   1feac:	subs	r5, r0, #0
   1feb0:	bne	1ff38 <fts_read@@Base+0x628>
   1feb4:	ldr	r3, [r8, #48]	; 0x30
   1feb8:	tst	r3, #16384	; 0x4000
   1febc:	bne	1fa3c <fts_read@@Base+0x12c>
   1fec0:	ldr	r6, [r4, #4]
   1fec4:	b	1f9a0 <fts_read@@Base+0x90>
   1fec8:	ldr	r3, [r8, #48]	; 0x30
   1fecc:	orr	r3, r3, #16384	; 0x4000
   1fed0:	str	r3, [r8, #48]	; 0x30
   1fed4:	b	1fa40 <fts_read@@Base+0x130>
   1fed8:	bl	11720 <free@plt>
   1fedc:	b	1fb70 <fts_read@@Base+0x260>
   1fee0:	ldr	r0, [r4, #36]	; 0x24
   1fee4:	bl	11b34 <close@plt>
   1fee8:	b	1fb08 <fts_read@@Base+0x1f8>
   1feec:	mov	r3, #1
   1fef0:	mov	r2, r5
   1fef4:	add	r1, r8, #48	; 0x30
   1fef8:	ldr	r0, [r8, #32]
   1fefc:	bl	1e410 <__assert_fail@plt+0xc8b8>
   1ff00:	cmp	r0, #1
   1ff04:	strh	r0, [r5, #60]	; 0x3c
   1ff08:	beq	1ffa0 <fts_read@@Base+0x690>
   1ff0c:	mov	r3, #3
   1ff10:	strh	r3, [r5, #64]	; 0x40
   1ff14:	b	1fbf4 <fts_read@@Base+0x2e4>
   1ff18:	ldr	r3, [pc, #304]	; 20050 <fts_read@@Base+0x740>
   1ff1c:	mvn	r2, #0
   1ff20:	ldr	r1, [r6, #4]
   1ff24:	mov	r0, r8
   1ff28:	bl	1e6d4 <__assert_fail@plt+0xcb7c>
   1ff2c:	cmp	r0, #0
   1ff30:	beq	1f9f4 <fts_read@@Base+0xe4>
   1ff34:	b	1fdf4 <fts_read@@Base+0x4e4>
   1ff38:	mov	r0, r4
   1ff3c:	bl	11720 <free@plt>
   1ff40:	b	1fbf4 <fts_read@@Base+0x2e4>
   1ff44:	mov	r0, r1
   1ff48:	bl	11ab0 <fchdir@plt>
   1ff4c:	cmp	r0, #0
   1ff50:	bne	1fff4 <fts_read@@Base+0x6e4>
   1ff54:	ldr	r1, [r6, #36]	; 0x24
   1ff58:	b	1fda0 <fts_read@@Base+0x490>
   1ff5c:	ldr	r1, [r8, #48]	; 0x30
   1ff60:	tst	r1, #4
   1ff64:	strne	r4, [r8]
   1ff68:	movne	r5, r4
   1ff6c:	bne	1fc4c <fts_read@@Base+0x33c>
   1ff70:	ldr	r2, [pc, #220]	; 20054 <fts_read@@Base+0x744>
   1ff74:	ldr	r0, [r8, #32]
   1ff78:	bl	1e698 <__assert_fail@plt+0xcb40>
   1ff7c:	cmp	r0, #0
   1ff80:	str	r0, [r4, #36]	; 0x24
   1ff84:	blt	20014 <fts_read@@Base+0x704>
   1ff88:	ldrh	r3, [r4, #62]	; 0x3e
   1ff8c:	ldrh	r0, [r4, #60]	; 0x3c
   1ff90:	mov	r5, r4
   1ff94:	orr	r3, r3, #2
   1ff98:	strh	r3, [r4, #62]	; 0x3e
   1ff9c:	b	1fc38 <fts_read@@Base+0x328>
   1ffa0:	ldr	r1, [r8, #48]	; 0x30
   1ffa4:	tst	r1, #4
   1ffa8:	bne	1ff0c <fts_read@@Base+0x5fc>
   1ffac:	ldr	r2, [pc, #160]	; 20054 <fts_read@@Base+0x744>
   1ffb0:	ldr	r0, [r8, #32]
   1ffb4:	bl	1e698 <__assert_fail@plt+0xcb40>
   1ffb8:	cmp	r0, #0
   1ffbc:	str	r0, [r5, #36]	; 0x24
   1ffc0:	blt	20030 <fts_read@@Base+0x720>
   1ffc4:	ldrh	r3, [r5, #62]	; 0x3e
   1ffc8:	orr	r3, r3, #2
   1ffcc:	strh	r3, [r5, #62]	; 0x3e
   1ffd0:	b	1ff0c <fts_read@@Base+0x5fc>
   1ffd4:	mov	r1, r0
   1ffd8:	mov	r0, r4
   1ffdc:	bl	1e2a4 <__assert_fail@plt+0xc74c>
   1ffe0:	cmp	r0, #2
   1ffe4:	ldrheq	r0, [r5, #60]	; 0x3c
   1ffe8:	beq	1fc44 <fts_read@@Base+0x334>
   1ffec:	ldr	r0, [r8, #32]
   1fff0:	b	1fe44 <fts_read@@Base+0x534>
   1fff4:	bl	11984 <__errno_location@plt>
   1fff8:	ldr	r3, [r8, #48]	; 0x30
   1fffc:	ldr	r1, [r6, #36]	; 0x24
   20000:	orr	r3, r3, #16384	; 0x4000
   20004:	ldr	r2, [r0]
   20008:	str	r2, [r6, #32]
   2000c:	str	r3, [r8, #48]	; 0x30
   20010:	b	1fda0 <fts_read@@Base+0x490>
   20014:	bl	11984 <__errno_location@plt>
   20018:	mov	r2, #7
   2001c:	ldr	r3, [r0]
   20020:	strh	r2, [r4, #60]	; 0x3c
   20024:	str	r3, [r4, #32]
   20028:	str	r4, [r8]
   2002c:	b	1fa40 <fts_read@@Base+0x130>
   20030:	bl	11984 <__errno_location@plt>
   20034:	mov	r2, #7
   20038:	ldr	r3, [r0]
   2003c:	strh	r2, [r5, #60]	; 0x3c
   20040:	str	r3, [r5, #32]
   20044:	b	1ff0c <fts_read@@Base+0x5fc>
   20048:	bl	11b28 <abort@plt>
   2004c:	andeq	r0, r0, r2, lsl #2
   20050:	andeq	r3, r2, r8, asr #29
   20054:	andeq	r3, r2, r4, lsl #2

00020058 <fts_set@@Base>:
   20058:	cmp	r2, #4
   2005c:	bhi	20070 <fts_set@@Base+0x18>
   20060:	mov	r3, #0
   20064:	strh	r2, [r1, #64]	; 0x40
   20068:	mov	r0, r3
   2006c:	bx	lr
   20070:	push	{r4, lr}
   20074:	bl	11984 <__errno_location@plt>
   20078:	mov	r2, #22
   2007c:	mov	r3, #1
   20080:	str	r2, [r0]
   20084:	mov	r0, r3
   20088:	pop	{r4, pc}

0002008c <fts_children@@Base>:
   2008c:	push	{r4, r5, r6, r7, r8, lr}
   20090:	mov	r4, r1
   20094:	mov	r5, r0
   20098:	bl	11984 <__errno_location@plt>
   2009c:	bics	r2, r4, #8192	; 0x2000
   200a0:	mov	r7, r0
   200a4:	bne	20134 <fts_children@@Base+0xa8>
   200a8:	ldr	r6, [r5]
   200ac:	str	r2, [r0]
   200b0:	ldr	r3, [r5, #48]	; 0x30
   200b4:	ands	r0, r3, #16384	; 0x4000
   200b8:	bne	2013c <fts_children@@Base+0xb0>
   200bc:	ldrh	r3, [r6, #60]	; 0x3c
   200c0:	cmp	r3, #9
   200c4:	beq	20194 <fts_children@@Base+0x108>
   200c8:	cmp	r3, #1
   200cc:	popne	{r4, r5, r6, r7, r8, pc}
   200d0:	ldr	r0, [r5, #4]
   200d4:	cmp	r0, #0
   200d8:	beq	200e0 <fts_children@@Base+0x54>
   200dc:	bl	1e10c <__assert_fail@plt+0xc5b4>
   200e0:	cmp	r4, #8192	; 0x2000
   200e4:	moveq	r8, #2
   200e8:	ldreq	r3, [r5, #48]	; 0x30
   200ec:	movne	r8, #1
   200f0:	orreq	r3, r3, #8192	; 0x2000
   200f4:	streq	r3, [r5, #48]	; 0x30
   200f8:	ldr	r3, [r6, #48]	; 0x30
   200fc:	cmp	r3, #0
   20100:	bne	20120 <fts_children@@Base+0x94>
   20104:	ldr	r3, [r6, #24]
   20108:	ldrb	r3, [r3]
   2010c:	cmp	r3, #47	; 0x2f
   20110:	beq	20120 <fts_children@@Base+0x94>
   20114:	ldr	r1, [r5, #48]	; 0x30
   20118:	ands	r4, r1, #4
   2011c:	beq	20144 <fts_children@@Base+0xb8>
   20120:	mov	r1, r8
   20124:	mov	r0, r5
   20128:	bl	1ea68 <__assert_fail@plt+0xcf10>
   2012c:	str	r0, [r5, #4]
   20130:	pop	{r4, r5, r6, r7, r8, pc}
   20134:	mov	r3, #22
   20138:	str	r3, [r0]
   2013c:	mov	r0, #0
   20140:	pop	{r4, r5, r6, r7, r8, pc}
   20144:	ldr	r2, [pc, #136]	; 201d4 <fts_children@@Base+0x148>
   20148:	ldr	r0, [r5, #32]
   2014c:	bl	1e698 <__assert_fail@plt+0xcb40>
   20150:	subs	r6, r0, #0
   20154:	blt	201b0 <fts_children@@Base+0x124>
   20158:	mov	r1, r8
   2015c:	mov	r0, r5
   20160:	bl	1ea68 <__assert_fail@plt+0xcf10>
   20164:	ldr	r3, [r5, #48]	; 0x30
   20168:	ands	r4, r3, #512	; 0x200
   2016c:	str	r0, [r5, #4]
   20170:	bne	2019c <fts_children@@Base+0x110>
   20174:	mov	r0, r6
   20178:	bl	11ab0 <fchdir@plt>
   2017c:	cmp	r0, #0
   20180:	bne	201bc <fts_children@@Base+0x130>
   20184:	mov	r0, r6
   20188:	bl	11b34 <close@plt>
   2018c:	ldr	r0, [r5, #4]
   20190:	pop	{r4, r5, r6, r7, r8, pc}
   20194:	ldr	r0, [r6, #8]
   20198:	pop	{r4, r5, r6, r7, r8, pc}
   2019c:	mov	r1, r6
   201a0:	mov	r2, #1
   201a4:	mov	r0, r5
   201a8:	bl	1e338 <__assert_fail@plt+0xc7e0>
   201ac:	b	2018c <fts_children@@Base+0x100>
   201b0:	str	r4, [r5, #4]
   201b4:	mov	r0, r4
   201b8:	pop	{r4, r5, r6, r7, r8, pc}
   201bc:	ldr	r5, [r7]
   201c0:	mov	r0, r6
   201c4:	bl	11b34 <close@plt>
   201c8:	str	r5, [r7]
   201cc:	mov	r0, r4
   201d0:	pop	{r4, r5, r6, r7, r8, pc}
   201d4:	andeq	r3, r2, r4, lsl #2
   201d8:	push	{r4, r5, r6, r7, r8, lr}
   201dc:	subs	r7, r0, #0
   201e0:	ldr	r5, [pc, #108]	; 20254 <fts_children@@Base+0x1c8>
   201e4:	sub	sp, sp, #8
   201e8:	mov	r8, r1
   201ec:	ldr	r1, [r5]
   201f0:	moveq	r7, sp
   201f4:	str	r1, [sp, #4]
   201f8:	mov	r0, r7
   201fc:	mov	r1, r8
   20200:	mov	r6, r2
   20204:	bl	11870 <mbrtowc@plt>
   20208:	cmp	r6, #0
   2020c:	cmnne	r0, #3
   20210:	mov	r4, r0
   20214:	bhi	20234 <fts_children@@Base+0x1a8>
   20218:	ldr	r2, [sp, #4]
   2021c:	ldr	r3, [r5]
   20220:	mov	r0, r4
   20224:	cmp	r2, r3
   20228:	bne	20250 <fts_children@@Base+0x1c4>
   2022c:	add	sp, sp, #8
   20230:	pop	{r4, r5, r6, r7, r8, pc}
   20234:	mov	r0, #0
   20238:	bl	21124 <fts_children@@Base+0x1098>
   2023c:	cmp	r0, #0
   20240:	moveq	r4, #1
   20244:	ldrbeq	r3, [r8]
   20248:	streq	r3, [r7]
   2024c:	b	20218 <fts_children@@Base+0x18c>
   20250:	bl	11780 <__stack_chk_fail@plt>
   20254:	andeq	r4, r3, r8, lsl #30
   20258:	push	{r4, r5, r6, r7, r8, lr}
   2025c:	mov	r4, r0
   20260:	bl	11954 <strlen@plt>
   20264:	mov	ip, r4
   20268:	mov	r3, #0
   2026c:	add	r0, r0, #1
   20270:	b	20284 <fts_children@@Base+0x1f8>
   20274:	cmp	r0, r2
   20278:	strb	r1, [ip], #1
   2027c:	popls	{r4, r5, r6, r7, r8, pc}
   20280:	mov	r3, r2
   20284:	ldrb	r1, [r4, r3]
   20288:	add	r2, r3, #1
   2028c:	cmp	r1, #92	; 0x5c
   20290:	bne	20274 <fts_children@@Base+0x1e8>
   20294:	add	lr, r3, #4
   20298:	cmp	lr, r0
   2029c:	bcs	20274 <fts_children@@Base+0x1e8>
   202a0:	ldrb	r5, [r4, r2]
   202a4:	sub	r5, r5, #48	; 0x30
   202a8:	uxtb	r6, r5
   202ac:	cmp	r6, #3
   202b0:	bhi	20274 <fts_children@@Base+0x1e8>
   202b4:	add	r3, r4, r3
   202b8:	ldrb	r6, [r3, #2]
   202bc:	sub	r6, r6, #48	; 0x30
   202c0:	uxtb	r7, r6
   202c4:	cmp	r7, #7
   202c8:	bhi	20274 <fts_children@@Base+0x1e8>
   202cc:	ldrb	r3, [r3, #3]
   202d0:	sub	r3, r3, #48	; 0x30
   202d4:	uxtb	r3, r3
   202d8:	cmp	r3, #7
   202dc:	bhi	20274 <fts_children@@Base+0x1e8>
   202e0:	add	r5, r6, r5, lsl #3
   202e4:	mov	r2, lr
   202e8:	add	r5, r3, r5, lsl #3
   202ec:	strb	r5, [ip], #1
   202f0:	b	20280 <fts_children@@Base+0x1f4>
   202f4:	push	{r4, lr}
   202f8:	mov	r4, r0
   202fc:	ldr	r0, [r0]
   20300:	bl	11720 <free@plt>
   20304:	ldr	r0, [r4, #4]
   20308:	bl	11720 <free@plt>
   2030c:	ldr	r0, [r4, #8]
   20310:	bl	11720 <free@plt>
   20314:	ldrb	r3, [r4, #24]
   20318:	tst	r3, #4
   2031c:	bne	2032c <fts_children@@Base+0x2a0>
   20320:	mov	r0, r4
   20324:	pop	{r4, lr}
   20328:	b	11720 <free@plt>
   2032c:	ldr	r0, [r4, #12]
   20330:	bl	11720 <free@plt>
   20334:	mov	r0, r4
   20338:	pop	{r4, lr}
   2033c:	b	11720 <free@plt>
   20340:	ldr	r3, [pc, #1700]	; 209ec <fts_children@@Base+0x960>
   20344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20348:	sub	sp, sp, #100	; 0x64
   2034c:	ldr	r3, [r3]
   20350:	ldr	r1, [pc, #1688]	; 209f0 <fts_children@@Base+0x964>
   20354:	ldr	r0, [pc, #1688]	; 209f4 <fts_children@@Base+0x968>
   20358:	str	r3, [sp, #92]	; 0x5c
   2035c:	bl	11ac8 <fopen64@plt>
   20360:	subs	r5, r0, #0
   20364:	beq	206f4 <fts_children@@Base+0x668>
   20368:	ldr	r7, [pc, #1672]	; 209f8 <fts_children@@Base+0x96c>
   2036c:	ldr	r8, [pc, #1672]	; 209fc <fts_children@@Base+0x970>
   20370:	ldr	sl, [pc, #1672]	; 20a00 <fts_children@@Base+0x974>
   20374:	add	r6, sp, #40	; 0x28
   20378:	mov	r3, #0
   2037c:	str	r3, [sp, #44]	; 0x2c
   20380:	str	r3, [sp, #48]	; 0x30
   20384:	mov	r3, r5
   20388:	mov	r2, #10
   2038c:	add	r1, sp, #48	; 0x30
   20390:	add	r0, sp, #44	; 0x2c
   20394:	bl	116d8 <__getdelim@plt>
   20398:	cmn	r0, #1
   2039c:	beq	205a0 <fts_children@@Base+0x514>
   203a0:	add	r0, sp, #64	; 0x40
   203a4:	add	r1, sp, #60	; 0x3c
   203a8:	add	r2, sp, #88	; 0x58
   203ac:	add	r3, sp, #84	; 0x54
   203b0:	add	ip, sp, #39	; 0x27
   203b4:	str	r0, [sp, #12]
   203b8:	str	r1, [sp, #8]
   203bc:	str	r2, [sp, #4]
   203c0:	str	r3, [sp]
   203c4:	str	ip, [sp, #16]
   203c8:	add	r3, sp, #56	; 0x38
   203cc:	add	r2, sp, #52	; 0x34
   203d0:	mov	r1, r7
   203d4:	ldr	r0, [sp, #44]	; 0x2c
   203d8:	bl	11a5c <sscanf@plt>
   203dc:	bic	r0, r0, #4
   203e0:	cmp	r0, #3
   203e4:	bne	20384 <fts_children@@Base+0x2f8>
   203e8:	ldr	r3, [sp, #64]	; 0x40
   203ec:	ldr	r0, [sp, #44]	; 0x2c
   203f0:	mov	r1, r8
   203f4:	add	r0, r0, r3
   203f8:	bl	116b4 <strstr@plt>
   203fc:	subs	fp, r0, #0
   20400:	beq	20384 <fts_children@@Base+0x2f8>
   20404:	add	r2, sp, #80	; 0x50
   20408:	add	r3, sp, #76	; 0x4c
   2040c:	add	r1, sp, #39	; 0x27
   20410:	str	r1, [sp, #8]
   20414:	str	r2, [sp, #4]
   20418:	str	r3, [sp]
   2041c:	add	r2, sp, #68	; 0x44
   20420:	add	r3, sp, #72	; 0x48
   20424:	mov	r1, sl
   20428:	bl	11a5c <sscanf@plt>
   2042c:	bic	r9, r0, #4
   20430:	cmp	r9, #1
   20434:	bne	20384 <fts_children@@Base+0x2f8>
   20438:	ldr	r1, [sp, #44]	; 0x2c
   2043c:	ldr	r2, [sp, #88]	; 0x58
   20440:	mov	r3, #0
   20444:	strb	r3, [r1, r2]
   20448:	ldr	r1, [sp, #44]	; 0x2c
   2044c:	ldr	r2, [sp, #64]	; 0x40
   20450:	strb	r3, [r1, r2]
   20454:	ldr	r2, [sp, #72]	; 0x48
   20458:	strb	r3, [fp, r2]
   2045c:	ldr	r2, [sp, #80]	; 0x50
   20460:	strb	r3, [fp, r2]
   20464:	ldr	r0, [sp, #76]	; 0x4c
   20468:	add	r0, fp, r0
   2046c:	bl	20258 <fts_children@@Base+0x1cc>
   20470:	ldr	r3, [sp, #60]	; 0x3c
   20474:	ldr	r0, [sp, #44]	; 0x2c
   20478:	add	r0, r0, r3
   2047c:	bl	20258 <fts_children@@Base+0x1cc>
   20480:	ldr	r3, [sp, #84]	; 0x54
   20484:	ldr	r0, [sp, #44]	; 0x2c
   20488:	add	r0, r0, r3
   2048c:	bl	20258 <fts_children@@Base+0x1cc>
   20490:	mov	r0, #32
   20494:	bl	1be70 <__assert_fail@plt+0xa318>
   20498:	mov	r4, r0
   2049c:	ldr	r0, [sp, #76]	; 0x4c
   204a0:	add	r0, fp, r0
   204a4:	bl	1c09c <__assert_fail@plt+0xa544>
   204a8:	ldr	r2, [sp, #44]	; 0x2c
   204ac:	ldr	r3, [sp, #60]	; 0x3c
   204b0:	str	r0, [r4]
   204b4:	add	r0, r2, r3
   204b8:	bl	1c09c <__assert_fail@plt+0xa544>
   204bc:	ldr	r2, [sp, #44]	; 0x2c
   204c0:	ldr	r3, [sp, #84]	; 0x54
   204c4:	str	r0, [r4, #4]
   204c8:	add	r0, r2, r3
   204cc:	bl	1c09c <__assert_fail@plt+0xa544>
   204d0:	ldr	r3, [sp, #68]	; 0x44
   204d4:	str	r0, [r4, #8]
   204d8:	add	r0, fp, r3
   204dc:	bl	1c09c <__assert_fail@plt+0xa544>
   204e0:	ldr	r3, [sp, #52]	; 0x34
   204e4:	ldr	lr, [pc, #1304]	; 20a04 <fts_children@@Base+0x978>
   204e8:	ldr	r2, [sp, #56]	; 0x38
   204ec:	and	lr, lr, r3, lsl #8
   204f0:	ldr	r1, [pc, #1296]	; 20a08 <fts_children@@Base+0x97c>
   204f4:	bic	r3, r3, #4080	; 0xff0
   204f8:	bic	r3, r3, #15
   204fc:	and	r1, r1, r2, lsl #12
   20500:	orr	r3, r3, r2, lsr #20
   20504:	ldrb	ip, [r4, #24]
   20508:	uxtb	r2, r2
   2050c:	orr	r2, r2, lr
   20510:	orr	r2, r1, r2
   20514:	orr	ip, ip, #4
   20518:	ldr	r1, [pc, #1260]	; 20a0c <fts_children@@Base+0x980>
   2051c:	strb	ip, [r4, #24]
   20520:	strd	r2, [r4, #16]
   20524:	str	r0, [r4, #12]
   20528:	mov	fp, r0
   2052c:	bl	116e4 <strcmp@plt>
   20530:	cmp	r0, #0
   20534:	beq	2054c <fts_children@@Base+0x4c0>
   20538:	ldr	r1, [pc, #1232]	; 20a10 <fts_children@@Base+0x984>
   2053c:	mov	r0, fp
   20540:	bl	116e4 <strcmp@plt>
   20544:	cmp	r0, #0
   20548:	bne	205f0 <fts_children@@Base+0x564>
   2054c:	mov	r0, #1
   20550:	ldrb	r9, [r4, #24]
   20554:	ldr	r3, [r4]
   20558:	mov	r1, #58	; 0x3a
   2055c:	bic	r9, r9, #1
   20560:	orr	r9, r0, r9
   20564:	strb	r9, [r4, #24]
   20568:	mov	r0, r3
   2056c:	str	r3, [sp, #28]
   20570:	bl	11960 <strchr@plt>
   20574:	ldr	r3, [sp, #28]
   20578:	cmp	r0, #0
   2057c:	beq	206d0 <fts_children@@Base+0x644>
   20580:	mov	r0, #1
   20584:	ldrb	r3, [r4, #24]
   20588:	bic	r3, r3, #2
   2058c:	orr	r3, r3, r0, lsl #1
   20590:	strb	r3, [r4, #24]
   20594:	str	r4, [r6]
   20598:	add	r6, r4, #28
   2059c:	b	20384 <fts_children@@Base+0x2f8>
   205a0:	ldr	r0, [sp, #44]	; 0x2c
   205a4:	bl	11720 <free@plt>
   205a8:	ldr	r3, [r5]
   205ac:	tst	r3, #32
   205b0:	bne	20994 <fts_children@@Base+0x908>
   205b4:	mov	r0, r5
   205b8:	bl	1dd58 <__assert_fail@plt+0xc200>
   205bc:	cmn	r0, #1
   205c0:	beq	208f4 <fts_children@@Base+0x868>
   205c4:	mov	r3, #0
   205c8:	str	r3, [r6]
   205cc:	ldr	r5, [sp, #40]	; 0x28
   205d0:	ldr	r3, [pc, #1044]	; 209ec <fts_children@@Base+0x960>
   205d4:	ldr	r2, [sp, #92]	; 0x5c
   205d8:	mov	r0, r5
   205dc:	ldr	r3, [r3]
   205e0:	cmp	r2, r3
   205e4:	bne	209e8 <fts_children@@Base+0x95c>
   205e8:	add	sp, sp, #100	; 0x64
   205ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205f0:	ldr	r1, [pc, #1052]	; 20a14 <fts_children@@Base+0x988>
   205f4:	mov	r0, fp
   205f8:	bl	116e4 <strcmp@plt>
   205fc:	cmp	r0, #0
   20600:	beq	2054c <fts_children@@Base+0x4c0>
   20604:	ldr	r1, [pc, #1036]	; 20a18 <fts_children@@Base+0x98c>
   20608:	mov	r0, fp
   2060c:	bl	116e4 <strcmp@plt>
   20610:	cmp	r0, #0
   20614:	beq	2054c <fts_children@@Base+0x4c0>
   20618:	ldr	r1, [pc, #1020]	; 20a1c <fts_children@@Base+0x990>
   2061c:	mov	r0, fp
   20620:	bl	116e4 <strcmp@plt>
   20624:	cmp	r0, #0
   20628:	beq	2054c <fts_children@@Base+0x4c0>
   2062c:	ldr	r1, [pc, #1004]	; 20a20 <fts_children@@Base+0x994>
   20630:	mov	r0, fp
   20634:	bl	116e4 <strcmp@plt>
   20638:	cmp	r0, #0
   2063c:	beq	2054c <fts_children@@Base+0x4c0>
   20640:	ldr	r1, [pc, #988]	; 20a24 <fts_children@@Base+0x998>
   20644:	mov	r0, fp
   20648:	bl	116e4 <strcmp@plt>
   2064c:	cmp	r0, #0
   20650:	beq	2054c <fts_children@@Base+0x4c0>
   20654:	ldr	r1, [pc, #972]	; 20a28 <fts_children@@Base+0x99c>
   20658:	mov	r0, fp
   2065c:	bl	116e4 <strcmp@plt>
   20660:	cmp	r0, #0
   20664:	beq	2054c <fts_children@@Base+0x4c0>
   20668:	ldr	r1, [pc, #956]	; 20a2c <fts_children@@Base+0x9a0>
   2066c:	mov	r0, fp
   20670:	bl	116e4 <strcmp@plt>
   20674:	cmp	r0, #0
   20678:	beq	2054c <fts_children@@Base+0x4c0>
   2067c:	ldr	r1, [pc, #940]	; 20a30 <fts_children@@Base+0x9a4>
   20680:	mov	r0, fp
   20684:	bl	116e4 <strcmp@plt>
   20688:	cmp	r0, #0
   2068c:	beq	2054c <fts_children@@Base+0x4c0>
   20690:	ldr	r1, [pc, #924]	; 20a34 <fts_children@@Base+0x9a8>
   20694:	mov	r0, fp
   20698:	bl	116e4 <strcmp@plt>
   2069c:	cmp	r0, #0
   206a0:	beq	2054c <fts_children@@Base+0x4c0>
   206a4:	ldr	r1, [pc, #908]	; 20a38 <fts_children@@Base+0x9ac>
   206a8:	mov	r0, fp
   206ac:	bl	116e4 <strcmp@plt>
   206b0:	cmp	r0, #0
   206b4:	beq	2054c <fts_children@@Base+0x4c0>
   206b8:	ldr	r1, [pc, #892]	; 20a3c <fts_children@@Base+0x9b0>
   206bc:	mov	r0, fp
   206c0:	bl	116e4 <strcmp@plt>
   206c4:	clz	r0, r0
   206c8:	lsr	r0, r0, #5
   206cc:	b	20550 <fts_children@@Base+0x4c4>
   206d0:	ldrb	r2, [r3]
   206d4:	cmp	r2, #47	; 0x2f
   206d8:	beq	20958 <fts_children@@Base+0x8cc>
   206dc:	mov	r1, r3
   206e0:	ldr	r0, [pc, #856]	; 20a40 <fts_children@@Base+0x9b4>
   206e4:	bl	116e4 <strcmp@plt>
   206e8:	clz	r0, r0
   206ec:	lsr	r0, r0, #5
   206f0:	b	20584 <fts_children@@Base+0x4f8>
   206f4:	ldr	r1, [pc, #756]	; 209f0 <fts_children@@Base+0x964>
   206f8:	ldr	r0, [pc, #836]	; 20a44 <fts_children@@Base+0x9b8>
   206fc:	bl	11ae0 <setmntent@plt>
   20700:	subs	r5, r0, #0
   20704:	beq	205d0 <fts_children@@Base+0x544>
   20708:	mov	r0, r5
   2070c:	bl	11888 <getmntent@plt>
   20710:	add	r6, sp, #40	; 0x28
   20714:	ldr	r8, [pc, #812]	; 20a48 <fts_children@@Base+0x9bc>
   20718:	ldr	r7, [pc, #748]	; 20a0c <fts_children@@Base+0x980>
   2071c:	ldr	sl, [pc, #748]	; 20a10 <fts_children@@Base+0x984>
   20720:	subs	r9, r0, #0
   20724:	beq	208e4 <fts_children@@Base+0x858>
   20728:	mov	r1, r8
   2072c:	bl	1184c <hasmntopt@plt>
   20730:	mov	fp, r0
   20734:	mov	r0, #32
   20738:	bl	1be70 <__assert_fail@plt+0xa318>
   2073c:	mov	r4, r0
   20740:	ldr	r0, [r9]
   20744:	bl	1c09c <__assert_fail@plt+0xa544>
   20748:	str	r0, [r4]
   2074c:	ldr	r0, [r9, #4]
   20750:	bl	1c09c <__assert_fail@plt+0xa544>
   20754:	mov	r3, #0
   20758:	stmib	r4, {r0, r3}
   2075c:	ldr	r0, [r9, #8]
   20760:	bl	1c09c <__assert_fail@plt+0xa544>
   20764:	ldrb	r3, [r4, #24]
   20768:	mov	r1, r7
   2076c:	orr	r3, r3, #4
   20770:	strb	r3, [r4, #24]
   20774:	str	r0, [r4, #12]
   20778:	mov	r9, r0
   2077c:	bl	116e4 <strcmp@plt>
   20780:	cmp	r0, #0
   20784:	beq	20880 <fts_children@@Base+0x7f4>
   20788:	mov	r1, sl
   2078c:	mov	r0, r9
   20790:	bl	116e4 <strcmp@plt>
   20794:	cmp	r0, #0
   20798:	beq	20880 <fts_children@@Base+0x7f4>
   2079c:	ldr	r1, [pc, #624]	; 20a14 <fts_children@@Base+0x988>
   207a0:	mov	r0, r9
   207a4:	bl	116e4 <strcmp@plt>
   207a8:	cmp	r0, #0
   207ac:	beq	20880 <fts_children@@Base+0x7f4>
   207b0:	ldr	r1, [pc, #608]	; 20a18 <fts_children@@Base+0x98c>
   207b4:	mov	r0, r9
   207b8:	bl	116e4 <strcmp@plt>
   207bc:	cmp	r0, #0
   207c0:	beq	20880 <fts_children@@Base+0x7f4>
   207c4:	ldr	r1, [pc, #592]	; 20a1c <fts_children@@Base+0x990>
   207c8:	mov	r0, r9
   207cc:	bl	116e4 <strcmp@plt>
   207d0:	cmp	r0, #0
   207d4:	beq	20880 <fts_children@@Base+0x7f4>
   207d8:	ldr	r1, [pc, #576]	; 20a20 <fts_children@@Base+0x994>
   207dc:	mov	r0, r9
   207e0:	bl	116e4 <strcmp@plt>
   207e4:	cmp	r0, #0
   207e8:	beq	20880 <fts_children@@Base+0x7f4>
   207ec:	ldr	r1, [pc, #560]	; 20a24 <fts_children@@Base+0x998>
   207f0:	mov	r0, r9
   207f4:	bl	116e4 <strcmp@plt>
   207f8:	cmp	r0, #0
   207fc:	beq	20880 <fts_children@@Base+0x7f4>
   20800:	ldr	r1, [pc, #544]	; 20a28 <fts_children@@Base+0x99c>
   20804:	mov	r0, r9
   20808:	bl	116e4 <strcmp@plt>
   2080c:	cmp	r0, #0
   20810:	beq	20880 <fts_children@@Base+0x7f4>
   20814:	ldr	r1, [pc, #528]	; 20a2c <fts_children@@Base+0x9a0>
   20818:	mov	r0, r9
   2081c:	bl	116e4 <strcmp@plt>
   20820:	cmp	r0, #0
   20824:	beq	20880 <fts_children@@Base+0x7f4>
   20828:	ldr	r1, [pc, #512]	; 20a30 <fts_children@@Base+0x9a4>
   2082c:	mov	r0, r9
   20830:	bl	116e4 <strcmp@plt>
   20834:	cmp	r0, #0
   20838:	beq	20880 <fts_children@@Base+0x7f4>
   2083c:	ldr	r1, [pc, #496]	; 20a34 <fts_children@@Base+0x9a8>
   20840:	mov	r0, r9
   20844:	bl	116e4 <strcmp@plt>
   20848:	cmp	r0, #0
   2084c:	beq	20880 <fts_children@@Base+0x7f4>
   20850:	ldr	r1, [pc, #480]	; 20a38 <fts_children@@Base+0x9ac>
   20854:	mov	r0, r9
   20858:	bl	116e4 <strcmp@plt>
   2085c:	cmp	r0, #0
   20860:	beq	20880 <fts_children@@Base+0x7f4>
   20864:	ldr	r1, [pc, #464]	; 20a3c <fts_children@@Base+0x9b0>
   20868:	mov	r0, r9
   2086c:	bl	116e4 <strcmp@plt>
   20870:	orrs	r3, fp, r0
   20874:	moveq	r3, #1
   20878:	movne	r3, #0
   2087c:	b	20884 <fts_children@@Base+0x7f8>
   20880:	mov	r3, #1
   20884:	ldrb	r2, [r4, #24]
   20888:	ldr	fp, [r4]
   2088c:	mov	r1, #58	; 0x3a
   20890:	bic	r2, r2, #1
   20894:	orr	r3, r3, r2
   20898:	mov	r0, fp
   2089c:	strb	r3, [r4, #24]
   208a0:	bl	11960 <strchr@plt>
   208a4:	cmp	r0, #0
   208a8:	beq	20934 <fts_children@@Base+0x8a8>
   208ac:	mov	r2, #1
   208b0:	ldrb	r3, [r4, #24]
   208b4:	mvn	r0, #0
   208b8:	mvn	r1, #0
   208bc:	bic	r3, r3, #2
   208c0:	orr	r3, r3, r2, lsl #1
   208c4:	strd	r0, [r4, #16]
   208c8:	strb	r3, [r4, #24]
   208cc:	mov	r0, r5
   208d0:	str	r4, [r6]
   208d4:	bl	11888 <getmntent@plt>
   208d8:	add	r6, r4, #28
   208dc:	subs	r9, r0, #0
   208e0:	bne	20728 <fts_children@@Base+0x69c>
   208e4:	mov	r0, r5
   208e8:	bl	119fc <endmntent@plt>
   208ec:	cmp	r0, #0
   208f0:	bne	205c4 <fts_children@@Base+0x538>
   208f4:	bl	11984 <__errno_location@plt>
   208f8:	ldr	r5, [r0]
   208fc:	mov	r7, r0
   20900:	mov	r3, #0
   20904:	str	r3, [r6]
   20908:	ldr	r0, [sp, #40]	; 0x28
   2090c:	cmp	r0, r3
   20910:	beq	20928 <fts_children@@Base+0x89c>
   20914:	ldr	r4, [r0, #28]
   20918:	bl	202f4 <fts_children@@Base+0x268>
   2091c:	subs	r0, r4, #0
   20920:	str	r4, [sp, #40]	; 0x28
   20924:	bne	20914 <fts_children@@Base+0x888>
   20928:	str	r5, [r7]
   2092c:	mov	r5, #0
   20930:	b	205d0 <fts_children@@Base+0x544>
   20934:	ldrb	r3, [fp]
   20938:	cmp	r3, #47	; 0x2f
   2093c:	beq	209b0 <fts_children@@Base+0x924>
   20940:	mov	r1, fp
   20944:	ldr	r0, [pc, #244]	; 20a40 <fts_children@@Base+0x9b4>
   20948:	bl	116e4 <strcmp@plt>
   2094c:	clz	r2, r0
   20950:	lsr	r2, r2, #5
   20954:	b	208b0 <fts_children@@Base+0x824>
   20958:	ldrb	r2, [r3, #1]
   2095c:	cmp	r2, #47	; 0x2f
   20960:	bne	206dc <fts_children@@Base+0x650>
   20964:	ldr	r1, [pc, #224]	; 20a4c <fts_children@@Base+0x9c0>
   20968:	mov	r0, fp
   2096c:	bl	116e4 <strcmp@plt>
   20970:	cmp	r0, #0
   20974:	beq	20580 <fts_children@@Base+0x4f4>
   20978:	mov	r0, fp
   2097c:	ldr	r1, [pc, #204]	; 20a50 <fts_children@@Base+0x9c4>
   20980:	bl	116e4 <strcmp@plt>
   20984:	ldr	r3, [sp, #28]
   20988:	cmp	r0, #0
   2098c:	beq	20580 <fts_children@@Base+0x4f4>
   20990:	b	206dc <fts_children@@Base+0x650>
   20994:	bl	11984 <__errno_location@plt>
   20998:	mov	r7, r0
   2099c:	mov	r0, r5
   209a0:	ldr	r5, [r7]
   209a4:	bl	1dd58 <__assert_fail@plt+0xc200>
   209a8:	str	r5, [r7]
   209ac:	b	20900 <fts_children@@Base+0x874>
   209b0:	ldrb	r3, [fp, #1]
   209b4:	cmp	r3, #47	; 0x2f
   209b8:	bne	20940 <fts_children@@Base+0x8b4>
   209bc:	ldr	r1, [pc, #136]	; 20a4c <fts_children@@Base+0x9c0>
   209c0:	mov	r0, r9
   209c4:	bl	116e4 <strcmp@plt>
   209c8:	cmp	r0, #0
   209cc:	beq	208ac <fts_children@@Base+0x820>
   209d0:	mov	r0, r9
   209d4:	ldr	r1, [pc, #116]	; 20a50 <fts_children@@Base+0x9c4>
   209d8:	bl	116e4 <strcmp@plt>
   209dc:	cmp	r0, #0
   209e0:	beq	208ac <fts_children@@Base+0x820>
   209e4:	b	20940 <fts_children@@Base+0x8b4>
   209e8:	bl	11780 <__stack_chk_fail@plt>
   209ec:	andeq	r4, r3, r8, lsl #30
   209f0:	andeq	r3, r2, ip, asr r3
   209f4:	andeq	r3, r2, ip, asr #29
   209f8:	andeq	r3, r2, r4, ror #29
   209fc:	andeq	r3, r2, r4, lsl #30
   20a00:	andeq	r3, r2, r8, lsl #30
   20a04:	andeq	pc, pc, r0, lsl #30
   20a08:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   20a0c:	andeq	r3, r2, r0, lsr #30
   20a10:	andeq	r3, r2, r8, lsr #30
   20a14:	andeq	r3, r2, r0, lsr pc
   20a18:	andeq	r3, r2, r8, lsr pc
   20a1c:	andeq	r3, r2, r0, asr #30
   20a20:	andeq	r3, r2, r8, asr #30
   20a24:	andeq	r3, r2, r0, asr pc
   20a28:	andeq	r3, r2, r8, asr pc
   20a2c:	andeq	r3, r2, r4, ror #30
   20a30:	andeq	r3, r2, ip, ror #30
   20a34:	andeq	r3, r2, r4, ror pc
   20a38:	andeq	r3, r2, ip, ror pc
   20a3c:	andeq	r3, r2, r4, lsl #31
   20a40:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   20a44:	andeq	r3, r2, r4, lsr #31
   20a48:			; <UNDEFINED> instruction: 0x00023fb0
   20a4c:	andeq	r3, r2, ip, lsl #31
   20a50:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   20a54:	subs	r1, r0, #0
   20a58:	beq	20a68 <fts_children@@Base+0x9dc>
   20a5c:	mov	r2, #1
   20a60:	ldr	r0, [pc, #8]	; 20a70 <fts_children@@Base+0x9e4>
   20a64:	b	1196c <setenv@plt>
   20a68:	ldr	r0, [pc]	; 20a70 <fts_children@@Base+0x9e4>
   20a6c:	b	11b10 <unsetenv@plt>
   20a70:	muleq	r2, r8, r1
   20a74:	cmp	r0, #0
   20a78:	bxeq	lr
   20a7c:	push	{r4, lr}
   20a80:	ldr	r4, [r0]
   20a84:	bl	11720 <free@plt>
   20a88:	subs	r0, r4, #0
   20a8c:	bne	20a80 <fts_children@@Base+0x9f4>
   20a90:	pop	{r4, pc}
   20a94:	push	{r4, r5, r6, r7, r8, lr}
   20a98:	mov	r5, r0
   20a9c:	bl	11984 <__errno_location@plt>
   20aa0:	mov	r4, r0
   20aa4:	ldrb	r0, [r5, #4]
   20aa8:	ldr	r6, [r4]
   20aac:	cmp	r0, #0
   20ab0:	addne	r0, r5, #5
   20ab4:	bl	20a54 <fts_children@@Base+0x9c8>
   20ab8:	cmp	r0, #0
   20abc:	beq	20adc <fts_children@@Base+0xa50>
   20ac0:	ldr	r6, [r4]
   20ac4:	mov	r7, #0
   20ac8:	mov	r0, r5
   20acc:	bl	20a74 <fts_children@@Base+0x9e8>
   20ad0:	str	r6, [r4]
   20ad4:	mov	r0, r7
   20ad8:	pop	{r4, r5, r6, r7, r8, pc}
   20adc:	bl	117f8 <tzset@plt>
   20ae0:	mov	r7, #1
   20ae4:	b	20ac8 <fts_children@@Base+0xa3c>
   20ae8:	push	{r4, r5, r6, r7, r8, lr}
   20aec:	subs	r6, r0, #0
   20af0:	beq	20b4c <fts_children@@Base+0xac0>
   20af4:	bl	11954 <strlen@plt>
   20af8:	add	r5, r0, #1
   20afc:	cmp	r5, #58	; 0x3a
   20b00:	movcs	r0, r5
   20b04:	movcc	r0, #58	; 0x3a
   20b08:	add	r0, r0, #9
   20b0c:	bic	r0, r0, #3
   20b10:	bl	118b8 <malloc@plt>
   20b14:	subs	r4, r0, #0
   20b18:	beq	20b44 <fts_children@@Base+0xab8>
   20b1c:	mov	r7, #0
   20b20:	mov	r2, #1
   20b24:	add	r3, r4, #5
   20b28:	strh	r2, [r4, #4]
   20b2c:	mov	r1, r6
   20b30:	str	r7, [r4]
   20b34:	mov	r0, r3
   20b38:	mov	r2, r5
   20b3c:	bl	11738 <memcpy@plt>
   20b40:	strb	r7, [r0, r5]
   20b44:	mov	r0, r4
   20b48:	pop	{r4, r5, r6, r7, r8, pc}
   20b4c:	mov	r0, #64	; 0x40
   20b50:	bl	118b8 <malloc@plt>
   20b54:	subs	r4, r0, #0
   20b58:	mov	r0, r4
   20b5c:	strne	r6, [r4]
   20b60:	strhne	r6, [r4, #4]
   20b64:	pop	{r4, r5, r6, r7, r8, pc}
   20b68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20b6c:	ldr	r7, [r1, #40]	; 0x28
   20b70:	cmp	r7, #0
   20b74:	beq	20c50 <fts_children@@Base+0xbc4>
   20b78:	cmp	r1, r7
   20b7c:	mov	r8, r1
   20b80:	mov	r6, r0
   20b84:	bhi	20b94 <fts_children@@Base+0xb08>
   20b88:	add	r3, r1, #44	; 0x2c
   20b8c:	cmp	r7, r3
   20b90:	bcc	20c50 <fts_children@@Base+0xbc4>
   20b94:	ldrb	r3, [r7]
   20b98:	cmp	r3, #0
   20b9c:	addne	r4, r6, #5
   20ba0:	beq	20c48 <fts_children@@Base+0xbbc>
   20ba4:	mov	r1, r7
   20ba8:	mov	r0, r4
   20bac:	bl	116e4 <strcmp@plt>
   20bb0:	add	r5, r6, #5
   20bb4:	cmp	r0, #0
   20bb8:	mov	r0, r4
   20bbc:	beq	20c38 <fts_children@@Base+0xbac>
   20bc0:	ldrb	r9, [r4]
   20bc4:	cmp	r9, #0
   20bc8:	bne	20be0 <fts_children@@Base+0xb54>
   20bcc:	cmp	r5, r4
   20bd0:	bne	20c5c <fts_children@@Base+0xbd0>
   20bd4:	ldrb	r5, [r6, #4]
   20bd8:	cmp	r5, #0
   20bdc:	beq	20c08 <fts_children@@Base+0xb7c>
   20be0:	bl	11954 <strlen@plt>
   20be4:	add	r0, r0, #1
   20be8:	ldrb	r3, [r4, r0]!
   20bec:	cmp	r3, #0
   20bf0:	bne	20ba4 <fts_children@@Base+0xb18>
   20bf4:	ldr	r3, [r6]
   20bf8:	cmp	r3, #0
   20bfc:	addne	r4, r3, #5
   20c00:	movne	r6, r3
   20c04:	b	20ba4 <fts_children@@Base+0xb18>
   20c08:	mov	r0, r7
   20c0c:	bl	11954 <strlen@plt>
   20c10:	add	sl, r0, #1
   20c14:	add	r5, sl, r5
   20c18:	cmp	r5, #58	; 0x3a
   20c1c:	bhi	20c88 <fts_children@@Base+0xbfc>
   20c20:	mov	r1, r7
   20c24:	mov	r2, sl
   20c28:	mov	r0, r4
   20c2c:	bl	11738 <memcpy@plt>
   20c30:	mov	r3, #0
   20c34:	strb	r3, [r4, sl]
   20c38:	mov	r9, #1
   20c3c:	str	r4, [r8, #40]	; 0x28
   20c40:	mov	r0, r9
   20c44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20c48:	ldr	r4, [pc, #96]	; 20cb0 <fts_children@@Base+0xc24>
   20c4c:	b	20c38 <fts_children@@Base+0xbac>
   20c50:	mov	r9, #1
   20c54:	mov	r0, r9
   20c58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20c5c:	mov	r0, r7
   20c60:	bl	11954 <strlen@plt>
   20c64:	sub	r5, r4, r5
   20c68:	mvn	r3, r5
   20c6c:	add	sl, r0, #1
   20c70:	cmp	r3, sl
   20c74:	bcs	20c14 <fts_children@@Base+0xb88>
   20c78:	bl	11984 <__errno_location@plt>
   20c7c:	mov	r3, #12
   20c80:	str	r3, [r0]
   20c84:	b	20c40 <fts_children@@Base+0xbb4>
   20c88:	mov	r0, r7
   20c8c:	bl	20ae8 <fts_children@@Base+0xa5c>
   20c90:	cmp	r0, #0
   20c94:	str	r0, [r6]
   20c98:	moveq	r9, r0
   20c9c:	beq	20c40 <fts_children@@Base+0xbb4>
   20ca0:	mov	r3, #0
   20ca4:	strb	r3, [r0, #4]
   20ca8:	add	r4, r0, #5
   20cac:	b	20c38 <fts_children@@Base+0xbac>
   20cb0:	andeq	r3, r2, r8, lsr #17
   20cb4:	push	{r4, r5, r6, lr}
   20cb8:	mov	r4, r0
   20cbc:	ldr	r0, [pc, #160]	; 20d64 <fts_children@@Base+0xcd8>
   20cc0:	bl	118ac <getenv@plt>
   20cc4:	ldrb	r3, [r4, #4]
   20cc8:	subs	r5, r0, #0
   20ccc:	beq	20d4c <fts_children@@Base+0xcc0>
   20cd0:	cmp	r3, #0
   20cd4:	bne	20d2c <fts_children@@Base+0xca0>
   20cd8:	mov	r0, r5
   20cdc:	bl	20ae8 <fts_children@@Base+0xa5c>
   20ce0:	subs	r5, r0, #0
   20ce4:	beq	20d44 <fts_children@@Base+0xcb8>
   20ce8:	ldrb	r0, [r4, #4]
   20cec:	cmp	r0, #0
   20cf0:	addne	r0, r4, #5
   20cf4:	bl	20a54 <fts_children@@Base+0x9c8>
   20cf8:	cmp	r0, #0
   20cfc:	beq	20d58 <fts_children@@Base+0xccc>
   20d00:	bl	11984 <__errno_location@plt>
   20d04:	cmp	r5, #1
   20d08:	mov	r4, r0
   20d0c:	ldr	r6, [r0]
   20d10:	beq	20d1c <fts_children@@Base+0xc90>
   20d14:	mov	r0, r5
   20d18:	bl	20a74 <fts_children@@Base+0x9e8>
   20d1c:	mov	r5, #0
   20d20:	str	r6, [r4]
   20d24:	mov	r0, r5
   20d28:	pop	{r4, r5, r6, pc}
   20d2c:	mov	r1, r5
   20d30:	add	r0, r4, #5
   20d34:	bl	116e4 <strcmp@plt>
   20d38:	cmp	r0, #0
   20d3c:	bne	20cd8 <fts_children@@Base+0xc4c>
   20d40:	mov	r5, #1
   20d44:	mov	r0, r5
   20d48:	pop	{r4, r5, r6, pc}
   20d4c:	cmp	r3, #0
   20d50:	beq	20d40 <fts_children@@Base+0xcb4>
   20d54:	b	20cd8 <fts_children@@Base+0xc4c>
   20d58:	bl	117f8 <tzset@plt>
   20d5c:	mov	r0, r5
   20d60:	pop	{r4, r5, r6, pc}
   20d64:	muleq	r2, r8, r1
   20d68:	cmp	r0, #1
   20d6c:	bxeq	lr
   20d70:	b	20a74 <fts_children@@Base+0x9e8>
   20d74:	subs	ip, r0, #0
   20d78:	push	{r4, r5, r6, r7, r8, lr}
   20d7c:	mov	r5, r1
   20d80:	beq	20e00 <fts_children@@Base+0xd74>
   20d84:	mov	r4, r2
   20d88:	mov	r6, ip
   20d8c:	bl	20cb4 <fts_children@@Base+0xc28>
   20d90:	subs	r7, r0, #0
   20d94:	beq	20de0 <fts_children@@Base+0xd54>
   20d98:	mov	r0, r5
   20d9c:	mov	r1, r4
   20da0:	bl	117b0 <localtime_r@plt>
   20da4:	cmp	r0, #0
   20da8:	beq	20dd0 <fts_children@@Base+0xd44>
   20dac:	mov	r0, r6
   20db0:	mov	r1, r4
   20db4:	bl	20b68 <fts_children@@Base+0xadc>
   20db8:	cmp	r0, #0
   20dbc:	beq	20dd0 <fts_children@@Base+0xd44>
   20dc0:	cmp	r7, #1
   20dc4:	bne	20de8 <fts_children@@Base+0xd5c>
   20dc8:	mov	r0, r4
   20dcc:	pop	{r4, r5, r6, r7, r8, pc}
   20dd0:	cmp	r7, #1
   20dd4:	beq	20de0 <fts_children@@Base+0xd54>
   20dd8:	mov	r0, r7
   20ddc:	bl	20a94 <fts_children@@Base+0xa08>
   20de0:	mov	r0, #0
   20de4:	pop	{r4, r5, r6, r7, r8, pc}
   20de8:	mov	r0, r7
   20dec:	bl	20a94 <fts_children@@Base+0xa08>
   20df0:	cmp	r0, #0
   20df4:	beq	20de0 <fts_children@@Base+0xd54>
   20df8:	mov	r0, r4
   20dfc:	pop	{r4, r5, r6, r7, r8, pc}
   20e00:	mov	r0, r5
   20e04:	mov	r1, r2
   20e08:	pop	{r4, r5, r6, r7, r8, lr}
   20e0c:	b	116cc <gmtime_r@plt>
   20e10:	push	{r4, r5, r6, r7, lr}
   20e14:	sub	sp, sp, #60	; 0x3c
   20e18:	ldr	r5, [pc, #312]	; 20f58 <fts_children@@Base+0xecc>
   20e1c:	subs	r7, r0, #0
   20e20:	mov	r4, r1
   20e24:	ldr	r3, [r5]
   20e28:	str	r3, [sp, #52]	; 0x34
   20e2c:	beq	20f40 <fts_children@@Base+0xeb4>
   20e30:	bl	20cb4 <fts_children@@Base+0xc28>
   20e34:	subs	r6, r0, #0
   20e38:	beq	20f4c <fts_children@@Base+0xec0>
   20e3c:	mov	r0, r4
   20e40:	bl	116f0 <mktime@plt>
   20e44:	cmn	r0, #1
   20e48:	str	r0, [sp, #4]
   20e4c:	beq	20e9c <fts_children@@Base+0xe10>
   20e50:	mov	r1, r4
   20e54:	mov	r0, r7
   20e58:	bl	20b68 <fts_children@@Base+0xadc>
   20e5c:	cmp	r0, #0
   20e60:	mvneq	r3, #0
   20e64:	streq	r3, [sp, #4]
   20e68:	cmp	r6, #1
   20e6c:	beq	20e80 <fts_children@@Base+0xdf4>
   20e70:	mov	r0, r6
   20e74:	bl	20a94 <fts_children@@Base+0xa08>
   20e78:	cmp	r0, #0
   20e7c:	beq	20f4c <fts_children@@Base+0xec0>
   20e80:	ldr	r0, [sp, #4]
   20e84:	ldr	r2, [sp, #52]	; 0x34
   20e88:	ldr	r3, [r5]
   20e8c:	cmp	r2, r3
   20e90:	bne	20f54 <fts_children@@Base+0xec8>
   20e94:	add	sp, sp, #60	; 0x3c
   20e98:	pop	{r4, r5, r6, r7, pc}
   20e9c:	add	r1, sp, #8
   20ea0:	add	r0, sp, #4
   20ea4:	bl	117b0 <localtime_r@plt>
   20ea8:	cmp	r0, #0
   20eac:	beq	20e68 <fts_children@@Base+0xddc>
   20eb0:	ldr	r0, [r4, #32]
   20eb4:	ldr	r1, [sp, #40]	; 0x28
   20eb8:	clz	r2, r0
   20ebc:	clz	r3, r1
   20ec0:	lsr	r2, r2, #5
   20ec4:	lsr	r3, r3, #5
   20ec8:	cmp	r2, r3
   20ecc:	beq	20edc <fts_children@@Base+0xe50>
   20ed0:	cmp	r0, #0
   20ed4:	cmpge	r1, #0
   20ed8:	bge	20e68 <fts_children@@Base+0xddc>
   20edc:	ldr	r1, [sp, #24]
   20ee0:	ldr	r0, [sp, #28]
   20ee4:	ldr	r3, [r4, #16]
   20ee8:	ldr	r2, [r4, #20]
   20eec:	eor	r3, r3, r1
   20ef0:	eor	r2, r2, r0
   20ef4:	ldr	r1, [r4, #12]
   20ef8:	ldr	r0, [sp, #20]
   20efc:	orr	r3, r3, r2
   20f00:	eor	r1, r1, r0
   20f04:	ldr	r2, [r4, #8]
   20f08:	ldr	r0, [sp, #16]
   20f0c:	orr	r3, r3, r1
   20f10:	eor	r2, r2, r0
   20f14:	ldr	r1, [r4, #4]
   20f18:	ldr	r0, [sp, #12]
   20f1c:	orr	r3, r3, r2
   20f20:	eor	r1, r1, r0
   20f24:	ldr	r2, [r4]
   20f28:	ldr	r0, [sp, #8]
   20f2c:	orr	r3, r3, r1
   20f30:	eor	r2, r2, r0
   20f34:	orrs	r3, r3, r2
   20f38:	beq	20e50 <fts_children@@Base+0xdc4>
   20f3c:	b	20e68 <fts_children@@Base+0xddc>
   20f40:	mov	r0, r1
   20f44:	bl	11a8c <timegm@plt>
   20f48:	b	20e84 <fts_children@@Base+0xdf8>
   20f4c:	mvn	r0, #0
   20f50:	b	20e84 <fts_children@@Base+0xdf8>
   20f54:	bl	11780 <__stack_chk_fail@plt>
   20f58:	andeq	r4, r3, r8, lsl #30
   20f5c:	push	{r4, r5, r6, lr}
   20f60:	mov	r4, r0
   20f64:	bl	11864 <__fpending@plt>
   20f68:	ldr	r5, [r4]
   20f6c:	and	r5, r5, #32
   20f70:	mov	r6, r0
   20f74:	mov	r0, r4
   20f78:	bl	1dd58 <__assert_fail@plt+0xc200>
   20f7c:	cmp	r5, #0
   20f80:	mov	r4, r0
   20f84:	bne	20fb0 <fts_children@@Base+0xf24>
   20f88:	cmp	r0, #0
   20f8c:	beq	20fa8 <fts_children@@Base+0xf1c>
   20f90:	cmp	r6, #0
   20f94:	bne	20fc8 <fts_children@@Base+0xf3c>
   20f98:	bl	11984 <__errno_location@plt>
   20f9c:	ldr	r4, [r0]
   20fa0:	subs	r4, r4, #9
   20fa4:	mvnne	r4, #0
   20fa8:	mov	r0, r4
   20fac:	pop	{r4, r5, r6, pc}
   20fb0:	cmp	r0, #0
   20fb4:	bne	20fc8 <fts_children@@Base+0xf3c>
   20fb8:	bl	11984 <__errno_location@plt>
   20fbc:	str	r4, [r0]
   20fc0:	mvn	r4, #0
   20fc4:	b	20fa8 <fts_children@@Base+0xf1c>
   20fc8:	mvn	r4, #0
   20fcc:	b	20fa8 <fts_children@@Base+0xf1c>
   20fd0:	push	{r4, r5}
   20fd4:	mov	r4, #0
   20fd8:	mov	r5, #0
   20fdc:	ldr	r3, [pc, #12]	; 20ff0 <fts_children@@Base+0xf64>
   20fe0:	strd	r4, [r0, #16]
   20fe4:	str	r3, [r0, #24]
   20fe8:	pop	{r4, r5}
   20fec:	bx	lr
   20ff0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   20ff4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ff8:	ldr	r2, [r0, #24]
   20ffc:	ldr	r3, [pc, #180]	; 210b8 <fts_children@@Base+0x102c>
   21000:	cmp	r2, r3
   21004:	bne	210a4 <fts_children@@Base+0x1018>
   21008:	ldrd	r6, [r0, #16]
   2100c:	ldrd	sl, [r1, #96]	; 0x60
   21010:	orrs	r3, r6, r7
   21014:	beq	21050 <fts_children@@Base+0xfc4>
   21018:	ldrd	r2, [r0]
   2101c:	cmp	r3, fp
   21020:	cmpeq	r2, sl
   21024:	beq	21074 <fts_children@@Base+0xfe8>
   21028:	adds	r8, r6, #1
   2102c:	adc	r9, r7, #0
   21030:	and	r2, r6, r8
   21034:	and	r3, r7, r9
   21038:	orrs	r3, r2, r3
   2103c:	strd	r8, [r0, #16]
   21040:	movne	r1, #0
   21044:	beq	21094 <fts_children@@Base+0x1008>
   21048:	mov	r0, r1
   2104c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21050:	mov	r2, #1
   21054:	mov	r3, #0
   21058:	strd	r2, [r0, #16]
   2105c:	ldrd	r2, [r1]
   21060:	mov	r1, #0
   21064:	strd	sl, [r0]
   21068:	strd	r2, [r0, #8]
   2106c:	mov	r0, r1
   21070:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21074:	ldrd	r4, [r1]
   21078:	ldrd	r2, [r0, #8]
   2107c:	cmp	r5, r3
   21080:	cmpeq	r4, r2
   21084:	bne	21028 <fts_children@@Base+0xf9c>
   21088:	mov	r1, #1
   2108c:	mov	r0, r1
   21090:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21094:	orrs	r3, r8, r9
   21098:	bne	2105c <fts_children@@Base+0xfd0>
   2109c:	mov	r1, #1
   210a0:	b	2108c <fts_children@@Base+0x1000>
   210a4:	ldr	r3, [pc, #16]	; 210bc <fts_children@@Base+0x1030>
   210a8:	mov	r2, #60	; 0x3c
   210ac:	ldr	r1, [pc, #12]	; 210c0 <fts_children@@Base+0x1034>
   210b0:	ldr	r0, [pc, #12]	; 210c4 <fts_children@@Base+0x1038>
   210b4:	bl	11b58 <__assert_fail@plt>
   210b8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   210bc:			; <UNDEFINED> instruction: 0x00023fb8
   210c0:	andeq	r3, r2, r4, asr #31
   210c4:	ldrdeq	r3, [r2], -r8
   210c8:	push	{r1, r2, r3}
   210cc:	push	{r4, lr}
   210d0:	sub	sp, sp, #12
   210d4:	ldr	r4, [pc, #68]	; 21120 <fts_children@@Base+0x1094>
   210d8:	ldr	r1, [sp, #20]
   210dc:	ldr	r3, [r4]
   210e0:	ands	r2, r1, #64	; 0x40
   210e4:	str	r3, [sp, #4]
   210e8:	ldrne	r2, [sp, #24]
   210ec:	addne	r3, sp, #24
   210f0:	strne	r3, [sp]
   210f4:	bl	118a0 <open64@plt>
   210f8:	bl	212c0 <fts_children@@Base+0x1234>
   210fc:	ldr	r2, [sp, #4]
   21100:	ldr	r3, [r4]
   21104:	cmp	r2, r3
   21108:	bne	2111c <fts_children@@Base+0x1090>
   2110c:	add	sp, sp, #12
   21110:	pop	{r4, lr}
   21114:	add	sp, sp, #12
   21118:	bx	lr
   2111c:	bl	11780 <__stack_chk_fail@plt>
   21120:	andeq	r4, r3, r8, lsl #30
   21124:	push	{r4, lr}
   21128:	mov	r1, #0
   2112c:	bl	11a2c <setlocale@plt>
   21130:	subs	r4, r0, #0
   21134:	beq	21160 <fts_children@@Base+0x10d4>
   21138:	ldr	r1, [pc, #40]	; 21168 <fts_children@@Base+0x10dc>
   2113c:	bl	116e4 <strcmp@plt>
   21140:	cmp	r0, #0
   21144:	popeq	{r4, pc}
   21148:	mov	r0, r4
   2114c:	ldr	r1, [pc, #24]	; 2116c <fts_children@@Base+0x10e0>
   21150:	bl	116e4 <strcmp@plt>
   21154:	adds	r0, r0, #0
   21158:	movne	r0, #1
   2115c:	pop	{r4, pc}
   21160:	mov	r0, #1
   21164:	pop	{r4, pc}
   21168:	strdeq	r3, [r2], -r0
   2116c:	strdeq	r3, [r2], -r4
   21170:	mov	r3, #0
   21174:	mov	r2, #1
   21178:	str	r1, [r0]
   2117c:	str	r1, [r0, #4]
   21180:	str	r1, [r0, #8]
   21184:	str	r1, [r0, #12]
   21188:	str	r1, [r0, #16]
   2118c:	strb	r2, [r0, #28]
   21190:	str	r3, [r0, #20]
   21194:	str	r3, [r0, #24]
   21198:	bx	lr
   2119c:	ldrb	r0, [r0, #28]
   211a0:	bx	lr
   211a4:	ldrb	ip, [r0, #28]
   211a8:	ldr	r3, [r0, #20]
   211ac:	mov	r2, r0
   211b0:	eor	ip, ip, #1
   211b4:	add	r3, ip, r3
   211b8:	and	r3, r3, #3
   211bc:	ldr	r0, [r0, r3, lsl #2]
   211c0:	str	r1, [r2, r3, lsl #2]
   211c4:	ldr	r1, [r2, #24]
   211c8:	str	r3, [r2, #20]
   211cc:	cmp	r1, r3
   211d0:	addeq	ip, ip, r1
   211d4:	andeq	ip, ip, #3
   211d8:	mov	r3, #0
   211dc:	streq	ip, [r2, #24]
   211e0:	strb	r3, [r2, #28]
   211e4:	bx	lr
   211e8:	ldrb	r3, [r0, #28]
   211ec:	cmp	r3, #0
   211f0:	bne	21228 <fts_children@@Base+0x119c>
   211f4:	ldr	r3, [r0, #20]
   211f8:	ldr	r1, [r0, #16]
   211fc:	ldr	r2, [r0, r3, lsl #2]
   21200:	str	r1, [r0, r3, lsl #2]
   21204:	ldr	r1, [r0, #24]
   21208:	cmp	r3, r1
   2120c:	addne	r3, r3, #3
   21210:	moveq	r3, #1
   21214:	andne	r3, r3, #3
   21218:	strbeq	r3, [r0, #28]
   2121c:	strne	r3, [r0, #20]
   21220:	mov	r0, r2
   21224:	bx	lr
   21228:	push	{r4, lr}
   2122c:	bl	11b28 <abort@plt>
   21230:	push	{r4, lr}
   21234:	mov	r0, #14
   21238:	bl	11a44 <nl_langinfo@plt>
   2123c:	cmp	r0, #0
   21240:	beq	21258 <fts_children@@Base+0x11cc>
   21244:	ldrb	r2, [r0]
   21248:	ldr	r3, [pc, #16]	; 21260 <fts_children@@Base+0x11d4>
   2124c:	cmp	r2, #0
   21250:	moveq	r0, r3
   21254:	pop	{r4, pc}
   21258:	ldr	r0, [pc]	; 21260 <fts_children@@Base+0x11d4>
   2125c:	pop	{r4, pc}
   21260:	strdeq	r3, [r2], -ip
   21264:	push	{r2, r3}
   21268:	push	{r4, lr}
   2126c:	sub	sp, sp, #8
   21270:	ldr	r4, [pc, #68]	; 212bc <fts_children@@Base+0x1230>
   21274:	ldr	r2, [sp, #16]
   21278:	ands	r3, r2, #64	; 0x40
   2127c:	addne	r3, sp, #20
   21280:	ldr	ip, [r4]
   21284:	strne	r3, [sp]
   21288:	ldrne	r3, [sp, #20]
   2128c:	str	ip, [sp, #4]
   21290:	bl	11978 <openat64@plt>
   21294:	bl	212c0 <fts_children@@Base+0x1234>
   21298:	ldr	r2, [sp, #4]
   2129c:	ldr	r3, [r4]
   212a0:	cmp	r2, r3
   212a4:	bne	212b8 <fts_children@@Base+0x122c>
   212a8:	add	sp, sp, #8
   212ac:	pop	{r4, lr}
   212b0:	add	sp, sp, #8
   212b4:	bx	lr
   212b8:	bl	11780 <__stack_chk_fail@plt>
   212bc:	andeq	r4, r3, r8, lsl #30
   212c0:	cmp	r0, #2
   212c4:	push	{r4, r5, r6, r7, r8, lr}
   212c8:	mov	r4, r0
   212cc:	bls	212d8 <fts_children@@Base+0x124c>
   212d0:	mov	r0, r4
   212d4:	pop	{r4, r5, r6, r7, r8, pc}
   212d8:	bl	21450 <fts_children@@Base+0x13c4>
   212dc:	mov	r7, r0
   212e0:	bl	11984 <__errno_location@plt>
   212e4:	mov	r5, r0
   212e8:	mov	r0, r4
   212ec:	ldr	r6, [r5]
   212f0:	mov	r4, r7
   212f4:	bl	11b34 <close@plt>
   212f8:	str	r6, [r5]
   212fc:	mov	r0, r4
   21300:	pop	{r4, r5, r6, r7, r8, pc}
   21304:	push	{r1, r2, r3}
   21308:	push	{r4, r5, r6, r7, r8, lr}
   2130c:	sub	sp, sp, #12
   21310:	ldr	r4, [pc, #300]	; 21444 <fts_children@@Base+0x13b8>
   21314:	ldr	r3, [pc, #300]	; 21448 <fts_children@@Base+0x13bc>
   21318:	ldr	r1, [sp, #36]	; 0x24
   2131c:	ldr	r2, [r4]
   21320:	cmp	r1, r3
   21324:	add	r3, sp, #40	; 0x28
   21328:	str	r2, [sp, #4]
   2132c:	str	r3, [sp]
   21330:	bne	213fc <fts_children@@Base+0x1370>
   21334:	ldr	r6, [pc, #272]	; 2144c <fts_children@@Base+0x13c0>
   21338:	add	r3, sp, #44	; 0x2c
   2133c:	str	r3, [sp]
   21340:	ldr	r3, [r6]
   21344:	ldr	r7, [sp, #40]	; 0x28
   21348:	cmp	r3, #0
   2134c:	blt	21390 <fts_children@@Base+0x1304>
   21350:	mov	r2, r7
   21354:	mov	r8, r0
   21358:	bl	11a08 <fcntl64@plt>
   2135c:	subs	r5, r0, #0
   21360:	blt	2140c <fts_children@@Base+0x1380>
   21364:	mov	r3, #1
   21368:	str	r3, [r6]
   2136c:	ldr	r2, [sp, #4]
   21370:	ldr	r3, [r4]
   21374:	mov	r0, r5
   21378:	cmp	r2, r3
   2137c:	bne	21440 <fts_children@@Base+0x13b4>
   21380:	add	sp, sp, #12
   21384:	pop	{r4, r5, r6, r7, r8, lr}
   21388:	add	sp, sp, #12
   2138c:	bx	lr
   21390:	mov	r2, r7
   21394:	mov	r1, #0
   21398:	bl	21304 <fts_children@@Base+0x1278>
   2139c:	subs	r5, r0, #0
   213a0:	blt	2136c <fts_children@@Base+0x12e0>
   213a4:	ldr	r3, [r6]
   213a8:	cmn	r3, #1
   213ac:	bne	2136c <fts_children@@Base+0x12e0>
   213b0:	mov	r1, #1
   213b4:	mov	r0, r5
   213b8:	bl	11a08 <fcntl64@plt>
   213bc:	subs	r2, r0, #0
   213c0:	blt	213dc <fts_children@@Base+0x1350>
   213c4:	orr	r2, r2, #1
   213c8:	mov	r1, #2
   213cc:	mov	r0, r5
   213d0:	bl	11a08 <fcntl64@plt>
   213d4:	cmn	r0, #1
   213d8:	bne	2136c <fts_children@@Base+0x12e0>
   213dc:	bl	11984 <__errno_location@plt>
   213e0:	mov	r6, r0
   213e4:	mov	r0, r5
   213e8:	ldr	r7, [r6]
   213ec:	mvn	r5, #0
   213f0:	bl	11b34 <close@plt>
   213f4:	str	r7, [r6]
   213f8:	b	2136c <fts_children@@Base+0x12e0>
   213fc:	ldr	r2, [sp, #40]	; 0x28
   21400:	bl	11a08 <fcntl64@plt>
   21404:	mov	r5, r0
   21408:	b	2136c <fts_children@@Base+0x12e0>
   2140c:	bl	11984 <__errno_location@plt>
   21410:	ldr	r3, [r0]
   21414:	cmp	r3, #22
   21418:	bne	21364 <fts_children@@Base+0x12d8>
   2141c:	mov	r2, r7
   21420:	mov	r0, r8
   21424:	mov	r1, #0
   21428:	bl	21304 <fts_children@@Base+0x1278>
   2142c:	subs	r5, r0, #0
   21430:	mvnge	r3, #0
   21434:	strge	r3, [r6]
   21438:	bge	213b0 <fts_children@@Base+0x1324>
   2143c:	b	2136c <fts_children@@Base+0x12e0>
   21440:	bl	11780 <__stack_chk_fail@plt>
   21444:	andeq	r4, r3, r8, lsl #30
   21448:	andeq	r0, r0, r6, lsl #8
   2144c:	andeq	r5, r3, r4, ror #7
   21450:	mov	r2, #3
   21454:	mov	r1, #0
   21458:	b	21304 <fts_children@@Base+0x1278>
   2145c:	subs	r2, r1, #1
   21460:	bxeq	lr
   21464:	bcc	2163c <fts_children@@Base+0x15b0>
   21468:	cmp	r0, r1
   2146c:	bls	21620 <fts_children@@Base+0x1594>
   21470:	tst	r1, r2
   21474:	beq	2162c <fts_children@@Base+0x15a0>
   21478:	clz	r3, r0
   2147c:	clz	r2, r1
   21480:	sub	r3, r2, r3
   21484:	rsbs	r3, r3, #31
   21488:	addne	r3, r3, r3, lsl #1
   2148c:	mov	r2, #0
   21490:	addne	pc, pc, r3, lsl #2
   21494:	nop			; (mov r0, r0)
   21498:	cmp	r0, r1, lsl #31
   2149c:	adc	r2, r2, r2
   214a0:	subcs	r0, r0, r1, lsl #31
   214a4:	cmp	r0, r1, lsl #30
   214a8:	adc	r2, r2, r2
   214ac:	subcs	r0, r0, r1, lsl #30
   214b0:	cmp	r0, r1, lsl #29
   214b4:	adc	r2, r2, r2
   214b8:	subcs	r0, r0, r1, lsl #29
   214bc:	cmp	r0, r1, lsl #28
   214c0:	adc	r2, r2, r2
   214c4:	subcs	r0, r0, r1, lsl #28
   214c8:	cmp	r0, r1, lsl #27
   214cc:	adc	r2, r2, r2
   214d0:	subcs	r0, r0, r1, lsl #27
   214d4:	cmp	r0, r1, lsl #26
   214d8:	adc	r2, r2, r2
   214dc:	subcs	r0, r0, r1, lsl #26
   214e0:	cmp	r0, r1, lsl #25
   214e4:	adc	r2, r2, r2
   214e8:	subcs	r0, r0, r1, lsl #25
   214ec:	cmp	r0, r1, lsl #24
   214f0:	adc	r2, r2, r2
   214f4:	subcs	r0, r0, r1, lsl #24
   214f8:	cmp	r0, r1, lsl #23
   214fc:	adc	r2, r2, r2
   21500:	subcs	r0, r0, r1, lsl #23
   21504:	cmp	r0, r1, lsl #22
   21508:	adc	r2, r2, r2
   2150c:	subcs	r0, r0, r1, lsl #22
   21510:	cmp	r0, r1, lsl #21
   21514:	adc	r2, r2, r2
   21518:	subcs	r0, r0, r1, lsl #21
   2151c:	cmp	r0, r1, lsl #20
   21520:	adc	r2, r2, r2
   21524:	subcs	r0, r0, r1, lsl #20
   21528:	cmp	r0, r1, lsl #19
   2152c:	adc	r2, r2, r2
   21530:	subcs	r0, r0, r1, lsl #19
   21534:	cmp	r0, r1, lsl #18
   21538:	adc	r2, r2, r2
   2153c:	subcs	r0, r0, r1, lsl #18
   21540:	cmp	r0, r1, lsl #17
   21544:	adc	r2, r2, r2
   21548:	subcs	r0, r0, r1, lsl #17
   2154c:	cmp	r0, r1, lsl #16
   21550:	adc	r2, r2, r2
   21554:	subcs	r0, r0, r1, lsl #16
   21558:	cmp	r0, r1, lsl #15
   2155c:	adc	r2, r2, r2
   21560:	subcs	r0, r0, r1, lsl #15
   21564:	cmp	r0, r1, lsl #14
   21568:	adc	r2, r2, r2
   2156c:	subcs	r0, r0, r1, lsl #14
   21570:	cmp	r0, r1, lsl #13
   21574:	adc	r2, r2, r2
   21578:	subcs	r0, r0, r1, lsl #13
   2157c:	cmp	r0, r1, lsl #12
   21580:	adc	r2, r2, r2
   21584:	subcs	r0, r0, r1, lsl #12
   21588:	cmp	r0, r1, lsl #11
   2158c:	adc	r2, r2, r2
   21590:	subcs	r0, r0, r1, lsl #11
   21594:	cmp	r0, r1, lsl #10
   21598:	adc	r2, r2, r2
   2159c:	subcs	r0, r0, r1, lsl #10
   215a0:	cmp	r0, r1, lsl #9
   215a4:	adc	r2, r2, r2
   215a8:	subcs	r0, r0, r1, lsl #9
   215ac:	cmp	r0, r1, lsl #8
   215b0:	adc	r2, r2, r2
   215b4:	subcs	r0, r0, r1, lsl #8
   215b8:	cmp	r0, r1, lsl #7
   215bc:	adc	r2, r2, r2
   215c0:	subcs	r0, r0, r1, lsl #7
   215c4:	cmp	r0, r1, lsl #6
   215c8:	adc	r2, r2, r2
   215cc:	subcs	r0, r0, r1, lsl #6
   215d0:	cmp	r0, r1, lsl #5
   215d4:	adc	r2, r2, r2
   215d8:	subcs	r0, r0, r1, lsl #5
   215dc:	cmp	r0, r1, lsl #4
   215e0:	adc	r2, r2, r2
   215e4:	subcs	r0, r0, r1, lsl #4
   215e8:	cmp	r0, r1, lsl #3
   215ec:	adc	r2, r2, r2
   215f0:	subcs	r0, r0, r1, lsl #3
   215f4:	cmp	r0, r1, lsl #2
   215f8:	adc	r2, r2, r2
   215fc:	subcs	r0, r0, r1, lsl #2
   21600:	cmp	r0, r1, lsl #1
   21604:	adc	r2, r2, r2
   21608:	subcs	r0, r0, r1, lsl #1
   2160c:	cmp	r0, r1
   21610:	adc	r2, r2, r2
   21614:	subcs	r0, r0, r1
   21618:	mov	r0, r2
   2161c:	bx	lr
   21620:	moveq	r0, #1
   21624:	movne	r0, #0
   21628:	bx	lr
   2162c:	clz	r2, r1
   21630:	rsb	r2, r2, #31
   21634:	lsr	r0, r0, r2
   21638:	bx	lr
   2163c:	cmp	r0, #0
   21640:	mvnne	r0, #0
   21644:	b	21d78 <fts_children@@Base+0x1cec>
   21648:	cmp	r1, #0
   2164c:	beq	2163c <fts_children@@Base+0x15b0>
   21650:	push	{r0, r1, lr}
   21654:	bl	2145c <fts_children@@Base+0x13d0>
   21658:	pop	{r1, r2, lr}
   2165c:	mul	r3, r2, r0
   21660:	sub	r1, r1, r3
   21664:	bx	lr
   21668:	cmp	r1, #0
   2166c:	beq	21878 <fts_children@@Base+0x17ec>
   21670:	eor	ip, r0, r1
   21674:	rsbmi	r1, r1, #0
   21678:	subs	r2, r1, #1
   2167c:	beq	21844 <fts_children@@Base+0x17b8>
   21680:	movs	r3, r0
   21684:	rsbmi	r3, r0, #0
   21688:	cmp	r3, r1
   2168c:	bls	21850 <fts_children@@Base+0x17c4>
   21690:	tst	r1, r2
   21694:	beq	21860 <fts_children@@Base+0x17d4>
   21698:	clz	r2, r3
   2169c:	clz	r0, r1
   216a0:	sub	r2, r0, r2
   216a4:	rsbs	r2, r2, #31
   216a8:	addne	r2, r2, r2, lsl #1
   216ac:	mov	r0, #0
   216b0:	addne	pc, pc, r2, lsl #2
   216b4:	nop			; (mov r0, r0)
   216b8:	cmp	r3, r1, lsl #31
   216bc:	adc	r0, r0, r0
   216c0:	subcs	r3, r3, r1, lsl #31
   216c4:	cmp	r3, r1, lsl #30
   216c8:	adc	r0, r0, r0
   216cc:	subcs	r3, r3, r1, lsl #30
   216d0:	cmp	r3, r1, lsl #29
   216d4:	adc	r0, r0, r0
   216d8:	subcs	r3, r3, r1, lsl #29
   216dc:	cmp	r3, r1, lsl #28
   216e0:	adc	r0, r0, r0
   216e4:	subcs	r3, r3, r1, lsl #28
   216e8:	cmp	r3, r1, lsl #27
   216ec:	adc	r0, r0, r0
   216f0:	subcs	r3, r3, r1, lsl #27
   216f4:	cmp	r3, r1, lsl #26
   216f8:	adc	r0, r0, r0
   216fc:	subcs	r3, r3, r1, lsl #26
   21700:	cmp	r3, r1, lsl #25
   21704:	adc	r0, r0, r0
   21708:	subcs	r3, r3, r1, lsl #25
   2170c:	cmp	r3, r1, lsl #24
   21710:	adc	r0, r0, r0
   21714:	subcs	r3, r3, r1, lsl #24
   21718:	cmp	r3, r1, lsl #23
   2171c:	adc	r0, r0, r0
   21720:	subcs	r3, r3, r1, lsl #23
   21724:	cmp	r3, r1, lsl #22
   21728:	adc	r0, r0, r0
   2172c:	subcs	r3, r3, r1, lsl #22
   21730:	cmp	r3, r1, lsl #21
   21734:	adc	r0, r0, r0
   21738:	subcs	r3, r3, r1, lsl #21
   2173c:	cmp	r3, r1, lsl #20
   21740:	adc	r0, r0, r0
   21744:	subcs	r3, r3, r1, lsl #20
   21748:	cmp	r3, r1, lsl #19
   2174c:	adc	r0, r0, r0
   21750:	subcs	r3, r3, r1, lsl #19
   21754:	cmp	r3, r1, lsl #18
   21758:	adc	r0, r0, r0
   2175c:	subcs	r3, r3, r1, lsl #18
   21760:	cmp	r3, r1, lsl #17
   21764:	adc	r0, r0, r0
   21768:	subcs	r3, r3, r1, lsl #17
   2176c:	cmp	r3, r1, lsl #16
   21770:	adc	r0, r0, r0
   21774:	subcs	r3, r3, r1, lsl #16
   21778:	cmp	r3, r1, lsl #15
   2177c:	adc	r0, r0, r0
   21780:	subcs	r3, r3, r1, lsl #15
   21784:	cmp	r3, r1, lsl #14
   21788:	adc	r0, r0, r0
   2178c:	subcs	r3, r3, r1, lsl #14
   21790:	cmp	r3, r1, lsl #13
   21794:	adc	r0, r0, r0
   21798:	subcs	r3, r3, r1, lsl #13
   2179c:	cmp	r3, r1, lsl #12
   217a0:	adc	r0, r0, r0
   217a4:	subcs	r3, r3, r1, lsl #12
   217a8:	cmp	r3, r1, lsl #11
   217ac:	adc	r0, r0, r0
   217b0:	subcs	r3, r3, r1, lsl #11
   217b4:	cmp	r3, r1, lsl #10
   217b8:	adc	r0, r0, r0
   217bc:	subcs	r3, r3, r1, lsl #10
   217c0:	cmp	r3, r1, lsl #9
   217c4:	adc	r0, r0, r0
   217c8:	subcs	r3, r3, r1, lsl #9
   217cc:	cmp	r3, r1, lsl #8
   217d0:	adc	r0, r0, r0
   217d4:	subcs	r3, r3, r1, lsl #8
   217d8:	cmp	r3, r1, lsl #7
   217dc:	adc	r0, r0, r0
   217e0:	subcs	r3, r3, r1, lsl #7
   217e4:	cmp	r3, r1, lsl #6
   217e8:	adc	r0, r0, r0
   217ec:	subcs	r3, r3, r1, lsl #6
   217f0:	cmp	r3, r1, lsl #5
   217f4:	adc	r0, r0, r0
   217f8:	subcs	r3, r3, r1, lsl #5
   217fc:	cmp	r3, r1, lsl #4
   21800:	adc	r0, r0, r0
   21804:	subcs	r3, r3, r1, lsl #4
   21808:	cmp	r3, r1, lsl #3
   2180c:	adc	r0, r0, r0
   21810:	subcs	r3, r3, r1, lsl #3
   21814:	cmp	r3, r1, lsl #2
   21818:	adc	r0, r0, r0
   2181c:	subcs	r3, r3, r1, lsl #2
   21820:	cmp	r3, r1, lsl #1
   21824:	adc	r0, r0, r0
   21828:	subcs	r3, r3, r1, lsl #1
   2182c:	cmp	r3, r1
   21830:	adc	r0, r0, r0
   21834:	subcs	r3, r3, r1
   21838:	cmp	ip, #0
   2183c:	rsbmi	r0, r0, #0
   21840:	bx	lr
   21844:	teq	ip, r0
   21848:	rsbmi	r0, r0, #0
   2184c:	bx	lr
   21850:	movcc	r0, #0
   21854:	asreq	r0, ip, #31
   21858:	orreq	r0, r0, #1
   2185c:	bx	lr
   21860:	clz	r2, r1
   21864:	rsb	r2, r2, #31
   21868:	cmp	ip, #0
   2186c:	lsr	r0, r3, r2
   21870:	rsbmi	r0, r0, #0
   21874:	bx	lr
   21878:	cmp	r0, #0
   2187c:	mvngt	r0, #-2147483648	; 0x80000000
   21880:	movlt	r0, #-2147483648	; 0x80000000
   21884:	b	21d78 <fts_children@@Base+0x1cec>
   21888:	cmp	r1, #0
   2188c:	beq	21878 <fts_children@@Base+0x17ec>
   21890:	push	{r0, r1, lr}
   21894:	bl	21670 <fts_children@@Base+0x15e4>
   21898:	pop	{r1, r2, lr}
   2189c:	mul	r3, r2, r0
   218a0:	sub	r1, r1, r3
   218a4:	bx	lr
   218a8:	eor	r1, r1, #-2147483648	; 0x80000000
   218ac:	b	218b4 <fts_children@@Base+0x1828>
   218b0:	eor	r3, r3, #-2147483648	; 0x80000000
   218b4:	push	{r4, r5, lr}
   218b8:	lsl	r4, r1, #1
   218bc:	lsl	r5, r3, #1
   218c0:	teq	r4, r5
   218c4:	teqeq	r0, r2
   218c8:	orrsne	ip, r4, r0
   218cc:	orrsne	ip, r5, r2
   218d0:	mvnsne	ip, r4, asr #21
   218d4:	mvnsne	ip, r5, asr #21
   218d8:	beq	21ac4 <fts_children@@Base+0x1a38>
   218dc:	lsr	r4, r4, #21
   218e0:	rsbs	r5, r4, r5, lsr #21
   218e4:	rsblt	r5, r5, #0
   218e8:	ble	21908 <fts_children@@Base+0x187c>
   218ec:	add	r4, r4, r5
   218f0:	eor	r2, r0, r2
   218f4:	eor	r3, r1, r3
   218f8:	eor	r0, r2, r0
   218fc:	eor	r1, r3, r1
   21900:	eor	r2, r0, r2
   21904:	eor	r3, r1, r3
   21908:	cmp	r5, #54	; 0x36
   2190c:	pophi	{r4, r5, pc}
   21910:	tst	r1, #-2147483648	; 0x80000000
   21914:	lsl	r1, r1, #12
   21918:	mov	ip, #1048576	; 0x100000
   2191c:	orr	r1, ip, r1, lsr #12
   21920:	beq	2192c <fts_children@@Base+0x18a0>
   21924:	rsbs	r0, r0, #0
   21928:	rsc	r1, r1, #0
   2192c:	tst	r3, #-2147483648	; 0x80000000
   21930:	lsl	r3, r3, #12
   21934:	orr	r3, ip, r3, lsr #12
   21938:	beq	21944 <fts_children@@Base+0x18b8>
   2193c:	rsbs	r2, r2, #0
   21940:	rsc	r3, r3, #0
   21944:	teq	r4, r5
   21948:	beq	21aac <fts_children@@Base+0x1a20>
   2194c:	sub	r4, r4, #1
   21950:	rsbs	lr, r5, #32
   21954:	blt	21970 <fts_children@@Base+0x18e4>
   21958:	lsl	ip, r2, lr
   2195c:	adds	r0, r0, r2, lsr r5
   21960:	adc	r1, r1, #0
   21964:	adds	r0, r0, r3, lsl lr
   21968:	adcs	r1, r1, r3, asr r5
   2196c:	b	2198c <fts_children@@Base+0x1900>
   21970:	sub	r5, r5, #32
   21974:	add	lr, lr, #32
   21978:	cmp	r2, #1
   2197c:	lsl	ip, r3, lr
   21980:	orrcs	ip, ip, #2
   21984:	adds	r0, r0, r3, asr r5
   21988:	adcs	r1, r1, r3, asr #31
   2198c:	and	r5, r1, #-2147483648	; 0x80000000
   21990:	bpl	219a0 <fts_children@@Base+0x1914>
   21994:	rsbs	ip, ip, #0
   21998:	rscs	r0, r0, #0
   2199c:	rsc	r1, r1, #0
   219a0:	cmp	r1, #1048576	; 0x100000
   219a4:	bcc	219e4 <fts_children@@Base+0x1958>
   219a8:	cmp	r1, #2097152	; 0x200000
   219ac:	bcc	219cc <fts_children@@Base+0x1940>
   219b0:	lsrs	r1, r1, #1
   219b4:	rrxs	r0, r0
   219b8:	rrx	ip, ip
   219bc:	add	r4, r4, #1
   219c0:	lsl	r2, r4, #21
   219c4:	cmn	r2, #4194304	; 0x400000
   219c8:	bcs	21b24 <fts_children@@Base+0x1a98>
   219cc:	cmp	ip, #-2147483648	; 0x80000000
   219d0:	lsrseq	ip, r0, #1
   219d4:	adcs	r0, r0, #0
   219d8:	adc	r1, r1, r4, lsl #20
   219dc:	orr	r1, r1, r5
   219e0:	pop	{r4, r5, pc}
   219e4:	lsls	ip, ip, #1
   219e8:	adcs	r0, r0, r0
   219ec:	adc	r1, r1, r1
   219f0:	tst	r1, #1048576	; 0x100000
   219f4:	sub	r4, r4, #1
   219f8:	bne	219cc <fts_children@@Base+0x1940>
   219fc:	teq	r1, #0
   21a00:	moveq	r1, r0
   21a04:	moveq	r0, #0
   21a08:	clz	r3, r1
   21a0c:	addeq	r3, r3, #32
   21a10:	sub	r3, r3, #11
   21a14:	subs	r2, r3, #32
   21a18:	bge	21a3c <fts_children@@Base+0x19b0>
   21a1c:	adds	r2, r2, #12
   21a20:	ble	21a38 <fts_children@@Base+0x19ac>
   21a24:	add	ip, r2, #20
   21a28:	rsb	r2, r2, #12
   21a2c:	lsl	r0, r1, ip
   21a30:	lsr	r1, r1, r2
   21a34:	b	21a4c <fts_children@@Base+0x19c0>
   21a38:	add	r2, r2, #20
   21a3c:	rsble	ip, r2, #32
   21a40:	lsl	r1, r1, r2
   21a44:	orrle	r1, r1, r0, lsr ip
   21a48:	lslle	r0, r0, r2
   21a4c:	subs	r4, r4, r3
   21a50:	addge	r1, r1, r4, lsl #20
   21a54:	orrge	r1, r1, r5
   21a58:	popge	{r4, r5, pc}
   21a5c:	mvn	r4, r4
   21a60:	subs	r4, r4, #31
   21a64:	bge	21aa0 <fts_children@@Base+0x1a14>
   21a68:	adds	r4, r4, #12
   21a6c:	bgt	21a88 <fts_children@@Base+0x19fc>
   21a70:	add	r4, r4, #20
   21a74:	rsb	r2, r4, #32
   21a78:	lsr	r0, r0, r4
   21a7c:	orr	r0, r0, r1, lsl r2
   21a80:	orr	r1, r5, r1, lsr r4
   21a84:	pop	{r4, r5, pc}
   21a88:	rsb	r4, r4, #12
   21a8c:	rsb	r2, r4, #32
   21a90:	lsr	r0, r0, r2
   21a94:	orr	r0, r0, r1, lsl r4
   21a98:	mov	r1, r5
   21a9c:	pop	{r4, r5, pc}
   21aa0:	lsr	r0, r1, r4
   21aa4:	mov	r1, r5
   21aa8:	pop	{r4, r5, pc}
   21aac:	teq	r4, #0
   21ab0:	eor	r3, r3, #1048576	; 0x100000
   21ab4:	eoreq	r1, r1, #1048576	; 0x100000
   21ab8:	addeq	r4, r4, #1
   21abc:	subne	r5, r5, #1
   21ac0:	b	2194c <fts_children@@Base+0x18c0>
   21ac4:	mvns	ip, r4, asr #21
   21ac8:	mvnsne	ip, r5, asr #21
   21acc:	beq	21b34 <fts_children@@Base+0x1aa8>
   21ad0:	teq	r4, r5
   21ad4:	teqeq	r0, r2
   21ad8:	beq	21aec <fts_children@@Base+0x1a60>
   21adc:	orrs	ip, r4, r0
   21ae0:	moveq	r1, r3
   21ae4:	moveq	r0, r2
   21ae8:	pop	{r4, r5, pc}
   21aec:	teq	r1, r3
   21af0:	movne	r1, #0
   21af4:	movne	r0, #0
   21af8:	popne	{r4, r5, pc}
   21afc:	lsrs	ip, r4, #21
   21b00:	bne	21b14 <fts_children@@Base+0x1a88>
   21b04:	lsls	r0, r0, #1
   21b08:	adcs	r1, r1, r1
   21b0c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   21b10:	pop	{r4, r5, pc}
   21b14:	adds	r4, r4, #4194304	; 0x400000
   21b18:	addcc	r1, r1, #1048576	; 0x100000
   21b1c:	popcc	{r4, r5, pc}
   21b20:	and	r5, r1, #-2147483648	; 0x80000000
   21b24:	orr	r1, r5, #2130706432	; 0x7f000000
   21b28:	orr	r1, r1, #15728640	; 0xf00000
   21b2c:	mov	r0, #0
   21b30:	pop	{r4, r5, pc}
   21b34:	mvns	ip, r4, asr #21
   21b38:	movne	r1, r3
   21b3c:	movne	r0, r2
   21b40:	mvnseq	ip, r5, asr #21
   21b44:	movne	r3, r1
   21b48:	movne	r2, r0
   21b4c:	orrs	r4, r0, r1, lsl #12
   21b50:	orrseq	r5, r2, r3, lsl #12
   21b54:	teqeq	r1, r3
   21b58:	orrne	r1, r1, #524288	; 0x80000
   21b5c:	pop	{r4, r5, pc}
   21b60:	teq	r0, #0
   21b64:	moveq	r1, #0
   21b68:	bxeq	lr
   21b6c:	push	{r4, r5, lr}
   21b70:	mov	r4, #1024	; 0x400
   21b74:	add	r4, r4, #50	; 0x32
   21b78:	mov	r5, #0
   21b7c:	mov	r1, #0
   21b80:	b	219fc <fts_children@@Base+0x1970>
   21b84:	teq	r0, #0
   21b88:	moveq	r1, #0
   21b8c:	bxeq	lr
   21b90:	push	{r4, r5, lr}
   21b94:	mov	r4, #1024	; 0x400
   21b98:	add	r4, r4, #50	; 0x32
   21b9c:	ands	r5, r0, #-2147483648	; 0x80000000
   21ba0:	rsbmi	r0, r0, #0
   21ba4:	mov	r1, #0
   21ba8:	b	219fc <fts_children@@Base+0x1970>
   21bac:	lsls	r2, r0, #1
   21bb0:	asr	r1, r2, #3
   21bb4:	rrx	r1, r1
   21bb8:	lsl	r0, r2, #28
   21bbc:	andsne	r3, r2, #-16777216	; 0xff000000
   21bc0:	teqne	r3, #-16777216	; 0xff000000
   21bc4:	eorne	r1, r1, #939524096	; 0x38000000
   21bc8:	bxne	lr
   21bcc:	bics	r2, r2, #-16777216	; 0xff000000
   21bd0:	bxeq	lr
   21bd4:	teq	r3, #-16777216	; 0xff000000
   21bd8:	orreq	r1, r1, #524288	; 0x80000
   21bdc:	bxeq	lr
   21be0:	push	{r4, r5, lr}
   21be4:	mov	r4, #896	; 0x380
   21be8:	and	r5, r1, #-2147483648	; 0x80000000
   21bec:	bic	r1, r1, #-2147483648	; 0x80000000
   21bf0:	b	219fc <fts_children@@Base+0x1970>
   21bf4:	orrs	r2, r0, r1
   21bf8:	bxeq	lr
   21bfc:	push	{r4, r5, lr}
   21c00:	mov	r5, #0
   21c04:	b	21c24 <fts_children@@Base+0x1b98>
   21c08:	orrs	r2, r0, r1
   21c0c:	bxeq	lr
   21c10:	push	{r4, r5, lr}
   21c14:	ands	r5, r1, #-2147483648	; 0x80000000
   21c18:	bpl	21c24 <fts_children@@Base+0x1b98>
   21c1c:	rsbs	r0, r0, #0
   21c20:	rsc	r1, r1, #0
   21c24:	mov	r4, #1024	; 0x400
   21c28:	add	r4, r4, #50	; 0x32
   21c2c:	lsrs	ip, r1, #22
   21c30:	beq	219a0 <fts_children@@Base+0x1914>
   21c34:	mov	r2, #3
   21c38:	lsrs	ip, ip, #3
   21c3c:	addne	r2, r2, #3
   21c40:	lsrs	ip, ip, #3
   21c44:	addne	r2, r2, #3
   21c48:	add	r2, r2, ip, lsr #3
   21c4c:	rsb	r3, r2, #32
   21c50:	lsl	ip, r0, r3
   21c54:	lsr	r0, r0, r2
   21c58:	orr	r0, r0, r1, lsl r3
   21c5c:	lsr	r1, r1, r2
   21c60:	add	r4, r4, r2
   21c64:	b	219a0 <fts_children@@Base+0x1914>
   21c68:	cmp	r3, #0
   21c6c:	cmpeq	r2, #0
   21c70:	bne	21c94 <fts_children@@Base+0x1c08>
   21c74:	cmp	r1, #0
   21c78:	movlt	r1, #-2147483648	; 0x80000000
   21c7c:	movlt	r0, #0
   21c80:	blt	21c90 <fts_children@@Base+0x1c04>
   21c84:	cmpeq	r0, #0
   21c88:	mvnne	r1, #-2147483648	; 0x80000000
   21c8c:	mvnne	r0, #0
   21c90:	b	21d78 <fts_children@@Base+0x1cec>
   21c94:	sub	sp, sp, #8
   21c98:	push	{sp, lr}
   21c9c:	cmp	r1, #0
   21ca0:	blt	21cc0 <fts_children@@Base+0x1c34>
   21ca4:	cmp	r3, #0
   21ca8:	blt	21cf4 <fts_children@@Base+0x1c68>
   21cac:	bl	21dc8 <fts_children@@Base+0x1d3c>
   21cb0:	ldr	lr, [sp, #4]
   21cb4:	add	sp, sp, #8
   21cb8:	pop	{r2, r3}
   21cbc:	bx	lr
   21cc0:	rsbs	r0, r0, #0
   21cc4:	sbc	r1, r1, r1, lsl #1
   21cc8:	cmp	r3, #0
   21ccc:	blt	21d18 <fts_children@@Base+0x1c8c>
   21cd0:	bl	21dc8 <fts_children@@Base+0x1d3c>
   21cd4:	ldr	lr, [sp, #4]
   21cd8:	add	sp, sp, #8
   21cdc:	pop	{r2, r3}
   21ce0:	rsbs	r0, r0, #0
   21ce4:	sbc	r1, r1, r1, lsl #1
   21ce8:	rsbs	r2, r2, #0
   21cec:	sbc	r3, r3, r3, lsl #1
   21cf0:	bx	lr
   21cf4:	rsbs	r2, r2, #0
   21cf8:	sbc	r3, r3, r3, lsl #1
   21cfc:	bl	21dc8 <fts_children@@Base+0x1d3c>
   21d00:	ldr	lr, [sp, #4]
   21d04:	add	sp, sp, #8
   21d08:	pop	{r2, r3}
   21d0c:	rsbs	r0, r0, #0
   21d10:	sbc	r1, r1, r1, lsl #1
   21d14:	bx	lr
   21d18:	rsbs	r2, r2, #0
   21d1c:	sbc	r3, r3, r3, lsl #1
   21d20:	bl	21dc8 <fts_children@@Base+0x1d3c>
   21d24:	ldr	lr, [sp, #4]
   21d28:	add	sp, sp, #8
   21d2c:	pop	{r2, r3}
   21d30:	rsbs	r2, r2, #0
   21d34:	sbc	r3, r3, r3, lsl #1
   21d38:	bx	lr
   21d3c:	cmp	r3, #0
   21d40:	cmpeq	r2, #0
   21d44:	bne	21d5c <fts_children@@Base+0x1cd0>
   21d48:	cmp	r1, #0
   21d4c:	cmpeq	r0, #0
   21d50:	mvnne	r1, #0
   21d54:	mvnne	r0, #0
   21d58:	b	21d78 <fts_children@@Base+0x1cec>
   21d5c:	sub	sp, sp, #8
   21d60:	push	{sp, lr}
   21d64:	bl	21dc8 <fts_children@@Base+0x1d3c>
   21d68:	ldr	lr, [sp, #4]
   21d6c:	add	sp, sp, #8
   21d70:	pop	{r2, r3}
   21d74:	bx	lr
   21d78:	push	{r1, lr}
   21d7c:	mov	r0, #8
   21d80:	bl	116c0 <raise@plt>
   21d84:	pop	{r1, pc}
   21d88:	vmov	d6, r0, r1
   21d8c:	vldr	d7, [pc, #36]	; 21db8 <fts_children@@Base+0x1d2c>
   21d90:	vldr	d5, [pc, #40]	; 21dc0 <fts_children@@Base+0x1d34>
   21d94:	vmul.f64	d7, d6, d7
   21d98:	vcvt.u32.f64	s14, d7
   21d9c:	vcvt.f64.u32	d4, s14
   21da0:	vmov	r1, s14
   21da4:	vmls.f64	d6, d4, d5
   21da8:	vcvt.u32.f64	s15, d6
   21dac:	vmov	r0, s15
   21db0:	bx	lr
   21db4:	nop			; (mov r0, r0)
   21db8:	andeq	r0, r0, r0
   21dbc:	ldclcc	0, cr0, [r0]
   21dc0:	andeq	r0, r0, r0
   21dc4:	mvnsmi	r0, r0
   21dc8:	cmp	r1, r3
   21dcc:	cmpeq	r0, r2
   21dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21dd4:	mov	r4, r0
   21dd8:	movcc	r0, #0
   21ddc:	mov	r5, r1
   21de0:	ldr	lr, [sp, #36]	; 0x24
   21de4:	movcc	r1, r0
   21de8:	bcc	21ee4 <fts_children@@Base+0x1e58>
   21dec:	cmp	r3, #0
   21df0:	clzeq	ip, r2
   21df4:	clzne	ip, r3
   21df8:	addeq	ip, ip, #32
   21dfc:	cmp	r5, #0
   21e00:	clzeq	r1, r4
   21e04:	addeq	r1, r1, #32
   21e08:	clzne	r1, r5
   21e0c:	sub	ip, ip, r1
   21e10:	sub	sl, ip, #32
   21e14:	lsl	r9, r3, ip
   21e18:	rsb	fp, ip, #32
   21e1c:	orr	r9, r9, r2, lsl sl
   21e20:	orr	r9, r9, r2, lsr fp
   21e24:	lsl	r8, r2, ip
   21e28:	cmp	r5, r9
   21e2c:	cmpeq	r4, r8
   21e30:	movcc	r0, #0
   21e34:	movcc	r1, r0
   21e38:	bcc	21e54 <fts_children@@Base+0x1dc8>
   21e3c:	mov	r0, #1
   21e40:	subs	r4, r4, r8
   21e44:	lsl	r1, r0, sl
   21e48:	orr	r1, r1, r0, lsr fp
   21e4c:	lsl	r0, r0, ip
   21e50:	sbc	r5, r5, r9
   21e54:	cmp	ip, #0
   21e58:	beq	21ee4 <fts_children@@Base+0x1e58>
   21e5c:	lsr	r6, r8, #1
   21e60:	orr	r6, r6, r9, lsl #31
   21e64:	lsr	r7, r9, #1
   21e68:	mov	r2, ip
   21e6c:	b	21e90 <fts_children@@Base+0x1e04>
   21e70:	subs	r3, r4, r6
   21e74:	sbc	r8, r5, r7
   21e78:	adds	r3, r3, r3
   21e7c:	adc	r8, r8, r8
   21e80:	adds	r4, r3, #1
   21e84:	adc	r5, r8, #0
   21e88:	subs	r2, r2, #1
   21e8c:	beq	21eac <fts_children@@Base+0x1e20>
   21e90:	cmp	r5, r7
   21e94:	cmpeq	r4, r6
   21e98:	bcs	21e70 <fts_children@@Base+0x1de4>
   21e9c:	adds	r4, r4, r4
   21ea0:	adc	r5, r5, r5
   21ea4:	subs	r2, r2, #1
   21ea8:	bne	21e90 <fts_children@@Base+0x1e04>
   21eac:	lsr	r3, r4, ip
   21eb0:	orr	r3, r3, r5, lsl fp
   21eb4:	lsr	r2, r5, ip
   21eb8:	orr	r3, r3, r5, lsr sl
   21ebc:	adds	r0, r0, r4
   21ec0:	mov	r4, r3
   21ec4:	lsl	r3, r2, ip
   21ec8:	orr	r3, r3, r4, lsl sl
   21ecc:	lsl	ip, r4, ip
   21ed0:	orr	r3, r3, r4, lsr fp
   21ed4:	adc	r1, r1, r5
   21ed8:	subs	r0, r0, ip
   21edc:	mov	r5, r2
   21ee0:	sbc	r1, r1, r3
   21ee4:	cmp	lr, #0
   21ee8:	strdne	r4, [lr]
   21eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ef0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21ef4:	mov	r7, r0
   21ef8:	ldr	r6, [pc, #72]	; 21f48 <fts_children@@Base+0x1ebc>
   21efc:	ldr	r5, [pc, #72]	; 21f4c <fts_children@@Base+0x1ec0>
   21f00:	add	r6, pc, r6
   21f04:	add	r5, pc, r5
   21f08:	sub	r6, r6, r5
   21f0c:	mov	r8, r1
   21f10:	mov	r9, r2
   21f14:	bl	11670 <fstatfs64@plt-0x20>
   21f18:	asrs	r6, r6, #2
   21f1c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   21f20:	mov	r4, #0
   21f24:	add	r4, r4, #1
   21f28:	ldr	r3, [r5], #4
   21f2c:	mov	r2, r9
   21f30:	mov	r1, r8
   21f34:	mov	r0, r7
   21f38:	blx	r3
   21f3c:	cmp	r6, r4
   21f40:	bne	21f24 <fts_children@@Base+0x1e98>
   21f44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21f48:	strdeq	r2, [r1], -ip
   21f4c:	strdeq	r2, [r1], -r4
   21f50:	bx	lr
   21f54:	ldr	r3, [pc, #12]	; 21f68 <fts_children@@Base+0x1edc>
   21f58:	mov	r1, #0
   21f5c:	add	r3, pc, r3
   21f60:	ldr	r2, [r3]
   21f64:	b	1199c <__cxa_atexit@plt>
   21f68:	andeq	r3, r1, ip, asr #4

Disassembly of section .fini:

00021f6c <.fini>:
   21f6c:	push	{r3, lr}
   21f70:	pop	{r3, pc}
