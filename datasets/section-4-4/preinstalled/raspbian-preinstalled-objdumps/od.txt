
raspbian-preinstalled/od:     file format elf32-littlearm


Disassembly of section .init:

00010ef8 <.init>:
   10ef8:	push	{r3, lr}
   10efc:	bl	1293c <__assert_fail@plt+0x1748>
   10f00:	pop	{r3, pc}

Disassembly of section .plt:

00010f04 <calloc@plt-0x14>:
   10f04:	push	{lr}		; (str lr, [sp, #-4]!)
   10f08:	ldr	lr, [pc, #4]	; 10f14 <calloc@plt-0x4>
   10f0c:	add	lr, pc, lr
   10f10:	ldr	pc, [lr, #8]!
   10f14:	andeq	sp, r1, ip, ror #1

00010f18 <calloc@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #118784	; 0x1d000
   10f20:	ldr	pc, [ip, #236]!	; 0xec

00010f24 <fputs_unlocked@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #118784	; 0x1d000
   10f2c:	ldr	pc, [ip, #228]!	; 0xe4

00010f30 <raise@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #118784	; 0x1d000
   10f38:	ldr	pc, [ip, #220]!	; 0xdc

00010f3c <strcmp@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #118784	; 0x1d000
   10f44:	ldr	pc, [ip, #212]!	; 0xd4

00010f48 <fflush@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #118784	; 0x1d000
   10f50:	ldr	pc, [ip, #204]!	; 0xcc

00010f54 <free@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #118784	; 0x1d000
   10f5c:	ldr	pc, [ip, #196]!	; 0xc4

00010f60 <ferror@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #118784	; 0x1d000
   10f68:	ldr	pc, [ip, #188]!	; 0xbc

00010f6c <_exit@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #118784	; 0x1d000
   10f74:	ldr	pc, [ip, #180]!	; 0xb4

00010f78 <memcpy@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #118784	; 0x1d000
   10f80:	ldr	pc, [ip, #172]!	; 0xac

00010f84 <__strtoull_internal@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #118784	; 0x1d000
   10f8c:	ldr	pc, [ip, #164]!	; 0xa4

00010f90 <mbsinit@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #118784	; 0x1d000
   10f98:	ldr	pc, [ip, #156]!	; 0x9c

00010f9c <strtold@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #118784	; 0x1d000
   10fa4:	ldr	pc, [ip, #148]!	; 0x94

00010fa8 <fwrite_unlocked@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #118784	; 0x1d000
   10fb0:	ldr	pc, [ip, #140]!	; 0x8c

00010fb4 <memcmp@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #118784	; 0x1d000
   10fbc:	ldr	pc, [ip, #132]!	; 0x84

00010fc0 <dcgettext@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #118784	; 0x1d000
   10fc8:	ldr	pc, [ip, #124]!	; 0x7c

00010fcc <__stack_chk_fail@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #118784	; 0x1d000
   10fd4:	ldr	pc, [ip, #116]!	; 0x74

00010fd8 <realloc@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #118784	; 0x1d000
   10fe0:	ldr	pc, [ip, #108]!	; 0x6c

00010fe4 <textdomain@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #118784	; 0x1d000
   10fec:	ldr	pc, [ip, #100]!	; 0x64

00010ff0 <iswprint@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #118784	; 0x1d000
   10ff8:	ldr	pc, [ip, #92]!	; 0x5c

00010ffc <__fxstat64@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #118784	; 0x1d000
   11004:	ldr	pc, [ip, #84]!	; 0x54

00011008 <fwrite@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #118784	; 0x1d000
   11010:	ldr	pc, [ip, #76]!	; 0x4c

00011014 <lseek64@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #118784	; 0x1d000
   1101c:	ldr	pc, [ip, #68]!	; 0x44

00011020 <__ctype_get_mb_cur_max@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #118784	; 0x1d000
   11028:	ldr	pc, [ip, #60]!	; 0x3c

0001102c <__fpending@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #118784	; 0x1d000
   11034:	ldr	pc, [ip, #52]!	; 0x34

00011038 <mbrtowc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #118784	; 0x1d000
   11040:	ldr	pc, [ip, #44]!	; 0x2c

00011044 <error@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #118784	; 0x1d000
   1104c:	ldr	pc, [ip, #36]!	; 0x24

00011050 <strtof@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #118784	; 0x1d000
   11058:	ldr	pc, [ip, #28]!

0001105c <puts@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #118784	; 0x1d000
   11064:	ldr	pc, [ip, #20]!

00011068 <malloc@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #118784	; 0x1d000
   11070:	ldr	pc, [ip, #12]!

00011074 <__libc_start_main@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #118784	; 0x1d000
   1107c:	ldr	pc, [ip, #4]!

00011080 <__freading@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #28, 20	; 0x1c000
   11088:	ldr	pc, [ip, #4092]!	; 0xffc

0001108c <__gmon_start__@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #28, 20	; 0x1c000
   11094:	ldr	pc, [ip, #4084]!	; 0xff4

00011098 <getopt_long@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #28, 20	; 0x1c000
   110a0:	ldr	pc, [ip, #4076]!	; 0xfec

000110a4 <__ctype_b_loc@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #28, 20	; 0x1c000
   110ac:	ldr	pc, [ip, #4068]!	; 0xfe4

000110b0 <exit@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #28, 20	; 0x1c000
   110b8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110bc <strlen@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #28, 20	; 0x1c000
   110c4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110c8 <strchr@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #28, 20	; 0x1c000
   110d0:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d4 <__errno_location@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #28, 20	; 0x1c000
   110dc:	ldr	pc, [ip, #4036]!	; 0xfc4

000110e0 <__sprintf_chk@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #28, 20	; 0x1c000
   110e8:	ldr	pc, [ip, #4028]!	; 0xfbc

000110ec <__cxa_atexit@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #28, 20	; 0x1c000
   110f4:	ldr	pc, [ip, #4020]!	; 0xfb4

000110f8 <setvbuf@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #28, 20	; 0x1c000
   11100:	ldr	pc, [ip, #4012]!	; 0xfac

00011104 <memset@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #28, 20	; 0x1c000
   1110c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011110 <fgetc@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #28, 20	; 0x1c000
   11118:	ldr	pc, [ip, #3996]!	; 0xf9c

0001111c <__printf_chk@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #28, 20	; 0x1c000
   11124:	ldr	pc, [ip, #3988]!	; 0xf94

00011128 <strtod@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #28, 20	; 0x1c000
   11130:	ldr	pc, [ip, #3980]!	; 0xf8c

00011134 <fileno@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #28, 20	; 0x1c000
   1113c:	ldr	pc, [ip, #3972]!	; 0xf84

00011140 <__fprintf_chk@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #28, 20	; 0x1c000
   11148:	ldr	pc, [ip, #3964]!	; 0xf7c

0001114c <fclose@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #28, 20	; 0x1c000
   11154:	ldr	pc, [ip, #3956]!	; 0xf74

00011158 <fseeko64@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #28, 20	; 0x1c000
   11160:	ldr	pc, [ip, #3948]!	; 0xf6c

00011164 <__overflow@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #28, 20	; 0x1c000
   1116c:	ldr	pc, [ip, #3940]!	; 0xf64

00011170 <setlocale@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #28, 20	; 0x1c000
   11178:	ldr	pc, [ip, #3932]!	; 0xf5c

0001117c <strrchr@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #28, 20	; 0x1c000
   11184:	ldr	pc, [ip, #3924]!	; 0xf54

00011188 <nl_langinfo@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #28, 20	; 0x1c000
   11190:	ldr	pc, [ip, #3916]!	; 0xf4c

00011194 <__fread_unlocked_chk@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #28, 20	; 0x1c000
   1119c:	ldr	pc, [ip, #3908]!	; 0xf44

000111a0 <localeconv@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #28, 20	; 0x1c000
   111a8:	ldr	pc, [ip, #3900]!	; 0xf3c

000111ac <fopen64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #28, 20	; 0x1c000
   111b4:	ldr	pc, [ip, #3892]!	; 0xf34

000111b8 <bindtextdomain@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #28, 20	; 0x1c000
   111c0:	ldr	pc, [ip, #3884]!	; 0xf2c

000111c4 <fread_unlocked@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #28, 20	; 0x1c000
   111cc:	ldr	pc, [ip, #3876]!	; 0xf24

000111d0 <strncmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #28, 20	; 0x1c000
   111d8:	ldr	pc, [ip, #3868]!	; 0xf1c

000111dc <abort@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #28, 20	; 0x1c000
   111e4:	ldr	pc, [ip, #3860]!	; 0xf14

000111e8 <__snprintf_chk@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #28, 20	; 0x1c000
   111f0:	ldr	pc, [ip, #3852]!	; 0xf0c

000111f4 <__assert_fail@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #28, 20	; 0x1c000
   111fc:	ldr	pc, [ip, #3844]!	; 0xf04

Disassembly of section .text:

00011200 <.text>:
   11200:	ldr	r3, [pc, #3992]	; 121a0 <__assert_fail@plt+0xfac>
   11204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11208:	sub	sp, sp, #92	; 0x5c
   1120c:	ldr	r3, [r3]
   11210:	mov	r5, r0
   11214:	ldr	r0, [r1]
   11218:	str	r3, [sp, #84]	; 0x54
   1121c:	mov	sl, r1
   11220:	bl	157c8 <__assert_fail@plt+0x45d4>
   11224:	ldr	r1, [pc, #3960]	; 121a4 <__assert_fail@plt+0xfb0>
   11228:	mov	r0, #6
   1122c:	bl	11170 <setlocale@plt>
   11230:	ldr	r1, [pc, #3952]	; 121a8 <__assert_fail@plt+0xfb4>
   11234:	ldr	r0, [pc, #3952]	; 121ac <__assert_fail@plt+0xfb8>
   11238:	bl	111b8 <bindtextdomain@plt>
   1123c:	ldr	r0, [pc, #3944]	; 121ac <__assert_fail@plt+0xfb8>
   11240:	bl	10fe4 <textdomain@plt>
   11244:	ldr	r0, [pc, #3940]	; 121b0 <__assert_fail@plt+0xfbc>
   11248:	bl	1b4a0 <__assert_fail@plt+0xa2ac>
   1124c:	ldr	r3, [pc, #3936]	; 121b4 <__assert_fail@plt+0xfc0>
   11250:	mov	r1, #0
   11254:	add	r2, r3, #36	; 0x24
   11258:	str	r1, [r3, #4]!
   1125c:	cmp	r2, r3
   11260:	bne	11258 <__assert_fail@plt+0x64>
   11264:	ldr	fp, [pc, #3916]	; 121b8 <__assert_fail@plt+0xfc4>
   11268:	mov	r0, #4
   1126c:	mov	r3, fp
   11270:	mov	r6, #1
   11274:	mov	r7, #2
   11278:	mov	r2, #0
   1127c:	add	r1, fp, #128	; 0x80
   11280:	str	r0, [fp, #76]	; 0x4c
   11284:	mov	r0, #5
   11288:	strd	r6, [fp, #64]	; 0x40
   1128c:	str	r0, [r3, #92]!	; 0x5c
   11290:	str	r2, [r3, #4]!
   11294:	cmp	r1, r3
   11298:	bne	11290 <__assert_fail@plt+0x9c>
   1129c:	ldr	r4, [pc, #3864]	; 121bc <__assert_fail@plt+0xfc8>
   112a0:	str	r2, [fp, #36]	; 0x24
   112a4:	add	r3, r4, #244	; 0xf4
   112a8:	str	r3, [sp, #16]
   112ac:	add	r3, sp, #56	; 0x38
   112b0:	str	r3, [sp, #12]
   112b4:	mov	r3, #6
   112b8:	str	r2, [fp, #56]	; 0x38
   112bc:	str	r2, [fp, #40]	; 0x28
   112c0:	strb	r2, [fp, #26]
   112c4:	str	r3, [fp, #112]	; 0x70
   112c8:	ldr	r2, [pc, #3824]	; 121c0 <__assert_fail@plt+0xfcc>
   112cc:	mov	r3, #7
   112d0:	mov	r8, #1
   112d4:	mov	r6, #0
   112d8:	str	r3, [fp, #128]	; 0x80
   112dc:	str	r3, [fp]
   112e0:	mov	r3, #8
   112e4:	str	r6, [sp, #32]
   112e8:	str	r2, [fp, #44]	; 0x2c
   112ec:	str	r3, [fp, #4]
   112f0:	ldr	r3, [sp, #12]
   112f4:	mvn	ip, #0
   112f8:	str	r3, [sp]
   112fc:	ldr	r2, [pc, #3776]	; 121c4 <__assert_fail@plt+0xfd0>
   11300:	mov	r3, r4
   11304:	mov	r1, sl
   11308:	mov	r0, r5
   1130c:	str	ip, [sp, #56]	; 0x38
   11310:	bl	11098 <getopt_long@plt>
   11314:	cmn	r0, #1
   11318:	beq	11ad8 <__assert_fail@plt+0x8e4>
   1131c:	add	r0, r0, #3
   11320:	cmp	r0, #260	; 0x104
   11324:	ldrls	pc, [pc, r0, lsl #2]
   11328:	b	12440 <__assert_fail@plt+0x124c>
   1132c:	muleq	r1, r0, sl
   11330:	andeq	r2, r1, r8, ror r4
   11334:	andeq	r2, r1, r0, asr #8
   11338:	andeq	r2, r1, r0, asr #8
   1133c:	andeq	r2, r1, r0, asr #8
   11340:	andeq	r2, r1, r0, asr #8
   11344:	andeq	r2, r1, r0, asr #8
   11348:	andeq	r2, r1, r0, asr #8
   1134c:	andeq	r2, r1, r0, asr #8
   11350:	andeq	r2, r1, r0, asr #8
   11354:	andeq	r2, r1, r0, asr #8
   11358:	andeq	r2, r1, r0, asr #8
   1135c:	andeq	r2, r1, r0, asr #8
   11360:	andeq	r2, r1, r0, asr #8
   11364:	andeq	r2, r1, r0, asr #8
   11368:	andeq	r2, r1, r0, asr #8
   1136c:	andeq	r2, r1, r0, asr #8
   11370:	andeq	r2, r1, r0, asr #8
   11374:	andeq	r2, r1, r0, asr #8
   11378:	andeq	r2, r1, r0, asr #8
   1137c:	andeq	r2, r1, r0, asr #8
   11380:	andeq	r2, r1, r0, asr #8
   11384:	andeq	r2, r1, r0, asr #8
   11388:	andeq	r2, r1, r0, asr #8
   1138c:	andeq	r2, r1, r0, asr #8
   11390:	andeq	r2, r1, r0, asr #8
   11394:	andeq	r2, r1, r0, asr #8
   11398:	andeq	r2, r1, r0, asr #8
   1139c:	andeq	r2, r1, r0, asr #8
   113a0:	andeq	r2, r1, r0, asr #8
   113a4:	andeq	r2, r1, r0, asr #8
   113a8:	andeq	r2, r1, r0, asr #8
   113ac:	andeq	r2, r1, r0, asr #8
   113b0:	andeq	r2, r1, r0, asr #8
   113b4:	andeq	r2, r1, r0, asr #8
   113b8:	andeq	r2, r1, r0, asr #8
   113bc:	andeq	r2, r1, r0, asr #8
   113c0:	andeq	r2, r1, r0, asr #8
   113c4:	andeq	r2, r1, r0, asr #8
   113c8:	andeq	r2, r1, r0, asr #8
   113cc:	andeq	r2, r1, r0, asr #8
   113d0:	andeq	r2, r1, r0, asr #8
   113d4:	andeq	r2, r1, r0, asr #8
   113d8:	andeq	r2, r1, r0, asr #8
   113dc:	andeq	r2, r1, r0, asr #8
   113e0:	andeq	r2, r1, r0, asr #8
   113e4:	andeq	r2, r1, r0, asr #8
   113e8:	andeq	r2, r1, r0, asr #8
   113ec:	andeq	r2, r1, r0, asr #8
   113f0:	andeq	r2, r1, r0, asr #8
   113f4:	andeq	r2, r1, r0, asr #8
   113f8:	andeq	r2, r1, r0, asr #8
   113fc:	andeq	r2, r1, r0, asr #8
   11400:	andeq	r2, r1, r0, asr #8
   11404:	andeq	r2, r1, r0, asr #8
   11408:	andeq	r2, r1, r0, asr #8
   1140c:	andeq	r2, r1, r0, asr #8
   11410:	andeq	r2, r1, r0, asr #8
   11414:	andeq	r2, r1, r0, asr #8
   11418:	andeq	r2, r1, r0, asr #8
   1141c:	andeq	r2, r1, r0, asr #8
   11420:	andeq	r2, r1, r0, asr #8
   11424:	andeq	r2, r1, r0, asr #8
   11428:	andeq	r2, r1, r0, asr #8
   1142c:	andeq	r2, r1, r0, asr #8
   11430:	andeq	r2, r1, r0, asr #8
   11434:	andeq	r2, r1, r0, asr #8
   11438:	andeq	r2, r1, r0, asr #8
   1143c:	andeq	r1, r1, r0, lsr #20
   11440:	andeq	r1, r1, ip, lsl #20
   11444:	andeq	r2, r1, r0, asr #8
   11448:	strdeq	r1, [r1], -r8
   1144c:	andeq	r2, r1, r0, asr #8
   11450:	andeq	r1, r1, r4, ror #19
   11454:	andeq	r2, r1, r0, asr #8
   11458:	ldrdeq	r1, [r1], -r0
   1145c:			; <UNDEFINED> instruction: 0x000119bc
   11460:	andeq	r2, r1, r0, asr #8
   11464:	andeq	r2, r1, r0, asr #8
   11468:			; <UNDEFINED> instruction: 0x000119bc
   1146c:	andeq	r2, r1, r0, asr #8
   11470:	andeq	r1, r1, r0, ror r9
   11474:	andeq	r1, r1, ip, asr r9
   11478:	andeq	r2, r1, r0, asr #8
   1147c:	andeq	r2, r1, r0, asr #8
   11480:	andeq	r2, r1, r0, asr #8
   11484:	strdeq	r1, [r1], -ip
   11488:	andeq	r2, r1, r0, asr #8
   1148c:	andeq	r2, r1, r0, asr #8
   11490:	andeq	r2, r1, r0, asr #8
   11494:	andeq	r2, r1, r0, asr #8
   11498:	ldrdeq	r1, [r1], -r0
   1149c:	andeq	r2, r1, r0, asr #8
   114a0:	andeq	r2, r1, r0, asr #8
   114a4:	andeq	r2, r1, r0, asr #8
   114a8:	andeq	r2, r1, r0, asr #8
   114ac:	andeq	r2, r1, r0, asr #8
   114b0:	andeq	r2, r1, r0, asr #8
   114b4:	andeq	r2, r1, r0, asr #8
   114b8:	andeq	r2, r1, r0, asr #8
   114bc:	andeq	r1, r1, r8, ror #17
   114c0:	ldrdeq	r1, [r1], -r4
   114c4:	andeq	r1, r1, r0, asr #17
   114c8:	andeq	r1, r1, ip, lsr #17
   114cc:	andeq	r1, r1, r4, ror #19
   114d0:	muleq	r1, r8, r8
   114d4:	andeq	r2, r1, r0, asr #8
   114d8:	andeq	r1, r1, r4, lsl #17
   114dc:	andeq	r1, r1, r0, ror r8
   114e0:	andeq	r1, r1, r0, asr #16
   114e4:	andeq	r2, r1, r0, asr #8
   114e8:			; <UNDEFINED> instruction: 0x000119bc
   114ec:	andeq	r2, r1, r0, asr #8
   114f0:	andeq	r2, r1, r0, asr #8
   114f4:	andeq	r1, r1, ip, lsl #20
   114f8:	andeq	r2, r1, r0, asr #8
   114fc:	andeq	r2, r1, r0, asr #8
   11500:	andeq	r2, r1, r0, asr #8
   11504:	andeq	r1, r1, ip, lsr #16
   11508:	andeq	r1, r1, r8, lsl #16
   1150c:	andeq	r2, r1, r0, asr #8
   11510:	strdeq	r1, [r1], -r4
   11514:	muleq	r1, ip, r7
   11518:	andeq	r1, r1, r4, lsl #17
   1151c:	andeq	r2, r1, r0, asr #8
   11520:	andeq	r2, r1, r0, asr #8
   11524:	andeq	r2, r1, r0, asr #8
   11528:	andeq	r2, r1, r0, asr #8
   1152c:	andeq	r2, r1, r0, asr #8
   11530:	andeq	r2, r1, r0, asr #8
   11534:	andeq	r2, r1, r0, asr #8
   11538:	andeq	r2, r1, r0, asr #8
   1153c:	andeq	r2, r1, r0, asr #8
   11540:	andeq	r2, r1, r0, asr #8
   11544:	andeq	r2, r1, r0, asr #8
   11548:	andeq	r2, r1, r0, asr #8
   1154c:	andeq	r2, r1, r0, asr #8
   11550:	andeq	r2, r1, r0, asr #8
   11554:	andeq	r2, r1, r0, asr #8
   11558:	andeq	r2, r1, r0, asr #8
   1155c:	andeq	r2, r1, r0, asr #8
   11560:	andeq	r2, r1, r0, asr #8
   11564:	andeq	r2, r1, r0, asr #8
   11568:	andeq	r2, r1, r0, asr #8
   1156c:	andeq	r2, r1, r0, asr #8
   11570:	andeq	r2, r1, r0, asr #8
   11574:	andeq	r2, r1, r0, asr #8
   11578:	andeq	r2, r1, r0, asr #8
   1157c:	andeq	r2, r1, r0, asr #8
   11580:	andeq	r2, r1, r0, asr #8
   11584:	andeq	r2, r1, r0, asr #8
   11588:	andeq	r2, r1, r0, asr #8
   1158c:	andeq	r2, r1, r0, asr #8
   11590:	andeq	r2, r1, r0, asr #8
   11594:	andeq	r2, r1, r0, asr #8
   11598:	andeq	r2, r1, r0, asr #8
   1159c:	andeq	r2, r1, r0, asr #8
   115a0:	andeq	r2, r1, r0, asr #8
   115a4:	andeq	r2, r1, r0, asr #8
   115a8:	andeq	r2, r1, r0, asr #8
   115ac:	andeq	r2, r1, r0, asr #8
   115b0:	andeq	r2, r1, r0, asr #8
   115b4:	andeq	r2, r1, r0, asr #8
   115b8:	andeq	r2, r1, r0, asr #8
   115bc:	andeq	r2, r1, r0, asr #8
   115c0:	andeq	r2, r1, r0, asr #8
   115c4:	andeq	r2, r1, r0, asr #8
   115c8:	andeq	r2, r1, r0, asr #8
   115cc:	andeq	r2, r1, r0, asr #8
   115d0:	andeq	r2, r1, r0, asr #8
   115d4:	andeq	r2, r1, r0, asr #8
   115d8:	andeq	r2, r1, r0, asr #8
   115dc:	andeq	r2, r1, r0, asr #8
   115e0:	andeq	r2, r1, r0, asr #8
   115e4:	andeq	r2, r1, r0, asr #8
   115e8:	andeq	r2, r1, r0, asr #8
   115ec:	andeq	r2, r1, r0, asr #8
   115f0:	andeq	r2, r1, r0, asr #8
   115f4:	andeq	r2, r1, r0, asr #8
   115f8:	andeq	r2, r1, r0, asr #8
   115fc:	andeq	r2, r1, r0, asr #8
   11600:	andeq	r2, r1, r0, asr #8
   11604:	andeq	r2, r1, r0, asr #8
   11608:	andeq	r2, r1, r0, asr #8
   1160c:	andeq	r2, r1, r0, asr #8
   11610:	andeq	r2, r1, r0, asr #8
   11614:	andeq	r2, r1, r0, asr #8
   11618:	andeq	r2, r1, r0, asr #8
   1161c:	andeq	r2, r1, r0, asr #8
   11620:	andeq	r2, r1, r0, asr #8
   11624:	andeq	r2, r1, r0, asr #8
   11628:	andeq	r2, r1, r0, asr #8
   1162c:	andeq	r2, r1, r0, asr #8
   11630:	andeq	r2, r1, r0, asr #8
   11634:	andeq	r2, r1, r0, asr #8
   11638:	andeq	r2, r1, r0, asr #8
   1163c:	andeq	r2, r1, r0, asr #8
   11640:	andeq	r2, r1, r0, asr #8
   11644:	andeq	r2, r1, r0, asr #8
   11648:	andeq	r2, r1, r0, asr #8
   1164c:	andeq	r2, r1, r0, asr #8
   11650:	andeq	r2, r1, r0, asr #8
   11654:	andeq	r2, r1, r0, asr #8
   11658:	andeq	r2, r1, r0, asr #8
   1165c:	andeq	r2, r1, r0, asr #8
   11660:	andeq	r2, r1, r0, asr #8
   11664:	andeq	r2, r1, r0, asr #8
   11668:	andeq	r2, r1, r0, asr #8
   1166c:	andeq	r2, r1, r0, asr #8
   11670:	andeq	r2, r1, r0, asr #8
   11674:	andeq	r2, r1, r0, asr #8
   11678:	andeq	r2, r1, r0, asr #8
   1167c:	andeq	r2, r1, r0, asr #8
   11680:	andeq	r2, r1, r0, asr #8
   11684:	andeq	r2, r1, r0, asr #8
   11688:	andeq	r2, r1, r0, asr #8
   1168c:	andeq	r2, r1, r0, asr #8
   11690:	andeq	r2, r1, r0, asr #8
   11694:	andeq	r2, r1, r0, asr #8
   11698:	andeq	r2, r1, r0, asr #8
   1169c:	andeq	r2, r1, r0, asr #8
   116a0:	andeq	r2, r1, r0, asr #8
   116a4:	andeq	r2, r1, r0, asr #8
   116a8:	andeq	r2, r1, r0, asr #8
   116ac:	andeq	r2, r1, r0, asr #8
   116b0:	andeq	r2, r1, r0, asr #8
   116b4:	andeq	r2, r1, r0, asr #8
   116b8:	andeq	r2, r1, r0, asr #8
   116bc:	andeq	r2, r1, r0, asr #8
   116c0:	andeq	r2, r1, r0, asr #8
   116c4:	andeq	r2, r1, r0, asr #8
   116c8:	andeq	r2, r1, r0, asr #8
   116cc:	andeq	r2, r1, r0, asr #8
   116d0:	andeq	r2, r1, r0, asr #8
   116d4:	andeq	r2, r1, r0, asr #8
   116d8:	andeq	r2, r1, r0, asr #8
   116dc:	andeq	r2, r1, r0, asr #8
   116e0:	andeq	r2, r1, r0, asr #8
   116e4:	andeq	r2, r1, r0, asr #8
   116e8:	andeq	r2, r1, r0, asr #8
   116ec:	andeq	r2, r1, r0, asr #8
   116f0:	andeq	r2, r1, r0, asr #8
   116f4:	andeq	r2, r1, r0, asr #8
   116f8:	andeq	r2, r1, r0, asr #8
   116fc:	andeq	r2, r1, r0, asr #8
   11700:	andeq	r2, r1, r0, asr #8
   11704:	andeq	r2, r1, r0, asr #8
   11708:	andeq	r2, r1, r0, asr #8
   1170c:	andeq	r2, r1, r0, asr #8
   11710:	andeq	r2, r1, r0, asr #8
   11714:	andeq	r2, r1, r0, asr #8
   11718:	andeq	r2, r1, r0, asr #8
   1171c:	andeq	r2, r1, r0, asr #8
   11720:	andeq	r2, r1, r0, asr #8
   11724:	andeq	r2, r1, r0, asr #8
   11728:	andeq	r2, r1, r0, asr #8
   1172c:	andeq	r2, r1, r0, asr #8
   11730:	andeq	r2, r1, r0, asr #8
   11734:	andeq	r2, r1, r0, asr #8
   11738:	muleq	r1, r0, r7
   1173c:	andeq	r1, r1, r0, asr #14
   11740:	ldr	r2, [pc, #2688]	; 121c8 <__assert_fail@plt+0xfd4>
   11744:	ldr	r1, [pc, #2916]	; 122b0 <__assert_fail@plt+0x10bc>
   11748:	mov	r3, #4
   1174c:	ldr	r2, [r2]
   11750:	ldr	r1, [r1]
   11754:	ldr	r0, [pc, #2672]	; 121cc <__assert_fail@plt+0xfd8>
   11758:	str	r2, [sp, #4]
   1175c:	str	r3, [sp]
   11760:	ldr	r2, [pc, #2664]	; 121d0 <__assert_fail@plt+0xfdc>
   11764:	ldr	r3, [sp, #16]
   11768:	bl	151f4 <__assert_fail@plt+0x4000>
   1176c:	ldr	r3, [pc, #2784]	; 12254 <__assert_fail@plt+0x1060>
   11770:	add	r0, r3, r0, lsl #2
   11774:	ldr	r3, [r0, #804]	; 0x324
   11778:	cmp	r3, #0
   1177c:	beq	11788 <__assert_fail@plt+0x594>
   11780:	cmp	r3, #1
   11784:	bne	112f0 <__assert_fail@plt+0xfc>
   11788:	strb	r3, [fp, #8]
   1178c:	b	112f0 <__assert_fail@plt+0xfc>
   11790:	mov	r3, #1
   11794:	strb	r3, [fp, #156]	; 0x9c
   11798:	b	112f0 <__assert_fail@plt+0xfc>
   1179c:	ldr	r3, [pc, #2828]	; 122b0 <__assert_fail@plt+0x10bc>
   117a0:	ldr	r0, [r3]
   117a4:	cmp	r0, #0
   117a8:	beq	11ac0 <__assert_fail@plt+0x8cc>
   117ac:	ldr	r3, [pc, #2544]	; 121a4 <__assert_fail@plt+0xfb0>
   117b0:	mov	r2, #10
   117b4:	str	r3, [sp]
   117b8:	mov	r1, #0
   117bc:	add	r3, sp, #64	; 0x40
   117c0:	bl	18438 <__assert_fail@plt+0x7244>
   117c4:	subs	r9, r0, #0
   117c8:	bne	128bc <__assert_fail@plt+0x16c8>
   117cc:	ldrd	r2, [sp, #64]	; 0x40
   117d0:	mov	r7, #0
   117d4:	mvn	r6, #0
   117d8:	cmp	r3, r7
   117dc:	cmpeq	r2, r6
   117e0:	bhi	12828 <__assert_fail@plt+0x1634>
   117e4:	mov	r6, #1
   117e8:	str	r6, [sp, #32]
   117ec:	str	r2, [sp, #36]	; 0x24
   117f0:	b	112f0 <__assert_fail@plt+0xfc>
   117f4:	ldr	r3, [pc, #2520]	; 121d4 <__assert_fail@plt+0xfe0>
   117f8:	mov	r2, #0
   117fc:	mov	r6, #1
   11800:	strb	r2, [r3]
   11804:	b	112f0 <__assert_fail@plt+0xfc>
   11808:	ldr	r3, [pc, #2720]	; 122b0 <__assert_fail@plt+0x10bc>
   1180c:	ldr	r0, [r3]
   11810:	cmp	r0, #0
   11814:	beq	12858 <__assert_fail@plt+0x1664>
   11818:	bl	14250 <__assert_fail@plt+0x305c>
   1181c:	mov	r6, #1
   11820:	and	r8, r8, r0
   11824:	uxtb	r8, r8
   11828:	b	112f0 <__assert_fail@plt+0xfc>
   1182c:	ldr	r0, [pc, #2468]	; 121d8 <__assert_fail@plt+0xfe4>
   11830:	bl	14250 <__assert_fail@plt+0x305c>
   11834:	and	r8, r8, r0
   11838:	uxtb	r8, r8
   1183c:	b	112f0 <__assert_fail@plt+0xfc>
   11840:	ldr	r9, [pc, #2664]	; 122b0 <__assert_fail@plt+0x10bc>
   11844:	ldr	r6, [pc, #2448]	; 121dc <__assert_fail@plt+0xfe8>
   11848:	mov	r2, #0
   1184c:	ldr	r0, [r9]
   11850:	mov	r1, r2
   11854:	str	r6, [sp]
   11858:	ldr	r3, [pc, #2432]	; 121e0 <__assert_fail@plt+0xfec>
   1185c:	bl	18438 <__assert_fail@plt+0x7244>
   11860:	cmp	r0, #0
   11864:	bne	127e8 <__assert_fail@plt+0x15f4>
   11868:	mov	r6, #1
   1186c:	b	112f0 <__assert_fail@plt+0xfc>
   11870:	ldr	r0, [pc, #2412]	; 121e4 <__assert_fail@plt+0xff0>
   11874:	bl	14250 <__assert_fail@plt+0x305c>
   11878:	and	r8, r8, r0
   1187c:	uxtb	r8, r8
   11880:	b	112f0 <__assert_fail@plt+0xfc>
   11884:	ldr	r0, [pc, #2396]	; 121e8 <__assert_fail@plt+0xff4>
   11888:	bl	14250 <__assert_fail@plt+0x305c>
   1188c:	and	r8, r8, r0
   11890:	uxtb	r8, r8
   11894:	b	112f0 <__assert_fail@plt+0xfc>
   11898:	ldr	r0, [pc, #2380]	; 121ec <__assert_fail@plt+0xff8>
   1189c:	bl	14250 <__assert_fail@plt+0x305c>
   118a0:	and	r8, r8, r0
   118a4:	uxtb	r8, r8
   118a8:	b	112f0 <__assert_fail@plt+0xfc>
   118ac:	ldr	r0, [pc, #2364]	; 121f0 <__assert_fail@plt+0xffc>
   118b0:	bl	14250 <__assert_fail@plt+0x305c>
   118b4:	and	r8, r8, r0
   118b8:	uxtb	r8, r8
   118bc:	b	112f0 <__assert_fail@plt+0xfc>
   118c0:	ldr	r0, [pc, #2348]	; 121f4 <__assert_fail@plt+0x1000>
   118c4:	bl	14250 <__assert_fail@plt+0x305c>
   118c8:	and	r8, r8, r0
   118cc:	uxtb	r8, r8
   118d0:	b	112f0 <__assert_fail@plt+0xfc>
   118d4:	ldr	r0, [pc, #2332]	; 121f8 <__assert_fail@plt+0x1004>
   118d8:	bl	14250 <__assert_fail@plt+0x305c>
   118dc:	and	r8, r8, r0
   118e0:	uxtb	r8, r8
   118e4:	b	112f0 <__assert_fail@plt+0xfc>
   118e8:	ldr	r0, [pc, #2316]	; 121fc <__assert_fail@plt+0x1008>
   118ec:	bl	14250 <__assert_fail@plt+0x305c>
   118f0:	and	r8, r8, r0
   118f4:	uxtb	r8, r8
   118f8:	b	112f0 <__assert_fail@plt+0xfc>
   118fc:	ldr	r3, [pc, #2476]	; 122b0 <__assert_fail@plt+0x10bc>
   11900:	ldr	r0, [r3]
   11904:	cmp	r0, #0
   11908:	moveq	r3, #3
   1190c:	streq	r3, [fp, #152]	; 0x98
   11910:	beq	11950 <__assert_fail@plt+0x75c>
   11914:	ldr	r9, [pc, #2240]	; 121dc <__assert_fail@plt+0xfe8>
   11918:	mov	r2, #0
   1191c:	mov	r1, r2
   11920:	str	r9, [sp]
   11924:	add	r3, sp, #64	; 0x40
   11928:	bl	18438 <__assert_fail@plt+0x7244>
   1192c:	subs	r1, r0, #0
   11930:	bne	1286c <__assert_fail@plt+0x1678>
   11934:	ldrd	r2, [sp, #64]	; 0x40
   11938:	mov	r7, #0
   1193c:	mvn	r6, #0
   11940:	cmp	r3, r7
   11944:	cmpeq	r2, r6
   11948:	bhi	12888 <__assert_fail@plt+0x1694>
   1194c:	str	r2, [fp, #152]	; 0x98
   11950:	mov	r6, #1
   11954:	strb	r6, [fp, #26]
   11958:	b	112f0 <__assert_fail@plt+0xfc>
   1195c:	ldr	r0, [pc, #2204]	; 12200 <__assert_fail@plt+0x100c>
   11960:	bl	14250 <__assert_fail@plt+0x305c>
   11964:	and	r8, r8, r0
   11968:	uxtb	r8, r8
   1196c:	b	112f0 <__assert_fail@plt+0xfc>
   11970:	ldr	r9, [pc, #2360]	; 122b0 <__assert_fail@plt+0x10bc>
   11974:	ldr	r3, [pc, #2144]	; 121dc <__assert_fail@plt+0xfe8>
   11978:	mov	r2, #0
   1197c:	ldr	r0, [r9]
   11980:	mov	r1, r2
   11984:	str	r3, [sp]
   11988:	mov	r6, #1
   1198c:	ldr	r3, [pc, #2160]	; 12204 <__assert_fail@plt+0x1010>
   11990:	strb	r6, [fp, #25]
   11994:	bl	18438 <__assert_fail@plt+0x7244>
   11998:	cmp	r0, #0
   1199c:	beq	112f0 <__assert_fail@plt+0xfc>
   119a0:	ldr	r2, [r9]
   119a4:	ldr	r3, [pc, #2096]	; 121dc <__assert_fail@plt+0xfe8>
   119a8:	str	r2, [sp]
   119ac:	sub	r3, r3, #228	; 0xe4
   119b0:	mov	r2, #78	; 0x4e
   119b4:	ldr	r1, [sp, #56]	; 0x38
   119b8:	bl	183a0 <__assert_fail@plt+0x71ac>
   119bc:	ldr	r0, [pc, #2116]	; 12208 <__assert_fail@plt+0x1014>
   119c0:	bl	14250 <__assert_fail@plt+0x305c>
   119c4:	and	r8, r8, r0
   119c8:	uxtb	r8, r8
   119cc:	b	112f0 <__assert_fail@plt+0xfc>
   119d0:	ldr	r0, [pc, #2100]	; 1220c <__assert_fail@plt+0x1018>
   119d4:	bl	14250 <__assert_fail@plt+0x305c>
   119d8:	and	r8, r8, r0
   119dc:	uxtb	r8, r8
   119e0:	b	112f0 <__assert_fail@plt+0xfc>
   119e4:	ldr	r0, [pc, #2084]	; 12210 <__assert_fail@plt+0x101c>
   119e8:	bl	14250 <__assert_fail@plt+0x305c>
   119ec:	and	r8, r8, r0
   119f0:	uxtb	r8, r8
   119f4:	b	112f0 <__assert_fail@plt+0xfc>
   119f8:	ldr	r0, [pc, #2068]	; 12214 <__assert_fail@plt+0x1020>
   119fc:	bl	14250 <__assert_fail@plt+0x305c>
   11a00:	and	r8, r8, r0
   11a04:	uxtb	r8, r8
   11a08:	b	112f0 <__assert_fail@plt+0xfc>
   11a0c:	ldr	r0, [pc, #2052]	; 12218 <__assert_fail@plt+0x1024>
   11a10:	bl	14250 <__assert_fail@plt+0x305c>
   11a14:	and	r8, r8, r0
   11a18:	uxtb	r8, r8
   11a1c:	b	112f0 <__assert_fail@plt+0xfc>
   11a20:	ldr	r6, [pc, #2184]	; 122b0 <__assert_fail@plt+0x10bc>
   11a24:	ldr	r3, [r6]
   11a28:	ldrb	r3, [r3]
   11a2c:	sub	r3, r3, #100	; 0x64
   11a30:	cmp	r3, #20
   11a34:	ldrls	pc, [pc, r3, lsl #2]
   11a38:	b	12800 <__assert_fail@plt+0x160c>
   11a3c:	strdeq	r1, [r1], -r4
   11a40:	andeq	r2, r1, r0, lsl #16
   11a44:	andeq	r2, r1, r0, lsl #16
   11a48:	andeq	r2, r1, r0, lsl #16
   11a4c:	andeq	r2, r1, r0, lsl #16
   11a50:	andeq	r2, r1, r0, lsl #16
   11a54:	andeq	r2, r1, r0, lsl #16
   11a58:	andeq	r2, r1, r0, lsl #16
   11a5c:	andeq	r2, r1, r0, lsl #16
   11a60:	andeq	r2, r1, r0, lsl #16
   11a64:	andeq	r1, r1, r0, lsl #30
   11a68:	andeq	r1, r1, r8, lsl pc
   11a6c:	andeq	r2, r1, r0, lsl #16
   11a70:	andeq	r2, r1, r0, lsl #16
   11a74:	andeq	r2, r1, r0, lsl #16
   11a78:	andeq	r2, r1, r0, lsl #16
   11a7c:	andeq	r2, r1, r0, lsl #16
   11a80:	andeq	r2, r1, r0, lsl #16
   11a84:	andeq	r2, r1, r0, lsl #16
   11a88:	andeq	r2, r1, r0, lsl #16
   11a8c:	ldrdeq	r1, [r1], -r8
   11a90:	ldr	r1, [pc, #2000]	; 12268 <__assert_fail@plt+0x1074>
   11a94:	ldr	r2, [pc, #1920]	; 1221c <__assert_fail@plt+0x1028>
   11a98:	ldr	r3, [pc, #1920]	; 12220 <__assert_fail@plt+0x102c>
   11a9c:	mov	r4, #0
   11aa0:	ldr	r0, [r1]
   11aa4:	ldr	r3, [r3]
   11aa8:	ldr	r1, [pc, #1908]	; 12224 <__assert_fail@plt+0x1030>
   11aac:	stm	sp, {r2, r4}
   11ab0:	ldr	r2, [pc, #1904]	; 12228 <__assert_fail@plt+0x1034>
   11ab4:	bl	17e98 <__assert_fail@plt+0x6ca4>
   11ab8:	mov	r0, r4
   11abc:	bl	110b0 <exit@plt>
   11ac0:	mov	r3, #1
   11ac4:	str	r3, [sp, #32]
   11ac8:	mov	r6, r3
   11acc:	mov	r3, #32
   11ad0:	str	r3, [sp, #36]	; 0x24
   11ad4:	b	112f0 <__assert_fail@plt+0xfc>
   11ad8:	cmp	r8, #0
   11adc:	beq	11f68 <__assert_fail@plt+0xd74>
   11ae0:	ldrb	r3, [fp, #26]
   11ae4:	cmp	r3, #0
   11ae8:	beq	11b00 <__assert_fail@plt+0x90c>
   11aec:	ldr	r3, [fp, #36]	; 0x24
   11af0:	cmp	r3, #0
   11af4:	movne	r2, #5
   11af8:	ldrne	r1, [pc, #1836]	; 1222c <__assert_fail@plt+0x1038>
   11afc:	bne	127cc <__assert_fail@plt+0x15d8>
   11b00:	ldr	r9, [pc, #1832]	; 12230 <__assert_fail@plt+0x103c>
   11b04:	cmp	r6, #0
   11b08:	ldrb	r2, [fp, #156]	; 0x9c
   11b0c:	ldr	r3, [r9]
   11b10:	sub	r6, r5, r3
   11b14:	bne	11f20 <__assert_fail@plt+0xd2c>
   11b18:	cmp	r6, #2
   11b1c:	beq	12448 <__assert_fail@plt+0x1254>
   11b20:	cmp	r6, #3
   11b24:	beq	123b0 <__assert_fail@plt+0x11bc>
   11b28:	cmp	r6, #1
   11b2c:	beq	12538 <__assert_fail@plt+0x1344>
   11b30:	cmp	r6, #1
   11b34:	movle	r2, #0
   11b38:	andgt	r2, r2, #1
   11b3c:	cmp	r2, #0
   11b40:	bne	123e4 <__assert_fail@plt+0x11f0>
   11b44:	ldrb	r3, [fp, #157]	; 0x9d
   11b48:	cmp	r3, #0
   11b4c:	beq	11b7c <__assert_fail@plt+0x988>
   11b50:	ldr	r3, [pc, #1756]	; 12234 <__assert_fail@plt+0x1040>
   11b54:	ldr	r2, [fp, #44]	; 0x2c
   11b58:	cmp	r2, r3
   11b5c:	moveq	r2, #8
   11b60:	ldreq	r3, [pc, #1744]	; 12238 <__assert_fail@plt+0x1044>
   11b64:	ldrne	r3, [pc, #1744]	; 1223c <__assert_fail@plt+0x1048>
   11b68:	streq	r3, [fp, #44]	; 0x2c
   11b6c:	moveq	r3, #7
   11b70:	streq	r2, [fp, #4]
   11b74:	streq	r3, [fp]
   11b78:	strne	r3, [fp, #44]	; 0x2c
   11b7c:	ldrb	r3, [fp, #25]
   11b80:	cmp	r3, #0
   11b84:	beq	11bc0 <__assert_fail@plt+0x9cc>
   11b88:	mov	r2, #0
   11b8c:	mov	r3, #0
   11b90:	ldrd	r0, [fp, #136]	; 0x88
   11b94:	strd	r2, [sp, #16]
   11b98:	ldrd	r2, [fp, #144]	; 0x90
   11b9c:	adds	r4, r0, r2
   11ba0:	adcs	r5, r1, r3
   11ba4:	movcs	r2, #1
   11ba8:	movcs	r3, #0
   11bac:	strd	r4, [fp, #160]	; 0xa0
   11bb0:	strdcs	r2, [sp, #16]
   11bb4:	ldrd	r2, [sp, #16]
   11bb8:	orrs	r3, r2, r3
   11bbc:	bne	127c4 <__assert_fail@plt+0x15d0>
   11bc0:	ldr	r3, [fp, #36]	; 0x24
   11bc4:	cmp	r3, #0
   11bc8:	beq	11f70 <__assert_fail@plt+0xd7c>
   11bcc:	cmp	r6, #0
   11bd0:	ldrgt	r3, [r9]
   11bd4:	ldrle	sl, [pc, #1636]	; 12240 <__assert_fail@plt+0x104c>
   11bd8:	addgt	sl, sl, r3, lsl #2
   11bdc:	str	sl, [fp, #20]
   11be0:	bl	13b54 <__assert_fail@plt+0x2960>
   11be4:	ldr	r3, [fp, #12]
   11be8:	cmp	r3, #0
   11bec:	mov	r5, r0
   11bf0:	mov	r4, r0
   11bf4:	beq	11ea8 <__assert_fail@plt+0xcb4>
   11bf8:	ldrd	r0, [fp, #136]	; 0x88
   11bfc:	bl	13c78 <__assert_fail@plt+0x2a84>
   11c00:	ldr	r3, [fp, #12]
   11c04:	cmp	r3, #0
   11c08:	and	r0, r0, r5
   11c0c:	uxtb	r3, r0
   11c10:	str	r3, [sp, #16]
   11c14:	mov	r4, r3
   11c18:	beq	11ea8 <__assert_fail@plt+0xcb4>
   11c1c:	ldrb	r3, [fp, #157]	; 0x9d
   11c20:	cmp	r3, #0
   11c24:	moveq	r3, #0
   11c28:	moveq	r2, r3
   11c2c:	beq	11c48 <__assert_fail@plt+0xa54>
   11c30:	ldr	r1, [sp, #48]	; 0x30
   11c34:	ldr	r3, [fp, #136]	; 0x88
   11c38:	ldr	r2, [fp, #140]	; 0x8c
   11c3c:	subs	r3, r1, r3
   11c40:	ldr	r1, [sp, #52]	; 0x34
   11c44:	sbc	r2, r1, r2
   11c48:	ldr	r1, [fp, #36]	; 0x24
   11c4c:	str	r3, [fp, #48]	; 0x30
   11c50:	cmp	r1, #0
   11c54:	str	r2, [fp, #52]	; 0x34
   11c58:	beq	12684 <__assert_fail@plt+0x1490>
   11c5c:	ldr	r5, [fp, #40]	; 0x28
   11c60:	ldr	r6, [pc, #1516]	; 12254 <__assert_fail@plt+0x1060>
   11c64:	add	sl, r5, r1, lsl #5
   11c68:	mov	r4, #1
   11c6c:	mov	r7, r8
   11c70:	ldr	r3, [r5, #4]
   11c74:	mov	r0, r4
   11c78:	add	r3, r6, r3, lsl #2
   11c7c:	ldr	r9, [r3, #132]	; 0x84
   11c80:	mov	r8, r9
   11c84:	b	11c8c <__assert_fail@plt+0xa98>
   11c88:	mov	r8, r1
   11c8c:	mov	r1, r8
   11c90:	bl	1b068 <__assert_fail@plt+0x9e74>
   11c94:	mov	r0, r8
   11c98:	cmp	r1, #0
   11c9c:	bne	11c88 <__assert_fail@plt+0xa94>
   11ca0:	mov	r0, r9
   11ca4:	mov	r1, r8
   11ca8:	bl	1ae7c <__assert_fail@plt+0x9c88>
   11cac:	add	r5, r5, #32
   11cb0:	cmp	sl, r5
   11cb4:	mul	r4, r4, r0
   11cb8:	mov	r9, r4
   11cbc:	bne	11c70 <__assert_fail@plt+0xa7c>
   11cc0:	ldr	r3, [sp, #32]
   11cc4:	mov	r8, r7
   11cc8:	cmp	r3, #0
   11ccc:	beq	11fb8 <__assert_fail@plt+0xdc4>
   11cd0:	ldr	r3, [sp, #36]	; 0x24
   11cd4:	cmp	r3, #0
   11cd8:	beq	11cf0 <__assert_fail@plt+0xafc>
   11cdc:	mov	r1, r4
   11ce0:	mov	r0, r3
   11ce4:	bl	1b068 <__assert_fail@plt+0x9e74>
   11ce8:	cmp	r1, #0
   11cec:	beq	126a8 <__assert_fail@plt+0x14b4>
   11cf0:	mov	r2, #5
   11cf4:	ldr	r1, [pc, #1352]	; 12244 <__assert_fail@plt+0x1050>
   11cf8:	mov	r0, #0
   11cfc:	bl	10fc0 <dcgettext@plt>
   11d00:	mov	r1, #0
   11d04:	str	r4, [sp]
   11d08:	ldr	r3, [sp, #36]	; 0x24
   11d0c:	mov	r2, r0
   11d10:	mov	r0, r1
   11d14:	bl	11044 <error@plt>
   11d18:	str	r9, [fp, #28]
   11d1c:	ldr	r5, [fp, #36]	; 0x24
   11d20:	cmp	r5, #0
   11d24:	beq	11dbc <__assert_fail@plt+0xbc8>
   11d28:	ldr	r6, [pc, #1316]	; 12254 <__assert_fail@plt+0x1060>
   11d2c:	ldr	r4, [fp, #40]	; 0x28
   11d30:	ldr	r3, [fp, #28]
   11d34:	mov	sl, r4
   11d38:	mov	r9, #0
   11d3c:	add	r5, r4, r5, lsl #5
   11d40:	mov	r7, r4
   11d44:	mov	r4, r9
   11d48:	mov	r9, sl
   11d4c:	mov	sl, r3
   11d50:	ldr	r2, [r9, #4]
   11d54:	mov	r0, sl
   11d58:	add	r9, r9, #32
   11d5c:	add	r2, r6, r2, lsl #2
   11d60:	ldr	r1, [r2, #132]	; 0x84
   11d64:	bl	1ae7c <__assert_fail@plt+0x9c88>
   11d68:	ldr	r2, [r9, #-8]
   11d6c:	add	r2, r2, #1
   11d70:	mul	r0, r2, r0
   11d74:	cmp	r4, r0
   11d78:	movcc	r4, r0
   11d7c:	cmp	r5, r9
   11d80:	bne	11d50 <__assert_fail@plt+0xb5c>
   11d84:	mov	r9, r4
   11d88:	mov	r4, r7
   11d8c:	ldr	r3, [r4, #4]
   11d90:	mov	r0, sl
   11d94:	add	r4, r4, #32
   11d98:	add	r3, r6, r3, lsl #2
   11d9c:	ldr	r1, [r3, #132]	; 0x84
   11da0:	bl	1ae7c <__assert_fail@plt+0x9c88>
   11da4:	ldr	r3, [r4, #-8]
   11da8:	mul	r3, r3, r0
   11dac:	sub	r3, r9, r3
   11db0:	str	r3, [r4, #-4]
   11db4:	cmp	r5, r4
   11db8:	bne	11d8c <__assert_fail@plt+0xb98>
   11dbc:	ldrb	r9, [fp, #26]
   11dc0:	cmp	r9, #0
   11dc4:	beq	12060 <__assert_fail@plt+0xe6c>
   11dc8:	ldr	r3, [fp, #152]	; 0x98
   11dcc:	cmp	r3, #100	; 0x64
   11dd0:	movcc	r3, #100	; 0x64
   11dd4:	mov	r0, r3
   11dd8:	str	r3, [sp, #56]	; 0x38
   11ddc:	bl	17f9c <__assert_fail@plt+0x6da8>
   11de0:	ldrd	r4, [fp, #136]	; 0x88
   11de4:	mov	sl, r0
   11de8:	ldrb	r3, [fp, #25]
   11dec:	ldr	r6, [fp, #152]	; 0x98
   11df0:	cmp	r3, #0
   11df4:	beq	11e2c <__assert_fail@plt+0xc38>
   11df8:	ldrd	r0, [fp, #160]	; 0xa0
   11dfc:	mov	r3, #0
   11e00:	cmp	r3, r1
   11e04:	cmpeq	r6, r0
   11e08:	bhi	12780 <__assert_fail@plt+0x158c>
   11e0c:	subs	ip, r0, r6
   11e10:	sbc	r3, r1, r3
   11e14:	str	ip, [sp, #40]	; 0x28
   11e18:	str	r3, [sp, #44]	; 0x2c
   11e1c:	ldrd	r2, [sp, #40]	; 0x28
   11e20:	cmp	r3, r5
   11e24:	cmpeq	r2, r4
   11e28:	bls	12780 <__assert_fail@plt+0x158c>
   11e2c:	cmp	r6, #0
   11e30:	addne	r3, sp, #64	; 0x40
   11e34:	movne	r6, #0
   11e38:	movne	r7, r3
   11e3c:	bne	11e70 <__assert_fail@plt+0xc7c>
   11e40:	b	12034 <__assert_fail@plt+0xe40>
   11e44:	bl	110a4 <__ctype_b_loc@plt>
   11e48:	lsl	r3, r8, #1
   11e4c:	ldr	r1, [fp, #152]	; 0x98
   11e50:	ldr	r2, [r0]
   11e54:	ldrh	r3, [r2, r3]
   11e58:	tst	r3, #16384	; 0x4000
   11e5c:	beq	11de8 <__assert_fail@plt+0xbf4>
   11e60:	strb	r8, [sl, r6]
   11e64:	add	r6, r6, #1
   11e68:	cmp	r6, r1
   11e6c:	bcs	12034 <__assert_fail@plt+0xe40>
   11e70:	mov	r0, r7
   11e74:	bl	13e80 <__assert_fail@plt+0x2c8c>
   11e78:	ldr	r8, [sp, #64]	; 0x40
   11e7c:	adds	r4, r4, #1
   11e80:	adc	r5, r5, #0
   11e84:	cmp	r8, #0
   11e88:	and	r9, r9, r0
   11e8c:	bge	11e44 <__assert_fail@plt+0xc50>
   11e90:	mov	r0, sl
   11e94:	bl	10f54 <free@plt>
   11e98:	mov	r4, r9
   11e9c:	ldr	r3, [sp, #16]
   11ea0:	and	r3, r3, r4
   11ea4:	and	r4, r3, #1
   11ea8:	ldrb	r3, [fp, #24]
   11eac:	cmp	r3, #0
   11eb0:	bne	11f7c <__assert_fail@plt+0xd88>
   11eb4:	eor	r0, r4, #1
   11eb8:	uxtb	r0, r0
   11ebc:	ldr	r3, [pc, #732]	; 121a0 <__assert_fail@plt+0xfac>
   11ec0:	ldr	r2, [sp, #84]	; 0x54
   11ec4:	ldr	r3, [r3]
   11ec8:	cmp	r2, r3
   11ecc:	bne	127e4 <__assert_fail@plt+0x15f0>
   11ed0:	add	sp, sp, #92	; 0x5c
   11ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ed8:	mov	r2, #16
   11edc:	mov	r3, #6
   11ee0:	ldr	r1, [pc, #728]	; 121c0 <__assert_fail@plt+0xfcc>
   11ee4:	str	r2, [fp, #4]
   11ee8:	str	r1, [fp, #44]	; 0x2c
   11eec:	str	r3, [fp]
   11ef0:	b	11868 <__assert_fail@plt+0x674>
   11ef4:	mov	r2, #10
   11ef8:	mov	r3, #7
   11efc:	b	11ee0 <__assert_fail@plt+0xcec>
   11f00:	ldr	r2, [pc, #812]	; 12234 <__assert_fail@plt+0x1040>
   11f04:	mov	r3, #0
   11f08:	str	r2, [fp, #44]	; 0x2c
   11f0c:	str	r3, [fp]
   11f10:	mov	r6, #1
   11f14:	b	112f0 <__assert_fail@plt+0xfc>
   11f18:	mov	r2, #8
   11f1c:	b	11ef8 <__assert_fail@plt+0xd04>
   11f20:	cmp	r2, #0
   11f24:	beq	11b44 <__assert_fail@plt+0x950>
   11f28:	cmp	r6, #2
   11f2c:	beq	12448 <__assert_fail@plt+0x1254>
   11f30:	cmp	r6, #3
   11f34:	beq	123b0 <__assert_fail@plt+0x11bc>
   11f38:	cmp	r6, #1
   11f3c:	bne	11b30 <__assert_fail@plt+0x93c>
   11f40:	ldr	r0, [sl, r3, lsl #2]
   11f44:	ldr	r1, [sp, #12]
   11f48:	bl	12b4c <__assert_fail@plt+0x1958>
   11f4c:	cmp	r0, #0
   11f50:	beq	12550 <__assert_fail@plt+0x135c>
   11f54:	ldrd	r2, [sp, #56]	; 0x38
   11f58:	add	sl, sl, #4
   11f5c:	mov	r6, #0
   11f60:	strd	r2, [fp, #136]	; 0x88
   11f64:	b	11b44 <__assert_fail@plt+0x950>
   11f68:	mov	r0, #1
   11f6c:	b	11ebc <__assert_fail@plt+0xcc8>
   11f70:	ldr	r0, [pc, #720]	; 12248 <__assert_fail@plt+0x1054>
   11f74:	bl	14250 <__assert_fail@plt+0x305c>
   11f78:	b	11bcc <__assert_fail@plt+0x9d8>
   11f7c:	ldr	r3, [pc, #712]	; 1224c <__assert_fail@plt+0x1058>
   11f80:	ldr	r0, [r3]
   11f84:	bl	18e40 <__assert_fail@plt+0x7c4c>
   11f88:	cmn	r0, #1
   11f8c:	bne	11eb4 <__assert_fail@plt+0xcc0>
   11f90:	bl	110d4 <__errno_location@plt>
   11f94:	mov	r2, #5
   11f98:	ldr	r1, [pc, #688]	; 12250 <__assert_fail@plt+0x105c>
   11f9c:	ldr	r4, [r0]
   11fa0:	mov	r0, #0
   11fa4:	bl	10fc0 <dcgettext@plt>
   11fa8:	mov	r1, r4
   11fac:	mov	r2, r0
   11fb0:	mov	r0, #1
   11fb4:	bl	11044 <error@plt>
   11fb8:	cmp	r4, #15
   11fbc:	strgt	r4, [fp, #28]
   11fc0:	ldrgt	r5, [fp, #36]	; 0x24
   11fc4:	bgt	11d2c <__assert_fail@plt+0xb38>
   11fc8:	mov	r1, r4
   11fcc:	mov	r0, #16
   11fd0:	bl	1b088 <__assert_fail@plt+0x9e94>
   11fd4:	mul	r0, r4, r0
   11fd8:	str	r0, [fp, #28]
   11fdc:	b	11d1c <__assert_fail@plt+0xb28>
   11fe0:	mov	r0, sl
   11fe4:	ldr	r1, [sp, #12]
   11fe8:	bl	18104 <__assert_fail@plt+0x6f10>
   11fec:	mov	sl, r0
   11ff0:	add	r0, sp, #64	; 0x40
   11ff4:	bl	13e80 <__assert_fail@plt+0x2c8c>
   11ff8:	ldr	r8, [sp, #64]	; 0x40
   11ffc:	adds	r4, r4, #1
   12000:	adc	r5, r5, #0
   12004:	cmp	r8, #0
   12008:	and	r9, r9, r0
   1200c:	blt	11e90 <__assert_fail@plt+0xc9c>
   12010:	beq	12558 <__assert_fail@plt+0x1364>
   12014:	bl	110a4 <__ctype_b_loc@plt>
   12018:	lsl	r3, r8, #1
   1201c:	ldr	r2, [r0]
   12020:	ldrh	r3, [r2, r3]
   12024:	tst	r3, #16384	; 0x4000
   12028:	beq	11de8 <__assert_fail@plt+0xbf4>
   1202c:	strb	r8, [sl, r6]
   12030:	add	r6, r6, #1
   12034:	ldrb	r3, [fp, #25]
   12038:	cmp	r3, #0
   1203c:	beq	12050 <__assert_fail@plt+0xe5c>
   12040:	ldrd	r2, [fp, #160]	; 0xa0
   12044:	cmp	r5, r3
   12048:	cmpeq	r4, r2
   1204c:	bcs	12558 <__assert_fail@plt+0x1364>
   12050:	ldr	r3, [sp, #56]	; 0x38
   12054:	cmp	r3, r6
   12058:	bne	11ff0 <__assert_fail@plt+0xdfc>
   1205c:	b	11fe0 <__assert_fail@plt+0xdec>
   12060:	ldr	r3, [fp, #28]
   12064:	lsls	r0, r3, #1
   12068:	lsr	r3, r3, #31
   1206c:	bmi	127c0 <__assert_fail@plt+0x15cc>
   12070:	cmp	r3, #0
   12074:	bne	127c0 <__assert_fail@plt+0x15cc>
   12078:	bl	17f9c <__assert_fail@plt+0x6da8>
   1207c:	ldrb	sl, [fp, #25]
   12080:	ldr	r3, [fp, #28]
   12084:	ldrd	r6, [fp, #136]	; 0x88
   12088:	cmp	sl, #0
   1208c:	str	r0, [sp, #76]	; 0x4c
   12090:	add	r0, r0, r3
   12094:	str	r0, [sp, #80]	; 0x50
   12098:	beq	12194 <__assert_fail@plt+0xfa0>
   1209c:	str	r9, [sp, #12]
   120a0:	b	12138 <__assert_fail@plt+0xf44>
   120a4:	subs	ip, r2, r6
   120a8:	str	ip, [sp, #24]
   120ac:	ldr	ip, [sp, #12]
   120b0:	sbc	r3, r3, r7
   120b4:	str	r3, [sp, #28]
   120b8:	ldrd	r8, [sp, #24]
   120bc:	lsl	r4, ip, #2
   120c0:	add	r3, sp, #88	; 0x58
   120c4:	add	r3, r3, r4
   120c8:	ldr	r0, [fp, #28]
   120cc:	mov	r1, #0
   120d0:	cmp	r1, r9
   120d4:	ldr	r5, [r3, #-12]
   120d8:	cmpeq	r0, r8
   120dc:	movhi	r0, r8
   120e0:	add	r2, sp, #64	; 0x40
   120e4:	mov	r1, r5
   120e8:	bl	14a80 <__assert_fail@plt+0x388c>
   120ec:	ldr	r2, [sp, #64]	; 0x40
   120f0:	ldr	r3, [fp, #28]
   120f4:	cmp	r2, r3
   120f8:	and	sl, sl, r0
   120fc:	bcc	126bc <__assert_fail@plt+0x14c8>
   12100:	bne	127ac <__assert_fail@plt+0x15b8>
   12104:	ldr	r3, [sp, #12]
   12108:	str	r5, [sp]
   1210c:	eor	r1, r3, #1
   12110:	add	r3, sp, #88	; 0x58
   12114:	add	r3, r3, r1, lsl #2
   12118:	str	r1, [sp, #12]
   1211c:	ldr	r3, [r3, #-12]
   12120:	mov	r0, r6
   12124:	mov	r1, r7
   12128:	bl	13ef8 <__assert_fail@plt+0x2d04>
   1212c:	ldr	r3, [sp, #64]	; 0x40
   12130:	adds	r6, r6, r3
   12134:	adc	r7, r7, #0
   12138:	ldrd	r2, [fp, #160]	; 0xa0
   1213c:	cmp	r3, r7
   12140:	cmpeq	r2, r6
   12144:	bhi	120a4 <__assert_fail@plt+0xeb0>
   12148:	mov	r3, #0
   1214c:	str	sl, [sp, #12]
   12150:	str	r3, [sp, #64]	; 0x40
   12154:	ldr	r3, [fp, #44]	; 0x2c
   12158:	mov	r2, #10
   1215c:	mov	r0, r6
   12160:	mov	r1, r7
   12164:	blx	r3
   12168:	ldrb	r3, [fp, #25]
   1216c:	cmp	r3, #0
   12170:	beq	12184 <__assert_fail@plt+0xf90>
   12174:	ldrd	r2, [fp, #160]	; 0xa0
   12178:	cmp	r7, r3
   1217c:	cmpeq	r6, r2
   12180:	bcs	126cc <__assert_fail@plt+0x14d8>
   12184:	ldr	r0, [sp, #76]	; 0x4c
   12188:	bl	10f54 <free@plt>
   1218c:	ldr	r4, [sp, #12]
   12190:	b	11e9c <__assert_fail@plt+0xca8>
   12194:	add	r5, sp, #64	; 0x40
   12198:	mov	r4, r9
   1219c:	b	122ec <__assert_fail@plt+0x10f8>
   121a0:	andeq	sp, r2, r8, lsl #30
   121a4:	andeq	ip, r1, ip, asr r7
   121a8:	andeq	ip, r1, r0, asr r8
   121ac:	andeq	ip, r1, r4, lsr #15
   121b0:	andeq	r5, r1, r8, asr #5
   121b4:	andeq	lr, r2, r0, asr #3
   121b8:	andeq	lr, r2, r8, lsl #3
   121bc:	strdeq	fp, [r1], -r4
   121c0:	strdeq	r2, [r1], -r4
   121c4:			; <UNDEFINED> instruction: 0x0001b7b4
   121c8:	andeq	lr, r2, r8, lsl r1
   121cc:	andeq	ip, r1, r8, asr #17
   121d0:	strdeq	fp, [r1], -r0
   121d4:	andeq	lr, r2, r0, lsl r1
   121d8:	andeq	ip, r1, r0, lsl #18
   121dc:	ldrdeq	fp, [r1], -r8
   121e0:	andeq	lr, r2, r0, lsl r2
   121e4:	strdeq	ip, [r1], -r0
   121e8:	andeq	ip, r1, r4, lsl #18
   121ec:	andeq	ip, r1, r8, ror #17
   121f0:	andeq	ip, r1, r0, ror #17
   121f4:	andeq	sp, r1, r0, rrx
   121f8:	ldrdeq	ip, [r1], -r8
   121fc:	ldrdeq	ip, [r1], -r4
   12200:	strdeq	ip, [r1], -r8
   12204:	andeq	lr, r2, r8, lsl r2
   12208:	strdeq	ip, [r1], -r4
   1220c:	andeq	ip, r1, ip, ror #17
   12210:	andeq	ip, r1, r4, ror #17
   12214:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12218:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1221c:	andeq	ip, r1, r8, lsl #18
   12220:	andeq	lr, r2, r4, lsl r1
   12224:	andeq	fp, r1, r4, lsr #20
   12228:	andeq	ip, r1, r0, lsr #15
   1222c:	andeq	ip, r1, r8, lsl r9
   12230:	andeq	lr, r2, r8, ror #2
   12234:	strdeq	r2, [r1], -r0
   12238:	andeq	r4, r1, r8, lsl #3
   1223c:	andeq	r4, r1, r8, lsl r2
   12240:	andeq	fp, r1, ip, ror #13
   12244:			; <UNDEFINED> instruction: 0x0001c9b8
   12248:			; <UNDEFINED> instruction: 0x0001c9b4
   1224c:	andeq	lr, r2, r8, ror r1
   12250:	andeq	fp, r1, r0, ror r8
   12254:	andeq	fp, r1, r4, asr #9
   12258:	andeq	ip, r1, r8, asr #18
   1225c:	andeq	ip, r1, ip, asr r9
   12260:	andeq	ip, r1, r8, ror #22
   12264:	andeq	fp, r1, r0, asr #16
   12268:	andeq	lr, r2, ip, ror r1
   1226c:	andeq	fp, r1, r8, lsr r8
   12270:	andeq	fp, r1, r8, asr #16
   12274:	andeq	fp, r1, ip, lsr r8
   12278:	andeq	fp, r1, r4, asr #16
   1227c:	andeq	fp, r1, r4, lsr r8
   12280:	andeq	fp, r1, ip, asr #16
   12284:	andeq	r0, r0, r3, lsl #11
   12288:	andeq	r0, r0, r5, ror r5
   1228c:	andeq	ip, r1, r8, ror #19
   12290:	strdeq	fp, [r1], -ip
   12294:	andeq	ip, r1, ip, lsl #19
   12298:	andeq	ip, r1, r4, ror #16
   1229c:	muleq	r1, r0, r6
   122a0:	ldrdeq	r0, [r0], -r7
   122a4:			; <UNDEFINED> instruction: 0x0001c8bc
   122a8:	andeq	fp, r1, ip, asr #17
   122ac:	andeq	ip, r1, ip, lsr #17
   122b0:	andeq	lr, r2, r0, lsl #3
   122b4:	strdeq	fp, [r1], -r4
   122b8:	bne	12798 <__assert_fail@plt+0x15a4>
   122bc:	eor	r9, r9, #1
   122c0:	add	r3, sp, #88	; 0x58
   122c4:	lsl	r4, r9, #2
   122c8:	add	r3, r3, r4
   122cc:	str	sl, [sp]
   122d0:	mov	r0, r6
   122d4:	ldr	r3, [r3, #-12]
   122d8:	mov	r1, r7
   122dc:	bl	13ef8 <__assert_fail@plt+0x2d04>
   122e0:	ldr	r3, [sp, #64]	; 0x40
   122e4:	adds	r6, r6, r3
   122e8:	adc	r7, r7, #0
   122ec:	add	r3, sp, #88	; 0x58
   122f0:	add	r3, r3, r4
   122f4:	mov	r2, r5
   122f8:	ldr	sl, [r3, #-12]
   122fc:	ldr	r0, [fp, #28]
   12300:	mov	r1, sl
   12304:	bl	14a80 <__assert_fail@plt+0x388c>
   12308:	ldr	r2, [sp, #64]	; 0x40
   1230c:	ldr	r3, [fp, #28]
   12310:	cmp	r2, r3
   12314:	and	r8, r8, r0
   12318:	uxtb	r8, r8
   1231c:	bcs	122b8 <__assert_fail@plt+0x10c4>
   12320:	mov	r5, r2
   12324:	str	r8, [sp, #12]
   12328:	cmp	r5, #0
   1232c:	beq	12154 <__assert_fail@plt+0xf60>
   12330:	ldrd	r2, [fp, #36]	; 0x24
   12334:	mov	r1, #1
   12338:	str	r9, [sp, #32]
   1233c:	add	r3, r3, #4
   12340:	str	r5, [sp, #36]	; 0x24
   12344:	str	r4, [sp, #40]	; 0x28
   12348:	mov	sl, #0
   1234c:	mov	r9, r2
   12350:	mov	r5, r1
   12354:	mov	r4, r3
   12358:	strd	r6, [sp, #24]
   1235c:	cmp	sl, r9
   12360:	beq	124c0 <__assert_fail@plt+0x12cc>
   12364:	ldr	r3, [r4, sl, lsl #5]
   12368:	ldr	r2, [pc, #-284]	; 12254 <__assert_fail@plt+0x1060>
   1236c:	mov	r0, r5
   12370:	add	r3, r2, r3, lsl #2
   12374:	ldr	r8, [r3, #132]	; 0x84
   12378:	mov	r7, r8
   1237c:	b	12384 <__assert_fail@plt+0x1190>
   12380:	mov	r7, r1
   12384:	mov	r1, r7
   12388:	bl	1b068 <__assert_fail@plt+0x9e74>
   1238c:	mov	r0, r7
   12390:	cmp	r1, #0
   12394:	bne	12380 <__assert_fail@plt+0x118c>
   12398:	mov	r1, r7
   1239c:	mov	r0, r8
   123a0:	bl	1ae7c <__assert_fail@plt+0x9c88>
   123a4:	add	sl, sl, #1
   123a8:	mul	r5, r5, r0
   123ac:	b	1235c <__assert_fail@plt+0x1168>
   123b0:	cmp	r2, #0
   123b4:	moveq	r6, #3
   123b8:	beq	11b44 <__assert_fail@plt+0x950>
   123bc:	add	r3, r3, #1
   123c0:	ldr	r1, [sp, #12]
   123c4:	ldr	r0, [sl, r3, lsl #2]
   123c8:	bl	12b4c <__assert_fail@plt+0x1958>
   123cc:	cmp	r0, #0
   123d0:	bne	12728 <__assert_fail@plt+0x1534>
   123d4:	mov	r6, #3
   123d8:	ldrb	r3, [fp, #156]	; 0x9c
   123dc:	cmp	r3, #0
   123e0:	beq	11b44 <__assert_fail@plt+0x950>
   123e4:	mov	r2, #5
   123e8:	ldr	r1, [pc, #-408]	; 12258 <__assert_fail@plt+0x1064>
   123ec:	mov	r0, #0
   123f0:	bl	10fc0 <dcgettext@plt>
   123f4:	ldr	r3, [r9]
   123f8:	add	r3, r3, #1
   123fc:	mov	r4, r0
   12400:	ldr	r0, [sl, r3, lsl #2]
   12404:	bl	17a2c <__assert_fail@plt+0x6838>
   12408:	mov	r1, #0
   1240c:	mov	r2, r4
   12410:	mov	r3, r0
   12414:	mov	r0, r1
   12418:	bl	11044 <error@plt>
   1241c:	mov	r2, #5
   12420:	ldr	r1, [pc, #-460]	; 1225c <__assert_fail@plt+0x1068>
   12424:	mov	r0, #0
   12428:	bl	10fc0 <dcgettext@plt>
   1242c:	mov	r1, #0
   12430:	ldr	r2, [pc, #-472]	; 12260 <__assert_fail@plt+0x106c>
   12434:	mov	r3, r0
   12438:	mov	r0, r1
   1243c:	bl	11044 <error@plt>
   12440:	mov	r0, #1
   12444:	bl	14b4c <__assert_fail@plt+0x3958>
   12448:	add	r3, r3, #1
   1244c:	cmp	r2, #0
   12450:	ldr	r0, [sl, r3, lsl #2]
   12454:	bne	12480 <__assert_fail@plt+0x128c>
   12458:	ldrb	r3, [r0]
   1245c:	cmp	r3, #43	; 0x2b
   12460:	beq	12480 <__assert_fail@plt+0x128c>
   12464:	sub	r3, r3, #48	; 0x30
   12468:	cmp	r3, #9
   1246c:	bls	12480 <__assert_fail@plt+0x128c>
   12470:	mov	r6, #2
   12474:	b	11b44 <__assert_fail@plt+0x950>
   12478:	mov	r0, #0
   1247c:	bl	14b4c <__assert_fail@plt+0x3958>
   12480:	add	r1, sp, #64	; 0x40
   12484:	bl	12b4c <__assert_fail@plt+0x1958>
   12488:	cmp	r0, #0
   1248c:	beq	126b4 <__assert_fail@plt+0x14c0>
   12490:	ldrb	r3, [fp, #156]	; 0x9c
   12494:	cmp	r3, #0
   12498:	bne	126e4 <__assert_fail@plt+0x14f0>
   1249c:	ldr	r1, [r9]
   124a0:	ldrd	r2, [sp, #64]	; 0x40
   124a4:	mov	r6, #1
   124a8:	ldr	r0, [sl, r1, lsl #2]
   124ac:	add	r1, sl, r1, lsl #2
   124b0:	strd	r2, [fp, #136]	; 0x88
   124b4:	add	sl, sl, #4
   124b8:	str	r0, [r1, #4]
   124bc:	b	11b44 <__assert_fail@plt+0x950>
   124c0:	mov	r8, r5
   124c4:	ldr	r4, [sp, #40]	; 0x28
   124c8:	ldr	r5, [sp, #36]	; 0x24
   124cc:	add	r3, sp, #88	; 0x58
   124d0:	add	r3, r3, r4
   124d4:	sub	r0, r5, #1
   124d8:	mov	r1, r8
   124dc:	add	r0, r0, r8
   124e0:	ldr	r4, [r3, #-12]
   124e4:	bl	1ae7c <__assert_fail@plt+0x9c88>
   124e8:	ldr	r9, [sp, #32]
   124ec:	mov	r1, #0
   124f0:	ldrd	r6, [sp, #24]
   124f4:	mul	r2, r8, r0
   124f8:	add	r0, r4, r5
   124fc:	sub	r2, r2, r5
   12500:	bl	11104 <memset@plt>
   12504:	eor	r3, r9, #1
   12508:	add	r2, sp, #88	; 0x58
   1250c:	add	r3, r2, r3, lsl #2
   12510:	str	r4, [sp]
   12514:	mov	r0, r6
   12518:	ldr	r3, [r3, #-12]
   1251c:	mov	r1, r7
   12520:	mov	r2, r5
   12524:	bl	13ef8 <__assert_fail@plt+0x2d04>
   12528:	ldr	r3, [sp, #64]	; 0x40
   1252c:	adds	r6, r6, r3
   12530:	adc	r7, r7, #0
   12534:	b	12154 <__assert_fail@plt+0xf60>
   12538:	cmp	r2, #0
   1253c:	ldr	r2, [sl, r3, lsl #2]
   12540:	bne	11f40 <__assert_fail@plt+0xd4c>
   12544:	ldrb	r2, [r2]
   12548:	cmp	r2, #43	; 0x2b
   1254c:	beq	11f40 <__assert_fail@plt+0xd4c>
   12550:	mov	r6, #1
   12554:	b	11b44 <__assert_fail@plt+0x950>
   12558:	mvn	r0, r6
   1255c:	adds	r0, r0, r4
   12560:	mov	r3, #0
   12564:	mvn	r1, #0
   12568:	strb	r3, [sl, r6]
   1256c:	adc	r1, r1, r5
   12570:	ldr	r3, [fp, #44]	; 0x2c
   12574:	mov	r2, #32
   12578:	blx	r3
   1257c:	ldr	r8, [pc, #-800]	; 12264 <__assert_fail@plt+0x1070>
   12580:	sub	r6, sl, #1
   12584:	ldrb	r1, [r6, #1]!
   12588:	ldr	r3, [pc, #-808]	; 12268 <__assert_fail@plt+0x1074>
   1258c:	cmp	r1, #0
   12590:	ldr	r3, [r3]
   12594:	str	r1, [sp, #64]	; 0x40
   12598:	beq	12654 <__assert_fail@plt+0x1460>
   1259c:	sub	r2, r1, #7
   125a0:	cmp	r2, #6
   125a4:	ldrls	pc, [pc, r2, lsl #2]
   125a8:	b	128d8 <__assert_fail@plt+0x16e4>
   125ac:	andeq	r2, r1, r0, asr #12
   125b0:	andeq	r2, r1, ip, lsr #12
   125b4:	andeq	r2, r1, r8, lsl r6
   125b8:	andeq	r2, r1, r4, lsl #12
   125bc:	strdeq	r2, [r1], -r0
   125c0:	ldrdeq	r2, [r1], -ip
   125c4:	andeq	r2, r1, r8, asr #11
   125c8:	mov	r2, #2
   125cc:	mov	r1, #1
   125d0:	mov	r0, r8
   125d4:	bl	10fa8 <fwrite_unlocked@plt>
   125d8:	b	12584 <__assert_fail@plt+0x1390>
   125dc:	mov	r2, #2
   125e0:	mov	r1, #1
   125e4:	ldr	r0, [pc, #-896]	; 1226c <__assert_fail@plt+0x1078>
   125e8:	bl	10fa8 <fwrite_unlocked@plt>
   125ec:	b	12584 <__assert_fail@plt+0x1390>
   125f0:	mov	r2, #2
   125f4:	mov	r1, #1
   125f8:	ldr	r0, [pc, #-912]	; 12270 <__assert_fail@plt+0x107c>
   125fc:	bl	10fa8 <fwrite_unlocked@plt>
   12600:	b	12584 <__assert_fail@plt+0x1390>
   12604:	mov	r2, #2
   12608:	mov	r1, #1
   1260c:	ldr	r0, [pc, #-928]	; 12274 <__assert_fail@plt+0x1080>
   12610:	bl	10fa8 <fwrite_unlocked@plt>
   12614:	b	12584 <__assert_fail@plt+0x1390>
   12618:	mov	r2, #2
   1261c:	mov	r1, #1
   12620:	ldr	r0, [pc, #-944]	; 12278 <__assert_fail@plt+0x1084>
   12624:	bl	10fa8 <fwrite_unlocked@plt>
   12628:	b	12584 <__assert_fail@plt+0x1390>
   1262c:	mov	r2, #2
   12630:	mov	r1, #1
   12634:	ldr	r0, [pc, #-960]	; 1227c <__assert_fail@plt+0x1088>
   12638:	bl	10fa8 <fwrite_unlocked@plt>
   1263c:	b	12584 <__assert_fail@plt+0x1390>
   12640:	mov	r2, #2
   12644:	mov	r1, #1
   12648:	ldr	r0, [pc, #-976]	; 12280 <__assert_fail@plt+0x108c>
   1264c:	bl	10fa8 <fwrite_unlocked@plt>
   12650:	b	12584 <__assert_fail@plt+0x1390>
   12654:	ldr	r2, [r3, #20]
   12658:	ldr	r1, [r3, #24]
   1265c:	cmp	r2, r1
   12660:	addcc	r0, r2, #1
   12664:	movcc	r1, #10
   12668:	strcc	r0, [r3, #20]
   1266c:	strbcc	r1, [r2]
   12670:	bcc	11de8 <__assert_fail@plt+0xbf4>
   12674:	mov	r0, r3
   12678:	mov	r1, #10
   1267c:	bl	11164 <__overflow@plt>
   12680:	b	11de8 <__assert_fail@plt+0xbf4>
   12684:	ldr	r3, [sp, #32]
   12688:	cmp	r3, #0
   1268c:	moveq	r4, #1
   12690:	beq	11fc8 <__assert_fail@plt+0xdd4>
   12694:	ldr	r3, [sp, #36]	; 0x24
   12698:	cmp	r3, #0
   1269c:	moveq	r9, #1
   126a0:	moveq	r4, r9
   126a4:	beq	11cf0 <__assert_fail@plt+0xafc>
   126a8:	ldr	r3, [sp, #36]	; 0x24
   126ac:	str	r3, [fp, #28]
   126b0:	b	11d1c <__assert_fail@plt+0xb28>
   126b4:	mov	r6, #2
   126b8:	b	123d8 <__assert_fail@plt+0x11e4>
   126bc:	ldr	r9, [sp, #12]
   126c0:	mov	r5, r2
   126c4:	str	sl, [sp, #12]
   126c8:	b	12328 <__assert_fail@plt+0x1134>
   126cc:	mov	r0, #0
   126d0:	bl	13a10 <__assert_fail@plt+0x281c>
   126d4:	ldr	r3, [sp, #12]
   126d8:	and	r3, r3, r0
   126dc:	str	r3, [sp, #12]
   126e0:	b	12184 <__assert_fail@plt+0xf90>
   126e4:	ldr	r3, [r9]
   126e8:	ldr	r1, [sp, #12]
   126ec:	ldr	r0, [sl, r3, lsl #2]
   126f0:	bl	12b4c <__assert_fail@plt+0x1958>
   126f4:	cmp	r0, #0
   126f8:	beq	1249c <__assert_fail@plt+0x12a8>
   126fc:	ldrd	r2, [sp, #56]	; 0x38
   12700:	mov	r1, #1
   12704:	add	sl, sl, #8
   12708:	strd	r2, [fp, #136]	; 0x88
   1270c:	ldr	r3, [sp, #64]	; 0x40
   12710:	strb	r1, [fp, #157]	; 0x9d
   12714:	str	r3, [sp, #48]	; 0x30
   12718:	ldr	r3, [sp, #68]	; 0x44
   1271c:	mov	r6, #0
   12720:	str	r3, [sp, #52]	; 0x34
   12724:	b	11b44 <__assert_fail@plt+0x950>
   12728:	ldr	r3, [r9]
   1272c:	add	r1, sp, #64	; 0x40
   12730:	add	r3, r3, #2
   12734:	ldr	r0, [sl, r3, lsl #2]
   12738:	bl	12b4c <__assert_fail@plt+0x1958>
   1273c:	cmp	r0, #0
   12740:	beq	123d4 <__assert_fail@plt+0x11e0>
   12744:	ldr	r1, [r9]
   12748:	ldrd	r2, [sp, #56]	; 0x38
   1274c:	mov	r5, #1
   12750:	ldr	r0, [sl, r1, lsl #2]
   12754:	strd	r2, [fp, #136]	; 0x88
   12758:	ldr	r3, [sp, #64]	; 0x40
   1275c:	add	r1, sl, r1, lsl #2
   12760:	str	r3, [sp, #48]	; 0x30
   12764:	ldr	r3, [sp, #68]	; 0x44
   12768:	str	r0, [r1, #8]
   1276c:	add	sl, sl, #8
   12770:	strb	r5, [fp, #157]	; 0x9d
   12774:	mov	r6, r5
   12778:	str	r3, [sp, #52]	; 0x34
   1277c:	b	11b44 <__assert_fail@plt+0x950>
   12780:	mov	r0, sl
   12784:	bl	10f54 <free@plt>
   12788:	mov	r0, #0
   1278c:	bl	13a10 <__assert_fail@plt+0x281c>
   12790:	and	r9, r9, r0
   12794:	b	11e98 <__assert_fail@plt+0xca4>
   12798:	ldr	r3, [pc, #-1296]	; 12290 <__assert_fail@plt+0x109c>
   1279c:	ldr	r2, [pc, #-1312]	; 12284 <__assert_fail@plt+0x1090>
   127a0:	ldr	r1, [pc, #-1280]	; 122a8 <__assert_fail@plt+0x10b4>
   127a4:	ldr	r0, [pc, #-1312]	; 1228c <__assert_fail@plt+0x1098>
   127a8:	bl	111f4 <__assert_fail@plt>
   127ac:	ldr	r3, [pc, #-1316]	; 12290 <__assert_fail@plt+0x109c>
   127b0:	ldr	r2, [pc, #-1328]	; 12288 <__assert_fail@plt+0x1094>
   127b4:	ldr	r1, [pc, #-1300]	; 122a8 <__assert_fail@plt+0x10b4>
   127b8:	ldr	r0, [pc, #-1332]	; 1228c <__assert_fail@plt+0x1098>
   127bc:	bl	111f4 <__assert_fail@plt>
   127c0:	bl	181e4 <__assert_fail@plt+0x6ff0>
   127c4:	ldr	r1, [pc, #-1336]	; 12294 <__assert_fail@plt+0x10a0>
   127c8:	mov	r2, #5
   127cc:	mov	r0, #0
   127d0:	bl	10fc0 <dcgettext@plt>
   127d4:	mov	r1, #0
   127d8:	mov	r2, r0
   127dc:	mov	r0, #1
   127e0:	bl	11044 <error@plt>
   127e4:	bl	10fcc <__stack_chk_fail@plt>
   127e8:	ldr	r2, [r9]
   127ec:	sub	r3, r6, #228	; 0xe4
   127f0:	str	r2, [sp]
   127f4:	ldr	r1, [sp, #56]	; 0x38
   127f8:	mov	r2, #106	; 0x6a
   127fc:	bl	183a0 <__assert_fail@plt+0x71ac>
   12800:	mov	r2, #5
   12804:	ldr	r1, [pc, #-1396]	; 12298 <__assert_fail@plt+0x10a4>
   12808:	mov	r0, #0
   1280c:	bl	10fc0 <dcgettext@plt>
   12810:	ldr	r3, [r6]
   12814:	mov	r1, #0
   12818:	ldrb	r3, [r3]
   1281c:	mov	r2, r0
   12820:	mov	r0, #1
   12824:	bl	11044 <error@plt>
   12828:	mov	r2, #5
   1282c:	ldr	r1, [pc, #-1416]	; 122ac <__assert_fail@plt+0x10b8>
   12830:	bl	10fc0 <dcgettext@plt>
   12834:	ldr	r3, [pc, #-1420]	; 122b0 <__assert_fail@plt+0x10bc>
   12838:	mov	r4, r0
   1283c:	ldr	r0, [r3]
   12840:	bl	17a2c <__assert_fail@plt+0x6838>
   12844:	mov	r2, r4
   12848:	mov	r1, r9
   1284c:	mov	r3, r0
   12850:	mov	r0, #1
   12854:	bl	11044 <error@plt>
   12858:	ldr	r3, [pc, #-1476]	; 1229c <__assert_fail@plt+0x10a8>
   1285c:	ldr	r2, [pc, #-1476]	; 122a0 <__assert_fail@plt+0x10ac>
   12860:	ldr	r1, [pc, #-1472]	; 122a8 <__assert_fail@plt+0x10b4>
   12864:	ldr	r0, [pc, #-1480]	; 122a4 <__assert_fail@plt+0x10b0>
   12868:	bl	111f4 <__assert_fail@plt>
   1286c:	ldr	r3, [pc, #-1476]	; 122b0 <__assert_fail@plt+0x10bc>
   12870:	ldr	r1, [sp, #56]	; 0x38
   12874:	ldr	r2, [r3]
   12878:	sub	r3, r9, #228	; 0xe4
   1287c:	str	r2, [sp]
   12880:	mov	r2, #83	; 0x53
   12884:	bl	183a0 <__assert_fail@plt+0x71ac>
   12888:	mov	r2, #5
   1288c:	mov	r5, r1
   12890:	ldr	r1, [pc, #-1516]	; 122ac <__assert_fail@plt+0x10b8>
   12894:	bl	10fc0 <dcgettext@plt>
   12898:	ldr	r3, [pc, #-1520]	; 122b0 <__assert_fail@plt+0x10bc>
   1289c:	mov	r4, r0
   128a0:	ldr	r0, [r3]
   128a4:	bl	17a2c <__assert_fail@plt+0x6838>
   128a8:	mov	r2, r4
   128ac:	mov	r1, r5
   128b0:	mov	r3, r0
   128b4:	mov	r0, #1
   128b8:	bl	11044 <error@plt>
   128bc:	ldr	r3, [pc, #-1556]	; 122b0 <__assert_fail@plt+0x10bc>
   128c0:	ldr	r1, [sp, #56]	; 0x38
   128c4:	ldr	r2, [r3]
   128c8:	ldr	r3, [pc, #-1564]	; 122b4 <__assert_fail@plt+0x10c0>
   128cc:	str	r2, [sp]
   128d0:	mov	r2, #119	; 0x77
   128d4:	bl	183a0 <__assert_fail@plt+0x71ac>
   128d8:	ldr	r2, [r3, #20]
   128dc:	ldr	r0, [r3, #24]
   128e0:	cmp	r2, r0
   128e4:	addcc	r0, r2, #1
   128e8:	strcc	r0, [r3, #20]
   128ec:	strbcc	r1, [r2]
   128f0:	bcc	12584 <__assert_fail@plt+0x1390>
   128f4:	mov	r0, r3
   128f8:	bl	11164 <__overflow@plt>
   128fc:	b	12584 <__assert_fail@plt+0x1390>
   12900:	mov	fp, #0
   12904:	mov	lr, #0
   12908:	pop	{r1}		; (ldr r1, [sp], #4)
   1290c:	mov	r2, sp
   12910:	push	{r2}		; (str r2, [sp, #-4]!)
   12914:	push	{r0}		; (str r0, [sp, #-4]!)
   12918:	ldr	ip, [pc, #16]	; 12930 <__assert_fail@plt+0x173c>
   1291c:	push	{ip}		; (str ip, [sp, #-4]!)
   12920:	ldr	r0, [pc, #12]	; 12934 <__assert_fail@plt+0x1740>
   12924:	ldr	r3, [pc, #12]	; 12938 <__assert_fail@plt+0x1744>
   12928:	bl	11074 <__libc_start_main@plt>
   1292c:	bl	111dc <abort@plt>
   12930:	muleq	r1, ip, r4
   12934:	andeq	r1, r1, r0, lsl #4
   12938:	andeq	fp, r1, ip, lsr r4
   1293c:	ldr	r3, [pc, #20]	; 12958 <__assert_fail@plt+0x1764>
   12940:	ldr	r2, [pc, #20]	; 1295c <__assert_fail@plt+0x1768>
   12944:	add	r3, pc, r3
   12948:	ldr	r2, [r3, r2]
   1294c:	cmp	r2, #0
   12950:	bxeq	lr
   12954:	b	1108c <__gmon_start__@plt>
   12958:			; <UNDEFINED> instruction: 0x0001b6b4
   1295c:	andeq	r0, r0, r4, lsl #2
   12960:	ldr	r0, [pc, #24]	; 12980 <__assert_fail@plt+0x178c>
   12964:	ldr	r3, [pc, #24]	; 12984 <__assert_fail@plt+0x1790>
   12968:	cmp	r3, r0
   1296c:	bxeq	lr
   12970:	ldr	r3, [pc, #16]	; 12988 <__assert_fail@plt+0x1794>
   12974:	cmp	r3, #0
   12978:	bxeq	lr
   1297c:	bx	r3
   12980:	andeq	lr, r2, r0, ror #2
   12984:	andeq	lr, r2, r0, ror #2
   12988:	andeq	r0, r0, r0
   1298c:	ldr	r0, [pc, #36]	; 129b8 <__assert_fail@plt+0x17c4>
   12990:	ldr	r1, [pc, #36]	; 129bc <__assert_fail@plt+0x17c8>
   12994:	sub	r1, r1, r0
   12998:	asr	r1, r1, #2
   1299c:	add	r1, r1, r1, lsr #31
   129a0:	asrs	r1, r1, #1
   129a4:	bxeq	lr
   129a8:	ldr	r3, [pc, #16]	; 129c0 <__assert_fail@plt+0x17cc>
   129ac:	cmp	r3, #0
   129b0:	bxeq	lr
   129b4:	bx	r3
   129b8:	andeq	lr, r2, r0, ror #2
   129bc:	andeq	lr, r2, r0, ror #2
   129c0:	andeq	r0, r0, r0
   129c4:	push	{r4, lr}
   129c8:	ldr	r4, [pc, #24]	; 129e8 <__assert_fail@plt+0x17f4>
   129cc:	ldrb	r3, [r4]
   129d0:	cmp	r3, #0
   129d4:	popne	{r4, pc}
   129d8:	bl	12960 <__assert_fail@plt+0x176c>
   129dc:	mov	r3, #1
   129e0:	strb	r3, [r4]
   129e4:	pop	{r4, pc}
   129e8:	andeq	lr, r2, r4, lsl #3
   129ec:	b	1298c <__assert_fail@plt+0x1798>
   129f0:	bx	lr
   129f4:	ldr	ip, [pc, #320]	; 12b3c <__assert_fail@plt+0x1948>
   129f8:	push	{r4, r5, r6, r7, r8, lr}
   129fc:	sub	sp, sp, #32
   12a00:	ldr	r8, [pc, #312]	; 12b40 <__assert_fail@plt+0x194c>
   12a04:	ldr	r3, [ip, #4]
   12a08:	ldr	r7, [ip]
   12a0c:	ldr	ip, [r8]
   12a10:	add	r6, sp, #23
   12a14:	strb	r2, [sp, #23]
   12a18:	cmp	r3, #10
   12a1c:	mov	r2, #0
   12a20:	mov	r4, r0
   12a24:	mov	r5, r1
   12a28:	sub	r7, r6, r7
   12a2c:	str	ip, [sp, #28]
   12a30:	strb	r2, [sp, #24]
   12a34:	beq	12a90 <__assert_fail@plt+0x189c>
   12a38:	cmp	r3, #16
   12a3c:	beq	12b08 <__assert_fail@plt+0x1914>
   12a40:	cmp	r3, #8
   12a44:	beq	12adc <__assert_fail@plt+0x18e8>
   12a48:	cmp	r7, r6
   12a4c:	bcs	12ad4 <__assert_fail@plt+0x18e0>
   12a50:	mov	r3, #48	; 0x30
   12a54:	strb	r3, [r6, #-1]!
   12a58:	cmp	r7, r6
   12a5c:	bne	12a54 <__assert_fail@plt+0x1860>
   12a60:	ldr	r3, [pc, #220]	; 12b44 <__assert_fail@plt+0x1950>
   12a64:	mov	r0, r7
   12a68:	ldr	r1, [r3]
   12a6c:	bl	10f24 <fputs_unlocked@plt>
   12a70:	ldr	r2, [sp, #28]
   12a74:	ldr	r3, [r8]
   12a78:	cmp	r2, r3
   12a7c:	bne	12b38 <__assert_fail@plt+0x1944>
   12a80:	add	sp, sp, #32
   12a84:	pop	{r4, r5, r6, r7, r8, pc}
   12a88:	mov	r4, r0
   12a8c:	mov	r5, r1
   12a90:	mov	r2, #10
   12a94:	mov	r3, #0
   12a98:	mov	r0, r4
   12a9c:	mov	r1, r5
   12aa0:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   12aa4:	mov	r0, r4
   12aa8:	mov	r1, r5
   12aac:	mov	r3, #0
   12ab0:	add	r2, r2, #48	; 0x30
   12ab4:	strb	r2, [r6, #-1]!
   12ab8:	mov	r2, #10
   12abc:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   12ac0:	cmp	r5, #0
   12ac4:	cmpeq	r4, #9
   12ac8:	bhi	12a88 <__assert_fail@plt+0x1894>
   12acc:	cmp	r7, r6
   12ad0:	bcc	12a50 <__assert_fail@plt+0x185c>
   12ad4:	mov	r7, r6
   12ad8:	b	12a60 <__assert_fail@plt+0x186c>
   12adc:	lsr	r2, r4, #3
   12ae0:	orr	r2, r2, r5, lsl #29
   12ae4:	lsr	r1, r5, #3
   12ae8:	and	r3, r4, #7
   12aec:	mov	r5, r1
   12af0:	mov	r4, r2
   12af4:	add	r3, r3, #48	; 0x30
   12af8:	orrs	r2, r4, r5
   12afc:	strb	r3, [r6, #-1]!
   12b00:	bne	12adc <__assert_fail@plt+0x18e8>
   12b04:	b	12a48 <__assert_fail@plt+0x1854>
   12b08:	ldr	r0, [pc, #56]	; 12b48 <__assert_fail@plt+0x1954>
   12b0c:	and	r2, r4, #15
   12b10:	lsr	r3, r4, #4
   12b14:	orr	r3, r3, r5, lsl #28
   12b18:	lsr	r1, r5, #4
   12b1c:	ldrb	r2, [r0, r2]
   12b20:	mov	r4, r3
   12b24:	mov	r5, r1
   12b28:	orrs	r3, r4, r5
   12b2c:	strb	r2, [r6, #-1]!
   12b30:	bne	12b0c <__assert_fail@plt+0x1918>
   12b34:	b	12a48 <__assert_fail@plt+0x1854>
   12b38:	bl	10fcc <__stack_chk_fail@plt>
   12b3c:	andeq	lr, r2, r8, lsl #3
   12b40:	andeq	sp, r2, r8, lsl #30
   12b44:	andeq	lr, r2, ip, ror r1
   12b48:	andeq	fp, r1, r4, lsl #16
   12b4c:	push	{r4, r5, lr}
   12b50:	mov	r4, r0
   12b54:	ldrb	r0, [r0]
   12b58:	sub	sp, sp, #12
   12b5c:	cmp	r0, #0
   12b60:	beq	12ba8 <__assert_fail@plt+0x19b4>
   12b64:	cmp	r0, #43	; 0x2b
   12b68:	addeq	r4, r4, #1
   12b6c:	mov	r5, r1
   12b70:	mov	r0, r4
   12b74:	mov	r1, #46	; 0x2e
   12b78:	bl	110c8 <strchr@plt>
   12b7c:	cmp	r0, #0
   12b80:	movne	r2, #10
   12b84:	beq	12bb0 <__assert_fail@plt+0x19bc>
   12b88:	ldr	r1, [pc, #72]	; 12bd8 <__assert_fail@plt+0x19e4>
   12b8c:	mov	r3, r5
   12b90:	str	r1, [sp]
   12b94:	mov	r0, r4
   12b98:	mov	r1, #0
   12b9c:	bl	18438 <__assert_fail@plt+0x7244>
   12ba0:	clz	r0, r0
   12ba4:	lsr	r0, r0, #5
   12ba8:	add	sp, sp, #12
   12bac:	pop	{r4, r5, pc}
   12bb0:	ldrb	r3, [r4]
   12bb4:	cmp	r3, #48	; 0x30
   12bb8:	movne	r2, #8
   12bbc:	bne	12b88 <__assert_fail@plt+0x1994>
   12bc0:	ldrb	r3, [r4, #1]
   12bc4:	and	r3, r3, #223	; 0xdf
   12bc8:	cmp	r3, #88	; 0x58
   12bcc:	movne	r2, #8
   12bd0:	moveq	r2, #16
   12bd4:	b	12b88 <__assert_fail@plt+0x1994>
   12bd8:	andeq	fp, r1, r8, lsl r8
   12bdc:	ldr	r3, [pc, #276]	; 12cf8 <__assert_fail@plt+0x1b04>
   12be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12be4:	mov	r5, #0
   12be8:	mov	r7, #0
   12bec:	sub	sp, sp, #36	; 0x24
   12bf0:	mov	r4, r0
   12bf4:	mov	r6, r1
   12bf8:	mov	r0, r1
   12bfc:	ldr	r3, [r3]
   12c00:	mov	r1, r7
   12c04:	cmp	r5, r7
   12c08:	cmpeq	r4, r6
   12c0c:	strd	r4, [sp, #8]
   12c10:	strd	r0, [sp, #16]
   12c14:	str	r3, [sp, #28]
   12c18:	ldr	r8, [sp, #76]	; 0x4c
   12c1c:	bls	12cd8 <__assert_fail@plt+0x1ae4>
   12c20:	subs	r6, r4, #1
   12c24:	asr	fp, r8, #31
   12c28:	mov	r9, r2
   12c2c:	mul	r2, r6, fp
   12c30:	sbc	r3, r5, #0
   12c34:	umull	r6, r7, r6, r8
   12c38:	mla	r3, r8, r3, r2
   12c3c:	mov	sl, r8
   12c40:	add	r7, r3, r7
   12c44:	mov	r8, r9
   12c48:	ldr	r9, [sp, #76]	; 0x4c
   12c4c:	b	12ca4 <__assert_fail@plt+0x1ab0>
   12c50:	cmp	r2, #32
   12c54:	strbhi	r2, [sp, #24]
   12c58:	ldrls	r1, [pc, #156]	; 12cfc <__assert_fail@plt+0x1b08>
   12c5c:	addhi	r2, sp, #24
   12c60:	addls	r2, r1, r2, lsl #2
   12c64:	movhi	r1, #0
   12c68:	strbhi	r1, [sp, #25]
   12c6c:	sub	r1, r9, r3
   12c70:	str	r3, [sp, #4]
   12c74:	ldr	r3, [sp, #72]	; 0x48
   12c78:	ldr	r0, [pc, #128]	; 12d00 <__assert_fail@plt+0x1b0c>
   12c7c:	add	r1, r1, r3
   12c80:	bl	18290 <__assert_fail@plt+0x709c>
   12c84:	ldrd	r2, [sp, #16]
   12c88:	subs	r6, r6, sl
   12c8c:	sbc	r7, r7, fp
   12c90:	cmp	r5, r3
   12c94:	ldr	r3, [sp, #4]
   12c98:	cmpeq	r4, r2
   12c9c:	mov	r9, r3
   12ca0:	beq	12cd8 <__assert_fail@plt+0x1ae4>
   12ca4:	subs	r4, r4, #1
   12ca8:	ldrd	r2, [sp, #8]
   12cac:	mov	r0, r6
   12cb0:	mov	r1, r7
   12cb4:	sbc	r5, r5, #0
   12cb8:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   12cbc:	ldrb	r2, [r8], #1
   12cc0:	and	r2, r2, #127	; 0x7f
   12cc4:	cmp	r2, #127	; 0x7f
   12cc8:	mov	r3, r0
   12ccc:	bne	12c50 <__assert_fail@plt+0x1a5c>
   12cd0:	ldr	r2, [pc, #44]	; 12d04 <__assert_fail@plt+0x1b10>
   12cd4:	b	12c6c <__assert_fail@plt+0x1a78>
   12cd8:	ldr	r3, [pc, #24]	; 12cf8 <__assert_fail@plt+0x1b04>
   12cdc:	ldr	r2, [sp, #28]
   12ce0:	ldr	r3, [r3]
   12ce4:	cmp	r2, r3
   12ce8:	bne	12cf4 <__assert_fail@plt+0x1b00>
   12cec:	add	sp, sp, #36	; 0x24
   12cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cf4:	bl	10fcc <__stack_chk_fail@plt>
   12cf8:	andeq	sp, r2, r8, lsl #30
   12cfc:	andeq	fp, r1, r4, asr #9
   12d00:	andeq	fp, r1, r0, lsr #16
   12d04:	andeq	fp, r1, ip, lsl r8
   12d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d0c:	mov	r4, r1
   12d10:	ldr	r1, [pc, #268]	; 12e24 <__assert_fail@plt+0x1c30>
   12d14:	mov	fp, #0
   12d18:	mov	r5, #0
   12d1c:	sub	sp, sp, #44	; 0x2c
   12d20:	mov	sl, r0
   12d24:	ldr	r1, [r1]
   12d28:	cmp	fp, r5
   12d2c:	cmpeq	r0, r4
   12d30:	strd	sl, [sp]
   12d34:	strd	r4, [sp, #8]
   12d38:	str	r1, [sp, #36]	; 0x24
   12d3c:	ldr	r6, [sp, #84]	; 0x54
   12d40:	bls	12e04 <__assert_fail@plt+0x1c10>
   12d44:	subs	r4, sl, #1
   12d48:	asr	r1, r6, #31
   12d4c:	mov	r7, r2
   12d50:	mul	r2, r4, r1
   12d54:	mov	r9, r3
   12d58:	sbc	r3, fp, #0
   12d5c:	umull	r4, r5, r4, r6
   12d60:	mla	r3, r6, r3, r2
   12d64:	mov	r0, r6
   12d68:	add	r5, r3, r5
   12d6c:	strd	r0, [sp, #16]
   12d70:	b	12da8 <__assert_fail@plt+0x1bb4>
   12d74:	mov	ip, r7
   12d78:	ldrd	r2, [ip], #8
   12d7c:	mov	r0, r9
   12d80:	mov	r7, ip
   12d84:	bl	18290 <__assert_fail@plt+0x709c>
   12d88:	ldrd	r2, [sp, #16]
   12d8c:	mov	r6, r8
   12d90:	subs	r4, r4, r2
   12d94:	sbc	r5, r5, r3
   12d98:	ldrd	r2, [sp, #8]
   12d9c:	cmp	fp, r3
   12da0:	cmpeq	sl, r2
   12da4:	beq	12e04 <__assert_fail@plt+0x1c10>
   12da8:	subs	sl, sl, #1
   12dac:	ldrd	r2, [sp]
   12db0:	mov	r0, r4
   12db4:	mov	r1, r5
   12db8:	sbc	fp, fp, #0
   12dbc:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   12dc0:	ldr	r3, [pc, #96]	; 12e28 <__assert_fail@plt+0x1c34>
   12dc4:	ldr	r2, [sp, #80]	; 0x50
   12dc8:	ldrb	r3, [r3, #8]
   12dcc:	cmp	r3, #0
   12dd0:	sub	r1, r6, r0
   12dd4:	mov	r8, r0
   12dd8:	add	r1, r1, r2
   12ddc:	beq	12d74 <__assert_fail@plt+0x1b80>
   12de0:	add	ip, r7, #8
   12de4:	mov	r3, ip
   12de8:	add	r2, sp, #24
   12dec:	ldrb	r0, [r3, #-1]!
   12df0:	cmp	r3, r7
   12df4:	strb	r0, [r2], #1
   12df8:	bne	12dec <__assert_fail@plt+0x1bf8>
   12dfc:	ldrd	r2, [sp, #24]
   12e00:	b	12d7c <__assert_fail@plt+0x1b88>
   12e04:	ldr	r3, [pc, #24]	; 12e24 <__assert_fail@plt+0x1c30>
   12e08:	ldr	r2, [sp, #36]	; 0x24
   12e0c:	ldr	r3, [r3]
   12e10:	cmp	r2, r3
   12e14:	bne	12e20 <__assert_fail@plt+0x1c2c>
   12e18:	add	sp, sp, #44	; 0x2c
   12e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e20:	bl	10fcc <__stack_chk_fail@plt>
   12e24:	andeq	sp, r2, r8, lsl #30
   12e28:	andeq	lr, r2, r8, lsl #3
   12e2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e30:	mov	r6, r1
   12e34:	ldr	r1, [pc, #284]	; 12f58 <__assert_fail@plt+0x1d64>
   12e38:	mov	r5, #0
   12e3c:	mov	r7, #0
   12e40:	sub	sp, sp, #44	; 0x2c
   12e44:	mov	r4, r0
   12e48:	ldr	r1, [r1]
   12e4c:	cmp	r5, r7
   12e50:	cmpeq	r0, r6
   12e54:	strd	r4, [sp]
   12e58:	strd	r6, [sp, #8]
   12e5c:	str	r3, [sp, #20]
   12e60:	str	r1, [sp, #36]	; 0x24
   12e64:	ldr	r8, [sp, #84]	; 0x54
   12e68:	bls	12f38 <__assert_fail@plt+0x1d44>
   12e6c:	subs	r6, r4, #1
   12e70:	asr	r1, r8, #31
   12e74:	mov	sl, r2
   12e78:	mul	r2, r6, r1
   12e7c:	sbc	r3, r5, #0
   12e80:	umull	r6, r7, r6, r8
   12e84:	mla	r3, r8, r3, r2
   12e88:	mov	r0, r8
   12e8c:	add	r7, r3, r7
   12e90:	strd	r0, [sp, #24]
   12e94:	b	12ec4 <__assert_fail@plt+0x1cd0>
   12e98:	ldr	r0, [sp, #20]
   12e9c:	bl	18290 <__assert_fail@plt+0x709c>
   12ea0:	ldrd	r2, [sp, #24]
   12ea4:	add	sl, sl, #4
   12ea8:	mov	r8, fp
   12eac:	subs	r6, r6, r2
   12eb0:	sbc	r7, r7, r3
   12eb4:	ldrd	r2, [sp, #8]
   12eb8:	cmp	r5, r3
   12ebc:	cmpeq	r4, r2
   12ec0:	beq	12f38 <__assert_fail@plt+0x1d44>
   12ec4:	subs	r4, r4, #1
   12ec8:	ldrd	r2, [sp]
   12ecc:	mov	r0, r6
   12ed0:	mov	r1, r7
   12ed4:	sbc	r5, r5, #0
   12ed8:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   12edc:	ldr	r3, [pc, #120]	; 12f5c <__assert_fail@plt+0x1d68>
   12ee0:	ldrb	r2, [r3, #8]
   12ee4:	ldr	r3, [sp, #80]	; 0x50
   12ee8:	cmp	r2, #0
   12eec:	ldreq	r2, [sl]
   12ef0:	sub	r1, r8, r0
   12ef4:	mov	fp, r0
   12ef8:	add	r1, r1, r3
   12efc:	beq	12e98 <__assert_fail@plt+0x1ca4>
   12f00:	ldrb	r0, [sl, #3]
   12f04:	ldrb	r2, [sl, #2]
   12f08:	bic	r9, r9, #255	; 0xff
   12f0c:	orr	r9, r0, r9
   12f10:	ldrb	r0, [sl, #1]
   12f14:	bic	r9, r9, #65280	; 0xff00
   12f18:	orr	r9, r9, r2, lsl #8
   12f1c:	ldrb	r2, [sl]
   12f20:	bic	r9, r9, #16711680	; 0xff0000
   12f24:	orr	r9, r9, r0, lsl #16
   12f28:	bic	r9, r9, #-16777216	; 0xff000000
   12f2c:	orr	r9, r9, r2, lsl #24
   12f30:	mov	r2, r9
   12f34:	b	12e98 <__assert_fail@plt+0x1ca4>
   12f38:	ldr	r3, [pc, #24]	; 12f58 <__assert_fail@plt+0x1d64>
   12f3c:	ldr	r2, [sp, #36]	; 0x24
   12f40:	ldr	r3, [r3]
   12f44:	cmp	r2, r3
   12f48:	bne	12f54 <__assert_fail@plt+0x1d60>
   12f4c:	add	sp, sp, #44	; 0x2c
   12f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f54:	bl	10fcc <__stack_chk_fail@plt>
   12f58:	andeq	sp, r2, r8, lsl #30
   12f5c:	andeq	lr, r2, r8, lsl #3
   12f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f64:	mov	r6, r1
   12f68:	ldr	r1, [pc, #284]	; 1308c <__assert_fail@plt+0x1e98>
   12f6c:	mov	r5, #0
   12f70:	mov	r7, #0
   12f74:	sub	sp, sp, #44	; 0x2c
   12f78:	mov	r4, r0
   12f7c:	ldr	r1, [r1]
   12f80:	cmp	r5, r7
   12f84:	cmpeq	r0, r6
   12f88:	strd	r4, [sp]
   12f8c:	strd	r6, [sp, #8]
   12f90:	str	r3, [sp, #20]
   12f94:	str	r1, [sp, #36]	; 0x24
   12f98:	ldr	r8, [sp, #84]	; 0x54
   12f9c:	bls	1306c <__assert_fail@plt+0x1e78>
   12fa0:	subs	r6, r4, #1
   12fa4:	asr	r1, r8, #31
   12fa8:	mov	sl, r2
   12fac:	mul	r2, r6, r1
   12fb0:	sbc	r3, r5, #0
   12fb4:	umull	r6, r7, r6, r8
   12fb8:	mla	r3, r8, r3, r2
   12fbc:	mov	r0, r8
   12fc0:	add	r7, r3, r7
   12fc4:	strd	r0, [sp, #24]
   12fc8:	b	12ff8 <__assert_fail@plt+0x1e04>
   12fcc:	ldr	r0, [sp, #20]
   12fd0:	bl	18290 <__assert_fail@plt+0x709c>
   12fd4:	ldrd	r2, [sp, #24]
   12fd8:	add	sl, sl, #4
   12fdc:	mov	r8, fp
   12fe0:	subs	r6, r6, r2
   12fe4:	sbc	r7, r7, r3
   12fe8:	ldrd	r2, [sp, #8]
   12fec:	cmp	r5, r3
   12ff0:	cmpeq	r4, r2
   12ff4:	beq	1306c <__assert_fail@plt+0x1e78>
   12ff8:	subs	r4, r4, #1
   12ffc:	ldrd	r2, [sp]
   13000:	mov	r0, r6
   13004:	mov	r1, r7
   13008:	sbc	r5, r5, #0
   1300c:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   13010:	ldr	r3, [pc, #120]	; 13090 <__assert_fail@plt+0x1e9c>
   13014:	ldrb	r2, [r3, #8]
   13018:	ldr	r3, [sp, #80]	; 0x50
   1301c:	cmp	r2, #0
   13020:	ldreq	r2, [sl]
   13024:	sub	r1, r8, r0
   13028:	mov	fp, r0
   1302c:	add	r1, r1, r3
   13030:	beq	12fcc <__assert_fail@plt+0x1dd8>
   13034:	ldrb	r0, [sl, #3]
   13038:	ldrb	r2, [sl, #2]
   1303c:	bic	r9, r9, #255	; 0xff
   13040:	orr	r9, r0, r9
   13044:	ldrb	r0, [sl, #1]
   13048:	bic	r9, r9, #65280	; 0xff00
   1304c:	orr	r9, r9, r2, lsl #8
   13050:	ldrb	r2, [sl]
   13054:	bic	r9, r9, #16711680	; 0xff0000
   13058:	orr	r9, r9, r0, lsl #16
   1305c:	bic	r9, r9, #-16777216	; 0xff000000
   13060:	orr	r9, r9, r2, lsl #24
   13064:	mov	r2, r9
   13068:	b	12fcc <__assert_fail@plt+0x1dd8>
   1306c:	ldr	r3, [pc, #24]	; 1308c <__assert_fail@plt+0x1e98>
   13070:	ldr	r2, [sp, #36]	; 0x24
   13074:	ldr	r3, [r3]
   13078:	cmp	r2, r3
   1307c:	bne	13088 <__assert_fail@plt+0x1e94>
   13080:	add	sp, sp, #44	; 0x2c
   13084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13088:	bl	10fcc <__stack_chk_fail@plt>
   1308c:	andeq	sp, r2, r8, lsl #30
   13090:	andeq	lr, r2, r8, lsl #3
   13094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13098:	mov	r6, r1
   1309c:	ldr	r1, [pc, #260]	; 131a8 <__assert_fail@plt+0x1fb4>
   130a0:	mov	r5, #0
   130a4:	mov	r7, #0
   130a8:	sub	sp, sp, #44	; 0x2c
   130ac:	mov	r4, r0
   130b0:	ldr	r1, [r1]
   130b4:	cmp	r5, r7
   130b8:	cmpeq	r0, r6
   130bc:	strd	r4, [sp]
   130c0:	strd	r6, [sp, #8]
   130c4:	str	r1, [sp, #36]	; 0x24
   130c8:	ldr	r8, [sp, #84]	; 0x54
   130cc:	bls	13188 <__assert_fail@plt+0x1f94>
   130d0:	subs	r6, r4, #1
   130d4:	asr	r1, r8, #31
   130d8:	mov	r9, r2
   130dc:	mul	r2, r6, r1
   130e0:	mov	sl, r3
   130e4:	sbc	r3, r5, #0
   130e8:	umull	r6, r7, r6, r8
   130ec:	mla	r3, r8, r3, r2
   130f0:	mov	r0, r8
   130f4:	add	r7, r3, r7
   130f8:	mov	fp, sl
   130fc:	strd	r0, [sp, #16]
   13100:	subs	r4, r4, #1
   13104:	ldrd	r2, [sp]
   13108:	mov	r0, r6
   1310c:	mov	r1, r7
   13110:	sbc	r5, r5, #0
   13114:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   13118:	ldr	r3, [pc, #140]	; 131ac <__assert_fail@plt+0x1fb8>
   1311c:	add	r9, r9, #2
   13120:	ldrb	r2, [r3, #8]
   13124:	ldr	r3, [sp, #80]	; 0x50
   13128:	cmp	r2, #0
   1312c:	ldrbne	ip, [r9, #-1]
   13130:	ldrheq	r2, [r9, #-2]
   13134:	sub	r1, r8, r0
   13138:	add	r1, r1, r3
   1313c:	ldrhne	r3, [sp, #28]
   13140:	mov	sl, r0
   13144:	ldrbne	r0, [r9, #-2]
   13148:	mov	r8, sl
   1314c:	lsrne	r2, r3, #16
   13150:	lslne	r2, r2, #16
   13154:	orrne	r2, r2, ip
   13158:	orrne	r2, r2, r0, lsl #8
   1315c:	strhne	r2, [sp, #28]
   13160:	mov	r0, fp
   13164:	uxthne	r2, r2
   13168:	bl	18290 <__assert_fail@plt+0x709c>
   1316c:	ldrd	r2, [sp, #16]
   13170:	subs	r6, r6, r2
   13174:	sbc	r7, r7, r3
   13178:	ldrd	r2, [sp, #8]
   1317c:	cmp	r5, r3
   13180:	cmpeq	r4, r2
   13184:	bne	13100 <__assert_fail@plt+0x1f0c>
   13188:	ldr	r3, [pc, #24]	; 131a8 <__assert_fail@plt+0x1fb4>
   1318c:	ldr	r2, [sp, #36]	; 0x24
   13190:	ldr	r3, [r3]
   13194:	cmp	r2, r3
   13198:	bne	131a4 <__assert_fail@plt+0x1fb0>
   1319c:	add	sp, sp, #44	; 0x2c
   131a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131a4:	bl	10fcc <__stack_chk_fail@plt>
   131a8:	andeq	sp, r2, r8, lsl #30
   131ac:	andeq	lr, r2, r8, lsl #3
   131b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131b4:	mov	r6, r1
   131b8:	ldr	r1, [pc, #260]	; 132c4 <__assert_fail@plt+0x20d0>
   131bc:	mov	r5, #0
   131c0:	mov	r7, #0
   131c4:	sub	sp, sp, #44	; 0x2c
   131c8:	mov	r4, r0
   131cc:	ldr	r1, [r1]
   131d0:	cmp	r5, r7
   131d4:	cmpeq	r0, r6
   131d8:	strd	r4, [sp]
   131dc:	strd	r6, [sp, #8]
   131e0:	str	r1, [sp, #36]	; 0x24
   131e4:	ldr	r8, [sp, #84]	; 0x54
   131e8:	bls	132a4 <__assert_fail@plt+0x20b0>
   131ec:	subs	r6, r4, #1
   131f0:	asr	r1, r8, #31
   131f4:	mov	r9, r2
   131f8:	mul	r2, r6, r1
   131fc:	mov	sl, r3
   13200:	sbc	r3, r5, #0
   13204:	umull	r6, r7, r6, r8
   13208:	mla	r3, r8, r3, r2
   1320c:	mov	r0, r8
   13210:	add	r7, r3, r7
   13214:	mov	fp, sl
   13218:	strd	r0, [sp, #16]
   1321c:	subs	r4, r4, #1
   13220:	ldrd	r2, [sp]
   13224:	mov	r0, r6
   13228:	mov	r1, r7
   1322c:	sbc	r5, r5, #0
   13230:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   13234:	ldr	r3, [pc, #140]	; 132c8 <__assert_fail@plt+0x20d4>
   13238:	add	r9, r9, #2
   1323c:	ldrb	r2, [r3, #8]
   13240:	ldr	r3, [sp, #80]	; 0x50
   13244:	cmp	r2, #0
   13248:	ldrbne	ip, [r9, #-1]
   1324c:	ldrsheq	r2, [r9, #-2]
   13250:	sub	r1, r8, r0
   13254:	add	r1, r1, r3
   13258:	ldrhne	r3, [sp, #28]
   1325c:	mov	sl, r0
   13260:	ldrbne	r0, [r9, #-2]
   13264:	mov	r8, sl
   13268:	lsrne	r2, r3, #16
   1326c:	lslne	r2, r2, #16
   13270:	orrne	r2, r2, ip
   13274:	orrne	r2, r2, r0, lsl #8
   13278:	strhne	r2, [sp, #28]
   1327c:	mov	r0, fp
   13280:	sxthne	r2, r2
   13284:	bl	18290 <__assert_fail@plt+0x709c>
   13288:	ldrd	r2, [sp, #16]
   1328c:	subs	r6, r6, r2
   13290:	sbc	r7, r7, r3
   13294:	ldrd	r2, [sp, #8]
   13298:	cmp	r5, r3
   1329c:	cmpeq	r4, r2
   132a0:	bne	1321c <__assert_fail@plt+0x2028>
   132a4:	ldr	r3, [pc, #24]	; 132c4 <__assert_fail@plt+0x20d0>
   132a8:	ldr	r2, [sp, #36]	; 0x24
   132ac:	ldr	r3, [r3]
   132b0:	cmp	r2, r3
   132b4:	bne	132c0 <__assert_fail@plt+0x20cc>
   132b8:	add	sp, sp, #44	; 0x2c
   132bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132c0:	bl	10fcc <__stack_chk_fail@plt>
   132c4:	andeq	sp, r2, r8, lsl #30
   132c8:	andeq	lr, r2, r8, lsl #3
   132cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132d0:	mov	r5, #0
   132d4:	mov	r7, #0
   132d8:	sub	sp, sp, #28
   132dc:	mov	r4, r0
   132e0:	mov	r6, r1
   132e4:	mov	r0, r1
   132e8:	cmp	r5, r7
   132ec:	mov	r1, r7
   132f0:	cmpeq	r4, r6
   132f4:	strd	r4, [sp]
   132f8:	strd	r0, [sp, #8]
   132fc:	str	r3, [sp, #20]
   13300:	ldr	r8, [sp, #68]	; 0x44
   13304:	bls	13384 <__assert_fail@plt+0x2190>
   13308:	subs	r6, r4, #1
   1330c:	asr	fp, r8, #31
   13310:	mov	r9, r2
   13314:	mul	r2, r6, fp
   13318:	sbc	r3, r5, #0
   1331c:	umull	r6, r7, r6, r8
   13320:	mla	r3, r8, r3, r2
   13324:	mov	sl, r8
   13328:	add	r7, r3, r7
   1332c:	subs	r4, r4, #1
   13330:	ldrd	r2, [sp]
   13334:	mov	r0, r6
   13338:	mov	r1, r7
   1333c:	sbc	r5, r5, #0
   13340:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   13344:	ldrb	r2, [r9], #1
   13348:	mov	r3, r0
   1334c:	str	r3, [sp, #16]
   13350:	ldr	r3, [sp, #64]	; 0x40
   13354:	sub	r1, r8, r0
   13358:	add	r1, r1, r3
   1335c:	ldr	r0, [sp, #20]
   13360:	bl	18290 <__assert_fail@plt+0x709c>
   13364:	ldrd	r2, [sp, #8]
   13368:	subs	r6, r6, sl
   1336c:	sbc	r7, r7, fp
   13370:	cmp	r5, r3
   13374:	ldr	r3, [sp, #16]
   13378:	cmpeq	r4, r2
   1337c:	mov	r8, r3
   13380:	bne	1332c <__assert_fail@plt+0x2138>
   13384:	add	sp, sp, #28
   13388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1338c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13390:	mov	r5, #0
   13394:	mov	r7, #0
   13398:	sub	sp, sp, #28
   1339c:	mov	r4, r0
   133a0:	mov	r6, r1
   133a4:	mov	r0, r1
   133a8:	cmp	r5, r7
   133ac:	mov	r1, r7
   133b0:	cmpeq	r4, r6
   133b4:	strd	r4, [sp]
   133b8:	strd	r0, [sp, #8]
   133bc:	str	r3, [sp, #20]
   133c0:	ldr	r8, [sp, #68]	; 0x44
   133c4:	bls	13444 <__assert_fail@plt+0x2250>
   133c8:	subs	r6, r4, #1
   133cc:	asr	fp, r8, #31
   133d0:	mov	r9, r2
   133d4:	mul	r2, r6, fp
   133d8:	sbc	r3, r5, #0
   133dc:	umull	r6, r7, r6, r8
   133e0:	mla	r3, r8, r3, r2
   133e4:	mov	sl, r8
   133e8:	add	r7, r3, r7
   133ec:	subs	r4, r4, #1
   133f0:	ldrd	r2, [sp]
   133f4:	mov	r0, r6
   133f8:	mov	r1, r7
   133fc:	sbc	r5, r5, #0
   13400:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   13404:	ldrsb	r2, [r9], #1
   13408:	mov	r3, r0
   1340c:	str	r3, [sp, #16]
   13410:	ldr	r3, [sp, #64]	; 0x40
   13414:	sub	r1, r8, r0
   13418:	add	r1, r1, r3
   1341c:	ldr	r0, [sp, #20]
   13420:	bl	18290 <__assert_fail@plt+0x709c>
   13424:	ldrd	r2, [sp, #8]
   13428:	subs	r6, r6, sl
   1342c:	sbc	r7, r7, fp
   13430:	cmp	r5, r3
   13434:	ldr	r3, [sp, #16]
   13438:	cmpeq	r4, r2
   1343c:	mov	r8, r3
   13440:	bne	133ec <__assert_fail@plt+0x21f8>
   13444:	add	sp, sp, #28
   13448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1344c:	ldr	r3, [pc, #312]	; 1358c <__assert_fail@plt+0x2398>
   13450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13454:	mov	fp, #0
   13458:	mov	r5, #0
   1345c:	sub	sp, sp, #84	; 0x54
   13460:	mov	sl, r0
   13464:	mov	r4, r1
   13468:	mov	r0, r1
   1346c:	ldr	r3, [r3]
   13470:	mov	r1, r5
   13474:	cmp	fp, r5
   13478:	cmpeq	sl, r4
   1347c:	strd	sl, [sp]
   13480:	strd	r0, [sp, #8]
   13484:	str	r3, [sp, #76]	; 0x4c
   13488:	ldr	r6, [sp, #124]	; 0x7c
   1348c:	bls	1356c <__assert_fail@plt+0x2378>
   13490:	subs	r4, sl, #1
   13494:	asr	r1, r6, #31
   13498:	mov	r7, r2
   1349c:	mul	r2, r4, r1
   134a0:	sbc	r3, fp, #0
   134a4:	umull	r4, r5, r4, r6
   134a8:	mla	r3, r6, r3, r2
   134ac:	mov	r0, r6
   134b0:	ldr	r9, [pc, #216]	; 13590 <__assert_fail@plt+0x239c>
   134b4:	strd	r0, [sp, #16]
   134b8:	add	r5, r3, r5
   134bc:	b	13510 <__assert_fail@plt+0x231c>
   134c0:	mov	ip, r7
   134c4:	vldmia	ip!, {d0}
   134c8:	mov	r3, #0
   134cc:	mov	r2, r3
   134d0:	mov	r1, #40	; 0x28
   134d4:	add	r0, sp, #36	; 0x24
   134d8:	mov	r7, ip
   134dc:	bl	15660 <__assert_fail@plt+0x446c>
   134e0:	add	r2, sp, #36	; 0x24
   134e4:	mov	r1, r6
   134e8:	mov	r0, r9
   134ec:	bl	18290 <__assert_fail@plt+0x709c>
   134f0:	ldrd	r2, [sp, #16]
   134f4:	mov	r6, r8
   134f8:	subs	r4, r4, r2
   134fc:	sbc	r5, r5, r3
   13500:	ldrd	r2, [sp, #8]
   13504:	cmp	fp, r3
   13508:	cmpeq	sl, r2
   1350c:	beq	1356c <__assert_fail@plt+0x2378>
   13510:	subs	sl, sl, #1
   13514:	ldrd	r2, [sp]
   13518:	mov	r0, r4
   1351c:	mov	r1, r5
   13520:	sbc	fp, fp, #0
   13524:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   13528:	ldr	r3, [pc, #100]	; 13594 <__assert_fail@plt+0x23a0>
   1352c:	ldr	r2, [sp, #120]	; 0x78
   13530:	ldrb	r3, [r3, #8]
   13534:	cmp	r3, #0
   13538:	sub	r6, r6, r0
   1353c:	mov	r8, r0
   13540:	add	r6, r6, r2
   13544:	beq	134c0 <__assert_fail@plt+0x22cc>
   13548:	add	ip, r7, #8
   1354c:	mov	r3, ip
   13550:	add	r2, sp, #24
   13554:	ldrb	r1, [r3, #-1]!
   13558:	cmp	r3, r7
   1355c:	strb	r1, [r2], #1
   13560:	bne	13554 <__assert_fail@plt+0x2360>
   13564:	vldr	d0, [sp, #24]
   13568:	b	134c8 <__assert_fail@plt+0x22d4>
   1356c:	ldr	r3, [pc, #24]	; 1358c <__assert_fail@plt+0x2398>
   13570:	ldr	r2, [sp, #76]	; 0x4c
   13574:	ldr	r3, [r3]
   13578:	cmp	r2, r3
   1357c:	bne	13588 <__assert_fail@plt+0x2394>
   13580:	add	sp, sp, #84	; 0x54
   13584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13588:	bl	10fcc <__stack_chk_fail@plt>
   1358c:	andeq	sp, r2, r8, lsl #30
   13590:	andeq	fp, r1, r0, lsr #16
   13594:	andeq	lr, r2, r8, lsl #3
   13598:	ldr	r3, [pc, #312]	; 136d8 <__assert_fail@plt+0x24e4>
   1359c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a0:	mov	fp, #0
   135a4:	mov	r5, #0
   135a8:	sub	sp, sp, #84	; 0x54
   135ac:	mov	sl, r0
   135b0:	mov	r4, r1
   135b4:	mov	r0, r1
   135b8:	ldr	r3, [r3]
   135bc:	mov	r1, r5
   135c0:	cmp	fp, r5
   135c4:	cmpeq	sl, r4
   135c8:	strd	sl, [sp]
   135cc:	strd	r0, [sp, #8]
   135d0:	str	r3, [sp, #76]	; 0x4c
   135d4:	ldr	r6, [sp, #124]	; 0x7c
   135d8:	bls	136b8 <__assert_fail@plt+0x24c4>
   135dc:	subs	r4, sl, #1
   135e0:	asr	r1, r6, #31
   135e4:	mov	r7, r2
   135e8:	mul	r2, r4, r1
   135ec:	sbc	r3, fp, #0
   135f0:	umull	r4, r5, r4, r6
   135f4:	mla	r3, r6, r3, r2
   135f8:	mov	r0, r6
   135fc:	ldr	r9, [pc, #216]	; 136dc <__assert_fail@plt+0x24e8>
   13600:	strd	r0, [sp, #16]
   13604:	add	r5, r3, r5
   13608:	b	1365c <__assert_fail@plt+0x2468>
   1360c:	mov	ip, r7
   13610:	vldmia	ip!, {d0}
   13614:	mov	r3, #0
   13618:	mov	r2, r3
   1361c:	mov	r1, #40	; 0x28
   13620:	add	r0, sp, #36	; 0x24
   13624:	mov	r7, ip
   13628:	bl	153a0 <__assert_fail@plt+0x41ac>
   1362c:	add	r2, sp, #36	; 0x24
   13630:	mov	r1, r6
   13634:	mov	r0, r9
   13638:	bl	18290 <__assert_fail@plt+0x709c>
   1363c:	ldrd	r2, [sp, #16]
   13640:	mov	r6, r8
   13644:	subs	r4, r4, r2
   13648:	sbc	r5, r5, r3
   1364c:	ldrd	r2, [sp, #8]
   13650:	cmp	fp, r3
   13654:	cmpeq	sl, r2
   13658:	beq	136b8 <__assert_fail@plt+0x24c4>
   1365c:	subs	sl, sl, #1
   13660:	ldrd	r2, [sp]
   13664:	mov	r0, r4
   13668:	mov	r1, r5
   1366c:	sbc	fp, fp, #0
   13670:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   13674:	ldr	r3, [pc, #100]	; 136e0 <__assert_fail@plt+0x24ec>
   13678:	ldr	r2, [sp, #120]	; 0x78
   1367c:	ldrb	r3, [r3, #8]
   13680:	cmp	r3, #0
   13684:	sub	r6, r6, r0
   13688:	mov	r8, r0
   1368c:	add	r6, r6, r2
   13690:	beq	1360c <__assert_fail@plt+0x2418>
   13694:	add	ip, r7, #8
   13698:	mov	r3, ip
   1369c:	add	r2, sp, #24
   136a0:	ldrb	r1, [r3, #-1]!
   136a4:	cmp	r3, r7
   136a8:	strb	r1, [r2], #1
   136ac:	bne	136a0 <__assert_fail@plt+0x24ac>
   136b0:	vldr	d0, [sp, #24]
   136b4:	b	13614 <__assert_fail@plt+0x2420>
   136b8:	ldr	r3, [pc, #24]	; 136d8 <__assert_fail@plt+0x24e4>
   136bc:	ldr	r2, [sp, #76]	; 0x4c
   136c0:	ldr	r3, [r3]
   136c4:	cmp	r2, r3
   136c8:	bne	136d4 <__assert_fail@plt+0x24e0>
   136cc:	add	sp, sp, #84	; 0x54
   136d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136d4:	bl	10fcc <__stack_chk_fail@plt>
   136d8:	andeq	sp, r2, r8, lsl #30
   136dc:	andeq	fp, r1, r0, lsr #16
   136e0:	andeq	lr, r2, r8, lsl #3
   136e4:	ldr	r3, [pc, #324]	; 13830 <__assert_fail@plt+0x263c>
   136e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136ec:	mov	r5, #0
   136f0:	mov	r7, #0
   136f4:	sub	sp, sp, #68	; 0x44
   136f8:	mov	r4, r0
   136fc:	mov	r6, r1
   13700:	mov	r0, r1
   13704:	ldr	r3, [r3]
   13708:	mov	r1, r7
   1370c:	cmp	r5, r7
   13710:	cmpeq	r4, r6
   13714:	strd	r4, [sp]
   13718:	strd	r0, [sp, #8]
   1371c:	str	r3, [sp, #60]	; 0x3c
   13720:	ldr	r8, [sp, #108]	; 0x6c
   13724:	bls	13810 <__assert_fail@plt+0x261c>
   13728:	subs	r6, r4, #1
   1372c:	asr	r1, r8, #31
   13730:	mov	sl, r2
   13734:	mul	r2, r6, r1
   13738:	sbc	r3, r5, #0
   1373c:	umull	r6, r7, r6, r8
   13740:	mla	r3, r8, r3, r2
   13744:	mov	r0, r8
   13748:	add	r7, r3, r7
   1374c:	strd	r0, [sp, #16]
   13750:	b	1379c <__assert_fail@plt+0x25a8>
   13754:	mov	r3, #0
   13758:	mov	r2, r3
   1375c:	mov	r1, #31
   13760:	add	r0, sp, #28
   13764:	bl	15500 <__assert_fail@plt+0x430c>
   13768:	add	r2, sp, #28
   1376c:	mov	r1, r8
   13770:	ldr	r0, [pc, #188]	; 13834 <__assert_fail@plt+0x2640>
   13774:	bl	18290 <__assert_fail@plt+0x709c>
   13778:	ldrd	r2, [sp, #16]
   1377c:	add	sl, sl, #4
   13780:	mov	r8, fp
   13784:	subs	r6, r6, r2
   13788:	sbc	r7, r7, r3
   1378c:	ldrd	r2, [sp, #8]
   13790:	cmp	r5, r3
   13794:	cmpeq	r4, r2
   13798:	beq	13810 <__assert_fail@plt+0x261c>
   1379c:	subs	r4, r4, #1
   137a0:	ldrd	r2, [sp]
   137a4:	mov	r0, r6
   137a8:	mov	r1, r7
   137ac:	sbc	r5, r5, #0
   137b0:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   137b4:	ldr	r3, [pc, #124]	; 13838 <__assert_fail@plt+0x2644>
   137b8:	ldr	r2, [sp, #104]	; 0x68
   137bc:	ldrb	r3, [r3, #8]
   137c0:	cmp	r3, #0
   137c4:	vldreq	s0, [sl]
   137c8:	sub	r8, r8, r0
   137cc:	mov	fp, r0
   137d0:	add	r8, r8, r2
   137d4:	beq	13754 <__assert_fail@plt+0x2560>
   137d8:	ldrb	r2, [sl, #3]
   137dc:	ldrb	r3, [sl, #2]
   137e0:	bic	r9, r9, #255	; 0xff
   137e4:	orr	r9, r2, r9
   137e8:	ldrb	r2, [sl, #1]
   137ec:	bic	r9, r9, #65280	; 0xff00
   137f0:	orr	r9, r9, r3, lsl #8
   137f4:	ldrb	r3, [sl]
   137f8:	bic	r9, r9, #16711680	; 0xff0000
   137fc:	orr	r9, r9, r2, lsl #16
   13800:	bic	r9, r9, #-16777216	; 0xff000000
   13804:	orr	r9, r9, r3, lsl #24
   13808:	vmov	s0, r9
   1380c:	b	13754 <__assert_fail@plt+0x2560>
   13810:	ldr	r3, [pc, #24]	; 13830 <__assert_fail@plt+0x263c>
   13814:	ldr	r2, [sp, #60]	; 0x3c
   13818:	ldr	r3, [r3]
   1381c:	cmp	r2, r3
   13820:	bne	1382c <__assert_fail@plt+0x2638>
   13824:	add	sp, sp, #68	; 0x44
   13828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1382c:	bl	10fcc <__stack_chk_fail@plt>
   13830:	andeq	sp, r2, r8, lsl #30
   13834:	andeq	fp, r1, r0, lsr #16
   13838:	andeq	lr, r2, r8, lsl #3
   1383c:	ldr	r3, [pc, #412]	; 139e0 <__assert_fail@plt+0x27ec>
   13840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13844:	mov	r5, #0
   13848:	mov	r7, #0
   1384c:	sub	sp, sp, #52	; 0x34
   13850:	mov	r4, r0
   13854:	mov	r6, r1
   13858:	mov	r0, r1
   1385c:	ldr	r3, [r3]
   13860:	mov	r1, r7
   13864:	cmp	r5, r7
   13868:	cmpeq	r4, r6
   1386c:	strd	r4, [sp, #8]
   13870:	strd	r0, [sp, #16]
   13874:	str	r3, [sp, #44]	; 0x2c
   13878:	ldr	fp, [sp, #88]	; 0x58
   1387c:	ldr	r8, [sp, #92]	; 0x5c
   13880:	bls	13944 <__assert_fail@plt+0x2750>
   13884:	subs	r6, r4, #1
   13888:	asr	r1, r8, #31
   1388c:	mov	sl, r2
   13890:	mul	r2, r6, r1
   13894:	sbc	r3, r5, #0
   13898:	umull	r6, r7, r6, r8
   1389c:	mla	r3, r8, r3, r2
   138a0:	mov	r0, r8
   138a4:	add	r7, r3, r7
   138a8:	strd	r0, [sp, #24]
   138ac:	subs	r4, r4, #1
   138b0:	ldrd	r2, [sp, #8]
   138b4:	mov	r0, r6
   138b8:	mov	r1, r7
   138bc:	sbc	r5, r5, #0
   138c0:	bl	1b2c8 <__assert_fail@plt+0xa0d4>
   138c4:	ldrb	r3, [sl], #1
   138c8:	mov	r9, r0
   138cc:	cmp	r3, #13
   138d0:	ldrls	pc, [pc, r3, lsl #2]
   138d4:	b	13998 <__assert_fail@plt+0x27a4>
   138d8:	andeq	r3, r1, r0, lsl r9
   138dc:	muleq	r1, r8, r9
   138e0:	muleq	r1, r8, r9
   138e4:	muleq	r1, r8, r9
   138e8:	muleq	r1, r8, r9
   138ec:	muleq	r1, r8, r9
   138f0:	muleq	r1, r8, r9
   138f4:	muleq	r1, r0, r9
   138f8:	andeq	r3, r1, r8, lsl #19
   138fc:	andeq	r3, r1, r0, lsl #19
   13900:	andeq	r3, r1, r8, ror r9
   13904:	andeq	r3, r1, r0, ror r9
   13908:	andeq	r3, r1, r8, ror #18
   1390c:	andeq	r3, r1, r0, ror #18
   13910:	ldr	r2, [pc, #204]	; 139e4 <__assert_fail@plt+0x27f0>
   13914:	sub	r1, r8, r9
   13918:	add	r1, r1, fp
   1391c:	ldr	r0, [pc, #196]	; 139e8 <__assert_fail@plt+0x27f4>
   13920:	bl	18290 <__assert_fail@plt+0x709c>
   13924:	ldrd	r2, [sp, #24]
   13928:	mov	r8, r9
   1392c:	subs	r6, r6, r2
   13930:	sbc	r7, r7, r3
   13934:	ldrd	r2, [sp, #16]
   13938:	cmp	r5, r3
   1393c:	cmpeq	r4, r2
   13940:	bne	138ac <__assert_fail@plt+0x26b8>
   13944:	ldr	r3, [pc, #148]	; 139e0 <__assert_fail@plt+0x27ec>
   13948:	ldr	r2, [sp, #44]	; 0x2c
   1394c:	ldr	r3, [r3]
   13950:	cmp	r2, r3
   13954:	bne	139dc <__assert_fail@plt+0x27e8>
   13958:	add	sp, sp, #52	; 0x34
   1395c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13960:	ldr	r2, [pc, #132]	; 139ec <__assert_fail@plt+0x27f8>
   13964:	b	13914 <__assert_fail@plt+0x2720>
   13968:	ldr	r2, [pc, #128]	; 139f0 <__assert_fail@plt+0x27fc>
   1396c:	b	13914 <__assert_fail@plt+0x2720>
   13970:	ldr	r2, [pc, #124]	; 139f4 <__assert_fail@plt+0x2800>
   13974:	b	13914 <__assert_fail@plt+0x2720>
   13978:	ldr	r2, [pc, #120]	; 139f8 <__assert_fail@plt+0x2804>
   1397c:	b	13914 <__assert_fail@plt+0x2720>
   13980:	ldr	r2, [pc, #116]	; 139fc <__assert_fail@plt+0x2808>
   13984:	b	13914 <__assert_fail@plt+0x2720>
   13988:	ldr	r2, [pc, #112]	; 13a00 <__assert_fail@plt+0x280c>
   1398c:	b	13914 <__assert_fail@plt+0x2720>
   13990:	ldr	r2, [pc, #108]	; 13a04 <__assert_fail@plt+0x2810>
   13994:	b	13914 <__assert_fail@plt+0x2720>
   13998:	str	r3, [sp, #36]	; 0x24
   1399c:	bl	110a4 <__ctype_b_loc@plt>
   139a0:	ldr	r3, [sp, #36]	; 0x24
   139a4:	mov	r2, #4
   139a8:	mov	r1, #1
   139ac:	lsl	ip, r3, #1
   139b0:	ldr	lr, [r0]
   139b4:	add	r0, sp, #40	; 0x28
   139b8:	ldrh	ip, [lr, ip]
   139bc:	str	r3, [sp]
   139c0:	ldr	r3, [pc, #64]	; 13a08 <__assert_fail@plt+0x2814>
   139c4:	tst	ip, #16384	; 0x4000
   139c8:	ldr	ip, [pc, #60]	; 13a0c <__assert_fail@plt+0x2818>
   139cc:	moveq	r3, ip
   139d0:	bl	110e0 <__sprintf_chk@plt>
   139d4:	add	r2, sp, #40	; 0x28
   139d8:	b	13914 <__assert_fail@plt+0x2720>
   139dc:	bl	10fcc <__stack_chk_fail@plt>
   139e0:	andeq	sp, r2, r8, lsl #30
   139e4:	andeq	fp, r1, r0, lsr r8
   139e8:	andeq	fp, r1, r0, lsr #16
   139ec:	andeq	fp, r1, r0, asr #16
   139f0:	andeq	fp, r1, r8, lsr r8
   139f4:	andeq	fp, r1, r8, asr #16
   139f8:	andeq	fp, r1, ip, lsr r8
   139fc:	andeq	fp, r1, r4, asr #16
   13a00:	andeq	fp, r1, r4, lsr r8
   13a04:	andeq	fp, r1, ip, asr #16
   13a08:	andeq	fp, r1, r4, lsr #16
   13a0c:	andeq	fp, r1, r8, lsr #16
   13a10:	push	{r4, r5, r6, r7, r8, lr}
   13a14:	ldr	r5, [pc, #288]	; 13b3c <__assert_fail@plt+0x2948>
   13a18:	ldr	r6, [r5, #12]
   13a1c:	cmp	r6, #0
   13a20:	moveq	r0, #1
   13a24:	beq	13a5c <__assert_fail@plt+0x2868>
   13a28:	mov	r7, r0
   13a2c:	ldr	r0, [r6]
   13a30:	ands	r4, r0, #32
   13a34:	bne	13a98 <__assert_fail@plt+0x28a4>
   13a38:	ldr	r3, [r5, #20]
   13a3c:	ldr	r1, [pc, #252]	; 13b40 <__assert_fail@plt+0x294c>
   13a40:	ldr	r0, [r3, #-4]
   13a44:	bl	10f3c <strcmp@plt>
   13a48:	cmp	r0, #0
   13a4c:	bne	13af8 <__assert_fail@plt+0x2904>
   13a50:	mov	r0, #1
   13a54:	mov	r3, #0
   13a58:	str	r3, [r5, #12]
   13a5c:	ldr	r3, [pc, #224]	; 13b44 <__assert_fail@plt+0x2950>
   13a60:	ldr	r3, [r3]
   13a64:	ldr	r3, [r3]
   13a68:	tst	r3, #32
   13a6c:	popeq	{r4, r5, r6, r7, r8, pc}
   13a70:	mov	r2, #5
   13a74:	ldr	r1, [pc, #204]	; 13b48 <__assert_fail@plt+0x2954>
   13a78:	mov	r0, #0
   13a7c:	bl	10fc0 <dcgettext@plt>
   13a80:	mov	r1, #0
   13a84:	mov	r2, r0
   13a88:	mov	r0, r1
   13a8c:	bl	11044 <error@plt>
   13a90:	mov	r0, #0
   13a94:	pop	{r4, r5, r6, r7, r8, pc}
   13a98:	mov	r2, #5
   13a9c:	ldr	r1, [pc, #168]	; 13b4c <__assert_fail@plt+0x2958>
   13aa0:	mov	r0, #0
   13aa4:	bl	10fc0 <dcgettext@plt>
   13aa8:	ldr	r2, [r5, #16]
   13aac:	mov	r1, #3
   13ab0:	mov	r4, r0
   13ab4:	mov	r0, #0
   13ab8:	bl	17860 <__assert_fail@plt+0x666c>
   13abc:	mov	r2, r4
   13ac0:	mov	r1, r7
   13ac4:	mov	r3, r0
   13ac8:	mov	r0, #0
   13acc:	bl	11044 <error@plt>
   13ad0:	ldr	r3, [r5, #20]
   13ad4:	ldr	r1, [pc, #100]	; 13b40 <__assert_fail@plt+0x294c>
   13ad8:	ldr	r0, [r3, #-4]
   13adc:	bl	10f3c <strcmp@plt>
   13ae0:	cmp	r0, #0
   13ae4:	beq	13a54 <__assert_fail@plt+0x2860>
   13ae8:	ldr	r0, [r5, #12]
   13aec:	bl	18e40 <__assert_fail@plt+0x7c4c>
   13af0:	mov	r0, #0
   13af4:	b	13a54 <__assert_fail@plt+0x2860>
   13af8:	mov	r0, r6
   13afc:	bl	18e40 <__assert_fail@plt+0x7c4c>
   13b00:	cmp	r0, #0
   13b04:	beq	13a50 <__assert_fail@plt+0x285c>
   13b08:	bl	110d4 <__errno_location@plt>
   13b0c:	ldr	r2, [r5, #16]
   13b10:	mov	r1, #3
   13b14:	ldr	r6, [r0]
   13b18:	mov	r0, r4
   13b1c:	bl	17860 <__assert_fail@plt+0x666c>
   13b20:	mov	r1, r6
   13b24:	ldr	r2, [pc, #36]	; 13b50 <__assert_fail@plt+0x295c>
   13b28:	mov	r3, r0
   13b2c:	mov	r0, r4
   13b30:	bl	11044 <error@plt>
   13b34:	mov	r0, r4
   13b38:	b	13a54 <__assert_fail@plt+0x2860>
   13b3c:	andeq	lr, r2, r8, lsl #3
   13b40:	andeq	fp, r1, r0, ror #16
   13b44:	andeq	lr, r2, ip, ror r1
   13b48:	andeq	fp, r1, r4, ror #16
   13b4c:	andeq	fp, r1, r0, asr r8
   13b50:	andeq	ip, r1, r8, ror #22
   13b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b58:	mov	sl, #1
   13b5c:	sub	sp, sp, #12
   13b60:	ldr	r4, [pc, #248]	; 13c60 <__assert_fail@plt+0x2a6c>
   13b64:	ldr	r6, [pc, #248]	; 13c64 <__assert_fail@plt+0x2a70>
   13b68:	ldr	r9, [pc, #248]	; 13c68 <__assert_fail@plt+0x2a74>
   13b6c:	ldr	fp, [pc, #248]	; 13c6c <__assert_fail@plt+0x2a78>
   13b70:	ldr	r7, [pc, #248]	; 13c70 <__assert_fail@plt+0x2a7c>
   13b74:	ldr	r8, [pc, #248]	; 13c74 <__assert_fail@plt+0x2a80>
   13b78:	b	13b9c <__assert_fail@plt+0x29a8>
   13b7c:	bl	10fc0 <dcgettext@plt>
   13b80:	ldr	r5, [r8]
   13b84:	mov	r3, #1
   13b88:	str	r5, [r4, #12]
   13b8c:	strb	r3, [r4, #24]
   13b90:	str	r0, [r4, #16]
   13b94:	cmp	r5, #0
   13b98:	bne	13bec <__assert_fail@plt+0x29f8>
   13b9c:	ldr	r3, [r4, #20]
   13ba0:	mov	r1, r6
   13ba4:	add	r2, r3, #4
   13ba8:	ldr	r5, [r3]
   13bac:	subs	r0, r5, #0
   13bb0:	str	r5, [r4, #16]
   13bb4:	beq	13c04 <__assert_fail@plt+0x2a10>
   13bb8:	str	r2, [r4, #20]
   13bbc:	bl	10f3c <strcmp@plt>
   13bc0:	mov	r2, #5
   13bc4:	mov	r1, r7
   13bc8:	cmp	r0, #0
   13bcc:	beq	13b7c <__assert_fail@plt+0x2988>
   13bd0:	mov	r0, r5
   13bd4:	mov	r1, r9
   13bd8:	bl	111ac <fopen64@plt>
   13bdc:	cmp	r0, #0
   13be0:	mov	r5, r0
   13be4:	str	r0, [r4, #12]
   13be8:	beq	13c10 <__assert_fail@plt+0x2a1c>
   13bec:	ldrb	r3, [r4, #25]
   13bf0:	cmp	r3, #0
   13bf4:	beq	13c04 <__assert_fail@plt+0x2a10>
   13bf8:	ldrb	r3, [r4, #26]
   13bfc:	cmp	r3, #0
   13c00:	beq	13c4c <__assert_fail@plt+0x2a58>
   13c04:	mov	r0, sl
   13c08:	add	sp, sp, #12
   13c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c10:	bl	110d4 <__errno_location@plt>
   13c14:	ldr	r2, [r4, #16]
   13c18:	mov	r1, #3
   13c1c:	mov	sl, #0
   13c20:	ldr	r3, [r0]
   13c24:	mov	r0, r5
   13c28:	str	r3, [sp, #4]
   13c2c:	bl	17860 <__assert_fail@plt+0x666c>
   13c30:	mov	r2, fp
   13c34:	ldr	r1, [sp, #4]
   13c38:	mov	r3, r0
   13c3c:	mov	r0, r5
   13c40:	bl	11044 <error@plt>
   13c44:	ldr	r5, [r4, #12]
   13c48:	b	13b94 <__assert_fail@plt+0x29a0>
   13c4c:	mov	r0, r5
   13c50:	mov	r1, r3
   13c54:	mov	r2, #2
   13c58:	bl	110f8 <setvbuf@plt>
   13c5c:	b	13c04 <__assert_fail@plt+0x2a10>
   13c60:	andeq	lr, r2, r8, lsl #3
   13c64:	andeq	fp, r1, r0, ror #16
   13c68:	andeq	fp, r1, r0, lsl #17
   13c6c:	andeq	ip, r1, r8, ror #22
   13c70:	andeq	fp, r1, r0, ror r8
   13c74:	andeq	lr, r2, r8, ror r1
   13c78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c7c:	sub	sp, sp, #8256	; 0x2040
   13c80:	ldr	r9, [pc, #488]	; 13e70 <__assert_fail@plt+0x2c7c>
   13c84:	sub	sp, sp, #56	; 0x38
   13c88:	add	r2, sp, #8256	; 0x2040
   13c8c:	mov	r4, r0
   13c90:	mov	r5, r1
   13c94:	orrs	r3, r4, r5
   13c98:	add	r2, r2, #52	; 0x34
   13c9c:	ldr	r3, [r9]
   13ca0:	str	r3, [r2]
   13ca4:	beq	13e64 <__assert_fail@plt+0x2c70>
   13ca8:	ldr	r7, [pc, #452]	; 13e74 <__assert_fail@plt+0x2c80>
   13cac:	ldr	r6, [r7, #12]
   13cb0:	cmp	r6, #0
   13cb4:	movne	r8, #1
   13cb8:	ldrne	sl, [pc, #440]	; 13e78 <__assert_fail@plt+0x2c84>
   13cbc:	bne	13d30 <__assert_fail@plt+0x2b3c>
   13cc0:	b	13e44 <__assert_fail@plt+0x2c50>
   13cc4:	ldr	r3, [sp, #24]
   13cc8:	and	r3, r3, #53248	; 0xd000
   13ccc:	cmp	r3, #32768	; 0x8000
   13cd0:	bne	13d84 <__assert_fail@plt+0x2b90>
   13cd4:	ldr	r2, [sp, #64]	; 0x40
   13cd8:	ldrd	r0, [sp, #56]	; 0x38
   13cdc:	sub	r3, r2, #1
   13ce0:	cmp	r3, #536870912	; 0x20000000
   13ce4:	movcs	r2, #512	; 0x200
   13ce8:	cmp	r2, r0
   13cec:	asr	r3, r2, #31
   13cf0:	sbcs	r3, r3, r1
   13cf4:	bge	13d84 <__assert_fail@plt+0x2b90>
   13cf8:	cmp	r1, r5
   13cfc:	cmpeq	r0, r4
   13d00:	bcs	13e18 <__assert_fail@plt+0x2c24>
   13d04:	subs	r4, r4, r0
   13d08:	sbc	r5, r5, r1
   13d0c:	mov	r0, #0
   13d10:	bl	13a10 <__assert_fail@plt+0x281c>
   13d14:	and	r8, r8, r0
   13d18:	bl	13b54 <__assert_fail@plt+0x2960>
   13d1c:	ldr	r6, [r7, #12]
   13d20:	uxtb	r8, r8
   13d24:	cmp	r6, #0
   13d28:	and	r8, r8, r0
   13d2c:	beq	13e44 <__assert_fail@plt+0x2c50>
   13d30:	mov	r0, r6
   13d34:	bl	11134 <fileno@plt>
   13d38:	add	r2, sp, #8
   13d3c:	mov	r1, r0
   13d40:	mov	r0, #3
   13d44:	bl	10ffc <__fxstat64@plt>
   13d48:	cmp	r0, #0
   13d4c:	beq	13cc4 <__assert_fail@plt+0x2ad0>
   13d50:	bl	110d4 <__errno_location@plt>
   13d54:	mov	r8, #0
   13d58:	ldr	r2, [r7, #16]
   13d5c:	mov	r1, #3
   13d60:	ldr	r6, [r0]
   13d64:	mov	r0, r8
   13d68:	bl	17860 <__assert_fail@plt+0x666c>
   13d6c:	mov	r2, sl
   13d70:	mov	r1, r6
   13d74:	mov	r3, r0
   13d78:	mov	r0, r8
   13d7c:	bl	11044 <error@plt>
   13d80:	b	13d0c <__assert_fail@plt+0x2b18>
   13d84:	mov	r6, #8192	; 0x2000
   13d88:	mov	r3, #0
   13d8c:	cmp	r3, r5
   13d90:	cmpeq	r6, r4
   13d94:	ldr	r2, [r7, #12]
   13d98:	movhi	r6, r4
   13d9c:	str	r2, [sp]
   13da0:	mov	r3, r6
   13da4:	mov	r2, #1
   13da8:	mov	r1, #8192	; 0x2000
   13dac:	add	r0, sp, #116	; 0x74
   13db0:	bl	11194 <__fread_unlocked_chk@plt>
   13db4:	subs	r4, r4, r0
   13db8:	sbc	r5, r5, #0
   13dbc:	cmp	r6, r0
   13dc0:	beq	13ddc <__assert_fail@plt+0x2be8>
   13dc4:	ldr	r3, [r7, #12]
   13dc8:	ldr	r3, [r3]
   13dcc:	tst	r3, #32
   13dd0:	bne	13e3c <__assert_fail@plt+0x2c48>
   13dd4:	tst	r3, #16
   13dd8:	bne	13e0c <__assert_fail@plt+0x2c18>
   13ddc:	orrs	r3, r4, r5
   13de0:	bne	13d88 <__assert_fail@plt+0x2b94>
   13de4:	add	r3, sp, #8256	; 0x2040
   13de8:	add	r3, r3, #52	; 0x34
   13dec:	ldr	r2, [r3]
   13df0:	ldr	r3, [r9]
   13df4:	mov	r0, r8
   13df8:	cmp	r2, r3
   13dfc:	bne	13e6c <__assert_fail@plt+0x2c78>
   13e00:	add	sp, sp, #8256	; 0x2040
   13e04:	add	sp, sp, #56	; 0x38
   13e08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e0c:	orrs	r3, r4, r5
   13e10:	bne	13d0c <__assert_fail@plt+0x2b18>
   13e14:	b	13de4 <__assert_fail@plt+0x2bf0>
   13e18:	mov	r1, #1
   13e1c:	mov	r2, r4
   13e20:	mov	r3, r5
   13e24:	mov	r0, r6
   13e28:	str	r1, [sp]
   13e2c:	bl	18f40 <__assert_fail@plt+0x7d4c>
   13e30:	cmp	r0, #0
   13e34:	movne	r8, #0
   13e38:	b	13de4 <__assert_fail@plt+0x2bf0>
   13e3c:	mov	r8, #0
   13e40:	b	13de4 <__assert_fail@plt+0x2bf0>
   13e44:	mov	r2, #5
   13e48:	ldr	r1, [pc, #44]	; 13e7c <__assert_fail@plt+0x2c88>
   13e4c:	mov	r0, #0
   13e50:	bl	10fc0 <dcgettext@plt>
   13e54:	mov	r1, #0
   13e58:	mov	r2, r0
   13e5c:	mov	r0, #1
   13e60:	bl	11044 <error@plt>
   13e64:	mov	r8, #1
   13e68:	b	13de4 <__assert_fail@plt+0x2bf0>
   13e6c:	bl	10fcc <__stack_chk_fail@plt>
   13e70:	andeq	sp, r2, r8, lsl #30
   13e74:	andeq	lr, r2, r8, lsl #3
   13e78:	andeq	ip, r1, r8, ror #22
   13e7c:	andeq	fp, r1, r4, lsl #17
   13e80:	push	{r4, r5, r6, r7, r8, lr}
   13e84:	mvn	r2, #0
   13e88:	ldr	r7, [pc, #100]	; 13ef4 <__assert_fail@plt+0x2d00>
   13e8c:	str	r2, [r0]
   13e90:	ldr	r3, [r7, #12]
   13e94:	cmp	r3, #0
   13e98:	beq	13eec <__assert_fail@plt+0x2cf8>
   13e9c:	mov	r6, r0
   13ea0:	mov	r5, #1
   13ea4:	b	13ed0 <__assert_fail@plt+0x2cdc>
   13ea8:	bl	110d4 <__errno_location@plt>
   13eac:	ldr	r0, [r0]
   13eb0:	bl	13a10 <__assert_fail@plt+0x281c>
   13eb4:	mov	r4, r0
   13eb8:	bl	13b54 <__assert_fail@plt+0x2960>
   13ebc:	ldr	r3, [r7, #12]
   13ec0:	cmp	r3, #0
   13ec4:	and	r0, r0, r4
   13ec8:	and	r5, r5, r0
   13ecc:	beq	13ee4 <__assert_fail@plt+0x2cf0>
   13ed0:	mov	r0, r3
   13ed4:	bl	11110 <fgetc@plt>
   13ed8:	cmn	r0, #1
   13edc:	str	r0, [r6]
   13ee0:	beq	13ea8 <__assert_fail@plt+0x2cb4>
   13ee4:	mov	r0, r5
   13ee8:	pop	{r4, r5, r6, r7, r8, pc}
   13eec:	mov	r5, #1
   13ef0:	b	13ee4 <__assert_fail@plt+0x2cf0>
   13ef4:	andeq	lr, r2, r8, lsl #3
   13ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13efc:	sub	sp, sp, #20
   13f00:	mov	fp, r2
   13f04:	strd	r0, [sp, #8]
   13f08:	ldr	r1, [pc, #600]	; 14168 <__assert_fail@plt+0x2f74>
   13f0c:	ldrb	r1, [r1]
   13f10:	cmp	r1, #0
   13f14:	bne	140f8 <__assert_fail@plt+0x2f04>
   13f18:	ldr	r4, [pc, #588]	; 1416c <__assert_fail@plt+0x2f78>
   13f1c:	ldr	r3, [r4, #36]	; 0x24
   13f20:	mov	r5, #0
   13f24:	cmp	r3, r5
   13f28:	strb	r5, [r4, #32]
   13f2c:	beq	14148 <__assert_fail@plt+0x2f54>
   13f30:	ldr	r7, [pc, #568]	; 14170 <__assert_fail@plt+0x2f7c>
   13f34:	b	13fc0 <__assert_fail@plt+0x2dcc>
   13f38:	ldr	r3, [r4, #44]	; 0x2c
   13f3c:	mov	r2, r5
   13f40:	ldrd	r0, [sp, #8]
   13f44:	blx	r3
   13f48:	ldr	ip, [r4, #40]	; 0x28
   13f4c:	ldr	r2, [sp, #56]	; 0x38
   13f50:	add	ip, ip, r6
   13f54:	add	r3, ip, #12
   13f58:	ldr	r0, [ip, #28]
   13f5c:	mov	r1, r8
   13f60:	str	r0, [sp, #4]
   13f64:	ldr	lr, [ip, #24]
   13f68:	mov	r0, r9
   13f6c:	str	lr, [sp]
   13f70:	ldr	sl, [ip, #8]
   13f74:	blx	sl
   13f78:	ldr	r3, [r4, #40]	; 0x28
   13f7c:	add	r6, r3, r6
   13f80:	ldrb	r3, [r6, #21]
   13f84:	cmp	r3, #0
   13f88:	bne	14020 <__assert_fail@plt+0x2e2c>
   13f8c:	ldr	r0, [r7]
   13f90:	ldr	r3, [r0, #20]
   13f94:	ldr	r2, [r0, #24]
   13f98:	cmp	r3, r2
   13f9c:	addcc	r1, r3, #1
   13fa0:	movcc	r2, #10
   13fa4:	strcc	r1, [r0, #20]
   13fa8:	strbcc	r2, [r3]
   13fac:	bcs	1415c <__assert_fail@plt+0x2f68>
   13fb0:	ldr	r3, [r4, #36]	; 0x24
   13fb4:	add	r5, r5, #1
   13fb8:	cmp	r3, r5
   13fbc:	bls	14148 <__assert_fail@plt+0x2f54>
   13fc0:	ldr	r3, [r4, #40]	; 0x28
   13fc4:	lsl	r6, r5, #5
   13fc8:	add	r3, r3, r6
   13fcc:	ldr	r2, [pc, #416]	; 14174 <__assert_fail@plt+0x2f80>
   13fd0:	ldr	r3, [r3, #4]
   13fd4:	ldr	r8, [r4, #28]
   13fd8:	add	r3, r2, r3, lsl #2
   13fdc:	mov	r0, r8
   13fe0:	ldr	sl, [r3, #132]	; 0x84
   13fe4:	mov	r1, sl
   13fe8:	bl	1ae7c <__assert_fail@plt+0x9c88>
   13fec:	mov	r1, sl
   13ff0:	mov	r9, r0
   13ff4:	sub	r0, r8, fp
   13ff8:	bl	1ae7c <__assert_fail@plt+0x9c88>
   13ffc:	cmp	r5, #0
   14000:	mov	r8, r0
   14004:	beq	13f38 <__assert_fail@plt+0x2d44>
   14008:	ldr	r3, [pc, #360]	; 14178 <__assert_fail@plt+0x2f84>
   1400c:	ldr	r2, [r4]
   14010:	ldr	r1, [pc, #356]	; 1417c <__assert_fail@plt+0x2f88>
   14014:	mov	r0, #1
   14018:	bl	1111c <__printf_chk@plt>
   1401c:	b	13f48 <__assert_fail@plt+0x2d54>
   14020:	ldr	r0, [r6, #28]
   14024:	mov	r1, r9
   14028:	mul	r0, r0, r8
   1402c:	bl	1b088 <__assert_fail@plt+0x9e94>
   14030:	ldr	r2, [r6, #24]
   14034:	ldr	r3, [pc, #316]	; 14178 <__assert_fail@plt+0x2f84>
   14038:	ldr	r1, [pc, #316]	; 1417c <__assert_fail@plt+0x2f88>
   1403c:	mla	r2, r2, r8, r0
   14040:	mov	r0, #1
   14044:	bl	1111c <__printf_chk@plt>
   14048:	ldr	r3, [r7]
   1404c:	mov	r2, #3
   14050:	mov	r1, #1
   14054:	ldr	r0, [pc, #292]	; 14180 <__assert_fail@plt+0x2f8c>
   14058:	bl	10fa8 <fwrite_unlocked@plt>
   1405c:	cmp	fp, #0
   14060:	beq	140c0 <__assert_fail@plt+0x2ecc>
   14064:	bl	110a4 <__ctype_b_loc@plt>
   14068:	ldr	r3, [sp, #56]	; 0x38
   1406c:	add	r8, r3, fp
   14070:	mov	r6, r3
   14074:	mov	r9, r0
   14078:	ldrb	r3, [r6], #1
   1407c:	ldr	r0, [r9]
   14080:	mov	r1, #46	; 0x2e
   14084:	lsl	r2, r3, #1
   14088:	ldrh	r2, [r0, r2]
   1408c:	ldr	r0, [r7]
   14090:	tst	r2, #16384	; 0x4000
   14094:	ldr	lr, [r0, #24]
   14098:	ldr	r2, [r0, #20]
   1409c:	moveq	r3, r1
   140a0:	movne	r1, r3
   140a4:	add	ip, r2, #1
   140a8:	cmp	r2, lr
   140ac:	strcc	ip, [r0, #20]
   140b0:	strbcc	r3, [r2]
   140b4:	bcs	140f0 <__assert_fail@plt+0x2efc>
   140b8:	cmp	r6, r8
   140bc:	bne	14078 <__assert_fail@plt+0x2e84>
   140c0:	ldr	r0, [r7]
   140c4:	ldr	r3, [r0, #20]
   140c8:	ldr	r2, [r0, #24]
   140cc:	cmp	r3, r2
   140d0:	addcc	r1, r3, #1
   140d4:	movcc	r2, #60	; 0x3c
   140d8:	strcc	r1, [r0, #20]
   140dc:	strbcc	r2, [r3]
   140e0:	bcc	13f8c <__assert_fail@plt+0x2d98>
   140e4:	mov	r1, #60	; 0x3c
   140e8:	bl	11164 <__overflow@plt>
   140ec:	b	13f8c <__assert_fail@plt+0x2d98>
   140f0:	bl	11164 <__overflow@plt>
   140f4:	b	140b8 <__assert_fail@plt+0x2ec4>
   140f8:	ldr	r1, [pc, #104]	; 14168 <__assert_fail@plt+0x2f74>
   140fc:	ldr	r4, [pc, #104]	; 1416c <__assert_fail@plt+0x2f78>
   14100:	ldrb	r1, [r1, #1]
   14104:	cmp	r1, #0
   14108:	bne	13f1c <__assert_fail@plt+0x2d28>
   1410c:	ldr	r1, [r4, #28]
   14110:	cmp	r1, r2
   14114:	bne	13f1c <__assert_fail@plt+0x2d28>
   14118:	mov	r0, r3
   1411c:	ldr	r1, [sp, #56]	; 0x38
   14120:	bl	10fb4 <memcmp@plt>
   14124:	cmp	r0, #0
   14128:	bne	13f1c <__assert_fail@plt+0x2d28>
   1412c:	ldrb	r3, [r4, #32]
   14130:	cmp	r3, #0
   14134:	bne	14148 <__assert_fail@plt+0x2f54>
   14138:	ldr	r0, [pc, #68]	; 14184 <__assert_fail@plt+0x2f90>
   1413c:	bl	1105c <puts@plt>
   14140:	mov	r3, #1
   14144:	strb	r3, [r4, #32]
   14148:	ldr	r2, [pc, #24]	; 14168 <__assert_fail@plt+0x2f74>
   1414c:	mov	r3, #0
   14150:	strb	r3, [r2, #1]
   14154:	add	sp, sp, #20
   14158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1415c:	mov	r1, #10
   14160:	bl	11164 <__overflow@plt>
   14164:	b	13fb0 <__assert_fail@plt+0x2dbc>
   14168:	andeq	lr, r2, r0, lsl r1
   1416c:	andeq	lr, r2, r8, lsl #3
   14170:	andeq	lr, r2, ip, ror r1
   14174:	andeq	fp, r1, r4, asr #9
   14178:	andeq	ip, r1, ip, asr r7
   1417c:	andeq	fp, r1, r0, lsr #16
   14180:			; <UNDEFINED> instruction: 0x0001b8b0
   14184:	andeq	fp, r1, ip, lsr #17
   14188:	push	{r4, r5, r6, r7, r8, lr}
   1418c:	mov	r6, r0
   14190:	ldr	r5, [pc, #124]	; 14214 <__assert_fail@plt+0x3020>
   14194:	mov	r4, r2
   14198:	mov	r7, r1
   1419c:	ldr	r0, [r5]
   141a0:	ldr	r3, [r0, #20]
   141a4:	ldr	r2, [r0, #24]
   141a8:	cmp	r3, r2
   141ac:	addcc	r1, r3, #1
   141b0:	movcc	r2, #40	; 0x28
   141b4:	strcc	r1, [r0, #20]
   141b8:	strbcc	r2, [r3]
   141bc:	bcs	14208 <__assert_fail@plt+0x3014>
   141c0:	mov	r0, r6
   141c4:	mov	r1, r7
   141c8:	mov	r2, #41	; 0x29
   141cc:	bl	129f4 <__assert_fail@plt+0x1800>
   141d0:	cmp	r4, #0
   141d4:	popeq	{r4, r5, r6, r7, r8, pc}
   141d8:	ldr	r0, [r5]
   141dc:	ldr	r3, [r0, #20]
   141e0:	ldr	r2, [r0, #24]
   141e4:	cmp	r3, r2
   141e8:	bcs	141fc <__assert_fail@plt+0x3008>
   141ec:	add	r2, r3, #1
   141f0:	str	r2, [r0, #20]
   141f4:	strb	r4, [r3]
   141f8:	pop	{r4, r5, r6, r7, r8, pc}
   141fc:	mov	r1, r4
   14200:	pop	{r4, r5, r6, r7, r8, lr}
   14204:	b	11164 <__overflow@plt>
   14208:	mov	r1, #40	; 0x28
   1420c:	bl	11164 <__overflow@plt>
   14210:	b	141c0 <__assert_fail@plt+0x2fcc>
   14214:	andeq	lr, r2, ip, ror r1
   14218:	push	{r4, r5, r6, lr}
   1421c:	mov	r6, r2
   14220:	mov	r2, #32
   14224:	mov	r4, r0
   14228:	mov	r5, r1
   1422c:	bl	129f4 <__assert_fail@plt+0x1800>
   14230:	ldr	r3, [pc, #20]	; 1424c <__assert_fail@plt+0x3058>
   14234:	mov	r2, r6
   14238:	ldrd	r0, [r3, #48]	; 0x30
   1423c:	adds	r0, r4, r0
   14240:	adc	r1, r5, r1
   14244:	pop	{r4, r5, r6, lr}
   14248:	b	14188 <__assert_fail@plt+0x2f94>
   1424c:	andeq	lr, r2, r8, lsl #3
   14250:	ldrb	r3, [r0]
   14254:	cmp	r3, #0
   14258:	beq	149ac <__assert_fail@plt+0x37b8>
   1425c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14260:	mov	fp, r0
   14264:	ldr	r6, [pc, #1904]	; 149dc <__assert_fail@plt+0x37e8>
   14268:	ldr	sl, [pc, #1904]	; 149e0 <__assert_fail@plt+0x37ec>
   1426c:	sub	sp, sp, #12
   14270:	ldr	r3, [r6, #36]	; 0x24
   14274:	mov	r7, r0
   14278:	ldr	r2, [r6, #56]	; 0x38
   1427c:	ldr	r0, [r6, #40]	; 0x28
   14280:	cmp	r2, r3
   14284:	bls	14750 <__assert_fail@plt+0x355c>
   14288:	adds	r4, r0, r3, lsl #5
   1428c:	beq	149c8 <__assert_fail@plt+0x37d4>
   14290:	ldrb	r2, [r7]
   14294:	sub	r3, r2, #97	; 0x61
   14298:	cmp	r3, #23
   1429c:	ldrls	pc, [pc, r3, lsl #2]
   142a0:	b	144a8 <__assert_fail@plt+0x32b4>
   142a4:	muleq	r1, r0, r4
   142a8:	andeq	r4, r1, r8, lsr #9
   142ac:	andeq	r4, r1, r8, lsr #8
   142b0:	ldrdeq	r4, [r1], -r0
   142b4:	andeq	r4, r1, r8, lsr #9
   142b8:	andeq	r4, r1, r4, lsl #6
   142bc:	andeq	r4, r1, r8, lsr #9
   142c0:	andeq	r4, r1, r8, lsr #9
   142c4:	andeq	r4, r1, r8, lsr #9
   142c8:	andeq	r4, r1, r8, lsr #9
   142cc:	andeq	r4, r1, r8, lsr #9
   142d0:	andeq	r4, r1, r8, lsr #9
   142d4:	andeq	r4, r1, r8, lsr #9
   142d8:	andeq	r4, r1, r8, lsr #9
   142dc:	ldrdeq	r4, [r1], -r0
   142e0:	andeq	r4, r1, r8, lsr #9
   142e4:	andeq	r4, r1, r8, lsr #9
   142e8:	andeq	r4, r1, r8, lsr #9
   142ec:	andeq	r4, r1, r8, lsr #9
   142f0:	andeq	r4, r1, r8, lsr #9
   142f4:	ldrdeq	r4, [r1], -r0
   142f8:	andeq	r4, r1, r8, lsr #9
   142fc:	andeq	r4, r1, r8, lsr #9
   14300:	ldrdeq	r4, [r1], -r0
   14304:	ldrb	r3, [r7, #1]
   14308:	cmp	r3, #70	; 0x46
   1430c:	beq	14818 <__assert_fail@plt+0x3624>
   14310:	cmp	r3, #76	; 0x4c
   14314:	beq	14784 <__assert_fail@plt+0x3590>
   14318:	cmp	r3, #68	; 0x44
   1431c:	beq	14784 <__assert_fail@plt+0x3590>
   14320:	sub	r3, r3, #48	; 0x30
   14324:	cmp	r3, #9
   14328:	add	r1, r7, #1
   1432c:	bhi	149a0 <__assert_fail@plt+0x37ac>
   14330:	add	r0, r7, #2
   14334:	mov	r9, #0
   14338:	b	14350 <__assert_fail@plt+0x315c>
   1433c:	mov	r3, r2
   14340:	mvn	r2, r2
   14344:	umull	ip, r2, sl, r2
   14348:	cmp	r9, r2, lsr #3
   1434c:	bhi	14884 <__assert_fail@plt+0x3690>
   14350:	ldrb	r2, [r0]
   14354:	add	r9, r9, r9, lsl #2
   14358:	mov	r5, r0
   1435c:	sub	r2, r2, #48	; 0x30
   14360:	cmp	r2, #9
   14364:	add	r9, r3, r9, lsl #1
   14368:	add	r0, r0, #1
   1436c:	bls	1433c <__assert_fail@plt+0x3148>
   14370:	cmp	r5, r1
   14374:	beq	14914 <__assert_fail@plt+0x3720>
   14378:	cmp	r9, #8
   1437c:	bhi	14390 <__assert_fail@plt+0x319c>
   14380:	add	r3, r6, r9, lsl #2
   14384:	ldr	r8, [r3, #96]	; 0x60
   14388:	cmp	r8, #0
   1438c:	bne	1478c <__assert_fail@plt+0x3598>
   14390:	ldr	r1, [pc, #1612]	; 149e4 <__assert_fail@plt+0x37f0>
   14394:	mov	r2, #5
   14398:	mov	r0, #0
   1439c:	bl	10fc0 <dcgettext@plt>
   143a0:	mov	r4, r0
   143a4:	mov	r0, fp
   143a8:	bl	17a2c <__assert_fail@plt+0x6838>
   143ac:	mov	r1, #0
   143b0:	mov	r2, r4
   143b4:	str	r9, [sp]
   143b8:	mov	r3, r0
   143bc:	mov	r0, r1
   143c0:	bl	11044 <error@plt>
   143c4:	mov	r0, #0
   143c8:	add	sp, sp, #12
   143cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143d0:	ldrb	r1, [r7, #1]
   143d4:	sub	r3, r1, #67	; 0x43
   143d8:	cmp	r3, #16
   143dc:	ldrls	pc, [pc, r3, lsl #2]
   143e0:	b	146d4 <__assert_fail@plt+0x34e0>
   143e4:	andeq	r4, r1, r4, asr #13
   143e8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143ec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143f0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143f4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143f8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143fc:	andeq	r4, r1, ip, ror #9
   14400:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14404:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14408:	andeq	r4, r1, ip, ror #9
   1440c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14410:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14414:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14418:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1441c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14420:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14424:			; <UNDEFINED> instruction: 0x000146b4
   14428:	ldr	r2, [pc, #1464]	; 149e8 <__assert_fail@plt+0x37f4>
   1442c:	add	r5, r7, #1
   14430:	mov	r9, #3
   14434:	mov	r3, #6
   14438:	mov	r8, #1
   1443c:	stm	r4, {r3, r8}
   14440:	str	r2, [r4, #8]
   14444:	str	r9, [r4, #24]
   14448:	ldrb	r3, [r5]
   1444c:	cmp	r3, #122	; 0x7a
   14450:	addeq	r5, r5, #1
   14454:	moveq	r3, #1
   14458:	movne	r3, #0
   1445c:	cmp	r5, r7
   14460:	strb	r3, [r4, #21]
   14464:	beq	149b4 <__assert_fail@plt+0x37c0>
   14468:	ldrb	r2, [r5]
   1446c:	ldr	r3, [r6, #36]	; 0x24
   14470:	mov	r7, r5
   14474:	add	r3, r3, #1
   14478:	cmp	r2, #0
   1447c:	str	r3, [r6, #36]	; 0x24
   14480:	bne	14278 <__assert_fail@plt+0x3084>
   14484:	mov	r0, #1
   14488:	add	sp, sp, #12
   1448c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14490:	add	r5, r7, #1
   14494:	mov	r9, #3
   14498:	ldr	r2, [pc, #1356]	; 149ec <__assert_fail@plt+0x37f8>
   1449c:	mov	r3, #5
   144a0:	mov	r8, #1
   144a4:	b	1443c <__assert_fail@plt+0x3248>
   144a8:	mov	r2, #5
   144ac:	ldr	r1, [pc, #1340]	; 149f0 <__assert_fail@plt+0x37fc>
   144b0:	mov	r0, #0
   144b4:	bl	10fc0 <dcgettext@plt>
   144b8:	ldrb	r5, [r7]
   144bc:	mov	r4, r0
   144c0:	mov	r0, fp
   144c4:	bl	17a2c <__assert_fail@plt+0x6838>
   144c8:	mov	r1, #0
   144cc:	mov	r3, r5
   144d0:	mov	r2, r4
   144d4:	str	r0, [sp]
   144d8:	mov	r0, r1
   144dc:	bl	11044 <error@plt>
   144e0:	mov	r0, #0
   144e4:	add	sp, sp, #12
   144e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144ec:	ldr	r8, [r6, #76]	; 0x4c
   144f0:	add	r5, r7, #2
   144f4:	mov	r9, #4
   144f8:	sub	r2, r2, #100	; 0x64
   144fc:	cmp	r2, #20
   14500:	ldrls	pc, [pc, r2, lsl #2]
   14504:	b	147cc <__assert_fail@plt+0x35d8>
   14508:	andeq	r4, r1, r8, ror #12
   1450c:	andeq	r4, r1, ip, asr #15
   14510:	andeq	r4, r1, ip, asr #15
   14514:	andeq	r4, r1, ip, asr #15
   14518:	andeq	r4, r1, ip, asr #15
   1451c:	andeq	r4, r1, ip, asr #15
   14520:	andeq	r4, r1, ip, asr #15
   14524:	andeq	r4, r1, ip, asr #15
   14528:	andeq	r4, r1, ip, asr #15
   1452c:	andeq	r4, r1, ip, asr #15
   14530:	andeq	r4, r1, ip, asr #15
   14534:	andeq	r4, r1, r0, lsl #12
   14538:	andeq	r4, r1, ip, asr #15
   1453c:	andeq	r4, r1, ip, asr #15
   14540:	andeq	r4, r1, ip, asr #15
   14544:	andeq	r4, r1, ip, asr #15
   14548:	andeq	r4, r1, ip, asr #15
   1454c:			; <UNDEFINED> instruction: 0x000145bc
   14550:	andeq	r4, r1, ip, asr #15
   14554:	andeq	r4, r1, ip, asr #15
   14558:	andeq	r4, r1, ip, asr r5
   1455c:	ldr	r3, [pc, #1168]	; 149f4 <__assert_fail@plt+0x3800>
   14560:	cmp	r8, #5
   14564:	add	r9, r3, r9, lsl #2
   14568:	add	r0, r4, #12
   1456c:	ldr	r9, [r9, #392]	; 0x188
   14570:	beq	148e4 <__assert_fail@plt+0x36f0>
   14574:	cmp	r8, #4
   14578:	beq	14938 <__assert_fail@plt+0x3744>
   1457c:	ldr	r3, [pc, #1140]	; 149f8 <__assert_fail@plt+0x3804>
   14580:	str	r9, [sp]
   14584:	str	r3, [sp, #4]
   14588:	mov	r2, #9
   1458c:	ldr	r3, [pc, #1128]	; 149fc <__assert_fail@plt+0x3808>
   14590:	mov	r1, #1
   14594:	bl	110e0 <__sprintf_chk@plt>
   14598:	cmp	r8, #2
   1459c:	beq	14960 <__assert_fail@plt+0x376c>
   145a0:	cmp	r8, #3
   145a4:	beq	1492c <__assert_fail@plt+0x3738>
   145a8:	cmp	r8, #1
   145ac:	bne	147cc <__assert_fail@plt+0x35d8>
   145b0:	ldr	r2, [pc, #1096]	; 14a00 <__assert_fail@plt+0x380c>
   145b4:	mov	r3, #3
   145b8:	b	1443c <__assert_fail@plt+0x3248>
   145bc:	ldr	r3, [pc, #1072]	; 149f4 <__assert_fail@plt+0x3800>
   145c0:	cmp	r8, #5
   145c4:	add	r9, r3, r9, lsl #2
   145c8:	add	r0, r4, #12
   145cc:	ldr	r9, [r9, #324]	; 0x144
   145d0:	beq	14858 <__assert_fail@plt+0x3664>
   145d4:	ldr	r2, [pc, #1064]	; 14a04 <__assert_fail@plt+0x3810>
   145d8:	cmp	r8, #4
   145dc:	ldr	r3, [pc, #1060]	; 14a08 <__assert_fail@plt+0x3814>
   145e0:	movne	r3, r2
   145e4:	str	r3, [sp]
   145e8:	mov	r2, #9
   145ec:	ldr	r3, [pc, #1048]	; 14a0c <__assert_fail@plt+0x3818>
   145f0:	mov	r1, #1
   145f4:	bl	110e0 <__sprintf_chk@plt>
   145f8:	mov	r3, #1
   145fc:	b	14644 <__assert_fail@plt+0x3450>
   14600:	ldr	r3, [pc, #1004]	; 149f4 <__assert_fail@plt+0x3800>
   14604:	cmp	r8, #5
   14608:	add	r9, r3, r9, lsl #2
   1460c:	add	r0, r4, #12
   14610:	ldr	r9, [r9, #256]	; 0x100
   14614:	beq	14850 <__assert_fail@plt+0x365c>
   14618:	ldr	r2, [pc, #1008]	; 14a10 <__assert_fail@plt+0x381c>
   1461c:	cmp	r8, #4
   14620:	ldr	r3, [pc, #1004]	; 14a14 <__assert_fail@plt+0x3820>
   14624:	movne	r3, r2
   14628:	str	r3, [sp, #4]
   1462c:	str	r9, [sp]
   14630:	ldr	r3, [pc, #964]	; 149fc <__assert_fail@plt+0x3808>
   14634:	mov	r2, #9
   14638:	mov	r1, #1
   1463c:	bl	110e0 <__sprintf_chk@plt>
   14640:	mov	r3, #2
   14644:	sub	r2, r8, #1
   14648:	cmp	r2, #4
   1464c:	ldrls	pc, [pc, r2, lsl #2]
   14650:	b	147cc <__assert_fail@plt+0x35d8>
   14654:	andeq	r4, r1, r8, asr #16
   14658:	andeq	r4, r1, ip, lsl #18
   1465c:	andeq	r4, r1, r0, asr #16
   14660:	andeq	r4, r1, r8, lsr r8
   14664:	andeq	r4, r1, r0, lsr r8
   14668:	ldr	r3, [pc, #900]	; 149f4 <__assert_fail@plt+0x3800>
   1466c:	cmp	r8, #5
   14670:	add	r9, r3, r9, lsl #2
   14674:	add	r0, r4, #12
   14678:	ldr	r9, [r9, #188]	; 0xbc
   1467c:	beq	148c0 <__assert_fail@plt+0x36cc>
   14680:	cmp	r8, #4
   14684:	beq	1496c <__assert_fail@plt+0x3778>
   14688:	ldr	r3, [pc, #904]	; 14a18 <__assert_fail@plt+0x3824>
   1468c:	mov	r2, #9
   14690:	str	r3, [sp]
   14694:	mov	r1, #1
   14698:	ldr	r3, [pc, #876]	; 14a0c <__assert_fail@plt+0x3818>
   1469c:	bl	110e0 <__sprintf_chk@plt>
   146a0:	cmp	r8, #2
   146a4:	bne	14860 <__assert_fail@plt+0x366c>
   146a8:	ldr	r2, [pc, #876]	; 14a1c <__assert_fail@plt+0x3828>
   146ac:	mov	r3, #0
   146b0:	b	1443c <__assert_fail@plt+0x3248>
   146b4:	add	r5, r7, #2
   146b8:	ldr	r8, [r6, #68]	; 0x44
   146bc:	mov	r9, #2
   146c0:	b	144f8 <__assert_fail@plt+0x3304>
   146c4:	add	r5, r7, #2
   146c8:	ldr	r8, [r6, #64]	; 0x40
   146cc:	mov	r9, #1
   146d0:	b	144f8 <__assert_fail@plt+0x3304>
   146d4:	sub	r1, r1, #48	; 0x30
   146d8:	cmp	r1, #9
   146dc:	add	r0, r7, #1
   146e0:	bhi	14990 <__assert_fail@plt+0x379c>
   146e4:	add	ip, r7, #2
   146e8:	mov	r9, #0
   146ec:	b	14704 <__assert_fail@plt+0x3510>
   146f0:	mov	r1, r3
   146f4:	mvn	r3, r3
   146f8:	umull	lr, r3, sl, r3
   146fc:	cmp	r9, r3, lsr #3
   14700:	bhi	14884 <__assert_fail@plt+0x3690>
   14704:	ldrb	r3, [ip]
   14708:	add	r9, r9, r9, lsl #2
   1470c:	mov	r5, ip
   14710:	sub	r3, r3, #48	; 0x30
   14714:	cmp	r3, #9
   14718:	add	r9, r1, r9, lsl #1
   1471c:	add	ip, ip, #1
   14720:	bls	146f0 <__assert_fail@plt+0x34fc>
   14724:	cmp	r0, r5
   14728:	beq	14920 <__assert_fail@plt+0x372c>
   1472c:	cmp	r9, #8
   14730:	bhi	14744 <__assert_fail@plt+0x3550>
   14734:	add	r3, r6, r9, lsl #2
   14738:	ldr	r8, [r3, #60]	; 0x3c
   1473c:	cmp	r8, #0
   14740:	bne	144f8 <__assert_fail@plt+0x3304>
   14744:	mov	r2, #5
   14748:	ldr	r1, [pc, #720]	; 14a20 <__assert_fail@plt+0x382c>
   1474c:	b	14398 <__assert_fail@plt+0x31a4>
   14750:	cmp	r0, #0
   14754:	beq	147d0 <__assert_fail@plt+0x35dc>
   14758:	ldr	r3, [pc, #708]	; 14a24 <__assert_fail@plt+0x3830>
   1475c:	cmp	r2, r3
   14760:	bhi	147f4 <__assert_fail@plt+0x3600>
   14764:	add	r3, r2, #1
   14768:	add	r2, r3, r2, lsr #1
   1476c:	lsl	r1, r2, #5
   14770:	str	r2, [r6, #56]	; 0x38
   14774:	bl	17ff8 <__assert_fail@plt+0x6e04>
   14778:	ldr	r3, [r6, #36]	; 0x24
   1477c:	str	r0, [r6, #40]	; 0x28
   14780:	b	14288 <__assert_fail@plt+0x3094>
   14784:	ldr	r8, [r6, #128]	; 0x80
   14788:	add	r5, r7, #2
   1478c:	bl	111a0 <localeconv@plt>
   14790:	ldr	r0, [r0]
   14794:	ldrb	r3, [r0]
   14798:	cmp	r3, #0
   1479c:	moveq	r0, #1
   147a0:	beq	147a8 <__assert_fail@plt+0x35b4>
   147a4:	bl	110bc <strlen@plt>
   147a8:	cmp	r8, #7
   147ac:	beq	147f8 <__assert_fail@plt+0x3604>
   147b0:	cmp	r8, #8
   147b4:	addeq	r9, r0, #23
   147b8:	ldreq	r2, [pc, #616]	; 14a28 <__assert_fail@plt+0x3834>
   147bc:	moveq	r3, #4
   147c0:	beq	1443c <__assert_fail@plt+0x3248>
   147c4:	cmp	r8, #6
   147c8:	beq	14808 <__assert_fail@plt+0x3614>
   147cc:	bl	111dc <abort@plt>
   147d0:	cmp	r2, #0
   147d4:	beq	14824 <__assert_fail@plt+0x3630>
   147d8:	lsrs	r3, r2, #27
   147dc:	movne	r3, #1
   147e0:	moveq	r3, #0
   147e4:	lsls	r1, r2, #5
   147e8:	bmi	147f4 <__assert_fail@plt+0x3600>
   147ec:	cmp	r3, #0
   147f0:	beq	14770 <__assert_fail@plt+0x357c>
   147f4:	bl	181e4 <__assert_fail@plt+0x6ff0>
   147f8:	add	r9, r0, #23
   147fc:	ldr	r2, [pc, #552]	; 14a2c <__assert_fail@plt+0x3838>
   14800:	mov	r3, #4
   14804:	b	1443c <__assert_fail@plt+0x3248>
   14808:	add	r9, r0, #14
   1480c:	ldr	r2, [pc, #540]	; 14a30 <__assert_fail@plt+0x383c>
   14810:	mov	r3, #4
   14814:	b	1443c <__assert_fail@plt+0x3248>
   14818:	add	r5, r7, #2
   1481c:	ldr	r8, [r6, #112]	; 0x70
   14820:	b	1478c <__assert_fail@plt+0x3598>
   14824:	mov	r1, #64	; 0x40
   14828:	mov	r2, #2
   1482c:	b	14770 <__assert_fail@plt+0x357c>
   14830:	ldr	r2, [pc, #508]	; 14a34 <__assert_fail@plt+0x3840>
   14834:	b	1443c <__assert_fail@plt+0x3248>
   14838:	ldr	r2, [pc, #504]	; 14a38 <__assert_fail@plt+0x3844>
   1483c:	b	1443c <__assert_fail@plt+0x3248>
   14840:	ldr	r2, [pc, #500]	; 14a3c <__assert_fail@plt+0x3848>
   14844:	b	1443c <__assert_fail@plt+0x3248>
   14848:	ldr	r2, [pc, #432]	; 14a00 <__assert_fail@plt+0x380c>
   1484c:	b	1443c <__assert_fail@plt+0x3248>
   14850:	ldr	r3, [pc, #488]	; 14a40 <__assert_fail@plt+0x384c>
   14854:	b	14628 <__assert_fail@plt+0x3434>
   14858:	ldr	r3, [pc, #484]	; 14a44 <__assert_fail@plt+0x3850>
   1485c:	b	145e4 <__assert_fail@plt+0x33f0>
   14860:	cmp	r8, #3
   14864:	ldreq	r2, [pc, #464]	; 14a3c <__assert_fail@plt+0x3848>
   14868:	moveq	r3, #0
   1486c:	beq	1443c <__assert_fail@plt+0x3248>
   14870:	cmp	r8, #1
   14874:	bne	147cc <__assert_fail@plt+0x35d8>
   14878:	ldr	r2, [pc, #456]	; 14a48 <__assert_fail@plt+0x3854>
   1487c:	mov	r3, #0
   14880:	b	1443c <__assert_fail@plt+0x3248>
   14884:	mov	r2, #5
   14888:	ldr	r1, [pc, #444]	; 14a4c <__assert_fail@plt+0x3858>
   1488c:	mov	r0, #0
   14890:	bl	10fc0 <dcgettext@plt>
   14894:	mov	r4, r0
   14898:	mov	r0, fp
   1489c:	bl	17a2c <__assert_fail@plt+0x6838>
   148a0:	mov	r1, #0
   148a4:	mov	r2, r4
   148a8:	mov	r3, r0
   148ac:	mov	r0, r1
   148b0:	bl	11044 <error@plt>
   148b4:	mov	r0, #0
   148b8:	add	sp, sp, #12
   148bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148c0:	ldr	r3, [pc, #392]	; 14a50 <__assert_fail@plt+0x385c>
   148c4:	mov	r2, #9
   148c8:	str	r3, [sp]
   148cc:	mov	r1, #1
   148d0:	ldr	r3, [pc, #308]	; 14a0c <__assert_fail@plt+0x3818>
   148d4:	bl	110e0 <__sprintf_chk@plt>
   148d8:	ldr	r2, [pc, #340]	; 14a34 <__assert_fail@plt+0x3840>
   148dc:	mov	r3, #0
   148e0:	b	1443c <__assert_fail@plt+0x3248>
   148e4:	ldr	r3, [pc, #360]	; 14a54 <__assert_fail@plt+0x3860>
   148e8:	mov	r2, #9
   148ec:	str	r3, [sp, #4]
   148f0:	str	r9, [sp]
   148f4:	ldr	r3, [pc, #256]	; 149fc <__assert_fail@plt+0x3808>
   148f8:	mov	r1, #1
   148fc:	bl	110e0 <__sprintf_chk@plt>
   14900:	ldr	r2, [pc, #300]	; 14a34 <__assert_fail@plt+0x3840>
   14904:	mov	r3, #3
   14908:	b	1443c <__assert_fail@plt+0x3248>
   1490c:	ldr	r2, [pc, #324]	; 14a58 <__assert_fail@plt+0x3864>
   14910:	b	1443c <__assert_fail@plt+0x3248>
   14914:	mov	r5, r1
   14918:	ldr	r8, [r6, #128]	; 0x80
   1491c:	b	1478c <__assert_fail@plt+0x3598>
   14920:	ldr	r8, [r6, #76]	; 0x4c
   14924:	mov	r9, #4
   14928:	b	144f8 <__assert_fail@plt+0x3304>
   1492c:	mov	r3, r8
   14930:	ldr	r2, [pc, #260]	; 14a3c <__assert_fail@plt+0x3848>
   14934:	b	1443c <__assert_fail@plt+0x3248>
   14938:	ldr	r3, [pc, #284]	; 14a5c <__assert_fail@plt+0x3868>
   1493c:	mov	r2, #9
   14940:	str	r3, [sp, #4]
   14944:	str	r9, [sp]
   14948:	ldr	r3, [pc, #172]	; 149fc <__assert_fail@plt+0x3808>
   1494c:	mov	r1, #1
   14950:	bl	110e0 <__sprintf_chk@plt>
   14954:	ldr	r2, [pc, #220]	; 14a38 <__assert_fail@plt+0x3844>
   14958:	mov	r3, #3
   1495c:	b	1443c <__assert_fail@plt+0x3248>
   14960:	ldr	r2, [pc, #240]	; 14a58 <__assert_fail@plt+0x3864>
   14964:	mov	r3, #3
   14968:	b	1443c <__assert_fail@plt+0x3248>
   1496c:	ldr	r3, [pc, #236]	; 14a60 <__assert_fail@plt+0x386c>
   14970:	mov	r2, #9
   14974:	str	r3, [sp]
   14978:	mov	r1, #1
   1497c:	ldr	r3, [pc, #136]	; 14a0c <__assert_fail@plt+0x3818>
   14980:	bl	110e0 <__sprintf_chk@plt>
   14984:	ldr	r2, [pc, #172]	; 14a38 <__assert_fail@plt+0x3844>
   14988:	mov	r3, #0
   1498c:	b	1443c <__assert_fail@plt+0x3248>
   14990:	ldr	r8, [r6, #76]	; 0x4c
   14994:	mov	r5, r0
   14998:	mov	r9, #4
   1499c:	b	144f8 <__assert_fail@plt+0x3304>
   149a0:	ldr	r8, [r6, #128]	; 0x80
   149a4:	mov	r5, r1
   149a8:	b	1478c <__assert_fail@plt+0x3598>
   149ac:	mov	r0, #1
   149b0:	bx	lr
   149b4:	ldr	r3, [pc, #168]	; 14a64 <__assert_fail@plt+0x3870>
   149b8:	ldr	r2, [pc, #168]	; 14a68 <__assert_fail@plt+0x3874>
   149bc:	ldr	r1, [pc, #168]	; 14a6c <__assert_fail@plt+0x3878>
   149c0:	ldr	r0, [pc, #168]	; 14a70 <__assert_fail@plt+0x387c>
   149c4:	bl	111f4 <__assert_fail@plt>
   149c8:	ldr	r3, [pc, #164]	; 14a74 <__assert_fail@plt+0x3880>
   149cc:	ldr	r2, [pc, #164]	; 14a78 <__assert_fail@plt+0x3884>
   149d0:	ldr	r1, [pc, #148]	; 14a6c <__assert_fail@plt+0x3878>
   149d4:	ldr	r0, [pc, #160]	; 14a7c <__assert_fail@plt+0x3888>
   149d8:	bl	111f4 <__assert_fail@plt>
   149dc:	andeq	lr, r2, r8, lsl #3
   149e0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   149e4:	andeq	fp, r1, r0, asr r9
   149e8:	andeq	r3, r1, ip, lsr r8
   149ec:	ldrdeq	r2, [r1], -ip
   149f0:	andeq	fp, r1, r4, lsr #19
   149f4:	andeq	fp, r1, r4, asr #9
   149f8:	andeq	ip, r1, ip, lsl #21
   149fc:	andeq	fp, r1, r4, asr #18
   14a00:	andeq	r3, r1, ip, asr #5
   14a04:	andeq	fp, r1, r8, asr #17
   14a08:	andeq	fp, r1, r4, asr #17
   14a0c:	andeq	fp, r1, r8, lsr r9
   14a10:			; <UNDEFINED> instruction: 0x0001b8bc
   14a14:			; <UNDEFINED> instruction: 0x0001b8b8
   14a18:	andeq	fp, r1, r0, asr #18
   14a1c:			; <UNDEFINED> instruction: 0x000131b0
   14a20:	andeq	fp, r1, r8, ror #17
   14a24:	adceq	sl, sl, #692224	; 0xa9000
   14a28:	andeq	r3, r1, ip, asr #8
   14a2c:	muleq	r1, r8, r5
   14a30:	andeq	r3, r1, r4, ror #13
   14a34:	andeq	r2, r1, r8, lsl #26
   14a38:	andeq	r2, r1, ip, lsr #28
   14a3c:	andeq	r2, r1, r0, ror #30
   14a40:			; <UNDEFINED> instruction: 0x0001b8b4
   14a44:	andeq	fp, r1, r0, asr #17
   14a48:	andeq	r3, r1, ip, lsl #7
   14a4c:	ldrdeq	fp, [r1], -ip
   14a50:	strdeq	fp, [r1], -r4
   14a54:	strdeq	fp, [r1], -ip
   14a58:	muleq	r1, r4, r0
   14a5c:	andeq	fp, r1, r0, lsl #20
   14a60:	strdeq	fp, [r1], -r8
   14a64:	muleq	r1, r0, r6
   14a68:	andeq	r0, r0, r3, ror #7
   14a6c:	andeq	fp, r1, ip, asr #17
   14a70:	ldrdeq	fp, [r1], -r0
   14a74:	andeq	fp, r1, ip, ror #10
   14a78:	andeq	r0, r0, r5, lsl #5
   14a7c:	ldrdeq	fp, [r1], -r8
   14a80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a84:	subs	r8, r0, #0
   14a88:	beq	14b24 <__assert_fail@plt+0x3930>
   14a8c:	ldr	r7, [pc, #164]	; 14b38 <__assert_fail@plt+0x3944>
   14a90:	ldr	r3, [r7, #28]
   14a94:	cmp	r3, r8
   14a98:	bcc	14b24 <__assert_fail@plt+0x3930>
   14a9c:	ldr	r3, [r7, #12]
   14aa0:	mov	r0, #0
   14aa4:	cmp	r3, r0
   14aa8:	mov	r5, r2
   14aac:	str	r0, [r2]
   14ab0:	beq	14b1c <__assert_fail@plt+0x3928>
   14ab4:	mov	r9, r1
   14ab8:	mov	r6, #1
   14abc:	b	14aec <__assert_fail@plt+0x38f8>
   14ac0:	bl	110d4 <__errno_location@plt>
   14ac4:	ldr	r0, [r0]
   14ac8:	bl	13a10 <__assert_fail@plt+0x281c>
   14acc:	mov	r4, r0
   14ad0:	bl	13b54 <__assert_fail@plt+0x2960>
   14ad4:	ldr	r3, [r7, #12]
   14ad8:	cmp	r3, #0
   14adc:	and	r0, r0, r4
   14ae0:	and	r6, r6, r0
   14ae4:	beq	14b14 <__assert_fail@plt+0x3920>
   14ae8:	ldr	r0, [r5]
   14aec:	sub	r4, r8, r0
   14af0:	mov	r2, r4
   14af4:	add	r0, r9, r0
   14af8:	mov	r1, #1
   14afc:	bl	111c4 <fread_unlocked@plt>
   14b00:	ldr	r3, [r5]
   14b04:	cmp	r4, r0
   14b08:	add	r3, r3, r0
   14b0c:	str	r3, [r5]
   14b10:	bne	14ac0 <__assert_fail@plt+0x38cc>
   14b14:	mov	r0, r6
   14b18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b1c:	mov	r6, #1
   14b20:	b	14b14 <__assert_fail@plt+0x3920>
   14b24:	ldr	r3, [pc, #16]	; 14b3c <__assert_fail@plt+0x3948>
   14b28:	ldr	r2, [pc, #16]	; 14b40 <__assert_fail@plt+0x394c>
   14b2c:	ldr	r1, [pc, #16]	; 14b44 <__assert_fail@plt+0x3950>
   14b30:	ldr	r0, [pc, #16]	; 14b48 <__assert_fail@plt+0x3954>
   14b34:	bl	111f4 <__assert_fail@plt>
   14b38:	andeq	lr, r2, r8, lsl #3
   14b3c:	andeq	fp, r1, r8, lsr #13
   14b40:	andeq	r0, r0, r7, lsl #10
   14b44:	andeq	fp, r1, ip, asr #17
   14b48:	andeq	fp, r1, r4, lsl #20
   14b4c:	ldr	r3, [pc, #944]	; 14f04 <__assert_fail@plt+0x3d10>
   14b50:	push	{r7, lr}
   14b54:	sub	sp, sp, #72	; 0x48
   14b58:	ldr	r3, [r3]
   14b5c:	subs	r4, r0, #0
   14b60:	str	r3, [sp, #68]	; 0x44
   14b64:	beq	14ba0 <__assert_fail@plt+0x39ac>
   14b68:	ldr	r3, [pc, #920]	; 14f08 <__assert_fail@plt+0x3d14>
   14b6c:	mov	r2, #5
   14b70:	ldr	r1, [pc, #916]	; 14f0c <__assert_fail@plt+0x3d18>
   14b74:	mov	r0, #0
   14b78:	ldr	r5, [r3]
   14b7c:	bl	10fc0 <dcgettext@plt>
   14b80:	ldr	r3, [pc, #904]	; 14f10 <__assert_fail@plt+0x3d1c>
   14b84:	mov	r1, #1
   14b88:	ldr	r3, [r3]
   14b8c:	mov	r2, r0
   14b90:	mov	r0, r5
   14b94:	bl	11140 <__fprintf_chk@plt>
   14b98:	mov	r0, r4
   14b9c:	bl	110b0 <exit@plt>
   14ba0:	mov	r2, #5
   14ba4:	ldr	r1, [pc, #872]	; 14f14 <__assert_fail@plt+0x3d20>
   14ba8:	bl	10fc0 <dcgettext@plt>
   14bac:	ldr	r3, [pc, #860]	; 14f10 <__assert_fail@plt+0x3d1c>
   14bb0:	ldr	r5, [pc, #864]	; 14f18 <__assert_fail@plt+0x3d24>
   14bb4:	ldr	r3, [r3]
   14bb8:	mov	r2, r3
   14bbc:	str	r3, [sp]
   14bc0:	mov	r1, r0
   14bc4:	mov	r0, #1
   14bc8:	bl	1111c <__printf_chk@plt>
   14bcc:	mov	r2, #5
   14bd0:	ldr	r1, [pc, #836]	; 14f1c <__assert_fail@plt+0x3d28>
   14bd4:	mov	r0, r4
   14bd8:	bl	10fc0 <dcgettext@plt>
   14bdc:	ldr	r1, [r5]
   14be0:	bl	10f24 <fputs_unlocked@plt>
   14be4:	mov	r2, #5
   14be8:	ldr	r1, [pc, #816]	; 14f20 <__assert_fail@plt+0x3d2c>
   14bec:	mov	r0, r4
   14bf0:	bl	10fc0 <dcgettext@plt>
   14bf4:	ldr	r1, [r5]
   14bf8:	bl	10f24 <fputs_unlocked@plt>
   14bfc:	mov	r2, #5
   14c00:	ldr	r1, [pc, #796]	; 14f24 <__assert_fail@plt+0x3d30>
   14c04:	mov	r0, r4
   14c08:	bl	10fc0 <dcgettext@plt>
   14c0c:	ldr	r1, [r5]
   14c10:	bl	10f24 <fputs_unlocked@plt>
   14c14:	mov	r2, #5
   14c18:	ldr	r1, [pc, #776]	; 14f28 <__assert_fail@plt+0x3d34>
   14c1c:	mov	r0, r4
   14c20:	bl	10fc0 <dcgettext@plt>
   14c24:	ldr	r1, [r5]
   14c28:	bl	10f24 <fputs_unlocked@plt>
   14c2c:	mov	r2, #5
   14c30:	ldr	r1, [pc, #756]	; 14f2c <__assert_fail@plt+0x3d38>
   14c34:	mov	r0, r4
   14c38:	bl	10fc0 <dcgettext@plt>
   14c3c:	ldr	r1, [r5]
   14c40:	bl	10f24 <fputs_unlocked@plt>
   14c44:	mov	r2, #5
   14c48:	ldr	r1, [pc, #736]	; 14f30 <__assert_fail@plt+0x3d3c>
   14c4c:	mov	r0, r4
   14c50:	bl	10fc0 <dcgettext@plt>
   14c54:	ldr	r1, [r5]
   14c58:	bl	10f24 <fputs_unlocked@plt>
   14c5c:	mov	r2, #5
   14c60:	ldr	r1, [pc, #716]	; 14f34 <__assert_fail@plt+0x3d40>
   14c64:	mov	r0, r4
   14c68:	bl	10fc0 <dcgettext@plt>
   14c6c:	ldr	r1, [r5]
   14c70:	bl	10f24 <fputs_unlocked@plt>
   14c74:	mov	r2, #5
   14c78:	ldr	r1, [pc, #696]	; 14f38 <__assert_fail@plt+0x3d44>
   14c7c:	mov	r0, r4
   14c80:	bl	10fc0 <dcgettext@plt>
   14c84:	ldr	r1, [r5]
   14c88:	bl	10f24 <fputs_unlocked@plt>
   14c8c:	mov	r2, #5
   14c90:	ldr	r1, [pc, #676]	; 14f3c <__assert_fail@plt+0x3d48>
   14c94:	mov	r0, r4
   14c98:	bl	10fc0 <dcgettext@plt>
   14c9c:	ldr	r1, [r5]
   14ca0:	bl	10f24 <fputs_unlocked@plt>
   14ca4:	mov	r2, #5
   14ca8:	ldr	r1, [pc, #656]	; 14f40 <__assert_fail@plt+0x3d4c>
   14cac:	mov	r0, r4
   14cb0:	bl	10fc0 <dcgettext@plt>
   14cb4:	ldr	r1, [r5]
   14cb8:	bl	10f24 <fputs_unlocked@plt>
   14cbc:	mov	r2, #5
   14cc0:	ldr	r1, [pc, #636]	; 14f44 <__assert_fail@plt+0x3d50>
   14cc4:	mov	r0, r4
   14cc8:	bl	10fc0 <dcgettext@plt>
   14ccc:	ldr	r1, [r5]
   14cd0:	bl	10f24 <fputs_unlocked@plt>
   14cd4:	mov	r2, #5
   14cd8:	ldr	r1, [pc, #616]	; 14f48 <__assert_fail@plt+0x3d54>
   14cdc:	mov	r0, r4
   14ce0:	bl	10fc0 <dcgettext@plt>
   14ce4:	ldr	r1, [r5]
   14ce8:	bl	10f24 <fputs_unlocked@plt>
   14cec:	mov	r2, #5
   14cf0:	ldr	r1, [pc, #596]	; 14f4c <__assert_fail@plt+0x3d58>
   14cf4:	mov	r0, r4
   14cf8:	bl	10fc0 <dcgettext@plt>
   14cfc:	ldr	r1, [r5]
   14d00:	bl	10f24 <fputs_unlocked@plt>
   14d04:	mov	r2, #5
   14d08:	ldr	r1, [pc, #576]	; 14f50 <__assert_fail@plt+0x3d5c>
   14d0c:	mov	r0, r4
   14d10:	bl	10fc0 <dcgettext@plt>
   14d14:	ldr	r1, [r5]
   14d18:	bl	10f24 <fputs_unlocked@plt>
   14d1c:	mov	r2, #5
   14d20:	ldr	r1, [pc, #556]	; 14f54 <__assert_fail@plt+0x3d60>
   14d24:	mov	r0, r4
   14d28:	bl	10fc0 <dcgettext@plt>
   14d2c:	ldr	r1, [r5]
   14d30:	bl	10f24 <fputs_unlocked@plt>
   14d34:	ldr	lr, [pc, #540]	; 14f58 <__assert_fail@plt+0x3d64>
   14d38:	add	ip, sp, #12
   14d3c:	ldm	lr!, {r0, r1, r2, r3}
   14d40:	stmia	ip!, {r0, r1, r2, r3}
   14d44:	ldm	lr!, {r0, r1, r2, r3}
   14d48:	ldr	r6, [sp, #12]
   14d4c:	stmia	ip!, {r0, r1, r2, r3}
   14d50:	cmp	r6, #0
   14d54:	ldm	lr!, {r0, r1, r2, r3}
   14d58:	addeq	r5, sp, #12
   14d5c:	stmia	ip!, {r0, r1, r2, r3}
   14d60:	ldm	lr, {r0, r1}
   14d64:	stm	ip, {r0, r1}
   14d68:	beq	14d98 <__assert_fail@plt+0x3ba4>
   14d6c:	ldr	r7, [pc, #488]	; 14f5c <__assert_fail@plt+0x3d68>
   14d70:	add	r5, sp, #12
   14d74:	b	14d84 <__assert_fail@plt+0x3b90>
   14d78:	ldr	r6, [r5, #8]!
   14d7c:	cmp	r6, #0
   14d80:	beq	14d98 <__assert_fail@plt+0x3ba4>
   14d84:	mov	r1, r6
   14d88:	mov	r0, r7
   14d8c:	bl	10f3c <strcmp@plt>
   14d90:	cmp	r0, #0
   14d94:	bne	14d78 <__assert_fail@plt+0x3b84>
   14d98:	ldr	r5, [r5, #4]
   14d9c:	mov	r2, #5
   14da0:	cmp	r5, #0
   14da4:	ldr	r1, [pc, #436]	; 14f60 <__assert_fail@plt+0x3d6c>
   14da8:	beq	14e50 <__assert_fail@plt+0x3c5c>
   14dac:	mov	r0, #0
   14db0:	bl	10fc0 <dcgettext@plt>
   14db4:	ldr	r3, [pc, #424]	; 14f64 <__assert_fail@plt+0x3d70>
   14db8:	ldr	r2, [pc, #424]	; 14f68 <__assert_fail@plt+0x3d74>
   14dbc:	mov	r1, r0
   14dc0:	mov	r0, #1
   14dc4:	bl	1111c <__printf_chk@plt>
   14dc8:	mov	r1, #0
   14dcc:	mov	r0, #5
   14dd0:	bl	11170 <setlocale@plt>
   14dd4:	cmp	r0, #0
   14dd8:	ldreq	r6, [pc, #380]	; 14f5c <__assert_fail@plt+0x3d68>
   14ddc:	beq	14df8 <__assert_fail@plt+0x3c04>
   14de0:	mov	r2, #3
   14de4:	ldr	r1, [pc, #384]	; 14f6c <__assert_fail@plt+0x3d78>
   14de8:	bl	111d0 <strncmp@plt>
   14dec:	ldr	r6, [pc, #360]	; 14f5c <__assert_fail@plt+0x3d68>
   14df0:	cmp	r0, #0
   14df4:	bne	14ee0 <__assert_fail@plt+0x3cec>
   14df8:	mov	r2, #5
   14dfc:	ldr	r1, [pc, #364]	; 14f70 <__assert_fail@plt+0x3d7c>
   14e00:	mov	r0, #0
   14e04:	bl	10fc0 <dcgettext@plt>
   14e08:	ldr	r3, [pc, #332]	; 14f5c <__assert_fail@plt+0x3d68>
   14e0c:	ldr	r2, [pc, #336]	; 14f64 <__assert_fail@plt+0x3d70>
   14e10:	mov	r1, r0
   14e14:	mov	r0, #1
   14e18:	bl	1111c <__printf_chk@plt>
   14e1c:	mov	r2, #5
   14e20:	ldr	r1, [pc, #332]	; 14f74 <__assert_fail@plt+0x3d80>
   14e24:	mov	r0, #0
   14e28:	bl	10fc0 <dcgettext@plt>
   14e2c:	ldr	r2, [pc, #324]	; 14f78 <__assert_fail@plt+0x3d84>
   14e30:	cmp	r5, r6
   14e34:	ldr	r3, [pc, #320]	; 14f7c <__assert_fail@plt+0x3d88>
   14e38:	movne	r3, r2
   14e3c:	mov	r1, r0
   14e40:	mov	r2, r5
   14e44:	mov	r0, #1
   14e48:	bl	1111c <__printf_chk@plt>
   14e4c:	b	14b98 <__assert_fail@plt+0x39a4>
   14e50:	mov	r0, r5
   14e54:	bl	10fc0 <dcgettext@plt>
   14e58:	ldr	r3, [pc, #260]	; 14f64 <__assert_fail@plt+0x3d70>
   14e5c:	ldr	r2, [pc, #260]	; 14f68 <__assert_fail@plt+0x3d74>
   14e60:	mov	r1, r0
   14e64:	mov	r0, #1
   14e68:	bl	1111c <__printf_chk@plt>
   14e6c:	mov	r1, r5
   14e70:	mov	r0, #5
   14e74:	bl	11170 <setlocale@plt>
   14e78:	cmp	r0, #0
   14e7c:	beq	14e94 <__assert_fail@plt+0x3ca0>
   14e80:	mov	r2, #3
   14e84:	ldr	r1, [pc, #224]	; 14f6c <__assert_fail@plt+0x3d78>
   14e88:	bl	111d0 <strncmp@plt>
   14e8c:	cmp	r0, #0
   14e90:	bne	14ed8 <__assert_fail@plt+0x3ce4>
   14e94:	mov	r2, #5
   14e98:	ldr	r1, [pc, #208]	; 14f70 <__assert_fail@plt+0x3d7c>
   14e9c:	mov	r0, #0
   14ea0:	bl	10fc0 <dcgettext@plt>
   14ea4:	ldr	r3, [pc, #176]	; 14f5c <__assert_fail@plt+0x3d68>
   14ea8:	ldr	r2, [pc, #180]	; 14f64 <__assert_fail@plt+0x3d70>
   14eac:	mov	r5, r3
   14eb0:	mov	r1, r0
   14eb4:	mov	r0, #1
   14eb8:	bl	1111c <__printf_chk@plt>
   14ebc:	ldr	r1, [pc, #176]	; 14f74 <__assert_fail@plt+0x3d80>
   14ec0:	mov	r2, #5
   14ec4:	mov	r0, #0
   14ec8:	bl	10fc0 <dcgettext@plt>
   14ecc:	ldr	r3, [pc, #168]	; 14f7c <__assert_fail@plt+0x3d88>
   14ed0:	mov	r1, r0
   14ed4:	b	14e40 <__assert_fail@plt+0x3c4c>
   14ed8:	ldr	r6, [pc, #124]	; 14f5c <__assert_fail@plt+0x3d68>
   14edc:	mov	r5, r6
   14ee0:	mov	r2, #5
   14ee4:	ldr	r1, [pc, #148]	; 14f80 <__assert_fail@plt+0x3d8c>
   14ee8:	mov	r0, #0
   14eec:	bl	10fc0 <dcgettext@plt>
   14ef0:	ldr	r2, [pc, #100]	; 14f5c <__assert_fail@plt+0x3d68>
   14ef4:	mov	r1, r0
   14ef8:	mov	r0, #1
   14efc:	bl	1111c <__printf_chk@plt>
   14f00:	b	14df8 <__assert_fail@plt+0x3c04>
   14f04:	andeq	sp, r2, r8, lsl #30
   14f08:	andeq	lr, r2, r0, ror r1
   14f0c:	andeq	fp, r1, r8, lsr #20
   14f10:	andeq	lr, r2, r8, lsr r2
   14f14:	andeq	fp, r1, r0, asr sl
   14f18:	andeq	lr, r2, ip, ror r1
   14f1c:	strdeq	fp, [r1], -r4
   14f20:	andeq	fp, r1, ip, lsr #23
   14f24:	andeq	fp, r1, r4, ror #23
   14f28:	andeq	fp, r1, ip, ror #26
   14f2c:			; <UNDEFINED> instruction: 0x0001bdb8
   14f30:	ldrdeq	fp, [r1], -r8
   14f34:	andeq	ip, r1, r0, lsl #2
   14f38:	andeq	ip, r1, r0, lsr r1
   14f3c:	andeq	ip, r1, r8, ror #2
   14f40:	andeq	ip, r1, r4, lsr #5
   14f44:			; <UNDEFINED> instruction: 0x0001c3b8
   14f48:	andeq	ip, r1, r0, ror #8
   14f4c:	andeq	ip, r1, ip, asr r5
   14f50:	andeq	ip, r1, r0, asr r6
   14f54:			; <UNDEFINED> instruction: 0x0001c6b0
   14f58:			; <UNDEFINED> instruction: 0x0001b6b4
   14f5c:	andeq	fp, r1, r4, lsr #20
   14f60:	andeq	ip, r1, r0, ror #14
   14f64:	andeq	ip, r1, r8, ror r7
   14f68:	andeq	ip, r1, r0, lsr #15
   14f6c:			; <UNDEFINED> instruction: 0x0001c7b0
   14f70:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   14f74:	andeq	ip, r1, ip, lsl r8
   14f78:	andeq	ip, r1, ip, asr r7
   14f7c:	andeq	ip, r1, r0, lsl sl
   14f80:			; <UNDEFINED> instruction: 0x0001c7b4
   14f84:	mov	r0, #1
   14f88:	b	14b4c <__assert_fail@plt+0x3958>
   14f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f90:	mov	r5, r1
   14f94:	sub	sp, sp, #12
   14f98:	mov	r4, r2
   14f9c:	str	r2, [sp]
   14fa0:	mov	r7, r3
   14fa4:	mov	sl, r0
   14fa8:	bl	110bc <strlen@plt>
   14fac:	ldr	fp, [r5]
   14fb0:	cmp	fp, #0
   14fb4:	beq	15078 <__assert_fail@plt+0x3e84>
   14fb8:	mov	r6, #0
   14fbc:	mov	r8, r0
   14fc0:	str	r6, [sp, #4]
   14fc4:	mvn	r9, #0
   14fc8:	b	14ff4 <__assert_fail@plt+0x3e00>
   14fcc:	bl	10fb4 <memcmp@plt>
   14fd0:	ldr	r3, [sp, #4]
   14fd4:	cmp	r0, #0
   14fd8:	movne	r3, #1
   14fdc:	str	r3, [sp, #4]
   14fe0:	ldr	fp, [r5, #4]!
   14fe4:	add	r6, r6, #1
   14fe8:	cmp	fp, #0
   14fec:	add	r4, r4, r7
   14ff0:	beq	15050 <__assert_fail@plt+0x3e5c>
   14ff4:	mov	r2, r8
   14ff8:	mov	r1, sl
   14ffc:	mov	r0, fp
   15000:	bl	111d0 <strncmp@plt>
   15004:	cmp	r0, #0
   15008:	mov	r0, fp
   1500c:	bne	14fe0 <__assert_fail@plt+0x3dec>
   15010:	bl	110bc <strlen@plt>
   15014:	ldr	r3, [sp]
   15018:	mov	r2, r7
   1501c:	mov	r1, r4
   15020:	cmp	r0, r8
   15024:	mla	r0, r7, r9, r3
   15028:	beq	15068 <__assert_fail@plt+0x3e74>
   1502c:	cmn	r9, #1
   15030:	moveq	r9, r6
   15034:	beq	14fe0 <__assert_fail@plt+0x3dec>
   15038:	ldr	r3, [sp]
   1503c:	cmp	r3, #0
   15040:	bne	14fcc <__assert_fail@plt+0x3dd8>
   15044:	mov	r3, #1
   15048:	str	r3, [sp, #4]
   1504c:	b	14fe0 <__assert_fail@plt+0x3dec>
   15050:	ldr	r3, [sp, #4]
   15054:	cmp	r3, #0
   15058:	mvnne	r9, #1
   1505c:	mov	r0, r9
   15060:	add	sp, sp, #12
   15064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15068:	mov	r9, r6
   1506c:	mov	r0, r9
   15070:	add	sp, sp, #12
   15074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15078:	mvn	r9, #0
   1507c:	b	1505c <__assert_fail@plt+0x3e68>
   15080:	cmn	r2, #1
   15084:	push	{r4, r5, r6, lr}
   15088:	mov	r2, #5
   1508c:	sub	sp, sp, #8
   15090:	mov	r5, r1
   15094:	mov	r6, r0
   15098:	ldreq	r1, [pc, #76]	; 150ec <__assert_fail@plt+0x3ef8>
   1509c:	ldrne	r1, [pc, #76]	; 150f0 <__assert_fail@plt+0x3efc>
   150a0:	mov	r0, #0
   150a4:	bl	10fc0 <dcgettext@plt>
   150a8:	mov	r2, r5
   150ac:	mov	r1, #8
   150b0:	mov	r4, r0
   150b4:	mov	r0, #0
   150b8:	bl	176d0 <__assert_fail@plt+0x64dc>
   150bc:	mov	r1, r6
   150c0:	mov	r5, r0
   150c4:	mov	r0, #1
   150c8:	bl	17a1c <__assert_fail@plt+0x6828>
   150cc:	mov	r1, #0
   150d0:	mov	r3, r5
   150d4:	mov	r2, r4
   150d8:	str	r0, [sp]
   150dc:	mov	r0, r1
   150e0:	bl	11044 <error@plt>
   150e4:	add	sp, sp, #8
   150e8:	pop	{r4, r5, r6, pc}
   150ec:	andeq	ip, r1, r0, lsl #22
   150f0:	andeq	ip, r1, ip, lsl fp
   150f4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150f8:	mov	r6, r0
   150fc:	ldr	sl, [pc, #224]	; 151e4 <__assert_fail@plt+0x3ff0>
   15100:	mov	r4, r1
   15104:	mov	r7, r2
   15108:	ldr	r1, [pc, #216]	; 151e8 <__assert_fail@plt+0x3ff4>
   1510c:	mov	r2, #5
   15110:	mov	r0, #0
   15114:	bl	10fc0 <dcgettext@plt>
   15118:	ldr	r1, [sl]
   1511c:	bl	10f24 <fputs_unlocked@plt>
   15120:	ldr	fp, [r6]
   15124:	cmp	fp, #0
   15128:	movne	r9, #0
   1512c:	movne	r5, r9
   15130:	bne	1516c <__assert_fail@plt+0x3f78>
   15134:	b	151b0 <__assert_fail@plt+0x3fbc>
   15138:	mov	r0, fp
   1513c:	bl	17a2c <__assert_fail@plt+0x6838>
   15140:	ldr	r2, [pc, #164]	; 151ec <__assert_fail@plt+0x3ff8>
   15144:	mov	r1, #1
   15148:	mov	r9, r4
   1514c:	mov	r3, r0
   15150:	mov	r0, r8
   15154:	bl	11140 <__fprintf_chk@plt>
   15158:	ldr	fp, [r6, #4]!
   1515c:	add	r5, r5, #1
   15160:	cmp	fp, #0
   15164:	add	r4, r4, r7
   15168:	beq	151b0 <__assert_fail@plt+0x3fbc>
   1516c:	cmp	r5, #0
   15170:	mov	r1, r4
   15174:	mov	r2, r7
   15178:	mov	r0, r9
   1517c:	ldr	r8, [sl]
   15180:	beq	15138 <__assert_fail@plt+0x3f44>
   15184:	bl	10fb4 <memcmp@plt>
   15188:	cmp	r0, #0
   1518c:	bne	15138 <__assert_fail@plt+0x3f44>
   15190:	mov	r0, fp
   15194:	bl	17a2c <__assert_fail@plt+0x6838>
   15198:	ldr	r2, [pc, #80]	; 151f0 <__assert_fail@plt+0x3ffc>
   1519c:	mov	r1, #1
   151a0:	mov	r3, r0
   151a4:	mov	r0, r8
   151a8:	bl	11140 <__fprintf_chk@plt>
   151ac:	b	15158 <__assert_fail@plt+0x3f64>
   151b0:	ldr	r0, [sl]
   151b4:	ldr	r3, [r0, #20]
   151b8:	ldr	r2, [r0, #24]
   151bc:	cmp	r3, r2
   151c0:	bcs	151d8 <__assert_fail@plt+0x3fe4>
   151c4:	add	r1, r3, #1
   151c8:	mov	r2, #10
   151cc:	str	r1, [r0, #20]
   151d0:	strb	r2, [r3]
   151d4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151d8:	mov	r1, #10
   151dc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151e0:	b	11164 <__overflow@plt>
   151e4:	andeq	lr, r2, r0, ror r1
   151e8:	andeq	ip, r1, ip, lsr fp
   151ec:	andeq	ip, r1, r4, asr fp
   151f0:	andeq	ip, r1, ip, asr fp
   151f4:	push	{r4, r5, r6, r7, r8, lr}
   151f8:	mov	r6, r1
   151fc:	mov	r4, r2
   15200:	mov	r5, r3
   15204:	mov	r7, r0
   15208:	ldr	r3, [sp, #24]
   1520c:	mov	r2, r5
   15210:	mov	r1, r4
   15214:	mov	r0, r6
   15218:	bl	14f8c <__assert_fail@plt+0x3d98>
   1521c:	cmp	r0, #0
   15220:	popge	{r4, r5, r6, r7, r8, pc}
   15224:	mov	r2, r0
   15228:	mov	r1, r6
   1522c:	mov	r0, r7
   15230:	bl	15080 <__assert_fail@plt+0x3e8c>
   15234:	mov	r0, r4
   15238:	ldr	r2, [sp, #24]
   1523c:	mov	r1, r5
   15240:	bl	150f4 <__assert_fail@plt+0x3f00>
   15244:	ldr	r3, [sp, #28]
   15248:	blx	r3
   1524c:	mvn	r0, #0
   15250:	pop	{r4, r5, r6, r7, r8, pc}
   15254:	push	{r4, r5, r6, r7, r8, lr}
   15258:	ldr	r7, [r1]
   1525c:	cmp	r7, #0
   15260:	beq	152a0 <__assert_fail@plt+0x40ac>
   15264:	mov	r6, r3
   15268:	mov	r8, r0
   1526c:	mov	r4, r2
   15270:	mov	r5, r1
   15274:	b	15284 <__assert_fail@plt+0x4090>
   15278:	ldr	r7, [r5, #4]!
   1527c:	cmp	r7, #0
   15280:	beq	152a0 <__assert_fail@plt+0x40ac>
   15284:	mov	r1, r4
   15288:	mov	r2, r6
   1528c:	mov	r0, r8
   15290:	bl	10fb4 <memcmp@plt>
   15294:	add	r4, r4, r6
   15298:	cmp	r0, #0
   1529c:	bne	15278 <__assert_fail@plt+0x4084>
   152a0:	mov	r0, r7
   152a4:	pop	{r4, r5, r6, r7, r8, pc}
   152a8:	ldr	r3, [pc, #4]	; 152b4 <__assert_fail@plt+0x40c0>
   152ac:	str	r0, [r3]
   152b0:	bx	lr
   152b4:	andeq	lr, r2, r0, lsr r2
   152b8:	ldr	r3, [pc, #4]	; 152c4 <__assert_fail@plt+0x40d0>
   152bc:	strb	r0, [r3, #4]
   152c0:	bx	lr
   152c4:	andeq	lr, r2, r0, lsr r2
   152c8:	ldr	r3, [pc, #180]	; 15384 <__assert_fail@plt+0x4190>
   152cc:	push	{r4, r5, r6, lr}
   152d0:	sub	sp, sp, #8
   152d4:	ldr	r0, [r3]
   152d8:	bl	1915c <__assert_fail@plt+0x7f68>
   152dc:	cmp	r0, #0
   152e0:	beq	15308 <__assert_fail@plt+0x4114>
   152e4:	bl	110d4 <__errno_location@plt>
   152e8:	ldr	r5, [pc, #152]	; 15388 <__assert_fail@plt+0x4194>
   152ec:	ldrb	r3, [r5, #4]
   152f0:	cmp	r3, #0
   152f4:	mov	r4, r0
   152f8:	beq	15324 <__assert_fail@plt+0x4130>
   152fc:	ldr	r3, [r0]
   15300:	cmp	r3, #32
   15304:	bne	15324 <__assert_fail@plt+0x4130>
   15308:	ldr	r3, [pc, #124]	; 1538c <__assert_fail@plt+0x4198>
   1530c:	ldr	r0, [r3]
   15310:	bl	1915c <__assert_fail@plt+0x7f68>
   15314:	cmp	r0, #0
   15318:	bne	15364 <__assert_fail@plt+0x4170>
   1531c:	add	sp, sp, #8
   15320:	pop	{r4, r5, r6, pc}
   15324:	mov	r2, #5
   15328:	ldr	r1, [pc, #96]	; 15390 <__assert_fail@plt+0x419c>
   1532c:	mov	r0, #0
   15330:	bl	10fc0 <dcgettext@plt>
   15334:	mov	r6, r0
   15338:	ldr	r0, [r5]
   1533c:	cmp	r0, #0
   15340:	beq	15370 <__assert_fail@plt+0x417c>
   15344:	ldr	r4, [r4]
   15348:	bl	1784c <__assert_fail@plt+0x6658>
   1534c:	mov	r1, r4
   15350:	str	r6, [sp]
   15354:	ldr	r2, [pc, #56]	; 15394 <__assert_fail@plt+0x41a0>
   15358:	mov	r3, r0
   1535c:	mov	r0, #0
   15360:	bl	11044 <error@plt>
   15364:	ldr	r3, [pc, #44]	; 15398 <__assert_fail@plt+0x41a4>
   15368:	ldr	r0, [r3]
   1536c:	bl	10f6c <_exit@plt>
   15370:	mov	r3, r6
   15374:	ldr	r1, [r4]
   15378:	ldr	r2, [pc, #28]	; 1539c <__assert_fail@plt+0x41a8>
   1537c:	bl	11044 <error@plt>
   15380:	b	15364 <__assert_fail@plt+0x4170>
   15384:	andeq	lr, r2, ip, ror r1
   15388:	andeq	lr, r2, r0, lsr r2
   1538c:	andeq	lr, r2, r0, ror r1
   15390:	andeq	fp, r1, r4, ror #16
   15394:	andeq	ip, r1, r4, ror #22
   15398:	andeq	lr, r2, ip, lsl r1
   1539c:	andeq	ip, r1, r8, ror #22
   153a0:	vcmpe.f64	d0, #0.0
   153a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   153a8:	vpush	{d8}
   153ac:	ldr	r9, [pc, #324]	; 154f8 <__assert_fail@plt+0x4304>
   153b0:	vmrs	APSR_nzcv, fpscr
   153b4:	mov	r5, r1
   153b8:	sub	sp, sp, #40	; 0x28
   153bc:	ldr	r1, [r9]
   153c0:	vnegmi.f64	d6, d0
   153c4:	vmovpl.f64	d6, d0
   153c8:	vldr	d7, [pc, #288]	; 154f0 <__assert_fail@plt+0x42fc>
   153cc:	ldr	r7, [pc, #296]	; 154fc <__assert_fail@plt+0x4308>
   153d0:	and	lr, r2, #1
   153d4:	add	r4, sp, #25
   153d8:	vcmpe.f64	d6, d7
   153dc:	str	r1, [sp, #36]	; 0x24
   153e0:	lsr	r1, r2, #1
   153e4:	strh	r7, [sp, #24]
   153e8:	add	ip, r4, lr
   153ec:	and	r1, r1, #1
   153f0:	mov	r7, #43	; 0x2b
   153f4:	mov	r8, r3
   153f8:	lsr	r3, r2, #2
   153fc:	strb	r7, [r4, lr]
   15400:	tst	r2, #16
   15404:	and	r3, r3, #1
   15408:	add	lr, ip, r1
   1540c:	mov	r4, #32
   15410:	lsr	r2, r2, #3
   15414:	strb	r4, [ip, r1]
   15418:	and	r2, r2, #1
   1541c:	mov	r6, r0
   15420:	add	ip, lr, r3
   15424:	movne	r0, #71	; 0x47
   15428:	moveq	r0, #103	; 0x67
   1542c:	mov	r1, #48	; 0x30
   15430:	vmrs	APSR_nzcv, fpscr
   15434:	strb	r1, [lr, r3]
   15438:	add	r3, ip, r2
   1543c:	mov	r1, #42	; 0x2a
   15440:	strb	r1, [ip, r2]
   15444:	mov	r2, #46	; 0x2e
   15448:	strb	r2, [r3, #1]
   1544c:	mov	r2, #0
   15450:	vmov.f64	d8, d0
   15454:	movmi	r4, #1
   15458:	movpl	r4, #15
   1545c:	add	r7, sp, #24
   15460:	strb	r1, [r3, #2]
   15464:	strb	r0, [r3, #3]
   15468:	strb	r2, [r3, #4]
   1546c:	b	15474 <__assert_fail@plt+0x4280>
   15470:	add	r4, r4, #1
   15474:	mov	r1, r5
   15478:	vstr	d8, [sp, #16]
   1547c:	str	r4, [sp, #8]
   15480:	stm	sp, {r7, r8}
   15484:	mvn	r3, #0
   15488:	mov	r2, #1
   1548c:	mov	r0, r6
   15490:	bl	111e8 <__snprintf_chk@plt>
   15494:	cmp	r4, #16
   15498:	movle	r1, #0
   1549c:	movgt	r1, #1
   154a0:	orrs	r1, r1, r0, lsr #31
   154a4:	mov	sl, r0
   154a8:	bne	154c8 <__assert_fail@plt+0x42d4>
   154ac:	cmp	r0, r5
   154b0:	bcs	15470 <__assert_fail@plt+0x427c>
   154b4:	mov	r0, r6
   154b8:	bl	11128 <strtod@plt>
   154bc:	vcmp.f64	d0, d8
   154c0:	vmrs	APSR_nzcv, fpscr
   154c4:	bne	15470 <__assert_fail@plt+0x427c>
   154c8:	ldr	r2, [sp, #36]	; 0x24
   154cc:	ldr	r3, [r9]
   154d0:	mov	r0, sl
   154d4:	cmp	r2, r3
   154d8:	bne	154e8 <__assert_fail@plt+0x42f4>
   154dc:	add	sp, sp, #40	; 0x28
   154e0:	vpop	{d8}
   154e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154e8:	bl	10fcc <__stack_chk_fail@plt>
   154ec:	nop			; (mov r0, r0)
   154f0:	andeq	r0, r0, r0
   154f4:	andseq	r0, r0, r0
   154f8:	andeq	sp, r2, r8, lsl #30
   154fc:	andeq	r2, r0, r5, lsr #26
   15500:	vcmpe.f32	s0, #0.0
   15504:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15508:	vpush	{d8-d9}
   1550c:	ldr	r9, [pc, #320]	; 15654 <__assert_fail@plt+0x4460>
   15510:	vmrs	APSR_nzcv, fpscr
   15514:	mov	r5, r1
   15518:	sub	sp, sp, #40	; 0x28
   1551c:	ldr	r1, [r9]
   15520:	vnegmi.f32	s14, s0
   15524:	vmovpl.f32	s14, s0
   15528:	vldr	s15, [pc, #288]	; 15650 <__assert_fail@plt+0x445c>
   1552c:	ldr	r7, [pc, #292]	; 15658 <__assert_fail@plt+0x4464>
   15530:	and	lr, r2, #1
   15534:	add	r4, sp, #25
   15538:	vcmpe.f32	s14, s15
   1553c:	str	r1, [sp, #36]	; 0x24
   15540:	lsr	r1, r2, #1
   15544:	strh	r7, [sp, #24]
   15548:	add	ip, r4, lr
   1554c:	and	r1, r1, #1
   15550:	mov	r7, #43	; 0x2b
   15554:	mov	r8, r3
   15558:	lsr	r3, r2, #2
   1555c:	strb	r7, [r4, lr]
   15560:	tst	r2, #16
   15564:	and	r3, r3, #1
   15568:	add	lr, ip, r1
   1556c:	mov	r4, #32
   15570:	lsr	r2, r2, #3
   15574:	strb	r4, [ip, r1]
   15578:	and	r2, r2, #1
   1557c:	mov	r6, r0
   15580:	add	ip, lr, r3
   15584:	movne	r0, #71	; 0x47
   15588:	moveq	r0, #103	; 0x67
   1558c:	mov	r1, #48	; 0x30
   15590:	vmrs	APSR_nzcv, fpscr
   15594:	strb	r1, [lr, r3]
   15598:	add	r3, ip, r2
   1559c:	mov	r1, #42	; 0x2a
   155a0:	strb	r1, [ip, r2]
   155a4:	mov	r2, #46	; 0x2e
   155a8:	strb	r2, [r3, #1]
   155ac:	mov	r2, #0
   155b0:	vmov.f32	s18, s0
   155b4:	vcvt.f64.f32	d8, s0
   155b8:	movmi	r4, #1
   155bc:	movpl	r4, #6
   155c0:	add	r7, sp, #24
   155c4:	strb	r1, [r3, #2]
   155c8:	strb	r0, [r3, #3]
   155cc:	strb	r2, [r3, #4]
   155d0:	b	155d8 <__assert_fail@plt+0x43e4>
   155d4:	add	r4, r4, #1
   155d8:	mov	r1, r5
   155dc:	vstr	d8, [sp, #16]
   155e0:	str	r4, [sp, #8]
   155e4:	stm	sp, {r7, r8}
   155e8:	mvn	r3, #0
   155ec:	mov	r2, #1
   155f0:	mov	r0, r6
   155f4:	bl	111e8 <__snprintf_chk@plt>
   155f8:	cmp	r4, #8
   155fc:	movle	r1, #0
   15600:	movgt	r1, #1
   15604:	orrs	r1, r1, r0, lsr #31
   15608:	mov	sl, r0
   1560c:	bne	1562c <__assert_fail@plt+0x4438>
   15610:	cmp	r0, r5
   15614:	bcs	155d4 <__assert_fail@plt+0x43e0>
   15618:	mov	r0, r6
   1561c:	bl	11050 <strtof@plt>
   15620:	vcmp.f32	s0, s18
   15624:	vmrs	APSR_nzcv, fpscr
   15628:	bne	155d4 <__assert_fail@plt+0x43e0>
   1562c:	ldr	r2, [sp, #36]	; 0x24
   15630:	ldr	r3, [r9]
   15634:	mov	r0, sl
   15638:	cmp	r2, r3
   1563c:	bne	1564c <__assert_fail@plt+0x4458>
   15640:	add	sp, sp, #40	; 0x28
   15644:	vpop	{d8-d9}
   15648:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1564c:	bl	10fcc <__stack_chk_fail@plt>
   15650:	addeq	r0, r0, r0
   15654:	andeq	sp, r2, r8, lsl #30
   15658:	andeq	r2, r0, r5, lsr #26
   1565c:	andeq	r0, r0, r0
   15660:	vcmpe.f64	d0, #0.0
   15664:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15668:	vpush	{d8}
   1566c:	ldr	r9, [pc, #332]	; 157c0 <__assert_fail@plt+0x45cc>
   15670:	vmrs	APSR_nzcv, fpscr
   15674:	mov	r5, r1
   15678:	sub	sp, sp, #40	; 0x28
   1567c:	ldr	r1, [r9]
   15680:	vnegmi.f64	d6, d0
   15684:	vmovpl.f64	d6, d0
   15688:	vldr	d7, [pc, #296]	; 157b8 <__assert_fail@plt+0x45c4>
   1568c:	ldr	r7, [pc, #304]	; 157c4 <__assert_fail@plt+0x45d0>
   15690:	and	lr, r2, #1
   15694:	add	r4, sp, #25
   15698:	str	r1, [sp, #36]	; 0x24
   1569c:	vcmpe.f64	d6, d7
   156a0:	lsr	r1, r2, #1
   156a4:	strh	r7, [sp, #24]
   156a8:	add	ip, r4, lr
   156ac:	and	r1, r1, #1
   156b0:	mov	r7, #43	; 0x2b
   156b4:	mov	r8, r3
   156b8:	lsr	r3, r2, #2
   156bc:	strb	r7, [r4, lr]
   156c0:	tst	r2, #16
   156c4:	and	r3, r3, #1
   156c8:	add	lr, ip, r1
   156cc:	mov	r4, #32
   156d0:	lsr	r2, r2, #3
   156d4:	strb	r4, [ip, r1]
   156d8:	and	r2, r2, #1
   156dc:	add	ip, lr, r3
   156e0:	mov	r1, #48	; 0x30
   156e4:	strb	r1, [lr, r3]
   156e8:	mov	r6, r0
   156ec:	add	r3, ip, r2
   156f0:	movne	r0, #71	; 0x47
   156f4:	moveq	r0, #103	; 0x67
   156f8:	mov	r1, #42	; 0x2a
   156fc:	vmrs	APSR_nzcv, fpscr
   15700:	strb	r1, [ip, r2]
   15704:	mov	r2, #46	; 0x2e
   15708:	strb	r2, [r3, #1]
   1570c:	mov	r2, #76	; 0x4c
   15710:	strb	r2, [r3, #3]
   15714:	mov	r2, #0
   15718:	vmov.f64	d8, d0
   1571c:	movmi	r4, #1
   15720:	movpl	r4, #15
   15724:	add	r7, sp, #24
   15728:	strb	r1, [r3, #2]
   1572c:	strb	r0, [r3, #4]
   15730:	strb	r2, [r3, #5]
   15734:	b	1573c <__assert_fail@plt+0x4548>
   15738:	add	r4, r4, #1
   1573c:	mov	r1, r5
   15740:	vstr	d8, [sp, #16]
   15744:	str	r4, [sp, #8]
   15748:	stm	sp, {r7, r8}
   1574c:	mvn	r3, #0
   15750:	mov	r2, #1
   15754:	mov	r0, r6
   15758:	bl	111e8 <__snprintf_chk@plt>
   1575c:	cmp	r4, #16
   15760:	movle	r1, #0
   15764:	movgt	r1, #1
   15768:	orrs	r1, r1, r0, lsr #31
   1576c:	mov	sl, r0
   15770:	bne	15790 <__assert_fail@plt+0x459c>
   15774:	cmp	r0, r5
   15778:	bcs	15738 <__assert_fail@plt+0x4544>
   1577c:	mov	r0, r6
   15780:	bl	10f9c <strtold@plt>
   15784:	vcmp.f64	d0, d8
   15788:	vmrs	APSR_nzcv, fpscr
   1578c:	bne	15738 <__assert_fail@plt+0x4544>
   15790:	ldr	r2, [sp, #36]	; 0x24
   15794:	ldr	r3, [r9]
   15798:	mov	r0, sl
   1579c:	cmp	r2, r3
   157a0:	bne	157b0 <__assert_fail@plt+0x45bc>
   157a4:	add	sp, sp, #40	; 0x28
   157a8:	vpop	{d8}
   157ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157b0:	bl	10fcc <__stack_chk_fail@plt>
   157b4:	nop			; (mov r0, r0)
   157b8:	andeq	r0, r0, r0
   157bc:	andseq	r0, r0, r0
   157c0:	andeq	sp, r2, r8, lsl #30
   157c4:	andeq	r2, r0, r5, lsr #26
   157c8:	push	{r4, r5, r6, lr}
   157cc:	subs	r4, r0, #0
   157d0:	beq	15844 <__assert_fail@plt+0x4650>
   157d4:	mov	r1, #47	; 0x2f
   157d8:	bl	1117c <strrchr@plt>
   157dc:	subs	r5, r0, #0
   157e0:	beq	15830 <__assert_fail@plt+0x463c>
   157e4:	add	r6, r5, #1
   157e8:	sub	r3, r6, r4
   157ec:	cmp	r3, #6
   157f0:	ble	15830 <__assert_fail@plt+0x463c>
   157f4:	mov	r2, #7
   157f8:	ldr	r1, [pc, #96]	; 15860 <__assert_fail@plt+0x466c>
   157fc:	sub	r0, r5, #6
   15800:	bl	111d0 <strncmp@plt>
   15804:	cmp	r0, #0
   15808:	bne	15830 <__assert_fail@plt+0x463c>
   1580c:	mov	r2, #3
   15810:	ldr	r1, [pc, #76]	; 15864 <__assert_fail@plt+0x4670>
   15814:	mov	r0, r6
   15818:	bl	111d0 <strncmp@plt>
   1581c:	cmp	r0, #0
   15820:	movne	r4, r6
   15824:	ldreq	r3, [pc, #60]	; 15868 <__assert_fail@plt+0x4674>
   15828:	addeq	r4, r5, #4
   1582c:	streq	r4, [r3]
   15830:	ldr	r2, [pc, #52]	; 1586c <__assert_fail@plt+0x4678>
   15834:	ldr	r3, [pc, #52]	; 15870 <__assert_fail@plt+0x467c>
   15838:	str	r4, [r2]
   1583c:	str	r4, [r3]
   15840:	pop	{r4, r5, r6, pc}
   15844:	ldr	r3, [pc, #40]	; 15874 <__assert_fail@plt+0x4680>
   15848:	mov	r2, #55	; 0x37
   1584c:	mov	r1, #1
   15850:	ldr	r3, [r3]
   15854:	ldr	r0, [pc, #28]	; 15878 <__assert_fail@plt+0x4684>
   15858:	bl	11008 <fwrite@plt>
   1585c:	bl	111dc <abort@plt>
   15860:	andeq	ip, r1, r4, lsr #23
   15864:	andeq	ip, r1, ip, lsr #23
   15868:	andeq	lr, r2, r0, ror #2
   1586c:	andeq	lr, r2, r8, lsr r2
   15870:	andeq	lr, r2, r4, ror #2
   15874:	andeq	lr, r2, r0, ror r1
   15878:	andeq	ip, r1, ip, ror #22
   1587c:	push	{r4, lr}
   15880:	mov	r2, #48	; 0x30
   15884:	mov	r4, r1
   15888:	mov	r1, #0
   1588c:	bl	11104 <memset@plt>
   15890:	cmp	r4, #10
   15894:	beq	158a0 <__assert_fail@plt+0x46ac>
   15898:	str	r4, [r0]
   1589c:	pop	{r4, pc}
   158a0:	bl	111dc <abort@plt>
   158a4:	push	{r4, r5, r6, lr}
   158a8:	mov	r2, #5
   158ac:	mov	r5, r0
   158b0:	mov	r6, r1
   158b4:	mov	r1, r0
   158b8:	mov	r0, #0
   158bc:	bl	10fc0 <dcgettext@plt>
   158c0:	cmp	r5, r0
   158c4:	mov	r4, r0
   158c8:	beq	158d4 <__assert_fail@plt+0x46e0>
   158cc:	mov	r0, r4
   158d0:	pop	{r4, r5, r6, pc}
   158d4:	bl	1921c <__assert_fail@plt+0x8028>
   158d8:	ldrb	r3, [r0]
   158dc:	bic	r3, r3, #32
   158e0:	cmp	r3, #85	; 0x55
   158e4:	bne	15944 <__assert_fail@plt+0x4750>
   158e8:	ldrb	r3, [r0, #1]
   158ec:	bic	r3, r3, #32
   158f0:	cmp	r3, #84	; 0x54
   158f4:	bne	159bc <__assert_fail@plt+0x47c8>
   158f8:	ldrb	r3, [r0, #2]
   158fc:	bic	r3, r3, #32
   15900:	cmp	r3, #70	; 0x46
   15904:	bne	159bc <__assert_fail@plt+0x47c8>
   15908:	ldrb	r3, [r0, #3]
   1590c:	cmp	r3, #45	; 0x2d
   15910:	bne	159bc <__assert_fail@plt+0x47c8>
   15914:	ldrb	r3, [r0, #4]
   15918:	cmp	r3, #56	; 0x38
   1591c:	bne	159bc <__assert_fail@plt+0x47c8>
   15920:	ldrb	r3, [r0, #5]
   15924:	cmp	r3, #0
   15928:	bne	159bc <__assert_fail@plt+0x47c8>
   1592c:	ldrb	r2, [r4]
   15930:	ldr	r3, [pc, #156]	; 159d4 <__assert_fail@plt+0x47e0>
   15934:	ldr	r4, [pc, #156]	; 159d8 <__assert_fail@plt+0x47e4>
   15938:	cmp	r2, #96	; 0x60
   1593c:	movne	r4, r3
   15940:	b	158cc <__assert_fail@plt+0x46d8>
   15944:	cmp	r3, #71	; 0x47
   15948:	bne	159bc <__assert_fail@plt+0x47c8>
   1594c:	ldrb	r3, [r0, #1]
   15950:	bic	r3, r3, #32
   15954:	cmp	r3, #66	; 0x42
   15958:	bne	159bc <__assert_fail@plt+0x47c8>
   1595c:	ldrb	r3, [r0, #2]
   15960:	cmp	r3, #49	; 0x31
   15964:	bne	159bc <__assert_fail@plt+0x47c8>
   15968:	ldrb	r3, [r0, #3]
   1596c:	cmp	r3, #56	; 0x38
   15970:	bne	159bc <__assert_fail@plt+0x47c8>
   15974:	ldrb	r3, [r0, #4]
   15978:	cmp	r3, #48	; 0x30
   1597c:	bne	159bc <__assert_fail@plt+0x47c8>
   15980:	ldrb	r3, [r0, #5]
   15984:	cmp	r3, #51	; 0x33
   15988:	bne	159bc <__assert_fail@plt+0x47c8>
   1598c:	ldrb	r3, [r0, #6]
   15990:	cmp	r3, #48	; 0x30
   15994:	bne	159bc <__assert_fail@plt+0x47c8>
   15998:	ldrb	r3, [r0, #7]
   1599c:	cmp	r3, #0
   159a0:	bne	159bc <__assert_fail@plt+0x47c8>
   159a4:	ldrb	r2, [r4]
   159a8:	ldr	r3, [pc, #44]	; 159dc <__assert_fail@plt+0x47e8>
   159ac:	ldr	r4, [pc, #44]	; 159e0 <__assert_fail@plt+0x47ec>
   159b0:	cmp	r2, #96	; 0x60
   159b4:	movne	r4, r3
   159b8:	b	158cc <__assert_fail@plt+0x46d8>
   159bc:	ldr	r3, [pc, #32]	; 159e4 <__assert_fail@plt+0x47f0>
   159c0:	ldr	r4, [pc, #32]	; 159e8 <__assert_fail@plt+0x47f4>
   159c4:	cmp	r6, #9
   159c8:	movne	r4, r3
   159cc:	mov	r0, r4
   159d0:	pop	{r4, r5, r6, pc}
   159d4:	andeq	ip, r1, r8, lsl #24
   159d8:	andeq	ip, r1, r4, lsl ip
   159dc:	andeq	ip, r1, ip, lsl #24
   159e0:	andeq	ip, r1, r0, lsl ip
   159e4:	andeq	ip, r1, r8, lsl ip
   159e8:	andeq	ip, r1, r4, lsl #24
   159ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159f0:	sub	sp, sp, #124	; 0x7c
   159f4:	ldr	ip, [pc, #3576]	; 167f4 <__assert_fail@plt+0x5600>
   159f8:	str	r3, [sp, #24]
   159fc:	ldr	r3, [sp, #168]	; 0xa8
   15a00:	ldr	ip, [ip]
   15a04:	str	r3, [sp, #56]	; 0x38
   15a08:	ldr	r3, [sp, #172]	; 0xac
   15a0c:	ldr	r8, [sp, #160]	; 0xa0
   15a10:	str	r3, [sp, #80]	; 0x50
   15a14:	ldr	r3, [sp, #176]	; 0xb0
   15a18:	mov	fp, r0
   15a1c:	str	r3, [sp, #76]	; 0x4c
   15a20:	mov	sl, r1
   15a24:	str	r2, [sp, #36]	; 0x24
   15a28:	str	ip, [sp, #116]	; 0x74
   15a2c:	bl	11020 <__ctype_get_mb_cur_max@plt>
   15a30:	ldr	r3, [sp, #164]	; 0xa4
   15a34:	ands	r4, r3, #2
   15a38:	movne	r3, #1
   15a3c:	moveq	r3, #0
   15a40:	str	r3, [sp, #32]
   15a44:	str	r0, [sp, #64]	; 0x40
   15a48:	cmp	r8, #10
   15a4c:	ldrls	pc, [pc, r8, lsl #2]
   15a50:	b	17200 <__assert_fail@plt+0x600c>
   15a54:	andeq	r5, r1, r8, asr #28
   15a58:	andeq	r5, r1, r0, ror #29
   15a5c:	andeq	r6, r1, r0, ror #9
   15a60:	andeq	r5, r1, r0, lsl #30
   15a64:			; <UNDEFINED> instruction: 0x00015db4
   15a68:	strdeq	r5, [r1], -ip
   15a6c:	andeq	r5, r1, r8, ror lr
   15a70:			; <UNDEFINED> instruction: 0x00015eb0
   15a74:	andeq	r5, r1, r0, lsl #21
   15a78:	andeq	r5, r1, r0, lsl #21
   15a7c:	andeq	r5, r1, r0, lsl #21
   15a80:	cmp	r8, #10
   15a84:	beq	15aa8 <__assert_fail@plt+0x48b4>
   15a88:	mov	r1, r8
   15a8c:	ldr	r0, [pc, #3428]	; 167f8 <__assert_fail@plt+0x5604>
   15a90:	bl	158a4 <__assert_fail@plt+0x46b0>
   15a94:	mov	r1, r8
   15a98:	str	r0, [sp, #80]	; 0x50
   15a9c:	ldr	r0, [pc, #3420]	; 16800 <__assert_fail@plt+0x560c>
   15aa0:	bl	158a4 <__assert_fail@plt+0x46b0>
   15aa4:	str	r0, [sp, #76]	; 0x4c
   15aa8:	cmp	r4, #0
   15aac:	movne	r4, #0
   15ab0:	beq	16ec0 <__assert_fail@plt+0x5ccc>
   15ab4:	ldr	r7, [sp, #76]	; 0x4c
   15ab8:	mov	r5, #0
   15abc:	mov	r6, #1
   15ac0:	mov	r0, r7
   15ac4:	str	r6, [sp, #40]	; 0x28
   15ac8:	str	r5, [sp, #68]	; 0x44
   15acc:	bl	110bc <strlen@plt>
   15ad0:	str	r6, [sp, #28]
   15ad4:	str	r5, [sp, #44]	; 0x2c
   15ad8:	str	r5, [sp, #72]	; 0x48
   15adc:	str	r7, [sp, #60]	; 0x3c
   15ae0:	str	r0, [sp, #52]	; 0x34
   15ae4:	str	r8, [sp, #160]	; 0xa0
   15ae8:	mov	r8, fp
   15aec:	ldr	fp, [sp, #160]	; 0xa0
   15af0:	mov	r9, #0
   15af4:	ldr	r3, [sp, #24]
   15af8:	cmn	r3, #1
   15afc:	beq	16064 <__assert_fail@plt+0x4e70>
   15b00:	ldr	r3, [sp, #24]
   15b04:	subs	r6, r3, r9
   15b08:	movne	r6, #1
   15b0c:	cmp	r6, #0
   15b10:	beq	1607c <__assert_fail@plt+0x4e88>
   15b14:	ldr	r7, [sp, #28]
   15b18:	ldr	r0, [sp, #36]	; 0x24
   15b1c:	cmp	fp, #2
   15b20:	moveq	r7, #0
   15b24:	andne	r7, r7, #1
   15b28:	add	r3, r0, r9
   15b2c:	cmp	r7, #0
   15b30:	str	r3, [sp, #48]	; 0x30
   15b34:	beq	16520 <__assert_fail@plt+0x532c>
   15b38:	ldr	r2, [sp, #52]	; 0x34
   15b3c:	cmp	r2, #0
   15b40:	beq	16804 <__assert_fail@plt+0x5610>
   15b44:	ldr	r1, [sp, #24]
   15b48:	cmp	r2, #1
   15b4c:	mov	r3, r2
   15b50:	movls	r3, #0
   15b54:	movhi	r3, #1
   15b58:	cmn	r1, #1
   15b5c:	movne	r3, #0
   15b60:	cmp	r3, #0
   15b64:	add	r5, r9, r2
   15b68:	beq	15b74 <__assert_fail@plt+0x4980>
   15b6c:	bl	110bc <strlen@plt>
   15b70:	str	r0, [sp, #24]
   15b74:	ldr	r3, [sp, #24]
   15b78:	cmp	r5, r3
   15b7c:	bhi	16804 <__assert_fail@plt+0x5610>
   15b80:	ldr	r2, [sp, #52]	; 0x34
   15b84:	ldr	r1, [sp, #60]	; 0x3c
   15b88:	ldr	r0, [sp, #48]	; 0x30
   15b8c:	bl	10fb4 <memcmp@plt>
   15b90:	cmp	r0, #0
   15b94:	bne	16804 <__assert_fail@plt+0x5610>
   15b98:	ldr	r3, [sp, #32]
   15b9c:	cmp	r3, #0
   15ba0:	bne	170c0 <__assert_fail@plt+0x5ecc>
   15ba4:	ldr	r3, [sp, #48]	; 0x30
   15ba8:	ldrb	r5, [r3]
   15bac:	cmp	r5, #126	; 0x7e
   15bb0:	ldrls	pc, [pc, r5, lsl #2]
   15bb4:	b	16484 <__assert_fail@plt+0x5290>
   15bb8:	andeq	r6, r1, r0, ror r3
   15bbc:	andeq	r6, r1, r4, lsl #9
   15bc0:	andeq	r6, r1, r4, lsl #9
   15bc4:	andeq	r6, r1, r4, lsl #9
   15bc8:	andeq	r6, r1, r4, lsl #9
   15bcc:	andeq	r6, r1, r4, lsl #9
   15bd0:	andeq	r6, r1, r4, lsl #9
   15bd4:	andeq	r6, r1, ip, lsr r4
   15bd8:	andeq	r6, r1, ip, lsr #8
   15bdc:	andeq	r6, r1, ip, lsr #6
   15be0:	strdeq	r6, [r1], -r4
   15be4:	andeq	r6, r1, ip, asr #6
   15be8:	andeq	r6, r1, r4, lsr r3
   15bec:	andeq	r6, r1, r4, ror #4
   15bf0:	andeq	r6, r1, r4, lsl #9
   15bf4:	andeq	r6, r1, r4, lsl #9
   15bf8:	andeq	r6, r1, r4, lsl #9
   15bfc:	andeq	r6, r1, r4, lsl #9
   15c00:	andeq	r6, r1, r4, lsl #9
   15c04:	andeq	r6, r1, r4, lsl #9
   15c08:	andeq	r6, r1, r4, lsl #9
   15c0c:	andeq	r6, r1, r4, lsl #9
   15c10:	andeq	r6, r1, r4, lsl #9
   15c14:	andeq	r6, r1, r4, lsl #9
   15c18:	andeq	r6, r1, r4, lsl #9
   15c1c:	andeq	r6, r1, r4, lsl #9
   15c20:	andeq	r6, r1, r4, lsl #9
   15c24:	andeq	r6, r1, r4, lsl #9
   15c28:	andeq	r6, r1, r4, lsl #9
   15c2c:	andeq	r6, r1, r4, lsl #9
   15c30:	andeq	r6, r1, r4, lsl #9
   15c34:	andeq	r6, r1, r4, lsl #9
   15c38:	andeq	r6, r1, r4, asr #8
   15c3c:	andeq	r6, r1, r8, asr r3
   15c40:	andeq	r6, r1, r8, asr r3
   15c44:	andeq	r6, r1, ip, asr r4
   15c48:	andeq	r6, r1, r8, asr r3
   15c4c:	andeq	r6, r1, r8, ror r4
   15c50:	andeq	r6, r1, r8, asr r3
   15c54:	muleq	r1, r8, r1
   15c58:	andeq	r6, r1, r8, asr r3
   15c5c:	andeq	r6, r1, r8, asr r3
   15c60:	andeq	r6, r1, r8, asr r3
   15c64:	andeq	r6, r1, r8, ror r4
   15c68:	andeq	r6, r1, r8, ror r4
   15c6c:	andeq	r6, r1, r8, ror r4
   15c70:	andeq	r6, r1, r8, ror r4
   15c74:	andeq	r6, r1, r8, ror r4
   15c78:	andeq	r6, r1, r8, ror r4
   15c7c:	andeq	r6, r1, r8, ror r4
   15c80:	andeq	r6, r1, r8, ror r4
   15c84:	andeq	r6, r1, r8, ror r4
   15c88:	andeq	r6, r1, r8, ror r4
   15c8c:	andeq	r6, r1, r8, ror r4
   15c90:	andeq	r6, r1, r8, ror r4
   15c94:	andeq	r6, r1, r8, ror r4
   15c98:	andeq	r6, r1, r8, ror r4
   15c9c:	andeq	r6, r1, r8, ror r4
   15ca0:	andeq	r6, r1, r8, ror r4
   15ca4:	andeq	r6, r1, r8, asr r3
   15ca8:	andeq	r6, r1, r8, asr r3
   15cac:	andeq	r6, r1, r8, asr r3
   15cb0:	andeq	r6, r1, r8, asr r3
   15cb4:	andeq	r6, r1, ip, ror #2
   15cb8:	andeq	r6, r1, r4, lsl #9
   15cbc:	andeq	r6, r1, r8, ror r4
   15cc0:	andeq	r6, r1, r8, ror r4
   15cc4:	andeq	r6, r1, r8, ror r4
   15cc8:	andeq	r6, r1, r8, ror r4
   15ccc:	andeq	r6, r1, r8, ror r4
   15cd0:	andeq	r6, r1, r8, ror r4
   15cd4:	andeq	r6, r1, r8, ror r4
   15cd8:	andeq	r6, r1, r8, ror r4
   15cdc:	andeq	r6, r1, r8, ror r4
   15ce0:	andeq	r6, r1, r8, ror r4
   15ce4:	andeq	r6, r1, r8, ror r4
   15ce8:	andeq	r6, r1, r8, ror r4
   15cec:	andeq	r6, r1, r8, ror r4
   15cf0:	andeq	r6, r1, r8, ror r4
   15cf4:	andeq	r6, r1, r8, ror r4
   15cf8:	andeq	r6, r1, r8, ror r4
   15cfc:	andeq	r6, r1, r8, ror r4
   15d00:	andeq	r6, r1, r8, ror r4
   15d04:	andeq	r6, r1, r8, ror r4
   15d08:	andeq	r6, r1, r8, ror r4
   15d0c:	andeq	r6, r1, r8, ror r4
   15d10:	andeq	r6, r1, r8, ror r4
   15d14:	andeq	r6, r1, r8, ror r4
   15d18:	andeq	r6, r1, r8, ror r4
   15d1c:	andeq	r6, r1, r8, ror r4
   15d20:	andeq	r6, r1, r8, ror r4
   15d24:	andeq	r6, r1, r8, asr r3
   15d28:	andeq	r6, r1, r4, lsr #2
   15d2c:	andeq	r6, r1, r8, ror r4
   15d30:	andeq	r6, r1, r8, asr r3
   15d34:	andeq	r6, r1, r8, ror r4
   15d38:	andeq	r6, r1, r8, asr r3
   15d3c:	andeq	r6, r1, r8, ror r4
   15d40:	andeq	r6, r1, r8, ror r4
   15d44:	andeq	r6, r1, r8, ror r4
   15d48:	andeq	r6, r1, r8, ror r4
   15d4c:	andeq	r6, r1, r8, ror r4
   15d50:	andeq	r6, r1, r8, ror r4
   15d54:	andeq	r6, r1, r8, ror r4
   15d58:	andeq	r6, r1, r8, ror r4
   15d5c:	andeq	r6, r1, r8, ror r4
   15d60:	andeq	r6, r1, r8, ror r4
   15d64:	andeq	r6, r1, r8, ror r4
   15d68:	andeq	r6, r1, r8, ror r4
   15d6c:	andeq	r6, r1, r8, ror r4
   15d70:	andeq	r6, r1, r8, ror r4
   15d74:	andeq	r6, r1, r8, ror r4
   15d78:	andeq	r6, r1, r8, ror r4
   15d7c:	andeq	r6, r1, r8, ror r4
   15d80:	andeq	r6, r1, r8, ror r4
   15d84:	andeq	r6, r1, r8, ror r4
   15d88:	andeq	r6, r1, r8, ror r4
   15d8c:	andeq	r6, r1, r8, ror r4
   15d90:	andeq	r6, r1, r8, ror r4
   15d94:	andeq	r6, r1, r8, ror r4
   15d98:	andeq	r6, r1, r8, ror r4
   15d9c:	andeq	r6, r1, r8, ror r4
   15da0:	andeq	r6, r1, r8, ror r4
   15da4:	andeq	r5, r1, ip, lsr pc
   15da8:	andeq	r6, r1, r8, asr r3
   15dac:	andeq	r5, r1, ip, lsr pc
   15db0:	andeq	r6, r1, ip, asr r4
   15db4:	cmp	r4, #0
   15db8:	moveq	r3, #1
   15dbc:	streq	r3, [sp, #28]
   15dc0:	beq	164ec <__assert_fail@plt+0x52f8>
   15dc4:	mov	r3, #0
   15dc8:	mov	r4, r3
   15dcc:	mov	r2, #1
   15dd0:	str	r2, [sp, #40]	; 0x28
   15dd4:	str	r3, [sp, #68]	; 0x44
   15dd8:	str	r2, [sp, #32]
   15ddc:	str	r2, [sp, #52]	; 0x34
   15de0:	ldr	r3, [pc, #2584]	; 16800 <__assert_fail@plt+0x560c>
   15de4:	str	r4, [sp, #44]	; 0x2c
   15de8:	str	r4, [sp, #72]	; 0x48
   15dec:	str	r4, [sp, #28]
   15df0:	str	r3, [sp, #60]	; 0x3c
   15df4:	mov	r8, #2
   15df8:	b	15ae4 <__assert_fail@plt+0x48f0>
   15dfc:	cmp	r4, #0
   15e00:	bne	1708c <__assert_fail@plt+0x5e98>
   15e04:	cmp	sl, #0
   15e08:	beq	16e4c <__assert_fail@plt+0x5c58>
   15e0c:	mov	r3, #34	; 0x22
   15e10:	strb	r3, [fp]
   15e14:	ldr	r3, [pc, #2528]	; 167fc <__assert_fail@plt+0x5608>
   15e18:	mov	r1, r4
   15e1c:	mov	r2, #1
   15e20:	str	r4, [sp, #68]	; 0x44
   15e24:	str	r2, [sp, #40]	; 0x28
   15e28:	mov	r4, r2
   15e2c:	str	r1, [sp, #44]	; 0x2c
   15e30:	str	r1, [sp, #72]	; 0x48
   15e34:	str	r1, [sp, #32]
   15e38:	str	r2, [sp, #28]
   15e3c:	str	r2, [sp, #52]	; 0x34
   15e40:	str	r3, [sp, #60]	; 0x3c
   15e44:	b	15ae4 <__assert_fail@plt+0x48f0>
   15e48:	mov	r3, #0
   15e4c:	str	r3, [sp, #68]	; 0x44
   15e50:	str	r3, [sp, #44]	; 0x2c
   15e54:	str	r3, [sp, #32]
   15e58:	str	r3, [sp, #28]
   15e5c:	str	r3, [sp, #60]	; 0x3c
   15e60:	mov	r3, #1
   15e64:	str	r8, [sp, #72]	; 0x48
   15e68:	str	r8, [sp, #52]	; 0x34
   15e6c:	mov	r4, r8
   15e70:	str	r3, [sp, #40]	; 0x28
   15e74:	b	15ae4 <__assert_fail@plt+0x48f0>
   15e78:	mov	r3, #1
   15e7c:	str	r3, [sp, #40]	; 0x28
   15e80:	str	r3, [sp, #32]
   15e84:	str	r3, [sp, #28]
   15e88:	str	r3, [sp, #52]	; 0x34
   15e8c:	ldr	r3, [pc, #2408]	; 167fc <__assert_fail@plt+0x5608>
   15e90:	mov	r2, #0
   15e94:	mov	r4, r2
   15e98:	str	r2, [sp, #68]	; 0x44
   15e9c:	str	r2, [sp, #44]	; 0x2c
   15ea0:	str	r2, [sp, #72]	; 0x48
   15ea4:	str	r3, [sp, #60]	; 0x3c
   15ea8:	mov	r8, #5
   15eac:	b	15ae4 <__assert_fail@plt+0x48f0>
   15eb0:	mov	r3, #0
   15eb4:	mov	r2, #1
   15eb8:	str	r2, [sp, #40]	; 0x28
   15ebc:	mov	r4, r3
   15ec0:	str	r3, [sp, #68]	; 0x44
   15ec4:	str	r2, [sp, #28]
   15ec8:	str	r3, [sp, #44]	; 0x2c
   15ecc:	str	r3, [sp, #72]	; 0x48
   15ed0:	str	r3, [sp, #32]
   15ed4:	str	r3, [sp, #52]	; 0x34
   15ed8:	str	r3, [sp, #60]	; 0x3c
   15edc:	b	15ae4 <__assert_fail@plt+0x48f0>
   15ee0:	mov	r2, #1
   15ee4:	mov	r3, #0
   15ee8:	str	r2, [sp, #40]	; 0x28
   15eec:	mov	r4, r3
   15ef0:	str	r3, [sp, #68]	; 0x44
   15ef4:	str	r8, [sp, #52]	; 0x34
   15ef8:	str	r2, [sp, #32]
   15efc:	b	15de0 <__assert_fail@plt+0x4bec>
   15f00:	mov	r3, #1
   15f04:	str	r3, [sp, #40]	; 0x28
   15f08:	str	r3, [sp, #32]
   15f0c:	str	r3, [sp, #28]
   15f10:	str	r3, [sp, #52]	; 0x34
   15f14:	ldr	r3, [pc, #2276]	; 16800 <__assert_fail@plt+0x560c>
   15f18:	mov	r2, #0
   15f1c:	mov	r4, r2
   15f20:	str	r2, [sp, #68]	; 0x44
   15f24:	str	r2, [sp, #44]	; 0x2c
   15f28:	str	r2, [sp, #72]	; 0x48
   15f2c:	str	r3, [sp, #60]	; 0x3c
   15f30:	mov	r8, #2
   15f34:	b	15ae4 <__assert_fail@plt+0x48f0>
   15f38:	mov	r7, #0
   15f3c:	ldr	r3, [sp, #24]
   15f40:	cmn	r3, #1
   15f44:	beq	16a80 <__assert_fail@plt+0x588c>
   15f48:	ldr	r3, [sp, #24]
   15f4c:	subs	r3, r3, #1
   15f50:	movne	r3, #1
   15f54:	cmp	r3, #0
   15f58:	sub	r2, fp, #2
   15f5c:	clz	r2, r2
   15f60:	lsr	r2, r2, #5
   15f64:	bne	16160 <__assert_fail@plt+0x4f6c>
   15f68:	cmp	r9, #0
   15f6c:	bne	16160 <__assert_fail@plt+0x4f6c>
   15f70:	ldr	r3, [sp, #32]
   15f74:	tst	r3, r2
   15f78:	bne	16280 <__assert_fail@plt+0x508c>
   15f7c:	ldr	r3, [sp, #28]
   15f80:	eor	r3, r3, #1
   15f84:	orr	r3, r2, r3
   15f88:	ldr	r2, [sp, #32]
   15f8c:	eor	r3, r3, #1
   15f90:	orrs	r3, r2, r3
   15f94:	beq	15fc4 <__assert_fail@plt+0x4dd0>
   15f98:	mov	r3, #0
   15f9c:	ldr	r1, [sp, #56]	; 0x38
   15fa0:	cmp	r1, #0
   15fa4:	beq	15fc4 <__assert_fail@plt+0x4dd0>
   15fa8:	lsr	r2, r5, #5
   15fac:	and	r0, r5, #31
   15fb0:	uxtb	r2, r2
   15fb4:	ldr	r1, [r1, r2, lsl #2]
   15fb8:	lsr	r2, r1, r0
   15fbc:	tst	r2, #1
   15fc0:	bne	15fcc <__assert_fail@plt+0x4dd8>
   15fc4:	cmp	r7, #0
   15fc8:	beq	1621c <__assert_fail@plt+0x5028>
   15fcc:	sub	r2, fp, #2
   15fd0:	clz	r2, r2
   15fd4:	lsr	r2, r2, #5
   15fd8:	ldr	r3, [sp, #32]
   15fdc:	cmp	r3, #0
   15fe0:	bne	1630c <__assert_fail@plt+0x5118>
   15fe4:	ldr	r3, [sp, #44]	; 0x2c
   15fe8:	eor	r3, r3, #1
   15fec:	ands	r3, r2, r3
   15ff0:	beq	16028 <__assert_fail@plt+0x4e34>
   15ff4:	cmp	sl, r4
   15ff8:	movhi	r2, #39	; 0x27
   15ffc:	strbhi	r2, [r8, r4]
   16000:	add	r2, r4, #1
   16004:	cmp	r2, sl
   16008:	movcc	r1, #36	; 0x24
   1600c:	strbcc	r1, [r8, r2]
   16010:	add	r2, r4, #2
   16014:	cmp	r2, sl
   16018:	add	r4, r4, #3
   1601c:	movcc	r1, #39	; 0x27
   16020:	strbcc	r1, [r8, r2]
   16024:	str	r3, [sp, #44]	; 0x2c
   16028:	cmp	r4, sl
   1602c:	movcc	r3, #92	; 0x5c
   16030:	strbcc	r3, [r8, r4]
   16034:	add	r9, r9, #1
   16038:	add	r4, r4, #1
   1603c:	cmp	r4, sl
   16040:	ldr	r3, [sp, #40]	; 0x28
   16044:	strbcc	r5, [r8, r4]
   16048:	cmp	r6, #0
   1604c:	moveq	r3, #0
   16050:	str	r3, [sp, #40]	; 0x28
   16054:	ldr	r3, [sp, #24]
   16058:	add	r4, r4, #1
   1605c:	cmn	r3, #1
   16060:	bne	15b00 <__assert_fail@plt+0x490c>
   16064:	ldr	r3, [sp, #36]	; 0x24
   16068:	ldrb	r6, [r3, r9]
   1606c:	adds	r6, r6, #0
   16070:	movne	r6, #1
   16074:	cmp	r6, #0
   16078:	bne	15b14 <__assert_fail@plt+0x4920>
   1607c:	str	fp, [sp, #160]	; 0xa0
   16080:	mov	fp, r8
   16084:	ldr	r8, [sp, #160]	; 0xa0
   16088:	ldr	r1, [sp, #32]
   1608c:	cmp	r4, #0
   16090:	sub	r2, r8, #2
   16094:	clz	r2, r2
   16098:	lsr	r2, r2, #5
   1609c:	andeq	r3, r2, r1
   160a0:	movne	r3, #0
   160a4:	cmp	r3, #0
   160a8:	bne	17194 <__assert_fail@plt+0x5fa0>
   160ac:	eor	r3, r1, #1
   160b0:	ands	r2, r2, r3
   160b4:	beq	170d0 <__assert_fail@plt+0x5edc>
   160b8:	ldr	r3, [sp, #68]	; 0x44
   160bc:	cmp	r3, #0
   160c0:	beq	170d4 <__assert_fail@plt+0x5ee0>
   160c4:	ldr	r3, [sp, #40]	; 0x28
   160c8:	cmp	r3, #0
   160cc:	bne	17150 <__assert_fail@plt+0x5f5c>
   160d0:	ldr	r3, [sp, #72]	; 0x48
   160d4:	adds	r3, r3, #0
   160d8:	movne	r3, #1
   160dc:	cmp	sl, #0
   160e0:	movne	r3, #0
   160e4:	cmp	r3, #0
   160e8:	ldreq	r2, [sp, #68]	; 0x44
   160ec:	beq	170d4 <__assert_fail@plt+0x5ee0>
   160f0:	ldr	sl, [sp, #72]	; 0x48
   160f4:	str	r3, [sp, #68]	; 0x44
   160f8:	ldr	r3, [pc, #1792]	; 16800 <__assert_fail@plt+0x560c>
   160fc:	mov	r2, #39	; 0x27
   16100:	mov	r4, #1
   16104:	str	r3, [sp, #60]	; 0x3c
   16108:	mov	r3, #0
   1610c:	strb	r2, [fp]
   16110:	str	r4, [sp, #52]	; 0x34
   16114:	mov	r8, #2
   16118:	str	r3, [sp, #32]
   1611c:	b	15ae4 <__assert_fail@plt+0x48f0>
   16120:	mov	r7, #0
   16124:	cmp	fp, #2
   16128:	beq	16a60 <__assert_fail@plt+0x586c>
   1612c:	ldr	r3, [sp, #52]	; 0x34
   16130:	ldr	r2, [sp, #28]
   16134:	ldr	r1, [sp, #32]
   16138:	cmp	r3, #0
   1613c:	andne	r2, r2, r1
   16140:	moveq	r2, #0
   16144:	cmp	r2, #0
   16148:	moveq	r5, #92	; 0x5c
   1614c:	moveq	r3, r5
   16150:	bne	16a6c <__assert_fail@plt+0x5878>
   16154:	ldr	r1, [sp, #28]
   16158:	cmp	r1, #0
   1615c:	bne	171dc <__assert_fail@plt+0x5fe8>
   16160:	mov	r6, #0
   16164:	b	15f7c <__assert_fail@plt+0x4d88>
   16168:	mov	r7, #0
   1616c:	cmp	fp, #2
   16170:	beq	16ad0 <__assert_fail@plt+0x58dc>
   16174:	cmp	fp, #5
   16178:	beq	16a94 <__assert_fail@plt+0x58a0>
   1617c:	sub	r2, fp, #2
   16180:	mov	r6, #0
   16184:	clz	r2, r2
   16188:	mov	r5, #63	; 0x3f
   1618c:	lsr	r2, r2, #5
   16190:	b	15f7c <__assert_fail@plt+0x4d88>
   16194:	mov	r7, #0
   16198:	cmp	fp, #2
   1619c:	strne	r6, [sp, #68]	; 0x44
   161a0:	movne	r2, #0
   161a4:	movne	r5, #39	; 0x27
   161a8:	bne	15f7c <__assert_fail@plt+0x4d88>
   161ac:	ldr	r3, [sp, #32]
   161b0:	cmp	r3, #0
   161b4:	bne	16eb0 <__assert_fail@plt+0x5cbc>
   161b8:	cmp	sl, #0
   161bc:	ldr	r3, [sp, #72]	; 0x48
   161c0:	clz	r3, r3
   161c4:	lsr	r3, r3, #5
   161c8:	moveq	r3, #0
   161cc:	cmp	r3, #0
   161d0:	bne	16de4 <__assert_fail@plt+0x5bf0>
   161d4:	cmp	sl, r4
   161d8:	movhi	r3, #39	; 0x27
   161dc:	strbhi	r3, [r8, r4]
   161e0:	add	r3, r4, #1
   161e4:	cmp	sl, r3
   161e8:	movhi	r2, #92	; 0x5c
   161ec:	strbhi	r2, [r8, r3]
   161f0:	add	r3, r4, #2
   161f4:	cmp	sl, r3
   161f8:	movhi	r2, #39	; 0x27
   161fc:	strbhi	r2, [r8, r3]
   16200:	mov	r3, #0
   16204:	cmp	r7, #0
   16208:	add	r4, r4, #3
   1620c:	str	r3, [sp, #44]	; 0x2c
   16210:	str	r6, [sp, #68]	; 0x44
   16214:	mov	r5, #39	; 0x27
   16218:	bne	15fcc <__assert_fail@plt+0x4dd8>
   1621c:	ldr	r2, [sp, #44]	; 0x2c
   16220:	eor	r3, r3, #1
   16224:	and	r3, r3, r2
   16228:	add	r9, r9, #1
   1622c:	uxtb	r3, r3
   16230:	cmp	r3, #0
   16234:	beq	1603c <__assert_fail@plt+0x4e48>
   16238:	cmp	sl, r4
   1623c:	movhi	r3, #39	; 0x27
   16240:	strbhi	r3, [r8, r4]
   16244:	add	r3, r4, #1
   16248:	cmp	sl, r3
   1624c:	movhi	r2, #39	; 0x27
   16250:	strbhi	r2, [r8, r3]
   16254:	mov	r3, #0
   16258:	add	r4, r4, #2
   1625c:	str	r3, [sp, #44]	; 0x2c
   16260:	b	1603c <__assert_fail@plt+0x4e48>
   16264:	mov	r3, #114	; 0x72
   16268:	ldr	r1, [sp, #32]
   1626c:	sub	r2, fp, #2
   16270:	clz	r2, r2
   16274:	lsr	r2, r2, #5
   16278:	tst	r2, r1
   1627c:	beq	16154 <__assert_fail@plt+0x4f60>
   16280:	mov	fp, r8
   16284:	mov	r8, #2
   16288:	ldr	r3, [sp, #28]
   1628c:	cmp	r3, #0
   16290:	movne	r8, #4
   16294:	ldr	r3, [sp, #164]	; 0xa4
   16298:	mov	ip, #0
   1629c:	bic	r3, r3, #2
   162a0:	str	r3, [sp, #4]
   162a4:	ldr	r3, [sp, #76]	; 0x4c
   162a8:	str	r8, [sp]
   162ac:	str	r3, [sp, #16]
   162b0:	ldr	r3, [sp, #80]	; 0x50
   162b4:	ldr	r2, [sp, #36]	; 0x24
   162b8:	str	r3, [sp, #12]
   162bc:	mov	r1, sl
   162c0:	ldr	r3, [sp, #24]
   162c4:	mov	r0, fp
   162c8:	str	ip, [sp, #8]
   162cc:	bl	159ec <__assert_fail@plt+0x47f8>
   162d0:	mov	r4, r0
   162d4:	ldr	r3, [pc, #1304]	; 167f4 <__assert_fail@plt+0x5600>
   162d8:	ldr	r2, [sp, #116]	; 0x74
   162dc:	mov	r0, r4
   162e0:	ldr	r3, [r3]
   162e4:	cmp	r2, r3
   162e8:	bne	171d8 <__assert_fail@plt+0x5fe4>
   162ec:	add	sp, sp, #124	; 0x7c
   162f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162f4:	mov	r5, #110	; 0x6e
   162f8:	ldr	r3, [sp, #32]
   162fc:	mov	r2, #0
   16300:	cmp	r3, #0
   16304:	mov	r6, r2
   16308:	beq	15fe4 <__assert_fail@plt+0x4df0>
   1630c:	str	fp, [sp, #160]	; 0xa0
   16310:	mov	fp, r8
   16314:	ldr	r8, [sp, #160]	; 0xa0
   16318:	mov	r3, r2
   1631c:	ldr	r2, [sp, #28]
   16320:	and	r2, r2, r3
   16324:	str	r2, [sp, #28]
   16328:	b	16288 <__assert_fail@plt+0x5094>
   1632c:	mov	r5, #116	; 0x74
   16330:	b	162f8 <__assert_fail@plt+0x5104>
   16334:	mov	r5, #102	; 0x66
   16338:	ldr	r3, [sp, #32]
   1633c:	cmp	r3, #0
   16340:	bne	16eec <__assert_fail@plt+0x5cf8>
   16344:	mov	r6, #0
   16348:	b	16028 <__assert_fail@plt+0x4e34>
   1634c:	mov	r5, #118	; 0x76
   16350:	b	16338 <__assert_fail@plt+0x5144>
   16354:	mov	r7, #0
   16358:	mov	r6, #0
   1635c:	b	15f98 <__assert_fail@plt+0x4da4>
   16360:	ldr	r3, [sp, #32]
   16364:	cmp	r3, #0
   16368:	bne	17130 <__assert_fail@plt+0x5f3c>
   1636c:	mov	r7, r3
   16370:	ldr	r3, [sp, #44]	; 0x2c
   16374:	sub	r2, fp, #2
   16378:	eor	r3, r3, #1
   1637c:	clz	r2, r2
   16380:	lsr	r2, r2, #5
   16384:	ands	r3, r2, r3
   16388:	beq	16dd0 <__assert_fail@plt+0x5bdc>
   1638c:	cmp	sl, r4
   16390:	movhi	r1, #39	; 0x27
   16394:	strbhi	r1, [r8, r4]
   16398:	add	r1, r4, #1
   1639c:	cmp	sl, r1
   163a0:	movhi	r0, #36	; 0x24
   163a4:	strbhi	r0, [r8, r1]
   163a8:	add	r1, r4, #2
   163ac:	cmp	sl, r1
   163b0:	movhi	r0, #39	; 0x27
   163b4:	strbhi	r0, [r8, r1]
   163b8:	add	r1, r4, #3
   163bc:	cmp	sl, r1
   163c0:	bls	16e30 <__assert_fail@plt+0x5c3c>
   163c4:	mov	r4, r1
   163c8:	mov	r1, #92	; 0x5c
   163cc:	strb	r1, [r8, r4]
   163d0:	mov	r1, r4
   163d4:	str	r3, [sp, #44]	; 0x2c
   163d8:	cmp	fp, #2
   163dc:	add	r4, r4, #1
   163e0:	beq	16e78 <__assert_fail@plt+0x5c84>
   163e4:	ldr	r0, [sp, #24]
   163e8:	add	r3, r9, #1
   163ec:	cmp	r3, r0
   163f0:	bcs	16408 <__assert_fail@plt+0x5214>
   163f4:	ldr	r0, [sp, #36]	; 0x24
   163f8:	ldrb	r3, [r0, r3]
   163fc:	sub	r3, r3, #48	; 0x30
   16400:	cmp	r3, #9
   16404:	bls	16e88 <__assert_fail@plt+0x5c94>
   16408:	mov	r5, #48	; 0x30
   1640c:	ldr	r3, [sp, #28]
   16410:	eor	r3, r3, #1
   16414:	orrs	r2, r2, r3
   16418:	mov	r3, r6
   1641c:	moveq	r6, r2
   16420:	beq	15f9c <__assert_fail@plt+0x4da8>
   16424:	mov	r6, #0
   16428:	b	15fc4 <__assert_fail@plt+0x4dd0>
   1642c:	mov	r2, #0
   16430:	mov	r6, r2
   16434:	mov	r5, #98	; 0x62
   16438:	b	15fe4 <__assert_fail@plt+0x4df0>
   1643c:	mov	r5, #97	; 0x61
   16440:	b	16344 <__assert_fail@plt+0x5150>
   16444:	mov	r3, r7
   16448:	mov	r6, r7
   1644c:	mov	r2, #0
   16450:	mov	r7, r3
   16454:	mov	r5, #32
   16458:	b	15f7c <__assert_fail@plt+0x4d88>
   1645c:	cmp	r9, #0
   16460:	mov	r3, r7
   16464:	bne	16a2c <__assert_fail@plt+0x5838>
   16468:	mov	r6, r7
   1646c:	mov	r2, r9
   16470:	mov	r7, r3
   16474:	b	15f7c <__assert_fail@plt+0x4d88>
   16478:	mov	r6, r7
   1647c:	b	15f98 <__assert_fail@plt+0x4da4>
   16480:	mov	r7, #0
   16484:	ldr	r3, [sp, #64]	; 0x40
   16488:	cmp	r3, #1
   1648c:	bne	16ae8 <__assert_fail@plt+0x58f4>
   16490:	bl	110a4 <__ctype_b_loc@plt>
   16494:	ldr	r2, [sp, #64]	; 0x40
   16498:	sxth	r3, r5
   1649c:	mov	ip, r2
   164a0:	lsl	r3, r3, #1
   164a4:	ldr	r2, [r0]
   164a8:	ldrh	r3, [r2, r3]
   164ac:	and	r3, r3, #16384	; 0x4000
   164b0:	cmp	r3, #0
   164b4:	ldr	r3, [sp, #28]
   164b8:	movne	r6, #1
   164bc:	moveq	r6, #0
   164c0:	movne	r2, #0
   164c4:	andeq	r2, r3, #1
   164c8:	cmp	r2, #0
   164cc:	bne	16df8 <__assert_fail@plt+0x5c04>
   164d0:	sub	r2, fp, #2
   164d4:	clz	r2, r2
   164d8:	lsr	r2, r2, #5
   164dc:	b	15f7c <__assert_fail@plt+0x4d88>
   164e0:	cmp	r4, #0
   164e4:	bne	171a4 <__assert_fail@plt+0x5fb0>
   164e8:	str	r4, [sp, #28]
   164ec:	cmp	sl, #0
   164f0:	bne	171e8 <__assert_fail@plt+0x5ff4>
   164f4:	ldr	r3, [pc, #772]	; 16800 <__assert_fail@plt+0x560c>
   164f8:	mov	r4, #1
   164fc:	str	r4, [sp, #40]	; 0x28
   16500:	str	r3, [sp, #60]	; 0x3c
   16504:	str	r4, [sp, #52]	; 0x34
   16508:	str	sl, [sp, #72]	; 0x48
   1650c:	str	sl, [sp, #68]	; 0x44
   16510:	str	sl, [sp, #44]	; 0x2c
   16514:	str	sl, [sp, #32]
   16518:	mov	r8, #2
   1651c:	b	15ae4 <__assert_fail@plt+0x48f0>
   16520:	ldr	r3, [sp, #36]	; 0x24
   16524:	ldrb	r5, [r3, r9]
   16528:	cmp	r5, #126	; 0x7e
   1652c:	ldrls	pc, [pc, r5, lsl #2]
   16530:	b	16484 <__assert_fail@plt+0x5290>
   16534:	andeq	r6, r1, r8, ror #14
   16538:	andeq	r6, r1, r4, lsl #9
   1653c:	andeq	r6, r1, r4, lsl #9
   16540:	andeq	r6, r1, r4, lsl #9
   16544:	andeq	r6, r1, r4, lsl #9
   16548:	andeq	r6, r1, r4, lsl #9
   1654c:	andeq	r6, r1, r4, lsl #9
   16550:	andeq	r6, r1, r4, asr r7
   16554:	andeq	r6, r1, r0, asr #14
   16558:	andeq	r6, r1, r8, lsr r7
   1655c:	andeq	r6, r1, r0, lsr r7
   16560:	andeq	r6, r1, r0, ror #15
   16564:	andeq	r6, r1, ip, asr #15
   16568:	andeq	r6, r1, r4, ror #4
   1656c:	andeq	r6, r1, r4, lsl #9
   16570:	andeq	r6, r1, r4, lsl #9
   16574:	andeq	r6, r1, r4, lsl #9
   16578:	andeq	r6, r1, r4, lsl #9
   1657c:	andeq	r6, r1, r4, lsl #9
   16580:	andeq	r6, r1, r4, lsl #9
   16584:	andeq	r6, r1, r4, lsl #9
   16588:	andeq	r6, r1, r4, lsl #9
   1658c:	andeq	r6, r1, r4, lsl #9
   16590:	andeq	r6, r1, r4, lsl #9
   16594:	andeq	r6, r1, r4, lsl #9
   16598:	andeq	r6, r1, r4, lsl #9
   1659c:	andeq	r6, r1, r4, lsl #9
   165a0:	andeq	r6, r1, r4, lsl #9
   165a4:	andeq	r6, r1, r4, lsl #9
   165a8:	andeq	r6, r1, r4, lsl #9
   165ac:	andeq	r6, r1, r4, lsl #9
   165b0:	andeq	r6, r1, r4, lsl #9
   165b4:			; <UNDEFINED> instruction: 0x000167bc
   165b8:	andeq	r6, r1, r8, lsr #15
   165bc:	andeq	r6, r1, r8, lsr #15
   165c0:	muleq	r1, r8, r7
   165c4:	andeq	r6, r1, r8, lsr #15
   165c8:	ldrdeq	r6, [r1], -r0
   165cc:	andeq	r6, r1, r8, lsr #15
   165d0:	muleq	r1, r8, r1
   165d4:	andeq	r6, r1, r8, lsr #15
   165d8:	andeq	r6, r1, r8, lsr #15
   165dc:	andeq	r6, r1, r8, lsr #15
   165e0:	ldrdeq	r6, [r1], -r0
   165e4:	ldrdeq	r6, [r1], -r0
   165e8:	ldrdeq	r6, [r1], -r0
   165ec:	ldrdeq	r6, [r1], -r0
   165f0:	ldrdeq	r6, [r1], -r0
   165f4:	ldrdeq	r6, [r1], -r0
   165f8:	ldrdeq	r6, [r1], -r0
   165fc:	ldrdeq	r6, [r1], -r0
   16600:	ldrdeq	r6, [r1], -r0
   16604:	ldrdeq	r6, [r1], -r0
   16608:	ldrdeq	r6, [r1], -r0
   1660c:	ldrdeq	r6, [r1], -r0
   16610:	ldrdeq	r6, [r1], -r0
   16614:	ldrdeq	r6, [r1], -r0
   16618:	ldrdeq	r6, [r1], -r0
   1661c:	ldrdeq	r6, [r1], -r0
   16620:	andeq	r6, r1, r8, lsr #15
   16624:	andeq	r6, r1, r8, lsr #15
   16628:	andeq	r6, r1, r8, lsr #15
   1662c:	andeq	r6, r1, r8, lsr #15
   16630:	andeq	r6, r1, ip, ror #2
   16634:	andeq	r6, r1, r4, lsl #9
   16638:	ldrdeq	r6, [r1], -r0
   1663c:	ldrdeq	r6, [r1], -r0
   16640:	ldrdeq	r6, [r1], -r0
   16644:	ldrdeq	r6, [r1], -r0
   16648:	ldrdeq	r6, [r1], -r0
   1664c:	ldrdeq	r6, [r1], -r0
   16650:	ldrdeq	r6, [r1], -r0
   16654:	ldrdeq	r6, [r1], -r0
   16658:	ldrdeq	r6, [r1], -r0
   1665c:	ldrdeq	r6, [r1], -r0
   16660:	ldrdeq	r6, [r1], -r0
   16664:	ldrdeq	r6, [r1], -r0
   16668:	ldrdeq	r6, [r1], -r0
   1666c:	ldrdeq	r6, [r1], -r0
   16670:	ldrdeq	r6, [r1], -r0
   16674:	ldrdeq	r6, [r1], -r0
   16678:	ldrdeq	r6, [r1], -r0
   1667c:	ldrdeq	r6, [r1], -r0
   16680:	ldrdeq	r6, [r1], -r0
   16684:	ldrdeq	r6, [r1], -r0
   16688:	ldrdeq	r6, [r1], -r0
   1668c:	ldrdeq	r6, [r1], -r0
   16690:	ldrdeq	r6, [r1], -r0
   16694:	ldrdeq	r6, [r1], -r0
   16698:	ldrdeq	r6, [r1], -r0
   1669c:	ldrdeq	r6, [r1], -r0
   166a0:	andeq	r6, r1, r8, lsr #15
   166a4:	andeq	r6, r1, r4, lsr #2
   166a8:	ldrdeq	r6, [r1], -r0
   166ac:	andeq	r6, r1, r8, lsr #15
   166b0:	ldrdeq	r6, [r1], -r0
   166b4:	andeq	r6, r1, r8, lsr #15
   166b8:	ldrdeq	r6, [r1], -r0
   166bc:	ldrdeq	r6, [r1], -r0
   166c0:	ldrdeq	r6, [r1], -r0
   166c4:	ldrdeq	r6, [r1], -r0
   166c8:	ldrdeq	r6, [r1], -r0
   166cc:	ldrdeq	r6, [r1], -r0
   166d0:	ldrdeq	r6, [r1], -r0
   166d4:	ldrdeq	r6, [r1], -r0
   166d8:	ldrdeq	r6, [r1], -r0
   166dc:	ldrdeq	r6, [r1], -r0
   166e0:	ldrdeq	r6, [r1], -r0
   166e4:	ldrdeq	r6, [r1], -r0
   166e8:	ldrdeq	r6, [r1], -r0
   166ec:	ldrdeq	r6, [r1], -r0
   166f0:	ldrdeq	r6, [r1], -r0
   166f4:	ldrdeq	r6, [r1], -r0
   166f8:	ldrdeq	r6, [r1], -r0
   166fc:	ldrdeq	r6, [r1], -r0
   16700:	ldrdeq	r6, [r1], -r0
   16704:	ldrdeq	r6, [r1], -r0
   16708:	ldrdeq	r6, [r1], -r0
   1670c:	ldrdeq	r6, [r1], -r0
   16710:	ldrdeq	r6, [r1], -r0
   16714:	ldrdeq	r6, [r1], -r0
   16718:	ldrdeq	r6, [r1], -r0
   1671c:	ldrdeq	r6, [r1], -r0
   16720:	andeq	r5, r1, ip, lsr pc
   16724:	andeq	r6, r1, r8, lsr #15
   16728:	andeq	r5, r1, ip, lsr pc
   1672c:	muleq	r1, r8, r7
   16730:	mov	r3, #110	; 0x6e
   16734:	b	16268 <__assert_fail@plt+0x5074>
   16738:	mov	r3, #116	; 0x74
   1673c:	b	16268 <__assert_fail@plt+0x5074>
   16740:	sub	r2, fp, #2
   16744:	mov	r3, #98	; 0x62
   16748:	clz	r2, r2
   1674c:	lsr	r2, r2, #5
   16750:	b	16154 <__assert_fail@plt+0x4f60>
   16754:	sub	r2, fp, #2
   16758:	mov	r3, #97	; 0x61
   1675c:	clz	r2, r2
   16760:	lsr	r2, r2, #5
   16764:	b	16154 <__assert_fail@plt+0x4f60>
   16768:	ldr	r3, [sp, #28]
   1676c:	cmp	r3, #0
   16770:	bne	16360 <__assert_fail@plt+0x516c>
   16774:	ldr	r3, [sp, #164]	; 0xa4
   16778:	tst	r3, #1
   1677c:	bne	16df0 <__assert_fail@plt+0x5bfc>
   16780:	ldr	r6, [sp, #28]
   16784:	sub	r2, fp, #2
   16788:	mov	r7, r6
   1678c:	clz	r2, r2
   16790:	lsr	r2, r2, #5
   16794:	b	15f7c <__assert_fail@plt+0x4d88>
   16798:	sub	r2, fp, #2
   1679c:	clz	r2, r2
   167a0:	lsr	r2, r2, #5
   167a4:	b	15f68 <__assert_fail@plt+0x4d74>
   167a8:	sub	r2, fp, #2
   167ac:	mov	r6, #0
   167b0:	clz	r2, r2
   167b4:	lsr	r2, r2, #5
   167b8:	b	15f70 <__assert_fail@plt+0x4d7c>
   167bc:	sub	r2, fp, #2
   167c0:	clz	r2, r2
   167c4:	lsr	r2, r2, #5
   167c8:	b	15f70 <__assert_fail@plt+0x4d7c>
   167cc:	sub	r2, fp, #2
   167d0:	mov	r3, #102	; 0x66
   167d4:	clz	r2, r2
   167d8:	lsr	r2, r2, #5
   167dc:	b	16154 <__assert_fail@plt+0x4f60>
   167e0:	sub	r2, fp, #2
   167e4:	mov	r3, #118	; 0x76
   167e8:	clz	r2, r2
   167ec:	lsr	r2, r2, #5
   167f0:	b	16154 <__assert_fail@plt+0x4f60>
   167f4:	andeq	sp, r2, r8, lsl #30
   167f8:	andeq	ip, r1, ip, lsl ip
   167fc:	andeq	ip, r1, r4, lsl #24
   16800:	andeq	ip, r1, r8, lsl ip
   16804:	ldr	r3, [sp, #48]	; 0x30
   16808:	ldrb	r5, [r3]
   1680c:	cmp	r5, #126	; 0x7e
   16810:	ldrls	pc, [pc, r5, lsl #2]
   16814:	b	16480 <__assert_fail@plt+0x528c>
   16818:	andeq	r6, r1, r0, ror #6
   1681c:	andeq	r6, r1, r0, lsl #9
   16820:	andeq	r6, r1, r0, lsl #9
   16824:	andeq	r6, r1, r0, lsl #9
   16828:	andeq	r6, r1, r0, lsl #9
   1682c:	andeq	r6, r1, r0, lsl #9
   16830:	andeq	r6, r1, r0, lsl #9
   16834:	andeq	r6, r1, r8, asr sl
   16838:	andeq	r6, r1, r0, asr sl
   1683c:	andeq	r6, r1, ip, lsr #6
   16840:	strdeq	r6, [r1], -r4
   16844:	andeq	r6, r1, ip, asr #6
   16848:	andeq	r6, r1, r4, lsr r3
   1684c:	andeq	r6, r1, r4, asr #20
   16850:	andeq	r6, r1, r0, lsl #9
   16854:	andeq	r6, r1, r0, lsl #9
   16858:	andeq	r6, r1, r0, lsl #9
   1685c:	andeq	r6, r1, r0, lsl #9
   16860:	andeq	r6, r1, r0, lsl #9
   16864:	andeq	r6, r1, r0, lsl #9
   16868:	andeq	r6, r1, r0, lsl #9
   1686c:	andeq	r6, r1, r0, lsl #9
   16870:	andeq	r6, r1, r0, lsl #9
   16874:	andeq	r6, r1, r0, lsl #9
   16878:	andeq	r6, r1, r0, lsl #9
   1687c:	andeq	r6, r1, r0, lsl #9
   16880:	andeq	r6, r1, r0, lsl #9
   16884:	andeq	r6, r1, r0, lsl #9
   16888:	andeq	r6, r1, r0, lsl #9
   1688c:	andeq	r6, r1, r0, lsl #9
   16890:	andeq	r6, r1, r0, lsl #9
   16894:	andeq	r6, r1, r0, lsl #9
   16898:	andeq	r6, r1, ip, lsr sl
   1689c:	andeq	r6, r1, r4, asr r3
   168a0:	andeq	r6, r1, r4, asr r3
   168a4:	andeq	r6, r1, r0, lsr #20
   168a8:	andeq	r6, r1, r4, asr r3
   168ac:	andeq	r6, r1, r4, lsl sl
   168b0:	andeq	r6, r1, r4, asr r3
   168b4:	muleq	r1, r4, r1
   168b8:	andeq	r6, r1, r4, asr r3
   168bc:	andeq	r6, r1, r4, asr r3
   168c0:	andeq	r6, r1, r4, asr r3
   168c4:	andeq	r6, r1, r4, lsl sl
   168c8:	andeq	r6, r1, r4, lsl sl
   168cc:	andeq	r6, r1, r4, lsl sl
   168d0:	andeq	r6, r1, r4, lsl sl
   168d4:	andeq	r6, r1, r4, lsl sl
   168d8:	andeq	r6, r1, r4, lsl sl
   168dc:	andeq	r6, r1, r4, lsl sl
   168e0:	andeq	r6, r1, r4, lsl sl
   168e4:	andeq	r6, r1, r4, lsl sl
   168e8:	andeq	r6, r1, r4, lsl sl
   168ec:	andeq	r6, r1, r4, lsl sl
   168f0:	andeq	r6, r1, r4, lsl sl
   168f4:	andeq	r6, r1, r4, lsl sl
   168f8:	andeq	r6, r1, r4, lsl sl
   168fc:	andeq	r6, r1, r4, lsl sl
   16900:	andeq	r6, r1, r4, lsl sl
   16904:	andeq	r6, r1, r4, asr r3
   16908:	andeq	r6, r1, r4, asr r3
   1690c:	andeq	r6, r1, r4, asr r3
   16910:	andeq	r6, r1, r4, asr r3
   16914:	andeq	r6, r1, r8, ror #2
   16918:	andeq	r6, r1, r0, lsl #9
   1691c:	andeq	r6, r1, r4, lsl sl
   16920:	andeq	r6, r1, r4, lsl sl
   16924:	andeq	r6, r1, r4, lsl sl
   16928:	andeq	r6, r1, r4, lsl sl
   1692c:	andeq	r6, r1, r4, lsl sl
   16930:	andeq	r6, r1, r4, lsl sl
   16934:	andeq	r6, r1, r4, lsl sl
   16938:	andeq	r6, r1, r4, lsl sl
   1693c:	andeq	r6, r1, r4, lsl sl
   16940:	andeq	r6, r1, r4, lsl sl
   16944:	andeq	r6, r1, r4, lsl sl
   16948:	andeq	r6, r1, r4, lsl sl
   1694c:	andeq	r6, r1, r4, lsl sl
   16950:	andeq	r6, r1, r4, lsl sl
   16954:	andeq	r6, r1, r4, lsl sl
   16958:	andeq	r6, r1, r4, lsl sl
   1695c:	andeq	r6, r1, r4, lsl sl
   16960:	andeq	r6, r1, r4, lsl sl
   16964:	andeq	r6, r1, r4, lsl sl
   16968:	andeq	r6, r1, r4, lsl sl
   1696c:	andeq	r6, r1, r4, lsl sl
   16970:	andeq	r6, r1, r4, lsl sl
   16974:	andeq	r6, r1, r4, lsl sl
   16978:	andeq	r6, r1, r4, lsl sl
   1697c:	andeq	r6, r1, r4, lsl sl
   16980:	andeq	r6, r1, r4, lsl sl
   16984:	andeq	r6, r1, r4, asr r3
   16988:	andeq	r6, r1, r0, lsr #2
   1698c:	andeq	r6, r1, r4, lsl sl
   16990:	andeq	r6, r1, r4, asr r3
   16994:	andeq	r6, r1, r4, lsl sl
   16998:	andeq	r6, r1, r4, asr r3
   1699c:	andeq	r6, r1, r4, lsl sl
   169a0:	andeq	r6, r1, r4, lsl sl
   169a4:	andeq	r6, r1, r4, lsl sl
   169a8:	andeq	r6, r1, r4, lsl sl
   169ac:	andeq	r6, r1, r4, lsl sl
   169b0:	andeq	r6, r1, r4, lsl sl
   169b4:	andeq	r6, r1, r4, lsl sl
   169b8:	andeq	r6, r1, r4, lsl sl
   169bc:	andeq	r6, r1, r4, lsl sl
   169c0:	andeq	r6, r1, r4, lsl sl
   169c4:	andeq	r6, r1, r4, lsl sl
   169c8:	andeq	r6, r1, r4, lsl sl
   169cc:	andeq	r6, r1, r4, lsl sl
   169d0:	andeq	r6, r1, r4, lsl sl
   169d4:	andeq	r6, r1, r4, lsl sl
   169d8:	andeq	r6, r1, r4, lsl sl
   169dc:	andeq	r6, r1, r4, lsl sl
   169e0:	andeq	r6, r1, r4, lsl sl
   169e4:	andeq	r6, r1, r4, lsl sl
   169e8:	andeq	r6, r1, r4, lsl sl
   169ec:	andeq	r6, r1, r4, lsl sl
   169f0:	andeq	r6, r1, r4, lsl sl
   169f4:	andeq	r6, r1, r4, lsl sl
   169f8:	andeq	r6, r1, r4, lsl sl
   169fc:	andeq	r6, r1, r4, lsl sl
   16a00:	andeq	r6, r1, r4, lsl sl
   16a04:	andeq	r5, r1, r8, lsr pc
   16a08:	andeq	r6, r1, r4, asr r3
   16a0c:	andeq	r5, r1, r8, lsr pc
   16a10:	andeq	r6, r1, r0, lsr #20
   16a14:	mov	r6, r7
   16a18:	mov	r7, #0
   16a1c:	b	15f98 <__assert_fail@plt+0x4da4>
   16a20:	cmp	r9, #0
   16a24:	mov	r3, #0
   16a28:	beq	16468 <__assert_fail@plt+0x5274>
   16a2c:	mov	r6, #0
   16a30:	mov	r7, r3
   16a34:	mov	r3, r6
   16a38:	b	15f9c <__assert_fail@plt+0x4da8>
   16a3c:	mov	r3, #0
   16a40:	b	16448 <__assert_fail@plt+0x5254>
   16a44:	mov	r7, #0
   16a48:	mov	r3, #114	; 0x72
   16a4c:	b	16268 <__assert_fail@plt+0x5074>
   16a50:	mov	r5, #98	; 0x62
   16a54:	b	162f8 <__assert_fail@plt+0x5104>
   16a58:	mov	r5, #97	; 0x61
   16a5c:	b	16338 <__assert_fail@plt+0x5144>
   16a60:	ldr	r3, [sp, #32]
   16a64:	cmp	r3, #0
   16a68:	bne	16eb0 <__assert_fail@plt+0x5cbc>
   16a6c:	add	r9, r9, #1
   16a70:	ldr	r3, [sp, #44]	; 0x2c
   16a74:	mov	r6, #0
   16a78:	mov	r5, #92	; 0x5c
   16a7c:	b	16230 <__assert_fail@plt+0x503c>
   16a80:	ldr	r3, [sp, #36]	; 0x24
   16a84:	ldrb	r3, [r3, #1]
   16a88:	adds	r3, r3, #0
   16a8c:	movne	r3, #1
   16a90:	b	15f54 <__assert_fail@plt+0x4d60>
   16a94:	ldr	r3, [sp, #164]	; 0xa4
   16a98:	ands	r3, r3, #4
   16a9c:	beq	16ac0 <__assert_fail@plt+0x58cc>
   16aa0:	ldr	r2, [sp, #24]
   16aa4:	add	r3, r9, #2
   16aa8:	cmp	r3, r2
   16aac:	bcs	16ac0 <__assert_fail@plt+0x58cc>
   16ab0:	ldr	r2, [sp, #48]	; 0x30
   16ab4:	ldrb	r5, [r2, #1]
   16ab8:	cmp	r5, #63	; 0x3f
   16abc:	beq	16f24 <__assert_fail@plt+0x5d30>
   16ac0:	mov	r2, #0
   16ac4:	mov	r6, r2
   16ac8:	mov	r5, #63	; 0x3f
   16acc:	b	15f7c <__assert_fail@plt+0x4d88>
   16ad0:	ldr	r3, [sp, #32]
   16ad4:	cmp	r3, #0
   16ad8:	bne	16eb0 <__assert_fail@plt+0x5cbc>
   16adc:	mov	r6, r3
   16ae0:	mov	r5, #63	; 0x3f
   16ae4:	b	15fc4 <__assert_fail@plt+0x4dd0>
   16ae8:	ldr	r3, [sp, #24]
   16aec:	cmn	r3, #1
   16af0:	mov	r3, #0
   16af4:	str	r3, [sp, #108]	; 0x6c
   16af8:	str	r3, [sp, #112]	; 0x70
   16afc:	bne	16b0c <__assert_fail@plt+0x5918>
   16b00:	ldr	r0, [sp, #36]	; 0x24
   16b04:	bl	110bc <strlen@plt>
   16b08:	str	r0, [sp, #24]
   16b0c:	mov	r3, #0
   16b10:	str	sl, [sp, #88]	; 0x58
   16b14:	ldr	sl, [sp, #36]	; 0x24
   16b18:	str	r5, [sp, #92]	; 0x5c
   16b1c:	mov	r5, r3
   16b20:	str	r7, [sp, #96]	; 0x60
   16b24:	str	r4, [sp, #100]	; 0x64
   16b28:	str	r8, [sp, #84]	; 0x54
   16b2c:	ldr	r3, [sp, #24]
   16b30:	add	r4, r9, r5
   16b34:	add	r7, sl, r4
   16b38:	sub	r2, r3, r4
   16b3c:	mov	r1, r7
   16b40:	add	r3, sp, #108	; 0x6c
   16b44:	add	r0, sp, #104	; 0x68
   16b48:	bl	18fe0 <__assert_fail@plt+0x7dec>
   16b4c:	subs	r8, r0, #0
   16b50:	beq	16ba0 <__assert_fail@plt+0x59ac>
   16b54:	cmn	r8, #1
   16b58:	beq	16f00 <__assert_fail@plt+0x5d0c>
   16b5c:	cmn	r8, #2
   16b60:	beq	17020 <__assert_fail@plt+0x5e2c>
   16b64:	ldr	r3, [sp, #32]
   16b68:	cmp	fp, #2
   16b6c:	movne	r3, #0
   16b70:	andeq	r3, r3, #1
   16b74:	cmp	r3, #0
   16b78:	bne	16d00 <__assert_fail@plt+0x5b0c>
   16b7c:	ldr	r0, [sp, #104]	; 0x68
   16b80:	bl	10ff0 <iswprint@plt>
   16b84:	add	r5, r5, r8
   16b88:	cmp	r0, #0
   16b8c:	add	r0, sp, #108	; 0x6c
   16b90:	moveq	r6, #0
   16b94:	bl	10f90 <mbsinit@plt>
   16b98:	cmp	r0, #0
   16b9c:	beq	16b2c <__assert_fail@plt+0x5938>
   16ba0:	ldr	r3, [sp, #28]
   16ba4:	mov	ip, r5
   16ba8:	eor	r2, r6, #1
   16bac:	ldr	r5, [sp, #92]	; 0x5c
   16bb0:	ldr	r7, [sp, #96]	; 0x60
   16bb4:	ldr	r4, [sp, #100]	; 0x64
   16bb8:	ldr	r8, [sp, #84]	; 0x54
   16bbc:	ldr	sl, [sp, #88]	; 0x58
   16bc0:	and	r2, r2, r3
   16bc4:	cmp	ip, #1
   16bc8:	bls	164c8 <__assert_fail@plt+0x52d4>
   16bcc:	add	r1, ip, r9
   16bd0:	ldr	lr, [sp, #48]	; 0x30
   16bd4:	mov	r0, #0
   16bd8:	str	r6, [sp, #48]	; 0x30
   16bdc:	mov	ip, #39	; 0x27
   16be0:	ldr	r6, [sp, #44]	; 0x2c
   16be4:	b	16c9c <__assert_fail@plt+0x5aa8>
   16be8:	ldr	r0, [sp, #32]
   16bec:	sub	r3, fp, #2
   16bf0:	cmp	r0, #0
   16bf4:	clz	r3, r3
   16bf8:	lsr	r3, r3, #5
   16bfc:	bne	16e04 <__assert_fail@plt+0x5c10>
   16c00:	eor	r0, r6, #1
   16c04:	ands	r3, r3, r0
   16c08:	beq	16c38 <__assert_fail@plt+0x5a44>
   16c0c:	add	r0, r4, #1
   16c10:	cmp	sl, r4
   16c14:	strbhi	ip, [r8, r4]
   16c18:	cmp	sl, r0
   16c1c:	movhi	r6, #36	; 0x24
   16c20:	strbhi	r6, [r8, r0]
   16c24:	add	r0, r4, #2
   16c28:	mov	r6, r3
   16c2c:	add	r4, r4, #3
   16c30:	cmp	sl, r0
   16c34:	strbhi	ip, [r8, r0]
   16c38:	cmp	sl, r4
   16c3c:	movhi	r3, #92	; 0x5c
   16c40:	strbhi	r3, [r8, r4]
   16c44:	add	r3, r4, #1
   16c48:	cmp	sl, r3
   16c4c:	lsrhi	r0, r5, #6
   16c50:	addhi	r0, r0, #48	; 0x30
   16c54:	strbhi	r0, [r8, r3]
   16c58:	add	r0, r4, #2
   16c5c:	cmp	sl, r0
   16c60:	lsrhi	r3, r5, #3
   16c64:	andhi	r3, r3, #7
   16c68:	addhi	r3, r3, #48	; 0x30
   16c6c:	add	r9, r9, #1
   16c70:	strbhi	r3, [r8, r0]
   16c74:	and	r5, r5, #7
   16c78:	cmp	r9, r1
   16c7c:	add	r5, r5, #48	; 0x30
   16c80:	add	r4, r4, #3
   16c84:	bcs	16e24 <__assert_fail@plt+0x5c30>
   16c88:	mov	r0, r2
   16c8c:	cmp	sl, r4
   16c90:	strbhi	r5, [r8, r4]
   16c94:	ldrb	r5, [lr, #1]!
   16c98:	add	r4, r4, #1
   16c9c:	cmp	r2, #0
   16ca0:	bne	16be8 <__assert_fail@plt+0x59f4>
   16ca4:	eor	r3, r0, #1
   16ca8:	and	r3, r3, r6
   16cac:	cmp	r7, #0
   16cb0:	uxtb	r3, r3
   16cb4:	beq	16cc8 <__assert_fail@plt+0x5ad4>
   16cb8:	cmp	sl, r4
   16cbc:	movhi	r7, #92	; 0x5c
   16cc0:	strbhi	r7, [r8, r4]
   16cc4:	add	r4, r4, #1
   16cc8:	add	r9, r9, #1
   16ccc:	cmp	r9, r1
   16cd0:	bcs	16e18 <__assert_fail@plt+0x5c24>
   16cd4:	cmp	r3, #0
   16cd8:	beq	16e44 <__assert_fail@plt+0x5c50>
   16cdc:	cmp	sl, r4
   16ce0:	add	r3, r4, #1
   16ce4:	strbhi	ip, [r8, r4]
   16ce8:	mov	r7, #0
   16cec:	cmp	sl, r3
   16cf0:	strbhi	ip, [r8, r3]
   16cf4:	add	r4, r4, #2
   16cf8:	mov	r6, r7
   16cfc:	b	16c8c <__assert_fail@plt+0x5a98>
   16d00:	cmp	r8, #1
   16d04:	beq	16b7c <__assert_fail@plt+0x5988>
   16d08:	add	r1, r4, #1
   16d0c:	add	r3, sl, r8
   16d10:	add	r1, sl, r1
   16d14:	add	r4, r3, r4
   16d18:	ldrb	r3, [r1], #1
   16d1c:	sub	r3, r3, #91	; 0x5b
   16d20:	cmp	r3, #33	; 0x21
   16d24:	ldrls	pc, [pc, r3, lsl #2]
   16d28:	b	16db4 <__assert_fail@plt+0x5bc0>
   16d2c:	andeq	r6, r1, r0, asr #27
   16d30:	andeq	r6, r1, r0, asr #27
   16d34:			; <UNDEFINED> instruction: 0x00016db4
   16d38:	andeq	r6, r1, r0, asr #27
   16d3c:			; <UNDEFINED> instruction: 0x00016db4
   16d40:	andeq	r6, r1, r0, asr #27
   16d44:			; <UNDEFINED> instruction: 0x00016db4
   16d48:			; <UNDEFINED> instruction: 0x00016db4
   16d4c:			; <UNDEFINED> instruction: 0x00016db4
   16d50:			; <UNDEFINED> instruction: 0x00016db4
   16d54:			; <UNDEFINED> instruction: 0x00016db4
   16d58:			; <UNDEFINED> instruction: 0x00016db4
   16d5c:			; <UNDEFINED> instruction: 0x00016db4
   16d60:			; <UNDEFINED> instruction: 0x00016db4
   16d64:			; <UNDEFINED> instruction: 0x00016db4
   16d68:			; <UNDEFINED> instruction: 0x00016db4
   16d6c:			; <UNDEFINED> instruction: 0x00016db4
   16d70:			; <UNDEFINED> instruction: 0x00016db4
   16d74:			; <UNDEFINED> instruction: 0x00016db4
   16d78:			; <UNDEFINED> instruction: 0x00016db4
   16d7c:			; <UNDEFINED> instruction: 0x00016db4
   16d80:			; <UNDEFINED> instruction: 0x00016db4
   16d84:			; <UNDEFINED> instruction: 0x00016db4
   16d88:			; <UNDEFINED> instruction: 0x00016db4
   16d8c:			; <UNDEFINED> instruction: 0x00016db4
   16d90:			; <UNDEFINED> instruction: 0x00016db4
   16d94:			; <UNDEFINED> instruction: 0x00016db4
   16d98:			; <UNDEFINED> instruction: 0x00016db4
   16d9c:			; <UNDEFINED> instruction: 0x00016db4
   16da0:			; <UNDEFINED> instruction: 0x00016db4
   16da4:			; <UNDEFINED> instruction: 0x00016db4
   16da8:			; <UNDEFINED> instruction: 0x00016db4
   16dac:			; <UNDEFINED> instruction: 0x00016db4
   16db0:	andeq	r6, r1, r0, asr #27
   16db4:	cmp	r4, r1
   16db8:	bne	16d18 <__assert_fail@plt+0x5b24>
   16dbc:	b	16b7c <__assert_fail@plt+0x5988>
   16dc0:	ldr	fp, [sp, #84]	; 0x54
   16dc4:	ldr	sl, [sp, #88]	; 0x58
   16dc8:	mov	r8, #2
   16dcc:	b	16288 <__assert_fail@plt+0x5094>
   16dd0:	cmp	sl, r4
   16dd4:	movls	r1, r4
   16dd8:	bls	163d8 <__assert_fail@plt+0x51e4>
   16ddc:	ldr	r3, [sp, #44]	; 0x2c
   16de0:	b	163c8 <__assert_fail@plt+0x51d4>
   16de4:	str	sl, [sp, #72]	; 0x48
   16de8:	ldr	sl, [sp, #32]
   16dec:	b	16200 <__assert_fail@plt+0x500c>
   16df0:	add	r9, r9, #1
   16df4:	b	15af4 <__assert_fail@plt+0x4900>
   16df8:	ldr	r2, [sp, #28]
   16dfc:	mov	r6, #0
   16e00:	b	16bcc <__assert_fail@plt+0x59d8>
   16e04:	str	fp, [sp, #160]	; 0xa0
   16e08:	str	r3, [sp, #28]
   16e0c:	mov	fp, r8
   16e10:	ldr	r8, [sp, #160]	; 0xa0
   16e14:	b	16288 <__assert_fail@plt+0x5094>
   16e18:	str	r6, [sp, #44]	; 0x2c
   16e1c:	ldr	r6, [sp, #48]	; 0x30
   16e20:	b	16230 <__assert_fail@plt+0x503c>
   16e24:	str	r6, [sp, #44]	; 0x2c
   16e28:	ldr	r6, [sp, #48]	; 0x30
   16e2c:	b	1603c <__assert_fail@plt+0x4e48>
   16e30:	add	r4, r4, #4
   16e34:	str	r3, [sp, #44]	; 0x2c
   16e38:	mov	r6, #0
   16e3c:	mov	r5, #48	; 0x30
   16e40:	b	15fc4 <__assert_fail@plt+0x4dd0>
   16e44:	mov	r7, r3
   16e48:	b	16c8c <__assert_fail@plt+0x5a98>
   16e4c:	ldr	r3, [pc, #-1624]	; 167fc <__assert_fail@plt+0x5608>
   16e50:	mov	r4, #1
   16e54:	str	r4, [sp, #40]	; 0x28
   16e58:	str	r4, [sp, #28]
   16e5c:	str	r4, [sp, #52]	; 0x34
   16e60:	str	sl, [sp, #72]	; 0x48
   16e64:	str	sl, [sp, #68]	; 0x44
   16e68:	str	sl, [sp, #44]	; 0x2c
   16e6c:	str	sl, [sp, #32]
   16e70:	str	r3, [sp, #60]	; 0x3c
   16e74:	b	15ae4 <__assert_fail@plt+0x48f0>
   16e78:	mov	r3, r6
   16e7c:	mov	r5, #48	; 0x30
   16e80:	mov	r6, #0
   16e84:	b	15fc4 <__assert_fail@plt+0x4dd0>
   16e88:	cmp	sl, r4
   16e8c:	movhi	r3, #48	; 0x30
   16e90:	strbhi	r3, [r8, r4]
   16e94:	add	r3, r1, #2
   16e98:	cmp	sl, r3
   16e9c:	movhi	r0, #48	; 0x30
   16ea0:	strbhi	r0, [r8, r3]
   16ea4:	add	r4, r1, #3
   16ea8:	mov	r5, #48	; 0x30
   16eac:	b	1640c <__assert_fail@plt+0x5218>
   16eb0:	str	fp, [sp, #160]	; 0xa0
   16eb4:	mov	fp, r8
   16eb8:	ldr	r8, [sp, #160]	; 0xa0
   16ebc:	b	16288 <__assert_fail@plt+0x5094>
   16ec0:	ldr	r2, [sp, #80]	; 0x50
   16ec4:	ldrb	r3, [r2]
   16ec8:	cmp	r3, #0
   16ecc:	beq	15ab4 <__assert_fail@plt+0x48c0>
   16ed0:	cmp	sl, r4
   16ed4:	strbhi	r3, [fp, r4]
   16ed8:	ldrb	r3, [r2, #1]!
   16edc:	add	r4, r4, #1
   16ee0:	cmp	r3, #0
   16ee4:	bne	16ed0 <__assert_fail@plt+0x5cdc>
   16ee8:	b	15ab4 <__assert_fail@plt+0x48c0>
   16eec:	str	fp, [sp, #160]	; 0xa0
   16ef0:	mov	r3, #0
   16ef4:	mov	fp, r8
   16ef8:	ldr	r8, [sp, #160]	; 0xa0
   16efc:	b	1631c <__assert_fail@plt+0x5128>
   16f00:	mov	ip, r5
   16f04:	ldr	r7, [sp, #96]	; 0x60
   16f08:	ldr	r5, [sp, #92]	; 0x5c
   16f0c:	ldr	r4, [sp, #100]	; 0x64
   16f10:	ldr	r8, [sp, #84]	; 0x54
   16f14:	ldr	sl, [sp, #88]	; 0x58
   16f18:	ldr	r2, [sp, #28]
   16f1c:	mov	r6, #0
   16f20:	b	16bc4 <__assert_fail@plt+0x59d0>
   16f24:	ldr	r2, [sp, #36]	; 0x24
   16f28:	ldrb	r1, [r2, r3]
   16f2c:	sub	r2, r1, #33	; 0x21
   16f30:	cmp	r2, #29
   16f34:	ldrls	pc, [pc, r2, lsl #2]
   16f38:	b	17014 <__assert_fail@plt+0x5e20>
   16f3c:			; <UNDEFINED> instruction: 0x00016fb4
   16f40:	andeq	r7, r1, r4, lsl r0
   16f44:	andeq	r7, r1, r4, lsl r0
   16f48:	andeq	r7, r1, r4, lsl r0
   16f4c:	andeq	r7, r1, r4, lsl r0
   16f50:	andeq	r7, r1, r4, lsl r0
   16f54:			; <UNDEFINED> instruction: 0x00016fb4
   16f58:			; <UNDEFINED> instruction: 0x00016fb4
   16f5c:			; <UNDEFINED> instruction: 0x00016fb4
   16f60:	andeq	r7, r1, r4, lsl r0
   16f64:	andeq	r7, r1, r4, lsl r0
   16f68:	andeq	r7, r1, r4, lsl r0
   16f6c:			; <UNDEFINED> instruction: 0x00016fb4
   16f70:	andeq	r7, r1, r4, lsl r0
   16f74:			; <UNDEFINED> instruction: 0x00016fb4
   16f78:	andeq	r7, r1, r4, lsl r0
   16f7c:	andeq	r7, r1, r4, lsl r0
   16f80:	andeq	r7, r1, r4, lsl r0
   16f84:	andeq	r7, r1, r4, lsl r0
   16f88:	andeq	r7, r1, r4, lsl r0
   16f8c:	andeq	r7, r1, r4, lsl r0
   16f90:	andeq	r7, r1, r4, lsl r0
   16f94:	andeq	r7, r1, r4, lsl r0
   16f98:	andeq	r7, r1, r4, lsl r0
   16f9c:	andeq	r7, r1, r4, lsl r0
   16fa0:	andeq	r7, r1, r4, lsl r0
   16fa4:	andeq	r7, r1, r4, lsl r0
   16fa8:			; <UNDEFINED> instruction: 0x00016fb4
   16fac:			; <UNDEFINED> instruction: 0x00016fb4
   16fb0:			; <UNDEFINED> instruction: 0x00016fb4
   16fb4:	ldr	r2, [sp, #32]
   16fb8:	cmp	r2, #0
   16fbc:	bne	170c0 <__assert_fail@plt+0x5ecc>
   16fc0:	cmp	sl, r4
   16fc4:	movhi	r2, #63	; 0x3f
   16fc8:	strbhi	r2, [r8, r4]
   16fcc:	add	r2, r4, #1
   16fd0:	cmp	sl, r2
   16fd4:	movhi	r0, #34	; 0x22
   16fd8:	strbhi	r0, [r8, r2]
   16fdc:	add	r2, r4, #2
   16fe0:	cmp	sl, r2
   16fe4:	movhi	r0, #34	; 0x22
   16fe8:	strbhi	r0, [r8, r2]
   16fec:	add	r2, r4, #3
   16ff0:	cmp	sl, r2
   16ff4:	movhi	r0, #63	; 0x3f
   16ff8:	strbhi	r0, [r8, r2]
   16ffc:	mov	r2, #0
   17000:	add	r4, r4, #4
   17004:	mov	r5, r1
   17008:	mov	r9, r3
   1700c:	mov	r6, r2
   17010:	b	1640c <__assert_fail@plt+0x5218>
   17014:	mov	r2, #0
   17018:	mov	r6, r2
   1701c:	b	15f7c <__assert_fail@plt+0x4d88>
   17020:	ldr	r0, [sp, #24]
   17024:	mov	r1, r4
   17028:	cmp	r1, r0
   1702c:	mov	r2, r7
   17030:	mov	r3, r5
   17034:	mov	ip, r5
   17038:	ldr	r7, [sp, #96]	; 0x60
   1703c:	ldr	r5, [sp, #92]	; 0x5c
   17040:	ldr	r4, [sp, #100]	; 0x64
   17044:	ldr	r8, [sp, #84]	; 0x54
   17048:	ldr	sl, [sp, #88]	; 0x58
   1704c:	bcs	17080 <__assert_fail@plt+0x5e8c>
   17050:	ldrb	r6, [r2]
   17054:	cmp	r6, #0
   17058:	bne	1706c <__assert_fail@plt+0x5e78>
   1705c:	b	1719c <__assert_fail@plt+0x5fa8>
   17060:	ldrb	r6, [r2, #1]!
   17064:	cmp	r6, #0
   17068:	beq	17124 <__assert_fail@plt+0x5f30>
   1706c:	add	r3, r3, #1
   17070:	add	r1, r9, r3
   17074:	cmp	r1, r0
   17078:	bcc	17060 <__assert_fail@plt+0x5e6c>
   1707c:	mov	ip, r3
   17080:	ldr	r2, [sp, #28]
   17084:	mov	r6, #0
   17088:	b	16bc4 <__assert_fail@plt+0x59d0>
   1708c:	mov	r3, #1
   17090:	str	r3, [sp, #40]	; 0x28
   17094:	str	r3, [sp, #32]
   17098:	str	r3, [sp, #28]
   1709c:	str	r3, [sp, #52]	; 0x34
   170a0:	ldr	r3, [pc, #-2220]	; 167fc <__assert_fail@plt+0x5608>
   170a4:	mov	r2, #0
   170a8:	str	r2, [sp, #68]	; 0x44
   170ac:	str	r2, [sp, #44]	; 0x2c
   170b0:	str	r2, [sp, #72]	; 0x48
   170b4:	mov	r4, r2
   170b8:	str	r3, [sp, #60]	; 0x3c
   170bc:	b	15ae4 <__assert_fail@plt+0x48f0>
   170c0:	str	fp, [sp, #160]	; 0xa0
   170c4:	mov	fp, r8
   170c8:	ldr	r8, [sp, #160]	; 0xa0
   170cc:	b	16294 <__assert_fail@plt+0x50a0>
   170d0:	mov	r2, r3
   170d4:	ldr	r3, [sp, #60]	; 0x3c
   170d8:	cmp	r3, #0
   170dc:	moveq	r2, #0
   170e0:	andne	r2, r2, #1
   170e4:	cmp	r2, #0
   170e8:	beq	17114 <__assert_fail@plt+0x5f20>
   170ec:	mov	r2, r3
   170f0:	ldrb	r3, [r3]
   170f4:	cmp	r3, #0
   170f8:	beq	17114 <__assert_fail@plt+0x5f20>
   170fc:	cmp	sl, r4
   17100:	strbhi	r3, [fp, r4]
   17104:	ldrb	r3, [r2, #1]!
   17108:	add	r4, r4, #1
   1710c:	cmp	r3, #0
   17110:	bne	170fc <__assert_fail@plt+0x5f08>
   17114:	cmp	sl, r4
   17118:	movhi	r3, #0
   1711c:	strbhi	r3, [fp, r4]
   17120:	b	162d4 <__assert_fail@plt+0x50e0>
   17124:	mov	ip, r3
   17128:	ldr	r2, [sp, #28]
   1712c:	b	16bc4 <__assert_fail@plt+0x59d0>
   17130:	str	fp, [sp, #160]	; 0xa0
   17134:	mov	fp, r8
   17138:	ldr	r8, [sp, #160]	; 0xa0
   1713c:	sub	r3, r8, #2
   17140:	clz	r3, r3
   17144:	lsr	r3, r3, #5
   17148:	str	r3, [sp, #28]
   1714c:	b	16288 <__assert_fail@plt+0x5094>
   17150:	ldr	r3, [sp, #76]	; 0x4c
   17154:	mov	ip, #5
   17158:	str	r3, [sp, #16]
   1715c:	ldr	r3, [sp, #80]	; 0x50
   17160:	ldr	r2, [sp, #36]	; 0x24
   17164:	str	r3, [sp, #12]
   17168:	ldr	r3, [sp, #56]	; 0x38
   1716c:	ldr	r1, [sp, #72]	; 0x48
   17170:	str	r3, [sp, #8]
   17174:	ldr	r3, [sp, #164]	; 0xa4
   17178:	mov	r0, fp
   1717c:	str	r3, [sp, #4]
   17180:	str	ip, [sp]
   17184:	ldr	r3, [sp, #24]
   17188:	bl	159ec <__assert_fail@plt+0x47f8>
   1718c:	mov	r4, r0
   17190:	b	162d4 <__assert_fail@plt+0x50e0>
   17194:	mov	r8, #2
   17198:	b	16288 <__assert_fail@plt+0x5094>
   1719c:	ldr	r2, [sp, #28]
   171a0:	b	16bc4 <__assert_fail@plt+0x59d0>
   171a4:	mov	r3, #0
   171a8:	str	r3, [sp, #68]	; 0x44
   171ac:	str	r3, [sp, #44]	; 0x2c
   171b0:	str	r3, [sp, #72]	; 0x48
   171b4:	str	r3, [sp, #28]
   171b8:	mov	r4, r3
   171bc:	ldr	r3, [pc, #-2500]	; 16800 <__assert_fail@plt+0x560c>
   171c0:	mov	r2, #1
   171c4:	str	r2, [sp, #40]	; 0x28
   171c8:	str	r2, [sp, #32]
   171cc:	str	r2, [sp, #52]	; 0x34
   171d0:	str	r3, [sp, #60]	; 0x3c
   171d4:	b	15ae4 <__assert_fail@plt+0x48f0>
   171d8:	bl	10fcc <__stack_chk_fail@plt>
   171dc:	mov	r5, r3
   171e0:	mov	r6, #0
   171e4:	b	15fd8 <__assert_fail@plt+0x4de4>
   171e8:	mov	r3, #0
   171ec:	mov	r2, #1
   171f0:	str	r3, [sp, #44]	; 0x2c
   171f4:	str	r3, [sp, #72]	; 0x48
   171f8:	str	r2, [sp, #40]	; 0x28
   171fc:	b	160f4 <__assert_fail@plt+0x4f00>
   17200:	bl	111dc <abort@plt>
   17204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17208:	sub	sp, sp, #44	; 0x2c
   1720c:	mov	r6, r0
   17210:	mov	r4, r3
   17214:	mov	sl, r1
   17218:	mov	fp, r2
   1721c:	bl	110d4 <__errno_location@plt>
   17220:	ldr	r7, [pc, #364]	; 17394 <__assert_fail@plt+0x61a0>
   17224:	cmp	r6, #0
   17228:	ldr	r5, [r7]
   1722c:	ldr	r3, [r0]
   17230:	str	r3, [sp, #24]
   17234:	blt	17390 <__assert_fail@plt+0x619c>
   17238:	ldr	r3, [r7, #4]
   1723c:	mov	r8, r0
   17240:	cmp	r3, r6
   17244:	bgt	17290 <__assert_fail@plt+0x609c>
   17248:	cmn	r6, #-268435454	; 0xf0000002
   1724c:	bgt	1738c <__assert_fail@plt+0x6198>
   17250:	add	r9, r6, #1
   17254:	add	r3, r7, #8
   17258:	cmp	r5, r3
   1725c:	lsl	r1, r9, #3
   17260:	beq	1736c <__assert_fail@plt+0x6178>
   17264:	mov	r0, r5
   17268:	bl	17ff8 <__assert_fail@plt+0x6e04>
   1726c:	mov	r5, r0
   17270:	str	r0, [r7]
   17274:	ldr	r0, [r7, #4]
   17278:	mov	r1, #0
   1727c:	sub	r2, r9, r0
   17280:	add	r0, r5, r0, lsl #3
   17284:	lsl	r2, r2, #3
   17288:	bl	11104 <memset@plt>
   1728c:	str	r9, [r7, #4]
   17290:	add	r3, r5, r6, lsl #3
   17294:	ldr	r1, [r4, #4]
   17298:	ldr	r7, [r3, #4]
   1729c:	ldr	r9, [r5, r6, lsl #3]
   172a0:	ldr	r2, [r4, #40]	; 0x28
   172a4:	ldr	ip, [r4, #44]	; 0x2c
   172a8:	str	r3, [sp, #28]
   172ac:	ldr	r3, [r4]
   172b0:	orr	r1, r1, #1
   172b4:	add	lr, r4, #8
   172b8:	str	r1, [sp, #36]	; 0x24
   172bc:	str	r1, [sp, #4]
   172c0:	str	r2, [sp, #12]
   172c4:	str	r3, [sp]
   172c8:	mov	r0, r7
   172cc:	mov	r1, r9
   172d0:	str	ip, [sp, #16]
   172d4:	str	lr, [sp, #8]
   172d8:	mov	r3, fp
   172dc:	mov	r2, sl
   172e0:	str	lr, [sp, #32]
   172e4:	bl	159ec <__assert_fail@plt+0x47f8>
   172e8:	cmp	r9, r0
   172ec:	bhi	17358 <__assert_fail@plt+0x6164>
   172f0:	ldr	r3, [pc, #160]	; 17398 <__assert_fail@plt+0x61a4>
   172f4:	add	r9, r0, #1
   172f8:	cmp	r7, r3
   172fc:	str	r9, [r5, r6, lsl #3]
   17300:	beq	1730c <__assert_fail@plt+0x6118>
   17304:	mov	r0, r7
   17308:	bl	10f54 <free@plt>
   1730c:	mov	r0, r9
   17310:	bl	17f9c <__assert_fail@plt+0x6da8>
   17314:	ldr	lr, [sp, #28]
   17318:	ldr	ip, [r4, #44]	; 0x2c
   1731c:	ldr	r5, [r4, #40]	; 0x28
   17320:	mov	r3, fp
   17324:	mov	r2, sl
   17328:	mov	r1, r9
   1732c:	str	r0, [lr, #4]
   17330:	ldr	lr, [r4]
   17334:	ldr	r4, [sp, #32]
   17338:	str	ip, [sp, #16]
   1733c:	str	r4, [sp, #8]
   17340:	ldr	r4, [sp, #36]	; 0x24
   17344:	str	r5, [sp, #12]
   17348:	str	r4, [sp, #4]
   1734c:	str	lr, [sp]
   17350:	mov	r7, r0
   17354:	bl	159ec <__assert_fail@plt+0x47f8>
   17358:	ldr	r3, [sp, #24]
   1735c:	mov	r0, r7
   17360:	str	r3, [r8]
   17364:	add	sp, sp, #44	; 0x2c
   17368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1736c:	mov	r0, #0
   17370:	bl	17ff8 <__assert_fail@plt+0x6e04>
   17374:	ldr	r3, [pc, #32]	; 1739c <__assert_fail@plt+0x61a8>
   17378:	mov	r5, r0
   1737c:	ldm	r3, {r0, r1}
   17380:	str	r5, [r7]
   17384:	stm	r5, {r0, r1}
   17388:	b	17274 <__assert_fail@plt+0x6080>
   1738c:	bl	181e4 <__assert_fail@plt+0x6ff0>
   17390:	bl	111dc <abort@plt>
   17394:	andeq	lr, r2, r0, lsr #2
   17398:	andeq	lr, r2, ip, lsr r2
   1739c:	andeq	lr, r2, r8, lsr #2
   173a0:	push	{r4, r5, r6, lr}
   173a4:	mov	r5, r0
   173a8:	bl	110d4 <__errno_location@plt>
   173ac:	cmp	r5, #0
   173b0:	mov	r1, #48	; 0x30
   173b4:	mov	r4, r0
   173b8:	ldr	r0, [pc, #16]	; 173d0 <__assert_fail@plt+0x61dc>
   173bc:	ldr	r6, [r4]
   173c0:	movne	r0, r5
   173c4:	bl	181a4 <__assert_fail@plt+0x6fb0>
   173c8:	str	r6, [r4]
   173cc:	pop	{r4, r5, r6, pc}
   173d0:	andeq	lr, r2, ip, lsr r3
   173d4:	ldr	r3, [pc, #12]	; 173e8 <__assert_fail@plt+0x61f4>
   173d8:	cmp	r0, #0
   173dc:	moveq	r0, r3
   173e0:	ldr	r0, [r0]
   173e4:	bx	lr
   173e8:	andeq	lr, r2, ip, lsr r3
   173ec:	ldr	r3, [pc, #12]	; 17400 <__assert_fail@plt+0x620c>
   173f0:	cmp	r0, #0
   173f4:	moveq	r0, r3
   173f8:	str	r1, [r0]
   173fc:	bx	lr
   17400:	andeq	lr, r2, ip, lsr r3
   17404:	ldr	r3, [pc, #52]	; 17440 <__assert_fail@plt+0x624c>
   17408:	cmp	r0, #0
   1740c:	moveq	r0, r3
   17410:	add	r3, r0, #8
   17414:	push	{lr}		; (str lr, [sp, #-4]!)
   17418:	lsr	lr, r1, #5
   1741c:	and	r1, r1, #31
   17420:	ldr	ip, [r3, lr, lsl #2]
   17424:	lsr	r0, ip, r1
   17428:	eor	r2, r2, r0
   1742c:	and	r2, r2, #1
   17430:	and	r0, r0, #1
   17434:	eor	r1, ip, r2, lsl r1
   17438:	str	r1, [r3, lr, lsl #2]
   1743c:	pop	{pc}		; (ldr pc, [sp], #4)
   17440:	andeq	lr, r2, ip, lsr r3
   17444:	ldr	r3, [pc, #16]	; 1745c <__assert_fail@plt+0x6268>
   17448:	cmp	r0, #0
   1744c:	movne	r3, r0
   17450:	ldr	r0, [r3, #4]
   17454:	str	r1, [r3, #4]
   17458:	bx	lr
   1745c:	andeq	lr, r2, ip, lsr r3
   17460:	ldr	r3, [pc, #44]	; 17494 <__assert_fail@plt+0x62a0>
   17464:	cmp	r0, #0
   17468:	moveq	r0, r3
   1746c:	mov	ip, #10
   17470:	cmp	r2, #0
   17474:	cmpne	r1, #0
   17478:	str	ip, [r0]
   1747c:	beq	1748c <__assert_fail@plt+0x6298>
   17480:	str	r1, [r0, #40]	; 0x28
   17484:	str	r2, [r0, #44]	; 0x2c
   17488:	bx	lr
   1748c:	push	{r4, lr}
   17490:	bl	111dc <abort@plt>
   17494:	andeq	lr, r2, ip, lsr r3
   17498:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1749c:	sub	sp, sp, #24
   174a0:	ldr	ip, [pc, #108]	; 17514 <__assert_fail@plt+0x6320>
   174a4:	ldr	r4, [sp, #56]	; 0x38
   174a8:	mov	r9, r2
   174ac:	cmp	r4, #0
   174b0:	moveq	r4, ip
   174b4:	mov	sl, r3
   174b8:	mov	r7, r0
   174bc:	mov	r8, r1
   174c0:	bl	110d4 <__errno_location@plt>
   174c4:	ldr	r3, [r4, #44]	; 0x2c
   174c8:	mov	r1, r8
   174cc:	ldr	r6, [r0]
   174d0:	str	r3, [sp, #16]
   174d4:	ldr	r2, [r4, #40]	; 0x28
   174d8:	add	r3, r4, #8
   174dc:	str	r3, [sp, #8]
   174e0:	str	r2, [sp, #12]
   174e4:	ldr	r2, [r4, #4]
   174e8:	mov	r5, r0
   174ec:	str	r2, [sp, #4]
   174f0:	ldr	ip, [r4]
   174f4:	mov	r3, sl
   174f8:	mov	r2, r9
   174fc:	mov	r0, r7
   17500:	str	ip, [sp]
   17504:	bl	159ec <__assert_fail@plt+0x47f8>
   17508:	str	r6, [r5]
   1750c:	add	sp, sp, #24
   17510:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17514:	andeq	lr, r2, ip, lsr r3
   17518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1751c:	cmp	r3, #0
   17520:	sub	sp, sp, #44	; 0x2c
   17524:	ldr	r4, [pc, #192]	; 175ec <__assert_fail@plt+0x63f8>
   17528:	mov	r6, r2
   1752c:	movne	r4, r3
   17530:	mov	r9, r1
   17534:	mov	r8, r0
   17538:	bl	110d4 <__errno_location@plt>
   1753c:	ldr	r3, [r4, #44]	; 0x2c
   17540:	ldr	r5, [r4, #4]
   17544:	add	sl, r4, #8
   17548:	cmp	r6, #0
   1754c:	orreq	r5, r5, #1
   17550:	mov	r1, #0
   17554:	ldr	r2, [r0]
   17558:	str	r3, [sp, #16]
   1755c:	ldr	r3, [r4, #40]	; 0x28
   17560:	stmib	sp, {r5, sl}
   17564:	str	r3, [sp, #12]
   17568:	ldr	r3, [r4]
   1756c:	mov	r7, r0
   17570:	str	r2, [sp, #28]
   17574:	str	r3, [sp]
   17578:	mov	r2, r8
   1757c:	mov	r3, r9
   17580:	mov	r0, r1
   17584:	bl	159ec <__assert_fail@plt+0x47f8>
   17588:	add	r1, r0, #1
   1758c:	mov	fp, r0
   17590:	mov	r0, r1
   17594:	str	r1, [sp, #36]	; 0x24
   17598:	bl	17f9c <__assert_fail@plt+0x6da8>
   1759c:	ldr	r3, [r4, #44]	; 0x2c
   175a0:	mov	r2, r8
   175a4:	str	r3, [sp, #16]
   175a8:	ldr	r3, [r4, #40]	; 0x28
   175ac:	str	r5, [sp, #4]
   175b0:	str	r3, [sp, #12]
   175b4:	str	sl, [sp, #8]
   175b8:	ldr	ip, [r4]
   175bc:	ldr	r1, [sp, #36]	; 0x24
   175c0:	mov	r3, r9
   175c4:	str	ip, [sp]
   175c8:	str	r0, [sp, #32]
   175cc:	bl	159ec <__assert_fail@plt+0x47f8>
   175d0:	ldr	r2, [sp, #28]
   175d4:	cmp	r6, #0
   175d8:	str	r2, [r7]
   175dc:	ldr	r0, [sp, #32]
   175e0:	strne	fp, [r6]
   175e4:	add	sp, sp, #44	; 0x2c
   175e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175ec:	andeq	lr, r2, ip, lsr r3
   175f0:	mov	r3, r2
   175f4:	mov	r2, #0
   175f8:	b	17518 <__assert_fail@plt+0x6324>
   175fc:	push	{r4, r5, r6, r7, r8, lr}
   17600:	ldr	r6, [pc, #112]	; 17678 <__assert_fail@plt+0x6484>
   17604:	ldr	r3, [r6, #4]
   17608:	ldr	r7, [r6]
   1760c:	cmp	r3, #1
   17610:	ble	17634 <__assert_fail@plt+0x6440>
   17614:	sub	r5, r7, #8
   17618:	add	r5, r5, r3, lsl #3
   1761c:	mov	r4, r7
   17620:	ldr	r0, [r4, #12]
   17624:	add	r4, r4, #8
   17628:	bl	10f54 <free@plt>
   1762c:	cmp	r4, r5
   17630:	bne	17620 <__assert_fail@plt+0x642c>
   17634:	ldr	r0, [r7, #4]
   17638:	ldr	r4, [pc, #60]	; 1767c <__assert_fail@plt+0x6488>
   1763c:	cmp	r0, r4
   17640:	beq	17654 <__assert_fail@plt+0x6460>
   17644:	bl	10f54 <free@plt>
   17648:	mov	r3, #256	; 0x100
   1764c:	str	r4, [r6, #12]
   17650:	str	r3, [r6, #8]
   17654:	ldr	r4, [pc, #36]	; 17680 <__assert_fail@plt+0x648c>
   17658:	cmp	r7, r4
   1765c:	beq	1766c <__assert_fail@plt+0x6478>
   17660:	mov	r0, r7
   17664:	bl	10f54 <free@plt>
   17668:	str	r4, [r6]
   1766c:	mov	r3, #1
   17670:	str	r3, [r6, #4]
   17674:	pop	{r4, r5, r6, r7, r8, pc}
   17678:	andeq	lr, r2, r0, lsr #2
   1767c:	andeq	lr, r2, ip, lsr r2
   17680:	andeq	lr, r2, r8, lsr #2
   17684:	ldr	r3, [pc, #4]	; 17690 <__assert_fail@plt+0x649c>
   17688:	mvn	r2, #0
   1768c:	b	17204 <__assert_fail@plt+0x6010>
   17690:	andeq	lr, r2, ip, lsr r3
   17694:	ldr	r3, [pc]	; 1769c <__assert_fail@plt+0x64a8>
   17698:	b	17204 <__assert_fail@plt+0x6010>
   1769c:	andeq	lr, r2, ip, lsr r3
   176a0:	mov	r1, r0
   176a4:	ldr	r3, [pc, #8]	; 176b4 <__assert_fail@plt+0x64c0>
   176a8:	mvn	r2, #0
   176ac:	mov	r0, #0
   176b0:	b	17204 <__assert_fail@plt+0x6010>
   176b4:	andeq	lr, r2, ip, lsr r3
   176b8:	mov	r2, r1
   176bc:	ldr	r3, [pc, #8]	; 176cc <__assert_fail@plt+0x64d8>
   176c0:	mov	r1, r0
   176c4:	mov	r0, #0
   176c8:	b	17204 <__assert_fail@plt+0x6010>
   176cc:	andeq	lr, r2, ip, lsr r3
   176d0:	push	{r4, r5, r6, lr}
   176d4:	sub	sp, sp, #56	; 0x38
   176d8:	ldr	r4, [pc, #68]	; 17724 <__assert_fail@plt+0x6530>
   176dc:	mov	r6, r2
   176e0:	mov	r5, r0
   176e4:	ldr	r3, [r4]
   176e8:	add	r0, sp, #4
   176ec:	str	r3, [sp, #52]	; 0x34
   176f0:	bl	1587c <__assert_fail@plt+0x4688>
   176f4:	add	r3, sp, #4
   176f8:	mvn	r2, #0
   176fc:	mov	r1, r6
   17700:	mov	r0, r5
   17704:	bl	17204 <__assert_fail@plt+0x6010>
   17708:	ldr	r2, [sp, #52]	; 0x34
   1770c:	ldr	r3, [r4]
   17710:	cmp	r2, r3
   17714:	bne	17720 <__assert_fail@plt+0x652c>
   17718:	add	sp, sp, #56	; 0x38
   1771c:	pop	{r4, r5, r6, pc}
   17720:	bl	10fcc <__stack_chk_fail@plt>
   17724:	andeq	sp, r2, r8, lsl #30
   17728:	push	{r4, r5, r6, r7, lr}
   1772c:	sub	sp, sp, #60	; 0x3c
   17730:	ldr	r4, [pc, #72]	; 17780 <__assert_fail@plt+0x658c>
   17734:	mov	r6, r2
   17738:	mov	r7, r3
   1773c:	ldr	ip, [r4]
   17740:	mov	r5, r0
   17744:	add	r0, sp, #4
   17748:	str	ip, [sp, #52]	; 0x34
   1774c:	bl	1587c <__assert_fail@plt+0x4688>
   17750:	add	r3, sp, #4
   17754:	mov	r2, r7
   17758:	mov	r1, r6
   1775c:	mov	r0, r5
   17760:	bl	17204 <__assert_fail@plt+0x6010>
   17764:	ldr	r2, [sp, #52]	; 0x34
   17768:	ldr	r3, [r4]
   1776c:	cmp	r2, r3
   17770:	bne	1777c <__assert_fail@plt+0x6588>
   17774:	add	sp, sp, #60	; 0x3c
   17778:	pop	{r4, r5, r6, r7, pc}
   1777c:	bl	10fcc <__stack_chk_fail@plt>
   17780:	andeq	sp, r2, r8, lsl #30
   17784:	mov	r2, r1
   17788:	mov	r1, r0
   1778c:	mov	r0, #0
   17790:	b	176d0 <__assert_fail@plt+0x64dc>
   17794:	mov	r3, r2
   17798:	mov	r2, r1
   1779c:	mov	r1, r0
   177a0:	mov	r0, #0
   177a4:	b	17728 <__assert_fail@plt+0x6534>
   177a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   177ac:	mov	r4, r2
   177b0:	ldr	lr, [pc, #128]	; 17838 <__assert_fail@plt+0x6644>
   177b4:	mov	r8, r0
   177b8:	mov	r9, r1
   177bc:	ldm	lr!, {r0, r1, r2, r3}
   177c0:	sub	sp, sp, #60	; 0x3c
   177c4:	add	ip, sp, #4
   177c8:	lsr	r6, r4, #5
   177cc:	stmia	ip!, {r0, r1, r2, r3}
   177d0:	add	r7, sp, #12
   177d4:	ldm	lr!, {r0, r1, r2, r3}
   177d8:	and	r4, r4, #31
   177dc:	ldr	r5, [pc, #88]	; 1783c <__assert_fail@plt+0x6648>
   177e0:	stmia	ip!, {r0, r1, r2, r3}
   177e4:	ldm	lr, {r0, r1, r2, r3}
   177e8:	stm	ip, {r0, r1, r2, r3}
   177ec:	mov	r2, r9
   177f0:	ldr	r3, [r7, r6, lsl #2]
   177f4:	ldr	ip, [r5]
   177f8:	mov	r1, r8
   177fc:	mvn	r0, r3, lsr r4
   17800:	and	r0, r0, #1
   17804:	str	ip, [sp, #52]	; 0x34
   17808:	eor	r4, r3, r0, lsl r4
   1780c:	add	r3, sp, #4
   17810:	mov	r0, #0
   17814:	str	r4, [r7, r6, lsl #2]
   17818:	bl	17204 <__assert_fail@plt+0x6010>
   1781c:	ldr	r2, [sp, #52]	; 0x34
   17820:	ldr	r3, [r5]
   17824:	cmp	r2, r3
   17828:	bne	17834 <__assert_fail@plt+0x6640>
   1782c:	add	sp, sp, #60	; 0x3c
   17830:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17834:	bl	10fcc <__stack_chk_fail@plt>
   17838:	andeq	lr, r2, ip, lsr r3
   1783c:	andeq	sp, r2, r8, lsl #30
   17840:	mov	r2, r1
   17844:	mvn	r1, #0
   17848:	b	177a8 <__assert_fail@plt+0x65b4>
   1784c:	mov	r2, #58	; 0x3a
   17850:	mvn	r1, #0
   17854:	b	177a8 <__assert_fail@plt+0x65b4>
   17858:	mov	r2, #58	; 0x3a
   1785c:	b	177a8 <__assert_fail@plt+0x65b4>
   17860:	push	{r4, r5, r6, r7, r8, lr}
   17864:	sub	sp, sp, #104	; 0x68
   17868:	ldr	r5, [pc, #120]	; 178e8 <__assert_fail@plt+0x66f4>
   1786c:	mov	r6, r0
   17870:	mov	r0, sp
   17874:	ldr	r3, [r5]
   17878:	mov	r7, r2
   1787c:	str	r3, [sp, #100]	; 0x64
   17880:	bl	1587c <__assert_fail@plt+0x4688>
   17884:	mov	ip, sp
   17888:	add	lr, sp, #52	; 0x34
   1788c:	ldm	ip!, {r0, r1, r2, r3}
   17890:	stmia	lr!, {r0, r1, r2, r3}
   17894:	ldm	ip!, {r0, r1, r2, r3}
   17898:	ldr	r8, [sp, #64]	; 0x40
   1789c:	stmia	lr!, {r0, r1, r2, r3}
   178a0:	mvn	r4, r8
   178a4:	ldm	ip, {r0, r1, r2, r3}
   178a8:	and	ip, r4, #67108864	; 0x4000000
   178ac:	eor	ip, ip, r8
   178b0:	str	ip, [sp, #64]	; 0x40
   178b4:	stm	lr, {r0, r1, r2, r3}
   178b8:	add	r3, sp, #52	; 0x34
   178bc:	mvn	r2, #0
   178c0:	mov	r1, r7
   178c4:	mov	r0, r6
   178c8:	bl	17204 <__assert_fail@plt+0x6010>
   178cc:	ldr	r2, [sp, #100]	; 0x64
   178d0:	ldr	r3, [r5]
   178d4:	cmp	r2, r3
   178d8:	bne	178e4 <__assert_fail@plt+0x66f0>
   178dc:	add	sp, sp, #104	; 0x68
   178e0:	pop	{r4, r5, r6, r7, r8, pc}
   178e4:	bl	10fcc <__stack_chk_fail@plt>
   178e8:	andeq	sp, r2, r8, lsl #30
   178ec:	push	{r4, r5, r6, r7, r8, r9, lr}
   178f0:	mov	r6, r1
   178f4:	ldr	lr, [pc, #132]	; 17980 <__assert_fail@plt+0x678c>
   178f8:	mov	r5, r2
   178fc:	mov	r8, r0
   17900:	mov	r9, r3
   17904:	ldm	lr!, {r0, r1, r2, r3}
   17908:	sub	sp, sp, #60	; 0x3c
   1790c:	add	ip, sp, #4
   17910:	ldr	r4, [pc, #108]	; 17984 <__assert_fail@plt+0x6790>
   17914:	stmia	ip!, {r0, r1, r2, r3}
   17918:	mov	r7, #10
   1791c:	ldm	lr!, {r0, r1, r2, r3}
   17920:	cmp	r5, #0
   17924:	cmpne	r6, #0
   17928:	str	r7, [sp, #4]
   1792c:	stmia	ip!, {r0, r1, r2, r3}
   17930:	ldm	lr, {r0, r1, r2, r3}
   17934:	ldr	lr, [r4]
   17938:	stm	ip, {r0, r1, r2, r3}
   1793c:	str	lr, [sp, #52]	; 0x34
   17940:	beq	1797c <__assert_fail@plt+0x6788>
   17944:	add	r3, sp, #4
   17948:	ldr	r2, [sp, #88]	; 0x58
   1794c:	mov	r1, r9
   17950:	mov	r0, r8
   17954:	str	r6, [sp, #44]	; 0x2c
   17958:	str	r5, [sp, #48]	; 0x30
   1795c:	bl	17204 <__assert_fail@plt+0x6010>
   17960:	ldr	r2, [sp, #52]	; 0x34
   17964:	ldr	r3, [r4]
   17968:	cmp	r2, r3
   1796c:	bne	17978 <__assert_fail@plt+0x6784>
   17970:	add	sp, sp, #60	; 0x3c
   17974:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17978:	bl	10fcc <__stack_chk_fail@plt>
   1797c:	bl	111dc <abort@plt>
   17980:	andeq	lr, r2, ip, lsr r3
   17984:	andeq	sp, r2, r8, lsl #30
   17988:	push	{lr}		; (str lr, [sp, #-4]!)
   1798c:	sub	sp, sp, #12
   17990:	mvn	ip, #0
   17994:	str	ip, [sp]
   17998:	bl	178ec <__assert_fail@plt+0x66f8>
   1799c:	add	sp, sp, #12
   179a0:	pop	{pc}		; (ldr pc, [sp], #4)
   179a4:	push	{lr}		; (str lr, [sp, #-4]!)
   179a8:	sub	sp, sp, #12
   179ac:	mvn	ip, #0
   179b0:	mov	r3, r2
   179b4:	str	ip, [sp]
   179b8:	mov	r2, r1
   179bc:	mov	r1, r0
   179c0:	mov	r0, #0
   179c4:	bl	178ec <__assert_fail@plt+0x66f8>
   179c8:	add	sp, sp, #12
   179cc:	pop	{pc}		; (ldr pc, [sp], #4)
   179d0:	push	{lr}		; (str lr, [sp, #-4]!)
   179d4:	sub	sp, sp, #12
   179d8:	str	r3, [sp]
   179dc:	mov	r3, r2
   179e0:	mov	r2, r1
   179e4:	mov	r1, r0
   179e8:	mov	r0, #0
   179ec:	bl	178ec <__assert_fail@plt+0x66f8>
   179f0:	add	sp, sp, #12
   179f4:	pop	{pc}		; (ldr pc, [sp], #4)
   179f8:	ldr	r3, [pc]	; 17a00 <__assert_fail@plt+0x680c>
   179fc:	b	17204 <__assert_fail@plt+0x6010>
   17a00:	andeq	lr, r2, r0, lsr r1
   17a04:	mov	r2, r1
   17a08:	ldr	r3, [pc, #8]	; 17a18 <__assert_fail@plt+0x6824>
   17a0c:	mov	r1, r0
   17a10:	mov	r0, #0
   17a14:	b	17204 <__assert_fail@plt+0x6010>
   17a18:	andeq	lr, r2, r0, lsr r1
   17a1c:	ldr	r3, [pc, #4]	; 17a28 <__assert_fail@plt+0x6834>
   17a20:	mvn	r2, #0
   17a24:	b	17204 <__assert_fail@plt+0x6010>
   17a28:	andeq	lr, r2, r0, lsr r1
   17a2c:	mov	r1, r0
   17a30:	ldr	r3, [pc, #8]	; 17a40 <__assert_fail@plt+0x684c>
   17a34:	mvn	r2, #0
   17a38:	mov	r0, #0
   17a3c:	b	17204 <__assert_fail@plt+0x6010>
   17a40:	andeq	lr, r2, r0, lsr r1
   17a44:	push	{r4, r5, r6, lr}
   17a48:	sub	sp, sp, #32
   17a4c:	cmp	r1, #0
   17a50:	mov	r5, r0
   17a54:	ldr	r4, [sp, #48]	; 0x30
   17a58:	ldr	r6, [sp, #52]	; 0x34
   17a5c:	beq	17aec <__assert_fail@plt+0x68f8>
   17a60:	strd	r2, [sp]
   17a64:	mov	r3, r1
   17a68:	ldr	r2, [pc, #828]	; 17dac <__assert_fail@plt+0x6bb8>
   17a6c:	mov	r1, #1
   17a70:	bl	11140 <__fprintf_chk@plt>
   17a74:	mov	r2, #5
   17a78:	ldr	r1, [pc, #816]	; 17db0 <__assert_fail@plt+0x6bbc>
   17a7c:	mov	r0, #0
   17a80:	bl	10fc0 <dcgettext@plt>
   17a84:	ldr	r3, [pc, #808]	; 17db4 <__assert_fail@plt+0x6bc0>
   17a88:	ldr	r2, [pc, #808]	; 17db8 <__assert_fail@plt+0x6bc4>
   17a8c:	str	r3, [sp]
   17a90:	mov	r1, #1
   17a94:	mov	r3, r0
   17a98:	mov	r0, r5
   17a9c:	bl	11140 <__fprintf_chk@plt>
   17aa0:	ldr	r1, [pc, #788]	; 17dbc <__assert_fail@plt+0x6bc8>
   17aa4:	mov	r2, #5
   17aa8:	mov	r0, #0
   17aac:	bl	10fc0 <dcgettext@plt>
   17ab0:	mov	r1, r5
   17ab4:	bl	10f24 <fputs_unlocked@plt>
   17ab8:	cmp	r6, #9
   17abc:	ldrls	pc, [pc, r6, lsl #2]
   17ac0:	b	17d9c <__assert_fail@plt+0x6ba8>
   17ac4:	andeq	r7, r1, r8, lsr #27
   17ac8:	andeq	r7, r1, r0, ror fp
   17acc:	muleq	r1, ip, fp
   17ad0:	ldrdeq	r7, [r1], -r0
   17ad4:	andeq	r7, r1, ip, lsl #24
   17ad8:	andeq	r7, r1, ip, asr #24
   17adc:	muleq	r1, r4, ip
   17ae0:	andeq	r7, r1, r4, ror #25
   17ae4:	andeq	r7, r1, ip, lsr sp
   17ae8:	andeq	r7, r1, r4, lsl #22
   17aec:	str	r3, [sp]
   17af0:	mov	r1, #1
   17af4:	mov	r3, r2
   17af8:	ldr	r2, [pc, #704]	; 17dc0 <__assert_fail@plt+0x6bcc>
   17afc:	bl	11140 <__fprintf_chk@plt>
   17b00:	b	17a74 <__assert_fail@plt+0x6880>
   17b04:	ldr	r1, [pc, #696]	; 17dc4 <__assert_fail@plt+0x6bd0>
   17b08:	mov	r2, #5
   17b0c:	mov	r0, #0
   17b10:	bl	10fc0 <dcgettext@plt>
   17b14:	ldr	r2, [r4, #32]
   17b18:	ldr	r3, [r4, #28]
   17b1c:	ldr	r1, [r4, #24]
   17b20:	str	r2, [sp, #28]
   17b24:	ldr	r2, [r4, #20]
   17b28:	str	r3, [sp, #24]
   17b2c:	ldr	r3, [r4, #16]
   17b30:	str	r1, [sp, #20]
   17b34:	ldr	r1, [r4, #12]
   17b38:	str	r2, [sp, #16]
   17b3c:	ldr	r2, [r4, #8]
   17b40:	str	r3, [sp, #12]
   17b44:	ldr	r3, [r4, #4]
   17b48:	str	r1, [sp, #8]
   17b4c:	str	r2, [sp, #4]
   17b50:	str	r3, [sp]
   17b54:	mov	r1, #1
   17b58:	ldr	r3, [r4]
   17b5c:	mov	r2, r0
   17b60:	mov	r0, r5
   17b64:	bl	11140 <__fprintf_chk@plt>
   17b68:	add	sp, sp, #32
   17b6c:	pop	{r4, r5, r6, pc}
   17b70:	mov	r2, #5
   17b74:	ldr	r1, [pc, #588]	; 17dc8 <__assert_fail@plt+0x6bd4>
   17b78:	mov	r0, #0
   17b7c:	bl	10fc0 <dcgettext@plt>
   17b80:	ldr	r3, [r4]
   17b84:	mov	r1, #1
   17b88:	mov	r2, r0
   17b8c:	mov	r0, r5
   17b90:	add	sp, sp, #32
   17b94:	pop	{r4, r5, r6, lr}
   17b98:	b	11140 <__fprintf_chk@plt>
   17b9c:	mov	r2, #5
   17ba0:	ldr	r1, [pc, #548]	; 17dcc <__assert_fail@plt+0x6bd8>
   17ba4:	mov	r0, #0
   17ba8:	bl	10fc0 <dcgettext@plt>
   17bac:	ldr	r2, [r4, #4]
   17bb0:	ldr	r3, [r4]
   17bb4:	mov	r1, #1
   17bb8:	str	r2, [sp, #48]	; 0x30
   17bbc:	mov	r2, r0
   17bc0:	mov	r0, r5
   17bc4:	add	sp, sp, #32
   17bc8:	pop	{r4, r5, r6, lr}
   17bcc:	b	11140 <__fprintf_chk@plt>
   17bd0:	mov	r2, #5
   17bd4:	ldr	r1, [pc, #500]	; 17dd0 <__assert_fail@plt+0x6bdc>
   17bd8:	mov	r0, #0
   17bdc:	bl	10fc0 <dcgettext@plt>
   17be0:	ldr	r2, [r4, #8]
   17be4:	ldr	r3, [r4, #4]
   17be8:	mov	r1, #1
   17bec:	str	r2, [sp, #52]	; 0x34
   17bf0:	str	r3, [sp, #48]	; 0x30
   17bf4:	ldr	r3, [r4]
   17bf8:	mov	r2, r0
   17bfc:	mov	r0, r5
   17c00:	add	sp, sp, #32
   17c04:	pop	{r4, r5, r6, lr}
   17c08:	b	11140 <__fprintf_chk@plt>
   17c0c:	mov	r2, #5
   17c10:	ldr	r1, [pc, #444]	; 17dd4 <__assert_fail@plt+0x6be0>
   17c14:	mov	r0, #0
   17c18:	bl	10fc0 <dcgettext@plt>
   17c1c:	ldr	r1, [r4, #12]
   17c20:	ldr	r2, [r4, #8]
   17c24:	ldr	r3, [r4, #4]
   17c28:	str	r1, [sp, #8]
   17c2c:	str	r2, [sp, #4]
   17c30:	str	r3, [sp]
   17c34:	mov	r1, #1
   17c38:	ldr	r3, [r4]
   17c3c:	mov	r2, r0
   17c40:	mov	r0, r5
   17c44:	bl	11140 <__fprintf_chk@plt>
   17c48:	b	17b68 <__assert_fail@plt+0x6974>
   17c4c:	mov	r2, #5
   17c50:	ldr	r1, [pc, #384]	; 17dd8 <__assert_fail@plt+0x6be4>
   17c54:	mov	r0, #0
   17c58:	bl	10fc0 <dcgettext@plt>
   17c5c:	ldr	r3, [r4, #16]
   17c60:	ldr	r1, [r4, #12]
   17c64:	ldr	r2, [r4, #8]
   17c68:	str	r3, [sp, #12]
   17c6c:	ldr	r3, [r4, #4]
   17c70:	str	r1, [sp, #8]
   17c74:	str	r2, [sp, #4]
   17c78:	str	r3, [sp]
   17c7c:	mov	r1, #1
   17c80:	ldr	r3, [r4]
   17c84:	mov	r2, r0
   17c88:	mov	r0, r5
   17c8c:	bl	11140 <__fprintf_chk@plt>
   17c90:	b	17b68 <__assert_fail@plt+0x6974>
   17c94:	mov	r2, #5
   17c98:	ldr	r1, [pc, #316]	; 17ddc <__assert_fail@plt+0x6be8>
   17c9c:	mov	r0, #0
   17ca0:	bl	10fc0 <dcgettext@plt>
   17ca4:	ldr	r2, [r4, #20]
   17ca8:	ldr	r3, [r4, #16]
   17cac:	ldr	r1, [r4, #12]
   17cb0:	str	r2, [sp, #16]
   17cb4:	ldr	r2, [r4, #8]
   17cb8:	str	r3, [sp, #12]
   17cbc:	ldr	r3, [r4, #4]
   17cc0:	str	r1, [sp, #8]
   17cc4:	str	r2, [sp, #4]
   17cc8:	str	r3, [sp]
   17ccc:	mov	r1, #1
   17cd0:	ldr	r3, [r4]
   17cd4:	mov	r2, r0
   17cd8:	mov	r0, r5
   17cdc:	bl	11140 <__fprintf_chk@plt>
   17ce0:	b	17b68 <__assert_fail@plt+0x6974>
   17ce4:	mov	r2, #5
   17ce8:	ldr	r1, [pc, #240]	; 17de0 <__assert_fail@plt+0x6bec>
   17cec:	mov	r0, #0
   17cf0:	bl	10fc0 <dcgettext@plt>
   17cf4:	ldr	r1, [r4, #24]
   17cf8:	ldr	r2, [r4, #20]
   17cfc:	ldr	r3, [r4, #16]
   17d00:	str	r1, [sp, #20]
   17d04:	ldr	r1, [r4, #12]
   17d08:	str	r2, [sp, #16]
   17d0c:	ldr	r2, [r4, #8]
   17d10:	str	r3, [sp, #12]
   17d14:	ldr	r3, [r4, #4]
   17d18:	str	r1, [sp, #8]
   17d1c:	str	r2, [sp, #4]
   17d20:	str	r3, [sp]
   17d24:	mov	r1, #1
   17d28:	ldr	r3, [r4]
   17d2c:	mov	r2, r0
   17d30:	mov	r0, r5
   17d34:	bl	11140 <__fprintf_chk@plt>
   17d38:	b	17b68 <__assert_fail@plt+0x6974>
   17d3c:	mov	r2, #5
   17d40:	ldr	r1, [pc, #156]	; 17de4 <__assert_fail@plt+0x6bf0>
   17d44:	mov	r0, #0
   17d48:	bl	10fc0 <dcgettext@plt>
   17d4c:	ldr	r3, [r4, #28]
   17d50:	ldr	r1, [r4, #24]
   17d54:	ldr	r2, [r4, #20]
   17d58:	str	r3, [sp, #24]
   17d5c:	ldr	r3, [r4, #16]
   17d60:	str	r1, [sp, #20]
   17d64:	ldr	r1, [r4, #12]
   17d68:	str	r2, [sp, #16]
   17d6c:	ldr	r2, [r4, #8]
   17d70:	str	r3, [sp, #12]
   17d74:	ldr	r3, [r4, #4]
   17d78:	str	r1, [sp, #8]
   17d7c:	str	r2, [sp, #4]
   17d80:	str	r3, [sp]
   17d84:	mov	r1, #1
   17d88:	ldr	r3, [r4]
   17d8c:	mov	r2, r0
   17d90:	mov	r0, r5
   17d94:	bl	11140 <__fprintf_chk@plt>
   17d98:	b	17b68 <__assert_fail@plt+0x6974>
   17d9c:	mov	r2, #5
   17da0:	ldr	r1, [pc, #64]	; 17de8 <__assert_fail@plt+0x6bf4>
   17da4:	b	17b0c <__assert_fail@plt+0x6918>
   17da8:	bl	111dc <abort@plt>
   17dac:	andeq	ip, r1, r4, lsl #25
   17db0:	muleq	r1, r8, ip
   17db4:	andeq	r0, r0, r2, ror #15
   17db8:	andeq	ip, r1, ip, ror #30
   17dbc:	muleq	r1, ip, ip
   17dc0:	muleq	r1, r0, ip
   17dc4:	andeq	ip, r1, r4, ror lr
   17dc8:	andeq	ip, r1, r8, ror #26
   17dcc:	andeq	ip, r1, r8, ror sp
   17dd0:	muleq	r1, r0, sp
   17dd4:	andeq	ip, r1, ip, lsr #27
   17dd8:	andeq	ip, r1, ip, asr #27
   17ddc:	strdeq	ip, [r1], -r0
   17de0:	andeq	ip, r1, r8, lsl lr
   17de4:	andeq	ip, r1, r4, asr #28
   17de8:	andeq	ip, r1, r8, lsr #29
   17dec:	push	{r4, r5, lr}
   17df0:	sub	sp, sp, #12
   17df4:	ldr	r5, [sp, #24]
   17df8:	ldr	ip, [r5]
   17dfc:	cmp	ip, #0
   17e00:	beq	17e1c <__assert_fail@plt+0x6c28>
   17e04:	mov	lr, r5
   17e08:	mov	ip, #0
   17e0c:	ldr	r4, [lr, #4]!
   17e10:	add	ip, ip, #1
   17e14:	cmp	r4, #0
   17e18:	bne	17e0c <__assert_fail@plt+0x6c18>
   17e1c:	stm	sp, {r5, ip}
   17e20:	bl	17a44 <__assert_fail@plt+0x6850>
   17e24:	add	sp, sp, #12
   17e28:	pop	{r4, r5, pc}
   17e2c:	push	{r4, r5, r6, lr}
   17e30:	sub	sp, sp, #56	; 0x38
   17e34:	ldr	r6, [pc, #88]	; 17e94 <__assert_fail@plt+0x6ca0>
   17e38:	ldr	r5, [sp, #72]	; 0x48
   17e3c:	add	r4, sp, #8
   17e40:	ldr	ip, [r6]
   17e44:	str	ip, [sp, #52]	; 0x34
   17e48:	mov	ip, #0
   17e4c:	ldr	lr, [r5], #4
   17e50:	cmp	lr, #0
   17e54:	str	lr, [r4, #4]!
   17e58:	beq	17e68 <__assert_fail@plt+0x6c74>
   17e5c:	add	ip, ip, #1
   17e60:	cmp	ip, #10
   17e64:	bne	17e4c <__assert_fail@plt+0x6c58>
   17e68:	add	lr, sp, #12
   17e6c:	str	ip, [sp, #4]
   17e70:	str	lr, [sp]
   17e74:	bl	17a44 <__assert_fail@plt+0x6850>
   17e78:	ldr	r2, [sp, #52]	; 0x34
   17e7c:	ldr	r3, [r6]
   17e80:	cmp	r2, r3
   17e84:	bne	17e90 <__assert_fail@plt+0x6c9c>
   17e88:	add	sp, sp, #56	; 0x38
   17e8c:	pop	{r4, r5, r6, pc}
   17e90:	bl	10fcc <__stack_chk_fail@plt>
   17e94:	andeq	sp, r2, r8, lsl #30
   17e98:	push	{r3}		; (str r3, [sp, #-4]!)
   17e9c:	mov	ip, #0
   17ea0:	push	{r4, r5, r6, lr}
   17ea4:	sub	sp, sp, #60	; 0x3c
   17ea8:	ldr	r6, [pc, #100]	; 17f14 <__assert_fail@plt+0x6d20>
   17eac:	add	r5, sp, #8
   17eb0:	add	r4, sp, #80	; 0x50
   17eb4:	ldr	r3, [r6]
   17eb8:	str	r4, [sp, #8]
   17ebc:	str	r3, [sp, #52]	; 0x34
   17ec0:	ldr	r3, [sp, #76]	; 0x4c
   17ec4:	ldr	lr, [r4], #4
   17ec8:	cmp	lr, #0
   17ecc:	str	lr, [r5, #4]!
   17ed0:	beq	17ee0 <__assert_fail@plt+0x6cec>
   17ed4:	add	ip, ip, #1
   17ed8:	cmp	ip, #10
   17edc:	bne	17ec4 <__assert_fail@plt+0x6cd0>
   17ee0:	add	lr, sp, #12
   17ee4:	str	ip, [sp, #4]
   17ee8:	str	lr, [sp]
   17eec:	bl	17a44 <__assert_fail@plt+0x6850>
   17ef0:	ldr	r2, [sp, #52]	; 0x34
   17ef4:	ldr	r3, [r6]
   17ef8:	cmp	r2, r3
   17efc:	bne	17f10 <__assert_fail@plt+0x6d1c>
   17f00:	add	sp, sp, #60	; 0x3c
   17f04:	pop	{r4, r5, r6, lr}
   17f08:	add	sp, sp, #4
   17f0c:	bx	lr
   17f10:	bl	10fcc <__stack_chk_fail@plt>
   17f14:	andeq	sp, r2, r8, lsl #30
   17f18:	push	{r4, lr}
   17f1c:	mov	r2, #5
   17f20:	ldr	r1, [pc, #88]	; 17f80 <__assert_fail@plt+0x6d8c>
   17f24:	mov	r0, #0
   17f28:	bl	10fc0 <dcgettext@plt>
   17f2c:	ldr	r2, [pc, #80]	; 17f84 <__assert_fail@plt+0x6d90>
   17f30:	mov	r1, r0
   17f34:	mov	r0, #1
   17f38:	bl	1111c <__printf_chk@plt>
   17f3c:	mov	r2, #5
   17f40:	ldr	r1, [pc, #64]	; 17f88 <__assert_fail@plt+0x6d94>
   17f44:	mov	r0, #0
   17f48:	bl	10fc0 <dcgettext@plt>
   17f4c:	ldr	r3, [pc, #56]	; 17f8c <__assert_fail@plt+0x6d98>
   17f50:	ldr	r2, [pc, #56]	; 17f90 <__assert_fail@plt+0x6d9c>
   17f54:	mov	r1, r0
   17f58:	mov	r0, #1
   17f5c:	bl	1111c <__printf_chk@plt>
   17f60:	ldr	r1, [pc, #44]	; 17f94 <__assert_fail@plt+0x6da0>
   17f64:	mov	r2, #5
   17f68:	mov	r0, #0
   17f6c:	bl	10fc0 <dcgettext@plt>
   17f70:	ldr	r3, [pc, #32]	; 17f98 <__assert_fail@plt+0x6da4>
   17f74:	pop	{r4, lr}
   17f78:	ldr	r1, [r3]
   17f7c:	b	10f24 <fputs_unlocked@plt>
   17f80:	andeq	ip, r1, r4, ror #29
   17f84:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   17f88:	andeq	ip, r1, r4, lsl pc
   17f8c:	andeq	ip, r1, r8, ror r7
   17f90:	andeq	ip, r1, r0, lsr #15
   17f94:	andeq	ip, r1, r8, lsr #30
   17f98:	andeq	lr, r2, ip, ror r1
   17f9c:	push	{r4, lr}
   17fa0:	mov	r4, r0
   17fa4:	bl	11068 <malloc@plt>
   17fa8:	adds	r4, r4, #0
   17fac:	movne	r4, #1
   17fb0:	cmp	r0, #0
   17fb4:	movne	r4, #0
   17fb8:	cmp	r4, #0
   17fbc:	popeq	{r4, pc}
   17fc0:	bl	181e4 <__assert_fail@plt+0x6ff0>
   17fc4:	push	{r4, r5, r6, lr}
   17fc8:	umull	r4, r5, r0, r1
   17fcc:	adds	r3, r5, #0
   17fd0:	movne	r3, #1
   17fd4:	cmp	r4, #0
   17fd8:	blt	17ff0 <__assert_fail@plt+0x6dfc>
   17fdc:	cmp	r3, #0
   17fe0:	bne	17ff0 <__assert_fail@plt+0x6dfc>
   17fe4:	mul	r0, r1, r0
   17fe8:	pop	{r4, r5, r6, lr}
   17fec:	b	17f9c <__assert_fail@plt+0x6da8>
   17ff0:	bl	181e4 <__assert_fail@plt+0x6ff0>
   17ff4:	b	17f9c <__assert_fail@plt+0x6da8>
   17ff8:	adds	r3, r0, #0
   17ffc:	movne	r3, #1
   18000:	cmp	r1, #0
   18004:	movne	r3, #0
   18008:	cmp	r3, #0
   1800c:	push	{r4, lr}
   18010:	bne	18038 <__assert_fail@plt+0x6e44>
   18014:	mov	r4, r1
   18018:	bl	10fd8 <realloc@plt>
   1801c:	adds	r4, r4, #0
   18020:	movne	r4, #1
   18024:	cmp	r0, #0
   18028:	movne	r4, #0
   1802c:	cmp	r4, #0
   18030:	popeq	{r4, pc}
   18034:	bl	181e4 <__assert_fail@plt+0x6ff0>
   18038:	bl	10f54 <free@plt>
   1803c:	mov	r0, #0
   18040:	pop	{r4, pc}
   18044:	push	{r4, r5, r6, lr}
   18048:	umull	r4, r5, r1, r2
   1804c:	adds	r3, r5, #0
   18050:	movne	r3, #1
   18054:	cmp	r4, #0
   18058:	blt	18070 <__assert_fail@plt+0x6e7c>
   1805c:	cmp	r3, #0
   18060:	bne	18070 <__assert_fail@plt+0x6e7c>
   18064:	mul	r1, r2, r1
   18068:	pop	{r4, r5, r6, lr}
   1806c:	b	17ff8 <__assert_fail@plt+0x6e04>
   18070:	bl	181e4 <__assert_fail@plt+0x6ff0>
   18074:	push	{r4, r5, r6, r7, r8, lr}
   18078:	subs	r7, r0, #0
   1807c:	mov	r6, r1
   18080:	mov	r5, r2
   18084:	ldr	r4, [r1]
   18088:	beq	180bc <__assert_fail@plt+0x6ec8>
   1808c:	mov	r1, r2
   18090:	ldr	r0, [pc, #104]	; 18100 <__assert_fail@plt+0x6f0c>
   18094:	bl	1ae7c <__assert_fail@plt+0x9c88>
   18098:	cmp	r0, r4
   1809c:	bls	180e0 <__assert_fail@plt+0x6eec>
   180a0:	add	r3, r4, #1
   180a4:	add	r4, r3, r4, lsr #1
   180a8:	str	r4, [r6]
   180ac:	mul	r1, r5, r4
   180b0:	mov	r0, r7
   180b4:	pop	{r4, r5, r6, r7, r8, lr}
   180b8:	b	17ff8 <__assert_fail@plt+0x6e04>
   180bc:	cmp	r4, #0
   180c0:	beq	180e4 <__assert_fail@plt+0x6ef0>
   180c4:	umull	r0, r1, r4, r5
   180c8:	adds	r3, r1, #0
   180cc:	movne	r3, #1
   180d0:	cmp	r0, #0
   180d4:	blt	180e0 <__assert_fail@plt+0x6eec>
   180d8:	cmp	r3, #0
   180dc:	beq	180a8 <__assert_fail@plt+0x6eb4>
   180e0:	bl	181e4 <__assert_fail@plt+0x6ff0>
   180e4:	mov	r1, r2
   180e8:	mov	r0, #64	; 0x40
   180ec:	bl	1ae7c <__assert_fail@plt+0x9c88>
   180f0:	cmp	r5, #64	; 0x40
   180f4:	movls	r4, r0
   180f8:	addhi	r4, r0, #1
   180fc:	b	180c4 <__assert_fail@plt+0x6ed0>
   18100:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   18104:	cmp	r0, #0
   18108:	ldr	r3, [r1]
   1810c:	beq	18130 <__assert_fail@plt+0x6f3c>
   18110:	ldr	r2, [pc, #60]	; 18154 <__assert_fail@plt+0x6f60>
   18114:	cmp	r3, r2
   18118:	bhi	1814c <__assert_fail@plt+0x6f58>
   1811c:	add	r2, r3, #1
   18120:	add	r3, r2, r3, lsr #1
   18124:	str	r3, [r1]
   18128:	mov	r1, r3
   1812c:	b	17ff8 <__assert_fail@plt+0x6e04>
   18130:	cmp	r3, #0
   18134:	bne	18148 <__assert_fail@plt+0x6f54>
   18138:	mov	r3, #64	; 0x40
   1813c:	str	r3, [r1]
   18140:	mov	r1, r3
   18144:	b	17ff8 <__assert_fail@plt+0x6e04>
   18148:	bge	18124 <__assert_fail@plt+0x6f30>
   1814c:	push	{r4, lr}
   18150:	bl	181e4 <__assert_fail@plt+0x6ff0>
   18154:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   18158:	push	{r4, lr}
   1815c:	mov	r4, r0
   18160:	bl	17f9c <__assert_fail@plt+0x6da8>
   18164:	mov	r2, r4
   18168:	mov	r1, #0
   1816c:	pop	{r4, lr}
   18170:	b	11104 <memset@plt>
   18174:	push	{r4, r5, r6, lr}
   18178:	umull	r4, r5, r0, r1
   1817c:	adds	r3, r5, #0
   18180:	movne	r3, #1
   18184:	cmp	r4, #0
   18188:	blt	181a0 <__assert_fail@plt+0x6fac>
   1818c:	cmp	r3, #0
   18190:	bne	181a0 <__assert_fail@plt+0x6fac>
   18194:	bl	10f18 <calloc@plt>
   18198:	cmp	r0, #0
   1819c:	popne	{r4, r5, r6, pc}
   181a0:	bl	181e4 <__assert_fail@plt+0x6ff0>
   181a4:	push	{r4, r5, r6, lr}
   181a8:	mov	r4, r1
   181ac:	mov	r5, r0
   181b0:	mov	r0, r1
   181b4:	bl	17f9c <__assert_fail@plt+0x6da8>
   181b8:	mov	r2, r4
   181bc:	mov	r1, r5
   181c0:	pop	{r4, r5, r6, lr}
   181c4:	b	10f78 <memcpy@plt>
   181c8:	push	{r4, lr}
   181cc:	mov	r4, r0
   181d0:	bl	110bc <strlen@plt>
   181d4:	add	r1, r0, #1
   181d8:	mov	r0, r4
   181dc:	pop	{r4, lr}
   181e0:	b	181a4 <__assert_fail@plt+0x6fb0>
   181e4:	ldr	r3, [pc, #44]	; 18218 <__assert_fail@plt+0x7024>
   181e8:	push	{r4, lr}
   181ec:	mov	r2, #5
   181f0:	ldr	r1, [pc, #36]	; 1821c <__assert_fail@plt+0x7028>
   181f4:	mov	r0, #0
   181f8:	ldr	r4, [r3]
   181fc:	bl	10fc0 <dcgettext@plt>
   18200:	ldr	r2, [pc, #24]	; 18220 <__assert_fail@plt+0x702c>
   18204:	mov	r1, #0
   18208:	mov	r3, r0
   1820c:	mov	r0, r4
   18210:	bl	11044 <error@plt>
   18214:	bl	111dc <abort@plt>
   18218:	andeq	lr, r2, ip, lsl r1
   1821c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18220:	andeq	ip, r1, r8, ror #22
   18224:	push	{r4, r5, r6, r7, r8, lr}
   18228:	bl	19144 <__assert_fail@plt+0x7f50>
   1822c:	subs	r4, r0, #0
   18230:	blt	1823c <__assert_fail@plt+0x7048>
   18234:	mov	r0, r4
   18238:	pop	{r4, r5, r6, r7, r8, pc}
   1823c:	ldr	r3, [pc, #64]	; 18284 <__assert_fail@plt+0x7090>
   18240:	ldr	r0, [r3]
   18244:	bl	10f60 <ferror@plt>
   18248:	subs	r5, r0, #0
   1824c:	bne	18234 <__assert_fail@plt+0x7040>
   18250:	ldr	r3, [pc, #48]	; 18288 <__assert_fail@plt+0x7094>
   18254:	ldr	r6, [r3]
   18258:	bl	110d4 <__errno_location@plt>
   1825c:	mov	r2, #5
   18260:	ldr	r1, [pc, #36]	; 1828c <__assert_fail@plt+0x7098>
   18264:	ldr	r7, [r0]
   18268:	mov	r0, r5
   1826c:	bl	10fc0 <dcgettext@plt>
   18270:	mov	r1, r7
   18274:	mov	r2, r0
   18278:	mov	r0, r6
   1827c:	bl	11044 <error@plt>
   18280:	b	18234 <__assert_fail@plt+0x7040>
   18284:	andeq	lr, r2, ip, ror r1
   18288:	andeq	lr, r2, ip, lsl r1
   1828c:			; <UNDEFINED> instruction: 0x0001cfb0
   18290:	push	{r0, r1, r2, r3}
   18294:	push	{r4, lr}
   18298:	sub	sp, sp, #8
   1829c:	ldr	r4, [pc, #60]	; 182e0 <__assert_fail@plt+0x70ec>
   182a0:	add	r3, sp, #20
   182a4:	mov	r1, r3
   182a8:	ldr	r2, [r4]
   182ac:	ldr	r0, [sp, #16]
   182b0:	str	r2, [sp, #4]
   182b4:	str	r3, [sp]
   182b8:	bl	18224 <__assert_fail@plt+0x7030>
   182bc:	ldr	r2, [sp, #4]
   182c0:	ldr	r3, [r4]
   182c4:	cmp	r2, r3
   182c8:	bne	182dc <__assert_fail@plt+0x70e8>
   182cc:	add	sp, sp, #8
   182d0:	pop	{r4, lr}
   182d4:	add	sp, sp, #16
   182d8:	bx	lr
   182dc:	bl	10fcc <__stack_chk_fail@plt>
   182e0:	andeq	sp, r2, r8, lsl #30
   182e4:	push	{r4, r5, r6, r7, r8, lr}
   182e8:	mov	r5, r0
   182ec:	bl	19060 <__assert_fail@plt+0x7e6c>
   182f0:	subs	r4, r0, #0
   182f4:	blt	18300 <__assert_fail@plt+0x710c>
   182f8:	mov	r0, r4
   182fc:	pop	{r4, r5, r6, r7, r8, pc}
   18300:	mov	r0, r5
   18304:	bl	10f60 <ferror@plt>
   18308:	subs	r5, r0, #0
   1830c:	bne	182f8 <__assert_fail@plt+0x7104>
   18310:	ldr	r3, [pc, #44]	; 18344 <__assert_fail@plt+0x7150>
   18314:	ldr	r6, [r3]
   18318:	bl	110d4 <__errno_location@plt>
   1831c:	mov	r2, #5
   18320:	ldr	r1, [pc, #32]	; 18348 <__assert_fail@plt+0x7154>
   18324:	ldr	r7, [r0]
   18328:	mov	r0, r5
   1832c:	bl	10fc0 <dcgettext@plt>
   18330:	mov	r1, r7
   18334:	mov	r2, r0
   18338:	mov	r0, r6
   1833c:	bl	11044 <error@plt>
   18340:	b	182f8 <__assert_fail@plt+0x7104>
   18344:	andeq	lr, r2, ip, lsl r1
   18348:			; <UNDEFINED> instruction: 0x0001cfb0
   1834c:	push	{r1, r2, r3}
   18350:	push	{r4, lr}
   18354:	sub	sp, sp, #12
   18358:	ldr	r4, [pc, #60]	; 1839c <__assert_fail@plt+0x71a8>
   1835c:	add	r3, sp, #24
   18360:	mov	r2, r3
   18364:	ldr	ip, [r4]
   18368:	ldr	r1, [sp, #20]
   1836c:	str	r3, [sp]
   18370:	str	ip, [sp, #4]
   18374:	bl	182e4 <__assert_fail@plt+0x70f0>
   18378:	ldr	r2, [sp, #4]
   1837c:	ldr	r3, [r4]
   18380:	cmp	r2, r3
   18384:	bne	18398 <__assert_fail@plt+0x71a4>
   18388:	add	sp, sp, #12
   1838c:	pop	{r4, lr}
   18390:	add	sp, sp, #12
   18394:	bx	lr
   18398:	bl	10fcc <__stack_chk_fail@plt>
   1839c:	andeq	sp, r2, r8, lsl #30
   183a0:	ldr	ip, [pc, #128]	; 18428 <__assert_fail@plt+0x7234>
   183a4:	push	{r7, lr}
   183a8:	sub	r0, r0, #1
   183ac:	ldr	lr, [pc, #120]	; 1842c <__assert_fail@plt+0x7238>
   183b0:	sub	sp, sp, #16
   183b4:	ldr	r4, [ip]
   183b8:	cmp	r0, #3
   183bc:	str	r4, [sp, #12]
   183c0:	ldr	r6, [sp, #24]
   183c4:	ldr	r5, [lr]
   183c8:	bhi	18424 <__assert_fail@plt+0x7230>
   183cc:	mov	ip, r1
   183d0:	cmp	ip, #0
   183d4:	ldr	r1, [pc, #84]	; 18430 <__assert_fail@plt+0x723c>
   183d8:	ldrlt	r4, [pc, #84]	; 18434 <__assert_fail@plt+0x7240>
   183dc:	movlt	r3, #0
   183e0:	ldr	r1, [r1, r0, lsl #2]
   183e4:	strblt	r2, [sp, #8]
   183e8:	mov	r0, #0
   183ec:	mov	r2, #5
   183f0:	ldrge	r7, [r3, ip, lsl #4]
   183f4:	sublt	r4, r4, ip
   183f8:	strblt	r3, [sp, #9]
   183fc:	addlt	r7, sp, #8
   18400:	ldrge	r4, [pc, #44]	; 18434 <__assert_fail@plt+0x7240>
   18404:	bl	10fc0 <dcgettext@plt>
   18408:	str	r6, [sp, #4]
   1840c:	str	r7, [sp]
   18410:	mov	r3, r4
   18414:	mov	r1, #0
   18418:	mov	r2, r0
   1841c:	mov	r0, r5
   18420:	bl	11044 <error@plt>
   18424:	bl	111dc <abort@plt>
   18428:	andeq	sp, r2, r8, lsl #30
   1842c:	andeq	lr, r2, ip, lsl r1
   18430:	ldrdeq	ip, [r1], -r0
   18434:	andeq	ip, r1, r0, ror #31
   18438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1843c:	sub	sp, sp, #36	; 0x24
   18440:	ldr	r5, [pc, #2536]	; 18e30 <__assert_fail@plt+0x7c3c>
   18444:	mov	r9, r2
   18448:	cmp	r2, #36	; 0x24
   1844c:	str	r3, [sp, #12]
   18450:	ldr	r2, [r5]
   18454:	ldr	r3, [sp, #72]	; 0x48
   18458:	str	r2, [sp, #28]
   1845c:	str	r3, [sp]
   18460:	bhi	18e1c <__assert_fail@plt+0x7c28>
   18464:	cmp	r1, #0
   18468:	mov	r4, r1
   1846c:	mov	r6, r0
   18470:	addeq	r4, sp, #24
   18474:	bl	110d4 <__errno_location@plt>
   18478:	mov	r3, #0
   1847c:	str	r3, [r0]
   18480:	mov	r7, r0
   18484:	bl	110a4 <__ctype_b_loc@plt>
   18488:	ldrb	r3, [r6]
   1848c:	mov	r1, r6
   18490:	ldr	r0, [r0]
   18494:	b	1849c <__assert_fail@plt+0x72a8>
   18498:	ldrb	r3, [r1, #1]!
   1849c:	lsl	r2, r3, #1
   184a0:	ldrh	r8, [r0, r2]
   184a4:	ands	r8, r8, #8192	; 0x2000
   184a8:	bne	18498 <__assert_fail@plt+0x72a4>
   184ac:	cmp	r3, #45	; 0x2d
   184b0:	beq	1854c <__assert_fail@plt+0x7358>
   184b4:	mov	r2, r9
   184b8:	mov	r3, r8
   184bc:	mov	r1, r4
   184c0:	mov	r0, r6
   184c4:	bl	10f84 <__strtoull_internal@plt>
   184c8:	ldr	r9, [r4]
   184cc:	cmp	r9, r6
   184d0:	mov	sl, r0
   184d4:	mov	fp, r1
   184d8:	beq	18534 <__assert_fail@plt+0x7340>
   184dc:	ldr	r8, [r7]
   184e0:	cmp	r8, #0
   184e4:	bne	18524 <__assert_fail@plt+0x7330>
   184e8:	ldr	r3, [sp]
   184ec:	cmp	r3, #0
   184f0:	beq	18500 <__assert_fail@plt+0x730c>
   184f4:	ldrb	r6, [r9]
   184f8:	cmp	r6, #0
   184fc:	bne	188d4 <__assert_fail@plt+0x76e0>
   18500:	ldr	r3, [sp, #12]
   18504:	strd	sl, [r3]
   18508:	ldr	r2, [sp, #28]
   1850c:	ldr	r3, [r5]
   18510:	mov	r0, r8
   18514:	cmp	r2, r3
   18518:	bne	18e18 <__assert_fail@plt+0x7c24>
   1851c:	add	sp, sp, #36	; 0x24
   18520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18524:	cmp	r8, #34	; 0x22
   18528:	bne	1854c <__assert_fail@plt+0x7358>
   1852c:	mov	r8, #1
   18530:	b	184e8 <__assert_fail@plt+0x72f4>
   18534:	ldr	r0, [sp]
   18538:	cmp	r0, #0
   1853c:	beq	1854c <__assert_fail@plt+0x7358>
   18540:	ldrb	r6, [r6]
   18544:	cmp	r6, #0
   18548:	bne	18554 <__assert_fail@plt+0x7360>
   1854c:	mov	r8, #4
   18550:	b	18508 <__assert_fail@plt+0x7314>
   18554:	mov	r1, r6
   18558:	bl	110c8 <strchr@plt>
   1855c:	cmp	r0, #0
   18560:	movne	sl, #1
   18564:	movne	fp, #0
   18568:	beq	1854c <__assert_fail@plt+0x7358>
   1856c:	sub	r7, r6, #69	; 0x45
   18570:	cmp	r7, #47	; 0x2f
   18574:	ldrls	pc, [pc, r7, lsl #2]
   18578:	b	18738 <__assert_fail@plt+0x7544>
   1857c:	andeq	r8, r1, ip, lsr r6
   18580:	andeq	r8, r1, r8, lsr r7
   18584:	andeq	r8, r1, ip, lsr r6
   18588:	andeq	r8, r1, r8, lsr r7
   1858c:	andeq	r8, r1, r8, lsr r7
   18590:	andeq	r8, r1, r8, lsr r7
   18594:	andeq	r8, r1, ip, lsr r6
   18598:	andeq	r8, r1, r8, lsr r7
   1859c:	andeq	r8, r1, ip, lsr r6
   185a0:	andeq	r8, r1, r8, lsr r7
   185a4:	andeq	r8, r1, r8, lsr r7
   185a8:	andeq	r8, r1, ip, lsr r6
   185ac:	andeq	r8, r1, r8, lsr r7
   185b0:	andeq	r8, r1, r8, lsr r7
   185b4:	andeq	r8, r1, r8, lsr r7
   185b8:	andeq	r8, r1, ip, lsr r6
   185bc:	andeq	r8, r1, r8, lsr r7
   185c0:	andeq	r8, r1, r8, lsr r7
   185c4:	andeq	r8, r1, r8, lsr r7
   185c8:	andeq	r8, r1, r8, lsr r7
   185cc:	andeq	r8, r1, ip, lsr r6
   185d0:	andeq	r8, r1, ip, lsr r6
   185d4:	andeq	r8, r1, r8, lsr r7
   185d8:	andeq	r8, r1, r8, lsr r7
   185dc:	andeq	r8, r1, r8, lsr r7
   185e0:	andeq	r8, r1, r8, lsr r7
   185e4:	andeq	r8, r1, r8, lsr r7
   185e8:	andeq	r8, r1, r8, lsr r7
   185ec:	andeq	r8, r1, r8, lsr r7
   185f0:	andeq	r8, r1, r8, lsr r7
   185f4:	andeq	r8, r1, r8, lsr r7
   185f8:	andeq	r8, r1, r8, lsr r7
   185fc:	andeq	r8, r1, r8, lsr r7
   18600:	andeq	r8, r1, r8, lsr r7
   18604:	andeq	r8, r1, ip, lsr r6
   18608:	andeq	r8, r1, r8, lsr r7
   1860c:	andeq	r8, r1, r8, lsr r7
   18610:	andeq	r8, r1, r8, lsr r7
   18614:	andeq	r8, r1, ip, lsr r6
   18618:	andeq	r8, r1, r8, lsr r7
   1861c:	andeq	r8, r1, ip, lsr r6
   18620:	andeq	r8, r1, r8, lsr r7
   18624:	andeq	r8, r1, r8, lsr r7
   18628:	andeq	r8, r1, r8, lsr r7
   1862c:	andeq	r8, r1, r8, lsr r7
   18630:	andeq	r8, r1, r8, lsr r7
   18634:	andeq	r8, r1, r8, lsr r7
   18638:	andeq	r8, r1, ip, lsr r6
   1863c:	ldr	r0, [sp]
   18640:	mov	r1, #48	; 0x30
   18644:	bl	110c8 <strchr@plt>
   18648:	cmp	r0, #0
   1864c:	beq	18738 <__assert_fail@plt+0x7544>
   18650:	ldrb	r3, [r9, #1]
   18654:	cmp	r3, #68	; 0x44
   18658:	beq	18d18 <__assert_fail@plt+0x7b24>
   1865c:	cmp	r3, #105	; 0x69
   18660:	beq	188f8 <__assert_fail@plt+0x7704>
   18664:	cmp	r3, #66	; 0x42
   18668:	beq	18d18 <__assert_fail@plt+0x7b24>
   1866c:	cmp	r7, #47	; 0x2f
   18670:	ldrls	pc, [pc, r7, lsl #2]
   18674:	b	188e8 <__assert_fail@plt+0x76f4>
   18678:	strdeq	r8, [r1], -ip
   1867c:	andeq	r8, r1, r8, ror #17
   18680:	andeq	r8, r1, ip, ror #25
   18684:	andeq	r8, r1, r8, ror #17
   18688:	andeq	r8, r1, r8, ror #17
   1868c:	andeq	r8, r1, r8, ror #17
   18690:	ldrdeq	r8, [r1], -ip
   18694:	andeq	r8, r1, r8, ror #17
   18698:	andeq	r8, r1, ip, asr #25
   1869c:	andeq	r8, r1, r8, ror #17
   186a0:	andeq	r8, r1, r8, ror #17
   186a4:			; <UNDEFINED> instruction: 0x00018cbc
   186a8:	andeq	r8, r1, r8, ror #17
   186ac:	andeq	r8, r1, r8, ror #17
   186b0:	andeq	r8, r1, r8, ror #17
   186b4:	andeq	r8, r1, ip, lsr #25
   186b8:	andeq	r8, r1, r8, ror #17
   186bc:	andeq	r8, r1, r8, ror #17
   186c0:	andeq	r8, r1, r8, ror #17
   186c4:	andeq	r8, r1, r8, ror #17
   186c8:	muleq	r1, ip, ip
   186cc:	andeq	r8, r1, ip, lsl #25
   186d0:	andeq	r8, r1, r8, ror #17
   186d4:	andeq	r8, r1, r8, ror #17
   186d8:	andeq	r8, r1, r8, ror #17
   186dc:	andeq	r8, r1, r8, ror #17
   186e0:	andeq	r8, r1, r8, ror #17
   186e4:	andeq	r8, r1, r8, ror #17
   186e8:	andeq	r8, r1, r8, ror #17
   186ec:	andeq	r8, r1, r4, lsr r9
   186f0:	andeq	r8, r1, r4, lsl #25
   186f4:	andeq	r8, r1, r8, ror #17
   186f8:	andeq	r8, r1, r8, ror #17
   186fc:	andeq	r8, r1, r8, ror #17
   18700:	andeq	r8, r1, ip, ror #25
   18704:	andeq	r8, r1, r8, ror #17
   18708:	andeq	r8, r1, r8, ror #17
   1870c:	andeq	r8, r1, r8, ror #17
   18710:	ldrdeq	r8, [r1], -ip
   18714:	andeq	r8, r1, r8, ror #17
   18718:	andeq	r8, r1, ip, asr #25
   1871c:	andeq	r8, r1, r8, ror #17
   18720:	andeq	r8, r1, r8, ror #17
   18724:	andeq	r8, r1, r8, ror #17
   18728:	andeq	r8, r1, r8, ror #17
   1872c:	andeq	r8, r1, r8, ror #17
   18730:	andeq	r8, r1, r8, ror #17
   18734:	andeq	r8, r1, ip, lsr #25
   18738:	mov	lr, #1
   1873c:	mov	r0, #1024	; 0x400
   18740:	sub	r6, r6, #66	; 0x42
   18744:	cmp	r6, #53	; 0x35
   18748:	ldrls	pc, [pc, r6, lsl #2]
   1874c:	b	188e8 <__assert_fail@plt+0x76f4>
   18750:	andeq	r8, r1, ip, asr r9
   18754:	andeq	r8, r1, r8, ror #17
   18758:	andeq	r8, r1, r8, ror #17
   1875c:	andeq	r8, r1, r0, lsl #19
   18760:	andeq	r8, r1, r8, ror #17
   18764:	andeq	r8, r1, r8, lsr #16
   18768:	andeq	r8, r1, r8, ror #17
   1876c:	andeq	r8, r1, r8, ror #17
   18770:	andeq	r8, r1, r8, ror #17
   18774:	andeq	r8, r1, r8, ror sl
   18778:	andeq	r8, r1, r8, ror #17
   1877c:	andeq	r8, r1, ip, lsl ip
   18780:	andeq	r8, r1, r8, ror #17
   18784:	andeq	r8, r1, r8, ror #17
   18788:	andeq	r8, r1, r0, lsr #23
   1878c:	andeq	r8, r1, r8, ror #17
   18790:	andeq	r8, r1, r8, ror #17
   18794:	andeq	r8, r1, r8, ror #17
   18798:	andeq	r8, r1, r4, lsr #22
   1879c:	andeq	r8, r1, r8, ror #17
   187a0:	andeq	r8, r1, r8, ror #17
   187a4:	andeq	r8, r1, r8, ror #17
   187a8:	andeq	r8, r1, r8, ror #17
   187ac:	andeq	r8, r1, r8, lsr #21
   187b0:	strdeq	r8, [r1], -ip
   187b4:	andeq	r8, r1, r8, ror #17
   187b8:	andeq	r8, r1, r8, ror #17
   187bc:	andeq	r8, r1, r8, ror #17
   187c0:	andeq	r8, r1, r8, ror #17
   187c4:	andeq	r8, r1, r8, ror #17
   187c8:	andeq	r8, r1, r8, ror #17
   187cc:	andeq	r8, r1, r8, ror #17
   187d0:	andeq	r8, r1, r8, lsr r9
   187d4:			; <UNDEFINED> instruction: 0x000188bc
   187d8:	andeq	r8, r1, r8, ror #17
   187dc:	andeq	r8, r1, r8, ror #17
   187e0:	andeq	r8, r1, r8, ror #17
   187e4:	andeq	r8, r1, r8, lsr #16
   187e8:	andeq	r8, r1, r8, ror #17
   187ec:	andeq	r8, r1, r8, ror #17
   187f0:	andeq	r8, r1, r8, ror #17
   187f4:	andeq	r8, r1, r8, ror sl
   187f8:	andeq	r8, r1, r8, ror #17
   187fc:	andeq	r8, r1, ip, lsl ip
   18800:	andeq	r8, r1, r8, ror #17
   18804:	andeq	r8, r1, r8, ror #17
   18808:	andeq	r8, r1, r8, ror #17
   1880c:	andeq	r8, r1, r8, ror #17
   18810:	andeq	r8, r1, r8, ror #17
   18814:	andeq	r8, r1, r8, ror #17
   18818:	andeq	r8, r1, r4, lsr #22
   1881c:	andeq	r8, r1, r8, ror #17
   18820:	andeq	r8, r1, r8, ror #17
   18824:	andeq	r8, r1, r0, lsl r9
   18828:	asr	r1, r0, #31
   1882c:	mov	r2, #0
   18830:	mov	r3, #0
   18834:	cmp	fp, #0
   18838:	strd	r2, [sp]
   1883c:	bne	18d5c <__assert_fail@plt+0x7b68>
   18840:	ldrd	r2, [sp]
   18844:	orrs	r3, r2, r3
   18848:	bne	18d4c <__assert_fail@plt+0x7b58>
   1884c:	mul	r3, sl, r1
   18850:	umull	r6, r7, sl, r0
   18854:	mla	r3, r0, fp, r3
   18858:	ldrd	sl, [sp]
   1885c:	add	ip, r3, r7
   18860:	cmp	ip, #0
   18864:	mov	r7, ip
   18868:	bne	18df0 <__assert_fail@plt+0x7bfc>
   1886c:	orrs	r3, sl, fp
   18870:	bne	18d4c <__assert_fail@plt+0x7b58>
   18874:	umull	r2, r3, r6, r0
   18878:	mul	ip, r6, r1
   1887c:	strd	r2, [sp]
   18880:	mla	r3, r0, r7, ip
   18884:	ldr	r2, [sp, #4]
   18888:	add	ip, r3, r2
   1888c:	cmp	ip, #0
   18890:	str	ip, [sp, #4]
   18894:	bne	18dcc <__assert_fail@plt+0x7bd8>
   18898:	orrs	r3, sl, fp
   1889c:	bne	18d4c <__assert_fail@plt+0x7b58>
   188a0:	ldrd	r6, [sp]
   188a4:	mov	r3, #0
   188a8:	mul	r2, r6, r1
   188ac:	umull	sl, fp, r6, r0
   188b0:	mla	r2, r0, r7, r2
   188b4:	add	fp, r2, fp
   188b8:	orr	r8, r8, r3
   188bc:	add	r3, r9, lr
   188c0:	str	r3, [r4]
   188c4:	ldrb	r3, [r9, lr]
   188c8:	cmp	r3, #0
   188cc:	orrne	r8, r8, #2
   188d0:	b	18500 <__assert_fail@plt+0x730c>
   188d4:	mov	r1, r6
   188d8:	ldr	r0, [sp]
   188dc:	bl	110c8 <strchr@plt>
   188e0:	cmp	r0, #0
   188e4:	bne	1856c <__assert_fail@plt+0x7378>
   188e8:	ldr	r3, [sp, #12]
   188ec:	orr	r8, r8, #2
   188f0:	strd	sl, [r3]
   188f4:	b	18508 <__assert_fail@plt+0x7314>
   188f8:	ldrb	r3, [r9, #2]
   188fc:	mov	r0, #1024	; 0x400
   18900:	cmp	r3, #66	; 0x42
   18904:	movne	lr, #1
   18908:	moveq	lr, #3
   1890c:	b	18740 <__assert_fail@plt+0x754c>
   18910:	lsr	r3, fp, #31
   18914:	adds	sl, sl, sl
   18918:	adc	fp, fp, fp
   1891c:	cmp	r3, #0
   18920:	beq	188bc <__assert_fail@plt+0x76c8>
   18924:	mov	r8, #1
   18928:	mvn	sl, #0
   1892c:	mvn	fp, #0
   18930:	b	188bc <__assert_fail@plt+0x76c8>
   18934:	mov	lr, #1
   18938:	lsr	r3, fp, #23
   1893c:	cmp	r3, #0
   18940:	bne	18924 <__assert_fail@plt+0x7730>
   18944:	lsl	r3, fp, #9
   18948:	orr	r3, r3, sl, lsr #23
   1894c:	lsl	r2, sl, #9
   18950:	mov	sl, r2
   18954:	mov	fp, r3
   18958:	b	188bc <__assert_fail@plt+0x76c8>
   1895c:	lsr	r3, fp, #22
   18960:	cmp	r3, #0
   18964:	bne	18924 <__assert_fail@plt+0x7730>
   18968:	lsl	r3, fp, #10
   1896c:	orr	r3, r3, sl, lsr #22
   18970:	lsl	r2, sl, #10
   18974:	mov	sl, r2
   18978:	mov	fp, r3
   1897c:	b	188bc <__assert_fail@plt+0x76c8>
   18980:	mov	r6, r0
   18984:	asr	r7, r0, #31
   18988:	mov	r3, #0
   1898c:	mov	ip, #6
   18990:	str	r3, [sp]
   18994:	strd	r4, [sp, #16]
   18998:	b	189c8 <__assert_fail@plt+0x77d4>
   1899c:	orrs	r3, r2, r3
   189a0:	movne	r3, #1
   189a4:	muleq	r3, sl, r7
   189a8:	strne	r3, [sp]
   189ac:	mlaeq	r3, r6, fp, r3
   189b0:	umulleq	sl, fp, sl, r6
   189b4:	mvnne	sl, #0
   189b8:	addeq	fp, r3, fp
   189bc:	mvnne	fp, #0
   189c0:	subs	ip, ip, #1
   189c4:	beq	18d0c <__assert_fail@plt+0x7b18>
   189c8:	cmp	fp, #0
   189cc:	mov	r2, #0
   189d0:	mov	r3, #0
   189d4:	beq	1899c <__assert_fail@plt+0x77a8>
   189d8:	umull	r0, r1, sl, r6
   189dc:	mov	r5, #0
   189e0:	mov	r0, r1
   189e4:	mov	r1, r5
   189e8:	umlal	r0, r1, fp, r6
   189ec:	cmp	r1, r5
   189f0:	movne	r2, #1
   189f4:	movne	r3, #0
   189f8:	b	1899c <__assert_fail@plt+0x77a8>
   189fc:	mov	r6, r0
   18a00:	asr	r7, r0, #31
   18a04:	mov	r3, #0
   18a08:	mov	ip, #7
   18a0c:	str	r3, [sp]
   18a10:	strd	r4, [sp, #16]
   18a14:	b	18a44 <__assert_fail@plt+0x7850>
   18a18:	orrs	r3, r2, r3
   18a1c:	movne	r3, #1
   18a20:	muleq	r3, sl, r7
   18a24:	strne	r3, [sp]
   18a28:	mlaeq	r3, r6, fp, r3
   18a2c:	umulleq	sl, fp, sl, r6
   18a30:	mvnne	sl, #0
   18a34:	addeq	fp, r3, fp
   18a38:	mvnne	fp, #0
   18a3c:	subs	ip, ip, #1
   18a40:	beq	18d0c <__assert_fail@plt+0x7b18>
   18a44:	cmp	fp, #0
   18a48:	mov	r2, #0
   18a4c:	mov	r3, #0
   18a50:	beq	18a18 <__assert_fail@plt+0x7824>
   18a54:	umull	r0, r1, sl, r6
   18a58:	mov	r5, #0
   18a5c:	mov	r0, r1
   18a60:	mov	r1, r5
   18a64:	umlal	r0, r1, fp, r6
   18a68:	cmp	r1, r5
   18a6c:	movne	r2, #1
   18a70:	movne	r3, #0
   18a74:	b	18a18 <__assert_fail@plt+0x7824>
   18a78:	asr	r1, r0, #31
   18a7c:	cmp	fp, #0
   18a80:	mov	r6, #0
   18a84:	mov	r7, #0
   18a88:	bne	18d24 <__assert_fail@plt+0x7b30>
   18a8c:	orrs	r3, r6, r7
   18a90:	bne	18924 <__assert_fail@plt+0x7730>
   18a94:	mul	r3, sl, r1
   18a98:	mla	r3, r0, fp, r3
   18a9c:	umull	sl, fp, sl, r0
   18aa0:	add	fp, r3, fp
   18aa4:	b	188bc <__assert_fail@plt+0x76c8>
   18aa8:	mov	r6, r0
   18aac:	asr	r7, r0, #31
   18ab0:	mov	r3, #0
   18ab4:	mov	ip, #8
   18ab8:	str	r3, [sp]
   18abc:	strd	r4, [sp, #16]
   18ac0:	b	18af0 <__assert_fail@plt+0x78fc>
   18ac4:	orrs	r3, r2, r3
   18ac8:	movne	r3, #1
   18acc:	muleq	r3, sl, r7
   18ad0:	strne	r3, [sp]
   18ad4:	mlaeq	r3, r6, fp, r3
   18ad8:	umulleq	sl, fp, sl, r6
   18adc:	mvnne	sl, #0
   18ae0:	addeq	fp, r3, fp
   18ae4:	mvnne	fp, #0
   18ae8:	subs	ip, ip, #1
   18aec:	beq	18d0c <__assert_fail@plt+0x7b18>
   18af0:	cmp	fp, #0
   18af4:	mov	r2, #0
   18af8:	mov	r3, #0
   18afc:	beq	18ac4 <__assert_fail@plt+0x78d0>
   18b00:	umull	r0, r1, sl, r6
   18b04:	mov	r5, #0
   18b08:	mov	r0, r1
   18b0c:	mov	r1, r5
   18b10:	umlal	r0, r1, fp, r6
   18b14:	cmp	r1, r5
   18b18:	movne	r2, #1
   18b1c:	movne	r3, #0
   18b20:	b	18ac4 <__assert_fail@plt+0x78d0>
   18b24:	mov	r6, r0
   18b28:	asr	r7, r0, #31
   18b2c:	mov	r3, #0
   18b30:	mov	ip, #4
   18b34:	str	r3, [sp]
   18b38:	strd	r4, [sp, #16]
   18b3c:	b	18b6c <__assert_fail@plt+0x7978>
   18b40:	orrs	r3, r2, r3
   18b44:	movne	r3, #1
   18b48:	muleq	r3, sl, r7
   18b4c:	strne	r3, [sp]
   18b50:	mlaeq	r3, r6, fp, r3
   18b54:	umulleq	sl, fp, sl, r6
   18b58:	mvnne	sl, #0
   18b5c:	addeq	fp, r3, fp
   18b60:	mvnne	fp, #0
   18b64:	subs	ip, ip, #1
   18b68:	beq	18d0c <__assert_fail@plt+0x7b18>
   18b6c:	cmp	fp, #0
   18b70:	mov	r2, #0
   18b74:	mov	r3, #0
   18b78:	beq	18b40 <__assert_fail@plt+0x794c>
   18b7c:	umull	r0, r1, sl, r6
   18b80:	mov	r5, #0
   18b84:	mov	r0, r1
   18b88:	mov	r1, r5
   18b8c:	umlal	r0, r1, fp, r6
   18b90:	cmp	r1, r5
   18b94:	movne	r2, #1
   18b98:	movne	r3, #0
   18b9c:	b	18b40 <__assert_fail@plt+0x794c>
   18ba0:	mov	r6, r0
   18ba4:	asr	r7, r0, #31
   18ba8:	mov	r3, #0
   18bac:	mov	ip, #5
   18bb0:	str	r3, [sp]
   18bb4:	strd	r4, [sp, #16]
   18bb8:	b	18be8 <__assert_fail@plt+0x79f4>
   18bbc:	orrs	r3, r2, r3
   18bc0:	movne	r3, #1
   18bc4:	muleq	r3, sl, r7
   18bc8:	strne	r3, [sp]
   18bcc:	mlaeq	r3, r6, fp, r3
   18bd0:	umulleq	sl, fp, sl, r6
   18bd4:	mvnne	sl, #0
   18bd8:	addeq	fp, r3, fp
   18bdc:	mvnne	fp, #0
   18be0:	subs	ip, ip, #1
   18be4:	beq	18d0c <__assert_fail@plt+0x7b18>
   18be8:	cmp	fp, #0
   18bec:	mov	r2, #0
   18bf0:	mov	r3, #0
   18bf4:	beq	18bbc <__assert_fail@plt+0x79c8>
   18bf8:	umull	r0, r1, sl, r6
   18bfc:	mov	r5, #0
   18c00:	mov	r0, r1
   18c04:	mov	r1, r5
   18c08:	umlal	r0, r1, fp, r6
   18c0c:	cmp	r1, r5
   18c10:	movne	r2, #1
   18c14:	movne	r3, #0
   18c18:	b	18bbc <__assert_fail@plt+0x79c8>
   18c1c:	asr	r1, r0, #31
   18c20:	cmp	fp, #0
   18c24:	mov	r6, #0
   18c28:	mov	r7, #0
   18c2c:	bne	18d80 <__assert_fail@plt+0x7b8c>
   18c30:	orrs	r3, r6, r7
   18c34:	bne	18924 <__assert_fail@plt+0x7730>
   18c38:	umull	r2, r3, sl, r0
   18c3c:	mul	ip, sl, r1
   18c40:	strd	r2, [sp]
   18c44:	mla	r3, r0, fp, ip
   18c48:	ldr	r2, [sp, #4]
   18c4c:	mov	sl, r6
   18c50:	add	ip, r3, r2
   18c54:	cmp	ip, #0
   18c58:	mov	fp, r7
   18c5c:	str	ip, [sp, #4]
   18c60:	bne	18da8 <__assert_fail@plt+0x7bb4>
   18c64:	orrs	r3, sl, fp
   18c68:	bne	18924 <__assert_fail@plt+0x7730>
   18c6c:	ldrd	r6, [sp]
   18c70:	mul	r3, r6, r1
   18c74:	umull	sl, fp, r6, r0
   18c78:	mla	r0, r0, r7, r3
   18c7c:	add	fp, r0, fp
   18c80:	b	188bc <__assert_fail@plt+0x76c8>
   18c84:	mov	lr, #1
   18c88:	b	188bc <__assert_fail@plt+0x76c8>
   18c8c:	mov	lr, #1
   18c90:	mov	r6, #1024	; 0x400
   18c94:	mov	r7, #0
   18c98:	b	18a04 <__assert_fail@plt+0x7810>
   18c9c:	mov	lr, #1
   18ca0:	mov	r6, #1024	; 0x400
   18ca4:	mov	r7, #0
   18ca8:	b	18ab0 <__assert_fail@plt+0x78bc>
   18cac:	mov	lr, #1
   18cb0:	mov	r6, #1024	; 0x400
   18cb4:	mov	r7, #0
   18cb8:	b	18b2c <__assert_fail@plt+0x7938>
   18cbc:	mov	lr, #1
   18cc0:	mov	r6, #1024	; 0x400
   18cc4:	mov	r7, #0
   18cc8:	b	18ba8 <__assert_fail@plt+0x79b4>
   18ccc:	mov	lr, #1
   18cd0:	mov	r0, #1024	; 0x400
   18cd4:	mov	r1, #0
   18cd8:	b	18c20 <__assert_fail@plt+0x7a2c>
   18cdc:	mov	lr, #1
   18ce0:	mov	r0, #1024	; 0x400
   18ce4:	mov	r1, #0
   18ce8:	b	18a7c <__assert_fail@plt+0x7888>
   18cec:	mov	lr, #1
   18cf0:	mov	r0, #1024	; 0x400
   18cf4:	mov	r1, #0
   18cf8:	b	1882c <__assert_fail@plt+0x7638>
   18cfc:	mov	lr, #1
   18d00:	mov	r6, #1024	; 0x400
   18d04:	mov	r7, #0
   18d08:	b	18988 <__assert_fail@plt+0x7794>
   18d0c:	ldrd	r4, [sp, #16]
   18d10:	ldr	r3, [sp]
   18d14:	b	188b8 <__assert_fail@plt+0x76c4>
   18d18:	mov	lr, #2
   18d1c:	mov	r0, #1000	; 0x3e8
   18d20:	b	18740 <__assert_fail@plt+0x754c>
   18d24:	umull	r2, r3, sl, r0
   18d28:	str	r3, [sp]
   18d2c:	mov	r3, #0
   18d30:	str	r3, [sp, #4]
   18d34:	ldrd	r2, [sp]
   18d38:	umlal	r2, r3, fp, r0
   18d3c:	cmp	r3, #0
   18d40:	movne	r6, #1
   18d44:	movne	r7, #0
   18d48:	b	18a8c <__assert_fail@plt+0x7898>
   18d4c:	mov	r3, #1
   18d50:	mvn	sl, #0
   18d54:	mvn	fp, #0
   18d58:	b	188b8 <__assert_fail@plt+0x76c4>
   18d5c:	umull	r2, r3, sl, r0
   18d60:	mov	r7, #0
   18d64:	mov	r6, r3
   18d68:	umlal	r6, r7, fp, r0
   18d6c:	cmp	r7, #0
   18d70:	movne	r2, #1
   18d74:	movne	r3, #0
   18d78:	strdne	r2, [sp]
   18d7c:	b	18840 <__assert_fail@plt+0x764c>
   18d80:	umull	r2, r3, sl, r0
   18d84:	str	r3, [sp]
   18d88:	mov	r3, #0
   18d8c:	str	r3, [sp, #4]
   18d90:	ldrd	r2, [sp]
   18d94:	umlal	r2, r3, fp, r0
   18d98:	cmp	r3, #0
   18d9c:	movne	r6, #1
   18da0:	movne	r7, #0
   18da4:	b	18c30 <__assert_fail@plt+0x7a3c>
   18da8:	ldr	r3, [sp]
   18dac:	mov	r7, #0
   18db0:	umull	r2, r3, r3, r0
   18db4:	mov	r6, r3
   18db8:	umlal	r6, r7, ip, r0
   18dbc:	cmp	r7, #0
   18dc0:	movne	sl, #1
   18dc4:	movne	fp, #0
   18dc8:	b	18c64 <__assert_fail@plt+0x7a70>
   18dcc:	ldr	r3, [sp]
   18dd0:	mov	r7, #0
   18dd4:	umull	r2, r3, r3, r0
   18dd8:	mov	r6, r3
   18ddc:	umlal	r6, r7, ip, r0
   18de0:	cmp	r7, #0
   18de4:	movne	sl, #1
   18de8:	movne	fp, #0
   18dec:	b	18898 <__assert_fail@plt+0x76a4>
   18df0:	umull	r2, r3, r6, r0
   18df4:	str	r3, [sp]
   18df8:	mov	r3, #0
   18dfc:	str	r3, [sp, #4]
   18e00:	ldrd	r2, [sp]
   18e04:	umlal	r2, r3, ip, r0
   18e08:	cmp	r3, #0
   18e0c:	movne	sl, #1
   18e10:	movne	fp, #0
   18e14:	b	1886c <__assert_fail@plt+0x7678>
   18e18:	bl	10fcc <__stack_chk_fail@plt>
   18e1c:	ldr	r3, [pc, #16]	; 18e34 <__assert_fail@plt+0x7c40>
   18e20:	mov	r2, #96	; 0x60
   18e24:	ldr	r1, [pc, #12]	; 18e38 <__assert_fail@plt+0x7c44>
   18e28:	ldr	r0, [pc, #12]	; 18e3c <__assert_fail@plt+0x7c48>
   18e2c:	bl	111f4 <__assert_fail@plt>
   18e30:	andeq	sp, r2, r8, lsl #30
   18e34:	andeq	sp, r1, r8, asr #32
   18e38:	andeq	sp, r1, r4, asr r0
   18e3c:	andeq	sp, r1, r4, rrx
   18e40:	push	{r4, r5, lr}
   18e44:	sub	sp, sp, #12
   18e48:	mov	r4, r0
   18e4c:	bl	11134 <fileno@plt>
   18e50:	cmp	r0, #0
   18e54:	mov	r0, r4
   18e58:	blt	18ed4 <__assert_fail@plt+0x7ce0>
   18e5c:	bl	11080 <__freading@plt>
   18e60:	cmp	r0, #0
   18e64:	bne	18ea0 <__assert_fail@plt+0x7cac>
   18e68:	mov	r0, r4
   18e6c:	bl	18ee0 <__assert_fail@plt+0x7cec>
   18e70:	cmp	r0, #0
   18e74:	beq	18ed0 <__assert_fail@plt+0x7cdc>
   18e78:	bl	110d4 <__errno_location@plt>
   18e7c:	mov	r5, r0
   18e80:	mov	r0, r4
   18e84:	ldr	r4, [r5]
   18e88:	bl	1114c <fclose@plt>
   18e8c:	cmp	r4, #0
   18e90:	mvnne	r0, #0
   18e94:	strne	r4, [r5]
   18e98:	add	sp, sp, #12
   18e9c:	pop	{r4, r5, pc}
   18ea0:	mov	r0, r4
   18ea4:	bl	11134 <fileno@plt>
   18ea8:	mov	r3, #1
   18eac:	str	r3, [sp]
   18eb0:	mov	r2, #0
   18eb4:	mov	r3, #0
   18eb8:	bl	11014 <lseek64@plt>
   18ebc:	mvn	r3, #0
   18ec0:	mvn	r2, #0
   18ec4:	cmp	r1, r3
   18ec8:	cmpeq	r0, r2
   18ecc:	bne	18e68 <__assert_fail@plt+0x7c74>
   18ed0:	mov	r0, r4
   18ed4:	add	sp, sp, #12
   18ed8:	pop	{r4, r5, lr}
   18edc:	b	1114c <fclose@plt>
   18ee0:	push	{r4, lr}
   18ee4:	subs	r4, r0, #0
   18ee8:	sub	sp, sp, #8
   18eec:	beq	18f08 <__assert_fail@plt+0x7d14>
   18ef0:	bl	11080 <__freading@plt>
   18ef4:	cmp	r0, #0
   18ef8:	beq	18f08 <__assert_fail@plt+0x7d14>
   18efc:	ldr	r3, [r4]
   18f00:	tst	r3, #256	; 0x100
   18f04:	bne	18f18 <__assert_fail@plt+0x7d24>
   18f08:	mov	r0, r4
   18f0c:	add	sp, sp, #8
   18f10:	pop	{r4, lr}
   18f14:	b	10f48 <fflush@plt>
   18f18:	mov	r3, #1
   18f1c:	str	r3, [sp]
   18f20:	mov	r2, #0
   18f24:	mov	r3, #0
   18f28:	mov	r0, r4
   18f2c:	bl	18f40 <__assert_fail@plt+0x7d4c>
   18f30:	mov	r0, r4
   18f34:	add	sp, sp, #8
   18f38:	pop	{r4, lr}
   18f3c:	b	10f48 <fflush@plt>
   18f40:	push	{r4, r5, r6, r7, r8, lr}
   18f44:	sub	sp, sp, #8
   18f48:	ldmib	r0, {ip, lr}
   18f4c:	mov	r4, r0
   18f50:	ldr	r5, [sp, #32]
   18f54:	cmp	lr, ip
   18f58:	beq	18f70 <__assert_fail@plt+0x7d7c>
   18f5c:	str	r5, [sp, #32]
   18f60:	mov	r0, r4
   18f64:	add	sp, sp, #8
   18f68:	pop	{r4, r5, r6, r7, r8, lr}
   18f6c:	b	11158 <fseeko64@plt>
   18f70:	ldr	lr, [r0, #20]
   18f74:	ldr	ip, [r0, #16]
   18f78:	cmp	lr, ip
   18f7c:	bne	18f5c <__assert_fail@plt+0x7d68>
   18f80:	ldr	r8, [r0, #36]	; 0x24
   18f84:	cmp	r8, #0
   18f88:	bne	18f5c <__assert_fail@plt+0x7d68>
   18f8c:	mov	r6, r2
   18f90:	mov	r7, r3
   18f94:	bl	11134 <fileno@plt>
   18f98:	mov	r2, r6
   18f9c:	mov	r3, r7
   18fa0:	str	r5, [sp]
   18fa4:	bl	11014 <lseek64@plt>
   18fa8:	mvn	r3, #0
   18fac:	mvn	r2, #0
   18fb0:	cmp	r1, r3
   18fb4:	cmpeq	r0, r2
   18fb8:	beq	18fd8 <__assert_fail@plt+0x7de4>
   18fbc:	ldr	r3, [r4]
   18fc0:	strd	r0, [r4, #80]	; 0x50
   18fc4:	mov	r0, r8
   18fc8:	bic	r3, r3, #16
   18fcc:	str	r3, [r4]
   18fd0:	add	sp, sp, #8
   18fd4:	pop	{r4, r5, r6, r7, r8, pc}
   18fd8:	mvn	r0, #0
   18fdc:	b	18fd0 <__assert_fail@plt+0x7ddc>
   18fe0:	push	{r4, r5, r6, r7, r8, lr}
   18fe4:	subs	r7, r0, #0
   18fe8:	ldr	r5, [pc, #108]	; 1905c <__assert_fail@plt+0x7e68>
   18fec:	sub	sp, sp, #8
   18ff0:	mov	r8, r1
   18ff4:	ldr	r1, [r5]
   18ff8:	moveq	r7, sp
   18ffc:	str	r1, [sp, #4]
   19000:	mov	r0, r7
   19004:	mov	r1, r8
   19008:	mov	r6, r2
   1900c:	bl	11038 <mbrtowc@plt>
   19010:	cmp	r6, #0
   19014:	cmnne	r0, #3
   19018:	mov	r4, r0
   1901c:	bhi	1903c <__assert_fail@plt+0x7e48>
   19020:	ldr	r2, [sp, #4]
   19024:	ldr	r3, [r5]
   19028:	mov	r0, r4
   1902c:	cmp	r2, r3
   19030:	bne	19058 <__assert_fail@plt+0x7e64>
   19034:	add	sp, sp, #8
   19038:	pop	{r4, r5, r6, r7, r8, pc}
   1903c:	mov	r0, #0
   19040:	bl	191d0 <__assert_fail@plt+0x7fdc>
   19044:	cmp	r0, #0
   19048:	moveq	r4, #1
   1904c:	ldrbeq	r3, [r8]
   19050:	streq	r3, [r7]
   19054:	b	19020 <__assert_fail@plt+0x7e2c>
   19058:	bl	10fcc <__stack_chk_fail@plt>
   1905c:	andeq	sp, r2, r8, lsl #30
   19060:	push	{r4, r5, r6, r7, r8, lr}
   19064:	sub	sp, sp, #2000	; 0x7d0
   19068:	ldr	r5, [pc, #208]	; 19140 <__assert_fail@plt+0x7f4c>
   1906c:	sub	sp, sp, #8
   19070:	add	r6, sp, #4
   19074:	ldr	lr, [r5]
   19078:	mov	r3, r2
   1907c:	mov	ip, #2000	; 0x7d0
   19080:	mov	r2, r1
   19084:	mov	r8, r0
   19088:	mov	r1, sp
   1908c:	mov	r0, r6
   19090:	str	lr, [sp, #2004]	; 0x7d4
   19094:	str	ip, [sp]
   19098:	bl	19260 <__assert_fail@plt+0x806c>
   1909c:	ldr	r4, [sp]
   190a0:	subs	r7, r0, #0
   190a4:	beq	1912c <__assert_fail@plt+0x7f38>
   190a8:	mov	r3, r8
   190ac:	mov	r2, r4
   190b0:	mov	r1, #1
   190b4:	bl	11008 <fwrite@plt>
   190b8:	cmp	r0, r4
   190bc:	bcc	190f4 <__assert_fail@plt+0x7f00>
   190c0:	cmp	r7, r6
   190c4:	beq	190d0 <__assert_fail@plt+0x7edc>
   190c8:	mov	r0, r7
   190cc:	bl	10f54 <free@plt>
   190d0:	subs	r0, r4, #0
   190d4:	blt	19120 <__assert_fail@plt+0x7f2c>
   190d8:	ldr	r2, [sp, #2004]	; 0x7d4
   190dc:	ldr	r3, [r5]
   190e0:	cmp	r2, r3
   190e4:	bne	1913c <__assert_fail@plt+0x7f48>
   190e8:	add	sp, sp, #2000	; 0x7d0
   190ec:	add	sp, sp, #8
   190f0:	pop	{r4, r5, r6, r7, r8, pc}
   190f4:	cmp	r7, r6
   190f8:	mvneq	r0, #0
   190fc:	beq	190d8 <__assert_fail@plt+0x7ee4>
   19100:	bl	110d4 <__errno_location@plt>
   19104:	mov	r4, r0
   19108:	mov	r0, r7
   1910c:	ldr	r6, [r4]
   19110:	bl	10f54 <free@plt>
   19114:	str	r6, [r4]
   19118:	mvn	r0, #0
   1911c:	b	190d8 <__assert_fail@plt+0x7ee4>
   19120:	bl	110d4 <__errno_location@plt>
   19124:	mov	r3, #75	; 0x4b
   19128:	str	r3, [r0]
   1912c:	mov	r0, r8
   19130:	bl	19250 <__assert_fail@plt+0x805c>
   19134:	mvn	r0, #0
   19138:	b	190d8 <__assert_fail@plt+0x7ee4>
   1913c:	bl	10fcc <__stack_chk_fail@plt>
   19140:	andeq	sp, r2, r8, lsl #30
   19144:	ldr	r3, [pc, #12]	; 19158 <__assert_fail@plt+0x7f64>
   19148:	mov	r2, r1
   1914c:	mov	r1, r0
   19150:	ldr	r0, [r3]
   19154:	b	19060 <__assert_fail@plt+0x7e6c>
   19158:	andeq	lr, r2, ip, ror r1
   1915c:	push	{r4, r5, r6, lr}
   19160:	mov	r4, r0
   19164:	bl	1102c <__fpending@plt>
   19168:	ldr	r5, [r4]
   1916c:	and	r5, r5, #32
   19170:	mov	r6, r0
   19174:	mov	r0, r4
   19178:	bl	18e40 <__assert_fail@plt+0x7c4c>
   1917c:	cmp	r5, #0
   19180:	mov	r4, r0
   19184:	bne	191b0 <__assert_fail@plt+0x7fbc>
   19188:	cmp	r0, #0
   1918c:	beq	191a8 <__assert_fail@plt+0x7fb4>
   19190:	cmp	r6, #0
   19194:	bne	191c8 <__assert_fail@plt+0x7fd4>
   19198:	bl	110d4 <__errno_location@plt>
   1919c:	ldr	r4, [r0]
   191a0:	subs	r4, r4, #9
   191a4:	mvnne	r4, #0
   191a8:	mov	r0, r4
   191ac:	pop	{r4, r5, r6, pc}
   191b0:	cmp	r0, #0
   191b4:	bne	191c8 <__assert_fail@plt+0x7fd4>
   191b8:	bl	110d4 <__errno_location@plt>
   191bc:	str	r4, [r0]
   191c0:	mvn	r4, #0
   191c4:	b	191a8 <__assert_fail@plt+0x7fb4>
   191c8:	mvn	r4, #0
   191cc:	b	191a8 <__assert_fail@plt+0x7fb4>
   191d0:	push	{r4, lr}
   191d4:	mov	r1, #0
   191d8:	bl	11170 <setlocale@plt>
   191dc:	subs	r4, r0, #0
   191e0:	beq	1920c <__assert_fail@plt+0x8018>
   191e4:	ldr	r1, [pc, #40]	; 19214 <__assert_fail@plt+0x8020>
   191e8:	bl	10f3c <strcmp@plt>
   191ec:	cmp	r0, #0
   191f0:	popeq	{r4, pc}
   191f4:	mov	r0, r4
   191f8:	ldr	r1, [pc, #24]	; 19218 <__assert_fail@plt+0x8024>
   191fc:	bl	10f3c <strcmp@plt>
   19200:	adds	r0, r0, #0
   19204:	movne	r0, #1
   19208:	pop	{r4, pc}
   1920c:	mov	r0, #1
   19210:	pop	{r4, pc}
   19214:	andeq	sp, r1, ip, lsl #1
   19218:	muleq	r1, r0, r0
   1921c:	push	{r4, lr}
   19220:	mov	r0, #14
   19224:	bl	11188 <nl_langinfo@plt>
   19228:	cmp	r0, #0
   1922c:	beq	19244 <__assert_fail@plt+0x8050>
   19230:	ldrb	r2, [r0]
   19234:	ldr	r3, [pc, #16]	; 1924c <__assert_fail@plt+0x8058>
   19238:	cmp	r2, #0
   1923c:	moveq	r0, r3
   19240:	pop	{r4, pc}
   19244:	ldr	r0, [pc]	; 1924c <__assert_fail@plt+0x8058>
   19248:	pop	{r4, pc}
   1924c:	muleq	r1, r8, r0
   19250:	ldr	r3, [r0]
   19254:	orr	r3, r3, #32
   19258:	str	r3, [r0]
   1925c:	bx	lr
   19260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19264:	mov	r9, r2
   19268:	ldr	r2, [pc, #3592]	; 1a078 <__assert_fail@plt+0x8e84>
   1926c:	add	fp, sp, #32
   19270:	sub	sp, sp, #540	; 0x21c
   19274:	ldr	ip, [r2]
   19278:	str	r0, [fp, #-504]	; 0xfffffe08
   1927c:	str	r1, [fp, #-532]	; 0xfffffdec
   19280:	mov	r0, r9
   19284:	sub	r2, fp, #484	; 0x1e4
   19288:	sub	r1, fp, #364	; 0x16c
   1928c:	mov	r4, r3
   19290:	str	ip, [fp, #-40]	; 0xffffffd8
   19294:	bl	1a1b0 <__assert_fail@plt+0x8fbc>
   19298:	cmp	r0, #0
   1929c:	blt	19874 <__assert_fail@plt+0x8680>
   192a0:	sub	r1, fp, #484	; 0x1e4
   192a4:	mov	r0, r4
   192a8:	bl	1a07c <__assert_fail@plt+0x8e88>
   192ac:	cmp	r0, #0
   192b0:	blt	19e30 <__assert_fail@plt+0x8c3c>
   192b4:	ldr	r2, [fp, #-356]	; 0xfffffe9c
   192b8:	ldr	r3, [fp, #-352]	; 0xfffffea0
   192bc:	adds	r2, r2, #7
   192c0:	mvncs	r2, #0
   192c4:	adds	r3, r3, r2
   192c8:	bcs	19868 <__assert_fail@plt+0x8674>
   192cc:	mov	r0, #6
   192d0:	adds	r0, r3, r0
   192d4:	bcs	19868 <__assert_fail@plt+0x8674>
   192d8:	cmp	r0, #4000	; 0xfa0
   192dc:	bcc	1950c <__assert_fail@plt+0x8318>
   192e0:	cmn	r0, #1
   192e4:	beq	19868 <__assert_fail@plt+0x8674>
   192e8:	bl	11068 <malloc@plt>
   192ec:	subs	r3, r0, #0
   192f0:	str	r3, [fp, #-516]	; 0xfffffdfc
   192f4:	beq	19868 <__assert_fail@plt+0x8674>
   192f8:	str	r3, [fp, #-536]	; 0xfffffde8
   192fc:	ldr	r3, [fp, #-504]	; 0xfffffe08
   19300:	ldr	sl, [fp, #-360]	; 0xfffffe98
   19304:	cmp	r3, #0
   19308:	ldr	r5, [fp, #-504]	; 0xfffffe08
   1930c:	ldrne	r3, [fp, #-532]	; 0xfffffdec
   19310:	ldreq	r6, [fp, #-504]	; 0xfffffe08
   19314:	mov	r4, #0
   19318:	ldrne	r6, [r3]
   1931c:	mov	r3, r5
   19320:	ldr	r5, [sl]
   19324:	str	r4, [fp, #-528]	; 0xfffffdf0
   19328:	cmp	r5, r9
   1932c:	beq	19784 <__assert_fail@plt+0x8590>
   19330:	sub	r5, r5, r9
   19334:	adds	r2, r4, r5
   19338:	mov	r7, r2
   1933c:	bcs	1978c <__assert_fail@plt+0x8598>
   19340:	cmp	r6, r2
   19344:	bcs	193b8 <__assert_fail@plt+0x81c4>
   19348:	cmp	r6, #0
   1934c:	bne	1987c <__assert_fail@plt+0x8688>
   19350:	cmp	r2, #12
   19354:	movls	r6, #12
   19358:	bhi	1988c <__assert_fail@plt+0x8698>
   1935c:	ldr	r2, [fp, #-504]	; 0xfffffe08
   19360:	cmp	r3, r2
   19364:	cmpne	r3, #0
   19368:	sub	r8, r3, r2
   1936c:	clz	r8, r8
   19370:	lsr	r8, r8, #5
   19374:	bne	19820 <__assert_fail@plt+0x862c>
   19378:	mov	r0, r6
   1937c:	str	r3, [fp, #-508]	; 0xfffffe04
   19380:	bl	11068 <malloc@plt>
   19384:	ldr	r3, [fp, #-508]	; 0xfffffe04
   19388:	subs	ip, r0, #0
   1938c:	beq	19c44 <__assert_fail@plt+0x8a50>
   19390:	cmp	r4, #0
   19394:	moveq	r8, #0
   19398:	cmp	r8, #0
   1939c:	moveq	r3, ip
   193a0:	beq	193b8 <__assert_fail@plt+0x81c4>
   193a4:	mov	r1, r3
   193a8:	mov	r2, r4
   193ac:	str	ip, [fp, #-508]	; 0xfffffe04
   193b0:	bl	10f78 <memcpy@plt>
   193b4:	ldr	r3, [fp, #-508]	; 0xfffffe04
   193b8:	add	r0, r3, r4
   193bc:	mov	r2, r5
   193c0:	mov	r1, r9
   193c4:	str	r3, [fp, #-508]	; 0xfffffe04
   193c8:	bl	10f78 <memcpy@plt>
   193cc:	ldr	r3, [fp, #-508]	; 0xfffffe04
   193d0:	ldr	r2, [fp, #-364]	; 0xfffffe94
   193d4:	ldr	r1, [fp, #-528]	; 0xfffffdf0
   193d8:	cmp	r2, r1
   193dc:	beq	19f18 <__assert_fail@plt+0x8d24>
   193e0:	ldrb	r1, [sl, #36]	; 0x24
   193e4:	ldr	r2, [sl, #40]	; 0x28
   193e8:	cmp	r1, #37	; 0x25
   193ec:	beq	196cc <__assert_fail@plt+0x84d8>
   193f0:	cmn	r2, #1
   193f4:	beq	1a074 <__assert_fail@plt+0x8e80>
   193f8:	ldr	r9, [fp, #-480]	; 0xfffffe20
   193fc:	cmp	r1, #110	; 0x6e
   19400:	add	r1, r9, r2, lsl #4
   19404:	ldr	r5, [r9, r2, lsl #4]
   19408:	beq	19844 <__assert_fail@plt+0x8650>
   1940c:	ldr	r2, [sl, #8]
   19410:	ldr	r0, [fp, #-516]	; 0xfffffdfc
   19414:	tst	r2, #1
   19418:	mov	r1, #37	; 0x25
   1941c:	strb	r1, [r0]
   19420:	ldrne	r0, [fp, #-516]	; 0xfffffdfc
   19424:	movne	r1, #39	; 0x27
   19428:	addne	r4, r0, #2
   1942c:	strbne	r1, [r0, #1]
   19430:	addeq	r4, r0, #1
   19434:	tst	r2, #2
   19438:	movne	r1, #45	; 0x2d
   1943c:	strbne	r1, [r4], #1
   19440:	tst	r2, #4
   19444:	movne	r1, #43	; 0x2b
   19448:	strbne	r1, [r4], #1
   1944c:	tst	r2, #8
   19450:	movne	r1, #32
   19454:	strbne	r1, [r4], #1
   19458:	tst	r2, #16
   1945c:	movne	r1, #35	; 0x23
   19460:	strbne	r1, [r4], #1
   19464:	tst	r2, #64	; 0x40
   19468:	movne	r1, #73	; 0x49
   1946c:	strbne	r1, [r4], #1
   19470:	tst	r2, #32
   19474:	movne	r2, #48	; 0x30
   19478:	strbne	r2, [r4], #1
   1947c:	ldr	r1, [sl, #12]
   19480:	ldr	r8, [sl, #16]
   19484:	cmp	r1, r8
   19488:	beq	194a8 <__assert_fail@plt+0x82b4>
   1948c:	sub	r8, r8, r1
   19490:	mov	r0, r4
   19494:	mov	r2, r8
   19498:	str	r3, [fp, #-508]	; 0xfffffe04
   1949c:	bl	10f78 <memcpy@plt>
   194a0:	ldr	r3, [fp, #-508]	; 0xfffffe04
   194a4:	add	r4, r4, r8
   194a8:	ldr	r1, [sl, #24]
   194ac:	ldr	r8, [sl, #28]
   194b0:	cmp	r1, r8
   194b4:	beq	194d4 <__assert_fail@plt+0x82e0>
   194b8:	sub	r8, r8, r1
   194bc:	mov	r0, r4
   194c0:	mov	r2, r8
   194c4:	str	r3, [fp, #-508]	; 0xfffffe04
   194c8:	bl	10f78 <memcpy@plt>
   194cc:	ldr	r3, [fp, #-508]	; 0xfffffe04
   194d0:	add	r4, r4, r8
   194d4:	sub	r2, r5, #7
   194d8:	cmp	r2, #9
   194dc:	ldrls	pc, [pc, r2, lsl #2]
   194e0:	b	1953c <__assert_fail@plt+0x8348>
   194e4:	andeq	r9, r1, r4, lsr r5
   194e8:	andeq	r9, r1, r4, lsr r5
   194ec:	andeq	r9, r1, ip, lsr #10
   194f0:	andeq	r9, r1, ip, lsr #10
   194f4:	andeq	r9, r1, ip, lsr r5
   194f8:	muleq	r1, ip, r8
   194fc:	andeq	r9, r1, ip, lsr r5
   19500:	andeq	r9, r1, r4, lsr r5
   19504:	andeq	r9, r1, ip, lsr r5
   19508:	andeq	r9, r1, r4, lsr r5
   1950c:	add	r3, r3, #13
   19510:	bic	r3, r3, #7
   19514:	sub	sp, sp, r3
   19518:	add	r3, sp, #32
   1951c:	str	r3, [fp, #-516]	; 0xfffffdfc
   19520:	mov	r3, #0
   19524:	str	r3, [fp, #-536]	; 0xfffffde8
   19528:	b	192fc <__assert_fail@plt+0x8108>
   1952c:	mov	r2, #108	; 0x6c
   19530:	strb	r2, [r4], #1
   19534:	mov	r2, #108	; 0x6c
   19538:	strb	r2, [r4], #1
   1953c:	ldrb	r2, [sl, #36]	; 0x24
   19540:	mov	r1, #0
   19544:	strb	r1, [r4, #1]
   19548:	strb	r2, [r4]
   1954c:	ldr	r2, [sl, #20]
   19550:	cmn	r2, #1
   19554:	beq	19cf4 <__assert_fail@plt+0x8b00>
   19558:	ldr	r1, [r9, r2, lsl #4]
   1955c:	add	r2, r9, r2, lsl #4
   19560:	cmp	r1, #5
   19564:	bne	1a074 <__assert_fail@plt+0x8e80>
   19568:	ldr	r2, [r2, #8]
   1956c:	mov	r8, #1
   19570:	str	r2, [fp, #-492]	; 0xfffffe14
   19574:	ldr	r2, [sl, #32]
   19578:	cmn	r2, #1
   1957c:	beq	195a4 <__assert_fail@plt+0x83b0>
   19580:	ldr	r1, [r9, r2, lsl #4]
   19584:	add	r9, r9, r2, lsl #4
   19588:	cmp	r1, #5
   1958c:	bne	1a074 <__assert_fail@plt+0x8e80>
   19590:	sub	r2, fp, #36	; 0x24
   19594:	add	r2, r2, r8, lsl #2
   19598:	ldr	r1, [r9, #8]
   1959c:	add	r8, r8, #1
   195a0:	str	r1, [r2, #-456]	; 0xfffffe38
   195a4:	mov	r2, #2
   195a8:	adds	r2, r7, r2
   195ac:	str	r2, [fp, #-524]	; 0xfffffdf4
   195b0:	bcs	19d2c <__assert_fail@plt+0x8b38>
   195b4:	cmp	r6, r2
   195b8:	bcs	19d34 <__assert_fail@plt+0x8b40>
   195bc:	cmp	r6, #0
   195c0:	bne	19bf0 <__assert_fail@plt+0x89fc>
   195c4:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   195c8:	cmp	r2, #12
   195cc:	movls	r6, #12
   195d0:	bhi	19c04 <__assert_fail@plt+0x8a10>
   195d4:	ldr	r1, [fp, #-504]	; 0xfffffe08
   195d8:	sub	r2, r3, r1
   195dc:	cmp	r3, r1
   195e0:	cmpne	r3, #0
   195e4:	clz	r2, r2
   195e8:	lsr	r2, r2, #5
   195ec:	str	r2, [fp, #-508]	; 0xfffffe04
   195f0:	bne	19cfc <__assert_fail@plt+0x8b08>
   195f4:	mov	r0, r6
   195f8:	str	r3, [fp, #-512]	; 0xfffffe00
   195fc:	bl	11068 <malloc@plt>
   19600:	ldr	r3, [fp, #-512]	; 0xfffffe00
   19604:	ldr	r2, [fp, #-508]	; 0xfffffe04
   19608:	subs	r9, r0, #0
   1960c:	beq	19c44 <__assert_fail@plt+0x8a50>
   19610:	cmp	r7, #0
   19614:	moveq	r2, #0
   19618:	cmp	r2, #0
   1961c:	beq	1962c <__assert_fail@plt+0x8438>
   19620:	mov	r1, r3
   19624:	mov	r2, r7
   19628:	bl	10f78 <memcpy@plt>
   1962c:	mov	r3, #0
   19630:	strb	r3, [r9, r7]
   19634:	bl	110d4 <__errno_location@plt>
   19638:	sub	r3, r5, #1
   1963c:	str	r3, [fp, #-520]	; 0xfffffdf8
   19640:	ldr	r3, [r0]
   19644:	str	r0, [fp, #-508]	; 0xfffffe04
   19648:	str	r3, [fp, #-540]	; 0xfffffde4
   1964c:	sub	r3, r6, r7
   19650:	str	r3, [fp, #-512]	; 0xfffffe00
   19654:	ldr	r3, [fp, #-512]	; 0xfffffe00
   19658:	mvn	r2, #0
   1965c:	cmp	r3, #0
   19660:	str	r2, [fp, #-496]	; 0xfffffe10
   19664:	ldr	r2, [fp, #-508]	; 0xfffffe04
   19668:	movge	r5, r3
   1966c:	ldr	r3, [fp, #-520]	; 0xfffffdf8
   19670:	mov	r1, #0
   19674:	str	r1, [r2]
   19678:	mvnlt	r5, #-2147483648	; 0x80000000
   1967c:	cmp	r3, #16
   19680:	ldrls	pc, [pc, r3, lsl #2]
   19684:	b	1a074 <__assert_fail@plt+0x8e80>
   19688:	ldrdeq	r9, [r1], -r0
   1968c:			; <UNDEFINED> instruction: 0x00019bb0
   19690:	andeq	r9, r1, r4, asr fp
   19694:	andeq	r9, r1, r8, lsl #22
   19698:	andeq	r9, r1, r8, lsr #17
   1969c:	andeq	r9, r1, r8, lsr #17
   196a0:	andeq	r9, r1, r8, lsr #17
   196a4:	andeq	r9, r1, r8, lsr #17
   196a8:	andeq	r9, r1, ip, asr #19
   196ac:	andeq	r9, r1, ip, asr #19
   196b0:			; <UNDEFINED> instruction: 0x00019abc
   196b4:			; <UNDEFINED> instruction: 0x00019abc
   196b8:	andeq	r9, r1, r8, lsr #17
   196bc:	andeq	r9, r1, r8, lsr #17
   196c0:	andeq	r9, r1, r8, lsr #17
   196c4:	andeq	r9, r1, r8, lsr #17
   196c8:	andeq	r9, r1, r8, lsr #17
   196cc:	cmn	r2, #1
   196d0:	bne	1a074 <__assert_fail@plt+0x8e80>
   196d4:	mov	r2, #1
   196d8:	adds	r2, r7, r2
   196dc:	mov	r4, r2
   196e0:	bcs	19d1c <__assert_fail@plt+0x8b28>
   196e4:	cmp	r6, r2
   196e8:	bcs	1975c <__assert_fail@plt+0x8568>
   196ec:	cmp	r6, #0
   196f0:	bne	19c40 <__assert_fail@plt+0x8a4c>
   196f4:	cmp	r2, #12
   196f8:	movls	r6, #12
   196fc:	bhi	19e78 <__assert_fail@plt+0x8c84>
   19700:	ldr	r2, [fp, #-504]	; 0xfffffe08
   19704:	cmp	r3, r2
   19708:	cmpne	r3, #0
   1970c:	sub	r5, r3, r2
   19710:	clz	r5, r5
   19714:	lsr	r5, r5, #5
   19718:	bne	19e0c <__assert_fail@plt+0x8c18>
   1971c:	mov	r0, r6
   19720:	str	r3, [fp, #-508]	; 0xfffffe04
   19724:	bl	11068 <malloc@plt>
   19728:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1972c:	subs	ip, r0, #0
   19730:	beq	19c44 <__assert_fail@plt+0x8a50>
   19734:	cmp	r7, #0
   19738:	moveq	r5, #0
   1973c:	cmp	r5, #0
   19740:	moveq	r3, ip
   19744:	beq	1975c <__assert_fail@plt+0x8568>
   19748:	mov	r1, r3
   1974c:	mov	r2, r7
   19750:	str	ip, [fp, #-508]	; 0xfffffe04
   19754:	bl	10f78 <memcpy@plt>
   19758:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1975c:	mov	r2, #37	; 0x25
   19760:	strb	r2, [r3, r7]
   19764:	ldr	r9, [sl, #4]
   19768:	add	sl, sl, #44	; 0x2c
   1976c:	ldr	r2, [fp, #-528]	; 0xfffffdf0
   19770:	ldr	r5, [sl]
   19774:	add	r2, r2, #1
   19778:	cmp	r5, r9
   1977c:	str	r2, [fp, #-528]	; 0xfffffdf0
   19780:	bne	19330 <__assert_fail@plt+0x813c>
   19784:	mov	r7, r4
   19788:	b	193d0 <__assert_fail@plt+0x81dc>
   1978c:	cmn	r6, #1
   19790:	beq	19e04 <__assert_fail@plt+0x8c10>
   19794:	mov	r5, r3
   19798:	bl	110d4 <__errno_location@plt>
   1979c:	mov	r9, r5
   197a0:	str	r0, [fp, #-508]	; 0xfffffe04
   197a4:	ldr	r3, [fp, #-504]	; 0xfffffe08
   197a8:	cmp	r9, r3
   197ac:	cmpne	r9, #0
   197b0:	bne	19c60 <__assert_fail@plt+0x8a6c>
   197b4:	ldr	r3, [fp, #-536]	; 0xfffffde8
   197b8:	cmp	r3, #0
   197bc:	beq	197c8 <__assert_fail@plt+0x85d4>
   197c0:	mov	r0, r3
   197c4:	bl	10f54 <free@plt>
   197c8:	ldr	r0, [fp, #-360]	; 0xfffffe98
   197cc:	sub	r3, fp, #348	; 0x15c
   197d0:	cmp	r0, r3
   197d4:	beq	197dc <__assert_fail@plt+0x85e8>
   197d8:	bl	10f54 <free@plt>
   197dc:	ldr	r0, [fp, #-480]	; 0xfffffe20
   197e0:	sub	r3, fp, #476	; 0x1dc
   197e4:	cmp	r0, r3
   197e8:	beq	197f0 <__assert_fail@plt+0x85fc>
   197ec:	bl	10f54 <free@plt>
   197f0:	ldr	r2, [fp, #-508]	; 0xfffffe04
   197f4:	mov	r5, #0
   197f8:	mov	r3, #12
   197fc:	str	r3, [r2]
   19800:	ldr	r3, [pc, #2160]	; 1a078 <__assert_fail@plt+0x8e84>
   19804:	ldr	r2, [fp, #-40]	; 0xffffffd8
   19808:	mov	r0, r5
   1980c:	ldr	r3, [r3]
   19810:	cmp	r2, r3
   19814:	bne	1a064 <__assert_fail@plt+0x8e70>
   19818:	sub	sp, fp, #32
   1981c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19820:	mov	r0, r3
   19824:	mov	r1, r6
   19828:	str	r3, [fp, #-508]	; 0xfffffe04
   1982c:	bl	10fd8 <realloc@plt>
   19830:	ldr	r3, [fp, #-508]	; 0xfffffe04
   19834:	cmp	r0, #0
   19838:	beq	19ffc <__assert_fail@plt+0x8e08>
   1983c:	mov	r3, r0
   19840:	b	193b8 <__assert_fail@plt+0x81c4>
   19844:	sub	r5, r5, #18
   19848:	cmp	r5, #4
   1984c:	ldrls	pc, [pc, r5, lsl #2]
   19850:	b	1a074 <__assert_fail@plt+0x8e80>
   19854:	muleq	r1, r4, ip
   19858:	andeq	r9, r1, r4, lsl #25
   1985c:	andeq	r9, r1, r0, lsr ip
   19860:	andeq	r9, r1, r0, lsr ip
   19864:	andeq	r9, r1, ip, ror #24
   19868:	bl	110d4 <__errno_location@plt>
   1986c:	str	r0, [fp, #-508]	; 0xfffffe04
   19870:	b	197c8 <__assert_fail@plt+0x85d4>
   19874:	mov	r5, #0
   19878:	b	19800 <__assert_fail@plt+0x860c>
   1987c:	blt	19c44 <__assert_fail@plt+0x8a50>
   19880:	lsl	r6, r6, #1
   19884:	cmp	r6, r2
   19888:	bcs	1935c <__assert_fail@plt+0x8168>
   1988c:	cmn	r2, #1
   19890:	beq	19794 <__assert_fail@plt+0x85a0>
   19894:	mov	r6, r2
   19898:	b	1935c <__assert_fail@plt+0x8168>
   1989c:	mov	r2, #76	; 0x4c
   198a0:	strb	r2, [r4], #1
   198a4:	b	1953c <__assert_fail@plt+0x8348>
   198a8:	ldr	r2, [sl, #40]	; 0x28
   198ac:	ldr	r3, [fp, #-480]	; 0xfffffe20
   198b0:	cmp	r8, #1
   198b4:	add	r3, r3, r2, lsl #4
   198b8:	add	r0, r9, r7
   198bc:	ldr	r3, [r3, #8]
   198c0:	beq	19b24 <__assert_fail@plt+0x8930>
   198c4:	cmp	r8, #2
   198c8:	beq	19b78 <__assert_fail@plt+0x8984>
   198cc:	str	r3, [sp, #4]
   198d0:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   198d4:	sub	r2, fp, #496	; 0x1f0
   198d8:	str	r2, [sp, #8]
   198dc:	str	r3, [sp]
   198e0:	mov	r2, #1
   198e4:	mvn	r3, #0
   198e8:	mov	r1, r5
   198ec:	bl	111e8 <__snprintf_chk@plt>
   198f0:	ldr	r2, [fp, #-496]	; 0xfffffe10
   198f4:	cmp	r2, #0
   198f8:	blt	19a20 <__assert_fail@plt+0x882c>
   198fc:	cmp	r2, r5
   19900:	mov	r3, r2
   19904:	bcs	19918 <__assert_fail@plt+0x8724>
   19908:	add	r1, r9, r2
   1990c:	ldrb	r1, [r1, r7]
   19910:	cmp	r1, #0
   19914:	bne	1a074 <__assert_fail@plt+0x8e80>
   19918:	cmp	r2, r0
   1991c:	bge	19928 <__assert_fail@plt+0x8734>
   19920:	mov	r3, r0
   19924:	str	r0, [fp, #-496]	; 0xfffffe10
   19928:	add	r2, r3, #1
   1992c:	cmp	r2, r5
   19930:	bcc	19e88 <__assert_fail@plt+0x8c94>
   19934:	cmn	r5, #-2147483647	; 0x80000001
   19938:	beq	19ea0 <__assert_fail@plt+0x8cac>
   1993c:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   19940:	add	r3, r3, r2
   19944:	cmp	r7, r3
   19948:	mvnhi	r3, #0
   1994c:	cmp	r6, #0
   19950:	blt	19ca4 <__assert_fail@plt+0x8ab0>
   19954:	lsl	r2, r6, #1
   19958:	cmp	r2, r3
   1995c:	movcs	r3, r2
   19960:	cmp	r6, r3
   19964:	bcs	19654 <__assert_fail@plt+0x8460>
   19968:	cmp	r2, r3
   1996c:	bcc	19cb0 <__assert_fail@plt+0x8abc>
   19970:	mov	r6, r2
   19974:	ldr	r3, [fp, #-504]	; 0xfffffe08
   19978:	cmp	r9, r3
   1997c:	cmpne	r9, #0
   19980:	sub	r5, r9, r3
   19984:	clz	r5, r5
   19988:	lsr	r5, r5, #5
   1998c:	bne	19cc0 <__assert_fail@plt+0x8acc>
   19990:	mov	r0, r6
   19994:	bl	11068 <malloc@plt>
   19998:	subs	r3, r0, #0
   1999c:	beq	197a4 <__assert_fail@plt+0x85b0>
   199a0:	cmp	r7, #0
   199a4:	moveq	r5, #0
   199a8:	cmp	r5, #0
   199ac:	beq	19ce4 <__assert_fail@plt+0x8af0>
   199b0:	mov	r1, r9
   199b4:	mov	r2, r7
   199b8:	mov	r9, r3
   199bc:	bl	10f78 <memcpy@plt>
   199c0:	sub	r3, r6, r7
   199c4:	str	r3, [fp, #-512]	; 0xfffffe00
   199c8:	b	19654 <__assert_fail@plt+0x8460>
   199cc:	ldr	r2, [sl, #40]	; 0x28
   199d0:	ldr	r3, [fp, #-480]	; 0xfffffe20
   199d4:	cmp	r8, #1
   199d8:	add	r3, r3, r2, lsl #4
   199dc:	add	r0, r9, r7
   199e0:	ldrd	r2, [r3, #8]
   199e4:	beq	19d70 <__assert_fail@plt+0x8b7c>
   199e8:	cmp	r8, #2
   199ec:	beq	19d3c <__assert_fail@plt+0x8b48>
   199f0:	strd	r2, [sp, #8]
   199f4:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   199f8:	sub	r1, fp, #496	; 0x1f0
   199fc:	str	r1, [sp, #16]
   19a00:	str	r3, [sp]
   19a04:	mov	r2, #1
   19a08:	mvn	r3, #0
   19a0c:	mov	r1, r5
   19a10:	bl	111e8 <__snprintf_chk@plt>
   19a14:	ldr	r2, [fp, #-496]	; 0xfffffe10
   19a18:	cmp	r2, #0
   19a1c:	bge	198fc <__assert_fail@plt+0x8708>
   19a20:	ldrb	r3, [r4, #1]
   19a24:	cmp	r3, #0
   19a28:	movne	r3, #0
   19a2c:	strbne	r3, [r4, #1]
   19a30:	bne	19654 <__assert_fail@plt+0x8460>
   19a34:	cmp	r0, #0
   19a38:	bge	19920 <__assert_fail@plt+0x872c>
   19a3c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   19a40:	ldr	r4, [r3]
   19a44:	cmp	r4, #0
   19a48:	bne	19a60 <__assert_fail@plt+0x886c>
   19a4c:	ldrb	r3, [sl, #36]	; 0x24
   19a50:	and	r3, r3, #239	; 0xef
   19a54:	cmp	r3, #99	; 0x63
   19a58:	moveq	r4, #84	; 0x54
   19a5c:	movne	r4, #22
   19a60:	ldr	r3, [fp, #-504]	; 0xfffffe08
   19a64:	cmp	r9, r3
   19a68:	cmpne	r9, #0
   19a6c:	bne	19f00 <__assert_fail@plt+0x8d0c>
   19a70:	ldr	r3, [fp, #-536]	; 0xfffffde8
   19a74:	cmp	r3, #0
   19a78:	beq	19a84 <__assert_fail@plt+0x8890>
   19a7c:	mov	r0, r3
   19a80:	bl	10f54 <free@plt>
   19a84:	ldr	r0, [fp, #-360]	; 0xfffffe98
   19a88:	sub	r3, fp, #348	; 0x15c
   19a8c:	cmp	r0, r3
   19a90:	beq	19a98 <__assert_fail@plt+0x88a4>
   19a94:	bl	10f54 <free@plt>
   19a98:	ldr	r0, [fp, #-480]	; 0xfffffe20
   19a9c:	sub	r3, fp, #476	; 0x1dc
   19aa0:	cmp	r0, r3
   19aa4:	beq	19aac <__assert_fail@plt+0x88b8>
   19aa8:	bl	10f54 <free@plt>
   19aac:	ldr	r3, [fp, #-508]	; 0xfffffe04
   19ab0:	mov	r5, #0
   19ab4:	str	r4, [r3]
   19ab8:	b	19800 <__assert_fail@plt+0x860c>
   19abc:	ldr	r2, [sl, #40]	; 0x28
   19ac0:	ldr	r3, [fp, #-480]	; 0xfffffe20
   19ac4:	cmp	r8, #1
   19ac8:	add	r3, r3, r2, lsl #4
   19acc:	add	r0, r9, r7
   19ad0:	ldrd	r2, [r3, #8]
   19ad4:	beq	19dd4 <__assert_fail@plt+0x8be0>
   19ad8:	cmp	r8, #2
   19adc:	beq	19da0 <__assert_fail@plt+0x8bac>
   19ae0:	strd	r2, [sp, #8]
   19ae4:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   19ae8:	sub	r1, fp, #496	; 0x1f0
   19aec:	str	r1, [sp, #16]
   19af0:	str	r3, [sp]
   19af4:	mov	r2, #1
   19af8:	mvn	r3, #0
   19afc:	mov	r1, r5
   19b00:	bl	111e8 <__snprintf_chk@plt>
   19b04:	b	198f0 <__assert_fail@plt+0x86fc>
   19b08:	ldr	r2, [sl, #40]	; 0x28
   19b0c:	ldr	r3, [fp, #-480]	; 0xfffffe20
   19b10:	cmp	r8, #1
   19b14:	add	r3, r3, r2, lsl #4
   19b18:	add	r0, r9, r7
   19b1c:	ldrh	r3, [r3, #8]
   19b20:	bne	198c4 <__assert_fail@plt+0x86d0>
   19b24:	ldr	r2, [fp, #-492]	; 0xfffffe14
   19b28:	str	r3, [sp, #8]
   19b2c:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   19b30:	sub	r1, fp, #496	; 0x1f0
   19b34:	str	r1, [sp, #12]
   19b38:	str	r3, [sp]
   19b3c:	str	r2, [sp, #4]
   19b40:	mvn	r3, #0
   19b44:	mov	r2, r8
   19b48:	mov	r1, r5
   19b4c:	bl	111e8 <__snprintf_chk@plt>
   19b50:	b	198f0 <__assert_fail@plt+0x86fc>
   19b54:	ldr	r2, [sl, #40]	; 0x28
   19b58:	ldr	r3, [fp, #-480]	; 0xfffffe20
   19b5c:	cmp	r8, #1
   19b60:	add	r3, r3, r2, lsl #4
   19b64:	add	r0, r9, r7
   19b68:	ldrsh	r3, [r3, #8]
   19b6c:	beq	19b24 <__assert_fail@plt+0x8930>
   19b70:	cmp	r8, #2
   19b74:	bne	198cc <__assert_fail@plt+0x86d8>
   19b78:	ldr	r1, [fp, #-488]	; 0xfffffe18
   19b7c:	ldr	r2, [fp, #-492]	; 0xfffffe14
   19b80:	str	r3, [sp, #12]
   19b84:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   19b88:	sub	ip, fp, #496	; 0x1f0
   19b8c:	str	r3, [sp]
   19b90:	str	r1, [sp, #8]
   19b94:	str	r2, [sp, #4]
   19b98:	str	ip, [sp, #16]
   19b9c:	mvn	r3, #0
   19ba0:	mov	r2, #1
   19ba4:	mov	r1, r5
   19ba8:	bl	111e8 <__snprintf_chk@plt>
   19bac:	b	198f0 <__assert_fail@plt+0x86fc>
   19bb0:	ldr	r2, [sl, #40]	; 0x28
   19bb4:	ldr	r3, [fp, #-480]	; 0xfffffe20
   19bb8:	cmp	r8, #1
   19bbc:	add	r3, r3, r2, lsl #4
   19bc0:	add	r0, r9, r7
   19bc4:	ldrb	r3, [r3, #8]
   19bc8:	bne	198c4 <__assert_fail@plt+0x86d0>
   19bcc:	b	19b24 <__assert_fail@plt+0x8930>
   19bd0:	ldr	r2, [sl, #40]	; 0x28
   19bd4:	ldr	r3, [fp, #-480]	; 0xfffffe20
   19bd8:	cmp	r8, #1
   19bdc:	add	r3, r3, r2, lsl #4
   19be0:	add	r0, r9, r7
   19be4:	ldrsb	r3, [r3, #8]
   19be8:	bne	198c4 <__assert_fail@plt+0x86d0>
   19bec:	b	19b24 <__assert_fail@plt+0x8930>
   19bf0:	blt	19c44 <__assert_fail@plt+0x8a50>
   19bf4:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   19bf8:	lsl	r6, r6, #1
   19bfc:	cmp	r6, r2
   19c00:	bcs	195d4 <__assert_fail@plt+0x83e0>
   19c04:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   19c08:	mov	r1, #0
   19c0c:	cmn	r2, #1
   19c10:	movne	r2, #0
   19c14:	moveq	r2, #1
   19c18:	cmp	r1, r1
   19c1c:	movne	r2, #255	; 0xff
   19c20:	cmp	r2, r1
   19c24:	bne	19794 <__assert_fail@plt+0x85a0>
   19c28:	ldr	r6, [fp, #-524]	; 0xfffffdf4
   19c2c:	b	195d4 <__assert_fail@plt+0x83e0>
   19c30:	ldr	r2, [r1, #8]
   19c34:	mov	r4, r7
   19c38:	str	r7, [r2]
   19c3c:	b	19764 <__assert_fail@plt+0x8570>
   19c40:	bge	19e6c <__assert_fail@plt+0x8c78>
   19c44:	mov	r9, r3
   19c48:	bl	110d4 <__errno_location@plt>
   19c4c:	ldr	r3, [fp, #-504]	; 0xfffffe08
   19c50:	cmp	r9, r3
   19c54:	cmpne	r9, #0
   19c58:	str	r0, [fp, #-508]	; 0xfffffe04
   19c5c:	beq	197b4 <__assert_fail@plt+0x85c0>
   19c60:	mov	r0, r9
   19c64:	bl	10f54 <free@plt>
   19c68:	b	197b4 <__assert_fail@plt+0x85c0>
   19c6c:	ldr	r2, [r1, #8]
   19c70:	mov	r1, #0
   19c74:	mov	r4, r7
   19c78:	str	r7, [r2]
   19c7c:	str	r1, [r2, #4]
   19c80:	b	19764 <__assert_fail@plt+0x8570>
   19c84:	ldr	r2, [r1, #8]
   19c88:	mov	r4, r7
   19c8c:	strh	r7, [r2]
   19c90:	b	19764 <__assert_fail@plt+0x8570>
   19c94:	ldr	r2, [r1, #8]
   19c98:	mov	r4, r7
   19c9c:	strb	r7, [r2]
   19ca0:	b	19764 <__assert_fail@plt+0x8570>
   19ca4:	cmn	r6, #1
   19ca8:	beq	19654 <__assert_fail@plt+0x8460>
   19cac:	b	197a4 <__assert_fail@plt+0x85b0>
   19cb0:	cmn	r3, #1
   19cb4:	beq	197a4 <__assert_fail@plt+0x85b0>
   19cb8:	mov	r6, r3
   19cbc:	b	19974 <__assert_fail@plt+0x8780>
   19cc0:	mov	r1, r6
   19cc4:	mov	r0, r9
   19cc8:	bl	10fd8 <realloc@plt>
   19ccc:	cmp	r0, #0
   19cd0:	beq	197a4 <__assert_fail@plt+0x85b0>
   19cd4:	sub	r3, r6, r7
   19cd8:	mov	r9, r0
   19cdc:	str	r3, [fp, #-512]	; 0xfffffe00
   19ce0:	b	19654 <__assert_fail@plt+0x8460>
   19ce4:	mov	r9, r3
   19ce8:	sub	r3, r6, r7
   19cec:	str	r3, [fp, #-512]	; 0xfffffe00
   19cf0:	b	19654 <__assert_fail@plt+0x8460>
   19cf4:	mov	r8, #0
   19cf8:	b	19574 <__assert_fail@plt+0x8380>
   19cfc:	mov	r0, r3
   19d00:	mov	r1, r6
   19d04:	str	r3, [fp, #-508]	; 0xfffffe04
   19d08:	bl	10fd8 <realloc@plt>
   19d0c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   19d10:	subs	r9, r0, #0
   19d14:	bne	1962c <__assert_fail@plt+0x8438>
   19d18:	b	19c44 <__assert_fail@plt+0x8a50>
   19d1c:	cmn	r6, #1
   19d20:	bne	19794 <__assert_fail@plt+0x85a0>
   19d24:	mov	r4, r6
   19d28:	b	1975c <__assert_fail@plt+0x8568>
   19d2c:	cmn	r6, #1
   19d30:	bne	19794 <__assert_fail@plt+0x85a0>
   19d34:	mov	r9, r3
   19d38:	b	1962c <__assert_fail@plt+0x8438>
   19d3c:	ldr	r1, [fp, #-492]	; 0xfffffe14
   19d40:	ldr	ip, [fp, #-488]	; 0xfffffe18
   19d44:	strd	r2, [sp, #16]
   19d48:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   19d4c:	sub	lr, fp, #496	; 0x1f0
   19d50:	str	r3, [sp]
   19d54:	stmib	sp, {r1, ip}
   19d58:	str	lr, [sp, #24]
   19d5c:	mvn	r3, #0
   19d60:	mov	r2, #1
   19d64:	mov	r1, r5
   19d68:	bl	111e8 <__snprintf_chk@plt>
   19d6c:	b	198f0 <__assert_fail@plt+0x86fc>
   19d70:	ldr	r1, [fp, #-492]	; 0xfffffe14
   19d74:	strd	r2, [sp, #8]
   19d78:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   19d7c:	sub	ip, fp, #496	; 0x1f0
   19d80:	str	r3, [sp]
   19d84:	str	r1, [sp, #4]
   19d88:	str	ip, [sp, #16]
   19d8c:	mvn	r3, #0
   19d90:	mov	r2, r8
   19d94:	mov	r1, r5
   19d98:	bl	111e8 <__snprintf_chk@plt>
   19d9c:	b	198f0 <__assert_fail@plt+0x86fc>
   19da0:	ldr	r1, [fp, #-492]	; 0xfffffe14
   19da4:	ldr	ip, [fp, #-488]	; 0xfffffe18
   19da8:	strd	r2, [sp, #16]
   19dac:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   19db0:	sub	lr, fp, #496	; 0x1f0
   19db4:	str	r3, [sp]
   19db8:	stmib	sp, {r1, ip}
   19dbc:	str	lr, [sp, #24]
   19dc0:	mvn	r3, #0
   19dc4:	mov	r2, #1
   19dc8:	mov	r1, r5
   19dcc:	bl	111e8 <__snprintf_chk@plt>
   19dd0:	b	198f0 <__assert_fail@plt+0x86fc>
   19dd4:	ldr	r1, [fp, #-492]	; 0xfffffe14
   19dd8:	strd	r2, [sp, #8]
   19ddc:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   19de0:	sub	ip, fp, #496	; 0x1f0
   19de4:	str	r3, [sp]
   19de8:	str	r1, [sp, #4]
   19dec:	str	ip, [sp, #16]
   19df0:	mvn	r3, #0
   19df4:	mov	r2, r8
   19df8:	mov	r1, r5
   19dfc:	bl	111e8 <__snprintf_chk@plt>
   19e00:	b	198f0 <__assert_fail@plt+0x86fc>
   19e04:	mov	r7, r6
   19e08:	b	193b8 <__assert_fail@plt+0x81c4>
   19e0c:	mov	r0, r3
   19e10:	mov	r1, r6
   19e14:	str	r3, [fp, #-508]	; 0xfffffe04
   19e18:	bl	10fd8 <realloc@plt>
   19e1c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   19e20:	cmp	r0, #0
   19e24:	beq	19ffc <__assert_fail@plt+0x8e08>
   19e28:	mov	r3, r0
   19e2c:	b	1975c <__assert_fail@plt+0x8568>
   19e30:	ldr	r0, [fp, #-360]	; 0xfffffe98
   19e34:	sub	r3, fp, #348	; 0x15c
   19e38:	cmp	r0, r3
   19e3c:	beq	19e44 <__assert_fail@plt+0x8c50>
   19e40:	bl	10f54 <free@plt>
   19e44:	ldr	r0, [fp, #-480]	; 0xfffffe20
   19e48:	sub	r3, fp, #476	; 0x1dc
   19e4c:	cmp	r0, r3
   19e50:	beq	19e58 <__assert_fail@plt+0x8c64>
   19e54:	bl	10f54 <free@plt>
   19e58:	bl	110d4 <__errno_location@plt>
   19e5c:	mov	r3, #22
   19e60:	mov	r5, #0
   19e64:	str	r3, [r0]
   19e68:	b	19800 <__assert_fail@plt+0x860c>
   19e6c:	lsl	r6, r6, #1
   19e70:	cmp	r6, r2
   19e74:	bcs	19700 <__assert_fail@plt+0x850c>
   19e78:	cmn	r2, #1
   19e7c:	beq	19794 <__assert_fail@plt+0x85a0>
   19e80:	mov	r6, r2
   19e84:	b	19700 <__assert_fail@plt+0x850c>
   19e88:	add	r4, r7, r3
   19e8c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   19e90:	ldr	r2, [fp, #-540]	; 0xfffffde4
   19e94:	str	r2, [r3]
   19e98:	mov	r3, r9
   19e9c:	b	19764 <__assert_fail@plt+0x8570>
   19ea0:	ldr	r3, [fp, #-504]	; 0xfffffe08
   19ea4:	cmp	r9, r3
   19ea8:	cmpne	r9, #0
   19eac:	bne	19f0c <__assert_fail@plt+0x8d18>
   19eb0:	ldr	r3, [fp, #-536]	; 0xfffffde8
   19eb4:	cmp	r3, #0
   19eb8:	beq	19ec4 <__assert_fail@plt+0x8cd0>
   19ebc:	mov	r0, r3
   19ec0:	bl	10f54 <free@plt>
   19ec4:	ldr	r0, [fp, #-360]	; 0xfffffe98
   19ec8:	sub	r3, fp, #348	; 0x15c
   19ecc:	cmp	r0, r3
   19ed0:	beq	19ed8 <__assert_fail@plt+0x8ce4>
   19ed4:	bl	10f54 <free@plt>
   19ed8:	ldr	r0, [fp, #-480]	; 0xfffffe20
   19edc:	sub	r3, fp, #476	; 0x1dc
   19ee0:	cmp	r0, r3
   19ee4:	beq	19eec <__assert_fail@plt+0x8cf8>
   19ee8:	bl	10f54 <free@plt>
   19eec:	ldr	r2, [fp, #-508]	; 0xfffffe04
   19ef0:	mov	r3, #75	; 0x4b
   19ef4:	mov	r5, #0
   19ef8:	str	r3, [r2]
   19efc:	b	19800 <__assert_fail@plt+0x860c>
   19f00:	mov	r0, r9
   19f04:	bl	10f54 <free@plt>
   19f08:	b	19a70 <__assert_fail@plt+0x887c>
   19f0c:	mov	r0, r9
   19f10:	bl	10f54 <free@plt>
   19f14:	b	19eb0 <__assert_fail@plt+0x8cbc>
   19f18:	mov	r5, r3
   19f1c:	mov	r3, #1
   19f20:	adds	r4, r7, r3
   19f24:	mov	r8, r7
   19f28:	bcs	1a068 <__assert_fail@plt+0x8e74>
   19f2c:	cmp	r6, r4
   19f30:	bcs	19f9c <__assert_fail@plt+0x8da8>
   19f34:	cmp	r6, #0
   19f38:	bne	1a044 <__assert_fail@plt+0x8e50>
   19f3c:	cmp	r4, #12
   19f40:	movls	r6, #12
   19f44:	bhi	1a054 <__assert_fail@plt+0x8e60>
   19f48:	ldr	r3, [fp, #-504]	; 0xfffffe08
   19f4c:	cmp	r5, r3
   19f50:	cmpne	r5, #0
   19f54:	sub	r7, r5, r3
   19f58:	clz	r7, r7
   19f5c:	lsr	r7, r7, #5
   19f60:	bne	1a028 <__assert_fail@plt+0x8e34>
   19f64:	mov	r0, r6
   19f68:	bl	11068 <malloc@plt>
   19f6c:	subs	r3, r0, #0
   19f70:	beq	19798 <__assert_fail@plt+0x85a4>
   19f74:	cmp	r8, #0
   19f78:	movne	r2, r7
   19f7c:	moveq	r2, #0
   19f80:	cmp	r2, #0
   19f84:	moveq	r5, r3
   19f88:	beq	19f9c <__assert_fail@plt+0x8da8>
   19f8c:	mov	r1, r5
   19f90:	mov	r2, r8
   19f94:	mov	r5, r3
   19f98:	bl	10f78 <memcpy@plt>
   19f9c:	ldr	r3, [fp, #-504]	; 0xfffffe08
   19fa0:	cmp	r5, r3
   19fa4:	cmpne	r6, r4
   19fa8:	mov	r3, #0
   19fac:	strb	r3, [r5, r8]
   19fb0:	bhi	1a010 <__assert_fail@plt+0x8e1c>
   19fb4:	ldr	r3, [fp, #-536]	; 0xfffffde8
   19fb8:	cmp	r3, #0
   19fbc:	beq	19fc8 <__assert_fail@plt+0x8dd4>
   19fc0:	mov	r0, r3
   19fc4:	bl	10f54 <free@plt>
   19fc8:	ldr	r0, [fp, #-360]	; 0xfffffe98
   19fcc:	sub	r3, fp, #348	; 0x15c
   19fd0:	cmp	r0, r3
   19fd4:	beq	19fdc <__assert_fail@plt+0x8de8>
   19fd8:	bl	10f54 <free@plt>
   19fdc:	ldr	r0, [fp, #-480]	; 0xfffffe20
   19fe0:	sub	r3, fp, #476	; 0x1dc
   19fe4:	cmp	r0, r3
   19fe8:	beq	19ff0 <__assert_fail@plt+0x8dfc>
   19fec:	bl	10f54 <free@plt>
   19ff0:	ldr	r3, [fp, #-532]	; 0xfffffdec
   19ff4:	str	r8, [r3]
   19ff8:	b	19800 <__assert_fail@plt+0x860c>
   19ffc:	mov	r5, r3
   1a000:	bl	110d4 <__errno_location@plt>
   1a004:	mov	r9, r5
   1a008:	str	r0, [fp, #-508]	; 0xfffffe04
   1a00c:	b	19c60 <__assert_fail@plt+0x8a6c>
   1a010:	mov	r0, r5
   1a014:	mov	r1, r4
   1a018:	bl	10fd8 <realloc@plt>
   1a01c:	cmp	r0, #0
   1a020:	movne	r5, r0
   1a024:	b	19fb4 <__assert_fail@plt+0x8dc0>
   1a028:	mov	r1, r6
   1a02c:	mov	r0, r5
   1a030:	bl	10fd8 <realloc@plt>
   1a034:	cmp	r0, #0
   1a038:	beq	1a000 <__assert_fail@plt+0x8e0c>
   1a03c:	mov	r5, r0
   1a040:	b	19f9c <__assert_fail@plt+0x8da8>
   1a044:	blt	19798 <__assert_fail@plt+0x85a4>
   1a048:	lsl	r6, r6, #1
   1a04c:	cmp	r6, r4
   1a050:	bcs	19f48 <__assert_fail@plt+0x8d54>
   1a054:	cmn	r4, #1
   1a058:	movne	r6, r4
   1a05c:	bne	19f48 <__assert_fail@plt+0x8d54>
   1a060:	b	19798 <__assert_fail@plt+0x85a4>
   1a064:	bl	10fcc <__stack_chk_fail@plt>
   1a068:	cmn	r6, #1
   1a06c:	beq	19f9c <__assert_fail@plt+0x8da8>
   1a070:	b	19798 <__assert_fail@plt+0x85a4>
   1a074:	bl	111dc <abort@plt>
   1a078:	andeq	sp, r2, r8, lsl #30
   1a07c:	ldr	r3, [r1]
   1a080:	ldr	r2, [r1, #4]
   1a084:	cmp	r3, #0
   1a088:	beq	1a198 <__assert_fail@plt+0x8fa4>
   1a08c:	push	{r4, r5, r6, lr}
   1a090:	add	r2, r2, #8
   1a094:	ldr	r6, [pc, #268]	; 1a1a8 <__assert_fail@plt+0x8fb4>
   1a098:	ldr	lr, [pc, #268]	; 1a1ac <__assert_fail@plt+0x8fb8>
   1a09c:	mov	ip, #0
   1a0a0:	ldr	r3, [r2, #-8]
   1a0a4:	sub	r3, r3, #1
   1a0a8:	cmp	r3, #21
   1a0ac:	ldrls	pc, [pc, r3, lsl #2]
   1a0b0:	b	1a1a0 <__assert_fail@plt+0x8fac>
   1a0b4:	andeq	sl, r1, r0, asr r1
   1a0b8:	andeq	sl, r1, r0, asr r1
   1a0bc:	andeq	sl, r1, r4, asr #2
   1a0c0:	andeq	sl, r1, r4, asr #2
   1a0c4:	andeq	sl, r1, ip, lsl #2
   1a0c8:	andeq	sl, r1, ip, lsl #2
   1a0cc:	andeq	sl, r1, ip, lsl #2
   1a0d0:	andeq	sl, r1, ip, lsl #2
   1a0d4:	andeq	sl, r1, r0, lsr r1
   1a0d8:	andeq	sl, r1, r0, lsr r1
   1a0dc:	andeq	sl, r1, ip, asr r1
   1a0e0:	andeq	sl, r1, ip, asr r1
   1a0e4:	andeq	sl, r1, ip, lsl #2
   1a0e8:	andeq	sl, r1, ip, lsl #2
   1a0ec:	andeq	sl, r1, r0, ror r1
   1a0f0:	andeq	sl, r1, r4, lsl #3
   1a0f4:	andeq	sl, r1, ip, lsl #2
   1a0f8:	andeq	sl, r1, ip, lsl #2
   1a0fc:	andeq	sl, r1, ip, lsl #2
   1a100:	andeq	sl, r1, ip, lsl #2
   1a104:	andeq	sl, r1, ip, lsl #2
   1a108:	andeq	sl, r1, ip, lsl #2
   1a10c:	ldr	r3, [r0], #4
   1a110:	str	r3, [r2]
   1a114:	ldr	r3, [r1]
   1a118:	add	ip, ip, #1
   1a11c:	cmp	r3, ip
   1a120:	add	r2, r2, #16
   1a124:	bhi	1a0a0 <__assert_fail@plt+0x8eac>
   1a128:	mov	r0, #0
   1a12c:	pop	{r4, r5, r6, pc}
   1a130:	add	r0, r0, #7
   1a134:	bic	r0, r0, #7
   1a138:	ldrd	r4, [r0], #8
   1a13c:	strd	r4, [r2]
   1a140:	b	1a114 <__assert_fail@plt+0x8f20>
   1a144:	ldr	r3, [r0], #4
   1a148:	strh	r3, [r2]
   1a14c:	b	1a114 <__assert_fail@plt+0x8f20>
   1a150:	ldr	r3, [r0], #4
   1a154:	strb	r3, [r2]
   1a158:	b	1a114 <__assert_fail@plt+0x8f20>
   1a15c:	add	r0, r0, #7
   1a160:	bic	r0, r0, #7
   1a164:	ldrd	r4, [r0], #8
   1a168:	strd	r4, [r2]
   1a16c:	b	1a114 <__assert_fail@plt+0x8f20>
   1a170:	ldr	r3, [r0], #4
   1a174:	cmp	r3, #0
   1a178:	streq	lr, [r2]
   1a17c:	bne	1a110 <__assert_fail@plt+0x8f1c>
   1a180:	b	1a114 <__assert_fail@plt+0x8f20>
   1a184:	ldr	r3, [r0], #4
   1a188:	cmp	r3, #0
   1a18c:	streq	r6, [r2]
   1a190:	bne	1a110 <__assert_fail@plt+0x8f1c>
   1a194:	b	1a114 <__assert_fail@plt+0x8f20>
   1a198:	mov	r0, #0
   1a19c:	bx	lr
   1a1a0:	mvn	r0, #0
   1a1a4:	pop	{r4, r5, r6, pc}
   1a1a8:	andeq	sp, r1, r0, lsr #1
   1a1ac:	strheq	sp, [r1], -ip
   1a1b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1b4:	mov	sl, r2
   1a1b8:	sub	sp, sp, #44	; 0x2c
   1a1bc:	mov	fp, r1
   1a1c0:	mov	r3, r1
   1a1c4:	mov	r1, sl
   1a1c8:	mov	r2, #0
   1a1cc:	mov	ip, #7
   1a1d0:	str	r2, [r3], #16
   1a1d4:	str	fp, [sp, #4]
   1a1d8:	str	r3, [fp, #4]
   1a1dc:	mov	r4, r2
   1a1e0:	str	r2, [r1], #8
   1a1e4:	str	ip, [sp, #8]
   1a1e8:	mov	r7, r0
   1a1ec:	str	r3, [sp, #36]	; 0x24
   1a1f0:	str	r2, [sp, #28]
   1a1f4:	str	r1, [sp, #12]
   1a1f8:	str	r2, [sp, #16]
   1a1fc:	str	r1, [sl, #4]
   1a200:	str	r2, [sp, #32]
   1a204:	mov	r9, r2
   1a208:	str	ip, [sp, #24]
   1a20c:	mov	fp, sl
   1a210:	b	1a220 <__assert_fail@plt+0x902c>
   1a214:	cmp	r0, #37	; 0x25
   1a218:	mov	r5, r7
   1a21c:	beq	1a260 <__assert_fail@plt+0x906c>
   1a220:	mov	r2, r7
   1a224:	ldrb	r0, [r7], #1
   1a228:	cmp	r0, #0
   1a22c:	bne	1a214 <__assert_fail@plt+0x9020>
   1a230:	add	ip, r4, r4, lsl #2
   1a234:	ldr	fp, [sp, #4]
   1a238:	add	r4, r4, ip, lsl #1
   1a23c:	mov	r1, r0
   1a240:	str	r2, [r3, r4, lsl #2]
   1a244:	ldr	r3, [sp, #16]
   1a248:	str	r3, [fp, #8]
   1a24c:	ldr	r3, [sp, #28]
   1a250:	str	r3, [fp, #12]
   1a254:	mov	r0, r1
   1a258:	add	sp, sp, #44	; 0x2c
   1a25c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a260:	add	r1, r4, r4, lsl #2
   1a264:	mvn	r8, #0
   1a268:	add	r4, r4, r1, lsl #1
   1a26c:	add	r6, r3, r4, lsl #2
   1a270:	str	r2, [r3, r4, lsl #2]
   1a274:	str	r9, [r6, #8]
   1a278:	str	r9, [r6, #12]
   1a27c:	str	r9, [r6, #16]
   1a280:	str	r9, [r6, #24]
   1a284:	str	r9, [r6, #28]
   1a288:	str	r8, [r6, #20]
   1a28c:	str	r8, [r6, #32]
   1a290:	str	r8, [r6, #40]	; 0x28
   1a294:	ldrb	r4, [r7]
   1a298:	sub	r0, r4, #48	; 0x30
   1a29c:	uxtb	r3, r0
   1a2a0:	cmp	r3, #9
   1a2a4:	bhi	1a2f0 <__assert_fail@plt+0x90fc>
   1a2a8:	b	1a768 <__assert_fail@plt+0x9574>
   1a2ac:	cmp	r4, #45	; 0x2d
   1a2b0:	beq	1a30c <__assert_fail@plt+0x9118>
   1a2b4:	cmp	r4, #43	; 0x2b
   1a2b8:	beq	1a31c <__assert_fail@plt+0x9128>
   1a2bc:	cmp	r4, #32
   1a2c0:	beq	1a32c <__assert_fail@plt+0x9138>
   1a2c4:	cmp	r4, #35	; 0x23
   1a2c8:	beq	1a33c <__assert_fail@plt+0x9148>
   1a2cc:	cmp	r4, #48	; 0x30
   1a2d0:	beq	1a34c <__assert_fail@plt+0x9158>
   1a2d4:	cmp	r4, #73	; 0x49
   1a2d8:	bne	1a35c <__assert_fail@plt+0x9168>
   1a2dc:	ldr	r3, [r6, #8]
   1a2e0:	orr	r3, r3, #64	; 0x40
   1a2e4:	str	r3, [r6, #8]
   1a2e8:	ldrb	r4, [r7]
   1a2ec:	mov	r5, r7
   1a2f0:	cmp	r4, #39	; 0x27
   1a2f4:	add	r7, r5, #1
   1a2f8:	bne	1a2ac <__assert_fail@plt+0x90b8>
   1a2fc:	ldr	r3, [r6, #8]
   1a300:	orr	r3, r3, #1
   1a304:	str	r3, [r6, #8]
   1a308:	b	1a2e8 <__assert_fail@plt+0x90f4>
   1a30c:	ldr	r3, [r6, #8]
   1a310:	orr	r3, r3, #2
   1a314:	str	r3, [r6, #8]
   1a318:	b	1a2e8 <__assert_fail@plt+0x90f4>
   1a31c:	ldr	r3, [r6, #8]
   1a320:	orr	r3, r3, #4
   1a324:	str	r3, [r6, #8]
   1a328:	b	1a2e8 <__assert_fail@plt+0x90f4>
   1a32c:	ldr	r3, [r6, #8]
   1a330:	orr	r3, r3, #8
   1a334:	str	r3, [r6, #8]
   1a338:	b	1a2e8 <__assert_fail@plt+0x90f4>
   1a33c:	ldr	r3, [r6, #8]
   1a340:	orr	r3, r3, #16
   1a344:	str	r3, [r6, #8]
   1a348:	b	1a2e8 <__assert_fail@plt+0x90f4>
   1a34c:	ldr	r3, [r6, #8]
   1a350:	orr	r3, r3, #32
   1a354:	str	r3, [r6, #8]
   1a358:	b	1a2e8 <__assert_fail@plt+0x90f4>
   1a35c:	cmp	r4, #42	; 0x2a
   1a360:	beq	1a538 <__assert_fail@plt+0x9344>
   1a364:	sub	r3, r4, #48	; 0x30
   1a368:	cmp	r3, #9
   1a36c:	bls	1ab58 <__assert_fail@plt+0x9964>
   1a370:	cmp	r4, #46	; 0x2e
   1a374:	beq	1a5d0 <__assert_fail@plt+0x93dc>
   1a378:	add	r5, r5, #1
   1a37c:	mov	r3, #0
   1a380:	mov	r1, #1
   1a384:	b	1a38c <__assert_fail@plt+0x9198>
   1a388:	ldrb	r4, [r5], #1
   1a38c:	cmp	r4, #104	; 0x68
   1a390:	andeq	r2, r3, #1
   1a394:	mov	r7, r5
   1a398:	orreq	r3, r3, r1, lsl r2
   1a39c:	beq	1a388 <__assert_fail@plt+0x9194>
   1a3a0:	cmp	r4, #76	; 0x4c
   1a3a4:	orreq	r3, r3, #4
   1a3a8:	beq	1a388 <__assert_fail@plt+0x9194>
   1a3ac:	cmp	r4, #108	; 0x6c
   1a3b0:	addeq	r3, r3, #8
   1a3b4:	beq	1a388 <__assert_fail@plt+0x9194>
   1a3b8:	cmp	r4, #106	; 0x6a
   1a3bc:	addeq	r3, r3, #16
   1a3c0:	beq	1a388 <__assert_fail@plt+0x9194>
   1a3c4:	and	r2, r4, #223	; 0xdf
   1a3c8:	cmp	r2, #90	; 0x5a
   1a3cc:	beq	1a388 <__assert_fail@plt+0x9194>
   1a3d0:	cmp	r4, #116	; 0x74
   1a3d4:	beq	1a388 <__assert_fail@plt+0x9194>
   1a3d8:	sub	r2, r4, #37	; 0x25
   1a3dc:	cmp	r2, #83	; 0x53
   1a3e0:	ldrls	pc, [pc, r2, lsl #2]
   1a3e4:	b	1a7d8 <__assert_fail@plt+0x95e4>
   1a3e8:	andeq	sl, r1, ip, asr #13
   1a3ec:	ldrdeq	sl, [r1], -r8
   1a3f0:	ldrdeq	sl, [r1], -r8
   1a3f4:	ldrdeq	sl, [r1], -r8
   1a3f8:	ldrdeq	sl, [r1], -r8
   1a3fc:	ldrdeq	sl, [r1], -r8
   1a400:	ldrdeq	sl, [r1], -r8
   1a404:	ldrdeq	sl, [r1], -r8
   1a408:	ldrdeq	sl, [r1], -r8
   1a40c:	ldrdeq	sl, [r1], -r8
   1a410:	ldrdeq	sl, [r1], -r8
   1a414:	ldrdeq	sl, [r1], -r8
   1a418:	ldrdeq	sl, [r1], -r8
   1a41c:	ldrdeq	sl, [r1], -r8
   1a420:	ldrdeq	sl, [r1], -r8
   1a424:	ldrdeq	sl, [r1], -r8
   1a428:	ldrdeq	sl, [r1], -r8
   1a42c:	ldrdeq	sl, [r1], -r8
   1a430:	ldrdeq	sl, [r1], -r8
   1a434:	ldrdeq	sl, [r1], -r8
   1a438:	ldrdeq	sl, [r1], -r8
   1a43c:	ldrdeq	sl, [r1], -r8
   1a440:	ldrdeq	sl, [r1], -r8
   1a444:	ldrdeq	sl, [r1], -r8
   1a448:	ldrdeq	sl, [r1], -r8
   1a44c:	ldrdeq	sl, [r1], -r8
   1a450:	ldrdeq	sl, [r1], -r8
   1a454:	ldrdeq	sl, [r1], -r8
   1a458:	andeq	sl, r1, r0, lsr #18
   1a45c:	ldrdeq	sl, [r1], -r8
   1a460:	andeq	sl, r1, ip, ror #12
   1a464:	ldrdeq	sl, [r1], -r8
   1a468:	andeq	sl, r1, r0, lsr #18
   1a46c:	andeq	sl, r1, r0, lsr #18
   1a470:	andeq	sl, r1, r0, lsr #18
   1a474:	ldrdeq	sl, [r1], -r8
   1a478:	ldrdeq	sl, [r1], -r8
   1a47c:	ldrdeq	sl, [r1], -r8
   1a480:	ldrdeq	sl, [r1], -r8
   1a484:	ldrdeq	sl, [r1], -r8
   1a488:	ldrdeq	sl, [r1], -r8
   1a48c:	ldrdeq	sl, [r1], -r8
   1a490:	ldrdeq	sl, [r1], -r8
   1a494:	ldrdeq	sl, [r1], -r8
   1a498:	ldrdeq	sl, [r1], -r8
   1a49c:	ldrdeq	sl, [r1], -r8
   1a4a0:	andeq	sl, r1, r4, ror #20
   1a4a4:	ldrdeq	sl, [r1], -r8
   1a4a8:	ldrdeq	sl, [r1], -r8
   1a4ac:	ldrdeq	sl, [r1], -r8
   1a4b0:	ldrdeq	sl, [r1], -r8
   1a4b4:	andeq	sl, r1, r0, lsr #20
   1a4b8:	ldrdeq	sl, [r1], -r8
   1a4bc:	ldrdeq	sl, [r1], -r8
   1a4c0:	ldrdeq	sl, [r1], -r8
   1a4c4:	ldrdeq	sl, [r1], -r8
   1a4c8:	ldrdeq	sl, [r1], -r8
   1a4cc:	ldrdeq	sl, [r1], -r8
   1a4d0:	ldrdeq	sl, [r1], -r8
   1a4d4:	ldrdeq	sl, [r1], -r8
   1a4d8:	andeq	sl, r1, r0, lsr #18
   1a4dc:	ldrdeq	sl, [r1], -r8
   1a4e0:	andeq	sl, r1, ip, lsl #20
   1a4e4:	andeq	sl, r1, r8, asr #19
   1a4e8:	andeq	sl, r1, r0, lsr #18
   1a4ec:	andeq	sl, r1, r0, lsr #18
   1a4f0:	andeq	sl, r1, r0, lsr #18
   1a4f4:	ldrdeq	sl, [r1], -r8
   1a4f8:	andeq	sl, r1, r8, asr #19
   1a4fc:	ldrdeq	sl, [r1], -r8
   1a500:	ldrdeq	sl, [r1], -r8
   1a504:	ldrdeq	sl, [r1], -r8
   1a508:	ldrdeq	sl, [r1], -r8
   1a50c:	andeq	sl, r1, r0, lsl #21
   1a510:	andeq	sl, r1, r0, lsr #20
   1a514:	andeq	sl, r1, r4, ror sl
   1a518:	ldrdeq	sl, [r1], -r8
   1a51c:	ldrdeq	sl, [r1], -r8
   1a520:			; <UNDEFINED> instruction: 0x0001a9b4
   1a524:	ldrdeq	sl, [r1], -r8
   1a528:	andeq	sl, r1, r0, lsr #20
   1a52c:	ldrdeq	sl, [r1], -r8
   1a530:	ldrdeq	sl, [r1], -r8
   1a534:	andeq	sl, r1, r0, lsr #20
   1a538:	str	r5, [r6, #12]
   1a53c:	str	r7, [r6, #16]
   1a540:	ldrb	r3, [r5, #1]
   1a544:	ldr	r2, [sp, #16]
   1a548:	sub	r3, r3, #48	; 0x30
   1a54c:	cmp	r2, #0
   1a550:	moveq	r2, #1
   1a554:	str	r2, [sp, #16]
   1a558:	uxtb	r2, r3
   1a55c:	cmp	r2, #9
   1a560:	bls	1a944 <__assert_fail@plt+0x9750>
   1a564:	ldr	r4, [r6, #20]
   1a568:	cmn	r4, #1
   1a56c:	beq	1a900 <__assert_fail@plt+0x970c>
   1a570:	ldr	r3, [sp, #8]
   1a574:	ldr	sl, [fp, #4]
   1a578:	cmp	r3, r4
   1a57c:	bls	1a868 <__assert_fail@plt+0x9674>
   1a580:	ldr	r2, [fp]
   1a584:	cmp	r2, r4
   1a588:	bhi	1a5a4 <__assert_fail@plt+0x93b0>
   1a58c:	sub	r1, sl, #16
   1a590:	add	r2, r2, #1
   1a594:	cmp	r2, r4
   1a598:	str	r9, [r1, r2, lsl #4]
   1a59c:	bls	1a590 <__assert_fail@plt+0x939c>
   1a5a0:	str	r2, [fp]
   1a5a4:	ldr	r3, [sl, r4, lsl #4]
   1a5a8:	cmp	r3, #0
   1a5ac:	bne	1abb4 <__assert_fail@plt+0x99c0>
   1a5b0:	mov	r3, r7
   1a5b4:	mov	r2, #5
   1a5b8:	str	r2, [sl, r4, lsl #4]
   1a5bc:	ldrb	r4, [r3], #1
   1a5c0:	mov	r5, r7
   1a5c4:	cmp	r4, #46	; 0x2e
   1a5c8:	mov	r7, r3
   1a5cc:	bne	1a378 <__assert_fail@plt+0x9184>
   1a5d0:	ldrb	r3, [r5, #1]
   1a5d4:	cmp	r3, #42	; 0x2a
   1a5d8:	bne	1a820 <__assert_fail@plt+0x962c>
   1a5dc:	add	r7, r5, #2
   1a5e0:	str	r5, [r6, #24]
   1a5e4:	str	r7, [r6, #28]
   1a5e8:	ldrb	r1, [r5, #2]
   1a5ec:	ldr	r3, [sp, #28]
   1a5f0:	sub	r1, r1, #48	; 0x30
   1a5f4:	cmp	r3, #2
   1a5f8:	movcc	r3, #2
   1a5fc:	str	r3, [sp, #28]
   1a600:	uxtb	r3, r1
   1a604:	cmp	r3, #9
   1a608:	bls	1ad34 <__assert_fail@plt+0x9b40>
   1a60c:	ldr	r4, [r6, #32]
   1a610:	cmn	r4, #1
   1a614:	beq	1ad14 <__assert_fail@plt+0x9b20>
   1a618:	ldr	r3, [sp, #8]
   1a61c:	ldr	sl, [fp, #4]
   1a620:	cmp	r3, r4
   1a624:	bls	1ac38 <__assert_fail@plt+0x9a44>
   1a628:	ldr	r2, [fp]
   1a62c:	cmp	r2, r4
   1a630:	bhi	1a64c <__assert_fail@plt+0x9458>
   1a634:	sub	r1, sl, #16
   1a638:	add	r2, r2, #1
   1a63c:	cmp	r2, r4
   1a640:	str	r9, [r1, r2, lsl #4]
   1a644:	bls	1a638 <__assert_fail@plt+0x9444>
   1a648:	str	r2, [fp]
   1a64c:	ldr	r3, [sl, r4, lsl #4]
   1a650:	cmp	r3, #0
   1a654:	bne	1ac98 <__assert_fail@plt+0x9aa4>
   1a658:	mov	r3, #5
   1a65c:	str	r3, [sl, r4, lsl #4]
   1a660:	mov	r5, r7
   1a664:	ldrb	r4, [r7]
   1a668:	b	1a378 <__assert_fail@plt+0x9184>
   1a66c:	mov	r4, #99	; 0x63
   1a670:	mov	r3, #14
   1a674:	str	r3, [sp, #20]
   1a678:	cmn	r8, #1
   1a67c:	strne	r8, [r6, #40]	; 0x28
   1a680:	beq	1ab38 <__assert_fail@plt+0x9944>
   1a684:	ldr	r3, [sp, #8]
   1a688:	ldr	sl, [fp, #4]
   1a68c:	cmp	r3, r8
   1a690:	bls	1aadc <__assert_fail@plt+0x98e8>
   1a694:	ldr	r3, [fp]
   1a698:	cmp	r3, r8
   1a69c:	bhi	1a6b8 <__assert_fail@plt+0x94c4>
   1a6a0:	sub	r1, sl, #16
   1a6a4:	add	r3, r3, #1
   1a6a8:	cmp	r3, r8
   1a6ac:	str	r9, [r1, r3, lsl #4]
   1a6b0:	bls	1a6a4 <__assert_fail@plt+0x94b0>
   1a6b4:	str	r3, [fp]
   1a6b8:	ldr	r3, [sl, r8, lsl #4]
   1a6bc:	cmp	r3, #0
   1a6c0:	bne	1aac4 <__assert_fail@plt+0x98d0>
   1a6c4:	ldr	r3, [sp, #20]
   1a6c8:	str	r3, [sl, r8, lsl #4]
   1a6cc:	ldr	r3, [sp, #4]
   1a6d0:	strb	r4, [r6, #36]	; 0x24
   1a6d4:	ldr	r2, [sp, #24]
   1a6d8:	ldr	r4, [r3]
   1a6dc:	str	r5, [r6, #4]
   1a6e0:	add	r4, r4, #1
   1a6e4:	cmp	r2, r4
   1a6e8:	str	r4, [r3]
   1a6ec:	ldrhi	r3, [r3, #4]
   1a6f0:	bhi	1a220 <__assert_fail@plt+0x902c>
   1a6f4:	ldr	r3, [sp, #24]
   1a6f8:	cmp	r3, #0
   1a6fc:	blt	1ae10 <__assert_fail@plt+0x9c1c>
   1a700:	ldr	r3, [sp, #24]
   1a704:	ldr	r2, [pc, #1896]	; 1ae74 <__assert_fail@plt+0x9c80>
   1a708:	lsl	r5, r3, #1
   1a70c:	cmp	r5, r2
   1a710:	bhi	1ae10 <__assert_fail@plt+0x9c1c>
   1a714:	ldr	r2, [sp, #4]
   1a718:	add	r1, r3, r3, lsl #2
   1a71c:	ldr	r6, [r2, #4]
   1a720:	add	r1, r3, r1, lsl #1
   1a724:	ldr	r3, [sp, #36]	; 0x24
   1a728:	lsl	r1, r1, #3
   1a72c:	cmp	r3, r6
   1a730:	beq	1a8c8 <__assert_fail@plt+0x96d4>
   1a734:	mov	r0, r6
   1a738:	bl	10fd8 <realloc@plt>
   1a73c:	subs	r3, r0, #0
   1a740:	beq	1ae10 <__assert_fail@plt+0x9c1c>
   1a744:	ldr	r2, [sp, #4]
   1a748:	ldm	r2, {r4, r6}
   1a74c:	ldr	r2, [sp, #36]	; 0x24
   1a750:	cmp	r2, r6
   1a754:	beq	1a8d8 <__assert_fail@plt+0x96e4>
   1a758:	ldr	r2, [sp, #4]
   1a75c:	str	r5, [sp, #24]
   1a760:	str	r3, [r2, #4]
   1a764:	b	1a220 <__assert_fail@plt+0x902c>
   1a768:	mov	r2, r7
   1a76c:	ldrb	r3, [r2, #1]!
   1a770:	sub	r1, r3, #48	; 0x30
   1a774:	cmp	r1, #9
   1a778:	bls	1a76c <__assert_fail@plt+0x9578>
   1a77c:	cmp	r3, #36	; 0x24
   1a780:	mvnne	r8, #0
   1a784:	bne	1a2f0 <__assert_fail@plt+0x90fc>
   1a788:	mov	r2, #0
   1a78c:	b	1a798 <__assert_fail@plt+0x95a4>
   1a790:	cmp	ip, #9
   1a794:	bhi	1ada4 <__assert_fail@plt+0x9bb0>
   1a798:	ldr	r3, [pc, #1752]	; 1ae78 <__assert_fail@plt+0x9c84>
   1a79c:	mov	r1, r5
   1a7a0:	cmp	r2, r3
   1a7a4:	addls	r2, r2, r2, lsl #2
   1a7a8:	mvnhi	r3, #0
   1a7ac:	lslls	r3, r2, #1
   1a7b0:	ldrb	ip, [r5, #1]!
   1a7b4:	adds	r3, r0, r3
   1a7b8:	mov	r2, r3
   1a7bc:	sub	r0, ip, #48	; 0x30
   1a7c0:	uxtb	ip, r0
   1a7c4:	bcc	1a790 <__assert_fail@plt+0x959c>
   1a7c8:	cmp	ip, #9
   1a7cc:	mvn	r3, #0
   1a7d0:	mov	r1, r5
   1a7d4:	bls	1a7b0 <__assert_fail@plt+0x95bc>
   1a7d8:	mov	sl, fp
   1a7dc:	ldr	fp, [sp, #4]
   1a7e0:	ldr	r3, [sl, #4]
   1a7e4:	ldr	r2, [sp, #12]
   1a7e8:	cmp	r2, r3
   1a7ec:	beq	1a7f8 <__assert_fail@plt+0x9604>
   1a7f0:	mov	r0, r3
   1a7f4:	bl	10f54 <free@plt>
   1a7f8:	ldr	r0, [fp, #4]
   1a7fc:	ldr	r3, [sp, #36]	; 0x24
   1a800:	cmp	r3, r0
   1a804:	beq	1a80c <__assert_fail@plt+0x9618>
   1a808:	bl	10f54 <free@plt>
   1a80c:	bl	110d4 <__errno_location@plt>
   1a810:	mov	r3, #22
   1a814:	mvn	r1, #0
   1a818:	str	r3, [r0]
   1a81c:	b	1a254 <__assert_fail@plt+0x9060>
   1a820:	str	r5, [r6, #24]
   1a824:	ldrb	r3, [r5, #1]
   1a828:	sub	r3, r3, #48	; 0x30
   1a82c:	cmp	r3, #9
   1a830:	bhi	1adec <__assert_fail@plt+0x9bf8>
   1a834:	ldrb	r3, [r7, #1]!
   1a838:	sub	r3, r3, #48	; 0x30
   1a83c:	cmp	r3, #9
   1a840:	bls	1a834 <__assert_fail@plt+0x9640>
   1a844:	sub	r3, r7, r5
   1a848:	mov	r5, r7
   1a84c:	ldr	r2, [sp, #28]
   1a850:	str	r7, [r6, #28]
   1a854:	cmp	r2, r3
   1a858:	movcs	r3, r2
   1a85c:	ldrb	r4, [r7]
   1a860:	str	r3, [sp, #28]
   1a864:	b	1a378 <__assert_fail@plt+0x9184>
   1a868:	ldr	r3, [sp, #8]
   1a86c:	lsl	r3, r3, #1
   1a870:	cmp	r3, r4
   1a874:	str	r3, [sp, #8]
   1a878:	addls	r3, r4, #1
   1a87c:	strls	r3, [sp, #8]
   1a880:	ldr	r3, [sp, #8]
   1a884:	cmn	r3, #-268435455	; 0xf0000001
   1a888:	bhi	1ae5c <__assert_fail@plt+0x9c68>
   1a88c:	ldr	r2, [sp, #12]
   1a890:	lsl	r1, r3, #4
   1a894:	cmp	r2, sl
   1a898:	beq	1abf4 <__assert_fail@plt+0x9a00>
   1a89c:	mov	r0, sl
   1a8a0:	bl	10fd8 <realloc@plt>
   1a8a4:	ldr	r3, [fp, #4]
   1a8a8:	subs	sl, r0, #0
   1a8ac:	beq	1ae60 <__assert_fail@plt+0x9c6c>
   1a8b0:	ldr	r2, [sp, #12]
   1a8b4:	cmp	r2, r3
   1a8b8:	ldr	r2, [fp]
   1a8bc:	beq	1ae68 <__assert_fail@plt+0x9c74>
   1a8c0:	str	sl, [fp, #4]
   1a8c4:	b	1a584 <__assert_fail@plt+0x9390>
   1a8c8:	mov	r0, r1
   1a8cc:	bl	11068 <malloc@plt>
   1a8d0:	subs	r3, r0, #0
   1a8d4:	beq	1acf0 <__assert_fail@plt+0x9afc>
   1a8d8:	add	r2, r4, r4, lsl #2
   1a8dc:	mov	r0, r3
   1a8e0:	add	r2, r4, r2, lsl #1
   1a8e4:	mov	r1, r6
   1a8e8:	lsl	r2, r2, #2
   1a8ec:	bl	10f78 <memcpy@plt>
   1a8f0:	ldr	r2, [sp, #4]
   1a8f4:	ldr	r4, [r2]
   1a8f8:	mov	r3, r0
   1a8fc:	b	1a758 <__assert_fail@plt+0x9564>
   1a900:	ldr	r3, [sp, #32]
   1a904:	cmn	r3, #1
   1a908:	str	r3, [r6, #20]
   1a90c:	add	r3, r3, #1
   1a910:	beq	1a7d8 <__assert_fail@plt+0x95e4>
   1a914:	ldr	r4, [sp, #32]
   1a918:	str	r3, [sp, #32]
   1a91c:	b	1a570 <__assert_fail@plt+0x937c>
   1a920:	cmp	r3, #15
   1a924:	movgt	r3, #12
   1a928:	strgt	r3, [sp, #20]
   1a92c:	bgt	1a678 <__assert_fail@plt+0x9484>
   1a930:	tst	r3, #4
   1a934:	movne	r3, #12
   1a938:	moveq	r3, #11
   1a93c:	str	r3, [sp, #20]
   1a940:	b	1a678 <__assert_fail@plt+0x9484>
   1a944:	mov	r1, r7
   1a948:	ldrb	r2, [r1, #1]!
   1a94c:	sub	r0, r2, #48	; 0x30
   1a950:	cmp	r0, #9
   1a954:	bls	1a948 <__assert_fail@plt+0x9754>
   1a958:	cmp	r2, #36	; 0x24
   1a95c:	bne	1a564 <__assert_fail@plt+0x9370>
   1a960:	mov	r1, #0
   1a964:	b	1a970 <__assert_fail@plt+0x977c>
   1a968:	cmp	ip, #9
   1a96c:	bhi	1ae2c <__assert_fail@plt+0x9c38>
   1a970:	ldr	r2, [pc, #1280]	; 1ae78 <__assert_fail@plt+0x9c84>
   1a974:	mov	r0, r7
   1a978:	cmp	r1, r2
   1a97c:	addls	r1, r1, r1, lsl #2
   1a980:	mvnhi	r2, #0
   1a984:	lslls	r2, r1, #1
   1a988:	ldrb	ip, [r7, #1]!
   1a98c:	adds	r2, r3, r2
   1a990:	mov	r1, r2
   1a994:	sub	r3, ip, #48	; 0x30
   1a998:	uxtb	ip, r3
   1a99c:	bcc	1a968 <__assert_fail@plt+0x9774>
   1a9a0:	cmp	ip, #9
   1a9a4:	mvn	r2, #0
   1a9a8:	mov	r0, r7
   1a9ac:	bls	1a988 <__assert_fail@plt+0x9794>
   1a9b0:	b	1a7d8 <__assert_fail@plt+0x95e4>
   1a9b4:	cmp	r3, #7
   1a9b8:	movgt	r3, #16
   1a9bc:	movle	r3, #15
   1a9c0:	str	r3, [sp, #20]
   1a9c4:	b	1a678 <__assert_fail@plt+0x9484>
   1a9c8:	cmp	r3, #15
   1a9cc:	bgt	1acc4 <__assert_fail@plt+0x9ad0>
   1a9d0:	tst	r3, #4
   1a9d4:	bne	1acc4 <__assert_fail@plt+0x9ad0>
   1a9d8:	cmp	r3, #7
   1a9dc:	movgt	r3, #7
   1a9e0:	strgt	r3, [sp, #20]
   1a9e4:	bgt	1a678 <__assert_fail@plt+0x9484>
   1a9e8:	tst	r3, #2
   1a9ec:	movne	r3, #1
   1a9f0:	strne	r3, [sp, #20]
   1a9f4:	bne	1a678 <__assert_fail@plt+0x9484>
   1a9f8:	tst	r3, #1
   1a9fc:	movne	r3, #3
   1aa00:	moveq	r3, #5
   1aa04:	str	r3, [sp, #20]
   1aa08:	b	1a678 <__assert_fail@plt+0x9484>
   1aa0c:	cmp	r3, #7
   1aa10:	movgt	r3, #14
   1aa14:	movle	r3, #13
   1aa18:	str	r3, [sp, #20]
   1aa1c:	b	1a678 <__assert_fail@plt+0x9484>
   1aa20:	cmp	r3, #15
   1aa24:	bgt	1acb8 <__assert_fail@plt+0x9ac4>
   1aa28:	tst	r3, #4
   1aa2c:	bne	1acb8 <__assert_fail@plt+0x9ac4>
   1aa30:	cmp	r3, #7
   1aa34:	movgt	r3, #8
   1aa38:	strgt	r3, [sp, #20]
   1aa3c:	bgt	1a678 <__assert_fail@plt+0x9484>
   1aa40:	tst	r3, #2
   1aa44:	movne	r3, #2
   1aa48:	strne	r3, [sp, #20]
   1aa4c:	bne	1a678 <__assert_fail@plt+0x9484>
   1aa50:	tst	r3, #1
   1aa54:	movne	r3, #4
   1aa58:	moveq	r3, #6
   1aa5c:	str	r3, [sp, #20]
   1aa60:	b	1a678 <__assert_fail@plt+0x9484>
   1aa64:	mov	r3, #16
   1aa68:	str	r3, [sp, #20]
   1aa6c:	mov	r4, #115	; 0x73
   1aa70:	b	1a678 <__assert_fail@plt+0x9484>
   1aa74:	mov	r3, #17
   1aa78:	str	r3, [sp, #20]
   1aa7c:	b	1a678 <__assert_fail@plt+0x9484>
   1aa80:	cmp	r3, #15
   1aa84:	bgt	1acac <__assert_fail@plt+0x9ab8>
   1aa88:	tst	r3, #4
   1aa8c:	bne	1acac <__assert_fail@plt+0x9ab8>
   1aa90:	cmp	r3, #7
   1aa94:	movgt	r3, #21
   1aa98:	strgt	r3, [sp, #20]
   1aa9c:	bgt	1a678 <__assert_fail@plt+0x9484>
   1aaa0:	tst	r3, #2
   1aaa4:	movne	r3, #18
   1aaa8:	strne	r3, [sp, #20]
   1aaac:	bne	1a678 <__assert_fail@plt+0x9484>
   1aab0:	tst	r3, #1
   1aab4:	movne	r3, #19
   1aab8:	moveq	r3, #20
   1aabc:	str	r3, [sp, #20]
   1aac0:	b	1a678 <__assert_fail@plt+0x9484>
   1aac4:	ldr	r2, [sp, #20]
   1aac8:	cmp	r3, r2
   1aacc:	beq	1a6cc <__assert_fail@plt+0x94d8>
   1aad0:	mov	r3, sl
   1aad4:	ldr	fp, [sp, #4]
   1aad8:	b	1a7e4 <__assert_fail@plt+0x95f0>
   1aadc:	ldr	r3, [sp, #8]
   1aae0:	lsl	r3, r3, #1
   1aae4:	cmp	r3, r8
   1aae8:	str	r3, [sp, #8]
   1aaec:	addls	r3, r8, #1
   1aaf0:	strls	r3, [sp, #8]
   1aaf4:	ldr	r3, [sp, #8]
   1aaf8:	cmn	r3, #-268435455	; 0xf0000001
   1aafc:	bhi	1ae5c <__assert_fail@plt+0x9c68>
   1ab00:	ldr	r2, [sp, #12]
   1ab04:	lsl	r1, r3, #4
   1ab08:	cmp	r2, sl
   1ab0c:	beq	1abc8 <__assert_fail@plt+0x99d4>
   1ab10:	mov	r0, sl
   1ab14:	bl	10fd8 <realloc@plt>
   1ab18:	subs	sl, r0, #0
   1ab1c:	beq	1ae10 <__assert_fail@plt+0x9c1c>
   1ab20:	ldr	r3, [fp, #4]
   1ab24:	ldr	r2, [sp, #12]
   1ab28:	cmp	r2, r3
   1ab2c:	beq	1ae50 <__assert_fail@plt+0x9c5c>
   1ab30:	str	sl, [fp, #4]
   1ab34:	b	1a694 <__assert_fail@plt+0x94a0>
   1ab38:	ldr	r3, [sp, #32]
   1ab3c:	cmn	r3, #1
   1ab40:	str	r3, [r6, #40]	; 0x28
   1ab44:	add	r3, r3, #1
   1ab48:	beq	1a7d8 <__assert_fail@plt+0x95e4>
   1ab4c:	ldr	r8, [sp, #32]
   1ab50:	str	r3, [sp, #32]
   1ab54:	b	1a684 <__assert_fail@plt+0x9490>
   1ab58:	str	r5, [r6, #12]
   1ab5c:	ldrb	r3, [r5]
   1ab60:	sub	r3, r3, #48	; 0x30
   1ab64:	cmp	r3, #9
   1ab68:	bhi	1aba8 <__assert_fail@plt+0x99b4>
   1ab6c:	mov	r7, r5
   1ab70:	b	1ab78 <__assert_fail@plt+0x9984>
   1ab74:	mov	r7, r2
   1ab78:	ldrb	r3, [r7, #1]
   1ab7c:	add	r2, r7, #1
   1ab80:	sub	r3, r3, #48	; 0x30
   1ab84:	cmp	r3, #9
   1ab88:	bls	1ab74 <__assert_fail@plt+0x9980>
   1ab8c:	ldr	r3, [sp, #16]
   1ab90:	sub	r5, r2, r5
   1ab94:	cmp	r3, r5
   1ab98:	movcc	r3, r5
   1ab9c:	add	r7, r7, #2
   1aba0:	mov	r5, r2
   1aba4:	str	r3, [sp, #16]
   1aba8:	str	r5, [r6, #16]
   1abac:	ldrb	r4, [r5]
   1abb0:	b	1a370 <__assert_fail@plt+0x917c>
   1abb4:	cmp	r3, #5
   1abb8:	bne	1aad0 <__assert_fail@plt+0x98dc>
   1abbc:	mov	r5, r7
   1abc0:	ldrb	r4, [r7], #1
   1abc4:	b	1a370 <__assert_fail@plt+0x917c>
   1abc8:	mov	r0, r1
   1abcc:	bl	11068 <malloc@plt>
   1abd0:	subs	r3, r0, #0
   1abd4:	beq	1ac04 <__assert_fail@plt+0x9a10>
   1abd8:	ldr	r2, [fp]
   1abdc:	mov	r1, sl
   1abe0:	mov	r0, r3
   1abe4:	lsl	r2, r2, #4
   1abe8:	bl	10f78 <memcpy@plt>
   1abec:	mov	sl, r0
   1abf0:	b	1ab30 <__assert_fail@plt+0x993c>
   1abf4:	mov	r0, r1
   1abf8:	bl	11068 <malloc@plt>
   1abfc:	subs	r3, r0, #0
   1ac00:	bne	1acd0 <__assert_fail@plt+0x9adc>
   1ac04:	ldr	fp, [sp, #4]
   1ac08:	ldr	r0, [fp, #4]
   1ac0c:	ldr	r3, [sp, #36]	; 0x24
   1ac10:	cmp	r3, r0
   1ac14:	beq	1ac1c <__assert_fail@plt+0x9a28>
   1ac18:	bl	10f54 <free@plt>
   1ac1c:	bl	110d4 <__errno_location@plt>
   1ac20:	mov	r3, #12
   1ac24:	mvn	r1, #0
   1ac28:	str	r3, [r0]
   1ac2c:	mov	r0, r1
   1ac30:	add	sp, sp, #44	; 0x2c
   1ac34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac38:	ldr	r3, [sp, #8]
   1ac3c:	lsl	r3, r3, #1
   1ac40:	cmp	r3, r4
   1ac44:	str	r3, [sp, #8]
   1ac48:	addls	r3, r4, #1
   1ac4c:	strls	r3, [sp, #8]
   1ac50:	ldr	r3, [sp, #8]
   1ac54:	cmn	r3, #-268435455	; 0xf0000001
   1ac58:	bhi	1ae5c <__assert_fail@plt+0x9c68>
   1ac5c:	ldr	r2, [sp, #12]
   1ac60:	lsl	r1, r3, #4
   1ac64:	cmp	r2, sl
   1ac68:	beq	1adbc <__assert_fail@plt+0x9bc8>
   1ac6c:	mov	r0, sl
   1ac70:	bl	10fd8 <realloc@plt>
   1ac74:	ldr	r3, [fp, #4]
   1ac78:	subs	sl, r0, #0
   1ac7c:	beq	1ae60 <__assert_fail@plt+0x9c6c>
   1ac80:	ldr	r2, [sp, #12]
   1ac84:	cmp	r2, r3
   1ac88:	ldr	r2, [fp]
   1ac8c:	beq	1ae44 <__assert_fail@plt+0x9c50>
   1ac90:	str	sl, [fp, #4]
   1ac94:	b	1a62c <__assert_fail@plt+0x9438>
   1ac98:	cmp	r3, #5
   1ac9c:	bne	1aad0 <__assert_fail@plt+0x98dc>
   1aca0:	ldrb	r4, [r7]
   1aca4:	mov	r5, r7
   1aca8:	b	1a378 <__assert_fail@plt+0x9184>
   1acac:	mov	r3, #22
   1acb0:	str	r3, [sp, #20]
   1acb4:	b	1a678 <__assert_fail@plt+0x9484>
   1acb8:	mov	r3, #10
   1acbc:	str	r3, [sp, #20]
   1acc0:	b	1a678 <__assert_fail@plt+0x9484>
   1acc4:	mov	r3, #9
   1acc8:	str	r3, [sp, #20]
   1accc:	b	1a678 <__assert_fail@plt+0x9484>
   1acd0:	ldr	r2, [fp]
   1acd4:	lsl	r2, r2, #4
   1acd8:	mov	r1, sl
   1acdc:	mov	r0, r3
   1ace0:	bl	10f78 <memcpy@plt>
   1ace4:	ldr	r2, [fp]
   1ace8:	mov	sl, r0
   1acec:	b	1a8c0 <__assert_fail@plt+0x96cc>
   1acf0:	mov	sl, fp
   1acf4:	ldr	r2, [sp, #12]
   1acf8:	ldr	r3, [sl, #4]
   1acfc:	ldr	fp, [sp, #4]
   1ad00:	cmp	r2, r3
   1ad04:	beq	1ac1c <__assert_fail@plt+0x9a28>
   1ad08:	mov	r0, r3
   1ad0c:	bl	10f54 <free@plt>
   1ad10:	b	1ac08 <__assert_fail@plt+0x9a14>
   1ad14:	ldr	r3, [sp, #32]
   1ad18:	cmn	r3, #1
   1ad1c:	str	r3, [r6, #32]
   1ad20:	add	r3, r3, #1
   1ad24:	beq	1a7d8 <__assert_fail@plt+0x95e4>
   1ad28:	ldr	r4, [sp, #32]
   1ad2c:	str	r3, [sp, #32]
   1ad30:	b	1a618 <__assert_fail@plt+0x9424>
   1ad34:	mov	r2, r7
   1ad38:	ldrb	r3, [r2, #1]!
   1ad3c:	sub	r0, r3, #48	; 0x30
   1ad40:	cmp	r0, #9
   1ad44:	bls	1ad38 <__assert_fail@plt+0x9b44>
   1ad48:	cmp	r3, #36	; 0x24
   1ad4c:	bne	1a60c <__assert_fail@plt+0x9418>
   1ad50:	mov	r2, #0
   1ad54:	b	1ad60 <__assert_fail@plt+0x9b6c>
   1ad58:	cmp	ip, #9
   1ad5c:	bhi	1adf8 <__assert_fail@plt+0x9c04>
   1ad60:	ldr	r3, [pc, #272]	; 1ae78 <__assert_fail@plt+0x9c84>
   1ad64:	mov	r0, r7
   1ad68:	cmp	r2, r3
   1ad6c:	addls	r2, r2, r2, lsl #2
   1ad70:	mvnhi	r3, #0
   1ad74:	lslls	r3, r2, #1
   1ad78:	ldrb	ip, [r7, #1]!
   1ad7c:	adds	r3, r1, r3
   1ad80:	mov	r2, r3
   1ad84:	sub	r1, ip, #48	; 0x30
   1ad88:	uxtb	ip, r1
   1ad8c:	bcc	1ad58 <__assert_fail@plt+0x9b64>
   1ad90:	cmp	ip, #9
   1ad94:	mvn	r3, #0
   1ad98:	mov	r0, r7
   1ad9c:	bls	1ad78 <__assert_fail@plt+0x9b84>
   1ada0:	b	1a7d8 <__assert_fail@plt+0x95e4>
   1ada4:	sub	r8, r3, #1
   1ada8:	cmn	r8, #3
   1adac:	bhi	1a7d8 <__assert_fail@plt+0x95e4>
   1adb0:	add	r5, r1, #2
   1adb4:	ldrb	r4, [r1, #2]
   1adb8:	b	1a2f0 <__assert_fail@plt+0x90fc>
   1adbc:	mov	r0, r1
   1adc0:	bl	11068 <malloc@plt>
   1adc4:	subs	r3, r0, #0
   1adc8:	beq	1ac04 <__assert_fail@plt+0x9a10>
   1adcc:	ldr	r2, [fp]
   1add0:	lsl	r2, r2, #4
   1add4:	mov	r1, sl
   1add8:	mov	r0, r3
   1addc:	bl	10f78 <memcpy@plt>
   1ade0:	ldr	r2, [fp]
   1ade4:	mov	sl, r0
   1ade8:	b	1ac90 <__assert_fail@plt+0x9a9c>
   1adec:	mov	r5, r7
   1adf0:	mov	r3, #1
   1adf4:	b	1a84c <__assert_fail@plt+0x9658>
   1adf8:	sub	r4, r3, #1
   1adfc:	cmn	r4, #3
   1ae00:	bhi	1a7d8 <__assert_fail@plt+0x95e4>
   1ae04:	str	r4, [r6, #32]
   1ae08:	add	r7, r0, #2
   1ae0c:	b	1a618 <__assert_fail@plt+0x9424>
   1ae10:	mov	sl, fp
   1ae14:	ldr	fp, [sp, #4]
   1ae18:	ldr	r3, [sl, #4]
   1ae1c:	ldr	r2, [sp, #12]
   1ae20:	cmp	r2, r3
   1ae24:	bne	1ad08 <__assert_fail@plt+0x9b14>
   1ae28:	b	1ac08 <__assert_fail@plt+0x9a14>
   1ae2c:	sub	r4, r2, #1
   1ae30:	cmn	r4, #3
   1ae34:	bhi	1a7d8 <__assert_fail@plt+0x95e4>
   1ae38:	str	r4, [r6, #20]
   1ae3c:	add	r7, r0, #2
   1ae40:	b	1a570 <__assert_fail@plt+0x937c>
   1ae44:	mov	r3, sl
   1ae48:	ldr	sl, [sp, #12]
   1ae4c:	b	1add0 <__assert_fail@plt+0x9bdc>
   1ae50:	mov	r3, sl
   1ae54:	mov	sl, r2
   1ae58:	b	1abd8 <__assert_fail@plt+0x99e4>
   1ae5c:	mov	r3, sl
   1ae60:	ldr	fp, [sp, #4]
   1ae64:	b	1ae1c <__assert_fail@plt+0x9c28>
   1ae68:	mov	r3, sl
   1ae6c:	ldr	sl, [sp, #12]
   1ae70:	b	1acd4 <__assert_fail@plt+0x9ae0>
   1ae74:	ldrbeq	r7, [r1, #1117]	; 0x45d
   1ae78:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1ae7c:	subs	r2, r1, #1
   1ae80:	bxeq	lr
   1ae84:	bcc	1b05c <__assert_fail@plt+0x9e68>
   1ae88:	cmp	r0, r1
   1ae8c:	bls	1b040 <__assert_fail@plt+0x9e4c>
   1ae90:	tst	r1, r2
   1ae94:	beq	1b04c <__assert_fail@plt+0x9e58>
   1ae98:	clz	r3, r0
   1ae9c:	clz	r2, r1
   1aea0:	sub	r3, r2, r3
   1aea4:	rsbs	r3, r3, #31
   1aea8:	addne	r3, r3, r3, lsl #1
   1aeac:	mov	r2, #0
   1aeb0:	addne	pc, pc, r3, lsl #2
   1aeb4:	nop			; (mov r0, r0)
   1aeb8:	cmp	r0, r1, lsl #31
   1aebc:	adc	r2, r2, r2
   1aec0:	subcs	r0, r0, r1, lsl #31
   1aec4:	cmp	r0, r1, lsl #30
   1aec8:	adc	r2, r2, r2
   1aecc:	subcs	r0, r0, r1, lsl #30
   1aed0:	cmp	r0, r1, lsl #29
   1aed4:	adc	r2, r2, r2
   1aed8:	subcs	r0, r0, r1, lsl #29
   1aedc:	cmp	r0, r1, lsl #28
   1aee0:	adc	r2, r2, r2
   1aee4:	subcs	r0, r0, r1, lsl #28
   1aee8:	cmp	r0, r1, lsl #27
   1aeec:	adc	r2, r2, r2
   1aef0:	subcs	r0, r0, r1, lsl #27
   1aef4:	cmp	r0, r1, lsl #26
   1aef8:	adc	r2, r2, r2
   1aefc:	subcs	r0, r0, r1, lsl #26
   1af00:	cmp	r0, r1, lsl #25
   1af04:	adc	r2, r2, r2
   1af08:	subcs	r0, r0, r1, lsl #25
   1af0c:	cmp	r0, r1, lsl #24
   1af10:	adc	r2, r2, r2
   1af14:	subcs	r0, r0, r1, lsl #24
   1af18:	cmp	r0, r1, lsl #23
   1af1c:	adc	r2, r2, r2
   1af20:	subcs	r0, r0, r1, lsl #23
   1af24:	cmp	r0, r1, lsl #22
   1af28:	adc	r2, r2, r2
   1af2c:	subcs	r0, r0, r1, lsl #22
   1af30:	cmp	r0, r1, lsl #21
   1af34:	adc	r2, r2, r2
   1af38:	subcs	r0, r0, r1, lsl #21
   1af3c:	cmp	r0, r1, lsl #20
   1af40:	adc	r2, r2, r2
   1af44:	subcs	r0, r0, r1, lsl #20
   1af48:	cmp	r0, r1, lsl #19
   1af4c:	adc	r2, r2, r2
   1af50:	subcs	r0, r0, r1, lsl #19
   1af54:	cmp	r0, r1, lsl #18
   1af58:	adc	r2, r2, r2
   1af5c:	subcs	r0, r0, r1, lsl #18
   1af60:	cmp	r0, r1, lsl #17
   1af64:	adc	r2, r2, r2
   1af68:	subcs	r0, r0, r1, lsl #17
   1af6c:	cmp	r0, r1, lsl #16
   1af70:	adc	r2, r2, r2
   1af74:	subcs	r0, r0, r1, lsl #16
   1af78:	cmp	r0, r1, lsl #15
   1af7c:	adc	r2, r2, r2
   1af80:	subcs	r0, r0, r1, lsl #15
   1af84:	cmp	r0, r1, lsl #14
   1af88:	adc	r2, r2, r2
   1af8c:	subcs	r0, r0, r1, lsl #14
   1af90:	cmp	r0, r1, lsl #13
   1af94:	adc	r2, r2, r2
   1af98:	subcs	r0, r0, r1, lsl #13
   1af9c:	cmp	r0, r1, lsl #12
   1afa0:	adc	r2, r2, r2
   1afa4:	subcs	r0, r0, r1, lsl #12
   1afa8:	cmp	r0, r1, lsl #11
   1afac:	adc	r2, r2, r2
   1afb0:	subcs	r0, r0, r1, lsl #11
   1afb4:	cmp	r0, r1, lsl #10
   1afb8:	adc	r2, r2, r2
   1afbc:	subcs	r0, r0, r1, lsl #10
   1afc0:	cmp	r0, r1, lsl #9
   1afc4:	adc	r2, r2, r2
   1afc8:	subcs	r0, r0, r1, lsl #9
   1afcc:	cmp	r0, r1, lsl #8
   1afd0:	adc	r2, r2, r2
   1afd4:	subcs	r0, r0, r1, lsl #8
   1afd8:	cmp	r0, r1, lsl #7
   1afdc:	adc	r2, r2, r2
   1afe0:	subcs	r0, r0, r1, lsl #7
   1afe4:	cmp	r0, r1, lsl #6
   1afe8:	adc	r2, r2, r2
   1afec:	subcs	r0, r0, r1, lsl #6
   1aff0:	cmp	r0, r1, lsl #5
   1aff4:	adc	r2, r2, r2
   1aff8:	subcs	r0, r0, r1, lsl #5
   1affc:	cmp	r0, r1, lsl #4
   1b000:	adc	r2, r2, r2
   1b004:	subcs	r0, r0, r1, lsl #4
   1b008:	cmp	r0, r1, lsl #3
   1b00c:	adc	r2, r2, r2
   1b010:	subcs	r0, r0, r1, lsl #3
   1b014:	cmp	r0, r1, lsl #2
   1b018:	adc	r2, r2, r2
   1b01c:	subcs	r0, r0, r1, lsl #2
   1b020:	cmp	r0, r1, lsl #1
   1b024:	adc	r2, r2, r2
   1b028:	subcs	r0, r0, r1, lsl #1
   1b02c:	cmp	r0, r1
   1b030:	adc	r2, r2, r2
   1b034:	subcs	r0, r0, r1
   1b038:	mov	r0, r2
   1b03c:	bx	lr
   1b040:	moveq	r0, #1
   1b044:	movne	r0, #0
   1b048:	bx	lr
   1b04c:	clz	r2, r1
   1b050:	rsb	r2, r2, #31
   1b054:	lsr	r0, r0, r2
   1b058:	bx	lr
   1b05c:	cmp	r0, #0
   1b060:	mvnne	r0, #0
   1b064:	b	1b304 <__assert_fail@plt+0xa110>
   1b068:	cmp	r1, #0
   1b06c:	beq	1b05c <__assert_fail@plt+0x9e68>
   1b070:	push	{r0, r1, lr}
   1b074:	bl	1ae7c <__assert_fail@plt+0x9c88>
   1b078:	pop	{r1, r2, lr}
   1b07c:	mul	r3, r2, r0
   1b080:	sub	r1, r1, r3
   1b084:	bx	lr
   1b088:	cmp	r1, #0
   1b08c:	beq	1b298 <__assert_fail@plt+0xa0a4>
   1b090:	eor	ip, r0, r1
   1b094:	rsbmi	r1, r1, #0
   1b098:	subs	r2, r1, #1
   1b09c:	beq	1b264 <__assert_fail@plt+0xa070>
   1b0a0:	movs	r3, r0
   1b0a4:	rsbmi	r3, r0, #0
   1b0a8:	cmp	r3, r1
   1b0ac:	bls	1b270 <__assert_fail@plt+0xa07c>
   1b0b0:	tst	r1, r2
   1b0b4:	beq	1b280 <__assert_fail@plt+0xa08c>
   1b0b8:	clz	r2, r3
   1b0bc:	clz	r0, r1
   1b0c0:	sub	r2, r0, r2
   1b0c4:	rsbs	r2, r2, #31
   1b0c8:	addne	r2, r2, r2, lsl #1
   1b0cc:	mov	r0, #0
   1b0d0:	addne	pc, pc, r2, lsl #2
   1b0d4:	nop			; (mov r0, r0)
   1b0d8:	cmp	r3, r1, lsl #31
   1b0dc:	adc	r0, r0, r0
   1b0e0:	subcs	r3, r3, r1, lsl #31
   1b0e4:	cmp	r3, r1, lsl #30
   1b0e8:	adc	r0, r0, r0
   1b0ec:	subcs	r3, r3, r1, lsl #30
   1b0f0:	cmp	r3, r1, lsl #29
   1b0f4:	adc	r0, r0, r0
   1b0f8:	subcs	r3, r3, r1, lsl #29
   1b0fc:	cmp	r3, r1, lsl #28
   1b100:	adc	r0, r0, r0
   1b104:	subcs	r3, r3, r1, lsl #28
   1b108:	cmp	r3, r1, lsl #27
   1b10c:	adc	r0, r0, r0
   1b110:	subcs	r3, r3, r1, lsl #27
   1b114:	cmp	r3, r1, lsl #26
   1b118:	adc	r0, r0, r0
   1b11c:	subcs	r3, r3, r1, lsl #26
   1b120:	cmp	r3, r1, lsl #25
   1b124:	adc	r0, r0, r0
   1b128:	subcs	r3, r3, r1, lsl #25
   1b12c:	cmp	r3, r1, lsl #24
   1b130:	adc	r0, r0, r0
   1b134:	subcs	r3, r3, r1, lsl #24
   1b138:	cmp	r3, r1, lsl #23
   1b13c:	adc	r0, r0, r0
   1b140:	subcs	r3, r3, r1, lsl #23
   1b144:	cmp	r3, r1, lsl #22
   1b148:	adc	r0, r0, r0
   1b14c:	subcs	r3, r3, r1, lsl #22
   1b150:	cmp	r3, r1, lsl #21
   1b154:	adc	r0, r0, r0
   1b158:	subcs	r3, r3, r1, lsl #21
   1b15c:	cmp	r3, r1, lsl #20
   1b160:	adc	r0, r0, r0
   1b164:	subcs	r3, r3, r1, lsl #20
   1b168:	cmp	r3, r1, lsl #19
   1b16c:	adc	r0, r0, r0
   1b170:	subcs	r3, r3, r1, lsl #19
   1b174:	cmp	r3, r1, lsl #18
   1b178:	adc	r0, r0, r0
   1b17c:	subcs	r3, r3, r1, lsl #18
   1b180:	cmp	r3, r1, lsl #17
   1b184:	adc	r0, r0, r0
   1b188:	subcs	r3, r3, r1, lsl #17
   1b18c:	cmp	r3, r1, lsl #16
   1b190:	adc	r0, r0, r0
   1b194:	subcs	r3, r3, r1, lsl #16
   1b198:	cmp	r3, r1, lsl #15
   1b19c:	adc	r0, r0, r0
   1b1a0:	subcs	r3, r3, r1, lsl #15
   1b1a4:	cmp	r3, r1, lsl #14
   1b1a8:	adc	r0, r0, r0
   1b1ac:	subcs	r3, r3, r1, lsl #14
   1b1b0:	cmp	r3, r1, lsl #13
   1b1b4:	adc	r0, r0, r0
   1b1b8:	subcs	r3, r3, r1, lsl #13
   1b1bc:	cmp	r3, r1, lsl #12
   1b1c0:	adc	r0, r0, r0
   1b1c4:	subcs	r3, r3, r1, lsl #12
   1b1c8:	cmp	r3, r1, lsl #11
   1b1cc:	adc	r0, r0, r0
   1b1d0:	subcs	r3, r3, r1, lsl #11
   1b1d4:	cmp	r3, r1, lsl #10
   1b1d8:	adc	r0, r0, r0
   1b1dc:	subcs	r3, r3, r1, lsl #10
   1b1e0:	cmp	r3, r1, lsl #9
   1b1e4:	adc	r0, r0, r0
   1b1e8:	subcs	r3, r3, r1, lsl #9
   1b1ec:	cmp	r3, r1, lsl #8
   1b1f0:	adc	r0, r0, r0
   1b1f4:	subcs	r3, r3, r1, lsl #8
   1b1f8:	cmp	r3, r1, lsl #7
   1b1fc:	adc	r0, r0, r0
   1b200:	subcs	r3, r3, r1, lsl #7
   1b204:	cmp	r3, r1, lsl #6
   1b208:	adc	r0, r0, r0
   1b20c:	subcs	r3, r3, r1, lsl #6
   1b210:	cmp	r3, r1, lsl #5
   1b214:	adc	r0, r0, r0
   1b218:	subcs	r3, r3, r1, lsl #5
   1b21c:	cmp	r3, r1, lsl #4
   1b220:	adc	r0, r0, r0
   1b224:	subcs	r3, r3, r1, lsl #4
   1b228:	cmp	r3, r1, lsl #3
   1b22c:	adc	r0, r0, r0
   1b230:	subcs	r3, r3, r1, lsl #3
   1b234:	cmp	r3, r1, lsl #2
   1b238:	adc	r0, r0, r0
   1b23c:	subcs	r3, r3, r1, lsl #2
   1b240:	cmp	r3, r1, lsl #1
   1b244:	adc	r0, r0, r0
   1b248:	subcs	r3, r3, r1, lsl #1
   1b24c:	cmp	r3, r1
   1b250:	adc	r0, r0, r0
   1b254:	subcs	r3, r3, r1
   1b258:	cmp	ip, #0
   1b25c:	rsbmi	r0, r0, #0
   1b260:	bx	lr
   1b264:	teq	ip, r0
   1b268:	rsbmi	r0, r0, #0
   1b26c:	bx	lr
   1b270:	movcc	r0, #0
   1b274:	asreq	r0, ip, #31
   1b278:	orreq	r0, r0, #1
   1b27c:	bx	lr
   1b280:	clz	r2, r1
   1b284:	rsb	r2, r2, #31
   1b288:	cmp	ip, #0
   1b28c:	lsr	r0, r3, r2
   1b290:	rsbmi	r0, r0, #0
   1b294:	bx	lr
   1b298:	cmp	r0, #0
   1b29c:	mvngt	r0, #-2147483648	; 0x80000000
   1b2a0:	movlt	r0, #-2147483648	; 0x80000000
   1b2a4:	b	1b304 <__assert_fail@plt+0xa110>
   1b2a8:	cmp	r1, #0
   1b2ac:	beq	1b298 <__assert_fail@plt+0xa0a4>
   1b2b0:	push	{r0, r1, lr}
   1b2b4:	bl	1b090 <__assert_fail@plt+0x9e9c>
   1b2b8:	pop	{r1, r2, lr}
   1b2bc:	mul	r3, r2, r0
   1b2c0:	sub	r1, r1, r3
   1b2c4:	bx	lr
   1b2c8:	cmp	r3, #0
   1b2cc:	cmpeq	r2, #0
   1b2d0:	bne	1b2e8 <__assert_fail@plt+0xa0f4>
   1b2d4:	cmp	r1, #0
   1b2d8:	cmpeq	r0, #0
   1b2dc:	mvnne	r1, #0
   1b2e0:	mvnne	r0, #0
   1b2e4:	b	1b304 <__assert_fail@plt+0xa110>
   1b2e8:	sub	sp, sp, #8
   1b2ec:	push	{sp, lr}
   1b2f0:	bl	1b314 <__assert_fail@plt+0xa120>
   1b2f4:	ldr	lr, [sp, #4]
   1b2f8:	add	sp, sp, #8
   1b2fc:	pop	{r2, r3}
   1b300:	bx	lr
   1b304:	push	{r1, lr}
   1b308:	mov	r0, #8
   1b30c:	bl	10f30 <raise@plt>
   1b310:	pop	{r1, pc}
   1b314:	cmp	r1, r3
   1b318:	cmpeq	r0, r2
   1b31c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b320:	mov	r4, r0
   1b324:	movcc	r0, #0
   1b328:	mov	r5, r1
   1b32c:	ldr	lr, [sp, #36]	; 0x24
   1b330:	movcc	r1, r0
   1b334:	bcc	1b430 <__assert_fail@plt+0xa23c>
   1b338:	cmp	r3, #0
   1b33c:	clzeq	ip, r2
   1b340:	clzne	ip, r3
   1b344:	addeq	ip, ip, #32
   1b348:	cmp	r5, #0
   1b34c:	clzeq	r1, r4
   1b350:	addeq	r1, r1, #32
   1b354:	clzne	r1, r5
   1b358:	sub	ip, ip, r1
   1b35c:	sub	sl, ip, #32
   1b360:	lsl	r9, r3, ip
   1b364:	rsb	fp, ip, #32
   1b368:	orr	r9, r9, r2, lsl sl
   1b36c:	orr	r9, r9, r2, lsr fp
   1b370:	lsl	r8, r2, ip
   1b374:	cmp	r5, r9
   1b378:	cmpeq	r4, r8
   1b37c:	movcc	r0, #0
   1b380:	movcc	r1, r0
   1b384:	bcc	1b3a0 <__assert_fail@plt+0xa1ac>
   1b388:	mov	r0, #1
   1b38c:	subs	r4, r4, r8
   1b390:	lsl	r1, r0, sl
   1b394:	orr	r1, r1, r0, lsr fp
   1b398:	lsl	r0, r0, ip
   1b39c:	sbc	r5, r5, r9
   1b3a0:	cmp	ip, #0
   1b3a4:	beq	1b430 <__assert_fail@plt+0xa23c>
   1b3a8:	lsr	r6, r8, #1
   1b3ac:	orr	r6, r6, r9, lsl #31
   1b3b0:	lsr	r7, r9, #1
   1b3b4:	mov	r2, ip
   1b3b8:	b	1b3dc <__assert_fail@plt+0xa1e8>
   1b3bc:	subs	r3, r4, r6
   1b3c0:	sbc	r8, r5, r7
   1b3c4:	adds	r3, r3, r3
   1b3c8:	adc	r8, r8, r8
   1b3cc:	adds	r4, r3, #1
   1b3d0:	adc	r5, r8, #0
   1b3d4:	subs	r2, r2, #1
   1b3d8:	beq	1b3f8 <__assert_fail@plt+0xa204>
   1b3dc:	cmp	r5, r7
   1b3e0:	cmpeq	r4, r6
   1b3e4:	bcs	1b3bc <__assert_fail@plt+0xa1c8>
   1b3e8:	adds	r4, r4, r4
   1b3ec:	adc	r5, r5, r5
   1b3f0:	subs	r2, r2, #1
   1b3f4:	bne	1b3dc <__assert_fail@plt+0xa1e8>
   1b3f8:	lsr	r3, r4, ip
   1b3fc:	orr	r3, r3, r5, lsl fp
   1b400:	lsr	r2, r5, ip
   1b404:	orr	r3, r3, r5, lsr sl
   1b408:	adds	r0, r0, r4
   1b40c:	mov	r4, r3
   1b410:	lsl	r3, r2, ip
   1b414:	orr	r3, r3, r4, lsl sl
   1b418:	lsl	ip, r4, ip
   1b41c:	orr	r3, r3, r4, lsr fp
   1b420:	adc	r1, r1, r5
   1b424:	subs	r0, r0, ip
   1b428:	mov	r5, r2
   1b42c:	sbc	r1, r1, r3
   1b430:	cmp	lr, #0
   1b434:	strdne	r4, [lr]
   1b438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b43c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b440:	mov	r7, r0
   1b444:	ldr	r6, [pc, #72]	; 1b494 <__assert_fail@plt+0xa2a0>
   1b448:	ldr	r5, [pc, #72]	; 1b498 <__assert_fail@plt+0xa2a4>
   1b44c:	add	r6, pc, r6
   1b450:	add	r5, pc, r5
   1b454:	sub	r6, r6, r5
   1b458:	mov	r8, r1
   1b45c:	mov	r9, r2
   1b460:	bl	10ef8 <calloc@plt-0x20>
   1b464:	asrs	r6, r6, #2
   1b468:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b46c:	mov	r4, #0
   1b470:	add	r4, r4, #1
   1b474:	ldr	r3, [r5], #4
   1b478:	mov	r2, r9
   1b47c:	mov	r1, r8
   1b480:	mov	r0, r7
   1b484:	blx	r3
   1b488:	cmp	r6, r4
   1b48c:	bne	1b470 <__assert_fail@plt+0xa27c>
   1b490:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b494:			; <UNDEFINED> instruction: 0x00012ab0
   1b498:	andeq	r2, r1, r8, lsr #21
   1b49c:	bx	lr
   1b4a0:	ldr	r3, [pc, #12]	; 1b4b4 <__assert_fail@plt+0xa2c0>
   1b4a4:	mov	r1, #0
   1b4a8:	add	r3, pc, r3
   1b4ac:	ldr	r2, [r3]
   1b4b0:	b	110ec <__cxa_atexit@plt>
   1b4b4:	andeq	r2, r1, ip, asr ip

Disassembly of section .fini:

0001b4b8 <.fini>:
   1b4b8:	push	{r3, lr}
   1b4bc:	pop	{r3, pc}
