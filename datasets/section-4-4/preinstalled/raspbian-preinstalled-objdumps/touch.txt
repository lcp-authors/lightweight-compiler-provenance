
raspbian-preinstalled/touch:     file format elf32-littlearm


Disassembly of section .init:

000110d0 <.init>:
   110d0:	push	{r3, lr}
   110d4:	bl	11d30 <__assert_fail@plt+0x8c8>
   110d8:	pop	{r3, pc}

Disassembly of section .plt:

000110dc <calloc@plt-0x14>:
   110dc:	push	{lr}		; (str lr, [sp, #-4]!)
   110e0:	ldr	lr, [pc, #4]	; 110ec <calloc@plt-0x4>
   110e4:	add	lr, pc, lr
   110e8:	ldr	pc, [lr, #8]!
   110ec:	andeq	r1, r2, r4, lsl pc

000110f0 <calloc@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #135168	; 0x21000
   110f8:	ldr	pc, [ip, #3860]!	; 0xf14

000110fc <fputs_unlocked@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #135168	; 0x21000
   11104:	ldr	pc, [ip, #3852]!	; 0xf0c

00011108 <raise@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #135168	; 0x21000
   11110:	ldr	pc, [ip, #3844]!	; 0xf04

00011114 <gmtime_r@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #135168	; 0x21000
   1111c:	ldr	pc, [ip, #3836]!	; 0xefc

00011120 <utimensat@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #135168	; 0x21000
   11128:	ldr	pc, [ip, #3828]!	; 0xef4

0001112c <strcmp@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #135168	; 0x21000
   11134:	ldr	pc, [ip, #3820]!	; 0xeec

00011138 <strtol@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #135168	; 0x21000
   11140:	ldr	pc, [ip, #3812]!	; 0xee4

00011144 <mktime@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #135168	; 0x21000
   1114c:	ldr	pc, [ip, #3804]!	; 0xedc

00011150 <fflush@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #135168	; 0x21000
   11158:	ldr	pc, [ip, #3796]!	; 0xed4

0001115c <free@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #135168	; 0x21000
   11164:	ldr	pc, [ip, #3788]!	; 0xecc

00011168 <clock_gettime@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #135168	; 0x21000
   11170:	ldr	pc, [ip, #3780]!	; 0xec4

00011174 <_exit@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #135168	; 0x21000
   1117c:	ldr	pc, [ip, #3772]!	; 0xebc

00011180 <memcpy@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #135168	; 0x21000
   11188:	ldr	pc, [ip, #3764]!	; 0xeb4

0001118c <mbsinit@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #135168	; 0x21000
   11194:	ldr	pc, [ip, #3756]!	; 0xeac

00011198 <time@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #135168	; 0x21000
   111a0:	ldr	pc, [ip, #3748]!	; 0xea4

000111a4 <memcmp@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #135168	; 0x21000
   111ac:	ldr	pc, [ip, #3740]!	; 0xe9c

000111b0 <dcgettext@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #135168	; 0x21000
   111b8:	ldr	pc, [ip, #3732]!	; 0xe94

000111bc <__stack_chk_fail@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #135168	; 0x21000
   111c4:	ldr	pc, [ip, #3724]!	; 0xe8c

000111c8 <dup2@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #135168	; 0x21000
   111d0:	ldr	pc, [ip, #3716]!	; 0xe84

000111d4 <realloc@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #135168	; 0x21000
   111dc:	ldr	pc, [ip, #3708]!	; 0xe7c

000111e0 <localtime_r@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #135168	; 0x21000
   111e8:	ldr	pc, [ip, #3700]!	; 0xe74

000111ec <textdomain@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #135168	; 0x21000
   111f4:	ldr	pc, [ip, #3692]!	; 0xe6c

000111f8 <iswprint@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #135168	; 0x21000
   11200:	ldr	pc, [ip, #3684]!	; 0xe64

00011204 <tzset@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #135168	; 0x21000
   1120c:	ldr	pc, [ip, #3676]!	; 0xe5c

00011210 <fwrite@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #135168	; 0x21000
   11218:	ldr	pc, [ip, #3668]!	; 0xe54

0001121c <lseek64@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #135168	; 0x21000
   11224:	ldr	pc, [ip, #3660]!	; 0xe4c

00011228 <__stpcpy_chk@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #135168	; 0x21000
   11230:	ldr	pc, [ip, #3652]!	; 0xe44

00011234 <__ctype_get_mb_cur_max@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #135168	; 0x21000
   1123c:	ldr	pc, [ip, #3644]!	; 0xe3c

00011240 <gettimeofday@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #135168	; 0x21000
   11248:	ldr	pc, [ip, #3636]!	; 0xe34

0001124c <__fpending@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #135168	; 0x21000
   11254:	ldr	pc, [ip, #3628]!	; 0xe2c

00011258 <mbrtowc@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #135168	; 0x21000
   11260:	ldr	pc, [ip, #3620]!	; 0xe24

00011264 <error@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #135168	; 0x21000
   1126c:	ldr	pc, [ip, #3612]!	; 0xe1c

00011270 <open64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #135168	; 0x21000
   11278:	ldr	pc, [ip, #3604]!	; 0xe14

0001127c <getenv@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #135168	; 0x21000
   11284:	ldr	pc, [ip, #3596]!	; 0xe0c

00011288 <malloc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #135168	; 0x21000
   11290:	ldr	pc, [ip, #3588]!	; 0xe04

00011294 <__libc_start_main@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #135168	; 0x21000
   1129c:	ldr	pc, [ip, #3580]!	; 0xdfc

000112a0 <strftime@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #135168	; 0x21000
   112a8:	ldr	pc, [ip, #3572]!	; 0xdf4

000112ac <__freading@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #135168	; 0x21000
   112b4:	ldr	pc, [ip, #3564]!	; 0xdec

000112b8 <localtime@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #135168	; 0x21000
   112c0:	ldr	pc, [ip, #3556]!	; 0xde4

000112c4 <__ctype_tolower_loc@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #135168	; 0x21000
   112cc:	ldr	pc, [ip, #3548]!	; 0xddc

000112d0 <__ctype_toupper_loc@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #135168	; 0x21000
   112d8:	ldr	pc, [ip, #3540]!	; 0xdd4

000112dc <__gmon_start__@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #135168	; 0x21000
   112e4:	ldr	pc, [ip, #3532]!	; 0xdcc

000112e8 <getopt_long@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #135168	; 0x21000
   112f0:	ldr	pc, [ip, #3524]!	; 0xdc4

000112f4 <__ctype_b_loc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #135168	; 0x21000
   112fc:	ldr	pc, [ip, #3516]!	; 0xdbc

00011300 <exit@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #135168	; 0x21000
   11308:	ldr	pc, [ip, #3508]!	; 0xdb4

0001130c <strlen@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #135168	; 0x21000
   11314:	ldr	pc, [ip, #3500]!	; 0xdac

00011318 <strchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #135168	; 0x21000
   11320:	ldr	pc, [ip, #3492]!	; 0xda4

00011324 <setenv@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #135168	; 0x21000
   1132c:	ldr	pc, [ip, #3484]!	; 0xd9c

00011330 <__errno_location@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #135168	; 0x21000
   11338:	ldr	pc, [ip, #3476]!	; 0xd94

0001133c <__sprintf_chk@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #135168	; 0x21000
   11344:	ldr	pc, [ip, #3468]!	; 0xd8c

00011348 <snprintf@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #135168	; 0x21000
   11350:	ldr	pc, [ip, #3460]!	; 0xd84

00011354 <__cxa_atexit@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #135168	; 0x21000
   1135c:	ldr	pc, [ip, #3452]!	; 0xd7c

00011360 <memset@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #135168	; 0x21000
   11368:	ldr	pc, [ip, #3444]!	; 0xd74

0001136c <__printf_chk@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #135168	; 0x21000
   11374:	ldr	pc, [ip, #3436]!	; 0xd6c

00011378 <fileno@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #135168	; 0x21000
   11380:	ldr	pc, [ip, #3428]!	; 0xd64

00011384 <__fprintf_chk@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #135168	; 0x21000
   1138c:	ldr	pc, [ip, #3420]!	; 0xd5c

00011390 <fclose@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #135168	; 0x21000
   11398:	ldr	pc, [ip, #3412]!	; 0xd54

0001139c <fseeko64@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #135168	; 0x21000
   113a4:	ldr	pc, [ip, #3404]!	; 0xd4c

000113a8 <__overflow@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #135168	; 0x21000
   113b0:	ldr	pc, [ip, #3396]!	; 0xd44

000113b4 <setlocale@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #135168	; 0x21000
   113bc:	ldr	pc, [ip, #3388]!	; 0xd3c

000113c0 <strrchr@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #135168	; 0x21000
   113c8:	ldr	pc, [ip, #3380]!	; 0xd34

000113cc <nl_langinfo@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #135168	; 0x21000
   113d4:	ldr	pc, [ip, #3372]!	; 0xd2c

000113d8 <fputc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #135168	; 0x21000
   113e0:	ldr	pc, [ip, #3364]!	; 0xd24

000113e4 <timegm@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #135168	; 0x21000
   113ec:	ldr	pc, [ip, #3356]!	; 0xd1c

000113f0 <futimens@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #135168	; 0x21000
   113f8:	ldr	pc, [ip, #3348]!	; 0xd14

000113fc <bindtextdomain@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #135168	; 0x21000
   11404:	ldr	pc, [ip, #3340]!	; 0xd0c

00011408 <__xstat64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #135168	; 0x21000
   11410:	ldr	pc, [ip, #3332]!	; 0xd04

00011414 <unsetenv@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #135168	; 0x21000
   1141c:	ldr	pc, [ip, #3324]!	; 0xcfc

00011420 <fputs@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #135168	; 0x21000
   11428:	ldr	pc, [ip, #3316]!	; 0xcf4

0001142c <strncmp@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #135168	; 0x21000
   11434:	ldr	pc, [ip, #3308]!	; 0xcec

00011438 <abort@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #135168	; 0x21000
   11440:	ldr	pc, [ip, #3300]!	; 0xce4

00011444 <close@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #135168	; 0x21000
   1144c:	ldr	pc, [ip, #3292]!	; 0xcdc

00011450 <__lxstat64@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #135168	; 0x21000
   11458:	ldr	pc, [ip, #3284]!	; 0xcd4

0001145c <__snprintf_chk@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #135168	; 0x21000
   11464:	ldr	pc, [ip, #3276]!	; 0xccc

00011468 <__assert_fail@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #135168	; 0x21000
   11470:	ldr	pc, [ip, #3268]!	; 0xcc4

Disassembly of section .text:

00011478 <.text>:
   11478:	ldr	r3, [pc, #2008]	; 11c58 <__assert_fail@plt+0x7f0>
   1147c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11480:	sub	sp, sp, #164	; 0xa4
   11484:	ldr	r3, [r3]
   11488:	mov	r6, r0
   1148c:	ldr	r0, [r1]
   11490:	str	r3, [sp, #156]	; 0x9c
   11494:	mov	r5, r1
   11498:	bl	18874 <__assert_fail@plt+0x740c>
   1149c:	ldr	r1, [pc, #1976]	; 11c5c <__assert_fail@plt+0x7f4>
   114a0:	mov	r0, #6
   114a4:	bl	113b4 <setlocale@plt>
   114a8:	ldr	r1, [pc, #1968]	; 11c60 <__assert_fail@plt+0x7f8>
   114ac:	ldr	r0, [pc, #1968]	; 11c64 <__assert_fail@plt+0x7fc>
   114b0:	bl	113fc <bindtextdomain@plt>
   114b4:	ldr	r4, [pc, #1964]	; 11c68 <__assert_fail@plt+0x800>
   114b8:	ldr	r0, [pc, #1956]	; 11c64 <__assert_fail@plt+0x7fc>
   114bc:	bl	111ec <textdomain@plt>
   114c0:	ldr	r0, [pc, #1956]	; 11c6c <__assert_fail@plt+0x804>
   114c4:	bl	1f6f8 <__assert_fail@plt+0xe290>
   114c8:	mov	r3, #0
   114cc:	mov	fp, r3
   114d0:	str	r3, [sp, #24]
   114d4:	str	r3, [r4, #16]
   114d8:	strb	r3, [r4, #20]
   114dc:	strb	r3, [r4, #21]
   114e0:	ldr	r3, [pc, #1928]	; 11c70 <__assert_fail@plt+0x808>
   114e4:	ldr	r8, [pc, #1928]	; 11c74 <__assert_fail@plt+0x80c>
   114e8:	ldr	sl, [pc, #1928]	; 11c78 <__assert_fail@plt+0x810>
   114ec:	add	r9, r3, #100	; 0x64
   114f0:	mov	r7, #0
   114f4:	str	r7, [sp]
   114f8:	mov	r3, r9
   114fc:	mov	r2, r8
   11500:	mov	r1, r5
   11504:	mov	r0, r6
   11508:	bl	112e8 <getopt_long@plt>
   1150c:	cmn	r0, #1
   11510:	beq	11694 <__assert_fail@plt+0x22c>
   11514:	cmp	r0, #102	; 0x66
   11518:	beq	114f0 <__assert_fail@plt+0x88>
   1151c:	ble	11540 <__assert_fail@plt+0xd8>
   11520:	cmp	r0, #114	; 0x72
   11524:	beq	11680 <__assert_fail@plt+0x218>
   11528:	bgt	115dc <__assert_fail@plt+0x174>
   1152c:	cmp	r0, #104	; 0x68
   11530:	bne	11560 <__assert_fail@plt+0xf8>
   11534:	mov	r3, #1
   11538:	strb	r3, [r4, #22]
   1153c:	b	114f0 <__assert_fail@plt+0x88>
   11540:	cmp	r0, #97	; 0x61
   11544:	beq	11670 <__assert_fail@plt+0x208>
   11548:	ble	11588 <__assert_fail@plt+0x120>
   1154c:	cmp	r0, #99	; 0x63
   11550:	bne	11578 <__assert_fail@plt+0x110>
   11554:	mov	r3, #1
   11558:	strb	r3, [r4, #21]
   1155c:	b	114f0 <__assert_fail@plt+0x88>
   11560:	cmp	r0, #109	; 0x6d
   11564:	bne	11b4c <__assert_fail@plt+0x6e4>
   11568:	ldr	r3, [r4, #16]
   1156c:	orr	r3, r3, #2
   11570:	str	r3, [r4, #16]
   11574:	b	114f0 <__assert_fail@plt+0x88>
   11578:	cmp	r0, #100	; 0x64
   1157c:	bne	11b4c <__assert_fail@plt+0x6e4>
   11580:	ldr	fp, [sl]
   11584:	b	114f0 <__assert_fail@plt+0x88>
   11588:	cmn	r0, #3
   1158c:	bne	11614 <__assert_fail@plt+0x1ac>
   11590:	ldr	r3, [pc, #1764]	; 11c7c <__assert_fail@plt+0x814>
   11594:	ldr	r0, [pc, #1764]	; 11c80 <__assert_fail@plt+0x818>
   11598:	ldr	r1, [pc, #1764]	; 11c84 <__assert_fail@plt+0x81c>
   1159c:	ldr	r2, [pc, #1764]	; 11c88 <__assert_fail@plt+0x820>
   115a0:	str	r7, [sp, #20]
   115a4:	ldr	ip, [pc, #1760]	; 11c8c <__assert_fail@plt+0x824>
   115a8:	ldr	r0, [r0]
   115ac:	ldr	r3, [r3]
   115b0:	str	r1, [sp, #16]
   115b4:	ldr	r1, [pc, #1748]	; 11c90 <__assert_fail@plt+0x828>
   115b8:	str	r2, [sp, #12]
   115bc:	ldr	r2, [pc, #1744]	; 11c94 <__assert_fail@plt+0x82c>
   115c0:	stmib	sp, {r1, ip}
   115c4:	str	r2, [sp]
   115c8:	ldr	r1, [pc, #1736]	; 11c98 <__assert_fail@plt+0x830>
   115cc:	ldr	r2, [pc, #1736]	; 11c9c <__assert_fail@plt+0x834>
   115d0:	bl	1af44 <__assert_fail@plt+0x9adc>
   115d4:	mov	r0, r7
   115d8:	bl	11300 <exit@plt>
   115dc:	cmp	r0, #116	; 0x74
   115e0:	bne	11624 <__assert_fail@plt+0x1bc>
   115e4:	mov	r2, #6
   115e8:	ldr	r1, [sl]
   115ec:	ldr	r0, [pc, #1652]	; 11c68 <__assert_fail@plt+0x800>
   115f0:	bl	18530 <__assert_fail@plt+0x70c8>
   115f4:	subs	r3, r0, #0
   115f8:	str	r3, [sp, #24]
   115fc:	beq	11c2c <__assert_fail@plt+0x7c4>
   11600:	str	r7, [r4, #4]
   11604:	ldr	r3, [pc, #1684]	; 11ca0 <__assert_fail@plt+0x838>
   11608:	ldm	r4, {r0, r1}
   1160c:	stm	r3, {r0, r1}
   11610:	b	114f0 <__assert_fail@plt+0x88>
   11614:	cmn	r0, #2
   11618:	bne	11b4c <__assert_fail@plt+0x6e4>
   1161c:	mov	r0, r7
   11620:	bl	11e28 <__assert_fail@plt+0x9c0>
   11624:	cmp	r0, #256	; 0x100
   11628:	bne	11b4c <__assert_fail@plt+0x6e4>
   1162c:	ldr	r3, [pc, #1648]	; 11ca4 <__assert_fail@plt+0x83c>
   11630:	mov	r1, #4
   11634:	ldr	r0, [pc, #1644]	; 11ca8 <__assert_fail@plt+0x840>
   11638:	ldr	r2, [r3]
   1163c:	ldr	r3, [pc, #1640]	; 11cac <__assert_fail@plt+0x844>
   11640:	str	r2, [sp, #4]
   11644:	str	r1, [sp]
   11648:	add	r2, r3, #20
   1164c:	ldr	r1, [sl]
   11650:	bl	12404 <__assert_fail@plt+0xf9c>
   11654:	ldr	r2, [pc, #1556]	; 11c70 <__assert_fail@plt+0x808>
   11658:	ldr	r3, [r4, #16]
   1165c:	add	r0, r2, r0, lsl #2
   11660:	ldr	r2, [r0, #56]	; 0x38
   11664:	orr	r3, r3, r2
   11668:	str	r3, [r4, #16]
   1166c:	b	114f0 <__assert_fail@plt+0x88>
   11670:	ldr	r3, [r4, #16]
   11674:	orr	r3, r3, #1
   11678:	str	r3, [r4, #16]
   1167c:	b	114f0 <__assert_fail@plt+0x88>
   11680:	ldr	r2, [sl]
   11684:	mov	r3, #1
   11688:	str	r2, [r4, #24]
   1168c:	strb	r3, [r4, #20]
   11690:	b	114f0 <__assert_fail@plt+0x88>
   11694:	ldr	r3, [r4, #16]
   11698:	cmp	r3, r7
   1169c:	moveq	r3, #3
   116a0:	streq	r3, [r4, #16]
   116a4:	ldr	r3, [sp, #24]
   116a8:	cmp	r3, #0
   116ac:	ldrb	r3, [r4, #20]
   116b0:	beq	11958 <__assert_fail@plt+0x4f0>
   116b4:	cmp	fp, #0
   116b8:	orrne	r3, r3, #1
   116bc:	cmp	r3, #0
   116c0:	bne	11c20 <__assert_fail@plt+0x7b8>
   116c4:	ldr	fp, [pc, #1508]	; 11cb0 <__assert_fail@plt+0x848>
   116c8:	ldr	r3, [fp]
   116cc:	cmp	r3, r6
   116d0:	beq	11b2c <__assert_fail@plt+0x6c4>
   116d4:	movge	r3, #1
   116d8:	movge	r1, r3
   116dc:	bge	118ec <__assert_fail@plt+0x484>
   116e0:	mov	sl, #1
   116e4:	str	r6, [sp, #24]
   116e8:	b	1176c <__assert_fail@plt+0x304>
   116ec:	cmp	r9, #0
   116f0:	bne	1188c <__assert_fail@plt+0x424>
   116f4:	bl	11330 <__errno_location@plt>
   116f8:	ldrb	r3, [r4, #21]
   116fc:	cmp	r3, #0
   11700:	ldr	r3, [r0]
   11704:	beq	11710 <__assert_fail@plt+0x2a8>
   11708:	cmp	r3, #2
   1170c:	beq	11844 <__assert_fail@plt+0x3dc>
   11710:	bl	11330 <__errno_location@plt>
   11714:	ldr	r1, [pc, #1432]	; 11cb4 <__assert_fail@plt+0x84c>
   11718:	mov	r2, #5
   1171c:	mov	r6, #0
   11720:	ldr	r7, [r0]
   11724:	mov	r0, r6
   11728:	bl	111b0 <dcgettext@plt>
   1172c:	mov	r1, r8
   11730:	mov	r9, r0
   11734:	mov	r0, #4
   11738:	bl	1a830 <__assert_fail@plt+0x93c8>
   1173c:	mov	r2, r9
   11740:	mov	r1, r7
   11744:	mov	r3, r0
   11748:	mov	r0, r6
   1174c:	bl	11264 <error@plt>
   11750:	ldr	r3, [fp]
   11754:	ldr	r2, [sp, #24]
   11758:	add	r3, r3, #1
   1175c:	cmp	r3, r2
   11760:	and	sl, sl, r6
   11764:	str	r3, [fp]
   11768:	bge	118e8 <__assert_fail@plt+0x480>
   1176c:	ldr	r8, [r5, r3, lsl #2]
   11770:	ldr	r1, [pc, #1344]	; 11cb8 <__assert_fail@plt+0x850>
   11774:	mov	r0, r8
   11778:	bl	1112c <strcmp@plt>
   1177c:	subs	r9, r0, #0
   11780:	moveq	r7, #1
   11784:	beq	117a8 <__assert_fail@plt+0x340>
   11788:	ldrb	r3, [r4, #21]
   1178c:	cmp	r3, #0
   11790:	bne	117a0 <__assert_fail@plt+0x338>
   11794:	ldrb	r9, [r4, #22]
   11798:	cmp	r9, #0
   1179c:	beq	1190c <__assert_fail@plt+0x4a4>
   117a0:	mvn	r7, #0
   117a4:	mov	r9, #0
   117a8:	ldr	r3, [r4, #16]
   117ac:	cmp	r3, #3
   117b0:	beq	117d4 <__assert_fail@plt+0x36c>
   117b4:	cmp	r3, #2
   117b8:	mvneq	r3, #-1073741823	; 0xc0000001
   117bc:	streq	r3, [r4, #4]
   117c0:	beq	117d4 <__assert_fail@plt+0x36c>
   117c4:	cmp	r3, #1
   117c8:	bne	11c0c <__assert_fail@plt+0x7a4>
   117cc:	mvn	r3, #-1073741823	; 0xc0000001
   117d0:	str	r3, [r4, #12]
   117d4:	ldrb	r3, [r4, #28]
   117d8:	cmp	r3, #0
   117dc:	ldr	r3, [pc, #1156]	; 11c68 <__assert_fail@plt+0x800>
   117e0:	movne	r3, #0
   117e4:	cmp	r7, #1
   117e8:	beq	1184c <__assert_fail@plt+0x3e4>
   117ec:	ldrb	r2, [r4, #22]
   117f0:	cmn	r7, #1
   117f4:	movne	r6, #0
   117f8:	moveq	r6, #1
   117fc:	ands	r6, r6, r2
   11800:	bne	118c8 <__assert_fail@plt+0x460>
   11804:	str	r6, [sp]
   11808:	mov	r2, r8
   1180c:	mvn	r1, #99	; 0x63
   11810:	mov	r0, r7
   11814:	bl	1261c <__assert_fail@plt+0x11b4>
   11818:	cmp	r7, #0
   1181c:	mov	r3, r0
   11820:	bne	1183c <__assert_fail@plt+0x3d4>
   11824:	mov	r0, r6
   11828:	str	r3, [sp, #28]
   1182c:	bl	11444 <close@plt>
   11830:	ldr	r3, [sp, #28]
   11834:	cmp	r0, #0
   11838:	bne	11948 <__assert_fail@plt+0x4e0>
   1183c:	cmp	r3, #0
   11840:	bne	116ec <__assert_fail@plt+0x284>
   11844:	mov	r6, #1
   11848:	b	11750 <__assert_fail@plt+0x2e8>
   1184c:	mov	r2, #0
   11850:	mov	r0, r7
   11854:	str	r2, [sp]
   11858:	mvn	r1, #99	; 0x63
   1185c:	bl	1261c <__assert_fail@plt+0x11b4>
   11860:	cmp	r0, #0
   11864:	beq	11844 <__assert_fail@plt+0x3dc>
   11868:	bl	11330 <__errno_location@plt>
   1186c:	ldr	r3, [r0]
   11870:	cmp	r3, #9
   11874:	bne	116ec <__assert_fail@plt+0x284>
   11878:	ldrb	r3, [r4, #21]
   1187c:	cmp	r3, #0
   11880:	bne	11844 <__assert_fail@plt+0x3dc>
   11884:	cmp	r9, #0
   11888:	beq	11710 <__assert_fail@plt+0x2a8>
   1188c:	mov	r2, #5
   11890:	ldr	r1, [pc, #1060]	; 11cbc <__assert_fail@plt+0x854>
   11894:	mov	r0, #0
   11898:	bl	111b0 <dcgettext@plt>
   1189c:	mov	r1, r8
   118a0:	mov	r6, r0
   118a4:	mov	r0, #4
   118a8:	bl	1a830 <__assert_fail@plt+0x93c8>
   118ac:	mov	r2, r6
   118b0:	mov	r1, r9
   118b4:	mov	r6, #0
   118b8:	mov	r3, r0
   118bc:	mov	r0, #0
   118c0:	bl	11264 <error@plt>
   118c4:	b	11750 <__assert_fail@plt+0x2e8>
   118c8:	mov	r2, #256	; 0x100
   118cc:	str	r2, [sp]
   118d0:	mvn	r1, #99	; 0x63
   118d4:	mov	r2, r8
   118d8:	mvn	r0, #0
   118dc:	bl	1261c <__assert_fail@plt+0x11b4>
   118e0:	mov	r3, r0
   118e4:	b	1183c <__assert_fail@plt+0x3d4>
   118e8:	mov	r1, sl
   118ec:	ldr	r3, [pc, #868]	; 11c58 <__assert_fail@plt+0x7f0>
   118f0:	ldr	r2, [sp, #156]	; 0x9c
   118f4:	eor	r0, r1, #1
   118f8:	ldr	r3, [r3]
   118fc:	cmp	r2, r3
   11900:	bne	11bcc <__assert_fail@plt+0x764>
   11904:	add	sp, sp, #164	; 0xa4
   11908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1190c:	ldr	r3, [pc, #940]	; 11cc0 <__assert_fail@plt+0x858>
   11910:	ldr	r2, [pc, #940]	; 11cc4 <__assert_fail@plt+0x85c>
   11914:	mov	r1, r8
   11918:	mov	r0, r9
   1191c:	bl	125b0 <__assert_fail@plt+0x1148>
   11920:	cmn	r0, #1
   11924:	mov	r7, r0
   11928:	bne	117a8 <__assert_fail@plt+0x340>
   1192c:	bl	11330 <__errno_location@plt>
   11930:	ldr	r9, [r0]
   11934:	sub	r3, r9, #21
   11938:	cmp	r9, #1
   1193c:	cmpne	r3, #1
   11940:	bhi	117a8 <__assert_fail@plt+0x340>
   11944:	b	117a0 <__assert_fail@plt+0x338>
   11948:	bl	11330 <__errno_location@plt>
   1194c:	mov	r2, #5
   11950:	ldr	r1, [pc, #880]	; 11cc8 <__assert_fail@plt+0x860>
   11954:	b	11720 <__assert_fail@plt+0x2b8>
   11958:	cmp	r3, #0
   1195c:	bne	11a24 <__assert_fail@plt+0x5bc>
   11960:	cmp	fp, #0
   11964:	beq	119f0 <__assert_fail@plt+0x588>
   11968:	add	r0, sp, #32
   1196c:	bl	126c0 <__assert_fail@plt+0x1258>
   11970:	add	r2, sp, #32
   11974:	mov	r1, fp
   11978:	ldr	r0, [pc, #744]	; 11c68 <__assert_fail@plt+0x800>
   1197c:	bl	11de4 <__assert_fail@plt+0x97c>
   11980:	ldr	r3, [pc, #792]	; 11ca0 <__assert_fail@plt+0x838>
   11984:	ldm	r4, {r0, r1}
   11988:	ldr	r2, [r4, #16]
   1198c:	cmp	r2, #3
   11990:	stm	r3, {r0, r1}
   11994:	bne	116c4 <__assert_fail@plt+0x25c>
   11998:	ldr	r3, [sp, #32]
   1199c:	cmp	r0, r3
   119a0:	bne	116c4 <__assert_fail@plt+0x25c>
   119a4:	ldr	r2, [sp, #36]	; 0x24
   119a8:	mov	r3, r1
   119ac:	cmp	r1, r2
   119b0:	bne	116c4 <__assert_fail@plt+0x25c>
   119b4:	eor	r0, r0, #1
   119b8:	add	r2, sp, #40	; 0x28
   119bc:	str	r0, [sp, #40]	; 0x28
   119c0:	mov	r1, fp
   119c4:	add	r0, sp, #48	; 0x30
   119c8:	str	r3, [sp, #44]	; 0x2c
   119cc:	bl	11de4 <__assert_fail@plt+0x97c>
   119d0:	ldr	r2, [sp, #48]	; 0x30
   119d4:	ldr	r3, [sp, #40]	; 0x28
   119d8:	cmp	r2, r3
   119dc:	bne	116c4 <__assert_fail@plt+0x25c>
   119e0:	ldr	r2, [sp, #52]	; 0x34
   119e4:	ldr	r3, [sp, #44]	; 0x2c
   119e8:	cmp	r2, r3
   119ec:	bne	116c4 <__assert_fail@plt+0x25c>
   119f0:	ldr	fp, [pc, #696]	; 11cb0 <__assert_fail@plt+0x848>
   119f4:	ldr	r3, [fp]
   119f8:	sub	r3, r6, r3
   119fc:	cmp	r3, #1
   11a00:	bgt	11acc <__assert_fail@plt+0x664>
   11a04:	ldr	r3, [r4, #16]
   11a08:	cmp	r3, #3
   11a0c:	mvnne	r3, #-1073741824	; 0xc0000000
   11a10:	strne	r3, [r4, #4]
   11a14:	strne	r3, [r4, #12]
   11a18:	moveq	r3, #1
   11a1c:	strbeq	r3, [r4, #28]
   11a20:	b	116c8 <__assert_fail@plt+0x260>
   11a24:	ldrb	r3, [r4, #22]
   11a28:	ldr	r1, [r4, #24]
   11a2c:	add	r2, sp, #48	; 0x30
   11a30:	cmp	r3, #0
   11a34:	mov	r0, #3
   11a38:	bne	11aa8 <__assert_fail@plt+0x640>
   11a3c:	bl	11408 <__xstat64@plt>
   11a40:	adds	r0, r0, #0
   11a44:	movne	r0, #1
   11a48:	cmp	r0, #0
   11a4c:	bne	11bd0 <__assert_fail@plt+0x768>
   11a50:	ldr	r2, [sp, #124]	; 0x7c
   11a54:	ldr	r3, [sp, #120]	; 0x78
   11a58:	str	r2, [r4, #4]
   11a5c:	str	r3, [r4]
   11a60:	ldr	r2, [sp, #132]	; 0x84
   11a64:	ldr	r3, [sp, #128]	; 0x80
   11a68:	cmp	fp, #0
   11a6c:	str	r2, [r4, #12]
   11a70:	str	r3, [r4, #8]
   11a74:	beq	116c4 <__assert_fail@plt+0x25c>
   11a78:	ldr	r3, [r4, #16]
   11a7c:	tst	r3, #1
   11a80:	bne	11ab8 <__assert_fail@plt+0x650>
   11a84:	ldr	r3, [r4, #16]
   11a88:	tst	r3, #2
   11a8c:	beq	116c4 <__assert_fail@plt+0x25c>
   11a90:	ldr	r2, [pc, #520]	; 11ca0 <__assert_fail@plt+0x838>
   11a94:	mov	r1, fp
   11a98:	mov	r0, r2
   11a9c:	bl	11de4 <__assert_fail@plt+0x97c>
   11aa0:	ldr	fp, [pc, #520]	; 11cb0 <__assert_fail@plt+0x848>
   11aa4:	b	116c8 <__assert_fail@plt+0x260>
   11aa8:	bl	11450 <__lxstat64@plt>
   11aac:	adds	r0, r0, #0
   11ab0:	movne	r0, #1
   11ab4:	b	11a48 <__assert_fail@plt+0x5e0>
   11ab8:	ldr	r2, [pc, #424]	; 11c68 <__assert_fail@plt+0x800>
   11abc:	mov	r1, fp
   11ac0:	mov	r0, r2
   11ac4:	bl	11de4 <__assert_fail@plt+0x97c>
   11ac8:	b	11a84 <__assert_fail@plt+0x61c>
   11acc:	bl	187f4 <__assert_fail@plt+0x738c>
   11ad0:	ldr	r3, [pc, #500]	; 11ccc <__assert_fail@plt+0x864>
   11ad4:	cmp	r0, r3
   11ad8:	bgt	11a04 <__assert_fail@plt+0x59c>
   11adc:	ldr	r3, [fp]
   11ae0:	mov	r2, #9
   11ae4:	ldr	r0, [pc, #380]	; 11c68 <__assert_fail@plt+0x800>
   11ae8:	ldr	r1, [r5, r3, lsl #2]
   11aec:	bl	18530 <__assert_fail@plt+0x70c8>
   11af0:	cmp	r0, #0
   11af4:	beq	11a04 <__assert_fail@plt+0x59c>
   11af8:	mov	r3, #0
   11afc:	str	r3, [r4, #4]
   11b00:	ldr	r7, [pc, #408]	; 11ca0 <__assert_fail@plt+0x838>
   11b04:	ldm	r4, {r0, r1}
   11b08:	stm	r7, {r0, r1}
   11b0c:	ldr	r0, [pc, #444]	; 11cd0 <__assert_fail@plt+0x868>
   11b10:	bl	1127c <getenv@plt>
   11b14:	subs	r8, r0, #0
   11b18:	beq	11b54 <__assert_fail@plt+0x6ec>
   11b1c:	ldr	r3, [fp]
   11b20:	add	r3, r3, #1
   11b24:	str	r3, [fp]
   11b28:	b	116c8 <__assert_fail@plt+0x260>
   11b2c:	ldr	r1, [pc, #416]	; 11cd4 <__assert_fail@plt+0x86c>
   11b30:	mov	r2, #5
   11b34:	mov	r0, #0
   11b38:	bl	111b0 <dcgettext@plt>
   11b3c:	mov	r1, #0
   11b40:	mov	r2, r0
   11b44:	mov	r0, r1
   11b48:	bl	11264 <error@plt>
   11b4c:	mov	r0, #1
   11b50:	bl	11e28 <__assert_fail@plt+0x9c0>
   11b54:	sub	r0, r7, #8
   11b58:	bl	112b8 <localtime@plt>
   11b5c:	subs	r7, r0, #0
   11b60:	beq	11b1c <__assert_fail@plt+0x6b4>
   11b64:	mov	r2, #5
   11b68:	ldr	r1, [pc, #360]	; 11cd8 <__assert_fail@plt+0x870>
   11b6c:	mov	r0, r8
   11b70:	bl	111b0 <dcgettext@plt>
   11b74:	ldr	r2, [r7]
   11b78:	ldr	r3, [fp]
   11b7c:	str	r2, [sp, #20]
   11b80:	ldr	r2, [r7, #4]
   11b84:	ldr	r3, [r5, r3, lsl #2]
   11b88:	str	r2, [sp, #16]
   11b8c:	ldr	r2, [r7, #8]
   11b90:	mov	r1, r8
   11b94:	str	r2, [sp, #12]
   11b98:	ldr	r2, [r7, #12]
   11b9c:	str	r2, [sp, #8]
   11ba0:	ldr	r2, [r7, #16]
   11ba4:	add	r2, r2, #1
   11ba8:	str	r2, [sp, #4]
   11bac:	ldr	r2, [r7, #20]
   11bb0:	add	r2, r2, #1888	; 0x760
   11bb4:	add	r2, r2, #12
   11bb8:	str	r2, [sp]
   11bbc:	mov	r2, r0
   11bc0:	mov	r0, r8
   11bc4:	bl	11264 <error@plt>
   11bc8:	b	11b1c <__assert_fail@plt+0x6b4>
   11bcc:	bl	111bc <__stack_chk_fail@plt>
   11bd0:	bl	11330 <__errno_location@plt>
   11bd4:	mov	r2, #5
   11bd8:	ldr	r1, [pc, #252]	; 11cdc <__assert_fail@plt+0x874>
   11bdc:	ldr	r5, [r0]
   11be0:	mov	r0, #0
   11be4:	bl	111b0 <dcgettext@plt>
   11be8:	ldr	r1, [r4, #24]
   11bec:	mov	r6, r0
   11bf0:	mov	r0, #4
   11bf4:	bl	1a830 <__assert_fail@plt+0x93c8>
   11bf8:	mov	r2, r6
   11bfc:	mov	r1, r5
   11c00:	mov	r3, r0
   11c04:	mov	r0, #1
   11c08:	bl	11264 <error@plt>
   11c0c:	ldr	r3, [pc, #204]	; 11ce0 <__assert_fail@plt+0x878>
   11c10:	mov	r2, #153	; 0x99
   11c14:	ldr	r1, [pc, #200]	; 11ce4 <__assert_fail@plt+0x87c>
   11c18:	ldr	r0, [pc, #200]	; 11ce8 <__assert_fail@plt+0x880>
   11c1c:	bl	11468 <__assert_fail@plt>
   11c20:	mov	r2, #5
   11c24:	ldr	r1, [pc, #192]	; 11cec <__assert_fail@plt+0x884>
   11c28:	b	11b34 <__assert_fail@plt+0x6cc>
   11c2c:	mov	r2, #5
   11c30:	ldr	r1, [pc, #184]	; 11cf0 <__assert_fail@plt+0x888>
   11c34:	bl	111b0 <dcgettext@plt>
   11c38:	mov	r4, r0
   11c3c:	ldr	r0, [sl]
   11c40:	bl	1aad8 <__assert_fail@plt+0x9670>
   11c44:	mov	r2, r4
   11c48:	ldr	r1, [sp, #24]
   11c4c:	mov	r3, r0
   11c50:	mov	r0, #1
   11c54:	bl	11264 <error@plt>
   11c58:	andeq	r2, r3, r8, lsl #30
   11c5c:			; <UNDEFINED> instruction: 0x000218bc
   11c60:			; <UNDEFINED> instruction: 0x0001feb4
   11c64:	andeq	pc, r1, r8, lsl #28
   11c68:			; <UNDEFINED> instruction: 0x000331b0
   11c6c:	ldrdeq	r2, [r1], -r8
   11c70:	andeq	pc, r1, ip, lsl r7	; <UNPREDICTABLE>
   11c74:	andeq	pc, r1, r4, lsl pc	; <UNPREDICTABLE>
   11c78:	andeq	r3, r3, r8, lsr #3
   11c7c:	andeq	r3, r3, r4, asr #2
   11c80:	andeq	r3, r3, r4, lsr #3
   11c84:	ldrdeq	pc, [r1], -r0
   11c88:	ldrdeq	pc, [r1], -ip
   11c8c:	andeq	pc, r1, ip, ror #29
   11c90:	strdeq	pc, [r1], -r8
   11c94:	andeq	pc, r1, r8, lsl #30
   11c98:	andeq	pc, r1, r0, lsr #16
   11c9c:	andeq	pc, r1, r4, lsl #28
   11ca0:			; <UNDEFINED> instruction: 0x000331b8
   11ca4:	andeq	r3, r3, r8, asr #2
   11ca8:	andeq	pc, r1, r8, asr #29
   11cac:	andeq	pc, r1, r4, asr r7	; <UNPREDICTABLE>
   11cb0:	muleq	r3, r8, r1
   11cb4:	andeq	r0, r2, r4, lsr r0
   11cb8:	andeq	pc, r1, r4, ror #31
   11cbc:	andeq	r0, r2, r4, lsr #32
   11cc0:			; <UNDEFINED> instruction: 0x000001b6
   11cc4:	andeq	r0, r0, r1, asr #18
   11cc8:	andeq	r0, r2, r0, lsl r0
   11ccc:	andeq	r0, r3, pc, lsr #27
   11cd0:	andeq	pc, r1, r0, ror pc	; <UNPREDICTABLE>
   11cd4:	andeq	pc, r1, ip, asr #31
   11cd8:	andeq	pc, r1, r0, lsl #31
   11cdc:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   11ce0:	andeq	pc, r1, r0, lsl #16
   11ce4:	andeq	pc, r1, r8, ror #31
   11ce8:	strdeq	pc, [r1], -r4
   11cec:	andeq	pc, r1, r0, lsr #30
   11cf0:	andeq	pc, r1, r8, lsl #16
   11cf4:	mov	fp, #0
   11cf8:	mov	lr, #0
   11cfc:	pop	{r1}		; (ldr r1, [sp], #4)
   11d00:	mov	r2, sp
   11d04:	push	{r2}		; (str r2, [sp, #-4]!)
   11d08:	push	{r0}		; (str r0, [sp, #-4]!)
   11d0c:	ldr	ip, [pc, #16]	; 11d24 <__assert_fail@plt+0x8bc>
   11d10:	push	{ip}		; (str ip, [sp, #-4]!)
   11d14:	ldr	r0, [pc, #12]	; 11d28 <__assert_fail@plt+0x8c0>
   11d18:	ldr	r3, [pc, #12]	; 11d2c <__assert_fail@plt+0x8c4>
   11d1c:	bl	11294 <__libc_start_main@plt>
   11d20:	bl	11438 <abort@plt>
   11d24:	strdeq	pc, [r1], -r4
   11d28:	andeq	r1, r1, r8, ror r4
   11d2c:	muleq	r1, r4, r6
   11d30:	ldr	r3, [pc, #20]	; 11d4c <__assert_fail@plt+0x8e4>
   11d34:	ldr	r2, [pc, #20]	; 11d50 <__assert_fail@plt+0x8e8>
   11d38:	add	r3, pc, r3
   11d3c:	ldr	r2, [r3, r2]
   11d40:	cmp	r2, #0
   11d44:	bxeq	lr
   11d48:	b	112dc <__gmon_start__@plt>
   11d4c:	andeq	r1, r2, r0, asr #5
   11d50:	andeq	r0, r0, r8, lsr r1
   11d54:	ldr	r0, [pc, #24]	; 11d74 <__assert_fail@plt+0x90c>
   11d58:	ldr	r3, [pc, #24]	; 11d78 <__assert_fail@plt+0x910>
   11d5c:	cmp	r3, r0
   11d60:	bxeq	lr
   11d64:	ldr	r3, [pc, #16]	; 11d7c <__assert_fail@plt+0x914>
   11d68:	cmp	r3, #0
   11d6c:	bxeq	lr
   11d70:	bx	r3
   11d74:	muleq	r3, r0, r1
   11d78:	muleq	r3, r0, r1
   11d7c:	andeq	r0, r0, r0
   11d80:	ldr	r0, [pc, #36]	; 11dac <__assert_fail@plt+0x944>
   11d84:	ldr	r1, [pc, #36]	; 11db0 <__assert_fail@plt+0x948>
   11d88:	sub	r1, r1, r0
   11d8c:	asr	r1, r1, #2
   11d90:	add	r1, r1, r1, lsr #31
   11d94:	asrs	r1, r1, #1
   11d98:	bxeq	lr
   11d9c:	ldr	r3, [pc, #16]	; 11db4 <__assert_fail@plt+0x94c>
   11da0:	cmp	r3, #0
   11da4:	bxeq	lr
   11da8:	bx	r3
   11dac:	muleq	r3, r0, r1
   11db0:	muleq	r3, r0, r1
   11db4:	andeq	r0, r0, r0
   11db8:	push	{r4, lr}
   11dbc:	ldr	r4, [pc, #24]	; 11ddc <__assert_fail@plt+0x974>
   11dc0:	ldrb	r3, [r4]
   11dc4:	cmp	r3, #0
   11dc8:	popne	{r4, pc}
   11dcc:	bl	11d54 <__assert_fail@plt+0x8ec>
   11dd0:	mov	r3, #1
   11dd4:	strb	r3, [r4]
   11dd8:	pop	{r4, pc}
   11ddc:	andeq	r3, r3, ip, lsr #3
   11de0:	b	11d80 <__assert_fail@plt+0x918>
   11de4:	push	{r4, r5, r6, lr}
   11de8:	mov	r5, r1
   11dec:	bl	18404 <__assert_fail@plt+0x6f9c>
   11df0:	subs	r4, r0, #0
   11df4:	popne	{r4, r5, r6, pc}
   11df8:	mov	r2, #5
   11dfc:	ldr	r1, [pc, #32]	; 11e24 <__assert_fail@plt+0x9bc>
   11e00:	bl	111b0 <dcgettext@plt>
   11e04:	mov	r6, r0
   11e08:	mov	r0, r5
   11e0c:	bl	1aad8 <__assert_fail@plt+0x9670>
   11e10:	mov	r2, r6
   11e14:	mov	r1, r4
   11e18:	mov	r3, r0
   11e1c:	mov	r0, #1
   11e20:	bl	11264 <error@plt>
   11e24:	andeq	pc, r1, r8, lsl #16
   11e28:	ldr	r3, [pc, #768]	; 12130 <__assert_fail@plt+0xcc8>
   11e2c:	push	{r7, lr}
   11e30:	sub	sp, sp, #64	; 0x40
   11e34:	ldr	r3, [r3]
   11e38:	subs	r4, r0, #0
   11e3c:	str	r3, [sp, #60]	; 0x3c
   11e40:	beq	11e7c <__assert_fail@plt+0xa14>
   11e44:	ldr	r3, [pc, #744]	; 12134 <__assert_fail@plt+0xccc>
   11e48:	mov	r2, #5
   11e4c:	ldr	r1, [pc, #740]	; 12138 <__assert_fail@plt+0xcd0>
   11e50:	mov	r0, #0
   11e54:	ldr	r5, [r3]
   11e58:	bl	111b0 <dcgettext@plt>
   11e5c:	ldr	r3, [pc, #728]	; 1213c <__assert_fail@plt+0xcd4>
   11e60:	mov	r1, #1
   11e64:	ldr	r3, [r3]
   11e68:	mov	r2, r0
   11e6c:	mov	r0, r5
   11e70:	bl	11384 <__fprintf_chk@plt>
   11e74:	mov	r0, r4
   11e78:	bl	11300 <exit@plt>
   11e7c:	mov	r2, #5
   11e80:	ldr	r1, [pc, #696]	; 12140 <__assert_fail@plt+0xcd8>
   11e84:	bl	111b0 <dcgettext@plt>
   11e88:	ldr	r3, [pc, #684]	; 1213c <__assert_fail@plt+0xcd4>
   11e8c:	ldr	r5, [pc, #688]	; 12144 <__assert_fail@plt+0xcdc>
   11e90:	ldr	r2, [r3]
   11e94:	mov	r1, r0
   11e98:	mov	r0, #1
   11e9c:	bl	1136c <__printf_chk@plt>
   11ea0:	mov	r2, #5
   11ea4:	ldr	r1, [pc, #668]	; 12148 <__assert_fail@plt+0xce0>
   11ea8:	mov	r0, r4
   11eac:	bl	111b0 <dcgettext@plt>
   11eb0:	ldr	r1, [r5]
   11eb4:	bl	110fc <fputs_unlocked@plt>
   11eb8:	mov	r2, #5
   11ebc:	ldr	r1, [pc, #648]	; 1214c <__assert_fail@plt+0xce4>
   11ec0:	mov	r0, r4
   11ec4:	bl	111b0 <dcgettext@plt>
   11ec8:	ldr	r1, [r5]
   11ecc:	bl	110fc <fputs_unlocked@plt>
   11ed0:	mov	r2, #5
   11ed4:	ldr	r1, [pc, #628]	; 12150 <__assert_fail@plt+0xce8>
   11ed8:	mov	r0, r4
   11edc:	bl	111b0 <dcgettext@plt>
   11ee0:	ldr	r1, [r5]
   11ee4:	bl	110fc <fputs_unlocked@plt>
   11ee8:	mov	r2, #5
   11eec:	ldr	r1, [pc, #608]	; 12154 <__assert_fail@plt+0xcec>
   11ef0:	mov	r0, r4
   11ef4:	bl	111b0 <dcgettext@plt>
   11ef8:	ldr	r1, [r5]
   11efc:	bl	110fc <fputs_unlocked@plt>
   11f00:	mov	r2, #5
   11f04:	ldr	r1, [pc, #588]	; 12158 <__assert_fail@plt+0xcf0>
   11f08:	mov	r0, r4
   11f0c:	bl	111b0 <dcgettext@plt>
   11f10:	ldr	r1, [r5]
   11f14:	bl	110fc <fputs_unlocked@plt>
   11f18:	mov	r2, #5
   11f1c:	ldr	r1, [pc, #568]	; 1215c <__assert_fail@plt+0xcf4>
   11f20:	mov	r0, r4
   11f24:	bl	111b0 <dcgettext@plt>
   11f28:	ldr	r1, [r5]
   11f2c:	bl	110fc <fputs_unlocked@plt>
   11f30:	mov	r2, #5
   11f34:	ldr	r1, [pc, #548]	; 12160 <__assert_fail@plt+0xcf8>
   11f38:	mov	r0, r4
   11f3c:	bl	111b0 <dcgettext@plt>
   11f40:	ldr	r1, [r5]
   11f44:	bl	110fc <fputs_unlocked@plt>
   11f48:	mov	r2, #5
   11f4c:	ldr	r1, [pc, #528]	; 12164 <__assert_fail@plt+0xcfc>
   11f50:	mov	r0, r4
   11f54:	bl	111b0 <dcgettext@plt>
   11f58:	ldr	r1, [r5]
   11f5c:	bl	110fc <fputs_unlocked@plt>
   11f60:	ldr	lr, [pc, #512]	; 12168 <__assert_fail@plt+0xd00>
   11f64:	add	ip, sp, #4
   11f68:	ldm	lr!, {r0, r1, r2, r3}
   11f6c:	stmia	ip!, {r0, r1, r2, r3}
   11f70:	ldm	lr!, {r0, r1, r2, r3}
   11f74:	ldr	r6, [sp, #4]
   11f78:	stmia	ip!, {r0, r1, r2, r3}
   11f7c:	cmp	r6, #0
   11f80:	ldm	lr!, {r0, r1, r2, r3}
   11f84:	addeq	r5, sp, #4
   11f88:	stmia	ip!, {r0, r1, r2, r3}
   11f8c:	ldm	lr, {r0, r1}
   11f90:	stm	ip, {r0, r1}
   11f94:	beq	11fc4 <__assert_fail@plt+0xb5c>
   11f98:	ldr	r7, [pc, #460]	; 1216c <__assert_fail@plt+0xd04>
   11f9c:	add	r5, sp, #4
   11fa0:	b	11fb0 <__assert_fail@plt+0xb48>
   11fa4:	ldr	r6, [r5, #8]!
   11fa8:	cmp	r6, #0
   11fac:	beq	11fc4 <__assert_fail@plt+0xb5c>
   11fb0:	mov	r1, r6
   11fb4:	mov	r0, r7
   11fb8:	bl	1112c <strcmp@plt>
   11fbc:	cmp	r0, #0
   11fc0:	bne	11fa4 <__assert_fail@plt+0xb3c>
   11fc4:	ldr	r5, [r5, #4]
   11fc8:	mov	r2, #5
   11fcc:	cmp	r5, #0
   11fd0:	ldr	r1, [pc, #408]	; 12170 <__assert_fail@plt+0xd08>
   11fd4:	beq	1207c <__assert_fail@plt+0xc14>
   11fd8:	mov	r0, #0
   11fdc:	bl	111b0 <dcgettext@plt>
   11fe0:	ldr	r3, [pc, #396]	; 12174 <__assert_fail@plt+0xd0c>
   11fe4:	ldr	r2, [pc, #396]	; 12178 <__assert_fail@plt+0xd10>
   11fe8:	mov	r1, r0
   11fec:	mov	r0, #1
   11ff0:	bl	1136c <__printf_chk@plt>
   11ff4:	mov	r1, #0
   11ff8:	mov	r0, #5
   11ffc:	bl	113b4 <setlocale@plt>
   12000:	cmp	r0, #0
   12004:	ldreq	r6, [pc, #352]	; 1216c <__assert_fail@plt+0xd04>
   12008:	beq	12024 <__assert_fail@plt+0xbbc>
   1200c:	mov	r2, #3
   12010:	ldr	r1, [pc, #356]	; 1217c <__assert_fail@plt+0xd14>
   12014:	bl	1142c <strncmp@plt>
   12018:	ldr	r6, [pc, #332]	; 1216c <__assert_fail@plt+0xd04>
   1201c:	cmp	r0, #0
   12020:	bne	1210c <__assert_fail@plt+0xca4>
   12024:	mov	r2, #5
   12028:	ldr	r1, [pc, #336]	; 12180 <__assert_fail@plt+0xd18>
   1202c:	mov	r0, #0
   12030:	bl	111b0 <dcgettext@plt>
   12034:	ldr	r3, [pc, #304]	; 1216c <__assert_fail@plt+0xd04>
   12038:	ldr	r2, [pc, #308]	; 12174 <__assert_fail@plt+0xd0c>
   1203c:	mov	r1, r0
   12040:	mov	r0, #1
   12044:	bl	1136c <__printf_chk@plt>
   12048:	mov	r2, #5
   1204c:	ldr	r1, [pc, #304]	; 12184 <__assert_fail@plt+0xd1c>
   12050:	mov	r0, #0
   12054:	bl	111b0 <dcgettext@plt>
   12058:	ldr	r2, [pc, #296]	; 12188 <__assert_fail@plt+0xd20>
   1205c:	cmp	r5, r6
   12060:	ldr	r3, [pc, #292]	; 1218c <__assert_fail@plt+0xd24>
   12064:	movne	r3, r2
   12068:	mov	r1, r0
   1206c:	mov	r2, r5
   12070:	mov	r0, #1
   12074:	bl	1136c <__printf_chk@plt>
   12078:	b	11e74 <__assert_fail@plt+0xa0c>
   1207c:	mov	r0, r5
   12080:	bl	111b0 <dcgettext@plt>
   12084:	ldr	r3, [pc, #232]	; 12174 <__assert_fail@plt+0xd0c>
   12088:	ldr	r2, [pc, #232]	; 12178 <__assert_fail@plt+0xd10>
   1208c:	mov	r1, r0
   12090:	mov	r0, #1
   12094:	bl	1136c <__printf_chk@plt>
   12098:	mov	r1, r5
   1209c:	mov	r0, #5
   120a0:	bl	113b4 <setlocale@plt>
   120a4:	cmp	r0, #0
   120a8:	beq	120c0 <__assert_fail@plt+0xc58>
   120ac:	mov	r2, #3
   120b0:	ldr	r1, [pc, #196]	; 1217c <__assert_fail@plt+0xd14>
   120b4:	bl	1142c <strncmp@plt>
   120b8:	cmp	r0, #0
   120bc:	bne	12104 <__assert_fail@plt+0xc9c>
   120c0:	mov	r2, #5
   120c4:	ldr	r1, [pc, #180]	; 12180 <__assert_fail@plt+0xd18>
   120c8:	mov	r0, #0
   120cc:	bl	111b0 <dcgettext@plt>
   120d0:	ldr	r3, [pc, #148]	; 1216c <__assert_fail@plt+0xd04>
   120d4:	ldr	r2, [pc, #152]	; 12174 <__assert_fail@plt+0xd0c>
   120d8:	mov	r5, r3
   120dc:	mov	r1, r0
   120e0:	mov	r0, #1
   120e4:	bl	1136c <__printf_chk@plt>
   120e8:	ldr	r1, [pc, #148]	; 12184 <__assert_fail@plt+0xd1c>
   120ec:	mov	r2, #5
   120f0:	mov	r0, #0
   120f4:	bl	111b0 <dcgettext@plt>
   120f8:	ldr	r3, [pc, #140]	; 1218c <__assert_fail@plt+0xd24>
   120fc:	mov	r1, r0
   12100:	b	1206c <__assert_fail@plt+0xc04>
   12104:	ldr	r6, [pc, #96]	; 1216c <__assert_fail@plt+0xd04>
   12108:	mov	r5, r6
   1210c:	mov	r2, #5
   12110:	ldr	r1, [pc, #120]	; 12190 <__assert_fail@plt+0xd28>
   12114:	mov	r0, #0
   12118:	bl	111b0 <dcgettext@plt>
   1211c:	ldr	r2, [pc, #72]	; 1216c <__assert_fail@plt+0xd04>
   12120:	mov	r1, r0
   12124:	mov	r0, #1
   12128:	bl	1136c <__printf_chk@plt>
   1212c:	b	12024 <__assert_fail@plt+0xbbc>
   12130:	andeq	r2, r3, r8, lsl #30
   12134:	andeq	r3, r3, r0, lsr #3
   12138:	andeq	pc, r1, r8, lsr #16
   1213c:	ldrdeq	r3, [r3], -r8
   12140:	andeq	pc, r1, r0, asr r8	; <UNPREDICTABLE>
   12144:	andeq	r3, r3, r4, lsr #3
   12148:	andeq	pc, r1, r0, ror r8	; <UNPREDICTABLE>
   1214c:	muleq	r1, r4, r9
   12150:	andeq	pc, r1, r0, ror #19
   12154:			; <UNDEFINED> instruction: 0x0001fab4
   12158:			; <UNDEFINED> instruction: 0x0001fbbc
   1215c:	andeq	pc, r1, r4, lsl sp	; <UNPREDICTABLE>
   12160:	andeq	pc, r1, r4, asr #26
   12164:	andeq	pc, r1, ip, ror sp	; <UNPREDICTABLE>
   12168:	andeq	pc, r1, ip, lsl r7	; <UNPREDICTABLE>
   1216c:	andeq	pc, r1, r0, lsr #16
   12170:	andeq	pc, r1, r4, asr #27
   12174:	ldrdeq	pc, [r1], -ip
   12178:	andeq	pc, r1, r4, lsl #28
   1217c:	andeq	pc, r1, r4, lsl lr	; <UNPREDICTABLE>
   12180:	andeq	pc, r1, r0, ror #28
   12184:	andeq	pc, r1, r0, lsl #29
   12188:			; <UNDEFINED> instruction: 0x000218bc
   1218c:	andeq	r0, r2, r0, asr r0
   12190:	andeq	pc, r1, r8, lsl lr	; <UNPREDICTABLE>
   12194:	mov	r0, #1
   12198:	b	11e28 <__assert_fail@plt+0x9c0>
   1219c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121a0:	mov	r5, r1
   121a4:	sub	sp, sp, #12
   121a8:	mov	r4, r2
   121ac:	str	r2, [sp]
   121b0:	mov	r7, r3
   121b4:	mov	sl, r0
   121b8:	bl	1130c <strlen@plt>
   121bc:	ldr	fp, [r5]
   121c0:	cmp	fp, #0
   121c4:	beq	12288 <__assert_fail@plt+0xe20>
   121c8:	mov	r6, #0
   121cc:	mov	r8, r0
   121d0:	str	r6, [sp, #4]
   121d4:	mvn	r9, #0
   121d8:	b	12204 <__assert_fail@plt+0xd9c>
   121dc:	bl	111a4 <memcmp@plt>
   121e0:	ldr	r3, [sp, #4]
   121e4:	cmp	r0, #0
   121e8:	movne	r3, #1
   121ec:	str	r3, [sp, #4]
   121f0:	ldr	fp, [r5, #4]!
   121f4:	add	r6, r6, #1
   121f8:	cmp	fp, #0
   121fc:	add	r4, r4, r7
   12200:	beq	12260 <__assert_fail@plt+0xdf8>
   12204:	mov	r2, r8
   12208:	mov	r1, sl
   1220c:	mov	r0, fp
   12210:	bl	1142c <strncmp@plt>
   12214:	cmp	r0, #0
   12218:	mov	r0, fp
   1221c:	bne	121f0 <__assert_fail@plt+0xd88>
   12220:	bl	1130c <strlen@plt>
   12224:	ldr	r3, [sp]
   12228:	mov	r2, r7
   1222c:	mov	r1, r4
   12230:	cmp	r0, r8
   12234:	mla	r0, r7, r9, r3
   12238:	beq	12278 <__assert_fail@plt+0xe10>
   1223c:	cmn	r9, #1
   12240:	moveq	r9, r6
   12244:	beq	121f0 <__assert_fail@plt+0xd88>
   12248:	ldr	r3, [sp]
   1224c:	cmp	r3, #0
   12250:	bne	121dc <__assert_fail@plt+0xd74>
   12254:	mov	r3, #1
   12258:	str	r3, [sp, #4]
   1225c:	b	121f0 <__assert_fail@plt+0xd88>
   12260:	ldr	r3, [sp, #4]
   12264:	cmp	r3, #0
   12268:	mvnne	r9, #1
   1226c:	mov	r0, r9
   12270:	add	sp, sp, #12
   12274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12278:	mov	r9, r6
   1227c:	mov	r0, r9
   12280:	add	sp, sp, #12
   12284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12288:	mvn	r9, #0
   1228c:	b	1226c <__assert_fail@plt+0xe04>
   12290:	cmn	r2, #1
   12294:	push	{r4, r5, r6, lr}
   12298:	mov	r2, #5
   1229c:	sub	sp, sp, #8
   122a0:	mov	r5, r1
   122a4:	mov	r6, r0
   122a8:	ldreq	r1, [pc, #76]	; 122fc <__assert_fail@plt+0xe94>
   122ac:	ldrne	r1, [pc, #76]	; 12300 <__assert_fail@plt+0xe98>
   122b0:	mov	r0, #0
   122b4:	bl	111b0 <dcgettext@plt>
   122b8:	mov	r2, r5
   122bc:	mov	r1, #8
   122c0:	mov	r4, r0
   122c4:	mov	r0, #0
   122c8:	bl	1a77c <__assert_fail@plt+0x9314>
   122cc:	mov	r1, r6
   122d0:	mov	r5, r0
   122d4:	mov	r0, #1
   122d8:	bl	1aac8 <__assert_fail@plt+0x9660>
   122dc:	mov	r1, #0
   122e0:	mov	r3, r5
   122e4:	mov	r2, r4
   122e8:	str	r0, [sp]
   122ec:	mov	r0, r1
   122f0:	bl	11264 <error@plt>
   122f4:	add	sp, sp, #8
   122f8:	pop	{r4, r5, r6, pc}
   122fc:	andeq	r0, r2, r0, lsr #2
   12300:	andeq	r0, r2, ip, lsr r1
   12304:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12308:	mov	r6, r0
   1230c:	ldr	sl, [pc, #224]	; 123f4 <__assert_fail@plt+0xf8c>
   12310:	mov	r4, r1
   12314:	mov	r7, r2
   12318:	ldr	r1, [pc, #216]	; 123f8 <__assert_fail@plt+0xf90>
   1231c:	mov	r2, #5
   12320:	mov	r0, #0
   12324:	bl	111b0 <dcgettext@plt>
   12328:	ldr	r1, [sl]
   1232c:	bl	110fc <fputs_unlocked@plt>
   12330:	ldr	fp, [r6]
   12334:	cmp	fp, #0
   12338:	movne	r9, #0
   1233c:	movne	r5, r9
   12340:	bne	1237c <__assert_fail@plt+0xf14>
   12344:	b	123c0 <__assert_fail@plt+0xf58>
   12348:	mov	r0, fp
   1234c:	bl	1aad8 <__assert_fail@plt+0x9670>
   12350:	ldr	r2, [pc, #164]	; 123fc <__assert_fail@plt+0xf94>
   12354:	mov	r1, #1
   12358:	mov	r9, r4
   1235c:	mov	r3, r0
   12360:	mov	r0, r8
   12364:	bl	11384 <__fprintf_chk@plt>
   12368:	ldr	fp, [r6, #4]!
   1236c:	add	r5, r5, #1
   12370:	cmp	fp, #0
   12374:	add	r4, r4, r7
   12378:	beq	123c0 <__assert_fail@plt+0xf58>
   1237c:	cmp	r5, #0
   12380:	mov	r1, r4
   12384:	mov	r2, r7
   12388:	mov	r0, r9
   1238c:	ldr	r8, [sl]
   12390:	beq	12348 <__assert_fail@plt+0xee0>
   12394:	bl	111a4 <memcmp@plt>
   12398:	cmp	r0, #0
   1239c:	bne	12348 <__assert_fail@plt+0xee0>
   123a0:	mov	r0, fp
   123a4:	bl	1aad8 <__assert_fail@plt+0x9670>
   123a8:	ldr	r2, [pc, #80]	; 12400 <__assert_fail@plt+0xf98>
   123ac:	mov	r1, #1
   123b0:	mov	r3, r0
   123b4:	mov	r0, r8
   123b8:	bl	11384 <__fprintf_chk@plt>
   123bc:	b	12368 <__assert_fail@plt+0xf00>
   123c0:	ldr	r0, [sl]
   123c4:	ldr	r3, [r0, #20]
   123c8:	ldr	r2, [r0, #24]
   123cc:	cmp	r3, r2
   123d0:	bcs	123e8 <__assert_fail@plt+0xf80>
   123d4:	add	r1, r3, #1
   123d8:	mov	r2, #10
   123dc:	str	r1, [r0, #20]
   123e0:	strb	r2, [r3]
   123e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123e8:	mov	r1, #10
   123ec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123f0:	b	113a8 <__overflow@plt>
   123f4:	andeq	r3, r3, r0, lsr #3
   123f8:	andeq	r0, r2, ip, asr r1
   123fc:	andeq	r0, r2, r4, ror r1
   12400:	andeq	r0, r2, ip, ror r1
   12404:	push	{r4, r5, r6, r7, r8, lr}
   12408:	mov	r6, r1
   1240c:	mov	r4, r2
   12410:	mov	r5, r3
   12414:	mov	r7, r0
   12418:	ldr	r3, [sp, #24]
   1241c:	mov	r2, r5
   12420:	mov	r1, r4
   12424:	mov	r0, r6
   12428:	bl	1219c <__assert_fail@plt+0xd34>
   1242c:	cmp	r0, #0
   12430:	popge	{r4, r5, r6, r7, r8, pc}
   12434:	mov	r2, r0
   12438:	mov	r1, r6
   1243c:	mov	r0, r7
   12440:	bl	12290 <__assert_fail@plt+0xe28>
   12444:	mov	r0, r4
   12448:	ldr	r2, [sp, #24]
   1244c:	mov	r1, r5
   12450:	bl	12304 <__assert_fail@plt+0xe9c>
   12454:	ldr	r3, [sp, #28]
   12458:	blx	r3
   1245c:	mvn	r0, #0
   12460:	pop	{r4, r5, r6, r7, r8, pc}
   12464:	push	{r4, r5, r6, r7, r8, lr}
   12468:	ldr	r7, [r1]
   1246c:	cmp	r7, #0
   12470:	beq	124b0 <__assert_fail@plt+0x1048>
   12474:	mov	r6, r3
   12478:	mov	r8, r0
   1247c:	mov	r4, r2
   12480:	mov	r5, r1
   12484:	b	12494 <__assert_fail@plt+0x102c>
   12488:	ldr	r7, [r5, #4]!
   1248c:	cmp	r7, #0
   12490:	beq	124b0 <__assert_fail@plt+0x1048>
   12494:	mov	r1, r4
   12498:	mov	r2, r6
   1249c:	mov	r0, r8
   124a0:	bl	111a4 <memcmp@plt>
   124a4:	add	r4, r4, r6
   124a8:	cmp	r0, #0
   124ac:	bne	12488 <__assert_fail@plt+0x1020>
   124b0:	mov	r0, r7
   124b4:	pop	{r4, r5, r6, r7, r8, pc}
   124b8:	ldr	r3, [pc, #4]	; 124c4 <__assert_fail@plt+0x105c>
   124bc:	str	r0, [r3]
   124c0:	bx	lr
   124c4:	ldrdeq	r3, [r3], -r0
   124c8:	ldr	r3, [pc, #4]	; 124d4 <__assert_fail@plt+0x106c>
   124cc:	strb	r0, [r3, #4]
   124d0:	bx	lr
   124d4:	ldrdeq	r3, [r3], -r0
   124d8:	ldr	r3, [pc, #180]	; 12594 <__assert_fail@plt+0x112c>
   124dc:	push	{r4, r5, r6, lr}
   124e0:	sub	sp, sp, #8
   124e4:	ldr	r0, [r3]
   124e8:	bl	1b93c <__assert_fail@plt+0xa4d4>
   124ec:	cmp	r0, #0
   124f0:	beq	12518 <__assert_fail@plt+0x10b0>
   124f4:	bl	11330 <__errno_location@plt>
   124f8:	ldr	r5, [pc, #152]	; 12598 <__assert_fail@plt+0x1130>
   124fc:	ldrb	r3, [r5, #4]
   12500:	cmp	r3, #0
   12504:	mov	r4, r0
   12508:	beq	12534 <__assert_fail@plt+0x10cc>
   1250c:	ldr	r3, [r0]
   12510:	cmp	r3, #32
   12514:	bne	12534 <__assert_fail@plt+0x10cc>
   12518:	ldr	r3, [pc, #124]	; 1259c <__assert_fail@plt+0x1134>
   1251c:	ldr	r0, [r3]
   12520:	bl	1b93c <__assert_fail@plt+0xa4d4>
   12524:	cmp	r0, #0
   12528:	bne	12574 <__assert_fail@plt+0x110c>
   1252c:	add	sp, sp, #8
   12530:	pop	{r4, r5, r6, pc}
   12534:	mov	r2, #5
   12538:	ldr	r1, [pc, #96]	; 125a0 <__assert_fail@plt+0x1138>
   1253c:	mov	r0, #0
   12540:	bl	111b0 <dcgettext@plt>
   12544:	mov	r6, r0
   12548:	ldr	r0, [r5]
   1254c:	cmp	r0, #0
   12550:	beq	12580 <__assert_fail@plt+0x1118>
   12554:	ldr	r4, [r4]
   12558:	bl	1a8f8 <__assert_fail@plt+0x9490>
   1255c:	mov	r1, r4
   12560:	str	r6, [sp]
   12564:	ldr	r2, [pc, #56]	; 125a4 <__assert_fail@plt+0x113c>
   12568:	mov	r3, r0
   1256c:	mov	r0, #0
   12570:	bl	11264 <error@plt>
   12574:	ldr	r3, [pc, #44]	; 125a8 <__assert_fail@plt+0x1140>
   12578:	ldr	r0, [r3]
   1257c:	bl	11174 <_exit@plt>
   12580:	mov	r3, r6
   12584:	ldr	r1, [r4]
   12588:	ldr	r2, [pc, #28]	; 125ac <__assert_fail@plt+0x1144>
   1258c:	bl	11264 <error@plt>
   12590:	b	12574 <__assert_fail@plt+0x110c>
   12594:	andeq	r3, r3, r4, lsr #3
   12598:	ldrdeq	r3, [r3], -r0
   1259c:	andeq	r3, r3, r0, lsr #3
   125a0:	andeq	r0, r2, r4, lsl #3
   125a4:	muleq	r2, r0, r1
   125a8:	andeq	r3, r3, ip, asr #2
   125ac:	muleq	r2, r4, r1
   125b0:	mov	ip, r1
   125b4:	push	{r4, r5, r6, r7, r8, lr}
   125b8:	mov	r1, r2
   125bc:	mov	r5, r0
   125c0:	mov	r2, r3
   125c4:	mov	r0, ip
   125c8:	bl	11270 <open64@plt>
   125cc:	sub	r3, r5, r0
   125d0:	clz	r3, r3
   125d4:	lsr	r3, r3, #5
   125d8:	orrs	r3, r3, r0, lsr #31
   125dc:	mov	r4, r0
   125e0:	beq	125ec <__assert_fail@plt+0x1184>
   125e4:	mov	r0, r4
   125e8:	pop	{r4, r5, r6, r7, r8, pc}
   125ec:	mov	r1, r5
   125f0:	bl	111c8 <dup2@plt>
   125f4:	mov	r7, r0
   125f8:	bl	11330 <__errno_location@plt>
   125fc:	mov	r5, r0
   12600:	mov	r0, r4
   12604:	ldr	r6, [r5]
   12608:	mov	r4, r7
   1260c:	bl	11444 <close@plt>
   12610:	str	r6, [r5]
   12614:	mov	r0, r4
   12618:	pop	{r4, r5, r6, r7, r8, pc}
   1261c:	cmp	r0, #0
   12620:	push	{r4, r5, r6, lr}
   12624:	mov	r6, r1
   12628:	mov	r4, r2
   1262c:	mov	r5, r3
   12630:	bge	12664 <__assert_fail@plt+0x11fc>
   12634:	cmp	r2, #0
   12638:	beq	126a8 <__assert_fail@plt+0x1240>
   1263c:	mov	r1, r4
   12640:	mov	r2, r5
   12644:	mov	r0, r6
   12648:	ldr	r3, [sp, #16]
   1264c:	bl	11120 <utimensat@plt>
   12650:	mov	r1, r0
   12654:	cmp	r1, #1
   12658:	beq	126a8 <__assert_fail@plt+0x1240>
   1265c:	mov	r0, r1
   12660:	pop	{r4, r5, r6, pc}
   12664:	mov	r1, r3
   12668:	bl	113f0 <futimens@plt>
   1266c:	cmn	r0, #1
   12670:	moveq	r3, #1
   12674:	movne	r3, #0
   12678:	cmp	r4, #0
   1267c:	moveq	r3, #0
   12680:	cmp	r3, #0
   12684:	mov	r1, r0
   12688:	beq	12654 <__assert_fail@plt+0x11ec>
   1268c:	bl	11330 <__errno_location@plt>
   12690:	ldr	r3, [r0]
   12694:	cmp	r3, #38	; 0x26
   12698:	mvnne	r1, #0
   1269c:	beq	1263c <__assert_fail@plt+0x11d4>
   126a0:	mov	r0, r1
   126a4:	pop	{r4, r5, r6, pc}
   126a8:	bl	11330 <__errno_location@plt>
   126ac:	mov	r3, #9
   126b0:	mvn	r1, #0
   126b4:	str	r3, [r0]
   126b8:	mov	r0, r1
   126bc:	pop	{r4, r5, r6, pc}
   126c0:	push	{r4, r5, lr}
   126c4:	sub	sp, sp, #20
   126c8:	ldr	r4, [pc, #92]	; 1272c <__assert_fail@plt+0x12c4>
   126cc:	mov	r1, r0
   126d0:	mov	r5, r0
   126d4:	ldr	r3, [r4]
   126d8:	mov	r0, #0
   126dc:	str	r3, [sp, #12]
   126e0:	bl	11168 <clock_gettime@plt>
   126e4:	cmp	r0, #0
   126e8:	beq	12710 <__assert_fail@plt+0x12a8>
   126ec:	mov	r1, #0
   126f0:	add	r0, sp, #4
   126f4:	bl	11240 <gettimeofday@plt>
   126f8:	ldmib	sp, {r1, r3}
   126fc:	rsb	r2, r3, r3, lsl #5
   12700:	str	r1, [r5]
   12704:	add	r3, r3, r2, lsl #2
   12708:	lsl	r3, r3, #3
   1270c:	str	r3, [r5, #4]
   12710:	ldr	r2, [sp, #12]
   12714:	ldr	r3, [r4]
   12718:	cmp	r2, r3
   1271c:	bne	12728 <__assert_fail@plt+0x12c0>
   12720:	add	sp, sp, #20
   12724:	pop	{r4, r5, pc}
   12728:	bl	111bc <__stack_chk_fail@plt>
   1272c:	andeq	r2, r3, r8, lsl #30
   12730:	sub	sp, sp, #8
   12734:	push	{r4, r5, r6, r7, r8, lr}
   12738:	mov	r4, r0
   1273c:	ldr	r0, [r0, #156]	; 0x9c
   12740:	add	r1, sp, #24
   12744:	cmp	r0, #0
   12748:	stm	r1, {r2, r3}
   1274c:	ldrd	r6, [sp, #32]
   12750:	ldr	r5, [sp, #40]	; 0x28
   12754:	beq	127a4 <__assert_fail@plt+0x133c>
   12758:	ldr	r3, [r4, #48]	; 0x30
   1275c:	cmp	r3, #0
   12760:	bne	127a4 <__assert_fail@plt+0x133c>
   12764:	ldrb	r3, [r4, #153]	; 0x99
   12768:	cmp	r3, #0
   1276c:	bne	127a4 <__assert_fail@plt+0x133c>
   12770:	ldr	r3, [r4, #172]	; 0xac
   12774:	cmp	r5, #2
   12778:	cmple	r3, #0
   1277c:	beq	12880 <__assert_fail@plt+0x1418>
   12780:	mov	ip, r1
   12784:	add	lr, r4, #32
   12788:	ldm	ip!, {r0, r1, r2, r3}
   1278c:	mov	r5, #1
   12790:	strb	r5, [r4, #180]	; 0xb4
   12794:	stmia	lr!, {r0, r1, r2, r3}
   12798:	ldm	ip, {r0, r1}
   1279c:	stm	lr, {r0, r1}
   127a0:	b	12810 <__assert_fail@plt+0x13a8>
   127a4:	cmp	r5, #4
   127a8:	ble	1281c <__assert_fail@plt+0x13b4>
   127ac:	add	r0, r0, #1
   127b0:	str	r0, [r4, #156]	; 0x9c
   127b4:	mov	r2, #100	; 0x64
   127b8:	mov	r3, #0
   127bc:	mov	r0, r6
   127c0:	mov	r1, r7
   127c4:	bl	1f44c <__assert_fail@plt+0xdfe4>
   127c8:	mov	r0, r6
   127cc:	mov	r1, r7
   127d0:	sub	r5, r5, #4
   127d4:	strd	r2, [r4, #64]	; 0x40
   127d8:	mov	r2, #100	; 0x64
   127dc:	mov	r3, #0
   127e0:	bl	1f44c <__assert_fail@plt+0xdfe4>
   127e4:	mov	r2, #100	; 0x64
   127e8:	mov	r3, #0
   127ec:	bl	1f44c <__assert_fail@plt+0xdfe4>
   127f0:	mov	r0, r6
   127f4:	mov	r1, r7
   127f8:	strd	r2, [r4, #56]	; 0x38
   127fc:	ldr	r2, [pc, #152]	; 1289c <__assert_fail@plt+0x1434>
   12800:	mov	r3, #0
   12804:	bl	1f44c <__assert_fail@plt+0xdfe4>
   12808:	str	r5, [r4, #48]	; 0x30
   1280c:	strd	r0, [r4, #40]	; 0x28
   12810:	pop	{r4, r5, r6, r7, r8, lr}
   12814:	add	sp, sp, #8
   12818:	bx	lr
   1281c:	ldr	r3, [r4, #172]	; 0xac
   12820:	cmp	r5, #2
   12824:	add	r3, r3, #1
   12828:	str	r3, [r4, #172]	; 0xac
   1282c:	ble	12888 <__assert_fail@plt+0x1420>
   12830:	mov	r2, #100	; 0x64
   12834:	mov	r3, #0
   12838:	mov	r0, r6
   1283c:	mov	r1, r7
   12840:	bl	1f44c <__assert_fail@plt+0xdfe4>
   12844:	mov	r2, #100	; 0x64
   12848:	mov	r3, #0
   1284c:	strd	r0, [r4, #72]	; 0x48
   12850:	mov	r0, r6
   12854:	mov	r1, r7
   12858:	bl	1f44c <__assert_fail@plt+0xdfe4>
   1285c:	strd	r2, [r4, #80]	; 0x50
   12860:	mov	r3, #0
   12864:	mov	r2, #2
   12868:	str	r3, [r4, #88]	; 0x58
   1286c:	str	r3, [r4, #92]	; 0x5c
   12870:	str	r2, [r4, #28]
   12874:	pop	{r4, r5, r6, r7, r8, lr}
   12878:	add	sp, sp, #8
   1287c:	bx	lr
   12880:	mov	r3, #1
   12884:	str	r3, [r4, #172]	; 0xac
   12888:	mov	r2, #0
   1288c:	mov	r3, #0
   12890:	strd	r6, [r4, #72]	; 0x48
   12894:	strd	r2, [r4, #80]	; 0x50
   12898:	b	12860 <__assert_fail@plt+0x13f8>
   1289c:	andeq	r2, r0, r0, lsl r7
   128a0:	push	{r4, r5, r6, lr}
   128a4:	subs	r5, r0, #0
   128a8:	ldr	r4, [pc, #248]	; 129a8 <__assert_fail@plt+0x1540>
   128ac:	mov	r6, r1
   128b0:	sub	sp, sp, #8
   128b4:	smull	r3, r4, r4, r5
   128b8:	ldr	r3, [pc, #236]	; 129ac <__assert_fail@plt+0x1544>
   128bc:	add	r2, r4, r5
   128c0:	asr	r4, r5, #31
   128c4:	rsb	r4, r4, r2, asr #11
   128c8:	movlt	r1, #45	; 0x2d
   128cc:	eor	r2, r4, r4, asr #31
   128d0:	sub	r2, r2, r4, asr #31
   128d4:	rsb	r4, r4, r4, lsl #4
   128d8:	movge	r1, #43	; 0x2b
   128dc:	rsb	r4, r4, r4, lsl #4
   128e0:	stm	sp, {r1, r2}
   128e4:	mov	r0, r6
   128e8:	mvn	r2, #0
   128ec:	mov	r1, #1
   128f0:	bl	1133c <__sprintf_chk@plt>
   128f4:	subs	r4, r5, r4, lsl #4
   128f8:	beq	12968 <__assert_fail@plt+0x1500>
   128fc:	cmp	r4, #0
   12900:	ldr	r3, [pc, #168]	; 129b0 <__assert_fail@plt+0x1548>
   12904:	rsblt	r4, r4, #0
   12908:	ldr	lr, [pc, #164]	; 129b4 <__assert_fail@plt+0x154c>
   1290c:	umull	r2, r3, r3, r4
   12910:	ldr	r1, [pc, #160]	; 129b8 <__assert_fail@plt+0x1550>
   12914:	add	r5, r6, r0
   12918:	lsr	r3, r3, #5
   1291c:	mov	r2, r3
   12920:	umull	r3, r1, r1, r4
   12924:	umull	r3, ip, lr, r2
   12928:	rsb	r3, r2, r2, lsl #4
   1292c:	lsr	ip, ip, #3
   12930:	lsr	r1, r1, #6
   12934:	add	ip, ip, ip, lsl #2
   12938:	subs	r3, r4, r3, lsl #2
   1293c:	sub	r2, r2, ip, lsl #1
   12940:	add	r2, r2, #48	; 0x30
   12944:	add	r1, r1, #48	; 0x30
   12948:	mov	ip, #58	; 0x3a
   1294c:	strb	ip, [r6, r0]
   12950:	strb	r2, [r5, #2]
   12954:	strb	r1, [r5, #1]
   12958:	addeq	r2, r5, #3
   1295c:	bne	12974 <__assert_fail@plt+0x150c>
   12960:	mov	r3, #0
   12964:	strb	r3, [r2]
   12968:	mov	r0, r6
   1296c:	add	sp, sp, #8
   12970:	pop	{r4, r5, r6, pc}
   12974:	umull	r2, lr, lr, r3
   12978:	strb	ip, [r5, #3]
   1297c:	add	r2, r5, #6
   12980:	lsr	lr, lr, #3
   12984:	add	r1, lr, lr, lsl #2
   12988:	add	lr, lr, #48	; 0x30
   1298c:	sub	r3, r3, r1, lsl #1
   12990:	add	r3, r3, #48	; 0x30
   12994:	strb	r3, [r5, #5]
   12998:	mov	r3, #0
   1299c:	strb	lr, [r5, #4]
   129a0:	strb	r3, [r2]
   129a4:	b	12968 <__assert_fail@plt+0x1500>
   129a8:			; <UNDEFINED> instruction: 0x91a2b3c5
   129ac:			; <UNDEFINED> instruction: 0x00020cb8
   129b0:	stmhi	r8, {r0, r3, r7, fp, pc}
   129b4:	stclgt	12, cr12, [ip], {205}	; 0xcd
   129b8:	blne	13b3094 <optarg@@GLIBC_2.4+0x137feec>
   129bc:	ldr	r2, [pc, #104]	; 12a2c <__assert_fail@plt+0x15c4>
   129c0:	push	{r4, lr}
   129c4:	mov	r4, r1
   129c8:	smull	r2, ip, r2, r0
   129cc:	ldr	lr, [pc, #92]	; 12a30 <__assert_fail@plt+0x15c8>
   129d0:	asr	r2, r0, #31
   129d4:	rsb	r2, r2, ip, asr #5
   129d8:	add	ip, r2, #19
   129dc:	add	r2, r2, r2, lsl #2
   129e0:	eor	r1, ip, ip, asr #31
   129e4:	add	r2, r2, r2, lsl #2
   129e8:	sub	sp, sp, #8
   129ec:	sub	r2, r0, r2, lsl #2
   129f0:	cmp	r2, #0
   129f4:	rsblt	r2, r2, #0
   129f8:	sub	r1, r1, ip, asr #31
   129fc:	ldr	r3, [pc, #48]	; 12a34 <__assert_fail@plt+0x15cc>
   12a00:	stm	sp, {r1, r2}
   12a04:	cmp	r0, r3
   12a08:	movlt	r3, lr
   12a0c:	addge	r3, lr, #1
   12a10:	mvn	r2, #0
   12a14:	mov	r0, r4
   12a18:	mov	r1, #1
   12a1c:	bl	1133c <__sprintf_chk@plt>
   12a20:	mov	r0, r4
   12a24:	add	sp, sp, #8
   12a28:	pop	{r4, pc}
   12a2c:	mvnpl	r8, pc, lsl r5
   12a30:	andeq	r0, r2, r0, asr #25
   12a34:			; <UNDEFINED> instruction: 0xfffff894
   12a38:	push	{r0, r1, r2, r3}
   12a3c:	mov	r2, #6
   12a40:	push	{r4, r5, r6, lr}
   12a44:	sub	sp, sp, #8
   12a48:	ldr	r4, [pc, #88]	; 12aa8 <__assert_fail@plt+0x1640>
   12a4c:	ldr	r5, [pc, #88]	; 12aac <__assert_fail@plt+0x1644>
   12a50:	ldr	r6, [sp, #24]
   12a54:	ldr	ip, [r4]
   12a58:	ldr	r3, [r5]
   12a5c:	mov	r1, #1
   12a60:	ldr	r0, [pc, #72]	; 12ab0 <__assert_fail@plt+0x1648>
   12a64:	str	ip, [sp, #4]
   12a68:	bl	11210 <fwrite@plt>
   12a6c:	add	r3, sp, #28
   12a70:	mov	r2, r3
   12a74:	mov	r1, r6
   12a78:	ldr	r0, [r5]
   12a7c:	str	r3, [sp]
   12a80:	bl	1b858 <__assert_fail@plt+0xa3f0>
   12a84:	ldr	r2, [sp, #4]
   12a88:	ldr	r3, [r4]
   12a8c:	cmp	r2, r3
   12a90:	bne	12aa4 <__assert_fail@plt+0x163c>
   12a94:	add	sp, sp, #8
   12a98:	pop	{r4, r5, r6, lr}
   12a9c:	add	sp, sp, #16
   12aa0:	bx	lr
   12aa4:	bl	111bc <__stack_chk_fail@plt>
   12aa8:	andeq	r2, r3, r8, lsl #30
   12aac:	andeq	r3, r3, r0, lsr #3
   12ab0:	andeq	r0, r2, ip, asr #25
   12ab4:	push	{r4, r5, lr}
   12ab8:	mov	r5, r1
   12abc:	ldr	r4, [pc, #176]	; 12b74 <__assert_fail@plt+0x170c>
   12ac0:	sub	sp, sp, #60	; 0x3c
   12ac4:	cmn	r3, #1
   12ac8:	ldr	r1, [r4]
   12acc:	str	r3, [sp, #4]
   12ad0:	str	r1, [sp, #52]	; 0x34
   12ad4:	beq	12b54 <__assert_fail@plt+0x16ec>
   12ad8:	ldr	r1, [r2]
   12adc:	ldr	r3, [r5]
   12ae0:	ldr	ip, [r2, #4]
   12ae4:	ldr	lr, [r2, #8]
   12ae8:	eor	r3, r3, r1
   12aec:	ldr	r0, [r5, #4]
   12af0:	ldr	r1, [r5, #8]
   12af4:	eor	r0, r0, ip
   12af8:	eor	r1, r1, lr
   12afc:	ldr	ip, [r5, #12]
   12b00:	ldr	lr, [r2, #12]
   12b04:	orr	r3, r3, r0
   12b08:	eor	ip, ip, lr
   12b0c:	ldr	r0, [r5, #16]
   12b10:	ldr	lr, [r2, #16]
   12b14:	orr	r3, r3, r1
   12b18:	ldr	r2, [r2, #20]
   12b1c:	ldr	r1, [r5, #20]
   12b20:	eor	r0, r0, lr
   12b24:	orr	r3, r3, ip
   12b28:	orr	r3, r3, r0
   12b2c:	eor	r1, r1, r2
   12b30:	orrs	r3, r3, r1
   12b34:	moveq	r0, #1
   12b38:	movne	r0, #0
   12b3c:	ldr	r2, [sp, #52]	; 0x34
   12b40:	ldr	r3, [r4]
   12b44:	cmp	r2, r3
   12b48:	bne	12b70 <__assert_fail@plt+0x1708>
   12b4c:	add	sp, sp, #60	; 0x3c
   12b50:	pop	{r4, r5, pc}
   12b54:	add	r2, sp, #8
   12b58:	add	r1, sp, #4
   12b5c:	bl	1b670 <__assert_fail@plt+0xa208>
   12b60:	subs	r2, r0, #0
   12b64:	moveq	r0, r2
   12b68:	bne	12ad8 <__assert_fail@plt+0x1670>
   12b6c:	b	12b3c <__assert_fail@plt+0x16d4>
   12b70:	bl	111bc <__stack_chk_fail@plt>
   12b74:	andeq	r2, r3, r8, lsl #30
   12b78:	push	{r4, lr}
   12b7c:	sub	sp, sp, #16
   12b80:	ldr	r4, [pc, #44]	; 12bb4 <__assert_fail@plt+0x174c>
   12b84:	ldr	r1, [sp, #24]
   12b88:	ldr	lr, [pc, #40]	; 12bb8 <__assert_fail@plt+0x1750>
   12b8c:	eor	ip, r0, #1
   12b90:	strd	r2, [sp]
   12b94:	str	r1, [sp, #8]
   12b98:	ldr	r0, [r4]
   12b9c:	add	r2, lr, ip
   12ba0:	mov	r1, #1
   12ba4:	bl	11384 <__fprintf_chk@plt>
   12ba8:	mov	r0, #1
   12bac:	add	sp, sp, #16
   12bb0:	pop	{r4, pc}
   12bb4:	andeq	r3, r3, r0, lsr #3
   12bb8:	ldrdeq	r0, [r2], -r4
   12bbc:	push	{r4, r5, r6, r7, r8, lr}
   12bc0:	mov	r7, r0
   12bc4:	ldr	r5, [pc, #172]	; 12c78 <__assert_fail@plt+0x1810>
   12bc8:	ldr	r3, [pc, #172]	; 12c7c <__assert_fail@plt+0x1814>
   12bcc:	mov	r6, r1
   12bd0:	b	12be0 <__assert_fail@plt+0x1778>
   12bd4:	ldr	r3, [r5, #12]!
   12bd8:	cmp	r3, #0
   12bdc:	beq	12c00 <__assert_fail@plt+0x1798>
   12be0:	mov	r1, r3
   12be4:	mov	r0, r6
   12be8:	bl	1112c <strcmp@plt>
   12bec:	mov	r4, r5
   12bf0:	cmp	r0, #0
   12bf4:	bne	12bd4 <__assert_fail@plt+0x176c>
   12bf8:	mov	r0, r4
   12bfc:	pop	{r4, r5, r6, r7, r8, pc}
   12c00:	ldr	r1, [r7, #192]	; 0xc0
   12c04:	cmp	r1, #0
   12c08:	beq	12c38 <__assert_fail@plt+0x17d0>
   12c0c:	add	r7, r7, #192	; 0xc0
   12c10:	b	12c20 <__assert_fail@plt+0x17b8>
   12c14:	ldr	r1, [r7, #12]!
   12c18:	cmp	r1, #0
   12c1c:	beq	12c38 <__assert_fail@plt+0x17d0>
   12c20:	mov	r0, r6
   12c24:	bl	1112c <strcmp@plt>
   12c28:	mov	r4, r7
   12c2c:	cmp	r0, #0
   12c30:	bne	12c14 <__assert_fail@plt+0x17ac>
   12c34:	b	12bf8 <__assert_fail@plt+0x1790>
   12c38:	ldr	r3, [pc, #64]	; 12c80 <__assert_fail@plt+0x1818>
   12c3c:	ldr	r1, [pc, #64]	; 12c84 <__assert_fail@plt+0x181c>
   12c40:	b	12c50 <__assert_fail@plt+0x17e8>
   12c44:	ldr	r1, [r4, #12]
   12c48:	cmp	r1, #0
   12c4c:	beq	12c6c <__assert_fail@plt+0x1804>
   12c50:	mov	r0, r6
   12c54:	mov	r4, r3
   12c58:	bl	1112c <strcmp@plt>
   12c5c:	add	r3, r4, #12
   12c60:	cmp	r0, #0
   12c64:	bne	12c44 <__assert_fail@plt+0x17dc>
   12c68:	b	12bf8 <__assert_fail@plt+0x1790>
   12c6c:	mov	r4, r1
   12c70:	mov	r0, r4
   12c74:	pop	{r4, r5, r6, r7, r8, pc}
   12c78:	muleq	r2, r8, r1
   12c7c:	andeq	r0, r2, r0, ror #25
   12c80:	andeq	r0, r2, r8, asr #3
   12c84:	andeq	r0, r2, r4, ror #25
   12c88:	push	{r4, r5, lr}
   12c8c:	mov	r2, #5
   12c90:	sub	sp, sp, #12
   12c94:	mov	r5, r0
   12c98:	mov	r4, r1
   12c9c:	mov	r0, #0
   12ca0:	ldr	r1, [pc, #336]	; 12df8 <__assert_fail@plt+0x1990>
   12ca4:	bl	111b0 <dcgettext@plt>
   12ca8:	mov	r1, r5
   12cac:	bl	12a38 <__assert_fail@plt+0x15d0>
   12cb0:	ldrd	r2, [r4, #96]	; 0x60
   12cb4:	orrs	r1, r2, r3
   12cb8:	bne	12dc8 <__assert_fail@plt+0x1960>
   12cbc:	ldrd	r2, [r4, #104]	; 0x68
   12cc0:	orrs	r1, r2, r3
   12cc4:	beq	12d6c <__assert_fail@plt+0x1904>
   12cc8:	mov	r0, #0
   12ccc:	ldr	r1, [pc, #296]	; 12dfc <__assert_fail@plt+0x1994>
   12cd0:	str	r1, [sp]
   12cd4:	bl	12b78 <__assert_fail@plt+0x1710>
   12cd8:	ldrd	r2, [r4, #112]	; 0x70
   12cdc:	orrs	r1, r2, r3
   12ce0:	beq	12cf0 <__assert_fail@plt+0x1888>
   12ce4:	ldr	r1, [pc, #276]	; 12e00 <__assert_fail@plt+0x1998>
   12ce8:	str	r1, [sp]
   12cec:	bl	12b78 <__assert_fail@plt+0x1710>
   12cf0:	ldrd	r2, [r4, #120]	; 0x78
   12cf4:	orrs	r1, r2, r3
   12cf8:	beq	12d08 <__assert_fail@plt+0x18a0>
   12cfc:	ldr	r1, [pc, #256]	; 12e04 <__assert_fail@plt+0x199c>
   12d00:	str	r1, [sp]
   12d04:	bl	12b78 <__assert_fail@plt+0x1710>
   12d08:	ldrd	r2, [r4, #128]	; 0x80
   12d0c:	orrs	r1, r2, r3
   12d10:	beq	12d20 <__assert_fail@plt+0x18b8>
   12d14:	ldr	r1, [pc, #236]	; 12e08 <__assert_fail@plt+0x19a0>
   12d18:	str	r1, [sp]
   12d1c:	bl	12b78 <__assert_fail@plt+0x1710>
   12d20:	ldrd	r2, [r4, #136]	; 0x88
   12d24:	orrs	r1, r2, r3
   12d28:	beq	12d38 <__assert_fail@plt+0x18d0>
   12d2c:	ldr	r1, [pc, #216]	; 12e0c <__assert_fail@plt+0x19a4>
   12d30:	str	r1, [sp]
   12d34:	bl	12b78 <__assert_fail@plt+0x1710>
   12d38:	ldr	r2, [r4, #144]	; 0x90
   12d3c:	asr	r3, r2, #31
   12d40:	orrs	r1, r2, r3
   12d44:	beq	12d54 <__assert_fail@plt+0x18ec>
   12d48:	ldr	r1, [pc, #192]	; 12e10 <__assert_fail@plt+0x19a8>
   12d4c:	str	r1, [sp]
   12d50:	bl	12b78 <__assert_fail@plt+0x1710>
   12d54:	ldr	r3, [pc, #184]	; 12e14 <__assert_fail@plt+0x19ac>
   12d58:	mov	r0, #10
   12d5c:	ldr	r1, [r3]
   12d60:	add	sp, sp, #12
   12d64:	pop	{r4, r5, lr}
   12d68:	b	113d8 <fputc@plt>
   12d6c:	ldrd	r2, [r4, #112]	; 0x70
   12d70:	orrs	r1, r2, r3
   12d74:	bne	12de8 <__assert_fail@plt+0x1980>
   12d78:	ldrd	r2, [r4, #120]	; 0x78
   12d7c:	orrs	r1, r2, r3
   12d80:	bne	12df0 <__assert_fail@plt+0x1988>
   12d84:	ldrd	r0, [r4, #128]	; 0x80
   12d88:	orrs	r1, r0, r1
   12d8c:	bne	12df0 <__assert_fail@plt+0x1988>
   12d90:	ldrd	r0, [r4, #136]	; 0x88
   12d94:	orrs	r1, r0, r1
   12d98:	bne	12df0 <__assert_fail@plt+0x1988>
   12d9c:	ldr	r0, [r4, #144]	; 0x90
   12da0:	cmp	r0, #0
   12da4:	bne	12df0 <__assert_fail@plt+0x1988>
   12da8:	mov	r2, #5
   12dac:	ldr	r1, [pc, #100]	; 12e18 <__assert_fail@plt+0x19b0>
   12db0:	bl	111b0 <dcgettext@plt>
   12db4:	ldr	r3, [pc, #88]	; 12e14 <__assert_fail@plt+0x19ac>
   12db8:	ldr	r1, [r3]
   12dbc:	add	sp, sp, #12
   12dc0:	pop	{r4, r5, lr}
   12dc4:	b	11420 <fputs@plt>
   12dc8:	ldr	r1, [pc, #76]	; 12e1c <__assert_fail@plt+0x19b4>
   12dcc:	mov	r0, #0
   12dd0:	str	r1, [sp]
   12dd4:	bl	12b78 <__assert_fail@plt+0x1710>
   12dd8:	ldrd	r2, [r4, #104]	; 0x68
   12ddc:	orrs	r1, r2, r3
   12de0:	beq	12cd8 <__assert_fail@plt+0x1870>
   12de4:	b	12ccc <__assert_fail@plt+0x1864>
   12de8:	mov	r0, #0
   12dec:	b	12ce4 <__assert_fail@plt+0x187c>
   12df0:	mov	r0, #0
   12df4:	b	12cf4 <__assert_fail@plt+0x188c>
   12df8:	andeq	r0, r2, r8, ror #25
   12dfc:	andeq	r0, r2, r4, lsl sp
   12e00:	andeq	r0, r2, r0, lsr #26
   12e04:	andeq	r0, r2, r8, lsr #26
   12e08:	andeq	r0, r2, r0, lsr sp
   12e0c:	andeq	r0, r2, ip, lsr sp
   12e10:	andeq	r0, r2, r8, lsr sp
   12e14:	andeq	r3, r3, r0, lsr #3
   12e18:	strdeq	r0, [r2], -ip
   12e1c:	andeq	r0, r2, ip, lsl #26
   12e20:	push	{r4, r5, r6, r7, lr}
   12e24:	sub	sp, sp, #44	; 0x2c
   12e28:	ldr	r5, [pc, #172]	; 12edc <__assert_fail@plt+0x1a74>
   12e2c:	mov	r4, r2
   12e30:	mov	r2, #0
   12e34:	ldr	ip, [r5]
   12e38:	mov	r3, r0
   12e3c:	mov	r6, r1
   12e40:	str	r2, [sp, #4]
   12e44:	str	r2, [sp]
   12e48:	mov	r0, r4
   12e4c:	ldr	r2, [pc, #140]	; 12ee0 <__assert_fail@plt+0x1a78>
   12e50:	mov	r1, #100	; 0x64
   12e54:	str	ip, [sp, #36]	; 0x24
   12e58:	bl	1d1d8 <__assert_fail@plt+0xbd70>
   12e5c:	cmp	r0, #99	; 0x63
   12e60:	movgt	r3, #0
   12e64:	movle	r3, #1
   12e68:	cmp	r6, #0
   12e6c:	moveq	r3, #0
   12e70:	cmp	r3, #0
   12e74:	beq	12e84 <__assert_fail@plt+0x1a1c>
   12e78:	ldr	r3, [r6, #176]	; 0xb0
   12e7c:	cmp	r3, #0
   12e80:	bne	12ea0 <__assert_fail@plt+0x1a38>
   12e84:	ldr	r2, [sp, #36]	; 0x24
   12e88:	ldr	r3, [r5]
   12e8c:	mov	r0, r4
   12e90:	cmp	r2, r3
   12e94:	bne	12ed8 <__assert_fail@plt+0x1a70>
   12e98:	add	sp, sp, #44	; 0x2c
   12e9c:	pop	{r4, r5, r6, r7, pc}
   12ea0:	mov	r7, r0
   12ea4:	add	r1, sp, #8
   12ea8:	ldr	r0, [r6, #24]
   12eac:	bl	128a0 <__assert_fail@plt+0x1438>
   12eb0:	ldr	r3, [pc, #44]	; 12ee4 <__assert_fail@plt+0x1a7c>
   12eb4:	add	ip, r4, r7
   12eb8:	str	r3, [sp]
   12ebc:	rsb	r1, r7, #100	; 0x64
   12ec0:	mvn	r3, #0
   12ec4:	mov	r2, #1
   12ec8:	str	r0, [sp, #4]
   12ecc:	mov	r0, ip
   12ed0:	bl	1145c <__snprintf_chk@plt>
   12ed4:	b	12e84 <__assert_fail@plt+0x1a1c>
   12ed8:	bl	111bc <__stack_chk_fail@plt>
   12edc:	andeq	r2, r3, r8, lsl #30
   12ee0:	andeq	r0, r2, r4, asr #26
   12ee4:	andeq	r0, r2, r0, ror #26
   12ee8:	push	{r4, r5, r6, r7, lr}
   12eec:	mov	r5, r1
   12ef0:	ldrb	r1, [r0, #188]	; 0xbc
   12ef4:	sub	sp, sp, #20
   12ef8:	mov	r4, r0
   12efc:	cmp	r1, #0
   12f00:	beq	12fa4 <__assert_fail@plt+0x1b3c>
   12f04:	ldr	r1, [r0, #8]
   12f08:	ldr	r0, [r0, #12]
   12f0c:	adds	r6, r1, #1
   12f10:	adc	r7, r0, #0
   12f14:	cmp	r7, #0
   12f18:	cmpeq	r6, #13
   12f1c:	bhi	12f68 <__assert_fail@plt+0x1b00>
   12f20:	add	r1, r6, r6, lsl #2
   12f24:	ldr	r3, [pc, #196]	; 12ff0 <__assert_fail@plt+0x1b88>
   12f28:	add	r2, r6, r1, lsl #1
   12f2c:	add	r3, r3, r2
   12f30:	mov	r1, #100	; 0x64
   12f34:	ldr	r2, [pc, #184]	; 12ff4 <__assert_fail@plt+0x1b8c>
   12f38:	mov	r0, r5
   12f3c:	bl	11348 <snprintf@plt>
   12f40:	ldr	r3, [r4, #16]
   12f44:	cmp	r3, #6
   12f48:	bhi	12f98 <__assert_fail@plt+0x1b30>
   12f4c:	cmp	r0, #99	; 0x63
   12f50:	bhi	12f98 <__assert_fail@plt+0x1b30>
   12f54:	clz	r2, r0
   12f58:	add	lr, r5, r0
   12f5c:	lsr	r2, r2, #5
   12f60:	rsb	r1, r0, #100	; 0x64
   12f64:	b	12fc0 <__assert_fail@plt+0x1b58>
   12f68:	ldr	r3, [pc, #136]	; 12ff8 <__assert_fail@plt+0x1b90>
   12f6c:	str	r1, [sp, #8]
   12f70:	str	r0, [sp, #12]
   12f74:	str	r3, [sp]
   12f78:	mov	r2, #1
   12f7c:	mvn	r3, #0
   12f80:	mov	r1, #100	; 0x64
   12f84:	mov	r0, r5
   12f88:	bl	1145c <__snprintf_chk@plt>
   12f8c:	ldr	r3, [r4, #16]
   12f90:	cmp	r3, #6
   12f94:	bls	12f54 <__assert_fail@plt+0x1aec>
   12f98:	mov	r0, r5
   12f9c:	add	sp, sp, #20
   12fa0:	pop	{r4, r5, r6, r7, pc}
   12fa4:	strb	r1, [r5]
   12fa8:	ldr	r3, [r0, #16]
   12fac:	cmp	r3, #6
   12fb0:	bhi	12f98 <__assert_fail@plt+0x1b30>
   12fb4:	mov	lr, r5
   12fb8:	mov	r1, #100	; 0x64
   12fbc:	mov	r2, #1
   12fc0:	ldr	ip, [pc, #52]	; 12ffc <__assert_fail@plt+0x1b94>
   12fc4:	ldr	r0, [pc, #52]	; 13000 <__assert_fail@plt+0x1b98>
   12fc8:	add	r3, ip, r3, lsl #2
   12fcc:	add	r2, r2, r0
   12fd0:	mov	r0, lr
   12fd4:	strd	r2, [sp]
   12fd8:	mvn	r3, #0
   12fdc:	mov	r2, #1
   12fe0:	bl	1145c <__snprintf_chk@plt>
   12fe4:	mov	r0, r5
   12fe8:	add	sp, sp, #20
   12fec:	pop	{r4, r5, r6, r7, pc}
   12ff0:	andeq	r0, r2, r8, lsl #8
   12ff4:	muleq	r2, r4, r1
   12ff8:	andeq	r0, r2, r8, ror #26
   12ffc:	andeq	r0, r2, r4, lsr #9
   13000:	andeq	r0, r2, r8, ror r1
   13004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13008:	sub	sp, sp, #132	; 0x84
   1300c:	ldr	r6, [pc, #964]	; 133d8 <__assert_fail@plt+0x1f70>
   13010:	mov	r5, r0
   13014:	mov	r4, r1
   13018:	ldr	r3, [r6]
   1301c:	mov	r2, #5
   13020:	ldr	r1, [pc, #948]	; 133dc <__assert_fail@plt+0x1f74>
   13024:	mov	r0, #0
   13028:	str	r3, [sp, #124]	; 0x7c
   1302c:	bl	111b0 <dcgettext@plt>
   13030:	mov	r1, r5
   13034:	bl	12a38 <__assert_fail@plt+0x15d0>
   13038:	ldr	r3, [r4, #156]	; 0x9c
   1303c:	cmp	r3, #0
   13040:	bne	13228 <__assert_fail@plt+0x1dc0>
   13044:	ldrb	r1, [r4, #180]	; 0xb4
   13048:	ldrb	r2, [r4, #187]	; 0xbb
   1304c:	ldr	r5, [pc, #908]	; 133e0 <__assert_fail@plt+0x1f78>
   13050:	cmp	r1, r2
   13054:	ldr	r7, [r5]
   13058:	beq	13094 <__assert_fail@plt+0x1c2c>
   1305c:	mov	r2, #5
   13060:	ldr	r1, [pc, #892]	; 133e4 <__assert_fail@plt+0x1f7c>
   13064:	mov	r0, #0
   13068:	bl	111b0 <dcgettext@plt>
   1306c:	ldrd	r2, [r4, #40]	; 0x28
   13070:	mov	r1, #1
   13074:	strd	r2, [sp]
   13078:	mov	r2, r0
   1307c:	mov	r0, r7
   13080:	bl	11384 <__fprintf_chk@plt>
   13084:	ldrb	r2, [r4, #180]	; 0xb4
   13088:	ldr	r7, [r5]
   1308c:	mov	r3, #1
   13090:	strb	r2, [r4, #187]	; 0xbb
   13094:	ldr	r2, [r4, #172]	; 0xac
   13098:	cmp	r2, #0
   1309c:	beq	130ac <__assert_fail@plt+0x1c44>
   130a0:	ldrb	r2, [r4, #185]	; 0xb9
   130a4:	cmp	r2, #0
   130a8:	beq	13254 <__assert_fail@plt+0x1dec>
   130ac:	ldr	r2, [r4, #160]	; 0xa0
   130b0:	cmp	r2, #0
   130b4:	beq	1311c <__assert_fail@plt+0x1cb4>
   130b8:	ldrb	r2, [r4, #183]	; 0xb7
   130bc:	cmp	r2, #0
   130c0:	bne	1311c <__assert_fail@plt+0x1cb4>
   130c4:	cmp	r3, #0
   130c8:	bne	132c4 <__assert_fail@plt+0x1e5c>
   130cc:	mov	r2, #5
   130d0:	ldr	r1, [pc, #784]	; 133e8 <__assert_fail@plt+0x1f80>
   130d4:	mov	r0, #0
   130d8:	bl	111b0 <dcgettext@plt>
   130dc:	add	r1, sp, #24
   130e0:	mov	sl, r0
   130e4:	mov	r0, r4
   130e8:	bl	12ee8 <__assert_fail@plt+0x1a80>
   130ec:	ldrd	r8, [r4, #8]
   130f0:	ldr	r3, [r4, #16]
   130f4:	mov	r2, sl
   130f8:	str	r3, [sp, #8]
   130fc:	strd	r8, [sp]
   13100:	mov	r1, #1
   13104:	mov	r3, r0
   13108:	mov	r0, r7
   1310c:	bl	11384 <__fprintf_chk@plt>
   13110:	ldr	r7, [r5]
   13114:	mov	r3, #1
   13118:	strb	r3, [r4, #183]	; 0xb7
   1311c:	ldr	r2, [r4, #164]	; 0xa4
   13120:	cmp	r2, #0
   13124:	beq	131a8 <__assert_fail@plt+0x1d40>
   13128:	ldrb	r2, [r4, #184]	; 0xb8
   1312c:	cmp	r2, #0
   13130:	bne	131a8 <__assert_fail@plt+0x1d40>
   13134:	ldr	ip, [r4, #168]	; 0xa8
   13138:	ldr	r0, [pc, #684]	; 133ec <__assert_fail@plt+0x1f84>
   1313c:	ldr	r1, [pc, #684]	; 133f0 <__assert_fail@plt+0x1f88>
   13140:	cmp	ip, #0
   13144:	ldr	r2, [pc, #680]	; 133f4 <__assert_fail@plt+0x1f8c>
   13148:	moveq	r1, r0
   1314c:	eor	r3, r3, #1
   13150:	add	r2, r2, r3
   13154:	str	r1, [sp]
   13158:	mov	r0, r7
   1315c:	ldr	r3, [r4, #20]
   13160:	mov	r1, #1
   13164:	bl	11384 <__fprintf_chk@plt>
   13168:	ldr	r2, [r4, #176]	; 0xb0
   1316c:	mov	r3, #1
   13170:	cmp	r2, #0
   13174:	strb	r3, [r4, #184]	; 0xb8
   13178:	bne	132d8 <__assert_fail@plt+0x1e70>
   1317c:	ldrb	r3, [r4, #152]	; 0x98
   13180:	ldr	r7, [r5]
   13184:	cmp	r3, #0
   13188:	beq	13204 <__assert_fail@plt+0x1d9c>
   1318c:	ldr	r8, [r4, #88]	; 0x58
   13190:	asr	r9, r8, #31
   13194:	mov	r1, r7
   13198:	mov	r0, #32
   1319c:	bl	113d8 <fputc@plt>
   131a0:	ldr	r7, [r5]
   131a4:	b	131dc <__assert_fail@plt+0x1d74>
   131a8:	ldr	r2, [r4, #176]	; 0xb0
   131ac:	cmp	r2, #0
   131b0:	beq	131c0 <__assert_fail@plt+0x1d58>
   131b4:	ldrb	r2, [r4, #186]	; 0xba
   131b8:	cmp	r2, #0
   131bc:	beq	132f8 <__assert_fail@plt+0x1e90>
   131c0:	ldrb	r2, [r4, #152]	; 0x98
   131c4:	cmp	r2, #0
   131c8:	beq	13204 <__assert_fail@plt+0x1d9c>
   131cc:	ldr	r8, [r4, #88]	; 0x58
   131d0:	cmp	r3, #0
   131d4:	asr	r9, r8, #31
   131d8:	bne	13194 <__assert_fail@plt+0x1d2c>
   131dc:	mov	r2, #5
   131e0:	ldr	r1, [pc, #528]	; 133f8 <__assert_fail@plt+0x1f90>
   131e4:	mov	r0, #0
   131e8:	bl	111b0 <dcgettext@plt>
   131ec:	strd	r8, [sp]
   131f0:	mov	r1, #1
   131f4:	mov	r2, r0
   131f8:	mov	r0, r7
   131fc:	bl	11384 <__fprintf_chk@plt>
   13200:	ldr	r7, [r5]
   13204:	mov	r1, r7
   13208:	mov	r0, #10
   1320c:	bl	113d8 <fputc@plt>
   13210:	ldr	r2, [sp, #124]	; 0x7c
   13214:	ldr	r3, [r6]
   13218:	cmp	r2, r3
   1321c:	bne	133d4 <__assert_fail@plt+0x1f6c>
   13220:	add	sp, sp, #132	; 0x84
   13224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13228:	ldrb	r3, [r4, #182]	; 0xb6
   1322c:	ldr	r5, [pc, #428]	; 133e0 <__assert_fail@plt+0x1f78>
   13230:	cmp	r3, #0
   13234:	ldr	r7, [r5]
   13238:	beq	13348 <__assert_fail@plt+0x1ee0>
   1323c:	ldrb	r3, [r4, #187]	; 0xbb
   13240:	ldrb	r2, [r4, #180]	; 0xb4
   13244:	cmp	r2, r3
   13248:	moveq	r3, #0
   1324c:	bne	1305c <__assert_fail@plt+0x1bf4>
   13250:	b	13094 <__assert_fail@plt+0x1c2c>
   13254:	ldrd	r8, [r4, #80]	; 0x50
   13258:	ldr	sl, [r4, #88]	; 0x58
   1325c:	ldr	r2, [pc, #408]	; 133fc <__assert_fail@plt+0x1f94>
   13260:	strd	r8, [sp, #8]
   13264:	ldrd	r8, [r4, #72]	; 0x48
   13268:	asr	fp, sl, #31
   1326c:	eor	r3, r3, #1
   13270:	add	r2, r2, r3
   13274:	mov	r0, r7
   13278:	strd	sl, [sp, #16]
   1327c:	mov	r1, #1
   13280:	strd	r8, [sp]
   13284:	bl	11384 <__fprintf_chk@plt>
   13288:	ldr	r3, [r4, #92]	; 0x5c
   1328c:	cmp	r3, #0
   13290:	bne	133a0 <__assert_fail@plt+0x1f38>
   13294:	ldr	r1, [r4, #28]
   13298:	ldr	r7, [r5]
   1329c:	cmp	r1, #1
   132a0:	beq	133bc <__assert_fail@plt+0x1f54>
   132a4:	ldr	r2, [r4, #160]	; 0xa0
   132a8:	mov	r3, #1
   132ac:	cmp	r2, #0
   132b0:	strb	r3, [r4, #185]	; 0xb9
   132b4:	beq	1311c <__assert_fail@plt+0x1cb4>
   132b8:	ldrb	r3, [r4, #183]	; 0xb7
   132bc:	cmp	r3, #0
   132c0:	bne	1311c <__assert_fail@plt+0x1cb4>
   132c4:	mov	r1, r7
   132c8:	mov	r0, #32
   132cc:	bl	113d8 <fputc@plt>
   132d0:	ldr	r7, [r5]
   132d4:	b	130cc <__assert_fail@plt+0x1c64>
   132d8:	ldrb	r3, [r4, #186]	; 0xba
   132dc:	ldr	r7, [r5]
   132e0:	cmp	r3, #0
   132e4:	beq	133b4 <__assert_fail@plt+0x1f4c>
   132e8:	ldrb	r3, [r4, #152]	; 0x98
   132ec:	cmp	r3, #0
   132f0:	beq	13204 <__assert_fail@plt+0x1d9c>
   132f4:	b	1318c <__assert_fail@plt+0x1d24>
   132f8:	ldr	r8, [pc, #256]	; 13400 <__assert_fail@plt+0x1f98>
   132fc:	eor	r3, r3, #1
   13300:	add	r8, r3, r8
   13304:	add	r1, sp, #24
   13308:	ldr	r0, [r4, #24]
   1330c:	bl	128a0 <__assert_fail@plt+0x1438>
   13310:	mov	r2, r8
   13314:	mov	r1, #1
   13318:	mov	r3, r0
   1331c:	mov	r0, r7
   13320:	bl	11384 <__fprintf_chk@plt>
   13324:	ldrb	r3, [r4, #152]	; 0x98
   13328:	mov	r2, #1
   1332c:	strb	r2, [r4, #186]	; 0xba
   13330:	cmp	r3, #0
   13334:	beq	13200 <__assert_fail@plt+0x1d98>
   13338:	ldr	r8, [r4, #88]	; 0x58
   1333c:	ldr	r7, [r5]
   13340:	asr	r9, r8, #31
   13344:	b	13194 <__assert_fail@plt+0x1d2c>
   13348:	ldrd	r2, [r4, #64]	; 0x40
   1334c:	ldrd	r8, [r4, #56]	; 0x38
   13350:	mov	r0, r7
   13354:	strd	r2, [sp, #16]
   13358:	ldrd	sl, [r4, #40]	; 0x28
   1335c:	ldr	r2, [pc, #160]	; 13404 <__assert_fail@plt+0x1f9c>
   13360:	mov	r1, #1
   13364:	strd	r8, [sp, #8]
   13368:	strd	sl, [sp]
   1336c:	bl	11384 <__fprintf_chk@plt>
   13370:	ldrb	r1, [r4, #180]	; 0xb4
   13374:	ldrb	r2, [r4, #187]	; 0xbb
   13378:	mov	r3, #1
   1337c:	strb	r3, [r4, #182]	; 0xb6
   13380:	cmp	r1, r2
   13384:	ldreq	r7, [r5]
   13388:	beq	13094 <__assert_fail@plt+0x1c2c>
   1338c:	ldr	r1, [r5]
   13390:	mov	r0, #32
   13394:	bl	113d8 <fputc@plt>
   13398:	ldr	r7, [r5]
   1339c:	b	1305c <__assert_fail@plt+0x1bf4>
   133a0:	ldr	r2, [pc, #96]	; 13408 <__assert_fail@plt+0x1fa0>
   133a4:	mov	r1, #1
   133a8:	ldr	r0, [r5]
   133ac:	bl	11384 <__fprintf_chk@plt>
   133b0:	b	13294 <__assert_fail@plt+0x1e2c>
   133b4:	ldr	r8, [pc, #68]	; 13400 <__assert_fail@plt+0x1f98>
   133b8:	b	13304 <__assert_fail@plt+0x1e9c>
   133bc:	mov	r3, r7
   133c0:	mov	r2, #2
   133c4:	ldr	r0, [pc, #64]	; 1340c <__assert_fail@plt+0x1fa4>
   133c8:	bl	11210 <fwrite@plt>
   133cc:	ldr	r7, [r5]
   133d0:	b	132a4 <__assert_fail@plt+0x1e3c>
   133d4:	bl	111bc <__stack_chk_fail@plt>
   133d8:	andeq	r2, r3, r8, lsl #30
   133dc:	andeq	r0, r2, r8, ror #25
   133e0:	andeq	r3, r3, r0, lsr #3
   133e4:	andeq	r0, r2, r0, lsr #27
   133e8:	ldrdeq	r0, [r2], -r4
   133ec:			; <UNDEFINED> instruction: 0x000218bc
   133f0:	andeq	r0, r2, r0, ror sp
   133f4:	strdeq	r0, [r2], -r4
   133f8:	andeq	r0, r2, r0, lsl #28
   133fc:			; <UNDEFINED> instruction: 0x00020db0
   13400:	andeq	r0, r2, r8, ror sp
   13404:	andeq	r0, r2, r0, lsl #27
   13408:	andeq	r0, r2, r8, asr #27
   1340c:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   13410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13414:	sub	sp, sp, #1552	; 0x610
   13418:	ldr	r2, [pc, #4032]	; 143e0 <__assert_fail@plt+0x2f78>
   1341c:	sub	sp, sp, #4
   13420:	add	r6, sp, #368	; 0x170
   13424:	mov	r8, #38	; 0x26
   13428:	mov	r3, #0
   1342c:	mov	r5, r8
   13430:	ldr	r2, [r2]
   13434:	mov	r7, r3
   13438:	str	r3, [sp, #104]	; 0x68
   1343c:	strh	r3, [r6]
   13440:	cmn	r5, #93	; 0x5d
   13444:	mvn	r3, #1
   13448:	str	r0, [sp, #36]	; 0x24
   1344c:	str	r2, [sp, #1548]	; 0x60c
   13450:	mov	sl, r6
   13454:	add	r9, sp, #408	; 0x198
   13458:	str	r3, [sp, #16]
   1345c:	ldr	fp, [pc, #3968]	; 143e4 <__assert_fail@plt+0x2f7c>
   13460:	mov	r4, r5
   13464:	beq	13554 <__assert_fail@plt+0x20ec>
   13468:	ldr	r3, [sp, #16]
   1346c:	cmn	r3, #2
   13470:	beq	13814 <__assert_fail@plt+0x23ac>
   13474:	ldr	r2, [sp, #16]
   13478:	cmp	r2, #0
   1347c:	ble	137fc <__assert_fail@plt+0x2394>
   13480:	ldr	r3, [pc, #3936]	; 143e8 <__assert_fail@plt+0x2f80>
   13484:	cmp	r2, r3
   13488:	ble	13a8c <__assert_fail@plt+0x2624>
   1348c:	add	r4, r5, #2
   13490:	mov	r3, #2
   13494:	cmp	r4, #112	; 0x70
   13498:	bhi	13554 <__assert_fail@plt+0x20ec>
   1349c:	add	r4, fp, r4
   134a0:	add	r2, r4, #2256	; 0x8d0
   134a4:	ldrsb	r2, [r2, #4]
   134a8:	cmp	r2, r3
   134ac:	bne	13554 <__assert_fail@plt+0x20ec>
   134b0:	ldrb	r7, [r4, #2376]	; 0x948
   134b4:	cmp	r7, #0
   134b8:	beq	13c44 <__assert_fail@plt+0x27dc>
   134bc:	ldr	r3, [sp, #104]	; 0x68
   134c0:	add	lr, sp, #256	; 0x100
   134c4:	cmp	r3, #0
   134c8:	subne	r3, r3, #1
   134cc:	strne	r3, [sp, #104]	; 0x68
   134d0:	ldr	r3, [sp, #108]	; 0x6c
   134d4:	add	r9, r9, #56	; 0x38
   134d8:	str	r3, [sp, #272]	; 0x110
   134dc:	ldr	r3, [sp, #112]	; 0x70
   134e0:	mov	ip, r9
   134e4:	str	r3, [sp, #264]	; 0x108
   134e8:	ldr	r3, [sp, #116]	; 0x74
   134ec:	mvn	r4, #1
   134f0:	str	r3, [sp, #268]	; 0x10c
   134f4:	ldm	lr!, {r0, r1, r2, r3}
   134f8:	str	sl, [sp, #24]
   134fc:	str	r4, [sp, #16]
   13500:	stmia	ip!, {r0, r1, r2, r3}
   13504:	ldm	lr!, {r0, r1, r2, r3}
   13508:	stmia	ip!, {r0, r1, r2, r3}
   1350c:	ldm	lr!, {r0, r1, r2, r3}
   13510:	stmia	ip!, {r0, r1, r2, r3}
   13514:	ldm	lr, {r0, r1}
   13518:	stm	ip, {r0, r1}
   1351c:	ldr	r2, [sp, #24]
   13520:	add	r3, r6, #38	; 0x26
   13524:	add	sl, r2, #2
   13528:	cmp	sl, r3
   1352c:	strh	r7, [r2, #2]
   13530:	bcs	15a34 <__assert_fail@plt+0x45cc>
   13534:	cmp	r7, #12
   13538:	beq	15a3c <__assert_fail@plt+0x45d4>
   1353c:	add	r3, fp, r7
   13540:	add	r3, r3, #808	; 0x328
   13544:	ldrsb	r5, [r3]
   13548:	cmn	r5, #93	; 0x5d
   1354c:	mov	r4, r5
   13550:	bne	13468 <__assert_fail@plt+0x2000>
   13554:	add	r3, fp, r7
   13558:	ldrb	r5, [r3, #2492]	; 0x9bc
   1355c:	cmp	r5, #0
   13560:	bne	135f4 <__assert_fail@plt+0x218c>
   13564:	ldr	r3, [sp, #104]	; 0x68
   13568:	cmp	r3, #3
   1356c:	bne	135c0 <__assert_fail@plt+0x2158>
   13570:	ldr	r3, [sp, #16]
   13574:	cmp	r3, #0
   13578:	bgt	13808 <__assert_fail@plt+0x23a0>
   1357c:	bne	135c0 <__assert_fail@plt+0x2158>
   13580:	mov	r0, #1
   13584:	ldr	r3, [pc, #3668]	; 143e0 <__assert_fail@plt+0x2f78>
   13588:	ldr	r2, [sp, #1548]	; 0x60c
   1358c:	ldr	r3, [r3]
   13590:	cmp	r2, r3
   13594:	bne	162c4 <__assert_fail@plt+0x4e5c>
   13598:	add	sp, sp, #1552	; 0x610
   1359c:	add	sp, sp, #4
   135a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a4:	ldrb	r7, [r3, #2376]	; 0x948
   135a8:	cmp	r7, #0
   135ac:	bne	13adc <__assert_fail@plt+0x2674>
   135b0:	cmp	sl, r6
   135b4:	beq	13580 <__assert_fail@plt+0x2118>
   135b8:	ldrsh	r7, [sl, #-2]!
   135bc:	sub	r9, r9, #56	; 0x38
   135c0:	add	r7, fp, r7
   135c4:	add	r7, r7, #808	; 0x328
   135c8:	ldrsb	r3, [r7]
   135cc:	cmn	r3, #93	; 0x5d
   135d0:	beq	135b0 <__assert_fail@plt+0x2148>
   135d4:	add	r3, r3, #1
   135d8:	cmp	r3, #112	; 0x70
   135dc:	bhi	135b0 <__assert_fail@plt+0x2148>
   135e0:	add	r3, fp, r3
   135e4:	ldrb	r2, [r3, #2260]	; 0x8d4
   135e8:	cmp	r2, #1
   135ec:	bne	135b0 <__assert_fail@plt+0x2148>
   135f0:	b	135a4 <__assert_fail@plt+0x213c>
   135f4:	add	r3, fp, r5
   135f8:	add	r8, sp, #320	; 0x140
   135fc:	ldrb	r3, [r3, #2608]	; 0xa30
   13600:	sub	r2, r8, #8
   13604:	str	r2, [sp, #92]	; 0x5c
   13608:	rsb	r4, r3, #1
   1360c:	str	r3, [sp, #24]
   13610:	rsb	r4, r4, r4, lsl #3
   13614:	mov	ip, r2
   13618:	add	r4, r9, r4, lsl #3
   1361c:	mov	lr, r4
   13620:	ldr	r3, [r4, #8]
   13624:	ldr	r7, [r4, #16]
   13628:	str	r3, [sp, #84]	; 0x54
   1362c:	ldm	lr!, {r0, r1, r2, r3}
   13630:	str	r7, [sp, #76]	; 0x4c
   13634:	sub	r7, r5, #4
   13638:	stmia	ip!, {r0, r1, r2, r3}
   1363c:	str	r3, [sp, #88]	; 0x58
   13640:	ldm	lr!, {r0, r1, r2, r3}
   13644:	stmia	ip!, {r0, r1, r2, r3}
   13648:	ldm	lr!, {r0, r1, r2, r3}
   1364c:	stmia	ip!, {r0, r1, r2, r3}
   13650:	ldm	lr, {r0, r1}
   13654:	ldr	r3, [r4, #20]
   13658:	str	r3, [sp, #80]	; 0x50
   1365c:	ldr	r3, [r4, #24]
   13660:	stm	ip, {r0, r1}
   13664:	str	r3, [sp, #68]	; 0x44
   13668:	ldr	r3, [r4, #28]
   1366c:	str	r3, [sp, #72]	; 0x48
   13670:	ldr	r3, [r4, #32]
   13674:	str	r3, [sp, #64]	; 0x40
   13678:	ldr	r3, [r4, #36]	; 0x24
   1367c:	str	r3, [sp, #56]	; 0x38
   13680:	ldrd	r2, [r4, #40]	; 0x28
   13684:	strd	r2, [sp, #48]	; 0x30
   13688:	ldr	r3, [r4, #48]	; 0x30
   1368c:	str	r3, [sp, #40]	; 0x28
   13690:	cmp	r7, #87	; 0x57
   13694:	ldrls	pc, [pc, r7, lsl #2]
   13698:	b	16390 <__assert_fail@plt+0x4f28>
   1369c:	andeq	r4, r1, r8, lsr #4
   136a0:	muleq	r1, r0, r3
   136a4:	muleq	r1, r0, r3
   136a8:	andeq	r5, r1, r0, ror #8
   136ac:	andeq	r5, r1, r8, lsr r4
   136b0:	muleq	r1, r8, sl
   136b4:	andeq	r4, r1, r0, ror sl
   136b8:	andeq	r4, r1, r8, asr #20
   136bc:	andeq	r4, r1, r0, lsr #20
   136c0:	andeq	r4, r1, r4, lsl sl
   136c4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   136c8:	muleq	r1, r4, r9
   136cc:	muleq	r1, r0, r3
   136d0:	muleq	r1, r0, r3
   136d4:	andeq	r4, r1, ip, asr #18
   136d8:	andeq	r4, r1, r0, lsr #23
   136dc:	andeq	r4, r1, r4, asr fp
   136e0:	muleq	r1, r0, r3
   136e4:			; <UNDEFINED> instruction: 0x000148bc
   136e8:	andeq	r4, r1, r8, ror r8
   136ec:	andeq	r4, r1, r4, lsr r8
   136f0:	muleq	r1, r0, r3
   136f4:	muleq	r1, r0, r3
   136f8:	andeq	r4, r1, r4, ror #14
   136fc:	andeq	r4, r1, r0, asr #14
   13700:	andeq	r4, r1, ip, lsl #14
   13704:	andeq	r4, r1, r8, ror #13
   13708:	andeq	r4, r1, r0, asr #13
   1370c:	andeq	r4, r1, r0, asr sp
   13710:	andeq	r4, r1, ip, ror #23
   13714:	andeq	r5, r1, r8, asr #6
   13718:	andeq	r5, r1, r4, lsl #5
   1371c:	andeq	r5, r1, r8, asr r2
   13720:	andeq	r5, r1, r4, lsr #4
   13724:	strdeq	r5, [r1], -r0
   13728:	andeq	r5, r1, ip, lsl #6
   1372c:	andeq	r5, r1, ip, ror #17
   13730:			; <UNDEFINED> instruction: 0x000158bc
   13734:	andeq	r5, r1, ip, asr #16
   13738:	andeq	r5, r1, ip, lsl r8
   1373c:	andeq	r5, r1, r8, lsr #15
   13740:	andeq	r5, r1, r8, ror r7
   13744:	andeq	r5, r1, r4, asr #14
   13748:	andeq	r5, r1, r4, lsl r7
   1374c:	andeq	r5, r1, ip, asr #13
   13750:	muleq	r1, r0, r3
   13754:	andeq	r5, r1, r0, asr r6
   13758:			; <UNDEFINED> instruction: 0x000154b4
   1375c:	andeq	r3, r1, ip, ror #27
   13760:	andeq	r3, r1, ip, ror #27
   13764:	andeq	r4, r1, r4, ror #23
   13768:	andeq	r4, r1, r0, lsr #22
   1376c:	andeq	r4, r1, r0, asr #21
   13770:	ldrdeq	r4, [r1], -ip
   13774:	andeq	r4, r1, ip, lsl #3
   13778:	andeq	r4, r1, r4, lsr #9
   1377c:	andeq	r4, r1, r4, lsr #8
   13780:	andeq	r4, r1, r4, lsr #32
   13784:	andeq	r3, r1, r4, asr #31
   13788:	andeq	r4, r1, r0, ror r6
   1378c:	andeq	r4, r1, r0, lsr #12
   13790:	andeq	r4, r1, r8, lsr #2
   13794:	andeq	r4, r1, r0, asr #1
   13798:	andeq	r4, r1, r0, ror r5
   1379c:	andeq	r4, r1, r8, lsl #10
   137a0:	andeq	r4, r1, r0, asr #11
   137a4:	andeq	r4, r1, r4, lsl #18
   137a8:	andeq	r3, r1, r4, lsr #30
   137ac:	andeq	r3, r1, r4, lsr #30
   137b0:	andeq	r5, r1, ip, lsr #5
   137b4:	muleq	r1, r0, r3
   137b8:	muleq	r1, r4, r1
   137bc:	andeq	r5, r1, r4, asr #2
   137c0:	andeq	r5, r1, r8, lsr #1
   137c4:	andeq	r5, r1, r8, asr r0
   137c8:	strdeq	r4, [r1], -r0
   137cc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   137d0:	andeq	r4, r1, r4, lsr pc
   137d4:	muleq	r1, r0, r3
   137d8:	muleq	r1, r0, r3
   137dc:	muleq	r1, r0, r3
   137e0:	ldrdeq	r4, [r1], -ip
   137e4:	muleq	r1, r0, r3
   137e8:	andeq	r4, r1, r4, lsl #29
   137ec:	andeq	r4, r1, r0, asr lr
   137f0:	andeq	r4, r1, r8, lsl #5
   137f4:	muleq	r1, r4, r4
   137f8:	strdeq	r5, [r1], -r8
   137fc:	mov	r3, #0
   13800:	str	r3, [sp, #16]
   13804:	b	13494 <__assert_fail@plt+0x202c>
   13808:	mvn	r3, #1
   1380c:	str	r3, [sp, #16]
   13810:	b	135c0 <__assert_fail@plt+0x2158>
   13814:	ldr	r0, [sp, #36]	; 0x24
   13818:	ldr	r2, [r0]
   1381c:	ldrb	r3, [r2]
   13820:	cmp	r3, #9
   13824:	bcc	1384c <__assert_fail@plt+0x23e4>
   13828:	cmp	r3, #13
   1382c:	bls	13838 <__assert_fail@plt+0x23d0>
   13830:	cmp	r3, #32
   13834:	bne	1384c <__assert_fail@plt+0x23e4>
   13838:	add	r2, r2, #1
   1383c:	str	r2, [r0]
   13840:	ldrb	r3, [r2]
   13844:	cmp	r3, #9
   13848:	bcs	13828 <__assert_fail@plt+0x23c0>
   1384c:	sub	ip, r3, #48	; 0x30
   13850:	sub	r1, r3, #43	; 0x2b
   13854:	cmp	ip, #9
   13858:	and	r1, r1, #253	; 0xfd
   1385c:	bls	138d4 <__assert_fail@plt+0x246c>
   13860:	cmp	r1, #0
   13864:	beq	13acc <__assert_fail@plt+0x2664>
   13868:	cmp	r3, #65	; 0x41
   1386c:	bcc	13884 <__assert_fail@plt+0x241c>
   13870:	cmp	r3, #90	; 0x5a
   13874:	bls	13b64 <__assert_fail@plt+0x26fc>
   13878:	sub	r1, r3, #97	; 0x61
   1387c:	cmp	r1, #25
   13880:	bls	13b64 <__assert_fail@plt+0x26fc>
   13884:	cmp	r3, #40	; 0x28
   13888:	bne	16074 <__assert_fail@plt+0x4c0c>
   1388c:	mov	ip, #0
   13890:	b	13898 <__assert_fail@plt+0x2430>
   13894:	mov	r2, r1
   13898:	add	r1, r2, #1
   1389c:	str	r1, [r0]
   138a0:	ldrb	r3, [r1, #-1]
   138a4:	cmp	r3, #0
   138a8:	beq	13800 <__assert_fail@plt+0x2398>
   138ac:	cmp	r3, #40	; 0x28
   138b0:	addeq	ip, ip, #1
   138b4:	beq	138c0 <__assert_fail@plt+0x2458>
   138b8:	cmp	r3, #41	; 0x29
   138bc:	subeq	ip, ip, #1
   138c0:	cmp	ip, #0
   138c4:	bne	13894 <__assert_fail@plt+0x242c>
   138c8:	ldrb	r3, [r2, #1]
   138cc:	mov	r2, r1
   138d0:	b	13820 <__assert_fail@plt+0x23b8>
   138d4:	cmp	r1, #0
   138d8:	sub	lr, r3, #45	; 0x2d
   138dc:	clz	lr, lr
   138e0:	lsr	lr, lr, #5
   138e4:	bne	15a9c <__assert_fail@plt+0x4634>
   138e8:	cmp	lr, #0
   138ec:	moveq	r8, #1
   138f0:	mvnne	r8, #0
   138f4:	add	r2, r2, #1
   138f8:	str	r2, [r0]
   138fc:	ldrb	r3, [r2]
   13900:	cmp	r3, #9
   13904:	bcc	13918 <__assert_fail@plt+0x24b0>
   13908:	cmp	r3, #13
   1390c:	bls	138f4 <__assert_fail@plt+0x248c>
   13910:	cmp	r3, #32
   13914:	beq	138f4 <__assert_fail@plt+0x248c>
   13918:	sub	ip, r3, #48	; 0x30
   1391c:	cmp	ip, #9
   13920:	bhi	13820 <__assert_fail@plt+0x23b8>
   13924:	mov	r0, #0
   13928:	mov	r1, #0
   1392c:	mov	r4, r2
   13930:	strd	r0, [sp, #16]
   13934:	str	sl, [sp, #48]	; 0x30
   13938:	str	r2, [sp, #40]	; 0x28
   1393c:	str	fp, [sp, #64]	; 0x40
   13940:	cmn	r8, #1
   13944:	rsbeq	ip, r3, #48	; 0x30
   13948:	ldrd	r2, [sp, #16]
   1394c:	asr	r1, ip, #31
   13950:	adds	sl, r2, ip
   13954:	adcs	fp, r3, r1
   13958:	movvs	lr, #1
   1395c:	movvc	lr, #0
   13960:	bvs	15a1c <__assert_fail@plt+0x45b4>
   13964:	ldrb	r3, [r4, #1]
   13968:	add	r1, r4, #1
   1396c:	str	r1, [sp, #24]
   13970:	sub	ip, r3, #48	; 0x30
   13974:	cmp	ip, #9
   13978:	bls	13aa0 <__assert_fail@plt+0x2638>
   1397c:	and	r3, r3, #253	; 0xfd
   13980:	cmp	r3, #44	; 0x2c
   13984:	ldr	r2, [sp, #40]	; 0x28
   13988:	strd	sl, [sp, #40]	; 0x28
   1398c:	ldr	sl, [sp, #48]	; 0x30
   13990:	ldr	fp, [sp, #64]	; 0x40
   13994:	bne	13b1c <__assert_fail@plt+0x26b4>
   13998:	ldrb	r3, [r4, #2]
   1399c:	sub	ip, r3, #48	; 0x30
   139a0:	cmp	ip, #9
   139a4:	bhi	13b1c <__assert_fail@plt+0x26b4>
   139a8:	ldrd	r2, [sp, #40]	; 0x28
   139ac:	adds	r1, r2, #-2147483648	; 0x80000000
   139b0:	adc	r3, r3, #0
   139b4:	str	r3, [sp, #124]	; 0x7c
   139b8:	str	r1, [sp, #120]	; 0x78
   139bc:	ldrd	r0, [sp, #120]	; 0x78
   139c0:	mov	r3, #0
   139c4:	mvn	r2, #0
   139c8:	cmp	r1, r3
   139cc:	cmpeq	r0, r2
   139d0:	bhi	159cc <__assert_fail@plt+0x4564>
   139d4:	ldrb	r0, [r4, #3]
   139d8:	mov	r3, ip
   139dc:	add	r4, r4, #3
   139e0:	sub	r2, r0, #48	; 0x30
   139e4:	mov	r1, #8
   139e8:	cmp	r2, #9
   139ec:	add	r3, r3, r3, lsl #2
   139f0:	ldrbls	r0, [r4, #1]
   139f4:	lsl	r3, r3, #1
   139f8:	mov	ip, r2
   139fc:	addls	r3, r3, r2
   13a00:	subls	r2, r0, #48	; 0x30
   13a04:	addls	r4, r4, #1
   13a08:	movls	ip, r2
   13a0c:	subs	r1, r1, #1
   13a10:	bne	139e8 <__assert_fail@plt+0x2580>
   13a14:	cmn	r8, #1
   13a18:	beq	13f8c <__assert_fail@plt+0x2b24>
   13a1c:	cmp	ip, #9
   13a20:	bhi	13a34 <__assert_fail@plt+0x25cc>
   13a24:	ldrb	r2, [r4, #1]!
   13a28:	sub	r2, r2, #48	; 0x30
   13a2c:	cmp	r2, #9
   13a30:	bls	13a24 <__assert_fail@plt+0x25bc>
   13a34:	adds	r2, r3, #0
   13a38:	movne	r2, #1
   13a3c:	ands	r2, r2, r8, lsr #31
   13a40:	bne	159e4 <__assert_fail@plt+0x457c>
   13a44:	str	r3, [sp, #260]	; 0x104
   13a48:	ldr	r3, [sp, #36]	; 0x24
   13a4c:	cmp	r8, #0
   13a50:	ldr	r2, [pc, #2448]	; 143e8 <__assert_fail@plt+0x2f80>
   13a54:	ldr	r1, [sp, #40]	; 0x28
   13a58:	movne	r2, #276	; 0x114
   13a5c:	str	r4, [r3]
   13a60:	str	r1, [sp, #256]	; 0x100
   13a64:	moveq	r3, #22
   13a68:	movne	r3, #21
   13a6c:	str	r2, [sp, #16]
   13a70:	b	13a98 <__assert_fail@plt+0x2630>
   13a74:	ldr	r3, [pc, #2416]	; 143ec <__assert_fail@plt+0x2f84>
   13a78:	mov	r2, #0
   13a7c:	str	r3, [sp, #16]
   13a80:	add	r1, sp, #256	; 0x100
   13a84:	mov	r3, #0
   13a88:	strd	r2, [r1]
   13a8c:	ldr	r3, [sp, #16]
   13a90:	add	r3, fp, r3
   13a94:	ldrb	r3, [r3, #1980]	; 0x7bc
   13a98:	add	r4, r5, r3
   13a9c:	b	13494 <__assert_fail@plt+0x202c>
   13aa0:	cmp	fp, sl, asr #31
   13aa4:	bne	13d8c <__assert_fail@plt+0x2924>
   13aa8:	mov	r2, #10
   13aac:	smull	sl, fp, sl, r2
   13ab0:	mov	r0, sl
   13ab4:	mov	r1, fp
   13ab8:	cmp	lr, #0
   13abc:	strd	r0, [sp, #16]
   13ac0:	bne	15a1c <__assert_fail@plt+0x45b4>
   13ac4:	ldr	r4, [sp, #24]
   13ac8:	b	13940 <__assert_fail@plt+0x24d8>
   13acc:	sub	lr, r3, #45	; 0x2d
   13ad0:	clz	lr, lr
   13ad4:	lsr	lr, lr, #5
   13ad8:	b	138e8 <__assert_fail@plt+0x2480>
   13adc:	ldr	r3, [sp, #108]	; 0x6c
   13ae0:	add	lr, sp, #256	; 0x100
   13ae4:	str	r3, [sp, #272]	; 0x110
   13ae8:	ldr	r3, [sp, #112]	; 0x70
   13aec:	add	r9, r9, #56	; 0x38
   13af0:	str	r3, [sp, #264]	; 0x108
   13af4:	ldr	r3, [sp, #116]	; 0x74
   13af8:	mov	ip, r9
   13afc:	str	r3, [sp, #268]	; 0x10c
   13b00:	ldm	lr!, {r0, r1, r2, r3}
   13b04:	mov	r4, #3
   13b08:	str	sl, [sp, #24]
   13b0c:	str	r4, [sp, #104]	; 0x68
   13b10:	stmia	ip!, {r0, r1, r2, r3}
   13b14:	ldm	lr!, {r0, r1, r2, r3}
   13b18:	b	13508 <__assert_fail@plt+0x20a0>
   13b1c:	lsr	r0, r8, #31
   13b20:	strb	r0, [sp, #256]	; 0x100
   13b24:	ldr	r0, [sp, #24]
   13b28:	ldr	r1, [pc, #2240]	; 143f0 <__assert_fail@plt+0x2f88>
   13b2c:	sub	r2, r0, r2
   13b30:	str	r2, [sp, #108]	; 0x6c
   13b34:	ldr	r2, [sp, #36]	; 0x24
   13b38:	cmp	r8, #0
   13b3c:	ldr	r3, [pc, #2224]	; 143f4 <__assert_fail@plt+0x2f8c>
   13b40:	str	r0, [r2]
   13b44:	movne	r3, r1
   13b48:	ldrd	r0, [sp, #40]	; 0x28
   13b4c:	str	r3, [sp, #16]
   13b50:	movne	r3, #19
   13b54:	moveq	r3, #20
   13b58:	str	r0, [sp, #112]	; 0x70
   13b5c:	str	r1, [sp, #116]	; 0x74
   13b60:	b	13a98 <__assert_fail@plt+0x2630>
   13b64:	add	ip, sp, #1536	; 0x600
   13b68:	add	r1, sp, #1520	; 0x5f0
   13b6c:	add	ip, ip, #11
   13b70:	add	r1, r1, #8
   13b74:	str	r1, [sp, #16]
   13b78:	cmp	r1, ip
   13b7c:	strbcc	r3, [r1], #1
   13b80:	ldr	r3, [sp, #36]	; 0x24
   13b84:	add	r2, r2, #1
   13b88:	str	r2, [r3]
   13b8c:	ldrb	r3, [r2]
   13b90:	cmp	r3, #65	; 0x41
   13b94:	bcc	13bac <__assert_fail@plt+0x2744>
   13b98:	cmp	r3, #90	; 0x5a
   13b9c:	bls	13b78 <__assert_fail@plt+0x2710>
   13ba0:	sub	r0, r3, #97	; 0x61
   13ba4:	cmp	r0, #25
   13ba8:	bls	13b78 <__assert_fail@plt+0x2710>
   13bac:	cmp	r3, #46	; 0x2e
   13bb0:	beq	13b78 <__assert_fail@plt+0x2710>
   13bb4:	mov	r3, #0
   13bb8:	strb	r3, [r1]
   13bbc:	ldrb	r3, [sp, #1528]	; 0x5f8
   13bc0:	cmp	r3, #0
   13bc4:	ldrne	r2, [sp, #16]
   13bc8:	beq	13bec <__assert_fail@plt+0x2784>
   13bcc:	sub	r1, r3, #97	; 0x61
   13bd0:	cmp	r1, #25
   13bd4:	subls	r3, r3, #32
   13bd8:	uxtbls	r3, r3
   13bdc:	strb	r3, [r2]
   13be0:	ldrb	r3, [r2, #1]!
   13be4:	cmp	r3, #0
   13be8:	bne	13bcc <__assert_fail@plt+0x2764>
   13bec:	ldr	r8, [pc, #2052]	; 143f8 <__assert_fail@plt+0x2f90>
   13bf0:	str	r4, [sp, #24]
   13bf4:	ldr	r1, [pc, #2048]	; 143fc <__assert_fail@plt+0x2f94>
   13bf8:	mov	r4, r8
   13bfc:	ldr	r8, [sp, #16]
   13c00:	b	13c10 <__assert_fail@plt+0x27a8>
   13c04:	ldr	r1, [r4, #12]!
   13c08:	cmp	r1, #0
   13c0c:	beq	15928 <__assert_fail@plt+0x44c0>
   13c10:	mov	r0, r8
   13c14:	bl	1112c <strcmp@plt>
   13c18:	cmp	r0, #0
   13c1c:	bne	13c04 <__assert_fail@plt+0x279c>
   13c20:	mov	r8, r4
   13c24:	ldr	r4, [sp, #24]
   13c28:	ldr	r2, [r8, #8]
   13c2c:	ldr	r3, [r8, #4]
   13c30:	str	r3, [sp, #16]
   13c34:	asr	r3, r2, #31
   13c38:	add	r1, sp, #256	; 0x100
   13c3c:	strd	r2, [r1]
   13c40:	b	13474 <__assert_fail@plt+0x200c>
   13c44:	add	lr, r9, #56	; 0x38
   13c48:	add	r8, sp, #320	; 0x140
   13c4c:	ldm	lr!, {r0, r1, r2, r3}
   13c50:	sub	ip, r8, #8
   13c54:	ldr	r4, [r9, #64]	; 0x40
   13c58:	str	ip, [sp, #92]	; 0x5c
   13c5c:	stmia	ip!, {r0, r1, r2, r3}
   13c60:	ldm	lr!, {r0, r1, r2, r3}
   13c64:	str	r4, [sp, #84]	; 0x54
   13c68:	ldr	r4, [r9, #68]	; 0x44
   13c6c:	stmia	ip!, {r0, r1, r2, r3}
   13c70:	str	r4, [sp, #88]	; 0x58
   13c74:	ldm	lr!, {r0, r1, r2, r3}
   13c78:	ldr	r4, [r9, #72]	; 0x48
   13c7c:	str	sl, [sp, #24]
   13c80:	str	r4, [sp, #76]	; 0x4c
   13c84:	ldr	r4, [r9, #76]	; 0x4c
   13c88:	str	r9, [sp, #96]	; 0x60
   13c8c:	str	r4, [sp, #80]	; 0x50
   13c90:	stmia	ip!, {r0, r1, r2, r3}
   13c94:	mvn	sl, #27
   13c98:	ldr	r3, [r9, #80]	; 0x50
   13c9c:	ldm	lr, {r0, r1}
   13ca0:	str	r3, [sp, #68]	; 0x44
   13ca4:	ldr	r3, [r9, #84]	; 0x54
   13ca8:	stm	ip, {r0, r1}
   13cac:	str	r3, [sp, #72]	; 0x48
   13cb0:	ldr	r3, [r9, #88]	; 0x58
   13cb4:	str	r3, [sp, #64]	; 0x40
   13cb8:	ldr	r3, [r9, #92]	; 0x5c
   13cbc:	str	r3, [sp, #56]	; 0x38
   13cc0:	ldrd	r2, [r9, #96]	; 0x60
   13cc4:	strd	r2, [sp, #48]	; 0x30
   13cc8:	ldr	r3, [r9, #104]	; 0x68
   13ccc:	str	r3, [sp, #40]	; 0x28
   13cd0:	ldr	r3, [sp, #84]	; 0x54
   13cd4:	ldr	ip, [sp, #92]	; 0x5c
   13cd8:	str	r3, [r8]
   13cdc:	ldr	r3, [sp, #88]	; 0x58
   13ce0:	ldr	lr, [sp, #96]	; 0x60
   13ce4:	str	r3, [r8, #4]
   13ce8:	ldr	r3, [sp, #76]	; 0x4c
   13cec:	add	r9, lr, #56	; 0x38
   13cf0:	str	r3, [r8, #8]
   13cf4:	ldr	r3, [sp, #80]	; 0x50
   13cf8:	mov	lr, r9
   13cfc:	str	r3, [r8, #12]
   13d00:	ldr	r3, [sp, #68]	; 0x44
   13d04:	str	r3, [r8, #16]
   13d08:	ldr	r3, [sp, #72]	; 0x48
   13d0c:	str	r3, [r8, #20]
   13d10:	ldr	r3, [sp, #64]	; 0x40
   13d14:	str	r3, [r8, #24]
   13d18:	ldr	r3, [sp, #56]	; 0x38
   13d1c:	str	r3, [r8, #28]
   13d20:	ldrd	r2, [sp, #48]	; 0x30
   13d24:	strd	r2, [r8, #32]
   13d28:	ldr	r3, [sp, #40]	; 0x28
   13d2c:	str	r3, [sp, #360]	; 0x168
   13d30:	ldm	ip!, {r0, r1, r2, r3}
   13d34:	stmia	lr!, {r0, r1, r2, r3}
   13d38:	ldm	ip!, {r0, r1, r2, r3}
   13d3c:	stmia	lr!, {r0, r1, r2, r3}
   13d40:	ldm	ip!, {r0, r1, r2, r3}
   13d44:	stmia	lr!, {r0, r1, r2, r3}
   13d48:	ldr	r3, [sp, #24]
   13d4c:	ldm	ip, {r0, r1}
   13d50:	ldrsh	r3, [r3]
   13d54:	stm	lr, {r0, r1}
   13d58:	add	r7, r3, r7
   13d5c:	cmp	r7, #112	; 0x70
   13d60:	bhi	13d7c <__assert_fail@plt+0x2914>
   13d64:	add	r7, fp, r7
   13d68:	add	r2, r7, #2256	; 0x8d0
   13d6c:	ldrsb	r2, [r2, #4]
   13d70:	cmp	r2, r3
   13d74:	ldrbeq	r7, [r7, #2376]	; 0x948
   13d78:	beq	1351c <__assert_fail@plt+0x20b4>
   13d7c:	add	sl, fp, sl
   13d80:	add	sl, sl, #2816	; 0xb00
   13d84:	ldrsb	r7, [sl, #4]
   13d88:	b	1351c <__assert_fail@plt+0x20b4>
   13d8c:	mov	r2, #10
   13d90:	cmp	fp, #0
   13d94:	umull	r0, r1, sl, r2
   13d98:	strd	r0, [sp, #56]	; 0x38
   13d9c:	umull	r0, r1, r2, fp
   13da0:	strd	r0, [sp, #16]
   13da4:	bge	13dc4 <__assert_fail@plt+0x295c>
   13da8:	ldr	r2, [sp, #16]
   13dac:	mov	r1, #10
   13db0:	subs	r2, r2, lr
   13db4:	str	r2, [sp, #16]
   13db8:	ldr	r2, [sp, #20]
   13dbc:	sbc	r2, r2, r1
   13dc0:	str	r2, [sp, #20]
   13dc4:	ldr	r2, [sp, #16]
   13dc8:	ldr	r1, [sp, #60]	; 0x3c
   13dcc:	mov	r0, #0
   13dd0:	adds	r1, r2, r1
   13dd4:	ldr	r2, [sp, #20]
   13dd8:	adc	r0, r2, r0
   13ddc:	cmp	r0, r1, asr #31
   13de0:	bne	1648c <__assert_fail@plt+0x5024>
   13de4:	ldr	r0, [sp, #56]	; 0x38
   13de8:	b	13ab8 <__assert_fail@plt+0x2650>
   13dec:	ldr	lr, [sp, #36]	; 0x24
   13df0:	ldrd	r4, [r9, #40]	; 0x28
   13df4:	ldr	r1, [r9, #48]	; 0x30
   13df8:	ldrd	r2, [lr, #136]	; 0x88
   13dfc:	ldr	r0, [lr, #144]	; 0x90
   13e00:	mov	ip, lr
   13e04:	strd	r2, [sp, #24]
   13e08:	ldrd	r2, [lr, #128]	; 0x80
   13e0c:	adds	r1, r0, r1
   13e10:	movvs	ip, #1
   13e14:	strd	r2, [sp, #96]	; 0x60
   13e18:	ldrd	r2, [lr, #120]	; 0x78
   13e1c:	movvc	ip, #0
   13e20:	str	r1, [lr, #144]	; 0x90
   13e24:	strd	r2, [sp, #152]	; 0x98
   13e28:	ldrd	r2, [sp, #24]
   13e2c:	adds	r0, r2, r4
   13e30:	adcs	r1, r3, r5
   13e34:	ldrd	r4, [sp, #96]	; 0x60
   13e38:	strd	r0, [lr, #136]	; 0x88
   13e3c:	ldrd	r0, [r9, #32]
   13e40:	movvs	r7, #1
   13e44:	movvc	r7, #0
   13e48:	adds	r2, r4, r0
   13e4c:	adcs	r3, r5, r1
   13e50:	ldrd	r0, [lr, #112]	; 0x70
   13e54:	ldrd	r4, [sp, #152]	; 0x98
   13e58:	orr	r7, ip, r7
   13e5c:	strd	r0, [sp, #24]
   13e60:	ldrd	r0, [r9, #24]
   13e64:	mov	ip, lr
   13e68:	strd	r2, [lr, #128]	; 0x80
   13e6c:	movvs	lr, #1
   13e70:	movvc	lr, #0
   13e74:	adds	r2, r4, r0
   13e78:	adcs	r3, r5, r1
   13e7c:	ldrd	r4, [ip, #104]	; 0x68
   13e80:	ldrd	r0, [sp, #24]
   13e84:	orr	lr, r7, lr
   13e88:	strd	r4, [sp, #96]	; 0x60
   13e8c:	ldrd	r4, [r9, #16]
   13e90:	movvs	r7, #1
   13e94:	movvc	r7, #0
   13e98:	strd	r2, [ip, #120]	; 0x78
   13e9c:	adds	r2, r0, r4
   13ea0:	adcs	r3, r1, r5
   13ea4:	ldrd	r4, [sp, #96]	; 0x60
   13ea8:	ldrd	r0, [r9, #8]
   13eac:	orr	lr, lr, r7
   13eb0:	strd	r2, [ip, #112]	; 0x70
   13eb4:	movvs	r7, #1
   13eb8:	movvc	r7, #0
   13ebc:	adds	r2, r4, r0
   13ec0:	adcs	r3, r5, r1
   13ec4:	ldrd	r0, [r9]
   13ec8:	ldrd	r4, [ip, #96]	; 0x60
   13ecc:	orr	lr, lr, r7
   13ed0:	strd	r2, [sp, #24]
   13ed4:	movvs	r7, #1
   13ed8:	movvc	r7, #0
   13edc:	adds	r4, r4, r0
   13ee0:	adcs	r5, r5, r1
   13ee4:	ldrd	r2, [sp, #24]
   13ee8:	orrvc	r1, lr, r7
   13eec:	movvs	r1, #1
   13ef0:	cmp	r1, #0
   13ef4:	strd	r2, [ip, #104]	; 0x68
   13ef8:	strd	r4, [ip, #96]	; 0x60
   13efc:	bne	13580 <__assert_fail@plt+0x2118>
   13f00:	sub	r2, r9, #56	; 0x38
   13f04:	mov	r3, #1
   13f08:	str	r2, [sp, #96]	; 0x60
   13f0c:	sub	r2, sl, #2
   13f10:	str	r2, [sp, #24]
   13f14:	strb	r3, [ip, #153]	; 0x99
   13f18:	mvn	r7, #92	; 0x5c
   13f1c:	mov	sl, #16
   13f20:	b	13cd0 <__assert_fail@plt+0x2868>
   13f24:	mov	r2, #56	; 0x38
   13f28:	mov	r1, #0
   13f2c:	ldr	r0, [sp, #92]	; 0x5c
   13f30:	bl	11360 <memset@plt>
   13f34:	ldr	r3, [r9, #-56]	; 0xffffffc8
   13f38:	sub	r1, sl, #4
   13f3c:	mov	r0, r3
   13f40:	str	r1, [sp, #24]
   13f44:	asr	r1, r3, #31
   13f48:	ldr	r3, [r9, #-52]	; 0xffffffcc
   13f4c:	mov	r2, #0
   13f50:	str	r3, [sp, #40]	; 0x28
   13f54:	sub	r3, r9, #112	; 0x70
   13f58:	str	r2, [sp, #64]	; 0x40
   13f5c:	str	r2, [sp, #56]	; 0x38
   13f60:	strd	r0, [sp, #48]	; 0x30
   13f64:	str	r2, [sp, #68]	; 0x44
   13f68:	str	r2, [sp, #76]	; 0x4c
   13f6c:	str	r2, [sp, #84]	; 0x54
   13f70:	str	r2, [sp, #72]	; 0x48
   13f74:	str	r2, [sp, #80]	; 0x50
   13f78:	str	r2, [sp, #88]	; 0x58
   13f7c:	str	r3, [sp, #96]	; 0x60
   13f80:	mvn	r7, #92	; 0x5c
   13f84:	mov	sl, #17
   13f88:	b	13cd0 <__assert_fail@plt+0x2868>
   13f8c:	cmp	r2, #9
   13f90:	bhi	159dc <__assert_fail@plt+0x4574>
   13f94:	cmp	r0, #48	; 0x30
   13f98:	bne	13fb4 <__assert_fail@plt+0x2b4c>
   13f9c:	ldrb	r2, [r4, #1]!
   13fa0:	sub	r1, r2, #48	; 0x30
   13fa4:	cmp	r1, #9
   13fa8:	bhi	159dc <__assert_fail@plt+0x4574>
   13fac:	cmp	r2, #48	; 0x30
   13fb0:	beq	13f9c <__assert_fail@plt+0x2b34>
   13fb4:	ldrb	ip, [r4]
   13fb8:	add	r3, r3, #1
   13fbc:	sub	ip, ip, #48	; 0x30
   13fc0:	b	13a1c <__assert_fail@plt+0x25b4>
   13fc4:	mov	r2, #56	; 0x38
   13fc8:	mov	r1, #0
   13fcc:	ldr	r0, [sp, #92]	; 0x5c
   13fd0:	bl	11360 <memset@plt>
   13fd4:	mov	r1, r9
   13fd8:	mov	r0, #0
   13fdc:	ldrd	r2, [r1], #-56	; 0xffffffc8
   13fe0:	sub	ip, sl, #2
   13fe4:	str	ip, [sp, #24]
   13fe8:	str	r1, [sp, #96]	; 0x60
   13fec:	mov	r1, #0
   13ff0:	strd	r2, [sp, #76]	; 0x4c
   13ff4:	mov	r3, #0
   13ff8:	strd	r0, [sp, #48]	; 0x30
   13ffc:	str	r0, [sp, #64]	; 0x40
   14000:	str	r1, [sp, #56]	; 0x38
   14004:	str	r0, [sp, #68]	; 0x44
   14008:	str	r1, [sp, #72]	; 0x48
   1400c:	str	r0, [sp, #84]	; 0x54
   14010:	str	r1, [sp, #88]	; 0x58
   14014:	mvn	r7, #92	; 0x5c
   14018:	mov	sl, #17
   1401c:	str	r3, [sp, #40]	; 0x28
   14020:	b	13cd0 <__assert_fail@plt+0x2868>
   14024:	mov	r2, #56	; 0x38
   14028:	mov	r1, #0
   1402c:	ldr	r0, [sp, #92]	; 0x5c
   14030:	bl	11360 <memset@plt>
   14034:	ldr	r0, [r9, #-48]	; 0xffffffd0
   14038:	ldr	r2, [r9, #-44]	; 0xffffffd4
   1403c:	ldr	r3, [r9]
   14040:	mov	r1, #0
   14044:	cmp	r2, r0, asr #31
   14048:	str	r1, [sp, #40]	; 0x28
   1404c:	ldr	ip, [r9, #4]
   14050:	asr	r1, r3, #31
   14054:	bne	16034 <__assert_fail@plt+0x4bcc>
   14058:	cmp	r1, ip
   1405c:	bne	15fc4 <__assert_fail@plt+0x4b5c>
   14060:	smull	r2, r3, r0, r3
   14064:	strd	r2, [sp, #136]	; 0x88
   14068:	ldrd	r0, [sp, #136]	; 0x88
   1406c:	ldr	r3, [sp, #40]	; 0x28
   14070:	cmp	r3, #0
   14074:	str	r0, [sp, #76]	; 0x4c
   14078:	str	r1, [sp, #80]	; 0x50
   1407c:	bne	13580 <__assert_fail@plt+0x2118>
   14080:	sub	r2, r9, #112	; 0x70
   14084:	mov	r0, #0
   14088:	mov	r1, #0
   1408c:	str	r2, [sp, #96]	; 0x60
   14090:	sub	r2, sl, #4
   14094:	strd	r0, [sp, #48]	; 0x30
   14098:	str	r2, [sp, #24]
   1409c:	str	r0, [sp, #64]	; 0x40
   140a0:	str	r1, [sp, #56]	; 0x38
   140a4:	str	r0, [sp, #68]	; 0x44
   140a8:	str	r1, [sp, #72]	; 0x48
   140ac:	str	r0, [sp, #84]	; 0x54
   140b0:	str	r1, [sp, #88]	; 0x58
   140b4:	mvn	r7, #92	; 0x5c
   140b8:	mov	sl, #17
   140bc:	b	13cd0 <__assert_fail@plt+0x2868>
   140c0:	mov	r4, #0
   140c4:	mov	r5, #0
   140c8:	sub	r3, sl, #4
   140cc:	mov	r2, #56	; 0x38
   140d0:	mov	r1, #0
   140d4:	ldr	r0, [sp, #92]	; 0x5c
   140d8:	str	r3, [sp, #24]
   140dc:	strd	r4, [sp, #48]	; 0x30
   140e0:	bl	11360 <memset@plt>
   140e4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   140e8:	str	r4, [sp, #68]	; 0x44
   140ec:	str	r3, [sp, #64]	; 0x40
   140f0:	ldr	r3, [r9, #-52]	; 0xffffffcc
   140f4:	str	r5, [sp, #72]	; 0x48
   140f8:	str	r4, [sp, #76]	; 0x4c
   140fc:	str	r5, [sp, #80]	; 0x50
   14100:	str	r4, [sp, #84]	; 0x54
   14104:	str	r5, [sp, #88]	; 0x58
   14108:	str	r3, [sp, #56]	; 0x38
   1410c:	sub	r3, r9, #112	; 0x70
   14110:	str	r3, [sp, #96]	; 0x60
   14114:	mov	r3, #0
   14118:	mvn	r7, #92	; 0x5c
   1411c:	mov	sl, #17
   14120:	str	r3, [sp, #40]	; 0x28
   14124:	b	13cd0 <__assert_fail@plt+0x2868>
   14128:	mov	r4, #0
   1412c:	mov	r5, #0
   14130:	sub	r3, r9, #56	; 0x38
   14134:	str	r3, [sp, #96]	; 0x60
   14138:	mov	r2, #56	; 0x38
   1413c:	sub	r3, sl, #2
   14140:	mov	r1, #0
   14144:	ldr	r0, [sp, #92]	; 0x5c
   14148:	strd	r4, [sp, #48]	; 0x30
   1414c:	str	r3, [sp, #24]
   14150:	bl	11360 <memset@plt>
   14154:	str	r4, [sp, #64]	; 0x40
   14158:	str	r5, [sp, #56]	; 0x38
   1415c:	str	r4, [sp, #76]	; 0x4c
   14160:	str	r5, [sp, #80]	; 0x50
   14164:	str	r4, [sp, #84]	; 0x54
   14168:	str	r5, [sp, #88]	; 0x58
   1416c:	mov	r4, #1
   14170:	mov	r5, #0
   14174:	mov	r3, #0
   14178:	mvn	r7, #92	; 0x5c
   1417c:	mov	sl, #17
   14180:	str	r3, [sp, #40]	; 0x28
   14184:	strd	r4, [sp, #68]	; 0x44
   14188:	b	13cd0 <__assert_fail@plt+0x2868>
   1418c:	mov	r4, #0
   14190:	mov	r5, #0
   14194:	sub	r3, sl, #4
   14198:	mov	r2, #56	; 0x38
   1419c:	mov	r1, #0
   141a0:	ldr	r0, [sp, #92]	; 0x5c
   141a4:	str	r3, [sp, #24]
   141a8:	strd	r4, [sp, #48]	; 0x30
   141ac:	bl	11360 <memset@plt>
   141b0:	ldr	r3, [r9, #-48]	; 0xffffffd0
   141b4:	str	r4, [sp, #64]	; 0x40
   141b8:	str	r3, [sp, #84]	; 0x54
   141bc:	ldr	r3, [r9, #-44]	; 0xffffffd4
   141c0:	str	r5, [sp, #56]	; 0x38
   141c4:	str	r4, [sp, #68]	; 0x44
   141c8:	str	r5, [sp, #72]	; 0x48
   141cc:	str	r4, [sp, #76]	; 0x4c
   141d0:	str	r5, [sp, #80]	; 0x50
   141d4:	str	r3, [sp, #88]	; 0x58
   141d8:	b	1410c <__assert_fail@plt+0x2ca4>
   141dc:	mov	r4, #0
   141e0:	mov	r5, #0
   141e4:	sub	r3, sl, #4
   141e8:	mov	r2, #56	; 0x38
   141ec:	mov	r1, #0
   141f0:	ldr	r0, [sp, #92]	; 0x5c
   141f4:	str	r3, [sp, #24]
   141f8:	strd	r4, [sp, #48]	; 0x30
   141fc:	bl	11360 <memset@plt>
   14200:	ldr	r3, [r9, #-56]	; 0xffffffc8
   14204:	str	r4, [sp, #64]	; 0x40
   14208:	str	r3, [sp, #84]	; 0x54
   1420c:	str	r5, [sp, #56]	; 0x38
   14210:	str	r4, [sp, #68]	; 0x44
   14214:	str	r5, [sp, #72]	; 0x48
   14218:	str	r4, [sp, #76]	; 0x4c
   1421c:	str	r5, [sp, #80]	; 0x50
   14220:	ldr	r3, [r9, #-52]	; 0xffffffcc
   14224:	b	141d4 <__assert_fail@plt+0x2d6c>
   14228:	ldr	r4, [sp, #36]	; 0x24
   1422c:	ldm	r9, {r0, r1}
   14230:	add	r3, r4, #88	; 0x58
   14234:	mov	ip, #1
   14238:	stm	r3, {r0, r1}
   1423c:	mov	r2, #5
   14240:	ldr	r1, [pc, #440]	; 14400 <__assert_fail@plt+0x2f98>
   14244:	strb	ip, [r4, #152]	; 0x98
   14248:	mov	r0, #0
   1424c:	bl	111b0 <dcgettext@plt>
   14250:	ldrb	r3, [r4, #181]	; 0xb5
   14254:	sub	r2, sl, #4
   14258:	str	r2, [sp, #24]
   1425c:	cmp	r3, #0
   14260:	sub	r2, r9, #112	; 0x70
   14264:	mov	r1, r4
   14268:	str	r2, [sp, #96]	; 0x60
   1426c:	mvneq	r7, #92	; 0x5c
   14270:	moveq	sl, #2
   14274:	beq	13cd0 <__assert_fail@plt+0x2868>
   14278:	bl	13004 <__assert_fail@plt+0x1b9c>
   1427c:	mvn	r7, #92	; 0x5c
   14280:	mov	sl, #2
   14284:	b	13cd0 <__assert_fail@plt+0x2868>
   14288:	sub	r3, r9, #48	; 0x30
   1428c:	ldr	r4, [sp, #36]	; 0x24
   14290:	ldm	r3, {r0, r1, r2, r3}
   14294:	sub	ip, r9, #56	; 0x38
   14298:	stm	sp, {r0, r1, r2, r3}
   1429c:	mov	r0, r4
   142a0:	ldm	ip, {r2, r3}
   142a4:	bl	12730 <__assert_fail@plt+0x12c8>
   142a8:	mov	lr, r4
   142ac:	ldr	r0, [r4, #144]	; 0x90
   142b0:	ldrd	r2, [lr, #136]	; 0x88
   142b4:	mov	ip, r4
   142b8:	ldr	r1, [r9, #48]	; 0x30
   142bc:	strd	r2, [sp, #24]
   142c0:	ldrd	r2, [lr, #128]	; 0x80
   142c4:	ldrd	r4, [r9, #40]	; 0x28
   142c8:	adds	r1, r0, r1
   142cc:	strd	r2, [sp, #96]	; 0x60
   142d0:	ldrd	r2, [lr, #120]	; 0x78
   142d4:	movvs	ip, #1
   142d8:	movvc	ip, #0
   142dc:	strd	r2, [sp, #152]	; 0x98
   142e0:	ldrd	r2, [sp, #24]
   142e4:	str	r1, [lr, #144]	; 0x90
   142e8:	adds	r0, r2, r4
   142ec:	adcs	r1, r3, r5
   142f0:	ldrd	r4, [sp, #96]	; 0x60
   142f4:	strd	r0, [lr, #136]	; 0x88
   142f8:	ldrd	r0, [r9, #32]
   142fc:	movvs	r7, #1
   14300:	movvc	r7, #0
   14304:	adds	r2, r4, r0
   14308:	adcs	r3, r5, r1
   1430c:	ldrd	r0, [lr, #112]	; 0x70
   14310:	ldrd	r4, [sp, #152]	; 0x98
   14314:	orr	r7, ip, r7
   14318:	strd	r0, [sp, #24]
   1431c:	ldrd	r0, [r9, #24]
   14320:	mov	ip, lr
   14324:	strd	r2, [lr, #128]	; 0x80
   14328:	movvs	lr, #1
   1432c:	movvc	lr, #0
   14330:	adds	r2, r4, r0
   14334:	adcs	r3, r5, r1
   14338:	ldrd	r4, [ip, #104]	; 0x68
   1433c:	ldrd	r0, [sp, #24]
   14340:	orr	lr, r7, lr
   14344:	strd	r4, [sp, #96]	; 0x60
   14348:	ldrd	r4, [r9, #16]
   1434c:	movvs	r7, #1
   14350:	movvc	r7, #0
   14354:	strd	r2, [ip, #120]	; 0x78
   14358:	adds	r2, r0, r4
   1435c:	adcs	r3, r1, r5
   14360:	ldrd	r4, [sp, #96]	; 0x60
   14364:	ldrd	r0, [r9, #8]
   14368:	orr	lr, lr, r7
   1436c:	strd	r2, [ip, #112]	; 0x70
   14370:	movvs	r7, #1
   14374:	movvc	r7, #0
   14378:	adds	r2, r4, r0
   1437c:	adcs	r3, r5, r1
   14380:	ldrd	r0, [r9]
   14384:	ldrd	r4, [ip, #96]	; 0x60
   14388:	orr	lr, lr, r7
   1438c:	strd	r2, [sp, #24]
   14390:	movvs	r7, #1
   14394:	movvc	r7, #0
   14398:	adds	r4, r4, r0
   1439c:	adcs	r5, r5, r1
   143a0:	ldrd	r2, [sp, #24]
   143a4:	orrvc	r1, lr, r7
   143a8:	movvs	r1, #1
   143ac:	cmp	r1, #0
   143b0:	strd	r2, [ip, #104]	; 0x68
   143b4:	strd	r4, [ip, #96]	; 0x60
   143b8:	bne	13580 <__assert_fail@plt+0x2118>
   143bc:	sub	r2, r9, #112	; 0x70
   143c0:	mov	r3, #1
   143c4:	str	r2, [sp, #96]	; 0x60
   143c8:	sub	r2, sl, #4
   143cc:	str	r2, [sp, #24]
   143d0:	strb	r3, [ip, #153]	; 0x99
   143d4:	mvn	r7, #92	; 0x5c
   143d8:	mov	sl, #24
   143dc:	b	13cd0 <__assert_fail@plt+0x2868>
   143e0:	andeq	r2, r3, r8, lsl #30
   143e4:	muleq	r2, r8, r1
   143e8:	andeq	r0, r0, r5, lsl r1
   143ec:	andeq	r0, r0, r3, lsl #2
   143f0:	andeq	r0, r0, r2, lsl r1
   143f4:	andeq	r0, r0, r3, lsl r1
   143f8:	andeq	r0, r2, r4, lsr r5
   143fc:	andeq	r0, r2, r8, lsl lr
   14400:	andeq	r0, r2, r8, asr lr
   14404:	muleq	r2, ip, lr
   14408:	muleq	r2, r4, lr
   1440c:	andeq	r0, r2, r4, lsl #29
   14410:	andeq	r0, r2, r4, ror #1
   14414:			; <UNDEFINED> instruction: 0x000213b0
   14418:	andeq	r0, r2, r8, ror lr
   1441c:	andeq	r6, r0, r0, ror r2
   14420:	andeq	r0, r2, r8, lsl #29
   14424:	mov	r2, #56	; 0x38
   14428:	mov	r1, #0
   1442c:	ldr	r0, [sp, #92]	; 0x5c
   14430:	bl	11360 <memset@plt>
   14434:	ldr	r4, [r9, #-56]	; 0xffffffc8
   14438:	ldr	r7, [r9, #-52]	; 0xffffffcc
   1443c:	ldr	r3, [r9]
   14440:	mov	r2, #0
   14444:	cmp	r7, r4, asr #31
   14448:	str	r2, [sp, #48]	; 0x30
   1444c:	ldr	ip, [r9, #4]
   14450:	asr	r2, r3, #31
   14454:	bne	16054 <__assert_fail@plt+0x4bec>
   14458:	cmp	r2, ip
   1445c:	bne	15eb8 <__assert_fail@plt+0x4a50>
   14460:	smull	r2, r3, r4, r3
   14464:	strd	r2, [sp, #128]	; 0x80
   14468:	ldrd	r0, [sp, #128]	; 0x80
   1446c:	ldr	r3, [sp, #48]	; 0x30
   14470:	cmp	r3, #0
   14474:	str	r0, [sp, #76]	; 0x4c
   14478:	str	r1, [sp, #80]	; 0x50
   1447c:	bne	13580 <__assert_fail@plt+0x2118>
   14480:	sub	r2, r9, #112	; 0x70
   14484:	mov	r0, #0
   14488:	mov	r1, #0
   1448c:	str	r2, [sp, #96]	; 0x60
   14490:	sub	r2, sl, #4
   14494:	strd	r0, [sp, #48]	; 0x30
   14498:	str	r2, [sp, #24]
   1449c:	str	r3, [sp, #40]	; 0x28
   144a0:	b	1409c <__assert_fail@plt+0x2c34>
   144a4:	mov	r4, #0
   144a8:	mov	r5, #0
   144ac:	sub	r3, r9, #56	; 0x38
   144b0:	str	r3, [sp, #96]	; 0x60
   144b4:	mov	r2, #56	; 0x38
   144b8:	sub	r3, sl, #2
   144bc:	mov	r1, #0
   144c0:	ldr	r0, [sp, #92]	; 0x5c
   144c4:	strd	r4, [sp, #48]	; 0x30
   144c8:	str	r3, [sp, #24]
   144cc:	bl	11360 <memset@plt>
   144d0:	str	r4, [sp, #64]	; 0x40
   144d4:	str	r5, [sp, #56]	; 0x38
   144d8:	str	r4, [sp, #68]	; 0x44
   144dc:	str	r5, [sp, #72]	; 0x48
   144e0:	str	r4, [sp, #76]	; 0x4c
   144e4:	str	r5, [sp, #80]	; 0x50
   144e8:	mov	r4, #1
   144ec:	mov	r5, #0
   144f0:	mov	r3, #0
   144f4:	mvn	r7, #92	; 0x5c
   144f8:	mov	sl, #17
   144fc:	str	r3, [sp, #40]	; 0x28
   14500:	strd	r4, [sp, #84]	; 0x54
   14504:	b	13cd0 <__assert_fail@plt+0x2868>
   14508:	mov	r4, #0
   1450c:	mov	r5, #0
   14510:	sub	r3, r9, #56	; 0x38
   14514:	str	r3, [sp, #96]	; 0x60
   14518:	mov	r2, #56	; 0x38
   1451c:	sub	r3, sl, #2
   14520:	mov	r1, #0
   14524:	ldr	r0, [sp, #92]	; 0x5c
   14528:	str	r3, [sp, #24]
   1452c:	strd	r4, [sp, #48]	; 0x30
   14530:	bl	11360 <memset@plt>
   14534:	mov	r3, #0
   14538:	str	r3, [sp, #40]	; 0x28
   1453c:	mov	r3, #1
   14540:	str	r3, [sp, #64]	; 0x40
   14544:	mov	r3, #0
   14548:	str	r4, [sp, #68]	; 0x44
   1454c:	str	r5, [sp, #72]	; 0x48
   14550:	str	r4, [sp, #76]	; 0x4c
   14554:	str	r5, [sp, #80]	; 0x50
   14558:	str	r4, [sp, #84]	; 0x54
   1455c:	str	r5, [sp, #88]	; 0x58
   14560:	mvn	r7, #92	; 0x5c
   14564:	mov	sl, #17
   14568:	str	r3, [sp, #56]	; 0x38
   1456c:	b	13cd0 <__assert_fail@plt+0x2868>
   14570:	mov	r4, #0
   14574:	mov	r5, #0
   14578:	sub	r3, sl, #4
   1457c:	mov	r2, #56	; 0x38
   14580:	mov	r1, #0
   14584:	ldr	r0, [sp, #92]	; 0x5c
   14588:	str	r3, [sp, #24]
   1458c:	strd	r4, [sp, #48]	; 0x30
   14590:	bl	11360 <memset@plt>
   14594:	ldr	r3, [r9, #-48]	; 0xffffffd0
   14598:	str	r4, [sp, #68]	; 0x44
   1459c:	str	r3, [sp, #64]	; 0x40
   145a0:	ldr	r3, [r9, #-44]	; 0xffffffd4
   145a4:	str	r5, [sp, #72]	; 0x48
   145a8:	str	r4, [sp, #76]	; 0x4c
   145ac:	str	r5, [sp, #80]	; 0x50
   145b0:	str	r4, [sp, #84]	; 0x54
   145b4:	str	r5, [sp, #88]	; 0x58
   145b8:	str	r3, [sp, #56]	; 0x38
   145bc:	b	1410c <__assert_fail@plt+0x2ca4>
   145c0:	mov	r1, #0
   145c4:	sub	r3, sl, #4
   145c8:	mov	r2, #56	; 0x38
   145cc:	ldr	r0, [sp, #92]	; 0x5c
   145d0:	mov	r4, r1
   145d4:	str	r3, [sp, #24]
   145d8:	str	r1, [sp, #64]	; 0x40
   145dc:	mov	r5, r1
   145e0:	str	r1, [sp, #56]	; 0x38
   145e4:	bl	11360 <memset@plt>
   145e8:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   145ec:	str	r4, [sp, #68]	; 0x44
   145f0:	str	r4, [sp, #76]	; 0x4c
   145f4:	str	r4, [sp, #84]	; 0x54
   145f8:	str	r4, [sp, #72]	; 0x48
   145fc:	str	r4, [sp, #80]	; 0x50
   14600:	str	r4, [sp, #88]	; 0x58
   14604:	strd	r2, [sp, #48]	; 0x30
   14608:	sub	r3, r9, #112	; 0x70
   1460c:	str	r3, [sp, #96]	; 0x60
   14610:	mvn	r7, #92	; 0x5c
   14614:	mov	sl, #17
   14618:	str	r5, [sp, #40]	; 0x28
   1461c:	b	13cd0 <__assert_fail@plt+0x2868>
   14620:	mov	r4, #0
   14624:	mov	r5, #0
   14628:	sub	r3, sl, #4
   1462c:	mov	r2, #56	; 0x38
   14630:	mov	r1, #0
   14634:	ldr	r0, [sp, #92]	; 0x5c
   14638:	str	r3, [sp, #24]
   1463c:	strd	r4, [sp, #48]	; 0x30
   14640:	bl	11360 <memset@plt>
   14644:	ldr	r3, [r9, #-48]	; 0xffffffd0
   14648:	str	r4, [sp, #64]	; 0x40
   1464c:	str	r3, [sp, #68]	; 0x44
   14650:	ldr	r3, [r9, #-44]	; 0xffffffd4
   14654:	str	r5, [sp, #56]	; 0x38
   14658:	str	r4, [sp, #76]	; 0x4c
   1465c:	str	r5, [sp, #80]	; 0x50
   14660:	str	r4, [sp, #84]	; 0x54
   14664:	str	r5, [sp, #88]	; 0x58
   14668:	str	r3, [sp, #72]	; 0x48
   1466c:	b	1410c <__assert_fail@plt+0x2ca4>
   14670:	mov	r4, #0
   14674:	mov	r5, #0
   14678:	sub	r3, sl, #4
   1467c:	mov	r2, #56	; 0x38
   14680:	mov	r1, #0
   14684:	ldr	r0, [sp, #92]	; 0x5c
   14688:	str	r3, [sp, #24]
   1468c:	strd	r4, [sp, #48]	; 0x30
   14690:	bl	11360 <memset@plt>
   14694:	ldr	r3, [r9, #-56]	; 0xffffffc8
   14698:	str	r4, [sp, #64]	; 0x40
   1469c:	str	r3, [sp, #68]	; 0x44
   146a0:	ldr	r3, [r9, #-52]	; 0xffffffcc
   146a4:	str	r5, [sp, #56]	; 0x38
   146a8:	str	r4, [sp, #76]	; 0x4c
   146ac:	str	r5, [sp, #80]	; 0x50
   146b0:	str	r4, [sp, #84]	; 0x54
   146b4:	str	r5, [sp, #88]	; 0x58
   146b8:	str	r3, [sp, #72]	; 0x48
   146bc:	b	1410c <__assert_fail@plt+0x2ca4>
   146c0:	sub	r2, r9, #56	; 0x38
   146c4:	str	r2, [sp, #96]	; 0x60
   146c8:	sub	r2, sl, #2
   146cc:	str	r2, [sp, #24]
   146d0:	ldr	r2, [sp, #36]	; 0x24
   146d4:	ldr	r3, [pc, #-704]	; 1441c <__assert_fail@plt+0x2fb4>
   146d8:	mvn	r7, #92	; 0x5c
   146dc:	str	r3, [r2, #24]
   146e0:	mov	sl, #12
   146e4:	b	13cd0 <__assert_fail@plt+0x2868>
   146e8:	sub	r3, sl, #2
   146ec:	ldr	r2, [sp, #36]	; 0x24
   146f0:	str	r3, [sp, #24]
   146f4:	ldr	r3, [r9], #-56	; 0xffffffc8
   146f8:	mvn	r7, #92	; 0x5c
   146fc:	str	r9, [sp, #96]	; 0x60
   14700:	str	r3, [r2, #24]
   14704:	mov	sl, #12
   14708:	b	13cd0 <__assert_fail@plt+0x2868>
   1470c:	ldr	r1, [sp, #36]	; 0x24
   14710:	mov	r2, #1
   14714:	sub	r0, r9, #112	; 0x70
   14718:	ldr	r3, [r1, #168]	; 0xa8
   1471c:	str	r0, [sp, #96]	; 0x60
   14720:	add	r3, r3, r2
   14724:	sub	r0, sl, #4
   14728:	str	r0, [sp, #24]
   1472c:	str	r3, [r1, #168]	; 0xa8
   14730:	str	r2, [r1, #20]
   14734:	mvn	r7, #92	; 0x5c
   14738:	mov	sl, #11
   1473c:	b	13cd0 <__assert_fail@plt+0x2868>
   14740:	sub	r3, sl, #2
   14744:	ldr	r2, [sp, #36]	; 0x24
   14748:	str	r3, [sp, #24]
   1474c:	ldr	r3, [r9], #-56	; 0xffffffc8
   14750:	mvn	r7, #92	; 0x5c
   14754:	str	r9, [sp, #96]	; 0x60
   14758:	str	r3, [r2, #20]
   1475c:	mov	sl, #11
   14760:	b	13cd0 <__assert_fail@plt+0x2868>
   14764:	ldr	r1, [sp, #36]	; 0x24
   14768:	ldr	r2, [r9, #-40]	; 0xffffffd8
   1476c:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   14770:	ldr	r3, [r1, #176]	; 0xb0
   14774:	cmp	r2, #2
   14778:	add	r3, r3, #1
   1477c:	str	r3, [r1, #176]	; 0xb0
   14780:	ldrd	r2, [r9]
   14784:	strd	r2, [sp, #96]	; 0x60
   14788:	bgt	15b04 <__assert_fail@plt+0x469c>
   1478c:	cmp	r2, #0
   14790:	sbcs	r3, r3, #0
   14794:	blt	15df8 <__assert_fail@plt+0x4990>
   14798:	cmp	r5, r4, asr #31
   1479c:	mov	lr, #0
   147a0:	bne	161e8 <__assert_fail@plt+0x4d80>
   147a4:	mov	r3, #60	; 0x3c
   147a8:	smull	r4, r5, r4, r3
   147ac:	mov	r2, r4
   147b0:	mov	r3, r5
   147b4:	ldrb	ip, [r9, #-56]	; 0xffffffc8
   147b8:	mov	r1, r3
   147bc:	ldrd	r4, [sp, #96]	; 0x60
   147c0:	cmp	ip, #0
   147c4:	beq	15db0 <__assert_fail@plt+0x4948>
   147c8:	subs	r2, r2, r4
   147cc:	sbcs	r3, r3, r5
   147d0:	mov	r1, #0
   147d4:	mov	r0, r2
   147d8:	movvs	r1, #1
   147dc:	mov	r5, r3
   147e0:	orrs	r3, lr, r1
   147e4:	bne	13580 <__assert_fail@plt+0x2118>
   147e8:	adds	r3, r0, #1440	; 0x5a0
   147ec:	str	r3, [sp, #224]	; 0xe0
   147f0:	adc	r3, r5, #0
   147f4:	str	r3, [sp, #228]	; 0xe4
   147f8:	ldrd	r2, [sp, #224]	; 0xe0
   147fc:	cmp	r3, #0
   14800:	cmpeq	r2, #2880	; 0xb40
   14804:	bhi	13580 <__assert_fail@plt+0x2118>
   14808:	rsb	r2, r0, r0, lsl #4
   1480c:	sub	r3, r9, #112	; 0x70
   14810:	str	r3, [sp, #96]	; 0x60
   14814:	lsl	r3, r2, #2
   14818:	ldr	r2, [sp, #36]	; 0x24
   1481c:	mvn	r7, #26
   14820:	str	r3, [r2, #24]
   14824:	sub	r3, sl, #4
   14828:	str	r3, [sp, #24]
   1482c:	mov	sl, #10
   14830:	b	13cd0 <__assert_fail@plt+0x2868>
   14834:	sub	ip, sl, #12
   14838:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   1483c:	str	ip, [sp, #24]
   14840:	ldr	ip, [sp, #36]	; 0x24
   14844:	sub	r3, r9, #272	; 0x110
   14848:	mov	r7, #20
   1484c:	ldrd	r2, [r3]
   14850:	strd	r0, [ip, #88]	; 0x58
   14854:	ldrd	r0, [r9, #-160]	; 0xffffff60
   14858:	strd	r2, [ip, #72]	; 0x48
   1485c:	mov	r3, #2
   14860:	strd	r0, [ip, #80]	; 0x50
   14864:	sub	r1, r9, #336	; 0x150
   14868:	str	r1, [sp, #96]	; 0x60
   1486c:	str	r3, [ip, #28]
   14870:	mov	sl, #8
   14874:	b	13cd0 <__assert_fail@plt+0x2868>
   14878:	sub	ip, sl, #8
   1487c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14880:	ldrd	r0, [r9, #-160]	; 0xffffff60
   14884:	str	ip, [sp, #24]
   14888:	ldr	ip, [sp, #36]	; 0x24
   1488c:	mov	r7, #20
   14890:	mov	sl, #8
   14894:	strd	r2, [ip, #80]	; 0x50
   14898:	strd	r0, [ip, #72]	; 0x48
   1489c:	mov	r3, #0
   148a0:	mov	r2, #2
   148a4:	sub	r1, r9, #224	; 0xe0
   148a8:	str	r1, [sp, #96]	; 0x60
   148ac:	str	r3, [ip, #88]	; 0x58
   148b0:	str	r3, [ip, #92]	; 0x5c
   148b4:	str	r2, [ip, #28]
   148b8:	b	13cd0 <__assert_fail@plt+0x2868>
   148bc:	ldr	r0, [sp, #36]	; 0x24
   148c0:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   148c4:	mov	r4, #0
   148c8:	mov	r5, #0
   148cc:	mov	r1, #0
   148d0:	sub	ip, sl, #4
   148d4:	strd	r2, [r0, #72]	; 0x48
   148d8:	mov	r3, #2
   148dc:	sub	r2, r9, #112	; 0x70
   148e0:	strd	r4, [r0, #80]	; 0x50
   148e4:	str	ip, [sp, #24]
   148e8:	str	r2, [sp, #96]	; 0x60
   148ec:	str	r1, [r0, #88]	; 0x58
   148f0:	str	r1, [r0, #92]	; 0x5c
   148f4:	str	r3, [r0, #28]
   148f8:	mov	r7, #20
   148fc:	mov	sl, #8
   14900:	b	13cd0 <__assert_fail@plt+0x2868>
   14904:	mov	r1, #0
   14908:	mov	r4, r1
   1490c:	sub	r3, sl, #4
   14910:	mov	r2, #56	; 0x38
   14914:	ldr	r0, [sp, #92]	; 0x5c
   14918:	str	r3, [sp, #24]
   1491c:	str	r1, [sp, #64]	; 0x40
   14920:	mov	r5, r1
   14924:	str	r1, [sp, #56]	; 0x38
   14928:	bl	11360 <memset@plt>
   1492c:	str	r4, [sp, #68]	; 0x44
   14930:	str	r4, [sp, #76]	; 0x4c
   14934:	str	r4, [sp, #84]	; 0x54
   14938:	str	r4, [sp, #72]	; 0x48
   1493c:	str	r4, [sp, #80]	; 0x50
   14940:	str	r4, [sp, #88]	; 0x58
   14944:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14948:	b	14604 <__assert_fail@plt+0x319c>
   1494c:	mov	r3, r9
   14950:	ldr	r0, [sp, #36]	; 0x24
   14954:	ldr	r1, [r3], #-112	; 0xffffff90
   14958:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   1495c:	str	r3, [sp, #96]	; 0x60
   14960:	mov	r2, #0
   14964:	mov	r3, #0
   14968:	str	r1, [r0, #28]
   1496c:	strd	r2, [r0, #80]	; 0x50
   14970:	mov	r1, #0
   14974:	sub	r3, sl, #4
   14978:	str	r3, [sp, #24]
   1497c:	strd	r4, [r0, #72]	; 0x48
   14980:	str	r1, [r0, #88]	; 0x58
   14984:	str	r1, [r0, #92]	; 0x5c
   14988:	mvn	r7, #92	; 0x5c
   1498c:	mov	sl, #7
   14990:	b	13cd0 <__assert_fail@plt+0x2868>
   14994:	ldr	r1, [pc, #-1432]	; 14404 <__assert_fail@plt+0x2f9c>
   14998:	mov	r2, #5
   1499c:	mov	r0, #0
   149a0:	bl	111b0 <dcgettext@plt>
   149a4:	ldr	r1, [sp, #36]	; 0x24
   149a8:	sub	r2, r9, #56	; 0x38
   149ac:	str	r2, [sp, #96]	; 0x60
   149b0:	ldrb	r3, [r1, #181]	; 0xb5
   149b4:	sub	r2, sl, #2
   149b8:	str	r2, [sp, #24]
   149bc:	cmp	r3, #0
   149c0:	beq	1591c <__assert_fail@plt+0x44b4>
   149c4:	bl	12c88 <__assert_fail@plt+0x1820>
   149c8:	mvn	r7, #92	; 0x5c
   149cc:	mov	sl, #4
   149d0:	b	13cd0 <__assert_fail@plt+0x2868>
   149d4:	ldr	r1, [pc, #-1492]	; 14408 <__assert_fail@plt+0x2fa0>
   149d8:	mov	r2, #5
   149dc:	mov	r0, #0
   149e0:	bl	111b0 <dcgettext@plt>
   149e4:	ldr	r1, [sp, #36]	; 0x24
   149e8:	ldrb	r3, [r1, #181]	; 0xb5
   149ec:	sub	r2, r9, #56	; 0x38
   149f0:	str	r2, [sp, #96]	; 0x60
   149f4:	cmp	r3, #0
   149f8:	sub	r2, sl, #2
   149fc:	str	r2, [sp, #24]
   14a00:	beq	1591c <__assert_fail@plt+0x44b4>
   14a04:	bl	13004 <__assert_fail@plt+0x1b9c>
   14a08:	mvn	r7, #92	; 0x5c
   14a0c:	mov	sl, #4
   14a10:	b	13cd0 <__assert_fail@plt+0x2868>
   14a14:	mov	r2, #5
   14a18:	ldr	r1, [pc, #-1536]	; 14420 <__assert_fail@plt+0x2fb8>
   14a1c:	b	1499c <__assert_fail@plt+0x3534>
   14a20:	ldr	r4, [sp, #36]	; 0x24
   14a24:	ldr	r1, [pc, #-1568]	; 1440c <__assert_fail@plt+0x2fa4>
   14a28:	mov	r2, #5
   14a2c:	ldr	r3, [r4, #160]	; 0xa0
   14a30:	mov	r0, #0
   14a34:	add	r3, r3, #1
   14a38:	str	r3, [r4, #160]	; 0xa0
   14a3c:	bl	111b0 <dcgettext@plt>
   14a40:	mov	r1, r4
   14a44:	b	149e8 <__assert_fail@plt+0x3580>
   14a48:	ldr	r4, [sp, #36]	; 0x24
   14a4c:	ldr	r1, [pc, #-1604]	; 14410 <__assert_fail@plt+0x2fa8>
   14a50:	mov	r2, #5
   14a54:	ldr	r3, [r4, #156]	; 0x9c
   14a58:	mov	r0, #0
   14a5c:	add	r3, r3, #1
   14a60:	str	r3, [r4, #156]	; 0x9c
   14a64:	bl	111b0 <dcgettext@plt>
   14a68:	mov	r1, r4
   14a6c:	b	149e8 <__assert_fail@plt+0x3580>
   14a70:	ldr	r4, [sp, #36]	; 0x24
   14a74:	ldr	r1, [pc, #-1640]	; 14414 <__assert_fail@plt+0x2fac>
   14a78:	mov	r2, #5
   14a7c:	ldr	r3, [r4, #176]	; 0xb0
   14a80:	mov	r0, #0
   14a84:	add	r3, r3, #1
   14a88:	str	r3, [r4, #176]	; 0xb0
   14a8c:	bl	111b0 <dcgettext@plt>
   14a90:	mov	r1, r4
   14a94:	b	149e8 <__assert_fail@plt+0x3580>
   14a98:	ldr	r4, [sp, #36]	; 0x24
   14a9c:	ldr	r1, [pc, #-1676]	; 14418 <__assert_fail@plt+0x2fb0>
   14aa0:	mov	r2, #5
   14aa4:	ldr	r3, [r4, #164]	; 0xa4
   14aa8:	mov	r0, #0
   14aac:	add	r3, r3, #1
   14ab0:	str	r3, [r4, #164]	; 0xa4
   14ab4:	bl	111b0 <dcgettext@plt>
   14ab8:	mov	r1, r4
   14abc:	b	149e8 <__assert_fail@plt+0x3580>
   14ac0:	sub	r2, r9, #56	; 0x38
   14ac4:	mov	r0, #1
   14ac8:	mov	r1, #0
   14acc:	mov	r4, #0
   14ad0:	mov	r5, #0
   14ad4:	mov	r3, #0
   14ad8:	str	r2, [sp, #96]	; 0x60
   14adc:	sub	r2, sl, #2
   14ae0:	strd	r4, [sp, #48]	; 0x30
   14ae4:	str	r2, [sp, #24]
   14ae8:	strd	r0, [r8, #-8]
   14aec:	str	r3, [sp, #364]	; 0x16c
   14af0:	str	r3, [sp, #40]	; 0x28
   14af4:	str	r4, [sp, #64]	; 0x40
   14af8:	str	r5, [sp, #56]	; 0x38
   14afc:	str	r4, [sp, #68]	; 0x44
   14b00:	str	r5, [sp, #72]	; 0x48
   14b04:	str	r4, [sp, #76]	; 0x4c
   14b08:	str	r5, [sp, #80]	; 0x50
   14b0c:	str	r4, [sp, #84]	; 0x54
   14b10:	str	r5, [sp, #88]	; 0x58
   14b14:	mvn	r7, #92	; 0x5c
   14b18:	mov	sl, #17
   14b1c:	b	13cd0 <__assert_fail@plt+0x2868>
   14b20:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14b24:	mov	r4, #0
   14b28:	mov	r5, #0
   14b2c:	mov	r1, #0
   14b30:	sub	r0, sl, #4
   14b34:	strd	r2, [r8, #-8]
   14b38:	sub	r3, r9, #112	; 0x70
   14b3c:	strd	r4, [sp, #48]	; 0x30
   14b40:	str	r0, [sp, #24]
   14b44:	str	r3, [sp, #96]	; 0x60
   14b48:	str	r1, [sp, #364]	; 0x16c
   14b4c:	str	r1, [sp, #40]	; 0x28
   14b50:	b	14af4 <__assert_fail@plt+0x368c>
   14b54:	sub	r3, r9, #272	; 0x110
   14b58:	mov	lr, r9
   14b5c:	ldrd	r4, [r3]
   14b60:	ldrd	r2, [r9, #-160]	; 0xffffff60
   14b64:	ldr	ip, [sp, #36]	; 0x24
   14b68:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   14b6c:	strd	r2, [sp, #152]	; 0x98
   14b70:	sub	r3, sl, #12
   14b74:	str	r3, [sp, #24]
   14b78:	ldr	r3, [lr], #-336	; 0xfffffeb0
   14b7c:	strd	r4, [ip, #72]	; 0x48
   14b80:	str	r3, [ip, #28]
   14b84:	ldrd	r2, [sp, #152]	; 0x98
   14b88:	str	lr, [sp, #96]	; 0x60
   14b8c:	strd	r0, [ip, #88]	; 0x58
   14b90:	strd	r2, [ip, #80]	; 0x50
   14b94:	mvn	r7, #92	; 0x5c
   14b98:	mov	sl, #7
   14b9c:	b	13cd0 <__assert_fail@plt+0x2868>
   14ba0:	mov	r1, r9
   14ba4:	sub	lr, sl, #8
   14ba8:	ldr	ip, [r1], #-224	; 0xffffff20
   14bac:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14bb0:	str	lr, [sp, #24]
   14bb4:	ldr	lr, [sp, #36]	; 0x24
   14bb8:	str	r1, [sp, #96]	; 0x60
   14bbc:	ldrd	r0, [r9, #-160]	; 0xffffff60
   14bc0:	strd	r2, [lr, #80]	; 0x50
   14bc4:	mov	r3, #0
   14bc8:	str	ip, [lr, #28]
   14bcc:	strd	r0, [lr, #72]	; 0x48
   14bd0:	str	r3, [lr, #88]	; 0x58
   14bd4:	str	r3, [lr, #92]	; 0x5c
   14bd8:	mvn	r7, #92	; 0x5c
   14bdc:	mov	sl, #7
   14be0:	b	13cd0 <__assert_fail@plt+0x2868>
   14be4:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   14be8:	b	14b24 <__assert_fail@plt+0x36bc>
   14bec:	ldr	lr, [sp, #36]	; 0x24
   14bf0:	ldrd	r4, [r9, #40]	; 0x28
   14bf4:	ldr	r1, [r9, #48]	; 0x30
   14bf8:	ldrd	r2, [lr, #136]	; 0x88
   14bfc:	ldr	r0, [lr, #144]	; 0x90
   14c00:	strd	r2, [sp, #24]
   14c04:	ldrd	r2, [lr, #128]	; 0x80
   14c08:	adds	r1, r0, r1
   14c0c:	movvs	ip, #1
   14c10:	strd	r2, [sp, #96]	; 0x60
   14c14:	ldrd	r2, [lr, #120]	; 0x78
   14c18:	movvc	ip, #0
   14c1c:	str	r1, [lr, #144]	; 0x90
   14c20:	strd	r2, [sp, #152]	; 0x98
   14c24:	ldrd	r2, [sp, #24]
   14c28:	adds	r0, r2, r4
   14c2c:	adcs	r1, r3, r5
   14c30:	ldrd	r4, [sp, #96]	; 0x60
   14c34:	strd	r0, [lr, #136]	; 0x88
   14c38:	ldrd	r0, [r9, #32]
   14c3c:	movvs	r7, #1
   14c40:	movvc	r7, #0
   14c44:	adds	r2, r4, r0
   14c48:	adcs	r3, r5, r1
   14c4c:	ldrd	r0, [lr, #112]	; 0x70
   14c50:	ldrd	r4, [sp, #152]	; 0x98
   14c54:	orr	ip, ip, r7
   14c58:	strd	r0, [sp, #24]
   14c5c:	ldrd	r0, [r9, #24]
   14c60:	movvs	r7, #1
   14c64:	movvc	r7, #0
   14c68:	strd	r2, [lr, #128]	; 0x80
   14c6c:	adds	r2, r4, r0
   14c70:	adcs	r3, r5, r1
   14c74:	ldrd	r4, [lr, #104]	; 0x68
   14c78:	ldrd	r0, [sp, #24]
   14c7c:	orr	ip, ip, r7
   14c80:	strd	r4, [sp, #96]	; 0x60
   14c84:	ldrd	r4, [r9, #16]
   14c88:	movvs	r7, #1
   14c8c:	movvc	r7, #0
   14c90:	strd	r2, [lr, #120]	; 0x78
   14c94:	adds	r2, r0, r4
   14c98:	adcs	r3, r1, r5
   14c9c:	ldrd	r4, [sp, #96]	; 0x60
   14ca0:	ldrd	r0, [r9, #8]
   14ca4:	orr	ip, ip, r7
   14ca8:	strd	r2, [lr, #112]	; 0x70
   14cac:	movvs	r7, #1
   14cb0:	movvc	r7, #0
   14cb4:	adds	r2, r4, r0
   14cb8:	adcs	r3, r5, r1
   14cbc:	ldrd	r0, [r9]
   14cc0:	ldrd	r4, [lr, #96]	; 0x60
   14cc4:	orr	r7, ip, r7
   14cc8:	movvs	ip, #1
   14ccc:	movvc	ip, #0
   14cd0:	adds	r4, r4, r0
   14cd4:	adcs	r5, r5, r1
   14cd8:	ldr	r1, [pc, #-2244]	; 1441c <__assert_fail@plt+0x2fb4>
   14cdc:	orrvc	r0, r7, ip
   14ce0:	movvs	r0, #1
   14ce4:	strd	r2, [sp, #24]
   14ce8:	ldrd	r2, [sp, #24]
   14cec:	cmp	r0, #0
   14cf0:	strd	r4, [lr, #96]	; 0x60
   14cf4:	strd	r2, [lr, #104]	; 0x68
   14cf8:	str	r1, [lr, #24]
   14cfc:	bne	13580 <__assert_fail@plt+0x2118>
   14d00:	mov	r3, #1
   14d04:	mov	r4, lr
   14d08:	strb	r3, [lr, #153]	; 0x99
   14d0c:	mov	r2, #5
   14d10:	ldr	r1, [pc, #-2296]	; 14420 <__assert_fail@plt+0x2fb8>
   14d14:	bl	111b0 <dcgettext@plt>
   14d18:	ldrb	r3, [r4, #181]	; 0xb5
   14d1c:	sub	r2, sl, #4
   14d20:	str	r2, [sp, #24]
   14d24:	cmp	r3, #0
   14d28:	sub	r2, r9, #112	; 0x70
   14d2c:	mov	r1, r4
   14d30:	str	r2, [sp, #96]	; 0x60
   14d34:	mvneq	r7, #92	; 0x5c
   14d38:	moveq	sl, #12
   14d3c:	beq	13cd0 <__assert_fail@plt+0x2868>
   14d40:	bl	12c88 <__assert_fail@plt+0x1820>
   14d44:	mvn	r7, #92	; 0x5c
   14d48:	mov	sl, #12
   14d4c:	b	13cd0 <__assert_fail@plt+0x2868>
   14d50:	ldr	lr, [sp, #36]	; 0x24
   14d54:	ldrd	r4, [r9, #40]	; 0x28
   14d58:	ldr	r1, [r9, #48]	; 0x30
   14d5c:	ldrd	r2, [lr, #136]	; 0x88
   14d60:	ldr	r0, [lr, #144]	; 0x90
   14d64:	strd	r2, [sp, #24]
   14d68:	ldrd	r2, [lr, #128]	; 0x80
   14d6c:	adds	r1, r0, r1
   14d70:	movvs	ip, #1
   14d74:	strd	r2, [sp, #96]	; 0x60
   14d78:	ldrd	r2, [lr, #120]	; 0x78
   14d7c:	movvc	ip, #0
   14d80:	str	r1, [lr, #144]	; 0x90
   14d84:	strd	r2, [sp, #152]	; 0x98
   14d88:	ldrd	r2, [sp, #24]
   14d8c:	adds	r0, r2, r4
   14d90:	adcs	r1, r3, r5
   14d94:	ldrd	r4, [sp, #96]	; 0x60
   14d98:	strd	r0, [lr, #136]	; 0x88
   14d9c:	ldrd	r0, [r9, #32]
   14da0:	movvs	r7, #1
   14da4:	movvc	r7, #0
   14da8:	adds	r2, r4, r0
   14dac:	adcs	r3, r5, r1
   14db0:	ldrd	r0, [lr, #112]	; 0x70
   14db4:	ldrd	r4, [sp, #152]	; 0x98
   14db8:	orr	ip, ip, r7
   14dbc:	strd	r0, [sp, #24]
   14dc0:	ldrd	r0, [r9, #24]
   14dc4:	movvs	r7, #1
   14dc8:	movvc	r7, #0
   14dcc:	strd	r2, [lr, #128]	; 0x80
   14dd0:	adds	r2, r4, r0
   14dd4:	adcs	r3, r5, r1
   14dd8:	ldrd	r4, [lr, #104]	; 0x68
   14ddc:	ldrd	r0, [sp, #24]
   14de0:	orr	ip, ip, r7
   14de4:	strd	r4, [sp, #96]	; 0x60
   14de8:	ldrd	r4, [r9, #16]
   14dec:	movvs	r7, #1
   14df0:	movvc	r7, #0
   14df4:	strd	r2, [lr, #120]	; 0x78
   14df8:	adds	r2, r0, r4
   14dfc:	adcs	r3, r1, r5
   14e00:	ldrd	r4, [sp, #96]	; 0x60
   14e04:	ldrd	r0, [r9, #8]
   14e08:	orr	ip, ip, r7
   14e0c:	strd	r2, [lr, #112]	; 0x70
   14e10:	movvs	r7, #1
   14e14:	movvc	r7, #0
   14e18:	adds	r2, r4, r0
   14e1c:	adcs	r3, r5, r1
   14e20:	ldrd	r0, [r9]
   14e24:	ldrd	r4, [lr, #96]	; 0x60
   14e28:	orr	r7, ip, r7
   14e2c:	movvs	ip, #1
   14e30:	movvc	ip, #0
   14e34:	adds	r4, r4, r0
   14e38:	adcs	r5, r5, r1
   14e3c:	strd	r2, [sp, #24]
   14e40:	orrvc	r0, r7, ip
   14e44:	movvs	r0, #1
   14e48:	ldr	r1, [r9, #-56]	; 0xffffffc8
   14e4c:	b	14ce8 <__assert_fail@plt+0x3880>
   14e50:	add	r3, r9, #8
   14e54:	sub	r2, sl, #2
   14e58:	str	r2, [sp, #24]
   14e5c:	ldm	r3, {r0, r1, r2, r3}
   14e60:	sub	ip, r9, #56	; 0x38
   14e64:	str	ip, [sp, #96]	; 0x60
   14e68:	mvn	r7, #92	; 0x5c
   14e6c:	stm	sp, {r0, r1, r2, r3}
   14e70:	mov	sl, #23
   14e74:	ldr	r0, [sp, #36]	; 0x24
   14e78:	ldm	r9, {r2, r3}
   14e7c:	bl	12730 <__assert_fail@plt+0x12c8>
   14e80:	b	13cd0 <__assert_fail@plt+0x2868>
   14e84:	ldr	r3, [r9, #8]
   14e88:	ldr	r2, [r9, #12]
   14e8c:	adds	r1, r3, #-2147483648	; 0x80000000
   14e90:	adc	r2, r2, #0
   14e94:	str	r1, [sp, #248]	; 0xf8
   14e98:	str	r2, [sp, #252]	; 0xfc
   14e9c:	ldrd	r4, [sp, #248]	; 0xf8
   14ea0:	mov	r1, #0
   14ea4:	mvn	r0, #0
   14ea8:	cmp	r5, r1
   14eac:	cmpeq	r4, r0
   14eb0:	bhi	13580 <__assert_fail@plt+0x2118>
   14eb4:	str	r3, [sp, #312]	; 0x138
   14eb8:	sub	r3, r9, #56	; 0x38
   14ebc:	mov	r2, #0
   14ec0:	str	r3, [sp, #96]	; 0x60
   14ec4:	sub	r3, sl, #2
   14ec8:	str	r3, [sp, #24]
   14ecc:	str	r2, [sp, #316]	; 0x13c
   14ed0:	mvn	r7, #91	; 0x5b
   14ed4:	mov	sl, #22
   14ed8:	b	13cd0 <__assert_fail@plt+0x2868>
   14edc:	ldr	r3, [r9, #8]
   14ee0:	ldr	r2, [r9, #12]
   14ee4:	adds	r1, r3, #-2147483648	; 0x80000000
   14ee8:	adc	r2, r2, #0
   14eec:	str	r1, [sp, #240]	; 0xf0
   14ef0:	str	r2, [sp, #244]	; 0xf4
   14ef4:	ldrd	r4, [sp, #240]	; 0xf0
   14ef8:	mov	r1, #0
   14efc:	mvn	r0, #0
   14f00:	cmp	r5, r1
   14f04:	cmpeq	r4, r0
   14f08:	bhi	13580 <__assert_fail@plt+0x2118>
   14f0c:	str	r3, [sp, #312]	; 0x138
   14f10:	sub	r3, r9, #56	; 0x38
   14f14:	mov	r2, #0
   14f18:	str	r3, [sp, #96]	; 0x60
   14f1c:	sub	r3, sl, #2
   14f20:	str	r3, [sp, #24]
   14f24:	str	r2, [sp, #316]	; 0x13c
   14f28:	mvn	r7, #92	; 0x5c
   14f2c:	mov	sl, #21
   14f30:	b	13cd0 <__assert_fail@plt+0x2868>
   14f34:	mov	r2, #56	; 0x38
   14f38:	mov	r1, #0
   14f3c:	ldr	r0, [sp, #92]	; 0x5c
   14f40:	bl	11360 <memset@plt>
   14f44:	mov	r1, r9
   14f48:	mov	r0, #0
   14f4c:	ldrd	r2, [r1], #-56	; 0xffffffc8
   14f50:	sub	ip, sl, #2
   14f54:	str	ip, [sp, #24]
   14f58:	str	r1, [sp, #96]	; 0x60
   14f5c:	mov	r1, #0
   14f60:	strd	r2, [sp, #76]	; 0x4c
   14f64:	mov	r3, #0
   14f68:	strd	r0, [sp, #48]	; 0x30
   14f6c:	str	r0, [sp, #64]	; 0x40
   14f70:	str	r1, [sp, #56]	; 0x38
   14f74:	str	r0, [sp, #68]	; 0x44
   14f78:	str	r1, [sp, #72]	; 0x48
   14f7c:	str	r0, [sp, #84]	; 0x54
   14f80:	str	r1, [sp, #88]	; 0x58
   14f84:	mvn	r7, #92	; 0x5c
   14f88:	mov	sl, #19
   14f8c:	str	r3, [sp, #40]	; 0x28
   14f90:	b	13cd0 <__assert_fail@plt+0x2868>
   14f94:	mov	r1, #0
   14f98:	sub	r3, sl, #4
   14f9c:	mov	r2, #56	; 0x38
   14fa0:	ldr	r0, [sp, #92]	; 0x5c
   14fa4:	mov	r4, r1
   14fa8:	str	r3, [sp, #24]
   14fac:	str	r1, [sp, #64]	; 0x40
   14fb0:	str	r1, [sp, #56]	; 0x38
   14fb4:	bl	11360 <memset@plt>
   14fb8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14fbc:	str	r4, [sp, #68]	; 0x44
   14fc0:	str	r4, [sp, #76]	; 0x4c
   14fc4:	strd	r2, [sp, #48]	; 0x30
   14fc8:	sub	r3, r9, #112	; 0x70
   14fcc:	str	r4, [sp, #84]	; 0x54
   14fd0:	str	r4, [sp, #72]	; 0x48
   14fd4:	str	r4, [sp, #80]	; 0x50
   14fd8:	str	r4, [sp, #88]	; 0x58
   14fdc:	str	r3, [sp, #96]	; 0x60
   14fe0:	mov	r7, #60	; 0x3c
   14fe4:	mov	sl, #18
   14fe8:	str	r4, [sp, #40]	; 0x28
   14fec:	b	13cd0 <__assert_fail@plt+0x2868>
   14ff0:	mov	r4, #0
   14ff4:	mov	r5, #0
   14ff8:	sub	r3, sl, #4
   14ffc:	mov	r2, #56	; 0x38
   15000:	mov	r1, #0
   15004:	ldr	r0, [sp, #92]	; 0x5c
   15008:	str	r3, [sp, #24]
   1500c:	strd	r4, [sp, #48]	; 0x30
   15010:	bl	11360 <memset@plt>
   15014:	ldr	r3, [r9, #-48]	; 0xffffffd0
   15018:	str	r4, [sp, #68]	; 0x44
   1501c:	str	r3, [sp, #64]	; 0x40
   15020:	ldr	r3, [r9, #-44]	; 0xffffffd4
   15024:	str	r5, [sp, #72]	; 0x48
   15028:	str	r4, [sp, #76]	; 0x4c
   1502c:	str	r5, [sp, #80]	; 0x50
   15030:	str	r4, [sp, #84]	; 0x54
   15034:	str	r5, [sp, #88]	; 0x58
   15038:	str	r3, [sp, #56]	; 0x38
   1503c:	sub	r3, r9, #112	; 0x70
   15040:	str	r3, [sp, #96]	; 0x60
   15044:	mov	r3, #0
   15048:	mov	r7, #60	; 0x3c
   1504c:	mov	sl, #18
   15050:	str	r3, [sp, #40]	; 0x28
   15054:	b	13cd0 <__assert_fail@plt+0x2868>
   15058:	mov	r4, #0
   1505c:	mov	r5, #0
   15060:	sub	r3, sl, #4
   15064:	mov	r2, #56	; 0x38
   15068:	mov	r1, #0
   1506c:	ldr	r0, [sp, #92]	; 0x5c
   15070:	str	r3, [sp, #24]
   15074:	strd	r4, [sp, #48]	; 0x30
   15078:	bl	11360 <memset@plt>
   1507c:	ldr	r3, [r9, #-48]	; 0xffffffd0
   15080:	str	r4, [sp, #64]	; 0x40
   15084:	str	r3, [sp, #68]	; 0x44
   15088:	ldr	r3, [r9, #-44]	; 0xffffffd4
   1508c:	str	r5, [sp, #56]	; 0x38
   15090:	str	r4, [sp, #76]	; 0x4c
   15094:	str	r5, [sp, #80]	; 0x50
   15098:	str	r4, [sp, #84]	; 0x54
   1509c:	str	r5, [sp, #88]	; 0x58
   150a0:	str	r3, [sp, #72]	; 0x48
   150a4:	b	1503c <__assert_fail@plt+0x3bd4>
   150a8:	mov	r2, #56	; 0x38
   150ac:	mov	r1, #0
   150b0:	ldr	r0, [sp, #92]	; 0x5c
   150b4:	bl	11360 <memset@plt>
   150b8:	ldr	r0, [r9, #-48]	; 0xffffffd0
   150bc:	ldr	r2, [r9, #-44]	; 0xffffffd4
   150c0:	ldr	r3, [r9]
   150c4:	mov	r1, #0
   150c8:	cmp	r2, r0, asr #31
   150cc:	str	r1, [sp, #40]	; 0x28
   150d0:	ldr	ip, [r9, #4]
   150d4:	asr	r1, r3, #31
   150d8:	bne	15e98 <__assert_fail@plt+0x4a30>
   150dc:	cmp	r1, ip
   150e0:	bne	15e28 <__assert_fail@plt+0x49c0>
   150e4:	smull	r2, r3, r0, r3
   150e8:	strd	r2, [sp, #144]	; 0x90
   150ec:	ldrd	r0, [sp, #144]	; 0x90
   150f0:	ldr	r3, [sp, #40]	; 0x28
   150f4:	cmp	r3, #0
   150f8:	str	r0, [sp, #76]	; 0x4c
   150fc:	str	r1, [sp, #80]	; 0x50
   15100:	bne	13580 <__assert_fail@plt+0x2118>
   15104:	mov	r0, #0
   15108:	mov	r1, #0
   1510c:	sub	r2, r9, #112	; 0x70
   15110:	str	r2, [sp, #96]	; 0x60
   15114:	sub	r2, sl, #4
   15118:	strd	r0, [sp, #48]	; 0x30
   1511c:	str	r2, [sp, #24]
   15120:	str	r0, [sp, #64]	; 0x40
   15124:	str	r1, [sp, #56]	; 0x38
   15128:	str	r0, [sp, #68]	; 0x44
   1512c:	str	r1, [sp, #72]	; 0x48
   15130:	str	r0, [sp, #84]	; 0x54
   15134:	str	r1, [sp, #88]	; 0x58
   15138:	mov	r7, #60	; 0x3c
   1513c:	mov	sl, #18
   15140:	b	13cd0 <__assert_fail@plt+0x2868>
   15144:	mov	r4, #0
   15148:	mov	r5, #0
   1514c:	sub	r3, sl, #4
   15150:	mov	r2, #56	; 0x38
   15154:	mov	r1, #0
   15158:	ldr	r0, [sp, #92]	; 0x5c
   1515c:	str	r3, [sp, #24]
   15160:	strd	r4, [sp, #48]	; 0x30
   15164:	bl	11360 <memset@plt>
   15168:	ldr	r3, [r9, #-48]	; 0xffffffd0
   1516c:	str	r4, [sp, #64]	; 0x40
   15170:	str	r3, [sp, #84]	; 0x54
   15174:	ldr	r3, [r9, #-44]	; 0xffffffd4
   15178:	str	r5, [sp, #56]	; 0x38
   1517c:	str	r4, [sp, #68]	; 0x44
   15180:	str	r5, [sp, #72]	; 0x48
   15184:	str	r4, [sp, #76]	; 0x4c
   15188:	str	r5, [sp, #80]	; 0x50
   1518c:	str	r3, [sp, #88]	; 0x58
   15190:	b	1503c <__assert_fail@plt+0x3bd4>
   15194:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   15198:	mov	r4, #0
   1519c:	mov	r5, #0
   151a0:	mov	r1, #0
   151a4:	sub	r0, sl, #4
   151a8:	strd	r2, [r8, #-8]
   151ac:	sub	r3, r9, #112	; 0x70
   151b0:	strd	r4, [sp, #48]	; 0x30
   151b4:	str	r0, [sp, #24]
   151b8:	str	r3, [sp, #96]	; 0x60
   151bc:	str	r1, [sp, #364]	; 0x16c
   151c0:	str	r1, [sp, #40]	; 0x28
   151c4:	str	r4, [sp, #64]	; 0x40
   151c8:	str	r5, [sp, #56]	; 0x38
   151cc:	str	r4, [sp, #68]	; 0x44
   151d0:	str	r5, [sp, #72]	; 0x48
   151d4:	str	r4, [sp, #76]	; 0x4c
   151d8:	str	r5, [sp, #80]	; 0x50
   151dc:	str	r4, [sp, #84]	; 0x54
   151e0:	str	r5, [sp, #88]	; 0x58
   151e4:	mov	r7, #60	; 0x3c
   151e8:	mov	sl, #18
   151ec:	b	13cd0 <__assert_fail@plt+0x2868>
   151f0:	ldr	r2, [sp, #36]	; 0x24
   151f4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   151f8:	mov	r1, #0
   151fc:	mov	r0, #0
   15200:	str	r3, [r2, #16]
   15204:	strd	r0, [r2, #8]
   15208:	sub	r3, r9, #112	; 0x70
   1520c:	sub	r1, sl, #4
   15210:	str	r1, [sp, #24]
   15214:	str	r3, [sp, #96]	; 0x60
   15218:	mvn	r7, #92	; 0x5c
   1521c:	mov	sl, #13
   15220:	b	13cd0 <__assert_fail@plt+0x2868>
   15224:	ldr	r1, [sp, #36]	; 0x24
   15228:	mov	r2, #0
   1522c:	mov	r3, #0
   15230:	mvn	r7, #92	; 0x5c
   15234:	strd	r2, [r1, #8]
   15238:	mov	r2, r9
   1523c:	ldr	r3, [r2], #-56	; 0xffffffc8
   15240:	str	r2, [sp, #96]	; 0x60
   15244:	sub	r2, sl, #2
   15248:	str	r2, [sp, #24]
   1524c:	str	r3, [r1, #16]
   15250:	mov	sl, #13
   15254:	b	13cd0 <__assert_fail@plt+0x2868>
   15258:	sub	r2, sl, #4
   1525c:	ldr	r3, [r9, #-56]	; 0xffffffc8
   15260:	str	r2, [sp, #24]
   15264:	ldr	r2, [sp, #36]	; 0x24
   15268:	add	r3, r3, #3600	; 0xe10
   1526c:	mvn	r7, #92	; 0x5c
   15270:	str	r3, [r2, #24]
   15274:	sub	r3, r9, #112	; 0x70
   15278:	str	r3, [sp, #96]	; 0x60
   1527c:	mov	sl, #12
   15280:	b	13cd0 <__assert_fail@plt+0x2868>
   15284:	sub	r3, sl, #2
   15288:	str	r3, [sp, #24]
   1528c:	ldr	r2, [sp, #36]	; 0x24
   15290:	ldr	r3, [r9], #-56	; 0xffffffc8
   15294:	mvn	r7, #92	; 0x5c
   15298:	add	r3, r3, #3600	; 0xe10
   1529c:	str	r9, [sp, #96]	; 0x60
   152a0:	str	r3, [r2, #24]
   152a4:	mov	sl, #12
   152a8:	b	13cd0 <__assert_fail@plt+0x2868>
   152ac:	sub	r3, r9, #56	; 0x38
   152b0:	mov	r1, #0
   152b4:	mov	r2, #56	; 0x38
   152b8:	str	r3, [sp, #96]	; 0x60
   152bc:	ldr	r0, [sp, #92]	; 0x5c
   152c0:	sub	r3, sl, #2
   152c4:	mov	r4, r1
   152c8:	str	r3, [sp, #24]
   152cc:	str	r1, [sp, #64]	; 0x40
   152d0:	str	r1, [sp, #56]	; 0x38
   152d4:	bl	11360 <memset@plt>
   152d8:	mov	r2, #1
   152dc:	mov	r3, #0
   152e0:	str	r4, [sp, #68]	; 0x44
   152e4:	str	r4, [sp, #76]	; 0x4c
   152e8:	str	r4, [sp, #84]	; 0x54
   152ec:	str	r4, [sp, #72]	; 0x48
   152f0:	str	r4, [sp, #80]	; 0x50
   152f4:	str	r4, [sp, #88]	; 0x58
   152f8:	mvn	r7, #92	; 0x5c
   152fc:	mov	sl, #17
   15300:	str	r4, [sp, #40]	; 0x28
   15304:	strd	r2, [sp, #48]	; 0x30
   15308:	b	13cd0 <__assert_fail@plt+0x2868>
   1530c:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   15310:	mov	r1, r9
   15314:	mov	r0, r1
   15318:	mvn	r7, #92	; 0x5c
   1531c:	ldr	r1, [r0], #-112	; 0xffffff90
   15320:	str	r0, [sp, #96]	; 0x60
   15324:	sub	r0, sl, #4
   15328:	str	r0, [sp, #24]
   1532c:	ldr	r0, [sp, #36]	; 0x24
   15330:	mov	sl, #13
   15334:	str	r1, [r0, #16]
   15338:	mov	r1, #1
   1533c:	strd	r2, [r0, #8]
   15340:	strb	r1, [r0, #188]	; 0xbc
   15344:	b	13cd0 <__assert_fail@plt+0x2868>
   15348:	ldr	r3, [r9, #-40]	; 0xffffffd8
   1534c:	ldrd	r0, [r9]
   15350:	cmp	r3, #2
   15354:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   15358:	strd	r0, [sp, #96]	; 0x60
   1535c:	bgt	15bd8 <__assert_fail@plt+0x4770>
   15360:	cmp	r0, #0
   15364:	sbcs	r3, r1, #0
   15368:	blt	15dcc <__assert_fail@plt+0x4964>
   1536c:	cmp	r5, r4, asr #31
   15370:	mov	lr, #0
   15374:	bne	1618c <__assert_fail@plt+0x4d24>
   15378:	mov	r3, #60	; 0x3c
   1537c:	smull	r4, r5, r4, r3
   15380:	mov	r2, r4
   15384:	mov	r3, r5
   15388:	ldrb	ip, [r9, #-56]	; 0xffffffc8
   1538c:	mov	r1, r3
   15390:	ldrd	r4, [sp, #96]	; 0x60
   15394:	cmp	ip, #0
   15398:	beq	15d94 <__assert_fail@plt+0x492c>
   1539c:	subs	r2, r2, r4
   153a0:	sbcs	r3, r3, r5
   153a4:	mov	r1, #0
   153a8:	mov	r0, r2
   153ac:	movvs	r1, #1
   153b0:	mov	r5, r3
   153b4:	orrs	r3, lr, r1
   153b8:	bne	13580 <__assert_fail@plt+0x2118>
   153bc:	adds	r3, r0, #1440	; 0x5a0
   153c0:	str	r3, [sp, #232]	; 0xe8
   153c4:	adc	r3, r5, #0
   153c8:	str	r3, [sp, #236]	; 0xec
   153cc:	ldrd	r2, [sp, #232]	; 0xe8
   153d0:	cmp	r3, #0
   153d4:	cmpeq	r2, #2880	; 0xb40
   153d8:	bhi	13580 <__assert_fail@plt+0x2118>
   153dc:	rsb	r2, r0, r0, lsl #4
   153e0:	ldrd	r4, [r9, #-112]	; 0xffffff90
   153e4:	lsl	r2, r2, #2
   153e8:	adds	r0, r2, r4
   153ec:	asr	r3, r2, #31
   153f0:	adcs	r1, r3, r5
   153f4:	asr	r3, r0, #31
   153f8:	movvs	ip, #1
   153fc:	movvc	ip, #0
   15400:	cmp	r1, r3
   15404:	cmpeq	r0, r0
   15408:	ldr	r3, [sp, #36]	; 0x24
   1540c:	movne	ip, #1
   15410:	cmp	ip, #0
   15414:	str	r0, [r3, #24]
   15418:	bne	13580 <__assert_fail@plt+0x2118>
   1541c:	sub	r3, r9, #168	; 0xa8
   15420:	str	r3, [sp, #96]	; 0x60
   15424:	sub	r3, sl, #6
   15428:	str	r3, [sp, #24]
   1542c:	mvn	r7, #92	; 0x5c
   15430:	mov	sl, #12
   15434:	b	13cd0 <__assert_fail@plt+0x2868>
   15438:	ldr	r4, [sp, #36]	; 0x24
   1543c:	ldr	r1, [pc, #4076]	; 16430 <__assert_fail@plt+0x4fc8>
   15440:	mov	r2, #5
   15444:	ldr	r3, [r4, #172]	; 0xac
   15448:	mov	r0, #0
   1544c:	add	r3, r3, #1
   15450:	str	r3, [r4, #172]	; 0xac
   15454:	bl	111b0 <dcgettext@plt>
   15458:	mov	r1, r4
   1545c:	b	149e8 <__assert_fail@plt+0x3580>
   15460:	ldr	r4, [sp, #36]	; 0x24
   15464:	ldr	r1, [pc, #4040]	; 16434 <__assert_fail@plt+0x4fcc>
   15468:	mov	r0, #0
   1546c:	ldr	r2, [r4, #172]	; 0xac
   15470:	ldr	r3, [r4, #156]	; 0x9c
   15474:	add	r2, r2, #1
   15478:	add	r3, r3, #1
   1547c:	str	r2, [r4, #172]	; 0xac
   15480:	str	r3, [r4, #156]	; 0x9c
   15484:	mov	r2, #5
   15488:	bl	111b0 <dcgettext@plt>
   1548c:	mov	r1, r4
   15490:	b	149e8 <__assert_fail@plt+0x3580>
   15494:	mvn	r2, #0
   15498:	mvn	r3, #0
   1549c:	str	sl, [sp, #24]
   154a0:	str	r9, [sp, #96]	; 0x60
   154a4:	strd	r2, [r8, #-8]
   154a8:	mov	r7, #43	; 0x2b
   154ac:	mov	sl, #25
   154b0:	b	13cd0 <__assert_fail@plt+0x2868>
   154b4:	ldr	ip, [sp, #36]	; 0x24
   154b8:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   154bc:	ldr	r3, [r9]
   154c0:	ldrd	r4, [r9, #-16]
   154c4:	strd	r0, [sp, #24]
   154c8:	ldrd	r0, [ip, #136]	; 0x88
   154cc:	cmp	r3, #0
   154d0:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   154d4:	strd	r0, [sp, #176]	; 0xb0
   154d8:	ldrd	r0, [ip, #128]	; 0x80
   154dc:	strd	r2, [sp, #96]	; 0x60
   154e0:	ldrd	r2, [r9, #-40]	; 0xffffffd8
   154e4:	strd	r0, [sp, #184]	; 0xb8
   154e8:	ldrd	r0, [ip, #120]	; 0x78
   154ec:	strd	r2, [sp, #152]	; 0x98
   154f0:	ldrd	r2, [r9, #-32]	; 0xffffffe0
   154f4:	strd	r0, [sp, #192]	; 0xc0
   154f8:	ldrd	r0, [ip, #112]	; 0x70
   154fc:	strd	r2, [sp, #160]	; 0xa0
   15500:	ldrd	r2, [r9, #-24]	; 0xffffffe8
   15504:	strd	r0, [sp, #200]	; 0xc8
   15508:	ldrd	r0, [ip, #104]	; 0x68
   1550c:	strd	r2, [sp, #168]	; 0xa8
   15510:	ldr	r2, [r9, #-8]
   15514:	strd	r0, [sp, #208]	; 0xd0
   15518:	ldrd	r0, [ip, #96]	; 0x60
   1551c:	ldr	r3, [ip, #144]	; 0x90
   15520:	strd	r0, [sp, #216]	; 0xd8
   15524:	blt	15c4c <__assert_fail@plt+0x47e4>
   15528:	adds	ip, r3, r2
   1552c:	ldrd	r2, [sp, #176]	; 0xb0
   15530:	movvs	lr, #1
   15534:	movvc	lr, #0
   15538:	adds	r0, r2, r4
   1553c:	adcs	r1, r3, r5
   15540:	ldrd	r4, [sp, #184]	; 0xb8
   15544:	strd	r0, [sp, #176]	; 0xb0
   15548:	ldrd	r0, [sp, #168]	; 0xa8
   1554c:	movvs	r7, #1
   15550:	movvc	r7, #0
   15554:	adds	r2, r4, r0
   15558:	adcs	r3, r5, r1
   1555c:	ldrd	r0, [sp, #192]	; 0xc0
   15560:	strd	r2, [sp, #168]	; 0xa8
   15564:	ldrd	r2, [sp, #160]	; 0xa0
   15568:	orr	lr, lr, r7
   1556c:	movvs	r7, #1
   15570:	movvc	r7, #0
   15574:	adds	r4, r0, r2
   15578:	adcs	r5, r1, r3
   1557c:	ldrd	r2, [sp, #152]	; 0x98
   15580:	strd	r4, [sp, #160]	; 0xa0
   15584:	ldrd	r4, [sp, #200]	; 0xc8
   15588:	orr	lr, lr, r7
   1558c:	movvs	r7, #1
   15590:	movvc	r7, #0
   15594:	adds	r0, r4, r2
   15598:	adcs	r1, r5, r3
   1559c:	ldrd	r2, [sp, #96]	; 0x60
   155a0:	strd	r0, [sp, #152]	; 0x98
   155a4:	ldrd	r0, [sp, #208]	; 0xd0
   155a8:	orr	lr, lr, r7
   155ac:	movvs	r7, #1
   155b0:	movvc	r7, #0
   155b4:	adds	r4, r0, r2
   155b8:	adcs	r5, r1, r3
   155bc:	ldrd	r2, [sp, #24]
   155c0:	strd	r4, [sp, #96]	; 0x60
   155c4:	ldrd	r4, [sp, #216]	; 0xd8
   155c8:	orr	lr, lr, r7
   155cc:	movvs	r7, #1
   155d0:	movvc	r7, #0
   155d4:	adds	r0, r4, r2
   155d8:	adcs	r1, r5, r3
   155dc:	ldr	r3, [sp, #36]	; 0x24
   155e0:	strd	r0, [sp, #24]
   155e4:	ldrd	r0, [sp, #176]	; 0xb0
   155e8:	ldrd	r4, [sp, #96]	; 0x60
   155ec:	orrvc	r2, lr, r7
   155f0:	movvs	r2, #1
   155f4:	strd	r0, [r3, #136]	; 0x88
   155f8:	ldrd	r0, [sp, #168]	; 0xa8
   155fc:	str	ip, [r3, #144]	; 0x90
   15600:	strd	r4, [r3, #104]	; 0x68
   15604:	strd	r0, [r3, #128]	; 0x80
   15608:	ldrd	r0, [sp, #160]	; 0xa0
   1560c:	strd	r0, [r3, #120]	; 0x78
   15610:	ldrd	r0, [sp, #152]	; 0x98
   15614:	strd	r0, [r3, #112]	; 0x70
   15618:	ldrd	r0, [sp, #24]
   1561c:	strd	r0, [r3, #96]	; 0x60
   15620:	cmp	r2, #0
   15624:	bne	13580 <__assert_fail@plt+0x2118>
   15628:	sub	r2, r9, #112	; 0x70
   1562c:	str	r2, [sp, #96]	; 0x60
   15630:	sub	r2, sl, #4
   15634:	str	r2, [sp, #24]
   15638:	ldr	r2, [sp, #36]	; 0x24
   1563c:	mov	r3, #1
   15640:	mvn	r7, #92	; 0x5c
   15644:	strb	r3, [r2, #153]	; 0x99
   15648:	mov	sl, #16
   1564c:	b	13cd0 <__assert_fail@plt+0x2868>
   15650:	ldr	r3, [sp, #36]	; 0x24
   15654:	sub	r7, r9, #112	; 0x70
   15658:	add	lr, r3, #32
   1565c:	ldm	r7!, {r0, r1, r2, r3}
   15660:	mov	ip, #0
   15664:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   15668:	stmia	lr!, {r0, r1, r2, r3}
   1566c:	rsbs	r4, r4, #0
   15670:	ldm	r7, {r0, r1}
   15674:	rscs	r5, r5, #0
   15678:	ldr	r3, [sp, #36]	; 0x24
   1567c:	movvs	ip, #1
   15680:	stm	lr, {r0, r1}
   15684:	subs	r1, ip, #0
   15688:	strd	r4, [r3, #56]	; 0x38
   1568c:	bne	13580 <__assert_fail@plt+0x2118>
   15690:	ldrd	r2, [r9, #8]
   15694:	rsbs	r2, r2, #0
   15698:	rscs	r3, r3, #0
   1569c:	movvs	r1, #1
   156a0:	cmp	r1, #0
   156a4:	ldr	r1, [sp, #36]	; 0x24
   156a8:	strd	r2, [r1, #64]	; 0x40
   156ac:	bne	13580 <__assert_fail@plt+0x2118>
   156b0:	sub	r3, r9, #168	; 0xa8
   156b4:	str	r3, [sp, #96]	; 0x60
   156b8:	sub	r3, sl, #6
   156bc:	str	r3, [sp, #24]
   156c0:	mvn	r7, #92	; 0x5c
   156c4:	mov	sl, #15
   156c8:	b	13cd0 <__assert_fail@plt+0x2868>
   156cc:	ldrd	r4, [r9, #-104]	; 0xffffff98
   156d0:	ldr	r7, [sp, #36]	; 0x24
   156d4:	mov	lr, r9
   156d8:	add	ip, r7, #32
   156dc:	ldm	lr!, {r0, r1, r2, r3}
   156e0:	sub	sl, sl, #6
   156e4:	strd	r4, [r7, #64]	; 0x40
   156e8:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   156ec:	sub	r9, r9, #168	; 0xa8
   156f0:	str	sl, [sp, #24]
   156f4:	str	r9, [sp, #96]	; 0x60
   156f8:	strd	r4, [r7, #56]	; 0x38
   156fc:	stmia	ip!, {r0, r1, r2, r3}
   15700:	mvn	r7, #92	; 0x5c
   15704:	ldm	lr, {r0, r1}
   15708:	mov	sl, #14
   1570c:	stm	ip, {r0, r1}
   15710:	b	13cd0 <__assert_fail@plt+0x2868>
   15714:	mov	ip, r9
   15718:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   1571c:	ldrd	r0, [ip], #-112	; 0xffffff90
   15720:	mvn	r7, #92	; 0x5c
   15724:	str	ip, [sp, #96]	; 0x60
   15728:	sub	ip, sl, #4
   1572c:	str	ip, [sp, #24]
   15730:	ldr	ip, [sp, #36]	; 0x24
   15734:	mov	sl, #14
   15738:	strd	r2, [ip, #64]	; 0x40
   1573c:	strd	r0, [ip, #56]	; 0x38
   15740:	b	13cd0 <__assert_fail@plt+0x2868>
   15744:	ldrd	r4, [r9, #-168]	; 0xffffff58
   15748:	ldr	r7, [sp, #36]	; 0x24
   1574c:	mov	lr, r9
   15750:	sub	sl, sl, #8
   15754:	strd	r4, [r7, #56]	; 0x38
   15758:	ldrd	r4, [r9, #-104]	; 0xffffff98
   1575c:	sub	r9, r9, #224	; 0xe0
   15760:	ldm	lr!, {r0, r1, r2, r3}
   15764:	add	ip, r7, #32
   15768:	str	sl, [sp, #24]
   1576c:	str	r9, [sp, #96]	; 0x60
   15770:	strd	r4, [r7, #64]	; 0x40
   15774:	b	156fc <__assert_fail@plt+0x4294>
   15778:	sub	ip, sl, #4
   1577c:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   15780:	str	ip, [sp, #24]
   15784:	ldr	ip, [sp, #36]	; 0x24
   15788:	ldrd	r0, [r9, #8]
   1578c:	mvn	r7, #92	; 0x5c
   15790:	strd	r2, [ip, #56]	; 0x38
   15794:	sub	r3, r9, #112	; 0x70
   15798:	strd	r0, [ip, #64]	; 0x40
   1579c:	str	r3, [sp, #96]	; 0x60
   157a0:	mov	sl, #14
   157a4:	b	13cd0 <__assert_fail@plt+0x2868>
   157a8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   157ac:	ldr	r0, [sp, #36]	; 0x24
   157b0:	ldrd	r4, [r9, #-112]	; 0xffffff90
   157b4:	rsbs	r2, r2, #0
   157b8:	rscs	r3, r3, #0
   157bc:	strd	r4, [r0, #56]	; 0x38
   157c0:	ldr	r0, [sp, #36]	; 0x24
   157c4:	mov	r1, #0
   157c8:	movvs	r1, #1
   157cc:	cmp	r1, #0
   157d0:	strd	r2, [r0, #64]	; 0x40
   157d4:	bne	13580 <__assert_fail@plt+0x2118>
   157d8:	ldrd	r2, [r9, #8]
   157dc:	rsbs	r2, r2, #0
   157e0:	rscs	r3, r3, #0
   157e4:	bvs	15844 <__assert_fail@plt+0x43dc>
   157e8:	cmp	r1, #0
   157ec:	ldr	r1, [sp, #36]	; 0x24
   157f0:	strd	r2, [r1, #40]	; 0x28
   157f4:	bne	13580 <__assert_fail@plt+0x2118>
   157f8:	ldr	r3, [r9, #16]
   157fc:	sub	r2, sl, #6
   15800:	str	r3, [r1, #48]	; 0x30
   15804:	sub	r3, r9, #168	; 0xa8
   15808:	str	r2, [sp, #24]
   1580c:	str	r3, [sp, #96]	; 0x60
   15810:	mvn	r7, #92	; 0x5c
   15814:	mov	sl, #14
   15818:	b	13cd0 <__assert_fail@plt+0x2868>
   1581c:	ldrd	r2, [r9, #8]
   15820:	ldrd	r0, [r9, #-104]	; 0xffffff98
   15824:	ldr	ip, [sp, #36]	; 0x24
   15828:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   1582c:	rsbs	r2, r2, #0
   15830:	rscs	r3, r3, #0
   15834:	strd	r0, [ip, #64]	; 0x40
   15838:	strd	r4, [ip, #56]	; 0x38
   1583c:	mov	r1, #0
   15840:	bvc	157e8 <__assert_fail@plt+0x4380>
   15844:	mov	r1, #1
   15848:	b	157e8 <__assert_fail@plt+0x4380>
   1584c:	ldr	r4, [r9, #-208]	; 0xffffff30
   15850:	ldr	r3, [sp, #36]	; 0x24
   15854:	cmp	r4, #3
   15858:	ldrb	r3, [r3, #181]	; 0xb5
   1585c:	ble	15b78 <__assert_fail@plt+0x4710>
   15860:	cmp	r3, #0
   15864:	bne	15e04 <__assert_fail@plt+0x499c>
   15868:	sub	lr, r9, #224	; 0xe0
   1586c:	ldr	ip, [sp, #36]	; 0x24
   15870:	ldm	lr!, {r0, r1, r2, r3}
   15874:	add	ip, ip, #32
   15878:	sub	r4, sl, #10
   1587c:	str	r4, [sp, #24]
   15880:	stmia	ip!, {r0, r1, r2, r3}
   15884:	sub	r3, r9, #280	; 0x118
   15888:	ldm	lr, {r0, r1}
   1588c:	ldrd	r4, [r9, #-104]	; 0xffffff98
   15890:	str	r3, [sp, #96]	; 0x60
   15894:	stm	ip, {r0, r1}
   15898:	ldrd	r2, [r9, #8]
   1589c:	ldr	ip, [sp, #36]	; 0x24
   158a0:	mov	r0, r4
   158a4:	mov	r1, r5
   158a8:	mvn	r7, #92	; 0x5c
   158ac:	strd	r0, [ip, #56]	; 0x38
   158b0:	strd	r2, [ip, #64]	; 0x40
   158b4:	mov	sl, #14
   158b8:	b	13cd0 <__assert_fail@plt+0x2868>
   158bc:	sub	ip, sl, #6
   158c0:	ldrd	r2, [r9, #-104]	; 0xffffff98
   158c4:	str	ip, [sp, #24]
   158c8:	ldr	ip, [sp, #36]	; 0x24
   158cc:	ldrd	r0, [r9, #8]
   158d0:	mvn	r7, #92	; 0x5c
   158d4:	strd	r2, [ip, #56]	; 0x38
   158d8:	sub	r3, r9, #168	; 0xa8
   158dc:	strd	r0, [ip, #64]	; 0x40
   158e0:	str	r3, [sp, #96]	; 0x60
   158e4:	mov	sl, #14
   158e8:	b	13cd0 <__assert_fail@plt+0x2868>
   158ec:	mov	r1, r9
   158f0:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   158f4:	b	15314 <__assert_fail@plt+0x3eac>
   158f8:	ldrd	r2, [r9, #8]
   158fc:	sub	r1, sl, #4
   15900:	str	r1, [sp, #24]
   15904:	sub	r1, r9, #112	; 0x70
   15908:	str	r1, [sp, #96]	; 0x60
   1590c:	strd	r2, [r8, #-8]
   15910:	mov	r7, #43	; 0x2b
   15914:	mov	sl, #25
   15918:	b	13cd0 <__assert_fail@plt+0x2868>
   1591c:	mvn	r7, #92	; 0x5c
   15920:	mov	sl, #4
   15924:	b	13cd0 <__assert_fail@plt+0x2868>
   15928:	ldr	r0, [sp, #16]
   1592c:	str	r1, [sp, #40]	; 0x28
   15930:	bl	1130c <strlen@plt>
   15934:	ldr	r4, [sp, #24]
   15938:	cmp	r0, #3
   1593c:	mov	r3, r0
   15940:	str	r0, [sp, #24]
   15944:	moveq	r3, #1
   15948:	beq	15968 <__assert_fail@plt+0x4500>
   1594c:	cmp	r3, #4
   15950:	ldr	r1, [sp, #40]	; 0x28
   15954:	ldrbeq	r3, [sp, #1531]	; 0x5fb
   15958:	movne	r3, r1
   1595c:	subeq	r3, r3, #46	; 0x2e
   15960:	clzeq	r3, r3
   15964:	lsreq	r3, r3, #5
   15968:	ldr	r8, [pc, #2760]	; 16438 <__assert_fail@plt+0x4fd0>
   1596c:	str	r7, [sp, #40]	; 0x28
   15970:	str	r4, [sp, #48]	; 0x30
   15974:	ldr	r1, [pc, #2752]	; 1643c <__assert_fail@plt+0x4fd4>
   15978:	mov	r4, r8
   1597c:	mov	r7, r3
   15980:	ldr	r8, [sp, #16]
   15984:	b	159b0 <__assert_fail@plt+0x4548>
   15988:	mov	r2, #3
   1598c:	mov	r0, r8
   15990:	bl	1142c <strncmp@plt>
   15994:	clz	r0, r0
   15998:	lsr	r0, r0, #5
   1599c:	cmp	r0, #0
   159a0:	bne	15a7c <__assert_fail@plt+0x4614>
   159a4:	ldr	r1, [r4, #12]!
   159a8:	cmp	r1, #0
   159ac:	beq	15a44 <__assert_fail@plt+0x45dc>
   159b0:	cmp	r7, #0
   159b4:	bne	15988 <__assert_fail@plt+0x4520>
   159b8:	mov	r0, r8
   159bc:	bl	1112c <strcmp@plt>
   159c0:	clz	r0, r0
   159c4:	lsr	r0, r0, #5
   159c8:	b	1599c <__assert_fail@plt+0x4534>
   159cc:	mov	r2, #63	; 0x3f
   159d0:	mov	r3, #2
   159d4:	str	r2, [sp, #16]
   159d8:	b	13a98 <__assert_fail@plt+0x2630>
   159dc:	cmp	r3, #0
   159e0:	beq	1636c <__assert_fail@plt+0x4f04>
   159e4:	ldrd	r0, [sp, #40]	; 0x28
   159e8:	cmp	r0, #-2147483648	; 0x80000000
   159ec:	beq	159cc <__assert_fail@plt+0x4564>
   159f0:	ldr	r2, [pc, #2632]	; 16440 <__assert_fail@plt+0x4fd8>
   159f4:	sub	r1, r0, #1
   159f8:	sub	r2, r2, r3
   159fc:	ldr	r3, [sp, #36]	; 0x24
   15a00:	str	r2, [sp, #260]	; 0x104
   15a04:	mov	r2, #276	; 0x114
   15a08:	str	r4, [r3]
   15a0c:	str	r1, [sp, #256]	; 0x100
   15a10:	mov	r3, #21
   15a14:	str	r2, [sp, #16]
   15a18:	b	13a98 <__assert_fail@plt+0x2630>
   15a1c:	mov	r2, #63	; 0x3f
   15a20:	ldr	sl, [sp, #48]	; 0x30
   15a24:	ldr	fp, [sp, #64]	; 0x40
   15a28:	mov	r3, #2
   15a2c:	str	r2, [sp, #16]
   15a30:	b	13a98 <__assert_fail@plt+0x2630>
   15a34:	mov	r0, #2
   15a38:	b	13584 <__assert_fail@plt+0x211c>
   15a3c:	mov	r0, #0
   15a40:	b	13584 <__assert_fail@plt+0x211c>
   15a44:	ldr	r7, [sp, #40]	; 0x28
   15a48:	ldr	r1, [sp, #16]
   15a4c:	str	r0, [sp, #40]	; 0x28
   15a50:	ldr	r0, [sp, #36]	; 0x24
   15a54:	bl	12bbc <__assert_fail@plt+0x1754>
   15a58:	ldr	r4, [sp, #48]	; 0x30
   15a5c:	ldr	r3, [sp, #40]	; 0x28
   15a60:	cmp	r0, #0
   15a64:	beq	15aa4 <__assert_fail@plt+0x463c>
   15a68:	ldr	r2, [r0, #8]
   15a6c:	ldr	r3, [r0, #4]
   15a70:	str	r3, [sp, #16]
   15a74:	asr	r3, r2, #31
   15a78:	b	13c38 <__assert_fail@plt+0x27d0>
   15a7c:	ldr	r7, [sp, #40]	; 0x28
   15a80:	mov	r8, r4
   15a84:	ldr	r4, [sp, #48]	; 0x30
   15a88:	ldr	r2, [r8, #8]
   15a8c:	ldr	r3, [r8, #4]
   15a90:	str	r3, [sp, #16]
   15a94:	asr	r3, r2, #31
   15a98:	b	13c38 <__assert_fail@plt+0x27d0>
   15a9c:	mov	r8, #0
   15aa0:	b	13924 <__assert_fail@plt+0x24bc>
   15aa4:	ldr	r1, [pc, #2456]	; 16444 <__assert_fail@plt+0x4fdc>
   15aa8:	ldr	r0, [sp, #16]
   15aac:	str	r3, [sp, #40]	; 0x28
   15ab0:	bl	1112c <strcmp@plt>
   15ab4:	ldr	r3, [sp, #40]	; 0x28
   15ab8:	cmp	r0, #0
   15abc:	beq	13a74 <__assert_fail@plt+0x260c>
   15ac0:	ldr	r2, [pc, #2432]	; 16448 <__assert_fail@plt+0x4fe0>
   15ac4:	str	r4, [sp, #48]	; 0x30
   15ac8:	mov	r8, r5
   15acc:	str	r2, [sp, #40]	; 0x28
   15ad0:	ldr	r1, [pc, #2420]	; 1644c <__assert_fail@plt+0x4fe4>
   15ad4:	mov	r4, r2
   15ad8:	mov	r5, r3
   15adc:	b	15aec <__assert_fail@plt+0x4684>
   15ae0:	ldr	r1, [r4, #12]!
   15ae4:	cmp	r1, #0
   15ae8:	beq	15f54 <__assert_fail@plt+0x4aec>
   15aec:	ldr	r0, [sp, #16]
   15af0:	bl	1112c <strcmp@plt>
   15af4:	cmp	r0, #0
   15af8:	bne	15ae0 <__assert_fail@plt+0x4678>
   15afc:	mov	r5, r8
   15b00:	b	15a80 <__assert_fail@plt+0x4618>
   15b04:	ldrd	r2, [sp, #96]	; 0x60
   15b08:	cmp	r2, #0
   15b0c:	sbcs	r3, r3, #0
   15b10:	bge	14798 <__assert_fail@plt+0x3330>
   15b14:	mov	r2, #100	; 0x64
   15b18:	mov	r3, #0
   15b1c:	mov	r0, r4
   15b20:	mov	r1, r5
   15b24:	bl	1f44c <__assert_fail@plt+0xdfe4>
   15b28:	mov	r2, #100	; 0x64
   15b2c:	mov	r3, #0
   15b30:	mov	lr, r0
   15b34:	mov	ip, r1
   15b38:	mov	r0, r4
   15b3c:	mov	r1, r5
   15b40:	mov	r4, lr
   15b44:	mov	r5, ip
   15b48:	bl	1f44c <__assert_fail@plt+0xdfe4>
   15b4c:	lsl	r1, r5, #4
   15b50:	lsl	r0, r4, #4
   15b54:	orr	r1, r1, r4, lsr #28
   15b58:	subs	r4, r0, r4
   15b5c:	sbc	r5, r1, r5
   15b60:	lsl	r1, r4, #2
   15b64:	lsl	r5, r5, #2
   15b68:	orr	r5, r5, r4, lsr #30
   15b6c:	adds	r0, r1, r2
   15b70:	adc	r5, r5, r3
   15b74:	b	147e8 <__assert_fail@plt+0x3380>
   15b78:	cmp	r3, #0
   15b7c:	ldrd	r2, [r9, #-216]	; 0xffffff28
   15b80:	mov	r4, r2
   15b84:	mov	r5, r3
   15b88:	bne	15dd8 <__assert_fail@plt+0x4970>
   15b8c:	sub	ip, sl, #10
   15b90:	str	ip, [sp, #24]
   15b94:	ldr	ip, [sp, #36]	; 0x24
   15b98:	mov	lr, r9
   15b9c:	mov	sl, #14
   15ba0:	strd	r4, [ip, #56]	; 0x38
   15ba4:	ldm	lr!, {r0, r1, r2, r3}
   15ba8:	mov	r4, ip
   15bac:	mov	r7, r4
   15bb0:	ldrd	r4, [r9, #-104]	; 0xffffff98
   15bb4:	add	ip, ip, #32
   15bb8:	strd	r4, [r7, #64]	; 0x40
   15bbc:	stmia	ip!, {r0, r1, r2, r3}
   15bc0:	sub	r3, r9, #280	; 0x118
   15bc4:	ldm	lr, {r0, r1}
   15bc8:	str	r3, [sp, #96]	; 0x60
   15bcc:	mvn	r7, #92	; 0x5c
   15bd0:	stm	ip, {r0, r1}
   15bd4:	b	13cd0 <__assert_fail@plt+0x2868>
   15bd8:	ldrd	r2, [sp, #96]	; 0x60
   15bdc:	cmp	r2, #0
   15be0:	sbcs	r3, r3, #0
   15be4:	bge	1536c <__assert_fail@plt+0x3f04>
   15be8:	mov	r2, #100	; 0x64
   15bec:	mov	r3, #0
   15bf0:	mov	r0, r4
   15bf4:	mov	r1, r5
   15bf8:	bl	1f44c <__assert_fail@plt+0xdfe4>
   15bfc:	mov	r2, #100	; 0x64
   15c00:	mov	r3, #0
   15c04:	mov	lr, r0
   15c08:	mov	ip, r1
   15c0c:	mov	r0, r4
   15c10:	mov	r1, r5
   15c14:	mov	r4, lr
   15c18:	mov	r5, ip
   15c1c:	bl	1f44c <__assert_fail@plt+0xdfe4>
   15c20:	lsl	r1, r5, #4
   15c24:	lsl	r0, r4, #4
   15c28:	orr	r1, r1, r4, lsr #28
   15c2c:	subs	r4, r0, r4
   15c30:	sbc	r5, r1, r5
   15c34:	lsl	r1, r4, #2
   15c38:	lsl	r5, r5, #2
   15c3c:	orr	r5, r5, r4, lsr #30
   15c40:	adds	r0, r1, r2
   15c44:	adc	r5, r5, r3
   15c48:	b	153bc <__assert_fail@plt+0x3f54>
   15c4c:	subs	ip, r3, r2
   15c50:	ldrd	r2, [sp, #176]	; 0xb0
   15c54:	mov	r7, #0
   15c58:	movvs	r7, #1
   15c5c:	subs	r0, r2, r4
   15c60:	sbcs	r1, r3, r5
   15c64:	ldr	r3, [sp, #36]	; 0x24
   15c68:	ldrd	r4, [sp, #184]	; 0xb8
   15c6c:	strd	r0, [sp, #176]	; 0xb0
   15c70:	str	ip, [r3, #144]	; 0x90
   15c74:	ldrd	r2, [sp, #168]	; 0xa8
   15c78:	mov	lr, #0
   15c7c:	movvs	lr, #1
   15c80:	subs	r0, r4, r2
   15c84:	sbcs	r1, r5, r3
   15c88:	ldrd	r2, [sp, #176]	; 0xb0
   15c8c:	strd	r0, [sp, #168]	; 0xa8
   15c90:	ldr	r1, [sp, #36]	; 0x24
   15c94:	mov	ip, #0
   15c98:	movvs	ip, #1
   15c9c:	strd	r2, [r1, #136]	; 0x88
   15ca0:	ldrd	r0, [sp, #160]	; 0xa0
   15ca4:	ldrd	r2, [sp, #192]	; 0xc0
   15ca8:	subs	r4, r2, r0
   15cac:	sbcs	r5, r3, r1
   15cb0:	ldrd	r0, [sp, #168]	; 0xa8
   15cb4:	ldr	r3, [sp, #36]	; 0x24
   15cb8:	strd	r4, [sp, #176]	; 0xb0
   15cbc:	ldrd	r4, [sp, #200]	; 0xc8
   15cc0:	strd	r0, [r3, #128]	; 0x80
   15cc4:	ldrd	r0, [sp, #152]	; 0x98
   15cc8:	mov	r3, #0
   15ccc:	str	r3, [sp, #160]	; 0xa0
   15cd0:	movvs	r3, #1
   15cd4:	strvs	r3, [sp, #160]	; 0xa0
   15cd8:	subs	r2, r4, r0
   15cdc:	sbcs	r3, r5, r1
   15ce0:	ldrd	r0, [sp, #176]	; 0xb0
   15ce4:	strd	r2, [sp, #168]	; 0xa8
   15ce8:	ldr	r3, [sp, #36]	; 0x24
   15cec:	ldrd	r4, [sp, #96]	; 0x60
   15cf0:	strd	r0, [r3, #120]	; 0x78
   15cf4:	ldrd	r0, [sp, #208]	; 0xd0
   15cf8:	mov	r3, #0
   15cfc:	str	r3, [sp, #152]	; 0x98
   15d00:	movvs	r3, #1
   15d04:	strvs	r3, [sp, #152]	; 0x98
   15d08:	subs	r2, r0, r4
   15d0c:	sbcs	r3, r1, r5
   15d10:	ldr	r1, [sp, #36]	; 0x24
   15d14:	strd	r2, [sp, #176]	; 0xb0
   15d18:	ldrd	r2, [sp, #168]	; 0xa8
   15d1c:	strd	r2, [r1, #112]	; 0x70
   15d20:	mov	r3, #0
   15d24:	str	r3, [sp, #96]	; 0x60
   15d28:	ldrd	r4, [sp, #216]	; 0xd8
   15d2c:	ldrd	r0, [sp, #24]
   15d30:	movvs	r3, #1
   15d34:	strvs	r3, [sp, #96]	; 0x60
   15d38:	subs	r2, r4, r0
   15d3c:	sbcs	r3, r5, r1
   15d40:	mov	r4, r2
   15d44:	mov	r5, r3
   15d48:	ldr	r1, [sp, #36]	; 0x24
   15d4c:	ldrd	r2, [sp, #176]	; 0xb0
   15d50:	mov	r0, r4
   15d54:	strd	r2, [r1, #104]	; 0x68
   15d58:	orr	r3, r7, lr
   15d5c:	orr	ip, r3, ip
   15d60:	ldr	r3, [sp, #160]	; 0xa0
   15d64:	ldr	r1, [sp, #152]	; 0x98
   15d68:	orr	r3, ip, r3
   15d6c:	orr	r3, r3, r1
   15d70:	ldr	r1, [sp, #96]	; 0x60
   15d74:	mov	r2, #0
   15d78:	orr	r3, r3, r1
   15d7c:	movvs	r2, #1
   15d80:	orr	r2, r3, r2
   15d84:	ldr	r3, [sp, #36]	; 0x24
   15d88:	mov	r1, r5
   15d8c:	strd	r0, [r3, #96]	; 0x60
   15d90:	b	15620 <__assert_fail@plt+0x41b8>
   15d94:	adds	r2, r2, r4
   15d98:	adcs	r3, r3, r5
   15d9c:	mov	r0, r2
   15da0:	mov	r5, r3
   15da4:	movvs	r1, #1
   15da8:	movvc	r1, #0
   15dac:	b	153b4 <__assert_fail@plt+0x3f4c>
   15db0:	adds	r2, r2, r4
   15db4:	adcs	r3, r3, r5
   15db8:	mov	r0, r2
   15dbc:	mov	r5, r3
   15dc0:	movvs	r1, #1
   15dc4:	movvc	r1, #0
   15dc8:	b	147e0 <__assert_fail@plt+0x3378>
   15dcc:	mov	r2, #0
   15dd0:	mov	r3, r2
   15dd4:	b	15c20 <__assert_fail@plt+0x47b8>
   15dd8:	mov	r2, #5
   15ddc:	ldr	r1, [pc, #1644]	; 16450 <__assert_fail@plt+0x4fe8>
   15de0:	mov	r0, #0
   15de4:	bl	111b0 <dcgettext@plt>
   15de8:	mov	r2, r4
   15dec:	mov	r3, r5
   15df0:	bl	12a38 <__assert_fail@plt+0x15d0>
   15df4:	b	15b8c <__assert_fail@plt+0x4724>
   15df8:	mov	r2, #0
   15dfc:	mov	r3, r2
   15e00:	b	15b4c <__assert_fail@plt+0x46e4>
   15e04:	asr	r5, r4, #31
   15e08:	mov	r2, #5
   15e0c:	ldr	r1, [pc, #1600]	; 16454 <__assert_fail@plt+0x4fec>
   15e10:	mov	r0, #0
   15e14:	bl	111b0 <dcgettext@plt>
   15e18:	ldrd	r2, [r9, #-216]	; 0xffffff28
   15e1c:	strd	r4, [sp]
   15e20:	bl	12a38 <__assert_fail@plt+0x15d0>
   15e24:	b	15868 <__assert_fail@plt+0x4400>
   15e28:	ldr	r1, [r9, #4]
   15e2c:	ldr	r7, [r9]
   15e30:	str	r1, [sp, #48]	; 0x30
   15e34:	mov	lr, ip
   15e38:	mov	r1, r0
   15e3c:	umull	r4, r5, r0, r3
   15e40:	cmp	lr, #0
   15e44:	strd	r4, [sp, #24]
   15e48:	umull	r4, r5, r1, lr
   15e4c:	bge	15e5c <__assert_fail@plt+0x49f4>
   15e50:	mov	lr, #0
   15e54:	subs	r4, r4, lr
   15e58:	sbc	r5, r5, r1
   15e5c:	cmp	r1, #0
   15e60:	bge	15e70 <__assert_fail@plt+0x4a08>
   15e64:	ldr	r1, [sp, #48]	; 0x30
   15e68:	subs	r4, r4, r7
   15e6c:	sbc	r5, r5, r1
   15e70:	ldr	r1, [sp, #28]
   15e74:	mov	lr, #0
   15e78:	adds	r1, r4, r1
   15e7c:	adc	lr, r5, lr
   15e80:	cmp	lr, r1, asr #31
   15e84:	bne	164b4 <__assert_fail@plt+0x504c>
   15e88:	ldr	r3, [sp, #24]
   15e8c:	str	r1, [sp, #148]	; 0x94
   15e90:	str	r3, [sp, #144]	; 0x90
   15e94:	b	150ec <__assert_fail@plt+0x3c84>
   15e98:	cmp	r1, ip
   15e9c:	bne	1630c <__assert_fail@plt+0x4ea4>
   15ea0:	ldr	r1, [r9, #-44]	; 0xffffffd4
   15ea4:	ldr	r7, [r9, #-48]	; 0xffffffd0
   15ea8:	str	r1, [sp, #48]	; 0x30
   15eac:	mov	lr, r2
   15eb0:	mov	r1, r3
   15eb4:	b	15e3c <__assert_fail@plt+0x49d4>
   15eb8:	ldr	r2, [r9, #4]
   15ebc:	ldr	r5, [r9]
   15ec0:	str	r2, [sp, #64]	; 0x40
   15ec4:	mov	lr, ip
   15ec8:	mov	r2, r4
   15ecc:	umull	r0, r1, r4, r3
   15ed0:	cmp	lr, #0
   15ed4:	strd	r0, [sp, #40]	; 0x28
   15ed8:	umull	r0, r1, r2, lr
   15edc:	strd	r0, [sp, #24]
   15ee0:	bge	15f00 <__assert_fail@plt+0x4a98>
   15ee4:	mov	lr, #0
   15ee8:	subs	r1, r0, lr
   15eec:	str	r1, [sp, #24]
   15ef0:	ldr	r1, [sp, #28]
   15ef4:	mov	lr, r2
   15ef8:	sbc	r1, r1, r2
   15efc:	str	r1, [sp, #28]
   15f00:	cmp	r2, #0
   15f04:	bge	15f24 <__assert_fail@plt+0x4abc>
   15f08:	ldr	r2, [sp, #24]
   15f0c:	ldr	r1, [sp, #28]
   15f10:	subs	r2, r2, r5
   15f14:	str	r2, [sp, #24]
   15f18:	ldr	r2, [sp, #64]	; 0x40
   15f1c:	sbc	r2, r1, r2
   15f20:	str	r2, [sp, #28]
   15f24:	ldr	r1, [sp, #24]
   15f28:	ldr	r2, [sp, #44]	; 0x2c
   15f2c:	mov	r0, #0
   15f30:	adds	r2, r1, r2
   15f34:	ldr	r1, [sp, #28]
   15f38:	adc	r0, r1, r0
   15f3c:	cmp	r0, r2, asr #31
   15f40:	bne	162a4 <__assert_fail@plt+0x4e3c>
   15f44:	ldr	r3, [sp, #40]	; 0x28
   15f48:	str	r2, [sp, #132]	; 0x84
   15f4c:	str	r3, [sp, #128]	; 0x80
   15f50:	b	14468 <__assert_fail@plt+0x3000>
   15f54:	ldr	r2, [sp, #24]
   15f58:	ldr	r0, [sp, #16]
   15f5c:	sub	r2, r2, #1
   15f60:	mov	r3, r5
   15f64:	mov	r5, r8
   15f68:	add	r8, r0, r2
   15f6c:	ldrb	r0, [r0, r2]
   15f70:	ldr	r4, [sp, #48]	; 0x30
   15f74:	cmp	r0, #83	; 0x53
   15f78:	beq	16098 <__assert_fail@plt+0x4c30>
   15f7c:	str	r5, [sp, #40]	; 0x28
   15f80:	ldr	r8, [pc, #1232]	; 16458 <__assert_fail@plt+0x4ff0>
   15f84:	ldr	r1, [pc, #1232]	; 1645c <__assert_fail@plt+0x4ff4>
   15f88:	mov	r5, r3
   15f8c:	b	15f9c <__assert_fail@plt+0x4b34>
   15f90:	ldr	r1, [r8, #12]!
   15f94:	cmp	r1, #0
   15f98:	beq	160f4 <__assert_fail@plt+0x4c8c>
   15f9c:	ldr	r0, [sp, #16]
   15fa0:	bl	1112c <strcmp@plt>
   15fa4:	cmp	r0, #0
   15fa8:	bne	15f90 <__assert_fail@plt+0x4b28>
   15fac:	ldr	r2, [r8, #8]
   15fb0:	ldr	r3, [r8, #4]
   15fb4:	ldr	r5, [sp, #40]	; 0x28
   15fb8:	str	r3, [sp, #16]
   15fbc:	asr	r3, r2, #31
   15fc0:	b	13c38 <__assert_fail@plt+0x27d0>
   15fc4:	ldr	r1, [r9, #4]
   15fc8:	ldr	r7, [r9]
   15fcc:	str	r1, [sp, #48]	; 0x30
   15fd0:	mov	lr, ip
   15fd4:	mov	r1, r0
   15fd8:	umull	r4, r5, r0, r3
   15fdc:	cmp	lr, #0
   15fe0:	strd	r4, [sp, #24]
   15fe4:	umull	r4, r5, r1, lr
   15fe8:	bge	15ff8 <__assert_fail@plt+0x4b90>
   15fec:	mov	lr, #0
   15ff0:	subs	r4, r4, lr
   15ff4:	sbc	r5, r5, r1
   15ff8:	cmp	r1, #0
   15ffc:	bge	1600c <__assert_fail@plt+0x4ba4>
   16000:	ldr	r1, [sp, #48]	; 0x30
   16004:	subs	r4, r4, r7
   16008:	sbc	r5, r5, r1
   1600c:	ldr	r1, [sp, #28]
   16010:	mov	lr, #0
   16014:	adds	r1, r4, r1
   16018:	adc	lr, r5, lr
   1601c:	cmp	lr, r1, asr #31
   16020:	bne	16284 <__assert_fail@plt+0x4e1c>
   16024:	ldr	r3, [sp, #24]
   16028:	str	r1, [sp, #140]	; 0x8c
   1602c:	str	r3, [sp, #136]	; 0x88
   16030:	b	14068 <__assert_fail@plt+0x2c00>
   16034:	cmp	r1, ip
   16038:	bne	164cc <__assert_fail@plt+0x5064>
   1603c:	ldr	r1, [r9, #-44]	; 0xffffffd4
   16040:	ldr	r7, [r9, #-48]	; 0xffffffd0
   16044:	str	r1, [sp, #48]	; 0x30
   16048:	mov	lr, r2
   1604c:	mov	r1, r3
   16050:	b	15fd8 <__assert_fail@plt+0x4b70>
   16054:	cmp	r2, ip
   16058:	bne	162c8 <__assert_fail@plt+0x4e60>
   1605c:	ldr	r2, [r9, #-52]	; 0xffffffcc
   16060:	ldr	r5, [r9, #-56]	; 0xffffffc8
   16064:	str	r2, [sp, #64]	; 0x40
   16068:	mov	lr, r7
   1606c:	mov	r2, r3
   16070:	b	15ecc <__assert_fail@plt+0x4a64>
   16074:	ldr	r1, [sp, #36]	; 0x24
   16078:	add	r3, r2, #1
   1607c:	str	r3, [r1]
   16080:	ldrb	r3, [r2]
   16084:	cmp	r3, #0
   16088:	str	r3, [sp, #16]
   1608c:	ldreq	r3, [sp, #16]
   16090:	bne	13a90 <__assert_fail@plt+0x2628>
   16094:	b	13494 <__assert_fail@plt+0x202c>
   16098:	ldr	ip, [sp, #16]
   1609c:	ldr	r0, [pc, #936]	; 1644c <__assert_fail@plt+0x4fe4>
   160a0:	str	r5, [sp, #48]	; 0x30
   160a4:	strb	r1, [ip, r2]
   160a8:	mov	r5, r3
   160ac:	mov	r1, r0
   160b0:	b	160c8 <__assert_fail@plt+0x4c60>
   160b4:	ldr	r3, [sp, #40]	; 0x28
   160b8:	ldr	r1, [r3, #12]!
   160bc:	cmp	r1, #0
   160c0:	str	r3, [sp, #40]	; 0x28
   160c4:	beq	16244 <__assert_fail@plt+0x4ddc>
   160c8:	ldr	r0, [sp, #16]
   160cc:	bl	1112c <strcmp@plt>
   160d0:	cmp	r0, #0
   160d4:	bne	160b4 <__assert_fail@plt+0x4c4c>
   160d8:	ldr	r3, [sp, #40]	; 0x28
   160dc:	ldr	r5, [sp, #48]	; 0x30
   160e0:	ldr	r2, [r3, #8]
   160e4:	ldr	r3, [r3, #4]
   160e8:	str	r3, [sp, #16]
   160ec:	asr	r3, r2, #31
   160f0:	b	13c38 <__assert_fail@plt+0x27d0>
   160f4:	ldr	r2, [sp, #24]
   160f8:	mov	r3, r5
   160fc:	cmp	r2, #1
   16100:	ldr	r5, [sp, #40]	; 0x28
   16104:	ldrb	r2, [sp, #1528]	; 0x5f8
   16108:	beq	163c4 <__assert_fail@plt+0x4f5c>
   1610c:	cmp	r2, #0
   16110:	ldrne	r1, [sp, #16]
   16114:	movne	r0, r1
   16118:	beq	16154 <__assert_fail@plt+0x4cec>
   1611c:	cmp	r2, #46	; 0x2e
   16120:	ldrb	r2, [r0, #1]!
   16124:	addne	r1, r1, #1
   16128:	moveq	r3, #1
   1612c:	cmp	r2, #0
   16130:	strb	r2, [r1]
   16134:	bne	1611c <__assert_fail@plt+0x4cb4>
   16138:	cmp	r3, #0
   1613c:	beq	16154 <__assert_fail@plt+0x4cec>
   16140:	ldr	r1, [sp, #16]
   16144:	ldr	r0, [sp, #36]	; 0x24
   16148:	bl	12bbc <__assert_fail@plt+0x1754>
   1614c:	cmp	r0, #0
   16150:	bne	15a68 <__assert_fail@plt+0x4600>
   16154:	ldr	r3, [sp, #36]	; 0x24
   16158:	ldrb	r3, [r3, #181]	; 0xb5
   1615c:	cmp	r3, #0
   16160:	beq	159cc <__assert_fail@plt+0x4564>
   16164:	mov	r2, #5
   16168:	ldr	r1, [pc, #752]	; 16460 <__assert_fail@plt+0x4ff8>
   1616c:	mov	r0, #0
   16170:	bl	111b0 <dcgettext@plt>
   16174:	ldr	r1, [sp, #16]
   16178:	bl	12a38 <__assert_fail@plt+0x15d0>
   1617c:	mov	r3, #63	; 0x3f
   16180:	str	r3, [sp, #16]
   16184:	mov	r3, #2
   16188:	b	13a98 <__assert_fail@plt+0x2630>
   1618c:	mov	r1, #60	; 0x3c
   16190:	cmp	r5, #0
   16194:	umull	r2, r3, r4, r1
   16198:	strd	r2, [sp, #152]	; 0x98
   1619c:	umull	r2, r3, r1, r5
   161a0:	strd	r2, [sp, #24]
   161a4:	bge	161bc <__assert_fail@plt+0x4d54>
   161a8:	subs	r3, r2, lr
   161ac:	str	r3, [sp, #24]
   161b0:	ldr	r3, [sp, #28]
   161b4:	sbc	r3, r3, r1
   161b8:	str	r3, [sp, #28]
   161bc:	ldr	r3, [sp, #24]
   161c0:	ldr	r1, [sp, #156]	; 0x9c
   161c4:	mov	r2, #0
   161c8:	adds	r1, r3, r1
   161cc:	ldr	r3, [sp, #28]
   161d0:	adc	r3, r3, r2
   161d4:	cmp	r3, r1, asr #31
   161d8:	bne	16404 <__assert_fail@plt+0x4f9c>
   161dc:	ldr	r2, [sp, #152]	; 0x98
   161e0:	mov	r3, r1
   161e4:	b	15388 <__assert_fail@plt+0x3f20>
   161e8:	mov	r1, #60	; 0x3c
   161ec:	cmp	r5, #0
   161f0:	umull	r2, r3, r4, r1
   161f4:	strd	r2, [sp, #152]	; 0x98
   161f8:	umull	r2, r3, r1, r5
   161fc:	strd	r2, [sp, #24]
   16200:	bge	16218 <__assert_fail@plt+0x4db0>
   16204:	subs	r3, r2, lr
   16208:	str	r3, [sp, #24]
   1620c:	ldr	r3, [sp, #28]
   16210:	sbc	r3, r3, r1
   16214:	str	r3, [sp, #28]
   16218:	ldr	r3, [sp, #24]
   1621c:	ldr	r1, [sp, #156]	; 0x9c
   16220:	mov	r2, #0
   16224:	adds	r1, r3, r1
   16228:	ldr	r3, [sp, #28]
   1622c:	adc	r3, r3, r2
   16230:	cmp	r3, r1, asr #31
   16234:	bne	16258 <__assert_fail@plt+0x4df0>
   16238:	ldr	r2, [sp, #152]	; 0x98
   1623c:	mov	r3, r1
   16240:	b	147b4 <__assert_fail@plt+0x334c>
   16244:	mov	r2, #83	; 0x53
   16248:	mov	r3, r5
   1624c:	strb	r2, [r8]
   16250:	ldr	r5, [sp, #48]	; 0x30
   16254:	b	15f7c <__assert_fail@plt+0x4b14>
   16258:	lsl	r3, r5, #4
   1625c:	lsl	r2, r4, #4
   16260:	subs	r2, r2, r4
   16264:	orr	r3, r3, r4, lsr #28
   16268:	sbc	r3, r3, r5
   1626c:	lsl	r1, r2, #2
   16270:	lsl	r3, r3, #2
   16274:	orr	r3, r3, r2, lsr #30
   16278:	mov	lr, #1
   1627c:	mov	r2, r1
   16280:	b	147b4 <__assert_fail@plt+0x334c>
   16284:	mul	ip, r0, ip
   16288:	umull	r0, r1, r0, r3
   1628c:	mla	r3, r3, r2, ip
   16290:	add	r1, r3, r1
   16294:	strd	r0, [sp, #136]	; 0x88
   16298:	mov	r3, #1
   1629c:	str	r3, [sp, #40]	; 0x28
   162a0:	b	14068 <__assert_fail@plt+0x2c00>
   162a4:	mul	ip, r4, ip
   162a8:	umull	r4, r5, r4, r3
   162ac:	mla	r3, r3, r7, ip
   162b0:	add	r5, r3, r5
   162b4:	strd	r4, [sp, #128]	; 0x80
   162b8:	mov	r3, #1
   162bc:	str	r3, [sp, #48]	; 0x30
   162c0:	b	14468 <__assert_fail@plt+0x3000>
   162c4:	bl	111bc <__stack_chk_fail@plt>
   162c8:	mul	r2, r4, ip
   162cc:	umull	r4, r5, r4, r3
   162d0:	mla	r2, r3, r7, r2
   162d4:	add	r3, r7, #1
   162d8:	add	r5, r2, r5
   162dc:	cmp	r3, #1
   162e0:	strd	r4, [sp, #128]	; 0x80
   162e4:	bhi	162b8 <__assert_fail@plt+0x4e50>
   162e8:	add	r3, ip, #1
   162ec:	cmp	r3, #1
   162f0:	bhi	162b8 <__assert_fail@plt+0x4e50>
   162f4:	cmp	r7, ip
   162f8:	bne	16510 <__assert_fail@plt+0x50a8>
   162fc:	cmp	r4, #1
   16300:	sbcs	r3, r5, #0
   16304:	bge	14468 <__assert_fail@plt+0x3000>
   16308:	b	162b8 <__assert_fail@plt+0x4e50>
   1630c:	mul	r1, r0, ip
   16310:	umull	r4, r5, r0, r3
   16314:	mla	r1, r3, r2, r1
   16318:	add	r3, r2, #1
   1631c:	add	r5, r1, r5
   16320:	cmp	r3, #1
   16324:	strd	r4, [sp, #144]	; 0x90
   16328:	bhi	1634c <__assert_fail@plt+0x4ee4>
   1632c:	add	r3, ip, #1
   16330:	cmp	r3, #1
   16334:	bhi	1634c <__assert_fail@plt+0x4ee4>
   16338:	cmp	r2, ip
   1633c:	bne	16358 <__assert_fail@plt+0x4ef0>
   16340:	cmp	r4, #1
   16344:	sbcs	r3, r5, #0
   16348:	bge	150ec <__assert_fail@plt+0x3c84>
   1634c:	mov	r3, #1
   16350:	str	r3, [sp, #40]	; 0x28
   16354:	b	150ec <__assert_fail@plt+0x3c84>
   16358:	ldrd	r2, [sp, #144]	; 0x90
   1635c:	cmp	r2, #0
   16360:	sbcs	r3, r3, #0
   16364:	blt	150ec <__assert_fail@plt+0x3c84>
   16368:	b	1634c <__assert_fail@plt+0x4ee4>
   1636c:	ldr	r2, [sp, #40]	; 0x28
   16370:	str	r3, [sp, #260]	; 0x104
   16374:	ldr	r3, [sp, #36]	; 0x24
   16378:	str	r2, [sp, #256]	; 0x100
   1637c:	mov	r2, #276	; 0x114
   16380:	str	r4, [r3]
   16384:	str	r2, [sp, #16]
   16388:	mov	r3, #21
   1638c:	b	13a98 <__assert_fail@plt+0x2630>
   16390:	add	r5, fp, r5
   16394:	ldrsh	r2, [sp, #24]
   16398:	ldrb	r3, [r5, #2700]	; 0xa8c
   1639c:	sub	r1, sl, r2, lsl #1
   163a0:	sub	sl, r3, #28
   163a4:	rsb	r2, r2, r2, lsl #3
   163a8:	add	r3, fp, sl
   163ac:	add	r3, r3, #2784	; 0xae0
   163b0:	sub	r2, r9, r2, lsl #3
   163b4:	str	r1, [sp, #24]
   163b8:	str	r2, [sp, #96]	; 0x60
   163bc:	ldrsb	r7, [r3, #8]
   163c0:	b	13cd0 <__assert_fail@plt+0x2868>
   163c4:	cmp	r2, #65	; 0x41
   163c8:	ldrne	r1, [pc, #148]	; 16464 <__assert_fail@plt+0x4ffc>
   163cc:	beq	16470 <__assert_fail@plt+0x5008>
   163d0:	ldr	ip, [r1, #12]
   163d4:	mov	r0, r1
   163d8:	cmp	ip, #0
   163dc:	beq	1610c <__assert_fail@plt+0x4ca4>
   163e0:	ldrb	ip, [ip]
   163e4:	add	r1, r1, #12
   163e8:	cmp	ip, r2
   163ec:	bne	163d0 <__assert_fail@plt+0x4f68>
   163f0:	ldr	r2, [r0, #20]
   163f4:	ldr	r3, [r0, #16]
   163f8:	str	r3, [sp, #16]
   163fc:	asr	r3, r2, #31
   16400:	b	13c38 <__assert_fail@plt+0x27d0>
   16404:	lsl	r3, r5, #4
   16408:	lsl	r2, r4, #4
   1640c:	subs	r2, r2, r4
   16410:	orr	r3, r3, r4, lsr #28
   16414:	sbc	r3, r3, r5
   16418:	lsl	r1, r2, #2
   1641c:	lsl	r3, r3, #2
   16420:	orr	r3, r3, r2, lsr #30
   16424:	mov	lr, #1
   16428:	mov	r2, r1
   1642c:	b	15388 <__assert_fail@plt+0x3f20>
   16430:	andeq	r0, r2, r0, ror lr
   16434:	andeq	r0, r2, ip, ror #28
   16438:	andeq	r0, r2, r0, ror r5
   1643c:	andeq	r0, r2, ip, lsl lr
   16440:	blcc	fe6c8c48 <optarg@@GLIBC_2.4+0xfe695aa0>
   16444:	andeq	r0, r2, r8, lsr lr
   16448:	muleq	r2, ip, r6
   1644c:	andeq	r0, r2, r4, lsr #28
   16450:	andeq	r0, r2, r0, ror #29
   16454:	andeq	r0, r2, r4, lsr #29
   16458:	andeq	r0, r2, r0, lsr #14
   1645c:	andeq	r0, r2, ip, lsr #28
   16460:	andeq	r0, r2, ip, lsr lr
   16464:	andeq	r0, r2, ip, lsl r8
   16468:	andeq	r0, r0, r1, lsl r1
   1646c:			; <UNDEFINED> instruction: 0xfffff1f0
   16470:	ldr	r1, [pc, #-16]	; 16468 <__assert_fail@plt+0x5000>
   16474:	ldr	r2, [pc, #-16]	; 1646c <__assert_fail@plt+0x5004>
   16478:	mvn	r3, #0
   1647c:	str	r1, [sp, #16]
   16480:	add	r1, sp, #256	; 0x100
   16484:	strd	r2, [r1]
   16488:	b	13a8c <__assert_fail@plt+0x2624>
   1648c:	lsl	r1, sl, #2
   16490:	lsl	lr, fp, #2
   16494:	adds	r0, r1, sl
   16498:	orr	lr, lr, sl, lsr #30
   1649c:	adc	lr, lr, fp
   164a0:	adds	r0, r0, r0
   164a4:	adc	lr, lr, lr
   164a8:	mov	r1, lr
   164ac:	mov	lr, #1
   164b0:	b	13ab8 <__assert_fail@plt+0x2650>
   164b4:	mul	ip, r0, ip
   164b8:	umull	r0, r1, r0, r3
   164bc:	mla	ip, r3, r2, ip
   164c0:	add	r1, ip, r1
   164c4:	strd	r0, [sp, #144]	; 0x90
   164c8:	b	1634c <__assert_fail@plt+0x4ee4>
   164cc:	mul	r1, r0, ip
   164d0:	umull	r4, r5, r0, r3
   164d4:	mla	r1, r3, r2, r1
   164d8:	add	r3, r2, #1
   164dc:	add	r5, r1, r5
   164e0:	cmp	r3, #1
   164e4:	strd	r4, [sp, #136]	; 0x88
   164e8:	bhi	16298 <__assert_fail@plt+0x4e30>
   164ec:	add	r3, ip, #1
   164f0:	cmp	r3, #1
   164f4:	bhi	16298 <__assert_fail@plt+0x4e30>
   164f8:	cmp	r2, ip
   164fc:	bne	16524 <__assert_fail@plt+0x50bc>
   16500:	cmp	r4, #1
   16504:	sbcs	r3, r5, #0
   16508:	bge	14068 <__assert_fail@plt+0x2c00>
   1650c:	b	16298 <__assert_fail@plt+0x4e30>
   16510:	ldrd	r2, [sp, #128]	; 0x80
   16514:	cmp	r2, #0
   16518:	sbcs	r3, r3, #0
   1651c:	blt	14468 <__assert_fail@plt+0x3000>
   16520:	b	162b8 <__assert_fail@plt+0x4e50>
   16524:	ldrd	r2, [sp, #136]	; 0x88
   16528:	cmp	r2, #0
   1652c:	sbcs	r3, r3, #0
   16530:	blt	14068 <__assert_fail@plt+0x2c00>
   16534:	b	16298 <__assert_fail@plt+0x4e30>
   16538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1653c:	sub	sp, sp, #1004	; 0x3ec
   16540:	mov	ip, r1
   16544:	str	r1, [sp, #48]	; 0x30
   16548:	ldr	r1, [pc, #1360]	; 16aa0 <__assert_fail@plt+0x5638>
   1654c:	str	r0, [sp, #68]	; 0x44
   16550:	mov	r0, ip
   16554:	ldr	r1, [r1]
   16558:	mov	r7, r2
   1655c:	mov	r5, r3
   16560:	str	r1, [sp, #996]	; 0x3e4
   16564:	bl	1130c <strlen@plt>
   16568:	ldr	r3, [sp, #1040]	; 0x410
   1656c:	cmp	r7, #0
   16570:	str	r3, [sp, #56]	; 0x38
   16574:	ldr	r3, [sp, #1044]	; 0x414
   16578:	str	r3, [sp, #64]	; 0x40
   1657c:	str	r0, [sp, #72]	; 0x48
   16580:	beq	17088 <__assert_fail@plt+0x5c20>
   16584:	ldr	fp, [r7]
   16588:	ldr	r6, [r7, #4]
   1658c:	ldr	r2, [sp, #48]	; 0x30
   16590:	mov	r4, r2
   16594:	ldrb	r3, [r2], #1
   16598:	cmp	r3, #9
   1659c:	bcc	165b0 <__assert_fail@plt+0x5148>
   165a0:	cmp	r3, #13
   165a4:	bls	16590 <__assert_fail@plt+0x5128>
   165a8:	cmp	r3, #32
   165ac:	beq	16590 <__assert_fail@plt+0x5128>
   165b0:	mov	r2, #56	; 0x38
   165b4:	mov	r1, #0
   165b8:	add	r0, sp, #360	; 0x168
   165bc:	bl	11360 <memset@plt>
   165c0:	mov	r2, #4
   165c4:	ldr	r1, [pc, #1240]	; 16aa4 <__assert_fail@plt+0x563c>
   165c8:	mov	r0, r4
   165cc:	bl	1142c <strncmp@plt>
   165d0:	cmp	r0, #0
   165d4:	bne	16630 <__assert_fail@plt+0x51c8>
   165d8:	ldrb	r8, [r4, #4]
   165dc:	add	r9, r4, #4
   165e0:	cmp	r8, #0
   165e4:	beq	16630 <__assert_fail@plt+0x51c8>
   165e8:	mov	r3, r9
   165ec:	mov	r2, r8
   165f0:	mov	r0, #1
   165f4:	b	16614 <__assert_fail@plt+0x51ac>
   165f8:	cmp	r2, #34	; 0x22
   165fc:	beq	16b54 <__assert_fail@plt+0x56ec>
   16600:	ldrb	r2, [r3, #1]
   16604:	add	r0, r0, #1
   16608:	add	r3, r3, #1
   1660c:	cmp	r2, #0
   16610:	beq	16630 <__assert_fail@plt+0x51c8>
   16614:	cmp	r2, #92	; 0x5c
   16618:	bne	165f8 <__assert_fail@plt+0x5190>
   1661c:	ldrb	r2, [r3, #1]
   16620:	add	r3, r3, #1
   16624:	cmp	r2, #92	; 0x5c
   16628:	cmpne	r2, #34	; 0x22
   1662c:	beq	16600 <__assert_fail@plt+0x5198>
   16630:	mov	r1, r7
   16634:	ldr	r7, [sp, #56]	; 0x38
   16638:	add	r2, sp, #228	; 0xe4
   1663c:	mov	r0, r7
   16640:	bl	1b670 <__assert_fail@plt+0xa208>
   16644:	cmp	r0, #0
   16648:	beq	17098 <__assert_fail@plt+0x5c30>
   1664c:	mov	r3, #0
   16650:	str	r7, [sp, #44]	; 0x2c
   16654:	str	r3, [sp, #60]	; 0x3c
   16658:	add	r7, sp, #360	; 0x168
   1665c:	mov	ip, r7
   16660:	ldr	r8, [sp, #244]	; 0xf4
   16664:	ldm	ip!, {r0, r1, r2, r3}
   16668:	add	lr, sp, #512	; 0x200
   1666c:	add	r8, r8, #1
   16670:	and	r5, r5, #1
   16674:	stmia	lr!, {r0, r1, r2, r3}
   16678:	add	sl, sp, #424	; 0x1a8
   1667c:	ldrb	r2, [r4]
   16680:	str	ip, [sp, #32]
   16684:	strb	r5, [sp, #597]	; 0x255
   16688:	ldr	r5, [sp, #32]
   1668c:	asr	r9, r8, #31
   16690:	ldr	r3, [pc, #1040]	; 16aa8 <__assert_fail@plt+0x5640>
   16694:	cmp	r2, #0
   16698:	ldr	ip, [sp, #248]	; 0xf8
   1669c:	moveq	r4, r3
   166a0:	strd	r8, [sl, #48]	; 0x30
   166a4:	ldm	r5!, {r0, r1, r2, r3}
   166a8:	mov	r9, #0
   166ac:	ldr	r8, [pc, #1148]	; 16b30 <__assert_fail@plt+0x56c8>
   166b0:	str	r6, [sp, #508]	; 0x1fc
   166b4:	adds	r6, r8, ip
   166b8:	adc	r7, r9, ip, asr #31
   166bc:	str	r5, [sp, #32]
   166c0:	str	r4, [sp, #416]	; 0x1a0
   166c4:	mov	r5, r7
   166c8:	mov	r4, r6
   166cc:	ldr	r8, [sp, #236]	; 0xec
   166d0:	strd	r4, [sl, #32]
   166d4:	ldr	r4, [sp, #240]	; 0xf0
   166d8:	asr	r9, r8, #31
   166dc:	ldr	r6, [sp, #228]	; 0xe4
   166e0:	asr	r5, r4, #31
   166e4:	strd	r8, [sl, #64]	; 0x40
   166e8:	strd	r4, [sl, #56]	; 0x38
   166ec:	ldr	r4, [sp, #232]	; 0xe8
   166f0:	ldr	r8, [sp, #260]	; 0x104
   166f4:	str	r6, [sp, #504]	; 0x1f8
   166f8:	asr	r5, r4, #31
   166fc:	mov	ip, #0
   16700:	strd	r4, [sl, #72]	; 0x48
   16704:	mov	r4, #2
   16708:	str	r8, [sp, #172]	; 0xac
   1670c:	str	r4, [sp, #444]	; 0x1bc
   16710:	ldr	r4, [sp, #32]
   16714:	stmia	lr!, {r0, r1, r2, r3}
   16718:	add	r6, fp, #7733248	; 0x760000
   1671c:	ldm	r4!, {r0, r1, r2, r3}
   16720:	add	r9, fp, #30932992	; 0x1d80000
   16724:	str	r8, [sp, #616]	; 0x268
   16728:	str	ip, [sp, #464]	; 0x1d0
   1672c:	str	r4, [sp, #32]
   16730:	stmia	lr!, {r0, r1, r2, r3}
   16734:	add	r6, r6, #42752	; 0xa700
   16738:	ldr	r3, [sp, #32]
   1673c:	add	r5, pc, #852	; 0x354
   16740:	ldrd	r4, [r5]
   16744:	str	ip, [sp, #572]	; 0x23c
   16748:	ldm	r3, {r0, r1}
   1674c:	adds	r2, r4, fp
   16750:	adc	r3, r5, fp, asr #31
   16754:	stm	lr, {r0, r1}
   16758:	add	r1, sp, #568	; 0x238
   1675c:	mov	r5, r3
   16760:	str	ip, [sp, #576]	; 0x240
   16764:	ldr	r3, [sp, #268]	; 0x10c
   16768:	str	ip, [sp, #588]	; 0x24c
   1676c:	str	ip, [sp, #580]	; 0x244
   16770:	str	ip, [sp, #584]	; 0x248
   16774:	str	ip, [sp, #592]	; 0x250
   16778:	strb	ip, [sp, #596]	; 0x254
   1677c:	strb	ip, [sp, #604]	; 0x25c
   16780:	str	ip, [sp, #620]	; 0x26c
   16784:	ldr	r7, [pc, #800]	; 16aac <__assert_fail@plt+0x5644>
   16788:	str	ip, [sp, #600]	; 0x258
   1678c:	strh	ip, [r1]
   16790:	ldr	r8, [sp, #44]	; 0x2c
   16794:	add	r1, sp, #596	; 0x254
   16798:	mov	r4, r2
   1679c:	add	r1, r1, #2
   167a0:	ldr	r2, [pc, #924]	; 16b44 <__assert_fail@plt+0x56dc>
   167a4:	add	r9, r9, #171008	; 0x29c00
   167a8:	mov	fp, ip
   167ac:	strh	ip, [r1]
   167b0:	str	r3, [sp, #608]	; 0x260
   167b4:	str	r2, [sp, #612]	; 0x264
   167b8:	mov	r3, #0
   167bc:	mvn	r2, #0
   167c0:	cmp	r5, r3
   167c4:	cmpeq	r4, r2
   167c8:	bhi	1681c <__assert_fail@plt+0x53b4>
   167cc:	add	r2, sp, #316	; 0x13c
   167d0:	add	r1, sp, #272	; 0x110
   167d4:	mov	r0, r8
   167d8:	str	r6, [sp, #272]	; 0x110
   167dc:	bl	1b670 <__assert_fail@plt+0xa208>
   167e0:	cmp	r0, #0
   167e4:	beq	16804 <__assert_fail@plt+0x539c>
   167e8:	ldr	r3, [sp, #356]	; 0x164
   167ec:	cmp	r3, #0
   167f0:	beq	16804 <__assert_fail@plt+0x539c>
   167f4:	ldr	r2, [sp, #348]	; 0x15c
   167f8:	ldr	r1, [sp, #616]	; 0x268
   167fc:	cmp	r2, r1
   16800:	bne	172ac <__assert_fail@plt+0x5e44>
   16804:	add	r6, r6, #7733248	; 0x760000
   16808:	adds	r4, r4, r7
   1680c:	add	r6, r6, #42752	; 0xa700
   16810:	adc	r5, r5, fp
   16814:	cmp	r9, r6
   16818:	bne	167b8 <__assert_fail@plt+0x5350>
   1681c:	ldr	r0, [sp, #608]	; 0x260
   16820:	cmp	r0, #0
   16824:	beq	16848 <__assert_fail@plt+0x53e0>
   16828:	ldr	r1, [sp, #620]	; 0x26c
   1682c:	cmp	r1, #0
   16830:	beq	16848 <__assert_fail@plt+0x53e0>
   16834:	bl	1112c <strcmp@plt>
   16838:	cmp	r0, #0
   1683c:	mvneq	r3, #0
   16840:	streq	r0, [sp, #620]	; 0x26c
   16844:	streq	r3, [sp, #616]	; 0x268
   16848:	add	r0, sp, #416	; 0x1a0
   1684c:	bl	13410 <__assert_fail@plt+0x1fa8>
   16850:	subs	r5, r0, #0
   16854:	bne	16a54 <__assert_fail@plt+0x55ec>
   16858:	ldrb	r4, [sp, #597]	; 0x255
   1685c:	cmp	r4, #0
   16860:	bne	16bfc <__assert_fail@plt+0x5794>
   16864:	ldrb	r6, [sp, #568]	; 0x238
   16868:	cmp	r6, #0
   1686c:	beq	169d0 <__assert_fail@plt+0x5568>
   16870:	add	r3, sp, #504	; 0x1f8
   16874:	ldm	r3, {r0, r1}
   16878:	ldr	r3, [sp, #68]	; 0x44
   1687c:	stm	r3, {r0, r1}
   16880:	cmp	r4, #0
   16884:	moveq	r6, #1
   16888:	beq	16994 <__assert_fail@plt+0x552c>
   1688c:	ldr	r3, [sp, #64]	; 0x40
   16890:	cmp	r3, #0
   16894:	beq	172c8 <__assert_fail@plt+0x5e60>
   16898:	ldr	r1, [pc, #648]	; 16b28 <__assert_fail@plt+0x56c0>
   1689c:	ldr	r0, [sp, #64]	; 0x40
   168a0:	bl	1112c <strcmp@plt>
   168a4:	mov	r2, #5
   168a8:	cmp	r0, #0
   168ac:	bne	1715c <__assert_fail@plt+0x5cf4>
   168b0:	ldr	r1, [pc, #504]	; 16ab0 <__assert_fail@plt+0x5648>
   168b4:	bl	111b0 <dcgettext@plt>
   168b8:	bl	12a38 <__assert_fail@plt+0x15d0>
   168bc:	ldr	r8, [sp, #68]	; 0x44
   168c0:	ldr	r1, [pc, #492]	; 16ab4 <__assert_fail@plt+0x564c>
   168c4:	mov	r2, #5
   168c8:	ldr	r6, [r8]
   168cc:	ldr	r5, [r8, #4]
   168d0:	mov	r0, #0
   168d4:	asr	r7, r6, #31
   168d8:	bl	111b0 <dcgettext@plt>
   168dc:	mov	r2, r6
   168e0:	mov	r3, r7
   168e4:	str	r5, [sp]
   168e8:	bl	12a38 <__assert_fail@plt+0x15d0>
   168ec:	add	r1, sp, #272	; 0x110
   168f0:	mov	r0, r8
   168f4:	bl	11114 <gmtime_r@plt>
   168f8:	cmp	r0, #0
   168fc:	beq	16930 <__assert_fail@plt+0x54c8>
   16900:	mov	r2, #5
   16904:	ldr	r1, [pc, #428]	; 16ab8 <__assert_fail@plt+0x5650>
   16908:	mov	r0, #0
   1690c:	bl	111b0 <dcgettext@plt>
   16910:	mov	r1, #0
   16914:	add	r2, sp, #696	; 0x2b8
   16918:	mov	r5, r0
   1691c:	add	r0, sp, #272	; 0x110
   16920:	bl	12e20 <__assert_fail@plt+0x19b8>
   16924:	mov	r1, r0
   16928:	mov	r0, r5
   1692c:	bl	12a38 <__assert_fail@plt+0x15d0>
   16930:	ldr	r1, [sp, #68]	; 0x44
   16934:	add	r2, sp, #316	; 0x13c
   16938:	ldr	r0, [sp, #44]	; 0x2c
   1693c:	bl	1b670 <__assert_fail@plt+0xa208>
   16940:	cmp	r0, #0
   16944:	beq	16990 <__assert_fail@plt+0x5528>
   16948:	mov	r2, #5
   1694c:	ldr	r1, [pc, #360]	; 16abc <__assert_fail@plt+0x5654>
   16950:	mov	r0, #0
   16954:	ldr	r7, [sp, #352]	; 0x160
   16958:	bl	111b0 <dcgettext@plt>
   1695c:	add	r2, sp, #696	; 0x2b8
   16960:	mov	r1, #0
   16964:	mov	r5, r0
   16968:	add	r0, sp, #316	; 0x13c
   1696c:	bl	12e20 <__assert_fail@plt+0x19b8>
   16970:	add	r1, sp, #668	; 0x29c
   16974:	mov	r6, r0
   16978:	mov	r0, r7
   1697c:	bl	128a0 <__assert_fail@plt+0x1438>
   16980:	mov	r1, r6
   16984:	mov	r2, r0
   16988:	mov	r0, r5
   1698c:	bl	12a38 <__assert_fail@plt+0x15d0>
   16990:	mov	r6, r4
   16994:	ldr	r0, [sp, #44]	; 0x2c
   16998:	ldr	r3, [sp, #56]	; 0x38
   1699c:	cmp	r0, r3
   169a0:	beq	169a8 <__assert_fail@plt+0x5540>
   169a4:	bl	1b664 <__assert_fail@plt+0xa1fc>
   169a8:	ldr	r0, [sp, #60]	; 0x3c
   169ac:	bl	1115c <free@plt>
   169b0:	ldr	r3, [pc, #232]	; 16aa0 <__assert_fail@plt+0x5638>
   169b4:	ldr	r2, [sp, #996]	; 0x3e4
   169b8:	mov	r0, r6
   169bc:	ldr	r3, [r3]
   169c0:	cmp	r2, r3
   169c4:	bne	1831c <__assert_fail@plt+0x6eb4>
   169c8:	add	sp, sp, #1004	; 0x3ec
   169cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169d0:	ldr	r0, [sp, #588]	; 0x24c
   169d4:	ldr	r1, [sp, #572]	; 0x23c
   169d8:	ldr	ip, [sp, #576]	; 0x240
   169dc:	orr	r3, r0, r1
   169e0:	orr	r3, r3, ip
   169e4:	ldr	lr, [sp, #584]	; 0x248
   169e8:	ldr	r2, [sp, #580]	; 0x244
   169ec:	ldr	ip, [sp, #592]	; 0x250
   169f0:	orr	r3, r3, lr
   169f4:	add	r2, r2, ip
   169f8:	orr	r3, r3, r2
   169fc:	cmp	r3, #1
   16a00:	ble	16c70 <__assert_fail@plt+0x5808>
   16a04:	cmp	r4, #0
   16a08:	beq	16994 <__assert_fail@plt+0x552c>
   16a0c:	cmp	r0, #1
   16a10:	bgt	17174 <__assert_fail@plt+0x5d0c>
   16a14:	cmp	r1, #1
   16a18:	bgt	1719c <__assert_fail@plt+0x5d34>
   16a1c:	ldr	r3, [sp, #576]	; 0x240
   16a20:	cmp	r3, #1
   16a24:	bgt	17190 <__assert_fail@plt+0x5d28>
   16a28:	ldr	r3, [sp, #584]	; 0x248
   16a2c:	cmp	r3, #1
   16a30:	bgt	17184 <__assert_fail@plt+0x5d1c>
   16a34:	ldr	r3, [sp, #580]	; 0x244
   16a38:	ldr	r2, [sp, #592]	; 0x250
   16a3c:	add	r3, r3, r2
   16a40:	cmp	r3, #1
   16a44:	ble	16994 <__assert_fail@plt+0x552c>
   16a48:	ldr	r0, [pc, #112]	; 16ac0 <__assert_fail@plt+0x5658>
   16a4c:	bl	12a38 <__assert_fail@plt+0x15d0>
   16a50:	b	16994 <__assert_fail@plt+0x552c>
   16a54:	ldrb	r6, [sp, #597]	; 0x255
   16a58:	cmp	r6, #0
   16a5c:	beq	16994 <__assert_fail@plt+0x552c>
   16a60:	ldr	r1, [sp, #72]	; 0x48
   16a64:	ldr	r3, [sp, #48]	; 0x30
   16a68:	ldr	r2, [sp, #416]	; 0x1a0
   16a6c:	add	r3, r3, r1
   16a70:	cmp	r2, r3
   16a74:	mov	r0, #0
   16a78:	ldrcs	r1, [pc, #68]	; 16ac4 <__assert_fail@plt+0x565c>
   16a7c:	ldrcc	r1, [pc, #68]	; 16ac8 <__assert_fail@plt+0x5660>
   16a80:	mov	r2, #5
   16a84:	bl	111b0 <dcgettext@plt>
   16a88:	ldr	r1, [sp, #416]	; 0x1a0
   16a8c:	bl	12a38 <__assert_fail@plt+0x15d0>
   16a90:	mov	r6, #0
   16a94:	b	16994 <__assert_fail@plt+0x552c>
   16a98:	rsbshi	sl, r6, r0, lsl #14
   16a9c:	andeq	r0, r0, r0
   16aa0:	andeq	r2, r3, r8, lsl #30
   16aa4:	andeq	r0, r2, r8, lsr pc
   16aa8:	andeq	r0, r2, r4, lsr #30
   16aac:	rsbseq	sl, r6, r0, lsl #14
   16ab0:	andeq	r1, r2, r4, asr #16
   16ab4:	andeq	r1, r2, r8, lsl #17
   16ab8:	andeq	r1, r2, ip, lsr #17
   16abc:	andeq	r1, r2, r0, asr #17
   16ac0:	andeq	r1, r2, r0, ror #1
   16ac4:	andeq	r0, r2, r0, asr #30
   16ac8:	andeq	r0, r2, r8, asr pc
   16acc:	andeq	r0, r2, r0, lsl #31
   16ad0:	andeq	r3, r3, r0, lsr #3
   16ad4:	andeq	r0, r2, r8, asr #31
   16ad8:	andeq	r1, r2, r8, asr r2
   16adc:	andeq	r1, r2, ip, ror r2
   16ae0:	muleq	r2, ip, r2
   16ae4:			; <UNDEFINED> instruction: 0x000218bc
   16ae8:	andeq	r0, r2, r4, lsr pc
   16aec:			; <UNDEFINED> instruction: 0x000212bc
   16af0:	strdeq	r1, [r2], -r8
   16af4:	strdeq	r1, [r2], -r8
   16af8:	andeq	r1, r2, ip, ror #6
   16afc:	muleq	r2, r0, r3
   16b00:	andeq	r1, r2, r4, lsr #7
   16b04:			; <UNDEFINED> instruction: 0x000213b8
   16b08:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   16b0c:	andeq	r1, r2, r8, lsr r0
   16b10:	andeq	r1, r2, r0, asr #32
   16b14:	andeq	r1, r2, r0, ror #16
   16b18:	andeq	r1, r2, r8, asr #32
   16b1c:	strheq	r1, [r2], -r4
   16b20:	muleq	r2, r0, r0
   16b24:	andeq	r1, r2, ip, rrx
   16b28:	andeq	r0, r2, r0, ror #31
   16b2c:	andeq	r0, r2, r8, ror #31
   16b30:	andeq	r0, r0, ip, ror #14
   16b34:	andeq	r1, r2, r8, lsl #2
   16b38:	andeq	r1, r2, r4, asr r1
   16b3c:			; <UNDEFINED> instruction: 0xfffff894
   16b40:			; <UNDEFINED> instruction: 0x00020fb0
   16b44:	andeq	r0, r0, sp, lsl #2
   16b48:	andeq	r1, r2, r8, lsr #16
   16b4c:	andeq	r5, r0, r8, asr r8
   16b50:	subls	r2, r9, #-1828716544	; 0x93000000
   16b54:	cmp	r0, #100	; 0x64
   16b58:	bgt	1706c <__assert_fail@plt+0x5c04>
   16b5c:	add	r3, sp, #796	; 0x31c
   16b60:	str	r3, [sp, #64]	; 0x40
   16b64:	mov	r3, #0
   16b68:	str	r3, [sp, #60]	; 0x3c
   16b6c:	cmp	r8, #34	; 0x22
   16b70:	ldr	r2, [sp, #64]	; 0x40
   16b74:	beq	16ba0 <__assert_fail@plt+0x5738>
   16b78:	sub	r8, r8, #92	; 0x5c
   16b7c:	clz	r8, r8
   16b80:	lsr	r8, r8, #5
   16b84:	add	r3, r9, r8
   16b88:	ldrb	r1, [r9, r8]
   16b8c:	ldrb	r8, [r3, #1]
   16b90:	add	r9, r3, #1
   16b94:	strb	r1, [r2], #1
   16b98:	cmp	r8, #34	; 0x22
   16b9c:	bne	16b78 <__assert_fail@plt+0x5710>
   16ba0:	mov	r3, #0
   16ba4:	strb	r3, [r2]
   16ba8:	ldr	r0, [sp, #64]	; 0x40
   16bac:	bl	1b3e4 <__assert_fail@plt+0x9f7c>
   16bb0:	subs	r3, r0, #0
   16bb4:	str	r3, [sp, #44]	; 0x2c
   16bb8:	beq	172a4 <__assert_fail@plt+0x5e3c>
   16bbc:	add	r9, r9, #1
   16bc0:	mov	r4, r9
   16bc4:	ldrb	r3, [r9], #1
   16bc8:	cmp	r3, #9
   16bcc:	bcc	16be0 <__assert_fail@plt+0x5778>
   16bd0:	cmp	r3, #13
   16bd4:	bls	16bc0 <__assert_fail@plt+0x5758>
   16bd8:	cmp	r3, #32
   16bdc:	beq	16bc0 <__assert_fail@plt+0x5758>
   16be0:	mov	r1, r7
   16be4:	add	r2, sp, #228	; 0xe4
   16be8:	ldr	r0, [sp, #44]	; 0x2c
   16bec:	bl	1b670 <__assert_fail@plt+0xa208>
   16bf0:	cmp	r0, #0
   16bf4:	bne	16658 <__assert_fail@plt+0x51f0>
   16bf8:	b	16a90 <__assert_fail@plt+0x5628>
   16bfc:	mov	r2, #5
   16c00:	ldr	r1, [pc, #-316]	; 16acc <__assert_fail@plt+0x5664>
   16c04:	bl	111b0 <dcgettext@plt>
   16c08:	bl	12a38 <__assert_fail@plt+0x15d0>
   16c0c:	ldrb	r0, [sp, #568]	; 0x238
   16c10:	ldr	r4, [pc, #-328]	; 16ad0 <__assert_fail@plt+0x5668>
   16c14:	cmp	r0, #0
   16c18:	bne	170a8 <__assert_fail@plt+0x5c40>
   16c1c:	ldr	r6, [sp, #592]	; 0x250
   16c20:	ldr	r5, [r4]
   16c24:	cmp	r6, #0
   16c28:	bne	17298 <__assert_fail@plt+0x5e30>
   16c2c:	ldr	r7, [sp, #64]	; 0x40
   16c30:	cmp	r7, #0
   16c34:	beq	17878 <__assert_fail@plt+0x6410>
   16c38:	ldr	r3, [sp, #56]	; 0x38
   16c3c:	ldr	r2, [sp, #44]	; 0x2c
   16c40:	cmp	r3, r2
   16c44:	beq	171bc <__assert_fail@plt+0x5d54>
   16c48:	mov	r0, r6
   16c4c:	mov	r2, #5
   16c50:	ldr	r1, [pc, #-388]	; 16ad4 <__assert_fail@plt+0x566c>
   16c54:	bl	111b0 <dcgettext@plt>
   16c58:	mov	r3, r7
   16c5c:	mov	r1, #1
   16c60:	mov	r2, r0
   16c64:	mov	r0, r5
   16c68:	bl	11384 <__fprintf_chk@plt>
   16c6c:	b	170cc <__assert_fail@plt+0x5c64>
   16c70:	ldrd	r8, [sl, #32]
   16c74:	cmp	r8, #0
   16c78:	sbcs	r3, r9, #0
   16c7c:	blt	17264 <__assert_fail@plt+0x5dfc>
   16c80:	ldr	r3, [sp, #464]	; 0x1d0
   16c84:	cmp	r3, #2
   16c88:	beq	171dc <__assert_fail@plt+0x5d74>
   16c8c:	ldr	r3, [pc, #-344]	; 16b3c <__assert_fail@plt+0x56d4>
   16c90:	ldr	r2, [pc, #-360]	; 16b30 <__assert_fail@plt+0x56c8>
   16c94:	adds	r3, r8, r3
   16c98:	str	r3, [sp, #80]	; 0x50
   16c9c:	mvn	r1, #0
   16ca0:	mov	r3, #0
   16ca4:	adc	r1, r9, r1
   16ca8:	cmp	r9, r3
   16cac:	str	r1, [sp, #84]	; 0x54
   16cb0:	cmpeq	r8, r2
   16cb4:	mov	ip, #0
   16cb8:	ldrd	r2, [sp, #80]	; 0x50
   16cbc:	bcs	171a8 <__assert_fail@plt+0x5d40>
   16cc0:	cmp	r2, #0
   16cc4:	sbcs	r3, r3, #0
   16cc8:	bge	171b4 <__assert_fail@plt+0x5d4c>
   16ccc:	ldrd	r0, [sp, #80]	; 0x50
   16cd0:	asr	r3, r0, #31
   16cd4:	cmp	r1, r3
   16cd8:	cmpeq	r0, r0
   16cdc:	movne	ip, #1
   16ce0:	and	r7, ip, #1
   16ce4:	str	r0, [sp, #160]	; 0xa0
   16ce8:	cmp	r7, #0
   16cec:	bne	17238 <__assert_fail@plt+0x5dd0>
   16cf0:	ldrd	r2, [sl, #48]	; 0x30
   16cf4:	mvn	r4, #0
   16cf8:	mvn	r5, #0
   16cfc:	adds	r0, r2, r4
   16d00:	adcs	r1, r3, r5
   16d04:	asr	r3, r0, #31
   16d08:	movvs	lr, #1
   16d0c:	movvc	lr, #0
   16d10:	cmp	r1, r3
   16d14:	cmpeq	r0, r0
   16d18:	movne	lr, #1
   16d1c:	cmp	lr, #0
   16d20:	ldrb	ip, [sp, #597]	; 0x255
   16d24:	str	r0, [sp, #156]	; 0x9c
   16d28:	mov	lr, r0
   16d2c:	bne	17244 <__assert_fail@plt+0x5ddc>
   16d30:	ldrd	r4, [sl, #56]	; 0x38
   16d34:	asr	r1, r4, #31
   16d38:	cmp	r5, r1
   16d3c:	cmpeq	r4, r4
   16d40:	movne	r3, #1
   16d44:	moveq	r3, #0
   16d48:	str	r4, [sp, #152]	; 0x98
   16d4c:	str	r3, [sp, #32]
   16d50:	bne	17244 <__assert_fail@plt+0x5ddc>
   16d54:	ldr	r0, [sp, #588]	; 0x24c
   16d58:	cmp	r0, #0
   16d5c:	bne	177f4 <__assert_fail@plt+0x638c>
   16d60:	ldrb	r3, [sp, #569]	; 0x239
   16d64:	cmp	r3, #0
   16d68:	beq	17a10 <__assert_fail@plt+0x65a8>
   16d6c:	ldr	r3, [sp, #572]	; 0x23c
   16d70:	cmp	r3, #0
   16d74:	bne	17a10 <__assert_fail@plt+0x65a8>
   16d78:	ldr	r2, [sp, #576]	; 0x240
   16d7c:	cmp	r2, #0
   16d80:	beq	177f4 <__assert_fail@plt+0x638c>
   16d84:	cmp	ip, #0
   16d88:	str	r7, [sp, #140]	; 0x8c
   16d8c:	str	r7, [sp, #144]	; 0x90
   16d90:	str	r7, [sp, #148]	; 0x94
   16d94:	str	r7, [sp, #508]	; 0x1fc
   16d98:	bne	17a34 <__assert_fail@plt+0x65cc>
   16d9c:	mov	ip, r7
   16da0:	mov	r5, r7
   16da4:	mvn	r2, #0
   16da8:	str	r2, [sp, #172]	; 0xac
   16dac:	ldr	r2, [sp, #580]	; 0x244
   16db0:	str	r5, [sp, #188]	; 0xbc
   16db4:	cmp	r2, #0
   16db8:	ldr	r5, [sp, #44]	; 0x2c
   16dbc:	ldrne	r2, [sp, #436]	; 0x1b4
   16dc0:	ldreq	r2, [sp, #172]	; 0xac
   16dc4:	ldr	r9, [sp, #160]	; 0xa0
   16dc8:	add	r1, sp, #140	; 0x8c
   16dcc:	mov	r0, r5
   16dd0:	strne	r2, [sp, #172]	; 0xac
   16dd4:	str	r3, [sp, #184]	; 0xb8
   16dd8:	str	ip, [sp, #192]	; 0xc0
   16ddc:	str	lr, [sp, #200]	; 0xc8
   16de0:	str	r2, [sp, #216]	; 0xd8
   16de4:	str	r9, [sp, #204]	; 0xcc
   16de8:	str	r4, [sp, #196]	; 0xc4
   16dec:	bl	1b70c <__assert_fail@plt+0xa2a4>
   16df0:	add	r2, sp, #140	; 0x8c
   16df4:	add	r1, sp, #184	; 0xb8
   16df8:	mov	r3, r0
   16dfc:	mov	r9, r0
   16e00:	mov	r0, r5
   16e04:	bl	12ab4 <__assert_fail@plt+0x164c>
   16e08:	cmp	r0, #0
   16e0c:	bne	1737c <__assert_fail@plt+0x5f14>
   16e10:	ldr	r3, [sp, #592]	; 0x250
   16e14:	cmp	r3, #0
   16e18:	str	r3, [sp, #48]	; 0x30
   16e1c:	bne	172e0 <__assert_fail@plt+0x5e78>
   16e20:	ldr	r3, [sp, #184]	; 0xb8
   16e24:	ldr	r2, [sp, #140]	; 0x8c
   16e28:	ldr	r1, [sp, #188]	; 0xbc
   16e2c:	ldr	r0, [sp, #144]	; 0x90
   16e30:	str	r3, [sp, #72]	; 0x48
   16e34:	cmp	r3, r2
   16e38:	cmpeq	r1, r0
   16e3c:	str	r2, [sp, #80]	; 0x50
   16e40:	ldr	r3, [sp, #148]	; 0x94
   16e44:	ldr	r2, [sp, #160]	; 0xa0
   16e48:	ldr	ip, [sp, #192]	; 0xc0
   16e4c:	str	r3, [sp, #64]	; 0x40
   16e50:	str	r2, [sp, #68]	; 0x44
   16e54:	str	r1, [sp, #88]	; 0x58
   16e58:	str	r0, [sp, #96]	; 0x60
   16e5c:	mov	r8, ip
   16e60:	ldr	sl, [sp, #196]	; 0xc4
   16e64:	ldr	fp, [sp, #152]	; 0x98
   16e68:	ldr	r9, [sp, #200]	; 0xc8
   16e6c:	ldr	r7, [sp, #156]	; 0x9c
   16e70:	ldr	r3, [sp, #204]	; 0xcc
   16e74:	ldrb	r2, [sp, #597]	; 0x255
   16e78:	bne	17f64 <__assert_fail@plt+0x6afc>
   16e7c:	ldr	ip, [sp, #64]	; 0x40
   16e80:	sub	r1, sl, fp
   16e84:	cmp	r8, ip
   16e88:	clz	r1, r1
   16e8c:	lsr	r1, r1, #5
   16e90:	moveq	r1, #0
   16e94:	cmp	r1, #0
   16e98:	beq	17f64 <__assert_fail@plt+0x6afc>
   16e9c:	ldr	r1, [sp, #68]	; 0x44
   16ea0:	cmp	r9, r7
   16ea4:	cmpeq	r3, r1
   16ea8:	bne	17f64 <__assert_fail@plt+0x6afc>
   16eac:	cmp	r2, #0
   16eb0:	beq	16994 <__assert_fail@plt+0x552c>
   16eb4:	mov	r2, #5
   16eb8:	ldr	r1, [pc, #-1000]	; 16ad8 <__assert_fail@plt+0x5670>
   16ebc:	mov	r0, #0
   16ec0:	bl	111b0 <dcgettext@plt>
   16ec4:	bl	12a38 <__assert_fail@plt+0x15d0>
   16ec8:	mov	r2, #5
   16ecc:	ldr	r1, [pc, #-1016]	; 16adc <__assert_fail@plt+0x5674>
   16ed0:	mov	r0, #0
   16ed4:	bl	111b0 <dcgettext@plt>
   16ed8:	add	r4, sp, #896	; 0x380
   16edc:	mov	r2, r4
   16ee0:	add	r1, sp, #416	; 0x1a0
   16ee4:	mov	r5, r0
   16ee8:	add	r0, sp, #184	; 0xb8
   16eec:	bl	12e20 <__assert_fail@plt+0x19b8>
   16ef0:	mov	r1, r0
   16ef4:	mov	r0, r5
   16ef8:	bl	12a38 <__assert_fail@plt+0x15d0>
   16efc:	mov	r2, #5
   16f00:	ldr	r1, [pc, #-1064]	; 16ae0 <__assert_fail@plt+0x5678>
   16f04:	mov	r0, #0
   16f08:	bl	111b0 <dcgettext@plt>
   16f0c:	mov	r2, r4
   16f10:	add	r1, sp, #416	; 0x1a0
   16f14:	mov	r5, r0
   16f18:	add	r0, sp, #140	; 0x8c
   16f1c:	bl	12e20 <__assert_fail@plt+0x19b8>
   16f20:	mov	r1, r0
   16f24:	mov	r0, r5
   16f28:	bl	12a38 <__assert_fail@plt+0x15d0>
   16f2c:	ldr	r1, [pc, #-1104]	; 16ae4 <__assert_fail@plt+0x567c>
   16f30:	ldr	ip, [pc, #-1104]	; 16ae8 <__assert_fail@plt+0x5680>
   16f34:	mov	r0, r1
   16f38:	mov	r2, r1
   16f3c:	mov	r3, #1
   16f40:	str	r3, [sp, #32]
   16f44:	ldr	lr, [sp, #96]	; 0x60
   16f48:	str	ip, [sp, #16]
   16f4c:	ldr	ip, [sp, #88]	; 0x58
   16f50:	ldr	r5, [pc, #-1140]	; 16ae4 <__assert_fail@plt+0x567c>
   16f54:	cmp	ip, lr
   16f58:	ldr	r3, [pc, #-1144]	; 16ae8 <__assert_fail@plt+0x5680>
   16f5c:	ldr	r8, [sp, #72]	; 0x48
   16f60:	ldr	ip, [sp, #80]	; 0x50
   16f64:	movne	lr, r3
   16f68:	moveq	lr, r5
   16f6c:	str	r2, [sp, #12]
   16f70:	cmp	r8, ip
   16f74:	ldr	r2, [pc, #-1168]	; 16aec <__assert_fail@plt+0x5684>
   16f78:	movne	r5, r3
   16f7c:	mov	r3, #100	; 0x64
   16f80:	str	r0, [sp, #8]
   16f84:	str	r1, [sp, #4]
   16f88:	str	r2, [sp]
   16f8c:	mov	r1, r3
   16f90:	str	lr, [sp, #20]
   16f94:	str	r5, [sp, #24]
   16f98:	mov	r2, #1
   16f9c:	mov	r0, r4
   16fa0:	bl	1145c <__snprintf_chk@plt>
   16fa4:	ldrb	r3, [sp, #947]	; 0x3b3
   16fa8:	cmp	r3, #32
   16fac:	bne	18320 <__assert_fail@plt+0x6eb8>
   16fb0:	add	r2, sp, #944	; 0x3b0
   16fb4:	ldr	r8, [sp, #32]
   16fb8:	add	r2, r2, #3
   16fbc:	mov	r3, #51	; 0x33
   16fc0:	ldrb	r0, [r2, #-1]!
   16fc4:	sub	r1, r3, #1
   16fc8:	cmp	r0, #32
   16fcc:	bne	16fd8 <__assert_fail@plt+0x5b70>
   16fd0:	subs	r3, r1, #0
   16fd4:	bne	16fc0 <__assert_fail@plt+0x5b58>
   16fd8:	str	r8, [sp, #32]
   16fdc:	add	r2, sp, #1000	; 0x3e8
   16fe0:	add	r3, r2, r3
   16fe4:	mov	r1, r4
   16fe8:	ldr	r0, [pc, #-1280]	; 16af0 <__assert_fail@plt+0x5688>
   16fec:	mov	r4, #0
   16ff0:	strb	r4, [r3, #-104]	; 0xffffff98
   16ff4:	bl	12a38 <__assert_fail@plt+0x15d0>
   16ff8:	mov	r2, #5
   16ffc:	ldr	r1, [pc, #-1296]	; 16af4 <__assert_fail@plt+0x568c>
   17000:	mov	r0, r4
   17004:	bl	111b0 <dcgettext@plt>
   17008:	bl	12a38 <__assert_fail@plt+0x15d0>
   1700c:	ldr	r3, [sp, #32]
   17010:	cmp	r3, r4
   17014:	bne	18304 <__assert_fail@plt+0x6e9c>
   17018:	cmp	sl, fp
   1701c:	cmpne	r9, r7
   17020:	bne	182ec <__assert_fail@plt+0x6e84>
   17024:	mov	r2, #5
   17028:	ldr	r1, [pc, #-1336]	; 16af8 <__assert_fail@plt+0x5690>
   1702c:	mov	r0, #0
   17030:	bl	111b0 <dcgettext@plt>
   17034:	bl	12a38 <__assert_fail@plt+0x15d0>
   17038:	ldr	r3, [sp, #48]	; 0x30
   1703c:	cmp	r3, #0
   17040:	movne	r2, #5
   17044:	ldrne	r1, [pc, #-1360]	; 16afc <__assert_fail@plt+0x5694>
   17048:	ldreq	r1, [pc, #-1360]	; 16b00 <__assert_fail@plt+0x5698>
   1704c:	movne	r0, #0
   17050:	ldreq	r0, [sp, #48]	; 0x30
   17054:	moveq	r2, #5
   17058:	bl	111b0 <dcgettext@plt>
   1705c:	mov	r1, r0
   17060:	ldr	r0, [pc, #-1380]	; 16b04 <__assert_fail@plt+0x569c>
   17064:	bl	12a38 <__assert_fail@plt+0x15d0>
   17068:	b	16994 <__assert_fail@plt+0x552c>
   1706c:	bl	11288 <malloc@plt>
   17070:	subs	r3, r0, #0
   17074:	str	r3, [sp, #60]	; 0x3c
   17078:	beq	17098 <__assert_fail@plt+0x5c30>
   1707c:	ldr	r3, [sp, #60]	; 0x3c
   17080:	str	r3, [sp, #64]	; 0x40
   17084:	b	16b6c <__assert_fail@plt+0x5704>
   17088:	add	r0, sp, #132	; 0x84
   1708c:	bl	126c0 <__assert_fail@plt+0x1258>
   17090:	add	r7, sp, #132	; 0x84
   17094:	b	16584 <__assert_fail@plt+0x511c>
   17098:	mov	r3, #0
   1709c:	str	r3, [sp, #60]	; 0x3c
   170a0:	mov	r6, r3
   170a4:	b	169a8 <__assert_fail@plt+0x5540>
   170a8:	mov	r0, r5
   170ac:	ldr	r1, [pc, #-1452]	; 16b08 <__assert_fail@plt+0x56a0>
   170b0:	ldr	r5, [r4]
   170b4:	mov	r2, #5
   170b8:	bl	111b0 <dcgettext@plt>
   170bc:	mov	r1, #1
   170c0:	mov	r2, r0
   170c4:	mov	r0, r5
   170c8:	bl	11384 <__fprintf_chk@plt>
   170cc:	ldr	r2, [sp, #580]	; 0x244
   170d0:	ldr	r3, [sp, #592]	; 0x250
   170d4:	cmp	r2, #0
   170d8:	ldr	r5, [r4]
   170dc:	beq	17110 <__assert_fail@plt+0x5ca8>
   170e0:	cmp	r3, #0
   170e4:	bne	17118 <__assert_fail@plt+0x5cb0>
   170e8:	ldr	r3, [sp, #436]	; 0x1b4
   170ec:	cmp	r3, #0
   170f0:	ble	1713c <__assert_fail@plt+0x5cd4>
   170f4:	mov	r3, r5
   170f8:	mov	r2, #5
   170fc:	mov	r1, #1
   17100:	ldr	r0, [pc, #-1532]	; 16b0c <__assert_fail@plt+0x56a4>
   17104:	bl	11210 <fwrite@plt>
   17108:	ldr	r3, [sp, #592]	; 0x250
   1710c:	ldr	r5, [r4]
   17110:	cmp	r3, #0
   17114:	beq	1713c <__assert_fail@plt+0x5cd4>
   17118:	add	r1, sp, #668	; 0x29c
   1711c:	ldr	r0, [sp, #440]	; 0x1b8
   17120:	bl	128a0 <__assert_fail@plt+0x1438>
   17124:	ldr	r2, [pc, #-1564]	; 16b10 <__assert_fail@plt+0x56a8>
   17128:	mov	r1, #1
   1712c:	mov	r3, r0
   17130:	mov	r0, r5
   17134:	bl	11384 <__fprintf_chk@plt>
   17138:	ldr	r5, [r4]
   1713c:	mov	r1, r5
   17140:	mov	r0, #10
   17144:	bl	113d8 <fputc@plt>
   17148:	ldrb	r6, [sp, #568]	; 0x238
   1714c:	ldrb	r4, [sp, #597]	; 0x255
   17150:	cmp	r6, #0
   17154:	beq	169d0 <__assert_fail@plt+0x5568>
   17158:	b	16870 <__assert_fail@plt+0x5408>
   1715c:	ldr	r1, [pc, #-1616]	; 16b14 <__assert_fail@plt+0x56ac>
   17160:	mov	r0, #0
   17164:	bl	111b0 <dcgettext@plt>
   17168:	ldr	r1, [sp, #64]	; 0x40
   1716c:	bl	12a38 <__assert_fail@plt+0x15d0>
   17170:	b	168bc <__assert_fail@plt+0x5454>
   17174:	ldr	r0, [pc, #-1636]	; 16b18 <__assert_fail@plt+0x56b0>
   17178:	bl	12a38 <__assert_fail@plt+0x15d0>
   1717c:	ldr	r1, [sp, #572]	; 0x23c
   17180:	b	16a14 <__assert_fail@plt+0x55ac>
   17184:	ldr	r0, [pc, #-1648]	; 16b1c <__assert_fail@plt+0x56b4>
   17188:	bl	12a38 <__assert_fail@plt+0x15d0>
   1718c:	b	16a34 <__assert_fail@plt+0x55cc>
   17190:	ldr	r0, [pc, #-1656]	; 16b20 <__assert_fail@plt+0x56b8>
   17194:	bl	12a38 <__assert_fail@plt+0x15d0>
   17198:	b	16a28 <__assert_fail@plt+0x55c0>
   1719c:	ldr	r0, [pc, #-1664]	; 16b24 <__assert_fail@plt+0x56bc>
   171a0:	bl	12a38 <__assert_fail@plt+0x15d0>
   171a4:	b	16a1c <__assert_fail@plt+0x55b4>
   171a8:	cmp	r2, #0
   171ac:	sbcs	r3, r3, #0
   171b0:	bge	16ccc <__assert_fail@plt+0x5864>
   171b4:	mov	ip, #1
   171b8:	b	16ccc <__assert_fail@plt+0x5864>
   171bc:	ldr	r1, [pc, #-1692]	; 16b28 <__assert_fail@plt+0x56c0>
   171c0:	ldr	r0, [sp, #64]	; 0x40
   171c4:	bl	1112c <strcmp@plt>
   171c8:	cmp	r0, #0
   171cc:	bne	17850 <__assert_fail@plt+0x63e8>
   171d0:	mov	r2, #5
   171d4:	ldr	r1, [pc, #-1712]	; 16b2c <__assert_fail@plt+0x56c4>
   171d8:	b	170b8 <__assert_fail@plt+0x5c50>
   171dc:	cmp	r8, #69	; 0x45
   171e0:	sbcs	r3, r9, #0
   171e4:	movlt	r7, #2000	; 0x7d0
   171e8:	ldrge	r7, [pc, #-1728]	; 16b30 <__assert_fail@plt+0x56c8>
   171ec:	mov	r5, #0
   171f0:	adds	r7, r8, r7
   171f4:	adc	r5, r9, r5
   171f8:	cmp	r4, #0
   171fc:	moveq	r8, r7
   17200:	moveq	r9, r5
   17204:	beq	16c8c <__assert_fail@plt+0x5824>
   17208:	mov	r2, #5
   1720c:	ldr	r1, [pc, #-1760]	; 16b34 <__assert_fail@plt+0x56cc>
   17210:	mov	r0, #0
   17214:	bl	111b0 <dcgettext@plt>
   17218:	mov	r2, r8
   1721c:	mov	r3, r9
   17220:	str	r7, [sp]
   17224:	str	r5, [sp, #4]
   17228:	bl	12a38 <__assert_fail@plt+0x15d0>
   1722c:	mov	r8, r7
   17230:	mov	r9, r5
   17234:	b	16c8c <__assert_fail@plt+0x5824>
   17238:	cmp	r4, #0
   1723c:	bne	17888 <__assert_fail@plt+0x6420>
   17240:	ldrb	ip, [sp, #597]	; 0x255
   17244:	cmp	ip, #0
   17248:	beq	16994 <__assert_fail@plt+0x552c>
   1724c:	mov	r2, #5
   17250:	ldr	r1, [pc, #-1824]	; 16b38 <__assert_fail@plt+0x56d0>
   17254:	mov	r0, #0
   17258:	bl	111b0 <dcgettext@plt>
   1725c:	bl	12a38 <__assert_fail@plt+0x15d0>
   17260:	b	16994 <__assert_fail@plt+0x552c>
   17264:	ldr	r0, [pc, #-1840]	; 16b3c <__assert_fail@plt+0x56d4>
   17268:	mvn	r1, #0
   1726c:	subs	r2, r0, r8
   17270:	sbcs	r3, r1, r9
   17274:	asr	r1, r2, #31
   17278:	mov	ip, r6
   1727c:	movvs	ip, #1
   17280:	cmp	r3, r1
   17284:	cmpeq	r2, r2
   17288:	movne	ip, #1
   1728c:	str	r2, [sp, #160]	; 0xa0
   17290:	and	r7, ip, #1
   17294:	b	16ce8 <__assert_fail@plt+0x5880>
   17298:	mov	r2, #5
   1729c:	ldr	r1, [pc, #-1892]	; 16b40 <__assert_fail@plt+0x56d8>
   172a0:	b	170b8 <__assert_fail@plt+0x5c50>
   172a4:	ldr	r6, [sp, #44]	; 0x2c
   172a8:	b	169a8 <__assert_fail@plt+0x5540>
   172ac:	ldr	r1, [pc, #-1904]	; 16b44 <__assert_fail@plt+0x56dc>
   172b0:	str	r3, [sp, #620]	; 0x26c
   172b4:	mov	r3, #0
   172b8:	str	r2, [sp, #628]	; 0x274
   172bc:	str	r1, [sp, #624]	; 0x270
   172c0:	str	r3, [sp, #632]	; 0x278
   172c4:	b	1681c <__assert_fail@plt+0x53b4>
   172c8:	mov	r0, r3
   172cc:	mov	r2, #5
   172d0:	ldr	r1, [pc, #-1936]	; 16b48 <__assert_fail@plt+0x56e0>
   172d4:	bl	111b0 <dcgettext@plt>
   172d8:	bl	12a38 <__assert_fail@plt+0x15d0>
   172dc:	b	168bc <__assert_fail@plt+0x5454>
   172e0:	ldr	r2, [pc, #-1948]	; 16b4c <__assert_fail@plt+0x56e4>
   172e4:	add	r0, sp, #896	; 0x380
   172e8:	add	r1, sp, #896	; 0x380
   172ec:	strh	r2, [r0]
   172f0:	mov	r3, #88	; 0x58
   172f4:	add	r1, r1, #3
   172f8:	ldr	r0, [sp, #440]	; 0x1b8
   172fc:	strb	r3, [sp, #898]	; 0x382
   17300:	bl	128a0 <__assert_fail@plt+0x1438>
   17304:	add	r0, sp, #896	; 0x380
   17308:	bl	1b3e4 <__assert_fail@plt+0x9f7c>
   1730c:	subs	r4, r0, #0
   17310:	beq	18130 <__assert_fail@plt+0x6cc8>
   17314:	ldrd	r2, [sp, #184]	; 0xb8
   17318:	ldr	r1, [sp, #192]	; 0xc0
   1731c:	ldr	lr, [sp, #196]	; 0xc4
   17320:	ldr	ip, [sp, #200]	; 0xc8
   17324:	str	r2, [sp, #140]	; 0x8c
   17328:	str	r3, [sp, #144]	; 0x90
   1732c:	ldr	r2, [sp, #204]	; 0xcc
   17330:	ldr	r3, [sp, #216]	; 0xd8
   17334:	str	r1, [sp, #148]	; 0x94
   17338:	add	r1, sp, #140	; 0x8c
   1733c:	str	lr, [sp, #152]	; 0x98
   17340:	str	ip, [sp, #156]	; 0x9c
   17344:	str	r2, [sp, #160]	; 0xa0
   17348:	str	r3, [sp, #172]	; 0xac
   1734c:	bl	1b70c <__assert_fail@plt+0xa2a4>
   17350:	add	r2, sp, #140	; 0x8c
   17354:	add	r1, sp, #184	; 0xb8
   17358:	mov	r3, r0
   1735c:	mov	r9, r0
   17360:	mov	r0, r4
   17364:	bl	12ab4 <__assert_fail@plt+0x164c>
   17368:	mov	r5, r0
   1736c:	mov	r0, r4
   17370:	bl	1b664 <__assert_fail@plt+0xa1fc>
   17374:	cmp	r5, #0
   17378:	beq	16e20 <__assert_fail@plt+0x59b8>
   1737c:	ldr	r3, [sp, #576]	; 0x240
   17380:	cmp	r3, #0
   17384:	beq	178ec <__assert_fail@plt+0x6484>
   17388:	ldr	r3, [sp, #572]	; 0x23c
   1738c:	cmp	r3, #0
   17390:	bne	17e04 <__assert_fail@plt+0x699c>
   17394:	ldrd	r4, [sl]
   17398:	cmp	r4, #1
   1739c:	sbcs	r3, r5, #0
   173a0:	strd	r4, [sp, #32]
   173a4:	blt	173cc <__assert_fail@plt+0x5f64>
   173a8:	ldr	r0, [sp, #164]	; 0xa4
   173ac:	ldr	r1, [sp, #432]	; 0x1b0
   173b0:	cmp	r0, r1
   173b4:	beq	173cc <__assert_fail@plt+0x5f64>
   173b8:	subs	r3, r4, #1
   173bc:	str	r3, [sp, #32]
   173c0:	ldr	r3, [sp, #36]	; 0x24
   173c4:	sbc	r3, r3, #0
   173c8:	str	r3, [sp, #36]	; 0x24
   173cc:	ldrd	r0, [sp, #32]
   173d0:	mov	r4, #0
   173d4:	cmp	r1, r0, asr #31
   173d8:	bne	180dc <__assert_fail@plt+0x6c74>
   173dc:	mov	r3, #7
   173e0:	smull	r2, r3, r0, r3
   173e4:	mov	r8, r2
   173e8:	mov	r0, r3
   173ec:	cmp	r4, #0
   173f0:	mov	r3, r0
   173f4:	bne	17e44 <__assert_fail@plt+0x69dc>
   173f8:	ldr	ip, [sp, #164]	; 0xa4
   173fc:	ldr	r0, [sp, #432]	; 0x1b0
   17400:	ldr	r1, [pc, #-2232]	; 16b50 <__assert_fail@plt+0x56e8>
   17404:	sub	r0, r0, ip
   17408:	add	r0, r0, #7
   1740c:	smull	ip, r1, r1, r0
   17410:	add	ip, r1, r0
   17414:	asr	r1, r0, #31
   17418:	rsb	r1, r1, ip, asr #2
   1741c:	rsb	r1, r1, r1, lsl #3
   17420:	sub	r0, r0, r1
   17424:	adds	r4, r0, r8
   17428:	asr	r1, r0, #31
   1742c:	adcs	r5, r1, r3
   17430:	bvs	17e44 <__assert_fail@plt+0x69dc>
   17434:	ldr	r2, [sp, #152]	; 0x98
   17438:	adds	r0, r4, r2
   1743c:	asr	r3, r2, #31
   17440:	adcs	r1, r5, r3
   17444:	asr	r3, r0, #31
   17448:	movvs	r4, #1
   1744c:	movvc	r4, #0
   17450:	cmp	r1, r3
   17454:	cmpeq	r0, r0
   17458:	movne	r4, #1
   1745c:	cmp	r4, #0
   17460:	str	r0, [sp, #152]	; 0x98
   17464:	bne	17e44 <__assert_fail@plt+0x69dc>
   17468:	mvn	r3, #0
   1746c:	add	r1, sp, #140	; 0x8c
   17470:	ldr	r0, [sp, #44]	; 0x2c
   17474:	str	r3, [sp, #172]	; 0xac
   17478:	bl	1b70c <__assert_fail@plt+0xa2a4>
   1747c:	cmn	r0, #1
   17480:	mov	r9, r0
   17484:	beq	17e44 <__assert_fail@plt+0x69dc>
   17488:	ldrb	r8, [sp, #597]	; 0x255
   1748c:	cmp	r8, #0
   17490:	bne	178a8 <__assert_fail@plt+0x6440>
   17494:	ldrd	r2, [sl, #88]	; 0x58
   17498:	ldr	r1, [sl, #104]	; 0x68
   1749c:	ldr	ip, [sl, #108]	; 0x6c
   174a0:	strd	r2, [sp, #32]
   174a4:	ldrd	r2, [sl, #96]	; 0x60
   174a8:	ldr	r0, [sp, #32]
   174ac:	orr	r0, r2, r0
   174b0:	orr	r1, r0, r1
   174b4:	mov	r4, r1
   174b8:	ldr	r1, [sp, #36]	; 0x24
   174bc:	mov	r0, r4
   174c0:	orr	r1, r3, r1
   174c4:	orr	r1, r1, ip
   174c8:	orrs	r1, r0, r1
   174cc:	beq	17c58 <__assert_fail@plt+0x67f0>
   174d0:	ldrd	r4, [sp, #32]
   174d4:	ldr	r0, [sp, #160]	; 0xa0
   174d8:	adds	r8, r0, r4
   174dc:	asr	r1, r0, #31
   174e0:	adcs	r9, r1, r5
   174e4:	asr	r1, r8, #31
   174e8:	movvs	ip, #1
   174ec:	movvc	ip, #0
   174f0:	cmp	r9, r1
   174f4:	cmpeq	r8, r8
   174f8:	bne	16994 <__assert_fail@plt+0x552c>
   174fc:	cmp	ip, #0
   17500:	moveq	r5, r8
   17504:	bne	16994 <__assert_fail@plt+0x552c>
   17508:	ldr	r0, [sp, #156]	; 0x9c
   1750c:	adds	r8, r0, r2
   17510:	asr	r1, r0, #31
   17514:	adcs	r9, r1, r3
   17518:	asr	r1, r8, #31
   1751c:	movvs	r3, #1
   17520:	movvc	r3, #0
   17524:	cmp	r9, r1
   17528:	cmpeq	r8, r8
   1752c:	strd	r8, [sp, #32]
   17530:	bne	17dd8 <__assert_fail@plt+0x6970>
   17534:	cmp	r3, #0
   17538:	bne	17dd8 <__assert_fail@plt+0x6970>
   1753c:	ldrd	r2, [sl, #104]	; 0x68
   17540:	ldr	r0, [sp, #152]	; 0x98
   17544:	adds	r8, r0, r2
   17548:	asr	r1, r0, #31
   1754c:	adcs	r9, r1, r3
   17550:	asr	r3, r8, #31
   17554:	mov	r0, r8
   17558:	mov	r1, r9
   1755c:	movvs	r4, #1
   17560:	movvc	r4, #0
   17564:	cmp	r9, r3
   17568:	cmpeq	r8, r8
   1756c:	strd	r0, [sp, #48]	; 0x30
   17570:	bne	17dd8 <__assert_fail@plt+0x6970>
   17574:	cmp	r4, #0
   17578:	bne	17dd8 <__assert_fail@plt+0x6970>
   1757c:	ldr	r0, [sp, #32]
   17580:	ldr	r3, [sp, #192]	; 0xc0
   17584:	ldr	r1, [sp, #188]	; 0xbc
   17588:	str	r0, [sp, #156]	; 0x9c
   1758c:	ldr	r0, [sp, #48]	; 0x30
   17590:	ldr	r2, [sp, #184]	; 0xb8
   17594:	str	r3, [sp, #148]	; 0x94
   17598:	ldr	r3, [sp, #216]	; 0xd8
   1759c:	str	r0, [sp, #152]	; 0x98
   175a0:	str	r1, [sp, #144]	; 0x90
   175a4:	ldr	r0, [sp, #44]	; 0x2c
   175a8:	add	r1, sp, #140	; 0x8c
   175ac:	str	r5, [sp, #160]	; 0xa0
   175b0:	str	r2, [sp, #140]	; 0x8c
   175b4:	str	r3, [sp, #172]	; 0xac
   175b8:	bl	1b70c <__assert_fail@plt+0xa2a4>
   175bc:	cmn	r0, #1
   175c0:	mov	r9, r0
   175c4:	beq	182ac <__assert_fail@plt+0x6e44>
   175c8:	ldrb	r8, [sp, #597]	; 0x255
   175cc:	cmp	r8, #0
   175d0:	mov	r7, r8
   175d4:	bne	17b10 <__assert_fail@plt+0x66a8>
   175d8:	ldr	r3, [sp, #592]	; 0x250
   175dc:	cmp	r3, #0
   175e0:	beq	17634 <__assert_fail@plt+0x61cc>
   175e4:	ldr	r2, [sp, #440]	; 0x1b8
   175e8:	ldr	r1, [sp, #176]	; 0xb0
   175ec:	asr	r5, r2, #31
   175f0:	subs	r2, r1, r2
   175f4:	rsc	r3, r5, r1, asr #31
   175f8:	adds	r4, r2, r0
   175fc:	adc	r5, r3, r0, asr #31
   17600:	adds	r3, r4, #-2147483648	; 0x80000000
   17604:	str	r3, [sp, #120]	; 0x78
   17608:	adc	r3, r5, #0
   1760c:	str	r3, [sp, #124]	; 0x7c
   17610:	ldrd	r2, [sp, #120]	; 0x78
   17614:	mov	r1, #0
   17618:	mvn	r0, #0
   1761c:	cmp	r3, r1
   17620:	cmpeq	r2, r0
   17624:	bhi	16994 <__assert_fail@plt+0x552c>
   17628:	mov	r9, r4
   1762c:	cmp	r7, #0
   17630:	bne	17eac <__assert_fail@plt+0x6a44>
   17634:	ldr	r7, [sl, #112]	; 0x70
   17638:	ldr	fp, [sl, #116]	; 0x74
   1763c:	mov	ip, #0
   17640:	cmp	fp, r7, asr #31
   17644:	bne	18258 <__assert_fail@plt+0x6df0>
   17648:	mov	r2, #3600	; 0xe10
   1764c:	smull	r2, r3, r7, r2
   17650:	mov	r1, r2
   17654:	cmp	ip, #0
   17658:	mov	r5, r3
   1765c:	bne	16994 <__assert_fail@plt+0x552c>
   17660:	asr	r3, r9, #31
   17664:	adds	r0, r9, r1
   17668:	adcs	r1, r3, r5
   1766c:	movvs	r3, #1
   17670:	movvc	r3, #0
   17674:	strd	r0, [sp, #80]	; 0x50
   17678:	str	r3, [sp, #48]	; 0x30
   1767c:	bvs	16994 <__assert_fail@plt+0x552c>
   17680:	ldr	r9, [sl, #120]	; 0x78
   17684:	ldr	r3, [sl, #124]	; 0x7c
   17688:	mov	ip, #0
   1768c:	cmp	r3, r9, asr #31
   17690:	str	r3, [sp, #72]	; 0x48
   17694:	bne	181dc <__assert_fail@plt+0x6d74>
   17698:	mov	r2, #60	; 0x3c
   1769c:	smull	r2, r3, r9, r2
   176a0:	mov	r4, r2
   176a4:	mov	r1, r3
   176a8:	cmp	ip, #0
   176ac:	mov	r2, r4
   176b0:	bne	17f34 <__assert_fail@plt+0x6acc>
   176b4:	ldrd	r4, [sp, #80]	; 0x50
   176b8:	adds	r0, r4, r2
   176bc:	adcs	r1, r5, r1
   176c0:	bvs	17f34 <__assert_fail@plt+0x6acc>
   176c4:	ldrd	r2, [sl, #128]	; 0x80
   176c8:	adds	r4, r0, r2
   176cc:	adcs	r5, r1, r3
   176d0:	strd	r2, [sp, #80]	; 0x50
   176d4:	strd	r4, [sp, #96]	; 0x60
   176d8:	bvs	17f34 <__assert_fail@plt+0x6acc>
   176dc:	ldr	r3, [sp, #560]	; 0x230
   176e0:	mov	r1, r3
   176e4:	mov	r4, r1
   176e8:	asr	r5, r1, #31
   176ec:	str	r3, [sp, #104]	; 0x68
   176f0:	ldr	r3, [sp, #508]	; 0x1fc
   176f4:	strd	r4, [sp, #32]
   176f8:	adds	r4, r1, r3
   176fc:	adc	r5, r5, r3, asr #31
   17700:	mov	r0, r4
   17704:	mov	r1, r5
   17708:	add	r3, pc, #840	; 0x348
   1770c:	ldrd	r2, [r3]
   17710:	strd	r4, [sp, #88]	; 0x58
   17714:	bl	1f44c <__assert_fail@plt+0xdfe4>
   17718:	ldr	r4, [pc, #832]	; 17a60 <__assert_fail@plt+0x65f8>
   1771c:	mov	r5, #0
   17720:	adds	r0, r2, r4
   17724:	adc	r1, r3, r5
   17728:	mov	r2, r4
   1772c:	mov	r3, r5
   17730:	bl	1f44c <__assert_fail@plt+0xdfe4>
   17734:	mov	r0, r2
   17738:	str	r2, [sp, #120]	; 0x78
   1773c:	mov	r1, r3
   17740:	mov	r2, r4
   17744:	mov	r3, r5
   17748:	ldrd	r4, [sp, #88]	; 0x58
   1774c:	subs	r0, r4, r0
   17750:	sbc	r1, r5, r1
   17754:	bl	1f44c <__assert_fail@plt+0xdfe4>
   17758:	ldrd	r2, [sp, #96]	; 0x60
   1775c:	asr	r1, r0, #31
   17760:	adds	r4, r2, r0
   17764:	adcs	r5, r3, r1
   17768:	movvs	r3, #1
   1776c:	movvc	r3, #0
   17770:	mov	lr, r3
   17774:	bvs	17f34 <__assert_fail@plt+0x6acc>
   17778:	adds	r3, r4, #-2147483648	; 0x80000000
   1777c:	str	r3, [sp, #112]	; 0x70
   17780:	adc	r3, r5, #0
   17784:	str	r3, [sp, #116]	; 0x74
   17788:	ldrd	r0, [sp, #112]	; 0x70
   1778c:	mov	r3, #0
   17790:	mvn	r2, #0
   17794:	cmp	r1, r3
   17798:	cmpeq	r0, r2
   1779c:	bhi	17f34 <__assert_fail@plt+0x6acc>
   177a0:	ldr	r3, [sp, #48]	; 0x30
   177a4:	ldr	r2, [sp, #120]	; 0x78
   177a8:	cmp	r3, #0
   177ac:	ldr	r3, [sp, #68]	; 0x44
   177b0:	str	r4, [r3]
   177b4:	str	r2, [r3, #4]
   177b8:	beq	177ec <__assert_fail@plt+0x6384>
   177bc:	orr	r3, r9, r7
   177c0:	ldrd	r6, [sp, #80]	; 0x50
   177c4:	ldr	r2, [sp, #72]	; 0x48
   177c8:	ldr	ip, [sp, #104]	; 0x68
   177cc:	orr	r3, r3, r6
   177d0:	orr	r0, r3, ip
   177d4:	orr	r2, r2, fp
   177d8:	ldr	r3, [sp, #36]	; 0x24
   177dc:	orr	r2, r2, r7
   177e0:	orr	r1, r2, r3
   177e4:	orrs	r3, r0, r1
   177e8:	bne	18328 <__assert_fail@plt+0x6ec0>
   177ec:	mov	r4, r8
   177f0:	b	16880 <__assert_fail@plt+0x5418>
   177f4:	ldr	r1, [sp, #444]	; 0x1bc
   177f8:	ldrd	r2, [sl, #64]	; 0x40
   177fc:	cmp	r1, #0
   17800:	beq	17d74 <__assert_fail@plt+0x690c>
   17804:	cmp	r1, #1
   17808:	beq	17d2c <__assert_fail@plt+0x68c4>
   1780c:	cmp	r3, #0
   17810:	cmpeq	r2, #23
   17814:	bhi	180a8 <__assert_fail@plt+0x6c40>
   17818:	str	r2, [sp, #148]	; 0x94
   1781c:	ldr	r5, [sl, #72]	; 0x48
   17820:	ldr	r3, [sp, #504]	; 0x1f8
   17824:	cmp	ip, #0
   17828:	str	r5, [sp, #144]	; 0x90
   1782c:	str	r3, [sp, #140]	; 0x8c
   17830:	bne	17ccc <__assert_fail@plt+0x6864>
   17834:	ldr	ip, [sp, #148]	; 0x94
   17838:	ldr	r2, [sp, #572]	; 0x23c
   1783c:	ldr	r1, [sp, #576]	; 0x240
   17840:	orr	r2, r2, r1
   17844:	orrs	r2, r2, r0
   17848:	beq	16dac <__assert_fail@plt+0x5944>
   1784c:	b	16da4 <__assert_fail@plt+0x593c>
   17850:	mov	r0, r6
   17854:	mov	r2, #5
   17858:	ldr	r1, [pc, #516]	; 17a64 <__assert_fail@plt+0x65fc>
   1785c:	bl	111b0 <dcgettext@plt>
   17860:	ldr	r3, [sp, #64]	; 0x40
   17864:	mov	r1, #1
   17868:	mov	r2, r0
   1786c:	mov	r0, r5
   17870:	bl	11384 <__fprintf_chk@plt>
   17874:	b	170cc <__assert_fail@plt+0x5c64>
   17878:	mov	r2, #5
   1787c:	ldr	r1, [pc, #484]	; 17a68 <__assert_fail@plt+0x6600>
   17880:	ldr	r0, [sp, #64]	; 0x40
   17884:	b	170b8 <__assert_fail@plt+0x5c50>
   17888:	mov	r2, #5
   1788c:	ldr	r1, [pc, #472]	; 17a6c <__assert_fail@plt+0x6604>
   17890:	mov	r0, #0
   17894:	bl	111b0 <dcgettext@plt>
   17898:	mov	r2, r8
   1789c:	mov	r3, r9
   178a0:	bl	12a38 <__assert_fail@plt+0x15d0>
   178a4:	b	17240 <__assert_fail@plt+0x5dd8>
   178a8:	mov	r2, #5
   178ac:	mov	r0, r4
   178b0:	ldr	r1, [pc, #440]	; 17a70 <__assert_fail@plt+0x6608>
   178b4:	bl	111b0 <dcgettext@plt>
   178b8:	add	r1, sp, #896	; 0x380
   178bc:	mov	r4, r0
   178c0:	add	r0, sp, #416	; 0x1a0
   178c4:	bl	12ee8 <__assert_fail@plt+0x1a80>
   178c8:	add	r2, sp, #696	; 0x2b8
   178cc:	add	r1, sp, #416	; 0x1a0
   178d0:	mov	r5, r0
   178d4:	add	r0, sp, #140	; 0x8c
   178d8:	bl	12e20 <__assert_fail@plt+0x19b8>
   178dc:	mov	r1, r5
   178e0:	mov	r2, r0
   178e4:	mov	r0, r4
   178e8:	bl	12a38 <__assert_fail@plt+0x15d0>
   178ec:	ldrb	r8, [sp, #597]	; 0x255
   178f0:	cmp	r8, #0
   178f4:	beq	17494 <__assert_fail@plt+0x602c>
   178f8:	ldr	r3, [sp, #572]	; 0x23c
   178fc:	ldr	r0, [sp, #576]	; 0x240
   17900:	cmp	r3, #0
   17904:	bne	17f58 <__assert_fail@plt+0x6af0>
   17908:	cmp	r0, #0
   1790c:	beq	1802c <__assert_fail@plt+0x6bc4>
   17910:	add	r4, sp, #696	; 0x2b8
   17914:	mov	r2, #5
   17918:	ldr	r1, [pc, #340]	; 17a74 <__assert_fail@plt+0x660c>
   1791c:	mov	r0, #0
   17920:	bl	111b0 <dcgettext@plt>
   17924:	mov	r2, r4
   17928:	add	r1, sp, #416	; 0x1a0
   1792c:	mov	r5, r0
   17930:	add	r0, sp, #140	; 0x8c
   17934:	bl	12e20 <__assert_fail@plt+0x19b8>
   17938:	mov	r1, r0
   1793c:	mov	r0, r5
   17940:	bl	12a38 <__assert_fail@plt+0x15d0>
   17944:	ldrd	r2, [sl, #88]	; 0x58
   17948:	ldrd	r4, [sl, #104]	; 0x68
   1794c:	ldrb	r8, [sp, #597]	; 0x255
   17950:	strd	r2, [sp, #32]
   17954:	strd	r4, [sp, #48]	; 0x30
   17958:	ldrd	r2, [sl, #96]	; 0x60
   1795c:	ldrd	r4, [sp, #32]
   17960:	ldr	ip, [sp, #48]	; 0x30
   17964:	mov	r7, r8
   17968:	orr	r0, r4, r2
   1796c:	orr	ip, r0, ip
   17970:	mov	r4, ip
   17974:	ldr	ip, [sp, #52]	; 0x34
   17978:	orr	r1, r5, r3
   1797c:	orr	ip, r1, ip
   17980:	mov	r5, ip
   17984:	orrs	ip, r4, r5
   17988:	beq	17c58 <__assert_fail@plt+0x67f0>
   1798c:	cmp	r8, #0
   17990:	beq	174d0 <__assert_fail@plt+0x6068>
   17994:	orrs	r3, r0, r1
   17998:	beq	180b8 <__assert_fail@plt+0x6c50>
   1799c:	ldr	r3, [sp, #152]	; 0x98
   179a0:	cmp	r3, #15
   179a4:	beq	179c4 <__assert_fail@plt+0x655c>
   179a8:	mov	r2, #5
   179ac:	ldr	r1, [pc, #196]	; 17a78 <__assert_fail@plt+0x6610>
   179b0:	mov	r0, #0
   179b4:	bl	111b0 <dcgettext@plt>
   179b8:	bl	12a38 <__assert_fail@plt+0x15d0>
   179bc:	ldrd	r2, [sl, #104]	; 0x68
   179c0:	strd	r2, [sp, #48]	; 0x30
   179c4:	ldrd	r2, [sp, #48]	; 0x30
   179c8:	orrs	r3, r2, r3
   179cc:	bne	180b8 <__assert_fail@plt+0x6c50>
   179d0:	ldrd	r4, [sl, #88]	; 0x58
   179d4:	ldr	r2, [sp, #160]	; 0xa0
   179d8:	adds	r0, r2, r4
   179dc:	asr	r3, r2, #31
   179e0:	adcs	r1, r3, r5
   179e4:	asr	r3, r0, #31
   179e8:	movvs	ip, #1
   179ec:	movvc	ip, #0
   179f0:	cmp	r1, r3
   179f4:	cmpeq	r0, r0
   179f8:	bne	17dd8 <__assert_fail@plt+0x6970>
   179fc:	cmp	ip, #0
   17a00:	bne	17dd8 <__assert_fail@plt+0x6970>
   17a04:	ldrd	r2, [sl, #96]	; 0x60
   17a08:	mov	r5, r0
   17a0c:	b	17508 <__assert_fail@plt+0x60a0>
   17a10:	mov	r3, #0
   17a14:	cmp	ip, #0
   17a18:	str	r3, [sp, #140]	; 0x8c
   17a1c:	str	r3, [sp, #144]	; 0x90
   17a20:	str	r3, [sp, #148]	; 0x94
   17a24:	str	r3, [sp, #508]	; 0x1fc
   17a28:	moveq	r5, ip
   17a2c:	moveq	r3, ip
   17a30:	beq	17838 <__assert_fail@plt+0x63d0>
   17a34:	ldr	r0, [pc, #64]	; 17a7c <__assert_fail@plt+0x6614>
   17a38:	bl	12a38 <__assert_fail@plt+0x15d0>
   17a3c:	add	r3, sp, #140	; 0x8c
   17a40:	ldr	r0, [sp, #588]	; 0x24c
   17a44:	ldm	r3, {r3, r5, ip}
   17a48:	ldr	r4, [sp, #152]	; 0x98
   17a4c:	ldr	lr, [sp, #156]	; 0x9c
   17a50:	b	17838 <__assert_fail@plt+0x63d0>
   17a54:	nop			; (mov r0, r0)
   17a58:	blcc	fe6ca260 <optarg@@GLIBC_2.4+0xfe6970b8>
   17a5c:	andeq	r0, r0, r0
   17a60:	blcc	fe6ca268 <optarg@@GLIBC_2.4+0xfe6970c0>
   17a64:	andeq	r1, r2, ip
   17a68:	andeq	r1, r2, r8, lsr #32
   17a6c:	andeq	r1, r2, r4, lsr r1
   17a70:	andeq	r1, r2, r4, lsl r4
   17a74:			; <UNDEFINED> instruction: 0x000214b4
   17a78:	ldrdeq	r1, [r2], -r0
   17a7c:	andeq	r1, r2, r4, lsl #4
   17a80:	andeq	r1, r2, r0, ror #11
   17a84:	andeq	r1, r2, r0, lsr #12
   17a88:	andeq	r1, r2, ip, lsr r6
   17a8c:	andeq	r1, r2, ip, ror r6
   17a90:			; <UNDEFINED> instruction: 0x000216b8
   17a94:	ldrdeq	r1, [r2], -ip
   17a98:	andeq	r1, r2, r0, lsl #14
   17a9c:	muleq	r2, r8, r1
   17aa0:	andeq	r1, r2, r8, asr #3
   17aa4:	strdeq	r1, [r2], -r4
   17aa8:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   17aac:	andeq	r0, r2, r8, lsr #30
   17ab0:	andeq	r1, r2, ip, ror r1
   17ab4:	andeq	r1, r2, ip, ror r5
   17ab8:	andeq	r0, r0, ip, ror r8
   17abc:	andeq	r1, r2, ip, lsl #11
   17ac0:	andeq	r1, r2, r8, ror r4
   17ac4:	andeq	r1, r2, r4, asr #7
   17ac8:	andeq	r1, r2, ip, lsr #14
   17acc:	andeq	r1, r2, r8, asr #14
   17ad0:	andeq	r1, r2, r8, asr r2
   17ad4:	andeq	r1, r2, ip, ror r2
   17ad8:	muleq	r2, ip, r2
   17adc:	andeq	r0, r2, r4, lsr pc
   17ae0:	andeq	r0, r2, ip, lsr #30
   17ae4:	andeq	r1, r2, r4, lsr r4
   17ae8:	andeq	r1, r2, r0, ror #8
   17aec:			; <UNDEFINED> instruction: 0x000218bc
   17af0:	andeq	r1, r2, r4, lsr r5
   17af4:	andeq	r1, r2, r8, lsr r2
   17af8:	andeq	r1, r2, r0, lsr #11
   17afc:	andeq	r1, r2, r4, asr #6
   17b00:	andeq	r1, r2, r0, lsl r3
   17b04:	andeq	r1, r2, r8, ror r7
   17b08:	andeq	r1, r2, r4, asr #15
   17b0c:	andeq	r1, r2, r8, ror #15
   17b10:	ldr	r1, [pc, #-152]	; 17a80 <__assert_fail@plt+0x6618>
   17b14:	mov	r2, #5
   17b18:	mov	r0, r4
   17b1c:	bl	111b0 <dcgettext@plt>
   17b20:	ldrd	r2, [sl, #104]	; 0x68
   17b24:	strd	r2, [sp, #8]
   17b28:	ldrd	r2, [sl, #96]	; 0x60
   17b2c:	strd	r2, [sp]
   17b30:	ldrd	r2, [sl, #88]	; 0x58
   17b34:	bl	12a38 <__assert_fail@plt+0x15d0>
   17b38:	mov	r2, #5
   17b3c:	ldr	r1, [pc, #-192]	; 17a84 <__assert_fail@plt+0x661c>
   17b40:	mov	r0, r4
   17b44:	bl	111b0 <dcgettext@plt>
   17b48:	add	r2, sp, #696	; 0x2b8
   17b4c:	add	r1, sp, #416	; 0x1a0
   17b50:	mov	r7, r0
   17b54:	add	r0, sp, #140	; 0x8c
   17b58:	bl	12e20 <__assert_fail@plt+0x19b8>
   17b5c:	mov	r1, r0
   17b60:	mov	r0, r7
   17b64:	bl	12a38 <__assert_fail@plt+0x15d0>
   17b68:	ldr	r3, [sp, #216]	; 0xd8
   17b6c:	cmn	r3, #1
   17b70:	beq	17b94 <__assert_fail@plt+0x672c>
   17b74:	ldr	r2, [sp, #172]	; 0xac
   17b78:	cmp	r3, r2
   17b7c:	beq	17b94 <__assert_fail@plt+0x672c>
   17b80:	mov	r2, #5
   17b84:	ldr	r1, [pc, #-260]	; 17a88 <__assert_fail@plt+0x6620>
   17b88:	mov	r0, r4
   17b8c:	bl	111b0 <dcgettext@plt>
   17b90:	bl	12a38 <__assert_fail@plt+0x15d0>
   17b94:	ldrd	r2, [sl, #104]	; 0x68
   17b98:	orrs	r3, r2, r3
   17b9c:	bne	17c50 <__assert_fail@plt+0x67e8>
   17ba0:	ldr	r3, [sp, #152]	; 0x98
   17ba4:	ldr	r2, [sp, #48]	; 0x30
   17ba8:	cmp	r2, r3
   17bac:	bne	17bcc <__assert_fail@plt+0x6764>
   17bb0:	ldrd	r2, [sl, #96]	; 0x60
   17bb4:	orrs	r3, r2, r3
   17bb8:	bne	17c50 <__assert_fail@plt+0x67e8>
   17bbc:	ldr	r3, [sp, #156]	; 0x9c
   17bc0:	ldr	r2, [sp, #32]
   17bc4:	cmp	r2, r3
   17bc8:	beq	17c50 <__assert_fail@plt+0x67e8>
   17bcc:	mov	r2, #5
   17bd0:	ldr	r1, [pc, #-332]	; 17a8c <__assert_fail@plt+0x6624>
   17bd4:	mov	r0, #0
   17bd8:	bl	111b0 <dcgettext@plt>
   17bdc:	bl	12a38 <__assert_fail@plt+0x15d0>
   17be0:	mov	r2, #5
   17be4:	ldr	r1, [pc, #-348]	; 17a90 <__assert_fail@plt+0x6628>
   17be8:	mov	r0, #0
   17bec:	bl	111b0 <dcgettext@plt>
   17bf0:	add	r1, sp, #652	; 0x28c
   17bf4:	mov	r4, r0
   17bf8:	mov	r0, r5
   17bfc:	bl	129bc <__assert_fail@plt+0x1554>
   17c00:	ldr	r2, [sp, #32]
   17c04:	ldr	r3, [sp, #48]	; 0x30
   17c08:	add	r2, r2, #1
   17c0c:	mov	r1, r0
   17c10:	mov	r0, r4
   17c14:	bl	12a38 <__assert_fail@plt+0x15d0>
   17c18:	mov	r2, #5
   17c1c:	ldr	r1, [pc, #-400]	; 17a94 <__assert_fail@plt+0x662c>
   17c20:	mov	r0, #0
   17c24:	bl	111b0 <dcgettext@plt>
   17c28:	add	r1, sp, #652	; 0x28c
   17c2c:	mov	r4, r0
   17c30:	ldr	r0, [sp, #160]	; 0xa0
   17c34:	bl	129bc <__assert_fail@plt+0x1554>
   17c38:	ldr	r2, [sp, #156]	; 0x9c
   17c3c:	ldr	r3, [sp, #152]	; 0x98
   17c40:	add	r2, r2, #1
   17c44:	mov	r1, r0
   17c48:	mov	r0, r4
   17c4c:	bl	12a38 <__assert_fail@plt+0x15d0>
   17c50:	ldrb	r8, [sp, #597]	; 0x255
   17c54:	mov	r7, r8
   17c58:	ldr	r3, [sp, #592]	; 0x250
   17c5c:	cmp	r3, #0
   17c60:	beq	1762c <__assert_fail@plt+0x61c4>
   17c64:	ldr	r2, [sp, #440]	; 0x1b8
   17c68:	ldr	r1, [sp, #176]	; 0xb0
   17c6c:	mvn	r0, #0
   17c70:	asr	r5, r2, #31
   17c74:	subs	r2, r1, r2
   17c78:	rsc	r3, r5, r1, asr #31
   17c7c:	adds	r4, r2, r9
   17c80:	adc	r5, r3, r9, asr #31
   17c84:	adds	r3, r4, #-2147483648	; 0x80000000
   17c88:	str	r3, [sp, #104]	; 0x68
   17c8c:	adc	r3, r5, #0
   17c90:	str	r3, [sp, #108]	; 0x6c
   17c94:	ldrd	r2, [sp, #104]	; 0x68
   17c98:	mov	r1, #0
   17c9c:	cmp	r3, r1
   17ca0:	cmpeq	r2, r0
   17ca4:	bls	17628 <__assert_fail@plt+0x61c0>
   17ca8:	cmp	r7, #0
   17cac:	beq	16994 <__assert_fail@plt+0x552c>
   17cb0:	mov	r2, #5
   17cb4:	ldr	r1, [pc, #-548]	; 17a98 <__assert_fail@plt+0x6630>
   17cb8:	mov	r0, #0
   17cbc:	bl	111b0 <dcgettext@plt>
   17cc0:	ldr	r1, [sp, #440]	; 0x1b8
   17cc4:	bl	12a38 <__assert_fail@plt+0x15d0>
   17cc8:	b	16994 <__assert_fail@plt+0x552c>
   17ccc:	cmp	r0, #0
   17cd0:	movne	r0, #0
   17cd4:	ldrne	r1, [pc, #-576]	; 17a9c <__assert_fail@plt+0x6634>
   17cd8:	ldreq	r1, [pc, #-576]	; 17aa0 <__assert_fail@plt+0x6638>
   17cdc:	mov	r2, #5
   17ce0:	bl	111b0 <dcgettext@plt>
   17ce4:	ldr	ip, [sp, #140]	; 0x8c
   17ce8:	ldr	r2, [pc, #-588]	; 17aa4 <__assert_fail@plt+0x663c>
   17cec:	add	r4, sp, #696	; 0x2b8
   17cf0:	mov	r3, #100	; 0x64
   17cf4:	str	r2, [sp]
   17cf8:	str	ip, [sp, #12]
   17cfc:	mov	r2, #1
   17d00:	mov	r5, r0
   17d04:	ldrd	r0, [sp, #144]	; 0x90
   17d08:	str	r0, [sp, #8]
   17d0c:	str	r1, [sp, #4]
   17d10:	mov	r0, r4
   17d14:	mov	r1, r3
   17d18:	bl	1145c <__snprintf_chk@plt>
   17d1c:	mov	r1, r4
   17d20:	mov	r0, r5
   17d24:	bl	12a38 <__assert_fail@plt+0x15d0>
   17d28:	b	17a3c <__assert_fail@plt+0x65d4>
   17d2c:	subs	r1, r2, #1
   17d30:	str	r1, [sp, #96]	; 0x60
   17d34:	sbc	r1, r3, #0
   17d38:	str	r1, [sp, #100]	; 0x64
   17d3c:	ldrd	r8, [sp, #96]	; 0x60
   17d40:	cmp	r9, #0
   17d44:	cmpeq	r8, #10
   17d48:	addls	r2, r2, #12
   17d4c:	bls	17818 <__assert_fail@plt+0x63b0>
   17d50:	cmp	r3, #0
   17d54:	cmpeq	r2, #12
   17d58:	mvnne	r3, #0
   17d5c:	strne	r3, [sp, #148]	; 0x94
   17d60:	ldrne	r4, [pc, #-704]	; 17aa8 <__assert_fail@plt+0x6640>
   17d64:	bne	17db0 <__assert_fail@plt+0x6948>
   17d68:	mov	r3, #12
   17d6c:	str	r3, [sp, #148]	; 0x94
   17d70:	b	1781c <__assert_fail@plt+0x63b4>
   17d74:	subs	r5, r2, #1
   17d78:	str	r5, [sp, #88]	; 0x58
   17d7c:	sbc	r5, r3, #0
   17d80:	str	r5, [sp, #92]	; 0x5c
   17d84:	ldrd	r8, [sp, #88]	; 0x58
   17d88:	cmp	r9, #0
   17d8c:	cmpeq	r8, #10
   17d90:	bls	17818 <__assert_fail@plt+0x63b0>
   17d94:	cmp	r3, #0
   17d98:	cmpeq	r2, #12
   17d9c:	streq	r1, [sp, #148]	; 0x94
   17da0:	beq	1781c <__assert_fail@plt+0x63b4>
   17da4:	ldr	r4, [pc, #-768]	; 17aac <__assert_fail@plt+0x6644>
   17da8:	mvn	r3, #0
   17dac:	str	r3, [sp, #148]	; 0x94
   17db0:	cmp	ip, #0
   17db4:	beq	16994 <__assert_fail@plt+0x552c>
   17db8:	mov	r2, #5
   17dbc:	ldr	r1, [pc, #-788]	; 17ab0 <__assert_fail@plt+0x6648>
   17dc0:	mov	r0, #0
   17dc4:	bl	111b0 <dcgettext@plt>
   17dc8:	str	r4, [sp]
   17dcc:	ldrd	r2, [sl, #64]	; 0x40
   17dd0:	bl	12a38 <__assert_fail@plt+0x15d0>
   17dd4:	b	16994 <__assert_fail@plt+0x552c>
   17dd8:	ldrb	r3, [sp, #597]	; 0x255
   17ddc:	cmp	r3, #0
   17de0:	beq	16994 <__assert_fail@plt+0x552c>
   17de4:	mov	r2, #5
   17de8:	ldr	r1, [pc, #-828]	; 17ab4 <__assert_fail@plt+0x664c>
   17dec:	mov	r0, #0
   17df0:	bl	111b0 <dcgettext@plt>
   17df4:	ldr	r2, [pc, #-836]	; 17ab8 <__assert_fail@plt+0x6650>
   17df8:	ldr	r1, [pc, #-836]	; 17abc <__assert_fail@plt+0x6654>
   17dfc:	bl	12a38 <__assert_fail@plt+0x15d0>
   17e00:	b	16994 <__assert_fail@plt+0x552c>
   17e04:	ldrb	r8, [sp, #597]	; 0x255
   17e08:	cmp	r8, #0
   17e0c:	beq	17494 <__assert_fail@plt+0x602c>
   17e10:	add	r4, sp, #696	; 0x2b8
   17e14:	mov	r2, #5
   17e18:	ldr	r1, [pc, #-864]	; 17ac0 <__assert_fail@plt+0x6658>
   17e1c:	mov	r0, #0
   17e20:	bl	111b0 <dcgettext@plt>
   17e24:	add	r1, sp, #896	; 0x380
   17e28:	mov	r5, r0
   17e2c:	add	r0, sp, #416	; 0x1a0
   17e30:	bl	12ee8 <__assert_fail@plt+0x1a80>
   17e34:	mov	r1, r0
   17e38:	mov	r0, r5
   17e3c:	bl	12a38 <__assert_fail@plt+0x15d0>
   17e40:	b	17914 <__assert_fail@plt+0x64ac>
   17e44:	ldrb	r3, [sp, #597]	; 0x255
   17e48:	cmp	r3, #0
   17e4c:	beq	16994 <__assert_fail@plt+0x552c>
   17e50:	mov	r2, #5
   17e54:	ldr	r1, [pc, #-920]	; 17ac4 <__assert_fail@plt+0x665c>
   17e58:	mov	r0, #0
   17e5c:	bl	111b0 <dcgettext@plt>
   17e60:	add	r1, sp, #896	; 0x380
   17e64:	mov	r7, r0
   17e68:	add	r0, sp, #416	; 0x1a0
   17e6c:	bl	12ee8 <__assert_fail@plt+0x1a80>
   17e70:	add	r1, sp, #416	; 0x1a0
   17e74:	add	r2, sp, #696	; 0x2b8
   17e78:	ldrd	r4, [sl]
   17e7c:	ldr	r9, [sp, #432]	; 0x1b0
   17e80:	mov	r8, r0
   17e84:	add	r0, sp, #140	; 0x8c
   17e88:	bl	12e20 <__assert_fail@plt+0x19b8>
   17e8c:	str	r9, [sp]
   17e90:	mov	r2, r4
   17e94:	mov	r3, r5
   17e98:	mov	r1, r8
   17e9c:	str	r0, [sp, #4]
   17ea0:	mov	r0, r7
   17ea4:	bl	12a38 <__assert_fail@plt+0x15d0>
   17ea8:	b	16994 <__assert_fail@plt+0x552c>
   17eac:	mov	r2, #5
   17eb0:	ldr	r1, [pc, #-1008]	; 17ac8 <__assert_fail@plt+0x6660>
   17eb4:	mov	r0, #0
   17eb8:	bl	111b0 <dcgettext@plt>
   17ebc:	add	r1, sp, #416	; 0x1a0
   17ec0:	add	r2, sp, #696	; 0x2b8
   17ec4:	mov	r4, r0
   17ec8:	add	r0, sp, #140	; 0x8c
   17ecc:	bl	12e20 <__assert_fail@plt+0x19b8>
   17ed0:	mov	r2, r9
   17ed4:	asr	r3, r9, #31
   17ed8:	strd	r2, [sp, #72]	; 0x48
   17edc:	mov	r1, r0
   17ee0:	mov	r0, r4
   17ee4:	bl	12a38 <__assert_fail@plt+0x15d0>
   17ee8:	ldr	r7, [sl, #112]	; 0x70
   17eec:	ldr	fp, [sl, #116]	; 0x74
   17ef0:	ldrb	r8, [sp, #597]	; 0x255
   17ef4:	cmp	fp, r7, asr #31
   17ef8:	mov	ip, #0
   17efc:	str	r8, [sp, #48]	; 0x30
   17f00:	bne	18154 <__assert_fail@plt+0x6cec>
   17f04:	mov	r2, #3600	; 0xe10
   17f08:	smull	r2, r3, r7, r2
   17f0c:	mov	r4, r2
   17f10:	mov	r1, r3
   17f14:	cmp	ip, #0
   17f18:	mov	r2, r4
   17f1c:	bne	17f34 <__assert_fail@plt+0x6acc>
   17f20:	ldrd	r4, [sp, #72]	; 0x48
   17f24:	adds	r0, r4, r2
   17f28:	adcs	r1, r5, r1
   17f2c:	strd	r0, [sp, #80]	; 0x50
   17f30:	bvc	17680 <__assert_fail@plt+0x6218>
   17f34:	ldr	r3, [sp, #48]	; 0x30
   17f38:	cmp	r3, #0
   17f3c:	beq	16994 <__assert_fail@plt+0x552c>
   17f40:	mov	r2, #5
   17f44:	ldr	r1, [pc, #-1152]	; 17acc <__assert_fail@plt+0x6664>
   17f48:	mov	r0, #0
   17f4c:	bl	111b0 <dcgettext@plt>
   17f50:	bl	12a38 <__assert_fail@plt+0x15d0>
   17f54:	b	16994 <__assert_fail@plt+0x552c>
   17f58:	cmp	r0, #0
   17f5c:	beq	17910 <__assert_fail@plt+0x64a8>
   17f60:	b	17e10 <__assert_fail@plt+0x69a8>
   17f64:	cmp	r2, #0
   17f68:	str	r3, [sp, #104]	; 0x68
   17f6c:	beq	16994 <__assert_fail@plt+0x552c>
   17f70:	mov	r2, #5
   17f74:	ldr	r1, [pc, #-1196]	; 17ad0 <__assert_fail@plt+0x6668>
   17f78:	mov	r0, #0
   17f7c:	bl	111b0 <dcgettext@plt>
   17f80:	bl	12a38 <__assert_fail@plt+0x15d0>
   17f84:	mov	r2, #5
   17f88:	ldr	r1, [pc, #-1212]	; 17ad4 <__assert_fail@plt+0x666c>
   17f8c:	mov	r0, #0
   17f90:	bl	111b0 <dcgettext@plt>
   17f94:	add	r4, sp, #896	; 0x380
   17f98:	mov	r2, r4
   17f9c:	add	r1, sp, #416	; 0x1a0
   17fa0:	mov	r5, r0
   17fa4:	add	r0, sp, #184	; 0xb8
   17fa8:	bl	12e20 <__assert_fail@plt+0x19b8>
   17fac:	mov	r1, r0
   17fb0:	mov	r0, r5
   17fb4:	bl	12a38 <__assert_fail@plt+0x15d0>
   17fb8:	mov	r2, #5
   17fbc:	ldr	r1, [pc, #-1260]	; 17ad8 <__assert_fail@plt+0x6670>
   17fc0:	mov	r0, #0
   17fc4:	bl	111b0 <dcgettext@plt>
   17fc8:	mov	r2, r4
   17fcc:	add	r1, sp, #416	; 0x1a0
   17fd0:	mov	r5, r0
   17fd4:	add	r0, sp, #140	; 0x8c
   17fd8:	bl	12e20 <__assert_fail@plt+0x19b8>
   17fdc:	mov	r1, r0
   17fe0:	mov	r0, r5
   17fe4:	bl	12a38 <__assert_fail@plt+0x15d0>
   17fe8:	ldr	r0, [sp, #68]	; 0x44
   17fec:	ldr	r3, [sp, #104]	; 0x68
   17ff0:	ldr	r2, [pc, #-1292]	; 17aec <__assert_fail@plt+0x6684>
   17ff4:	cmp	r3, r0
   17ff8:	ldr	r0, [sp, #64]	; 0x40
   17ffc:	ldr	lr, [pc, #-1320]	; 17adc <__assert_fail@plt+0x6674>
   18000:	ldr	r1, [pc, #-1320]	; 17ae0 <__assert_fail@plt+0x6678>
   18004:	moveq	r1, r2
   18008:	cmp	r8, r0
   1800c:	moveq	ip, r2
   18010:	movne	ip, lr
   18014:	cmp	r9, r7
   18018:	moveq	r0, r2
   1801c:	movne	r0, lr
   18020:	cmp	sl, fp
   18024:	movne	r2, lr
   18028:	b	16f44 <__assert_fail@plt+0x5adc>
   1802c:	mov	r2, #5
   18030:	ldr	r1, [pc, #-1364]	; 17ae4 <__assert_fail@plt+0x667c>
   18034:	bl	111b0 <dcgettext@plt>
   18038:	add	r1, sp, #652	; 0x28c
   1803c:	add	r4, sp, #696	; 0x2b8
   18040:	mov	r5, r0
   18044:	ldr	r0, [sp, #160]	; 0xa0
   18048:	bl	129bc <__assert_fail@plt+0x1554>
   1804c:	ldr	r2, [sp, #156]	; 0x9c
   18050:	ldr	ip, [sp, #152]	; 0x98
   18054:	ldr	r1, [pc, #-1396]	; 17ae8 <__assert_fail@plt+0x6680>
   18058:	mov	r3, #100	; 0x64
   1805c:	add	r2, r2, #1
   18060:	str	r2, [sp, #8]
   18064:	str	ip, [sp, #12]
   18068:	str	r1, [sp]
   1806c:	mov	r2, #1
   18070:	mov	r1, r3
   18074:	str	r0, [sp, #4]
   18078:	mov	r0, r4
   1807c:	bl	1145c <__snprintf_chk@plt>
   18080:	mov	r1, r4
   18084:	mov	r0, r5
   18088:	bl	12a38 <__assert_fail@plt+0x15d0>
   1808c:	ldr	r3, [sp, #576]	; 0x240
   18090:	cmp	r3, #0
   18094:	beq	17914 <__assert_fail@plt+0x64ac>
   18098:	ldr	r3, [sp, #572]	; 0x23c
   1809c:	cmp	r3, #0
   180a0:	bne	17e14 <__assert_fail@plt+0x69ac>
   180a4:	b	17914 <__assert_fail@plt+0x64ac>
   180a8:	mvn	r3, #0
   180ac:	ldr	r4, [pc, #-1480]	; 17aec <__assert_fail@plt+0x6684>
   180b0:	str	r3, [sp, #148]	; 0x94
   180b4:	b	17db0 <__assert_fail@plt+0x6948>
   180b8:	ldr	r3, [sp, #148]	; 0x94
   180bc:	cmp	r3, #12
   180c0:	beq	179d0 <__assert_fail@plt+0x6568>
   180c4:	mov	r2, #5
   180c8:	ldr	r1, [pc, #-1504]	; 17af0 <__assert_fail@plt+0x6688>
   180cc:	mov	r0, #0
   180d0:	bl	111b0 <dcgettext@plt>
   180d4:	bl	12a38 <__assert_fail@plt+0x15d0>
   180d8:	b	179d0 <__assert_fail@plt+0x6568>
   180dc:	ldrd	r2, [sp, #32]
   180e0:	mov	ip, #7
   180e4:	cmp	r3, #0
   180e8:	umull	r8, r9, r2, ip
   180ec:	umull	r2, r3, ip, r3
   180f0:	bge	180fc <__assert_fail@plt+0x6c94>
   180f4:	subs	r2, r2, r4
   180f8:	sbc	r3, r3, ip
   180fc:	adds	r0, r2, r9
   18100:	mov	ip, #0
   18104:	adc	r1, r3, ip
   18108:	cmp	r1, r0, asr #31
   1810c:	beq	173ec <__assert_fail@plt+0x5f84>
   18110:	ldrd	r2, [sp, #32]
   18114:	mov	r4, #1
   18118:	lsl	r0, r3, #3
   1811c:	lsl	r1, r2, #3
   18120:	orr	r0, r0, r2, lsr #29
   18124:	subs	r8, r1, r2
   18128:	sbc	r0, r0, r3
   1812c:	b	173ec <__assert_fail@plt+0x5f84>
   18130:	ldrb	r3, [sp, #597]	; 0x255
   18134:	cmp	r3, #0
   18138:	beq	16994 <__assert_fail@plt+0x552c>
   1813c:	mov	r2, #5
   18140:	ldr	r1, [pc, #-1620]	; 17af4 <__assert_fail@plt+0x668c>
   18144:	bl	111b0 <dcgettext@plt>
   18148:	add	r1, sp, #896	; 0x380
   1814c:	bl	12a38 <__assert_fail@plt+0x15d0>
   18150:	b	16994 <__assert_fail@plt+0x552c>
   18154:	mov	r1, #3600	; 0xe10
   18158:	cmp	fp, #0
   1815c:	umull	r2, r3, r1, fp
   18160:	umull	r4, r5, r7, r1
   18164:	strd	r2, [sp, #32]
   18168:	bge	18180 <__assert_fail@plt+0x6d18>
   1816c:	subs	r3, r2, ip
   18170:	str	r3, [sp, #32]
   18174:	ldr	r3, [sp, #36]	; 0x24
   18178:	sbc	r3, r3, r1
   1817c:	str	r3, [sp, #36]	; 0x24
   18180:	ldr	r3, [sp, #32]
   18184:	mov	r2, #0
   18188:	adds	r1, r3, r5
   1818c:	ldr	r3, [sp, #36]	; 0x24
   18190:	adc	r3, r3, r2
   18194:	cmp	r3, r1, asr #31
   18198:	beq	17f14 <__assert_fail@plt+0x6aac>
   1819c:	lsl	r3, fp, #3
   181a0:	lsl	r2, r7, #3
   181a4:	subs	r2, r2, r7
   181a8:	orr	r3, r3, r7, lsr #29
   181ac:	sbc	r3, r3, fp
   181b0:	lsl	r1, r2, #5
   181b4:	lsl	r3, r3, #5
   181b8:	orr	r3, r3, r2, lsr #27
   181bc:	adds	r2, r1, r7
   181c0:	adc	r1, r3, fp
   181c4:	lsl	r3, r2, #4
   181c8:	lsl	r1, r1, #4
   181cc:	orr	r1, r1, r2, lsr #28
   181d0:	mov	r4, r3
   181d4:	mov	ip, #1
   181d8:	b	17f14 <__assert_fail@plt+0x6aac>
   181dc:	ldr	r3, [sp, #72]	; 0x48
   181e0:	mov	r1, #60	; 0x3c
   181e4:	cmp	r3, #0
   181e8:	umull	r2, r3, r1, r3
   181ec:	umull	r4, r5, r9, r1
   181f0:	strd	r2, [sp, #32]
   181f4:	bge	1820c <__assert_fail@plt+0x6da4>
   181f8:	subs	r3, r2, ip
   181fc:	str	r3, [sp, #32]
   18200:	ldr	r3, [sp, #36]	; 0x24
   18204:	sbc	r3, r3, r1
   18208:	str	r3, [sp, #36]	; 0x24
   1820c:	ldr	r3, [sp, #32]
   18210:	mov	r2, #0
   18214:	adds	r1, r3, r5
   18218:	ldr	r3, [sp, #36]	; 0x24
   1821c:	adc	r3, r3, r2
   18220:	cmp	r3, r1, asr #31
   18224:	beq	176a8 <__assert_fail@plt+0x6240>
   18228:	ldr	r3, [sp, #72]	; 0x48
   1822c:	lsl	r4, r9, #4
   18230:	subs	r4, r4, r9
   18234:	lsl	r1, r3, #4
   18238:	orr	r1, r1, r9, lsr #28
   1823c:	sbc	r1, r1, r3
   18240:	lsl	r3, r4, #2
   18244:	lsl	r1, r1, #2
   18248:	orr	r1, r1, r4, lsr #30
   1824c:	mov	ip, #1
   18250:	mov	r4, r3
   18254:	b	176a8 <__assert_fail@plt+0x6240>
   18258:	mov	r1, #3600	; 0xe10
   1825c:	cmp	fp, #0
   18260:	umull	r2, r3, r1, fp
   18264:	umull	r4, r5, r7, r1
   18268:	strd	r2, [sp, #32]
   1826c:	bge	18284 <__assert_fail@plt+0x6e1c>
   18270:	subs	r3, r2, ip
   18274:	str	r3, [sp, #32]
   18278:	ldr	r3, [sp, #36]	; 0x24
   1827c:	sbc	r3, r3, r1
   18280:	str	r3, [sp, #36]	; 0x24
   18284:	ldr	r3, [sp, #32]
   18288:	mov	r1, #0
   1828c:	adds	r2, r3, r5
   18290:	ldr	r3, [sp, #36]	; 0x24
   18294:	adc	r3, r3, r1
   18298:	cmp	r3, r2, asr #31
   1829c:	bne	183c8 <__assert_fail@plt+0x6f60>
   182a0:	mov	r1, r4
   182a4:	mov	r3, r2
   182a8:	b	17654 <__assert_fail@plt+0x61ec>
   182ac:	ldrb	r3, [sp, #597]	; 0x255
   182b0:	cmp	r3, #0
   182b4:	beq	16994 <__assert_fail@plt+0x552c>
   182b8:	mov	r0, r4
   182bc:	mov	r2, #5
   182c0:	ldr	r1, [pc, #-2000]	; 17af8 <__assert_fail@plt+0x6690>
   182c4:	bl	111b0 <dcgettext@plt>
   182c8:	add	r1, sp, #416	; 0x1a0
   182cc:	add	r2, sp, #696	; 0x2b8
   182d0:	mov	r4, r0
   182d4:	add	r0, sp, #140	; 0x8c
   182d8:	bl	12e20 <__assert_fail@plt+0x19b8>
   182dc:	mov	r1, r0
   182e0:	mov	r0, r4
   182e4:	bl	12a38 <__assert_fail@plt+0x15d0>
   182e8:	b	16994 <__assert_fail@plt+0x552c>
   182ec:	mov	r2, #5
   182f0:	ldr	r1, [pc, #-2044]	; 17afc <__assert_fail@plt+0x6694>
   182f4:	mov	r0, #0
   182f8:	bl	111b0 <dcgettext@plt>
   182fc:	bl	12a38 <__assert_fail@plt+0x15d0>
   18300:	b	17024 <__assert_fail@plt+0x5bbc>
   18304:	mov	r2, #5
   18308:	ldr	r1, [pc, #-2064]	; 17b00 <__assert_fail@plt+0x6698>
   1830c:	mov	r0, r4
   18310:	bl	111b0 <dcgettext@plt>
   18314:	bl	12a38 <__assert_fail@plt+0x15d0>
   18318:	b	17018 <__assert_fail@plt+0x5bb0>
   1831c:	bl	111bc <__stack_chk_fail@plt>
   18320:	mov	r3, #52	; 0x34
   18324:	b	16fdc <__assert_fail@plt+0x5b74>
   18328:	mov	r0, lr
   1832c:	ldr	r1, [pc, #-2096]	; 17b04 <__assert_fail@plt+0x669c>
   18330:	mov	r2, #5
   18334:	mov	r8, lr
   18338:	bl	111b0 <dcgettext@plt>
   1833c:	ldrd	r2, [sl, #128]	; 0x80
   18340:	ldrd	r6, [sl, #120]	; 0x78
   18344:	strd	r2, [sp, #8]
   18348:	ldr	r3, [sp, #560]	; 0x230
   1834c:	strd	r6, [sp]
   18350:	str	r3, [sp, #16]
   18354:	ldrd	r2, [sl, #112]	; 0x70
   18358:	bl	12a38 <__assert_fail@plt+0x15d0>
   1835c:	mov	r2, #5
   18360:	ldr	r1, [pc, #-2144]	; 17b08 <__assert_fail@plt+0x66a0>
   18364:	mov	r0, r8
   18368:	bl	111b0 <dcgettext@plt>
   1836c:	mov	r3, r5
   18370:	mov	r2, r4
   18374:	bl	12a38 <__assert_fail@plt+0x15d0>
   18378:	ldr	r3, [sp, #172]	; 0xac
   1837c:	cmn	r3, #1
   18380:	beq	183c0 <__assert_fail@plt+0x6f58>
   18384:	add	r2, sp, #316	; 0x13c
   18388:	ldr	r1, [sp, #68]	; 0x44
   1838c:	ldr	r0, [sp, #44]	; 0x2c
   18390:	bl	1b670 <__assert_fail@plt+0xa208>
   18394:	cmp	r0, #0
   18398:	beq	183c0 <__assert_fail@plt+0x6f58>
   1839c:	ldr	r2, [sp, #172]	; 0xac
   183a0:	ldr	r3, [sp, #348]	; 0x15c
   183a4:	cmp	r2, r3
   183a8:	beq	183c0 <__assert_fail@plt+0x6f58>
   183ac:	mov	r2, #5
   183b0:	ldr	r1, [pc, #-2220]	; 17b0c <__assert_fail@plt+0x66a4>
   183b4:	mov	r0, #0
   183b8:	bl	111b0 <dcgettext@plt>
   183bc:	bl	12a38 <__assert_fail@plt+0x15d0>
   183c0:	ldrb	r8, [sp, #597]	; 0x255
   183c4:	b	177ec <__assert_fail@plt+0x6384>
   183c8:	lsl	r3, fp, #3
   183cc:	lsl	r2, r7, #3
   183d0:	subs	r2, r2, r7
   183d4:	orr	r3, r3, r7, lsr #29
   183d8:	sbc	r3, r3, fp
   183dc:	lsl	r1, r2, #5
   183e0:	lsl	r3, r3, #5
   183e4:	orr	r3, r3, r2, lsr #27
   183e8:	adds	r2, r1, r7
   183ec:	adc	r3, r3, fp
   183f0:	lsl	r1, r2, #4
   183f4:	lsl	r3, r3, #4
   183f8:	orr	r3, r3, r2, lsr #28
   183fc:	mov	ip, #1
   18400:	b	17654 <__assert_fail@plt+0x61ec>
   18404:	push	{r4, r5, r6, r7, r8, lr}
   18408:	mov	r5, r0
   1840c:	sub	sp, sp, #8
   18410:	ldr	r0, [pc, #76]	; 18464 <__assert_fail@plt+0x6ffc>
   18414:	mov	r6, r1
   18418:	mov	r7, r2
   1841c:	bl	1127c <getenv@plt>
   18420:	mov	r8, r0
   18424:	bl	1b3e4 <__assert_fail@plt+0x9f7c>
   18428:	subs	r4, r0, #0
   1842c:	moveq	r5, r4
   18430:	beq	18458 <__assert_fail@plt+0x6ff0>
   18434:	mov	r0, r5
   18438:	stm	sp, {r4, r8}
   1843c:	mov	r2, r7
   18440:	mov	r1, r6
   18444:	mov	r3, #0
   18448:	bl	16538 <__assert_fail@plt+0x50d0>
   1844c:	mov	r5, r0
   18450:	mov	r0, r4
   18454:	bl	1b664 <__assert_fail@plt+0xa1fc>
   18458:	mov	r0, r5
   1845c:	add	sp, sp, #8
   18460:	pop	{r4, r5, r6, r7, r8, pc}
   18464:	ldrdeq	r1, [r2], -r4
   18468:	push	{r4, r5, lr}
   1846c:	sub	sp, sp, #12
   18470:	ldr	r4, [pc, #180]	; 1852c <__assert_fail@plt+0x70c4>
   18474:	cmp	r2, #1
   18478:	mov	r5, r0
   1847c:	ldr	ip, [r4]
   18480:	str	ip, [sp, #4]
   18484:	beq	184c8 <__assert_fail@plt+0x7060>
   18488:	cmp	r2, #2
   1848c:	beq	184fc <__assert_fail@plt+0x7094>
   18490:	mov	r0, sp
   18494:	bl	11198 <time@plt>
   18498:	mov	r0, sp
   1849c:	bl	112b8 <localtime@plt>
   184a0:	cmp	r0, #0
   184a4:	ldrne	r3, [r0, #20]
   184a8:	movne	r0, #1
   184ac:	strne	r3, [r5]
   184b0:	ldr	r2, [sp, #4]
   184b4:	ldr	r3, [r4]
   184b8:	cmp	r2, r3
   184bc:	bne	18528 <__assert_fail@plt+0x70c0>
   184c0:	add	sp, sp, #12
   184c4:	pop	{r4, r5, pc}
   184c8:	ldr	r0, [r1]
   184cc:	str	r0, [r5]
   184d0:	ldr	r1, [r1]
   184d4:	cmp	r1, #68	; 0x44
   184d8:	movgt	r0, r2
   184dc:	bgt	184b0 <__assert_fail@plt+0x7048>
   184e0:	tst	r3, #8
   184e4:	addeq	r0, r0, #100	; 0x64
   184e8:	streq	r0, [r5]
   184ec:	moveq	r0, r2
   184f0:	beq	184b0 <__assert_fail@plt+0x7048>
   184f4:	mov	r0, #0
   184f8:	b	184b0 <__assert_fail@plt+0x7048>
   184fc:	tst	r3, #2
   18500:	beq	184f4 <__assert_fail@plt+0x708c>
   18504:	ldrd	r2, [r1]
   18508:	mov	r0, #1
   1850c:	add	r2, r2, r2, lsl #2
   18510:	add	r2, r2, r2, lsl #2
   18514:	add	r3, r3, r2, lsl #2
   18518:	sub	r3, r3, #1888	; 0x760
   1851c:	sub	r3, r3, #12
   18520:	str	r3, [r5]
   18524:	b	184b0 <__assert_fail@plt+0x7048>
   18528:	bl	111bc <__stack_chk_fail@plt>
   1852c:	andeq	r2, r3, r8, lsl #30
   18530:	push	{r4, r5, r6, r7, r8, r9, lr}
   18534:	sub	sp, sp, #148	; 0x94
   18538:	ldr	r8, [pc, #684]	; 187ec <__assert_fail@plt+0x7384>
   1853c:	mov	r9, r0
   18540:	mov	r0, r1
   18544:	ldr	r3, [r8]
   18548:	mov	r7, r2
   1854c:	mov	r6, r1
   18550:	str	r3, [sp, #140]	; 0x8c
   18554:	bl	1130c <strlen@plt>
   18558:	ands	r5, r7, #4
   1855c:	mov	r4, r0
   18560:	beq	185a8 <__assert_fail@plt+0x7140>
   18564:	mov	r1, #46	; 0x2e
   18568:	mov	r0, r6
   1856c:	bl	11318 <strchr@plt>
   18570:	subs	r5, r0, #0
   18574:	beq	185a8 <__assert_fail@plt+0x7140>
   18578:	sub	r3, r5, r6
   1857c:	sub	r4, r4, r3
   18580:	cmp	r4, #3
   18584:	beq	185a4 <__assert_fail@plt+0x713c>
   18588:	mov	r0, #0
   1858c:	ldr	r2, [sp, #140]	; 0x8c
   18590:	ldr	r3, [r8]
   18594:	cmp	r2, r3
   18598:	bne	187e8 <__assert_fail@plt+0x7380>
   1859c:	add	sp, sp, #148	; 0x94
   185a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   185a4:	mov	r4, r3
   185a8:	sub	r3, r4, #8
   185ac:	cmp	r3, #4
   185b0:	bhi	18588 <__assert_fail@plt+0x7120>
   185b4:	tst	r4, #1
   185b8:	bne	18588 <__assert_fail@plt+0x7120>
   185bc:	sub	r1, r6, #1
   185c0:	add	r0, r1, r4
   185c4:	mov	r2, r6
   185c8:	ldrb	r3, [r1, #1]!
   185cc:	sub	r3, r3, #48	; 0x30
   185d0:	cmp	r3, #9
   185d4:	bhi	18588 <__assert_fail@plt+0x7120>
   185d8:	cmp	r0, r1
   185dc:	bne	185c8 <__assert_fail@plt+0x7160>
   185e0:	lsr	r4, r4, #1
   185e4:	add	r1, sp, #96	; 0x60
   185e8:	add	r0, r6, r4, lsl #1
   185ec:	ldrb	r3, [r2]
   185f0:	ldrb	ip, [r2, #1]
   185f4:	add	r2, r2, #2
   185f8:	sub	r3, r3, #48	; 0x30
   185fc:	cmp	r0, r2
   18600:	add	r3, r3, r3, lsl #2
   18604:	add	r3, ip, r3, lsl #1
   18608:	sub	r3, r3, #48	; 0x30
   1860c:	str	r3, [r1, #4]!
   18610:	bne	185ec <__assert_fail@plt+0x7184>
   18614:	tst	r7, #1
   18618:	sub	r2, r4, #4
   1861c:	beq	187a0 <__assert_fail@plt+0x7338>
   18620:	ldr	r3, [sp, #100]	; 0x64
   18624:	ldr	r1, [sp, #104]	; 0x68
   18628:	ldr	r0, [sp, #108]	; 0x6c
   1862c:	ldr	ip, [sp, #112]	; 0x70
   18630:	sub	r3, r3, #1
   18634:	str	r3, [sp, #28]
   18638:	str	r1, [sp, #24]
   1863c:	str	r0, [sp, #20]
   18640:	mov	r3, r7
   18644:	add	r1, sp, #116	; 0x74
   18648:	add	r0, sp, #32
   1864c:	str	ip, [sp, #16]
   18650:	bl	18468 <__assert_fail@plt+0x7000>
   18654:	cmp	r0, #0
   18658:	beq	18588 <__assert_fail@plt+0x7120>
   1865c:	cmp	r5, #0
   18660:	beq	18690 <__assert_fail@plt+0x7228>
   18664:	ldrb	r3, [r5, #1]
   18668:	sub	r3, r3, #48	; 0x30
   1866c:	cmp	r3, #9
   18670:	bhi	18588 <__assert_fail@plt+0x7120>
   18674:	ldrb	r5, [r5, #2]
   18678:	sub	r2, r5, #48	; 0x30
   1867c:	cmp	r2, #9
   18680:	bhi	18588 <__assert_fail@plt+0x7120>
   18684:	add	r3, r3, r3, lsl #2
   18688:	add	r5, r5, r3, lsl #1
   1868c:	sub	r5, r5, #48	; 0x30
   18690:	ldr	r2, [sp, #16]
   18694:	ldrd	r0, [sp, #20]
   18698:	ldr	r3, [sp, #28]
   1869c:	str	r2, [sp, #60]	; 0x3c
   186a0:	ldr	r2, [sp, #32]
   186a4:	strd	r0, [sp, #64]	; 0x40
   186a8:	str	r3, [sp, #72]	; 0x48
   186ac:	add	r0, sp, #56	; 0x38
   186b0:	mvn	r3, #0
   186b4:	str	r5, [sp, #12]
   186b8:	str	r5, [sp, #56]	; 0x38
   186bc:	str	r2, [sp, #76]	; 0x4c
   186c0:	str	r3, [sp, #88]	; 0x58
   186c4:	bl	11144 <mktime@plt>
   186c8:	cmn	r0, #1
   186cc:	str	r0, [sp, #4]
   186d0:	addne	r0, sp, #56	; 0x38
   186d4:	beq	1878c <__assert_fail@plt+0x7324>
   186d8:	ldr	r2, [r0, #20]
   186dc:	ldr	r3, [sp, #32]
   186e0:	ldr	ip, [r0, #16]
   186e4:	ldr	lr, [r0, #12]
   186e8:	eor	r3, r3, r2
   186ec:	ldr	r1, [sp, #28]
   186f0:	ldr	r2, [sp, #24]
   186f4:	eor	r1, r1, ip
   186f8:	eor	r2, r2, lr
   186fc:	ldr	ip, [sp, #20]
   18700:	ldr	lr, [r0, #8]
   18704:	orr	r3, r3, r1
   18708:	orr	r3, r3, r2
   1870c:	eor	ip, ip, lr
   18710:	ldm	r0, {r2, lr}
   18714:	ldr	r1, [sp, #16]
   18718:	ldr	r0, [sp, #12]
   1871c:	orr	r3, r3, ip
   18720:	eor	r1, r1, lr
   18724:	orr	r3, r3, r1
   18728:	eor	r2, r2, r0
   1872c:	orrs	r3, r3, r2
   18730:	beq	1877c <__assert_fail@plt+0x7314>
   18734:	cmp	r0, #60	; 0x3c
   18738:	bne	18588 <__assert_fail@plt+0x7120>
   1873c:	mov	r1, r6
   18740:	mov	r2, #16
   18744:	add	r0, sp, #124	; 0x7c
   18748:	bl	11228 <__stpcpy_chk@plt>
   1874c:	add	r1, sp, #124	; 0x7c
   18750:	mov	r2, r7
   18754:	mov	r3, r0
   18758:	ldr	r0, [pc, #144]	; 187f0 <__assert_fail@plt+0x7388>
   1875c:	ldrh	lr, [r0]
   18760:	ldrb	ip, [r0, #2]
   18764:	add	r0, sp, #8
   18768:	strh	lr, [r3, #-2]
   1876c:	strb	ip, [r3]
   18770:	bl	18530 <__assert_fail@plt+0x70c8>
   18774:	cmp	r0, #0
   18778:	beq	1858c <__assert_fail@plt+0x7124>
   1877c:	ldr	r3, [sp, #4]
   18780:	mov	r0, #1
   18784:	str	r3, [r9]
   18788:	b	1858c <__assert_fail@plt+0x7124>
   1878c:	add	r0, sp, #4
   18790:	bl	112b8 <localtime@plt>
   18794:	cmp	r0, #0
   18798:	bne	186d8 <__assert_fail@plt+0x7270>
   1879c:	b	18588 <__assert_fail@plt+0x7120>
   187a0:	add	r1, sp, #100	; 0x64
   187a4:	mov	r3, r7
   187a8:	add	r0, sp, #32
   187ac:	bl	18468 <__assert_fail@plt+0x7000>
   187b0:	cmp	r0, #0
   187b4:	beq	18588 <__assert_fail@plt+0x7120>
   187b8:	sub	r4, r4, #-1073741820	; 0xc0000004
   187bc:	add	r3, sp, #100	; 0x64
   187c0:	add	r2, r3, r4, lsl #2
   187c4:	ldr	r3, [r3, r4, lsl #2]
   187c8:	ldrd	r0, [r2, #4]
   187cc:	ldr	r2, [r2, #12]
   187d0:	sub	r3, r3, #1
   187d4:	str	r3, [sp, #28]
   187d8:	str	r0, [sp, #24]
   187dc:	str	r1, [sp, #20]
   187e0:	str	r2, [sp, #16]
   187e4:	b	1865c <__assert_fail@plt+0x71f4>
   187e8:	bl	111bc <__stack_chk_fail@plt>
   187ec:	andeq	r2, r3, r8, lsl #30
   187f0:	andeq	r1, r2, r0, asr #23
   187f4:	push	{r4, lr}
   187f8:	sub	sp, sp, #8
   187fc:	ldr	r4, [pc, #100]	; 18868 <__assert_fail@plt+0x7400>
   18800:	ldr	r0, [pc, #100]	; 1886c <__assert_fail@plt+0x7404>
   18804:	ldr	r3, [r4]
   18808:	str	r3, [sp, #4]
   1880c:	bl	1127c <getenv@plt>
   18810:	subs	r3, r0, #0
   18814:	beq	18824 <__assert_fail@plt+0x73bc>
   18818:	ldrb	r3, [r3]
   1881c:	cmp	r3, #0
   18820:	bne	18840 <__assert_fail@plt+0x73d8>
   18824:	ldr	r0, [pc, #68]	; 18870 <__assert_fail@plt+0x7408>
   18828:	ldr	r2, [sp, #4]
   1882c:	ldr	r3, [r4]
   18830:	cmp	r2, r3
   18834:	bne	18864 <__assert_fail@plt+0x73fc>
   18838:	add	sp, sp, #8
   1883c:	pop	{r4, pc}
   18840:	mov	r2, #10
   18844:	mov	r1, sp
   18848:	bl	11138 <strtol@plt>
   1884c:	ldr	r2, [sp]
   18850:	ldr	r3, [pc, #24]	; 18870 <__assert_fail@plt+0x7408>
   18854:	ldrb	r2, [r2]
   18858:	cmp	r2, #0
   1885c:	movne	r0, r3
   18860:	b	18828 <__assert_fail@plt+0x73c0>
   18864:	bl	111bc <__stack_chk_fail@plt>
   18868:	andeq	r2, r3, r8, lsl #30
   1886c:	andeq	r1, r2, r4, asr #23
   18870:	andeq	r1, r3, r9, rrx
   18874:	push	{r4, r5, r6, lr}
   18878:	subs	r4, r0, #0
   1887c:	beq	188f0 <__assert_fail@plt+0x7488>
   18880:	mov	r1, #47	; 0x2f
   18884:	bl	113c0 <strrchr@plt>
   18888:	subs	r5, r0, #0
   1888c:	beq	188dc <__assert_fail@plt+0x7474>
   18890:	add	r6, r5, #1
   18894:	sub	r3, r6, r4
   18898:	cmp	r3, #6
   1889c:	ble	188dc <__assert_fail@plt+0x7474>
   188a0:	mov	r2, #7
   188a4:	ldr	r1, [pc, #96]	; 1890c <__assert_fail@plt+0x74a4>
   188a8:	sub	r0, r5, #6
   188ac:	bl	1142c <strncmp@plt>
   188b0:	cmp	r0, #0
   188b4:	bne	188dc <__assert_fail@plt+0x7474>
   188b8:	mov	r2, #3
   188bc:	ldr	r1, [pc, #76]	; 18910 <__assert_fail@plt+0x74a8>
   188c0:	mov	r0, r6
   188c4:	bl	1142c <strncmp@plt>
   188c8:	cmp	r0, #0
   188cc:	movne	r4, r6
   188d0:	ldreq	r3, [pc, #60]	; 18914 <__assert_fail@plt+0x74ac>
   188d4:	addeq	r4, r5, #4
   188d8:	streq	r4, [r3]
   188dc:	ldr	r2, [pc, #52]	; 18918 <__assert_fail@plt+0x74b0>
   188e0:	ldr	r3, [pc, #52]	; 1891c <__assert_fail@plt+0x74b4>
   188e4:	str	r4, [r2]
   188e8:	str	r4, [r3]
   188ec:	pop	{r4, r5, r6, pc}
   188f0:	ldr	r3, [pc, #40]	; 18920 <__assert_fail@plt+0x74b8>
   188f4:	mov	r2, #55	; 0x37
   188f8:	mov	r1, #1
   188fc:	ldr	r3, [r3]
   18900:	ldr	r0, [pc, #28]	; 18924 <__assert_fail@plt+0x74bc>
   18904:	bl	11210 <fwrite@plt>
   18908:	bl	11438 <abort@plt>
   1890c:	andeq	r1, r2, ip, lsl #24
   18910:	andeq	r1, r2, r4, lsl ip
   18914:	muleq	r3, r0, r1
   18918:	ldrdeq	r3, [r3], -r8
   1891c:	muleq	r3, r4, r1
   18920:	andeq	r3, r3, r0, lsr #3
   18924:	ldrdeq	r1, [r2], -r4
   18928:	push	{r4, lr}
   1892c:	mov	r2, #48	; 0x30
   18930:	mov	r4, r1
   18934:	mov	r1, #0
   18938:	bl	11360 <memset@plt>
   1893c:	cmp	r4, #10
   18940:	beq	1894c <__assert_fail@plt+0x74e4>
   18944:	str	r4, [r0]
   18948:	pop	{r4, pc}
   1894c:	bl	11438 <abort@plt>
   18950:	push	{r4, r5, r6, lr}
   18954:	mov	r2, #5
   18958:	mov	r5, r0
   1895c:	mov	r6, r1
   18960:	mov	r1, r0
   18964:	mov	r0, #0
   18968:	bl	111b0 <dcgettext@plt>
   1896c:	cmp	r5, r0
   18970:	mov	r4, r0
   18974:	beq	18980 <__assert_fail@plt+0x7518>
   18978:	mov	r0, r4
   1897c:	pop	{r4, r5, r6, pc}
   18980:	bl	1b9fc <__assert_fail@plt+0xa594>
   18984:	ldrb	r3, [r0]
   18988:	bic	r3, r3, #32
   1898c:	cmp	r3, #85	; 0x55
   18990:	bne	189f0 <__assert_fail@plt+0x7588>
   18994:	ldrb	r3, [r0, #1]
   18998:	bic	r3, r3, #32
   1899c:	cmp	r3, #84	; 0x54
   189a0:	bne	18a68 <__assert_fail@plt+0x7600>
   189a4:	ldrb	r3, [r0, #2]
   189a8:	bic	r3, r3, #32
   189ac:	cmp	r3, #70	; 0x46
   189b0:	bne	18a68 <__assert_fail@plt+0x7600>
   189b4:	ldrb	r3, [r0, #3]
   189b8:	cmp	r3, #45	; 0x2d
   189bc:	bne	18a68 <__assert_fail@plt+0x7600>
   189c0:	ldrb	r3, [r0, #4]
   189c4:	cmp	r3, #56	; 0x38
   189c8:	bne	18a68 <__assert_fail@plt+0x7600>
   189cc:	ldrb	r3, [r0, #5]
   189d0:	cmp	r3, #0
   189d4:	bne	18a68 <__assert_fail@plt+0x7600>
   189d8:	ldrb	r2, [r4]
   189dc:	ldr	r3, [pc, #156]	; 18a80 <__assert_fail@plt+0x7618>
   189e0:	ldr	r4, [pc, #156]	; 18a84 <__assert_fail@plt+0x761c>
   189e4:	cmp	r2, #96	; 0x60
   189e8:	movne	r4, r3
   189ec:	b	18978 <__assert_fail@plt+0x7510>
   189f0:	cmp	r3, #71	; 0x47
   189f4:	bne	18a68 <__assert_fail@plt+0x7600>
   189f8:	ldrb	r3, [r0, #1]
   189fc:	bic	r3, r3, #32
   18a00:	cmp	r3, #66	; 0x42
   18a04:	bne	18a68 <__assert_fail@plt+0x7600>
   18a08:	ldrb	r3, [r0, #2]
   18a0c:	cmp	r3, #49	; 0x31
   18a10:	bne	18a68 <__assert_fail@plt+0x7600>
   18a14:	ldrb	r3, [r0, #3]
   18a18:	cmp	r3, #56	; 0x38
   18a1c:	bne	18a68 <__assert_fail@plt+0x7600>
   18a20:	ldrb	r3, [r0, #4]
   18a24:	cmp	r3, #48	; 0x30
   18a28:	bne	18a68 <__assert_fail@plt+0x7600>
   18a2c:	ldrb	r3, [r0, #5]
   18a30:	cmp	r3, #51	; 0x33
   18a34:	bne	18a68 <__assert_fail@plt+0x7600>
   18a38:	ldrb	r3, [r0, #6]
   18a3c:	cmp	r3, #48	; 0x30
   18a40:	bne	18a68 <__assert_fail@plt+0x7600>
   18a44:	ldrb	r3, [r0, #7]
   18a48:	cmp	r3, #0
   18a4c:	bne	18a68 <__assert_fail@plt+0x7600>
   18a50:	ldrb	r2, [r4]
   18a54:	ldr	r3, [pc, #44]	; 18a88 <__assert_fail@plt+0x7620>
   18a58:	ldr	r4, [pc, #44]	; 18a8c <__assert_fail@plt+0x7624>
   18a5c:	cmp	r2, #96	; 0x60
   18a60:	movne	r4, r3
   18a64:	b	18978 <__assert_fail@plt+0x7510>
   18a68:	ldr	r3, [pc, #32]	; 18a90 <__assert_fail@plt+0x7628>
   18a6c:	ldr	r4, [pc, #32]	; 18a94 <__assert_fail@plt+0x762c>
   18a70:	cmp	r6, #9
   18a74:	movne	r4, r3
   18a78:	mov	r0, r4
   18a7c:	pop	{r4, r5, r6, pc}
   18a80:	andeq	r1, r2, r0, ror ip
   18a84:	andeq	r1, r2, ip, ror ip
   18a88:	andeq	r1, r2, r4, ror ip
   18a8c:	andeq	r1, r2, r8, ror ip
   18a90:	andeq	r1, r2, r0, lsl #25
   18a94:	andeq	r1, r2, ip, ror #24
   18a98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a9c:	sub	sp, sp, #124	; 0x7c
   18aa0:	ldr	ip, [pc, #3576]	; 198a0 <__assert_fail@plt+0x8438>
   18aa4:	str	r3, [sp, #24]
   18aa8:	ldr	r3, [sp, #168]	; 0xa8
   18aac:	ldr	ip, [ip]
   18ab0:	str	r3, [sp, #56]	; 0x38
   18ab4:	ldr	r3, [sp, #172]	; 0xac
   18ab8:	ldr	r8, [sp, #160]	; 0xa0
   18abc:	str	r3, [sp, #80]	; 0x50
   18ac0:	ldr	r3, [sp, #176]	; 0xb0
   18ac4:	mov	fp, r0
   18ac8:	str	r3, [sp, #76]	; 0x4c
   18acc:	mov	sl, r1
   18ad0:	str	r2, [sp, #36]	; 0x24
   18ad4:	str	ip, [sp, #116]	; 0x74
   18ad8:	bl	11234 <__ctype_get_mb_cur_max@plt>
   18adc:	ldr	r3, [sp, #164]	; 0xa4
   18ae0:	ands	r4, r3, #2
   18ae4:	movne	r3, #1
   18ae8:	moveq	r3, #0
   18aec:	str	r3, [sp, #32]
   18af0:	str	r0, [sp, #64]	; 0x40
   18af4:	cmp	r8, #10
   18af8:	ldrls	pc, [pc, r8, lsl #2]
   18afc:	b	1a2ac <__assert_fail@plt+0x8e44>
   18b00:	strdeq	r8, [r1], -r4
   18b04:	andeq	r8, r1, ip, lsl #31
   18b08:	andeq	r9, r1, ip, lsl #11
   18b0c:	andeq	r8, r1, ip, lsr #31
   18b10:	andeq	r8, r1, r0, ror #28
   18b14:	andeq	r8, r1, r8, lsr #29
   18b18:	andeq	r8, r1, r4, lsr #30
   18b1c:	andeq	r8, r1, ip, asr pc
   18b20:	andeq	r8, r1, ip, lsr #22
   18b24:	andeq	r8, r1, ip, lsr #22
   18b28:	andeq	r8, r1, ip, lsr #22
   18b2c:	cmp	r8, #10
   18b30:	beq	18b54 <__assert_fail@plt+0x76ec>
   18b34:	mov	r1, r8
   18b38:	ldr	r0, [pc, #3428]	; 198a4 <__assert_fail@plt+0x843c>
   18b3c:	bl	18950 <__assert_fail@plt+0x74e8>
   18b40:	mov	r1, r8
   18b44:	str	r0, [sp, #80]	; 0x50
   18b48:	ldr	r0, [pc, #3420]	; 198ac <__assert_fail@plt+0x8444>
   18b4c:	bl	18950 <__assert_fail@plt+0x74e8>
   18b50:	str	r0, [sp, #76]	; 0x4c
   18b54:	cmp	r4, #0
   18b58:	movne	r4, #0
   18b5c:	beq	19f6c <__assert_fail@plt+0x8b04>
   18b60:	ldr	r7, [sp, #76]	; 0x4c
   18b64:	mov	r5, #0
   18b68:	mov	r6, #1
   18b6c:	mov	r0, r7
   18b70:	str	r6, [sp, #40]	; 0x28
   18b74:	str	r5, [sp, #68]	; 0x44
   18b78:	bl	1130c <strlen@plt>
   18b7c:	str	r6, [sp, #28]
   18b80:	str	r5, [sp, #44]	; 0x2c
   18b84:	str	r5, [sp, #72]	; 0x48
   18b88:	str	r7, [sp, #60]	; 0x3c
   18b8c:	str	r0, [sp, #52]	; 0x34
   18b90:	str	r8, [sp, #160]	; 0xa0
   18b94:	mov	r8, fp
   18b98:	ldr	fp, [sp, #160]	; 0xa0
   18b9c:	mov	r9, #0
   18ba0:	ldr	r3, [sp, #24]
   18ba4:	cmn	r3, #1
   18ba8:	beq	19110 <__assert_fail@plt+0x7ca8>
   18bac:	ldr	r3, [sp, #24]
   18bb0:	subs	r6, r3, r9
   18bb4:	movne	r6, #1
   18bb8:	cmp	r6, #0
   18bbc:	beq	19128 <__assert_fail@plt+0x7cc0>
   18bc0:	ldr	r7, [sp, #28]
   18bc4:	ldr	r0, [sp, #36]	; 0x24
   18bc8:	cmp	fp, #2
   18bcc:	moveq	r7, #0
   18bd0:	andne	r7, r7, #1
   18bd4:	add	r3, r0, r9
   18bd8:	cmp	r7, #0
   18bdc:	str	r3, [sp, #48]	; 0x30
   18be0:	beq	195cc <__assert_fail@plt+0x8164>
   18be4:	ldr	r2, [sp, #52]	; 0x34
   18be8:	cmp	r2, #0
   18bec:	beq	198b0 <__assert_fail@plt+0x8448>
   18bf0:	ldr	r1, [sp, #24]
   18bf4:	cmp	r2, #1
   18bf8:	mov	r3, r2
   18bfc:	movls	r3, #0
   18c00:	movhi	r3, #1
   18c04:	cmn	r1, #1
   18c08:	movne	r3, #0
   18c0c:	cmp	r3, #0
   18c10:	add	r5, r9, r2
   18c14:	beq	18c20 <__assert_fail@plt+0x77b8>
   18c18:	bl	1130c <strlen@plt>
   18c1c:	str	r0, [sp, #24]
   18c20:	ldr	r3, [sp, #24]
   18c24:	cmp	r5, r3
   18c28:	bhi	198b0 <__assert_fail@plt+0x8448>
   18c2c:	ldr	r2, [sp, #52]	; 0x34
   18c30:	ldr	r1, [sp, #60]	; 0x3c
   18c34:	ldr	r0, [sp, #48]	; 0x30
   18c38:	bl	111a4 <memcmp@plt>
   18c3c:	cmp	r0, #0
   18c40:	bne	198b0 <__assert_fail@plt+0x8448>
   18c44:	ldr	r3, [sp, #32]
   18c48:	cmp	r3, #0
   18c4c:	bne	1a16c <__assert_fail@plt+0x8d04>
   18c50:	ldr	r3, [sp, #48]	; 0x30
   18c54:	ldrb	r5, [r3]
   18c58:	cmp	r5, #126	; 0x7e
   18c5c:	ldrls	pc, [pc, r5, lsl #2]
   18c60:	b	19530 <__assert_fail@plt+0x80c8>
   18c64:	andeq	r9, r1, ip, lsl r4
   18c68:	andeq	r9, r1, r0, lsr r5
   18c6c:	andeq	r9, r1, r0, lsr r5
   18c70:	andeq	r9, r1, r0, lsr r5
   18c74:	andeq	r9, r1, r0, lsr r5
   18c78:	andeq	r9, r1, r0, lsr r5
   18c7c:	andeq	r9, r1, r0, lsr r5
   18c80:	andeq	r9, r1, r8, ror #9
   18c84:	ldrdeq	r9, [r1], -r8
   18c88:	ldrdeq	r9, [r1], -r8
   18c8c:	andeq	r9, r1, r0, lsr #7
   18c90:	strdeq	r9, [r1], -r8
   18c94:	andeq	r9, r1, r0, ror #7
   18c98:	andeq	r9, r1, r0, lsl r3
   18c9c:	andeq	r9, r1, r0, lsr r5
   18ca0:	andeq	r9, r1, r0, lsr r5
   18ca4:	andeq	r9, r1, r0, lsr r5
   18ca8:	andeq	r9, r1, r0, lsr r5
   18cac:	andeq	r9, r1, r0, lsr r5
   18cb0:	andeq	r9, r1, r0, lsr r5
   18cb4:	andeq	r9, r1, r0, lsr r5
   18cb8:	andeq	r9, r1, r0, lsr r5
   18cbc:	andeq	r9, r1, r0, lsr r5
   18cc0:	andeq	r9, r1, r0, lsr r5
   18cc4:	andeq	r9, r1, r0, lsr r5
   18cc8:	andeq	r9, r1, r0, lsr r5
   18ccc:	andeq	r9, r1, r0, lsr r5
   18cd0:	andeq	r9, r1, r0, lsr r5
   18cd4:	andeq	r9, r1, r0, lsr r5
   18cd8:	andeq	r9, r1, r0, lsr r5
   18cdc:	andeq	r9, r1, r0, lsr r5
   18ce0:	andeq	r9, r1, r0, lsr r5
   18ce4:	strdeq	r9, [r1], -r0
   18ce8:	andeq	r9, r1, r4, lsl #8
   18cec:	andeq	r9, r1, r4, lsl #8
   18cf0:	andeq	r9, r1, r8, lsl #10
   18cf4:	andeq	r9, r1, r4, lsl #8
   18cf8:	andeq	r9, r1, r4, lsr #10
   18cfc:	andeq	r9, r1, r4, lsl #8
   18d00:	andeq	r9, r1, r4, asr #4
   18d04:	andeq	r9, r1, r4, lsl #8
   18d08:	andeq	r9, r1, r4, lsl #8
   18d0c:	andeq	r9, r1, r4, lsl #8
   18d10:	andeq	r9, r1, r4, lsr #10
   18d14:	andeq	r9, r1, r4, lsr #10
   18d18:	andeq	r9, r1, r4, lsr #10
   18d1c:	andeq	r9, r1, r4, lsr #10
   18d20:	andeq	r9, r1, r4, lsr #10
   18d24:	andeq	r9, r1, r4, lsr #10
   18d28:	andeq	r9, r1, r4, lsr #10
   18d2c:	andeq	r9, r1, r4, lsr #10
   18d30:	andeq	r9, r1, r4, lsr #10
   18d34:	andeq	r9, r1, r4, lsr #10
   18d38:	andeq	r9, r1, r4, lsr #10
   18d3c:	andeq	r9, r1, r4, lsr #10
   18d40:	andeq	r9, r1, r4, lsr #10
   18d44:	andeq	r9, r1, r4, lsr #10
   18d48:	andeq	r9, r1, r4, lsr #10
   18d4c:	andeq	r9, r1, r4, lsr #10
   18d50:	andeq	r9, r1, r4, lsl #8
   18d54:	andeq	r9, r1, r4, lsl #8
   18d58:	andeq	r9, r1, r4, lsl #8
   18d5c:	andeq	r9, r1, r4, lsl #8
   18d60:	andeq	r9, r1, r8, lsl r2
   18d64:	andeq	r9, r1, r0, lsr r5
   18d68:	andeq	r9, r1, r4, lsr #10
   18d6c:	andeq	r9, r1, r4, lsr #10
   18d70:	andeq	r9, r1, r4, lsr #10
   18d74:	andeq	r9, r1, r4, lsr #10
   18d78:	andeq	r9, r1, r4, lsr #10
   18d7c:	andeq	r9, r1, r4, lsr #10
   18d80:	andeq	r9, r1, r4, lsr #10
   18d84:	andeq	r9, r1, r4, lsr #10
   18d88:	andeq	r9, r1, r4, lsr #10
   18d8c:	andeq	r9, r1, r4, lsr #10
   18d90:	andeq	r9, r1, r4, lsr #10
   18d94:	andeq	r9, r1, r4, lsr #10
   18d98:	andeq	r9, r1, r4, lsr #10
   18d9c:	andeq	r9, r1, r4, lsr #10
   18da0:	andeq	r9, r1, r4, lsr #10
   18da4:	andeq	r9, r1, r4, lsr #10
   18da8:	andeq	r9, r1, r4, lsr #10
   18dac:	andeq	r9, r1, r4, lsr #10
   18db0:	andeq	r9, r1, r4, lsr #10
   18db4:	andeq	r9, r1, r4, lsr #10
   18db8:	andeq	r9, r1, r4, lsr #10
   18dbc:	andeq	r9, r1, r4, lsr #10
   18dc0:	andeq	r9, r1, r4, lsr #10
   18dc4:	andeq	r9, r1, r4, lsr #10
   18dc8:	andeq	r9, r1, r4, lsr #10
   18dcc:	andeq	r9, r1, r4, lsr #10
   18dd0:	andeq	r9, r1, r4, lsl #8
   18dd4:	ldrdeq	r9, [r1], -r0
   18dd8:	andeq	r9, r1, r4, lsr #10
   18ddc:	andeq	r9, r1, r4, lsl #8
   18de0:	andeq	r9, r1, r4, lsr #10
   18de4:	andeq	r9, r1, r4, lsl #8
   18de8:	andeq	r9, r1, r4, lsr #10
   18dec:	andeq	r9, r1, r4, lsr #10
   18df0:	andeq	r9, r1, r4, lsr #10
   18df4:	andeq	r9, r1, r4, lsr #10
   18df8:	andeq	r9, r1, r4, lsr #10
   18dfc:	andeq	r9, r1, r4, lsr #10
   18e00:	andeq	r9, r1, r4, lsr #10
   18e04:	andeq	r9, r1, r4, lsr #10
   18e08:	andeq	r9, r1, r4, lsr #10
   18e0c:	andeq	r9, r1, r4, lsr #10
   18e10:	andeq	r9, r1, r4, lsr #10
   18e14:	andeq	r9, r1, r4, lsr #10
   18e18:	andeq	r9, r1, r4, lsr #10
   18e1c:	andeq	r9, r1, r4, lsr #10
   18e20:	andeq	r9, r1, r4, lsr #10
   18e24:	andeq	r9, r1, r4, lsr #10
   18e28:	andeq	r9, r1, r4, lsr #10
   18e2c:	andeq	r9, r1, r4, lsr #10
   18e30:	andeq	r9, r1, r4, lsr #10
   18e34:	andeq	r9, r1, r4, lsr #10
   18e38:	andeq	r9, r1, r4, lsr #10
   18e3c:	andeq	r9, r1, r4, lsr #10
   18e40:	andeq	r9, r1, r4, lsr #10
   18e44:	andeq	r9, r1, r4, lsr #10
   18e48:	andeq	r9, r1, r4, lsr #10
   18e4c:	andeq	r9, r1, r4, lsr #10
   18e50:	andeq	r8, r1, r8, ror #31
   18e54:	andeq	r9, r1, r4, lsl #8
   18e58:	andeq	r8, r1, r8, ror #31
   18e5c:	andeq	r9, r1, r8, lsl #10
   18e60:	cmp	r4, #0
   18e64:	moveq	r3, #1
   18e68:	streq	r3, [sp, #28]
   18e6c:	beq	19598 <__assert_fail@plt+0x8130>
   18e70:	mov	r3, #0
   18e74:	mov	r4, r3
   18e78:	mov	r2, #1
   18e7c:	str	r2, [sp, #40]	; 0x28
   18e80:	str	r3, [sp, #68]	; 0x44
   18e84:	str	r2, [sp, #32]
   18e88:	str	r2, [sp, #52]	; 0x34
   18e8c:	ldr	r3, [pc, #2584]	; 198ac <__assert_fail@plt+0x8444>
   18e90:	str	r4, [sp, #44]	; 0x2c
   18e94:	str	r4, [sp, #72]	; 0x48
   18e98:	str	r4, [sp, #28]
   18e9c:	str	r3, [sp, #60]	; 0x3c
   18ea0:	mov	r8, #2
   18ea4:	b	18b90 <__assert_fail@plt+0x7728>
   18ea8:	cmp	r4, #0
   18eac:	bne	1a138 <__assert_fail@plt+0x8cd0>
   18eb0:	cmp	sl, #0
   18eb4:	beq	19ef8 <__assert_fail@plt+0x8a90>
   18eb8:	mov	r3, #34	; 0x22
   18ebc:	strb	r3, [fp]
   18ec0:	ldr	r3, [pc, #2528]	; 198a8 <__assert_fail@plt+0x8440>
   18ec4:	mov	r1, r4
   18ec8:	mov	r2, #1
   18ecc:	str	r4, [sp, #68]	; 0x44
   18ed0:	str	r2, [sp, #40]	; 0x28
   18ed4:	mov	r4, r2
   18ed8:	str	r1, [sp, #44]	; 0x2c
   18edc:	str	r1, [sp, #72]	; 0x48
   18ee0:	str	r1, [sp, #32]
   18ee4:	str	r2, [sp, #28]
   18ee8:	str	r2, [sp, #52]	; 0x34
   18eec:	str	r3, [sp, #60]	; 0x3c
   18ef0:	b	18b90 <__assert_fail@plt+0x7728>
   18ef4:	mov	r3, #0
   18ef8:	str	r3, [sp, #68]	; 0x44
   18efc:	str	r3, [sp, #44]	; 0x2c
   18f00:	str	r3, [sp, #32]
   18f04:	str	r3, [sp, #28]
   18f08:	str	r3, [sp, #60]	; 0x3c
   18f0c:	mov	r3, #1
   18f10:	str	r8, [sp, #72]	; 0x48
   18f14:	str	r8, [sp, #52]	; 0x34
   18f18:	mov	r4, r8
   18f1c:	str	r3, [sp, #40]	; 0x28
   18f20:	b	18b90 <__assert_fail@plt+0x7728>
   18f24:	mov	r3, #1
   18f28:	str	r3, [sp, #40]	; 0x28
   18f2c:	str	r3, [sp, #32]
   18f30:	str	r3, [sp, #28]
   18f34:	str	r3, [sp, #52]	; 0x34
   18f38:	ldr	r3, [pc, #2408]	; 198a8 <__assert_fail@plt+0x8440>
   18f3c:	mov	r2, #0
   18f40:	mov	r4, r2
   18f44:	str	r2, [sp, #68]	; 0x44
   18f48:	str	r2, [sp, #44]	; 0x2c
   18f4c:	str	r2, [sp, #72]	; 0x48
   18f50:	str	r3, [sp, #60]	; 0x3c
   18f54:	mov	r8, #5
   18f58:	b	18b90 <__assert_fail@plt+0x7728>
   18f5c:	mov	r3, #0
   18f60:	mov	r2, #1
   18f64:	str	r2, [sp, #40]	; 0x28
   18f68:	mov	r4, r3
   18f6c:	str	r3, [sp, #68]	; 0x44
   18f70:	str	r2, [sp, #28]
   18f74:	str	r3, [sp, #44]	; 0x2c
   18f78:	str	r3, [sp, #72]	; 0x48
   18f7c:	str	r3, [sp, #32]
   18f80:	str	r3, [sp, #52]	; 0x34
   18f84:	str	r3, [sp, #60]	; 0x3c
   18f88:	b	18b90 <__assert_fail@plt+0x7728>
   18f8c:	mov	r2, #1
   18f90:	mov	r3, #0
   18f94:	str	r2, [sp, #40]	; 0x28
   18f98:	mov	r4, r3
   18f9c:	str	r3, [sp, #68]	; 0x44
   18fa0:	str	r8, [sp, #52]	; 0x34
   18fa4:	str	r2, [sp, #32]
   18fa8:	b	18e8c <__assert_fail@plt+0x7a24>
   18fac:	mov	r3, #1
   18fb0:	str	r3, [sp, #40]	; 0x28
   18fb4:	str	r3, [sp, #32]
   18fb8:	str	r3, [sp, #28]
   18fbc:	str	r3, [sp, #52]	; 0x34
   18fc0:	ldr	r3, [pc, #2276]	; 198ac <__assert_fail@plt+0x8444>
   18fc4:	mov	r2, #0
   18fc8:	mov	r4, r2
   18fcc:	str	r2, [sp, #68]	; 0x44
   18fd0:	str	r2, [sp, #44]	; 0x2c
   18fd4:	str	r2, [sp, #72]	; 0x48
   18fd8:	str	r3, [sp, #60]	; 0x3c
   18fdc:	mov	r8, #2
   18fe0:	b	18b90 <__assert_fail@plt+0x7728>
   18fe4:	mov	r7, #0
   18fe8:	ldr	r3, [sp, #24]
   18fec:	cmn	r3, #1
   18ff0:	beq	19b2c <__assert_fail@plt+0x86c4>
   18ff4:	ldr	r3, [sp, #24]
   18ff8:	subs	r3, r3, #1
   18ffc:	movne	r3, #1
   19000:	cmp	r3, #0
   19004:	sub	r2, fp, #2
   19008:	clz	r2, r2
   1900c:	lsr	r2, r2, #5
   19010:	bne	1920c <__assert_fail@plt+0x7da4>
   19014:	cmp	r9, #0
   19018:	bne	1920c <__assert_fail@plt+0x7da4>
   1901c:	ldr	r3, [sp, #32]
   19020:	tst	r3, r2
   19024:	bne	1932c <__assert_fail@plt+0x7ec4>
   19028:	ldr	r3, [sp, #28]
   1902c:	eor	r3, r3, #1
   19030:	orr	r3, r2, r3
   19034:	ldr	r2, [sp, #32]
   19038:	eor	r3, r3, #1
   1903c:	orrs	r3, r2, r3
   19040:	beq	19070 <__assert_fail@plt+0x7c08>
   19044:	mov	r3, #0
   19048:	ldr	r1, [sp, #56]	; 0x38
   1904c:	cmp	r1, #0
   19050:	beq	19070 <__assert_fail@plt+0x7c08>
   19054:	lsr	r2, r5, #5
   19058:	and	r0, r5, #31
   1905c:	uxtb	r2, r2
   19060:	ldr	r1, [r1, r2, lsl #2]
   19064:	lsr	r2, r1, r0
   19068:	tst	r2, #1
   1906c:	bne	19078 <__assert_fail@plt+0x7c10>
   19070:	cmp	r7, #0
   19074:	beq	192c8 <__assert_fail@plt+0x7e60>
   19078:	sub	r2, fp, #2
   1907c:	clz	r2, r2
   19080:	lsr	r2, r2, #5
   19084:	ldr	r3, [sp, #32]
   19088:	cmp	r3, #0
   1908c:	bne	193b8 <__assert_fail@plt+0x7f50>
   19090:	ldr	r3, [sp, #44]	; 0x2c
   19094:	eor	r3, r3, #1
   19098:	ands	r3, r2, r3
   1909c:	beq	190d4 <__assert_fail@plt+0x7c6c>
   190a0:	cmp	sl, r4
   190a4:	movhi	r2, #39	; 0x27
   190a8:	strbhi	r2, [r8, r4]
   190ac:	add	r2, r4, #1
   190b0:	cmp	r2, sl
   190b4:	movcc	r1, #36	; 0x24
   190b8:	strbcc	r1, [r8, r2]
   190bc:	add	r2, r4, #2
   190c0:	cmp	r2, sl
   190c4:	add	r4, r4, #3
   190c8:	movcc	r1, #39	; 0x27
   190cc:	strbcc	r1, [r8, r2]
   190d0:	str	r3, [sp, #44]	; 0x2c
   190d4:	cmp	r4, sl
   190d8:	movcc	r3, #92	; 0x5c
   190dc:	strbcc	r3, [r8, r4]
   190e0:	add	r9, r9, #1
   190e4:	add	r4, r4, #1
   190e8:	cmp	r4, sl
   190ec:	ldr	r3, [sp, #40]	; 0x28
   190f0:	strbcc	r5, [r8, r4]
   190f4:	cmp	r6, #0
   190f8:	moveq	r3, #0
   190fc:	str	r3, [sp, #40]	; 0x28
   19100:	ldr	r3, [sp, #24]
   19104:	add	r4, r4, #1
   19108:	cmn	r3, #1
   1910c:	bne	18bac <__assert_fail@plt+0x7744>
   19110:	ldr	r3, [sp, #36]	; 0x24
   19114:	ldrb	r6, [r3, r9]
   19118:	adds	r6, r6, #0
   1911c:	movne	r6, #1
   19120:	cmp	r6, #0
   19124:	bne	18bc0 <__assert_fail@plt+0x7758>
   19128:	str	fp, [sp, #160]	; 0xa0
   1912c:	mov	fp, r8
   19130:	ldr	r8, [sp, #160]	; 0xa0
   19134:	ldr	r1, [sp, #32]
   19138:	cmp	r4, #0
   1913c:	sub	r2, r8, #2
   19140:	clz	r2, r2
   19144:	lsr	r2, r2, #5
   19148:	andeq	r3, r2, r1
   1914c:	movne	r3, #0
   19150:	cmp	r3, #0
   19154:	bne	1a240 <__assert_fail@plt+0x8dd8>
   19158:	eor	r3, r1, #1
   1915c:	ands	r2, r2, r3
   19160:	beq	1a17c <__assert_fail@plt+0x8d14>
   19164:	ldr	r3, [sp, #68]	; 0x44
   19168:	cmp	r3, #0
   1916c:	beq	1a180 <__assert_fail@plt+0x8d18>
   19170:	ldr	r3, [sp, #40]	; 0x28
   19174:	cmp	r3, #0
   19178:	bne	1a1fc <__assert_fail@plt+0x8d94>
   1917c:	ldr	r3, [sp, #72]	; 0x48
   19180:	adds	r3, r3, #0
   19184:	movne	r3, #1
   19188:	cmp	sl, #0
   1918c:	movne	r3, #0
   19190:	cmp	r3, #0
   19194:	ldreq	r2, [sp, #68]	; 0x44
   19198:	beq	1a180 <__assert_fail@plt+0x8d18>
   1919c:	ldr	sl, [sp, #72]	; 0x48
   191a0:	str	r3, [sp, #68]	; 0x44
   191a4:	ldr	r3, [pc, #1792]	; 198ac <__assert_fail@plt+0x8444>
   191a8:	mov	r2, #39	; 0x27
   191ac:	mov	r4, #1
   191b0:	str	r3, [sp, #60]	; 0x3c
   191b4:	mov	r3, #0
   191b8:	strb	r2, [fp]
   191bc:	str	r4, [sp, #52]	; 0x34
   191c0:	mov	r8, #2
   191c4:	str	r3, [sp, #32]
   191c8:	b	18b90 <__assert_fail@plt+0x7728>
   191cc:	mov	r7, #0
   191d0:	cmp	fp, #2
   191d4:	beq	19b0c <__assert_fail@plt+0x86a4>
   191d8:	ldr	r3, [sp, #52]	; 0x34
   191dc:	ldr	r2, [sp, #28]
   191e0:	ldr	r1, [sp, #32]
   191e4:	cmp	r3, #0
   191e8:	andne	r2, r2, r1
   191ec:	moveq	r2, #0
   191f0:	cmp	r2, #0
   191f4:	moveq	r5, #92	; 0x5c
   191f8:	moveq	r3, r5
   191fc:	bne	19b18 <__assert_fail@plt+0x86b0>
   19200:	ldr	r1, [sp, #28]
   19204:	cmp	r1, #0
   19208:	bne	1a288 <__assert_fail@plt+0x8e20>
   1920c:	mov	r6, #0
   19210:	b	19028 <__assert_fail@plt+0x7bc0>
   19214:	mov	r7, #0
   19218:	cmp	fp, #2
   1921c:	beq	19b7c <__assert_fail@plt+0x8714>
   19220:	cmp	fp, #5
   19224:	beq	19b40 <__assert_fail@plt+0x86d8>
   19228:	sub	r2, fp, #2
   1922c:	mov	r6, #0
   19230:	clz	r2, r2
   19234:	mov	r5, #63	; 0x3f
   19238:	lsr	r2, r2, #5
   1923c:	b	19028 <__assert_fail@plt+0x7bc0>
   19240:	mov	r7, #0
   19244:	cmp	fp, #2
   19248:	strne	r6, [sp, #68]	; 0x44
   1924c:	movne	r2, #0
   19250:	movne	r5, #39	; 0x27
   19254:	bne	19028 <__assert_fail@plt+0x7bc0>
   19258:	ldr	r3, [sp, #32]
   1925c:	cmp	r3, #0
   19260:	bne	19f5c <__assert_fail@plt+0x8af4>
   19264:	cmp	sl, #0
   19268:	ldr	r3, [sp, #72]	; 0x48
   1926c:	clz	r3, r3
   19270:	lsr	r3, r3, #5
   19274:	moveq	r3, #0
   19278:	cmp	r3, #0
   1927c:	bne	19e90 <__assert_fail@plt+0x8a28>
   19280:	cmp	sl, r4
   19284:	movhi	r3, #39	; 0x27
   19288:	strbhi	r3, [r8, r4]
   1928c:	add	r3, r4, #1
   19290:	cmp	sl, r3
   19294:	movhi	r2, #92	; 0x5c
   19298:	strbhi	r2, [r8, r3]
   1929c:	add	r3, r4, #2
   192a0:	cmp	sl, r3
   192a4:	movhi	r2, #39	; 0x27
   192a8:	strbhi	r2, [r8, r3]
   192ac:	mov	r3, #0
   192b0:	cmp	r7, #0
   192b4:	add	r4, r4, #3
   192b8:	str	r3, [sp, #44]	; 0x2c
   192bc:	str	r6, [sp, #68]	; 0x44
   192c0:	mov	r5, #39	; 0x27
   192c4:	bne	19078 <__assert_fail@plt+0x7c10>
   192c8:	ldr	r2, [sp, #44]	; 0x2c
   192cc:	eor	r3, r3, #1
   192d0:	and	r3, r3, r2
   192d4:	add	r9, r9, #1
   192d8:	uxtb	r3, r3
   192dc:	cmp	r3, #0
   192e0:	beq	190e8 <__assert_fail@plt+0x7c80>
   192e4:	cmp	sl, r4
   192e8:	movhi	r3, #39	; 0x27
   192ec:	strbhi	r3, [r8, r4]
   192f0:	add	r3, r4, #1
   192f4:	cmp	sl, r3
   192f8:	movhi	r2, #39	; 0x27
   192fc:	strbhi	r2, [r8, r3]
   19300:	mov	r3, #0
   19304:	add	r4, r4, #2
   19308:	str	r3, [sp, #44]	; 0x2c
   1930c:	b	190e8 <__assert_fail@plt+0x7c80>
   19310:	mov	r3, #114	; 0x72
   19314:	ldr	r1, [sp, #32]
   19318:	sub	r2, fp, #2
   1931c:	clz	r2, r2
   19320:	lsr	r2, r2, #5
   19324:	tst	r2, r1
   19328:	beq	19200 <__assert_fail@plt+0x7d98>
   1932c:	mov	fp, r8
   19330:	mov	r8, #2
   19334:	ldr	r3, [sp, #28]
   19338:	cmp	r3, #0
   1933c:	movne	r8, #4
   19340:	ldr	r3, [sp, #164]	; 0xa4
   19344:	mov	ip, #0
   19348:	bic	r3, r3, #2
   1934c:	str	r3, [sp, #4]
   19350:	ldr	r3, [sp, #76]	; 0x4c
   19354:	str	r8, [sp]
   19358:	str	r3, [sp, #16]
   1935c:	ldr	r3, [sp, #80]	; 0x50
   19360:	ldr	r2, [sp, #36]	; 0x24
   19364:	str	r3, [sp, #12]
   19368:	mov	r1, sl
   1936c:	ldr	r3, [sp, #24]
   19370:	mov	r0, fp
   19374:	str	ip, [sp, #8]
   19378:	bl	18a98 <__assert_fail@plt+0x7630>
   1937c:	mov	r4, r0
   19380:	ldr	r3, [pc, #1304]	; 198a0 <__assert_fail@plt+0x8438>
   19384:	ldr	r2, [sp, #116]	; 0x74
   19388:	mov	r0, r4
   1938c:	ldr	r3, [r3]
   19390:	cmp	r2, r3
   19394:	bne	1a284 <__assert_fail@plt+0x8e1c>
   19398:	add	sp, sp, #124	; 0x7c
   1939c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193a0:	mov	r5, #110	; 0x6e
   193a4:	ldr	r3, [sp, #32]
   193a8:	mov	r2, #0
   193ac:	cmp	r3, #0
   193b0:	mov	r6, r2
   193b4:	beq	19090 <__assert_fail@plt+0x7c28>
   193b8:	str	fp, [sp, #160]	; 0xa0
   193bc:	mov	fp, r8
   193c0:	ldr	r8, [sp, #160]	; 0xa0
   193c4:	mov	r3, r2
   193c8:	ldr	r2, [sp, #28]
   193cc:	and	r2, r2, r3
   193d0:	str	r2, [sp, #28]
   193d4:	b	19334 <__assert_fail@plt+0x7ecc>
   193d8:	mov	r5, #116	; 0x74
   193dc:	b	193a4 <__assert_fail@plt+0x7f3c>
   193e0:	mov	r5, #102	; 0x66
   193e4:	ldr	r3, [sp, #32]
   193e8:	cmp	r3, #0
   193ec:	bne	19f98 <__assert_fail@plt+0x8b30>
   193f0:	mov	r6, #0
   193f4:	b	190d4 <__assert_fail@plt+0x7c6c>
   193f8:	mov	r5, #118	; 0x76
   193fc:	b	193e4 <__assert_fail@plt+0x7f7c>
   19400:	mov	r7, #0
   19404:	mov	r6, #0
   19408:	b	19044 <__assert_fail@plt+0x7bdc>
   1940c:	ldr	r3, [sp, #32]
   19410:	cmp	r3, #0
   19414:	bne	1a1dc <__assert_fail@plt+0x8d74>
   19418:	mov	r7, r3
   1941c:	ldr	r3, [sp, #44]	; 0x2c
   19420:	sub	r2, fp, #2
   19424:	eor	r3, r3, #1
   19428:	clz	r2, r2
   1942c:	lsr	r2, r2, #5
   19430:	ands	r3, r2, r3
   19434:	beq	19e7c <__assert_fail@plt+0x8a14>
   19438:	cmp	sl, r4
   1943c:	movhi	r1, #39	; 0x27
   19440:	strbhi	r1, [r8, r4]
   19444:	add	r1, r4, #1
   19448:	cmp	sl, r1
   1944c:	movhi	r0, #36	; 0x24
   19450:	strbhi	r0, [r8, r1]
   19454:	add	r1, r4, #2
   19458:	cmp	sl, r1
   1945c:	movhi	r0, #39	; 0x27
   19460:	strbhi	r0, [r8, r1]
   19464:	add	r1, r4, #3
   19468:	cmp	sl, r1
   1946c:	bls	19edc <__assert_fail@plt+0x8a74>
   19470:	mov	r4, r1
   19474:	mov	r1, #92	; 0x5c
   19478:	strb	r1, [r8, r4]
   1947c:	mov	r1, r4
   19480:	str	r3, [sp, #44]	; 0x2c
   19484:	cmp	fp, #2
   19488:	add	r4, r4, #1
   1948c:	beq	19f24 <__assert_fail@plt+0x8abc>
   19490:	ldr	r0, [sp, #24]
   19494:	add	r3, r9, #1
   19498:	cmp	r3, r0
   1949c:	bcs	194b4 <__assert_fail@plt+0x804c>
   194a0:	ldr	r0, [sp, #36]	; 0x24
   194a4:	ldrb	r3, [r0, r3]
   194a8:	sub	r3, r3, #48	; 0x30
   194ac:	cmp	r3, #9
   194b0:	bls	19f34 <__assert_fail@plt+0x8acc>
   194b4:	mov	r5, #48	; 0x30
   194b8:	ldr	r3, [sp, #28]
   194bc:	eor	r3, r3, #1
   194c0:	orrs	r2, r2, r3
   194c4:	mov	r3, r6
   194c8:	moveq	r6, r2
   194cc:	beq	19048 <__assert_fail@plt+0x7be0>
   194d0:	mov	r6, #0
   194d4:	b	19070 <__assert_fail@plt+0x7c08>
   194d8:	mov	r2, #0
   194dc:	mov	r6, r2
   194e0:	mov	r5, #98	; 0x62
   194e4:	b	19090 <__assert_fail@plt+0x7c28>
   194e8:	mov	r5, #97	; 0x61
   194ec:	b	193f0 <__assert_fail@plt+0x7f88>
   194f0:	mov	r3, r7
   194f4:	mov	r6, r7
   194f8:	mov	r2, #0
   194fc:	mov	r7, r3
   19500:	mov	r5, #32
   19504:	b	19028 <__assert_fail@plt+0x7bc0>
   19508:	cmp	r9, #0
   1950c:	mov	r3, r7
   19510:	bne	19ad8 <__assert_fail@plt+0x8670>
   19514:	mov	r6, r7
   19518:	mov	r2, r9
   1951c:	mov	r7, r3
   19520:	b	19028 <__assert_fail@plt+0x7bc0>
   19524:	mov	r6, r7
   19528:	b	19044 <__assert_fail@plt+0x7bdc>
   1952c:	mov	r7, #0
   19530:	ldr	r3, [sp, #64]	; 0x40
   19534:	cmp	r3, #1
   19538:	bne	19b94 <__assert_fail@plt+0x872c>
   1953c:	bl	112f4 <__ctype_b_loc@plt>
   19540:	ldr	r2, [sp, #64]	; 0x40
   19544:	sxth	r3, r5
   19548:	mov	ip, r2
   1954c:	lsl	r3, r3, #1
   19550:	ldr	r2, [r0]
   19554:	ldrh	r3, [r2, r3]
   19558:	and	r3, r3, #16384	; 0x4000
   1955c:	cmp	r3, #0
   19560:	ldr	r3, [sp, #28]
   19564:	movne	r6, #1
   19568:	moveq	r6, #0
   1956c:	movne	r2, #0
   19570:	andeq	r2, r3, #1
   19574:	cmp	r2, #0
   19578:	bne	19ea4 <__assert_fail@plt+0x8a3c>
   1957c:	sub	r2, fp, #2
   19580:	clz	r2, r2
   19584:	lsr	r2, r2, #5
   19588:	b	19028 <__assert_fail@plt+0x7bc0>
   1958c:	cmp	r4, #0
   19590:	bne	1a250 <__assert_fail@plt+0x8de8>
   19594:	str	r4, [sp, #28]
   19598:	cmp	sl, #0
   1959c:	bne	1a294 <__assert_fail@plt+0x8e2c>
   195a0:	ldr	r3, [pc, #772]	; 198ac <__assert_fail@plt+0x8444>
   195a4:	mov	r4, #1
   195a8:	str	r4, [sp, #40]	; 0x28
   195ac:	str	r3, [sp, #60]	; 0x3c
   195b0:	str	r4, [sp, #52]	; 0x34
   195b4:	str	sl, [sp, #72]	; 0x48
   195b8:	str	sl, [sp, #68]	; 0x44
   195bc:	str	sl, [sp, #44]	; 0x2c
   195c0:	str	sl, [sp, #32]
   195c4:	mov	r8, #2
   195c8:	b	18b90 <__assert_fail@plt+0x7728>
   195cc:	ldr	r3, [sp, #36]	; 0x24
   195d0:	ldrb	r5, [r3, r9]
   195d4:	cmp	r5, #126	; 0x7e
   195d8:	ldrls	pc, [pc, r5, lsl #2]
   195dc:	b	19530 <__assert_fail@plt+0x80c8>
   195e0:	andeq	r9, r1, r4, lsl r8
   195e4:	andeq	r9, r1, r0, lsr r5
   195e8:	andeq	r9, r1, r0, lsr r5
   195ec:	andeq	r9, r1, r0, lsr r5
   195f0:	andeq	r9, r1, r0, lsr r5
   195f4:	andeq	r9, r1, r0, lsr r5
   195f8:	andeq	r9, r1, r0, lsr r5
   195fc:	andeq	r9, r1, r0, lsl #16
   19600:	andeq	r9, r1, ip, ror #15
   19604:	andeq	r9, r1, r4, ror #15
   19608:	ldrdeq	r9, [r1], -ip
   1960c:	andeq	r9, r1, ip, lsl #17
   19610:	andeq	r9, r1, r8, ror r8
   19614:	andeq	r9, r1, r0, lsl r3
   19618:	andeq	r9, r1, r0, lsr r5
   1961c:	andeq	r9, r1, r0, lsr r5
   19620:	andeq	r9, r1, r0, lsr r5
   19624:	andeq	r9, r1, r0, lsr r5
   19628:	andeq	r9, r1, r0, lsr r5
   1962c:	andeq	r9, r1, r0, lsr r5
   19630:	andeq	r9, r1, r0, lsr r5
   19634:	andeq	r9, r1, r0, lsr r5
   19638:	andeq	r9, r1, r0, lsr r5
   1963c:	andeq	r9, r1, r0, lsr r5
   19640:	andeq	r9, r1, r0, lsr r5
   19644:	andeq	r9, r1, r0, lsr r5
   19648:	andeq	r9, r1, r0, lsr r5
   1964c:	andeq	r9, r1, r0, lsr r5
   19650:	andeq	r9, r1, r0, lsr r5
   19654:	andeq	r9, r1, r0, lsr r5
   19658:	andeq	r9, r1, r0, lsr r5
   1965c:	andeq	r9, r1, r0, lsr r5
   19660:	andeq	r9, r1, r8, ror #16
   19664:	andeq	r9, r1, r4, asr r8
   19668:	andeq	r9, r1, r4, asr r8
   1966c:	andeq	r9, r1, r4, asr #16
   19670:	andeq	r9, r1, r4, asr r8
   19674:	andeq	r9, r1, ip, ror r5
   19678:	andeq	r9, r1, r4, asr r8
   1967c:	andeq	r9, r1, r4, asr #4
   19680:	andeq	r9, r1, r4, asr r8
   19684:	andeq	r9, r1, r4, asr r8
   19688:	andeq	r9, r1, r4, asr r8
   1968c:	andeq	r9, r1, ip, ror r5
   19690:	andeq	r9, r1, ip, ror r5
   19694:	andeq	r9, r1, ip, ror r5
   19698:	andeq	r9, r1, ip, ror r5
   1969c:	andeq	r9, r1, ip, ror r5
   196a0:	andeq	r9, r1, ip, ror r5
   196a4:	andeq	r9, r1, ip, ror r5
   196a8:	andeq	r9, r1, ip, ror r5
   196ac:	andeq	r9, r1, ip, ror r5
   196b0:	andeq	r9, r1, ip, ror r5
   196b4:	andeq	r9, r1, ip, ror r5
   196b8:	andeq	r9, r1, ip, ror r5
   196bc:	andeq	r9, r1, ip, ror r5
   196c0:	andeq	r9, r1, ip, ror r5
   196c4:	andeq	r9, r1, ip, ror r5
   196c8:	andeq	r9, r1, ip, ror r5
   196cc:	andeq	r9, r1, r4, asr r8
   196d0:	andeq	r9, r1, r4, asr r8
   196d4:	andeq	r9, r1, r4, asr r8
   196d8:	andeq	r9, r1, r4, asr r8
   196dc:	andeq	r9, r1, r8, lsl r2
   196e0:	andeq	r9, r1, r0, lsr r5
   196e4:	andeq	r9, r1, ip, ror r5
   196e8:	andeq	r9, r1, ip, ror r5
   196ec:	andeq	r9, r1, ip, ror r5
   196f0:	andeq	r9, r1, ip, ror r5
   196f4:	andeq	r9, r1, ip, ror r5
   196f8:	andeq	r9, r1, ip, ror r5
   196fc:	andeq	r9, r1, ip, ror r5
   19700:	andeq	r9, r1, ip, ror r5
   19704:	andeq	r9, r1, ip, ror r5
   19708:	andeq	r9, r1, ip, ror r5
   1970c:	andeq	r9, r1, ip, ror r5
   19710:	andeq	r9, r1, ip, ror r5
   19714:	andeq	r9, r1, ip, ror r5
   19718:	andeq	r9, r1, ip, ror r5
   1971c:	andeq	r9, r1, ip, ror r5
   19720:	andeq	r9, r1, ip, ror r5
   19724:	andeq	r9, r1, ip, ror r5
   19728:	andeq	r9, r1, ip, ror r5
   1972c:	andeq	r9, r1, ip, ror r5
   19730:	andeq	r9, r1, ip, ror r5
   19734:	andeq	r9, r1, ip, ror r5
   19738:	andeq	r9, r1, ip, ror r5
   1973c:	andeq	r9, r1, ip, ror r5
   19740:	andeq	r9, r1, ip, ror r5
   19744:	andeq	r9, r1, ip, ror r5
   19748:	andeq	r9, r1, ip, ror r5
   1974c:	andeq	r9, r1, r4, asr r8
   19750:	ldrdeq	r9, [r1], -r0
   19754:	andeq	r9, r1, ip, ror r5
   19758:	andeq	r9, r1, r4, asr r8
   1975c:	andeq	r9, r1, ip, ror r5
   19760:	andeq	r9, r1, r4, asr r8
   19764:	andeq	r9, r1, ip, ror r5
   19768:	andeq	r9, r1, ip, ror r5
   1976c:	andeq	r9, r1, ip, ror r5
   19770:	andeq	r9, r1, ip, ror r5
   19774:	andeq	r9, r1, ip, ror r5
   19778:	andeq	r9, r1, ip, ror r5
   1977c:	andeq	r9, r1, ip, ror r5
   19780:	andeq	r9, r1, ip, ror r5
   19784:	andeq	r9, r1, ip, ror r5
   19788:	andeq	r9, r1, ip, ror r5
   1978c:	andeq	r9, r1, ip, ror r5
   19790:	andeq	r9, r1, ip, ror r5
   19794:	andeq	r9, r1, ip, ror r5
   19798:	andeq	r9, r1, ip, ror r5
   1979c:	andeq	r9, r1, ip, ror r5
   197a0:	andeq	r9, r1, ip, ror r5
   197a4:	andeq	r9, r1, ip, ror r5
   197a8:	andeq	r9, r1, ip, ror r5
   197ac:	andeq	r9, r1, ip, ror r5
   197b0:	andeq	r9, r1, ip, ror r5
   197b4:	andeq	r9, r1, ip, ror r5
   197b8:	andeq	r9, r1, ip, ror r5
   197bc:	andeq	r9, r1, ip, ror r5
   197c0:	andeq	r9, r1, ip, ror r5
   197c4:	andeq	r9, r1, ip, ror r5
   197c8:	andeq	r9, r1, ip, ror r5
   197cc:	andeq	r8, r1, r8, ror #31
   197d0:	andeq	r9, r1, r4, asr r8
   197d4:	andeq	r8, r1, r8, ror #31
   197d8:	andeq	r9, r1, r4, asr #16
   197dc:	mov	r3, #110	; 0x6e
   197e0:	b	19314 <__assert_fail@plt+0x7eac>
   197e4:	mov	r3, #116	; 0x74
   197e8:	b	19314 <__assert_fail@plt+0x7eac>
   197ec:	sub	r2, fp, #2
   197f0:	mov	r3, #98	; 0x62
   197f4:	clz	r2, r2
   197f8:	lsr	r2, r2, #5
   197fc:	b	19200 <__assert_fail@plt+0x7d98>
   19800:	sub	r2, fp, #2
   19804:	mov	r3, #97	; 0x61
   19808:	clz	r2, r2
   1980c:	lsr	r2, r2, #5
   19810:	b	19200 <__assert_fail@plt+0x7d98>
   19814:	ldr	r3, [sp, #28]
   19818:	cmp	r3, #0
   1981c:	bne	1940c <__assert_fail@plt+0x7fa4>
   19820:	ldr	r3, [sp, #164]	; 0xa4
   19824:	tst	r3, #1
   19828:	bne	19e9c <__assert_fail@plt+0x8a34>
   1982c:	ldr	r6, [sp, #28]
   19830:	sub	r2, fp, #2
   19834:	mov	r7, r6
   19838:	clz	r2, r2
   1983c:	lsr	r2, r2, #5
   19840:	b	19028 <__assert_fail@plt+0x7bc0>
   19844:	sub	r2, fp, #2
   19848:	clz	r2, r2
   1984c:	lsr	r2, r2, #5
   19850:	b	19014 <__assert_fail@plt+0x7bac>
   19854:	sub	r2, fp, #2
   19858:	mov	r6, #0
   1985c:	clz	r2, r2
   19860:	lsr	r2, r2, #5
   19864:	b	1901c <__assert_fail@plt+0x7bb4>
   19868:	sub	r2, fp, #2
   1986c:	clz	r2, r2
   19870:	lsr	r2, r2, #5
   19874:	b	1901c <__assert_fail@plt+0x7bb4>
   19878:	sub	r2, fp, #2
   1987c:	mov	r3, #102	; 0x66
   19880:	clz	r2, r2
   19884:	lsr	r2, r2, #5
   19888:	b	19200 <__assert_fail@plt+0x7d98>
   1988c:	sub	r2, fp, #2
   19890:	mov	r3, #118	; 0x76
   19894:	clz	r2, r2
   19898:	lsr	r2, r2, #5
   1989c:	b	19200 <__assert_fail@plt+0x7d98>
   198a0:	andeq	r2, r3, r8, lsl #30
   198a4:	andeq	r1, r2, r4, lsl #25
   198a8:	andeq	r1, r2, ip, ror #24
   198ac:	andeq	r1, r2, r0, lsl #25
   198b0:	ldr	r3, [sp, #48]	; 0x30
   198b4:	ldrb	r5, [r3]
   198b8:	cmp	r5, #126	; 0x7e
   198bc:	ldrls	pc, [pc, r5, lsl #2]
   198c0:	b	1952c <__assert_fail@plt+0x80c4>
   198c4:	andeq	r9, r1, ip, lsl #8
   198c8:	andeq	r9, r1, ip, lsr #10
   198cc:	andeq	r9, r1, ip, lsr #10
   198d0:	andeq	r9, r1, ip, lsr #10
   198d4:	andeq	r9, r1, ip, lsr #10
   198d8:	andeq	r9, r1, ip, lsr #10
   198dc:	andeq	r9, r1, ip, lsr #10
   198e0:	andeq	r9, r1, r4, lsl #22
   198e4:	strdeq	r9, [r1], -ip
   198e8:	ldrdeq	r9, [r1], -r8
   198ec:	andeq	r9, r1, r0, lsr #7
   198f0:	strdeq	r9, [r1], -r8
   198f4:	andeq	r9, r1, r0, ror #7
   198f8:	strdeq	r9, [r1], -r0
   198fc:	andeq	r9, r1, ip, lsr #10
   19900:	andeq	r9, r1, ip, lsr #10
   19904:	andeq	r9, r1, ip, lsr #10
   19908:	andeq	r9, r1, ip, lsr #10
   1990c:	andeq	r9, r1, ip, lsr #10
   19910:	andeq	r9, r1, ip, lsr #10
   19914:	andeq	r9, r1, ip, lsr #10
   19918:	andeq	r9, r1, ip, lsr #10
   1991c:	andeq	r9, r1, ip, lsr #10
   19920:	andeq	r9, r1, ip, lsr #10
   19924:	andeq	r9, r1, ip, lsr #10
   19928:	andeq	r9, r1, ip, lsr #10
   1992c:	andeq	r9, r1, ip, lsr #10
   19930:	andeq	r9, r1, ip, lsr #10
   19934:	andeq	r9, r1, ip, lsr #10
   19938:	andeq	r9, r1, ip, lsr #10
   1993c:	andeq	r9, r1, ip, lsr #10
   19940:	andeq	r9, r1, ip, lsr #10
   19944:	andeq	r9, r1, r8, ror #21
   19948:	andeq	r9, r1, r0, lsl #8
   1994c:	andeq	r9, r1, r0, lsl #8
   19950:	andeq	r9, r1, ip, asr #21
   19954:	andeq	r9, r1, r0, lsl #8
   19958:	andeq	r9, r1, r0, asr #21
   1995c:	andeq	r9, r1, r0, lsl #8
   19960:	andeq	r9, r1, r0, asr #4
   19964:	andeq	r9, r1, r0, lsl #8
   19968:	andeq	r9, r1, r0, lsl #8
   1996c:	andeq	r9, r1, r0, lsl #8
   19970:	andeq	r9, r1, r0, asr #21
   19974:	andeq	r9, r1, r0, asr #21
   19978:	andeq	r9, r1, r0, asr #21
   1997c:	andeq	r9, r1, r0, asr #21
   19980:	andeq	r9, r1, r0, asr #21
   19984:	andeq	r9, r1, r0, asr #21
   19988:	andeq	r9, r1, r0, asr #21
   1998c:	andeq	r9, r1, r0, asr #21
   19990:	andeq	r9, r1, r0, asr #21
   19994:	andeq	r9, r1, r0, asr #21
   19998:	andeq	r9, r1, r0, asr #21
   1999c:	andeq	r9, r1, r0, asr #21
   199a0:	andeq	r9, r1, r0, asr #21
   199a4:	andeq	r9, r1, r0, asr #21
   199a8:	andeq	r9, r1, r0, asr #21
   199ac:	andeq	r9, r1, r0, asr #21
   199b0:	andeq	r9, r1, r0, lsl #8
   199b4:	andeq	r9, r1, r0, lsl #8
   199b8:	andeq	r9, r1, r0, lsl #8
   199bc:	andeq	r9, r1, r0, lsl #8
   199c0:	andeq	r9, r1, r4, lsl r2
   199c4:	andeq	r9, r1, ip, lsr #10
   199c8:	andeq	r9, r1, r0, asr #21
   199cc:	andeq	r9, r1, r0, asr #21
   199d0:	andeq	r9, r1, r0, asr #21
   199d4:	andeq	r9, r1, r0, asr #21
   199d8:	andeq	r9, r1, r0, asr #21
   199dc:	andeq	r9, r1, r0, asr #21
   199e0:	andeq	r9, r1, r0, asr #21
   199e4:	andeq	r9, r1, r0, asr #21
   199e8:	andeq	r9, r1, r0, asr #21
   199ec:	andeq	r9, r1, r0, asr #21
   199f0:	andeq	r9, r1, r0, asr #21
   199f4:	andeq	r9, r1, r0, asr #21
   199f8:	andeq	r9, r1, r0, asr #21
   199fc:	andeq	r9, r1, r0, asr #21
   19a00:	andeq	r9, r1, r0, asr #21
   19a04:	andeq	r9, r1, r0, asr #21
   19a08:	andeq	r9, r1, r0, asr #21
   19a0c:	andeq	r9, r1, r0, asr #21
   19a10:	andeq	r9, r1, r0, asr #21
   19a14:	andeq	r9, r1, r0, asr #21
   19a18:	andeq	r9, r1, r0, asr #21
   19a1c:	andeq	r9, r1, r0, asr #21
   19a20:	andeq	r9, r1, r0, asr #21
   19a24:	andeq	r9, r1, r0, asr #21
   19a28:	andeq	r9, r1, r0, asr #21
   19a2c:	andeq	r9, r1, r0, asr #21
   19a30:	andeq	r9, r1, r0, lsl #8
   19a34:	andeq	r9, r1, ip, asr #3
   19a38:	andeq	r9, r1, r0, asr #21
   19a3c:	andeq	r9, r1, r0, lsl #8
   19a40:	andeq	r9, r1, r0, asr #21
   19a44:	andeq	r9, r1, r0, lsl #8
   19a48:	andeq	r9, r1, r0, asr #21
   19a4c:	andeq	r9, r1, r0, asr #21
   19a50:	andeq	r9, r1, r0, asr #21
   19a54:	andeq	r9, r1, r0, asr #21
   19a58:	andeq	r9, r1, r0, asr #21
   19a5c:	andeq	r9, r1, r0, asr #21
   19a60:	andeq	r9, r1, r0, asr #21
   19a64:	andeq	r9, r1, r0, asr #21
   19a68:	andeq	r9, r1, r0, asr #21
   19a6c:	andeq	r9, r1, r0, asr #21
   19a70:	andeq	r9, r1, r0, asr #21
   19a74:	andeq	r9, r1, r0, asr #21
   19a78:	andeq	r9, r1, r0, asr #21
   19a7c:	andeq	r9, r1, r0, asr #21
   19a80:	andeq	r9, r1, r0, asr #21
   19a84:	andeq	r9, r1, r0, asr #21
   19a88:	andeq	r9, r1, r0, asr #21
   19a8c:	andeq	r9, r1, r0, asr #21
   19a90:	andeq	r9, r1, r0, asr #21
   19a94:	andeq	r9, r1, r0, asr #21
   19a98:	andeq	r9, r1, r0, asr #21
   19a9c:	andeq	r9, r1, r0, asr #21
   19aa0:	andeq	r9, r1, r0, asr #21
   19aa4:	andeq	r9, r1, r0, asr #21
   19aa8:	andeq	r9, r1, r0, asr #21
   19aac:	andeq	r9, r1, r0, asr #21
   19ab0:	andeq	r8, r1, r4, ror #31
   19ab4:	andeq	r9, r1, r0, lsl #8
   19ab8:	andeq	r8, r1, r4, ror #31
   19abc:	andeq	r9, r1, ip, asr #21
   19ac0:	mov	r6, r7
   19ac4:	mov	r7, #0
   19ac8:	b	19044 <__assert_fail@plt+0x7bdc>
   19acc:	cmp	r9, #0
   19ad0:	mov	r3, #0
   19ad4:	beq	19514 <__assert_fail@plt+0x80ac>
   19ad8:	mov	r6, #0
   19adc:	mov	r7, r3
   19ae0:	mov	r3, r6
   19ae4:	b	19048 <__assert_fail@plt+0x7be0>
   19ae8:	mov	r3, #0
   19aec:	b	194f4 <__assert_fail@plt+0x808c>
   19af0:	mov	r7, #0
   19af4:	mov	r3, #114	; 0x72
   19af8:	b	19314 <__assert_fail@plt+0x7eac>
   19afc:	mov	r5, #98	; 0x62
   19b00:	b	193a4 <__assert_fail@plt+0x7f3c>
   19b04:	mov	r5, #97	; 0x61
   19b08:	b	193e4 <__assert_fail@plt+0x7f7c>
   19b0c:	ldr	r3, [sp, #32]
   19b10:	cmp	r3, #0
   19b14:	bne	19f5c <__assert_fail@plt+0x8af4>
   19b18:	add	r9, r9, #1
   19b1c:	ldr	r3, [sp, #44]	; 0x2c
   19b20:	mov	r6, #0
   19b24:	mov	r5, #92	; 0x5c
   19b28:	b	192dc <__assert_fail@plt+0x7e74>
   19b2c:	ldr	r3, [sp, #36]	; 0x24
   19b30:	ldrb	r3, [r3, #1]
   19b34:	adds	r3, r3, #0
   19b38:	movne	r3, #1
   19b3c:	b	19000 <__assert_fail@plt+0x7b98>
   19b40:	ldr	r3, [sp, #164]	; 0xa4
   19b44:	ands	r3, r3, #4
   19b48:	beq	19b6c <__assert_fail@plt+0x8704>
   19b4c:	ldr	r2, [sp, #24]
   19b50:	add	r3, r9, #2
   19b54:	cmp	r3, r2
   19b58:	bcs	19b6c <__assert_fail@plt+0x8704>
   19b5c:	ldr	r2, [sp, #48]	; 0x30
   19b60:	ldrb	r5, [r2, #1]
   19b64:	cmp	r5, #63	; 0x3f
   19b68:	beq	19fd0 <__assert_fail@plt+0x8b68>
   19b6c:	mov	r2, #0
   19b70:	mov	r6, r2
   19b74:	mov	r5, #63	; 0x3f
   19b78:	b	19028 <__assert_fail@plt+0x7bc0>
   19b7c:	ldr	r3, [sp, #32]
   19b80:	cmp	r3, #0
   19b84:	bne	19f5c <__assert_fail@plt+0x8af4>
   19b88:	mov	r6, r3
   19b8c:	mov	r5, #63	; 0x3f
   19b90:	b	19070 <__assert_fail@plt+0x7c08>
   19b94:	ldr	r3, [sp, #24]
   19b98:	cmn	r3, #1
   19b9c:	mov	r3, #0
   19ba0:	str	r3, [sp, #108]	; 0x6c
   19ba4:	str	r3, [sp, #112]	; 0x70
   19ba8:	bne	19bb8 <__assert_fail@plt+0x8750>
   19bac:	ldr	r0, [sp, #36]	; 0x24
   19bb0:	bl	1130c <strlen@plt>
   19bb4:	str	r0, [sp, #24]
   19bb8:	mov	r3, #0
   19bbc:	str	sl, [sp, #88]	; 0x58
   19bc0:	ldr	sl, [sp, #36]	; 0x24
   19bc4:	str	r5, [sp, #92]	; 0x5c
   19bc8:	mov	r5, r3
   19bcc:	str	r7, [sp, #96]	; 0x60
   19bd0:	str	r4, [sp, #100]	; 0x64
   19bd4:	str	r8, [sp, #84]	; 0x54
   19bd8:	ldr	r3, [sp, #24]
   19bdc:	add	r4, r9, r5
   19be0:	add	r7, sl, r4
   19be4:	sub	r2, r3, r4
   19be8:	mov	r1, r7
   19bec:	add	r3, sp, #108	; 0x6c
   19bf0:	add	r0, sp, #104	; 0x68
   19bf4:	bl	1b2d0 <__assert_fail@plt+0x9e68>
   19bf8:	subs	r8, r0, #0
   19bfc:	beq	19c4c <__assert_fail@plt+0x87e4>
   19c00:	cmn	r8, #1
   19c04:	beq	19fac <__assert_fail@plt+0x8b44>
   19c08:	cmn	r8, #2
   19c0c:	beq	1a0cc <__assert_fail@plt+0x8c64>
   19c10:	ldr	r3, [sp, #32]
   19c14:	cmp	fp, #2
   19c18:	movne	r3, #0
   19c1c:	andeq	r3, r3, #1
   19c20:	cmp	r3, #0
   19c24:	bne	19dac <__assert_fail@plt+0x8944>
   19c28:	ldr	r0, [sp, #104]	; 0x68
   19c2c:	bl	111f8 <iswprint@plt>
   19c30:	add	r5, r5, r8
   19c34:	cmp	r0, #0
   19c38:	add	r0, sp, #108	; 0x6c
   19c3c:	moveq	r6, #0
   19c40:	bl	1118c <mbsinit@plt>
   19c44:	cmp	r0, #0
   19c48:	beq	19bd8 <__assert_fail@plt+0x8770>
   19c4c:	ldr	r3, [sp, #28]
   19c50:	mov	ip, r5
   19c54:	eor	r2, r6, #1
   19c58:	ldr	r5, [sp, #92]	; 0x5c
   19c5c:	ldr	r7, [sp, #96]	; 0x60
   19c60:	ldr	r4, [sp, #100]	; 0x64
   19c64:	ldr	r8, [sp, #84]	; 0x54
   19c68:	ldr	sl, [sp, #88]	; 0x58
   19c6c:	and	r2, r2, r3
   19c70:	cmp	ip, #1
   19c74:	bls	19574 <__assert_fail@plt+0x810c>
   19c78:	add	r1, ip, r9
   19c7c:	ldr	lr, [sp, #48]	; 0x30
   19c80:	mov	r0, #0
   19c84:	str	r6, [sp, #48]	; 0x30
   19c88:	mov	ip, #39	; 0x27
   19c8c:	ldr	r6, [sp, #44]	; 0x2c
   19c90:	b	19d48 <__assert_fail@plt+0x88e0>
   19c94:	ldr	r0, [sp, #32]
   19c98:	sub	r3, fp, #2
   19c9c:	cmp	r0, #0
   19ca0:	clz	r3, r3
   19ca4:	lsr	r3, r3, #5
   19ca8:	bne	19eb0 <__assert_fail@plt+0x8a48>
   19cac:	eor	r0, r6, #1
   19cb0:	ands	r3, r3, r0
   19cb4:	beq	19ce4 <__assert_fail@plt+0x887c>
   19cb8:	add	r0, r4, #1
   19cbc:	cmp	sl, r4
   19cc0:	strbhi	ip, [r8, r4]
   19cc4:	cmp	sl, r0
   19cc8:	movhi	r6, #36	; 0x24
   19ccc:	strbhi	r6, [r8, r0]
   19cd0:	add	r0, r4, #2
   19cd4:	mov	r6, r3
   19cd8:	add	r4, r4, #3
   19cdc:	cmp	sl, r0
   19ce0:	strbhi	ip, [r8, r0]
   19ce4:	cmp	sl, r4
   19ce8:	movhi	r3, #92	; 0x5c
   19cec:	strbhi	r3, [r8, r4]
   19cf0:	add	r3, r4, #1
   19cf4:	cmp	sl, r3
   19cf8:	lsrhi	r0, r5, #6
   19cfc:	addhi	r0, r0, #48	; 0x30
   19d00:	strbhi	r0, [r8, r3]
   19d04:	add	r0, r4, #2
   19d08:	cmp	sl, r0
   19d0c:	lsrhi	r3, r5, #3
   19d10:	andhi	r3, r3, #7
   19d14:	addhi	r3, r3, #48	; 0x30
   19d18:	add	r9, r9, #1
   19d1c:	strbhi	r3, [r8, r0]
   19d20:	and	r5, r5, #7
   19d24:	cmp	r9, r1
   19d28:	add	r5, r5, #48	; 0x30
   19d2c:	add	r4, r4, #3
   19d30:	bcs	19ed0 <__assert_fail@plt+0x8a68>
   19d34:	mov	r0, r2
   19d38:	cmp	sl, r4
   19d3c:	strbhi	r5, [r8, r4]
   19d40:	ldrb	r5, [lr, #1]!
   19d44:	add	r4, r4, #1
   19d48:	cmp	r2, #0
   19d4c:	bne	19c94 <__assert_fail@plt+0x882c>
   19d50:	eor	r3, r0, #1
   19d54:	and	r3, r3, r6
   19d58:	cmp	r7, #0
   19d5c:	uxtb	r3, r3
   19d60:	beq	19d74 <__assert_fail@plt+0x890c>
   19d64:	cmp	sl, r4
   19d68:	movhi	r7, #92	; 0x5c
   19d6c:	strbhi	r7, [r8, r4]
   19d70:	add	r4, r4, #1
   19d74:	add	r9, r9, #1
   19d78:	cmp	r9, r1
   19d7c:	bcs	19ec4 <__assert_fail@plt+0x8a5c>
   19d80:	cmp	r3, #0
   19d84:	beq	19ef0 <__assert_fail@plt+0x8a88>
   19d88:	cmp	sl, r4
   19d8c:	add	r3, r4, #1
   19d90:	strbhi	ip, [r8, r4]
   19d94:	mov	r7, #0
   19d98:	cmp	sl, r3
   19d9c:	strbhi	ip, [r8, r3]
   19da0:	add	r4, r4, #2
   19da4:	mov	r6, r7
   19da8:	b	19d38 <__assert_fail@plt+0x88d0>
   19dac:	cmp	r8, #1
   19db0:	beq	19c28 <__assert_fail@plt+0x87c0>
   19db4:	add	r1, r4, #1
   19db8:	add	r3, sl, r8
   19dbc:	add	r1, sl, r1
   19dc0:	add	r4, r3, r4
   19dc4:	ldrb	r3, [r1], #1
   19dc8:	sub	r3, r3, #91	; 0x5b
   19dcc:	cmp	r3, #33	; 0x21
   19dd0:	ldrls	pc, [pc, r3, lsl #2]
   19dd4:	b	19e60 <__assert_fail@plt+0x89f8>
   19dd8:	andeq	r9, r1, ip, ror #28
   19ddc:	andeq	r9, r1, ip, ror #28
   19de0:	andeq	r9, r1, r0, ror #28
   19de4:	andeq	r9, r1, ip, ror #28
   19de8:	andeq	r9, r1, r0, ror #28
   19dec:	andeq	r9, r1, ip, ror #28
   19df0:	andeq	r9, r1, r0, ror #28
   19df4:	andeq	r9, r1, r0, ror #28
   19df8:	andeq	r9, r1, r0, ror #28
   19dfc:	andeq	r9, r1, r0, ror #28
   19e00:	andeq	r9, r1, r0, ror #28
   19e04:	andeq	r9, r1, r0, ror #28
   19e08:	andeq	r9, r1, r0, ror #28
   19e0c:	andeq	r9, r1, r0, ror #28
   19e10:	andeq	r9, r1, r0, ror #28
   19e14:	andeq	r9, r1, r0, ror #28
   19e18:	andeq	r9, r1, r0, ror #28
   19e1c:	andeq	r9, r1, r0, ror #28
   19e20:	andeq	r9, r1, r0, ror #28
   19e24:	andeq	r9, r1, r0, ror #28
   19e28:	andeq	r9, r1, r0, ror #28
   19e2c:	andeq	r9, r1, r0, ror #28
   19e30:	andeq	r9, r1, r0, ror #28
   19e34:	andeq	r9, r1, r0, ror #28
   19e38:	andeq	r9, r1, r0, ror #28
   19e3c:	andeq	r9, r1, r0, ror #28
   19e40:	andeq	r9, r1, r0, ror #28
   19e44:	andeq	r9, r1, r0, ror #28
   19e48:	andeq	r9, r1, r0, ror #28
   19e4c:	andeq	r9, r1, r0, ror #28
   19e50:	andeq	r9, r1, r0, ror #28
   19e54:	andeq	r9, r1, r0, ror #28
   19e58:	andeq	r9, r1, r0, ror #28
   19e5c:	andeq	r9, r1, ip, ror #28
   19e60:	cmp	r4, r1
   19e64:	bne	19dc4 <__assert_fail@plt+0x895c>
   19e68:	b	19c28 <__assert_fail@plt+0x87c0>
   19e6c:	ldr	fp, [sp, #84]	; 0x54
   19e70:	ldr	sl, [sp, #88]	; 0x58
   19e74:	mov	r8, #2
   19e78:	b	19334 <__assert_fail@plt+0x7ecc>
   19e7c:	cmp	sl, r4
   19e80:	movls	r1, r4
   19e84:	bls	19484 <__assert_fail@plt+0x801c>
   19e88:	ldr	r3, [sp, #44]	; 0x2c
   19e8c:	b	19474 <__assert_fail@plt+0x800c>
   19e90:	str	sl, [sp, #72]	; 0x48
   19e94:	ldr	sl, [sp, #32]
   19e98:	b	192ac <__assert_fail@plt+0x7e44>
   19e9c:	add	r9, r9, #1
   19ea0:	b	18ba0 <__assert_fail@plt+0x7738>
   19ea4:	ldr	r2, [sp, #28]
   19ea8:	mov	r6, #0
   19eac:	b	19c78 <__assert_fail@plt+0x8810>
   19eb0:	str	fp, [sp, #160]	; 0xa0
   19eb4:	str	r3, [sp, #28]
   19eb8:	mov	fp, r8
   19ebc:	ldr	r8, [sp, #160]	; 0xa0
   19ec0:	b	19334 <__assert_fail@plt+0x7ecc>
   19ec4:	str	r6, [sp, #44]	; 0x2c
   19ec8:	ldr	r6, [sp, #48]	; 0x30
   19ecc:	b	192dc <__assert_fail@plt+0x7e74>
   19ed0:	str	r6, [sp, #44]	; 0x2c
   19ed4:	ldr	r6, [sp, #48]	; 0x30
   19ed8:	b	190e8 <__assert_fail@plt+0x7c80>
   19edc:	add	r4, r4, #4
   19ee0:	str	r3, [sp, #44]	; 0x2c
   19ee4:	mov	r6, #0
   19ee8:	mov	r5, #48	; 0x30
   19eec:	b	19070 <__assert_fail@plt+0x7c08>
   19ef0:	mov	r7, r3
   19ef4:	b	19d38 <__assert_fail@plt+0x88d0>
   19ef8:	ldr	r3, [pc, #-1624]	; 198a8 <__assert_fail@plt+0x8440>
   19efc:	mov	r4, #1
   19f00:	str	r4, [sp, #40]	; 0x28
   19f04:	str	r4, [sp, #28]
   19f08:	str	r4, [sp, #52]	; 0x34
   19f0c:	str	sl, [sp, #72]	; 0x48
   19f10:	str	sl, [sp, #68]	; 0x44
   19f14:	str	sl, [sp, #44]	; 0x2c
   19f18:	str	sl, [sp, #32]
   19f1c:	str	r3, [sp, #60]	; 0x3c
   19f20:	b	18b90 <__assert_fail@plt+0x7728>
   19f24:	mov	r3, r6
   19f28:	mov	r5, #48	; 0x30
   19f2c:	mov	r6, #0
   19f30:	b	19070 <__assert_fail@plt+0x7c08>
   19f34:	cmp	sl, r4
   19f38:	movhi	r3, #48	; 0x30
   19f3c:	strbhi	r3, [r8, r4]
   19f40:	add	r3, r1, #2
   19f44:	cmp	sl, r3
   19f48:	movhi	r0, #48	; 0x30
   19f4c:	strbhi	r0, [r8, r3]
   19f50:	add	r4, r1, #3
   19f54:	mov	r5, #48	; 0x30
   19f58:	b	194b8 <__assert_fail@plt+0x8050>
   19f5c:	str	fp, [sp, #160]	; 0xa0
   19f60:	mov	fp, r8
   19f64:	ldr	r8, [sp, #160]	; 0xa0
   19f68:	b	19334 <__assert_fail@plt+0x7ecc>
   19f6c:	ldr	r2, [sp, #80]	; 0x50
   19f70:	ldrb	r3, [r2]
   19f74:	cmp	r3, #0
   19f78:	beq	18b60 <__assert_fail@plt+0x76f8>
   19f7c:	cmp	sl, r4
   19f80:	strbhi	r3, [fp, r4]
   19f84:	ldrb	r3, [r2, #1]!
   19f88:	add	r4, r4, #1
   19f8c:	cmp	r3, #0
   19f90:	bne	19f7c <__assert_fail@plt+0x8b14>
   19f94:	b	18b60 <__assert_fail@plt+0x76f8>
   19f98:	str	fp, [sp, #160]	; 0xa0
   19f9c:	mov	r3, #0
   19fa0:	mov	fp, r8
   19fa4:	ldr	r8, [sp, #160]	; 0xa0
   19fa8:	b	193c8 <__assert_fail@plt+0x7f60>
   19fac:	mov	ip, r5
   19fb0:	ldr	r7, [sp, #96]	; 0x60
   19fb4:	ldr	r5, [sp, #92]	; 0x5c
   19fb8:	ldr	r4, [sp, #100]	; 0x64
   19fbc:	ldr	r8, [sp, #84]	; 0x54
   19fc0:	ldr	sl, [sp, #88]	; 0x58
   19fc4:	ldr	r2, [sp, #28]
   19fc8:	mov	r6, #0
   19fcc:	b	19c70 <__assert_fail@plt+0x8808>
   19fd0:	ldr	r2, [sp, #36]	; 0x24
   19fd4:	ldrb	r1, [r2, r3]
   19fd8:	sub	r2, r1, #33	; 0x21
   19fdc:	cmp	r2, #29
   19fe0:	ldrls	pc, [pc, r2, lsl #2]
   19fe4:	b	1a0c0 <__assert_fail@plt+0x8c58>
   19fe8:	andeq	sl, r1, r0, rrx
   19fec:	andeq	sl, r1, r0, asr #1
   19ff0:	andeq	sl, r1, r0, asr #1
   19ff4:	andeq	sl, r1, r0, asr #1
   19ff8:	andeq	sl, r1, r0, asr #1
   19ffc:	andeq	sl, r1, r0, asr #1
   1a000:	andeq	sl, r1, r0, rrx
   1a004:	andeq	sl, r1, r0, rrx
   1a008:	andeq	sl, r1, r0, rrx
   1a00c:	andeq	sl, r1, r0, asr #1
   1a010:	andeq	sl, r1, r0, asr #1
   1a014:	andeq	sl, r1, r0, asr #1
   1a018:	andeq	sl, r1, r0, rrx
   1a01c:	andeq	sl, r1, r0, asr #1
   1a020:	andeq	sl, r1, r0, rrx
   1a024:	andeq	sl, r1, r0, asr #1
   1a028:	andeq	sl, r1, r0, asr #1
   1a02c:	andeq	sl, r1, r0, asr #1
   1a030:	andeq	sl, r1, r0, asr #1
   1a034:	andeq	sl, r1, r0, asr #1
   1a038:	andeq	sl, r1, r0, asr #1
   1a03c:	andeq	sl, r1, r0, asr #1
   1a040:	andeq	sl, r1, r0, asr #1
   1a044:	andeq	sl, r1, r0, asr #1
   1a048:	andeq	sl, r1, r0, asr #1
   1a04c:	andeq	sl, r1, r0, asr #1
   1a050:	andeq	sl, r1, r0, asr #1
   1a054:	andeq	sl, r1, r0, rrx
   1a058:	andeq	sl, r1, r0, rrx
   1a05c:	andeq	sl, r1, r0, rrx
   1a060:	ldr	r2, [sp, #32]
   1a064:	cmp	r2, #0
   1a068:	bne	1a16c <__assert_fail@plt+0x8d04>
   1a06c:	cmp	sl, r4
   1a070:	movhi	r2, #63	; 0x3f
   1a074:	strbhi	r2, [r8, r4]
   1a078:	add	r2, r4, #1
   1a07c:	cmp	sl, r2
   1a080:	movhi	r0, #34	; 0x22
   1a084:	strbhi	r0, [r8, r2]
   1a088:	add	r2, r4, #2
   1a08c:	cmp	sl, r2
   1a090:	movhi	r0, #34	; 0x22
   1a094:	strbhi	r0, [r8, r2]
   1a098:	add	r2, r4, #3
   1a09c:	cmp	sl, r2
   1a0a0:	movhi	r0, #63	; 0x3f
   1a0a4:	strbhi	r0, [r8, r2]
   1a0a8:	mov	r2, #0
   1a0ac:	add	r4, r4, #4
   1a0b0:	mov	r5, r1
   1a0b4:	mov	r9, r3
   1a0b8:	mov	r6, r2
   1a0bc:	b	194b8 <__assert_fail@plt+0x8050>
   1a0c0:	mov	r2, #0
   1a0c4:	mov	r6, r2
   1a0c8:	b	19028 <__assert_fail@plt+0x7bc0>
   1a0cc:	ldr	r0, [sp, #24]
   1a0d0:	mov	r1, r4
   1a0d4:	cmp	r1, r0
   1a0d8:	mov	r2, r7
   1a0dc:	mov	r3, r5
   1a0e0:	mov	ip, r5
   1a0e4:	ldr	r7, [sp, #96]	; 0x60
   1a0e8:	ldr	r5, [sp, #92]	; 0x5c
   1a0ec:	ldr	r4, [sp, #100]	; 0x64
   1a0f0:	ldr	r8, [sp, #84]	; 0x54
   1a0f4:	ldr	sl, [sp, #88]	; 0x58
   1a0f8:	bcs	1a12c <__assert_fail@plt+0x8cc4>
   1a0fc:	ldrb	r6, [r2]
   1a100:	cmp	r6, #0
   1a104:	bne	1a118 <__assert_fail@plt+0x8cb0>
   1a108:	b	1a248 <__assert_fail@plt+0x8de0>
   1a10c:	ldrb	r6, [r2, #1]!
   1a110:	cmp	r6, #0
   1a114:	beq	1a1d0 <__assert_fail@plt+0x8d68>
   1a118:	add	r3, r3, #1
   1a11c:	add	r1, r9, r3
   1a120:	cmp	r1, r0
   1a124:	bcc	1a10c <__assert_fail@plt+0x8ca4>
   1a128:	mov	ip, r3
   1a12c:	ldr	r2, [sp, #28]
   1a130:	mov	r6, #0
   1a134:	b	19c70 <__assert_fail@plt+0x8808>
   1a138:	mov	r3, #1
   1a13c:	str	r3, [sp, #40]	; 0x28
   1a140:	str	r3, [sp, #32]
   1a144:	str	r3, [sp, #28]
   1a148:	str	r3, [sp, #52]	; 0x34
   1a14c:	ldr	r3, [pc, #-2220]	; 198a8 <__assert_fail@plt+0x8440>
   1a150:	mov	r2, #0
   1a154:	str	r2, [sp, #68]	; 0x44
   1a158:	str	r2, [sp, #44]	; 0x2c
   1a15c:	str	r2, [sp, #72]	; 0x48
   1a160:	mov	r4, r2
   1a164:	str	r3, [sp, #60]	; 0x3c
   1a168:	b	18b90 <__assert_fail@plt+0x7728>
   1a16c:	str	fp, [sp, #160]	; 0xa0
   1a170:	mov	fp, r8
   1a174:	ldr	r8, [sp, #160]	; 0xa0
   1a178:	b	19340 <__assert_fail@plt+0x7ed8>
   1a17c:	mov	r2, r3
   1a180:	ldr	r3, [sp, #60]	; 0x3c
   1a184:	cmp	r3, #0
   1a188:	moveq	r2, #0
   1a18c:	andne	r2, r2, #1
   1a190:	cmp	r2, #0
   1a194:	beq	1a1c0 <__assert_fail@plt+0x8d58>
   1a198:	mov	r2, r3
   1a19c:	ldrb	r3, [r3]
   1a1a0:	cmp	r3, #0
   1a1a4:	beq	1a1c0 <__assert_fail@plt+0x8d58>
   1a1a8:	cmp	sl, r4
   1a1ac:	strbhi	r3, [fp, r4]
   1a1b0:	ldrb	r3, [r2, #1]!
   1a1b4:	add	r4, r4, #1
   1a1b8:	cmp	r3, #0
   1a1bc:	bne	1a1a8 <__assert_fail@plt+0x8d40>
   1a1c0:	cmp	sl, r4
   1a1c4:	movhi	r3, #0
   1a1c8:	strbhi	r3, [fp, r4]
   1a1cc:	b	19380 <__assert_fail@plt+0x7f18>
   1a1d0:	mov	ip, r3
   1a1d4:	ldr	r2, [sp, #28]
   1a1d8:	b	19c70 <__assert_fail@plt+0x8808>
   1a1dc:	str	fp, [sp, #160]	; 0xa0
   1a1e0:	mov	fp, r8
   1a1e4:	ldr	r8, [sp, #160]	; 0xa0
   1a1e8:	sub	r3, r8, #2
   1a1ec:	clz	r3, r3
   1a1f0:	lsr	r3, r3, #5
   1a1f4:	str	r3, [sp, #28]
   1a1f8:	b	19334 <__assert_fail@plt+0x7ecc>
   1a1fc:	ldr	r3, [sp, #76]	; 0x4c
   1a200:	mov	ip, #5
   1a204:	str	r3, [sp, #16]
   1a208:	ldr	r3, [sp, #80]	; 0x50
   1a20c:	ldr	r2, [sp, #36]	; 0x24
   1a210:	str	r3, [sp, #12]
   1a214:	ldr	r3, [sp, #56]	; 0x38
   1a218:	ldr	r1, [sp, #72]	; 0x48
   1a21c:	str	r3, [sp, #8]
   1a220:	ldr	r3, [sp, #164]	; 0xa4
   1a224:	mov	r0, fp
   1a228:	str	r3, [sp, #4]
   1a22c:	str	ip, [sp]
   1a230:	ldr	r3, [sp, #24]
   1a234:	bl	18a98 <__assert_fail@plt+0x7630>
   1a238:	mov	r4, r0
   1a23c:	b	19380 <__assert_fail@plt+0x7f18>
   1a240:	mov	r8, #2
   1a244:	b	19334 <__assert_fail@plt+0x7ecc>
   1a248:	ldr	r2, [sp, #28]
   1a24c:	b	19c70 <__assert_fail@plt+0x8808>
   1a250:	mov	r3, #0
   1a254:	str	r3, [sp, #68]	; 0x44
   1a258:	str	r3, [sp, #44]	; 0x2c
   1a25c:	str	r3, [sp, #72]	; 0x48
   1a260:	str	r3, [sp, #28]
   1a264:	mov	r4, r3
   1a268:	ldr	r3, [pc, #-2500]	; 198ac <__assert_fail@plt+0x8444>
   1a26c:	mov	r2, #1
   1a270:	str	r2, [sp, #40]	; 0x28
   1a274:	str	r2, [sp, #32]
   1a278:	str	r2, [sp, #52]	; 0x34
   1a27c:	str	r3, [sp, #60]	; 0x3c
   1a280:	b	18b90 <__assert_fail@plt+0x7728>
   1a284:	bl	111bc <__stack_chk_fail@plt>
   1a288:	mov	r5, r3
   1a28c:	mov	r6, #0
   1a290:	b	19084 <__assert_fail@plt+0x7c1c>
   1a294:	mov	r3, #0
   1a298:	mov	r2, #1
   1a29c:	str	r3, [sp, #44]	; 0x2c
   1a2a0:	str	r3, [sp, #72]	; 0x48
   1a2a4:	str	r2, [sp, #40]	; 0x28
   1a2a8:	b	191a0 <__assert_fail@plt+0x7d38>
   1a2ac:	bl	11438 <abort@plt>
   1a2b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2b4:	sub	sp, sp, #44	; 0x2c
   1a2b8:	mov	r6, r0
   1a2bc:	mov	r4, r3
   1a2c0:	mov	sl, r1
   1a2c4:	mov	fp, r2
   1a2c8:	bl	11330 <__errno_location@plt>
   1a2cc:	ldr	r7, [pc, #364]	; 1a440 <__assert_fail@plt+0x8fd8>
   1a2d0:	cmp	r6, #0
   1a2d4:	ldr	r5, [r7]
   1a2d8:	ldr	r3, [r0]
   1a2dc:	str	r3, [sp, #24]
   1a2e0:	blt	1a43c <__assert_fail@plt+0x8fd4>
   1a2e4:	ldr	r3, [r7, #4]
   1a2e8:	mov	r8, r0
   1a2ec:	cmp	r3, r6
   1a2f0:	bgt	1a33c <__assert_fail@plt+0x8ed4>
   1a2f4:	cmn	r6, #-268435454	; 0xf0000002
   1a2f8:	bgt	1a438 <__assert_fail@plt+0x8fd0>
   1a2fc:	add	r9, r6, #1
   1a300:	add	r3, r7, #8
   1a304:	cmp	r5, r3
   1a308:	lsl	r1, r9, #3
   1a30c:	beq	1a418 <__assert_fail@plt+0x8fb0>
   1a310:	mov	r0, r5
   1a314:	bl	1b0a4 <__assert_fail@plt+0x9c3c>
   1a318:	mov	r5, r0
   1a31c:	str	r0, [r7]
   1a320:	ldr	r0, [r7, #4]
   1a324:	mov	r1, #0
   1a328:	sub	r2, r9, r0
   1a32c:	add	r0, r5, r0, lsl #3
   1a330:	lsl	r2, r2, #3
   1a334:	bl	11360 <memset@plt>
   1a338:	str	r9, [r7, #4]
   1a33c:	add	r3, r5, r6, lsl #3
   1a340:	ldr	r1, [r4, #4]
   1a344:	ldr	r7, [r3, #4]
   1a348:	ldr	r9, [r5, r6, lsl #3]
   1a34c:	ldr	r2, [r4, #40]	; 0x28
   1a350:	ldr	ip, [r4, #44]	; 0x2c
   1a354:	str	r3, [sp, #28]
   1a358:	ldr	r3, [r4]
   1a35c:	orr	r1, r1, #1
   1a360:	add	lr, r4, #8
   1a364:	str	r1, [sp, #36]	; 0x24
   1a368:	str	r1, [sp, #4]
   1a36c:	str	r2, [sp, #12]
   1a370:	str	r3, [sp]
   1a374:	mov	r0, r7
   1a378:	mov	r1, r9
   1a37c:	str	ip, [sp, #16]
   1a380:	str	lr, [sp, #8]
   1a384:	mov	r3, fp
   1a388:	mov	r2, sl
   1a38c:	str	lr, [sp, #32]
   1a390:	bl	18a98 <__assert_fail@plt+0x7630>
   1a394:	cmp	r9, r0
   1a398:	bhi	1a404 <__assert_fail@plt+0x8f9c>
   1a39c:	ldr	r3, [pc, #160]	; 1a444 <__assert_fail@plt+0x8fdc>
   1a3a0:	add	r9, r0, #1
   1a3a4:	cmp	r7, r3
   1a3a8:	str	r9, [r5, r6, lsl #3]
   1a3ac:	beq	1a3b8 <__assert_fail@plt+0x8f50>
   1a3b0:	mov	r0, r7
   1a3b4:	bl	1115c <free@plt>
   1a3b8:	mov	r0, r9
   1a3bc:	bl	1b048 <__assert_fail@plt+0x9be0>
   1a3c0:	ldr	lr, [sp, #28]
   1a3c4:	ldr	ip, [r4, #44]	; 0x2c
   1a3c8:	ldr	r5, [r4, #40]	; 0x28
   1a3cc:	mov	r3, fp
   1a3d0:	mov	r2, sl
   1a3d4:	mov	r1, r9
   1a3d8:	str	r0, [lr, #4]
   1a3dc:	ldr	lr, [r4]
   1a3e0:	ldr	r4, [sp, #32]
   1a3e4:	str	ip, [sp, #16]
   1a3e8:	str	r4, [sp, #8]
   1a3ec:	ldr	r4, [sp, #36]	; 0x24
   1a3f0:	str	r5, [sp, #12]
   1a3f4:	str	r4, [sp, #4]
   1a3f8:	str	lr, [sp]
   1a3fc:	mov	r7, r0
   1a400:	bl	18a98 <__assert_fail@plt+0x7630>
   1a404:	ldr	r3, [sp, #24]
   1a408:	mov	r0, r7
   1a40c:	str	r3, [r8]
   1a410:	add	sp, sp, #44	; 0x2c
   1a414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a418:	mov	r0, #0
   1a41c:	bl	1b0a4 <__assert_fail@plt+0x9c3c>
   1a420:	ldr	r3, [pc, #32]	; 1a448 <__assert_fail@plt+0x8fe0>
   1a424:	mov	r5, r0
   1a428:	ldm	r3, {r0, r1}
   1a42c:	str	r5, [r7]
   1a430:	stm	r5, {r0, r1}
   1a434:	b	1a320 <__assert_fail@plt+0x8eb8>
   1a438:	bl	1b290 <__assert_fail@plt+0x9e28>
   1a43c:	bl	11438 <abort@plt>
   1a440:	andeq	r3, r3, r0, asr r1
   1a444:	ldrdeq	r3, [r3], -ip
   1a448:	andeq	r3, r3, r8, asr r1
   1a44c:	push	{r4, r5, r6, lr}
   1a450:	mov	r5, r0
   1a454:	bl	11330 <__errno_location@plt>
   1a458:	cmp	r5, #0
   1a45c:	mov	r1, #48	; 0x30
   1a460:	mov	r4, r0
   1a464:	ldr	r0, [pc, #16]	; 1a47c <__assert_fail@plt+0x9014>
   1a468:	ldr	r6, [r4]
   1a46c:	movne	r0, r5
   1a470:	bl	1b250 <__assert_fail@plt+0x9de8>
   1a474:	str	r6, [r4]
   1a478:	pop	{r4, r5, r6, pc}
   1a47c:	ldrdeq	r3, [r3], -ip
   1a480:	ldr	r3, [pc, #12]	; 1a494 <__assert_fail@plt+0x902c>
   1a484:	cmp	r0, #0
   1a488:	moveq	r0, r3
   1a48c:	ldr	r0, [r0]
   1a490:	bx	lr
   1a494:	ldrdeq	r3, [r3], -ip
   1a498:	ldr	r3, [pc, #12]	; 1a4ac <__assert_fail@plt+0x9044>
   1a49c:	cmp	r0, #0
   1a4a0:	moveq	r0, r3
   1a4a4:	str	r1, [r0]
   1a4a8:	bx	lr
   1a4ac:	ldrdeq	r3, [r3], -ip
   1a4b0:	ldr	r3, [pc, #52]	; 1a4ec <__assert_fail@plt+0x9084>
   1a4b4:	cmp	r0, #0
   1a4b8:	moveq	r0, r3
   1a4bc:	add	r3, r0, #8
   1a4c0:	push	{lr}		; (str lr, [sp, #-4]!)
   1a4c4:	lsr	lr, r1, #5
   1a4c8:	and	r1, r1, #31
   1a4cc:	ldr	ip, [r3, lr, lsl #2]
   1a4d0:	lsr	r0, ip, r1
   1a4d4:	eor	r2, r2, r0
   1a4d8:	and	r2, r2, #1
   1a4dc:	and	r0, r0, #1
   1a4e0:	eor	r1, ip, r2, lsl r1
   1a4e4:	str	r1, [r3, lr, lsl #2]
   1a4e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4ec:	ldrdeq	r3, [r3], -ip
   1a4f0:	ldr	r3, [pc, #16]	; 1a508 <__assert_fail@plt+0x90a0>
   1a4f4:	cmp	r0, #0
   1a4f8:	movne	r3, r0
   1a4fc:	ldr	r0, [r3, #4]
   1a500:	str	r1, [r3, #4]
   1a504:	bx	lr
   1a508:	ldrdeq	r3, [r3], -ip
   1a50c:	ldr	r3, [pc, #44]	; 1a540 <__assert_fail@plt+0x90d8>
   1a510:	cmp	r0, #0
   1a514:	moveq	r0, r3
   1a518:	mov	ip, #10
   1a51c:	cmp	r2, #0
   1a520:	cmpne	r1, #0
   1a524:	str	ip, [r0]
   1a528:	beq	1a538 <__assert_fail@plt+0x90d0>
   1a52c:	str	r1, [r0, #40]	; 0x28
   1a530:	str	r2, [r0, #44]	; 0x2c
   1a534:	bx	lr
   1a538:	push	{r4, lr}
   1a53c:	bl	11438 <abort@plt>
   1a540:	ldrdeq	r3, [r3], -ip
   1a544:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a548:	sub	sp, sp, #24
   1a54c:	ldr	ip, [pc, #108]	; 1a5c0 <__assert_fail@plt+0x9158>
   1a550:	ldr	r4, [sp, #56]	; 0x38
   1a554:	mov	r9, r2
   1a558:	cmp	r4, #0
   1a55c:	moveq	r4, ip
   1a560:	mov	sl, r3
   1a564:	mov	r7, r0
   1a568:	mov	r8, r1
   1a56c:	bl	11330 <__errno_location@plt>
   1a570:	ldr	r3, [r4, #44]	; 0x2c
   1a574:	mov	r1, r8
   1a578:	ldr	r6, [r0]
   1a57c:	str	r3, [sp, #16]
   1a580:	ldr	r2, [r4, #40]	; 0x28
   1a584:	add	r3, r4, #8
   1a588:	str	r3, [sp, #8]
   1a58c:	str	r2, [sp, #12]
   1a590:	ldr	r2, [r4, #4]
   1a594:	mov	r5, r0
   1a598:	str	r2, [sp, #4]
   1a59c:	ldr	ip, [r4]
   1a5a0:	mov	r3, sl
   1a5a4:	mov	r2, r9
   1a5a8:	mov	r0, r7
   1a5ac:	str	ip, [sp]
   1a5b0:	bl	18a98 <__assert_fail@plt+0x7630>
   1a5b4:	str	r6, [r5]
   1a5b8:	add	sp, sp, #24
   1a5bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a5c0:	ldrdeq	r3, [r3], -ip
   1a5c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5c8:	cmp	r3, #0
   1a5cc:	sub	sp, sp, #44	; 0x2c
   1a5d0:	ldr	r4, [pc, #192]	; 1a698 <__assert_fail@plt+0x9230>
   1a5d4:	mov	r6, r2
   1a5d8:	movne	r4, r3
   1a5dc:	mov	r9, r1
   1a5e0:	mov	r8, r0
   1a5e4:	bl	11330 <__errno_location@plt>
   1a5e8:	ldr	r3, [r4, #44]	; 0x2c
   1a5ec:	ldr	r5, [r4, #4]
   1a5f0:	add	sl, r4, #8
   1a5f4:	cmp	r6, #0
   1a5f8:	orreq	r5, r5, #1
   1a5fc:	mov	r1, #0
   1a600:	ldr	r2, [r0]
   1a604:	str	r3, [sp, #16]
   1a608:	ldr	r3, [r4, #40]	; 0x28
   1a60c:	stmib	sp, {r5, sl}
   1a610:	str	r3, [sp, #12]
   1a614:	ldr	r3, [r4]
   1a618:	mov	r7, r0
   1a61c:	str	r2, [sp, #28]
   1a620:	str	r3, [sp]
   1a624:	mov	r2, r8
   1a628:	mov	r3, r9
   1a62c:	mov	r0, r1
   1a630:	bl	18a98 <__assert_fail@plt+0x7630>
   1a634:	add	r1, r0, #1
   1a638:	mov	fp, r0
   1a63c:	mov	r0, r1
   1a640:	str	r1, [sp, #36]	; 0x24
   1a644:	bl	1b048 <__assert_fail@plt+0x9be0>
   1a648:	ldr	r3, [r4, #44]	; 0x2c
   1a64c:	mov	r2, r8
   1a650:	str	r3, [sp, #16]
   1a654:	ldr	r3, [r4, #40]	; 0x28
   1a658:	str	r5, [sp, #4]
   1a65c:	str	r3, [sp, #12]
   1a660:	str	sl, [sp, #8]
   1a664:	ldr	ip, [r4]
   1a668:	ldr	r1, [sp, #36]	; 0x24
   1a66c:	mov	r3, r9
   1a670:	str	ip, [sp]
   1a674:	str	r0, [sp, #32]
   1a678:	bl	18a98 <__assert_fail@plt+0x7630>
   1a67c:	ldr	r2, [sp, #28]
   1a680:	cmp	r6, #0
   1a684:	str	r2, [r7]
   1a688:	ldr	r0, [sp, #32]
   1a68c:	strne	fp, [r6]
   1a690:	add	sp, sp, #44	; 0x2c
   1a694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a698:	ldrdeq	r3, [r3], -ip
   1a69c:	mov	r3, r2
   1a6a0:	mov	r2, #0
   1a6a4:	b	1a5c4 <__assert_fail@plt+0x915c>
   1a6a8:	push	{r4, r5, r6, r7, r8, lr}
   1a6ac:	ldr	r6, [pc, #112]	; 1a724 <__assert_fail@plt+0x92bc>
   1a6b0:	ldr	r3, [r6, #4]
   1a6b4:	ldr	r7, [r6]
   1a6b8:	cmp	r3, #1
   1a6bc:	ble	1a6e0 <__assert_fail@plt+0x9278>
   1a6c0:	sub	r5, r7, #8
   1a6c4:	add	r5, r5, r3, lsl #3
   1a6c8:	mov	r4, r7
   1a6cc:	ldr	r0, [r4, #12]
   1a6d0:	add	r4, r4, #8
   1a6d4:	bl	1115c <free@plt>
   1a6d8:	cmp	r4, r5
   1a6dc:	bne	1a6cc <__assert_fail@plt+0x9264>
   1a6e0:	ldr	r0, [r7, #4]
   1a6e4:	ldr	r4, [pc, #60]	; 1a728 <__assert_fail@plt+0x92c0>
   1a6e8:	cmp	r0, r4
   1a6ec:	beq	1a700 <__assert_fail@plt+0x9298>
   1a6f0:	bl	1115c <free@plt>
   1a6f4:	mov	r3, #256	; 0x100
   1a6f8:	str	r4, [r6, #12]
   1a6fc:	str	r3, [r6, #8]
   1a700:	ldr	r4, [pc, #36]	; 1a72c <__assert_fail@plt+0x92c4>
   1a704:	cmp	r7, r4
   1a708:	beq	1a718 <__assert_fail@plt+0x92b0>
   1a70c:	mov	r0, r7
   1a710:	bl	1115c <free@plt>
   1a714:	str	r4, [r6]
   1a718:	mov	r3, #1
   1a71c:	str	r3, [r6, #4]
   1a720:	pop	{r4, r5, r6, r7, r8, pc}
   1a724:	andeq	r3, r3, r0, asr r1
   1a728:	ldrdeq	r3, [r3], -ip
   1a72c:	andeq	r3, r3, r8, asr r1
   1a730:	ldr	r3, [pc, #4]	; 1a73c <__assert_fail@plt+0x92d4>
   1a734:	mvn	r2, #0
   1a738:	b	1a2b0 <__assert_fail@plt+0x8e48>
   1a73c:	ldrdeq	r3, [r3], -ip
   1a740:	ldr	r3, [pc]	; 1a748 <__assert_fail@plt+0x92e0>
   1a744:	b	1a2b0 <__assert_fail@plt+0x8e48>
   1a748:	ldrdeq	r3, [r3], -ip
   1a74c:	mov	r1, r0
   1a750:	ldr	r3, [pc, #8]	; 1a760 <__assert_fail@plt+0x92f8>
   1a754:	mvn	r2, #0
   1a758:	mov	r0, #0
   1a75c:	b	1a2b0 <__assert_fail@plt+0x8e48>
   1a760:	ldrdeq	r3, [r3], -ip
   1a764:	mov	r2, r1
   1a768:	ldr	r3, [pc, #8]	; 1a778 <__assert_fail@plt+0x9310>
   1a76c:	mov	r1, r0
   1a770:	mov	r0, #0
   1a774:	b	1a2b0 <__assert_fail@plt+0x8e48>
   1a778:	ldrdeq	r3, [r3], -ip
   1a77c:	push	{r4, r5, r6, lr}
   1a780:	sub	sp, sp, #56	; 0x38
   1a784:	ldr	r4, [pc, #68]	; 1a7d0 <__assert_fail@plt+0x9368>
   1a788:	mov	r6, r2
   1a78c:	mov	r5, r0
   1a790:	ldr	r3, [r4]
   1a794:	add	r0, sp, #4
   1a798:	str	r3, [sp, #52]	; 0x34
   1a79c:	bl	18928 <__assert_fail@plt+0x74c0>
   1a7a0:	add	r3, sp, #4
   1a7a4:	mvn	r2, #0
   1a7a8:	mov	r1, r6
   1a7ac:	mov	r0, r5
   1a7b0:	bl	1a2b0 <__assert_fail@plt+0x8e48>
   1a7b4:	ldr	r2, [sp, #52]	; 0x34
   1a7b8:	ldr	r3, [r4]
   1a7bc:	cmp	r2, r3
   1a7c0:	bne	1a7cc <__assert_fail@plt+0x9364>
   1a7c4:	add	sp, sp, #56	; 0x38
   1a7c8:	pop	{r4, r5, r6, pc}
   1a7cc:	bl	111bc <__stack_chk_fail@plt>
   1a7d0:	andeq	r2, r3, r8, lsl #30
   1a7d4:	push	{r4, r5, r6, r7, lr}
   1a7d8:	sub	sp, sp, #60	; 0x3c
   1a7dc:	ldr	r4, [pc, #72]	; 1a82c <__assert_fail@plt+0x93c4>
   1a7e0:	mov	r6, r2
   1a7e4:	mov	r7, r3
   1a7e8:	ldr	ip, [r4]
   1a7ec:	mov	r5, r0
   1a7f0:	add	r0, sp, #4
   1a7f4:	str	ip, [sp, #52]	; 0x34
   1a7f8:	bl	18928 <__assert_fail@plt+0x74c0>
   1a7fc:	add	r3, sp, #4
   1a800:	mov	r2, r7
   1a804:	mov	r1, r6
   1a808:	mov	r0, r5
   1a80c:	bl	1a2b0 <__assert_fail@plt+0x8e48>
   1a810:	ldr	r2, [sp, #52]	; 0x34
   1a814:	ldr	r3, [r4]
   1a818:	cmp	r2, r3
   1a81c:	bne	1a828 <__assert_fail@plt+0x93c0>
   1a820:	add	sp, sp, #60	; 0x3c
   1a824:	pop	{r4, r5, r6, r7, pc}
   1a828:	bl	111bc <__stack_chk_fail@plt>
   1a82c:	andeq	r2, r3, r8, lsl #30
   1a830:	mov	r2, r1
   1a834:	mov	r1, r0
   1a838:	mov	r0, #0
   1a83c:	b	1a77c <__assert_fail@plt+0x9314>
   1a840:	mov	r3, r2
   1a844:	mov	r2, r1
   1a848:	mov	r1, r0
   1a84c:	mov	r0, #0
   1a850:	b	1a7d4 <__assert_fail@plt+0x936c>
   1a854:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a858:	mov	r4, r2
   1a85c:	ldr	lr, [pc, #128]	; 1a8e4 <__assert_fail@plt+0x947c>
   1a860:	mov	r8, r0
   1a864:	mov	r9, r1
   1a868:	ldm	lr!, {r0, r1, r2, r3}
   1a86c:	sub	sp, sp, #60	; 0x3c
   1a870:	add	ip, sp, #4
   1a874:	lsr	r6, r4, #5
   1a878:	stmia	ip!, {r0, r1, r2, r3}
   1a87c:	add	r7, sp, #12
   1a880:	ldm	lr!, {r0, r1, r2, r3}
   1a884:	and	r4, r4, #31
   1a888:	ldr	r5, [pc, #88]	; 1a8e8 <__assert_fail@plt+0x9480>
   1a88c:	stmia	ip!, {r0, r1, r2, r3}
   1a890:	ldm	lr, {r0, r1, r2, r3}
   1a894:	stm	ip, {r0, r1, r2, r3}
   1a898:	mov	r2, r9
   1a89c:	ldr	r3, [r7, r6, lsl #2]
   1a8a0:	ldr	ip, [r5]
   1a8a4:	mov	r1, r8
   1a8a8:	mvn	r0, r3, lsr r4
   1a8ac:	and	r0, r0, #1
   1a8b0:	str	ip, [sp, #52]	; 0x34
   1a8b4:	eor	r4, r3, r0, lsl r4
   1a8b8:	add	r3, sp, #4
   1a8bc:	mov	r0, #0
   1a8c0:	str	r4, [r7, r6, lsl #2]
   1a8c4:	bl	1a2b0 <__assert_fail@plt+0x8e48>
   1a8c8:	ldr	r2, [sp, #52]	; 0x34
   1a8cc:	ldr	r3, [r5]
   1a8d0:	cmp	r2, r3
   1a8d4:	bne	1a8e0 <__assert_fail@plt+0x9478>
   1a8d8:	add	sp, sp, #60	; 0x3c
   1a8dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a8e0:	bl	111bc <__stack_chk_fail@plt>
   1a8e4:	ldrdeq	r3, [r3], -ip
   1a8e8:	andeq	r2, r3, r8, lsl #30
   1a8ec:	mov	r2, r1
   1a8f0:	mvn	r1, #0
   1a8f4:	b	1a854 <__assert_fail@plt+0x93ec>
   1a8f8:	mov	r2, #58	; 0x3a
   1a8fc:	mvn	r1, #0
   1a900:	b	1a854 <__assert_fail@plt+0x93ec>
   1a904:	mov	r2, #58	; 0x3a
   1a908:	b	1a854 <__assert_fail@plt+0x93ec>
   1a90c:	push	{r4, r5, r6, r7, r8, lr}
   1a910:	sub	sp, sp, #104	; 0x68
   1a914:	ldr	r5, [pc, #120]	; 1a994 <__assert_fail@plt+0x952c>
   1a918:	mov	r6, r0
   1a91c:	mov	r0, sp
   1a920:	ldr	r3, [r5]
   1a924:	mov	r7, r2
   1a928:	str	r3, [sp, #100]	; 0x64
   1a92c:	bl	18928 <__assert_fail@plt+0x74c0>
   1a930:	mov	ip, sp
   1a934:	add	lr, sp, #52	; 0x34
   1a938:	ldm	ip!, {r0, r1, r2, r3}
   1a93c:	stmia	lr!, {r0, r1, r2, r3}
   1a940:	ldm	ip!, {r0, r1, r2, r3}
   1a944:	ldr	r8, [sp, #64]	; 0x40
   1a948:	stmia	lr!, {r0, r1, r2, r3}
   1a94c:	mvn	r4, r8
   1a950:	ldm	ip, {r0, r1, r2, r3}
   1a954:	and	ip, r4, #67108864	; 0x4000000
   1a958:	eor	ip, ip, r8
   1a95c:	str	ip, [sp, #64]	; 0x40
   1a960:	stm	lr, {r0, r1, r2, r3}
   1a964:	add	r3, sp, #52	; 0x34
   1a968:	mvn	r2, #0
   1a96c:	mov	r1, r7
   1a970:	mov	r0, r6
   1a974:	bl	1a2b0 <__assert_fail@plt+0x8e48>
   1a978:	ldr	r2, [sp, #100]	; 0x64
   1a97c:	ldr	r3, [r5]
   1a980:	cmp	r2, r3
   1a984:	bne	1a990 <__assert_fail@plt+0x9528>
   1a988:	add	sp, sp, #104	; 0x68
   1a98c:	pop	{r4, r5, r6, r7, r8, pc}
   1a990:	bl	111bc <__stack_chk_fail@plt>
   1a994:	andeq	r2, r3, r8, lsl #30
   1a998:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a99c:	mov	r6, r1
   1a9a0:	ldr	lr, [pc, #132]	; 1aa2c <__assert_fail@plt+0x95c4>
   1a9a4:	mov	r5, r2
   1a9a8:	mov	r8, r0
   1a9ac:	mov	r9, r3
   1a9b0:	ldm	lr!, {r0, r1, r2, r3}
   1a9b4:	sub	sp, sp, #60	; 0x3c
   1a9b8:	add	ip, sp, #4
   1a9bc:	ldr	r4, [pc, #108]	; 1aa30 <__assert_fail@plt+0x95c8>
   1a9c0:	stmia	ip!, {r0, r1, r2, r3}
   1a9c4:	mov	r7, #10
   1a9c8:	ldm	lr!, {r0, r1, r2, r3}
   1a9cc:	cmp	r5, #0
   1a9d0:	cmpne	r6, #0
   1a9d4:	str	r7, [sp, #4]
   1a9d8:	stmia	ip!, {r0, r1, r2, r3}
   1a9dc:	ldm	lr, {r0, r1, r2, r3}
   1a9e0:	ldr	lr, [r4]
   1a9e4:	stm	ip, {r0, r1, r2, r3}
   1a9e8:	str	lr, [sp, #52]	; 0x34
   1a9ec:	beq	1aa28 <__assert_fail@plt+0x95c0>
   1a9f0:	add	r3, sp, #4
   1a9f4:	ldr	r2, [sp, #88]	; 0x58
   1a9f8:	mov	r1, r9
   1a9fc:	mov	r0, r8
   1aa00:	str	r6, [sp, #44]	; 0x2c
   1aa04:	str	r5, [sp, #48]	; 0x30
   1aa08:	bl	1a2b0 <__assert_fail@plt+0x8e48>
   1aa0c:	ldr	r2, [sp, #52]	; 0x34
   1aa10:	ldr	r3, [r4]
   1aa14:	cmp	r2, r3
   1aa18:	bne	1aa24 <__assert_fail@plt+0x95bc>
   1aa1c:	add	sp, sp, #60	; 0x3c
   1aa20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1aa24:	bl	111bc <__stack_chk_fail@plt>
   1aa28:	bl	11438 <abort@plt>
   1aa2c:	ldrdeq	r3, [r3], -ip
   1aa30:	andeq	r2, r3, r8, lsl #30
   1aa34:	push	{lr}		; (str lr, [sp, #-4]!)
   1aa38:	sub	sp, sp, #12
   1aa3c:	mvn	ip, #0
   1aa40:	str	ip, [sp]
   1aa44:	bl	1a998 <__assert_fail@plt+0x9530>
   1aa48:	add	sp, sp, #12
   1aa4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa50:	push	{lr}		; (str lr, [sp, #-4]!)
   1aa54:	sub	sp, sp, #12
   1aa58:	mvn	ip, #0
   1aa5c:	mov	r3, r2
   1aa60:	str	ip, [sp]
   1aa64:	mov	r2, r1
   1aa68:	mov	r1, r0
   1aa6c:	mov	r0, #0
   1aa70:	bl	1a998 <__assert_fail@plt+0x9530>
   1aa74:	add	sp, sp, #12
   1aa78:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa7c:	push	{lr}		; (str lr, [sp, #-4]!)
   1aa80:	sub	sp, sp, #12
   1aa84:	str	r3, [sp]
   1aa88:	mov	r3, r2
   1aa8c:	mov	r2, r1
   1aa90:	mov	r1, r0
   1aa94:	mov	r0, #0
   1aa98:	bl	1a998 <__assert_fail@plt+0x9530>
   1aa9c:	add	sp, sp, #12
   1aaa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aaa4:	ldr	r3, [pc]	; 1aaac <__assert_fail@plt+0x9644>
   1aaa8:	b	1a2b0 <__assert_fail@plt+0x8e48>
   1aaac:	andeq	r3, r3, r0, ror #2
   1aab0:	mov	r2, r1
   1aab4:	ldr	r3, [pc, #8]	; 1aac4 <__assert_fail@plt+0x965c>
   1aab8:	mov	r1, r0
   1aabc:	mov	r0, #0
   1aac0:	b	1a2b0 <__assert_fail@plt+0x8e48>
   1aac4:	andeq	r3, r3, r0, ror #2
   1aac8:	ldr	r3, [pc, #4]	; 1aad4 <__assert_fail@plt+0x966c>
   1aacc:	mvn	r2, #0
   1aad0:	b	1a2b0 <__assert_fail@plt+0x8e48>
   1aad4:	andeq	r3, r3, r0, ror #2
   1aad8:	mov	r1, r0
   1aadc:	ldr	r3, [pc, #8]	; 1aaec <__assert_fail@plt+0x9684>
   1aae0:	mvn	r2, #0
   1aae4:	mov	r0, #0
   1aae8:	b	1a2b0 <__assert_fail@plt+0x8e48>
   1aaec:	andeq	r3, r3, r0, ror #2
   1aaf0:	push	{r4, r5, r6, lr}
   1aaf4:	sub	sp, sp, #32
   1aaf8:	cmp	r1, #0
   1aafc:	mov	r5, r0
   1ab00:	ldr	r4, [sp, #48]	; 0x30
   1ab04:	ldr	r6, [sp, #52]	; 0x34
   1ab08:	beq	1ab98 <__assert_fail@plt+0x9730>
   1ab0c:	strd	r2, [sp]
   1ab10:	mov	r3, r1
   1ab14:	ldr	r2, [pc, #828]	; 1ae58 <__assert_fail@plt+0x99f0>
   1ab18:	mov	r1, #1
   1ab1c:	bl	11384 <__fprintf_chk@plt>
   1ab20:	mov	r2, #5
   1ab24:	ldr	r1, [pc, #816]	; 1ae5c <__assert_fail@plt+0x99f4>
   1ab28:	mov	r0, #0
   1ab2c:	bl	111b0 <dcgettext@plt>
   1ab30:	ldr	r3, [pc, #808]	; 1ae60 <__assert_fail@plt+0x99f8>
   1ab34:	ldr	r2, [pc, #808]	; 1ae64 <__assert_fail@plt+0x99fc>
   1ab38:	str	r3, [sp]
   1ab3c:	mov	r1, #1
   1ab40:	mov	r3, r0
   1ab44:	mov	r0, r5
   1ab48:	bl	11384 <__fprintf_chk@plt>
   1ab4c:	ldr	r1, [pc, #788]	; 1ae68 <__assert_fail@plt+0x9a00>
   1ab50:	mov	r2, #5
   1ab54:	mov	r0, #0
   1ab58:	bl	111b0 <dcgettext@plt>
   1ab5c:	mov	r1, r5
   1ab60:	bl	110fc <fputs_unlocked@plt>
   1ab64:	cmp	r6, #9
   1ab68:	ldrls	pc, [pc, r6, lsl #2]
   1ab6c:	b	1ae48 <__assert_fail@plt+0x99e0>
   1ab70:	andeq	sl, r1, r4, asr lr
   1ab74:	andeq	sl, r1, ip, lsl ip
   1ab78:	andeq	sl, r1, r8, asr #24
   1ab7c:	andeq	sl, r1, ip, ror ip
   1ab80:			; <UNDEFINED> instruction: 0x0001acb8
   1ab84:	strdeq	sl, [r1], -r8
   1ab88:	andeq	sl, r1, r0, asr #26
   1ab8c:	muleq	r1, r0, sp
   1ab90:	andeq	sl, r1, r8, ror #27
   1ab94:			; <UNDEFINED> instruction: 0x0001abb0
   1ab98:	str	r3, [sp]
   1ab9c:	mov	r1, #1
   1aba0:	mov	r3, r2
   1aba4:	ldr	r2, [pc, #704]	; 1ae6c <__assert_fail@plt+0x9a04>
   1aba8:	bl	11384 <__fprintf_chk@plt>
   1abac:	b	1ab20 <__assert_fail@plt+0x96b8>
   1abb0:	ldr	r1, [pc, #696]	; 1ae70 <__assert_fail@plt+0x9a08>
   1abb4:	mov	r2, #5
   1abb8:	mov	r0, #0
   1abbc:	bl	111b0 <dcgettext@plt>
   1abc0:	ldr	r2, [r4, #32]
   1abc4:	ldr	r3, [r4, #28]
   1abc8:	ldr	r1, [r4, #24]
   1abcc:	str	r2, [sp, #28]
   1abd0:	ldr	r2, [r4, #20]
   1abd4:	str	r3, [sp, #24]
   1abd8:	ldr	r3, [r4, #16]
   1abdc:	str	r1, [sp, #20]
   1abe0:	ldr	r1, [r4, #12]
   1abe4:	str	r2, [sp, #16]
   1abe8:	ldr	r2, [r4, #8]
   1abec:	str	r3, [sp, #12]
   1abf0:	ldr	r3, [r4, #4]
   1abf4:	str	r1, [sp, #8]
   1abf8:	str	r2, [sp, #4]
   1abfc:	str	r3, [sp]
   1ac00:	mov	r1, #1
   1ac04:	ldr	r3, [r4]
   1ac08:	mov	r2, r0
   1ac0c:	mov	r0, r5
   1ac10:	bl	11384 <__fprintf_chk@plt>
   1ac14:	add	sp, sp, #32
   1ac18:	pop	{r4, r5, r6, pc}
   1ac1c:	mov	r2, #5
   1ac20:	ldr	r1, [pc, #588]	; 1ae74 <__assert_fail@plt+0x9a0c>
   1ac24:	mov	r0, #0
   1ac28:	bl	111b0 <dcgettext@plt>
   1ac2c:	ldr	r3, [r4]
   1ac30:	mov	r1, #1
   1ac34:	mov	r2, r0
   1ac38:	mov	r0, r5
   1ac3c:	add	sp, sp, #32
   1ac40:	pop	{r4, r5, r6, lr}
   1ac44:	b	11384 <__fprintf_chk@plt>
   1ac48:	mov	r2, #5
   1ac4c:	ldr	r1, [pc, #548]	; 1ae78 <__assert_fail@plt+0x9a10>
   1ac50:	mov	r0, #0
   1ac54:	bl	111b0 <dcgettext@plt>
   1ac58:	ldr	r2, [r4, #4]
   1ac5c:	ldr	r3, [r4]
   1ac60:	mov	r1, #1
   1ac64:	str	r2, [sp, #48]	; 0x30
   1ac68:	mov	r2, r0
   1ac6c:	mov	r0, r5
   1ac70:	add	sp, sp, #32
   1ac74:	pop	{r4, r5, r6, lr}
   1ac78:	b	11384 <__fprintf_chk@plt>
   1ac7c:	mov	r2, #5
   1ac80:	ldr	r1, [pc, #500]	; 1ae7c <__assert_fail@plt+0x9a14>
   1ac84:	mov	r0, #0
   1ac88:	bl	111b0 <dcgettext@plt>
   1ac8c:	ldr	r2, [r4, #8]
   1ac90:	ldr	r3, [r4, #4]
   1ac94:	mov	r1, #1
   1ac98:	str	r2, [sp, #52]	; 0x34
   1ac9c:	str	r3, [sp, #48]	; 0x30
   1aca0:	ldr	r3, [r4]
   1aca4:	mov	r2, r0
   1aca8:	mov	r0, r5
   1acac:	add	sp, sp, #32
   1acb0:	pop	{r4, r5, r6, lr}
   1acb4:	b	11384 <__fprintf_chk@plt>
   1acb8:	mov	r2, #5
   1acbc:	ldr	r1, [pc, #444]	; 1ae80 <__assert_fail@plt+0x9a18>
   1acc0:	mov	r0, #0
   1acc4:	bl	111b0 <dcgettext@plt>
   1acc8:	ldr	r1, [r4, #12]
   1accc:	ldr	r2, [r4, #8]
   1acd0:	ldr	r3, [r4, #4]
   1acd4:	str	r1, [sp, #8]
   1acd8:	str	r2, [sp, #4]
   1acdc:	str	r3, [sp]
   1ace0:	mov	r1, #1
   1ace4:	ldr	r3, [r4]
   1ace8:	mov	r2, r0
   1acec:	mov	r0, r5
   1acf0:	bl	11384 <__fprintf_chk@plt>
   1acf4:	b	1ac14 <__assert_fail@plt+0x97ac>
   1acf8:	mov	r2, #5
   1acfc:	ldr	r1, [pc, #384]	; 1ae84 <__assert_fail@plt+0x9a1c>
   1ad00:	mov	r0, #0
   1ad04:	bl	111b0 <dcgettext@plt>
   1ad08:	ldr	r3, [r4, #16]
   1ad0c:	ldr	r1, [r4, #12]
   1ad10:	ldr	r2, [r4, #8]
   1ad14:	str	r3, [sp, #12]
   1ad18:	ldr	r3, [r4, #4]
   1ad1c:	str	r1, [sp, #8]
   1ad20:	str	r2, [sp, #4]
   1ad24:	str	r3, [sp]
   1ad28:	mov	r1, #1
   1ad2c:	ldr	r3, [r4]
   1ad30:	mov	r2, r0
   1ad34:	mov	r0, r5
   1ad38:	bl	11384 <__fprintf_chk@plt>
   1ad3c:	b	1ac14 <__assert_fail@plt+0x97ac>
   1ad40:	mov	r2, #5
   1ad44:	ldr	r1, [pc, #316]	; 1ae88 <__assert_fail@plt+0x9a20>
   1ad48:	mov	r0, #0
   1ad4c:	bl	111b0 <dcgettext@plt>
   1ad50:	ldr	r2, [r4, #20]
   1ad54:	ldr	r3, [r4, #16]
   1ad58:	ldr	r1, [r4, #12]
   1ad5c:	str	r2, [sp, #16]
   1ad60:	ldr	r2, [r4, #8]
   1ad64:	str	r3, [sp, #12]
   1ad68:	ldr	r3, [r4, #4]
   1ad6c:	str	r1, [sp, #8]
   1ad70:	str	r2, [sp, #4]
   1ad74:	str	r3, [sp]
   1ad78:	mov	r1, #1
   1ad7c:	ldr	r3, [r4]
   1ad80:	mov	r2, r0
   1ad84:	mov	r0, r5
   1ad88:	bl	11384 <__fprintf_chk@plt>
   1ad8c:	b	1ac14 <__assert_fail@plt+0x97ac>
   1ad90:	mov	r2, #5
   1ad94:	ldr	r1, [pc, #240]	; 1ae8c <__assert_fail@plt+0x9a24>
   1ad98:	mov	r0, #0
   1ad9c:	bl	111b0 <dcgettext@plt>
   1ada0:	ldr	r1, [r4, #24]
   1ada4:	ldr	r2, [r4, #20]
   1ada8:	ldr	r3, [r4, #16]
   1adac:	str	r1, [sp, #20]
   1adb0:	ldr	r1, [r4, #12]
   1adb4:	str	r2, [sp, #16]
   1adb8:	ldr	r2, [r4, #8]
   1adbc:	str	r3, [sp, #12]
   1adc0:	ldr	r3, [r4, #4]
   1adc4:	str	r1, [sp, #8]
   1adc8:	str	r2, [sp, #4]
   1adcc:	str	r3, [sp]
   1add0:	mov	r1, #1
   1add4:	ldr	r3, [r4]
   1add8:	mov	r2, r0
   1addc:	mov	r0, r5
   1ade0:	bl	11384 <__fprintf_chk@plt>
   1ade4:	b	1ac14 <__assert_fail@plt+0x97ac>
   1ade8:	mov	r2, #5
   1adec:	ldr	r1, [pc, #156]	; 1ae90 <__assert_fail@plt+0x9a28>
   1adf0:	mov	r0, #0
   1adf4:	bl	111b0 <dcgettext@plt>
   1adf8:	ldr	r3, [r4, #28]
   1adfc:	ldr	r1, [r4, #24]
   1ae00:	ldr	r2, [r4, #20]
   1ae04:	str	r3, [sp, #24]
   1ae08:	ldr	r3, [r4, #16]
   1ae0c:	str	r1, [sp, #20]
   1ae10:	ldr	r1, [r4, #12]
   1ae14:	str	r2, [sp, #16]
   1ae18:	ldr	r2, [r4, #8]
   1ae1c:	str	r3, [sp, #12]
   1ae20:	ldr	r3, [r4, #4]
   1ae24:	str	r1, [sp, #8]
   1ae28:	str	r2, [sp, #4]
   1ae2c:	str	r3, [sp]
   1ae30:	mov	r1, #1
   1ae34:	ldr	r3, [r4]
   1ae38:	mov	r2, r0
   1ae3c:	mov	r0, r5
   1ae40:	bl	11384 <__fprintf_chk@plt>
   1ae44:	b	1ac14 <__assert_fail@plt+0x97ac>
   1ae48:	mov	r2, #5
   1ae4c:	ldr	r1, [pc, #64]	; 1ae94 <__assert_fail@plt+0x9a2c>
   1ae50:	b	1abb8 <__assert_fail@plt+0x9750>
   1ae54:	bl	11438 <abort@plt>
   1ae58:	strdeq	r1, [r2], -r0
   1ae5c:	andeq	r1, r2, r4, lsl #26
   1ae60:	andeq	r0, r0, r2, ror #15
   1ae64:	ldrdeq	r1, [r2], -r8
   1ae68:	andeq	r1, r2, r8, lsl #26
   1ae6c:	strdeq	r1, [r2], -ip
   1ae70:	andeq	r1, r2, r0, ror #29
   1ae74:	ldrdeq	r1, [r2], -r4
   1ae78:	andeq	r1, r2, r4, ror #27
   1ae7c:	strdeq	r1, [r2], -ip
   1ae80:	andeq	r1, r2, r8, lsl lr
   1ae84:	andeq	r1, r2, r8, lsr lr
   1ae88:	andeq	r1, r2, ip, asr lr
   1ae8c:	andeq	r1, r2, r4, lsl #29
   1ae90:			; <UNDEFINED> instruction: 0x00021eb0
   1ae94:	andeq	r1, r2, r4, lsl pc
   1ae98:	push	{r4, r5, lr}
   1ae9c:	sub	sp, sp, #12
   1aea0:	ldr	r5, [sp, #24]
   1aea4:	ldr	ip, [r5]
   1aea8:	cmp	ip, #0
   1aeac:	beq	1aec8 <__assert_fail@plt+0x9a60>
   1aeb0:	mov	lr, r5
   1aeb4:	mov	ip, #0
   1aeb8:	ldr	r4, [lr, #4]!
   1aebc:	add	ip, ip, #1
   1aec0:	cmp	r4, #0
   1aec4:	bne	1aeb8 <__assert_fail@plt+0x9a50>
   1aec8:	stm	sp, {r5, ip}
   1aecc:	bl	1aaf0 <__assert_fail@plt+0x9688>
   1aed0:	add	sp, sp, #12
   1aed4:	pop	{r4, r5, pc}
   1aed8:	push	{r4, r5, r6, lr}
   1aedc:	sub	sp, sp, #56	; 0x38
   1aee0:	ldr	r6, [pc, #88]	; 1af40 <__assert_fail@plt+0x9ad8>
   1aee4:	ldr	r5, [sp, #72]	; 0x48
   1aee8:	add	r4, sp, #8
   1aeec:	ldr	ip, [r6]
   1aef0:	str	ip, [sp, #52]	; 0x34
   1aef4:	mov	ip, #0
   1aef8:	ldr	lr, [r5], #4
   1aefc:	cmp	lr, #0
   1af00:	str	lr, [r4, #4]!
   1af04:	beq	1af14 <__assert_fail@plt+0x9aac>
   1af08:	add	ip, ip, #1
   1af0c:	cmp	ip, #10
   1af10:	bne	1aef8 <__assert_fail@plt+0x9a90>
   1af14:	add	lr, sp, #12
   1af18:	str	ip, [sp, #4]
   1af1c:	str	lr, [sp]
   1af20:	bl	1aaf0 <__assert_fail@plt+0x9688>
   1af24:	ldr	r2, [sp, #52]	; 0x34
   1af28:	ldr	r3, [r6]
   1af2c:	cmp	r2, r3
   1af30:	bne	1af3c <__assert_fail@plt+0x9ad4>
   1af34:	add	sp, sp, #56	; 0x38
   1af38:	pop	{r4, r5, r6, pc}
   1af3c:	bl	111bc <__stack_chk_fail@plt>
   1af40:	andeq	r2, r3, r8, lsl #30
   1af44:	push	{r3}		; (str r3, [sp, #-4]!)
   1af48:	mov	ip, #0
   1af4c:	push	{r4, r5, r6, lr}
   1af50:	sub	sp, sp, #60	; 0x3c
   1af54:	ldr	r6, [pc, #100]	; 1afc0 <__assert_fail@plt+0x9b58>
   1af58:	add	r5, sp, #8
   1af5c:	add	r4, sp, #80	; 0x50
   1af60:	ldr	r3, [r6]
   1af64:	str	r4, [sp, #8]
   1af68:	str	r3, [sp, #52]	; 0x34
   1af6c:	ldr	r3, [sp, #76]	; 0x4c
   1af70:	ldr	lr, [r4], #4
   1af74:	cmp	lr, #0
   1af78:	str	lr, [r5, #4]!
   1af7c:	beq	1af8c <__assert_fail@plt+0x9b24>
   1af80:	add	ip, ip, #1
   1af84:	cmp	ip, #10
   1af88:	bne	1af70 <__assert_fail@plt+0x9b08>
   1af8c:	add	lr, sp, #12
   1af90:	str	ip, [sp, #4]
   1af94:	str	lr, [sp]
   1af98:	bl	1aaf0 <__assert_fail@plt+0x9688>
   1af9c:	ldr	r2, [sp, #52]	; 0x34
   1afa0:	ldr	r3, [r6]
   1afa4:	cmp	r2, r3
   1afa8:	bne	1afbc <__assert_fail@plt+0x9b54>
   1afac:	add	sp, sp, #60	; 0x3c
   1afb0:	pop	{r4, r5, r6, lr}
   1afb4:	add	sp, sp, #4
   1afb8:	bx	lr
   1afbc:	bl	111bc <__stack_chk_fail@plt>
   1afc0:	andeq	r2, r3, r8, lsl #30
   1afc4:	push	{r4, lr}
   1afc8:	mov	r2, #5
   1afcc:	ldr	r1, [pc, #88]	; 1b02c <__assert_fail@plt+0x9bc4>
   1afd0:	mov	r0, #0
   1afd4:	bl	111b0 <dcgettext@plt>
   1afd8:	ldr	r2, [pc, #80]	; 1b030 <__assert_fail@plt+0x9bc8>
   1afdc:	mov	r1, r0
   1afe0:	mov	r0, #1
   1afe4:	bl	1136c <__printf_chk@plt>
   1afe8:	mov	r2, #5
   1afec:	ldr	r1, [pc, #64]	; 1b034 <__assert_fail@plt+0x9bcc>
   1aff0:	mov	r0, #0
   1aff4:	bl	111b0 <dcgettext@plt>
   1aff8:	ldr	r3, [pc, #56]	; 1b038 <__assert_fail@plt+0x9bd0>
   1affc:	ldr	r2, [pc, #56]	; 1b03c <__assert_fail@plt+0x9bd4>
   1b000:	mov	r1, r0
   1b004:	mov	r0, #1
   1b008:	bl	1136c <__printf_chk@plt>
   1b00c:	ldr	r1, [pc, #44]	; 1b040 <__assert_fail@plt+0x9bd8>
   1b010:	mov	r2, #5
   1b014:	mov	r0, #0
   1b018:	bl	111b0 <dcgettext@plt>
   1b01c:	ldr	r3, [pc, #32]	; 1b044 <__assert_fail@plt+0x9bdc>
   1b020:	pop	{r4, lr}
   1b024:	ldr	r1, [r3]
   1b028:	b	110fc <fputs_unlocked@plt>
   1b02c:	andeq	r1, r2, r0, asr pc
   1b030:	andeq	r1, r2, r8, ror #30
   1b034:	andeq	r1, r2, r0, lsl #31
   1b038:	ldrdeq	pc, [r1], -ip
   1b03c:	andeq	pc, r1, r4, lsl #28
   1b040:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   1b044:	andeq	r3, r3, r4, lsr #3
   1b048:	push	{r4, lr}
   1b04c:	mov	r4, r0
   1b050:	bl	11288 <malloc@plt>
   1b054:	adds	r4, r4, #0
   1b058:	movne	r4, #1
   1b05c:	cmp	r0, #0
   1b060:	movne	r4, #0
   1b064:	cmp	r4, #0
   1b068:	popeq	{r4, pc}
   1b06c:	bl	1b290 <__assert_fail@plt+0x9e28>
   1b070:	push	{r4, r5, r6, lr}
   1b074:	umull	r4, r5, r0, r1
   1b078:	adds	r3, r5, #0
   1b07c:	movne	r3, #1
   1b080:	cmp	r4, #0
   1b084:	blt	1b09c <__assert_fail@plt+0x9c34>
   1b088:	cmp	r3, #0
   1b08c:	bne	1b09c <__assert_fail@plt+0x9c34>
   1b090:	mul	r0, r1, r0
   1b094:	pop	{r4, r5, r6, lr}
   1b098:	b	1b048 <__assert_fail@plt+0x9be0>
   1b09c:	bl	1b290 <__assert_fail@plt+0x9e28>
   1b0a0:	b	1b048 <__assert_fail@plt+0x9be0>
   1b0a4:	adds	r3, r0, #0
   1b0a8:	movne	r3, #1
   1b0ac:	cmp	r1, #0
   1b0b0:	movne	r3, #0
   1b0b4:	cmp	r3, #0
   1b0b8:	push	{r4, lr}
   1b0bc:	bne	1b0e4 <__assert_fail@plt+0x9c7c>
   1b0c0:	mov	r4, r1
   1b0c4:	bl	111d4 <realloc@plt>
   1b0c8:	adds	r4, r4, #0
   1b0cc:	movne	r4, #1
   1b0d0:	cmp	r0, #0
   1b0d4:	movne	r4, #0
   1b0d8:	cmp	r4, #0
   1b0dc:	popeq	{r4, pc}
   1b0e0:	bl	1b290 <__assert_fail@plt+0x9e28>
   1b0e4:	bl	1115c <free@plt>
   1b0e8:	mov	r0, #0
   1b0ec:	pop	{r4, pc}
   1b0f0:	push	{r4, r5, r6, lr}
   1b0f4:	umull	r4, r5, r1, r2
   1b0f8:	adds	r3, r5, #0
   1b0fc:	movne	r3, #1
   1b100:	cmp	r4, #0
   1b104:	blt	1b11c <__assert_fail@plt+0x9cb4>
   1b108:	cmp	r3, #0
   1b10c:	bne	1b11c <__assert_fail@plt+0x9cb4>
   1b110:	mul	r1, r2, r1
   1b114:	pop	{r4, r5, r6, lr}
   1b118:	b	1b0a4 <__assert_fail@plt+0x9c3c>
   1b11c:	bl	1b290 <__assert_fail@plt+0x9e28>
   1b120:	push	{r4, r5, r6, r7, r8, lr}
   1b124:	subs	r7, r0, #0
   1b128:	mov	r6, r1
   1b12c:	mov	r5, r2
   1b130:	ldr	r4, [r1]
   1b134:	beq	1b168 <__assert_fail@plt+0x9d00>
   1b138:	mov	r1, r2
   1b13c:	ldr	r0, [pc, #104]	; 1b1ac <__assert_fail@plt+0x9d44>
   1b140:	bl	1f000 <__assert_fail@plt+0xdb98>
   1b144:	cmp	r0, r4
   1b148:	bls	1b18c <__assert_fail@plt+0x9d24>
   1b14c:	add	r3, r4, #1
   1b150:	add	r4, r3, r4, lsr #1
   1b154:	str	r4, [r6]
   1b158:	mul	r1, r5, r4
   1b15c:	mov	r0, r7
   1b160:	pop	{r4, r5, r6, r7, r8, lr}
   1b164:	b	1b0a4 <__assert_fail@plt+0x9c3c>
   1b168:	cmp	r4, #0
   1b16c:	beq	1b190 <__assert_fail@plt+0x9d28>
   1b170:	umull	r0, r1, r4, r5
   1b174:	adds	r3, r1, #0
   1b178:	movne	r3, #1
   1b17c:	cmp	r0, #0
   1b180:	blt	1b18c <__assert_fail@plt+0x9d24>
   1b184:	cmp	r3, #0
   1b188:	beq	1b154 <__assert_fail@plt+0x9cec>
   1b18c:	bl	1b290 <__assert_fail@plt+0x9e28>
   1b190:	mov	r1, r2
   1b194:	mov	r0, #64	; 0x40
   1b198:	bl	1f000 <__assert_fail@plt+0xdb98>
   1b19c:	cmp	r5, #64	; 0x40
   1b1a0:	movls	r4, r0
   1b1a4:	addhi	r4, r0, #1
   1b1a8:	b	1b170 <__assert_fail@plt+0x9d08>
   1b1ac:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   1b1b0:	cmp	r0, #0
   1b1b4:	ldr	r3, [r1]
   1b1b8:	beq	1b1dc <__assert_fail@plt+0x9d74>
   1b1bc:	ldr	r2, [pc, #60]	; 1b200 <__assert_fail@plt+0x9d98>
   1b1c0:	cmp	r3, r2
   1b1c4:	bhi	1b1f8 <__assert_fail@plt+0x9d90>
   1b1c8:	add	r2, r3, #1
   1b1cc:	add	r3, r2, r3, lsr #1
   1b1d0:	str	r3, [r1]
   1b1d4:	mov	r1, r3
   1b1d8:	b	1b0a4 <__assert_fail@plt+0x9c3c>
   1b1dc:	cmp	r3, #0
   1b1e0:	bne	1b1f4 <__assert_fail@plt+0x9d8c>
   1b1e4:	mov	r3, #64	; 0x40
   1b1e8:	str	r3, [r1]
   1b1ec:	mov	r1, r3
   1b1f0:	b	1b0a4 <__assert_fail@plt+0x9c3c>
   1b1f4:	bge	1b1d0 <__assert_fail@plt+0x9d68>
   1b1f8:	push	{r4, lr}
   1b1fc:	bl	1b290 <__assert_fail@plt+0x9e28>
   1b200:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   1b204:	push	{r4, lr}
   1b208:	mov	r4, r0
   1b20c:	bl	1b048 <__assert_fail@plt+0x9be0>
   1b210:	mov	r2, r4
   1b214:	mov	r1, #0
   1b218:	pop	{r4, lr}
   1b21c:	b	11360 <memset@plt>
   1b220:	push	{r4, r5, r6, lr}
   1b224:	umull	r4, r5, r0, r1
   1b228:	adds	r3, r5, #0
   1b22c:	movne	r3, #1
   1b230:	cmp	r4, #0
   1b234:	blt	1b24c <__assert_fail@plt+0x9de4>
   1b238:	cmp	r3, #0
   1b23c:	bne	1b24c <__assert_fail@plt+0x9de4>
   1b240:	bl	110f0 <calloc@plt>
   1b244:	cmp	r0, #0
   1b248:	popne	{r4, r5, r6, pc}
   1b24c:	bl	1b290 <__assert_fail@plt+0x9e28>
   1b250:	push	{r4, r5, r6, lr}
   1b254:	mov	r4, r1
   1b258:	mov	r5, r0
   1b25c:	mov	r0, r1
   1b260:	bl	1b048 <__assert_fail@plt+0x9be0>
   1b264:	mov	r2, r4
   1b268:	mov	r1, r5
   1b26c:	pop	{r4, r5, r6, lr}
   1b270:	b	11180 <memcpy@plt>
   1b274:	push	{r4, lr}
   1b278:	mov	r4, r0
   1b27c:	bl	1130c <strlen@plt>
   1b280:	add	r1, r0, #1
   1b284:	mov	r0, r4
   1b288:	pop	{r4, lr}
   1b28c:	b	1b250 <__assert_fail@plt+0x9de8>
   1b290:	ldr	r3, [pc, #44]	; 1b2c4 <__assert_fail@plt+0x9e5c>
   1b294:	push	{r4, lr}
   1b298:	mov	r2, #5
   1b29c:	ldr	r1, [pc, #36]	; 1b2c8 <__assert_fail@plt+0x9e60>
   1b2a0:	mov	r0, #0
   1b2a4:	ldr	r4, [r3]
   1b2a8:	bl	111b0 <dcgettext@plt>
   1b2ac:	ldr	r2, [pc, #24]	; 1b2cc <__assert_fail@plt+0x9e64>
   1b2b0:	mov	r1, #0
   1b2b4:	mov	r3, r0
   1b2b8:	mov	r0, r4
   1b2bc:	bl	11264 <error@plt>
   1b2c0:	bl	11438 <abort@plt>
   1b2c4:	andeq	r3, r3, ip, asr #2
   1b2c8:	andeq	r2, r2, r8
   1b2cc:	muleq	r2, r4, r1
   1b2d0:	push	{r4, r5, r6, r7, r8, lr}
   1b2d4:	subs	r7, r0, #0
   1b2d8:	ldr	r5, [pc, #108]	; 1b34c <__assert_fail@plt+0x9ee4>
   1b2dc:	sub	sp, sp, #8
   1b2e0:	mov	r8, r1
   1b2e4:	ldr	r1, [r5]
   1b2e8:	moveq	r7, sp
   1b2ec:	str	r1, [sp, #4]
   1b2f0:	mov	r0, r7
   1b2f4:	mov	r1, r8
   1b2f8:	mov	r6, r2
   1b2fc:	bl	11258 <mbrtowc@plt>
   1b300:	cmp	r6, #0
   1b304:	cmnne	r0, #3
   1b308:	mov	r4, r0
   1b30c:	bhi	1b32c <__assert_fail@plt+0x9ec4>
   1b310:	ldr	r2, [sp, #4]
   1b314:	ldr	r3, [r5]
   1b318:	mov	r0, r4
   1b31c:	cmp	r2, r3
   1b320:	bne	1b348 <__assert_fail@plt+0x9ee0>
   1b324:	add	sp, sp, #8
   1b328:	pop	{r4, r5, r6, r7, r8, pc}
   1b32c:	mov	r0, #0
   1b330:	bl	1b9b0 <__assert_fail@plt+0xa548>
   1b334:	cmp	r0, #0
   1b338:	moveq	r4, #1
   1b33c:	ldrbeq	r3, [r8]
   1b340:	streq	r3, [r7]
   1b344:	b	1b310 <__assert_fail@plt+0x9ea8>
   1b348:	bl	111bc <__stack_chk_fail@plt>
   1b34c:	andeq	r2, r3, r8, lsl #30
   1b350:	subs	r1, r0, #0
   1b354:	beq	1b364 <__assert_fail@plt+0x9efc>
   1b358:	mov	r2, #1
   1b35c:	ldr	r0, [pc, #8]	; 1b36c <__assert_fail@plt+0x9f04>
   1b360:	b	11324 <setenv@plt>
   1b364:	ldr	r0, [pc]	; 1b36c <__assert_fail@plt+0x9f04>
   1b368:	b	11414 <unsetenv@plt>
   1b36c:	ldrdeq	r1, [r2], -r4
   1b370:	cmp	r0, #0
   1b374:	bxeq	lr
   1b378:	push	{r4, lr}
   1b37c:	ldr	r4, [r0]
   1b380:	bl	1115c <free@plt>
   1b384:	subs	r0, r4, #0
   1b388:	bne	1b37c <__assert_fail@plt+0x9f14>
   1b38c:	pop	{r4, pc}
   1b390:	push	{r4, r5, r6, r7, r8, lr}
   1b394:	mov	r5, r0
   1b398:	bl	11330 <__errno_location@plt>
   1b39c:	mov	r4, r0
   1b3a0:	ldrb	r0, [r5, #4]
   1b3a4:	ldr	r6, [r4]
   1b3a8:	cmp	r0, #0
   1b3ac:	addne	r0, r5, #5
   1b3b0:	bl	1b350 <__assert_fail@plt+0x9ee8>
   1b3b4:	cmp	r0, #0
   1b3b8:	beq	1b3d8 <__assert_fail@plt+0x9f70>
   1b3bc:	ldr	r6, [r4]
   1b3c0:	mov	r7, #0
   1b3c4:	mov	r0, r5
   1b3c8:	bl	1b370 <__assert_fail@plt+0x9f08>
   1b3cc:	str	r6, [r4]
   1b3d0:	mov	r0, r7
   1b3d4:	pop	{r4, r5, r6, r7, r8, pc}
   1b3d8:	bl	11204 <tzset@plt>
   1b3dc:	mov	r7, #1
   1b3e0:	b	1b3c4 <__assert_fail@plt+0x9f5c>
   1b3e4:	push	{r4, r5, r6, r7, r8, lr}
   1b3e8:	subs	r6, r0, #0
   1b3ec:	beq	1b448 <__assert_fail@plt+0x9fe0>
   1b3f0:	bl	1130c <strlen@plt>
   1b3f4:	add	r5, r0, #1
   1b3f8:	cmp	r5, #58	; 0x3a
   1b3fc:	movcs	r0, r5
   1b400:	movcc	r0, #58	; 0x3a
   1b404:	add	r0, r0, #9
   1b408:	bic	r0, r0, #3
   1b40c:	bl	11288 <malloc@plt>
   1b410:	subs	r4, r0, #0
   1b414:	beq	1b440 <__assert_fail@plt+0x9fd8>
   1b418:	mov	r7, #0
   1b41c:	mov	r2, #1
   1b420:	add	r3, r4, #5
   1b424:	strh	r2, [r4, #4]
   1b428:	mov	r1, r6
   1b42c:	str	r7, [r4]
   1b430:	mov	r0, r3
   1b434:	mov	r2, r5
   1b438:	bl	11180 <memcpy@plt>
   1b43c:	strb	r7, [r0, r5]
   1b440:	mov	r0, r4
   1b444:	pop	{r4, r5, r6, r7, r8, pc}
   1b448:	mov	r0, #64	; 0x40
   1b44c:	bl	11288 <malloc@plt>
   1b450:	subs	r4, r0, #0
   1b454:	mov	r0, r4
   1b458:	strne	r6, [r4]
   1b45c:	strhne	r6, [r4, #4]
   1b460:	pop	{r4, r5, r6, r7, r8, pc}
   1b464:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b468:	ldr	r7, [r1, #40]	; 0x28
   1b46c:	cmp	r7, #0
   1b470:	beq	1b54c <__assert_fail@plt+0xa0e4>
   1b474:	cmp	r1, r7
   1b478:	mov	r8, r1
   1b47c:	mov	r6, r0
   1b480:	bhi	1b490 <__assert_fail@plt+0xa028>
   1b484:	add	r3, r1, #44	; 0x2c
   1b488:	cmp	r7, r3
   1b48c:	bcc	1b54c <__assert_fail@plt+0xa0e4>
   1b490:	ldrb	r3, [r7]
   1b494:	cmp	r3, #0
   1b498:	addne	r4, r6, #5
   1b49c:	beq	1b544 <__assert_fail@plt+0xa0dc>
   1b4a0:	mov	r1, r7
   1b4a4:	mov	r0, r4
   1b4a8:	bl	1112c <strcmp@plt>
   1b4ac:	add	r5, r6, #5
   1b4b0:	cmp	r0, #0
   1b4b4:	mov	r0, r4
   1b4b8:	beq	1b534 <__assert_fail@plt+0xa0cc>
   1b4bc:	ldrb	r9, [r4]
   1b4c0:	cmp	r9, #0
   1b4c4:	bne	1b4dc <__assert_fail@plt+0xa074>
   1b4c8:	cmp	r5, r4
   1b4cc:	bne	1b558 <__assert_fail@plt+0xa0f0>
   1b4d0:	ldrb	r5, [r6, #4]
   1b4d4:	cmp	r5, #0
   1b4d8:	beq	1b504 <__assert_fail@plt+0xa09c>
   1b4dc:	bl	1130c <strlen@plt>
   1b4e0:	add	r0, r0, #1
   1b4e4:	ldrb	r3, [r4, r0]!
   1b4e8:	cmp	r3, #0
   1b4ec:	bne	1b4a0 <__assert_fail@plt+0xa038>
   1b4f0:	ldr	r3, [r6]
   1b4f4:	cmp	r3, #0
   1b4f8:	addne	r4, r3, #5
   1b4fc:	movne	r6, r3
   1b500:	b	1b4a0 <__assert_fail@plt+0xa038>
   1b504:	mov	r0, r7
   1b508:	bl	1130c <strlen@plt>
   1b50c:	add	sl, r0, #1
   1b510:	add	r5, sl, r5
   1b514:	cmp	r5, #58	; 0x3a
   1b518:	bhi	1b584 <__assert_fail@plt+0xa11c>
   1b51c:	mov	r1, r7
   1b520:	mov	r2, sl
   1b524:	mov	r0, r4
   1b528:	bl	11180 <memcpy@plt>
   1b52c:	mov	r3, #0
   1b530:	strb	r3, [r4, sl]
   1b534:	mov	r9, #1
   1b538:	str	r4, [r8, #40]	; 0x28
   1b53c:	mov	r0, r9
   1b540:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b544:	ldr	r4, [pc, #96]	; 1b5ac <__assert_fail@plt+0xa144>
   1b548:	b	1b534 <__assert_fail@plt+0xa0cc>
   1b54c:	mov	r9, #1
   1b550:	mov	r0, r9
   1b554:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b558:	mov	r0, r7
   1b55c:	bl	1130c <strlen@plt>
   1b560:	sub	r5, r4, r5
   1b564:	mvn	r3, r5
   1b568:	add	sl, r0, #1
   1b56c:	cmp	r3, sl
   1b570:	bcs	1b510 <__assert_fail@plt+0xa0a8>
   1b574:	bl	11330 <__errno_location@plt>
   1b578:	mov	r3, #12
   1b57c:	str	r3, [r0]
   1b580:	b	1b53c <__assert_fail@plt+0xa0d4>
   1b584:	mov	r0, r7
   1b588:	bl	1b3e4 <__assert_fail@plt+0x9f7c>
   1b58c:	cmp	r0, #0
   1b590:	str	r0, [r6]
   1b594:	moveq	r9, r0
   1b598:	beq	1b53c <__assert_fail@plt+0xa0d4>
   1b59c:	mov	r3, #0
   1b5a0:	strb	r3, [r0, #4]
   1b5a4:	add	r4, r0, #5
   1b5a8:	b	1b534 <__assert_fail@plt+0xa0cc>
   1b5ac:			; <UNDEFINED> instruction: 0x000218bc
   1b5b0:	push	{r4, r5, r6, lr}
   1b5b4:	mov	r4, r0
   1b5b8:	ldr	r0, [pc, #160]	; 1b660 <__assert_fail@plt+0xa1f8>
   1b5bc:	bl	1127c <getenv@plt>
   1b5c0:	ldrb	r3, [r4, #4]
   1b5c4:	subs	r5, r0, #0
   1b5c8:	beq	1b648 <__assert_fail@plt+0xa1e0>
   1b5cc:	cmp	r3, #0
   1b5d0:	bne	1b628 <__assert_fail@plt+0xa1c0>
   1b5d4:	mov	r0, r5
   1b5d8:	bl	1b3e4 <__assert_fail@plt+0x9f7c>
   1b5dc:	subs	r5, r0, #0
   1b5e0:	beq	1b640 <__assert_fail@plt+0xa1d8>
   1b5e4:	ldrb	r0, [r4, #4]
   1b5e8:	cmp	r0, #0
   1b5ec:	addne	r0, r4, #5
   1b5f0:	bl	1b350 <__assert_fail@plt+0x9ee8>
   1b5f4:	cmp	r0, #0
   1b5f8:	beq	1b654 <__assert_fail@plt+0xa1ec>
   1b5fc:	bl	11330 <__errno_location@plt>
   1b600:	cmp	r5, #1
   1b604:	mov	r4, r0
   1b608:	ldr	r6, [r0]
   1b60c:	beq	1b618 <__assert_fail@plt+0xa1b0>
   1b610:	mov	r0, r5
   1b614:	bl	1b370 <__assert_fail@plt+0x9f08>
   1b618:	mov	r5, #0
   1b61c:	str	r6, [r4]
   1b620:	mov	r0, r5
   1b624:	pop	{r4, r5, r6, pc}
   1b628:	mov	r1, r5
   1b62c:	add	r0, r4, #5
   1b630:	bl	1112c <strcmp@plt>
   1b634:	cmp	r0, #0
   1b638:	bne	1b5d4 <__assert_fail@plt+0xa16c>
   1b63c:	mov	r5, #1
   1b640:	mov	r0, r5
   1b644:	pop	{r4, r5, r6, pc}
   1b648:	cmp	r3, #0
   1b64c:	beq	1b63c <__assert_fail@plt+0xa1d4>
   1b650:	b	1b5d4 <__assert_fail@plt+0xa16c>
   1b654:	bl	11204 <tzset@plt>
   1b658:	mov	r0, r5
   1b65c:	pop	{r4, r5, r6, pc}
   1b660:	ldrdeq	r1, [r2], -r4
   1b664:	cmp	r0, #1
   1b668:	bxeq	lr
   1b66c:	b	1b370 <__assert_fail@plt+0x9f08>
   1b670:	subs	ip, r0, #0
   1b674:	push	{r4, r5, r6, r7, r8, lr}
   1b678:	mov	r5, r1
   1b67c:	beq	1b6fc <__assert_fail@plt+0xa294>
   1b680:	mov	r4, r2
   1b684:	mov	r6, ip
   1b688:	bl	1b5b0 <__assert_fail@plt+0xa148>
   1b68c:	subs	r7, r0, #0
   1b690:	beq	1b6dc <__assert_fail@plt+0xa274>
   1b694:	mov	r0, r5
   1b698:	mov	r1, r4
   1b69c:	bl	111e0 <localtime_r@plt>
   1b6a0:	cmp	r0, #0
   1b6a4:	beq	1b6cc <__assert_fail@plt+0xa264>
   1b6a8:	mov	r0, r6
   1b6ac:	mov	r1, r4
   1b6b0:	bl	1b464 <__assert_fail@plt+0x9ffc>
   1b6b4:	cmp	r0, #0
   1b6b8:	beq	1b6cc <__assert_fail@plt+0xa264>
   1b6bc:	cmp	r7, #1
   1b6c0:	bne	1b6e4 <__assert_fail@plt+0xa27c>
   1b6c4:	mov	r0, r4
   1b6c8:	pop	{r4, r5, r6, r7, r8, pc}
   1b6cc:	cmp	r7, #1
   1b6d0:	beq	1b6dc <__assert_fail@plt+0xa274>
   1b6d4:	mov	r0, r7
   1b6d8:	bl	1b390 <__assert_fail@plt+0x9f28>
   1b6dc:	mov	r0, #0
   1b6e0:	pop	{r4, r5, r6, r7, r8, pc}
   1b6e4:	mov	r0, r7
   1b6e8:	bl	1b390 <__assert_fail@plt+0x9f28>
   1b6ec:	cmp	r0, #0
   1b6f0:	beq	1b6dc <__assert_fail@plt+0xa274>
   1b6f4:	mov	r0, r4
   1b6f8:	pop	{r4, r5, r6, r7, r8, pc}
   1b6fc:	mov	r0, r5
   1b700:	mov	r1, r2
   1b704:	pop	{r4, r5, r6, r7, r8, lr}
   1b708:	b	11114 <gmtime_r@plt>
   1b70c:	push	{r4, r5, r6, r7, lr}
   1b710:	sub	sp, sp, #60	; 0x3c
   1b714:	ldr	r5, [pc, #312]	; 1b854 <__assert_fail@plt+0xa3ec>
   1b718:	subs	r7, r0, #0
   1b71c:	mov	r4, r1
   1b720:	ldr	r3, [r5]
   1b724:	str	r3, [sp, #52]	; 0x34
   1b728:	beq	1b83c <__assert_fail@plt+0xa3d4>
   1b72c:	bl	1b5b0 <__assert_fail@plt+0xa148>
   1b730:	subs	r6, r0, #0
   1b734:	beq	1b848 <__assert_fail@plt+0xa3e0>
   1b738:	mov	r0, r4
   1b73c:	bl	11144 <mktime@plt>
   1b740:	cmn	r0, #1
   1b744:	str	r0, [sp, #4]
   1b748:	beq	1b798 <__assert_fail@plt+0xa330>
   1b74c:	mov	r1, r4
   1b750:	mov	r0, r7
   1b754:	bl	1b464 <__assert_fail@plt+0x9ffc>
   1b758:	cmp	r0, #0
   1b75c:	mvneq	r3, #0
   1b760:	streq	r3, [sp, #4]
   1b764:	cmp	r6, #1
   1b768:	beq	1b77c <__assert_fail@plt+0xa314>
   1b76c:	mov	r0, r6
   1b770:	bl	1b390 <__assert_fail@plt+0x9f28>
   1b774:	cmp	r0, #0
   1b778:	beq	1b848 <__assert_fail@plt+0xa3e0>
   1b77c:	ldr	r0, [sp, #4]
   1b780:	ldr	r2, [sp, #52]	; 0x34
   1b784:	ldr	r3, [r5]
   1b788:	cmp	r2, r3
   1b78c:	bne	1b850 <__assert_fail@plt+0xa3e8>
   1b790:	add	sp, sp, #60	; 0x3c
   1b794:	pop	{r4, r5, r6, r7, pc}
   1b798:	add	r1, sp, #8
   1b79c:	add	r0, sp, #4
   1b7a0:	bl	111e0 <localtime_r@plt>
   1b7a4:	cmp	r0, #0
   1b7a8:	beq	1b764 <__assert_fail@plt+0xa2fc>
   1b7ac:	ldr	r0, [r4, #32]
   1b7b0:	ldr	r1, [sp, #40]	; 0x28
   1b7b4:	clz	r2, r0
   1b7b8:	clz	r3, r1
   1b7bc:	lsr	r2, r2, #5
   1b7c0:	lsr	r3, r3, #5
   1b7c4:	cmp	r2, r3
   1b7c8:	beq	1b7d8 <__assert_fail@plt+0xa370>
   1b7cc:	cmp	r0, #0
   1b7d0:	cmpge	r1, #0
   1b7d4:	bge	1b764 <__assert_fail@plt+0xa2fc>
   1b7d8:	ldr	r1, [sp, #24]
   1b7dc:	ldr	r0, [sp, #28]
   1b7e0:	ldr	r3, [r4, #16]
   1b7e4:	ldr	r2, [r4, #20]
   1b7e8:	eor	r3, r3, r1
   1b7ec:	eor	r2, r2, r0
   1b7f0:	ldr	r1, [r4, #12]
   1b7f4:	ldr	r0, [sp, #20]
   1b7f8:	orr	r3, r3, r2
   1b7fc:	eor	r1, r1, r0
   1b800:	ldr	r2, [r4, #8]
   1b804:	ldr	r0, [sp, #16]
   1b808:	orr	r3, r3, r1
   1b80c:	eor	r2, r2, r0
   1b810:	ldr	r1, [r4, #4]
   1b814:	ldr	r0, [sp, #12]
   1b818:	orr	r3, r3, r2
   1b81c:	eor	r1, r1, r0
   1b820:	ldr	r2, [r4]
   1b824:	ldr	r0, [sp, #8]
   1b828:	orr	r3, r3, r1
   1b82c:	eor	r2, r2, r0
   1b830:	orrs	r3, r3, r2
   1b834:	beq	1b74c <__assert_fail@plt+0xa2e4>
   1b838:	b	1b764 <__assert_fail@plt+0xa2fc>
   1b83c:	mov	r0, r1
   1b840:	bl	113e4 <timegm@plt>
   1b844:	b	1b780 <__assert_fail@plt+0xa318>
   1b848:	mvn	r0, #0
   1b84c:	b	1b780 <__assert_fail@plt+0xa318>
   1b850:	bl	111bc <__stack_chk_fail@plt>
   1b854:	andeq	r2, r3, r8, lsl #30
   1b858:	push	{r4, r5, r6, r7, r8, lr}
   1b85c:	sub	sp, sp, #2000	; 0x7d0
   1b860:	ldr	r5, [pc, #208]	; 1b938 <__assert_fail@plt+0xa4d0>
   1b864:	sub	sp, sp, #8
   1b868:	add	r6, sp, #4
   1b86c:	ldr	lr, [r5]
   1b870:	mov	r3, r2
   1b874:	mov	ip, #2000	; 0x7d0
   1b878:	mov	r2, r1
   1b87c:	mov	r8, r0
   1b880:	mov	r1, sp
   1b884:	mov	r0, r6
   1b888:	str	lr, [sp, #2004]	; 0x7d4
   1b88c:	str	ip, [sp]
   1b890:	bl	1d3e4 <__assert_fail@plt+0xbf7c>
   1b894:	ldr	r4, [sp]
   1b898:	subs	r7, r0, #0
   1b89c:	beq	1b924 <__assert_fail@plt+0xa4bc>
   1b8a0:	mov	r3, r8
   1b8a4:	mov	r2, r4
   1b8a8:	mov	r1, #1
   1b8ac:	bl	11210 <fwrite@plt>
   1b8b0:	cmp	r0, r4
   1b8b4:	bcc	1b8ec <__assert_fail@plt+0xa484>
   1b8b8:	cmp	r7, r6
   1b8bc:	beq	1b8c8 <__assert_fail@plt+0xa460>
   1b8c0:	mov	r0, r7
   1b8c4:	bl	1115c <free@plt>
   1b8c8:	subs	r0, r4, #0
   1b8cc:	blt	1b918 <__assert_fail@plt+0xa4b0>
   1b8d0:	ldr	r2, [sp, #2004]	; 0x7d4
   1b8d4:	ldr	r3, [r5]
   1b8d8:	cmp	r2, r3
   1b8dc:	bne	1b934 <__assert_fail@plt+0xa4cc>
   1b8e0:	add	sp, sp, #2000	; 0x7d0
   1b8e4:	add	sp, sp, #8
   1b8e8:	pop	{r4, r5, r6, r7, r8, pc}
   1b8ec:	cmp	r7, r6
   1b8f0:	mvneq	r0, #0
   1b8f4:	beq	1b8d0 <__assert_fail@plt+0xa468>
   1b8f8:	bl	11330 <__errno_location@plt>
   1b8fc:	mov	r4, r0
   1b900:	mov	r0, r7
   1b904:	ldr	r6, [r4]
   1b908:	bl	1115c <free@plt>
   1b90c:	str	r6, [r4]
   1b910:	mvn	r0, #0
   1b914:	b	1b8d0 <__assert_fail@plt+0xa468>
   1b918:	bl	11330 <__errno_location@plt>
   1b91c:	mov	r3, #75	; 0x4b
   1b920:	str	r3, [r0]
   1b924:	mov	r0, r8
   1b928:	bl	1d3d4 <__assert_fail@plt+0xbf6c>
   1b92c:	mvn	r0, #0
   1b930:	b	1b8d0 <__assert_fail@plt+0xa468>
   1b934:	bl	111bc <__stack_chk_fail@plt>
   1b938:	andeq	r2, r3, r8, lsl #30
   1b93c:	push	{r4, r5, r6, lr}
   1b940:	mov	r4, r0
   1b944:	bl	1124c <__fpending@plt>
   1b948:	ldr	r5, [r4]
   1b94c:	and	r5, r5, #32
   1b950:	mov	r6, r0
   1b954:	mov	r0, r4
   1b958:	bl	1d234 <__assert_fail@plt+0xbdcc>
   1b95c:	cmp	r5, #0
   1b960:	mov	r4, r0
   1b964:	bne	1b990 <__assert_fail@plt+0xa528>
   1b968:	cmp	r0, #0
   1b96c:	beq	1b988 <__assert_fail@plt+0xa520>
   1b970:	cmp	r6, #0
   1b974:	bne	1b9a8 <__assert_fail@plt+0xa540>
   1b978:	bl	11330 <__errno_location@plt>
   1b97c:	ldr	r4, [r0]
   1b980:	subs	r4, r4, #9
   1b984:	mvnne	r4, #0
   1b988:	mov	r0, r4
   1b98c:	pop	{r4, r5, r6, pc}
   1b990:	cmp	r0, #0
   1b994:	bne	1b9a8 <__assert_fail@plt+0xa540>
   1b998:	bl	11330 <__errno_location@plt>
   1b99c:	str	r4, [r0]
   1b9a0:	mvn	r4, #0
   1b9a4:	b	1b988 <__assert_fail@plt+0xa520>
   1b9a8:	mvn	r4, #0
   1b9ac:	b	1b988 <__assert_fail@plt+0xa520>
   1b9b0:	push	{r4, lr}
   1b9b4:	mov	r1, #0
   1b9b8:	bl	113b4 <setlocale@plt>
   1b9bc:	subs	r4, r0, #0
   1b9c0:	beq	1b9ec <__assert_fail@plt+0xa584>
   1b9c4:	ldr	r1, [pc, #40]	; 1b9f4 <__assert_fail@plt+0xa58c>
   1b9c8:	bl	1112c <strcmp@plt>
   1b9cc:	cmp	r0, #0
   1b9d0:	popeq	{r4, pc}
   1b9d4:	mov	r0, r4
   1b9d8:	ldr	r1, [pc, #24]	; 1b9f8 <__assert_fail@plt+0xa590>
   1b9dc:	bl	1112c <strcmp@plt>
   1b9e0:	adds	r0, r0, #0
   1b9e4:	movne	r0, #1
   1b9e8:	pop	{r4, pc}
   1b9ec:	mov	r0, #1
   1b9f0:	pop	{r4, pc}
   1b9f4:	andeq	r1, r2, r0, ror #17
   1b9f8:	andeq	r2, r2, ip, lsl r0
   1b9fc:	push	{r4, lr}
   1ba00:	mov	r0, #14
   1ba04:	bl	113cc <nl_langinfo@plt>
   1ba08:	cmp	r0, #0
   1ba0c:	beq	1ba24 <__assert_fail@plt+0xa5bc>
   1ba10:	ldrb	r2, [r0]
   1ba14:	ldr	r3, [pc, #16]	; 1ba2c <__assert_fail@plt+0xa5c4>
   1ba18:	cmp	r2, #0
   1ba1c:	moveq	r0, r3
   1ba20:	pop	{r4, pc}
   1ba24:	ldr	r0, [pc]	; 1ba2c <__assert_fail@plt+0xa5c4>
   1ba28:	pop	{r4, pc}
   1ba2c:	andeq	r2, r2, r4, lsr #32
   1ba30:	push	{r4, r5, r6, lr}
   1ba34:	subs	r4, r2, #0
   1ba38:	mov	r6, r0
   1ba3c:	beq	1ba68 <__assert_fail@plt+0xa600>
   1ba40:	mov	r5, r1
   1ba44:	bl	112c4 <__ctype_tolower_loc@plt>
   1ba48:	add	r3, r5, r4
   1ba4c:	add	r2, r6, r4
   1ba50:	ldrb	lr, [r3, #-1]!
   1ba54:	ldr	ip, [r0]
   1ba58:	cmp	r5, r3
   1ba5c:	ldr	ip, [ip, lr, lsl #2]
   1ba60:	strb	ip, [r2, #-1]!
   1ba64:	bne	1ba50 <__assert_fail@plt+0xa5e8>
   1ba68:	mov	r0, r6
   1ba6c:	pop	{r4, r5, r6, pc}
   1ba70:	push	{r4, r5, r6, lr}
   1ba74:	subs	r4, r2, #0
   1ba78:	mov	r6, r0
   1ba7c:	beq	1baa8 <__assert_fail@plt+0xa640>
   1ba80:	mov	r5, r1
   1ba84:	bl	112d0 <__ctype_toupper_loc@plt>
   1ba88:	add	r3, r5, r4
   1ba8c:	add	r2, r6, r4
   1ba90:	ldrb	lr, [r3, #-1]!
   1ba94:	ldr	ip, [r0]
   1ba98:	cmp	r5, r3
   1ba9c:	ldr	ip, [ip, lr, lsl #2]
   1baa0:	strb	ip, [r2, #-1]!
   1baa4:	bne	1ba90 <__assert_fail@plt+0xa628>
   1baa8:	mov	r0, r6
   1baac:	pop	{r4, r5, r6, pc}
   1bab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bab4:	sub	sp, sp, #1136	; 0x470
   1bab8:	sub	sp, sp, #12
   1babc:	ldr	r7, [r3, #40]	; 0x28
   1bac0:	ldr	r8, [r3, #8]
   1bac4:	str	r3, [sp, #28]
   1bac8:	ldr	r3, [pc, #4012]	; 1ca7c <__assert_fail@plt+0xb614>
   1bacc:	ldr	ip, [pc, #4012]	; 1ca80 <__assert_fail@plt+0xb618>
   1bad0:	cmp	r7, #0
   1bad4:	ldr	r3, [r3]
   1bad8:	moveq	r7, ip
   1badc:	str	r3, [sp, #1140]	; 0x474
   1bae0:	ldrb	r3, [sp, #1184]	; 0x4a0
   1bae4:	cmp	r8, #12
   1bae8:	mov	r9, r0
   1baec:	str	r3, [sp, #24]
   1baf0:	ldr	r3, [sp, #1188]	; 0x4a4
   1baf4:	str	r1, [sp, #16]
   1baf8:	str	r3, [sp, #36]	; 0x24
   1bafc:	ldr	r3, [sp, #1192]	; 0x4a8
   1bb00:	mov	r5, r2
   1bb04:	str	r3, [sp, #32]
   1bb08:	subgt	r8, r8, #12
   1bb0c:	bgt	1bb18 <__assert_fail@plt+0xa6b0>
   1bb10:	cmp	r8, #0
   1bb14:	moveq	r8, #12
   1bb18:	ldrb	r3, [r5]
   1bb1c:	cmp	r3, #0
   1bb20:	beq	1ce1c <__assert_fail@plt+0xb9b4>
   1bb24:	mov	fp, #0
   1bb28:	str	r8, [sp, #44]	; 0x2c
   1bb2c:	str	r7, [sp, #40]	; 0x28
   1bb30:	cmp	r3, #37	; 0x25
   1bb34:	beq	1bbb4 <__assert_fail@plt+0xa74c>
   1bb38:	ldr	r2, [sp, #16]
   1bb3c:	sub	r2, r2, fp
   1bb40:	cmp	r2, #1
   1bb44:	bls	1bb8c <__assert_fail@plt+0xa724>
   1bb48:	add	fp, fp, #1
   1bb4c:	cmp	r9, #0
   1bb50:	strbne	r3, [r9], #1
   1bb54:	ldrb	r3, [r5, #1]
   1bb58:	add	r5, r5, #1
   1bb5c:	cmp	r3, #0
   1bb60:	bne	1bb30 <__assert_fail@plt+0xa6c8>
   1bb64:	ldr	r3, [sp, #16]
   1bb68:	cmp	r9, #0
   1bb6c:	cmpne	r3, #0
   1bb70:	movne	r3, #0
   1bb74:	strbne	r3, [r9]
   1bb78:	b	1bb90 <__assert_fail@plt+0xa728>
   1bb7c:	cmp	sl, #95	; 0x5f
   1bb80:	beq	1cea8 <__assert_fail@plt+0xba40>
   1bb84:	cmp	r3, r2
   1bb88:	bcc	1c6d0 <__assert_fail@plt+0xb268>
   1bb8c:	mov	fp, #0
   1bb90:	ldr	r3, [pc, #3812]	; 1ca7c <__assert_fail@plt+0xb614>
   1bb94:	ldr	r2, [sp, #1140]	; 0x474
   1bb98:	mov	r0, fp
   1bb9c:	ldr	r3, [r3]
   1bba0:	cmp	r2, r3
   1bba4:	bne	1d1b4 <__assert_fail@plt+0xbd4c>
   1bba8:	add	sp, sp, #1136	; 0x470
   1bbac:	add	sp, sp, #12
   1bbb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbb4:	mov	r8, #0
   1bbb8:	ldr	r3, [sp, #24]
   1bbbc:	mov	sl, r8
   1bbc0:	str	r3, [sp, #20]
   1bbc4:	ldrb	r4, [r5, #1]!
   1bbc8:	cmp	r4, #48	; 0x30
   1bbcc:	mov	r7, r4
   1bbd0:	beq	1be20 <__assert_fail@plt+0xa9b8>
   1bbd4:	bhi	1be08 <__assert_fail@plt+0xa9a0>
   1bbd8:	cmp	r4, #35	; 0x23
   1bbdc:	moveq	r8, #1
   1bbe0:	beq	1bbc4 <__assert_fail@plt+0xa75c>
   1bbe4:	cmp	r4, #45	; 0x2d
   1bbe8:	beq	1be20 <__assert_fail@plt+0xa9b8>
   1bbec:	sub	r3, r4, #48	; 0x30
   1bbf0:	cmp	r3, #9
   1bbf4:	mvnhi	r6, #0
   1bbf8:	bls	1be34 <__assert_fail@plt+0xa9cc>
   1bbfc:	cmp	r4, #69	; 0x45
   1bc00:	beq	1be28 <__assert_fail@plt+0xa9c0>
   1bc04:	cmp	r4, #79	; 0x4f
   1bc08:	movne	r7, #0
   1bc0c:	beq	1be28 <__assert_fail@plt+0xa9c0>
   1bc10:	cmp	r4, #122	; 0x7a
   1bc14:	ldrls	pc, [pc, r4, lsl #2]
   1bc18:	b	1c1f0 <__assert_fail@plt+0xad88>
   1bc1c:	strdeq	ip, [r1], -r0
   1bc20:	strdeq	ip, [r1], -r0
   1bc24:	strdeq	ip, [r1], -r0
   1bc28:	strdeq	ip, [r1], -r0
   1bc2c:	strdeq	ip, [r1], -r0
   1bc30:	strdeq	ip, [r1], -r0
   1bc34:	strdeq	ip, [r1], -r0
   1bc38:	strdeq	ip, [r1], -r0
   1bc3c:	strdeq	ip, [r1], -r0
   1bc40:	strdeq	ip, [r1], -r0
   1bc44:	strdeq	ip, [r1], -r0
   1bc48:	strdeq	ip, [r1], -r0
   1bc4c:	strdeq	ip, [r1], -r0
   1bc50:	strdeq	ip, [r1], -r0
   1bc54:	strdeq	ip, [r1], -r0
   1bc58:	strdeq	ip, [r1], -r0
   1bc5c:	strdeq	ip, [r1], -r0
   1bc60:	strdeq	ip, [r1], -r0
   1bc64:	strdeq	ip, [r1], -r0
   1bc68:	strdeq	ip, [r1], -r0
   1bc6c:	strdeq	ip, [r1], -r0
   1bc70:	strdeq	ip, [r1], -r0
   1bc74:	strdeq	ip, [r1], -r0
   1bc78:	strdeq	ip, [r1], -r0
   1bc7c:	strdeq	ip, [r1], -r0
   1bc80:	strdeq	ip, [r1], -r0
   1bc84:	strdeq	ip, [r1], -r0
   1bc88:	strdeq	ip, [r1], -r0
   1bc8c:	strdeq	ip, [r1], -r0
   1bc90:	strdeq	ip, [r1], -r0
   1bc94:	strdeq	ip, [r1], -r0
   1bc98:	strdeq	ip, [r1], -r0
   1bc9c:	strdeq	ip, [r1], -r0
   1bca0:	strdeq	ip, [r1], -r0
   1bca4:	strdeq	ip, [r1], -r0
   1bca8:	strdeq	ip, [r1], -r0
   1bcac:	strdeq	ip, [r1], -r0
   1bcb0:	andeq	ip, r1, r4, lsr #24
   1bcb4:	strdeq	ip, [r1], -r0
   1bcb8:	strdeq	ip, [r1], -r0
   1bcbc:	strdeq	ip, [r1], -r0
   1bcc0:	strdeq	ip, [r1], -r0
   1bcc4:	strdeq	ip, [r1], -r0
   1bcc8:	strdeq	ip, [r1], -r0
   1bccc:	strdeq	ip, [r1], -r0
   1bcd0:	strdeq	ip, [r1], -r0
   1bcd4:	strdeq	ip, [r1], -r0
   1bcd8:	strdeq	ip, [r1], -r0
   1bcdc:	strdeq	ip, [r1], -r0
   1bce0:	strdeq	ip, [r1], -r0
   1bce4:	strdeq	ip, [r1], -r0
   1bce8:	strdeq	ip, [r1], -r0
   1bcec:	strdeq	ip, [r1], -r0
   1bcf0:	strdeq	ip, [r1], -r0
   1bcf4:	strdeq	ip, [r1], -r0
   1bcf8:	strdeq	ip, [r1], -r0
   1bcfc:	strdeq	ip, [r1], -r0
   1bd00:	strdeq	ip, [r1], -r0
   1bd04:	andeq	ip, r1, r8, lsl #25
   1bd08:	strdeq	ip, [r1], -r0
   1bd0c:	strdeq	ip, [r1], -r0
   1bd10:	strdeq	ip, [r1], -r0
   1bd14:	strdeq	ip, [r1], -r0
   1bd18:	strdeq	ip, [r1], -r0
   1bd1c:	strdeq	ip, [r1], -r0
   1bd20:	andeq	fp, r1, r8, lsr #31
   1bd24:	andeq	ip, r1, r8, asr #22
   1bd28:	andeq	ip, r1, ip, ror #22
   1bd2c:	andeq	ip, r1, r8, lsl #16
   1bd30:	strdeq	ip, [r1], -r0
   1bd34:	andeq	ip, r1, ip, lsl r8
   1bd38:	andeq	ip, r1, r0, lsr r8
   1bd3c:	muleq	r1, r8, r9
   1bd40:	andeq	ip, r1, r4, lsr #20
   1bd44:	strdeq	ip, [r1], -r0
   1bd48:	strdeq	ip, [r1], -r0
   1bd4c:	strdeq	ip, [r1], -r0
   1bd50:			; <UNDEFINED> instruction: 0x0001c9b4
   1bd54:	ldrdeq	ip, [r1], -r0
   1bd58:	strdeq	ip, [r1], -r0
   1bd5c:			; <UNDEFINED> instruction: 0x0001ccb0
   1bd60:	strdeq	ip, [r1], -r0
   1bd64:	andeq	ip, r1, r4, lsr #8
   1bd68:	strdeq	ip, [r1], -r4
   1bd6c:			; <UNDEFINED> instruction: 0x0001ccbc
   1bd70:	andeq	ip, r1, r0, lsl r5
   1bd74:	andeq	ip, r1, r0, lsr r8
   1bd78:			; <UNDEFINED> instruction: 0x0001c7b4
   1bd7c:	andeq	fp, r1, r4, lsr #29
   1bd80:	andeq	ip, r1, r8, asr #10
   1bd84:	andeq	ip, r1, r4, lsl r7
   1bd88:	strdeq	ip, [r1], -r0
   1bd8c:	strdeq	ip, [r1], -r0
   1bd90:	strdeq	ip, [r1], -r0
   1bd94:	strdeq	ip, [r1], -r0
   1bd98:	strdeq	ip, [r1], -r0
   1bd9c:	strdeq	ip, [r1], -r0
   1bda0:	andeq	fp, r1, r8, lsr #31
   1bda4:	ldrdeq	ip, [r1], -r8
   1bda8:	andeq	fp, r1, r4, lsr #29
   1bdac:	andeq	ip, r1, r8, lsl #7
   1bdb0:	andeq	ip, r1, r4, lsr #7
   1bdb4:	strdeq	ip, [r1], -r0
   1bdb8:	andeq	ip, r1, r0, lsr r8
   1bdbc:	ldrdeq	ip, [r1], -r8
   1bdc0:	strdeq	ip, [r1], -r0
   1bdc4:	andeq	ip, r1, ip, asr #7
   1bdc8:	andeq	ip, r1, r0, lsl #8
   1bdcc:	andeq	ip, r1, r4, lsl r4
   1bdd0:	strdeq	ip, [r1], -r0
   1bdd4:	andeq	ip, r1, r8, lsr #6
   1bdd8:	strdeq	ip, [r1], -r0
   1bddc:	andeq	ip, r1, ip, lsl fp
   1bde0:	andeq	ip, r1, ip, lsr sl
   1bde4:	andeq	fp, r1, ip, lsr #29
   1bde8:	andeq	ip, r1, r8, asr r0
   1bdec:	andeq	ip, r1, r0, asr #21
   1bdf0:	ldrdeq	fp, [r1], -ip
   1bdf4:	strdeq	ip, [r1], -r0
   1bdf8:	ldrdeq	ip, [r1], -r4
   1bdfc:	andeq	fp, r1, r4, lsr #29
   1be00:	muleq	r1, ip, r1
   1be04:	andeq	ip, r1, r4, lsl #5
   1be08:	cmp	r4, #94	; 0x5e
   1be0c:	moveq	r3, #1
   1be10:	streq	r3, [sp, #20]
   1be14:	beq	1bbc4 <__assert_fail@plt+0xa75c>
   1be18:	cmp	r4, #95	; 0x5f
   1be1c:	bne	1bbec <__assert_fail@plt+0xa784>
   1be20:	mov	sl, r4
   1be24:	b	1bbc4 <__assert_fail@plt+0xa75c>
   1be28:	ldrb	r4, [r5, #1]
   1be2c:	add	r5, r5, #1
   1be30:	b	1bc10 <__assert_fail@plt+0xa7a8>
   1be34:	ldr	r0, [pc, #3144]	; 1ca84 <__assert_fail@plt+0xb61c>
   1be38:	mov	r6, #0
   1be3c:	mov	r3, r5
   1be40:	cmp	r6, r0
   1be44:	ldrb	r4, [r3, #1]!
   1be48:	sub	r2, r4, #48	; 0x30
   1be4c:	bgt	1be80 <__assert_fail@plt+0xaa18>
   1be50:	ldrb	r1, [r5]
   1be54:	beq	1be78 <__assert_fail@plt+0xaa10>
   1be58:	add	r6, r6, r6, lsl #2
   1be5c:	sub	r1, r1, #48	; 0x30
   1be60:	add	r6, r1, r6, lsl #1
   1be64:	mov	r5, r3
   1be68:	cmp	r2, #9
   1be6c:	bls	1be3c <__assert_fail@plt+0xa9d4>
   1be70:	mov	r7, r4
   1be74:	b	1bbfc <__assert_fail@plt+0xa794>
   1be78:	cmp	r1, #55	; 0x37
   1be7c:	bls	1be58 <__assert_fail@plt+0xa9f0>
   1be80:	cmp	r2, #9
   1be84:	ldrbls	r4, [r5, #2]!
   1be88:	mvnls	r6, #-2147483648	; 0x80000000
   1be8c:	subls	r2, r4, #48	; 0x30
   1be90:	bls	1be68 <__assert_fail@plt+0xaa00>
   1be94:	mov	r5, r3
   1be98:	mov	r7, r4
   1be9c:	mvn	r6, #-2147483648	; 0x80000000
   1bea0:	b	1bbfc <__assert_fail@plt+0xa794>
   1bea4:	cmp	r7, #79	; 0x4f
   1bea8:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1beac:	mov	r3, #0
   1beb0:	str	r3, [sp, #52]	; 0x34
   1beb4:	add	r8, sp, #120	; 0x78
   1beb8:	ldr	r3, [pc, #3016]	; 1ca88 <__assert_fail@plt+0xb620>
   1bebc:	cmp	r7, #0
   1bec0:	strh	r3, [r8, #-12]
   1bec4:	subeq	r0, r8, #10
   1bec8:	bne	1d1b8 <__assert_fail@plt+0xbd50>
   1becc:	mov	ip, #0
   1bed0:	strb	r4, [r0]
   1bed4:	strb	ip, [r0, #1]
   1bed8:	ldr	r3, [sp, #28]
   1bedc:	sub	r2, r8, #12
   1bee0:	mov	r1, #1024	; 0x400
   1bee4:	sub	r0, r8, #4
   1bee8:	bl	112a0 <strftime@plt>
   1beec:	cmp	r0, #0
   1bef0:	beq	1bb54 <__assert_fail@plt+0xa6ec>
   1bef4:	bic	r2, r6, r6, asr #31
   1bef8:	sub	r4, r0, #1
   1befc:	ldr	r1, [sp, #16]
   1bf00:	cmp	r4, r2
   1bf04:	movcs	r3, r4
   1bf08:	movcc	r3, r2
   1bf0c:	sub	r1, r1, fp
   1bf10:	cmp	r1, r3
   1bf14:	bls	1bb8c <__assert_fail@plt+0xa724>
   1bf18:	cmp	r9, #0
   1bf1c:	beq	1bfa0 <__assert_fail@plt+0xab38>
   1bf20:	cmp	r4, r2
   1bf24:	movcs	r2, #0
   1bf28:	movcc	r2, #1
   1bf2c:	cmp	r7, #0
   1bf30:	moveq	r7, r2
   1bf34:	movne	r7, #0
   1bf38:	cmp	r7, #0
   1bf3c:	beq	1bf6c <__assert_fail@plt+0xab04>
   1bf40:	cmp	sl, #48	; 0x30
   1bf44:	sub	r2, r6, r4
   1bf48:	moveq	r0, r9
   1bf4c:	movne	r0, r9
   1bf50:	moveq	r1, sl
   1bf54:	movne	r1, #32
   1bf58:	str	r3, [sp, #48]	; 0x30
   1bf5c:	add	r7, r9, r2
   1bf60:	bl	11360 <memset@plt>
   1bf64:	ldr	r3, [sp, #48]	; 0x30
   1bf68:	mov	r9, r7
   1bf6c:	ldr	r2, [sp, #52]	; 0x34
   1bf70:	cmp	r2, #0
   1bf74:	bne	1ce00 <__assert_fail@plt+0xb998>
   1bf78:	ldr	r2, [sp, #20]
   1bf7c:	sub	r1, r8, #3
   1bf80:	cmp	r2, #0
   1bf84:	str	r3, [sp, #20]
   1bf88:	mov	r2, r4
   1bf8c:	mov	r0, r9
   1bf90:	beq	1cdf4 <__assert_fail@plt+0xb98c>
   1bf94:	bl	1ba70 <__assert_fail@plt+0xa608>
   1bf98:	ldr	r3, [sp, #20]
   1bf9c:	add	r9, r9, r4
   1bfa0:	add	fp, fp, r3
   1bfa4:	b	1bb54 <__assert_fail@plt+0xa6ec>
   1bfa8:	cmp	r7, #0
   1bfac:	bne	1c1f0 <__assert_fail@plt+0xad88>
   1bfb0:	cmp	r8, #0
   1bfb4:	ldr	r3, [sp, #20]
   1bfb8:	movne	r3, r8
   1bfbc:	str	r3, [sp, #20]
   1bfc0:	add	r8, sp, #120	; 0x78
   1bfc4:	ldr	r3, [pc, #2748]	; 1ca88 <__assert_fail@plt+0xb620>
   1bfc8:	mov	r7, #0
   1bfcc:	str	r7, [sp, #52]	; 0x34
   1bfd0:	strh	r3, [r8, #-12]
   1bfd4:	sub	r0, r8, #10
   1bfd8:	b	1becc <__assert_fail@plt+0xaa64>
   1bfdc:	ldr	r3, [sp, #28]
   1bfe0:	mov	r2, #1
   1bfe4:	str	r2, [sp, #48]	; 0x30
   1bfe8:	ldr	r3, [r3, #24]
   1bfec:	ldr	r2, [pc, #2756]	; 1cab8 <__assert_fail@plt+0xb650>
   1bff0:	add	r3, r3, #6
   1bff4:	smull	r1, r2, r2, r3
   1bff8:	add	r1, r2, r3
   1bffc:	asr	r2, r3, #31
   1c000:	rsb	r2, r2, r1, asr #2
   1c004:	rsb	r2, r2, r2, lsl #3
   1c008:	sub	r3, r3, r2
   1c00c:	add	r3, r3, #1
   1c010:	lsr	lr, r3, #31
   1c014:	mov	r0, #0
   1c018:	str	r0, [sp, #52]	; 0x34
   1c01c:	eor	r2, lr, #1
   1c020:	cmp	r7, #79	; 0x4f
   1c024:	movne	r2, #0
   1c028:	andeq	r2, r2, #1
   1c02c:	cmp	r2, #0
   1c030:	beq	1c588 <__assert_fail@plt+0xb120>
   1c034:	add	r8, sp, #120	; 0x78
   1c038:	ldr	r3, [pc, #2632]	; 1ca88 <__assert_fail@plt+0xb620>
   1c03c:	mov	r2, #0
   1c040:	str	r2, [sp, #52]	; 0x34
   1c044:	strh	r3, [r8, #-12]
   1c048:	strb	r7, [sp, #110]	; 0x6e
   1c04c:	sub	r0, r8, #9
   1c050:	ldr	r7, [sp, #48]	; 0x30
   1c054:	b	1becc <__assert_fail@plt+0xaa64>
   1c058:	ldr	lr, [sp, #28]
   1c05c:	add	ip, sp, #64	; 0x40
   1c060:	add	r8, sp, #120	; 0x78
   1c064:	ldm	lr!, {r0, r1, r2, r3}
   1c068:	add	r4, r8, #10
   1c06c:	stmia	ip!, {r0, r1, r2, r3}
   1c070:	ldm	lr!, {r0, r1, r2, r3}
   1c074:	stmia	ip!, {r0, r1, r2, r3}
   1c078:	ldm	lr, {r0, r1, r2}
   1c07c:	stm	ip, {r0, r1, r2}
   1c080:	add	r1, sp, #64	; 0x40
   1c084:	ldr	r0, [sp, #32]
   1c088:	bl	1b70c <__assert_fail@plt+0xa2a4>
   1c08c:	mov	r1, r0
   1c090:	ldr	r3, [pc, #2588]	; 1cab4 <__assert_fail@plt+0xb64c>
   1c094:	cmp	r0, #0
   1c098:	smull	r2, r3, r3, r1
   1c09c:	asr	r2, r1, #31
   1c0a0:	rsb	r2, r2, r3, asr #2
   1c0a4:	add	r3, r2, r2, lsl #2
   1c0a8:	sub	r3, r1, r3, lsl #1
   1c0ac:	mov	r1, r2
   1c0b0:	uxtb	r3, r3
   1c0b4:	rsblt	r3, r3, #48	; 0x30
   1c0b8:	addge	r3, r3, #48	; 0x30
   1c0bc:	cmp	r2, #0
   1c0c0:	uxtb	r3, r3
   1c0c4:	strb	r3, [r4, #-1]!
   1c0c8:	bne	1c090 <__assert_fail@plt+0xac28>
   1c0cc:	cmp	r6, #1
   1c0d0:	movge	r3, r6
   1c0d4:	movlt	r3, #1
   1c0d8:	cmp	r0, #0
   1c0dc:	blt	1cd6c <__assert_fail@plt+0xb904>
   1c0e0:	ldr	r2, [sp, #16]
   1c0e4:	add	r7, r8, #10
   1c0e8:	cmp	sl, #45	; 0x2d
   1c0ec:	sub	r7, r7, r4
   1c0f0:	sub	r2, r2, fp
   1c0f4:	beq	1c108 <__assert_fail@plt+0xaca0>
   1c0f8:	sub	r1, r3, r7
   1c0fc:	cmp	r1, #0
   1c100:	str	r1, [sp, #48]	; 0x30
   1c104:	bgt	1bb7c <__assert_fail@plt+0xa714>
   1c108:	bic	r1, r6, r6, asr #31
   1c10c:	str	r1, [sp, #48]	; 0x30
   1c110:	ldr	r1, [sp, #48]	; 0x30
   1c114:	cmp	r7, r1
   1c118:	movcs	r8, r7
   1c11c:	movcc	r8, r1
   1c120:	cmp	r8, r2
   1c124:	bcs	1bb8c <__assert_fail@plt+0xa724>
   1c128:	cmp	r9, #0
   1c12c:	beq	1c194 <__assert_fail@plt+0xad2c>
   1c130:	cmp	r7, r1
   1c134:	movcs	r2, #0
   1c138:	movcc	r2, #1
   1c13c:	cmp	r3, #0
   1c140:	moveq	r3, r2
   1c144:	movne	r3, #0
   1c148:	cmp	r3, #0
   1c14c:	beq	1c174 <__assert_fail@plt+0xad0c>
   1c150:	cmp	sl, #48	; 0x30
   1c154:	sub	r2, r6, r7
   1c158:	moveq	r0, r9
   1c15c:	movne	r0, r9
   1c160:	moveq	r1, sl
   1c164:	movne	r1, #32
   1c168:	add	r6, r9, r2
   1c16c:	bl	11360 <memset@plt>
   1c170:	mov	r9, r6
   1c174:	ldr	r3, [sp, #20]
   1c178:	mov	r1, r4
   1c17c:	cmp	r3, #0
   1c180:	mov	r2, r7
   1c184:	mov	r0, r9
   1c188:	beq	1cde4 <__assert_fail@plt+0xb97c>
   1c18c:	bl	1ba70 <__assert_fail@plt+0xa608>
   1c190:	add	r9, r9, r7
   1c194:	add	fp, fp, r8
   1c198:	b	1bb54 <__assert_fail@plt+0xa6ec>
   1c19c:	cmp	r7, #69	; 0x45
   1c1a0:	beq	1cf1c <__assert_fail@plt+0xbab4>
   1c1a4:	ldr	r3, [sp, #28]
   1c1a8:	ldr	r2, [r3, #20]
   1c1ac:	ldr	r3, [pc, #2292]	; 1caa8 <__assert_fail@plt+0xb640>
   1c1b0:	smull	r3, r1, r3, r2
   1c1b4:	asr	r3, r2, #31
   1c1b8:	rsb	r3, r3, r1, asr #5
   1c1bc:	add	r3, r3, r3, lsl #2
   1c1c0:	add	r3, r3, r3, lsl #2
   1c1c4:	subs	r3, r2, r3, lsl #2
   1c1c8:	bmi	1d0dc <__assert_fail@plt+0xbc74>
   1c1cc:	mov	r2, #2
   1c1d0:	str	r2, [sp, #48]	; 0x30
   1c1d4:	b	1c010 <__assert_fail@plt+0xaba8>
   1c1d8:	cmp	r8, #0
   1c1dc:	ldr	r3, [sp, #20]
   1c1e0:	movne	r3, r8
   1c1e4:	cmp	r7, #69	; 0x45
   1c1e8:	str	r3, [sp, #20]
   1c1ec:	bne	1beac <__assert_fail@plt+0xaa44>
   1c1f0:	sub	r3, r5, #1
   1c1f4:	add	r1, r5, #1
   1c1f8:	mov	r7, r3
   1c1fc:	sub	r4, r1, r3
   1c200:	ldrb	r2, [r3], #-1
   1c204:	cmp	r2, #37	; 0x25
   1c208:	bne	1c1f8 <__assert_fail@plt+0xad90>
   1c20c:	bic	r3, r6, r6, asr #31
   1c210:	ldr	r2, [sp, #16]
   1c214:	cmp	r4, r3
   1c218:	movcs	r8, r4
   1c21c:	movcc	r8, r3
   1c220:	sub	r2, r2, fp
   1c224:	cmp	r2, r8
   1c228:	bls	1bb8c <__assert_fail@plt+0xa724>
   1c22c:	cmp	r9, #0
   1c230:	beq	1c194 <__assert_fail@plt+0xad2c>
   1c234:	cmp	r4, r3
   1c238:	bcs	1c260 <__assert_fail@plt+0xadf8>
   1c23c:	cmp	sl, #48	; 0x30
   1c240:	sub	r2, r6, r4
   1c244:	moveq	r0, r9
   1c248:	movne	r0, r9
   1c24c:	moveq	r1, sl
   1c250:	movne	r1, #32
   1c254:	add	r6, r9, r2
   1c258:	bl	11360 <memset@plt>
   1c25c:	mov	r9, r6
   1c260:	ldr	r3, [sp, #20]
   1c264:	mov	r1, r7
   1c268:	cmp	r3, #0
   1c26c:	mov	r2, r4
   1c270:	mov	r0, r9
   1c274:	beq	1cdec <__assert_fail@plt+0xb984>
   1c278:	bl	1ba70 <__assert_fail@plt+0xa608>
   1c27c:	add	r9, r9, r4
   1c280:	b	1c194 <__assert_fail@plt+0xad2c>
   1c284:	mov	r3, #0
   1c288:	str	r3, [sp, #48]	; 0x30
   1c28c:	ldr	r2, [sp, #28]
   1c290:	ldr	r3, [r2, #32]
   1c294:	cmp	r3, #0
   1c298:	blt	1bb54 <__assert_fail@plt+0xa6ec>
   1c29c:	ldr	r1, [r2, #36]	; 0x24
   1c2a0:	cmp	r1, #0
   1c2a4:	movlt	lr, #1
   1c2a8:	blt	1c2c4 <__assert_fail@plt+0xae5c>
   1c2ac:	ldreq	r3, [sp, #40]	; 0x28
   1c2b0:	movne	lr, #0
   1c2b4:	ldrbeq	lr, [r3]
   1c2b8:	subeq	lr, lr, #45	; 0x2d
   1c2bc:	clzeq	lr, lr
   1c2c0:	lsreq	lr, lr, #5
   1c2c4:	ldr	r0, [pc, #1984]	; 1ca8c <__assert_fail@plt+0xb624>
   1c2c8:	smull	r3, r2, r0, r1
   1c2cc:	ldr	r3, [pc, #1980]	; 1ca90 <__assert_fail@plt+0xb628>
   1c2d0:	add	r2, r2, r1
   1c2d4:	smull	r3, ip, r3, r1
   1c2d8:	asr	r3, r1, #31
   1c2dc:	rsb	r2, r3, r2, asr #5
   1c2e0:	add	ip, ip, r1
   1c2e4:	smull	r8, r0, r0, r2
   1c2e8:	add	r0, r0, r2
   1c2ec:	asr	r8, r2, #31
   1c2f0:	rsb	r0, r8, r0, asr #5
   1c2f4:	rsb	r8, r2, r2, lsl #4
   1c2f8:	rsb	r0, r0, r0, lsl #4
   1c2fc:	rsb	r3, r3, ip, asr #11
   1c300:	sub	r0, r2, r0, lsl #2
   1c304:	ldr	r2, [sp, #48]	; 0x30
   1c308:	sub	r1, r1, r8, lsl #2
   1c30c:	cmp	r2, #3
   1c310:	ldrls	pc, [pc, r2, lsl #2]
   1c314:	b	1d1cc <__assert_fail@plt+0xbd64>
   1c318:	andeq	ip, r1, r4, lsr #26
   1c31c:	andeq	ip, r1, r0, lsl #26
   1c320:	andeq	ip, r1, r8, asr #25
   1c324:	andeq	ip, r1, r8, asr #26
   1c328:	bic	r7, r6, r6, asr #31
   1c32c:	ldr	r3, [sp, #16]
   1c330:	cmp	r7, #1
   1c334:	movcc	r7, #1
   1c338:	sub	r3, r3, fp
   1c33c:	cmp	r3, r7
   1c340:	bls	1bb8c <__assert_fail@plt+0xa724>
   1c344:	cmp	r9, #0
   1c348:	beq	1c380 <__assert_fail@plt+0xaf18>
   1c34c:	cmp	r6, #1
   1c350:	ble	1c378 <__assert_fail@plt+0xaf10>
   1c354:	cmp	sl, #48	; 0x30
   1c358:	sub	r2, r6, #1
   1c35c:	moveq	r0, r9
   1c360:	movne	r0, r9
   1c364:	moveq	r1, sl
   1c368:	movne	r1, #32
   1c36c:	add	r4, r9, r2
   1c370:	bl	11360 <memset@plt>
   1c374:	mov	r9, r4
   1c378:	mov	r3, #10
   1c37c:	strb	r3, [r9], #1
   1c380:	add	fp, fp, r7
   1c384:	b	1bb54 <__assert_fail@plt+0xa6ec>
   1c388:	cmp	r7, #69	; 0x45
   1c38c:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c390:	ldr	r3, [sp, #28]
   1c394:	mov	r2, #2
   1c398:	str	r2, [sp, #48]	; 0x30
   1c39c:	ldr	r3, [r3, #12]
   1c3a0:	b	1c010 <__assert_fail@plt+0xaba8>
   1c3a4:	cmp	r7, #69	; 0x45
   1c3a8:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c3ac:	ldr	r3, [sp, #28]
   1c3b0:	ldr	r3, [r3, #12]
   1c3b4:	cmp	sl, #48	; 0x30
   1c3b8:	cmpne	sl, #45	; 0x2d
   1c3bc:	mov	r2, #2
   1c3c0:	movne	sl, #95	; 0x5f
   1c3c4:	str	r2, [sp, #48]	; 0x30
   1c3c8:	b	1c010 <__assert_fail@plt+0xaba8>
   1c3cc:	cmp	r7, #69	; 0x45
   1c3d0:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c3d4:	ldr	r3, [sp, #28]
   1c3d8:	mov	r0, #0
   1c3dc:	mov	r2, #3
   1c3e0:	ldr	r3, [r3, #28]
   1c3e4:	str	r0, [sp, #52]	; 0x34
   1c3e8:	cmn	r3, #1
   1c3ec:	movge	lr, #0
   1c3f0:	movlt	lr, #1
   1c3f4:	add	r3, r3, #1
   1c3f8:	str	r2, [sp, #48]	; 0x30
   1c3fc:	b	1c01c <__assert_fail@plt+0xabb4>
   1c400:	cmp	r7, #69	; 0x45
   1c404:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c408:	ldr	r3, [sp, #28]
   1c40c:	ldr	r3, [r3, #8]
   1c410:	b	1c3b4 <__assert_fail@plt+0xaf4c>
   1c414:	cmp	r7, #69	; 0x45
   1c418:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c41c:	ldr	r3, [sp, #44]	; 0x2c
   1c420:	b	1c3b4 <__assert_fail@plt+0xaf4c>
   1c424:	ldr	r3, [pc, #1640]	; 1ca94 <__assert_fail@plt+0xb62c>
   1c428:	str	r3, [sp, #48]	; 0x30
   1c42c:	ldr	r3, [sp, #1196]	; 0x4ac
   1c430:	ldr	r2, [sp, #48]	; 0x30
   1c434:	str	r3, [sp, #12]
   1c438:	ldr	r3, [sp, #32]
   1c43c:	mvn	r1, #0
   1c440:	str	r3, [sp, #8]
   1c444:	ldr	r3, [sp, #36]	; 0x24
   1c448:	mov	r0, #0
   1c44c:	str	r3, [sp, #4]
   1c450:	ldr	r3, [sp, #20]
   1c454:	str	r3, [sp]
   1c458:	ldr	r3, [sp, #28]
   1c45c:	bl	1bab0 <__assert_fail@plt+0xa648>
   1c460:	bic	r3, r6, r6, asr #31
   1c464:	ldr	r2, [sp, #16]
   1c468:	sub	r8, r2, fp
   1c46c:	cmp	r0, r3
   1c470:	movcs	r7, r0
   1c474:	movcc	r7, r3
   1c478:	cmp	r8, r7
   1c47c:	mov	r4, r0
   1c480:	bls	1bb8c <__assert_fail@plt+0xa724>
   1c484:	cmp	r9, #0
   1c488:	beq	1c380 <__assert_fail@plt+0xaf18>
   1c48c:	cmp	r0, r3
   1c490:	bcs	1c4b8 <__assert_fail@plt+0xb050>
   1c494:	cmp	sl, #48	; 0x30
   1c498:	sub	r2, r6, r0
   1c49c:	moveq	r1, sl
   1c4a0:	moveq	r0, r9
   1c4a4:	movne	r0, r9
   1c4a8:	movne	r1, #32
   1c4ac:	add	r6, r9, r2
   1c4b0:	bl	11360 <memset@plt>
   1c4b4:	mov	r9, r6
   1c4b8:	ldr	r3, [sp, #1196]	; 0x4ac
   1c4bc:	mov	r0, r9
   1c4c0:	str	r3, [sp, #12]
   1c4c4:	ldr	r3, [sp, #32]
   1c4c8:	ldr	r2, [sp, #48]	; 0x30
   1c4cc:	str	r3, [sp, #8]
   1c4d0:	ldr	r3, [sp, #36]	; 0x24
   1c4d4:	mov	r1, r8
   1c4d8:	str	r3, [sp, #4]
   1c4dc:	ldr	r3, [sp, #20]
   1c4e0:	add	r9, r9, r4
   1c4e4:	str	r3, [sp]
   1c4e8:	ldr	r3, [sp, #28]
   1c4ec:	bl	1bab0 <__assert_fail@plt+0xa648>
   1c4f0:	b	1c380 <__assert_fail@plt+0xaf18>
   1c4f4:	cmp	r7, #69	; 0x45
   1c4f8:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c4fc:	ldr	r3, [sp, #28]
   1c500:	mov	r2, #2
   1c504:	str	r2, [sp, #48]	; 0x30
   1c508:	ldr	r3, [r3]
   1c50c:	b	1c010 <__assert_fail@plt+0xaba8>
   1c510:	cmp	r7, #69	; 0x45
   1c514:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c518:	ldr	r2, [sp, #28]
   1c51c:	mov	r1, #2
   1c520:	str	r1, [sp, #48]	; 0x30
   1c524:	ldrd	r2, [r2, #24]
   1c528:	sub	r3, r3, r2
   1c52c:	ldr	r2, [pc, #1412]	; 1cab8 <__assert_fail@plt+0xb650>
   1c530:	add	r3, r3, #7
   1c534:	smull	r1, r2, r2, r3
   1c538:	add	r2, r2, r3
   1c53c:	asr	r3, r3, #31
   1c540:	rsb	r3, r3, r2, asr #2
   1c544:	b	1c010 <__assert_fail@plt+0xaba8>
   1c548:	cmp	r7, #69	; 0x45
   1c54c:	beq	1cf1c <__assert_fail@plt+0xbab4>
   1c550:	cmp	r7, #79	; 0x4f
   1c554:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c558:	ldr	r3, [sp, #28]
   1c55c:	ldr	r2, [pc, #1368]	; 1cabc <__assert_fail@plt+0xb654>
   1c560:	mov	r0, #0
   1c564:	ldr	lr, [r3, #20]
   1c568:	str	r0, [sp, #52]	; 0x34
   1c56c:	add	r3, lr, #1888	; 0x760
   1c570:	cmp	lr, r2
   1c574:	add	r3, r3, #12
   1c578:	movge	lr, #0
   1c57c:	movlt	lr, #1
   1c580:	mov	r2, #4
   1c584:	str	r2, [sp, #48]	; 0x30
   1c588:	cmp	lr, #0
   1c58c:	rsbne	r3, r3, #0
   1c590:	add	r8, sp, #120	; 0x78
   1c594:	add	ip, r8, #10
   1c598:	mov	r7, r3
   1c59c:	b	1c5a4 <__assert_fail@plt+0xb13c>
   1c5a0:	mov	r7, r2
   1c5a4:	tst	r0, #1
   1c5a8:	subne	r3, ip, #2
   1c5ac:	sub	r4, ip, #1
   1c5b0:	movne	r2, #58	; 0x3a
   1c5b4:	strbne	r2, [ip, #-1]
   1c5b8:	movne	ip, r4
   1c5bc:	movne	r4, r3
   1c5c0:	ldr	r3, [pc, #1232]	; 1ca98 <__assert_fail@plt+0xb630>
   1c5c4:	asrs	r0, r0, #1
   1c5c8:	movne	r1, #1
   1c5cc:	umull	r3, r2, r3, r7
   1c5d0:	moveq	r1, #0
   1c5d4:	lsr	r2, r2, #3
   1c5d8:	cmp	r7, #9
   1c5dc:	orrhi	r1, r1, #1
   1c5e0:	add	r3, r2, r2, lsl #2
   1c5e4:	cmp	r1, #0
   1c5e8:	sub	r3, r7, r3, lsl #1
   1c5ec:	add	r3, r3, #48	; 0x30
   1c5f0:	strb	r3, [ip, #-1]
   1c5f4:	mov	ip, r4
   1c5f8:	bne	1c5a0 <__assert_fail@plt+0xb138>
   1c5fc:	ldr	r3, [sp, #48]	; 0x30
   1c600:	cmp	r3, r6
   1c604:	movlt	r3, r6
   1c608:	cmp	lr, #0
   1c60c:	bne	1cd6c <__assert_fail@plt+0xb904>
   1c610:	ldr	r2, [sp, #52]	; 0x34
   1c614:	cmp	r2, #0
   1c618:	beq	1c0e0 <__assert_fail@plt+0xac78>
   1c61c:	cmp	sl, #45	; 0x2d
   1c620:	beq	1cf28 <__assert_fail@plt+0xbac0>
   1c624:	mov	r2, #43	; 0x2b
   1c628:	str	r2, [sp, #52]	; 0x34
   1c62c:	add	r7, r8, #10
   1c630:	sub	r7, r7, r4
   1c634:	sub	r2, r3, r7
   1c638:	sub	r2, r2, #1
   1c63c:	str	r2, [sp, #48]	; 0x30
   1c640:	cmp	r2, #0
   1c644:	ldr	r2, [sp, #16]
   1c648:	sub	r2, r2, fp
   1c64c:	ble	1ce24 <__assert_fail@plt+0xb9bc>
   1c650:	cmp	sl, #95	; 0x5f
   1c654:	beq	1ceb0 <__assert_fail@plt+0xba48>
   1c658:	cmp	r3, r2
   1c65c:	bcs	1bb8c <__assert_fail@plt+0xa724>
   1c660:	bic	r0, r6, r6, asr #31
   1c664:	cmp	r0, #1
   1c668:	movcs	r1, r0
   1c66c:	movcc	r1, #1
   1c670:	cmp	r1, r2
   1c674:	bcs	1bb8c <__assert_fail@plt+0xa724>
   1c678:	cmp	r9, #0
   1c67c:	add	fp, fp, r1
   1c680:	beq	1c6f8 <__assert_fail@plt+0xb290>
   1c684:	cmp	r0, #1
   1c688:	movls	r2, #0
   1c68c:	movhi	r2, #1
   1c690:	cmp	r3, #0
   1c694:	movne	r2, #0
   1c698:	cmp	r2, #0
   1c69c:	beq	1c6c8 <__assert_fail@plt+0xb260>
   1c6a0:	sub	r2, r6, #1
   1c6a4:	cmp	sl, #48	; 0x30
   1c6a8:	str	r3, [sp, #56]	; 0x38
   1c6ac:	mov	r0, r9
   1c6b0:	add	r8, r9, r2
   1c6b4:	beq	1d194 <__assert_fail@plt+0xbd2c>
   1c6b8:	mov	r1, #32
   1c6bc:	bl	11360 <memset@plt>
   1c6c0:	ldr	r3, [sp, #56]	; 0x38
   1c6c4:	mov	r9, r8
   1c6c8:	ldr	r2, [sp, #52]	; 0x34
   1c6cc:	strb	r2, [r9], #1
   1c6d0:	cmp	r9, #0
   1c6d4:	beq	1c6f8 <__assert_fail@plt+0xb290>
   1c6d8:	ldr	r6, [sp, #48]	; 0x30
   1c6dc:	mov	r0, r9
   1c6e0:	mov	r2, r6
   1c6e4:	mov	r1, #48	; 0x30
   1c6e8:	str	r3, [sp, #52]	; 0x34
   1c6ec:	bl	11360 <memset@plt>
   1c6f0:	ldr	r3, [sp, #52]	; 0x34
   1c6f4:	add	r9, r9, r6
   1c6f8:	ldr	r2, [sp, #48]	; 0x30
   1c6fc:	mov	r6, #0
   1c700:	add	fp, fp, r2
   1c704:	ldr	r2, [sp, #16]
   1c708:	str	r6, [sp, #48]	; 0x30
   1c70c:	sub	r2, r2, fp
   1c710:	b	1c110 <__assert_fail@plt+0xaca8>
   1c714:	ldr	r3, [sp, #20]
   1c718:	cmp	r8, #0
   1c71c:	movne	r3, #0
   1c720:	ldr	r0, [sp, #40]	; 0x28
   1c724:	str	r3, [sp, #20]
   1c728:	bl	1130c <strlen@plt>
   1c72c:	bic	r3, r6, r6, asr #31
   1c730:	ldr	r2, [sp, #16]
   1c734:	sub	r2, r2, fp
   1c738:	cmp	r0, r3
   1c73c:	movcs	r4, r0
   1c740:	movcc	r4, r3
   1c744:	cmp	r2, r4
   1c748:	mov	r7, r0
   1c74c:	bls	1bb8c <__assert_fail@plt+0xa724>
   1c750:	cmp	r9, #0
   1c754:	beq	1c7ac <__assert_fail@plt+0xb344>
   1c758:	cmp	r0, r3
   1c75c:	bcs	1c784 <__assert_fail@plt+0xb31c>
   1c760:	cmp	sl, #48	; 0x30
   1c764:	sub	r2, r6, r0
   1c768:	moveq	r1, sl
   1c76c:	moveq	r0, r9
   1c770:	movne	r0, r9
   1c774:	movne	r1, #32
   1c778:	add	r6, r9, r2
   1c77c:	bl	11360 <memset@plt>
   1c780:	mov	r9, r6
   1c784:	cmp	r8, #0
   1c788:	bne	1d100 <__assert_fail@plt+0xbc98>
   1c78c:	ldr	r3, [sp, #20]
   1c790:	mov	r2, r7
   1c794:	cmp	r3, #0
   1c798:	ldr	r1, [sp, #40]	; 0x28
   1c79c:	mov	r0, r9
   1c7a0:	beq	1d0f8 <__assert_fail@plt+0xbc90>
   1c7a4:	bl	1ba70 <__assert_fail@plt+0xa608>
   1c7a8:	add	r9, r9, r7
   1c7ac:	add	fp, fp, r4
   1c7b0:	b	1bb54 <__assert_fail@plt+0xa6ec>
   1c7b4:	cmp	r7, #69	; 0x45
   1c7b8:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c7bc:	ldr	r3, [sp, #28]
   1c7c0:	ldr	ip, [pc, #752]	; 1cab8 <__assert_fail@plt+0xb650>
   1c7c4:	ldrd	r2, [r3, #24]
   1c7c8:	add	r2, r2, #6
   1c7cc:	smull	r0, r1, ip, r2
   1c7d0:	add	r0, r1, r2
   1c7d4:	asr	r1, r2, #31
   1c7d8:	rsb	r1, r1, r0, asr #2
   1c7dc:	mov	r0, #2
   1c7e0:	rsb	r1, r1, r1, lsl #3
   1c7e4:	sub	r2, r2, r1
   1c7e8:	sub	r3, r3, r2
   1c7ec:	add	r3, r3, #7
   1c7f0:	str	r0, [sp, #48]	; 0x30
   1c7f4:	smull	r1, r2, ip, r3
   1c7f8:	add	r2, r2, r3
   1c7fc:	asr	r3, r3, #31
   1c800:	rsb	r3, r3, r2, asr r0
   1c804:	b	1c010 <__assert_fail@plt+0xaba8>
   1c808:	cmp	r7, #0
   1c80c:	bne	1c1f0 <__assert_fail@plt+0xad88>
   1c810:	ldr	r3, [pc, #644]	; 1ca9c <__assert_fail@plt+0xb634>
   1c814:	str	r3, [sp, #48]	; 0x30
   1c818:	b	1c42c <__assert_fail@plt+0xafc4>
   1c81c:	cmp	r7, #0
   1c820:	bne	1c1f0 <__assert_fail@plt+0xad88>
   1c824:	ldr	r3, [pc, #628]	; 1caa0 <__assert_fail@plt+0xb638>
   1c828:	str	r3, [sp, #48]	; 0x30
   1c82c:	b	1c42c <__assert_fail@plt+0xafc4>
   1c830:	cmp	r7, #69	; 0x45
   1c834:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c838:	ldr	r3, [sp, #28]
   1c83c:	ldr	r0, [r3, #28]
   1c840:	ldr	r2, [r3, #24]
   1c844:	ldr	r8, [r3, #20]
   1c848:	sub	r3, r0, r2
   1c84c:	str	r2, [sp, #52]	; 0x34
   1c850:	add	r3, r3, #380	; 0x17c
   1c854:	ldr	r2, [pc, #604]	; 1cab8 <__assert_fail@plt+0xb650>
   1c858:	add	r3, r3, #2
   1c85c:	cmp	r8, #0
   1c860:	smull	r1, r2, r2, r3
   1c864:	str	r0, [sp, #48]	; 0x30
   1c868:	add	r1, r2, r3
   1c86c:	asr	r2, r3, #31
   1c870:	rsb	r2, r2, r1, asr #2
   1c874:	movlt	r1, #300	; 0x12c
   1c878:	rsb	r2, r2, r2, lsl #3
   1c87c:	sub	r3, r3, r2
   1c880:	sub	r3, r0, r3
   1c884:	mvnge	r1, #99	; 0x63
   1c888:	adds	r3, r3, #3
   1c88c:	add	r1, r8, r1
   1c890:	bmi	1cf90 <__assert_fail@plt+0xbb28>
   1c894:	tst	r1, #3
   1c898:	ldrne	r2, [pc, #524]	; 1caac <__assert_fail@plt+0xb644>
   1c89c:	bne	1c8e0 <__assert_fail@plt+0xb478>
   1c8a0:	ldr	r2, [pc, #512]	; 1caa8 <__assert_fail@plt+0xb640>
   1c8a4:	smull	r2, ip, r2, r1
   1c8a8:	asr	r2, r1, #31
   1c8ac:	rsb	r0, r2, ip, asr #5
   1c8b0:	add	r0, r0, r0, lsl #2
   1c8b4:	add	r0, r0, r0, lsl #2
   1c8b8:	cmp	r1, r0, lsl #2
   1c8bc:	ldrne	r2, [pc, #492]	; 1cab0 <__assert_fail@plt+0xb648>
   1c8c0:	bne	1c8e0 <__assert_fail@plt+0xb478>
   1c8c4:	rsb	r0, r2, ip, asr #7
   1c8c8:	ldr	ip, [pc, #480]	; 1cab0 <__assert_fail@plt+0xb648>
   1c8cc:	add	r0, r0, r0, lsl #2
   1c8d0:	ldr	r2, [pc, #468]	; 1caac <__assert_fail@plt+0xb644>
   1c8d4:	add	r0, r0, r0, lsl #2
   1c8d8:	cmp	r1, r0, lsl #4
   1c8dc:	moveq	r2, ip
   1c8e0:	ldr	r1, [sp, #48]	; 0x30
   1c8e4:	sub	ip, r1, r2
   1c8e8:	ldr	r2, [sp, #52]	; 0x34
   1c8ec:	ldr	r1, [pc, #452]	; 1cab8 <__assert_fail@plt+0xb650>
   1c8f0:	sub	r2, ip, r2
   1c8f4:	add	r2, r2, #380	; 0x17c
   1c8f8:	add	r2, r2, #2
   1c8fc:	smull	r0, r1, r1, r2
   1c900:	add	r0, r1, r2
   1c904:	asr	r1, r2, #31
   1c908:	rsb	r1, r1, r0, asr #2
   1c90c:	rsb	r1, r1, r1, lsl #3
   1c910:	sub	r2, r2, r1
   1c914:	sub	r2, ip, r2
   1c918:	add	r2, r2, #3
   1c91c:	cmp	r2, #0
   1c920:	movge	r3, r2
   1c924:	movlt	r2, #0
   1c928:	movge	r2, #1
   1c92c:	cmp	r4, #71	; 0x47
   1c930:	beq	1d0a8 <__assert_fail@plt+0xbc40>
   1c934:	cmp	r4, #103	; 0x67
   1c938:	bne	1d084 <__assert_fail@plt+0xbc1c>
   1c93c:	ldr	r0, [pc, #356]	; 1caa8 <__assert_fail@plt+0xb640>
   1c940:	smull	r3, r1, r0, r8
   1c944:	asr	r3, r8, #31
   1c948:	rsb	r3, r3, r1, asr #5
   1c94c:	add	r3, r3, r3, lsl #2
   1c950:	add	r3, r3, r3, lsl #2
   1c954:	sub	r1, r8, r3, lsl #2
   1c958:	add	r1, r1, r2
   1c95c:	smull	r3, r0, r0, r1
   1c960:	asr	r3, r1, #31
   1c964:	rsb	r3, r3, r0, asr #5
   1c968:	add	r3, r3, r3, lsl #2
   1c96c:	add	r3, r3, r3, lsl #2
   1c970:	subs	r3, r1, r3, lsl #2
   1c974:	bpl	1c1cc <__assert_fail@plt+0xad64>
   1c978:	ldr	r1, [pc, #316]	; 1cabc <__assert_fail@plt+0xb654>
   1c97c:	sub	r1, r1, r2
   1c980:	cmp	r1, r8
   1c984:	ble	1d0e8 <__assert_fail@plt+0xbc80>
   1c988:	mov	r2, #2
   1c98c:	rsb	r3, r3, #0
   1c990:	str	r2, [sp, #48]	; 0x30
   1c994:	b	1c010 <__assert_fail@plt+0xaba8>
   1c998:	cmp	r7, #69	; 0x45
   1c99c:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c9a0:	ldr	r3, [sp, #28]
   1c9a4:	mov	r2, #2
   1c9a8:	str	r2, [sp, #48]	; 0x30
   1c9ac:	ldr	r3, [r3, #8]
   1c9b0:	b	1c010 <__assert_fail@plt+0xaba8>
   1c9b4:	cmp	r7, #69	; 0x45
   1c9b8:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c9bc:	ldr	r3, [sp, #28]
   1c9c0:	mov	r2, #2
   1c9c4:	str	r2, [sp, #48]	; 0x30
   1c9c8:	ldr	r3, [r3, #4]
   1c9cc:	b	1c010 <__assert_fail@plt+0xaba8>
   1c9d0:	cmp	r7, #69	; 0x45
   1c9d4:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1c9d8:	cmn	r6, #1
   1c9dc:	bne	1d024 <__assert_fail@plt+0xbbbc>
   1c9e0:	mov	r6, #9
   1c9e4:	str	r6, [sp, #48]	; 0x30
   1c9e8:	ldr	r3, [sp, #1196]	; 0x4ac
   1c9ec:	b	1c010 <__assert_fail@plt+0xaba8>
   1c9f0:	ldrb	r3, [r5, #-1]
   1c9f4:	sub	r7, r5, #1
   1c9f8:	cmp	r3, #37	; 0x25
   1c9fc:	ldr	r3, [sp, #16]
   1ca00:	sub	r2, r3, fp
   1ca04:	bic	r3, r6, r6, asr #31
   1ca08:	bne	1d1c4 <__assert_fail@plt+0xbd5c>
   1ca0c:	cmp	r3, #1
   1ca10:	movcs	r8, r3
   1ca14:	movcc	r8, #1
   1ca18:	mov	r5, r7
   1ca1c:	mov	r4, #1
   1ca20:	b	1c224 <__assert_fail@plt+0xadbc>
   1ca24:	cmp	r7, #69	; 0x45
   1ca28:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1ca2c:	mov	r2, #2
   1ca30:	ldr	r3, [sp, #44]	; 0x2c
   1ca34:	str	r2, [sp, #48]	; 0x30
   1ca38:	b	1c010 <__assert_fail@plt+0xaba8>
   1ca3c:	ldr	r3, [sp, #28]
   1ca40:	cmp	r7, #79	; 0x4f
   1ca44:	ldr	r3, [r3, #16]
   1ca48:	moveq	r3, #1
   1ca4c:	streq	r3, [sp, #48]	; 0x30
   1ca50:	beq	1c034 <__assert_fail@plt+0xabcc>
   1ca54:	add	r2, r3, r3, lsl #2
   1ca58:	mov	r0, #0
   1ca5c:	add	r3, r3, r2, lsl #1
   1ca60:	mov	r2, #1
   1ca64:	asr	r3, r3, #5
   1ca68:	str	r0, [sp, #52]	; 0x34
   1ca6c:	mov	lr, r0
   1ca70:	add	r3, r3, #1
   1ca74:	str	r2, [sp, #48]	; 0x30
   1ca78:	b	1c590 <__assert_fail@plt+0xb128>
   1ca7c:	andeq	r2, r3, r8, lsl #30
   1ca80:			; <UNDEFINED> instruction: 0x000218bc
   1ca84:	stcleq	12, cr12, [ip], {204}	; 0xcc
   1ca88:	andeq	r2, r0, r0, lsr #10
   1ca8c:	stmhi	r8, {r0, r3, r7, fp, pc}
   1ca90:			; <UNDEFINED> instruction: 0x91a2b3c5
   1ca94:	andeq	r2, r2, r4, asr #32
   1ca98:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1ca9c:	andeq	r2, r2, r8, lsr r0
   1caa0:	andeq	r2, r2, ip, asr #32
   1caa4:	andeq	r2, r2, ip, lsr #32
   1caa8:	mvnpl	r8, pc, lsl r5
   1caac:	andeq	r0, r0, sp, ror #2
   1cab0:	andeq	r0, r0, lr, ror #2
   1cab4:	strbtvs	r6, [r6], -r7, ror #12
   1cab8:	subls	r2, r9, #-1828716544	; 0x93000000
   1cabc:			; <UNDEFINED> instruction: 0xfffff894
   1cac0:	bic	r7, r6, r6, asr #31
   1cac4:	ldr	r3, [sp, #16]
   1cac8:	cmp	r7, #1
   1cacc:	movcc	r7, #1
   1cad0:	sub	r3, r3, fp
   1cad4:	cmp	r3, r7
   1cad8:	bls	1bb8c <__assert_fail@plt+0xa724>
   1cadc:	cmp	r9, #0
   1cae0:	beq	1c380 <__assert_fail@plt+0xaf18>
   1cae4:	cmp	r6, #1
   1cae8:	ble	1cb10 <__assert_fail@plt+0xb6a8>
   1caec:	cmp	sl, #48	; 0x30
   1caf0:	sub	r2, r6, #1
   1caf4:	moveq	r0, r9
   1caf8:	movne	r0, r9
   1cafc:	moveq	r1, sl
   1cb00:	movne	r1, #32
   1cb04:	add	r4, r9, r2
   1cb08:	bl	11360 <memset@plt>
   1cb0c:	mov	r9, r4
   1cb10:	mov	r3, #9
   1cb14:	strb	r3, [r9], #1
   1cb18:	b	1c380 <__assert_fail@plt+0xaf18>
   1cb1c:	mov	r3, #0
   1cb20:	str	r3, [sp, #52]	; 0x34
   1cb24:	ldr	r3, [sp, #52]	; 0x34
   1cb28:	cmp	r8, #0
   1cb2c:	movne	r3, r8
   1cb30:	str	r3, [sp, #52]	; 0x34
   1cb34:	ldr	r3, [sp, #20]
   1cb38:	movne	r3, #0
   1cb3c:	str	r3, [sp, #20]
   1cb40:	mov	r4, #112	; 0x70
   1cb44:	b	1beb4 <__assert_fail@plt+0xaa4c>
   1cb48:	cmp	r7, #69	; 0x45
   1cb4c:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1cb50:	ldr	r3, [sp, #20]
   1cb54:	cmp	r8, #0
   1cb58:	movne	r3, r8
   1cb5c:	str	r3, [sp, #20]
   1cb60:	mov	r3, #0
   1cb64:	str	r3, [sp, #52]	; 0x34
   1cb68:	b	1beb4 <__assert_fail@plt+0xaa4c>
   1cb6c:	cmp	r7, #69	; 0x45
   1cb70:	beq	1cf1c <__assert_fail@plt+0xbab4>
   1cb74:	ldr	r3, [sp, #28]
   1cb78:	mov	r0, #0
   1cb7c:	ldr	lr, [pc, #-200]	; 1cabc <__assert_fail@plt+0xb654>
   1cb80:	ldr	ip, [r3, #20]
   1cb84:	ldr	r3, [pc, #-228]	; 1caa8 <__assert_fail@plt+0xb640>
   1cb88:	str	r0, [sp, #52]	; 0x34
   1cb8c:	smull	r2, r3, r3, ip
   1cb90:	asr	r2, ip, #31
   1cb94:	rsb	r2, r2, r3, asr #5
   1cb98:	add	r3, r2, #19
   1cb9c:	add	r2, r2, r2, lsl #2
   1cba0:	cmp	r3, r0
   1cba4:	add	r2, r2, r2, lsl #2
   1cba8:	movle	r1, #0
   1cbac:	sub	r2, ip, r2, lsl #2
   1cbb0:	movgt	r1, #1
   1cbb4:	and	r2, r1, r2, lsr #31
   1cbb8:	cmp	ip, lr
   1cbbc:	sub	r3, r3, r2
   1cbc0:	mov	r2, #2
   1cbc4:	movge	lr, #0
   1cbc8:	movlt	lr, #1
   1cbcc:	str	r2, [sp, #48]	; 0x30
   1cbd0:	b	1c01c <__assert_fail@plt+0xabb4>
   1cbd4:	cmp	r7, #69	; 0x45
   1cbd8:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1cbdc:	ldr	r3, [sp, #28]
   1cbe0:	mov	r2, #1
   1cbe4:	str	r2, [sp, #48]	; 0x30
   1cbe8:	ldr	r3, [r3, #24]
   1cbec:	b	1c010 <__assert_fail@plt+0xaba8>
   1cbf0:	cmp	r7, #69	; 0x45
   1cbf4:	beq	1c1f0 <__assert_fail@plt+0xad88>
   1cbf8:	ldr	r3, [sp, #28]
   1cbfc:	mov	r0, #0
   1cc00:	mov	r2, #2
   1cc04:	ldr	r3, [r3, #16]
   1cc08:	str	r0, [sp, #52]	; 0x34
   1cc0c:	cmn	r3, #1
   1cc10:	movge	lr, #0
   1cc14:	movlt	lr, #1
   1cc18:	add	r3, r3, #1
   1cc1c:	str	r2, [sp, #48]	; 0x30
   1cc20:	b	1c01c <__assert_fail@plt+0xabb4>
   1cc24:	bic	r3, r6, r6, asr #31
   1cc28:	ldr	r2, [sp, #16]
   1cc2c:	cmp	r3, #1
   1cc30:	movcs	r8, r3
   1cc34:	movcc	r8, #1
   1cc38:	cmp	r7, #0
   1cc3c:	sub	r2, r2, fp
   1cc40:	bne	1d138 <__assert_fail@plt+0xbcd0>
   1cc44:	cmp	r8, r2
   1cc48:	bcs	1bb8c <__assert_fail@plt+0xa724>
   1cc4c:	cmp	r9, #0
   1cc50:	beq	1c194 <__assert_fail@plt+0xad2c>
   1cc54:	cmp	r6, #1
   1cc58:	ble	1cc80 <__assert_fail@plt+0xb818>
   1cc5c:	sub	r2, r6, #1
   1cc60:	cmp	sl, #48	; 0x30
   1cc64:	add	r7, r9, r2
   1cc68:	beq	1d158 <__assert_fail@plt+0xbcf0>
   1cc6c:	mov	r0, r9
   1cc70:	mov	r1, #32
   1cc74:	bl	11360 <memset@plt>
   1cc78:	ldrb	r4, [r5]
   1cc7c:	mov	r9, r7
   1cc80:	strb	r4, [r9], #1
   1cc84:	b	1c194 <__assert_fail@plt+0xad2c>
   1cc88:	ldrb	r3, [r5, #1]
   1cc8c:	add	r2, r5, #1
   1cc90:	cmp	r3, #58	; 0x3a
   1cc94:	beq	1d114 <__assert_fail@plt+0xbcac>
   1cc98:	mov	r1, #1
   1cc9c:	str	r1, [sp, #48]	; 0x30
   1cca0:	cmp	r3, #122	; 0x7a
   1cca4:	moveq	r5, r2
   1cca8:	beq	1c28c <__assert_fail@plt+0xae24>
   1ccac:	b	1c1f0 <__assert_fail@plt+0xad88>
   1ccb0:	mov	r3, #1
   1ccb4:	str	r3, [sp, #52]	; 0x34
   1ccb8:	b	1cb24 <__assert_fail@plt+0xb6bc>
   1ccbc:	ldr	r3, [pc, #-544]	; 1caa4 <__assert_fail@plt+0xb63c>
   1ccc0:	str	r3, [sp, #48]	; 0x30
   1ccc4:	b	1c42c <__assert_fail@plt+0xafc4>
   1ccc8:	rsb	r2, r3, r3, lsl #5
   1cccc:	add	r0, r0, r0, lsl #2
   1ccd0:	add	r3, r3, r2, lsl #2
   1ccd4:	add	r0, r0, r0, lsl #2
   1ccd8:	add	ip, r3, r3, lsl #2
   1ccdc:	mov	r2, #1
   1cce0:	lsl	r3, r0, #2
   1cce4:	add	r3, r3, ip, lsl #4
   1cce8:	str	r2, [sp, #52]	; 0x34
   1ccec:	mov	r2, #9
   1ccf0:	add	r3, r3, r1
   1ccf4:	mov	r0, #20
   1ccf8:	str	r2, [sp, #48]	; 0x30
   1ccfc:	b	1c01c <__assert_fail@plt+0xabb4>
   1cd00:	add	r3, r3, r3, lsl #2
   1cd04:	mov	r2, #1
   1cd08:	add	r3, r3, r3, lsl #2
   1cd0c:	str	r2, [sp, #52]	; 0x34
   1cd10:	mov	r2, #6
   1cd14:	add	r3, r0, r3, lsl #2
   1cd18:	str	r2, [sp, #48]	; 0x30
   1cd1c:	mov	r0, #4
   1cd20:	b	1c01c <__assert_fail@plt+0xabb4>
   1cd24:	add	r3, r3, r3, lsl #2
   1cd28:	mov	r2, #1
   1cd2c:	add	r3, r3, r3, lsl #2
   1cd30:	str	r2, [sp, #52]	; 0x34
   1cd34:	mov	r2, #5
   1cd38:	add	r3, r0, r3, lsl #2
   1cd3c:	str	r2, [sp, #48]	; 0x30
   1cd40:	mov	r0, #0
   1cd44:	b	1c01c <__assert_fail@plt+0xabb4>
   1cd48:	cmp	r1, #0
   1cd4c:	bne	1ccc8 <__assert_fail@plt+0xb860>
   1cd50:	cmp	r0, #0
   1cd54:	bne	1cd00 <__assert_fail@plt+0xb898>
   1cd58:	mov	r2, #1
   1cd5c:	str	r2, [sp, #52]	; 0x34
   1cd60:	mov	r2, #3
   1cd64:	str	r2, [sp, #48]	; 0x30
   1cd68:	b	1c01c <__assert_fail@plt+0xabb4>
   1cd6c:	cmp	sl, #45	; 0x2d
   1cd70:	movne	r2, #45	; 0x2d
   1cd74:	strne	r2, [sp, #52]	; 0x34
   1cd78:	bne	1c62c <__assert_fail@plt+0xb1c4>
   1cd7c:	bic	r1, r6, r6, asr #31
   1cd80:	ldr	r2, [sp, #16]
   1cd84:	cmp	r1, #1
   1cd88:	movcs	r7, r1
   1cd8c:	movcc	r7, #1
   1cd90:	sub	r2, r2, fp
   1cd94:	cmp	r2, r7
   1cd98:	str	r1, [sp, #48]	; 0x30
   1cd9c:	bls	1bb8c <__assert_fail@plt+0xa724>
   1cda0:	cmp	r9, #0
   1cda4:	beq	1cdc8 <__assert_fail@plt+0xb960>
   1cda8:	cmp	r1, #1
   1cdac:	movls	r2, #0
   1cdb0:	movhi	r2, #1
   1cdb4:	cmp	r3, #0
   1cdb8:	movne	r2, #0
   1cdbc:	cmp	r2, #0
   1cdc0:	bne	1d058 <__assert_fail@plt+0xbbf0>
   1cdc4:	strb	sl, [r9], #1
   1cdc8:	ldr	r2, [sp, #16]
   1cdcc:	add	fp, fp, r7
   1cdd0:	add	r7, r8, #10
   1cdd4:	sub	r7, r7, r4
   1cdd8:	sub	r2, r2, fp
   1cddc:	mov	sl, #45	; 0x2d
   1cde0:	b	1c110 <__assert_fail@plt+0xaca8>
   1cde4:	bl	11180 <memcpy@plt>
   1cde8:	b	1c190 <__assert_fail@plt+0xad28>
   1cdec:	bl	11180 <memcpy@plt>
   1cdf0:	b	1c27c <__assert_fail@plt+0xae14>
   1cdf4:	bl	11180 <memcpy@plt>
   1cdf8:	ldr	r3, [sp, #20]
   1cdfc:	b	1bf9c <__assert_fail@plt+0xab34>
   1ce00:	sub	r1, r8, #3
   1ce04:	mov	r2, r4
   1ce08:	mov	r0, r9
   1ce0c:	str	r3, [sp, #20]
   1ce10:	bl	1ba30 <__assert_fail@plt+0xa5c8>
   1ce14:	ldr	r3, [sp, #20]
   1ce18:	b	1bf9c <__assert_fail@plt+0xab34>
   1ce1c:	mov	fp, r3
   1ce20:	b	1bb64 <__assert_fail@plt+0xa6fc>
   1ce24:	bic	r1, r6, r6, asr #31
   1ce28:	cmp	r1, #1
   1ce2c:	movcs	r8, r1
   1ce30:	movcc	r8, #1
   1ce34:	cmp	r8, r2
   1ce38:	str	r1, [sp, #48]	; 0x30
   1ce3c:	bcs	1bb8c <__assert_fail@plt+0xa724>
   1ce40:	cmp	r9, #0
   1ce44:	beq	1ce98 <__assert_fail@plt+0xba30>
   1ce48:	cmp	r1, #1
   1ce4c:	movls	r2, #0
   1ce50:	movhi	r2, #1
   1ce54:	cmp	r3, #0
   1ce58:	movne	r2, #0
   1ce5c:	cmp	r2, #0
   1ce60:	beq	1ce90 <__assert_fail@plt+0xba28>
   1ce64:	sub	r2, r6, #1
   1ce68:	add	r1, r9, r2
   1ce6c:	cmp	sl, #48	; 0x30
   1ce70:	str	r1, [sp, #56]	; 0x38
   1ce74:	str	r3, [sp, #60]	; 0x3c
   1ce78:	mov	r0, r9
   1ce7c:	beq	1d144 <__assert_fail@plt+0xbcdc>
   1ce80:	mov	r1, #32
   1ce84:	bl	11360 <memset@plt>
   1ce88:	ldr	r9, [sp, #56]	; 0x38
   1ce8c:	ldr	r3, [sp, #60]	; 0x3c
   1ce90:	ldr	r2, [sp, #52]	; 0x34
   1ce94:	strb	r2, [r9], #1
   1ce98:	ldr	r2, [sp, #16]
   1ce9c:	add	fp, fp, r8
   1cea0:	sub	r2, r2, fp
   1cea4:	b	1c110 <__assert_fail@plt+0xaca8>
   1cea8:	mov	r1, #0
   1ceac:	str	r1, [sp, #52]	; 0x34
   1ceb0:	ldr	r7, [sp, #48]	; 0x30
   1ceb4:	cmp	r7, r2
   1ceb8:	bcs	1bb8c <__assert_fail@plt+0xa724>
   1cebc:	cmp	r9, #0
   1cec0:	beq	1cee0 <__assert_fail@plt+0xba78>
   1cec4:	mov	r0, r9
   1cec8:	mov	r2, r7
   1cecc:	mov	r1, #32
   1ced0:	str	r3, [sp, #56]	; 0x38
   1ced4:	bl	11360 <memset@plt>
   1ced8:	ldr	r3, [sp, #56]	; 0x38
   1cedc:	add	r9, r9, r7
   1cee0:	ldr	r2, [sp, #48]	; 0x30
   1cee4:	cmp	r2, r6
   1cee8:	add	fp, fp, r2
   1ceec:	sublt	r6, r6, r2
   1cef0:	ldr	r2, [sp, #52]	; 0x34
   1cef4:	movge	r6, #0
   1cef8:	cmp	r2, #0
   1cefc:	ldr	r2, [sp, #16]
   1cf00:	sub	r2, r2, fp
   1cf04:	bne	1cf30 <__assert_fail@plt+0xbac8>
   1cf08:	add	r7, r8, #10
   1cf0c:	sub	r7, r7, r4
   1cf10:	str	r6, [sp, #48]	; 0x30
   1cf14:	mov	sl, #95	; 0x5f
   1cf18:	b	1c110 <__assert_fail@plt+0xaca8>
   1cf1c:	mov	r3, #0
   1cf20:	str	r3, [sp, #48]	; 0x30
   1cf24:	b	1c034 <__assert_fail@plt+0xabcc>
   1cf28:	mov	sl, #43	; 0x2b
   1cf2c:	b	1cd7c <__assert_fail@plt+0xb914>
   1cf30:	cmp	r6, #1
   1cf34:	movcs	sl, r6
   1cf38:	movcc	sl, #1
   1cf3c:	cmp	sl, r2
   1cf40:	bcs	1bb8c <__assert_fail@plt+0xa724>
   1cf44:	cmp	r9, #0
   1cf48:	beq	1cf70 <__assert_fail@plt+0xbb08>
   1cf4c:	cmp	r6, #1
   1cf50:	movls	r2, #0
   1cf54:	movhi	r2, #1
   1cf58:	cmp	r3, #0
   1cf5c:	movne	r2, #0
   1cf60:	cmp	r2, #0
   1cf64:	bne	1d170 <__assert_fail@plt+0xbd08>
   1cf68:	ldr	r2, [sp, #52]	; 0x34
   1cf6c:	strb	r2, [r9], #1
   1cf70:	ldr	r2, [sp, #16]
   1cf74:	add	fp, fp, sl
   1cf78:	add	r7, r8, #10
   1cf7c:	sub	r7, r7, r4
   1cf80:	sub	r2, r2, fp
   1cf84:	str	r6, [sp, #48]	; 0x30
   1cf88:	mov	sl, #95	; 0x5f
   1cf8c:	b	1c110 <__assert_fail@plt+0xaca8>
   1cf90:	sub	r0, r1, #1
   1cf94:	tst	r0, #3
   1cf98:	ldrne	r1, [pc, #-1268]	; 1caac <__assert_fail@plt+0xb644>
   1cf9c:	bne	1cfe0 <__assert_fail@plt+0xbb78>
   1cfa0:	ldr	r3, [pc, #-1280]	; 1caa8 <__assert_fail@plt+0xb640>
   1cfa4:	smull	r3, r2, r3, r0
   1cfa8:	asr	r3, r0, #31
   1cfac:	rsb	r3, r3, r2, asr #5
   1cfb0:	add	r3, r3, r3, lsl #2
   1cfb4:	add	r3, r3, r3, lsl #2
   1cfb8:	cmp	r0, r3, lsl #2
   1cfbc:	ldrne	r1, [pc, #-1300]	; 1cab0 <__assert_fail@plt+0xb648>
   1cfc0:	bne	1cfe0 <__assert_fail@plt+0xbb78>
   1cfc4:	mov	r1, #400	; 0x190
   1cfc8:	bl	1f42c <__assert_fail@plt+0xdfc4>
   1cfcc:	ldr	r3, [pc, #-1320]	; 1caac <__assert_fail@plt+0xb644>
   1cfd0:	ldr	r2, [pc, #-1320]	; 1cab0 <__assert_fail@plt+0xb648>
   1cfd4:	cmp	r1, #0
   1cfd8:	movne	r1, r3
   1cfdc:	moveq	r1, r2
   1cfe0:	ldr	r3, [sp, #48]	; 0x30
   1cfe4:	mvn	r2, #0
   1cfe8:	add	ip, r3, r1
   1cfec:	ldr	r3, [sp, #52]	; 0x34
   1cff0:	ldr	r1, [pc, #-1344]	; 1cab8 <__assert_fail@plt+0xb650>
   1cff4:	sub	r3, ip, r3
   1cff8:	add	r3, r3, #380	; 0x17c
   1cffc:	add	r3, r3, #2
   1d000:	smull	r0, r1, r1, r3
   1d004:	add	r0, r1, r3
   1d008:	asr	r1, r3, #31
   1d00c:	rsb	r1, r1, r0, asr #2
   1d010:	rsb	r1, r1, r1, lsl #3
   1d014:	sub	r3, r3, r1
   1d018:	sub	r3, ip, r3
   1d01c:	add	r3, r3, #3
   1d020:	b	1c92c <__assert_fail@plt+0xb4c4>
   1d024:	cmp	r6, #8
   1d028:	bgt	1d1a8 <__assert_fail@plt+0xbd40>
   1d02c:	ldr	r3, [sp, #1196]	; 0x4ac
   1d030:	mov	r2, r6
   1d034:	ldr	r1, [pc, #-1416]	; 1cab4 <__assert_fail@plt+0xb64c>
   1d038:	add	r2, r2, #1
   1d03c:	cmp	r2, #9
   1d040:	smull	r0, r1, r1, r3
   1d044:	asr	r3, r3, #31
   1d048:	rsb	r3, r3, r1, asr #2
   1d04c:	bne	1d034 <__assert_fail@plt+0xbbcc>
   1d050:	str	r6, [sp, #48]	; 0x30
   1d054:	b	1c010 <__assert_fail@plt+0xaba8>
   1d058:	str	r3, [sp, #56]	; 0x38
   1d05c:	sub	r3, r6, #1
   1d060:	mov	r2, r3
   1d064:	mov	r0, r9
   1d068:	mov	r1, #32
   1d06c:	str	r3, [sp, #52]	; 0x34
   1d070:	bl	11360 <memset@plt>
   1d074:	ldr	r3, [sp, #52]	; 0x34
   1d078:	add	r9, r9, r3
   1d07c:	ldr	r3, [sp, #56]	; 0x38
   1d080:	b	1cdc4 <__assert_fail@plt+0xb95c>
   1d084:	ldr	r2, [pc, #-1492]	; 1cab8 <__assert_fail@plt+0xb650>
   1d088:	smull	r1, r2, r2, r3
   1d08c:	add	r2, r2, r3
   1d090:	asr	r3, r3, #31
   1d094:	rsb	r3, r3, r2, asr #2
   1d098:	mov	r2, #2
   1d09c:	add	r3, r3, #1
   1d0a0:	str	r2, [sp, #48]	; 0x30
   1d0a4:	b	1c010 <__assert_fail@plt+0xaba8>
   1d0a8:	ldr	lr, [pc, #-1524]	; 1cabc <__assert_fail@plt+0xb654>
   1d0ac:	add	r3, r8, #1888	; 0x760
   1d0b0:	sub	lr, lr, r2
   1d0b4:	add	r3, r3, #12
   1d0b8:	cmp	r8, lr
   1d0bc:	mov	r0, #0
   1d0c0:	add	r3, r3, r2
   1d0c4:	mov	r2, #4
   1d0c8:	movge	lr, #0
   1d0cc:	movlt	lr, #1
   1d0d0:	str	r0, [sp, #52]	; 0x34
   1d0d4:	str	r2, [sp, #48]	; 0x30
   1d0d8:	b	1c01c <__assert_fail@plt+0xabb4>
   1d0dc:	ldr	r1, [pc, #-1576]	; 1cabc <__assert_fail@plt+0xb654>
   1d0e0:	cmp	r2, r1
   1d0e4:	blt	1c988 <__assert_fail@plt+0xb520>
   1d0e8:	mov	r2, #2
   1d0ec:	add	r3, r3, #100	; 0x64
   1d0f0:	str	r2, [sp, #48]	; 0x30
   1d0f4:	b	1c010 <__assert_fail@plt+0xaba8>
   1d0f8:	bl	11180 <memcpy@plt>
   1d0fc:	b	1c7a8 <__assert_fail@plt+0xb340>
   1d100:	mov	r2, r7
   1d104:	ldr	r1, [sp, #40]	; 0x28
   1d108:	mov	r0, r9
   1d10c:	bl	1ba30 <__assert_fail@plt+0xa5c8>
   1d110:	b	1c7a8 <__assert_fail@plt+0xb340>
   1d114:	add	r1, r5, #2
   1d118:	mov	r0, #1
   1d11c:	mov	r2, r1
   1d120:	ldrb	r3, [r1], #1
   1d124:	add	r0, r0, #1
   1d128:	cmp	r3, #58	; 0x3a
   1d12c:	beq	1d11c <__assert_fail@plt+0xbcb4>
   1d130:	str	r0, [sp, #48]	; 0x30
   1d134:	b	1cca0 <__assert_fail@plt+0xb838>
   1d138:	mov	r7, r5
   1d13c:	mov	r4, #1
   1d140:	b	1c224 <__assert_fail@plt+0xadbc>
   1d144:	mov	r1, sl
   1d148:	ldr	r9, [sp, #56]	; 0x38
   1d14c:	bl	11360 <memset@plt>
   1d150:	ldr	r3, [sp, #60]	; 0x3c
   1d154:	b	1ce90 <__assert_fail@plt+0xba28>
   1d158:	mov	r0, r9
   1d15c:	mov	r1, sl
   1d160:	bl	11360 <memset@plt>
   1d164:	mov	r9, r7
   1d168:	ldrb	r4, [r5]
   1d16c:	b	1cc80 <__assert_fail@plt+0xb818>
   1d170:	sub	r7, r6, #1
   1d174:	mov	r0, r9
   1d178:	mov	r2, r7
   1d17c:	mov	r1, #32
   1d180:	str	r3, [sp, #48]	; 0x30
   1d184:	add	r9, r9, r7
   1d188:	bl	11360 <memset@plt>
   1d18c:	ldr	r3, [sp, #48]	; 0x30
   1d190:	b	1cf68 <__assert_fail@plt+0xbb00>
   1d194:	mov	r1, sl
   1d198:	bl	11360 <memset@plt>
   1d19c:	mov	r9, r8
   1d1a0:	ldr	r3, [sp, #56]	; 0x38
   1d1a4:	b	1c6c8 <__assert_fail@plt+0xb260>
   1d1a8:	ldr	r3, [sp, #1196]	; 0x4ac
   1d1ac:	str	r6, [sp, #48]	; 0x30
   1d1b0:	b	1c010 <__assert_fail@plt+0xaba8>
   1d1b4:	bl	111bc <__stack_chk_fail@plt>
   1d1b8:	mov	r3, #0
   1d1bc:	str	r3, [sp, #48]	; 0x30
   1d1c0:	b	1c048 <__assert_fail@plt+0xabe0>
   1d1c4:	mov	r5, r7
   1d1c8:	b	1c1f0 <__assert_fail@plt+0xad88>
   1d1cc:	ldrb	r3, [r5]
   1d1d0:	mov	r7, r5
   1d1d4:	b	1c9f8 <__assert_fail@plt+0xb590>
   1d1d8:	push	{r4, r5, lr}
   1d1dc:	sub	sp, sp, #28
   1d1e0:	ldr	r4, [pc, #72]	; 1d230 <__assert_fail@plt+0xbdc8>
   1d1e4:	ldr	ip, [sp, #44]	; 0x2c
   1d1e8:	ldr	r5, [sp, #40]	; 0x28
   1d1ec:	ldr	lr, [r4]
   1d1f0:	str	ip, [sp, #12]
   1d1f4:	str	lr, [sp, #20]
   1d1f8:	mov	ip, #0
   1d1fc:	add	lr, sp, #19
   1d200:	str	r5, [sp, #8]
   1d204:	str	ip, [sp]
   1d208:	str	lr, [sp, #4]
   1d20c:	strb	ip, [sp, #19]
   1d210:	bl	1bab0 <__assert_fail@plt+0xa648>
   1d214:	ldr	r2, [sp, #20]
   1d218:	ldr	r3, [r4]
   1d21c:	cmp	r2, r3
   1d220:	bne	1d22c <__assert_fail@plt+0xbdc4>
   1d224:	add	sp, sp, #28
   1d228:	pop	{r4, r5, pc}
   1d22c:	bl	111bc <__stack_chk_fail@plt>
   1d230:	andeq	r2, r3, r8, lsl #30
   1d234:	push	{r4, r5, lr}
   1d238:	sub	sp, sp, #12
   1d23c:	mov	r4, r0
   1d240:	bl	11378 <fileno@plt>
   1d244:	cmp	r0, #0
   1d248:	mov	r0, r4
   1d24c:	blt	1d2c8 <__assert_fail@plt+0xbe60>
   1d250:	bl	112ac <__freading@plt>
   1d254:	cmp	r0, #0
   1d258:	bne	1d294 <__assert_fail@plt+0xbe2c>
   1d25c:	mov	r0, r4
   1d260:	bl	1d2d4 <__assert_fail@plt+0xbe6c>
   1d264:	cmp	r0, #0
   1d268:	beq	1d2c4 <__assert_fail@plt+0xbe5c>
   1d26c:	bl	11330 <__errno_location@plt>
   1d270:	mov	r5, r0
   1d274:	mov	r0, r4
   1d278:	ldr	r4, [r5]
   1d27c:	bl	11390 <fclose@plt>
   1d280:	cmp	r4, #0
   1d284:	mvnne	r0, #0
   1d288:	strne	r4, [r5]
   1d28c:	add	sp, sp, #12
   1d290:	pop	{r4, r5, pc}
   1d294:	mov	r0, r4
   1d298:	bl	11378 <fileno@plt>
   1d29c:	mov	r3, #1
   1d2a0:	str	r3, [sp]
   1d2a4:	mov	r2, #0
   1d2a8:	mov	r3, #0
   1d2ac:	bl	1121c <lseek64@plt>
   1d2b0:	mvn	r3, #0
   1d2b4:	mvn	r2, #0
   1d2b8:	cmp	r1, r3
   1d2bc:	cmpeq	r0, r2
   1d2c0:	bne	1d25c <__assert_fail@plt+0xbdf4>
   1d2c4:	mov	r0, r4
   1d2c8:	add	sp, sp, #12
   1d2cc:	pop	{r4, r5, lr}
   1d2d0:	b	11390 <fclose@plt>
   1d2d4:	push	{r4, lr}
   1d2d8:	subs	r4, r0, #0
   1d2dc:	sub	sp, sp, #8
   1d2e0:	beq	1d2fc <__assert_fail@plt+0xbe94>
   1d2e4:	bl	112ac <__freading@plt>
   1d2e8:	cmp	r0, #0
   1d2ec:	beq	1d2fc <__assert_fail@plt+0xbe94>
   1d2f0:	ldr	r3, [r4]
   1d2f4:	tst	r3, #256	; 0x100
   1d2f8:	bne	1d30c <__assert_fail@plt+0xbea4>
   1d2fc:	mov	r0, r4
   1d300:	add	sp, sp, #8
   1d304:	pop	{r4, lr}
   1d308:	b	11150 <fflush@plt>
   1d30c:	mov	r3, #1
   1d310:	str	r3, [sp]
   1d314:	mov	r2, #0
   1d318:	mov	r3, #0
   1d31c:	mov	r0, r4
   1d320:	bl	1d334 <__assert_fail@plt+0xbecc>
   1d324:	mov	r0, r4
   1d328:	add	sp, sp, #8
   1d32c:	pop	{r4, lr}
   1d330:	b	11150 <fflush@plt>
   1d334:	push	{r4, r5, r6, r7, r8, lr}
   1d338:	sub	sp, sp, #8
   1d33c:	ldmib	r0, {ip, lr}
   1d340:	mov	r4, r0
   1d344:	ldr	r5, [sp, #32]
   1d348:	cmp	lr, ip
   1d34c:	beq	1d364 <__assert_fail@plt+0xbefc>
   1d350:	str	r5, [sp, #32]
   1d354:	mov	r0, r4
   1d358:	add	sp, sp, #8
   1d35c:	pop	{r4, r5, r6, r7, r8, lr}
   1d360:	b	1139c <fseeko64@plt>
   1d364:	ldr	lr, [r0, #20]
   1d368:	ldr	ip, [r0, #16]
   1d36c:	cmp	lr, ip
   1d370:	bne	1d350 <__assert_fail@plt+0xbee8>
   1d374:	ldr	r8, [r0, #36]	; 0x24
   1d378:	cmp	r8, #0
   1d37c:	bne	1d350 <__assert_fail@plt+0xbee8>
   1d380:	mov	r6, r2
   1d384:	mov	r7, r3
   1d388:	bl	11378 <fileno@plt>
   1d38c:	mov	r2, r6
   1d390:	mov	r3, r7
   1d394:	str	r5, [sp]
   1d398:	bl	1121c <lseek64@plt>
   1d39c:	mvn	r3, #0
   1d3a0:	mvn	r2, #0
   1d3a4:	cmp	r1, r3
   1d3a8:	cmpeq	r0, r2
   1d3ac:	beq	1d3cc <__assert_fail@plt+0xbf64>
   1d3b0:	ldr	r3, [r4]
   1d3b4:	strd	r0, [r4, #80]	; 0x50
   1d3b8:	mov	r0, r8
   1d3bc:	bic	r3, r3, #16
   1d3c0:	str	r3, [r4]
   1d3c4:	add	sp, sp, #8
   1d3c8:	pop	{r4, r5, r6, r7, r8, pc}
   1d3cc:	mvn	r0, #0
   1d3d0:	b	1d3c4 <__assert_fail@plt+0xbf5c>
   1d3d4:	ldr	r3, [r0]
   1d3d8:	orr	r3, r3, #32
   1d3dc:	str	r3, [r0]
   1d3e0:	bx	lr
   1d3e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3e8:	mov	r9, r2
   1d3ec:	ldr	r2, [pc, #3592]	; 1e1fc <__assert_fail@plt+0xcd94>
   1d3f0:	add	fp, sp, #32
   1d3f4:	sub	sp, sp, #540	; 0x21c
   1d3f8:	ldr	ip, [r2]
   1d3fc:	str	r0, [fp, #-504]	; 0xfffffe08
   1d400:	str	r1, [fp, #-532]	; 0xfffffdec
   1d404:	mov	r0, r9
   1d408:	sub	r2, fp, #484	; 0x1e4
   1d40c:	sub	r1, fp, #364	; 0x16c
   1d410:	mov	r4, r3
   1d414:	str	ip, [fp, #-40]	; 0xffffffd8
   1d418:	bl	1e334 <__assert_fail@plt+0xcecc>
   1d41c:	cmp	r0, #0
   1d420:	blt	1d9f8 <__assert_fail@plt+0xc590>
   1d424:	sub	r1, fp, #484	; 0x1e4
   1d428:	mov	r0, r4
   1d42c:	bl	1e200 <__assert_fail@plt+0xcd98>
   1d430:	cmp	r0, #0
   1d434:	blt	1dfb4 <__assert_fail@plt+0xcb4c>
   1d438:	ldr	r2, [fp, #-356]	; 0xfffffe9c
   1d43c:	ldr	r3, [fp, #-352]	; 0xfffffea0
   1d440:	adds	r2, r2, #7
   1d444:	mvncs	r2, #0
   1d448:	adds	r3, r3, r2
   1d44c:	bcs	1d9ec <__assert_fail@plt+0xc584>
   1d450:	mov	r0, #6
   1d454:	adds	r0, r3, r0
   1d458:	bcs	1d9ec <__assert_fail@plt+0xc584>
   1d45c:	cmp	r0, #4000	; 0xfa0
   1d460:	bcc	1d690 <__assert_fail@plt+0xc228>
   1d464:	cmn	r0, #1
   1d468:	beq	1d9ec <__assert_fail@plt+0xc584>
   1d46c:	bl	11288 <malloc@plt>
   1d470:	subs	r3, r0, #0
   1d474:	str	r3, [fp, #-516]	; 0xfffffdfc
   1d478:	beq	1d9ec <__assert_fail@plt+0xc584>
   1d47c:	str	r3, [fp, #-536]	; 0xfffffde8
   1d480:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1d484:	ldr	sl, [fp, #-360]	; 0xfffffe98
   1d488:	cmp	r3, #0
   1d48c:	ldr	r5, [fp, #-504]	; 0xfffffe08
   1d490:	ldrne	r3, [fp, #-532]	; 0xfffffdec
   1d494:	ldreq	r6, [fp, #-504]	; 0xfffffe08
   1d498:	mov	r4, #0
   1d49c:	ldrne	r6, [r3]
   1d4a0:	mov	r3, r5
   1d4a4:	ldr	r5, [sl]
   1d4a8:	str	r4, [fp, #-528]	; 0xfffffdf0
   1d4ac:	cmp	r5, r9
   1d4b0:	beq	1d908 <__assert_fail@plt+0xc4a0>
   1d4b4:	sub	r5, r5, r9
   1d4b8:	adds	r2, r4, r5
   1d4bc:	mov	r7, r2
   1d4c0:	bcs	1d910 <__assert_fail@plt+0xc4a8>
   1d4c4:	cmp	r6, r2
   1d4c8:	bcs	1d53c <__assert_fail@plt+0xc0d4>
   1d4cc:	cmp	r6, #0
   1d4d0:	bne	1da00 <__assert_fail@plt+0xc598>
   1d4d4:	cmp	r2, #12
   1d4d8:	movls	r6, #12
   1d4dc:	bhi	1da10 <__assert_fail@plt+0xc5a8>
   1d4e0:	ldr	r2, [fp, #-504]	; 0xfffffe08
   1d4e4:	cmp	r3, r2
   1d4e8:	cmpne	r3, #0
   1d4ec:	sub	r8, r3, r2
   1d4f0:	clz	r8, r8
   1d4f4:	lsr	r8, r8, #5
   1d4f8:	bne	1d9a4 <__assert_fail@plt+0xc53c>
   1d4fc:	mov	r0, r6
   1d500:	str	r3, [fp, #-508]	; 0xfffffe04
   1d504:	bl	11288 <malloc@plt>
   1d508:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1d50c:	subs	ip, r0, #0
   1d510:	beq	1ddc8 <__assert_fail@plt+0xc960>
   1d514:	cmp	r4, #0
   1d518:	moveq	r8, #0
   1d51c:	cmp	r8, #0
   1d520:	moveq	r3, ip
   1d524:	beq	1d53c <__assert_fail@plt+0xc0d4>
   1d528:	mov	r1, r3
   1d52c:	mov	r2, r4
   1d530:	str	ip, [fp, #-508]	; 0xfffffe04
   1d534:	bl	11180 <memcpy@plt>
   1d538:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1d53c:	add	r0, r3, r4
   1d540:	mov	r2, r5
   1d544:	mov	r1, r9
   1d548:	str	r3, [fp, #-508]	; 0xfffffe04
   1d54c:	bl	11180 <memcpy@plt>
   1d550:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1d554:	ldr	r2, [fp, #-364]	; 0xfffffe94
   1d558:	ldr	r1, [fp, #-528]	; 0xfffffdf0
   1d55c:	cmp	r2, r1
   1d560:	beq	1e09c <__assert_fail@plt+0xcc34>
   1d564:	ldrb	r1, [sl, #36]	; 0x24
   1d568:	ldr	r2, [sl, #40]	; 0x28
   1d56c:	cmp	r1, #37	; 0x25
   1d570:	beq	1d850 <__assert_fail@plt+0xc3e8>
   1d574:	cmn	r2, #1
   1d578:	beq	1e1f8 <__assert_fail@plt+0xcd90>
   1d57c:	ldr	r9, [fp, #-480]	; 0xfffffe20
   1d580:	cmp	r1, #110	; 0x6e
   1d584:	add	r1, r9, r2, lsl #4
   1d588:	ldr	r5, [r9, r2, lsl #4]
   1d58c:	beq	1d9c8 <__assert_fail@plt+0xc560>
   1d590:	ldr	r2, [sl, #8]
   1d594:	ldr	r0, [fp, #-516]	; 0xfffffdfc
   1d598:	tst	r2, #1
   1d59c:	mov	r1, #37	; 0x25
   1d5a0:	strb	r1, [r0]
   1d5a4:	ldrne	r0, [fp, #-516]	; 0xfffffdfc
   1d5a8:	movne	r1, #39	; 0x27
   1d5ac:	addne	r4, r0, #2
   1d5b0:	strbne	r1, [r0, #1]
   1d5b4:	addeq	r4, r0, #1
   1d5b8:	tst	r2, #2
   1d5bc:	movne	r1, #45	; 0x2d
   1d5c0:	strbne	r1, [r4], #1
   1d5c4:	tst	r2, #4
   1d5c8:	movne	r1, #43	; 0x2b
   1d5cc:	strbne	r1, [r4], #1
   1d5d0:	tst	r2, #8
   1d5d4:	movne	r1, #32
   1d5d8:	strbne	r1, [r4], #1
   1d5dc:	tst	r2, #16
   1d5e0:	movne	r1, #35	; 0x23
   1d5e4:	strbne	r1, [r4], #1
   1d5e8:	tst	r2, #64	; 0x40
   1d5ec:	movne	r1, #73	; 0x49
   1d5f0:	strbne	r1, [r4], #1
   1d5f4:	tst	r2, #32
   1d5f8:	movne	r2, #48	; 0x30
   1d5fc:	strbne	r2, [r4], #1
   1d600:	ldr	r1, [sl, #12]
   1d604:	ldr	r8, [sl, #16]
   1d608:	cmp	r1, r8
   1d60c:	beq	1d62c <__assert_fail@plt+0xc1c4>
   1d610:	sub	r8, r8, r1
   1d614:	mov	r0, r4
   1d618:	mov	r2, r8
   1d61c:	str	r3, [fp, #-508]	; 0xfffffe04
   1d620:	bl	11180 <memcpy@plt>
   1d624:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1d628:	add	r4, r4, r8
   1d62c:	ldr	r1, [sl, #24]
   1d630:	ldr	r8, [sl, #28]
   1d634:	cmp	r1, r8
   1d638:	beq	1d658 <__assert_fail@plt+0xc1f0>
   1d63c:	sub	r8, r8, r1
   1d640:	mov	r0, r4
   1d644:	mov	r2, r8
   1d648:	str	r3, [fp, #-508]	; 0xfffffe04
   1d64c:	bl	11180 <memcpy@plt>
   1d650:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1d654:	add	r4, r4, r8
   1d658:	sub	r2, r5, #7
   1d65c:	cmp	r2, #9
   1d660:	ldrls	pc, [pc, r2, lsl #2]
   1d664:	b	1d6c0 <__assert_fail@plt+0xc258>
   1d668:			; <UNDEFINED> instruction: 0x0001d6b8
   1d66c:			; <UNDEFINED> instruction: 0x0001d6b8
   1d670:			; <UNDEFINED> instruction: 0x0001d6b0
   1d674:			; <UNDEFINED> instruction: 0x0001d6b0
   1d678:	andeq	sp, r1, r0, asr #13
   1d67c:	andeq	sp, r1, r0, lsr #20
   1d680:	andeq	sp, r1, r0, asr #13
   1d684:			; <UNDEFINED> instruction: 0x0001d6b8
   1d688:	andeq	sp, r1, r0, asr #13
   1d68c:			; <UNDEFINED> instruction: 0x0001d6b8
   1d690:	add	r3, r3, #13
   1d694:	bic	r3, r3, #7
   1d698:	sub	sp, sp, r3
   1d69c:	add	r3, sp, #32
   1d6a0:	str	r3, [fp, #-516]	; 0xfffffdfc
   1d6a4:	mov	r3, #0
   1d6a8:	str	r3, [fp, #-536]	; 0xfffffde8
   1d6ac:	b	1d480 <__assert_fail@plt+0xc018>
   1d6b0:	mov	r2, #108	; 0x6c
   1d6b4:	strb	r2, [r4], #1
   1d6b8:	mov	r2, #108	; 0x6c
   1d6bc:	strb	r2, [r4], #1
   1d6c0:	ldrb	r2, [sl, #36]	; 0x24
   1d6c4:	mov	r1, #0
   1d6c8:	strb	r1, [r4, #1]
   1d6cc:	strb	r2, [r4]
   1d6d0:	ldr	r2, [sl, #20]
   1d6d4:	cmn	r2, #1
   1d6d8:	beq	1de78 <__assert_fail@plt+0xca10>
   1d6dc:	ldr	r1, [r9, r2, lsl #4]
   1d6e0:	add	r2, r9, r2, lsl #4
   1d6e4:	cmp	r1, #5
   1d6e8:	bne	1e1f8 <__assert_fail@plt+0xcd90>
   1d6ec:	ldr	r2, [r2, #8]
   1d6f0:	mov	r8, #1
   1d6f4:	str	r2, [fp, #-492]	; 0xfffffe14
   1d6f8:	ldr	r2, [sl, #32]
   1d6fc:	cmn	r2, #1
   1d700:	beq	1d728 <__assert_fail@plt+0xc2c0>
   1d704:	ldr	r1, [r9, r2, lsl #4]
   1d708:	add	r9, r9, r2, lsl #4
   1d70c:	cmp	r1, #5
   1d710:	bne	1e1f8 <__assert_fail@plt+0xcd90>
   1d714:	sub	r2, fp, #36	; 0x24
   1d718:	add	r2, r2, r8, lsl #2
   1d71c:	ldr	r1, [r9, #8]
   1d720:	add	r8, r8, #1
   1d724:	str	r1, [r2, #-456]	; 0xfffffe38
   1d728:	mov	r2, #2
   1d72c:	adds	r2, r7, r2
   1d730:	str	r2, [fp, #-524]	; 0xfffffdf4
   1d734:	bcs	1deb0 <__assert_fail@plt+0xca48>
   1d738:	cmp	r6, r2
   1d73c:	bcs	1deb8 <__assert_fail@plt+0xca50>
   1d740:	cmp	r6, #0
   1d744:	bne	1dd74 <__assert_fail@plt+0xc90c>
   1d748:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1d74c:	cmp	r2, #12
   1d750:	movls	r6, #12
   1d754:	bhi	1dd88 <__assert_fail@plt+0xc920>
   1d758:	ldr	r1, [fp, #-504]	; 0xfffffe08
   1d75c:	sub	r2, r3, r1
   1d760:	cmp	r3, r1
   1d764:	cmpne	r3, #0
   1d768:	clz	r2, r2
   1d76c:	lsr	r2, r2, #5
   1d770:	str	r2, [fp, #-508]	; 0xfffffe04
   1d774:	bne	1de80 <__assert_fail@plt+0xca18>
   1d778:	mov	r0, r6
   1d77c:	str	r3, [fp, #-512]	; 0xfffffe00
   1d780:	bl	11288 <malloc@plt>
   1d784:	ldr	r3, [fp, #-512]	; 0xfffffe00
   1d788:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1d78c:	subs	r9, r0, #0
   1d790:	beq	1ddc8 <__assert_fail@plt+0xc960>
   1d794:	cmp	r7, #0
   1d798:	moveq	r2, #0
   1d79c:	cmp	r2, #0
   1d7a0:	beq	1d7b0 <__assert_fail@plt+0xc348>
   1d7a4:	mov	r1, r3
   1d7a8:	mov	r2, r7
   1d7ac:	bl	11180 <memcpy@plt>
   1d7b0:	mov	r3, #0
   1d7b4:	strb	r3, [r9, r7]
   1d7b8:	bl	11330 <__errno_location@plt>
   1d7bc:	sub	r3, r5, #1
   1d7c0:	str	r3, [fp, #-520]	; 0xfffffdf8
   1d7c4:	ldr	r3, [r0]
   1d7c8:	str	r0, [fp, #-508]	; 0xfffffe04
   1d7cc:	str	r3, [fp, #-540]	; 0xfffffde4
   1d7d0:	sub	r3, r6, r7
   1d7d4:	str	r3, [fp, #-512]	; 0xfffffe00
   1d7d8:	ldr	r3, [fp, #-512]	; 0xfffffe00
   1d7dc:	mvn	r2, #0
   1d7e0:	cmp	r3, #0
   1d7e4:	str	r2, [fp, #-496]	; 0xfffffe10
   1d7e8:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1d7ec:	movge	r5, r3
   1d7f0:	ldr	r3, [fp, #-520]	; 0xfffffdf8
   1d7f4:	mov	r1, #0
   1d7f8:	str	r1, [r2]
   1d7fc:	mvnlt	r5, #-2147483648	; 0x80000000
   1d800:	cmp	r3, #16
   1d804:	ldrls	pc, [pc, r3, lsl #2]
   1d808:	b	1e1f8 <__assert_fail@plt+0xcd90>
   1d80c:	andeq	sp, r1, r4, asr sp
   1d810:	andeq	sp, r1, r4, lsr sp
   1d814:	ldrdeq	sp, [r1], -r8
   1d818:	andeq	sp, r1, ip, lsl #25
   1d81c:	andeq	sp, r1, ip, lsr #20
   1d820:	andeq	sp, r1, ip, lsr #20
   1d824:	andeq	sp, r1, ip, lsr #20
   1d828:	andeq	sp, r1, ip, lsr #20
   1d82c:	andeq	sp, r1, r0, asr fp
   1d830:	andeq	sp, r1, r0, asr fp
   1d834:	andeq	sp, r1, r0, asr #24
   1d838:	andeq	sp, r1, r0, asr #24
   1d83c:	andeq	sp, r1, ip, lsr #20
   1d840:	andeq	sp, r1, ip, lsr #20
   1d844:	andeq	sp, r1, ip, lsr #20
   1d848:	andeq	sp, r1, ip, lsr #20
   1d84c:	andeq	sp, r1, ip, lsr #20
   1d850:	cmn	r2, #1
   1d854:	bne	1e1f8 <__assert_fail@plt+0xcd90>
   1d858:	mov	r2, #1
   1d85c:	adds	r2, r7, r2
   1d860:	mov	r4, r2
   1d864:	bcs	1dea0 <__assert_fail@plt+0xca38>
   1d868:	cmp	r6, r2
   1d86c:	bcs	1d8e0 <__assert_fail@plt+0xc478>
   1d870:	cmp	r6, #0
   1d874:	bne	1ddc4 <__assert_fail@plt+0xc95c>
   1d878:	cmp	r2, #12
   1d87c:	movls	r6, #12
   1d880:	bhi	1dffc <__assert_fail@plt+0xcb94>
   1d884:	ldr	r2, [fp, #-504]	; 0xfffffe08
   1d888:	cmp	r3, r2
   1d88c:	cmpne	r3, #0
   1d890:	sub	r5, r3, r2
   1d894:	clz	r5, r5
   1d898:	lsr	r5, r5, #5
   1d89c:	bne	1df90 <__assert_fail@plt+0xcb28>
   1d8a0:	mov	r0, r6
   1d8a4:	str	r3, [fp, #-508]	; 0xfffffe04
   1d8a8:	bl	11288 <malloc@plt>
   1d8ac:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1d8b0:	subs	ip, r0, #0
   1d8b4:	beq	1ddc8 <__assert_fail@plt+0xc960>
   1d8b8:	cmp	r7, #0
   1d8bc:	moveq	r5, #0
   1d8c0:	cmp	r5, #0
   1d8c4:	moveq	r3, ip
   1d8c8:	beq	1d8e0 <__assert_fail@plt+0xc478>
   1d8cc:	mov	r1, r3
   1d8d0:	mov	r2, r7
   1d8d4:	str	ip, [fp, #-508]	; 0xfffffe04
   1d8d8:	bl	11180 <memcpy@plt>
   1d8dc:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1d8e0:	mov	r2, #37	; 0x25
   1d8e4:	strb	r2, [r3, r7]
   1d8e8:	ldr	r9, [sl, #4]
   1d8ec:	add	sl, sl, #44	; 0x2c
   1d8f0:	ldr	r2, [fp, #-528]	; 0xfffffdf0
   1d8f4:	ldr	r5, [sl]
   1d8f8:	add	r2, r2, #1
   1d8fc:	cmp	r5, r9
   1d900:	str	r2, [fp, #-528]	; 0xfffffdf0
   1d904:	bne	1d4b4 <__assert_fail@plt+0xc04c>
   1d908:	mov	r7, r4
   1d90c:	b	1d554 <__assert_fail@plt+0xc0ec>
   1d910:	cmn	r6, #1
   1d914:	beq	1df88 <__assert_fail@plt+0xcb20>
   1d918:	mov	r5, r3
   1d91c:	bl	11330 <__errno_location@plt>
   1d920:	mov	r9, r5
   1d924:	str	r0, [fp, #-508]	; 0xfffffe04
   1d928:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1d92c:	cmp	r9, r3
   1d930:	cmpne	r9, #0
   1d934:	bne	1dde4 <__assert_fail@plt+0xc97c>
   1d938:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1d93c:	cmp	r3, #0
   1d940:	beq	1d94c <__assert_fail@plt+0xc4e4>
   1d944:	mov	r0, r3
   1d948:	bl	1115c <free@plt>
   1d94c:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1d950:	sub	r3, fp, #348	; 0x15c
   1d954:	cmp	r0, r3
   1d958:	beq	1d960 <__assert_fail@plt+0xc4f8>
   1d95c:	bl	1115c <free@plt>
   1d960:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1d964:	sub	r3, fp, #476	; 0x1dc
   1d968:	cmp	r0, r3
   1d96c:	beq	1d974 <__assert_fail@plt+0xc50c>
   1d970:	bl	1115c <free@plt>
   1d974:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1d978:	mov	r5, #0
   1d97c:	mov	r3, #12
   1d980:	str	r3, [r2]
   1d984:	ldr	r3, [pc, #2160]	; 1e1fc <__assert_fail@plt+0xcd94>
   1d988:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1d98c:	mov	r0, r5
   1d990:	ldr	r3, [r3]
   1d994:	cmp	r2, r3
   1d998:	bne	1e1e8 <__assert_fail@plt+0xcd80>
   1d99c:	sub	sp, fp, #32
   1d9a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9a4:	mov	r0, r3
   1d9a8:	mov	r1, r6
   1d9ac:	str	r3, [fp, #-508]	; 0xfffffe04
   1d9b0:	bl	111d4 <realloc@plt>
   1d9b4:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1d9b8:	cmp	r0, #0
   1d9bc:	beq	1e180 <__assert_fail@plt+0xcd18>
   1d9c0:	mov	r3, r0
   1d9c4:	b	1d53c <__assert_fail@plt+0xc0d4>
   1d9c8:	sub	r5, r5, #18
   1d9cc:	cmp	r5, #4
   1d9d0:	ldrls	pc, [pc, r5, lsl #2]
   1d9d4:	b	1e1f8 <__assert_fail@plt+0xcd90>
   1d9d8:	andeq	sp, r1, r8, lsl lr
   1d9dc:	andeq	sp, r1, r8, lsl #28
   1d9e0:			; <UNDEFINED> instruction: 0x0001ddb4
   1d9e4:			; <UNDEFINED> instruction: 0x0001ddb4
   1d9e8:	strdeq	sp, [r1], -r0
   1d9ec:	bl	11330 <__errno_location@plt>
   1d9f0:	str	r0, [fp, #-508]	; 0xfffffe04
   1d9f4:	b	1d94c <__assert_fail@plt+0xc4e4>
   1d9f8:	mov	r5, #0
   1d9fc:	b	1d984 <__assert_fail@plt+0xc51c>
   1da00:	blt	1ddc8 <__assert_fail@plt+0xc960>
   1da04:	lsl	r6, r6, #1
   1da08:	cmp	r6, r2
   1da0c:	bcs	1d4e0 <__assert_fail@plt+0xc078>
   1da10:	cmn	r2, #1
   1da14:	beq	1d918 <__assert_fail@plt+0xc4b0>
   1da18:	mov	r6, r2
   1da1c:	b	1d4e0 <__assert_fail@plt+0xc078>
   1da20:	mov	r2, #76	; 0x4c
   1da24:	strb	r2, [r4], #1
   1da28:	b	1d6c0 <__assert_fail@plt+0xc258>
   1da2c:	ldr	r2, [sl, #40]	; 0x28
   1da30:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1da34:	cmp	r8, #1
   1da38:	add	r3, r3, r2, lsl #4
   1da3c:	add	r0, r9, r7
   1da40:	ldr	r3, [r3, #8]
   1da44:	beq	1dca8 <__assert_fail@plt+0xc840>
   1da48:	cmp	r8, #2
   1da4c:	beq	1dcfc <__assert_fail@plt+0xc894>
   1da50:	str	r3, [sp, #4]
   1da54:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1da58:	sub	r2, fp, #496	; 0x1f0
   1da5c:	str	r2, [sp, #8]
   1da60:	str	r3, [sp]
   1da64:	mov	r2, #1
   1da68:	mvn	r3, #0
   1da6c:	mov	r1, r5
   1da70:	bl	1145c <__snprintf_chk@plt>
   1da74:	ldr	r2, [fp, #-496]	; 0xfffffe10
   1da78:	cmp	r2, #0
   1da7c:	blt	1dba4 <__assert_fail@plt+0xc73c>
   1da80:	cmp	r2, r5
   1da84:	mov	r3, r2
   1da88:	bcs	1da9c <__assert_fail@plt+0xc634>
   1da8c:	add	r1, r9, r2
   1da90:	ldrb	r1, [r1, r7]
   1da94:	cmp	r1, #0
   1da98:	bne	1e1f8 <__assert_fail@plt+0xcd90>
   1da9c:	cmp	r2, r0
   1daa0:	bge	1daac <__assert_fail@plt+0xc644>
   1daa4:	mov	r3, r0
   1daa8:	str	r0, [fp, #-496]	; 0xfffffe10
   1daac:	add	r2, r3, #1
   1dab0:	cmp	r2, r5
   1dab4:	bcc	1e00c <__assert_fail@plt+0xcba4>
   1dab8:	cmn	r5, #-2147483647	; 0x80000001
   1dabc:	beq	1e024 <__assert_fail@plt+0xcbbc>
   1dac0:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1dac4:	add	r3, r3, r2
   1dac8:	cmp	r7, r3
   1dacc:	mvnhi	r3, #0
   1dad0:	cmp	r6, #0
   1dad4:	blt	1de28 <__assert_fail@plt+0xc9c0>
   1dad8:	lsl	r2, r6, #1
   1dadc:	cmp	r2, r3
   1dae0:	movcs	r3, r2
   1dae4:	cmp	r6, r3
   1dae8:	bcs	1d7d8 <__assert_fail@plt+0xc370>
   1daec:	cmp	r2, r3
   1daf0:	bcc	1de34 <__assert_fail@plt+0xc9cc>
   1daf4:	mov	r6, r2
   1daf8:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1dafc:	cmp	r9, r3
   1db00:	cmpne	r9, #0
   1db04:	sub	r5, r9, r3
   1db08:	clz	r5, r5
   1db0c:	lsr	r5, r5, #5
   1db10:	bne	1de44 <__assert_fail@plt+0xc9dc>
   1db14:	mov	r0, r6
   1db18:	bl	11288 <malloc@plt>
   1db1c:	subs	r3, r0, #0
   1db20:	beq	1d928 <__assert_fail@plt+0xc4c0>
   1db24:	cmp	r7, #0
   1db28:	moveq	r5, #0
   1db2c:	cmp	r5, #0
   1db30:	beq	1de68 <__assert_fail@plt+0xca00>
   1db34:	mov	r1, r9
   1db38:	mov	r2, r7
   1db3c:	mov	r9, r3
   1db40:	bl	11180 <memcpy@plt>
   1db44:	sub	r3, r6, r7
   1db48:	str	r3, [fp, #-512]	; 0xfffffe00
   1db4c:	b	1d7d8 <__assert_fail@plt+0xc370>
   1db50:	ldr	r2, [sl, #40]	; 0x28
   1db54:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1db58:	cmp	r8, #1
   1db5c:	add	r3, r3, r2, lsl #4
   1db60:	add	r0, r9, r7
   1db64:	ldrd	r2, [r3, #8]
   1db68:	beq	1def4 <__assert_fail@plt+0xca8c>
   1db6c:	cmp	r8, #2
   1db70:	beq	1dec0 <__assert_fail@plt+0xca58>
   1db74:	strd	r2, [sp, #8]
   1db78:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1db7c:	sub	r1, fp, #496	; 0x1f0
   1db80:	str	r1, [sp, #16]
   1db84:	str	r3, [sp]
   1db88:	mov	r2, #1
   1db8c:	mvn	r3, #0
   1db90:	mov	r1, r5
   1db94:	bl	1145c <__snprintf_chk@plt>
   1db98:	ldr	r2, [fp, #-496]	; 0xfffffe10
   1db9c:	cmp	r2, #0
   1dba0:	bge	1da80 <__assert_fail@plt+0xc618>
   1dba4:	ldrb	r3, [r4, #1]
   1dba8:	cmp	r3, #0
   1dbac:	movne	r3, #0
   1dbb0:	strbne	r3, [r4, #1]
   1dbb4:	bne	1d7d8 <__assert_fail@plt+0xc370>
   1dbb8:	cmp	r0, #0
   1dbbc:	bge	1daa4 <__assert_fail@plt+0xc63c>
   1dbc0:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1dbc4:	ldr	r4, [r3]
   1dbc8:	cmp	r4, #0
   1dbcc:	bne	1dbe4 <__assert_fail@plt+0xc77c>
   1dbd0:	ldrb	r3, [sl, #36]	; 0x24
   1dbd4:	and	r3, r3, #239	; 0xef
   1dbd8:	cmp	r3, #99	; 0x63
   1dbdc:	moveq	r4, #84	; 0x54
   1dbe0:	movne	r4, #22
   1dbe4:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1dbe8:	cmp	r9, r3
   1dbec:	cmpne	r9, #0
   1dbf0:	bne	1e084 <__assert_fail@plt+0xcc1c>
   1dbf4:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1dbf8:	cmp	r3, #0
   1dbfc:	beq	1dc08 <__assert_fail@plt+0xc7a0>
   1dc00:	mov	r0, r3
   1dc04:	bl	1115c <free@plt>
   1dc08:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1dc0c:	sub	r3, fp, #348	; 0x15c
   1dc10:	cmp	r0, r3
   1dc14:	beq	1dc1c <__assert_fail@plt+0xc7b4>
   1dc18:	bl	1115c <free@plt>
   1dc1c:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1dc20:	sub	r3, fp, #476	; 0x1dc
   1dc24:	cmp	r0, r3
   1dc28:	beq	1dc30 <__assert_fail@plt+0xc7c8>
   1dc2c:	bl	1115c <free@plt>
   1dc30:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1dc34:	mov	r5, #0
   1dc38:	str	r4, [r3]
   1dc3c:	b	1d984 <__assert_fail@plt+0xc51c>
   1dc40:	ldr	r2, [sl, #40]	; 0x28
   1dc44:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1dc48:	cmp	r8, #1
   1dc4c:	add	r3, r3, r2, lsl #4
   1dc50:	add	r0, r9, r7
   1dc54:	ldrd	r2, [r3, #8]
   1dc58:	beq	1df58 <__assert_fail@plt+0xcaf0>
   1dc5c:	cmp	r8, #2
   1dc60:	beq	1df24 <__assert_fail@plt+0xcabc>
   1dc64:	strd	r2, [sp, #8]
   1dc68:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1dc6c:	sub	r1, fp, #496	; 0x1f0
   1dc70:	str	r1, [sp, #16]
   1dc74:	str	r3, [sp]
   1dc78:	mov	r2, #1
   1dc7c:	mvn	r3, #0
   1dc80:	mov	r1, r5
   1dc84:	bl	1145c <__snprintf_chk@plt>
   1dc88:	b	1da74 <__assert_fail@plt+0xc60c>
   1dc8c:	ldr	r2, [sl, #40]	; 0x28
   1dc90:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1dc94:	cmp	r8, #1
   1dc98:	add	r3, r3, r2, lsl #4
   1dc9c:	add	r0, r9, r7
   1dca0:	ldrh	r3, [r3, #8]
   1dca4:	bne	1da48 <__assert_fail@plt+0xc5e0>
   1dca8:	ldr	r2, [fp, #-492]	; 0xfffffe14
   1dcac:	str	r3, [sp, #8]
   1dcb0:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1dcb4:	sub	r1, fp, #496	; 0x1f0
   1dcb8:	str	r1, [sp, #12]
   1dcbc:	str	r3, [sp]
   1dcc0:	str	r2, [sp, #4]
   1dcc4:	mvn	r3, #0
   1dcc8:	mov	r2, r8
   1dccc:	mov	r1, r5
   1dcd0:	bl	1145c <__snprintf_chk@plt>
   1dcd4:	b	1da74 <__assert_fail@plt+0xc60c>
   1dcd8:	ldr	r2, [sl, #40]	; 0x28
   1dcdc:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1dce0:	cmp	r8, #1
   1dce4:	add	r3, r3, r2, lsl #4
   1dce8:	add	r0, r9, r7
   1dcec:	ldrsh	r3, [r3, #8]
   1dcf0:	beq	1dca8 <__assert_fail@plt+0xc840>
   1dcf4:	cmp	r8, #2
   1dcf8:	bne	1da50 <__assert_fail@plt+0xc5e8>
   1dcfc:	ldr	r1, [fp, #-488]	; 0xfffffe18
   1dd00:	ldr	r2, [fp, #-492]	; 0xfffffe14
   1dd04:	str	r3, [sp, #12]
   1dd08:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1dd0c:	sub	ip, fp, #496	; 0x1f0
   1dd10:	str	r3, [sp]
   1dd14:	str	r1, [sp, #8]
   1dd18:	str	r2, [sp, #4]
   1dd1c:	str	ip, [sp, #16]
   1dd20:	mvn	r3, #0
   1dd24:	mov	r2, #1
   1dd28:	mov	r1, r5
   1dd2c:	bl	1145c <__snprintf_chk@plt>
   1dd30:	b	1da74 <__assert_fail@plt+0xc60c>
   1dd34:	ldr	r2, [sl, #40]	; 0x28
   1dd38:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1dd3c:	cmp	r8, #1
   1dd40:	add	r3, r3, r2, lsl #4
   1dd44:	add	r0, r9, r7
   1dd48:	ldrb	r3, [r3, #8]
   1dd4c:	bne	1da48 <__assert_fail@plt+0xc5e0>
   1dd50:	b	1dca8 <__assert_fail@plt+0xc840>
   1dd54:	ldr	r2, [sl, #40]	; 0x28
   1dd58:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1dd5c:	cmp	r8, #1
   1dd60:	add	r3, r3, r2, lsl #4
   1dd64:	add	r0, r9, r7
   1dd68:	ldrsb	r3, [r3, #8]
   1dd6c:	bne	1da48 <__assert_fail@plt+0xc5e0>
   1dd70:	b	1dca8 <__assert_fail@plt+0xc840>
   1dd74:	blt	1ddc8 <__assert_fail@plt+0xc960>
   1dd78:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1dd7c:	lsl	r6, r6, #1
   1dd80:	cmp	r6, r2
   1dd84:	bcs	1d758 <__assert_fail@plt+0xc2f0>
   1dd88:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1dd8c:	mov	r1, #0
   1dd90:	cmn	r2, #1
   1dd94:	movne	r2, #0
   1dd98:	moveq	r2, #1
   1dd9c:	cmp	r1, r1
   1dda0:	movne	r2, #255	; 0xff
   1dda4:	cmp	r2, r1
   1dda8:	bne	1d918 <__assert_fail@plt+0xc4b0>
   1ddac:	ldr	r6, [fp, #-524]	; 0xfffffdf4
   1ddb0:	b	1d758 <__assert_fail@plt+0xc2f0>
   1ddb4:	ldr	r2, [r1, #8]
   1ddb8:	mov	r4, r7
   1ddbc:	str	r7, [r2]
   1ddc0:	b	1d8e8 <__assert_fail@plt+0xc480>
   1ddc4:	bge	1dff0 <__assert_fail@plt+0xcb88>
   1ddc8:	mov	r9, r3
   1ddcc:	bl	11330 <__errno_location@plt>
   1ddd0:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1ddd4:	cmp	r9, r3
   1ddd8:	cmpne	r9, #0
   1dddc:	str	r0, [fp, #-508]	; 0xfffffe04
   1dde0:	beq	1d938 <__assert_fail@plt+0xc4d0>
   1dde4:	mov	r0, r9
   1dde8:	bl	1115c <free@plt>
   1ddec:	b	1d938 <__assert_fail@plt+0xc4d0>
   1ddf0:	ldr	r2, [r1, #8]
   1ddf4:	mov	r1, #0
   1ddf8:	mov	r4, r7
   1ddfc:	str	r7, [r2]
   1de00:	str	r1, [r2, #4]
   1de04:	b	1d8e8 <__assert_fail@plt+0xc480>
   1de08:	ldr	r2, [r1, #8]
   1de0c:	mov	r4, r7
   1de10:	strh	r7, [r2]
   1de14:	b	1d8e8 <__assert_fail@plt+0xc480>
   1de18:	ldr	r2, [r1, #8]
   1de1c:	mov	r4, r7
   1de20:	strb	r7, [r2]
   1de24:	b	1d8e8 <__assert_fail@plt+0xc480>
   1de28:	cmn	r6, #1
   1de2c:	beq	1d7d8 <__assert_fail@plt+0xc370>
   1de30:	b	1d928 <__assert_fail@plt+0xc4c0>
   1de34:	cmn	r3, #1
   1de38:	beq	1d928 <__assert_fail@plt+0xc4c0>
   1de3c:	mov	r6, r3
   1de40:	b	1daf8 <__assert_fail@plt+0xc690>
   1de44:	mov	r1, r6
   1de48:	mov	r0, r9
   1de4c:	bl	111d4 <realloc@plt>
   1de50:	cmp	r0, #0
   1de54:	beq	1d928 <__assert_fail@plt+0xc4c0>
   1de58:	sub	r3, r6, r7
   1de5c:	mov	r9, r0
   1de60:	str	r3, [fp, #-512]	; 0xfffffe00
   1de64:	b	1d7d8 <__assert_fail@plt+0xc370>
   1de68:	mov	r9, r3
   1de6c:	sub	r3, r6, r7
   1de70:	str	r3, [fp, #-512]	; 0xfffffe00
   1de74:	b	1d7d8 <__assert_fail@plt+0xc370>
   1de78:	mov	r8, #0
   1de7c:	b	1d6f8 <__assert_fail@plt+0xc290>
   1de80:	mov	r0, r3
   1de84:	mov	r1, r6
   1de88:	str	r3, [fp, #-508]	; 0xfffffe04
   1de8c:	bl	111d4 <realloc@plt>
   1de90:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1de94:	subs	r9, r0, #0
   1de98:	bne	1d7b0 <__assert_fail@plt+0xc348>
   1de9c:	b	1ddc8 <__assert_fail@plt+0xc960>
   1dea0:	cmn	r6, #1
   1dea4:	bne	1d918 <__assert_fail@plt+0xc4b0>
   1dea8:	mov	r4, r6
   1deac:	b	1d8e0 <__assert_fail@plt+0xc478>
   1deb0:	cmn	r6, #1
   1deb4:	bne	1d918 <__assert_fail@plt+0xc4b0>
   1deb8:	mov	r9, r3
   1debc:	b	1d7b0 <__assert_fail@plt+0xc348>
   1dec0:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1dec4:	ldr	ip, [fp, #-488]	; 0xfffffe18
   1dec8:	strd	r2, [sp, #16]
   1decc:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1ded0:	sub	lr, fp, #496	; 0x1f0
   1ded4:	str	r3, [sp]
   1ded8:	stmib	sp, {r1, ip}
   1dedc:	str	lr, [sp, #24]
   1dee0:	mvn	r3, #0
   1dee4:	mov	r2, #1
   1dee8:	mov	r1, r5
   1deec:	bl	1145c <__snprintf_chk@plt>
   1def0:	b	1da74 <__assert_fail@plt+0xc60c>
   1def4:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1def8:	strd	r2, [sp, #8]
   1defc:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1df00:	sub	ip, fp, #496	; 0x1f0
   1df04:	str	r3, [sp]
   1df08:	str	r1, [sp, #4]
   1df0c:	str	ip, [sp, #16]
   1df10:	mvn	r3, #0
   1df14:	mov	r2, r8
   1df18:	mov	r1, r5
   1df1c:	bl	1145c <__snprintf_chk@plt>
   1df20:	b	1da74 <__assert_fail@plt+0xc60c>
   1df24:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1df28:	ldr	ip, [fp, #-488]	; 0xfffffe18
   1df2c:	strd	r2, [sp, #16]
   1df30:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1df34:	sub	lr, fp, #496	; 0x1f0
   1df38:	str	r3, [sp]
   1df3c:	stmib	sp, {r1, ip}
   1df40:	str	lr, [sp, #24]
   1df44:	mvn	r3, #0
   1df48:	mov	r2, #1
   1df4c:	mov	r1, r5
   1df50:	bl	1145c <__snprintf_chk@plt>
   1df54:	b	1da74 <__assert_fail@plt+0xc60c>
   1df58:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1df5c:	strd	r2, [sp, #8]
   1df60:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1df64:	sub	ip, fp, #496	; 0x1f0
   1df68:	str	r3, [sp]
   1df6c:	str	r1, [sp, #4]
   1df70:	str	ip, [sp, #16]
   1df74:	mvn	r3, #0
   1df78:	mov	r2, r8
   1df7c:	mov	r1, r5
   1df80:	bl	1145c <__snprintf_chk@plt>
   1df84:	b	1da74 <__assert_fail@plt+0xc60c>
   1df88:	mov	r7, r6
   1df8c:	b	1d53c <__assert_fail@plt+0xc0d4>
   1df90:	mov	r0, r3
   1df94:	mov	r1, r6
   1df98:	str	r3, [fp, #-508]	; 0xfffffe04
   1df9c:	bl	111d4 <realloc@plt>
   1dfa0:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1dfa4:	cmp	r0, #0
   1dfa8:	beq	1e180 <__assert_fail@plt+0xcd18>
   1dfac:	mov	r3, r0
   1dfb0:	b	1d8e0 <__assert_fail@plt+0xc478>
   1dfb4:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1dfb8:	sub	r3, fp, #348	; 0x15c
   1dfbc:	cmp	r0, r3
   1dfc0:	beq	1dfc8 <__assert_fail@plt+0xcb60>
   1dfc4:	bl	1115c <free@plt>
   1dfc8:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1dfcc:	sub	r3, fp, #476	; 0x1dc
   1dfd0:	cmp	r0, r3
   1dfd4:	beq	1dfdc <__assert_fail@plt+0xcb74>
   1dfd8:	bl	1115c <free@plt>
   1dfdc:	bl	11330 <__errno_location@plt>
   1dfe0:	mov	r3, #22
   1dfe4:	mov	r5, #0
   1dfe8:	str	r3, [r0]
   1dfec:	b	1d984 <__assert_fail@plt+0xc51c>
   1dff0:	lsl	r6, r6, #1
   1dff4:	cmp	r6, r2
   1dff8:	bcs	1d884 <__assert_fail@plt+0xc41c>
   1dffc:	cmn	r2, #1
   1e000:	beq	1d918 <__assert_fail@plt+0xc4b0>
   1e004:	mov	r6, r2
   1e008:	b	1d884 <__assert_fail@plt+0xc41c>
   1e00c:	add	r4, r7, r3
   1e010:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1e014:	ldr	r2, [fp, #-540]	; 0xfffffde4
   1e018:	str	r2, [r3]
   1e01c:	mov	r3, r9
   1e020:	b	1d8e8 <__assert_fail@plt+0xc480>
   1e024:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1e028:	cmp	r9, r3
   1e02c:	cmpne	r9, #0
   1e030:	bne	1e090 <__assert_fail@plt+0xcc28>
   1e034:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1e038:	cmp	r3, #0
   1e03c:	beq	1e048 <__assert_fail@plt+0xcbe0>
   1e040:	mov	r0, r3
   1e044:	bl	1115c <free@plt>
   1e048:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1e04c:	sub	r3, fp, #348	; 0x15c
   1e050:	cmp	r0, r3
   1e054:	beq	1e05c <__assert_fail@plt+0xcbf4>
   1e058:	bl	1115c <free@plt>
   1e05c:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1e060:	sub	r3, fp, #476	; 0x1dc
   1e064:	cmp	r0, r3
   1e068:	beq	1e070 <__assert_fail@plt+0xcc08>
   1e06c:	bl	1115c <free@plt>
   1e070:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1e074:	mov	r3, #75	; 0x4b
   1e078:	mov	r5, #0
   1e07c:	str	r3, [r2]
   1e080:	b	1d984 <__assert_fail@plt+0xc51c>
   1e084:	mov	r0, r9
   1e088:	bl	1115c <free@plt>
   1e08c:	b	1dbf4 <__assert_fail@plt+0xc78c>
   1e090:	mov	r0, r9
   1e094:	bl	1115c <free@plt>
   1e098:	b	1e034 <__assert_fail@plt+0xcbcc>
   1e09c:	mov	r5, r3
   1e0a0:	mov	r3, #1
   1e0a4:	adds	r4, r7, r3
   1e0a8:	mov	r8, r7
   1e0ac:	bcs	1e1ec <__assert_fail@plt+0xcd84>
   1e0b0:	cmp	r6, r4
   1e0b4:	bcs	1e120 <__assert_fail@plt+0xccb8>
   1e0b8:	cmp	r6, #0
   1e0bc:	bne	1e1c8 <__assert_fail@plt+0xcd60>
   1e0c0:	cmp	r4, #12
   1e0c4:	movls	r6, #12
   1e0c8:	bhi	1e1d8 <__assert_fail@plt+0xcd70>
   1e0cc:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1e0d0:	cmp	r5, r3
   1e0d4:	cmpne	r5, #0
   1e0d8:	sub	r7, r5, r3
   1e0dc:	clz	r7, r7
   1e0e0:	lsr	r7, r7, #5
   1e0e4:	bne	1e1ac <__assert_fail@plt+0xcd44>
   1e0e8:	mov	r0, r6
   1e0ec:	bl	11288 <malloc@plt>
   1e0f0:	subs	r3, r0, #0
   1e0f4:	beq	1d91c <__assert_fail@plt+0xc4b4>
   1e0f8:	cmp	r8, #0
   1e0fc:	movne	r2, r7
   1e100:	moveq	r2, #0
   1e104:	cmp	r2, #0
   1e108:	moveq	r5, r3
   1e10c:	beq	1e120 <__assert_fail@plt+0xccb8>
   1e110:	mov	r1, r5
   1e114:	mov	r2, r8
   1e118:	mov	r5, r3
   1e11c:	bl	11180 <memcpy@plt>
   1e120:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1e124:	cmp	r5, r3
   1e128:	cmpne	r6, r4
   1e12c:	mov	r3, #0
   1e130:	strb	r3, [r5, r8]
   1e134:	bhi	1e194 <__assert_fail@plt+0xcd2c>
   1e138:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1e13c:	cmp	r3, #0
   1e140:	beq	1e14c <__assert_fail@plt+0xcce4>
   1e144:	mov	r0, r3
   1e148:	bl	1115c <free@plt>
   1e14c:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1e150:	sub	r3, fp, #348	; 0x15c
   1e154:	cmp	r0, r3
   1e158:	beq	1e160 <__assert_fail@plt+0xccf8>
   1e15c:	bl	1115c <free@plt>
   1e160:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1e164:	sub	r3, fp, #476	; 0x1dc
   1e168:	cmp	r0, r3
   1e16c:	beq	1e174 <__assert_fail@plt+0xcd0c>
   1e170:	bl	1115c <free@plt>
   1e174:	ldr	r3, [fp, #-532]	; 0xfffffdec
   1e178:	str	r8, [r3]
   1e17c:	b	1d984 <__assert_fail@plt+0xc51c>
   1e180:	mov	r5, r3
   1e184:	bl	11330 <__errno_location@plt>
   1e188:	mov	r9, r5
   1e18c:	str	r0, [fp, #-508]	; 0xfffffe04
   1e190:	b	1dde4 <__assert_fail@plt+0xc97c>
   1e194:	mov	r0, r5
   1e198:	mov	r1, r4
   1e19c:	bl	111d4 <realloc@plt>
   1e1a0:	cmp	r0, #0
   1e1a4:	movne	r5, r0
   1e1a8:	b	1e138 <__assert_fail@plt+0xccd0>
   1e1ac:	mov	r1, r6
   1e1b0:	mov	r0, r5
   1e1b4:	bl	111d4 <realloc@plt>
   1e1b8:	cmp	r0, #0
   1e1bc:	beq	1e184 <__assert_fail@plt+0xcd1c>
   1e1c0:	mov	r5, r0
   1e1c4:	b	1e120 <__assert_fail@plt+0xccb8>
   1e1c8:	blt	1d91c <__assert_fail@plt+0xc4b4>
   1e1cc:	lsl	r6, r6, #1
   1e1d0:	cmp	r6, r4
   1e1d4:	bcs	1e0cc <__assert_fail@plt+0xcc64>
   1e1d8:	cmn	r4, #1
   1e1dc:	movne	r6, r4
   1e1e0:	bne	1e0cc <__assert_fail@plt+0xcc64>
   1e1e4:	b	1d91c <__assert_fail@plt+0xc4b4>
   1e1e8:	bl	111bc <__stack_chk_fail@plt>
   1e1ec:	cmn	r6, #1
   1e1f0:	beq	1e120 <__assert_fail@plt+0xccb8>
   1e1f4:	b	1d91c <__assert_fail@plt+0xc4b4>
   1e1f8:	bl	11438 <abort@plt>
   1e1fc:	andeq	r2, r3, r8, lsl #30
   1e200:	ldr	r3, [r1]
   1e204:	ldr	r2, [r1, #4]
   1e208:	cmp	r3, #0
   1e20c:	beq	1e31c <__assert_fail@plt+0xceb4>
   1e210:	push	{r4, r5, r6, lr}
   1e214:	add	r2, r2, #8
   1e218:	ldr	r6, [pc, #268]	; 1e32c <__assert_fail@plt+0xcec4>
   1e21c:	ldr	lr, [pc, #268]	; 1e330 <__assert_fail@plt+0xcec8>
   1e220:	mov	ip, #0
   1e224:	ldr	r3, [r2, #-8]
   1e228:	sub	r3, r3, #1
   1e22c:	cmp	r3, #21
   1e230:	ldrls	pc, [pc, r3, lsl #2]
   1e234:	b	1e324 <__assert_fail@plt+0xcebc>
   1e238:	ldrdeq	lr, [r1], -r4
   1e23c:	ldrdeq	lr, [r1], -r4
   1e240:	andeq	lr, r1, r8, asr #5
   1e244:	andeq	lr, r1, r8, asr #5
   1e248:	muleq	r1, r0, r2
   1e24c:	muleq	r1, r0, r2
   1e250:	muleq	r1, r0, r2
   1e254:	muleq	r1, r0, r2
   1e258:			; <UNDEFINED> instruction: 0x0001e2b4
   1e25c:			; <UNDEFINED> instruction: 0x0001e2b4
   1e260:	andeq	lr, r1, r0, ror #5
   1e264:	andeq	lr, r1, r0, ror #5
   1e268:	muleq	r1, r0, r2
   1e26c:	muleq	r1, r0, r2
   1e270:	strdeq	lr, [r1], -r4
   1e274:	andeq	lr, r1, r8, lsl #6
   1e278:	muleq	r1, r0, r2
   1e27c:	muleq	r1, r0, r2
   1e280:	muleq	r1, r0, r2
   1e284:	muleq	r1, r0, r2
   1e288:	muleq	r1, r0, r2
   1e28c:	muleq	r1, r0, r2
   1e290:	ldr	r3, [r0], #4
   1e294:	str	r3, [r2]
   1e298:	ldr	r3, [r1]
   1e29c:	add	ip, ip, #1
   1e2a0:	cmp	r3, ip
   1e2a4:	add	r2, r2, #16
   1e2a8:	bhi	1e224 <__assert_fail@plt+0xcdbc>
   1e2ac:	mov	r0, #0
   1e2b0:	pop	{r4, r5, r6, pc}
   1e2b4:	add	r0, r0, #7
   1e2b8:	bic	r0, r0, #7
   1e2bc:	ldrd	r4, [r0], #8
   1e2c0:	strd	r4, [r2]
   1e2c4:	b	1e298 <__assert_fail@plt+0xce30>
   1e2c8:	ldr	r3, [r0], #4
   1e2cc:	strh	r3, [r2]
   1e2d0:	b	1e298 <__assert_fail@plt+0xce30>
   1e2d4:	ldr	r3, [r0], #4
   1e2d8:	strb	r3, [r2]
   1e2dc:	b	1e298 <__assert_fail@plt+0xce30>
   1e2e0:	add	r0, r0, #7
   1e2e4:	bic	r0, r0, #7
   1e2e8:	ldrd	r4, [r0], #8
   1e2ec:	strd	r4, [r2]
   1e2f0:	b	1e298 <__assert_fail@plt+0xce30>
   1e2f4:	ldr	r3, [r0], #4
   1e2f8:	cmp	r3, #0
   1e2fc:	streq	lr, [r2]
   1e300:	bne	1e294 <__assert_fail@plt+0xce2c>
   1e304:	b	1e298 <__assert_fail@plt+0xce30>
   1e308:	ldr	r3, [r0], #4
   1e30c:	cmp	r3, #0
   1e310:	streq	r6, [r2]
   1e314:	bne	1e294 <__assert_fail@plt+0xce2c>
   1e318:	b	1e298 <__assert_fail@plt+0xce30>
   1e31c:	mov	r0, #0
   1e320:	bx	lr
   1e324:	mvn	r0, #0
   1e328:	pop	{r4, r5, r6, pc}
   1e32c:	andeq	r2, r2, r8, asr r0
   1e330:	andeq	r2, r2, r4, ror r0
   1e334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e338:	mov	sl, r2
   1e33c:	sub	sp, sp, #44	; 0x2c
   1e340:	mov	fp, r1
   1e344:	mov	r3, r1
   1e348:	mov	r1, sl
   1e34c:	mov	r2, #0
   1e350:	mov	ip, #7
   1e354:	str	r2, [r3], #16
   1e358:	str	fp, [sp, #4]
   1e35c:	str	r3, [fp, #4]
   1e360:	mov	r4, r2
   1e364:	str	r2, [r1], #8
   1e368:	str	ip, [sp, #8]
   1e36c:	mov	r7, r0
   1e370:	str	r3, [sp, #36]	; 0x24
   1e374:	str	r2, [sp, #28]
   1e378:	str	r1, [sp, #12]
   1e37c:	str	r2, [sp, #16]
   1e380:	str	r1, [sl, #4]
   1e384:	str	r2, [sp, #32]
   1e388:	mov	r9, r2
   1e38c:	str	ip, [sp, #24]
   1e390:	mov	fp, sl
   1e394:	b	1e3a4 <__assert_fail@plt+0xcf3c>
   1e398:	cmp	r0, #37	; 0x25
   1e39c:	mov	r5, r7
   1e3a0:	beq	1e3e4 <__assert_fail@plt+0xcf7c>
   1e3a4:	mov	r2, r7
   1e3a8:	ldrb	r0, [r7], #1
   1e3ac:	cmp	r0, #0
   1e3b0:	bne	1e398 <__assert_fail@plt+0xcf30>
   1e3b4:	add	ip, r4, r4, lsl #2
   1e3b8:	ldr	fp, [sp, #4]
   1e3bc:	add	r4, r4, ip, lsl #1
   1e3c0:	mov	r1, r0
   1e3c4:	str	r2, [r3, r4, lsl #2]
   1e3c8:	ldr	r3, [sp, #16]
   1e3cc:	str	r3, [fp, #8]
   1e3d0:	ldr	r3, [sp, #28]
   1e3d4:	str	r3, [fp, #12]
   1e3d8:	mov	r0, r1
   1e3dc:	add	sp, sp, #44	; 0x2c
   1e3e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3e4:	add	r1, r4, r4, lsl #2
   1e3e8:	mvn	r8, #0
   1e3ec:	add	r4, r4, r1, lsl #1
   1e3f0:	add	r6, r3, r4, lsl #2
   1e3f4:	str	r2, [r3, r4, lsl #2]
   1e3f8:	str	r9, [r6, #8]
   1e3fc:	str	r9, [r6, #12]
   1e400:	str	r9, [r6, #16]
   1e404:	str	r9, [r6, #24]
   1e408:	str	r9, [r6, #28]
   1e40c:	str	r8, [r6, #20]
   1e410:	str	r8, [r6, #32]
   1e414:	str	r8, [r6, #40]	; 0x28
   1e418:	ldrb	r4, [r7]
   1e41c:	sub	r0, r4, #48	; 0x30
   1e420:	uxtb	r3, r0
   1e424:	cmp	r3, #9
   1e428:	bhi	1e474 <__assert_fail@plt+0xd00c>
   1e42c:	b	1e8ec <__assert_fail@plt+0xd484>
   1e430:	cmp	r4, #45	; 0x2d
   1e434:	beq	1e490 <__assert_fail@plt+0xd028>
   1e438:	cmp	r4, #43	; 0x2b
   1e43c:	beq	1e4a0 <__assert_fail@plt+0xd038>
   1e440:	cmp	r4, #32
   1e444:	beq	1e4b0 <__assert_fail@plt+0xd048>
   1e448:	cmp	r4, #35	; 0x23
   1e44c:	beq	1e4c0 <__assert_fail@plt+0xd058>
   1e450:	cmp	r4, #48	; 0x30
   1e454:	beq	1e4d0 <__assert_fail@plt+0xd068>
   1e458:	cmp	r4, #73	; 0x49
   1e45c:	bne	1e4e0 <__assert_fail@plt+0xd078>
   1e460:	ldr	r3, [r6, #8]
   1e464:	orr	r3, r3, #64	; 0x40
   1e468:	str	r3, [r6, #8]
   1e46c:	ldrb	r4, [r7]
   1e470:	mov	r5, r7
   1e474:	cmp	r4, #39	; 0x27
   1e478:	add	r7, r5, #1
   1e47c:	bne	1e430 <__assert_fail@plt+0xcfc8>
   1e480:	ldr	r3, [r6, #8]
   1e484:	orr	r3, r3, #1
   1e488:	str	r3, [r6, #8]
   1e48c:	b	1e46c <__assert_fail@plt+0xd004>
   1e490:	ldr	r3, [r6, #8]
   1e494:	orr	r3, r3, #2
   1e498:	str	r3, [r6, #8]
   1e49c:	b	1e46c <__assert_fail@plt+0xd004>
   1e4a0:	ldr	r3, [r6, #8]
   1e4a4:	orr	r3, r3, #4
   1e4a8:	str	r3, [r6, #8]
   1e4ac:	b	1e46c <__assert_fail@plt+0xd004>
   1e4b0:	ldr	r3, [r6, #8]
   1e4b4:	orr	r3, r3, #8
   1e4b8:	str	r3, [r6, #8]
   1e4bc:	b	1e46c <__assert_fail@plt+0xd004>
   1e4c0:	ldr	r3, [r6, #8]
   1e4c4:	orr	r3, r3, #16
   1e4c8:	str	r3, [r6, #8]
   1e4cc:	b	1e46c <__assert_fail@plt+0xd004>
   1e4d0:	ldr	r3, [r6, #8]
   1e4d4:	orr	r3, r3, #32
   1e4d8:	str	r3, [r6, #8]
   1e4dc:	b	1e46c <__assert_fail@plt+0xd004>
   1e4e0:	cmp	r4, #42	; 0x2a
   1e4e4:	beq	1e6bc <__assert_fail@plt+0xd254>
   1e4e8:	sub	r3, r4, #48	; 0x30
   1e4ec:	cmp	r3, #9
   1e4f0:	bls	1ecdc <__assert_fail@plt+0xd874>
   1e4f4:	cmp	r4, #46	; 0x2e
   1e4f8:	beq	1e754 <__assert_fail@plt+0xd2ec>
   1e4fc:	add	r5, r5, #1
   1e500:	mov	r3, #0
   1e504:	mov	r1, #1
   1e508:	b	1e510 <__assert_fail@plt+0xd0a8>
   1e50c:	ldrb	r4, [r5], #1
   1e510:	cmp	r4, #104	; 0x68
   1e514:	andeq	r2, r3, #1
   1e518:	mov	r7, r5
   1e51c:	orreq	r3, r3, r1, lsl r2
   1e520:	beq	1e50c <__assert_fail@plt+0xd0a4>
   1e524:	cmp	r4, #76	; 0x4c
   1e528:	orreq	r3, r3, #4
   1e52c:	beq	1e50c <__assert_fail@plt+0xd0a4>
   1e530:	cmp	r4, #108	; 0x6c
   1e534:	addeq	r3, r3, #8
   1e538:	beq	1e50c <__assert_fail@plt+0xd0a4>
   1e53c:	cmp	r4, #106	; 0x6a
   1e540:	addeq	r3, r3, #16
   1e544:	beq	1e50c <__assert_fail@plt+0xd0a4>
   1e548:	and	r2, r4, #223	; 0xdf
   1e54c:	cmp	r2, #90	; 0x5a
   1e550:	beq	1e50c <__assert_fail@plt+0xd0a4>
   1e554:	cmp	r4, #116	; 0x74
   1e558:	beq	1e50c <__assert_fail@plt+0xd0a4>
   1e55c:	sub	r2, r4, #37	; 0x25
   1e560:	cmp	r2, #83	; 0x53
   1e564:	ldrls	pc, [pc, r2, lsl #2]
   1e568:	b	1e95c <__assert_fail@plt+0xd4f4>
   1e56c:	andeq	lr, r1, r0, asr r8
   1e570:	andeq	lr, r1, ip, asr r9
   1e574:	andeq	lr, r1, ip, asr r9
   1e578:	andeq	lr, r1, ip, asr r9
   1e57c:	andeq	lr, r1, ip, asr r9
   1e580:	andeq	lr, r1, ip, asr r9
   1e584:	andeq	lr, r1, ip, asr r9
   1e588:	andeq	lr, r1, ip, asr r9
   1e58c:	andeq	lr, r1, ip, asr r9
   1e590:	andeq	lr, r1, ip, asr r9
   1e594:	andeq	lr, r1, ip, asr r9
   1e598:	andeq	lr, r1, ip, asr r9
   1e59c:	andeq	lr, r1, ip, asr r9
   1e5a0:	andeq	lr, r1, ip, asr r9
   1e5a4:	andeq	lr, r1, ip, asr r9
   1e5a8:	andeq	lr, r1, ip, asr r9
   1e5ac:	andeq	lr, r1, ip, asr r9
   1e5b0:	andeq	lr, r1, ip, asr r9
   1e5b4:	andeq	lr, r1, ip, asr r9
   1e5b8:	andeq	lr, r1, ip, asr r9
   1e5bc:	andeq	lr, r1, ip, asr r9
   1e5c0:	andeq	lr, r1, ip, asr r9
   1e5c4:	andeq	lr, r1, ip, asr r9
   1e5c8:	andeq	lr, r1, ip, asr r9
   1e5cc:	andeq	lr, r1, ip, asr r9
   1e5d0:	andeq	lr, r1, ip, asr r9
   1e5d4:	andeq	lr, r1, ip, asr r9
   1e5d8:	andeq	lr, r1, ip, asr r9
   1e5dc:	andeq	lr, r1, r4, lsr #21
   1e5e0:	andeq	lr, r1, ip, asr r9
   1e5e4:	strdeq	lr, [r1], -r0
   1e5e8:	andeq	lr, r1, ip, asr r9
   1e5ec:	andeq	lr, r1, r4, lsr #21
   1e5f0:	andeq	lr, r1, r4, lsr #21
   1e5f4:	andeq	lr, r1, r4, lsr #21
   1e5f8:	andeq	lr, r1, ip, asr r9
   1e5fc:	andeq	lr, r1, ip, asr r9
   1e600:	andeq	lr, r1, ip, asr r9
   1e604:	andeq	lr, r1, ip, asr r9
   1e608:	andeq	lr, r1, ip, asr r9
   1e60c:	andeq	lr, r1, ip, asr r9
   1e610:	andeq	lr, r1, ip, asr r9
   1e614:	andeq	lr, r1, ip, asr r9
   1e618:	andeq	lr, r1, ip, asr r9
   1e61c:	andeq	lr, r1, ip, asr r9
   1e620:	andeq	lr, r1, ip, asr r9
   1e624:	andeq	lr, r1, r8, ror #23
   1e628:	andeq	lr, r1, ip, asr r9
   1e62c:	andeq	lr, r1, ip, asr r9
   1e630:	andeq	lr, r1, ip, asr r9
   1e634:	andeq	lr, r1, ip, asr r9
   1e638:	andeq	lr, r1, r4, lsr #23
   1e63c:	andeq	lr, r1, ip, asr r9
   1e640:	andeq	lr, r1, ip, asr r9
   1e644:	andeq	lr, r1, ip, asr r9
   1e648:	andeq	lr, r1, ip, asr r9
   1e64c:	andeq	lr, r1, ip, asr r9
   1e650:	andeq	lr, r1, ip, asr r9
   1e654:	andeq	lr, r1, ip, asr r9
   1e658:	andeq	lr, r1, ip, asr r9
   1e65c:	andeq	lr, r1, r4, lsr #21
   1e660:	andeq	lr, r1, ip, asr r9
   1e664:	muleq	r1, r0, fp
   1e668:	andeq	lr, r1, ip, asr #22
   1e66c:	andeq	lr, r1, r4, lsr #21
   1e670:	andeq	lr, r1, r4, lsr #21
   1e674:	andeq	lr, r1, r4, lsr #21
   1e678:	andeq	lr, r1, ip, asr r9
   1e67c:	andeq	lr, r1, ip, asr #22
   1e680:	andeq	lr, r1, ip, asr r9
   1e684:	andeq	lr, r1, ip, asr r9
   1e688:	andeq	lr, r1, ip, asr r9
   1e68c:	andeq	lr, r1, ip, asr r9
   1e690:	andeq	lr, r1, r4, lsl #24
   1e694:	andeq	lr, r1, r4, lsr #23
   1e698:	strdeq	lr, [r1], -r8
   1e69c:	andeq	lr, r1, ip, asr r9
   1e6a0:	andeq	lr, r1, ip, asr r9
   1e6a4:	andeq	lr, r1, r8, lsr fp
   1e6a8:	andeq	lr, r1, ip, asr r9
   1e6ac:	andeq	lr, r1, r4, lsr #23
   1e6b0:	andeq	lr, r1, ip, asr r9
   1e6b4:	andeq	lr, r1, ip, asr r9
   1e6b8:	andeq	lr, r1, r4, lsr #23
   1e6bc:	str	r5, [r6, #12]
   1e6c0:	str	r7, [r6, #16]
   1e6c4:	ldrb	r3, [r5, #1]
   1e6c8:	ldr	r2, [sp, #16]
   1e6cc:	sub	r3, r3, #48	; 0x30
   1e6d0:	cmp	r2, #0
   1e6d4:	moveq	r2, #1
   1e6d8:	str	r2, [sp, #16]
   1e6dc:	uxtb	r2, r3
   1e6e0:	cmp	r2, #9
   1e6e4:	bls	1eac8 <__assert_fail@plt+0xd660>
   1e6e8:	ldr	r4, [r6, #20]
   1e6ec:	cmn	r4, #1
   1e6f0:	beq	1ea84 <__assert_fail@plt+0xd61c>
   1e6f4:	ldr	r3, [sp, #8]
   1e6f8:	ldr	sl, [fp, #4]
   1e6fc:	cmp	r3, r4
   1e700:	bls	1e9ec <__assert_fail@plt+0xd584>
   1e704:	ldr	r2, [fp]
   1e708:	cmp	r2, r4
   1e70c:	bhi	1e728 <__assert_fail@plt+0xd2c0>
   1e710:	sub	r1, sl, #16
   1e714:	add	r2, r2, #1
   1e718:	cmp	r2, r4
   1e71c:	str	r9, [r1, r2, lsl #4]
   1e720:	bls	1e714 <__assert_fail@plt+0xd2ac>
   1e724:	str	r2, [fp]
   1e728:	ldr	r3, [sl, r4, lsl #4]
   1e72c:	cmp	r3, #0
   1e730:	bne	1ed38 <__assert_fail@plt+0xd8d0>
   1e734:	mov	r3, r7
   1e738:	mov	r2, #5
   1e73c:	str	r2, [sl, r4, lsl #4]
   1e740:	ldrb	r4, [r3], #1
   1e744:	mov	r5, r7
   1e748:	cmp	r4, #46	; 0x2e
   1e74c:	mov	r7, r3
   1e750:	bne	1e4fc <__assert_fail@plt+0xd094>
   1e754:	ldrb	r3, [r5, #1]
   1e758:	cmp	r3, #42	; 0x2a
   1e75c:	bne	1e9a4 <__assert_fail@plt+0xd53c>
   1e760:	add	r7, r5, #2
   1e764:	str	r5, [r6, #24]
   1e768:	str	r7, [r6, #28]
   1e76c:	ldrb	r1, [r5, #2]
   1e770:	ldr	r3, [sp, #28]
   1e774:	sub	r1, r1, #48	; 0x30
   1e778:	cmp	r3, #2
   1e77c:	movcc	r3, #2
   1e780:	str	r3, [sp, #28]
   1e784:	uxtb	r3, r1
   1e788:	cmp	r3, #9
   1e78c:	bls	1eeb8 <__assert_fail@plt+0xda50>
   1e790:	ldr	r4, [r6, #32]
   1e794:	cmn	r4, #1
   1e798:	beq	1ee98 <__assert_fail@plt+0xda30>
   1e79c:	ldr	r3, [sp, #8]
   1e7a0:	ldr	sl, [fp, #4]
   1e7a4:	cmp	r3, r4
   1e7a8:	bls	1edbc <__assert_fail@plt+0xd954>
   1e7ac:	ldr	r2, [fp]
   1e7b0:	cmp	r2, r4
   1e7b4:	bhi	1e7d0 <__assert_fail@plt+0xd368>
   1e7b8:	sub	r1, sl, #16
   1e7bc:	add	r2, r2, #1
   1e7c0:	cmp	r2, r4
   1e7c4:	str	r9, [r1, r2, lsl #4]
   1e7c8:	bls	1e7bc <__assert_fail@plt+0xd354>
   1e7cc:	str	r2, [fp]
   1e7d0:	ldr	r3, [sl, r4, lsl #4]
   1e7d4:	cmp	r3, #0
   1e7d8:	bne	1ee1c <__assert_fail@plt+0xd9b4>
   1e7dc:	mov	r3, #5
   1e7e0:	str	r3, [sl, r4, lsl #4]
   1e7e4:	mov	r5, r7
   1e7e8:	ldrb	r4, [r7]
   1e7ec:	b	1e4fc <__assert_fail@plt+0xd094>
   1e7f0:	mov	r4, #99	; 0x63
   1e7f4:	mov	r3, #14
   1e7f8:	str	r3, [sp, #20]
   1e7fc:	cmn	r8, #1
   1e800:	strne	r8, [r6, #40]	; 0x28
   1e804:	beq	1ecbc <__assert_fail@plt+0xd854>
   1e808:	ldr	r3, [sp, #8]
   1e80c:	ldr	sl, [fp, #4]
   1e810:	cmp	r3, r8
   1e814:	bls	1ec60 <__assert_fail@plt+0xd7f8>
   1e818:	ldr	r3, [fp]
   1e81c:	cmp	r3, r8
   1e820:	bhi	1e83c <__assert_fail@plt+0xd3d4>
   1e824:	sub	r1, sl, #16
   1e828:	add	r3, r3, #1
   1e82c:	cmp	r3, r8
   1e830:	str	r9, [r1, r3, lsl #4]
   1e834:	bls	1e828 <__assert_fail@plt+0xd3c0>
   1e838:	str	r3, [fp]
   1e83c:	ldr	r3, [sl, r8, lsl #4]
   1e840:	cmp	r3, #0
   1e844:	bne	1ec48 <__assert_fail@plt+0xd7e0>
   1e848:	ldr	r3, [sp, #20]
   1e84c:	str	r3, [sl, r8, lsl #4]
   1e850:	ldr	r3, [sp, #4]
   1e854:	strb	r4, [r6, #36]	; 0x24
   1e858:	ldr	r2, [sp, #24]
   1e85c:	ldr	r4, [r3]
   1e860:	str	r5, [r6, #4]
   1e864:	add	r4, r4, #1
   1e868:	cmp	r2, r4
   1e86c:	str	r4, [r3]
   1e870:	ldrhi	r3, [r3, #4]
   1e874:	bhi	1e3a4 <__assert_fail@plt+0xcf3c>
   1e878:	ldr	r3, [sp, #24]
   1e87c:	cmp	r3, #0
   1e880:	blt	1ef94 <__assert_fail@plt+0xdb2c>
   1e884:	ldr	r3, [sp, #24]
   1e888:	ldr	r2, [pc, #1896]	; 1eff8 <__assert_fail@plt+0xdb90>
   1e88c:	lsl	r5, r3, #1
   1e890:	cmp	r5, r2
   1e894:	bhi	1ef94 <__assert_fail@plt+0xdb2c>
   1e898:	ldr	r2, [sp, #4]
   1e89c:	add	r1, r3, r3, lsl #2
   1e8a0:	ldr	r6, [r2, #4]
   1e8a4:	add	r1, r3, r1, lsl #1
   1e8a8:	ldr	r3, [sp, #36]	; 0x24
   1e8ac:	lsl	r1, r1, #3
   1e8b0:	cmp	r3, r6
   1e8b4:	beq	1ea4c <__assert_fail@plt+0xd5e4>
   1e8b8:	mov	r0, r6
   1e8bc:	bl	111d4 <realloc@plt>
   1e8c0:	subs	r3, r0, #0
   1e8c4:	beq	1ef94 <__assert_fail@plt+0xdb2c>
   1e8c8:	ldr	r2, [sp, #4]
   1e8cc:	ldm	r2, {r4, r6}
   1e8d0:	ldr	r2, [sp, #36]	; 0x24
   1e8d4:	cmp	r2, r6
   1e8d8:	beq	1ea5c <__assert_fail@plt+0xd5f4>
   1e8dc:	ldr	r2, [sp, #4]
   1e8e0:	str	r5, [sp, #24]
   1e8e4:	str	r3, [r2, #4]
   1e8e8:	b	1e3a4 <__assert_fail@plt+0xcf3c>
   1e8ec:	mov	r2, r7
   1e8f0:	ldrb	r3, [r2, #1]!
   1e8f4:	sub	r1, r3, #48	; 0x30
   1e8f8:	cmp	r1, #9
   1e8fc:	bls	1e8f0 <__assert_fail@plt+0xd488>
   1e900:	cmp	r3, #36	; 0x24
   1e904:	mvnne	r8, #0
   1e908:	bne	1e474 <__assert_fail@plt+0xd00c>
   1e90c:	mov	r2, #0
   1e910:	b	1e91c <__assert_fail@plt+0xd4b4>
   1e914:	cmp	ip, #9
   1e918:	bhi	1ef28 <__assert_fail@plt+0xdac0>
   1e91c:	ldr	r3, [pc, #1752]	; 1effc <__assert_fail@plt+0xdb94>
   1e920:	mov	r1, r5
   1e924:	cmp	r2, r3
   1e928:	addls	r2, r2, r2, lsl #2
   1e92c:	mvnhi	r3, #0
   1e930:	lslls	r3, r2, #1
   1e934:	ldrb	ip, [r5, #1]!
   1e938:	adds	r3, r0, r3
   1e93c:	mov	r2, r3
   1e940:	sub	r0, ip, #48	; 0x30
   1e944:	uxtb	ip, r0
   1e948:	bcc	1e914 <__assert_fail@plt+0xd4ac>
   1e94c:	cmp	ip, #9
   1e950:	mvn	r3, #0
   1e954:	mov	r1, r5
   1e958:	bls	1e934 <__assert_fail@plt+0xd4cc>
   1e95c:	mov	sl, fp
   1e960:	ldr	fp, [sp, #4]
   1e964:	ldr	r3, [sl, #4]
   1e968:	ldr	r2, [sp, #12]
   1e96c:	cmp	r2, r3
   1e970:	beq	1e97c <__assert_fail@plt+0xd514>
   1e974:	mov	r0, r3
   1e978:	bl	1115c <free@plt>
   1e97c:	ldr	r0, [fp, #4]
   1e980:	ldr	r3, [sp, #36]	; 0x24
   1e984:	cmp	r3, r0
   1e988:	beq	1e990 <__assert_fail@plt+0xd528>
   1e98c:	bl	1115c <free@plt>
   1e990:	bl	11330 <__errno_location@plt>
   1e994:	mov	r3, #22
   1e998:	mvn	r1, #0
   1e99c:	str	r3, [r0]
   1e9a0:	b	1e3d8 <__assert_fail@plt+0xcf70>
   1e9a4:	str	r5, [r6, #24]
   1e9a8:	ldrb	r3, [r5, #1]
   1e9ac:	sub	r3, r3, #48	; 0x30
   1e9b0:	cmp	r3, #9
   1e9b4:	bhi	1ef70 <__assert_fail@plt+0xdb08>
   1e9b8:	ldrb	r3, [r7, #1]!
   1e9bc:	sub	r3, r3, #48	; 0x30
   1e9c0:	cmp	r3, #9
   1e9c4:	bls	1e9b8 <__assert_fail@plt+0xd550>
   1e9c8:	sub	r3, r7, r5
   1e9cc:	mov	r5, r7
   1e9d0:	ldr	r2, [sp, #28]
   1e9d4:	str	r7, [r6, #28]
   1e9d8:	cmp	r2, r3
   1e9dc:	movcs	r3, r2
   1e9e0:	ldrb	r4, [r7]
   1e9e4:	str	r3, [sp, #28]
   1e9e8:	b	1e4fc <__assert_fail@plt+0xd094>
   1e9ec:	ldr	r3, [sp, #8]
   1e9f0:	lsl	r3, r3, #1
   1e9f4:	cmp	r3, r4
   1e9f8:	str	r3, [sp, #8]
   1e9fc:	addls	r3, r4, #1
   1ea00:	strls	r3, [sp, #8]
   1ea04:	ldr	r3, [sp, #8]
   1ea08:	cmn	r3, #-268435455	; 0xf0000001
   1ea0c:	bhi	1efe0 <__assert_fail@plt+0xdb78>
   1ea10:	ldr	r2, [sp, #12]
   1ea14:	lsl	r1, r3, #4
   1ea18:	cmp	r2, sl
   1ea1c:	beq	1ed78 <__assert_fail@plt+0xd910>
   1ea20:	mov	r0, sl
   1ea24:	bl	111d4 <realloc@plt>
   1ea28:	ldr	r3, [fp, #4]
   1ea2c:	subs	sl, r0, #0
   1ea30:	beq	1efe4 <__assert_fail@plt+0xdb7c>
   1ea34:	ldr	r2, [sp, #12]
   1ea38:	cmp	r2, r3
   1ea3c:	ldr	r2, [fp]
   1ea40:	beq	1efec <__assert_fail@plt+0xdb84>
   1ea44:	str	sl, [fp, #4]
   1ea48:	b	1e708 <__assert_fail@plt+0xd2a0>
   1ea4c:	mov	r0, r1
   1ea50:	bl	11288 <malloc@plt>
   1ea54:	subs	r3, r0, #0
   1ea58:	beq	1ee74 <__assert_fail@plt+0xda0c>
   1ea5c:	add	r2, r4, r4, lsl #2
   1ea60:	mov	r0, r3
   1ea64:	add	r2, r4, r2, lsl #1
   1ea68:	mov	r1, r6
   1ea6c:	lsl	r2, r2, #2
   1ea70:	bl	11180 <memcpy@plt>
   1ea74:	ldr	r2, [sp, #4]
   1ea78:	ldr	r4, [r2]
   1ea7c:	mov	r3, r0
   1ea80:	b	1e8dc <__assert_fail@plt+0xd474>
   1ea84:	ldr	r3, [sp, #32]
   1ea88:	cmn	r3, #1
   1ea8c:	str	r3, [r6, #20]
   1ea90:	add	r3, r3, #1
   1ea94:	beq	1e95c <__assert_fail@plt+0xd4f4>
   1ea98:	ldr	r4, [sp, #32]
   1ea9c:	str	r3, [sp, #32]
   1eaa0:	b	1e6f4 <__assert_fail@plt+0xd28c>
   1eaa4:	cmp	r3, #15
   1eaa8:	movgt	r3, #12
   1eaac:	strgt	r3, [sp, #20]
   1eab0:	bgt	1e7fc <__assert_fail@plt+0xd394>
   1eab4:	tst	r3, #4
   1eab8:	movne	r3, #12
   1eabc:	moveq	r3, #11
   1eac0:	str	r3, [sp, #20]
   1eac4:	b	1e7fc <__assert_fail@plt+0xd394>
   1eac8:	mov	r1, r7
   1eacc:	ldrb	r2, [r1, #1]!
   1ead0:	sub	r0, r2, #48	; 0x30
   1ead4:	cmp	r0, #9
   1ead8:	bls	1eacc <__assert_fail@plt+0xd664>
   1eadc:	cmp	r2, #36	; 0x24
   1eae0:	bne	1e6e8 <__assert_fail@plt+0xd280>
   1eae4:	mov	r1, #0
   1eae8:	b	1eaf4 <__assert_fail@plt+0xd68c>
   1eaec:	cmp	ip, #9
   1eaf0:	bhi	1efb0 <__assert_fail@plt+0xdb48>
   1eaf4:	ldr	r2, [pc, #1280]	; 1effc <__assert_fail@plt+0xdb94>
   1eaf8:	mov	r0, r7
   1eafc:	cmp	r1, r2
   1eb00:	addls	r1, r1, r1, lsl #2
   1eb04:	mvnhi	r2, #0
   1eb08:	lslls	r2, r1, #1
   1eb0c:	ldrb	ip, [r7, #1]!
   1eb10:	adds	r2, r3, r2
   1eb14:	mov	r1, r2
   1eb18:	sub	r3, ip, #48	; 0x30
   1eb1c:	uxtb	ip, r3
   1eb20:	bcc	1eaec <__assert_fail@plt+0xd684>
   1eb24:	cmp	ip, #9
   1eb28:	mvn	r2, #0
   1eb2c:	mov	r0, r7
   1eb30:	bls	1eb0c <__assert_fail@plt+0xd6a4>
   1eb34:	b	1e95c <__assert_fail@plt+0xd4f4>
   1eb38:	cmp	r3, #7
   1eb3c:	movgt	r3, #16
   1eb40:	movle	r3, #15
   1eb44:	str	r3, [sp, #20]
   1eb48:	b	1e7fc <__assert_fail@plt+0xd394>
   1eb4c:	cmp	r3, #15
   1eb50:	bgt	1ee48 <__assert_fail@plt+0xd9e0>
   1eb54:	tst	r3, #4
   1eb58:	bne	1ee48 <__assert_fail@plt+0xd9e0>
   1eb5c:	cmp	r3, #7
   1eb60:	movgt	r3, #7
   1eb64:	strgt	r3, [sp, #20]
   1eb68:	bgt	1e7fc <__assert_fail@plt+0xd394>
   1eb6c:	tst	r3, #2
   1eb70:	movne	r3, #1
   1eb74:	strne	r3, [sp, #20]
   1eb78:	bne	1e7fc <__assert_fail@plt+0xd394>
   1eb7c:	tst	r3, #1
   1eb80:	movne	r3, #3
   1eb84:	moveq	r3, #5
   1eb88:	str	r3, [sp, #20]
   1eb8c:	b	1e7fc <__assert_fail@plt+0xd394>
   1eb90:	cmp	r3, #7
   1eb94:	movgt	r3, #14
   1eb98:	movle	r3, #13
   1eb9c:	str	r3, [sp, #20]
   1eba0:	b	1e7fc <__assert_fail@plt+0xd394>
   1eba4:	cmp	r3, #15
   1eba8:	bgt	1ee3c <__assert_fail@plt+0xd9d4>
   1ebac:	tst	r3, #4
   1ebb0:	bne	1ee3c <__assert_fail@plt+0xd9d4>
   1ebb4:	cmp	r3, #7
   1ebb8:	movgt	r3, #8
   1ebbc:	strgt	r3, [sp, #20]
   1ebc0:	bgt	1e7fc <__assert_fail@plt+0xd394>
   1ebc4:	tst	r3, #2
   1ebc8:	movne	r3, #2
   1ebcc:	strne	r3, [sp, #20]
   1ebd0:	bne	1e7fc <__assert_fail@plt+0xd394>
   1ebd4:	tst	r3, #1
   1ebd8:	movne	r3, #4
   1ebdc:	moveq	r3, #6
   1ebe0:	str	r3, [sp, #20]
   1ebe4:	b	1e7fc <__assert_fail@plt+0xd394>
   1ebe8:	mov	r3, #16
   1ebec:	str	r3, [sp, #20]
   1ebf0:	mov	r4, #115	; 0x73
   1ebf4:	b	1e7fc <__assert_fail@plt+0xd394>
   1ebf8:	mov	r3, #17
   1ebfc:	str	r3, [sp, #20]
   1ec00:	b	1e7fc <__assert_fail@plt+0xd394>
   1ec04:	cmp	r3, #15
   1ec08:	bgt	1ee30 <__assert_fail@plt+0xd9c8>
   1ec0c:	tst	r3, #4
   1ec10:	bne	1ee30 <__assert_fail@plt+0xd9c8>
   1ec14:	cmp	r3, #7
   1ec18:	movgt	r3, #21
   1ec1c:	strgt	r3, [sp, #20]
   1ec20:	bgt	1e7fc <__assert_fail@plt+0xd394>
   1ec24:	tst	r3, #2
   1ec28:	movne	r3, #18
   1ec2c:	strne	r3, [sp, #20]
   1ec30:	bne	1e7fc <__assert_fail@plt+0xd394>
   1ec34:	tst	r3, #1
   1ec38:	movne	r3, #19
   1ec3c:	moveq	r3, #20
   1ec40:	str	r3, [sp, #20]
   1ec44:	b	1e7fc <__assert_fail@plt+0xd394>
   1ec48:	ldr	r2, [sp, #20]
   1ec4c:	cmp	r3, r2
   1ec50:	beq	1e850 <__assert_fail@plt+0xd3e8>
   1ec54:	mov	r3, sl
   1ec58:	ldr	fp, [sp, #4]
   1ec5c:	b	1e968 <__assert_fail@plt+0xd500>
   1ec60:	ldr	r3, [sp, #8]
   1ec64:	lsl	r3, r3, #1
   1ec68:	cmp	r3, r8
   1ec6c:	str	r3, [sp, #8]
   1ec70:	addls	r3, r8, #1
   1ec74:	strls	r3, [sp, #8]
   1ec78:	ldr	r3, [sp, #8]
   1ec7c:	cmn	r3, #-268435455	; 0xf0000001
   1ec80:	bhi	1efe0 <__assert_fail@plt+0xdb78>
   1ec84:	ldr	r2, [sp, #12]
   1ec88:	lsl	r1, r3, #4
   1ec8c:	cmp	r2, sl
   1ec90:	beq	1ed4c <__assert_fail@plt+0xd8e4>
   1ec94:	mov	r0, sl
   1ec98:	bl	111d4 <realloc@plt>
   1ec9c:	subs	sl, r0, #0
   1eca0:	beq	1ef94 <__assert_fail@plt+0xdb2c>
   1eca4:	ldr	r3, [fp, #4]
   1eca8:	ldr	r2, [sp, #12]
   1ecac:	cmp	r2, r3
   1ecb0:	beq	1efd4 <__assert_fail@plt+0xdb6c>
   1ecb4:	str	sl, [fp, #4]
   1ecb8:	b	1e818 <__assert_fail@plt+0xd3b0>
   1ecbc:	ldr	r3, [sp, #32]
   1ecc0:	cmn	r3, #1
   1ecc4:	str	r3, [r6, #40]	; 0x28
   1ecc8:	add	r3, r3, #1
   1eccc:	beq	1e95c <__assert_fail@plt+0xd4f4>
   1ecd0:	ldr	r8, [sp, #32]
   1ecd4:	str	r3, [sp, #32]
   1ecd8:	b	1e808 <__assert_fail@plt+0xd3a0>
   1ecdc:	str	r5, [r6, #12]
   1ece0:	ldrb	r3, [r5]
   1ece4:	sub	r3, r3, #48	; 0x30
   1ece8:	cmp	r3, #9
   1ecec:	bhi	1ed2c <__assert_fail@plt+0xd8c4>
   1ecf0:	mov	r7, r5
   1ecf4:	b	1ecfc <__assert_fail@plt+0xd894>
   1ecf8:	mov	r7, r2
   1ecfc:	ldrb	r3, [r7, #1]
   1ed00:	add	r2, r7, #1
   1ed04:	sub	r3, r3, #48	; 0x30
   1ed08:	cmp	r3, #9
   1ed0c:	bls	1ecf8 <__assert_fail@plt+0xd890>
   1ed10:	ldr	r3, [sp, #16]
   1ed14:	sub	r5, r2, r5
   1ed18:	cmp	r3, r5
   1ed1c:	movcc	r3, r5
   1ed20:	add	r7, r7, #2
   1ed24:	mov	r5, r2
   1ed28:	str	r3, [sp, #16]
   1ed2c:	str	r5, [r6, #16]
   1ed30:	ldrb	r4, [r5]
   1ed34:	b	1e4f4 <__assert_fail@plt+0xd08c>
   1ed38:	cmp	r3, #5
   1ed3c:	bne	1ec54 <__assert_fail@plt+0xd7ec>
   1ed40:	mov	r5, r7
   1ed44:	ldrb	r4, [r7], #1
   1ed48:	b	1e4f4 <__assert_fail@plt+0xd08c>
   1ed4c:	mov	r0, r1
   1ed50:	bl	11288 <malloc@plt>
   1ed54:	subs	r3, r0, #0
   1ed58:	beq	1ed88 <__assert_fail@plt+0xd920>
   1ed5c:	ldr	r2, [fp]
   1ed60:	mov	r1, sl
   1ed64:	mov	r0, r3
   1ed68:	lsl	r2, r2, #4
   1ed6c:	bl	11180 <memcpy@plt>
   1ed70:	mov	sl, r0
   1ed74:	b	1ecb4 <__assert_fail@plt+0xd84c>
   1ed78:	mov	r0, r1
   1ed7c:	bl	11288 <malloc@plt>
   1ed80:	subs	r3, r0, #0
   1ed84:	bne	1ee54 <__assert_fail@plt+0xd9ec>
   1ed88:	ldr	fp, [sp, #4]
   1ed8c:	ldr	r0, [fp, #4]
   1ed90:	ldr	r3, [sp, #36]	; 0x24
   1ed94:	cmp	r3, r0
   1ed98:	beq	1eda0 <__assert_fail@plt+0xd938>
   1ed9c:	bl	1115c <free@plt>
   1eda0:	bl	11330 <__errno_location@plt>
   1eda4:	mov	r3, #12
   1eda8:	mvn	r1, #0
   1edac:	str	r3, [r0]
   1edb0:	mov	r0, r1
   1edb4:	add	sp, sp, #44	; 0x2c
   1edb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1edbc:	ldr	r3, [sp, #8]
   1edc0:	lsl	r3, r3, #1
   1edc4:	cmp	r3, r4
   1edc8:	str	r3, [sp, #8]
   1edcc:	addls	r3, r4, #1
   1edd0:	strls	r3, [sp, #8]
   1edd4:	ldr	r3, [sp, #8]
   1edd8:	cmn	r3, #-268435455	; 0xf0000001
   1eddc:	bhi	1efe0 <__assert_fail@plt+0xdb78>
   1ede0:	ldr	r2, [sp, #12]
   1ede4:	lsl	r1, r3, #4
   1ede8:	cmp	r2, sl
   1edec:	beq	1ef40 <__assert_fail@plt+0xdad8>
   1edf0:	mov	r0, sl
   1edf4:	bl	111d4 <realloc@plt>
   1edf8:	ldr	r3, [fp, #4]
   1edfc:	subs	sl, r0, #0
   1ee00:	beq	1efe4 <__assert_fail@plt+0xdb7c>
   1ee04:	ldr	r2, [sp, #12]
   1ee08:	cmp	r2, r3
   1ee0c:	ldr	r2, [fp]
   1ee10:	beq	1efc8 <__assert_fail@plt+0xdb60>
   1ee14:	str	sl, [fp, #4]
   1ee18:	b	1e7b0 <__assert_fail@plt+0xd348>
   1ee1c:	cmp	r3, #5
   1ee20:	bne	1ec54 <__assert_fail@plt+0xd7ec>
   1ee24:	ldrb	r4, [r7]
   1ee28:	mov	r5, r7
   1ee2c:	b	1e4fc <__assert_fail@plt+0xd094>
   1ee30:	mov	r3, #22
   1ee34:	str	r3, [sp, #20]
   1ee38:	b	1e7fc <__assert_fail@plt+0xd394>
   1ee3c:	mov	r3, #10
   1ee40:	str	r3, [sp, #20]
   1ee44:	b	1e7fc <__assert_fail@plt+0xd394>
   1ee48:	mov	r3, #9
   1ee4c:	str	r3, [sp, #20]
   1ee50:	b	1e7fc <__assert_fail@plt+0xd394>
   1ee54:	ldr	r2, [fp]
   1ee58:	lsl	r2, r2, #4
   1ee5c:	mov	r1, sl
   1ee60:	mov	r0, r3
   1ee64:	bl	11180 <memcpy@plt>
   1ee68:	ldr	r2, [fp]
   1ee6c:	mov	sl, r0
   1ee70:	b	1ea44 <__assert_fail@plt+0xd5dc>
   1ee74:	mov	sl, fp
   1ee78:	ldr	r2, [sp, #12]
   1ee7c:	ldr	r3, [sl, #4]
   1ee80:	ldr	fp, [sp, #4]
   1ee84:	cmp	r2, r3
   1ee88:	beq	1eda0 <__assert_fail@plt+0xd938>
   1ee8c:	mov	r0, r3
   1ee90:	bl	1115c <free@plt>
   1ee94:	b	1ed8c <__assert_fail@plt+0xd924>
   1ee98:	ldr	r3, [sp, #32]
   1ee9c:	cmn	r3, #1
   1eea0:	str	r3, [r6, #32]
   1eea4:	add	r3, r3, #1
   1eea8:	beq	1e95c <__assert_fail@plt+0xd4f4>
   1eeac:	ldr	r4, [sp, #32]
   1eeb0:	str	r3, [sp, #32]
   1eeb4:	b	1e79c <__assert_fail@plt+0xd334>
   1eeb8:	mov	r2, r7
   1eebc:	ldrb	r3, [r2, #1]!
   1eec0:	sub	r0, r3, #48	; 0x30
   1eec4:	cmp	r0, #9
   1eec8:	bls	1eebc <__assert_fail@plt+0xda54>
   1eecc:	cmp	r3, #36	; 0x24
   1eed0:	bne	1e790 <__assert_fail@plt+0xd328>
   1eed4:	mov	r2, #0
   1eed8:	b	1eee4 <__assert_fail@plt+0xda7c>
   1eedc:	cmp	ip, #9
   1eee0:	bhi	1ef7c <__assert_fail@plt+0xdb14>
   1eee4:	ldr	r3, [pc, #272]	; 1effc <__assert_fail@plt+0xdb94>
   1eee8:	mov	r0, r7
   1eeec:	cmp	r2, r3
   1eef0:	addls	r2, r2, r2, lsl #2
   1eef4:	mvnhi	r3, #0
   1eef8:	lslls	r3, r2, #1
   1eefc:	ldrb	ip, [r7, #1]!
   1ef00:	adds	r3, r1, r3
   1ef04:	mov	r2, r3
   1ef08:	sub	r1, ip, #48	; 0x30
   1ef0c:	uxtb	ip, r1
   1ef10:	bcc	1eedc <__assert_fail@plt+0xda74>
   1ef14:	cmp	ip, #9
   1ef18:	mvn	r3, #0
   1ef1c:	mov	r0, r7
   1ef20:	bls	1eefc <__assert_fail@plt+0xda94>
   1ef24:	b	1e95c <__assert_fail@plt+0xd4f4>
   1ef28:	sub	r8, r3, #1
   1ef2c:	cmn	r8, #3
   1ef30:	bhi	1e95c <__assert_fail@plt+0xd4f4>
   1ef34:	add	r5, r1, #2
   1ef38:	ldrb	r4, [r1, #2]
   1ef3c:	b	1e474 <__assert_fail@plt+0xd00c>
   1ef40:	mov	r0, r1
   1ef44:	bl	11288 <malloc@plt>
   1ef48:	subs	r3, r0, #0
   1ef4c:	beq	1ed88 <__assert_fail@plt+0xd920>
   1ef50:	ldr	r2, [fp]
   1ef54:	lsl	r2, r2, #4
   1ef58:	mov	r1, sl
   1ef5c:	mov	r0, r3
   1ef60:	bl	11180 <memcpy@plt>
   1ef64:	ldr	r2, [fp]
   1ef68:	mov	sl, r0
   1ef6c:	b	1ee14 <__assert_fail@plt+0xd9ac>
   1ef70:	mov	r5, r7
   1ef74:	mov	r3, #1
   1ef78:	b	1e9d0 <__assert_fail@plt+0xd568>
   1ef7c:	sub	r4, r3, #1
   1ef80:	cmn	r4, #3
   1ef84:	bhi	1e95c <__assert_fail@plt+0xd4f4>
   1ef88:	str	r4, [r6, #32]
   1ef8c:	add	r7, r0, #2
   1ef90:	b	1e79c <__assert_fail@plt+0xd334>
   1ef94:	mov	sl, fp
   1ef98:	ldr	fp, [sp, #4]
   1ef9c:	ldr	r3, [sl, #4]
   1efa0:	ldr	r2, [sp, #12]
   1efa4:	cmp	r2, r3
   1efa8:	bne	1ee8c <__assert_fail@plt+0xda24>
   1efac:	b	1ed8c <__assert_fail@plt+0xd924>
   1efb0:	sub	r4, r2, #1
   1efb4:	cmn	r4, #3
   1efb8:	bhi	1e95c <__assert_fail@plt+0xd4f4>
   1efbc:	str	r4, [r6, #20]
   1efc0:	add	r7, r0, #2
   1efc4:	b	1e6f4 <__assert_fail@plt+0xd28c>
   1efc8:	mov	r3, sl
   1efcc:	ldr	sl, [sp, #12]
   1efd0:	b	1ef54 <__assert_fail@plt+0xdaec>
   1efd4:	mov	r3, sl
   1efd8:	mov	sl, r2
   1efdc:	b	1ed5c <__assert_fail@plt+0xd8f4>
   1efe0:	mov	r3, sl
   1efe4:	ldr	fp, [sp, #4]
   1efe8:	b	1efa0 <__assert_fail@plt+0xdb38>
   1efec:	mov	r3, sl
   1eff0:	ldr	sl, [sp, #12]
   1eff4:	b	1ee58 <__assert_fail@plt+0xd9f0>
   1eff8:	ldrbeq	r7, [r1, #1117]	; 0x45d
   1effc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1f000:	subs	r2, r1, #1
   1f004:	bxeq	lr
   1f008:	bcc	1f1e0 <__assert_fail@plt+0xdd78>
   1f00c:	cmp	r0, r1
   1f010:	bls	1f1c4 <__assert_fail@plt+0xdd5c>
   1f014:	tst	r1, r2
   1f018:	beq	1f1d0 <__assert_fail@plt+0xdd68>
   1f01c:	clz	r3, r0
   1f020:	clz	r2, r1
   1f024:	sub	r3, r2, r3
   1f028:	rsbs	r3, r3, #31
   1f02c:	addne	r3, r3, r3, lsl #1
   1f030:	mov	r2, #0
   1f034:	addne	pc, pc, r3, lsl #2
   1f038:	nop			; (mov r0, r0)
   1f03c:	cmp	r0, r1, lsl #31
   1f040:	adc	r2, r2, r2
   1f044:	subcs	r0, r0, r1, lsl #31
   1f048:	cmp	r0, r1, lsl #30
   1f04c:	adc	r2, r2, r2
   1f050:	subcs	r0, r0, r1, lsl #30
   1f054:	cmp	r0, r1, lsl #29
   1f058:	adc	r2, r2, r2
   1f05c:	subcs	r0, r0, r1, lsl #29
   1f060:	cmp	r0, r1, lsl #28
   1f064:	adc	r2, r2, r2
   1f068:	subcs	r0, r0, r1, lsl #28
   1f06c:	cmp	r0, r1, lsl #27
   1f070:	adc	r2, r2, r2
   1f074:	subcs	r0, r0, r1, lsl #27
   1f078:	cmp	r0, r1, lsl #26
   1f07c:	adc	r2, r2, r2
   1f080:	subcs	r0, r0, r1, lsl #26
   1f084:	cmp	r0, r1, lsl #25
   1f088:	adc	r2, r2, r2
   1f08c:	subcs	r0, r0, r1, lsl #25
   1f090:	cmp	r0, r1, lsl #24
   1f094:	adc	r2, r2, r2
   1f098:	subcs	r0, r0, r1, lsl #24
   1f09c:	cmp	r0, r1, lsl #23
   1f0a0:	adc	r2, r2, r2
   1f0a4:	subcs	r0, r0, r1, lsl #23
   1f0a8:	cmp	r0, r1, lsl #22
   1f0ac:	adc	r2, r2, r2
   1f0b0:	subcs	r0, r0, r1, lsl #22
   1f0b4:	cmp	r0, r1, lsl #21
   1f0b8:	adc	r2, r2, r2
   1f0bc:	subcs	r0, r0, r1, lsl #21
   1f0c0:	cmp	r0, r1, lsl #20
   1f0c4:	adc	r2, r2, r2
   1f0c8:	subcs	r0, r0, r1, lsl #20
   1f0cc:	cmp	r0, r1, lsl #19
   1f0d0:	adc	r2, r2, r2
   1f0d4:	subcs	r0, r0, r1, lsl #19
   1f0d8:	cmp	r0, r1, lsl #18
   1f0dc:	adc	r2, r2, r2
   1f0e0:	subcs	r0, r0, r1, lsl #18
   1f0e4:	cmp	r0, r1, lsl #17
   1f0e8:	adc	r2, r2, r2
   1f0ec:	subcs	r0, r0, r1, lsl #17
   1f0f0:	cmp	r0, r1, lsl #16
   1f0f4:	adc	r2, r2, r2
   1f0f8:	subcs	r0, r0, r1, lsl #16
   1f0fc:	cmp	r0, r1, lsl #15
   1f100:	adc	r2, r2, r2
   1f104:	subcs	r0, r0, r1, lsl #15
   1f108:	cmp	r0, r1, lsl #14
   1f10c:	adc	r2, r2, r2
   1f110:	subcs	r0, r0, r1, lsl #14
   1f114:	cmp	r0, r1, lsl #13
   1f118:	adc	r2, r2, r2
   1f11c:	subcs	r0, r0, r1, lsl #13
   1f120:	cmp	r0, r1, lsl #12
   1f124:	adc	r2, r2, r2
   1f128:	subcs	r0, r0, r1, lsl #12
   1f12c:	cmp	r0, r1, lsl #11
   1f130:	adc	r2, r2, r2
   1f134:	subcs	r0, r0, r1, lsl #11
   1f138:	cmp	r0, r1, lsl #10
   1f13c:	adc	r2, r2, r2
   1f140:	subcs	r0, r0, r1, lsl #10
   1f144:	cmp	r0, r1, lsl #9
   1f148:	adc	r2, r2, r2
   1f14c:	subcs	r0, r0, r1, lsl #9
   1f150:	cmp	r0, r1, lsl #8
   1f154:	adc	r2, r2, r2
   1f158:	subcs	r0, r0, r1, lsl #8
   1f15c:	cmp	r0, r1, lsl #7
   1f160:	adc	r2, r2, r2
   1f164:	subcs	r0, r0, r1, lsl #7
   1f168:	cmp	r0, r1, lsl #6
   1f16c:	adc	r2, r2, r2
   1f170:	subcs	r0, r0, r1, lsl #6
   1f174:	cmp	r0, r1, lsl #5
   1f178:	adc	r2, r2, r2
   1f17c:	subcs	r0, r0, r1, lsl #5
   1f180:	cmp	r0, r1, lsl #4
   1f184:	adc	r2, r2, r2
   1f188:	subcs	r0, r0, r1, lsl #4
   1f18c:	cmp	r0, r1, lsl #3
   1f190:	adc	r2, r2, r2
   1f194:	subcs	r0, r0, r1, lsl #3
   1f198:	cmp	r0, r1, lsl #2
   1f19c:	adc	r2, r2, r2
   1f1a0:	subcs	r0, r0, r1, lsl #2
   1f1a4:	cmp	r0, r1, lsl #1
   1f1a8:	adc	r2, r2, r2
   1f1ac:	subcs	r0, r0, r1, lsl #1
   1f1b0:	cmp	r0, r1
   1f1b4:	adc	r2, r2, r2
   1f1b8:	subcs	r0, r0, r1
   1f1bc:	mov	r0, r2
   1f1c0:	bx	lr
   1f1c4:	moveq	r0, #1
   1f1c8:	movne	r0, #0
   1f1cc:	bx	lr
   1f1d0:	clz	r2, r1
   1f1d4:	rsb	r2, r2, #31
   1f1d8:	lsr	r0, r0, r2
   1f1dc:	bx	lr
   1f1e0:	cmp	r0, #0
   1f1e4:	mvnne	r0, #0
   1f1e8:	b	1f55c <__assert_fail@plt+0xe0f4>
   1f1ec:	cmp	r1, #0
   1f1f0:	beq	1f1e0 <__assert_fail@plt+0xdd78>
   1f1f4:	push	{r0, r1, lr}
   1f1f8:	bl	1f000 <__assert_fail@plt+0xdb98>
   1f1fc:	pop	{r1, r2, lr}
   1f200:	mul	r3, r2, r0
   1f204:	sub	r1, r1, r3
   1f208:	bx	lr
   1f20c:	cmp	r1, #0
   1f210:	beq	1f41c <__assert_fail@plt+0xdfb4>
   1f214:	eor	ip, r0, r1
   1f218:	rsbmi	r1, r1, #0
   1f21c:	subs	r2, r1, #1
   1f220:	beq	1f3e8 <__assert_fail@plt+0xdf80>
   1f224:	movs	r3, r0
   1f228:	rsbmi	r3, r0, #0
   1f22c:	cmp	r3, r1
   1f230:	bls	1f3f4 <__assert_fail@plt+0xdf8c>
   1f234:	tst	r1, r2
   1f238:	beq	1f404 <__assert_fail@plt+0xdf9c>
   1f23c:	clz	r2, r3
   1f240:	clz	r0, r1
   1f244:	sub	r2, r0, r2
   1f248:	rsbs	r2, r2, #31
   1f24c:	addne	r2, r2, r2, lsl #1
   1f250:	mov	r0, #0
   1f254:	addne	pc, pc, r2, lsl #2
   1f258:	nop			; (mov r0, r0)
   1f25c:	cmp	r3, r1, lsl #31
   1f260:	adc	r0, r0, r0
   1f264:	subcs	r3, r3, r1, lsl #31
   1f268:	cmp	r3, r1, lsl #30
   1f26c:	adc	r0, r0, r0
   1f270:	subcs	r3, r3, r1, lsl #30
   1f274:	cmp	r3, r1, lsl #29
   1f278:	adc	r0, r0, r0
   1f27c:	subcs	r3, r3, r1, lsl #29
   1f280:	cmp	r3, r1, lsl #28
   1f284:	adc	r0, r0, r0
   1f288:	subcs	r3, r3, r1, lsl #28
   1f28c:	cmp	r3, r1, lsl #27
   1f290:	adc	r0, r0, r0
   1f294:	subcs	r3, r3, r1, lsl #27
   1f298:	cmp	r3, r1, lsl #26
   1f29c:	adc	r0, r0, r0
   1f2a0:	subcs	r3, r3, r1, lsl #26
   1f2a4:	cmp	r3, r1, lsl #25
   1f2a8:	adc	r0, r0, r0
   1f2ac:	subcs	r3, r3, r1, lsl #25
   1f2b0:	cmp	r3, r1, lsl #24
   1f2b4:	adc	r0, r0, r0
   1f2b8:	subcs	r3, r3, r1, lsl #24
   1f2bc:	cmp	r3, r1, lsl #23
   1f2c0:	adc	r0, r0, r0
   1f2c4:	subcs	r3, r3, r1, lsl #23
   1f2c8:	cmp	r3, r1, lsl #22
   1f2cc:	adc	r0, r0, r0
   1f2d0:	subcs	r3, r3, r1, lsl #22
   1f2d4:	cmp	r3, r1, lsl #21
   1f2d8:	adc	r0, r0, r0
   1f2dc:	subcs	r3, r3, r1, lsl #21
   1f2e0:	cmp	r3, r1, lsl #20
   1f2e4:	adc	r0, r0, r0
   1f2e8:	subcs	r3, r3, r1, lsl #20
   1f2ec:	cmp	r3, r1, lsl #19
   1f2f0:	adc	r0, r0, r0
   1f2f4:	subcs	r3, r3, r1, lsl #19
   1f2f8:	cmp	r3, r1, lsl #18
   1f2fc:	adc	r0, r0, r0
   1f300:	subcs	r3, r3, r1, lsl #18
   1f304:	cmp	r3, r1, lsl #17
   1f308:	adc	r0, r0, r0
   1f30c:	subcs	r3, r3, r1, lsl #17
   1f310:	cmp	r3, r1, lsl #16
   1f314:	adc	r0, r0, r0
   1f318:	subcs	r3, r3, r1, lsl #16
   1f31c:	cmp	r3, r1, lsl #15
   1f320:	adc	r0, r0, r0
   1f324:	subcs	r3, r3, r1, lsl #15
   1f328:	cmp	r3, r1, lsl #14
   1f32c:	adc	r0, r0, r0
   1f330:	subcs	r3, r3, r1, lsl #14
   1f334:	cmp	r3, r1, lsl #13
   1f338:	adc	r0, r0, r0
   1f33c:	subcs	r3, r3, r1, lsl #13
   1f340:	cmp	r3, r1, lsl #12
   1f344:	adc	r0, r0, r0
   1f348:	subcs	r3, r3, r1, lsl #12
   1f34c:	cmp	r3, r1, lsl #11
   1f350:	adc	r0, r0, r0
   1f354:	subcs	r3, r3, r1, lsl #11
   1f358:	cmp	r3, r1, lsl #10
   1f35c:	adc	r0, r0, r0
   1f360:	subcs	r3, r3, r1, lsl #10
   1f364:	cmp	r3, r1, lsl #9
   1f368:	adc	r0, r0, r0
   1f36c:	subcs	r3, r3, r1, lsl #9
   1f370:	cmp	r3, r1, lsl #8
   1f374:	adc	r0, r0, r0
   1f378:	subcs	r3, r3, r1, lsl #8
   1f37c:	cmp	r3, r1, lsl #7
   1f380:	adc	r0, r0, r0
   1f384:	subcs	r3, r3, r1, lsl #7
   1f388:	cmp	r3, r1, lsl #6
   1f38c:	adc	r0, r0, r0
   1f390:	subcs	r3, r3, r1, lsl #6
   1f394:	cmp	r3, r1, lsl #5
   1f398:	adc	r0, r0, r0
   1f39c:	subcs	r3, r3, r1, lsl #5
   1f3a0:	cmp	r3, r1, lsl #4
   1f3a4:	adc	r0, r0, r0
   1f3a8:	subcs	r3, r3, r1, lsl #4
   1f3ac:	cmp	r3, r1, lsl #3
   1f3b0:	adc	r0, r0, r0
   1f3b4:	subcs	r3, r3, r1, lsl #3
   1f3b8:	cmp	r3, r1, lsl #2
   1f3bc:	adc	r0, r0, r0
   1f3c0:	subcs	r3, r3, r1, lsl #2
   1f3c4:	cmp	r3, r1, lsl #1
   1f3c8:	adc	r0, r0, r0
   1f3cc:	subcs	r3, r3, r1, lsl #1
   1f3d0:	cmp	r3, r1
   1f3d4:	adc	r0, r0, r0
   1f3d8:	subcs	r3, r3, r1
   1f3dc:	cmp	ip, #0
   1f3e0:	rsbmi	r0, r0, #0
   1f3e4:	bx	lr
   1f3e8:	teq	ip, r0
   1f3ec:	rsbmi	r0, r0, #0
   1f3f0:	bx	lr
   1f3f4:	movcc	r0, #0
   1f3f8:	asreq	r0, ip, #31
   1f3fc:	orreq	r0, r0, #1
   1f400:	bx	lr
   1f404:	clz	r2, r1
   1f408:	rsb	r2, r2, #31
   1f40c:	cmp	ip, #0
   1f410:	lsr	r0, r3, r2
   1f414:	rsbmi	r0, r0, #0
   1f418:	bx	lr
   1f41c:	cmp	r0, #0
   1f420:	mvngt	r0, #-2147483648	; 0x80000000
   1f424:	movlt	r0, #-2147483648	; 0x80000000
   1f428:	b	1f55c <__assert_fail@plt+0xe0f4>
   1f42c:	cmp	r1, #0
   1f430:	beq	1f41c <__assert_fail@plt+0xdfb4>
   1f434:	push	{r0, r1, lr}
   1f438:	bl	1f214 <__assert_fail@plt+0xddac>
   1f43c:	pop	{r1, r2, lr}
   1f440:	mul	r3, r2, r0
   1f444:	sub	r1, r1, r3
   1f448:	bx	lr
   1f44c:	cmp	r3, #0
   1f450:	cmpeq	r2, #0
   1f454:	bne	1f478 <__assert_fail@plt+0xe010>
   1f458:	cmp	r1, #0
   1f45c:	movlt	r1, #-2147483648	; 0x80000000
   1f460:	movlt	r0, #0
   1f464:	blt	1f474 <__assert_fail@plt+0xe00c>
   1f468:	cmpeq	r0, #0
   1f46c:	mvnne	r1, #-2147483648	; 0x80000000
   1f470:	mvnne	r0, #0
   1f474:	b	1f55c <__assert_fail@plt+0xe0f4>
   1f478:	sub	sp, sp, #8
   1f47c:	push	{sp, lr}
   1f480:	cmp	r1, #0
   1f484:	blt	1f4a4 <__assert_fail@plt+0xe03c>
   1f488:	cmp	r3, #0
   1f48c:	blt	1f4d8 <__assert_fail@plt+0xe070>
   1f490:	bl	1f56c <__assert_fail@plt+0xe104>
   1f494:	ldr	lr, [sp, #4]
   1f498:	add	sp, sp, #8
   1f49c:	pop	{r2, r3}
   1f4a0:	bx	lr
   1f4a4:	rsbs	r0, r0, #0
   1f4a8:	sbc	r1, r1, r1, lsl #1
   1f4ac:	cmp	r3, #0
   1f4b0:	blt	1f4fc <__assert_fail@plt+0xe094>
   1f4b4:	bl	1f56c <__assert_fail@plt+0xe104>
   1f4b8:	ldr	lr, [sp, #4]
   1f4bc:	add	sp, sp, #8
   1f4c0:	pop	{r2, r3}
   1f4c4:	rsbs	r0, r0, #0
   1f4c8:	sbc	r1, r1, r1, lsl #1
   1f4cc:	rsbs	r2, r2, #0
   1f4d0:	sbc	r3, r3, r3, lsl #1
   1f4d4:	bx	lr
   1f4d8:	rsbs	r2, r2, #0
   1f4dc:	sbc	r3, r3, r3, lsl #1
   1f4e0:	bl	1f56c <__assert_fail@plt+0xe104>
   1f4e4:	ldr	lr, [sp, #4]
   1f4e8:	add	sp, sp, #8
   1f4ec:	pop	{r2, r3}
   1f4f0:	rsbs	r0, r0, #0
   1f4f4:	sbc	r1, r1, r1, lsl #1
   1f4f8:	bx	lr
   1f4fc:	rsbs	r2, r2, #0
   1f500:	sbc	r3, r3, r3, lsl #1
   1f504:	bl	1f56c <__assert_fail@plt+0xe104>
   1f508:	ldr	lr, [sp, #4]
   1f50c:	add	sp, sp, #8
   1f510:	pop	{r2, r3}
   1f514:	rsbs	r2, r2, #0
   1f518:	sbc	r3, r3, r3, lsl #1
   1f51c:	bx	lr
   1f520:	cmp	r3, #0
   1f524:	cmpeq	r2, #0
   1f528:	bne	1f540 <__assert_fail@plt+0xe0d8>
   1f52c:	cmp	r1, #0
   1f530:	cmpeq	r0, #0
   1f534:	mvnne	r1, #0
   1f538:	mvnne	r0, #0
   1f53c:	b	1f55c <__assert_fail@plt+0xe0f4>
   1f540:	sub	sp, sp, #8
   1f544:	push	{sp, lr}
   1f548:	bl	1f56c <__assert_fail@plt+0xe104>
   1f54c:	ldr	lr, [sp, #4]
   1f550:	add	sp, sp, #8
   1f554:	pop	{r2, r3}
   1f558:	bx	lr
   1f55c:	push	{r1, lr}
   1f560:	mov	r0, #8
   1f564:	bl	11108 <raise@plt>
   1f568:	pop	{r1, pc}
   1f56c:	cmp	r1, r3
   1f570:	cmpeq	r0, r2
   1f574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f578:	mov	r4, r0
   1f57c:	movcc	r0, #0
   1f580:	mov	r5, r1
   1f584:	ldr	lr, [sp, #36]	; 0x24
   1f588:	movcc	r1, r0
   1f58c:	bcc	1f688 <__assert_fail@plt+0xe220>
   1f590:	cmp	r3, #0
   1f594:	clzeq	ip, r2
   1f598:	clzne	ip, r3
   1f59c:	addeq	ip, ip, #32
   1f5a0:	cmp	r5, #0
   1f5a4:	clzeq	r1, r4
   1f5a8:	addeq	r1, r1, #32
   1f5ac:	clzne	r1, r5
   1f5b0:	sub	ip, ip, r1
   1f5b4:	sub	sl, ip, #32
   1f5b8:	lsl	r9, r3, ip
   1f5bc:	rsb	fp, ip, #32
   1f5c0:	orr	r9, r9, r2, lsl sl
   1f5c4:	orr	r9, r9, r2, lsr fp
   1f5c8:	lsl	r8, r2, ip
   1f5cc:	cmp	r5, r9
   1f5d0:	cmpeq	r4, r8
   1f5d4:	movcc	r0, #0
   1f5d8:	movcc	r1, r0
   1f5dc:	bcc	1f5f8 <__assert_fail@plt+0xe190>
   1f5e0:	mov	r0, #1
   1f5e4:	subs	r4, r4, r8
   1f5e8:	lsl	r1, r0, sl
   1f5ec:	orr	r1, r1, r0, lsr fp
   1f5f0:	lsl	r0, r0, ip
   1f5f4:	sbc	r5, r5, r9
   1f5f8:	cmp	ip, #0
   1f5fc:	beq	1f688 <__assert_fail@plt+0xe220>
   1f600:	lsr	r6, r8, #1
   1f604:	orr	r6, r6, r9, lsl #31
   1f608:	lsr	r7, r9, #1
   1f60c:	mov	r2, ip
   1f610:	b	1f634 <__assert_fail@plt+0xe1cc>
   1f614:	subs	r3, r4, r6
   1f618:	sbc	r8, r5, r7
   1f61c:	adds	r3, r3, r3
   1f620:	adc	r8, r8, r8
   1f624:	adds	r4, r3, #1
   1f628:	adc	r5, r8, #0
   1f62c:	subs	r2, r2, #1
   1f630:	beq	1f650 <__assert_fail@plt+0xe1e8>
   1f634:	cmp	r5, r7
   1f638:	cmpeq	r4, r6
   1f63c:	bcs	1f614 <__assert_fail@plt+0xe1ac>
   1f640:	adds	r4, r4, r4
   1f644:	adc	r5, r5, r5
   1f648:	subs	r2, r2, #1
   1f64c:	bne	1f634 <__assert_fail@plt+0xe1cc>
   1f650:	lsr	r3, r4, ip
   1f654:	orr	r3, r3, r5, lsl fp
   1f658:	lsr	r2, r5, ip
   1f65c:	orr	r3, r3, r5, lsr sl
   1f660:	adds	r0, r0, r4
   1f664:	mov	r4, r3
   1f668:	lsl	r3, r2, ip
   1f66c:	orr	r3, r3, r4, lsl sl
   1f670:	lsl	ip, r4, ip
   1f674:	orr	r3, r3, r4, lsr fp
   1f678:	adc	r1, r1, r5
   1f67c:	subs	r0, r0, ip
   1f680:	mov	r5, r2
   1f684:	sbc	r1, r1, r3
   1f688:	cmp	lr, #0
   1f68c:	strdne	r4, [lr]
   1f690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f694:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f698:	mov	r7, r0
   1f69c:	ldr	r6, [pc, #72]	; 1f6ec <__assert_fail@plt+0xe284>
   1f6a0:	ldr	r5, [pc, #72]	; 1f6f0 <__assert_fail@plt+0xe288>
   1f6a4:	add	r6, pc, r6
   1f6a8:	add	r5, pc, r5
   1f6ac:	sub	r6, r6, r5
   1f6b0:	mov	r8, r1
   1f6b4:	mov	r9, r2
   1f6b8:	bl	110d0 <calloc@plt-0x20>
   1f6bc:	asrs	r6, r6, #2
   1f6c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f6c4:	mov	r4, #0
   1f6c8:	add	r4, r4, #1
   1f6cc:	ldr	r3, [r5], #4
   1f6d0:	mov	r2, r9
   1f6d4:	mov	r1, r8
   1f6d8:	mov	r0, r7
   1f6dc:	blx	r3
   1f6e0:	cmp	r6, r4
   1f6e4:	bne	1f6c8 <__assert_fail@plt+0xe260>
   1f6e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f6ec:	andeq	r3, r1, r8, asr r8
   1f6f0:	andeq	r3, r1, r0, asr r8
   1f6f4:	bx	lr
   1f6f8:	ldr	r3, [pc, #12]	; 1f70c <__assert_fail@plt+0xe2a4>
   1f6fc:	mov	r1, #0
   1f700:	add	r3, pc, r3
   1f704:	ldr	r2, [r3]
   1f708:	b	11354 <__cxa_atexit@plt>
   1f70c:	andeq	r3, r1, r8, lsr sl

Disassembly of section .fini:

0001f710 <.fini>:
   1f710:	push	{r3, lr}
   1f714:	pop	{r3, pc}
