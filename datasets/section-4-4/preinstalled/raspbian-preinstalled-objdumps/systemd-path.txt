
raspbian-preinstalled/systemd-path:     file format elf32-littlearm


Disassembly of section .init:

000009ec <.init>:
 9ec:	push	{r3, lr}
 9f0:	bl	1138 <log_oom_internal@plt+0x618>
 9f4:	pop	{r3, pc}

Disassembly of section .plt:

000009f8 <version@plt-0x14>:
 9f8:	push	{lr}		; (str lr, [sp, #-4]!)
 9fc:	ldr	lr, [pc, #4]	; a08 <version@plt-0x4>
 a00:	add	lr, pc, lr
 a04:	ldr	pc, [lr, #8]!
 a08:	andeq	r1, r1, r8, asr r5

00000a0c <version@plt>:
 a0c:	add	ip, pc, #0, 12
 a10:	add	ip, ip, #69632	; 0x11000
 a14:	ldr	pc, [ip, #1368]!	; 0x558

00000a18 <free@plt>:
 a18:	add	ip, pc, #0, 12
 a1c:	add	ip, ip, #69632	; 0x11000
 a20:	ldr	pc, [ip, #1360]!	; 0x550

00000a24 <log_open@plt>:
 a24:	add	ip, pc, #0, 12
 a28:	add	ip, ip, #69632	; 0x11000
 a2c:	ldr	pc, [ip, #1352]!	; 0x548

00000a30 <sd_path_home@plt>:
 a30:	add	ip, pc, #0, 12
 a34:	add	ip, ip, #69632	; 0x11000
 a38:	ldr	pc, [ip, #1344]!	; 0x540

00000a3c <log_assert_failed_unreachable_realm@plt>:
 a3c:	add	ip, pc, #0, 12
 a40:	add	ip, ip, #69632	; 0x11000
 a44:	ldr	pc, [ip, #1336]!	; 0x538

00000a48 <ask_password_agent_close@plt>:
 a48:	add	ip, pc, #0, 12
 a4c:	add	ip, ip, #69632	; 0x11000
 a50:	ldr	pc, [ip, #1328]!	; 0x530

00000a54 <polkit_agent_close@plt>:
 a54:	add	ip, pc, #0, 12
 a58:	add	ip, ip, #69632	; 0x11000
 a5c:	ldr	pc, [ip, #1320]!	; 0x528

00000a60 <mac_selinux_finish@plt>:
 a60:	add	ip, pc, #0, 12
 a64:	add	ip, ip, #69632	; 0x11000
 a68:	ldr	pc, [ip, #1312]!	; 0x520

00000a6c <puts@plt>:
 a6c:	add	ip, pc, #0, 12
 a70:	add	ip, ip, #69632	; 0x11000
 a74:	ldr	pc, [ip, #1304]!	; 0x518

00000a78 <log_get_max_level_realm@plt>:
 a78:	add	ip, pc, #0, 12
 a7c:	add	ip, ip, #69632	; 0x11000
 a80:	ldr	pc, [ip, #1296]!	; 0x510

00000a84 <abort@plt>:
 a84:	add	ip, pc, #0, 12
 a88:	add	ip, ip, #69632	; 0x11000
 a8c:	ldr	pc, [ip, #1288]!	; 0x508

00000a90 <__stack_chk_fail@plt>:
 a90:	add	ip, pc, #0, 12
 a94:	add	ip, ip, #69632	; 0x11000
 a98:	ldr	pc, [ip, #1280]!	; 0x500

00000a9c <terminal_urlify_man@plt>:
 a9c:	add	ip, pc, #0, 12
 aa0:	add	ip, ip, #69632	; 0x11000
 aa4:	ldr	pc, [ip, #1272]!	; 0x4f8

00000aa8 <getopt_long@plt>:
 aa8:	add	ip, pc, #0, 12
 aac:	add	ip, ip, #69632	; 0x11000
 ab0:	ldr	pc, [ip, #1264]!	; 0x4f0

00000ab4 <pager_close@plt>:
 ab4:	add	ip, pc, #0, 12
 ab8:	add	ip, ip, #69632	; 0x11000
 abc:	ldr	pc, [ip, #1256]!	; 0x4e8

00000ac0 <strcmp@plt>:
 ac0:	add	ip, pc, #0, 12
 ac4:	add	ip, ip, #69632	; 0x11000
 ac8:	ldr	pc, [ip, #1248]!	; 0x4e0

00000acc <log_parse_environment_realm@plt>:
 acc:	add	ip, pc, #0, 12
 ad0:	add	ip, ip, #69632	; 0x11000
 ad4:	ldr	pc, [ip, #1240]!	; 0x4d8

00000ad8 <log_assert_failed_realm@plt>:
 ad8:	add	ip, pc, #0, 12
 adc:	add	ip, ip, #69632	; 0x11000
 ae0:	ldr	pc, [ip, #1232]!	; 0x4d0

00000ae4 <log_internal_realm@plt>:
 ae4:	add	ip, pc, #0, 12
 ae8:	add	ip, ip, #69632	; 0x11000
 aec:	ldr	pc, [ip, #1224]!	; 0x4c8

00000af0 <__libc_start_main@plt>:
 af0:	add	ip, pc, #0, 12
 af4:	add	ip, ip, #69632	; 0x11000
 af8:	ldr	pc, [ip, #1216]!	; 0x4c0

00000afc <__gmon_start__@plt>:
 afc:	add	ip, pc, #0, 12
 b00:	add	ip, ip, #69632	; 0x11000
 b04:	ldr	pc, [ip, #1208]!	; 0x4b8

00000b08 <__cxa_finalize@plt>:
 b08:	add	ip, pc, #0, 12
 b0c:	add	ip, ip, #69632	; 0x11000
 b10:	ldr	pc, [ip, #1200]!	; 0x4b0

00000b14 <__printf_chk@plt>:
 b14:	add	ip, pc, #0, 12
 b18:	add	ip, ip, #69632	; 0x11000
 b1c:	ldr	pc, [ip, #1192]!	; 0x4a8

00000b20 <log_oom_internal@plt>:
 b20:	add	ip, pc, #0, 12
 b24:	add	ip, ip, #69632	; 0x11000
 b28:	ldr	pc, [ip, #1184]!	; 0x4a0

Disassembly of section .text:

00000b2c <.text>:
     b2c:	ldr	r2, [pc, #1288]	; 103c <log_oom_internal@plt+0x51c>
     b30:	ldr	r3, [pc, #1288]	; 1040 <log_oom_internal@plt+0x520>
     b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b38:	add	r2, pc, r2
     b3c:	sub	sp, sp, #52	; 0x34
     b40:	mov	sl, r0
     b44:	str	r2, [sp, #20]
     b48:	ldr	r3, [r2, r3]
     b4c:	mov	r0, #0
     b50:	str	r3, [sp, #28]
     b54:	ldr	r3, [r3]
     b58:	mov	r7, r1
     b5c:	str	r3, [sp, #44]	; 0x2c
     b60:	bl	acc <log_parse_environment_realm@plt>
     b64:	bl	a24 <log_open@plt>
     b68:	cmp	sl, #0
     b6c:	blt	fd0 <log_oom_internal@plt+0x4b0>
     b70:	cmp	r7, #0
     b74:	beq	ff8 <log_oom_internal@plt+0x4d8>
     b78:	ldr	r6, [pc, #1220]	; 1044 <log_oom_internal@plt+0x524>
     b7c:	ldr	r5, [pc, #1220]	; 1048 <log_oom_internal@plt+0x528>
     b80:	ldr	r8, [pc, #1220]	; 104c <log_oom_internal@plt+0x52c>
     b84:	add	r6, pc, r6
     b88:	add	r5, pc, r5
     b8c:	mov	r4, #0
     b90:	str	r4, [sp]
     b94:	mov	r3, r6
     b98:	mov	r2, r5
     b9c:	mov	r1, r7
     ba0:	mov	r0, sl
     ba4:	bl	aa8 <getopt_long@plt>
     ba8:	cmp	r0, #0
     bac:	blt	1020 <log_oom_internal@plt+0x500>
     bb0:	cmp	r0, #104	; 0x68
     bb4:	beq	e48 <log_oom_internal@plt+0x328>
     bb8:	ble	e10 <log_oom_internal@plt+0x2f0>
     bbc:	cmp	r0, #256	; 0x100
     bc0:	beq	bec <log_oom_internal@plt+0xcc>
     bc4:	cmp	r0, r8
     bc8:	bne	e20 <log_oom_internal@plt+0x300>
     bcc:	ldr	r3, [pc, #1148]	; 1050 <log_oom_internal@plt+0x530>
     bd0:	ldr	r1, [sp, #20]
     bd4:	ldr	r2, [pc, #1144]	; 1054 <log_oom_internal@plt+0x534>
     bd8:	ldr	r3, [r1, r3]
     bdc:	add	r2, pc, r2
     be0:	ldr	r3, [r3]
     be4:	str	r3, [r2]
     be8:	b	b8c <log_oom_internal@plt+0x6c>
     bec:	bl	a0c <version@plt>
     bf0:	str	r0, [sp, #16]
     bf4:	ldr	r3, [sp, #16]
     bf8:	cmp	r3, #0
     bfc:	ble	d0c <log_oom_internal@plt+0x1ec>
     c00:	ldr	r3, [pc, #1104]	; 1058 <log_oom_internal@plt+0x538>
     c04:	ldr	r2, [sp, #20]
     c08:	ldr	r3, [r2, r3]
     c0c:	ldr	r3, [r3]
     c10:	cmp	sl, r3
     c14:	ble	ed4 <log_oom_internal@plt+0x3b4>
     c18:	sub	r3, r3, #-1073741823	; 0xc0000001
     c1c:	ldr	fp, [pc, #1080]	; 105c <log_oom_internal@plt+0x53c>
     c20:	sub	r1, r7, #4
     c24:	ldr	r2, [pc, #1076]	; 1060 <log_oom_internal@plt+0x540>
     c28:	ldr	r9, [pc, #1076]	; 1064 <log_oom_internal@plt+0x544>
     c2c:	ldr	r8, [pc, #1076]	; 1068 <log_oom_internal@plt+0x548>
     c30:	add	fp, pc, fp
     c34:	add	r7, r7, r3, lsl #2
     c38:	add	r3, r1, sl, lsl #2
     c3c:	add	r2, pc, r2
     c40:	str	r3, [sp, #24]
     c44:	add	r9, pc, r9
     c48:	add	r3, fp, #20
     c4c:	add	r8, pc, r8
     c50:	str	r3, [sp, #32]
     c54:	add	r3, r2, #20
     c58:	str	r3, [sp, #36]	; 0x24
     c5c:	ldr	r5, [r7, #4]!
     c60:	add	r4, r9, #64	; 0x40
     c64:	mov	r0, r8
     c68:	mov	sl, #0
     c6c:	mov	fp, #0
     c70:	b	c8c <log_oom_internal@plt+0x16c>
     c74:	adds	sl, sl, #1
     c78:	adc	fp, fp, #0
     c7c:	cmp	fp, #0
     c80:	cmpeq	sl, #40	; 0x28
     c84:	beq	d94 <log_oom_internal@plt+0x274>
     c88:	ldr	r0, [r4, #4]!
     c8c:	mov	r1, r5
     c90:	bl	ac0 <strcmp@plt>
     c94:	cmp	r0, #0
     c98:	bne	c74 <log_oom_internal@plt+0x154>
     c9c:	ldr	lr, [pc, #968]	; 106c <log_oom_internal@plt+0x54c>
     ca0:	add	ip, sp, #48	; 0x30
     ca4:	add	lr, pc, lr
     ca8:	mov	r6, r0
     cac:	str	r6, [ip, #-8]!
     cb0:	mov	r0, sl
     cb4:	mov	r1, fp
     cb8:	ldr	r2, [lr]
     cbc:	mov	r3, ip
     cc0:	bl	a30 <sd_path_home@plt>
     cc4:	subs	r4, r0, #0
     cc8:	bge	d80 <log_oom_internal@plt+0x260>
     ccc:	mov	r0, r6
     cd0:	bl	a78 <log_get_max_level_realm@plt>
     cd4:	cmp	r0, #2
     cd8:	rsble	r4, r4, #0
     cdc:	uxtble	r4, r4
     ce0:	rsble	r4, r4, #0
     ce4:	bgt	dd8 <log_oom_internal@plt+0x2b8>
     ce8:	ldr	r0, [sp, #40]	; 0x28
     cec:	bl	a18 <free@plt>
     cf0:	ldr	r3, [sp, #16]
     cf4:	cmp	r4, #0
     cf8:	movlt	r3, r4
     cfc:	str	r3, [sp, #16]
     d00:	ldr	r3, [sp, #24]
     d04:	cmp	r3, r7
     d08:	bne	c5c <log_oom_internal@plt+0x13c>
     d0c:	ldr	r3, [pc, #860]	; 1070 <log_oom_internal@plt+0x550>
     d10:	ldr	r2, [sp, #20]
     d14:	ldr	r4, [r2, r3]
     d18:	cmp	r4, #0
     d1c:	beq	d4c <log_oom_internal@plt+0x22c>
     d20:	ldr	r3, [pc, #844]	; 1074 <log_oom_internal@plt+0x554>
     d24:	add	r4, r4, #3
     d28:	bic	r4, r4, #3
     d2c:	ldr	r5, [r2, r3]
     d30:	cmp	r4, r5
     d34:	bcs	d4c <log_oom_internal@plt+0x22c>
     d38:	ldm	r4, {r0, r3}
     d3c:	add	r4, r4, #8
     d40:	blx	r3
     d44:	cmp	r4, r5
     d48:	bcc	d38 <log_oom_internal@plt+0x218>
     d4c:	bl	a48 <ask_password_agent_close@plt>
     d50:	bl	a54 <polkit_agent_close@plt>
     d54:	bl	a60 <mac_selinux_finish@plt>
     d58:	bl	ab4 <pager_close@plt>
     d5c:	ldr	r3, [sp, #28]
     d60:	ldr	r2, [sp, #44]	; 0x2c
     d64:	ldr	r1, [sp, #16]
     d68:	ldr	r3, [r3]
     d6c:	cmp	r2, r3
     d70:	lsr	r0, r1, #31
     d74:	bne	1038 <log_oom_internal@plt+0x518>
     d78:	add	sp, sp, #52	; 0x34
     d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d80:	ldr	r0, [sp, #40]	; 0x28
     d84:	bl	a6c <puts@plt>
     d88:	ldr	r0, [sp, #40]	; 0x28
     d8c:	bl	a18 <free@plt>
     d90:	b	d00 <log_oom_internal@plt+0x1e0>
     d94:	mov	r0, #0
     d98:	bl	a78 <log_get_max_level_realm@plt>
     d9c:	cmp	r0, #2
     da0:	ble	102c <log_oom_internal@plt+0x50c>
     da4:	ldr	r3, [pc, #716]	; 1078 <log_oom_internal@plt+0x558>
     da8:	ldr	r2, [sp, #32]
     dac:	add	r3, pc, r3
     db0:	str	r5, [sp, #8]
     db4:	strd	r2, [sp]
     db8:	ldr	r2, [pc, #700]	; 107c <log_oom_internal@plt+0x55c>
     dbc:	mov	r3, #104	; 0x68
     dc0:	add	r2, pc, r2
     dc4:	ldr	r1, [pc, #692]	; 1080 <log_oom_internal@plt+0x560>
     dc8:	mov	r0, #3
     dcc:	bl	ae4 <log_internal_realm@plt>
     dd0:	mov	r4, r0
     dd4:	b	cf0 <log_oom_internal@plt+0x1d0>
     dd8:	ldr	r2, [sp, #36]	; 0x24
     ddc:	ldr	r3, [pc, #672]	; 1084 <log_oom_internal@plt+0x564>
     de0:	str	r2, [sp]
     de4:	ldr	r2, [pc, #668]	; 1088 <log_oom_internal@plt+0x568>
     de8:	add	r3, pc, r3
     dec:	mov	r1, r4
     df0:	str	r3, [sp, #4]
     df4:	str	r5, [sp, #8]
     df8:	mov	r3, #96	; 0x60
     dfc:	add	r2, pc, r2
     e00:	mov	r0, #3
     e04:	bl	ae4 <log_internal_realm@plt>
     e08:	mov	r4, r0
     e0c:	b	ce8 <log_oom_internal@plt+0x1c8>
     e10:	cmp	r0, #63	; 0x3f
     e14:	mvneq	r3, #21
     e18:	streq	r3, [sp, #16]
     e1c:	beq	d0c <log_oom_internal@plt+0x1ec>
     e20:	ldr	r2, [pc, #612]	; 108c <log_oom_internal@plt+0x56c>
     e24:	ldr	r1, [pc, #612]	; 1090 <log_oom_internal@plt+0x570>
     e28:	add	r2, pc, r2
     e2c:	str	r2, [sp]
     e30:	ldr	r2, [pc, #604]	; 1094 <log_oom_internal@plt+0x574>
     e34:	mov	r3, #165	; 0xa5
     e38:	add	r2, pc, r2
     e3c:	add	r1, pc, r1
     e40:	mov	r0, #0
     e44:	bl	a3c <log_assert_failed_unreachable_realm@plt>
     e48:	add	r9, sp, #48	; 0x30
     e4c:	ldr	r1, [pc, #580]	; 1098 <log_oom_internal@plt+0x578>
     e50:	ldr	r0, [pc, #580]	; 109c <log_oom_internal@plt+0x57c>
     e54:	str	r4, [r9, #-8]!
     e58:	add	r1, pc, r1
     e5c:	add	r0, pc, r0
     e60:	mov	r2, r9
     e64:	bl	a9c <terminal_urlify_man@plt>
     e68:	cmp	r0, #0
     e6c:	blt	ea4 <log_oom_internal@plt+0x384>
     e70:	ldr	r0, [sp, #20]
     e74:	ldr	r2, [pc, #548]	; 10a0 <log_oom_internal@plt+0x580>
     e78:	ldr	r1, [pc, #548]	; 10a4 <log_oom_internal@plt+0x584>
     e7c:	ldr	r3, [sp, #40]	; 0x28
     e80:	ldr	r2, [r0, r2]
     e84:	add	r1, pc, r1
     e88:	mov	r0, #1
     e8c:	ldr	r2, [r2]
     e90:	str	r4, [sp, #16]
     e94:	bl	b14 <__printf_chk@plt>
     e98:	ldr	r0, [sp, #40]	; 0x28
     e9c:	bl	a18 <free@plt>
     ea0:	b	d0c <log_oom_internal@plt+0x1ec>
     ea4:	ldr	r3, [pc, #508]	; 10a8 <log_oom_internal@plt+0x588>
     ea8:	ldr	r1, [pc, #508]	; 10ac <log_oom_internal@plt+0x58c>
     eac:	add	r3, pc, r3
     eb0:	mov	r0, r4
     eb4:	add	r3, r3, #12
     eb8:	mov	r2, #113	; 0x71
     ebc:	add	r1, pc, r1
     ec0:	bl	b20 <log_oom_internal@plt>
     ec4:	str	r0, [sp, #16]
     ec8:	ldr	r0, [sp, #40]	; 0x28
     ecc:	bl	a18 <free@plt>
     ed0:	b	bf4 <log_oom_internal@plt+0xd4>
     ed4:	ldr	r3, [pc, #468]	; 10b0 <log_oom_internal@plt+0x590>
     ed8:	ldr	sl, [pc, #468]	; 10b4 <log_oom_internal@plt+0x594>
     edc:	add	r3, pc, r3
     ee0:	add	r3, r3, #32
     ee4:	ldr	fp, [pc, #460]	; 10b8 <log_oom_internal@plt+0x598>
     ee8:	add	sl, pc, sl
     eec:	str	r3, [sp, #24]
     ef0:	mov	r3, #0
     ef4:	add	r4, sl, #64	; 0x40
     ef8:	add	fp, pc, fp
     efc:	add	sl, sl, #224	; 0xe0
     f00:	str	r3, [sp, #16]
     f04:	mov	r6, #0
     f08:	mov	r7, #0
     f0c:	add	r9, sp, #40	; 0x28
     f10:	b	f48 <log_oom_internal@plt+0x428>
     f14:	ldr	r1, [pc, #416]	; 10bc <log_oom_internal@plt+0x59c>
     f18:	ldr	r3, [sp, #40]	; 0x28
     f1c:	ldr	r2, [r4]
     f20:	add	r1, pc, r1
     f24:	mov	r0, #1
     f28:	bl	b14 <__printf_chk@plt>
     f2c:	ldr	r0, [sp, #40]	; 0x28
     f30:	bl	a18 <free@plt>
     f34:	adds	r6, r6, #1
     f38:	add	r4, r4, #4
     f3c:	adc	r7, r7, #0
     f40:	cmp	sl, r4
     f44:	beq	d0c <log_oom_internal@plt+0x1ec>
     f48:	mov	r8, #0
     f4c:	mov	r3, r9
     f50:	ldr	r2, [fp]
     f54:	mov	r0, r6
     f58:	mov	r1, r7
     f5c:	str	r8, [sp, #40]	; 0x28
     f60:	bl	a30 <sd_path_home@plt>
     f64:	cmn	r0, #6
     f68:	mov	r5, r0
     f6c:	beq	f8c <log_oom_internal@plt+0x46c>
     f70:	cmp	r0, r8
     f74:	bge	f14 <log_oom_internal@plt+0x3f4>
     f78:	mov	r0, r8
     f7c:	bl	a78 <log_get_max_level_realm@plt>
     f80:	cmp	r0, #2
     f84:	strle	r5, [sp, #16]
     f88:	bgt	f98 <log_oom_internal@plt+0x478>
     f8c:	ldr	r0, [sp, #40]	; 0x28
     f90:	bl	a18 <free@plt>
     f94:	b	f34 <log_oom_internal@plt+0x414>
     f98:	ldr	r2, [r4]
     f9c:	ldr	r3, [pc, #284]	; 10c0 <log_oom_internal@plt+0x5a0>
     fa0:	str	r2, [sp, #8]
     fa4:	ldr	r2, [sp, #24]
     fa8:	add	r3, pc, r3
     fac:	ldr	r1, [sp, #16]
     fb0:	strd	r2, [sp]
     fb4:	ldr	r2, [pc, #264]	; 10c4 <log_oom_internal@plt+0x5a4>
     fb8:	mov	r3, #75	; 0x4b
     fbc:	add	r2, pc, r2
     fc0:	mov	r0, #3
     fc4:	str	r5, [sp, #16]
     fc8:	bl	ae4 <log_internal_realm@plt>
     fcc:	b	f8c <log_oom_internal@plt+0x46c>
     fd0:	ldr	r2, [pc, #240]	; 10c8 <log_oom_internal@plt+0x5a8>
     fd4:	ldr	r1, [pc, #240]	; 10cc <log_oom_internal@plt+0x5ac>
     fd8:	add	r2, pc, r2
     fdc:	str	r2, [sp]
     fe0:	ldr	r2, [pc, #232]	; 10d0 <log_oom_internal@plt+0x5b0>
     fe4:	mov	r3, #144	; 0x90
     fe8:	add	r2, pc, r2
     fec:	add	r1, pc, r1
     ff0:	mov	r0, #0
     ff4:	bl	ad8 <log_assert_failed_realm@plt>
     ff8:	ldr	r3, [pc, #212]	; 10d4 <log_oom_internal@plt+0x5b4>
     ffc:	ldr	r2, [pc, #212]	; 10d8 <log_oom_internal@plt+0x5b8>
    1000:	ldr	r1, [pc, #212]	; 10dc <log_oom_internal@plt+0x5bc>
    1004:	add	r3, pc, r3
    1008:	str	r3, [sp]
    100c:	mov	r0, r7
    1010:	mov	r3, #145	; 0x91
    1014:	add	r2, pc, r2
    1018:	add	r1, pc, r1
    101c:	bl	ad8 <log_assert_failed_realm@plt>
    1020:	mov	r3, #1
    1024:	str	r3, [sp, #16]
    1028:	b	c00 <log_oom_internal@plt+0xe0>
    102c:	mvn	r3, #94	; 0x5e
    1030:	str	r3, [sp, #16]
    1034:	b	d00 <log_oom_internal@plt+0x1e0>
    1038:	bl	a90 <__stack_chk_fail@plt>
    103c:	andeq	r1, r1, r0, lsr #8
    1040:	andeq	r0, r0, ip, rrx
    1044:	andeq	r1, r1, r4, ror #3
    1048:	andeq	r0, r0, r0, asr sl
    104c:	andeq	r0, r0, r1, lsl #2
    1050:	andeq	r0, r0, r8, ror r0
    1054:	andeq	r1, r1, r4, lsr #8
    1058:	andeq	r0, r0, r0, ror r0
    105c:	muleq	r0, r0, r6
    1060:	andeq	r0, r0, r4, lsl #13
    1064:	andeq	r1, r1, r4, lsr #2
    1068:	andeq	r0, r0, r0, lsr #13
    106c:	andeq	r1, r1, ip, asr r3
    1070:	andeq	r0, r0, ip, ror r0
    1074:	andeq	r0, r0, r0, lsl #1
    1078:	andeq	r0, r0, ip, lsl #13
    107c:	andeq	r0, r0, r8, lsr r5
    1080:	andmi	r0, r0, pc, asr r0
    1084:	andeq	r0, r0, r8, lsr r6
    1088:	strdeq	r0, [r0], -ip
    108c:	muleq	r0, r8, r4
    1090:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1094:	andeq	r0, r0, r0, asr #9
    1098:	andeq	r0, r0, r8, asr #9
    109c:	andeq	r0, r0, r8, asr #9
    10a0:	muleq	r0, r0, r0
    10a4:			; <UNDEFINED> instruction: 0x000004b0
    10a8:	andeq	r0, r0, r4, lsl r4
    10ac:	andeq	r0, r0, ip, lsr r4
    10b0:	andeq	r0, r0, r4, ror #7
    10b4:	andeq	r0, r1, r0, lsl #29
    10b8:	andeq	r1, r1, r8, lsl #2
    10bc:	andeq	r0, r0, ip, lsr #10
    10c0:	andeq	r0, r0, r8, ror r4
    10c4:	andeq	r0, r0, ip, lsr r3
    10c8:	andeq	r0, r0, r8, ror #5
    10cc:	andeq	r0, r0, r0, lsr #6
    10d0:	andeq	r0, r0, r0, lsl r3
    10d4:			; <UNDEFINED> instruction: 0x000002bc
    10d8:	andeq	r0, r0, r4, ror #5
    10dc:	andeq	r0, r0, r0, lsl #6
    10e0:	mov	fp, #0
    10e4:	mov	lr, #0
    10e8:	pop	{r1}		; (ldr r1, [sp], #4)
    10ec:	mov	r2, sp
    10f0:	push	{r2}		; (str r2, [sp, #-4]!)
    10f4:	push	{r0}		; (str r0, [sp, #-4]!)
    10f8:	ldr	sl, [pc, #40]	; 1128 <log_oom_internal@plt+0x608>
    10fc:	add	r3, pc, #36	; 0x24
    1100:	add	sl, sl, r3
    1104:	ldr	ip, [pc, #32]	; 112c <log_oom_internal@plt+0x60c>
    1108:	ldr	ip, [sl, ip]
    110c:	push	{ip}		; (str ip, [sp, #-4]!)
    1110:	ldr	r3, [pc, #24]	; 1130 <log_oom_internal@plt+0x610>
    1114:	ldr	r3, [sl, r3]
    1118:	ldr	r0, [pc, #20]	; 1134 <log_oom_internal@plt+0x614>
    111c:	ldr	r0, [sl, r0]
    1120:	bl	af0 <__libc_start_main@plt>
    1124:	bl	a84 <abort@plt>
    1128:	andeq	r0, r1, r8, lsr lr
    112c:	andeq	r0, r0, ip, lsl #1
    1130:	andeq	r0, r0, r4, lsl #1
    1134:	andeq	r0, r0, r4, ror r0
    1138:	ldr	r3, [pc, #20]	; 1154 <log_oom_internal@plt+0x634>
    113c:	ldr	r2, [pc, #20]	; 1158 <log_oom_internal@plt+0x638>
    1140:	add	r3, pc, r3
    1144:	ldr	r2, [r3, r2]
    1148:	cmp	r2, #0
    114c:	bxeq	lr
    1150:	b	afc <__gmon_start__@plt>
    1154:	andeq	r0, r1, r8, lsl lr
    1158:	muleq	r0, r4, r0
    115c:	ldr	r0, [pc, #44]	; 1190 <log_oom_internal@plt+0x670>
    1160:	ldr	r3, [pc, #44]	; 1194 <log_oom_internal@plt+0x674>
    1164:	add	r0, pc, r0
    1168:	add	r3, pc, r3
    116c:	cmp	r3, r0
    1170:	ldr	r3, [pc, #32]	; 1198 <log_oom_internal@plt+0x678>
    1174:	add	r3, pc, r3
    1178:	bxeq	lr
    117c:	ldr	r2, [pc, #24]	; 119c <log_oom_internal@plt+0x67c>
    1180:	ldr	r3, [r3, r2]
    1184:	cmp	r3, #0
    1188:	bxeq	lr
    118c:	bx	r3
    1190:	muleq	r1, r8, lr
    1194:	muleq	r1, r4, lr
    1198:	andeq	r0, r1, r4, ror #27
    119c:	andeq	r0, r0, r8, lsl #1
    11a0:	ldr	r0, [pc, #56]	; 11e0 <log_oom_internal@plt+0x6c0>
    11a4:	ldr	r3, [pc, #56]	; 11e4 <log_oom_internal@plt+0x6c4>
    11a8:	add	r0, pc, r0
    11ac:	add	r3, pc, r3
    11b0:	sub	r1, r3, r0
    11b4:	ldr	r3, [pc, #44]	; 11e8 <log_oom_internal@plt+0x6c8>
    11b8:	asr	r1, r1, #2
    11bc:	add	r3, pc, r3
    11c0:	add	r1, r1, r1, lsr #31
    11c4:	asrs	r1, r1, #1
    11c8:	bxeq	lr
    11cc:	ldr	r2, [pc, #24]	; 11ec <log_oom_internal@plt+0x6cc>
    11d0:	ldr	r3, [r3, r2]
    11d4:	cmp	r3, #0
    11d8:	bxeq	lr
    11dc:	bx	r3
    11e0:	andeq	r0, r1, r4, asr lr
    11e4:	andeq	r0, r1, r0, asr lr
    11e8:	muleq	r1, ip, sp
    11ec:	muleq	r0, r8, r0
    11f0:	ldr	r3, [pc, #76]	; 1244 <log_oom_internal@plt+0x724>
    11f4:	ldr	r2, [pc, #76]	; 1248 <log_oom_internal@plt+0x728>
    11f8:	add	r3, pc, r3
    11fc:	add	r2, pc, r2
    1200:	ldrb	r3, [r3]
    1204:	cmp	r3, #0
    1208:	bxne	lr
    120c:	ldr	r3, [pc, #56]	; 124c <log_oom_internal@plt+0x72c>
    1210:	push	{r4, lr}
    1214:	ldr	r3, [r2, r3]
    1218:	cmp	r3, #0
    121c:	beq	122c <log_oom_internal@plt+0x70c>
    1220:	ldr	r3, [pc, #40]	; 1250 <log_oom_internal@plt+0x730>
    1224:	ldr	r0, [pc, r3]
    1228:	bl	b08 <__cxa_finalize@plt>
    122c:	bl	115c <log_oom_internal@plt+0x63c>
    1230:	ldr	r3, [pc, #28]	; 1254 <log_oom_internal@plt+0x734>
    1234:	mov	r2, #1
    1238:	add	r3, pc, r3
    123c:	strb	r2, [r3]
    1240:	pop	{r4, pc}
    1244:	andeq	r0, r1, r4, lsl #28
    1248:	andeq	r0, r1, ip, asr sp
    124c:	muleq	r0, ip, r0
    1250:	ldrdeq	r0, [r1], -r4
    1254:	andeq	r0, r1, r4, asr #27
    1258:	b	11a0 <log_oom_internal@plt+0x680>
    125c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    1260:	mov	r7, r0
    1264:	ldr	r6, [pc, #72]	; 12b4 <log_oom_internal@plt+0x794>
    1268:	ldr	r5, [pc, #72]	; 12b8 <log_oom_internal@plt+0x798>
    126c:	add	r6, pc, r6
    1270:	add	r5, pc, r5
    1274:	sub	r6, r6, r5
    1278:	mov	r8, r1
    127c:	mov	r9, r2
    1280:	bl	9ec <version@plt-0x20>
    1284:	asrs	r6, r6, #2
    1288:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    128c:	mov	r4, #0
    1290:	add	r4, r4, #1
    1294:	ldr	r3, [r5], #4
    1298:	mov	r2, r9
    129c:	mov	r1, r8
    12a0:	mov	r0, r7
    12a4:	blx	r3
    12a8:	cmp	r6, r4
    12ac:	bne	1290 <log_oom_internal@plt+0x770>
    12b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    12b4:	strdeq	r0, [r1], -r8
    12b8:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
    12bc:	bx	lr

Disassembly of section .fini:

000012c0 <.fini>:
    12c0:	push	{r3, lr}
    12c4:	pop	{r3, pc}
